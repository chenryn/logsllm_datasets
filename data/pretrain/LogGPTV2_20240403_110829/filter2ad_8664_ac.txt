    [  253.626851] Hardware name: VMware, Inc. VMware Virtual Platform/440BX Desktop Reference Platform, BIOS 6.00 07/22/2020
    [  253.626859] Workqueue: netns cleanup_net
    [  253.626874] RIP: 0010:refcount_warn_saturate+0x1bd/0x1f0
    [  253.626888] Code: 03 31 ff 89 de e8 e3 f0 18 ff 84 db 0f 85 ef fe ff ff e8 96 f5 18 ff 48 c7 c7 e0 ef 65 85 c6 05 9f 39 1d 03 01 e8 41 76 57 01  0b e9 d0 fe ff ff e8 77 f5 18 ff 48 c7 c7 40 f1 65 85 c6 05 7c
    [  253.626899] RSP: 0000:ffff8881032ff688 EFLAGS: 00010282
    [  253.626908] RAX: 0000000000000000 RBX: 0000000000000000 RCX: 0000000000000000
    [  253.626915] RDX: ffff888103093380 RSI: 0000000000000000 RDI: ffffed102065fec3
    [  253.626922] RBP: ffff8881032ff698 R08: 0000000000000000 R09: ffff8881e19b098b
    [  253.626930] R10: 0000000000000000 R11: 0000000000000001 R12: ffff888120ec008c
    [  253.626936] R13: ffff88812dc76500 R14: dffffc0000000000 R15: 00000000c0000000
    [  253.626944] FS:  0000000000000000(0000) GS:ffff8881e1980000(0000) knlGS:0000000000000000
    [  253.626954] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  253.626961] CR2: 00007f2ede8e1024 CR3: 00000001736a6006 CR4: 00000000003706e0
    [  253.626993] Call Trace:
    [  253.626997]  
    [  253.627006]  u32_clear_hnode+0x4c7/0x680 [cls_u32]
    [  253.627058]  u32_destroy_hnode.isra.0+0xa4/0x240 [cls_u32]
    [  253.627069]  u32_destroy+0x2da/0x390 [cls_u32]
    [  253.627080]  tcf_proto_destroy+0x85/0x300
    [  253.627091]  tcf_proto_put+0x9c/0xd0
    [  253.627101]  tcf_chain_flush+0x1c0/0x310
    [  253.627112]  __tcf_block_put+0x158/0x2e0
    [  253.627123]  tcf_block_put+0xe3/0x130
    [  253.627178]  fq_codel_destroy+0x3c/0xb0 [sch_fq_codel]
    [  253.627189]  qdisc_destroy+0xb1/0x2a0
    [  253.627200]  qdisc_put+0xe0/0x100
    [  253.627211]  dev_shutdown+0x253/0x390
    [  253.627224]  unregister_netdevice_many+0x7e0/0x1720
    [  253.627282]  ip6gre_exit_batch_net+0x36b/0x450 [ip6_gre]
    [  253.627367]  ops_exit_list+0x115/0x160
    [  253.627378]  cleanup_net+0x475/0xb40
    [  253.627403]  process_one_work+0x8bf/0x11d0
    [  253.627416]  worker_thread+0x60b/0x1340
    [  253.627441]  kthread+0x388/0x470
    [  253.627461]  ret_from_fork+0x22/0x30
    [  253.627476]  
    [  253.627480] ---[ end trace ddbeecae4d8b2b8d ]---
### 漏洞补丁
在u32_change函数中，不应该执行tcf_exts_put_net函数（使得nets上的引用计数减少1）。
    author Eric Dumazet  2022-04-13 10:35:41 -0700
    committer Jakub Kicinski  2022-04-15 14:26:11 -0700
    commit 3db09e762dc79584a69c10d74a6b98f89a9979f8 (patch)
    tree 1a269d290124f61d42c2cb059de92a0661f818a5
    parent f3226eed54318e7bdc186f8f7ed27bcd3cb8b681 (diff)
    download linux-3db09e762dc79584a69c10d74a6b98f89a9979f8.tar.gz
    net/sched: cls_u32: fix netns refcount changes in u32_change()
    We are now able to detect extra put_net() at the moment
    they happen, instead of much later in correct code paths.
    u32_init_knode() / tcf_exts_init() populates the ->exts.net
    pointer, but as mentioned in tcf_exts_init(),
    the refcount on netns has not been elevated yet.
    The refcount is taken only once tcf_exts_get_net()
    is called.
    So the two u32_destroy_key() calls from u32_change()
    are attempting to release an invalid reference on the netns.
    syzbot report:
    refcount_t: decrement hit 0; leaking memory.
    WARNING: CPU: 0 PID: 21708 at lib/refcount.c:31 refcount_warn_saturate+0xbf/0x1e0 lib/refcount.c:31
    Modules linked in:
    CPU: 0 PID: 21708 Comm: syz-executor.5 Not tainted 5.18.0-rc2-next-20220412-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    RIP: 0010:refcount_warn_saturate+0xbf/0x1e0 lib/refcount.c:31
    Code: 1d 14 b6 b2 09 31 ff 89 de e8 6d e9 89 fd 84 db 75 e0 e8 84 e5 89 fd 48 c7 c7 40 aa 26 8a c6 05 f4 b5 b2 09 01 e8 e5 81 2e 05  0b eb c4 e8 68 e5 89 fd 0f b6 1d e3 b5 b2 09 31 ff 89 de e8 38
    RSP: 0018:ffffc900051af1b0 EFLAGS: 00010286
    RAX: 0000000000000000 RBX: 0000000000000000 RCX: 0000000000000000
    RDX: 0000000000040000 RSI: ffffffff8160a0c8 RDI: fffff52000a35e28
    RBP: 0000000000000004 R08: 0000000000000000 R09: 0000000000000000
    R10: ffffffff81604a9e R11: 0000000000000000 R12: 1ffff92000a35e3b
    R13: 00000000ffffffef R14: ffff8880211a0194 R15: ffff8880577d0a00
    FS:  00007f25d183e700(0000) GS:ffff8880b9c00000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007f19c859c028 CR3: 0000000051009000 CR4: 00000000003506f0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     __refcount_dec include/linux/refcount.h:344 [inline]
     refcount_dec include/linux/refcount.h:359 [inline]
     ref_tracker_free+0x535/0x6b0 lib/ref_tracker.c:118
     netns_tracker_free include/net/net_namespace.h:327 [inline]
     put_net_track include/net/net_namespace.h:341 [inline]
     tcf_exts_put_net include/net/pkt_cls.h:255 [inline]
     u32_destroy_key.isra.0+0xa7/0x2b0 net/sched/cls_u32.c:394
     u32_change+0xe01/0x3140 net/sched/cls_u32.c:909
     tc_new_tfilter+0x98d/0x2200 net/sched/cls_api.c:2148
     rtnetlink_rcv_msg+0x80d/0xb80 net/core/rtnetlink.c:6016
     netlink_rcv_skb+0x153/0x420 net/netlink/af_netlink.c:2495
     netlink_unicast_kernel net/netlink/af_netlink.c:1319 [inline]
     netlink_unicast+0x543/0x7f0 net/netlink/af_netlink.c:1345
     netlink_sendmsg+0x904/0xe00 net/netlink/af_netlink.c:1921
     sock_sendmsg_nosec net/socket.c:705 [inline]
     sock_sendmsg+0xcf/0x120 net/socket.c:725
     ____sys_sendmsg+0x6e2/0x800 net/socket.c:2413
     ___sys_sendmsg+0xf3/0x170 net/socket.c:2467
     __sys_sendmsg+0xe5/0x1b0 net/socket.c:2496
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x35/0xb0 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    RIP: 0033:0x7f25d0689049
    Code: ff ff c3 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 40 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05  3d 01 f0 ff ff 73 01 c3 48 c7 c1 b8 ff ff ff f7 d8 64 89 01 48
    RSP: 002b:00007f25d183e168 EFLAGS: 00000246 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 00007f25d079c030 RCX: 00007f25d0689049
    RDX: 0000000000000000 RSI: 0000000020000340 RDI: 0000000000000005
    RBP: 00007f25d06e308d R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 0000000000000000
    R13: 00007ffd0b752e3f R14: 00007f25d183e300 R15: 0000000000022000
    Fixes: 35c55fc156d8 ("cls_u32: use tcf_exts_get_net() before call_rcu()")
    Signed-off-by: Eric Dumazet 
    Reported-by: syzbot 
    Cc: Cong Wang 
    Cc: Jiri Pirko 
    Acked-by: Jamal Hadi Salim 
    Signed-off-by: Jakub Kicinski 
    Diffstat
    -rw-r--r-- net/sched/cls_u32.c 16 
    1 files changed, 10 insertions, 6 deletions
    diff --git a/net/sched/cls_u32.c b/net/sched/cls_u32.c
    index cf5649292ee00..fcba6c43ba509 100644
    --- a/net/sched/cls_u32.c
    +++ b/net/sched/cls_u32.c
    @@ -386,14 +386,19 @@ static int u32_init(struct tcf_proto *tp)
      return 0;
     }
    -static int u32_destroy_key(struct tc_u_knode *n, bool free_pf)
    +static void __u32_destroy_key(struct tc_u_knode *n)
     {
      struct tc_u_hnode *ht = rtnl_dereference(n->ht_down);
      tcf_exts_destroy(&n->exts);
    - tcf_exts_put_net(&n->exts);
      if (ht && --ht->refcnt == 0)
       kfree(ht);
    + kfree(n);
    +}
    +
    +static void u32_destroy_key(struct tc_u_knode *n, bool free_pf)
    +{
    + tcf_exts_put_net(&n->exts);
     #ifdef CONFIG_CLS_U32_PERF
      if (free_pf)
       free_percpu(n->pf);
    @@ -402,8 +407,7 @@ static int u32_destroy_key(struct tc_u_knode *n, bool free_pf)
      if (free_pf)
       free_percpu(n->pcpu_success);
     #endif
    - kfree(n);
    - return 0;
    + __u32_destroy_key(n);
     }
     /* u32_delete_key_rcu should be called when free'ing a copied
    @@ -900,13 +904,13 @@ static int u32_change(struct net *net, struct sk_buff *in_skb,
             extack);
       if (err) {
    -   u32_destroy_key(new, false);
    +   __u32_destroy_key(new);
        return err;
       }
       err = u32_replace_hw_knode(tp, new, flags, extack);
       if (err) {
    -   u32_destroy_key(new, false);
    +   __u32_destroy_key(new);
        return err;
       }
### 问题引入
    commit 35c55fc156d85a396a975fc17636f560fc02fd65
    Author: Cong Wang 
    Date:   Mon Nov 6 13:47:30 2017 -0800
        cls_u32: use tcf_exts_get_net() before call_rcu()
        Hold netns refcnt before call_rcu() and release it after
        the tcf_exts_destroy() is done.
        Note, on ->destroy() path we have to respect the return value
        of tcf_exts_get_net(), on other paths it should always return
        true, so we don't need to care.