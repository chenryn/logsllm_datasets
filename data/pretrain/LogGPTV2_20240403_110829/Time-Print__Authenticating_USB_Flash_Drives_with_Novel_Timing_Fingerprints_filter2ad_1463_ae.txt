but has no effect on the SanDisk Blade devices.
Different Host. We further investigate the impact of different
host machines: can the same ﬁngerprint be transferred between
different host machines? We expect to see a degradation in
accuracy as many factors (e.g., variations in the clock speed
of the processor, motherboard, etc.) are likely to alter the
ﬁngerprint. To assess the impact, we gather a dataset on a
second host system with a different conﬁguration (system
comparison is listed in Table V) using both the Generic and
SanDisk Blade devices. Again, we utilize Scenario ❸ as an
example to measure the accuracy degradation.
The main difference between the two host systems lies in
the different CPUs. The TSC tick rate (i.e., the rate at which
the TSC increments) is directly dependent on the base clock
speed of CPU. Thus, we prescale the data gathered on the
testing machine by multiplying the timing values by a factor of
0.7386, which is the ratio of 2.26 GHz on our training machine
to 3.06 GHz on the testing machine.
With this preprocessing step, the SanDisk Blade devices
experience no accuracy degradation, and the Generic drives
experience an 11% accuracy decrease to 88%, which is still a
promising ﬁnding. To understand the reason for these different
behaviors, we uncover that the Generic devices appear to
produce noisier distributions with more similar peak locations
than the SanDisk Blade devices, as shown in Figure 2. We
infer that such increased noise coupled with different electrical
paths (e.g., different hubs, ports, machines) makes the Generic
devices harder to classify in a cross host scenario. However,
it should be noted that in an enterprise environment, people
usually purchase a number of identical host machines with
the same model of processor, motherboard, USB controllers,
etc. As a result, we might experience even better ﬁngerprint
transfer between hosts. Meanwhile, this host transfer is not
required in our threat model, as system administrators can train
an authentication system for each protected computer.
C. Fingerprint Robustness with Device Usage
Fig. 6: Classiﬁcation accuracy degradation as the number of
samples is reduced (10 SanDisk Ultra USB 3.0 drives).
Fig. 7: Classiﬁcation accuracy degradation as the number of
samples is reduced (10 SanDisk Blade USB 2.0 drives).
Such a result indicates that there exists a trade-off between
the time required to generate a ﬁngerprint and the ability to
use the ﬁngerprint for unique device authentication. System
administrators can utilize this knowledge to choose between
the time required to obtain a ﬁngerprint for their system and
the desired security level.
B. Fingerprints with Hardware Variation
When the ﬁngerprint data is acquired, it must pass through
a myriad of system components. For example,
the data
transmission, beginning with the USB drive, must go through
the ports and hubs along its path, through the USB controller
on the motherboard, and ﬁnally through the bridge between the
motherboard USB controller and the processor. Each of these
system components may contain different levels of routing
logic and create timing variations in the ﬁngerprint. Therefore,
we conduct several experiments to understand the impact of
hardware variations on ﬁngerprint accuracy.
Different Ports and Hubs.
To understand the impact of using different ports and hubs,
we utilize the training data from Section VI, but gather new
testing sets with both Generic and SanDisk Blade devices. We
conduct two tests: (1) the USB hub is plugged into a different
Flash devices utilize a logical to physical mapping within
the ﬂash translation layer to ensure that the ﬂash blocks are
evenly used within a device (a process called wear-leveling).
When the usb-storage driver attempts to write data to an
address, it speciﬁes a logical address which the ﬂash translation
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:15 UTC from IEEE Xplore.  Restrictions apply. 
1012
layer converts to a physical address. Because ﬂash blocks are
modiﬁed at the block level, instead of the bit level, a write
operation requires the data to be written to a new empty block
and the logical to physical address mapping is updated. Since
Time-Print utilizes the physical timing characteristics of speciﬁc
physical blocks (accessed via logical addresses), this remapping
might degrade the accuracy of the ﬁngerprint as the device is
written to.
To investigate the impact of this remapping, we conduct
an experiment by writing hundreds of random ﬁles to ﬁve
SanDisk Cruzer Blade devices and track the accuracy of the
classiﬁcation system by gathering a sample between each write.
In total, we write 6,520MB of data to each 8GB drive.
The results demonstrate that Time-Print is somewhat resilient
to drive writes, experiencing no accuracy degradation until
about 2.3GB at which point the accuracy rapidly decreases. To
better understand the cause of this sudden accuracy degradation,
we examine the behavior of the actual ﬂash drive. We utilize
the tool hdparm to observe the actual logical block address
(LBA) of each ﬁle, and notice that the drive attempts to write
ﬁles to the lowest available LBA. The classiﬁcation neural
network essentially performs a matching task, attempting to
classify the trace as the class that is the closest to the training
samples. After more than half of the LBAs utilized for the
ﬁngerprint are written, the neural network is no longer able
to perform this task reliably, since the majority of the LBAs
are no longer the same. To address this problem, there are two
solutions: LBA reservation and manufacturer support.
LBA reservation. If Time-Print can prevent the drive from
updating the virtual to physical mapping of the blocks utilized
for ﬁngerprinting, it can prevent drive writes from affecting
the ﬁngerprint, as the drive will not reassign pages that are in
use. This can be accomplished by placing small placeholder
ﬁles4 at their locations for LBA reservation. We implement
this mechanism by copying large ﬁles (to occupy large swaths
of LBAs) and small ﬁles into the chosen ﬁngerprint locations,
and then deleting the large ﬁles. We use the hdparm tool to
check the LBAs used by the small ﬁngerprint ﬁles. All of the
small ﬁles combined together are only 768KB in total, thus
inducing low overhead. We then write 7.3GB (the capacity of
the drive) data to the drive in 16MB chunks, and observe no
changes in the histograms and no accuracy degradation. This
solution can adequately accommodate the normal drive usage
as long as the small ﬁngerprint ﬁles are not deleted (by users).
Manufacturer Support. This is the most resilient solution
but requires collaboration with drive manufacturers. Manufac-
turers already provide extra ﬂash blocks that are hidden from
users to facilitate better wear leveling and drive performance.
They can similarly reserve extra blocks for ﬁngerprinting
on new devices. This solution can ensure that Time-Print
ﬁngerprints are unaffected by write operations and further
ensure that accidental deletion of the contents of the drive will
not interfere with the ﬁngerprint.
4A placeholder ﬁle should be a multiple of the remappable block size of
the device, to ensure that only the placeholder ﬁle fully occupies a speciﬁc
location, preventing unintentional remapping.
D. Spooﬁng A Fingerprint
An advanced attacker might design a malicious device to
deceive Time-Print by mimicking a legitimate drive (e.g.,
replicate the physical ﬁngerprint with an FPGA based system).
While all of the experiments in this study utilize a static
read sequence of 2,900 reads, in a real deployment, the read-
sequence, including the speciﬁc locations and number of reads,
can be either a secret (stored on the protected system) or
randomly generated based upon a device identiﬁer (e.g., use
the serial number as a random seed). Since attackers are unable
to know the exact locations utilized by Time-Print, they can
only ﬁngerprint random locations and hope that Time-Print
would accept the spoofed values.
To assess the security of Time-Print against this type of
advanced attack, we run an experiment where we generate
random choices of locations to test whether Time-Print accepts
a legitimate drive ﬁngerprinted in the wrong locations. To
emulate an attacker who is unaware of the correct sample
locations, we gather a new dataset for the drives that are
sampled in the wrong locations. More speciﬁcally, we generate
a script that randomly chooses 6 locations on a drive and
generates reads every time the drive is plugged in. We test
Time-Print similarly to Scenario ❷ wherein we train Time-Print
to accept samples in the correct locations of the legitimate
drive and to reject samples from other devices. To further
augment the training set, we add random noise to some of
the training samples from the legitimate drive (similarly to
Scenario ❷). Our testing set consists of the samples from the
legitimate device taken in the correct locations, which should
be accepted, and the samples from the legitimate device taken
in the wrong locations (to emulate a spooﬁng attack) that
should be rejected. We test this setup with the SanDisk Blade,
Ultra, and Generic devices and observe an average of 96.4%
true accept rate and 99.6% true reject rate. This result indicates
that Time-Print is very robust against such ‘spooﬁng’ attacks.
E. Other Considerations
We further investigate whether better accuracy could be
obtained by increasing the number of addresses accessed by
Time-Print. Theoretically, accessing more locations on the drive
should provide more information to better identify drives. To
this end, we conduct experiments on accessing 18 locations (as
opposed to 6), while maintaining the same number of total extra
reads. We gather data on the SanDisk Cruzer Blade, Generic,
and SanDisk Ultra drives, and evaluate the performance in
Scenarios ❷ and ❸. We observe that while the individual
accuracy of each drive type ﬂuctuates slightly, the average
performance (across all three models) in each scenario remains
similar.
Another consideration is the modiﬁcation of the access
order. We run an experiment with ﬁve SanDisk Cruzer Blade
devices by randomizing the access order for each sample.
There is no accuracy degradation. We also examine whether
the device format affects Time-Print. We reformat all of the
devices to EXT2 and retrain Time-Print. Similarly, no accuracy
degradation is observed. This is expected as the ﬁle system
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:15 UTC from IEEE Xplore.  Restrictions apply. 
1013
format is another virtual layer above the physical pages of the
USB device and therefore should not affect the ﬁngerprint.
F. Fingerprint the Flash Controller
We also examine whether the timing information from only
the ﬂash controller could be utilized to identify the drives.
We investigate this by utilizing the timing information of the
‘transfer status’ packet (a packet that comes only from the
USB controller on the mass storage device), instead of the
timing information for returning the data. We test this on both
the SanDisk Cruzer Blade and the SanDisk Ultra devices. We
ﬁnd that utilizing only this information reduces accuracy from
greater than 98% to 65% and 45% for the two types of devices,
respectively. This shows that while the timing information of
the ﬂash controller can be utilized to identify some devices, it
alone is insufﬁcient to create a robust ﬁngerprint.
G. Real-World Deployment of Time-Print
We have demonstrated that Time-Print can be utilized
in various scenarios for USB drive authentication. Each of
the scenarios can serve as a module in a more complete
security system that might be deployed in the real world.
For example, a system administrator concerned mainly about
protecting systems from stray external devices can employ our
system as demonstrated in Scenario ❶, while an administrator
with concerns about targeted attacks might choose to utilize
Scenarios ❶ and ❷ together, ﬁrst rejecting unknown models
and then ensuring that the device is legitimate. Scenario ❸
can be further employed to track user activities for auditing
purposes. Time-Print can also be integrated into other USB
security systems, which offer ﬁrewall like protections [4], [58],
[59] but rely on the drive to correctly report its identiﬁcation.
The identiﬁcation capability of Time-Print will provide a
stronger defense against skilled attackers who can alter device
identiﬁers [23], [30].
H. Future Work
Our study has demonstrated that Time-Print can accurately
authenticate USB drivers from the same brand and model. In the
future work, we plan to further explore the timing channel by (1)
examining devices from more different scenarios, such as the
same brand/model but with different capacities, (2) considering
the wide deployment of Time-Print and user enrollment in
practice, and (3) investigating the potential attacks against
Time-Print.
In particular, strong FPGA attackers who can replay the
timing information of the whole USB driver (e.g., physically
unclonable function (PUF) [48] related proﬁling/modeling
attacks) might potentially break Time-Print. Such attackers
can record and proﬁle the timing of all locations on the drive,
and then answer arbitrary queries with an FPGA. However,
this requires signiﬁcant efforts (both time and storage) from
attackers to fully understand the patterns (e.g., building the
histogram for each location). In the future work, we will assess
the robustness of Time-Print against such strong FPGA attacks.
VIII. RELATED WORK
In this section, we survey the research efforts that inspired
our work as well as highlight the key differences between our
work and previous research.
A. Device Fingerprinting
Uniquely identifying individual physical devices has long
been of interest to the security community [10], [11], [35], [46],
[68]. The ability to track and authenticate a physical device
accurately can help increase security and serve as another factor
in multi-factor authentication. As such, many different methods
for device ﬁngerprinting have been presented.
One of the most common methods for ﬁngerprinting is
the utilization of (un)intentional electromagnetic frequency
radiation. Cobb et al. [15], [16] showed that the process
variations in the manufacturing process cause subtle variations
in the unintentional electromagnetic emissions, which can be
utilized to generate a valid ﬁngerprint for similar embedded
devices. Cheng et al. [14] further found that unique ﬁngerprints
can be created for more sophisticated systems like smartphones
and laptops. Other prior works [9], [20], [43], [47] study the
ﬁngerprint generation in radiating electromagnetic signals for
communication (e.g. Zigbee, WiFi, etc.). The most similar work
to Time-Print is Magneto [27], which uses the unintentional
electromagnetic emissions during device enumeration on a
host to ﬁngerprint USB mass storage devices. While their
work demonstrates the ability to classify different brands and
models accurately, the system requires expensive measurement
equipment. By contrast, our work requires no special equipment
and uncovers a novel timing channel that can be used to further
identify devices within the same brand and model.
Device serial numbers, descriptors, and passwords are
also used to thwart the connection of unauthorized USB
devices [1], [28]. These defenses inherently trust that the USB
device is accurately reporting software values. TMSUI [66],
DeviceVeil [55], and WooKey [7] use specialized hardware to
uniquely identify individual USB mass storage devices, and as
a result, most of these systems are not compatible with legacy
devices. Instead, Time-Print is completely software-based and
does not require any extra or specialized hardware. The USB
3.0 Promoter Group has proposed a USB 3.0 Type-C PKI-
based authentication scheme [62] to identify genuine products,
but these mechanisms are not designed to uniquely identify
individual devices. Other prior works utilize a USB protocol
analyzer [37] or smart devices [5] to identify a host system
and its speciﬁc operating system by inspecting the order of
enumeration requests and timing between packets [18]. Unlike
those works, the objective of Time-Print is to identify the
peripheral device, instead of the host.
B. Flash Based Fingerprints
Several prior works have investigated whether the properties
of ﬂash devices can be utilized for ﬁngerprinting. For example,
device ﬁngerprints are constructed using programming time
and threshold voltage variations [45], [64]. Others [22], [31],
[34], [41], [50], [54], [65] further investigate the design of
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:15 UTC from IEEE Xplore.  Restrictions apply. 
1014
physically unclonable functions in ﬂash chips and explore the
impact of write disturbances, write voltage threshold variation,
erase variations, and read voltage threshold variation. Sakib et
al. [49] designed a watermark into ﬂash devices by program-
erase stressing certain parts of a device.
The above techniques work at a physical level, which requires
control and functionalities that may not be available in a cost-
constrained, mass-market device like a USB ﬂash drive. Time-
Print only utilizes read operations (a common function available
on all USB ﬂash drives) and thus is non-intrusive. In addition,
while these technologies could be incorporated into new devices,
Time-Print is fully compatible with existing devices and only
requires a slight modiﬁcation to the host driver.
C. USB Attacks and Defenses
USB is an easy to use and trusting protocol, which imme-
diately begins to communicate with and set up devices when
they are plugged in. Tian et al. [60] surveyed the landscape of
USB threats and defenses from USB 1.0 to USB C, showing
that most existing defenses that require extra hardware do not
adequately work with legacy devices. Several attacks [30], [23]
have demonstrated that modifying the ﬁrmware of USB devices
can rapidly subvert a system.
Many defenses have been proposed to mitigate the problem.
For example, the TPM (trusted platform module) has been used
to protect sensitive information [6], [12]. GoodUSB [58] at-
tempts to thwart ﬁrmware modiﬁcation attacks [30] by creating
a permission system so that users can specify permissions for
devices. VIPER [38] proposes a method to verify peripheral
ﬁrmware and detect proxy attacks via latency based attestation.
Hernandez et al. [24] automatically scanned USB ﬁrmware for
malicious behaviors. USBFILTER [59] presents a ﬁrewall in