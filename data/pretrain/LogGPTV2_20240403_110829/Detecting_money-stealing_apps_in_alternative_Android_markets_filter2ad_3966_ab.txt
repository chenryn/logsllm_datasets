READ SMS, SEND SMS, WRITE SMS
RECEIVE SMS, RECEIVE MMS
CALL PHONE
CALL PHONE, MODIFY PHONE STATE
INTERNET
INTERNET
Billing Behavioral Identiﬁer. To ﬁnd suspicious billing
behaviors, this component ﬁrst decompiles the APK ﬁle
of the application into Dalvik bytecode. Then,
it stati-
cally extracts all function call ﬂows (FCF) by examining
the Dalvik bytecode for each activity in the application. For
each method, we also record the Android system calls that
it uses. Then, for each billing permission, we examine each
ﬂow to see whether it contains a sequence of Android sys-
tem calls, which essentially could launch the billing behavior
relied on that billing permission. After identifying billing
behaviors, we further examine whether this application at-
tempts to contact ﬁxed third-party identities, i.e., whether
those system calls use hard-coded phone numbers. If so, we
consider it as a money-stealing candidate application. Ta-
ble 2 shows a portion of Android system calls, which will be
examined in the FCF according to each billing permission.
Table 2: Examples of Android system calls relied on
corresponding billing permissions
Permission
System Call
READ SMS
SEND SMS
PHONE CALL
INTERNET
provider.Telephony$Sms.addMessage
provider.Telephony$Sms$Sent.addMessage
telephony.gsm.SmsManager.getDefault
telephony.gsm.SmsManager.sendDataMessage
telephony.gsm.SmsManager.sendTextMessage
telephony.gsm.SmsManager.sendDataMessage
internal.telephony.ITelephony$Stub$Proxy.call
internal.telephony.ITelephony$Stub$Proxy.endCall
java.net.HttpURLConnection.connect
org.apache.http.impl.client.HttpClient.execute
webkit.WebView.
java.net.ServerSocket.bind
Notiﬁcation Suppression Detector. After identify-
ing suspicious billing behavior in the application, this com-
ponent will be used to detect notiﬁcation suppression pat-
terns for those money-stealing candidate applications, i.e.,
it examines whether those applications block notifying the
usages of billing service to the users. Then, if it detects
notiﬁcation suppression patterns corresponding to identiﬁed
suspicious billing behaviors, the application is considered to
be a money-stealing application. Particularly, we rely on
1035(a) Registering Receiver & Permission
(b) Sending SMS
(c) Notiﬁcation Suppression
Figure 1: The procedure of a case study of money-stealing application.
heuristics-based models to detect notiﬁcation suppression
patterns for each billing behavior.
In terms of SMS, we examine whether the application
contains functionalities to limit the user’s ability to detect
billing-related notiﬁcation messages from corresponding ISPs.
Such functionalities could be achieved by: (1) monitoring
the “BroadcastReceiver”,
interacting with the SMS event
and aborting SMS messages (as the case study shows); (2)
monitoring SMS messages from the content provider (con-
tent://sms/) and deleting SMS messages.
In terms of phone calls, we examine whether the applica-
tion makes the phone call to a ﬁxed number and hides this
activity. This could be achieve by: (1) launching a dialing
call in the background; (2) dialing a call while the screen is
locked by monitoring the view of “LockScreen”.
4. PRELIMINARY EVALUATION
Data Collection. We developed a crawler to collect 56,268
android applications from three representative marketplaces,
including one US-based alternative Android Market SlideMe
[6] (15,129 applications), and two Chinese Android Markets:
AppDH [2] (2,349 applications), and Anzhi [1] (38,790 ap-
plications) from June 3rd-15th, 2012.
In our preliminary
evaluation, we focused on detecting SMS-related money-
stealing applications. To get the ground truth for SMS-
related money-stealing applications, we submitted all 56,000
applications to VirusTotal, which identiﬁed 1,278 android
applications as being labeled malicious by at least one AV
company. By grouping those malicious apps using common
AV label terms, we isolated 47 malware instances with SMS-
related behaviors.
Results. Our preliminary analysis reveals that this method-
ology is useful in identifying 41 money-stealing applications
from 47 stealthy malware instances (See Table 3. “Permis-
sion & behavior” denote the number of instances have both
SMS permission and behavior. “Suppression” denotes the
number of instances with SMS permission and behavior,
which have the function of notiﬁcation suppression.).
Family
SmsSend
TrojanSMS
jSMSHider
Total
Table 3: Preliminary Result.
Permission & Behavior
Instances
Suppression
24
21
2
47
23
18
2
43
23
18
0
41
More speciﬁcally, we cannot detect 1 instance in the fam-
ily of SmsSend as labeled by VirusTotal. That is because
this instance does not contain any system calls to send SMS.
Thus, it should be one false positive as reported by Virus-
Total. This is likely because VirusTotal’s report comes from
Anti-Virus companies, which rely on signature-based tech-
niques to detect malware. We also miss 3 instances in the
family of TrojanSMS, because those 3 instances do not have
SMS permissions, even though they clearly include system
calls to send SMS in their respective code. We also miss
both instances in the family of jSMSHider. This may be
because our current pre-deﬁned models of notiﬁcation sup-
pression could not match this family. We believe that this
result could be improved by enhancing our models for de-
tecting notiﬁcation suppression.
5. CONCLUSION
In this poster, we describe MoneyGuard, a system that
checks for hard-coded exﬁltration parameters and notiﬁca-
tion suppression behavior as a means to check for stealthy
money-stealing malware. Our preliminary evaluation demon-
strates that this approach is promising and worthy of deeper
exploration.
Acknowledgements. This material is based upon work
supported through the U.S. Army Research Oﬃce (ARO)
under the Cyber-TA Research Grant No.W911NF-06-1-0316
and by the National Science Foundation under Grant IIS-
0905518. Any opinions, ﬁndings, and conclusions or rec-
ommendations expressed in this material are those of the
author(s) and do not necessarily reﬂect the views of U.S.
ARO or the National Science Foundation.
6. REFERENCES
[1] Anzhi android market. http://www.anzhi.com/.
[2] App dh android market. http://www.appdh.com/.
[3] Circumventing google bouncer.
http://www.extremetech.com/computing/
130424-circumventing-googles-bouncer-androids-anti-malware-system.
[4] Fake android apps scam costs.
http://www.telegraph.co.uk/technology/news/9286538/
Fake-Android-apps-scam-costs-28000.html.
[5] Money-stealing apps are hosting in the mobile devices. http://
finance.sina.com.cn/money/lczx/20120410/070311783396.shtml.
[6] Slideme android market. http://slideme.org/.
[7] Bose, A., Hu, X., Shin, K. G., and Park, T. Behavioral
detection of malware on mobile handsets. In Proceeding of the
6th International Conference on Mobile Systems,
Applications, and Services (MobiSys’08).
[8] Enck, W., Gilbert, P., Chun, B.-G., Cox, L. P., Jung, J.,
Mc-Daniel, P., and Sheth, A. N. Taintdroid: An
information-ﬂow tracking system for realtime
privacymonitoring on smartphones. In Proceedings of the 9th
USENIX Symposium on Operating Systems Design and
Implementation (OSDI’10).
[9] Jacoby, G., and Davis, N. Battery-based intrusion detection. In
in Global Telecommunications Conference (GLOBECOM’04).
[10] Kim, H., Smith, J., and Shin, K. G. Detecting energy-greedy
anomalies and mobile malware variants. In Proceedings of the
6th international conference on Mobile systems, applications,
and services (MobiSys’08).
[11] Schmidt, A., Bye, R., Schmidt, H., Clausen, J., Kiraz, O.,
Yxksel, K., Camtepe, S., and Sahin, A. Static analysis of
executables for collaborative malware detection on android. In
ICC Communication and Information Systems Security
Symposium (2009).
[12] Zhou, Y., Wang, Z., Zhou, W., and Jiang., X. Hey, you, get oﬀ
of my market: Detecting malicious apps in oﬃcial and
alternative android markets. In Proceedings of the 19th Annual
Symposium on Network and Distributed System Security
(NDSS’12).
1036