---
author: Marty Kalin
category: 软件开发
comments_data:
- date: '2019-05-07 15:31:27'
  message: 讲解的不错
  postip: 206.16.17.150
  username: 来自美国的 Internet Explorer 11.0|Windows 7 用户
- date: '2019-05-08 08:44:15'
  message: 很好，但要是 python 代码理解会更容易些
  postip: 61.128.217.235
  username: 来自重庆的 Chrome 69.0|Windows 10 用户
- date: '2019-07-28 23:05:42'
  message: python没有c快呀，底层谁用解释语言呀
  postip: 223.104.186.141
  username: 来自223.104.186.141的 MIUI Browser 10.8|Android 用户
count:
  commentnum: 3
  favtimes: 3
  likes: 0
  sharetimes: 0
  viewnum: 10864
date: '2019-05-07 12:26:00'
editorchoice: false
excerpt: 学习在 Linux 中进程是如何与其他进程进行同步的。
fromurl: https://opensource.com/article/19/4/interprocess-communication-linux-storage
id: 10826
islctt: true
largepic: /data/attachment/album/201905/07/122555by525iisnxnckyry.jpg
permalink: /article-10826-1.html
pic: /data/attachment/album/201905/07/122555by525iisnxnckyry.jpg.thumb.jpg
related:
- displayorder: 0
  raid: 10845
reviewer: wxy
selector: lujun9972
summary: 学习在 Linux 中进程是如何与其他进程进行同步的。
tags:
- IPC
thumb: false
title: Linux 下的进程间通信：共享存储
titlepic: true
translator: FSSlc
updated: '2019-05-07 12:26:00'
---
> 
> 学习在 Linux 中进程是如何与其他进程进行同步的。
> 
> 
> 
![](/data/attachment/album/201905/07/122555by525iisnxnckyry.jpg)
本篇是 Linux 下[进程间通信](https://en.wikipedia.org/wiki/Inter-process_communication)（IPC）系列的第一篇文章。这个系列将使用 C 语言代码示例来阐明以下 IPC 机制：
* 共享文件
* 共享内存（使用信号量）
* 管道（命名的或非命名的管道）
* 消息队列
* 套接字
* 信号
在聚焦上面提到的共享文件和共享内存这两个机制之前，这篇文章将带你回顾一些核心的概念。
### 核心概念
*进程*是运行着的程序，每个进程都有着它自己的地址空间，这些空间由进程被允许访问的内存地址组成。进程有一个或多个执行*线程*，而线程是一系列执行指令的集合：*单线程*进程就只有一个线程，而*多线程*的进程则有多个线程。一个进程中的线程共享各种资源，特别是地址空间。另外，一个进程中的线程可以直接通过共享内存来进行通信，尽管某些现代语言（例如 Go）鼓励一种更有序的方式，例如使用线程安全的通道。当然对于不同的进程，默认情况下，它们**不**能共享内存。
有多种方法启动之后要进行通信的进程，下面所举的例子中主要使用了下面的两种方法：
* 一个终端被用来启动一个进程，另外一个不同的终端被用来启动另一个。
* 在一个进程（父进程）中调用系统函数 `fork`，以此生发另一个进程（子进程）。
第一个例子采用了上面使用终端的方法。这些[代码示例](http://condor.depaul.edu/mkalin)的 ZIP 压缩包可以从我的网站下载到。
### 共享文件
程序员对文件访问应该都已经很熟识了，包括许多坑（不存在的文件、文件权限损坏等等），这些问题困扰着程序对文件的使用。尽管如此，共享文件可能是最为基础的 IPC 机制了。考虑一下下面这样一个相对简单的例子，其中一个进程（生产者 `producer`）创建和写入一个文件，然后另一个进程（消费者 `consumer`）从这个相同的文件中进行读取：
```
          writes +-----------+ reads
producer-------->| disk file |
#include 
#include 
#include 
#include 
#define FileName "data.dat"
#define DataString "Now is the winter of our discontent\nMade glorious summer by this sun of York\n"
void report_and_exit(const char* msg) {
  perror(msg);
  exit(-1); /* EXIT_FAILURE */
}
int main() {
  struct flock lock;
  lock.l_type = F_WRLCK;    /* read/write (exclusive versus shared) lock */
  lock.l_whence = SEEK_SET; /* base for seek offsets */
  lock.l_start = 0;         /* 1st byte in file */
  lock.l_len = 0;           /* 0 here means 'until EOF' */
  lock.l_pid = getpid();    /* process id */
  int fd; /* file descriptor to identify a file within a process */
  if ((fd = open(FileName, O_RDWR | O_CREAT, 0666)) < 0)  /* -1 signals an error */
    report_and_exit("open failed...");
  if (fcntl(fd, F_SETLK, &lock) < 0) /** F_SETLK doesn't block, F_SETLKW does **/
    report_and_exit("fcntl failed to get lock...");
  else {
    write(fd, DataString, strlen(DataString)); /* populate data file */
    fprintf(stderr, "Process %d has written to data file...\n", lock.l_pid);
  }
  /* Now release the lock explicitly. */
  lock.l_type = F_UNLCK;
  if (fcntl(fd, F_SETLK, &lock) < 0)
    report_and_exit("explicit unlocking failed...");
  close(fd); /* close the file: would unlock if needed */
  return 0;  /* terminating the process would unlock as well */
}
```
上面生产者程序的主要步骤可以总结如下：
* 这个程序首先声明了一个类型为 `struct flock` 的变量，它代表一个锁，并对它的 5 个域做了初始化。第一个初始化
```
lock.l_type = F_WRLCK; /* exclusive lock */
```
使得这个锁为排斥锁（read-write）而不是一个共享锁（read-only）。假如生产者获得了这个锁，则其他的进程将不能够对文件做读或者写操作，直到生产者释放了这个锁，或者显式地调用 `fcntl`，又或者隐式地关闭这个文件。（当进程终止时，所有被它打开的文件都会被自动关闭，从而释放了锁）
* 上面的程序接着初始化其他的域。主要的效果是*整个*文件都将被锁上。但是，有关锁的 API 允许特别指定的字节被上锁。例如，假如文件包含多个文本记录，则单个记录（或者甚至一个记录的一部分）可以被锁，而其余部分不被锁。
* 第一次调用 `fcntl`
```
if (fcntl(fd, F_SETLK, &lock) < 0)
```
尝试排斥性地将文件锁住，并检查调用是否成功。一般来说， `fcntl` 函数返回 `-1` （因此小于 0）意味着失败。第二个参数 `F_SETLK` 意味着 `fcntl` 的调用*不是*堵塞的；函数立即做返回，要么获得锁，要么显示失败了。假如替换地使用 `F_SETLKW`（末尾的 `W` 代指*等待*），那么对 `fcntl` 的调用将是阻塞的，直到有可能获得锁的时候。在调用 `fcntl` 函数时，它的第一个参数 `fd` 指的是文件描述符，第二个参数指定了将要采取的动作（在这个例子中，`F_SETLK` 指代设置锁），第三个参数为锁结构的地址（在本例中，指的是 `&lock`）。