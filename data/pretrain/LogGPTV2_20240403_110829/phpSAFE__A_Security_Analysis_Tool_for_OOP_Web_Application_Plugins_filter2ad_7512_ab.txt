framework specific functions that may have an effect in these 
vulnerabilities.  In  the  configuration  of  phpSAFE,  these  func-
tions are organized in four main sections: the potentially mali-
cious sources (the entry point of the attack), the sanitization and 
filtering functions used by the target application to prevent at-
tacks, revert functions (that revert the actions of the sanitization 
and filtering functions, therefore allowing the attack), and sensi-
tive output functions (where the attack manifests itself). It is by 
comparing this data with the actual code of the target PHP file 
that phpSAFE is able to locate the vulnerabilities. 
phpSAFE  is deployed  with a  default  configuration that is 
ready  for  detecting  generic  XSS and  SQLi  vulnerabilities, as 
well as for plugins for the WordPress framework.  This solution, 
out-of-the-box, has the advantage of allowing the immediate use 
of  the  tool  to  analyze  PHP  code,  either  from  applications  or 
plugins without requiring further configuration. However, this 
ability can be easily extended to other CMSs, by adding their
input,  filtering and  sink functions to the configuration  files. 
phpSAFE configuration data is as follows:
a) class-vulnerable-input.php: contains the potentially un-
secure input vectors. The sources can be PHP user input varia-
bles (e.g. $_GET, $_POST), input functions like PHP file func-
tions (e.g. file_get_contents), database manipulations functions 
(e.g.  mysql_query),  or  WordPress  functions  (e.g.  $wpdb-
>get_results).
b) class-vulnerable-filter.php:  contains  the  sanitization 
functions that can be used to protect (untaint) the variables (e.g. 
intval, htmlentities, mysql_escape_string)  and  the  functions 
that revert those protections (e.g. stripslashes).
c) class-vulnerable_output.php:  contains  the  PHP  func-
tions  or language  constructs  that  may  be  exploited  by  an  at-
tacker. Each entry is specific to a given vulnerability type, so it 
is affected by variables manipulated to take advantage of that 
vulnerability (like echo for XSS and mysql_query for SQLi). 
The generic XSS and SQLi functions in these configuration 
files are based on the default configurations of the RIPS tool [8].
Additionally, phpSAFE configuration files contain WordPress 
specific  functions  and  class  methods  related  with  XSS  and 
SQLi, although data for other CMSs can be easily added to the 
configuration. In fact, this is what it takes for phpSAFE to be 
able to analyze plugins from other CMSs. 
B. Model construction stage 
In this stage, phpSAFE performs a lexical and semantic anal-
ysis based on the Abstract Syntax Tree (AST) of the PHP source 
code.    The  AST  is  obtained  using  the  PHP  function  to-
ken_get_all that splits the PHP code into tokens. Each token can 
be an array with three items or a string: a) the array has the token 
identifier, the value of the token and the line number of the PHP 
script (e.g. [310, $_POST, 11]); b) the string represents a code 
semantics (e.g.  “;”). The function token_name is used to get the 
token's name (e.g. “T_VARIABLE”). 
phpSAFE builds an AST for each PHP file being analyzed.
Then  it  cleans  the  AST  by  removing  comments  and  extra 
whitespaces. As the PHP file can include other PHP files recur-
sively, all of them must be analyzed in order to obtain the com-
plete AST. To speed up the analysis and the ability to cope with 
plugin code, phpSAFE collects from the AST information about 
all user-defined  functions and their  parameters, all  the  called 
functions, among other relevant data. This allows, for example, 
obtaining the list of plugin functions that are not called from the 
code of the plugin. However these functions should be parsed 
anyway, as they may be directly called from the main applica-
tion. This ability  to  analyze  all the  functions,  even  those not 
called from within the plugin, is a very important aspect of se-
curity tools targeting plugin code. 
C. Analysis stage 
The objective of this stage is to follow the flow of the tainted 
variables from the moment they enter the application/plugin un-
til they reach the output. While the input is any GET, POST, 
COOKIE, database values, files, etc., the output may be the dis-
play of the variable in a web page, the storage of the variable in 
an OS file or the database, etc. During this process, the tainted 
variable may contaminate recursively other variables that should 
Fig. 1. phpSAFE architecture.
301301
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:58:14 UTC from IEEE Xplore.  Restrictions apply. 
also be followed until they are finally outputted. On the other 
side, the malicious content of the variable may also be removed 
or neutralized, preventing its exploitation.  
The data flow history of each variable is stored in the multi-
dimensional associative array parser_variables. This array con-
tains everything needed to allow phpSAFE to perform the taint 
analysis, like the variable1 name, source file name and line num-
ber, the dependencies from other variables, if it is an input or 
output variable, the filter functions applied, etc. 
To gather the data needed to fill the parser_variables array, 
phpSAFE  follows  the  flow  of  the  tainted  variables.  The  tool 
parses all the AST files previously created and makes decisions 
based on code constructs like conditionals, loops, assignments, 
expressions, function or method calls, function or method re-
turns, etc., which is done by following the path of the code, usu-
ally starting from the “main function”. Furthermore, phpSAFE 
is able to parse plugins that do not have a “main function” or
include functions that are never called directly from the plugin 
code. To reach 100% code coverage, all the functions should be 
analyzed,  even  those  that  are  never  called.  To  address  this, 
phpSAFE starts by executing an inter-procedural parsing of the 
functions that are not called from the source code of the plugin. 
Then it performs the inter-procedural analysis starting from the 
“main function” and follow the program flow from there. This 
way, every piece of code of the plugin is analyzed. 
The intra-procedural parsing goes through every token of the 
AST and parses it according to its nature. The most important 
tokens are described in the following paragraphs.
T_VARIABLE,  T_GLOBAL.  If  a  variable  declaration  is 
found, then its properties are extracted from the AST and stored 
into the parser_variables array, taking into account the data ob-
tained from the configuration files. The variable can be an input, 
output or just a regular variable, may be tainted or untainted, and 
may depend on other variables (taking into account the scope), 
etc. The variable may derive its properties from the last time it 
was used in the same scope of the source code. An important 
situation occurs when a tainted variable is being merged with 
HTML  code:  this may represent  a  XSS  vulnerability,  so  it is 
classified as a vulnerable output variable. 
Equal symbol “=”. The variable on the left side of the equal 
symbol depends on all variables and functions present in the ex-
pression on the right side of the equal symbol. This expression 
is parsed recursively, adding new variables and dependencies to 
the parser_variables array. The properties of the new variables 
may affect the classification and the dependencies of the varia-
ble on the left side, including the taint state. 
Call of a PHP or CMS framework built-in function call.
This refers to calling functions whose source code is from the 
outside of the plugin, either from PHP or from the CMS frame-
work API. If a call to an output function (e.g.  echo, print) is 
identified, then the function is checked for tainted variables that 
could cause a vulnerability. This is performed by adding to the 
parser_variables  all  the  variables  in  the  arguments  as  output 
variables. These are tainted according to the relation of the func-
tion with the vulnerability type (XSS or SQLi). If a call to a fil-
tering function is found, then a new variable with the same name 
of the function is added to the parser_variables, corresponding 
to the return of the filtering function. This variable is classified 
as untainted and as being filtered by the function.  
Call of a plugin user-defined function. If the user-defined 
function of the plugin has not been parsed yet, then it is parsed. 
The parsing begins by connecting the called arguments to the 
function’s parameters. This is done by adding a variable to the 
parser_variables and a dependency to the corresponding argu-
ment. Then the parameters of the function are linked to the local 
variables propagating the effects of the arguments to inside the 
function. Afterwards, the function is parsed as any other block 
of code. Functions that are called recursively are parsed only 
once to avoid endless loops. The same happens when there is a
call to a function that has already been analyzed. To optimize 
the speed and memory consumption of the analysis, every func-
tion is analyzed only the first time it is called, taking into account 
the context (parameters, global variables, scope, etc.) of the call. 
The data flow of the variables of this analysis is used to process 
future calls. Whenever the function is called, this data flow is 
added to the parser_variables, which is updated based on the 
calling arguments. 
T_RETURN. When an expression is returned from the user-
defined  function, a new  variable,  with  the  same name  of  the 
function, is added to the parser_variables. This variable is up-
dated with the properties of the resulting expression. 
Conditional 
(T_IF,  T_ELSE,  T_ELSEIF, 
T_SWITCH)  and  Loops 
(T_FOR,  T_WHILE,  T_DO, 
T_FOREACH). Conditions and loops do not change the data 
flow. Only the values of the variables involved are processed 
and updated. Also, the blocks of code are parsed normally. 
T_UNSET. Unsetting a PHP variable means destroying it, 
therefore, the properties of the variable are updated as untainted 
and marked as non-vulnerable.
D. Results processing stage 
jumps 
One of the objectives of source code security analysis is the 
identification of vulnerabilities so they can be fixed. phpSAFE 
provides several invaluable resources to help in this task. Some 
of these resources are related to the variables (vulnerable varia-
bles, output variables and all the other variables), functions, PHP 
files  included,  tokens  (the  complete  AST)  and  debug  infor-
mation. This data can be very useful in helping security practi-
tioners to trace back the path of the tainted variables to the point 
they entered the system and locate the best place to fix the vul-
nerabilities found. 
E. Supporting Object Oriented PHP 
Since version 5.0, PHP implements several object oriented 
features like  classes,  objects,  properties,  methods, inheritance 
and override of methods. To cope with OOP is a very important 
matter, since all the plugins analyzed access OOP, even if they 
are developed using procedural programming. This happens be-
cause WordPress is developed using OOP, and plugins need to 
use the methods and attributes of existing WordPress objects. 
Moreover, some of these methods retrieve data from likely to be 
untrusted sources. All OOP vulnerabilities we found are, indeed, 
related with WordPress objects and method calls. phpSAFE de-
tects these vulnerabilities because it is able to locate the calls to 
1  Since phpSAFE deals with OOP files, it parses variables and properties, func-
tions and methods. To avoid unnecessary repetitions, whenever possible, we 
are going to refer to them in the text generically as variables and functions. 
302302
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:58:14 UTC from IEEE Xplore.  Restrictions apply. 
the WordPress methods defined in the configuration files, which 
the other tools are unable to do. 
During the parsing of each token, phpSAFE is able to distin-
guish between variables and properties, functions and methods, 
and act accordingly. For properties and methods it obtains the 
full name by adding the name of the object to which they belong 
through  a  backward  search  in  the  AST  (by  following  the 
T_OBJECT_OPERATOR and T_DOUBLE_COLON tokens). 
Each property is then parsed as a variable. The call to a method, 
including object creation with the PHP new construct, is parsed 
as a function by locating the source code of the called method 
inside the class. 
The  following  code  shows  an  example  adapted  from  the 
mail-subscribe-list 2.1.1 plugin, now fixed thanks to our work. 
$results = $wpdb->get_results("SELECT * FROM ". 
$wpdb->prefix."sml"); 
foreach($results as $row)  
  echo ' '.$row->sml_name.''; 
The call of the method $wpdb->get_results retrieves a set of 
database rows and stores them in the $results array. The foreach
extracts each data row into the $row object, and finally the echo
outputs the property sml_name without any filtering or sanitiza-
tion. Failing to detect the method $wpdb->get_results prevents 
finding this vulnerability. The database data comes from other 
subscribers and it is not  sanitized when stored. Consequently, 
any  subscriber  can  inject  malicious  code  into  the  database. 
When a victim visits the page of the mail subscribe list, the ma-
licious code is injected in his web browser, executing the attack 
(which we confirmed in a experiment). 
IV. EVALUATION METHODOLOGY
This section presents the experiments conducted to evaluate 
the phpSAFE tool and thus understand its strengths and weak-
nesses. Given the current web scenario with many plugin based 
web applications developed with OOP and PHP and the exist-
ence  of  other  static  code  analyzer tools,  there are  three main 
questions that we are addressing in this evaluation: 
1. How does phpSAFE performance compares with other free 
static analysis tools when analyzing open source plugins for 
an OOP developed web application, considering the most 
common and widely exploited vulnerabilities? 
2. How does phpSAFE cope with the evolution of plugin code 
and vulnerabilities over a two-year-period of time, by look-
ing at different versions of the same plugin? 
3. Are plugin developers taking into consideration the vulner-
ability  disclosure  results  in  subsequent  versions  of  the 
plugins, even for vulnerabilities easy to spot and exploit? 
A. Metrics analyzed 
A static analysis tool should detect correctly all the existing 
vulnerabilities and  be  silent  when there are no  vulnerabilities 
left, which is very hard to achieve. The evaluation of this class 
of binary classification tools is normally based on the following 
set of metrics: True Positives (TP), True Negatives (TN), False 
Positives  (FP) and  False Negatives  (FN).  Obviously, the  best 
tool presents the highest values on the TP and TN and the lowest 
values on FP and FN. Since there are no perfect tools, a combi-
nation of these metrics should be used to characterize static anal-
ysis tools. In this work we considered the following: 
1. Precision: represents the exactness of the classification of 
303303
vulnerabilities,  calculated  by  applying  the  following  for-
mula: TP/(TP+FP). A high Precision means that the vul-
nerabilities found are likely to be true vulnerabilites. 
2. Recall:  represents  the  probability  of  the  detection  tool  to 
classify existing vulnerabilities as vulnerabilities, calculated 
using the formula: TP/(TP+FN). A high Recall means the 
tool leaves very few vulnerabilities undetected. 
3. F-score: represents the harmonic mean of Precision and Re-
call. In practice, it represents a balance between both met-
rics: 2*(Precision*Recall)/(Precision+Recall). 
Besides these important metrics that relate with the ability to 
detect vulnerabilities, the outcome of other metrics, like respon-
siveness and robustness, may also be determinant for the selec-
tion of a tool [19]. Responsiveness is related with the CPU time 
taken to analyze a target file. Robustness is the ability to finish 
the analysis and produce a result. In fact, it is very important that 
a tool is able to analyze any given file and deliver the results in 
due time using a reasonable amount of resources. 
B. Procedure 
To address the research questions presented we defined an 
experimental procedure based on five steps: 
1) Selection  of  a  widely  deployed  OOP  web  application 
with many open source plugins available. WordPress is devel-
oped in PHP and is the most widely used CMS [5], supporting 
the creation of web sites like TED, NBC, CNN, The New York 
Times, Forbes, eBay, Best Buy, Sony, TechCrunch, UPS, CBS 
Radio, etc. There are millions of WordPress sites, and they ac-