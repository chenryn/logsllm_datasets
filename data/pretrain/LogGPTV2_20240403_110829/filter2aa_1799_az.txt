3
Object-specific data
FIGURE 8-31 Structure of an object.
Object headers and bodies
found in the optional object subheaders.
In addition to the object header, which contains information that applies to any kind of object, the 
structures are located at a variable offset from the start of the object header, the value of which 
depends on the number of subheaders associated with the main object header (except, as mentioned 
132 
CHAPTER 8 System mechanisms
InfoMask
corresponding bit is set in the InfoMask and then uses the remaining bits to select the correct offset 
into the global ObpInfoMaskToOffset
the object header. 
TABLE 8-16 
Field
Purpose
Handle count
Maintains a count of the number of currently opened handles to the object.
Pointer count
Maintains a count of the number of references to the object (including one reference for each 
handle), and the number of usage references for each handle (up to 32 for 32-bit systems, and 
by pointer without 
using a handle.
Security descriptor
Determines who can use the object and what they can do with it. Note that unnamed objects, by 
Object type index
Contains the index to a type object that contains attributes common to objects of this type. The 
table that stores all the type objects is ObTypeIndexTable. Due to a security mitigation, this index is 
ObHeaderCookie and the bottom 8 
bits of the address of the object header itself.
Info mask
Bitmask describing which of the optional subheader structures described in Table 8-17 are present, 
except for the creator information subheader, which, if present, always precedes the object. The 
bitmask is converted to a negative offset by using the ObpInfoMaskToOffset table, with each sub-
header being associated with a 1-byte index that places it relative to the other subheaders present.
Lock
Object Create Info
Ephemeral information about the creation of the object that is stored until the object is fully in-
These offsets exist for all possible combinations of subheader presence, but because the subhead-
hand, the handle information subheader (which is allocated third) has three possible locations because 
it might or might not have been allocated after the quota subheader, itself having possibly been al-
located after the name information. Table 8-17 describes all the optional object subheaders and their 
CHAPTER 8 System mechanisms
133
TABLE 8-17 Optional object subheaders
Name
Purpose
Bit
Offset
Creator 
information
Links the object into a list for all the objects of the 
same type and records the process that created the 
object, along with a back trace.
0 (0x1)
ObpInfoMaskToOffset[0])
Name 
information
Contains the object name, responsible for making 
an object visible to other processes for sharing, 
and a pointer to the object directory, which pro-
vides the hierarchical structure in which the object 
names are stored.
1 (0x2)
ObpInfoMaskToOffset[InfoMask & 0x3]
Handle 
information
Contains a database of entries (or just a single 
entry) for a process that has an open handle to the 
object (along with a per-process handle count).
2 (0x4)
ObpInfoMaskToOffset[InfoMask & 0x7]
Quota 
information
Lists the resource charges levied against a process 
when it opens a handle to the object.
3 (0x8)
ObpInfoMaskToOffset
Process 
information
Contains a pointer to the owning process if this is 
an exclusive object. More information on exclusive 
objects follows later in the chapter.
4 (0x10)
ObpInfoMaskToOffset
Audit 
information
Contains a pointer to the original security descrip-
enabled to guarantee consistency.
5 (0x20)
ObpInfoMaskToOffset
Extended 
information
Stores the pointer to the object footer for objects 
Objects.
6 (0x40)
ObpInfoMaskToOffset
Padding 
information
Stores nothing—empty junk space—but is used to 
align the object body on a cache boundary, if this 
was requested.
7 (0x80)
ObpInfoMaskToOffset
Each of these subheaders is optional and is present only under certain conditions, either during 
system boot or at object creation time. Table 8-18 describes each of these conditions.
TABLE 8-18 Conditions required for presence of object subheaders
Name
Condition
Creator information
The object type must have enabled the maintain type list
maintain object type list-
cussed earlier) enables this for all objects, and Type
Name information
The object must have been created with a name.
Handle information
The object type must have enabled the maintain handle count
Quota information
The object must not have been created by the initial (or idle) system process.
Process information
The object must have been created with the exclusive object-
Audit Information
Extended information
Padding Information
The object type must have enabled the cache aligned
134 
CHAPTER 8 System mechanisms
As indicated, if the extended information header is present, an object footer is allocated at the tail of 
the object body. Unlike object subheaders, the footer is a statically sized structure that is preallocated 
for all possible footer types. There are two such footers, described in Table 8-19.
TABLE 8-19 Conditions required for presence of object footer
Name
Condition
Handle Revocation 
Information
The object must be created with ObCreateObjectEx, passing in AllowHandleRevocation in the 
OB_EXTENDED_CREATION_INFO
Extended User 
Information
The object must be created with ObCreateObjectEx, passing in AllowExtendedUserInfo in the 
OB_EXTENDED_CREATION_INFO structure. Silo Context objects are created this way.
object is being created, in a structure called the object attributes
name, the root object directory where it should be inserted, the security descriptor for the object, and 
the object attribute flags
Note When an object is being created through an API in the Windows subsystem (such 
as CreateEvent or CreateFile), the caller does not specify any object attributes—the 
created through Win32 go in the BaseNamedObjects directory, either the global or per-
part of the object attributes structure. More information on BaseNamedObjects and how 
it relates to the per-session namespace follows later in this chapter.
TABLE 8-20 
Attributes Flag
Header Flag Bit
Purpose
OBJ_INHERIT
Saved in the handle table entry
Determines whether the handle to the object will be 
inherited by child processes and whether a process 
can use DuplicateHandle to make a copy.
OBJ_PERMANENT
PermanentObject
-
ence counts, described later.
OBJ_EXCLUSIVE
ExclusiveObject
process that created it.
OBJ_CASE_INSENSITIVE
Not stored, used at run time
namespace should be case insensitive. It can be over-
ridden by the case insensitive
OBJ_OPENIF
Not stored, used at run time
name should result in an open, if the object exists, 
instead of a failure.
OBJ_OPENLINK
Not stored, used at run time 
handle to the symbolic link, not the target.
OBJ_KERNEL_HANDLE
kernel handle (more on this later).
CHAPTER 8 System mechanisms
135
Attributes Flag
Header Flag Bit
Purpose
OBJ_FORCE_ACCESS_CHECK
Not stored, used at run time
from kernel mode, full access checks should be 
performed.
OBJ_KERNEL_EXCLUSIVE
Disables any user-mode process from opening a 
handle to the object; used to protect the \Device\
PhysicalMemory and \Win32kSessionGlobals sec-
tion objects.
OBJ_IGNORE_IMPERSONATED_
DEVICEMAP
Not stored, used at run time
Indicates that when a token is being impersonated, 
the DOS Device Map of the source user should not 
DOS Device Map should be maintained for object 
lookup. This is a security mitigation for certain types 
OBJ_DONT_REPARSE
Not stored, used at run time
Disables any kind of reparsing situation (symbolic 
-
tion), and returns STATUS_REPARSE_POINT_
ENCOUNTERED if any such situation occurs. This is a 
security mitigation for certain types of path redirec-
tion attacks.
N/A
DefaultSecurityQuota
-
N/A
SingleHandleEntry
contains only a single entry and not a database.
N/A
NewObject
yet inserted into the object namespace.
N/A
DeletedInline
not being de-
leted through the deferred deletion worker 
thread but rather inline through a call to 
ObDereferenceObject(Ex).
In addition to an object header, each object has an object body whose format and contents are 
unique to its object type; all objects of the same type share the same object body format. By creating 
an object type and supplying services for it, an executive component can control the manipulation of 
data in all object bodies of that type. Because the object header has a static and well-known size, the 
Object Manager can easily look up the object header for an object simply by subtracting the size of 
the header from the pointer of the object. As explained earlier, to access the subheaders, the Object 
Because of the standardized object header, footer, and subheader structures, the Object Manager 
is able to provide a small set of generic services that can operate on the attributes stored in any object 
certain objects). These generic services, some of which the Windows subsystem makes available to 
Windows applications, are listed in Table 8-21.
Although all of these services are not generally implemented by most object types, they typically 
-
service for its process objects. 
136 
CHAPTER 8 System mechanisms
However, some objects may not directly expose such services and could be internally created as 
WmiGuid object is created, but no handle is exposed to the application for any kind of close or query 
services. The key thing to understand, however, is that there is no single generic creation routine. 
Such a routine would have been quite complicated because the set of parameters required to initial-
the Object Manager would have incurred additional processing overhead each time a thread called an 
object service to determine the type of object the handle referred to and to call the appropriate ver-
sion of the service.
TABLE 8-21 Generic object services
Service
Purpose
Close
Closes a handle to an object, if allowed (more on this later).
Duplicate
Shares an object by duplicating a handle and giving it to another process (if 
allowed, as described later).
Inheritance
If a handle is marked as inheritable, and a child process is spawned with handle 
inheritance enabled, this behaves like duplication for those handles.
Make permanent/temporary
Changes the retention of an object (described later).
Query object
-
aged at the Object Manager level.
Query security
Set security
Changes the protection on an object.
Wait for a single object
execution or be associated with an I/O completion port through a wait comple-
tion packet.
Signal an object and wait for another
Signals the object, performing wake semantics on the dispatcher object backing 
it, and then waits on a single object as per above. The wake/wait operation is 
Wait for multiple objects
Associates a wait block with one or more objects, up to a limit (64), which can 
port through a wait completion packet.
Type objects
Object headers contain data that is common to all objects but that can take on different values for 
descriptor. However, objects also contain some data that remains constant for all objects of a particular 
a handle to objects of that type. The executive supplies terminate and suspend access (among others) 
when creating a new object type. It uses an object of its own, a type object, to record this data. As 
CHAPTER 8 System mechanisms
137
section later in this chapter) is set, a type object also links together all objects of the same type (in this 
functionality takes advantage of the creator information subheader discussed previously.
Process
Object 1
Process
Object 2
Process
type
object
Process
Object 3
Process
Object 4
FIGURE 8-32 Process objects and the process type object.
EXPERIMENT: Viewing object headers and type objects
a process object with the dx @$cursession.Processes debugger data model command:
lkd> dx -r0 &@$cursession.Processes[4].KernelObject 