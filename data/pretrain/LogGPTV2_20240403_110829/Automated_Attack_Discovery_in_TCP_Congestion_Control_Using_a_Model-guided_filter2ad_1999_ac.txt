may contain two manipulations to cwnd that balance each other
out, or a cycle may not be triggerable by the attacker.
Our abstract strategy generator takes as input an FSM
model of congestion control and a description of the desirable
transitions. In our case, a desirable transition is one that
modiﬁes cwnd. It outputs a list of all paths with cycles that
contain a desirable transition and can therefore be used by an
attacker to achieve his goal. This list includes the transitions in
each path as well as the conditions that cause each transition.
We use a modiﬁed depth-ﬁrst traversal to enumerate all paths
in the FSM. We formally deﬁne the abstract strategy generation
problem and our algorithm below.
State Machine Model. We deﬁne a model M describing
the state machine of the congestion control algorithm as a tuple
(S,N ,V,C,A, σ,T ). S is a ﬁnite set of states {s0, . . . , sn},
and the initial state is σ ∈ S. N represents a ﬁnite set of
network events (e.g., ACK signiﬁes the reception of a TCP
acknowledgment). V is a ﬁnite set of variables including both
some ﬁelds of a received packet and some program variables.
For instance, New means the received ACK acknowledges
some new data and cwnd indicates the program variable that
represents congestion window size. C represents a ﬁnite set
of conditional statements such that each element c ∈ C is a
quantiﬁer-free ﬁrst order logic (QF-FOL) formula [30] over V
(e.g., dupAckCtr < 2). A represents a ﬁnite set of assignment
statements (i.e., protocol actions) over a subset of V (e.g.,
“cwnd = 1” means the congestion window is set to 1). In
2This is true for all congestion control algorithms except Google’s new
BBR [11] congestion control. This includes Reno [4], New Reno [19],
CUBIC [34], Compound TCP [39], and Vegas [9], among others. However,
BBR does maintain a variable containing the explicitly computed allowed
sending rate, which has similar properties for our purposes. As BBR’s public
release was concurrent with this work, we do not consider it further here.
addition, N , V, C, and A are pairwise disjoint. T represents
the transition relations such that T ⊆ S × N × C × 2A × S.
Let ψ : T (cid:55)→ S and ξ : T (cid:55)→ S be two maps indicating the
source and target of a transition. For example, if a transition
t ∈ T begins at sb and ends at se, then ψ(t) = sb and ξ(t) =
se. Let λ : T (cid:55)→ N × C and ℵ : T (cid:55)→ P(A) be two maps to
indicate the triggering conditions and the set of actions of a
transition, respectively. Now we deﬁne a path as follows.
Deﬁnition 1. Path: A path P in M is a sequence of pairs
of states and transitions (cid:104)(si0, tj0), (si1, tj1 ), . . . , (sik , tjk )(cid:105),
where k ≥ 0; each six ∈ S for 0 ≤ x ≤ k and si0 = σ (the ini-
tial state); ∀y [tjy ∈ T ∧ψ(tjy ) = siy∧ξ(tjy ) = si(y+1)] where
0 ≤ y ≤ k − 1; tjk ∈ {T ,⊥} and [ψ(tjk ) = sik ∧ ξ(tjk ) ∈
{S,⊥}]. In addition, ∀r, s[r (cid:54)= s → sir (cid:54)= sis ∧ tjr (cid:54)= tjs],
where r, s ∈ {0, 1, . . . , k}.
In other words, a path P starts at σ and moves to the state
si1 by taking the transition tj0. By following the sequence, P
ﬁnally reaches at sik. The last segment of P (i.e., (sik , tjk )) is
special as it determines the existence of a cycle. If P contains
a cycle, then [tjk (cid:54)= ⊥ ∧ tjk ∈ T ] and ∃z[ξ(tik ) = siz ],
where z ∈ {0, 1, . . . , k}. When P has no cycle, tjk = ⊥ and
ξ(tjk ) = ⊥.
Deﬁnition 2. Vulnerable path: Given a vulnerable action α ∈
A, a path P in M is a vulnerable path if P has a segment
(six , tjx ) such that α ∈ ℵ(tjx), where x ∈ {0, . . . , k} and
k ≥ 0.
Deﬁnition 3. Abstract strategy: Given a vulnerable path P
in M such that P = (cid:104)(si0 , tj0), . . . , (sik , tjk )(cid:105) for some
k ≥ 0, the corresponding abstract strategy S is deﬁned as
(cid:104)(si0, λ(tj0 )), (si1, λ(tj1 )), . . . , (sik , λ(tjk ))(cid:105), where λ(tjx) ∈
(N × C) if tjx ∈ T or λ(tjx) = ⊥ if tjx = ⊥ for each
0 ≤ x ≤ k.
Abstract Strategy Generator. Given M, a directed multi-
graph with cycles, and the attacker’s goal α ∈ A,
the
Abstract Strategy Generator aims to ﬁnd all the vulnerable
paths in M with respect to α. We devise the algorithm shown
in Algorithm 1, which begins the search from the function
VulnerablePathFinder. Intuitively, the algorithm traverses
the entire graph in a depth-ﬁrst fashion, starting at the initial
state σ ∈ S. For each transition t ∈ T such that ψ(t) = σ,
the algorithm initializes a new path P , appends (σ, t) to
P , and recursively continues its exploration of the subgraph
rooted at ξ(t). For P , the recursion stops when it encounters
a cycle (line 13) or a terminating state (line 15). If any of
these stop conditions is met, the algorithm checks if P is a
vulnerable path with respect to α; if so, it adds P to the set
of the vulnerable paths (line 20). Unlike traditional depth-ﬁrst
traversal, the algorithm restores the subgraph rooted at ξ(t)
by marking it unvisited (line 28) in order to ﬁnd all possible
vulnerable paths w.r.t. α. Upon termination,
the algorithm
returns the set of vulnerable paths w.r.t. α (line 10) identiﬁed
during the exploration. This set of vulnerable paths contain our
abstract strategies. We generate our abstract strategies {S} by
taking projections on conditions of the transitions along each
path.
7
Algorithm 1: Abstract Strategy Generator
Input: Multigraph M = (S,N ,V,C,A, σ,T ), ψ, ξ, λ, ℵ
and a vulnerable action α ∈ A
Output: All vulnerable paths with respect to α
1 V ulnerableP aths := ∅
/* to store all the vulnerable paths */
root := σ
Mark root as visited
foreach transition t such that ψ(t) = root do
/* initial state */
2 Function VulnerablePathFinder(M, α)
3
4
5
6
7
8
9
Create a new path P
P := P(cid:107)(root, t)
v := ξ(t)
RecursiveSearch(v, P, α)
/* concatenating */
10
return V ulnerableP aths
11 Function RecursiveSearch(v, P, α)
/* search continue from v */
base case := false
if v is already visited then
base case := true
// reached a cycle
else if exists no t such that ψ(t) = v then
/* v is a terminating state */
base case := true
P := P(cid:107)(v,⊥)
/* concatenating */
if base case is true then
if P is a vulnerable path w.r.t. α then
V ulnerableP aths := V ulnerableP aths ∪ P
else
Mark v as visited
foreach transition t such that ψ(t) = v do
v(cid:48) := ξ(t)
P (cid:48) := P
P := P(cid:107)(v(cid:48), t)
RecursiveSearch(v(cid:48), P (cid:48), α)
/* creating a copy */
/* concatenating */
Mark v as unvisited
return
/* void */
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
C. Concrete Strategy Generation
An abstract strategy just speciﬁes a path in the FSM that
can lead to an attack. However, there are usually several ways
in which this path can be concretely achieved at runtime.
Concrete strategy generation takes our abstract strategies and
converts them into sets of basic message-based actions that
can be applied by our attack injector in particular states of the
FSM.
Our concrete strategy generator considers each abstract
strategy individually and iterates through each transition in
that strategy. Each of these network conditions is mapped to
a basic action that the attacker can directly utilize to trigger
that network condition in that state. This results in a set of
(state, action) pairs which we call a concrete strategy. A
transition condition may be triggered by multiple basic actions,
in which case this mapping results in a set of basic actions that
could be applied in that state to cause the next transition. Our
generator creates one concrete strategy for each combination of
actions from these sets. Note that we require a domain expert
8
to provide the mapping of network conditions to basic actions
since it relies on domain knowledge. This mapping only needs
to be updated when the state machine model changes or new
actions are added; generating concrete actions for a given
implementation is completely automated.
We developed our set of basic actions based on an extensive
study of TCP and known congestion control attacks. We
consider two categories: injection of acknowledgements, which
captures the capabilities of an off-path attacker, and modiﬁca-
tion of acknowledgements, which captures the capabilities of
an on-path attacker.
Injection of acknowledgements (off-path attacker). This
type of action injects new spoofed acknowledgement packets
for either the client or server of a target connection. We support
a number of different ways of injecting acknowledgements:
(1) Duplicate Acknowledgements (param: dup no, delay,
offset) — Injecting many acknowledgements with the same
acknowledgement number as an apparent set of duplicate
acknowledgements. This enables an off-path attacker to slow
down a connection. This action assumes that target connec-
tion’s sequence and acknowledgement numbers are known or
can be guessed. Parameters control the number of duplicates
injected (2, 10, 1000), the spacing between these duplicates
(1ms), and offset from the current acknowledgement number
(0, 3000, 90000).
(2) Offset Acknowledgements (param: num, delay, data,
offset) – Injecting a series of acknowledgements with an
acknowledgement number offset from the legitimate acknowl-
edgement number. Acknowledges either less or more data than
is acknowledged by the receiver. This action assumes that
target connection’s sequence and acknowledgement numbers
are known or can be guessed. Parameters control the number
of acknowledgements injected (10000, 50000), the spacing
between these acknowledgements (1ms, 2ms), any bytes of
data included (0, 10), and any offset from the current acknowl-
edgement number (0, 100, 3000, 9000, 90000).
(3) Incrementing Acknowledgements (param: num, delay,
data) — Injecting a series of acknowledgements where the
acknowledgement number increases by a variable amount each
time. Congestion control expects these acknowledgements to
indicate the successful receipt of new data and will act accord-
ingly. This action assumes that target connection’s sequence
and acknowledgement numbers are known or can be guessed.
Parameters control the number of acknowledgements injected
(50000), the spacing between these acknowledgements (1ms),
and the amount the acknowledgement is incremented with each
packet (9000, 90000).
Modiﬁcation of acknowledgements (on-path attacker).
This type of action changes the manner in which acknowledge-
ments for the sequence space are sent. We support a number
of manipulations to the sequence of acknowledgements for a
data stream:
(1) Division (param: data) — Acknowledge the sequence
space in chunks much smaller than a single packet. This splits
a single acknowledgement packet into many acknowledgement
packets that acknowledge separate ranges. A parameter con-
trols the number of bytes to acknowledge in a single chunk
(100).
(2) Duplication (param: dup no) — Duplicate acknowl-
edgements of chunks of the sequence space repeatedly. A
parameter controls the number of duplicate acknowledgements
to create (1 ,4, 100). This breaks the assumption that each
acknowledgement received corresponds to a packet that left
the network.
(3) Pre-acknowledging (param: none) — Acknowledging
portions of the sequence space that have not been received yet.
This hides any losses, preventing slow downs, and effectively
shrinks the connection’s RTT, allowing faster than normal
throughput increases.
(4) Limiting (param: none) — Prevents the acknowl-
edgement number from increasing. This generates duplicate
acknowledgements but also prevents any new data from being
acknowledged. This is likely to stall the connection and lead
to an RTO.
D. State Tracker
In order to test a strategy against an implementation,
TCPWN needs to know that the state of the sender with respect
to congestion control. This is not an easy problem as there
are several implemented congestion control algorithms such as
Reno [4], New Reno [19], CUBIC [34], Compound TCP [39],
and Vegas [9]. Implementations may also choose to include
an Application Limited state, adjustable dupACKctr thresh-
olds, and optional enhancements like SACK [8], DSACK [7],
TLP [17], F-RTO [35], and PRR [28]. Additionally, we desire
to do this without modifying the sender or making assumptions
about what kind of debugging information it makes available.
Finally, key variables that determine the state of the sender
(like cwnd, ssthresh, and rto_timeout) are not exposed by
the sender and are not readily computable from network trafﬁc.
To overcome these challenges, we choose to approximate
the congestion control state machine by focusing on its core
states and assume a bulk transfer application that always has
data available to send. This is practical because nearly all
TCP congestion control algorithms contain the same basic
core set of states from TCP New Reno (see Fig. 1) with the
differences being in terms of small changes in the actions
done on each transition or the insertion of extra states. For
example, CUBIC TCP simply modiﬁes the additive increase
and multiplicative decrease constants on the transitions to fast
recovery and congestion avoidance. Similarly, TLP adds a
single state before exponential backoff. It is entered using a
slightly smaller timeout and sends a single new packet to try
and avoid an expensive RTO.
We developed a novel algorithm to track the sender’s
congestion control state using only network trafﬁc. We ﬁnd
that this algorithm works well even when used with implemen-
tations containing complex state machines and enhancements
and approximating these using only TCP New Reno. Our
algorithm detects the fast recovery state even when the cwnd
reduction is CUBIC’s 0.8 factor and not the 0.5 used by
New Reno. It still identiﬁes retransmitted packets and enters
fast recovery even if SACK is in use and fast recovery
was triggered via SACK blocks. TLP is a case where our
approximation fails, but even here we misclassify a tail-loss-
probe as an RTO. This is only a minor issue because both states
are entered via by timeouts and trigger the transmission of a
Fig. 4. Testing Environment of TCPWN
single packet. The pseudocode of our algorithm is presented
in Appendix B.
V.
IMPLEMENTATION
Given the different variants of TCP congestion control
algorithms, features, and optimizations [8], [7], [17], [28],
[35], [34], [13] any implementation has to make choices
about what conﬁguration and combination of features will
be provided. This leads to minor differences in congestion
control behavior between implementations which can enable
or prevent particular attacks or even attack classes.
A. Testing Environment
We developed a testing environment (Fig. 4) which lever-
ages virtualization for both client and server, enabling us to
run a wide range of implementations, independent of operating
system, programming language, libraries, or availability of
source code.
We connect four virtual hosts into a dumbbell topology
with two clients on one side, two servers on the other, and
a single bottleneck link between. When each client connects
to one of the servers, this topology provides an environment
where two ﬂows have to compete for bandwidth on the
bottleneck link. This competition is precisely what an attacker