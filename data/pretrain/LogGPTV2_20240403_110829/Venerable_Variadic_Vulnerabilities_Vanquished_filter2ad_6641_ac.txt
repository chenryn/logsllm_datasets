### 代码结构与操作

这些操作在LLVM中表现为对相应函数的调用。

```c
struct vcsd_t {
    unsigned count;
    type_t *args;
};

thread_local std::stack<vcsd_t*> vcs;
thread_local std::map<va_list*, std::pair<vcsd_t*, unsigned>> vlm;

void pre_call(vcsd_t *arguments) {
    vcs.push(arguments);
}

void post_call() {
    vcs.pop();
}

void list_init(va_list *list_ptr) {
    vlm[list_ptr] = { vcs.top(), 0 };
}

void list_free(va_list *list_ptr) {
    vlm.erase(list_ptr);
}

void check_arg(va_list *list_ptr, type_t type) {
    auto &args = vlm[list_ptr];
    unsigned index = args.second++;
    assert(index < args.first->count);
    assert(args.first->args[index] == type);
}

int add(int start, ...) {
    va_list list;
    va_start(list, start);
    list_init(&list);
    int total = start;
    do {
        check_arg(&list, typeid(int));
        total += va_arg(list, int);
    } while (va_arg(list, int) != 0);
    va_end(list);
    list_free(&list);
    return total;
}

const vcsd_t main_add_vcsd = {
    .count = 3,
    .args = {typeid(int), typeid(int), typeid(int)}
};

int main(int argc, const char *argv[]) {
    pre_call(&main_add_vcsd);
    int result = add(5, 1, 2, 0);
    post_call();
    printf("%d\n", result);
    return 0;
}
```

**Listing 2:**
这是Listing 1中代码的工具化版本。简化后的C++表示了`llvm.va_start`、`llvm.va_copy`和`va_end`的内联函数。我们通过调用运行时库中的`list_init`、`list_copy`和`list_free`函数来工具化这些操作。接下来，我们识别`va_arg`操作。尽管LLVM IR有一个专门的`va_arg`指令，但在我们测试的所有平台上都没有使用该指令。相反，`va_list`是直接访问的。因此，我们的`va_arg`识别是平台特定的。在x86-64架构上，我们主要通过识别`va_list`结构中的`gp_offset`和`fp_offset`字段来识别`va_arg`（见第2.2节）。当程序尝试从列表中检索浮点参数时，会访问`fp_offset`字段；而`gp_offset`字段则用于检索其他类型的可变参数。我们在访问这些字段的指令前插入一个调用`check_arg`函数的指令。

### 动态可变参数类型检查

整个运行时是用纯C语言实现的，这样可以将其链接到标准C库中而不引入对标准C++库的依赖。VCS（Variadic Call Stack）被实现为一个线程局部栈，而VLM（Variadic List Map）被实现为一个线程局部哈希表。`pre_call`和`post_call`函数分别将类型信息压入和弹出VCS。`list_init`函数在VLM中插入一个新的条目，使用栈顶元素作为条目的类型信息，并将已消耗参数的计数器初始化为0。

`check_arg`函数在VLM中查找正在访问的`va_list`的类型信息，并检查请求的参数是否存在（基于已消耗参数的计数器），以及其类型是否与调用者提供的类型匹配。如果任一检查失败，执行将被终止，并生成如Listing 3所示的错误消息。结果，指向参数的指针永远不会被读取或写入，因为该指针从未被解引用。

**Listing 3:**
HexVASAN报告的错误消息示例

```
Error: Type Mismatch
Index is 1
Callee Type : 43 (32-bit Integer)
Caller Type : 15 (Pointer)
Backtrace:
[0] 0x4019ff  at test
[1] 0x401837  at test
[2] 0x8011b3afa  at libc.so.7
[3] 0x8011b1816  at libc.so.7
[4] 0x801200e50  at libc.so.7
[5] 0x4024ae  at test
[6] 0x4012ff  at test
```

### 评估

在本节中，我们将展示一个关于基于可变参数函数攻击的案例研究，以评估当前最先进的CFI（Control Flow Integrity）实现。接着，我们将评估HexVASAN作为一种漏洞缓解技术的有效性。然后，我们将评估我们的HexVASAN原型实现在SPEC CPU2006整数（CINT2006）基准测试、Firefox的标准JavaScript基准测试和微基准测试上的开销。此外，我们还将评估可变参数函数在SPEC CPU2006和Firefox 51.0.1、Chromium 58.0.3007.0、Apache 2.4.23、CPython 3.7.0、nginx 1.11.5、OpenSSL 1.1.1、Wireshark 2.2.1以及FreeBSD 11.0基础系统中的使用情况。

除了测试上述软件外，我们还开发了一组内部回归测试。我们的回归测试允许我们验证我们的消毒器能够正确捕获有问题的可变参数函数调用，并且不会对良性调用产生误报。测试套件探索了各种边界情况，包括试图访问未传递的参数和使用与调用站点不同的类型访问参数。

#### 6.1 案例研究：CFI有效性

我们设想的一种攻击场景是攻击者控制间接调用的目标。如果调用站点的预期目标是一个可变参数函数，攻击者可以非法调用另一个具有不同可变参数的可变参数函数（但非可变参数的类型相同）。如果调用站点的预期目标是一个非可变参数函数，攻击者可以调用一个将某些预期目标的参数解释为可变参数的可变参数函数。

所有现有的CFI机制在某种程度上都允许这种攻击。最精确的CFI机制依赖于函数原型来分类目标集（例如，LLVM-CFI、piCFI或VTV），将允许所有具有相同原型的目标，可能限制为程序中地址被获取的函数子集。这对于可变参数函数来说是有问题的，因为只有非可变参数的类型是静态已知的。例如，如果预期从间接调用站点调用类型为`int (*)(int, ...)`的函数，则精确的CFI方案将允许调用所有其他具有该类型的可变参数函数，即使这些其他函数期望不同的可变参数类型。

另一种攻击可变参数函数的方法是直接覆盖它们的参数。例如，在格式字符串攻击中，攻击者可以通过覆盖格式字符串来导致对可变参数的误解。HexVASAN在调用方尝试使用`va_arg`宏（如第2.1节所述）检索可变参数时检测这两种攻击。检查和强制可变参数函数的正确类型只能在运行时进行，任何消毒器都必须依赖运行时检查。因此，CFI机制必须扩展类似于HexVASAN的机制来检测违规行为。为了展示我们的工具可以补充CFI，我们创建了一个包含几个可变参数函数和一个非可变参数函数的测试程序。这些函数的定义如下：

```c
int sum_ints(int n, ...);
int avg_longs(int n, ...);
int avg_doubles(int n, ...);
void print_longs(int n, ...);
void print_doubles(int n, ...);
int square(int n);
```

该程序包含一个间接调用站点，仅允许合法调用`sum_ints`函数，另一个间接调用站点仅允许合法调用`square`函数。我们还引入了一个内存破坏漏洞，允许我们覆盖这两个间接调用的目标。

我们构建了这个程序，使得`sum_ints`、`avg_longs`、`print_longs`和`square`都是地址被获取的函数。`avg_doubles`和`print_doubles`函数不是地址被获取的。

`avg_longs`、`avg_doubles`、`print_longs`和`print_doubles`函数都期望与`sum_ints`函数不同的可变参数类型。然而，`sum_ints`、`avg_longs`、`avg_doubles`和`square`函数都有相同的非可变参数原型（`int (*)(int)`）。

我们编译了六个版本的测试程序，分别用HexVASAN、LLVM 3.9 Forward-Edge CFI [59]、Per-Input CFI [44]、CCFI [35]、GCC 6.2的VTV [59]和Visual C++ Control Flow Guard [37]进行了工具化。在每个版本中，我们首先通过覆盖间接调用站点来构建涉及可变参数函数的攻击，分别调用上述描述的每个可变参数函数。然后，我们也测试了在不覆盖间接调用目标的情况下覆盖`sum_ints`函数的参数。表1显示了检测结果。

| 实际目标 | 预期目标 | 原型 | 可变参数 | 非可变参数 | 地址被获取? |
| --- | --- | --- | --- | --- | --- |
| 相同 | 不同 | 相同 | 不同 | 是 | 否 |
| LLVM-CFI | pi-CFI | CCFI | VTV | CFG | HexVASAN |
| ✓ | ✓ | ✗ | ✗ | ✗ | ✗ |
| ✓ | ✓ | ✗ | ✗ | ✗ | ✗ |
| ✗ | ✓ | ✓ | ✓ | ✓ | ✓ |
| ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |
| ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |
| ✗ | ✗ | ✗ | ✗ | ✗ | ✗ |

LLVM Forward-Edge CFI允许从`sum_ints`间接调用站点调用`avg_longs`和`avg_doubles`，因为这些函数具有与预期调用目标相同的静态类型签名。然而，这种CFI实现不允许从非可变参数调用站点调用可变参数函数。

CCFI仅检测从`square`调用站点调用`print_doubles`函数，这是一个地址未被获取且具有不同非可变参数原型的函数。它允许所有其他非法调用。

GCC VTV和Visual C++ CFG允许所有非法调用，即使非可变参数类型签名与预期调用目标的类型签名不匹配。

pi-CFI允许从`sum_ints`间接调用站点调用`avg_longs`函数。`avg_longs`是地址被获取的，并且具有与预期调用目标相同的静态类型签名。pi-CFI不允许非法调用非地址被获取的函数或具有不同静态类型签名的函数。pi-CFI也不允许从非可变参数调用站点调用可变参数函数。

所有CFI实现都允许直接覆盖可变参数，只要不违反程序的原始控制流。

#### 6.2 漏洞检测

为了评估我们的工具作为现实世界漏洞检测器的有效性，我们构建了一个HexVASAN强化版的sudo 1.8.3。sudo允许授权用户以另一个用户的身份执行shell命令，通常是具有高特权级别的用户。如果被攻破，sudo可以提升非授权用户的权限，使其成为攻击者的热门目标。sudo 1.8.0到1.8.3p1版本中存在一个格式字符串漏洞（CVE-2012-0809），允许这样的攻击。该漏洞可以通过将格式字符串作为sudo程序的第一个参数（argv[0]）传递来利用。有一种这样的漏洞利用绕过了ASLR、DEP和glibc的FORTIFY_SOURCE保护 [20]。此外，我们验证了GCC 5.4.0和clang 3.8.0即使在用format函数属性注释易受攻击的函数并设置编译器的格式字符串检查（-Wformat）为最高级别时也无法捕获此漏洞。

虽然调用格式字符串函数（fprintf）的是sudo本身，但HexVASAN只能在被调用方检测到违规行为。因此，我们不仅需要构建加固后的sudo二进制文件，还需要构建C库。我们选择在FreeBSD平台上这样做，因为其标准C库可以轻松地使用LLVM构建，而HexVASAN因此很容易融入FreeBSD构建过程。正如预期的那样，HexVASAN确实检测到了触发漏洞的任何攻击，并生成了如Listing 4所示的错误消息。

**Listing 4:**
sudo中的漏洞检测

```
$ ln -s /usr/bin/sudo %x%x%x%x
$ ./%x%x%x%x -D9 -A
--------------------------
Error: Index greater than Argument Count
Index is 1
Backtrace:
[0] 0x4053bf  at sudo
[1] 0x405094  at sudo
[2] 0x8015dce24  at libc.so
[3] 0x8015dac52  at libc.so
[4] 0x8015daab3  at libc.so
[5] 0x40bdaf  at sudo
[6] 0x40ada3  at sudo
[7] 0x40494f  at sudo
```

#### 6.3 可变参数函数的普遍性

为了收集实际软件中可变参数函数的使用情况，我们扩展了我们的工具化机制以收集有关可变参数函数及其调用的统计信息。如表2所示，对于每个程序，我们收集以下信息：

- 调用站点数量
- 函数数量
- 比率

| 程序 | 调用站点 | 函数 | 比率 |
| --- | --- | --- | --- |
| 程序1 | 18 | 44 | 7121 |
| 程序2 | 4183 | 1085 | 4072 |
| 程序3 | 37717 | 1460 | 85 |
| 程序4 | 3615 | - | - |

希望这些优化后的文本能更好地传达你的意图。如果有任何进一步的修改需求，请告诉我！