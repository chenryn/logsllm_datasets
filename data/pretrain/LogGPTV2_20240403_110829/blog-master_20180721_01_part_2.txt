6、数据量：1.12亿条    
总耗时：    
(主要慢在trigger内部的逻辑处理)    
1207 秒。      
### 无trigger导入速度：    
1、删除触发器    
```    
postgres=# drop trigger tg1 on a;    
DROP TRIGGER    
```    
2、调用并行接口，批量并发写入    
```    
truncate a;  
truncate t_result;  
select * from get_res() as t(id text);      
```    
3、数据量：1.12亿条    
总耗时：    
(主要慢在trigger内部的逻辑处理)    
706 秒。      
## 性能对比    
### PostgreSQL 10 on CentOS 7.x  
### PostgreSQL 10 logged table 测试结果  
case | 并发数 | 写入量 | 耗时    
---|---|---|---    
无触发器 | 56 | 1.12亿 | 103 秒    
before for each row触发器 | 56 | 1.12亿 | 1165 秒    
after for each row触发器 | 56 | 1.12亿 | 1247 秒    
性能瓶颈，在写wal日志上面，如果使用unlogged table，就可以发挥出CPU所有能力了。  
```  
postgres=# select wait_event_type,wait_event,count(*) from pg_stat_activity group by 1,2 order by count(*) desc;  
 wait_event_type |     wait_event      | count   
-----------------+---------------------+-------  
 LWLock          | wal_insert          |    40  
                 |                     |    19  
 Activity        | BgWriterMain        |     1  
 Activity        | AutoVacuumMain      |     1  
 IO              | DataFileWrite       |     1  
 Activity        | LogicalApplyMain    |     1  
 Activity        | LogicalLauncherMain |     1  
(7 rows)  
```  
### PostgreSQL 10 unlogged table 测试结果  
```  
truncate a;  
truncate t_result;  
alter table a set unlogged;  
alter table t_result set unlogged;  
```  
case | 并发数 | 写入量 | 耗时    
---|---|---|---    
无触发器 | 56 | 1.12亿 | 61 秒    
before for each row触发器 | 56 | 1.12亿 | 1113 秒    
after for each row触发器 | 56 | 1.12亿 | 1158 秒    
现在“无触发器”模式的瓶颈变成了EXTEND BLOCK，也就是扩展数据文件。触发器的情况下，CPU计算为瓶颈，没有其他瓶颈，所以unlogged与logged table性能差异不大）。     
```  
postgres=# select wait_event_type,wait_event,count(*) from pg_stat_activity group by 1,2 order by count(*) desc;  
 wait_event_type |     wait_event      | count   
-----------------+---------------------+-------  
 Lock            | extend              |    41  
```  
[《HTAP数据库 PostgreSQL 场景与性能测试之 43 - (OLTP+OLAP) unlogged table 含索引多表批量写入》](../201711/20171107_44.md)    
[《HTAP数据库 PostgreSQL 场景与性能测试之 42 - (OLTP+OLAP) unlogged table 不含索引多表批量写入》](../201711/20171107_43.md)    
[《HTAP数据库 PostgreSQL 场景与性能测试之 41 - (OLTP+OLAP) 含索引多表批量写入》](../201711/20171107_42.md)    
[《HTAP数据库 PostgreSQL 场景与性能测试之 40 - (OLTP+OLAP) 不含索引多表批量写入》](../201711/20171107_41.md)    
[《HTAP数据库 PostgreSQL 场景与性能测试之 39 - (OLTP+OLAP) 含索引多表单点写入》](../201711/20171107_40.md)    
[《HTAP数据库 PostgreSQL 场景与性能测试之 38 - (OLTP+OLAP) 不含索引多表单点写入》](../201711/20171107_39.md)    
[《HTAP数据库 PostgreSQL 场景与性能测试之 37 - (OLTP+OLAP) 含索引单表批量写入》](../201711/20171107_38.md)    
[《HTAP数据库 PostgreSQL 场景与性能测试之 36 - (OLTP+OLAP) 不含索引单表批量写入》](../201711/20171107_37.md)    
[《HTAP数据库 PostgreSQL 场景与性能测试之 35 - (OLTP+OLAP) 含索引单表单点写入》](../201711/20171107_36.md)    
[《HTAP数据库 PostgreSQL 场景与性能测试之 34 - (OLTP+OLAP) 不含索引单表单点写入》](../201711/20171107_35.md)    
### PostgreSQL 9.4 on CentOS 7.x  
### PostgreSQL 9.4 logged table 测试结果  
PostgreSQL 9.4，当批量导入的TABLE加了trigger，并且trigger function里面有query处理时，很卡很卡，数据库几乎不可用。  
卡在哪里？   
```  
Samples: 655K of event 'cpu-clock', Event count (approx.): 143038981880  
Overhead  Shared Object          Symbol                                  
  76.93%  postgres               [.] s_lock                              
   3.60%  postgres               [.] LWLockAcquire                       
   3.34%  postgres               [.] LWLockRelease                       
   1.55%  [kernel]               [k] run_timer_softirq                   
   0.84%  postgres               [.] GetSnapshotData                     
   0.73%  postgres               [.] AllocSetAlloc                       
   0.64%  postgres               [.] PushActiveSnapshot                  
   0.59%  [kernel]               [k] __do_softirq                        
   0.54%  [kernel]               [k] _raw_spin_unlock_irqrestore         
   0.40%  [kernel]               [k] finish_task_switch                  
   0.35%  libc-2.17.so           [.] __GI_____strtod_l_internal          
   0.32%  [kernel]               [k] rcu_process_callbacks               
   0.26%  postgres               [.] ExecMakeFunctionResultNoSets        
   0.25%  libc-2.17.so           [.] __memcpy_ssse3_back                 
   0.24%  postgres               [.] palloc                              
   0.21%  plpgsql.so             [.] exec_eval_expr                      
   0.21%  [kernel]               [k] tick_nohz_idle_exit  
```  
lwlockacquire到release的过程可能过长。  
PostgreSQL 10在各方面都有优化，比如典型的GIN索引场景，9.4在高并发更新下面也是存在性能问题。  
[《PostgreSQL 10 GIN索引 锁优化》](../201707/20170704_01.md)    
**建议本文提到的场景，不要使用9.4的版本。(并发控制到8以下，s_lock问题才不是那么明显)，以下是并发8的测试结果**  
**下面测试只写入1400万，耗时乘以7，可以对比postgresql 10**   
case | 并发数 | 写入量 | 耗时    
---|---|---|---    
无触发器 | 8 | 1400万 | 21 秒 , 147 秒  
before for each row触发器 | 8 | 1400万 | 210 秒 , 1470 秒  
after for each row触发器 | 8 | 1400万 | 206 秒 , 1442 秒  
## 其他    
可以随时杀掉导入进程    
```    
select pg_terminate_backend(pid) from pg_stat_activity where application_name='digoal_loader';    
```    
## 参考    
[《PostgreSQL 批量、单步 写入 - row, statement 触发器(中间表)、CTE 几种用法性能对比》](../201807/20180720_01.md)      
[《PostgreSQL 自动创建分区实践 - 写入触发器》](../201805/20180507_01.md)      
[《PostgreSQL Oracle 兼容性之 - ALTER TRIGGER ENABLE|DISABLE》](../201804/20180408_02.md)      
[《PostgreSQL rotate table 自动清理调度 - 约束，触发器》](../201803/20180311_06.md)      
[《PostgreSQL 事件触发器应用 - DDL审计记录 + 异步通知(notify)》](../201709/20170925_02.md)      
[《数据入库实时转换 - trigger , rule》](../201706/20170619_02.md)      
[《(流式、lambda、触发器)实时处理大比拼 - 物联网(IoT)\金融,时序处理最佳实践》](../201705/20170518_01.md)      
[《快速入门PostgreSQL应用开发与管理 - 7 函数、存储过程和触发器》](../201704/20170412_02.md)      
[《PostgreSQL 10.0 preview 功能增强 - 触发器函数内置中间表》](../201704/20170401_01.md)      
[《PostgreSQL 安全陷阱 - 利用触发器或规则，结合security invoker函数制造反噬陷阱》](../201509/20150929_01.md)      
[《use PostgreSQL trigger manage stock & offer infomation》](../201507/20150717_03.md)      
[《PostgreSQL trigger/rule based replication configure, DISABLE/ENABLE [ REPLICA | ALWAYS ] TRIGGER | RULE》](../201506/20150615_01.md)      
[《PostgreSQL Oracle 兼容性之 - 事件触发器实现类似Oracle的回收站功能》](../201504/20150429_01.md)      
[《PostgreSQL 触发器应用 - use trigger audit record which column modified, insert, delete.》](../201412/20141214_01.md)      
[《use event trigger function record user who alter table's SQL》](../201412/20141211_02.md)      
[《PostgreSQL 事件触发器 - DDL审计 , DDL逻辑复制 , 打造DDL统一管理入》](../201412/20141211_01.md)      
[《PostgreSQL 触发器应用 - (触发器WHEN)前置条件过滤跟踪目标记录》](../201409/20140917_01.md)      
[《PostgreSQL 闪回 - flash back query emulate by trigger》](../201408/20140828_01.md)      
[《PostgreSQL 事件触发器 - PostgreSQL 9.3 Event Trigger》](../201303/20130313_01.md)      
[《表级复制(base on trigger) -- PostgreSQL general sync and async multi-master replication trigger function》](../201303/20130311_03.md)      
[《PostgreSQL 触发器 用法详解 2》](../201303/20130311_02.md)      
[《PostgreSQL 触发器 用法详解 1》](../201303/20130311_01.md)      
[《递归优化CASE - performance tuning case :use cursor\trigger\recursive replace (group by and order by) REDUCE needed blockes scan》](../201209/20120914_01.md)      
[《PostgreSQL general public partition table trigger》](../201209/20120907_01.md)      
[《表级复制(base on trigger) -- multi master replication & performance tuning》](../201208/20120831_02.md)      
[《表级复制(base on trigger) -- one(rw) to many(ro|rw)》](../201208/20120831_01.md)      
[《PostgreSQL 跟踪DDL时间 - cann't use pg_class's trigger trace user_table's create,modify,delete Time》](../201206/20120626_01.md)      
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")