The analyzed sample is categorized by anti-virus industry as backdoor, spy or bot; so it should come 
with extended network functionality. Not much of the communication capabilities can be analyzed 
dynamically though, the sample only tries to communicate to one single, hardcoded domain. The 
sample tries to connect to ns.dns3-domain.com, but no answer was ever received from the server. 
The according network address 125.34.39.47 does not answer, neither ping requests nor requests of 
the bot. 
The domain actually still exists and is registered until July 2013. 
Whois v1.01 - Domain information lookup utility 
Sysinternals - www.sysinternals.com 
Copyright (C) 2005 Mark Russinovich 
Connecting to COM.whois-servers.net... 
Connecting to grs-whois.hichina.com... 
Domain Name ..................... DNS3-DOMAIN.COM 
Name Server ..................... dns21.hichina.com 
                                  dns22.hichina.com 
Registrant ID ................... hc564383063-cn 
Registrant Name ................. sun rui 
Registrant Organization ......... sun rui 
Registrant Address .............. tian jin shi he xi qu mei jiang dao 18 hao 
Registrant City ................. tian jin shi 
Registrant Province/State ....... tian jin 
Registrant Postal Code .......... 300221 
Registrant Country Code ......... CN 
Registrant Email ................ PI:EMAIL 
… Output omitted … 
Expiration Date ................. 2013-07-11 03:04:33 
6.1 Sending Messages to the C&C 
The analyzed sample implements functionality for use of send and sendto, as well as recv and 
recvfrom. System calls send/recv are used to operate TCP stream sockets while sendto/recvfrom 
operate UDP datagram sockets. This means that the analyzed sample has capability to use both, TCP 
and UDP connections. Most data sending routines in the malware code call to the UDP variant. 
Actually, message exchange with the C&C server is operated via UDP connections.  
The code for sending of UDP datagrams, which is used for most messages to the C&C, is 
implemented in around 35 methods of which all finally call into one single function that invokes the 
sendto system call. The numerous preceding methods are presumably obfuscation, checking of 
parameters or altering the data to be sent. The network message protocol with the C&C was not 
analyzed further. 
The preceding methods to sendto use critical sections quite frequently. This part of the code is 
believed to be implemented in a thread-safe manner, so that the threads can call into sendto 
concurrently.  
25 | P a g e  
Following the function calls towards the sendto method four main operators could be identified that 
would eventually use the sendto system call: 
1. getmessage_loop – the main method for thread4 when resolving the C&C domain and 
sending the “HELLO”-message to the server 
2. get_queued_compstatus – the main method for thread3 in case of non-failure 
3. cnc_cmd_switching – in case of failure of some sort the main function of thread7 sends 
notifications to the server 
4. message_to_cnc – this function was identified as being used predominantly to send 
messages and data to the C&C server 
Point 1-3 depend on a specific thread, point 4 mentions a single method that is used throughout the 
code. Mostly it is called from thread7, where the processing of C&C commands happens and 
messages as well as data flow back to the C&C after operation. 
6.1.1 Initial “HELLO”-Messages 
The getmessage_loop resolves the remote server’s domain and sends “HELLO”-packages for means 
of registration. Two possible destination ports were identified for these messages, which are 53 
(Domain Name Service) and 8000 (Intel Remote Desktop Managemet Interface). 
The messages each contain a preceding GUID (Globally Unique Identifier), which is probably used for 
separation of infected machines on the server side. All together the messages are 25 bytes long, 16 
bytes GUID plus 9 bytes custom information. 
26 | P a g e  
7. C&C-Command Processing  
The method, identified as central node for processing of C&C commands, is shown for illustration 
purposes in an IDA Pro screenshot.  
Illustration 9 – C&C Command Processing Method 
The C&C instructions are numerical values, which are broken down in the method (called 
cnc_cmd_switching) to execute the according action. What the numerous branch instructions do is 
basically to allocate memory (yellow), create an object derived from a C&C command superclass 
(green) and finally execute the first virtual method (blue). 
22 operations were identified, that the execution call (blue) could eventually perform. In succession 
they are simply listed in their right to left order. 
7.1 Control Operations 
7.1.1 terminate 
The sample can terminate its own process by invoking the following pseudo code: 
TerminateProcess(OpenProcess(GetCurrentProcessId(), 0, PROCESS_TERMINATE),0).  
7.1.2 system_shutdown 
The malware grants itself the SeShutdownPriviledge and invokes ExitWindowsEx with the parameter 
0Ch. 0CH means that the flags EWX_POWEROFF and EWX_FORCE are set, which will force a system 
shutdown. 
27 | P a g e  
7.1.3 spawn_console_process 
This method implements code for spawning a console process with redirected standard handles. This 
means that the malware can start a child process, but redirect its standard handles to control input 
and output to and from this process. More information and example code can be found in MS 
Knowledgebase Article 190351 (see source [4]).  
The code for the console process‘ thread is of course located in a separate method. This method 
consists of a loop, where a file is read and it’s content is compared to a given buffer.  At the time of 
writing this report it was not perfectly clear what the purpose of this action is, but it is believed that 
the function, when it has found specific attributes, will copy the file content to memory and post a 
thread message with ID 402.  
7.1.4 shellexecute 
This method uses the ShellExecute API call to launch an application. If the received parameter is does 
not point to an executable file then ShellExecute opens the associated application. This is followed by 
a notification to the C&C server. 
7.1.5 notify_cnc 
An unidentified message is sent to the C&C server. 
7.1.6 notify_cnc2 
An unidentified message is sent to the C&C server. 
7.2 Multimedia Operations 
7.2.1 gdi_capture_window 
This method takes a capture of the actual desktop window and saves it to a .tmp-file in %TEMP% 
directory (file3). The capture is taken by an instance of CreateCaptureWindowA, which implies 
starting a thread and creating a nameless event. The thread then switches into waiting state until the 
method is called a second time. Then the same method will set the nameless event and the capture 
will terminate. The GDI jpeg encoder is used for creation of file3. 
Afterwards a message to the C&C server is sent.  
7.2.2 gdi_dca_screenshot 
This method creates a device context for the display device and produces a graphical snapshot of the 
actual screen display. Using the GDI jpeg encoder this image is saved in a .tmp-file in %TEMP% (file4).  
Afterwards a message to the C&C server is sent.  
28 | P a g e  
7.2.3 send_multimedia 
This method is designed for compressing and sending of file3 or file4, if they were created before by 
gdi_dca_screenshot or gdi_capture_window. In case of success the compressed data is sent to the 
remote server, otherwise a notification message is sent.  
7.3 File System Operations 
7.3.1 file_listing 
This method accepts a file- or directory name. It walks recursively down the directory tree and saves 
certain names to a list, which is then packed and sent to the C&C. The sample incorporates code 
from the zlib compression library, which lets assume that certain amounts of data to be sent to the 
C&C is compressed. This helps obfuscation and reduces network traffic. 
7.3.2 directory_listing 
This method walks a given directory and lists file entries plus the information if the containing 
directory contains a “..” entry. This indicates that it has a parent directory. The final list is not 
compressed before sending it to the C&C.  
7.3.4 directory_listing2 
This method accepts a path to a directory and lists all entries plus the information if the object is a 
file or a directory, indicated by 0 or 1. This list is then compressed and sent to the C&C server. 
7.3.5 create_directory 
This method accepts a character string as argument and creates an equally named directory on disk. 
This is followed by a notification to the C&C server. 
7.3.6 copy_file 
This method can copy a given file or list of files to a given place on disk. Afterwards another message 
to the C&C server is sent. 
7.3.7 delete_file 
This method can delete a given file or list of files from disk. Afterwards another message to the C&C 
server is sent. 
7.3.8 rename_file 
This method can rename one file on disk. Afterwards another message to the C&C server is sent. 
29 | P a g e  
7.3.9 write_to_file 
An unidentified character string is written to a file on disk.  
7.4 Other Operations 
7.4.1 get_volume_info 
Requests information about file system volumes and tries all possible drive letters beginning with A:\ 
to retrieve it. More specifically it requests the volume names and saves them to a buffer. These 
names are then sent to the C&C server.  
7.4.2 get_window_text 
This method enumerates the title bar texts of all uppermost desktop windows of each running 
process, if the window is not hidden or overlapped. This list is packed and sent to the C&C server. 
This way the attacker can get a clue what desktop applications are running at the moment.  
7.4.3 check_for_fingerprint 
Reads a file (file2, cmp. attachment[2]) from the systems %TEMP% directory and checks if its content 
matches the samples fingerprint as mentioned when describing the malwares startup procedure.  
7.4.4 smss_sysinu_tempfiles 
Reads file2 from the systems %TEMP% directory, modifies its content and copies it back to %TEMP% 
twice, once called %TEMP%\smss.exe and once %TEMP%\sysinu.dll. 
7.4.5 dat_file_createwrite 
This function fulfills various purposes. The C&C command is broken down into three defined cases. 
The method can either create file2, same as used in smss_sysinu_tempfiles and 
check_for_fingerprint, in the %TEMP% directory, or split a path down to create directories, so to say 
create the directory path from scratch and place a new file into it. The file is created empty and filled 
at a later point in time. 
This would be case 3, when the C&C command indicates another execution path, where first a 
notification is sent to the server and then a predefined value is written to file2. 
Creating and filling another fingerprint file could be an additional method for managing the different 
instances of the malware on the system. Also it could be used helping in a self-update mechanism. 
30 | P a g e  
7.5 Desinfection Routine  
The disinfection routine is called from thread0, the initial thread, when a specific unnamed event is 
set signaled. The routine starts by replacing its own image on disk with the hidden original file, if 
there exists one. This is achieved by deleting its own image, removing the hidden attribute from the 
original and renaming it back to original.exe.  
Afterwards it enumerates again all executable images that are registered for being loaded on startup 
in selected registry keys. Same happens with the enumeration of running processes, just as 
mentioned in the description of the file_infector thread. With this list prepared the routine calls the 
disinfection method also on other potentially infected images and cleans them.  
Finally a method is called that walks recursively through all volumes of the system, checks for files 
that end with “.exe” and checks for an infection by searching for a hidden original. If infected the file 
in question is cleaned. 
31 | P a g e  
8. Conclusions 
The malicious sample at hand is highly-sophisticated in its operation and indeed very interesting. 
Analysis is challenging due to obfuscation methods and junk code, as well as numerous virtual 
function calls that are hard to resolve. Debugging is problematic due to the multi-threaded design 
and has its constraints as no responses from the C&C server were received.  
The functionality of the malware is found to be considerably dangerous and extensive. The malware 
can basically take full control over the system. It can spy a great amount of information, from 
screenshots and live captures, to directory listings and running desktop applications. It can execute 
other applications, shut down its own process, copy, rename or delete files on disk, eventually even 
download other executable and update itself. 
On the other side some possible weaknesses were identified too. The sample does not make use of a 
runtime packer or encryption layers. The anti-debugging measures were quite quick to pass by. The 
file infection routine is not polymorph, it is easy for anti-virus software to detect every sample of this 
variant.  
It is not clear if this was intention of the malware author, but the sample implements various 
outdated or deprecated Win32 API calls, as for example SHFileOperation. 
Various questions are still open and would be of interest for further analysis. The inter-thread 
communication via critical sections could be analyzed and most likely would reveal a lot more insight 
on how the threads really operate. The communication protocol from bot to server would be of high 
interest. Some functionality of the documented C&C command processing methods is still unclear. 
32 | P a g e  
Sources 
[1] 
MSDN Library (Microsoft Software Developer Network) 
http://msdn.microsoft.com/ 
[2] 
„A Crash Course on the Depths of Win32 Structured Exception Handling“, Matt Pietrik 
http://www.microsoft.com/msj/0197/exception/exceptionfigs.htm#fig4 
[3] 
„Reversing Microsoft Visual C++ Part II: Classes, Methods and RTTI“, OpenRCE Library 
http://www.openrce.org/articles/full_view/23  
[4] 
„Console Processes with Redirected Standard Handles“, MS Knowledgebase 
http://support.microsoft.com/kb/190351 
Attachments 
1_API_Offsets.xls 
2_Events_Filenames.txt 
3_Imports.png 
API Offsets 
Events & Filenames 
event1 
AB8D393B-9177-440D-B3F8-1C1FE0CF9692 
event2 
A37340FD-F043-41e3-9C16-2F2632387199            
check for running mw instance 
event3 
83D33F3A-9482-446F-ABFF-7B69D58C1634 
check for fingerprint file 
file1  
FF24CF9A-EE48-4CDE-AC10-15D1CE2C272C 
fingerprint file  
file2 
 A041D349-C68A-45C0-9081-536BC43BB0FF 
 used in dat_file_createwrite, in check_datfile compared against 
fingerprint 
file3  
50030006-9D06-426F-936B-FFE0B81D5913 
file for storing captures made with create capture window 
file4  
C94A6BBB-4B51-4A8D-A49F-F184A27A972E 
file for storing screenshots, made with GDI DCA 
temp1  
FBCA78D4-024F-47E8-9851-C42C9626CC5A 
file for temporary use, deleted immediately 
temp2  
EF724F56-1CBE-4F84-A7AE-D31B2671B616 
file for temporary use, deleted immediately 
Imports