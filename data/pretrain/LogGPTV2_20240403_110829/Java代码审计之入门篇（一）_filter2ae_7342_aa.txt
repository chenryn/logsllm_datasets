# Java代码审计之入门篇（一）
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x1 前言
java代码审计系列是我很早之前就一直在筹备的，但是由于接触JAVA比较少，所以一直在积累各种相关经验，自己也用java写了一些web项目，
熟悉了一些框架的流程，才正式开始记录自己学习java代码审计的过程。
## 0x2 java环境相关的知识
1.JDK(Java Development Kit) 是针对java开发员的产品(SDK)，是整个java的核心。
组成:
  * 开发工具位于bin子目录中， 指工具和实用程序，可帮助开发、执行、调试以java编程语言编写的程序，例如，编译器javac.exe 和解释器java.exe都位于该目录中
  * java运行环境位于jre子目录中，window安装的时候会提示安装jre其实没必要，因为jdk包括了。 java运行环境包括java虚拟机、类库以及其他支持执行以java编程语言编写的程序的文件。
  * 附加库位于lib子目录中， 开发工具所需的其他类库和支持文件
  * C头文件
  * 源代码
2.JRE(Java Runtime Environment) 是运行java程序所必须的环境集合，包含JVM标准、及java核心类库。  
如果我们只是要运行java程序的话其实没必要安装jdk，只需要安装JRE就可以了。
3.JVM(Java Virtual Machine) java虚拟机是整个实现跨平台的最核心部分，能够运行以java语言编写的软件程序。
他们三者的关系，可以参考这个图
4.java平台
>   * Java SE(java Platform, Standard Edition)
> 这是标准版，基础版本。允许开发和部署在桌面、服务器、嵌入式环境和实时环境中使用的 Java 应用程序。Java SE 包含了支持 Java Web
> 服务开发的类。 通常拿来开发java的桌面软件
>   * Java EE (Java Platform，Enterprise Edition): Java EE 是在Java
> SE的基础上构建的，他提供Web服务、组件模型、管理、通信API,用来实现企业级的面向服务体系结构和web2.0应用程序。
>   * Java ME(Java Platform, Micro Edition): 为在移动设备和嵌入式设备(比如手机、PDA、 电视机顶盒和打印机)
> 上运行的运用程序提供一个健壮且灵活的环境
>
5.java服务器
(1) 常见的Java服务器: Tomcat 、 Weblogic、Jetty、JBoss、GlassFish等。
(2)Tomcat简介:
免费的开放源代码的web应用服务器，属于轻量级应用服务器，在中小型系统和并发访问等很多的场合下被普遍使用，是开发和调试JSP程序的首选。
6.项目管理和构建工具Maven
Maven是一种自动构建项目的方式，可以帮助我们自动从本地和远程仓库拉取关联的jar包
## 0x3 MAC下安装java环境
###  0x3.1 安装MYSQL及其驱动包
这个mac自带安装了MYSQL，所以我们只要安装对应的mysql的java驱动程序，放在tomcat的lib目录下就可以。
或者放在`WEB-INF`下的lib目录下也可以，具体看我后面的操作
因为我的mysql是`5.7.21 Homebrew` 所以我们需要用到5.x的jdbc
[Connector/J 5.1.48](https://dev.mysql.com/downloads/connector/j/5.1.html)
登陆注册之后
[访问下载](https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.48.zip)
###  0x3.2 安装Tomcat
首先去官网下载最新版Tomcat9,[offical
download](https://tomcat.apache.org/download-90.cgi)
改名放在`~/Library/Apachetomcat9`
     xq17@localhost  ~/Library/ApacheTomcat9  tree -L 1
    .
    ├── BUILDING.txt
    ├── CONTRIBUTING.md
    ├── LICENSE
    ├── NOTICE
    ├── README.md
    ├── RELEASE-NOTES
    ├── RUNNING.txt //上面是使用文档和版权声明
    ├── bin //存放tomcat命令
    ├── conf // 存放tomcat配置信息，里面的server.xml是核心的配置文件
    ├── lib //支持tomcat软件运行的jar包和技术支持包(如servlet 和 jsp)
    ├── logs //运行时的日志信息
    ├── temp //临时目录
    ├── webapps //共享资源文件和web应用目录
    └── work //tomcat的运行目录，jsp运行时产生的临时文件就存放在这里
我们修改下默认的启动端口,8080 改成9090，避免与我本地burp冲突
`/conf/server.xml`
处于安全性考虑，我们也需要配置下密码 `tomcat` `tomcat`
`conf/tomcat-user.xml`中``上面加入如下代码
    ---    
去`/conf/bin`目录进行安装
    chmod u+x *.sh
    ./startup.sh
###  0x3.3 安装IDE
为了方便调试，我安装了两个IDE，一个是eclipse(集成环境方便开发) 一个是idea(方便动态调试)
首先要配置最基础的java开发和运行环境就需要 安装jdk的8.0(一般习惯叫jdk 1.8) 通常也可以说是java8,
hombrew 安装教程 可以参考这篇文章，比较简单，我就不赘述了。
[Mac OS 安装java指定版本](https://www.jianshu.com/p/6289bd0bb69c)
####  0x3.3.1 安装eclipse
这个可以直接去官网下载:
[download.
**eclipse**.org](http://www.baidu.com/link?url=tMBavDmVu7xcxa56F-Fq1eg5iCGOyMtAOkYlvmLKOObnlIyaI4M7UPc0vtxdkdUB)
然后选择development for jee那个package来安装就行了。
####  0x3.3.2 安装IDEA
参考这篇安装文章: [Mac
安装idea以及激活方法](https://blog.csdn.net/u014266077/article/details/80616471)
* * *
下面就需要配置下IDE的运行程序了。
eclipse 的话直接修改Tomcat Server 为我们安装的Tomcat就可以了。
Idea因为不是集成环境，所以我们需要用到第三方插件
按需要安装
## 0x4 小试牛刀之尝试部署项目
这里参考了国科社区师傅用的
[javapms-1.4-beta.zip](http://download.javapms.com/pgdowload.jsp)
(1) 直接安装
(2) IDEA 部署
我们选择`import Project`
然后一路默认下去就行了,打开项目之后，我们配置下运行程序Tomcat
尝试下idea强大的反编译class及其调试功能
先运行安装下
随便选一个action打一个断点就行了。
> 下面是几个调试中会用到的几个快捷键：  
>  ●F7 ，进入下一步，如果当前断点是一个方法，进入方法体。  
>  ●F8 ，进入下一步，但不会进入方法体内。  
>  ●Alt+Shift+F7 ， 进入下一步，如果当前断点是一个方法，方法还有方法则循环进入。  
>  ●Shift+F8 ，跳出到下一个断点，也可以按F9来实现。  
>  ●Drop Frame ，当进入一个方法体想回退到方法体外可以使用该键。  
>  我很少用快捷键，一般用鼠标就行了，或者mac上的bar就行了。不过F9我用的比较多。
## 0x5 崭露头角之因酷教育在线漏洞挖掘
这个系统我印象是比较深刻, 因为之前在那个湖湘杯的登顶赛中一方面没下载下来源码,
另外一方面自己对java的项目不熟悉所以当时做了标记，所以这次就以这个为例,顺便聊一下登顶赛维持权限的技巧。
###  0x5.1 安装过程
inxedu 因酷教育软件v2.0.6
源码:
有个安装目录详细记录了使用教程和idea的教程。
这里简单记录下:
1.执行`mysql> source ./demo_inxedu_v2_0_open.sql`
2.idea导入项目直接`import projects`,默认下去即可,等待自动解决maven依赖,可能有点慢。
3.数据库配置
修改下数据库配置
4.配置Tomcat
`Run-->Edit Configurations`->Maven
点击`Run`,等待安装完成即可。
    前台http://127.0.0.1:82/ 
    测试账号：PI:EMAIL 111111
    后台 http://127.0.0.1:82/admin 
    测试账号：admin 111111
###  0x5.2 前置知识
这些内容我简要提取一些关键点出来。
1.目录结构分析
    ├── java //核心代码区
    │   └── com
    ├── resources //资源目录,存放一些配置文件
    │   └── mybatis //SQL 文件描述XML
    └── webapp //就是类似/var/www/html存放一些静态文件内容
        ├── WEB-INF 
        ├── images
        ├── kindeditor
        └── static
这里重点讲下`WEB-INF`目录
> WEB-INF是用来存储服务端配置文件信息和在服务端运行的类文件的，它下面的东西不允许客户端直接访问的。  
>  一般会有`web.xml`文件(WEB项目配置文件)  
>  通过文件读取该文件我们可以获取到这个项目的架构和配置信息(编码、过滤器、监听器…)
2.了解SpringMVC架构工作流程
> 1.用户发起请求->SPring MVC
> 前端控制器(DispathcerServlet)->处理器映射器(HandlerMapping)进行处理->根据URL选择对应的Controller  
>  2.控制器(Controller)执行相应处理逻辑,执行完毕,Return 返回值。  
>  3.`ViewResolver`解析控制器返回值->前端控制器(DispathcerSevlet)去解析->View对象  
>  4.前端控制器(DispathcerSevlet)对View进行渲染,返回至客户端浏览器,完成请求交互
3.Mybaits
> Mybatis 数据持久化框架,可以实现将应用程序的对象持久化到关系型数据库中,但是需要我们手动编写SQL语句
使用方式: 基于 **XML配置** ,将SQL语句与JAVA代码分离
容易出现的安全问题主要是在于:
在XML配置中,描述参数使用不当会导致SQL注入
    1.#{} 预编译处理参数
    2.${}    直接拼接sql语句
后面分析SQL注入的时候我会详细分析下这个框架的实现过程。
###  0x5.3 开始代码审计之旅
时间充裕，我们采取通读的审计方式， 对于框架而言，我一般是先阅读权限控制模块，然后直接通读Controller模块,然后跟踪看看,
后面你会发现很多类似的代码，从而提高通读的速度的。
####  0x5.3.1 权限控制流程
通过阅读`web.xml`
            springmvc
            /
可以看到这里Spring MVC前置拦截器采用的是`/`规则,也就是拦截所以不带后缀的请求,而`/*`是拦截所有请求。
我们继续跟进看下有没有自定义的控制拦截,我们读下`Spring mvc`配置文件
`/src/main/resources/spring-mvc.xml`
好家伙,我们跟进相关的类,看下拦截的流程。
`com.inxedu.os.common.intercepter.IntercepterAdmin`
        public boolean preHandle(HttpServletRequest request,
                HttpServletResponse response, Object handler) throws Exception {
            //获取登录的用户
            SysUser sysUser = SingletonLoginUtils.getLoginSysUser(request);
            if(sysUser==null){
                response.sendRedirect("/admin");//跳转登录页面
                return false;
            }
            //访问的路径
            String invokeUrl = request.getContextPath() + request.getServletPath();
            //获取所有的权限
            List allFunctionList = (List) EHCacheUtil.get(CacheConstans.SYS_ALL_USER_FUNCTION_PREFIX+sysUser.getUserId());
            if(ObjectUtils.isNull(allFunctionList)){
                allFunctionList = sysFunctionService.queryAllSysFunction();
                EHCacheUtil.set(CacheConstans.SYS_ALL_USER_FUNCTION_PREFIX+sysUser.getUserId(),allFunctionList);
            }
            //判断当前访问的权限，是否在限制中
            boolean hasFunction = false;
            for(SysFunction sf : allFunctionList){
                if(sf.getFunctionUrl()!=null && sf.getFunctionUrl().trim().length()>0 && invokeUrl.indexOf(sf.getFunctionUrl())!=-1){
                    hasFunction = true;
                }
            }
            //如果当前访问的权限不在限制中,直接允许通过
            if(!hasFunction){
                return true;
            }
            //如果当前访问的权限在限制中则判断是否有访问权限
            List userFunctionList = (List) EHCacheUtil.get(CacheConstans.USER_FUNCTION_PREFIX+sysUser.getUserId());
            if(userFunctionList==null || userFunctionList.size()==0){
                userFunctionList = sysFunctionService.querySysUserFunction(sysUser.getUserId());
                EHCacheUtil.set(CacheConstans.USER_FUNCTION_PREFIX+sysUser.getUserId(), userFunctionList);
            }
            boolean flag = false;
            if(ObjectUtils.isNotNull(userFunctionList)){
                for(SysFunction usf : userFunctionList){
                    //如果用户有访问权限
                    if(invokeUrl.indexOf(usf.getFunctionUrl())!=-1 && usf.getFunctionUrl()!=null && usf.getFunctionUrl().trim().length()>0){
                        flag=true;
                        break;
                    }
                }
            }
继续跟进下:`SingletonLoginUtils.getLoginSysUser`
        public static SysUser getLoginSysUser(HttpServletRequest request) {
            String userKey = WebUtils.getCookie(request, CacheConstans.LOGIN_MEMCACHE_PREFIX);
            if (StringUtils.isNotEmpty(userKey)) {
                SysUser sysUser = (SysUser) EHCacheUtil.get(userKey);
                if (ObjectUtils.isNotNull(sysUser)) {
                    return sysUser;
                }
            }
            return null;
        }
这里获取了Cookie的值解析出了`userKey`,至于这个可不可以伪造,我们跟下来源
`/src/main/java/com/inxedu/os/edu/controller/main/LoginController.java`
        @RequestMapping("/main/login")
        public ModelAndView login(HttpServletRequest request,HttpServletResponse response,@ModelAttribute("sysUser") SysUser sysUser){
    ...............
        request.getSession().removeAttribute(CommonConstants.RAND_CODE);
                sysUser.setLoginPwd(MD5.getMD5(sysUser.getLoginPwd()));
                SysUser su = sysUserService.queryLoginUser(sysUser);
                if(su==null){
                    model.addObject("message", "用户名或密码错误！");
                    return model;
                }
                //判断用户是否是可用状态
                if(su.getStatus()!=0){
                    model.addObject("message", "该用户已经冻结！");
                    return model;
                }
                //缓存用登录信息
                EHCacheUtil.set(CacheConstans.LOGIN_MEMCACHE_PREFIX+su.getUserId(), su);