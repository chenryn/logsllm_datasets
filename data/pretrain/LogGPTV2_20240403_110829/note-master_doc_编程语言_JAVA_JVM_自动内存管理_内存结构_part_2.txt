   2. 早一点的那个变量则是用来赋值
invokespecial:
1. 通过上面dup复制的变量调用对象的`` 方法
### 从执行步骤
1. 确认类信息是否存在于metaspace 否则使用类加载器加载类 并生成相关Class对象
2. 计算对象占用的内存空间(实例数据) 接下来在堆内存划分一块空间进行分配 为对象分配内存时 需要进行同步操作
3. 设定成员变量的默认值
4. 设置对象头 哈希吗 GC信息等等
5. 执行init方法 初始化成员变量 执行初始化代码块等等
## 查看堆内存使用情况
- 使用jstat命令
```shell
jstat -class pid # 查看加载的类
jstat -gc pid # 查看垃圾回收情况
```
## 内存分析
- jmap命令
```shell
jmap -histo pid # 查看所有对象
jmap -histo:live pid # 查看所有存活对象
jmap -dump:format=b,file=filename pid # 导出dump文件
```
- jhat分析dump文件
    - JDK9以后不再提供，被Visual VM代替
```shell
jhat filename
```
- mat分析
### 内存溢出定位与分析
#### Java 堆溢出
- 添加运行参数
```sh
java -Xmx8m -Xms8m -XX:+HeapDumpOnOutOfMemoryError
```
```java
List list = new ArrayList<>();
while (true){
    list.add(new Object());
}
```
- 分析dump文件
   - 如果是内存泄漏 找到泄漏对象是通过怎样的引用路径、与哪些GC Roots相关联，才导致垃圾收集器无法回收它们
   - 如果内存中的对象确实都是必须存活的，那就应当检查Java虚拟机
的堆参数（-Xmx与-Xms）设置
#### 虚拟机栈和本地方法栈移除
```sh
-Xss256k
```
- 减少栈内存容量 异常出现时输出的堆栈深度相应缩小
```java
public class JVMSOFWithMinStack {
    private int stackLength = 1;
    public void stackLeak() {
        stackLength++;
        stackLeak();
    }
    public static void main(String[] args) throws Throwable {
        JVMSOFWithMinStack oom = new JVMSOFWithMinStack();
        try {
            oom.stackLeak();
        } catch (Throwable e) {
            System.out.println("stack length:" + oom.stackLength); // 3183
            throw e;
        }
    }
}
```
- 定义了大量的本地变量 异常出现时输出的堆栈深度相应缩小
```java
public class JVMSOFWithMuchParams {
    private static int stackLength = 0;
    public static void test() {
        long unused1, unused2, unused3, unused4, unused5,
                unused6, unused7, unused8, unused9, unused10,
                unused11, unused12, unused13, unused14, unused15,
                unused16, unused17, unused18, unused19, unused20,
                unused21, unused22, unused23, unused24, unused25,
                unused26, unused27, unused28, unused29, unused30,
                unused31, unused32, unused33, unused34, unused35,
                unused36, unused37, unused38, unused39, unused40,
                unused41, unused42, unused43, unused44, unused45,
                unused46, unused47, unused48, unused49, unused50,
                unused51, unused52, unused53, unused54, unused55,
                unused56, unused57, unused58, unused59, unused60,
                unused61, unused62, unused63, unused64, unused65,
                unused66, unused67, unused68, unused69, unused70,
                unused71, unused72, unused73, unused74, unused75,
                unused76, unused77, unused78, unused79, unused80,
                unused81, unused82, unused83, unused84, unused85,
                unused86, unused87, unused88, unused89, unused90,
                unused91, unused92, unused93, unused94, unused95,
                unused96, unused97, unused98, unused99, unused100;
        stackLength++;
        test();
        unused1 = unused2 = unused3 = unused4 = unused5 =
                unused6 = unused7 = unused8 = unused9 = unused10 =
                        unused11 = unused12 = unused13 = unused14 = unused15 =
                                unused16 = unused17 = unused18 = unused19 = unused20 =
                                        unused21 = unused22 = unused23 = unused24 = unused25 =
                                                unused26 = unused27 = unused28 = unused29 = unused30 =
                                                        unused31 = unused32 = unused33 = unused34 = unused35 =
                                                                unused36 = unused37 = unused38 = unused39 = unused40 =
                                                                        unused41 = unused42 = unused43 = unused44 = unused45 =
                                                                                unused46 = unused47 = unused48 = unused49 = unused50 =
                                                                                        unused51 = unused52 = unused53 = unused54 = unused55 =
                                                                                                unused56 = unused57 = unused58 = unused59 = unused60 =
                                                                                                        unused61 = unused62 = unused63 = unused64 = unused65 =
                                                                                                                unused66 = unused67 = unused68 = unused69 = unused70 =
                                                                                                                        unused71 = unused72 = unused73 = unused74 = unused75 =
                                                                                                                                unused76 = unused77 = unused78 = unused79 = unused80 =
                                                                                                                                        unused81 = unused82 = unused83 = unused84 = unused85 =
                                                                                                                                                unused86 = unused87 = unused88 = unused89 = unused90 =
                                                                                                                                                        unused91 = unused92 = unused93 = unused94 = unused95 =
                                                                                                                                                                unused96 = unused97 = unused98 = unused99 = unused100 = 0;
    }
    public static void main(String[] args) {
        try {
            test();
        } catch (Error e) {
            System.out.println("stack length:" + stackLength); // 127
            throw e;
        }
    }
}
```
#### 方法区和运行时常量池溢出
在JDK7和7之前如果大量创建String.intern或者动态类 由于类的回收条件苛刻 极有可能造成OOM
但在JDK8之后 这些问题就没有了
#### 本机直接内存溢出
```sh
-Xmx20M -XX:MaxDirectMemorySize=10M
```
```java
public class DirectMemoryOOM {
    private static final int _1MB = 1024 * 1024;
    public static void main(String[] args) throws Exception {
        Field unsafeField = Unsafe.class.getDeclaredFields()[0];
        unsafeField.setAccessible(true);
        Unsafe unsafe = (Unsafe) unsafeField.get(null);
        while (true) {
            unsafe.allocateMemory(_1MB);
        }
    }
}
```
直接内存导致的内存溢出，一个明显的特征是在Heap Dump文件中不会看见有什么明显的异常
### 分析线程执行情况
```shell
jstack pid
```
- 死锁
> 两个进程互相等待对方，一直阻塞下去
```text
Found one Java-level deadlock:
=============================
"Thread-0":
  waiting to lock monitor 0x000002292014eb00 (object 0x00000000ffea7640, a java.lang.Object),
  which is held by "Thread-1"
"Thread-1":
  waiting to lock monitor 0x000002292014ea00 (object 0x00000000ffea7630, a java.lang.Object),
  which is held by "Thread-0"
Java stack information for the threads listed above:
===================================================
"Thread-0":
        at Main.lambda$main$0(Main.java:24)
        - waiting to lock  (a java.lang.Object)
        - locked  (a java.lang.Object)
        at Main$$Lambda$14/0x0000000800ba4840.run(Unknown Source)
        at java.lang.Thread.run(java.base@13/Thread.java:830)
"Thread-1":
        at Main.lambda$main$1(Main.java:37)
        - waiting to lock  (a java.lang.Object)
        - locked  (a java.lang.Object)
        at Main$$Lambda$15/0x0000000800ba4c40.run(Unknown Source)
        at java.lang.Thread.run(java.base@13/Thread.java:830)
Found 1 deadlock.
```
## JMX
>MX(Java Management Extensions)是一个为应用程序植入管理功能的框架。JMX是一套标准的代理和服务，实际上，用户可以在任何Java应用程序中使用这些代理和服务实现管理