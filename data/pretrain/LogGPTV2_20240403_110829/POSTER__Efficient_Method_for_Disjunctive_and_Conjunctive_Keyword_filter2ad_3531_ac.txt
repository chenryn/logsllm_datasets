j=0 αj (H1(q1|φ)j +H1(q2|φ)j +...+H1(qm|φ)j )
+r
= ˆe(g, g)
Note that, according to the keyword conversion method introduced in Section 4.1, if Q ⊆ W,
i=0 ai(H1(q1|φ)i + H1(q2|φ)i + . . . + H1(qm|φ)i) = 0, which means that H2(θ1 × θ2) =
it must be ∑n
H2( ˆe(g, g)r) = DW. Therefore, according the equations above, we can argue that our scheme is correct.
4.3. Security Proof
In this subsection, we will give a rigorous proof to show the security of the proposed scheme.
The essential of the proof is that we will show the difﬁculty of breaking our scheme is the same as that
of solving the assumption of (qT + 1)-BDHI, according to the security game described in Section 3.2.
The concrete proof is given as follows.
Theorem 1. The scheme of SPE-CKS is secure according to IND-CR-CKA game if the decision (qT + 1)-BDHI
assumption is hard.
Proof. Suppose that an algorithm A has advantage  in breaking the SPE-CKS under the security
game IND-CR-CKA. Suppose that A makes at most qH2 hash function queries to H2, at most qI secure
index queries and at most qT trapdoor queries, we can build an algorithm C that solves the decision
(qT + 1)-BDHI assumption with probability at least 
, where e is base of natural logarithm,
n and m are the number of keywords contained in an index and a trapdoor, respectively. Algorithm C’s
running time is approximately the same as A’s. Let g be a generator of G1, given g, gx, gx2, . . . , gxqT +1
and R, the goal of algorithm C is to output 1 if R = ˆe(g, g)
x and 0 otherwise. Algorithm C simulating
the challenger interacts with algorithm A simulating attacker as follows:
en+mqn
T
= 
1
(cid:48)
-
Setup: Algorithm C works as follows:
1. Algorithm C randomly chooses qT random numbers ρ1, ρ2, . . . , ρqT ∈ Z∗
q and computes
f (z) = ∏qT
i=1(z + ρi) = ∑qT
j=0 cjzj.
Appl. Sci. 2019, 9, 3655
9 of 16
2. C computes U = g f (x) = g∑qT
j=0 cjxj
and V = gx f (x) = g∑qT
j=0 cjxj+1
∑qT−1
j=0 djxj
j=0 djzj , C gets U
{ρi, g fi(x)} in a list named S-list where i ∈ [1, qT].
x+ρi = g fi(x) = g∑qT−1
1
f (z) =
where i ∈ [1, qT]. Then C stores the pairs
. Since fi(z) = 1
z+ρi
3. C computes f (z)−c0
if R = ˆe(g, g)
1
z = ∑qT
x , then it has RU = ˆe(g∑qT
j=1 cjzj−1 and sets RU = ˆe(g∑qT
, g∑qT
f 2(x)
x = ˆe(U, U)
, g∑qT
j=0 cjxj+c0 ) × Rc2
x × ˆe(g, g)
c2
0
x = ˆe(g, g)
j=1 cjxj−1
f 2(x)−c2
0
j=1 cjxj−1
j=0 cjxj+c0 ) × Rc2
f (x)−c0
0 = ˆe(g
x
0. Obviously,
, g f (x)+c0 ) ×
1
x .
q and sets S = gs
q and then computes T = gt
5. C randomly chooses a number s ∈ Z∗
4. C randomly chooses 2n + 3 numbers s0, s1, . . . , sn, t1, . . . , tn, η ∈ Z∗
If the query wi already appears on the H1-list in a tuple (wi, hi, σi), algorithm C responds
with H1(wi|φ) = hi, where hi ∈ {0, 1}logq
2.
If 1 ≤ σi ≤ n, C set hi = tσi. Otherwise, C picks a random ai ∈ {0, 1}logq
c2
0
ˆe(g, g)
x = ˆe(g, g)
q and computes f (z) =
j=0 bjzj. Let Z = Vη, C constructs Xj = Vsj − Ubj for each j ∈ [0, n]. C
i=1(z − ti) = ∑n
∏n
randomly chooses a g0 ∈ G and a number t ∈ Z∗
0. After that, C
gives the public key pkR = {X0, X1, . . . , Xn, Z, µ = ˆe(U, U), g0, T} to A. The corresponding
private key skR unknown to C is {s0x − b0, s1x − b1, . . . , snx − bn, ηx, t}.
0. C generates a hash function
H3 : G → {0, 1}∗. After that, C outputs pkS = {S, H3} and keeps skS = {s} secret.
H1, H2−queries: Algorithm A can query the random oracles H1 or H2 at any time. To respond
to H1 queries, algorithm C maintains a list of tuples (wj, hj, σj) called H1−list which is initially
empty. C generates φ = H3(Ts) = H3(g(ts)) by using the keys pkS, pkR, skS. When A queries the
random oracle H1 at a point wi ∈ {0, 1}∗, algorithm C responds as follows:
H1−queries:
1.
2. Otherwise, C generates a random coin σi ∈ [1, nqT] so that Pr[1 ≤ σi ≤ n] = 1
qT .
3.
4. C adds the tuple (wi, hi, σi) to the H1-list. C responds A with H1(wi|φ) = hi.
The H2−queries is similar to H1−queries. To respond to H2 queries from A, algorithm C maintains
a list of tuples (ϕj, ψj) called H2−list which initially empty. When A queries the random oracle
H2 at a point ϕi ∈ G2, algorithm C responds as follows:
H2−queries:
1.
2. Otherwise, C picks a random bi ∈ {0, 1}logq
3.
Index queries: For any keyword set Wi = {wi1, wi2, . . . , win} in which i ∈ [1, qI], when A asks for
the secure index of Wi, C responds as follows:
1. C runs H1−queries algorithm to obtain hij such that hij = H1(wij|φ) where j ∈ [1, n].
Let (wij, hij, σij) be the corresponding tuples on the H1-list. If σij ≤ n for all j ∈ [1, n], then C
reports failure and terminates.
2. Otherwise, by using (hi1, hi2, . . . , hin), C adopts the keyword conversion method in
Section 4.1 to generate a vector (cid:126)a. Following the algorithm IndexBuild in Section 4.2,
C generates the secure index IW by using pkR.
If the query ϕi already appears on the H2-list in a tuple (ϕi, ψi), then algorithm C responds
with H2(ϕi) = ψi, where ψi ∈ {0, 1}logq
2.
C adds the tuple (ϕi, ψi) to the H2-list and responds A with H2(ϕi) = ψi.
2 and sets ψi = bi.
2 and sets hi = ai.
Trapdoor queries: When A issues a query for the trapdoor corresponding to the keyword query
Qi = {qi1, qi2, . . . , qim} where i ∈ [1, qT], algorithm C responds as follows:
1. Algorithm C runs H1−queries algorithm to obtain hij such that hij = H1(qij|φ) where
j ∈ [1, m]. Let (qij, hij, σij) be the corresponding tuples on the H1-list. If σij ≤ n for all
j ∈ [1, m], then C reports failure and terminates.
-
-
-
Appl. Sci. 2019, 9, 3655
2. Otherwise,
by using (hi1, hi2, . . . , him)
for query Qi.
− ∑n
y=0 by(hy
i1+hy
i2+...+hy
C computes:
i1+hy
y=0 sy(hy
im)+ρi ∑n
ρiη
ui
= li
x+ρi
i1+hy
y=0(syx−by)(hy
i2+...+hy
im)
uiηx+∑n
which is satisﬁed with the equality
lin
x+ρi , U
S-list
li1
x+ρi , U
searching
the
10 of 16
the
trapdoor
and ui =
and skR, C constructs
i2+...+hy
im)
i2+...+hy
im)
y=0 sy(hy
y=0 by(hy
i1+hy
i1+hy
ρi ∑n
η ∑n
η +
li = 1
i2+...+hy
im)
. Moreover, C constructs lik = − (hk
, which are satisﬁed with the equality
i2+...+hk
i1+hy
i1+hk
im)ρi
y=0 by(hy
i2+...+hy
∑n
im)
for each k ∈ [0, n].
= lik
x+ρi
i1+hk
hk
y=0(syx−by)(hy
i2+...+hk
im
i1+hy
i2+...+hy