Evolving Exploits 
through Genetic 
Algorithms 
By soen 
Who am I 
v  CTF Player 
v  Programmer 
v  Virus / Worm Aficionado 
v  Computer Scientist 
v  Penetration Tester in daylight 
Domain Constraints 
v  What we will cover 
v  SQL injection (MySQL, SQL, MSSQL, Oracle) 
v  Command injection (Bash, CMD, PHP, Python) 
v  Attack surface is HTTP / HTTPS POST and GET 
parameters 
v  What we will not cover 
v  Everything else 
Exploiting Web 
Applications 
v  Attack problems 
v  Driven by customer 
v  Small scope 
v  Limited time 
v  Report driven 
v  Attack methodology 
Exploiting Web 
Applications 
v  Attack problems 
v  Attack methodology 
v  Run as many scanning tools as possible 
v  Manually poke at suspicious areas until a vulnerability 
is found 
v  Write an exploit 
Exploiting Web 
Applications 
v  Attack problems 
v  Attack methodology 
v  Problems with this 
v  Manual code coverage is inherently small 
v  Manual inspection of suspicious areas is time-costly 
v  Manual exploit development takes time 
Existing tools for exploit 
discovery / development 
v  Nessus / nmap / blind elephant / other scanning tools don’t 
really count unless there is a signature developed for a specific 
vulnerability / finding.  
v  Acunetix 
v  Burp 
v  ZAP 
v  sqlmap 
Foundational problems with 
current scanning techniques 
v  Systemic signature problem 
v  Anti-Virus == Web Scanners 
v  Solution: Evolve unique exploits for web applications 
v  Web Application Firewall blocks ‘or 1=1 -- ? 
v  Evolve from 
v  ‘or 1=1 -- 
v  To: 
v  Aso1239^;’or 2=1 or 1=3 or 1=1 --asdl1ojcud//\ 
Evolutionary Algorithms 
In English: 
1.  Create a large number of creatures 
2.  While solution/goal != found: 
1.  Score all of the creatures’ performance using a fitness 
function 
2.  Kill the weak performing 
3.  Breed the strong performing 
4.  Mutate creatures randomly 
3.  Display the creature that solved the solution 
Exploit Evolution 
1. 
Create a large number of strings 
2. 
While exploit != successful: 
1. 
Send the string as parameter value (I.E. POST, GET, etc.) 
2. 
Use the response from the server to determine the score 
1. 
+Error Pages (more if the string was reflected) 
2. 
+Blank / delayed responses 
3. 
+For objectives displayed (passwords displayed, sensitive DB 
information, etc.) 
3. 
Delete the weak performing strings 
4. 
Breed the strong performing strings 
5. 
Mutate the strong performing strings 
3. 
Display the string that successfully exploits the app 
Fitness Function 
v  This is the performance /score of how well a creature 
performs 
v  Creatures that score well will live to breed 
v  Creatures that score poorly will be culled 
v  Fitness in this context is the following: 
v 
Does the creature cause sensitive information to be 
displayed? 
v 
Does the creature cause an error (and if so, what type?) 
v 
Is the creature reflected? (XSS…) 
v 
Is other information displayed? 
Breeding Strings 
v 
Pairs of strings are bred using genome cross-over 
   String A                                                                                          String B 
                                    Child A                                                                                            Child B 
                              Mutated Child A                                                                                  Mutated Child B 
v 
The amount of children  and parents varies on implementation. 
v 
The amount of children depends on implementation 
v 
Parents are kept alive depending on implementation 
Next 
Iteration 
Mutating Strings 
v  Pseudo code: 
v  Mutation rate is greater than 0 and less than 1.0 
v  Select an amount of string items to mutate given the 
length of the string (0 -> len(string)) * mutation rate 
v  For each mutation, replace/add/remove a random 
string item with a random character 
v  Example: 
v  Pre-mutation String: ABCD 
v  Post-mutated String: XACF 
v  (Prepended X, B deleted, and D mutated to F) 
Population Dynamics 
v  It is critical to choose a mutation rate that will allow 
for sufficient diversity in the pool of creatures, but at 
the same time allow a solution to be efficiently 
reached. 
v  Cull rate / string death rate must be high enough to 
maintain the population, but low enough to not 
drastically reduce it.  (E.G. For 300% growth rate of 
breeding the top 33%, cull 67% of the population) 
Tool Comparison 
v  Command Injection 
v  Statistics 
CMD	
  injec*on	
Vulnerability	
Found?	
Exploit	
Developed	
Auto	
  WAF	
bypass	
Time	
  for	
  AAack	
(seconds)	
Requests	
Acune*x	
Yes	
No	
No	
20	
1854	
Burp	
Yes	
No	
Yes	
926	
38297	
ZAP	
Yes	
No	
No	
118	
264	
SQLMAP	
N/A	
N/A	
N/A	
N/A	
Forced	
Evolu*on	
Yes	
Yes	
Yes	
246	
15489	
Tool Comparison 
v  Command Injection 
v  Requests sent to server: 
0 
5000 
10000 
15000 
20000 
25000 
30000 
35000 
40000 
45000 
Acunetix 
Burp 
ZAP 
SQLMAP 
Forced 
Evolution 
Tool Comparison 
v  Command Injection 
v  Time to exploit (seconds) 
0 
100 
200 
300 
400 
500 
600 
700 
800 
900 
1000 
Acunetix 
Burp 
ZAP 
SQLMAP 
Forced 
Evolution 
Tool Comparison 
v  SQL Injection 
v  Statistics 
SQLi	
Vulnerability	
Found?	
Exploit	
Developed	
Auto	
  WAF	
bypass	
Time	
  for	
  AAack	
   Requests	
Acune*x	
Yes	
Yes	
No	
53	
2685	
Burp	
Yes	
Yes	
Yes	
1101	
46516	
ZAP	
Yes	
No	
No	
157	
315	
SQLMAP	
Yes	
Yes	
Yes	
15	
166	
Forced	
Evolu*on	
Yes	
Yes	
Yes	
17	
5996	
Tool Comparison 
v  SQL Injection 
v  Requests sent to server 
0 
5000 
10000 
15000 
20000 
25000 
30000 
35000 
40000 
45000 
50000 
Acunetix 
Burp 
ZAP 
SQLMAP 
Forced 
Evolution 
Tool Comparison 
v  SQL Injection 
v  Time to exploit (seconds) 
0 
200 
400 
600 
800 
1000 
1200 
Acunetix 
Burp 
ZAP 
SQLMAP 
Forced 
Evolution 
Pro’s and Con’s 
v  Con’s for Exploit Evolution 
v  Very noisy attacks 
v  Potential to inadvertently destroy the database / OS 
v  Slow process to develop and test exploits 
v  Sub-optimal to source code analysis 
Pro’s and Con’s 
v  Pro’s for Exploit Evolution 
v  Cheap in CPU and human time 
v  More complete code coverage than other black-box 
approaches 
v  Exploit breeding is the future, upgrades to the current 
approach will improve efficiency but the code right now 
will break web apps in the future. 
v  Automatic exploit development – Exploits genetically 
bred to tailor to a specific web app 
v  Emergent exploit discovery – New exploit 
methodologies and techniques will emerge from a 
system like this. 
Demo 
Contact 
v  Download Forced Evolution 
v  github.com/soen-vanned/forced-evolution 
v  PI:EMAIL 
v  @soen_vanned 
v  http://0xSOEN.blogspot.com  
v  1KVh6pWfi4tiBPxy9jQCxtcMYnpraWkzmv 
References 
v  Fred Cohen (Computer Viruses – Theory and 
Experiments - 1984) 
v  Dr. Mark Ludwig (The little & giant black book of 
computer viruses, Computer Viruses, Artificial Life 
and Evolution) 
v  Herm1t’s VX Heaven(http://vxheaven.org/ ) 
v  Artificial Intelligence: A Modern Approach (3rd 
Edition, Stuart Russell & Peter Norvig)