typedef struct IMAGE_SECTION_HEADER IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;
typedef union Misc Misc, *PMisc;
typedef enum SectionFlags {
    IMAGE_SCN_ALIGN_1024BYTES=11534336,
    IMAGE_SCN_ALIGN_128BYTES=8388608,
    IMAGE_SCN_ALIGN_16BYTES=5242880,
    IMAGE_SCN_ALIGN_1BYTES=1048576,
    IMAGE_SCN_ALIGN_2048BYTES=12582912,
    IMAGE_SCN_ALIGN_256BYTES=9437184,
    IMAGE_SCN_ALIGN_2BYTES=2097152,
    IMAGE_SCN_ALIGN_32BYTES=6291456,
    IMAGE_SCN_ALIGN_4096BYTES=13631488,
    IMAGE_SCN_ALIGN_4BYTES=3145728,
    IMAGE_SCN_ALIGN_512BYTES=10485760,
    IMAGE_SCN_ALIGN_64BYTES=7340032,
    IMAGE_SCN_ALIGN_8192BYTES=14680064,
    IMAGE_SCN_ALIGN_8BYTES=4194304,
    IMAGE_SCN_CNT_CODE=32,
    IMAGE_SCN_CNT_INITIALIZED_DATA=64,
    IMAGE_SCN_CNT_UNINITIALIZED_DATA=128,
    IMAGE_SCN_GPREL=32768,
    IMAGE_SCN_LNK_COMDAT=4096,
    IMAGE_SCN_LNK_INFO=512,
    IMAGE_SCN_LNK_NRELOC_OVFL=16777216,
    IMAGE_SCN_LNK_OTHER=256,
    IMAGE_SCN_LNK_REMOVE=2048,
    IMAGE_SCN_MEM_16BIT=131072,
    IMAGE_SCN_MEM_DISCARDABLE=33554432,
    IMAGE_SCN_MEM_EXECUTE=536870912,
    IMAGE_SCN_MEM_LOCKED=262144,
    IMAGE_SCN_MEM_NOT_CACHED=67108864,
    IMAGE_SCN_MEM_NOT_PAGED=134217728,
    IMAGE_SCN_MEM_PRELOAD=524288,
    IMAGE_SCN_MEM_PURGEABLE=131072,
    IMAGE_SCN_MEM_READ=1073741824,
    IMAGE_SCN_MEM_SHARED=268435456,
    IMAGE_SCN_MEM_WRITE=2147483648,
    IMAGE_SCN_RESERVED_0001=16,
    IMAGE_SCN_RESERVED_0040=1024,
    IMAGE_SCN_TYPE_NO_PAD=8
} SectionFlags;
union Misc {
    dword PhysicalAddress;
    dword VirtualSize;
};
struct IMAGE_SECTION_HEADER {
    char Name[8];
    union Misc Misc;
    ImageBaseOffset32 VirtualAddress;
    dword SizeOfRawData;
    dword PointerToRawData;
    dword PointerToRelocations;
    dword PointerToLinenumbers;
    word NumberOfRelocations;
    word NumberOfLinenumbers;
    enum SectionFlags Characteristics;
};
typedef struct IMAGE_RESOURCE_DATA_ENTRY IMAGE_RESOURCE_DATA_ENTRY, *PIMAGE_RESOURCE_DATA_ENTRY;
struct IMAGE_RESOURCE_DATA_ENTRY {
    dword OffsetToData;
    dword Size;
    dword CodePage;
    dword Reserved;
};
typedef enum IMAGE_GUARD_FLAGS {
    IMAGE_GUARD_CFW_INSTRUMENTED=512,
    IMAGE_GUARD_CF_ENABLE_EXPORT_SUPPRESSION=32768,
    IMAGE_GUARD_CF_EXPORT_SUPPRESSION_INFO_PRESENT=16384,
    IMAGE_GUARD_CF_FUNCTION_TABLE_PRESENT=1024,
    IMAGE_GUARD_CF_FUNCTION_TABLE_SIZE_MASK_1=268435456,
    IMAGE_GUARD_CF_FUNCTION_TABLE_SIZE_MASK_2=536870912,
    IMAGE_GUARD_CF_FUNCTION_TABLE_SIZE_MASK_4=1073741824,
    IMAGE_GUARD_CF_FUNCTION_TABLE_SIZE_MASK_8=2147483648,
    IMAGE_GUARD_CF_INSTRUMENTED=256,
    IMAGE_GUARD_CF_LONGJUMP_TABLE_PRESENT=65536,
    IMAGE_GUARD_DELAYLOAD_IAT_IN_ITS_OWN_SECTION=8192,
    IMAGE_GUARD_PROTECT_DELAYLOAD_IAT=4096,
    IMAGE_GUARD_RF_ENABLE=262144,
    IMAGE_GUARD_RF_INSTRUMENTED=131072,
    IMAGE_GUARD_RF_STRICT=524288,
    IMAGE_GUARD_SECURITY_COOKIE_UNUSED=2048
} IMAGE_GUARD_FLAGS;
typedef struct IMAGE_RESOURCE_DIRECTORY IMAGE_RESOURCE_DIRECTORY, *PIMAGE_RESOURCE_DIRECTORY;
struct IMAGE_RESOURCE_DIRECTORY {
    dword Characteristics;
    dword TimeDateStamp;
    word MajorVersion;
    word MinorVersion;
    word NumberOfNamedEntries;
    word NumberOfIdEntries;
};
typedef struct IMAGE_LOAD_CONFIG_DIRECTORY32 IMAGE_LOAD_CONFIG_DIRECTORY32, *PIMAGE_LOAD_CONFIG_DIRECTORY32;
struct IMAGE_LOAD_CONFIG_DIRECTORY32 {
    dword Size;
    dword TimeDateStamp;
    word MajorVersion;
    word MinorVersion;
    dword GlobalFlagsClear;
    dword GlobalFlagsSet;
    dword CriticalSectionDefaultTimeout;
    dword DeCommitFreeBlockThreshold;
    dword DeCommitTotalFreeThreshold;
    pointer32 LockPrefixTable;
    dword MaximumAllocationSize;
    dword VirtualMemoryThreshold;
    dword ProcessHeapFlags;
    dword ProcessAffinityMask;
    word CsdVersion;
    word DependentLoadFlags;
    pointer32 EditList;
    pointer32 SecurityCookie;
    pointer32 SEHandlerTable;
    dword SEHandlerCount;
    pointer32 GuardCFCCheckFunctionPointer;
    pointer32 GuardCFDispatchFunctionPointer;
    pointer32 GuardCFFunctionTable;
    dword GuardCFFunctionCount;
    enum IMAGE_GUARD_FLAGS GuardFlags;
    struct IMAGE_LOAD_CONFIG_CODE_INTEGRITY CodeIntegrity;
    pointer32 GuardAddressTakenIatEntryTable;
    dword GuardAddressTakenIatEntryCount;
    pointer32 GuardLongJumpTargetTable;
    dword GuardLongJumpTargetCount;
    pointer32 DynamicValueRelocTable;
    pointer32 CHPEMetadataPointer;
    pointer32 GuardRFFailureRoutine;
    pointer32 GuardRFFailureRoutineFunctionPointer;
    dword DynamicValueRelocTableOffset;
    word DynamicValueRelocTableSection;
    word Reserved1;
    pointer32 GuardRFVerifyStackPointerFunctionPointer;
    dword HotPatchTableOffset;
    dword Reserved2;
    dword Reserved3;
};
typedef struct TranslatorGuardRN TranslatorGuardRN, *PTranslatorGuardRN;
struct TranslatorGuardRN { // PlaceHolder Structure
};
typedef struct EHExceptionRecord EHExceptionRecord, *PEHExceptionRecord;
struct EHExceptionRecord { // PlaceHolder Structure
};
typedef struct __crt_signal_action_t __crt_signal_action_t, *P__crt_signal_action_t;
struct __crt_signal_action_t { // PlaceHolder Structure
};
typedef struct  , *P;
struct  { // PlaceHolder Structure
};
typedef struct __crt_locale_data __crt_locale_data, *P__crt_locale_data;
struct __crt_locale_data { // PlaceHolder Structure
};
typedef struct  , *P;
struct  { // PlaceHolder Structure
};
typedef struct  , *P;
struct  { // PlaceHolder Structure
};
typedef struct  , *P;
struct  { // PlaceHolder Structure
};
typedef struct  , *P;
struct  { // PlaceHolder Structure
};
typedef struct  , *P;
struct  { // PlaceHolder Structure
};
typedef struct _exception _exception, *P_exception;
struct _exception { // PlaceHolder Structure
};
typedef struct  , *P;
struct  { // PlaceHolder Structure
};
typedef struct  , *P;
struct  { // PlaceHolder Structure
};
typedef struct  , *P;
struct  { // PlaceHolder Structure
};
typedef struct  , *P;
struct  { // PlaceHolder Structure
};
typedef struct  , *P;
struct  { // PlaceHolder Structure
};
typedef struct  , *P;
struct  { // PlaceHolder Structure
};
typedef struct  , *P;
struct  { // PlaceHolder Structure
};
typedef struct  , *P;
struct  { // PlaceHolder Structure
};
typedef struct __crt_stdio_stream __crt_stdio_stream, *P__crt_stdio_stream;
struct __crt_stdio_stream { // PlaceHolder Structure
};
typedef struct __crt_multibyte_data __crt_multibyte_data, *P__crt_multibyte_data;
struct __crt_multibyte_data { // PlaceHolder Structure
};
typedef struct  , *P;
struct  { // PlaceHolder Structure
};
typedef struct  , *P;
struct  { // PlaceHolder Structure
};
// WARNING! conflicting data type names: /Demangler/wchar_t - /wchar_t
typedef struct  , *P;
struct  { // PlaceHolder Structure
};
typedef struct __acrt_ptd __acrt_ptd, *P__acrt_ptd;
struct __acrt_ptd { // PlaceHolder Structure
};
typedef struct EHRegistrationNode EHRegistrationNode, *PEHRegistrationNode;
struct EHRegistrationNode { // PlaceHolder Structure
};
typedef enum _EXCEPTION_DISPOSITION {
} _EXCEPTION_DISPOSITION;
typedef struct __crt_locale_pointers __crt_locale_pointers, *P__crt_locale_pointers;
struct __crt_locale_pointers { // PlaceHolder Structure
};
typedef struct  , *P;
struct  { // PlaceHolder Structure
};
typedef struct  , *P;
struct  { // PlaceHolder Structure
};
typedef struct  , *P;
struct  { // PlaceHolder Structure
};
typedef struct  , *P;
struct  { // PlaceHolder Structure
};
typedef struct string_output_adapter string_output_adapter, *Pstring_output_adapter;
struct string_output_adapter { // PlaceHolder Structure
};
typedef int (* _onexit_t)(void);
undefined * FUN_00401000(void)
{
  return &DAT_0041f458;
}
void __cdecl print(char *param_1)
{
  undefined4 *puVar1;
  FILE *pFVar2;
  undefined4 uVar3;
  undefined *puVar4;
  pFVar2 = (FILE *)FUN_0040568c(1);
  puVar4 = &stack0x00000008;
  uVar3 = 0;
  puVar1 = (undefined4 *)FUN_00401000();
  FUN_00407c04(*puVar1,puVar1[1],pFVar2,(int)param_1,uVar3,puVar4);
  return;
}
// WARNING: Could not reconcile some variable overlaps
char * __fastcall do_encrypt(LPCWSTR file_name,size_t *output_size)
{
  BOOL BVar1;
  char *pcVar2;
  undefined8 *mac_addr;
  undefined4 *puVar3;
  undefined4 *disk_serial;
  DWORD input_file_size;
  size_t _Size;
  char *output_buf;
  int iVar4;
  HANDLE *input_file_handle;
  DWORD total_bytes_read;
  undefined8 *buf1;
  bool bVar5;
  HCRYPTKEY hKey;
  HCRYPTHASH hHash;
  uint bytes_read;
  int offset;
  HCRYPTPROV hProv;
  ushort *temp;
  char read_buf [16];
  input_file_handle = (HANDLE *)0x0;
  buf1 = (undefined8 *)0x0;
  hProv = 0;
  hKey = 0;
  hHash = 0;
  CryptAcquireContextW(&hProv,L"DataSafeCryptContainer",(LPCWSTR)0x0,0x18,0x50);
  BVar1 = CryptAcquireContextW(&hProv,L"DataSafeCryptContainer",(LPCWSTR)0x0,0x18,0x48);
  if (BVar1 == 0) {
    GetLastError();
    print("%x");
    goto LAB_004010b6;
  }
  BVar1 = CryptCreateHash(hProv,0x8003,0,0,&hHash);
  if ((BVar1 == 0) || (buf1 = (undefined8 *)allocate(0xe), buf1 == (undefined8 *)0x0))
  goto LAB_004010b6;
  mac_addr = (undefined8 *)get_mac_addr();
  if (mac_addr == (undefined8 *)0x0) {
LAB_00401252:
    free(buf1);
    buf1 = (undefined8 *)0x0;
  }
  else {
    copy_buf_(buf1,0xe,mac_addr,6);
    temp = (ushort *)execute_command(L"wmic bios get serialnumber");
    if (temp == (ushort *)0x0) {
LAB_00401241:
      bVar5 = false;
    }
    else {
      puVar3 = extract_serial(temp);
      free(temp);
      if (puVar3 == (undefined4 *)0x0) goto LAB_00401241;
      temp = (ushort *)lchar_to_dword((ushort *)puVar3);
      if (temp == (ushort *)0xffffffff) {
        bVar5 = false;
        free(puVar3);
      }
      else {
                    // Now buffer will contain mac + bios_serial[0:4]
        copy_buf_((undefined8 *)((int)buf1 + 6),8,(undefined8 *)&temp,4);
        disk_serial = get_disk_serial();
        if (disk_serial == (undefined4 *)0x0) {
          bVar5 = false;
          free(puVar3);
        }
        else {
          temp = (ushort *)lchar_to_dword((ushort *)disk_serial);
          bVar5 = temp != (ushort *)0xffffffff;
          if (bVar5) {
                    // Now buffer will contain mac + bios_serial[0:4] + disk_serial[0:4]
            copy_buf_((undefined8 *)((int)buf1 + 10),4,(undefined8 *)&temp,4);
          }
          free(disk_serial);
          free(puVar3);
        }
      }
    }
    free(mac_addr);