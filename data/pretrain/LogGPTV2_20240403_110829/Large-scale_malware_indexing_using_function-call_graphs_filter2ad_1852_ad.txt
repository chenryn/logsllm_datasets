man analysts. Speciﬁcally, if the distance between two malware
ﬁles is considered sufﬁciently small according to NHBA, would
the human analysts classify them into the same malware family? To
answer this question, we randomly selected from the test database
991 malware samples that belong to 122 malware families. In each
experimental run, we ﬁrst select one malware sample as a query and
617K=3
K=1
Success
Rate
Success Average
Rate
Hit
2.36
71.30% 78.20%
K=5
Success
Rate
80.10%
Average
Hit
3.11
K=7
K=9
Success Average
Success Average
Rate
81.80%
Hit
3.64
Rate
82.50%
Hit
4.14
Table 2: Accuracy and effectiveness of the NBHA in terms of
K-NN search results
50
45
40
35
30
25
20
15
10
5
)
%
(
e
g
a
t
n
e
c
r
e
P
0
0
2
Average
Minimum
Maximum
K = 5
K = 10
90
80
70
60
50
40
30
20
10
)
%
(
e
g
a
t
n
e
c
r
e
P
14
16
0
0
5
K
10
15
6
8
4
12
Fan out Factor
10
Figure 4: Percentage of index
entries (PIE) accessed versus
the fan-out factor of the VP tree
Figure 5: PIE vs. the number
of nearest neighbors requested
(K) (fan-out factor is 10)
build up a VP Tree for the remaining 990 malware samples. Then,
we perform a K-NN search for the query to ﬁnd the K malware
samples that are closest to the query. We repeat the above process
for each of the 991 malware samples while varying K, and sum-
marize the results in Table 2. In this table, a K-NN query result
is a Success if at least one out of K nearest neighbors belongs to
the same malware family as the query malware ﬁle. Average Hit is
deﬁned as the average number of the returned K nearest neighbors
that are in the same family as the query malware. Results in this
table suggest that NBHA is effective in classifying unknown mal-
ware samples, because it not only achieves high success rate (over
80% for K >= 5) but also produces correct labeling in many cases
because the most prevalent malware family among the K nearest
neighbors is indeed the query malware’s family. This result shows
that SMIT can indeed facilitate, and even automate, the process of
convicting incoming malware samples.
6.4 Efﬁciency of Optimistic VPT
We now evaluate the efﬁciency of Optimistic Vantage-Point Tree
(OVPT) using the percentage of index entries (PIE) that need to be
accessed to locate the K nearest neighbors of a query ﬁle. Because
accessing each index entry involves one graph-distance computa-
tion, PIE is a proper metric that captures OVPT’s computation cost.
We ﬁrst explore the performance impact of the fan-out factor of
SMIT’s OVPT (i.e., the number of children each tree node has)
and the results are plotted in Figure 4. Although a larger fan-out
factor reduces the number of levels in the tree, it also increases the
number of child nodes that need to be explored at each tree level,
because the coverage of each child node is smaller and more of
them intersect with the current query range. As a result of these
two conﬂicting inﬂuences, Figure 4 shows that the fan-out factor
does not have a signiﬁcant impact on PIE. However, the larger fan-
out factor increases slightly the overall computation overhead.
Intuitively, as K decreases, less graph-distance computation is
required to service each query, because smaller K allows δnow to
decrease faster so that fewer partitions of each intermediate OVPT
visited need to be traversed. However, in practice, a K value of
between 5 and 10 is required for human analysts to determine if an
incoming binary ﬁle is malicious or not. Speciﬁcally, if a dominant
number of returned K neighbors belong to the same family, there
is a very good chance that the query binary ﬁle indeed belongs to
that family. As shown in Figure 5, although PIE increases with K,
Success Rate Dominant Family Rate Average Hit
K=5
76.7%
83.3%
83.3%
86.7%
86.7%
66.7%
70.0%
66.7%
66.7%
66.7%
K=10
3.24
3.20
3.12
3.13
3.13
Success Rate Dominant Family Rate Average Hit
78.3%
87.0%
87.0%
91.3%
91.3%
65.2%
69.6%
69.6%
69.9%
69.9%
6.29
6.30
5.99
5.91
5.98
n
0
1
2
3
4
n
0
1
2
3
4
Table 3: Impact of N on the accuracy of identifying the mal-
ware family of a query binary ﬁle
SMIT’s OVPT can still prune away an average of about 70% of the
database even when K = 10, i.e., for 10-NN search queries. This
result demonstrates the effectiveness of SMIT’s OVPT index.
Finally, we evaluate the scalability of SMIT’s OVPT with re-
spect to the number of graphs being indexed. Because each leaf
node in SMIT’s ﬁrst-level B+ tree corresponds to a second-level
OVPT tree, this evaluation also helps shed light on the impact of
the fan-out factor of the ﬁrst-level B+ tree. We construct OVPT
trees that contain a different number of malware samples, from 100
to 1000 in increments of 50, and for each resulting OVPT, we query
it with 100 randomly-selected malware samples and measure the
average number of graph distance computations required for differ-
ent values of K. Figure 6 summarizes the results and suggests that
the number of graph distance computations approximately increase
logarithmically with the size of the OVPT tree (the time complexity
of searching VP tree is O(logn) [36]), demonstrating its scalability.
6.5 Evaluation of Multi-Resolution Indexing
Despite the great pruning power of the OVPT tree, it cannot
be directly applied to organize the entire malware graph database,
which we envision will grow to millions. For example, even if an
OVPT tree can achieve an excellent PIE of 10%, pinpointing the
nearest neighbors of a query in a 100,0000-malware database ne-
cessitates over 10,000 graph-distance computations, which is un-
acceptable for practical use. To ensure reasonable response time
while maintaining good query accuracy, SMIT uses a multi-resolution
indexing structure that removes irrelevant parts of the database with
a B+ tree and queries multiple relevant OVPT trees in parallel.
Next, we evaluate the accuracy and performance of SMIT’s com-
bined indexing structure using 102,391 unique malware programs.
6.5.1 Impact of N on Query Accuracy
The parameter N for SMIT’s B+ tree determines the number of
sibling leaf nodes (2N + 1) in the ﬁrst-level index that need to be
searched in the second-level index search. A larger N improves the
probability of locating the true K nearest neighbors in the database
of the query ﬁle, and of correctly identifying the true malware fam-
ily it belongs to, if any. However, increasing N inevitably increases
computational overhead because more second-level OVPT trees are
searched. To evaluate the impact of N on SMIT’s accuracy, we ran-
domly select 50 malware programs and perform K-NN searches
for them with different K (5 and 10) and N (0, 1, 2, 3 and 4). Table
3 summarizes the experimental results. Success Rate and Average
Hit are deﬁned as in Section 6.3 and Dominant Family Rate is de-
ﬁned as the percentage of 50 experiments where the most prevalent
family among K returned nearest neighbors is also the family to
which the query malware belongs. As expected, Success Rate in-
creases with the increase in N. However, the difference in Success
618n
o
i
t
a
t
u
p
m
o
C
e
c
n
a
t
s
D
i
f
o
r
e
b
m
u
N
e
g
a
r
e
v
A
Linear Scan
OVPT K = 3
OVPT K = 5
OVPT K = 7
1000
900
800
700
600
500
400
300
200
100
0
100
200
300
400
500
600
700
800
900
1000
Number of Indexed Graphs
1000
900
800
700
600
500
400