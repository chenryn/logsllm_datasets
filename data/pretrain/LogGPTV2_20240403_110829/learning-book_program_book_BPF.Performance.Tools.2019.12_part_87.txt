function name.
14.4.13 Tasklets
In 2009, a patch to add tasklet tracepoints was proposed by Anton Blanchard, but these are not in
the kernel as of today [164]. The tasklet functions, initialized in tasklet_init(), can be traced using
kprobes. For example, in net/ipv4/tcp_output.c:
[..-]
tasklet_init (6t.sq=>tasklet,
tcp_tasklet_func,
(unsigned Long) tsg) 
[ - - · ]
This creates a tasklet to callthe tcp_tasklet_func() function. Tracing its latency using BCC
funclatency(8):
---
## Page 702
14.4 BPF Tools
665
+funclateney =u top_tasklet_func
Tracing 1 functlons for *tcp_tasklet_func... Bit Ctrl-C to end
C
usec.s
:count
distr1but.lon
0 > 1
0 :
E  7
: 3
 | *
8 -> 15
: 10
|***.
16 -> 31
: 22
[***....
E9  127
: 61
..*..................... |
Detach.ing ...
Custom tools can be created using bpftrace and kprobes for tasklet functions as desired.
14.4.14 0ther Tools
Other tools worth mentioning for kernel analysis:
(9 adeu) Aouae ananb unu nd sazueuuns :(g)gebun 
(9 saqdeu) saoond pue ad.6 Aq sieo uaps.is sazueuuuns (s)qunoosis 
* hardirq(8): Summarizes hard interrupt time (Chapter 6).
 softirq(8): Summarizes soft interrupt time (Chapter 6).
* xcalls(8): Times CPU cross calls (Chapter 6).
 vmscan(8): Measures VM scanner shrink and reclaim times (Chapter 7).
● vfsstat(8): Counts common VFS operation statistics (Chapter 8).
cachestat(8): Shows page cache statistics (Chapter 8).
• biostacks(8): Shows block I/O initialization stacks with latency (Chapter 9).
 skblife(8): Measures sk_bufflifespans (Chapter 10).
● inject(8): Uses bpf_override_return() to modify kernel functions to return errors, for testing
error paths. A BCC tool.
• criticalstat(8) : Measures atomic critical sections in the kernel, showing durations
and stack traces. By default, it shows IRQ-disabled paths that lasted longer than 100
microseconds. This is a BCC tool that can help you locate a source of latency in the kernel.
It requires CONFIG_DEBUG_PREEMPT and CONFIG_PREEMPTIRQ_EVENTS.
Kernel analysis often involves custom instrumentation beyond the tools, and one-liners are a way
to begin developing custom programs.
1.3 0rigin: It was developed by Joel Fermandes on 18-Jun-2018.
---
## Page 703
666
6 Chapter 14 Kernel
14.5 BPFOne-Liners
These sections show BCC and bpftrace one-liners. Where possible, the same one-liner is
implemented using both BCC and bpftrace
14.5.1 BCC
Count system calls by process:
syscount -P
Count system calls by syscall name:
syscount
Count kernel function calls starting with *attach°:
funccount 'attach**
Time the kernel function vfs_read() and summarize as a histogram:
Eunclatency vfa_read
Frequency count the first integer argument to kernel function *func1°:
azgdiat -C *p::funcl (Int a) :int:a'
Frequency count the return value from kernel function *func1°:
azgdiat -C *r::funcl (1 :int:$retval*
Cast the first argument as a sk_buff and frequency count the len member:
Sample kernel-level stacks at 99 Hertz:
profi1e -K -F99
Count context switch stack traces
stackcount =p 123 t:ached:ached_svitch
14.5.2 bpftrace
Count system calls by process:
Count system calls by syscall probe name:
Count system calls by syscall function:
B[ksym(*(kaddr1*ays_call_table*) + args=>id * B) 1] = count:1); )
---
## Page 704
14.6 BPF One-Liners Examples  667
uee, gm sues ste uog paag suno
Time the kernel function vfs_read() and summarize as a histogram:
1/[pta]eae/ peea"sgaiax [ fsossu = [pr1]s18 ) pesasgaix。 8- eoexagdog
8 = histInsecs - Bts[tid]): delete (8ts [tid] l: ]*
Frequency count the first integer argument to kernel function *func1*:
bpftrace -e *kprobe:funcl  e[arg0] = count1l: ]′
Frequency count the return value from kernel function *func1°:
bpftrace -e *kretprobe:funcl  e[retval] = count(1 *
Sample kernel-level stacks at 99 Hertz, excluding idle:
Sample on-CPU kernel function at 99 Hertz:
Count context switch stack traces:
bpftrace -e *tischedisched_svitch  8[katack, ustack, conm] = count(1 
Count workqueue requests by kernel function:
bpftrace -e *t:vorkqueve:vorkqueue_execute_start ( B[ksym (args=>function) ]
count ())*
Count hrtimer starts by kernel function:
14.6
BPFOne-Liners Examples
Includling some sample output, as was done for each tool, is also useful for illustrating one-liners.
14.6.1  Counting System Calls by Syscall Function
8[ksym(*(kaddz(*sys_cal1_table*) + args->id * 8)1] = count() : }'
Attachsng 1 probe...
[.--]
e[sys_sendto] : 5515
[SyS_read] : 6047
ZEZEt +[tentrodess]θ
e[ays_po11] : 15275
---
## Page 705
668
Chapter 14 Kernel
e[Sys_ioct]] : 19010
e[sya_futex] : 20383
e[Sys_eite] : 26907
e[sys_gettid] : 27254
e[ays_recvmsg] : 51663
This output shows that the sys_recvmsg() function, likely for the recvmsg(2) syscall, was called
the most while tracing: 51,683 times.
This one-liner uses the single raw_syscalls:sys_enter tracepoint, rather than matching all the
syscalls:sys_enter_。* tracepoints, making it much faster to initialize and terminate. However, the
raw_syscall tracepoint only provides an ID number for the syscall; this one-liner translates it into
the syscallfunction by looking up its entry in the kernel sys_call_table.
14.6.2 Counting hrtimer Starts by Kernel Function
1 (auco = [(uoong
[..-]
$task = (struct task_struct *) curtask;
Spidns = §task->nsproxy=>pid_na_fox_ch1ldren=>ns .inum,
---
## Page 712
15.1 Background
675
This sets Spidns to be the PID namespace ID (integer), which can be printed or filtered. It will
match the PID namespace seen in the /proc/PID/ns/pid_for_children symlink.
If the container runtime uses a UTS namespace and sets the nodename to be the container name
[as is often the case with Kubernetes and Docker), then the nodename can also be fetched from a
BPF program to identify containers on output. For example, using bpftrace syntax:
#1nclude 
[*** ]
Stask = [atruct task_struct *) curtask;
$nodenane - $task->nsproxy->uts_ns=>nane,nodenane,
The pidnss(8) tool (covered in Section 15.3.2) does this.
The network namespace can be a useful identifier for the analysis of Kubernetes pods since
containers in the pod will likely share the same network namespace.
You can add these namespace identifiers to the tools covered in prior chapters to make them
container-aware, including the PID namespace ID or UTS nodename string, along with the PID.
Note that this only works if the instrumentation is in process context, so that curtask is valid.
Orchestration
Running BPF tools across multiple container hosts presents a similar problem to a cloud deploy
ment across many VMs. Your company may already have orchestration software to manage
this that can run a given command across multiple hosts and collect the output. There are also
tailored solutions, including kubectl-trace.
kubectl-trace is a Kubernetes scheduler for running bpftrace programs across a Kubernetes cluster.
It also provides a container_pid variable for use in bpftrace programs that refers to the pid of the
root process. For example, this command:
kubect] trace run -e *k:vfs* /pid == $container_pid/  B [probe] = count1l * mypod -a
counts kernel vfs*0 calls for the mypod container application until you press Ctrl-C. Programs
can be specified as one-liners, as in this example, or read from files using  [169]. kubectl-trace is
covered further in Chapter 17.
Function as a Service (FaaS)
A new model for computing involves defining application functions that a service provider
runs, likely in containers. The end user defines only functions and may not have SSH access to
the system that runs the functions. Such an environment is not expected to support end users
running BPF tracing tools. (It cannot run other tools, either.) When non-privileged BPF tracing