### 选择与实现

我们选择这种方法是因为它是一种优雅的解决方案，适用于32位和64位系统。在此攻击中，我们需要覆盖下一个块的进程指针。

池头的最后四个字节包含一个指向 **EPROCESS** 结构的指针。当池块被释放时，如果 **PoolType** 设置了 **Quota bit**，该指针会减少与 EPROCESS 对象相关的某些值：
- 该对象的引用计数（一个进程是一个对象）
- **QuotaBlock** 字段指向的值

在减小这些值之前，系统会进行一些检查。我们不能直接利用对象的引用计针，但可以伪造一个 **EPROCESS** 结构，并在 **QuotaBlock** 字段设置任意指针以减随机的值（包括内核空间）。

#### EPROCESS 结构
```plaintext
kd> dt nt!_EPROCESS
+0x000 Pcb : _KPROCESS
+0x098 ProcessLock : _EX_PUSH_LOCK
+0x0a0 CreateTime : _LARGE_INTEGER
+0x0a8 ExitTime : _LARGE_INTEGER
+0x0b0 RundownProtect : _EX_RUNDOWN_REF
+0x0b4 UniqueProcessId : Ptr32 Void
+0x0b8 ActiveProcessLinks : _LIST_ENTRY
+0x0c0 ProcessQuotaUsage : [2] Uint4B
+0x0c8 ProcessQuotaPeak : [2] Uint4B
+0x0d0 CommitCharge : Uint4B
+0x0d4 QuotaBlock : Ptr32 _EPROCESS_QUOTA_BLOCK 
[...]
```

#### EPROCESS_QUOTA_BLOCK 结构
```c
typedef struct _EPROCESS_QUOTA_BLOCK {
    EPROCESS_QUOTA_ENTRY QuotaEntry[3];
    LIST_ENTRY QuotaList;
    ULONG ReferenceCount;
    ULONG ProcessCount;
} EPROCESS_QUOTA_BLOCK, *PEPROCESS_QUOTA_BLOCK;
```

### 溢出实现

为了实现 **配额进程指针溢出** 攻击，我们需要利用我们的溢出覆盖以下内容：
1. 下一个块的 **池类型**，确保设置了 **Quota bit**
2. 下一个块的 **进程指针**，用一个指向伪造的 **EPROCESS** 结构的指针替换它

我们必须获取到下一块的进程指针，因此无论如何都要覆盖下一块的整个池头。然而，我们不能向池头发送随机数据，否则会触发蓝屏死机 (BSOD)。必须确保以下字段是正确的：
- 块大小
- 前一个块大小
- 池类型

唯一满足此条件的方法是准确地获取要覆盖的块，这可以通过 **池喷射技术** 来实现。这里不会详细阐述如何实现池喷射，但基本思路是通过生成特定类型的池来实现目标。

#### 溢出效果
- 溢出前：
- 溢出后：

### Payload

现在我们可以在任何地址上实现任意值的减法操作。接下来我们可以参考 Cesar Cerrudo 的文章 [4]，其中介绍了几种提权技术。有趣的是，在 **TOKEN** 结构中有一个 **Privileges** 字段：

```c
typedef struct _TOKEN 
{
    [...]
    /*0x040*/ typedef struct _SEP_TOKEN_PRIVILEGES
    {
        UINT64 Present;
        /*0x048*/ UINT64 Enabled;
        UINT64 EnabledByDefault;
    } SEP_TOKEN_PRIVILEGES, *PSEP_TOKEN_PRIVILEGES;
    [...]
} TOKEN, *PTOKEN;
```

**Enabled** 字段定义了进程可执行的操作。默认值为 `0x80000000`，具有 `SeChangeNotifyPrivilege` 权限。从该位掩码中去掉一位变成 `0x7fffffff`，就拥有了更大的权限。MSDN 文档提供了该位掩码的可用权限列表。

虽然我们没有 **TOKEN** 结构的地址（因为那是内核地址），但我们可以通过 **NtQuerySystemInformation** 函数通过其句柄获取任何对象的内核地址。还可以通过调用 **OpenProcessToken()** 函数为我们的 token 赋予句柄。更多关于 **NtQuerySystemInformation()** 函数和常见的内核地址溢出的详细信息，请参考 [这里](https://recon.cx/2013/slides/Recon2013-Alex%20Ionescu-I%20got%2099%20problems%20but%20a%20kernel%20pointer%20ain't%20one.pdf)。

我们决定触发这个漏洞以获取 **SeDebugPrivilege** 权限，该权限允许控制系统的所有进程并反弹一个系统 shell。

### 结论

请注意，这个 exploit 不能在 Windows 8 及更高版本系统中使用，因为微软在防御内核漏洞方面做了大量工作。尽管如此，这并不意味着这些版本不能被攻破。你可以在 [GitHub](https://github.com/cbayet/Exploit-CVE-2017-6008) 上看到我的 exploit 源代码。Windows 10 系统下如何利用类似的漏洞是 **Nuit du Hack XV** 大会的主题。

### 参考文献

[1] – Simple ioctl fuzzer  
[2] – Defining IOCTL code  
[3] – Tarjei Mandt paper  
[4] – Easy local Windows Kernel exploitation by Cesar Cerrudo.  
[5] – Leaking Kernel Addresses  
[6] – This extension is great for investigating the pool state  
[7] – Source code of the exploit