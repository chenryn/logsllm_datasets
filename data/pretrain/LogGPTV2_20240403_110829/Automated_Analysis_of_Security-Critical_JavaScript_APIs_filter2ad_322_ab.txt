not leak secret to untrusted code. However the following
deﬁnition of untrusted would enable it to steal secret.
function untrusted() {return arguments.caller.arguments[1];}
ES5S eliminates such leaks and make closure-based encap-
sulation safe by explicitly forbidding implementations from
supporting .caller, .arguments on function objects.
No Ambient Access to Global Object. JavaScript provides
multiple (and surprising) ways for code to obtain a reference
to the global or window object, which is the root of the entire
DOM tree and hence security-critical in most setups. For
instance, the following program can be used to obtain a
reference to the global object.
var o = {foo: function (){return this;}}
g = o.foo; g();
This is because the this value of a method when called as a
function gets coerced to the global object. Further, built-in
methods sort, concat, reverse of Array.prototype and valueOf of
Object.prototype return a reference to the global object when
invoked with certain ill-formed arguments. ES5S prevents all
these leaks and only allows access to the global object by
using the keyword this in global scope and any host-provided
aliases, such as the global variable window.
B. ES5S to SESlight
While ES5S simpliﬁes many issues associated with
JavaScript, two challenges related to the API Conﬁnement
problem remain: (1) All code has undeniable write access to
the built-in objects, which can be maliciously used to alter
the behavior of trusted code that make use of built-in objects,
and (2) Code running inside eval is unavailable statically,
and so we do not know what global state it accesses. These
problems are addressed by the SESlight restrictions on ES5S.
365
The ﬁrst problem is solved by making all built-in ob-
jects, except the global object, transitively immutable, which
means that all their properties are immutable and the objects
cannot be extended with additional properties. Further, all
built-in properties of the global object are made immutable.
The second problem is addressed by imposing the re-
striction that all calls to eval must specify an upper bound
on the set of free variables of the code being eval-ed.
(Unlike JavaScript,
the free variables of a program are
statically deﬁnable for ES5S; see [35] for a precise deﬁ-
nition.) At run-time, the code is evaluated only if its free
variables are within the set speciﬁed by the arguments.
The restricted eval function is called variable-restricted eval.
For example: the call eval(‘var x = y + z’) is written out as
eval(‘var x = y + z’, ”y”, ”z”) where {“y”, “z”} is the set of free
variables. This restriction makes it possible to conservatively
analyze eval calls by assuming a worst-case behavior based
on the free variables speciﬁed.
Like FBJS [36] and the JavaScript subsets devised in
previous sandboxing studies [23, 24], SESlight does not sup-
port setters/getters. However, SESlight is a more permissive
language subset. For example, SESlight allows a form of
eval, while the other languages do not. In addition, while
SESlight has a restricted semantics to support
isolation,
the corresponding restrictions in FBJS are enforced using
a combination of ﬁltering, rewriting and wrapping that is
not clearly documented in a public standard. For example, in
order to prevent this from referring to the global object, FBJS
rewrites the keyword this to ref(this), where ref implements
an inlined runtime monitor that does not return the global
object. In addition, FBJS does not have full lexical scoping
or immutable built-in objects. Since SESlight is essentially
ES5S without setters/getters, with the variable-restriction on
eval and transitively immutable built-in objects, we believe
that this clean language design with standardized semantics
is more attractive to programmers and developers than
previous languages designed to support similar forms of
sandoxing and conﬁnement via code rewriting and wrapping.
III. THE LANGUAGE SESlight
We deﬁne the syntax and semantics of SESlight.
A. Syntax
The abstract syntax of SESlight is given in ﬁgure 2, using
the notation ˜t for a comma-separated list t1, . . . , tn. The
syntax is divided into values, expressions and statements. A
value is either a primitive value, a heap location or one of
the error values TypeError, RefError. Locations include
constants for the global object, and all pre-deﬁned built-in
objects. Expressions are either variables or values. State-
ments include assignment, property load, property store, and
all representative control ﬂow constructs from ES5S. All
statements are written out in a normal form, similar to the
A-Normal form of featherweight Java [2]. It is easy to see
Variables and Values
(Loc) l ::= lg | lobj | loP rot | . . .
null | l1 | . . .
locations
(PVal ) pv ::= num | str | bool | undef
(Val ) v ::= l | pv | TypeError | RefError
(FVal ) f v ::= function x(˜y){s}
(A) a ::= $All | $Num | . . .
(Vars u) x, y ::= this | foo | bar | . . .
primitives
values
function values
annotations
user-variables
Expressions:
(Exps) e ::= x | v
Statements:
(Stmts u) s, t ::= y = e
expr
binary expr
y = e1 binop e2
unary expr
y = unop e
load
y = e1[e2, a]
store
e1[e2, a] = e3
y = { ˜x : e}
object literal
array literal
y = [˜e]
call
y = e( ˜ei)
y = e[e(cid:48), a]( ˜ei)
invoke
new
y = new e( ˜ei)
y = function x (˜z){s} function expr
function x (˜z){s}
func decl
eval(e, ˜str )
eval
return
return e
var
var x
throw
throw e
s; t
if (e) then s [else t]
while (e) s
for (x in e) s
try{s1}catch (x){s2}ﬁnally{s3}
N | Th(v) | Ret(v)
sequence
if
while
forin
try
end
Figure 2. Syntax for SESlight
that using temporary variables, all complex statements from
ES5S, except setters/getters and eval, can be re-written into
semantics-preserving normalized statements. For example,
y = o.f.g.h() can be re-written to $a=o.f ; $b=$a.g ; y=$b.h()
with temporary variables $a and $b.
The syntax for property-lookup is augmented with prop-
erty annotations, which are an optional method to improve
the precision of our static analysis method. A property
lookup with annotation a is written as e1[e2, a]. The an-
notation indicates a bound on the set of string values
the expression e2 can evaluate to. Examples of anno-
tations are: $Num which represents the set {“0”, “1”, . . .},
$Native which represents the sets of built-in method names
{“toString”, “valueOf”, . . .} etc. We use the annotation $All to
represent the domain of all strings. Using $All, we can triv-
ially translate an un-annotated property lookup to annotated
property lookup. We denote the set of all annotations by A
and assume a map Ann : Str → 2A specifying the valid
annotations for a given string.
366
B. Operational Semantics
We deﬁne a small step style operational semantics ([32])
for SESlight, denoted by (Σ ,→). For all expressions and
statements except eval, the semantics is based on the 5th edi-
tion of the ECMA262 standard. In this respect, our semantics
is similar to the JavaScript semantics by Maffeis et al [22],
which was also based on the ECMA262 standard. The main
technical difference in the structure of our semantics and
the one by Maffeis et al is that we model scope objects
using the standard store data structure and not as ﬁrst class
objects. This simpliﬁcation was possible due to the more
standard scoping semantics of ES5S. The entire semantics
is approximately 27 pages long in ASCII, including a model
for the DOM and a subset of built-in objects, and is listed
online [34]. We now brieﬂy describe the semantics.
Notations Conventions. Loc, Val, Vars u, Stmts u are
the set of all
locations, values, user variables and user
statements as deﬁned in ﬁgure 2. Loc includes lg which
is the (constant) location of the global object. Since the
semantics is small step style, it introduces new terms and
values in the program state for book-keeping. Such terms
and values are called “internal” and are prepended with the
symbol ‘@’. Vars @ and Stmts @ are the sets of all internal
variables and statements respectively. Vars is the set of all
variables, deﬁned as Vars u ∪ Vars @, and Terms is the
set of all terms, deﬁned as Stmts u ∪ Stmts @. For a partial
map f, dom(f) is the set of elements on which it is deﬁned.
For a value v and partial map f, f[x → v] denotes the map
obtained by updating the value of f(x) to v.
Heaps, Stacks and States. The complete deﬁnitions of
Heaps and Stacks are present in ﬁgure 3. Stacks contain
property records (or activation records) which are partial
maps from Vars to the set of records values RVal. A record
value is either ⊥, denoting an uninitialized property name or
a pair of a value (from Val) and an attributes set specifying
whether the property is writable, enumerable or deletable.
Unless needed, we will always write records values as values
and ignore their attribute part. The empty stack [ ] speciﬁes
the global scope. JavaScript supports closures, which are
modeled as pairs of statements and stacks, denoting a
function’s body and lexical scope respectively. Heaps are
modeled as partial maps from the set of locations (or object
references) to the set of objects. Objects are of two kinds:
(1) Non-function objects modeled as property records. (2)
Function objects modeled as pairs of property-records and
closures. We use Heaps, Stacks to denote the domain of
heaps and stacks respectively. Finally, a program state is
deﬁned as a triple consisting of a heap, a stack and a term.
Σ := Heaps × Stacks × Terms is the domain of all states.
Property Lookup and Variable Resolution.
Property
lookup and variable resolution for SESlight can be deﬁned as
functions over a heap and stack. Property lookup uses the
prototype-based inheritance mechanism, which is modeled
367
Vars @ := @extensible | @class | @code | @proto | @1, . . .
Attr := writable | conf igurable | enumerable
Closure := FVal × Stacks
RVal := (Val ) × 2Attr ∪ {⊥}
Records R := Vars (cid:42) RVal
Objects o := Records ∪ (Records × Closure)
Stacks A, B := [Records∗]
Heaps H, K := Loc (cid:42) Objects
Figure 3. Heaps and Stacks
in the semantics using an @proto internal property on all
objects that points to their respective prototype object. Given
a heap H, the value of property p for a location l is given
by the function Proto(H, l, p), deﬁned as follows:
p /∈ dom(H(l))
Proto(H, l, p) = Proto(H, H(l)(‘@proto’), p)
p ∈ dom(H(l))
v = H(l)(p)
Proto(H, l, p) = v
Proto(H, null, p) = undef
Variable resolution for SESlight is deﬁned in the standard
way by traversing down the stack of activation records. It is
formalized using the function Lookup(H, A, x), deﬁned as
follows
x ∈ R v = R(x)
¬HasProp(H, lg, x)
Lookup(H, [R, A], x) = v
Lookup(H, [ ], x) = RefError
x /∈ dom(R)
Lookup(H, [R, A], x) = Lookup(H, A, x)
HasProp(H, lg, x)
Lookup(H, [ ], x) = Proto(H, lg, x)
is
Here lg
the reference to the global object and
HasProp(H, lg, x) checks if x appears anywhere on the
prototype chain of the global object.
Expression semantics. Semantics of an expression e is
given by a map [[e]] : Heaps × Stacks → Val, deﬁned as
follows:
[[v]]HA = v
[[x]]HA = Lookup(H, A, x)
Statement semantics.
Semantics of statements are ex-
pressed as small-step state transition rules of the form
H, A, t → K, B, s. Rules are divided into axioms and con-
text rules. We deﬁne three kinds of termination statements:
N for normal completion of execution, Ret(v) for function
termination and Th(v) for disrupted execution. For the latter
two, v denotes the value returned and thrown respectively.
We now explain a few rules to convey the main ideas.
Load. We present
the semantics for the annotated load
statement y = v1[v2, a]
@1, @2 = f reshV ar()
s := @TS (@2, v2); @TO(@1, v1); y = @1[@2, a]
H, A, y = v1[v2, a] → H, A, s
a /∈ Ann(str)
H, A, y = l[str , a] → H, A, Th(TypeError )
v = Proto(H, l, str)
H, A, y = l[str , a] → H, A, y = v
a ∈ Ann(str)
The ﬁrst step is to convert v2 to a string and v1 to an
object. This is achieved using the internal statements
@TS(@2, v2) and @TO(@1, v1) respectively, where @1
and @2 are internal variables used to store the results of
the conversions. Next, if the string value of v2 matches the
annotation a, then the corresponding property is looked up,
else a TypeError is thrown.
(Variable-restricted) Eval. We
the
semantics
statement
eval(str 0 , str 1 , . . . , str n). The ﬁrst step is to convert the
argument str 0 to a string, if it is not already in string form.
The next step is to parse the string str 0 and check if its
free variables are contained in {str 1, . . . , str n}. We refer
the reader to [35] for a formal deﬁnition of free variables
of a SESlight term. If the free variable check goes through
then a new activation record is placed on the global stack