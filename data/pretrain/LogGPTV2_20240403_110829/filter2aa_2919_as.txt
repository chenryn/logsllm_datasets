### Resource Constraints and Evaluation Scope

Given the available resources for this research, it is not feasible to run the developed fuzzer on a similar infrastructure for a comprehensive evaluation. Therefore, a detailed comparison with other fuzzers is beyond the scope of this work.

### System Specifications

The system used during development and for fuzzing had the following specifications:
- **Processor:** Intel Xeon CPU @ 3.2 GHz (12 Cores)
- **Memory:** 32 GB RAM

The fuzzer was executed within a VirtualBox VM, with six cores and 20 GB of RAM allocated to the VM. However, the fuzzer was only run on a single core in the test system.

### Fuzzing Configuration

- **v8 Engine Version:** 8.1.307.28 (released in April 2020)
- **Test Case Runtime Limit:** 400 milliseconds per execution
- **Average Execution Time:** 62 milliseconds
- **Test Period:** One week (due to limited resources)
- **Total Executions:** 8,467,311
- **Observed Crashes:** 1,677

Most of these crashes were related to bugs in native function calls within the v8 engine, which are typically used for development or debugging and do not pose a security risk to end-users. Chapter 5.4.1 provides more details on a high-severity bug that is not related to native function calls.

### Exploited Vulnerability in Foxit Reader

During the analysis of previously exploited vulnerabilities, a vulnerability in Foxit Reader was identified. Foxit Reader uses the JavaScript engine from Chromium, making it susceptible to v8 vulnerabilities. The author, along with the second supervisor, developed a reliable exploit for this vulnerability. Opening a specific PDF file in Foxit Reader triggers the exploit, achieving full code execution without crashing the application. It bypasses all in-place memory protections and remains invisible to the victim.

- **Vulnerability Report:** TrendMicroâ€™s Zero Day Initiative (ZDI-20-933)
- **Fix Date:** 2020-07-31
- **CVE Assignment:** CVE-2020-15638

### Manual Testing and Bug Discovery

Manual tests during fuzzer development led to the discovery of a bug involving suspended generators yielding themselves. This bug, a NULL pointer exception, is considered non-exploitable. It was reported to the Chromium developer team and fixed within one day. The bug is tracked as Chromium issue 1075763.

### Example of a High-Severity Security Vulnerability

A high-severity bug was found in v8 version 8.1.307.28 during fuzzing. The bug was triggered under specific conditions, including the use of three chained loops, specific loop iterations, and particular syntax. The complexity of these pre-conditions makes it unlikely for a traditional fuzzer to find the bug without a large number of executions.

- **Chromium Issue:** 1072171
- **Classification:** High-severity
- **Award:** $7,500 (to Javier Jimenez)
- **Report Date:** 2020-04-18
- **Public Release Date:** 2020-07-30

The root cause of the vulnerability was an incorrect compiler annotation for the `Math.max` function, which failed to handle the minus zero case. This bug exemplifies the vulnerability category described in Chapter 4.5.4.

### Discussion

The results highlight the efficiency of the developed fuzzer and confirm the thesis hypothesis. The search space was reduced, allowing the identification of an exploitable bug on a home computer. However, additional computational power is needed to find more long-lived exploitable bugs. The Chrome security team, for instance, uses over 25,000 CPU cores for continuous fuzzing.

### Comparison with Other Fuzzers

The proposed fuzzer is a prototype with several mutations yet to be supported and optimizations for speed. It combines ideas from fuzzilli, DIE, and Code Alchemist, but with different approaches:

- **fuzzilli:** Uses coverage feedback and an intermediate language (IL) for mutations.
- **DIE:** Generates an initial corpus from public regression tests and applies specific mutations.
- **Code Alchemist:** Extracts small code bricks from test cases and merges them into new test cases.

The developed fuzzer applies mutations directly to JavaScript code, ensuring fine-grained and comprehensive mutations. It also uses 12 different sources to create the initial corpus and intentionally removes exceptions to increase the likelihood of generating non-exceptional test cases.

### Future Work

Future research should focus on:
- Testing the fuzzer against other JavaScript engines to improve the overall corpus.
- Identifying and integrating key learnings from exploitable vulnerabilities without public exploits.
- Improving the fuzzer to parse the Abstract Syntax Tree (AST) of test cases to correctly extract dependencies.
- Implementing more mutation strategies to further increase coverage.