FEINTING-Ghost. We adapt FEINTING to handle cases where
PROTRR has a limited storage, providing a trade-off between
the supported Rthresh and the number of counters in the
summary. With reduced storage, an attacker engaged in
FEINTING can create ghost decoys by first saturating the number
of counters. Theorem 7 proves the optimal number of decoys
for this modified attack.
Theorem 7 (FEINTING-Ghost optimality). For PROTRR with
C<(n− 1)× V + 1 counters, where n is the number of TRR
events in a tREFW, FEINTING-Ghost with C+ 1 decoys is
▸ Proof. We assume C < DT and prove that C+ 1 is the
maximum number of decoys needed. After C decoys are
hammered, the summary is full, and the next (new) hammered
decoy turns the spillover counter to one. Now, the rows that
are not in the summary are considered already hammered once
(i.e., ghost decoys) – thus reducing the number of hammers
for maintaining them. Likewise, after the next C+ 1 hammers,
optimal.
each row will be considered hammered twice, and so on. This
condition persists until the number of decoys is C. From this
point on, all hammers target rows present in the summary, and
the attack is the same as the original FEINTING.
Theorem 8 (Counters optimality). For a supported Rthresh,
given a number of TRR events, PROTRR is counter-optimal.
▸ Proof. If we remove one counter (i.e., C− 1), there would
activations until there are only C− 1 alive decoys left. These
be a ghost decoy for which an attacker does not need to waste
extra activations could be used to further increase the victim
(and decoys) to exceed Rthresh. Hence, the number of counters
needed in PROTRR is optimal. Figure 10 shows how this allows
PROTRR to massively reduce the number of counters needed,
marginally increasing Rthresh in most settings.
FEINTING-PROTRR. Summarizing, the optimal attack against
PROTRR is the adaptation of FEINTING given two new condi-
tions: summary reset and limited number of counters. We define
this attack as FEINTING-PROTRR, which is the implementation
of FEINTING-Split, where each part is performing FEINTING-
Ghost. We consider Hammer max achieved by FEINTING-
PROTRR in different settings in our evaluation in §VII.
C. Implementation of PROTRR
We implemented PROTRR in a popular 12 nm ASIC tech-
nology, to confirm its feasibility. In our evaluation (§VII), we
assessed the supported vulnerability for the number of counters
implemented in current mitigations. Our design, depicted in
Figure 11, uses a decoder logic ( 1 ) to distribute simple
micro-operations over several clock cycles. The entries update
logic ( 2 ) performs the summary update and, depending on the
given micro-operation ( 3 ): removes a row after it has been
refreshed (REF request), increases the counters of a victim
(Blast request), or resets the summary (Clear request). Within
the same cycle, two parallel combinational circuits (min/max
reduction, 4a and 4b ) determine the rows with the lowest and
highest counts for the next summary update ( 5a and 5b ). We
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:57:04 UTC from IEEE Xplore.  Restrictions apply. 
744
2K1K512256128Supported  RTHRESH# Countersd=1d=3d=5d=7d=10d=1540K30K20K10K0TABLE I: Hardware settings and DRAM geometries of our gem5 simulations.
DDR5
4800
1
8
2
16
64K 64K
2
Open Page Bankgroups
Banks/Group
FR-FCFS
Banks/Rank
256 KiB Queue Structure Per Bank
Rows/Bank
8 MiB
CPU (OoO)
Cores
8
CPU Freq.
3 GHz
L1D/I Cache 32 KiB
L2 Cache
L3 Cache
Memory Controller
Channels
Page Policy
Scheduling
DDR4
2933
1
4
4
16
DRAM
Ranks
16 GB
Total Capacity
log2(Hammer max) bits for the counter. The total size in bits
is Nbanks× Sentries×(16+⌈log2(Hammer max)⌉).
Figure 12 presents the storage size of different DDR4 and
DDR5 settings based on the geometries given in Table I. These
figures show the required size per rank to support varying levels
of device vulnerability to Rowhammer in different setups. The
blast diameter of 4 incorporates devices subject to the recently
discovered half-double attack [34]. These results illustrate how
storage can flexibly be traded-off by a higher refresh rate, a
lower TRR distance, or RFM postponing in DDR5.
DDR4. We consider a tREFW of 64 ms and 32 ms with a TRR
volume of 2, for blast diameters of 2 and 4 (Figure 12-a). We
also indicate the highest vulnerability degree as reported in
previous work [21]. We make two observations using these
results: (i) Devices that use LPDDR4 with 64 ms of tREFW
can no longer be protected against the half-double attack with
any possible integrated in-DRAM solution. We need to increase
the refresh rate to 32 ms to be able to protect these devices
with PROTRR. (ii) The TRR distance has a significant impact
on the supported vulnerability. Due to the lack of RFM support
in DDR4, this suggests that a TRR distance of one is required
for newer process technologies. In Appendix F, we present the
same analysis for a TRR volume of 4.
DDR5. Figure 12-b shows the required storage size for
DDR5 for the worst possible case with RFM postponing of
6. We refer to Figure 20 (Appendix F) for more details.
We make the following observations: (i) Thanks to the RFM
extension, PROTRR can protect DDR5 devices with drastically
lower Rowhammer thresholds. (ii) Lowering RAAIMT only
marginally increases the offered protection, suggesting that the
current set of possibilities in the latest JEDEC standard [30]
is suboptimal. (iii) All the possible setups can protect against
the most recently discovered half-double patterns.
B. Performance and energy overhead
Methodology. We evaluate PROTRR on the SPEC®2017 [57]
benchmark suite to assess its performance and energy overhead
in real-world workloads. We follow the benchmark’s guidelines
and run each benchmark with eight parallel copies (i.e.,
number of cores) to maximize the simulated load. We use
gem5 [58], a cycle-accurate hardware simulator, in conjunction
with DRAMsim3 [59], a cycle-accurate memory controller.
We implemented PROTRR in DRAMsim3, and due to the
lack of publicly available DDR5 simulators, added DDR5
support to DRAMsim3, including the new RFM command. For
benchmarking, we use the full system simulation mode of
gem5 to run Ubuntu 20.04 with the Linux kernel 5.4.49. We
follow the SMARTS methodology [60] to obtain 20 equally-
spaced checkpoints, each running 10 M instructions, for a total
of 200 M instructions in line with previous work [20], [21].
Fig. 11: PROTRR’s ASIC design. Schematic of PROTRR’s mechanisms.
implemented the summary as a standard cell memory to get
simultaneous access to all its elements for the reductions.
Integration and placement. PROTRR can replace existing
counter-based, in-DRAM TRR schemes [2], [50], [51]. Typ-
ically, control logic (excluding array decoders, Figure 1) is
placed in the center of the DRAM chip, while the rest of the
area is devoted to the DRAM cell blocks [52]–[56]. Instead,
for LPDDR devices, the control logic is placed on an edge
pad. We received confirmation from a DRAM vendor that the
TRR mechanism is placed in the peripheral logic which is part
of the control logic. They also confirmed that it is feasible to
implement 2K counters in this area in an older technology
than the one used by PROTRR. While this is enough for
almost all settings we considered in §VII, more recent process
technologies are capable of implementing more counters if
needed.
VII. EVALUATION
In this section, we present an extensive evaluation of
PROTRR. We consider three key aspects that we assess for
both DDR4 and DDR5: the impact on performance, storage
requirements, and energy consumption. We show that PROTRR
is lightweight,
incurs negligible energy and performance
overhead, and is practical for real-world deployments.
In § VII-A, we show PROTRR’s flexibility in supporting
different device constraints with a varying number of required
counters. To estimate the performance and energy overhead,
we run the SPEC2017 benchmark suite [57], as described in
§VII-B. We run the benchmarks using full system simulation,
allowing us to evaluate the impact of PROTRR under real-world
conditions. Additionally, even though PROTRR provides formal
guarantees, we verified its implementation against state-of-the-
art Rowhammer fuzzers [1], [3] and FEINTING (§VII-D). We
provide a confirmation of PROTRR’s feasibility with our ASIC
implementation (§VII-C), and lastly, we test FEINTING against
real DDR4 devices (§VII-E). We point out that PROTRR is
the first Rowhammer mitigation that is compatible with the
latest DDR standard (DDR5), and this is the first work that
evaluates the impact of RFM.
A. Storage size and supported vulnerability
The required storage of PROTRR is derived from the
number of banks (Nbanks) and the size of each summary.
A summary contains entries (Sentries), each consisting of a
row address and a counter. We consider 16-bit addresses, and
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:57:04 UTC from IEEE Xplore.  Restrictions apply. 
745
CommandRowaddressRow address(max)REFrequestBlastrequestClearrequestDecoderAddressMax reductionMin reductionEntries update logicRow addressCount125a5b31616............Rowaddress16log(S)S4a4blog(S)size. V = 2. b. DDR5 storage size. m= 6, V = 2. The results for DDR4 with tREFW = 32 ms also apply for DDR5 without RFM support.
Fig. 12: Storage size of PROTRR, per-chip values. The green arrows indicates the worst device vulnerability taken from Kim et al. [21]. a. DDR4 storage
Performance and tail latency overhead with tREFW= 32 ms. (b) DDR5. Left:
Fig. 13: Average performance impact on DDR4 and DDR5. (a) DDR4.
percentage of RFM, relative to REFs in a tREFW. Right: tail latency overhead.
The simulated hardware setup is listed in Table I. The results
are relative to a baseline, which was obtained by running the
benchmarks without any active mitigation. The simulations
consider varying (a) TRR volumes, (b) TRR distances, and
(c) tREFW durations. As recommended by JEDEC [61] to
help against Rowhammer, we assume that the REFs cannot
be postponed. We still show in § VIII how PROTRR can
support postponing REFs. We configure the memory controller
to immediately send an RFMsb upon reaching RAAIMT,
which is the worst-case scenario for performance. Note that
our performance and (dynamic) power measurements are
independent of Rthresh. A vendor should select the correct
TRR distance, tREFW (in case of DDR4), and RAAIMT (in
case of DDR5) according to the Rthresh for their device. In
contrast, the implementation-dependent area and static power
overhead depend on Rthresh which we report in §VII-C using
our ASIC implementation.
Performance. In DDR4, TRRs happen only during REF
without any performance overhead. However, as discussed, a
default tREFW of 64 ms may not provide adequate protection
with low Rowhammer thresholds. For this reason, we evaluated
the impact of changing tREFW to 32 ms (Figure 13-a). This
not only reduces the time window available for an attack but
also increases the frequency of internal TRRs. The result is an
average CPI (cycles-per-instruction) overhead of 12.5% while
increasing the tail latency of DRAM accesses by 2.5%2.
In DDR5, TRR events still happen during REF, but, if
required, the new RFM command is sent, potentially introducing
overhead. To analyze the RFM’s impact, we tested all possible
2Considering DRAM accesses that take longer than 200 cycles.
Fig. 14: Average energy impact on DDR4 and DDR5. (a) DDR4. Energy
overhead of TRRs performed during REF. (b) DDR5. Energy overhead due
to TRRs performed during REF and RFM.
combinations of RAAIMT and TRR distances. In all scenarios,
the performance overhead is always negligible, never exceeding
0.2%. To better understand the impact of RFM, we present
the percentage of RFM compared to REF commands and the
increasing tail latency with varying RAAIMT and TRR distance
in Figure 13-b (for more details, see Appendix F). We make
two observations: (i) For small RAAIMT numbers, we require
a substantial number of RFM commands (30.87% increase
compared to the baseline REF in the worst case). These RFM
commands, however, do not alter the instruction throughput
(i.e., CPI) due to the parallelism offered by the out-of-order
CPU cores and bank-level parallelism offered by RFM. In
DDR4, the REF is a per-rank command, blocking the entire
rank and substantially increasing the overhead when moving
from tREFW of 64 ms to 32 ms. (ii) While CPI (i.e., instruction
throughput) remains mostly unaffected, RFM does increase the
tail latency of DRAM accesses (1.25% in the worst case).
Energy. We analyze the energy impact of the additional
refreshes during TRR events. For each benchmark, we calculate
the energy consumption as a sum of the device’s plain energy,
the energy of the TRRs performed during REF commands,
and the energy consumed by RFM commands. To estimate the
energy of these extra TRR refreshes, we calculate the energy
required to refresh a single row and multiply it by the volume.
Figure 14-a reports the energy overhead of PROTRR in
DDR4 for a tREFW of 64 ms and 32 ms with varying TRR
distance between 1 and 15. Figure 14-b shows the energy
overhead of DDR5 for different RAAIMT and the two possible
TRR distances. We make the following observations: (i) The
energy overhead in DDR4 is always below 0.6% of the device’s
total energy. (ii) The energy overhead in DDR5 is generally
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:57:04 UTC from IEEE Xplore.  Restrictions apply. 
746
04080120160200TRR Distance = 1TRR Distance = 3TRR Distance = 5TRR Distance = 7TRR Distance = 10TRR Distance = 155k10k15k20k25kSupported device vulnerability05k10k15k20k25kSupported device vulnerability05k10k15k20k25kSupported device vulnerability05k10k15k20k25kSupported device vulnerability0a.Size [KiB]050100150200250RAAIMT=32RAAIMT=40RAAIMT=48RAAIMT=56RAAIMT=64RAAIMT=72RAAIMT=80Size [KiB]b.LPDDR4DDR4DDR3B=2  tREFW=64msB=2  tREFW=32msB=4  tREFW=32msB=4  tREFW=64msB=4 d=2B=4 d=1B=2 d=2B=2 d=15k10k15k20k25kSupported device vulnerability05k10k15k20k25kSupported device vulnerability05k10k15k20k25kSupported device vulnerability05k10k15k20k25kSupported device vulnerability0RFMs / REFs [%]D=1D=2D=1D=232404856647280RAAIMTLatency overhead [%]2013001020LatencyRFMsa.b.64msPerf. overhead: 12.5%Tail latency overhead: 2.5%32mstREFW32404856647280RAAIMT012Energy overhead [%]D=1D=21357101500.20.40.6a.Energy overhead [%]TRR distance (D)b.64ms32msFig. 15: PROTRR feasibility, per-chip values. (a) Required number of
counters for different Rthresh in DDR4 (tREFW= 64ms, d= 1) and DDR5
(TRF M = 32, d= 1). (b) ProTRR ASIC costs in terms of total area and
power consumption.
higher than for DDR4 due to the additional TRRs. However,
this is still relatively small and at 2.11% in the worst case.
(iii) In DDR5, given the same number of activations, for a
TRR distance of 2, a higher number of RFM must be sent to
compensate, increasing the energy overhead.
C. Feasibility
We implemented PROTRR in ASIC, using a popular 12 nm
technology and the Synopsys Design Compiler. Figure 15-b
reports the total area required and power consumption and
Figure 15-a shows the Rthresh that PROTRR can protect for
the number of counters. As results show, having more counters
than 1024 does not substantially increase security; therefore,