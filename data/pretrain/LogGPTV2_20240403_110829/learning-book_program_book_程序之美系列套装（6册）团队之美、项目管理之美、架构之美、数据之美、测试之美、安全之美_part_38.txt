可能会通过多种方式来解释模糊的需求。例如，在轮查评审过程中，每位审查员可能对同一条需求有不同的理解。尽管这条需求对他们每个人来说都有意义，但其含义却存在细微差异。每个审查员都可能认为：“这样是可以的。”因此，这种模糊之处可能不会被立即发现。然而，在审查过程中，一位被称为“朗读者”的团队成员会用自己的语言描述他所理解的需求含义。其他审查员可以将朗读者的解释与他们自己的理解进行比较。有时这会揭示出解释之间的差异——即需求中的模糊之处。如果这些模糊之处未能在早期识别，将会带来严重的问题。

考虑到这一点，我们决定对我们已经整理完成的SRS（软件需求规格说明书）进行审查。Janet负责将三位分析师编写的需求规格说明及相关资料编辑在一起，最终形成了50页的SRS和另外大约50页的支持材料，包括分析模型、定义和其他支持信息。

我们邀请了四位产品代言人、三位分析师以及项目的另一位利益相关者参与审查。八个人组成的审查团队规模相当大。由于我有多年组织审查的经验，因此担任了此次审查的组织者，以确保评审能够按计划进行。Devon则担任记录员，负责记录讨论中提出的问题。鉴于需要审查的材料量很大，我们意识到无法在一次会议中完成全部工作。至少可以说，若要认真检查问题，一次会议的时间是不够的。因此，我们在同一周的周一、周三和周五安排了三次审查会议，每次会议最长两个半小时。即便如此，这样的审查速度也相对较快。长时间的马拉松式会议是没有效率的，因为疲劳的眼睛很难再提供有价值的意见。

我们的审查取得了成功，尤其是在缺陷数量方面。我们现在修复的每一个缺陷都意味着将来无需花费更多成本去处理这些问题。Devon不断地跑到房间外面去拿更多的空白审查问题记录单。虽然我们在需求上已经付出了很多努力，但发现这么多缺陷仍然令人沮丧。不过我们也认识到，在这个阶段发现的每一个问题都是一个“非常有意义的问题捕获”。

结果
我们至少发现了233个缺陷和问题。大多数是轻微的，但其中一些如果不是在这个早期阶段被发现，将对项目产生重大影响。找出这么多错误让我们为付出的时间感到欣慰。显然，进行审查的成本并不低，但如果这些缺陷流入到提交给开发人员和测试人员的最终需求中，将会造成巨大的潜在损失，远远超过审查中投入的成本。

在审查会议之后，我们修正了许多审查人发现的错误。Paul和其他产品代言人都认为修改后的需求文档准确地反映了他们对化学品跟踪系统的需求，至少符合目前所知的需求。接着，我们为SRS定义了一个基线。基线并不意味着规格说明书被冻结或不允许未来更改。实际上，由于多种原因，需求会发生变化。客户可能会想起之前忘记的事情，分析师可能会想到有用的新功能，设计和编码过程中可能会发现更多的需求错误，业务本身也可能发生变化。但基线的作用是作为后续项目工作的共同基础。即使我们都承认需求并不完美，但达到这一基线里程碑让所有参与者都有一种成就感，表明我们已经完成了这个重要项目的目标。需求已经“足够好”，可以继续开发化学品跟踪系统。

后记：让我们大吃一顿！
随着需求收集过程的推进，我们发现最初与Paul交谈时遇到的障碍开始融化。他看到了我们在理解他的需求和其他CTS利益相关者的需求方面取得的实际进展。Paul观察到我们使用的新技术比以前的团队采取的方法更好，能够更有效地收集需求。最终的结果让Paul认识到，如果这些需求能够得到适当的实现，不仅将完全符合政府的报告要求，还能为不同的用户提供许多其他有价值的服务。

由于我们处理CTS需求的方式，我们也经历了一次明显的企业文化变革。在SRS基线确定后不久，Paul邀请了分析师团队、产品代言人和项目的其他关键利益相关者参加午餐庆祝会。美食佳肴让大家非常愉快，每个人都酒足饭饱才回家。与四个月前相比，Paul的心情明显好了很多。

尾声：后来发生了什么？
自1998年成为独立顾问以来，我的主要工作方式是深入客户的实际工作中。我提供培训、指导或解决客户遇到的具体问题。通常情况下，我看不到系统在我介入后的最终形态。起初对于CTS也是如此，我不清楚它后来变成了什么样子。

在我们成功发布需求后，我转向了其他工作，并很快调到了Contoso制药公司的另一个完全不同部门。两年后，我离开了Contoso，创办了自己的软件培训和咨询公司。我在培训课程中使用了来自化学制品跟踪系统的几个例子来描述需求开发过程中的技术和心得。

1999年，我在客户那里讲授一门需求课程。当我分享CTS经验时，班上的一位学员说：“嘿，我认得那个项目！”这位学员曾在市场部工作过，Contoso将部分CTS实施工作外包给了他以前工作过的公司。我对这种巧合很感兴趣，便询问他关于系统实施情况以及他以前所在公司的开发人员对CTS需求的看法。他说项目进展顺利，而需求是成功的关键因素，这让我松了一口气。

尽管开始时遇到了不少困难，但化学制品跟踪系统最终成为一个很好的案例研究。我们学会了如何选择性地、彻底地应用几种新的需求开发方法。我们找到了让不同客户代表有效参与的方法。通过合作的方式，我们享受了一些文化上的好处，Paul和其他主要客户认识到与IT代表紧密合作不仅是可能的，而且是必要的，这样才能确保最终得到合适的产品。最令人欣慰的是，这个应用程序至今仍在Contoso制药公司使用，距离上述需求开发过程已有13年之久。

有用的参考资料
1. Ambler, Scott. 1995. "Reduce Development Costs with Use-Case Scenario Testing." Software Development 3(7): 53-61.
2. Collard, Ross. 1999. "Test Design." Software Testing and Quality Engineering 1(4): 30-37.
3. Gottesdiener, Ellen. 2002. Requirements by Collaboration: Workshops for Defining Needs. Boston: Addison-Wesley.
4. Kulak, Daryl, and Eamonn Guiney. 2004. Use Cases: Requirements in Context, Second Edition. Boston: Addison-Wesley.
5. Wiegers, Karl E. 1996. Creating a Software Engineering Culture. New York: Dorset House Publishing.
6. Wiegers, Karl E. 2002. Peer Reviews in Software: A Practical Guide. Boston: Addison-Wesley.
7. Wiegers, Karl E. 2003. Software Requirements, Second Edition. Redmond, WA: Microsoft Press.
8. Wiegers, Karl E. 2006. More About Software Requirements: Thorny Issues and Practical Advice. Redmond, WA: Microsoft Press.

致谢
非常感谢以下人士提供了宝贵的意见：Jim Brosseau, Barb Cardenuto, Chris Fahlbusch, Kathy Getz, Andre Gous, Shannon Jackson, Lori Schirmer 和 Moe Stankay。

注释
刘易斯（Lewis）和克拉克（Clark）是美国的两位探险家，他们在1804年从圣路易出发，经过18个月的长途跋涉抵达太平洋，然后于1806年返回。他们的这次远行激励了许多美国人向西部迁移。

第20章 在Google的开发工作
Alex Martelli访谈录

我们认识的人都想去Google工作。我们听到了各种各样的优待——从开发人员可以花部分时间开发自己的项目，到让每位员工都感到舒适的按摩师。但是Google的开发工作是非常严谨的，Alex Martelli当时是以“高级技术主管”身份加入Google的，一直在从事软件开发的严谨一面。我们想听听他在Google是如何打造团队的。

Andrew：你是如何了解软件开发工作的？
Alex：我最初在德州仪器公司担任电子工程师，设计计算机芯片，后来转到IBM研究所。我发现自己的工作方向从硬件设计逐渐转向系统开发和微程序设计。因为在研究工作中，我们需要构建几个原型并希望这些原型能被科学家及其他目标受众使用，所以这些原型必须易于通过类似FORTRAN或APL这样的语言来使用。那些人肯定不愿意使用微代码。最后，在几年的工作转换后，我不得不接受现实：我不能再设计硬件了。我已经不清楚硬件设计和芯片技术的发展动向，于是辞去了那份工作，转行做了软件开发人员。

此后不久，我加入了一个初创企业，在那里每个人基本上是什么事情都得做。由于我是小组中经验最丰富的开发人员，自然而然地被视为管理人员，负责组织和运作团队。刚开始时，我做得并不算好。幸运的是，我没有让公司倒闭，并找到了一个懂管理的人接替我的工作，我的大部分精力又回到了软件开发上。后来，在总结了第一次管理中的错误后，我在管理岗位上再次尝试。如何在纯技术上对组织作出贡献，如何做好管理工作并发挥领导力，二者之间需要找到平衡点，我在这方面越来越适应，能力也越来越强。

2004年，我参加了Google的面试，年底收到了录用通知，提供了一份非常吸引人的职位：“高级技术主管”。在过去几年中，我一直从事这份工作，既有许多技术方面的工作，也有许多管理和领导力方面的工作。“高级”意味着我在Google没有直接负责某个软件开发团队，每个团队都有自己的主管。但我的工作是监管某个业务领域的多个团队并将它们整合在一起。

Andrew：能谈谈你刚才提到的第一次管理经历吗？发生了什么事情？
Alex：我认为影响我表现的因素与我长期以来形成的个性有很大关系，那就是我对人性始终不渝的信仰。我是经过深思熟虑才使用“信仰”这个词的，因为那是一种人们必定相信的东西。在观察世界的时候，你无法得出人性本善的结论，经验方面的证据似乎对人性本善的说法也不大支持。我当时就是抱着一种人性本善的观点。

例如，有一个人之所以加入我们公司，是因为他与我们的另一位创始人在前一家公司是同事。但是那位创始人并不是软件开发人员，所以没有意识到他带来的人实际上无法承受初创企业中的巨大压力。那个人在大公司可能干得不错，因为他承担的责任有限，波澜不惊地就可以把工作做得相当好。但是为了让初创企业生存下去，需要一种完全不同的强度、参与程度和技能。那个人几乎是在拖团队的后腿。他的生产能力是负的，他实际上是可以专心工作的。他不是个偷懒的人，但在集中精力工作三天后，别人就得花七天的时间来修复由他引入的缺陷。我不断给他第二次、第三次、第四次机会。现在回想起来，我真是太愚蠢了。我可以告诉你，在那种情况下有很多办法可以采取，但直到事后我才意识到。

最后，我不得不面对那个人，做一件对经理来说最困难的事情——同时也是让团队正常运作至关重要的事情。我不得不对他说：“虽然你从公司成立第一天就来了，但我们也只能这样做。”那是我有生以来第一次解雇别人，或者说是衷心地期望他去寻找其他工作机会。我不知道这件事让人有多么痛苦。但是为了让团队生存下去，只能这样做。就像一颗老鼠屎坏了一锅汤。如果管理人员过于乐观和信任他人，可能会导致整个团队的失败。