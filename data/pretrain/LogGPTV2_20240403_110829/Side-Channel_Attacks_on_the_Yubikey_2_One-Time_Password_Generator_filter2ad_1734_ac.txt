due to the low-pass characteristic mentioned in Sect. 4. Hence, we continued our
analysis using the EM traces that give a higher resolution in this regard.
5.2 Key Recovery using EM Traces
We performed the identical attack as in Sect. 5.1 on the (digitally demodulated)
EM traces. The resulting correlations after 800 traces for all candidates for the
ﬁrst, second, eighth and ninth key byte are exemplarily shown in Fig. 14. In
contrast to the power consumption traces, the correlation for the correct key
candidate clearly exceeds the one for the wrong candidate after already less
than 1,000 traces. Besides, the correlation peak is limited to a short instant of
approximately 160 ns, which corresponds to a clock frequency of about 6.25 MHz.
Thus, it is likely that this correlation is for one or a few instructions of the µC
only.
Again, we estimated the number of required traces to recover respective key
bytes in analogy to Sect. 5.1. The results are given in Table 2. Figure 15b in
Appendix 6.2 shows the evolution of the maximum correlation which was used
to derive the numbers given in Table 2.
As evident in Table 2, a maximum number of 500 traces is suﬃcient to fully
recover the 128-bit AES key. Due to approximately 25 % of the EM traces being
unusable, this translates to an overall number of 666 traces. Thus, only 1 h of
access to the Yubikey 2 is suﬃcient to recover the key with EM measurements,
compared to 10.5 h that would be required when using the power consumption
traces.
Besides, a tradeoﬀ between computation time and the number of traces could
be applied. An adversary may, for instance, decide to only record 300 traces, so
Fig. 14: Correlation coeﬃcient for all candidates for the key bytes 1, 2, 8, and
9 (left to right) after 800 traces. Red: correct key candidate, grey: wrong key
candidates
Key byte
# Required traces
Key byte
# Required traces
1
400
9
200
2
300
10
200
3
400
11
200
4
200
12
200
5
300
13
300
6
200
14
500
7
300
15
300
8
200
16
300
Table 2: Approximate number of required traces to recover respective bytes of
the AES key using EM traces. Metric: Ratio between correlation for correct key
candidate and second highest correlation greater than 1.1
three key bytes (1, 3, and 14) would not be (fully) recoverable. However, these
remaining three bytes, i.e., 24 bit, could be easily determined using an exhaustive
search on a standard PC within minutes. In this case, the measurement time is
reduced to 36 min for eﬀectively 400 traces in total.
6 Conclusion
Using a non-invasive side-channel attack, we are able to extract the full 128-
bit AES key stored on a Yubikey 2 with approximately 500 EM traces. The
necessary equipment has a cost of less than $ 3000 in total. Given the AES key,
an adversary is able to generate an arbitrary number of valid OTPs and thus
to impersonate the legitimate owner given that the traditional credentials have
been obtained, e.g., by means of eavesdropping, phishing, or malware. To acquire
the required number of traces, an adversary needs less than one hour of physical
access to the Yubikey. Thus, the attack could for instance be carried out during
the lunch break.
Note that a standard CPA was suﬃcient to mount our attack with a number
of traces small enough to pose a threat in the real world. Hence, we did not
further investigate more complicated (proﬁled) SCA techniques like template
attacks [6]. Such methods could further reduce the number of required traces,
however, come with additional diﬃculties due to the need for a separate training
device, cf. for instance [9]. Hence, we decided to use the more “robust” CPA, an
approach that turned out to be suﬃcient in this speciﬁc case.
The attack leaves no physical traces on the DUT. The only means by which
the attack could be detected is a (relatively high) increase of the usage counters,
cf. Sect. 2.2. Due to the fact that the volatile session counter has to reach 256
ﬁrst before the non-volatile usage counter is incremented, the EM-based attack
only increases the usage counter by two when recording 500 traces. Thus, the
presented attack does not lead to a “suspicious” change of this counter and is
very unlikely to be detected in this way.
6.1 Countermeasures
To mitigate the consequences of the attack described in this paper, countermea-
sures both on the hardware level and for the (organisation of the) backend should
be implemented. In this regard, as part of the process of responsible disclosure,
we discussed feasible approaches with the vendor Yubico.
In general, the Yubikey should of course always be treated as a second factor
and never be used as the sole means of authentication. Secondly, it should be
ensured that no two Yubikeys have the same AES key. Otherwise, obtaining
the AES key from one device would render all other devices with the same key
insecure as well. Using only the 6-byte private ID mentioned in Sect. 2.2 to
distinguish Yubikeys is hence not advisable in our opinion. Besides, especially
for sensitive applications, users should be trained to keep their Yubikey with
them at all times and report lost or stolen devices instantly so that they can be
blocked and replaced.
On the level of the hardware and embedded software of the Yubikey 2, spe-
ciﬁc countermeasures against SCA can be realised: established techniques, for
instance, randomising the execution order and the timing by shuﬄing the S-
boxes and inserting dummy operations [15] are likely to make the presented
attack much more diﬃcult and to considerably increase the number of required
traces. This in turn would reduce the threat posed by the attack: the longer
the device has to be in the hands of the adversary, the more likely it is that
the attack is noticed by the legitimate user. Due to the limitations of the 8-bit
µC used on the Yubikey 2, it is unclear whether SCA countermeasures such as
masking that involve a higher space and time overhead can be implemented.
One interesting alternative–especially for high-security applications–is the
Yubikey Neo also produced by Yubico [33]. Instead of a standard µC, the Yu-
bikey Neo employs a Common Criteria certiﬁed smartcard controller that was
speciﬁcally designed to withstand implementation attacks and thoroughly tested
in this regard. In our opinion, to protect sensitive services and data, the double
price of $ 50 compared to $ 25 for the Yubikey 2 may be a reasonable investment.
6.2 Reaction of the Vendor
Having discovered the security problem, before publication, we contacted the
vendor Yubico as mentioned before. Yubico acknowledged our results and has
taken measures to mitigate the security issues. We examined an updated ﬁrmware
(version 2.4) and found that our attacks do not apply to this improved version.
Several attempts to circumvent the new mechanisms implemented by the vendor
were unsuccessful. Thus, the resistance of the DUT against SCA seems to have
increased signiﬁcantly. This likely rules out low-complexity attacks (in terms of
the equipment and the required time for the measurements) as presented in this
paper. The following statement summarizes the reaction of the vendor Yubico:
“Yubico takes security seriously and we welcome analysis of our prod-
ucts, and are happy to engage on a technical basis for the beneﬁt of
our customers. While the YubiKey Standard was not intended to re-
sist physical attacks, we aspire to exceed expectations. After being in-
formed about preliminary results, we worked with the research team to
implement mitigations. We have incorporated this in our currently man-
ufactured product. We wish to stress that the YubiKey NEO and the
YubiKey Standard used in OATH or challenge response mode is not af-
fected. We look forward to continue work with researchers and improve
our products.”
Acknowledgments
We would like to thank Christoph Wegener for his remarks and contributions in
the course of our analysis.
References
1. D. Agrawal, B. Archambeault, J. R. Rao, and P. Rohatgi. The EM Side-Channel(s).
In Cryptographic Hardware and Embedded Systems – CHES 2002, LNCS, pages 29–
45. Springer, 2003.
2. R. Bardou, R. Focardi, Y. Kawamoto, L. Simionato, G. Steel, and J.-K. Tsay.
Eﬃcient padding oracle attacks on cryptographic hardware.
In R. Safavi-Naini
and R. Canetti, editors, Advances in Cryptology - CRYPTO 2012, volume 7417 of
LNCS, pages 608–625. Springer, 2012.
3. J. W. Bos, D. A. Osvik, and D. Stefan. Fast Implementations of AES on Various
Platforms. IACR Cryptology ePrint Archive, 2009:501, 2009.
4. E. Brier, C. Clavier, and F. Olivier. Correlation power analysis with a leakage
model. In CHES 2004, 2004.
5. P. Bright. RSA ﬁnally comes clean: SecurID is compromised, June 2011.
6. S. Chari, J. R. Rao, and P. Rohatgi. Template Attacks. In B. S. K. Jr., Çetin
Kaya Koç, and C. Paar, editors, Cryptographic Hardware and Embedded Systems
– CHES’02, volume 2523 of LNCS, pages 13–28. Springer, 2002.
7. S. Curry. Don’t Believe Everything You Read... Your RSA SecurID Token is Not
Cracked. blog entry, June 2012.
8. T. Eisenbarth, T. Kasper, A. Moradi, C. Paar, M. Salmasizadeh, and M. T. M.
Shalmani. On the Power of Power Analysis in the Real World: A Complete Break
In Advances in Cryptology – CRYPTO
of the KeeLoq Code Hopping Scheme.
2008, volume 5157 of LNCS, pages 203–220. Springer, 2008.
9. M. A. Elaabid and S. Guilley. Portability of templates. Journal of Cryptographic
Engineering, 2(1):63–74, 2012.
10. J. Grand. Hardware Token Compromises. Presentation at Black Hat USA 2004,
2004.
11. Kingpin. Attacks on and Countermeasures for USB Hardware Token Devices.
12. P. Kocher, J. Jaﬀe, and B. Jun. Diﬀerential power analysis.
13. Langer EMV-Technik. LF1 Near Field Probe Set. Website.
CRYPTO 1999, pages 388–397, 1999.
In Proceedings of
14. Langer EMV-Technik. Preampliﬁer PA 303. Website.
15. S. Mangard, E. Oswald, and T. Popp. Power Analysis Attacks: Revealing the
Secrets of Smart Cards. Springer-Verlag, 2007.
16. A. Moradi, A. Barenghi, T. Kasper, and C. Paar. On the vulnerability of FPGA
bitstream encryption against power analysis attacks: extracting keys from Xilinx
Virtex-II FPGAs. In CCS 2011, pages 111–124. ACM, 2011.
17. A. Moradi, M. Kasper, and C. Paar. Black-Box Side-Channel Attacks Highlight the
Importance of Countermeasures - An Analysis of the Xilinx Virtex-4 and Virtex-5
Bitstream Encryption Mechanism. In CT-RSA 2012, volume 7178 of LNCS, pages
1–18. Springer, 2012.
18. A. Moradi, D. Oswald, C. Paar, and P. Swierczynski. Side-channel attacks on
the bitstream encryption mechanism of Altera Stratix II: facilitating black-box
In Proceedings of the ACM/SIGDA
analysis using software reverse-engineering.
international symposium on Field programmable gate arrays, FPGA ’13, pages 91–
100, New York, NY, USA, 2013. ACM.
19. D. Oswald and C. Paar. Breaking Mifare DESFire MF3ICD40: Power Analysis
and Templates in the Real World.
20. D. Oswald and C. Paar. Improving side-channel analysis with optimal linear trans-
forms. In S. Mangard, editor, Smart Card Research and Advanced Applications,
volume 7771 of LNCS, pages 219–233. Springer, 2013.
21. K. Paterson and N. AlFardan. On the Security of RC4 in TLS. Website, March
2013.
22. Pico Technology. PicoScope 5200 USB PC Oscilloscopes, 2008.
23. K. S. Shanmugam. Digital & Analog Communication Systems, chapter 8.3.2. Wiley-
24. Sunplus Innovation Technology Inc. http://www.sunplusit.com.
25. L. Vamanu. Formal Analysis of Yubikey. Master’s thesis, INRIA, 2012.
26. E. W. Weisstein. Variance. Mathworld - A Wolfram Web Resource, December
27. Yubico. www.yubico.com.
28. Yubico.
29. Yubico.
30. Yubico.
31. Yubico. Yubikey Security Evaluation Version 2.0.
32. Yubico. The YubiKey Manual. Yubico, May 2012.
33. Yubico. YubiKey NEO. Website, 2013.
http://www.yubico.com/products/services-software/personalization-tools/.
https://www.youtube.com/watch?v=s8_I1-ErZSQ.
http://www.yubico.com/about/reference-customers/department-defence/.
2010. http://mathworld.wolfram.com/Variance.html.
tool.
manufactured.
of Defense.
Yubico Reference Customers: Department
India, 2006.
Download
How
of
personalisation
YubiKeys
are
Correlation for All Key Bytes
(a) Power measurements
(b) EM measurements
Fig. 15: Evolution of the maximum correlation (vertical axis) over the number
of used traces (horizontal axis) for all key bytes (left to right, top to bottom).
Red: Correct key candidate