C2 = (hu · Gu) · (cid:96)=m(cid:89)
· (v · (cid:89)
xj
v
(cid:80)
(cid:33)r
(cid:89)
= (gu)r+(cid:80)
(cid:33)r(cid:89)
rv
v
(cid:89)
(cid:89)
rv
v
(cid:80)
(cid:89)
(cid:89)
r+(cid:80)
v
v
(cid:89)
(cid:96)=m(cid:89)
the values xi, excepted xik,t, that appears in hu · Gu = (v ·(cid:81)
gn+1−j)r+(cid:80)
n+1−j = hn+1−j. Note that B knows all
(cid:80)
xj . To generate
xj · e(gn, h1). It then randomly
session keys, B ﬁrst computes, for all i (cid:54)= k, Ki = e(gn, g1)
chooses a bit b $← {0, 1} and sets Kk,b = T · e(gn, h1) and picks a random Kk,1−b in G. It outputs
Note that, for i (cid:54)= k, Ki = e(gn+1, g)r+(cid:80)
(Hdr, K1, . . . , Kk−1, Kk+1, . . . , Km, Kk,0, Kk,1) as the challenge to A.
xj , and, if T is the correct value, Kk,b = e(gn+1, G) ·
(cid:32)
(cid:81)
v
(cid:89)
v
(cid:89)
We used the following notations and relations h = gr and gr
r+(cid:80)
(cid:80)
gu
gn+1−j
(cid:89)
j∈Sk
j∈Si
gn+1−j
gn+1−j
gn+1−j
=
=
=
j∈S(cid:96)
j∈S(cid:96)
xj
(cid:96)=1
j∈S(cid:96)
gn+1−j
j∈S(cid:96)
j∈S(cid:96)
xj
gn+1−j
gn+1−j
gn+1−j
(cid:96)=1
(cid:96)(cid:54)=k
(cid:96)=1
(cid:96)(cid:54)=k
(cid:96)=1
(cid:96)(cid:54)=k
gn+1−j
i∈Sk
i∈Sk
i∈Sk
j∈S(cid:96)
j∈S(cid:96)
gn+1−j
j∈Sk
j∈Sk
j∈Sk
(cid:80)
j∈Sk
xj ) · e(gn+1, gr) = e(gn+1, g)r+(cid:80)
j∈Si
j∈Sk
xj .
j∈Sk
j∈S(cid:96)
e(gn, h1) = e(gn+1, g
j∈S(cid:96)
xj
j∈S(cid:96)
xj
j∈Sk
=
9
Guess. A outputs its guess b(cid:48) for b. If b(cid:48) = b the algorithm B outputs 0 (indicating that T =
e(gn+1, G)). Otherwise, it outputs 1 (indicating that T is random in G1). From the above remark,
if T is the correct value, Pr[B = 1] = Pr[b(cid:48) = b] = (Advind(A) + 1)/2. However, if T is a random
value, Pr[B = 1] = 1/2: Advdbdhe(B) = Advind(A)/2.
(cid:117)(cid:116)
5 Multi-Channel Broadcast Encryption II – MIBE2
We now improve the previous scheme to allow encryption and decryption queries. To this aim, we will
need a random oracle.
5.1 Dummy-Helper Technique
instead of a deterministic(cid:80)
First, in order to achieve semantic security, we still have to embed the critical element from the
n − BDHE instance in the challenge header related to the speciﬁc target set Sk. In the previous scheme,
it was implicitly embedded in the Xik,j , or at least in one of them. But then, if this element is involved
in a decryption query, the simulator cannot answer, hence the limitation for the adversary not to ask
decryption queries. For the same reason, it was not possible to simulate encryption queries with this
critical value.
i∈Sj
Using a random oracle, it is possible to embed this element at the challenge time only, and then,
xi one can use a random yj implicitly deﬁned by Yj given by a random
oracle. The knowledge of the discrete logarithm yj (excepted in the challenge ciphertext), the simulator
is able to answer all encryption queries, but this is still not enough to answer decryption queries: the
simulator has no idea about the random scalar r involved in the ciphertext, whereas it as to compute
e(gn+1, g)r. But this can be done by adding a dummy set for which the session key can be computed
by the simulator. In this case, we apply the dummy-helper technique to prove the security.
5.2 Description
Setup(λ): it takes as input the security parameter λ, and generates the global parameters param of
the system as follows: Let G be a bilinear group of prime order p; pick a random generator g ∈ G
and a random scalar α ∈ Zp; compute gi = gαi ∈ G for i = 1, 2, . . . , 2n; pick a random scalar
γ ∈ Zp and set v = gγ ∈ G and dn = vαn. The algorithm also uses a random oracle H onto G.
The master key is MSK = (g, v, α, γ), the private encryption key is EK = MSK and the public
global parameters are (g1, . . . , gn, gn+2, . . . , g2n, dn), whereas the private decryption key of user
i ∈ {1, . . . , n} is di = vαi. These decryption keys are sent by the Extract algorithm.
Encrypt(S1, . . . , Sm, EK): Pick a random scalar r ∈ Zp; set Sm+1 = {n}, for each set Si, for i =
1, . . . , m + 1 compute Yi = H(i, gr) (Yi = gyi, for some unknown scalar yi), and
i = 1, . . . , m + 1
Ki = e(gn+1, Yi) · e(gn+1, g)r = e(gn+1, g)r+yi,
Eventually compute Hdr = (C1, C2, C3) as follows:
Y
i
γ+(cid:80)
C1 = gr
i=m+1(cid:89)
C2 =
C3 = H(C1, C2)r
i=1
v · (cid:89)
j∈Si
r =
v · (cid:89)
j∈Si
i=m+1(cid:89)
i=1
r+yi
gn+1−j
αn+1−j
j∈Si
·
gn+1−j
Note that the broadcaster knows both α and γ to compute C2. It outputs (Hdr, K1, . . . , Km+1).
10
Decrypt(S1, . . . , Sm, Hdr, i, di, k): Set Sm+1 = {n}, parse Hdr = (C1, C2, C3). If i ∈ Sk then one ﬁrst
checks whether e(C1,H(C1, C2)) = e(g, C3), computes Yi = H(i, gr), for i = 1, . . . , m + 1, and
computes
Kk =
=
=
=
j∈Sk
j(cid:54)=i
e(di ·(cid:81)
e(vαi · ((cid:81)
e(gαi, (v ·(cid:81)
e(vαi · ((cid:81)
e((v ·(cid:81)
e((v ·(cid:81)
j∈Sk
j∈Sk
j(cid:54)=i
j∈Sk
j(cid:54)=i
j∈Sk
j(cid:54)=i
(cid:96)=1
(cid:96)=1
(cid:96)(cid:54)=k
j∈S(cid:96)
j∈S(cid:96)
e(gi, C2)
gn+1−j+i, C1 · Yk) ·(cid:81)(cid:96)=m+1
(v ·(cid:81)
e(gαi,(cid:81)(cid:96)=m+1
gn+1−j)αi, gr+yk ) ·(cid:81)(cid:96)=m+1
· (cid:96)=m+1(cid:89)
· (cid:96)=m+1(cid:89)
gn+1−j)r+yk )
j∈Sk
gn+1−j)αi, gr+yk )
e(di ·(cid:81)
e(vαi · ((cid:81)
e(gαi, (v ·(cid:81)
e(vαi · ((cid:81)
e((v ·(cid:81)
e((v ·(cid:81)
gn+1−j)αi, gr+yk )
gn+1−j)αi, gr+yk )
gn+1−j)r+y(cid:96))
j∈S(cid:96)
j∈S(cid:96)
(cid:96)=1
(cid:96)(cid:54)=k
(cid:96)=1
(cid:96)(cid:54)=k
(cid:96)=1
(cid:96)(cid:54)=k
gn+1−j+i, C1 · Y(cid:96))
gn+1−j)αi, gr+y(cid:96))
gn+1−j)r+y(cid:96))
j∈S(cid:96)
gn+1−j)αi, gr+y(cid:96))
j∈S(cid:96)
j∈S(cid:96)
gn+1−j)αi, gr+y(cid:96))
gn+1−j)αi, gr+y(cid:96))
= e(gαi
n+1−i, gr+yk ) = e(gn+1, gr+yk ) = e(gn+1, g)r+yk
Note that di = vαi, gn+1−j+i = gαi
n+1−j, and gαi
n+1−i = gn+1.
5.3 Security
Theorem 9. The MIBE2 system achieves the strong selective security under the DBDHE assumption
in G. More precisely, if there are n users,
Advs−ind(t, qC, qD, qE) ≤ 2 × Advdbdhe(t(cid:48), n) + 2 × Succcdh(t(cid:48)(cid:48)) + 2/p,
for t(cid:48) ≤ t + (nqC + nmqD + nmqE)Te + (mqD + mqE)Tp + mqDTlu + O(1) and t(cid:48)(cid:48) ≤ t + (qC + qD +
nmqE)Te + (qD + mqE)Tp + qDTlu + O(1), where Te, Tp are the time complexity for computing an
exponentiation, a pairings, Tlu is the time complexity for a look up in a list, and m is the maximum
number of channels in the system.
Proof. We organize our proof in three games:
1. Game 0: The real strong selective security game between an adversary and a challenger.
2. Game 1: This is similar to Game 0 with a following exception: if we denote Hdr = (C1, C2, C3) the
challenge header, then any decryption query on a diﬀerent header Hdr(cid:48) = (C1, C(cid:48)
3), but with
the same C1, we answer ⊥ (i.e. invalid ciphertext). We can shown that this exception happens
with negligible probability under the CDH assumption.
3) by ⊥ and the
others using either a valid decryption key or dn. Using the programmability of the random oracle,
and thus the knowledge of the yi, one can easily simulate the encryption queries. Eventually, the
semantic security then relies on the DBDHE assumption.
3. Game 2: We can now safely answer all decryption queries Hdr(cid:48) = (C1, C(cid:48)
2, C(cid:48)
2, C(cid:48)
Game 1: In this game, we know all the secret keys, but answer ⊥ to a decryption query Hdr(cid:48) =
3), with the same ﬁrst C1 as in the challenge header. Our algorithm B is given a CDH
(C1, C(cid:48)
instance g, A = gr∗
, B, and should answer C = Br∗
. It runs the adversary A:
2, C(cid:48)
3 = H(C1, C(cid:48)
2)r∗
11
– since we consider selective attacks only, the target sets are known from the beginning, and B can
thus ﬁrst generate the challenge header using r∗ as random scalar, without knowing it: C1 = A.
Since B knows MSK, and namely α and γ, it can compute the appropriate C2: vr∗
= Aγ and
i = Aαi. It then programs H(C1, C2) = gu for a random scalar u and sets C3 = Au. The triple
gr
(C1, C2, C3) is a perfect header;
m(cid:48)+1, k(cid:48), Hdr(cid:48)) in which C(cid:48)
= Br∗·t for a known value t, one can extract C = Br∗
– answers all the hash queries H(A, X), for any X, by Bt for some randomly chosen scalar t;
– answers all the other queries with MSK.