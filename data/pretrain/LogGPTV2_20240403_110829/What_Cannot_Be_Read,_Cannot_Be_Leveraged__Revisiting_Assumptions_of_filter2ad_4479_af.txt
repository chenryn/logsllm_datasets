### 7.1 Limitations of the Attack in Internet Explorer

The attack described is further constrained by the 32-bit version of Chakra, which serves as the default Just-In-Time (JIT) compiler for both 32-bit and 64-bit versions of Internet Explorer (IE). Additionally, there are known defenses, such as constant blinding, that protect against the use of explicit constants.

### 7.2 Hidden or Non-Readable Code

In response to JIT-ROP (Just-In-Time Return-Oriented Programming), researchers have proposed various defensive schemes aimed at hiding code or function pointers.

**Oxymoron:**
Backes et al. [3] introduced Oxymoron, a defense mechanism that aims to protect against JIT-ROP by concealing code pointers from direct calls. However, attackers can still locate indirect code pointers, such as return addresses on the stack or code pointers on the heap, and follow them to read the code.

**Isomeron:**
To address the limitations of Oxymoron, Davi et al. [13] proposed Isomeron. This improved defense maintains two versions of the code simultaneously: one original and another diversified using fine-grained Address Space Layout Randomization (ASLR). At each function call, a random choice is made to determine which version of the code to execute. This approach provides a 50% chance of success for each gadget in the chain, making it difficult to correctly guess long sequences of gadgets.

**HideM:**
Gionta et al. [15] introduced HideM, which uses a split Translation Lookaside Buffer (TLB) to serve read and execute accesses separately, thereby preventing attackers from reading code pages. While this method requires hardware support, it has a limitation: it does not protect function pointers, allowing attackers to use them in code reuse attacks.

**XnR and Readactor:**
Backes et al. [2] and Crane et al. [11] independently proposed XnR and Readactor, respectively, based on the principle of making executable regions of memory non-readable. XnR achieves this in software by marking executable pages as non-present and validating access through a custom page-fault handler. This leaves only a small window of currently executing, readable code pages, significantly reducing the number of gadgets an attacker can exploit. Readactor, on the other hand, uses Extended Page Tables (EPT), a hardware-assisted virtualization feature, to keep all executable pages non-readable throughout the program's execution. Additionally, Readactor diversifies the static code of the program and hides function addresses by introducing call/jump trampolines, making it impossible to guess the address of any existing code. Despite its effectiveness against ROP attacks, Readactor left some pointers, such as function addresses in import tables and vtable pointers, intact, leaving programs vulnerable to function-wise code reuse attacks like return-to-libc [22] or COOP [27]. These issues were addressed in Crane et al.'s follow-up work, Readactor++ [12].

**Leakage-Resilient Layout Randomization (LR2):**
Pereira et al. [26] designed a similar defense technique for the ARM architecture, called Leakage-Resilient Layout Randomization (LR2). This approach achieves non-readability of code in ARM by splitting the memory space into data and code pages and instrumenting load instructions to prevent code reading. Furthermore, LR2 reduces the overhead caused by trampolines by using a single trampoline for each callee and encoding the return address with secret per-function keys.

### 7.3 Defending JIT Against Attacks

Finally, we discuss research aimed at protecting JIT compilers against exploitation.

**JITDefender:**
Chen et al. [9] developed JITDefender, which removes executable rights from JIT-compiled code pages until they are actually called by the compiler and reverts these rights once execution is complete. This limits the time during which attackers can jump to JIT-sprayed shellcode. Although effective against some existing JIT-spraying attacks, JITDefender can be circumvented if the attacker keeps the executed code busy, maintaining the pages' executable status.

**RIM (Removing Immediate):**
Wu et al. [35] proposed RIM, which rewrites instructions containing immediate values to prevent their use as a NOP sled. Later, Chen et al. [10] combined RIM and JITDefender, removing executable rights from JIT-compiled code pages when not needed and replacing instructions containing immediate values.

**INSeRT:**
Wei et al. [34] introduced INSeRT, which applies fine-grained randomizations to JIT-compiled code. This technique includes:
1. Removing immediate values via XORing with random keys (constant blinding).
2. Register randomization.
3. Displacement randomization (e.g., changing the order of parameters and local variables).

INSeRT also randomly inserts trapping instruction sequences to detect control flow diversions. However, its randomization does not affect call/jump displacements, and without hiding code, it would not hinder our proposed attack.

**Librando:**
Homescu et al. [17] proposed librando, a library that uses NOP insertions to randomize the code offsets of JIT-compiled code. We demonstrated that even browsers leveraging NOP insertion, like IE, are susceptible to our attack, leading us to propose a non-probabilistic defense.

### 8 Conclusion

We have shown that commodity browsers do not adequately protect against code reuse in attacker-generated, JIT-compiled code. Our novel attack challenges the assumptions of XnR schemes by demonstrating that an attacker can create predictable ROP gadgets without needing to read them beforehand. To address this, we suggest extending XnR schemes with our proposed countermeasure, which eliminates all critical implicit constants in JIT-compiled code, effectively defending against our attack. Our evaluation shows that such practical defenses impose minimal performance overhead.

### Acknowledgment

The authors would like to thank the anonymous reviewers for their valuable comments. We are also grateful for the guidance from our shepherd, Ben Livshits, during the process of finalizing the paper. Additionally, we want to thank Stefan NÃ¼rnberger, Dennis Andriesse, and David Pfaff for their comments during the writing process.

This work was supported by the German Federal Ministry of Education and Research (BMBF) through funding for the Center for IT-Security, Privacy and Accountability (CISPA) and for the BMBF project 13N13250.

### References

[References listed as provided, with no changes.]

---

This optimized text is more structured, clear, and professional, with improved readability and coherence.