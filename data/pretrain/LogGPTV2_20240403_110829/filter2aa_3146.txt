### 开发Shiro蜜罐遇到的一些问题 - Depy

**日期**: 2022年9月14日  
**类别**: 网络安全

#### 前情概要
我曾撰写过一篇关于如何在PHP网站上实现Shiro功能的文章，发表于FreeBuf平台：[链接](https://rce.ink/index/view/366.go)。在该文章中，我介绍了如何通过设置特定的key来模拟真实的爆破效果。如图所示：

![示例图片]

这样做可以让攻击者误以为这是一个基于Shiro框架的网站，并且能够被爆破出一个有效的key。为了进一步增强仿真效果，我还修改了`PHPSessionID`为`JSESSIONID`，并通过脚本伪静态将后缀更改为`.jsp`。

#### 后续开发
自那之后，我转向了其他项目。直到最近，我才开始对指定利用链检测、命令回显等功能进行完善。为此，我编写了一些PHP代码以配合攻击者的工具进行利用链测试，具体可以实现以下效果：
- 当攻击者发现可以使用某个CC链进行攻击时，他们通常会尝试执行命令。
- 我则需要编写相应的脚本来响应这些场景，并提供相应的回显信息。这里特别针对的是j1anfen师傅开发的shiro-attack工具。我们反编译了工具中的`AttackService.class`，其核心逻辑如下：
  - 将序列化的恶意`attackRememberMe`放入cookie。
  - 对用户输入的命令进行Base64编码并放入请求头。
  - 在响应包的body中查找字符串`$$$`分隔的数据，并提取第二组数据作为命令执行的结果。
  - 最后对结果进行Base64解码以获取命令回显。

然而，在实际操作过程中遇到了一些问题。当我尝试执行命令时，脚本抛出了下标越界的错误，这意味着响应包并不是预期的`$$$data$$$`格式。

#### 调试过程
1. **代理设置**:
   - 工具支持设置代理，我挂载了一个Burp Suite代理，此时响应是正常的。
   - 但在关闭代理的情况下，响应数据变成了乱码，这让我非常困惑。使用自己编写的工具或浏览器访问时一切正常，唯独在使用该工具时出现问题。

2. **断点调试**:
   - 为了找到问题所在，我在`String responseText = this.bodyHttpRequest(header, "");`处设置了断点。
   - 发送命令执行指令后，观察到在代理请求下响应正常，而在关闭代理的情况下数据变成乱码。

3. **原因分析**:
   - 经过仔细检查，我发现响应包中有一个`Content-Encoding: gzip`的头部信息。这表明响应数据已被压缩。
   - 回忆起我的网站使用的是Nginx服务器，于是检查配置文件，确认确实启用了Gzip压缩。将配置项从`on`改为`off`后，标头消失，命令执行恢复正常。

#### 结论
1. Burp Suite等工具支持自动对响应进行Gzip解压缩。
2. `URLConnection`可能不支持自动Gzip解压，或者版本较低。建议在使用j1anfen师傅的工具时，直接挂载Burp Suite代理以避免此类问题。

通过以上步骤，我们成功解决了响应数据乱码的问题，并能够愉快地构造虚假的命令执行结果，从而继续迷惑攻击者。