Modeling,AdaptationandPersonalization,UMAP2020,NewYork,NY,USA,pp.
313–317. Association for Computing Machinery (2020). https://doi.org/10.1145/
3340631.3394874
32. Milicevic,A.K.,Nanopoulos,A.,Ivanovic,M.:Socialtagginginrecommendersys-
tems: a survey of the state-of-the-art and possible extensions. Artif. Intell. Rev.
33(3), 187–209 (2010)
33. Resnick, P., Varian, H.R.: Recommender systems. Commun. ACM 40(3), 56–58
(1997). https://doi.org/10.1145/245108.245121
378 M. H. Rimaz et al.
34. Ricci, F., Rokach, L., Shapira, B.: Recommender systems: introduction and chal-
lenges. In: Ricci, F., Rokach, L., Shapira, B. (eds.) Recommender Systems Hand-
book,pp.1–34.Springer,Boston,MA(2015).https://doi.org/10.1007/978-1-4899-
7637-6 1
35. Ricci, F., Rokach, L., Shapira, B., Kantor, P.B. (eds.): Recommender Systems
Handbook. Springer, Boston (2011). https://doi.org/10.1007/978-0-387-85820-3
36. Rimaz, M.H., Elahi, M., Bakhshandegan Moghadam, F., Trattner, C., Hosseini,
R., Tkalˇciˇc, M.: Exploringthe powerof visual featuresfor the recommendation of
movies. In: Proceedings of the 27th ACM Conference on User Modeling, Adapta-
tion and Personalization, pp. 303–308 (2019)
37. Rubens,N.,Elahi,M.,Sugiyama,M.,Kaplan,D.:Activelearninginrecommender
systems.In:Ricci,F.,Rokach,L.,Shapira,B.(eds.)RecommenderSystemsHand-
book, pp. 809–846. Springer, Boston (2015). https://doi.org/10.1007/978-1-4899-
7637-6 24
38. Schedl, M., Zamani, H., Chen, C.-W., Deldjoo, Y., Elahi, M.: Current challenges
and visions in music recommender systems research. Int. J. Multimed. Inf. Retr.
7(2), 95–116 (2018). https://doi.org/10.1007/s13735-018-0154-2
39. Shepitsen,A.,Gemmell,J.,Mobasher,B.,Burke,R.:Personalizedrecommendation
insocialtaggingsystemsusinghierarchicalclustering.In:Proceedingsofthe2008
ACM Conference on Recommender Systems, pp. 259–266. ACM (2008)
40. Tkalˇciˇc, M., Maleki, N., Pesek, M., Elahi, M., Ricci, F., Marolt, M.: A research
tool for user preferences elicitation with facial expressions. In: Proceedings of the
Eleventh ACM Conference on Recommender Systems, pp. 353–354. ACM (2017)
41. Tkalˇciˇc, M., Maleki, N., Pesek, M., Elahi, M., Ricci, F., Marolt, M.: Prediction
of music pairwise preferences from facial expressions. In: Proceedings of the 24th
International Conference on Intelligent User Interfaces, IUI 2019, New York, NY,
USA,pp.150–159.AssociationforComputingMachinery(2019).https://doi.org/
10.1145/3301275.3302266
42. Vlachos, M., Duenner, C., Heckel, R., Vassiliadis, V.G., Parnell, T., Atasu, K.:
Addressinginterpretabilityandcold-startinmatrixfactorizationforrecommender
systems. IEEE Trans. Knowl. Data Eng. 31, 1253–1266 (2018)
43. Wang,L.,Zeng,X.,Koehl,L.,Chen,Y.:Intelligentfashionrecommendersystem:
fuzzylogicinpersonalizedgarmentdesign.IEEETrans.Hum.-Mach.Syst. 45(1),
95–109 (2015)
44. Xu,H.,Goonawardene,N.:Doesmoviesoundtrackmatter?Theroleofsoundtrack
in predicting movie revenue. In: Siau, K., Li, Q., Guo, X. (eds.) 18th Pacific Asia
Conference on Information Systems, PACIS 2014, Chengdu, China, 24–28 June
2014, p. 350 (2014). http://aisel.aisnet.org/pacis2014/350
Scalable Online Conformance Checking
Using Incremental Prefix-Alignment
Computation
B
Daniel Schuster1( ) and Gero Joss Kolhof2
1 Fraunhofer Institute for Applied Information Technology,
Sankt Augustin, Germany
PI:EMAIL
2 RWTH Aachen University, Aachen, Germany
PI:EMAIL
Abstract. Conformance checking techniques aim to collate observed
process behavior with normative/modeled process models. The major-
ity of existing approaches focuses on completed process executions,
i.e., offline conformance checking. Recently, novel approaches have been
designedtomonitorongoingprocesses,i.e.,onlineconformancechecking.
Such techniques detect deviations of an ongoing process execution from
anormativeprocessmodelatthemomenttheyoccur.Thereby,counter-
measures can be taken immediately to prevent a process deviation from
causing further, undesired consequences. Most online approaches only
allowtodetectapproximationsofdeviations.Thiscausestheproblemof
falsely detected deviations, i.e., detected deviations that are actually no
deviations. We have, therefore, recently introduced a novel approach to
computeexactconformancecheckingresultsinanonlineenvironment.In
this paper, we focus on the practical application and present a scalable,
distributed implementation of the proposed online conformance check-
ing approach. Moreover, we present two extensions to said approach to
reduceitscomputationaleffortanditspracticalapplicability.Weevalu-
ate our implementation using data sets capturing the execution of real
processes.
· ·
Keywords: Process mining Conformance checking Process
· ·
monitoring Event streams Streaming platform
1 Introduction
To achieve operational excellence, accurate knowledge of the different processes
executed within one’s company is of utmost importance. Today’s information
systems accurately track and store the executions of said processes, i.e., event
data. The field of process mining [3] deals with the analysis of such event data
to increase the overall knowledge and insights about the execution of a process.
c SpringerNatureSwitzerlandAG2021
H.Hacidetal.(Eds.):ICSOC2020Workshops,LNCS12632,pp.379–394,2021.
https://doi.org/10.1007/978-3-030-76352-7_36
380 D. Schuster and G. J. Kolhof
Fig.1.Ideaofonlineconformancechecking.Eventsareobservedovertime,e.g.,activ-
ity “a” was executed for process instance “c 1”. Upon receiving an event, we check if
the newly observed event causes a deviation w.r.t. a reference model [21]
In conformance checking [9], the goal is to assess to what degree a given
process model describes the captured event data, i.e., allowing us to assess com-
pliance and adherence to predefined policies. Most approaches in conformance
checking are offline techniques. Thus, historical event data are extracted and
analyzed.Whereasthistypeofanalysisishelpfultogainabetterunderstanding
of a process’ execution and to audit the past execution, it does not allow one
to actively intervene in running process executions. Consider Fig.1, where we
visualize the idea of process monitoring. By applying online conformance check-
ing, we are actively able to detect and pinpoint faulty process executions and
communicate such deviations to the process owner.
Work covering the notion of online conformance checking is roughly sub-
divided into two categories. First, techniques that indicate (non-)conformance
on the basis of abstractions of the process models and/or the event data [6–
8]. Secondly, techniques that do not work on abstractions of the input [21,22].
Clearly,abstractionshelpasafirstindicatorof(non-)compliance,however,they
remain inaccurate, e.g., “wrongly detected” deviations. Whereas the techniques
computing exact results enable us to detect and understand non-conformance
issues more accurately. However, for practical applications one needs to resort
to approximation schemes because of the computational time involved.
Inpreviouswork[21],wepresentedanapproachforincrementallycomputing
prefix-alignmentsoneventstreams,i.e.,anexacttechniquetodetectdeviations.
Moreover,weshowedthattheapproachoutperformsanexistingstate-of-the-art
approximation technique [22]. The main focus of the previous work, however, is
onthetheoreticalfoundations.Weshowedthatwecanefficientlycomputeprefix-
alignments on an event stream by continuing a shortest path problem based on
an extended search space upon receiving a new event. In this paper, we focus
on the practical application of the presented approach. Therefore, we present a
scalableanddistributedimplementationoftheapproach.Inaddition,wepresent
extensions that improve the calculation time of the approach to enhance its
practical applicability. Finally, we demonstrate the practical applicability of our
approach by applying it to event streams from real-life processes.
Scalable Online Conformance Checking 381
The remainder is structured as follows. In Sect.2, we present related work.
In Sect.3, we present preliminaries. In Sect.4, we present an implementation
of the incremental prefix-alignment computation and extensions improving the
practical applicability by reduced computational effort. In Sect.5, we evaluate
our implementation. Section6 concludes this paper.
2 Related Work
Process mining comprises a variety of different techniques such as: process dis-
covery, conformance checking, process enhancement and enrichment techniques.
For an overview, we refer to [3]. Next, we focus on conformance checking.
Token-based replay [20] and footprint comparison [3] are one of the first
techniquesintheareaofconformancechecking.Bothtechniqueshavedrawbacks
described in [3]. Therefore, alignments have been introduced [2,4] that map
traces onto an acceptable path of a given process model. Moreover, alignments
indicate mismatches between observed and modeled behavior. The problem of
findinganalignmentwasshowntobereducibletoashortestpathproblem[4,5].
The previously mentioned techniques are designed for offline usage. Thus,
deviationscanonlybedetectedpost-mortem,i.e.,aftertheprocessinstancehas
already finished. In [22] an approach was presented to monitor ongoing process
executionsbasedoneventstreams.Essentially,aframeworkwasintroducedthat
computes prefix-alignments for ongoing processes each time a new activity has
been performed. Moreover, the framework includes multiple options to decrease
computational effort; in return, false negatives in terms of deviation detection
may arise. In [21] it was shown that prefix-alignments can be computed in an
online setting by continuing a shortest path search on an extended search space
upon receiving a new event. Moreover, this approach guarantees optimal prefix-
alignments. Thus, false deviations w.r.t. deviation detection cannot occur.
In [8] an approach was presented that computes the conformance on event
streams, too. In contrast to the prefix-alignment approaches, conformance of
a process execution is computed based on behavioral patterns that describe
control flow relations between activities. Furthermore, this approach is suited
for partial and for already running process executions where past information
on such process executions is not available. In return, it uses abstractions, i.e.,
behavioral patterns, of the process model and the event log that leads to a loss
of expressiveness in the deviation explanation. Another approach calculates an
extendedtransitionsystemforagivenprocessmodelinadvance.Suchextended
transitionsystemallowsforreplayingtheongoingprocess[6].Costsareattached
to the edges in an extended transition system, and replaying a divergent, non-
compliant process instance leads to costs greater than zero.
3 Preliminaries
A multiset B over a set X contains an arbitrary number of each element
in X. The set of all possible multisets over a set X is denoted by B(X).
382 D. Schuster and G. J. Kolhof
Fig.2. Visualization of an event stream
Forinstance,[x5,y]∈B {x,y,z} contains5timesx,onceyandnoz.Asequence
σ of length n over a set X assigns an element to each index in {1,...,n}, i.e.,
σ: {1,...,n}→X. We let |σ| denote the length of σ. The set of all possible
sequences over a set X is written as X∗, e.g., a,a,b∈{a,b,c,d}∗.
3.1 Event Data and Event Streams
Today’s information systems deployed in organizations capture the execution of
(business) processes in great detail. These systems record the executed activ-
ity, the corresponding process instance within the activity was executed and
potentially many other attributes. We refer to such data as event data.
In this paper, we assume an (infinite) event stream. Each event contains
information as described above, i.e., it describes the execution of an activity
within a process instance/case. In this paper, however, we are only interested
in the label of the executed activity, the case-id of the corresponding process
instance and the order of events. Consider Fig.2 for an example event stream.
Next, we formally define an event stream.
Definition 1 (Event; Event Stream). Let C denote the universe of case
identifiers and A the universe of activities. An event e describes the execution
of an activity a∈A in the context of a process instance identified by c∈C. An
event stream S is a sequence of events, i.e., S∈(C×A)∗.
3.2 Process Models
Process models allow us to describe process behavior. In this paper, we focus
on sound Workflow nets [1]. Workflow nets (WF-nets) are a subclass of Petri
nets [18]andsoundWF-netsareasubclassofWF-netswithpreferredbehavioral
properties guaranteeing theabsenceofdeadlocks,livelocks andotheranomalies.
A Petri net N=(P,T,F,λ) consists of a set of places P, transitions T and
arcs F =(P×T)∪(T×P) connecting places and transitions. Given the universe
of activities A, the labeling function λ: T →A∪{τ} assigns an (possibly invisi-
ble,i.e.,τ)activitylabeltoeachtransition.Forinstance,λ(t )=aandλ(t )=τ
1 2
(Fig.3).
Scalable Online Conformance Checking 383
Fig.3.ExampleWF-netN 1 withvisualizedinitialmarkingM i=[p 1]andfinalmarking
M f=[p 3] describing a simplified ordering process
a b c a b c a  b  c
t1  t4 t1 t3   t2  t3 
Fig.4. Three possible alignments for N 1 (Fig.3) and the trace a,b,c
AstateofaPetrinetisdefinedbyitsmarking M thatisdefinedasamultiset
of places, i.e. M∈B(P). Given a Petri net N and a marking M, a marked net
is written as (N,M). We write M i/M f to represent the initial/final marking.
For x∈P∪T, we define the set of all elements having an incom-
ing arc from x, i.e., x•= {y∈P∪T |(x,y)∈F}. Symmetrically, we define
•x={y∈P ∪T |(y,x)∈F}. Transitions allow for changing the state of a Petri
net. Given a marking M∈B(P), we call a transition t enabled if all incoming
places contain at least one token, i.e., ∀p∈•t(M(p)>0). We write (N,M)[t if t
isenabledinmarkingM.Anenabledtransitioncanbefired.Suchfiringleadsto
astatechange,i.e.,anewmarkingM∈B(P),whereM(p)=M(p)+1ifp∈t•\•t,
M(p)=M(p)−1if•t\t•andM(p)=M(p)otherwise.Givenasequenceoftran-
sitions σ∈T∗, we write (N,M)−→σ (N,M) to denote that firing the transitions in
σ leads to M.
A WF-net is a Petri net with a unique source place p i, i.e. •p i=∅ and sink
placep o,i.e.p o•=∅thatformtheinitial/finalmarking,i.e.,M i=[p i]/M f=[p o].
Moreover, all transitions and places are on a path from source to sink.
3.3 Alignments
Alignments.[4]allowtocompareobservedbehaviorwithmodeledbehavior.Con-
sider Fig.4 in which we present three possible alignments for the trace a,b,c
andtheWF-netN .Thefirstrowofanalignment(ignoringtheskipsymbol)
1
corresponds to the trace, and the second row corresponds to a sequence of tran-
sitions (ignoring ) leading from the initial to the final marking. Each column
represents an alignment-move. We distinguish three move types. A synchronous
move (gray) matches an observed activity to the execution of a transition, e.g.,
the first move of the first alignment (Fig.4) with λ(t )=a. Log moves (black)
1
indicate that an observed activity is not re-playable in the current state of the
process model. Model moves (white) indicate that the execution of a transition
cannot be mapped onto an observed activity. We further differentiate invisible
and visible model moves. An invisible model move consists of an invisible tran-
sition, e.g., for the first model move in the third alignment (Fig.4) λ(t )=τ.
2
384 D. Schuster and G. J. Kolhof
Fig.5. SPN of a,b and WF-net N 1 (Fig.3)
Invisible model moves do not represent a deviation. In contrast, visible model
movesrepresentadeviation,e.g.,thesecondmodelmoveofthethirdalignment.
Next to alignments, there is the concept of prefix-alignments, which are a
relaxed version of conventional alignments. The first row of a prefix-alignment
(ignoring ) also corresponds to the trace, but the second row corresponds
to a sequence of transitions (ignoring ) leading from the initial marking to
a marking from which the final marking can be still reached. Hence, prefix-
alignments are suited to compare ongoing processes with a reference model.
In general, we aim to minimize log and visible model moves. Since multiple
(prefix-)alignmentsexistforagivenmodelandtrace,costsareassignedtoalign-
mentmoves.Thestandardcostfunction assignscost0tosynchronousandinvisi-
blemodelmoves,andcost1tologandvisiblemodelmoves.A(prefix-)alignment
with minimal costs is called optimal. The computation of an optimal (prefix-)
alignment is reducible to a shortest path problem [4]. Therefore, a synchronous