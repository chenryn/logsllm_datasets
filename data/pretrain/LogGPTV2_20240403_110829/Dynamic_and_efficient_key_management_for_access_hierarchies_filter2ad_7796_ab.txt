namic changes, and the scheme is less eﬃcient than ours
because of additional usage of modular multiplication.
[9]
requires larger public storage, key derivation is slower be-
cause of additional usage of encryption, and the ex-member
problem is not addressed that will require to rekey all de-
scendants on deletions. Compared to the schemes [30] and
[54], our approach is simpler than both of them. It is also
more eﬃcient than the ﬁrst scheme (by a constant factor),
and uses less space than both of them (by a constant fac-
tor). In addition, in both of these schemes, all descendants
have to be rekeyed when a class is being deleted to com-
bat the ex-member problem.
[11] uses only hash functions
and achieves performance closest to our base scheme; dele-
tions, however, require rekeying of all descendants. In our
scheme, on the other hand, dynamic changes to the graph
are handled locally (i.e., private information at other nodes
is not aﬀected and no other nodes need to be re-keyed, only
public information associated with the graph changes). In
addition, the above schemes do not provide formal proofs of
security.
Results achieved in this work can also be achieved using
broadcast encryption, since broadcast encryption schemes
are more powerful than our scheme. Such schemes, how-
ever, require signiﬁcantly higher overheads than our scheme
due to their added power and are not suitable in our set-
ting (where the goal is to make the scheme work with weak
clients).
3. PROBLEM DEFINITION
There is a directed access graph G = (V, E, O) s.t. V is a
set of vertices V = {v1, . . ., vn} of cardinality |V | = n, E is
a set of edges E = {e1, . . ., em} of cardinality |E| = m, and
O is a set of objects O = {o1, . . ., ok} of cardinality |O| = k.
Each vertex vi represents a class in the access hierarchy and
has a set of objects associated with it. Function O : V → 2O
maps a node to a unique set of objects such that |O(vi)| ≥ 0
and ∀i∀j, O(vi)∩O(vj) = ∅ iﬀ i 6= j. (For the sake of brevity
of exposition we use notation Oi to mean O(vi).) When the
set of edges E or the set of objects O is not essential to our
current discussion, we may omit it from the deﬁnition of the
graph and instead use notation G = (V, O) or G = (V, E),
respectively.
In a directed graph G = (V, E), we deﬁne an ancestry
function Anc(vi, G) which is a set such that vj ∈ Anc(vi, G)
if there is a path from vj to vi in G. We also deﬁne the
set of descendants of node vi as Desc(vi, G), where vj ∈
Desc(vi, G) if there is a path from vi to vj in G. For a
directed graph G = (V, E), we use a function P red(vi, G)
to denote the set of immediate predecessors of vi in G, i.e.,
if vj ∈ P red(vi, G) then there is a directed edge from vj
to vi in G. Similarly, we deﬁne Succ(vi, G) to be the set of
immediate successors of vi in G. When it is clear what graph
we are discussing, we omit G from the notation and instead
use the shorthand notation Anc(vi), Desc(vi), Succ(vi), and
P red(vi). We consider a node to be its own ancestor and
descendant, but we do not consider it to be a predecessor or
successor of itself.
In the access hierarchy, a path from node vi to node vj
means that any subject that can assume access rights at
class vi is also permitted to access any object at class vj
such that o ∈ Oj. The function O∗ : V → 2O (we use O∗
as a shorthand for O∗(vi)) maps a node vi ∈ V to a set of
objects accessible to a subject at class vi; the function is
deﬁned as O∗
i = Svj ∈Desc(vi) Oj .
i
We deﬁne a key allocation mechanism that implements
such an access graph, that is, an assignment of keys to users
and objects where a user can access an object iﬀ he has a
key for that object. The goal is to minimize the number of
keys per access class and the number of keys with which an
object is encrypted. Formally, the key allocation policy is
deﬁned as:
Definition 1. Suppose we are given a key-space K. A
key allocation, KA : V ∪ O → 2K, maps objects and access
classes to a subset of keys.
In our schemes, to keep an ancestor’s key space small, a
node’s key is computable from any of its ancestors keys via
a hash function.
Definition 2. Given two keys k and k0, we say k gener-
ates k0, denoted by k G⇒ k0, iﬀ there exists a polynomial-time
algorithm D such that D(k) = k0. When there does not ex-
ist a probabilistic polynomial time algorithm that outputs k0
when given k with more than a negligible probability, we say
6⇒k0. Sometimes we allow these algorithms to have auxil-
k
iary information.
G
Now we are ready to formally deﬁne what is meant by “im-
plementing” an access control policy.
Definition 3. We say that a key allocation KA imple-
ments an access graph G = (V, O) iﬀ the following two con-
ditions are true:
1. Completeness: ∀(vi, oj ) ∈ V ×O∗
i ,∃(k, k0) ∈ KA(vi)×
KA(oj ) s.t. k G⇒ k0. In other words, for every object
that an access class has rights to access, that access
class should be assigned a key that can generate a key
that is used to encrypt the object.
2. Soundness: ∀(vi, oj ) ∈ V ×O\O∗
i ,∀(k, k0) ∈ KA(vi)×
6⇒ k0. In other words, for every object that
KA(oj ), k
an access class does not have rights to access, there is
no key in that access class key space that can be used
to generate any of the keys used to encrypt the object.
G
Definition 4. A key allocation KA that implements an
access graph G = (V, O) is fully collusion-resilient (or just
collusion-resilient) iﬀ for any set of adversaries with access
to nodes V 0 = vi1 , . . . , vir , where V 0 ⊂ V and 1 < r < n,
we have that ∀(vij , o`) ∈ V 0 × O \ Svij
ij ,∀(k, k0) ∈
6⇒ k0. In other words, collusion does
KA(vij ) × KA(o`), k
not allow the coalition V 0 to produce decryption keys for
objects to which they did not already have access.
∈V 0 O∗
G
4. BASE SCHEME
This section describes our scheme in which every node has
one key associated with it, the public information is linear in
the size of the access graph G, and computation by node v
of a key that is ` levels below it can be done in ` evaluations
of a hash function. Here we focus on key allocations for a
static access hierarchy; extensions of this base scheme are
given in section 5.
Assume that we are given a cryptographic hash function
H : {0, 1}? → {0, 1}ρ.
k2 − H(k1, `2)
+



`1;k1
Q
k3 − H(k1, `3)
Q
Q
QQs
`2;k2
`3;k3
Q
Q
Q
QQs
k4 − H(k2, `4)



+
k4 − H(k3, `4)
`4;k4
Figure 1: Key allocation for example access graph; all
arithmetic is modulo 2ρ.
Key generation. The private key generation process and
the nature of public information stored at each node of the
graph is as follows:
Private key Each vertex vi is assigned a random private
key ki in {0, 1}ρ. An entity that is assigned access
levels V 0 ⊆ V is given a smartcard with all keys for
their access levels vj ∈ V 0.
Public information For each vertex vi there is a unique
label `i in {0, 1}ρ that is assigned to the vertex. Also
for each edge (vi, vj ), the value yi,j = kj−H(ki, `j) mod
2ρ is stored publicly for this edge1.
Key derivation. All that needs to be shown is how to
generate a child’s key from the parent’s private information
and the public information. Suppose vi is a parent of vj
with respective keys ki and kj. Now, `j and yi,j = kj −
H(ki, `j) mod 2ρ are public information. Clearly, node vi
can generate kj with this information.
Example: Figure 1 shows key allocation for a graph more
complicated than a tree, for which we give two examples.
First, it is possible for the node with k1 to generate key k2,
because that node can compute H(k1, `2) and use it, along
with the public edge information, to obtain k2. The node
with k3, on the other hand, cannot generate k2, since this
would require inversion of the H function.
Theorem 1. The above scheme is complete.
Proof. Suppose that a card has key ki corresponding to
node vi ∈ V . Also assume that access to object oj at node
vj (i.e., oj ∈ O(vj )) is requested such that oj ∈ O∗
i . This
means that access to oj can be obtained using key kj and
also there is a directed path from node vi to vj . Then in
order for vi to generate kj , vi sequentially processes every
edge (vx, vy) on the path between vi and vj .
Given an edge (vx, vy) for which both vx’s private key kx
and the stored public information `y and yx,y are known,
1Here we use subtraction to hide the value of kj with
H(ki, `j), but other ways of hiding kj using H(ki, `j) as the
key (e.g., using XOR operation) are also possible.
vi can generate vy’s private information ky. Due to the
sequential nature of key generation on the path between vi
and vj, vi will be able to derive keys of all necessary nodes
and produce key kj that will enable access to oj .
2
Theorem 2. The above scheme is sound, even in the
presence of collusion.
To prove this, we ﬁrst need to provide additional deﬁni-
tions and formally state the adversarial model. Our proof
of security is based on the standard model assuming that
H(k, `) can be implemented as a pseudo-random function
(PRF) Fk(`). We show security of the scheme against ac-
tive adversary who is allowed to adaptively corrupt nodes
in the graph. After corrupting some nodes, the adversary
is presented with a challenge: it is asked to recover the key
of a node that is not a descendant of a corrupted node (the
adversary is allowed to corrupt additional nodes that com-
ply with this condition). We claim that if the adversary
wins this game with a non-negligible probability, then we
can construct an adversary who obtains non-negligible ad-
vantage in breaking the security of PRF, contradicting the
deﬁnition of PRF.
Before proceeding further, we give a deﬁnition of a pseudo-
random function. Let us ﬁx a family of functions F : Keys(F )
×D → R, and let A be an algorithm that takes an oracle for
a function g : D → R and returns a bit. Function g can be ei-
ther drawn at random from RandD→R, i.e., g R← RandD→R,
or it is drawn at random from F , i.e., g R← F .
Definition 5. Consider two experiments:
F,A
Experiment Expprf −1
K R← Keys(F )
d ← AFK
Return d
F,A
Experiment Expprf −0
g R← RandD→R
d ← Ag
Return d
The prf-advantage of A is then deﬁned as
Advprf
F,A = P r[Expprf −1
F,A = 1] − P r[Expprf −0
F,A = 1]
Definition 7. Let KA be a key allocation that imple-
ments an access graph G = (V, O, E) and let B be an al-
gorithm that has access to oracles as above and returns a
string in {0, 1}ρ. We consider the following experiment:
KA,B
Experiment Expkr
ˆk = BKA(vi),C(G)
if after a call to vc = C(G) B makes a query KA(vi)
where vc ∈ Desc(vi), return 0
if ˆk = kc then return 1
else return 0
The kr-advantage of B is deﬁned as
Advkr
KA,B = P r[Expkr
KA,B = 1].
While the above deﬁnition assumes an adaptive adversary,
in our case this adversary is no more powerful than a static
adversary that is given the maximum amount of informa-
tion. That is, if an adversary B0 is given a challenge node
vc, keys for every child of vc, and keys for every sibling of
each node on the way from the root to vc (i.e., B0 obtains
keys for siblings of nodes vj s.t. vj ∈ Anc(vc)), then B0 can
(eﬃciently) generate keys for all nodes in the graph except
vc and its ancestors. To be more speciﬁc, adversary B0 ob-
tains access to a single oracle that returns a challenge node
vc along with all of the node keys as described above and
B0 eventually outputs its guess for kc.
Since usage of a static adversary makes our presentation
easier, in our further discussion we will assume that a static
adversary with maximal power is used.
If the adversary B0 has non-negligible advantage in the
key recovery experiment, then we can construct an adversary
AB0 that uses B0 and can distinguish between a PRF and a
random function with non-negligible probability (i.e., break
the security of PRFs) and with a very small increase in the
resource usage (namely, one application of a PRF and one
subtraction operation).
Lemma 1. Advprf
KA,AB0 ≥ Advkr
KA,B0 − 1
2ρ
For simplicity of exposition we do not take resources used
by an adversary into account, and it is assumed that, given
the same resources, we choose an adversary that gains max-
imum advantage.
Definition 6. Let F ρ denote a family of functions with
input length l(ρ), output length L(ρ), and key length k(ρ),
where ρ is a security parameter. Then F ρ is PRF if F ρ(K, x)
is polynomial-time computable (i.e., in time poly(ρ)) and
also the function Advprf