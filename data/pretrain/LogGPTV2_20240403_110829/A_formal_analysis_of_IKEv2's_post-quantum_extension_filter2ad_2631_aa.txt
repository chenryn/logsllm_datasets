# A Formal Analysis of IKEv2's Post-Quantum Extension

## Authors:
- Stefan-Lukas Gazdag, genua GmbH, Kirchheim near Munich, Germany
- Sophia Grundner-Culemann, MNM-Team, Ludwig-Maximilians-Universität München, Munich, Germany
- Tobias Guggemos, German Aerospace Centre (DLR), Oberpfaffenhofen, Germany
- Tobias Heider, genua GmbH, Kirchheim near Munich, Germany
- Daniel Loebenberger, Fraunhofer AISEC, Weiden i. d. Opf., Germany

## Abstract
Many security protocols used for daily Internet traffic have been in use for decades. Standardization bodies like the IETF often provide extensions for legacy protocols to address new requirements. Although the security aspects of these extensions are carefully discussed, automated reasoning has proven to be a valuable tool for uncovering security vulnerabilities that might otherwise go unnoticed. Automated Theorem Proving (ATP) is now a standard procedure in the development of some new protocols, such as TLS 1.3 and MLS.

IKEv2, the key exchange protocol for the IPsec suite, is expected to undergo significant changes to integrate Post-Quantum Cryptography (PQC). We present the first formal security model for the IKEv2 handshake in a quantum setting, along with an automated proof using the Tamarin Prover. Our model focuses on the core state machine, making it easily extendable and promoting the use of ATP in IPsec standardization. The security model identifies gaps in the protocol but treats specific implementations, such as fragmentation mechanisms, as black boxes. We demonstrate this approach using IKE_INTERMEDIATE, a recently proposed extension that significantly alters the protocol's state machine.

## CCS Concepts
- **Networks** → Network protocol design
- **Security and Privacy** → Security protocols; Public key (asymmetric) techniques

## Keywords
Formal verification, IPsec, IKEv2, ATP, Quantum-resistant key exchange

## Permission to Use
Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from permissions@acm.org.

## Conference Information
ACSAC '21, December 6–10, 2021, Virtual Event, USA
© 2021 Association for Computing Machinery.
ACM ISBN 978-1-4503-8579-4/21/12...$15.00
https://doi.org/10.1145/3485832.3485885

## ACM Reference Format
Stefan-Lukas Gazdag, Sophia Grundner-Culemann, Tobias Guggemos, Tobias Heider, and Daniel Loebenberger. 2021. A formal analysis of IKEv2’s post-quantum extension. In Annual Computer Security Applications Conference (ACSAC '21), December 6–10, 2021, Virtual Event, USA. ACM, New York, NY, USA, 15 pages. https://doi.org/10.1145/3485832.3485885

## Acknowledgments
We thank Felix Schärtl for pointing out the incompleteness of our original model and the reviewers for their valuable comments and discussions. We also gratefully acknowledge the Leibniz Super-Computing Centre (LRZ) for funding this project by providing computing time.

## 1. Introduction
IPsec is the most widely used technology for providing Virtual Private Networks (VPNs) and plays a central role in securing IP-based communication. When an IPsec connection is established correctly, the communication is encrypted, integrity-protected, and authentic. These properties are typically achieved through the use of cryptographic schemes. While IPsec itself uses symmetric cryptography for data transfer, unacquainted parties need a key exchange protocol using asymmetric cryptography to agree on a shared secret, which is then used as the key in the symmetric scheme. Currently, only Internet Key Exchange version 2 (IKEv2) is of practical relevance for IPsec.

The requirements for the IPsec protocol suite will change over time due to new developments in networking and other challenges. One motivation for future adaptations and extensions is the progress in cryptography. The increasing power of supercomputers and the rise of quantum computers may pose a threat to conventional cryptographic primitives. If quantum computers reach a certain size, they will be able to break the (Elliptic Curve) Diffie-Hellman key exchange, which is essential to IKEv2. Therefore, alternative or additional quantum-safe key exchanges might be necessary. Future governmental requirements for the use of cryptographic schemes might also lead to the necessity of using multiple schemes in parallel.

In short, changes to the protocols are unavoidable to securely face future threats and demands. At the same time, these changes can be difficult to apply. The overall security level of the protocol suite must not decrease, and a proper discussion about this should be accompanied by (automated) proofs.

### Contribution
We model the security of a minimal subset of IKEv2 in a quantum setting and prove that in such a setting, IKEv2 is no longer secure. We also analyze a proposed extension of the protocol that allows the classic Diffie-Hellman (DH) key exchange to be supplemented by multiple (quantum-resistant) key exchanges [33, 35]. We show that IKEv2 regains all desired security properties with this extension.

Our analysis allows the comparison of IKEv2 with TLS 1.3 [32] and Noise key agreement [36], which were also analyzed with Tamarin [9, 17]. It also shows that IKEv2, at least in its minimal form, is designed so well that the extension for making it quantum-safe is both straightforward and secure.

As a by-product, we provide a Tamarin-based IKEv2 verification in the classical setting, which we use to ensure that our model agrees with the proofs in the literature regarding security in the classical case. The code is provided in Appendix A and is open source [19]; it may be used to further verify current and future protocol extensions.

A challenging aspect of the analysis is the resource-intensity: even the correct model takes up to a half hour to compute in our environment. Spotting errors is therefore laborious, and it may be difficult to determine if a model check does not terminate. Thus, part of the contribution lies in executing the analysis.

## 2. Background and Related Work

### 2.1 IPsec and IKEv2
IPsec is a protocol suite that describes how different security services can be used together to secure traffic in an IP-based communication system. Its architecture is standardized by the Internet Engineering Task Force (IETF) in RFC 4301 [24], which distinguishes between three concepts:

- **Security Protocol**: These are the protocols used to secure the actual Internet Protocol traffic. Currently, Authentication Header (AH) (RFC 4302 [22]) and Encapsulated Security Payload (ESP) (RFC 4303 [23]) are defined, with ESP being more commonly used. ESP achieves confidentiality, integrity, and authenticity of the communication.
- **Security Association (SA)**: SAs are fundamental to IPsec. Each SA defines the provided security service for a certain simplex connection between two communication peers. It specifies the cryptographic algorithms and keys, various session information, and the policies indicating which Security Protocol is used to secure which kind of traffic.
- **Key Management**: The Security Protocols rely on cryptographic keys. These can be exchanged manually, but there are also protocols to establish all parameters for an SA between unacquainted communication peers, which allows for more flexibility. We focus on Internet Key Exchange version 2 (IKEv2) as defined in RFC 7296 [20].

The IKEv2 protocol implements an authenticated DH key exchange with a minimum of two round-trips. In the first, the peers exchange public DH-values to establish a confidential channel. The second round-trip authenticates the first exchange with digital signatures or pre-shared keys. The two security protocols (ESP and AH) are designed minimalistically; the key exchange mechanism solves the most complex part of the IPsec suite. Thus, most of the currently discussed extensions of IPsec concern IKEv2.

The standardization body responsible for IPsec has never required a formal security analysis for any modifications the protocol underwent; most changes might have been regarded as too minor to prompt such effort. However, the recently proposed drafts for integrating post-quantum key exchange into IKEv2 [33, 35] would structurally change the protocol: introducing several additional round-trips and changing the derivation function for the session key (called KEYMAT, see [20, Section 2.17]). Structural changes like these bear a higher risk for security and should be accompanied by formal verification.

### 2.2 Previous Analyses of IKE(v2)
IKEv1 and IKEv2 were not formally analyzed until after their respective standardization in RFC 2409 [18] and RFC 4306 [21]. The specifications explain why the protocols are believed to fulfill certain security goals but do not define these goals formally nor prove that they are fulfilled. A first formal analysis of IKE(v1) (using the automatic NRL Protocol Analyzer) found some security flaws in its design [29].

Additionally, IKE(v1) was subject to non-automatic formal security analysis [4]. This supplements an earlier formalization of important notions, such as protocols in general and key-exchange protocols in particular, attackers against such protocols, and session and session-key security [3]. Using this understanding, IPsec SAs can be interpreted as sessions for the communication partners. These definitions have since played a central role in automated verification of protocols.

IKEv2, which obsoletes IKE(v1), was formally modeled and verified with the Scyther tool for automatic proofs by Cremers [8]. The analysis revealed some weaknesses in IKEv2’s authentication mechanism. We compare our results to his to verify the correctness of our model and proofs. Apart from these attempts at formal verification of IKE and IKEv2, there is significant work on attacker models, key exchange models, and the security properties of IKE(v2) and similar protocols. Chapter 3 provides more details.

### 2.3 Formal Analysis of Other Protocols
Formal verification has been used for other popular key exchange protocols recently. Tamarin [30, 34] was used to analyze the Noise key exchange protocol framework, which later provided the basis for a formal analysis of the Wireguard key exchange [12, 13]. It was also frequently used during the development of the TLS 1.3 standard [32]: for every revision of the proposal, the security model was adjusted and verified again [9]. Other protocols that have received attention by formal analysis include the PKCS#11 standard [10] and the Signal protocol for private messaging with smartphones [6]. The latter motivates recent standard activities to establish a protocol for Message Layer Security (MLS), which aims to secure group communication for different smartphone messaging services [2]. A first version of the protocol is formally analyzed in [7], a procedure the IETF aims to continue during the standardization process of the new protocol.

## 3. Protocol Model
IKEv2 is not only the key exchange protocol for IPsec but also manages the IPsec SAs, resulting in a multitude of extensions. Modeling all possible states, messages, and error codes of the protocol would exceed the capabilities of an automatic prover. Therefore, we focus on a minimal subset. RFC 7815 [25] provides this in the form of Minimal-IKEv2, specifying that the agreement of keys between the peers is the minimal subset of a standard-conform implementation. Particularly, it leaves out advanced authentication modes like EAP or certificate validation. We use this subset for our model. More complex scenarios and adaptions and extensions of the protocol may be modeled based on this later.

Figure 1 shows the Minimal-IKEv2 state machine. "start" indicates that in this session, Initiator and Responder have not communicated at all yet. Every other state is reached at the end of the corresponding key agreement step:

- **IKE_SA_INIT (Initiator)**: The Initiator chooses a private ephemeral key \( e_I \) for the DH-exchange, calculates the public ephemeral key \( e_pI \), and sends it to the Responder together with a Nonce_i in an IKE_SA_INIT message. The message also contains a list of proposed key exchange methods.
- **IKE_SA_INIT (Responder)**: The Responder also chooses a private ephemeral key \( e_R \) and uses it to calculate the shared DH-key. Together with Nonce_r and Nonce_i, this shared key is used to derive the session key (called keymat), typically by hashing. The public ephemeral key, Nonce_r, and a selection of key exchange methods from the Initiator’s proposal comprise the Responder’s IKE_SA_INIT message, which he sends to the Initiator.
- **IKE_AUTH (Initiator)**: Upon receiving the IKE_SA_INIT response, the Initiator also calculates the shared DH key and derives the session key keymat. For authentication, the Initiator signs his own IKE_SA_INIT message with his private static key, thereby proving that the IKE_SA_INIT message was sent by him. The IKE_AUTH message itself is also signed and sent to the Responder.
- **IKE_AUTH (Responder)**: The Responder verifies the signature with the Initiator’s public static key and proves his own identity by signing the IKE_AUTH response as well as his own IKE_SA_INIT message with his own private static key and sending them to the Initiator.
- **IKE_AUTH Done**: As a last step, the Initiator verifies the signature of the Responder; this completes the exchange. Both peers now share a common SA, which can be used for communication with IKEv2 or deriving new so-called Child-SAs for other IPsec protocols.

We assume an IKEv2 session to only be valid if the final state IKE_AUTH Done is reached. We therefore prove that the states in question can be reached:

- **Correctness**: There exist sessions for both roles (Initiator and Responder) where the communication agents have established key material, and those sessions can exist simultaneously.

Next, we define an attacker model before presenting the security properties that should be met if such an attacker exists.

### 3.1 The Dolev-Yao Attacker Model
The Dolev-Yao attacker model [11] is commonly used for formal analyses [13]. It allows the attacker to act with the powers of a message carrier, i.e., to eavesdrop, hold back, resend, modify, or send fresh messages. An attacker is called "passive" if they only eavesdrop on the network. Interaction makes an attacker "active." Oracles can be introduced in the model to identify weaknesses from leakage of sensitive information.

### 3.2 Security Properties
The most important security goals of IKEv2 are informally stated to be "identity protection" and "key secrecy" [20]. The security properties of authenticated key exchange protocols have been defined and refined in several related works, including [4], [26], [8], and [13].

We use their respective definitions of the following seven properties; changes to the cited definitions are marked by "[ ]". The properties are defined assuming that two communication partners A and B intend to establish a connection using IKEv2 with each other.

The first three properties, namely Aliveness, Weak Agreement, and Agreement, were first discussed by Lowe in [27] as different levels of authentication:

- **Aliveness**: We say that a protocol guarantees to an initiator A aliveness of another agent B if, whenever A (acting as initiator) completes a run of the protocol, apparently with responder B, then B has previously been running the protocol [27, Chapter 2.1]. As Lowe states: "Many protocols fail to achieve even this weak form of authentication."
- **Weak Agreement**: We say that a protocol guarantees to an initiator A weak agreement with another agent B if, whenever A (acting as initiator) completes a run of the protocol, apparently with responder B, then B has previously been running the protocol, apparently with A [27, Chapter 2.2].
- **Agreement (on a list of data items S)**: We say that a protocol guarantees to an initiator A agreement with a responder B on a set of data items S if, whenever A (acting as initiator) completes a run of the protocol, apparently with responder B, then B has previously been running the protocol, apparently with A, and was acting as responder in his run, and the two agents agreed on the data values corresponding to all the variables in S.