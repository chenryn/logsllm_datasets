title:Towards SDN enabled network control delegation in clouds
author:Muhammad Salman Malik and
Mirko Montanari and
Jun Ho Huh and
Rakesh B. Bobba and
Roy H. Campbell
Towards SDN Enabled Network Control Delegation
in Clouds
Muhammad Salman Malik, Mirko Montanari, Jun Ho Huh, Rakesh B. Bobba, Roy H. Campbell
University of Illinois, Urbana-Champaign
Email: {mmalik10, mmontan2, jhhuh, rbobba, rhc}@illinois.edu
Abstract—In today’s IaaS clouds users only get a logical view
of the underlying network and have limited control. Delegating
more control to end users would be beneﬁcial but would also raise
security concerns for the provider. Emerging Software Deﬁned
Networking (SDN) technologies have the capabilities to facilitate
delegation of network controls and provide some level of network
abstractions to end users. However, any delegation solution
should try to balance the level of controls delegated to end users
with the security constraints of the provider. In this paper, we
propose a SDN-based framework to facilitate delegation of some
network controls to end users, providing the means to monitor
and conﬁgure their own slices of the underlying networks. Using
two instantiations of this framework, we illustrate the tradeoffs
between security and the level of network abstractions provided
to end users.
Index Terms—SDN; Cloud; Control Delegation;
I. INTRODUCTION
Cloud computing is gaining popularity, with startups as
well as other well established organizations heading towards
cloud infrastructures to beneﬁt from its elasticity and also to
leverage the lucrative pay-as-you-go model which can lead to
considerable cost savings for the cloud users. Infrastructure-
as-a-service (IaaS) cloud model, in particular, allows users to
build and conﬁgure their own virtual computing infrastructure
by renting computing platform resources in the form of virtual
machines [1]. Users usually get full administrative access to
those rented virtual machines, allowing them to install any
piece of software they want and conﬁgure them to meet their
needs. However, the administrative ﬂexibility does not extend
to conﬁguring and monitoring the network ﬂows. Users only
get a logical view of the underlying network and have very
limited control – there are obvious security reasons as to
why users only get limited or get no control of the network
infrastructure, but there are also technological barriers that
are equally responsible for this. Nevertheless, adding more
ﬂexibility and transparency in conﬁguring network ﬂows can
lead to a more trustable IaaS clouds, and help attract users
who are skeptical about cloud providers’ SLAs.
Fortunately, with the recent advent of Software Deﬁned
Networking (SDN), this goal does not seem too far away
from reality. The ﬂexibility provided through SDN has allowed
its users to efﬁciently route their ﬂows in networks [2]
and conveniently build security applications on top of their
networks [3]. This paper discusses how SDN can be applied
in the context of cloud computing to expose the underlying
networking infrastructure to the cloud users while balancing
the security needs of the infrastructure provider. In particular,
our discussions try to understand how existing SDN technolo-
gies (e.g., OpenFlow [4], FlowVisor [5], ADVisor [6]) can be
utilized to provide adequate level of network path abstractions,
while addressing the security concerns of the cloud provider.
It is not hard to imagine scenarios where security-aware
users may want to have some isolation guarantees on their
network ﬂows. For example, they might have requirements for
not allowing any other organizations, or perhaps a different
group within the same organization, to send to or receive
packets from certain parts of their network. Or, they might
want their packets to only propagate through certain switch
paths, and ensure that they all go through integral security
devices (e.g., a ﬁrewall or an IDS sensor) before reaching
certain destinations. On top of those security needs, those who
are running performance-critical jobs might want to ensure that
their packets are ﬂowing through optimal paths, meeting some
strict response time requirements.
Emerging SDN technologies can enable the implementation
of the aforementioned requirements, facilitating a more trans-
parent network ﬂow controls in IaaS clouds, but how would
this paradigm-shift affect security of the cloud infrastructure?
Our discussions keep two security properties in mind:
• Non-interference: cloud users should not be allowed to
take control the trafﬁc that does not belong to them;
• Non-inference: it should be hard or infeasible for cloud
users to map the exact underlying network topology by
collecting and reconciling network information over time;
Our aim is not to cover the security of network control
delegation mechanism exhaustively, but to discuss the tradeoffs
between the two aforementioned security properties that need
to be considered when providing more network control to
users. Further, it is not our intention to expose a completely
virtualized network topology to users, mechanisms for doing
so are already available. For example, Amazon EC2 provides
a router to which all the VMs of a given user are connected
to. Rather, using the network conﬁguring and monitoring
capabilities of SDN, we aim to provide a more transparent
access to the underlying physical resources, and allow users
to better monitor and schedule their network ﬂows (using
multipaths for example).
The rest of the paper is structured as follows. In Section
II we provide necessary background on SDN technologies,
OpenFlow, FlowVisor, and ADVisor. We then propose a SDN-
based framework, in Section III, that would facilitate ﬂexible
978-1-4799-0181-4/13/$31.00 ©2013 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:46:41 UTC from IEEE Xplore.  Restrictions apply. 
network ﬂow controls and monitoring in IaaS clouds. Through
two example instantiations of the framework (using FlowVisor
and ADVisor respectively) in Section IV, we discuss some
of the tradeoffs between security properties and the level of
control provided to users. Related work is discussed in Sec-
tion V. Finally, our conclusions and future work are covered
in Section VI.
II. BACKGROUND
To delegate some control over the network to cloud users,
we leverage existing tools to “slice” the network such that
each user gets a partial view of the network. Before we delve
into the details of our approach, a brief description of these
concepts and tools is in order.
A. Software Deﬁned Networks
Software deﬁned networking is a relatively new but revolu-
tionary concept of managing the network. The main idea is to
decouple the control logic from the forwarding logic in such
a manner that the network can be conﬁgured and monitored
from a central location (often called controller). Unlike with
traditional networks, now network operators can see a global
view of the topology at the controller and can apply various
data forwarding rules directly from this centralized point. This
is a great improvement over the non-SDN networking as it
frees the network operators from the burden of conﬁguring
each switch separately, e.g., manually conﬁguring switches for
ﬁrewalls is burdensome and error prone leading to conﬂicting
rules. Note that the communication between controller and the
forwarding logic in the switches on the data path is done via
a vendor agnostic API. We discuss one such API next.
B. OpenFlow
OpenFlow [4] is an API used in SDNs to control
the
switches remotely through a centralized controller. This de-
coupling of the control and data plane provides the network
operators with greater ﬂexibility as opposed to the conven-
tional non-SDN routing and management. Every packet for
which switches don’t know the forwarding rules are sent to
the controller and then the controller decides what to do with
such packets based on rules or logic speciﬁed at the controller.
Once a decision has been made by the controller, it pushes
actions into the switches so that any subsequent packet that
matches this ﬂow entry is dealt with accordingly.
C. FlowVisor
FlowVisor [5] is a tool developed for SDNs to slice the
physical switches among its users. This slicing of switches can
either be on per-port basis of each switch or at a higher level
(e.g., data link or transport or network layer level). Network
admin can deﬁne ﬂowspaces (which deﬁne the set of packets)
for each controller. When a new packet is seen by a switch,
it is sent to FlowVisor and then FlowVisor is responsible for
directing the packet to its appropriate controller. Since packet
rewriting takes place both to and from the controller and
switches, FlowVisor acts as a transparent proxy between the
controller and switches. Further, it also ensures that a given
controller can only see, and hence control, packets that belong
to its own ﬂowspace.
D. ADVisor
Advanced FlowVisor (Advisor [6]) is a by-product of OFE-
LIA project from Europe. Basic premise of ADVisor is that
although FlowVisor provides slices of the network to its users,
the coupling of slices with the underlying topology is stronger
than necessary. Particularly, there is no provision in FlowVisor
to provide a proper subset of switches in the path that connects
two hosts. ADVisor extends FlowVisor to provide users with
such an abstraction, i.e., it can provide a proper subset of a
path of switches between hosts as a controllable slice to its
users.
III. SDN-BASED NETWORK CONTROL DELEGATION
FRAMEWORK
This section proposes a SDN-based framework for delegat-
ing some network controls to end users while balancing level
of delegation with the security concerns of the infrastructure
provider. To increase the control that users can have on the
underlying network infrastructure, our framework provides
the ability for users to deploy their own SDN controllers in
the cloud. To provide a concrete example, our framework is
described in the context of OpenFlow controllers.
OpenFlow controllers control the network ﬂows by con-
ﬁguring forwarding tables on switches and routers that are
redirecting the trafﬁc. A controller has a complete view of
the communication ﬂows between the devices in the system.
Programs running on it implement complex decisions such
as dynamic access control rules, selection of best routes
between datacenters [7], and isolation between cloud users.
Such control decisions are implemented through OpenFlow
messages exchanged between switches and the controller. The
level of control provided to cloud users depends on the ability
of the cloud user to send and receive OpenFlow messages to
an appropriate set of switches.
In any cloud environment, providing a direct unmediated
access to the underlying physical infrastructure (e.g., a data-
center) to each end user is undesirable for several reasons:
• malicious or faulty controllers could subvert network
communications by violating access control rules or by
making communications impossible;
the physical
• sensitive information about
infrastructure
could be revealed, allowing competitors to, for example,
infer the size and structure of datacenter or discover
security and cost-reduction practices used by the cloud
provider;
• making changes to the underlying infrastructure would
become much more difﬁcult as all users would have to get
involved in reviewing and approving changes to ensure
that their controllers can handle the new topology.
For those reasons, our framework exposes only a logical
view of the switches present in the system. The degree to
which such a logical view matches the physical view provides
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:46:41 UTC from IEEE Xplore.  Restrictions apply. 
a set of tradeoffs between security and ﬂexibility and control
given to end users.
User Views: In our framework, given a network with a
set of physical switches P , each user receives a logical
view of the network Vi. Such a view Vi
is composed by
removing knowledge about a subset of physical switches, and
substituting the remaining ones with logical switches that only
give the user partial control over ﬂows through each physical
switch. The user writes an Openﬂow controller interacting with
such logical switches, while the cloud provider translates such
messages into operations that affect the physical entities.
Using our framework, we can identify several properties
that logical views provide. We separate such properties into
local properties that depend strictly on the
two groups:
mapping between a single logical network and the physical
network, and global properties that depend on the interactions
between the different views provided to users.
Local properties: Local properties are properties deﬁned over
the view provided to users. We outline a few example of local
properties of views. We say that a view satisﬁes a property of
connectivity if it exposes to the user a set of switches allowing
a controller to set up ﬂows among all its virtual machines.
Additionally, we say that a view has a geographic consistency
property if the view maps physical networks in different
regions with networks controlled by different logical switches.
In such a view, the location of different virtual machines and
their long-distance interconnections are accessible to the user’s
controller that, on the basis of such information, can optimize
network communication.
Similarly, we deﬁne a property of datacenter consistency
that exposes such information at
the level of data center.
Users with access to a view with datacenter consistency
property have knowledge of which communications go across
datacenters and can set up ﬂows accordingly. More complex
views map redundancy property: a multi-path view should
allow for users to map at least two network paths between
any two virtual machines under their control.
Global properties: Global properties on the other hand are
deﬁned over two or more views. For example, we say that
two views are non-interfering if any action deﬁned by a user
in one view cannot affect the other view. Similarly, we say
that two views are fault isolated if any fault affecting a view
cannot affect the other.
Security Properties: The two security properties deﬁned in
Section I can be expressed through a combination of global
and local properties. For example, we can represent
the
requirement of limiting the exposure of the cloud provider’s
physical infrastructure to users through the deﬁnition of a
global property and a set of local properties. First, we deﬁne
a global property specifying that the union of views that the
cloud users see be a proper subset of the entire network.
Second, we deﬁne a local property for each view specifying
Fig. 1. Conceptual Framework For Delegating Network Control
that the subset of switches that are exposed to each user are
maximal among all the subset of switches that can be used
to provide connectivity among that user’s nodes. The ﬁrst
objective relates directly with protecting information about
the cloud provider’s network, whereas the second objective
captures the tradeoff between ﬂexibility that can be provided
to a user and the risk of exposing the network to the users.
Similarly, the non-interference property can be expressed as a
global property that speciﬁes mutual exclusion between user
views.
Creating User Views: Given knowledge of the physical
infrastructure and the requirement of the users, a cloud
provider computes a set of views to provide as follows. Let
{s1, s2, ..., sN} be the sets of switches that can provide full
connectivity between machines under the control of users