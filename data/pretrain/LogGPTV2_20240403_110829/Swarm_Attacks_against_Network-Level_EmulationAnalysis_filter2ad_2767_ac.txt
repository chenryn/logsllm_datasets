locate the longest byte sequence in traﬃc such that any suﬃx of the sequence is
a valid chain of instructions, and consider the traﬃc as malicious if the longest
of such sequences found is 230 byte or longer. The longest sequence that [1] can
ﬁnd in our attack will be of 22 byte long (with 2 bytes for jumping over junk,
and 20 bytes as shown in Fig. 1). Thus, the swarm attack will evade [1] also.
5.2 “Meaningful Code” Detection
As for systems that try to detect code that appears to serve some “meaningful”
purpose in an attack, recall that [24] looks for push-call sequences and instruc-
tions that do not cause any data ﬂow anomaly. All attack instances in our swarm
attack contain no push-call sequence (there will be one if we try to continue with
normal execution after the attack using the method described in Sect. 4.1), and
contains at most 6 “useful” instructions. Since the number of useful instructions
needed for [24] to sound the alarm is 10, [24] will not be able to detect our at-
tack. As for [3], the detector only considers control transfers at the end of every
186
S.P. Chung and A.K. Mok
chain of basic blocks it identiﬁes with static analysis of the incoming traﬃc. As
such, only the jump that forms a dead loop in the earlier attack instances and
the jump to the decoder in the last instance will be used by [3] to determine
whether the traﬃc is malicious. Since an empty loop is considered benign, and
register indirect jumps are only malicious to [3] if they target instructions within
the analyzed traﬃc, our attack will certainly evade [3].
5.3 Decoder Detection
As we’ve mentioned in Sect. 2.1, almost all network-level emulation/analysis
systems designed to speciﬁcally detect decoders in polymorphic shellcode will
only consider incoming traﬃc malicious if it contains some GetPC code. Since
our attack does not contain any such code, it will evade all detection systems
that use GetPC as a precondition for further analysis. For the sake of argument,
even if some GetPC code is added to our attack instances, they still won’t
be suﬃciently “decoder like” to be detected. For example, [25] requires a loop
containing indirect writes for traﬃc to be classiﬁed as malicious, but the only
loop in our attack instances is empty. As for [14], more than 6 reads to diﬀerent
locations within the analyzed traﬃc have to be found before it will be ﬂagged
as an attack, while our attack instances perform at most one read operation.
The successful evasion of [13] by our swarm attack is less certain. When pre-
sented traﬃc from our swarm attack, we believe [13] will successfully identify
the code involved (either for building the decoder or for executing the decoder).
Whether [13] can detect our attack will then be determined by its model for
a shellcode decoder (i.e. the frequency at which diﬀerent types of instructions
appear in a decoder), and in the worst case, if [13] is trained to recognize code in
our attack instances, it is quite likely that our attack will be detected. However,
we can always polymorph our attack to introduce noise for the classiﬁcation in
[13] (i.e. introduce various types of instructions). Furthermore, it is questionable
if [13] can maintain a low false positive if it’s trained to recognize the small
“decoder” in our attack (we will elaborate on this point in Sect. 6).
Finally, [15] used a negative heuristic that if the code recovered from the traﬃc
contains fewer than 8 write instructions, it will be considered benign. Since all
our attack instances contain only one write operation, they will all successfully
bypass [15].
6 Can Network-Level Emulation/Analysis Detects
Swarm Attacks?
In this section, we will try to answer the following question:
Can network-level emulation/analysis systems be improved to detect the
swarm attack we’ve proposed?
The answer to this question depends on our ability to characterize the kind
of write operations that allows one to build the decoder, as well as the amount
Swarm Attacks against Network-Level Emulation/Analysis
187
of false positives that will result from our best characterization of such “useful
writes”. We focus our discussion on characterizing the write operations used
for building the decoder because it is the most essential feature of the visible
payload in a swarm attack. The way of generating both the value to be written
and the target address can be easily changed to evade detection, and as we will
argue below, we maybe able to design swarm attacks in which these values are
not “generated” by any instructions. As of the payload for the control transfer
to the decoder in the last attack instance, we note that it may not be necessary
in some swarm attacks. If we can build the decoder at many diﬀerent places, we
can have the last instance of attack direct the hijacked control to a hardcoded
address (without executing any code), and still evade signature-based detection
targeting that hardcoded value; due to the large number of choices we have for
this address, any signature targeting a particular address will be useless. Even
if it turns out that the executable payload in the last instance is unavoidable,
we believe the diﬃculties in the characterization of this small payload, as well
as the false positives resulting from detecting it, will be similar to that of the
“useful write” discussed below.
Let’s start our discussion by considering our attack against the Savant server
once again. In the attack code in Fig. 1, the write operations involved have some
very speciﬁc properties; in particular, both the value written and the address to
write are direct products of previous instructions. However, we can easily avoid
the dynamic generation of the former by using immediate values instead. This
is especially true if we can aﬀord to construct the decoder with more attack
instances. For example, if we can double the number of attack instances used
in building the decoder, we can specify the values to be written as immediate
operands, and still leave no constant byte sequence for signature-based detec-
tion. This is because we can “write” each 4-byte of the decoder using two attack
instances, the ﬁrst writes an immediate value to the target location directly, and
the second performs some arithmetic/bitwise operation between another imme-
diate value and the previously written value, such that the result of the operation
will be the right value for the decoder. This way, we can avoid having the values
written in useful writes from being deﬁned in previous instructions. To push the
idea even further, if we can aﬀord to build the decoder one byte at a time, and
if we have control over an extra register when the control hijacking occurs, we
can simply put the value to write in the register we control. As such, the value
written will appear entirely undeﬁned to the network-level emulation/analysis.
When coupled with the overlapping-writes technique in Sect. 3, there will only
be one byte that’s constant across all attack instances responsible for building a
particular part of the decoder.
If it turns out that there are so many locations in the attacked process’ address
space where the decoder can be safely built, we can avoid generating the target
of the write operations used in building the decoder also; instead, we can include
the immediate value of the write target in our attacks and still be able to evade
any signature-matching by building the decoder at diﬀerent place in diﬀerent
attacks. In fact, from our experience with attacking Savant, at least the least
188
S.P. Chung and A.K. Mok
signiﬁcant two bytes of the address where we place our decoder can show a high
level of entropy, leaving only the most signiﬁcant two bytes useful for signature
matching (if we leave the write target unencoded in our attack instances). Thus,
it is possible to design our attack such that the “useful writes” we use for building
the decoder will appear to have both the value and the address written undeﬁned
to the network-level emulation/analysis.
It is also quite unlikely that we can keep the false positives of the network-level
emulation/analysis low while we try to detect attack code as simple as those in
the swarm attack. We based this pessimistic prediction on two pieces of data
from [15]:
1. when tested against artiﬁcial binary data, the system in [15] found that
0.01% of the data writes to 8 unique addresses, and contain one control
transfer to one of those written locations.
2. almost 1% of random binary/printable data will contain code that writes to
a certain address and then an instruction that jumps to it.
We note that if we phrase a “useful write” in a swarm attack as “deﬁning
certain register and then use it as the target of a register indirect write”, the
behavior involved in the second item will be quite similar to a useful write in
terms of the level of sophistication: both involve two related operations. Thus, it
is not unreasonable to use the ﬁgure given to predict the level of false positives
resulted from detecting traﬃc that contains one “useful write” operation.
7 Conclusions
In this paper, we have studied an attack strategy where the attacker deliber-
ately makes his attack less eﬃcient; instead of achieving their goal through one
instance of control hijacking, they hijack the control of the target process mul-
tiple times, and achieve some minimal objective in each hijacking. Surprisingly,
such swarm attack is very eﬀective in evading detection systems that are based
on network-level emulation/analysis, which is the least challenged approach for
network intrusion detection. The swarm attack evades these systems by exposing
a very small, simple piece of code in each attack instance, and slowly building up
a decoder somewhere in the attacked process’ memory using this minimal pay-
load. Once the decoder is complete, one last instance of attack will be launched
to carry the encoded payload and hijack the control to execute the decoder. We
argue that since the exposed code in the swarm attack can be made so short and
simple, it would be virtually impossible to detect such attack without incurring
a high false positive. We have also noted that the need to hijack the control of
the attacked process multiple times may constraint the type of vulnerabilities
that can be exploited in a swarm attack, but we believe vulnerabilities in net-
work servers are generally suitable for us, and there are techniques to exploit
vulnerabilities that are less favorable to our swarm attacks.
As we have mentioned in the introduction, many security systems are built
based on the assumption that the attackers will gain nothing by being ineﬃcient
Swarm Attacks against Network-Level Emulation/Analysis
189
and make their attacks “unnecessarily complicated”. Thus, the swarm attack
can have signiﬁcant impact to other systems too. For example, a similar “multi-
threaded” attack as the one we have presented can open up new avenue for
mimicry attacks against system-call based IDS: in this new attack, not only
can the attacker insert null calls into the sequence of system calls observed by
the IDS, he can also issue system calls from another thread that’s at a more
favorable state. Our preliminary analysis also shows that some form of swarm
attack can have signiﬁcant impact on intrusion prevention systems which analyze
information collected from the attacked host. In particular, with separation of
the attack traﬃc that overwrites the targeted control structure and that hijacks
the control using those contaminated structures, together with careful control of
the time delay between the two parts of the attack, an attacker can make IPSs
like Vigilante [5] vulnerable to allergy attacks [4], or force them into generating
signatures/execution ﬁlters that are useless in stopping attacks. In our future
work, we plan to further experiment with the swarm attacks against these two
types of systems, and study their real impact.
References
1. Akritidis, P., Markatos, E.P., Polychronakis, M., Ananostakis, K.: Stride: Polymor-
phic sled detection through instruction sequence analysis. In: Proceedings of the
20th IFIP International Information Security Conference (IFIP/SEC 2005), Chiba,
Japan (May 2005)
2. Chen, S., Xu, J., Sezer, E.C., Gauriar, P., Iyer, R.K.: Non-control data attacks
are realistic threats. In: Proceedings of the 14th conference on USENIX Security
Symposium (USENIX Security 2005), Madison (July 2005)
3. Chinchani, R., Van Den Berg, E.: A fast static analysis approach to detect exploit
code inside network ﬂows. In: Valdes, A., Zamboni, D. (eds.) RAID 2005. LNCS,
vol. 3858, pp. 284–308. Springer, Heidelberg (2006)
4. Chung, S.P., Mok, A.K.: Allergy Attack Against Automatic Signature Genera-
tion. In: Zamboni, D., Kr¨ugel, C. (eds.) RAID 2006. LNCS, vol. 4219, pp. 61–80.
Springer, Heidelberg (2006)
5. Costa, M., Crowcroft, J., Castro, M., Rowstron, A., Zhou, L., Zhang, L., Barham,
P.: Vigilante: End-to-end containment of internet worms. In: Proceedings of 20th
ACM Symposium on Operating Systems Principles, Brighton (October 2005)
6. Detristan, T., Ulenspiegel, T., Malcom, Y., von Underduk, M.S.: Polymorphic shell-
code engine using spectrum analysis. In: Phrack, vol. 11 (2003)
7. Fogla, P., Lee, W.: Evading network anomaly detection systems: Formal reasoning
and practical techniques. In: Proceedings of the 13th Conference on Computer and
Communication Security (CCS 2006), Virginia (October 2006)
8. Fogla, P., Sharif, M., Perdisci, R., Kolesnikov, O., Lee, W.: Polymorphic blending
attacks. In: Proceedings of 15th USENIX Security Symposium Abstract (USENIX
Security 2006), Vancouver (July 2006)
9. jp. Advanced Doug lea’s malloc exploits,
http://doc.bughunter.net/buffer-overflow/ advanced-malloc-exploits.html
10. K2. ADMmutate documentation (2003),
http://www.ktwo.ca/ADMmutate-0.8.4.tar.gz
190
S.P. Chung and A.K. Mok
11. mati@see security.com. Savant 3.1 Web Server Buﬀer Overﬂow Tutorial,
http://www.securinfos.info/english/security-whitepapers-hacking-
tutorials/Savant-BO-tutorial.pdf
12. Parampalli, C., Sekar, R., Johnson, R.: A practical mimicry attack against powerful
system-call monitors. In: Proceedings of the ACM Symposium on Information,
Computer and Communications Security (ASIACCS 2008), Tokyo (March 2008)
13. Payer, U., Teuﬂ, P., Lamberger, M.: Hybrid engine for polymorphic shellcode de-
tection. In: Julisch, K., Kr¨ugel, C. (eds.) DIMVA 2005. LNCS, vol. 3548, pp. 19–31.
Springer, Heidelberg (2005)
14. Polychronakis, M., Anagnostakis, K.G., Markatos, E.P.: Network-level polymorphic
shellcode detection using emulation. In: B¨uschkes, R., Laskov, P. (eds.) DIMVA
2006. LNCS, vol. 4064, pp. 54–73. Springer, Heidelberg (2006)
15. Markatos, E.P., Anagnostakis, K.G., Polychronakis, M.: Emulation-Based Detec-
tion of Non-self-contained Polymorphic Shellcode. In: Kruegel, C., Lippmann, R.,
Clark, A. (eds.) RAID 2007. LNCS, vol. 4637, pp. 87–106. Springer, Heidelberg
(2007)
16. Determina Security Research. Windows Animated Cursor Stack Overﬂow Vul-
http://www.determina.com/security.research/vulnerabilities/
nerability,
ani-header.html
17. Rubin, S., Jha, S., Miller, B.: Automatic generation and analysis of nids attacks.
In: Proceedings of the Annual Computer Security Applications Conference 2004
(ACSAC 2004), California (December 2004)
18. Shacham, H.: The geometry of innocent ﬂesh on the bone: Return-into-libc without
function calls (on the x86). In: Proceedings of the 14th Conference on Computer
and Communication Security (CCS 2007), Virginia (October 2007)
19. Sidiroglou, S., Locasto, M.E., Boyd, S.W., Keromytis, A.D.: Building a reactive
immune system for software services. In: Proceedings of the USENIX Annual Tech-
nical Conference 2005, California (April 2005)
20. Song, Y., Locasto, M.E., Stavrou, A., Keromytis, A.D., Stolfo, S.J.: On the infea-
sibility of modeling polymorphic shellcode. In: Proceedings of the 13th Conference
on Computer and Communication Security (CCS 2007), Virginia (October 2007)
21. Toth, T., Kruegel, C.: Accurate buﬀer overﬂow detection via abstract payload
execution. In: Wespi, A., Vigna, G., Deri, L. (eds.) RAID 2002. LNCS, vol. 2516.
Springer, Heidelberg (2002)
22. US-CERT. Vulnerability Note VU#29823: Format string input validation error in
wu-ftpd site exec() function, http://www.kb.cert.org/vuls/id/29823
23. Wang, K., Cretu, G., Stolfo, S.J.: Anomalous payload-based worm detection and
signature generation. In: Valdes, A., Zamboni, D. (eds.) RAID 2005. LNCS,
vol. 3858, pp. 227–246. Springer, Heidelberg (2006)
24. Wang, X., Pan, C.C., Liu, P., Zhu, S.: Sigfree: A signature-free buﬀer overﬂow
attack blocker. In: Proceedings of 15th USENIX Security Symposium Abstract
(USENIX Security 2006), Vancouver (July 2006)
25. Zhang, Q., Reeves, D.S., Ning, P., Iyer, S.P.: Analyzing network traﬃc to detect
self-decryption exploit code. In: Proceedings of the 2nd ACM Symposium on In-
formAtion, Computer and Communications Security (ASIACCS 2007), Singapore
(March 2007)