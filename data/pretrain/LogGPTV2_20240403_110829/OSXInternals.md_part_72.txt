{ kVmmFeature_FastAssist, "FastAssist" },
{ kVmmFeature_XA, "XA" },
{ kVmmFeature_SixtyFourBit, "SixtyFourBit" },
{ kVmmFeature_MultAddrSpace, "MultAddrSpace" },
{ kVmmFeature_GuestShadowAssist, "GuestShadowAssist" },
{ kVmmFeature_GlobalMappingAssist, "GlobalMappingAssist" },
{ kVmmFeature_HostShadowAssist, "HostShadowAssist" },
{ kVmmFeature_MultAddrSpaceAssist, "MultAddrSpaceAssist" },
{ -1, NULL },
};
// For Vmm messages that we print
#define Printf(fmt, ...) printf("Vmm> " fmt, ## __VA_ARGS__)
// PowerPC instruction template: add immediate, D-form
typedef struct I_addi_d_form {
u_int32_t OP: 6; // major opcode
u_int32_t RT: 5; // target register
u_int32_t RA: 5; // register operand
u_int32_t SI: 16; // immediate operand
} I_addi_d_form;
// PowerPC instruction template: unconditional branch, I-form
typedef struct branch_i_form {
u_int32_t OP: 6; // major opcode
u_int32_t LI: 24; // branch target (immediate)
u_int32_t AA: 1; // absolute or relative
u_int32_t LK: 1; // link or not
} I_branch_i_form;
// PowerPC instruction template: add, XO-form
typedef struct I_add_xo_form {
u_int32_t OP: 6; // major opcode
u_int32_t RT: 5; // target register
u_int32_t RA: 5; // register operand A
u_int32_t RB: 5; // register operand B
u_int32_t OE: 1; // alter SO, OV?
u_int32_t XO: 9; // extended opcode
u_int32_t Rc: 1; // alter CR0?
} I_add_xo_form;
// Print the bits of a 32-bit number
void
prbits32(u_int32_t u)
{
u_int32_t i = 32;
for (; i > 16 && i--; putchar(u & 1 OP = 14;
I0->RT = 10;
I0->RA = 0;
I0->SI = 4; // load the value '4' in r10
// addi r11,0,5 ; I1
I1->OP = 14;
I1->RT = 11;
I1->RA = 0;
I1->SI = 5; // load the value '5' in r11
// ba ; I2
// We want to branch to the absolute address of the 5th instruction,
// where the first instruction is at guestTextAddress. Note the shifting.
//
I2->OP = 18;
I2->LI = (guestTextAddress + (4 * 4)) >> 2;
I2->AA = 1;
I2->LK = 0;
// I3 is illegal; already populated in the stream
// add r12,r10,r11 ; I4
I4->OP = 31;
I4->RT = 12;
I4->RA = 10;
I4->RB = 11;
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 127 of 137
I4->OE = 0;
I4->XO = 266;
I4->Rc = 0;
// I5 is illegal or an infinite loop; already populated in the stream
Printf("Fabricated instructions for executing "
"in the guest virtual machine\n");
}
// Function to initialize a memory buffer with some machine code
void
initGuestText_Factorial(u_int32_t *text,
vm_address_t guestTextAddress,
vmm_regs32_t *ppcRegs32)
{
// Machine code for the following function:
//
// int
// factorial(int n)
// {
// if (n ppcGPRs[3] = 10; // factorial(10)
// Set the LR to the end of the text in the guest's virtual address space.
// Our demo will only use the LR for returning to the Vmm by placing an
// illegal instruction's address in it.
//
ppcRegs32->ppcLR = guestTextAddress + vm_page_size - 4;
Printf("Injected factorial instructions for executing "
"in the guest virtual machine\n");
}
// Some modularity... these are the demos our program supports
typedef void (* initGuestText_Func)(u_int32_t *, vm_address_t, vmm_regs32_t *);
typedef struct {
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 128 of 137
const char *name;
initGuestText_Func textfiller;
} Demo;
Demo SupportedDemos[] = {
{
"executes a few hand-crafted instructions in a VM",
initGuestText_Dummy,
},
{
"executes a recursive factorial function in a VM",
initGuestText_Factorial,
},
};
#define MAX_DEMO_ID (sizeof(SupportedDemos)/sizeof(Demo))
static int demo_id = -1;
void
usage(int argc, char **argv)
{
int i;
if (argc != 2)
goto OUT;
demo_id = atoi(argv[1]);
if ((demo_id >= 0) && (demo_id \nSupported demos:\n"
" ID\tDescription\n", PROGNAME);
for (i = 0; i > 16), (version & 0xFFFF));
// Get features supported by this Vmm implementation
features = my_vmm_dispatch(kVmmvGetFeatures);
Printf("Vmm features:\n");
for (i = 0; VmmFeatures[i].mask != -1; i++)
printf(" %-20s = %s\n", VmmFeatures[i].name,
(features & VmmFeatures[i].mask) ? "Yes" : "No");
Printf("Page size is %u bytes\n", vm_page_size);
myTask = mach_task_self(); // to save some characters (sure)
// Allocate chunks of page-sized page-aligned memory
// VM user state
kr = vm_allocate(myTask, &vmmUStatePage, vm_page_size, VM_FLAGS_ANYWHERE);
OUT_ON_MACH_ERROR("vm_allocate", kr);
Printf("Allocated page-aligned memory for virtual machine user state\n");
vmmUState = (vmm_state_page_t *)vmmUStatePage;
// Guest's text
kr = vm_allocate(myTask, &guestTextPage, vm_page_size, VM_FLAGS_ANYWHERE);
OUT_ON_MACH_ERROR("vm_allocate", kr);
Printf("Allocated page-aligned memory for guest's " "text\n");
// Guest's stack
kr = vm_allocate(myTask, &guestStackPage, vm_page_size, VM_FLAGS_ANYWHERE);
OUT_ON_MACH_ERROR("vm_allocate", kr);
Printf("Allocated page-aligned memory for guest's stack\n");
// We will lay out the text and stack pages adjacent to one another in
// the guest's virtual address space.
//
// Virtual addresses increase -->
// 0 4K 8K 12K
// +--------------------------------------------+
// | __PAGEZERO | GUEST_TEXT | GUEST_STACK |
// +--------------------------------------------+
//
// We put the text page at virtual offset vm_page_size and the stack
// page at virtual offset (2 * vm_page_size).
//
guestTextAddress = vm_page_size;
guestStackAddress = 2 * vm_page_size;
// Initialize a new virtual machine context
kr = my_vmm_dispatch(kVmmInitContext, version, vmmUState);
OUT_ON_MACH_ERROR("vmm_init_context", kr);
// Fetch the index returned by vmm_init_context()
vmmIndex = vmmUState->thread_index;
Printf("New virtual machine context initialized, index = %lu\n", vmmIndex);
// Set a convenience pointer to the VM's registers
ppcRegs32 = &(vmmUState->vmm_proc_state.ppcRegs.ppcRegs32);
// Set the program counter to the beginning of the text in the guest's
// virtual address space
ppcRegs32->ppcPC = guestTextAddress;
Printf("Guest virtual machine PC set to %p\n", (void *)guestTextAddress);
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 130 of 137
// Set the stack pointer (GPR1), taking the Red Zone into account
#define PAGE2SP(x) ((void *)((x) + vm_page_size - C_RED_ZONE))
ppcRegs32->ppcGPRs[1] = (u_int32_t)PAGE2SP(guestStackAddress); // 32-bit
Printf("Guest virtual machine SP set to %p\n", PAGE2SP(guestStackAddress));
// Map the stack page into the guest's address space
kr = my_vmm_dispatch(kVmmMapPage, vmmIndex, guestStackPage,
guestStackAddress, VM_PROT_ALL);
Printf("Mapping guest stack page\n");
// Call the chosen demo's instruction populator
(SupportedDemos[demo_id].textfiller)((u_int32_t *)guestTextPage,
guestTextAddress, ppcRegs32);
// Finally, map the text page into the guest's address space, and set the
// VM running
//
Printf("Mapping guest text page and switching to guest virtual machine\n");
kr = my_vmm_dispatch(kVmmMapExecute, vmmIndex, guestTextPage,
guestTextAddress, VM_PROT_ALL);
// Our demo ensures that the last instruction in the guest's text is
// either an infinite loop or illegal. The monitor will "hang" in the case
// of an infinite loop. It will have to be interupted (^C) to gain control.
// In the case of an illegal instruction, the monitor will gain control at
// this point, and the following code will be executed. Depending on the
// exact illegal instruction, Mach's error messages may be different.
//
if (kr != KERN_SUCCESS)
mach_error("*** vmm_map_execute32:", kr);
Printf("Returned to vmm\n");
Printf("Processor state:\n");