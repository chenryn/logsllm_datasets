04
05 import (
06 "fmt"
07 "io"
08 "net/http"
09 "os"
10 )
11
12 // init在main函数之前调用
13 func init() {
14 if len(os.Args) != 2 {
15 fmt.Println("Usage: ./example2 ")
16 os.Exit(-1)
17 }
18 }
19
20 // main是应用程序的入口
21 func main() {
22 // 从Web服务器得到响应
23 r, err := http.Get(os.Args[1])
24 if err != nil {
25 fmt.Println(err)
26 return
27 }
28
29 // 从Body复制到Stdout
30 io.Copy(os.Stdout, r.Body)
31 if err := r.Body.Close(); err != nil {
32 fmt.Println(err)
33 }
34 }
代码清单 5-34 展示了接口的能力以及在标准库里的应用。只用了几行代码我们就通过两个
函数以及配套的接口，完成了curl程序。在第23行，调用了http包的Get函数。在与服务器
成功通信后，http.Get 函数会返回一个 http.Response 类型的指针。http.Response 类
型包含一个名为Body的字段，这个字段是一个io.ReadCloser接口类型的值。
在第30行，Body字段作为第二个参数传给io.Copy函数。io.Copy函数的第二个参数，
接受一个io.Reader 接口类型的值，这个值表示数据流入的源。Body 字段实现了io.Reader
接口，因此我们可以将Body字段传入io.Copy，使用Web服务器的返回内容作为源。
io.Copy 的第一个参数是复制到的目标，这个参数必须是一个实现了 io.Writer 接口的
值。对于这个目标，我们传入了os包里的一个特殊值Stdout。这个接口值表示标准输出设备，
并且已经实现了io.Writer接口。当我们将Body和Stdout这两个值传给io.Copy函数后，
这个函数会把服务器的数据分成小段，源源不断地传给终端窗口，直到最后一个片段读取并写入
终端，io.Copy函数才返回。
io.Copy 函数可以以这种工作流的方式处理很多标准库里已有的类型，如代码清单 5-35
所示。
代码清单5-35 listing35.go
01 // 这个示例程序展示bytes.Buffer也可以
02 // 用于io.Copy函数
03 package main
04
05 import (
06 "bytes"
07 "fmt"
08 "io"
09 "os"
10 )
11
12 // main是应用程序的入口
13 func main() {
14 var b bytes.Buffer
15
16 // 将字符串写入Buffer
17 b.Write([]byte("Hello"))
18
19 // 使用Fprintf将字符串拼接到Buffer
20 fmt.Fprintf(&b, "World!")
21
22 // 将Buffer的内容写到Stdout
23 io.Copy(os.Stdout, &b)
24 }
代码清单 5-35 展示了一个程序，这个程序使用接口来拼接字符串，并将数据以流的方式输
出到标准输出设备。在第14行，创建了一个bytes包里的Buffer类型的变量b，用于缓冲数
据。之后在第 17 行使用 Write 方法将字符串 Hello 写入这个缓冲区 b。第 20 行，调用 fmt
包里的Fprintf函数，将第二个字符串追加到缓冲区b里。
fmt.Fprintf 函数接受一个 io.Writer 类型的接口值作为其第一个参数。由于
bytes.Buffer 类型的指针实现了 io.Writer 接口，所以可以将缓存 b 传入 fmt.Fprintf
函数，并执行追加操作。最后，在第 23 行，再次使用 io.Copy 函数，将字符写到终端窗口。
由于bytes.Buffer类型的指针也实现了io.Reader接口，io.Copy函数可以用于在终端窗
口显示缓冲区b的内容。
希望这两个小程序展示出接口的好处，以及标准库内部是如何使用接口的。下一步，让我们
看一下实现接口的细节。
5.4.2 实现
接口是用来定义行为的类型。这些被定义的行为不由接口直接实现，而是通过方法由用户
定义的类型实现。如果用户定义的类型实现了某个接口类型声明的一组方法，那么这个用户定
义的类型的值就可以赋给这个接口类型的值。这个赋值会把用户定义的类型的值存入接口类型
的值。
对接口值方法的调用会执行接口值里存储的用户定义的类型的值对应的方法。因为任何用户
定义的类型都可以实现任何接口，所以对接口值方法的调用自然就是一种多态。在这个关系里，
用户定义的类型通常叫作实体类型，原因是如果离开内部存储的用户定义的类型的值的实现，接
口值并没有具体的行为。
并不是所有值都完全等同，用户定义的类型的值或者指针要满足接口的实现，需要遵守一些
规则。这些规则在 5.4.3 节介绍方法集时有详细说明。探寻方法集的细节之前，了解接口类型值
大概的形式以及用户定义的类型的值是如何存入接口的，会有很多帮助。
图 5-1 展示了在 user 类型值赋值后接口变量的值的内部布局。接口值是一个两个字长度
的数据结构，第一个字包含一个指向内部表的指针。这个内部表叫作 iTable，包含了所存储的
值的类型信息。iTable 包含了已存储的值的类型信息以及与这个值相关联的一组方法。第二个
字是一个指向所存储值的指针。将类型信息和指针组合在一起，就将这两个值组成了一种特殊
的关系。
图5-1 实体值赋值后接口值的简图
图5-2展示了一个指针赋值给接口之后发生的变化。在这种情况里，类型信息会存储一个指
向保存的类型的指针，而接口值第二个字依旧保存指向实体值的指针。
图5-2 实体指针赋值后接口值的简图
5.4.3 方法集
方法集定义了接口的接受规则。看一下代码清单 5-36 所示的代码，有助于理解方法集在接
口中的重要角色。
代码清单5-36 listing36.go
01 // 这个示例程序展示Go语言里如何使用接口
02 package main
03
04 import (
05 "fmt"
06 )
07
08 // notifier是一个定义了
09 // 通知类行为的接口
10 type notifier interface {
11 notify()
12 }
13
14 // user在程序里定义一个用户类型
15 type user struct {
16 name string
17 email string
18 }
19
20 // notify是使用指针接收者实现的方法
21 func (u *user) notify() {
22 fmt.Printf("Sending user email to %s\n",
23 u.name,
24 u.email)
25 }
26
27 // main是应用程序的入口
28 func main() {
29 // 创建一个user类型的值，并发送通知
30 u := user{"Bill", "PI:EMAIL"}
31
32 sendNotification(u)
33
34 // ./listing36.go:32: 不能将u（类型是user）作为
35 // sendNotification的参数类型notifier：
36 // user类型并没有实现notifier
37 // （notify方法使用指针接收者声明）
38 }
39
40 // sendNotification接受一个实现了notifier接口的值
41 // 并发送通知
42 func sendNotification(n notifier) {
43 n.notify()
44 }
代码清单5-36中的程序虽然看起来没问题，但实际上却无法通过编译。在第10行中，声明
了一个名为notifier的接口，包含一个名为notify的方法。第15行中，声明了名为user
的实体类型，并通过第21行中的方法声明实现了notifier接口。这个方法是使用user类型
的指针接收者实现的。
代码清单5-37 listing36.go：第40行到第44行
40 // sendNotification接受一个实现了notifier接口的值
41 // 并发送通知
42 func sendNotification(n notifier) {
43 n.notify()
44 }
在代码清单5-37的第42行，声明了一个名为sendNotification的函数。这个函数接收
一个 notifier 接口类型的值。之后，使用这个接口值来调用 notify 方法。任何一个实现了
notifier接口的值都可以传入sendNotification函数。现在让我们来看一下main函数，
如代码清单5-38所示。
代码清单5-38 listing36.go：第28行到第38行
28 func main() {
29 // 创建一个user类型的值，并发送通知
30 u := user{"Bill", "PI:EMAIL"}
31
32 sendNotification(u)
33
34 // ./listing36.go:32: 不能将u（类型是user）作为
35 // sendNotification的参数类型notifier：
36 // user类型并没有实现notifier
37 // （notify方法使用指针接收者声明）
38 }
在main函数里，代码清单5-38的第30行，创建了一个user实体类型的值，并将其赋值给变
量u。之后在第32行将u的值传入sendNotification函数。不过，调用sendNotification
的结果是产生了一个编译错误，如代码清单5-39所示。
代码清单5-39 将user类型的值存入接口值时产生的编译错误
./listing36.go:32: 不能将u（类型是user）作为sendNotification的参数类型notifier：
user类型并没有实现notifier（notify方法使用指针接收者声明）
既然user类型已经在第21行实现了notify方法，为什么这里还是产生了编译错误呢？
让我们再来看一下那段代码，如代码清单5-40所示。
代码清单5-40 listing36.go：第08行到第12行，第21行到第25行
08 // notifier是一个定义了
09 // 通知类行为的接口
10 type notifier interface {
11 notify()
12 }
21 func (u *user) notify() {
22 fmt.Printf("Sending user email to %s\n",
23 u.name,
24 u.email)
25 }
代码清单5-40展示了接口是如何实现的，而编译器告诉我们user类型的值并没有实现这
个接口。如果仔细看一下编译器输出的消息，其实编译器已经说明了原因，如代码清单 5-41
所示。
代码清单5-41 进一步查看编译器错误
(notify method has pointer receiver)
要了解用指针接收者来实现接口时为什么user类型的值无法实现该接口，需要先了解方法
集。方法集定义了一组关联到给定类型的值或者指针的方法。定义方法时使用的接收者的类型决
定了这个方法是关联到值，还是关联到指针，还是两个都关联。
让我们先解释一下Go语言规范里定义的方法集的规则，如代码清单5-42所示。
代码清单5-42 规范里描述的方法集
Values Methods Receivers
-----------------------------------------------
T (t T)
*T (t T) and (t *T)
代码清单 5-42 展示了规范里对方法集的描述。描述中说到，T 类型的值的方法集只包含值
接收者声明的方法。而指向T类型的指针的方法集既包含值接收者声明的方法，也包含指针接收
者声明的方法。从值的角度看这些规则，会显得很复杂。让我们从接收者的角度来看一下这些规
则，如代码清单5-43所示。
代码清单5-43 从接收者类型的角度来看方法集
Methods Receivers Values
-----------------------------------------------
(t T) T and *T
(t *T) *T
代码清单 5-43 展示了同样的规则，只不过换成了接收者的视角。这个规则说，如果使用指
针接收者来实现一个接口，那么只有指向那个类型的指针才能够实现对应的接口。如果使用值
接收者来实现一个接口，那么那个类型的值和指针都能够实现对应的接口。现在再看一下代码
清单5-36所示的代码，就能理解出现编译错误的原因了，如代码清单5-44所示。
代码清单5-44 listing36.go：第28行到第38行
28 func main() {
29 // 使用user类型创建一个值，并发送通知
30 u := user{"Bill", "PI:EMAIL"}
31
32 sendNotification(u)
33
34 // ./listing36.go:32: 不能将u（类型是user）作为
35 // sendNotification的参数类型notifier：
36 // user类型并没有实现notifier
37 // （notify方法使用指针接收者声明）
38 }
我们使用指针接收者实现了接口，但是试图将 user 类型的值传给 sendNotification 方
法。代码清单5-44 的第30 行和第32 行清晰地展示了这个问题。但是，如果传递的是 user 值
的地址，整个程序就能通过编译，并且能够工作了，如代码清单5-45所示。
代码清单5-45 listing36.go：第28行到第35行
28 func main() {
29 // 使用user类型创建一个值，并发送通知