OUT o_signname text,  
OUT o_email text,  
OUT o_qq numeric  
)  
as $BODY$  
declare  
begin  
select userid,engname,cnname,occupation,birthday,signname,email,qq  
into o_userid,o_engname,o_cnname,o_occupation,o_birthday,o_signname,o_email,o_qq  
from user_info where userid=i_userid;  
insert into user_login_rec (userid,login_time,ip) values (i_userid,now(),inet_client_addr());  
return;  
end;  
$BODY$  
language plpgsql;  
```  
退出函数 :   
```  
create or replace function f_user_logout  
(i_userid int,  
OUT o_result int  
)  
as $BODY$  
declare  
begin  
insert into user_logout_rec (userid,logout_time,ip) values (i_userid,now(),inet_client_addr());  
o_result := 0;  
return;  
exception   
when others then  
o_result := 1;  
return;  
end;  
$BODY$  
language plpgsql;  
```  
#### 代理节点 :   
创建server  
```  
CREATE SERVER digoal FOREIGN DATA WRAPPER plproxy  
OPTIONS (  
connection_lifetime '1800',  
disable_binary '1',  
p0 'dbname=digoal0 host=127.0.0.1 port=1999 client_encoding=UTF8',  
p1 'dbname=digoal1 host=127.0.0.1 port=1999 client_encoding=UTF8',  
p2 'dbname=digoal2 host=127.0.0.1 port=1999 client_encoding=UTF8',  
p3 'dbname=digoal3 host=127.0.0.1 port=1999 client_encoding=UTF8'  
);  
```  
创建user mapping  
```  
CREATE USER MAPPING FOR proxy SERVER digoal  
OPTIONS (user 'digoal', password 'digoal');  
```  
赋权server  
```  
grant usage on foreign server digoal to proxy;  
```  
创建代理函数:  
```  
\c proxy proxy  
```  
登录函数:   
```  
CREATE OR REPLACE FUNCTION f_user_login(i_userid int,  
OUT o_userid int,  
OUT o_engname text,  
OUT o_cnname text,  
OUT o_occupation text,  
OUT o_birthday date,  
OUT o_signname text,  
OUT o_email text,  
OUT o_qq numeric  
)  
as $BODY$  
    CLUSTER 'digoal';  
    RUN ON i_userid;  
    target digoal.f_user_login;  
$BODY$  
LANGUAGE plproxy;  
```  
退出函数:   
```  
create or replace function f_user_logout  
(i_userid int,  
OUT o_result int  
)  
as $BODY$  
    CLUSTER 'digoal';  
    RUN ON i_userid;  
    target digoal.f_user_logout;  
$BODY$  
language plproxy;  
```  
## pgbench压力测试 :   
```  
postgres@db-digoal-> cat begin.sh  
#!/bin/bash  
nohup pgbench -M extended -r -c 8 -f /home/postgres/digoal_bench/login.sql -j 8 -n -T 180 -h 127.0.0.1 -p 1998 -U proxy proxy0 >>./login_0.log 2>&1 &  
nohup pgbench -M extended -r -c 8 -f /home/postgres/digoal_bench/login.sql -j 8 -n -T 180 -h 127.0.0.1 -p 1998 -U proxy proxy1 >>./login_1.log 2>&1 &  
nohup pgbench -M extended -r -c 8 -f /home/postgres/digoal_bench/login.sql -j 8 -n -T 180 -h 127.0.0.1 -p 1998 -U proxy proxy2 >>./login_2.log 2>&1 &  
nohup pgbench -M extended -r -c 8 -f /home/postgres/digoal_bench/login.sql -j 8 -n -T 180 -h 127.0.0.1 -p 1998 -U proxy proxy3 >>./login_3.log 2>&1 &  
nohup pgbench -M extended -r -c 8 -f /home/postgres/digoal_bench/logout.sql -j 8 -n -T 180 -h 127.0.0.1 -p 1998 -U proxy proxy0 >>./logout_0.log 2>&1 &  
nohup pgbench -M extended -r -c 8 -f /home/postgres/digoal_bench/logout.sql -j 8 -n -T 180 -h 127.0.0.1 -p 1998 -U proxy proxy1 >>./logout_1.log 2>&1 &  
nohup pgbench -M extended -r -c 8 -f /home/postgres/digoal_bench/logout.sql -j 8 -n -T 180 -h 127.0.0.1 -p 1998 -U proxy proxy2 >>./logout_2.log 2>&1 &  
nohup pgbench -M extended -r -c 8 -f /home/postgres/digoal_bench/logout.sql -j 8 -n -T 180 -h 127.0.0.1 -p 1998 -U proxy proxy3 >>./logout_3.log 2>&1 &  
postgres@db-digoal-> cat login.sql  
\setrandom userid 0 50000000  
SELECT f_user_login(:userid);  
postgres@db-digoal-> cat logout.sql  
\setrandom userid 0 50000000  
SELECT f_user_logout(:userid);  
cat .pgpass 略  
```  
## 测试结果 :   
```  
postgres@db-digoal-> cat login_0.log   
transaction type: Custom query  
scaling factor: 1  
query mode: extended  
number of clients: 8  
number of threads: 8  
duration: 180 s  
number of transactions actually processed: 665468  
tps = 3695.624216 (including connections establishing)  
tps = 3695.675102 (excluding connections establishing)  
statement latencies in milliseconds:  
        0.002366        \setrandom userid 0 50000000  
        2.158355        SELECT f_user_login(:userid);  
postgres@db-digoal-> cat login_1.log   
transaction type: Custom query  
scaling factor: 1  
query mode: extended  
number of clients: 8  
number of threads: 8  
duration: 180 s  
number of transactions actually processed: 665288  
tps = 3694.720318 (including connections establishing)  
tps = 3694.777428 (excluding connections establishing)  
statement latencies in milliseconds:  
        0.002289        \setrandom userid 0 50000000  
        2.159063        SELECT f_user_login(:userid);  
postgres@db-digoal-> cat login_2.log   
transaction type: Custom query  
scaling factor: 1  
query mode: extended  
number of clients: 8  
number of threads: 8  
duration: 180 s  
number of transactions actually processed: 645371  
tps = 3585.275832 (including connections establishing)  
tps = 3585.340161 (excluding connections establishing)  
statement latencies in milliseconds:  
        0.002341        \setrandom userid 0 50000000  
        2.225684        SELECT f_user_login(:userid);  
postgres@db-digoal-> cat login_3.log   
transaction type: Custom query  
scaling factor: 1  
query mode: extended  
number of clients: 8  
number of threads: 8  
duration: 180 s  
number of transactions actually processed: 732428  
tps = 4068.985625 (including connections establishing)  
tps = 4069.059175 (excluding connections establishing)  
statement latencies in milliseconds:  
        0.002358        \setrandom userid 0 50000000  
        1.960421        SELECT f_user_login(:userid);  
postgres@db-digoal-> cat logout_0.log   
transaction type: Custom query  
scaling factor: 1  
query mode: extended  
number of clients: 8  
number of threads: 8  
duration: 180 s  
number of transactions actually processed: 774532  
tps = 4302.899259 (including connections establishing)  
tps = 4302.942647 (excluding connections establishing)  
statement latencies in milliseconds:  
        0.002279        \setrandom userid 0 50000000  
        1.853726        SELECT f_user_logout(:userid);  
postgres@db-digoal-> cat logout_1.log   
transaction type: Custom query  
scaling factor: 1  
query mode: extended  
number of clients: 8  
number of threads: 8  
duration: 180 s  
number of transactions actually processed: 773650  
tps = 4298.002332 (including connections establishing)  
tps = 4298.047243 (excluding connections establishing)  
statement latencies in milliseconds:  
        0.002308        \setrandom userid 0 50000000  
        1.855774        SELECT f_user_logout(:userid);  
postgres@db-digoal-> cat logout_2.log   
transaction type: Custom query  
scaling factor: 1  
query mode: extended  
number of clients: 8  
number of threads: 8  
duration: 180 s  
number of transactions actually processed: 752476  
tps = 4180.389824 (including connections establishing)  
tps = 4180.437536 (excluding connections establishing)  
statement latencies in milliseconds:  
        0.002331        \setrandom userid 0 50000000  
        1.908120        SELECT f_user_logout(:userid);  
postgres@db-digoal-> cat logout_3.log   
transaction type: Custom query  
scaling factor: 1  
query mode: extended  
number of clients: 8  
number of threads: 8  
duration: 180 s  
number of transactions actually processed: 855429  
tps = 4752.346080 (including connections establishing)  
tps = 4752.383363 (excluding connections establishing)  
statement latencies in milliseconds:  
        0.002288        \setrandom userid 0 50000000  
        1.677890        SELECT f_user_logout(:userid);  
```  
## 小结 :   
每秒处理事务数 : 32581  
平均耗时 : 1.974879125 毫秒.  
数据库节点平均负载 : 6  
数据库节点平均空闲 : 78%  
### 另一组测试的测试数据 :   
8000W数据分布到4个节点,根据PK进行更新。  
更新SQL请求频率 : 33027 次每秒  
平均SQL处理耗时 : 1.9352235 毫秒  
从测试结果来看，PLPROXY部署的环境得到的性能提升是超线性的。4台服务器得到的性能大于等于4倍单节点数据库的性能。  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")