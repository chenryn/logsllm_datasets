both meaningful and false-positive reports, which requires massive
effort to distinguish them from another and might, in worst-case,
result in a denial-of-service for the machine running the reporting
endpoint ("They accidentally DDoSed their endpoint because they had
a policy misconfiguration which generated, like, hundreds of errors
per page."(P5)).
Key Takeaways: (1) Application-based roadblocks such as
third-party services or libraries, inline scripts, and inline
events hamper the deployment process. (2) Also, techno-
logical limitations like browser inconsistencies and missing
framework support, knowledge gaps introduced by mislead-
ing information sources, or cost-effectiveness considerations
are blocking factors for CSP adaption. (3) The false-positive
reports and the number of reported violation events further
complicate the maintenance of a CSP.
4.4 Deployment Strategies
During the interviews, we observed different strategies for the ini-
tial deployment of a CSP, principles of how to deploy and maintain
a CSP, as well as strategies to solve certain problems during de-
ployment. Those problems include inline JavaScript code, inline
events, and the handling of third-party scripts. While the interview
mainly shed light on strategies for the initial deployment and the
deployment principles, the coding task showed detailed strategies
into how to solve problems regarding inline code, events, and third-
parties. Figure 4 gives an overview about the strategies that the
participants mentioned during the interview or strategies they have
taken into account for the coding task.
Initial Deployment. Nine participants claim that they tend to
4.4.1
start with a rather restrictive policy to end up with a sane one. The
resulting error messages, e.g., in the browser’s developer console,
can be used to identify the fragments in the code that are blocked
by the CSP. Six of the participants that choose this way used the
restrictive policy in the enforcement mode, while three tend to
use the restrictive policy in the report-only mode. The remaining
three participants are, however, starting with a rather lax CSP
and improve this one until they arrive at a secure policy without
insecure practices such as unsafe-inline. By choosing this path, the
participants were not flooded with error messages but were able
to solve one problem after another. Four of the participants used
an automatically generated CSP as starting point for their CSP
deployment. To do so, they used tools like CSPer.io, the Mozilla
CSP Laboratory, or the report.URI wizard ("Yes because I would then
really install this Firefox add-on if that’s okay. That always gives me
the fastest baseline where I can then build on it."(P10)). Those tools,
however, pushed the participants into allowing third parties via
their domain or the full URL rather than using nonces. In addition
to that, none of the tools solved the problems regarding inline codes
and events. They either allowed the execution via the unsafe-inline
source-expression, which resulted in a trivially bypassable policy,
or they blocked it, which results in a loss of functionality.
4.4.2 Deployment Principles. Throughout the interview, the par-
ticipant shed light on different deployment principles for CSP. As
it was initially thought of by the team that is curating the CSP
standard, four developers use the report-only mode to debug the
CSP they created in the live environment, such that they do not
destroy any functionality during that experiment. Not only for
the initial deployment but also for general CSP maintenance, the
process in how people managed to get to a sane CSP involved an
iterative deployment cycle where they started with a rather lax
CSP and, over the course of time, strengthen their policy. While
the before mentioned principles are finding their use-cases in sce-
narios where the developer thought about CSP after creating the
Web application, two participants mentioned CSP as an integral
part of their development, which drastically reduced the amount
Figure 4: Categories of Strategies
InitialDeploymentDeploymentPrinciplesRestrictive RO-PolicyRestrictiveEnforcementPolicyLax CSPStart withgenerated CSPUse tools forInitialDeploymentRO to debuglive AppIn-the-fieldTestingIterativeDeploymentCSP IntegralPart ofDevelopmentOne generalCSPSeparate CSPfor SubpagesFunctionality >SecurityUse Meta TagCSPUsed ToolsduringDeploymentProblem Soliving StrategiesInlineCodeInlineEvents3rd-PartiesExternalizeInline CodeCodeHashingTools toHelp withinline codeUseunsafe-inline asFallbackNonceinlinescriptsExternalizeEventsChangingFunctionalityUse script-src-attrEventHashingUse unsafe-inlineSelf-host3rd-PartyCodeRemoveDepen-denciesNonce 3rd-PartySession 11C: Software Development and Analysis CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3093of application roadblock occurring during this process. Six of the
developers mentioned using one general CSP for the whole applica-
tion, while two others thought about using separate CSPs for every
subpage, and three evaluated both of those principles. To actually
deploy the CSP, our participants not only used HTTP headers but
two of them used HTML meta tags instead to deploy their CSP.
Features like frame-ancestors which defends against clickjacking
attacks or the definition of a report-uri to easier maintain the policy
can, for security reasons, not be used in a CSP defined inside the
HTML structure. Thus, a developer should prefer to deploy CSP
via HTTP header rather than a deployment inside the HTML. One
essential part of the deployment procedure is the usage of tools.
To ease the maintenance of CSP, two participants used a CSP Pre-
processor. To know if the created CSP is actually secure, tools for
CSP evaluation such as Google’s CSP Evaluator are used by nine of
the participants. Also, tools for the evaluation of the CSP violation
reports were used by six participants. Three participants claimed
that the functionality of the Web service is usually more important
than the security for many companies ("But it’s very easy to break
your site with CSP and the wrong CSP. You’re forgetting that you load
[...] some payment method on this page and not on every other page.
And so many people have problems when the site goes down."(P3)).
4.4.3 Problem Solving Strategies. In order to solve some of the
application issues mentioned in Section 4.3.2, the participants had
several different strategies.
Inline JavaScript: to allow JavaScript code to present in inline
script tags, seven of the participants decided to move the inline
code to a self-hosted external script. Therefore, the script then
can be added to the allow-list using the ’self’ source-expression.
One participant used hashes of the code in order to allow it, and
because he used a chromium-based browser, the developer console
was used to generate the code hashes. Three participants allowed
the execution of inline scripts using nonces, while one of them
also mentioned the possibility to use unsafe-inline as a fallback for
non-CSP Level 2 compliant browsers.
Inline Event Handlers: another problem, that especially oc-
cured during the programming task, was the presence of inline
event handlers. Similar to the inline code problem, the participants
decided to programmatically add those events to the HTML ele-
ments and allow these code snippets using the aforementioned
technique. While four participants thought about using hashes to
allow the events, the required presence of the unsafe-hashes ex-
pression discouraged them from doing so. Notably, one participant
tried to use this source expression together with hashes to allow
the inline events. This participant used this inside the script-src-attr
expression, which is one of CSP’s newest features that only apply
to JavaScript defined within HTML attributes. However, because
this directive was just added to the standard, it has not been im-
plemented by all major browsers yet, which results in a loss of
functionality or security depending on the CSP. One of the par-
ticipants also came to the conclusion that using the unsafe-inline
keyword is the only way to allow events in CSP.
Third Parties: There are several different solutions to allow a
third-party resource in a CSP. Ten participants allowed the whole
domain of a third party, mainly due to bad information sources or
due to using an auto-generated CSP as starting point. Only one par-
ticipant decided to allow the full URL, so only the specific resource.
Notably, four participants thought about the possibility to self-host
the third-Party code such that it falls under the source-expression
self. While this would have been easy for the third-party resources
we have used (Bootstrap & jQuery), it might get more complicated
in case of other third parties that are again loading other assets. One
participant also thought about changing the application such that
certain third-party resources are not necessary anymore, e.g., by mi-
grating to Bootstrap 5, which works without jQuery. The easiest and
most secure solution, to use nonces, was used by none of our par-
ticipants. However, this lack of knowledge about the capabilities of
nonces might originate from the used information sources because
highly ranked sources such as content-security-policy.com,
advertise nonces as a way to allow inline scripts and get rid of
unsafe-inline, rather than informing people about the fact that they
can be used to allow any source [12]. Notably, the information
sources also do not mention that hashes will only work for third-
party scripts if those scripts allow access to their source code via
the Cross-Origin Resource Sharing HTTP header [11]. We have no-
tified the corresponding information sources about their potential
for improvement.
Key Takeaways: (1) Both allowing scripts via their domain
and using hashes or nonces are used to allow scripts, while
usage of the latter is focused on inline code. (2) Developers
tend to use one general CSP and tend to start with a strict
policy to get more error messages. (3) The usage of tools for
generating an initial CSP, evaluating the policy, or analyzing
the violation reports seems common for CSP deployment.
5 DISCUSSION
In this section, we investigate the relation between certain road-
blocks and strategies with axial coding. To this end, we investigated
co-occurrences of the primary codes Roadblock and Strategy. In ad-
dition to that, we give suggestions to improve CSP as a mechanism
and the deployment process of CSP. We also interpret the outcome
of the drawing task and discuss the limitations of our work.
5.1 Relations of Roadblocks and Strategies
The roadblock regarding missing framework support was often
mentioned alongside with the strategy of using nonces for inline
scripts (three times), the strategy of using hashes to allow inline
events (two times), as well as using unsafe-inline to (two times).
The participants complained about missing support for hashes or
nonces in the frameworks that they are using in their company.
This missing support was one reason why participants admit to
having included unsafe-inline in their policy instead of using nonces
or hashes for their inline scripts.
The strategy to use one general CSP for a Web application, as
well as the strategy to use separate CSPs for each page, were both
mentioned two times together with the roadblock of the CSP main-
tenance requiring too much effort. The participants argue that using
one general CSP for all pages results in a policy with a lot of entries,
which makes it complicated to maintain all those values. On the
Session 11C: Software Development and Analysis CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3094other hand, participants argue that using separate CSP for sub-
pages might result in a vast amount of different CSPs, resulting in a
huge effort to maintain all those small policies. As Some et al. [46]
showed, having multiple CSPs on a single origin can still expose a
site to a successful XSS exploit if one of these policies is bypassable
or not even set on certain pages.
In two of our interviews, the participants reasoned about using
hashes to allow event handlers. However, due to the incomplete
information on how to actually allow them in both Chrome and
Firefox, those participants backed away from using hashes. In gen-
eral, online information sources often lack important information.
This not only applies to hash support but lacked important links,
e.g., from the explanation of ’unsafe-inline’ to nonces, such
that developers know how to handle inline scripts.
Key Takeaways: The strategy of using nonces to allow
inline code gets hard to complete if the used framework or
its plugins are not CSP compliant.
Improvement Suggestions. The information sources used by
5.1.1
our participants partly pushed them into implementation paths
that caused more work than necessary. Also, the presented infor-
mation was incomplete and did, in many cases, not recommend
the best practices in terms of CSP deployment. In particular, the
sources proposed to use unsafe-inline to resolve problems with in-
line scripts. While at least some sources mentioned that this makes
the policy trivially bypassable, none of them directly linked to the
more secure alternative of using nonces. Similarly, although they
all noted events could be added programmatically, some guides first
presented hashes as a way to solve the issue and then provided the
developer with information about the inconsistent support for that
method and the requirement to use unsafe-hashes.
In addition to that overwhelming amount of information to solve
specific issues, the examples presented as the primary example of
a CSP always included entire domains allowed in the policy. This
might cause the misconception that nonces cannot be used for
third-party resources and ignores the fact that allowing complete
URLs is the more secure way of creating a policy. Instead of present-
ing the CSP Level 1 way of allowing JavaScript in the application,
the information sources should emphasize the usage of nonces in
CSP. The best practices for CSP deployment, as they are recom-
mended by Google with strict CSP [17], are a good and proactive
approach to arrive at a secure CSP. However, the missing support
in browsers and frameworks for the recommended features might
prevent developers from choosing strict CSP. Based on the ideas
from strict CSP and the problems and strategies that we identified
throughout the interview and the coding task, we created a deci-
sion tree (see Figure 5) that can be used by developers to start with
CSP deployment. Notably, this tree does not take into account edge
cases like self hosted script-gadgets [34, 43] or vulnerable JSONP
endpoints [58]. Also, the common practice of third parties to pro-
grammatically add scripts [49] is not considered here. However,
as a developer, it is possible to check the own resources and/or
self propagate the nonces to all programmatically added scripts by
hooking JavaScript’s createElement API.
Figure 5: Developer decision tree to create a sane CSP.
As mentioned in Section 4.4.1 tools can be used to generate a
CSP. However, in the case of inline code, they are doing an un-
satisfying job. Either they include the ’unsafe-inline’ keyword,
which makes the policy trivially bypassable, or they are just block-
ing inline code, which requires the developer to externalize it. None
of the tools emphasize the usage of nonces in the CSP, but they
instead allow URLs or even entire domains. Also, those tools take
an existing page and build a CSP around it, which is possible, but
arguably the wrong way of approaching CSP deployment. A tool
that would help the developers from scratch, like a built-in CSP
feature in common IDEs, would likely be more useful. Such a tool
would not only be capable of warning users as soon as they use
inline scripts or events, but it can also help with the computation
of hashes or the propagation of nonces for the JavaScript assets. In
addition to that, known and widely used frameworks should assist
the developers in creating and propagating nonces to all scripts
present in the application and should also enforce this behavior
for plugins that are available for their platform. Also, many tools
that are used to check the security of a deployed CSP or header
configurations in general, as mentioned in Section 4.4.2, can be built
into IDE extensions. However, it would also be handy for develop-
ers if warnings about a misconfigured CSP, or security headers in
general, would be printed in the developer console because every
participant of our study used this browser tool. If the developer
would get the help and the information they need by default, e.g.,
Does your setup / frameworksupport the use of nonces?YesUse nonces for all assetsCan you generate randomnumbers in the backened andpass them to the frontend?NoYesNoYesNoDo you have inlineJavaScript in your App?Are inline events used in your App?Programmatically add themYesYesNoDo you have self-hostedscripts in your App?NoExternalize andself-host thoseAllow 'self'YesNoDo you have third-partyscripts in your App?Allow thoseas full URLssaneCSPSession 11C: Software Development and Analysis CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3095via the browser, it would ease the deployment and maintenance of
CSP. By lowering the engineering effort required to deploy a CSP,
problems like the monetary factor might have a lower impact on
the security of real-world policies. Some browsers already try to
give rudimentary help for CSP deployment, like printing the script
hashes in the console error messages. By standardizing those warn-
ings and the error reporting in general, all developers, independent
of the browser, can benefit from those messages, as long as everyone
is adhering to the standard. This standard compliance, however,
seems to be a problem in general. Browser inconsistencies like
the different support for a feature such as ’unsafe-hashes’ and
’strict-dynamic’, or the inconsistent way of handling nonces or
WebSocket connections, cause additional confusion for developers
in deciding if and how to use these features.
5.2 Drawing Task
As mentioned in Section 3.3, we ask the participants to draw and
explain their favorite XSS vulnerability, so as to better understand
the participants’ mindset about XSS and CSP. All participants freely
chose to draw XSS as a server-side issue. Although one partici-
pant at least mentioned ”DOM-based XSS”, this indicates that the
client side of the problem is less prominent in developers’ minds.
Eight participants decided to draw a stored server-side XSS vulner-
ability, one drew a reflected server-side XSS, and two participants
explained both variants, which indicates that the stored variant is
more prevalent in the developer’s mind. The prominence of the
server-side might be one reason why two of our participants reveal
certain misunderstandings throughout the drawing task. XSS seems
to be a server-side issue in their mindset, so the server is loading
the malicious payload. Similarly, they thought that the server also
enforces the CSP. This focus on the server-side was also reported
by one of our participants, who is working as a consultant: "The