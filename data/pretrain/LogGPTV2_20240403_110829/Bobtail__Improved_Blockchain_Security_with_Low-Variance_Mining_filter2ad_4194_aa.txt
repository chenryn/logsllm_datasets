title:Bobtail: Improved Blockchain Security with Low-Variance Mining
author:George Bissias and
Brian Neil Levine
Bobtail: Improved Blockchain Security
with Low-Variance Mining
George Bissias
Brian N. Levine
University of Massachusetts Amherst
University of Massachusetts Amherst
PI:EMAIL
PI:EMAIL
Abstract—Blockchain systems are designed to produce blocks
at a constant average rate. The most popular systems currently
employ a Proof of Work (PoW) algorithm as a means of creating
these blocks. An unfortunate limitation of all deployed PoW
blockchain systems is that the time between blocks has high
variance. For example, Bitcoin produces, on average, one block
every 10 minutes. However, 5% of the time, Bitcoin’s inter-block
time is at least 30 minutes.
In this paper, we show that high variance is at the root
of fundamental attacks on PoW blockchains. We propose an
alternative process for PoW-based block discovery that results
in an inter-block time with signiﬁcantly lower variance. Our
algorithm, called Bobtail, generalizes the current algorithm,
which uses a single PoW sample, to one that incorporates k
samples. We show that the variance of inter-block times decreases
as k increases. Bobtail signiﬁcantly thwarts doublespend and
selﬁsh mining attacks. For example, for Bitcoin and Ethereum,
a doublespending attacker with 35% of the mining power will
succeed with 44% probability when the merchant sets up an
embargo of 1 block; however, when k ≥ 40, the probability of
success for the same attacker falls to less than 1%. Similarly,
for Bitcoin and Ethereum currently, a selﬁsh miner with 45%
of the mining power will claim about 71% of blocks; however,
when k ≥ 20, the same miner will ﬁnd that selﬁsh mining is less
successful than honest mining. We also investigate attacks newly
made possible by Bobtail and show how they can be defeated. The
primary costs of our approach are larger blocks and increased
network trafﬁc.
I.
INTRODUCTION
Blockchain systems are designed to produce blocks of
validated transactions at a constant average rate. The most
popular systems employ a Proof of Work (PoW) algorithm as
a means of creating these blocks [35], including Bitcoin [8],
Bitcoin Cash [9], Ethereum [21], and Litecoin [33]. Whether
a pure PoW or hybrid approach [11, 16, 31], the two most
fundamental attacks on PoW blockchains are selﬁsh mining [23]
and the doublespend [35].
A direct consequence of using a PoW algorithm is that
the time between blocks has high variance and the distribution
of inter-block times has a very long tail. As we show in this
paper, high variance is responsible for enabling doublespend
and selﬁsh mining attacks. Generally, miners in all deployed
Network and Distributed Systems Security (NDSS) Symposium 2020
23–26 February 2020, San Diego, CA, USA
ISBN 1-891562-61-4
https://dx.doi.org/10.14722/ndss.2020.23095
www.ndss-symposium.org
systems craft blocks by repeatedly changing a nonce in the
block header until the cryptographic hash of that header is less
than a target value t, 0  1. We show that variance in block discovery time is
reduced by O(1/k) relative to the status quo.
• We demonstrate that low-variance mining signiﬁcantly
mitigates the threats to security posed by doublespend and
selﬁsh mining attacks, as stated above.
• We demonstrate that, due to our protocol mechanisms,
Bobtail mining has the same or lower orphaned block rate
as existing schemes.
• We quantify the increased network overhead of Bobtail,
and demonstrate how these costs can be kept minimal by
leveraging the statistical characteristics that we derive.
• We show that new intra-block DoS and withholding attacks
are possible for Bobtail. However, through careful protocol
design, these attacks are mitigated.
Bobtail is also a convenience for consumers, who would
beneﬁt from reduced block time variance and a more consistent
ﬂow of validated transactions through the system.
We close by presenting related work and offering concluding
remarks. We begin by deﬁning our problem statement and the
Bobtail mining process and network protocol.
II. AN EXPLANATION OF THE BOBTAIL PROTOCOL
In this section, we provide a high-level overview of the
Bobtail protocol and its features.
Summary. In current PoW systems, miners iterate on a nonce
within a block header until the hash of the header is equal to
or lower than a known target t. The new block is announced
to all other miners, who reference this hash value within the
header of the next block that they will mine. This process
creates a blockchain in that each subsequent block points to
the previous. Similarly, in Bobtail, miners iterate a nonce in a
Imagine that the mining process is carried out for exactly
h hashes during time interval I, generating hash values
H1, . . . , Hh from [0, S] uniformly at random. Now deﬁne Vi
to be the value of the ith order statistic at the end of I, i.e.
Vi = H(i) in standard notation. Let Wk be a random variable
representing the average value over the k-lowest order statistics
after h hashes.
Vi.
(1)
k(cid:88)
i=1
Wk =
1
k
Wk constitutes the collective mining proof for the entire
network. Our Bobtail mining criterion says that a new block is
discovered when a realized value of Wk falls at or below the
target tk:
(2)
Notably, this approach is a generalization of current systems,
which are the special case where k = 1.
wk ≤ tk.
The primary goals of our paper are therefore to show the
following, given values of k > 1.
tion IV).
more difﬁcult to carry out as k increases (Section V).
• Inter-block time variance is signiﬁcantly reduced (Sec-
• Selﬁsh mining and doublespend attacks are signiﬁcantly
• Costs are relatively small. Orphan rates are no worse than
for k = 1 (Section VI), and the increases in block size and
network trafﬁc are small and manageable (Section VII).
• New attacks made possible by setting k > 1 are easily
mitigated (Section VIII).
B. Protocol Details
So that our results are presented in a concrete context, we
begin by stating the details of the Bobtail network protocol.
Blocks. Bobtail blocks, illustrated in Fig. 2, consist of several
components.
• A block header H contains the same ﬁelds as a conven-
tional block header (e.g., in Bitcoin or Ethereum) and one
additional ﬁeld, described below.
• Proof package K is a collection of k proof sets. Each
proof set Pi contains a payout address for the miner,
2
Proof 1Miner-2Miner-3Miner-1Miner-4Proof 2Proof 4Proof 3Proof kProof k+1…Txns(Graphene)HeaderCoinbaseProofs(Graphene)SignatureMiner-3Whether by virtue of network delay or by intentional
deviation from the protocol, the value of V1 in the block might
be greater than the lowest proof value overall. In such cases,
we emphasize this difference by referring to the actual lowest
proof value as the 1OS (ﬁrst order statistic).
Like other PoW blockchains, miners select new nonces and
generate proofs continuously. In Section VII, we show how a
miner can precisely determine the probability that any given
proof will eventually be included in the mining package. Once
a proof is discovered having sufﬁcient probability of inclusion,
the values in Pi are propagated. Proof sets corresponding to
proofs with sufﬁciently low value (according to a threshold to
be deﬁned later) are propagated throughout the network.
We say that a block can be assembled when (i) the mean
of the k proofs, V1, . . . Vk, is less than or equal to target tk;
(ii) the package is signed by the miner who generated V1 using
address a1; (iii) supports s2, . . . sk are greater than or equal to
V1.
Current blockchains place the coinbase reward within the
Merkle root. In Bobtail, these rewards are unknown at the time
of mining. Therefore, the set C of k coinbase transactions is
listed separately. The coinbase payout of the block is distributed
according to the scheme described in Section VIII. Because
signature S covers set C, and the signature is tied to the lowest
proof value, the coinbase values are determined entirely by the
block miner. However, any block whose set C fails to follow
protocol conventions is considered invalid, and will be ignored
by other miners.
The assembled block, comprised of H,K,C,S, and T1, is
propagated throughout the network. T1 and the proof package
K can both be expressed very efﬁciently using Graphene [36,
38] or a similar compression algorithm. Receivers validate
the three assembling rules stated above, that the signature
uses a1 from P1, and that the coinbase is allocated fairly. If
validation succeeds, then the block is added to the blockchain
and propagated to peers.
Difﬁculty adjustment. Bobtail is compatible with any de-
ployed difﬁculty adjustment algorithm (DAA). For example,
Bitcoin adjusts roughly once every two weeks1. It uses the
mean block time for the last 2016 blocks to estimate the actual
difﬁculty at which the miners were operating; then the difﬁculty
parameter d is adjusted up or down in order to ensure that the
expected block time is 10 minutes if miners continue mining
at the same rate. At a given difﬁculty d, the target tk can be
derived from d in the same manner that it is for Bitcoin2, which
involves translating integer d into a threshold 256-bit arithmetic
value (i.e., one that supports arithmetic operations). The DAAs
used in Bitcoin Cash [9] and Ethereum [21] are similarly fully
compatible with Bobtail.
Fork-choice rule. If multiple miners generate proofs with value
low enough to mine a block with the same parent, then there
can arise ambiguity over which extends the main chain, i.e. the
chain that honest miners will continue to extend. To avoid this
ambiguity, we deﬁne the main chain to be the one comprising
the most aggregate work, from the genesis block up to the
Fig. 2: Bobtail blocks are a superset of existing PoW schemes;
items already present in a typical PoW blockchain appear in blue.
Bobtail blocks are additionally signed by the miner of V1 and add
proof sets contributed by other miners.
values necessary for creating valid proof of work, and
other values used for thwarting attacks. Proof sets are
hashed to create PoW, i.e. proof Vi = h(Pi). The sets are
ranked so that V1 is deﬁned as the smallest value or ﬁrst
order statistic.
• A set C of coinbase transactions awarded to the miners
of the k proof sets.
• Cryptographic signature S of the set (H,K,C), which
must be generated with the private key that matches the
payout address in P1. This thwarts an attack detailed in
Section VIII.
• The body of the block is a set T1 of valid previously
unconﬁrmed transactions. The subscript denotes that the
miner of V1 selects the transactions.
Mining. Bobtail mining is a generalization of the procedure
implemented in conventional PoW blockchains. Each miner
seeks to receive coinbase reward by generating one of the k
proof sets P1, . . . ,Pk included in K. Each proof set Pi contains
the following ﬁelds.
• o is the hash of the signature S of the prior block.
• mi is the root of a Merkle tree containing transactions Ti.
• ai is the miner’s coinbase payout address.
• si is a supporting proof or support, which we deﬁne as
the smallest proof value among all proof sets (pointing
to the same prior block) that the miner has seen to date.
This value helps prevent orphan blocks and withholding
attacks.
• Ni is the hash of set Ni = (v, d, ei, ni, . . .) containing
the protocol version v, current difﬁculty d, timestamp ei,
and nonce ni. Note that v and d are taken from H. We
allow zero or more optional arguments in Ni that may be
required by the blockchain Bobtail is applied to.
To be eligible for inclusion in the same block, proof sets must
use the same prior block o, version v, and difﬁculty d.
1https://github.com/bitcoin/bitcoin/blob/78dae8cacc/src/pow.cpp#L49
2https://github.com/bitcoin/bitcoin/blob/78dae8cacc/src/pow.cpp/#L80
3
Header Hversion vprior odifﬁculty dtimestamp eBlockproof set PiMerkle root mi address ai support si hash Ni Transactions T1transaction 1, transaction 2, …where         Vi = h(o, mi, ai, si, Ni)   and Ni = h(v, d, ei, ni, …)It must be thatsi ≥ V1 for all i ≥ 2;and≤ targetnonce n1Merkle root m1support s1proof set P1, …, PkProof package KSignature SSignature of (H, K, C) with a1  coinbase for a1 …, coinbase for akCoinbase reward C 1tip; all competing chains are orphaned, i.e. ignored by honest
miners. Aggregate work is calculated as the sum of inferred
hashes, S/wk, over each block, where S is the size of the hash
space and wk is the value of the mining statistic. In general,
this fork-choice rule ensures that blocks with lower average
proof values will be favored over those with higher values.
Note that because proof sets reference a speciﬁc parent block,
they can only be shared between child blocks having the same
parent. And according to our fork-choice rule, ultimately the
child block with the lowest value wk will extend the main
chain.
Additional rules. In order to reduce the number of orphaned
blocks (discussed in Section VI-A) and thwart various attacks,
(see Section III), miner M will adhere to the following rules. (i)
M rejects proof package K if V1 is higher than the lowest proof
she has seen announced on the network (the 1OS). However,
she continues to mine on the same prior block until a block
containing the 1OS is actually propagated. M does this in order
to mitigate a possible DoS attack by the miner of the 1OS
and also in hopes of generating more of her own proofs to be
included in the block. (ii) When assembling a proof package
as the miner of V1, M will include her own proofs ﬁrst, and
then proofs from other miners in the order she received them
from the network. Speciﬁcally, M begins by identifying all
sets of k proofs S1, . . ., each with mean value below tk. Let