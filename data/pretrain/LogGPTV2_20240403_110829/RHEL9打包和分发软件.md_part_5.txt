`buildroot`{.literal} 中的文件稍后放入 `cpio`{.literal} 存档，后者成为
RPM 的主要部分。当在最终用户的系统中安装 RPM 时，这些文件将提取到
`root`{.literal} 目录中，保留正确的层次结构。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
从 Red Hat Enterprise Linux 6 开始，`rpmbuild`{.literal}
程序有自己的默认值。覆盖这些默认设置会导致几个问题，因此红帽不推荐定义您对该宏的值。您可以在
`rpmbuild`{.literal} 目录中使用 `%{buildroot}`{.literal} 宏。
:::
:::
::: section
::: titlepage
# []{#packaging-software_packaging-and-distributing-software.html#rpm-macros_packaging-software}RPM 宏 {.title}
:::
[rpm
宏](http://rpm-software-management.github.io/rpm/manual/macros.html){.link}
是一种直接文本替换，在使用特定内置功能时，可以根据声明的可选评估来有条件地分配。因此，RPM
可以为您执行文本替换。
示例用法是在 SPEC 文件中多次引用打包软件 [*Version*]{.emphasis}。您仅在
`%{version}`{.literal} 宏中定义 [*Version*]{.emphasis} 一次，并在 SPEC
文件中使用此宏。每次出现时都会自动替换为您之前定义的
[*Version*]{.emphasis}。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
如果您看到不熟悉的宏，您可以使用以下命令评估它：
``` literallayout
$ rpm --eval %{_MACRO}
```
::: title
**评估 %{\_bindir} 和 %{\_libexecdir} 宏**
:::
``` literallayout
$ rpm --eval %{_bindir}
/usr/bin
$ rpm --eval %{_libexecdir}
/usr/libexec
```
:::
常用的一个宏是 `%{?dist}`{.literal}
宏，它表示哪个发行版用于构建（分配标签）。
``` literallayout
# On a RHEL 9.x machine
$ rpm --eval %{?dist}
.el8
```
:::
::: section
::: titlepage
# []{#packaging-software_packaging-and-distributing-software.html#con_working-with-spec-files_packaging-software}使用 SPEC 文件 {.title}
:::
要打包新软件，您需要创建新的 SPEC 文件。
实现这一点的方法有两种：
::: itemizedlist
-   从头开始手动编写新的 SPEC 文件
-   使用 `rpmdev-newspec`{.literal} 工具
    这个工具会创建一个未填充的 SPEC 文件，并填写所需的指令和字段。
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
某些以编程为导向的文本编辑器，预先使用其自身 SPEC 模板填充新的
`.spec`{.literal} 文件。`rpmdev-newspec`{.literal}
实用程序提供了一个与编辑器无关的方法。
:::
以下部分使用 `Hello World!`{.literal} 程序的三个示例实现，它们描述了
[什么源代码](#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#what-is-source-code_preparing-software-for-rpm-packaging "什么是源代码"){.link}。
下表介绍了每个程序。
::: informaltable
  ---------- --------------------------------------------------------------------------------------------------------------------------------------------------------------------
  软件名称   示例说明
  bello      程序使用原始解释编程语言编写。它演示了，当不需要构建源代码时，只需要安装源代码。如果需要打包预编译的二进制代码，您也可以使用此方法，因为二进制文件也只是一个文件。
  pello      程序以字节编译的解释语言编写。它演示了源代码的字节，并安装字节代码 - 生成的预优化文件。
  cello      程序使用原生编译的编程语言编写。它演示了将源代码编译到机器代码中的常见流程，并安装生成的可执行文件。
  ---------- --------------------------------------------------------------------------------------------------------------------------------------------------------------------
:::
`Hello World`{.literal} 的实现是 ：
::: itemizedlist
-   [bello-0.1.tar.gz](https://github.com/redhat-developer/rpm-packaging-guide/raw/master/example-code/bello-0.1.tar.gz){.link}
:::
::: itemizedlist
-   [pello-0.1.2.tar.gz](https://github.com/redhat-developer/rpm-packaging-guide/raw/master/example-code/pello-0.1.2.tar.gz){.link}
-   [cello-1.0.tar.gz](https://github.com/redhat-developer/rpm-packaging-guide/raw/master/example-code/cello-1.0.tar.gz){.link}
    (
    [cello-output-first-patch.patch](https://raw.githubusercontent.com/redhat-developer/rpm-packaging-guide/master/example-code/cello-output-first-patch.patch){.link}
    )
:::
作为前提条件，这些实施需要放入 `~/rpmbuild/SOURCES`{.literal} 目录中。
:::
::: section
::: titlepage
# []{#packaging-software_packaging-and-distributing-software.html#creating-spec-files-with-rpmdev-newspec_packaging-software}使用 rpmdev-newspec 创建新的 SPEC 文件 {.title}
:::
以下步骤演示了如何为上述三个 `Hello World!`{.literal} 程序（使用
`rpmdev-newspec`{.literal} 程序）为每一个创建 SPEC 文件。
::: orderedlist
**步骤**
1.  进入 `~/rpmbuild/SPECS`{.literal} 目录并使用
    `rpmdev-newspec`{.literal} 实用程序：
    ``` literallayout
    $ cd ~/rpmbuild/SPECS
    $ rpmdev-newspec bello
    bello.spec created; type minimal, rpm version >= 4.11.
    $ rpmdev-newspec cello
    cello.spec created; type minimal, rpm version >= 4.11.
    $ rpmdev-newspec pello
    pello.spec created; type minimal, rpm version >= 4.11.
    ```
    `~/rpmbuild/SPECS/`{.literal} 目录现在包含三个名为
    `bello.spec`{.literal}、`cello.spec`{.literal} 和
    `pello.spec`{.literal} 的 SPEC 文件。
2.  检查文件：
    文件中的指令代表 [在 什么是 SPEC
    文件](#packaging-software_packaging-and-distributing-software.html#assembly_what-a-spec-file-is_packaging-software "什么是 SPEC 文件"){.link}
    中描述的指令。在以下部分中，您将在 `rpmdev-newspec`{.literal}
    的输出文件中填充特定的部分。
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
`rpmdev-newspec`{.literal} 实用程序不使用特定于任何特定 Linux
发行版的指南或约定。但是，本文档以 Red Hat Enterprise Linux
为目标，因此当引用 RPM 的 Buildroot 时，在 SPEC
文件中与所有其他定义或提供宏一致时，最好使用 `%{buildroot}`{.literal}
表示法替代 `$RPM_BUILD_ROOT`{.literal} 表示法。
:::
:::
::: section
::: titlepage
# []{#packaging-software_packaging-and-distributing-software.html#modifying-a-spec-file_packaging-software}修改原始的 SPEC 文件以创建 RPM {.title}
:::
以下步骤演示了如何修改 `rpmdev-newspec`{.literal} 提供的输出 SPEC
文件以创建 RPM。
::: itemizedlist
**先决条件**
-   特定程序的源代码已放入 `~/rpmbuild/SOURCES/`{.literal} 目录中。
-   未填充的 SPEC 文件 `~/rpmbuild/SPECS/.spec`{.literal} 已被
    `rpmdev-newspec`{.literal} 创建。
:::
::: orderedlist
**步骤**
1.  打开 `rpmdev-newspec`{.literal} 程序提供的
    `~/rpmbuild/SPECS/.spec`{.literal} 文件的输出模板：
2.  填充 SPEC 文件的第一个部分：
    第一部分包括 `rpmdev-newspec`{.literal} 分组在一起的这些指令：
    ::: variablelist
    [`名称`{.literal}]{.term}
    :   `Name`{.literal} 已指定为 `rpmdev-newspec`{.literal} 的参数。
    [`版本`{.literal}]{.term}
    :   将 `Version`{.literal} 设置为与源代码的上游版本匹配。
    [`Release`{.literal}]{.term}
    :   `Release`{.literal} 自动设置为 `1%{?dist}`{.literal}，它最初是
        `1`{.literal}。每当更新软件包而上游发行版本的
        `Version`{.literal}
        没有更改时（例如当包含补丁时），增加初始的值。当出现新的上游版本时，`Release`{.literal}
        被重置为 `1`{.literal}。
    [`概述`{.literal}]{.term}
    :   `Summary`{.literal} 是该软件的简短说明。
    :::
3.  填充 `License`{.literal}、`URL`{.literal} 和 `Source0`{.literal}
    指令：
    `License`{.literal}
    字段是与上游发行版本中源代码关联的软件许可证。如何在 SPEC 文件中标记
    `License`{.literal}
    的具体格式将有所不同，具体取决于您遵循的基于哪个基于 RPM 的 Linux
    发行版准则。
    例如，您可以使用
    [GPLv3+](https://www.gnu.org/licenses/quick-guide-gplv3.html){.link}。
    `URL`{.literal} 字段提供上游软件网站的 URL。为实现一致性，请使用
    `%{name}`{.literal} 的 RPM 宏变量，并使用
    `https://example.com/%{name}`{.literal}。
    `Source0`{.literal} 字段提供上游软件源代码的
    URL。它应直接链接到被打包的特定版本。请注意，本文档中给出的示例 URL
    包括可在以后更改的硬编码值。同样，发行版本也可以更改。要简化这些潜在的更改，请使用
    `%{name}`{.literal} 和 `%{version}`{.literal}
    宏。通过使用以上，您仅需要在 SPEC 文件中更新一个字段。
4.  填充 `BuildRequires`{.literal}、`Requires`{.literal} 和
    `BuildArch`{.literal} 指令：
    `BuildRequires`{.literal} 指定软件包的构建时依赖项。
    `Requires`{.literal} 指定软件包的运行时依赖项。
    这是使用没有原生编译扩展的解释编程语言编写的软件。因此，使用
    `noarch`{.literal} 值添加 `BuildArch`{.literal} 指令。这告知 RPM
    不需要将这个软件包绑定到构建它的处理器架构。
5.  填充
    `%description`{.literal}、`%prep`{.literal}、`%build`{.literal}、`%install`{.literal}、`%files`{.literal}
    和 `%license`{.literal} 指令：
    这些指令可被视为部分标题，因为它们是可以定义多行、多结构或脚本化任务的指令。
    `%description`{.literal} 是一个比 `Summary`{.literal}
    更长的软件的信息，其中包含一个或多个段落。
    `%prep`{.literal}
    部分指定如何准备构建环境。这通常涉及对源代码的压缩存档、补丁应用程序以及可能解析源代码中提供的信息的扩展，以便在
    SPEC 文件以后的部分中使用。在本节中，您可以使用内置的
    `%setup -q`{.literal} 宏。
    `%build`{.literal} 部分指定如何构建软件。
    `%install`{.literal} 部分包含在 `BUILDROOT`{.literal}
    目录中构建软件后如何安装软件的 `rpmbuild`{.literal} 指令。
    该目录是一个空的 chroot
    基础目录，类似于最终用户的根目录。您可以在此处创建包含安装文件的目录。要创建这样的目录，您可以使用
    RPM 宏，而无需硬编码路径。
    `%files`{.literal} 部分指定此 RPM
    提供的文件列表及其终端用户系统的完整路径位置。
    在本节中，您可以使用内置宏来指示各种文件的角色。这可用于使用
    `rpm`{.literal} 命令查询软件包文件清单元数据。例如，要表示 LICENSE
    文件是软件许可证文件，请使用 `%license`{.literal} 宏。
6.  最后一个部分( `%changelog`{.literal} )是软件包的每个 Version-Release
    的带有日期戳的条目列表。它们记录打包更改，而非软件更改。打包更改示例：添加补丁，更改
    `%build`{.literal} 部分中的构建流程。
    在第一行使用此格式：
    以一个 `*`{.literal} 字符开头，后跟
    `Day-of-Week Month Day Year Name Surname  - Version-Release`{.literal}
    使用以下格式进行实际更改条目：
    ::: itemizedlist
    -   每个更改条目都可以包含多个项目，每个代表一个改变。
    -   每个项目在新行中开始。
    -   每个项目以 `-`{.literal} 字符开头。
    :::
:::
您已为所需的程序编写了整个 SPEC 文件。
::: itemizedlist
**其他资源**
-   [使用 bash 编写的程序的 SPEC
    文件示例](#packaging-software_packaging-and-distributing-software.html#an-example-spec-file-for-bello_packaging-software "使用 bash 编写的程序的 SPEC 文件示例"){.link}
-   [使用 Python 编写的程序的 SPEC
    文件示例](#packaging-software_packaging-and-distributing-software.html#an-example-spec-file-for-pello_packaging-software "使用 Python 编写的程序的 SPEC 文件示例"){.link}
-   [使用 C 语言编写的程序的 SPEC
    文件示例](#packaging-software_packaging-and-distributing-software.html#an-example-spec-file-for-cello_packaging-software "使用 C 语言编写的程序的 SPEC 文件示例"){.link}
-   [构建
    RPM](#packaging-software_packaging-and-distributing-software.html#con_building-rpms_packaging-software "构建 RPM"){.link}
:::
:::
::: section
::: titlepage
# []{#packaging-software_packaging-and-distributing-software.html#an-example-spec-file-for-bello_packaging-software}使用 bash 编写的程序的 SPEC 文件示例 {.title}
:::
这部分显示了在 bash 中编写的 [**bello**]{.strong} 程序的示例 SPEC 文件。
::: title
**在 bash 中编写的 [**bello**]{.strong} 程序的 SPEC 文件示例**
:::
``` literallayout
Name:           bello
Version:        0.1
Release:        1%{?dist}
Summary:        Hello World example implemented in bash script
License:        GPLv3+
URL:            https://www.example.com/%{name}
Source0:        https://www.example.com/%{name}/releases/%{name}-%{version}.tar.gz
Requires:       bash
BuildArch:      noarch
%description
The long-tail description for our Hello World Example implemented in
bash script.
%prep
%setup -q
%build
%install
mkdir -p %{buildroot}/%{_bindir}
install -m 0755 %{name} %{buildroot}/%{_bindir}/%{name}
%files
%license LICENSE
%{_bindir}/%{name}
%changelog
* Tue May 31 2016 Adam Miller  - 0.1-1
- First bello package
- Example second item in the changelog for version-release 0.1-1
```
`BuildRequires`{.literal} 指令指定软件包的 build-time
依赖项已被删除，因为没有可用于 `bello`{.literal} 的构建步骤。Bash
是原始解释编程语言，文件仅安装到其系统上的位置。
`Requires`{.literal} 指令指定软件包的运行时依赖项，它只包括
`bash`{.literal}，因为 `bello`{.literal} 脚本只需要 `bash`{.literal}
shell 环境才能执行。