文件一它是公钥证书的自签名。你可以用JavaJDK（在这之前你应该已经
安装过它了）自带的keytool工具查看其中的内容，下面这条命令会输出证书
的内容，如图2.7所示。
keytool -printoert -file META-INF/CERT.RSA
tria
oid.com,Ol-lndroid,0u
si6, O=Andreif, L-Roestais vinv, sf=Catifornia, CUs
C3234043647
etay:2..9.35 Cr
ria(8mber:asdr f2a7396 dd38767a)
图 2.7
现在，在你面前的就是证书的内容，其中声明了公钥的持有者。
4.要看真正的与aPp内容相关的签名，需要在“META-INF”文件夹中找到名
为“CERT.SF”的文件。在Windows下，你可以直接用记事本或者你能使用
的其他任何一种文本编辑器打开它。在UNIX/Linux下，你可以使用下面这
条命令：
cat [path-to-unzipped-apk] /METAINF/CERT.SF
现在，签名文件的内容就出现在你的眼前。其中含有app中的各个资源文件
的密码学意义上的 hash。如图 2.8这张截图所示。
29
---
## Page 48
Android安全攻防实战
Stgnature-Verston: 1.0
SHA1-Dgest:QWQYFrsOVYoCXO7BeY=
e:res/drawable-hdpL/bkgd_tile.png
SHA1-Dtgest:kSGt1QB7u3660c8NZMnvfJG9714=
e:res/layout/widget_layout.xnl
SHA1-Digest:XIoakgxBgEs5Jo+wJ043Qnj1fYI=
res/drawable-hdpt/Lc_menu_shop_holo_dark.png
SHA1-Digest:aTusoS/yn6Ide6H6h35cczxngBA=
ane:res/drawabLe-hdpt/btn_prLce_focused_narket.9.png
SHA1-Digest:UtI2V83AKsTewPYDn625CPVk1cM=
ane:res/drawable/spinner_background_movles.xnl
:res/drawable-hdpl/market_tab_bg_overlay_right.9.png
ane:res/Layout-wB0odp-h540dp/detatls_sunnary_header_text.xnl
图 2.8
在使用 jarsigner 工具验证 app 的内容时，这个文件就能派上用场。它会计算
CERT.SF文件中列出的、各个资源文件的密码学意义上的hash，并将其与列在各个
资源文件边上的数字进行比较。在图2.8这张截图中，hash（SHA-1算法）已经经过
了base64编码
工作原理
“META-INF”文件夹是个非常重要的资源。因为它有助于确立app 的完整性。
由于这个文件夹的内容在app内容的加密安全中具有重要的地位，所以有必要讨论一
下这个文件夹的结构，什么会出现在其中以及为什么。
在“META-INF”文件夹中，你至少能发现下面这些东西。
·MANIFEST.MF：这个文件声明了资源，与CERT.SF文件非常相似。
·CERT.RSA：这个文件是公钥证书，上面已经讨论过了。
·CERT.SF：这个文件包含了app 中的所有资源文件，它负责对app进行签名，
30
---
## Page 49
第2章实践app安全
其中含有JAR指定的密码学意义上的签名。
·CERT.RSA：这是个X.509v3证书。其中的信息是由keytool工具的以下5个
域组成的。
①Owner（持有者）：这个域是用来声明公钥的持有者的。其中包含与该个体
相关的国家和组织的基本信息。
②Issuer（颁发者）：这个域是用来声明X.509证书的颁发者的，用来把公钥和
声明的持有者关联起来。这里提到是能为密钥的持有者提供有效担保的人或
组织。他们是为证书中列出的公钥提供可靠性保证的人。
③Serialnumber（序列号）：这被用作颁发者证书的一个标示符。
④Valid from.umtil:这个域指定了证书的有效期，其关联的属性可以由颁发者
验证。
Certificate fingerprints：这个域中记录的是证书的数字校验和。它被用来验
证证书是不是被算改过了的。
数字签名的计算方法是用可信第三方的私钥加密证书。在大多数Androidapp中，
这个“可信第三方”就是开发者。这也就意味着这个签名是用他/她的私钥（通常是
和公钥相关的）加密证书而生成的。这样使用数字签名可能从功能上是正确的一它
在功能上确实是使用了电子签名机制一一但并不像依赖于数字证书认证机构
（Certificate Authority，CA）那样的强壮。毕竞任何一个人都可以用他自己的密钥对
app签名，从面声称自己开发了推特（Twitter）的app.但是没人能够说自己有VeriSign
或赛门铁克的私钥！
如果证书是自签名的，开发者在填写与证书相关的信息时就能充分发挥他/她的
想象力。Android包管理器在验证颁发者、持有者或证书中其他细节的有效性或实体
是否真实存在这一问题上是完全无能为力的。例如：“持有者”根本无须提交任何关
尽管这样做是可行的，但还是强烈建议你不要这样做，因为这将使一个app很难被信
任，毕竞移动app通常是被存放和使用在一个非常私人化的设备上的。如果有人知道
公钥证书中有虚构的信息，他可能就会不再信任这样的app了。
生成一个可信的app证书的最好方法是通过一个有资质的CA，你可以去申请一
个经过签名的公钥证书—在自行生成了你自己的公/私钥对之后；也可以申请CA
生成一个公/私钥对及一个公钥证书。因为它们通常都会验证证书中填写的所有信息。
赛门铁克、其他CA和安全厂商通常会提供一系列有助于生成可信公钥证书的服务，
31
---
## Page 50
Android安全攻防实战
其中的一些很愿意支持Androidapp的开发。
本章的下一个实验会提供一些关于公钥证书的有用的链接，供你进一步学习。
再说两句
通过命令行工具，你也可以使用OpenSSL库，查看完整的公钥证书。在Linux
中执行下面几步操作。
1.确认你已经安装了OpenSSL。要是还没安装，你可以用下面这条命令安装
OpenSSL:
tssudo Tteqsut q06de
2.安装完毕之后，你可以使用下面这条命令查看证书（该证书位于APK文件
的解压目录的根目录中）：
openssl pcks7 inform DER in META-INr/CERr.RSA -noout -print_certs text
你可以在终端窗口中看到与图2.9这个截图类似的信息。
Certtficate:
Deta:
zieo
Androld
validity..
y
Subject:CUS,ST=Cattfornta,LNountatn Vte,O=Google Inc.,OU=Androtd,CN
Subje
safncryptlon
Modulus
45:cc:df:7b:2e:58:66:74:c9:e1:56:5b:1f:4c:68:
77:18:8b:6
Be:6a:47:a4:3b:33:d9:60:9b:77:18:31:
59:55:bf:f2:51:a6:3d:ab:f9:c5:5c:27:22:22:52:
e8:75:e4:f8:15:4a:64:5f:89:71:68:c0:b1:bf:c6:
76:4c18e183:07:d8:71:54d7:e：5f:64:a5:1a
图 2.9
图2.10是上面这个截图的下半部分。
32
---
## Page 51
第2章实践app安全
serLal :C2:F8:87:46:64:4A:38:80
X509v3 Basic Constratnts:
04:bb:50:7a:16:61:f8
Sa:62:3c
63:21:67:
163
19=c1:61:e6:26:41:aa:99
59:3c:4a:e3:41:f4:db:41:ed:c
c4:36:5c:52:35:32:f7:32:51:37:
fe:9e:a0:1c:b6:27:c8:67:43:69:d:84:bd:2:d9:11ff:061
4c:71:44:17:83:42:f7:85:81:c9:d
fd:b9:41:86:31:89:54:5f:75:9f:38:11:26:87:ff:62:14:18:
c0:69:38:8a
图 2.10
上一个截图中，证书的最后一节就是领发该证书的CA的数字签名。
拓展阅读
•文档 The RFC2459: Intemet X.509 Public Key Infrastructure Certificate and CRL
Profile, hil: http:/datatracker.ietf.org/doc/rfc2459/?include_text=1 。
Oracle 文栏档：The X.509 Cerrificates and Certijficate Revocation Lists (CRLs),地
h: http//docs.oracle.com/javase/6/docs/technotes/guides/security/cert3.html 
2.3对Android app签名
所有Android app 在被安装到Android设备上之前，都必须经过签名。Eclipse和
其他IDE 都能很好地帮助你完成签名。但是对你来说，要真正理解app的签名机制，
必须亲自动手，用JavaJDK 和Android SDK 中的工具签一个 app 名。
首先介绍些关于app签名的背景知识。Androidapp中的签名，使用的实际上就
是JAR的签名机制。这一机制已经用了好多年了，主要用于验证Java class 文件的开
发者。Android的APK文件与JAR文件还不完全一样。相比JAR文件，其中还含有
一些元数据和资源。因此Android团队必须对JAR签名机制做一番改进，使之能适
应APK文件的结构—他们确实也这样做了，使得Android app 中这些额外的内容也
参与到签名和验证过程中。
---
## Page 52
Android安全攻防实战
好吧，我不再剧透了。我们先来取出一个APK文件，看一下它的签名。然后，
根据我们的安排，我们将试着在Android设备中的app中加入我们的“手工签名”，
并用一种很简单的方法验证我们确实已经对它进行签名了。
准备工作
在开始之前，你需要安装下列工具。
·JavaJDK：其中含有必要的签名和验证工具。
。一个APK文件：对这个APK文件签名。
。WinZip：Windows计算机上需要安装这个程序。
·Unzip：在Ubuntu计算机上需要安装这个程序。
考虑到你使用的可能是一个已经被签过名的APK文件，你首先要把APK文件
中的证书和签名文件删掉。要完成这一任务，你需要进行下列操作。
1.解压这个APK文件。再讲一遍怎么解压一个APK文件可能就有些嘴碎了。
胞，如果你在这一步上还需要帮助，请参考检查app的证书和签名那一节。
2.APK文件被解压开来之后，你需要删掉“META-INF”这个文件夹。Windows
用户只需在图形界面下，打开解压出来的文件夹，删掉“META-INF”文件
夹就成了：在UNIX/Linux系统下，要完成这一任务需要执行下面这条命令：
aNIvsa/ [xde-paddyzum-oqqqed] ± x
现在你已经准备好要对这个app进行签名了。
怎么做
可以通过以下步骤完成对app的签名。
1.首先要为你自己建立一个密钥存储器（keystore），用来存放签名app时要用
的私钥。如果你已经有了一个密钥存储器，就请跳过这一步，在Windows
和 UNIX/Linux 发行版本中要新建一个带名字的密钥存储器，可以执行下面
这条命令：
keytool-genkey -V -keystore[keystore 的名称]-alias[你密销的别名]-keyalg
2.输入上面这条命令之后，keytool将为你新建一个带口令保护的密钥存储器。
你应该确保自已记住了刚才输入的口令！另外，如果你真打算在实际工作中
使用这个密钥存储器，还请把它存放到一个安全的地方！
---
## Page 53
第2章实践app安全
3.创建了一个带口令保护的密钥存储器之后，keytool将会提示你输入一些在创
建证书的过程中需要提供的信息。请特别留意这些信息，并尽可能诚实地回
答问题——就像图2.11这张截图中给出的，都是真实的信息一样。
37ogtecxd/ypss keytal-penktyR
zatie?
gtisthe
liyes
OE.ACE CO
ters, LCape Tovn, STreesters Cape, CZA carrectT
ratgd
e
图 2.11
现在你已经有了一个带名字的，在它的内部安全地存放着你的新的私钥、公
钥，自签名的证书，并被加密保护起来了的密钥存储器了。
4.你现在可以使用这个新的带名字的密钥存储器去对一个app进行签名了。你
要做的只是去执行下面这条命令。
keyatore 的名字]【你的.apk 文件]【作害钥的别名]
5.你会被提示输入密钥存储器的口令。如果输入正确，jarsigner会开始对指定的
app 进行签名。也就是说，它会修改你给定的APK 文件，在其中加入
“META-INF”文件夹，并在其中放入证书及签名相关的文件，如图2.12所示。
图 2.12
齐活了！签名一个app很容易吧。我故意选了一个重新签名app的例子，顺
带也说明了如何替换掉app原来的签名。
工作原理
开始了！我们来看看keytool支持的参数。
35
---
## Page 54
Android安全攻防实战
·-genkey：这个参数告诉keytool你想要生成一些密钥。
·-V：使用这个参数后，将输出详细信息，不过这个参数并不是必须使用的。
·-keystore：这个参数用来指定你用以存储生成的密钥的密钥存储器的存放位置。
·-alias：这个参数指定生成的密钥对的别名。
·-keyalg：这个参数用来指定生成密钥时所用的密码学算法，你可以选择使用
RSA或DSA。
·-keysize：这个参数指定你将要生成的密钥的长度（以bit为单位）。
·-validity：这个参数规定了生成的密钥的有效天数。Android官方推荐使用一
个超过10,000天的值。
Keytool对公钥和私钥的实际处理方式是：把公钥放在X.509v3证书中。该证书
是用来声明公钥持有者的，并能验证相关公钥是否属于声明持有者的。这就需要涉
及CA之类的可信第三方，但是在这一过程中，Android并不需要以这一方式验证公
钥。关于证书的使用方式和结构的更多信息，请参考“2.2检查app的证书和签名”一
节。
Jarsigner所使用的参数的详细解释，在下面这条命令底下。
储易的名称]【你的.apk文件]【你密钥的别名]
下面这些是对上面这条命令中各个参数含义的详细解释。
·-verbose：使用这个参数，将输出详细信息。
-sigalg：这个参数用来指定签名过程中使用的算法。
·-digestalg:这个参数用来指定应该用什么算法来计算.apk文件中各个资源的
hash.
·-keystore：这个参数用来指定你想要使用那个密钥存储器。
·-[你的.apk文件]：这是你要签名的.apk文件。
·-[你密钥的别名]：这是你关联的密钥/证书对的别名。
拓展阅读
●Jarsigner 的文 档 位 于 ：htp://docs.oracle.com/javase/6/docs/technotes/tools/
windows/jarsigner.html
com/tools/publishing/app-signing.html.
●Keytool的 文 档 : http://docs.oracle.com/javase/6/docs/technotes/tools/solaris/
keytool.html
36
---
## Page 55
第2章实践app安全