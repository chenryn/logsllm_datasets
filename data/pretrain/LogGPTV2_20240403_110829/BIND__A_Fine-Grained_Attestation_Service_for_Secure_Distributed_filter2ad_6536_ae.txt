Since simply by verifying the previous hop process,
we can guarantee that the entire chain of routers have
performed legal transformations on the ASPATH.
By applying BIND, we can achieve at least the same
properties as S-BGP [21, 22] and SPV [20] assuming full
deployment. First, it provides protection against modiﬁca-
tion and truncation of the ASPATH, since with the attesta-
tion service, we can guarantee that a router has performed
the only legal operation to an ASPATH, i.e., appending the
ASN of the next-hop router. Meanwhile we are now also
secure against the ASPATH lengthening attack, which SPV
is unable to prevent. Another important property which S-
BGP and SPV achieve is the delegation property: a mali-
cious router M cannot propagate an ASPATH without the
permission of the last hop router on the ASPATH. Here we
ensure this property partly through protocol semantics: the
ASPATH generation process explicitly appends the next-
hop router to the ASPATH to delegate the right to forward
the ASPATH to the next-hop router. And since the delega-
tion code is inside the process attested, the correctness of
delegation can be veriﬁed under the transitive trust proper-
ties of BIND.
However, as we have pointed out, the attestation service
does not prevent data misuse attacks by a malicious inter-
mediary. For the BGP case, a typical data misuse attack
is the data replay attack, where the malicious intermediary
replays a route that has already been withdrawn. As we
have mentioned, under our model, it is up to the protocol
semantics to address such attacks. For instance, to defend
against the replay attack, the ASPATH generation process
can attach a timeout ﬁeld with each ASPATH before send-
ing them to the attestation service to be MACed. Meanwhile
we should embed the logic for checking the timestamp in
the attested process code. Meanwhile, the BIND approach
does not work well for incremental deployment.
6 Related Work
In this section, we review related work on verifying cor-
rect code execution, Virtual Machine Monitors (VMM), and
the TPM and SEM technology that we extensively used in
this paper. Other related work, including securing BGP and
distributed computation applications have been discussed in
Section 5.
Verifying Code Execution Wasserman and Blum [42] re-
view the line of theoretical work that enables us to check
the result of a program. While of theoretic interest, their
methodology is restricted to speciﬁc functions and thus of
limited use in reality.
Vigna [41] proposes to use cryptographic traces to enable
mobile code to be securely executed on an untrusted host.
Basically this approach requires that the untrusted host store
cryptographic traces for the execution, so that a trusted host
can request the trace and verify it by executing the code
again and comparing the execution with the stored trace.
However, their approach is expensive, since the veriﬁer has
to execute the entire code again, and the size of trace grows
linearly with the size of the code.
Malkhi et al. [26] build Fairplay, a secure two-party com-
putation system. In fact there has been a huge amount of
theoretic work in secure multi-party computation, however,
this line of work is chieﬂy concerned about ensuring the se-
crecy of input data instead of the integrity of the computed
outcome.
To verify the integrity of the booting process, we can
use secure boot mechanisms [8, 9]. Starting from an initial
trusted state, each layer veriﬁes the digital signature of the
next layer before executing it. This ensures that the soft-
ware stack has not been altered. Their mechanism is also
similar to our transitive integrity veriﬁcation mechanism.
While they verify the integrity of the next layer software
before loading it, we verify the integrity of previous hop
process/data before using it.
In another line of work, Seshadri et al. use timing prop-
erties to perform SoftWare-based ATTestation (SWATT) for
embedded devices [37]. In SWATT, the embedded device
computes a checksum of its memory whenever it receives
a challenge. SWATT is designed in a way such that a ma-
licious attack that has modiﬁed the memory contents of an
embedded device would have to take a longer time to come
up with the correct checksum.
Virtual Machine Monitors
In the area of Virtual Ma-
chine Monitors (VMM), Garﬁnkel et al. build Terra [16],
a virtual machine-based platform for trusted computing.
They partition a tamper-resistant hardware platform into
multiple, isolated Virtual Machines(VM). The VMM and
the trusted hardware can attest the software running on each
VM to a remote veriﬁer. Their approach assumes that the
VMM cannot be compromised at runtime, and they partly
address the efﬁciency and usability of attestation. In partic-
ular, though they perform coarse-grained attestation, they
propose to split attestable entities into smaller blocks and
compute a hash over each block.
Trustworthy Computing Platform One chief standard
developed by TCG [40] is the Trusted Platform Module
(TPM). The TPM is a coprocessor intended to serve as
the hardware root of trust of a trusted platform. The
TPM provides several functional components, including
fast cryptographic engines, protected storage, key genera-
tion, etc. Several researchers have examined how to use a
TPM to perform load-time attestations of the software sys-
tem [27, 36].
The SEM architecture is part of AMD’s drive toward en-
abling a trustworthy computing environment. SEM was de-
signed with a primary goal to counter software attacks, and
it offers a hybrid hardware and software solution. Built on
top of the x86 architecture, SEM provides a new mode, the
Trusted Execution Mode (TX = 1), where the TX Mode
bit is a new CPU state bit. The Secure Kernel runs in the
TX Mode which offers several hardware protection mech-
anisms including memory, I/O, DMA and system/control
register protection. Meanwhile SEM offers a single entry-
point into the SK called a Secure Kernel Intercept (SKI). It
also supports secure initialization through the SKINIT in-
struction which works together with the TPM to securely
record the measurements of the software thus loaded.
Apart from AMD’s SEM technology, Intel’s Vander-
pool [6] and Lagrande [19] processors provide similar
TCG/TPM and isolation features BIND requires. Mean-
while, AMD’s new generation of processor virtualization
technology Presidio [24] works for BIND too.
7 Conclusion and Future Work
As code attestation technology receives increasing atten-
tion in the research community, we are interested in ad-
dressing the following questions: 1) What are the desired
properties we would ultimately like to achieve out of attes-
tation? 2) Suppose we were able to build a perfect attes-
tation service with all of the desired properties, and make
it available on every platform, how can it aid us in design-
ing secure distributed systems in general? 3) How far are
we from the perfect attestation service and how far can we
push our limits toward this goal using currently available
TCG and microprocessor technology?
We propose BIND, a ﬁne-grained attestation service that
ties the proof of what code has executed to the data the
code has produced. By attesting to the critical code immedi-
ately before it executes, we narrow the gap between time-of-
use and time-of-attestation. BIND is useful for establishing
a trusted environment for distributed systems, and greatly
simpliﬁes the design of secure distributed systems.
For future work, we want to investigate the feasibility
of a hardware based design for BIND. The current version
of BIND runs in the Secure Kernel and assumes that the
Secure Kernel is trustworthy, which is a hybrid hardware
and software solution. However, it will be desirable to place
trust only on hardware and no software components at all.
8 Acknowledgments
We gratefully acknowledge support, feedback, and fruit-
ful discussions with Dawn Song, Yih-Chun Hu and James
Hendricks. We would especially like to thank Virgil D.
Gligor for his suggestions on how to improve the paper, and
the anonymous reviewers for their insightful comments.
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
13
References
[1] The folding@home project. Stanford University, http://
www.stanford.edu/group/pandegroup/cosm/.
[2] The great internet mersenne prime search. http://www.
mersenne.org/prime.htm.
[3] The search for extraterrestrial intelligence project. Uni-
versity of California Berkeley, http://setiathome.
berkeley.edu/.
[4] Exploiting format string vulnerabilities. TESO Security
Group, http://www.team-teso.net/articles/
verbformatstring, Sept. 2001.
[5] AMD platform for
Win-
HEC 2003, http://www.microsoft.com/whdc/
winhec/papers03.mspx, Sept. 2003.
trustworthy computing.
[6] Intel Vanderpool Technology
for
(VT-x) preliminary speciﬁcation.
ftp://download.intel.com/technology/
computing/vptech/C97063.pdf, Jan. 2005.
IA-32 processors
Intel C97063-001,
[7] W. Aiello, J. Ioannidis, and P. McDaniel. Origin authenti-
cation in interdomain routing. In Proceedings of ACM Con-
ference on Computer and Communications Security (CCS
2003), pages 165–178, Oct. 2003.
[8] W. A. Arbaugh, D. J. Farber, and J. M. Smith. A reliable
bootstrap architecture. In Proceedings of IEEE Symposium
on Security and Privacy, pages 65–71, May 1997.
[9] W. A. Arbaugh, A. D. Keromytis, D. J. Farber, and J. M.
Smith. Automated recovery in a secure bootstrap process.
In Proceedings of Symposium on Network and Distributed
Systems Security (NDSS), pages 155–167, Mar. 1998.
[10] P. Barham, B. Dragovic, K. Fraser, S. Hand, T. Harris,
A. Ho, R. Neugebar, I. Pratt, and A. Warﬁeld. Xen and the
art of virtualization. In Proceedings of the ACM Symposium
on Operating Systems Principles (SOSP), Oct. 2003.
[11] M. Bellare, R. Canetti, and H. Krawczyk. Keying hash func-
tions for message authentication. In Advances in Cryptology
- Crypto ’96, pages 1–15, 1996.
[12] M. Castro and B. Liskov. Practical byzantine fault tolerance.
In Proceedings of Symposium on Operating Systems Design
and Implementation (OSDI), Feb. 1999.
[13] C. Cowan, P. Wagle, C. Pu, S. Beattie, and J. Walpole.
Buffer overﬂows: Attacks and defenses for the vulnerability
of the decade. In Proceedings of DARPA Information Sur-
vivability Conference and Exposition (DISCEX 2000), pages
119–129, Jan. 2000.
[14] W. Difﬁe and M. E. Hellman. New directions in cryptog-
IEEE Trans. Inform. Theory, IT-22:644–654, Nov.
raphy.
1976.
[15] J. S. Foster, M. Fahndrich, and A. Aiken. A theory of
type qualiers.
In Proceedings of ACM SIGPLAN Confer-
ence on Programming Language Design and Implementa-
tion (PLDI’99), May 1999.
[16] T. Garﬁnkel, B. Pfaff, J. Chow, M. Rosenblum, and
D. Boneh. Terra: A virtual machine-based platform for
trusted computing.
In Proceedings of Symposium on Op-
erating System Principles (SOSP), Oct. 2003.
[17] P. Golle and I. Mironov. Uncheatable distributed compu-
In Proceedings of the RSA Conference (CT-RSA
tations.
2001), 2001.
[18] G. Goodell, W. Aiello, T. Grifﬁn, J. Ioannidis, P. McDaniel,
and A. Rubin. Working around BGP: An incremental ap-
proach to improving security and accuracy in interdomain
routing. In Proceedings of Symposium on Network and Dis-
tributed Systems Security (NDSS), Feb. 2003.
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
14
[19] D. Grawrock.
Lagrande
SCMS-
http://www.intel.com/technology/
18.
security/downloads/scms18-LT_arch.pdf,
Sept. 2003.
architecture
[20] Y.-C. Hu, A. Perrig, and M. Sirbu. SPV: Secure path vec-
tor routing for securing BGP. In Proceedings of ACM SIG-
COMM, Sept. 2004.
[21] S. Kent, C. Lynn, J. Mikkelson, and K. Seo. Secure border
gateway protocol (S-BGP) — real world performance and
deployment issues.
In Proceedings of Symposium on Net-
work and Distributed Systems Security (NDSS), pages 103–
116, Feb. 2000.
[22] S. Kent, C. Lynn, and K. Seo. Secure border gateway proto-
col (S-BGP). IEEE Journal on Selected Areas in Communi-
cations, 18(4):582–592, Apr. 2000.
[23] L. Lamport, R. Shostak, and M. Pease. The Byzantine gen-
erals problem. ACM Transactions on Programming Lan-
guages and Systems (TOPLAS), 4(3):382–401, July 1982.
[24] M. LaPedus. Amd tips ’Paciﬁca’ and ’Presidio’ processors
for ’06. http://www.eetimes.com/semi/news/
showArticle.jhtml?articleID=52601317,
Nov. 2004.
[25] R. Mahajan, D. Wetherall, and T. Anderson. Understanding
BGP misconﬁguration. In Proceedings of ACM SIGCOMM,
Aug. 2002.
[26] D. Malkhi, N. Nisan, B. Pinkas, and Y. Sella. Fairplay -
a secure two-party computation system. In Proceedings of
USENIX Security Symposium, pages 287–302, Aug. 2004.
[27] H. Maruyama, S. Munetoh, S. Yoshihama, and T. Ebringer.
Trusted platform on demand. IPSJ SIGNotes Computer SE-
Curity Abstract No. 024 - 032.
[28] S. A. Misel. Wow, AS7007! NANOG mail archives, http:
//www. merit. edu/mail.archives/nanog/
1997-04/msg00340.html, 1997.
[29] F. Monrose, P. Wyckoff, and A. Rubin. Distributed execu-
tion with remote audit. In Proceedings of ISOC Network and
Distributed System Security Symposium (NDSS ’99), Feb.
1999.
[30] Next-Generation Secure Computing Base
(NGSCB).
http://www.microsoft.com/resources/
ngscb/default.mspx, 2003.
[31] O. Nordstr¨om and C. Dovrolis. Beware of BGP attacks.
ACM Computer Communications Review, 34(2):1–8, Apr.
2004.
[32] N. L. Petroni, T. Fraser, J. Molina, and W. A. Arbaugh.
Copilot – a coprocessor-based kernel runtime integrity mon-
itor. In Proceedings of USENIX Security Symposium, pages
179–194, Aug. 2004.
[33] Y. Rekhter and T. Li. A border gateway protocol 4 (BGP-4).
RFC 1771, Mar. 1995.
[34] Routing protocol security requirements (rpsec).
IETF
http://www.ietf.org/html.
working
charters/ rpsec-charter.html, 2004.
group,
[35] R. Sailer, T. Jaeger, X. Zhang, and L. van Doorn.
Attestation-based policy enforcement for remote access. In
Proceedings of ACM Conference on Computer and Commu-
nications Security (CCS), Oct. 2004.
[36] R. Sailer, X. Zhang, T. Jaeger, and L. van Doorn. Design
and implementation of a TCG-based integrity measurement
architecture.
In Proceedings of USENIX Security Sympo-
sium, pages 223–238, Aug. 2004.
[37] A. Seshadri, A. Perrig, L. van Doorn, and P. Khosla. SWAtt:
SoftWare-based Attestation for embedded devices. In Pro-
ceedings of IEEE Symposium on Security and Privacy, May
2004.
[38] J. W. Stewart. BGP4: inter-domain routing in the Internet.
Addison-Wesley, 1999.
[39] D. Szajda, B. Lawson, and J. Owen. Hardening functions
for large-scale distributed computations. In Proceedings of
IEEE Symposium on Security and Privacy, pages 216–224,
May 2003.
[40] Trusted Computing Group (TCG).
https://www.
trustedcomputinggroup.org/, 2003.
[41] G. Vigna. Cryptographic traces for mobile agents. In Mobile
Agents and Security, volume 1419 of LNCS State-of-the-Art
Survey, pages 137–153. Springer-Verlag, June 1998.
[42] H. Wasserman and M. Blum. Software reliability via run-
time result-checking. Journal of the ACM, 44(6):826–849,
Nov. 1997.
[43] R. White. Securing BGP through secure origin BGP. Inter-
net Protocol Journal, 6(3):15–22, Sept. 2003.
[44] R. White, D. McPherson, and S. Sangli. Practical BGP.
Addison-Wesley, 2004.
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
15