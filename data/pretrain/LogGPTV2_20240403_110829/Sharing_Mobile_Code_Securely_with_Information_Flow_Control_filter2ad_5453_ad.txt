### Source Node's Codebase and Dependency Resolution

We require that a unique implementation of a dependency be reachable in the dependency graph. In Figure 7d, two implementations are reachable for `pkg.A`, leading the compiler to reject the publication of `pkg.B`. Namespace consistency promotes modular design without enforcing a specific module system, thus allowing a wider range of workflows compared to previous systems. For example, independently linking components via common interfaces isolates each component’s namespace and abstract dependencies from their implementation. If the namespaces of these components are consistent, an updated version of one component can link against the other classes without changing them. This allows programs to evolve incrementally and securely while avoiding unnecessary re-publication of classes.

The consistency constraint applies only to the static dependencies of a class and does not restrict the dynamic type of objects beyond normal type safety. At runtime, a reference may point to an object whose class type is neither in the class’s codebase nor consistent with its namespace. There is no risk of confusion because our constraint ensures that dependent code interacts with the object only via a consistently resolved supertype.

### Explicit Codebases

We introduce explicit codebases as a language mechanism for referencing specific implementations of dependencies. An explicit codebase is a name for a codebase object published in Fabric. Programmers can use this alias to qualify dependencies that should be resolved through the specified codebase rather than the class’s codebase. Explicit codebases can appear at the root of any fully qualified type name.

When a name is qualified via an explicit codebase, the namespace of the specified dependency is isolated from that of the dependent class. Since the programmer's intention is unambiguous, dependencies linked via explicit codebases are exempt from namespace-consistency checks.

Explicit codebases can refer to multiple implementations of a dependency within the same namespace. For instance, to override the superclass method `C.m(A)` in `pkg.B`, the class definition should read:

```java
1 package pkg;
2 codebase cb1;
3 class B extends C {
4   void m(cb1.A a) {
5     // Method body
6   }
}
```

The publisher associates the alias "cb1" with a Fabric reference to codebase CB1 on the command line.

We expect explicit codebases to have two main uses. The most common use is to support the evolution of published code. Using explicit codebases, classes can provide methods or implement interfaces that maintain compatibility with code and persistent objects from older class versions. A second use is for composing software components with conflicting dependencies. If software components have conflicting dependencies that do not affect program functionality, it may be desirable to isolate the namespace of each component using an explicit codebase.

### Implementation

To evaluate our design, we extended the Fabric prototype to support mobile code, as described below.

#### Compiler

We extended the Fabric compiler to support the new language features and analyses. Additional extensions were required to enable the compiler to load dependencies from Fabric. Provider-bounded label checking is implemented as part of Jif and is inherited by Fabric. These compiler changes comprise about 12,000 lines of Java code.

#### Class Loading

To load and run mobile code, we implemented a Java class loader used by worker nodes. When the JVM requests a new class, the class loader fetches the corresponding Fabric FClass object, which contains references to its home codebase and the source code. To specify which codebase should be used, the compiler mangles class names mentioned by mobile code to include their home codebases.

After fetching a class object, the loader invokes the Fabric compiler on the source code to verify the class and generate bytecode. Important context information, such as the worker’s principal, the runtime label of the code, and the codebase, is also passed to the compiler. The compiler generates Java bytecode and caches it locally in memory and on disk, so that compilation can be reused. After compilation, the loader reads the bytecode from the cache and uses the Java class loader API to load it into the JVM.

For bootstrapping purposes, certain system classes are treated specially. They are loaded from bytecode on disk, similar to the default Java classloader.

The definitions of the `Codebase` and `FClass` classes were written in Fabric and contain about 90 lines of code. The remaining changes to the runtime system comprise about 2,200 lines of Java code and 420 lines of Fabric code.

#### Limitations

Some mechanisms are not yet implemented in the current Fabric implementation. These omissions should not significantly affect the results reported here:

- Access labels are implemented, but full support for runtime enforcement of access labels in multi-worker transactions is incomplete.
- When an object is fetched from a remote node, a dynamic check is done to ensure that its class is a subtype of the expected type of the reference to the object. Currently, this check does not account for parameters of parameterized types.
- We have not implemented the class object replication scheme of Section 5.6.

### Evaluation

Our architecture has three key goals: security, expressiveness, and acceptable performance.

#### FriendMap Example

To demonstrate that Mobile Fabric is sufficiently powerful to securely implement interesting functionality, we implemented a prototype of the FriendMap example. It contains roughly 2,500 lines of Fabric code, with about 200 lines implementing the extended versions of FriendMap and Snapp. FriendMap was developed over six weeks by two developers.

As described in Section 2, the application runs on Alice’s worker and integrates code from FriendMap, MapServ, and Snapp with data from Snapp and MapServ.

Figure 8 shows the `createMap` method, which provides the key functionality of FriendMap. This method computes a bounding box of a user’s friends (lines 9–14), uses that bounding box to fetch an image from MapServ and construct a private copy (lines 15–16), and then annotates the map with the user’s friends’ locations (lines 17–20).

The method takes the dynamic labels `resultLbl` and `friendAccess` as arguments. The `resultLbl` argument describes the policy on the created map; it is used in lines 13 and 19 to ensure that friends with private locations will not affect the resulting map.

The `friendAccess` argument allows the caller to specify a bound on the access labels of the friends who are fetched. This allows a user to plot friends stored on other social networks while preventing the user from fetching those objects if the friends’ social networks are not trusted to learn about the state of the computation (lines 12 and 18).

In addition to these dynamic checks, this code requires further relationships between various labels to be considered secure. These relationships are demanded by the `where` clauses on lines 3–7, which must be checked by any method that calls `createMap`.

For example, the first clause (on lines 4–5) guards the flows of information from the code itself (labeled `provider` and `MapServer.provider`), from the fact that the method was called (labeled `pc`), and from the user’s set of friends (labeled `{⊥→; (cid:62)←user}`) to effects on the resulting map (labeled `resLbl`), as well as fetches of the user’s object, the map server’s initial map, and the friends (with access labels `{*→user.sn}`, `{*→ms}`, and `friendAccess` respectively).

Omitting any of the `where` clauses or the dynamic checks in this example would lead to exploitable information flows in the FriendMap application. Mobile Fabric requires the FriendMap developers to insert these checks; without them, the application would fail to compile, and users would not be able to execute it.

We also implemented one of the evolution scenarios described in Section 6. We implemented a second version of the Snapp codebase that adds a `mood` field to `User` objects. The version 2 classes use the explicit codebase feature to refer to the version 1 classes, and the `User` class in version 2 extends the `User` class in version 1.

We subsequently extended the FriendMap application to make use of this extended functionality. FriendMap version 2 extends FriendMap version 1 and overrides the implementation of the `addPin` method to color the added pin using the user’s mood. Because version 2 is a backward-compatible extension of version 1, it must be able to handle version 1 `User` objects that have no moods. The implementation uses explicit codebases to perform dynamic type checks and falls back to version 1 behavior if version 1 users are encountered.

#### Bidding Agent Example

In this example, a user supplies an agent to choose between two ticket offers made by different airlines. The choice may depend on factors confidential to the user, such as preferred price or expected service level. Airlines, in turn, supply agents that compete for the best offer to provide to the user while maximizing profit. This example is about 570 lines of code.

Four parties participate: a trusted broker, two airlines, and the user. They are represented by Fabric principals `Broker`, `AirlineA`, `AirlineB`, and `User`. Principal `Broker` is trusted by others: `Broker(cid:60)AirlineA`, `Broker(cid:60)AirlineB`, and `Broker(cid:60)User`; no other trust relationships are assumed. Every principal is associated with a Fabric store.

To facilitate interaction among different mobile agents, `Broker` publishes interfaces, illustrated in Figure 9, for the airlines’ and user’s agents. The interfaces use principal and label parameterization, a Fabric language feature that facilitates modular development and genericity. Interface `UserAgent` has a label parameter `L` that corresponds to the security level of the offers it chooses from. The `choice` function returns -1 if the first offer is preferred, 1 if the second offer is preferred, and 0 if offers are equally preferred. Interface `Agent` for airline agents uses two parameters: `A` for the airline principal and `L` for the label of the offers. Two noteworthy methods here are `prepareForAuction` and `makeOffer`.

Method `prepareForAuction` may be called before bidding starts. The begin-label of this method, `{A→;A←}`, permits information about calling this method to be observed by airline `A`. This allows airline agents to fetch new information from the airline, such as seat availability or current lowest prices. Method `makeOffer` is called during the bidding phase and generates a new offer to the user’s agent. The signature of this method records the key feature of our mobile-code framework: the user’s agent is passed in as a method argument and can be called internally by the airline agent. Similarly, the current best offer is passed as another argument, allowing the agent to find an offer better than the current best according to the user—while still trying to maximize profit.

The enforcement of information-flow policies ensures that no confidential information (such as the user’s maximum price or offers from competing airlines) flows from the agents to the principals that provided them, despite the fact that these agents process this sensitive information directly.

Figure 10 shows the initialization of mobile agents. Lines 1–2 declare a label `auction` at which offers are produced. The confidentiality component of this label, `{Broker→}`, records the sensitivity of the auction.