particular, we need to show that for every PPT algorithm A there
is a negligible function ϵ(·) so that it holds that
Pr[k ←R Kκ , k
∗ ← A(1κ , fk(x)) : fk(x) = fk∗(x)] ≤ ϵ(κ),
for any x ∈ Mκ. We denote by keyset(y) the set of keys B such
that for all k ∈ B, fk(r) = y. If there is no such satisfying key,
keyset(y) returns the empty set. For an algorithm A, denote by
ty the probability that A will output a key k′ on input y such that
fk′(r) = y. Then, using this notation we can rewrite the probability
above as
P1 :=
y
|keyset(y)|
|Kκ|
· ty
and we need to show that P1 is negligible for any A.
First, we define, probability P2, which is the probability that A
will output the “correct key", by which we mean the same key that
was chosen to generate y. Since the key was chosen uniformly
at random, information-theoretically, there is no way for A to
distinguish between the “correct key" and any other valid key (i.e.
any k′ for which fk′(r) = y). Thus, the only strategy that A has
is to output any valid key and with probability 1/keyset(y), the key
that it outputs will be the “correct key". Thus, we have:
∗ ← A(1κ , fk(x)) : k = k
∗]
=
P2 : = Pr[k ←R Kκ , k
|Kκ|
|keyset(y)|

y
ty
y
= 1
|Kκ|
· ty ·
1
|keyset(y)|
We now show that P2 is negligible. Assume that there exists an A
for which P2 is equal to a non-negligible ϵ. Then we can build a
17
follows
continue
distinguisher D that distinguishes between F and a random function
as follows:
DO(1|k |)
(1) y′ ← O(r). Queries the oracle on x and receive response
y′.
(2) Invoke A on input y′.
(a) if ⊥ ← A(y′), output 0.
(b) if k∗ ← A(y′), check that this is the “correct key" as
(i) First check that fk∗(r) = y. If not, output 0. Else,
(ii) Next, choose a value q ← Mκ uniformly at
random and query on that value – i.e. query for
z ← O(q).
(iii) Check that z = fk∗(q). If it does not, output 0. If
Now, let’s analyze the output of D. Whenever A outputs the “cor-
rect key", D will output 1. Moreover, A will output the correct key
with probability ϵ. Thus, if D’s oracle is a pseudorandom function
– i.e. if O = fk, then with probability at least ϵ, D will output 1.
To see that this is true notice that when O = fk, the key k for fk
is chosen from the same distribution as in a real execution, and
thus A’s success probability on outputting the “correct key" will
be exactly ϵ.18
If, however, O is a random function – i.e. O = Fn, then D will
only output 1 in the event that Fn(q) = fk∗(q). In step (iii), once
we have chosen a key k∗, the probability of the random function
|M|−1, which is negligible in |k|
1
agreeing with Fk∗ on q is δ =
since |M| ≥ |K| = 2|k |.
it does, output 1.
Thus, we have built a good distinguisher since:
| Pr[Dfk (1|k |) = 1] − Pr[DFn(1|k |) = 1]| ≥ ϵ − δ
which is non-negligible.
This contradicts our assumption that { fk} is a pseudorandom
function family, and we therefore conclude that P2 is negligible.
We now show that |P1−P2| is negligible. Once again, consider an
algorithm A that on input y outputs a key k′ such that fk′(x) = y
with probability ty. Consider the following two games.
Game 1. A key k ← Kκ is chosen uniformly at random and y =
fk(x) is given to the adversary. The adversary wins if it can produce
a key k′ such that fk′(x) = y. The probability of A succeeding at
this game is exactly P1:
|keyset(y)|
|Kκ|
· ty
y
Game 2. y ← M is chosen uniformly at random and given to the
adversary. The adversary wins if it can output a key k′ such that
Fk′(r) = y. The difference between this game and the previous one
is that now we choose y uniformly irrespective of the keys. Thus
all y’s will be chosen with equal probability no matter how many
keys (if any) map r to y. The success probability of A in this game
is
18It is possible that when O = fk , D will output 1 with probability greater than ϵ
–i.e. if A outputs the wrong key that happens to agree with the “correct key" on the
queried values, but for the sake of our argument it suffices to show that it outputs 1
with probability at least ϵ.

y
ty
P3 := 1
|Mκ|
Now, if you could distinguish between Game 1 and Game 2, you
could build an algorithm D that distinguishes f from a random
function. D simply queries its oracle at r, and send the response
y to A. If the oracle is a pseudorandom function, then the success
probability will be exactly the same as Game 1, namely P1. If it is
a random function, the success probability is exactly the same as
Game 2, namely P3. Thus, by Definition C.2, we know that |P1 − P3|
is negligible.
Since |Kκ| ≤ |Mκ|, then P2 ≤ P3, and in particular, when |Kκ| =
|Mκ|, P2 = P3. We thus have that |P1 − P2| is negligible. Since we
have shown that both P2 and |P1 − P2| are negligible, it follows that
P1 is negligible as well. □
E PARALLELIZATION OF PROOFS
One positive aspect regarding the t parallel repetitions is that they
are independent of each other. This observation was also made for
ZKBoo in [44]. In particular, this holds for all steps in the signing
and verification algorithm up to the initial requests to OpenSSL’s
random number generator and the computation of the challenge.
This allows us to take advantage of the multi-core architecture
of modern processors using OpenMP.19 As exemplified for Fish
in Figure 2, we can observe a significant performance increase
until the number of threads matches the actual number of CPU
cores20. We note that exactly the same effects also occur for instan-
tiations of Picnic. Furthermore, they also occur regardless of the
LowMC parameters. The speed-up is not linear with our current
implementation. The speed-up from one to two threads is about 2x,
but becomes smaller as additional cores are added, likely because
memory access becomes a bottleneck.
F SECURITY OF THE PROOF SYSTEM IN THE
QUANTUM RANDOM ORACLE MODEL
Here we prove that the proof system we get by applying our modi-
fied Unruh transform to ZKB++ as described in Section 5 is both
zero knowledge and simulation-extractable in the quantum random
oracle model.
Before we begin, we note that the quantum random oracle model
is highly non-trivial, and a lot of the techniques used in standard
random oracle proofs do not apply. The adversary is a quantum
algorithm that may query the oracle on quantum inputs which are
a superposition of states and receive superposition of outputs. If
we try to measure those states, we change the outcome, so we do
not for example have the same ability to view the adversary’s input
and program the responses that we would in the standard ROM.
Here we rely on lemmas from Unruh’s work on quantum-secure
Fiat-Shamir like proofs [84]. We follow his proof strategy as closely
as possible, modifying it to account for the optimizations we made
and the fact that we have only 3-special soundness in our underlying
Σ-protocol.
Zero Knowledge This proof very closely follows the proof from
[84]. The main difference is that we also use the random oracle to
19http://openmp.org
20HyperThreading was disabled to reduce noise in the benchmarks.
18
(a) Sign
(b) Verify
Figure 2: Runtime of the parallelized version of Sign and
Verify of Fish using an increasing number of threads. The
x-axis shows the running time, while y-axis shows the var-
ious LowMC parameter sets, sorted by signature size (as in
Figure 1).
form our commitments, which is addressed in the transition from
game 2 to game 3 below.
Consider the simulator described in Figure 5. From this point on
we assume for simplicity of notation that View3 includes x3.
We proceed via a series of games.
Game 1: This is the real game in the quantum random oracle
model. Let Hcom be the random oracle used for forming
the commitments, Hchal be the random oracle used for
forming the challenge, and G be the additional random
permutation.
Game 2: We change the prover so that it first chooses ran-
dom e∗ = e∗(1), . . . , e∗(t), and then on step 2, it programs
Hchal(a(1), . . . , a(t), h(1), . . . , h(t)) = e∗.
6065707580859095Size [kB]5101520253035Time [ms]1 thread2 threads3 threads4 threads6065707580859095Size [kB]2.55.07.510.012.515.017.5Time [ms]1 thread2 threads3 threads4 threadsp ← Sim(x): In the simulator, we follow Unruh, and replace the initial state (before programming) of the random oracles with random
polynomials of degree 2q − 1 where q is an upper bound on the number of queries the adversary makes.
(i)
j
1. For i ∈ [1, t], choose random e(i) ← {1, 2, 3}. Let e be the corresponding binary string.
(i)
2. For each iteration ri , i ∈ [1, t]: Sample random seeds k
e(i) , k
(i)
(i)
(i)
(i)
(i)
3 , and if e(i) = 1 x
e(i)+1, output shares y
2 , y
1 , y
3 .
View
(i)
(i)
(i)
For j = e(i), e(i) + 1 commit [C
j ] ← [H(k
j ), k
, View
, D
j
(i)
Choose random Ce(i)+2, д
e(i)
(i)
(i)
(i)
(i)
(i)
3 ). And h(i) = д
Let a(i) = (y
3 .
2 , д
1 , C
3 , C
(i)
) and set
e(i)+2
(i)
(i)
2 )
(View
2 , k
(i)
(i)
(View
3 , x
3 , k
(i)
(i)
(View
1 , k
1 , x
4. Output p ← [e,(b(1), z(1)),(b(2), z(2)),· · · ,(b(t), z(t))].
2. Set the challenge: program H(a(1), . . . , a(t)) := e.
(i)
3. For each iteration ri, i ∈ [1, t]: let b(i) = (y
e(i)+2, C
if e(i) = 1,
if e(i) = 2,
if e(i) = 3.
(i)
1 , k
(i)
2 , k
(i)
3 , k
(i)
3 )
(i)
3 )
(i)
2 , C
(i)
1 , д
(i)
1 , y
(i)
2 , y
(i) ←
z
(i)
e(i)+1 and run the circuit decomposition simulator to generate View
(i)
j
(i)
j ], and compute д
||View
= G(k
(i)
j ).
, View
(i)
j
(i)
j
(i)
e(i),
Scheme 5: The zero knowledge simulator
(i)
j
(i)
1 , д
Note that each the a(1), . . . , a(t), h(1), . . . , h(t) has suffi-
(i)
cient collision-entropy, since it includes {h(i) = (д
2 ,
(i)
3 )}, the output of a permutation on input whose first
д
k bits are chosen at random (the k
), so we can apply
Corollary 11 from [84] (using a hybrid argument) to argue
that Game 1 and Game 2 are indistinguishable.
Game 3: We replace the output of each Hcom(ke∗(i) , Viewe∗(i))
and G(ke∗(i) , Viewe∗(i)) with a pair of random values.
First, note that Hcom and G are always called (by the
honest party) on the same inputs, so we will consider them
as a single random oracle with a longer output space, which
we refer to as H for this proof.
Now, to show that Games 2 and 3 are indistinguishable,
we proceed via a series of hybrids, where the i-th hybrid
replaces the first i such outputs with random values.
0 followed by AC to generate x, and then run AH
To show that the i-th and i + 1-st hybrid are indistin-
guishable, we rely on Lemma 9 from [84]. This lemma
says the following: For any quantum A0, A1 which make
q0, q1 queries to H respectively and classical AC, all three
of which may share state, let PC be the probability if we