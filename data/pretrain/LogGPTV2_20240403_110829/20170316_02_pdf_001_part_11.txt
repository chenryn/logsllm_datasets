• Accesses to memory through an integer type are now always aligned. (Some RISC platforms
reported alignment problems with parts of the code; thanks are due to Nelson Beebe for
identifying and testing these cases.)
• The decContextTestEndian function has been added. This tests that the DECLITEND tuning
parameter (see page 70) is set correctly, and optionally displays a message if it is not. A call to
this function has been added to example1.c. This test is no longer automatic under DECCHECK
(it was inconvenient in some cases).
• The customization and tuning parameters are now only set to default values in the header files if
not already defined. These means that they can be set from the compiler command line if
desired (e.g., with the option -DDECUSE64=0).
• The decDoubleFromPackedChecked function has been added (also for decSingle and
decQuad); this is the same as decDoubleFromPacked except that all input values are checked.
• Edge-case errors in multiply, FMA, and remainder functions have been corrected.
• Minor code changes have been made to improve performance in some areas.
Changes in Version 3.61 (29 July 2008)
This release of decNumber is a code maintenance and performance release. The changes are:
• A fastpath has been added to decDoubleAdd and decQuadAdd for the common case of aligned
Version 3.68 Appendix B – Changes 85
additions with exact results. This typically improves the performance in these cases by 2× or 3×
respectively.
• The performance of decNumberSquareRoot has been improved when the result is exact or
definitely inexact.
• The IEEE 854 names in decContext.h are now supplied with IEEE 754 names too (e.g.,
DEC_IEEE_754_Inexact).
• References to IEEE 854 and the old IEEE 754 standard have been removed and/or changed to
refer to IEEE 754-2008.
• All references to the General Decimal Arithmetic website have been updated to
http://speleotrove.com/decimal (its new location).
• A problem in decFloatSubtract and decFloatQuantize due to the ISCOEFFZERO macro re-using
UBTOUI has been corrected (this only affected compilers that take advantage of C99 strict
aliasing rules). This problem was previously published as an errata to 3.56.
• A buffer in decQuadQuantize was two bytes too short when the coefficient of the first operand
had to be extended with 33 zeros; this is now corrected. This problem was previously published
as an errata to 3.56.
23 March 2009: The document is now formatted using OpenOffice (generated from GML), for
improved PDF files with bookmarks, hot links, etc. There are no technical changes.
Changes in Version 3.68 (23 January 2010)
This release of decNumber is primarily a code maintenance release. The changes are:
• Minor problems in the decNumberLogB, decNumberScaleB, decDoubleIsSigned, and
decQuadIsSigned functions have been corrected. These problems were previously published as
errata to 3.61.
• The decDoubleIsLogical, decDoubleIsNegative, and decDoubleIsPositive functions have
been added (also for decQuad); these test whether the argument is valid for use as an operand to
the logical functions, or is less than zero, or is greater than zero, respectively.
• The DECPRINT compile-time parameter has been added. This may be set to 0 to prevent the
package using the printf function.
86 Appendix B – Changes Version 3.68
Index
6 in decDouble 52
in decimal128 48
64-bit integers 10, 70
in decimal32 48
A in decimal64 48
in decQuad 52
abs operation 34, 54 in decSingle 52
abs operation, quiet 42, 55
addition 34, 36, 40, 54, 63 C
adjusted exponent 22, 30
canonical form 50, 51, 54
aliasing, strict 21, 52
checking, of arguments 32, 72
and, logical 35, 54
clamp 81
ANSI standard
clamp
for REXX 7
in decContext 23
X3.274-1996 7
Clamped condition 24
arbitrary precision 5
class of numbers 41, 54
arguments
classification of numbers 41, 54
corrupt 32
code parameter
modification of 32
DECALLOC 72
passed by reference 21
DECCHECK 72
arithmetic
DECEXTFLAG 70
decimal 5
DECLITEND 70
decNumber 34
DECPRINT 72
functions 34
DECSUBSET 70
specification 5
DECTRACE 72
auditing, of storage allocation 72
DECUSE64 70
B coefficient
in decNumber 30
base 45 rotating 39
basic format 6 shifting 40
BCD comparison 35-37, 55
see Binary Coded Decimal 5, 6 compile-time parameters 70-72
BCD8 encoding 56 compound interest 12
big-endian 48, 53, 70 compressed formats 5, 16
Binary Coded Decimal 5, 6, 43, 46, 67 constants
Binary Coded Decimal naming convention 21
conversion 56, 57, 63, 64 conversion
binary integer conversion 42, 43, 46, 56, 57, 64, 65 BCD to decFloat 56, 57
bits binary integer to decFloat 56, 57
in a nibble 67 binary integer to number 42, 43
in decNumber 30 decFloat to BCD 63, 64
bytes decFloat to binary integer 64, 65
Version 3.68 Index 87
decFloat to decNumber 20, 64 digits 22
decFloat to packed 64 emax 22
decimal128 to number 50 emin 22
decimal128 to string 49, 50 extended 23
decimal32 to number 50 module 22
decimal32 to string 49, 50 round 22
decimal64 to number 50 status 23
decimal64 to string 49, 50 traps 23
decNumber 33 decContext.h file 24, 70
decNumber to decFloat 20, 56 decContextClearStatus function 25
number to binary integer 46 decContextDefault function 25
number to decimal128 50 decContextGetRounding function 26
number to decimal32 50 decContextGetStatus function 26
number to decimal64 50 decContextRestoreStatus function 26
number to packed 67 decContextSaveStatus function 26
number to string 33, 34 decContextSetRounding function 27
packed to decFloat 56, 57 decContextSetStatus function 27
packed to number 68 decContextSetStatusFromString function 27
string to decFloat 57 decContextSetStatusFromStringQuiet function 28
string to decimal128 49 decContextSetStatusQuiet function 28
string to decimal32 49 decContextStatusToString function 28
string to decimal64 49 decContextTestEndian function 28
string to number 33 decContextTestSavedStatus function 28
copying numbers 41, 42, 55 decContextTestStatus function 29
corrupt arguments 32 decContextZeroStatus function 29
customization 70 decDouble 6, 9
cycle times 73 bytes 52
module 52
D
performance 74
DEC_Clamped condition 24 using 19
DEC_Divide_by_zero 60 decDouble.h file 53
DEC_Division_impossible 35, 39, 56, 62 decDoubleAbs function 54
DEC_Errors bits 13, 14, 24, 32 decDoubleAdd function 54
DEC_Inexact condition 13, 24 decDoubleAnd function 54
DEC_Invalid_operation condition 38, 39 decDoubleCanonical function 54
DEC_Lost_digits condition 24 decDoubleClass function 54
DEC_ROUND_05UP 22 decDoubleClassString function 54
DEC_ROUND_CEILING 22 decDoubleCompare function 55
DEC_ROUND_DEFAULT 23 decDoubleCompareSignal function 55
DEC_ROUND_DOWN 22 decDoubleCompareTotal function 55
DEC_ROUND_FLOOR 22 decDoubleCompareTotalMag function 55
DEC_ROUND_HALF_DOWN 22 decDoubleCopy function 55
DEC_ROUND_HALF_EVEN 22 decDoubleCopyAbs function 55
DEC_ROUND_HALF_UP 22 decDoubleCopyNegate function 55
DEC_ROUND_UP 22 decDoubleCopySign function 55
DEC_Rounded condition 13, 24 decDoubleDigits function 55
DEC_Subnormal condition 24 decDoubleDivide function 55
DECALLOC code parameter 72 decDoubleDivideInteger function 56
DECBUFFER tuning parameter 71 decDoubleFMA function 56
DECCHECK code parameter 32, 72 decDoubleFromBCD function 56
decClass enumeration 24, 32 decDoubleFromInt32 function 56
decContext 5, 19 decDoubleFromNumber function 56
clamp 23 decDoubleFromPacked function 56
decDoubleFromPackedChecked function 57
88 Index Version 3.68
decDoubleFromString function 57 decDoubleToUInt32 function 65
decDoubleFromUInt32 function 57 decDoubleToUInt32Exact function 65
decDoubleFromWider function 57 decDoubleToWider function 65
decDoubleGetCoefficient function 58 decDoubleVersion function 65
decDoubleGetExponent function 58 decDoubleXor function 65
decDoubleInvert function 58 decDoubleZero function 66
decDoubleIsCanonical function 58 decDPD.h file 49, 53
decDoubleIsFinite function 58 DECDPUN tuning parameter 30, 32, 71
decDoubleIsInfinite function 58 DECENDIAN tuning parameter 84
decDoubleIsInteger function 58 DECEXTFLAG code parameter 70
decDoubleIsLogical function 59 DECEXTFLAG tuning parameter 24, 84
decDoubleIsNaN function 59 decFloats 5, 6, 9
decDoubleIsNegative function 59 performance 73
decDoubleIsNormal function 59 using 19, 20
decDoubleIsPositive function 59 decFloats modules 52
decDoubleIsSignaling function 59 decimal arithmetic 5
decDoubleIsSignalling function 59 using 9
decDoubleIsSigned function 59 decimal128 6
decDoubleIsSubnormal function 59 bytes 48
decDoubleIsZero function 59 module 48
decDoubleLogB function 60 using 17
decDoubleMax function 60 decimal128.h file 48
decDoubleMaxMag function 60 decimal128Canonical function 50
decDoubleMin function 60 decimal128FromNumber function 50
decDoubleMinMag function 60 decimal128FromString function 49
decDoubleMinus function 60 decimal128IsCanonical function 51
decDoubleMultiply function 60 decimal128ToEngString function 50
decDoubleNextMinus function 60 decimal128ToNumber function 50
decDoubleNextPlus function 61 decimal128ToString function 49
decDoubleNextToward function 61 decimal32 6
decDoubleOr function 61 bytes 48
decDoublePlus function 61 module 48
decDoubleQuantize function 61 using 17
decDoubleRadix function 61 decimal32.h file 48
decDoubleReduce function 61 decimal32Canonical function 50
decDoubleRemainder function 62 decimal32FromNumber function 50
decDoubleRemainderNear function 62 decimal32FromString function 49
decDoubleRotate function 62 decimal32IsCanonical function 51
decDoubleSameQuantum function 62 decimal32ToEngString function 50
decDoubleScaleB function 62 decimal32ToNumber function 50
decDoubleSetCoefficient function 62 decimal32ToString function 49
decDoubleSetExponent function 63 decimal64 6
decDoubleShift function 63 bytes 48
decDoubleShow function 63 module 48
decDoubleSubtract function 63 using 16
decDoubleToBCD function 63 decimal64 numbers 16
decDoubleToEngString function 63 decimal64.h file 48
decDoubleToInt32 function 64 decimal64Canonical function 50
decDoubleToInt32Exact function 64 decimal64FromNumber function 50
decDoubleToIntegralExact function 64 decimal64FromString function 49
decDoubleToIntegralValue function 64 decimal64IsCanonical function 51
decDoubleToNumber function 64 decimal64ToEngString function 50
decDoubleToPacked function 64 decimal64ToNumber function 50
decDoubleToString function 65 decimal64ToString function 49
Version 3.68 Index 89
DECLITEND code parameter 70 decNumberLog10 function 36
DECLITEND tuning parameter 48, 53 decNumberLogB function 36
DECNEG sign bit 32 decNumberMax function 36
decNumber 5, 30 decNumberMaxMag function 37
bits 30 decNumberMin function 37
coefficient 30 decNumberMinMag function 37
digits 30 decNumberMinus function 37
examples 31 decNumberMultiply function 37
exponent 30 decNumberNextMinus function 37
lsu 30 decNumberNextPlus function 37
module 30 decNumberNextToward function 37
msu 30 decNumberNormalize
performance 73 see decNumberReduce 45
sign 30 decNumberOr function 38
significand 30 decNumberPlus function 38
size 30 decNumberPower function 38
special values 30 decNumberQuantize function 38
version 47, 65 decNumberRadix function 45
decNumber.h file 11, 71 decNumberReduce function 45
decNumberAbs function 34 decNumberRemainder function 39
decNumberAdd function 34 decNumberRemainderNear function 39
decNumberAnd function 35 decNumberRescale function 39
decNumberClass function 41 decNumberRotate function 39
decNumberClassToString function 41 decNumberSameQuantum function 40
decNumberCompare function 35 decNumberScaleB function 40
decNumberCompareSignal function 35 decNumberSetBCD function 46
decNumberCompareTotal function 35 decNumberShift function 40
decNumberCompareTotalMag function 35 decNumberSquareRoot function 40
decNumberCopy function 41 decNumberSubtract function 40
decNumberCopyAbs function 42 decNumberToEngString function 34
decNumberCopyNegate function 42 decNumberToInt32 function 46
decNumberCopySign function 42 decNumberToIntegralExact function 41
decNumberDivide function 35 decNumberToIntegralValue 81
decNumberDivideInteger function 35 decNumberToIntegralValue function 41
decNumberExp function 35 decNumberToString function 33
decNumberFMA function 36 decNumberToUInt32 function 46
decNumberFromInt32 function 42 decNumberTrim function 46
decNumberFromString function 33 decNumberUnit type 31, 71
decNumberFromUInt32 function 43 decNumberVersion function 47
decNumberGetBCD function 43 decNumberXor function 41
decNumberInvert function 36 decNumberZero function 47
decNumberIsCanonical function 43 DECNUMDIGITS constant 16, 17, 31
decNumberIsFinite function 43 set by decimal128.h 48
decNumberIsInfinite function 43 set by decimal32.h 48
decNumberIsNaN function 44 set by decimal64.h 48
decNumberIsNegative function 44 set by decPacked.h 67
decNumberIsNormal function 44 decPacked 6
decNumberIsQNaN function 44 module 67
decNumberIsSNaN function 44 using 18
decNumberIsSpecial function 45 decPacked.h file 67
decNumberIsSubnormal function 45 decPackedFromNumber function 67
decNumberIsZero function 45 decPackedToNumber function 68
decNumberLn function 36 DECPRINT code parameter 72
decNumberLocal.h file 21, 70-72 decQuad 6, 9
90 Index Version 3.68
bytes 52 decQuadMultiply function 60
decNumber use 20 decQuadNextMinus function 60
module 52 decQuadNextPlus function 61
performance 76 decQuadNextToward function 61