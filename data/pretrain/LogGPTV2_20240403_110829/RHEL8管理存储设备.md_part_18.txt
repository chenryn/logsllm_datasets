::: titlepage
# []{#configuring-fibre-channel-over-ethernet_managing-storage-devices.html#additional_resources}其它资源 {.title}
:::
::: itemizedlist
-   有关使用光纤通道设备的详情，请参考
    [使用光纤通道设备](#using-fibre-channel-devices_managing-storage-devices.html#resizing-fibre-channel-logical-units_using-fibre-channel-devices "重新定义光纤逻辑单位大小"){.link}
:::
:::
:::
[]{#configuring-maximum-time-for-storage-error-recovery-with-eh_deadline_managing-storage-devices.html}
::: chapter
::: titlepage
# []{#configuring-maximum-time-for-storage-error-recovery-with-eh_deadline_managing-storage-devices.html#configuring-maximum-time-for-storage-error-recovery-with-eh_deadline_managing-storage-devices}第 10 章 使用 eh_deadline 配置存储错误恢复的最大时间 {.title}
:::
您可以配置最大允许的时间来恢复失败的 SCSI 设备。这个配置保证了 I/O
响应时间，即使存储硬件因为失败而变得无响应。
::: section
::: titlepage
# []{#configuring-maximum-time-for-storage-error-recovery-with-eh_deadline_managing-storage-devices.html#the-eh_deadline-parameter_configuring-maximum-time-for-storage-error-recovery-with-eh_deadline}eh_deadline 参数 {.title}
:::
SCSI 错误处理(EH)机制试图在失败的 SCSI 设备中执行错误恢复。SCSI 主机对象
`eh_deadline`{.literal}
参数允许您配置恢复的最长时间。配置的时间过期后，SCSI EH
将停止并重置整个主机总线适配器(HBA)。
使用 `eh_deadline`{.literal} 可缩短时间：
::: itemizedlist
-   关闭失败的路径,
-   切换路径，或者
-   禁用 RAID 分片。
:::
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
当 `eh_deadline`{.literal} 过期时，SCSI EH 会重置 HBA，HBA 会影响该 HBA
上的所有目标路径，而不仅仅是失败的路径。如果由于其他原因无法使用冗余路径，则可能会出现
I/O 错误。只有在所有目标中有完全冗余的多路径配置时才启用
`eh_deadline`{.literal}。
:::
### []{#configuring-maximum-time-for-storage-error-recovery-with-eh_deadline_managing-storage-devices.html#scenarios_when_eh_deadline_is_useful}eh_deadline 很有用的情况
在大多数情况下，您不需要启用 `eh_deadline`{.literal}。在某些情况下，使用
`eh_deadline`{.literal}
非常有用，例如光纤通道(FC)交换机和目标端口之间的链接丢失，并且 HBA
不会收到注册状态更改通知(RSCN)。在这种情况下，I/O
请求和错误恢复命令会随时超时，而不是遇到错误。在这个环境中的
`eh_deadline`{.literal} 设置会为恢复时间设置一个上限。这可让失败的 I/O
在由 DM 多路径的另一个可用路径中检索。
在以下情况下，`eh_deadline`{.literal} 功能不会提供额外的好处，因为 I/O
和错误恢复命令会立即失败，这样可允许 DM 多路径重试：
::: itemizedlist
-   如果启用了 RSCN
-   如果 HBA 没有注册链接变得不可用
:::
### []{#configuring-maximum-time-for-storage-error-recovery-with-eh_deadline_managing-storage-devices.html#possible_values}可能的值
`eh_deadline`{.literal} 的值以秒为单位指定。
默认设置为 `off`{.literal}，它会禁用时间限制并允许进行所有错误恢复。
:::
::: section
::: titlepage
# []{#configuring-maximum-time-for-storage-error-recovery-with-eh_deadline_managing-storage-devices.html#setting-the-eh_deadline-parameter_configuring-maximum-time-for-storage-error-recovery-with-eh_deadline}设置 eh_deadline 参数 {.title}
:::
这个过程配置 `eh_deadline`{.literal} 参数的值来限制最大 SCSI 恢复时间。
::: itemizedlist
**流程**
-   您可以使用以下任一方法配置 `eh_deadline`{.literal}：
    ::: variablelist
    [`sysfs`{.literal}]{.term}
    :   将秒数写入 `/sys/class/scsi_host/host*/eh_deadline`{.literal}
        文件中。
    [内核参数]{.term}
    :   使用 `scsi_mod.eh_deadline`{.literal} 内核参数为所有 SCSI HBA
        设置默认值。
    :::
:::
::: itemizedlist
**其它资源**
-   [如何使用 udev 规则永久设置 eh_deadline 和
    eh_timeout](https://access.redhat.com/solutions/3209481){.link}
:::
:::
:::
[]{#getting-started-with-swap_managing-storage-devices.html}
::: chapter
::: titlepage
# []{#getting-started-with-swap_managing-storage-devices.html#getting-started-with-swap_managing-storage-devices}第 11 章 swap 入门 {.title}
:::
这部分论述了 swap 空间以及如何使用它。
::: section
::: titlepage
# []{#getting-started-with-swap_managing-storage-devices.html#swap-space_getting-started-with-swap}交换（swap）空间 {.title}
:::
当物理内存(RAM)已满时，将使用 Linux
[*中的交换空间*]{.emphasis}。如果系统需要更多内存资源并且 RAM
已满，内存中的不活动页面将移到交换空间。虽然交换空间可以帮助具有少量 RAM
的计算机，但不应将其视为替代更多
RAM。交换空间位于硬盘驱动器上，其访问时间比物理内存要慢。交换空间可以是专用的交换空间分区（推荐）、交换文件，或者交换分区和交换文件的组合。
过去数年，推荐的 swap 空间会随系统中的 RAM
量增加而线性增大。然而，现代系统通常包含了成百 GB 内存。因此，推荐的
swap 空间被视为系统内存工作负载的功能，而不是系统内存。
["推荐的系统 swap
空间"一节](#getting-started-with-swap_managing-storage-devices.html#recommended-system-swap-space_getting-started-with-swap "推荐的系统 swap 空间"){.xref}
根据您的系统 RAM 量以及是否有足够的内存供系统休眠显示推荐的 swap
分区大小。推荐的 swap
分区会在安装过程中自动建立。但是，为了允许休眠，您需要在自定义分区阶段中编辑交换空间。
["推荐的系统 swap
空间"一节](#getting-started-with-swap_managing-storage-devices.html#recommended-system-swap-space_getting-started-with-swap "推荐的系统 swap 空间"){.xref}
中的建议对于内存不足的系统（1 GB
及更少）尤为重要。无法在这些系统上分配足够的交换空间可能会导致问题（如不稳定），甚至会导致安装的系统无法引导。
:::
::: section
::: titlepage
# []{#getting-started-with-swap_managing-storage-devices.html#recommended-system-swap-space_getting-started-with-swap}推荐的系统 swap 空间 {.title}
:::
这部分提供有关 swap 空间的建议。
::: informaltable
  系统中的 RAM 量    推荐的 swap 空间   如果允许休眠则推荐使用 swap 空间
  ------------------ ------------------ ----------------------------------
  ⩽ 2 GB             RAM 量的 2 倍      RAM 量的 3 倍
  \> 2 GB -- 8 GB    与 RAM 量相等      RAM 量的 2 倍
  \> 8 GB -- 64 GB   至少 4 GB          RAM 量的 1.5 倍
  \> 64 GB           至少 4 GB          不推荐休眠
:::
在上表中列出的每个范围（例如，具有 2 GB、8 GB 或 64 GB 系统 RAM
的系统）之间，可根据所选的交换空间和休眠支持自由裁量。如果您的系统资源允许这样做，增加
swap 空间可能会导致更好的性能。对于有超过 140 个逻辑处理器或 3 TB RAM
的系统，建议使用至少 100 GB 的交换空间。
请注意，将交换空间分布到多个存储设备也可以提高交换空间性能，特别是在具有快速驱动器、控制器和接口的系统上。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
[*修改时，不应使用分配为交换空间的文件系统和*]{.emphasis} LVM2
卷。如果系统进程或内核正在使用交换空间，则任何修改交换的尝试都会失败。使用
`free`{.literal} 和 `cat /proc/swaps`{.literal} 命令验证使用 swap
的程度和位置。
当系统引导为 `rescue`{.literal} 模式时,您应该修改 swap 空间,请参阅执行
[*[高级 RHEL 安装中的]{.citetitle}*]{.emphasis} [Debug
引导选项](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/performing_an_advanced_rhel_installation/index#debug-boot-options_kickstart-and-advanced-boot-options){.link}。当提示挂载文件系统时，选择
[Skip]{.guibutton}。
:::
:::
::: section
::: titlepage
# []{#getting-started-with-swap_managing-storage-devices.html#adding-swap-space_getting-started-with-swap}添加 swap 空间 {.title}
:::
这部分论述了如何在安装后添加更多 swap 空间。例如，您可以将系统中的 RAM
量从 1 GB 升级到 2 GB，但只有 2 GB
交换空间。如果您执行内存密集型操作或运行需要大量内存的应用程序，则可能最好将交换空间大小增加到
4 GB。
有三个选项：创建新交换分区、创建新交换文件，或者在现有 LVM2
逻辑卷上扩展交换。建议您扩展现有逻辑卷。
::: section
::: titlepage
## []{#getting-started-with-swap_managing-storage-devices.html#extending-swap-on-an-lvm2-logical-volume_adding-swap-space}在 LVM2 逻辑卷中扩展 swap {.title}
:::
这个步骤描述了如何在现有 LVM2 逻辑卷中扩展交换空间。假设
`/dev/VolGroup00/LogVol01`{.literal} 是您要扩展为 2 GB 的卷。
::: itemizedlist
**先决条件**
-   有足够的磁盘空间。
:::
::: orderedlist
**流程**
1.  为关联的逻辑卷禁用交换：
    ``` literallayout
    # swapoff -v /dev/VolGroup00/LogVol01
    ```
2.  将 LVM2 逻辑卷大小调整为 2 GB：
    ``` literallayout
    # lvresize /dev/VolGroup00/LogVol01 -L +2G
    ```
3.  格式化新 swap 空间：
    ``` literallayout
    # mkswap /dev/VolGroup00/LogVol01
    ```
4.  启用扩展的逻辑卷：
    ``` literallayout
    # swapon -v /dev/VolGroup00/LogVol01
    ```
5.  要测试是否成功扩展并激活 swap 逻辑卷，请检查活跃 swap 空间：
    ``` literallayout
    $ cat /proc/swaps
    $ free -h
    ```
:::
:::
::: section
::: titlepage
## []{#getting-started-with-swap_managing-storage-devices.html#creating-an-lvm2-logical-volume-for-swap_adding-swap-space}为 swap 创建 LVM2 逻辑卷 {.title}
:::
这个步骤描述了如何为 swap 创建 LVM2 逻辑卷。假设
`/dev/VolGroup00/LogVol02`{.literal} 是您要添加的交换卷。
::: itemizedlist
**先决条件**
-   有足够的磁盘空间。
:::
::: orderedlist
**流程**
1.  创建大小为 2 GB 的 LVM2 逻辑卷：
    ``` literallayout
    # lvcreate VolGroup00 -n LogVol02 -L 2G
    ```
2.  格式化新 swap 空间：
    ``` literallayout
    # mkswap /dev/VolGroup00/LogVol02
    ```
3.  在 `/etc/fstab`{.literal} 文件中添加以下条目：
    ``` literallayout
    /dev/VolGroup00/LogVol02 swap swap defaults 0 0
    ```
4.  重新生成挂载单元以便您的系统注册新配置：
    ``` literallayout
    # systemctl daemon-reload
    ```
5.  在逻辑卷中激活 swap：
    ``` literallayout
    # swapon -v /dev/VolGroup00/LogVol02
    ```
6.  要测试是否成功创建并激活了 swap 逻辑卷，请检查活跃 swap 空间：
    ``` literallayout
    $ cat /proc/swaps
    $ free -h
    ```
:::
:::
::: section
::: titlepage
## []{#getting-started-with-swap_managing-storage-devices.html#creating-a-swap-file_adding-swap-space}创建交换文件 {.title}
:::
这个步骤描述了如何创建交换文件。
::: itemizedlist
**先决条件**
-   有足够的磁盘空间。
:::
::: orderedlist
**流程**
1.  以 MB 为单位确定新交换文件的大小，再乘以 1024 来确定块数量。例如：
    64MB swap 文件的块大小为 65536。
2.  创建一个空文件：
    ``` literallayout
    # dd if=/dev/zero of=/swapfile bs=1024 count=65536
    ```
    使用与所需块大小相等的值替换 [*count*]{.emphasis}。
3.  使用以下命令设定 swap 文件：
    ``` literallayout
    # mkswap /swapfile
    ```
4.  更改交换文件的安全性，使其不完全可读。
    ``` literallayout
    # chmod 0600 /swapfile
    ```
5.  要在引导时启用交换文件，以 root 用户身份编辑 `/etc/fstab`{.literal}
    使其包含以下条目：