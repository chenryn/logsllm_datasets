(integer) 3
然后根据这些结果，获取并返回键 jack-name、Petex-name 和 tom-name 的值
SORT 命令首先对 students 集合进行排序，得到排序结果
"Peter White"
"Jack Snow"
21
"Tom Smith"
"jack'
---
## Page 361
取被排序元素（一个学生）所对应的全名和出生日期：
的查找操作也会增多。
举个例子，以下 SORT命令对 students 集合进行了排序，并通过两个 GET 选项来获
redis> SORT students ALPHA GET *-name GET *-birth
#排序 students 集合，并获取相应的全名和出生日期
OK
redis>
redis>
redis> SET peter-birth 1995-6-7
#为学生设置出生日期
因为一个 SORT命令可以带有多个GET 选项，所以随着GET 选项的增多，命令要执行
最后返回的是tom-name 键的值“Tom Smith"。
口
口首先返回的是 jack-name 键的值"Jack Snow"。
5）遍历查找程序返回的三个键，并向客户端返回它们的值：
"Jack Snow"
redisSortobject
"1995-5-24"*
redisSortobject
redisSortobject
redisSortobject
"1995-6-7"
"Peter White"
array[2]
array[1]
array[0]
array[2]
 SET jack-birth 1995-5-24
 SET tom-birth 1995-8-16
array
array
u
fqo
Stringobject
--
图 21-18排序之后的数组
图 21-17排序之前的数组
Stringobject
'peter'
"peter'
students集合
students集合
jack"
Stringobject
Stringobject
第21章排
序·357
---
## Page 362
358·第四部分独立功能的实现
时重用这个排序结果：
21.8
步开始有所区别：
骤，和执行 SORT students ALPHA GET*-name 命令时的前三个步骤相同，但从第四
但是，通过使用 STORE 选项，我们可以将排序结果保存在指定的键里面，并在有需要
1) "jack"
redis> LRANGE sorted_students 0-1
redis> SORT students ALPHA
(integer)
redis> SADD students "peter"
在默认情况下，SORT命令只向客户端返回排序结果，而不保存排序结果：
服务器执行 SORT students ALPHA GET *-name GET*-birth 命令的前三个步
"tom"
"peter"
"jack
STORE选项的实现
步骤类似。
给定的*-name 模式和*-birth 模式，查找相应的键：
4）遍历数组，
SORT命令在执行其他带有 GET选项的排序操作时，执行的步骤也和这里给出的
最后返回tom-birth键的值"1995-8-16"。
 然后返回tom-name 键的值"Tom Smith"。
口 再之后返回 peter-birth 键的值"1995-6-7"。
口对于"jack"元素和*-birth 模式，查找程序返回 jack-birth 键。
L
D
对于"jack"元素和*-name 模式，查找程序返回 jack-name 键。
3
之后返回 peter-name 键的值“Peter White"
1其次返回jack-birth键的值"1995-5-24"。
对于“tom"元素和*-name 模式，查找程序返回tom-name 键。
1对于"peter"元素和*-birth模式，查找程序返回peter-birth 键。
首先返回 jack-name 键的值"Jack Snow"。
遍历查找程序返回的六个键，并向客户端返回它们的值：
对于"tom"元素和*-birth模式，查找程序返回tom-birth 键。
，根据数组项 obj 指针所指向的集合元素，以及两个 GET 选项所
"jack" "tom"
---
## Page 363
21.9.1选项的执行顺序
使用中，情况并不总是那么简单的，一个 SORT命令请求通常会用到多个选项，而这些选项
项的实现原理时，文章通常只在代码示例中使用被介绍的那个选项，但在SORT命令的实际
21.9
骤类似。
"tom"。
students 列表的末尾，相当于执行命令 RPUSH sorted_students "jack"、"peter"、
的执行顺序是有先后之分的。
21-19所示：
如下：
前面的章节介绍了 SORT命令以及相关选项的实现原理，为了简单起见，在介绍单个选
如果按照选项来划分的话，
SORT命令在执行其他带有 STORE选项的排序操作时，执行的步骤也和这里给出的步
7）遍历数组，向客户端返回“jack"、“peter"、"tom"三个元素。
6）遍历数组，将排序后的三个元素"jack"、"peter"和"tom"依次推人 sorted
5）设置 sorted_students 为空白的列表键。
4）检查 sorted_students 键是否存在，如果存在的话，那么删除该键。
口被排序到数组索引1位置的是"peter”元素。
口被排序到数组索引0位置的是"jack"元素。
3）根据obj 指针所指向的集合元素，对数组进行字符申排序，排序后的数组如图
2）遍历数组，将各个数组项的 obj指针分别指向 students 集合的各个元素。
1）创建一个 redisSortObject 结构数组，数组的长度等于 students 集合的大小。
服务器执行 SORT students ALPHA STORE sorted_students 命令的详细步骤
口
2）
redisSortobject
redisSortobject
被排序到数组索引2位置的是＂tom"元素。
多个选项的执行顺序
"tom"
"peter"
array[2]
array[l]
array
u
fao
fqo
，一个SORT命令的执行过程可以分为以下四步：
图 21-19排序之后的数组
Stringobject
"peter"
Stringobject
"iack"
stringobject
"tom'
第21章
排
序
+359
---
## Page 364
360·第四部分独立功能的实现
并不会影响 SORT命令执行这些选项的顺序。
21.9.2选项的摆放顺序
返回排序结果集中的元素。
键上面去。
GET选项指定的模式，查找并获取指定键的值，并用这些值来作为新的排序结果集。
进行限制，只有LIMIT 选项指定的那部分元素会被保留在排序结果集中。
进行排序，并得到一个排序结果集。
另外要提醒的一点是，调用 SORT命令时，除了 GET 选项之外，改变选项的摆放顺序
5）向客户端返回排序结果集：在最后这一步，命令遍历排序结果集，并依次向客户端
2）限制排序结果集的长度：在这一步，命令会使用LIMIT选项，对排序结果集的长度
4）保存排序结果集：在这一步，命令会使用 STORE选项，将排序结果集保存到指定的
3）获取外部键：在这一步，命令会使用GET选项，根据排序结果集中的元素，以及
1）排序：在这一步，命令会使用 ALPHA、ASC或 DESC、BY这几个选项，对输人键
都产生完全相同的排序数据集。
SORT  STORE  DESC BY  GET  ALPHA LIMIT
以及命令：
SORT  LIMIT   BY  ALPHA GET  STORE
和命令：
SORT  ALPHA DESC BY  LIMIT   GET 
例如，命令：
最后，命令遍历排序结果集，将结果集中的元素依次返回给客户端。
STORE 
之后执行：
GET 
然后执行：
LIMIT  
接着执行：
SORT  ALPHA DESC BY 
那么命令首先会执行：
SORT  ALPHA DEsC BY  LIMIT 
举个例子，如果客户端向服务器发送以下命令：
在以上这些步骤中，后一个步骤必须在前一个步骤完成之后进行。
 DEsC
STORE
 GET 
---
## Page 365
21.10重点回顾
GET选项的摆放顺序不变，这才可以让排序结果集保持不变。
口 除了GET 选项之外，调整选项的摆放位置不会影响 SORT命令的排序结果。
口 SORT命令会根据用户是否使用了DESC选项来决定是使用升序对比还是降序对比来
口 SORT命令的排序操作由快速排序算法实现。
口在默认情况下，SORT命令假设被排序键包含的都是数字值，并且以数字值的方式来
口
口
口 SORT命令通过将被排序键包含的元素载人到数组里面，然后对数组进行排序来完成
因此在调整 SORT命令各个选项的摆放顺序时，必须小心处理GET 选项。
那么这个命令产生的排序结果集就会和前面两个命令产生的排序结果集不同。
SORT  STORE  GET  GET 
产生的排序结果集是完全一样的，但如果将两个 GET选项的顺序调整一下：
SORT  STORE  GET  GET 
和命令：
SORT  GET  GET  STORE 
例如，命令：
不过，如果命令包含了多个GET选项，那么在调整选项的位置时，我们必须保证多个
口
口
口
对键进行排序的工作。
STORE 选项，最后才将排序结果集返回给客户端。
ASC或 DESC、BY），然后执行LIMIT选项，之后执行 GET 选项，再之后执行
当SORT命令同时使用多个选项时，命令先执行排序操作（可用的选项为ALPHA、
当SORT命令使用了STORE选项时，命令会将排序结果集保存在指定的键里面。
给定的模式，查找并返回其他键的值，而不是返回被排序的元素。
当 SORT命令使用了GET 选项时，命令会根据排序结果集中的元素，以及GET选项
元素。
当SORT命令使用了LIMIT选项时，命令只保留排序结果集中LIMIT选项指定的
当 SORT命令使用了BY 选项时，命令使用其他键的值作为权重来进行排序操作。
到大排列，降序对比会产生降序排序结果，被排序的元素按值的大小从大到小排列。
比较被排序的元素，升序对比会产生升序排序结果，被排序的元素按值的大小从小
串值，并且以字符串的方式来进行排序。
如果SORT命令使用了ALPHA选项，那么 SORT命令假设被排序键包含的都是字符
进行排序。
第21章排
序·361
---
## Page 366
0 开始计数，而二进制位的值则可以是0或者1：
(bit array，又称“位数组”)。
其中，SETBIT命令用于为位数组指定偏移量上的二进制位设置值，位数组的偏移量从
而GETBIT命令则用于获取位数组指定偏移量上的二进制位的值：
redis> SETBIT bit 0 1
Redis 提供了 SETBIT、GETBIT、BITCOUNT、BITOP四个命令用于处理二进制位数组
redis> SETBIT bit 1 1 # 0000 1011
(integer) 2
redis> BITCOUNT bit 
redis> SETBIT bit 0 1 # 0000 1001
redis> BITCOUNT bit # 0000 1000
BITCOUNT命令用于统计位数组里面，值为1的二进制位的数量：
(integer)
redis> GETBIT bit 30000 1000
(integer)
redis> GETBIT bit 0 # 0000 1000
(integer)1
redis> SETBIT bit 0 0
redis> SETBIT bit 3 1
二进制位数组
第22章
#0000 1000
#0000 1001
1OOO0000＃
---
## Page 367
22.1
BITOP 四个命令的实现原理。
（xor）运算：
本章将对 Redis 表示位数组的方法进行说明，并介绍 GETBIT、SETBIT、BITCOUNT、
redis> BITOP NOT not-value value # lll1 0110
redis> SETBIT value 3 1
也可以对给定的位数组进行取反（not）运算：
(integer)
(integer)
redis> BIrOP xOR xor-result x Y z
redis> BITOP OR or-result x y z
redis> BITOP AND and-result x y z
redis> SETBIT z 0 1
redis> SETBIT z 2 1
redis> SETBIT y 1 1
(integer) 0
redis> SETBIT x 01
redis> SETBIT x 1 1
(integer)0
redis> SETBIT x 3 1
最后，BITOP命令既可以对多个位数组进行按位与（and）、按位或（or）、按位异或
(integer) 1
(integer) 0
(integer) 3
redis> BITCOUNT bit
位数组的表示
0
# z = 0000 0101
y= 0000 0110
# x= 00001011
#0000 1001
#0000 1000
#0000 1111
#00000000
第22章二进制位数组·363
---
## Page 368
364·第四部分独立功能的实现
0，这表示 buf[0］字节保存的位数组为01001101。使用逆序来保存位数组可以简化
反的，例如，在图22-2 的buf［0］字节中，各个位的值分别是1、0、1、1、0、0、1、
buf 数组的哪个字节，而buf［i］之后的八个格子则分别代表这一字节中的八个位。
本章会将前面图 22-1展示的SDS值改成图 22-2所示的样子。
buf 数组的展示方式进行一些修改，让各个字节的各个位都可以清楚地展现出来。比如说，
位数组。
全的，所以程序可以直接使用 SDS 结构来保存位数组，并使用 SDS 结构的操作函数来处理
需要注意的是，buf 数组保存位数组的顺序和我们平时书写位数组的顺序是完全相
现在，buf 数组的每个字节都用一行来表示，每行的第一个格子buf[i］表示这是