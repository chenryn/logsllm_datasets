### A Different Concept

- **Lightweight, Simple, and Easy**: Not a full-fledged Web Application Firewall (WAF).
- **Focus on Specific Attacks**: Targeting specific protocol attacks such as HTTP Request Smuggling.
- **Secure**: Ensures the security of the system.
- **Proof of Concept (PoC)**: The PoC does not need to be production-quality; it simply demonstrates the feasibility of the approach (e.g., for vendors).

### A More Robust Approach

**Strict Validation of a Small Subset of HTTP Standards:**

- **Request Length Affecting Headers**:
  - `Content-Length`
  - `Transfer-Encoding`
- **Unambiguous Line Ends and Header End**
- **Request Line**
- **Unambiguous Verb Name**: Verbs like `GET`, `OPTIONS`, `HEAD`, and `DELETE` should not expect a body.
- **Unambiguous Protocol Designation**: Only `HTTP/1.0` or `HTTP/1.1`.
- **Additional Headers**: Consider adding validation for other headers like `Connection` and `Host`.

### Design Goals

- **Generic**: Not tied to a specific technology, product, or platform.
- **Platform-Independent**: No dependency on platform-specific technologies (e.g., Windows LSP/WFP).
- **Extensibility**: Nice to have extensibility beyond HTTP.
- **Support for HTTPS (TLS) and Other Protocols**: Future considerations.
- **Security**: Ensure the solution is secure.
- **In-Path Monitoring**: Instead of sniffing-based monitoring.

### Solution: Function Hooking

- **Supported by Major Operating Systems**: Windows, Linux.
- **Cross-Platform Libraries**: Examples include FuncHook (https://github.com/kubo/funchook).
- **Stability and Robustness**: May be an issue, but this is a tech demo.
- **Code Injection**:
  - **Windows**: Standard DLL injection.
  - **Linux**: Using `LD_PRELOAD`.

### Socket Abstraction Layer (SAL)

- **Abstracts Native Sockets**: Provides a standard open-read-close view.
- **Cradle-to-Death Monitoring**: Monitors native sockets throughout their lifecycle.
- **No Buffering**: Direct handling of data.
- **Mapping**: Maintains a map from `sockfd` to user object.
- **Signaling**:
  - **CTOR**: Socket open.
  - **onRead**: Socket read.
  - **DTOR**: Socket close.
  - **sockfd**: Allows the user object to send data on the socket.
  - **Return Value**: Forcibly closes the socket.

### SAL – What to Hook?

#### Windows
| Server   | Bitness | WSAAccept | AcceptEx | WSARecv | closesocket | GetQueuedCompletionStatus/Ex | GetOverlappedResult |
|----------|---------|-----------|----------|---------|-------------|------------------------------|---------------------|
| Apache   | 64      | Yes       | Yes      | Yes     | Yes         | Yes                          | Yes                 |
| nginx    | 64      | Yes       | Yes      | Yes     | Yes         | Yes                          | Yes                 |
| node.js  | 64      | Yes       | Yes      | Yes     | Yes         | Yes                          | Yes                 |
| Abyss    | 64      | Yes       | Yes      | Yes     | Yes         | Yes                          | Yes                 |
| Tomcat   | 32      | Yes       | Yes      | Yes     | Yes         | Yes                          | Yes                 |
| lighttpd | 32      | Yes       | Yes      | Yes     | Yes         | Yes                          | Yes                 |

#### Linux (64-bit)
| Server   | accept | accept4 | uv__accept4 (libuv) | recv | read | shutdown | close |
|----------|--------|---------|---------------------|------|------|----------|-------|
| Apache   | Yes    | Yes     | Yes                 | Yes  | Yes  | Yes      | Yes   |
| nginx    | Yes    | Yes     | Yes                 | Yes  | Yes  | Yes      | Yes   |
| node.js  | Yes    | Yes     | Yes                 | Yes  | Yes  | Yes      | Yes   |
| Abyss    | Yes    | Yes     | Yes                 | Yes  | Yes  | Yes      | Yes   |
| Tomcat   | Yes    | Yes     | Yes                 | Yes  | Yes  | Yes      | Yes   |
| lighttpd | Yes    | Yes     | Yes                 | Yes  | Yes  | Yes      | Yes   |
| Squid    | Yes    | Yes     | Yes                 | Yes  | Yes  | Yes      | Yes   |
| HAproxy  | Yes    | Yes     | Yes                 | Yes  | Yes  | Yes      | Yes   |

### Challenges and Lessons Learned

- **Worker Processes/Forking**: Handling worker processes and forking.
- **Locking**: Managing the socket management table.
- **Error State Preservation**: Preserving the correct error state (errno, LastError, WSALastError).
- **stdout/stderr Availability**: Not always available.
- **Squid (Linux)**: Issues with `fclose()`.
- **Statically Linked Executables**: Dealing with stripped symbols (compiled Go).
- **Linux recv() Implementation**: Invokes `recvfrom` syscall.
- **accept()/accept4()**: Invoked with `addr=NULL`.
- **uvlib (Node.js)**: Need to hook `uv__accept4()`.

### Request Smuggling Firewall (RSFW)

- **Enforce Strict RFC 2616**: On relevant parts of HTTP requests.
- **Request Line Format**
- **Header Name Format**
- **Content-Length and Transfer-Encoding**: Including value format.
- **Header End-of-Line**
- **Chunked Body Format**
- **Default Deny Policy**
- **Single Line Internal Accumulation**: Data is forwarded to the application in real-time.
- **Violation Handling**:
  - Can send a 400 response.
  - Connection termination.

### Demo

- **Library**: https://github.com/SafeBreach-Labs/RSFW

### New Research Challenges

- **Promising/Suspicious Anomalies in HTTP Devices**:
  - **Example (2005…)**: A web server that takes the first header in a double `Content-Length` (CL).
  - **Matching Behavior**: A proxy that takes the last CL header (but keeps both headers).
  - **Lab Observations**: Proxy servers either take the first header or reject the request.

- **CR in a Header Name**:
  - **Example**: `Content\rLength` treated by one web server as `Content-Length`.
  - **Reason**: Suspected quick-and-dirty "uppercasing" using OR with 0x20: (`'\r' | 0x20' == '-'`).
  - **Sought Matching Proxy Behavior**: Ignore (forward as-is).
  - **Attack**: Web server expects a body, but a GET request will forward the request without a body, leading to discarded body data.
  - **Observations**: All proxy servers either reject (400) or modify.

- **Signed Content-Length**:
  - **Example**: `Content-Length: +1234`.
  - **Non-RFC**: Some proxy implementations use API like `atoi()` which accepts a sign.
  - **Sought Web Server Behavior**: Ignore.
  - **Attack**: Web server effectively has `CL=0`.
  - **Vendor Status**: Fixed by Squid (CVE-2020-15049), Abyss, and Go.
  - **Observations**: All web servers either reject (400) or honor.

- **Content-Length Value with SP**:
  - **Example**: `Content-Length: 12 34`.
  - **Non-RFC**: Nginx (as a web server) ignores the header.
  - **Sought Proxy Behavior**: Use the value (as 1234/12/34) and forward the header as-is.
  - **Attack**: Nginx sees de-facto `CL=0`.
  - **Reported to Nginx**: WONTFIX ("this doesn't look like a vulnerability in nginx, as the request in question cannot be passed through a compliant HTTP proxy with the header interpreted as a Content-Length header").
  - **Observations**: All proxy servers either reject (400) or remove the header.

- **Chunky Monkey Business**:
  - **Example**: One web server ignores `Transfer-Encoding` (i.e., doesn't support chunking).
  - **Non-RFC**: Sought behavior: a proxy server that prefers `TE` over `CL` (but does not modify).
  - **Attack**: `TE+CL`.
  - **Observations**: All proxy servers normalize the request (either per `CL` or per `TE`).

### Conclusions

- **Take-Aways**:
  - **HTTP Request Smuggling**: Still a relevant issue in 2020, even in Commercial Off-The-Shelf (COTS) software.
  - **Existing Open Source Solutions**: Lacking.
  - **Robust Approach**: Feasible for defending against HTTP Request Smuggling.
  - **Interesting Challenges**: Remain in this area.

Thank you!