vices). For a code with n symbols, S = {80, ... , 8n -1} and
D = {do, . .. , dn - 1 }. A placement, p, is a bijective func(cid:173)
tion that uniquely maps-each symbol in the erasure code to
a single device, i.e., p : S ~ D. The goal of the redun(cid:173)
dancy placement algorithms is to find a placement, p, that
maximizes reliability.
4.1. Relative MTTDL estimate (RME)
We now introduce the simple analytic model that under(cid:173)
lies both redundancy placement algorithms:
the Relative
MTTDL Estimate (RME). The RME can be used to compare
1-4244-2398-9/08/$20.00 ©2008 IEEE
149
DSN 2008: Greenan et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:15:09 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems &Networks: Anchorage, Alaska, June 24-27 2008
the reliability of different placements. It is constructed to
correlate with the expected mean time to data loss (MTTDL),
but it does not accurately estimate the MTTDL. The RME
can be used to compare the relative merit of different place(cid:173)
ments, but not to determine if some placement meets a spe(cid:173)
cific reliability requirement. The efficacy ofthe RME to cor(cid:173)
rectly order placements by MTTDL is demonstrated in §5.
At a high level, the RME is the inverse of an estimate of
the expected unavailability of a given placement. It is based
on the MEL and a simple analytic device model. The MEL
is a concise, exact description of a code's irregular fault tol(cid:173)
erance. The MEL contains each minimal set of data and
parity symbol failures that lead to data loss. Let u(d) be the
expected unavailability of device d. To calculate u(d), the
mean time to repair (MTTR) of d is simply divided by its
mean time to failure (MTTF). This analytic model ignores
sector failures and scrubbing, as well as the exact distri(cid:173)
bution of the device failures and repairs. Moreover, it is
premised on failures being independent. The RME is cal(cid:173)
culated via the following function of the redundancy place(cid:173)
ment p, device unavailability u, and MEL:
RME = (L IT U(P(S))) -1 .
jEMEL sEj
The sum of products is inverted because RME values are
values that should be maximized to improve reliability, just
like MTTDL values.
The RME for the (4,4)-RAID 10 code described in §3 is as
follows:
RME = (u(p(so))U(p(S4)) + U(P(Sl))U(P(S5)) +
U(P(S2))U(P(S6)) + U(P(S3))U(p(S7 )))-1.
Consider a configuration in which the first 4 devices have
expected device unavailability of 1.2 x 10-4 and the second
4 devices have expected device unavailability of2.4 x 10-5.
Note that the more reliable a device is, the lower its device
unavailability number, so the first 4 devices are less reliable
than the second 4 devices in this configuration. Now con(cid:173)
sider two distinct placements.
In the first placement, the
first 4 symbols are placed on the first 4 devices, and the sec(cid:173)
ond 4 symbols are placed on the second 4 devices, and so
the RME = 86.8 x 106 . In the second placement, the "odd
symbols" (i.e., Sl,S3,S5, and S7) are placed on the first 4
devices, and the "even symbols" on the second 4 devices,
and so the RME = 33.4 X 106 . The first placement splits
the pair of replicated symbols that occur in each minimal
erasure, mapping one to a less reliable device and the other
to a more reliable device. In contrast, the second placement
places all of the symbols from two minimal erasures (the
"odd symbols") on the less reliable devices, which, intu(cid:173)
itively, is a less reliable placement. These RME values fol-
low our intuition about the relative reliability ofplacements;
this intuition is confirmed via simulation in §5.1.
There are several reasons for using the simpIe analytic
model. First, the simplicity of the analytic device model
permits efficient evaluation of the RME and so permits or(cid:173)
ders of magnitude more distinct placements to be evaluated
than simulation methods in the same period of time. Sec(cid:173)
ond, the model only has to produce an RME that accurately
orders different sets of device failures according to the like(cid:173)
lihood that they contribute to data loss. The product of ex(cid:173)
pected device unavailability accomplishes this task. Third,
in a system with any redundancy, sector failures alone do
not cause data loss; only multiple disk failures, or disk fail(cid:173)
ures in conjunction with sector failures lead to data loss.
Thus, the simple analytic model only needs to capture the
reliability effects of disk failures. Fourth, we considered
extending the approach of Hafner and Rao, who recently
proposed a Markov model construction for xOR-based era(cid:173)
sure codes based on homogeneous devices [13]. Extending
their model to heterogeneous devices is not feasible because
each device requires a distinct Markov model state per era(cid:173)
sure pattern.
4.2. Brute force algorithm
The brute force redundancy placement (BF-RP) algo(cid:173)
rithm evaluates the RME for all possible placement and iden(cid:173)
tifies the placement with the largest RME as the best place(cid:173)
ment. The RME is a simple equation that can be evaluated
efficiently. Calculating an RME value requires IMELI addi(cid:173)
tions and less than m x IMELI multiplications. Consider the
calculation of the RME for (4,4)-RAID 10 given above. It re(cid:173)
quired four additions because IMELI = 4, and four multipli(cid:173)
cations because each of the four minimal erasures consists
of exactly two symbols. Since all minimal erasures con(cid:173)
sist of m or fewer symbols, each product requires m - 1 or
fewer multiplications.
For a code with n symbols and n distinct devices, there
are n! possible placements to evaluate. Given the efficiency
ofthe RME calculation, it is feasible to evaluate the RME for
every possible placement for small codes. For example, in
§5 the BF-RP algorithm is used to find the best placement for
some codes with n = 12. Each such execution ofthe BF-RP
performs 12! = 479001600 RME calculations to determine
the best placement.
4.3. Simulated annealing algorithm
For large codes, the factorial number of distinct place(cid:173)
ments make it is infeasible to apply the BF-RP algorithm.
The best placement for a code maximizes the RME value.
Therefore, the problem of finding the best placement can be
understood as an optimization problem. Unfortunately, the
nonlinear structure of the RME equation-all of the terms
1-4244-2398-9/08/$20.00 ©2008 IEEE
150
DSN 2008: Greenan et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:15:09 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems &Networks: Anchorage, Alaska, June 24-27 2008
in the summation are products of variables to be assigned
via the optimization-precludes linear optimization tech(cid:173)
niques.
Fortunately,
there are many non-linear optimization
techniques. An approach that requires little work, in terms
of formulating constraint equations, is simulated anneal(cid:173)
ing [14]. This made simulated annealing, a stochastic opti(cid:173)
mization technique, appealing as the first optimization ap(cid:173)
proach for us to evaluate. Simulated annealing uses ran(cid:173)
domization to find a solution; however, there is a chance
that the solution found is not globally optimal.
The simulated annealing redundancy placement (SA-RP)
algorithm takes an MEL and a configuration of devices as
input. The SA-RP algorithm is initialized with a randomly
selected placement. Each step in SA-RP is based on a ran(cid:173)
dom number of random swaps of mappings in the current
placement. As the algorithm proceeds, the number of ran(cid:173)
dom swaps performed at each step decreases. This is the
manner in which we capture the "cooling" aspect of simu(cid:173)
lated annealing, in which randomness is reduced over time
so that some locally optimal placement is settled upon. In
SA-RP, we include parameters to backtrack if a step that de(cid:173)
creased the RME does not lead to a larger RME after some
number ofadditional steps. The SA-RP algorithm is invoked
multiple times, while keeping track of the best RME value
found over different invocations. Because each invocation
is initialized with a different random placement, repeated
invocations find distinct locally maximal placements (RME
values).
Unfortunately, simulated annealing does not lend itself
to many practical rigorous statements about the quality of
solution found. However, our empirical results indicate that
the SA-RP algorithm quickly produces good solutions.
5. Evaluation
To evaluate the BF-RP and SA-RP algorithms, we con(cid:173)
sider configurations that have devices with failure models
between two bounds. The first device failure model is based
on that used by Elerath and Pecht (cf. Table 2 in [6]). Disk
failures are distributed according to a Weibull distribution
with parameters, = 0, 'T] = 500000, and {3 = 1.12. (Note
that we "rounded up" the 'T] parameter of461386 hours used
by Elerath and Pecht.) Disk recoveries are distributed ac(cid:173)
cording to a Weibull distribution with, = 6, r} = 12, and
{3 = 2. We refer to the first device as the 500k device be(cid:173)
cause its expected MTTF is 500 thousand hours. The 500k
device is the most reliable device we consider in the eval(cid:173)
uation. We refer to the least reliable device as the lOOk
device. The lOOk device differs from the 500k device only
in its MTTF: 'TJ = 100000 instead of'T] = 500000. To calcu(cid:173)
late the RME, only the MTTF for disk failure and the MTTR
for a recovery is used. The HFR Simulator uses the speci-
fied Weibull distributions to simulate the MTTDL. All sim(cid:173)
ulations are based on devices that exhibit only disk failures
and recoveries; sector failures are not included in this eval(cid:173)
uation.
There are two types of heterogeneous configurations we
evaluate. Bimodal configurations consist of only two types
of devices:
lOOk devices and 500k devices. For example,
an 8-disk 3-bimodal configuration consists of 3 lOOk de(cid:173)
vices and 5 500k devices. Un((orm con.figurations consist
of one lOOk device and one 500k device; the remaining
devices have MTTF values uniformly distributed between
'T] = 100000 and 'TJ = 500000. For example, an 8-disk
uniform configuration consists of one device with each of
the following 'T] values: 100000, 157000, 214000, 271000,
328000,385000,442000,500000. We evaluate 8-, 12-, and
20-disk configurations.
Table 1 lists the flat codes analyzed by the redundancy
placement algorithms. The MEV and FTV for each code is
listed. All of the codes have a Hamming distance of2. The
MEL is used to calculate the RME and so is more useful than
the MEV for understanding the results in this section. The
MEL for the (4,4)-RAID 10 and (5,3)-FLAT are given in §3.
The MEL of the (6,2)-FLAT is {(80, 81), (82,83), (82,86),
(83,86), (84,85), (84,87), (85,87)}. The MEL for the larger
codes is too verbose to list. The FTV is used for compari(cid:173)
son purposes because the reliability simulated based on the
FTV approximates the median reliability over all possible
placements.
The specific flat codes listed in Table I were selected
because, for the given values of k and m,
they are the
most fault tolerant flat codes [23]. One is the (4,4)-RAID 10
which was selected because it has a familiar structure. The
specific values of k and m were selected so that all of
It takes many
the codes have a Hamming distance of 2.
CPU days for the HFR Simulator to simulate a single data
loss event for more fault-tolerant codes so we restricted the
Hamming distance to ensure that the results of the redun(cid:173)
dancy placement algorithms could be validated via simula(cid:173)
tion.
Beyond the flat codes, we also included MDS codes with
Hamming distance two to provide context. The placement
ofsuch codes does not affect their reliability because all sets
of device failures of Hamming distance size or greater lead
to data loss.
All MTTDL values in this section are measured in hours.
The HFR Simulator is used to produce all of the MTTDL
values [8]. Except where noted, MTTDL values in tables
and annotated on histograms are based on simulations of
1000 data loss events. Each histogram consists of fifty
bins equally sized from the shortest MTTDL to the longest
MTTDL. The MTTDL values for data points in histograms
are based on 100 data loss events and so exhibit greater vari(cid:173)
ance.
1-4244-2398-9/08/$20.00 ©2008 IEEE
151
DSN 2008: Greenan et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:15:09 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems &Networks: Anchorage, Alaska, June 24-27 2008
code
(6,2)-FLAT
(5,3)-FLAT
(4,4)-RAID 10
(10,2)-FLAT
(9,3)-FLAT
(17,3)-FLAT
(16,4)-FLAT
Minimal Erasures Vector (MEV)
(0,7)
(0, 1, 10)
(0,4,0,0)
(0, 18)
(0,5,34)
(0,19,162)
(0,5,80,315)
Fault Tolerance Vector (FTV)
(0,0.25, 1)
(0,0.036,0.29,1)
(0,0.14, 0.43,0.77, 1)
(0,0.27, 1)
(0,0.076,0.38,1)
(0,0.10, 0.43,1)
(0,0.026,0.15,0.48,1)
parity bitmaps
(15,51)
(7,11,29)
(1,2,4,8)
(127,911)
(31, 227, 365)
(1023,31775,105699)
(511,7711,26215,43691)
Table 1. Flat erasure codes.
code
(6,2)-FLAT
(5,3)-FLAT
(4,4)-RAID 10
(7,1)-MDS
(10,2)-FLAT
(9,3)-FLAT
(ll,l)-MDS
(17,3)-FLAT
(16,4)-FLAT
(19,1)-MDS
lOOk
3.99 X 107
2.88 X 108
6.59 X 107
1.01 X 107
1.54 X 107
5.28 X 107
4.06 X 106
1.44 X 107
5.42 X 107
1.55 X 106
500k
9.66 X 108
6.89 X 109
1.83 X 109
2.55 X 108
3.89 X 108
1.40 X 109
1.03 X 108
3.55 X 108
1.32 X 109
3.60 X 107
Table 2. MTTDL of homog. config. in hours.
~...... 1
........ 2
2500
2000