˜𝑉 : Fℓ → F such that ˜𝑉 (𝑥1, 𝑥2, ..., 𝑥ℓ) = 𝑉 (𝑥1, 𝑥2, ..., 𝑥ℓ) for all
𝑥1, 𝑥2, . . . , 𝑥ℓ ∈ {0, 1}. ˜𝑉 can be expressed as:
˜𝑉 (𝑥1, 𝑥2, ..., 𝑥ℓ) =
ℓ
𝑖=1((1 − 𝑥𝑖)(1 − 𝑏𝑖) + 𝑥𝑖𝑏𝑖)) · 𝑉 (𝑏) ,
˜𝛽(𝑥, 𝑏) · 𝑉 (𝑏)
𝑏∈{0,1}ℓ
where 𝑏𝑖 is 𝑖-th bit of b.
Multilinear extensions of arrays and matrices. Inspired by the
closed-form equation of the multilinear extension given above,
we can view an array a = (𝑎0, 𝑎1, . . . , 𝑎𝑁−1) as a function 𝑎 :
{0, 1}log 𝑁 → F such that ∀𝑖 ∈ [0, 𝑁 − 1], 𝑎(𝑖1, . . . , 𝑖log 𝑁) = 𝑎𝑖.
Here we assume 𝑁 is a power of 2. Therefore, in this paper, we
abuse the use of multilinear extension on an array as the multilin-
ear extension ˜𝑎 of 𝑎. Similarly, we use the multilinear extension


=
𝑏∈{0,1}ℓ
Session 11B: Zero Knowledge II CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2971on an 𝑁 × 𝑀 matrix 𝐴 as the multilinear extension of the function
𝐴 : {0, 1}log 𝑁+log 𝑀 → F defined by the matrix.
2.2.2 GKR Protocol. Using the sumcheck protocol as a building
block, Goldwasser et al. [26] showed an interactive proof protocol
for layered arithmetic circuits. Let 𝐶 be a layered arithmetic circuit
with depth 𝑑 over a finite field F. Each gate in the 𝑖-th layer takes
inputs from two gates in the (𝑖 + 1)-th layer; layer 0 is the output
layer and layer 𝑑 is the input layer. Following the convention in
prior work [20, 41, 48, 52, 53], we denote the number of gates in the
𝑖-th layer as 𝑆𝑖 and let 𝑠𝑖 = ⌈log 𝑆𝑖⌉. (For simplicity, we assume 𝑆𝑖 is a
power of 2, and we can pad the layer with dummy gates otherwise.)
: {0, 1}𝑠𝑖 → F that takes a binary
We then define a function 𝑉𝑖
string 𝑏 ∈ {0, 1}𝑠𝑖 and returns the output of gate 𝑏 in layer 𝑖, where
𝑏 is called the gate label. With this definition, 𝑉0 corresponds to the
output of the circuit, and 𝑉𝑑 corresponds to the input layer. Finally,
: {0, 1}𝑠𝑖−1+2𝑠𝑖 →
we define two additional functions 𝑎𝑑𝑑𝑖, 𝑚𝑢𝑙𝑡𝑖
{0, 1}, referred to as wiring predicates in the literature. 𝑎𝑑𝑑𝑖 (𝑚𝑢𝑙𝑡𝑖)
takes one gate label 𝑧 ∈ {0, 1}𝑠𝑖−1 in layer 𝑖 − 1 and two gate labels
𝑥, 𝑦 ∈ {0, 1}𝑠𝑖 in layer 𝑖, and outputs 1 if and only if gate 𝑧 is an
addition (multiplication) gate that takes the output of gate 𝑥, 𝑦 as
input. Taking the multilinear extensions of 𝑉𝑖, 𝑎𝑑𝑑𝑖 and 𝑚𝑢𝑙𝑡𝑖, for
any 𝑔 ∈ F𝑠𝑖 ,
˜𝑉𝑖(𝑔) =


𝑥,𝑦∈{0,1}𝑠𝑖+1
𝑥,𝑦∈{0,1}𝑠𝑖+1 ( ˜𝑎𝑑𝑑𝑖+1(𝑔, 𝑥, 𝑦)( ˜𝑉𝑖+1(𝑥) + ˜𝑉𝑖+1(𝑦))
𝑓𝑖(𝑔, 𝑥, 𝑦)
=
+ ˜𝑚𝑢𝑙𝑡𝑖+1(𝑔, 𝑥, 𝑦) ˜𝑉𝑖+1(𝑥) ˜𝑉𝑖+1(𝑦)) ,
(3)
With Equation 3, the GKR protocol proceeds as follows. The prover
P first sends the claimed output of the circuit to V. From the
claimed output, V defines polynomial ˜𝑉0 and computes ˜𝑉0(𝑔) for
a random 𝑔 ∈ F𝑠0. V and P then invoke a sumcheck protocol on
Equation 3 with 𝑖 = 0. As described in Section 2.2.1, at the end of
the sumcheck, V needs an oracle access to 𝑓𝑖(𝑔, 𝑢, 𝑣), where 𝑢, 𝑣
are randomly selected in F𝑠𝑖+1. To compute 𝑓𝑖(𝑔, 𝑢, 𝑣), V computes
˜𝑎𝑑𝑑𝑖+1(𝑔, 𝑢, 𝑣) and
˜𝑚𝑢𝑙𝑡𝑖+1(𝑔, 𝑢, 𝑣) locally (they only depend on the
wiring pattern of the circuit, not on the values), asks P to send
˜𝑉1(𝑢) and ˜𝑉1(𝑣) and computes 𝑓𝑖(𝑔, 𝑢, 𝑣) to complete the sumcheck
protocol. In this way, V and P reduce a claim about the output to
two claims about values in layer 1. V and P then combines the
two claims into one through a random linear combination, and
run a sumcheck protocol on Equation 3 for layer 𝑖 + 1, and then
recursively all the way to the input layer. The formal GKR protocol
and its properties are presented in Protocol 2 in Appendix A.
2.3 Zero Knowledge Arguments
A zero knowledge argument scheme is a protocol between a PPT
prover P and a verifier V, where at the end of the protocol, V is
convinced by P that the result of a computation 𝐶 on a public input
𝑥 and prover’s secret witness 𝑤 is 𝑦 = 𝐶(𝑥, 𝑤). A zero knowledge
argument has (1) correctness: V always accepts if the result and the
proof are honestly computed by P; (2) soundness: V rejects with all
but negligible probability if the result is not correctly computed; (3)
zero knowledge: the proof leaks no information about the witness
𝑤 beyond the fact the 𝐶(𝑥, 𝑤) = 𝑦. We give the formal definitions
of zero knowledge arguments in Definition B.1 of Appendix B.
𝑁).
Following the framework in [44, 48, 52, 53], the GKR protocol
can be lifted to a zero knowledge argument scheme using zero
knowledge polynomial commitments. The observation is that in the
last round of the GKR protocol 2, the verifier needs the multilinear
extension of the input of the circuit evaluated at two random points.
To allow secret witness from the prover, it suffices for the prover
to commit to the multilinear extension of the witness, and later
opens the polynomial evaluations to complete the reduction of the
GKR protocol. We follow the same framework to build our zero
knowledge CNN, and we give the formal definitions in Appendix B.
In our implementation, we use the polynomial commitment
scheme in [39, 44]. The security is based on the discrete-log as-
sumption and the scheme does not require trusted setup. For a
polynomial of size 𝑁 , the prover time is 𝑂(𝑁) modular exponenti-
ation, and the proof size and the verifier time are 𝑂(√
3 NEW SUMCHECK FOR CONVOLUTIONS
Convolution is undoubtedly the most important layer of CNNs
and takes the most computational resources in CNN predictions.
There are three existing approaches to support convolutions in zero
knowledge proof schemes. The first one is to implement convolu-
tions naively using addition and multiplication gates. Though the
circuit, and thus the ZKP backend, is very simple, the size of the
circuit is big, which is 𝑂(𝑛2 · 𝑤2) for a 2-D convolution between
two inputs of 𝑛 × 𝑛 and 𝑤 × 𝑤. The second approach is to compute
convolutions using FFT implemented as a circuit. The circuit is of
𝑂(𝑛2 log 𝑛) size and 𝑂(log 𝑛) depth (assuming 𝑤 < 𝑛), and there
are candidates of ZKP on the butterfly circuit of FFT (e.g., [52]).
Though asymptotically better, for typical convolutions in CNNs
usually 𝑤 << 𝑛 and the circuit size of FFT is comparable or even
larger than the first naive approach, with an overhead on the depth.
The third approach relies on the fact that convolution is equiva-
lent to the polynomial multiplication between the two polynomials
represented by the inputs. Instead of computing the convolution,
given the result of the convolution we can test the equality of the
polynomial multiplication at a random point and the security is
guaranteed by the Schwartz-Zipppel lemma [38, 57]. The circuit or
ZKP to evaluate polynomials at a random point is of size 𝑂(𝑛2+𝑤2).
vCNN [34] took this approach and further improves the check by
combining a regular QAP and a polynomial-QAP. However, in this
approach the prover has to additionally commit to the result of
the convolution. As the commitments are usually the bottleneck of
ZKP schemes, the overhead of this approach is still high in practice.
In this section, we propose a new protocol to verify the correct-
ness of convolutions. The additional prover time is 𝑂(𝑛2), which is
asymptotically optimal and is even faster than computing the con-
volution. The protocol does not involve additional commitments
from the prover and can be embedded in general-purpose ZKP
schemes based on the GKR protocols. The key ingredient of our
scheme is a new sumcheck protocol for FFT with linear prover time.
3.1 New Sumcheck for Fast Fourier Transform
FFT transforms a polynomial from its coefficients to its evalua-
tions at powers of the root of unity. Formally speaking, let c =
(𝑐0, 𝑐1, . . . , 𝑐𝑁−1) be the vector of coefficients of a polynomial, a =
(𝑎0, 𝑎1, . . . , 𝑎𝑀−1) be the vector of evaluations at (𝜔0, 𝜔1, . . . , 𝜔𝑀−1),
Session 11B: Zero Knowledge II CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2972By the definition of polynomial evaluations, 𝑎 𝑗 =𝑁−1
where 𝜔 is the 𝑀-th root of unity such that 𝜔𝑀 = 1 mod 𝑝. We
always work in a finite field and we omit mod 𝑝 in the following.
Here the length of c and a are padded to the nearest powers of 2.
𝑖=0 𝑐𝑖𝜔 𝑗𝑖 for
𝑗 = 0, 1, . . . , 𝑀 − 1, which can also be written as a matrix-vector
multiplication a = 𝐹 · c, where 𝐹 is the standard Fourier matrix:
(cid:169)(cid:173)(cid:173)(cid:173)(cid:173)(cid:173)(cid:173)(cid:173)(cid:171)
𝐹 =
1
𝜔1
𝜔2
...
1
1
1
...
1 𝜔𝑀−1 𝜔2(𝑀−1)
1
𝜔2
𝜔4
...
. . .
. . .
. . .
1
𝜔 𝑁−1
𝜔2(𝑁−1)
...
. . . 𝜔 (𝑀−1)(𝑁−1)
(cid:170)(cid:174)(cid:174)(cid:174)(cid:174)(cid:174)(cid:174)(cid:174)(cid:172)
(4)
The key property of the FFT algorithm is that as 𝜔𝑀 = 1, there
are only 𝑀 distinct values in the Fourier matrix 𝐹 and a can be
computed in quasi-linear time using the divide-and-conquer tech-
nique [19]. We omit the algorithm of FFT, but will utilize the same
property in the design of our sumcheck protocol.
In our setting, given the multilinear extension of a evaluated at
a random point, we want to reduce its correctness to the evaluation
of the multilinear extension of c. The evaluations can either be
computed directly on c and a, or be given by the prover during the
GKR protocols. To do so, we first turn the equation of polynomial
evaluation to the form of multivariate polynomials:
˜𝑐(𝑥) ˜𝐹(𝑦, 𝑥) ,

˜𝑎(𝑦) =
(5)
𝑥∈{0,1}log 𝑁
for 𝑦 ∈ {0, 1}log 𝑀. Here ˜𝑎(·) and ˜𝑐(·) are multilinear extensions of a
and c, and ˜𝐹(·, ·) is the multilinear extension defined by the Fourier
matrix 𝐹 such that ˜𝐹(𝑦, 𝑥) is the (𝑦, 𝑥)-th entry in 𝐹. As 𝑥, 𝑦 are
binary strings, we further denote the values represented by 𝑦, 𝑥 as
Y,X ∈ F, and thus ˜𝐹(𝑦, 𝑥) = 𝜔YX. The equation basically replaces
the univariate indices 𝑖 ∈ [𝑁], 𝑗 ∈ [𝑀] by 𝑥 ∈ {0, 1}log 𝑁 , 𝑦 ∈
{0, 1}log 𝑀. To run the sumcheck protocol on Equation 5, we rely on
the algorithm proposed in [41, 48]. Given the evaluation ˜𝑎(𝑢) of ˜𝑎(·)
at a random point 𝑢 ∈ Flog 𝑀, if the prover can initialize the values
of ˜𝑐(𝑥) and ˜𝐹(𝑢, 𝑥) on all 𝑥 ∈ {0, 1}log 𝑁 , there is an algorithm for
the prover to generate all messages in the sumcheck protocol in
𝑂(𝑁) time. The algorithm applies dynamic programming [41] and
the initialization is referred as the bookkeeping tables in [48]. We
give the algorithm for our particular sumcheck on Equation 5 in
Algorithm 1 for completeness.
In the input of Algorithm 1, the array A𝑐 is simply c itself by
the definition of the multilinear extension. The challenging part is
to calculate A𝐹 , i.e., ˜𝐹(𝑢, 𝑥) ∀𝑥 ∈ {0, 1}log 𝑁 . Existing techniques
in [48, 51] cannot be applied here, as ˜𝐹(𝑦, 𝑥) is not sparse. It is the
multilinear extension defined by the Fourier matrix 𝐹 in Equation 4
with 𝑂(𝑀𝑁) nonzero values. Computing A𝐹 naively would take
𝑂(𝑀𝑁) time in total.
In order to reduce the prover time, we write ˜𝐹(𝑢, 𝑥) as:
˜𝐹(𝑢, 𝑥) =
˜𝛽(𝑢, 𝑧) ˜𝐹(𝑧, 𝑥)

𝑧∈{0,1}log 𝑀