ISP with large remaining bin size. This ISP can then be used in an
online setting to accommodate trafﬁc for preﬁxes not seen before.
4.3.3 Accommodating Prediction Errors
The integral assignment algorithm presented in Figure 6 works
well for ofﬂine trafﬁc demands. However, in an online setting, the
OfflineIntegral(NumPeaks, V0, {pk}, TotalTraﬃc, FlowTraﬃc) {
// compute pseudo capacities
for each ISP k, P seudoCapk = pk
if TotalTraﬃc ≥ V0 and NumPeaks  V0
V0 = 1.05 · V (cid:48)
margin = 0.05 ∗ V0
{p(cid:48)
for each k
k} = OﬄineFractional(V0 + margin ∗ K , {pk})
pk = max(0, p(cid:48)
k − margin)
0
// perform integral assignment using predicted trafﬁc
(Assignment, MaxISP) =
OﬄineIntegral( N umP eaks, V0, {pk},
PredictedTotal, PredictedFlow )
// actual assignment:
for every ﬂow appearing in interval i
if ﬂow appears in PredictedFlow
use pre-computed Assignment
else // this is a ﬂow not seen before
assign to MaxISP
PredictTraﬃc()
Figure 8: The global integral online ﬂow assignment (GIA-
online) algorithm.
5. OPTIMIZING PERFORMANCE UNDER
COST CONSTRAINT
In the preceding section we studied how to optimize cost for a
user. To be practical, a sensible smart routing algorithm needs to
consider both cost and performance.
5.1 Problem Formulation and Overview
There are multiple ways to formulate the problem of optimizing
both performance and cost. For example, one possibility is to de-
sign a metric that is a combination of both cost and performance.
However, it may be unclear to users exactly how to determine the
relative weights between cost and performance. A more intuitive
approach, which we propose in this paper, is to optimize perfor-
mance under a given cost constraint.
As before, we design both ofﬂine and online algorithms. Both
algorithms consist of two key components. The ﬁrst component is
a building block of the second one.
1. Given the pseudo capacity of each ISP during each interval,
namely an upper bound on the trafﬁc that can be assigned to
an ISP, we assign ﬂows in such a way that the total delay is
minimized. We call this component Flow Assignment Given
Pseudo Capacities.
2. Since a given cost constraint allows multiple pseudo capac-
ity assignments and these different assignments give differ-
ent delays, we will need to select the assignment that yields
good performance. We call this component Pseudo Capacity
Selection.
5.2 Ofﬂine Trafﬁc Assignment
We ﬁrst present an ofﬂine algorithm.
5.2.1 Flow Assignment Given Pseudo Capacities
The goal of ﬂow assignment given pseudo capacities is to mini-
mize the total latency such that the trafﬁc assigned to each ISP does
not exceed its pseudo capacity.
We solve the ﬂow assignment problem as a minimum-cost multi-
commodity ﬂow (MCMCF) problem by constructing a graph as
shown in Figure 9. In the graph, each node in the top row represents
the source of a ﬂow and the destination of the ﬂow is in the bottom
row. The nodes in the middle two rows are ISP nodes. The cost
perf (k, f ) of the link from the source node of ﬂow f to ISP node
k on the next row is the latency incurred by assigning ﬂow f to ISP
k; the costs of other links are zero. The link capacity of each ISP
node on the second row to the corresponding ISP node on the third
row is the pseudo capacity of the ISP; the capacities of other links
are unlimited.
Figure 9: MCMCF formulation of the ﬂow assignment prob-
lem.
5.2.2 Pseudo Capacity Selection
Given pseudo capacities, the above algorithm computes ﬂow as-
signment to optimize latency. Next we study how to determine the
pseudo capacities of the links during each interval.
ISPflowFperf(k, f)K11fkPseudoCapkPseudo capacities are determined by cost constraints. Without
consideration of cost, each ISP can allocate trafﬁc up to its link ca-
pacity, i.e., a link’s pseudo capacity is its raw capacity. However,
since our goal is to optimize performance under cost constraints,
we apply the algorithms described in Section 4, which impose con-
straints on how much trafﬁc each link can carry. More speciﬁcally,
we obtain the charging volume pk for ISP k based on cost optimiza-
tion. Then, during a non-peak interval, each ISP’s trafﬁc should be
no higher than pk (i.e., the pseudo capacity of ISP k is pk).
The pseudo capacities of peak intervals are not completely de-
termined by cost optimization. The only constraint from cost op-
timization is that each ISP can exceed pk for only (1 − qk) ∗ I
intervals, so we still have ﬂexibility in picking the burst ISPs for
each individual peak interval. Below we describe the algorithms to
determine the pseudo capacities for peak intervals under the cost
constraints.
A key step in determining the pseudo capacities of a peak inter-
val is to decide which ISP or set of ISPs to burst. Selecting burst
ISPs for a given peak interval can be done in two steps. First, we
derive the best performance achieved by bursting any set of ISPs
at a given peak interval. This step can be achieved by ﬁrst setting
the pseudo capacities of the chosen burst ISPs to their link capaci-
ties, the pseudo capacities of the remaining links to their charging
volumes, and then calling the algorithm developed in Section 5.2.1.
Next, we optimize performance across the entire charging period
while preserving the cost constraint (i.e., each ISP can burst up to
qk ∗ I time intervals). Let BestPerf (g, i) denote the best perfor-
mance computed by the algorithm in Section 5.2.1, when ISP set
g bursts at interval i. Then the step of determining which ISPs to
burst at each peak interval can be cast into a mixed integer pro-
gramming (MIP) problem as shown in Figure 10. The MIP can be
solved using LP software such as lp solve [14].
(cid:88)
(cid:88)
(cid:88)
g,i
g: k∈g,i
minimize
subject to
BestPerf (g, i) ∗ IsPeak (g, i)
IsPeak (g, i) ≤ (1 − qk) ∗ I ∀k
IsPeak (g, i) ≥ 1 for any peak interval i
g
IsPeak (g, i) ∈ {0, 1}
Figure 10: MIP formulation to determine which ISPs to burst.
5.3 Online Algorithms
Next we present the online algorithms. There are two new prob-
lems that we need to address in designing an online algorithm.
First, we need to predict both trafﬁc and performance. Second, we
need an efﬁcient algorithm to select pseudo capacities and assign
ﬂows to ISPs.
5.3.1 Predicting Trafﬁc and Performance
We predict trafﬁc patterns in the same way as shown in Figure 8.
To predict performance, we again use the exponentially weighted
moving average.
5.3.2 Performing Trafﬁc Assignment
We use the following greedy heuristic to assign trafﬁc online.
During a time interval i, a ﬂow is assigned to the ISP that has the
best predicted performance among all of the ISPs with sufﬁcient
pseudo capacities. We observe that the ordering of ﬂow assignment
affects the performance. In particular, we ﬁnd that assigning ﬂows
in order of descending DiﬀPerf (f )∗v[i]
f performs very well, where
DiﬀPerf (f ) is the predicted performance difference between the
best performing ISP and the worst performing ISP, and v[i]
f is ﬂow
f’s volume during time interval i. Similarly to Figure 6, we split
the greedy assignment process into two separate steps so that we
can better accommodate trafﬁc that has not appeared before.
6. EVALUATIONS
In this section, we evaluate the performance of the algorithms
developed in the preceding sections. We obtain two sets of trafﬁc
traces: Abilene traces and a large Web server trace. The Abilene
traces contain netﬂow data from a number of universities and en-
terprises on the Internet-2 from Oct. 8, 2003 to Jan. 6, 2004. We
select trafﬁc traces from the organizations, shown in Table 2, for
our evaluations. To speed up our evaluations, during each 5-minute
interval, we only use the 2000 destination preﬁxes with the largest
volumes. We call these preﬁxes top preﬁxes. Note that in different
time intervals, the sets of top preﬁxes are different, but they always
account for over 90% of the total trafﬁc in an interval.
AS
3582
3
52
59
237
6629
70
1701
22753
Anonymized
Organization
University of Oregon
MIT Gateways
UCLA
Univ. of Wisconsin, Madison
NSF (MERIT-AS-14)
NOAA Silver Springs Lab
National Library of Medicine
NASA/GSFC
(Goddard Space Flight Center)
Red Hat Inc.
Commercial Web Server
Trafﬁc Rate (Mbps)
215.576 (202.527)
64.598 (64.587)
52.245 (52.234)
33.333 (33.253)
117.366 (108.621)
62.340 (62.335)
72.810 (72.691)
37.451 (37.448)
33.241 (33.238)
156.231 (64.124)
Table 2: Trafﬁc traces used in our evaluation, where the last
column shows the original trafﬁc rates averaged over 91 days,
and the trafﬁc rates after ﬁltering, which are shown in paren-
theses.
For diversity, we also use the trace collected from a large com-
mercial Web server from Oct. 1, 2003 to Dec. 31, 2003. This is
one of the busiest Web sites. The trace contains IP addresses of
hosts that issue Web requests, along with time-stamps and sizes of
requested ﬁles. Note that for efﬁciency, a set of proxy caches are
deployed in front of the Web server. About half of the requests
seen at the Web server are re-directed from the proxies with the IP
addresses replaced by the proxies’ IP addresses. Since we are inter-
ested only in wide-area network trafﬁc, we ﬁlter out the re-directed
requests. In addition, as with Abilene traces, we only consider the
trafﬁc contributed by the top 2000 preﬁxes during each 5-minute
interval. The last column in Table 2 shows the mean trafﬁc volume
before and after ﬁltering. Note that the difference between ﬁltered
trafﬁc and original trafﬁc of the Web server is larger than that of the
Abilene traces due to the ﬁltering of the redirected requests.
6.1 Evaluation of Cost Optimization
We compare the performance of our cost optimization algorithms
described in Section 4 (i.e., GFA-online in Figure 4 and GIA-online
in Figure 8), with the following alternatives:
• Round robin: in each time interval, trafﬁc is assigned to a
single ISP, and we rotate the responsible ISP in a round robin
fashion. If the chosen ISP does not have enough capacity to
carry all of the trafﬁc, the remaining trafﬁc is assigned to the
other ISPs in the same round robin manner.
• Equal split: in each time interval, trafﬁc is split equally among
all ISPs. When there are capacity constraints, we ﬁrst sort
links in order of ascending capacity.
In this order, we as-
sign ISP k an amount of trafﬁc which is the minimum of Ck
and rem traf /rem nisps, where rem traf is the amount
of trafﬁc that remains to be assigned, and rem nisps is the
number of ISPs that have not yet been assigned trafﬁc.
(a) Charging period = 1 week
(a) Charging period = 1 week
(b) Charging period = 1 month
(b) Charging period = 1 month
Figure 11: Comparison of the total cost across different traces,
where each user has 4 links to the Internet, and each link’s cost
is determined by a simple pricing function.