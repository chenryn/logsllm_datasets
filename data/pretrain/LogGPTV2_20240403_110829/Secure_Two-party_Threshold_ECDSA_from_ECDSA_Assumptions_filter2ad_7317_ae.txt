i ⊕ v1
v0
i ⊕ w
i∈[1,κ]
and then he computes a matrix of pseudo-random
elements from Zq
which he uses to create a linear sampling of w and ψ
χ ..= {H (j(cid:12)u)}j∈[1,(cid:4)(cid:2)]
(cid:13)
(cid:13)
j∈[1,(cid:4)(cid:2)]
j∈[1,(cid:4)(cid:2)]
w(cid:3) ..=
v(cid:3) ..=
wj · χj
ψj ∧ χj
Finally, he sends w(cid:3), v(cid:3), and u to Alice.
(cid:12)
5) Alice computes the vector
(cid:11)
z ..=
i ⊕ (∇i · ui)
v∇i
i∈[1,κ]
and collates the vector ζ, which is the transpose of z
in exactly the way that ψ is the transpose v0. She also
calculates χ in the same manner as Bob
χ ..= {H (j(cid:12)u)}j∈[1,(cid:4)(cid:2)]
Finally, she computes
z(cid:3) ..=
(cid:13)
j∈[1,(cid:4)(cid:2)]
ζj ∧ χj
as an element in Z2κ, then Alice aborts.
, where ∇ is ∇ reinterpreted
and if z(cid:3) (cid:8)= v(cid:3) ⊕(cid:8)∇ ∧ w(cid:3)(cid:9)
(cid:12)
6) Alice computes
Transfer:
tA
..=
τ ..=
H(j(cid:12)ζj)
H(j(cid:12)(ζj ⊕ ∇)) − tAj + αj
j∈[1,(cid:4)]
(cid:12)
j∈[1,(cid:4)]
and sends τ to Bob
7) Bob computes
tB
..=
−H(j(cid:12)ψj)
τ j − H(j(cid:12)ψj)
if wj = 0
if wj = 1
⎫⎬
⎭
j∈[1,(cid:4)]
(cid:11)
(cid:11)
(cid:17)
⎧⎨
⎩
C. Multiplication
In the context of our scheme, we are primarily interested in
using OT-extension as a basis for two-party multiplication. The
classic Gilboa [32] OT-multiplication takes an input from Alice
and an input from Bob, and returns to them additive secret
shares of the product of those two inputs. It works essentially
by performing binary multiplication with a single oblivious
transfer for each bit in Bob’s input.
Unfortunately, this protocol is vulnerable to selective failure
attacks in the malicious setting. Alice can corrupt one of the
two messages during any single transfer, and in doing so learn
the value of Bob’s input bit for that transfer according to
whether or not their outputs are correct. We address this by
encoding Bob’s input with enough redundancy that learning s (a
statistical security parameter) of Bob’s choice bits via selective
failure does not leak information about the original input
value. A consistency check ensures that the parties abort if the
multiplication output is incorrect, and thus the probability that
Alice succeeds in more than s selective failures is exponentially
small. A proposition of Impagliazzo and Naor [53] gives us
the following encoding scheme: for an input β of length κ,
sample κ + 2s random bits γmul ← {0, 1}κ+2s and take the
dot product with some public random vector cR ∈ Zκ+2s
. Use
this dot product as a mask for the original input. The encoded
input is
(cid:21)
(cid:22)
q
β − (cid:15)cR, γmul(cid:16)
(cid:12)γmul
Bits
In the full version of this paper, we prove formally that this
encoding scheme is secure against s selective failures.
Protocol 8. Multiplication (πMul):
This protocol is parameterized by the statistical security
parameter s, the curve order q, and the symmetric security
parameter κ = |q|. It also makes use of a coefﬁcient vector
c = cG(cid:12)cR, where cG ∈ Zκ
q is a gadget vector such
that cGi = 2i−1, and cR ← Zκ+2s
is a public random
vector. It requires access to the Correlated Oblivious Transfer
functionality F (cid:4)
COTe. Alice supplies some input integer α ∈ Zq,
and Bob supplies some input integer β ∈ Zq. Alice and Bob
receive tA and tB ∈ Zq as output, respectively, such that
q
990
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:37:03 UTC from IEEE Xplore.  Restrictions apply. 
tA + tB = α · β.
Encoding:
1) Bob chooses γmul ← {0, 1}κ+2s and computes
(cid:21)
β − (cid:15)cR, γmul(cid:16)
(cid:22)
(cid:12)γmul
ω ..= Bits
This is essentially a randomized encoding of β.
2) Alice sets
{αj}j∈[1,2κ+2s] ..= {cj · α}j∈[1,2κ+2s]
Multiplication:
3) Alice and Bob access the F (cid:4)
COTe functionality, with (cid:13) ..=
2κ + 2s. Alice plays the sender, supplying α as her
input, and Bob, the receiver, supplies ω. They receive
tA and tB as outputs, respectively.
4) Alice and Bob compute their output shares
(cid:10)
(cid:10)
tA
..=
tAj
j∈[1,2κ+2s]
tB
..=
tBj
j∈[1,2κ+2s]
D. Coalesced Multiplication
The multiplication protocol described in the foregoing section
supports the multiplication of only a single integer α by a single
integer β, and in our two-party and 2-of-n signing protocols
(Protocols 1 and 4 respectively) we invoke the multiplication
protocol two or three times. An optimization allows these
multiple invocations to be combined at reduced cost, albeit by
breaking some of our previous abstractions.
KOS
Consider ﬁrst the case of two-party signing, wherein two
multiplications must be performed. Each multiplication individ-
ually encodes its input, enlarging it by κ + 2s bits to account
for the encoding vector γmul, and then individually calls upon
the F (cid:4)
COTe correlated OT-extension functionality with batch size
(cid:13) = 2κ+2s. The πExtend
protocol that realizes this functionality
comprises an Extension phase and a Transfer phase. In the latter,
both computation and communication costs are proportionate
to (cid:13), but in the former, they are proportionate to (cid:13)(cid:3)
= (cid:13) + κOT.
Two multiplications performed in the naïve way incur twice
the cost. However, we observe that two multiplication protocol
instances can share a single invocation of πExtend
simply by
doubling the batch size, thereby reducing the extension cost by
an amount proportionate to κOT. Furthermore, we show in the
full version of this paper that our encoding scheme requires
only 2κ + 2s random bits to encode two inputs of length κ
when the inputs are combined into a single extension instance,
rather than 2κ + 4s bits, as would be required if the inputs
were encoded separately. Thus, we can construct an improved
double-multiplication protocol as follows.
Suppose that Alice and Bob wish to compute the products
α1 · β1 and α2 · β2 where the inputs are all of length κ.
Bob chooses the encoding vectors γmul1, γmul2 ← {0, 1}κ,
γmul3 ← {0, 1}2s and computes a single choice bit vector
KOS
(cid:21)
(cid:21)
β1 − (cid:15)cR, γmul1(cid:12)γmul3(cid:16)
β2 − (cid:15)cR, γmul2(cid:12)γmul3(cid:16)
(cid:22)
(cid:22)
ω ..= Bits
(cid:12) Bits
(cid:12)γmul1
(cid:12)γmul2(cid:12)γmul3
991
KOS
For her part, Alice calculates α1 from α1 and α2 from α2
using the ordinary coefﬁcient vector c. Alice and Bob then
engage in the Extension phase of the πExtend
protocol with
(cid:13) = 4κ + 2s, which produces w ∈ {0, 1}(cid:4) and ψ ∈ Z(cid:4)
q as
output for Bob, and ζ ∈ Z(cid:4)
q as output for Alice. They then
engage in a modiﬁed version of the πExtend
KOS Transfer phase.
Speciﬁcally, when hashing the parts of ζ and ψ that correspond
to the encoding vector γmul3, Alice and Bob both use hash
functions of the form H 2 : {0, 1}∗ (cid:6)→ Z2
q, which produce two
elements from Zq as output rather than the usual one element.
2 (·) to indicate the ﬁrst and second
If we use H 2
elements produced by a particular hash function invocation,
then Alice computes her output and transfer vectors as
1 (·) and H 2
(cid:12)
(cid:12)
(cid:12)
j∈[1,4κ]
j∈(4κ,4κ+2s]
j∈(4κ,4κ+2s]
H(j(cid:12)ζj)
1 (j(cid:12)ζj)
H 2
2 (j(cid:12)ζj)
H 2
H(j(cid:12)(ζj ⊕ ∇)) − H(j(cid:12)ζj) + α1
H(j(cid:12)(ζj ⊕ ∇)) − H(j(cid:12)ζj) + α2
j−2κ
1 (j(cid:12)ζj) + α1
1 (j(cid:12)(ζj ⊕ ∇)) − H 2
H 2
2 (j(cid:12)(ζj ⊕ ∇)) − H 2
2 (j(cid:12)ζj) + α2
H 2
(cid:12)
j
(cid:12)
j∈[1,2κ]
(cid:12)
(cid:12)
j∈(2κ,4κ]
j−2κ
j−2κ
j∈(4κ,4κ+2s]
j∈(4κ,4κ+2s]
Notice that when calculating τ , Alice masks α1 with the
lower halves of the outputs of H 2, and α2 with the upper. Bob
computes his output vector
(cid:11)
(cid:11)
(cid:11)
(cid:11)
(cid:11)
(cid:11)
(cid:11)
tA
..=
(cid:12)
(cid:12)
τ ..=
(cid:12)
(cid:12)
(cid:12)
tB
..=
(cid:12)
(cid:12)
j∈[1,4κ]
1 (j(cid:12)ψj)
(cid:12)
1 (j(cid:12)ψj)
(cid:11)
⎧⎨
H(j(cid:12)ζj)
(cid:17)
−H 2
⎩
τ j − H 2
⎧⎨
(cid:17)
2 (j(cid:12)ψj)
−H 2
⎩
τ j+2s − H 2
(cid:10)
(cid:10)
..=
j∈[1,2κ]
t1
A
tAj
∪(4κ,4κ+2s]
t2
A
..=
tAj
j∈(2κ,4κ]
∪(4κ+2s,4κ+4s]
if wj = 0
if wj = 1
j∈(4κ,4κ+2s]
2 (j(cid:12)ψj)
if wj = 0
if wj = 1
j∈(4κ,4κ+2s]
⎫⎬
⎭
⎫⎬
⎭
(cid:10)
(cid:10)
t1
B
t2
B
..=
j∈[1,2κ]
tBj
∪(4κ,4κ+2s]
..=
tBj
j∈(2κ,4κ]
∪(4κ+2s,4κ+4s]
Finally, Alice and Bob compute their output shares
Now Alice and Bob have shares of both products. Because
they have achieved this only by extending the output lengths
of certain hash function instances, the security of this double-
multiplication protocol follows from the security of the original.
Further consider the case of 2-of-n signing, in which three
multiplications are used to compute the products
α3 · β1
α2 · β2
α1 · β1
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:37:03 UTC from IEEE Xplore.  Restrictions apply. 
Notice that in the ﬁrst and third multiplications, Bob’s inputs are
identical, while in the second it differs. We can compute the ﬁrst
and second products using the double-multiplication technique
described previously, and make an additional modiﬁcation in
order to compute the third. Rather further enlarging the size
of the OT-extension batch generated in the Extension phase
of πExtend
KOS , we can perform the Extension phase in exactly the
same way as before, and modify only the Transfer phase. We
deﬁne H 3 : {0, 1}∗ (cid:6)→ Z3
q, which produces three elements
from Zq. We use H 2 to compute the components of tA, τ ,
and tB that correspond to the encoding of Bob’s ﬁrst input,
and we use H 3 to compute the components that correspond
to γmul3. Alice calculates and additional OT input vector α3,
and masks its elements using the additional hash outputs. The
two parties then sum the additional entries in their tA and tB
vectors to ﬁnd shares of the third product, α3 · β1. Thus Alice
and Bob can thus perform this additional multiplication simply
by enlarging the hash outputs in the KOS transfer phase.
To compute three products in the naïve way, κ · (3κOT +
12κ + 12s + 6) bits must be transferred (with a proportionate
amount of computation being performed). Concretely, if we use
κ = 256, s = 80, and κOT = 128+s (following KOS [34]), then
the total comes to 145.7 KiB. Using coalesced multiplication,
only κ · (κOT + 10κ + 8s + 2) bits must be transferred (again,
with a proportionate amount of computation). Concretely, this
amounts to 106.6 KiB, a savings of roughly one third.
VII. COST ANALYSIS
When all of the optimizations have been applied and all
functionalities and sub-protocols have been collapsed, we ﬁnd
that our protocols have communication and computation costs
as reported in Table I. Though we account completely for com-
munications, we count only elliptic curve point multiplications
and calls to the hash function H toward computation cost. We
assume that both commitments and the PRG are implemented
via the hash function H, and that proofs-of-knowledge-of-
discrete-logarithm are implemented via Schnorr protocols with
the Fiat-Shamir heuristic.
The 2-of-n setup protocol is somewhat more complex than