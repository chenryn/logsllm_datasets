                    and idc.get_operand_type(addr, 1) == idc.o_imm:  # rax
                if idc.get_item_size(addr) > 5:
                    op2_size = 8
                else:
                    op2_size = 4
                op2 = idc.get_operand_value(addr, 1)
                next_op = addr
                print('begin:\t' + hex(addr))
                while next_op  "
                        if next_op_insn == "rol":
                            op2 = rol(op2, da, 8 * op2_size)
                        elif next_op_insn == "ror":
                            op2 = ror(op2, da, 8 * op2_size)
                        elif next_op_insn == "xor":
                            op2 = op2 ^ da
                            if op2_size == 8:
                                op2 &= 0xffffffffffffffff
                            else:
                                op2 &= 0xffffffff
                        else:
                            break
                        log_data += hex(op2)
                        print(log_data)
                    else:
                        break
                print("end:\t", hex(next_op))
                if op2_size == 8:
                    patch_raw(addr + 2, op2.to_bytes(length=op2_size, byteorder='little'), op2_size) #mov rax, xxx
                    nop(addr + 0xA, next_op)
                else:
                    patch_raw(addr + 1, op2.to_bytes(length=op2_size, byteorder='little'), op2_size)  # mov rax, xxx
                    nop(addr + 5, next_op)
                addr = next_op
                continue
            addr += idc.get_item_size(addr)
    dejunkcode(0x0000000000400672, 0x000000000040151B)
    dyn = GetDyn()
    print("Elf64_Dyn:\t" + hex(dyn))
    strtab = ParseDyn(dyn, 0x5)
    symtab = ParseDyn(dyn, 0x6)
    rela = ParseDyn(dyn, 0x7)
    print("DT_STRTAB:\t" + hex(strtab))
    print("DT_SYMTAB:\t" + hex(symtab))
    print("DT_RELA:\t" + hex(rela))
    PltResolver(rela, strtab, symtab)
## executable_pyc
上面的题目，我觉得难度都蛮大的，不过都很不幸被打成了签到题，这可能就是线上比赛所必须要面对的吧。而这道题目直到比赛结束也只有 2
解，在比赛中我也没有做出，赛后复现后在这里进行分享，感谢密码爷的帮助~
###  还原字节码至源码
这道题目所给的是一个 pyc 文件，但是对文件进行了混淆，使得直接使用工具进行转化为源码报错，混淆总共有两处，我们尝试更改源码即可反编译得到字节码内容。
我们这里使用调试的方法来得到混淆的位置并尝试还原
    import sys
    import decompyle3
    decompyle3.decompile_file(r"C:\en.pyc", outstream=sys.stdout)
直接执行以上程序发现程序卡在
在 pyc 文件中搜索（0x4f），并且修改为 0（使其不溢出）
修改之后我们就可以查看字节码信息了，到这里其实就可以尝试手动恢复了，但是我继续尝试直接恢复出源码的信息。
可以看到字节码的开头是这样的两行
     L.   1         0  JUMP_FORWARD          4  'to 4'
                    2  LOAD_CONST               0
                  4_0  COME_FROM             0  '0'
                    4  LOAD_CONST               0
                    6  LOAD_CONST               None
我们可以知道实际上执行的时候会直接跳过第二行的内容（存在溢出的
0x4f），但是对于反编译器来说，会对字节码进行逐行解析，因此导致了反编译认为此处存在非法指令。
我们这里直接把开头的这四个字节的内容替换为 09（NOP）指令
并且在 decompyle3/semantics/pysource.py 中这个位置增加以下代码来删除 NOP 指令（可以根据搜索关键字来找到）
    i = 0
    while i                 20  CALL_FUNCTION_31     31  '31 positional arguments'
                      22  LOAD_CONST               512
                      24  COMPARE_OP               >= 1
        return res % n
    def e2(m):
        assert type(m) == bytes
        l = len(m) // 2
        m1 = bytes_to_long(m[:l])
        m2 = bytes_to_long(m[l:])
        p = gen_prime(1024)
        q = gen_prime(1024)
        pp = g.next_prime(p + 2333)
        qq = g.next_prime(q + 2333)
        e = g.next_prime(65535)
        ee = g.next_prime(e)
        n = p * q
        nn = pp * qq
        c1 = long_to_bytes(pow(m1, e, n))
        c2 = long_to_bytes(pow(m2, ee, nn))
        print(str(n), nn.digits(), (c1 + c2).hex())
        return c1 + c2
    if __name__ == '__main__':
        import sys
        if len(sys.argv) >= 2:
            e2(sys.argv[1].encode())
        else:
            import base64 as B
            flag = B.b64decode(b'ZmxhZ3t0aGlzaXNhZmFrZWZsYWdhZ2Fhc2FzaGRhc2hkc2hkaH0=')
            e2(flag)
###  解密 Flag
这一部分的操作实际上完全就是一道 Crypto
的题目，我在比赛过程中就是卡在了这里，赛后我问了群里的密码师傅（感谢！！），最终问题得到了解决，这里简单的说一下解法和我的理解。
next_prime 这个函数寻找的质数与传入的参数基本上差值都在 1500 以内，所以 pp 和 qq 这两个质数实际上是非常接近 p 和 q
这两个质数的，而且在可爆破的范围内，设为 d1 和 d2。
所以可以得到
计算得到 p 和 q，pp 和 qq，由于 flag 内容是两部分 bytes 拼接，所以可以爆破分隔位置求解。
###  计算程序
    import gmpy2
    from Crypto.Util.number import long_to_bytes, bytes_to_long
    n = 10300808326934539089496666241808264289631957459372648156286399524715435483257526083909012656240599916663153630994400397551123967736269088895097145175999170121832669199408651009372742448196961434772052680714475103278704994244915332148949308972258132346198706995878511207707020032852291909422169657384059305615332901933166314692127020030962059133945677194815714731744932280037687773557589292839426111679593131496468880818820566335362063945141576571029271455695757725169819071536590541808603312689890186432713168331831945391117398124164372551511615664022982639779869597584768094658974144703654232643726744397158318139843
    nn = 10300808326934539089496666241808264289631957459372648156286399524715435483257526083909012656240599916663153630994400397551123967736269088895097145175999170121832669199408651009372742448196961434772052680714475103278704994244915332148949308972258132346198706995878511207707020032852291909422169657384059306119730985949350246133999803589372738154347587848281413687500584822677442973180875153089761224816081452749380588888095064009160267372694200256546854314017937003988172151851703041691419537865664897608475932582537945754540823276273979713144072687287826518630644255675609067675836382036436064703619178779628644141463
    c = "22cca5150ca0bb2132f68302dc7441e52b91ae7252e44cc13ed83e58253a9aaaa55e095ba36748dff7ea21fff553f8c4656e77a508b64da054f1381b7e2d0600bcec6ed9e1cc8d14c2362aaef7a972a714f88e5afb2d39e2d77d0c22a449ca2cfb0802c138f20e0ecbd3c174151cdb8e8ca6d89aa3c503615ebfbc851af5ac51dcfa8b5869b775b57a27b9e4346979180d89b303cae2c5d9e6cabb3c9947837bd8f92333532d4b54dd72ea354000600066328f6f4329147df195ec78a7ab9d39973ce0fd6511e7a0de54737bee64476ba531604f0375b08adf7d768c41ba9e2ba88468d126561a134de79dc0217c1c56d219ca6747103618e46f35281feb9e6050c93e32e26e21ee2c3d495f60db2fad9f9a5c570c9f97aee698024ebff6163ef26e32958872db7c593d7f41f90981b8db45aa01085be1e61f7603ecf3d5c032dd90dea791cd9825299548c0cbe7dadabc157048a7fd5cd4bcb1cfeaf0bd2d679f66ceb0b1c33ec04bd20317f872c85d500a3475833f983fdee59b3f61a731e2a8b9a60bd7d840f46e97f06dd4fd8ad1cb4d13a82da01938801c33835ceaf34e1cf62ebdde7ac68b17c2a236b64ffacd2a0e7258571ce570871aea9ff309df63c0a3abcfa0c05d159a82f9fa3f3ad73944e4ae33c3432c8b65c0d6fe9b560220b14abe5886188fc1e6afa4bb4395669618387224422acf20b519af902225e270"
    d = nn - n
    q = 0
    for d1 in range(2333, 3000):
        for d2 in range(2333, 3000):
            t = d - d1 * d2
            k = t * t - 4 * d1 * d2 * n
            if k > 0 and gmpy2.iroot(k, 2)[1]:
                q = (t + gmpy2.iroot(k, 2)[0]) // (2 * d1)
                p = n // q
                e = 65537
                ee = gmpy2.next_prime(e)
                d1 = gmpy2.invert(e, (p - 1) * (q - 1))
                pp = gmpy2.next_prime(p + 2333)
                qq = gmpy2.next_prime(q + 2333)
                d2 = gmpy2.invert(ee, (pp - 1) * (qq - 1))
                for l in range(1, len(c)):
                    c1, c2 = int(c[:l], 16), int(c[l:], 16)
                    if c1 < n and c2 < nn:
                        flag = long_to_bytes(pow(c1, d1, n)) + long_to_bytes(pow(c2, d2, nn))
                        if "flag" in flag:
                            print(flag)
## 总结
这次的蓝帽杯的RE题目难度还是比较高的，我认为还是有很多值得学习点，并且从这些题目中可以看出，RE的题目以及逐渐往自动化和 Crypto
方向靠拢，在题目中经常会结合一些其他方向的知识，如果想要在比赛中快速的解题，掌握一些其他方向的知识也是必不可少的。本文中的方法不一定是最好最快的，但是一定是能够让做题者在做题的过程中学习到一些知识的，希望在比赛过程中即使做出题目的师傅，也可以尝试着跟着本篇文章的思路来解题。本文在编写的过程中有些仓促，难免有些地方存在错误和没有阐述清楚，希望有疑问或者看到错误的师傅可以在评论区与我交流。