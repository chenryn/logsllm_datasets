what trap handlers Windows has assigned to interrupts (including
exceptions and IRQs), using the !idt kernel debugger command.
The !idt command with no flags shows simplified output that
includes only registered hardware interrupts (and, on 64-bit
machines, the processor trap handlers).
The following example shows what the output of the !idt
command looks like on an x64 system:
Click here to view code image
0: kd> !idt
Dumping IDT: fffff8027074c000
00:     fffff8026e1bc700 nt!KiDivideErrorFault
01:     fffff8026e1bca00 nt!KiDebugTrapOrFault    Stack = 
0xFFFFF8027076E000
02:     fffff8026e1bcec0 nt!KiNmiInterrupt        Stack = 
0xFFFFF8027076A000
03:     fffff8026e1bd380 nt!KiBreakpointTrap
04:     fffff8026e1bd680 nt!KiOverflowTrap
05:     fffff8026e1bd980 nt!KiBoundFault
06:     fffff8026e1bde80 nt!KiInvalidOpcodeFault
07:     fffff8026e1be340 nt!KiNpxNotAvailableFault
08:     fffff8026e1be600 nt!KiDoubleFaultAbort    Stack = 
0xFFFFF80270768000
09:     fffff8026e1be8c0 nt!KiNpxSegmentOverrunAbort
0a:     fffff8026e1beb80 nt!KiInvalidTssFault
0b:     fffff8026e1bee40 nt!KiSegmentNotPresentFault
0c:     fffff8026e1bf1c0 nt!KiStackFault
0d:     fffff8026e1bf500 nt!KiGeneralProtectionFault
0e:     fffff8026e1bf840 nt!KiPageFault
10:     fffff8026e1bfe80 nt!KiFloatingErrorFault
11:     fffff8026e1c0200 nt!KiAlignmentFault
12:     fffff8026e1c0500 nt!KiMcheckAbort         Stack = 
0xFFFFF8027076C000
13:     fffff8026e1c0fc0 nt!KiXmmException
14:     fffff8026e1c1380 nt!KiVirtualizationException
15:     fffff8026e1c1840 nt!KiControlProtectionFault
1f:     fffff8026e1b5f50 nt!KiApcInterrupt
20:     fffff8026e1b7b00 nt!KiSwInterrupt
29:     fffff8026e1c1d00 nt!KiRaiseSecurityCheckFailure
2c:     fffff8026e1c2040 nt!KiRaiseAssertion
2d:     fffff8026e1c2380 nt!KiDebugServiceTrap
2f:     fffff8026e1b80a0 nt!KiDpcInterrupt
30:     fffff8026e1b64d0 nt!KiHvInterrupt
31:     fffff8026e1b67b0 nt!KiVmbusInterrupt0
32:     fffff8026e1b6a90 nt!KiVmbusInterrupt1
33:     fffff8026e1b6d70 nt!KiVmbusInterrupt2
34:     fffff8026e1b7050 nt!KiVmbusInterrupt3
35:     fffff8026e1b48b8 hal!HalpInterruptCmciService 
(KINTERRUPT fffff8026ea59fe0)
b0:     fffff8026e1b4c90 ACPI!ACPIInterruptServiceRoutine 
(KINTERRUPT ffffb88062898dc0)
ce:     fffff8026e1b4d80 hal!HalpIommuInterruptRoutine 
(KINTERRUPT fffff8026ea5a9e0)
d1:     fffff8026e1b4d98 hal!HalpTimerClockInterrupt 
(KINTERRUPT fffff8026ea5a7e0)
d2:     fffff8026e1b4da0 hal!HalpTimerClockIpiRoutine 
(KINTERRUPT fffff8026ea5a6e0)
d7:     fffff8026e1b4dc8 hal!HalpInterruptRebootService 
(KINTERRUPT fffff8026ea5a4e0)
d8:     fffff8026e1b4dd0 hal!HalpInterruptStubService 
(KINTERRUPT fffff8026ea5a2e0)
df:     fffff8026e1b4e08 hal!HalpInterruptSpuriousService 
(KINTERRUPT fffff8026ea5a1e0)
e1:     fffff8026e1b8570 nt!KiIpiInterrupt
e2:     fffff8026e1b4e20 hal!HalpInterruptLocalErrorService 
(KINTERRUPT fffff8026ea5a3e0)
e3:     fffff8026e1b4e28 
hal!HalpInterruptDeferredRecoveryService
                         (KINTERRUPT fffff8026ea5a0e0)
fd:     fffff8026e1b4ef8 hal!HalpTimerProfileInterrupt 
(KINTERRUPT fffff8026ea5a8e0)
fe:     fffff8026e1b4f00 hal!HalpPerfInterrupt (KINTERRUPT 
fffff8026ea5a5e0)
On the system used to provide the output for this experiment, the
ACPI SCI ISR is at interrupt number B0h. You can also see that
interrupt 14 (0Eh) corresponds to KiPageFault, which is a type of
predefined CPU trap, as explained earlier.
You can also note that some of the interrupts—specifically 1, 2,
8, and 12—have a Stack pointer next to them. These correspond to
the traps explained in the section on “Task state segments” from
earlier, which require dedicated safe kernel stacks for processing.
The debugger knows these stack pointers by dumping the IDT
entry, which you can do as well by using the dx command and
dereferencing one of the interrupt vectors in the IDT. Although you
can obtain the IDT from the processor’s IDTR, you can also obtain
it from the kernel’s KPCR structure, which has a pointer to it in a
field called IdtBase.
Click here to view code image
0: kd> dx @$pcr->IdtBase[2].IstIndex
@$pcr->IdtBase[2].IstIndex : 0x3 [Type: unsigned short]
0: kd> dx @$pcr->IdtBase[0x12].IstIndex
@$pcr->IdtBase[0x12].IstIndex : 0x2 [Type: unsigned short]
If you compare the IDT Index values seen here with the previous
experiment on dumping the x64 TSS, you should find the matching
kernel stack pointers associated with this experiment.
Each processor has a separate IDT (pointed to by their own IDTR) so that
different processors can run different ISRs, if appropriate. For example, in a
multiprocessor system, each processor receives the clock interrupt, but only
one processor updates the system clock in response to this interrupt. All the
processors, however, use the interrupt to measure thread quantum and to
initiate rescheduling when a thread’s quantum ends. Similarly, some system
configurations might require that a particular processor handle certain device
interrupts.
Programmable interrupt controller architecture
Traditional x86 systems relied on the i8259A Programmable Interrupt
Controller (PIC), a standard that originated with the original IBM PC. The
i8259A PIC worked only with uniprocessor systems and had only eight
interrupt lines. However, the IBM PC architecture defined the addition of a
second PIC, called the secondary, whose interrupts are multiplexed into one
of the primary PIC’s interrupt lines. This provided 15 total interrupts (7 on
the primary and 8 on the secondary, multiplexed through the master’s eighth
interrupt line). Because PICs had such a quirky way of handling more than 8
devices, and because even 15 became a bottleneck, as well as due to various
electrical issues (they were prone to spurious interrupts) and the limitations of
uniprocessor support, modern systems eventually phased out this type of
interrupt controller, replacing it with a variant called the i82489 Advanced
Programmable Interrupt Controller (APIC).
Because APICs work with multiprocessor systems, Intel and other companies
defined the Multiprocessor Specification (MPS), a design standard for x86
multiprocessor systems that centered on the use of APIC and the integration
of both an I/O APIC (IOAPIC) connected to external hardware devices to a
Local APIC (LAPIC), connected to the processor core. With time, the MPS
standard was folded into the Advanced Configuration and Power Interface
(ACPI)—a similar acronym to APIC by chance. To provide compatibility
with uniprocessor operating systems and boot code that starts a
multiprocessor system in uniprocessor mode, APICs support a PIC
compatibility mode with 15 interrupts and delivery of interrupts to only the
primary processor. Figure 8-12 depicts the APIC architecture.
Figure 8-12 APIC architecture.
As mentioned, the APIC consists of several components: an I/O APIC that
receives interrupts from devices, local APICs that receive interrupts from the
I/O APIC on the bus and that interrupt the CPU they are associated with, and
an i8259A-compatible interrupt controller that translates APIC input into
PIC-equivalent signals. Because there can be multiple I/O APICs on the
system, motherboards typically have a piece of core logic that sits between
them and the processors. This logic is responsible for implementing interrupt
routing algorithms that both balance the device interrupt load across
processors and attempt to take advantage of locality, delivering device
interrupts to the same processor that has just fielded a previous interrupt of
the same type. Software programs can reprogram the I/O APICs with a fixed
routing algorithm that bypasses this piece of chipset logic. In most cases,
Windows will reprogram the I/O APIC with its own routing logic to support
various features such as interrupt steering, but device drivers and firmware
also have a say.
Because the x64 architecture is compatible with x86 operating systems,
x64 systems must provide the same interrupt controllers as the x86. A
significant difference, however, is that the x64 versions of Windows refused
to run on systems that did not have an APIC because they use the APIC for
interrupt control, whereas x86 versions of Windows supported both PIC and
APIC hardware. This changed with Windows 8 and later versions, which
only run on APIC hardware regardless of CPU architecture. Another
difference on x64 systems is that the APIC’s Task Priority Register, or TPR,
is now directly tied to the processor’s Control Register 8 (CR8). Modern
operating systems, including Windows, now use this register to store the
current software interrupt priority level (in the case of Windows, called the
IRQL) and to inform the IOAPIC when it makes routing decisions. More
information on IRQL handling will follow shortly.
EXPERIMENT: Viewing the PIC and APIC
You can view the configuration of the PIC on a uniprocessor and
the current local APIC on a multiprocessor by using the !pic and
!apic kernel debugger commands, respectively. Here’s the output
of the !pic command on a uniprocessor. Note that even on a system
with an APIC, this command still works because APIC systems
always have an associated PIC-equivalent for emulating legacy
hardware.
Click here to view code image
lkd> !pic
----- IRQ Number ----- 00 01 02 03 04 05 06 07 08 09 0A 0B 
0C 0D 0E 0F
Physically in service:  Y  .  .  .  .  .  .  .  .  Y  Y  Y  
.  .  .  .
Physically masked:      Y  Y  Y  Y  Y  Y  Y  Y  Y  Y  Y  Y  
Y  Y  Y  Y
Physically requested:   Y  .  .  .  .  .  .  .  .  Y  Y  Y  
.  .  .  .
Level Triggered:        .  .  .  .  .  .  .  .  .  .  .  .  
.  .  .  .
Here’s the output of the !apic command on a system running
with Hyper-V enabled, which you can see due to the presence of
the SINTI entries, referring to Hyper-V’s Synthetic Interrupt
Controller (SynIC), described in Chapter 9. Note that during local
kernel debugging, this command shows the APIC associated with
the current processor—in other words, whichever processor the
debugger’s thread happens to be running on as you enter the
command. When looking at a crash dump or remote system, you
can use the ~ (tilde) command followed by the processor number to
switch the processor of whose local APIC you want to see. In
either case, the number next to the ID: label will tell you which
processor you are looking at.
Click here to view code image
lkd> !apic
Apic (x2Apic mode)  ID:1 (50014)  LogDesc:00000002  TPR 00
TimeCnt: 00000000clk  SpurVec:df  FaultVec:e2  error:0
Ipi Cmd: 00000000`0004001f  Vec:1F  FixedDel    Dest=Self      
edg high
Timer..: 00000000`000300d8  Vec:D8  FixedDel    Dest=Self      
edg high      m
Linti0.: 00000000`000100d8  Vec:D8  FixedDel    Dest=Self      
edg high      m
Linti1.: 00000000`00000400  Vec:00  NMI         Dest=Self      
edg high
Sinti0.: 00000000`00020030  Vec:30  FixedDel    Dest=Self      
edg high
Sinti1.: 00000000`00010000  Vec:00  FixedDel    Dest=Self      
edg high      m
Sinti2.: 00000000`00010000  Vec:00  FixedDel    Dest=Self      
edg high      m
Sinti3.: 00000000`000000d1  Vec:D1  FixedDel    Dest=Self      
edg high
Sinti4.: 00000000`00020030  Vec:30  FixedDel    Dest=Self      
edg high
Sinti5.: 00000000`00020031  Vec:31  FixedDel    Dest=Self      
edg high
Sinti6.: 00000000`00020032  Vec:32  FixedDel    Dest=Self      
edg high
Sinti7.: 00000000`00010000  Vec:00  FixedDel    Dest=Self      
edg high      m
Sinti8.: 00000000`00010000  Vec:00  FixedDel    Dest=Self      
edg high      m
Sinti9.: 00000000`00010000  Vec:00  FixedDel    Dest=Self      
edg high      m
Sintia.: 00000000`00010000  Vec:00  FixedDel    Dest=Self      
edg high      m
Sintib.: 00000000`00010000  Vec:00  FixedDel    Dest=Self      
edg high      m
Sintic.: 00000000`00010000  Vec:00  FixedDel    Dest=Self      
edg high      m
Sintid.: 00000000`00010000  Vec:00  FixedDel    Dest=Self      
edg high      m
Sintie.: 00000000`00010000  Vec:00  FixedDel    Dest=Self      
edg high      m
Sintif.: 00000000`00010000  Vec:00  FixedDel    Dest=Self      
edg high      m
TMR: 95, A5, B0
IRR:
ISR:
The various numbers following the Vec labels indicate the
associated vector in the IDT with the given command. For
example, in this output, interrupt number 0x1F is associated with
the Interrupt Processor Interrupt (IPI) vector, and interrupt number
0xE2 handles APIC errors. Going back to the !idt output from the
earlier experiment, you can notice that 0x1F is the kernel’s APC
Interrupt (meaning that an IPI was recently used to send an APC
from one processor to another), and 0xE2 is the HAL’s Local APIC
Error Handler, as expected.
The following output is for the !ioapic command, which displays
the configuration of the I/O APICs, the interrupt controller
components connected to devices. For example, note how
GSIV/IRQ 9 (the System Control Interrupt, or SCI) is associated
with vector B0h, which in the !idt output from the earlier
experiment was associated with ACPI.SYS.
Click here to view code image
0: kd> !ioapic
Controller at 0xfffff7a8c0000898 I/O APIC at VA 
0xfffff7a8c0012000
IoApic @ FEC00000  ID:8 (11)  Arb:0
Inti00.: 00000000`000100ff  Vec:FF  FixedDel  Ph:00000000      
edg high      m
Inti01.: 00000000`000100ff  Vec:FF  FixedDel  Ph:00000000      
edg high      m
Inti02.: 00000000`000100ff  Vec:FF  FixedDel  Ph:00000000      
edg high      m
Inti03.: 00000000`000100ff  Vec:FF  FixedDel  Ph:00000000      
edg high      m
Inti04.: 00000000`000100ff  Vec:FF  FixedDel  Ph:00000000      
edg high      m
Inti05.: 00000000`000100ff  Vec:FF  FixedDel  Ph:00000000      
edg high      m
Inti06.: 00000000`000100ff  Vec:FF  FixedDel  Ph:00000000      
edg high      m
Inti07.: 00000000`000100ff  Vec:FF  FixedDel  Ph:00000000      
edg high      m
Inti08.: 00000000`000100ff  Vec:FF  FixedDel  Ph:00000000      
edg high      m
Inti09.: ff000000`000089b0  Vec:B0  LowestDl  Lg:ff000000      
lvl high
Inti0A.: 00000000`000100ff  Vec:FF  FixedDel  Ph:00000000      
edg high      m
Inti0B.: 00000000`000100ff  Vec:FF  FixedDel  Ph:00000000      
edg high      m
Software interrupt request levels (IRQLs)
Although interrupt controllers perform interrupt prioritization, Windows
imposes its own interrupt priority scheme known as interrupt request levels
(IRQLs). The kernel represents IRQLs internally as a number from 0 through
31 on x86 and from 0 to 15 on x64 (and ARM/ARM64), with higher numbers
representing higher-priority interrupts. Although the kernel defines the
standard set of IRQLs for software interrupts, the HAL maps hardware-
interrupt numbers to the IRQLs. Figure 8-13 shows IRQLs defined for the
x86 architecture and for the x64 (and ARM/ARM64) architecture.
Figure 8-13 x86 and x64 interrupt request levels (IRQLs).
Interrupts are serviced in priority order, and a higher-priority interrupt
preempts the servicing of a lower-priority interrupt. When a high-priority
interrupt occurs, the processor saves the interrupted thread’s state and
invokes the trap dispatchers associated with the interrupt. The trap dispatcher
raises the IRQL and calls the interrupt’s service routine. After the service
routine executes, the interrupt dispatcher lowers the processor’s IRQL to
where it was before the interrupt occurred and then loads the saved machine
state. The interrupted thread resumes executing where it left off. When the
kernel lowers the IRQL, lower-priority interrupts that were masked might
materialize. If this happens, the kernel repeats the process to handle the new
interrupts.
IRQL priority levels have a completely different meaning than thread-
scheduling priorities (which are described in Chapter 5 of Part 1). A
scheduling priority is an attribute of a thread, whereas an IRQL is an attribute
of an interrupt source, such as a keyboard or a mouse. In addition, each
processor has an IRQL setting that changes as operating system code
executes. As mentioned earlier, on x64 systems, the IRQL is stored in the
CR8 register that maps back to the TPR on the APIC.
Each processor’s IRQL setting determines which interrupts that processor
can receive. IRQLs are also used to synchronize access to kernel-mode data
structures. (You’ll find out more about synchronization later in this chapter.)
As a kernel-mode thread runs, it raises or lowers the processor’s IRQL
directly by calling KeRaiseIrql and KeLowerIrql or, more commonly,
indirectly via calls to functions that acquire kernel synchronization objects.
As Figure 8-14 illustrates, interrupts from a source with an IRQL above the
current level interrupt the processor, whereas interrupts from sources with
IRQLs equal to or below the current level are masked until an executing
thread lowers the IRQL.
Figure 8-14 Masking interrupts.
A kernel-mode thread raises and lowers the IRQL of the processor on
which it’s running, depending on what it’s trying to do. For example, when
an interrupt occurs, the trap handler (or perhaps the processor, depending on
its architecture) raises the processor’s IRQL to the assigned IRQL of the
interrupt source. This elevation masks all interrupts at and below that IRQL
(on that processor only), which ensures that the processor servicing the
interrupt isn’t waylaid by an interrupt at the same level or a lower level. The
masked interrupts are either handled by another processor or held back until
the IRQL drops. Therefore, all components of the system, including the
kernel and device drivers, attempt to keep the IRQL at passive level
(sometimes called low level). They do this because device drivers can
respond to hardware interrupts in a timelier manner if the IRQL isn’t kept
unnecessarily elevated for long periods. Thus, when the system is not
performing any interrupt work (or needs to synchronize with it) or handling a
software interrupt such as a DPC or APC, the IRQL is always 0. This
obviously includes any user-mode processing because allowing user-mode
code to touch the IRQL would have significant effects on system operation.
In fact, returning to a user-mode thread with the IRQL above 0 results in an
immediate system crash (bugcheck) and is a serious driver bug.
Finally, note that dispatcher operations themselves—such as context
switching from one thread to another due to preemption—run at IRQL 2
(hence the name dispatch level), meaning that the processor behaves in a
single-threaded, cooperative fashion at this level and above. It is, for
example, illegal to wait on a dispatcher object (more on this in the
“Synchronization” section that follows) at this IRQL, as a context switch to a
different thread (or the idle thread) would never occur. Another restriction is
that only nonpaged memory can be accessed at IRQL DPC/dispatch level or
higher.
This rule is actually a side effect of the first restriction because attempting to
access memory that isn’t resident results in a page fault. When a page fault
occurs, the memory manager initiates a disk I/O and then needs to wait for
the file system driver to read the page in from disk. This wait would, in turn,
require the scheduler to perform a context switch (perhaps to the idle thread if
no user thread is waiting to run), thus violating the rule that the scheduler
can’t be invoked (because the IRQL is still DPC/dispatch level or higher at
the time of the disk read). A further problem results in the fact that I/O
completion typically occurs at APC_LEVEL, so even in cases where a wait
wouldn’t be required, the I/O would never complete because the completion
APC would not get a chance to run.
If either of these two restrictions is violated, the system crashes with an
IRQL_NOT_LESS_OR_EQUAL or a
DRIVER_IRQL_NOT_LESS_OR_EQUAL crash code. (See Chapter 10,
“Management, diagnostics, and tracing” for a thorough discussion of system
crashes.) Violating these restrictions is a common bug in device drivers. The