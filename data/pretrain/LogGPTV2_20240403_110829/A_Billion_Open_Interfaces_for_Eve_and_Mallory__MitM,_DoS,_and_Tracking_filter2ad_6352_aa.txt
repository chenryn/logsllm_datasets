title:A Billion Open Interfaces for Eve and Mallory: MitM, DoS, and Tracking
Attacks on iOS and macOS Through Apple Wireless Direct Link
author:Milan Stute and
Sashank Narain and
Alex Mariotto and
Alexander Heinrich and
David Kreitschmann and
Guevara Noubir and
Matthias Hollick
A Billion Open Interfaces for Eve and Mallory: 
MitM, DoS, and Tracking Attacks on iOS and 
macOS Through Apple Wireless Direct Link
Milan Stute, Technische Universität Darmstadt; Sashank Narain, Northeastern University; 
Alex Mariotto, Alexander Heinrich, and David Kreitschmann, Technische Universität 
Darmstadt; Guevara Noubir, Northeastern University; Matthias Hollick, Technische 
Universität Darmstadt
https://www.usenix.org/conference/usenixsecurity19/presentation/stute
This paper is included in the Proceedings of the 
28th USENIX Security Symposium.
August 14–16, 2019 • Santa Clara, CA, USA
978-1-939133-06-9
Open access to the Proceedings of the 28th USENIX Security Symposium is sponsored by USENIX.A Billion Open Interfaces for Eve and Mallory:
MitM, DoS, and Tracking Attacks on
iOS and macOS Through Apple Wireless Direct Link
Milan Stute
TU Darmstadt
Sashank Narain
Northeastern University
Alex Mariotto
TU Darmstadt
Alexander Heinrich
TU Darmstadt
David Kreitschmann
TU Darmstadt
Guevara Noubir
Northeastern University
Matthias Hollick
TU Darmstadt
Abstract
Apple Wireless Direct Link (AWDL) is a key protocol in
Apple’s ecosystem used by over one billion iOS and macOS
devices for device-to-device communications. AWDL is a pro-
prietary extension of the IEEE 802.11 (Wi-Fi) standard and
integrates with Bluetooth Low Energy (BLE) for providing
services such as Apple AirDrop. We conduct the ﬁrst security
and privacy analysis of AWDL and its integration with BLE.
We uncover several security and privacy vulnerabilities rang-
ing from design ﬂaws to implementation bugs leading to a
man-in-the-middle (MitM) attack enabling stealthy modiﬁca-
tion of ﬁles transmitted via AirDrop, denial-of-service (DoS)
attacks preventing communication, privacy leaks that enable
user identiﬁcation and long-term tracking undermining MAC
address randomization, and DoS attacks enabling targeted or
simultaneous crashing of all neighboring devices. The ﬂaws
span across AirDrop’s BLE discovery mechanism, AWDL
synchronization, UI design, and Wi-Fi driver implementation.
Our analysis is based on a combination of reverse engineering
of protocols and code supported by analyzing patents. We pro-
vide proof-of-concept implementations and demonstrate that
the attacks can be mounted using a low-cost ($20) micro:bit
device and an off-the-shelf Wi-Fi card. We propose practical
and effective countermeasures. While Apple was able to issue
a ﬁx for a DoS attack vulnerability after our responsible dis-
closure, the other security and privacy vulnerabilities require
the redesign of some of their services.
1 Introduction
With deployments on over one billion devices, spanning
several Apple operating systems (iOS, macOS, tvOS, and
watchOS) and an increasing variety of devices (Mac, iPhone,
iPad, Apple Watch, Apple TV, and HomePod), Apple Wire-
less Direct Link (AWDL) is ubiquitous and plays a key role
in enabling device-to-device communications in the Apple
ecosystem. The AWDL protocol is little understood, partially
due to its proprietary nature, especially when it comes to se-
curity and privacy. Considering the well-known rocky history
of wireless protocols’ security, with various ﬂaws being re-
peatedly discovered in Bluetooth [7], WEP [74], WPA2 [88],
GSM [12], UMTS [57], and LTE [51], the lack of informa-
tion regarding AWDL security is a signiﬁcant concern given
the increasing number of services that rely on it, particularly
Apple’s AirDrop and AirPlay. It is also noteworthy that the
design of AWDL and integration with Bluetooth Low Energy
(BLE) are (1) driven by optimizing energy and bandwidth and
(2) the devices do not require an existing Wi-Fi access point
(AP) with secure connections but are open to communicat-
ing with arbitrary devices, thus, potentially exposing various
attack vectors.
We conduct the ﬁrst, to the best of our knowledge, security
analysis of AWDL and its integration with BLE, starting with
the reverse engineering of protocols and code supported by
analyzing patents. Our analysis reveals several security and
privacy vulnerabilities ranging from design ﬂaws to imple-
mentation bugs enabling different kinds of attacks: we present
a man-in-the-middle (MitM) attack enabling stealthy modi-
ﬁcation of ﬁles transmitted via AirDrop, a denial-of-service
(DoS) attack preventing communication between devices, pri-
vacy leaks allowing user identiﬁcation and long-term tracking
undermining MAC address randomization, and targeted DoS
and blackout DoS attacks (i. e., enabling simultaneous crash-
ing of all neighboring devices). The ﬂaws span AirDrop’s
BLE discovery mechanism, AWDL synchronization, UI de-
sign, and Wi-Fi driver implementation. We demonstrate that
the attacks can be stealthy, low-cost, and launched by devices
not connected to the target Wi-Fi network. We provide proof-
of-concept (PoC) implementations and demonstrate that the
attacks can be mounted using a low-cost ($20) micro:bit de-
vice and an off-the-shelf Wi-Fi card. The impact of these ﬁnd-
ings goes beyond Apple’s ecosystem as the Wi-Fi Alliance
adopted AWDL as the basis for Neighbor Awareness Network-
ing (NAN) [19, 94] which, therefore, might be susceptible to
similar attacks. Moreover, Google Android provides a NAN
API since 2017 pending manufacturer support [38].
Speciﬁcally, our contributions are threefold. First, we dis-
cover security and privacy vulnerabilities in AWDL and Air-
Drop and present four novel network-based attacks on iOS
USENIX Association
28th USENIX Security Symposium    37
and macOS. These attacks are:
(1) A long-term device tracking attack which works in spite
of MAC randomization, and may reveal personal infor-
mation such as the name of the device owner (over 75%
of experiment cases).
(2) A DoS attack aiming at the election mechanism of
AWDL to deliberately desynchronize the targets’ chan-
nel sequences effectively preventing communication.
(3) A MitM attack which intercepts and modiﬁes ﬁles trans-
mitted via AirDrop, effectively allowing for planting
malicious ﬁles.
(4) Two DoS attack on Apple’s AWDL implementations in
the Wi-Fi driver. The attacks allow crashing Apple de-
vices in proximity by injecting specially crafted frames.
The attacks can be targeted to a single victim or affect
all neighboring devices at the same time.
Second, we propose practical mitigations for all four at-
tacks. Third, we publish open source implementations of both
AWDL and AirDrop as the byproducts of our reverse engi-
neering efforts to stimulate future research in this area.
The rest of this paper is structured as follows. Section 2
provides background information on AWDL. Section 3 shows
the results of reverse engineering AirDrop. Section 4 presents
an attack to activate AWDL on devices in proximity, while
Section 5 shows how we leverage this activation mechanism
for user tracking attacks. Sections 6 and 7 feature the desyn-
chronization DoS attack and the MitM attack, respectively.
Section 8 reports implementation security vulnerabilities and
Section 9 concludes this work. We discuss mitigation tech-
niques and related work in subsections of the respective sec-
tions describing the attacks.
2 Background on Apple Wireless Direct Link
AWDL is a proprietary wireless ad hoc protocol based on the
IEEE 802.11 standard. In this section, we rely on the reverse
engineering efforts of the Open Wireless Link project [81] and
summarize the operation of AWDL as presented in [79, 80].
At its core, AWDL uses a channel hopping mechanism to
enable “simultaneous” communication with an AP and other
AWDL nodes on different channels. This channel hopping is
implemented as a sequence of so-called Availability Windows
(AWs). For each AW, a node indicates if it is available for
direct communication and, if so, on which channel it will be.
The channel value can be the channel of its AP, one of the
dedicated AWDL social channels (6, 44, or 149), or zero indi-
cating that it will not be listening on any channel. Each node
announces its own sequence s consisting of 16 AWs1 regularly
in AWDL-speciﬁc IEEE 802.11 Action Frames (AFs). We call
the length of such a full 16-AW sequence a period τ. Each AW
1Actually, [79] differentiates between AWs, Extension Windows (EWs),
and Extended Availability Windows (EAWs) where one EAW consists of
one AW and three EWs. In this work, we abstract from the smaller entities
and simply use the term AW to refer to an EAW.
Figure 1: AWDL synchronization depicting period, phase
offset, and the overlap function of two channel sequences.
has a length of 64 Time Units (TUs) where 1 TU = 1024 µs,
so τ ≈ 1 s. Figure 1 depicts these and the following concepts.
To allow nodes to meet and exchange data on the same
channel, they need to align their sequences in the time domain.
AWDL nodes elect a common master and use its AFs as
a time reference to achieve synchronization. Each master
node transmits synchronization parameters which consist of
the current AW sequence number i (0 to 216 − 1) and the
time until the next AW starts based on its local clock tAW.
When receiving an AF from its master at time TRx, a node
approximates TAW, the start of the next AW i + 1 in local time
as:2
TAW ≈ tAW + TRx
(1)
and correct its clock accordingly. Eq. (1) does not achieve
perfect alignment as it ignores the transmission delay as well
as delays in the sender’s Tx and receiver’s Rx chains. The
phase φ denotes the effective clock offset between two nodes.
Typically, φ ≤ 3 ms in practice [79].
A node transmits frames to another AWDL node during
AWs where the channels of both nodes are the same. We de-
note the overlap as the relative communication opportunities
during one period: an overlap of one means that two nodes are
on the same AWDL channel during all 16 AWs, while zero
means that they are never on the same channel. Formally, we
deﬁne the overlap O as the integral over the overlap function
o of two sequences s1 and s2 taking into account the phase
where s(t) is the τ-periodic continuation of a sequence, i. e.,
s(t + nτ) = s(t),∀n ∈ N. Then,
o(s1,s2,φ,t) =
if s1(t) = s2(t − φ) (cid:54)= 0
otherwise
(cid:40)
1
0
(2)
(3)
and
(cid:90) τ
t=0
O(s1,s2,φ) =
o(s1,s2,φ,t)
.
3 Reverse Engineering AirDrop
AirDrop is an application that allows iOS and macOS users
to exchange ﬁles between devices using AWDL as transport.
2Simpliﬁcation of [79, Eq. (1)].
38    28th USENIX Security Symposium
USENIX Association
00φ s2os1444444440000444444440000644440440000004400000004400006440044000τττtime t1We reverse-engineered the AirDrop protocol by employing
a MitM HTTPS proxy [20] and using a popular disassem-
bler on macOS’ sharingd daemon and Sharing framework
where AirDrop is implemented. Based on our ﬁndings, we re-
implement AirDrop in Python and make it available as open
source software [78]. Next, we discuss how different discover-
ability settings affect the user experience. Then, we describe
the technical protocol ﬂow and, ﬁnally, explain the difference
between authenticated and unauthenticated connections.
3.1 Discoverability User Setting
When opening the sharing pane (see left screenshot in Fig. 2)
in AirDrop, nearby devices will appear in the user interface
depending on their discoverability setting [2]. In particular,
devices can be discovered (1) by everybody or (2) by contacts
only. Alternatively, (3) the receiving off setting disables any
AirDrop connection requests. AirDrop requires Wi-Fi and
Bluetooth to be enabled. By default, Wi-Fi and Bluetooth
are enabled, and AirDrop is set to contacts only. In addition,
we found that devices need to be unlocked to be discovered.
Based on a user study that we present in Section 5.2, we
found that 80 % of the participants enable AirDrop (59.4 % in
contacts only and 20.6 % in everybody mode) while the other
20 % disabled it. For the rest of the paper, we assume that a
target device has AirDrop enabled and is unlocked.
3.2 Protocol and User Interaction
We describe all mechanisms involved in AirDrop including
discovery, authentication, and data transfer with a visual aid in
Fig. 2. The sender initiates the discovery procedure and trans-
fers the data while the receiver responds to requests: (1a) The
sender emits BLE advertisements including its hashed contact
identiﬁers (see Section 4.1 for details), while the prospec-
tive AirDrop receiver regularly scans for BLE advertisements.
(1b) The receiver compares the sender’s contact hashes with
contact identiﬁers in its own address book if set to contacts-
only mode. If there is at least one match or if the receiver
is in everyone mode, the receiver activates its AWDL inter-
face. (1c) Using mDNS/DNS-SD, the sender starts to look
for AirDrop service instances via the AWDL interface. (2)
For each discovered service, the sender establishes an HTTPS
connection with the receiver and performs a full authentica-
tion handshake (Discover). If authentication is successful, the
receiver appears as an icon in the sender’s UI. (3) When the
user selects a receiver, AirDrop sends a request containing
metadata and a thumbnail of the ﬁle (Ask). The receiver de-
cides whether they want to accept. If so, the sender continues
to transfer the actual ﬁle (Upload).
Next, we discuss the client and server TLS certiﬁcates and
explain their usage in combination with the sender’s and re-
ceiver’s record data to establish an authenticated connection.
Figure 2: Typical AirDrop protocol workﬂow including
screenshots [2] where user interaction is required.
USENIX Association
28th USENIX Security Symposium    39
SenderReceiverregularlyperformBLE scansif in everyone mode or contact hash matches,activate AWDL(1b) AWDL synchronization(1a) AirDrop BLE advertisementwith short contact hashesHTTP POST /Discoverwith sender’s record dataHTTP POST /Askwith sender’s record dataHTTP POST /Uploadwith fileEstablish TLS connection withclient and server certificatesAll subsequentcommunication  uses AWDLHTTP 200 OKwith receiver’s record dataFor every service discovered, start HTTPS discoverySelect receiverPrompt to decide whether to accept fileEstablish TLS connection withclient and server certificatesReceiver appears in sharing pane (with contact photo if record  data is valid)HTTP 200 OKStart file transfer if accepted (200)TLS teardownTLS teardownHTTP 200 OKif record data is valid, include own record data in response(1c) Ask for service AirDropService available atinstance 1fa518393a98 PTRInstance 1fa518393a98 is at Janes-iPhone.local:8770 SRVIP address of Janes-iPhone.localis fe80::90b6:7ff:fecc:46 AAAAService discovery via mDNS(1) DISCOVERY(2) AUTHENTI-CATION(3) DATATRANSFER0
1
2
3
Length (2)
Type (0x01)
Flags (0x1b)
Length (23)
Type (0xff)
Length (18)
Apple (0x4c00)
Subtype (0x05)
Zero bytes (0x00)
. . .
. . .
0x01
Contact Identiﬁer 1
Contact Identiﬁer 2
Contact Identiﬁer 3
Contact Identiﬁer 4
0x00
Figure 3: Certiﬁcates and CAs involved in AirDrop. Boxes