### Hacking Web Applications
**Speaker:** Brent White / @brentwdesign

#### Abstract:
Understanding how to exploit vulnerabilities in web applications is essential for both penetration testers and developers. This skill not only aids in identifying security weaknesses but also provides valuable insights into secure coding practices. This talk will cover the entire process of conducting a web application penetration test, from initial discovery using Open-Source Intelligence (OSINT) to advanced techniques such as fuzzing parameters for SQL injection. I will also discuss the tools and methods I commonly use. By the end of this session, you should have a solid understanding of what it takes to professionally assess and exploit web applications.

#### Detailed Outline:

##### 1. Pre-Assessment Preparation
Before diving into a web application assessment, several preparatory steps must be taken. These include defining the scope and goals of the assessment, typically during scoping and kick-off discussions. The kick-off call is crucial as it bridges the gap between the legal contract and the final report using the Rules of Engagement (RoE) document. The RoE outlines who, when, and what can be tested, setting clear boundaries for the assessment. Once the RoE is agreed upon, the assessment can begin.

##### 2. Evidence Gathering
Effective evidence gathering is critical for producing a comprehensive and valuable report. Here are some best practices:

- **Documentation Tools:**
  - **KeepNote** (available for Linux, Windows, and Mac) is my preferred tool. It allows for pasting screenshots, creating multiple embedded pages and folders, and organizing information by vulnerability.
  - **Dradis** is another popular choice, especially in Kali.
  - Organize folders by vulnerability type and color-code them based on risk rating.
  - Export KeepNote notebooks as HTML files for easy integration into your report.

- **Key Documentation:**
  - Record HTTP GET and Response for each vulnerability.
  - Document any unscheduled downtime.
  - Track changes in test data, including account creations, password changes, and client-provided data.
  - Log all monetary transactions.
  - Ensure that sensitive information, such as screenshots or specific details of vulnerabilities, is not shared online.
  - Provide legible screenshots and highlight specific payloads in the write-up.
  - List all affected pages and parameters for each vulnerability.

- **Methodology:**
  - Follow a structured methodology and checklist, such as those provided by OWASP, to ensure thoroughness.

##### 3. Discovery and OSINT
Utilizing Open-Source Intelligence (OSINT) is a powerful way to gather information about the target web application. Here are some resources and tools:

- **OSINT Resources:**
  - **Search Engines, Pastebin, ShodanHQ, urlvoid.com**: Search for related information, leaked credentials, and known vulnerabilities.
  - **Development Forums and Help Sites**: Look for old development forums that may contain valid credentials or other useful information.

- **Tools:**
  - **Discover by Lee Baird**: Active and passive scanning for domains, people, domain squatting, and blacklisted DNS reporting.
  - **The Harvester by Christian Martorella/Edge-Security Research**: Scrapes data from various sources like Bing, Google, LinkedIn, and Yahoo.

##### 4. Automated Scanning
Automated tools are invaluable for quickly covering a wide range of tests and content discovery. However, they should complement, not replace, manual testing. Here are some recommended tools:

- **Nessus**: Comprehensive host and web application scanning.
- **IBM App Scan**: Focused on web application vulnerabilities like SQL/LDAP injections, CSRF, and XSS.
- **BurpSuite Pro**: Includes an active scanner, content spider, and brute-forcer tools.
- **Nikto**: Identifies default pages, logins, and known vulnerable scripts.
- **WPScan**: For WordPress sites, identifies known vulnerabilities and enumerates themes and plugins.
- **DirBuster by OWASP**: For directory and file discovery.
- **Kali Linux**: Offers many pre-installed options under Web Applications > Web Vulnerability Scanners.
- **Other Scanners**: Saint and Nexpose.

- **Pro Tips:**
  - Verify scanner settings before starting.
  - Avoid DoS checks unless specifically requested.
  - Control the number of threads/connections to prevent flooding.
  - Exclude specific pages/functions as per client requests.
  - Configure login processes and credentials for authenticated scans.
  - Manually verify results and weed out false positives.

##### 5. Manual Testing
Manual testing is essential for a thorough assessment. Here are some key areas to focus on:

- **Automated Scanner Results:**
  - Document legitimate vulnerabilities and explore further, e.g., using SQLMap for suspected SQL injection.

- **Proxy Programs:**
  - Use BurpSuite Pro to manually explore the application while running Spider and Content Discovery tools.

- **Server Response Analysis:**
  - Review server responses to identify the server type (IIS, Apache).

- **Parameter Fuzzing:**
  - Test how parameters handle characters and commands outside of normal actions.
  - Look for parameters in URLs, HTTP GET, and POST requests.

- **Vulnerability Testing:**
  - Test for Cross-site Scripting (XSS), Cross-site Request Forgery (CSRF), SQL/LDAP injection, Local File Inclusion (LFI), and Remote File Inclusion (RFI).
  - Use BurpSuite Pro lists and other tools like Xenotix for XSS testing.

- **Sensitive Information:**
  - Check for sensitive information passed through URL in GET requests, such as usernames, passwords, and session IDs.

- **Source Code Review:**
  - Look for valuable comments in the source code of HTTP responses, which may reveal internal IPs, database names, and more.

- **Authentication:**
  - Test for bypassing or breaking authentication mechanisms.
  - Check for reusing session tokens, multiple sessions, password requirements, and reuse of previous passwords.

- **Host-Level Testing:**
  - Identify the web server platform and look for exploits in outdated installs.
  - Check for admin portals and test and default credentials.
  - Search for backup, default, and obsolete files.
  - Check for dangerous HTTP methods and vulnerabilities like Shellshock and Heartbleed.
  - Use Nmap to scan for open ports and services.
  - Assess SSL/TLS settings for weak ciphers and untrusted certificates.
  - Test SSL enforcement to ensure HTTPS areas cannot be accessed via HTTP.

For a comprehensive guide, refer to the OWASP methodology and checklists. For any questions, feel free to contact me on Twitter at @brentwdesign or via email at [your email address].