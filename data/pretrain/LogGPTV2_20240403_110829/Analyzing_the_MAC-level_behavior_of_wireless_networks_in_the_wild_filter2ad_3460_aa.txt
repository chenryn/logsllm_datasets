title:Analyzing the MAC-level behavior of wireless networks in the wild
author:Ratul Mahajan and
Maya Rodrig and
David Wetherall and
John Zahorjan
Analyzing the MAC-level Behavior of Wireless Networks
in the Wild
Ratul Mahajan
Microsoft Research
Maya Rodrig
University of Washington
David Wetherall
University of Washington
John Zahorjan
University of Washington
ABSTRACT
We present Wit, a non-intrusive tool that builds on passive moni-
toring to analyze the detailed MAC-level behavior of operational
wireless networks. Wit uses three processing steps to construct an
enhanced trace of system activity. First, a robust merging proce-
dure combines the necessarily incomplete views from multiple, in-
dependent monitors into a single, more complete trace of wireless
activity. Next, a novel inference engine based on formal language
methods reconstructs packets that were not captured by any moni-
tor and determines whether each packet was received by its destina-
tion. Finally, Wit derives network performance measures from this
enhanced trace; we show how to estimate the number of stations
competing for the medium. We assess Wit with a mix of real traces
and simulation tests. We ﬁnd that merging and inference both sig-
niﬁcantly enhance the originally captured trace. We apply Wit to
multi-monitor traces from a live network to show how it facilitates
802.11 MAC analyses that would otherwise be difﬁcult or rely on
less accurate heuristics.
Categories and Subject Descriptors
C.4 [Performance of systems]: Measurement techniques
General Terms
Measurement, performance
Keywords
Passive monitoring, measurement tool, 802.11 MAC
1.
INTRODUCTION
Measurement-driven analysis of live networks is critical to un-
derstanding and improving their operation (e.g., [3, 28, 13, 18, 22,
24]). In the case of wireless, however, very little detailed informa-
tion is currently available on the performance of real deployments,
even though wireless protocols are a subject of intense research and
standardization [1, 15, 20, 16, 25]. This is particularly surprising
given the abundance of live networks, such as public hotspots, and
the apparent ease with which they can be measured.
We believe that this paradoxical state of affairs is due to fun-
damental challenges in measuring and analyzing live wireless net-
works. For instance, consider the task of determining how often
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
SIGCOMM’06, September 11–15, 2006, Pisa, Italy.
Copyright 2006 ACM 1-59593-308-5/06/0009 ...$5.00.
clients retransmit their packets. This is one basic indicator of wire-
less performance that we may wish to measure. Most studies of op-
erational wireless networks to date are based on SNMP logs from
the APs or packet traces from the wire adjacent to the APs [4, 5,
7, 8, 23, 26]. However, neither method is sufﬁcient for our task.
Traces from wired segments omit information about wireless re-
transmissions altogether. Similarly, AP logs provide coarse infor-
mation on transmissions and receptions of the AP but not on those
of the clients. It is not simply a matter of granularity. Even a com-
plete packet trace from the wireless side of the AP is not sufﬁcient
as it does not reveal client transmissions that the AP did not receive.
A potential solution to this problem is to instrument the entire
network to obtain traces of activity at all the clients and the APs.
This approach has been successful in testbed settings [2, 10, 29].
However, it is impractical for widespread use in operational net-
works that may have many heterogeneous and transient clients be-
longing to different users.
The remaining approach, which we explore in this paper, is to de-
pend on traces obtained via passive monitoring. Here, one or more
nodes in the vicinity of the wireless network record the attributes
of all transmissions that they observe. This approach has the large
practical beneﬁt that it is almost trivial to deploy. Unfortunately,
traces collected using it are limited in several respects. First, they
will necessarily be incomplete, due to packet drops caused by weak
signals and collisions. It is not even easy to estimate how much in-
formation is missing, which renders the trace of unknown quality.
Second, the traces do not record whether the packets were success-
fully received by their destinations. That information is needed to
compute many fundamental performance measures such as recep-
tion probability and throughput. Third, traces only record informa-
tion about packet events and omit other important network char-
acteristics, such as the offered load on the network at any given
instant. It is challenging to estimate these characteristics because,
unlike instrumentation, passive monitoring lacks access to the in-
ternal state of the nodes. These problems are also present in the
wired domain [17], but the magnitude of their effects in the wireless
domain makes them qualitatively different and more challenging.
Our goal is to tackle these challenges and develop sound method-
ologies for analyzing traces collected via passive monitoring of
wireless networks. This lets us apply passive monitoring to live net-
works and investigate questions that are not easy to answer today.
We are particularly interested in moving beyond basic performance
measures (e.g., how often do clients retransmit their packets?) to
higher-level questions concerning the network (e.g., what is the av-
erage asymmetry in the loss ratio between two nodes?) and its
interaction with the protocol (e.g., how does network performance
vary with offered load?).
In this paper, we take our ﬁrst steps toward this goal and present
the design and implementation of a tool called Wit. Wit is composed
of three components that tackle each of the challenges that we iden-
Monitor’s
trace
Merge
Infer
Derive
measures
AP
Monitor
Client
e
m
T
i
pa
pb
pa
pa
pb
pb
pa
pb
Figure 1: The pipeline of our passive monitoring approach.
tify above to reconstruct a detailed record of system-wide behavior.
To help improve the inherently incomplete view of a single moni-
tor, the ﬁrst component merges the independent views of multiple
monitors into a single, consistent view. The second component
uses novel inference procedures based on a formal language model
of protocol interactions to determine whether each packet was re-
ceived by its destination. It also infers and adds to the trace packets
that are missing from the merged trace. The third component de-
rives network-level measures from the enhanced trace. In addition
to simple measures such as packet reception probabilities, it esti-
mates the number of nodes contending for the medium as a mea-
sure of offered load. This characterization has not been previously
achieved to our knowledge, and we expect that future research will
add more techniques to our ﬁnal component.
To evaluate the accuracy and completeness of the trace recon-
structed by Wit, we use a mix of real traces and simulation tests.
We ﬁnd that the independent views of multiple monitors can be
precisely merged, which provides an effective way to gain cover-
age. Inference correctly determines the reception status of packets
in the vast majority of cases and is effective at adding packets that
are not recorded. It also supports estimates of trace completeness.
We ﬁnd that Wit can accurately derive network-level measures, such
as the number of contenders, from the enhanced trace.
To further demonstrate its abilities, we apply Wit to multi-monitor
traces that we collected at the SIGCOMM 2004 conference. We
show how Wit supports the straightforward computation of metrics,
such as packet reception probabilities, in a manner that is more ac-
curate than existing heuristics. We uncover MAC-layer characteris-
tics of this environment that, to our knowledge, cannot be obtained
by other methods. For instance, we ﬁnd that the network was dom-
inated by periods of low contention during which the medium was
poorly utilized even though stations were waiting to transmit pack-
ets. Our analysis suggests that the 802.11 MAC is tuned for high
contention levels that are uncommon for our measured network and
motivates the need for more adaptive MACs.
2. OUR PASSIVE MONITORING APPROACH
To make passive monitoring effective, we develop a three-phase
approach to address each key challenge that we identiﬁed: i) a sin-
gle monitor will miss many transmitted packets; ii) monitors do
not log whether a packet was received by its destination; and iii)
monitors do not log network-level information. Figure 1 shows the
resulting pipeline. The ﬁrst phase uses multiple monitors to capture
more wireless activity and merges the independent views into a sin-
gle, more complete rendition. It must precisely time synchronize
the individual traces and identify and remove duplicate packets.
The second phase infers which packets were received by their
destinations and also infers packets that were not logged by any
monitor – even a dense array of monitors will miss many packets.
This phase uses a formal language technique based on the observa-
tion that, for many packets, the subsequent packet exchanges of the
802.11 protocol reveals both pieces of information.
input
1
2
3
output
Figure 2: Our procedure to merge two traces. The ladders repre-
sent traces, and the shaded boxes represent packets. 1. Identify
common references. 2. Translate timestamps of the second trace.
3. Identify and remove duplicates.
The ﬁnal phase derives network-level measures from the now
enhanced packet trace. In contrast to the ﬁrst two, this phase has an
open-ended goal of deriving all measures that are needed to answer
the questions of interest. Some measures, such as packet reception
probability and throughput, are straightforward to compute, while
others require new techniques. We present a novel technique to
estimate the number of stations contending for the medium. Future
derivations might estimate, for instance, which nodes defer to one
another and detect the presence of hidden terminals.
We describe each phase in more detail below. Their implemen-
tation in Wit is described in the following section.
2.1 Merging
The input to the merging process is a number of packet traces,
each collected by a different monitor. In each, the timestamp on
a packet reﬂects a monitor’s local view of when the packet was
received. The goal of merging is to produce a single, consistent
timeline for all the packets observed across all the monitors, that
is, to eliminate duplicates and to assign coherent timestamps to all
packets regardless of the monitor that captured them.
To be useful, the merged trace must have timestamps accurate to
a few microseconds, the granularity of 802.11 MAC-level opera-
tions. The challenge is that the monitors’ clocks are not synchro-
nized at this granularity, and in fact may have signiﬁcantly different
skews and drifts. Eliminating duplicates is another challenge. Only
a few types of 802.11 packets carry information that is guaranteed
to be unique over even a few milliseconds, and distinct transmis-
sions of bit-for-bit identical packets can happen on timescales of a
few hundred microseconds. The only way to distinguish duplicates
across traces from distinct transmissions is by time. This stresses
the need for accurate timestamps in the merged trace.
We extend the scheme of Yeo et al. [27] to accurately merge
realistic datasets with many long traces in a manner that is robust
to the vagaries of data from live networks. Like Yeo et al., we
leverage “reference” packets that can be reliably identiﬁed as being
identical across monitors. We ﬁrst consider how to merge a pair of
traces and then extend merging to an arbitrary number.
We use the three step process shown in Figure 2 to merge pairs
of traces:
1.
Identify the reference packets common to both monitors.
We use beacons generated by APs as references, since they carry
a unique source MAC address and the 64-bit value of a local, mi-
crosecond resolution timer. This is sufﬁcient in practice, though
other types of packets could be used if necessary.
2. Use the timestamps of the references to translate the time
coordinates of the second monitor into those of the ﬁrst, as shown
in the transition from Step 1 to 2 in Figure 2. We independently
translate each interval spanned by successive pairs of references
with a simple linear function: the timestamp interval in the second
trace is “stretched” or “shrunk” to match the ﬁrst trace, and then
a constant is added to align the two. The resizing reﬂects relative
clock drift and the alignment reﬂects relative skew.
3. Remove duplicates by identifying them as packets of the
same type, with the same source and destination and with times-
tamp difference less than half of the minimum time to transmit a
packet (106 µsecs for 802.11b). This ensures that distinct packets
from the same source are never mistakenly identiﬁed as duplicates.
Linear timestamp translation in Step 2 assumes that the relative
clock drift is constant. If that were true over long intervals, it would
sufﬁce to merge based on only two references. However, we ﬁnd
that even our most reliable time sources exhibit varying relative
drift. This is why we use multiple references and interpolate inde-
pendently between successive pairs, reducing the impact of clock
ﬂuctuations to short intervals. For this to be effective, common ref-
erences must be found with reasonable frequency, which we quan-
tify later.
In contrast, Yeo et al. use linear regression over the
references in the entire trace to translate the time coordinates of the
second monitor [27]. We ﬁnd in Section 4.2 that the precision of
this method degrades over long traces because of non-linearities in
clock behavior.1
In theory, the two-trace procedure could be directly extended to
merge arbitrary numbers by translating the time coordinates of all
the monitors into those of the ﬁrst. Yeo et al. adopt this approach.
In practice, however, we ﬁnd that the scarcity of common refer-
ences is a limiting factor when monitoring a large network – it is
unlikely that any one monitor will have enough references in com-
mon with each of the others. To circumvent this problem, we use a
waterfall merging process: we merge the traces from two monitors,
then add the trace from a third monitor to the merged trace, and
so on. This approach has a somewhat longer running time.2 The
beneﬁt is improved precision: as each additional trace is merged, it
introduces new references into the partially merged result, making
it easier to ﬁnd a set of references shared with the next trace dense
enough to overcome variable clock drift.
2.2 Inferring Missing Information
The inference phase serves two purposes. First, it uses the in-
formation in packets that the monitors did capture to infer at least
some that they did not. It then synthesizes as complete as possible
versions of such packets, improving the effective capture capabil-
ity. In this role, inference is similar to using more monitors and then
merging their views. Second, it introduces an entirely new class of
information to passive traces – an estimate of whether packets were
received by their destination.
The key insight behind our inference technique is that the packets
a node transmits often imply useful information about the packets it
must have received. For instance, an AP sends an ASSOCIATION
RESPONSE only if it recently received an ASSOCIATION RE-
QUEST. If the trace contains a response, but no matching request,
we know that the request was sent and that it was successfully re-
ceived. We also know that the sender of the request was the desti-
1Recent communication with Yeo informed us that they have now
evolved a technique that is similar to ours.
2It takes O(N 2Z) time, where N is the number of traces and
Z the number of packets in each. Simultaneous merging takes
O(N log(N )Z) time.
nation of the response. We can thus reconstruct many key attributes
of the missing packet. While others have used such heuristics [6,
11, 21], we systematically automate this kind of reasoning.
2.2.1 The Formal Language Approach
We cast the inference problem as a language recognition task.
Sentences in the language represent legal sequences of packets ex-
changed by two endpoints that follow the protocol. We call these
packet exchanges conversations and deﬁne them at the granular-
ity of logical 802.11 operations (e.g., all packets involved in an
association attempt, or an exchange involving RTS, CTS, DATA,
and ACKs to successfully convey a single data packet). Although
longer conversations can be deﬁned (e.g., association must precede
data transmission) to enable a slightly larger set of inferences, the
practical beneﬁt of doing so is tiny; the additional inferences are
about relatively rare events.
We view the input trace as interleaved partial sentences from the
language. The interleaving stems from overlapping conversations
between distinct endpoint pairs. A similar view of packet traces
is taken in the context of passive testing of protocol implemen-
tations [14]. Our goal is different, however: to ﬁnd valid sentences
in the language that account for what is observed in the input trace.
Thus, we do not simply ask “Is this sentence in the language?”
Rather, we presume that there was a sentence in the language for
which we see only some of the symbols and ask what complete
sentence it was likely to have been.
We use regular languages as our choice of the formal language
because they are recognizable by ﬁnite state machines (FSMs) which
have efﬁcient implementations. FSMs also afford an efﬁcient way
to extend traditional language recognition in a way that allows sen-
tence reconstruction from partial information, as described below.
Our short conversations can be easily described using FSMs.
2.2.2 Processing the Trace
Assume that the FSM (and so the language) for our protocol has
been deﬁned. To infer missing information using it, we scan the
trace and process each packet as follows:
1. Classify
We map packets to symbols of the language
based primarily on their type. We also use the values of the retry
bit and the fragment number ﬁeld in forming symbols, which pro-
vides some additional leverage in making inferences, at the cost of
a somewhat larger symbol set and FSM. Additionally, we identify
the conversation of the packet based on its source and destination.
For packets without the source ﬁeld (ACKs and CTSs), we deduce
the source from earlier packets. Non-unicast packets are considered
conversations of a single packet.
2. Generate Marker Our language contains an artiﬁcial sym-
bol, which we call the marker. We introduce a marker if the cur-
rently scanned packet indicates that an ongoing conversation has
ended. This occurs under one of the following conditions. First,
the sequence number ﬁeld signals a new conversation between the
endpoints. Second, for non-AP nodes, the other endpoint of the
current packet is different from the earlier one; only APs can have
multiple simultaneous conversations. Third, there is no legal tran-
sition in the FSM for the current symbol; if nodes correctly imple-
ment the 802.11 protocol, our FSM construction (described below)