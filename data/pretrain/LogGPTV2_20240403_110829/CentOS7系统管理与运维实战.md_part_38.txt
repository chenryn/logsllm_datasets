## 优化后的文本

### Pacemaker 和 Corosync 状态
- **Pacemaker**: active/enabled
- **Node2**: Online
- **Node1**: Online
- **Corosync**: active/enabled

**资源状态**
- `http://127.0.0.1/server-status`: Online
- `(ocf::heartbeat:apache)`: Online
- `(ocf::heartbeat:IPaddr2)`: active/enabled

---

## Page 277
为了确保资源在硬件配置较高的服务器上运行，可以设置优先级。如果节点的硬件配置不同，应该调整节点的优先级，让资源运行于硬件配置较好的服务器上，待其失效后再转移至较低配置的服务器上。

**示例9-9：调整启动顺序**
```bash
[root@nodel ~]# pcs resource group add myweb Web
# 将VIP和Web添加到myweb组中
```

**示例9-10：调整Location约束**
```bash
[root@nodel ~]# pcs constraint location Web prefers node2=5
[root@nodel ~]# pcs constraint location Web prefers nodel=10
# 调整Location约束
```

**分配分数**
- `Web allocation score on nodel: 20`
- `Web allocation score on node2: 10`

**注意事项**
- 不应先启动Apache再启用VIP。
- 应先启动VIP，然后再启动Web。

---

## Page 278
**集群配置与验证**

**示例9-11：启动和停止集群**
```bash
[root@nodel ~]# pcs cluster start
# 启动所有集群
[root@nodel ~]# pcs cluster stop
# 停止所有集群
```

**检查集群状态**
```bash
[root@nodel ~]# pcs status
Cluster name: mycluster
Last updated: Sat Apr 25 23:13:26 2015
PCSD Status:
Daemon Status:
```

**禁用fence设备**
```bash
[root@nodel ~]# pcs property set stonith-enabled=false
# 禁用fence设备
```

**关于虚拟fence设备的使用方法可参考相关文档了解。**

---

## Page 279
**接管服务测试**

**示例9-12：重启节点并观察资源接管情况**
```bash
[root@nodel ~]# reboot
# 在节点node1上执行重启操作
```

**验证Apache是否启动**
```bash
[root@node2 ~]# pcs status
...
[root@node2 ~]# ps aux | grep httpd
```

**检查VIP是否启用**
```bash
[root@nodel ~]# ip addr list
inet 192.168.3.87/24 brd 192.168.3.255 scope global dynamic eno16777736
```

---

## Page 280
**Keepalived 概述**

**工作模式**
- **IP层**：以服务器的IP地址是否有效作为服务器工作正常与否的标准。
- **TCP层**：主要以TCP后台服务的状态来确定后端服务器是否工作正常。
- **应用层**：根据用户的设定检查服务器程序的运行状态。

**安装与配置**
**示例9-13：安装Keepalived**
```bash
[root@nodel ~]# tar xvf keepalived-1.2.16.tar.gz
[root@nodel ~]# cd keepalived-1.2.16
[root@nodel ~]# ./configure --prefix=/usr/local/keepalived
[root@nodel ~]# make install
[root@nodel ~]# ln -s /usr/local/keepalived/etc/keepalived.conf /etc/keepalived/keepalived.conf
```

**示例9-14：主节点配置文件**
```bash
vrrp_instance VI_1 {
    state MASTER
    interface eno16777736
    virtual_router_id 51
    priority 100
    advert_int 1
    authentication {
        auth_type PASS
        auth_pass 1234
    }
    virtual_ipaddress {
        192.168.3.118
    }
}
```

**示例9-15：备节点配置文件**
```bash
vrrp_instance VI_1 {
    state BACKUP
    interface eno16777736
    virtual_router_id 51
    priority 90
    advert_int 1
    authentication {
        auth_type PASS
        auth_pass 1234
    }
    virtual_ipaddress {
        192.168.3.118
    }
}
```

---

## Page 281
**Keepalived 启动与测试**

**示例9-16：启动Keepalived**
```bash
[root@nodel ~]# export PATH=/usr/local/keepalived/sbin:$PATH
[root@nodel ~]# keepalived -D -f /etc/keepalived/keepalived.conf
```

**示例9-17：查看服务状态**
```bash
[root@nodel ~]# ip addr list
inet 192.168.3.118/32 scope global eno16777736
```

**示例9-18：故障模拟**
```bash
[root@nodel ~]# reboot
# 主节点重启
[root@node2 ~]# tail -f /var/log/messages
# 查看备节点日志
```

---

## Page 282
**高可用集群软件概述**

**Pacemaker 和 Keepalived**
- **Pacemaker**：用于管理集群资源和服务。
- **Keepalived**：用于检测后端TCP服务的状态，并在服务异常时进行自动切换。

这两种工具在实现高可用性方面各有优势，可以根据实际需求选择合适的工具。

希望这些优化后的文本能够帮助你更好地理解和使用这些技术。