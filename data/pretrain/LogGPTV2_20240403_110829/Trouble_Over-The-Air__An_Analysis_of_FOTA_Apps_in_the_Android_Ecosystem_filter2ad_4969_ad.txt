o
f
n
i
d
e
t
a
l
e
r
s
p
p
A
•
e
g
a
s
u
m
o
R
e
g
a
s
u
m
a
R
•
•
•
•
y
t
i
l
i
b
a
l
i
a
v
a
e
p
y
t
k
r
o
w
t
e
N
•
•
s
s
e
n
t
h
g
i
r
b
m
e
t
s
y
S
•
l
e
v
e
l
y
r
e
t
t
a
B
•
•
t
n
u
o
c
e
g
r
a
h
c
s
i
D
e
m
i
t
g
n
i
n
n
u
R
t
n
u
o
c
e
g
r
a
h
C
o
f
n
i
s
s
e
c
o
r
p
g
n
i
n
n
u
R
o
f
n
i
U
P
C
•
•
•
•
•
s
t
c
a
t
n
o
c
f
o
r
e
b
m
u
N
s
l
l
a
C
f
o
r
e
b
m
u
N
s
m
s
f
o
r
e
b
m
u
N
D
I
E
M
I
S
M
I
•
•
•
•
•
•
I
I
E
M
•
•
•
Table IV: Data sent to the update server in selected FOTA apps.
Package
com.sonyericsson.updatecenter
com.motorola.ccc.ota
com.redstone.ota.ui
com.adups.fota
B. Third-party components
It is common for Android apps—including pre-installed
ones [43]—to embed third-party SDKs (Software Development
Kits) in order to include functionality from external sources,
such as networking support or advertisement and analytics ser-
vices [51], [57]. In Android, however, any component embedded
in an app runs with the same permissions as the host app. As a
result, since FOTA apps are highly privileged (as we will discuss
in §VI-C), the presence of libraries offered by companies
with data-driven business models would be concerning. These
instances might reveal access to sensitive permissions for
secondary purposes like user-tracking or advertising.
We rely on an enhanced version of LibRadar [51] to identify
all embedded libraries in an app. To maximize the soundness
of our results, we only consider those libraries identiﬁed by
LibRadar with a conﬁdence of 100%. We expect FOTA apps
to include SDKs that are non-privacy invasive, such as those
related with development support, network protocols or database
drivers. Therefore, we report only those SDKs that are related
to analytics services and advertisement libraries, i.e., those more
likely to collect personal data for secondary purposes [57].
Table V summarizes our ﬁndings. In total, we ﬁnd 8 SDKs
related to social networks, user tracking, and advertisement
in 171 (10%) FOTA apps. While this number is lower in
comparison to what has been reported for “regular” Android
apps [52], [57], it is still important to study the presence
of SDKs in FOTA apps because of their privileged position.
The most common SDK is Firebase, which presents a lot
of different functionalities (from analytics support to storage
related features). On its own terms of service, Firebase
declares that it collects personal data and that it acts as a data
processor [46] (concrete wording can be found in Appendix D).
Finding privacy policies from pre-installed apps is hard, as
they cannot be found on app markets and they often lack
their own policy, in fact, we could not access them for this
project. Therefore, users will have a hard time to learn that
this type of third-party components are part of FOTA apps.
Interestingly, we ﬁnd that Google Ads is also featured in FOTA
apps, suggesting that some providers might try to generate
advertisement revenue. We do a manual review of several
versions of the com.motorola.ccc.ota OEM FOTA app in
which Google Ads is embedded. We ﬁnd that the app includes
functionality from the Google Mobile Services SDK which
SDK
Firebase
Google Ads
Umeng
SinaWeibo
Tencent
Millennial Media
New Relic
Fabric
# apps
133
23
8
6
4
1
1
1
Type
Development, Analytics, Push, Storage
Advertisement
Analytics
Social Media
Social Media
Advertisement
Analytics
Analytics
Table V: Social networks, analytics and advertisement SDKs
relies on some code from the Google Ads SDK. We also ﬁnd
SDKs that are more common in the Asian developer ecosystem,
such as Umeng or the social network SinaWeibo. We ﬁnd that
these are more prevalent in apps found in phones from Lenovo
and Nubia. Manual analysis of the app’s code suggests that the
OEM FOTA app com.lenovo.ota uses features related to the
social network capabilities of SinaWeibo (e.g., parsing an access
token) and that the OEM FOTA app cn.nubia.systemupdate
uses the analytics capabilities of Umeng. Manual analysis
also suggests that the com.coloros.sau OEM app uses the
crash report capabilities of the Tencent SDK. We next analyze
whether these SDKs request access to dangerous permissions
or if they piggyback from those requested by the host app.
C. FOTA Privileges
FOTA apps come pre-installed in the device system partition.
This means that they can enjoy system privileges—i.e., they
cannot be easily uninstalled and they can have access to system
protected data and resources [43]. In order to understand the
privileged access that FOTA apps have, we ﬁrst analyze how
common it is for apps to have the same user ID (UID). Android
allows apps with the same UID to access each other’s data
and run in the same process, provided that they are signed
with the same certiﬁcate. Analyzing shared UIDs is relevant
since it implies that FOTA apps might be part of a larger code
base with access to more functions and permissions, including
privileged ones. Then, we analyze the type of permissions that
are requested by FOTA apps (and their embedded SDKs) as a
proxy to understand the type of data that they might collect.
We extract requested and declared permissions and shared UID
from the app’s manifest.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:11:06 UTC from IEEE Xplore.  Restrictions apply. 
1613
Nevertheless, there are other permissions that can be considered
potentially dangerous for user privacy, and that might not be
part of the expected functionality of a FOTA app.
Dangerous permissions [22] are among the most requested
by FOTA apps. This is worrisome as from Android 8,
manufacturers can “whitelist” privileged apps and list per-
missions that should be granted to them without user in-
teraction [24]. The ﬁrst column in Table VI shows, for
some examples of dangerous permissions, the percentage of
apps that request them. In particular, 21% of FOTA apps
request access to ACCESS_COARSE_LOCATION and 15% to
ACCESS_FINE_LOCATION. These permissions could give apps
the ability to customize the list of apps to install based on the
location of the users. We also ﬁnd that 70% of FOTA apps
request the READ_PHONE_STATE permission, which gives access
to the IMEI (a unique identiﬁer that facilitates tracking).
To better understand the intended use (i.e., primary or
secondary usages) that FOTA apps make of each request, we
manually analyze the code that invokes permission-protected
methods. Interestingly, some FOTA apps (i.e., “test/engineer
mode” apps) request a high number of permissions because they
have the ability to test different functionalities from the phone
(e.g., the GPS manager, the camera or call features). Examples
of such apps are com.vivo.bsptest, com.lge.hiddenmenu
and club.dexp.dmfct2, which are all OEM FOTA apps.2
While these behaviors are not privacy invasive, we also ﬁnd ex-
amples in which access to sensitive data might result in privacy
risks for users. For instance, the com.redstone.ota.ui SFD
app includes a JSON with information such as the location
of the user, its mobile carrier, or the system language when
querying an online server for sync information.
We study whether these permissions are requested for
secondary purposes (e.g., user-tracking or advertising via
third-party SDKs). For the automatic analysis we rely on
Cartographer [33] to analyze whether a given API call is
triggered by the app’s code or by a third-party SDK. Then,
we map these API calls to the permission that enables them
by using custom mappings that complement the mappings
generated by Axplorer [32]. Speciﬁcally, we fetch mappings by
parsing Android Studio [29] and the @RequiresPermission
tag present in the AOSP code [26], [27]. Our analysis shows
that, even though we ﬁnd evidence of third-party SDKs related
to advertisement and tracking in FOTA apps, these rarely
access any dangerous permissions. Table VI shows for each
dangerous permission found in FOTA apps, how often it is
used in the app’s code only, on code from a third-party SDK
only, or in both. We also show between brackets how many
of these SDKs are related to tracking services (i.e., social
networks, analytics and advertisement SDKs). We ﬁnd that