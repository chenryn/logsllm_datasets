### Table IV: Data Sent to the Update Server in Selected FOTA Apps

- **Package:**
  - `com.sonyericsson.updatecenter`
  - `com.motorola.ccc.ota`
  - `com.redstone.ota.ui`
  - `com.adups.fota`

### B. Third-Party Components

It is common for Android apps, including pre-installed ones [43], to embed third-party SDKs (Software Development Kits) to incorporate functionality from external sources, such as networking support, advertisement, and analytics services [51, 57]. In Android, any component embedded in an app runs with the same permissions as the host app. Since FOTA apps are highly privileged (as discussed in Â§VI-C), the presence of libraries from companies with data-driven business models is concerning. These instances might reveal access to sensitive permissions for secondary purposes like user tracking or advertising.

We use an enhanced version of LibRadar [51] to identify all embedded libraries in an app. To ensure the accuracy of our results, we only consider libraries identified by LibRadar with 100% confidence. We expect FOTA apps to include non-privacy-invasive SDKs, such as those related to development support, network protocols, or database drivers. Therefore, we report only those SDKs related to analytics services and advertisement libraries, which are more likely to collect personal data for secondary purposes [57].

**Table V: Social Networks, Analytics, and Advertisement SDKs**

| SDK                | # Apps | Type                                  |
|--------------------|--------|---------------------------------------|
| Firebase           | 133    | Development, Analytics, Push, Storage |
| Google Ads         | 23     | Advertisement                         |
| Umeng              | 8      | Analytics                             |
| SinaWeibo          | 6      | Social Media                          |
| Tencent            | 4      | Social Media                          |
| Millennial Media   | 1      | Advertisement                         |
| New Relic          | 1      | Analytics                             |
| Fabric             | 1      | Analytics                             |

In total, we find 8 SDKs related to social networks, user tracking, and advertisement in 171 (10%) FOTA apps. While this number is lower compared to what has been reported for "regular" Android apps [52, 57], it is still important to study the presence of SDKs in FOTA apps due to their privileged position.

The most common SDK is Firebase, which offers a wide range of functionalities, from analytics support to storage-related features. According to its terms of service, Firebase collects personal data and acts as a data processor [46] (see Appendix D for specific wording). Finding privacy policies for pre-installed apps is challenging, as they are not available on app markets and often lack their own policies. This makes it difficult for users to learn about the presence of these third-party components in FOTA apps.

Interestingly, we also find that Google Ads is included in some FOTA apps, suggesting that some providers may be generating advertisement revenue. We manually reviewed several versions of the `com.motorola.ccc.ota` OEM FOTA app, which includes the Google Mobile Services SDK, which in turn relies on code from the Google Ads SDK. We also found SDKs more common in the Asian developer ecosystem, such as Umeng and SinaWeibo, which are prevalent in apps found in phones from Lenovo and Nubia. Manual analysis of the app's code suggests that the OEM FOTA app `com.lenovo.ota` uses features related to the social network capabilities of SinaWeibo (e.g., parsing an access token) and that the OEM FOTA app `cn.nubia.systemupdate` uses the analytics capabilities of Umeng. Additionally, the `com.coloros.sau` OEM app uses the crash report capabilities of the Tencent SDK.

Next, we analyze whether these SDKs request access to dangerous permissions or if they piggyback on those requested by the host app.

### C. FOTA Privileges

FOTA apps come pre-installed in the device system partition, giving them system privileges. This means they cannot be easily uninstalled and have access to system-protected data and resources [43]. To understand the privileged access that FOTA apps have, we first analyze how common it is for apps to share the same user ID (UID). In Android, apps with the same UID can access each other's data and run in the same process if they are signed with the same certificate. Analyzing shared UIDs is relevant because it implies that FOTA apps might be part of a larger code base with access to more functions and permissions, including privileged ones. We then analyze the type of permissions requested by FOTA apps (and their embedded SDKs) to understand the type of data they might collect. We extract requested and declared permissions and shared UIDs from the app's manifest.

**Table VI: Dangerous Permissions in FOTA Apps**

| Permission                    | % of Apps Requesting | App Code Only | Third-Party SDK Only | Both (SDKs Related to Tracking) |
|-------------------------------|----------------------|---------------|----------------------|---------------------------------|
| ACCESS_COARSE_LOCATION        | 21%                  |               |                      |                                 |
| ACCESS_FINE_LOCATION          | 15%                  |               |                      |                                 |
| READ_PHONE_STATE              | 70%                  |               |                      |                                 |

Dangerous permissions [22] are among the most requested by FOTA apps. This is concerning because, starting from Android 8, manufacturers can "whitelist" privileged apps and list permissions that should be granted without user interaction [24]. For example, 21% of FOTA apps request `ACCESS_COARSE_LOCATION`, and 15% request `ACCESS_FINE_LOCATION`. These permissions could allow apps to customize the list of apps to install based on the user's location. Additionally, 70% of FOTA apps request `READ_PHONE_STATE`, which provides access to the IMEI, a unique identifier that facilitates tracking.

To better understand the intended use (i.e., primary or secondary usages) of each permission request, we manually analyzed the code that invokes permission-protected methods. Some FOTA apps, such as "test/engineer mode" apps, request a high number of permissions because they can test different phone functionalities (e.g., GPS, camera, call features). Examples include `com.vivo.bsptest`, `com.lge.hiddenmenu`, and `club.dexp.dmfct2`, which are all OEM FOTA apps. While these behaviors are not privacy-invasive, we also found examples where access to sensitive data could result in privacy risks for users. For instance, the `com.redstone.ota.ui` SFD app includes a JSON with information such as the user's location, mobile carrier, or system language when querying an online server for sync information.

We studied whether these permissions are requested for secondary purposes (e.g., user tracking or advertising via third-party SDKs). For the automatic analysis, we used Cartographer [33] to determine whether a given API call is triggered by the app's code or by a third-party SDK. We then mapped these API calls to the permissions that enable them using custom mappings that complement the mappings generated by Axplorer [32]. Specifically, we fetched mappings by parsing Android Studio [29] and the `@RequiresPermission` tag present in the AOSP code [26, 27]. Our analysis shows that, although we found evidence of third-party SDKs related to advertisement and tracking in FOTA apps, these rarely access any dangerous permissions. Table VI shows, for each dangerous permission found in FOTA apps, how often it is used in the app's code only, on code from a third-party SDK only, or in both. We also show between brackets how many of these SDKs are related to tracking services (i.e., social networks, analytics, and advertisement SDKs). We find that:

[Continue with the rest of the analysis and findings]

---

This optimized version of the text is more structured, clear, and professional, making it easier to read and understand.