# Hyper-V的基本知识学习
##### 译文声明
本文是翻译文章，文章原作者 ernw，文章来源：static.ernw.de
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
最近看了BlackHat2018的议题[《Hardening Hyper-V through offensive security
research》](https://i.blackhat.com/us-18/Thu-August-9/us-18-Rabet-Hardening-Hyper-V-Through-Offensive-Security-Research.pdf)，觉得很有兴趣，查找相关资料，发现了一篇ERNW关于hyper-V研究的文章[《Security Assessment of
Microsoft
Hyper-V》](https://static.ernw.de/whitepaper/ERNW_Newsletter_43_HyperV_en.pdf)，虽然有些信息相对较老，但是作为hyper-v入门资料，提供的思路仍然是比较不错的，翻译记录一下共同学习。
## 1 引言
Hyper-V是微软的第一个裸机hypervisor，也是第一个完全支持x86-64体系结构的本地hypervisor。作为类似的虚拟化解决方案（如vmware
esxi、xen或kvm）的竞争替代品，Hyper-V在市场上占有很大的份额，并且由于其易与Microsoft解决方案集成，市场份额在不断增加。除了这种企业定位之外，Hyper-V还应用于各种其他平台，如Microsoft Azure或Xbox One游戏控制台。
尽管Hyper-V越来越重要，但到目前为止，公开提供的研究很少。在市场上运行了近六年之后，只有少数拒绝服务漏洞得到了修补。尽管微软的SDL在生产安全软件方面有着令人印象深刻的记录，但对于如此复杂的软件来说，这样低的漏洞数量似乎是不切实际的。
本文描述了我们关于Hyper-V防止恶意的非特权来宾VM攻击，这方面的安全性研究。我们关注内存破坏、协议解析和设计缺陷等相关的漏洞，但没有对诸如侧通道、定时攻击或周围环境非安全管理等问题进行研究。
本文的组织结构如下：第2章给出了有关Hyper-V体系结构的技术概述，包括其对设备仿真和合成设备的支持。此外，我们还将重点介绍如何在Azure环境中使用Hyper-V，及其随之而来的安全需求。第三章从恶意虚拟机的角度讨论了所存在的攻击面。这些攻击面将被分解为单独的功能，并描述为攻击者可用的输入向量以及我们评估这些向量的方法。第4章讨论了我们研究所关注的结果：hyper-v的hypercall功能中的重要漏洞ms13-092。第5章描述了进一步研究所关注的目标，并得出最终结论。
## 2 Hyper-V的架构
该章将详细描述Hyper-V的内部架构，其中所涵盖的术语、组件和内部架构会在第3章的攻击面分析中有所涉及。
###  2.1 概述
Hyper-V是I型虚拟机管理程序（hypervisor），因此可以直接在不依赖底层操作系统的硬件上运行。然而可能另许多用户感到诧异的是，Hyper-V又是通过常规Windows服务中的添加附加角色来安装的。
其实在安装过程中，Windows操作系统将变为一个Hyper-V partition（高权限），并在重启后由hypervisor所管理。
图1 高级架构
图1中显示了Hyper-V架构的概况。 微软将虚拟化操作系统分区分为root partition（特权）和child partition（非特权）。root
partition受hypervisor完全信任，负责管理和配置所有其他partition（类似于Xen的Dom0）。Hyper-V支持对未修改（无Hyper-V接口）操作系统的虚拟化，但运行时操作系统并不知道自身处于虚拟环境中，这种情况被称为Unenlightened 。
为了实现这种情况，hypervisor透明地模拟了现代操作系统所支持的标准设备。
另一种Enlightened操作系统由于支持Hyper-V接口，可以利用更多的高级特性来提高性能。 Hypercalls是公开的Hyper-V
API，通过使用Hypercalls可以直接与hypervisor通信，该机制类似于操作系统内核提供的systemcall接口。
此外，VMBus机制可以用于root partition和child partition之间的直接高速通信。
这些特性主要在合成设备中，能够被Enlightened partition所使用的，且快于模拟设备。
由于微软决定尽可能减少Hyper-V hypervisor的大小，所以大部分功能都是外包给root
partition，这其中包括了模拟设备、合成设备和所有高级管理接口。
该决定将hypervisor代码的自身复杂性显着地降低到大约100000行。但是，对整个Hyper-V环境的安全性影响却有限，稍后将对此进行演示。
###  2.2 VMWP, VSC和VSP
图2 Hyper-V组件
图2中显示了root partition和Enlightened child partition内的核心组件。对于每个child
partition而言，在root
partition中都运行了一个与之相应的普通用户空间进程，即虚拟机工作进程（VMWP）。该工作进程执行快照或迁移等管理职责，但同时它也实现了上述设备和一些非性能关键的合成设备的仿真。
在用户空间进程中实现这些功能有许多优点：首先，由于bugs和高资源消耗所导致的崩溃，不会影响到root
partition、其余VMs以及hypervisor整体的稳定性；其次，VMWP可以在低权限中执行，这意味着攻击者想要利用设备模拟层中漏洞的，还需要在root
partition中提权。但是，由于额外上下文切换的需要，这种用户空间实现方式并不适用于性能重要的设备，如网络和存储等。
此类性能重要的设备在虚拟化服务提供者（VSP）中实现。 VSP是在root
partition的内核中运行的驱动程序，因此是攻击者非常感兴趣的目标。child
partition中类似VSP功能的是虚拟化服务客户端（VSC）。所有现代版本的Windows都已包含这些内核驱动程序，并为合成设备提供操作系统支
持。此外，Linux和FreeBSD包含由Microsoft工程师提供的多个VSC的开源实现。对于Linux，此代码称为Linux Integration
Services，现在直接包含在kernel tree中。不过，在Github仓库中也可以找到具有其他功能的更新版本。
​ 仅仅有设备支持对于虚拟化解决方案来说是不够的，hypervisor的核心任务是CPU和内存的虚拟化。与几乎所有的x86-64
hypervisor一样，Hyper-V使用硬件辅助虚拟化。这意味着Hyper-V使用Intel VT和AMD-V等扩展的rtualization指令集。由于我们所有的研究都是在英特尔硬件上进行的，因此我们将在本文中使用英特尔的特定功能术语。
###  2.3 硬件辅助虚拟化
Intel VT添加了两种不同处理器操作模式：VMX root模式和VMX non-root模式。hypervisor运行在VMX
root模式，所有的分区都运行在non-root模式。
在非root模式下运行的VM不会受到任何性能影响，但某些事件可能会触发上下文从而切换到hypervisor。这些上下文切换称为VM
exits，可能由于某些诸如执行某些指令（如中断处理）或访问特殊系统寄存器等原因而产生。
英特尔VT的目标之一是对客户操作系统透明。因此，由指令或系统寄存器访问触发的VM exits需要hypervisor完全模拟其行为。虽然这对于许多VM
exits的原因来说无足轻重，但对于完全支持x86架构的所有极端情况来说却是困难且易出错。完整讨论硬件辅助虚拟化的安全问题超出了本文的范围，因此后面的部分将只详细地描述VT体系结构的几个属性。
尽管英特尔VT设计为对客户操作系统透明，但Hyper-V对enlightened partition的支持要求虚拟化操作系统可以检查它是否在Hyper-V中运行。这需要下面部分所描述的专用接口发现机制来提供支持。
###  2.4 接口发现
当虚拟分区执行CPUID指令时，将触发VM exit，Hyper-V通过添加Hyper-V特定信息来修改典型的CPUID返回值。 EAX =
1的CPUID调用将设置ECX寄存器与MSB。 这表明hypervisor是存在的。
可以通过执行输入值介于0x40000000和0x40000006之间的CPUID来查询有关Hyper-V版本和分区权限的更多信息。
图3显示了在Windows Server 2012 Hyper-V系统上执行小程序的输出。
图3 CPUID指令
有趣的是，返回的信息包括Hyper-V的确切版本，以及调用分区的超级调用权限。 这些详细信息可以帮助攻击者确定是否存在某些漏洞，并对攻击进行定位。
此外，在Azure VM中使用此接口发现机制会返回非常有趣的结果，如下一节中所述。
###  2.5 Azure Hypervisor=Hyper-V？
正式地说，Microsoft Azure云运行在称为“Azure hypervisor”的hypervisor上，该管理程序与Hyper-V不同。
但是，即使粗略地看一下Azure VM，也会发现这两个hypervisor至少具有很强的相关性。 图4显示了Azure
VM的屏幕截图，其中运行标准Hyper-V VSC服务，并在Azure VM中执行CPUID指令。
图4 Azure中的Hyper-V集成服务和Azure中的CPUID指令
此外，我们可以使用上一节中讨论的接口发现机制。 图5显示了CPUID命令的输出：唯一可识别的差异在Service Pack和服务分支编号中。
甚至分区权限也与默认Hyper-V VM的权限相同。
从工程角度来看，在Hyper-V和Azure之间共享代码库是合乎情理的。
对于针对Azure的安全研究人员或恶意攻击者而言，在离线分析hypervisor方面有巨大优势。 通过专注于与Azure相关的Hyper-V攻击面，发现对Azure云产生严重影响漏洞的机会非常高。
###  2.6信息来源
尽管Hyper-V是一种专有软件产品，但有一些公共信息源可用于更好地理解其实现：
[hypervisor顶级功能规范](https://docs.microsoft.com/en-us/virtualization/hyper-v-on-windows/reference/tlfs)：此规范包括对Hypercall API和接口发现机制的详细讨论。
[专利申请](http://www.patentsencyclopedia.com/app/20120084517)：多个公共专利申请描述了Hyper-V的实现细节。 这包括用于Child-Parent通信的机制以及协议规范。
虽然与普通技术文档相比，大多数应用程序都很难阅读，但它们仍然有助于理解内部命名和高级架构。
[Linux集成服务](https://github.com/LIS)：如前所述，Linux集成服务是VSC，VMBus和Linux的hypercall
API的开源实现。 它们简化了Hyper-V这些部分中实现细节的理解，在开发评估和攻击这些API的工具时非常有用。
[Singularity头文件](https://archive.codeplex.com/?p=singularity)：Singularity是由Microsoft
Research开发的开源研究操作系统。 其SVN存储库包含许多专有的Windows头文件，包括用于Microsoft Hyper-V来宾界面的多个。
[通用标准认证文件](http://www.commoncriteriaportal.org/files/epfiles/0570b_pdf.pdf)：通用标准认证要求提供全面的文件。
该文档是公开的。
二进制文件：当然，可以从实现本身中提取最准确和最详细的信息。 表1列出了我们在研究期间分析的几个文件。 下一节将介绍逆转这些文件所涉及的一些挑战。
文件名 | 描述  