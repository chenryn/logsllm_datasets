### 一、前言
前几天全国大学生信息安全竞赛初赛如期进行，在这次比赛中也看到了区块链题目的身影。所以我将题目拿来进行分析，并为后续的比赛赛题提供一些分析思路。
由于本次比赛我并没有参加，所以我并没有Flag等相关信息，但是我拿到了比赛中的相关文件以及合约地址并在此基础上进行的详细分析，希望能帮助到进行研究的同学。
### 二、题目分析
拿到题目后，我们只得到了两个内容，一个是合约的地址，一个是`broken.so`。
    pragma solidity ^0.4.24;
    contract DaysBank {
        mapping(address => uint) public balanceOf;
        mapping(address => uint) public gift;
        address owner;
        constructor()public{
            owner = msg.sender;
        }
        event SendFlag(uint256 flagnum, string b64email);
        function payforflag(string b64email) public {
            require(balanceOf[msg.sender] >= 10000);
            emit SendFlag(1,b64email);
        }
首先我们看这个合约文件。合约开始定义了两个mapping变量——`balanceOf
与gift`，之后为构造函数，以及发送flag的事件。当我们调用`payforflag`函数并传入使用base64加密的邮件地址之后，需要满足当前账户的余额比10000多。
由这第一手信息我们可以进行一些简单的猜想。这道题目需要领自己的余额大于10000，只有这样才能购买flag。这也是很常见的题目类型。而这个题目十分设计的还是十分巧妙的，我们接着向下看。
根据上面的合约代码，我们并不能得到更多的有用信息。然而此时我们就需要利用合约地址来进一步分析。
此处合约地址为：`0x455541c3e9179a6cd8C418142855d894e11A288c`。
我们访问公链信息看看是否能够访问到有价值的信息：
发现出题人并没有公开源代码，只有ABI码，此时我们只能根据此来进行合约逆向来寻找更有用的解题思路。
在此网站中进行逆向分析后，我们得到如下代码：
    contract Contract {
        function main() {
            memory[0x40:0x60] = 0x80;
            if (msg.data.length  storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }
            var var0 = 0xb1bc9a9c599feac73a94c3ba415fa0b75cbe44496bfda818a9b4a689efb7adba;
            var var1 = 0x01;
            var temp0 = arg0;
            var var2 = temp0;
            var temp1 = memory[0x40:0x60];
            var var3 = temp1;
            memory[var3:var3 + 0x20] = var1;
            var temp2 = var3 + 0x20;
            var var4 = temp2;
            var temp3 = var4 + 0x20;
            memory[var4:var4 + 0x20] = temp3 - var3;
            memory[temp3:temp3 + 0x20] = memory[var2:var2 + 0x20];
            var var5 = temp3 + 0x20;