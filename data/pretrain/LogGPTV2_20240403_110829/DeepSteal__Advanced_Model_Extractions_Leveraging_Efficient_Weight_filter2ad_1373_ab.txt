neural network.
In the second approach (i.e., learning), Papernot et. al [18]
ﬁrst proposed substitute model neural network training using
input and output pairs of a victim DNN model to mount trans-
ferable adversarial input attack. In contrast, recent works [11]–
[17], [41] aim to achieve high model accuracy or ﬁdelity on a
task using active learning methods. If the attacker prioritizes
task accuracy, then the goal is to construct ˆMθ such that
the probability of [arg max ˆM (x) == y] (i.e., true label) is
being maximized. As for ﬁdelity extraction, given a similarity
function S(.), the goal is to construct a model ˆMθ such that the
similarity index S( ˆMθ(x), Mθ(x)) between the output of the
victim and substitute model is maximized. One of the major
drawbacks of the learning-based model extraction approach is
the requirement of excessive input query and access to the
victim model’s output score/predictions.
TABLE I: Summary of the existing model extraction methods.
Type
Attack
Goal
Direct/Mathematical Recovery
Active Learning/Learning
Side channel & Learning
[11], [19], [20], [40]
[11]–[18], [41]
[25]–[29], [42]–[45]
Functionally Equivalent
Task Accuracy/Fidelity
Functionally Equivalent/Fidelity
Side Channel Attacks on DNNs. There has been a large
body of studies on hardware/microarchitecture side channel
exploitation where attackers can leak conﬁdential system infor-
mation through power, EM, and timing information on various
platforms [21], [46]–[50]. Recent works have demonstrated
that such attack vectors can also be applied to exﬁltrate
sensitive DNN information [25]–[28], [42]–[44]. Among the
existing techniques, side channel attack is a more practical
strategy to steal sensitive information about a deeper (i.e.,
many layers) victim model. Typically, the goal of side channel
attack is to produce a functionally equivalent model or achieve
high ﬁdelity on a dataset. To achieve this, attacker often
supplements side channel attacks with a learning scheme to
train a substitute model using the leaked parameter infor-
mation. This substitute model can later generate adversarial
input samples with high transferable properties to attack the
victim model more efﬁciently [28]. Note that
these side
channel attacks primarily recover model architecture or hy-
perparameters. However, to date, only a limited number of
studies have explored the extraction of model parameters
(i.e., weights) in DNN models. Recent studies on physical
side channels have exhibited successful exﬁltration of model
Fig. 1: Data dependency for inducing a rowhammer fault.
Here, based on the presence of bit ﬂip in the attacker-
controlled vulnerable bit in the target row (Tr), data from
adjacent row from victim program can be inferred.
parameter information, including EM side channels [27] and
PCI-e bus snooping [29]. These works assume the attacker has
physical access to the target machines to enable hardware-
based probing or snooping, which may not be practical for
remote exploitation of platforms such as cloud services. The
goal of this work is to investigate the possibility of exploiting
rowhammer-based side channels to perform remote stealing
of model weights, and explore ways to generate a substitute
model with high accuracy and high ﬁdelity on a task. Finally,
such a substitute model can later generate adversarial samples
with high transferable properties to the victim model.
B. Rowhammer Attacks
Rowhammer is a software-induced fault attack that exploits
DRAM disturbance errors via user-space applications [9].
Speciﬁcally, it has been shown that accesses (i.e., activations)
to certain DRAM rows can introduce electrical disturbance to
the DRAM cells in the neighboring rows, which accelerates the
leakage of their charges in the capacitors [9], [51]. An attacker
can intentionally activate particular DRAM rows (whose data
belongs to the attacker) frequently enough (i.e., hammering) to
eventually cause bit ﬂips in a victim’s address space. Such at-
tacks have been successfully demonstrated on commercial-off-
the-shelf DRAM modules even with the presence of ECC fea-
tures [52], [53]. There are mainly three hammering techniques
proposed in the literature: a) double-sided hammering [8],
[9], [51], [53], [54]: where two aggressor rows are frequently
activated to induce fault in the middle row b) single-sided
hammering [54]: where one adjacent row to the target row
and another random row are activated repeatedly; and c) one-
sided hammering [52]: where one periodically-accessed row
causes repetitive row activations under the close-page DRAM
policy. Among all techniques, double-sided hammering is the
most effective in inducing DRAM faults since it introduces
the strongest disturbance.
There is a large body of works demonstrating many variants
of rowhammer attacks. Most of them focus on tampering
the integrity of systems, including privilege escalations [54],
system denial of service [55] and more recently faulting DNN
model parameters [37], [56]. Recently, RAMBleed [7] reveals
that
the rowhammer fault characteristic can be leveraged
to carry out information leakage attacks that directly infer
victim secrets in memory. This attack leverages the fact that a
column-wise data dependence is required to successfully ﬂip
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:59:25 UTC from IEEE Xplore.  Restrictions apply. 
1159
a bit for a known vulnerable memory cell. Notably, under
double-sided hammering, a bit ﬂip for a vulnerable cell can
succeed with high conﬁdence if its upper and lower bits in the
same column (e.g., in the aggressor rows) store the opposite
bits (1-0-1 or 0-1-0), or fail if such pattern is not in place.
Figure 1 illustrates such a data dependency for cells with bit
ﬂip vulnerability (in the 0 → 1 direction). As we can see,
for the victim page in the middle with a vulnerable bit set to
‘0’, a bit ﬂip would only occur if the direct top and bottom
bits are set to ‘1s’, thus achieving the column-wise striped
pattern. In RAMBleed, the attacker places his own page in
the middle row that has the vulnerable cell, and manages
to trigger the placement of two copies of a victim’s page
in the corresponding aggressor rows. By observing whether
a bit ﬂip occurs in attacker’s pages after hammering,
the
adversary can infer the secretive bit (i.e., RSA keys). We note
that exploitation of rowhammer in the domain of information
leakage opens new direction in terms of information security
beyond the scope of integrity tampering.
III. THREAT MODEL
The attacker targets on exﬁltrating internal information (i.e.,
model weights) from deep learning systems by exploiting the
underlying hardware fault vulnerabilities in modern computing
systems. We assume that the deep learning system is deployed
in a resource-sharing environment
to offer ML inference
service. Such application paradigm is becoming popular due
to the prevalence of machine-learning-as-a-service (MLaaS)
platforms [57]. The attacker can control a user-space un-
privileged process that runs on the machine where the victim
DNN service is deployed. Our proposed framework manifest
as a semi-black box attack where the adversary does not have
any prior knowledge of the model parameters. However, the
attacker is aware of some key model architecture informa-
tion including model topology and layer sizes. We note that
such an assumption is legitimate, as prior works demonstrate
many practical ways to recover model architecture information
through various side channel exploitation (e.g., via caches [5],
memory bus [28] and EM [26]).
In this work, we leverage the rowhammer fault attack
vector that commonly exists in today’s DRAM-based memory
systems as the side channel [7]. Speciﬁcally,
the attacker
takes advantage of the fact that bit ﬂip in vulnerable DRAM
cells only occurs when the column-wise bit striping pattern
exists in double-sided rowhammering. By leveraging such data
dependency, the attacker can infer bits in the aggressor rows
by observing if a bit ﬂip occurs in his own address space.
In other words, the attacker does not directly tamper with the
victim’s memory (as shown in most traditional rowhammer
attacks). The attacker may share certain read-only memory
together with the victim DNN (e.g., ML platform binaries)
either through library sharing or advanced memory deduplica-
tion feature supported in modern OS [58]. We assume that
proper conﬁnement mechanism is put in place to disallow
direct access to data across processes. We further assume
that the operating system and the hypervisor are benign, and
appropriate kernel-space protection mechanisms are deployed
to avoid direct tampering of kernel structures [59].
For substitute model training, as depicted in Table II, we
assume the attacker has no knowledge of gradients and is
denied access to DNN output scores/predictions. Meanwhile,
similar to recent related works
[60], [61], we assume the
attacker has access to a publicly available portion (e.g., ≤
10%) of the labeled training dataset.
TABLE II: List of information accessible to the attacker for
substitute model training.
Attacker Information
Accessible
1. DNN Architecture
2. HammerLeak recovered weight bits
3. Gradient Computation
4. Train/Test Data
4. Victim model Output
5. A portion of publicly available data (≤ 10%)
(cid:2)
(cid:2)



(cid:2)
Fig. 2: Overview of the DeepSteal attack framework. Stage-
1: exﬁltrating DNN partial weight bits efﬁciently through
exploiting memory fault vulnerabilities (HammerLeak). Stage-
2: With the recovered bits, training a substitute model using
Mean Clustering weight penalty.
IV. OVERVIEW OF DEEPSTEAL
In this work, we propose an advanced model extraction
attack framework through efﬁcient weight bits stealing in
memories. An overview of our proposed attack framework,
DeepSteal, is shown in Figure 2. It has two key components:
i) an efﬁcient rowhammer-based weight-stealing side channel
module HammerLeak, and ii) a substitute model
training
mechanism with novel Mean Clustering loss penalty. At stage-
1 in Figure 2, we mount the HammerLeak attack on inference
infrastructure (i.e., a remote machine running the target DNN
inference service) to recover partial weight bits. We continue
the HammerLeak for many rounds until the desired portion
of weight bits is recovered. Once HammerLeak completes, at
stage-2, our goal is to use the leaked weight bit information
and generate a substitute prototype of the victim model. To
achieve this, we propose a novel neural network training
algorithm that constrains the trained substitute model weight
parameters to be as close as possible to the recovered partial
weight info, as well as minimize the accuracy loss. The learned
substitute model will pose the following properties: i) having
comparable test accuracy as the victim model; ii) exhibiting
high ﬁdelity and iii) can be used to generate extremely strong
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:59:25 UTC from IEEE Xplore.  Restrictions apply. 
1160
Fig. 3: HammerLeak attack leaking victim secrets using single
victim page. (a) Bit ﬂip observed when victim’s bit is 1, (b)
Bit ﬂip not observed when victim’s bit is 0.
(cid:9)(cid:16)(cid:12)(cid:22)(cid:16)(cid:19)(cid:1)(cid:7)(cid:10)(cid:15)(cid:14)
(cid:1)
(cid:8)(cid:21)(cid:4)
(cid:8)(cid:21)(cid:5)
(cid:2)
(cid:2)(cid:11)(cid:3)
(cid:1)
(cid:1)
(cid:2)(cid:10)(cid:3)
(cid:6)(cid:22)(cid:22)(cid:10)(cid:12)(cid:17)(cid:14)(cid:21)(cid:1)(cid:7)(cid:10)(cid:15)(cid:14)
(cid:1)(cid:1)
(cid:8)(cid:21)(cid:4)
(cid:1)
(cid:8)(cid:21)(cid:5)
(cid:2)
(cid:1)
(cid:8)(cid:21)(cid:4)
(cid:8)(cid:21)(cid:5)
(cid:2)
(cid:1)
(cid:1)
(cid:2)(cid:12)(cid:3)
(cid:9)(cid:23)(cid:18)(cid:20)(cid:14)(cid:21)(cid:10)(cid:11)(cid:18)(cid:14)(cid:1)(cid:12)(cid:14)(cid:18)(cid:18)
(cid:1)
(cid:1)(cid:1)
(cid:1)
(cid:8)(cid:21)(cid:4)
(cid:1)(cid:1)
(cid:8)(cid:21)(cid:4)
(cid:2)(cid:13)(cid:3)
(cid:2)(cid:14)(cid:3)
Fig. 4: Efﬁcient utilization of multiple target rows holding
ﬂippable bits. HammerLeak can utilize all Vc in (a) adjacent
target rows (Tr1, Tr2) with the same Vc offset, (b) adjacent
Tr1, Tr2 with different Vc offsets, (c) adjacent Tr1, Tr2 with
different Vc offsets (alternate page), (d) one Tr with different
Vc offsets (same page) and (e) same Tr with different Vc
offsets (different page).
adversarial input samples to the victim model. We describe the
details of our DeepSteal framework in the following sections.
V. HAMMERLEAK: EFFICIENT DATA STEALING IN
MEMORIES
In this section, we present HammerLeak, an efﬁcient
rowhammer-based information leakage attack which can steal
victim’s secretive data in bulk. HammerLeak is a multi-round
attack framework. In each round,
it manages to relocate
victim’s model weight pages to leakable DRAM locations
and perform rowhammer-based side channel to steal weight
bits. Such operations are iterated over multiple rounds until
sufﬁcient bits are leaked for model extractions.
A. Leveraging Rowhammer in HammerLeak
in both aggressor rows. While it
Although the rowhammer attack in RAMBleed [7] demon-
strates information stealing from the aggressor rows adjacent
to a vulnerable cell, it requires the same secret page to be
present
is possible that
certain applications may launch multiple threads with each
allocating memories to store a duplicated copy of shared
pages (e.g., as in the case of OpenSSH), we ﬁnd that such
duplication does not commonly exist in many applications
(e.g., ML framework in PyTorch [62]). Therefore, this type
of manifestation does not work in a more general setting.
HammerLeak augments rowhammer by exploiting the same
observation of data dependency, but with added capability of
leaking victim bits by utilizing only one copy of victim page.
This makes the rowhammer-based side channel potentially
applicable to any victim application. As shown in Figure 3,
instead of requiring two duplicated copies of the victim page,
the attacker substitutes one victim page with his own page
while still being able to leak secret bits from the victim page.
Speciﬁcally, the attacker ﬁrst places the victim page to one
of the adjacent aggressor rows (e.g., top aggressor row, Tr−1
shown in example Figure 3) and then places attacker’s own
page in the other aggressor row (e.g., bottom aggressor row,
Tr+1). Note that the target row (Tr) contains the vulnerable
DRAM cell (Vc), which can have 0→1 ﬂip as an illustration.
The content of the two attacker rows is controlled such that it
creates a bit layout of X-0-1 with the aggressor row containing
the victim page, where X is the secretive victim bit, the middle
bit (0) is Vc and the last bit (1) is the other attacker-controllable
bit. When the two aggressor rows are frequently accessed, a
bit ﬂip will be observed for Vc if X is 1 as shown in Figure 3a
(thus creating a 1-0-1 pattern), otherwise there will be no bit
ﬂip in Vc (Figure 3b). The same technique can be applied with
the X-1-0 pattern if ﬂip direction of Vc is 1→0.
Efﬁcient Utilization of Vulnerable Rows. Typically, vulner-
able DRAM cells are uniformly distributed across the DRAM
DIMM [63]. As a result, it is possible that vulnerable cells
are present in pages at adjacent rows as well as different
pages in the same row. Carefully designing the rowhammer
memory layout to maximize the utilization of vulnerable bits
is critical for efﬁcient bit leakage. Figure 4 enumerates the
possible cases for multiple vulnerable cell locations. In case
of multiple vulnerable cells in adjacent rows (i.e., Figure 4a,
Figure 4b and Figure 4c), we can setup the memory layout so
that HammerLeak ﬁrst leaks secret from Tr1 (x) by utilizing
Tr2 as an aggressor, then leaks from Tr2 by using Tr1 as
an aggressor (y). When more than one Vc exist on the same
page (Figure 4d), we can leak multiple secret bits at the same
time by setting proper memory layout in Tr and the attacker-
controlled aggressor row. Finally, when different Vc are in
different pages of the same Tr, HammerLeak places two victim
pages, one to each aggressor row as shown in Figure 4e. Such
a conﬁguration allows the attacker to leak bits from both pages
in one iteration of hammering. HammerLeak judiciously setup
the memory layout based on the bit ﬂip proﬁle to maximize
bit leakage in each round. Note that while this demonstration
is considering a system with a single-channel memory with
two pages per physical row, it remains valid for multi-channel
memory systems.
B. Bulk Secret Leakage using HammerLeak
To leak bits with rowhammer as discussed in Section V,
victim pages containing secrets must be placed in a row
adjacent to a Vc to be leakable (i.e., memory massaging [37],
[52]). Memory massaging of victim pages is challenging in
HammerLeak due to several reasons: i) Generally, the target
victim pages are anonymous pages and their allocations are
directly managed by the operating system. Tweaking system
software to relocate these pages as desired itself is a major
challenge in rowhammer; ii) Typically only one (or a few)
bit can be leaked from one victim page under attack in one
round. In order to steal sufﬁcient amount of bits, it is essential
for HammerLeak to perform multiple rounds of attack, where
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:59:25 UTC from IEEE Xplore.  Restrictions apply. 
1161
Free Page
Victim Page