al. Meltdown: Reading kernel memory from user space. In USENIX Security 18.  
[148] LLVM Project. Scudo Hardened Allocator. https://llvm.org/docs/
ScudoHardenedAllocator.html, 2019.  
[149] ARM LTD. ARMv8 architecture reference manual, for ARMv8-A architecture
profile (ARM DDI 0487C.a). 2017.  
[150] Mads Ager and Erik Corry and Vyacheslav Egorov and Kentaro Hara and
Gustav Wibling and Ian Zerny. Oilpan: Tracing garbage collection for blink.
2013.  
[151] Adrian Marinescu. Windows vista heap management enhancements: Security,
reliability and performance. In Black Hat USA 06.  
[152] Mark Brand and Sergei Glazunov and Project Zero. Analysis of CVE-2020-16010: Chrome for Android ConvertToJavaBitmap Heap Buffer Overflow.
https://googleprojectzero.github.io/0days-in-the-wild/0day-RCAs/2020/CVE-2020-16010.html, 2021.  
[153] Mathias Bynens. Elements kinds in V8, 2017.  
[154] Mathias Bynens. JavaScript engine fundamentals: Shapes and Inline
Caches, 2018.  
[155] Matt Molinyawe, Abdul-Aziz Hariri, Jasiel Spelman. $hell on Earth: From
Browser to System Compromise. In Black Hat USA 16.  
[156] McAfee Labs. Don’t Substitute CVSS for Risk: Scoring System Inflates
Importance of CVE-2017-3735. https://www.mcafee.com/blogs/other- blogs/mcafee-labs/dont- substitute- cvss- for- risk- scoring- system- inflates-importance-of-cve-2017-3735/, 2017.  
[157] Ross Mcilroy, Jaroslav Sevcik, Tobias Tebbi, Ben L Titzer, and Toon
Verwaest. Spectre is here to stay: An analysis of side-channels and
speculative execution. arXiv preprint arXiv:1902.05178, 2019.  
[158] Microsoft. JIT Spraying Never Dies - Bypass CFG By Leveraging WARP
Shader JIT Spraying. https://sites.google.com/site/bingsunsec/ WARPJIT.  
[159] Microsoft. Control Flow Guard, 2015.  
[160] Microsoft. Introducing windows defender application guard for microsoft
edge. https://blogs.windows.com/msedgedev/2016/09/27/ application-guard-microsoft-edge/, 2016.  
[161] Microsoft. Microsoft defender application guard overview.
https://docs.microsoft.com/en- us/windows/security/threat- protection/
microsoft-defender-application-guard/md-app-guard-overview, 2021.  
[162] Microsoft. Microsoft edge support for microsoft defender application
guard. https://docs.microsoft.com/en- us/deployedge/microsoft- edge- security-windows-defender-application-guard, 2021.  
[163]Microsoft Defender Security Research Team. Exploit kits remain a
cybercrime staple against outdated software – 2016 threat landscape review
series. https://www.microsoft.com/security/blog/2017/01/23/exploit-kits-remain-a-cybercrime-staple-against-outdated-software-2016-threat-landscape-review-series/, 2017.  
[164] Matt Miller. Mitigating arbitrary native code execution in Mi- crosoft
Edge, 2017. https://blogs.windows.com/msedgedev/2017/02/ 23/mitigating-arbitrary- native- code- execution/.  
[165] Matthew R. Miller, Kenneth D. Johnson, and Timothy William Burrell.
Using virtual table protections to prevent the exploitation of object
corruption vulnerabilities.  
[166] Max Moroz and Sergei Glazunov. Analysis of UXSS exploits and mitigations
in Chromium. Technical report, 2019.  
[167] Mozilla. Static Analysis for Rooting and Heap Write Hazards.
https://firefox-source-docs.mozilla.org/js/HazardAnalysis/index.html.  
[168] Mozilla. Spy in the sandbox - security issue related to high resolution
time api. https://bugzilla.mozilla.org/show_bug.cgi?id=1167489, 2015.  
[169] Mozilla. Plugin Roadmap for Firefox. 2016.  
[170] Mozilla. Changes affecting Adobe Flash on Firefox for Mac.
https://support.mozilla.org/en-US/kb/changes-affecting-adobe-flash-firefox-mac, 2018.  
[171] Mozilla. Mitigations landing for new class of timing at- tack.
https://blog.mozilla.org/security/2018/01/03/mitigations-landing-new-class-timing-attack/, 2018.  
[172] Mozilla. Firefox 79 for developers. https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Releases/79#javascript, 2020.  
[173] Mozilla. Security Bug Approval Process. https://firefox-source-docs.mozilla.org/bug-mgmt/processes/security-approval.html, 2020.  
[174] Mozilla. Introducing site isolation in firefox.
https://blog.mozilla.org/security/2021/05/18/introducing-site-isolation-in-firefox/, 2021.  
[175] Mozilla. Project fission - mozillawiki.
https://wiki.mozilla.org/Project_Fission, 2021.  
[176] Mozilla. Security Bug Bounty Program. https://www.mozilla.org/en-US/security/bug-bounty/, 2021.  
[177] Paul Muntean, Matthias Neumayer, Zhiqiang Lin, Gang Tan, Jens
Grossklags, and Claudia Eckert. Analyzing Control Flow Integrity with LLVM-CFI. In ACSAC19.  
[178] Hoda Naghibijouybari, Ajaya Neupane, Zhiyun Qian, and Nael Abu-Ghazaleh. Rendered insecure: Gpu side channel attacks are practical. In CCS18.  
[179] Yossef Oren, Vasileios P Kemerlis, Simha Sethumadhavan, and Ange- los D
Keromytis. The spy in the sandbox: Practical cache attacks in javascript and
their implications. In CCS15.  
[180] Chris Paget. Exploiting design flaws in the Win32 API for privilege
escalation. White Paper, 2002.  
[181] Andriy Panchenko, Fabian Lanze, Jan Pennekamp, Thomas Engel, An- dreas
Zinnen, Martin Henze, and Klaus Wehrle. Website fingerprinting at internet
scale. In NDSS16.  
[182] SoyeonPark,WenXu,InsuYun,DaeheeJang,andTaesooKim.Fuzzing javascript
engines with aspect-preserving mutation. In SP20.  
[183] phoenhex team. CVE-2018-4233 Exploit.
https://github.com/phoenhex/files/blob/master/exploits/ios-11.3.1/, 2018.  
[184] The Chromium Project. Miracleptr aka raw_ptr aka backuprefptr.
https://chromium.googlesource.com/chromium/src/+/ddc017f9569973a731a574be4199d8400616f5a5/base/memory/raw_ptr.md,
2021.  
[185] The Chromium Project. Miracleptr one pager. https:
//docs.google.com/document/d/1pnnOAIz_DMWDI4oIOFoMAqLnf_ MZ2GsrJNb_dbQ3ZBg,
2021.  
[186] Charles Reis, Alexander Moshchuk, and Nasko Oskov. Site isolation:
Process separation for web sites within the browser. In USENIX Security 19.  
[187] Thomas Rokicki, Clémentine Maurice, and Pierre Laperdrix. Sok: In search
of lost time: A review of javascript timers in browsers. In EuroSP21.  
[188] Paul Sabanal and Mark Vincent Yason. Digging deep into the flash
sandboxes.  
[189] Saelo. Attacking JavaScript Engines: A case study of JavaScriptCore and
CVE-2016-4622. http://www.phrack.org/issues/70/3.html, 2016.  
[190] Saelo. Compile Your Own Type Confusions: Exploiting Logic Bugs in
JavaScript JIT Engines. http://phrack.org/issues/70/9.html, 2019.  