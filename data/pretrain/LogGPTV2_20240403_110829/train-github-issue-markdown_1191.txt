I would like to propose the addition of another method to `reflect.StructTag`.
The proposed change is very simple, and I'm happy to produce a design document
and a PR. I have filed this issue to see if there is any likelihood of this
change being accepted.
The `reflect.StructTag` currently has one method, `Get`, which makes it easy
to extract the value for the associated key from the tag. What it does not do,
however, is indicate if the key exists with an empty value.
So in the following example, the `Get` method will return the same value for
the `db` tag assocated with the `Name` field as for the `db` tag associated
with the `Address` field, but there is a difference in the meaning.
    struct {
        Name    string `db:"" json:"-"`
        Address string  
    }
It could be argued that this is a pretty simple function and should not be
added to the Go standard library. I am suggesting that it should be added
because any third-party implementation requires some duplication of the code
for the `Get` method in the standard library. Duplicating the code from the Go
standard library presents at least two challenges:
  * There is an ongoing maintenance overhead of tracking any future changes to the Go standard library.
  * The Go BSD license requires distributing the Go copyright notice and conditions with any redistribution of source code. Not a huge deal, but an inconvenience that can be omitted by adding `Lookup` to the standard libary.
Note also that there was a similar addition in Go 1.5 in the `os` package,
where the `LookupEnv` function was introduced to complement the `GetEnv`
function.
## Proposed New Method
**func (StructTag) Lookup**
    func (tag StructTag) Lookup(key string) (string, bool)
Lookup returns the value associated with key in the tag string. If the key is
present in the tag the value (which may be empty) is returned and the boolean
is true. Otherwise the returned value will be empty and the boolean is false.
If the tag does not have the conventional format, the value returned by Lookup
is unspecified.