is entirely dependent on the current thread in the target.
Therefore, it is a challenge to device a universal mech-
anism to load the ImEE agent regardless the target’s ad-
dress space layout. Secondly, read/write operations on
the local memory and on the target memory are not dis-
tinguishable to the hardware. Therefore, it is difﬁcult to
separate access to local pages and target pages. For ex-
ample, it is difﬁcult to detect whether a VA for introspec-
tion is wrongly mapped to the local data (which could be
induced by the target kernel inadvertently or willfully)
because it does not violate the access permissions on the
page table.
Security Challenge.
The ImEE is not fully isolated
from the adversary. The target VM’s kernel has the full
control of the VA-to-GPA mappings which affect the re-
sulting HPA. Hence, the adversary can manipulate the
ImEE agent’s control ﬂow and data ﬂow by modifying
the mappings at runtime. Although access permissions
can be enforced via the GPA-to-HPA translation, the ad-
versary can still redirect the memory reference at one
page to another with the same permissions.
A more subtle, yet important issue, is that the intro-
spection blind spot, namely the set of virtual addresses
in the target which are not reachable by the ImEE agent.
As shown in Figure 2, a VA for introspection is in the
blind spot if and only if it is mapped to the GPA for local
use. This is because the full address translation ends up
with a local page, instead of the target VM’s page. The
malicious target can turn its pages into the blind spot by
manipulating its guest page table. The blind spot issue
has two implications. First, detecting its existence ef-
ﬁciently is challenging. Note that it is time-consuming
to ﬁnd out all VAs in the blind spot, because the guest
page tables have to be traversed to obtain the GPA cor-
responding to a suspicious VA. Second, the attacker can
manipulate VA to GPA mappings in an attempt to dis-
rupt the execution of the ImEE agent. By manipulate the
mappings, the attacker tries to cause invalid code to be
executed inside the environment, or cause the introspec-
tion to read arbitrary data.
Figure 2: Illustration of the blind spot comprising three
virtual pages (in the dark color). Target kernel objects in
those pages cannot be introspected since they are mapped
to the local memory.
Performance Challenge.
Although the ImEE agent
accesses the target memory at native speed, we aim to
minimize the time for setting it up in order to maxi-
mize its capability of quickly responding to real-time
events and/or adapting to a new introspection target (e.g.,
another thread in the target VM or even another tar-
get VM). The challenge is how to load the agent into
the virtual address space currently deﬁned by the tar-
get thread and to prepare the corresponding GPA-to-HPA
mappings. Searching in the virtual address space is not
an option since it is time-consuming to walk the target
VM’s paging structures. In addition, it is also desirable
to minimize the hypervisor’s runtime involvement, be-
cause the incurred VM exit and VM entry events cost
non-negligible CPU time.
Besides the above three major challenges, there are
other minor issues related to the runtime event handling,
such as page faults and the target VM’s EPT updates.
The requirement of Out-of-VM introspection is to min-
imize intrusive effects on the target. For example, the
hypervisor is refrained from modifying the target VM’s
guest page tables because it leads to execution exceptions
in the target. Therefore, the minor issues also need care-
ful treatment.
3.4 System Overview
The ImEE is in essence a special virtual machine which
is created and terminated by the hypervisor based on the
VMI application’s request. Like a normal VM, the ImEE
hardware consists of a vCPU core and a segment of phys-
ical memory, both (de)allocated by the hypervisor when
needed. No I/O device is attached to the ImEE. The
ImEE does not have an OS and the only software run-
ning in it is the ImEE agent which reads the target mem-
ory. Figure 3 depicts an overview of the whole system.
The VMI application can launch the ImEE, put it into
802    26th USENIX Security Symposium
USENIX Association
7 HPA  (local memory) HPA  (target memory) VA-to-GPA mappings GPA-to-HPA mappings (for local) GPA-to-HPA mappings (for target) GPA for local GPA for target controlled by the target kernel Virtual Address Space Figure 3: Overview of ImEE-based introspection. The
box with dashed lines illustrates the mixture of physical
memory. The shadowed regions belong to the target and
are not trusted.
sleep, and terminate it. Like a regular VM, the ImEE can
also migrate from one logic core to another. While the
ImEE is active, it runs in sessions which is deﬁned as
the tenure of its CR3 content. To kick off a session, the
hypervisor either induces a VM exit or intercepting CR3
changes in the target.
4 The Design Details
In this section, we ﬁrst explain the internals of the ImEE
with the focus on the paging structures, and then explain
the ImEE agent. We show our design choices for perfor-
mance where appropriate. Lastly, we describe the life-
cycle of ImEE, focusing on the runtime issues such as
transitions between sessions.
The approach is to carefully concert system design,
e.g., setting the ImEE’s EPTs and software design (i.e.
crafting the agent) so that the ImEE agent execution
straddles between two virtual address spaces: one for the
local usage and the other for accessing the target VM.
ImEE Internals
4.1
The ImEE requires a vCPU core which can be migrated
from one core to another.
It also comprises one ex-
ecutable code frame and one read/writable data frame.
The former stores the agent code while the latter stores
the agent’s input and output data. To differentiate them
from the target VM’s physical memory, we name them
as the ImEE frames.
According to the CR3 content, the agent runs either
in the local address space or the target address space, as
depicted in Figure 4. When in the local address space, the
agent interacts with the VMI application while it runs in
the target address space to read the target memory. The
code frame is mapped into both spaces while the data
frame is mapped in the local address space only.
Local Address Space. The paging structures used in
the local address space comprise GPTL and EPTL, which
Figure 4: The solid arrows describe the translation for
a VA within the ImEE, while the dotted arrows describe
the translation inside the target. All target frames acces-
sible to the ImEE agent are set as read-only and non-
executable in EPTT .
map the entire space to the ImEE frames. GPTL only
consists of two pages as shown in Figure 5. The global
ﬂag on the GPTL is set so that the local address space
mappings in the TLB are not ﬂushed out during CR3 up-
date. Speciﬁcally, only one virtual page is mapped to the
data frame while all others are mapped to the code frame.
With this setup, the agent code can execute from all but
one page. Moreover, the GPAs of the ImEE frames are
not within the GPA range the target VM uses, which
avoids conﬂict mappings used in the target address space.
Figure 5: The Illustration of GPTL. All entries in the
page table directory point to the same page table page
which has one PTE points to the data frame and all other
to the code frame.
Target Address Space. The target address space im-
plements our idea in Figure 1. To run the agent in this
space, the ImEE CR3 register is synchronized with the
target CR3, so that they use the same guest page tables.
The GPA-to-HPA mapping used in this space are gov-
erned by EPTT and EPTC.
All GPAs are mapped to the target frames by EPTT ,
except one page is redirected by EPTC to the ImEE
code frame. Speciﬁcally, EPTT is populated with the
GPA-to-HPA mappings from the target VM’s EPT, ex-
cept that all target frames are guarded by read-only
and non-executable permissions. This stops the agent
from modifying the target memory for the sake of non-
intrusiveness. It also prevents the adversary from inject-
ing code, because the adversary can place arbitrary bi-
USENIX Association
26th USENIX Security Symposium    803
1 memory  CPU Monitor ImEE Target ImEE  agent VMI App kernel  space user  space OS hypervisor OS 3  CR3 Target frames RO NX GPT GPTL data code EPT EPTT EPTC EPTL  CR3  CR3 Target address space Local address space Target VM ImEE  memory  memory GPTLGPA spaceRWRXRXdatacodeRXnaries to those frames. The permission of the mapping
deﬁned by EPTC is set as executable-only. Namely, it
cannot be read or written from the target address space.
Note that the ImEE data frame is not mapped in the tar-
get address space for two reasons. Firstly, it minimizes
the number of GPA pages redirected from the target to
the ImEE, and therefore reduces the potential blind spot.
Secondly, all memory read accesses performed in the tar-
get address space are bounded to the target. Therefore,
it feasible to conﬁgure the hardware to regulate memory
accesses so that any manipulation on the target GPT that
attempts to redirect the introspection access to the ImEE
memory is caught by a page fault exception.
CAVEAT. Address switches inside the ImEE do not
cause any changes on the EPT level. The GPA-to-HPA
mappings used in one address space are cached in the
ImEE TLBs and are not automatically invalidated dur-
ing switches. Note that EPTL, EPTC and EPTT do not
have conﬂict mappings because they map different GPA
ranges. The two address spaces are assigned with dif-
ferent Process-Context Identiﬁer (PCID) avoid undesired
TLB invalidation on address space switch.
4.2
ImEE Agent
The ImEE agent is the only piece of code running in-
side the ImEE, without the OS or other programs. It is
granted with Ring 0 privilege so that it has the privilege
to read the target kernel memory and to manage its own
system settings, such as updating the CR3 register.
It
is self-contained without external dependency and does
not incur address space layout changes at runtime in the
sense that all the needed memory resources are priorly
deﬁned and allocated.
Our description below involves many addresses. We
use Table 1 to deﬁne the notations.
ImEE data
ImEE code (local addr. space)
ImEE code (target addr. space)
Target page
VA GPA
GPd
Pd
Pc
GPc
GP(cid:48)
Pc
c
Pt
GPt
Table 1: Address notations. For instance, GP c is the
guest physical address of the ImEE code page in the local
address space.
Overview. The main logic of the agent is as follows.
Initially, the agent runs in the local address space and
reads an introspection request from the data frame. Then
it switches to the target address space and reads the tar-
geted memory data from the target memory into the reg-
isters. Finally, it switches back to the local address space,
dumps the fetched data to the data page and fetches the
next request.
The Agent. Figure 6 presents the pseudo code of the
agent. The agent has only one code page and one data
page. Since the data frame is out of the target address
space, all needed introspection parameters (e.g., the des-
tination VA and the number of bytes to read) are loaded
into the general-purpose registers (Line 6). For the same
reason, the agent loads the target memory data into the
ImEE ﬂoating-point registers as a cache (Line 12), be-
fore switching to the local address space to write to the
data frame (Line 17).
1: while TRUE do
2:
3:
4:
5:
6:
/* local address space: Read the request */
repeat
poll the interface lock;
until the lock is off
Read the request from the data frame to
general-purpose registers;
/* switch to target address space */
Load the target CR3 provided by the hypervisor;
7:
8:
9:
10:
11:
12: Move n bytes from the target address x to
/* target access */
ﬂoating-point registers;
13:
14:
15:
16:
17: Move data from the ﬂoating-point registers to
/*switch to local address space */
Load CR3 with GPTL;
/* output to data frame */
the ImEE data page;
if requested service not completed then
18:
19:
20:
21:
22: end while
goto Line 9;
end if
Set interface lock;
Figure 6: The sketch of the ImEE agent’s pseudo code
The agent is loaded at Pc in the local address space by
the hypervisor. Pc is chosen by the hypervisor such that
it is an executable page according to the target’s guest
page table. Because GPTL maps the entire VA range (ex-
cept one page) to the code frame. Therefore, there is an
overwhelming probability that Pc is also an executable
page in the local address space2. Therefore, the agent can
execute in the two address spaces back and forth which
explain Line 12 and 17 can run successfully without re-
2In case Pc is not executable under GPTL, the hypervisor only needs
to adjust the corresponding PTE.
804    26th USENIX Security Symposium
USENIX Association
location.
Impact of TLB. No matter whether there is an attack
or not, TLB retention has no adverse effect on the intro-
spection. Suppose that the mappings in the local address
space are cached in the TLB. When the agent runs in the
target address space, the only VAs involved are for the
instructions (Pc) and the target addresses (Pt). For VAs
in Pc, the cached mapping remains valid because the ad-
dress mappings are not changed. There are two exclusive
cases for Pt. If Pt (cid:54)= Pd, the translation does not hit any
TLB entry because it is never used in the local address
space. Otherwise, the TLB entry for Pd is still consid-
ered as a miss because of different PCIDs. The same
reasoning also applies to the cached mappings in the tar-
get address space.
Note that the adversary gains no advantage from a
TLB hit on a cached local address space translation.
Since EPTL is available in the target address space, the
adversary can manipulate its own page tables to achieve
the same outcome as a TLB hit. It can use arbitrary GPA
in its page tables.
4.3 Defeating Attacks via the Blind Spot
The introspection security demands the agent execution
to have both control ﬂow integrity and data ﬂow integrity.
Data conﬁdentiality is also required since the leakage of
the introspection targets can help the adversary evade in-
trospection. The EPT settings of the ImEE and of the
target ensure that the adversary can only launch side-
channel attacks, which is beyond the scope of our study.