把 小于等于
.I num
字节 的 全局 或 静态 数据 放到 小的 数据段 或 bss 段, 而不是
普通的 数据段 或 bss 段. 这样 汇编器 可以 输出 基于 全局指针
.RB ( gp
或
.BR $28 ),
的 单字内存访问指令 而非 普通的 双字指令.
默认情况下, 用 MIPS 汇编器 时
.I num
是 8, 而 GNU 汇编器 则为 0. 另外,
.BI \-G num
选项 也被 传递 给 汇编器 和 连接器. 所有 的 模块 必须在 相同的
.BI \-G num
值下 编译.
.TP
.B \-nocpp
汇编 用户汇编文件
(带有 `\|\c
.B .s\c
\&\|' 后缀) 时, 告诉 MIPS 汇编器 不要 运行 预处理器.
.PP
下面的 `\|\c
.B \-m\c
\&\|' 选项 用于 Intel 80386 族 计算机:
.B \-m486
.TP
.B \-mno\-486
控制 是否 生成 对 486 优化 的 代码.
.TP
.B \-msoft\-float
输出 包含 浮点库调用.
.I 警告: 
所需库 不是 GNU CC 的 一部分. 一般说来 使用 该机型 本地 C 编译器 的
相应部件, 但是 不能 直接 用于 交叉编译, 你 必须 自己 安排, 提供 
交叉编译 适用的 库函数.
.Sp
在 函数 把 浮点返回值 放在 80387 寄存器栈 的 机器 上, 即使 设置了 `\|\c
.B \-msoft-float\c
\&\|' 选项, 也可能会 发出 一些 浮点操作码. 
.TP
.B \-mno-fp-ret-in-387
不用 FPU 寄存器 返回 函数值.
.Sp
通常 函数调用约定 把
.B float\c
\& 和 \c
.B double\c
\& 的 返回值 放在 FPU 寄存器 中, 即使 不存在 FPU. 这种作法 的 理念
是 操作系统 应该 仿真出 FPU.
.Sp
而 `\|\c
.B \-mno-fp-ret-in-387\c
\&\|' 选项 使 浮点值 通过 普通的 CPU 寄存器 返回.
.PP
下面的 `\|\c
.B \-m\c
\&\|' 选项 用于 HPPA 族 计算机:
.TP
.B \-mpa-risc-1-0
生成 PA 1.0 处理器 的 目标码.
.TP
.B \-mpa-risc-1-1
生成 PA 1.1 处理器 的 目标码.
.TP
.B \-mkernel
生成 适用于 内核 的 目标码. 特别要 避免 \c
.B add\c
\& 指令, 它 有 一个 参数 是 DP 寄存器; 用 \c
.B addil\c
\& 代替 \c
.B add\c
指令. 这样 可以 避免 HP-UX 连接器 的 某个 严重 bug.
.TP
.B \-mshared-libs
生成 能够 连接 HP-UX 共享库 的 目标码. 该选项 还没有 实现 全部功能, 对
PA 目标 默认为 关闭. 使用 这个选项 会 导致 编译器 生成 错误的 目标码.
.TP
.B \-mno-shared-libs
不生成 连接 HP-UX 共享库 的 目标码. 这是 PA 目标 的 默认选项.
.TP
.B \-mlong-calls
生成的 目标码 允许 同一个 源文件 中的 函数调用, 调用点 和 被调函数
的 距离 可以 超过 256K 之远. 不需要 打开 这个 开关选项, 除非 连接器
给出 \*(lqbranch out of range errors\*(lq 这样的 错误.
.TP
.B \-mdisable-fpregs
防止 任何情况下 使用 浮点寄存器. 编译 内核 需要 这个选项, 内核 切换
浮点寄存器 的 执行环境 速度 非常缓慢. 如果 打开了 这个 开关选项 同时
试图 浮点操作, 编译 将 失败.
.TP
.B \-mdisable-indexing
防止 编译器 使用 索引地址模式 (indexing address mode).
这样 在 MACH 上 编译 MIG 生成的 代码 时, 可以 避免 一些 非常 晦涩的 问题.
.TP
.B \-mtrailing-colon
在 标记定义 (label definition) 的 末尾 添加 一个 冒号 (用于 ELF 汇编器).
.PP
下面的 `\|\c
.B \-m\c
\&\|' 选项 用于 Intel 80960 族 计算机:
.TP
.BI "\-m" "cpu-type"
默认 机器 类型 为
.I cpu-type ,
使 编译器 产生 对应的 指令, 地址模式 和 内存对齐. 默认的
.I cpu-type
是
.BR kb ;
其他 选择 有
.BR ka ,
.BR mc ,
.BR ca ,
.BR cf ,
.BR sa ,
和
.BR sb .
.TP
.B \-mnumerics
.TP
.B \-msoft\-float
.B \-mnumerics
开关选项 指出 处理器 不支持 浮点指令.
.B \-msoft\-float
开关选项 指出 不应该 认为 机器 支持 浮点操作.
.TP
.B \-mleaf\-procedures
.TP
.B \-mno\-leaf\-procedures
企图 (或防止) 改变 叶过程 (leaf procedure), 使其 可被
.I bal
指令 以及
.IR call 
指令 调用. 对于 直接函数调用, 如果
.I bal
指令 能够 被 汇编器 或 连接器 替换, 这 可以 产生 更有效 的 代码,
但是 其他 情况下 产生 较低效 的 代码, 例如 通过 函数指针 调用 函数,
或 使用了 不支持 这种 优化 的 连接器.
.TP
.B \-mtail\-call
.TP
.B \-mno\-tail\-call
执行 (或不执行) 更多的 尝试 (除过 编译器 那些 机器无关 部分), 优化
进入 分支 的 尾递归 (tail-recursive) 调用. 你 可能 不需要 这个,
因为 检测 什么 地方 无效 没有 全部 完成. 默认 开关 是
.BR \-mno\-tail\-call .
.TP
.B \-mcomplex\-addr
.TP
.B \-mno\-complex\-addr
认为 (或 不认为) 在 当前的 i960 设备 上, 值得 使用 复合地址模式
(complex addressing mode). 复合地址模式 可能 不值得 用到 K 系列, 但是
一定 值得 用在 C 系列. 目前 除了 CB 和 CC 处理器, 其他 处理器 上
.B \-mcomplex\-addr
是 默认选项.
.TP
.B \-mcode\-align
.TP
.B \-mno\-code\-align
把 目标码 对齐到 8 字节 边界 上 (或者 不必), 这样 读取 会 快一些.
目前 只对 C 系列 默认 打开.
.TP
.B \-mic\-compat
.TP
.B \-mic2.0\-compat
.TP
.B \-mic3.0\-compat
兼容 iC960 v2.0 或 v3.0.
.TP
.B \-masm\-compat
.TP
.B \-mintel\-asm
兼容 iC960 汇编器.
.TP
.B \-mstrict\-align
.TP
.B \-mno\-strict\-align
不允许 (或允许) 边界不对齐 的 访问.
.TP
.B \-mold\-align
使 结构对齐 (structure-alignment) 兼容 Intel 的 gcc 发行版本 1.3 
(基于 gcc 1.37). 目前 这个选项 有点问题, 因为
.B #pragma align 1
总是 作 同样的 设定, 而且 无法 关掉.
.PP
下面的 `\|\c
.B \-m\c
\&\|' 选项 用于 DEC Alpha 设备:
.TP
.B \-mno-soft-float
.TP
.B \-msoft-float
使用 (或 不使用) 硬件浮点指令 进行 浮点运算. 打开 \c
.B \-msoft-float\c
\& 时, 将 使用 `\|\c
.B libgcc1.c\c
\&\|' 中的 函数 执行 浮点运算. 除非 它们 被 仿真 浮点操作 的 例程 替换,
或者 类似, 它们 被 编译为 调用 仿真例程, 这些 例程 将发出 浮点操作.
如果 你 为 不带 浮点操作 的 Alpha 编译 程序, 你 必须 确保 建立了 这个 库,
以便 不调用 仿真例程.
.Sp
注意, 不带 浮点操作 的 Alpha 也要求 拥有 浮点寄存器.
.TP
.B \-mfp-reg
.TP
.B \-mno-fp-regs
生成 使用 (或 不使用) 浮点寄存器群 的 目标代码.
.B \-mno-fp-regs\c
\& 包含有 \c
.B \-msoft-float\c
\& 开关选项.  如果 不使用 浮点寄存器, 浮点操作数 就象 整数 一样 通过
整数寄存器 传送, 浮点运算结果 放到 $0 而不是 $f0. 这是 非标准 调用,
因此 任何 带有 浮点 参数或返回值 的 函数, 如果 被 \c
.B \-mno-fp-regs\c
\& 开关 编译过的 目标码 调用, 它 也必须 用这个 选项 编译.
.Sp
这个选项 的 典型用法 是 建立 内核, 内核 不使用 任何 浮点寄存器,
因此 没必要 保存 和 恢复 这些 寄存器.
.PP
下面 附加的 选项 出现在 System V 第四版 中, 用于 兼容 这些 系统 中的
其他 编译器:
.TP
.B \-G
在 SVr4 系统 中, \c
.B gcc\c
\& 出于 兼容 接受了 `\|\c
.B \-G\c
\&\|' 选项 (然后 传递给 连接器). 可是 我们 建议 使用 `\|\c
.B \-symbolic\c
\&\|' 或 `\|\c
.B \-shared\c
\&\|'选项, 而不在 \c
.B gcc
命令行 上 出现 连接选项.
.TP
.B \-Qy
验证 编译器 用的 工具 的 版本, 输出到 \c
.B .ident\c
\& 汇编指令.
.TP
.B \-Qn
制止 输出端 的 \c
.B .ident\c
\& 指令 (默认选项).
.TP
.BI "\-YP," "dirs"
对于 `\|\c
.B \-l\c
\&\|' 指定的 库文件, 只搜索 \c
.I dirs\c
\&. 你 可以 在
.I dirs\c
\& 中 用 冒号 隔开 各个 目录项.
.TP
.BI "\-Ym," "dir"
在 \c
.I dir\c
\& 目录 中 寻找 M4 预处理器. 汇编器 使用 这个 选项.
.SH "代码生成选项 (CODE GENERATION OPTION)"
下面的 选项 和 平台 无关, 用于 控制 目标码生成 的 接口约定.
.PP
大部分 选项 以 `\|\c
\-f\c
\&\|' 开始. 这些选项 拥有 确定 和 否定 两种 格式; `\|\c
.B \-ffoo\c
\&\|' 的 否定格式 是 `\|\c
.B \-fno\-foo\c
\&\|'. 后面的 描述 将 只列举 其中 的 一个 格式 \(em\& 非默认 的 格式.
你 可以 通过 添加或去掉 `\|\c
.B no\-\c
\&\|' 推测出 另一个 格式.
.TP
.B \-fnonnull\-objects
假设 通过 引用 (reference) 取得的 对象 不为 null (仅 C++).
.Sp
一般说来, GNU C++ 对 通过 引用 取得的 对象 作 保守 假设.
例如, 编译器 一定会 检查 下似 代码 中的 \c
.B a
不为 null:
.Sp
obj &a = g ();
a.f (2);
.Sp
检查 类似 的 引用 需要 额外的 代码, 然而 对于 很多 程序 是 不必要的.
如果 你的 程序 不要求 这种检查, 你 可以 用 `\|\c
.B \-fnonnull-objects\c
\&\|' 选项 忽略它.
.TP
.B \-fpcc\-struct\-return
函数 返回 \c
.B struct\c
\& 和 \c
.B union
值时, 采用 和 本地编译器 相同的 参数约定. 对于 较小的结构, 这种约定
的 效率 偏低, 而且 很多 机器 上 不能 重入; 它的 优点 是 允许 GCC 编译
的 目标码 和 PCC 编译 的 目标码 互相调用.
.TP
.B \-freg\-struct\-return
一有可能 就 通过 寄存器 返回
.B struct
和
.B union
函数值. 对于 较小的结构, 它 比
.BR \-fpcc\-struct\-return 
更有效率.
.Sp