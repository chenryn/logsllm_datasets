Implementing monitoring and control at routers. If the ISP sup-
ports SDN, SENSS can implement all traffic observation and control
functionalities by issuing OpenFlow messages to the SDN controller.
For ISPs that do not support SDN, a SENSS server can enact traffic
observation by installing Netflow collection rules in routers. For
cost reasons, the server can install rules that use packet sampling,
and then extrapolate the actual packet/byte rates for the traffic_reply.
Finally, each router supports access control lists (ACLs). SENSS
server can enact traffic monitoring of a flow by installing an ACL
rule with “permit” target, and later querying the number of packets
that matched the rule.
The server can implement traffic control at non-SDN ISPs by
using ACLs or Flowspec [22]. The SENSS server implements route
observation and route control by using BGP software. For route
observation, it queries the given router for its best route to the select
prefix. For route demotion, it first queries the given router for all
its routes to the select prefix. Then it decides which, if any, routes
to demote and issues commands that lower the values of the routes’
local preference attributes.
Practical issues. SENSS messages lead to rules being installed
at a router’s TCAM, whose space is usually limited. We find that
many distributed attacks can be handled efficiently with very few
rules per router, using coarse flow specifications on fields such as
neighbor tag, destination IPs, transport ports, protocols, etc. On the
other hand, the client may rarely want to observe and control flows
at a fine-grained level, using the source IP field. Since the number of
rules, which use source IP field, could quickly skyrocket, ISPs could
ABCDEFclientservertrafﬁc_query(dst=1.2.3.0/24, 10s, start)trafﬁc_reply(id=1, (Tc,IN,1000)(Td,IN,10)(Tf,IN,10000))preﬁx 1.2.3.0/24ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
Sivaramakrishnan, Jelena Mirkovic, Minlan Yu, and Ying Zhang
discourage use of such rules by pricing them much higher than other
rules. In Section 4 we show that DDoS attacks can be handled well
with coarse-grained rules.
An ISP may have privacy concerns about others learning about
their traffic handling and routes. We have carefully designed SE-
NSS to avoid leakage of information that ISPs consider private or
sensitive, such as traffic load balancing and peering.
(1) Route replies reveal only public peering information, which
is already visible in BGP advertisements.
(2) Traffic replies are anonymized or aggregated. An ISP can
return encrypted tags in traffic replies that ask only about
IN direction, as we illustrate in our examples for flood w/o
signature in Section 3.4. When the victim sends filter requests,
the ISP decrypts the tags to identify where to place filters. In
traffic queries that ask about IN and OUT traffic (e.g., cross-
fire example) the ISP can return aggregated traffic (“all” tag
in our example for cross-fire) or omit traffic volume. This
protects confidential load balancing information.
An ISP may not be open to others changing its routing decisions
in any way. Such an ISP can always return the reject response for
demote messages. This will make it unable to aid in cross-fire attack
mitigation, but it will still be able to help in handling direct floods
and reflector attacks.
3.4 Client Programs
We now illustrate how a victim could design custom attack mitiga-
tion programs using SENSS APIs, by presenting four programs for
mitigation of the following attacks: direct floods with and without
transport/network signature (we use the terms flood w sig and flood
w/o sig), reflection and cross-fire attacks. All are novel contributions,
made possible by the SENSS APIs (Table 2).
Detection of DDoS attacks and identification of the attack signa-
ture is out of scope of our research. The victim can use existing tools,
such as AMON [13], Packetscore [17], Bro [27] or Arbor APS [25].
Floods w sig. If the SENSS client has a network/transport sig-
nature (e.g., the target destination IP and port number) to separate
legitimate from attack traffic, it uses SENSS to send traffic_filter
messages containing the signature and the target prefix to SENSS
servers. Figure 4(a) illustrates handling of floods with signature. To
preserve budget, the client can install filters only on some servers
that are likely to carry most of the attack, e.g., Tier 1 and Tier 2 ISPs,
and install them one by one, until mitigation is achieved.
Floods w/o sig. When DDoS attack traffic is very similar to the
legitimate traffic or very diverse or spoofed, the victim cannot derive
a sufficiently specific TCP/IP header signature, to separate the attack
from the legitimate traffic. Using SENSS the client can observe the
differences in the geographical distribution of the victim’s inbound
traffic prior and during the attack. Such differences usually exist,
because both the legitimate and the attack traffic’s distribution over
source networks are heavy-tailed. This can be used for location-
based filtering, where the client identifies ISP-ISP links (tags) where
filter placement would minimize collateral damage. During normal
operation, the client periodically issues traffic_queries, and extracts
the tags and the volume of traffic for the ISP-ISP links – prei . Let
preT be the total inbound traffic prior to the attack. During attack,
traffic_queries are repeated, to learn the tags and volume of links that
now carry a mix of attack and legitimate traffic – posti . Comparing
prei and posti , our program identifies candidates for filter placement
(i) as those tags where posti is large but prei was small or zero. The
program uses a parameter α ∈ (0, 1) to crudely control anticipated
collateral damage. It orders tags by their prei values, in an increasing
order, and selects first N so that prei1 +prei2 + ... +prei N ≤ α ·preT .
Figure 4(b) illustrates handling of floods without signature, with
tag names starting with letter “t” (anonymized) and reported traffic
volume shown in parentheses. We highlight the tags that are candi-
dates for filtering, assuming α = 0.2. This example also illustrates
how the client can patch together a partial view of the DDoS tree
even in sparse SENSS deployment.
Reflector attacks. Reflector attacks are challenging to handle,
because the victim wants to receive replies to its legitimate service
requests, and must filter replies to spoofed traffic, but these two
kinds of replies are very similar at the network level (e.g., in Figure
4(c) the victim wants to receive the blue traffic and filter the grey).
We handle reflector attacks by the victim network “marking” all
its query traffic, by NATing all its legitimate requests for targeted
service S, using a small range of port numbers R=[a, b]. NATing
can be done at the border router of the victim’s network. NATing
creates an artificial TCP/IP signature, which persist in replies. We
can use this signature to filter out replies caused by attack traffic,
because these replies will not go to the NAT IP address nor to the
port numbers in the range [a,b].
The SENSS client installs two filters at each selected SENSS
server, which will be applied in this order: (1) to allow all traffic
to the NAT on ports in range [a,b], from service port for S, (2)
to deny all other traffic to victim’s prefixes coming from service
port for S. This surgically removes all of the attack and has no
collateral damage. Range [a,b] must be chosen so that it is small
enough to make guessing hard, and large enough to accommodate
regular request traffic. The client further must frequently change
the range [a,b] to avoid guessing and DNS hijacking attacks. We
analyzed traffic from public traces (MAWI [11]) and found that
99.9% of networks could keep around 300 ports in the range [a,b],
and change them each 10 seconds to satisfy these conditions. Figure
4(c) illustrates handling of reflector attacks.
Cross-fire. The cross-fire attack [16] creates congestion at an ISP
upstream from the victim. For example, in the Figure 4(d), attack
networks S1, S2, S4 and S6 send traffic to D1, D2 and D3, and the
congestion occurs at A, causing V’s inbound traffic drops.
SENSS client can: (1) identify AS path segments that host the
bottleneck and (2) mitigate the attack by re-routing around the bot-
tleneck. To identify the bottleneck AS path segment the client first
issues route_queries to select SENSS servers, and extracts the AS
paths from the replies, forming the control plane path set – CPPS.
The client then traverses each path in the set issuing a traffic_query
for SENSS server in each AS (if such server exists) on the path. If
a SENSS ISP has multiple ASes, the server replies separately for
each AS specified in the query. The client compares the outgoing
traffic from the upstream reports with the incoming traffic from the
downstream reports. It identifies the bottleneck segment as the seg-
ment where the upstream AS reports sending more traffic than was
received by the downstream AS. The client mitigates the attack by
issuing demote messages containing the bottleneck link to select SE-
NSS servers. To be robust against lying servers, the client includes
SENSS Against Volumetric DDoS Attacks
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
Attacks
Flood w sig
Flood w/o sig
Reflector DDoS
Cross-fire
Key Idea
Filter traffic based on signature
Identify geographical differences between usual and attack traffic paths; use for filter placement
Victim marks traffic; ISPs filter non-marked traffic
Locate bottleneck links via traffic queries and route around them. Combines route/traffic info.
SENSS features we use
filter
traffic_query before and during attack, filter
filter, allow
route_query, traffic_query, demote
Table 2: Key innovations of client programs and the SENSS features we use
(a) Flood w sig
(b) Flood w/o sig
(c) Reflector
(d) Cross-fire
Figure 4: Illustration of DDoS attack handling with SENSS. Yellow nodes are victims, blue are legitimate clients and red are attackers.
White nodes are ISPs that do not deploy SENSS, and grey are ISPs that deploy SENSS. Red and blue lines represent attack and
legitimate traffic, respectively. Grey lines represent replies to spoofed requests. Numbers in the same color above the lines represent
volume in Gbps. Black tags on links are ISP-specific, anonymized tags that will be used in some replies by SENSS. We show only
relevant fields in SENSS messages, shown as text above the diagram.
the reporting AS in the bottleneck segment. Figure 4(d) illustrates
handling of cross-fire attacks. We have highlighted the identified
bottleneck, which will be demoted. Query replies have aggregated
traffic in reports to protect ISP’s load balancing decisions.
3.5 Security and Robustness
In this Section we detail how we have secured SENSS against direct
attacks and misuse.
Securing communication: SENSS only allows the victim to issue
messages about its own prefixes. The proof of prefix ownership is
publicly verifiable, unforgeable information, which binds the SENSS
client’s public key with the list of its prefixes. The client includes its
prefix-ownership certificate with each request. Upon successful cer-
tificate verification, the ISPs cache the {public key, prefixes owned}
information for some short time.
We can create proof of prefix ownership by using RPKI ROA
(Route Origin Authorization) certificates. SENSS ISPs deploy RPKI
certificate verification. Using RPKI certificates enables SENSS
servers to verify requests from remote clients, with whom they
have no prior trust. While a client would still have to establish a
payment mechanism to pay for services, this can be automated using
e-commerce solutions.
RPKI is today deployed in a limited fashion, mostly because net-
works see no special benefit of RPKI in sparse deployment. If SENSS
used RPKI to very prefix ownership, this may provide added incen-
tive for deployment. Today’s increasing deployment of MANRS
[21] also motivates larger deployment of RPKI. As an alternative to
RPKI certificates, which contain much additional information not
needed by SENSS, we could design new certificates, which bind a
public key with prefixes owned. These certificated would be issued
by the same entities that today issue RPKI ROA certificates, i.e.,
authorities that have assigned a given address space to the victim.
The communications between a SENSS client and a SENSS
server are secured using TLS [7], and occur via HTTPS. The victim
uses the public key from the proof of prefix ownership in the TLS
key exchange process.
If the private key corresponding to the proof of prefix ownership
gets compromised, the attacker could control all of the victim’s in-
bound traffic. To reduce the risk of this, the SENSS client would
issue the abort message to all SENSS servers as soon as it becomes
aware of the compromise. This message, when successfully authen-
ticated, purges all traffic/route rules for the given prefix at a given
SENSS server, and the server removes all corresponding rules from
the routers. The SENSS server also blacklists the public key, which it
used to authenticate the message. This stops the use of the stolen key.
The SENSS client can access SENSS servers again when it acquires
a new certificate. The reverse scenario, where the attacker issues
the abort message using a stolen private key, gives no advantage to
attacker. It cuts the attacker off SENSS, while the client can still
access it using its new certificate.
Robustness and SENSS proxy: During attacks, the victim’s net-
work may become unable to receive replies from SENSS servers.
The victim can outsource its decision making power, along with its
customized mitigation programs, to a SENSS proxy — a machine in
a different ISP, e.g., a public cloud, that will act as SENSS client.
The victim may set up one or several proxies, prior to any attack, as
a backup service. The victim generates a prefix-ownership certificate
for the proxy using its private key, binding the proxy’s public key
with one or more of the victim’s prefixes.
VABCDEFGHIJKLS3S4S5S61 4028t1t2t3t6t5t7V to A: ﬁlter(dst_IP=v1 & dst_port=25, *, 5min, start)V to G: ﬁlter(dst_IP=v1 & dst_port=25, *, 5min, start)V to A, D, G, J, L: trafﬁc_query({dst_IP=v1,dir=IN}, 10s, start)A to V: t5 (1) D to V: t6 (1)L to V: t2 (2)J to V: t1 (2)VABCDEFGHIJKLS3S4S5S61 4028t1t2t3t6t5t7Before attack:During attack:V to A, D, G, J, L: trafﬁc_query({dst_IP=v1, dir=IN}, 10s, start)A to V: {t5, IN, 1} {t7, IN, 40} D to V: {t6, IN, 1}G to V: {t3, IN, 8}L to V: {t2, IN, 2}J to V: {t1, IN, 2}V to A: ﬁlter(dst_IP=v1, t7, 5min, start)V to G: ﬁlter(dst_IP=v1, t3, 5min, start)VABCDEFGHIJKLS1S2S4S5S610010210085000400500S4S3V NATs its trafﬁc to dst_port 53 to use IP vn and range of ports [a,b]V to A-L:  allow(dst_IP=vn & src_port=53 & dst_port=[a,b], *, 5min, start)V to A-L: ﬁlter(dst_IP=V & src_port=53, *, 5min, start)VABCDEFGHIJKLS1S2S3S4S5S6100501105010D1D2D3t1t2t3t4t5t6t7t8t10t11t12V to A, D, G, J, L:  route_query(dst_IP=v1)A to V: VD to V: CBAVG to V: FEVL to V: KJEVJ to V: EVCPPS={DCBAV, GFEV, LKJEV}V to A, D, G, J, L: demote(dst_IP=v1, seg={AV}D starts using path HGFEVControl-path discoveryBottleneck detectionV to A, D, G, J, L:  trafﬁc_query({dst_IP=v1, dir={IN,OUT}}, 10s, start)A to V: {all, IN, 100} {all, OUT, 50} {all, SELF, 0}D to V: {all, IN, 100} {all, OUT, 100} {all, SELF, 0}J to V: {all,IN, 1} {all,OUT, 1} {all, SELF, 0}L to V: {all, IN, 1} {all, OUT, 1} {all, SELF, 0}MitigationACSAC ’18, December 3–7, 2018, San Juan, PR, USA
Sivaramakrishnan, Jelena Mirkovic, Minlan Yu, and Ying Zhang
The proxy monitors the victim’s service availability, e.g. by pe-
riodically issuing requests for some public service offered by the
victim. When the availability declines, the proxy starts attack mit-
igation. If the victim has information about the attack (e.g., type,
TCP/IP header signature) it can communicate it to proxy using
one-way messages, e.g., using DOTS [23] or custom UDP. These
messages carry a unique ID to avoid replay, and are encrypted by a
key shared between the victim and the proxy. The proxy waits for
the signature for some limited time. If the signature is received, the
proxy activates the custom program for handling flood with signa-
ture. Otherwise, it activates the the custom program for handling
flood without signature. The proxy includes both its and the victim’s
original certificate in the SENSS messages it sends. The SENSS
server validates the certificates by validating the entire certificate
chain.
Some victims may not be sufficiently technically savvy to detect
attacks or make mitigation decisions. These victims can offload their
attack mitigation to their first-hop ISP or to a cloud-based DDoS
defense, by creating a SENSS proxy there.
An attacker could target a SENSS server to disable its operation.
An ISP can replicate SENSS server functionality for robustness, just
as it is done today with other services.
Handling Misbehavior: