$ jstat -gcutil 21891 250 7
  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT
  0.00  97.02  70.31  66.80  95.52  89.14      7    0.300     0    0.000    0.300
  0.00  97.02  86.23  66.80  95.52  89.14      7    0.300     0    0.000    0.300
  0.00  97.02  96.53  66.80  95.52  89.14      7    0.300     0    0.000    0.300
 91.03   0.00   1.98  68.19  95.89  91.24      8    0.378     0    0.000    0.378
 91.03   0.00  15.82  68.19  95.89  91.24      8    0.378     0    0.000    0.378
 91.03   0.00  17.80  68.19  95.89  91.24      8    0.378     0    0.000    0.378
 91.03   0.00  17.80  68.19  95.89  91.24      8    0.378     0    0.000    0.378
```
以 1 秒的间隔进行 4 个采样，并显示-gc 选项指定的输出。
```
$ jstat -gc 25196 1s 4
 S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT
20928.0 20928.0  0.0    0.0   167936.0  8880.5   838912.0   80291.2   106668.0 100032.1 12772.0 11602.2    760   14.332  580   656.218  670.550
20928.0 20928.0  0.0    0.0   167936.0  8880.5   838912.0   80291.2   106668.0 100032.1 12772.0 11602.2    760   14.332  580   656.218  670.550
20928.0 20928.0  0.0    0.0   167936.0  8880.5   838912.0   80291.2   106668.0 100032.1 12772.0 11602.2    760   14.332  580   656.218  670.550
20928.0 20928.0  0.0    0.0   167936.0  8880.5   838912.0   80291.2   106668.0 100032.1 12772.0 11602.2    760   14.332  580   656.218  670.550
```
参数说明：
* S0C：年轻代中 To Survivor 的容量（单位 KB）；
* S1C：年轻代中 From Survivor 的容量（单位 KB）；
* S0U：年轻代中 To Survivor 目前已使用空间（单位 KB）；
* S1U：年轻代中 From Survivor 目前已使用空间（单位 KB）；
* EC：年轻代中 Eden 的容量（单位 KB）；
* EU：年轻代中 Eden 目前已使用空间（单位 KB）；
* OC：Old 代的容量（单位 KB）；
* OU：Old 代目前已使用空间（单位 KB）；
* MC：Metaspace 的容量（单位 KB）；
* MU：Metaspace 目前已使用空间（单位 KB）；
* YGC：从应用程序启动到采样时年轻代中 gc 次数；
* YGCT：从应用程序启动到采样时年轻代中 gc 所用时间 (s)；
* FGC：从应用程序启动到采样时 old 代（全 gc）gc 次数；
* FGCT：从应用程序启动到采样时 old 代（全 gc）gc 所用时间 (s)；
* GCT：从应用程序启动到采样时 gc 用的总时间 (s)。
---
## jmap
jmap 是 Java 内存映像工具。jmap 用于生成堆转储快照（一般称为 heapdump 或 dump 文件）。jmap 不仅能生成 dump 文件，还可以查询 finalize 执行队列、Java 堆和永久代的详细信息，如当前使用率、当前使用的是哪种收集器等。
如果不使用这个命令，还可以使用 `-XX:+HeapDumpOnOutOfMemoryError` 参数来让虚拟机出现 OOM 的时候，自动生成 dump 文件。
### jmap 命令用法
命令格式：
```
jmap [option] pid
```
option 选项参数：
* -dump - 生成堆转储快照。-dump:live 只保存堆中的存活对象。
* -finalizerinfo - 显示在 F-Queue 队列等待执行 finalizer 方法的对象
* -heap - 显示 Java 堆详细信息。
* -histo - 显示堆中对象的统计信息，包括类、实例数量、合计容量。-histo:live 只统计堆中的存活对象。
* -permstat - to print permanent generation statistics
* -F - 当-dump 没有响应时，强制生成 dump 快照
### jstat 使用示例
**生成 heapdump 快照**
dump 堆到文件，format 指定输出格式，live 指明是活着的对象，file 指定文件名
```
$ jmap -dump:live,format=b,file=dump.hprof 28920
Dumping heap to /home/xxx/dump.hprof ...
Heap dump file created
```
dump.hprof 这个后缀是为了后续可以直接用 MAT(Memory Anlysis Tool)等工具打开。
**#查看实例数最多的类**
```
$ jmap -histo 29527 | head -n 6
 num     #instances         #bytes  class name
----------------------------------------------
   1:      13673280     1438961864  [C
   2:       1207166      411277184  [I
   3:       7382322      347307096  [Ljava.lang.Object;
```
**查看指定进程的堆信息**
注意：使用 CMS GC 情况下，jmap -heap PID 的执行有可能会导致 java 进程挂起。
```
$ jmap -heap 12379
Attaching to process ID 12379, please wait...
Debugger attached successfully.
Server compiler detected.
JVM version is 17.0-b16
using thread-local object allocation.
Parallel GC with 6 thread(s)
Heap Configuration:
   MinHeapFreeRatio = 40
   MaxHeapFreeRatio = 70
   MaxHeapSize      = 83886080 (80.0MB)
   NewSize          = 1310720 (1.25MB)
   MaxNewSize       = 17592186044415 MB
   OldSize          = 5439488 (5.1875MB)
   NewRatio         = 2
   SurvivorRatio    = 8
   PermSize         = 20971520 (20.0MB)
   MaxPermSize      = 88080384 (84.0MB)
Heap Usage:
PS Young Generation
Eden Space:
   capacity = 9306112 (8.875MB)
   used     = 5375360 (5.1263427734375MB)
   free     = 3930752 (3.7486572265625MB)
   57.761608714788736% used
From Space:
   capacity = 9306112 (8.875MB)
   used     = 3425240 (3.2665634155273438MB)
   free     = 5880872 (5.608436584472656MB)
   36.80634834397007% used
To Space:
   capacity = 9306112 (8.875MB)
   used     = 0 (0.0MB)
   free     = 9306112 (8.875MB)
   0.0% used
PS Old Generation
   capacity = 55967744 (53.375MB)
   used     = 48354640 (46.11457824707031MB)
   free     = 7613104 (7.2604217529296875MB)
   86.39733629427693% used
PS Perm Generation
   capacity = 62062592 (59.1875MB)
   used     = 60243112 (57.452308654785156MB)
   free     = 1819480 (1.7351913452148438MB)
   97.06831451706046% used
```
---
## jstack
jstack 是 Java 堆栈跟踪工具。jstack 用来打印目标 Java 进程中各个线程的栈轨迹，以及这些线程所持有的锁，并可以生成 java 虚拟机当前时刻的线程快照（一般称为 threaddump 或 javacore 文件）。
线程快照是当前虚拟机内每一条线程正在执行的方法堆栈的集合，生成线程快照的主要目的是定位线程出现长时间停顿的原因，如线程间死锁、死循环、请求外部资源导致的长时间等待等。
`jstack` 通常会结合 `top -Hp pid` 或 `pidstat -p pid -t` 一起查看具体线程的状态，也经常用来排查一些死锁的异常。
线程出现停顿的时候通过 jstack 来查看各个线程的调用堆栈，就可以知道没有响应的线程到底在后台做什么事情，或者等待什么资源。 如果 java 程序崩溃生成 core 文件，jstack 工具可以用来获得 core 文件的 java stack 和 native stack 的信息，从而可以轻松地知道 java 程序是如何崩溃和在程序何处发生问题。另外，jstack 工具还可以附属到正在运行的 java 程序中，看到当时运行的 java 程序的 java stack 和 native stack 的信息, 如果现在运行的 java 程序呈现 hung 的状态，jstack 是非常有用的。
### jstack 命令用法
命令格式：
```
jstack [option] pid
```
option 选项参数
* -F - 当正常输出请求不被响应时，强制输出线程堆栈
* -l - 除堆栈外，显示关于锁的附加信息
* -m - 打印 java 和 jni 框架的所有栈信息
### jstack 使用示例
**找出某 Java 进程中最耗费 CPU 的 Java 线程**
1. 找出 Java 进程
    假设应用名称为 myapp：
    ```
    $ jps | grep myapp
    29527 myapp.jar
    ```
    得到进程 ID 为 21711
2. 找出该进程内最耗费 CPU 的线程，可以使用 ps -Lfp pid 或者 ps -mp pid -o THREAD, tid, time 或者 top -Hp pid
    TIME 列就是各个 Java 线程耗费的 CPU 时间，CPU 时间最长的是线程 ID 为 21742 的线程，用
    ```
    printf "%x\n" 21742
    ```
    得到 21742 的十六进制值为 54ee
3. 使用 jstack 打印线程堆栈信息
    下一步终于轮到 jstack 上场了，它用来输出进程 21711 的堆栈信息，然后根据线程 ID 的十六进制值 grep，如下：
    ```
    $ jstack 21711 | grep 54ee
    "PollIntervalRetrySchedulerThread" prio=10 tid=0x00007f950043e000 nid=0x54ee in Object.wait() [0x00007f94c6eda000]
    ```
    可以看到 CPU 消耗在 PollIntervalRetrySchedulerThread 这个类的 Object.wait()。
    注：上面的例子中，默认只显示了一行信息，但很多时候我们希望查看更详细的调用栈。可以通过指定 `-A ` 的方式来显示行数。例如：`jstack -l  | grep  -A 10`
3. 分析代码
    定位到下面的代码：
    ```
    // Idle wait
    getLog().info("Thread [" + getName() + "] is idle waiting...");
    schedulerThreadState = PollTaskSchedulerThreadState.IdleWaiting;
    long now = System.currentTimeMillis();
    long waitTime = now + getIdleWaitTime();
    long timeUntilContinue = waitTime - now;
    synchronized(sigLock) {
        try {
            if(!halted.get()) {
                sigLock.wait(timeUntilContinue);
            }
        }
        catch (InterruptedException ignore) {
        }
    }
    ```
    它是轮询任务的空闲等待代码，上面的 `sigLock.wait(timeUntilContinue)` 就对应了前面的 `Object.wait()`。
**生成 threaddump 文件**
可以使用 `jstack -l  > ` 命令生成 threaddump 文件
生成进程 ID 为 8841 的 Java 进程的 threaddump 文件。
```
jstack -l 8841 > /home/threaddump.txt
```
### thread dump 文件
java thread dump 文件内容见 https://dunwu.github.io/javacore/jvm/jvm-cli-tools.html#_4-2-thread-dump-%E6%96%87%E4%BB%B6
---
## jinfo
jinfo 是 Java 配置信息工具。jinfo 用于实时查看和调整虚拟机运行参数。如传递给 Java 虚拟机的 `-X`（即输出中的 jvm_args）、`-XX` 参数（即输出中的 VM Flags），以及可在 Java 层面通过 System.getProperty 获取的 `-D` 参数（即输出中的 System Properties）。
之前的 `jps -v` 口令只能查看到显示指定的参数，如果想要查看未被显示指定的参数的值就要使用 jinfo 口令。
jinfo 命令格式：
```
jinfo [option] pid
```
option 选项参数：
* -flag - 输出指定 args 参数的值
* -sysprops - 输出系统属性，等同于 `System.getProperties()`
jinfo 使用示例
```
$ jinfo -sysprops 29527
Attaching to process ID 29527, please wait...
Debugger attached successfully.
Server compiler detected.
JVM version is 25.222-b10
...
```
---
## jhat
jhat(JVM Heap Analysis Tool)，是虚拟机堆转储快照分析工具。jhat 与 jmap 搭配使用，用来分析 jmap 生成的 dump 文件。jhat 内置了一个微型的 HTTP/HTML 服务器，生成 dump 的分析结果后，可以在浏览器中查看。
注意：一般不会直接在服务器上进行分析，因为 jhat 是一个耗时并且耗费硬件资源的过程，一般把服务器生成的 dump 文件，用 jvisualvm 、Eclipse Memory Analyzer、IBM HeapAnalyzer 等工具来分析。
命令格式：
```
jhat [dumpfile]
```
---
## Source & Reference
- https://dunwu.github.io/javacore/jvm/jvm-gui-tools.html
- https://dunwu.github.io/javacore/jvm/jvm-cli-tools.html