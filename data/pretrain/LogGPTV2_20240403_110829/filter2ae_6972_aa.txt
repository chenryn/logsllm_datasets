# NX实现机制浅析
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x00前言
  * GNU Binutils Version：2.34
  * Kernel Version：4.15.0
  * Debugging Env：Ubuntu 20.04.02 x64
是否开启NX取决于参数`-z`设置，而gcc仅仅是将`-z keyword`传递给linker——ld，并不会真正解析该参数：
可以使用`-###`参数(该参数并不会执行任何命令，仅仅是打印命令及参数。若要执行命令需使用`-v`参数)查看这一过程：
> -v  
>  Print (on standard error output) the commands executed to run the stages of
> compilation. Also print the version number of the compiler driver program
> and of the preprocessor and the compiler proper.
>
> -###  
>  Like -v except the commands are not executed and arguments are quoted
> unless they contain only alphanumeric characters or `./-_`. This is useful
> for shell scripts to capture the driver-generated command lines.
上图中`collect2`会执行`ld`，并为其传递参数：
## 0x01 ld
查看下`-z`参数含义：
下面从源码角度来分析。`ld`相关源码位于ld目录下，`main`函数(位于`ldmain.c`文件)如下：
    ld_config_type config;
    ......
    struct bfd_link_info link_info;
    ......
    int
    main (int argc, char **argv)
    {
    ......
      config.build_constructors = TRUE;
      config.rpath_separator = ':';
      config.split_by_reloc = (unsigned) -1;
      config.split_by_file = (bfd_size_type) -1;
      config.make_executable = TRUE;
      config.magic_demand_paged = TRUE;
      config.text_read_only = TRUE;
      config.print_map_discarded = TRUE;
      link_info.disable_target_specific_optimizations = -1;
      command_line.warn_mismatch = TRUE;
      command_line.warn_search_mismatch = TRUE;
      command_line.check_section_addresses = -1;
      /* We initialize DEMANGLING based on the environment variable
         COLLECT_NO_DEMANGLE.  The gcc collect2 program will demangle the
         output of the linker, unless COLLECT_NO_DEMANGLE is set in the
         environment.  Acting the same way here lets us provide the same
         interface by default.  */
      demangling = getenv ("COLLECT_NO_DEMANGLE") == NULL;
      link_info.allow_undefined_version = TRUE;
      ......
      parse_args (argc, argv);
`parse_args`函数负责解析参数，位于`lexsup.c`文件：
    void
    parse_args (unsigned argc, char **argv)
    {
    ......
      char *shortopts;
      struct option *longopts;
      struct option *really_longopts;
    ......
      shortopts = (char *) xmalloc (OPTION_COUNT * 3 + 2);
      longopts = (struct option *)
          xmalloc (sizeof (*longopts) * (OPTION_COUNT + 1));
      really_longopts = (struct option *)
          malloc (sizeof (*really_longopts) * (OPTION_COUNT + 1));
      /* Starting the short option string with '-' is for programs that
         expect options and other ARGV-elements in any order and that care about
         the ordering of the two.  We describe each non-option ARGV-element
         as if it were the argument of an option with character code 1.  */
      shortopts[0] = '-';
      is = 1;
      il = 0;
      irl = 0;
      for (i = 0; i handle_option)
        return (*ld_emulation->handle_option) (optc);
      return FALSE;
    }
`ld_emulation`定义为`static ld_emulation_xfer_type
*ld_emulation;`，而`ld_emulation_xfer_type`结构针对不同架构及目标文件类型，其成员会有不同定义。以ELF文件为例，该函数定义位于`elf.em`文件中(由下图可以看到同目录下针对其他架构及目标文件类型的`.em`文件)：
    static bfd_boolean
    gld${EMULATION_NAME}_handle_option (int optc)
    {
      switch (optc)
        {
        default:
          return FALSE;
        ......
        case 'z':
        ......
          else if (strcmp (optarg, "execstack") == 0)
        {
          link_info.execstack = TRUE;
          link_info.noexecstack = FALSE;
        }
          else if (strcmp (optarg, "noexecstack") == 0)
        {
          link_info.noexecstack = TRUE;
          link_info.execstack = FALSE;
        }
上述函数调用关系为：
之后`main`函数调用`lang_process()`，位于ldlang.c文件中。`lang_process()`函数会调用`ldemul_before_allocation()`，该函数同样位于`ldemul.c`文件，其定义如下：
    void
    ldemul_before_allocation (void)
    {
      ld_emulation->before_allocation ();
    }
查看`elf.em`：
    static void
    gld${EMULATION_NAME}_before_allocation (void)
    {
      ldelf_before_allocation (audit, depaudit, ${ELF_INTERPRETER_NAME});
    }
`ldelf_before_allocation`函数定义位于`ldelf.c`文件中，其调用`bfd_elf_size_dynamic_sections`函数：
    ......
      if (! (bfd_elf_size_dynamic_sections
         (link_info.output_bfd, command_line.soname, rpath,
          command_line.filter_shlib, audit, depaudit,
          (const char * const *) command_line.auxiliary_filters,
          &link_info, &sinterp)))
        einfo (_("%F%P: failed to set dynamic section sizes: %E\n"));
    ......
而该函数会执行如下操作：
    ......
      if (info->execstack)
        elf_stack_flags (output_bfd) = PF_R | PF_W | PF_X;
      else if (info->noexecstack)
        elf_stack_flags (output_bfd) = PF_R | PF_W;
    ......
上述函数调用关系为：
`main`函数最终执行`ldwrite()`函数将stack_flags写入Segment的`p_flags`字段中：
    void
    ldwrite (void)
    {
      /* Reset error indicator, which can typically something like invalid
         format from opening up the .o files.  */
      bfd_set_error (bfd_error_no_error);
      lang_clear_os_map ();
      lang_for_each_statement (build_link_order);
      if (config.split_by_reloc != (unsigned) -1
          || config.split_by_file != (bfd_size_type) -1)
        split_sections (link_info.output_bfd, &link_info);
      if (!bfd_final_link (link_info.output_bfd, &link_info))
        {
          /* If there was an error recorded, print it out.  Otherwise assume
         an appropriate error message like unknown symbol was printed
         out.  */
          if (bfd_get_error () != bfd_error_no_error)
        einfo (_("%F%P: final link failed: %E\n"));
          else
        xexit (1);
        }
    }
调用的`bfd_final_link`函数针对不同目标文件会有不同实现，以ELF文件为例，该函数对应实现为`bfd_elf_final_link`，位于elflink.c文件。其调用`_bfd_elf_compute_section_file_positions`函数，该函数再调用`assign_file_positions_except_relocs`函数：
    /* Work out the file positions of all the sections.  This is called by
       _bfd_elf_compute_section_file_positions.  All the section sizes and
       VMAs must be known before this is called.
       Reloc sections come in two flavours: Those processed specially as
       "side-channel" data attached to a section to which they apply, and those that
       bfd doesn't process as relocations.  The latter sort are stored in a normal
       bfd section by bfd_section_from_shdr.  We don't consider the former sort
       here, unless they form part of the loadable image.  Reloc sections not
       assigned here (and compressed debugging sections and CTF sections which
       nothing else in the file can rely upon) will be handled later by
       assign_file_positions_for_relocs.
       We also don't set the positions of the .symtab and .strtab here.  */
    static bfd_boolean
    assign_file_positions_except_relocs (bfd *abfd,
                         struct bfd_link_info *link_info)
    {
      struct elf_obj_tdata *tdata = elf_tdata (abfd);
      Elf_Internal_Ehdr *i_ehdrp = elf_elfheader (abfd);
      const struct elf_backend_data *bed = get_elf_backend_data (abfd);
      unsigned int alloc;
      if ((abfd->flags & (EXEC_P | DYNAMIC)) == 0
          && bfd_get_format (abfd) != bfd_core)
        {
          ......
        }
      else
        {
          /* Assign file positions for the loaded sections based on the
         assignment of sections to segments.  */
          if (!assign_file_positions_for_load_sections (abfd, link_info))
        return FALSE;
          /* And for non-load sections.  */
          if (!assign_file_positions_for_non_load_sections (abfd, link_info))
        return FALSE;
        }
      if (!(*bed->elf_backend_modify_headers) (abfd, link_info))
        return FALSE;
      /* Write out the program headers.  */