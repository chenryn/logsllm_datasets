title:Know Thy Lag: In-Network Game Detection and Latency Measurement
author:Sharat Chandra Madanapalli and
Hassan Habibi Gharakheili and
Vijay Sivaraman
Know Thy Lag: In-Network Game Detection
and Latency Measurement
Sharat Chandra Madanapalli(B)
, Hassan Habibi Gharakheili
,
and Vijay Sivaraman
The University of New South Wales, Sydney, Australia
{sharat.madanapalli,h.habibi,vijay}@unsw.edu.au
Abstract. Online gaming generated $178 billion globally in 2020, with the pop-
ular shooter, action-adventure, role-playing, and sporting titles commanding hun-
dreds of millions of players worldwide. Most online games require only a few
hundred kbps of bandwidth, but are very sensitive to latency. Internet Service
Providers (ISPs) keen to reduce “lag” by tuning their peering relationships and
routing paths to game servers are hamstrung by lack of visibility on: (a) gam-
ing patterns, which can change day-to-day as games rise and fall in popularity;
and (b) locations of gaming servers, which can change from hour-to-hour across
countries and cloud providers depending on player locations and matchmaking.
In this paper, we develop methods that give ISPs visibility into online gaming
activity and associated server latency. As our ﬁrst contribution, we analyze packet
traces of ten popular games and develop a method to automatically generate sig-
natures and accurately detect game sessions by extracting key attributes from
network trafﬁc. Field deployment in a university campus identiﬁes 31 k game ses-
sions representing 9,000 gaming hours over a month. As our second contribution,
we perform BGP route and Geolocation lookups, coupled with active ICMP and
TCP latency measurements, to map the AS-path and latency to the 4,500+ game
servers identiﬁed. We show that the game servers span 31 Autonomous Systems,
distributed across 14 countries and 165 routing preﬁxes, and routing decisions
can signiﬁcantly impact latencies for gamers in the same city. Our study gives
ISPs much-needed visibility so they can optimize their peering relationships and
routing paths to better serve their gaming customers.
1 Introduction
Online gaming is experiencing explosive growth: 2.9 billion players collectively con-
tributed $178 billion to global revenues in 2020, representing a 23% growth over the
year before [2]. Popular online games like Fortnite, Call-of-Duty, League of Legends
and Counter-Strike account for hundreds of millions of online players. Interestingly,
most of these games are free-to-play, and generate their whopping revenues from in-
game purchases (in-game currency, emotes, skins, stickers, weapons, backblings, battle
passes, and other such trinkets). Game publishers and platforms are therefore strongly
motivated to give gamers the best possible experience to keep them engaged, and thus
deploy their game servers on cloud platforms across multiple countries in an effort to
minimize network latency for users.
c(cid:2) The Author(s), under exclusive license to Springer Nature Switzerland AG 2022
O. Hohlfeld et al. (Eds.): PAM 2022, LNCS 13210, pp. 395–410, 2022.
https://doi.org/10.1007/978-3-030-98785-5_17
396
S. C. Madanapalli et al.
Network latency (aka “lag”) is indeed one of the largest sources of frustration for
online gamers. A typical shooting game requires no more than a few hundred kbps of
bandwidth, so a higher speed broadband connection does not by itself have a mate-
rial impact on gaming experience. By contrast, a 100 ms higher latency can severely
handicap the gamer [20], since their gunshots will be slower to take effect, and their
movements lag behind others in the game. A whole industry of “game acceleration”
is dedicated to address the latency issue, ranging from gaming VPNs/overlays (e.g.,
WTFast [6] and ExitLag [1]) to gaming CDNs (e.g., SubSpace [5]); indeed, one inno-
vative eSport hosting company (OneQode [4]) has even gone to the extent of locating its
servers in the island of Guam to provide equidistant latency to several Asian countries.
Internet Service Providers (ISPs), who have hitherto marketed their broadband
offering based purely on speed, are now realizing that they are blind to latency. This
is hurting their bottom line, since gamers are vocal in online forums comparing gaming
latencies across ISPs, and quick to churn to get any latency advantage. With new game
titles and seasons launching every week, and their popularity waxing and waning faster
than the phases of the moon, ISPs are struggling to stay ahead to keep gamers happy,
and consequently bearing reputational and ﬁnancial damage.
ISPs have almost no tools today to give them visibility into gaming latencies. Tra-
ditional Deep Packet Inspection (DPI) appliances target a wide range of applications
spanning streaming, social media, and downloads, and have evolved to largely rely on
hostnames found in DNS records and/or the TLS security certiﬁcates of a TCP connec-
tion. Tracking modern games requires specialized machinery that can track UDP ﬂows
with no associated DNS or SNI signaling by matching on multiple ﬂow attributes in a
stateful manner. Further, game developers and publishers use different cloud operators
in various countries to host their game servers, and use dynamic algorithms for game
server selection depending on the availability of players and match making. These fac-
tors have made it very challenging for ISPs to get visibility into game play behaviors,
limiting their ability to tune their networks to improve gaming latencies.
In this paper we develop a method to detect games, measure gaming latencies, and
relate them to routing paths. Our ﬁrst contribution in Sect. 2 analyzes ten popular games
spanning genres, developers, and distributors. We identify key game-speciﬁc attributes
from network trafﬁc to automatically construct game signatures, and consolidate these
into an efﬁcient classiﬁcation model that can identify gaming sessions with 99% accu-
racy within ﬁrst few packets from commencement. Deployment of our classiﬁer in a
University network over a month identiﬁed 31 k game sessions spanning 9,000 gam-
ing hours, and we highlight interesting patterns of game popularity and engagement in
terms of session lengths.
Our second contribution in Sect. 3 uses the servers identiﬁed using our classiﬁer
from the previous contribution to measure game servers location and latencies. We per-
form BGP route and Geolocation lookups, coupled with active ICMP and TCP latency
measurements, to map the AS-path and latency to the 4,500+ game servers identiﬁed.
We illustrate the spread of game servers across 31 ASes, 14 countries, and 165 rout-
ing preﬁxes, and the resulting impact on latency for each game title. We further show
that different ISPs serving gamers in the same city can offer radically different gam-
ing latency, inﬂuenced by their peering relationships and path selection preferences.
Know Thy Lag
397
Table 1. List of games.
Game
Genre
Developer
Distributor/Publisher
Fortinite
Shooter
Call of Duty: Modern Warfare (CoD:MW) Shooter
RTS
World of Warcraft (WoW)
League of Legends (LoL)
MOBA
Counter Strike: Global Offensive (CS:GO) Shooter
Sports
FIFA 20/21
Rocket League
Sports
Card game
Hearthstone
Shooter Survival Battlestate Games
Escape From Tarkov
Genshin Impact
Action RPG
Epic Games
Epic Games
Blizzard Entertainment
Inﬁnity Ward
Blizzard Entertainment Blizzard Entertainment
Riot Games
Valve Corp.
Electronic Arts
Psyonix
Blizzard Entertainment Blizzard Entertainment
Riot Games
Steam
Origin
Steam
miHoYo
Battlestate Games
miHoYo
Our study gives ISPs much-needed visibility into gaming behaviors and game server
locations so they better optimize their networks to improve gaming latencies.
2 Game Detection
In this section, we begin by illustrating the network behavior of a representative online
game (Sect. 2.1), followed by developing: (i) a method to automatically generate sig-
natures of gaming ﬂows (Sect. 2.2), and (ii) a deterministic classiﬁer that combines the
signatures to passively detect games using in-network attributes (Sect. 2.3). The classi-
ﬁer is evaluated (Sect. 2.4) and deployed (Sect. 2.5) to observe the gaming patterns in
our university network.
We ﬁrst collected and analyzed hundreds of pcap traces by playing ten popular
online games (shown in Table 1) that represent a good mix across genres (e.g., Shoot-
ing, Strategy, Sport), multiplayer modes (e.g., Battle-Royale, Co-Operative, Player-vs-
Player), and developers/distributors. These traces (labeled lab data1) were collected by
playing games on a desktop computer in our university research lab. Next, we collected
over 1000 hours of game-play packet traces selected from a full mirror (both inbound
and outbound) of our university campus Internet trafﬁc (on a 10 Gbps interface) to our
data collection system from the campus border router2. Selected pcaps (labeled ﬁeld
data) were recorded by ﬁltering the IP address of the game servers (to which our lab
computer connected while playing). This helped us collect all game-play trafﬁc to those
“known” servers when someone on our campus played any game.
2.1 Anatomy of Multiplayer Games
Let us start with an illustrative example from a popular online game: Fortnite. It is a third
person shooter (TPS) game developed by Epic Games which has risen in popularity with
a game mode called Battle Royale wherein 100 players ﬁght each other to be the last
1 Dataset available on request from the corresponding author.
2 Ethics clearance (HC16712) obtained from UNSW Human Research Ethics Advisory Panel
398
S. C. Madanapalli et al.
one standing. Fortnite is played by over 350 million players around the world [3]. In
what follows, we outline the anatomy of a Fortnite game session by manually analyzing
a packet capture (pcap) trace from our labeled lab data.
Gamer Interaction: A gamer ﬁrst logs in to the Epic Games launcher and starts the
Fortnite game client. The game starts in a lobby where users have access to their social
network, collectibles, player stats, and game settings. When the user decides to play, the
client contacts Fortnite’s matchmaking server that groups players waiting in a queue and
assigns a server on which the online game runs. Subsequently, the match starts, and its
duration depends on how long the player lasts in the battle royale – the last one/team
standing wins among 100 players. After the game, the user returns to the lobby area,
where they may choose to start another game.
Network Behavior: From the pcap trace, we observe that the client communicates with
various service endpoints (which can be identiﬁed by their unique domain name) for
joining the lobby, matchmaking and social networking (as shown in Table 3 in Appendix
A). These communications occur over encrypted TLS connections and constitute “fore-
play” before game-play begins. Once the game starts, the actual game-play trafﬁc is
exchanged over a UDP stream between the client and a game server (which is usually
different from the foreplay endpoints). However, the IP address of the gaming server is
not resolved by DNS lookup – we, therefore, believe the server IP address is exchanged
over the encrypted connection during the matchmaking process. The lack of the server
identity/name (common across other game titles) makes the game-ﬂow detection chal-
lenging. We note that the game server and other servers may or may not be co-located
– e.g., the game server may be very close to the user, but the matchmaking server could
be operating from a different cloud in a different country.
The Fortnite game-play stream (identiﬁed using a ﬁve-tuple: SrcIP, DstIP, SrcPort,
DstPort and Protocol) has a packet rate of 30–40 pkt/sec upstream and about 30 pkt/sec
downstream throughout the game – ﬂuctuations depend on player actions. However,
this proﬁle of ﬂow rate (as used in some prior works to classify applications [12]) is
insufﬁcient to detect the game since we observed a similar pattern in other games. That
being said, the UDP stream has some idiosyncratic characteristics: it connects to port
9017 on the server in our example trace; it starts with a few packets of payload size
of 29 bytes; the ﬁrst upstream packet contains 28 trailing 0x00s; etc. These features,
albeit simple, seem to be unique to Fortnite. The other competitive games we analyzed
displayed similar patterns of user activity and interaction including contacting various
services and having idiosyncratic patterns in the ﬁrst few packets. We next describe
methods to analyze multiple gaming ﬂows to extract such signatures automatically.
2.2 Signature Generation
As brieﬂy mentioned above, game-play servers typically lack DNS records, and the
ﬂow rate proﬁle is quite similar across games. Therefore, identifying the game-play
ﬂows (among a mix of trafﬁc) becomes challenging and requires us to inspect packets
of ﬂows for patterns. While signatures can be generated manually by playing the game