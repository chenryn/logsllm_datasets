#include 
#include 
#include 
float weights[128][128][2][2];
int perm[128];
int rots[128];
int newperm[128];
int newrots[128];
int rnd(int l, int r) {
	return l + rand() % (r - l + 1);
}
double rnd() {
	return rand() / (float(RAND_MAX));
}
int main() {
	freopen("/tmp/spec", "r", stdin);
	int n;
	scanf("%d", &n);
	fprintf(stderr, "Started\n");
	for (int i = 0; i  n-2) continue;
            if (indices[0] >= indices[1]) continue;
            if (indices[2] >= indices[3]) continue;
            if (indices[0] = indices[2]) continue;
			int val = 0;
            val += weights[perm[indices[0]-1]][perm[indices[0]]][rots[indices[0]-1]][rots[indices[0]]];
            val += weights[perm[indices[1]]][perm[indices[1]+1]][rots[indices[1]]][rots[indices[1]+1]];
            val += weights[perm[indices[2]-1]][perm[indices[2]]][rots[indices[2]-1]][rots[indices[2]]];
            val += weights[perm[indices[3]]][perm[indices[3]+1]][rots[indices[3]]][rots[indices[3]+1]];
			int nex = 0;
            nex += weights[perm[indices[0]-1]][perm[indices[2]]][rots[indices[0]-1]][rots[indices[2]]];
            nex += weights[perm[indices[1]]][perm[indices[3]+1]][rots[indices[1]]][rots[indices[3]+1]];
            nex += weights[perm[indices[2]-1]][perm[indices[0]]][rots[indices[2]-1]][rots[indices[0]]];
            nex += weights[perm[indices[3]]][perm[indices[1]+1]][rots[indices[3]]][rots[indices[1]+1]];
			int r = rnd()  indices[1]) continue;
            int val = 0;
            val += weights[perm[indices[0]-1]][perm[indices[0]]][rots[indices[0]-1]][rots[indices[0]]];
            val += weights[perm[indices[1]]][perm[indices[1]+1]][rots[indices[1]]][rots[indices[1]+1]];
            int nex = 0;
            nex += weights[perm[indices[0]-1]][perm[indices[1]]][rots[indices[0]-1]][1-rots[indices[1]]];
            nex += weights[perm[indices[0]]][perm[indices[1]+1]][1-rots[indices[0]]][rots[indices[1]+1]];
			int r = rnd()  n-2: continue
            if indices[0] >= indices[1]: continue
            if indices[2] >= indices[3]: continue
            if indices[0] = indices[2]: continue
            val = 0
            val += weights[(perm[indices[0]-1], perm[indices[0]], rots[indices[0]-1], rots[indices[0]])]
            val += weights[(perm[indices[1]], perm[indices[1]+1], rots[indices[1]], rots[indices[1]+1])]
            val += weights[(perm[indices[2]-1], perm[indices[2]], rots[indices[2]-1], rots[indices[2]])]
            val += weights[(perm[indices[3]], perm[indices[3]+1], rots[indices[3]], rots[indices[3]+1])]
            nex = 0
            nex += weights[(perm[indices[0]-1], perm[indices[2]], rots[indices[0]-1], rots[indices[2]])]
            nex += weights[(perm[indices[1]], perm[indices[3]+1], rots[indices[1]], rots[indices[3]+1])]
            nex += weights[(perm[indices[2]-1], perm[indices[0]], rots[indices[2]-1], rots[indices[0]])]
            nex += weights[(perm[indices[3]], perm[indices[1]+1], rots[indices[3]], rots[indices[1]+1])]
            rnd = random.random()  indices[1]: continue
            val = 0
            val += weights[(perm[indices[0]-1], perm[indices[0]], rots[indices[0]-1], rots[indices[0]])]
            val += weights[(perm[indices[1]], perm[indices[1]+1], rots[indices[1]], rots[indices[1]+1])]
            nex = 0
            nex += weights[(perm[indices[0]-1], perm[indices[1]], rots[indices[0]-1], 1-rots[indices[1]])]
            nex += weights[(perm[indices[0]], perm[indices[1]+1], 1-rots[indices[0]], rots[indices[1]+1])]
            rnd = random.random() < math.exp(-i / (ITER/20.0))
            if nex < val or rnd:
                print "Ok2", i, rnd
                newperm = perm[:]
                newrots = rots[:]
                for i in range(indices[1] + 1 - indices[0]):
                    newperm[indices[0] + i] = perm[indices[1] - i]
                    newrots[indices[0] + i] = 1 - rots[indices[1] - i]
                perm = newperm
                rots = newrots
*/