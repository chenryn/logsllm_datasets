# 优化后的文本

## 表4：模糊测试实验结果
| 设备/协议 | 检测到的崩溃次数 | 执行时间 |
| --- | --- | --- |
| STM UDP Server | 0 | 19,214,779 | 3d:8h |
| STM UDP Client | 0 | 12,703,448 | 3d:8h |
| STM TCP Server | 0 | 16,356,129 | 3d:8h |
| STM TCP Client | 16,723,950 | - | 3d:8h |
| STM ST-PLC | 27 | 456,368 | 1d:10h |
| NXP TCP Server | 0 | 240,720,229 | 14d:0h |
| NXP UDP Server | 0 | 186,839,871 | 14d:0h |
| NXP HTTP Server | 612 | 8,081 | 1,090, 23,982, 38,788, 3,261, 3,794, 4,848, 5,012, 772, 5164, 3032, 9710 | - |

### 实验设置与结果
表4展示了AFL在模糊测试会话期间提供的统计信息。我们在一台12核/24线程的Xeon服务器上进行了实验，该服务器配备96GB RAM。由于我们去除了对原始硬件的依赖，能够将这些实验扩展到该硬件的全部容量。

我们在这里包含了WYCINWYC的例子，因为它提供了一个嵌入式环境中的崩溃检测基准。该固件使用了与先前实验相同的STM HAL，并且没有实现额外的处理程序。我们将串行端口模型替换为我们的模糊模型，并使用随二进制文件提供的非崩溃XML输入作为种子进行模糊测试。我们触发了[44]中五个崩溃中的四个，而无需额外的崩溃检测工具，并通过添加第3.4节中描述的ASAN风格的清理器触发了最后一个崩溃。

其余的固件则按照交互实验的方式重新托管，用模糊模型替换了I/O服务器，并增加了与模糊相关的工具。我们还提供了处理程序来禁用库提供的非确定性行为（例如`rand()`），并通过简单地记录先前实验中执行的有效交互并将其序列化为AFL可以变异的形式生成输入。

这些实验揭示了固件样本中的漏洞。ST-PLC固件实现了一个可编程逻辑控制器，它执行上传的梯形图逻辑程序。它使用Wi-Fi连接从Android应用程序接收梯形图逻辑程序。这个样本非常依赖于定时器，因此我们利用了确定性的定时器机制以确保每个输入都为AFL产生相同的信息块。我们仅向AFL提供了一个从STM PLC的Android应用捕获网络流量获得的最小梯形图逻辑程序样本。几分钟后，AFL检测到了一个越界内存访问；进一步检查后，我们发现固件的全局数据段中存在缓冲区溢出，这可能导致任意代码执行。这一漏洞此前未知，我们正在与供应商合作进行缓解。

Atmel HTTP服务器固件是一个运行在流行的lwIP TCP/IP堆栈之上的小型HTML和AJAX应用程序。经过近9天的测试，AFL检测到了267个“唯一”崩溃，我们使用附带的最小化工具将其简化为37个崩溃。手动检查显示这些崩溃与两个错误有关：lwIP本身的堆双释放以及HTTP服务器错误使用lwIP函数导致的堆使用后释放。固件及其Atmel ASF SDK自带的是过时版本的lwIP（版本1.4.1），这两个问题已被lwIP开发者修复。然而，即使是在AFL指导下的随机以太网帧突变也不大可能在固件的核心应用逻辑中产生很多覆盖率。为了更直接地针对HTTP服务器而不是IP堆栈，我们可以利用高级仿真灵活性，将二进制文件重新托管为lwIP库（由LibMatch发现）的TCP API形式，从而让模糊测试的数据包更深入地进入程序。在更高层次上的模糊测试很快发现了HTTP服务器在处理GET请求解析时的一个缓冲区过度读取，这会导致堆中的信息泄露。

6LoWPAN样本中的三个崩溃对应于分片数据包重组处理中的缓冲区溢出，导致受控输入覆盖二进制文件数据段中的许多对象，最终可能导致远程代码执行。这个问题与Contiki-OS平台相关，如前例所示，已在最新SDK版本中修复。然而，最新版本中的修复引入了两个关键漏洞，我们已报告为CVE-2019-8359和CVE-2019-9183。我们与Contiki作者合作修补了这些漏洞。

这些实验表明，HALucinator能够在不进行大规模重新工程且不需要任何硬件的情况下，对固件进行实际的安全分析。其可扩展性不仅体现在可模拟的固件类型上，还体现在可以同时并发模拟的实例数量上。这使得大型并行化分析和测试（如模糊测试）成为可能。在真实固件样本中发现漏洞证明了这种仿真是动态分析复杂固件的有效方法。

## 相关工作
HALucinator借鉴了函数和库标记以及固件仿真的相关研究。

### 函数识别与标记
先前的工作探索了“函数识别”的各个方面。尽管术语有很多重载用途，但重要的是要区分LibMatch解决的问题（在固件样本中标记特定的二进制函数名称）与其他问题。BinDiff [28, 55] 及其开源替代品Diaphora [21] 使用图匹配技术有效地比较两个程序。虽然这些工具可以通过将目标二进制文件与每个库对象匹配来有效地标记函数，但它们无法处理冲突。

多个先前的研究探讨了函数标记问题，使用各种从函数中提取特征的方法和匹配方法，将一组代码与另一组代码关联起来。特征提取技术包括基于函数前导的签名 [31]、系统调用的反向切片 [35] 以及符号执行的跟踪 [46, 47]。通过贝叶斯网络 [15]、神经网络 [33] 和局部敏感哈希 [24] 进行提取特征的匹配。不幸的是，由于几个挑战，这些系统都不适合用于标记固件中的函数：无法分析或执行ARM Cortex-M代码、由于HALs中的函数规模小且相似度高而导致机器学习方法缺乏信息、以及一些方法无法高效处理冲突。这种现有方法的缺失促使我们开发了一种专门针对嵌入式固件的功能匹配方法。

### 固件仿真
许多先前的研究探索了嵌入式固件仿真的挑战。最普遍的方法是使用硬件回路执行，如AVATAR [58]、AVATAR2 [43] 和SURROGATES [36] 中所见。在这种系统中，物理目标设备通常通过调试端口与分析环境相连，其硬件外设在执行过程中由标准仿真器使用。这种方法受限于其对硬件的可见性；即使有完整的调试器支持，也只有处理器的状态对仿真器可见。外设内部状态未与仿真器同步，外部事件（如超时或数据接收）修改外设状态，导致其与仿真器状态偏离，这可能导致仿真器尝试通过读写外设寄存器修改外设状态时出现错误执行或故障。此外，当前的硬件回路方法不支持中断或直接内存访问（DMA）。HALucinator通过开发者用于执行DMA的同一HAL处理中断和DMA，从而能够仿真当前硬件回路方法无法处理的固件。

另一种仿真方法 [19, 20] 是利用高级操作系统（如Linux）的存在作为抽象点，并用能够在仿真器中运行的版本替换固件版本。这可以视为一种高级仿真，因为它使用用户内核屏障作为建模边界。然而，这种方法仅适用于具有文件系统镜像且无需运行任何设备特定代码即可启动的固件。在这项工作中，我们特别针对“blob”固件，这类固件出现在没有此类操作系统的设备中。

所有这些系统，包括HALucinator，都依赖于底层仿真器来执行代码并提供真实的或仿真的外设。流行的开源QEMU [18] 为大多数系统提供了基础，并且本身包含支持多种芯片和板载外设模型，以启动某些固件。SIMICS [38, 57] 允许实施周期精确的仿真器，但需要繁琐的手动努力来构建默认发行版中未表示的任何设备模型。然而，随着流行嵌入式CPU数量的激增，这些仿真器在重新托管给定固件方面的实用性正在下降。

HALucinator借鉴了游戏机仿真 [23, 56] 的工作，该游戏机仿真开创了HLE的概念，尽管是应用于特定的硬件环境和软件堆栈。HALucinator代表了这一思想的泛化，并首次将其应用于嵌入式固件的安全性。

如果源代码可用，也可以在没有完全仿真的情况下重新托管固件。Contiki [45]、mBed [39] 和RIOT-OS [17] 的模拟器允许开发人员将其固件代码编译成可在主机系统上运行的二进制文件。相比之下，HALucinator允许对最终的固件二进制文件进行类似的重新托管，而无需源代码。

最近，P2IM [12] 和Pretender [32] 等方法通过直接建模MMIO外设实现了嵌入式固件的自动化重新托管。Pretender通过记录原始设备的MMIO活动来实现这一点，而P2IM则利用整个MMIO层的盲模糊测试。这些方法本身有不同的实用性；P2IM不能作为通用的重新托管解决方案，而Pretender需要可仪器化的原始硬件。虽然完全自动化是一个重要的目标，但我们预计HALucinator的一些手动方面可以在未来实现自动化，HALucinator的HLE方法使其能够处理这两种自动化系统都无法处理的许多情况。

首先，两项工作都将DMA列为主要限制；由于DMA通常与高性能外设一起使用，其复杂性往往在库中实现，HALucinator通过简单地从程序中移除DMA来处理DMA。我们在第5.3节中重新托管了多个包含DMA的样本。其次，P2IM仅将MMIO交互序列视为输入；当找到崩溃时，必须将其映射回外部刺激，这需要深入了解外部外设的MMIO接口。基于HLE的方法不存在这个问题，因为它们只处理外部刺激，输入可以轻松地在真实和虚拟化目标上重放。

## 局限性和讨论
我们认为LibMatch和HALucinator代表了嵌入式固件动态分析实用性和可扩展性的重要一步。然而，总体问题尚未完全解决。在这里，我们将讨论局限性以及嵌入式固件分析中的开放问题。

### HAL的使用和可用性
本文所述的高级仿真过程要求固件使用HAL，并且HAL必须可供分析师使用（例如，开源或微控制器SDK的一部分）。LibMatch数据库的编译环境必须类似于固件的编译环境，并且QEMU必须支持微控制器架构。即使满足这些条件，也必须为每个HAL开发处理程序和外设模型。在这些限制方面取得的任何进展都将增加HALucinator在固件分析中的适用性。

我们注意到，微控制器供应商正在投入大量资源开发HAL，并以宽松条款许可它们。虽然我们无法估计当今使用HAL的设备数量，但我们预计这些步骤将导致HAL使用的迅速增加。但是，如果固件样本中未使用HAL，或者HAL不可供分析师使用，则LibMatch无法用于识别可用于高级仿真的接口。这并不禁止高级仿真；逆向工程师可以手动识别二进制文件中有用的抽象。这可能比编写低级QEMU外设更可取。

### 库匹配
LibMatch在库匹配算法之上实现了扩展，使它们可用于在固件中查找HAL和库。然而，我们注意到，特别是当编译器或库版本未知时，LibMatch的有效性是有限的。这种限制来自于函数匹配技术无法应对编译器生成代码中的变化。虽然已经提出了一些部分技术，最近在[24]中，但这个问题在一般情况下仍未解决。高级仿真和LibMatch将直接受益于函数匹配领域未来的任何进展。LibMatch的主要贡献是利用函数的上下文（调用者/被调用者）来消除二进制等效函数的歧义，这是HALucinator正确拦截和替换函数所必需的。

## 结论
我们探讨了高级仿真的概念，以帮助嵌入式“blob”固件的实际重新托管和分析。为了找到有用的抽象，我们展示了改进的二进制库匹配，以在二进制固件映像中检测硬件抽象层和其他常用库。然后将实现分解为跨固件样本和芯片模型可重用的抽象组件。

HALucinator是第一个将这些技术结合成一个系统的工具，既可用于交互式动态分析，也可用于模糊测试。我们重新托管了来自三个不同供应商的CPU和HAL的16个固件样本，涵盖了各种复杂的外设。高级仿真使这一过程变得简单，允许重新托管只需很少的人工干预，且无需侵入真实硬件。最后，我们通过使用它检测固件样本中的安全漏洞，展示了HALucinator在安全方面的应用。我们认为，高级仿真将使分析人员能够广泛探索嵌入式固件样本，进行模糊测试和其他分析。HALucinator可在https://github.com/embedded-sec/halucinator获取，HALucinator-fuzzer可在https://github.com/ucsb-seclab/hal-fuzz获取。

## 致谢
感谢Bo Feng和Long Lu为我们提供了本文中使用的一些固件样本。我们还要感谢Michael Bailey在编辑本文时的指导。

Sandia国家实验室是由National Technology & Engineering Solutions of Sandia, LLC管理运营的多任务实验室，该公司是Honeywell International Inc.的全资子公司，根据合同DE-NA0003525 (SAND2019-14482 C) 为美国能源部国家核安全局服务。本材料基于ONR资助编号N00014-17-1-2011和N00014-17-1-2513、NSF资助编号CNS-1718637、CNS-1704253和CNS-1801601、AFRL和DARPA协议编号FA8750-19-C-0003以及国土安全部协议编号FA8750-19-2-0005的支持。美国政府有权复制和分发再版，尽管其中可能带有版权标记。本文中的观点和结论仅代表作者的观点，不应解释为代表美国能源部、国土安全部、海军研究办公室、AFRL、DARPA或美国政府的官方政策或认可。该项目得到了欧洲研究理事会（ERC）在欧盟Horizon 2020研究和创新计划（资助协议编号850868）的支持。

### 参考文献
[1] Amazon FreeRtOS Vendors. https://github.com/aws/amazon-freertos/tree/master/vendors.
[2] Atmel studio 7 - microchip technologies. https://www.microchip.com/mplab/avr-support/atmel-studio-7.
[3] Build With Mbed. https://www.mbed.com/built-with-mbed/.
[4] Code studio composer integrated development environment. http://www.ti.com/tool/CCSTUDIO.
[5] CSAW Embedded Security Challenge. https://csaw.engineering.nyu.edu/esc.
[6] Halucinator: rf233.py. https://github.com/embedded-sec/halucinator/blob/master/src/halucinator/bp_handlers/atmel_asf_v3/rf233.py.
[7] HALucinator: stm32f4_uart.py. https://github.com/embedded-sec/halucinator/blob/master/src/halucinator/bp_handlers/stm32f4/stm32f4_uart.py.
[8] Mbed OS Repo - ARMmbed/mbed-os/targets. https://github.com/ARMmbed/mbed-os/tree/master/targets.
[9] stm32duino - Arduino_Core_STM32/system. https://github.com/stm32duino/Arduino_Core_STM32/tree/master/system.
[10] System Workbench for STM32. https://www.st.com/content/st_com/en/products/development-tools/software-development-tools/stm32-software-development-tools/stm32-ides/sw4stm32.html.
[11] TrustworthyComputing / csaw_esc_2019 - Github. https://github.com/TrustworthyComputing/csaw_esc_2019.
[12] P2im: Scalable and hardware-independent firmware testing via automatic peripheral interface modeling. In 29th USENIX Security Symposium (USENIX Security 20), Boston, MA, August 2020. USENIX Association.
[13] American Fuzzy Lop. http://lcamtuf.coredump.cx/afl/.
[14] AFL-Unicorn. https://github.com/rcmaehl/afl-unicorn.