popular apps such Unblock Me Free and Clash of Clans, which
have been installed for over 50 million times each.
On the iOS side, we were surprised to ﬁnd that 2.94% of
the apps from the ofﬁcial Apple Store are infected through the
PhaLibs (706 variations). It is widely believed that very few
PHAs exist on Apple’s ofﬁcial market. As far as we know, the
number of disclosed PHAs is very few till now [12]. However,
by mapping Android PhaLibs to iOS apps, we were able to
identify 2,844 apps (out of 96,579) to be PHAs. Some of them
are quite popular, for example, the popular game called “2048”.
We have reported those PhaLibs and apps to the Apple security
team. Also, we note that 50.45% of these PHAs were actually
uploaded this and last year, which indicates that suspicious
apps are more likely to be among the new apps on the Apple
Store (Figure 13 shows the distribution of such PHAs over the
time they stay on the Apple Store). One possible explanation
is that PHA authors are increasingly moving their attentions
to the Apple platform. In the meantime, we found that 1,346
apps have been on the store for quite a long time (24 months).
On the third-party Apple stores, our research shows that
8.7% of the apps there are PHAs (about 3 times of those on
the ofﬁcial Apple Store), which is comparable with the Android
markets [2]. Altogether, 3,998 out of 45,966 apps there are
infected through PhaLibs. Table III presents the ﬁndings across
the ofﬁcial and third-party markets.
Market
Type
Apple Store Global Ofﬁcial
Area
91
51 ipa
Baidu*
Vshare
China 3rd party**
China
Jailbreak
Jailbreak
China
Jailbreak
US
Jailbreak
PandaApp US
iDownloads Russia
Jailbreak
# of PhaLibs # of apps studied # infected apps
2,844 (2.94%)
2,985 (8.69%)
159 (6.13%)
306 (5.67%)
389 (17.98%)
148 (11.46%)
11 (5.91)%
96,579
34,338
2,594
5,393
2,163
1,292
186
23
16
10
16
10
7
3
TABLE III: PhaLibs in iOS markets
(*Apps are from Baidu cloud disk, uploaded by multiple users. **3rd party apps for
non-jailbreaking iPhones.)
Behavior. We analyzed all 117 Android PhaLibs to understand
their potentially harmful behaviors, focusing primarily on the
activities matching those within their iOS counterparts (through
the IAC sequences as described in Section III-C). Besides
common activities such as tracking users’ ﬁne location and
sending out private data (e.g., IMEI, app list, phone number,
etc.), our study leads to the discovery of a set of highly
suspicious activities never reported by prior research. For
example, some ad libraries (e.g, adwo) were found to contain
back-doors that execute the commands received from a remote
server, taking photos/videos/audios and sending them out to
any IP address given by the server. Further under the server’s
control, the libraries can read or even add items to the user’
contact list. Such operations may allow the adversary to modify
an existing contact using her information (e.g., replacing a
friend’s email or website with those under the adversary’s
control), which opens the door to an impersonation attack.
Also interestingly, the ad library adwo even operates on the
user’s photo gallery, with the capability to add, delete and edit
photos there. This is very unusual for an ad library, as it is
less clear how the capability can legitimately serve advertising
purpose. On the other hand, we note that some known memory
ﬂaws can be exploited through pictures [33], which can be
executed using such a capability. Other identiﬁed suspicious
behaviors include reading from the user’s reminder, calendar
and passbook, and changing her todo list, etc., which could
have serious consequences (e.g., changing the dosages of the
medication on one’s todo list). Again, it is certainly surprised
to see that such behaviors are performed within an ad library
like adwo. Another dangerous operation is to open any URL
scheme given by a remote party, which may cause the device
368368
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:50 UTC from IEEE Xplore.  Restrictions apply. 
to download any app indicated by the adversary or running
any app on the device. Finally we found that some PhaLibs
(mostly ad libraries) even prompt the user to send an SMS
message or email or make a phone call. All these behaviors
were successfully triggered in our research through a (manual)
dynamic analysis, indicating that the threats they pose are
indeed real. Table IV summarizes our ﬁndings.
On the iOS front, which is supposed to be securer due to
Apple’s rigorous security control, we were surprised to ﬁnd that
most of the aforementioned harmful behaviors are preserved
within the corresponding iOS PhaLibs, as illustrated in Table IV.
From the table, we can see that compared with the Android-side
behaviors, the only one missing on the list is reading the contact
list, whose Android-side IAC sequences were never matched
to any behavior on the iOS side. This capability turns out to be
well guarded on iOS, requiring the com.apple.security.personal-
information.addressbook entitlement rarely granted to the app
without proper justiﬁcation. An example of such a PhaLib
is adwo, a library integrated within 111 Android apps and
61 iOS apps. Interestingly, though the behavior (reading the
contacts) failed to show up on the library’s iOS version, we
found that the function interface for this operation is still left
there within the library but the body of the function is empty.
Further we observed that some Android-side functionalities
have been changed to suit iOS, though the relations cross the
platforms are still clearly there: for example, the check on
whether a device has been rooted has been replaced with a
jailbreak check, which could lead to installing apps through
private APIs. We also note that some dangerous activities that
can be performed stealthily on an Android device (e.g., sending
SMS message) have to be done in a more explicit way on
iOS: i.e., asking for the user’s consent. This indicates that the
adversary indeed has to adapt to the more restrictive security
control on iOS. On the other hand, our research also reveals
some iOS-speciﬁc suspicious behaviors (showing up on the IAC
sequence within iOS apps): a PhaLib wanpu was found to call
_SecItemCopyMatching for accessing and operating on
its hosting app’s keychain, which could lead to the disclosure
of the user’s password and other private information associated
with the app (Figure 16 in appendix).
Behavior
send emails
make a phone call
take a picture and send it out
record/play voice
send text messages
iOS Android
Y
Y
Y
Y
Y
Y
Y
N
Y
steal cpu, mem info, ip address, device ID, arch Y
Y
Y
Y
read/write/detele bookmarks
download apps and install
steal user accounts, location, phone number
jailbreak related
access keychain
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
N
N
inject javascript code
steal contact list
TABLE IV: Comparing Android and iOS PhaLib behaviors
Simultaneously and independently, FireEye recently blogs
the discovery of mobiSage, an iOS SDK embedded with
a back-door that infects thousands of iOS apps [34]. This
SDK has also been discovered in our study, together with its
369369
iOS
iOS
N/A
N/A
835,000
2,500,000
Lib name System # Infected apps # Downloads Reported?
mobiSage Android
adwo Android
Leadbolt Android
admogo Android
wanpu Android
prime31 Android
jirbo Android
123
32
111
61
1189
275
102
134
368
13
7042
N/A
N/A
N/A
N/A
N/A
192,075,251
3,162,160
399,150
N/A
iOS
iOS
N
Y
N
N
N
N
N
N
N
N
N
N
N
N
iOS
iOS
iOS
7
3295
186
N/A
Behaviors
CA,RE, LO, KE
CA, RE, LO, CO, SMS
EM, PH, DE, JA, JS
DE, LO, JS
SMS, LO, DE, JA
JA, DE, IN, LI, KE
SMS, LO, DE, PH
LO, DE, PH
TABLE V: Example of backdoors on Android and iOS markets
CA: Camera; RE: Record; LO: Location; KE: Keychain (only iOS); CO: Contact; EM:
Email; PH: Phone; DE: Device Info; JA: JailBroken (only iOS); JS: Inject Javascript
(# downloads is not available in Apple Store or in third-party Android markets.)
code; IN: Install apps; LI: List apps
Android version, which has never been reported before. Most
importantly, the SDK is just one of the back-door PhaLibs
we found. Others are presented in Table V. These PhaLibs all
exhibit similar behaviors as adwo across their Android and
iOS versions. Their impacts are described in the table. More
details are given in Appendix (Figure 14 and 17).
C. Android PhaLibs
Spread through repackaging. By analyzing different varia-
tions of Android PhaLibs, we found that some of them are
actually benign, not including any potentially-harmful activities
discovered in the other variations of the same library. Most
intriguing is that among all 117 PhaLibs recovered from apps,
58 do not have their harmful variations found on Google
Play. Actually these variations were all collected from third-
party markets. Table II present examples for those libraries
and the markets where their potentially harmful variations
were discovered. To ﬁnd out where their potentially harmful
code come from, we utilized Dex2jar [35] to disassemble
these libraries’ bytecode into Java source code and compare
them to extract the difference that contains potentially harmful
code. Typical behaviors of the code snippet is sending devices’
information (e.g., deviceID and simSerialNumber), dis-
covered from the PhaLib mappn, an analytics library integrated
in the apps such as CrazyMachines GoldenGears Lite (at least
500,000 installs). Searching the snippet on Google reveals that
the potentially harmful code actually exists on Github. This
indicates that highly likely mappn, a popular library for a
famous Chinese app market, has been repackaged to spread
potentially harmful code. We also note that it is very common
that a library (sometimes very famous like Facebook) will
refer another one to utilize its functionalities. Once the referred
library is infected (usually less noticeable by developers), it is
very dangerous for developers to include them in their apps
(examples are in appendix).
Prior research shows that repackaging popular apps is the
main channel for propagating Android PHAs [36], since the
PHA authors can free-ride the popularity of the legitimate apps
to reach out to a large number of Android users. A limitation
of this approach is that the repackaged app usually cannot be
uploaded to the market hosting the original version of the app,
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:50 UTC from IEEE Xplore.  Restrictions apply. 
particularly for the reputable place like Google Play, since this
will cause the potentially harmful app to be easily exposed. By
comparison, library repackaging does not have this problem.
Very likely multiple apps in the same markets are all integrated
with the same PhaLib. Also, such libraries could even be used
by highly popular apps, such as Unblock Me Free and Clash
of Clans, as discovered in our research, which unwittingly
get infected when incorporating the contaminated versions of
legitimate libraries.
Library embedding. We also found that some libraries
contains other libraries (embedded libraries) to utilize their
functionalities. In this case, once an embedded library is
infected, its host library also becomes contaminated: e.g.,
Adview contains 42 libraries like adwo. Other examples
include famous ad libraries like admob and adsmogo, each
impacting millions of users around the world.
Our research demonstrates that library embedding is likely
to be another channel for spreading potentially harmful code.
Unlike direct attachment of the code to a library, placing it
within a legitimate library integrated into another library is
much stealthier. Such indirect contamination could propagate
the harmful code even to highly reputable libraries: it is con-
ceivable that the developers of such a library would not directly
utilize the code from untrusted sources; however, as long as
any libraries down its embedding chain are contaminated by a
PhaLib, the library gets infected.
D. iOS PhaLibs
Repackaging. Our research shows that repackaged libraries
are also extensively present on the Apple platform. Speciﬁcally,
we found that 2 iOS libraries have both benign and potentially
harmful variations. To better understand the code, we disassem-
bled the library binaries and compared the code of different
variations. We found that lots of potentially harmful behaviors
disappear from the version of the library integrated within the
apps on the ofﬁcial Apple Store. One possibility is that Apple’s
restrictive vetting process that forces some libraries, such as
those for advertising, to become less aggressive. More probably,
however, we could imagine that the adversary might infect
some legitimate libraries and spread them across the Internet,
which are picked up by less prominent developers to build the
apps for regional customers (e.g., China). This is likely due to
the great ﬁrewall of China that has signiﬁcant impacts on the
speed of the Internet for downloading the libraries from the
websites outside the country. Interestingly, Chinese developers
tend to obtain the toolkits from the domestic repositories, which
just gives the adversary an opportunity to upload contaminated
versions there. Indeed, on the third-party markets (particularly
in the Chinese markets like 91 Market and 51ipa Market), the
same libraries tend to contain more suspicious behaviors. An
example is appﬂood, which has been embedded in 61 apps
(e.g., WildPuzzles, 123Karaoke and DotMatch) on the Apple
App Store and 53 apps like Bulu Monster-1.3.0 on the third-
party markets. Comparing the variations of the libraries across
the apps on these two markets, it is interesting to see that even
though they are clearly the variations of the same library (same
names, 95% of identical methods and the same functionalities),
the version of lotuseed on the 91 Market includes additional
code accessing location, while the version used on the Apple
Store does not have such behaviors.
Evasion strategy. We found that some PhaLibs apparently
are designed to be less noticeable, trying to avoid explicitly
asking for permissions from the user. As an example, within
library lotuseed, we found that it has a unique strategy to
perform the operations that need the user’s consent (e.g.,
collecting ﬁne user locations): the PhaLib does not call the API
requestWhenInUseAuthorization, which will cause
a window to pop up to seek the user’s approval, and instead,
just read the last retrieved location data from the host app in
background, as if the permission had already been granted. In
this case, if the app does not have the permission, then nothing
will happen and otherwise, the location data will be obtained
by the library. Either way, the user will not be notiﬁed of the
behavior. In other words, the PhaLib leverages the consent an
app already gets from the user (for its legitimate functionality)
to execute potentially harmful actions. The similar strategy was
also found in other PhaLibs.
Interestingly, we found that such behaviors exist on both iOS
and Android side. For example, the iOS version of lotuseed
has the aforementioned behavior and its Android version
also checks the presence of permission android.permission.
ACCESS FINE LOCATION before accessing a user’s location.
Only when the permission is granted, does lotuseed request for
the user’s accurate location and send it out to a remote server.