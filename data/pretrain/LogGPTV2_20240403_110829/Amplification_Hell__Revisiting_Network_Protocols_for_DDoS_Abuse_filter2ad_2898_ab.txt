do, however, allow non-ampliﬁed trafﬁc reﬂection attacks.
B. Ampliﬁer Enumeration
In this section, we enumerate the ampliﬁers per protocol,
i.e., the set of public hosts that may be abused for ampliﬁcation
attacks. In case of DNS, dedicated projects already track the
number of open resolvers that could be used to launch DRDoS
attacks using DNS. However, for the majority of the other
protocols,
the number of potential ampliﬁers is unknown.
The more ampliﬁers are available, the harder it becomes to
identify or alert attack sources and the higher is the maximum
attack bandwidth. We use three techniques to enumerate the
ampliﬁers for the 14 analyzed protocols: scanning, crawling
and querying master servers.
For network services, we assume that they run on their
standardized UDP port and we scan the Internet for available
ampliﬁers. To save resources and limit the noise of our scans,
we scan a random sample of 106 IP addresses out of the set of
all 2.6 billion advertized IPv4 addresses. We then extrapolate
the total number of ampliﬁers from the number of ampliﬁers
found during our partial scan. In our experiments, we used a
synchronous 150 MBit/s Internet connection for scanning, and
each scan ﬁnished in 65 seconds on average. Implementing
an optimized and complete scanner is out of the scope of this
work. As shown by Durumeric et al. [8], an attacker could
speed up this process and complete a /0 IPv4 scan for one
protocol in less than two hours by using a 1 Gb/s uplink and
a more efﬁcient scanner implementation. Similarly, Dainotti et
al. observed botnets that complete /0 stealthy scans [6]. This
shows that, in practice, scanning is no burden to attackers.
In the case of P2P protocols (both malicious and benign
networks), we enumerate the ampliﬁers by an iterative search
through peer list exchanges, a process often referred to as
crawling. Crawling requires detailed knowledge about the P2P
protocols and message structures. If available, we studied the
source code of popular protocol implementations (e.g., eMule
for Kad or libtorrent for BitTorrent), or manually reverse
engineered protocol implementations otherwise (e.g., for the
P2P-based bots). We obtained an initial set of ten bootstrapping
peers from public resources or the protocol implementations.
We then iteratively query the set of known peers to retrieve
their neighboring peers. Such peer list exchanges are an inher-
ent protocol feature of all P2P networks. Note that crawling
typically only identiﬁes Internet-facing peers, which is exactly
the set of ampliﬁers we are interested in. That is, we include
only peers that at least once responded to our requests, by
which we exclude all peers behind a ﬁrewall or NAT gateway.
In order to cope with the effects of IP address churn, we
terminated the crawling process after one hour. For a detailed
description of our crawler implementation we refer to our
crawling scheme described in our work on measuring the size
of P2P-based botnets [26]. Given that we terminated our crawls
after one our, we hypothesize that our P2P crawling results rep-
resent lower bounds for the actual number of ampliﬁers. This
would follow our detailed analysis of P2P botnet crawls [26].
We conﬁrmed this hypothesis by observing that our crawler
was still learning new peers (identiﬁed by previously unseen
identiﬁers, if available) when terminating the process.
Lastly, for the game server protocols, we leverage the fact
that game servers register at a master server, which we query
to obtain a list of available game servers. Although typical,
registration at the master server is not mandatory, i.e., the
number of actual game servers is probably slightly higher than
the set of servers obtained from the master server. We validated
the retrieved server lists by cross-checking them with the set
of servers displayed in-game and with online game server
browsers. We also included game servers that are password-
protected, as password protection in this case is irrelevant for
the scenario that we will describe.
In the speciﬁc case of DNS, we measure two types of
ampliﬁers. First, we scan the Internet for open resolvers, i.e.,
public resolvers that serve recursive name lookups to any
client. Again, as this is not important for our threat model,
we also include resolvers that returned incorrect resource
records [27]. Second, we give lower bounds for the number
of authoritative name servers. We cannot scan for authoritative
name servers, though, as we do not know the zones a server is
authoritative for. However, an attacker can crawl the Internet
(e.g., web sites) for domains and then determine the author-
itative name servers for these domains. Instead of crawling
ourselves, we use the public dataset of the Common Crawl
project1. We then recursively resolve each domain name and
track all authoritative name servers.
We performed the measurements during weekdays between
1pm and 3pm GMT. Table II shows our results per protocol.
We rounded the numbers for the scanning measurements to
indicate that accuracy is lost by extrapolating the scanning
results. While open DNS resolvers rank highest, also SSDP,
NTP, NetBios, SNMP and BitTorrent reveal millions of po-
tential ampliﬁers. Of the 255,819 authoritative DNS name
servers, we found that at least 1404 deploy DNSSEC. The
two legacy protocols, CharGen and QOTD, offer signiﬁcantly
fewer ampliﬁers. For the P2P networks, we ignore all peers that
cannot be abused as ampliﬁers, e.g., because they are behind
a NAT gateway or ﬁrewalled, and crawled for an hour only.
The numbers are thus a subset of all peers in a network, which
also explains the difference to previous measurements on P2P
botnet sizes [26]. Still, the P2P networks span thousands, and
BitTorrent even millions of potential ampliﬁers.
Lastly, we measured how long it takes for an attacker to
obtain 1000 and 100,000 ampliﬁers per protocol, respectively.
For scanning, we assume that a /0 scan for a UDP-based
protocol ﬁnishes in two hours [8] and calculate the time to
ﬁnd a subset of ampliﬁers accordingly. For the P2P networks
we measure when – relative to the time when starting a crawl
– a peer responds to us the ﬁrst time.
Table II shows that the time needed to acquire a reasonable
number of ampliﬁers is negligible in most protocols. For
example, it takes about a minute to acquire 100,000 BitTor-
rent ampliﬁers, and scanning for the same number of hosts
completes in less than four minutes for SNMP, NTP, DNSOR
1see http://commoncrawl.org/ – dataset as of February 2012
Protocol
SNMP v2
NTP
DNSNS
DNSOR
NetBios
SSDP
CharGen
QOTD
BitTorrent
Kad
Quake 3
Steam
ZAv2
Sality
Gameover
Ampliﬁers
4,832,000
1,451,000
255,819
7,782,000
2,108,000
3,704,000
89,000
32,000
5,066,635
232,012
Tech.
Scan
Scan
Crawl
Scan
Scan
Scan
Scan
Scan
Crawl
Crawl
1,059 Master
167,886 Master
Crawl
27,939
Crawl
12,714
2,023
Crawl
t1k
1.5s
2.0s
35.3s
0.9s
3.4s
1.9s
80.6s
228.2s
0.9s
0.9s
0.6s
1.3s
1.5s
4.7s
168.5s
t100k
148.9s
195.1s
3530.0s
92.5s
341.5s
193.5s
n/a
n/a
63.6s
108.0s
n/a
137.1s
n/a
n/a
n/a
TABLE II: Number of ampliﬁers per protocol, the technique we used
to obtain the ampliﬁers, and the time it took to identify 1000 (t1k)
and 100,000 (t100k) ampliﬁers, respectively.
or SSDP. Only for protocols with fewer ampliﬁers, such as
QOTD or CharGen, even ﬁnding a small subset of ampliﬁers
takes several minutes. Moreover, for DNSNS, crawling the web
for domains (a step we omitted) and recursively resolving the
domains takes hours. However, overall, this shows that attack-
ers can assemble a set of recent ampliﬁers as a preparation for
a DRDoS attack in no time.
C. Ampliﬁcation Factors
In this section, we evaluate the potential ampliﬁcation fac-
tors of the 14 protocols in Table I. In a ﬁrst step, we analyzed
each of the protocols to ﬁnd potential vectors of ampliﬁcation.
For the network service protocols, we studied the respective
RFC documents and popular open source implementations. We
dissected the two P2P ﬁle sharing protocols by examining
several open source client implementations, such as eMule,
libtorrent or Vuze. For the game servers, we found possible
attack vectors in the public API documentation provided by
the game vendors. Lastly, we reverse-engineered the network
protocols of the three bot binaries to understand the encryption
schemes and different request types of the proprietary P2P
protocols.
As a measure for ampliﬁcation, we deﬁne the bandwidth
ampliﬁcation factor (BAF) as the bandwidth multiplier in
terms of number of UDP payload bytes that an ampliﬁer sends
to answer a request, compared to the number of UDP payload
bytes of the request, i.e.:
BAF =
len(U DP payload) ampliﬁer to victim
len(U DP payload) attacker to ampliﬁer
(1)
We chose not to include Ethernet, IP, or UDP headers in this
calculation so that our measurements remain valid even if the
upper protocol layers change in the future, such as during the
migration from IPv4 to IPv6.
In addition, we measure the packet ampliﬁcation factor
(PAF) as the packet multiplier in terms of number of IP packets
that an ampliﬁer sends to answer a request. More formally, we
deﬁne the PAF as:
P AF =
number of packets ampliﬁer to victim
number of packets attacker to ampliﬁer
(2)
4
Protocol
SNMP v2
NTP
DNSNS
DNSOR
NetBios
SSDP
CharGen
QOTD
BitTorrent
Kad
Quake 3
Steam
ZAv2
Sality
Gameover
all
6.3
556.9
54.6
28.7
3.8
30.8
358.8
140.3
3.8
16.3
63.9
5.5
36.0
37.3
45.4
BAF
50%
8.6
1083.2
76.7
41.2
4.5
40.4
n/a
n/a
5.3
21.5
74.9
6.9
36.6
37.9
45.9
10%
11.3
4670.0
98.3
64.1
4.9
75.9
n/a
n/a
10.3
22.7
82.8
14.7
41.1
38.4
46.2
PAF
all
1.00
3.84
2.08
1.32
1.00
9.92
1.00
1.00
1.58
1.00
1.01
1.12
1.02
1.00
5.39
Scenario
GetBulk request