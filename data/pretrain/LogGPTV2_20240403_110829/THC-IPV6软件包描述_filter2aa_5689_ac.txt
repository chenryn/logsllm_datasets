语法: inject_alive6 [-ap] interface
此工具可解答PPPoE和6in4隧道上的keep-alive请求;对于PPPoE它还发送keep-alive请求。
请注意，必须设置适当的环境变量THC_IPV6_ {PPPOE|6IN4}。
选项-a将每15秒主动发送keep-alive请求,-p不会发送对请求的回复。
```
### inverse_lookup6 - 执行反向地址查询
```
root@kali:~# inverse_lookup6
inverse_lookup6 v2.3 (c) 2013 by van Hauser / THC  www.thc.org
语法: inverse_lookup6 interface mac-address
执行反向地址查询，获取分配到MAC地址的IPv6地址。
请注意，只有少数系统支持这一点。
```
### kill_router6 - 宣告路由器将把一个目标从路由表中删除
```
root@kali:~# kill_router6
kill_router6 v2.3 (c) 2013 by van Hauser / THC  www.thc.org
语法：kill_router6 [-HFD] interface router-address [srcmac [dstmac]]
宣告路由器将把一个目标从路由表中删除。如果您提供“*”作为路由器地址，则此工具将嗅探任何网络
RA数据包并立即发送kill数据包。
选项-H添加逐跳首部，-F分片首部，-D目标首部。
```
### ndpexhaust26 - 用ICMPv6 TooBig错误消息洪泛目标/64网络
```
root@kali:~# ndpexhaust26
ndpexhaust26 v2.3 (c) 2013 by van Hauser / THC  www.thc.org
语法: ndpexhaust26 [-acpPTUrR] [-s sourceip6] interface target-network
选项：
 -a             添加一个带路由器警报的逐跳首部
 -c             不计算校验和以节省时间
 -p             发送ICMPv6回显请求
 -P             发送ICMPv6回显应答
 -T             发送ICMPv6生存时间
 -U             发送ICMPv6不可达（无路由）
 -r             从您的/64前缀将源随机化
 -R             将源完全随机化
 -s sourceip6   使用此作为源ipv6地址
用ICMPv6 TooBig错误消息洪泛目标/64网络。
这个工具版本比ndpexhaust6更有效。
```
### ndpexhaust6 - 用ICMPv6 TooBig错误消息洪泛目标/64网络
```
root@kali:~# ndpexhaust6
ndpexhaust6 by mario fleischmann 
语法: ndpexhaust6 interface destination-network [sourceip]
在目标网络中随机ping IP
```
### node_query6 - 向目标发送ICMPv6节点查询请求
```
root@kali:~# node_query6
node_query6 v2.3 (c) 2013 by van Hauser / THC  www.thc.org
语法: node_query6 interface target
向目标发送ICMPv6节点查询请求并转储应答。
```
### parasite6 - 这是IPv6的“ARP spoofer”
```
root@kali:~# parasite6
parasite6 v2.3 (c) 2013 by van Hauser / THC  www.thc.org
语法：parasite6 [-lRFHD] interface [fake-mac]
这是IPv6的“ARP spoofer”，通过对Neighbor Solitication请求的误导应答，
将所有本地流量重定向到您自己的系统（或虚假的，如果假冒mac不存在）。
选项-l循环并每5秒对每个目标重新发送数据包，-R也将尝试注入请求的目标。
NS安全规避：-F片段，-H逐跳，-D大的目标首部
```
### passive_discovery6 - 被动地嗅探网络并转储所有客户端的IPv6地址
```
root@kali:~# passive_discovery6
passive_discovery6 v2.3 (c) 2013 by van Hauser / THC  www.thc.org
语法：passive_discovery6 [-Ds] [-m maxhop] [-R prefix] interface [script]
选项：
 -D         转储目标地址（不适用于-m）
 -s         只打印地址，没有其他输出
 -m maxhop  被转储的目标的最大跳数。0表示仅限本地，最大限度通常为5
 -R prefix  将定义的前缀与本地链路前缀进行交换
被动嗅探网络并转储检测到的所有客户端IPv6地址。
请注意，在运行parasite6的环境中能获得更好的结果，但这会影响网络。
如果在接口后面指定了一个脚本名称，它将首先被用于检测到的ipv6地址，然后是接口。
```
### randicmp6 - 将所有ICMPv6类型和代码组合发送到目标
```
root@kali:~# randicmp6
Syntax: randicmp6 [-s sourceip] interface destination [type [code]]
将所有ICMPv6类型和代码组合发送到目标。选项-s设置源ipv6地址。
```
### redir6 - 植入路由，将所有到target-ip的流量重定向到victim-ip
```
root@kali:~# redir6
redir6 v2.3 (c) 2013 by van Hauser / THC  www.thc.org
语法：redir6 interface victim-ip target-ip original-router new-router [new-router-mac] [hop-limit]
将一条路由植入victim-ip，将到target-ip的所有流量重定向到新ip。您必须知道将处理路由的路由器。
如果new-router-mac不存在，则会导致DOS。如果目标的TTL不是64，则将此指定为最后一个选项。
```
### redirsniff6 - 植入路由，将所有到destination-ip的流量重定向到victim-ip
```
root@kali:~# redirsniff6
redirsniff6 v2.3 (c) 2013 by van Hauser / THC  www.thc.org
语法：redirsniff6 interface victim-ip destination-ip original-router [new-router [new-router-mac]]
将路由插入victim-ip，将所有到destination-ip的流量重定向到新路由器。这通过修改
匹配victim->target的所有流量来完成。您必须知道将处理路由的路由器。
如果新路由器或mac不存在，则会导致DOS。
您可以为victim-ip和/或destination-ip提供通配符（'*'）。
```
### rsmurf6 - 攻击victim的本地网络
```
root@kali:~# rsmurf6
rsmurf6 v2.3 (c) 2013 by van Hauser / THC  www.thc.org
语法：rsmurf6 interface victim-ip
攻击victim的本地网络。注意：这取决于一个实现上的错误，目前只在Linux上验证过。
邪恶：将“ff02: 1”作为victim将彻底DOS你的本地局域网。
```
### sendpees6 - 发送SEND邻近请求消息
```
root@kali:~# sendpees6
sendpees6 by willdamn 
用法: sendpees6    
发送SEND邻近请求消息，使目标验证一个lota CGA和RSA签名
```
### sendpeesmp6 - 发送SEND邻居请求消息
```
root@kali:~# sendpeesmp6
原始sendpees作者willdamn 
修改的sendpeesMP作者Marcin Pohl 
基于thc-ipv6的代码
用法：sendpeesmp6    
发送SEND邻近请求消息，并使目标验证一个lota CGA和RSA签名
示例：sendpeesmp6 eth0 2048 fe80:: fe80::1
```
### smurf6 - 用icmp echo应答攻击目标
```
root@kali:~# smurf6
smurf6 v2.3 (c) 2013 by van Hauser / THC  www.thc.org
语法：smurf6 interface victim-ip [multicast-network-address]
用icmp echo应答攻击目标。如果未指定，echo请求的目标是本地全节点组播地址。
```
### thcping6 - 制作您的特殊icmpv6 echo请求包
```
root@kali:~# thcping6
thcping6 v2.3 (c) 2013 by van Hauser / THC  www.thc.org
语法: thcping6 [-af] [-H o:s:v] [-D o:s:v] [-F dst] [-t ttl] [-c class] [-l label] 
          [-d size] [-S port|-U port] interface src6 dst6 [srcmac [dstmac [data]]]
制作您的特殊icmpv6 echo请求数据包。您可以在src6、srcmac和dstmac中输入“x”作为自动值。
选项：
  -a                添加带有路由警报的逐跳首部
  -q                添加带有quickstart的逐跳首部
  -E                以以太网IPv4的形式发送
  -H o:s:v          添加具有特殊内容的逐跳首部
  -D o:s:v          添加具有特殊内容的目标首部
  -D “xxx”          添加一个能导致分片的大的目标首部
  -f                添加一个一次分片首部
  -F ipv6address    使用源路由到最终目标
  -t ttl            指定TTL（默认值：64）
  -c class          指定一个类（0-4095）
  -l label          指定标签（0-1048575）
  -d data_size      定义ping数据缓冲区的大小
  -S port           在定义的端口上使用TCP SYN数据包，而不是ping
  -U port           在定义的端口上使用UDP数据包，而不是ping
o:s:v语法：选项号：大小：值，值为十六进制，例如1:2:feab
出错或无应答时返回-1，0正常，1错误应答。
```
### thcsyn6 - 使用TCP-SYN数据包泛洪目标端口
```
root@kali:~# thcsyn6
thcsyn6 v2.3 (c) 2013 by van Hauser / THC  www.thc.org
语法: thcsyn6 [-AcDrRS] [-p port] [-s sourceip6] interface target port
选项：
 -A             发送TCP-ACK数据包
 -S             发送TCP-SYN-ACK数据包
 -r             通过您的/64前缀随机化源
 -R             将源完全随机化
 -s sourceip6   使用此作为源ipv6地址
 -D             随机化目标（视为/64）
 -p port        使用固定源端口
用TCP-SYN数据包泛洪目标端口。如果你提供“x”作为端口，那么是随机的
```
### toobig6 - 在目标上植入指定的mtu
```
root@kali:~# toobig6
toobig6 v2.3 (c) 2013 by van Hauser / THC  www.thc.org
语法：toobig6 [-u] interface target-ip existing-ip mtu [hop-limit]
在目标上植入指定的mtu。如果目标的TTL不是64，则应指定为最后一个选项。
选项-u将发送TooBig，而不会从现有的ip发出欺骗ping6。
```
### trace6 - 一个基本但非常快的traceroute6程序
```
root@kali:~# trace6
trace6 v2.3 (c) 2013 by van Hauser / THC  www.thc.org
语法：trace6 [-abdt] [-s src6] interface targetaddress [port]
选项：
  -a        插入带有路由警报的逐跳首部
  -D        插入目标扩展首部
  -E        插入带有无效选项的目标扩展首部
  -F        插入一次分片首部
  -b        使用TooBig（你将看不到目标），而不是ICMP6 Ping
  -B        使用PingReply（你将看不到目标），而不是ICMP6 Ping
  -d        解析IPv6地址
  -t        启用隧道检测
  -s src6   指定源IPv6地址
最大跳数可达31
一个基本但非常快的traceroute6程序。如果没有指定端口，则使用ICMP6 Ping请求，
否则对指定的端口使用TCP SYN数据包。选项D、E和F可以多次使用。
```
## address6用法示例
将IPv6地址转换为MAC地址或相反:
```
root@kali:~# address6 fe80::76d4:35ff:fe4e:39c8
74:d4:35:4e:39:c8
root@kali:~# address6 74:d4:35:4e:39:c8
fe80::76d4:35ff:fe4e:39c8
```
## alive6用法示例
```
root@kali:~# alive6 eth0
Alive: fd77:7c68:420a:1:426c:8fff:fe1b:cb90 [ICMP parameter problem]
Alive: fd77:7c68:420a:1:20c:29ff:fee5:5bf4 [ICMP echo-reply]
Alive: fd77:7c68:420a:1:75d9:4f39:a46a:6f83 [ICMP echo-reply]
Alive: fd77:7c68:420a:1:6912:8e80:e02f:1969 [ICMP echo-reply]
Alive: fd77:7c68:420a:1:201:6cff:fe6f:ddd1 [ICMP echo-reply]
```
## detect-new-ip6用法示例
```
root@kali:~# detect-new-ip6 eth0
Started ICMP6 DAD detection (Press Control-C to end) ...
Detected new ip6 address: fe80::85d:9879:9251:853a
```
## dnsdict6用法示例
```
root@kali:~# dnsdict6 example.com
Starting DNS enumeration work on example.com. ...
Starting enumerating example.com. - creating 8 threads for 798 words...
Estimated time to completion: 1 to 2 minutes
www.example.com. => 2606:2800:220:6d:26bf:1447:1097:aa7
```
原文链接:[http://tools.kali.org/information-gathering/thc-ipv6](http://tools.kali.org/information-gathering/thc-ipv6)