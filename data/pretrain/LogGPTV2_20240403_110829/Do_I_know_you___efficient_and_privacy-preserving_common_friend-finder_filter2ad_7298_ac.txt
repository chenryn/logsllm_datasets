### Friend Finding using Bloom Filter-based PSI (BFPSI)

#### Inputs:
- **Initiator (I)**: `SKI`, `PKI`, `RI`
- **Responder (R)**: `SKR`, `PKR`, `RR`

#### Key Exchange:
- **Diffie-Hellman Key Exchange** is used to generate a shared secret key `KIR`.

#### Process:
1. **Key Generation:**
   - `ckey` is randomly generated from `{0, 1}^160`.
   - `rrand` and `irand` are also randomly generated from `{0, 1}^160`.
   - `rkey` is derived from `irand` and `rrand` using a Key Derivation Function (KDF).

2. **HMAC Construction:**
   - For each element in `RI`, the initiator computes HMACs using `ckey` as the key and checks if the resulting HMAC is present in `cset`.
   - For each of these elements, the initiator computes HMACs with `rkey` and sends the resulting response set `rset` along with `irand` to the responder.

3. **Responder Verification:**
   - The responder recomputes `rkey` and constructs HMACs on every element using `rkey`.
   - The responder checks if the resulting HMAC is found in `rset`. If it is, the element is added to the intersection set `X`.

4. **Bloom Filter Usage:**
   - Bloom filters are used to realize the private intersection of high-entropy items, incurring only a constant number of public-key cryptography operations and reducing communication overhead.

### Security Considerations

#### Authenticity:
- **Bearer Capabilities**: Our techniques ensure the authenticity of claimed friendships via bearer capabilities. These confer the same authorizations on anyone who holds them.
- **Assumptions**:
  - Capabilities are stored securely.
  - Parties who receive capabilities legitimately do not share them with unauthorized users.
- **Extension to Friendship Certificates**: It is possible to extend our constructions to support "friendship certificates" (signatures issued on public keys of friends) for enhanced security.

#### Privacy:
- **Set Intersection**: The problem of privately discovering common friends is reduced to secure computation of set intersection.
- **Security of Underlying Protocols**: Privacy is ensured by the security of the underlying protocol, such as the PSI construction in [17], the PSI-CA variant in [14], or the BFPSI variant we introduce.
- **Initiator's Privacy**:
  - The responder learns nothing about the initiator's items outside the intended output.
  - In the mutual-output variant (BFPSI), privacy follows from the one-way property of hash functions and the unpredictability of input sets.
- **Responder's Privacy**:
  - In the basic and cardinality-only variants, the initiator has no output, and the responder's privacy stems from the security of the underlying PSI protocols.
  - In the mutual-output variant, the responder's privacy is maintained because Bloom filters may introduce false positives, but the HMAC used to construct `cset` must be secure.

### Framework Design

#### Common Friends Service Interface

##### Diagram:
```
Initiator Device
App
Common Friends Service
Inputs: SKI, PKI, RI
GetPublicKey
PKI
Set up channel
IReq
accepted/rejected
Responder Device
App
Common Friends Service
Inputs: SKR, PKR, RR
StartResponder(IReq)
RRes
Initialize PSI state machine indicated by type
Process(IRes)
ResultContainer
ProcessContainer(M)
ProcessContainer(M)
ResultContainer
getResult
Result, KIR
RRes
IRes
M
M
StartInitiator(RRes)
IRes
ProcessContainer(M)
ProcessContainer(M)
ResultContainer
Initialize PSI state machine indicated by type
Optional (possibly repeated many times)
getResult
Result, KIR
```

##### Table: Common Friends Service Interface
| Name              | Input  | Output  | Invoker | Description                                       |
|-------------------|--------|---------|---------|---------------------------------------------------|
| StartResponder    | IReq   | RRes    | R       | Triggers PSI                                      |
| StartInitiator    | RRes   | IRes    | I       | Triggers PSI; extracts KIR                        |
| Process           | IRes   | RRes    | R       | Processes IRes                                   |
| ProcessContainer  | M      | RC      | R, I    | PSI variant-specific method                       |
| getResult         | -      | P, R, KIR | R, I    | Gets final PSI result and shared key KIR          |

#### Notation
- **type**: Type of Common Friends service.
- **IReq**: Initial request from the initiator.
- **RRes**: Response from the responder.
- **IRes**: Response from the initiator.
- **RC**: Result container.
- **M**: Message.
- **PR**: Final result and shared key.

This framework aims to abstract away the details of underlying cryptographic techniques, making it easy for application developers to integrate secure and privacy-preserving common friend discovery into their applications.