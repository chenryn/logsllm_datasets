title:Privacy preserving error resilient dna searching through oblivious
automata
author:Juan Ram&apos;on Troncoso-Pastoriza and
Stefan Katzenbeisser and
Mehmet Utku Celik
Privacy Preserving Error Resilient DNA Searching through
Oblivious Automata
Juan Ramón Troncoso-Pastoriza∗
Signal Theory and Communications Department
University of Vigo
Vigo 36310, Spain
PI:EMAIL
Stefan Katzenbeisser Mehmet Celik
Philips Research Europe
High Tech Campus 34
NL-5656 AE Eindhoven, The Netherlands
{stefan.katzenbeisser,
mehmet.celik}@philips.com
ABSTRACT
Human Desoxyribo-Nucleic Acid (DNA) sequences oﬀer a
wealth of information that reveal, among others, predis-
position to various diseases and paternity relations. The
breadth and personalized nature of this information high-
lights the need for privacy-preserving protocols.
In this
paper, we present a new error-resilient privacy-preserving
string searching protocol that is suitable for running pri-
vate DNA queries. This protocol checks if a short template
(e.g., a string that describes a mutation leading to a disease),
known to one party, is present inside a DNA sequence owned
by another party, accounting for possible errors and without
disclosing to each party the other party’s input. Each query
is formulated as a regular expression over a ﬁnite alphabet
and implemented as an automaton. As the main technical
contribution, we provide a protocol that allows to execute
any ﬁnite state machine in an oblivious manner, requiring a
communication complexity which is linear both in the num-
ber of states and the length of the input string.
Categories and Subject Descriptors
C.2.0 [Computer-Communication Networks]: Security
and Protection; J.3 [Life and Medical Sciences]: Biology
and Genetics, Health
General Terms
Algorithms, Performance, Security
Keywords
DNA Search, Bioinformatics, Secure Multiparty Computa-
tion, Homomorphic Encryption, Approximate Matching, Fi-
nite Automata, Levenshtein Distance
∗This work was performed while the author was visiting
Philips Research Europe.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’07, October 29–November 2, 2007, Alexandria, Virginia, USA.
Copyright 2007 ACM 978-1-59593-703-2/07/0010 ...$5.00.
1.
INTRODUCTION
The Human Genome Project [1] took nearly 13 years and
required more than US-$3 billion to sequence a ‘prototypi-
cal’ human genome. Nonetheless, biomedical technology is
advancing at a rapid pace and the costs for sequencing an
individual’s genome is dropping. The goal set by the U.S.
National Institute of Health is to reduce sequencing costs for
a human genome to a hundred thousand dollars in 2009 and
to less than a thousand dollars by 2014 [10]. This target is
also known as the $1000 genome. At that cost, it is antici-
pated that by 2015 genomic information will be ubiquitously
used by healthcare providers and that patients will be able
to acquire a digital record of their genome.
The human genome contains a wealth of information about
a person’s body; broad access to the genome is likely to revo-
lutionize medical diagnosis and treatment. Doctors can, for
example, use genomic information to test whether a person
has a pre-disposition towards developing a speciﬁc disease,
even years before the ﬁrst symptoms appear. In treatment,
genomic data may be used to predict whether a patient will
react positively against a speciﬁc therapy or whether the
treatment will likely fail, thereby reducing the overall costs
and increasing the eﬀectiveness of the therapy. Finally, it
may be possible to create an individualized drug therapy for
each patient by analyzing his genetic proﬁle and predicting
his response to diﬀerent medications.
Broad access to and storage of personal Desoxyribo-Nucleic
Acid (DNA) sequences involves signiﬁcant risks to personal
privacy and may open the door for discrimination based on
genomics. For instance, a person carrying a gene known to
increase the likelihood of a particular cancer may be denied
coverage by the health insurance company; an employee may
be rejected for a permanent work contract due to his pre-
disposition towards a disabilitating disease; or the discovery
of parental relationships via DNA proﬁling may have un-
desirable consequences for the person’s private life. These
are only some of the risks we can foresee at this time; once
the functionality of the human genome is fully uncovered
there may be even more signiﬁcant risks to privacy. As we
move forward, there is a clear and emerging need for privacy-
preserving mechanisms for the protection of genomic data.
Privacy concerns about DNA information have tradition-
ally been addressed through laws and procedures: Health-
care professionals are required to keep sensitive data conﬁ-
dential and make it available only with explicit consent of
the patient. So far this traditional approach has worked rea-
sonably well, mostly due to the limited availability and use
519of genomic proﬁles in established medical centers. Nonethe-
less, as genomic proﬁles become ubiquitous, this traditional
form of protection may be insuﬃcient to prevent sensitive
information leakage. We believe that cryptographic privacy-
preserving protocols will become invaluable components that
complement the procedural approach.
The problem setup considered in this paper is as follows:
A patient has a digital record of her DNA sequence and
wants to give another party (such as her healthcare provider)
selective access to run a query on this record, for instance,
to ﬁnd out whether she has a pre-disposition to a particular
disease. As she is concerned about her privacy, she does not
want to disclose her DNA proﬁle to the health-care provider
in the clear. On the other hand, her health-care provider
may like to keep the details of the query conﬁdential as it is
commercially valuable. In the next subsection, we identify
the diﬀerentiating properties of queries run on DNA data
and their implications on the design of privacy-preserving
protocols.
1.1 Queries on DNA data
We denote a DNA sequence as a ﬁnite string over the
alphabet Σ = {A, C, T, G}, representing the four diﬀerent
nucleotides Adenine, Cytosine, Thymine and Guanine (also
known as bases). How this sequence regulates human physi-
ology is under investigation. However, one of the main regu-
lation mechanisms is through encoding of proteins. Triplets
of nucleotides in particular sections of a DNA sequence,
known as coding regions, encode diﬀerent amino-acids. In
turn, a sequence of amino-acids forms a protein, which reg-
ulates various functions in the body.
In the following, we discuss some properties of typical
queries to DNA data that need to be considered when de-
signing privacy-preserving protocols.
• Mutations: A mutation is a deviation on the DNA
sequence that may aﬀect one single nucleotide or a se-
quence of subsequent nucleotides. It may involve sub-
stitutions (one nucleotide is converted into another),
deletions and insertions (missing or extra nucleotides
due to imperfections in the replication process). Spe-
ciﬁc mutations in the coding regions are known to be
indicative of some diseases. The location of these mu-
tations can be ﬁxed and known in advance; alterna-
tively, mutations can occur at a relative distance from
a ﬁxed marker. In order to query for the presence of a
speciﬁc mutation, one usually checks whether a certain
string x ∈ Σ∗ appears in the DNA sequence.
A mutation may also appear in a non-coding region of
a DNA sequence, where it is clinically irrelevant. In
that case the mutation becomes an error, which the
query mechanism should handle gracefully.
• Sequencing Errors: Today, even the best DNA se-
quencing methods cannot guarantee 100% accuracy.
Due to the imperfections of the chemical sequencing
process, three diﬀerent types of errors occur: symbol
substitutions (an incorrect base is recorded), insertions
(a base that is not present in the genome is reported in
the digital record) and deletions (the sequencing pro-
cess fails to report a base, even though it is present
in the analyzed genome). Queries on DNA sequences
should thus be able to cope with infrequent errors of
these types. In the literature, these errors are usually
called Edit errors, since they frequently occur when
transcribing a text or when using an Optical Charac-
ter Recognition (OCR) tool. There is a known distance
measure, called Levenshtein or Edit distance [14], al-
lowing to quantify the number of substitutions, inser-
tions and deletions that a sequence has suﬀered with
respect to a reference.
• Many-to-one Mappings: While each triplet of DNA
bases encodes one amino-acid, this encoding is not
unique: there exist diﬀerent base triplets that encode
the same amino-acid. As only the latter is relevant in
diagnosis, DNA queries should be able to handle this
ambiguity.
• Incomplete Speciﬁcations: In the existing medi-
cal genomic databases, there are many DNA sequences
that are not completely speciﬁed, as the exact eﬀect of
punctual mutations has not yet been completely deter-
mined, even though there is evidence of the relation-
ship between these mutations and a known disease. In
this case, the possible queries that can be applied in
order to detect those mutations must oﬀer a ﬂexibil-
ity to handle incomplete speciﬁcations, apart from the
already mentioned error resilience.
A natural representation for a query that is able to cope
with the aforementioned properties are regular expressions,
implemented as ﬁnite automata. Note that regular expres-
sions not only allow to handle incomplete speciﬁcations and
ambiguity, they can also be used to cope with Edit errors
due to sequencing problems or clinically irrelevant mutations
(cf. Section 5.1).
1.2 Contributions
The technical contributions of this paper can be summa-
rized as follows:
• We present an eﬃcient (amortized linear time) proto-
col for the oblivious execution of a ﬁnite state automa-
ton. More precisely, the protocol allows two parties,
one holding a description of an automaton M and one
holding a string x, to determine whether M accepts
x, without revealing M or x to the other party.
• We show how this protocol can be used to solve the
problem of oblivious approximate string matching. In
this case, each of the two parties involved in the proto-
col possesses one of the two strings x and y. They col-
lectively determine whether x can be obtained from y
by applying a constant number of symbol errors, dele-
tions and insertions, without disclosing their strings
to each other. The proposed solution translates one of
the strings into a ﬁnite-state machine and executes it
obliviously.
• We further show that the solution can be generalized to
the approximate string search problem, where the par-
ties want to determine whether x is an ‘approximate’
substring of y, allowing again a maximal number of
symbol errors, insertions and deletions. This problem
has not been addressed so far in a privacy-preserving
setting.
• We also extend our protocol to automata with non-
binary output (Mealy and Moore machines), which
are used in applications such as text parsing, compu-
tational linguistics and speech recognition. The ex-
tended protocol allows for privacy-preserving private
execution in these applications.
The rest of the paper is organized as follows. Sections 2
and 3 brieﬂy describe some basic concepts needed in the rest
of the paper and survey related work. Section 4 presents
a protocol for oblivious execution of any ﬁnite automaton,
along with a complexity evaluation and a security analysis.
Section 5 explains the use of automata for the approximate
matching and searching problem. Finally, Section 6 summa-
rizes other applications of the developed protocol.
2. PRELIMINARIES
In this section, we introduce the notions used in the rest of
the paper. Boldface lowercase letters will be used for vectors,
and uppercase boldface letters for matrices; .t denotes the
matrix or vector transpose. When not speciﬁed, vectors are
column vectors. An element at row i and column j of a
matrix M will be denoted by M (i, j).
We denote with E[x] and D[x] the encryption and decryp-
tion of message x with a homomorphic semantically secure
cryptosystem [9, 21]. When the parameter is a vector, it
will denote the component-wise encryption and decryption
of that vector. The expression a ∈R A denotes the random
choice of a value a from the set A with uniform distribution.
Finally, a∗ will denote the Kleene Closure of a.
2.1 Approximate Matching and Searching
The problem of DNA matching is essentially an approxi-
mate string matching problem, in which the error metric is
the Edit or Levenshtein distance [14]. As noted above, this
distance measure accounts for three types of errors, namely
symbol substitutions, deletions and insertions. Given two
strings x and y, the Edit distance is deﬁned as the mini-
mum number of Edit errors that x must undergo in order
to be transformed into y. If this number is below a given
threshold, both sequences are said to approximately match;
in case of a match, a sequence alignment can be computed,
which associates the symbols of x and y, up to insertions
and deletions.
The commonly used algorithm to compute sequence align-
ments is a dynamic programming algorithm developed by
Needleman and Wunsch [20], even though similar algorithms
are also used for speech recognition [23] and spell checking.
Besides computing an alignment, the algorithm also deter-
mines the Edit distance between two sequences. However,
in many applications it is not necessary to obtain an align-
ment; it suﬃces to know whether the Edit distance is below
a given threshold. This decision problem, as pointed out
in Section 5.1, can be solved eﬃciently by running a ﬁnite
automaton.
In approximate string searching, a short sequence x (the
pattern) is searched in a longer sequence y, while tolerating
Edit errors:
if an approximate match (using the Edit dis-
tance as metric) is found between the pattern x and some
substring of y, the search will report a positive answer. The
previous problem of approximate string matching can be
seen as a special case of searching when the length of the
pattern and the length of the sequence y are approximately
equal (up to insertions and deletions of a certain number of
symbols).
2.2 Finite Automata
A deterministic ﬁnite automaton [11] (or ﬁnite state ma-
chine, FSM) is denoted by a 5-tuple M = (Q, Σ, ∆, q0, F ),
where Q is a ﬁnite set of states, Σ is a ﬁnite input alpha-
bet, q0 ∈ Q is the initial state, F ⊆ Q is the set of ﬁnal
states, and ∆ denotes the transition function. Without loss
of generality, we restrict ourselves to ‘complete’ ﬁnite au-
tomata, where it is possible to make a transition at each
state with every input symbol (each FSM can be trans-