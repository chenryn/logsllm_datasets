## systemtap Built-in probe point types (DWARF-based kernel or module probes)    
### 作者                                                                                         
digoal                                                                                         
### 日期                                                                                         
2013-09-29                                                                                      
### 标签                                                                                         
PostgreSQL , Linux , systemtap , stap , dtrace , probe                                 
----                                                                                         
## 背景                                  
This family of probe points uses symbolic debugging information for the target kernel or module, as may be found in executables that have not been stripped, or in the separate debuginfo packages. They allow logical placement of probes into the execution path of the target by specifying a set of points in the source or object code. When a matching statement executes on any processor, the probe handler is run in that context.  
以上是Built-in probe point types的定义. 没有什么特别的, 它是操作系统自带的就行了. 每个内核版本有对应的包.  
Probe points in a kernel are identified by module, source file, line number, function name or some combination of these.  
例如 :   
```  
[root@db-172-16-3-39 ~]# rpm -qa|grep debuginfo  
kernel-debuginfo-common-2.6.18-348.12.1.el5  
kernel-debuginfo-2.6.18-348.12.1.el5  
[root@db-172-16-3-39 ~]# uname -a  
Linux db-172-16-3-39.sky-mobi.com 2.6.18-348.12.1.el5 #1 SMP Wed Jul 10 05:28:41 EDT 2013 x86_64 x86_64 x86_64 GNU/Linux  
```  
探针的使用语法, 探针指定的方式和DNS类似, a.b.c.d, a为最大的类, b为a下面的子类, 以此类推. a也可以称为prefix, c也可称为suffix.  
可能还有d, 一般为配置项. 例如 :   
```  
module(MPATTERN).function(PATTERN).return.maxactive(VALUE)  
```  
一般的用法举例 :   
```  
kernel.function("foo")  
kernel.function("foo").return  
module("ext3").function("ext3_*")  
kernel.function("no_such_function") ?  #这里的问号表示即使没有匹配的探针也不报错.  
syscall.*  
end  
timer.ms(5000)  
```  
?的用法详见  
http://blog.163.com/digoal@126/blog/static/1638770402013811957335/  
如果要获得当前系统中支持的函数探针  :   
```  
[root@db-172-16-3-39 ~]# stap -l 'kernel.function("**")'  
```  
或者使用通配符, 通配符的用法可参考man stapprobes, 或者接着往下看.  
```  
[root@db-172-16-3-39 ~]# stap -l 'kernel.function("zlib*")'  
kernel.function("zlib_adler32@include/linux/zutil.h:81")  
kernel.function("zlib_fixedtables@lib/zlib_inflate/inflate.c:94")  
kernel.function("zlib_inflate@lib/zlib_inflate/inflate.c:333")  
kernel.function("zlib_inflateEnd@lib/zlib_inflate/inflate.c:756")  
kernel.function("zlib_inflateIncomp@lib/zlib_inflate/inflate.c:888")  
kernel.function("zlib_inflateInit2@lib/zlib_inflate/inflate.c:64")  
kernel.function("zlib_inflateReset@lib/zlib_inflate/inflate.c:24")  
kernel.function("zlib_inflateSyncPacket@lib/zlib_inflate/inflate.c:162")  
kernel.function("zlib_inflate_table@lib/zlib_inflate/inftrees.c:25")  
kernel.function("zlib_inflate_workspacesize@lib/zlib_inflate/inflate.c:19")  
kernel.function("zlib_updatewindow@lib/zlib_inflate/inflate.c:117")  
```  
DWARF探针大致可以通过模块, 源文件, 行号, 函数名, 或者以上的组合来指定.  
例如 :   
```  
kernel.function(PATTERN)  
kernel.function(PATTERN).call  
kernel.function(PATTERN).return  
kernel.function(PATTERN).return.maxactive(VALUE)  
kernel.function(PATTERN).inline  
kernel.function(PATTERN).label(LPATTERN)  
module(MPATTERN).function(PATTERN)  
module(MPATTERN).function(PATTERN).call  
module(MPATTERN).function(PATTERN).return.maxactive(VALUE)  
module(MPATTERN).function(PATTERN).inline  
kernel.statement(PATTERN)  
kernel.statement(ADDRESS).absolute  
module(MPATTERN).statement(PATTERN)  
```  
以上探针的形式解释 :   
```  
The .function variant places a probe near the beginning of the named function, so that parameters are available as context variables.  
```  
.function指函数开始位置(通过pp函数可以看到精确的位置信息). 所以使用.function探针可以打印函数的参数, 以及上下文相关变量.   
例子1 :   
```  
[root@db-172-16-3-39 ~]# stap --vp 5 -e 'probe kernel.function("tcp_v4_connect") {printf("%s, %d, %d, %s\n", pp(), pid(), cpu(), $$vars);}'  
Parsed kernel "/lib/modules/2.6.18-348.12.1.el5/build/.config", containing 1977 tuples  
Parsed kernel /lib/modules/2.6.18-348.12.1.el5/build/Module.symvers, which contained 3546 vmlinux exports  
Searched: " /usr/share/systemtap/tapset/x86_64/*.stp ", found: 4, processed: 4  
Searched: " /usr/share/systemtap/tapset/*.stp ", found: 81, processed: 81  
Pass 1: parsed user script and 85 library script(s) using 146796virt/23712res/3012shr/21392data kb, in 160usr/10sys/172real ms.  
```  
handler输出如下.  
```  
kernel.function("tcp_v4_connect@net/ipv4/tcp_ipv4.c:158"), 15460, 2, sk=0xffff810224ec5340 uaddr=0xffff8101dfd2dec8 addr_len=0x10 inet=? tp=? usin=? rt=? daddr=0xffff8102 nexthop=? tmp=? err=? inet_opt=?  
```  
tcp_v4_connect函数源码参考本文末尾, 已经加了行号. 从以上输出可以看到, 探针的位置在158行, 也就是函数开始位置.  
由于函数的本地变量未初始化, 所以这里打印出来的本地变量是未知的? .   
daddr这个本地变量在第163行才定义, 但是在探针处158行, 函数开始位置为什么有值呢? 有缘人帮忙解答一下, 谢谢.  
The .return variant places a probe at the moment of return from the named function, so the return value is available as the $return context variable. The entry parameters are also available, though the function may have changed their values. Return probes may be further qualified with .maxactive, which specifies how many instances of the specified function can be probed simultaneously. You can leave off .maxactive in most cases, as the default (KRETACTIVE) should be sufficient. However, if you notice an excessive number of skipped probes, try setting .maxactive to incrementally higher values to see if the number of skipped probes decreases.  
.return 在函数返回时触发, 因此可以获得函数的返回值$return. 同样函数的参数也是可以被获得的, 但是, 这些值可能在函数内被变更过, .return后面还可以再加一个.maxactive()属性, 用来限定允许最大多少个该"函数探针"被同时触发. 默认取KRETACTIVE的值. 如果在调试过程中发现有很多skipped probes, 可以适当加大这个.maxactive值.  
例子2 :   
```  
[root@db-172-16-3-39 ~]# stap --vp 5 -e 'probe kernel.function("tcp_v4_connect") {printf("%s, %d, %d, %s, %s\n", pp(), pid(), cpu(), $$vars, $sk$$.$uaddr$$.$addr_len$$.$inet$$.$tp$$.$usin$$.$rt$$.$daddr$$.$nexthop$$.$tmp$$.$err$$.$inet_opt$$);}'  
Parsed kernel "/lib/modules/2.6.18-348.12.1.el5/build/.config", containing 1977 tuples  
Parsed kernel /lib/modules/2.6.18-348.12.1.el5/build/Module.symvers, which contained 3546 vmlinux exports  
Searched: " /usr/share/systemtap/tapset/x86_64/*.stp ", found: 4, processed: 4  
Searched: " /usr/share/systemtap/tapset/*.stp ", found: 81, processed: 81  
Pass 1: parsed user script and 85 library script(s) using 146812virt/23700res/3012shr/21408data kb, in 160usr/20sys/173real ms.  
kernel.function("tcp_v4_connect@net/ipv4/tcp_ipv4.c:158"), 4284, 3, sk=0xffff81012d214d00 uaddr=0xffff8100aa907ec8 addr_len=0x10 inet=? tp=? usin=? rt=? daddr=0xffff8101 nexthop=? tmp=? err=? inet_opt=?, {.__sk_common={.skc_family=2, .skc_state='\a', .skc_reuse='\000', .skc_bound_dev_if=0, .skc_node={.next=0x0, .pprev=0x0}, .skc_bind_node={.next=0x0, .pprev=0x0}, .skc_refcnt={.counter=1}, .skc_hash=0, .skc_prot=0xffffffff80370780}, .sk_shutdown=0, .sk_no_check=0, .sk_userlocks=0, .sk_protocol='\006', .sk_type=1, .sk_rcvbuf=87380, .sk_lock={.slock={.raw_lock={.slock=1}}, .owner=0x1, .wq={.lock={.raw_lock={.slock=1}}, .task_list={.next=0xffff81012d214d58, .prev=0xffff81012d214d58}}}, .sk_sleep=0xffff81012ef9  
[root@db-172-16-3-39 ~]# stap --vp 5 -e 'probe kernel.function("tcp_v4_connect").return {printf("%s, %d, %d, %s, %s\n", pp(), pid(), cpu(), $$vars, $sk$$.$uaddr$$.$addr_len$$.$inet$$.$tp$$.$usin$$.$rt$$.$daddr$$.$nexthop$$.$tmp$$.$err$$.$inet_opt$$);}'  
Parsed kernel "/lib/modules/2.6.18-348.12.1.el5/build/.config", containing 1977 tuples  
Parsed kernel /lib/modules/2.6.18-348.12.1.el5/build/Module.symvers, which contained 3546 vmlinux exports  
Searched: " /usr/share/systemtap/tapset/x86_64/*.stp ", found: 4, processed: 4  
Searched: " /usr/share/systemtap/tapset/*.stp ", found: 81, processed: 81  
Pass 1: parsed user script and 85 library script(s) using 146804virt/23700res/3012shr/21400data kb, in 160usr/10sys/172real ms.  
kernel.function("tcp_v4_connect@net/ipv4/tcp_ipv4.c:158").return, 4336, 2, sk=0xffff810222892d00 uaddr=0xffff8100aa631ec8 addr_len=0x10 inet=? tp=? usin=? rt=? daddr=0xffff8102 nexthop=? tmp=? err=? inet_opt=?, {.__sk_common={.skc_family=2, .skc_state='\a', .skc_reuse='\000', .skc_bound_dev_if=0, .skc_node={.next=0x0, .pprev=0x0}, .skc_bind_node={.next=0x0, .pprev=0x0}, .skc_refcnt={.counter=1}, .skc_hash=0, .skc_prot=0xffffffff80370780}, .sk_shutdown=0, .sk_no_check=0, .sk_userlocks=0, .sk_protocol='\006', .sk_type=1, .sk_rcvbuf=87380, .sk_lock={.slock={.raw_lock={.slock=1}}, .owner=0x1, .wq={.lock={.raw_lock={.slock=1}}, .task_list={.next=0xffff810222892d58, .prev=0xffff810222892d58}}}, .sk_sleep=0xffff81022bcc  
```  