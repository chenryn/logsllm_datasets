adversarial takers and providers. Alternatively, ﬁxing the
total slippage (unexpected + expected slippage) would
yield an upper bound for both the victim transaction size
and adversarial optimal proﬁt.
V. Empirical Evaluation
Our experimental setup corresponds to the system
model
in Figure 2, with a modiﬁed adversarial Parity
client. We increase the maximum number of transactions
in the pool of unconﬁrmed transactions (mempool) from
the default 1024 to 2048. We design a Python script that
subscribes to the modiﬁed pub/sub functionality of Parity
and listens for new pending transactions of the target
Uniswap market. Our script computes the proﬁtability of
any given victim transaction, and if an adversarial strategy
proves proﬁtable, the script generates and propagates the
corresponding front- and back-running transaction.
We conduct both experiments (cf. Section V-A and V-B)
on the main Ethereum network against the ETH/VERI
Fig. 6: Sandwich attack optimal revenue for an adversarial
taker when V trades on ﬁve Uniswap markets (0.3% fee,
A breaks even at 0.01 ETH).
With no adversary, V only needs 15, 147.28 SAI for the
same amount of ETH, which is 75.74 SAI less. In addition,
this V transaction should increase the liquidity pool from
(7, 377.53 ETH / 1, 099, 040.91 SAI) to (7, 277.53 ETH /
1, 114, 263.92 SAI). Post attack, the liquidity pool remains
with 7, 277.25 ETH and 1, 114, 263.92 SAI, i.e A gains
7, 277.53 − 7, 277.25 = 0.28 ETH from the liquidity pool.
b) Optimal Adversarial Revenue: We quantify the
optimal adversarial revenue in Figure 13, after subtract-
ing the foregone opportunity cost (e.g. 0.3% for liquidity
provider on Uniswap), conditional on a suitable victim
transaction. We observe that the forgone commission fee
is relatively stable, given a ﬁxed total slippage, because
the adversary must satisfy the victim’s slippage limit. We
also quantify in Figure 9 the minimum victim input.
c) Impact of Coin Decimals: The number of decimal
places for ERC20 tokens is conﬁgurable, though most of
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:33:46 UTC from IEEE Xplore.  Restrictions apply. 
434
(a) ETH/SAI market
(b) ETH/DAI market
Fig. 8: Sandwich attack by a liquidity provider on a taker (Uniswap, block 9M, 0.3% fees). If TV trades SAI for 60
ETH with an unexpected slippage of 0.5%, A can achieve a max. revenue by front-running TV with removing 37.76% of
liquidity (eq. 2, 785.97 ETH and 415, 030.47 SAI), and regain 37.76% of liquidity (deposit 2, 749.57 ETH and 420, 542.21
SAI) by back-running TV . Upon rebalancing to ETH, A gains a proﬁt of 0.07 ETH (10.55 USD, break-even 0.01 ETH).
adversarial node runs on AWS in Ireland, (4 vCPU, AMD
EPYC 7000, 2.5 GHz, NVMe SSD, max. 10 Gbps network
). The experiments result in three outcomes: (i) success
(all adversarial transactions are included in the same block
as TV ), (ii) the front- and back-running transactions are
successful, but not all adversarial transactions are included
in the same block as TV , and (iii) front- or/and back-
running failed.
a) Computing the adversarial transactions: Three
steps allow us to compute the optimal adversarial input
amount. First, the maximum amount A can transact
without breaking V ’s slippage protection (denoted by ˆo)
is computed using a binary search. Second, we calculate if
the attack is proﬁtable if A inputs ˆo. As Figure 3 and 4
suggest, if an attack is not proﬁtable at ˆo, then it is not
proﬁtable for any o < ˆo. Finally, because Uniswap uses
integer divisions, there might exist o < ˆo, which results in
the same or more proﬁt. We perform a ternary search to
ﬁnd the optimal input.
A. Liquidity Taker Attacking Taker
We issue and attack TV purchasing VERI with 0.001
ETH. TV is triggered through the Uniswap UI (default
0.5% unexpected slippage) and at the time of writing
default Metamask gas price (5 GWei9). We repeat this
attack 20 times, and report the results in Table II. On
average, the adversary discovers TV within 450ms, and
requires less than 200ms to compute and send out TA1 and
TA2. During our experiment, TV remains in the adversary’s
91 GWei = 1 × 10−9 ETH
Fig. 9: Minimum proﬁtable victim input on SAI Uniswap
market (0.3% fee, 0.5% unexpected slippage, adversary
break even at 0.01 ETH tx fees). A cannot gain any proﬁt,
if TV trades SAI for less than 43.93 ETH. If SAI had 17
decimal places after the comma instead of 18, the min.
victim transaction amount increases to 44.54 ETH.
Uniswap market and only attack our transactions. The
ETH/VERI market oﬀers the smallest liquidity (0.01 ETH
and 0.07 VERI, total 3.50 USD) out of the 78 Uniswap
exchanges on the Uniswap UI as of block 9M. To ensure
that our results are suﬃciently representative, we consider
a time window of 158 days,
i.e. several months. Our
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:33:46 UTC from IEEE Xplore.  Restrictions apply. 
435
Proﬁtable TXs
/ Total TXs
Revenue
(ETH)
Revenue
(USD)
98.15
2, 643.84
216.66
14, 621.41
393, 852.46
32, 275.16
440, 749.02
878/25, 204
5, 657/602, 85
1, 258/196, 72
7, 793/105, 161 2, 958.64
Liquidity taker attacks taker
ETH → Token
Token → ETH
Token → Token
Total
Liquidity provider attacks taker
ETH → Token
Token → ETH
Token → Token
Total
TABLE III: Estimated adversarial revenue for the 79
exchanges on the Uniswap UI, assuming an adversarial
break even cost of 0.01 ETH. Data of 158 days considered
(block 8M to 9M).
52.55
444/25, 204
520.61
3, 254/60, 285
721/19, 672
89.16
4, 419/105, 161 662.32
7, 829.05
77, 555.62
13, 281.49
98, 666.15
C. Slippage
To help an adversary understand how takers conﬁg-
ure their slippage, we plot the estimated distribution
of expected slippage and maximum allowed unexpected
slippage in Figure 10. Note that we are using block N’s
state to calculate the slippages of a transaction mined at
block N +1. Therefore, these slippages are only estimates,
as we do not know the exact block state used by the taker
to create transactions. Past Uniswap transactions have
an average expected slippage of 0.58%, and an average
unexpected slippage of 1.16%.
mempool for an average of 35.84 seconds. We achieve a
success rate of 19 out of 20 attempts. One experiment
failed, where the victim’s transaction TV remained in
the adversarial’s mempool for only 1.677 seconds. In 8
out of 20 experiments, the attack is partially successful,
because the back-running transaction TA2 is mined in a
later block than TV . Two possible causes are that either
TA2 is received after TA1 and TV are mined, or the block
that mined TV is full. We observe that the respective TV
are mostly positioned at the end of the block, which may
indicate network congestion.
B. Liquidity Provider Attacking Taker
We initialize the adversary by adding liquidity to the
ETH/VERI Uniswap contract. We again issue TV purchas-
ing VERI with 0.002 ETH via the Uniswap UI, Metamask
(2 GWei), and attack with our adversarial node. We also
repeat this attack 20 times. Table II shows a summary
of our experiment results. Compared to Section V-A, TV
remains, on average less than 10 seconds in the mempool,
which may indicate that the blockchain network is less
congested at the time of the experiment. We also observe
that the adversarial transactions are relatively closer to
TV within the block. We achieve a success rate of 20 out
of 20 attempts.
STD
0.27
0.00
0.60
33.31
33.19
51.25
N/A
0.22
10.26
0.92
6.47
N/A
N/A
Adversarial Taker
Mean
0.45s
0.03s
0.16s
35.84s
35.88s
48.87s
N/A
0.05
−10.42
0.70
5.45
N/A
N/A
11/20
8/20
1/20
Adversarial Provider
Mean
0.36s
0.03s
0.04s
23.09s
23.03s
23.03s
23.03s
0.00
−2.95
0.00
4.50
0.00
5.50
20/20
0/20
0/20
TV Broadcast Duration
A Find Strategy Duration
A Execute Strategy Duration
TV Duration In Mempool
TA1 Duration In Mempool
TA2 Duration In Mempool
TA3 Duration In Mempool
A1 Block Relative Position
A1 Index Relative Position
A2 Block Relative Position
A2 Index Relative Position
A3 Block Relative Position
A3 Index Relative Position
Success
Partial Success
Failure
TABLE II: Results for the liquidity taker/provider attacks
taker. The victim’s transaction TV was triggered manually
using Metamask through Uniswap UI. Adversarial node
and victim have a clock diﬀerence of 8.781ms ± 6.189ms.
STD
0.29
0.00
0.00
10.52
10.52
10.52
10.52
0.00
2.34
0.00
4.90
0.00
4.90
1) Foregone Adversarial Revenues: To understand
the ﬁnancial potential of our attacks, we estimated the
theoretical revenue for the 79 exchanges of the Uniswap UI
between block 8M and 9M (i.e. recent blocks at the time of
writing), assuming a break-even at 0.01 ETH transaction
fees. Our results (cf. Table III) suggest that within the
reported 158 days, an adversary could have achieved a
revenue of 440, 749.02 USD when attacking as a taker,
and 98, 666.15 USD when attacking as a liquidity provider.
7.4% of transactions are proﬁtable when attacking as a
taker, while 4.2% when attacking as a provider.
Fig. 10: Estimated expected and maximum permitted
unexpected slippage on Uniswap transactions (block 8M
to 9M). Most takers trade with c. 1% of maximum unex-
pected slippage (the Uniswap default at the time).
D. Overall success of the attacks
Our empirical results suggest that both an adversarial
liquidity taker and provider can again proﬁt by undertak-
ing a sandwich attack, where the victim trades with the
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:33:46 UTC from IEEE Xplore.  Restrictions apply. 
436
Uniswap default slippage protection strategy at the time
of writing this paper (0.5% total slippage). We crawled
the previous transactions on Uniswap, where it shows that
the most common unexpected slippage conﬁguration is
1%, which is higher than the 0.5% default total slippage
and therefore leads to higher front-running proﬁt. Our
experiments result in a high success rate (only 1 out of
40 failed), mainly because the Ethereum network was not
congested, and the VERI market relatively inactive.
VI. How Miners Order Transactions
One crucial aspect of the potential proﬁtability of the
sandwich attacks centers on how miners order transactions
within blocks. Blockchains typically prescribe speciﬁc rules
for consensus, but there are only loose requirements for
miners on how to order transactions within a block. To
gain insight into this, we crawled the Ethereum blockchain
from block 6, 627, 917 (where Uniswap was launched) to
block 9M, constituting a total of 2, 372, 084 blocks, or
equivalently 388 days of data. For each block, we classiﬁed
the order of its transactions into one of four classes:
Empty: A block without transactions.
Gas Price: All transactions are sorted in descending or-
der according to the gas price of each transaction.
Parity Default: Transactions are split into groups ac-
cording to Parity’s prioritization (e.g. local transac-
tions ﬁrst, penalized transactions last). Then, within
each group, the transactions are sorted in descending
order according to each transaction’s gas price.
Unknown: Transactions are not ordered by the gas price
and do not follow parity’s default strategy.
The treatment of transactions depends on the Ethereum
client. At of the time of writing, 78.3% of the Ethereum
clients operate Geth, respectively 20.2% Parity10. Geth
ﬁrst sorts and separates the list of transactions into lists
of individual sender accounts and sorts them by nonce.
Afterward, they are merged back together and sorted by
gas price, always comparing only the ﬁrst transaction
from each account. Parity, by default, prioritizes local
and retracted transactions ﬁrst, and polishes transactions
with heavy computation, and then sorts by gas price. A
transaction is considered local if it is received via the RPC
interface, or the sender of the transaction is part of the list
of locally managed accounts. Miners may choose to modify
the transaction inclusion policy arbitrarily. To individually
categorize each block, we ﬁrst analyzed the gas price of
each transaction and started by extracting the gas price
only for the ﬁrst transaction of each sender, while ignoring
the other transactions from the same sender. We only
consider the ﬁrst transaction because a higher gas price
transaction can be placed behind another transaction with
a smaller nonce. If the extracted gas price list is sorted,
we classify the block as following the “gas price” strategy.
Alternatively, we verify if the gas price list consists of
10https://www.ethernodes.org/
multiple sublists of gas prices, where the gas prices within
each sublist are sorted in descending order. Each sublist
represents a priority group, where transactions within the
same priority group are sorted by gas price. If there are
no more than four sublists of gas prices (local, retracted,
normal, penalized), we classify the block as a “Parity
default” block, otherwise, as “unknown”.
Because both Parity and Geth sort transactions by
default by gas price, it is diﬃcult to identify which client
a miner uses. Moreover, our heuristics may misclassify
blocks as being ordered using gas price instead of Parity’s
default strategy. A miner could have no local transactions
for the block, and all transactions are thus ordered by gas
price. The number of blocks classiﬁed as Parity default
should, therefore, be regarded as a lower bound. We
leave it for future work to develop a more precise client
ﬁngerprinting strategy.
A. Miner Transaction Ordering Results
Our results (cf. Table V and Table IV suggest that
roughly 79% of the miners order transactions based on
the gas price, thus likely following Geth’s strategy, and
16% order their transaction after Parity’s default strat-
egy. These results are consistent with the client usage
distribution. We ﬁnd that 2% of the blocks are empty.
3% of the miners follow an unknown ordering method.
We can conclude that to position a transaction before or
after a target transaction, it is, with a probability of 79%,
suﬃcient to pay a higher (+1 Wei) or lower gas price
(−1 Wei) — assuming the absence of other front-running
adversaries. If two transactions pay the same gas price,
according to their source code, Parity and Geth include
the transactions after the FIFO principle.
Overall, we ﬁnd that most miners (c. 79%) order trans-
actions based on the gas price. The dominance of this
transaction order aids an adversary because it makes it
more likely for an adversary that they can control the
placement of their transactions in a block by tweaking the
gas price they oﬀer for each transaction.
B. Gas Price Distribution
We investigate the gas prices for each transaction over
189, 951, 899 transactions included in blocks 6, 627, 917