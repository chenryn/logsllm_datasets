上面也说了在我分析来，有2种用于和flag明文加密的数据，这里我在解密时两种结果都试了一下，从第一种累异或得到正确结果。
加密算法也很好逆，一是加密只有异或，加法，减法及移位。二是要和flag明文加密的数据的变化不受明文的影响。
解密脚本：
    #include 
    #include 
    unsigned char hash[] = {165, 106, 167, 113, 180, 119, 198, 3, 209, 8, 223, 24, 206, 3, 215, 15, 204, 119, 186, 98, 174, 109, 221, 24, 192, 9, 213, 213, 213, 213, 213, 213};
    //unsigned char hash[] = {0xA5, 0xCF, 0xCD, 0xD6, 0xC5, 0xC3, 0xB1, 0xC5, 0xD2, 0xD9, 0xD7, 0xC7, 0xD6, 0xCD, 0xD4, 0xD8, 0xC3, 0xBB, 0xCD, 0xD8, 0xCC, 0xC3, 0xB0, 0xC5, 0xD8, 0xC9, 0xDC, 0, 0, 0, 0, 0};
    //unsigned char hash[] = {56, 144, 185, 193, 92, 20, 87, 231, 166, 41, 206, 164, 135, 174, 194, 10, 40, 211, 69, 111, 251, 121, 0, 103, 104, 40, 171, 235, 244, 190, 95, 32};
    unsigned char hashed[32][32] = {0};
    char order[] = {0, 5, 5, 2, 2, 3, 4, 4, 3, 2, 0, 3, 0, 3, 2, 1, 5, 1, 3, 1, 5, 5, 2, 4, 0, 0, 4, 5, 4, 4, 5, 5};
    unsigned char enc[32] = {87, 197, 56, 27, 58, 168, 52, 47, 57, 151, 198, 228, 4, 47, 143, 238, 94, 81, 128, 103, 36, 201, 111, 72, 91, 127, 189, 199, 176, 194, 194, 235};
    //unsigned char enc[] = {145, 245, 10, 154, 15, 94, 11, 194, 194, 229, 233, 150, 87, 240, 145, 56, 1, 113, 96, 76, 163, 181, 65, 253, 1, 237, 39, 181, 137, 88, 235, 108};
    unsigned char plain[32] = {0};
    unsigned char fun(unsigned char a)
    {
        return ((a>4));
    }
    void fun1(unsigned char *a, unsigned char *b)
    {
        for(int i = 0; i > 4;
        }
    }
    void fun5(unsigned char *a, unsigned char *b)
    {
        for(int i = 0; i  46)
            {
                if((unsigned char)(a[i]-81) > 46)
                {
                    if(a[i]>0x80)
                    {
                        a[i] = a[i]-48;
                        b[i] -= a[i];
                    }
                }
                else
                {
                    a[i] = a[i]-48;
                    b[i] ^= a[i] >> 4;
                }
            }
            else
            {
                a[i] = a[i]-80;
                b[i] += a[i];
            }
        }
    }
    void defun6(unsigned char *a, unsigned char *b)
    {
        for(int i = 0; i  46)
            {
                if((unsigned char)(a[i]-81) > 46)
                {
                    if(a[i]>0x80)
                    {
                        a[i] = a[i]-48;
                        b[i] += a[i];
                    }
                }
                else
                {
                    a[i] = a[i]-48;
                    b[i] ^= a[i] >> 4;
                }
            }
            else
            {
                a[i] = a[i]-80;
                b[i] -= a[i];
            }
        }
    }
    int main(void)
    {
        for(int i = 0; i < 32; i++)
        {
            unsigned char tmp = 0;
            for(int j = 0; j < i+1; j++)
                tmp ^= hash[j];
        } 
        for(int i = 0; i < 32; i++)
        {
            for(int j = 0; j < 32; j++)
            {
                hashed[i][j] = hash[j];
                //printf("%d, ", hash[j]);
            }
            //putchar(10);
            switch(rand()%6)
            {
                case 0: fun1(hash, plain);
                    break;
                case 1: fun2(hash, plain);
                    break;
                case 2: fun3(hash, plain);
                    break;
                case 3: fun4(hash, plain);
                    break;
                case 4: fun5(hash, plain);
                    break;
                case 5: fun6(hash, plain);
                    break;
            }
        }
        for(int i = 0; i < 32; i++)
        {
            switch(order[i])
            {
                case 0: fun1(hashed[31-i], enc);
                    break;
                case 1: fun2(hashed[31-i], enc);
                    break;
                case 2: fun3(hashed[31-i], enc);
                    break;
                case 3: fun4(hashed[31-i], enc);
                    break;
                case 4: fun5(hashed[31-i], enc);
                    break;
                case 5: defun6(hashed[31-i], enc);
                    break;
            }
        }
        for(int i = 0; i < 32; i++)
        {
            printf("%c", enc[i]);
        }
        return 0;
    }