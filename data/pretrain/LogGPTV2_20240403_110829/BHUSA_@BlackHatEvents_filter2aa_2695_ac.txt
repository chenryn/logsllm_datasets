•
Detect obfuscated ransomware samples
•
Crysis
• 21dd1344dc8ff234aef3231678e6eeb4a1f25c395e1ab181e0377b7fcef4ef44
#BHUSA @BlackHatEvents
Crysis
#BHUSA @BlackHatEvents
OLLVM - FLA (Obfuscation)
• Crysis
#BHUSA @BlackHatEvents
Engine Scan
• Crysis
#BHUSA @BlackHatEvents
REvil
• 562f7daa506a731aa4b79656a39e69e31333251c041b2f5391518833f9723d62
#BHUSA @BlackHatEvents
REvil
• Obfuscated API Calls (GetProcAddress)
#BHUSA @BlackHatEvents
REvil
#BHUSA @BlackHatEvents
REvil
#BHUSA @BlackHatEvents
Deep Dive into Our Symbolic Engine
•
TCSA (TXOne Code Semantics Analyzer)
•
Malware detection with instruction-level Semantic automata
•
Use Vivisect as the core decompiler engine
•
Support AMD, ARM, x86, MSP430, H8 and many other architectures
•
Support analysis of program files for Windows and Linux systems
•
Pure Python based Engine: Works on any platform able to run Python
•
In TCSA rule, developers can notate the relationship of data references between API calls
•
Symbolized return values of Win32 API, function, or unknown API
•
Usage of memory heap, stack, local variables, etc. 
•
DefUse: tracing the source of data, memory values, argument values from
•
Support two additional feature extraction systems: YARA and Capa subsystems
•
Developers Orienting Malware Scanning Design
•
Developers can write their own Rules to be installed in the TCSA engine as callbacks
•
The TCSA engine will traverse and explore each function and the instructions in its Code Block
•
In the Callback, each instruction, memory, function name and parameter can be analyzed line by line
#BHUSA @BlackHatEvents
Deep Dive into Our Symbolic Engine
• Vivisect as Decompiler Module 
•
Stack Snapshot for Calls
#BHUSA @BlackHatEvents
Deep Dive into Our Symbolic Engine
• Vivisect as Decompiler Module 
•
Stack Snapshot for Calls
#BHUSA @BlackHatEvents
Deep Dive into Our Symbolic Engine
• Some functions that need to be implemented for the real Windows runtime results for 
pure static analysis
•
Process Execution Necessary: LoadLibrary, GetProcAddress, GetFullPathName, FindResource...
•
String handling Necessary: sprintf、scanf、lstrlenA…
•
Memory Handling Necessary: HeapAlloc、malloc、free…
#BHUSA @BlackHatEvents
Deep Dive into Our Symbolic Engine
• Malware Rule/Automata Developing
•
Each TCSA Rule should have at least three callback, initialize, and cleanup callback functions.
•
In the initialize function, developers have the ability to do some necessary preparation
•
Developers can receive each instruction in the callback function with execution status from the TCSA engine
•
Used to extract and collect instruction level features to identify specific behavior in a function
•
Locate and mark potentially suspicious function
•
Developers can make the final decision in the cleanup function to determine if a specific behavior has been found
•
Based on the features collected in the callback
•
based on the YARA/CAPA Rule match features
#BHUSA @BlackHatEvents
Outline
• Introduction
•
Threat Overview
•
The Difficult Problem of Static/Dynamic Malware Detection and Classification 
• Deep Dive into Our Practical Symbolic Engine
•
Related Work
•
Our Practical Symbolic Engine
• Demonstration
•
CRC32 & DLL ReflectiveLoader
•
Process Hollowing 
•
Ransomware Detection
• Future Works and Closing Remarks 
#BHUSA @BlackHatEvents
CRC32
#BHUSA @BlackHatEvents
CRC32 (Cont.) 
#BHUSA @BlackHatEvents
ReflectiveLoader
• Traversing memory to locate its own PE 
Image address
• Parsing its own IMAGE_NT_HEADERS 
structure
•
Allocate the memory of the 
OptionalHeader.SizeOfImage size using VirtualAlloc.
•
Mapping each section to its own PE Image to this new 
memory
•
Parse OptionalHeader.DataDirectory to resolve and 
repair the import table
•
Parse OptionalHeader.AddressOfEntryPoint and call 
entry
#BHUSA @BlackHatEvents
ReflectiveLoader (Cont.) 
#BHUSA @BlackHatEvents
ReflectiveLoader (Cont.) 
#BHUSA @BlackHatEvents
T1055.012 Process Hollowing 
• Process Hollowing Definition from MITRE
•
Process hollowing is commonly performed by creating a process in a suspended state then 
unmapping/hollowing its memory, which can then be replaced with malicious code. 
•
A victim process can be created with native Windows API calls such as CreateProcess, which includes 
a flag to suspend the processes primary thread. At this point the process can be unmapped using APIs 
calls such as ZwUnmapViewOfSection or NtUnmapViewOfSection before being written to, realigned 
to the injected code, and resumed via VirtualAllocEx, WriteProcessMemory, SetThreadContext, 
then ResumeThread respectively.
• How we collect Process Hollowing samples?
•
APT group samples from MITRE
•
APT group sample variant 
https://attack.mitre.org/techniques/T1055/012/
#BHUSA @BlackHatEvents
T1055.012 Process Hollowing (Cont.) 
•
Create a suspended victim process by 
CreateProcess
•
Mount malicious modules in its memory
•
Get the register EBX value by GetThreadContext
•
The register EBX value will point to the PEB structure address of 
that process.
•
Modify the ImageBase on the PEB structure by 
WriteProcessMemory
•
Switching the main executed PE module to the malicious module
•
Modify the EAX register so the execution entry jump 
to the malware entry
#BHUSA @BlackHatEvents
T1055.012 Process Hollowing (Cont.) 
#BHUSA @BlackHatEvents
T1055.012 Process Hollowing (Cont.) 
#BHUSA @BlackHatEvents
T1055.012 Process Hollowing (Cont.) 
#BHUSA @BlackHatEvents
T1055.012 Process Hollowing (Cont.) 
• Process Hollowing Definition from MITRE
•
Process hollowing is commonly performed by creating a process in a suspended state then 
unmapping/hollowing its memory, which can then be replaced with malicious code
•
A victim process can be created with native Windows API calls such as CreateProcess, which includes 
a flag to suspend the processes primary thread. At this point the process can be unmapped using APIs 
calls such as ZwUnmapViewOfSection or NtUnmapViewOfSection before being written to, realigned 
to the injected code, and resumed via VirtualAllocEx, WriteProcessMemory, SetThreadContext, 
then ResumeThread respectively
• How we collect Process Hollowing samples?
•
APT group samples from MITRE
•
APT group sample variant 
• How about Obfuscated & Strip Symbols Hollowing Samples?
https://attack.mitre.org/techniques/T1055/012/
#BHUSA @BlackHatEvents
*Striped* Process Hollowing 
#BHUSA @BlackHatEvents
*Striped* Process Hollowing (Cont.) 
#BHUSA @BlackHatEvents
*Striped* Process Hollowing (Cont.)
• Experiment
• How we collect Hollowing samples?
•
Time interval: 2022.1.1~Now
•
Filter process
•
Find in VirusTotal, behaviour_injected_processes
•
More than 10 antivirus vendors, and it is Windows executable
•
Using Classic Process Hollowing Definition (based on MITRE) and not packed.
•
Results
•
141 / 233 -> 60.51% of injection samples from VirusTotal should be hollowing.
-> 39.49% Based on manual analysis, verified all these samples were not hollowing samples.
Cheat Engine, x64dbg, Chrome Installer …
#BHUSA @BlackHatEvents
Real World Ransomware Detection
• Basically, ransomware does the following capability
•
Find unfamiliar files (such as FindFirstFile)
•
Read/Write behavior in the same file (such as CreateFile -> ReadFile -> SetFilePointer ->WriteFile)
•
Identify common encrypt function or algorithm (WinCrypt*, AES, ChaCha, RC4…)
• What are our criteria of detection?
• 3 features (file enumeration, file operations, encryption) detected or
• One of the chain
•
File enumeration à Encryption
•
File enumeration & File operations à Encryption
#BHUSA @BlackHatEvents
Real World Ransomware Detection (Cont.)
• Enumerate Files
WannaCry Ransomware sample via IDA Pro
#BHUSA @BlackHatEvents
Real World Ransomware Detection (Cont.)
• Taint file handle generated from CreateFile*
•
Monitor file I/O API usage
#BHUSA @BlackHatEvents
Real World Ransomware Detection (Cont.)
• Encryption in Babuk Ransomware
1.
2.
3.
4.
file_handle_candidate
5.
6.
Store hFile
Load hFile
Load hFile
Load hFile
#BHUSA @BlackHatEvents
Real World Ransomware Detection (Cont.)
• Babuk Ransomware
#BHUSA @BlackHatEvents
Real World Ransomware Detection (Cont.)
• Babuk Ransomware
#BHUSA @BlackHatEvents
Real World Ransomware Detection (Cont.)
• Babuk Ransomware
#BHUSA @BlackHatEvents
Real World Ransomware Detection (Cont.)
• LockBit Ransomware
#BHUSA @BlackHatEvents
Real World Ransomware Detection (Cont.)
• LockBit Ransomware
#BHUSA @BlackHatEvents
Real World Ransomware Detection (Cont.)
• LockBit Ransomware
#BHUSA @BlackHatEvents
Real World Ransomware Detection (Cont.)
• Darkside Ransomware
#BHUSA @BlackHatEvents
Real World Ransomware Detection (Cont.)
• Darkside Ransomware
#BHUSA @BlackHatEvents
Real World Ransomware Detection (Cont.)
• Darkside Ransomware
#BHUSA @BlackHatEvents
Real World Ransomware Detection (Cont.)
• How we improve the detection rate? 
•
Darkside
•
Customized Salsa20 matrix and encryption
•
4 rounds of linear shifting
#BHUSA @BlackHatEvents
Real World Ransomware Detection (Cont.)
• How we improve the detection rate? 
•
7ev3n
•
R5A Encryption
•
fsopen() from msvcrt
Check if the first byte is ‘M’  
Extend stream cipher key from filename 
and encrypt the file content
#BHUSA @BlackHatEvents
Real World Ransomware Detection (Cont.)
• Experiment
• How we collect Ransomware samples?
•
Time interval: 2021.06-2022.06
•
Filter process
•
Found in VirusTotal, more than 3 antivirus vendors identify ransomware, and it is Windows executable
•
Automated dynamic analysis (commercial sandbox)
•
Final check samples
•
Get ransomware sample dataset 
•
Results
•
1153 / 1206 (95.60%) !!!
#BHUSA @BlackHatEvents
Real World Ransomware Detection (Cont.)
Purge
Seven
Phobos
Lockbit
Agent
Explus
Taleb
Hive
Rents
Medusalocker
Cryptolocker
Makop
Redeemer
Sodinokibi
Garrantycrypt
Tovicrypt
Conti
Crysis
Filecoder
Crypren
Hydracrypt
Avoslocker
Sevencrypt
Crypmod
Sorikrypt
Higuniel
Paradise
Cryptor
Wixawm
Zcrypt
Sodinokib
Xorist
Nemty
Fakeglobe
Emper
Quantumlocker
Blackmatter
Revil
Bastacrypt
Ranzylocker
Avaddon
Netfilm
Wana
Garrantdecrypt
Smar
Akolocker
Cryptlock
Wadhrama
Phoenix
Spora
Babuklocker
Lockergoga
Buhtrap
Ryuk
Nemisis
Netwalker
Deltalocker
Karmalocker
Genasom
Thundercrypt
Wcry
Hkitty
Swrort
Babuk
#BHUSA @BlackHatEvents
Real World Ransomware Detection (Cont.)
• Conti variants
• LockBit variants
Ransom.Win32.CONTI.SM.hp
Ransom.Win32.CONTI.SMTH.hp
Ransom.Win32.CONTI.SMYXBBU
Ransom.Win32.CONTI.SMYXBFD.hp
Ransom.Win32.CONTI.YACCA
Ransom.Win32.CONTI.YXCAAZ
Ransom.Win32.CONTI.YXCBSZ
• 7ev3n variants
Ransom.Win32.LOCKBIT.SMCET
Ransom.Win32.LOCKBIT.SMDS
Ransom.Win32.LOCKBIT.SMYEBGW
Ransom.Win32.LOCKBIT.YXBHC-TH
Ransom_LockBit.R002C0CGI21
Ransom_Lockbit.R002C0DCO22
Ransom_Lockbit.R002C0DHB21
Ransom_Lockbit.R002C0DHD21
Ransom_Seven.R002C0DA422
Ransom_Seven.R002C0DA522
Ransom_Seven.R002C0DA922
Ransom_Seven.R002C0DAA22
Ransom_Seven.R002C0DAF22
Ransom_Seven.R002C0DAP22
Ransom_Seven.R002C0DAR22
Ransom_Seven.R002C0DAS22
Ransom_Seven.R002C0DAT22
Ransom_Seven.R002C0DAV22
Ransom_Seven.R002C0DB122
Ransom_Seven.R002C0DB222
Ransom_Seven.R002C0DB322
Ransom_Seven.R002C0DB822
Ransom_Seven.R002C0DB922
Ransom_Seven.R002C0DBA22
Ransom_Seven.R002C0DBM22
Ransom_Seven.R002C0DC222
Ransom_Seven.R002C0DC922
Ransom_Seven.R002C0DCB22
Ransom_Seven.R002C0DCC22
Ransom_Seven.R002C0DCE22
Ransom_Sodin.R002C0PGM21
Ransom_EMPER.SM
#BHUSA @BlackHatEvents
Real World Ransomware Detection (Cont.)
• For some of undetected samples
•
Prolock / PwndLocker
•
Unknown Encryption Algorithm
CreateFileW
MoveFileW
Customized File Encryption
#BHUSA @BlackHatEvents
Real World Ransomware Detection (Cont.)
• Experiment
•
By randomly finding 200 non-ransom samples from VirusTotal (2021/06/01 - 2022/06/01)
•
False Positive: 0%
#BHUSA @BlackHatEvents
Outline
• Introduction
•
Threat Overview
•
The Difficult Problem of Static/Dynamic Malware Detection and Classification 
• Deep Dive into Our Practical Symbolic Engine
•
Related Work
•
Our Practical Symbolic Engine
• Demonstration
•
CRC32 & DLL ReflectiveLoader
•
Process Hollowing 
•
Ransomware Detection
• Future Works and Closing Remarks 
#BHUSA @BlackHatEvents
Sound Bytes
• In-depth understanding of the limitations and common issues with current static, 
dynamic and machine learning detection
• In-depth understanding of why and how we choose symbolic execution and various 
auxiliary methods to build symbolic engine and learn how to create the signature to 
detect the kinds of attack and technique
• From our demonstration and comparison, learn that our novel method and engine are 
indeed superior to the previous methods in terms of accuracy and validity and can be 
used in the real world. 
• Know the plan about opensource to gather the community power to strength the engine 
and signature
#BHUSA @BlackHatEvents
Thanks for Listening
Hank Chen
Sheng-Hao Ma
Mars Cheng 
@hank0438
@aaaddress1
@marscheng_
TXOne Networks Inc.