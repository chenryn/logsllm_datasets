### Outline
1. **Introduction**
2. **Threat Overview**
3. **The Difficult Problem of Static/Dynamic Malware Detection and Classification**
4. **Deep Dive into Our Practical Symbolic Engine**
    - **Related Work**
    - **Our Practical Symbolic Engine**
5. **Demonstration**
    - **CRC32 & DLL ReflectiveLoader**
    - **Process Hollowing**
    - **Ransomware Detection**
6. **Future Works and Closing Remarks**

### Introduction
- **Sound Bytes:**
  - In-depth understanding of the limitations and common issues with current static, dynamic, and machine learning detection.
  - In-depth understanding of why and how we choose symbolic execution and various auxiliary methods to build a symbolic engine and learn how to create signatures to detect different types of attacks and techniques.
  - From our demonstration and comparison, learn that our novel method and engine are indeed superior to previous methods in terms of accuracy and validity and can be used in the real world.
  - Know the plan for open-sourcing to gather community power to strengthen the engine and signatures.

### Threat Overview
- **Detect Obfuscated Ransomware Samples:**
  - **Crysis:**
    - Sample: `21dd1344dc8ff234aef3231678e6eeb4a1f25c395e1ab181e0377b7fcef4ef44`
    - Techniques: OLLVM - FLA (Obfuscation), Engine Scan
  - **REvil:**
    - Sample: `562f7daa506a731aa4b79656a39e69e31333251c041b2f5391518833f9723d62`
    - Techniques: Obfuscated API Calls (GetProcAddress)

### The Difficult Problem of Static/Dynamic Malware Detection and Classification
- **Challenges:**
  - Current detection methods often struggle with obfuscation, polymorphism, and other evasion techniques.
  - The need for a more robust and accurate detection system is evident.

### Deep Dive into Our Practical Symbolic Engine
- **TCSA (TXOne Code Semantics Analyzer):**
  - **Malware Detection with Instruction-Level Semantic Automata:**
    - Uses Vivisect as the core decompiler engine.
    - Supports multiple architectures: AMD, ARM, x86, MSP430, H8, and others.
    - Analyzes program files for Windows and Linux systems.
    - Pure Python-based engine: works on any platform able to run Python.
  - **Features:**
    - Developers can notate the relationship of data references between API calls.
    - Symbolized return values of Win32 API, functions, or unknown APIs.
    - Usage of memory heap, stack, local variables, etc.
    - DefUse: tracing the source of data, memory values, and argument values.
    - Supports YARA and Capa subsystems for feature extraction.
    - Developer-oriented malware scanning design.
    - Custom rules can be installed in the TCSA engine as callbacks.
    - The TCSA engine traverses and explores each function and its instructions.
    - Each instruction, memory, function name, and parameter can be analyzed line by line.

- **Vivisect as Decompiler Module:**
  - Provides stack snapshots for calls.
  - Implements necessary functions for real Windows runtime results for pure static analysis:
    - Process Execution: LoadLibrary, GetProcAddress, GetFullPathName, FindResource, etc.
    - String Handling: sprintf, scanf, lstrlenA, etc.
    - Memory Handling: HeapAlloc, malloc, free, etc.

- **Malware Rule/Automata Development:**
  - Each TCSA rule should have at least three callback functions: initialize, callback, and cleanup.
  - Initialize function for necessary preparation.
  - Callback function receives each instruction with execution status from the TCSA engine.
  - Used to extract and collect instruction-level features to identify specific behavior in a function.
  - Locates and marks potentially suspicious functions.
  - Cleanup function makes the final decision based on collected features and YARA/CAPA rule matches.

### Demonstration
- **CRC32 & DLL ReflectiveLoader:**
  - **ReflectiveLoader:**
    - Traverses memory to locate its own PE Image address.
    - Parses its own IMAGE_NT_HEADERS structure.
    - Allocates memory using VirtualAlloc.
    - Maps each section to the new memory.
    - Resolves and repairs the import table.
    - Calls the entry point.

- **Process Hollowing:**
  - **Definition (MITRE):**
    - Process hollowing involves creating a process in a suspended state, unmapping its memory, and replacing it with malicious code.
    - Commonly performed using CreateProcess, ZwUnmapViewOfSection, NtUnmapViewOfSection, VirtualAllocEx, WriteProcessMemory, SetThreadContext, and ResumeThread.
  - **Sample Collection:**
    - APT group samples from MITRE.
    - APT group sample variants.
    - Time interval: 2022.1.1~Now.
    - Filtered process: more than 10 antivirus vendors, Windows executable, and not packed.
    - Results: 141/233 (60.51%) of injection samples from VirusTotal were identified as hollowing.

- **Real World Ransomware Detection:**
  - **Capabilities:**
    - File enumeration (FindFirstFile).
    - Read/Write behavior in the same file (CreateFile, ReadFile, SetFilePointer, WriteFile).
    - Identification of common encryption functions or algorithms (WinCrypt*, AES, ChaCha, RC4, etc.).
  - **Detection Criteria:**
    - Three features (file enumeration, file operations, encryption) detected or one of the chains:
      - File enumeration → Encryption.
      - File enumeration & file operations → Encryption.
  - **Experiment:**
    - Time interval: 2021.06-2022.06.
    - Filtered process: more than 3 antivirus vendors, Windows executable.
    - Automated dynamic analysis (commercial sandbox).
    - Final check samples.
    - Results: 1153/1206 (95.60%) of ransomware samples detected.
  - **Undetected Samples:**
    - Prolock / PwndLocker: Unknown encryption algorithm, CreateFileW, MoveFileW, Customized File Encryption.
  - **False Positive Test:**
    - Randomly found 200 non-ransom samples from VirusTotal (2021/06/01 - 2022/06/01).
    - False Positive: 0%.

- **Ransomware Variants:**
  - Conti, LockBit, 7ev3n, and other ransomware variants.

### Future Works and Closing Remarks
- **Future Plans:**
  - Open-source the engine to gather community support and enhance its capabilities.
  - Continuously improve and expand the detection and classification methods.

### Thanks for Listening
- **Presenters:**
  - Hank Chen (@hank0438)
  - Sheng-Hao Ma (@aaaddress1)
  - Mars Cheng (@marscheng_)
  - TXOne Networks Inc.

#BHUSA @BlackHatEvents