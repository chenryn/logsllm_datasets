7839 | KING | PRESIDENT | | 17-NOV-81 00:00:00 | 5000.00 | | 10
7844 | TURNER | SALESMAN | 7698 | 08-SEP-81 00:00:00 | 1500.00 | 0.00 | 30
7876 | ADAMS | CLERK | 7788 | 23-MAY-87 00:00:00 | 1100.00 | | 20
7900 | JAMES | CLERK | 7698 | 03-DEC-81 00:00:00 | 950.00 | | 30
7902 | FORD | ANALYST | 7566 | 03-DEC-81 00:00:00 | 3000.00 | | 20
7934 | MILLER | CLERK | 7782 | 23-JAN-82 00:00:00 | 1300.00 | | 10
(14 rows)
On mmrnode_b the conflicting row inserted on this node remains, but is updated with the
transactions replicated from mmrnode_c:
mmrnode_b=# SELECT * FROM emp;
empno | ename | job | mgr | hiredate | sal | comm | deptno
-------+--------+-----------+------+--------------------+---------+---------+--------
7369 | SMITH | CLERK | 7902 | 17-DEC-80 00:00:00 | 800.00 | | 20
7499 | ALLEN | SALESMAN | 7698 | 20-FEB-81 00:00:00 | 1600.00 | 300.00 | 30
7521 | WARD | SALESMAN | 7698 | 22-FEB-81 00:00:00 | 1250.00 | 500.00 | 30
7566 | JONES | MANAGER | 7839 | 02-APR-81 00:00:00 | 2975.00 | | 20
7654 | MARTIN | SALESMAN | 7698 | 28-SEP-81 00:00:00 | 1250.00 | 1400.00 | 30
7698 | BLAKE | MANAGER | 7839 | 01-MAY-81 00:00:00 | 2850.00 | | 30
7782 | CLARK | MANAGER | 7839 | 09-JUN-81 00:00:00 | 2450.00 | | 10
7788 | SCOTT | ANALYST | 7566 | 19-APR-87 00:00:00 | 3000.00 | | 20
7839 | KING | PRESIDENT | | 17-NOV-81 00:00:00 | 5000.00 | | 10
7844 | TURNER | SALESMAN | 7698 | 08-SEP-81 00:00:00 | 1500.00 | 0.00 | 30
7876 | ADAMS | CLERK | 7788 | 23-MAY-87 00:00:00 | 1100.00 | | 20
7900 | JAMES | CLERK | 7698 | 03-DEC-81 00:00:00 | 950.00 | | 30
7902 | FORD | ANALYST | 7566 | 03-DEC-81 00:00:00 | 3000.00 | | 20
7934 | MILLER | CLERK | 7782 | 23-JAN-82 00:00:00 | 1300.00 | | 10
9001 | SMITH | ANALYST | 7698 | | 9500.00 | 5000.00 | 20
(15 rows)
On mmrnode_c the conflicting row inserted on this node remains along with the updates
performed on this node:
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 341
EDB Postgres Replication Server User’s Guide
mmrnode_c=# SELECT * FROM emp;
empno | ename | job | mgr | hiredate | sal | comm | deptno
-------+--------+-----------+------+--------------------+---------+---------+--------
7369 | SMITH | CLERK | 7902 | 17-DEC-80 00:00:00 | 800.00 | | 20
7499 | ALLEN | SALESMAN | 7698 | 20-FEB-81 00:00:00 | 1600.00 | 300.00 | 30
7521 | WARD | SALESMAN | 7698 | 22-FEB-81 00:00:00 | 1250.00 | 500.00 | 30
7566 | JONES | MANAGER | 7839 | 02-APR-81 00:00:00 | 2975.00 | | 20
7654 | MARTIN | SALESMAN | 7698 | 28-SEP-81 00:00:00 | 1250.00 | 1400.00 | 30
7698 | BLAKE | MANAGER | 7839 | 01-MAY-81 00:00:00 | 2850.00 | | 30
7782 | CLARK | MANAGER | 7839 | 09-JUN-81 00:00:00 | 2450.00 | | 10
7788 | SCOTT | ANALYST | 7566 | 19-APR-87 00:00:00 | 3000.00 | | 20
7839 | KING | PRESIDENT | | 17-NOV-81 00:00:00 | 5000.00 | | 10
7844 | TURNER | SALESMAN | 7698 | 08-SEP-81 00:00:00 | 1500.00 | 0.00 | 30
7876 | ADAMS | CLERK | 7788 | 23-MAY-87 00:00:00 | 1100.00 | | 20
7900 | JAMES | CLERK | 7698 | 03-DEC-81 00:00:00 | 950.00 | | 30
7902 | FORD | ANALYST | 7566 | 03-DEC-81 00:00:00 | 3000.00 | | 20
7934 | MILLER | CLERK | 7782 | 23-JAN-82 00:00:00 | 1300.00 | | 10
9001 | JONES | SALESMAN | 7698 | | 9500.00 | 5000.00 | 30
(15 rows)
In this example, it is assumed that the desired, correct row is on mmrnode_c.
The following are the steps to reproduce the correct row, currently on mmrnode_c, to the
other master nodes by synchronizing the shadow table entries that resulted from the
original insert and updates to this row on mmrnode_c.
Step 1: Manually delete the inserted row from the publication tables on all master nodes
except for mmrnode_c, which has the correct row. Be sure
session_replication_role is set to replica.
On mmrnode_a, this row does not exist:
mmrnode_a=# SELECT * FROM emp WHERE empno = 9001;
empno | ename | job | mgr | hiredate | sal | comm | deptno
-------+-------+-----+-----+----------+-----+------+--------
(0 rows)
On mmrnode_b, delete the erroneous row:
mmrnode_a=# SHOW session_replication_role;
session_replication_role
--------------------------
replica
(1 row)
mmrnode_b=# DELETE FROM emp WHERE empno = 9001;
DELETE 1
On mmrnode_c, the correct, accepted row is left intact:
mmrnode_c=# SELECT * FROM emp WHERE empno = 9001;
empno | ename | job | mgr | hiredate | sal | comm | deptno
-------+-------+----------+------+----------+---------+---------+--------
9001 | JONES | SALESMAN | 7698 | | 9500.00 | 5000.00 | 30
(1 row)
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 342
EDB Postgres Replication Server User’s Guide
Step 2: On the master nodes containing the conflicting row that is to be discarded, mark
the shadow table entry for that row as discarded. This indicates the conflict on this row
has been resolved and ensures this shadow table entry is not replicated in the future.
Change the rrep_tx_conflict_status column from P (pending) to D (discarded) on
the losing node, mmrnode_b as shown by the following:
Figure 6-44 - Losing shadow table entry
Step 3: On winning node mmrnode_c, inspect the shadow table for the emp publication
table.
The objective is to use the shadow table entries for the insert and three update
transactions that were previously run on this node to replicate to the other master nodes
during the next synchronization.
The leftmost columns of the shadow table appear as follows:
Figure 6-45 - Shadow table with multiple transactions
Make note of the rrep_sync_id values for these four entries, which are 1, 2, 3, and 4
in this example.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 343
EDB Postgres Replication Server User’s Guide
The following shows the rightmost columns of the shadow table from the prior figure.
Note the contents of column rrep_tx_conflict_status furthest to the right.
Figure 6-46 - Shadow table with multiple transactions (continued)
Make sure the rrep_tx_conflict_status column is null for these four entries. In
this case, for the insert transaction, you will need to change the P (pending) value to null.
The resulting change for the rrep_tx_conflict_status column in the shadow table
on mmrnode_c is shown by the following:
Figure 6-47 - Shadow table transactions set to replicate
Step 4: In order to replicate these four shadow table entries during the next
synchronization, one or more entries must be added to the control schema table
_edb_replicator_pub.rrep_mmr_txset on mmrnode_c to indicate pending status
for synchronization to the target master nodes (mmrnode_a and mmrnode_b) of the four
shadow table entries identified by the rrep_sync_id values of 1, 2, 3, and 4 noted in
Step 3.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 344
EDB Postgres Replication Server User’s Guide
First, you must identify the pub_id and target db_id values that are to be associated
with the pending transactions. To do so, invoke the following query substituting the
rrep_sync_id values for sync_id in the query:
SELECT pub_id, db_id AS target_db_id
FROM _edb_replicator_pub.rrep_mmr_txset
WHERE start_rrep_sync_id = sync_id;
In this example, there are four values to be substituted for sync_id, which are 1, 2, 3,
and 4.
The results are the following:
mmrnode_c=# SELECT pub_id, db_id AS target_db_id
mmrnode_c-# FROM _edb_replicator_pub.rrep_mmr_txset
mmrnode_c-# WHERE start_rrep_sync_id = 1;
pub_id | target_db_id
--------+--------------
3 | 1
3 | 4
(2 rows)
mmrnode_c=# SELECT pub_id, db_id AS target_db_id
mmrnode_c-# FROM _edb_replicator_pub.rrep_mmr_txset
mmrnode_c-# WHERE start_rrep_sync_id = 2;
pub_id | target_db_id
--------+--------------
3 | 1
3 | 4
(2 rows)
mmrnode_c=# SELECT pub_id, db_id AS target_db_id
mmrnode_c-# FROM _edb_replicator_pub.rrep_mmr_txset
mmrnode_c-# WHERE start_rrep_sync_id = 3;
pub_id | target_db_id
--------+--------------
3 | 1
3 | 4
(2 rows)
mmrnode_c=# SELECT pub_id, db_id AS target_db_id
mmrnode_c-# FROM _edb_replicator_pub.rrep_mmr_txset
mmrnode_c-# WHERE start_rrep_sync_id = 4;
pub_id | target_db_id
--------+--------------
3 | 1
3 | 4
(2 rows)
The results indicate that the previously executed synchronization that attempted to apply
the shadow table transactions identified by the rrep_sync_id values of 1, 2, 3, and 4
were all for the publication identified by pub_id of 3. The target master nodes were
identified by db_id of 1 (for mmrnode_a) and db_id of 4 (for mmrnode_b).
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 345
EDB Postgres Replication Server User’s Guide
Thus, at least two entries must be inserted into the control schema table
_edb_replicator_pub.rrep_mmr_txset on mmrnode_c. At least one entry is
required for the target db_id of 1 and at least one entry for the target db_id of 4.
Since each entry in _edb_replicator_pub.rrep_mmr_txset consists of a range of
rrep_sync_id values (identified by columns start_rrep_sync_id and
end_rrep_sync_id) and the desired shadow table rrep_sync_id values happen to be
contiguous (1 thru 4), a single entry can encompass the four rrep_sync_id values for a
single target database.
Thus, in this example, a total of two entries can be added to
_edb_replicator_pub.rrep_mmr_txset – one for each target database.
Note: If there were multiple, non-contiguous rrep_sync_id values required for
synchronization (for example, 1, 2, 5, and 6), then multiple entries would be required for
each target database. The entries would specify rrep_sync_id ranges to collectively
cover all of the non-contiguous values, but omitting rrep_sync_id values that are not
to be included in the synchronization (for example, one entry for 1 through 2 and a
second entry for 5 through 6).
Step 5: Insert the entries into the _edb_replicator_pub.rrep_mmr_txset control
schema table as identified in the preceding step.
The two INSERT statements invoked on mmrnode_c are the following:
INSERT INTO _edb_replicator_pub.rrep_mmr_txset (set_id, pub_id, db_id,
status, start_rrep_sync_id, end_rrep_sync_id)
values (nextval('_edb_replicator_pub.rrep_txset_seq'),3,1,'P',1,4);
INSERT INTO _edb_replicator_pub.rrep_mmr_txset (set_id, pub_id, db_id,
status, start_rrep_sync_id, end_rrep_sync_id)
values (nextval('_edb_replicator_pub.rrep_txset_seq'),3,4,'P',1,4);
A query of the _edb_replicator_pub.rrep_mmr_txset metadata table displays the
following:
mmrnode_c=# SELECT set_id, pub_id, db_id AS target_db_id, status,
mmrnode_c-# start_rrep_sync_id, end_rrep_sync_id
mmrnode_c-# FROM _edb_replicator_pub.rrep_mmr_txset;
set_id | pub_id | target_db_id | status | start_rrep_sync_id | end_rrep_sync_id
--------+--------+--------------+--------+--------------------+------------------
1 | 3 | 1 | C | 1 | 4
1 | 3 | 4 | C | 1 | 4
2 | 3 | 1 | P | 1 | 4
3 | 3 | 4 | P | 1 | 4
(4 rows)
There are now two new entries with pending status (P), one for target db_id 1, the other
for target db_id 4. Both entries cover the rrep_sync_id range of 1 through 4.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 346
EDB Postgres Replication Server User’s Guide
The two entries with completed status (C) are from the synchronization attempt that
initially produced the conflict.
Step 6: Perform synchronization replication.
The insert and three update transactions recorded in the rrst_edb_emp shadow table on
mmrnode_c are replicated to the other master nodes.
On mmrnode_a:
mmrnode_a=# SELECT * FROM emp WHERE empno = 9001;
empno | ename | job | mgr | hiredate | sal | comm | deptno
-------+-------+----------+------+----------+---------+---------+--------
9001 | JONES | SALESMAN | 7698 | | 9500.00 | 5000.00 | 30
(1 row)
On mmrnode_b:
mmrnode_b=# SELECT * FROM emp WHERE empno = 9001;
empno | ename | job | mgr | hiredate | sal | comm | deptno
-------+-------+----------+------+----------+---------+---------+--------
9001 | JONES | SALESMAN | 7698 | | 9500.00 | 5000.00 | 30
(1 row)
These rows now match the row created by the original transactions on mmrnode_c:
mmrnode_c=# SELECT * FROM emp WHERE empno = 9001;
empno | ename | job | mgr | hiredate | sal | comm | deptno
-------+-------+----------+------+----------+---------+---------+--------
9001 | JONES | SALESMAN | 7698 | | 9500.00 | 5000.00 | 30
(1 row)
Step 7: In the control schema of the publication database currently designated as the
controller database, modify the entries in the xdb_conflicts table to indicate the
conflict has been resolved as in Step 3 of Section 6.6.9.4.
For a uniqueness (insert/insert) conflict only, the following query on the
xdb_conflicts table in the controller database can display the conflicts:
mmrnode_a=# SELECT * FROM _edb_replicator_pub.xdb_conflicts
mmrnode_a-# WHERE pk_value = 'empno=9001'
mmrnode_a-# AND conflict_type = 'II'
mmrnode_a-# AND resolution_status = 'P';
-[ RECORD 1 ]-------+---------------------------------------------------------------
src_db_id | 4
target_db_id | 56
src_rrep_sync_id | 1
target_rrep_sync_id | 0
table_id | 32
conflict_time | 25-AUG-15 15:27:20.928679
resolution_status | P
resolution_strategy |
resolution_time |
alert_status |
conflict_type | II
win_db_id | 0
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 347
EDB Postgres Replication Server User’s Guide
win_rrep_sync_id | 0
notes | ERROR: duplicate key value violates unique constraint "emp_pk"
| Detail: Key (empno)=(9001) already exists.
pk_value | empno=9001
-[ RECORD 2 ]-------+---------------------------------------------------------------
src_db_id | 56
target_db_id | 4
src_rrep_sync_id | 1
target_rrep_sync_id | 0
table_id | 32
conflict_time | 25-AUG-15 15:27:20.970959
resolution_status | P
resolution_strategy |
resolution_time |
alert_status |
conflict_type | II
win_db_id | 0
win_rrep_sync_id | 0
notes | ERROR: duplicate key value violates unique constraint "emp_pk"
| Detail: Key (empno)=(9001) already exists.
pk_value | empno=9001
The following SQL statement changes the value in column resolution_status from
P (pending) to C (completed) to indicate this conflict has been resolved. The value in
winning_db_id is changed to 56 to indicate master node mmrnode_c contains the
winning transaction. The value in winning_rrep_sync_id is changed to the value of
rrep_sync_id for the shadow table entry of the INSERT transaction in mmrnode_c
since this is the one deemed to be correct.
UPDATE _edb_replicator_pub.xdb_conflicts SET
resolution_status = 'C',
win_db_id = 56,
win_rrep_sync_id = 1
WHERE pk_value = 'empno=9001'
AND conflict_type = 'II'
AND resolution_status = 'P';
When viewed in the Conflict History tab, the entry now shows Resolved in the
Resolution Status column, and the Winning DB column shows the address of master node
mmrnode_c.
Figure 6-48 - Resolved uniqueness conflict
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 348
EDB Postgres Replication Server User’s Guide
6.6.10 Manual Conflict Resolution for the Log-Based Method
Note: The manual conflict resolution discussion in this section applies only to multi-
master replication systems configured with the log-based method of synchronization
replication. See Section 6.6.9 for information on manual conflict resolution for multi-
master replication systems configured with the trigger-based method of synchronization
replication.
As discussed in Section 6.6.5 there is no built-in, automatic conflict resolution strategy
for the uniqueness (insert/insert) conflict. If a uniqueness conflict occurs, then you must
modify rows in the publication tables containing the conflict as well as modify rows in
the control schema tables in the master nodes to resolve the conflict.
Similarly, manual correction must be used for update/delete and delete/update conflicts.
In addition, if the conflict resolution option is set to Manual (see Section 6.8) and a
conflict occurs, this conflict must also be resolved in a manual fashion.
This section describes the updates you must make to the publication tables and the
control schema tables in the master nodes.
This discussion is divided into the following topics:
 Finding Conflicts. Locating unresolved conflicts
 Conflict Resolution Concept for the Log-Based Method. Basic concept on how
to run transactions to apply corrections
 Overview of Correction Strategies. Overview of the methods you can use to
perform the corrections
 Manual Publication Table Correction. Manual correction of the publication
tables
 Correction Using New Transactions. Using new transactions to bring all master
nodes to a consistent state
The following sections describe these topics in detail.
6.6.10.1 Finding Conflicts
Conflicts can be found using the Conflict History tab as described in Section 6.7. The
following is an example of the Conflict History tab. Click the Refresh button to reveal all
of the latest conflicts.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 349