        {
        printf("a1[1]_%x = %x\n", a1[1], a1[9]);    
          a1[1] = a1[9];
          ++a1[8];
        }
        if ( *(unsigned char *)a1[8] == 17 )
        {
            //printf("============================\n");
          printf("%x\n", a1[1]);
          ++a1[8];
          //printf("%x\n", *(unsigned char *)(a1[8]));
        }
        if ( *(unsigned char *)a1[8] == 0xA0 )
        {
          if ( a1[1] != 1877735783 )
            printf("a1[1] != 1877735783 %x\n\n\n\n\n", a1[1]);
          ++a1[8];
        }
        if ( *(unsigned char *)a1[8] == 0xA1 )
        {
          //read(0, s, 0x2Cu);
          //if ( strlen(s) != 44 )
            //exit(0);
          ++a1[8];
        }
        if ( *(unsigned char *)a1[8] == 0xB1 )
        {
             //printf("?????????????????????????????????????????????????\n");
          a1[9] = dword_804B080[0];
          ++a1[8];
        }
        if ( *(unsigned char *)a1[8] == 0xB2 )
        {
          a1[9] = dword_804B080[1];
          ++a1[8];
        }
        if ( *(unsigned char *)a1[8] == 0xA4 )
        {    
          dword_804B080[*(unsigned __int8 *)(a1[8] + 1)] = a1[1];
          a1[8] += 4;
        }
        if ( *(unsigned char *)a1[8] == 0xB3 )
        {
          a1[9] = dword_804B080[2];
          ++a1[8];
        }
        if ( *(unsigned char *)a1[8] == 0xB4 )
        {
          a1[9] = dword_804B080[3];
          ++a1[8];
        }
        if ( *(unsigned char *)a1[8] == 0xC1 )
        {
          a1[1] = (unsigned char)s[*(unsigned char *)(a1[8] + 1)];
          printf("a1[1] = %x\n", a1[1]);
          a1[8] += 2;
          if(count == 32)
            {
                printf("%x\n", *(unsigned char *)(a1[8]));
            }
          count++;
        }
        if ( *(unsigned char *)a1[8] == 0xC7 )
        {
          if ( dword_804B060 != a1[1] )
            printf("%x != a1[1] %x\n\n\n", dword_804B060, a1[1]);
          ++a1[8];
        }
        if ( *(unsigned char *)a1[8] == 0xC8 )
        {
          if ( dword_804B064 != a1[1] )
            printf("%x != a1[1] %x\n\n\n\n", dword_804B064, a1[1]);
          ++a1[8];
        }
        if ( *(unsigned char *)a1[8] == 0xC2 )
        {
          if ( (unsigned __int8)*(unsigned int *)(a1[8] + 1) != a1[1] )
          {
            printf("(unsigned __int8)*(unsigned int *)(a1[8] + 1) != a1[1]\n");
            flag[cnt++] = (unsigned __int8)*(unsigned int *)(a1[8] + 1)^'*'^a1[1];
          }
          a1[8] += 5;
        }
      }
      return 1;
    }
    int main(void)
    {
        unsigned char op[] = {0xA1, 0xC1, 0x00, 0xB1, 0x77, 0xC2, 0x4A, 0x01, 0x00, 0x00, 0xC1, 0x01, 0xB2, 0x77, 0xC2, 0x19, 0x01, 0x00, 0x00, 0xC1, 0x02, 0xB4, 0x77, 0xC2, 0xDD, 0x01, 0x00, 0x00, 0xC1, 0x03, 0xB3, 0x77, 0xC2, 0x0F, 0x01, 0x00, 0x00, 0xC1, 0x04, 0xB2, 0x77, 0xC2, 0x1B, 0x01, 0x00, 0x00, 0xC1, 0x05, 0xB4, 0x77, 0xC2, 0x89, 0x01, 0x00, 0x00, 0xC1, 0x06, 0xB1, 0x77, 0xC2, 0x19, 0x01, 0x00, 0x00, 0xC1, 0x07, 0xB3, 0x77, 0xC2, 0x54, 0x01, 0x00, 0x00, 0xC1, 0x08, 0xB1, 0x77, 0xC2, 0x4F, 0x01, 0x00, 0x00, 0xC1, 0x09, 0xB1, 0x77, 0xC2, 0x4E, 0x01, 0x00, 0x00, 0xC1, 0x0A, 0xB3, 0x77, 0xC2, 0x55, 0x01, 0x00, 0x00, 0xC1, 0x0B, 0xB3, 0x77, 0xC2, 0x56, 0x01, 0x00, 0x00, 0xC1, 0x0C, 0xB4, 0x77, 0xC2, 0x8E, 0x00, 0x00, 0x00, 0xC1, 0x0D, 0xB2, 0x77, 0xC2, 0x49, 0x00, 0x00, 0x00, 0xC1, 0x0E, 0xB3, 0x77, 0xC2, 0x0E, 0x01, 0x00, 0x00, 0xC1, 0x0F, 0xB1, 0x77, 0xC2, 0x4B, 0x01, 0x00, 0x00, 0xC1, 0x10, 0xB3, 0x77, 0xC2, 0x06, 0x01, 0x00, 0x00, 0xC1, 0x11, 0xB3, 0x77, 0xC2, 0x54, 0x01, 0x00, 0x00, 0xC1, 0x12, 0xB2, 0x77, 0xC2, 0x1A, 0x00, 0x00, 0x00, 0xC1, 0x13, 0xB1, 0x77, 0xC2, 0x42, 0x01, 0x00, 0x00, 0xC1, 0x14, 0xB3, 0x77, 0xC2, 0x53, 0x01, 0x00, 0x00, 0xC1, 0x15, 0xB1, 0x77, 0xC2, 0x1F, 0x01, 0x00, 0x00, 0xC1, 0x16, 0xB3, 0x77, 0xC2, 0x52, 0x01, 0x00, 0x00, 0xC1, 0x17, 0xB4, 0x77, 0xC2, 0xDB, 0x00, 0x00, 0x00, 0xC1, 0x18, 0xB1, 0x77, 0xC2, 0x19, 0x01, 0x00, 0x00, 0xC1, 0x19, 0xB4, 0x77, 0xC2, 0xD9, 0x00, 0x00, 0x00, 0xC1, 0x1A, 0xB1, 0x77, 0xC2, 0x19, 0x01, 0x00, 0x00, 0xC1, 0x1B, 0xB3, 0x77, 0xC2, 0x55, 0x01, 0x00, 0x00, 0xC1, 0x1C, 0xB2, 0x77, 0xC2, 0x19, 0x00, 0x00, 0x00, 0xC1, 0x1D, 0xB3, 0x77, 0xC2, 0x00, 0x01, 0x00, 0x00, 0xC1, 0x1E, 0xB1, 0x77, 0xC2, 0x4B, 0x01, 0x00, 0x00, 0xC1, 0x1F, 0xB2, 0x77, 0xC2, 0x1E, 0x00, 0x00, 0x00, 0xC1, 0x20, 0x80, 0x02, 0x18, 0x00, 0x00, 0x00, 0x23, 0x10, 0xC1, 0x21, 0x80, 0x02, 0x10, 0x00, 0x00, 0x00, 0x23, 0xF7, 0xC1, 0x22, 0x80, 0x02, 0x08, 0x00, 0x00, 0x00, 0x23, 0xF7, 0xC1, 0x23, 0xF7, 0xFE, 0x80, 0x02, 0x05, 0x00, 0x00, 0x00, 0x22, 0x77, 0x10, 0x80, 0x02, 0x07, 0x00, 0x00, 0x00, 0x23, 0x80, 0x02, 0x23, 0x77, 0xF1, 0x98, 0x31, 0x77, 0x10, 0x80, 0x02, 0x18, 0x00, 0x00, 0x00, 0x23, 0x80, 0x02, 0x20, 0xB9, 0xE4, 0x35, 0x31, 0x77, 0x10, 0x80, 0x02, 0x12, 0x00, 0x00, 0x00, 0x22, 0x77, 0xA0, 0xC1, 0x24, 0x80, 0x02, 0x18, 0x00, 0x00, 0x00, 0x23, 0x10, 0xC1, 0x25, 0x80, 0x02, 0x10, 0x00, 0x00, 0x00, 0x23, 0xF7, 0xC1, 0x26, 0x80, 0x02, 0x08, 0x00, 0x00, 0x00, 0x23, 0xF7, 0xC1, 0x27, 0xF7, 0xFE, 0x32, 0x20, 0x43, 0x33, 0x77, 0x80, 0x02, 0x11, 0x00, 0x00, 0x00, 0x22, 0x35, 0x37, 0x38, 0x77, 0x80, 0x02, 0x0D, 0x00, 0x00, 0x00, 0x23, 0x77, 0x38, 0x39, 0x10, 0x32, 0x20, 0x43, 0x33, 0x77, 0x80, 0x02, 0x11, 0x00, 0x00, 0x00, 0x22, 0x35, 0x37, 0x38, 0x77, 0x80, 0x02, 0x0D, 0x00, 0x00, 0x00, 0x23, 0x77, 0x38, 0x39, 0xC7, 0xC1, 0x28, 0x80, 0x02, 0x18, 0x00, 0x00, 0x00, 0x23, 0x10, 0xC1, 0x29, 0x80, 0x02, 0x10, 0x00, 0x00, 0x00, 0x23, 0xF7, 0xC1, 0x2A, 0x80, 0x02, 0x08, 0x00, 0x00, 0x00, 0x23, 0xF7, 0xC1, 0x2B, 0xF7, 0xFE, 0x32, 0x20, 0x43, 0x33, 0x77, 0x80, 0x02, 0x11, 0x00, 0x00, 0x00, 0x22, 0x35, 0x37, 0x38, 0x77, 0x80, 0x02, 0x0D, 0x00, 0x00, 0x00, 0x23, 0x77, 0x38, 0x39, 0x10, 0x32, 0x20, 0x43, 0x33, 0x77, 0x80, 0x02, 0x11, 0x00, 0x00, 0x00, 0x22, 0x35, 0x37, 0x38, 0x77, 0x80, 0x02, 0x0D, 0x00, 0x00, 0x00, 0x23, 0x77, 0x38, 0x39, 0xC8, 0x99};
        unsigned int a1[10] = {0};
        a1[8] = (unsigned int)op;
        sub_80487A8(a1);
        puts(flag);
        //printf("%x\n", count);
    }
运行得到前面32字节明文： **16584abc45baff901c59dde3b1bb6701**
后面12字节加密逻辑。
前4字节：
    a1[1] = 2a
    80
    23
    a1[1]_2a >= 5
    a1[1]_1515151 ^= 2a2a2a2a
    a1[9]_2a2a2a2a = 2b7b7b7b
    23
    a1[1]_2b7b7b7b >= 12
    a1[1]_20b2 ^= 82ca4e7b
    a1[1] != 1877735783 82ca6ec9
后面4字节加密逻辑：
    a1[1] = 2a
    23
    a1[1]_2a >= 11
    a1[5] = 37b7
    a1[1] = 37b7
    a1[1]_37b7 ^= 45454540
    a1[1]_454572f7 ^= 2a2a2a2a
    23
    a1[1]_6f6f58dd >= 11
    a1[5] = 575
    a1[1] = 575
    a1[1]_575 ^= 8e9f1ba0
    a1[1]_8e9f1ed5 ^= 8474f8dd
    23
    a1[1]_aebe608 > 5)^tmp
    tmp = ((tmp << 7)&0x98f17723)^tmp