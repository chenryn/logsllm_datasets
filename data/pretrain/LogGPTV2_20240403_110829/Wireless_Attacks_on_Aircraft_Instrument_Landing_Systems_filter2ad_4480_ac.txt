Figure 8: Schematic of the experiment setup used for evaluating the
attacks on ILS. The attacker control unit interfaces with the simula-
tor and USRP B210s. A ﬂight yoke and throttle system is connected
to the machine running X-Plane ﬂight simulator software. Attacker
control unit interfaces with the ﬂight simulator over a UDP/IP net-
work.
4.1 Experimental Setup
Our experimental setup is shown in Figure 8 and Figure 9.
The setup consists of four main components: i) X-Plane 11
ﬂight simulator, ii) attacker control unit, iii) software-deﬁned
radio hardware platforms (USRP B210s) and iv) commercial
aviation grade handheld navigation receiver. We use X-Plane
11 ﬂight simulator to test the effects of spooﬁng attack on
the ILS. X-Plane is a professional ﬂight simulator capable
of simulating several commercial, military, and other aircraft.
X-Plane can also simulate various visibility conditions and
implements advanced aerodynamic models to predict an air-
craft’s performance in abnormal conditions. It is important to
note that X-Plane qualiﬁes for FAA-certiﬁed ﬂight training
hours when used with computer systems that meet the FAA’s
minimum frame rate requirements. The certiﬁed versions of
the software are used in numerous pilot training schools. X-
Plane allows interaction with the simulator and instruments
through a variety of mobile apps and UDP/IP networks. This
feature allowed us to manipulate the instrument readings for
evaluating our ILS attacks. Additionally, X-Plane has autopi-
USENIX Association
28th USENIX Security Symposium    363
> DemodFilter 150HzFilter 90HzILS Receiver SAT90SAT150VLOC90VAT150BridgeRectifierBridgeRectifierDDM = DDMAT     -0.155DDMLOC = 0SLOC+ATSLOC+SATt-VAT150VLOC90VAT90VAT150f (Hz)f (Hz)Fc fc+150fc+90fc-90fc-150fc+150fc-150RF Source90 Hz or 150 HzDSB-SCModulator90 Hz     90 Hzf (Hz)fc+90/150fc-90/150RF SourceCarrier108.1-111.95MHzHandheld Aviation ReceiverUSRP 2USRP 1LOCGSLOCATGSATLocation DataInstrument valuesSpoofing zone detectorLegitimate signal generatorAttacker signal generatorOffset correction algorithmAttacker control unitFigure 9: Photo of the experiment setup.
lot and AI-based autoland features which we leverage in our
experiments. In other words, X-Plane contains all the features
and ﬂexibility to evaluate our proposed attacks in a close to
the real-world setting. The second component of our setup is
the attacker control unit module which takes the location of
the aircraft as input from X-Plane and generates signals for
the attack. The module is also responsible for manipulating
X-Plane’s instrument panel based on the effect of the spoof-
ing signal on the receiver. The attacker control unit module
is a laptop running Ubuntu and contains four submodules:
spooﬁng zone detector, offset correction algorithm, legitimate
signal generator, and attacker signal generator. The spooﬁng
zone detector identiﬁes whether an aircraft is entering its ﬁrst
waypoint of the ﬁnal approach and triggers the start of spoof-
ing. The spooﬁng zone detector plays an important role in
timely starting of the spooﬁng attack so as to prevent any
abrupt changes in the instrument panel and therefore avoid
suspicion. The offset correction algorithm uses the current
location of the aircraft to continuously correct its spooﬁng
signals taking into consideration aircraft’s corrective actions.
Note that the location data received from X-Plane can be
analogous to receiving the location data through ADS-B sig-
nals [29] in the real world. The output of the offset correction
algorithm is used to generate fake ILS signals. We also gener-
ate legitimate signals to evaluate the effect of overshadow and
single-tone attacks. We use two USRP B210s [2], one each
for transmitting legitimate ILS signals and attacker signals.
We conducted the experiments in both wired and wireless set-
tings. For the experiments conducted in wireless settings, the
receiver was placed at a distance of 2 meters from the trans-
mitter. Northeastern University has access to a Department of
Homeland Security laboratory which provides RF shielding
thus preventing signal leakage. This is necessary as it is ille-
gal to transmit ILS signals over the air. We use two different
ILS receivers, a Yaesu FTA-750L [10] and a Sporty’s SP-400
Handheld NAV/COM Aviation [3] to evaluate the attacks.
Figure 10: The spooﬁng zone is deﬁned by points B, C, D, and
E. WINNI, NABBO, and MILTT are the waypoints for the ﬁnal
approach as published for a mid-sized airport. The spooﬁng zone has
a wide aperture as the air-trafﬁc controller can vector in the aircraft
onto the ﬁnal approach in multiple ways.
4.1.1 Spooﬁng Zone Detection
The spooﬁng zone detection algorithm enables automated
and timely triggering of the spooﬁng signal. One of the key
requirements of the zone detector is to trigger the spooﬁng
signals without causing any abrupt changes to the instrument
readings; thereby avoiding detection by the pilots. The spoof-
ing region is shaped like a triangle following the coverage of
the localizer and glideslope signals. For example, the localizer
covers 17.5◦ on either side of the extended runway centerline
and extends for about 35 km beyond the touchdown zone. Fig-
ure 10 shows the zone measurements. The attacker signals
are triggered when the aircraft approaches the shaded region.
The shaded region is decided based on the ﬁnal approach pat-
terns for a speciﬁc runway. We used even-odd algorithm [27]
for detecting the presence of the aircraft within this spooﬁng
zone. Absolute locations cannot be used as aircraft enter the
ﬁnal approach path in many different ways based on their
arrival direction and air trafﬁc controller instructions. The
even-odd algorithm is extensively used in graphics software
for region detection and has low computational overhead. The
attacker automatically starts transmitting the signals as soon
as the aircraft enters the spooﬁng region from the sides and
the needle is yet to be centered. This prevents any sudden
noticeable jumps thus allowing a seamless takeover.
4.1.2 Offset correction algorithm
The attacker’s signals are pre-crafted to cause the aircraft
to land with a speciﬁc offset without being detected. The
pilot or the autopilot system will perform course correction
maneuvers to align with the runway centerline based on the
instrument readings. At this point, the instruments will contin-
uously indicate the spoofed offset irrespective of the aircraft’s
location and maneuvers raising suspicion of an instrument
failure. To prevent this, we developed a real-time offset correc-
364    28th USENIX Security Symposium
USENIX Association
USRP 1USRP 2Handheld RxX-Plane flight SimulatorAttacker control unitABCED22kmNABBOMILTTWINNI37kmF9.45km9.45km9.45kmAlgorithm 1 Offset correction algorithm.
1: procedure GETANGLEDIFFERENCE
2:
3:
4:
5:
6: procedure CALCULATEDDM
7:
8:
9:
10:
11:
∠DAC ← TargetedLocalizerO f f set
∠BAC ← GetAngle(location)
di f f erence ← ∠DAC−∠BAC
return di f f erence
di f f erence ← GetAngleDi f f erence
ddm ← (0.155∗ di f f erence)/2.5
AT 90 ← 0.2 + (ddm)/2
AT 150 ← 0.2− (ddm)/2
ChangeAmplitude(AT 90,AT 150)
4.1.3 Setup Validation
We veriﬁed the working of our experimental setup as fol-
lows. First, we ensure consistency between the CDI needle
displayed on the ﬂight simulator and the handheld receiver.
To this extent, we disabled the attacker signal and output only
the legitimate signal to the handheld receiver based on the
aircraft’s location obtained from X-Plane. We manually val-
idated that the alignment shown on the handheld receiver
is the same as that of the ﬂight simulator throughout the ﬁ-
nal approach. The uploaded attack demonstration video 2
also contains this validation for reference. We conducted the
same experiment over the air in a controlled environment and
veriﬁed consistency between the handheld receiver and the
ﬂight simulator cockpit. Second, we test our offset correction
algorithm by maneuvering (swaying) the aircraft during its
ﬁnal approach. During this experiment, the offset correction
algorithm should account for the maneuvers and generate cor-
responding ILS signals to the handheld receiver. We ensure
the correctness of the algorithm by validating the consistency
between the handheld receiver’s CDI needle and the ﬂight
simulator cockpit. Note that we do not update the ﬂight simula-
tor’s instrument readings for this experiment and the readings
displayed in the simulator cockpit are only because of the sim-
ulator software engine. Finally, we validate the spooﬁng zone
detector algorithm by entering the ﬁnal approach from various
directions and checking the trigger for beginning the spooﬁng
attack. We are now ready to perform our attack evaluations.
4.2 Evaluation of Overshadow Attack
We evaluate the effectiveness of overshadow attack as follows.
We leverage the autopilot and autoland feature of X-Plane to
analyze the attack’s effects avoiding any inconsistency that
might arise due to human error. We conﬁgured X-Plane to
land on the runway of a midsized airport in the US. This
conﬁguration is analogous to the pilot following approach
instructions from the air-trafﬁc controller. As soon as the
aircraft entered the spooﬁng zone, the spooﬁng signals were
transmitted along with the legitimate signals. The spooﬁng
2Video demonstration of the attack https://youtu.be/Wp4CpyxYJq4
Figure 11: Offset correction algorithm takes into account aircraft’s
current position to calculate the difference in the spoofed offset and
the current offset.
tion and signal generation algorithm that crafts the spooﬁng
signals based on the aircraft’s current location in real-time.
The attacker can use the GPS coordinates if present inside the
aircraft or leverage the ADS-B packets containing location
information on the ground. We explain the offset correction
algorithm using Figure 11. Consider an aircraft at point B,
cleared to land and entering the spooﬁng zone. The air-trafﬁc
controller instructs the aircraft to intercept point C on the ex-
tended runway centerline. Assuming that the attacker’s spoof-
ing signal contains a pre-crafted offset to the left of the run-
way forcing the aircraft to follow path DA instead of CA. The
offset correction module computes the current offset of the
aircraft with respect to the centerline and subtracts the current
offset from the spoofed offset to estimate the desired change
in the course. Thus, the correction ∆ required to be introduced
is the difference between required offset angle ∠DAC and
the current offset angle ∠BAC. Note that offsets to the left of
centerline are considered negative offsets and offsets to the
right are considered positive offsets. The current offset θ can
be estimated using θ = tan−1[(mCA−mBA)/(1+mBA∗mCA)],
where m is the slope. mCA is typically hardcoded and is spe-
ciﬁc for each runway. mBA can be estimated using the lon-
gitude and latitudes of the touchdown point and the current
location of the aircraft. Now, the correction ∆ is converted to
the respective difference in depth of modulation value using
the formula DDM = (DDM f ullscale ∗∆)/2.5, where 2.5 is the
angle that results in full-scale deviation and DDM f ullscale is
the difference in depth of modulation that causes full-scale
deviation. The amplitude of the individual 90 and 150 Hz
components is estimated using the formula 0.2 + (DDM/2)
and sent to the signal generator module which then trans-
mits the required signal. Note that the value 0.2 comes from
the legitimate signal’s depth of modulation. The algorithm
was implemented on a laptop running Ubuntu and took less
than 5 ms on average to compute the offsets. The complete
algorithm is shown in Algorithm 1.
USENIX Association
28th USENIX Security Symposium    365
ABCDFigure 12: Results of localizer spooﬁng. 5 automated landings per
spoofed localizer offset were executed and the touchdown offset in
meters from the runway centerline was recorded.
signals were generated to fake various vertical and horizon-
tal offsets. Note that the spooﬁng signals were generated in
real-time based on the current position of the aircraft. For the
localizer (horizontal offset), spooﬁng signals corresponding
to 0.5, 1.0, and 1.5◦ offset on both sides of the runway were
generated. The spooﬁng glideslope angles were between 2.8◦
and 3.3◦. For each spooﬁng angle and offset, we performed
ﬁve automated landings and the results are shown in Fig-
ure 12 and Figure 13. Throughout the attack, we continuously
monitored the path of the aircraft using Foreﬂight 3, a pop-
ular app used both by aviation enthusiasts and commercial
pilots as well as X-Plane’s own interfaces. We did not observe
any abrupt changes in the readings and observed a smooth
takeover. The aircraft landed with an 18 m offset from the run-
way centerline for a spooﬁng offset of just 0.5◦. Note that this
is already close to the edge of the runway and potentially go
undetected by both the air-trafﬁc controllers as well as pilots
onboard, especially in low visibility conditions. In the case
of glideslope, a shift in the glide path angle by 0.1◦ i.e., 2.9◦
glide path angle instead of the recommended 3◦, caused the
aircraft to land almost 800 m beyond the safe touchdown zone
of the runway. We have uploaded a video demonstration of
the attack for reference ( https://youtu.be/Wp4CpyxYJq4
).
4.3 Evaluation of Single-tone Attack
We evaluate the effectiveness and feasibility of the proposed
single-tone attack using the experimental setup described
in Section 4.1. Recall that in the single-tone attack, the at-
tacker transmits only one of the sideband tones (either the
fc ± 90 or the fc ± 150 Hz) to cause deﬂections in the course
deviation indicator needle. We implemented the attack by con-
ﬁguring one of the USRPs (attacker) to transmit the sideband
signals and observed its effect on the handheld navigation re-
3Advanced Flight Planner https://www.foreﬂight.com
Figure 13: Results of glideslope spooﬁng. 5 automated landings per
spoofed glideslope angle offset were executed and the touchdown
offset in meters beyond the touchdown zone was recorded.
ceiver. We observed that the spooﬁng signal caused the needle
to deﬂect to the conﬁgured offset. However, the needle was
not as stable as in the overshadow attack and displayed minor
oscillations. This is because the speciﬁc attack is sensitive to
carrier phase oscillations and therefore must be accounted for
to avoid detection. A signiﬁcant advantage of this attack is
the power required to cause needle deﬂections as the attacker
only transmits one of the sideband components without the
carrier. This gives an almost 50% increase in power efﬁciency
and therefore can act as a low-power last-minute denial of
service attack in case the attacker is unable to establish full
synchronization with the legitimate signal. In the following
sections, we evaluate the effect of phase synchronization on
the single-tone attack and develop a real-time amplitude scal-
ing algorithm that can counter the phase oscillations.
4.3.1 Effect of Phase Synchronization
Recall that the single-tone attack signal is similar to a conven-
tional double-sideband suppressed-carrier (DSB-SC) signal.
It is well known that one of the drawbacks of a DSB-SC com-
munication system is the complexity of recovering the carrier
signal during demodulation. If the carrier signal used at the
receiver is not synchronized with the carrier wave used in
the generation of the DSB-SC signal, the demodulated signal
will be distorted. In the scenario of the single-tone attack, this
distortion can potentially result in changes in the difference
in the depth of modulation estimates causing the needle to
oscillate. We simulated the effect of phase synchronization
on the single-tone attack effectiveness and present our results