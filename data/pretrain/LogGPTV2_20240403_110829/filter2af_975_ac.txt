    sys.stdin.read()
运行一下（这里需要刷新一下，大家都懂，那个小圈圈转啊转就是刷新了）,成功用脚本发送了文字的pyq。测试结果如下：
###  4.2 图片动态分析
接下来分析一下图片类型的动态。思路一样，先找到图片调用的方法com.tencent.mm.plugin.sns.ui.ak。同样的ak也是有个Activity类型的参数不好构造
找到ak下面的a方法，可以发现这里有很多种a方法
找到需要相同参数的a方法后进行分析
在a方法的开头，看到利用迭代器去遍历一个列表，遍历过程中组装com.tencent.mm.plugin.sns.data.p类的数据，然后把p类放入链表linkedList2中
跟进p这个类看看，可以看到有很多成员变量，目前还不知道这些具体的含义
查看linkedList2在哪里被引用，发现在下面的第二张图片中有着”commit pic size “这样的字样，应该就是写入日志吧
对于上面的第三张图片可以发现linkedList2传入了两个地方。
①处没什么好看的，跟进之后发现对List没有进行赋值
接下来分析一下②处，跟进去之后，发现这里将list赋给this.wWX
而this.wWX在接下来也有使用，在dQ中发现了azVar的fo使用了this.wWx。同时这里还有一句话叫做commit imp time。
而这里的w就是在com.tencent.mm.plugin.sns.ui.ak中的a方法被调用。分析到这，上面的linkedList2传出去之后都终有所属了，即最终都传入了com.tencent.mm.plugin.sns.model.az类fo方法。知道图片往哪传了，可以写个frida代码测试一下。
为了测试需要，需要先将图片传入模拟器中。这里有可能有出现read-only的错误，所以为了避免这些麻烦，我直接在/data/local/tmp下面建立一个img文件，然后将图片传进去
代码的思路如下：发送文本动态代码的基础上初始化三个p类，分别传入三个本地图片路径，再将三个类实例添加到链表，再将链表传入az类的fo方法，最后调用az类的commit方法将动态发送出去。以下是完整代码：
    # -*- coding: UTF-8 -*-    import frida
    import sys
    jscode ='''
    if(Java.available)
    {
        Java.perform(function(){
            var az_class = Java.use("com.tencent.mm.plugin.sns.model.az");
            var p_class = Java.use("com.tencent.mm.plugin.sns.data.p")
            var desc = "图片测试";
            var likedList_class = Java.use("java.util.LinkedList");
            var linkedListInstance = likedList_class.$new();
            var azInstance = az_class.$new(1);
            var pInstance1 = p_class.$new("/data/local/tmp/img/img1.jpg",2);
            var pInstance2 = p_class.$new("/data/local/tmp/img/img2.jpg",2);
            var pInstance3 = p_class.$new("/data/local/tmp/img/img3.jpg",2);
            linkedListInstance.add(pInstance1);
            linkedListInstance.add(pInstance2);
            linkedListInstance.add(pInstance3);
            azInstance.fo(linkedListInstance);
            azInstance.ans(desc);
            azInstance.commit();
        });
    }
    '''
    def message(message,data):
        if message["type"] == 'send':
            print("[*] {0}".format(message["payload"]))
        else:
            print(message)
    process = frida.get_remote_device().attach("com.tencent.mm")
    script = process.create_script(jscode)
    script.on("message",message)
    script.load()
    sys.stdin.read()
测试结果如下：
###  4.3 视频动态分析
按照图片的思路，直接找到com.tencent.mm.plugin.sns.ui.af中的a方法，在审计代码之前发现几个奇怪的参数，比较明显的就是this.videoPath和this.md5，这两个应该就是视频的路径和视频的md5，(传个视频还要验证md5，醉了)，对于不大明显的this.thumbPath，通过查阅资料之后知道，这是视频封面的路径
对于这三个参数的可以用frida代码来返回其具体的值，以下是返回三个参数的frida代码：
    import frida
    import sys
    jscode ='''
    Java.perform(function(){
    var af = Java.use('com.tencent.mm.plugin.sns.ui.af');
    var af_a = af.a.overload("int","int","org.b.d.i","java.lang.String","java.util.List","com.tencent.mm.protocal.protobuf.blw","java.util.LinkedList","int","boolean","java.util.List","com.tencent.mm.pointers.PInt","java.lang.String","int","int");
    af_a.implementation = function(isPrivate,syncFlag2,twitterAccessToken,desc,atList,location,list1,pasterLen,bool1,list2,pint1,str1,num1,num2){
        var ret = af_a.call(this,isPrivate,syncFlag2,twitterAccessToken,desc,atList,location,list1,pasterLen,bool1,list2,pint1,str1,num1,num2);
        console.log("************Basic Info************");
        console.log("videopath = " + this.videoPath.value);
        console.log("md5 = " + this.md5.value);
        console.log("thumbPath = " + this.thumbPath.value);
        return ret;
    }
    }
    );
    '''
    def message(message,data):
        if message["type"] == 'send':
            print("[*] {0}".format(message["payload"]))
        else:
            print(message)
    process = frida.get_remote_device().attach("com.tencent.mm")
    script = process.create_script(jscode)
    script.on("message",message)
    script.load()
    sys.stdin.read()
得到如下结果，可见发送视频朋友圈的时候确实是需要这三个参数的。
接下来重点分析这个md5是如何获取。
首先还是在szVar这个变量中
之后根据sv这个类中，因为dBs.dBv代表的就是md5，但是这里并没有导入视频路径，所以并没有什么用
继续往下寻找，在j方法中找到相关的信息
在这里看到一句关键的句子：video path，thumb
path后面对应的格式化串是stringExtra和stringExtra2。所以可以推测stringExtra对应的就是视频路径也就是this.videoPath。而这里也通过g.aCZ()方法对md5进行赋值，所以这里应该就是对md5的计算
跟进g.aCZ这个方法，它是在com.tencent.mm.vfs.g这个类中，根据这个函数的返回值进行逆向，发现返回值是取aLe每个字节的值与上255之后再加上256再转换为16进制（总感觉这段代码有点不知所云）
所以现在就是要得到aLe数组的值。通过之前的分析可以知道str这个参数代表的就是视频的路径，这里的aLe数组是通过aLe()方法得到的，参数就是视频的路径。
跟进aLe这个函数，发现程序确实对视频文件进行了MD5计算
所以到了这里可以大概知道视频的md5是如何得到的，
**首先就是真正的计算视频文件的MD5值，之后将获取的散列值的每个字节进行一个小小的变化运算（与上255再加上256）**
，但是仔细一想的话，对于一个字节（8位）&255就相当于没变，再加上256（9位）就相当于加上0。所以这里比较迷，也不知道到底是要干啥。
总之算是分析好了获取MD5的方法
之后尝试使用代码发送视频朋友圈的时候发生一个问题。（这里为了测试直接使用之前代码的路径和md5）。以下是js部分代码
    if(Java.available)
    {
        Java.perform(function(){
            var az_class = Java.use("com.tencent.mm.plugin.sns.model.az");
            var desc = "视频测试";
            var azInstance = az_class.$new(15);
            azInstance.b("","/storage/emulated/0/tencent/MicroMsg/WeiXin/wx_camera_1589198170517.mp4","","a05a5637bc6da550e5ce80a64654e882","/storage/emulated/0/tencent/MicroMsg/ce970bb1ead64d8901415bab33ba544e/videovsg_thumb_1589375986582","");
            azInstance.ans(desc);
            azInstance.commit();
        });
    }
但是结果却是这样的，既无封面图，视频也无法播放。明明之前打印出来的信息都是一样的
于是使用上一个打印信息的代码进行测试，发表的视频都是同一个，这里做了三组测试。发现一个结果，就是每次路径都会发生变化，所以md5值也会变化，所以这样视频和md5就不匹配也就无法正常发送视频
知道了错误的原因之后，就要找到某个函数，传入的参数为视频路径、封面图、md5等相关参数。但是对于模块com.tencent.mm.plugin.sns.ui.af中好像没有相关的调用，要么就是需要构造intent。此时通过jadx可以发现有一段好像是被注释掉的代码。经过查阅资料之后得知，这里并不是被注释掉，而是可能当前版本的jadx无法解析。并不是实际文件中没有
于是阅读这段代码之后发现一个奇怪的函数，同时这几个参数与猜测的基本一致，有videopath、thumbpah、md5等
于是到com.tencent.mm.plugin.sns.model.az中查看相关代码内容
高度怀疑此段代码就是与视频动态相关的，于是写个frida代码测试以下。当然需要先传进一个封面图和视频  
以下是完整代码：
    # -*- coding: UTF-8 -*-    import frida
    import sys
    jscode ='''
    if(Java.available)
    {
        Java.perform(function(){
            var az_class = Java.use("com.tencent.mm.plugin.sns.model.az");
            var desc = "视频测试";
            var azInstance = az_class.$new(15);
            var videopath = "/data/local/tmp/video/videotest.mp4";
            var thumbpath = "/data/local/tmp/video/thumb.jpg";
            var g = Java.use("com.tencent.mm.vfs.g");
            var md5 = g.aCZ(videopath);
            console.log("md5 = " + md5);
            azInstance.w(videopath,thumbpath,"video test",md5);
            azInstance.ans(desc);
            azInstance.commit();
        });
    }
    '''
    def message(message,data):
        if message["type"] == 'send':
            print("[*] {0}".format(message["payload"]))
        else:
            print(message)
    process = frida.get_remote_device().attach("com.tencent.mm")
    script = process.create_script(jscode)
    script.on("message",message)
    script.load()
    sys.stdin.read()
可以看到，成功发送了视频pyq，并且封面图可以指定，并不是视频的0秒的图片。测试结果如下：
## 5 总结
第一次分析这么高度商业化的产品，难度还是很大的。安全路上永无止尽，继续向大佬们学习。  
比较遗憾的是没有成功绕过视频的时长限制。可能是分析还是不够到位吧，猜测是在服务端进行了时长的处理。希望哪位大佬可以有所突破，然后告知一下，学习学习大佬的技术。