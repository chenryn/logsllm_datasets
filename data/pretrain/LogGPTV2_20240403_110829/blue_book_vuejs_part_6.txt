Test.
If any of these assertions fail, it's clear that the issue is contained within
the `increment` function.
```javascript
// helpers.spec.js
import { increment } from './helpers'
describe('increment', () => {
  test('increments the current number by 1', () => {
    expect(increment(0, 10)).toBe(1)
  })
  test('does not increment the current number over the max', () => {
    expect(increment(10, 10)).toBe(10)
  })
  test('has a default max of 10', () => {
    expect(increment(10)).toBe(10)
  })
})
```
Unit testing is typically applied to self-contained business logic, components,
classes, modules, or functions that do not involve UI rendering, network
requests, or other environmental concerns.
These are typically plain JavaScript / TypeScript modules unrelated to Vue. In
general, writing unit tests for business logic in Vue applications does not
differ significantly from applications using other frameworks.
There are two instances where you DO unit test Vue-specific features:
* [Composables](https://vuejs.org/guide/scaling-up/testing.html#testing-composables)
* [Components](#component-testing)
## Component testing
In Vue applications, components are the main building blocks of the UI.
Components are therefore the natural unit of isolation when it comes to
validating your application's behavior. From a granularity perspective,
component testing sits somewhere above unit testing and can be considered a form
of integration testing. Much of your Vue Application should be covered by
a component test and we recommend that each Vue component has its own spec
file.
Component tests should catch issues relating to your component's props, events,
slots that it provides, styles, classes, lifecycle hooks, and more.
Component tests should not mock child components, but instead test the
interactions between your component and its children by interacting with the
components as a user would. For example, a component test should click on an
element like a user would instead of programmatically interacting with the
component.
Component tests should focus on the component's public interfaces rather than
internal implementation details. For most components, the public interface is
limited to: events emitted, props, and slots. When testing, remember to *test
what a component does, not how it does it*. For example:
* For Visual logic assert correct render output based on inputted props and
    slots.
* For Behavioral logic: assert correct render updates or emitted events in
    response to user input events.
The recommendation is to use [Vitest](vitest.md) for components or
composables that render headlessly, and [Cypress Component
Testing](https://on.cypress.io/component) for components whose expected behavior
depends on properly rendering styles or triggering native DOM event.
The main differences between Vitest and browser-based runners are speed and
execution context. In short, browser-based runners, like Cypress, can catch
issues that node-based runners, like Vitest, cannot (e.g. style issues, real
native DOM events, cookies, local storage, and network failures), but
browser-based runners are orders of magnitude slower than Vitest because they do
open a browser, compile your stylesheets, and more.
Component testing often involves mounting the component being tested in
isolation, triggering simulated user input events, and asserting on the rendered
DOM output. There are dedicated utility libraries that make these tasks
simpler.
* [`@testing-library/vue`](https://github.com/testing-library/vue-testing-library) is a Vue testing library focused on testing components
    without relying on implementation details. Built with accessibility in mind,
    its approach also makes refactoring a breeze. Its guiding principle is that
    the more tests resemble the way software is used, the more confidence they
    can provide.
* `@vue/test-utils` is the official low-level component testing library that was
    written to provide users access to Vue specific APIs. It's also the
    lower-level library `@testing-library/vue` is built on top of.
I recommend using [cypress](cypress.md) so that you can use the same language
either you are doing E2E tests or unit tests.
If you're using [Vuetify](vuetify.md) don't try to do component testing, I've
tried for days and [was unable to make it work](vuetify.md#testing).
## E2E Testing
While unit tests provide developers with some degree of confidence, unit and
component tests are limited in their abilities to provide holistic coverage of
an application when deployed to production. As a result, end-to-end (E2E) tests
provide coverage on what is arguably the most important aspect of an
application: what happens when users actually use your applications.
End-to-end tests focus on multi-page application behavior that makes network
requests against your production-built Vue application. They often involve
standing up a database or other backend and may even be run against a live
staging environment.
End-to-end tests will often catch issues with your router, state management
library, top-level components (e.g. an App or Layout), public assets, or any
request handling. As stated above, they catch critical issues that may be
impossible to catch with unit tests or component tests.
End-to-end tests do not import any of your Vue application's code, but instead
rely completely on testing your application by navigating through entire pages
in a real browser.
End-to-end tests validate many of the layers in your application. They can
either target your locally built application, or even a live Staging
environment. Testing against your Staging environment not only includes your
frontend code and static server, but all associated backend services and
infrastructure.
### E2E tests decisions
When doing E2E tests keep in mind:
* Cross-browser testing: One of the primary benefits that end-to-end (E2E)
    testing is known for is its ability to test your application across multiple
    browsers. While it may seem desirable to have 100% cross-browser coverage,
    it is important to note that cross browser testing has diminishing returns
    on a team's resources due the additional time and machine power required to
    run them consistently. As a result, it is important to be mindful of this
    trade-off when choosing the amount of cross-browser testing your application
    needs.
* Faster feedback loops: One of the primary problems with end-to-end (E2E) tests
    and development is that running the entire suite takes a long time.
    Typically, this is only done in continuous integration and deployment
    (CI/CD) pipelines. Modern E2E testing frameworks have helped to solve this
    by adding features like parallelization, which allows for CI/CD pipelines to
    often run magnitudes faster than before. In addition, when developing
    locally, the ability to selectively run a single test for the page you are
    working on while also providing hot reloading of tests can help to boost
    a developer's workflow and productivity.
* Visibility in headless mode: When end-to-end (E2E) tests are run in continuous
    integration / deployment pipelines, they are often run in headless browsers
    (i.e., no visible browser is opened for the user to watch). A critical
    feature of modern E2E testing frameworks is the ability to see snapshots
    and/or videos of the application during testing, providing some insight into
    why errors are happening. Historically, it was tedious to maintain these
    integrations.
Vue developers suggestion is to use [Cypress](https://www.cypress.io/) as it
provides the most complete E2E solution with features like an informative
graphical interface, excellent debuggability, built-in assertions and stubs,
flake-resistance, parallelization, and snapshots. It also provides support for
Component Testing. However, it only supports Chromium-based browsers and
Firefox.
## Installation
In a Vite-based Vue project, run:
```bash
npm install -D vitest happy-dom @testing-library/vue@next
```
Next, update the Vite configuration to add the test option block:
```javascript
// vite.config.js
import { defineConfig } from 'vite'
export default defineConfig({
  // ...
  test: {
    // enable jest-like global test APIs
    globals: true,
    // simulate DOM with happy-dom
    // (requires installing happy-dom as a peer dependency)
    environment: 'happy-dom'
  }
})
```
Then create a file ending in `*.test.js` in your project. You can place all test
files in a test directory in project root, or in test directories next to your
source files. Vitest will automatically search for them using the naming
convention.
```javascript
// MyComponent.test.js
import { render } from '@testing-library/vue'
import MyComponent from './MyComponent.vue'
test('it should work', () => {
  const { getByText } = render(MyComponent, {
    props: {
      /* ... */
    }
  })
  // assert output
  getByText('...')
})
```
Finally, update `package.json` to add the test script and run it:
```json
{
  // ...
  "scripts": {
    "test": "vitest"
  }
}
```
```bash
npm test
```
# [Deploying](https://medium.com/js-dojo/vue-js-runtime-environment-variables-807fa8f68665)
It is common these days to run front-end and back-end services inside Docker
containers. The front-end service usually talks using a API with the back-end
service.
```dockerfile
FROM node as ui-builder
RUN mkdir /usr/src/app
WORKDIR /usr/src/app
ENV PATH /usr/src/app/node_modules/.bin:$PATH
COPY package.json /usr/src/app/package.json
RUN npm install
RUN npm install -g @vue/cli
COPY . /usr/src/app
RUN npm run build
FROM nginx
COPY  --from=ui-builder /usr/src/app/dist /usr/share/nginx/html
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
```
The above makes use of the multi-stage build feature of Docker. The first half
of the Dockerfile build the artifacts and second half use those artifacts and
create a new image from them.
To build the production image, run:
```bash
docker build -t myapp .
```
You can run the container by executing the following command:
```bash
docker run -it -p 80:80 --rm myapp-prod
```
The application will now be accessible at `http://localhost`.
## Configuration through environmental variables
In production you want to be able to scale up or down the frontend and the
backend independently, to be able to do that you usually have one or many docker
for each role. Usually there is an SSL Proxy that acts as gate keeper and is the
only component exposed to the public.
If the user requests for `/api` it will forward the requests to the backend, if
it asks for any other url it will forward it to the frontend.
!!! note
        "You probably don't need to configure the backend api url as an environment
        variable see
        [here](frontend_development.md#your-frontend-probably-doesn't-talk-to-your-backend)
        why."
For the frontend, we need to configure the application. This is usually done
through [environmental
variables](#configuration-through-environmental-variables), such as
`EXTERNAL_BACKEND_URL`. The problem is that these environment variables are set at build
time, and can't be changed at runtime by default, so you can't offer a generic
fronted Docker and particularize for the different cases. I've literally cried
for hours trying to find a solution for this until [José Silva came to my
rescue](https://medium.com/js-dojo/vue-js-runtime-environment-variables-807fa8f68665).
The tweak is to use a docker entrypoint to inject the values we want. To do so
you need to:
* Edit the site main `index.html` (if you use Vite is in `/index.html` otherwise
    it might be at `public/index.html` to add a placeholder that will be
    replaced by the dynamic configurations.
    ```html
        ...
    ```
* Create an executable file named `entrypoint.sh` in the root of the project.
    ```bash
    #!/bin/sh
    JSON_STRING='window.configs = { \
      "VITE_APP_VARIABLE_1":"'"${VITE_APP_VARIABLE_1}"'", \
      "VITE_APP_VARIABLE_2":"'"${VITE_APP_VARIABLE_2}"'" \
    }'
    sed -i "s@// CONFIGURATIONS_PLACEHOLDER@${JSON_STRING}@" /usr/share/nginx/html/index.html
    exec "$@"
    ```
    Its function is to replace the placeholder in the index.html by the
    configurations, injecting them in the browser window.
* Create a file named `src/utils/env.js` with the following utility function:
    ```javascript
    export default function getEnv(name) {
      return window?.configs?.[name] || process.env[name]
    }
    ```
    Which allows us to easily get the value of the configuration. If it exists
    in `window.configs` (used in remote environments like staging or production)
    it will have priority over the `process.env` (used for development).
* Replace the content of the `App.vue` file with the following:
    ```html
        {{ variable1 }}
        {{ variable2 }}
    ```
    At this point, if you create the `.env.local` file, in the root of the project,
    with the values for the printed variables:
    ```
    VITE_APP_VARIABLE_1='I am the develoment variable 1'
    VITE_APP_VARIABLE_2='I am the develoment variable 2'
    ```
    And run the development server `npm run dev` you should see those values printed
    in the application (http://localhost:8080).
* Update the `Dockerfile` to load the `entrypoint.sh`.
    ```dockerfile
    FROM node as ui-builder
    RUN mkdir /usr/src/app
    WORKDIR /usr/src/app
    ENV PATH /usr/src/app/node_modules/.bin:$PATH
    COPY package.json /usr/src/app/package.json
    RUN npm install
    RUN npm install -g @vue/cli
    COPY . /usr/src/app
    ARG VUE_APP_API_URL
    ENV VUE_APP_API_URL $VUE_APP_API_URL
    RUN npm run build
    FROM nginx
    COPY  --from=ui-builder /usr/src/app/dist /usr/share/nginx/html
    COPY entrypoint.sh /usr/share/nginx/
    ENTRYPOINT ["/usr/share/nginx/entrypoint.sh"]
    EXPOSE 80
    CMD ["nginx", "-g", "daemon off;"]
    ```
* Build the docker
    ```bash
    docker build -t my-app .
    ```
Now if you have a `.env.production.local` file with the next contents:
```
VITE_APP_VARIABLE_1='I am the production variable 1'
VITE_APP_VARIABLE_2='I am the production variable 2'
```
And run `docker run -it -p 80:80 --env-file=.env.production.local --rm my-app`,
you'll see the values of the production variables. You can also pass the
variables directly with `-e VITE_APP_VARIABLE_1="Overriden variable"`.
## [Deploy static site on github pages](https://github.com/sitek94/vite-deploy-demo)
Sites in Github pages have the url structure of
`https://github_user.github.io/repo_name/` we need to tell vite that the base
url is `/repo_name/`, otherwise the application will try to load the assets in
`https://github_user.github.io/assets/` instead of
`https://github_user.github.io/rpeo_name/assets/`.
To change it, add in the `vite.config.js` file:
```javascript
export default defineConfig({
  base: '/repo_name/'
})
```
Now you need to configure the deployment workflow, to do so, create a new file:
`.github/workflows/deploy.yml` and paste the following code:
```yaml
---
name: Deploy
on:
  push:
    branches:
      - main
  workflow_dispatch:
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: 16
      - name: Install dependencies
        uses: bahmutov/npm-install@v1
      - name: Build project
        run: npm run build
      - name: Upload production-ready build files
        uses: actions/upload-artifact@v2
        with:
          name: production-files
          path: ./dist
  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: production-files
          path: ./dist
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist
```
You'd probably need to change your repository settings under *Actions/General*
and set the *Workflow permissions* to *Read and write permissions*.
Once the workflow has been successful, in the repository settings under *Pages*
you need to enable Github Pages to use the `gh-pages` branch as source.
### [Tip Handling Vue Router with a Custom 404 Page](https://learnvue.co/2020/09/how-to-deploy-your-vue-app-to-github-pages/#tip-handling-vue-router-with-a-custom-404-page)
One thing to keep in mind when setting up the Github Pages site, is that working with Vue Router gets a little tricky.
If you’re using history mode in Vue router, you’ll notice that if you try to go
directly to a page other than `/` you’ll get a 404 error. This is because Github
Pages does not automatically redirect all requests to serve `index.html`.
Luckily, there is an easy little workaround. All you have to do is duplicate
your `index.html` file and name the copy `404.html`.
What this does is make your 404 page serve the same content as your
`index.html`, which means your Vue router will be able to display the right
page.
# Testing
## Debug Jest tests
If you're not developing in Visual code, running a debugger is not easy in the
middle of the tests, so to debug one you can use `console.log()` statements and
when you run them with `yarn test:unit` you'll see the traces.
# Troubleshooting
## Failed to resolve component: X
If you've already imported the component with `import X from './X.vue` you may
have forgotten to add the component to the `components` property of the module:
```javascript
export default {
  name: 'Inbox',
  components: {
    X
  }
}
```
# References
* [Docs](https://vuejs.org/guide/introduction.html)
* [Homepage](https://vuejs.org)
* [Tutorial](https://vuejs.org/tutorial/#step-1)
* [Examples](https://vuejs.org/examples/#hello-world)
* [Awesome Vue
    Components](https://next.awesome-vue.js.org/components-and-libraries/ui-components.html)
## Axios
* [Docs](https://axios-http.com/docs/intro)
* [Git](https://github.com/axios/axios)
* [Homepage](https://axios-http.com/)