Inside the Matrix,How to Build Transparent 
Sandbox for Malware Analysis
C.K Chen (Bletchley)
1
Who am I
   C.K Chen (陈仲宽) 
   P.H.D Student in DSNS Lab, NCTU 
   Research in 
   Reverse Engineering 
   Malware Analysis 
   Virtual Machine 
2
About DSNS
   谢续平教授 
   实验室研究方向 
   恶意程式分析 
   虚拟机器 
   数位鉴识 
   网路安全 
3
Outline
   VM for Malware Analysis 
   Detect Security Utilities 
   Out-of-Box Monitor 
   Emulation 
   Virtualization 
   Malware Behavior Analysis 
   Dynamic Taint Tracking 
Cloudebug 
   Anti-VM 
   Behavior Comparison to Detect Anti-VM 
4
VM for Malware Analysis
   VM play an important role for nowadays for malware 
analysis 
   Isolated Environment 
   Fast Recovery 
5
Reverse with VM
   What we are doing everyday 
   Automatic analysis malware:  
   Put monitor program into VM to keep track of malware 
   Reversing Malware  
   Put reversing tools(debugger, disassembler)  into VM and reversing
VMM
Host OS
6
Detect Security Utilities
   While your security utilities are placed in the same 
environment, it is possible for malware to detect it’s existence  
KillAV 
   Anti-Debugger  
7
Kill AV
   Malware can check the existence of anti-virus, and then stop or 
bypass anti-virus 
   Process Name 
   If important function being hooked 
   Read Process Memory 
   Any software in the  
same environment  
with malware can be  
detected
8
Anti-Debug
   To confuse analyst, malware employ anti-debug to detect or 
stop debug software 
   Everything you put into VM expose the threat 
   File 
   Process 
   Registry 
9
Anti-Debug Example
push offset exception_handler; set exception handler
push dword ptr fs:[0h]
mov dword ptr fs:[0h],esp 
xor eax,eax;reset EAX invoke int3
int 3h
pop dword ptr fs:[0h];restore exception handler
add esp,4
test eax,eax; check the flag 
je rt_choke
jmp rf_choke 
exception_handler:
mov eax,dword ptr [esp+0xc];EAX =
 ContextRecord
mov dword ptr [eax+0xb0],0xffffffff;set flag
 (ContextRecord.EAX)
inc dword ptr [eax+0xb8];set ContextRecord.EIP
xor eax,eax
retn
10
Anti-Debug Result
11
The “Ultimate Anti-Debugging” Reference
http://pferrie.host22.com/papers/antidebug.pdf 
12
How can we do?
   Can we move analysis tools outside the vm? 
Host OS
VMM
13
Out-of-Box Monitor 
   Is it possible to monitor program behavior outside the VM 
   Out-of-Box Hooking 
   Virtual Machine Introspection 
   How can we monitor the program’s behavior outside the VM 
   Virtual Machine Type 
   Emulation 
   Virtualization 
Virtual Machine Manager
Guest OS
User-land Process
Host OS
14
Emulation-based VM
   Emulation-based VM 
   QEMU, Hydra, Bochs 
   Interpreter, Dynamic Translation 
B1
B2
B3
B4
Code Cache
B1’
B2’
B3’
B4’
Translation
Add monitor 
code here!
15
Monitor Based on Emulation
Temu 
TTAnalyzer 
   Now, it become Anubis 
   MBA 
   Develop by us ! 
16
Identify Process
   The first step of Out-of-box monitor is to identify process we 
want to check 
17
Monitor Execution Trace
   Then we would like to monitor execution of process  
   Helper function  
   Monitor Execution  
Trace 
   Add helper  
function when  
each instruction  
translate
18
Malware Behavior Analyzer
   MBA(Malware Behavior Analyzer) 
   MBA run sample in the qemu and extract it’s behavior  
   Produce readable report for analysts 
   Monitor binary，前后比较，内外比对 
   What MBA trace 
   File 
   Registry 
   Network 
   MBR 
   SSDT 
   … 
19
Report of MBA(1)
   Analysis file : cad9d083ab6de63b9ddbb08fb0fc64ad 
   It’s classify to TR/Inject.126976.5 by AntiVir 
20
Report of MBA(1)
   Analysis file : cad9d083ab6de63b9ddbb08fb0fc64ad 
   Modified Files
===== Files tainted ===== 
/Documents and Settings/dsns/NTUSER.DAT 
/Documents and Settings/dsns/NTUSER.DAT.LOG*  
/Documents and Settings/dsns/桌面/
cad9d083ab6de63b9ddbb08fb0fc64ad.exe 
/WINDOWS/system32/config/software 
/WINDOWS/system32/config/software.LOG 
/WINDOWS/system32/inetsrv/inetsr.exe 
21
Report of MBA(2)
   Analysis file : cad9d083ab6de63b9ddbb08fb0fc64ad 
   Network Packets 
===== Packet tainted ===== 
-> 168.95.1.1 , UDP 1026 -> 53 , (v 0x01 0x00 0x00 0x01 0x00 0x00 0x00 0x00 0x00 0x00 
0x05 gsmof 0x06 seed01 0x03 com 0x02 tw 0x00 0x00 0x01 0x00 0x01 
-> 50.115.42.145 , TCP 1027 -> 443 , 0x02 0x04 0x05 0xb4 0x01 0x01 0x04 0x02 
-> 50.115.42.145 , TCP 1027 -> 443 , 0x02 0x04 0x05 0xb4 0x01 0x01 0x04 0x02 
-> 50.115.42.145 , TCP 1027 -> 443 , 0x02 0x04 0x05 0xb4 0x01 0x01 0x04 0x02 
-> 50.115.42.145 , TCP 1027 -> 443 , 0x02 0x04 0x05 0xb4 0x01 0x01 0x04 0x02 
-> 50.115.42.145 , TCP 1027 -> 443 , 0x02 0x04 0x05 0xb4 0x01 0x01 0x04 0x02 
-> 50.115.42.145 , TCP 1027 -> 443 , 0x02 0x04 0x05 0xb4 0x01 0x01 0x04 0x02 
-> 50.115.42.145 , TCP 1027 -> 443 , 0x02 0x04 0x05 0xb4 0x01 0x01 0x04 0x02 
22
Report of MBA(3)
   Analysis file : cad9d083ab6de63b9ddbb08fb0fc64ad 
   Modified Registries 
   Created Process 
===== Registry tainted ===== 
/WINDOWS/system32/config/SOFTWARE/Microsoft/Active Setup/Installed Components/
{181E2749-8F28-E14F-ECEF-F89FC5739401} StubPath REG_SZ c:\windows\system32\inetsrv
\inetsr.exe 
/WINDOWS/system32/config/SOFTWARE/Microsoft/Cryptography/RNG Seed REG_BINARY 
/Documents and Settings/dsns/ntuser.dat/Software/Microsoft/Windows/ShellNoRoam/MUICache C:
\DOCUME~1\dsns\LOCALS~1\Temp\anyexe.bat REG_SZ anyexe 
===== Process tainted ===== 
cad9d083ab6de63, 904 
svchost.exe, 876
23
Demo
   As my experience, this demo will make my pc halt for a 
while, so we leave it to end of presentation.
24
Dynamic Taint Tracking
   Dynamic taint tracking is useful tool for binary analysis 
   Precise track influence data of certain event 
   Eliminate un-related event/data  
   Concept of Infection
Data = readFile(private) 
EncData= encrypt(Data) 
Prefix = some string 
Send(Prefix) 
Send(Data) 
Close()
private
Data
Prefic
Data
EncData
EncData
25
Taint Source
   What we want to track 
   File 
   Network  
Executables 
   …. 
   Private in previous example 
26
Taint Propagate
   How to propagate taint tag 
   These rules describe how data flow corresponding to each 
behavior 
27
Taint Sink
   Where we want to check taint status 
   Send() in our example 
   Example 
   Taint Source : sensitiveFile 
   Taint Sink : sendPkt()
Content = readFile(“sensitiveFile”); 
Encode = “” 
For i in content : 
       encode<= encode + i ^ ff 
sendPkt(encode)
28
Other Application of Taint
   Detect software vulnerabilities and identify possible exploit 
   If EIP tainted while program running 
Crax use Taint/Concolic Execution to produce exploit for 
software testing 
   There are the talk in HITCON PLG by SQLab student 
   Detect sensitive data leak 
   Detect key logger 
29
Cloudebug - A User-interactive 
Malware Analysis Platform
   Deploy as the web service 
   Analysis malware without environment setting 
   Transparent System 
   Out-of-box Monitor 
   Out-of-box Debugging 
   Advanced Analysis Capability 
   Taint 
   User Friendly  
Javascript API
30
Demo
31
Detect Virtual Machine 
Environment
   Types and samples of anti-vm technique 
   Hardware Characteristic Checks 
   Timing Checks
   Emulation Bug Checks 
32
Environment Characteristic 
Checks
   Hardware specification used to detect virtualization platform 
   Files  
   Registry 
   Process 
   Device Name
xor eax, eax  
cpuid  
cmp ecx, 444d4163h  
jne exit  
mov eax, 80000000h  
cpuid  
cmp eax, 2  
jb exit  
mov eax, 80000002h  
cpuid  
cmp eax, 554d4551h  
je $ ;detected  
VM-Check
Divergence 
Point
33
Timing Checks
   Timing difference between physical machine and virtual 
machine can be used to detect VM
…
0x4012ce:
 rdtsc
0x4012d0:   mov [0x404060], %eax
0x4012d5:   rdtsc
0x4012d7:   mov [0x404070], %eax
0x4012dc:   mov %edx, [0x404060]
0x4012e2:   mov %eax, [0x404070]
0x4012e7:   sub %eax, %edx
0x4012e9:   cmp %eax, 0xff
0x4012ee:   jle 0x4012fe
…
34
Emulation Bug Checks
   Instruction emulated by software may be inconsistence to 
physical machine 
  mov byte ptr es:[1004h], 5  
  mov al, fs:[1000h]  
  inc ax  
  cmpxchg8b fs:[1000h]  
  jmp $  
VM-Check
Divergence Point 
35
What is Transparent VM
   Guideline from Ether  
   Higher Privilege 
   No Non-privileged Side Effects 
   Any privilege instruction are back to vmm and  emulated by 
software 
   Identical Basic Instruction Execution Semantics 
   16 rep prefix instruction will make qemu crash 
   Transparent Exception Handling 
   Identical Measurement of Time
36
Is it possible to build 
Transparent VM
   Construct transparent analysis VM platform 
   It is extremely hard to implement a transparent system 
   Difficult to verify the completeness 
   Large amount of analysis tool is not based on transparent 
platform 
   How can we do if we don’t have such transparent VM 
37
Behavior Comparison to Detect 
Virtual Machine Awareness
   Hybrid Emulation & Virtualization to detect Anti-VM 
malware 
   Anti-vm technique is hard to detect all the vm platform in 
one instruction 
   The code coverage diverge in different VM system 
   How to hunt anti-vm malware 
   Execute program in multiple VM system(or physical one if 
possible) 
   Construct code coverage 
   Compare if there are something different 
38
Virtualization-based VM
   Virtualization-based VM 
   KVM, XEN, …. 
   Use hardware-assistant virtualization to improve the transparent 
and performance  
   Programming Logic 
   Compare to emulation system which like sequential logic 
   Hardware-Assistant Virtualization more like event-driven model
39
Virtualization-based VM
    Remind how emulation works 
   How Virtualization Work
Hardware
B1
B1
B1
VM exit
VM enter
40
Monitoring Scope
VM
   Inst1 
   Inst2 
   Inst3 
   Privilege instruction 
Inst 4 
Inst 5 
   Privilege instruction 
Emulator
   Inst1 
   Inst2 
   Inst3 
   Privilege instruction 
Inst 4 
Inst 5 
   Privilege instruction 
41
Monitor Based on Virtualization
   Ether(XEN) 
XENAccess(XEN) 
VMITools(XEN, KVM) 
   Nitro(KVM) 
   ….
42
Monitor System Call
   System call monitor can be implement with similar concept 
   Make the exception every time system call happened 
   How system work  
   When system call happened by SYSENTER instruction 
   OS jump to privilege location defined by SYSENTER_EIP_MSR 
to handle system call 
   Monitor system call 
   Replace value in SYSENTER_EIP_MSR to some invalid address 
   Implement exception handler to profile behavior and put correct 
value back  
43
Monitor Instruction Trace 
   While put the program to execute in virtualization system, 
our software cannot direct monitor instruction trace 
   The instruction is directly run by CPU 
   Not go through VMM, which means not manipulate by 
software 
   Enforce debug exception triggered every instructions 
   Setting Trap flag to enable debug trap in every instruction 
VMExit happened, and VMM gain the control 
   Therefore we can use software to handle/profile the behavior 
44
Divergence Point Locator
   In our system, we use two VM system 
Qemu 
   XEN 
kvm 
45
Partial Assembly Code of rdtsc 
Timing Check
46
   Assembly of rdtsc sample
…
0x4012ce: rdtsc
0x4012d0:  
 mov [0x404060], %eax
0x4012d5:  
 rdtsc
0x4012d7:  
 mov [0x404070], %eax
0x4012dc:  
 mov %edx, [0x404060]
0x4012e2:  
 mov %eax, [0x404070]
0x4012e7:  
 sub %eax, %edx
0x4012e9:  
 cmp %eax, 0xff
0x4012ee:  
 jle 0x4012fe
…
Result of rdtsc Timing Check
47
   Code block coverage of rdtsc sample
Executed	
  Basic	
  Blocks	
  on	
KVM	
Executed	
  Basic	
  Blocks	
  on	
QEMU	
...	
…	
0x401260-­‐0x40126a	
0x401260-­‐0x40126a	
0x401446-­‐0x401449	
0x4012ba-­‐0x4012ee	
0x4012fe-­‐0x401305(not	
executed	
  on	
  QEMU)	
0x401446-­‐0x401449	
0x4012ba-­‐0x4012f7	
0x401850-­‐0x401850	
0x401850-­‐0x401850	
0x40130a-­‐0x401311	
…	
0x40130a-­‐0x401311	
…	
Bypass Anti-VM in the Fly
   Once we know the location of Anti-VM, we can make the 
signature  
   For runtime patch the executed process 
   Make Anti-VM fails
48
Summary
   Out-of-box monitor to defense anti-debug 
   Malware behavior analyzer 
   Taint tracking 
Cloudebug 
   Anti-vm 
   Trace comparison to find out anti-vm
49
Demo
   Remember that we need to demo J
50
Q & A
51