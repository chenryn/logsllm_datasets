'onfocus'
，
'onfocusin'
，
'onfocusout'
，
'onhelp'
，
'onkeydown'
，
'onkeypress'
，
'onkeyup'
，
'onlayoutcomplete'
，
'onload'
，
'onlosecapture'
，
'onmousedown'
，
'onmouseenter'
，
'onmouseleave'
，
'onmousemove'
，
'onmouseout'
，
'onmouseover'
，
'onmouseup'
，
'onmousewheel'
，
'onmove'
，
'onmoveend'
，
'onmovestart'
，
'onpaste'
，
'onpropertychange'
，
'onreadystatechange'
，
'onreset'
，
'onresize'
，
'onresizeend'
，
'onresizestart'
，
'onrowenter'
，
'onrowexit'
，
'onrowsdelete'
，
'onrowsinserted'
，
'onscroll'
，
'onselect'
，
'onselectionchange'
，
'onselectstart'
，
'onstart'
，
'onstop'
，
'onsubmit'
，
'onunload'
）；
      $parm = array_merge
（
$parm1
，
$parm2
）；
      for
（
$i = 0
；
$i  0
）
{
                  $pattern .= '
（
'
；
                  $pattern .= '
（
&#[x|X]0
（
[9][a][b]
）；？）？
'
；
                  $pattern .= '|
（
&#0
（
[9][10][13]
）；？）？
'
；
                  $pattern .= '
）？
'
；
              }
                  $pattern .= $parm[$i][$j]
；
          }
          $pattern .= '/i'
；
          $string = preg_replace
（
$pattern
，
' '
，
$string
）；
      }
      return $string
；
}
/**
*
对字段两边加反引号，以保证数据库安全
* @param $value
数组值
*/
public function add_special_char
（
&$value
）
{
    if
（
'*' == $value || false
！
== strpos
（
$value
，
'
（
'
）
|| false
！
== strpos
（
$value
，
'.'
）
|| false
！
== strpos
（
$value
，
'`'
））
{
            //
不处理包含
*
或者使用了
SQL
方法。
    } else {
            $value = '`'.trim
（
$value
）
.'`'
；
    }
    if
（
preg_match
（
"/\b
（
select|insert|update|delete
）
\b/i"
，
$value
））
{
           $value = preg_replace
（
"/\b
（
select|insert|update|delete
）
\b/i"
，
''
，
$value
）；
    }
    return $value
；
}
以上代码分别是phpcmsv9的SQL注入防御以及XSS防御代码。甚至有的应用还有自己的安全中心，如dedecms，提供类似WebShell查杀的功能，如图12-14所示。
图 12-14
一个网站的应用安全防御应该包括对输入的特殊字符过滤、输出过滤、异常访问检测、自身安全检测，等等。其中，自身安全检测方式有：木马查杀、弱后台地址检测、弱口令检测，等等。
参考资源
在学习代码审计过程中，我们需要不断接触更多的实例，所以笔者收集了一些不错的有代码审计内容的网站为大家推荐一下。
www.wooyun.org
|乌云网
乌云网是目前国内最大的漏洞平台，将白帽子跟厂商联系起来，在对安全问题进行反馈处理跟进的同时，为互联网安全研究者提供一个公益、学习、交流和研究的平台，每天都有大量的开源程序漏洞在乌云网上提交，是一个非常适合漏洞挖掘学习的平台。
www.cnseay.com
|Seay网络安全博客
Seay网络安全博客是笔者维护的一个个人博客，主要包括渗透测试，代码审计，软件编程，安全运维以及创业相关文章，其中最核心的内容为代码审计方面，包含大量漏洞挖掘和分析实例。
www.0day5.com
|漏洞时代
漏洞时代网主要发布ASP、ASP.NET、PHP、JSP、CGI、Windows、Linux/Unix等多方面漏洞，由民间组织建立。
www.leavesongs.com
|离别歌
离别歌是phithon的个人博客，博主经常在其博客发布非常有意思的代码审计漏洞研究，对于新手学习代码审计也是一个不错的去处。
高级PHP应用程序漏洞审核技术
高级PHP应用程序漏洞审核技术是一份放在google的PHP安全文档，地址为
https://code.google.com/p/pasc2at/wiki/SimplifiedChinese
 ，介绍的是代码审计的方法，推荐阅读。
Table of Contents
序言
前言
导读
第一部分 代码审计前的准备
第1章 代码审计环境搭建
1.1 wamp/wnmp环境搭建
1.2 lamp/lnmp环境搭建
1.3 PHP核心配置详解
第2章 审计辅助与漏洞验证工具
2.1 代码编辑器
2.2 代码审计工具
2.3 漏洞验证辅助
第二部分 漏洞发现与防范
第3章 通用代码审计思路
3.1 敏感函数回溯参数过程
3.2 通读全文代码
3.3 根据功能点定向审计
第4章 漏洞挖掘与防范（基础篇）
4.1 SQL注入漏洞
4.2 XSS漏洞
4.3 CSRF漏洞
第5章 漏洞挖掘与防范（进阶篇）
5.1 文件操作漏洞
5.2 代码执行漏洞
5.3 命令执行漏洞
第6章 漏洞挖掘与防范（深入篇）
6.1 变量覆盖漏洞
6.2 逻辑处理漏洞
6.3 会话认证漏洞
第7章 二次漏洞审计
7.1 什么是二次漏洞
7.2 二次漏洞审计技巧
7.3 dedecms二次注入漏洞分析
第8章 代码审计小技巧
8.1 钻GPC等转义的空子
8.2 神奇的字符串
8.3 php：//输入输出流
8.4 PHP代码解析标签
8.5 fuzz漏洞发现
8.6 不严谨的正则表达式
8.7 十余种MySQL报错注入
8.8 Windows FindFirstFile利用
8.9 PHP可变变量
第三部分 PHP安全编程规范
第9章 参数的安全过滤
9.1 第三方过滤函数与类
9.2 内置过滤函数
第10章 使用安全的加密算法
10.1 对称加密
10.2 非对称加密
10.3 单向加密
第11章 业务功能安全设计
11.1 验证码
11.2 用户登录
11.3 用户注册
11.4 密码找回
11.5 资料查看与修改
11.6 投票/积分/抽奖
11.7 充值支付
11.8 私信及反馈
11.9 远程地址访问
11.10 文件管理
11.11 数据库管理
11.12 命令/代码执行
11.13 文件/数据库备份
11.14 API
第12章 应用安全体系建设
12.1 用户密码安全策略
12.2 前后台用户分表
12.3 后台地址隐藏
12.4 密码加密存储方式
12.5 登录限制
12.6 API站库分离
12.7 慎用第三方服务
12.8 严格的权限控制
12.9 敏感操作多因素验证
12.10 应用自身的安全中心
参考资源