    @.str = private unnamed_addr constant [6 x i8] c"Hum?\0A\00", align 1
    @.str.1 = private unnamed_addr constant [26 x i8] c"Looks like a zero to me!\0A\00", align 1
    @.str.2 = private unnamed_addr constant [31 x i8] c"A non-zero value? How quaint!\0A\00", align 1
    ; Function Attrs: noinline nounwind ssp uwtable
    define i32 @main(i32 %0, i8** %1) #0 {
      %3 = alloca [8 x i8], align 1
      %4 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 0
      %5 = call i64 @"\01_read"(i32 0, i8* %4, i64 8)
      %6 = icmp slt i64 %5, 1
      br i1 %6, label %7, label %9
    7:                                                ; preds = %2
      %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0))
      call void @exit(i32 1) #3
      unreachable
    9:                                                ; preds = %2
      %10 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 0
      %11 = load i8, i8* %10, align 1
      %12 = sext i8 %11 to i32
      %13 = icmp eq i32 %12, 48
      br i1 %13, label %14, label %16
    14:                                               ; preds = %9
      %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0))
      br label %18
    16:                                               ; preds = %9
      %17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.2, i64 0, i64 0))
      br label %18
    18:                                               ; preds = %16, %14
      call void @exit(i32 0) #3
      unreachable
    }
    declare i64 @"\01_read"(i32, i8*, i64) #1
    declare i32 @printf(i8*, ...) #1
    ; Function Attrs: noreturn
    declare void @exit(i32) #2
    attributes #0 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
    attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
    attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
    attributes #3 = { noreturn }
    !llvm.module.flags = !{!0, !1}
    !llvm.ident = !{!2}
    !0 = !{i32 1, !"wchar_size", i32 4}
    !1 = !{i32 7, !"PIC Level", i32 2}
    !2 = !{!"clang version 10.0.0 "}
  * 插桩后的ir
    ; ModuleID = 'm2r_nopt_test-instr.ll'
    source_filename = "test-instr.c"
    target datalayout = "e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
    target triple = "x86_64-apple-macosx10.15.0"
    @.str = private unnamed_addr constant [6 x i8] c"Hum?\0A\00", align 1
    @.str.1 = private unnamed_addr constant [26 x i8] c"Looks like a zero to me!\0A\00", align 1
    @.str.2 = private unnamed_addr constant [31 x i8] c"A non-zero value? How quaint!\0A\00", align 1
    @__afl_area_ptr = external global i8*
    @__afl_prev_loc = external thread_local global i32
    ; Function Attrs: noinline nounwind ssp uwtable
    define i32 @main(i32 %0, i8** %1) #0 {
      %3 = load i32, i32* @__afl_prev_loc, !nosanitize !3
      %4 = load i8*, i8** @__afl_area_ptr, !nosanitize !3
      %5 = xor i32 %3, 17767
      %6 = getelementptr i8, i8* %4, i32 %5
      %7 = load i8, i8* %6, !nosanitize !3
      %8 = add i8 %7, 1
      store i8 %8, i8* %6, !nosanitize !3
      store i32 8883, i32* @__afl_prev_loc, !nosanitize !3
      %9 = alloca [8 x i8], align 1
      %10 = getelementptr inbounds [8 x i8], [8 x i8]* %9, i64 0, i64 0
      %11 = call i64 @"\01_read"(i32 0, i8* %10, i64 8)
      %12 = icmp slt i64 %11, 1
      br i1 %12, label %13, label %21
    13:                                               ; preds = %2
      %14 = load i32, i32* @__afl_prev_loc, !nosanitize !3
      %15 = load i8*, i8** @__afl_area_ptr, !nosanitize !3
      %16 = xor i32 %14, 9158
      %17 = getelementptr i8, i8* %15, i32 %16
      %18 = load i8, i8* %17, !nosanitize !3
      %19 = add i8 %18, 1
      store i8 %19, i8* %17, !nosanitize !3
      store i32 4579, i32* @__afl_prev_loc, !nosanitize !3
      %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0))
      call void @exit(i32 1) #3
      unreachable
    21:                                               ; preds = %2
      %22 = load i32, i32* @__afl_prev_loc, !nosanitize !3
      %23 = load i8*, i8** @__afl_area_ptr, !nosanitize !3
      %24 = xor i32 %22, 39017
      %25 = getelementptr i8, i8* %23, i32 %24
      %26 = load i8, i8* %25, !nosanitize !3
      %27 = add i8 %26, 1
      store i8 %27, i8* %25, !nosanitize !3
      store i32 19508, i32* @__afl_prev_loc, !nosanitize !3
      %28 = getelementptr inbounds [8 x i8], [8 x i8]* %9, i64 0, i64 0
      %29 = load i8, i8* %28, align 1
      %30 = sext i8 %29 to i32
      %31 = icmp eq i32 %30, 48
      br i1 %31, label %32, label %40
    32:                                               ; preds = %21
      %33 = load i32, i32* @__afl_prev_loc, !nosanitize !3
      %34 = load i8*, i8** @__afl_area_ptr, !nosanitize !3
      %35 = xor i32 %33, 18547
      %36 = getelementptr i8, i8* %34, i32 %35
      %37 = load i8, i8* %36, !nosanitize !3
      %38 = add i8 %37, 1
      store i8 %38, i8* %36, !nosanitize !3
      store i32 9273, i32* @__afl_prev_loc, !nosanitize !3
      %39 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0))
      br label %48
    40:                                               ; preds = %21
      %41 = load i32, i32* @__afl_prev_loc, !nosanitize !3
      %42 = load i8*, i8** @__afl_area_ptr, !nosanitize !3
      %43 = xor i32 %41, 56401
      %44 = getelementptr i8, i8* %42, i32 %43
      %45 = load i8, i8* %44, !nosanitize !3
      %46 = add i8 %45, 1
      store i8 %46, i8* %44, !nosanitize !3
      store i32 28200, i32* @__afl_prev_loc, !nosanitize !3
      %47 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.2, i64 0, i64 0))
      br label %48
    48:                                               ; preds = %40, %32
      %49 = load i32, i32* @__afl_prev_loc, !nosanitize !3
      %50 = load i8*, i8** @__afl_area_ptr, !nosanitize !3
      %51 = xor i32 %49, 23807
      %52 = getelementptr i8, i8* %50, i32 %51
      %53 = load i8, i8* %52, !nosanitize !3
      %54 = add i8 %53, 1
      store i8 %54, i8* %52, !nosanitize !3
      store i32 11903, i32* @__afl_prev_loc, !nosanitize !3
      call void @exit(i32 0) #3
      unreachable
    }
    declare i64 @"\01_read"(i32, i8*, i64) #1
    declare i32 @printf(i8*, ...) #1
    ; Function Attrs: noreturn
    declare void @exit(i32) #2
    attributes #0 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
    attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
    attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
    attributes #3 = { noreturn }
    !llvm.module.flags = !{!0, !1}
    !llvm.ident = !{!2}
    !0 = !{i32 1, !"wchar_size", i32 4}
    !1 = !{i32 7, !"PIC Level", i32 2}
    !2 = !{!"clang version 10.0.0 "}
    !3 = !{}