56 // 用不同的goroutine执行不同的任务
57 go func() {
58 r.complete <- r.run()
59 }()
60
61 select {
62 // 当任务处理完成时发出的信号
63 case err := <-r.complete:
64 return err
65
66 // 当任务处理程序运行超时时发出的信号
67 case <-r.timeout:
68 return ErrTimeout
69 }
70 }
方法Start实现了程序的主流程。在代码清单7-12的第52行，Start设置了gotInterrupt
方法要从操作系统接收的中断信号。在第 56 行到第 59 行，声明了一个匿名函数，并单独启动
goroutine 来执行。这个 goroutine 会执行一系列被赋予的任务。在第 58 行，在 goroutine 的内部
调用了run方法，并将这个方法返回的error接口值发送到complete通道。一旦error接
口的值被接收，该goroutine就会通过通道将这个值返回给调用者。
创建goroutine后，Start进入一个select语句，阻塞等待两个事件中的任意一个。如果
从complete通道接收到error接口值，那么该goroutine要么在规定的时间内完成了分配的工
作，要么收到了操作系统的中断信号。无论哪种情况，收到的 error 接口值都会被返回，随后
方法终止。如果从timeout通道接收到time.Time值，就表示goroutine没有在规定的时间内
完成工作。这种情况下，程序会返回ErrTimeout变量。
现在看过了runner包的代码，并了解了代码是如何工作的，让我们看一下main.go代码文
件中的测试程序，如代码清单7-13所示。
代码清单7-13 runner/main/main.go
01 // 这个示例程序演示如何使用通道来监视
02 // 程序运行的时间，以在程序运行时间过长
03 // 时如何终止程序
03 package main
04
05 import (
06 "log"
07 "time"
08
09 "github.com/goinaction/code/chapter7/patterns/runner"
10 )
11
12 // timeout规定了必须在多少秒内处理完成
13 const timeout = 3 * time.Second
14
15 // main是程序的入口
16 func main() {
17 log.Println("Starting work.")
18
19 // 为本次执行分配超时时间
20 r := runner.New(timeout)
21
22 // 加入要执行的任务
23 r.Add(createTask(), createTask(), createTask())
24
25 // 执行任务并处理结果
26 if err := r.Start(); err != nil {
27 switch err {
28 case runner.ErrTimeout:
29 log.Println("Terminating due to timeout.")
30 os.Exit(1)
31 case runner.ErrInterrupt:
32 log.Println("Terminating due to interrupt.")
33 os.Exit(2)
34 }
35 }
36
37 log.Println("Process ended.")
38 }
39
40 // createTask返回一个根据id
41 // 休眠指定秒数的示例任务
42 func createTask() func(int) {
43 return func(id int) {
44 log.Printf("Processor - Task #%d.", id)
45 time.Sleep(time.Duration(id) * time.Second)
46 }
47 }
代码清单7-13的第16行是main函数。在第20行，使用timeout作为超时时间传给New
函数，并返回了一个指向Runner类型的指针。之后在第23行，使用createTask函数创建了
几个任务，并被加入Runner里。在第42行声明了createTask函数。这个函数创建的任务只
是休眠了一段时间，用来模拟正在进行工作。增加完任务后，在第26行调用了Start方法，main
函数会等待Start方法的返回。
当 Start 返回时，会检查其返回的 error 接口值，并存入 err 变量。如果确实发生了错
误，代码会根据 err 变量的值来判断方法是由于超时终止的，还是由于收到了中断信号终止。
如果没有错误，任务就是按时执行完成的。如果执行超时，程序就会用错误码1终止。如果接收
到中断信号，程序就会用错误码2终止。其他情况下，程序会使用错误码0正常终止。
7.2 pool
本章会介绍pool包 ①。这个包用于展示如何使用有缓冲的通道实现资源池，来管理可以在
任意数量的goroutine之间共享及独立使用的资源。这种模式在需要共享一组静态资源的情况（如
共享数据库连接或者内存缓冲区）下非 常有用。如果goroutine需要从池里得到这些资源中的一个，
它可以从池里申请，使用完后归还到资源池里。
让我们看一下pool包里的 pool.go 代码文件，如代码清单7-14所示。
代码清单7-14 pool/pool.go
01 // Fatih Arslan和Gabriel Aszalos协助完成了这个示例
02 // 包pool管理用户定义的一组资源
03 package pool
04
05 import (
06 "errors"
07 "log"
① 本书是以Go 1.5版本为基础写作而成的。在Go 1.6及之后的版本中，标准库里自带了资源池的实现
（sync.Pool）。推荐使用。——译者注
08 "io"
09 "sync"
10 )
11
12 // Pool管理一组可以安全地在多个goroutine间
13 // 共享的资源。被管理的资源必须
14 // 实现io.Closer接口
15 type Pool struct {
16 m sync.Mutex
17 resources chan io.Closer
18 factory func() (io.Closer, error)
19 closed bool
20 }
21
22 // ErrPoolClosed表示请求（Acquire）了一个
23 // 已经关闭的池
24 var ErrPoolClosed = errors.New("Pool has been closed.")
25
26 // New创建一个用来管理资源的池。
27 // 这个池需要一个可以分配新资源的函数，
28 // 并规定池的大小
29 func New(fn func() (io.Closer, error), size uint) (*Pool, error) {
30 if size <= 0 {
31 return nil, errors.New("Size value too small.")
32 }
33
34 return &Pool{
35 factory: fn,
36 resources: make(chan io.Closer, size),
37 }, nil
38 }
39
40 // Acquire从池中获取一个资源
41 func (p *Pool) Acquire() (io.Closer, error) {
42 select {
43 // 检查是否有空闲的资源
44 case r, ok := <-p.resources:
45 log.Println("Acquire:", "Shared Resource")
46 if !ok {
47 return nil, ErrPoolClosed
48 }
49 return r, nil
50
51 // 因为没有空闲资源可用，所以提供一个新资源
52 default:
53 log.Println("Acquire:", "New Resource")
54 return p.factory()
55 }
56 }
57
58 // Release将一个使用后的资源放回池里
59 func (p *Pool) Release(r io.Closer) {
60 // 保证本操作和Close操作的安全
61 p.m.Lock()
62 defer p.m.Unlock()
63
64 // 如果池已经被关闭，销毁这个资源
65 if p.closed {
66 r.Close()
67 return
68 }
69
70 select {
71 // 试图将这个资源放入队列
72 case p.resources <- r:
73 log.Println("Release:", "In Queue")
74
75 // 如果队列已满，则关闭这个资源
76 default:
77 log.Println("Release:", "Closing")
78 r.Close()
79 }
80 }
81
82 // Close会让资源池停止工作，并关闭所有现有的资源
83 func (p *Pool) Close() {
84 // 保证本操作与Release操作的安全
85 p.m.Lock()
86 defer p.m.Unlock()
87
88 // 如果pool已经被关闭，什么也不做
89 if p.closed {
90 return
91 }
92
93 // 将池关闭
94 p.closed = true
95
96 // 在清空通道里的资源之前，将通道关闭
97 // 如果不这样做，会发生死锁
98 close(p.resources)
99
100 // 关闭资源
101 for r := range p.resources {
102 r.Close()
103 }
104 }
代码清单7-14中的pool包的代码声明了一个名为Pool的结构，该结构允许调用者根据所
需数量创建不同的资源池。只要某类资源实现了io.Closer接口，就可以用这个资源池来管理。
让我们看一下Pool结构的声明，如代码清单7-15所示。
代码清单7-15 pool/pool.go：第12行到第20行
12 // Pool管理一组可以安全地在多个goroutine间
13 // 共享的资源。被管理的资源必须
14 // 实现io.Closer接口
15 type Pool struct {
16 m sync.Mutex
17 resources chan io.Closer
18 factory func() (io.Closer, error)
19 closed bool
20 }
Pool结构声明了4个字段，每个字段都用来辅助以goroutine安全的方式来管理资源池。在
第 16 行，结构以一个 sync.Mutex 类型的字段开始。这个互斥锁用来保证在多个 goroutine 访
问资源池时，池内的值是安全的。第二个字段名为resources，被声明为io.Closer接口类
型的通道。这个通道是作为一个有缓冲的通道创建的，用来保存共享的资源。由于通道的类型是
一个接口，所以池可以管理任意实现了io.Closer接口的资源类型。
factory 字段是一个函数类型。任何一个没有输入参数且返回一个 io.Closer 和一个
error 接口值的函数，都可以赋值给这个字段。这个函数的目的是，当池需要一个新资源时，
可以用这个函数创建。这个函数的实现细节超出了pool包的范围，并且需要由包的使用者实现
并提供。
第19行中的最后一个字段是closed字段。这个字段是一个标志，表示Pool是否已经被
关闭。现在已经了解了Pool结构的声明，让我们看一下第24行声明的error接口变量，如代
码清单7-16所示。
代码清单7-16 pool/pool.go：第22行到第24行
22 // ErrPoolClosed表示请求（Acquire）了一个
23 // 已经关闭的池
24 var ErrPoolClosed = errors.New("Pool has been closed.")
Go语言里会经常创建error接口变量。这可以让调用者来判断某个包里的函数或者方法返
回的具体的错误值。当调用者对一个已经关闭的池调用Acquire方法时，会返回代码清单7-16
里的error接口变量。因为Acquire方法可能返回多个不同类型的错误，所以Pool已经关闭
时会关闭时返回这个错误变量可以让调用者从其他错误中识别出这个特定的错误。
既然已经声明了 Pool 类型和 error 接口值，我们就可以开始看一下 pool 包里声明的函
数和方法了。让我们从池的工厂函数开始，这个函数名为New，如代码清单7-17所示。
代码清单7-17 pool/pool.go：第26行到第38行
26 // New创建一个用来管理资源的池。
27 // 这个池需要一个可以分配新资源的函数，
28 // 并规定池的大小
29 func New(fn func() (io.Closer, error), size uint) (*Pool, error) {
30 if size <= 0 {
31 return nil, errors.New("Size value too small.")
32 }