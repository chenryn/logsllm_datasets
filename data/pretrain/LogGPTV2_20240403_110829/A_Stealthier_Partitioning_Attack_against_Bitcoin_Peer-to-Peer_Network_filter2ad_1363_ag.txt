1024
1024
1024
1024
1024
1024
1024
1024
1024
256
1024
1024
1024
1024
1024
256
1024
1024
256
256
256
256
256
256
256
256
256
256
64
256
256
256
256
256
64
64
256
No. of slots
per bucket
64
64
64
64
64
64
64
64
64
64
64
64
64
64
64
64
64
64
64
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:19:22 UTC from IEEE Xplore.  Restrictions apply. 
907
250
200
150
100
50
Time Window = 10 minutes
3 - 5
Number of hijacking
messages = 30
1
2
6
7
s
e
g
a
s
s
e
m
g
n
k
c
a
i
j
i
h
f
o
r
e
b
m
u
N
0
Oct w1
Oct w2
Oct w3
Oct w4
Nov w4
Dec w1
Dec w2
Nov w1
Nov w2
Nov w3
Sep w3
Sep w4
Dec w3
Sep w2
Sep w1
Dec w4
Figure 11: Number of BGP hijacking messages that hijack
preﬁxes hosting Bitcoin nodes in the 4-month period (from
September 1, 2018, to December 31, 2018) presented in 10
minutes time window. There are 7 highly suspicious syn-
chronized, large-scale Bitcoin hijacking incidents: a single AS
creates BGP hijacking messages to attack 30 preﬁxes or more
in 10 minutes.
We survey the cryptocurrencies that have the network im-
plementation similar to Bitcoin, which thus can potentially be
vulnerable to the EREBUS attacks. In particular, we investigate
the source code of the top 50 cryptocurrencies ranked by their
market capitalization (as of March 2019) [17]. Table I shows
19 out of 50 cryptocurrencies have a similar network design
and implementation to Bitcoin, making them potential victims
of the EREBUS attacks.
LONGITUDINAL STUDY ON BITCOIN HIJACKING
APPENDIX B
We investigate if ASes do launch BGP hijacking attacks for
partitioning Bitcoin. We look for synchronized and large-scale
Bitcoin partitioning attacks with three conditions in mind:
(1) all the BGP hijacking messages are created by a single
(potentially malicious) AS; (2) all the messages are observed
within a 10-minute time window10; and (3) the group has 30 or
more unique preﬁxes, each hosts at least one Bitcoin node IP
(see [3] for the conditions for large-scale Bitcoin partitioning
attack). We have released our open-source analysis tool [14].
Methodology. Notice that BGP hijacking attempts for parti-
tioning the Bitcoin network are distinguishable from generic
BGP hijacking attacks because they are targeting network
preﬁxes that include Bitcoin nodes. Our analysis begins with
selecting raw BGP update messages for preﬁxes that host
at least one Bitcoin node IP address on the same day. We
then detect the BGP hijacking messages and categorize them
into two types, following the classiﬁcation of BGP hijacking
attacks [44]: (1) origin-AS hijacking, where an AS announce
a BGP message claiming the fake ownership of a preﬁx; and
(2) next-AS hijacking, where the second last AS in the AS-
path announces a seemingly-legitimate BGP message with
the actual owner of a preﬁx as the last AS while in fact
having no peering relationship with it. We have observed more
complicated hijackings (e.g., when the nth (n > 2) peering
link from the last AS is fake) as well but their occurrences
are negligible compared to the two types, which also has
been observed independently in a recent study [16]. Also, our
analysis eliminates some false positives, such as the preﬁxes
have multiple origin ASes and the last two ASes are both
the actual owners of the preﬁxes. Finally, we group the BGP
hijacking messages into campaigns based on the 10-minute
window and further investigate those incidents, e.g., ﬁnding
their perpetrators, measuring their impacts on the Internet.
Datasets. We analyze in total 48 billion raw BGP update
messages collected by 19 RIPE RIS vantage points from
September 1, 2018,
to December 31, 2018 [40]. We use
bgpdump [4] to read and store the messages, each includes
several useful information for our analysis, such as the times-
tamp when the message is propagated, the preﬁx being updated
and the AS-path. We also reduce the size of this dataset
signiﬁcantly by removing the redundant messages that update
the AS-path for the same preﬁx in a short period of time (e.g.,
120 seconds in our analysis).
For the list of Bitcoin node IPs in each day, we download all
Bitcoin network snapshots, which is recorded every 5 minutes
for the list of reachable Bitcoin IPs, from Bitnodes via its
APIs [26].
The preﬁx ownership data used in detecting the origin-AS
hijacking and the peering relationship used in detecting the
next-AS hijacking, however, are usually incomplete due to
the lack of ground truth data. We collect the AS-to-preﬁx
data and the AS peering relationship data (including peering
through Internet exchanges) from multiple sources and use
their superset data. In particular, our AS-to-preﬁx dataset is
merged from Routeviews Preﬁx-to-AS mapping [41], WHOIS
lookup from two domains RADb and NTT, and crawled data
from several web portals such as Hurricane Electric Internet
Services11 and ipinfo.io. Similarly, we compose our AS peer-
ing dataset from the CAIDA’s inferred AS relationships [6],
PeeringDB12, CAIDA’s IXPs dataset, and Hurricane Electric’s
web portal.
Results. We present the number of BGP messages that hijack
preﬁxes hosting Bitcoin nodes in 10 minutes time window
in Figure 11. The dashed line indicates the threshold of 30
BGP hijacking messages. Figure 11 shows that BGP hijacking
does impact Bitcoin nodes in practice; yet, the number of
affected nodes is rather small. Particularly, we observe only
seven incidents in the 4-month period in which there are 30
or more Bitcoin nodes are hijacked in 10 minutes, see the
numbered spikes.
We conduct an in-depth analysis of the seven highly sus-
picious Bitcoin hijacking incidents and show our detailed
ﬁndings in Table II. In all seven cases, the ASes generated
the hijacking messages are easily revealed from the hijacking
messages. Yet, the most important metric is shown to be the
level of global propagation of each incident, speciﬁcally, the
propagation of all hijacking messages stops after only one or
10This time window size is empirically determined to group BGP hijacks
with the same purpose.
11https://bgp.he.net/
12https://www.peeringdb.com/
908
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:19:22 UTC from IEEE Xplore.  Restrictions apply. 
Table II: Seven highly suspicious cases for potential Bitcoin hijacking attacks occurred from September 1, 2018 to December
31, 2018. Yet, none of them are actual Bitcoin hijacking incidents.
Case
Date of
incident
No. of hijacking messages
AS number of the
No. of
(Origin-AS, Next-AS)
perpetrator
hijacked ASes
No. of hops of announcement
propagation (avg ± stddev)
1
2
3
4
5
6
7
Oct 17, 2018
Nov 26, 2018
Nov 27, 2018
Nov 27, 2018
Nov 27, 2018
Dec 10, 2018
Dec 18, 2018
57 (0, 57)
35 (36, 0)
208 (0, 208)
214 (0, 214)
217 (0, 217)
54 (0, 54)
47 (0, 47)
14259
17639
8928
8928
8928
14259
14259
3
20
66
65
67
3
2
1.0±0.0
1.47±0.74
1.0±0.0
1.0±0.0
1.0±0.0
1.0±0.0
1.0±0.0
two hops (i.e., they failed to be propagated globally). Hence,
we conclude that none of these seven incidents are in fact
carefully crafted Bitcoin hijacking attacks.
APPENDIX C
SHADOW IP SELECTION ALGORITHM
Algorithm 1 Select a random shadow IP
Require: P: the set of enumerated preﬁxes.
Ensure: ip: a randomly chosen shadow IP.
1: procedure SELECTRANDOMSHADOWIP
2:
(cid:2) Set of unique preﬁx groups.
(cid:2) Dictionary of preﬁxes based on groups.
G ← []
D[] ← []
for all pi
∈ P do
g ← getGroup(pi
G ← G ∪ [g]
D[g] ← D[g] ∪ [pi
]
)
(cid:2) Get preﬁx’s group.
3:
4:
5:
6:
7:
8:
9:
10:
11:
end for
group ← getRandomElement(G)
prefix ← getRandomElement(D[group])
ip ← getRandomElement(prefix)
return ip
12:
13: end procedure
We present our shadow IP selection algorithm in Algo-
rithm 1. In general, the harvested shadow preﬁxes are grouped
into a dictionary with the keys are their preﬁx groups (i.e., /16
for IPv4 addresses and /32 for IPv6 addresses), see Line 4–
7. Then, we choose a random preﬁx group for the selecting
shadow IP because we want the groups of multiple randomized
shadow IPs to be as much diversity as possible. Based on
the selected preﬁx group, we choose a random preﬁx with
probability proportional with the number of IPs each preﬁx
contains and ﬁnally randomly pick a shadow IP from the
chosen preﬁx.
APPENDIX D
BITCOIN EMULATOR OPERATIONS
Our Bitcoin emulator [13] includes the following Bitcoin
nodes’ operations:
• Storing IPs into the internal
tables. We store IPs in a
database representing the new and tried tables. Each IP is
stored along with its context information and other statistics
just as the Bitcoin client does, such as the IP of the
peer relayed it, the last timestamp it is advertised, the last
timestamp the node attempts to connect to it and so on.
• IP allocation. Our emulation implements the deterministic
hashing mechanisms of Bitcoin core version 0.18.0 that
determine the bucket and slot of an IP address.
• Adding IPs to the new table. We accurately emulate the
procedure of adding an IP into the new table. For example,
if one or more copies of the inserted IP already exist in
the table, all of their last-heard timestamp in the table
are updated. If the inserted IP is allocated to an already
occupied slot, our emulation evicts the existing one in favor
of the inserted IP if the existing one is terrible. Our
emulation checks whether an IP stored in the new table
is terrible based on its timestamps and failed attempt
counter, e.g., an IP has not been heard in the last 30 days.
• Outgoing connections establishment. Our emulation also
describes the exact establishment of outgoing connections.
Whenever there exists an unoccupied outgoing slot, the node
attempts to connect to an IP randomly selected from the
new or tried tables. The node can have at most eight
outgoing peers and they must be in different preﬁx groups.
If an outgoing peer becomes unreachable according to the
Bitnodes database, the outgoing connection to the peer is
removed and a new outgoing connection is made.
• IPs migration from the new to the tried table. The emulator
migrates the IPs from the new to the tried when they
are connected as outgoing peers or via a feeler connection.
The emulation also resolves the collision if a migrated IP
collides with an existing IP; e.g., it queues the existing one
to be tested by a feeler connection.
• Feeler connections. Our emulation only establishes feeler
connection after all outgoing slots are occupied and at least
two minutes have passed since the last feeler connection,
as implemented in the Bitcoin client. Our feeler connection
implementation tests the colliding IP in the tried table ﬁrst
to resolve IP collisions. If there is no collision, the emulation
randomly selects one IP from the new table to test.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:19:22 UTC from IEEE Xplore.  Restrictions apply. 
909