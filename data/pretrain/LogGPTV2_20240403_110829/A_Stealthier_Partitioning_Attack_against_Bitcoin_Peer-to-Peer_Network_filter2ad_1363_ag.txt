### 附录 A: BGP 劫持对 Bitcoin 的影响

#### 一、数据集与方法
- **时间窗口**: 10 分钟。
- **劫持消息数量阈值**: 30 条。

我们调查了在 2018 年 9 月 1 日至 2018 年 12 月 31 日这四个月内，是否有 AS 发起针对 Bitcoin 网络的 BGP 劫持攻击。为了识别这些攻击，我们设定了以下条件：
1. 所有 BGP 劫持消息都由单个（可能是恶意的）AS 创建；
2. 所有消息都在 10 分钟的时间窗口内被观察到；
3. 每组至少包含 30 个不同的前缀，每个前缀至少托管一个 Bitcoin 节点 IP 地址。

**方法论**:
- 我们从 RIPE RIS 视角点收集了 480 亿条原始 BGP 更新消息，并使用 `bgpdump` 工具进行处理。
- 通过筛选出包含至少一个 Bitcoin 节点 IP 地址的前缀更新消息，我们进一步检测并分类 BGP 劫持消息为两类：源 AS 劫持和下一跳 AS 劫持。
- 我们的分析还排除了一些误报，例如多个源 AS 和最后两个 AS 都是实际所有者的情况。

**结果**:
- 在图 11 中，展示了在 10 分钟时间窗口内，BGP 劫持消息的数量。虚线表示 30 条劫持消息的阈值。
- 我们发现，在 4 个月的时间内，只有 7 次事件中存在 30 个或更多 Bitcoin 节点被劫持的情况。
- 进一步分析表明，这些劫持消息并未在全球范围内传播，通常只传播了一到两跳。

**表 II** 显示了这 7 次高度可疑的 Bitcoin 劫持事件的详细信息。尽管这些事件看起来可疑，但它们实际上并不是精心策划的 Bitcoin 劫持攻击。

### 附录 B: 阴影 IP 选择算法

**算法 1: 选择随机阴影 IP**

```plaintext
输入: P: 枚举的前缀集合。
输出: ip: 随机选择的阴影 IP。

1: procedure SELECT_RANDOM_SHADOW_IP
2:    G ← []  // 唯一前缀组集合
3:    D[] ← []  // 基于组的前缀字典
4:    for all pi in P do
5:       g ← getGroup(pi)
6:       G ← G ∪ [g]
7:       D[g] ← D[g] ∪ [pi]
8:    end for
9:    group ← getRandomElement(G)
10:   prefix ← getRandomElement(D[group])
11:   ip ← getRandomElement(prefix)
12:   return ip
13: end procedure
```

该算法将收获的阴影前缀按组分类（IPv4 地址为 /16，IPv6 地址为 /32），然后选择一个随机前缀组，再从中选择一个随机前缀，并最终从中随机选择一个阴影 IP。

### 附录 C: Bitcoin 模拟器操作

我们的 Bitcoin 模拟器 [13] 包括以下 Bitcoin 节点的操作：

- **存储 IP 到内部表**: 将 IP 存储在一个数据库中，代表新的和尝试过的表。每个 IP 与其上下文信息和其他统计信息一起存储。
- **IP 分配**: 实现 Bitcoin 核心版本 0.18.0 的确定性哈希机制，以确定 IP 地址的桶和槽位。
- **添加 IP 到新表**: 准确模拟将 IP 添加到新表的过程。如果插入的 IP 已存在于表中，则更新其最后听到的时间戳。如果插入的 IP 分配到了已占用的槽位，且现有 IP 不佳，则替换现有 IP。
- **建立传出连接**: 描述了传出连接的确切建立过程。当存在未占用的传出槽位时，节点会尝试连接从新表或尝试过的表中随机选择的 IP。
- **IP 从新表迁移到尝试过的表**: 当 IP 作为传出对等节点连接或通过探测连接时，将其从新表迁移到尝试过的表。
- **探测连接**: 只有在所有传出槽位都被占用且自上次探测连接以来至少过去了两分钟时，才会建立探测连接。探测连接首先测试尝试过的表中的冲突 IP，如果没有冲突，则随机选择一个新表中的 IP 进行测试。

通过上述优化，文本变得更加清晰、连贯和专业。