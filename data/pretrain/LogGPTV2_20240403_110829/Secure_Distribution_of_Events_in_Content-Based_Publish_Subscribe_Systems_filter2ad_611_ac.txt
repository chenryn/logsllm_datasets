#
·
-
!
!
"
#
·
$
%
&
'
(
)
*
+
+
,
-
·
-
*
+
+
,
-
·
encryptions  for  the  build-up  cache  at  this  time.    We 
compare  this  approach  to  other  algorithms  in  a  set  of 
simulations presented in section 5. 
E
K
+3
N
K
2
C
1*
C
K
N
2
The  average  number  of  encryptions  for 
N
K
2
   (4a) 
*
2
N
K
K
K
7=
A=
E
4.3  Clustered Cache 
A known technique for reducing complexity of 
certain problems is clustering [reference].  There are 2N 
possible groups and the above approaches may require 
very large cache sizes when the number of subscribers 
grows  into  thousands.    This  section  describes  a  new 
clustered  cache  technique,  which  needs  much  smaller 
number of encryptions than the first two algorithms. 
For a server with N clients, we divide the set 
of  clients  into  K  clusters.    The  server  has  to  keep  K 
separate cluster caches, but those caches can be much 
smaller than the caches from section 4.1 and 4.2.  Each 
cluster  cache  holds  entries  of  the  same  format  as  the 
simple  and  buildup  caches  (),  but  G  only 
consists  of  subscribers  belonging  to  the  particular 
cluster.  The algorithm works in the following way: 
1.  new event E arrives at a broker and is matched 
to a set of subscribers G 
2.  G  is  divided  into  K  subsets  according  to  the 
3. 
cluster choices (G1, G2, …, GK) 
for each cluster 
3.1.  search  cluster  cache  for  the  appropriate 
group (one of G1 through GK) 
• 
the  algorithm  works  as  the  simple 
cache approach for each cluster 
send  message  to  the  appropriate 
group in the cluster 
add new entries to cluster cache as 
dictated by the simple algorithm 
• 
• 
An  event  has  to  be  encrypted  separately  for 
each cluster.  Assuming a cache hit in every cluster, an 
event has to be encrypted K times.   
An  interesting  issue  in  this  algorithm  is  the 
choice  of  clusters.    A  simple  solution  is  to  assign 
subscribers  to  clusters  randomly  (or  according  to 
subscriber ids: first X subscribers to cluster 1, next X to 
cluster  2,  etc.).  Another approach would be to assign 
clusters  based  on  subscription  similarity.    Subscribers 
with  similar  subscriptions  would  be  assigned  to  the 
same cluster. 
We 
average  number  of 
encryptions  per  each  cluster  and  multiply  it  by  the 
number of clusters to get the total.  A cluster of size NK, 
with individual cache of size Ck is very much like the 
simple  cache  from  previous  section.    We  present 
approximate  formulas  for  random  distribution  only.  
Derived  from  equation  2,  the  average  number  of 
encryptions per cluster is: 
calculate 
the 
clustered cache is Ek * K, so: 
C
K
N
2
K
+=
1*
N
K
2
C
K
N
K
2
*
N
K
2
*
K
      (4) 
2£
KN
KC
To  simplify  derivation  and 
the  resulting 
formulas  we  do  not  account  for  the  fact  that  some 
clusters may have no subscribers matching a particular 
event,  therefore  reducing  the  number  of  encryptions.  
Equation  4  gives  us  an  upper  bound  on  the  average 
number  of  encryptions  for  the  clustered  cache  and 
random group distribution.  For the same parameters as 
in the previous algorithms, the clustered cache requires 
at most 11 encryptions on average. 
Next section describes an algorithm combining 
the 
that  combines 
clustered  and  simple  caches 
advantages of both approaches. 
4.4  Clustered-Popular Cache 
The  clustered  cache  works  well  in  a  generic 
case of random groups.  It doesn’t take advantage of the 
fact that some groups occur more frequently, as in the 
popular-set  distribution. 
  The  clustered-popular 
algorithm was designed to enhance clustered cache with 
support for frequently occurring (popular) groups.  The 
basic  idea  is  to  combine  clustered  cache  with  simple 
cache in one.  For each event, both caches are checked.  
If  there  is  no  hit  in  the  simple  part  of  the  cache,  the 
clustered  approach  is  used  to  reduce  the  number  of 
encryptions.  The algorithm works as follows: 
1.  new event E arrives at a broker and is matched 
2. 
to a set of subscribers G 
search the simple cache 
2.1.  if an entry  is found in cache 
send {E}KG to all subscribers in G 
2.2.  if entry  is not found in cache 
• 
• 
• 
• 
generate new key KG and add new 
entry  to cache 
search  the  clustered  cache  as  in 
section 4.3 
send  messages  to  the  appropriate 
group in each cluster 
We  derive  formulas  for  average  number  of 
encryptions 
random  and  popular-set 
distributions of groups.  The formulas are based on the 
appropriate  formulas  for  simple  and  clustered  cache 
for  both 
.
/
0
0
1
2
3
4
5
5
6
7
-
4
5
6
8
9
:
:
;
?
?
@
A
-
>
?
@
C
N
2
K=
U=
NP
E
E
+
1*
N
2
C
N
2
*
C
K
N
2
K
+G
1*
N
K
2
C
K
N
K
2
*
N
K
2
*
K
C
K
N
2
K
1*
+Q
N
K
2
C
K
N
K
2
*
N
K
2
*
K
(5) 
(6a) 
(6d) 
(6) 
(6c) 
|
=
PPC
CS
|
|
S
|
The  average  number  of  encryptions  when  a 
group comes form the popular set S is shown in figure 
5, equation 6d 
Combination of equations 6a and 6d gives us a 
formula for the average number of encryptions for the 
clustered-popular  cache  and  popular-set  group 
distribution (figure 5, equation 6).  
Table 1 shows average numbers of encryptions 
calculated  using  formulas  derived  above  for  two 
different  sets  of  parameters.    The  clustered-popular 
approach  always  uses  half  of  the cache for the simple 
part and second half for the clustered part.  The small 
set has the following parameters: there are 100 clients 
and  cache  size  is  10,000  entries.    The  clustered 
approach  uses  10  clusters  of  10  subscribers  each  with 
cluster cache size of 1000.  The clustered-popular cache 
uses  11  clusters  of  about  9  subscribers  each.    The 
popular set distribution uses a set of 10,000 groups and 
probability  p  =  .9.    The  large  set  has  the  following 
parameters:  there  are  1,000  clients  and  cache  size  is 
100,000 entries.  The clustered cache uses 100 clusters 
of  10  subscribers.    The  clustered-popular  cache  uses 
114 clusters of 8 or 9 subscribers each.  The popular set 
has 100,000 groups and probability p = .8.   
=
E
P
|
+
1*
C
S
|
|
CS
|
|
S
|
*
C
K
N
2
K
+
1*
N
K
2
C
K
N
K
2
*
N
K
2
*
K
=
1(
E
p
)
C
K
N
2
K
1*
+`
p
C
S
|
|
|
+
1*
CS
|
|
S
|
N
K
2
C
K
N
2
K
*
N
K
2
C
K
*
N
K
2
+
*
K
+
1*
N
K
2
C
K
N
K
2
*
N
K
2
*
K
Fig. 5: Formulas for numbers of encryptions. 
approaches.    We  present  the  derivation  separately  for 
both group distributions. 
Random  distribution:  if  there  is  hit  in  the 
simple  part  of  the  cache,  we  need  only  1  encryption.  
Otherwise, the number of encryptions is the same as in 
the  clustered  cache.   Here, C is the size of the simple 
part  of  the  cache  and  CK  is  the  size  of  clusters in the 
clustered  part of the cache.  We assume the following 
two conditions: 
2£
C 2£
KN
N
KC
With 
 and 
those  conditions, 
the  approximate 
formulas  for  the  average  number  of  encryptions  are 
shown in figure 5, equation 5. 
Popular  distribution:  We  know  that  if  the 
group does not come from the popular set (probability 
(1 – p)), there is no hit in the simple part of the cache 
(smart cache and we assume that C < |S|).  In this case, 
the average number of encryptions is based only on the 
clustered part of the cache (figure 5, equation 6a).  
If  the  group  comes  from the popular set then 
there is a hit in the simple cache with probability 
PPS
=
C
| S
|
(6b) 