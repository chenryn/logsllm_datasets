Additionally, we note that while this reaction time is too
8
As we mention in Section 4, we explored several options
for recovering authentication credential plaintexts. In par-
ticular, we deployed GPU-optimized password crackers on
a low-end NVIDIA 9800GT card, a medium-end GTX280
card, a Tesla S870 cluster with 8 GPU boards, a Tesla
C1060 cluster with 8 nodes, and an Amazon EC2 Clus-
ter GPU Quadruple Extra Large Instance with two M2060
Fermi GPUs. To empirically demonstrate the required
computational overhead to recover authentication credential
plaintexts, we measured MD4 hashing speed by performing
a full dictionary search on each device.
Figure 7 presents a hashing performance comparison be-
tween different hardware and thread conﬁgurations. To gen-
erate this plot, we ran an exhaustive dictionary search over a
space of 8 alphanumeric characters with increasing threads
per CUDA block to a maximum of 512 blocks. The dictio-
nary build times range from a little over a week to approxi-
mately 13 hours.
As expected, the number of hashes computed per second
initially increases with increasing parallelism, but eventu-
ally levels out or decreases due to thread contention. We
note that for the 9800GT, the drop in performance at 512
threads is due to the conﬁguration being too large for the
card memory. We also note that a more careful implemen-
Figure 7. GPU hashing speed as a function of
threads per CUDA block for dictionary gen-
eration.
In particular, we compare the rela-
tive efﬁciency of four different hardware im-
plementations.
Figure 8. Jamming and association probabil-
ity over 1,000 trials as a function of distance.
Note that attackers are not limited to a maxi-
mum of 1,000 trials, and that each trial takes
approximately one second to execute.
tation of the distributed cracker might improve performance
at scale.
Once a full dictionary is generated, plaintext recovery
requires at least one DES encryption per entry in the dictio-
nary. An efﬁcient GPU implementation [1] would allow the
recovery to be fully-parallelized. However, the speed gain
factor of the above implementation against a single CPU is
around 10, meaning that a host with multiple cores is a rea-
sonable substitute for the GPU implementation.
5.4 Attack Range
To quantify the maximum distance from which our at-
tack could be mounted by our prototype, we deployed our
high-gain directional parabolic antenna on the 16th ﬂoor of
a building in a large U.S. city. The antenna was connected
to a computer running Kismet through a TL-WN722N USB
wireless dongle. We recorded the MAC addresses of a num-
ber of access points, and queried these addresses using the
Skyhook Wireless Positioning Service [43] to give an ap-
proximate distance from the placement of the antenna. The
results show that our 19dBi antenna is able to communicate
with networks 800m in distance.
To further quantify the performance of our prototype, we
measured the jamming and association success probability
of our system. We placed our prototype on the 4th ﬂoor of
the same building as in the previous experiment to limit its
range, and co-located an access point for a target wireless
network. Then, we varied the position of a test client at
locations 50 meters apart in line-of-sight of the transmitter.
As a test client, we used a GNU/Linux laptop containing an
Atheros-based wireless interface and the factory antenna.
For each position, we ran 1,000 network scans. Figure 9
sketches the relative position of all the components for the
experiment.
For the chosen channel, we consider a single jamming
attempt to be successful if the scan reveals only our sys-
tem’s MAC address. Failure to see our system in the scan,
or seeing other transmitters in the channel, indicates a failed
jamming attempt. Similarly, we consider an association to
be successful if the test client associates with our rogue ac-
cess point. If, on the other hand, the client connects to the
legitimate wireless network, then we consider the associa-
tion attempt to be a failure. The results for both tests are
shown in Figure 8.
The results indicate that our prototype is able to jam and
force client associations with close to 100% probability at
ranges under 100m. As expected, success probabilities de-
crease with increased range; however, they do remain non-
negligible up to 400m. We note that although these proba-
bilities might indicate that the attack becomes ineffective at
larger distances, the attackers are not constrained to 1,000
trials. Indeed, an attacker could quite feasibly perform hun-
dreds of thousands or millions of trials in relatively short
periods of time. Though this strategy comes with a corre-
sponding increase in the risk of detection, it is not necessar-
ily the case that the true risk is greater since one would have
to be looking for signs of the attack in the ﬁrst place.
9
Password Time to ﬁnd (s)
27
7,510
1
2
Table 1. Password search time, ordered by
elapsed time.
For each participant, we assigned a series of common,
innocuous tasks such as browsing the web, sending email
through a web interface, and solving CAPTCHAs after au-
thenticating with the university wireless network that we
were targeting. Establishing a connection to the wireless
network we were targeting was, therefore, not an end in it-
self, but was instead the means of accomplishing another
unrelated goal. This was to ensure that the users were
not aware of the attack that we were launching so that we
could determine how effective the attack would be in a
realistic, real-world setting. When available, the partici-
pants performed the tasks using their personal computers.
Otherwise, we provided an Asus 1005PE netbook running
Ubuntu 11.10.
After the completion of each user experiment, we de-
briefed the participant on the real purpose of the tests, asked
if they had noticed any suspicious behavior during the ex-
periment, and asked them to complete a self-assessment of
their technical abilities. Figure 10 shows the distribution
of scores reported by the users. Note that most participants
were technically-sophisticated. Hence, the results we report
in this section demonstrate that the attack works effectively
even against very knowledgeable users.
Our prototype was able to successfully perform a man-
in-the-middle attack against all of the 17 users who par-
ticipated in our user experiments, including capturing the
MSCHAPv2 conversation. All users authenticated with the
wireless network that we were targeting, and only one re-
ported seeing suspicious activity (even so, she still provided
her password to the system).
To determine how long it would take for us to crack
a password to gain illegal access to the network, we per-
formed a brute-force search of 8 character alphanumeric
passwords over the anonymized captures using John the
Ripper on a 24 Xeon-CPU server at 2.4GHz in our lab. We
parallelized the search to use one candidate password on
each CPU. Table 1 shows that we were able to successfully
crack a password after about 30 seconds, and then another
one after about two hours. Hence, our attack is feasible
in practice and can be used to gain unauthorized access to
WPA Enterprise networks.
Figure 9. Experimental setup for jamming
tests. The access point and jammer are co-
located in this experiment, while the client
distance from the AP and jammer is varied at
50m increments. The jamming and associa-
tion success probabilities against the client
are recorded over 1,000 trials at each dis-
tance.
5.5 User Experiments
Similar to work conducted by Jakobsson et al. [27, 28],
we believe that realistic experiments are the only way to
reliably estimate success rates of attacks in the real world.
In order to assess the feasibility of the attack we de-
scribe in this paper, we performed user experiments with
17 volunteer computer science graduate students that we re-
cruited in our department. All participants were technically-
sophisticated – that is, the participants were expert Internet
and knowledgeable wireless network users. We set up the
attack prototype in the lab with small Antenova B4844-01
antennas to limit range. The system was modiﬁed to stop
jamming and answering requests for clients already seen
and captured.
Before the experiments, we informed all participants that
we would be capturing trafﬁc, but without revealing the con-
crete attack that we were launching. The participants did
not know that we were performing a security experiment.
Furthermore, we reassured our participants that we would
not be accessing any personal information (e.g., email con-
tents, Facebook messages, etc.). Also, we anonymized cap-
tures when cracking such that no user could be mapped to
a password , and only processed information automatically
(i.e., we did not manually look at it).
10
BuildingAccessPointJammerx * 50mClientthe attacker would like to have guaranteed success in crack-
ing a speciﬁc victim’s password. Agosta et al. [1] and
Guneysu et al. [24] examine the use of equivalent GPU and
FPGA clusters respectively for performing key searches in
the $10,000 USD range. A cluster of 48 NVIDIA GTX260-
216 boards completes a single DES in 18 days, while CO-
PACOBANA does so in 12. Taking the former as an up-
per bound for the time required to completely explore the
possible space of keys, the budget for such a plaintext re-
covery component in under 20 days comes to less than
$15,000 USD when using the Amazon EC2 GPU extra-
large instance for dictionary generation.
From the above cost analysis, our attack can be per-
formed for under $20,000 USD if a speciﬁc user is targeted
rather than when the attacker is interested in gaining general
access to a WPA Enterprise network as we demonstrated in
our user experiments. We believe that this renders the at-
tack feasible for a wide range of attackers who are inter-
ested in launching targeted attacks – e.g., criminal gangs,
well-funded corporations, and nation-states. Note that for
those entities with signiﬁcant resources – e.g., the security
agency of a country – the attack could be performed in a far
more efﬁciently than above by investing in faster resources.
6 Countermeasures
Preventing our attack requires coordination by defenders
on multiple layers. Several countermeasures are required to
mitigate such attacks. In this section, we present and discuss
some possible mitigation strategies.
A central component of our attack concerns the spooﬁng
of network SSIDs in wireless network user interfaces. Im-
plementations that can provide visual cues to the user that
a rogue SSID is distinct from a similar-appearing trusted
SSID could potentially neutralize or warn against the attack.
For example, SSIDs might be displayed between visible de-
limiters, or visible placeholders might be displayed for non-
printable characters. More sophisticated approaches might
check for SSID similarity, similar to phishing heuristics in-
tegrated into modern browsers, and alert the user in such
cases. Note, however, that educating users to take notice
of security-relevant information is a notoriously difﬁcult
problem, especially in a wireless setting where most users
are not aware of the risks. For example, simple session-
hijacking tools such as Firesheep have received much atten-
tion because of their simplicity and effectiveness in wireless
environments.
Unfortunately, ﬂaws in MSCHAPv2 and the wide avail-
ability of distributed computational resources make it feasi-
ble to recover plaintext user credentials. Attacks against
it are well-known [41] and implemented in a variety of
tools. Perhaps worst of all, these attacks have negligible
parallelization overhead. Our work supports the fact that
Figure 10. Results of a self-assessment of
familiarity with computers and wireless net-
working performed by participants in our user
study. Users tended to view themselves
as technically sophisticated with respect to
computing in general, while familiarity with
wireless networking exhibits a bimodal dis-
tribution.
In the latter case, most viewed
themselves as sophisticated, while a smaller
group classiﬁed themselves as less compe-
tent.
Component
1 Desktop Core 2 Quad 4GB RAM
2 USRP2 boards @ $1500 ea.
2 RFX2400 boards @ $275 ea.
1 Buffalo WZR-HP-300NH AP
2 Parabolic grid ant. @ $47.99 ea.
1 Standard TLS certiﬁcate
8 Tesla C10 computing devices @1,050 ea.
Total
Cost (USD)
580.00
3,000.00
550.00
66.00
95.98
178.47
8,400
$12,870.45
Table 2. A breakdown of the cost for each
component of our attack prototype.
5.6 Economic Analysis
We split the estimated cost of building a system capa-
ble of launching our attack into two parts. First, we quan-
tify the cost of the hardware we used, shown in Table 2.
The total cost is dominated by the USRP2 SDR boards, at
$3,000 USD, which is unsurprising given the relatively spe-
cialized nature of the hardware. Nevertheless, the ﬁnal cost
of $4,470.45 USD is well within the reach of many moti-
vated attackers.
Next, we analyze the cost of the plaintext recovery com-
ponents, including the MD4 dictionary generator to map
strings to hashes, and the DES-cracking implementation if
11
more secure alternatives to MSCHAPv2 need to be de-
ployed in WPA Enterprise networks. Even small changes
to MSCHAP, such as using a single AES encryption for the
client response, could make the attack we describe infeasi-
ble. Also, using client certiﬁcates for authentication would
avoid relying on password-based authentication protocols
all-together.
In this work, we show that the lack of a strong binding
between the SSID and the authentication server certiﬁcate
is a signiﬁcant security problem. Tying the wireless net-
work SSID to the authentication server certiﬁcate gives the
victim a chance to detect the attack and determine that she
is actually contacting a rogue access point. WPA clients
should also require certiﬁcate authority selection and com-
mon name veriﬁcation to protect from SSID spooﬁng at-
tacks.
Allowing users to conﬁgure their own network proﬁles
to be able to connect to an organization’s wireless network
may be convenient from a management and organizational
point of view. However, this ﬂexibility creates the poten-
tial for attacks such as ours. For deployments using WPA
Enterprise, we believe that it might be better for a central
authority to distribute wireless proﬁles to clients, and disal-
low dynamic proﬁle creation.
While our attack makes use of directional antennas to in-
crease the range of the attack, physical security techniques
(e.g., secure pairing) have recently been proposed to mit-
igate rogue device attacks [9, 32]. Work in this vein, al-
though mainly focused on short range handsets, could po-
tentially be adapted to newer 802.11n multi-antenna wire-
less clients and WPA Enterprise networks. This could
severely limit the range of the attack, and force the jam-
mer to be co-located with the victim clients, reducing the
problem to one of physical security.
7 Related Work
Our attack against WPA Enterprise incorporates a com-
bination of cross-layer vulnerabilities, from the physical
communication medium to the human-computer interface.
In this section, we place the attack in the context of related
work.
General wireless attacks Protection against imperson-
ation and man-in-the-middle attacks in wireless networks
has garnered interest in the networking community in recent
years. Techniques include providing visual feedback to the
user such as light or sound for secure pairing [40, 23], using
correlated motion [10], using ambient signals around the
transmitter to authenticate it [32, 4, 22], and special packet
coding techniques to detect jamming [21]. Anti-jamming
systems have also been studied for decades, since the intro-
duction of spread spectrum communication [42] to newer
12
forms that allow key establishment for spread spectrum
techniques in hostile environments [45]. While such tech-
niques provide useful building blocks for securing wireless
networks, they are limited in applicability for the existing
WPA Enterprise standard and its deployment constraints.
Evil twin protection Most evil twin attacks in the lit-
erature contemplate the impersonation of unsecured net-
works and do not include jammers, while our attack re-
lies on a composition of cross-layer techniques to exploit
weaknesses in UI design, authentication protocols, and the