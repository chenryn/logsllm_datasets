### 5.3 Password Cracking and Computational Overhead

In Section 4, we explored several options for recovering authentication credential plaintexts. Specifically, we deployed GPU-optimized password crackers on a variety of hardware configurations, including:
- A low-end NVIDIA 9800GT card
- A medium-end GTX280 card
- A Tesla S870 cluster with 8 GPU boards
- A Tesla C1060 cluster with 8 nodes
- An Amazon EC2 Cluster GPU Quadruple Extra Large Instance with two M2060 Fermi GPUs

To empirically demonstrate the required computational overhead, we measured the MD4 hashing speed by performing a full dictionary search on each device.

**Figure 7** presents a comparison of hashing performance across different hardware and thread configurations. To generate this plot, we conducted an exhaustive dictionary search over a space of 8 alphanumeric characters, varying the number of threads per CUDA block up to a maximum of 512 blocks. The dictionary build times ranged from a little over a week to approximately 13 hours.

As expected, the number of hashes computed per second initially increases with increasing parallelism but eventually levels out or decreases due to thread contention. For the 9800GT, the drop in performance at 512 threads is due to the configuration being too large for the card's memory. We also note that a more careful implementation of the distributed cracker might improve performance at scale.

Once a full dictionary is generated, plaintext recovery requires at least one DES encryption per entry. An efficient GPU implementation [1] would allow the recovery to be fully parallelized. However, the speed gain factor of the above implementation against a single CPU is around 10, meaning that a host with multiple cores is a reasonable substitute for the GPU implementation.

### 5.4 Attack Range

To quantify the maximum distance from which our attack could be mounted, we deployed a high-gain directional parabolic antenna on the 16th floor of a building in a large U.S. city. The antenna was connected to a computer running Kismet through a TL-WN722N USB wireless dongle. We recorded the MAC addresses of several access points and queried these addresses using the Skyhook Wireless Positioning Service [43] to approximate the distance from the antenna. The results show that our 19dBi antenna can communicate with networks up to 800 meters away.

To further quantify the performance of our prototype, we measured the jamming and association success probability. We placed the prototype on the 4th floor of the same building to limit its range and co-located an access point for a target wireless network. We then varied the position of a test client at 50-meter intervals in line-of-sight of the transmitter. The test client was a GNU/Linux laptop with an Atheros-based wireless interface and the factory antenna.

For each position, we ran 1,000 network scans. **Figure 9** illustrates the relative positions of all components for the experiment.

A single jamming attempt was considered successful if the scan revealed only our systemâ€™s MAC address. Failure to see our system or seeing other transmitters in the channel indicated a failed jamming attempt. Similarly, an association was considered successful if the test client associated with our rogue access point. If the client connected to the legitimate wireless network, the association attempt was a failure. The results are shown in **Figure 8**.

The results indicate that our prototype can jam and force client associations with close to 100% probability at ranges under 100 meters. Success probabilities decrease with increased range but remain non-negligible up to 400 meters. Although these probabilities suggest the attack becomes ineffective at larger distances, attackers are not limited to 1,000 trials. An attacker could feasibly perform hundreds of thousands or millions of trials in relatively short periods. While this strategy increases the risk of detection, it does not necessarily mean the true risk is greater, as one would have to be actively looking for signs of the attack.

### 5.5 User Experiments

Similar to work by Jakobsson et al. [27, 28], we believe realistic experiments are essential for reliably estimating attack success rates in the real world. To assess the feasibility of our attack, we conducted user experiments with 17 volunteer computer science graduate students. All participants were technically sophisticated, being expert Internet and wireless network users. We set up the attack prototype in the lab with small Antenova B4844-01 antennas to limit the range. The system was modified to stop jamming and answering requests for clients already seen and captured.

Before the experiments, we informed participants that we would be capturing traffic without revealing the specific attack. Participants did not know they were part of a security experiment. We reassured them that we would not access personal information and anonymized captures to ensure no user could be mapped to a password. Information was processed automatically, and we did not manually review it.

**Table 1** shows the time required to find passwords, ordered by elapsed time. For each participant, we assigned common, innocuous tasks such as browsing the web, sending email through a web interface, and solving CAPTCHAs after authenticating with the university wireless network. Establishing a connection to the wireless network was not the end goal but a means to accomplish unrelated tasks. This ensured users were unaware of the attack, allowing us to determine its effectiveness in a realistic setting.

Our prototype successfully performed a man-in-the-middle attack against all 17 users, including capturing the MSCHAPv2 conversation. All users authenticated with the wireless network, and only one reported suspicious activity (though she still provided her password).

To determine how long it would take to crack a password, we performed a brute-force search of 8-character alphanumeric passwords using John the Ripper on a 24 Xeon-CPU server at 2.4GHz in our lab. We parallelized the search to use one candidate password per CPU. **Table 1** shows that we successfully cracked a password after about 30 seconds and another after about two hours, indicating that our attack is feasible in practice and can be used to gain unauthorized access to WPA Enterprise networks.

### 5.6 Economic Analysis

We split the estimated cost of building a system capable of launching our attack into two parts. First, we quantified the cost of the hardware used, shown in **Table 2**. The total cost is dominated by the USRP2 SDR boards at $3,000 USD, which is expected given the specialized nature of the hardware. The final cost of $4,470.45 USD is within the reach of many motivated attackers.

Next, we analyzed the cost of the plaintext recovery components, including the MD4 dictionary generator and the DES-cracking implementation. Using equivalent GPU and FPGA clusters, Agosta et al. [1] and Guneysu et al. [24] examined key searches in the $10,000 USD range. A cluster of 48 NVIDIA GTX260-216 boards completes a single DES in 18 days, while COPACOBANA does so in 12 days. Taking the former as an upper bound, the budget for such a plaintext recovery component in under 20 days comes to less than $15,000 USD when using the Amazon EC2 GPU extra-large instance for dictionary generation.

From the above cost analysis, our attack can be performed for under $20,000 USD if a specific user is targeted rather than when the attacker is interested in gaining general access to a WPA Enterprise network. This renders the attack feasible for a wide range of attackers, including criminal gangs, well-funded corporations, and nation-states. For entities with significant resources, the attack could be performed more efficiently by investing in faster resources.

### 6 Countermeasures

Preventing our attack requires coordination by defenders on multiple layers. Several countermeasures are required to mitigate such attacks. In this section, we present and discuss some possible mitigation strategies.

A central component of our attack involves spoofing network SSIDs in wireless network user interfaces. Implementations that provide visual cues to the user, such as displaying SSIDs between visible delimiters or showing placeholders for non-printable characters, could potentially neutralize or warn against the attack. More sophisticated approaches might check for SSID similarity, similar to phishing heuristics in modern browsers, and alert the user. Educating users to take notice of security-relevant information is a notoriously difficult problem, especially in wireless settings where most users are not aware of the risks.

Unfortunately, flaws in MSCHAPv2 and the wide availability of distributed computational resources make it feasible to recover plaintext user credentials. Attacks against it are well-known [41] and implemented in various tools. These attacks have negligible parallelization overhead. Our work supports the need for more secure alternatives to MSCHAPv2 in WPA Enterprise networks. Even small changes, such as using a single AES encryption for the client response, could make the attack infeasible. Using client certificates for authentication would avoid relying on password-based protocols altogether.

In this work, we show that the lack of a strong binding between the SSID and the authentication server certificate is a significant security problem. Tying the wireless network SSID to the authentication server certificate gives the victim a chance to detect the attack and determine that they are contacting a rogue access point. WPA clients should also require certificate authority selection and common name verification to protect from SSID spoofing attacks.

Allowing users to configure their own network profiles to connect to an organization's wireless network may be convenient from a management and organizational perspective. However, this flexibility creates the potential for attacks like ours. For deployments using WPA Enterprise, it might be better for a central authority to distribute wireless profiles to clients and disallow dynamic profile creation.

While our attack uses directional antennas to increase the range, physical security techniques (e.g., secure pairing) have been proposed to mitigate rogue device attacks [9, 32]. Such work, although mainly focused on short-range handsets, could potentially be adapted to newer 802.11n multi-antenna wireless clients and WPA Enterprise networks. This could severely limit the attack range, forcing the jammer to be co-located with the victim clients, reducing the problem to one of physical security.

### 7 Related Work

Our attack against WPA Enterprise incorporates a combination of cross-layer vulnerabilities, from the physical communication medium to the human-computer interface. In this section, we place the attack in the context of related work.

**General Wireless Attacks:** Protection against impersonation and man-in-the-middle attacks in wireless networks has garnered interest in the networking community. Techniques include providing visual feedback to the user, such as light or sound for secure pairing [40, 23], using correlated motion [10], using ambient signals around the transmitter to authenticate it [32, 4, 22], and special packet coding techniques to detect jamming [21]. Anti-jamming systems have also been studied for decades, from the introduction of spread spectrum communication [42] to newer forms that allow key establishment for spread spectrum techniques in hostile environments [45]. While such techniques provide useful building blocks for securing wireless networks, they are limited in applicability for the existing WPA Enterprise standard and its deployment constraints.

**Evil Twin Protection:** Most evil twin attacks in the literature contemplate the impersonation of unsecured networks and do not include jammers. Our attack relies on a composition of cross-layer techniques to exploit weaknesses in UI design, authentication protocols, and the physical layer.