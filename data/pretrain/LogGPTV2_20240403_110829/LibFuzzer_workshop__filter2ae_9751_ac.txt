    "@\x00\x00\x00" # Uses: 46
    "\x02\x00" # Uses: 32
    "+\x00" # Uses: 37
    "\x00\x00\x00\x00\x00\x00 \x02" # Uses: 42
    "\x00\x0f" # Uses: 37
    "\xff\xff\xff\xff\xff\xff\xff$" # Uses: 49
    "ASCII" # Uses: 40
    "\x00\x00\x00\x00\x00\x00\x01\x00" # Uses: 30
    "a\xff:-\xec" # Uses: 27
    "\xff\x1a" # Uses: 30
    "'''''''''&''" # Uses: 23
    "\x01\x00\x00\x00\x00\x00\x01\x1d" # Uses: 34
    "TIOIb" # Uses: 19
    "J\x00\x00\x00\x00\x00\x00\x00" # Uses: 15
    "N\x00\x00\x00" # Uses: 10
    "\x01O" # Uses: 8
    "\xff\xff\xff\x02" # Uses: 6
    "HTML" # Uses: 8
    "\x00P" # Uses: 9
    "\xff\xff\xff\x00" # Uses: 9
    "\xff\x06" # Uses: 9
    "\x7f\x96\x98\x00\x00\x00\x00\x00" # Uses: 4
    "^>" # Uses: 5
    "\x01\x0a" # Uses: 5
    "\x13\x00" # Uses: 1
    ###### End of recommended dictionary. ######
    Done 479244 runs in 61 second(s)
    stat::number_of_executed_units: 479244
    stat::average_exec_per_sec:     7856
    stat::new_units_added:          5007
    stat::slowest_unit_time_sec:    0
    stat::peak_rss_mb:              467
可以看到最后还给出了`Recommended dictionary`，可以更新到我们的.dict中。  
`stat::new_units_added: 4709`说明最终探测到了5007个代码单元。  
不使用字典的话：
    Done 402774 runs in 61 second(s)
    stat::number_of_executed_units: 402774
    stat::average_exec_per_sec:     6602
    stat::new_units_added:          3761
    stat::slowest_unit_time_sec:    0
    stat::peak_rss_mb:              453
可以看到使用字典效率确实提高不少。
此外，当我们长时间fuzz时，会产生和编译出很多样本，这些样本存放在语料库corpus中，例如上面就产生了`➜ 08 git:(master) ✗ ls
-lR| grep "^-" | wc -l  
7217` 7217个样本，其中很多是重复的，我们可以通过以下方法进行精简(使用-merge=1标志)：
    mkdir corpus1_min
    corpus1_min: 精简后的样本集存放的位置
    corpus1: 原始样本集存放的位置
    ➜  08 git:(master) ✗ ./libxml2-v2.9.2-fsanitize_fuzzer1 -merge=1 corpus1_min corpus1
    INFO: Seed: 1264856731
    INFO: Loaded 1 modules   (53343 inline 8-bit counters): 53343 [0xd27740, 0xd3479f), 
    INFO: Loaded 1 PC tables (53343 PCs): 53343 [0x9b3650,0xa83c40), 
    MERGE-OUTER: 2724 files, 0 in the initial corpus
    MERGE-OUTER: attempt 1
    INFO: Seed: 1264900516
    INFO: Loaded 1 modules   (53343 inline 8-bit counters): 53343 [0xd27740, 0xd3479f), 
    INFO: Loaded 1 PC tables (53343 PCs): 53343 [0x9b3650,0xa83c40), 
    INFO: -max_len is not provided; libFuzzer will not generate inputs larger than 1048576 bytes
    MERGE-INNER: using the control file '/tmp/libFuzzerTemp.8187.txt'
    MERGE-INNER: 2724 total files; 0 processed earlier; will process 2724 files now
    #1    pulse  cov: 464 exec/s: 0 rss: 32Mb
    #2    pulse  cov: 470 exec/s: 0 rss: 33Mb
    #4    pulse  cov: 502 exec/s: 0 rss: 33Mb
    #8    pulse  cov: 522 exec/s: 0 rss: 34Mb
    #16    pulse  cov: 533 exec/s: 0 rss: 34Mb
    #32    pulse  cov: 681 exec/s: 0 rss: 35Mb
    #64    pulse  cov: 756 exec/s: 0 rss: 36Mb
    #128    pulse  cov: 1077 exec/s: 0 rss: 39Mb
    #256    pulse  cov: 1247 exec/s: 0 rss: 45Mb
    #512    pulse  cov: 1553 exec/s: 0 rss: 55Mb
    #1024    pulse  cov: 2166 exec/s: 0 rss: 77Mb
    #2048    pulse  cov: 2550 exec/s: 2048 rss: 120Mb
    #2724    DONE  cov: 2666 exec/s: 2724 rss: 155Mb
    MERGE-OUTER: succesfull in 1 attempt(s)
    MERGE-OUTER: the control file has 287194 bytes
    MERGE-OUTER: consumed 0Mb (38Mb rss) to parse the control file
    MERGE-OUTER: 2313 new files with 8750 new features added; 2666 new coverage edges
精简到了2313个样本。
workshop还提供了另一个fuzz target:
    ➜  08 git:(master) ✗ cat xml_compile_regexp_fuzzer.cc 
    // Copyright 2016 The Chromium Authors. All rights reserved.
    // Use of this source code is governed by a BSD-style license that can be
    // found in the LICENSE file.
    #include 
    #include 
    #include 
    #include 
    #include 
    #include "libxml/parser.h"
    #include "libxml/tree.h"
    #include "libxml/xmlversion.h"
    void ignore (void * ctx, const char * msg, ...) {
      // Error handler to avoid spam of error messages from libxml parser.
    }
    // Entry point for LibFuzzer.
    extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
      xmlSetGenericErrorFunc(NULL, &ignore);
      std::vector buffer(size + 1, 0);
      std::copy(data, data + size, buffer.data());
      xmlRegexpPtr x = xmlRegexpCompile(buffer.data());
      if (x)
        xmlRegFreeRegexp(x);
      return 0;
    }
与之前的不同，将输入的数据copy到buffer中，再交给`xmlRegexpCompile`处理。编译运行如下:
    ➜  08 git:(master) ✗ clang++ -O2 -fno-omit-frame-pointer -gline-tables-only -fsanitize=address,fuzzer-no-link -fsanitize-address-use-after-scope -std=c++11 xml_compile_regexp_fuzzer.cc -I libxml2/include libxml2/.libs/libxml2.a -fsanitize=fuzzer -lz -o libxml2-v2.9.2-fsanitize_fuzzer1 
    ➜  08 git:(master) ✗ ./libxml2-v2.9.2-fsanitize_fuzzer1 -dict=./xml.dict
    Dictionary: 60 entries
    INFO: Seed: 2400921417
    INFO: Loaded 1 modules   (53352 inline 8-bit counters): 53352 [0xd27700, 0xd34768), 
    INFO: Loaded 1 PC tables (53352 PCs): 53352 [0x9b36f0,0xa83d70), 
    INFO: -max_len is not provided; libFuzzer will not generate inputs larger than 4096 bytes
    INFO: A corpus is not provided, starting from an empty corpus
    #2    INITED cov: 114 ft: 115 corp: 1/1b exec/s: 0 rss: 30Mb
        NEW_FUNC[1/5]: 0x551cf0 in ignore(void*, char const*, ...) /home/admin/libfuzzer-workshop/lessons/08/xml_compile_regexp_fuzzer.cc:16
        NEW_FUNC[2/5]: 0x552d00 in __xmlRaiseError /home/admin/libfuzzer-workshop/lessons/08/libxml2/error.c:461
    #6    NEW    cov: 150 ft: 169 corp: 2/2b lim: 4 exec/s: 0 rss: 31Mb L: 1/1 MS: 3 ShuffleBytes-ShuffleBytes-ChangeByte-    #10    NEW    cov: 155 ft: 223 corp: 3/4b lim: 4 exec/s: 0 rss: 31Mb L: 2/2 MS: 4 ChangeBit-ShuffleBytes-ShuffleBytes-InsertByte-    #12    NEW    cov: 156 ft: 277 corp: 4/8b lim: 4 exec/s: 0 rss: 31Mb L: 4/4 MS: 2 ShuffleBytes-CopyPart-    #13    NEW    cov: 161 ft: 282 corp: 5/12b lim: 4 exec/s: 0 rss: 31Mb L: 4/4 MS: 1 CrossOver-    #20    NEW    cov: 175 ft: 302 corp: 6/14b lim: 4 exec/s: 0 rss: 31Mb L: 2/4 MS: 2 ChangeByte-ChangeBinInt-    #24    NEW    cov: 177 ft: 305 corp: 7/16b lim: 4 exec/s: 0 rss: 31Mb L: 2/4 MS: 4 EraseBytes-ChangeBinInt-ChangeBit-InsertByte-        NEW_FUNC[1/1]: 0x604f00 in xmlFAReduceEpsilonTransitions /home/admin/libfuzzer-workshop/lessons/08/libxml2/xmlregexp.c:1777
    #28    NEW    cov: 206 ft: 336 corp: 8/19b lim: 4 exec/s: 0 rss: 31Mb L: 3/4 MS: 4 ShuffleBytes-ChangeByte-ChangeBit-CMP- DE: "\x01?"-    #32    NEW    cov: 209 ft: 343 corp: 9/21b lim: 4 exec/s: 0 rss: 31Mb L: 2/4 MS: 4 ManualDict-ShuffleBytes-ShuffleBytes-ChangeBit- DE: "
buffer(size + 1,
0);`对data进行转储，在样例不断增加的过程中vector超出了扩容的内存限制，从而抛出了crash，这并不是测试函数`xmlRegexpCompile`函数的问题。  
在另一个对`xmlReadMemory`的fuzz还在进行，学长说它fuzz这个函数花了十几个小时才出crash。
## lesson 09(the importance of seed corpus)
这次我们的目标为开源库libpng，首先对源码进行编译
    tar xzf libpng.tgz
    cd libpng
    # Disable logging via library build configuration control.
    cat scripts/pnglibconf.dfa | sed -e "s/option STDIO/option STDIO disabled/" \
    > scripts/pnglibconf.dfa.temp
    mv scripts/pnglibconf.dfa.temp scripts/pnglibconf.dfa   #这里把错误消息禁用
    # build the library.
    autoreconf -f -i
    #1