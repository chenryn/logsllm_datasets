237
453
74.1
358
1,085
0.9
4.2
23.7
144
Zeroconf
(K, T )
Consensus
(N, K)
WLAN
(N)
121
173
334
548
555
1,035
663
1,606
2.4
13.5
43.1
91.2
177
62.4
269
798
0.9
4.0
22.8
140
8.0
11
34
57
59
108
70
162
1.7
19.7
68.1
146
276
12.3
89.2
297
0.1
0.2
0.8
3.7
126
180
360
577
576
1,088
706
1,659
2.6
15.1
47.2
104
195
69.1
297
844
1.1
4.8
25.0
152
2.4
3.4
5.7
13.5
9.2
16.0
9.5
27.4
0.1
0.2
0.3
0.3
0.3
6.7
13.6
19.9
0.2
0.7
1.4
10.2
10.4
14.8
27.2
63.3
52.3
126
53.9
191
0.6
1.8
5.3
11.1
19.4
10.5
16.8
30.9
0.2
0.8
3.5
16.4
6.0
6.4
11.5
24.4
21.4
52.4
22.1
78.4
0.5
1.7
3.7
8.4
12.8
22.1
25.0
25.0
0.2
0.7
2.2
12.8
2.1
2.4
5.3
9.1
11.1
12.4
20.5
24.2
0.09
0.8
0.03
11.2
14.2
0.2
0.4
14.0
0.1
0.2
0.8
0.9
1.2
2.0
4.4
8.6
8.9
18.6
12.2
28.4
0.1
0.7
0.03
5.7
7.0
14.7
13.3
13.3
0.1
0.3
1.3
6.8
• a stack stack and hash table M, used during depth-ﬁrst
search, whose size is linear in the number of states.
Generation of Π for incremental veriﬁcation with BDDs
is not a simple task either. Algorithm 6 is not efﬁciently
implementable with BDDs due to the condition ∃C ∈
Π . Succ(Ci) ∩ C (cid:54)= ∅. It requires that, in each iteration
of the for loop in Algorithm 6, we scan the intermediate Π
to decide if Ci needs to be included in Π. For explicit-state
data structures, this is preferable because it saves memory
with very little time cost. However, it is better to generate
a (sparse) matrix T to store the relation between SCCs. An
entry T [i, j] = 1 means that Ci depends on Cj. Thus, if Cj
is included in Π, all Ci such that T [i, j] = 1 are included
in Π too. Note that T can also be encoded symbolically in
order to save space. This needs the following extra variables:
• A hash table M2 to store the root index of each SCC. In
the hash table, the root index is the key, as it is unique
among all SCCs, and the pointer to BDD for the SCC
is the value.
• An MTBDD M3 to store the root index (vlowlink)
of each state. A hash table can be used for the same
purpose, but would use more space than an MTBDD.
The adapted Tarjan algorithm, which we call the hybrid
Tarjan algorithm, begins with a call to the recursive function
hybrid tarjan, shown in Algorithm 7, from the initial state
with index = 1. The lines shaded grey are used to compute
T . In Algorithm 7, x and y are integers, v, v(cid:48) w are BDDs,
each of which represents a single state, and scc is a BDD
storing the set of states in the current SCC. M [v] represents
the corresponding value for the hash key v. Here we utilise
a feature of most BDD implementations (including CUDD,
which we use): equivalent BDDs are guaranteed to have the
same pointer in memory. Thus, the pointer is used as the
hash key for the BDD v. M [v] = N U LL means that the
key v cannot be found in the table and M [v] := N U LL
denotes that the key and its value are deleted from the hash
table.
In the original Tarjan algorithm, each state v is associated
with two values for the index of v and the minimum index
lowlink among the states in the SCC containing v. To
reduce memory consumption, states that have already been
identiﬁed in some SCCs are stored in allsccs, and the hash
table M2 only stores the attribute for the current state and
states in the stack. As indicated in [19], only one attribute
is actually needed in an elegant implementation. Indeed,
only the value lowlink is stored in the hash table. For
the current state v, its attributes are stored in the local
variables vindex and vlowlink; the value vlowlink from its
successor states is obtained from the return value of function
hybrid tarjan.
Theorem 6.1: The hybrid Tarjan algorithm partitions a
graph E into SCCs correctly.
Proof: The key idea is to prove that vlowlink is
computed correctly with respect to Algorithm 4 when the for
loop terminates. First of all, notice that M [v] and vlowlink
for the current state v in Algorithm 7 cannot be increased
once they are initialised. For each successor state v(cid:48), there
are three possibilities:
• v and v(cid:48) belong to different SCCs and v(cid:48) is not explored
before v. In this case, v(cid:48) is the root of the SCC it
belongs to. In Algorithm 4, this is characterised as
v.lowlink  0 ∧ vlowlink > x then
M [v] := x; vlowlink := x
if x = 0 then succ := succ ∪ {M3[v(cid:48)]} end if
else
vlowlink := 0; M [v] := N U LL; scc := {v}
while stack (cid:54)= ∅ ∧ M [T OP (stack )] ≥ vindex do
w := T OP (stack ); P OP (stack )
for all k such that T [M [w], k] = 1 do
T [M [w], k] := 0; T [vindex, k] := 1
end for
M [w] := N U LL; scc := scc ∪ {w}
M3[w] := vindex
25:
end while
allsccs := allsccs ∪ scc
26:
27:
28:
29:
30:
31: M2[vindex] := scc
32: else
33:
34: end if
35:
36: return vlowlink
P U SH(stack , v)
for all k ∈ succ do T [vindex, k] := 1 end for
v.lowlink in line 6. In Algorithm 7, x gets value zero
in line 8, as vlowlink for v(cid:48) is set to zero in line 20.
Hence, vlowlink for v does not change its value by the
if statement in line 13-15.
• v and v(cid:48) belong to different SCCs and v(cid:48) is explored
before v. In Algorithm 4, v(cid:48) is not in S because the SCC
it belongs to was deleted from S by the if statement in
line 11-17. Thus, the value of v.lowlink is not changed,
as v(cid:48).lowlink is deﬁned and v(cid:48) (cid:54)∈ S. In Algorithm 7,
this is characterised as M [v(cid:48)] = N U LL∧ v(cid:48) ∈ allsccs,
and therefore, vlowlink for v keeps its value.
• v and v(cid:48) belong to the same SCC, which indicates
that vlowlink := 0 in line 20 of Algorithm 7 is
not triggered (when processing v(cid:48)). Therefore, Algo-
rithms 7 and 4 behave in the same way: the condition
“v(cid:48).index is undeﬁned” in Algorithm 4 is equivalent to
M [v(cid:48)] = N U LL ∧ v(cid:48) (cid:54)∈ allsccs in Algorithm 7, and
v(cid:48) ∈ S is equivalent to M [v(cid:48)] (cid:54)= N U LL. Moreover,
we have x > 0 under both conditions, as vlowlink
is not reset to zero, and therefore the if statement in
lines 13-15 mimics the function min in Algorithm 4.
The SCCs computed by the hybrid Tarjan algorithm are
stored symbolically, which make it
impossible to adapt
Algorithm 3 to compute each iteration efﬁciently. This is
because it requires access to individual elements of the
SCCs, which is inefﬁcient for BDD-based data structures.
Our approach is to generate a corresponding explicit-state
data structure: a sparse matrix. This can be done relatively
efﬁciently and is then amenable either to value iteration,
or in fact solution via linear programming. Because, these
matrices are typically small, here we choose to solve an
LP problem (in our implementation, we use the ECLiPSe
Constraint Logic Programming system with the COIN-OR
CBC/CLP solver for this). We also employ an additional
optimisation: we treat trivial SCCs, containing a single state
without self-loops, as a special case. Probabilities for these
can be computed quickly and easily using value iteration on
the symbolic data structure.
It is also interesting to note that, to speed up SCC decom-
position using BDDs, it is preferable to perform precom-
putation before applying the hybrid Tarjan algorithm; this
is the opposite situation to the explicit-state data structure
case. This is because precomputation is more efﬁcient when
using BDDs and reduces the number of states that need to
be explored by the hybrid Tarjan algorithm.
A. Experimental Results
Table II shows experimental results for two of the three
previous case studies: WLAN and Consensus1. We compare
the time for computing maximum reachability probabilities
using the standard veriﬁcation engines in PRISM (“Sparse”,
“Hybrid”, and “MTBDD”), as well as for SCC-based veri-
ﬁcation using the hybrid Tarjan algorithm (“Hybrid Tarjan”
in the table). For the latter, we also report the time spent
generating SCCs by the hybrid Tarjan algorithm, which is
included in the total time. Model construction time is the
same for all cases and therefore not reported in the tables.
Since the performance of SCC decomposition by the hybrid
Tarjan algorithm is of independent interest, we compare it
with two BDD-based algorithms for SCC decomposition:
SCC-Find [9] and Lockstep [8]. The decomposition times
(without considering reverse topological order) using these
algorithms are given in column ‘BDD SCC comp.’.
1We omit the Zeroconf model from these experiments because some
SCCs are too large to solve using LP.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:42:25 UTC from IEEE Xplore.  Restrictions apply. 
368PERFORMANCE COMPARISON FOR THE HYBRID TARJAN ALGORITHM.
Table II
Model
Parameter
States
Sparse
Total
time (s)
Hybrid MTBDD
Total
time (s)
Total
time (s)
Hybrid Tarjan
SCC comp.
time (s)
Total
time (s)
BDD SCC comp.
SCC-Find
time (s)
Lockstep
time (s)
WLAN
(N)
Consensus
(N, K)
2
3
4