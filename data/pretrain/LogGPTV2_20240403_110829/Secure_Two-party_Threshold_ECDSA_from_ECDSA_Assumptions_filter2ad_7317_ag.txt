identiﬁcation and signature problems,” in CRYPTO, 1986.
[49] M. Fischlin, “Communication-efﬁcient non-interactive proofs of knowl-
edge with online extractors,” in CRYPTO, 2005.
[50] E. Waring, Philosophy Transactions, no. 69, pp. 59–67, 1779.
[51] M. Byali, A. Patra, D. Ravi, and P. Sarkar, “Efﬁcient, round-optimal,
universally-composable oblivious transfer and commitment scheme with
adaptive security,” Cryptology ePrint Archive, Report 2017/1165, 2017,
https://eprint.iacr.org/2017/1165.
[52] P. S. L. M. Barreto, B. David, R. Dowsley, K. Morozov, and A. C. A.
Nascimento, “A framework for efﬁcient adaptively secure composable
oblivious transfer in the rom,” Cryptology ePrint Archive, Report
2017/993, 2017, https://eprint.iacr.org/2017/993.
[53] R. Impagliazzo and M. Naor, “Efﬁcient cryptographic schemes provably
as secure as subset sum,” J. Cryptol., vol. 9, no. 4, Sep 1996.
[54] C. Stewart, T. Cockerill,
I. Foster, D. Hancock, N. Merchant,
E. Skidmore, D. Stanzione, J. Taylor, S. Tuecke, G. Turner, M. Vaughn,
and N. Gaffney, “Jetstream: a self-provisioned, scalable science and
engineering cloud environment,” in XSEDE Conference: Scientiﬁc
Advancements Enabled by Enhanced Cyberinfrastructure, 2015. [Online].
Available: http://dx.doi.org/10.1145/2792745.2792774
[55] M. Fischlin, “A note on security proofs in the generic model,” in
ASIACRYPT, 2000.
[56] J. Stern, D. Pointcheval, J. Malone-Lee, and N. P. Smart, “Flaws in
applying proof methodologies to signature schemes,” in Advances in
Cryptology — CRYPTO 2002, M. Yung, Ed. Berlin, Heidelberg: Springer
Berlin Heidelberg, 2002, pp. 93–110.
[57] A. W. Dent, “Adapting the weaknesses of the random oracle model to
the generic group model,” in Advances in Cryptology — ASIACRYPT
2002, Y. Zheng, Ed. Berlin, Heidelberg: Springer Berlin Heidelberg,
2002, pp. 100–109.
[58] D. Boneh and X. Boyen, “Short signatures without random oracles,”
in Advances in Cryptology - EUROCRYPT 2004, C. Cachin and J. L.
Camenisch, Eds. Berlin, Heidelberg: Springer Berlin Heidelberg, 2004,
pp. 56–73.
[59] D. Boneh, X. Boyen, and H. Shacham, “Short group signatures,” in
Advances in Cryptology – CRYPTO 2004, M. Franklin, Ed. Berlin,
Heidelberg: Springer Berlin Heidelberg, 2004, pp. 41–55.
APPENDIX A
ADDITIONAL FUNCTIONALITIES
In this section, we present the additional functionalities on
which our protocols rely. As before, we omit notation for
bookkeeping elements that we do not explicitly use such as
session IDs and party speciﬁers, which work in the ordinary
way; we also assume that if messages are received out of order
for a particular session, the functionality aborts. We begin
with a Selective-failure OT functionality, which differs from
995
the traditional OT functionality in that it allows the sender to
guess the receiver’s choice bit. If the sender’s guess is incorrect,
the functionality alerts both parties, and if the sender’s guess
is correct, then the sender is notiﬁed while the receiver is not.
Functionality 3. FSF-OT:
This functionality is parameterized by the group order q and
runs with two parties, a sender and a receiver.
Choose: On receiving (choose, ω) from the receiver, store
(choice, ω) if no such message exists in memory and send
(chosen) to the sender.
Guess: On receiving (guess, ˆω) from the sender, if ˆω ∈
{0, 1,⊥} and if (choice, ω) exists in memory, and if
(guess,·) does not exist in memory, then store (guess, ˆω)
in memory and do the following:
1) If ˆω = ⊥, send (no-cheat) to the receiver.
2) If ˆω = ω, send (cheat-undetected) to the sender and
(no-cheat) to the receiver.
3) Otherwise, send (cheat-detected) to both the sender
and receiver.
(cid:8)
transfer, α0, α1
Transfer: On receiving
from the sender,
if α0 ∈ Zq and α1 ∈ Zq, and if (complete) does not
exist in memory, and if there exist in memory messages
(choice, ω) and (guess, ˆω) such that ˆω = ⊥ or ˆω = ω, then
send (message, αω) to the receiver and store (complete) in
memory.
(cid:9)
What follows is a Correlated OT-extension functionality
that allows arbitrarily many Correlated OT instances to be
executed in batches of size (cid:13). For each batch, the receiver
inputs a vector of choice bits ω ∈ {0, 1}(cid:4), following which the
sender inputs a vector of correlations α ∈ Z(cid:4)
q. The functionality
samples (cid:13) random pads from Zq and sends them to the sender.
To the receiver it sends only the the pads if the sender’s
corresponding choice bits were 0, or the sum of the pads and
their corresponding correlations if the sender’s corresponding
choice bits were 1. Note that this functionality is nearly identical
to the one presented by Keller et al. [34], but we add an
initialization phase and the ability to perform extensions (each
batch of extensions indexed by a fresh extension index extid)
only after the initialization has been performed.
Functionality 4. F (cid:4)
This functionality is parameterized by the group order q and
the batch size (cid:13). It runs with two parties, a sender S and a
receiver R, who may participate in the Init phase once, and
the Choice and Transfer phases as many times as they wish.
Init: Wait for message (ready) from the sender and receiver.
Store (ready) in memory and send (init-complete) to
the receiver.
Choice: On receiving (choose, extid, ω) from the receiver,
if (choice, extid,·) with the same extid does not exist in
memory, and if (ready) does exist in memory, and if ω is
of the correct form, then send (chosen) to the sender and
store (choice, extid, ω) in memory.
COTe:
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:37:03 UTC from IEEE Xplore.  Restrictions apply. 
Transfer: On receiving (transfer, extid, α) from the sender,
if there exists a message of the form (choice, extid, ω) in
memory with the same extid, and if (complete, extid) does
not exist in memory, and if α is of the correct form, then:
1) Sample a vector of random pads tS ← Z(cid:4)
2) Send (pads, tS) to the sender.
3) Compute {tRi}i∈[1,(cid:4)]
4) Send (padded-correlation, tR) to the receiver.
5) Store (complete, extid) in memory.
..= {tSi + ωi · αi}i∈[1,(cid:4)].
q
Finally, we give functionalities for zero-knowledge proofs-
of-knowledge-of-discrete-logarithm. The ﬁrst corresponds to
an ordinary proof, whereas the second allows the prover to
commit to a proof that will later be revealed. Note that these
are both standard constructions, except that they operate with
groups of parties, and all parties aside from the prover receive
veriﬁcation.
Functionality 5. F RDL
ZK :
The functionality is parameterized by the group G of order
q generated by G, and runs with a group of parties P such
that |P| = n.
Proof: On receiving (prove, x, X) from Pi where x ∈ Zq
and X ∈ G, if X = x · G, then send (accept, i, X) to all
parties in P. Otherwise, send (fail, i, X) to all parties in
P.
Functionality 6. F RDL
The functionality is parameterized by the group G of order
q generated by G, and runs with a group of parties P such
that |P| = n.
Commit Proof: On receiving (com-proof, x, X) from Pi,
where x ∈ Zq and X ∈ G, store (com-proof, x, X) and
send (committed, i) to all parties in P.
Decommit Proof: On receiving (decom-proof) from Pi, if
(com-proof, x, X) exists in memory, then:
1) If X = x · G, send (accept, i, X) to all parties in P.
2) Otherwise send (fail, i, X) all parties in P.
Com-ZK:
APPENDIX B
EQUIVALENCE OF FUNCTIONALITIES
We argue that our functionality FSampledECDSA (Functional-
ity 2) does not grant any additional power to Alice by showing
that an adversary who is able to forge a signature by observing
the signatures produced by accessing FSampledECDSA can be
used to forge an ECDSA signature in the standard Existential
Unforgeability experiment that deﬁnes security for signature
schemes (see Katz and Lindell [36] for a complete description
of the experiment). We are only concerned with arguing that
an ideal adversary interacting with FSampledECDSA as Alice is
unable to forge a signature because Bob’s view in his ideal
interaction with FSampledECDSA is identical to his view when
interacting with FECDSA (Functionality 1).
Our reduction is in the Generic Group Model, which
was introduced by Shoup [47]. While there are well-known
criticisms of this model [55]–[57], it has also shown itself to
be useful in proving the security of well-known constructions
such as Short Signatures [58] and Short Group Signatures [59].
Furthermore, this is the model in which ECDSA itself is proven
secure [37].
In this model an adversary can perform group operations only
by querying a Group Oracle G(·). More speciﬁcally, queries
of the following types are answered by the Oracle:
1) (Group Elements) When the Oracle receives an integer
x ∈ Zq, it replies with an encoding of the group element
corresponding to this integer. Returned encodings are
random, but the Oracle is required to be consistent when
the same integer is queried repeatedly. This corresponds
to the scalar multiplication operation with the generator
in an ECDSA group: Y ..= x · G.
2) (Group Law) When the Oracle receives a tuple of the form
(r, s,G(x),G(y)), it replies with a random encoding of the
group element given by G(r· x + s· y). As before, outputs
must be consistent. This corresponds to a fused multiply-
add operation in an ECDSA group: Z ..= (r · X + s · Y ),
where X = x · G and Y = y · G.
As usual in this model, the reduction itself will control the
Group Oracle, and in particular it has the ability to program
the Oracle to respond to speciﬁc queries with speciﬁc outputs.
F A
SampledECDSA is used to denote an Oracle version of
the FSampledECDSA functionality accessible only as Alice. In
addition to the previously deﬁned FSampledECDSA behavior, this
Oracle returns the signature σsigid
to Alice upon receiving
,·,·). This models the realistic scenario wherein
(sign, sigid
Alice obtains the output signatures, which we wish to capture
in our reduction, even though the functionality does not output
the signature to her on its own.
Claim B.1. If there exists a probabilistic polynomial time
algorithm A in the Generic Group Model with access to the
F A
SampledECDSA oracle, such that
(cid:6)
Verifypk (m, σ) = 1 ∧ m /∈ Q :
(cid:7)
≥ p(κ)
(cid:7)
(cid:6)
Pr
F A
SampledECDSA (pk)
(m, σ) ← A
where Q is the set of messages for which A sends queries of the
form (new,·, m,·) to the F A
SampledECDSA Oracle, and where the
probability is taken over the randomness of the FSampledECDSA
functionality, then there exists an adversary A such that
(pk)
(m, σ) ← ASignsk
Verifypk (m, σ) = 1 ∧ m /∈ Q :
(·)
≥ p(κ) − poly(κ)
−κ
Pr
pk,sk
where Q is the set of messages for which A queries the signing
oracle Signsk(·).
Proof sketch. Our reduction is structured in an intuitive way.
For readability we refer to A as Alice in its interactions with
F A
SampledECDSA, and we note that A can only interact with Alice
on behalf of the F A
SampledECDSA Oracle. First, A forces Alice
to accept the same public key that it received externally in the
forgery game, and then, for each query Alice makes to her
2
996
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:37:03 UTC from IEEE Xplore.  Restrictions apply. 
not exist in memory, respond with σsigid
,i and store
(sig-complete, sigid) in memory.
∗
6) Once Alice outputs a forged signature sig
, output this
signature.
Notice that this reduction fails if Alice queries G on an
,i,A for any sigid and any i before A programs it,
index kΔ
sigid
or if she queries it on an index ksigid
for any sigid at any time.
By a standard argument, this event occurs with probability
poly(κ)/2κ. If these queries are not made, the reduction is
perfect and the claim follows.
B
F A
SampledECDSA oracle, A can request a corresponding signature
from the Signsk oracle under the same secret key. The nonce
Rsig in the signature received from Signsk will not match the
nonce R that Alice instructs the F A
SampledECDSA oracle to use.
However, A can take advantage of the fact that F A
SampledECDSA
is allowed to offset the nonce R by a random value kΔ of its
choosing. A sets kΔ so that kΔ · G is exactly the difference
between R and Rsig. Computing kΔ directly would require A
to know the discrete log of the Rsig value it was given by the
Signsk oracle; instead, A uses its ability to program the Group
Oracle to ensure that G(kΔ) is the difference between R and
the corresponding Rsig. We describe ASignsk
(·) formally below.
Algorithm 4. ASignsk
1) Answer any query G(x) as x · G, and any query
G(r, s,G(x),G(y)) as r·G(x)+s·G(y) unless otherwise
explicitly programmed at those points.
(·) (pk):
2) Send (public-key, pk) to Alice.
3) When a message of the form (new, sigid
· G, store (sig-message, sigid
received from Alice, sample ksigid
DB
memory, and reply to Alice with
..= ksigid
, m, B) is
← Zq, calculate
B ) in
, m, ksigid
B
B
(nonce-shard, sigid
, DB)
(cid:8)
(cid:9)
4) When a message of the form
nonce, sigid
is received from Alice, if (sig-message, sigid
exists in memory:
a) Query the Signing Oracle with the message m to
, i, Ri,sigid
, m, ksigid
B )
obtain a signature
(cid:21)
(cid:22)
sigsigid
,i, Rsig
sigid
,i
= σsigid
,i ← Signsk (m)
Note that the oracle will only return the x-coordinate
of Rsig
,i, but recovering the point itself is easy. Store
sigid
(sig-signature, sigid
,i) in memory.
, σsigid
b) Sample kΔ
sigid
,i ← Zq, then compute
K Δ
sigid
− Ri,sigid
and program the Group Oracle such that
..= Rsig
i,sigid
,i
(cid:22)
(cid:21)
G
kΔ
sigid
= K Δ
sigid
,i
c) Compute
kΔ
sigid
,i,A = (1/ksigid
B ) · kΔ
sigid
and program the Group Oracle such that
B ) · K Δ
,i,A) to Alice.
,i,A) = (1/ksigid
d) Send (offset, sigid
G(kΔ
, kΔ
sigid
sigid
sigid
,i
5) When a message of the form (sign, sigid
received from Alice, if (sig-signature, sigid
and (sig-message, sigid
kA · ksigid
, i, kA) is
,i)
B ) exist in memory, and
, but (sig-complete, sigid) does
· G = Rsig
isigid
, m, ksigid
, σsigid
B
997
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:37:03 UTC from IEEE Xplore.  Restrictions apply.