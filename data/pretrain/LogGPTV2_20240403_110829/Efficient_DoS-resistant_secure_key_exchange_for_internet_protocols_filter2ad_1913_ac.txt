; SR[gr; NR; gi; NI ]gKe
Ka ;
R ! I :
0
(1)
(2)
(3)
(4)
]gKe
Ka
As in JFKi, the keys used to protect Messages (3) and (4), Ke
and Ka, are respectively computed as Hgir (NI ; NR; "1") and
Hgir (NI ; NR; "2"). The session key passed to IPsec (or some
other application), Kir, is Hgir (NI ; NR; "0").
Both parties send their identities encrypted and authenticated un-
der Ke and Ka respectively, providing both parties with identity
protection against passive eavesdroppers. In addition, the party that
ﬁrst reveals its identity is the initiator. This way, the responder is
required to reveal its identity only after it veriﬁes the identity of the
initiator. This guarantees active identity protection to the responder.
We remark that it is essentially impossible, under current tech-
nology assumptions, to have a two-round-trip protocol that pro-
vides DoS protection for the responder, passive identity protection
for both parties, and active identity protection for the initiator. An
informal argument proceeds as follows:
if DoS protection is in
place, then the responder must be able to send his ﬁrst message
before he computes any shared key; This is so since computing
a shared key is a relatively costly operation in current technology.
This means that the responder cannot send his identity in the second
message, without compromising his identity protection against pas-
sive eavesdroppers. This means that the responder’s identity must
be sent in the fourth (and last) message of the protocol. Conse-
quently, the initiator’s identity must be sent before the responder’s
identity is sent.
2.5 Rejection Messages
Instead of sending Messages (2) or (4), the responder can send
a ‘rejection’ instead. For Message (2), this rejection can only be
on the grounds that he does not accept the group that the initiator
has used for her exponential. Accordingly, the reply should indicate
what groups are acceptable. Since Message (2) already contains the
ﬁeld grpinfoR (which indicates what groups are acceptable), no ex-
plicit rejection message is needed. (For efﬁciency’s sake, the group
information could also be in the responder’s long-lived certiﬁcate,
which the initiator may already have.)
Message (4) can be a rejection for several reasons, including
lack of authorization for the service requested. But it could also
be caused by the initiator requesting cryptographic algorithms that
the responder regards as inappropriate, given the requester (initia-
tor), the service requested, and possibly other information available
to the responder, such as the time of day or the initiator’s location
as indicated by the network. In these cases, the responder’s reply
should list acceptable cryptographic algorithms, if any. The initia-
tor would then send a new Message (3), which the responder would
accept anew; again, the responder does not create any state until af-
ter a successful Message (3) receipt.
3. WHAT JFK AVOIDS
By intent, JFK does not do certain things. It is worth enumer-
ating them, if only to stimulate discussion about whether certain
protocol features are ever appropriate. In JFK, the “missing” fea-
tures were omitted by design, in the interests of simplicity.
3.1 Multiple Authentication Options
The most obvious “omission” is any form of authentication other
than by certiﬁcate chains trusted by the each party. We make no
provisions for shared secrets, token-based authentication, certiﬁ-
cate discovery, or explicit cross-certiﬁcation of PKIs. In our view,
these are best accomplished by outboard protocols. Initiators that
wish to rely on any form of legacy authentication can use the pro-
tocols being deﬁned by the IPSRA[41] or SACRED[1, 14] IETF
working groups. While these mechanisms do add extra round trips,
the expense can be amortized across many JFK negotiations. Sim-
ilarly, certiﬁcate chain discovery (beyond the minimal capabilities
implicit in IDI and IDR) should be accomplished by protocols de-
ﬁned for that purpose. By excluding the protocols from JFK, we
can exclude them from our security analysis; the only interface be-
tween the two is a certiﬁcate chain, which by deﬁnition is a stand-
alone secure object.
We also eliminate negotiation generally, in favor of ukases issued
by the responder. The responder is providing a service; it is enti-
tled to set its own requirements for that service. Any cryptographic
primitive mentioned by the responder is acceptable; the initiator
can choose any it wishes. We thus eliminate complex rules for se-
lecting the “best” choice from two different sets. We also eliminate
the need that state be kept by the responder; the initiator can either
accept the responder’s desires or restart the protocol.
3.2 Phase II and Lack Thereof
JFK rejects the notion of two different phases. As will be dis-
cussed in Section 5, the practical beneﬁts of quick mode are limited.
Furthermore, we do not agree that frequent rekeying is necessary.
If the underlying block cipher is sufﬁciently limited as to bar long-
term use of any one key, the proper solution is to replace that cipher.
For example, 3DES is inadequate for protection of very high speed
transmissions, because the probability of collision in CBC mode
becomes too high after encryption of 232 plaintext blocks. Using
AES instead of 3DES solves that problem without complicating the
key exchange.
Phase II of IKE is used for several things; we do not regard any
of them as necessary. One is generating the actual keying material
used for security associations. It is expected that this will be done
several times, to amortize the expense of the Phase I negotiation. A
second reason for this is to permit very frequent rekeying. Finally,
it permits several separate security associations to be set up, with
different parameters.
We do not think these apply. First, with modern ciphers such as
AES, there is no need for frequent key changes. AES keys are long
enough that brute force attacks are infeasible. Its longer block size
protects against CBC limitations when encrypting many blocks.
We also feel that JFK is efﬁcient enough that avoiding the over-
head of a full key exchange is not required. Rather than adding new
SAs to an existing Phase I SA, we suggest that a full JFK exchange
be initiated instead. We note that the initiator can also choose to
reuse its exponential, it if wishes to trade perfect forward secrecy
for computation time. If state already exists between the initiator
and the responder, they can simply check that the Difﬁe-Hellman
52exponentials are the same; if so, the result of the previous expo-
nentiation can be reused. As long as one of the two parties uses
a fresh nonce in the new protocol exchange, the resulting crypto-
graphic keys will be fresh and not subject to a related key (or other,
similar) attack. As we discuss in Section 3.3, a similar performance
optimization can be used on the certiﬁcate-chain validation.
A second major reason for Phase II is dead-peer detection. IPsec
gateways often need to know if the other end of a security associ-
ation is dead, both to free up resources and to avoid “black holes.”
In JFK, this is done by noting the time of the last packet received.
A peer that wishes to elicit a packet may send a “ping.” Such hosts
may decline any proposed security associations that do not permit
such “ping” packets.
A third reason for Phase II is general security association control,
and in particular SA deletion. While such a desire is not wrong,
we prefer not to burden the basic key exchange mechanism with
extra complexity. There are a number of possible approaches. Ours
requires that JFK endpoints implement the following rule: a new
negotiation that speciﬁes an SPD identical to the SPD of an existing
SA overwrites it. To some extent, this removes any need to delete
an SA if black hole avoidance is the concern; simply negotiate a
new SA. To delete an SA without replacing it, negotiate a new SA
with a null ciphersuite.
3.3 Rekeying
When a negotiated SA expires (or shortly before it does), the
JFK protocol is run again. It is up to the application to select the
appropriate SA to use among many valid ones. In the case of IPsec,
implementations should switch to using the new SA for outgoing
trafﬁc, but would still accept trafﬁc on the old SA (as long as that
SA has not expired).
To address performance considerations, we should point out that,
properly implemented, rekeying only requires one signature and
one veriﬁcation operation in each direction, if both parties use the
same Difﬁe-Hellman exponentials (in which case, the cached result
can be reused) and certiﬁcates: the receiver of an ID payload com-
pares its hash with those of any cached ID payloads received from
the same peer. While this is an implementation detail, a natural lo-
cation to cache past ID payloads is along with already established
SAs (a convenient fact, as rekeying will likely occur before exist-
ing SAs are allowed to expire, so the ID information will be readily
available). If a match is found and the result has not “expired” yet,
then we do not need to re-validate the certiﬁcate chain. A previ-
ously veriﬁed certiﬁcate chain is considered valid for the shortest
of its CRL re-validate time, certiﬁcate expiration time, OCSP result
validity time, etc. For each certiﬁcate chain, there is one such value
associated (the time when one of its components becomes invalid
or needs to be checked again). Notice that an implementation does
not need to cache the actual ID payloads; all that is needed is the
hash and the expiration time.
That said, if for some reason fast rekeying is needed for some
application domain, it should be done by a separate protocol.
4. TOWARDS A PROOF OF SECURITY
This section very brieﬂy overviews our security analysis of the
JFK protocol. Full details are deferred to the full analysis paper.
There are currently two main approaches to analyzing security
of protocols. One is the formal-methods approach, where the cryp-
tographic components of a protocol are modeled by “ideal boxes”
and automatic theorem-veriﬁcation tools are used to verify the va-
lidity of the high-level design (assuming ideal cryptography). The
other is the cryptographic approach, which accounts for the fact
that cryptographic components are imperfect and may potentially
interact badly with each other. Here, security of protocols is proven
based on some underlying computational intractability assumptions
(such as the hardness of factoring large numbers, computing dis-
crete logarithms modulo a large prime, or inverting a cryptographic
hash function). The formal-methods approach, being automated,
has the advantage that it is less susceptible to human errors and
oversights in analysis. On the other hand, the cryptographic ap-
proach provides better soundness, since it considers the overall se-
curity of the protocol, and in particular accounts for the imperfec-
tions of the cryptographic components.
Our analysis follows the cryptographic approach. We welcome
any additional analysis.
In particular, analysis based on formal
methods would be a useful complement to the analysis described
here.
We separate the analysis of the “core security” of the protocol
(which is rather tricky) from the analysis of added security fea-
tures such as DoS protection and identity protection (which is much
more straightforward). The rest of this section concentrates on the
“core security” of the protocol. DoS and identity protection were
discussed in previous sections.
4.1 Core security
We use the modeling and treatment of [7], which in turn is based
on [6]; see there for more references and comparisons with other
analytical work. Very roughly, the “core security” of a key ex-
change protocol boils down to two requirements:
1. If party A generates a key KA associated with a session-
identiﬁer s and peer identity B, and party B generates a key
KB associated with the same session identiﬁer s and peer A,
then KA = KB.
2. No attacker can distinguish between the key exchanged in
a session between two unbroken parties and a truly random
value. This holds even if the attacker has total control over
the communication, can invoke multiple sessions, and is told
the keys generated in all other sessions.
We stress that this is only a rough sketch of the requirement.
For full details see [7, 8]. We show that both JFKi and JFKr sat-
isfy the above requirement. When these protocols are run with
perfect forward secrecy, the security is based on a standard in-
tractability assumption of the DH problem, plus the security of
the signature scheme and the security of MAC as a pseudo-random
function. When a party reuses its DH value, the security is based
on a stronger intractability assumption involving both DH and the
HMAC pseudo-random function.
We ﬁrst analyze the protocols in the restricted case where the
parties do not reuse the private DH exponents for multiple sessions;
this is the bulk of the work. Here, the techniques for demonstrating
the security of the two protocols are quite different.
4.1.1
JFKi:
The basic cryptographic core of this protocol is the same as the
ISO 9798-3 protocol, which was analyzed and proven secure in [7].
This protocol can be brieﬂy summarized as follows:
A ! B : A; NA; ga
B ! A : B; NB; gb; SB[NA; NB; ga; gb; A]
A ! B : SA[NA; NB; ga; gb; B]
(1)
(2)
(3)
A salient point about this protocol is that each party signs, in ad-
dition to the nonces and the two public DH exponents, the identity
53of the peer. If the peer’s identity is not signed then the protocol is
completely broken. JFKi inherits the same basic core security. In
addition, JFKi adds a preliminary cookie mechanism for DoS pro-
tection (which results in adding one ﬂow to the protocol and having
the responder in JFKi play the role of A), and encrypts the last two
messages in order to provide identity protection for the initiator.
Finally, we note that JFKi enjoys the following additional prop-
erty. Whenever a party P completes a JFKi exchange with peer
Q, it is guaranteed that Q has initiated an exchange with P and is
aware of P ’s existence. This property is not essential in the context
of IPsec (indeed, JFKr does not enjoy this property). Nonetheless,
it may be of use in other contexts.
4.1.2
JFKr:
The basic cryptographic core of this protocol follows the design
of the SIGMA protocol [28] (which also serves as the basis to the
signature mode of IKE). SIGMA was analyzed and proven secure
in [8]. This basic protocol can be brieﬂy summarized as follows:
A ! B : NA; ga
B ! A : B; NB; gb; SB[NA; NB; ga; gb];
HKa (NA; NB; B)
A ! B : A; SA[NA; NB; ga; gb];