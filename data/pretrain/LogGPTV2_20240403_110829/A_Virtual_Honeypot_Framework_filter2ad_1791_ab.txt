work traﬃc. While a subsystem runs as an external
process, an internal service is a Python script that
executes within Honeyd.
Internal services require
even less resources than subsystems but can only
accept connections and not initiate them.
Honeyd contains a simpliﬁed TCP state machine.
The three-way handshake for connection establish-
ment and connection teardown via FIN or RST are
fully supported, but receiver and congestion window
management is not fully implemented.
UDP datagrams are passed directly to the appli-
cation. When the framework receives a UDP packet
for a closed port, it sends an ICMP port unreach-
able message unless this is forbidden by the conﬁg-
ured personality.
In sending ICMP port unreach-
able messages, the framework allows network map-
ping tools like traceroute to discover the simulated
network topology.
In addition to establishing a connection to a lo-
cal service, the framework also supports redirection
of connections. The redirection may be static or it
can depend on the connection quadruple (source ad-
dress, source port, destination address and destina-
tion port). Redirection lets us forward a connection
request for a service on a virtual honeypot to a ser-
vice running on a real server. For example, we can
redirect DNS requests to a proper name server. Or
we can reﬂect connections back to an adversary, e.g.
just for fun we might redirect an SSH connection
back to the originating host and cause the adver-
sary to attack her own SSH server. Evil laugh.
Before a packet is sent to the network, it is pro-
cessed by the personality engine. The personality
engine adjusts the packet’s content so that it appears
to originate from the network stack of the conﬁgured
Figure 2: This diagram gives an overview of Honeyd’s
architecture.
Incoming packets are dispatched to the
correct protocol handler. For TCP and UDP, the con-
ﬁgured services receive new data and send responses
if necessary. All outgoing packets are modiﬁed by the
personality engine to mimic the behavior of the conﬁg-
ured network stack. The routing component is optional
and used only when Honeyd simulates network topolo-
gies.
3.2 Architecture
Honeyd’s architecture consists of several compo-
nents: a conﬁguration database, a central packet dis-
patcher, protocol handlers, a personality engine, and
an optional routing component; see Figure 2.
Incoming packets are processed by the central
packet dispatcher.
It ﬁrst checks the length of an
IP packet and veriﬁes the packet’s checksum. The
framework is aware of the three major Internet pro-
tocols: ICMP, TCP and UDP. Packets for other pro-
tocols are logged and silently discarded.
Before it can process a packet, the dispatcher
must query the conﬁguration database to ﬁnd a hon-
eypot conﬁguration that corresponds to the destina-
tion IP address. If no speciﬁc conﬁguration exists, a
default template is used. Given a conﬁguration, the
packet and corresponding conﬁguration is handed to
the protocol speciﬁc handler.
The ICMP protocol handler supports most ICMP
requests. By default, all honeypot conﬁgurations re-
spond to echo requests and process destination un-
reachable messages. The handling of other requests
depends on the conﬁgured personalities as described
in Section 3.3.
For TCP and UDP, the framework can establish
Fingerprint IRIX 6.5.15m on SGI O2
TSeq(Class=TD%gcd=<104%SI=<1AE%IPID=I%TS=2HZ)
T1(DF=N%W=EF2A%ACK=S++%Flags=AS%Ops=MNWNNTNNM)
T2(Resp=Y%DF=N%W=0%ACK=S%Flags=AR%Ops=)
T3(Resp=Y%DF=N%W=EF2A%ACK=O%Flags=A%Ops=NNT)
T4(DF=N%W=0%ACK=O%Flags=R%Ops=)
T5(DF=N%W=0%ACK=S++%Flags=AR%Ops=)
T6(DF=N%W=0%ACK=O%Flags=R%Ops=)
T7(DF=N%W=0%ACK=S%Flags=AR%Ops=)
PU(Resp=N)
Figure 3: An example of an Nmap ﬁngerprint that spec-
iﬁes the network stack behavior of a system running
IRIX.
operating system.
3.3 Personality Engine
Adversaries commonly run ﬁngerprinting tools
like Xprobe [1] or Nmap [9] to gather information
about a target system. It is important that honey-
pots do not stand out when ﬁngerprinted. To make
them appear real to a probe, Honeyd simulates the
network stack behavior of a given operating system.
We call this the personality of a virtual honeypot.
Diﬀerent personalities can be assigned to diﬀerent
virtual honeypots. The personality engine makes a
honeypot’s network stack behave as speciﬁed by the
personality by introducing changes into the protocol
headers of every outgoing packet so that they match
the characteristics of the conﬁgured operating sys-
tem.
The framework uses Nmap’s ﬁngerprint database
as its reference for a personality’s TCP and UCP
behavior; Xprobe’s ﬁngerprint database is used as
reference for a personality’s ICMP behavior.
Next, we explain how we use the information pro-
vided by Nmap’s ﬁngerprints to change the charac-
teristics of a honeypot’s network stack.
Each Nmap ﬁngerprint has a format similar to
the example shown in Figure 3. We use the string
after the Fingerprint token as the personality name.
The lines after the name describe the results for nine
diﬀerent tests that Nmap performs to determine the
operating system of a remote host. The ﬁrst test
is the most comprehensive. It determines how the
network stack of the remote operating system cre-
ates the initial sequence number (ISN) for TCP SYN
segments. Nmap indicates the diﬃculty of predict-
ing ISNs in the Class ﬁeld. Predictable ISNs post a
security problem because they allow an adversary to
Figure 4: The diagram shows the structure of the TCP
header. Honeyd changes options and other parameters
to match the behavior of network stacks.
spoof connections [2]. The gcd and SI ﬁeld provide
more detailed information about the ISN distribu-
tion. The ﬁrst test also determines how IP identiﬁ-
cation numbers and TCP timestamps are generated.
The next seven tests determine the stack’s behav-
ior for packets that arrive on open and closed TCP
ports. The last test analyzes the ICMP response
packet to a closed UDP port.
The framework keeps state for each honeypot.
The state includes information about ISN genera-
tion, the boot time of the honeypot and the current
IP packet identiﬁcation number. Keeping state is
necessary so that we can generate subsequent ISNs
that follow the distribution speciﬁed by the ﬁnger-
print.
Nmap’s ﬁngerprinting is mostly concerned with
an operating system’s TCP implementation. TCP
is a stateful, connection-oriented protocol that pro-
vides error recovery and congestion control
[20].
TCP also supports additional options, not all of
which implemented by all systems. The size of the
advertised receiver windows varies between imple-
mentations and is used by Nmap as part of the ﬁn-
gerprint.
When the framework sends a packet for a newly
established TCP connection, it uses the Nmap ﬁn-
gerprint to see the initial window size. After a con-
nection has been established, the framework adjusts
the window size according to the amount of buﬀered
data.
If TCP options present in the ﬁngerprint have
been negotiated during connection establishment,
3.4 Routing Topology
arbitrary virtual
Honeyd simulates
routing
topologies to deceive adversaries and network map-
ping tools. This goal is diﬀerent from NS-based sim-
ulators [8] which try to faithfully reproduce network
behavior in order to understand it. We simulate
just enough to deceive adversaries. When simulat-
ing routing topologies, it is not possible to employ
Proxy ARP to direct the packets to the Honeyd host.
Instead, we need to conﬁgure routers to delegate net-
work address space to our host.
Normally, the virtual routing topology is a tree
rooted where packets enter the virtual routing topol-
ogy. Each interior node of the tree represents a
router and each edge a link that contains latency
and packet loss characteristics. Terminal nodes of
the tree correspond to networks. The framework
supports multiple entry points that can exit in par-
allel. An entry router is chosen by the network space
for which it is responsible.
To simulate an asymmetric network topology, we
consult the routing tables when a packet enters the
framework and again when it leaves the framework;
see Figure 2.
In this case, the network topology
resembles a directed acyclic graph1.
When the framework receives a packet, it ﬁnds
the correct entry routing tree and traverses it, start-
ing at the root until it ﬁnds a node that contains the
destination IP address of the packet. Packet loss and
latency of all edges on the path are accumulated to
determine if the packet is dropped and how long its
delivery should be delayed.
The framework also decrements the time to live
(TTL) ﬁeld of the packet for each traversed router. If
the TTL reaches zero, the framework sends an ICMP
time exceeded message with the source IP address of
the router that causes the TTL to reach zero.
For network simulations, it is possible to inte-
grate real systems into the virtual routing topology.
When the framework receives a packet for a real sys-
tem, it traverses the topology until it ﬁnds a virtual
router that is directly responsible for the network
space that the real machine belongs to. The frame-
work sends an ARP request if necessary to discover
the hardware address of the system, then encapsu-
lates the packet in an Ethernet frame. Similarly,
the framework responds with ARP replies from the
corresponding virtual router when the real system
sends ARP requests.
1Although it is possible to conﬁgure routing loops, this is
normally undesirable and should be avoided.
Figure 5: The diagram shows the structure of an ICMP
port unreachable message. Honeyd introduces errors
into the quoted IP header to match the behavior of
network stacks.
then Honeyd inserts them into the response packet.
The framework uses the ﬁngerprint to determine the
frequency with which TCP timestamps are updated.
For most operating systems, the update frequency is
2 Hz.
Generating the correct distribution of initial se-
quence numbers is tricky. Nmap obtains six ISN
samples and analyzes their consecutive diﬀerences.
Nmap recognizes several ISN generation types: con-
stant diﬀerences, diﬀerences that are multiples of a
constant, completely random diﬀerences, time de-
pendent and random increments. To diﬀerentiate
between the latter two cases, Nmap calculates the
greatest common divisor (gcd) and standard devia-
tion for the collected diﬀerences.
The framework keeps track of the last ISN that
was generated by each honeypot and its generation
time. For new TCP connection requests, Honeyd
uses a formula that approximates the distribution
described by the ﬁngerprint’s gcd and standard de-
viation. In this way, the generated ISNs match the
generation class that Nmap expects for the particu-
lar operating system.
For the IP header, Honeyd adjusts the generation
of the identiﬁcation number. It can either be zero,
increment by one, or random.
For ICMP packets, the personality engine uses
the PU test entry to determine how the quoted
IP header should be modiﬁed using the associated
Xprobe ﬁngerprint for further information. Some
operating systems modify the incoming packet by
changing ﬁelds from network to host order and as
a result quote the IP and UDP header incorrectly.
Honeyd introduces these errors if necessary. Figure 5
shows an example for an ICMP destination unreach-
able message. The framework also supports the gen-
eration of other ICMP messages, not described here
due to space considerations.
route entry 10.0.0.1
route 10.0.0.1 link 10.0.0.0/24
route 10.0.0.1 add net 10.1.0.0/16 10.1.0.1 latency 55ms loss 0.1
route 10.0.0.1 add net 10.2.0.0/16 10.2.0.1 latency 20ms loss 0.1
route 10.1.0.1 link 10.1.0.0/24
route 10.2.0.1 link 10.2.0.0/24
create routerone
set routerone personality "Cisco 7206 running IOS 11.1(24)"
set routerone default tcp action reset
add routerone tcp port 23 "scripts/router-telnet.pl"
create netbsd
set netbsd personality "NetBSD 1.5.2 running on a Commodore Amiga (68040 processor)"
set netbsd default tcp action reset
add netbsd tcp port 22 proxy $ipsrc:22
add netbsd tcp port 80 "scripts/web.sh"
bind 10.0.0.1 routerone
bind 10.1.0.2 netbsd
bind 10.1.0.3 to fxp0
Figure 6: An example conﬁguration for Honeyd. The conﬁguration language is a context-free grammar. This
example creates a virtual routing topology and deﬁnes two templates: a router that can be accessed via telnet
and a host that is running a web server. A real system is integrated into the virtual routing topology at IP address
10.1.0.3.
We can split the routing topology using GRE
to tunnel networks. This allows us to load bal-
ance across several Honeyd installations by delegat-
ing parts of the address space to diﬀerent Honeyd
hosts. Using GRE tunnels,
it is also possible to
delegate networks that belong to separate parts of
the address space to a single Honeyd host. For the
reverse route, an outgoing tunnel is selected based
both on the source and the destination IP address.
An example of such a conﬁguration is described in
Section 5.
3.5 Conﬁguration
A virtual honeypot is conﬁgured with a template,
a reference for a completely conﬁgured computer sys-
tem. New templates are created with the create com-
mand.
The set and add commands change the conﬁgu-
ration of a template. The set command assigns a
personality from the Nmap ﬁngerprint ﬁle to a tem-
plate. The personality determines the behavior of
the network stack, as discussed in Section 3.3. The
set command also deﬁnes the default behavior for
the supported network protocols. The default be-
havior is one of the following values: block, reset,
or open. Block means that all packets for the speci-
ﬁed protocol are dropped by default. Reset indicates
that all ports are closed by default. Open means
that they are all open by default. The latter set-