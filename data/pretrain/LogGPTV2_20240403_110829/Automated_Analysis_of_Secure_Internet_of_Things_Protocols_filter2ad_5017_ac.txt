lemma protocol ﬂow. It veriﬁes that Alice performs Send A
at time @i and Bob receives and sends back at time @j.
Alice receives Bob’s secret at time @k. To verify the secrecy
of two secret messages secA and secB, we use the action
fact Secret(). Lemma message secret DY conﬁrms that the
two secrets are secure when no-one reveals the PSK. When
there is a possibility of key disclosure, the message secrecy is
veriﬁed as insecure under the eCK model, which is deﬁned
in lemma message secret eCK.
4 RESTRICTIONS OF SYMBOLIC
SECURITY ANALYSIS
Although symbolic analysis can model and track standard-
based protocols eﬃciently, introducing new algorithms is a
challenging task. We present our ﬁndings in modelling new
algorithms such as JPAKE. Analysing new algorithms such
as JPAKE is necessary since it has been included in many IoT
242rule Register pk:
1.[ Fr(~ltkA) ] -->
2.[ !Ltk($A,~ltkA), !Pk($A,pk(~ltkA)), Out(pk(~ltkA))]
rule Key distribution:
1.[ Fr(~key)]-->[ !PSK($A, ~key)]
rule Reveal psk:
1.[!PSK(A,key)]--[Reveal(A)]->[Out(key)]
rule A Send:
1.let msgA =  in
2.[ !PSK(A, keyA), Fr(~secA)]
3.--[Send A(A,msgA)]->
4.[Out()]
rule Role B:
1.let msgA = 
2. msgB =  in
3.[!PSK(B,keyB),In(),Fr(~secB)]
4.--[ Recv B(B, msgA), Secret(secA), Send B(B, msgB),
Eq(hmac(msgA,keyA), hmac(msgA,keyB))]->
5.[Out()]
rule A Receive:
1.let msgB =  in
2.[ In(), !PSK(A, keyA)]
3.--[Recv A(A,msgB), Secret(secB), Eq(hmac(msgB,keyB),
hmac(msgB,keyA))]->[]
lemma protocol ﬂow: exists-trace
”Ex A B SA SB #i #j #k. Send A(A,SA)@i &
Recv B(B,SA) @j & Send B(B,SB)@j & Recv A(A,SB)@k
& i 
not (Ex #j. K(s)@j)”
lemma message secret eCK: all-traces
”All s #i. Secret(s) @i ==> not (Ex #j. K(s)@j)”
Figure 6: Tamarin implementation of LoRa alliance
PSK with security properties.
protocols such as Google Nest’s THREAD commissioning pro-
tocol. The (D)TLS handshake is currently under development
for use in the IoT [2, 7, 8], too.
We brieﬂy explain the JPAKE protocol. Two parties Alice
and Bob ﬁrst agree on g ∈ G ∈ Zp. They share a low-entropy
password s ∈ [1, q − 1]. Alice generates two ephemeral values
x1, x2 ∈ Zq, then transfers gx1 , gx3 with a ZKP for x1, x2.
Similarly, Bob generates two ephemeral values x3, x4 ∈ Zq,
then transfers gx3 , gx4 with a ZKP for x3, x4. After verify-
ing the ZKP, Alice transfers α = g(x1+x3+x4)·x2·s with ZKP
for x2 · s. Similarly, Bob transfers β = g(x1+x2+x3)·x4·s with
a ZKP for x4 · s. After verifying the ZKP, Alice computes
KA = (β/gx2·x4·s)x2 = g(x1+x3)·x2·x4·s. Similarly Bob com-
putes KB = (α/gx2·x4·s)x4 = g(x1+x3)·x2·x4·s. They establish
the same key using a hash function h, as h(KA) = h(KB).
Security Result
Protocol
D-Y
JPAKE
eCK
JPAKE
JPAKE
PFS
CoAP-PSK D-Y
CoAP-PSK eCK
CoAP-PKC eCK
CoAP-PKC PFS
MQTT
D-Y
eCK
MQTT
D-Y
Sigfox
PFS
Sigfox
D-Y
LoRa
LoRa
eCK
proof
proof
proof
proof
attack on message secrecy
proof
attack on key establishment
proof
proof
proof
attack on key establishment
proof
attack on message secrecy
Table 2: Overview of our case studies. For all proto-
cols, authentication, key establishment, and message
secrecy are proven secure under the D-Y model.
When modelling protocols using JPAKE, one encounters
a critical problem.
4.1 Uniﬁcation Problem
Symbolic security analysis of JPAKE is not a trivial task for
existing formal security tools since they cannot support the
multiplication and addition of DH groups [28]. This is known
as the uniﬁcation problem, where multiplication and addition
of DH group cause an NP-complete decidability problem.
Let us consider how uniﬁcation works in symbolic analysis
tools. To prove the claim that the adversary never learns
the term x, symbolic analysis tools assume the adversary did
learn the term and then attempt to ﬁnd a contradiction. This
is done by searching backwards from the adversary learning
the term and seeing what rules from the protocol (or the
adversary) rule set could have been applied to get there. The
primary question we want to investigate is whether two terms
can be uniﬁed, and if so, what substitutions will unify them.
If we want to unify xy = 2z where x,y,z are variables and
we are operating in Zp, the cyclic group of order p, then
it is proven that there are at most ﬁnitely many uniﬁers
(substitutions that make the two terms identical) such as
(x = 2, y = z), (x = 1, y = 2z), (z = 2−1, x = y−1). However,
the equality (gagb)c = (ga)c(gb)c or gagb = g(a+b) cannot
be uniﬁed [41]. There are inﬁnitely many uniﬁers for DH
groups and ﬁnding such uniﬁers reduces down to the problem
of solving Diophantine Equations, which is known to be
undecidable [32]. This is a general open problem and research
topic in all symbolic veriﬁcation tools based on uniﬁcation.
To model the JPAKE protocol correctly, it requires mul-
tiplication and addition of DH groups such as gx1gx3 =
g(x1+x3), as Alice generates her key as g(x1+x3)·x4·x2·s. Since
the uniﬁcation problem is NP-complete, there is no known
eﬃcient algorithm to support the required features. This
means some parts of JPAKE such as g(x1+x3) and Schnorr
ZKP cannot be included in the model since they require
multiplication or addition of DH groups. Although using the
243symbolic analysis approach for emerging IoT protocols is use-
ful, introducing new algorithms with multiplication/addition
of DH group such as JPAKE is not possible.
To model JPAKE and protocol suites that use it, we pro-
pose two approaches. Note that our approaches are not a
theoretical contribution to this open research problem, but
rather a practical approach to imitate the required function-
ality.
rule Password distribution:
1.[ Fr( pass)]-->
2.[ !Alice($A,~pass), !Bob($B,~pass)]
rule RoleA 1:
1.let Y1 = ‘g’ ˆ~x1
2. Y2 = ‘g’ ˆ~x2 in
3.[ !Alice(A,pass), Fr(~x1), Fr(~x2)]-->
4.[Out(), ST1 A(A,pass,~x2)]
rule RoleB 1:
1.let Y3 = ‘g’ ˆ~x3
2. Y4 = ‘g’ ˆ~x4
3. KB = h() in
4.[!Bob(B,pass), Fr(~x3),Fr(~x4),In()]
5. --[Sym Key B(B,KB)]->
6.[Out()]
rule RoleA 2:
1.let KA=h() in
2.[ In(), ST1 A(A,pass,x2)]
3.--[Sym Key A(A,KA)]-> []
lemma key establishment: exists-trace
”Ex A B key #i #j. Sym Key B(B, key) @i &
Sym Key A(A,key) @j & i 
2.[!Alice($A,~pass,~nr ˆ~pass),!Bob($B,~pass, ~nr ˆ~pass)]
rule Reveal password:
1.[!Alice(A,key,pass)]--[Reveal(A)]->[Out(pass)]
rule Role A:
1.[ Fr(~secA), !Alice(A, pass, keyA)]--
2.[Send(A,~secA), Key A(A,keyA), Secret(~secA)]->
3.[Out(), !JPAKE(A,keyA)]
rule Role B:
1.let secB = sdec(msg,keyB) in
2.[In(), !Bob(B, pass, keyB)]--
3.[Key B(B,keyB), Recv(B,secB), Secret(secB)]->
4.[ST B(B,pass,keyB), !JPAKE(B, keyB)]
Figure 8: JPAKE as built-in primitive.
and gx2·x4. It is of no consequence if these internal param-
eters are used in other protocol blocks, either. We deﬁne
lemma key establishment to verify that there is a session key
establishment between Alice and Bob. Our approximation
model is presented in Fig. 7 and can be used in the analysis
of protocol suites.
Built-in primitive. A simple, straightforward, yet pow-
erful approach is to provide JPAKE as a built-in primitive
under perfect cryptography similar to PKC, signature, hash,
and symmetric encryption. Abdalla et al. [19] thoroughly
proved the security of JPAKE under a rigorous key estab-
lishment model. Providing JPAKE as a built-in primitive
similar to PKC cannot be the ultimate solution when other
blocks reuse some JPAKE parameters. However, this ap-
proach can simplify the model. Similar to other primitives,
JPAKE can be as simple as invoking predeﬁned persistent
facts (!JPAKE()), the same with other predeﬁned primitives
such as !PSK(), !Ltk(), and !Pk(). We implemented a JPAKE
built-in primitive as Fig. 8 so it can be readily used.
We believe our two approaches can be eﬀective in modelling
complex algorithms in practical settings.
4.2 Case Study
We present our case studies by formally analysing MQTT and
CoAP. Although CoAP and MQTT share similar design prin-
ciples for constrained IoT applications, their approaches to
security and implementations are quite diﬀerent. In terms of
lightweight protocol design, CoAP’s security depends purely
on Datagram TLS (DTLS) [8].
MQTT. MQTT recommends the use of the latest TLS
architecture with X.509 certiﬁcates. To minimize the overhead
of the TLS handshake, MQTT recommends the use of TLS
session resumption via either the session ID or session ticket
methods. We model the TLS 1.2 session resumption protocol
from MQTT’s oﬃcial open source release. This will be a
valuable basis since there are many MQTT variations and
modes such as MQTT for Sensor Networks (MQTT-SN) [16].
244Tamarin veriﬁed that MQTT’s TLS 1.2 session resumption
implementation is solid, where the PSK/PKC resumption has
no attacks. For some applications that require PFS, we also
implemented a lemma that can verify PFS in the resumption
process.
CoAP The fundamental design philosophy of DTLS is
to ‘reconstruct’ TLS over datagram packets as closely as
possible, minimizing new security inventions and maximizing
the amount of TLS infrastructure reuse. DTLS addresses two
problems that normal TLS would have due to the unreliability
of datagram transport. First, in normal TLS with stream
ciphers, records depend on each other, and hence decryption
of individual records is not possible. Second, TLS uses implicit
sequence numbers to protect against replays and reordering.
DTLS solves this by avoiding stream ciphers completely
and by using explicit sequence numbers. It also employs a
stateless cookie technique to protect against DoS attacks.
As cryptography is perfect in the modeller, modelling DTLS
thus has to take only two aspects into account, compared to
TLS 1.2: 1) a MAC in each record with an explicit sequence
number, and 2) the stateless cookieour . Our DTLS model
can serve as a base to model other IoT protocols that are