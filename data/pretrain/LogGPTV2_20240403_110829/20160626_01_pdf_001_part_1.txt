# PostgreSQL 内核扩展入门培训

讲师：digoal

## 目录
- PostgreSQL 流程图
- 如何分析代码瓶颈
- 如何自定义C UDF
- 如何自定义数据类型
- 如何自定义操作符
- 开放索引接口介绍
- 如何自定义索引
- PostgreSQL 内核扩展接口总结
- PostgreSQL 插件打包与发布
- GPU，FPGA 与 PostGIS 的深度整合
- pg_strom 介绍
- 目标案例

## PostgreSQL 流程图
- [PostgreSQL Backend Flow Chart](https://wiki.postgresql.org/wiki/Backend_flow_chart)
- [PostgreSQL Developer Backend](https://www.postgresql.org/developer/backend/)

### 主要组件：
- **Bootstrap**：初始化数据库集群。
- **Main**：程序入口。
- **Postmaster**：监听连接请求，并创建子进程处理这些请求。
- **Libpq**：通信库，用于客户端和服务器之间的通信。
- **TCOP (The Command Processor)**：解包并分发请求到相应的模块，是后端进程的入口。
- **Parser**：进行词法分析，生成优化器或执行器所需的结构。
- **Rewrite**：处理视图（view）和规则（rule）。
- **Optimizer**：基于执行计划优化算法，生成执行树。
- **Executor**：执行查询。
- **Commands**：处理DDL（数据定义语言）和DCL（数据控制语言）相关的命令。
- **Catalog**：存储元数据。
- **Access**：负责索引、堆表和事务管理。
  - 公共代码, 索引, 堆表, 事务
  - (common, gin, gist, hash, heap, index, nbtree, spgist, transam)
- **Storage**：提供存储接口。
  - 缓存, 文件, FSM, 内部进程通信, 大对象, 锁, 页, 磁盘
  - (buffer, file, freespace, ipc, large_object, lmgr, page, smgr)
- **Utils**：工具包，包含多种实用功能。
  - (adt build-in数据类型相关, cache 元数据, 函数, 类型等缓存)
  - (error, fmgr, hash, init, mb, misc, mmgr, resowner, sort, time)
  - (错误处理, 内部/外部自定义函数接口,内部公用的hash算法库如扫描cache, 初始化数据库, 多字节字符, context内存管理, 资源owner跟踪, 内部公用排序算法库, MVCC相关row可见性管理)
- **Include, Lib, Snowball, Tsearch**：提供各种头文件和库支持。
- **Port**：平台兼容性相关。
- **Regex**：正则表达式支持。
- **Replication**：流复制相关。

## 如何分析代码瓶颈
- **OProfile**
  - 官方网站: http://oprofile.sourceforge.net/
  - 示例命令:
    ```bash
    mkdir /tmp/optest ; cd /tmp/optest
    operf -l postgres -B 2GB -c port=$i -c listen_addresses='0.0.0.0' -c synchronous_commit=off -c full_page_writes=off -c wal_buffers=1900MB -c wal_writer_delay=10ms -c max_connections=100 -c max_wal_size=4GB -c log_destination='csvlog' -c logging_collector=on -D $PGDATA -k $PGDATA
    ```
  - 进行一些压测
- **Perf**
  - 使用 `perf top` 查看性能热点

## 如何自定义 C UDF
- **C 与 SQL 的类型对应关系**
- **如何获取 SQL 函数的参数**
- **如何从 C 函数返回结果给 SQL 函数**
- **示例**
  - 自定义普通 UDF
  - 自定义聚合函数
  - 自定义窗口函数

### 类型对应关系
- **SQL 类型** 对应 **C 类型**
  - 头文件中定义了详细的类型转换宏，但不一定准确，请参考具体实现。

### 获取参数宏 (Datum -> C 类型)
- **插件新建类型相关 arg MACRO**
  - 例如 `contrib/hstore/hstore.h` 中定义的 `PG_GETARG_HS(x)` 等。
- **全文检索相关类型 arg MACRO**
  - 例如 `src/include/tsearch/ts_utils.h` 中定义的 `PG_GETARG_TSQUERYSIGN(n)` 等。
- **其他相关类型 arg MACRO**
  - 例如 `src/include/utils/timestamp.h` 中定义的 `PG_GETARG_TIMESTAMP(n)` 等。

### 返回结果宏 (C 类型 -> Datum)
- **插件新建类型相关 result MACRO**
  - 例如 `contrib/cube/cubedata.h` 中定义的 `PG_RETURN_NDBOX(x)` 等。
- **全文检索相关类型 result MACRO**
  - 例如 `src/include/tsearch/ts_utils.h` 中定义的 `PG_RETURN_TSQUERYSIGN(X)` 等。
- **其他相关类型 result MACRO**
  - 例如 `src/include/utils/timestamp.h` 中定义的 `PG_RETURN_TIMESTAMP(x)` 等。

### 示例
#### 复合类型参数
```c
#include "postgres.h"
#include "fmgr.h"
#include "executor/executor.h" // for GetAttributeByName()

#ifdef PG_MODULE_MAGIC
PG_MODULE_MAGIC;
#endif

PG_FUNCTION_INFO_V1(c_overpaid);

Datum
c_overpaid(PG_FUNCTION_ARGS)
{
    HeapTupleHeader t = PG_GETARG_HEAPTUPLEHEADER(0); // 获取参数1 composite Datum转成复合类型对应的C类型
    int32 limit = PG_GETARG_INT32(1); // 获取参数2
    bool isnull;
    Datum salary;

    salary = GetAttributeByName(t, "salary", &isnull); // 获取composite中的某个元素的Datum
    if (isnull)
        PG_RETURN_BOOL(false);
    
    /* Alternatively, we might prefer to do PG_RETURN_NULL() for null salary. */
    PG_RETURN_BOOL(DatumGetInt32(salary) > limit); // Datum 转ctype进行比较, 通过PG_RETURN*输出Datum
}
```

#### 记录类型参数
```c
Datum
c_reverse_tuple(PG_FUNCTION_ARGS)
{
    HeapTupleHeader th; // 复合类型对应的C类型
    int32 a, b, c; // 复合类型对应的三个子类型
    bool aisnull, bisnull, cisnull; // 是否为空
    TupleDesc resultTupleDesc; // 返回record值的描述类型
    Oid resultTypeId; // 返回值的OID（如果有的话）
    // 实现细节省略
}
```

以上是关于 PostgreSQL 内核扩展的一些基础知识和示例。希望对你有所帮助！