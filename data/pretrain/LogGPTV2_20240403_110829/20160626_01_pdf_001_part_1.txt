内核扩展
PostgreSQL
入门培训
digoal
目录
• PostgreSQL flow chart
• 如何分析代码瓶颈
• 如何自定义C UDF
• 如何自定义数据类型
• 如何自定义操作符
• 开放索引接口介绍
• 如何自定义索引
• PostgreSQL 内核扩展接口总结
• PostgreSQL 插件打包、发布
• GPU，FPGA 如何与 PostGIS深度整合
• pg_strom介绍
• 目标CASE
PostgreSQL flow chart
• https://wiki.postgresql.org/wiki/Backend_flow
chart
• https://www.postgresql.org/developer/backe
nd/
bootstrap : 初始化数据库集群
main : 程序入口
postmaster : 监听，fork
libpq : 通信库
tcop : 解包，分发请求到适当的模块，backend process入口
parser : 词法分析(输出优化器或执行器需要的结构)
rewrite : view, rule
optimizer : 基于执行计划优化算法，生成执行树
executor : 执行QUERY
commands : DDL, DCL相关
catalog : 元数据
access : 索引、堆表、事务相关
(common, gin, gist, hash, heap, index, nbtree, spgist, transam)
(公共代码, 索引, 堆表, 事务)
storage : 存储接口
(buffer, file, freespace, ipc, large_object, lmgr, page, smgr)
(缓存, 文件, FSM, 内部进程通信, 大对象, 锁, 页, 磁盘)
utils : 工具包
(adt build-in数据类型相关, cache 元数据, 函数, 类型等缓存)
(error, fmgr, hash, init, mb, misc, mmgr, resowner, sort, time)
(错误处理, 内部/外部自定义函数接口,内部公用的hash算法库
如扫描cache, 初始化数据库, 多字节字符, context内存管理,
资源owner跟踪, 内部公用排序算法库,
MVCC相关row可见性管理)
include, lib, snowball, tsearch :
port : 平台兼容性相关
regex : 正则
replication : 流复制相关
如何分析代码瓶颈
• OProfile
– http://oprofile.sourceforge.net/
– mkdir /tmp/optest ; cd /tmp/optest ; operf -l postgres -B 2GB -c
port=$i -c listen_addresses='0.0.0.0' -c synchronous_commit=off
-c full_page_writes=off -c wal_buffers=1900MB -c
wal_writer_delay=10ms -c max_connections=100 -c
max_wal_size=4GB -c log_destination='csvlog' -c
logging_collector=on -D $PGDATA -k $PGDATA
– 进行一些压测
• perf
– perf top
如何分析代码瓶颈
• OProfile
• cd /tmp/optest; opreport -l -f -w -x -t 1
如何分析代码瓶颈
• OProfile
• opreport -l -f -g -w -x -t 1 /opt/pgsql/bin/postgres
如何分析代码瓶颈
• OProfile
• opannotate -x -s -t 1 /opt/pgsql/bin/postgres -i HeapTupleSatisfiesVacuum|less
如何分析代码瓶颈
• perf top
如何自定义
C UDF
• C与 SQL的类型对应关系
• 如何获取 SQL函数的 args
• 如何从 C函数返回结果给 SQL函数
• 示例
• 自定义普通 UDF
• 自定义聚合函数
• 自定义窗口函数
类型对应关系
• SQL
• -
• C
• 类型
• 对应
• 关系
• 头文件
• 不一定准确
获取
args macro(Datum -> c type)
• contrib/*/*.h 插件新建类型相关 arg MACRO
– contrib/hstore/hstore.h:#define PG_GETARG_HS(x) DatumGetHStoreP(PG_GETARG_DATUM(x))
– contrib/cube/cubedata.h:#define PG_GETARG_NDBOX(x)
DatumGetNDBOX(PG_GETARG_DATUM(x))
– contrib/ltree/ltree.h:#define PG_GETARG_LTREE(x)
((ltree*)DatumGetPointer(PG_DETOAST_DATUM(PG_GETARG_DATUM(x))))
– contrib/ltree/ltree.h:#define PG_GETARG_LTREE_COPY(x)
((ltree*)DatumGetPointer(PG_DETOAST_DATUM_COPY(PG_GETARG_DATUM(x))))
– contrib/ltree/ltree.h:#define PG_GETARG_LQUERY(x)
((lquery*)DatumGetPointer(PG_DETOAST_DATUM(PG_GETARG_DATUM(x))))
– contrib/ltree/ltree.h:#define PG_GETARG_LQUERY_COPY(x)
((lquery*)DatumGetPointer(PG_DETOAST_DATUM_COPY(PG_GETARG_DATUM(x))))
– contrib/ltree/ltree.h:#define PG_GETARG_LTXTQUERY(x)
((ltxtquery*)DatumGetPointer(PG_DETOAST_DATUM(PG_GETARG_DATUM(x))))
– contrib/ltree/ltree.h:#define PG_GETARG_LTXTQUERY_COPY(x)
((ltxtquery*)DatumGetPointer(PG_DETOAST_DATUM_COPY(PG_GETARG_DATUM(x))))
– contrib/isn/isn.h:#define PG_GETARG_EAN13(n) PG_GETARG_INT64(n)
– contrib/intarray/_int.h:#define PG_GETARG_QUERYTYPE_P(n)
DatumGetQueryTypeP(PG_GETARG_DATUM(n))
– contrib/intarray/_int.h:#define PG_GETARG_QUERYTYPE_P_COPY(n)
DatumGetQueryTypePCopy(PG_GETARG_DATUM(n))
获取
args macro(Datum -> c type)
• 全文检索相关类型 arg MACRO
– src/include/tsearch/ts_utils.h:#define
PG_GETARG_TSQUERYSIGN(n)
DatumGetTSQuerySign(PG_GETARG_DATUM(n))
– src/include/tsearch/ts_type.h:#define PG_GETARG_TSVECTOR(n)
DatumGetTSVector(PG_GETARG_DATUM(n))
– src/include/tsearch/ts_type.h:#define
PG_GETARG_TSVECTOR_COPY(n)
DatumGetTSVectorCopy(PG_GETARG_DATUM(n))
– src/include/tsearch/ts_type.h:#define PG_GETARG_TSQUERY(n)
DatumGetTSQuery(PG_GETARG_DATUM(n))
– src/include/tsearch/ts_type.h:#define
PG_GETARG_TSQUERY_COPY(n)
DatumGetTSQueryCopy(PG_GETARG_DATUM(n))
获取
args macro(Datum -> c type)
• 相关类型 arg MACRO
– src/include/utils/timestamp.h:#define PG_GETARG_TIMESTAMP(n) DatumGetTimestamp(PG_GETARG_DATUM(n))
– src/include/utils/timestamp.h:#define PG_GETARG_TIMESTAMPTZ(n) DatumGetTimestampTz(PG_GETARG_DATUM(n))
– src/include/utils/timestamp.h:#define PG_GETARG_INTERVAL_P(n) DatumGetIntervalP(PG_GETARG_DATUM(n))
– src/include/utils/timestamp.h:#define PG_GETARG_TIMESTAMP(n) DatumGetTimestamp(PG_GETARG_DATUM(n))
– src/include/utils/timestamp.h:#define PG_GETARG_TIMESTAMPTZ(n) DatumGetTimestampTz(PG_GETARG_DATUM(n))
– src/include/utils/timestamp.h:#define PG_GETARG_INTERVAL_P(n) DatumGetIntervalP(PG_GETARG_DATUM(n))
– src/include/utils/nabstime.h:#define PG_GETARG_ABSOLUTETIME(n)
DatumGetAbsoluteTime(PG_GETARG_DATUM(n))
– src/include/utils/nabstime.h:#define PG_GETARG_RELATIVETIME(n) DatumGetRelativeTime(PG_GETARG_DATUM(n))
– src/include/utils/nabstime.h:#define PG_GETARG_TIMEINTERVAL(n) DatumGetTimeInterval(PG_GETARG_DATUM(n))
– src/include/utils/date.h:#define PG_GETARG_DATEADT(n) DatumGetDateADT(PG_GETARG_DATUM(n))
– src/include/utils/date.h:#define PG_GETARG_TIMEADT(n) DatumGetTimeADT(PG_GETARG_DATUM(n))
– src/include/utils/date.h:#define PG_GETARG_TIMETZADT_P(n) DatumGetTimeTzADTP(PG_GETARG_DATUM(n))
– src/include/utils/xml.h:#define PG_GETARG_XML_P(n) DatumGetXmlP(PG_GETARG_DATUM(n))
– src/include/utils/varbit.h:#define PG_GETARG_VARBIT_P(n) DatumGetVarBitP(PG_GETARG_DATUM(n))
– src/include/utils/varbit.h:#define PG_GETARG_VARBIT_P_COPY(n) DatumGetVarBitPCopy(PG_GETARG_DATUM(n))
– src/include/utils/uuid.h:#define PG_GETARG_UUID_P(X) DatumGetUUIDP(PG_GETARG_DATUM(X))
– src/include/utils/numeric.h:#define PG_GETARG_NUMERIC(n) DatumGetNumeric(PG_GETARG_DATUM(n))
– src/include/utils/numeric.h:#define PG_GETARG_NUMERIC_COPY(n) DatumGetNumericCopy(PG_GETARG_DATUM(n))
– src/include/utils/acl.h:#define PG_GETARG_ACLITEM_P(n) DatumGetAclItemP(PG_GETARG_DATUM(n))
– src/include/utils/acl.h:#define PG_GETARG_ACL_P(n) DatumGetAclP(PG_GETARG_DATUM(n))
– src/include/utils/acl.h:#define PG_GETARG_ACL_P_COPY(n) DatumGetAclPCopy(PG_GETARG_DATUM(n))
• 相关类型 arg MACRO
– src/include/utils/geo_decls.h:#define PG_GETARG_POINT_P(n) DatumGetPointP(PG_GETARG_DATUM(n))
– src/include/utils/geo_decls.h:#define PG_GETARG_LSEG_P(n) DatumGetLsegP(PG_GETARG_DATUM(n))
– src/include/utils/geo_decls.h:#define PG_GETARG_PATH_P(n) DatumGetPathP(PG_GETARG_DATUM(n))
– src/include/utils/geo_decls.h:#define PG_GETARG_PATH_P_COPY(n) DatumGetPathPCopy(PG_GETARG_DATUM(n))
– src/include/utils/geo_decls.h:#define PG_GETARG_LINE_P(n) DatumGetLineP(PG_GETARG_DATUM(n))
– src/include/utils/geo_decls.h:#define PG_GETARG_BOX_P(n) DatumGetBoxP(PG_GETARG_DATUM(n))
– src/include/utils/geo_decls.h:#define PG_GETARG_POLYGON_P(n) DatumGetPolygonP(PG_GETARG_DATUM(n))
– src/include/utils/geo_decls.h:#define PG_GETARG_POLYGON_P_COPY(n)
DatumGetPolygonPCopy(PG_GETARG_DATUM(n))
– src/include/utils/geo_decls.h:#define PG_GETARG_CIRCLE_P(n) DatumGetCircleP(PG_GETARG_DATUM(n))
– src/include/utils/inet.h:#define PG_GETARG_INET_P(n) DatumGetInetP(PG_GETARG_DATUM(n))
– src/include/utils/inet.h:#define PG_GETARG_INET_PP(n) DatumGetInetPP(PG_GETARG_DATUM(n))
– src/include/utils/inet.h:#define PG_GETARG_MACADDR_P(n) DatumGetMacaddrP(PG_GETARG_DATUM(n))
– src/include/utils/array.h:#define PG_GETARG_ARRAYTYPE_P(n) DatumGetArrayTypeP(PG_GETARG_DATUM(n))
– src/include/utils/array.h:#define PG_GETARG_ARRAYTYPE_P_COPY(n)
DatumGetArrayTypePCopy(PG_GETARG_DATUM(n))
– src/include/utils/array.h:#define PG_GETARG_EXPANDED_ARRAY(n)
DatumGetExpandedArray(PG_GETARG_DATUM(n))
– src/include/utils/array.h:#define PG_GETARG_EXPANDED_ARRAYX(n, metacache) \
– src/include/utils/array.h: DatumGetExpandedArrayX(PG_GETARG_DATUM(n), metacache)
– src/include/utils/array.h:#define PG_GETARG_ANY_ARRAY(n) DatumGetAnyArray(PG_GETARG_DATUM(n))
– src/include/utils/pg_lsn.h:#define PG_GETARG_LSN(n) DatumGetLSN(PG_GETARG_DATUM(n))
– src/include/utils/cash.h:#define PG_GETARG_CASH(n) DatumGetCash(PG_GETARG_DATUM(n))
– src/include/utils/rangetypes.h:#define PG_GETARG_RANGE(n)
DatumGetRangeType(PG_GETARG_DATUM(n))
– src/include/utils/rangetypes.h:#define PG_GETARG_RANGE_COPY(n)
DatumGetRangeTypeCopy(PG_GETARG_DATUM(n))
– src/include/utils/jsonb.h:#define PG_GETARG_JSONB(x) DatumGetJsonb(PG_GETARG_DATUM(x))
获取
args macro(Datum -> c type)
• 相关类型 arg MACRO
– src/include/fmgr.h:#define PG_GETARG_DATUM(n) (fcinfo->arg[n])
– src/include/fmgr.h:#define PG_GETARG_INT32(n) DatumGetInt32(PG_GETARG_DATUM(n))
– src/include/fmgr.h:#define PG_GETARG_UINT32(n) DatumGetUInt32(PG_GETARG_DATUM(n))
– src/include/fmgr.h:#define PG_GETARG_INT16(n) DatumGetInt16(PG_GETARG_DATUM(n))
– src/include/fmgr.h:#define PG_GETARG_UINT16(n) DatumGetUInt16(PG_GETARG_DATUM(n))
– src/include/fmgr.h:#define PG_GETARG_CHAR(n) DatumGetChar(PG_GETARG_DATUM(n))
– src/include/fmgr.h:#define PG_GETARG_BOOL(n) DatumGetBool(PG_GETARG_DATUM(n))
– src/include/fmgr.h:#define PG_GETARG_OID(n) DatumGetObjectId(PG_GETARG_DATUM(n))
– src/include/fmgr.h:#define PG_GETARG_POINTER(n) DatumGetPointer(PG_GETARG_DATUM(n))
– src/include/fmgr.h:#define PG_GETARG_CSTRING(n) DatumGetCString(PG_GETARG_DATUM(n))
– src/include/fmgr.h:#define PG_GETARG_NAME(n) DatumGetName(PG_GETARG_DATUM(n))
– src/include/fmgr.h:#define PG_GETARG_FLOAT4(n) DatumGetFloat4(PG_GETARG_DATUM(n))
– src/include/fmgr.h:#define PG_GETARG_FLOAT8(n) DatumGetFloat8(PG_GETARG_DATUM(n))
– src/include/fmgr.h:#define PG_GETARG_INT64(n) DatumGetInt64(PG_GETARG_DATUM(n))
– src/include/fmgr.h:#define PG_GETARG_RAW_VARLENA_P(n) ((struct varlena *) PG_GETARG_POINTER(n))
– src/include/fmgr.h:#define PG_GETARG_VARLENA_P(n) PG_DETOAST_DATUM(PG_GETARG_DATUM(n))
– src/include/fmgr.h:#define PG_GETARG_VARLENA_PP(n)
PG_DETOAST_DATUM_PACKED(PG_GETARG_DATUM(n))
– src/include/fmgr.h:#define PG_GETARG_BYTEA_P(n) DatumGetByteaP(PG_GETARG_DATUM(n))
• 相关类型 arg MACRO
– src/include/fmgr.h:#define PG_GETARG_BYTEA_PP(n) DatumGetByteaPP(PG_GETARG_DATUM(n))
– src/include/fmgr.h:#define PG_GETARG_TEXT_P(n) DatumGetTextP(PG_GETARG_DATUM(n))
– src/include/fmgr.h:#define PG_GETARG_TEXT_PP(n) DatumGetTextPP(PG_GETARG_DATUM(n))
– src/include/fmgr.h:#define PG_GETARG_BPCHAR_P(n) DatumGetBpCharP(PG_GETARG_DATUM(n))
– src/include/fmgr.h:#define PG_GETARG_BPCHAR_PP(n) DatumGetBpCharPP(PG_GETARG_DATUM(n))
– src/include/fmgr.h:#define PG_GETARG_VARCHAR_P(n) DatumGetVarCharP(PG_GETARG_DATUM(n))
– src/include/fmgr.h:#define PG_GETARG_VARCHAR_PP(n)
DatumGetVarCharPP(PG_GETARG_DATUM(n))
– src/include/fmgr.h:#define PG_GETARG_HEAPTUPLEHEADER(n)
DatumGetHeapTupleHeader(PG_GETARG_DATUM(n))
– src/include/fmgr.h:#define PG_GETARG_BYTEA_P_COPY(n) DatumGetByteaPCopy(PG_GETARG_DATUM(n))
– src/include/fmgr.h:#define PG_GETARG_TEXT_P_COPY(n) DatumGetTextPCopy(PG_GETARG_DATUM(n))
– src/include/fmgr.h:#define PG_GETARG_BPCHAR_P_COPY(n)
DatumGetBpCharPCopy(PG_GETARG_DATUM(n))
– src/include/fmgr.h:#define PG_GETARG_VARCHAR_P_COPY(n)
DatumGetVarCharPCopy(PG_GETARG_DATUM(n))
– src/include/fmgr.h:#define PG_GETARG_HEAPTUPLEHEADER_COPY(n)
DatumGetHeapTupleHeaderCopy(PG_GETARG_DATUM(n))
– src/include/fmgr.h:#define PG_GETARG_BYTEA_P_SLICE(n,a,b)
DatumGetByteaPSlice(PG_GETARG_DATUM(n),a,b)
– src/include/fmgr.h:#define PG_GETARG_TEXT_P_SLICE(n,a,b)
DatumGetTextPSlice(PG_GETARG_DATUM(n),a,b)
– src/include/fmgr.h:#define PG_GETARG_BPCHAR_P_SLICE(n,a,b)
DatumGetBpCharPSlice(PG_GETARG_DATUM(n),a,b)
– src/include/fmgr.h:#define PG_GETARG_VARCHAR_P_SLICE(n,a,b)
DatumGetVarCharPSlice(PG_GETARG_DATUM(n),a,b)
返回结果
macro(c type -> Datum)
• contrib/cube/cubedata.h:#define PG_RETURN_NDBOX(x) PG_RETURN_POINTER(x)
• contrib/isn/isn.h:#define PG_RETURN_EAN13(x) PG_RETURN_INT64(x)
• src/include/access/gin.h:#define PG_RETURN_GIN_TERNARY_VALUE(x) return
GinTernaryValueGetDatum(x)
• src/include/tsearch/ts_utils.h:#define PG_RETURN_TSQUERYSIGN(X) return
TSQuerySignGetDatum(X)
• src/include/tsearch/ts_type.h:#define PG_RETURN_TSVECTOR(x) return
TSVectorGetDatum(x)
• src/include/tsearch/ts_type.h:#define PG_RETURN_TSQUERY(x) return TSQueryGetDatum(x)
• src/include/utils/timestamp.h:#define PG_RETURN_TIMESTAMP(x) return TimestampGetDatum(x)
• src/include/utils/timestamp.h:#define PG_RETURN_TIMESTAMPTZ(x) return
TimestampTzGetDatum(x)
• src/include/utils/timestamp.h:#define PG_RETURN_INTERVAL_P(x) return IntervalPGetDatum(x)
• src/include/utils/timestamp.h:#define PG_RETURN_TIMESTAMP(x) return TimestampGetDatum(x)
• src/include/utils/timestamp.h:#define PG_RETURN_TIMESTAMPTZ(x) return
TimestampTzGetDatum(x)
• src/include/utils/timestamp.h:#define PG_RETURN_INTERVAL_P(x) return IntervalPGetDatum(x)
返回结果
macro(c type -> Datum)
• src/include/utils/nabstime.h:#define PG_RETURN_ABSOLUTETIME(x) return
AbsoluteTimeGetDatum(x)
• src/include/utils/nabstime.h:#define PG_RETURN_RELATIVETIME(x) return
RelativeTimeGetDatum(x)
• src/include/utils/nabstime.h:#define PG_RETURN_TIMEINTERVAL(x) return
TimeIntervalGetDatum(x)
• src/include/utils/date.h:#define PG_RETURN_DATEADT(x) return DateADTGetDatum(x)
• src/include/utils/date.h:#define PG_RETURN_TIMEADT(x) return TimeADTGetDatum(x)
• src/include/utils/date.h:#define PG_RETURN_TIMETZADT_P(x) return TimeTzADTPGetDatum(x)
• src/include/utils/xml.h:#define PG_RETURN_XML_P(x) PG_RETURN_POINTER(x)
• src/include/utils/varbit.h:#define PG_RETURN_VARBIT_P(x) return VarBitPGetDatum(x)
• src/include/utils/uuid.h:#define PG_RETURN_UUID_P(X) return UUIDPGetDatum(X)
• src/include/utils/numeric.h:#define PG_RETURN_NUMERIC(x) return NumericGetDatum(x)
• src/include/utils/acl.h:#define PG_RETURN_ACLITEM_P(x) PG_RETURN_POINTER(x)
• src/include/utils/acl.h:#define PG_RETURN_ACL_P(x) PG_RETURN_POINTER(x)
• src/include/utils/geo_decls.h:#define PG_RETURN_POINT_P(x) return PointPGetDatum(x)
• src/include/utils/geo_decls.h:#define PG_RETURN_LSEG_P(x) return LsegPGetDatum(x)
返回结果
macro(c type -> Datum)
• src/include/utils/geo_decls.h:#define PG_RETURN_PATH_P(x) return PathPGetDatum(x)
• src/include/utils/geo_decls.h:#define PG_RETURN_LINE_P(x) return LinePGetDatum(x)
• src/include/utils/geo_decls.h:#define PG_RETURN_BOX_P(x) return BoxPGetDatum(x)
• src/include/utils/geo_decls.h:#define PG_RETURN_POLYGON_P(x) return
PolygonPGetDatum(x)
• src/include/utils/geo_decls.h:#define PG_RETURN_CIRCLE_P(x) return CirclePGetDatum(x)
• src/include/utils/inet.h:#define PG_RETURN_INET_P(x) return InetPGetDatum(x)
• src/include/utils/inet.h:#define PG_RETURN_MACADDR_P(x) return MacaddrPGetDatum(x)
• src/include/utils/array.h:#define PG_RETURN_ARRAYTYPE_P(x) PG_RETURN_POINTER(x)
• src/include/utils/array.h:#define PG_RETURN_EXPANDED_ARRAY(x)
PG_RETURN_DATUM(EOHPGetRWDatum(&(x)->hdr))
• src/include/utils/pg_lsn.h:#define PG_RETURN_LSN(x) return LSNGetDatum(x)
• src/include/utils/cash.h:#define PG_RETURN_CASH(x) return CashGetDatum(x)
• src/include/utils/rangetypes.h:#define PG_RETURN_RANGE(x) return
RangeTypeGetDatum(x)
• src/include/utils/jsonb.h:#define PG_RETURN_JSONB(x) PG_RETURN_POINTER(x)
返回结果
macro(c type -> Datum)
• /* To return a NULL do this: */
• #define PG_RETURN_NULL() \
• do { fcinfo->isnull = true; return (Datum) 0; } while (0)
• src/include/fmgr.h:#define PG_RETURN_VOID() return (Datum) 0
• src/include/fmgr.h:#define PG_RETURN_DATUM(x) return (x)
• src/include/fmgr.h:#define PG_RETURN_INT32(x) return Int32GetDatum(x)
• src/include/fmgr.h:#define PG_RETURN_UINT32(x) return UInt32GetDatum(x)
• src/include/fmgr.h:#define PG_RETURN_INT16(x) return Int16GetDatum(x)
• src/include/fmgr.h:#define PG_RETURN_UINT16(x) return UInt16GetDatum(x)
• src/include/fmgr.h:#define PG_RETURN_CHAR(x) return CharGetDatum(x)
• src/include/fmgr.h:#define PG_RETURN_BOOL(x) return BoolGetDatum(x)
• src/include/fmgr.h:#define PG_RETURN_OID(x) return ObjectIdGetDatum(x)
• src/include/fmgr.h:#define PG_RETURN_POINTER(x) return PointerGetDatum(x)
• src/include/fmgr.h:#define PG_RETURN_CSTRING(x) return CStringGetDatum(x)
• src/include/fmgr.h:#define PG_RETURN_NAME(x) return NameGetDatum(x)
• src/include/fmgr.h:#define PG_RETURN_FLOAT4(x) return Float4GetDatum(x)
• src/include/fmgr.h:#define PG_RETURN_FLOAT8(x) return Float8GetDatum(x)
• src/include/fmgr.h:#define PG_RETURN_INT64(x) return Int64GetDatum(x)
• src/include/fmgr.h:#define PG_RETURN_BYTEA_P(x) PG_RETURN_POINTER(x)
• src/include/fmgr.h:#define PG_RETURN_TEXT_P(x) PG_RETURN_POINTER(x)
• src/include/fmgr.h:#define PG_RETURN_BPCHAR_P(x) PG_RETURN_POINTER(x)
• src/include/fmgr.h:#define PG_RETURN_VARCHAR_P(x) PG_RETURN_POINTER(x)
• src/include/fmgr.h:#define PG_RETURN_HEAPTUPLEHEADER(x) return HeapTupleHeaderGetDatum(x)
例子
composite type arg
• #include "postgres.h"
• #include "fmgr.h"
• #include "executor/executor.h" /* for GetAttributeByName() 根据composite 元素名读取Datum */
• #ifdef PG_MODULE_MAGIC
• PG_MODULE_MAGIC;
• #endif
• PG_FUNCTION_INFO_V1(c_overpaid);
• Datum
• c_overpaid(PG_FUNCTION_ARGS)
• {
• HeapTupleHeader t = PG_GETARG_HEAPTUPLEHEADER(0); // 获取参数1 composite Datum转成复合类型对应 c type
• int32 limit = PG_GETARG_INT32(1); // 获取参数2
• bool isnull;
• Datum salary;
• salary = GetAttributeByName(t, "salary", &isnull); // 获取composite中的某个元素的Datum
• if (isnull)
• PG_RETURN_BOOL(false);
• /* Alternatively, we might prefer to do PG_RETURN_NULL() for null salary. */
• PG_RETURN_BOOL(DatumGetInt32(salary) > limit); // Datum 转ctype进行比较, 通过PG_RETURN*输出Datum
• }
返回 例子
record
• 将参数反转输出fun( 复合(a,b,c) ) 输出 c, b, a, c*b+a
• Datum
• c_reverse_tuple(PG_FUNCTION_ARGS)
• {
• HeapTupleHeader th; // 复合类型对应的C type
• int32 a,b,c; // 复合类型对应的三个子类型
• bool aisnull, bisnull, cisnull; // 是否为空
• TupleDesc resultTupleDesc; // 返回record值的描述类型
• Oid resultTypeId; // 返回值的OID（如果有的话）