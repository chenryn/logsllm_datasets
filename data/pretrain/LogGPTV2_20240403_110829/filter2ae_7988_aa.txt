本文为翻译文章，原文链接：
## TL;DR
通过使用内部版本（狗粮（原文dogfood，翻译过来真的就叫狗粮））的谷歌云部署管理器（Google Cloud Deployment
Manager），我能够通过Google的全球服务负载平衡器（Global Service Load
Balancer）向某些Google内网站点发出请求，这就导致了RCE。
（以下三段引用是译者自己找的相关定义，表哥们可跳过）
> 什么是dogfood？  
>
> Google大量使用自己的产品，他们拥有庞大的开发/办公环境，可支持运行所有的的工作。由于每天都在使用这些产品，所以在Google向公众发布产品之前，会在全公司范围内发布内部测试版本，这些测试版本就叫dogfood，狗粮版本。  
>  一般情况下这些狗粮版本具有一些公众无法使用的功能，但是可能稳定性较差。
>
> 什么是Google Cloud Deployment Manager  
>  谷歌云部署管理器，Google Cloud Deployment Manager，是一种基础架构部署服务，可以自动创建和管理 Google Cloud
> 资源。用户可以编写灵活的模板和配置文件，并使用它们创建包含各种 Google Cloud 服务（例如 Cloud Storage、Compute
> Engine 和 Cloud SQL）的部署，使其通过配置协同工作。
>
> 什么是Global Service Load Balancer  
>  原文指向的定义链接其实为：Global Software Load
> Balancer，GSLB，是Google的全球软件负载平衡器。它使我们能够平衡集群之间的实时用户流量，从而使用户需求与可用服务容量相匹配，从而可以以对用户透明的方式处理服务故障。如下图所示，GSLB控制与GFE的连接分配以及对后端服务的请求分配。GSLB允许我们从运行在不同集群中的后端和GFE来给用户提供服务。除了维持前端和后端之间的负载平衡外，GSLB还掌握着后端服务的运行状况，并可以自动将流量从出现故障的群集中转移出去。
这可以通过向部署管理器发送一个特定请求来实现，该请求主要用来创建一个类型提供器（Type
Provider）。但添加的是一个未记录的字段叫`googleOptions`。
这其中会有一个异步操作，在这异步操作过程中，部署管理器会尝试从指定的描述符URL（descriptor URL）中检索一个描述符文件（descriptor
document）。
如果此项操作失败，它可能仍会在返回的错误消息中(例如内部服务器的响应)提示了某些信息。相反，如果成功的话，它将允许攻击者发出复杂的内部请求。
（这里有个示例的链接但是失效了呢）
请注意，这个问题并不仅限于对API的请求，只是说对于此类请求效果最好而已。非API站点的示例（Google帐户和ID管理“ GAIA“后端-测试站点）
-该`descriptorUrl`有没有都行，因为它不是一个API，一开始就没指望它会成功。
提交该漏洞报告后，谷歌支付了我$31,337（约合人民币204849.97）。
## 介绍
部署管理器是一项谷歌云服务，它提供了一种以编程方式处理基础结构资源的创建、删除和修改的方法（基础架构为代码）。
相关的部署管理器概念为：
    类型：描述特定类型的基础结构资源的属性（例如：VM，发行凭证，用户权限）， 部署管理器中有几种可用的预定义类型（称为基本类型）
    类型提供器：提供服务的可用API站点及其描述符文档，以供部署管理器管理该服务中的类型（例如：用于管理VM实例的API）
    资源：表示由类型提供的单个基础结构资源的实例（例如：VM实例）
    模板：可重用的Python或Jinja2文件，用来以编程方式配置资源
    部署：资源的集合，同时兼顾部署和管理
    操作：只要在部署管理器中完成的创建、修改或删除等操作，都会返回一个操作，可以对该操作进行轮询以检查其是否完成或出现错误
与部署管理器进行交互的主要方式是通过其`REST
API`，其中有以下两个记录版本：`v2`（通常可用）和`v2beta`（公开beta）（了解有关Google产品启动阶段的更多信息请访问此[链接](https://cloud.google.com/products#product-launch-stages)）。
两种版本之间的主要区别在于，类型提供器仅在`v2beta`版本中可用。
## 说明
乍一看，确实很难理解谷歌云部署管理器。如果乡亲们对此感兴趣，我建议大家先上手使用熟悉熟悉，尤其是通过v2beta版本的`REST
API`方式。阅读[docs](https://cloud.google.com/deployment-manager/docs)，然后尝试创建[部署](https://cloud.google.com/deployment-manager/docs/deployments#api)和[类型提供器](https://cloud.google.com/deployment-manager/docs/configuration/type-providers/creating-type-provider#api)来初步掌握。
我会在这篇文章中尽可能提供有用的资源链接，以期使大家更好去理解。
## 安全研究
研究部署管理器的第一种方法是查找隐藏的或内部的类型（Types），因为某些Google服务（例如Google App Engine
Flexible）在内网使用的就是部署管理器（在部署应用程序时可以在项目日志中查看到）。但是很显然，我什么都没找到。
然后，我查看了部署的`Jinja2`和`Python`模板。
通过反复试错，终于能够使用特制模板来创建部署（Deployments），这些部署将在操作上将数据作为Python异常返回。
通过这种方法，我能够检查Python库，读取Python代码以及列出/读取文件，但是模板的解释脚本（interpreting
script）却以零特权在隔离环境上运行，甚至没有网络连接。
经过这些尝试之后，我尝试创建指向谷歌内网服务API(诸如：`issuetracker.corp.googleapis.com`)的类型提供器，但是始终显示操作失败，并提示一条错误消息，指出它未收到对描述符文档的有效响应。并且，当`issuetracker.corp.googleapis.com`从外部访问时，会重定向到登录门户网站的HTML
。
任何私有IP地址都会失败，并显示一条错误消息，指出该地址不是有效地址（也尝试过绕过该地址，使用指向私有IP的域和重定向，但是结果都一样）。
这么多失败的尝试让人很受挫，因此有很长一段时间都没有继续研究部署管理器（我并不是一天内一下子干完的，这是一个非常缓慢的佛系过程）。
终于，在阳光灿烂的某一天，我决定好好研究部署管理器API方法，通过谷歌云端控制台，访问指标页面（metrics
page），以及在过滤器板块搜寻了很久，终于在一个标题为`Methods`的下拉列表里找到了这些方法（包括一个没有文档记录的）。这些方法名称中通常包含API版本。
我注意到除了v2和v2beta（已记录的版本）之外，还有另外两个API版本，分别称为`alpha`和`dogfood`。
并且我还发现，仅仅通过在每个API调用中把`V2`或`v2beta`替换为`alpha`或`dogfood`，就可以引用这些版本的方法。
但是在`Alpha`版本中玩了一圈，并没有发现任何可以利用的东西，so sad。
又但是，`dogfood`版本倒是有趣一些，特别是当我已经注意到`dogfood`这个词被用于Google服务内部测试之后。
Google中的`Dogfood`产品版本通常仅适用于Google员工，因此他们会使用这些产品，并在产品移交给客户之前提交bug。
也许此版本具有内部功能，仅适用于Google员工！（嘿嘿嘿）
当我列出该版本的基本类型时，发现其中大多数都在其定义中返回了一个额外的字段：`googleOptions`。
For 几个 example:
当我列出自己的类型提供器时，它们也包含了此类额外字段；另外，当我在查询中指定`$outputDefaults`系统参数时，可以看到`googleOptions`字段包含在哪些字段中。
深入研究了好一会儿，做了各种尝试，包括在这些字段中创建了具有不同值的类型提供器，弄清了它们各自的功能以及它们的期望值（请注意，到目前为止，我依然无法弄清楚它们中的绝大多数是干啥的）：
    injectProject
    布尔值。无论我指定了什么值，Deployment Manager API始终在我的Type Providers上将其设置为false。效果未知。
    deleteIntent
    枚举。我能够找到一个有效值为CREATE_OR_ACQUIRE。效果未知。
    isLocalProvider
    布尔值。每当我将其设置为true时，无论其他字段中的值如何，都能成功创建类型提供程序。但是尝试使用它创建部署的话就老是会失败，并显示一条错误信息：无法检索描述符文档。
    ownershipKind
    枚举。有效值为UNKNOWN、USER和GOOGLE。但是将其设置为任一这些值均未观察到任何影响，在研究过程中我始终将其设置为`GOOGLE`。
    transport
    枚举。最初发现的有效值为：UNKNOWN_TRANSPORT_TYPE和HARPOON。将其设置为任何这些值均未观察到效果。
    credentialType
    枚举。我最初发现的有效值为： UNKNOWN_CREDENTIAL_TYPE和OAUTH。将其设置为任何这些值均未观察到效果。
    gslbTarget
    字符串。其值为空或类似于Blade：或gslb：之类的东西。将其设置为任何值均未观察到效果。
    descriptorUrlServerSpec
    字符串，与gslbTarget相同或为空。将其设置为任何值均未观察到效果。
上述这些值非常有用，`GSLB`是Google的`Global Service Load
Balancer`的简称，它的作用就像内部DNS服务器和负载平衡器之间的混合体。
根据《SRE手册》，当为`GSLB`提供一个符号名称（类似于域名）时，它会把流量定向到一个链接BNS地址（Borg Naming
Service,博格命名服务），该地址与Google的内部IP地址等效。
这可以有很大可能用来实现内部服务器的SSRF！