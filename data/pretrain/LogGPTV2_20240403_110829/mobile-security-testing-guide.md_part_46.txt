Apple has implemented an elaborate DRM system to make sure that only Apple-approved code runs on their devices,
that is, code signed by Apple. In other words, you won't be able to run any code on an iOS device that hasn't been
jailbroken unless Apple explicitly allows it. End users are supposed to install apps through the official Apple's App
Store only. For this reason (and others), iOS has been compared to a crystal prison.
A developer profile and an Apple-signed certificate are required to deploy and run an application. Developers need to
register with Apple, join the Apple Developer Program and pay a yearly subscription to get the full range of
development and deployment possibilities. There's also a free developer account that allows you to compile and
deploy apps (but not distribute them in the App Store) via sideloading.
Encryption and Data Protection
FairPlay Code Encryption is applied to apps downloaded from the App Store. FairPlay was developed as a DRM for
multimedia content purchased through iTunes. Originally, Fairplay encryption was applied to MPEG and QuickTime
streams, but the same basic concepts can also be applied to executable files. The basic idea is as follows: Once you
register a new Apple user account, or Apple ID, a public/private key pair will be created and assigned to your account.
The private key is securely stored on your device. This means that FairPlay-encrypted code can be decrypted only on
devices associated with your account. Reverse FairPlay encryption is usually obtained by running the app on the
device, then dumping the decrypted code from memory (see also "Basic Security Testing on iOS").
Apple has built encryption into the hardware and firmware of its iOS devices since the release of the iPhone 3GS.
Every device has a dedicated hardware-based cryptographic engine that provides an implementation of the AES 256-
bit encryption and the SHA-1 hashing algorithms. In addition, there's a unique identifier (UID) built into each device's
hardware with an AES 256-bit key fused into the Application Processor. This UID is unique and not recorded
elsewhere. At the time of writing, neither software nor firmware can directly read the UID. Because the key is burned
into the silicon chip, it can't be tampered with or bypassed. Only the crypto engine can access it.
Building encryption into the physical architecture makes it a default security feature that can encrypt all data stored on
an iOS device. As a result, data protection is implemented at the software level and works with the hardware and
firmware encryption to provide more security.
When data protection is enabled, by simply establishing a passcode in the mobile device, each data file is associated
with a specific protection class. Each class supports a different level of accessibility and protects data on the basis of
when the data needs to be accessed. The encryption and decryption operations associated with each class are based
on multiple key mechanisms that utilize the device's UID and passcode, a class key, a file system key, and a per-file
key. The per-file key is used to encrypt the file's contents. The class key is wrapped around the per-file key and stored
336
Platform Overview
in the file's metadata. The file system key is used to encrypt the metadata. The UID and passcode protect the class
key. This operation is invisible to users. To enable data protection, the passcode must be used when accessing the
device. The passcode unlocks the device. Combined with the UID, the passcode also creates iOS encryption keys
that are more resistant to hacking and brute-force attacks. Enabling data protection is the main reason for users to
use passcodes on their devices.
Sandbox
The appsandbox is an iOS access control technology. It is enforced at the kernel level. Its purpose is limiting system
and user data damage that may occur when an app is compromised.
Sandboxing has been a core security feature since the first release of iOS. All third-party apps run under the same
user ( mobile ), and only a few system applications and services run as root (or other specific system users).
Regular iOS apps are confined to a container that restricts access to the app's own files and a very limited number of
system APIs. Access to all resources (such as files, network sockets, IPCs, and shared memory) are controlled by the
sandbox. These restrictions work as follows [#levin]:
The app process is restricted to its own directory (under /var/mobile/Containers/Bundle/Application/ or
/var/containers/Bundle/Application/, depending on the iOS version) via a chroot-like process.
The mmap and mmprotect system calls are modified to prevent apps from making writable memory pages
executable and stopping processes from executing dynamically generated code. In combination with code signing
and FairPlay, this strictly limits what code can run under specific circumstances (e.g., all code in apps distributed
via the App Store is approved by Apple).
Processes are isolated from each other, even if they are owned by the same UID at the operating system level.
Hardware drivers can't be accessed directly. Instead, they must be accessed through Apple's public frameworks.
General Exploit Mitigations
iOS implements address space layout randomization (ASLR) and eXecute Never (XN) bit to mitigate code execution
attacks.
ASLR randomizes the memory location of the program's executable file, data, heap, and stack every time the program
is executed. Because the shared libraries must be static to be accessed by multiple processes, the addresses of
shared libraries are randomized every time the OS boots instead of every time the program is invoked. This makes
specific function and library memory addresses hard to predict, thereby preventing attacks such as the return-to-libc
attack, which involves the memory addresses of basic libc functions.
The XN mechanism allows iOS to mark selected memory segments of a process as non-executable. On iOS, the
process stack and heap of user-mode processes is marked non-executable. Pages that are writable cannot be
marked executable at the same time. This prevents attackers to execute machine code injected into the stack or heap.
Software Development on iOS
Like other platforms, Apple provides a Software Development Kit (SDK) that helps developers to develop, install, run,
and test native iOS Apps. Xcode is an Integrated Development Environment (IDE) for Apple software development.
iOS applications are developed in Objective-C or Swift.
Objective-C is an object-oriented programming language that adds Smalltalk-style messaging to the C programming
language. It is used on macOS to develop desktop applications and on iOS to develop mobile applications. Swift is the
successor of Objective-C and allows interoperability with Objective-C.
Swift was introduced with Xcode 6 in 2014.
On a non-jailbroken device, there are two ways to install an application out of the App Store:
337
Platform Overview
1. via Enterprise Mobile Device Management. This requires a company-wide certificate signed by Apple.
2. via sideloading, i.e., by signing an app with a developer's certificate and installing it on the device via Xcode (or
Cydia Impactor). A limited number of devices can be installed to with the same certificate.
Apps on iOS
iOS apps are distributed in IPA (iOS App Store Package) archives. The IPA file is a ZIP-compressed archive that
contains all the code and resources required to execute the app.
IPA files have a built-in directory structure. The example below shows this structure at a high level:
/Payload/ folder contains all the application data. We will come back to the contents of this folder in more detail.
/Payload/Application.app contains the application data itself (ARM-compiled code) and associated static
resources.
/iTunesArtwork is a 512x512 pixel PNG image used as the application's icon.
/iTunesMetadata.plist contains various bits of information, including the developer's name and ID, the bundle
identifier, copyright information, genre, the name of the app, release date, purchase date, etc.
/WatchKitSupport/WK is an example of an extension bundle. This specific bundle contains the extension delegate
and the controllers for managing the interfaces and responding to user interactions on an Apple Watch.
IPA Payloads - A Closer Look
Let's take a closer look at the different files in the IPA container. Apple uses a relatively flat structure with few
extraneous directories to save disk space and simplify file access. The top-level bundle directory contains the
application's executable file and all the resources the application uses (for example, the application icon, other
images, and localized content .
MyApp: The executable file containing the compiled (unreadable) application source code.
Application: Application icons.
Info.plist: Configuration information, such as bundle ID, version number, and application display name.
Launch images: Images showing the initial application interface in a specific orientation. The system uses one of
the provided launch images as a temporary background until the application is fully loaded.
MainWindow.nib: Default interface objects that are loaded when the application is launched. Other interface
objects are then either loaded from other nib files or created programmatically by the application.
Settings.bundle: Application-specific preferences to be displayed in the Settings app.
Custom resource files: Non-localized resources are placed in the top-level directory and localized resources are
placed in language-specific subdirectories of the application bundle. Resources include nib files, images, sound
files, configuration files, strings files, and any other custom data files the application uses.
A language.lproj folder exists for each language that the application supports. It contains a storyboard and strings file.
A storyboard is a visual representation of the iOS application's user interface. It shows screens and the
connections between those screens.
The strings file format consists of one or more key-value pairs and optional comments.
338
Platform Overview
On a jailbroken device, you can recover the IPA for an installed iOS app using different tools that allow decrypting the
main app binary and reconstruct the IPA file. Similarly, on a jailbroken device you can install the IPA file with IPA
Installer. During mobile security assessments, developers often give you the IPA directly. They can send you the
actual file or provide access to the development-specific distribution platform they use, e.g., HockeyApp or TestFlight.
App Permissions
In contrast to Android apps (before Android 6), iOS apps don't have pre-assigned permissions. Instead, the user is
asked to grant permission during run time, when the app attempts to use a sensitive API for the first time. Apps that
have been granted permissions are listed in the Settings > Privacy menu, allowing the user to modify the app-specific
setting. Apple calls this permission concept privacy controls.
iOS developers can't set requested permissions directly — they indirectly request them with sensitive APIs. For
example, when accessing a user's contacts, any call to CNContactStore blocks the app while the user is being asked
to grant or deny access. Starting with iOS 10.0, apps must include usage description keys for the types of permissions
they request and data they need to access (e.g., NSContactsUsageDescription).
The following APIs require user permission:
Contacts
Microphone
Calendars
Camera
Reminders
HomeKit
Photos
Health
Motion activity and fitness
Speech recognition
Location Services
Bluetooth sharing
Media Library
Social media accounts
iOS Application Attack surface
339
Platform Overview
The iOS application attack surface consists of all components of the application, including the supportive material
necessary to release the app and to support its functioning. The iOS application may be vulnerable to attack if it does
not:
Validate all input by means of IPC communication or URL-schemes, see also:
Testing Custom URL Schemes
Validate all input by the user in input fields.
Validate the content loaded inside a WebView, see also:
Testing iOS WebViews
Determining Whether Native Methods Are Exposed Through WebViews
Securely communicate with backend servers or is susceptible to man-in-the-middle (MITM) attacks between the
server and the mobile application, see also:
Testing Network Communication
iOS Network APIs
Securely stores all local data, or loads untrusted data from storage, see also:
Data Storage on iOS
Protect itself against compromised environments, repackaging or other local attacks, see also:
iOS Anti-Reversing Defenses
340
Setting up a Testing Environment for iOS Apps
iOS Basic Security Testing
In the previous chapter, we provided an overview of the iOS platform and described the structure of iOS apps. In this
chapter, we'll introduce basic processes and techniques you can use to test iOS apps for security flaws. These basic
processes are the foundation for the test cases outlined in the following chapters.
iOS Testing Setup
Host Device
Although you can use a Linux or Windows machine for testing, you'll find that many tasks are difficult or impossible on
these platforms. In addition, the Xcode development environment and the iOS SDK are only available for macOS.
This means that you'll definitely want to work on macOS for source code analysis and debugging (it also makes black
box testing easier).
The following is the most basic iOS app testing setup:
Ideally macOS machine with admin rights.
Wi-Fi network that permits client-to-client traffic.
At least one jailbroken iOS device (of the desired iOS version).
Burp Suite or other interception proxy tool.
Setting up Xcode and Command Line Tools
Xcode is an Integrated Development Environment (IDE) for macOS that contains a suite of tools for developing
software for macOS, iOS, watchOS, and tvOS. You can download Xcode for free from the official Apple website.
Xcode will offer you different tools and functions to interact with an iOS device that can be helpful during a penetration
test, such as analyzing logs or sideloading of apps.
All development tools are already included within Xcode, but they are not available within your terminal. In order to
make them available systemwide, it is recommended to install the Command Line Tools package. This will be handy
during testing of iOS apps as some of the tools you will be using later (e.g. objection) are also relying on the
availability of this package. You can download it from the official Apple website or install it straight away from your
terminal:
$ xcode-select --install
Testing Device
Getting the UDID of an iOS device
The UDID is a 40-digit unique sequence of letters and numbers to identify an iOS device. You can find the UDID of
your iOS device via iTunes, by selecting your device and clicking on "Serial Number" in the summary tab. When
clicking on this you will iterate through different meta-data of the iOS device including its UDID.
It is also possible to get the UDID via the command line, from a device attached via USB. Install ideviceinstaller via
brew and use the command idevice_id -l :
$ brew install ideviceinstaller
$ idevice_id -l
316f01bd160932d2bf2f95f1f142bc29b1c62dbc
341
Setting up a Testing Environment for iOS Apps
Alternatively you can also use the Xcode command instruments -s devices .
Testing on a real device (Jailbroken)
You should have a jailbroken iPhone or iPad for running tests. These devices allow root access and tool installation,
making the security testing process more straightforward. If you don't have access to a jailbroken device, you can
apply the workarounds described later in this chapter, but be prepared for a more difficult experience.
Testing on the iOS Simulator
Unlike the Android emulator, which fully emulates the hardware of an actual Android device, the iOS SDK simulator
offers a higher-level simulation of an iOS device. Most importantly, emulator binaries are compiled to x86 code instead
of ARM code. Apps compiled for a real device don't run, making the simulator useless for black box analysis and
reverse engineering.
Getting Privileged Access
iOS jailbreaking is often compared to Android rooting, but the process is actually quite different. To explain the
difference, we'll first review the concepts of "rooting" and "flashing" on Android.
Rooting: This typically involves installing the su binary on the system or replacing the whole system with a
rooted custom ROM. Exploits aren't required to obtain root access as long as the bootloader is accessible.
Flashing custom ROMs: This allows you to replace the OS that's running on the device after you unlock the
bootloader. The bootloader may require an exploit to unlock it.
On iOS devices, flashing a custom ROM is impossible because the iOS bootloader only allows Apple-signed images
to be booted and flashed. This is why even official iOS images can't be installed if they aren't signed by Apple, and it
makes iOS downgrades only possible for as long as the previous iOS version is still signed.
The purpose of jailbreaking is to disable iOS protections (Apple's code signing mechanisms in particular) so that
arbitrary unsigned code can run on the device. The word "jailbreak" is a colloquial reference to all-in-one tools that
automate the disabling process.
Cydia is an alternative app store developed by Jay Freeman (aka "saurik") for jailbroken devices. It provides a
graphical user interface and a version of the Advanced Packaging Tool (APT). You can easily access many
"unsanctioned" app packages through Cydia. Most jailbreaks install Cydia automatically.
Since iOS 11 jailbreaks are introducing Sileo, which is a new jailbreak app-store for iOS devices. The jailbreak
Chimera for iOS 12 is also relying on Sileo as a package manager.
Developing a jailbreak for a given version of iOS is not easy. As a security tester, you'll most likely want to use publicly
available jailbreak tools. Still, we recommend studying the techniques that have been used to jailbreak various
versions of iOS-you'll encounter many interesting exploits and learn a lot about OS internals. For example, Pangu9 for
iOS 9.x exploited at least five vulnerabilities, including a use-after-free kernel bug (CVE-2015-6794) and an arbitrary
file system access vulnerability in the Photos app (CVE-2015-7037).
Some apps attempt to detect whether the iOS device on which they're running is jailbroken. This is because
jailbreaking deactivates some of iOS' default security mechanisms. However, there are several ways to get around
these detections, and we'll introduce them in the chapters "Reverse Engineering and Tampering on iOS" and "Testing
Anti-Reversing Defenses on iOS".
Benefits of Jailbreaking
End users often jailbreak their devices to tweak the iOS system's appearance, add new features, and install third-party
apps from unofficial app stores. For a security tester, however, jailbreaking an iOS device has even more benefits.
They include, but aren't limited to, the following:
Root access to the file system.
342
Setting up a Testing Environment for iOS Apps
Possibility of executing applications that haven't been signed by Apple (which includes many security tools).
Unrestricted debugging and dynamic analysis.
Access to the Objective-C or Swift runtime.
Jailbreak Types
There are tethered, semi-tethered, semi-untethered, and untethered jailbreaks.
Tethered jailbreaks don't persist through reboots, so re-applying jailbreaks requires the device to be connected
(tethered) to a computer during every reboot. The device may not reboot at all if the computer is not connected.
Semi-tethered jailbreaks can't be re-applied unless the device is connected to a computer during reboot. The
device can also boot into non-jailbroken mode on its own.
Semi-untethered jailbreaks allow the device to boot on its own, but the kernel patches (or user-land modifications)
for disabling code signing aren't applied automatically. The user must re-jailbreak the device by starting an app or
visiting a website (not requiring a connection to a computer, hence the term untethered).
Untethered jailbreaks are the most popular choice for end users because they need to be applied only once, after
which the device will be permanently jailbroken.
Caveats and Considerations
Jailbreaking an iOS device is becoming more and more complicated because Apple keeps hardening the system and
patching the exploited vulnerabilities. Jailbreaking has become a very time-sensitive procedure because Apple stops
signing these vulnerable versions relatively soon after releasing a fix (unless the jailbreak benefits from hardware-
based vulnerabilities, such as the limera1n exploit affecting the BootROM of the iPhone 4 and iPad 1). This means
that you can't downgrade to a specific iOS version once Apple stops signing the firmware.
If you have a jailbroken device that you use for security testing, keep it as is unless you're 100% sure that you can re-
jailbreak it after upgrading to the latest iOS version. Consider getting one (or multiple) spare device(s) (which will be
updated with every major iOS release) and waiting for a jailbreak to be released publicly. Apple is usually quick to
release a patch once a jailbreak has been released publicly, so you have only a couple of days to downgrade (if it is
still signed by Apple) to the affected iOS version and apply the jailbreak.
iOS upgrades are based on a challenge-response process (generating as a result the named SHSH blobs). The
device will allow the OS installation only if the response to the challenge is signed by Apple. This is what researchers
call a "signing window", and it is the reason you can't simply store the OTA firmware package you downloaded via
iTunes and load it onto the device whenever you want to. During minor iOS upgrades, two versions may both be
signed by Apple (the latest one, and the previous iOS version). This is the only situation in which you can downgrade
the iOS device. You can check the current signing window and download OTA firmware from the IPSW Downloads
website.
Which Jailbreaking Tool to Use
Different iOS versions require different jailbreaking techniques. Determine whether a public jailbreak is available for
your version of iOS. Beware of fake tools and spyware, which are often hiding behind domain names that are similar
to the name of the jailbreaking group/author.
The jailbreak Pangu 1.3.0 is available for 64-bit devices running iOS 9.0. If you have a device that's running an iOS
version for which no jailbreak is available, you can still jailbreak the device if you downgrade or upgrade to the target
jailbreakable iOS version (via IPSW download and iTunes). However, this may not be possible if the required iOS
version is no longer signed by Apple.
The iOS jailbreak scene evolves so rapidly that providing up-to-date instructions is difficult. However, we can point you
to some sources that are currently reliable.
343