```
> docker stack deploy -c .\docker-stack-2.yml nerd-dinner
Updating service nerd-dinner_nerd-dinner-save-handler (id: 0697sstia35s7mm3wo6q5t8nu)
Updating service nerd-dinner_nerd-dinner-homepage (id: v555zpu00rwu734l2zpi6rwz3)
Updating service nerd-dinner_reverse-proxy (id: kchmkm86wk7d13eoj9t26w1hw)
Updating service nerd-dinner_message-queue (id: jlzt6svohv1bo4og0cbx4y5ac)
Updating service nerd-dinner_nerd-dinner-api (id: xhlzf3kftw49lx9f8uemhv0mo)
Updating service nerd-dinner_elasticsearch (id: 126s2u0j78k1c9tt9htdkup8x)
Updating service nerd-dinner_nerd-dinner-index-handler (id: zd651rohewgr3waud6kfvv7o0)
Updating service nerd-dinner_nerd-dinner-web (id: yq6c51bzrnrfkbwqv02k8shvr)
Updating service nerd-dinner_nerd-dinner-db (id: wilnzl0jp1n7ey7kgjyjak32q)
Updating service nerd-dinner_kibana (id: uugw7yfaza84k958oyg45cznp)
```
命令输出显示所有服务都是`Updating`，但是 Docker Swarm 实际上只会在 Compose 文件中期望的状态不同于运行状态的地方更改服务。在此部署中，它将使用合成文件中的新映像名称更新主页服务。
The update doesn't have any restrictions on the image you're upgrading to. It doesn't need to be a new tag from the same repository name; it can be a completely different image. This is very flexible, but it means you need to be careful that you don't accidentally update your message handlers with a new version of the web application, or vice versa.
Docker 一次更新一个容器，您可以配置更新之间的延迟时间间隔以及更新失败时采取的行为。在更新过程中，我可以运行`docker service ps`看到原容器处于`Shutdown`状态，替换容器为`Running`或`Starting`:
```
> docker service ps nerd-dinner_nerd-dinner-homepage
ID    NAME   IMAGE   NODE  DESIRED STATE CURRENT STATE ERROR  PORTS
is12l1gz2w72 nerd-dinner_nerd-dinner-homepage.1 win2019-02          Running Running about a minute ago
uu0s3ihzp4lk \_ nerd-dinner_nerd-dinner-homepage.1 win2019-02       Shutdown Shutdown 2 minutes ago
0ruzheqp29z1 nerd-dinner_nerd-dinner-homepage.2 win2019-dev-02      Running Running 2 minutes ago
5ivddeffrkjj \_ nerd-dinner_nerd-dinner-homepage.2 win2019-dev-02   Shutdown  Shutdown 2 minutes ago
```
新的 NerdDinner 主页应用的 Docker 文件有一个运行状况检查，Docker 会等待直到新容器的运行状况检查通过，然后再继续替换下一个容器。在滚动更新过程中，有些用户会看到旧的主页，有些用户会看到时尚的新主页:
![](img/c490a14f-6719-4859-8377-c5232d8783cd.png)
Traefik 和主页容器之间的通信使用 VIP 网络，因此它将只向运行容器的主机发送流量——用户将从已经更新并正在运行`ch07`映像的容器或即将更新并正在运行`ch03`映像的容器中获得响应。如果这是一个高流量应用，我需要确保服务中有足够的容量，因此当一个任务被更新时，剩余的任务可以处理负载。
滚动更新给你零停机时间，但这并不一定意味着你的应用将在更新过程中正常运行。这个过程只适用于无状态应用——如果任务存储了任何会话状态，那么用户体验将受到影响。当容器保持状态被替换时，该状态将丢失。如果您有有状态的应用，您将需要计划一个更仔细的升级过程——或者最好使这些组件现代化，以便将状态存储在容器中运行的共享组件中。
# 回滚服务更新
在群模式下更新服务时，群会存储以前部署的配置。如果您发现版本有问题，可以使用一个命令回滚到以前的状态:
```
> docker service update --rollback nerd-dinner_nerd-dinner-homepage
nerd-dinner_nerd-dinner-homepage
```
回滚是服务更新的一种特殊形式。`rollback`标志不是为要更新的任务传递映像名称，而是滚动更新服务使用的前一个映像。同样，回滚一次只发生一个任务，因此这是一个零停机过程。无论您如何应用更新，无论您使用的是`docker stack deploy`还是`docker service update`，都可以使用此命令回滚到。
Rollbacks are one of the few scenarios where you might want to use imperative commands to manage your applications instead of declarative Docker Compose files. If you find a problem with a service update, it's great to be able to roll it back to the previous state with just a single command.
服务更新仅保留一个用于回滚的先前服务配置。如果从版本 1 更新到版本 2，再更新到版本 3，版本 1 的配置将丢失。您可以从版本 3 回滚到版本 2，但是如果您从版本 2 再次回滚，它将回滚到以前的版本，这将带您回到版本 3。
# 配置更新行为
对于大规模部署，您可以更改默认的更新行为，或者更快地完成部署，或者运行更保守的部署策略。默认行为是一次更新一个任务，任务更新之间没有延迟，如果任务更新失败，将暂停展开。可以用三个参数覆盖配置:
*   `update-parallelism`:并发更新的任务数
*   `update-delay`:任务更新之间等待的时间段；可以指定为小时、分钟和秒
*   `update-failure-action`:任务更新失败时采取的操作，继续或停止推出
您可以在 Dockerfile 中指定默认参数，以便将其烘焙到映像中，或者在 Compose 文件中指定默认参数，以便在部署时或使用服务命令进行设置。对于 NerdDinner 的生产部署，我可能有 9 个 SQL 消息处理程序实例，编写文件中的`update_config`设置为分三批更新，延迟 10 秒:
```
nerd-dinner-save-handler:
  deploy:
  replicas: 9
  update_config:
    parallelism: 3
    delay: 10s
...
```
还可以使用`docker service update`命令更改服务的更新配置，因此您可以更改更新参数，并使用单个命令启动滚动升级。
运行状况检查在服务更新中尤其重要。如果服务更新中的新任务的运行状况检查失败，这可能意味着映像有问题。完成部署可能会导致 100%的不健康任务和应用崩溃。默认的更新配置会阻止这种情况，因此如果更新的任务没有进入运行状态，则展开会暂停。更新不会进行，但这比更新的应用坏了要好。
# 更新群节点
应用更新是更新例程的一部分，主机更新是另一部分。您的 Windows Docker 主机应该运行最低限度的操作系统，最好是 Windows Server 2019 Core。这个版本没有用户界面，所以更新的表面积要小得多，但是仍然会有一些 Windows 更新需要重新启动。
重新启动服务器是一个侵入性的过程——它会停止 Docker Engine Windows 服务，杀死所有正在运行的容器。出于同样的原因，升级 Docker 同样具有入侵性:这意味着 Docker 引擎的重启。在群集模式下，您可以通过在更新期间停止节点服务来管理这一点，而不会影响服务级别。
我会用我的蜂群展示这个。如果我需要在`win2019-02`上工作，我可以优雅地用`docker node update`重新安排它正在运行的任务，使它进入消耗模式:
```
> docker node update --availability drain win2019-02
win-node02
```
将节点置于排出模式意味着所有容器都被停止，由于这些容器是服务任务容器，它们将被其他节点上的新容器替换。排水完成后，我在`win-node02`上没有运行任务:它们都被关闭了。您可以看到任务已经被故意关闭，因为`Shutdown`被列为所需状态:
```
> docker node ps win2019-02
ID   NAME  NODE         DESIRED STATE         CURRENT                STATE              
kjqr0b0kxoah  nerd-dinner_nerd-dinner-homepage.1      win2019-02     Shutdown Shutdown 48 seconds ago
is12l1gz2w72 \_ nerd-dinner_nerd-dinner-homepage.1    win2019-02     Shutdown Shutdown 8 minutes ago
xdbsme89swha nerd-dinner_nerd-dinner-index-handler.1  win2019-02     Shutdown Shutdown 49 seconds ago
j3ftk04x1e9j  nerd-dinner_nerd-dinner-db.1            win2019-02     Shutdown 
Shutdown 47 seconds ago
luh79mmmtwca   nerd-dinner_nerd-dinner-api.1          win2019-02     Shutdown Shutdown 47 seconds ago
... 
```
我可以检查服务列表，查看每个服务是否仍处于所需的副本级别:
```
> docker service ls
ID              NAME                                 MODE          REPLICAS   
126s2u0j78k1  nerd-dinner_elasticsearch            replicated       1/1 
uugw7yfaza84  nerd-dinner_kibana                   replicated       1/1 
jlzt6svohv1b  nerd-dinner_message-queue            replicated       1/1 
xhlzf3kftw49  nerd-dinner_nerd-dinner-api          replicated       2/2  
wilnzl0jp1n7  nerd-dinner_nerd-dinner-db           replicated       1/1   
v555zpu00rwu nerd-dinner_nerd-dinner-homepage      replicated       2/2
zd651rohewgr nerd-dinner_nerd-dinner-index-handler replicated       2/2  
0697sstia35s nerd-dinner_nerd-dinner-save-handler  replicated       3/3
yq6c51bzrnrf nerd-dinner_nerd-dinner-web           replicated       2/2 
kchmkm86wk7d nerd-dinner_reverse-proxy             replicated       1/1 
```
群体已经创建了新的容器来替换在`win2019-02`上运行的复制品。事实上，我的所有副本现在都在单个节点上运行，但是通过入口网络和 VIP 负载平衡，应用继续以相同的方式工作。Docker 引擎仍然以耗尽模式运行，因此如果任何外部流量到达耗尽的节点，它们仍然会将其转发到活动节点上的容器。
处于耗尽模式的节点被认为是不可用的，因此如果群需要调度新任务，则不会将任何任务分配给耗尽的节点。`win-node02`现在实际上已经停止工作了，所以我可以用`sconfig`工具登录并运行一个 Windows 更新，或者更新 Docker Engine。
更新节点可能意味着重新启动 Docker 引擎或重新启动服务器。完成后，我可以用另一个`docker node update`命令使服务器在集群中恢复在线:
```
docker node update --availability active win2019-02
```
这使得该节点再次可用。当节点加入群时，Docker 不会自动重新平衡正在运行的服务，因此容器都停留在`win2019-dev02`上，即使`win-node02`再次可用并且容量更大。
在高吞吐量环境中，服务会定期启动、停止和扩展，任何加入群的节点都将很快运行各自的任务。在更静态的环境中，您可以通过运行 Docker 服务`update --force`来手动重新平衡服务。这不会改变服务的配置，但它会替换所有副本，并在调度新容器运行时使用所有活动节点。
This is a disruptive action, because it forces Docker to stop healthy containers. You need to be confident that you don't impact the availability of your application if you force a rebalance. Docker can't guarantee that without knowing the architecture of your app, which is why services aren't automatically rebalanced when nodes join the swarm.
Swarm 模式使您能够更新应用的任何组件和运行 swarm 的节点，而无需停机。在更新过程中，您可能需要在集群中委托额外的节点，以确保您有足够的容量来覆盖停止服务的节点，但这些节点可以在之后删除。您不需要任何额外的工具来获得滚动更新、自动回滚和路由到健康的容器——这些都内置在 Docker 中。
# 混合群中的混合宿主
群体模式还有一个特点，它非常强大。群中的节点使用 Docker API 进行通信，并且该 API 是跨平台的——这意味着您可以让单个群运行 Windows 和 Linux 服务器的混合。Docker 还运行在不同的 CPU 架构上，因此您可以将传统的 64 位英特尔服务器与高效的新 ARM 板混合使用。
Linux 不是本书的重点，但我将简要介绍混合集群，因为它们开辟了一系列新的可能性。混合群可以让 Linux 和 Windows 节点作为管理人员和工作人员。您可以使用完全相同的 Docker CLI，以相同的方式管理节点及其运行的服务。
混合集群的一个使用案例是在 Linux 上运行您的管理器节点，以降低许可成本或运行成本(如果您的集群在云中的话)。一个生产集群至少需要三个管理器节点。即使您的所有工作负载都基于 Windows，将 Linux 节点作为管理器运行(如果可以的话，在 ARM 上运行)并为用户工作负载保存 Windows 节点可能更具成本效益。
另一个用例是混合工作负载。我的 NerdDinner 解决方案是使用开源软件，该软件可以作为 Linux Docker 映像使用，但我不得不将其打包用于 Windows Server 2019 容器。我可以将任何跨平台组件迁移到混合集群的 Linux 容器中运行。那可能是.NET 核心组件从[第 5 章](05.html)、*采用容器优先解决方案设计*，以及 Traefik、NATS 消息队列、Elasticsearch、Kibana，甚至 SQL Server。Linux 映像通常比 Windows 映像小得多，也轻得多，因此您应该能够以更高的密度运行，将更多的容器打包到每个主机上。
混合群的最大好处是，您可以从相同的用户界面以相同的方式管理所有这些组件。您可以将本地 Docker CLI 连接到群管理器，并使用完全相同的命令管理 Linux 上的 Traefik 代理和 Windows 上的 ASP.NET 应用。
# 摘要
这一章讲述的是 Docker Swarm 模式，这是 Docker 内置的本地集群选项。您学习了如何创建群，如何添加和删除群节点，以及如何在与覆盖网络连接的群上部署服务。我展示了您必须为高可用性创建服务，还讨论了如何使用配置和机密在群中安全地存储敏感的应用数据。
您可以使用组合文件将应用作为栈部署在集群上，这使得对应用组件进行分组和管理变得非常容易。我演示了单节点群集和多节点群集上的栈部署，对于有数百个节点的群集，过程是相同的。
Docker Swarm 中的高可用性意味着您可以在不停机的情况下执行应用更新和回滚。当您需要更新 Windows 或 Docker 时，您甚至可以让节点停止运行，而仍然让您的应用在其余节点上以相同的服务级别运行。
在下一章中，我将更仔细地研究文档化解决方案的管理选项。我将从了解如何将您现有的管理工具用于在 Docker 中运行的应用开始。然后，我将继续使用 Docker Enterprise 管理生产中的群集。