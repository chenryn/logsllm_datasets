Author:flystart  
Team: ms509  
Date:2020/5
# 前言：
WAF(Web Application
Firewall)对于从事信息安全领域的工作者来说并不陌生，在渗透测试一个目标的时候常常作为拦路虎让人头痛不已，笔者这段时间花了些精力对国内外比较常见的WAF进行了绕过研究，这只拦路虎其实也并没有想象中那么可怕。本文从SQL语法层面入手，以国内外主流
waf为研究测试对象，借助fuzz、逆向等各种技术手段，挖掘组合各种SQL功能语法，无视操作系统、中间件、计算机语言等差异硬杠WAF，欢迎私信交流。
# 正文：
WAF（Web Application
Firewall）的中文名称叫做“Web应用防火墙”，根据不同的分类方法可分为很多种，从产品形态上来划分主要分为三大类：硬件类（绿盟、天融信、安恒的硬件waf）、软件类(安全狗、云锁、ModSecurity等)、基于云的waf(阿里云、创宇盾等)。软件类waf和云waf是本文的主角。安全策略和规则可以说是waf的灵魂，我们所说的绕waf就是无视他的策略和规则达到攻击成功的目的。
## 老树：
这一部分是SQL语法功能技巧的总结，也是WAF绕过的基础。
### 注释：
| MySQL | Oracle | MSSQL  
---|---|---|---  
注释符 | /* _/、#、/_! _/、/_!50000xx*/、--、-- - 、--+ | \--、/**/ --%0a- |
\--、/**/、--%0a-  
空白字符 | %09%0A%0B%0C%0D%20 | %00%09%0A%0B%0C%0D%20 | %00-%20  
### 功能特性：
select **CHAR**
SQL 查询语句select后面可以接一些特殊字符，这些字符与select相结合可以达到绕过waf目的，除了select 语句之外
union\from等关键字前后也可以连接一些特殊字符，这些关键子前后就可以作为fuzz的点。
【+】号：
【-】号：
【@】号：
【！】号：
【‘】号：
【“】号：
【~】号：
【{】号：
当然除以上字符，也可结合注释符--、/*、空白字符等。
不仅仅mysql有这类的语法特性，mssql、oracle同样支持，这里就不一一介绍大家可以自行fuzz尝试
  * Oracle11:
  * MSSQL :
### 等价替换：
waf会对一些常见的攻击语句进行拦截，这个时候我们不一定非得正面硬杠，可以挖掘寻找一些生僻的具有相同功能的语句进行代替替换，这也是绕waf的常用手段。以下部分是对SQL查询表达式、函数等其他查询语句等价功能的一个总结，有些来自互联网，有些是自己的研究。
  * **函数替换**
截取字符串是SQL注入利用技术里面的常用功能，通常使用mid(string,1,1)
**|substr(user() from 1 for 1);|**
**|replace(LPAD(user(),2,1),LPAD(user(),2-1,1),"");|**
**|LPAD(REVERSE(TRIM( lpad(user(),1,SPACE(1)) )),1,SPACE(1);|**
ascii(c)、ord(c)  conv(hex(c),16,10)
对于函数过滤的情况可以通过官方文档所有API函数，使用index.php?id=1 xor user()进行fuzz,以下是百度云 fuzz的结果
  * **逗号过滤**
有时候逗号也会被waf拦截或过滤，可以通过不含引号的SQL语句代替  
**case when 代替if**
**union select 1,2,3   
union select * from (select 1)a join (select 2)b join (select 3)c**
**limit 2,1 limit 1 offset 2**
  * **比较表达式代替**
【=】
**if(abs(strcmp((ascii(mid(user()from(1)for(2)))),114))-1,1,0)**
**find_in_set()**
**regexp**
【】
**least(ord('r'),115)、greatest(ord('r'),113)**
**between n and m**
## 核心：
这部分内容是本文的核心部分，在我看来是文章的灵魂吧，除了技巧方法外，还有一些思想指导，waf绕过技术不同于一般的技术思考方向至关重要，有些技巧大部分人可能都已经掌握了但真正给一款waf摆在面前，能突破防御的怕是少之有少。该技术是一个比较大比较复杂的范畴，参数污染、畸形请求包、chunk分割、编码解码等方法林林总总，这些都是老生常谈的东西适用一定的条件、场合，普适性不强，所以这方面内容本文不会涉及，我们要和waf这只老虎来个正面较量，相信会给大家带来惊喜和收益。
### 目标：
做任何事情都要有个目标，没有目标或目标不明确给你一身好装备和本事也难成事。SQL注入漏洞能利用成功的判断依据就是可以dump数据，对于后端DATABASE【SELECT
col FORM
table】用来查询数据的基本语句，该语句的成功执行是可以dump数据的必要条件，当然也是各个厂家安全产品重点照顾的对象，绕过对该语句的拦截自然就是我们的目标，平时进行绕过测试的时候也会关注【UNION
SELECT】、【ORDER BY】等语句，这些可以当成我们的次要目标，不是说他们的绕过不重要，而是不依靠这些语句仅仅通过【SELECT col FORM
table】照样可以dump数据，非必要充分条件吧，结合笔者经验和思考基本可以明确我们的目标：
1.主要目标：绕过【SELECT col FORM table】语句拦截  
2.次要目标：绕过【UNION SELECT】语句拦截
### 战略：
SQL注入根据分类方法不同可分为不同的类型，从SQL注入漏洞利用角度来说，一般有五种注入利用方法，分别是报错注入、联合查询注入、布尔盲注、延时注入、堆查询注入。无论那种注入方式，利用payload都可以分为两部分构成，对应的利用语句（BOUNDARY）和基本查询(QUERY)比如报错注入语句：【updatexml(1,(select
concat(0x7e,user,0x7e) from mysql.user limit
1),1)】蓝色圈起来的报错语句就是BOUNDARY，红色圈起来的部分就是QUERY,也是我们需要绕过的主要目标。