detail their user interaction, present our analysis results, and
describe any backdoors that Firmalice identiﬁed. Aside from
the device-speciﬁc uses of these backdoors, each one can
also be used as a pivot point into the victim’s network. The
nature of some of these devices means that they are frequently
either physically positioned outdoors, exposed directly to the
Internet, or are otherwise not closely monitored, making them
a prime target for attackers.
Measurement
Total size (KB)
Basic blocks (total)
Basic blocks (slice)
Slice (statements)
Static analysis time (seconds)
Symbolic execution time (minutes)
ION
1,988
74,808
1,144
56,977
2,323
12
3S
1,264
10,354
212
7,808
315
26
Dell
7,172
151,005
532
24,387
857
705
TABLE II: The results of Firmalice’s analysis for the ION
8600, the 3S Vision N5072 and the Dell 1130n.
We carried out this evaluation on our prototype of Firmal-
ice, comprising over 14,000 lines of Python and 3,000 lines
of C. Our implementation is single-threaded, although the ap-
proach itself would scale near-linearly in the symbolic analysis
phase. Thus, the execution time presented in this section is
representative of what can be accomplished using a single node
of Firmalice, and signiﬁcant improvements in runtime can be
achieved by parallelizing the symbolic execution.
A. Schneider ION 8600 Smart meter
As the smart meter market exploded worldwide, Schneider
Electric corporation released the ION 8600, a smart meter
model meant for both residential and commercial use. Such
devices play a privacy-critical and safety-critical role:
the
information that they process can be used to determine the
habits of a home’s resident, and any malicious tampering can
cause extremely dangerous situations due to the amount of
electricity involved.
A researcher from IOActive Labs presented a backdoor in
the Schneider ION 8600 smart meter model at BlackHat in
2012 [25]. The backdoor was identiﬁed through manual static
analysis of the ﬁrmware. Schneider Electric acknowledged
the backdoor in a press release [3] and released an updated
ﬁrmware image. Our interpretation of the presentation by
IOActive, and the press release by Schneider, led us to think
that the backdoor was remotely exploitable.
We saw this as a great opportunity to verify Firmalice’s
functionality. Even better,
the described authentication
procedure is relatively complex: rather than being a simple
comparison against a hardcoded string,
relies on the
exposure of the backdoor credentials (which are dynamically
generated by hashing the serial number of the device) to the
user during the authentication process. Detecting this type of
authentication bypass requires reasoning about the determinism
of the authentication credentials, in relation to information
provided by the device during the authentication process.
it
The security policy. We observed that the ION would
output
the string “Access Granted” upon a successful
authentication by a user. This was leveraged for the security
policy: we set the authenticated point to the location in the
ﬁrmware where “Access Granted” was printed.
The analysis. This ﬁrmware’s binary blob contained
1,988 kilobytes of binary code spanning 74,808 basic blocks.
The static analysis completed in about 38 minutes, and the
resulting authentication slice contained 1,144 basic blocks
and 56,977 statements.
The authentication slice identiﬁed by Firmalice ran from
the input routine to the privileged point. Because the ION’s
10
ﬁrmware places a bound on the size of the user input, and
because symbolic summaries of functions greatly reduce the
number of branches that Firmalice must analyze, Firmalice
was able to exhaustively analyze all paths through the
authentication slice. This symbolic analysis ran in 12 minutes,
analyzing 1,029,156 statements in 23,044 blocks across all
analyzed paths. We present these results in Table II.
To our surprise, Firmalice’s analysis yielded no bypasses.
Since symbolic analysis is, in practice, not sound, we assumed
that our system must have missed the vulnerability. We manu-
ally analyzed the ﬁrmware sample, and even attempted the by-
pass on an acquired device with the vulnerable ﬁrmware (ver-
iﬁed by the build number and release date) to try to ﬁgure out
where Firmalice was getting confused. It turned out that, due
to complex logic in the authentication routine (which spanned
several nested functions with intricate interactions), a user had
to be already authenticated with valid credentials before using
the hardcoded credentials identiﬁed by IOActive. Using the
hardcoded credentials, after an actual, secure authentication,
would grant access to more features of a device. However, the
backdoor account could not be accessed from the Internet, un-
less the attacker already had the user’s actual, valid credentials.
Therefore, there was no remotely accessible backdoor.
We contacted the IOActive researcher, and he conﬁrmed
that we were mistaken in our interpretation. We feel that this
anecdote demonstrates the need for a more automated solution:
even with manual analysis, it took us a signiﬁcant amount of
time to verify the results of our analysis due to the complexity
of the code involved. Given the difﬁculty (and cost) involved
in updating ﬁrmware on embedded devices, such mistakes can
represent a real ﬁnancial impact, and a system to automate
parts of this analysis can be extremely valuable.
B. 3S Vision N5072 Camera
The 3S Vision N5072 is a CCTV camera with networking
functionality.
In April 2014, Craig Heffner presented backdoors in
several common embedded devices at
the EELive 2014
conference [11]. Among them was the N5072 camera from 3S
Vision. This backdoor, which takes the form of a hardcoded
authentication credential, allows an attacker to control and
view the camera over the network. Especially given the
zooming capability of this camera, such an attack can have
serious implications with regards to privacy intrusion.
The camera is built on a little-endian ARM architecture.
We found that the ﬁrmware of this camera is actually an
embedded Linux system, comprising Busybox and several
camera-speciﬁc binaries, including a custom web server.
The security policy. Our security policy for this ﬁrmware
reﬂected the purpose of the device itself: the user must not be
able to view camera footage without authentication. However,
the footage itself was not static, so we could not directly use
it for the policy. Instead, we used the static string “Image
Type:”, which was included when requesting footage from
the camera’s web interface.
The analysis. Firmalice was able to identify the backdoor
in the httpd binary, in a total of 31 minutes. This binary,
and the libraries that it depends on, contain a total of 1,264
kilobytes of binary code spanning 10,354 basic blocks. The
11
static analysis completed in 315 seconds, and the resulting
authentication slice contained 3,553 statements from a total
of 7,808 in the corresponding 212 basic blocks. The detection
of the backdoor took just over 26 minutes, analyzing 550,660
statements in 34,544 blocks across all executed paths. We
present these results in Table II.
an
attacker
credential
allows
backdoor
authentication
The Backdoor. The backdoor
hardcoded
in the N5072 was
during HTTP
a
authentication. The
to
stream video from the camera and modify the camera’s
conﬁguration. Firmalice provided an HTTP request
that
would be sufﬁcient to reach the privileged program point, in
which an “authorization” parameter is passed in the query
string. The base64 decoding of
the authorization query
string parameter is “3sadmin:27988303”, which is the hard-
coded username and password of the backdoor. Interestingly,
Firmalice also stumbled upon a benign bug in the URL parsing
code of the camera: query string parameters are parsed, even
without the presence of the “?” character that denotes the
start of a query string, if the provided query path is blank.
C. Dell 1130n Printer
The Dell 1130n is a network-connected laser printer
popular in many ofﬁce and academic settings. Such printers are
frequently connected directly to the Internet, with no protection
or ﬁltering in place. In fact, in January 2013, researchers made
headlines by pointing out the presence of 86,800 network
printers that could be found in a Google search [1].
A backdoor affecting a range of printers manufactured
by Samsung, including the Dell 1130n, was discovered in
2012 [2]. This backdoor allows an attacker to change printer
settings,
to the printer, and use
the printer as a pivot point into the victim’s network. The
backdoor is triggered by sending a specially-crafted SNMPv1
to the printer, with a hardcoded community string.
packet
This attack works even when SNMP is turned off.
intercept documents sent
This printer runs on a big-endian ARM CPU, and its
ﬁrmware is a modiﬁed VxWorks binary-blob containing 7,172
kilobytes of binary code across 151,005 basic blocks.
The security policy. We used the printer to evaluate
our more ﬁne-grained security policy, deﬁning a memory
region, containing conﬁguration parameters, that should not
be changed by unauthenticated users. Firmalice identiﬁed all
program points that write to this memory region, and tagged
them as privileged program points for the analysis.
The analysis. Firmalice ﬁnished its static analysis in
just over 14 minutes, and created an authentication slice
that contained 13,592 of the total 24,387 IR statements in
532 blocks. The analysis of the slice took 11 hours and
45 minutes, executing a total of 134,536,875 statements in
4,264,568 blocks across all of the analyzed paths. The results
are presented Table II.
The Backdoor. The backdoor in the 1130n took the form
of a specially crafted SNMP packet, allowing the attacker
administrative access to the printer. Firmalice provided an
input
the
attacker reach the privileged program point.
representing the SNMP packet
that would let
X. DISCUSSION
In this section, we discuss the implications and the
ideas for
limitations of Firmalice and muse about several
future research directions.
is
the
target
analysis
application
Firmalice’s
of
authentication bypass vulnerabilities in ﬁrmware. In general,
such software is not actively evasive (unlike, for example,
traditional malware), and lends itself well to static analysis.
However, it is possible that a malicious ﬁrmware author could
attempt to attack Firmalice’s analysis. There are two main
attack surfaces: the static program slicing and the symbolic
execution. Obfuscated ﬁrmware could frustrate the former,
while specially-crafted operations (designed to overwhelm the
constraint solver) could attack the latter. These are weaknesses
inherent
to any tool based on static slicing or symbolic
execution, and Firmalice is also vulnerable to them. Given
the status quo in ﬁrmware, the presence of such obfuscation
or evasive code would be, by itself, an excellent indicator of
maliciousness, which Firmalice could be adjusted to detect.
For
operations.
performing
irreversible
As an alternative to binary obfuscation, malicious ﬁrmware
authors could attempt to evade Firmalice’s input determinism
by
example,
Firmalice’s constraint
solving module would be unable
to solve the constraints generated by a secure hash function,
as doing that would be equivalent to reversing the function.
As a result, Firmalice, in its current implementation, can be
evaded by an authentication bypass that compares a hash of
the user’s password against the hash of a hard-coded password.
A possible mitigation of this evasion is the replacement of
the hash function with a symbolic summary that performs a
reversible “summary hash”. In the case of SHA-256, such
a summary hash might simply expand or truncate the input
to 256 bits. With this summary hash replacing the original
hash function, the constraints generated by Firmalice would
be reversible, and the required user input could be identiﬁed.
However, this represents a large sacriﬁce in accuracy of the
analysis, and false positives could be introduced as a result.
There are also other types of backdoors that Firmalice
might fail to detect. Speciﬁcally, math-based backdoors with
multiple solutions (e.g., “the password must be an integer that
is divisible by 10”) would, as a result of having multiple valid
solutions, be considered as a “correct” authentication. To
reason about such backdoors, Firmalice would need to reason
about how restricted a set of solutions is. This ability would
involve extra complexity related to constraint solving and we
feel that this analysis is outside of the scope of this research.
Throughout Firmalice’s design, we had to make many
trade-offs between soundness and scalability. Symbolic
analysis,
is infeasible to perform with full
soundness, because doing this would mean, in the general
case, following every path through a program. This would be
exponential in the number of branches, and Firmalice makes
trade-offs, similar to other tools in the ﬁeld.
in general,
Many of the challenges that Firmalice must deal with could
be addressed through the use of dynamic execution monitoring.
For example, Firmalice’s entry point detection would be un-
necessary if the entry point could be deduced from observing
the boot process of the device. However, the difﬁculty of this
ranges from extremely complex to impossible for most devices.
12
Since many embedded devices require their ﬁrmware to be
signed by the device manufacturer, loading custom analysis
code (such as that required by Avatar [33]) would require
bypassing this protection. Even if this limitation could be
bypassed, the disparity between different devices would neces-
sitate a signiﬁcant implementation effort to analyze each new
device, limiting the possible scale of such a system’s analysis.
While Firmalice is geared towards detecting authentication
bypass vulnerabilities in ﬁrmware, the core approach lends
itself to any logic ﬂaws that can be similarly modeled. One
potential direction of research is a formal language to enable
the speciﬁcation of custom logic ﬂaws for Firmalice to locate.
In fact, the Defense Advanced Research Projects Agency has
launched a project to explore exactly this, with the goal of
assuring the security of embedded devices [4]. DARPA’s goal
is to eventually be able to specify such models as Natural
Language statements that can be converted into logic ﬂaw
descriptions.
Firmalice, and symbolic analysis in general, can be greatly
improved by a better approach to symbolic loop analysis.
When analyzed symbolically, a loop has the potential to branch
analysis states at each iteration (one that exits the loop and one
that does not), causing a state explosion. Firmalice partially
mitigates this through the use of its symbolic summaries, as
many of the loops encountered during a program’s execution
are actually within common library functions. However, in
the general case, advances in loop analysis would directly
beneﬁt Firmalice’s (and other analyzers’) analyses.
XI. RELATED WORK
While a number of previous efforts have been focusing
on analyzing binary applications on commodity software and
hardware platforms,
including general frameworks such as
Valgrind [23], BitBlaze [28], and Pin[21], as well as symbolic
execution based frameworks like AEG [29] and Mayhem [24],
focusing on automatic exploit generation on binary programs,
the case of embedded ﬁrmware received little attention and
remains challenging. Among existing research on ﬁrmware
analysis,
the current systems either require access to the
source code [12] (which in the case of embedded systems is
rarely available), or to the physical device [26], [33].
Schuster et al. [26], proposed an approach for automatically
identifying software backdoors in binary applications running
on x86, x64, and MIPS32 architectures. This approach targets
ﬂawed authentication routines as well as commands and ser-
vices hidden in server-side binaries such as FTP and SSH. The
approach builds on top of execution monitoring using GDB,
and requires actual execution of the binaries on the target phys-
ical system, making it difﬁcult to generally apply the technique
to embedded devices. While this work proposes a practical ap-
proach to detecting backdoors, it is limited to a speciﬁc kind of
authentication bypass technique where pointers to handlers are
actually present as-is in memory8. Additionally, Schuster mod-
els authentication bypass as a control ﬂow problem, leaving
them unable to reason about authentication bypasses resulting
from disclosed credentials or buggy authentication routines.
Not only is our system able to analyze binaries with no
8This approach does not address the cases of obfuscated or indirect
addresses to such handlers.
hardware requirements, but our symbolic execution approach
also targets a wider range of malicious behaviors. In fact, the
authentication deciders and command handlers that Schuster’s
approach identiﬁes during the analysis can be used as a security
policy by Firmalice, allowing Firmalice to vet the ﬁrmware
against complex authentication bypass vulnerabilities.
Avatar [33] is a framework supporting dynamic analysis