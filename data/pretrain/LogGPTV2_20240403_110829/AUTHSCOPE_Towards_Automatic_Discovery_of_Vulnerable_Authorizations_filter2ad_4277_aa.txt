title:AUTHSCOPE: Towards Automatic Discovery of Vulnerable Authorizations
in Online Services
author:Chaoshun Zuo and
Qingchuan Zhao and
Zhiqiang Lin
AuthScope: Towards Automatic Discovery of Vulnerable
Authorizations in Online Services
Chaoshun Zuo
Qingchuan Zhao
he University of Texas at Dallas
he University of Texas at Dallas
800 W Campbell Rd
Richardson, Texas 75080
PI:EMAIL
800 W Campbell Rd
Richardson, Texas 75080
PI:EMAIL
Zhiqiang Lin
he University of Texas at Dallas
800 W Campbell Rd
Richardson, Texas 75080
PI:EMAIL
ABSTRACT
When accessing online private resources (e.g., user proiles, photos,
shopping carts) from a client (e.g., a desktop web-browser or a
mobile app), the service providers must implement proper access
control, which typically involves both authentication and autho-
rization. However, not all of the service providers follow the best
practice, resulting in various access control vulnerabilities. To un-
derstand such a threat in a large scale, and identify the vulnerable
access control implementations in online services, this paper in-
troduces AuthScope, a tool that is able to automatically execute a
mobile app and pinpoint the vulnerable access control implemen-
tations, particularly the vulnerable authorizations, in the corre-
sponding online service. he key idea is to use diferential traic
analysis to recognize the protocol ields and then automatically
substitute the ields and observe the server response. One of the
key challenges for a large scale study lies in how to obtain the post-
authentication request-and-response messages for a given app. We
have thus developed a targeted dynamic activity explorer to per-
form an in-context analysis and drive the app execution to au-
tomatically log in the service. We have tested AuthScope with
4, 838 popular mobile apps from Google Play, and identiied 597
0-day vulnerable authorizations that map to 306 apps.
CCS CONCEPTS
•Security and privacy →Access control; Authorization; Web
application security;
KEYWORDS
Access control; authorization; vulnerability discovery
1 INTRODUCTION
For any multi-user computing systems (e.g., online shopping and
social networking), there is a need to regulate who can view or
use a resource. A particular security mechanism to achieve this
is to use access control, in which a user needs to be irst authenti-
cated (i.e., telling the system who the user is) and then the access
is granted if the authenticated user has the permission to do so.
he use of access control can be dated back to Multics Operating
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proit or commercial advantage and that copies bear this notice and the full citation
on the irst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permited. To copy otherwise,
or republish, to post on servers or to redistribute to lists, requires prior speciic
permission and/or a fee. Request permissions from permissions@acm.org.
CCS’17, Oct. 30–Nov. 3, 2017, Dallas, TX, USA.
© 2017 ACM. ISBN 978-1-4503-4946-8/17/10…$15.00
DOI: http://dx.doi.org/10.1145/3133956.3134089
Systems [32], where a user irst logs in the system to acquire a
user ID (UID) via a password-based authentication, and then the
kernel checks the UID when the user requests access to a protected
resource based on the corresponding permissions. Nearly all of
the later multi-user operating systems (e.g., UNIX/Linux) have fol-
lowed such an approach when implementing their access control
mechanisms.
When moving to the online services, designing and implement-
ing a secure access control mechanism becomes a challenging task
for several reasons. First, an online service can have up to hun-
dreds of millions (even billions) of users, and handling such a large
scale of users oten needs to use eicient database technologies.
Second, managing the user credential correctly for authentication
is another challenge (e.g., many online service today still mistak-
enly store plaintext password [3, 12]). hird, the client side (e.g., a
browser, a mobile app) can be completely controlled by an atacker
and cannot be trusted at all. hat is, a request message generated
by a client can be untrusted, and the eicient security check is
needed at the server side [47].
While the use of single-sign-on (e.g., with Facebook Login) [38]
has made the authentication management much easier for online
services, it does not solve the authorization problem automatically
in that the online service provider (e.g., shopping sites such as
Amazon) still has to regulate that the authenticated user only views
and updates her own resources (e.g., her user proile or shopping
cart). Over the past many years, an eicient approach of using
security tokens to handle authorization was developed [20], and
popularized especially in web applications. In particular, in tradi-
tional desktop web applications, a browser cookie or a session ID
(these are oten called security tokens) is used for the authoriza-
tion.
Consequently, the security of the authorization depends on how
strong the token is (and also whether the server enforces it). Any
disclosure, capture, prediction, brute force, or ixation of the se-
curity tokens will lead to severe atacks such as account hijack-
ing, where an atacker is able to fully impersonate a victim to
get all of her personal data. Unfortunately, not all of the online
service providers follow the best practice when using the security
tokens for the authorization. For instance, we have observed weak
security tokens (e.g., just a very small integer) passing through
mobile apps. Meanwhile, we have also observed that even though
a service provider may have used strong security tokens (e.g., a
256-bit cryptographic hash), the server actually does not enforce
whether this token belongs to a particular user (i.e., the token) or
it is just a token. Given the fact that so many mobile apps used
in our daily lives, it is imperative to systematically identify these
Session D2:  Vulnerable Mobile AppsCCS’17, October 30-November 3, 2017, Dallas, TX, USA799vulnerable access control servers, otherwise users’ personal data
can be thus leaked.
To this end, this paper introduces AuthScope, a tool to auto-
matically identify the vulnerable access control servers, especially
the vulnerable authorizations, when given just mobile apps. Since
we do not have any source code of the sever side implementations,
we can only perform a blackbox analysis of the remote server by
generating and analyzing various network request and response
messages between the client and the server. To pinpoint the vul-
nerable access control implementations, our key insight is to use
diferential traic analysis, a widely used network protocol anal-
ysis technique (e.g., [13, 16, 17, 40, 47]), to recognize the network
protocol ields and then automatically substitute the ields of in-
terest and observe the server response to identify the vulnerable
services. One of the key challenges for a large scale study lies in
how to obtain the post-authentication request-and-response mes-
sage pairs for a given app. We have thus developed an adaptive
dynamic app activity explorer to perform an in-context analysis
and drive the app execution to automatically log in the service.
We have implemented AuthScope and tested it with 4, 838 very
popular mobile apps from Google Play. Note that these apps all
contain Facebook login and they belong to the top 10% of the mo-
bile apps in terms of the accumulated downloads in Google Play.
To our surprise, AuthScope has identiied 597 0-day vulnerable
access control implementations in the server side of 306 mobile
apps (with an upper bound of total install of 61 million). he
root cause of these vulnerabilities comes from the mistaken use of
either predictable IDs, or user’s email address, or user’s Facebook
ID for the authorization without (or enforcing) any security tokens.
Consequently, these online services can all be completely broken
by an adversary, and privacy sensitive or even secret data for up to
61 million mobile users can be leaked due to these vulnerabilities.
In short, we make the following contributions in this paper.
- Novel System. We present AuthScope, a novel tool to
automatically identify the vulnerable access control on the
server side. It does not require any code access of server’s
implementation, other than just the traic between an au-
thenticated user and the server.
- Eicient Techniques. We apply diferential traic anal-
ysis to automatically reverse engineer protocol ields of
interest, such as security tokens, and also we develop an
adaptive app activity exploration scheme to execute a mo-
bile app in a targeted way and apply it to trigger post-
authentication request messages.
- Practical Results. We have tested AuthScope with 4, 838
popular Android apps. Our tool has identiied 597 0-day
vulnerable access control implementations among the re-
mote servers of 306 mobile apps. We have made responsi-
ble disclosure to all of the vulnerable service providers.
2 BACKGROUND
In this section, we present necessary background in order to under-
stand the common mistakes and root causes of vulnerable access
control implementations in online services. We begin with the
basic concepts of authentication and authorization in §2.1, and
then examine why the authorization in UNIX/Linux is secure in
§2.2. Finally, we discuss how a typical secure authorization in an
1
2
3
4
User Credential
Access Token
Access Token, Resource
Response
Figure 1: A Simpliied Authentication and Authoriza-
tion Protocol in Online Services.
online service is implemented and its practical security issues in
§2.3.
2.1 Authentication and Authorization
When providing private resources to multiple users, it oten re-
quires two security services: authentication and authorization.
- Authentication. he process of verifying a user’s iden-
tity is called authentication. In a multi-user system, it is
crucial to accurately identify who makes the request. A
widely used approach to perform authentication is to use
a password system in which a user’s identity is veriied by
checking with a hashed password typed during the login.
Also, authentication typically only needs to be performed
once; otherwise it will be annoying to the user.
- Authorization. he process of granting the access of spe-
ciic resources based on user’s privileges or permissions is
called authorization. Not that authentication provides the
proof of identity, but it does not describe the resources
that are allowed to be accessed by the authenticated user.
For instance, a user is authenticated before accessing a
database, but this does not tell the database system which
data the user is entitled to access. For this, it requires the
authorization service.
2.2 Authorization Security in UNIX/Linux
For a multi-user operating system such as UNIX/Linux, right ater
an authenticated user logs in, the system will automatically assign
a UID (which is just an integer) based on the proile in the system
(e.g., /etc/password) and create a shell process to serve the user’s
request. his shell process will interact with the system on behalf
of the user with the assigned UID that is maintained by the process
descriptor in the kernel. To change the UID of a process or a user,
it must invoke system calls.
More speciically, to ensure the security, any access to a re-
source needs to invoke system calls, in which access control is
enforced based on the UID and permissions. An adversary cannot
forge his or her UID to someone else’s even though the UID is
known, because the kernel remembers the UID and tracks it at
the corresponding process descriptor. For an adversary to really
change the UID, he or she must exploit sotware vulnerabilities in
the system such as bufer overlows in a daemon process. When
the user logs out, the shell process also terminates and the user has
to be authenticated again in order to use the system.
Session D2:  Vulnerable Mobile AppsCCS’17, October 30-November 3, 2017, Dallas, TX, USA8002.3 Secure Authorization in Online Service
As stated early, there are many challenges (e.g., a large volume of
users, untrusted client, etc.) when implementing a secure autho-
rization in online services. More importantly, online services oten
require high scalability and availability. Unlike the UNIX/Linux
authentication and authorization, which is stateful and kernel re-
members who has logged in and out, the majority of today’s online
service uses HTTP/HTTPS protocol, which is stateless. A state-
less protocol can be forced to behave as if it were stateful if the
server and the client can send the state along with every request
and response message. A typical way of accomplishing this in
HTTP/HTTPS is to use security tokens such as cookies or session
IDs. As illustrated in Figure 1, at a high level, the authentication
and authorization protocols in on-line services can be abstracted
using the following four steps:
- Step ❶: he client sends a request to the server with user
credentials such as a password. he server authenticates
the identity of the user via the password, social single
sign on (e.g., Facebook Connect), or other means. To pre-
vent any leakage of the credentials, transport layer secu-
rity (TLS) is oten used to ensure the communication se-
curity.
- Step ❷: he server creates a randomly generated token
and binds it with the authenticated user, and the server
then transmits the token back to the client.
- Step ❸: he client includes the server provided token on
subsequent requests to the server as a proof of identity, the
server then grants or rejects the user access to protected
resources based on her permissions.
- Step ❹: he server responds to the user request with the
appropriate information.
Sometimes, there are even more simpliied implementation of
the protocol and the client does not need to complete the irst three
steps to access a resource stored in the server, if the client knows
(e.g., distributed via an email irst) the resource ID (RID in short)
and this RID is suiciently random. For instance, when using
Overleaf, an online Collaborative Writing and Publishing service,
to share a paper repository, the user could just sent the URLs (e.g.,
https://www.overleaf.com/9357323vdzpzwzmwdmx) generated by
Overleaf. Only the recipient who has the URL can access the pa-
per repository because the RID (e.g., 9357323vdzpzwzmwdmx,
which is essentially a token) is suiciently random. Also, in this
case, the server does not have to remember who holds the RID:
anyone who has it can access the repository. hat is, the binding
of the token to a user is performed separately (e.g., managed by
the user not by the server).
Practical Issues. According to the above discussion, we can no-
tice that proper generation and use of security tokens (or RIDs) is
paramount to ensure the authorization security. In theory, because
the token (or RID) is generated at the time of login (or creation)
and is random and unguessable, its presence suiciently serves as
proof that the request really comes from the authenticated user to
whom the token (or RID) was assigned.
In reality, however, we
believe not all developers would have followed such best practice,
and there will be many poorly engineered servers (as those poorly
engineered mobile apps sufered from various vulnerabilities iden-
tiied in the past few years such as component hijacking [24], in-
formation leakage [9]), and privilege escalation [44]).
More speciically, there will be a variety of issues when imple-
menting the authorization security on the server side. For instance,
is the security token (or RID) suiciently random? Has the server
really enforced the check of the security tokens? Even though the
server checked the token, has it really made sure it is the token
binded to a particular user or it is just a token (a token vs. the
token)? Does the user have the permissions to access the protected
resources? With these questions in mind, we would like to perform
a large scale, systematic study of how online service providers
implement their access control for mobile users, and identify those
vulnerable ones if there is any.
3 OVERVIEW
he goal of this work is to understand how online service providers
implement their access control of user resources, and identify those
servers that are vulnerable to account hijacking and private infor-
mation leakage, by just analyzing the traic between the mobile
apps and the server. While there are a variety of ways to do so,
we seek to design an approach that is scalable, automated, and
systematic. In this section, we irst use a running example (§3.1) to
discuss various challenges (§3.2) we have to solve, and then give
an overview of our system (§3.3).
3.1 A Running Example
To illustrate the problem clearly, we use a running example from a
popular social app named W 1 that manages users’ pets (e.g., dogs)
and track their activities. W app is very interesting in that it ac-
tually contains a vulnerable access control implementation even
though it uses strong security tokens for user authorization.
In particular, as illustrated in Figure 2, right ater a legitimate
user logs in the app, the W client will automatically send a request
to the server to get all the notiication messages (which are pri-
vate resources belonging to this particular user). For each speciic
notiication message, the server will assign an RID (e.g., 433222
and 433227) and send the response message containing the RID to
the client, as shown in Figure 2(a) and Figure 2(b), the request and
response message pairs for user Alice and Bob we registered with
the service, respectively.
We can observe that the server of W does use a user speciic ran-
dom string as the security token (i.e., as shown in the in_app_token
ield). he server also assigns two integers, namely 21690 as Al-
ice’s user ID (UID in short) and 21691 as Bob’s UID. Unfortunately,
if we substitute the UID in the post-authentication request mes-
sage of Alice with the value from Bob’s, e.g., replacing 21690 with
21691, we can successfully read Bob’s private notiication message
by using Alice’s token as shown in Figure 3.
herefore, as can be noticed, the server of W has made either of
the two following mistakes:
- No enforcement of the security token whether or not