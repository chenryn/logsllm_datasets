var_14  
= dword ptr -14h 
var_10  
= dword ptr -10h 
arg_0   
= dword ptr 8 
push     ebp 
mov     ebp, esp 
sub     esp, 18h 
mov     eax, [ebp+arg_0] 
mov     edx, [eax+4] 
mov     eax, [ebp+arg_0] 
mov     eax, [eax] 
mov     [esp+18h+var_10], edx 
mov     [esp+18h+var_14], eax 
mov     [esp+18h+var_18], offset aDD ; "%d; %d\n" 
call     _printf 
leave 
retn 
_ZN1c4dumpEv  
endp 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 51 章  C++ 
515 
这个函数在其内部表征中只有一个参数。这个参数就是这个对象的 this 指针。 
本函数可以用 C 语言重写如下： 
void ZN1c4dumpEv (int *obj) 
{ 
  printf ("%d; %d\n", *obj, *(obj+1)); 
}; 
综合本节的各例可知，MSVC 和 GCC 的区别在于函数名的名称编码风格以及传递 this 指针的具体方
式 （MSVC 通过 ECX 传递，而 GCC 以函数的第一个参数的方式传递）。 
GCC-x86-64 
在编译 64 位应用程序的时候，GCC 通过 RDI、RSI、RDX、RCX、R8 以及 R9 这几个寄存器传递函
数的前 6 个参数。它通过 RDI 寄存器，以第一个函数参数的形式传递 this 指针。另外，整数型 int 数据依
然是 32 位数据。它还会不时使用转移指令 JMP 替代 RET 指令。 
指令清单 51.7  x64 下的 GCC 4.4.6  
; default ctor 
_ZN1cC2Ev: 
    mov  DWORD PTR [rdi], 667 
    mov  DWORD PTR [rdi+4], 999 
    ret 
; c(int a, int b) 
_ZN1cC2Eii: 
    mov  DWORD PTR [rdi], esi 
    mov  DWORD PTR [rdi+4], edx 
    ret 
; dump() 
_ZN1c4dumpEv: 
    mov  edx, DWORD PTR [rdi+4] 
    mov  esi, DWORD PTR [rdi] 
    xor  eax, eax 
    mov  edi, OFFSET FLAT:.LC0 ; "%d; %d\n" 
    jmp  printf 
51.1.2  类继承 
继承而来的类与前文的简单结构体相似，但是它可以对父类进行扩展。 
我们先来看一个简单的例子： 
#include  
class object 
{ 
    public: 
        int color; 
        object() { }; 
        object (int color) { this->color=color; }; 
        void print_color() { printf ("color=%d\n", color); }; 
}; 
class box : public object 
{ 
    private: 
        int width, height, depth; 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
516 
逆向工程权威指南（下册） 
    public: 
        box(int color, int width, int height, int depth) 
        { 
            this->color=color; 
            this->width=width; 
            this->height=height; 
            this->depth=depth; 
        }; 
        void dump() 
        { 
            printf ("this is box. color=%d, width=%d, height=%d, depth=%d\n", color, width,  
     height, depth); 
        }; 
}; 
class sphere : public object 
{ 
private: 
    int radius; 
public: 
    sphere(int color, int radius) 
    { 
        this->color=color; 
        this->radius=radius; 
    }; 
    void dump() 
    { 
        printf ("this is sphere. color=%d, radius=%d\n", color, radius); 
    }; 
}; 
int main() 
{ 
    box b(1, 10, 20, 30); 
    sphere s(2, 40); 
    b.print_color(); 
    s.print_color(); 
    b.dump(); 
    s.dump(); 
    return 0; 
}; 
我们共同关注 dump()函数（又称方法）以及 object::print_color()的指令代码，重点分析 32 位环境下有
关数据类型的内存存储格局。 
下面所示的是几个不同的类的 dump()方法，它们是在启用优化编译选项/Ox 和/Ob0 后，由 MSVC 2008
产生的代码。 
指令清单 51.8  MSVC 2008 带参数/Ob0 的优化 
??_C@_09GCEDOLPA@color?$DN?$CFd?6?$AA@ DB 'color=%d', 0aH, 00H ; `string' 
?print_color@object@@QAEXXZ PROC ; object::print_color, COMDAT 
; _this$ = ecx 
    mov   eax, DWORD PTR [ecx] 
    push eax 
; 'color=%d', 0aH, 00H 
    push OFFSET ??_C@_09GCEDOLPA@color?$DN?$CFd?6?$AA@ 
    call _printf 
    add  esp, 8 
    ret  0 
?print_color@object@@QAEXXZ ENDP ; object::print_color 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 51 章  C++ 
517 
指令清单 51.9  MSVC 2008 带参数/Ob0 的优化 
?dump@box@@QAEXXZ PROC ; box::dump, COMDAT 
; _this$ = ecx 
    mov   eax, DWORD PTR [ecx+12] 
    mov   edx, DWORD PTR [ecx+8] 
    push eax 
    mov   eax, DWORD PTR [ecx+4] 
    mov   ecx, DWORD PTR [ecx] 
    push edx 
    push eax 
    push ecx 
; 'this is box. color=%d, width=%d, height=%d, depth=%d', 0aH, 00H ; `string' 
    push OFFSET ??_C@_0DG@NCNGAADL@this?5is?5box?4?5color?$DN?$CFd?0?5width?$DN?$CFd?0@ 
    call _printf 
    add   esp, 20 
    ret   0 
?dump@box@@QAEXXZ ENDP ; box::dump 
指令清单 51.10  MSVC 2008 带参数/Ob0 的优化 
?dump@sphere@@QAEXXZ PROC ; sphere::dump, COMDAT 
; _this$ = ecx 
    mov   eax, DWORD PTR [ecx+4] 
    mov   ecx, DWORD PTR [ecx] 
    push eax 
    push ecx 
; 'this is sphere. color=%d, radius=%d', 0aH, 00H 
    push OFFSET ??_C@_0CF@EFEDJLDC@this?5is?5sphere?4?5color?$DN?$CFd?0?5radius@ 
    call _printf 
    add esp, 12 
    ret 0 
?dump@sphere@@QAEXXZ ENDP ; sphere::dump 
因此，这里是内存的基本排列： 
① 父类 object 对象的存储格局如下所示。 
offset 
description 
+0x0 
int color 
② 继承类对象：box 和 sphere（分别为盒子和球体）的存储格局分别如下面两张表所示。 
box 
offset 
description 
+0x0 
int color 
+0x4 
int width 
+0x8 
int height 
+0xC 
int depth 
sphere 
offset 
description 
+0x0 
int color 
+0x4 
int radius 
下面分析一下函数主体 main()。 
指令清单 51.11  MSVC 2008 带参数/Ob0 的优化 
PUBLIC _main 
_TEXT SEGMENT 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
518 
逆向工程权威指南（下册） 
_s$ = -24 ; size = 8 
_b$ = -16 ; size = 16 
_main PROC 
    sub   esp, 24 
    push 30 
    push 20 
    push 10 
    push 1 
    lea   ecx, DWORD PTR _b$[esp+40] 
    call ??0box@@QAE@HHHH@Z ; box::box 
    push 40 
    push 2 
    lea   ecx, DWORD PTR _s$[esp+32] 
    call ??0sphere@@QAE@HH@Z ; sphere::sphere 
    lea   ecx, DWORD PTR _b$[esp+24] 
    call ?print_color@object@@QAEXXZ ; object::print_color 
    lea   ecx, DWORD PTR _s$[esp+24] 
    call ?print_color@object@@QAEXXZ ; object::print_color 
    lea   ecx, DWORD PTR _b$[esp+24] 
    call ?dump@box@@QAEXXZ ; box::dump 
    lea   ecx, DWORD PTR _s$[esp+24] 
    call ?dump@sphere@@QAEXXZ ; sphere::dump 
    xor   eax, eax 
    add   esp, 24 
    ret   0 
_main ENDP 
继承类必须在其基（父）类字段的后面加入自己的字段，因此基类和继承类的类成员函数可以共存。 
当程序调用类成员对象 object::print_color()时，指向对象 box 和 sphere 的指针是通过 this 指针传递的。由于
在所有继承类和基类中 color 字段的偏移量固定为 0（offset+0x0），所有类对象的类成员函数 object::print_color
都可以正常运行。 
因此，无论是基类还是继承类调用 object::print_color()，只要该方法所引用的字段的相对地址固定不变，
那么该方法就可以正常运行。 
假如基于 box 类创建一个继承类，那么编译器就会在变量 depth 的后面追加您所添加新的变量，以确
保基类 box 的各字段的相对地址在其继承类中固定不变。 
因此，当父类为 box 类的各继承类在调用各自的方法 box::dump()时，它们都能检索到 color、width、
height 以及 depths 字段的正确地址。因为各字段的相对地址不会发生变化。 
GCC 生成的指令代码与 MSVC 生成的代码几乎相同。唯一的区别是：GCC 不会使用 ECX 寄存器传递
this 指针，它会以函数的第一个参数的传递方式传递 this 指针。 
51.1.3  封装 
封装（encapsulation）的作用是：把既定的数据和方法限定为类的私有信息，使得其他调用方只能访问
类所定义的公共方法和公共数据、不能直接访问被封装起来的私有对象。 
在指令层面，到底有没有划分私有对象和公开对象的界限呢？ 
其实完全没有。 
我们来看看这一个简单的例子： 
#include  
class box 
{ 
    private: 
        int color, width, height, depth; 
    public: 
        box(int color, int width, int height, int depth) 
        { 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 51 章  C++ 
519 
            this->color=color; 
            this->width=width; 
            this->height=height; 
            this->depth=depth; 
        }; 
        void dump() 
        { 
            printf ("this is box. color=%d, width=%d, height=%d, depth=%d\n", color, width,height, depth); 
        }; 
}; 
我们启用 MSVC 2008 的优化选项/Ox 和/Ob0 编译上述程序，再查看类函数 box::dump()的代码。 
?dump@box@@QAEXXZ PROC ; box::dump, COMDAT 
; _this$ = ecx 
    mov   eax, DWORD PTR [ecx+12] 
    mov   edx, DWORD PTR [ecx+8] 
    push eax 
    mov   eax, DWORD PTR [ecx+4] 
    mov   ecx, DWORD PTR [ecx] 
    push edx 
    push eax 
    push ecx 
; 'this is box. color=%d, width=%d, height=%d, depth=%d', 0aH, 00H 
    push OFFSET ??_C@_0DG@NCNGAADL@this?5is?5box?4?5color?$DN?$CFd?0?5width?$DN?$CFd?0@ 
    call _printf 
    add   esp, 20 
    ret   0 
?dump@box@@QAEXXZ ENDP ; box::dump 
下面这个表格显示了类的变量在内存中的偏移量的分布情况。 
offset 
description 
+0x0 
int color 
+0x4 
int width 
+0x8 
int height 
+0xC 
int depth 
所有字段都是无法被其他函数直接访问的私有变量。但是，既然我们知道了这个对象的内存存储格局，
能不能写出一个修改这些变量的程序呢？ 
为此，我们可以构造一个名称为 hack_oop_encapsulation()的函数。如果不做调整的话，直接访问既定
字段的源程序大致会是： 
void hack_oop_encapsulation(class box * o) 
{ 
    o->width=1; // that code cant be compiled': 
                // "error C2248: 'box::width' : cannot access private member declared in class 'box'" 
}; 
当然，上述代码不可能被成功编译出来。然而，只要把 box 的数据类型强制转换为整型数组的话，我
们就可以通过编译并且直接修改相应字段。 
void hack_oop_encapsulation(class box * o) 
{ 
    unsigned int *ptr_to_object=reinterpret_cast(o); 
    ptr_to_object[1]=123; 
}; 
上述函数的功能十分简单：它将输入数据视为整型数组，然后将数组的第二个元素、一个整型 int 值
修改为 123 。 
?hack_oop_encapsulation@@YAXPAVbox@@@Z PROC ; hack_oop_encapsulation 
    mov eax, DWORD PTR _o$[esp-4] 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
520 
逆向工程权威指南（下册） 
    mov DWORD PTR [eax+4], 123 
    ret 0 
?hack_oop_encapsulation@@YAXPAVbox@@@Z ENDP ; hack_oop_encapsulation 
接下来，我们验证一下它的功能。 
int main() 
{ 
    box b(1, 10, 20, 30); 
    b.dump(); 
    hack_oop_encapsulation(&b); 
    b.dump(); 