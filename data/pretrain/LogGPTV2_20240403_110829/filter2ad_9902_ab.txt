constant ADVISORS_AMOUNT = 5 * onePercent;` 创始人要15%: `uint256 constant
FOUNDERS_AMOUNT = 15 * onePercent;` 销售出了60%: `uint256 constant HOLDERS_AMOUNT
= 60 * onePercent;` 保留了20%: `uint256 constant RESERVE_AMOUNT = 20 *
onePercent;`
对应到下面三个判断：
    require(advisorsAllocatedAmount + _amount  115792089237316195423570985008687907853269984665640564039457583645083025639937`
经过后续的审计，发现该合约代码中的`own`变量只能由Owner修改，所以该漏洞只能被Owner利用
#### 3\. CVE-2018-11809
该漏洞被称为：”超额铸币“，但实际和之前的漏洞没啥区别
含有该漏洞的合约Playkey
(PKT）源码：
存在漏洞的函数:
      function mint(address _holder, uint256 _value) external icoOnly {
        require(_holder != address(0));
        require(_value != 0);
        require(totalSupply + _value  115792089237316195423570985008687907853269984665640564039457584007913129589938`
#### 4\. CVE-2018-11812
该漏洞被称为：“随意铸币”
相关漏洞合约 Polymath
(POLY)源码：
具有漏洞的函数:
    function mintToken(address target, uint256 mintedAmount) onlyOwner {
        balanceOf[target] += mintedAmount;
        Transfer(0, owner, mintedAmount);
        Transfer(owner, target, mintedAmount);
    }
这个漏洞很简单，也很好理解，Owner可以随意增加任意账户的代币余额，可以想象成，银行不仅能随心所欲的印钞票，还能随心所以的扣你的钱
因为Owner是在合约部署的时候被设置成合约部署者的账户地址，之后也只有Owner能修改Own账户地址，所以该漏洞只能被Owner利用
这个我觉得与其说是漏洞，不如说是Owner留下的“后门”
#### 5\. CVE-2018-11687
该漏洞被称为：“下溢增持”
相关漏洞合约Bitcoin Red
(BTCR)源码：
相关的漏洞函数:
    function distributeBTR(address[] addresses) onlyOwner {
        for (uint i = 0; i 
在该CVE的描述中，存在漏洞的函数是:
    function sell(uint256 amount) {
      require(this.balance >= amount * sellPrice);      // checks if the contract has enough ether to buy
      _transfer(msg.sender, this, amount);              // makes the transfers
      msg.sender.transfer(amount * sellPrice);          // sends ether to the seller. It's important to do this last to avoid recursion attacks
    }
并且描述的漏洞原理是:
> sellPrice被修改为精心构造的大数后，可导致amount *
> sellPrice的结果大于整数变量(uint256)最大值，发生整数溢出，从而变为一个极小值甚至归零`
相关函数如下：
    function buy() payable {
      uint amount = msg.value / buyPrice;               // calculates the amount
      _transfer(this, msg.sender, amount);              // makes the transfers
    }
    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner {
      sellPrice = newSellPrice;
      buyPrice = newBuyPrice;
    }
该漏洞的利用流程如下：
  1. 管理员设置`buyPrice = 1 ether`, `sellPrice = 2^255`
  2. 用户A买了两个以太币价格的代币: buy({value:toWei(2)})
  3. 用户A卖掉两个代币: send(2)
  4. 用户A将会收到`2*sellPrice = 2^256`价格的Wei
  5. 但是因为`transfer`的参数是uint256, 所以发生了溢出，用户A实际得到0Wei
表面上看这个漏洞还是有危害的，但是我们仔细想想，这个漏洞其实是比较多余的，我们可以使用更简单的步骤达到相同的目的:
  1. 管理员设置`buyPrice = 1 ether`, `sellPrice = 0`
  2. 用户A买了两个以太币价格的代币: buy({value:toWei(2)})
  3. 用户A卖掉两个代币: send(2)
  4. 用户A将会收到`2*sellPrice = 0`价格的Wei
我认为该合约最大的问题在于Owner可以随意设置代币的买入和卖出价格。
顺带提一下这个问题也是前面peckshield公布的“tradeTrap”漏洞()提到的“Security
Issue 2: Manipulatable Prices and Unfair Arbitrage” 是同一个问题。
### 总结
经过上面的分析，在这6个CVE中，虽然都是整型溢出，但第一个CVE属于理论存在，但实际不可实现的整型上溢出漏洞，剩下5个CVE都属于对管理者有利，会损害用户利用的漏洞，或者可以称为“后门”，也正是这个原因也导致了一些关于需要Owner触发漏洞意义讨论
如果我们把智能合约类比为传统合同，智能合约代码就是传统合同的内容，但是和传统的合同相比，智能合约拥有三个利益团体，一个是编写合约代码的人(智能合约中的Owner，或者我们可以称为甲方)，使用该合约的其他人(我们可以称为乙方)，跟该智能合约无关的其他人(比如利用合约漏洞获利的黑客)。从这个角度来看Owner条件下触发的漏洞在理论上是可以损害到乙方的利益，如对于存在“恶意”的owner或者黑客配合其他漏洞获取到owner权限的场景上来说，还是有一定意义的。
另外从整个上市交易流程来看，我们还需要关注到“交易所”这个环节，交易所的风控体系在某种程度上可以限制这种“恶意”的owner或黑客利用。
由此可见合约审计对于“甲方”、“乙方”、交易所都有重要的意义。
知道创宇智能合约安全审计：
欢迎扫码咨询：
### 参考链接
  1. 
  2. 
* * *