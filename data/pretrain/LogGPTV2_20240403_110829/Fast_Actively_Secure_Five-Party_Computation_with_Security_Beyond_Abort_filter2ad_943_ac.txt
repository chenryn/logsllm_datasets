д′
put r ⊕ λ
v ]R (We use [·]S ,[·]R to denote the
shares of sender and receiver of OT respectively). Each garbler Pд
now computes its share, λ
uv, of the product λuv = λu λv as the sum
д
of its local product λ
v and the shares obtained from OTs either
д
д
u λ
д′
v ]S) ⊕
as a sender or as a receiver i.e., λ
д′
(⊕д(cid:44)д′[λ
v]R).
u λ
Next, to compute 2), where ∆д belongs to Pд and ∆дλγ =
∆д(λ
γ ⊕ λ
γ ), each garbler Pд first locally computes ∆дλ
γ ⊕ λ
γ ⊕ λ
3
1
2
4
д
γ
д′
γ , д (cid:44) д′, Pд acts as a sender with
and then for each cross-term ∆дλ
д′
each Pд′ as receiver in an OT to get their respective shares [∆дλ
γ ]S
д′
and [∆дλ
γ ]R. Finally, the share of Pд for the product ∆дλγ is set
д′
γ ]S), while the share of
to the following sum: ∆дλ
д′
γ ]R. We now present the functionality FGC
each Pд′ is set to [∆дλ
formally in Fig 3. Partitioning the set of all super-CTs into its 4
1 || GC
3 || GC
4
constituent CTs, we can view the GC as GC
where дth partition is contributed by garbler Pд.
u) and Pд′ as receiver, holding λ
д′
v denoted by [λ
γ ⊕ (⊕д′(cid:44)д[∆дλ
v ⊕ (⊕д(cid:44)д′[λ
2 || GC
д
uv = λ
д
u λ
д
u λ
д
u λ
д
u λ
д
д
u λ
д
u λ
д
д
д
Evaluation of the DGC. Starting with the masked bits of all inputs
and corresponding super-keys, the evaluator P5 evaluates the DGC
in topological order, with XOR gate evaluated using free-XOR. For
an AND gate with input wires u,v and output wire w, P5, with in-
)}д∈[4] and blinded input bits bu, bv,
put super-keys {(k
decrypts (bu, bv)th row’s super-CT to obtain the super-key corre-
sponding to blinded output bit xuxv ⊕ λw and the blinded output
bit itself. The blinded bits for output wires give clear output when
XORed with their respective masks.
д
v ,bv
д
u,bu
, k
w ,0, kд
output wire of XOR gates.
∆д,except the output wire of XOR gates.
w ,1 ∈ {0, 1}κ for every wire w s.t kд
Let C be the circuit, κ, the security parameter and F, a double-keyed PRF
[13]. Each garbler Pд prepares the private input set ISetд consisting of:
– An offset string ∆д ∈ {0, 1}κ .
w ∈ {0, 1} of the masking bit for each wire w, barring the
– A share λд
w ,0 ⊕
– Keys kд
Input: On receiving message(Input, ISetд) from each garbler Pд , д ∈ [4],
compute super-keys and mask bits for all wires (those for XOR output
wires are computed as per free-XOR). For every AND gate with input
wires u, v; output wire w, the дth CT in the γ th super-CT for д, γ ∈ [4]
is computed as follows. For a, b ∈ {0, 1}, let γ = 2a + b + 1, λ1 = λu λv
⊕ λw , λ2 = λu λv ⊕ λw , λ3 = λu λv ⊕ λw , λ4 = λu λv ⊕ λw , λγ =
⊕д∈[4]λд
λγ , д′ ∈ [4].
λγ ]д denote the дth additive share of ∆д′
γ and [∆д′
w ,1 = kд
cд
γ =Fkд
(cid:124)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:123)(cid:122)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:125)
u ,a ,kд
v ,b
(w ||д)
Pad
⊕( λд
γ(cid:124)(cid:123)(cid:122)(cid:125)
share of
blinded
output
|| {[∆д′
(cid:124)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:123)(cid:122)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:125)
λγ ]д }д′(cid:44)д
Pд’s share of the
output key of Pд′
(cid:124)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:123)(cid:122)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:125)
w ,0 ⊕ [∆д λγ ]д
|| kд
Pд’s share of the
output key of Pд
)
Output: On receiving Output from parties, send дth partition GCд =
{{cд
w ,1)}∀ output wires w} to Pд where H
is the collision resistant hash (Appendix B).
γ }γ ∈[4]∀ AND gates}||{{H(kд
w ,0), H(kд
Figure 3: Functionality FGC
д
u λ
д′
v , ∆дλ
3.3 Distributed Garbling with AOT and SD
As iterated before, we assume that all randomness required by a
party Pд for 4DG is generated using a random seed sд. The SD then
enables a party-emulation technique where the seed sд of Pд is
given to exactly two other garblers in Sд who can now emulate the
role of Pд. Thus, each partition of GC, GCд is generated by 3 garblers
holding sд, offering security against at most two corrupt garblers.
This also preserves input privacy as: (i) when two garblers are
corrupt (and together hold all seeds), the evaluator is surely honest
and protects input privacy; (ii) when a garbler and the evaluator
are corrupt, one seed remains hidden, assuring input privacy. The
SD results in a prime gain in the underlying semi-honest 4DG–
replacing standard OTs with 1-round AOTs: The standard OTs used
д′
γ (д (cid:44) д′) in the additive-
to compute each cross-term λ
sharing of λu λv,∆дλγ respectively, are replaced with AOTs. The
SD further allows each AOT to be run s.t the attesters hold both
seeds that the sender and receiver mutually-exclusively hold. This
implies that the attesters are aware of the inputs of both sender and
receiver at the onset, thus leading to a one-round instantiation of
AOT. Note that the party-emulation technique does not increase
the number of OTs required to three times the underlying semi-
honest 4DG but instead keeps it the same, since SD ensures that,
for each garbler Pi, OTs are needed in the computation of every
д′
v , ∆дλ
д
u λ
λ
For clarity, below we demonstrate, how a particular product
uv (of λu λv) is computed by parties in S1 ({P1, P3, P4}),
1
share λ
1
uv consists of summands as
utilizing AOT and SD. The share λ
listed in the first column of the table below. We explain how P1
1
1
computes each summand. Except λ
v, the remaining summands
u λ
correspond to cross-terms that P1 originally obtained via OT either
as sender or receiver. Now, all summands that correspond to P1
enacting a sender (λ
v , д (cid:44) 1) can be sampled from s1, as the
д
sender’s share is a random bit. For the summands where P1 enacts
д′
γ (д (cid:44) д′) only when one of д, д′ is not in Si.
1
u λ
Session 7C: Secure Computing VCCS ’19, November 11–15, 2019, London, United Kingdom1577д
u λ
1
v , д (cid:44) 1), AOT is needed only for the summand, λ
2
1
receiver (λ
u λ
v
that involves s2 which P1 does not own, while for other terms, P1
can locally compute its share with the knowledge of both seeds. As
for the AOT, P1 acts as receiver with seed s1, P2 acts as sender with
seed s2, and {P3, P4} act as attesters with {s1, s2}. Similarly, {P3, P4}
can compute the summands of λ
1
uv as indicated in the table.
P1 : (s1, s3, s4)
local
P3 : (s1, s2, s3)
local
P4 : (s1, s2, s4)
local
v]S
v , [λ1
v]S
λ1
u λ1
u λ2
v]S , [λ1
[λ1
u λ4
u λ3
v]R
[λ2
u λ1
v]R
[λ3
u λ1
[λ4
v]R
u λ1
Our final garbling and evaluation protocols appear in Figs 4-5.
local
local
F4AOT(P2, P3, {P1, P4})
F4AOT(P2, P1, {P3, P4})
local
local
local
F4AOT(P2, P4, {P1, P3})
local
Efficiency of 4DG. Our 4DG is superior to the state-of-the-art [13]
computationally while retaining their communication efficiency.
Concretely, for 4DG, [13] needs 4 PRF computations per CT of the
super-CT whereas our scheme needs 1 PRF computation per CT.
Since, the number of PRFs computed depends on the number of
parties, this difference is significant for large n i.e. O(n
2) versus n
PRF computation per super-CT.
Attested OT Instantiation. For the attested OT functionality
F4AOT defined in Fig 2, we now provide a standalone instantia-
tion. The sender of the AOT, Ps having inputs m0, m1 samples ran-
dom r0, r1 ← {0, 1}κ and generates the commitments: (c0, o0) ←
Com(pp, m0), (c1, o1) ← Com(pp, m1). Ps sends (m0, r0, m1, r1) to
the attesters and (pp, c0, c1) to the receiver. The receiver Pr sends
the choice bit b to the attesters. The attesters exchange the copy of
message received from Ps , Pr amongst themselves for correctness.