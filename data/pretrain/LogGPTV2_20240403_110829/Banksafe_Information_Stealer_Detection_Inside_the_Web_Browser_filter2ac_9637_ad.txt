0
0
161
730
143
41
6
2
3
3
0
928
8
13
1
3
1
3
1
-
30
5.5 Legitimate Browser Hooking
While evaluating the Banksafe BHO implementation we came across several
legitimate software products that were installing hooks into Internet Explorer.
This can lead to false positives if detection of legitimate hooks, as described
above, is missing.
Products that were found to hook functions inside Internet Explorer suppos-
edly to monitor network traﬃc are: Comodo Firewall, McAfee Internet Security
and Microsoft Bing Toolbar.
With the release of Windows 2000, Microsoft included the ﬁrst version of their
Shims framework [2], a hooking framework intended to make the behaviour of al-
tered APIs backwards compatible. Shims generally supports loader hooks, EAT
hooks and inline hooks. For developers, Shims is available via the Application
Compatibility Framework [4]. Hooks placed via this framework point to the
signed system library appcompat.dll. For Internet Explorer, Microsoft also gen-
erated custom implementations of Shims. Depending on the version of Internet
Explorer and Windows, the hooks point to one of the signed system libraries
ieframe.dll or ieshims.dll.
Banksafe Information Stealer Detection Inside the Web Browser
277
All of these hooks could be identiﬁed as legitimate by checking the hook target
module for a trusted certiﬁcate and we did not encounter any false positives while
testing other popular software.
6 Discussion
Despite the generally positive results, some limitations exist. The ﬁngerprint and
therefore the identiﬁcation of information stealers is dependent on the version
of the trojan, because obviously in future versions the author may change which
functions are hooked. For the Spyeye trojan, we could observe a range of diﬀerent
ﬁngerprints. Even though the classiﬁcation may turn incorrect in these cases, the
detection of the hooks is still possible and can be used to identify manipulation
and mitb in general.
Also, the ﬁngerprints may diﬀer between installations on distinct Windows
systems. This is especially true for diﬀerent major versions, but may even be
for diﬀerent patchlevels. The reason for that is that the trojan authors may
hook APIs that only exist in some installations of Windows. These functions
can only be hooked - and therefore be integrated into the ﬁngerprint - on these
installations.
Another case is the installation of multiple trojans on a single system. As the
behaviour of the trojans originating from this interference must be considered
as undeﬁned, it is also impossible to tell how exactly our method reacts.
By now, there is no known information stealer that is able to infect 64-bit-
processes so we could not test our proposed detection method with 64-bit web
browsers.
We also found one banking trojan (Katusha) that we could not detect with
our method because it was implemented as a browser helper object and did not
directly hook API calls. In order to detect this type of trojan, other techniques
for inspecting BHOs have to be used.
7 Summary
Information stealers are a growing threat that can easily contaminate any system
connected to the Internet. They steal credit card details, banking credentials,
and all types of information that can be turned into money. Usually, the data
is stolen from inside the browser before it is sent. Since encryption is bypassed
by manipulating the browser, this man-in-the-browser attacks allow criminals to
extract and manipulate all data that is send or received by the browser.
In this paper, we present an approach for detecting and classifying informa-
tion stealers by the manipulations they perform inside browsers. A ﬁngerprint is
created based on the individual manipulations or hooks. An overview about the
diﬀerent hooking techniques is contained, too. Even though many trojan families
have been around for quite some time, they are not reliably detected by existing
anti-virus solutions. The experiments that we conducted on a range of diﬀer-
ent products has shown that neither the detection based on signatures nor the
278
A. Buescher, F. Leder, and T. Siebert
detection based on heuristics is able to reliably identify specimen from known
families. Using the Banksafe tool, we were able to reliably identify all manipu-
lations inside the browser. The tests conducted on a set of 1,045 samples of the
infamous Zeus and SpyEye families have shown that the majority of the speci-
men have a characteristic ﬁngerprint. This fact can be used to reliably classify
the majority of samples. No false positives were found within the class of unique
ﬁngerprints. Besides these most prominent families, Banksafe was also able to
identify other information stealers, like Patcher, Carberp, Silentbanker, Bebloh,
and Gozi. Their detection is just as reliable as the detection of Zeus and Spy-
Eye but more samples have to be tested in order to determine the classiﬁcation
performance.
8 Future Work
It can be safely assumed that further distribution of 64-bit operating systems
and browsers will lead to the development and distribution of 64-bit information
stealers. It remains to be seen if the techniques currently used in these trojans
can be ported to 64-bit or if new techniques emerge. If new techniques emerge, it
will likely not be suﬃcient to port the countermeasures presented in this paper to
64-bit. We found only one trojan (Katusha) that was implemented as a BHO. If
this technique becomes more widespread, countermeasures have to be developed.
Another problam that awaits solution is the variability of ﬁngerprints. While it
is possible to generate a ﬁngerprint for each trojan version for each aﬀected Win-
dows operating system, additional research may lead to a more generic approach
of classifying information stealers using their hooking characteristics.
References
1. New Spyeye gains Zeus features,
http://blogs.rsa.com/rsafarl/new-spyeye-gains-zeus-features-a-
detailed-analysis-of-spyeye-trojan-v1-3/ (last visit March 2011)
2. Understanding Shims,
http://technet.microsoft.com/en-us/library/dd837644%28WS.10%29.aspx
(last visit March 2011)
3. Virustotal web antivirus scan service by hispasec sistemas,
http://www.virustotal.com/ (last visit March 2011)
4. Windows XP Application Compatibility Technologies,
http://technet.microsoft.com/en-us/library/bb457032.aspx
March 2011)
(last
visit
5. Abuse.ch. abuse.ch spyeye tracker, https://spyeyetracker.abuse.ch/ (last visit
March 2011)
6. Abuse.ch. abuse.ch zeus tracker, https://zeustracker.abuse.ch/ (last visit
March 2011)
7. Apel, M., Bockermann, C., Meier, M.: Measuring similarity of malware behavior.
In: Proceedings of the IEEE 34th Conference on Local Computer Networks, pp.
891–898 (2009)
Banksafe Information Stealer Detection Inside the Web Browser
279
8. Bailey, M., Andersen, J., Morleymao, Z., Jahanian, F.: Automated classiﬁcation
and analysis of internet malware. In: Kruegel, C., Lippmann, R., Clark, A. (eds.)
RAID 2007. LNCS, vol. 4637, pp. 178–197. Springer, Heidelberg (2007)
9. Blunden, B.: The Rootkit Arsenal: Escape and Evasion in the Dark Corners of the
System. Jones and Bartlett Publishers, Inc., USA (2009)
10. Butler, J., Hoglund, G.: System virginity veriﬁer. In: Black Hat 2004, Las Vegas,
USA (2004)
11. Coogan, P.: Symantec blog - spyeye bot versus zeus bot,
http://www.symantec.com/connect/de/blogs/spyeye-bot-versus-zeus-bot
(last visit March 2011)
12. F-Secure. ZeuS Variants Targeting Mobile Banking,
http://www.f-secure.com/weblog/archives/00002123.html (last visit March
2011)
13. Garﬁnkel, T., Rosenblum, M.: A virtual machine introspection based architecture
for intrusion detection. In: Proc. Network and Distributed Systems Security Sym-
posium (February 2003)
14. Hoglund, G., Butler, J.: Rootkits: Subverting the Windows Kernel. Addison-Wesley
Professional, Reading (2005)
15. Hunt, G., Brubacher, D.: Detours: binary interception of win32 functions. In: Pro-
ceedings of the 3rd Conference on USENIX Windows NT Symposium, vol. 3, p.
14. USENIX Association, Berkeley (1999)
16. Husse, C.: Easyhook library, http://www.codeplex.com/easyhook (last visit
March 2011)
17. keung Luk, C., Cohn, R., Muth, R., Patil, H., Klauser, A., Lowney, G., Wallace, S.,
Janapa, V., Hazelwood, R.K.: Pin: Building customized program analysis tools with
dynamic instrumentation. In: Programming Language Design and Implementation,
pp. 190–200. ACM Press, New York (2005)
18. Krebs, B.: Operation trident breach,
http://krebsonsecurity.com/tag/operation-trident-breach/
(last visit March 2011)
19. Stevens, K., Jackson, D.: Zeus banking trojan report. Technical report, Dell Se-
cureWorks (March 2010)
20. Lanzi, A., Sharif, M.I., Lee, W.: K-tracer: A system for extracting kernel malware
behavior. In: Network and Distributed System Security Symposium, San Diego,
California (2009)
21. Leder, F., Plohmann, D.: Pybox - a python approach to sandboxing. In: 5th
SPRING Workshop, Bonn, Germany (April 2010) (GI SIG SIDAR)
22. Leder, F., Steinbock, B., Martini, P.: Classiﬁcation and detection of metamorphic
malware using value set analysis. In: Proceedings of the 4th International Confer-
ence on Malicious and Unwanted Software (October 2009)
23. Levine, J.G., Grizzard, J.B., Owen, H.L.: Detecting and categorizing kernel-level
rootkits to aid future detection. IEEE Security and Privacy 4, 24 (2006)
24. Litty, L., Lagar-Cavilla, H.A., Lie, D.: Hypervisor support for identifying covertly
executing binaries. In: Proceedings of the 17th Conference on Security Symposium,
pp. 243–258. USENIX Association, Berkeley (2008)
25. Lobo, D., Watters, P., Wu, X.: Rbacs: Rootkit behavioral analysis and classiﬁcation
system. In: International Workshop on Knowledge Discovery and Data Mining, pp.
75–80 (2010)
26. Lobo, D., Watters, P., Wu, X.-W.: Identifying rootkit infections using data min-
ing. In: 2010 International Conference on Information Science and Applications
(ICISA), pp. 1–7 (April 2010)
280
A. Buescher, F. Leder, and T. Siebert
27. Lobo, D., Watters, P., Wu, X.-W.: A new procedure to help system/network ad-
ministrators identify multiple rootkit infections. In: Proceedings of the 2010 Second
International Conference on Communication Software and Networks, ICCSN 2010,
Washington, DC, USA, pp. 124–128 (2010)
28. Pietrek, M.: An in-depth look into the win32 portable executable ﬁle format,
http://msdn.microsoft.com/en-us/magazine/cc301808.aspx (last visit March
2011)
29. Rieck, K., Holz, T., Willems, C., Duessel, P., Laskov, P.: Learning and classiﬁcation
of malware behavior. In: Zamboni, D. (ed.) DIMVA 2008. LNCS, vol. 5137, pp.
108–125. Springer, Heidelberg (2008)
30. Riley, R., Jiang, X., Xu, D.: Guest-transparent prevention of kernel rootkits with
vmm-based memory shadowing. In: Lippmann, R., Kirda, E., Trachtenberg, A.
(eds.) RAID 2008. LNCS, vol. 5230, pp. 1–20. Springer, Heidelberg (2008)
31. Riley, R., Jiang, X., Xu, D.: Multi-aspect proﬁling of kernel rootkit behavior. In:
Proceedings of the 4th ACM European Conference on Computer Systems, EuroSys
2009, pp. 47–60. ACM, New York (2009)
32. Rutkowska, J.: System virginity veriﬁer. In: Black Hat 2006, Washington, D.C.
USA (2006)
33. Seshadri, A., Luk, M., Qu, N., Perrig, A.: Secvisor: a tiny hypervisor to provide
lifetime kernel code integrity for commodity oses. SIGOPS Oper. Syst. Rev. 41,
335–350 (2007)
34. Tereshkin, A., Wojtczuk, R.: Introducing ring -3 rootkits. Technical report, Invis-
ible Things Lab, Wisconsin, USA (July 2009)
35. Wang, Z., Jiang, X., Cui, W., Wang, X.: Countering persistent kernel rootkits
through systematic hook discovery. In: Recent Advances in Intrusion Detection
(2008)
36. Wicherski, G.: pehash: A novel approach to fast malware clustering. In: Proceedings
of the 2nd Usenix Workshop on Large-scale Exploits and Emergent Threats (2009)
37. Yin, H., Liang, Z., Song, D.: Hookﬁnder: Identifying and understanding mal-
ware hooking behaviors. In: Network and Distributed System Security Symposium
(2008)
38. Yin, H., Poosankam, P., Hanna, S., Song, D.: HookScout: Proactive and binary
centric hook detection. In: Kreibich, C., Jahnke, M. (eds.) DIMVA 2010. LNCS,
vol. 6201, pp. 1–20. Springer, Heidelberg (2010)
39. Zhang, Q., Reeves, D.S.: Metaaware: Identifying metamorphic malware. In: Pro-
ceedings of the 23rd Annual Computer Security Applications Conference, pp. 411–
420 (2007)