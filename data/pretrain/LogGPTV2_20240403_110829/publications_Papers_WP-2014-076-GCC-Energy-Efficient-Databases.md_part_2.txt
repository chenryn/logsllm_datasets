but focus on different CPU frequencies, which indirectly with 7541 samples per second. The power consumption is
affectstheutility.Forasinglefixedtaskthatexecuteswithout computed digitally from individual readings for current and
interruptions, the utility is the inverse of the runtime so that voltage. During the experiment, all data processing happens
Eq. 2 can be reduced to to Eq. 3. onaseparatesystemtoavoidperturbationofthesystemunder
test.Thiscomprehensivemeasurementinfrastructureservesas
1/t 1 an answer to RQ1, but requires significant effort, as described
η = = (3)
E (P ×t) (P ×t2) by Hackenberg et al. [11].
Theprocessorsprovide15differentfrequenciesfrom1.2to
IV. APPROACHANDMETHODOLOGY
2.9GHz and the turbo mode with frequencies up to 3.8GHz,
Computational complexity (i.e., big O notation) is often depending on thermal and power budget. Both, frequency
a first step in assessing the performance of an algorithm. and voltage are set uniformly for all cores of a socket
However, in practice, the best big O algorithm may perform by the hardware. As demonstrated in [12], the available
worse due to large constant factors or practical memory memory bandwidth depends on the core frequency for the
constraints. Sorting is such an example, where quicksort is Sandy Bridge-EP architecture. Earlier intel architectures, such
often used as default even though it does not have the best astheoneusedin[3],providedaconstantmemorybandwidth
big O (worst case) performance. It is common practice to independent of the selected frequency. The variable memory
optimize implementations for run-time and, in most cases, bandwidth did not allow for a straight-forward selection of
optimizations will also reduce energy consumption. However, the optimal frequency for applications that become memory-
in recent hardware with increasing energy-efficiency features, bound at a certain frequency. However, our approach does not
the total energy consumption of the server per execution, the
052
energy consumption of the sockets, and the response time.
This enables to investigate whether a sweet spot frequency
002
exists and if static power consumption leads to a shift of the ]W[
sweet spot frequency for sockets, only compared to the whole rewoP
server. 051
CA
B. Software Setup: Sorting Algorithm
001
As mentioned before, data centres and network infrastruc-
tures serving millions of users in massive online applications
1.32 92 5: 50 20 2:0 e0 +12 1.395522e+1222:00:011.395522e+12 1.32 92 5: 50 20 2:0 e2 +1
TimeofDay[HH:mm:ss] are a key target for energy-efficiency with huge absolute sav-
ings, even for small percentages in relative savings. However,
Fig.3. Energytraceoftwosucceedingsortinginvocationswithidlephase. these systems are very complex. Due to the novelty of the
topic, we suggest to understand a well-known generic algo-
Powersupply&Fans Board SSD Sockets Total
rithm, sorting, which is used in many applications. According
≈26W ≈7W ≈1W ≈20W×2 ≈74W
tosourcescitedbyKnuth,morethan25percentoftherunning
TABLEI
time of computers has at some point been spent on sorting
STATICIDLEPOWERCONSUMPTIONOFTHESERVER.
[14], which may still be the case with today’s databases,
graphs, and other large data structures. Other software tasks
which are of interest but were not explored in this research
requirespecificbottleneckanalysis,becauseitusestheenergy include search, indexing, and executing arithmetic operations
measurementresultstoselectamongdifferentsettingsinstead. over large volumes of data.
2) Measurements: To investigate the energy consumption Our choice of sorting algorithms encompasses the ones
ofalgorithms,werundifferentsortalgorithmsfordifferentin- generallyconsideredthefastest.Inthefollowing,weelaborate
putsizesmultipletimes.Priortoeachinvocation,werandomly in two stable sort implementations – radix sort and counting
generate integer lists to be sorted. Across all invocations, sort – by closely following textbook descriptions. In addition,
we used lists of sizes between 10 and 50 million elements, we look at the already implemented non-stable sorting of the
alwayscontainingintegerswithavaluerangeof6million(i.e., C++ Standard Library (std::sort). These algorithms can be
0≤x<6×106). Each invocation is preceded by a pause of used to sort lists of integer values (or any data mappable
1 second to “cool down” the CPU and other resources (i.e., to integers). Depending on the size of the lists, the range
let them switch to idle mode). of the integer values to sort and the hardware in use, we
Measurements of sort invocations utilizing a single core have produced interesting trade-offs such as that for small
of a multi-core machine are not representative, due to the lists radix sort is faster, whereas for bigger lists counting sort
static power consumption of other devices besides the CPU, is faster. However, these findings cannot yet be generalized
which does not change, regardless of how many cores are across hardware architectures. Pure performance comparisons
used. Hence, we fully utilized all cores of the machine with a withintersectionsarethereforeomittedfromourexperiments.
separate sort invocation operating on a copy of the same list. CountingsorttakesalistAofsizenasinputandproduces
ByusingMPIbarriers[13],weensurethatallstartinvocations a sorted list C of size n as output using the elements of A.
are started at the same time. As execution time (or response To sort the elements, the range of the elements in A has to
time), we measured the longest duration of the parallel sort be known, because in a first step a list B of size range is
invocations and ensured that variation of durations among created. Every B[i] is set to the number of occurrences of the
parallel processes was less than 5%. elementiinA(i.e.,thefrequencyofelementsinAiscounted).
Fig. 3 visualizes the invocation scheduling by AC power B is created based on an address/index computation over B.
consumption (i.e., at the wall) over time for two consecutive Counting sort is a stable sorting algorithm with a linear time
sort invocations. The spikes at the beginning and end of each complexity of O(n).
invocationaredueto(MPI)synchronization.Theshortperiod Radix sort is stable and has linear time complexity, too. It
of 250W in each run denotes the list generation. also requires the range of the elements in the input list to
As shown in Table I, the static power consumption of be know. But, in contrast to counting sort, radix sort does not
the server originates from the power supply, the fan, the create an intermediate list B of size range. Instead it works
motherboard, the disk, and the sockets. ontheindividualelementsoftherange.Thus,ifthelistsonly
FortheinvestigationoftheeffectofdifferentCPUfrequen- containnumbers,10listsarecreated–oneforeachdigit.Radix
cies on the timing and energy-efficiency of sorting, we used sort works in two phases: in the first phase, the elements of
the userspace CPU governor of Linux to explicitly set the A are moved to the intermediate lists (partitioning). In the
frequencyoftheCPU.Weexecutedlistgenerationandsorting second phase, the elements are “stacked” into A. The number
for three algorithms with different list sizes for all possible of iterations is the number of alphanumerical characters of
frequencies of the CPU and the turbo mode. We collected range. For example, for a range of [0..999], 3 iterations
AC Power Consumption of Sort for 50mio Elements TABLEII
SORTINGALGORITHMSCHARACTERISTICCOMPARISONFOR50MIO
ELEMENTS(INTURBOMODE).
543
Algo. t (s) t (s) t (s) P (W) E (J)
min max range
radix 1.880 1.901 0.021 330.4 626.9
043
std::sort 4.226 4.230 0.004 346.3 1464.1 ]W[
count. 8.444 8.516 0.072 330.3 2801.5 rewoP
533
CA
033
asortingtaskon50 millionelementswherebothCPUsofthe
server operate in turbo mode.
523
From the figure, one can infer that using radix or counting
sort leads to a lower power consumption than std::sort. The
radix sort std::sort counting sort former two have an almost equal level. The savings compared
to std::sort amount to 4.6%. Yet, radix sort is clearly the
Fig.4. ACpowerconsumptionforsorting50millionelements.
fastest algorithm and, hence, the best when combining both
metrics without prioritization of one over the other. Counting
result. Because of this, the range has a stronger effect on sort is, despite its low power consumption, the worst in terms
the response time of counting sort compared to radix sort of energy consumption. From this so-called sweet spot per-
(time ∼ range vs time ∼ log (range)). Per definition spective, which will be further elaborated on in the following
10
std::sorthasalinearithmiccomplexityoverthenumberofele- section, the savings for radix sort amount to 77.6% compared
mentsinthelist.ItperformsO(n×log (n))comparisons[15]. to counting sort. Table II summarizes the key numbers from
2
Our implementation (GNU libstdc++) uses a combination of theexperiments:Durationincludingrange,powerconsumption
intro sort and insertion sort. per time unit and overall energy consumption for the mean
Based on this common knowledge about the time com- duration. All power values include 74W idle consumption.
plexity of sorting algorithms, we investigated the energy B. On the Sweet spot of Software
consumptionofthethreealgorithms.Sincesortingiscompute
Inthissection,weinvestigateandprovewrongthecommon
bound, one could assume the CPU to be the predominant
misconceptionthatsoftwareenergy-efficiencyequatesdirectly
consumerofenergyamongstallotherresourcesinaserver.We
to CPU performance. For this purpose, we have collected
collectedempiricalsupportforthishypothesisand,inaddition,
evidence that executing software applications at high CPU
determinedfurtherresourcesconsumingenergyduetosorting.
frequencies may lead to lower software energy-efficiency.
It is important to know that the frequency of a CPU affects
Therefore, we refine research question RQ2 into:
timing, power and, consequently, the energy consumption of
algorithms. In general, we will give empirical support for the • RQ2a (Effectiveness). Can we increase software energy-
efficiency by changing the clock frequency of the CPU
following claims:
executing a software task?
1) The highest frequency of a CPU does not necessarily
• RQ2b (Determinability). Can the clock frequency of the
leadtothelowestenergyconsumption(powerintegrated
CPUexecutingasoftwaretask,whichmakesthesoftware
over time).
more energy-efficient, be determined?
2) Each algorithm has a detectable frequency at which
As outlined in the previous section, we use three different
the resulting energy consumption is lowest (sweet spot
algorithmicimplementationofsorting:radixsort,std::sortand
frequency).
counting sort. For each algorithm we measured the energy
3) Different algorithms can have different sweet spot fre-
consumed to sort 10, 20, ..., 50 million integers. Fig. 5
quencies.
shows the results obtained for sorting 50 million elements
usingcountingsort.Measurementresultsforallotherlistsizes
V. RESULTSOFTHEEXPERIMENTS
and algorithms are shown in Fig. 6. The figure shows three
Before investigating the impact of different frequencies charts: time per frequency, power per frequency, and energy
on energy-efficiency in Sect. V-B, we analyze in Sect. V-A per frequency. Note that turbo mode frequency varies over
whether algorithms differ in their power consumption and time,dependsondifferentfactorsandcanbebetween2.9and
show that algorithms with low power consumption are not 3.8GHz. Very high frequencies are unlikely as we fully use
necessarily the best in terms of energy consumption. all cores.
a) Time×Freq: Fig. 6(a) shows that as the clock fre-
A. On the Power Level of Software
quency of the CPU increases from 1.2GHz to 2.9GHz and
All raw measurements retrieved from the experiments were turbo mode, the mean time required to execute the software
processed with the statistics software R. The weighted mo- task of sorting decreases in a non-linear form. What should
ments, among them the mean value, quartiles, minimum and be noticed in this finding is that at 1.4GHz the mean time to
maximum excluding extreme outliers, are shown in Fig. 4 for complete the task drops significantly.
0082
51
]W[ 003 ]J[
41 noitpmusnoc noitpmusnoc 0062
31
]s[ 052
emiT 21 0042
11 rewop ygrene
002
01 CA CA 0022
9