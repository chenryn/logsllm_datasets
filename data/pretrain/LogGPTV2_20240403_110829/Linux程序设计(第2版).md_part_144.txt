16位整数。UNIX环境下的代码认为整数可以容纳人于65535的数值，把这样的代码移植到MS
DOS环境里去就会造成很严重的后果。
我们认为编写可移植代码有三种做法：
·在一个单平台上编写代码，可移植性问题以后再说。这当然能够比较快地把最初的代码编
写好，但在向其他平台移植的时候极有可能还需要大面积重写，而新的代码里不可避免地
会出现许多新的bug。
·在一个系统上编写它，注意避免使用不易移植的功能。如果确实需要使用青定会在可移植
性方面引起问题的功能，尽量把它分离出来，单独保存到一个文件或函数调用里。这个办
法意味着在移植代码的时候背定需要做一些工作，但工作量并不大，而且主要的问题都局
限在我们已经知道需要针对可移植性进行处理的小代码段里。
·在尽可能多的平台上切换着进行开发，避免使用任何不可移植的功能，这个办法很可能会
使你软件的在第一版就需要花费非常非常多的时间才能有所结果，而且还有可能会运行得
很慢。而当需要把它移植到一个它从未运行过的系统上时，还需要做一些工作。没有人
（包括专业级高手在内）能够在每-个可能出现的问题真正出现之前就把它们都解决掉。
大家可能都已经猜到笔者倾向于第二种办法、我们把可移植性方面一些常见的陷阴分列在
下面，并将就如何避免它们提出一些看法和建议。
A.2.1数据长度
在C语言里，整数被定义为CPU处理器实际的字长度。在8086上这就将是16位的，面在
68030上就将是32位的。int类型这种随机器而变化的长度是可移植性方面问题的一个常见原因。
你会发现自己的整数在另外一台机器上不仅取值范围发生了变化，就是在对整数的某个位进行
设置或测试时也容易引起问题。
我们来看看下面这个例子。假设我们想对整数变量“i的第2位（从0算起）进行置位，下
面这个表达式可以让我们达到目的：
i1= 0x04;
不管整数“1”的宽度是多少，这个表达式都能够对预定的位进行置位
清除这个位可就不那么简单了。比较明显的做法是写出这样的代码：
i &= Oxfffb :/* Do not write this */
如果“”是16位宽的整数，这个操作确实能清除制定的位。可如果“1”是32位宽的整数，问
题就来了一一我们不仅清除了第2位，连高端的16个位也都被清除了！正确的写法应该是这样的：
i=~0x04:
加入jaVa编程群：524621833
---
## Page 779
Linux程序设计
0x04的二进制序列，然后在把这个序列施加到整数“1”上去。这个办法能够保证掩码里的位个
数永远是止确的。
A.2.2字节的存储顺序
不同的CPU处理器在把字节存放到内存里去时使用的字节存储顺序是不同的。少数处理器
甚至还有改变内存里位存储顺序的指令。在这一方面，处理器可以被划分为两大类。
1.宇节的降序存储
这一大类里的处理器会把变量的最低位（least significant bits，简称LSBs）保存在最低位的
地址里。VAX和80x86系列是使用这种内存访问方式的典型处理器。
2.字节的升序存储
这--大类里的处理器会把变量的最高位（mostsignificantbits，简称MSBs）保存在最低位
的地址里。SPARC和68k系列处理器使用的就是这种内存访问方式。
极少数处理器允许你在适行时选择使用哪一种宇节存储顺序，但它们不是我们这里
关心的事情。
如果你是在这两大类处理器之间移植程序，就需要面对许多问题，特别是在向函数传递参
数的时候。要尽量避免取函数参数地址的操作。请看下面这段代码：
func(char zz)(
p = 6tnp: /* much safer */
更严重的问题出现在当你在这两种不同类型的处理器之间使用磁盘或跨网络来传递数据的时
候。对此其他的全面讨论超出了本书的范围，但在必要的情况下，你应该考虑使用htonl、htons、
ntohl和ntohs等函数，它们的作用是在主机的字节存顺序和网络的字节存储顺序之间进行转换。在
XDR（extermaldatarepresentation，外部数据表示方法）标准里可以查到一组适用范围更广的例程。
A.2.3学符
字符的表示方法分带符号（取值范围是-127到+128）和不带符号（取值范围是0到256）两
种，有许多程序能否正确工作完全要依赖于字符所使用的表示方法，而且这类程序的数量还相
当惊人。不要妄下定论。如果确实需要字符带符号或不带符号，就一定要明确地把它们定义为
“signedchar”或“unsignedchar”。短整数和整数也可能出现类似的问题，但一是非常少见，二
是不象字符的影响这么大。
A.2.4C语高的类型打包结构：union
编译器对union里类型域的安排有关标准里没有定义。假设你声明了一个下面这样的类型打
加入jaVa编程群：524621833
---
## Page 780
附录A可移植性
763
包结构：
anion baz [
short bar_short;
)my_baz:
分”把数据读出来，将会出现怎样的情况在有关标准里是没有定义的。使用一个union结构来改
变变量的类型是不符合可移植性要求的。如下所示：
if(my_baz.bar_char * 7)( /* No ! */
ny_baz.bar_short = 7:
A.2.5结构的边界对齐
struci结构也会出现类似的问题，如下所示：
struct foo {
short bar_short ;
char bar_char;
)my_too;
foo的尺寸在不同的CPU处理器上是会变化的，具体情况取决于编译器在这个结构的各个成
员之间到底都添加了多少字节、是怎样添加的。
struct结构方面的另外一个陷阱是试图用memcmp函数对它们进行比较。还是使用我们的foo
结构，你可能会写出下面这样的代码：
struct foo fool;
struct foo foo2:
/* some code that manipulates the structures */
if(memcmp(fool. foo2.sizeof(struct foo))) { /* No!*/
千万不要这样做。你是在要求比较foo1结构里的每一个字节是否与foo2里面的相同，但因为
字节。如果你确实需要对两个结构进行比较，就必须明确的比较它们的各个成员。但使用普通
的赋值语句或memcpy对结构进行拷贝复制是允许的，因为这是一个传递所有结构成员的操作。
A.2.6指针长度
永远不要想当然地认为自己可以把指针看做是整数或者把整数看做是指针。如果你需要使
用一个匿名指针，就一定要使用“void*”这样的表示方式。另外要特别注意qsort函数，下面是
这个函数的语法定义：
void qsort (void *base, size_t num_el, size_t size_e)
int 1*compare) (const void , const void *11;
假设你想比较我们foo结构里的两个成员。在编写比较函数的时候千万不要使用分别指向两
加入jaVa编程群：524621833
---
## Page 781
764Linux程序设计
个foo结构的两个指针。这个函数的语法定义要求使用的是“void*”.正确的做法是：编写一个
接受两个void指针的比较函数，再通过局部变量投射这两个指针。如下所示：
int compare(void *struct_one_ptr, void *struct_two_ptr)
struct foo·fool_ptr
struct foo*foo2_ptr:
oo2_ptr = (struct foo *)struct_two_ptr
A.2.7函数参数的求值
函数参数的求值顾序是有关标准没有定义的。如果你写出下面这样的代码：
func(a*+, bva+c }:
就可能在可移植性方面遇到间题。这是因为有的编译器先对“a++”进行求值，有的则先对
“bza+c”求值。此外，对函数参数或在某些表达式的特定部分里使用宏定义的问题也要引起高
度的重视，有些宏定义会产生副作用。下面就是一个这样的例子：
isdigit(*ptr++ ):/* No! *,
最好不要使用这样的用法，因为isdigit经常被实现为一个宏。
A.3向C++移植
在今天用ISO的C语言编写出来的代码可能在明天就需要增加一些新功能，而同时还需要把
代码编译为C++程序。随着C++标准的发展，它与C语言之间的差异越来越大，把C语言代码移
植到C++编译器的工作也相应地越来越难。我们已经向大家介绍了一些需要避免使用的C++关键
字。除此之外，为了使今后向C++的移植工作相对简单一些，在C语言程序里还需要避免其他一
些事情：
·永远要给出函数的预定义。C++要求预定义：而C语言仅仅是鼓励这样做。
个C语言函数可以有任意多个参数；而C++则不允许函数有参数。
·C++里的全局变量只能定义一次；C语言就没有这么严格。
·C语言里的全局性const有外部链接；而C+期使用文件链接。
·C语言里的struct变量在定义时需要在结构名之前加上关键字struct；C++里则不做要求。
·C++对枚举类型的类型检查比C语言里的更产格，而后者把它们都看做是整数。
A.4编译器的使用
大多数现代的编译器都非常撞于针对可疑代码产生警告。用编译器选项把警告功能都打开。
如果你使用的是gcc，就请加上“-Wall”选项-一它的作用就是打开所有警告。如果你打算把自
的需要帮助你找出需要推敲的代码结构。与移植之后千辛万苦地查找和纠正有缺陷的程序相比，
加入jaVa编程群：524621833
---
## Page 782
附录A可移植性765
在代码移植之前就改正掉编译器报告出来的所有警告要容易得多。
何警告。这看起来好象是一个过于理想化的目标，因为你几乎会不可避免地会收到一些警告而
相应的程序结构却完全没有问题。
请记住两件事。一是编译器开发团队对程序设计语言精妙之处的了解比一般程序员要丰富
得多；二是如果你从无警告编译开始并保持编译无警告，就不容易漏掉重要的警告信息。如果
某个文件总是产生一大堆的警告信息，人们就会因习惯而成自然，一个新的重要的警告信息就
很容易被忽略过去。
A.5程序是给人看的
最后一个跨门是：记住代码是给人看的，而几乎总是看的次数比写的次数要多得多。许多
代码的寿命要比它们始作者的估计要长。今日的“替补队员”（应急措施）可能就是明年的“最
佳射手”（软件里的关键性应用程序）
要注意使用正确的、有意义的变量名。把“i”和“”用做简单的整数循环变量多少还可以
接受，但其他的变量就应该有更有意义的名字。
给函数起名字时也要遵循同样的原则。这么说吧，如果你有一组与某个特定选项的状态有
关的函数，它们就应该有一个整齐统一的命名方式一比如象get_option_baud（）和
get_option_typeheadO这样。这将帮助阅读你程序的人们更快更容易地找到相关的函数。
加入iaVa编程群：524621833
---
## Page 783
附录B自由软件基金会和GNU项目
复制、修改和再发行方面强加给人们的限制”。
"free”这个词的含义与金钱无关。花钱购买一张包含有GNU软件的CD盘决没有什么不对的
地方。我们这重说的“free”指的是“自由”，即拥有源代码、学习它的操作原理、改写它以及
与别人分享它等方面的自出。
自由软件基金会（FreeSoftwareFoundation，简称FSF）正在努力完成一个完整的软件系统。
这个软件系统被称为GNU，意思是“GNU'sNotUNIX”（GNU不是UNIX）。它的目的是向上兼
容UNIX，同时又允许人们获得完整的源代码。这个项目至今仍未全部完成，但许多部分都已经
很成熟了。大多数Linux发行版本里都包括有大量来自GNU项自的软件。
B.1GNU项目
这个项目的主要工作包括：
·TheHurd。这是运行在名为Mach的内核上的--系列务器进程，开发工作由CMU大学负
贵。TheHurd自前还没有完成，但那些服务器进程在Linux内核上都运行得好极了！
.
·TheGNUCLibrary（GNU的C语言函数库）。大多数Linux发行版本都使用着它。它儿乎已
经完成了，但仍有工作要做。
·GNUEMACS。这大概是最具可配置性的程序设计用编辑器了，至今仍在编写中。它很难
掌提，但为掌握它而付出的努力终将得到回报。说实在的，EMACS上的工作好象会永远
继续下去！
·GCC。GNU的C语言编译器。它实际上由许多部分组成，各种不同的前端一直在增加中。
目前进行的工作是Pascal语言和CHILL语言（http：//www.kvatro.no/telecom/chipsy/）前端，
并且差不多算是完成了。在我们编写这本书的时候，这个编译器还没有通过ISO（国际标
准化组织）的C语言认证--通过这个认证需要一笔数额相当巨大的资金，而FSF这个基金
会的支出能力却总是捉襟见时。不管怎么说，GCC与有关标准非常吻合，就是有区别，也
相当细微。GCC还是一个C++编译器。
·Ghostscript。这是一个用于文档查看和输出方面的PostScript处理软件。
·还有许许多多的工具性程序，比如名为bash的sbell、bison和flex（YACC和LEX的替代软
件）、make和无数其他的好东西。
除了极少数的例外，GNU版本的标准工具都要比原来的好。你可以通过捐赠或者购买他们
软件（直接购买或者从向该基金会进行捐赠的供应商那里购买）来帮助自由软件基金会。
加入jaVa编程群：524621833
---
## Page 784
附录B自由软件基金会和GNU项目
767
B.2GNU公共许可证
这个许可证经常被人们称为“copyleft”或GPL。它处处体现着“自由”这个概念，与其他
版权方案的限制性本质形成了鲜明的对比。
下面是GNU公共许可证的完整原文：
GNU GENERAL PUBLIC LICENSE
Version 2, June 1991
Copyright O 1989, 1991 Free Software Foundation, Inc., 675 Mass Ave,
Cambridge, MA 02139, UsA. Evezyone is permitted to copy and distribute
verbatim copies of this license document. but changing it is not allowed.
Preamble
and change it. By contrast, the GNU General Public License is intended to
guarantee your freedom to share and change free software--to make sure the
software is free for all its users. This General Public License applies to
most of the Free Software Poundation's software and to any other program whose
authors commit to using it. ISome other Free Software Foundation software 15
covered by the GNU Library General Public License instead.) You can apply -t
when we speak of free software, we are referring to freedom, not price. Our
to your programs,too.
General Public Licenses are designed to make sure that you have the freedon Lo
distribute copies of free software (and charge for this service if you wish).
that you receive source code or can get it if you want it, that you can change
To protect your rights, we need to make restrictions that forbid anyone to
can do these things,
deny you these rights or to ask you to surrender the rights. These
restrictions translate to certain responsibilities for you if you distribute
copies of the software, or if you modify it.
For example, if you distribute copies of such a program, whether gratis or fox
a fee. you must give the recipients all the rights that you have. You must
make sure that they. too, reccive or can get the source code. And you must
show them these terms so they know their rights.
offer you this license which gives you legal permission to copy. distribute
and/or modify the software.
Also. for each author's protection and curs, we want to make certain that
everyone understands that there is no warranty for this free software.If the
know that what they have is not the original. so that any problems introduced
by others will not reflect on the original authors'reputations.
Pinally, any free program is threatened constantly by software patents.We
individually obtain patent 1icenses, in effect making the program proprietary.
To prevent this, we have made it clear that any patent must be licensed for
everyone's free use or not licensed at all.
The precise terms and conditions for copying, distribution and modification
follow.
GNU GRNERAL PUBLIC LICENSE
TERMS AND CONDITIONS FOR COPYING.DISTRISUTION AND MODIFICATION
1.This License applies to any program or other work which contains a notice
of this General Public License.The *Program*,below,refers to any such
加入java编程群
：524621833
---