### 16位整数

在UNIX环境下，代码通常假设整数可以容纳大于65535的数值。如果将这种代码移植到MS-DOS环境中，可能会导致严重的问题。

### 可移植代码的编写方法

编写可移植代码有以下三种常见方法：

1. **单平台开发，后期考虑可移植性**：这种方法可以快速完成初始代码编写，但在向其他平台移植时，可能需要大面积重写，并且新代码中会出现许多新的bug。
2. **避免使用不易移植的功能**：在一个系统上编写代码时，尽量避免使用难以移植的功能。如果确实需要使用这些功能，应将其分离出来，单独保存在一个文件或函数调用中。这样，在移植代码时只需处理已知的小代码段，工作量相对较小。
3. **多平台开发**：在尽可能多的平台上进行开发，完全避免使用任何不可移植的功能。虽然这种方法可能导致第一版软件的开发时间大大增加，甚至运行速度变慢，但在移植到新系统时仍需做一些额外工作。没有人（包括专业级高手）能够在所有可能出现的问题真正出现之前就解决它们。

笔者倾向于第二种方法。下面列举了一些常见的可移植性陷阱，并提出相应的建议。

### A.2.1 数据长度

在C语言中，`int` 类型的长度取决于CPU的实际字长。例如，在8086处理器上是16位，而在68030处理器上是32位。这种变化会导致可移植性问题，特别是在对整数的特定位进行操作时。

#### 示例

假设我们想对整数变量 `i` 的第2位（从0开始计数）进行置位，可以使用如下表达式：
```c
i |= 0x04;
```
无论 `i` 的宽度如何，该表达式都能正确设置指定的位。

清除这个位则较为复杂。直接使用 `i &= 0xfffb;` 会带来问题：
- 如果 `i` 是16位宽的整数，这行代码确实能清除指定的位。
- 但如果 `i` 是32位宽的整数，不仅会清除第2位，还会清除高16位。

正确的写法应该是：
```c
i &= ~0x04;
```
这样可以确保掩码中的位数始终正确。

### A.2.2 字节存储顺序

不同的CPU处理器在内存中存储字节的顺序不同。主要分为两类：

1. **字节降序存储**：最低有效位（LSBs）存储在最低地址中。典型处理器如VAX和80x86系列。
2. **字节升序存储**：最高有效位（MSBs）存储在最低地址中。典型处理器如SPARC和68k系列。

在不同类型的处理器之间移植程序时，需要注意字节顺序问题，尤其是在传递函数参数时。尽量避免取函数参数地址的操作。此外，在通过磁盘或网络传递数据时，应使用 `htonl`、`htons`、`ntohl` 和 `ntohs` 等函数进行字节顺序转换。

### A.2.3 字符表示

字符可以是带符号（范围为-128到+127）或不带符号（范围为0到255）。许多程序依赖于字符的具体表示方法。为了确保可移植性，应明确地将字符定义为 `signed char` 或 `unsigned char`。

### A.2.4 C语言中的联合类型（union）

编译器对 `union` 中类型域的排列没有统一标准。例如：
```c
union baz {
    short bar_short;
    char bar_char;
} my_baz;
```
在这种情况下，读取 `my_baz` 中的数据可能会因编译器而异。使用 `union` 改变变量类型不符合可移植性要求。

### A.2.5 结构体的边界对齐

`struct` 的大小和成员之间的填充字节数在不同CPU上可能不同。例如：
```c
struct foo {
    short bar_short;
    char bar_char;
} my_foo;
```
不要使用 `memcmp` 比较结构体，因为这会比较每个字节。如果需要比较两个结构体，应逐个成员进行比较。

### A.2.6 指针长度

永远不要假设指针和整数可以互换。如果需要匿名指针，应使用 `void*`。特别注意 `qsort` 函数的参数类型：
```c
void qsort(void *base, size_t num_el, size_t size_el,
           int (*compare)(const void *, const void *));
```
在编写比较函数时，应接受 `void*` 类型的指针并进行类型转换。

### A.2.7 函数参数的求值顺序

函数参数的求值顺序在标准中未定义。例如：
```c
func(a++, b + c);
```
某些编译器可能先对 `a++` 求值，而另一些可能先对 `b + c` 求值。此外，使用宏定义时要小心，因为宏可能会产生副作用。

### A.3 向C++移植

随着C++标准的发展，C和C++之间的差异越来越大。为了简化未来向C++的移植工作，应注意以下几点：

- 始终提供函数原型。
- C++函数不允许省略参数。
- C++全局变量只能定义一次。
- C++中的 `const` 使用文件链接，而C语言中使用外部链接。
- C++中不需要在定义 `struct` 变量时加上 `struct` 关键字。
- C++对枚举类型的类型检查更严格。

### A.4 编译器的使用

现代编译器通常会生成警告信息。使用编译器选项启用所有警告，例如GCC的 `-Wall` 选项。在代码移植前修正所有警告信息，有助于减少移植后的错误。

### A.5 代码的可读性

代码是给人看的，而且阅读次数通常比编写次数多得多。因此，应使用有意义的变量名和函数名。例如，与特定选项状态相关的函数应具有统一的命名方式，如 `get_option_baud()` 和 `get_option_typehead()`。

### 附录B 自由软件基金会和GNU项目

自由软件基金会（FSF）致力于创建一个完整的自由软件系统，称为GNU。该项目的主要工作包括：

- The Hurd：运行在Mach内核上的一系列服务器进程。
- GNU C Library：大多数Linux发行版使用的C语言库。
- GNU Emacs：高度可配置的编辑器。
- GCC：GNU C编译器，支持多种语言前端。
- Ghostscript：PostScript处理软件。
- 许多工具程序，如bash、bison和flex等。

### B.2 GNU通用公共许可证

GNU通用公共许可证（GPL）旨在保证用户共享和修改自由软件的权利。以下是GPL的完整原文：

```
GNU GENERAL PUBLIC LICENSE
Version 2, June 1991
Copyright © 1989, 1991 Free Software Foundation, Inc., 675 Mass Ave,
Cambridge, MA 02139, USA. Everyone is permitted to copy and distribute
verbatim copies of this license document, but changing it is not allowed.

Preamble
The licenses for most software are designed to take away your freedom to share
and change it. By contrast, the GNU General Public License is intended to
guarantee your freedom to share and change free software--to make sure the
software is free for all its users. This General Public License applies to
most of the Free Software Foundation's software and to any other program whose
authors commit to using it. (Some other Free Software Foundation software is
covered by the GNU Library General Public License instead.) You can apply it
to your programs, too.

When we speak of free software, we are referring to freedom, not price. Our
General Public Licenses are designed to make sure that you have the freedom to
distribute copies of free software (and charge for this service if you wish),
that you receive source code or can get it if you want it, that you can change
the software or use pieces of it in new free programs; and that you know you
can do these things.

To protect your rights, we need to make restrictions that forbid anyone to
deny you these rights or to ask you to surrender the rights. These
restrictions translate to certain responsibilities for you if you distribute
copies of the software, or if you modify it.

For example, if you distribute copies of such a program, whether gratis or for
a fee, you must give the recipients all the rights that you have. You must
make sure that they, too, receive or can get the source code. And you must
show them these terms so they know their rights.

We protect your rights with two steps: (1) copyright the software, and (2)
offer you this license which gives you legal permission to copy, distribute
and/or modify the software.

Also, for each author's protection and ours, we want to make certain that
everyone understands that there is no warranty for this free software. If the
software is modified by someone else and passed on, we want its recipients to
know that what they have is not the original, so that any problems introduced
by others will not reflect on the original authors' reputations.

Finally, any free program is threatened constantly by software patents. We
wish to avoid the danger that redistributors of a free program will
individually obtain patent licenses, in effect making the program proprietary.
To prevent this, we have made it clear that any patent must be licensed for
everyone's free use or not licensed at all.

The precise terms and conditions for copying, distribution and modification
follow.

TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION

0. This License applies to any program or other work which contains a notice
placed by the copyright holder saying it may be distributed under the terms of
this General Public License. The "Program", below, refers to any such program
or work, and a "work based on the Program" means either the Program or any
derivative work under copyright law: that is to say, a work containing the
Program or a portion of it, either verbatim or with modifications and/or
translated into another language. (Hereinafter, translation is included
without limitation in the term "modification".) Each licensee is addressed as
"you".

Activities other than copying, distribution and modification are not covered by
this License; they are outside its scope. The act of running the Program is not
restricted, and the output from the Program is covered only if its contents
constitute a work based on the Program (independent of having been made by
running the Program). Whether that is true depends on what the Program does.

1. You may copy and distribute verbatim copies of the Program's source code as
you receive it, in any medium, provided that you conspicuously and
appropriately publish on each copy an appropriate copyright notice and
disclaimer of warranty; keep intact all the notices that refer to this
License and to the absence of any warranty; and give any other recipients of
the Program a copy of this License along with the Program.

You may charge a fee for the physical act of transferring a copy, and you may
at your option offer warranty protection in exchange for a fee.
```

加入Java编程群：524621833