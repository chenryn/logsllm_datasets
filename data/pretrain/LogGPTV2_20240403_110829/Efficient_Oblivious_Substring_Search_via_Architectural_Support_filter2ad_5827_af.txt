D
0
0
0
6
13
A
3
8
1
3
8
is motivated by the simplicity of the client operations w.r.t. Ring
DORAM and by the higher eviction period than Circuit DORAM.
Nonetheless, we observe that the response time of Circuit DORAM
grows slower w.r.t. Path and Ring DORAMs, confirming that Circuit
DORAM is asymptotically faster. It is worth noting the different
impact of the eviction period and bucket size in Ring and Path
DORAMs: indeed, in the former, evicting less frequently achieves
better performance, even if each eviction is slower due to the larger
buckets; conversely, since in Path DORAM both Eviction and Find-
Block procedures become slower with larger buckets, a lower evic-
tion period yields better performance. To compare our DORAMs
with existing ones, we report in Fig. 2a the access response time
of our own implementation of the Path DORAM proposed in Zero-
Trace [40], referred to as ZT Path DORAM. The comparison shows
that all our DORAMs are faster than ZT one. In particular, our Path
DORAM is about 2× faster than ZT one, clearly showing the per-
formance gain given by amortizing the cost of evictions over A≥1
accesses.
To assess the overhead introduced by our oblivious clients in
DORAMs, in Fig. 2b we compare their access response time with
the one of SORAMs, which correspond to the original versions of
the ORAMs. For Path ORAM, we compare the configuration achiev-
ing best performance for the DORAM with a configuration for the
Singly Oblivious RAM (SORAM) suggested by authors in [44], i.e.,
Z =4 and S=64. The results in Fig. 2b show that the computational
overhead introduced by oblivious clients is acceptable, being at most
2.5×. As expected, the slowdown of Circuit DORAM is negligible,
given the simple modifications required to make the client oblivi-
ous. Conversely, Path DORAM exhibits the highest slowdown: this
overhead comes from making the Eviction procedure oblivious
and from the additional path that is written back to the DORAM
tree in the FindBlock one.
ObSQRE PPSS Protocol Evaluation. We now evaluate the two
proposed oblivious substring search algorithms, combining each
of them with each of our DORAMs, choosing, for Path and Ring
ones, the most efficient configuration identified in our benchmark
(Fig. 2a). We evaluate the response time to compute the number of
occurrences of a substring with 24 characters for increasing sizes
of the datasets, without considering the retrieval of the positions
of the said occurrences as they depend neither on the specific
substring search algorithm nor on the alphabet size. To achieve
the maximum performance for the ABWT based algorithm, we
perform an exhaustive parameter space exploration to find the
optimal values for the sample period P and the factor C, which are
employed to construct the ABWT and the recursive position map
for the DORAM, respectively.
The results of the evaluation for both our oblivious substring
search algorithms are reported in Fig. 3. We observe that, regardless
of the DORAM being employed, the ABWT based algorithm is by
far the fastest, as its response time is about 3 to 5 times smaller than
ODSBWT one. This performance gap is due to the logC(⌈ n+1
P ⌉)
DORAMs accessed in the ABWT based Rank procedure instead of
the log2(n) ones in the ODSBWT based method. The comparison
among different datasets reveals that the ABWT algorithm is more
affected by the alphabet size |Σ|, as, regardless of the DORAM,
the queries for the Enron dataset are slower than Chr and Prot
ones. This is expected, as the size of the entries in the ABWT, and
thus the block size of the DORAM storing it, depends linearly on
|Σ|; conversely, ODSBWT algorithm is negligibly affected by |Σ|.
Concerning the different DORAMs employed to store the full-text
index, the ABWT based algorithm achieves the best performance
when combined with Circuit DORAM (blue lines in the right pane
in Fig. 3), while Path DORAM outperforms the other ones in the
ODSBWT algorithm (green lines in the left pane in Fig. 3). However,
while Path DORAM is the most efficient in our benchmarks in
Fig. 2a, it exhibits the largest slowdown when employed for the
ABWT algorithm. This outcome is due to the low value of the factor
C (comparatively with the values derived for the other DORAMs)
which is identified as optimal for Path DORAM in the previously
mentioned exhaustive parameter space exploration for the ABWT
ACSAC2020,December7–11,2020,Austin,USAN.Mainardi,D.Sampietro,A.Barenghi,G.Pelosi0510152025303510152025Textsize(MB)ResponseTime(ms)ODSBWTbasedBackwardSearchAlgorithm05101520253035246810Textsize(MB)Responsetime(ms)ABWTbasedBackwardSearchAlgorithmRingonChrCircuitonChrPathonChrRingonProtCircuitonProtPathonProtRingonEnronCircuitonEnronPathonEnronFigure3:ComparisonofObSQREoblivioussubstringsearchalgorithmsforChr,ProtandEnrondatasets.Table3:ParameterschosenforDORAMs.Sisthestashsize,Atheevictionperiod,Z(resp.D)themax.(resp.min.)num-berofreal(resp.dummy)blocksperbucketDORAMZSDAPath[44]4320384108Circuit[49]3801Ring[36]43263841138ismotivatedbythesimplicityoftheclientoperationsw.r.t.RingDORAMandbythehigherevictionperiodthanCircuitDORAM.Nonetheless,weobservethattheresponsetimeofCircuitDORAMgrowsslowerw.r.t.PathandRingDORAMs,confirmingthatCircuitDORAMisasymptoticallyfaster.ItisworthnotingthedifferentimpactoftheevictionperiodandbucketsizeinRingandPathDORAMs:indeed,intheformer,evictinglessfrequentlyachievesbetterperformance,evenifeachevictionisslowerduetothelargerbuckets;conversely,sinceinPathDORAMbothEvictionandFindBlockproceduresbecomeslowerwithlargerbuckets,alowerevictionperiodyieldsbetterperformance.TocompareourDO-RAMswithexistingones,wereportinFig.2atheaccessresponsetimeofourownimplementationofthePathDORAMproposedinZeroTrace[40],referredtoasZTPathDORAM.ThecomparisonshowsthatallourDORAMsarefasterthanZTone.Inparticular,ourPathDORAMisabout2×fasterthanZTone,clearlyshowingtheperformancegaingivenbyamortizingthecostofevictionsoverA≥1accesses.ToassesstheoverheadintroducedbyourobliviousclientsinDORAMs,inFig.2bwecomparetheiraccessresponsetimewiththeoneofSinglyObliviousRAMs(SORAMs),whichcorrespondtotheoriginalversionsoftheORAMs.ForPathORAM,wecomparetheconfigurationachievingbestperformancefortheDORAMwithaconfigurationfortheSORAMsuggestedbyauthorsin[44],i.e.,Z=4andS=64.TheresultsinFig.2bshowthatthecomputationalover-headintroducedbyobliviousclientsisacceptable,beingatmost2.5×.Asexpected,theslowdownofCircuitDORAMisnegligible,giventhesimplemodificationsrequiredtomaketheclientoblivi-ous.Conversely,PathDORAMexhibitsthehighestslowdown:thisoverheadcomesfrommakingtheEvictionprocedureobliviousandfromtheadditionalpaththatiswrittenbacktotheDORAMtreeintheFindBlockone.ObSQREPPSSProtocolEvaluation.Wenowevaluatethetwoproposedoblivioussubstringsearchalgorithms,combiningeachofthemwitheachofourDORAMs,choosing,forPathandRingones,themostefficientconfigurationidentifiedinourbenchmark(Fig.2a).Weevaluatetheresponsetimetocomputethenumberofoccurrencesofasubstringwith24charactersforincreasingsizesofthedatasets,withoutconsideringtheretrievalofthepositionsofthesaidoccurrencesastheydependneitheronthespecificsubstringsearchalgorithmnoronthealphabetsize.ToachievethemaximumperformancefortheABWTbasedalgorithm,weperformanexhaustiveparameterspaceexplorationtofindtheoptimalvaluesforthesampleperiodPandthefactorC,whichareemployedtoconstructtheABWTandtherecursivepositionmapfortheDORAM,respectively.TheresultsoftheevaluationforbothouroblivioussubstringsearchalgorithmsarereportedinFig.3.Weobservethat,regardlessoftheDORAMbeingemployed,theABWTbasedalgorithmisbyfarthefastest,asitsresponsetimeisabout3to5timessmallerthanODSBWTone.ThisperformancegapisduetothelogC(⌈n+1P⌉)DORAMsaccessedintheABWTbasedRankprocedureinsteadofthelog2(n)onesintheODSBWTbasedmethod.ThecomparisonamongdifferentdatasetsrevealsthattheABWTalgorithmismoreaffectedbythealphabetsize|Σ|,as,regardlessoftheDORAM,thequeriesfortheEnrondatasetareslowerthanChrandProtones.Thisisexpected,asthesizeoftheentriesintheABWT,andthustheblocksizeoftheDORAMstoringit,dependslinearlyon|Σ|;conversely,ODSBWTalgorithmisnegligiblyaffectedby|Σ|.ConcerningthedifferentDORAMsemployedtostorethefull-textindex,theABWTbasedalgorithmachievesthebestperformancewhencombinedwithCircuitDORAM(bluelinesintherightpaneinFig.3),whilePathDORAMoutperformstheotheronesintheODSBWTalgorithm(greenlinesintheleftpaneinFig.3).However,whilePathDORAMisthemostefficientinourbenchmarksinFig.2a,itexhibitsthelargestslowdownwhenemployedfortheABWTalgorithm.ThisoutcomeisduetothelowvalueofthefactorC(comparativelywiththevaluesderivedfortheotherDORAMs)whichisidentifiedasoptimalforPathDORAMinthepreviouslymentionedexhaustiveparameterspaceexplorationfortheABWTEfficient Oblivious Substring Search via Architectural Support
ACSAC 2020, December 7–11, 2020, Austin, USA
algorithm. Indeed, a low C implies a high number of deployed Path
DORAMs to recursively store and access the position map. Since
the only performance benefit given by a low value for C is that the
blocks of all these DORAMs are smaller, our conjecture is that Path
DORAM is more affected by the block size than other DORAMs;
to validate our hypothesis, we evaluate the response time of our
DORAMs with blocks of increasing size, hereby observing a much
worse performance degradation in Path DORAM than in Circuit
and Ring ones.
Once determined that ObSQRE achieves the best performance
when the ABWT based backward search is paired with Circuit
DORAM, we validated the practicality of this solution on two real-
istic use cases: the look-up of the occurrences of a DNA sequence
corresponding to a protein in the entire human genome, whose size
is approximately 3 GB, and the look-up of all the occurrences of
three typical strings (i.e., Fitch, Business Trip and Investment Port-
folio) in the financial domain over the whole Enron email corpus,
whose size is about 1 GB. Furthermore, we evaluated the overhead
of ObSQRE w.r.t. baseline solutions with weaker security guaran-
tees: an application running the ABWT based substring search
algorithm outside the enclave, which has no security guarantees;
an application running the algorithm inside the enclave but em-
ploying Path SORAM (i.e., the fastest among our SORAMs) instead
of Circuit DORAMs, which is secure only if the critical leakage of
memory access patterns inside SGX is ignored (as in SGX threat
model). Table 4 outlines the results of this evaluation. Although
the overhead incurred by ObSQRE over a solution with no security
guarantees in both the use cases amounts to about 3 order of mag-
nitudes, ObSQRE is only 3× slower than a solution that ensures
confidentiality of the data in the SGX threat model. Furthermore,
the results show the practicality of ObSQRE in real-world scenarios,
as the occurrences of a protein over the whole genome are found in
only 1.019 seconds, while the occurrences of a string in the whole
Enron corpus are found in just few milliseconds.
Finally, the benefits provided by running a DORAM client inside
an enclave (on the server side) compared to the traditional setting
where the ORAM client and server run on separate machines are a
performance gain in overall response time which ranges from one
to two orders of magnitude, in our genomic use-case. Indeed, consid-
ering the RTTs provided by the Akamai’s content delivery network
(CDN), from local connections to intercontinental ones [32, Tab.
1], the network latency of our genomic use-case in the traditional
ORAM setting would range from 10 to 600 seconds, depending on
Table 4: Performance of ObSQRE and less secure alternatives
applied to the genomic and Enron datasets with different
lengths of the queried subsring (m). Response time to com-
pute the number of occurrences is denoted as S, while R de-
notes the time to retrieve all the corresponding positions
Dataset
m
#Occ.
Genome
Enron
Enron
Enron
3050
5
13
20
1
2657
290
154
ObSQRE
(ms)
S: 1019 R: 0.6
S: 1.6 R: 2.1
S: 5.0 R: 0.5
S: 7.8 R: 0.6
SGX+
no SGX+
SORAM (ms) no ORAM (µs)
S: 347 R: 0.3
S: 0.6 R: 0.8
S: 1.7 R: 0.2
S: 2.8 R: 0.2
S: 167 R: 0.2
S: 0.8 R: 10.4
S: 3.1 R: 1.1
S: 5.1 R: 0.6
the type of network connection, without even considering further
network latencies due to recursive accesses to the position map.
6 CONCLUDING REMARKS
ObSQRE is the first solution enabling substring search queries over
outsourced data combining the SGX technology and the design of a
DORAM to provide private data access with no information leakage
coming from memory access patterns. The experimental evaluation
demonstrates the practical deployment of ObSQRE on off-the-shelf
hardware with real-world genomic and financial datasets.
ACKNOWLEDGMENTS
This work was supported in part by the EU Commission grant:
“WorkingAge” (H2020 RIA) Grant agreement no. 826232.
REFERENCES
[1] Adil Ahmad, Byunggill Joe, Yuan Xiao, Yinqian Zhang, Insik Shin, and By-
oungyoung Lee. 2019. OBFUSCURO: A Commodity Obfuscation Engine on
Intel SGX. In 26th Annual Network and Distributed System Security Symposium,
NDSS 2019, San Diego, California, USA, February 24-27, 2019. The Internet Soci-
ety. https://www.ndss-symposium.org/ndss-paper/obfuscuro-a-commodity-
obfuscation-engine-on-intel-sgx/
[2] Ghous Amjad, Seny Kamara, and Tarik Moataz. 2019. Forward and Backward
Private Searchable Encryption with SGX. In Proceedings of the 12th European
Workshop on Systems Security, EuroSec@EuroSys 2019, Dresden, Germany, March
25, 2019. ACM, 4:1–4:6. https://doi.org/10.1145/3301417.3312496
[3] DA Benson, M Cavanaugh, K Clark, I Karsch-Mizrachi, DJ Lipman, J Ostell, and
EW Sayers. 2013. GenBank. Nucleic Acids Res. (Jan 2013). https://doi.org/10.
1093/nar/gks1195 The 9th International Symposium on String Processing and
Information Retrieval.
[4] Ferdinand Brasser, Urs Müller, Alexandra Dmitrienko, Kari Kostiainen, Srdjan
Capkun, and Ahmad-Reza Sadeghi. 2017. Software Grand Exposure: SGX Cache
Attacks Are Practical. In 11th USENIX Workshop on Offensive Technologies, WOOT
2017, Vancouver, BC, Canada, August 14-15, 2017. USENIX Association. https://
www.usenix.org/Conference/woot17/workshop-program/presentation/brasser
[5] Jo Van Bulck, Marina Minkin, Ofir Weisse, Daniel Genkin, Baris Kasikci, Frank
Piessens, Mark Silberstein, Thomas F. Wenisch, Yuval Yarom, and Raoul Strackx.
2018. Foreshadow: Extracting the Keys to the Intel SGX Kingdom with Transient
Out-of-Order Execution. In 27th USENIX Security Symposium, USENIX Security
2018, Baltimore, MD, USA, August 15-17, 2018. USENIX Association, 991–1008.
https://www.usenix.org/conference/usenixsecurity18/presentation/bulck
[6] Jo Van Bulck, Danile Moghimi, Michael Schwarz, Moritz Lipp, Marina Minkin,
Daniel Genkin, Yarom Yuval, Berk Sunar, Daniel Gruss, and Frank Piessens.
2020. LVI: Hijacking Transient Execution through Microarchitectural Load Value
Injection. In 41th IEEE Symposium on Security and Privacy (S&P’20).
[7] Jo Van Bulck, Nico Weichbrodt, Rüdiger Kapitza, Frank Piessens, and Raoul
Strackx. 2017. Telling Your Secrets without Page Faults: Stealthy Page Table-
Based Attacks on Enclaved Execution, See [23], 1041–1056.
[8] Michael Burrows and David Wheeler. 1994. A block-sorting lossless data com-
pression algorithm. Technical Report. Digital Equipment Corporation. 18 pages.
http://www.hpl.hp.com/techreports/Compaq-DEC/SRC-RR-124.pdf
[9] David Cash, Paul Grubbs, Jason Perry, and Thomas Ristenpart. 2015. Leakage-
Abuse Attacks Against Searchable Encryption, See [35], 668–679. http://dl.acm.
org/citation.cfm?id=2810103
[10] Melissa Chase and Emily Shen. 2015. Substring-Searchable Symmetric Encryption.