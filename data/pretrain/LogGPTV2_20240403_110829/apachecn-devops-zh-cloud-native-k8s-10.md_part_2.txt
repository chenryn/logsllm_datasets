## 案例研究 1–服务没有响应
我们将把这一部分分解为 Kubernetes 栈不同级别的故障排除，从更高级别的组件开始，然后以深入的 Pod 和容器调试结束。
让我们假设我们已经配置了我们的应用`app-1`通过端口`32688`上的`NodePort`服务来响应请求。应用监听端口`80`。
我们可以尝试通过一个节点上的`curl`请求来访问我们的应用。该命令将如下所示:
```
curl http://10.213.2.1:32688
```
如果失败，`curl`命令的输出如下所示:
```
curl: (7) Failed to connect to 10.231.2.1 port 32688: Connection refused
```
此时，我们的`NodePort`服务没有将请求路由到任何 Pod。按照我们的典型调试路径，让我们首先使用以下命令来查看集群中正在运行哪些资源:
```
kubectl get services
```
添加`-o`宽标志查看更多信息。接下来，运行以下命令:
```
kubectl get services -o wide 
```
这为我们提供了以下输出:
```
NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE SELECTOR 
app-1-svc NodePort 10.101.212.57  80:32688/TCP 3m01s app=app-1
```
很明显，我们的服务有一个合适的节点端口，但是我们的请求没有被路由到 Pods，这从失败的`curl`命令中可以明显看出。
要查看我们的服务设置了哪些路由，让我们使用`get endpoints`命令。这将列出为服务配置的 Pod IPs(如果有):
```
kubectl get endpoints app-1-svc
```
让我们检查命令的结果输出:
```
NAME        ENDPOINTS
app-1-svc   
```
嗯，这里肯定有问题。
我们的服务没有指向任何 Pods。这可能意味着没有任何 Pods 匹配我们的服务选择器可用。这可能是因为根本没有可用的 Pods，或者因为这些 Pods 与服务选择器不匹配。
要检查我们的服务选择器，让我们进入调试路径的下一步，并使用`describe`命令，如下所示:
```
kubectl describe service app-1-svc  
```
这给了我们一个如下所示的输出:
```
Name:                   app-1-svc
Namespace:              default
Labels:                 app=app-11
Annotations:            
Selector:               app=app-11
Type:                   NodePort
IP:                     10.57.0.15
Port:                    80/TCP
TargetPort:             80/TCP
NodePort:                32688/TCP
Endpoints:              
Session Affinity:       None
Events:                 
```
如您所见，我们的服务被配置为与应用上的正确端口通信。然而，选择器正在寻找与标签`app = app-11`匹配的 PODS。因为我们知道我们的应用被命名为`app-1`，这可能是我们问题的原因。
让我们编辑我们的服务以寻找正确的 Pod 标签，`app-1`，运行另一个`describe`命令以确保:
```
kubectl describe service app-1-svc
```
这给出了以下输出:
```
Name:                   app-1-svc
Namespace:              default
Labels:                 app=app-1
Annotations:            
Selector:               app=app-1
Type:                   NodePort
IP:                     10.57.0.15
Port:                    80/TCP
TargetPort:             80/TCP
NodePort:                32688/TCP
Endpoints:              
Session Affinity:       None
Events:                 
```
现在，您可以在输出中看到，我们的服务正在寻找合适的 Pod 选择器，但是我们仍然没有任何端点。让我们通过使用以下命令来检查一下我们的 Pods 发生了什么:
```
kubectl get pods
```
这显示了以下输出:
```
NAME                              READY     STATUS    RESTARTS   AGE
app-1-pod-2821252345-tj8ks        0/1       Pending   0          -
app-1-pod-2821252345-9fj2k        0/1       Pending   0          -
app-1-pod-2821252345-06hdj        0/1       Pending   0          -
```
我们的 Pod 仍在等待安排。这解释了为什么即使有适当的选择器，我们的服务也不能正常工作。要了解为什么我们的 Pods 没有被调度，让我们使用`describe`命令:
```
kubectl describe pod app-1-pod-2821252345-tj8ks
```
以下是输出。让我们关注`Events`部分:
![Figure 10.2 – Describe Pod Events output](img/B14790_10_002.jpg)
图 10.2–描述 Pod 事件输出
从`Events`部分来看，由于容器映像拉取失败，我们的 Pod 似乎无法如期完成。这可能有许多原因——例如，我们的集群可能没有必要的身份验证机制来从私有存储库中提取数据——但这将呈现不同的错误消息。
从上下文和`Events`输出中，我们可以大概假设问题是我们的 Pod 定义正在寻找一个名为`myappimage:lates`的容器，而不是`myappimage:latest`。
让我们用正确的映像名称更新我们的部署规范，并推出更新。
使用以下命令获得确认:
```
kubectl get pods
```
输出如下所示:
```
NAME                              READY     STATUS    RESTARTS   AGE
app-1-pod-2821252345-152sf        1/1       Running   0          1m
app-1-pod-2821252345-9gg9s        1/1       Running   0          1m
app-1-pod-2821252345-pfo92        1/1       Running   0          1m
```
我们的 Pods 现在正在运行，让我们检查一下我们的服务是否注册了正确的端点。使用以下命令来完成此操作:
```
kubectl describe services app-1-svc
```
输出应该是这样的:
```
Name:                   app-1-svc
Namespace:              default
Labels:                 app=app-1
Annotations:            
Selector:               app=app-1
Type:                   NodePort
IP:                     10.57.0.15
Port:                    80/TCP
TargetPort:             80/TCP
NodePort:                32688/TCP
Endpoints:              10.214.1.3:80,10.214.2.3:80,10.214.4.2:80
Session Affinity:       None
Events:                 
```
成功！我们的服务正确地指向我们的应用盒。
在下一个案例研究中，我们将通过对一个启动参数不正确的 Pod 进行故障排除来进行更深入的研究。
## 案例研究 2–Pod 启动命令不正确
假设我们已经正确配置了服务，并且我们的 Pods 正在运行并通过了运行状况检查。然而，我们的 Pod 没有像我们预期的那样响应请求。我们确信这不是 Kubernetes 的问题，而是应用或配置的问题。
我们的应用容器的工作原理如下:它接受一个带有标志`color`的启动命令，并根据容器的`image`标签将其与一个变量`version number`相结合，然后将其返回给请求者。我们期待我们的申请返回`green 3`。
谢天谢地，Kubernetes 给了我们一些调试应用的好工具，我们可以用它们来深入研究我们的特定容器。
首先，让我们`curl`应用看看我们得到什么响应:
```
curl http://10.231.2.1:32688  
red 2
```
我们期望`green 3`但是得到了`red 2`，所以看起来输入有问题，版本号变量。先说前者。
像往常一样，我们从使用以下命令检查我们的 Pods 开始:
```
kubectl get pods
```
输出应该如下所示:
```
NAME                              READY     STATUS    RESTARTS   AGE
app-1-pod-2821252345-152sf        1/1       Running   0          5m
app-1-pod-2821252345-9gg9s        1/1       Running   0          5m
app-1-pod-2821252345-pfo92        1/1       Running   0          5m
```
在这个输出中，一切看起来都很好。我们的应用似乎是作为部署(因此也是复制集)的一部分运行的——我们可以通过运行以下命令来确保这一点:
```
kubectl get deployments
```
输出应该如下所示:
```
NAME          DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
app-1-pod     3         3         3            3           5m
```
让我们更仔细地看看我们的部署，看看我们的 Pods 是如何使用以下命令进行配置的:
```
kubectl describe deployment app-1-pod -o yaml
```
输出如下所示:
部署中断输出
```
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-1-pod
spec:
  selector:
    matchLabels:
      app: app-1
  replicas: 3
  template:
    metadata:
      labels:
        app: app-1
    spec:
      containers:
      - name: app-1
        image: mycustomrepository/app-1:2
        command: [ "start", "-color", "red" ]
        ports:
        - containerPort: 80
```
让我们看看我们是否能解决我们的问题，这真的很简单。我们使用了错误版本的应用，并且我们的启动命令是错误的。在这种情况下，让我们假设我们的部署规范中没有文件，所以让我们就地编辑它。
让我们使用`kubectl edit deployment app-1-pod`，并将 Pod 规范编辑为以下内容:
固定部署输出
```
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-1-pod
spec:
  selector:
    matchLabels:
      app: app-1
  replicas: 3
  template: