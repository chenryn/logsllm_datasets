### E. Integration with Other Firmware Analyzers

DICE is designed to integrate seamlessly with various firmware analyzers, thereby enhancing their capability to analyze firmware that utilizes Direct Memory Access (DMA). As a demonstration, we integrated DICE with Avatar2 [29], a flexible dynamic firmware analysis framework. This integration required only 240 lines of Python code. With DICE, Avatar2 can recognize and manipulate DMA data as it is read by the firmware, enabling the analysis of firmware that uses DMA for input.

Additionally, we integrated DICE with Symbion [14], an extension to the Angr [38] framework. This integration allows for DMA-aware concolic execution on microcontroller (MCU) firmware. Specifically, DICE and Avatar2 were used to identify the DMA buffers utilized by the firmware as it runs on a real development board. When an interesting point of analysis is reached, Symbion transfers the concrete state of this execution to Angr. Thanks to DICE, Angr can now recognize and symbolize the DMA buffers in the concrete state, resulting in more precise and comprehensive concolic execution.

### F. Peripherals Beyond DMA Controller

Many of DICE's advantages, such as hardware independence and firmware compatibility, are attributed to our abstraction of the DMA input channel. We believe that similar abstractions can be applied to other peripherals, such as counters and comparators, which have well-defined functionalities and identifiable configurations. Identifying whether and how a peripheral can be abstracted for dynamic analysis, in a hardware-independent and firmware-compatible manner, is an interesting research topic that we aim to explore in the future.

### IX. Related Work

#### A. Dynamic Firmware Analysis

Several existing works have addressed the challenge of dynamic firmware analysis. These approaches can be categorized into hardware-in-the-loop emulation and full emulation, depending on whether real devices are required during the dynamic analysis process.

- **Avatar [44]**: Proposed a novel hardware-in-the-loop emulation mechanism, forwarding peripheral operations to a real device while executing the firmware in an emulator. It conducted concolic execution for MCU firmware.
- **Surrogates [22]**: Improved the performance of peripheral operation forwarding using customized hardware.
- **[30]**: Fuzz-tested simple programs with artificially-implanted bugs using Avatar, demonstrating that memory corruption vulnerabilities are less likely to crash on MCUs than on desktops.
- **Avatar2 [29]**: Extended Avatar with record and replay capabilities for forwarded peripheral operations.
- **Charm [42]**: Fuzz-tested Android device drivers using a hardware-in-the-loop emulator with a similar forwarding technique to Avatar.
- **Prospect [21]**: Forwarded peripheral operations made through syscalls, which is not applicable to MCU devices.
- **[20]**: Combined runtime program state approximation with peripheral access caching to facilitate dynamic analysis.

Hardware-in-the-loop emulation approaches suffer from poor performance and scalability due to slow forwarding speeds and one-to-one binding between emulator instances and real devices. Recent works have addressed these issues by removing the need for real devices through full emulation:

- **Pretender [15]**: Generated approximated peripheral models from the peripheral operations forwarded to the real device by Avatar [44]. It successfully executed and fuzz-tested several simple firmware with manually-injected vulnerabilities without using any real device.
- **P2IM [10]**: Completely removed the usage of real devices by automatically modeling processor-peripheral interfaces while emulating the firmware. It fuzz-tested several real-world firmware of typical embedded applications and found real bugs.
- **HALucinator [2]**: Adopted a high-level emulation-based approach, replacing Hardware Abstraction Layer (HAL) functions with manually-crafted handlers by library matching on binary. It fuzz-tested network stack, file system, serial port, and PLC, and found real bugs.
- **PartEmu [17]**: Fuzz-tested ARM TrustZone software stack using a hybrid approach of replacing software components with stubs and modeling peripheral hardware with manually crafted register value patterns.
- **Various works** dynamically analyzed Linux-based firmware by full emulation [6], [8], [34]. These firmware are more similar to general-purpose desktop software than truly embedded firmware. Emulators have better support for Linux-based firmware, which uses fewer diverse peripherals than MCU firmware.

However, none of these works, either hardware-in-the-loop or full emulation, could dynamically analyze MCU firmware using DMA without requiring source code. The major obstacle is the unemulated DMA controllers, which are vendor-specific and possibly proprietary. Our work extends both hardware-in-the-loop (Avatar) and full emulation (P2IM [10]) mechanisms with DMA support, enabling dynamic analysis. Although HALucinator [2] can analyze DMA-enabled firmware (by totally removing DMA operations), its approach (specifically, the library matching component) requires source code of HAL. Additionally, HALucinator cannot find bugs in firmware components replaced by high-level emulation, such as drivers for DMA controllers and other peripherals. DICE, on the other hand, identifies DMA input channels from unmodified firmware, allowing it to find bugs in the entire firmware stack without requiring any source code or manually created handlers.

#### B. DMA Attacks & Analyses

Various works have revealed attacks enabled by DMA. For example:

- **PCILeech [11]**: Demonstrated that malicious peripherals with DMA capability (e.g., PCIe peripherals) can access/modify arbitrary physical memory addresses and gain full control over the victim computer if IOMMU is not enabled.
- **Thunderclap [23]**: Showed that DMA attacks are still feasible even with IOMMU enforced.

These attacks, however, are not feasible on MCUs because MCU peripherals typically do not have DMA capability, and DMA is conducted through a dedicated DMA controller, which is part of the System-on-Chip (SoC) and considered trusted. PeriScope [39] identified that a compromised peripheral device (e.g., Wi-Fi chip) can attack kernel device drivers by sending malicious input through DMA, and thus, fuzz-tested the DMA channels. It identifies DMA channels by instrumenting Linux kernel APIs, which is not applicable to bare-metal MCU firmware.

### X. Conclusion

We presented a survey showing the prevalence and diverse usages of DMA on MCU-based embedded devices. We highlighted the importance of supporting DMA-enabled peripherals during dynamic firmware analysis. To address the inability of existing firmware analyzers to test DMA-enabled firmware, we designed and built DICE, a drop-in solution that enables analyzer-generic and hardware-independent emulation of DMA input channels. By identifying and observing DMA configurations and accesses by firmware during emulated execution, DICE detects DMA input channels that are dynamically created by the firmware. It also dynamically infers the locations and sizes of memory buffers used as DMA transfer destinations. Without requiring any human assistance or firmware source code, DICE allows firmware analyzers to run and test DMA-related code, and in turn, find bugs or vulnerabilities in firmware that would otherwise be unreachable or untriggerable.

We integrated DICE into P2IM (for ARM Cortex-M) and a MIPS PIC32 emulator. We evaluated DICE using 83 sample firmware and 7 real-world firmware. Its runtime overhead is low (3.4%) and its emulation accuracy is very high (89% true positive rate and 0% false positive rate). When used for fuzzing real-world firmware, DICE increased code path coverage by up to 79X. Moreover, it helped detect 5 unique, previously unreported bugs, which would not have been found without the generic and automatic DMA emulation.

### Acknowledgment

The authors would like to thank the anonymous reviewers for their insightful comments. This project was supported by the National Science Foundation (Grant#: CNS-1748334), the Office of Naval Research (Grant#: N00014-18-1-2043), and the Army Research Office (Grant#: W911NF-18-1-0093). Any opinions, findings, and conclusions or recommendations expressed in this paper are those of the authors and do not necessarily reflect the views of the funding agencies.

### References

[References listed here as provided in the original text]

---

This optimized version aims to enhance clarity, coherence, and professionalism, making the content more accessible and easier to understand.