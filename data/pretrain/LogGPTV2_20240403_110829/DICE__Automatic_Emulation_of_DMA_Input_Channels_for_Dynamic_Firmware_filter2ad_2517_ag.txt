emulation.
E. Integration with Other Firmware Analyzers
The design of DICE allows for easy integration with various
ﬁrmware analyzers, providing them with the capability of
analyzing ﬁrmware that use DMA. As a demonstration, we in-
tegrated DICE with Avatar2 [29], a ﬂexible dynamic ﬁrmware
analysis framework. The implementation is only 240 lines of
Python code. This integration allows Avatar2 to recognize and
manipulate DMA data when it was read by the ﬁrmware, and
in turn, to analyze ﬁrmware that uses DMA for input.
Furthermore, we integrate DICE with Symbion [14] (an
extension to the Angr [38] framework). This integration allows
DMA-aware concolic execution on MCU ﬁrmware. Speciﬁ-
cally, we used DICE and Avatar2 to identify the DMA buffers
used by a ﬁrmware as the ﬁrmware runs on a real development
board. Upon reaching an interesting point of analysis, Symbion
moves the concrete state of this execution to Angr. Thanks
to DICE, Angr can now recognize and symbolize the DMA
buffers in the concrete state, achieving a more precise and
comprehensive concolic execution.
F. Peripherals beyond DMA controller
Many merits of DICE, such as hardware-independent and
ﬁrmware compatibility, are attributed to our abstraction of the
DMA input channel. We believe that for other peripherals (e.g.,
counters and comparators), which have well-deﬁned function-
alities and identiﬁable conﬁgurations like DMA controllers do,
can be abstracted in a similar way. We admit that identifying
if and how a peripheral can be abstracted for dynamic analysis
purposes, in a hardware-independent and ﬁrmware-compatible
way, is an interesting research topic that we would like to
pursue in the future.
IX. RELATED WORK
A. Dynamic Firmware Analysis
Multiple existing works tackled the challenging problem of
dynamic ﬁrmware analysis. They are divided into hardware-in-
the-loop emulation approaches and full emulation approaches
by whether real devices are required in the process of dynamic
analysis. Avatar [44] proposed a novel hardware-in-the-loop
emulation mechanism, which forwards peripheral operations
to a real device while executing the ﬁrmware in the emulator.
It conducted concolic execution for MCU ﬁrmware. Surro-
gates [22] improved the performance of peripheral operation
forwarding by customized hardware. [30] fuzz-tested simple
programs with artiﬁcially-implanted bugs using Avatar, which
demonstrated that memory corruption vulnerabilities are much
less likely to crash on MCU than on desktop. Avatar2 [29]
extended Avatar with the record and replay capability for
the forwarded peripheral operations. Charm [42] fuzz-tested
Android device drivers by a hardware-in-the-loop emulator
that uses a similar forwarding technique with Avatar. Prospect
[21] forwarded peripheral operations made through syscalls,
the abstraction of which is not available for MCU devices.
[20] combined runtime program state approximation with
peripheral access caching to facilitate dynamic analysis.
Hardware-in-the-loop emulation approaches suffer
from
poor performance and scalability due to the slow forwarding
speed and one-to-one binding between emulator instances and
real devices. Several recent works addressed this by removing
the need for real devices through full emulation. Pretender [15]
generated approximated peripheral models from the peripheral
operations that are forwarded to the real device by Avatar
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:26:20 UTC from IEEE Xplore.  Restrictions apply. 
1952
[44]. With the model, it successfully executed and fuzzed-
tested several simple ﬁrmware with manually-injected vulner-
abilities without using any real device. P2IM [10] completely
removed the usage of real devices by automatically model-
ing the processor-peripheral interfaces while emulating the
ﬁrmware. It fuzz-tested several real-world ﬁrmware of typical
embedded applications and found real bugs. HALucinator [2]
adopts a high-level emulation-based approach which replaces
Hardware Abstraction Layer (HAL) functions with manually-
crafted handlers by library matching on binary. It fuzz-tested
network stack, ﬁle system, serial port and PLC, and found
real bugs. PartEmu [17] fuzz-tested ARM TrustZone software
stack by a hybrid approach of replacing software components
with stubs and modeling peripheral hardware with manually
crafted register value patterns. Various works dynamically
analyzed Linux-based ﬁrmware by full emulation [6], [8],
[34]. Those ﬁrmware are more similar to general-purpose
desktop software than truly embedded ﬁrmware. Emulators
have much better support for Linux-based ﬁrmware, which
uses less diverse peripherals than MCU ﬁrmware. However,
none of these works, either hardware-in-the-loop emulation
or full emulation, were able to dynamically analyze MCU
ﬁrmware using DMA without requiring any source code. The
major obstacle is the un-emulated DMA controllers, which
are vendor-speciﬁc and possibly proprietary. Our work can
extend both hardware-in-the-loop (Avatar) and full emulation
(P2IM [10]) mechanism with DMA support and conduct dy-
namic analysis. Although HALucinator [2] can analyze DMA-
enabled ﬁrmware (because its high-level emulation totally
removes DMA operations), their approach (speciﬁcally, the
library matching component) requires source code of HAL.
Neither can HALucinator ﬁnd bugs in ﬁrmware components
that are replaced by the high-level emulation, such as drivers
for DMA controller and other peripherals. DICE adopts a
completely different approach which identiﬁes DMA input
channels from unmodiﬁed ﬁrmware. Therefore, DICE is able
to ﬁnd bugs in the whole ﬁrmware stack, without requiring
any source code or manually created handlers.
B. DMA Attacks & Analyses
Various works revealed attacks enabled by DMA. To name
a few, PCILeech [11] revealed that malicious peripherals with
DMA capability (e.g., PCIe peripherals) can access/modify
arbitrary physical memory addresses and gain full control
over the victim computer if IOMMU is not enabled (IOMMU
enables virtual memory for I/O devices). Thunderclap [23]
further demonstrated that DMA attacks are still feasible even
with IOMMU enforced. These attacks, however, are not feasi-
ble on MCUs because MCU peripherals normally do not have
DMA capability, and DMA is conducted through a dedicated
DMA controller which is part of the System-on-Chip (SoC)
and considered trusted. PeriScope [39] identiﬁed a compro-
mised peripheral device (e.g., Wi-Fi chip) can attack kernel
device drivers by sending malicious input through DMA, and
therefore, fuzz-tested the DMA channels. It identiﬁes DMA
channels by instrumenting Linux kernel APIs, which however
is not applicable to bare-metal MCU ﬁrmware.
X. CONCLUSION
We presented a survey showing the prevalence and di-
verse usages of DMA on MCU-based embedded devices.
We highlighted the importance of supporting DMA-enabled
peripherals during dynamic ﬁrmware analysis. To address
existing ﬁrmware analyzers’ inability to test DMA-enabled
ﬁrmware, we designed and built DICE, a drop-in solution
that enables analyzer-generic and hardware-independent em-
ulation of DMA input channels. By identifying and observing
DMA conﬁgurations and accesses by ﬁrmware during emu-
lated execution, DICE detects DMA input channels that are
dynamically created by ﬁrmware. It also dynamically infers
the locations and sizes of memory buffers used as DMA
transfer destinations. Without requiring any human assistance
or ﬁrmware source code, DICE allows ﬁrmware analyzers to
run and test DMA-related code, and in turn, ﬁnd bugs or
vulnerabilities in ﬁrmware that otherwise cannot be reached
or triggered.
We integrated DICE into P2IM (for ARM Cortex-M) and a
MIPS PIC32 emulator. We evaluated DICE using 83 sample
ﬁrmware and 7 real-world ﬁrmware. Its runtime overhead is
low (3.4%) and its emulation accuracy is very high (89% true
positive rate and 0% false positive rate). When used for fuzzing
the real-world ﬁrmware, DICE increased code path coverage
by as much as 79X. Moreover,
it helps detect 5 unique,
previously unreported bugs, which would not have been found
without the generic and automatic DMA emulation.
ACKNOWLEDGMENT
The authors would like to thank the anonymous reviewers
for their insightful comments. This project was supported
by the National Science Foundation (Grant#: CNS-1748334),
the Ofﬁce of Naval Research (Grant#: N00014-18-1-2043),
and the Army Research Ofﬁce (Grant#: W911NF-18-1-0093).
Any opinions, ﬁndings, and conclusions or recommendations
expressed in this paper are those of the authors and do not
necessarily reﬂect the views of the funding agencies.
REFERENCES
[1] Nrf52832 datasheet. https://infocenter.nordicsemi.com/pdf/nRF52832
PS v1.4.pdf. Accessed: Sep 2019.
[2] Halucinator: Firmware re-hosting through abstraction layer emulation.
In 29th USENIX Security Symposium, 2020.
[3] C. Gordon Bell, Allen Newell, and Daniel P. Siewiorek. Structural levels
of the pdp-8. http://digitalcollections.library.cmu.edu/awweb/awarchi
ve?type=ﬁle&item=356992, 1978. Accessed: Apr 2020.
[4] Fabrice Bellar. Qemu features/softmmu. https://wiki.qemu.org/Features
/SoftMMU. Accessed: Apr 2020.
[5] Stephen Checkoway, Damon McCoy, Brian Kantor, Danny Anderson,
Hovav Shacham, Stefan Savage, Karl Koscher, Alexei Czeskis, Franziska
Roesner, and Tadayoshi Kohno. Comprehensive experimental analyses
In 20th USENIX Security Symposium,
of automotive attack surfaces.
San Francisco, CA, USA, August 8-12, 2011, Proceedings. USENIX
Association, 2011.
[6] Daming D Chen, Maverick Woo, David Brumley, and Manuel Egele. To-
wards automated dynamic analysis for linux-based embedded ﬁrmware.
In Network and Distributed System Security Symposium (NDSS), 2016.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:26:20 UTC from IEEE Xplore.  Restrictions apply. 
1953
[28] Valasek Chris Miller Charlie. Remote exploitation of an unaltered
http://illmatics.com/RemoteCarHacking.pdf.
passenger vehicle.
Accessed: Nov 2019.
[29] Marius Muench, Dario Nisi, Aur´elien Francillon, and Davide Balzarotti.
Avatar 2: A multi-target orchestration platform. In BAR, 2018.
[30] Marius Muench, Jan Stijohann, Frank Kargl, Aur´elien Francillon, and
Davide Balzarotti. What you corrupt is not what you crash: Challenges in
fuzzing embedded devices. In Network and Distributed System Security
Symposium (NDSS), 2018.
[31] NIST. CVE-2019-6496. https://nvd.nist.gov/vuln/detail/CVE-2019-64
96, 2019. Accessed: April 2020.
[32] Koopman Phil. A case study of toyota unintended acceleration and
software safety. https://users.ece.cmu.edu/∼koopman/pubs/koopman14
toyota ua slides.pdf, 2014. Accessed: November 2019.
[33] Google Project Zero. Over the air: Exploiting broadcom’s wi-ﬁ stack.
https://googleprojectzero.blogspot.com/2017/04/over-air-exploiting-bro
adcoms-wi-ﬁ 4.html, 2017. Accessed: November 2019.
[34] Matthew J Renzelmann, Asim Kadav, and Michael M Swift. Symdrive:
Testing drivers without devices. In OSDI, 2012.
[35] GigaDevice Semiconductor. Gd32vf103 user manual. http://gd32mcu.
21ic.com/data/documents/shujushouce/GD32VF103 User Manual E
N V1.2.pdf, 2019. Accessed: Nov 2019.
[36] Vakulenko Serge. Qemu for mips pic32. https://github.com/sergev/qe
mu/wiki. Accessed: April 2020.
[37] A. Seshadri, A. Perrig, L. van Doorn, and P. Khosla. Swatt: software-
based attestation for embedded devices. In IEEE Symposium on Security
and Privacy, 2004. Proceedings. 2004, pages 272–282, May 2004.
[38] Yan Shoshitaishvili, Ruoyu Wang, Christopher Salls, Nick Stephens,
Mario Polino, Audrey Dutcher, John Grosen, Siji Feng, Christophe
Hauser, Christopher Kruegel, and Giovanni Vigna. SoK: (State of)
In IEEE
The Art of War: Offensive Techniques in Binary Analysis.
Symposium on Security and Privacy, 2016.
[39] Dokyung Song, Felicitas Hetzelt, Dipanjan Das, Chad Spensky, Yeoul
Na, Stijn Volckaert, Giovanni Vigna, Christopher Kruegel, Jean-Pierre
Seifert, and Michael Franz. Periscope: An effective probing and fuzzing
framework for the hardware-os boundary. In Network and Distributed
System Security Symposium (NDSS), 2019.
[40] STmicroelectronics. Stm32f4 reference manual. https://www.st.com/r
esource/en/reference manual/dm00031020.pdf, 2019. Accessed: Nov
2019.
[41] Zhichuang Sun, Bo Feng, Long Lu, and Somesh Jha. Oat: Attesting
operation integrity of embedded devices. In 2020 IEEE Symposium on
Security and Privacy (SP). IEEE, 2020.
[42] Seyed Mohammadjavad Seyed Talebi, Hamid Tavakoli, Hang Zhang,
Zheng Zhang, Ardalan Amiri Sani, and Zhiyun Qian. Charm: Facilitating
dynamic analysis of device drivers of mobile systems. In 27th USENIX
Security Symposium, 2018.
[43] Wikipedia. Stuxnet. https://en.wikipedia.org/wiki/Stuxnet, 2010.
Accessed: Sep 2019.
[44] Jonas Zaddach, Luca Bruno, Aurelien Francillon, and Davide Balzarotti.
Avatar: A framework to support dynamic security analysis of embedded
In Network and Distributed System Security
systems’ ﬁrmwares.
Symposium (NDSS), 2014.
[45] Michal Zalewski. american fuzzy lop. http://lcamtuf.coredump.cx/afl/.
Accessed: Sep 2019.
[7] Nassim Corteggiani, Giovanni Camurati, and Aur´elien Francillon. In-
ception: system-wide security testing of real-world embedded systems
software. In 27th USENIX Security Symposium, 2018.
[8] Andrei Costin, Apostolis Zarras, and Aur´elien Francillon. Automated
dynamic ﬁrmware analysis at scale: a case study on embedded web
interfaces. In ACM Asia Conference on Computer and Communications
Security, 2016.
[9] Geovanny Di Sirio. ChibiOS. http://chibios.org, 2017. Accessed: Sep
2019.
[10] Bo Feng, Alejandro Mera, and Long Lu. P2im: Scalable and hardware-
independent ﬁrmware testing via automatic peripheral interface model-
ing. In 29th USENIX Security Symposium, 2020.
[11] U. Frisk. Direct memory attack the kernel.
In Proceedings of
DEFCON’24, 2016.
[12] Gartner. Gartner says 5.8 billion enterprise and automotive iot endpoints
will be in use in 2020. https://www.gartner.com/en/newsroom/press-re
leases/2019-08-29-gartner-says-5-8-billion-enterprise-and-automotive
-io. Accessed: Nov 2019.
[13] GPSinformation.org. NMEA data. https://www.gpsinformation.org/dal
e/nmea.htm. Accessed: Sep 2019.
[14] Fabio Gritti, Lorenzo Fontana, Eric Gustafson, Fabio Pagani, Andrea
Continella, Christopher Kruegel, and Giovanni Vigna. Symbion: Inter-
leaving symbolic with concrete execution. In Proceedings of the IEEE
Conference on Communications and Network Security (CNS), June 2020.
[15] Eric Gustafson, Marius Muench, Chad Spensky, Nilo Redini, Aravind
Machiry, Yanick Fratantonio, Davide Balzarotti, Aurelien Francillon,
Yung Ryn Choe, Christophe Kruegel, et al. Toward the analysis of
In International
embedded ﬁrmware through automated re-hosting.
Symposium on Research in Attacks, Intrusions and Defenses (RAID)
2019), 2019.
[16] Taylor Hardin, Ryan Scott, Patrick Proctor, Josiah D. Hester, Jacob
Sorber, and David Kotz. Application memory isolation on ultra-low-
power mcus. In 2018 USENIX Annual Technical Conference, USENIX
ATC 2018, Boston, MA, USA, July 11-13, 2018, pages 127–132, 2018.
[17] Lee Harrison, Hayawardh Vijayakumar, Rohan Padhye, Koushik Sen,
and Michael Grace. PARTEMU: Enabling dynamic analysis of real-
In 29th USENIX Security
world trustzone software using emulation.
Symposium, 2020.
[18] Jesse Hertz and Tim Newsham. Triforceaﬂ. https://www.nccgroup.trust
/us/about-us/newsroom-and-events/blog/2016/june/project-triforce-run
-aﬂ-on-everything/. Accessed: Sep 2019.
[19] IC Insights. The mcclean report 2017 - april update. https://www.eene
wsanalog.com/news/ma-moves-alter-mcu-vendor-ranking-0. Accessed:
Sep 2019.
[20] Markus Kammerstetter, Daniel Burian, and Wolfgang Kastner. Embed-
ded security testing with peripheral device caching and runtime program
In 10th International Conference on Emerging
state approximation.
Security Information, Systems and Technologies (SECUWARE), 2016.
[21] Markus Kammerstetter, Christian Platzer, and Wolfgang Kastner.
Prospect: peripheral proxying supported embedded code testing. In ACM
Symposium on Information, Computer and Communications Security,
2014.
[22] Karl Koscher, Tadayoshi Kohno, and David Molnar. Surrogates: En-
abling near-real-time dynamic analyses of embedded systems. In WOOT,
2015.
[23] A Theodore Markettos, Colin Rothwell, Brett F Gutstein, Allison Pearce,
Peter G Neumann, Simon W Moore, and Robert NM Watson. Thun-
derclap: Exploring vulnerabilities in operating system iommu protection
In Network and Distributed
via dma from untrustworthy peripherals.
System Security Symposium (NDSS), 2019.
[24] Microchip. Microchip product portfolio march 2019. https://www.mi
crochip.com/ParamChartSearch/chart.aspx?branchID=30063, 2019.
Accessed: March 2019.
[25] Microchip. Quick reference guide 16bit microcontrollers. http://ww1.mi
crochip.com/downloads/en/DeviceDoc/30010109F.pdf, 2019. Accessed:
March 2019.
[26] Microchip. Quick reference guide 32bit microcontrollers. http://ww
1.microchip.com/downloads/en/DeviceDoc/60001455D.pdf, 2019.
Accessed: March 2019.
[27] Microchip. Quick reference guide 8bit microcontrollers. http://ww1.micr
ochip.com/downloads/en/DeviceDoc/30009630M.pdf, 2019. Accessed:
March 2019.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:26:20 UTC from IEEE Xplore.  Restrictions apply. 
1954