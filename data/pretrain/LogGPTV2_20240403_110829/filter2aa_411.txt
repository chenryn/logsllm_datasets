### OTP Circumvention in MIFARE ULTRALIGHT: Who Says Free Rides?

**Authors:**
- bughardy (Matteo Beccaro)
- Eagle1753 (Matteo Collura)

### Introduction
Radio Frequency Identification (RFID) technologies are increasingly prevalent in our daily lives. This motivated us to study them, particularly focusing on MIFARE ULTRALIGHT chips, which are widely used in public and mass transport systems. Our research concentrated on multiple-ride tickets and revealed that MIFARE ULTRALIGHT chips do not store any encrypted data.

NFC chips should help transport companies prevent fraud and counterfeit tickets. However, the scenario we present highlights a different reality. In 2012, a security team from the U.S.¹ discovered a poorly implemented transport ticket checking system. Each time a traveler used one of their rides, the system wrote the remaining rides to the DATA bytes of the ticket. Simply erasing the data area would reset the ticket to a brand new state. Subsequently, several transport companies began using the One-Time-Pad (OTP) feature of MIFARE ULTRALIGHT tickets. The OTP area is 32 bits long, with each bit initially set to zero. After each ride, one bit is set to 1, and these bits cannot be reset to zero.

In this paper and accompanying talk, we will discuss how to bypass the OTP feature to gain free rides using MIFARE ULTRALIGHT transport tickets. We will also present an easy-to-use script that displays ticket information and facilitates gaining free rides.

¹Corey Benninger and Max Sobell, security researchers at the Intrepidus Group

### MIFARE ULTRALIGHT Sectors
Let's examine the structure of a MIFARE ULTRALIGHT chip:

- **UID (Ticket's serial number):** 9 bytes
- **Internal byte (written by manufacturer):** 1 byte
- **Lock bytes:** 2 bytes
- **OTP bytes:** 4 bytes
- **Data bytes:** 48 bytes

In the OTP sector, all bits are set to 0 after production. Writing to this area involves ORing the existing bits, making it impossible to turn a "1" back to "0". This security feature prevents abuse of NFC chips in transport systems, ensuring that erasing the data area does not reset the ticket.

### How the System Works
Each ride sets a bit to 1 in the OTP sector. Other relevant data, such as the type of transport (metro, bus, etc.) or the time of the last stamp, are written in the DATA sector. Once a ticket is validated, the user has 90 minutes to use the ride. The ticket is valid across different transport systems, but you can only use the metro once per ride. Therefore, the ticket must store data to identify the metro station.

### Vulnerabilities
After extensive analysis, we identified two potential vulnerabilities:

#### Decoding Time Data
The first vulnerability involves decoding the time data written on the ticket. By understanding how this data is encoded and written in the DATA sector, anyone can write it to the ticket without modifying the OTP data, thus avoiding the reduction of available rides while making the ticket appear validated.

We have not yet been able to decode the time data, but we will provide some dumps for those who wish to assist us. Another method to exploit this vulnerability is through a Man-in-the-Middle (MiTM) attack. Using an NFC emulator, Android phone, or Proxmark, an attacker could intercept the communication between the stamping machine and the chip, writing only the DATA bytes to the ticket. This way, the ticket can be validated for 90 minutes without knowing the exact encoding of the time data.

We did not test this method due to the lack of a Proxmark.

#### (Ab)Using Lock Bytes
The second and more interesting vulnerability involves the lock bytes sector. This sector consists of two bytes, where each bit controls the freeze status of other bytes:

- **First byte:**
  - Bit 0: Locks the first 4 bytes in the DATA sector
  - Bit 1: Locks the second 4 bytes in the DATA sector
  - ...
  - Bit 4: Locks the OTP sector
  - Bit 6: Freezes lock bits for the second half of the DATA sector
  - Bit 7: Freezes lock bits for the first half of the DATA sector and the OTP sector

- **Second byte:** Locks only bytes in the DATA sector, currently not useful.

By setting bit 4 of the first byte in the lock sector, we can lock the OTP sector, preventing the machine from setting its bits to 1. This creates an unlimited-rides ticket. Our tests showed the following lock bytes structure for our ticket:

- **HEX:** F2 03
- **BIN:** 11110010 00000011

Analyzing this, we found that several bytes in the DATA sector are locked and cannot be unlocked due to bit 6 of the first byte. By setting bit 4 of the first byte to 1, we locked the OTP sector, creating a free ticket for life:

- **HEX:** FA 03
- **BIN:** 11111010 00000011

### Tool
We are developing a tool to check the ticket status and make it endless. The tool is in the alpha stage, and we plan to rewrite it in C/C++. It is currently written in Python and requires the nfc-tool to be installed on the computer. The tool's functions include:

- Checking dump states
- Editing rides left and enabling endless functionality
- Writing dumps to the hard drive
- Writing dumps to the ticket

While not fully optimized, the tool is functional and serves as a good initial release. Here is an example of its usage:

```bash
bughardy@cryptolab:~$ python nfc.py dump.mfd
Looking for dump...
Printing ticket infos...
SERIAL NUMBER: 04d3e1be32782680ec
INTERNAL BIT: 48
LOCK BYTES: fa03
FREE RIDES ENABLED!
OTP BYTES: 3ffffffe RIDES LEFT: 1
DATA BYTES:
01040000020102be4011960000ae10a061040af32cbb244e43671f000
4f8000043671f00000d0004f8ae107a2f12e5f
```

### Fix
Fixing the OTP vulnerability should be relatively straightforward. A firmware update could check if the lock sector is locking the OTP area and refuse to validate the ticket if it is. Addressing the MiTM and decoding attacks would be more challenging. In our opinion, there is no simple fix for these issues. Using NFC chips with encrypted communication could mitigate the problem, but the encryption must change the time data for each ticket, for example, by using the UID as an Initialization Vector (IV). Otherwise, an attacker with one ticket could validate multiple other tickets by copying the time data.

### Authors
- bughardy (Matteo Beccaro)
- Eagle1753 (Matteo Collura)