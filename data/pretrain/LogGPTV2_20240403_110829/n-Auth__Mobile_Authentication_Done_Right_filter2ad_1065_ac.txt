phone application was proposed [24]. The paper introduced two
ways that the Pico can work, by either performing a mutual au-
thentication with the website (as in the original work) or by using
a browser plugin “Pico lens”, that rewrites websites so they appear
Pico compatible. The latter option makes the Pico send passwords
to the website through HTTPS and then transfer the cookie to
the web browser instead of performing a mutual authentication.
Essentially, this option turns the Pico into a password manager
that is triggered by the user through a visual code. In subsequent
work [23] the authors completely drop the original Pico and con-
firm that the password-based approach combined with "Password
Manager Friendly" (PMF) annotations[25] whereby the website al-
lows password-manager-created passwords without imposing its
customary composition policy on these as long as these as suffi-
ciently long (level 2) is the new ‘native mode’ Pico. The paper also
defines level 0 (no changes to the server) and level 1 (only PMF
annotations) as the Pico in ‘compatibility mode’. This evolution
of the Pico concept loses several features such as continuous au-
thentication and the ability to log out from the device; and comes
with the intrinsic disadvantages of transferring passwords. The
very recently published usability study (April this year) on Pico [1]
seems to suggest the that Pico team has abandoned their browser
plugin for a reserve proxy setup at the server and is using the Pico
prototype (only Android) in ’compatibility mode’ (user has to enter
his password in the app, no indication whatsoever that the Pico
updates the user’s password to a longer, hard-to-guess password)
without any kind of database locking mechanism (no mention of
Pico Siblings as in the original concept or even the use of PIN
or fingerprint). In this light, we will evaluate the current Pico in
’compatibility mode’ without database locking mechanism.
ACSAC 2017, December 4–8, 2017, San Juan, PR, USA
R. Peeters et al.
Bonneau et al. [6] described a general Usability-Deployability-
Security evaluation framework, using a concise list of properties,
which we will use for our comparison. Table 1 shows the properties
attributed to the original Pico description by Stajano [22] as per
et al. [6], supplemented with our evaluation of their new direction
[1, 23] and our n-Auth implementation. In the following sections, we
always first state each property together with a short explanation,
taken verbatim from [6].
Table 1: Properties for Pico and n-Auth.
]
3
2
,
1
[
o
c
i
P
t
n
e
r
r
u
c
•
◦
◦
◦
◦
•
•
•
◦
•
•
•
◦
•
•
◦
•
•
◦
•
]
2
2
[
o
c
i
P
l
a
n
i
g
i
r
o
•
•
•
•
•
•
•
◦
•
◦
•
•
•
•
•
?
?
?
h
t
u
A
-
n
•
•
•
•
•
•
•
◦
•
•
•
•
•
•
◦
◦
•
◦
•
•
◦
•
y
t
i
r
u
c
e
S
Resilient-to-Physical-Observation
Resilient-to-Targeted-Impersonation
Resilient-to-Throttled-Guessing
Resilient-to-Unthrottled-Guessing
Resilient-to-Internal-Observation
Resilient-to-Leaks-from-Other-Verifiers
Resilient-to-Phishing
Resilient-to-Theft
No-Trusted-Third-Party
Requiring-Explicit-Consent
Unlinkable
y Accessible
t
i
l
i
b
a
y
o
l
p
e
D
y
t
i
l
i
b
a
s
U
Neglibile-Cost-per-User
Server-Compatible
Browser-Compatible
Mature
Non-Proprietary
Memorywise-Effortless
Scalable-For-Users
Nothing-To-Carry
Physically-Effortless
Easy-to-Learn
Efficient-to-Use
Infrequent-Errors
Easy-Recovery-from-Loss
• fully achieved, ◦ partially achieved
7.1 Security
Resilient-to-Physical-Observation. An attacker cannot imperson-
ate a user after observing them authenticate one or more times.
This is clearly achieved by all three since no credentials need to
be entered by the user at login. n-Auth can make use of a PIN as a
second factor (database locking mechanism), however knowledge
of the PIN alone is not enough to log in.
Resilient-to-Targeted-Impersonation. It is not possible for an ac-
quaintance (or skilled investigator) to impersonate a specific user
by exploiting knowledge of personal details (birth date, names of
relatives etc.).
Resilient-to-Throttled-Guessing. An attacker whose rate of guess-
ing is constrained by the verifier cannot successfully guess the
secrets of a significant fraction of users.
Resilient-to-Unthrottled-Guessing. An attacker whose rate of guess-
ing is constrained only by available computing resources cannot
successfully guess the secrets of a significant fraction of users.
Both the original Pico and n-Auth make use of public key authen-
tication, for which the private keys are assumed to be hard to guess,
thus achieving the three properties above. However given that in
current Pico, the user has to input his existing password for each
account into the Pico app, we only rate it Quasi- on these three prop-
erties. This is based on users’ well-established poor track record
in password selection and the fact that some of them even keep
passwords written down in plain sight. Note that Pico in ’native
mode’ achieves these three properties.
Resilient-to-Internal-Observation. An attacker cannot imperson-
ate a user by intercepting the user’s input from inside the user’s
device (e.g., by key-logging malware) or eavesdropping on the clear-
text communication between prover and verifier (we assume that
the attacker can also defeat TLS if used, perhaps through the CA).
Given that the original Pico is a dedicated hardware token, which
can be assumed to be malware-free, it achieves this property. The
current Pico relies on TLS to send over a user name and password
(static data) to the server, hence it does not achieve this property.
Since key storage (database), the SIGMA-I protocol and the PIN
input (custom keypad) are handled by the n-Auth app directly,
malware on the user’s device will not be able to get information
needed for logging in.
Resilient-to-Leaks-from-Other-Verifiers. Nothing that a verifier
could possibly leak can help an attacker impersonate the user to
another verifier.
Both the original Pico and n-Auth only store public keys at the
verifier, from which deriving private keys is assumed to be hard.
Hence, leaking these public keys will not even help the attacker im-
personate the user to the verifier that leaked its public key database.
The current Pico cannot fully achieve this property, since users are
known for re-using their passwords. Note that Pico in ’native mode’
achieves this property.
Resilient-to-Phishing. An attacker who simulates a valid verifier
(including by DNS manipulation) cannot collect credentials that
can later be used to impersonate the user to the actual verifier.
All three approaches protect against phishing by embedding the
server identity in the visual code and fetching the URL from their
devices’ internal databases.
Resilient-to-Theft. If the scheme uses a physical object for authen-
tication, the object cannot be used for authentication by another
person who gains possession of it.
Both the original Pico and n-Auth are Quasi-Resilient-to-Theft,
the former due to the Pico Siblings, the latter as it relies on the mod-
est strength of a PIN, even though attempts are rate-controlled. The
current Pico does not seem to have a database locking mechanism,
hence it does not achieve this property.
No-Trusted-Third-Party. The scheme does not rely on a trusted
third party (other than the prover and the verifier) who could, upon
n-Auth: Mobile Authentication Done Right
ACSAC 2017, December 4–8, 2017, San Juan, PR, USA
being attacked or otherwise becoming untrustworthy, compromise
the prover’s security or privacy.
None of the three approaches relies on a trusted third party.
Requiring-Explicit-Consent. The authentication process cannot
be started without the explicit consent of the user.
Explicit user consent is built into the n-Auth device’s user in-
terface. Both Pico concepts require user interaction for logging in,
however no explicit consent from the user is required after getting
the necessary context (the user consents to log into a website, but it
could be any website for which he has an account), hence we only
rate them Quasi- achieving this property9. Given that the current
Pico seems to be for one account on one website only, the context
is clear and hence we rate it to achieve this property fully.
Unlinkable. Colluding verifiers cannot determine, from the au-
thenticator alone, whether the same user is authenticating to both.
Both the original Pico and n-Auth achieve this by generating
new keys for each account. The current Pico cannot fully achieve
this due to password re-use by users. Note that Pico in ’native mode’
achieves this property.
7.2 Deployability
Accessible. Users who can use passwords are not prevented from
using the scheme by disabilities or other physical (not cognitive)
conditions.
None of the three approaches is accessible as these require align-
ment of the device with the screen monitor to scan a visual code.
Negligible-Cost-per-User. The total cost per user of the scheme,
adding up the costs at both the prover’s end (any devices required)
and the verifier’s end (any share of the equipment and software
required), is negligible.
The original Pico concept with a dedicated hardware token
clearly does not achieve this property. Both the current Pico and
n-Auth are mobile apps and can thus achieve this property.
Server-Compatible. At the verifier’s end, the scheme is compati-
ble with text-based passwords. Providers don’t have to change their
existing authentication setup to support the scheme.
This is only achieved by the current Pico, as both the original
Pico and n-Auth rely on public key authentication.
Browser-Compatible. Users don’t have to change their client to
support the scheme and can expect the scheme to work when