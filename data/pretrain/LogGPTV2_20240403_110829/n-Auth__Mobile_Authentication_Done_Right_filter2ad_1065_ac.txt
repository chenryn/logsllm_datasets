### Evolution and Evaluation of the Pico Authentication System

#### Introduction
A phone application, Pico, was proposed in [24]. The paper introduced two operational modes for Pico: mutual authentication with a website (as in the original work) or using a browser plugin called "Pico Lens" to rewrite websites, making them Pico-compatible. The latter option allows Pico to send passwords via HTTPS and transfer cookies to the web browser, effectively turning Pico into a password manager triggered by a visual code. In subsequent work [23], the authors abandoned the original Pico concept and adopted a password-based approach combined with "Password Manager Friendly" (PMF) annotations [25]. This new "native mode" Pico requires sufficiently long passwords but does not impose customary composition policies. The paper also defines "compatibility mode" as level 0 (no changes to the server) and level 1 (only PMF annotations).

This evolution of Pico has led to the loss of several features, such as continuous authentication and the ability to log out from the device. It also introduces the inherent risks associated with password transmission. A recent usability study [1] suggests that the Pico team has shifted to a reverse proxy setup on the server and is using the Pico prototype (currently only available on Android) in "compatibility mode." Users must enter their passwords in the app, and there is no indication that Pico updates passwords to longer, hard-to-guess ones. Additionally, there is no mention of database locking mechanisms, Pico Siblings, or the use of PINs or fingerprints.

In this context, we will evaluate the current Pico in "compatibility mode" without a database locking mechanism.

#### Usability-Deployability-Security Evaluation Framework
Bonneau et al. [6] described a general evaluation framework for Usability, Deployability, and Security using a concise list of properties. Table 1 summarizes these properties for the original Pico, the new direction of Pico [1, 23], and our n-Auth implementation. In the following sections, each property is stated along with a brief explanation, taken verbatim from [6].

| **Property** | **Original Pico** | **Current Pico** | **n-Auth** |
|--------------|-------------------|------------------|------------|
| Resilient-to-Physical-Observation | • | ◦ | • |
| Resilient-to-Targeted-Impersonation | • | ◦ | • |
| Resilient-to-Throttled-Guessing | • | ◦ | • |
| Resilient-to-Unthrottled-Guessing | • | ◦ | • |
| Resilient-to-Internal-Observation | • | ◦ | • |
| Resilient-to-Leaks-from-Other-Verifiers | • | ◦ | • |
| Resilient-to-Phishing | • | • | • |
| Resilient-to-Theft | Quasi- | ◦ | Quasi- |
| No-Trusted-Third-Party | • | • | • |
| Requiring-Explicit-Consent | Quasi- | • | • |
| Unlinkable | • | ◦ | • |

#### Security Properties
1. **Resilient-to-Physical-Observation**: An attacker cannot impersonate a user after observing them authenticate one or more times. This is achieved by all three systems since no credentials are entered by the user at login. n-Auth can use a PIN as a second factor, but knowledge of the PIN alone is insufficient for login.

2. **Resilient-to-Targeted-Impersonation**: It is not possible for an acquaintance or skilled investigator to impersonate a specific user by exploiting personal details. Both the original Pico and n-Auth achieve this, while the current Pico is rated Quasi- due to the need for users to input existing passwords.

3. **Resilient-to-Throttled-Guessing**: An attacker whose rate of guessing is constrained by the verifier cannot successfully guess the secrets of a significant fraction of users. Both the original Pico and n-Auth use public key authentication, achieving this property. The current Pico is rated Quasi- due to poor password selection practices.

4. **Resilient-to-Unthrottled-Guessing**: An attacker whose rate of guessing is constrained only by computing resources cannot successfully guess the secrets of a significant fraction of users. Similar to the previous property, the current Pico is rated Quasi-.

5. **Resilient-to-Internal-Observation**: An attacker cannot impersonate a user by intercepting input from inside the user’s device or eavesdropping on communication. The original Pico, being a dedicated hardware token, achieves this. The current Pico relies on TLS, which may be compromised, and thus does not fully achieve this property.

6. **Resilient-to-Leaks-from-Other-Verifiers**: Leaked information from one verifier cannot help an attacker impersonate the user to another. The original Pico and n-Auth store only public keys, achieving this property. The current Pico is rated Quasi- due to password reuse.

7. **Resilient-to-Phishing**: An attacker simulating a valid verifier cannot collect credentials. All three approaches protect against phishing by embedding server identity in the visual code and fetching URLs from internal databases.

8. **Resilient-to-Theft**: If a physical object is used for authentication, it cannot be used by another person who gains possession of it. The original Pico and n-Auth are Quasi-Resilient-to-Theft, while the current Pico does not have a database locking mechanism and thus does not achieve this property.

9. **No-Trusted-Third-Party**: The scheme does not rely on a trusted third party. None of the three approaches do.

10. **Requiring-Explicit-Consent**: The authentication process cannot start without explicit user consent. n-Auth requires explicit consent, while both Pico concepts require user interaction but are rated Quasi-.

11. **Unlinkable**: Colluding verifiers cannot determine if the same user is authenticating to both. The original Pico and n-Auth achieve this by generating new keys for each account. The current Pico is rated Quasi- due to password reuse.

#### Deployability Properties
1. **Accessible**: Users with disabilities or other physical conditions can use the scheme. None of the three approaches are fully accessible as they require aligning the device with the screen to scan a visual code.

2. **Negligible-Cost-per-User**: The total cost per user is negligible. The original Pico with a dedicated hardware token does not achieve this, while the current Pico and n-Auth, being mobile apps, can achieve this.

3. **Server-Compatible**: The scheme is compatible with text-based passwords. Only the current Pico achieves this, as the original Pico and n-Auth rely on public key authentication.

4. **Browser-Compatible**: Users do not need to change their client to support the scheme. The current Pico and n-Auth are browser-compatible, while the original Pico is not.

In summary, the current Pico in "compatibility mode" lacks several security features and deployability advantages compared to the original Pico and n-Auth. Further improvements are needed to enhance its overall effectiveness and user experience.