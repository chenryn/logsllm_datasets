options you chose are correct, click OK to begin disassembly.
Your choices for the first and second options will depend on the executable you’re
trying to disassemble. In this example, we’re disassembling a Windows executable that uses
the PE format with an x86 processor. For other platforms, such as macOS or Linux, you’ll
need to select the appropriate options. IDA will make its best efforts to detect the format
necessary to disassemble your target, so normally you won’t need to choose. During
disassembly, it will do its best to find all executable code, annotate the decompiled
functions and data, and determine cross-references between areas of the disassembly.
||||||||||||||||||||
||||||||||||||||||||
Figure 6-5: Options for loading a new file
By default, IDA attempts to provide annotations for variable names and function
parameters if it knows about them, such as when calling common API functions. For cross-
references, IDA will find the locations in the disassembly where data and code are
referenced: you can look these up when you’re reverse engineering, as you’ll soon see.
Disassembly can take a long time. When the process is complete, you should have access
to the main IDA interface, as shown in Figure 6-6.
There are three important windows to pay attention to in IDA’s main interface. The
window at ➋ is the default disassembly view. In this example, it shows the IDA Pro graph
view, which is often a very useful way to view an individual function’s flow of execution. To
display a native view showing the disassembly in a linear format based on the loading
address of instructions, press the spacebar. The window at ➌ shows the status of the
disassembly process as well as any errors that might occur if you try to perform an
Technet24
||||||||||||||||||||
||||||||||||||||||||
operation in IDA that it doesn’t understand. The tabs of the open windows are at ➊.
You can open additional windows in IDA by selecting View ▸ Open subviews. Here
are some windows you’ll almost certainly need and what they display:
IDA View Shows the disassembly of the executable
Exports Shows any functions exported by the executable
Imports Shows any functions dynamically linked into this executable at runtime
Functions Shows a list of all functions that IDA Pro has identified
Strings Shows a list of printable strings that IDA Pro has identified during analysis
Figure 6-6: The main IDA Pro interface
||||||||||||||||||||
||||||||||||||||||||
Figure 6-7: The back button for the IDA Pro disassembly window
Of the five window types listed, the last four are basically just lists of information. The
IDA View is where you’ll spend most of your time when you’re reverse engineering,
because it shows you the disassembled code. You can easily navigate around the
disassembly in IDA View. For example, double-click anything that looks like a function
name or data reference to navigate automatically to the location of the reference. This
technique is especially useful when you’re analyzing calls to other functions: for instance, if
you see CALL sub_400100, just double-click the sub_400100 portion to be taken directly to the
function. You can go to the original caller by pressing the ESC key or the back button,
highlighted in Figure 6-7.
In fact, you can navigate back and forth in the disassembly window as you would in a
web browser. When you find a reference string in the text, move the text cursor to the
reference and press X or right-click and choose Jump to xref to operand to bring up a
cross-reference dialog that shows a list of all locations in the executable referencing that
function or data value. Double-click an entry to navigate directly to the reference in the
disassembly window.
NOTE
By default, IDA will generate automatic names for referenced values. For example, functions
are named sub_XXXX, where XXXX is their memory address; the name loc_XXXX indicates branch
locations in the current function or locations that are not contained in a function. These names
may not help you understand what the disassembly is doing, but you can rename these references
to make them more meaningful. To rename references, move the cursor to the reference text
and press N or right-click and select Rename from the menu. The changes to the name should
propagate everywhere it is referenced.
Analyzing Stack Variables and Arguments
Technet24
||||||||||||||||||||
||||||||||||||||||||
Another feature in IDA’s disassembly window is its analysis of stack variables and
arguments. When I discussed calling conventions in “Application Binary Interface” on
page 123, I indicated that parameters are generally passed on the stack, but that the stack
also stores temporary local variables, which are used by functions to store important values
that can’t fit into the available registers. IDA Pro will analyze the function and determine
how many arguments it takes and which local variables it uses. Figure 6-8 shows these
variables at the start of a disassembled function as well as a few instructions that use these
variables.
Figure 6-8: A disassembled function showing local variables and arguments
You can rename these local variables and arguments and look up all their cross-
references, but cross-references for local variables and arguments will stay within the same
function.
Identifying Key Functionality
Next, you need to determine where the executable you’re disassembling handles the
network protocol. The most straightforward way to do this is to inspect all parts of the
executable in turn and determine what they do. But if you’re disassembling a large
commercial product, this method is very inefficient. Instead, you’ll need a way to quickly
identify areas of functionality for further analysis. In this section, I’ll discuss four typical
approaches for doing so, including extracting symbolic information, looking up which
libraries are imported into the executable, analyzing strings, and identifying automated
code.
Extracting Symbolic Information
||||||||||||||||||||
||||||||||||||||||||
Compiling source code into a native executable is a lossy process, especially when the code
includes symbolic information, such as the names of variables and functions or the form of
in-memory structures. Because this information is rarely needed for a native executable to
run correctly, the compilation process may just discard it. But dropping this information
makes it very difficult to debug problems in the built executable.
All compilers support the ability to convert symbolic information and generate debug
symbols with information about the original source code line associated with an instruction
in memory as well as type information for functions and variables. However, developers
rarely leave in debug symbols intentionally, choosing instead to remove them before a
public release to prevent people from discovering their proprietary secrets (or bad code).
Still, sometimes developers slip up, and you can take advantage of those slipups to aid
reverse engineering.
IDA Pro loads debug symbols automatically whenever possible, but sometimes you’ll
need to hunt down the symbols on your own. Let’s look at the debug symbols used by
Windows, macOS, and Linux, as well as where the symbolic information is stored and how
to get IDA to load it correctly.
When a Windows executable is built using common compilers (such as Microsoft
Visual C++), the debug symbol information isn’t stored inside the executable; instead, it’s
stored in a section of the executable that provides the location of a program database (PDB)
file. In fact, all the debug information is stored in this PDB file. The separation of the
debug symbols from the executable makes it easy to distribute the executable without
debug information while making that information readily available for debugging.
PDB files are rarely distributed with executables, at least in closed-source software. But
one very important exception is Microsoft Windows. To aid debugging efforts, Microsoft
releases public symbols for most executables installed as part of Windows, including the
kernel. Although these PDB files don’t contain all the debug information from the
compilation process (Microsoft strips out information they don’t want to make public,
such as detailed type information), the files still contain most of the function names, which
is often what you want. The upshot is that when reverse engineering Windows
executables, IDA Pro should automatically look up the symbol file on Microsoft’s public
symbol server and process it. If you happen to have the symbol file (because it came with
the executable), load it by placing it next to the executable in a directory and then have
IDA Pro disassemble the executable. You can also load PDB files after initial disassembly
by selecting File ▸ Load File ▸ PDB File.
Debug symbols are most significant in reverse engineering in IDA Pro when naming
functions in the disassembly and Functions windows. If the symbols also contain type
information, you should see annotations on the function calls that indicate the types of
parameters, as shown in Figure 6-9.
Technet24
||||||||||||||||||||
||||||||||||||||||||
Figure 6-9: Disassembly with debug symbols
Even without a PDB file, you might be able to access some symbolic information from
the executable. Dynamic libraries, for example, must export some functions for another
executable to use: that export will provide some basic symbolic information, including the
names of the external functions. From that information, you should be able to drill down
to find what you’re looking for in the Exports window. Figure 6-10 shows what this
information would look like for the ws2_32.dll Windows network library.
||||||||||||||||||||
||||||||||||||||||||
Figure 6-10: Exports from the ws2_32.dll library
Debug symbols work similarly on macOS, except debugging information is contained
in a debugging symbols package (dSYM), which is created alongside the executable rather than
in a single PDB file. The dSYM package is a separate macOS package directory and is
rarely distributed with commercial applications. However, the Mach-O executable format
can store basic symbolic information, such as function and data variable names, in the
executable. A developer can run a tool called Strip, which will remove all this symbolic
information from a Mach-O binary. If they do not run Strip, then the Mach-O binary may
still contain useful symbolic information for reverse engineering.
On Linux, ELF executable files package all debug and other symbolic information into
a single executable file by placing debugging information into its own section in the
executable. As with macOS, the only way to remove this information is with the Strip tool;
if the developer fails to do so before release, you might be in luck. (Of course, you’ll have
access to the source code for most programs running on Linux.)
Viewing Imported Libraries
On a general purpose operating system, calls to network APIs aren’t likely to be built
directly into the executable. Instead, functions will be dynamically linked at runtime. To
determine what an executable imports dynamically, view the Imports window in IDA Pro,
as shown in Figure 6-11.
In the figure, various network APIs are imported from the ws2_32.dll library, which is
Technet24
||||||||||||||||||||
||||||||||||||||||||
the BSD sockets implementation for Windows. When you double-click an entry, you
should see the import in a disassembly window. From there, you can find references to that
function by using IDA Pro to show the cross-references to that address.
Figure 6-11: The Imports window
In addition to network functions, you might also see that various cryptographic libraries
have been imported. Following these references can lead you to where encryption is used
in the executable. By using this imported information, you may be able to trace back to the
original callee to find out how it’s been used. Common encryption libraries include
OpenSSL and the Windows Crypt32.dll.
Analyzing Strings
Most applications contain strings with printable text information, such as text to display
during application execution, text for logging purposes, or text left over from the
debugging process that isn’t used. The text, especially internal debug information, might
hint at what a disassembled function is doing. Depending on how the developer added
debug information, you might find the function name, the original C source code file, or
even the line number in the source code where the debug string was printed. (Most C and
C++ compilers support a syntax to embed these values into a string during compilation.)
IDA Pro tries to find printable text strings as part of its analysis process. To display
these strings, open the Strings window. Click a string of interest, and you’ll see its
definition. Then you can attempt to find references to the string that should allow you to
||||||||||||||||||||
||||||||||||||||||||
trace back to the functionality associated with it.
String analysis is also useful for determining which libraries an executable was statically
linked with. For example, the ZLib compression library is commonly statically linked, and
the linked executable should always contain the following string (the version number
might differ):
inflate 1.2.8 Copyright 1995-2013 Mark Adler
By quickly discovering which libraries are included in an executable, you might be able
to successfully guess the structure of the protocol.
Identifying Automated Code
Certain types of functionality lend themselves to automated identification. For example,
encryption algorithms typically have several magic constants (numbers defined by the
algorithm that are chosen for particular mathematical properties) as part of the algorithm.
If you find these magic constants in the executable, you know a particular encryption
algorithm is at least compiled into the executable (though it isn’t necessarily used). For
example, Listing 6-3 shows the initialization of the MD5 hashing algorithm, which uses
magic constant values.
void md5_init( md5_context *ctx )
{
    ctx->state[0] = 0x67452301;
    ctx->state[1] = 0xEFCDAB89;
    ctx->state[2] = 0x98BADCFE;
    ctx->state[3] = 0x10325476;
}
Listing 6-3: MD5 initialization showing magic constants
Armed with knowledge of the MD5 algorithm, you can search for this initialization
code in IDA Pro by selecting a disassembly window and choosing Search ▸ Immediate
value. Complete the dialog as shown in Figure 6-12 and click OK.
Technet24
||||||||||||||||||||
||||||||||||||||||||
Figure 6-12: The IDA Pro search box for MD5 constant
If MD5 is present, your search should display a list of places where that unique value is
found. Then you can switch to the disassembly window to try to determine what code uses
that value. You can also use this technique with algorithms, such as the AES encryption
algorithm, which uses special s-box structures that contain similar magic constants.
However, locating algorithms using IDA Pro’s search box can be time consuming and
error prone. For example, the search in Figure 6-12 will pick up MD5 as well as SHA-1,
which uses the same four magic constants (and adds a fifth). Fortunately, there are tools
that can do these searches for you. One example, PEiD (available from
http://www.softpedia.com/get/Programming/Packers-Crypters-Protectors/PEiD-updated.shtml),
determines whether a Windows PE file is packed with a known packing tool, such as UPX.
It includes a few plug-ins, one of which will detect potential encryption algorithms and
indicate where in the executable they are referenced.
To use PEiD to detect cryptographic algorithms, start PEiD and click the top-right
button … to choose a PE executable to analyze. Then run the plug-in by clicking the
button on the bottom right and selecting Plugins ▸ Krypto Analyzer. If the executable
contains any cryptographic algorithms, the plug-in should identify them and display a
dialog like the one in Figure 6-13. You can then enter the referenced address value ➊ into
||||||||||||||||||||
||||||||||||||||||||
IDA Pro to analyze the results.
Figure 6-13: The result of PEiD cryptographic algorithm analysis
Dynamic Reverse Engineering
Dynamic reverse engineering is about inspecting the operation of a running executable. This
method of reversing is especially useful when analyzing complex functionality, such as
custom cryptography or compression routines. The reason is that instead of staring at the
disassembly of complex functionality, you can step through it one instruction at a time.
Dynamic reverse engineering also lets you test your understanding of the code by allowing
you to inject test inputs.
The most common way to perform dynamic reverse engineering is to use a debugger to
halt a running application at specific points and inspect data values. Although several
debugging programs are available to choose from, we’ll use IDA Pro, which contains a
basic debugger for Windows applications and synchronizes between the static and
debugger view. For example, if you rename a function in the debugger, that change will be
reflected in the static disassembly.
NOTE
Although I use IDA Pro on Windows in the following discussion, the basic techniques are
Technet24
||||||||||||||||||||
||||||||||||||||||||
applicable to other operating systems and debuggers.
To run the currently disassembled executable in IDA Pro’s debugger, press F9. If the
executable needs command line arguments, add them by selecting Debugger ▸ Process
Options and filling in the Parameters text box in the displayed dialog. To stop debugging a
running process, press CTRL-F2.
Setting Breakpoints
The simplest way to use a debugger’s features is to set breakpoints at places of interest in
the disassembly, and then inspect the state of the running program at these breakpoints.
To set a breakpoint, find an area of interest and press F2. The line of disassembly should
turn red, indicating that the breakpoint has been set correctly. Now, whenever the
program tries to execute the instruction at that breakpoint, the debugger should stop and
give you access to the current state of the program.
Debugger Windows
By default, the IDA Pro debugger shows three important windows when the debugger hits
a breakpoint.
The EIP Window
The first window displays a disassembly view based on the instruction in the EIP register
that shows the instruction currently being executed (see Figure 6-14). This window works
much like the disassembly window does while doing static reverse engineering. You can
quickly navigate from this window to other functions and rename references (which are
reflected in your static disassembly). When you hover the mouse over a register, you
should see a quick preview of the value, which is very useful if the register points to a
memory address.
||||||||||||||||||||
||||||||||||||||||||
Figure 6-14: The debugger EIP window
The ESP Window
The debugger also shows an ESP window that reflects the current location of the ESP
register, which points to the base of the current thread’s stack. Here is where you can
identify the parameters being passed to function calls or the value of local variables. For
example, Figure 6-15 shows the stack values just before calling the send function. I’ve
highlighted the four parameters. As with the EIP window, you can double-click references
to navigate to that location.
Technet24
||||||||||||||||||||
||||||||||||||||||||
Figure 6-15: The debugger ESP window
The State of the General Purpose Registers
The General registers default window shows the current state of the general purpose
registers. Recall that registers are used to store the current values of various program
states, such as loop counters and memory addresses. For memory addresses, this window
provides a convenient way to navigate to a memory view window: click the arrow next to
each address to navigate from the last active memory window to the memory address
corresponding to that register value.
To create a new memory window, right-click the array and select Jump in new
window. You’ll see the condition flags from the EFLAGS register on the right side of the
window, as shown in Figure 6-16.
||||||||||||||||||||
||||||||||||||||||||
Figure 6-16: The General registers window
Where to Set Breakpoints?
Where are the best places to set breakpoints when you’re investigating a network
protocol? A good first step is to set breakpoints on calls to the send and recv functions,
which send and receive data from the network stack. Cryptographic functions are also a
good target: you can set breakpoints on functions that set the encryption key or the
encryption and decryption functions. Because the debugger synchronizes with the static
disassembler in IDA Pro, you can also set breakpoints on code areas that appear to be
building network protocol data. By stepping through instructions with breakpoints, you
can better understand how the underlying algorithms work.
Reverse Engineering Managed Languages
Not all applications are distributed as native executables. For example, applications written
in managed languages like .NET and Java compile to an intermediate machine language,
which is commonly designed to be CPU and operating system agnostic. When the
application is executed, a virtual machine or runtime executes the code. In .NET this
intermediate machine language is called common intermediate language (CIL); in Java it’s
called Java byte code.
These intermediate languages contain substantial amounts of metadata, such as the
names of classes and all internal- and external-facing method names. Also, unlike for
native-compiled code, the output of managed languages is fairly predictable, which makes
them ideal for decompiling.
Technet24
||||||||||||||||||||
||||||||||||||||||||