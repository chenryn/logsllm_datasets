为了进行调试，需要对应的APK设置debuggable=true
这里可以使用mprop工具，如果手机上安装Xposed框架，那么可以直接使用BDOpener.apk模块
具体怎么使用找教程。
#### 2\. 动态调试android原生程序
手机ROOT，处于开发者模式，打开USB调试  
上传android_server 并运行  
同时进行端口转发
    adb push android_server /data/local/tmp
    chmod 775 /data/local/tmp/android_server
    adb shell
    su
    ./data/local/tmp/android_server
    adb forward tcp:23946 tcp:23946
这是为了将手机的23946端口转发到本地的23946端口上，以便IDA进行通信。  
将需要调试的原生程序上传至手机，并赋予可执行权限
    adb push debugnativeapp /data/local/tmp/
    adb shell chmod 755 /data/local/tmp/debugnativeapp
IDA选择Debugger-Run-RemoteArmLinux/Android debugger  
然后在IDA中设置程序，路径，配置HostName以及Port  
同时设置Deubg Option，使IDA能在 entry ，load， start 处断下。
容易遇到的问题。
    如果遇到 error: only position independent executables (PIE) are supported. 一般是因为 android 手机的版本大于 5，可以尝试
    使用 android_server 的 PIE 版本
    利用 010Editor 将可执行 ELF 文件的 header 中的 elf header 字段中的 e_type 改为 ET_DYN(3)。
#### 3.原生SO动态调试（直接在so处下断）
这是比较简单的方式，这其实和SO运行和加载的时机有关，如果需要在加载SO之前也就是`.init`
因为so是依附于apk运行的，所以相对来说会比较复杂。
运行android_server 并且进行端口转发  
在手机上运行apk，然后在IDA中attach程序，此时IDA便会在libc中断下。这时便可以调试native层的函数。
由于此方法需要apk在运行的时候附加调试，因此如果程序有加固或者在.init_array有解密，则无法进行调试。
使用这种方法时同样也能在libc和linker处断下，但是这个断点没有什么意义，因为程序本身已经加载完毕了。
#### 4.原生SO动态调试（.init_array 以及 JNI_OnLoad)
为了理解，我们需要对`so`文件的加载过程有比较清晰的了解。
[参考文章](http://www.blogfshare.com/linker-load-so.html)
能自己阅读下`linker`的源码那是最好的了。
`android`最基本的`so`是`libc.so`，通过`libc`加载`linker`，然后通过`linker`的`call_function`加载`lib`库。
就像文中总结的一样，当Java层调用static。。。时，系统加载so，首先执行.init和.init_array段的代码，之后如果存在JNI_OnLoad就调用该函数。后面就需要具体问题具体分析了。
同三类似，运行android_server,进行端口转发。
    su
    ./data/local/tmp/android_server
    adb forward tcp:23946 tcp:23946
不同的是需要以调试模式启动程序。我通过aapt可以快速的获取目标apk的一些信息。(习惯命令行)
    /Users/jeb/Library/Android/sdk/build-tools/27.0.3/aapt dump badging Transformers.apk
    adb shell am start -D -n com.zhuotong.crackme/.MainActivity
此时可以打开IDA进行附加了。
此时会断在libc，然后根据需要设置`Debugger Option`
我是辣么设置的。
此时在IDA中F9运行，是不会有反应的。因为此时还需要恢复app的运行。
Wiki上说打开`ddms`，估计那个SDK的版本比较老，我是`SDK-27`，`ddms`改为`monitor`
在如下路径：`/Users/jeb/Library/Android/sdk/tools/monitor`
此时我们需要选中目标进程，这样就相当于是将app转发到电脑的jdb的调试端口默认是`8700`，而后使用jdb附加。
    jdb -connect com.sun.jdi.SocketAttach:hostname=localhost,port=8700
此时在输出窗口可以看到加载了`liboo000oo.so`,然后他会在`Jni_OnLoad`处的断点停下。
这里需要注意一个顺序，先IDA附加，然后jdb附加使app恢复运行。
此时可以看到`RegisterNatives`函数的四个参数，其实是三个参数，第一个代表`this`,其中第三个参数可以很清楚的看到函数名，函数类型，以及地址。
我们找到`eq`函数，然后下断。根据前面的静态分析，我们在`sub_CC0D6784`函数下断，然后随便输入24个字符，最后将子密钥序列`dump`下来即可。
最后整理一下即可写出解密脚本。
这里其实还有一个点不知道各位有木有发现。
在静态分析时`RegisterNatives`函数的第二个参数。
其中`byte_CC0DA0CA`和`byte_CC0DA0D0`指向的都是乱码数据，只有最后一个地址是正确的，但当我们动态调试的时候，这两个指针却指向了`eq`和`(Ljava/lang/String;)Z`这是为什么呢？
还记得so的加载流程吗？
如果不记得请在此阅读一遍这篇[参考文章](http://www.blogfshare.com/linker-load-so.html)
那就是`.init_array`段。
此处对应的就是`datadiv_decode5009363700628197108`函数
大概功能就是对so的部分数据进行解密。
我们可以直接在此函数下断，对解密部分代码进行调试，有时候反调试就会在这里设置。
如果有必要其实也可以在`linker`的`call_function`处下断，我们可以将`/system/bin/linker` pull 到本地进行分析。
有兴趣的可以试试。总之在何处下断，需要对so的加载流程非常的熟悉，以及合适需要IDA附加，程序运行到哪一步都需要自己把握清楚。
## 写出解密脚本
有了前面的分析，解密脚本也就非常的好写。  
贴一下我的代码：
    table="!:#$%&()+-*/`~_[]{}?<>,.@^abcdefghijklmnopqrstuvwxyz0123456789\\'"
    r="\x20{9*8ga*l!Tn?@#fj'j$\\g;;"
    s = ""
    for i in range(6):
        s += chr(ord(r[i*4])^7)
        s += chr(ord(r[i*4+1]))
        s += chr(ord(r[i*4+2])^0xf)
        s += chr(ord(r[i*4+3]))
    def mydecodeb64(enc,padding):
        enc=enc.replace(padding,"")
        x="".join(map(lambda x:bin(table.index(x))[2:].zfill(6),enc))
        for ap in range(8-(len(x)%8)):
            x+='0'
        plain=[]
        for i in range((len(x))/8):
            plain.append(chr(eval('0b'+x[i*8:(i+1)*8])))
        return "".join(plain).replace("\x00","")
    s_box = [0xF0,0x37,0xE1,0x9B,0x2A,0x15,0x17,0x9F,0xD7,0x58,0x4D,0x6E,0x33,0xA0,0x39,0xAE,0x04,0xD0,0xBE,0xED,0xF8,0x66,0x5E,0x00,0xD6,0x91,0x2F,0xC3,0x10,0x4C,0xF7,0xA6,0xC1,0xEC,0x6D,0x0B,0x50,0x65,0xBB,0x34,0xFA,0xA4,0x2D,0x3B,0x23,0xA1,0x96,0xD5,0x1D,0x38,0x56,0x0A,0x5D,0x4F,0xE4,0xCC,0x24,0x0D,0x12,0x87,0x35,0x85,0x8E,0x6F,0xC6,0x13,0x9A,0xD3,0xFC,0xE7,0x08,0xAC,0xB7,0xE9,0xB0,0xE8,0x41,0xAA,0x55,0x53,0xC2,0x42,0xBC,0xE6,0x0F,0x8A,0x86,0xA8,0xCF,0x84,0xC5,0x48,0x74,0x36,0x07,0xEB,0x88,0x51,0xF6,0x7F,0x57,0x05,0x63,0x3E,0xFE,0xB8,0xC9,0xF5,0xAF,0xDF,0xEA,0x82,0x44,0xF9,0xCD,0x06,0xBA,0x30,0x47,0x40,0xDE,0xFD,0x1C,0x7C,0x11,0x5C,0x02,0x31,0x2C,0x9C,0x5F,0x46,0x27,0xC4,0x83,0x73,0x16,0x90,0x20,0x76,0x7B,0xF2,0xE3,0xF3,0x77,0x52,0x80,0x25,0x09,0x26,0x3F,0xC7,0x18,0x1B,0xA3,0xFF,0xFB,0xCB,0xA9,0x8C,0x54,0x7A,0x68,0xB4,0x70,0x4B,0xE2,0x49,0x22,0x7E,0xA5,0xB6,0x81,0x9D,0x4E,0x67,0xF1,0xA7,0x3C,0xD9,0x94,0xEF,0x32,0x6B,0x1F,0xB1,0x60,0xB9,0x64,0x59,0x01,0xB3,0x7D,0xE0,0x6C,0xAD,0x97,0x19,0xB5,0x3A,0xF4,0xD8,0x8D,0x98,0x03,0x93,0x1A,0xDC,0x1E,0x4A,0xC0,0x5A,0xE5,0xD1,0x3D,0x14,0xC8,0x79,0xBD,0x43,0xDB,0x69,0xD2,0x61,0x95,0x9E,0x21,0x45,0x89,0x2B,0xAB,0x29,0xA2,0x8B,0x2E,0xD4,0x0E,0x62,0xCA,0x28,218, 91, 114, 143, 153, 117, 238, 120, 12, 113, 191, 221, 206, 146, 106, 178]
    dec_one =  mydecodeb64(s,padding = ";")
    print len(s_box)
    v30 = 0
    v28 = 0
    flag = ""
    for i in range(16):
        v28 = (v28+1)%256
        v35 = s_box[v28]
        v30 = (v30+v35)%256
        s_box[v28] = s_box[v30]
        s_box[v30] = v35
        v17 = s_box[v28]
        index = (v35+v17)%256
        flag+=chr(s_box[index]^ord(dec_one[i]))
    print flag
# 总结
抽空做了几题，自己也回顾一下。不过还是太菜了。
> pizza tql