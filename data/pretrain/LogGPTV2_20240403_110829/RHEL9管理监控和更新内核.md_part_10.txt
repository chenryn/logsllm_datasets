时正常工作。默认情况下，`kexec-tools`{.literal} 在 AMD64 和 Intel 64
位构架中配置以下内存保留：
`crashkernel=1G-4G:192M,4G-64G:256M,64G-:512M`{.literal}
您还可以运行 `kdumpctl 估算`{.literal}
在不触发崩溃的情况下查询一个粗略估算值。预计 `crashkernel`{.literal}
值可能无法准确，并可作为设置适当的 `crashkernel`{.literal} 值的引用。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
RHEL 9 及更新的版本不再支持引导命令行中的 `crashkernel=auto`{.literal}
选项。
:::
::: itemizedlist
**先决条件**
-   root 权限
-   实现了配置和目标的 `kdump`{.literal} 要求。
:::
::: orderedlist
**步骤**
1.  为 `crashkernel`{.literal} 配置默认值：
    ``` literallayout
    # kdumpctl reset-crashkernel –kernel=ALL
    ```
2.  使用自定义 crashkernel 值：
    ::: itemizedlist
    -   配置所需的内存保留。
        ``` literallayout
        # crashkernel=192M
        ```
        如果系统内存总量为 1 GB 或大于 4GB，则示例保留 192 MB
        内存。如果内存量超过 4GB，则针对 `kdump`{.literal} 保留 256MB。
        ::: itemizedlist
        -   （可选） Offset 保留内存：
            有些系统需要保留内存并带有特定的固定偏移，因为崩溃内核保留非常早，并且希望保留一些区域供特殊使用。如果设置了偏移，则保留内存从此偏移开始。要偏移保留的内存，请使用以下语法：
            ``` literallayout
            # crashkernel=192M@16M
            ```
            上面的示例保留以 16 MB 开始的 192 MB 内存（物理地址
            0x01000000）。如果偏移参数设为 0
            或完全省略，`kdump`{.literal}
            会自动偏移保留内存。您还可以在设置变量内存保留时偏移内存，方法是将偏移指定为最后一个值。例如：
            `crashkernel=1G-4G:192M,2G-64G:256M@16M`{.literal}。
        :::
    -   更新引导装载程序配置：
        ``` literallayout
        # grubby --update-kernel ALL --args "crashkernel=”
        ```
    :::
3.  重启以使更改生效：
    ``` literallayout
    # reboot
    ```
:::
::: orderedlist
**验证**
1.  激活 `sysrq`{.literal} 键以引导到 `kdump`{.literal} 内核：
    ``` literallayout
    # echo 1 > /proc/sys/kernel/sysrq
    # echo c > /proc/sysrq-trigger
    ```
    这会强制 Linux 内核崩溃，并将
    `address-YYYY-MM-DD-HH:MM:SS/vmcore`{.literal}
    文件复制到配置文件中指定的目标位置。
2.  根据 `/etc/kdump.conf`{.literal} 文件中指定，验证 `vmcore`{.literal}
    文件是否在目标中转储。
    ``` screen
    $ *ls /var/crash/127.0.0.1-2022-01-18-0*
    /var/crash/127.0.0.1-2022-01-18-05:23:10':
    kexec-dmesg.log  vmcore  vmcore-dmesg.txt
    ```
    在本例中，内核将 `vmcore`{.literal}
    保存在默认目标目录中，`/var/crash/`{.literal}。
:::
:::
::: section
::: titlepage
# []{#configuring-kdump-on-the-command-line_managing-monitoring-and-updating-the-kernel.html#configuring-the-kdump-target_configuring-kdump-on-the-command-line}配置 kdump 目标 {.title}
:::
当捕获内核崩溃时，核心转储可以作为文件存储在本地文件系统中，直接写入设备，或使用
`NFS`{.literal} （网络文件系统）或 `SSH`{.literal} (Secure Shell)
协议通过网络发送。一次只能设置其中一个选项，默认的行为是将 vmcore
文件存储在本地文件系统的 `/var/crash/`{.literal} 目录中。
::: itemizedlist
**先决条件**
-   实现了配置和目标的 `kdump`{.literal} 要求。
:::
::: itemizedlist
**步骤**
-   要将 `vmcore`{.literal} 文件存储在本地文件系统的
    `/var/crash/`{.literal} 目录中，编辑 `/etc/kdump.conf`{.literal}
    文件并指定路径：
    ``` screen
    path /var/crash
    ```
    选项 `path /var/crash`{.literal} 代表 `kdump`{.literal} 保存
    `vmcore`{.literal} 文件的文件系统的路径。当您在
    `/etc/kdump.conf`{.literal}
    文件中指定转储目标时，`路径`{.literal}相对于指定的转储目标。
    如果您没有在 `/etc/kdump.conf`{.literal}
    文件中指定转储目标，则该`路径`{.literal}代表根目录的绝对路径。根据当前系统中挂载的内容，会自动执行转储目标和调整的转储路径。
:::
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
当转储目标挂载在 `/var/crash`{.literal}，参数 `path`{.literal} 已在
`/etc/kdump.conf`{.literal} 文件的 `/var/crash`{.literal}
部分设置时，`kdump`{.literal} 会在 `/var/crash/var/crash`{.literal}
目录中保存 `vmcore`{.literal} 文件。例如，在以下实例中，`ext4`{.literal}
文件系统已挂载到 `/var/crash`{.literal}，其 `path`{.literal} 被设置为
`/var/crash`{.literal}:
``` screen
grep -v ^# etc/kdump.conf | grep -v ^$
ext4 /dev/mapper/vg00-varcrashvol
path /var/crash
core_collector makedumpfile -c --message-level 1 -d 31
```
这会导致 `/var/crash/var/crash`{.literal}
路径。要解决这个问题，请使用选项 `path /`{.literal} 而不是
`path /var/crash`{.literal}
:::
::: itemizedlist
-   要更改保存核心转储的本地目录，以 `root`{.literal} 用户身份编辑
    `/etc/kdump.conf`{.literal} 配置文件，如下所述。
    ::: orderedlist
    1.  从 `#path /var/crash`{.literal} 行的开头删除 hash 符号(\"#\")。
    2.  使用预期的目录路径替换该值。例如：
        ``` screen
        path /usr/local/cores
        ```
        ::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
        ### 重要 {.title}
        在 RHEL 9 中，当 `kdump`{.literal} systemd
        服务启动时，必须存在使用 `path`{.literal} 指令定义的作为 kdump
        目标的目录，否则服务会失败。这个行为与早期版本的 RHEL
        不同，如果启动该服务时不存在该目录，则会自动创建该目录。
        :::
    :::
-   要将文件写入不同的分区，以 `root`{.literal} 用户身份编辑
    `/etc/kdump.conf`{.literal} 配置文件，如下所述。
    ::: orderedlist
    1.  根据您的选择，从 `#ext4`{.literal} 行的开头删除 hash
        符号(\"#\")。
        ::: itemizedlist
        -   设备名称（ `#ext4 /dev/vg/lv_kdump`{.literal} 行）
        -   文件系统标签（ `#ext4 LABEL=/boot`{.literal} 行）
        -   UUID（
            `#ext4 UUID=03138356-5e61-4ab3-b58e-27507ac41937`{.literal}
            行）
        :::
    2.  将文件系统类型以及设备名称、标签或者 UUID 更改为所需值。例如：
        ``` screen
        ext4 UUID=03138356-5e61-4ab3-b58e-27507ac41937
        ```
        ::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
        ### 重要 {.title}
        建议您使用 `LABEL=`{.literal} 或 `UUID=`{.literal}
        指定存储设备。无法保证 `/dev/sda3`{.literal}
        等磁盘设备名称在重启后保持一致。
        :::
        ::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
        ### 重要 {.title}
        当转储到 IBM Z 硬件上的直接访问存储设备 (DASD) 时，在继续前已在
        `/etc/dasd.conf`{.literal} 中正确指定转储设备非常重要。
        :::
    :::
-   将转储直接写入设备：
    ::: orderedlist
    1.  删除 `#raw /dev/vg/lv_kdump`{.literal} 行开头的哈希符号
        (\"#\")。
    2.  使用预期的设备名称替换该值。例如：
        ``` screen
        raw /dev/sdb1
        ```
    :::
-   使用 `NFS`{.literal} 协议将转储保存到远程机器中：
    ::: orderedlist
    1.  删除 `#nfs my.server.com:/export/tmp`{.literal} 行开头的哈希符号
        (\"#\")。
    2.  使用有效的主机名和目录路径替换该值。例如：
        ``` screen
        nfs penguin.example.com:/export/cores
        ```
    :::
-   使用 `SSH`{.literal} 协议将转储保存到远程机器中：
    ::: orderedlist
    1.  从 `#ssh PI:EMAIL`{.literal} 行的开头删除 hash
        符号(\"#\")。
    2.  使用有效的用户名和密码替换该值。
    3.  在配置中包含 `SSH`{.literal} 密钥。
        ::: itemizedlist
        -   从 `#sshkey /root/.ssh/kdump_id_rsa`{.literal}
            行的开头删除哈希符号。
        -   将该值改为您要转储的服务器中有效密钥的位置。例如：
            ``` screen
            ssh PI:EMAIL
            sshkey /root/.ssh/mykey
            ```
        :::
    :::
:::
:::
::: section
::: titlepage
# []{#configuring-kdump-on-the-command-line_managing-monitoring-and-updating-the-kernel.html#configuring-the-core-collector_configuring-kdump-on-the-command-line}配置内核收集器 {.title}
:::
`kdump`{.literal} 服务使用 `core_collector`{.literal} 程序捕获
`vmcore`{.literal} 镜像。在 RHEL 中，`makedumpfile`{.literal}
实用程序是默认的核心收集器。
`makedumpfile`{.literal}
是一个转储程序，它有助于只使用各种转储级别复制所需的页面并压缩转储文件的大小。
makedumpfile
是一个转储程序，它有助于只使用各种转储级别复制所需的页面并压缩转储文件的大小。
使用
`makedumpfile`{.literal}，您可以通过压缩转储数据或排除页面或两者来创建小大小转储文件。它需要第一个内核调试信息来通过分析第一个内核如何使用内存来区分不需要的页面。
::: title
**语法**
:::
``` screen
core_collector makedumpfile -z -d 31 --message-level 1
```
::: itemizedlist
**选项**
-   `-c`{.literal}、`-l`{.literal} ``{=html}、`-z`{.literal}
    ``{=html}、或 `-p`{.literal}:
    指定每个页面的压缩转储文件格式： `-c`{.literal} 代表
    `zlib`{.literal}、-l 表示 `lzo`{.literal}、-z 表示 `zstd`{.literal}
    或 -p 表示 snappy，或 `-p`{.literal} 表示 `snappy`{.literal}。
-   `-d`{.literal} `(dump_level)`{.literal}
    ：排除页面，使其不会复制到转储文件中。
-   `--message-level`{.literal} ：指定消息类型。
    使用 `--message-level`{.literal}，您可以将输出限制为打印。例如，将 7
    指定为消息级别会打印常见消息和错误消息。`--message_level`{.literal}
    的最大值为 31。
:::
::: itemizedlist
**先决条件**
-   实现了配置和目标的 `kdump`{.literal} 要求。
:::
::: orderedlist
**步骤**
1.  以 `root`{.literal} 用户身份，编辑 `/etc/kdump.conf`{.literal}
    配置文件，从以下命令开始删除 hash 符号(#\")：
    ``` literallayout
    #core_collector makedumpfile -z -d 31 --message-level 1
    ```
2.  要启用转储文件压缩，请指定 `makedumpfile`{.literal} 选项之一：
    ``` literallayout
    core_collector makedumpfile -z -d 31 --message-level 1
    ```