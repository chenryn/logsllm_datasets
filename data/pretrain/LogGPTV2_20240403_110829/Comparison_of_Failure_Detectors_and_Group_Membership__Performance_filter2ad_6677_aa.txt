# Comparison of Failure Detectors and Group Membership: Performance Study of Two Atomic Broadcast Algorithms

## Authors
- Péter Urbán
- Ilya Shnayderman
- André Schiper

### Contact Information
- **Péter Urbán**  
  École Polytechnique Fédérale de Lausanne (EPFL), CH-1015 Lausanne, Switzerland  
  Email: peter.urban@epfl.ch
- **Ilya Shnayderman**  
  School of Engineering and Computer Science, The Hebrew University of Jerusalem, Israel  
  Email: [PI:EMAIL]
- **André Schiper**  
  École Polytechnique Fédérale de Lausanne (EPFL), CH-1015 Lausanne, Switzerland  
  Email: andre.schiper@epfl.ch

---

## Abstract
Agreement protocols are fundamental for fault-tolerant distributed systems. Despite the abundance of published protocols, there is a lack of performance analysis, particularly concerning their fault tolerance mechanisms. This paper introduces a performance evaluation methodology that can be generalized to analyze various fault-tolerant algorithms. We apply this methodology to compare two atomic broadcast algorithms with different fault tolerance mechanisms: unreliable failure detectors and group membership. Our evaluation covers steady-state latency in scenarios with no crashes or suspicions, crashes, and incorrect suspicions, as well as transient latency after a crash. The results show that both algorithms perform similarly in the absence of failures, but the group membership-based algorithm offers better performance and resiliency in the presence of crashes, while the failure detector-based algorithm performs better in other scenarios. We discuss the implications of these findings for the design of fault-tolerant distributed systems.

---

## 1. Introduction
Agreement problems, such as consensus, atomic broadcast, and atomic commitment, are essential for building fault-tolerant distributed applications, including transactional and time-critical systems. These problems have been extensively studied in various system models, and numerous protocols have been developed to solve them. However, most analyses focus on safety and liveness properties, with little attention given to performance, especially in failure handling. This limited understanding of performance aspects hinders the practical adoption of these protocols.

### Unreliable Failure Detectors vs. Group Membership
In this paper, we compare two uniform atomic broadcast algorithms: one based on unreliable failure detectors and the other on group membership. Both services provide estimates of the set of crashed processes in the system, but failure detectors provide inconsistent information, while group membership provides consistent information. While several atomic broadcast algorithms use unreliable failure detectors, all existing group communication systems use group membership for atomic broadcast. Thus, our study indirectly compares two classes of techniques: one widely used in practice (group membership) and the other (failure detectors) not yet adopted.

### The Two Algorithms
The first algorithm, the Chandra-Toueg atomic broadcast algorithm, tolerates \( f < n/2 \) crash failures and requires the failure detector ♦S. The second algorithm, based on group membership, uses a fixed sequencer and also tolerates \( f < n/2 \) crash failures. Both algorithms were optimized for failure-free runs, low-latency under low load, and high load tolerance.

We chose these algorithms because they are well-known and easily comparable, offering the same guarantees in the same model. They generate the same message exchanges in the absence of failures and suspicions, allowing us to focus on differences in handling failures and suspicions.

### Methodology for Performance Studies
We evaluate the two algorithms using simulation, modeling message exchange, network contention, and host behavior. We use the quality of service (QoS) metrics proposed by Chen et al. [6] to model failure detectors. Our performance metric is latency, defined as the time between sending a message and its earliest delivery. We study the algorithms in several benchmark scenarios, including those with failures and suspicions.

Our methodology can be generalized to analyze other fault-tolerant algorithms. In addition to the comparison results, this paper contributes a new performance evaluation methodology.

### Results
Our results show that both algorithms perform similarly in the absence of failures and suspicions. The group membership-based algorithm has an advantage in terms of performance and resiliency after crashes, while the failure detector-based algorithm performs better in scenarios involving incorrect suspicions and transient behavior after crashes. We discuss the implications of these results for the design of fault-tolerant distributed systems.

### Structure of the Paper
- **Section 2**: Related Work
- **Section 3**: Definitions
- **Section 4**: Algorithms
- **Section 5**: Context of the Performance Study
- **Section 6**: Simulation Model
- **Section 7**: Results
- **Section 8**: Discussion

---

## 2. Related Work
Most studies of atomic broadcast algorithms use simple metrics like time and message complexity, providing limited insight into real performance. A few papers offer more detailed performance analyses using discrete event simulation, contention-aware metrics, and performance-related metrics for wireless networks. However, these analyses typically focus on failure-free runs, giving only a partial understanding of the algorithms' behavior.

Other papers analyze agreement protocols in various failure scenarios, including probabilistic verification, Byzantine atomic broadcast, and the impact of different failure detector implementations. Notably, [15] analyzes the latency of the Chandra-Toueg consensus algorithm using the QoS metrics of Chen et al. [6].

---

## 3. Definitions

### 3.1 System Model
We consider a widely accepted asynchronous system model where processes communicate via message exchange. The network is quasi-reliable, meaning it does not lose, alter, or duplicate messages. Processes fail by crashing, and process recovery is slow. Both the time between crashes and the repair time are much greater than the latency of atomic broadcast.

Atomic broadcast algorithms use some form of crash detection, implemented as failure detectors. A failure detector maintains a list of suspected processes, which may include correct processes or miss crashed ones. To ensure termination, we need weak assumptions on the behavior of failure detectors, which can be met by tuning implementation parameters.

### 3.2 Atomic Broadcast
Atomic Broadcast is defined by two primitives: `A-broadcast(m)` and `A-deliver(m)`. It guarantees that if a correct process broadcasts a message, all correct processes will eventually deliver it, and all correct processes will deliver messages in the same order. Uniform atomic broadcast ensures these guarantees even for faulty processes.

---

## 4. Algorithms

### 4.1 Chandra-Toueg Uniform Atomic Broadcast Algorithm
The Chandra-Toueg uniform atomic broadcast algorithm uses failure detectors directly. A process broadcasts a message to all processes, which buffer it until the delivery order is decided. The delivery order is determined by a sequence of consensus rounds, each deciding on a set of message identifiers. Messages are delivered in the order of their IDs.

#### Chandra-Toueg ♦S Consensus Algorithm
For consensus, we use the Chandra-Toueg ♦S algorithm, which can tolerate \( f < n/2 \) crash failures. It uses a rotating coordinator paradigm, where each process executes asynchronous rounds. The coordinator proposes a value, and if a majority of processes acknowledge it, the proposal is decided. If the coordinator is suspected, a new round starts.

### 4.2 Fixed Sequencer Uniform Atomic Broadcast Algorithm
The second uniform atomic broadcast algorithm uses a fixed sequencer and a group membership service for reconfiguration. When a process broadcasts a message, the sequencer assigns a sequence number and broadcasts it. Non-sequencer processes send acknowledgments, and the sequencer delivers the message upon receiving a majority of acknowledgments.

When the sequencer crashes, processes agree on a new sequencer using the group membership service, which provides a consistent view of the group. The group membership algorithm can tolerate \( f < n/2 \) crash failures and requires the failure detector ♦S.

### 4.3 Group Membership Algorithm
A group membership service maintains the view of a group, ensuring that processes see the same sequence of views. Our group membership algorithm uses failure detectors to initiate view changes and consensus to agree on the next view. A process that suspects another process initiates a view change, and processes send their unstable messages. Once a process receives all unstable messages, it computes the union and starts a consensus with the pair (P, U) as the initial value. Upon deciding, the process delivers all messages from U.

---

## 5. Context of the Performance Study
We evaluate the two algorithms using simulation, focusing on steady-state latency in scenarios with no crashes or suspicions, crashes, and incorrect suspicions, as well as transient latency after a crash. Our methodology can be generalized to analyze other fault-tolerant algorithms.

---

## 6. Simulation Model
We model message exchange, network contention, and host behavior. We use the QoS metrics of Chen et al. [6] to model failure detectors. Our performance metric is latency, defined as the time between sending a message and its earliest delivery.

---

## 7. Results
Our results show that both algorithms perform similarly in the absence of failures and suspicions. The group membership-based algorithm has an advantage in terms of performance and resiliency after crashes, while the failure detector-based algorithm performs better in scenarios involving incorrect suspicions and transient behavior after crashes.

---

## 8. Discussion
We discuss the implications of our results for the design of fault-tolerant distributed systems, emphasizing the importance of considering both performance and fault tolerance mechanisms in the design and evaluation of such systems.

---

**Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03)**  
**0-7695-1959-8/03 $17.00 (c) 2003 IEEE**  
**Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:12:39 UTC from IEEE Xplore. Restrictions apply.**