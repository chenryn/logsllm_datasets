### 5.1 Redundant Tracking and Anomaly Detection

DELF employs redundant tracking of all deletions using Facebook's analytics infrastructure. This tracking is independent of the state maintained by the underlying batch processing system and data stores, which are responsible for scheduling and executing deletion jobs. DELF logs all relevant events in the deletion lifecycle, including scheduled start times, initiation, subsequent reruns, exceptions, and eventual completion, along with timestamps. Event logging is performed via Scribe [59], and a Hive [39] pipeline analyzes these logs to identify anomalous deletions. The pipeline checks for issues such as timely initiation, idleness, continuous progress, and completion. Any deletions that do not make progress are reported to engineers for investigation and are automatically resumed once fixes are deployed.

### 5.2 Throughput Optimization

DELF aims to minimize the end-to-end execution time for each deletion, which is a key performance consideration (§2.4). To achieve this, DELF executes deletions for different top-level objects in parallel and batches point deletes within each deletion. The system maximizes throughput, defined as the rate of point deletes against data store APIs.

The upper bound for aggregate throughput is determined by shard utilization. Since the same shards that DELF uses for deletions also serve production traffic, their performance must not degrade due to asynchronous deletion execution. DELF monitors replication lag and CPU utilization to detect highly utilized shards and applies exponential backoff during spikes. Another limiting factor is the number of available machines to execute deletion jobs; DELF shifts deletion execution to off-peak hours when necessary.

Deletions triggered by users are executed immediately and in parallel with other existing deletions in the system. The average deletion at Facebook involves a few objects, such as deleting a rejected friend request. DELF prioritizes such deletions because they can be executed without significant coordination with existing deletions, beyond an initial check to ensure no two deletions operate on the same top-level object simultaneously. The resulting point deletes are spread across shards.

DELF batches writes within each deletion, including point deletes and writes to restoration logs. Batching reduces write latency and increases throughput. Writes involve cross-regional latency due to either a round trip to the master region or to achieve consistency across replicas. To mitigate this, each deletion reads items to delete from local replicas, collects them in memory, and flushes all deletes concurrently once the batch reaches a pre-configured size. Each batch of point deletes includes a single write for a batch of restoration log entries. DELF also batches reads to further increase throughput.

### 5.3 Restoration Logs Retention

Long-running deletions that remain in asynchronous execution for more than 90 days must make continuous progress (§2.4). To meet this requirement, DELF's deployment at Facebook does not apply a single retention period for the entire restoration log of each deletion. Instead, each log entry is retained for 90 days after its creation. Deletions running for more than 90 days may not be fully restorable if log entries older than 90 days have been deleted. Data store backup retention matches the retention of restoration log entries, with each snapshot being retained for 90 days. This setup ensures that data stored in restoration logs and backups is deleted 90 days after each point delete.

Restoration logs should not be retained beyond 90 days. Persisting log entries in a data store that maintains backups must be avoided to prevent extended retention. DELF uses Everstore and ZippyDB to handle the desired throughput. However, both data stores mandate backups for all use cases to safeguard against bugs. DELF instead relies on encryption to enforce exactly 90 days of log entry retention. Restoration log entries are encrypted using AES-256-CBC with HMAC-SHA-256 for authentication. The encryption key is stored in memory for 90 days, protected from inadvertent logging, and rotated daily.

### 5.4 Deployment Sequencing

DELF was developed iteratively at Facebook over several years, progressively gaining key design properties and coverage across data stores. We discuss the major phases of its deployment and the improvements delivered in each phase.

**Phase 1:** DELF replaced product code performing direct deletes to data store APIs, mandating the use of a DELF-provided procedural API that performed the same deletes while transparently maintaining restoration logs. This phase mitigated developer mistakes leading to inadvertent deletions.

**Phase 2:** DELF introduced dynamic validation techniques (§4.3), enabling the detection of developer omissions and mistakes leading to inadvertent data retention. DELF heuristics enabled remediation by pinpointing mishandled edge types to developers.

**Phase 3:** DELF introduced a declarative API based on object and edge annotations (§4.1). Applications hosted in Facebook's infrastructure rely on two proprietary data definition languages to create data types across TAO, Everstore, MySQL, and ZippyDB, in line with DELF’s requirements. Both languages were extended to support DELF annotations. Developers could optionally use the declarative API instead of the procedural API introduced in Phase 1. This phase accelerated the development of new products by eliminating the need for writing procedural deletion code.

**Phase 4:** DELF introduced static and data type validation techniques (§4.3), making the use of the declarative API mandatory. This phase helped developers catch mistakes early in the product development process and improved correctness validation capabilities. It also reduced the operational overhead of DELF by making stuck deletions less likely (§6.4).

### 6. Evaluation

Our goal in this section is to quantify DELF’s ability to mitigate privacy and security concerns raised in our threat model. For each concern, we discuss identified issues flagged by DELF during its deployment and quantify the system’s ongoing prevention capabilities. All identified issues have been fixed, and any retained data has been deleted.

Experiments in this section involve instrumenting the deletion process at Facebook to assess the effectiveness of DELF under real system operation. We designed all experiments to avoid any adverse effects on Facebook’s ability to enforce its deletion policy across its products.

#### 6.1 Developer Omissions

We start by assessing DELF’s impact in helping developers remember their obligation to delete user data. This assessment draws upon data collected between May 2018 and April 2019.

**Identified Issues:**
During the assessment, DELF detected 3,266 instances where developers omitted handling the deletion of an edge type. These omissions resulted in inadvertent data retention, regardless of the eventual edge type annotation. We routed all identified omissions to developers for retroactive annotation.

DELF identified one broad category of developer omissions responsible for the majority of issues. The prevailing scenario involved deletions driven by procedural code in custom sections, which developers failed to update when applications or data models changed, resulting in dangling data. At the time of this assessment, the transition to DELF was ongoing (§5.4), and procedural code in custom sections handling deletion was common. To better understand identified omissions, we discuss two examples:

- **Example 1 (June 2018):** DELF flagged that an edge type indicating the existence of a mailbox was left dangling when a Dating user was deleted. The edge type was created in April 2015 and initially used only for Facebook users. In November 2017, developers introduced a new user object type for the upcoming Dating product and reused the same mailbox edge type. DELF detected the reuse and highlighted the missing edge type annotation for the new user object type. The investigation revealed that the mailbox deletion process relied on custom procedural deletion code, which was not updated to handle Dating user deletions. The bug was identified during the internal beta testing period for Dating. If undetected, it would have resulted in retaining all private messages exchanged by Dating users post-account deletion. The follow-up action was to remove the procedural deletion code and replace it with a deep-annotated edge type. In subsequent months, DELF seamlessly handled mailbox deletion for four additional new user account types introduced in Facebook.

- **Example 2 (May 2018):** DELF flagged an edge type storing the most recent pages a user views, which was left dangling when some Facebook users were deleted. The edge type was created in November 2013 and used to generate recommendations for accounts to follow. Initially, developers ensured that edges of this type were deleted when a Facebook user deleted their account. However, in May 2018, DELF detected that the same edge type was reused to log page views for a different type of user accounts, i.e., page admins. The investigation confirmed that every time a page admin deleted their account, the list of their most recent viewed pages persisted. DELF detected the edge type reuse and highlighted the missing edge type annotation.

**Prevention:**
DELF enforces that all new data types are created alongside deletion annotations, eliminating developer omissions as a correctness concern. The protection DELF provides is effective, assuming available annotations can express sufficiently complex deletion logic. Developers can bypass DELF using the custom object type annotation (§4.1). To assess the system’s ability to prevent omissions, we studied how developers bypass DELF by using the custom object type annotation in new applications.

We retroactively inspected 408 changesets introduced in Facebook’s infrastructure throughout October 2019 by 279 distinct developers. Each changeset created or modified at least one object type annotation. Only 7 changesets designated the custom annotation. We observed no new legitimate instances where DELF annotations lacked expressiveness. Six changesets used custom to maintain backward compatibility with legacy procedural deletion logic introduced before DELF was available. One changeset misused custom to approximate reference counting. We conclude that DELF annotations can express the deletion logic necessary in modern OSNs and that the system is effective in safeguarding deletion from developer omissions.

| HEURISTIC | PREDICTS | to_new_object | to_leaf_object | to_owned_object | id1_ref_in_id2 | to_old_object | self_reference | many_to_one | same_obj_type | to_deleted | OVERALL |
| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |
| deep | deep | 86.9% | 86.3% | 91.9% | 88.9% | 94.5% | 100.0% | 96.4% | 90.8% | 91.7% | 89.7% |
| shallow | shallow | 93.0% | 95.0% |  |  |  |  |  |  |  |  |

**Precision and Recall:**
- **Overall Precision:** 89.7%
- **Overall Recall:** 60.7%

**Inadvertent Data Retention:**

We continue by assessing how effective DELF is in identifying instances of dangling data that engineers actively misclassified.

**Identified Issues:**
We start with examples where DELF pinpointed developer mistakes that would have otherwise resulted in dangling data. We inspected 91 reports generated by DELF deep heuristics during January 2020, of cases where developers annotated edges as shallow or refcount while DELF suggested deep. These reports were submitted to Facebook’s privacy team for expert review to establish ground truth. The assessment established that developers incorrectly annotated 66 of these edges as shallow. Most of the remaining edges were ambiguous.

**Example:**
DELF surfaced that 23 distinct edge types used to represent different types of major life events for Facebook users, such as weddings, house moves, and changes to their citizenship, were mislabeled. These 23 edge types associated the user account object with objects of a separate type storing detailed information about the life event, e.g., the date the user got married. All were annotated shallow rather than deep, indicating erroneously that life event data should be retained post-account deletion.

The report investigation confirmed the developer mistakes. The affected edge types were introduced at different times dating back to the introduction of the product feature in 2011. Legacy procedural deletion logic historically ensured correct deletion of associated life event data. However, as part of DELF’s deployment, two different developers—unaware of the historical deletion logic—annotated the edges as shallow in 2017 and 2018. The DELF report highlighted the mistake before disabling the legacy procedural deletion logic, preventing inadvertent data retention of life event data.

**Prevention:**
DELF helps developers annotate edges as deep via static and dynamic validation. We measure the impact of static validation in the developer workflow and assess how comprehensive deep heuristics are as a safety net.

1. **Static Validation:**
   - **Experiment:** We conducted an experiment to measure how often static validation leads to developers changing their annotations during product development. DELF enforces statically that all object types must define at least one deep inbound edge type by treating `by_any` as the default annotation (§4.1).
   - **Results:** We inspected a sample of changesets successfully creating 151 new object types in production during January 2020 and logs of DELF static validation failures triggered during development starting from December 2019. We found that 62.2% of the new object types introduced failed static validation at some point during their development. Developers subsequently corrected these mistakes, and all 94 new object types were created while satisfying the chosen object type annotation.

2. **Dynamic Validation:**
   - **Report:** We report on the precision and recall achieved by DELF heuristics on a sample of edge types already annotated by developers, treating developer annotations as ground truth.
   - **Sample:** We sampled approximately 2.4 trillion individual edges deleted in production in January 2020. Of these, we randomly selected 2,000 shallow and 2,000 deep edge types to ensure equal representation. Edge types with fewer than 20 samples were ignored since some heuristics require at least 20 items to classify an edge type.
   - **Results:** We ran DELF heuristics on all edges in our sample. For each heuristic, we counted a true positive when the heuristic correctly predicted the edge type annotation. The overall precision and recall achieved by DELF heuristics on our sample of 4,000 edge types are shown in Table 5. DELF discovers the correct annotation for the majority of edge types, providing an important discovery mechanism for developer mistakes. The overall precision is higher than both deep and shallow individually because we discard conflicting predictions; deep or shallow false positives with conflicting predictions are not considered valid predictions.