# Method for Detecting Unknown Malicious Executables

**Authors:**
- Boris Rozenberg
- Ehud Gudes
- Yuval Elovici
- Yuval Fledel

**Affiliations:**
- **Boris Rozenberg, Ehud Gudes:** Deutsche Telekom Laboratories at Ben-Gurion University (BGU) and Department of Computer Science, BGU, Beer Sheva 84105, Israel
- **Yuval Elovici, Yuval Fledel:** Deutsche Telekom Laboratories at BGU and Department of Information System Engineering, BGU, Beer Sheva 84105, Israel

## Abstract
We present a method for detecting new malicious executables. The method consists of two phases:
1. **Training Phase:** Identifying and storing characteristic system call sequences unique to malicious files in a database.
2. **Runtime Phase:** Continuously monitoring the system calls of running executables and comparing them with the stored sequences. If a match is found, the executable is declared malicious.

## 1. Introduction and Related Works
Detection of known malicious executables is typically achieved using signature-based techniques. However, these techniques are ineffective against entirely new malicious executables. A common approach for detecting new malicious executables involves using machine learning and data mining to create classifiers that distinguish between malicious and benign executables statically [1]. This approach, however, often fails to handle obfuscated or encrypted files, leading to false alarms.

In this paper, we introduce a novel real-time detection technique for new malicious executables, employing a dynamic analysis approach.

## 2. Our Method

### 2.1 Process Overview
Figure 1 illustrates the process for detecting malicious executables. The method comprises two main phases:

#### 2.1.1 Training Phase
During the training phase, an "M-determining module" identifies sequences of system calls that are characteristic only of malicious executables. These sequences are stored in an "M-database," which serves as input for the comparator during the runtime phase.

#### 2.1.2 Runtime Monitoring Phase
During the runtime phase, the comparator continuously monitors the system calls issued by running executables. For each running program, the comparator compares the sequence of system calls with the sequences stored in the M-database. If a match is found, the program is declared malicious and can be terminated. Otherwise, the program is considered benign.

### 2.2 Training Phase Details
Figure 2 provides a detailed flow diagram of the training phase. The process involves the following steps:

1. **Data Accumulation:** Collect `n` malicious and `m` benign executables.
2. **Execution and Recording:** Execute each executable and record its runtime sequence of system calls. This results in two datasets: `Mr` (malicious) and `Br` (benign).
3. **Frequent Sequence Identification:** Apply the SPADE algorithm [2] to determine a set `S` of all frequent sequences in `Mr`. Note that each sequence `si` in `S` may contain wildcards.
4. **Sequence Filtering:** For each sequence `si` in `S`, check if it appears in any of the sequences in `Br`. If it does, `si` is not suitable for our method. The output is a minimal set `Sm` containing only those sequences from `S` that do not appear in `Br`, thus being characteristic of only malicious executables.

## 3. Evaluation
We conducted a 3-fold cross-validation on 700 malicious and 700 benign files. Our method discovered 28 characteristic sequences that matched 87% of malicious executables, with a false alarm rate of 7%.

## References
1. Kolter, J.Z., Maloof, M.A.: Learning to detect malicious executables in the wild. In: 10th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, pp. 470–478. ACM Press, New York (2004)
2. Zaki, M.G.: Efficient Algorithm for Mining Frequent Sequences. Machine Learning 42, 31–60 (2001)

---

**Figures:**

**Figure 1.** Process for detecting malicious executables - flow diagram

**Figure 2.** Training phase process

---

This revised version aims to improve the clarity, coherence, and professional tone of the original text.