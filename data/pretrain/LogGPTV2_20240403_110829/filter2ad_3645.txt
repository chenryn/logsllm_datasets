title:Method for Detecting Unknown Malicious Executables
author:Boris Rozenberg and
Ehud Gudes and
Yuval Elovici and
Yuval Fledel
Method for Detecting Unknown Malicious Executables  
Boris Rozenberg1, Ehud Gudes1, Yuval Elovici2, and Yuval Fledel2 
1 Deutche Telekom Laboratories at BGU and Department of Computer Science, 
2 Deutche Telekom Laboratories at BGU and Department of Information System Engineering, 
Ben Gurion University, Beer Sheva 84105, Israel 
Abstract. We present a method for detecting new malicious executables, which 
comprises  the  steps  of:  (a)  in  a  training  phase,  finding  a  collection  of  system 
call sequences that are characteristic only to malicious files, and storing said se-
quences in a database; (b) in a runtime phase, for each running executable, con-
tinuously  monitoring  its  issued  run-time  system  calls  and  comparing  with  the 
stored sequences within the database, and when a match is found, declaring said 
executable as malicious.  
1   Introduction and Related Works 
Detection  of  known  malicious  executables  is  typically  performed  using  signature-
based techniques. The main disadvantage of these techniques is the inability to detect 
totally  new  malicious  executables.  The  main  prior  art  approach  for  detecting  new 
malicious executables is to employ machine learning and data mining for the purpose 
of creating a classifier that is able to distinguish between malicious and benign execu-
tables statically [1]. The main drawback of the above approach is its inability to deal 
with obfuscated or encrypted files, that results in false alarms. In this paper we intro-
duce a novel technique for the real-time detection of new malicious executables that 
follows dynamic analysis approach.  
2   Our Method 
Fig. 1 is a flow diagram illustrating the process for detecting malicious executables. 
During the training phase 101, which is performed off-line, an "M determining mod-
ule" 102 operates to determine sequences of system calls that are characteristic only to 
malicious  executables.  This  module  produces  an  "M  database"  103  which  forms  an 
input data to comparator 104. During the runtime monitoring phase 105, comparator 
104  continuously  receives  inputs  relating  to  the  system  calls  that  are  issued  by  the 
currently  running  executables,  compares  separately  for  each  running  program  the 
sequence  of  system  calls  that  it  issues,  with  each  of  the  sequences  stored  in  the  M 
database. If a match is found with one or more of the M-sequences, a program is de-
clared  as  malicious  and  can  be  terminated.  Otherwise,  as  long  as  no  such  an  alert 
signal is issued, a running file is considered as begin. 
E. Kirda, S. Jha, and D. Balzarotti (Eds.): RAID 2009, LNCS 5758, pp. 376–377, 2009. 
© Springer-Verlag Berlin Heidelberg 2009 
Method for Detecting Unknown Malicious Executables 
377 
(cid:20)(cid:19)(cid:20)
(cid:48)(cid:3)(cid:71)(cid:72)(cid:87)(cid:72)(cid:85)(cid:80)(cid:76)(cid:81)(cid:76)(cid:81)(cid:74)(cid:3)(cid:80)(cid:82)(cid:71)(cid:88)(cid:79)(cid:72)
(cid:20)(cid:19)(cid:21)
(cid:48)(cid:3)(cid:39)(cid:68)(cid:87)(cid:68)(cid:69)(cid:68)(cid:86)(cid:72)
(cid:20)(cid:19)(cid:22)
(cid:20)(cid:19)(cid:24)
(cid:54)(cid:92)(cid:86)(cid:38)(cid:68)(cid:79)(cid:79)(cid:3)(cid:44)(cid:39)(cid:15)(cid:3)(cid:41)(cid:76)(cid:79)(cid:72)(cid:3)(cid:44)(cid:39)
(cid:20)(cid:19)(cid:23)
(cid:38)(cid:82)(cid:80)(cid:83)(cid:68)(cid:85)(cid:68)(cid:87)(cid:82)(cid:85)
(cid:48)(cid:68)(cid:79)(cid:76)(cid:70)(cid:76)(cid:82)(cid:88)(cid:86)(cid:3)(cid:73)(cid:76)(cid:79)(cid:72)(cid:86)(cid:3)(cid:11)(cid:44)(cid:39)(cid:86)(cid:12)
Fig. 1. Process for detecting malicious executables - flow diagram 
Fig.  2  describes  a  training  phase  process  for  determining  the  database  of  M-
sequences. The process comprises accumulation of n malicious and m benign execu-
tables. In steps 201 and 202, each executable is executed, and its runtime sequence of 
system  calls  is  recorded.  The  result  is  Mr  dataset  which  contains  n  records  and  Br 
dataset which contains m records. In step 203, a set S of all frequent sequences in Mr 
is determined by applying the SPADE algorithm [2]. It should be noted that each si in 
the found set S may contain wildcards. In step 204, for each sequence si in S the proc-
ess  checks  whether  the  sequence  si  appears  within  any  of  the  sequences  included 
within the dataset Br. If it is, that means that si is not a suitable sequence for the pur-
pose of determining malicious executables according to our method. The output from 
step 204 is therefore a minimal set Sm, which includes only those sequences from S 
that do not appear in any of the sequences of  Br, and therefore are characteristic to 
only malicious executables.  
(cid:21)(cid:19)(cid:20)
(cid:48)(cid:85)
(cid:21)(cid:19)(cid:21)
(cid:37)(cid:85)
(cid:21)(cid:19)(cid:22)
(cid:41)(cid:76)(cid:81)(cid:71)(cid:3)(cid:86)(cid:72)(cid:87)(cid:3)(cid:54)(cid:3)(cid:82)(cid:73)(cid:3)(cid:68)(cid:79)(cid:79)(cid:3)(cid:73)(cid:85)(cid:72)(cid:84)(cid:88)(cid:72)(cid:81)(cid:87)(cid:3)(cid:86)(cid:72)(cid:84)(cid:88)(cid:72)(cid:81)(cid:70)(cid:72)(cid:86)(cid:3)(cid:76)(cid:81)(cid:3)(cid:48)(cid:85)(cid:3)(cid:90)(cid:76)(cid:87)(cid:75)(cid:3)(cid:86)(cid:88)(cid:83)(cid:83)(cid:82)(cid:85)(cid:87)(cid:3)(cid:33)(cid:32)(cid:20)(cid:8)
(cid:21)(cid:19)(cid:23)
(cid:41)(cid:82)(cid:85)(cid:3)(cid:72)(cid:68)(cid:70)(cid:75)(cid:3)(cid:86)(cid:72)(cid:84)(cid:88)(cid:72)(cid:81)(cid:70)(cid:72)(cid:3)(cid:86)(cid:76)(cid:3)(cid:76)(cid:81)(cid:3)(cid:54)(cid:3)(cid:70)(cid:75)(cid:72)(cid:70)(cid:78)(cid:3)(cid:90)(cid:75)(cid:72)(cid:87)(cid:75)(cid:72)(cid:85)(cid:3)(cid:87)(cid:75)(cid:72)(cid:85)(cid:72)(cid:3)(cid:76)(cid:86)(cid:3)(cid:68)(cid:3)(cid:86)(cid:72)(cid:84)(cid:88)(cid:72)(cid:81)(cid:70)(cid:72)(cid:3)(cid:69)(cid:85)(cid:3)(cid:76)(cid:81)(cid:3)(cid:37)(cid:85)(cid:3)(cid:87)(cid:75)(cid:68)(cid:87)(cid:3)(cid:76)(cid:86)(cid:3)(cid:80)(cid:68)(cid:87)(cid:70)(cid:75)(cid:72)(cid:71)(cid:3)(cid:69)(cid:92)(cid:3)(cid:86)(cid:76)(cid:17)(cid:3)
(cid:47)(cid:72)(cid:87)(cid:10)(cid:86)(cid:3)(cid:54)(cid:80)(cid:3)(cid:69)(cid:72)(cid:3)(cid:68)(cid:3)(cid:80)(cid:76)(cid:81)(cid:76)(cid:80)(cid:68)(cid:79)(cid:3)(cid:86)(cid:72)(cid:87)(cid:3)(cid:82)(cid:73)(cid:3)(cid:68)(cid:79)(cid:79)(cid:3)(cid:86)(cid:76)(cid:3)(cid:76)(cid:81)(cid:3)(cid:54)(cid:3)(cid:86)(cid:88)(cid:70)(cid:75)(cid:3)(cid:87)(cid:75)(cid:68)(cid:87)(cid:3)(cid:87)(cid:75)(cid:72)(cid:85)(cid:72)(cid:3)(cid:76)(cid:86)(cid:3)(cid:81)(cid:82)(cid:3)(cid:69)(cid:85)(cid:3)(cid:76)(cid:81)(cid:3)(cid:37)(cid:85)(cid:3)(cid:87)(cid:75)(cid:68)(cid:87)(cid:3)(cid:76)(cid:86)(cid:3)(cid:80)(cid:68)(cid:87)(cid:70)(cid:75)(cid:72)(cid:71)(cid:3)(cid:69)(cid:92)(cid:3)(cid:86)(cid:76)(cid:17)
(cid:54)
(cid:21)(cid:19)(cid:24)
(cid:54)(cid:80)
(cid:48)(cid:3)(cid:39)(cid:68)(cid:87)(cid:68)(cid:69)(cid:68)(cid:86)(cid:72)
Fig. 2. Training phase process 
3   Evaluation  
We ran 3-fold cross-validation on 700 malicious and 700 benign files. We have dis-
covered  28  characteristic  sequences  that  match  87%  of  malicious  executables,  with 
7% false alarms.  
References 
1.  Kolter,  J.Z.,  Maloof,  M.A.:  Learning  to  detect  malicious  executables  in the  wild.  In: 10th 
ACM SIGKDD international conference on knowledge discovery and data mining, pp. 470–
478. ACM Press, New York (2004) 
2.  Zaki, M.G.: Efficient Algorithm for Mining Frequent Sequences. Machine Learning 42, 31–
60 (2001)