令，可以列出所有可读的文件。首先，如果我们要列出的是“所有用户均可读”的
文件，只要在命令上玩这个花样就行了：
\ (1 [e sT oaxa ptso urad [qoxeasoqqaed] pug
图8.2这张截图就是一个输出的例子。
30|she1l@android:/ s 1ind/ -perm 044013xe9 36 03:37) cDua2c/dev/nul1
sediar
02913-69-3003:37
oot
00
013
usage_percpu
00
root
root
813.
83:37
acct.usage_percpu
ct.stat
02013-09-3003:37
00
00
2013-0
09-30
13:37
00
cpuacct.stat
02013-09-30 03:37cpuacct.power
2013-
[图 8.2
以上屏幕截图以及本章之后的所有截图，均取自一部已经root了的三星Galaxy
S3。图8.2中的这条命令行指令中包括一个重定向至/dev/null的指令，它被用来忽略
由于权限不匹配而导致的错误输出。
236
---
## Page 255
第8章原生代码中漏润的利用与分析
给非Linux/UNIX用户的一点小提示
/dev/null的作用就好比是一个输出“黑洞”，允许Linux/UNIX用
户用它来放置他们不感兴趣的输出。一个额外的好处是，它会返
回一个值让你知道写操作是否成功。
继续往下，如果你要找的是“所有用户均可写”的文件，可以使用以下参数：
图8.3这张截图就是一个输出的例子。
38she18andred:/sf1nd/pers 82213e9303:37c02.ev/uont
--ww-root
2013-09-3063：37cgroup.eve
W-w--w-reot
·R.·A-·R
root
图 8.3
如果要找的是“所有用户均可执行”的文件。
\{1 [e- sT oexa- Tto wrad[uozeo-og-uaed] pug
无需专门使用八进制格式，find命令是能够明白通用的用户分类和权限的简写的。
例如，要查找除组成员外所有人均可读的文件，你可以这样指定权限：
/\ {) [e- st oexa- x=e wrad- [qozeas-og-uaed] pug
请看图8.4这张截图中的输出结果。
roo
sediarv
isage
2013.99-363:37
2913.09-303:37cpucct.sputr
图 8.4
上面这条指令确保只有当权限完全匹配的文件才会被列出，也就是说，返回的
文件的相应位肯定被设为1了。如果你要找规定的位被设为1，而其他的位设不设都
没关系的文件—这可能是你最常做的事了——你可以在之前的例子里，在指定搜索
权限的参数前面加上一个“”符号作为前缀。如果用八进制格式表示的话，它应该
是这样的。
237
---
## Page 256
Android安全攻防实战
请看图8.5这张截图中的输出结果。
dr-x.....root
racte
root
xxrwxr
1013
robt
karnel/de
rot
default.prep
drrixrixrodt
roote
Lxrxnxroet
root
2012-01-0102
efs
001
roo
36041979-01-01 62:90161t.bt.rC
图 8.5
这将匹配所有用户分类中，可读bit位被设为1的情况，也就是说：445，566，
777等权限的相应的bit位都是匹配的。而344，424，222等则不匹配。
你应该感兴趣的，真正有用的权限匹配规则，是用来寻找setuid位被设为1的可
执行文件的。
find [path-to-search] -perm -4111 exec 1s -al () \:
请看图8.6这张截图中的输出结果：
13eshel(@android:/data 5 find / -perm411-exec(sal();2> /devinul1
图8.6
在前面的截图中我们可以看到，使用上面这条命令，我们找到了su这个二进制
可执行文件。如果你在Android设备上发现了这个二进制可执行文件，那么基本上就
可以肯定这台设备已被root了。
你也可以找出所有setguid位和可执行位都被设为1的文件。
\() te- sT oxo- T- mzod[yozes0-qaed] pug
请看图8.7这张截图中的输出结果。
rwsr-sr-xr0otr00t919892013-94-3621:02su
图 8.7
find 命令也允许你把指定用户作为搜索条件的一部分，例如
·你可以列出所有属于root用户的文件。
\ () [e sT ooxa- 0 zesn [qozees-oq-qaed] pu7g
。你可以列出所有系统用户的文件。
238
---
## Page 257
第8章原生代码中漏润的利用与分析
find [path-to-search] -user 1000 -exec 1s -al {} \
·你还可以像下面这条命令这样，根据组ID列出文件。
“\() re- st oexe-o dnoxb[qoxreee-oq-qaed] pug
你可能想要知道，在你的Android系统中，每个用户一或者再进一步，每个应
用程序一一有多大的访问权限。要做到这一点，你可能需要建立一个用户ID列表
或者，更重要的是要建立各个app的UID列表。做到这一点的最简单方法是dump
/data/data目录中文件的访问权限，因为在这个目录中包含了安装在Android设备上
的app中的大部分数据。不过，为了能从ADBshell访问这个列表，你需要拥有root/
系统账户/任何具有同等权限的账户。在模拟器上这是很容易获得的，因为它自动就
已经root了。但如果不是这样（要是你非这么做不可的话），你也可以猛翻XDA开
发者的网页去搜索一个root你手机的方法。XDA开发者的网站地址为http:/www.
xda-developers.com/。
root手机有利有整：在本例中，它使你能更细致地检查文件系统及访问权限。但
另一方面，如果对root权限的管理不当的话，它也将使你的手机暴露在许多灾难性
的攻击之下！所以，应该慎用root权限，并且只在必需时才对手机进行临时性的root。
继续。如果你列出了/data/data目录中的所有的文件，你会看到下面这些信息（图
8.8这张截图取自一台三星GalaxyS3。
shetloan
air.za.gov.sars-efitiggoglesear
29:2
be.reader
xr-x--xu9a16400a164
2013-06-15 98:42 coe.8ng5oes:14onche701d
图 8.8
你可能会注意到每个app的命名约定都有些古怪：即，u[数字]_a[数字]。它的具
体含义实际上是：u[用户配置文件号]，就是指安装该app所有者的用户配置文件（uscr
profile）—因为从Jelly Bean（Android 4.1的代号）开始，Android支持多用户配置
文件了。而a[数字]，其中的数字表示app的ID。
在app的ID上加上10000，就得到了系统中实际使用的，app所有者的用户 ID
（UID）。例如，“Mozilla installation”这个app的用户名是u0_a170，那么它对应的
UID就是10170。要想找出使用该UID的用户拥有的所有文件，你只需执行下面这
条命令就可以了。
find /data/data/ -user 10170 -exec 1s -al () \; 2> /dev/nul1
---
## Page 258
Android安全攻防实战
请看图8.9这张截图中的输出结果：
10170
a170
rwxrax
Irwxrus
xug
fache
u0a170
2013-
es
2013
6:53
15:58
profiles.ini
sszxjrgk.default
46391 2013-99-2507:09 blocklist.xmT
图 8.9
你还可以在Android_filesystem_config.h文件（链接详见本实验的拓展阅读部分）
中发现其他用户的uid。
进一步说明
Stat是一个可以使find命令的输出更有用的命令。它能显示文件的属性并允许你
将输出格式调整成你想要的样子。stat命令有无数的特性，用它来寻找“权限设置”
错误的文件比通过find-exec命令调用ls-al要好用得多。
你可以像下面这条命令这样，通过find使用 stat。
find . -perm [permission mode] -exec stat -c *[format] {} \;
例如，如果你想显示的是下面这些。
·%A：以方便人们阅读的格式显示访问权限。
·%U：文件所有者的用户ID。
。%g：文件所有者所在组的ID。
·%f：以十六进格式显示file mode。
·%N：如果是一个符号链接，就在文件名上打上引号，并指出它链接到哪个具
体的文件。
执行下面这条命令，就行了。
find . -perm [permission] -exec stat -c "sA u %g f N" () \;
这个命令产生的输出结构如图8.10所示（本例中使用-0666作为要指定的访间权
限）。
240
---
## Page 259
第8章原生代码中温润的利用与分析
/mnt/u
AT
/mnt/UsbDriveD
'/storage/usbDriveD
/mnt/usboriveB
/mnt/UsboriveA
rwxrwxrxoealff
/mnt/sdcard'->'/storage/sdcardθ'
图 8.10
拓展阅读
●CVE-2009-1894漏洞的摘要文章可至http://web.nvd.nist.gov/view/vuln/detail?
vulnldCVE-2009-1894 查]。
·AndroidGit 代码仓库中的Android_filesystem_config.h文件在https:/
android.googlesource.com/platform/system/core/+/android-4.4.2_r1/include/privat
c/android_filesystem_config.h。
·Linux项目文档中文件系统的层次结构标准在http://www.tldp.org/HOWTO/
HighQuality-Apps-HOWTO/fhs.html
。文件系统的层次结构组织的标准指南在htp://www.pathname.com/fhs/pub
fhs-2.3.pdf。
·Embedded Android, OReilly 出版社，2013年3月，作者Karim Yaghmour。
8.3交叉编译原生可执行程序
在我们开始实施栈溢出，控制Android设备的指令执行流之前，我们需要学习制
备一些有漏洞的演示应用程序的方法。要完成这一目标，我们要能编译生成原生可
执行程序。在Android 原生开发工具包（native development kit，NDK）中集成了一
些非常棒的应用程序，我们可以用它们完成这一任务。
怎么做.
交叉编译自己的原生Android组件，相关步骤如下。
1.为你的代码准备一个目录。也就是要建立一个目录，目录名随你去取，就像
你可以随便为你的“模块”取名那样。例如，你可以像我在示例中这样，创
建一个名为“buffer-overflow”的目录。在建立这个目录之后，你还需要再创
241
---
## Page 260
Android安全攻防实战
建一个名为JNI的子目录。这个子目录的名字必须是“JNI"，因为NDK的
编译脚本将会专门寻找这个目录。
2.一旦有了自己的目录，你就可以创建一个Android.mk文件。把它创建在JNI
目录中。Android.mk文件基本上就是个Make文件，其中记录了一些编译相
关的属性。它的内容应该是这样的。
include $ (CLEAR_VARS)
LOCAL_PATH := $ (ca11 my-dir)
# give module name
LOCAL_MoDUL& := buffer-overflov name of folder
# list your C files to compile
LOCAL_SRC_FILES := buffer-overflov.c #name of source to compile
# this option vi11 bui1d executables Lnstead of building libraryfor Android
application.
3.有了必需的JNI目录结构和正确的Android.mk之后，你就可以开始写C代
码了。下面是你可以使用的一个示例代码。
include 
inelude 
voId vulnerable (char *src) {
char dest[10] //declare a stack based buffer
strcpy (dest, szc) :
printf(*[%s]\n", dest); //print the result
return; }
void ca11_ne_maybe () {
printf (*so much vin!:\n*)
return;)
Lnt main (intargc, char **argv) [
vulnerable (argv[1])://ca11 vulnerable funct.ion
return (0): )
请确认这个文件是在JNI目录中，与Android.mk文件是放在一起的。
4.接下来是最带劲的了—现在你可以编译代码了！你可以调用NDKbuild脚