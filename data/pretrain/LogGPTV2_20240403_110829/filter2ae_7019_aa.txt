# ByteCTF
## 译文声明
本文为翻译文章，仅供参考。具体内容和含义请以原文为准。

## Reverse
### moderncpp
该题目涉及将输入转换为01串，通过一种类似于哈夫曼树的结构进行编码。随后应用简单的TEA加密算法。解题步骤包括：首先，从字符到比特位的映射被定义；其次，计算TEA结果并匹配以得出最终的flag。

```python
cmps = "000011001111000001101001110110000100101000110010111110110110001010001110101001001100110000001100110000000010001001100011111001011011011011111101000001110101111011100110111111101100011010001101111111011000110101010001101011011110010001101000111110100001010001111000000000000000000000000000000000000000000000000000000000000"

map01 = {
    "a": "100101", "b": "00001", "c": "01110", "d": "11011", "e": "0011010", "f": "010010", "g": "111011", "h": "01000",
    "i": "10110", "j": "00110111", "k": "1111010", "l": "110010", "m": "00011", "n": "10000", "o": "10100011101",
    "p": "0110011", "q": "011000", "r": "111110", "s": "01011", "t": "11000", "u": "11110110", "v": "000001",
    "w": "111000", "x": "00101", "y": "10011", "z": "101000110", "0": "1110010", "1": "100100", "2": "111111",
    "3": "01101", "4": "11010", "5": "11110111", "6": "001100", "7": "111010", "8": "00111", "9": "10101", "!": "00110110",
    "@": "1110011", "#": "101001", "%": "00010", "^": "01111", "&": "10100011100", "*": "0110010", "(": "010011",
    ")": "111100", "_": "01010", "+": "10111", "-": "10100010", "=": "000000", "[": "110011", "]": "00100",
    "{": "10001", "}": "1010001111", ";": "1010000"
}

path = []

def output():
    print(''.join(path))

def dfs(ptr):
    if ptr > len(cmps):
        return
    for k, v in map01.items():
        if cmps[ptr:ptr + len(v)] == v:
            path.append(k)
            dfs(ptr + len(v))
            path.pop()

dfs(0)
```

## Misc
### BabyShark
此题提供了一个网络流量包，在第一个TCP流中发现使用`adbshell`下载的一个程序。我们提取并反编译了该程序。

```java
package com.bytectf.misc1;
import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

public class AesUtil {
    private static final String CipherMode = "AES/CFB/NoPadding";

    private static String byte2hex(byte[] b) {
        StringBuilder sb = new StringBuilder(b.length * 2);
        for (byte value : b) {
            sb.append(String.format("%02x", value));
        }
        return sb.toString();
    }

    private static byte[] hex2byte(String inputString) {
        int l = inputString.length() / 2;
        byte[] result = new byte[l];
        for (int i = 0; i < l; ++i) {
            int index = i * 2;
            int v = Integer.parseInt(inputString.substring(index, index + 2), 16);
            result[i] = (byte) v;
        }
        return result;
    }

    private static byte[] paddingBytes(byte[] data) {
        byte[] padding = new byte[0x20];
        for (int i = 0; i < 0x20; ++i) {
            padding[i] = i < data.length ? data[i] : 0;
        }
        return padding;
    }
}
```

### Lost Excel
本题要求从Excel文件中分离出点阵图，并识别LSB隐写。根据提示，blocksize设为8，将图像分割成8*8像素的小块。观察这些小块中的重复模式，并基于黑色像素的位置将其转换为二进制字符串。

```python
from PIL import Image

ans = ''

def check(temp):
    global ans
    for y in range(2):
        for x in range(2):
            if temp.getpixel((x * 4, y * 4)) == (0, 0, 0):
                ans += str(y) + str(x)

for i in range(4, 5700):
    img = Image.open(f'{i}.png')
    check(img)

print(ans)
```

### frequently
这是一个相对简单的题目，利用DNS隧道技术，其中'i'和'o'分别代表0和1，从而获取flag的一部分。