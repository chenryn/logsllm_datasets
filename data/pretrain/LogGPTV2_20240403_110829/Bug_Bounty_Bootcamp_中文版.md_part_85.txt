专注于处理用户输入的代码部分将为识别潜在危险提供良好的起点。确保还审查用户输入的存储或传输方式。最后，查看应用程序的其他部分是否使用了以前处理的用户输入。您可能会发现，同样的用户输入与应用程序的各个组件交互方式不同。
For example, the following snippet accepts user input. The PHP variable
`      $_GET     ` contains the parameters submitted in the URL query
string, so the variable `      $_GET['next']     ` refers to the value
of the URL query parameter named `      next     ` :
例如，下面的代码段接受用户输入。PHP变量\$\_GET包含在URL查询字符串中提交的参数，所以变量\$\_GET
\[\'next\'\]是指URL查询参数命名为next的值：
This parameter gets stored in the `      $redirect_url     ` variable [
1 ]{.CodeAnnotation aria-label="annotation1"} . Then the
`      header()     ` PHP function sets the response header
`      Location     ` to that variable [ 2 ]{.CodeAnnotation
aria-label="annotation2"} . The `      Location     ` header controls
where the browser redirects a user. This means the user will be
redirected to the location specified in the `      next     ` URL
parameter.
此参数存储在\$redirect_url变量1中。然后，header()
PHP函数将响应头设置为该变量2的位置。位置标头控制浏览器重定向用户的位置。这意味着用户将被重定向到下一个URL参数中指定的位置。
The vulnerability in this code snippet is an open redirect. The
`      next     ` URL query parameter is used to redirect the user after
login, but the application doesn't validate the redirect URL before
redirecting the user. It simply takes the value of the URL query
parameter `      next     ` and sets the response header accordingly.
该代码片段存在漏洞，即开放式重定向漏洞。在登录后，下一个URL查询参数用于将用户重定向，但应用程序在重定向用户之前并不对重定向URL进行验证。它仅仅是获取
URL 查询参数 next 的值，并相应地设置响应头。
Even a more robust version of this functionality might contain
vulnerabilities. Take a look at this code snippet:
即使更强大的功能版本也可能存在漏洞。看看这段代码片段：
Now the code contains some input validation: the
`      preg_match(     ` `      PATTERN     `{.variable} `      ,     `
`      STRING     `{.variable} `      )     ` PHP function checks
whether the `      STRING     `{.variable} matches the regex pattern
`      PATTERN     `{.variable} [ 1 ]{.CodeAnnotation
aria-label="annotation1"} . Presumably, this pattern would make sure the
page redirects to a legitimate location. But this code still contains an
open redirect. Although the application now validates the redirect URL
before redirecting the user, it does so incompletely. It checks only
whether the redirect URL contains the string *example.com* . As
discussed in [ Chapter 7 ]{.xref itemid="xref_target_Chapter 7"} ,
attackers could easily bypass this protection by using a redirect URL
such as *attacker.com/example.com* , or *example.com.attacker.com* .
现在的代码包含一些输入验证：preg_match（PATTERN，STRING）PHP函数检查STRING是否与正则表达式模式PATTERN匹配。
1.假定此模式将确保页面重定向到合法位置。
但是，此代码仍包含一个开放式重定向问题。
尽管应用现在在重定向用户之前验证重定向URL，但该验证不完整。
它仅检查重定向URL是否包含字符串example.com。
如第7章所讨论的那样，攻击者可以轻松绕过此保护，方法是使用诸如attacker.com/example.com或example.com.attacker.com之类的重定向URL。
Let's look at another instance where tracing user input can point us to
vulnerabilities. The `      parse_url(     `
`      URL, COMPONENT     `{.variable} `      )     ` PHP function
parses a URL and returns the specified URL component. For example, this
function will return the string `      /index.html     ` . In this case,
it returns the `      PHP_URL_PATH     ` , the filepath part of the
input URL:
让我们看看另一个实例，追踪用户输入可以指出我们漏洞的位置。parse_url（URL，COMPONENT）PHP函数解析URL并返回指定的URL组件。例如，此函数将返回字符串/index.html。在这种情况下，它返回PHP_URL_PATH，输入URL的文件路径部分。
    parse_url("https://www.example.com/index.html", PHP_URL_PATH)
Can you spot the vulnerabilities in the following piece of PHP code?
你能发现以下 PHP 代码中的漏洞吗？
     You requested the page:" . $url_path . "";
      echo $output;
      [...]
    ?>
This page contains a command injection vulnerability and a reflected XSS
vulnerability. You can find them by paying attention to where the
application uses the user-supplied `      download_file     ` parameter.
该页面存在命令注入漏洞和反射型跨站脚本漏洞。只需关注应用程序在何处使用用户提供的download_file参数，即可发现它们。
Let's say this page is located at *https://example.com/download* . This
code retrieves the `      download_file     ` URL query parameter and
parses the URL to retrieve its path component [ 1 ]{.CodeAnnotation
aria-label="annotation1"} . Then the server downloads the file located
on the *example.com* server with the filepath that matches the path [
]{#c22.xhtml#Page_344 .pagebreak title="344"} in the
`      download_file     ` URL [ 2 ]{.CodeAnnotation
aria-label="annotation2"} . For example, visiting this URL will download
the file *https://example.com/abc* :
假设这个页面位于 https://example.com/download。这段代码检索
download_file URL 查询参数并解析 URL 以检索其路径组件 1.
然后服务器下载位于 example.com 服务器上与下载文件 URL 中路径匹配的文件
2。例如，访问此 URL 将下载文件 https://example.com/abc：到。
    https://example.com/download?download_file=https://example.com/abc
The PHP `      system()     ` command executes a system command, and
`      system(     ` `      COMMAND, OUTPUT     `{.variable}
`      )     ` will store the output of `      COMMAND     `{.variable}
into the variable `      OUTPUT     `{.variable} . This program passes
user input into a variable `      $command     ` , then into the
`      system()     ` function [ 3 ]{.CodeAnnotation
aria-label="annotation3"} . This means that users can get arbitrary code
executed by injecting their payload into the `      $url_path     ` .
They'd simply have to meddle with the `      download_file     ` GET
parameter while requesting a page, like this:
PHP的system()命令可以执行系统命令，而system(COMMAND,
OUTPUT)则会将命令的输出存储到变量OUTPUT中。这个程序将用户输入传递给变量\$command，并将其传递到system()函数中。这意味着用户可以通过在请求页面时植入\$
url_path中的有效负载来获取任意代码的执行。他们只需要在请求页面时修改download_file
GET参数即可。
    https://example.com/download?download_file=https://example.com/download;ls
The application then displays a message on the web page by using direct
user input [ 4 ]{.CodeAnnotation aria-label="annotation4"} . Attackers
could embed an XSS payload in the `      download_file     ` 's URL path
portion and get it reflected onto the victim's page after a victim user
accesses the crafted URL. The exploit URL can be generated with this
code snippet. (Note that the second line wraps onto a third for display
purposes.)
应用程序使用直接用户输入在网页上显示一条消息。攻击者可以在download_file的URL路径中嵌入XSS有效载荷，并在受害者用户访问制作的URL后将其反映到受害者页面上。可以使用此代码片段生成利用URL（请注意，第二行为显示目的而换行为第三行）。
## Exercise: Spot the Vulnerabilities {#c22.xhtml#h1-501546c22-0004}
Some of these tips may seem abstract, so let's walk through an example
program, written in Python, that will help you practice the tricks
introduced in this chapter. Ultimately, reviewing source code is a skill
to be practiced. The more you look at vulnerable code, the more adept
you will become at spotting bugs.
这些技巧中有些可能看起来比较抽象，因此我们来介绍一个用 Python
写的示例程序，帮助你实践本章节中介绍的技巧。最终，检视源代码是需要实践的技能。你查看越多漏洞代码，就会越熟悉在代码中发现错误的技巧。
The following program has multiple issues. See how many you can find:
以下程序有多个问题。看看你能找出多少个问题：
    import requests
    import urllib.parse as urlparse
    from urllib.parse import parse_qs
    api_path = "https://api.example.com/new_password"
    user_data = {"new_password":"", "csrf_token":""}
    def get_data_from_input(current_url):
      # get the URL parameters
      # todo: we might want to stop putting user passwords 1
      # and tokens in the URL! This is really not secure. 
      # todo: we need to ask for the user's current password 
      # before they can change it!
      url_object = urlparse.urlparse(current_url)
      query_string = parse_qs(url_object.query)
      try:
        user_data["new_password"] = query_string["new_password"][0]
        user_data["csrf_token"] = query_string["csrf_token"][0]
      except: pass
    def new_password_request(path, user_data):
      if user_data["csrf_token"]: 2
        validate_token(user_data["csrf_token"])
      resp = requests.Response()
      try:
        resp = requests.post(url=path, headers=headers, timeout=15, verify=False, data=user_data)
        print("Your new password is set!")
      except: pass
    def validate_token(csrf_token): 
      if (csrf_token == session.csrf_token):
        pass
      else:
        raise Exception("CSRF token incorrect. Request rejected.")
    def validate_referer(): 3
      # todo: implement actual referer check! Now the function is a placeholder. 4
      if self.request.referer:
        return True
      else:
        throw_error("Referer incorrect. Request rejected.")
    if __name__ == "__main__":
      validate_referer()
      get_data_from_input(self.request.url)
      new_password_request(api_path, user_data)
Let's begin by considering how this program works. It's supposed to take
a `      new_password     ` URL parameter to set a new password for the
user. It parses the URL parameters for `      new_password     ` and
`      csrf_token     ` . Then, it validates the CSRF token and performs
the POST request to change the user's password.
让我们开始考虑这个程序是如何工作的。它应该接收一个 new_password
的URL参数来为用户设置新密码。它会解析URL参数以获取 new_password 和
csrf_token。然后，它会验证CSRF令牌并执行POST请求以更改用户的密码。
This program has multiple issues. First, it contains several revealing
developer comments [ 1 ]{.CodeAnnotation aria-label="annotation1"} . It
points out that the request to change the user's password is initiated
by a GET request, and both the user's new password and CSRF token are
communicated in the URL. Transmitting secrets in URLs is bad practice
because they may be made available to browser histories, browser
extensions, and traffic analytics providers. This creates the
possibility of attackers stealing these secrets. Next, another
development comment points out that the user's current password isn't
needed to change to a new password! A third revealing comment points out
to the attacker that the CSRF referer check functionality is incomplete
[ 4 ]{.CodeAnnotation aria-label="annotation4"} .
该程序存在多个问题。首先，它包含多个暴露开发者注释的部分。1.它指出更改用户密码的请求是通过GET请求发起的，并且用户的新密码和CSRF令牌都在URL中进行通信。在URL中传输密钥是不好的做法，因为它们可能会被浏览器历史记录、浏览器扩展和流量分析提供者公开。这会导致攻击者窃取这些秘密的可能性。其次，另一个开发注释指出，不需要用户当前的密码就可以更改新密码！第三个显露性评论指出，CSRF
referrer检查功能不完整。
You can see for yourself that the program employs two types of CSRF
protection, both of which are incomplete. The referer check function
checks only if the referer is present, not whether the referer URL is