MSR_LASTBRANCH_5: [804ff190] nt!WRMSR+0
MSR_LASTBRANCH_5: [8065ef6e] nt!KdpSysWriteMsr+1c
MSR_LASTBRANCH_4: [8065ef5e] nt!KdpSysWriteMsr+c
MSR_LASTBRANCH_4: [805374da] nt!_SEH_prolog+3a
MSR_LASTBRANCH_3: [805374a0] nt!_SEH_prolog+0
MSR_LASTBRANCH_3: [8065ef59] nt!KdpSysWriteMsr+7
MSR_LASTBRANCH_2: [8065ef52] nt!KdpSysWriteMsr+0
MSR_LASTBRANCH_2: [8060d364] nt!NtSystemDebugControl+356
MSR_LASTBRANCH_1: [8060d356] nt!NtSystemDebugControl+348
MSR_LASTBRANCH_1: [8060d0c3] nt!NtSystemDebugControl+b5
MSR_LASTBRANCH_0: [8060d0b6] nt!NtSystemDebugControl+a8
MSR_LASTBRANCH_0: [8060d0a1] nt!NtSystemDebugControl+93
MSR_LASTBRANCH_7: [8060d09c] nt!NtSystemDebugControl+8e
MSR_LASTBRANCH_7: [8060d08d] nt!NtSystemDebugControl+7f
MSR_LASTBRANCH_6: [8060d089] nt!NtSystemDebugControl+7b
MSR_LASTBRANCH_6: [8060d082] nt!NtSystemDebugControl+74
LBR bit is set now.
在以上结果中，TOS的值为5，也就是5号LBR寄存器
（MSR_LASTBRANCH_5）记录的是最近一次分支的From和To信息，
因此我们从这个寄存器开始显示，然后依次显示4、3、2、1、0、7、
6。这样的结果与栈回溯类似，上面的是后执行的。或者说，CPU的执
行路线是从下至上的。
对于显示LBR寄存器的各行，第1列是LBR寄存器的名称，每个寄
存器占2行，上面的是高32位，即To地址，下面的是低32位，即From地
址。以从MSR_LASTBRANCH_3向上的6行为例，8065ef59是
MSR_LASTBRANCH_3的低32位内容，nt!KdpSys- WriteMsr+7是地址
8065ef59所对应的符号。上面一行nt!_SEH_prolog+0是
MSR_LASTBRANCH_3的To地址所对应的符号。因此
MSR_LASTBRANCH_3记录的分支就是从nt!KdpSysWriteMsr+7向
nt!_SEH_prolog+ 0转移的。类似地，MSR_LASTBRANCH_4记录的是从
nt!_SEH_prolog+3a向nt!KdpSysWriteMsr+c转移的。
观察KdpSysWriteMsr的反汇编（见清单5-3）可以看到，
MSR_LASTBRANCH_3记录的是第3行汇编的CALL调用所导致的跳
转，它的低32位记录的是当前指令的地址（8065ef59），高32位记录的
是被调用函数的地址（805374a0）。类似地，MSR_LASTBRANCH_4
记录的是从nt!_SEH_prolog函数返回到KdpSysWriteMsr函数的跳转。
MSR_LASTBRANCH_5记录的是调用WRMSR函数的CALL指令所导致
的分支。
清单5-3 KdpSysWriteMsr函数的反汇编（局部）
lkd> u nt!KdpSysWriteMsr la
nt!KdpSysWriteMsr:
8065ef52 6a08            push    8
8065ef54 68d88c4d80      push    offset nt!RamdiskBootDiskGuid+0x74 (804d8
cd8)
8065ef59 e84285edff      call    nt!_SEH_prolog (805374a0)
8065ef5e 33f6            xor     esi,esi
8065ef60 8975fc          mov     dword ptr [ebp-4],esi
8065ef63 8b450c          mov     eax,dword ptr [ebp+0Ch]
8065ef66 ff7004          push    dword ptr [eax+4]
8065ef69 ff30            push    dword ptr [eax]
8065ef6b ff7508          push    dword ptr [ebp+8]
8065ef6e e81d02eaff      call    nt!WRMSR (804ff190)
下面的输出是作者在包含Kaby Lake微架构的第7代酷睿处理器上
（Windows 10本地内核调试会话）运行lbr命令的部分结果：
lkd> !lbr
Access LBR (Last Branch Recording) registers of IA CPU.
Version 1.2.8 by Raymond
Family 0x6 Model 0x8e detected
LBR stack: count 32, BaseFrom=0x680, BaseTo=0x6c0, BaseInfo=0xdc0, flags 0
x4
IA32_PERF_CAPABILITIES = 0x33c5
MSR_DEBUGCTL = 0x3
LBR bit is cleared now.
MSR_LASTBRANCH_TOS=d
MSR_LASTBRANCH_d (info): Cycle Count 28, HIDWORD 0
MSR_LASTBRANCH_d (to): [fffff800957e686c] nt!KdpSysWriteMsr+0
MSR_LASTBRANCH_d (from): [fffff80095c66d91] nt!KdSystemDebugControl+6c1 bM
ISPRED 0
MSR_LASTBRANCH_c (info): Cycle Count 20, HIDWORD 80000000
MSR_LASTBRANCH_c (to): [fffff80095c66d8a] nt!KdSystemDebugControl+6ba
MSR_LASTBRANCH_c (from): [fffff80095c66d7e] nt!KdSystemDebugControl+6ae bM
ISPRED 1
[省略很多行]
可以结合下面的反汇编信息来理解上面的分支信息：
lkd> u fffff80095c66d7e
nt!KdSystemDebugControl+0x6ae:
fffff800`95c66d7e 740a je  nt!KdSystemDebugControl+0x6ba (fffff800`95c66d8
a)
fffff800`95c66d80 b8040000c0      mov     eax,0C0000004h
fffff800`95c66d85 e90d010000 jmp nt!KdSystemDebugControl+0x7c7 
fffff800`95c66d8a 4883c208        add     rdx,8
fffff800`95c66d8e 418b0a          mov     ecx,dword ptr [r10]
fffff800`95c66d91 e8d6fab7ff      call    nt!KdpSysWriteMsr (fffff800`957e
686c)
c组寄存器描述的是je指令所做的条件跳转，从地址
fffff80095c66d7e到地址fffff80095c66d8a，其中的bMISPRED代表此次跳
转的分支与预测的分支不同，即分支预测失败。上面的d组寄存器记录
的是call指令所做的执行转移，info寄存器中的Cycle Count为28，代表自
上次更新LBR寄存器到这次更新之间的时钟周期数。
5.2.4 在Windows操作系统中的应用
在x64版本的Windows操作系统中，可以看到很多与LBR有关的设
施，首先，在NT内核中，可以看到如下函数（第一个）和全局变量
（后4个）：
0: kd> x nt!*lastBranch*
fffff803`d1108874 nt!KeCopyLastBranchInformation 
fffff803`d141e66c nt!KeLastBranchMSR 
fffff803`d141e39c nt!KiLastBranchToBaseMSR 
fffff803`d141e394 nt!KiLastBranchFromBaseMSR 
fffff803`d141e500 nt!KiLastBranchTOSMSR
在SDK的重要头文件winnt.h中，线程上下文结构体（_CONTEXT）
内新增了（与32位版本相比）如下与LBR有关的字段：
    //
    // Special debug control registers.
    //
    DWORD64 DebugControl;
    DWORD64 LastBranchToRip;
    DWORD64 LastBranchFromRip;
    DWORD64 LastExceptionToRip;
    DWORD64 LastExceptionFromRip;
} CONTEXT, *PCONTEXT;
或许当年设计以上设施时，设计者是想利用LBR设施增强系统的可
调试性，把每个线程的上次跳转信息保存到重要的线程上下文结构中。
这是非常好的想法，如果实现的话，调试时便又多了一个探寻的线索。
但令人遗憾的是，作者多年来多次观察上述LBR设施，发现线程上
下文中的LBR字段内容总是0，比如：
0:000> dt ntdll!_CONTEXT 0000000`0009e7c0 -yn Last
   +0x4b0 LastBranchToRip : 0
   +0x4b8 LastBranchFromRip : 0
   +0x4c0 LastExceptionToRip : 0
   +0x4c8 LastExceptionFromRip : 0
内核中记录MSR地址的全局变量也为0，似乎没有初始化过：
0: kd> dd nt!KiLastBranchToBaseMSR L1
fffff803`d141e39c  00000000
几年前，作者曾与微软的同行探讨这个问题，得知检查CPU特征
（是否支持LBR）的代码有瑕疵。几年过去了，最近观察Windows 10，
问题依旧。其成熟和在调试中发挥实际作用尚待时日。
 老雷评点 
要把一种新的调试设施做到如断点那样成熟所需绝非一时之
工，也绝非一人之力。
5.3 使用内存的分支记录
上一节介绍的使用MSR寄存器的分支记录机制有一个明显的局限，
那就是可以记录的分支次数太少，其应用价值比较有限。因为寄存器是
位于CPU内部的，所以靠增加LBR寄存器的数量来提高记录分支的次数
是不经济的。于是，人们很自然地想到设置一个特定的内存区供CPU来
保存分支信息。这便是分支踪迹存储（Branch Trace Store，BTS）机
制。
BTS允许把分支记录保存在一个特定的称为BTS缓冲区的内存区
内。BTS缓冲区与用于记录性能监控信息的PEBS缓冲区是使用类似的
机制来管理的，这种机制称为调试存储（Debug Store，DS）区，简称
为存储区。
PEBS的最初全称是Precise Event Based Sampling，即基于精确事件
的采样技术，是奔腾4处理器引入的一种性能监控机制。当选择的某个
性能计数器被设置为触发PEBS功能且这个计数器溢出时，CPU便会把
当时的寄存器状态以PEBS记录的形式保存到DS中的PEBS缓冲区内。每
条PEBS记录的长度是固定的，32位模式时为40个字节，包含了10个重
要寄存器（EFLAGS、EIP、EAX、EBX、ECX、EDX、ESI、EDI、
EBP和ESP）的值，IA-32e模式时为144字节，除了以上10个寄存器外，
还有R8～R15这8个新增的通用寄存器。
代号为Goldmont的微架构（在Skylake基础上开发的低功耗SoC版
本）扩展了PEBS技术，使其也可以基于不精确的事件进行采样。因
此，PEBS的全称也随之改为基于处理器事件的采样技术（Processor
Event Based Sampling）。
下一节将详细讨论性能监视功能。本节将集中讨论如何建立DS区
以及如何用它来记录分支信息。
5.3.1 DS区
下面我们仔细看看DS区的格式。因为当CPU工作在64位的IA-32e模
式时，所有寄存器和地址字段都是64位的，需要比工作在32位模式时更
大的存储空间，所以DS区的格式也有所不同。本节将以32位为例进行
介绍。
首先，DS区由以下3个部分组成。
管理信息区：用来定义BTS和PEBS缓冲区的位置和容量。管理信
息区的功能与文件头的功能很类似，CPU通过查询管理信息区来管
理BTS和PEBS缓冲区。
BTS缓冲区：用来以线性表的形式存储BTS记录。每个BTS记录的
长度固定为12个字节，分成3个双字（DWORD），第一个DWORD
是分支的源地址，第二个DWORD是分支的目标地址，第三个
DWORD只使用了第4位（bit 4），用来表示该记录是否是预测出
的。
PEBS缓冲区：用来以线性表的形式存储PEBS记录。每个PEBS记录
的长度固定为40个字节。
DS存储区的管理信息区的数据布局如图5-3所示。
图5-3 DS区的管理信息区
从图5-3中可以看到，DS管理信息区又分成了两部分，分别用来指
定和管理BTS记录和PEBS记录。
IA手册（18.6.8.2节）定义了DS区应该符合的如下条件。
第一，DS区（3个部分）应该在非分页（non-paged）内存中。也就
是说，这段内存是不可以交换到硬盘上的，以保证CPU随时可以向其写
入分支信息。
第二，DS区必须位于内核空间中。对于所有进程，包含DS缓冲区
的内存页必须被映射到相同的物理地址。也就是说，CR3寄存器的变化
不会影响DS缓冲区的地址。
第三，DS区不要与代码位于同一内存页中，以防CPU写分支记录
时会触发防止保护代码页的动作。
第四，当DS区处于活动状态时，要么应该防止进入A20M模式，要
么应该保证缓冲区边界内地址的第20位（bit 20）都为0。
第五，DS区应该仅用在启用了APIC的系统中，APIC中用于性能计
数器的LVT表项必须初始化为使用中断门，而不是陷阱门。
DS区的大小可以超过一个内存页，但是必须映射到相邻的线性地
址。BTS缓冲区和PEBS缓冲区可以共用一个内存页，其基地址不需要
按4KB边界对齐，只需要按4字节对齐。IA手册建议BTS和PEBS缓冲区
的大小应该是BTS记录（12字节）和PEBS记录（40字节）大小的整数
倍。
5.3.2 启用DS机制
了解了DS区的格式和内存要求后，下面我们看看如何启用DS机
制。具体步骤如下。
第一步，应该判断当前处理器对DS机制的支持情况，判断方法如
下。
先将1放入EAX寄存器，然后执行CPUID指令，EDX[21]（DS标
志）应该为1。