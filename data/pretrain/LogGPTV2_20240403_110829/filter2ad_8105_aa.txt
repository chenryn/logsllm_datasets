## 环境搭建
首先就是源码的下载
[github](https://github.com/jflyfox/jfinal_cms)
[gitee](https://gitee.com/jflyfox/jfinal_cms)
之后只需要配置一下Mysql数据库相关的配置就能够启动CMS
我们首先使用idea工具打开该项目源码， idea将会自动加载依赖
之后我们将`sql/jfinal_cms_v4.sql`中的数据库结构进行配置
我这里修改了一下，在前面加入了`create database jfinal_cms; / use
jfinal_cms;`这两条命令，可以直接将sql代码放入navicat进行运行配置
或者可以采用在mysql命令行创建库名之后使用`source`命令进行加载
最后就是配置Tomcat运行
## 源码分析
### 架构
我们首先关注一下该CMS的技术选择
  1. web框架：JFinal
  2. 模板引擎：beetl
  3. 数据库：mysql
  4. 前端：bootstrap框架
我们同样可以编写一个小工具针对pom.xml中的依赖，从maven仓库中探测处每一个依赖是否是具有漏洞的版本
### 审计
这里我们采用黑盒和白盒相结合的方法进行审计
我们从白盒角度考虑首先从后台管理开始寻找脆弱点(因为一般的系统，后台总是比主页更加脆弱)
关于admin的源码，可以定位到`com.jflyfox.modules.admin`包下
在其中的`AdminController`类中
其路由为`/admin`，默认页面调用了`index`方法，初次登陆，将会调用`reader`方法进行`/pages/admin/login.html`页面的渲染
这里的`reader`方法也就是调用了`com.jfinal.core.Controller`抽象类下的`render`方法，使用配置的模板引擎进行渲染操作
对于该项目的模板引擎的配置可以定位到`com.jflyfox.component.config.BaseConfig`类中的`configConstant`方法
可以知道配置的是`Beetl`这个模板引擎进行渲染
如果我们更深一层，这个Config类又是如何进行调用的呢？
主要是因为这个方法是实现了`JFinalConfig`类的方法，而在`com.jfinal.core.Config`类中的`configJFinal`方法是存在JFinalConfig类的方法调用的
包含有
  1. constant
  2. interceptor
  3. route
  4. plugin
  5. engine
  6. handler
这些配置
而对于这些的配置，是在JFinal框架初始化的时候进行配置的，也即是在`com.jfinal.core.JFinal`类中的init方法中
而对于init方法的调用主要是通过`JFinalFilter`这个Filter类来进行调用的
即也是通过在web.xml中进行该过滤器的配置进行添加的
上面主要是通过简单的分析了一下模板引擎的由来，来对项目结构进行熟悉，仅仅是一个小例子
所谓"知己知彼", 对项目的足够的熟悉，对于项目的漏洞挖掘来说也是不可或缺的一个重要部分
#### XSS1
在这个CMS中，针对XSS的防护几乎为零
在后台管理中，就是几乎没有任何的防御错误，各种的存储型XSS层出不穷，几乎是有框就有XSS
举几个例子
在注册一个用户的时候
如果在这些位置能够插入XSS payload就好了
但是经过尝试，不能够直接插入payload，会有格式的错误
我们看看是如何进行验证的
对应的`Controller`为`RegistController`类
这里将会使用beelt模板引擎对`template/bbs/regist/show_regist.html`文件进行渲染
这里存在有一个注册表单，点击注册，将会触发`onclick`事件，调用`oper_save`方法
也即是调用了同目录下的`show_regist.js`文件中的方法
这里存在多个判断条件，但是这里也仅仅是前端进行验证，我们可以通过抓包进行修改绕过这些验证，直接插入payload
虽然在后端也有着一定的限制，定位到`RegistController#save`方法中
这里并没有类似于js验证中对于邮箱的严格的正则过滤，所以我们可以通过抓包修改email的值，形成存储型XSS
当admin用户，进入后台管理的时候，将会在其首页中执行js代码
通过这种方式窃取cookie
#### XSS2
不同于前面直接在创建用户的位置插入payload
同样首先可以创建一个普通的用户，之后在该用户的基本信息设置位置插入payload
这里定位到后端代码就是`com.jflyfox.modules.front.controller.PersonController`类中
如果想要更改数据，根据`show_person.js`中的逻辑，主要是调用了`PersonController#save`方法进行信息的更新
在save方法中，并没有对用户的输入进行限制，直接就调用了`model.update`方法进行更新
在update方法中
前面一部分是用来sql语句
之后在后面建立连接，调用`Db.update`进行更新
也就成功将我们的输入存入了数据库中，形成了存储型XSS，因为这里是采用预编译的方式进行update操作，所以不存在sql注入的风险
我们可以随便找到一篇文章，进行评论，当访问主页的时候将会导致js代码执行
#### XSS3
上面两个都是后台操作的
该CMS对前端进行一定的XSS过滤操作
在任意一篇文章中的登陆框中插入payload
发现，这里是被转义了的，但是是否是完整的过滤，我们看看后端代码
我们可以定位到`CommentController#save`方法中，该方法是对评论保存的具体逻辑
主要是调用`CommentService#saveComment`方法进行保存，可以跟进一下
这里对XSS的处理，首先是`JFlyFoxUils#delScriptTag`方法
这里的作用是，删除掉`script / style`标签
之后就是调用commons-lang的escapeHtml方法来进行实体编码
然而，攻击者仍有可能利用一些漏洞来绕过escapeHtml方法的检查。下面是一些常见的绕过方法：
1, 利用HTML实体名称的漏洞：攻击者可能会使用HTML实体名称的漏洞来绕过escapeHtml方法。
2, 利用Unicode编码的漏洞：攻击者可能会使用Unicode编码的漏洞来绕过escapeHtml方法。
此外，攻击者还可能会使用HTML注释的漏洞、HTML属性的漏洞等来绕过escapeHtml方法的检查。
#### SSTI
这里既然使用了一个模板引擎进行渲染，使用的是beetl，没怎么使用过这种引擎，学习一下，看看是否具有SSTI的漏洞的产生
他的官方文档地址在
我这里简单记了一些相关关键的内容
**基本的模板语法**
模板的配置
默认配置在/org/beetl/core/beetl-default.properties
里，Beetl首先加载此配置文件，然后再加载classpath里的beetl.properties,并用后者覆盖前者。配置文件通过Configuration类加载，因此加载完成后，也可以通过此类API来修改配置信息
下面是一些需要关注的配置
    # 指定占位符
    DELIMITER_PLACEHOLDER_START=${
    DELIMITER_PLACEHOLDER_END=}
    # 指定定界符
    DELIMITER_STATEMENT_START=
    # 字符集
    TEMPLATE_CHARSET = UTF-8
    # 指定本地Class调用的安全策略