rules. ARE utilizes the association algorithms to gener-
ate the IoT device rules. There are two parameters affect-
ing the association algorithms, support and conﬁdence.
ARE will choose an item whose value is larger than the
minimum support and generate rules whose values are
larger than the minimum conﬁdence.
3 Rule Miner
Prior work [21, 25, 28, 37] used the banner grabbing
to discover and annotate devices. Developers manually
write those rules. Over its 20-year development, Nmap
has encouraged developers to write rules to expand its
library. In this paper, we propose a rule miner for au-
tomating the rule generation process without any human
efforts or training data.
It can derive additional rules
that are missed by developers. Moreover, the rule miner
learns new rules dynamically over time.
3.1 Transaction
A manufacturer usually plants its information into the
product’s application layer data. Also, there are many
(cid:100)(cid:396)(cid:258)(cid:374)(cid:400)(cid:258)(cid:272)(cid:410)(cid:349)(cid:381)(cid:374)
(cid:24)(cid:286)(cid:448)(cid:349)(cid:272)(cid:286)(cid:3)(cid:28)(cid:374)(cid:410)(cid:349)(cid:410)(cid:455)(cid:3)(cid:90)(cid:286)(cid:272)(cid:381)(cid:336)(cid:374)(cid:349)(cid:410)(cid:349)(cid:381)(cid:374)
(cid:18)(cid:381)(cid:374)(cid:410)(cid:286)(cid:454)(cid:410)(cid:286)(cid:396)
(cid:62)(cid:381)(cid:272)(cid:258)(cid:367)(cid:3)
(cid:24)(cid:286)(cid:393)(cid:286)(cid:374)(cid:282)(cid:286)(cid:374)(cid:272)(cid:455)
(cid:3)(cid:4)(cid:393)(cid:396)(cid:349)(cid:381)(cid:396)(cid:349)(cid:3)
(cid:4)(cid:367)(cid:336)(cid:381)(cid:396)(cid:349)(cid:410)(cid:346)(cid:373)
(cid:90)(cid:437)(cid:367)(cid:286)(cid:400)
Figure 2: Rule miner for automatic rule generation.
websites including product information, such as prod-
uct reviews and ofﬁcial documents. Such product infor-
mation plays a vital role in the rule miner. We deﬁne
the concept of “transaction” to associate the application-
layer data from an IoT device with the corresponding de-
scription of an IoT device in a webpage, and our rule
generation is based on the transaction set.
Deﬁnition 1 Transaction: a transaction is a pair of tex-
tual units, consisting of the application-layer data of an
IoT device and the corresponding description of an IoT
device from a webpage.
Based on the deﬁnition 1, the transaction set can be
formatted as T = {t1, t2, ..., tm }, where m is the num-
ber of transactions. Each transaction can be formulated
as ti = { pi, w j}, where ti contains two parts: (1) pi is
the application-layer data of the device i and (2) w j is the
description webpage j. We use the response data to ap-
proximately represent pi from the ith device. For the jth
webpage, multimedia information (e.g., advertisements,
audio, and videos) should be removed and the textual in-
formation is used to approximately represents w j.
For application-layer data pi, we convert the response
},
data into the sequence of search queries {q1
where k is the number of the query sequence (detailed
in Section 4.2). We use the search query to crawl web-
pages, and the search engine would return a search list
{w1,w2, ...,wl}. For the webpage w j, we extract the de-
vice annotation from its textual content (detailed in Sec-
tion 3.3). Note that compared with ﬁngerprinting and
banner grabbing techniques, our transaction collection is
an automated process without human effort.
, ...,qk
i
,q2
i
i
3.2 Overview of Rule Miner
Based on the extracted features (i.e., search queries and
device annotations) from the transaction set, which char-
acterize the association between a response data and
a webpage, we deﬁne a rule in its general format as
n} ⇒ {t j,v j, p j}. The value i denotes an IoT
{li
device i, , and li
n is the keywords extracted from
the application layer data. The tuple (t j,v j, p j) extracted
from the webpage j indicates the device type, device ven-
dor, and device product, respectively.
1 to li
, ...,li
,li
2
1
330    27th USENIX Security Symposium
USENIX Association
Entity
Device
Type
Vendor
Product
Table 1: Context textual terms.
Context terms
camera, ipcam, netcam, cam, dvr, router
nvr, nvs, video server, video encoder, video recorder
diskstation, rackstation, printer, copier, scanner
switches, modem, switch, gateway, access point
1,552 vendor names
[A-Za-z]+[-]?[A-Za-z!]*[0-9]+[-]?[-]?[A-Za-z0-9]
*∧[0-9]2,4[A-Z]+
(cid:115)(cid:286)(cid:374)(cid:282)(cid:381)(cid:396)
(cid:258)(cid:3)(cid:258)(cid:3)
(cid:258)(cid:3)(cid:258)(cid:3)
(cid:24)(cid:286)(cid:448)(cid:349)(cid:272)(cid:286)(cid:3)(cid:100)(cid:455)(cid:393)(cid:286)
(cid:258)(cid:3)(cid:258)(cid:3)
(cid:87)(cid:396)(cid:381)(cid:282)(cid:437)(cid:272)(cid:410)
(cid:115)(cid:286)(cid:374)(cid:282)(cid:381)(cid:396)
(cid:24)(cid:286)(cid:448)(cid:349)(cid:272)(cid:286)(cid:3)(cid:100)(cid:455)(cid:393)(cid:286)
(cid:87)(cid:396)(cid:381)(cid:282)(cid:437)(cid:272)(cid:410)
(cid:258)(cid:3)(cid:258)
(cid:115)(cid:286)(cid:374)(cid:282)(cid:381)(cid:396)
(cid:24)(cid:286)(cid:448)(cid:349)(cid:272)(cid:286)(cid:3)(cid:100)(cid:455)(cid:393)(cid:286)
(cid:115)(cid:286)(cid:374)(cid:282)(cid:381)(cid:396)
(cid:87)(cid:396)(cid:381)(cid:282)(cid:437)(cid:272)(cid:410)
(cid:258)(cid:3)(cid:258)(cid:3)
(cid:258)(cid:3)(cid:258)(cid:3)
(cid:258)(cid:3)(cid:258)(cid:3)
(cid:258)(cid:3)(cid:258)(cid:3)
(cid:87)(cid:396)(cid:381)(cid:282)(cid:437)(cid:272)(cid:410)
(cid:24)(cid:286)(cid:448)(cid:349)(cid:272)(cid:286)(cid:3)(cid:100)(cid:455)(cid:393)(cid:286)
(cid:258)(cid:3)(cid:258)
(cid:115)(cid:286)(cid:374)(cid:282)(cid:381)(cid:396)
(cid:87)(cid:396)(cid:381)(cid:282)(cid:437)(cid:272)(cid:410)
(cid:24)(cid:286)(cid:448)(cid:349)(cid:272)(cid:286)(cid:3)(cid:100)(cid:455)(cid:393)(cid:286)
(cid:258)(cid:3)(cid:258)
Figure 3: The local dependency of the device entity.
As deﬁned above, a rule is an association between a
few features extracted from the application-layer data
and the device annotation extracted from relevant web-
pages. Here we use A to denote the features extracted
from the application-layer data in IoT devices, and use
B to denote the device annotation extracted the descrip-
tion webpages. A rule can be described as the format
{A ⇒ B}. The goal of the rule miner is to learn the rules
of IoT devices in an automatic manner.
Figure 2 presents the overview of the rule miner, illus-
trating how it learns the rules of IoT devices. In the trans-
action set, every transaction contains the application-
layer data and the relevant webpages. To easily repre-
sent the annotation, the rule miner applies the uniﬁed
form (device type, vendor, product) for describing IoT
devices. We propose device entity recognition (DER) to
extract this information from webpages. DER is derived
from the NER technique in the NLP tools, and uses the
contexter and local dependency among words to identify
the device information. The rule miner uses the apriori
algorithm to learn the relationship between A and B. Al-
though the apriori algorithm is straightforward, it is able
to generate rules satisfying the inference process for dis-
covering and annotating IoT devices.
3.3 Device Entity Recognition
As aforementioned, a standard NER is not designed
for extracting IoT device information. If we directly ap-
ply NER to the description webpage, the precision is
poor due to the fact that NER is highly domain-speciﬁc.
We propose the device entity recognition (DER), derived
from NER. DER deﬁnes three classes (type, vendor,
product) to represent the device annotation, including
device types, vendors, and product names, respectively.
Relevant words in a webpage would be classiﬁed as one
label among three predeﬁned classes.
DER is a combination of the corpus-based NER and
rule-based NER. In the corpus-based NER, we are inter-
ested in device types and vendor names. Table 1 presents
21 words for IoT device types and 1,552 different terms
for vendor names. For a device type, we enumerate com-
mon device types, including router, camera, TV set, mo-
dem, and printer. They are typical consumer-oriented
IoT devices, which are connected to the Internet. For
a device vendor, we enumerate vendors from Wikipedia
and manually collect from ofﬁcial vendor websites. We
only need one hour to collect device types and vendors,
which is a very reasonable manual effort for the DER
module. If a new device type and vendor is added, we
will update the corpus list for DER. Note that the device
type and vendor can be easily expanded.
In the rule-based DER, we use regular expressions to
extract the product name entity. The challenge here is
that the number of product names is too large, and it
is impossible to enumerate all their naming patterns in
practice. We use the observation that in general a device
product name is the combination of letters and numbers
(perhaps containing “- ”). Hence, we use the regex to
cover the candidate product model entities. The 3rd row
in Table 1 shows the regex of product names. If a word
satisﬁes the regex, DER classiﬁes it into a product label.
In this way, DER can heuristically identify all possible
entities in webpages. However, this heuristic method has
poor performance on device annotation extraction, due
to high false positives especially in terms of device type
and product name. This is because an irrelevant webpage
may include at least one keyword of device type such as
“switch” or a phrase that meets the requirement of regex
for a product name. To address this problem, DER lever-
ages the local dependency between entities for accurate
device entity recognition.
Our observation is that true IoT entities always have
strong dependence upon one another. Figure 3 presents
the order of true IoT entities appearing in a webpage.
Two kinds of local dependency usually occur: (1) the
vendor entity ﬁrst appears, followed by the device-type
entity, and ﬁnally the product entity; (2) the vendor en-
tity ﬁrst appears, and the product entity appears second
without any other object between the vendor entity, and
the device-type entity follows. If the relationship is es-
tablished and matches those two dependency rules, DER
will select the tuple (device type, vendor, product) as the
USENIX Association
27th USENIX Security Symposium    331
Table 2: A few example rules learned for IoT devices.
Illustrating Rules
} ⇒ {IPCam, Panasonic,KX-HGW500}
{
{
{
{
“Panasonic”,
“KX-HGW500-1.51”
“TL-WR1043ND”,
“Wireless”,“Gigabit”,
“˘00a9”,“Webserver”
“Welcome”,“ZyXEL”,
“P-660HN-51”,“micro httpd”
“Juniper”,“Web”,
“Device”,“Manager”,
“SRX210HE”,“˘00a9”
{“Brother”,“HL-3170CDW”,
“seriesHL-3170CDW”,
“seriesPlease”,“debut/1.20”
} ⇒ { Router, TP-Link, WR1043N }
} ⇒ { Router, Zyxel, P-600HN }
} ⇒ { Gateway, Juniper, SRX210 }
} ⇒ { Printer, Brother, HL-3170 }
device annotation. Otherwise, we exclude the webpage
from the transaction set.
For every transaction, a device annotation can be clas-
siﬁed into the following two categories:
• The tuple (device type, vendor, product) is com-
plete. In this case, we use two entity appearing se-
quence orders to eliminate the multiple duplicate la-
bels.
• The product entity cannot be recognized in the for-
mat (device type, vendor, null). Among multiple
duplicate labels, DER selects the device annotations
in the following order:
the vendor entity ﬁrst ap-
pears, and then the device-type entity follows.
3.4 Rule Generation
,q2
i
,q2
i
i
, ...,qk
i
The rule miner uses the apriori algorithm to derive
the relationship between search queries extracted from
the response data (q1
) and device annotation
i
extracted from a webpage (t j,v j, p j) in the transaction
} ⇒
set. The general form of the rule is: {q1
{t j,v j, p j}. When the response data holds the value q,
we infer {t,v, p} as its device annotation. ARE is able to
discover an IoT device by simply and efﬁciently match-
ing its response data with the rules in the library.
, ...,qk
i
Parameters. There are two parameters for the apriori
algorithm: support and conﬁdence. The argument sup-
port is used to indicate the frequency of the variable ap-
pearing, and the argument conﬁdence is the frequency of
the rules under the condition in which the rule appears.
In the transaction set T = {t1,t2, ...,tn}, we can calculate
those two parameters of the rule A ⇒ B as follows:
sup(A) = | n∑
i
A ∈ ti|/|T|
con f (A ⇒ B) = sup(A
(cid:2)
B)/sup(A)
The apriori algorithm ﬁrst selects the frequent tuples
in the dataset and discards the item whose support value
is smaller than the support threshold. Then, the al-
gorithm derives the rules whose conﬁdence values are
larger than the conﬁdence threshold. The algorithm can
generate all rules with support ≥ sup(A) and conﬁdence
≥ con f (A ⇒ B). Note that the use of the parameter
sup(A) slightly differs from the one in the conventional
apriori algorithm. In the transaction set, we use search
query to eliminate the irrelevant items for the rule A ⇒ B.
Thus, the transaction set includes the underlying map-
ping between part A and part B.
We conduct the experiment to validate the threshold
of the apriori algorithm. We randomly choose an IP
address chunk to generate the data set, which contains
2,499 transactions across 250 application response pack-
ets, across 5 device types (printer, access point, router,
modem, and camera), 48 vendors and 341 products. To
avoid the bias, we remove the tuples if they only appear
one time in our data set. We observe that the settings of
sup(A) = 0.1% and con f (A ⇒ B) = 50% work well in
practice.
For data mining, the parameter selection of the apri-
ori algorithm depends on the data set. When the device
annotation becomes larger and more diverse, there are
more infrequent rules in the transaction set. The param-
eter sup(A) should further decrease to identify those in-
frequent pairs (A,B), which may be not-so-obvious. For
the conﬁdence of a rule con f (A ⇒ B), it is desirable
that rules always hold with few false positives. When
the conﬁdence increases, we can achieve high precision
but missing some rules. The threshold of the parame-
ter con f (A ⇒ B) should further decrease if applications
would like to collect more device annotations.
Conﬂict Rules. When multiple rules have the same
tuple {q1,q2, ...,qi} but different device annotations
{t,v, p}, they conﬂict with one another. When two dif-
ferent vendors have similar descriptions for their prod-
ucts, rules would have conﬂicts with each other. In this
case, manual observation can distinguish those conﬂict
rules for the application response packets. Similar to the
Nmap tool, ARE does not remove those conﬂict rules.
When conﬁdences of the rules are approximately close
to one another, we output each device annotation with
a conﬁdence. For instance, given the rules, A ⇒ B and
A ⇒ C, when the application matches the condition A,
the output is 50% of the annotation B or C. Otherwise,
we use the majority voting to output the highest conﬁ-
dence of the rules.
Example Rules. Table 2 shows a few example rules
automatically learned by the rule miner based on the
transaction set. The left part is the sequence of words ex-
tracted from the response data, acting as the search query.
The right part is the device information, including device
332    27th USENIX Security Symposium
USENIX Association
type, vendor, and product. Some rules seem apparent and