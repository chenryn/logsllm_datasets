这里的修订号也是一个链接，但是这次链接到的页面显示的是在那
个修改本中所做的变更细节，使用的是存储库浏览器
ViewVC（http://www.viewvc.org/），请看下图。
从这里可以看到哪些文件发生了变化，如果点击"modified"，能够看
到代码的差异，如下页的第二幅图所示。
我们已经看到，Contribulyzer的信息布局满足了我们需要对贡献者
的工作作出回顾的需求。有一个关于那个人所做工作种类的概览，
然后是每个贡献的高层次概述，最后，是代码级别的详细描述。
但是这些信息是如何进入Contribulyzer的呢？
228
---
## Page 230
Be Edt Ye
Does Hep
t+
ents
Repesitery:|sn
Go
Revision20727
20727
Oate
parsLrer
ViewVC的修订页
snlDiTot/bra
Hgtory
3oes
Help
vedfor15MC
OCOAm
erysvs
Diffof
/branches/merge-tracking/subversion/libsvn_fs_fs/tree.c
F(se=SOUEDONE）
E(sqiteeu (= SOUTE DONE)
12
te3e
Wm_en
Calored Dit
229
---
## Page 231
ViewVC文件差异页面
计策
遗憾的是，Contribulyzer并不是一个奇妙的人工智能程序。它之所
以知道谁作出了什么贡献，唯一的原因是我们告诉了它。要让每个
人都能够老实地告诉这个工具，有两个计策：
：额外并销要尽量低。
：向人们证明这点额外并销是值得的。
满足第一个条件很容易。Contribulyzer的数据是从Subversion的每个
修订日志信息中取得的。编写这些东西时总有一定的规则，例如对
变更所影响的每个代码符号都要命名。如果要支持Contribulyzer，
只需要增加一个新规则：在维护人员将变更放到库中的时候，如果
变更是由其他人提交的，需要有一个标准方法说明变更是由谁来提
交的。
标准很简单。贡献类型一共是4种，我们使用其中一个动词，后面
加上"by："，然后是对变更作出这种贡献的贡献者的姓名。大多数
变更都只有一个贡献者，如果有多个贡献者，可以都列在贡献者那
一行。
Patch by:name_1_maybe_with_email_address
name_2_maybe_with_email_address
Found by:name_3_maybe_with_email_address
Review by:etc...
Suggested by:etc...
（这些规则在http://subversion.tigris.org/hacking.html#crediting有详细
说明。）
很容易说服人们遵守新标准的一个原因是，在某种程度上，它实际
上使编写日志信息的工作更简单了。我们以前要把变更和贡献者联
230
---
## Page 232
系起来，使用的是各种杂乱的方式，每次在提交贡献者的代码时，
必须考虑如何表达他们的责献。这次可能是这样的：
删除由r20091引入的允余代码。来自由
name_1_maybe_with_email_address提交的补丁。
下一次可能文会变成这样的：
修复batonhandoff中的缺陷。（感谢某某发送了这个补丁。）
虽然新规则需要人们再去学一些东西，但是在学会以后实际上是能
够节省工作量的：因为大家都同意按照标准方式去做，谁也不用再
花时间考虑如何组织词语了。
但是，在项目中引入一个新标准并不总是一件容易的事情。如果能
够同时满足上述第2个条件，也就是在让人们作出牺牲之前能够看
到收益，事情就容易多了。幸运的是，我们做到了那一点。
Subversion的日志记录是可以编辑的（不像某些版本控制系统，日
志记录是不可修改的）。这意味着，在按照新标准编写了
Contribulyzer代码来处理日志信息格式后，可以倒回去修复项目现
存的所有日志，让这些日志符合新标准，然后产生一个事后的
Contribulyzer页面，包含项目的整个历史。我们是分两步做的：首
先，在日志信息中找到所有“@"符号，以便找出我们提到某人邮件
地址的地方（在把变更归于某人的时候，我们常常使用那个人的邮
箱地址），然后，在第一次搜索得到的结果中再次搜索，只搜索姓
名一—不包括邮箱地址。结果日志信息列表的数量大约是一千条，
在几位志愿者的帮助下（再加上几个相当复杂的编辑宏），我们用
了一个晚上就把这些信息都转换成新格式了。
在提出新标准的同时也证明了这个标准能够给我们带来的价值：在
向团队发布Contribulyzer之后，我们把整个Contribulyzer页面都运行
起来了。马上就看到了收益，相比之下，制作新日志信息格式的需
录只能算是很小的付出了。
Contribulyzer的限制
有一句著名的格言，在开源项目中广泛使用，但是实际上早在开源
项目出现之前就已经出现了：
完美不可与优秀为敌。
231
---
## Page 233
Contribulyzer能够做比现在多得多的事情。它实际上是一个完整的
活动跟踪系统的雏形。在理想世界中，它将从邮件列表资料、缺陷
跟踪系统和修订控制系统中收集信息。我们能够从记录贡献者的日
志信息转到贡献者与其他开发人员讨论变更的邮件列表线索中
反之亦然，也就是从邮件列表线索转到提交中。类似地，我们可以
收集统计数据，看看某人在缺陷跟踪系统中的记录有多少被提交或
者进入了重要的讨论线索中的统计数据（这样可以告诉我们，那个
人似乎是个有效的汇报人，提交的缺陷报告在今后应当重点考
虑）。
关键不是要做一个评分系统，那样的系统没有用，甚至可能起到破
坏作用，因为它不免会给人带来相互攀比的压力，诱使人们在参与
者之间进行量化比较。相反，关键之处应当是，在关注某人时，能
够很容易找出有关她的更多资料。
每个参加并源项目的人都会留下足迹。即使是在邮件列表中问一个
问题也会留下至少一条信息，如果那个讨论线索继续讨论下去，还
可能留下多条信息。但是现在这些信息都是隐含的：为了相对完整
地了解某个人的活动，必须手工遍历资料库、数据库和修订控制历
史。
在自动查找这些痕迹上，Contribulyzer向前迈出了一小步。我在本
章包含这个例子是想说明即使一小步自动化工作也可能给团队的协
作能力带来显署差异。虽然Contribulyzer仅包含修订控制记录，但
仍旧节省了我们大量的时间和脑力，特别是因为日志信息常常包含
到相关的缺陷跟踪记录和邮件列表线索的链接一一所以，如果能够
迅速找到适当的日志信息，战争就已经打胜一半了。
我不想把Contribulyzer的功劳都归到自己身上，当然，运作开源项
目的很多方面它还没有提及。但是在评价潜在的新维护人员方面
它极大地减少了工作量，让我们从一开始就能更好地做出这类评
估。对于一天的编码投入，这个回报还不错。
编写源代码很少会像编写代码那样有成就感，但是一般来说都是值
得投入的。如果正确地识别出问题并且看到一个清晰的技术解决方
案，那么在软件的生命中，一次性的工作能够带来持续的回报。
提交邮件和低落的积极性
232
---
## Page 234
接下来的一个例子显示的是当团队不重视工具的使用时会出现什么
情况。这个例子讲述的是一个看上去无关紧要的界面决定对人们的
行为会产生多么大的影响。首先，看一些背景知识。
大多数并源项目都有一个提交邮件列表。每当有变更进入主存储库
时，列表都会收到一个邮件，邮件由存储库自动产生。典型地，每
个邮件都会显示变更的作者、变更时间、相关日志信息，并一行
一
行地显示变更内容（是用前面提到的“补丁"形式表达的，但是由于
历史的原因，在这里补丁被称为"di"）。邮件可能还包括URL，对
变更或变更的一些子部件提供永久的引用地址。
下面是一个Subversion项目的提交邮件：
From:PI:EMAIL
Subject:svn commit:r30009-trunk/subversion/libsvn_wc
To:PI:EMAIL
Date:Sat, 22 Mar 2008 13:54:38-0700
Author:dionisos
Date:Sat Mar 22 13:54:37 2008
New Revision:30009
Log:Fix issue #3135 (property update on locally deleted file breaks WC)
* subversion/libsvn_wc/update_editor.c (merge_file):Only fill WC file
related entry cache-fields if the cache will serve any use (ie when the
entry is schedule-normal).
Modified:trunk/subversion/libsvn_wc/update_editor.c
Modified:trunk/subversion/libsvn_wc/update_editor.c
URL:http://svn.collab.net/viewvc/svn/trunk/subversion/libsvn_wc/update
editor.c?pathrev=30009&r1=30008&r2=30009
233
---
## Page 235
--- trunk/subversion/libsvn_wc/update_editor.c Sat Mar 22 07:33:07
2008(r30008)
+++ trunk/subversion/libsvn_wc/update_editor.c Sat Mar 22 13:54:37
2008 (r30009)
@@-2621,8 +2621,10 @@ merge_file (svn_wc_notify_state_t *conten
SVN_ERR (svn_wc__loggy_entry_modify (& log_accum,
adm_access,fb- >path, & tmp_entry, flags, pool);
- /* Log commands to handle text-timestamp and working-size */
- if (lis_locally_modified)
+ /* Log commands to handle text-timestamp and working-size
+ if the file is-or will be-unmodified and schedule-normal */
+ if (!is_locally_modified& &
+ (fb- >added |entry- >schedule == svn_wc_schedule_normal)
/* Adjust working copy file unless this file is an allowed obstruction.*/
如果能够正确地使用，提交邮件对于软件项目来说是一个强大的协
作工具。它们是自动化信息流和人类参与的完美结合。每个进入并
发人员邮箱的变更都是一个易于理解、相互没有关联的单元：一封