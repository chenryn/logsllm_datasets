### Free Actionable Resources for OSINT Investigations

This is a curated and regularly updated collection of free, actionable resources for conducting Open-Source Intelligence (OSINT) investigations. 

**GitHub Repository:**
- [Ph055a/OSINT_Collection](https://github.com/Ph055a/OSINT_Collection)

---

### OSINT Search Engines

#### Baidu Search
- **Reference:**
  - [Baidu Advanced Search (in English)](http://www.baiduinenglish.com/Search-Tips)
  - [Baidu Search Tips by SEO Mandarin](https://www.seomandarin.com/baidu-search-tips.html)

#### Google Search Operators
- **Exact Match:** `"search term"`  
  - Example: `"steve jobs"`
- **OR Operator:** `X OR Y` or `X | Y`  
  - Example: `jobs OR gates` / `jobs | gates`
- **AND Operator:** `X AND Y`  
  - Example: `jobs AND gates`
- **Exclude Term:** `-term`  
  - Example: `jobs -apple`
- **Wildcard:** `*`  
  - Example: `steve * apple`
- **Grouping:** `( )`  
  - Example: `(ipad OR iphone) apple`
- **Price Search:** `$` or `â‚¬`  
  - Example: `ipad $329`
- **Dictionary Definition:** `define:word`  
  - Example: `define:entrepreneur`
- **Cached Page:** `cache:url`  
  - Example: `cache:apple.com`
- **File Type:** `filetype:extension` or `ext:extension`  
  - Example: `apple filetype:pdf` / `apple ext:pdf`
- **Site-Specific Search:** `site:domain`  
  - Example: `site:apple.com`
- **Related Sites:** `related:domain`  
  - Example: `related:apple.com`
- **Title Search:** `intitle:word`  
  - Example: `intitle:apple`
- **All Title Words:** `allintitle:words`  
  - Example: `allintitle:apple iphone`
- **URL Search:** `inurl:word`  
  - Example: `inurl:apple`
- **All URL Words:** `allinurl:words`  
  - Example: `allinurl:apple iphone`
- **Text Search:** `intext:word`  
  - Example: `intext:apple`
- **All Text Words:** `allintext:words`  
  - Example: `allintext:apple iphone`
- **Proximity Search:** `AROUND(X)`  
  - Example: `apple AROUND(4) iphone`
- **Weather Search:** `weather:location`  
  - Example: `weather:san francisco`
- **Stocks Search:** `stocks:ticker`  
  - Example: `stocks:aapl`
- **Map Search:** `map:location`  
  - Example: `map:silicon valley`
- **Movie Search:** `movie:title`  
  - Example: `movie:steve jobs`
- **Unit Conversion:** `value in unit`  
  - Example: `$329 in GBP`
- **News Source:** `source:news_source`  
  - Example: `apple source:the_verge`
- **Autocomplete Wildcard:** `_`  
  - Example: `apple CEO _ jobs`
- **Range Search:** `#..#`  
  - Example: `wwdc video 2010..2014`
- **Anchor Text Search:** `inanchor:text`  
  - Example: `inanchor:apple iphone`
- **All Anchor Text:** `allinanchor:words`  
  - Example: `allinanchor:apple iphone`
- **Location Search:** `loc:placename`  
  - Example: `loc:"san francisco" apple`

**References:**
- [Huge Collection of CheatSheet - Google](https://github.com/JonnyBanana/Huge-Collection-of-CheatSheet/tree/master/Google)
- [Exploit Database - Google Hacking Database](https://www.exploit-db.com/google-hacking-database)

#### Yandex Search
- **Standard Boolean Operators:** Similar to Google operators.
- **Reference:**
  - [Yandex Direct Keywords and Symbols](https://yandex.com/support/direct/keywords/symbols-and-operators.html)

---

### OSINT Social Media Tools

#### Facebook
- **Graph.tips/Beta:** Automatically advanced searches for Facebook profiles.
  - [Link](graph.tips/beta)
- **Who Posted What?** Find posts on Facebook.
  - [Link](whopostedwhat.com)
- **IntelTechniques:** Various tools for analyzing Facebook profiles/pages.
  - [Link](inteltechniques.com/menu.html)
- **Facebook Intersect Search Tool:** Conduct Facebook intersect searches across multiple variables.
  - [Link](osintcombine.com/facebook-intersect-search-tool)
- **Facebook Live Map:** Live broadcasts around the world.
  - [Link](facebook.com/livemap)
- **FBDown.net:** Download public Facebook videos.
  - [Link](fbdown.net)
- **PeopleFindThor:** Graph searches.
  - [Link](peoplefindthor.dk)
- **Search Is Back!** Graph searches.
  - [Link](searchisback.com)
- **Search Tool:** Find accounts by name, email, screen name, and phone.
  - [Link](netbootcamp.org/facebook.html)
- **StalkScan:** Automatic advanced searches.
  - [Link](stalkscan.com)

#### Instagram
- **Gramfly:** View interactions and activity of Instagram users.
  - [Link](gramfly.com)
- **StoriesIG:** Tool for downloading Instagram stories.
  - [Link](storiesig.com)
- **Save Instagram Stories:** Allows you to do a username search for stories already saved.
  - [Link](isdb.pw/save-instagram-stories.html)

#### LinkedIn
- **Socilab:** Visualize and analyze your own LinkedIn network.
  - [Link](socilab.com)
- **LinkedIn Overlay Remover:** Removes the overlay that displays over a LinkedIn profile.
  - [Link](addons.mozilla.org/nl/firefox/addon/linkedin-overlay-remover/)

#### Reddit
- **F5Bot:** Sends you an email when a keyword is mentioned on Reddit.
  - [Link](intoli.com/blog/f5bot/)

#### Snapchat
- **Snap Map:** Searchable map of geotagged snaps.
  - [Link](map.snapchat.com)

#### Tumblr
- **Tumblr Originals:** Find original posts per Tumblr, thus excluding reblogs.
  - [Link](studiomoh.com/fun/tumblr_originals)

#### TikTok
- **TikTok Kapi:** Search TikTok by hashtag.
  - [Link](tiktokapi.ga)

#### Twitter
- **Botcheck:** Check Twitter bots.
  - [Link](botcheck.me)
- **Botometer:** Check Twitter bots.
  - [Link](botometer.iuni.iu.edu)
- **InVID Verification Plugin:** Advanced search by time interval.
  - [Link](www.invid-project.eu/verify)
- **One Million Tweet Map:** Tweets map per locations up to 6 hours old, with keyword search option.
  - [Link](onemilliontweetmap.com)
- **Treeverse:** Chrome extension to visualize Twitter conversations.
  - [Link](t.co/hGvska63Li)
- **Tweetreach:** Find reach of tweets.
  - [Link](tweetreach.com)
- **TwitterAudit:** Check Twitter bots.
  - [Link](twitteraudit.com)
- **Twitter Video Downloader:** Download posted Twitter videos.
  - [Link](twittervideodownloader.com)
- **Twitter Advanced Search:** Search Twitter by date, keywords, etc.
  - [Link](twitter.com/search-advanced)
- **Twitter Geobased Search:** Twitter geocoord search.
  - [Link](qtrtweets.com/twitter/)
- **Twint:** Python Twitter scraping tool.
  - [Link](github.com/twintproject/twint)
- **Twlets:** Download tweets, followers & likes.
  - [Link](twlets.com)
- **Quarter Tweets:** Geobased Twitter search.
  - [Link](qtrtweets.com/twitter)
- **T:** CLI tool for Twitter.
  - [Link](github.com/sferik/t)

#### YouTube
- **Amnesty YouTube Dataviewer:** Reverse image search & exact uploading time.
  - [Link](amnestyusa.org/sites/default/custom-scripts/citizenevidence)
- **Geo Search Tool:** Search YouTube on location.
  - [Link](youtube.github.io/geo-search-tool/search.html)
- **YouTube Geofind:** Search YouTube on location, topic, channel.
  - [Link](mattw.io/youtube-geofind/location)
- **YouTube-DL:** Python tool to download from a variety of sources.
  - [Link](rg3.github.io/youtube-dl/)

**References:**
- [Google Document - OSINT Tools](https://docs.google.com/document/d/1BfLPJpRtyq4RFtHJoNpvWQjmGnyVkfE2HYoICKOGguA/edit#heading=h.dgrpsgxju1wa)

---

### Osquery

**Overview:**
Osquery is a tool that exposes an operating system as a high-performance relational database, enabling developers to write SQL-based queries that explore operating system data.

**Example Queries:**
- **Top 10 Largest Processes by Resident Memory Size:**
  ```sql
  SELECT pid, name, uid, resident_size FROM processes ORDER BY resident_size DESC LIMIT 10;
  ```
- **Top 10 Most Active Processes:**
  ```sql
  SELECT COUNT(pid) AS total, name FROM processes GROUP BY name ORDER BY total DESC LIMIT 10;
  ```
- **New Processes Listening on Network Ports:**
  ```sql
  SELECT DISTINCT process.name, listening.port, listening.address, process.pid FROM processes AS process JOIN listening_ports AS listening ON process.pid = listening.pid;
  ```
- **Suspicious Outbound Network Activity:**
  ```sql
  SELECT s.pid, p.name, local_address, remote_address, family, protocol, local_port, remote_port FROM process_open_sockets s JOIN processes p ON s.pid = p.pid WHERE remote_port NOT IN (80, 443) AND family = 2;
  ```
- **Processes Running Without Binary on Disk:**
  ```sql
  SELECT name, path, pid FROM processes WHERE on_disk = 0;
  ```
- **Specific Indicators of Compromise (IOCs):**
  ```sql
  SELECT * FROM file WHERE path = '/dev/ptmx0';
  SELECT * FROM apps WHERE bundle_identifier = 'com.ht.RCSMac' OR bundle_identifier LIKE 'com.yourcompany.%' OR bundle_package_type LIKE 'OSAX';
  SELECT * FROM launchd WHERE label = 'com.ht.RCSMac' OR label LIKE 'com.yourcompany.%' OR name = 'com.apple.loginStoreagent.plist' OR name = 'com.apple.mdworker.plist' OR name = 'com.apple.UIServerLogin.plist';
  ```
- **New Kernel Modules:**
  ```sql
  SELECT name FROM kernel_modules;
  ```
- **Processes Masquerading as Legitimate Windows Processes:**
  ```sql
  SELECT * FROM processes WHERE LOWER(name)='lsass.exe' AND LOWER(path)!='c:\\windows\\system32\\lsass.exe' AND path!='';
  SELECT name FROM processes WHERE pid=(SELECT parent FROM processes WHERE LOWER(name)='services.exe') AND LOWER(name)!='wininit.exe';
  SELECT * FROM processes WHERE LOWER(name)='svchost.exe' AND LOWER(path)!='c:\\windows\\system32\\svchost.exe' AND LOWER(path)!='c:\\windows\\syswow64\\svchost.exe' AND path!='';
  SELECT name FROM processes WHERE pid=(SELECT parent FROM processes WHERE LOWER(name)='svchost.exe') AND LOWER(name)!='services.exe';
  ```
- **Hashes of Accessibility Tools:**
  ```sql
  SELECT * FROM hash WHERE (path='c:\\windows\\system32\\osk.exe' OR path='c:\\windows\\system32\\sethc.exe' OR path='c:\\windows\\system32\\narrator.exe' OR path='c:\\windows\\system32\\magnify.exe' OR path='c:\\windows\\system32\\displayswitch.exe') AND sha256 IN (SELECT sha256 FROM hash WHERE path='c:\\windows\\system32\\cmd.exe' OR path='c:\\windows\\system32\\WindowsPowerShell\\v1.0\\powershell.exe' OR path='c:\\windows\\system32\\explorer.exe') AND sha256!='e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855';
  ```
- **Timestamp Inconsistency:**
  ```sql
  SELECT path, fn_btime, btime FROM ntfs_file_data WHERE device="\\.\PhysicalDrive0" AND partition=3 AND directory="/Users//Desktop/dir" AND fn_btime != btime;
  SELECT filename, path FROM ntfs_file_data WHERE device="\\.\PhysicalDrive0" AND partition=2 AND path="/Users//Downloads" AND fn_btime > ctime OR btime > ctime;
  ```
- **Directory Unused Filename Entries:**
  ```sql
  SELECT parent_path, filename, slack FROM ntfs_indx_data WHERE parent_path="/Users//Desktop/test_dir" AND slack!=0;
  ```

**References:**
- [Using osquery for Remote Forensics](https://blog.trailofbits.com/2019/05/31/using-osquery-for-remote-forensics/)
- [Trail of Bits osquery Extensions](https://github.com/trailofbits/osquery-extensions)
- [Introduction to osquery for Threat Detection and DFIR](https://blog.rapid7.com/2016/05/09/introduction-to-osquery-for-threat-detection-dfir/)
- [Awesome osquery](https://github.com/sttor/awesome-osquery)
- [osquery Packs](https://github.com/osquery/osquery/tree/master/packs)
- [Mac OS X Live Forensics with osqueryi](https://lockboxx.blogspot.com/2016/05/mac-os-x-live-forensics-109-osqueryi.html)

---

### Package Managers

#### Linux
- **APT (Debian, Ubuntu, Mint)**
  - **Install New Package Repository:**
    ```sh
    apt-get install pkg
    ```
  - **Install New Software from Package File:**
    ```sh
    dpkg -i pkg
    ```
  - **Update Existing Software:**
    ```sh
    apt-get install pkg
    ```
  - **Remove Unwanted Software:**
    ```sh
    apt-get remove pkg
    ```
  - **Update Package List:**
    ```sh
    apt-get update
    ```
  - **Update System:**
    ```sh
    apt-get upgrade
    ```
  - **Search by Package Name:**
    ```sh
    apt-cache search pkg
    ```
  - **Search by Pattern:**
    ```sh
    apt-cache search pattern
    ```
  - **Search by File Name:**
    ```sh
    apt-file search path
    ```
  - **List Installed Packages:**
    ```sh
    dpkg -l
    ```
  - **List Repositories:**
    ```sh
    cat /etc/apt/sources.list
    ```
  - **Add Repository:**
    ```sh
    vi /etc/apt/sources.list
    ```
  - **Remove Repository:**
    ```sh
    vi /etc/apt/sources.list
    ```

- **ZYPP (openSUSE)**
  - **Install New Package Repository:**
    ```sh
    zypper install pkg
    ```
  - **Install New Software from Package File:**
    ```sh
    zypper install pkg
    ```
  - **Update Existing Software:**
    ```sh
    zypper update -t package pkg
    ```
  - **Remove Unwanted Software:**
    ```sh
    zypper remove pkg
    ```
  - **Update Package List:**
    ```sh
    zypper refresh
    ```
  - **Update System:**
    ```sh
    zypper update
    ```
  - **Search by Package Name:**
    ```sh
    zypper search pkg
    ```
  - **Search by Pattern:**
    ```sh
    zypper search -t pattern pattern
    ```
  - **Search by File Name:**
    ```sh
    zypper wp file
    ```
  - **List Installed Packages:**
    ```sh
    zypper search -is
    ```
  - **List Repositories:**
    ```sh
    zypper repos
    ```
  - **Add Repository:**
    ```sh
    zypper addrepo path name
    ```
  - **Remove Repository:**
    ```sh
    zypper removerepo name
    ```

- **YUM (Fedora)**
  - **Install New Package Repository:**
    ```sh
    yum install pkg
    ```
  - **Install New Software from Package File:**
    ```sh
    yum localinstall pkg
    ```
  - **Update Existing Software:**
    ```sh
    yum update pkg
    ```
  - **Remove Unwanted Software:**
    ```sh
    yum erase pkg
    ```
  - **Update Package List:**
    ```sh
    yum check-update
    ```
  - **Update System:**
    ```sh
    yum update
    ```
  - **Search by Package Name:**
    ```sh
    yum list pkg
    ```
  - **Search by Pattern:**
    ```sh
    yum search pattern
    ```

- **URPMI (Mandriva)**
  - **Install New Package Repository:**
    ```sh
    urpmi pkg
    ```
  - **Install New Software from Package File:**
    ```sh
    urpmi pkg
    ```
  - **Update Existing Software:**
    ```sh
    urpmi pkg
    ```
  - **Remove Unwanted Software:**
    ```sh
    urpme pkg
    ```
  - **Update Package List:**
    ```sh
    urpmi.update -a
    ```
  - **Update System:**
    ```sh
    urpmi --auto-select
    ```
  - **Search by Package Name:**
    ```sh
    urpmq pkg
    ```
  - **Search by Pattern:**
    ```sh
    urpmq pattern
    ```