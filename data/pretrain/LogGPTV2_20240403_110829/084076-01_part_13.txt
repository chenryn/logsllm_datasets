resources: ["pods", "pods/log"]
verbs: ["get", "list"]
针对具体资源（使用 resourceNames 指定单个具体资源）的某些请求，也可以通过使用 get、
delete、update、patch等进行授权，比如，只能对一个叫my-configmap的configmap进行get和update
操作：
kind: Role
apiVersion: rbac.authorization.K8S.io/v1
metadata:
namespace: default
name: configmap-updater
rules:
- apiGroups: [""]
resources: ["configmaps"]
134 | 再也不踩坑的Kubernetes实战指南
resourceNames: ["my-configmap"]
verbs: ["update", "get"]
注 意
如果使用了resourceNames，则verbs不能是list、watch、create、deletecollection等。
5. 聚合ClusterRole
从Kubernetes 1.9版本开始，Kubernetes可以通过一组ClusterRole创建聚合ClusterRoles，聚
合ClusterRoles的权限由控制器管理，并通过匹配ClusterRole的标签自动填充相对应的权限。
比如，匹配rbac.example.com/aggregate-to-monitoring: "true"标签来创建聚合ClusterRole：
kind: ClusterRole
apiVersion: rbac.authorization.K8S.io/v1
metadata:
name: monitoring
aggregationRule:
clusterRoleSelectors:
- matchLabels:
rbac.example.com/aggregate-to-monitoring: "true"
rules: [] # Rules are automatically filled in by the controller manager.
然后创建与标签选择器匹配的ClusterRole向聚合ClusterRole添加规则：
kind: ClusterRole
apiVersion: rbac.authorization.K8S.io/v1
metadata:
name: monitoring-endpoints
labels:
rbac.example.com/aggregate-to-monitoring: "true"
# These rules will be added to the "monitoring" role.
rules:
- apiGroups: [""]
resources: ["services", "endpoints", "pods"]
verbs: ["get", "list", "watch"]
6. Role示例
以下示例允许读取核心API组中的资源Pods（只写了规则rules部分）：
rules:
- apiGroups: [""]
resources: ["pods"]
verbs: ["get", "list", "watch"]
允许在extensions和apps API组中读写deployments：
rules:
- apiGroups: ["extensions", "apps"]
resources: ["deployments"]
verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
允许对Pods的读和Job的读写：
rules:
- apiGroups: [""]
第2章 Docker及Kubernetes基础 | 135
resources: ["pods"]
verbs: ["get", "list", "watch"]
- apiGroups: ["batch", "extensions"]
resources: ["jobs"]
verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
允许读取一个名为 my-config 的ConfigMap（必须绑定到一个 RoleBinding 来限制到一个命名
空间下的ConfigMap）：
rules:
- apiGroups: [""]
resources: ["configmaps"]
resourceNames: ["my-config"]
verbs: ["get"]
允许读取核心组 Node 资源（Node 属于集群级别的资源，必须放在 ClusterRole 中，并使用
ClusterRoleBinding进行绑定）：
rules:
- apiGroups: [""]
resources: ["nodes"]
verbs: ["get", "list", "watch"]
允许对非资源端点/healthz和所有其子资源路径的Get和Post请求（必须放在ClusterRole并与
ClusterRoleBinding进行绑定）：
rules:
- nonResourceURLs: ["/healthz", "/healthz/*"] # '*' in a nonResourceURL is a
suffix glob match
verbs: ["get", "post"]
7. RoleBinding示例
以下示例绑定为名为“PI:EMAIL”的用户（只显示subjects部分）：
subjects:
- kind: User
name: "PI:EMAIL"
apiGroup: rbac.authorization.K8S.io
绑定为名为“frontend-admins”的组：
subjects:
- kind: Group
name: "frontend-admins"
apiGroup: rbac.authorization.K8S.io
绑定为kube-system命名空间中的默认Service Account：
subjects:
- kind: ServiceAccount
name: default
namespace: kube-system
绑定为qa命名空间中的所有Service Account：
subjects:
- kind: Group
136 | 再也不踩坑的Kubernetes实战指南
name: system:serviceaccounts:qa
apiGroup: rbac.authorization.K8S.io
绑定所有Service Account：
subjects:
- kind: Group
name: system:serviceaccounts
apiGroup: rbac.authorization.K8S.io
绑定所有经过身份验证的用户（v1.5+）：
subjects:
- kind: Group
name: system:authenticated
apiGroup: rbac.authorization.K8S.io
绑定所有未经过身份验证的用户（v1.5+）：
subjects:
- kind: Group
name: system:unauthenticated
apiGroup: rbac.authorization.K8S.io
对于所有用户：
subjects:
- kind: Group
name: system:authenticated
apiGroup: rbac.authorization.K8S.io
- kind: Group
name: system:unauthenticated
apiGroup: rbac.authorization.K8S.io
8. 命令行的使用
权限的创建可以使用命令行直接创建，较上述方式更加简单、快捷，下面我们逐一介绍常用
命令的使用。
（1）kubectl create role
创建一个Role，命名为pod-reader，允许用户在Pod上执行get、watch和list：
kubectl create role pod-reader --verb=get --verb=list --verb=watch
--resource=pods
创建一个指定了resourceNames的Role，命名为pod-reader：
kubectl create role pod-reader --verb=get --resource=pods
--resource-name=readablepod --resource-name=anotherpod
创建一个命名为foo，并指定APIGroups的Role：
kubectl create role foo --verb=get,list,watch --resource=replicasets.apps
针对子资源创建一个名为foo的Role：
kubectl create role foo --verb=get,list,watch --resource=pods,pods/status
第2章 Docker及Kubernetes基础 | 137
针对特定/具体资源创建一个名为my-component-lease-holder的Role：
kubectl create role my-component-lease-holder --verb=get,list,watch,update
--resource=lease --resource-name=my-component
（2）kubectl create clusterrole
创建一个名为pod-reader的ClusterRole，允许用户在Pod上执行get、watch和list：
kubectl create clusterrole pod-reader --verb=get,list,watch --resource=pods
创建一个名为pod-reader的ClusterRole，并指定resourceName：
kubectl create clusterrole pod-reader --verb=get --resource=pods
--resource-name=readablepod --resource-name=anotherpod
使用指定的apiGroup创建一个名为foo的ClusterRole：
kubectl create clusterrole foo --verb=get,list,watch
--resource=replicasets.apps
使用子资源创建一个名为foo的ClusterRole：
kubectl create clusterrole foo --verb=get,list,watch
--resource=pods,pods/status
使用non-ResourceURL创建一个名为foo的ClusterRole：
kubectl create clusterrole "foo" --verb=get --non-resource-url=/logs/*
使用指定标签创建名为monitoring的聚合ClusterRole：
kubectl create clusterrole monitoring
--aggregation-rule="rbac.example.com/aggregate-to-monitoring=true"
（3）kubectl create rolebinding
创建一个名为bob-admin-binding的RoleBinding，将名为admin的ClusterRole绑定到名为acme
的命名空间中一个名为bob的user：
kubectl create rolebinding bob-admin-binding --clusterrole=admin --user=bob
--namespace=acme
创建一个名为myapp-view-binding 的RoleBinding，将名为view的ClusterRole，绑定到acme
命名空间中名为myapp的ServiceAccount：
kubectl create rolebinding myapp-view-binding --clusterrole=view
--serviceaccount=acme:myapp --namespace=acme
（4）kubectl create clusterrolebinding
创建一个名为 root-cluster-admin-binding 的 clusterrolebinding，将名为 cluster-admin 的
ClusterRole绑定到名为root的user：
kubectl create clusterrolebinding root-cluster-admin-binding
--clusterrole=cluster-admin --user=root
创建一个名为myapp-view-binding的clusterrolebinding，将名为view的ClusterRole绑定到acme
命名空间中名为myapp的ServiceAccount：
138 | 再也不踩坑的Kubernetes实战指南
kubectl create clusterrolebinding myapp-view-binding --clusterrole=view
--serviceaccount=acme:myapp
2.2.17 CronJob
CronJob用于以时间为基准周期性地执行任务，这些自动化任务和运行在Linux或UNIX系统
上的CronJob一样。CronJob对于创建定期和重复任务非常有用，例如执行备份任务、周期性调度
程序接口、发送电子邮件等。
对于 Kubernetes 1.8 以前的版本，需要添加--runtime-config=batch/v2alpha1=true 参数至
APIServer中，然后重启APIServer和Controller Manager用于启用API，对于1.8以后的版本无须
修改任何参数，可以直接使用，本节的示例基于1.8以上的版本。
1. 创建CronJob
创建CronJob有两种方式，一种是直接使用kubectl创建，一种是使用yaml文件创建。
使用kubectl创建CronJob的命令如下：
kubectl run hello --schedule="*/1 * * * *" --restart=OnFailure --image=busybox
-- /bin/sh -c "date; echo Hello from the Kubernetes cluster"
对应的yaml文件如下：
apiVersion: batch/v1beta1
kind: CronJob
metadata:
name: hello
spec:
schedule: "*/1 * * * *"
jobTemplate:
spec:
template:
spec:
containers:
- name: hello
image: busybox
args:
- /bin/sh
- -c
- date; echo Hello from the Kubernetes cluster
restartPolicy: OnFailure
说 明
本例创建一个每分钟执行一次、打印当前时间和Hello from the Kubernetes cluster的计划
任务。
查看创建的CronJob：
$ kubectl get cj
NAME SCHEDULE SUSPEND ACTIVE LAST SCHEDULE AGE
hello */1 * * * * False 0  5s
第2章 Docker及Kubernetes基础 | 139
等待1分钟可以查看执行的任务（Jobs）：
$ kubectl get jobs
NAME COMPLETIONS DURATION AGE
hello-1558779360 1/1 23s 32s
CronJob 每次调用任务的时候会创建一个 Pod 执行命令，执行完任务后，Pod 状态就会变成
Completed，如下所示：
$ kubectl get po
NAME READY STATUS RESTARTS AGE
hello-1558779360-jcp4r 0/1 Completed 0 37s
可以通过logs查看Pod的执行日志：
$ kubectl logs -f hello-1558779360-jcp4r
Sat May 25 10:16:23 UTC 2019
Hello from the Kubernetes cluster
如果要删除CronJob，直接使用delete即可：
kubectl delete cronjob hello
2. 可用参数的配置
定义一个CronJob的yaml文件如下：
apiVersion: v1
items:
- apiVersion: batch/v1beta1
kind: CronJob
metadata:
labels:
run: hello
name: hello
namespace: default
spec:
concurrencyPolicy: Allow
failedJobsHistoryLimit: 1
jobTemplate:
metadata:
creationTimestamp: null
spec:
template:
metadata:
creationTimestamp: null
labels:
run: hello
spec:
containers:
- args:
- /bin/sh
- -c
- date; echo Hello from the Kubernetes cluster
image: busybox
imagePullPolicy: Always
name: hello
140 | 再也不踩坑的Kubernetes实战指南
resources: {}
terminationMessagePath: /dev/termination-log
terminationMessagePolicy: File
dnsPolicy: ClusterFirst
restartPolicy: OnFailure
schedulerName: default-scheduler
securityContext: {}
terminationGracePeriodSeconds: 30
schedule: '*/1 * * * *'
successfulJobsHistoryLimit: 3
suspend: false
其中各参数的说明如下（可以按需修改）：
 schedule 调度周期，和Linux一致，分别是分时日月周。
 restartPolicy 重启策略，和Pod一致。
 concurrencyPolicy 并发调度策略。可选参数如下：
 Allow 允许同时运行多个任务。
 Forbid 不允许并发运行，如果之前的任务尚未完成，新的任务不会被创建。
 Replace 如果之前的任务尚未完成，新的任务会替换的之前的任务。
 Suspend 如果设置为true，则暂停后续的任务，默认为false。
 successfulJobsHistoryLimit 保留多少已完成的任务，按需配置。
 failedJobsHistoryLimit 保留多少失败的任务。
相对于Linux上的计划任务，Kubernetes的CronJob更具有可配置性，并且对于执行计划任务
的环境只需启动相对应的镜像即可。比如，如果需要 Go 或者 PHP 环境执行任务，就只需要更改
任务的镜像为Go或者PHP即可，而对于Linux上的计划任务，则需要安装相对应的执行环境。此
外，Kubernetes的CronJob是创建Pod来执行，更加清晰明了，查看日志也比较方便。可见，Kubernetes
的CronJob更加方便和简单。
更多CronJob的内容，可以参考Kubernetes的官方文档：https://kubernetes.io/docs/home/。
小 结
2.3
本章讲解了Docker和Kubernetes在生产环境中常用的基础知识，同时也举例说明了使用场景，
希望读者务必深入理解本章内容，因为概念及原理在使用过程中尤为重要，对业务架构的设计和集
群排错也都有很大的帮助。有关Docker和Kubernetes的更多概念可以参考官方文档：
https://kubernetes.io/docs/concepts/
https://docs.docker.com/