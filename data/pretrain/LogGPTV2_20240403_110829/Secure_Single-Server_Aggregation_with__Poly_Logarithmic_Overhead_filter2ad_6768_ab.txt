be prevented from excluding (γ + δ) clients from the final sum by
definition of the summation functionality itself. Instead of requiring
that a malicious server cannot learn the sum of the inputs of less
than (1 − γ − δ)n clients, as in the semi-honest case, we formalize
and prove that our protocol ensures that the server can only learn
sums including at least a constant fraction α of the clients’ inputs.
In other words, every honest client is guaranteed that their input
will be added with at least α(1−γ)n other inputs from honest clients
even when the malicious server is controlling γn other clients.
Bonawitz et al. [8] also propose a semi-malicious version of
their protocol. The main idea there is to add their semi-honest
variant a round in which clients verify that the server reported
consistent views of dropouts to all of them. This extension incurs
additional linear communication and computation. Extending our
semi-honest protocol while maintaining sublinear overhead is more
challenging. First, the server cannot be trusted to generate the com-
munication graph honestly, and thus we propose a protocol where
clients choose their k = O(log n) neighbors in a distributed veri-
fiable way. Second, we find an alternative approach to ensuring
global consistency of reported dropouts by having each client per-
form only a local verification on their neighborhood. We then prove
that this corresponds to a global property of the communication
graph thanks to the connectivity properties of random graphs.
n +l log n) com-
putation and O(log2
n +l) communication per client, and O(l log2
n)
computation and O(log2
n + ln) communication for the server. It
runs in five and a half rounds of interactions. Our protocol also
achieves very efficient concrete costs. For example, with σ = 40
and η = 30, if we run the protocol with 104 clients and corrupt
and dropout rates γ = δ = 0.05 we need only 300 neighbors to
guarantee that every client’s input is aggregated with the inputs of
at least 5000 clients (see Section 5 for more details).
Our semi-malicious construction requires O(log2
Secure Shuffle Construction. We provide an instantiation of the
shuffle model of differential privacy by showing a reduction of
shuffling to vector summation. Our solution leverages a randomized
data structure called an invertible Bloom lookup table (IBLT) [21].
To shuffle m messages distributed among n clients, it suffices to
run a single execution of secure vector summation with vectors of
length ∼ 2m. This covers the case where each user has multiple
messages to send, as in the multi-message shuffle model [4, 11, 19],
as well as the case where most users do not have any input, which
models submissions of error reports.
2 PRELIMINARIES AND NOTATION
Hypergeometric distribution. We recall that the Hypergeometric
distribution HyperGeom(n, m, k) is a discrete probability distribution
that describes the probability of s successes in k draws, without
replacement, from a finite population of size n that contains exactly
m objects with that feature. We use the following two tail bounds for
X ∼ HyperGeom(n, m, k): (i) ∀d > 0 : Pr[X ≤ (m/n − d)k] ≤ e−2d2k,
and (ii) ∀d > 0 : Pr[X ≥ (m/n + d)k] ≤ e−2d2k. Moreover, by
choosing d = 1 − m/n, we get that Pr[X ≥ k] = Pr[X ≤ k] ≤
e−2(1−m/n)2k
Graphs. We denote a graph with a vertex set V and edge set E as
G(V, E), where (i, j) ∈ E if there is an edge between vertices i and
j. The set of all nodes connected to the i-th node is its neighbors
(i, j) ∈ E}. A graph G′(V′, E′) is a subgraph
NG(i) = {j ∈ V :
of G(V, E) if V′ ⊆ V and E′ ⊆ E. The subgraph of G induced by
a subset of the vertices V′ ⊂ V and the edges between E′ where
(i, j) ∈ E′ if and only if (i, j) ∈ E) and i, j ∈ V′ is denoted G[V′].
Parameters. We provide in Table 1, Appendix A, the parame-
ters we will use throughout the paper. In particular, σ will denote
an information-theoretic security parameter bounding the proba-
bility of bad events happening and η will denote the correctness
parameter. We denote by λ a security parameter associated with
standard cryptographic primitives (such as Shamir secret sharing,
pseudorandom generator, and authenticated encryption).
We says that two distributions D, D′ are computationally indis-
tinguishable with respect to σ and λ, denoted D ≈σ,λ D′, if the
statistical distance between D and D′ is bounded by the sum of a
negligible function in λ and of a negligible function in σ.
Throughout the paper, we denote X = Z/RZ the domain on
which the summation protocol is performed, and we assume the
representation of elements of X (resp. computational cost of opera-
tions in X) is ˜O(1) in n (resp. log(n)) so as to enable additions of n
elements in X without overflow.
Cryptographic primitives. In our protocols, we will use the follow-
ing cryptographic primitives for randomness generation and secure
communication. A signature scheme scheme that is existentially un-
forgeable under chosen message attacks (EUF-CMA); for example,
it can be instantiated with ECDSA in practice. A cryptographically
secure pseudorandom generator F : {0, 1}λ → Xl ; for example, it
can be instantiated with AES-CTR in practice [7, 8]. An authenti-
cated encryption scheme with associated data (AEAD), which is
semantically secure under a chosen plaintext attack (IND-CPA) and
provides integrity of ciphertext (INT-CTXT), which means that it is
computationally infeasible to produce a ciphertext not previously
Session 4D: Distributed Protocols CCS '20, November 9–13, 2020, Virtual Event, USA1255produced by the sender regardless of whether or not the under-
lying plaintext is “new”; for example, it can be instantiated with
ChaCha20+Poly1305 [24] in practice. A λ-secure key-agreement
protocol, i.e., a key-agreement protocol such that there exists a
simulator SimKA, which takes as input an output key sampled
uniformly at random and the public key of the other party, and
simulates the messages of the key agreement execution so that the
statistical distance is negligible in λ; for example, it can be instanti-
ated with a Diffie–Hellman key agreement protocol followed by a
key derivation function in practice.
3 THE SEMI-HONEST PROTOCOL
In this section, we present our semi-honest summation protocol.
Our construction is parametrized by a (possibly random) undirected
regular graph G with n nodes and degree k. Intuitively the graph G
will determine the direct communication channels that will be used
in the protocol in the following sense: clients that are connected
in G will exchange private messages in the protocol via the server
which, however, will not be able to see the message content. We will
prove the correctness and the security of our protocol assuming a
set of properties of the graph G. Next we will describe a random-
ized algorithm called GenerateGraph, which generates graphs
for which these properties hold with high probability. Since we
are in the semi-honest setting this algorithm can be generated by
the server (in the malicious setting protocol of Section 4, we will
describe a distributed graph generation protocol).
3.1 An abstract summation protocol
We present our protocol in Algorithm 2 which can be found in
the appendix. It runs among n clients with identifiers 1, . . . , n and
the server. All parties have access to the following primitives: a
pseudorandom generator (PRG) F, which is used to expand short
random keys, a secure key agreement protocol KA to create shared
random keys, and an authenticated encryption scheme for private
communication Eauth.
Construction Overview. The main idea of our construction is a
generalization of the secure aggregation protocol of Bonawitz et
al. [8], which only works with complete graphs (i.e., all the vertices
are connected between each other), that works with any graph sam-
pled from a larger set of sparser graphs. Our construction enables
significant efficiency improvements.
As we discussed above, the first step of the protocol will be to
generate a k-regular graph G and a threshold 1 ≤ t ≤ k, where
the n vertices are the clients participating to the protocol. To do
this the server runs a randomized graph generation algoritmhm
GenerateGraph that takes the number n of clients/nodes and sam-
ples output(G, t) from a distribution D. Below, we will define which
properties of this distribution suffice for the proofs of correctness
and security.
The edges of the graph determine pairs of clients each of which
run a key agreement protocol to share a random key, which later will
be used by each party to derive a mask for her input. More precisely,
each client i generates key pairs (sk
i ) and sends
2
i ) to all of her neighbors. Then, each pair (i, j) of connected
(pk
2
j ),
parties G runs a key agreement protocol si, j = KA.Aдree(sk
1
1
i , pk
i ), (sk
1
1
i , pk
1
i , pk
2
i , pk
which uses the keys exchange in the previous step to derive a shared
random key si, j.
Each client i derives pairwise masks for her input mi, j = F(si, j)
derived from shared keys with each of her neighbors j ∈ NG(i),
which she adds to her input as follows
(cid:174)xi − 
(cid:174)mi, j + 
(cid:174)mi, j .
j∈NG(i), j i
2
j
In the setting where all parties submit their masked inputs, all
pairwise masks cancel in the final sum. However, to support execu-
tion when dropouts occur, the protocol needs to enable removal of
the pairwise masks of dropout clients (who never submitted their
1
masked inputs). For this purpose, each client i shares her key sk
i
to her neighbors j’s by sending a ciphertext containing the share
produced using the public keys pk
’s. Later, if client i drops out,
her neighbors can send the decrypted shares to the server. Armed
with those shares, the server can reconstruct the secret key sk
and
use it together with the public keys of i’s neighbors to compute si, j.
Finally, the server can recover the corresponding pairwise masks
(cid:174)mi, j and remove them from the final output sum.
The above approach has a shortcoming that if the server an-
nounces dropouts and later some masked inputs of the claimed
dropouts arrive, the server will be able to recover those inputs in
the clear. To prevent this possibility the protocol introduced an-
other level of masks, called self masks, that each client generates
locally (cid:174)ri = F(bi) from a randomly sampled seed bi. This mask is
also added to the input
1
i
(cid:174)xi + (cid:174)ri − 
(cid:174)mi, j + 
(cid:174)mi, j .
j∈NG(i), j i
1
i
Now, client i also shares bi to her neighbors. Later, if i submitted
her masked input, the server will instead request shares of bi from
the client’s neighbors in order to reconstruct and remove (cid:174)ri from
the sum. In other words, either client i has submitted her masked
input and the server will obtain shares from the mask bi, or client i
has dropped out and the server will obtain shares of sk
. Crucially,
we require each client to provide to the server only one share for
each if her neighbors. This guarantees that the masked inputs of
clients that are not included in the final sum cannot be revealed in
the clear to the server.
Dropouts may happen throughout the steps of the protocol. We
denote by A1 the set of parties that send their secret shares to their
neighbors, A2 ⊆ A1 is the set of parties that send their masked
inputs with their self mask and the pairwise masks generated from
the shared keys with her neighbors in A1, A3 ⊆ A2 is the set of
clients that send shares to the server to be used in the reconstruction
of the output. At each of these steps the server will only wait a
set time for these messages, A′
denotes the subset of Ai whose
i
messages arrive on time. If the complements of these prime sets
becomes larger than the threshold δn for dropouts, the server aborts.
Also if a client has less than t neighbors in A′
3, the server aborts
since it cannot reconstruct at least one mask needed to obtain the
output.
The construction of Bonawitz et al. [8] uses a complete graph
where each client shares a mask with every other client in the
system. While a single random mask hides perfectly a private value,
the intuition of why we need more masks is the presence of corrupt
Session 4D: Distributed Protocols CCS '20, November 9–13, 2020, Virtual Event, USA1256clients, who will share their masks with the server, and of dropouts
whose masks will be removed. However, we will show that n − 1
masks per input may be more than what is needed for security. In
particular, the insight in our construction is that the number of such
masks can be significantly reduced to O(log n), in a setting where we
can assume that the pairs of parties sharing common randomness
used to derive masks are chosen at random and independent of
the set of corrupted parties and the set of dropouts. In particular
we model this by using a random k-regular graph that determines
the node neighbors with whom masks are shared. In our security
proofs, we will argue that, when k = O(log n), for each honest
client there is a sufficient number of honest non-dropout neighbors
to protect the client’s input.
Graph Properties. Let G = (V, E) be a k-regular undirected graph
with n nodes, and let 0 < t < k be an integer. Recall that NG(i) =
{j ∈ V : (i, j) ∈ E} is the set of neighbors of i.
The first property that we require from any graph output by
GenerateGraph is that, for every set of corrupt clients C, with all
but negligible probability, no honest client i has t neighbors in C.
Note that this happening would immediately break security, as the
adversary would be able to recover the secrets of i by combining