        int i;
        for (i = 0; i > 3] > 3] |= src[i + 1];   // 添加到末位    
        }
        dest[length] = 0;
    }
    // 批置换，以offset为偏移，以count为长度    
    void BatchSet(char* dest, char* src, char* offset, int count) {
        int i;
        for (i = 0; i > 1] = (dest[i >> 1]  0x20 ? 0x1f : (size/0x10)) ;
用单链表实现了类似unlink一样的效果：
    void unlink(struct chunk* current) {
        int index = find_index(current->size);
        struct chunk* ite = bins[index];
        if(ite != 0) {
            while(ite->fd != 0) {
                if(ite->fd == current) {
                    ite->fd = current->fd;
                    break;
                }
                ite = ite -> fd;
            }
        }
    }
也可以做merge，具体源码在github上，可以看到，基本全程没啥check，一些glibc用不到的技巧都可以用了！
说了这么多，洞在哪呢？？以下为wasm2wast 跑出来wast的一部分
    (export "memory" (memory 0))
      (import "env" "grow" (func (;0;) (type 1)))
      (import "env" "read_data" (func (;1;) (type 1)))
      (import "env" "read_file" (func (;2;) (type 2)))
      (import "env" "read_pass" (func (;3;) (type 1)))
      (import "env" "read_random" (func (;4;) (type 1)))
      这些是内部函数同import 函数名之间的关系
      (export "malloc" (func 5))
      (export "unlink" (func 6))
      (export "free" (func 7))
      (export "Initialize" (func 8))
      (export "ExtractU32" (func 9))
      (export "hash" (func 10))
      (export "mycrypt" (func 11))
      (export "encrypt" (func 12))
      (export "decrypt" (func 13))
      (export "out_size" (func 14))
      这些是内部函数与export 函数名之间的关系
      来看看decrypt函数
      (func (;13;) (type 0) (result i32)
        (local i32 i32 i32 i32 i32 i32 i32)
        i32.const 32
        call 5
        set_local 5
        i32.const 1024