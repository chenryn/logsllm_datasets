title:Hierarchical attribute-based encryption for fine-grained access control
in cloud storage services
author:Guojun Wang and
Qin Liu and
Jie Wu
Hierarchical Attribute-Based Encryption for Fine-Grained
Access Control in Cloud Storage Services
Guojun Wang, Qin Liu
Central South University
Changsha, Hunan Province, P. R. China, 410083
PI:EMAIL
School of Information Science and Engineering
Dept. of Computer and Information Sciences
Jie Wu
Temple University
Philadelphia, PA 19122, USA
PI:EMAIL
ABSTRACT
Cloud computing, as an emerging computing paradigm, en-
ables users to remotely store their data into a cloud so as
to enjoy scalable services on-demand. Especially for small
and medium-sized enterprises with limited budgets, they can
achieve cost savings and productivity enhancements by us-
ing cloud-based services to manage projects, to make col-
laborations, and the like. However, allowing cloud service
providers (CSPs), which are not in the same trusted do-
mains as enterprise users, to take care of conﬁdential data,
may raise potential security and privacy issues. To keep the
sensitive user data conﬁdential against untrusted CSPs, a
natural way is to apply cryptographic approaches, by dis-
closing decryption keys only to authorized users. However,
when enterprise users outsource conﬁdential data for shar-
ing on cloud servers, the adopted encryption system should
not only support ﬁne-grained access control, but also pro-
vide high performance, full delegation, and scalability, so as
to best serve the needs of accessing data anytime and any-
where, delegating within enterprises, and achieving a dy-
namic set of users.
In this paper, we propose a scheme
to help enterprises to eﬃciently share conﬁdential data on
cloud servers. We achieve this goal by ﬁrst combining the hi-
erarchical identity-based encryption (HIBE) system and the
ciphertext-policy attribute-based encryption (CP-ABE) sys-
tem, and then making a performance-expressivity tradeoﬀ,
ﬁnally applying proxy re-encryption and lazy re-encryption
to our scheme.
Categories and Subject Descriptors
E.3 [Data Encryption]: Public key cryptosystems
General Terms
Security, Algorithms, Design
Keywords
cloud computing, hierarchical attribute-based encryption,
ﬁne-grained access control, scalability
1.
INTRODUCTION
With the emergence of sharing conﬁdential corporate data
on cloud servers, it is imperative to adopt an eﬃcient encryp-
Copyright is held by the author/owner(s).
CCS’10, October 4–8, 2010, Chicago, Illinois, USA.
ACM 978-1-4503-0244-9/10/10.
tion system with a ﬁne-grained access control to encrypt out-
sourced data. Ciphertext-policy attribute-based encryption
(CP-ABE), as one of the most promising encryption systems
in this ﬁeld, allows the encryption of data by specifying an
access control policy over attributes, so that only users with
a set of attributes satisfying this policy can decrypt the cor-
responding data. However, a CP-ABE system may not work
well when enterprise users outsource their data for sharing
on cloud servers, due to the following reasons:
First, one of the biggest merits of cloud computing is that
users can access data stored in the cloud anytime and any-
where using any device, such as thin clients with limited
bandwidth, CPU, and memory capabilities. Therefore, the
encryption system should provide high performance.
Second, in the case of a large-scale industry, a delegation
mechanism in the generation of keys inside an enterprise
is needed. Although some CP-ABE schemes support dele-
gation between users, which enables a user to generate at-
tribute secret keys containing a subset of his own attribute
secret keys for other users, we hope to achieve a full dele-
gation, that is, a delegation mechanism between attribute
authorities (AAs), which independently make decisions on
the structure and semantics of their attributes.
Third, in case of a large-scale industry with a high turnover
rate, a scalable revocation mechanism is a must. The exist-
ing CP-ABE schemes usually demand users to heavily de-
pend on AAs and maintain a large amount of secret keys
storage, which lacks ﬂexibility and scalability.
Motivation. Our main design goal is to help the en-
terprise users to eﬃciently share conﬁdential data on cloud
servers. Speciﬁcally, we want to make our scheme more
applicable in cloud computing by simultaneously achieving
ﬁne-grained access control, high performance, practicability,
and scalability.
Our Contribution.
In this paper, we ﬁrst propose a
hierarchical attribute-based encryption (HABE) model by
combining a HIBE system and a CP-ABE system, to pro-
vide ﬁne-grained access control and full delegation. Based on
the HABE model, we construct a HABE scheme by making
a performance-expressivity tradeoﬀ, to achieve high perfor-
mance. Finally, we propose a scalable revocation scheme
by delegating to the CSP most of the computing tasks in
revocation, to achieve a dynamic set of users eﬃciently.
2. THE HABE MODEL
The HABE model (see Figure 1) consists of a root master
(RM) that corresponds to the third trusted party (TTP),
multiple domain masters (DMs) in which the top-level DMs
735correspond to multiple enterprise users, and numerous users
that correspond to all personnel in an enterprise.
Figure 1: A three-level HABE model
The RM, whose role closely follows the root private key
generator (PKG) in a HIBE system, is responsible for the
generation and distribution of system parameters and do-
main keys. The DM, whose role integrates both the prop-
erties of the domain PKG in a HIBE system and AA in a
CP-ABE system, is responsible for delegating keys to DMs
at the next level and distributing keys to users. Speciﬁcally,
we enable the leftmost DM at the second level to administer
all the users in a domain, just as the personnel oﬃce admin-
isters all personnel in an enterprise, and not to administer
any attribute. Notice that other DMs administer an arbi-
trary number of disjoint attributes, and have full control
over the structure and semantics of their attributes.
In the HABE model, we ﬁrst mark each DM and attribute
with a unique identiﬁer (ID), but mark each user with both
an ID and a set of descriptive attributes. Then, as Gentry
et al [1], we enable an entity’s secret key to be extracted
from the DM administering itself, and an entity’s public key,
which denotes its position in the HABE model, to be an ID-
tuple consisting of the public key of the DM administering
itself and its ID, e.g., the public key of DMi with IDi is in
the form of (PKi−1; IDi), the public key of user U with IDu
is in the form of (PK♢; IDu), and the public key of attribute
a with IDa is in the form of (PKi; IDa), where PKi−1, PK♢,
and PKi are assumed to be the public keys of the DMs that
administer DMi, U, and a, respectively.
3. CONSTRUCTION
Based on the proposed HABE model, we construct the
HABE scheme using the bilinear map [1]. As Muller et al
[2] sacriﬁcing the expressivity of access structure to achieve
better performance, we also use disjunctive normal form
(DNF) policy. We assume that all attributes in one conjunc-
tive clause are administered by the same DM. The HABE
scheme consists of the following ﬁve algorithms:
Setup(K) ! (params; MK0) : The RM ﬁrst picks mk0 2
Zq, and then chooses groups G1 and G2 of order q, a bilinear
map ˆe : G1(cid:2)G1 ! G2, two random oracles H1: f0; 1g∗ ! G1
and H2: G2 ! f0; 1gn for some n, and a random generator
P0 2 G1. Let Q0 = mk0P0 2 G1. The system parameters
params = (q; G1; G2; ˆe; n; P0; Q0; H1; H2) will be publicly
available, while MK0 = (mk0) will be kept secret.
CreateU ser(params; MKi; PKu; PKa) ! (SKi;u;
CreateDM (params; MKi; PKi+1) ! (MKi+1) : To gen-
erate the master key for DMi+1 with PKi+1, the RM or DMi
ﬁrst picks a random element mki+1 2 Zq, and then com-
putes SKi+1 = SKi + mkiPi+1 where Pi+1 = H1(PKi+1) 2
G1, and Qi+1 = mki+1P0 2 G1, ﬁnally sets MKi+1 =
(mki+1; SKi+1; Q-tuplei+1) where Q-tuplei+1 = (Q-tuplei;
Qi+1), and gives the random oracle HA : f0; 1g ! Zq that is
chosen by the RM and shared in a domain. Here, we assume
that SK0 is an identity element of G1, and Q-tuple0 = (Q0).
SKi;u;a) : To generate a secret key for user U with PKu on
attribute a with PKa, DMi ﬁrst checks whether U is eligible
for a, and a is administered by itself.
If so, it ﬁrst sets
mku = HA(PKu) 2 Zq, SKi;u = mkimkuP0 2 G1, and
SKi;u;a = SKi + mkimkuPa 2 G1, where Pa = H1(PKa) 2
G1, and then gives Q-tuplei. Otherwise, it outputs “NULL”.
j1 (cid:20) i (cid:20) N; 1 (cid:20) j (cid:20) nig; f ) !
Encrypt(params; A;fPKaij
(CT ) : Given a DNF access control policy A =
(CCi) =
aij), where N 2 Z+ is the number of conjunctive
N_
clause in A, ni 2 Z+ is the number of attributes in the i-th
conjunctive clause CCi, and aij is the j-th attribute in CCi.
Let DMiti with (IDi1, . . . , IDiti ) be the DM at level ti, ad-
ministering all attributes in CCi, where IDik for 1 (cid:20) k < ti
are IDs of DMiti ’s ancestors. The sender:
(
j=1
i=1
ni^
N_
i=1
r
nN∑
1. For 1 (cid:20) i (cid:20) N : Computes Pij = H1(IDi1; : : : ; IDij) 2
G1 for 1 (cid:20) j (cid:20) ti, and Paij = H1(IDi1; : : : ; IDiti ; IDaij )
2 G1 for 1 (cid:20) j (cid:20) ni.
n1∑
2. Picks a random element r 2 Zq, sets nA to be the low-
est common multiple (LCM) of n1,. . . , nN , and com-
putes U0 = rP0, U12 = rP12, . . . , U1t1 = rP1t1 , U1 =
Pa1j , . . . , UN 2 = rPN 2, . . . , UN tN = rPN tN ,
PaN j , and V = f (cid:8) H2(ˆe(Q0; rnAP1)). The
UN = r
ciphertext is CT = (A; Cf ), where Cf = [U0; U12; : : : ;
U1t1 ; U1; : : : ; UN 2; : : : ; UN tN ; UN ; V ].
Decrypt(params; CT; SKiti;u;fSKiti;u;aij
Q-tuplei(ti−1)) ! (f ) : User U, whose attributes satisfy
CCi, computes V (cid:8)H2(
j1 (cid:20) j (cid:20) nig;
SKiti;u;aij
ni∑
) to
^e(U0;
nA
ni
j=1
j=1
j=1
)
^e(SKiti ;u;
nA
ni
Ui)
^e(Uij ;nAQi(j−1))
ti∏
j=2
recover f . Observe that:
ni∑
j=1
ti∏
Ui)
ti∏
j=2
V (cid:8) H2(
^e(SKiti ;u;
nA
ni
^e(U0;