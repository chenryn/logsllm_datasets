## PostgreSQL 16 preview - SQL/JSON: support the IS JSON predicate        
### 作者                                                                    
digoal                                                                    
### 日期                                                                    
2023-03-31                                                                
### 标签                                                                    
PostgreSQL , PolarDB , sql/json   
----                                                                    
## 背景        
https://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=6ee30209a6f161d0a267a33f090c70c579c87c00  
```  
SQL/JSON: support the IS JSON predicate  
author	Alvaro Herrera 	  
Fri, 31 Mar 2023 20:34:04 +0000 (22:34 +0200)  
committer	Alvaro Herrera 	  
Fri, 31 Mar 2023 20:34:04 +0000 (22:34 +0200)  
commit	6ee30209a6f161d0a267a33f090c70c579c87c00  
tree	eda2b3a9f0a61f3fc484819b39abf1eb130e0d88	tree  
parent	a2a0c7c29e47f39da905577659e66b0086b769cc	commit | diff  
SQL/JSON: support the IS JSON predicate  
This patch introduces the SQL standard IS JSON predicate. It operates  
on text and bytea values representing JSON, as well as on the json and  
jsonb types. Each test has IS and IS NOT variants and supports a WITH  
UNIQUE KEYS flag. The tests are:  
IS JSON [VALUE]  
IS JSON ARRAY  
IS JSON OBJECT  
IS JSON SCALAR  
These should be self-explanatory.  
The WITH UNIQUE KEYS flag makes these return false when duplicate keys  
exist in any object within the value, not necessarily directly contained  
in the outermost object.  
Author: Nikita Glukhov   
Author: Teodor Sigaev   
Author: Oleg Bartunov   
Author: Alexander Korotkov   
Author: Amit Langote   
Author: Andrew Dunstan   
Reviewers have included (in no particular order) Andres Freund, Alexander  
Korotkov, Pavel Stehule, Andrew Alsup, Erik Rijkers, Zihong Yu,  
Himanshu Upadhyaya, Daniel Gustafsson, Justin Pryzby.  
Discussion: https://postgr.es/m/CAF4Au4w2x-5LTnN_bxky-mq4=WOqsGsxSpENCzHRAzSnEd8+PI:EMAIL  
Discussion: https://postgr.es/m/PI:EMAIL  
Discussion: https://postgr.es/m/PI:EMAIL  
Discussion: https://postgr.es/m/abd9b83b-aa66-f230-3d6d-734817f0995d%40postgresql.org  
```  
```  
+SELECT js,  
+  js IS JSON "json?",  
+  js IS JSON SCALAR "scalar?",  
+  js IS JSON OBJECT "object?",  
+  js IS JSON ARRAY "array?"  
+FROM (VALUES  
+      ('123'), ('"abc"'), ('{"a": "b"}'), ('[1,2]'),('abc')) foo(js);  
+     js     | json? | scalar? | object? | array?   
+------------+-------+---------+---------+--------  
+ 123        | t     | t       | f       | f  
+ "abc"      | t     | t       | f       | f  
+ {"a": "b"} | t     | f       | t       | f  
+ [1,2]      | t     | f       | f       | t  
+ abc        | f     | f       | f       | f  
+  
+         
+         
+  
+SELECT js,  
+  js IS JSON OBJECT "object?",  
+  js IS JSON ARRAY "array?",  
+  js IS JSON ARRAY WITH UNIQUE KEYS "array w. UK?",  
+  js IS JSON ARRAY WITHOUT UNIQUE KEYS "array w/o UK?"  
+FROM (VALUES ('[{"a":"1"},  
+ {"b":"2","b":"3"}]')) foo(js);  
+-[ RECORD 1 ]-+--------------------  
+js            | [{"a":"1"},        +  
+              |  {"b":"2","b":"3"}]  
+object?       | f  
+array?        | t  
+array w. UK?  | f  
+array w/o UK? | t  
```  
```  
+-- IS JSON predicate  
+SELECT NULL IS JSON;  
+ ?column?   
+----------  
+   
+(1 row)  
+  
+SELECT NULL IS NOT JSON;  
+ ?column?   
+----------  
+   
+(1 row)  
+  
+SELECT NULL::json IS JSON;  
+ ?column?   
+----------  
+   
+(1 row)  
+  
+SELECT NULL::jsonb IS JSON;  
+ ?column?   
+----------  
+   
+(1 row)  
+  
+SELECT NULL::text IS JSON;  
+ ?column?   
+----------  
+   
+(1 row)  
+  
+SELECT NULL::bytea IS JSON;  
+ ?column?   
+----------  
+   
+(1 row)  
+  
+SELECT NULL::int IS JSON;  
+ERROR:  cannot use type integer in IS JSON predicate  
+SELECT '' IS JSON;  
+ ?column?   
+----------  
+ f  
+(1 row)  
+  
+SELECT bytea '\x00' IS JSON;  
+ERROR:  invalid byte sequence for encoding "UTF8": 0x00  
+CREATE TABLE test_is_json (js text);  
+INSERT INTO test_is_json VALUES  
+ (NULL),  
+ (''),  
+ ('123'),  
+ ('"aaa "'),  
+ ('true'),  
+ ('null'),  
+ ('[]'),  
+ ('[1, "2", {}]'),  
+ ('{}'),  
+ ('{ "a": 1, "b": null }'),  
+ ('{ "a": 1, "a": null }'),  
+ ('{ "a": 1, "b": [{ "a": 1 }, { "a": 2 }] }'),  
+ ('{ "a": 1, "b": [{ "a": 1, "b": 0, "a": 2 }] }'),  
+ ('aaa'),  
+ ('{a:1}'),  