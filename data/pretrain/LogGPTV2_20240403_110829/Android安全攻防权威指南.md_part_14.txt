系统缓冲区也是许多信息的来源，即由系统进程生成的系统级事件。这些进程利用android。
util.Slog类中的println_native 方法，面println_native方法又会调用特定的原生代
码，将日志写人这个缓冲区。
日志消息可以使用1ogcat命令来获取，而主缓冲区与系统缓冲区作为默认的日志信息源。
在以下代码中，我们运行adb-d1ogcat命令，来看看连接的设备上发生了什么。
S adb -d logcat
D/MobileDataStateTracker( 1600)1 nul1: Broadcast received :
--- beginning of /dev/1og/system
ACTION_ANY_DATA_CONNECTION_STATE_CHANGEDmApnType=nu11 1= received
D/MobileDataStateTracker(. 1600) : null: Broadcast received:
apnType=internet
ACTION_ANY_DATA_CO8NSCTION_STATE_CHANGEDmAgrType=nu11 1= received
ACTION_ANY_DATA_CONBCTION_STATE_CHANGEDmApnType=httpproxy I= received
D/MobileDataStateTracker( 1600): null: Broadcast received:
apnType=internet
ACTION_ANY_DATA_CosNSCTzON_STATE_CHANGEDmApnType=nu11 1= received
apnType=internet
D/mema11oc( 1743) : /dev/pmem: Unmapping buffer base:0x5396a000
D/mema11oc( 1743) : /dev/pmem: Unmapping buffer base:0x532f8000
size:12820480 offset:11284480
size:1536000 offset:0
D/mema11oc( 1743) : /dev/pmem: Unmapping buffer base:0x546e7000
D/1ibEGL( 4887): 1oaded /system/1ib/eg1/1ibGL8Sv1_CK_adreno200.80
size:3072000 offset:1536000
D/1ibBGL ( 4887) : 1oaded /system/1ib/eg1/1ibGLESv2_adreno200.so
I/Adreno200BGLSUB( 4887) : : Format RGBA_8888.
D/OpenGLRenderer( 4887) : Enabling debug mode 0
reso1ver_helper,cc:66; [0204/172737:INF0:host_reso1ver_helper,ce(66)1
DNSPreReso1ver::Init got hostprovider:0x5281d220
V/chronium( 4887) : externa1/chromium/net/base/host_resolver_imp1 .cc:1515:
[0204/172737:INFO:host_reso1ver_inp1.cc(1515)]
V/WebReguest ( 4887) : WebRequest ::WebRequest, setPriority = 0
HostResolverImpl::SetPreresolver preresolver:0x013974d8
I/InputManagerService ( 1600) : [unbindCurrentClientLocked] Disable input
I/InputHanagerService( 1600) : [startInputLocked] Enable input
nethod client.
nethod cllent.
hostres_plugin_bridge,ce:52: [0204/172737:INFO:hostre8_
V/chromium( 4887) : externa1/chromium/net/disk_cache/
---
## Page 57
2.4复杂的安全性，复杂的漏润利用
41
plugin_bridge.c (52)] StatHubCreateHostResPlugin initializing-. 
这个1ogcat命令是如此常用，以至于ADB为在目标设备上运行它提供了一个快捷方式。
在整本书中，我们会大量使用1ogcat命令来监视进程和整个系统的状态。
6. Paranoid Networking
2
Android内核基于一个调用进程的辅助用户组来限制网络操作，而这个调用进程就是被称为
ParanoidNetworking的内核修改模块。在高层次上，这个模块将一个AID（以及随后的GID）映
射到应用层的权限声明或请求上。例如,Manifest文件中的权限android.permission，INTERNET
有效地映射到AID_INETAID（或GID3003）上。这些用户组、UID以及它们相应的权能在内核
源码树的 include/linux/android_aid.h文件中定义，详见表2-4。
表2-4根据用户组定义的网络权能
AID 定义
用户组 ID 和名称
权能
AID_NET_BT_ADMIN
3001 / net_bt_admin
允许创建任意蓝牙套接字，以及可以诊断和管理蓝牙连接
AID_N&T_BT
3002 /net_bt
允许创建 SCO、RFCOMM或L2CAP（蓝牙）套接字
AID_INET
3003 /inet
允许创建 AF_INET 或AF_INET6 套接字
3004 /set_ra*
允许使用RAW和PACKET套接字
AID_NET_ADMIN
3005 /set_admin
授予CAP_NET_ADMIN权能，允许对网络接口、路由表和套接字的
提织
你可以从AOSP代码库中的 system/core/include/private/android_filesystem_config.h 文件中找
到其他Android特有的 GID。
2.4复杂的安全性，复杂的漏洞利用
在仔细观察了Android的设计与架构之后，我们已经清楚地了解到，Android操作系统是一
种非常复杂的系统。设计者坚持了最低权限原则，也就是说任何特定组件都应该只能访问它真正
所需要访问的东西。在本书中，你将看到他们使用这一原则的大量证据。不过，这虽然有助于提
高安全性，却也增加了复杂性。
进程隔离和减少特权往往是安全系统设计中的基石。无论对于开发者还是攻击者，这些技术
的复杂性也让系统都变得更加复杂，从面增加两方的开发成本。当攻击者在打磨他的攻击工具时，
他必须花时间去充分了解问题的复杂性。对于像Android这样一个系统，单单攻击一个安全漏润，
可能不足以获取到系统的完全控制权。攻击者可能需要利用多个安全漏洞才能达到目的。总之，
要成功地攻击一个复杂系统，需要一个复杂的漏洞利用。
一个能够很好地说明这一点的真实例子是，用于root HTCJButterfly手机的“diaggetroot
漏洞利用。为了获取root访问控制权，它利用了多个互为补充的安全问题。这个特殊的漏洞利用
会在第3章中详细讨论。
---
## Page 58
42第2章Android的安全设计与架构
2.5小结
本章概述了Android安全设计和架构。我们引l人了Android沙箱及Android使用的权限模型，
包括Android对Unix系统UID/GID映射关系的特殊实现AID，以及在整个系统中实施的限制和
权能。
我们也深入介绍了Android的逻辑层次，包括应用层、Android框架层、DalvikVM、用户空
间原生代码和Linux内核。对于每个层次，我们都讨论了主要组件，特别是那些与安全相关的组
件。我们强调了Android开发者对Linux内核所作出的重要添加与修改。
本章对Android总体设计较高层次上的介绍将有助于理解后续章节，这些章节将进一步深人
到本章介绍的层次和组件中。
下一章将解释如何完全控制Android设备的方法及其理由。我们将讨论几种通用的方法，并
介绍一些依赖于特定安全漏洞的已公开技术。
---
## Page 59
第3章
rootAndroid设备
在Android设备上获得超级用户权限的过程通常被称为root，这是由于超级用户账号无论在
哪个类UNIX系统中都被叫作root这个特殊账号拥有对类UNIX系统上所有文件与程序的权限，
能够对操作系统进行完全控制。
一个人想要在Android设备上获取管理权限，可能会出于很多种原因。就本书面言，我们主
要想在不受UNIX权限束缚的情况下，审查Android设备的安全性。然面，有些人想要访问或修
改系统文件，以改变一些硬编码的配置或行为，或者使用自定义的主题和开机动画来改变系统的
观感与体验。root设备还允许用户卸载预装应用，执行完整的系统备份和恢复，或安装定制内核
映像与模块。此外，有一类应用需要root权限才能运行，这些应用通常称为rootapp，包括基于
IPTables的防火墙软件、广告拦截软件、超频软件及支持设置上网热点（Tethering）的应用等。
无论你出于何种目的对设备进行root操作，你都需要认识到root设备将会损害设备的安全
性。一个原因是所有用户数据都将暴露给被授予root权限的应用。此外，这会让你的设备开一
道大门，当你的设备丢失或者被盗后，其他人就可以从中提取到所有的用户数据，如果在root
设备时移除了安全机制（如引导加载程序锁或签名的恢复更新），则更是如此。
本章涵盖了rootAndroid设备的一般过程，不会涉及对特定Android版本或设备型号的详细
解析。本章也会解释获取root权限过程中每个步骤会造成的安全隐患。最后，本章概要描述过去
曾被用于进行rootAndroid设备的一系列安全漏洞，这些安全漏洞已经在现在的Android发行版
中得到了修复。
警告在对root没有充分了解的情况下root你的设备，可统会导致你的设备无法正常工作。在
你修改任何系统文件时，更有可能会出现这种情况。值得庆幸的是，大多数Android设
备都可以在需要时恢复到出厂状态。
3.1理解分区布局
分区是在设备的持久性存储内存中划分的逻辑存储单元或分块，面布局是指对分区制定次
序、偏移和尺寸。分区布局在绝大多数设备中是由引导加载程序（bootloader）来处理的，而在
---
## Page 60
44第3章rootAndroid设备
某些罕见的情况下，也可以由内核本身进行处理。这种底层存储分区对于设备功能的正常工作是
至关重要的。
不同供应商与设备平台的分区布局各不相同。两种不同设备的分区布局通常不会完全相同。
但是，有几种分区在所有Android设备中都会存在。最常见的是引导区、系统区、数据区、恢复
区和缓存区。一般来说，设备的NAND闪存会使用以下分区布局。
口引导加载程序存储手机的引导加载程序，这一程序需要在手机开机时负责对硬件的初
始化，引导启动Android内核，并实现可供选择的引导模式（如下载模式）。
口开机闪屏存储设备开机后马上看到的闪屏图像，通常包含设备制造商或移动通信运营
商的Logo。在某些设备上，启动画面位图会被嵌入在引导加载程序中，而不是存储在一
个单独的分区里。
文件系统RAM磁盘（initrd）。
口恢复区存储了一个最小化的Android引导映像，该映像提供维护功能，并作为故障保
护机制。
口系统区存储设备上被挂载至/system的整个Android系统映像，这一映像中包含了Android
框架、程序库、系统二进制文件，以及预装的应用。
口用户数据区也称为数据分区，这是设备对应用数据和用户文件（如照片、视额、音频
和下载文件）的内部存储分区，在一个已引导的系统上，会被挂载至/data目录。
口缓存区用于存放各种实用程序文件，比如恢复日志、实时下载的更新应用包。在将应
用安装在SD卡上的设备中也会包含Dalvik-cache文件夹，其中存储了DalvikVM的缓存。
口无线电分区存储基带系统映像的分区。此分区通常只在具有通话功能的设备上存在。
确定分区布局
可以通过多种方式获取特定设备的分区布局。第一种方式是查看proc文件系统中partitions
条目的内容。以下是在一部运行Android4.2.1的三星GalaxyNexus手机上分区条目的内容：
shel19android:/data $ cat /proc/partitions
major ninor#blocksname
31
179
0
15388672 mmcb1k0
1024 mtdblock0
179
·0
1.79
3584 #
128 mmcb1k0p1
179
2
20480 mmcb1x0p3
mmcb1k0p2
1.79
1.79
8192 rmcb1k0p4
1.79
4096 mmcb1k0p5
179
4096 mncb1k0p6
259
8192 mmcb1k0p7
259
16384 mmcb1k0p9
12224 mmcb1k0p8
259
669696 mmcb1k0p10
---
## Page 61
3.2理解引导过程
45
259
442368 mmcb1k0p11
259