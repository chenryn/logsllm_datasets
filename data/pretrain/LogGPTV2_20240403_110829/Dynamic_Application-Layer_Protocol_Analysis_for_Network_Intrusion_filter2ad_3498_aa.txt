title:Dynamic Application-Layer Protocol Analysis for Network Intrusion
Detection
author:Holger Dreger and
Anja Feldmann
Dynamic Application-Layer Protocol Analysis
for Network Intrusion Detection
Holger Dreger
TU M¨unchen
PI:EMAIL
Anja Feldmann
TU M¨unchen
PI:EMAIL
Michael Mai
TU M¨unchen
PI:EMAIL
Vern Paxson
ICSI/LBNL
PI:EMAIL
Robin Sommer
ICSI
PI:EMAIL
Abstract
Many network intrusion detection systems (NIDS) rely
on protocol-speciﬁc analyzers to extract the higher-level
semantic context from a trafﬁc stream. To select the cor-
rect kind of analysis, traditional systems exclusively de-
pend on well-known port numbers. However, based on
our experience, increasingly signiﬁcant portions of to-
day’s trafﬁc are not classiﬁable by such a scheme. Yet for
a NIDS, this trafﬁc is very interesting, as a primary rea-
son for not using a standard port is to evade security and
policy enforcement monitoring. In this paper, we dis-
cuss the design and implementation of a NIDS extension
to perform dynamic application-layer protocol analysis.
For each connection, the system ﬁrst identiﬁes potential
protocols in use and then activates appropriate analyz-
ers to verify the decision and extract higher-level seman-
tics. We demonstrate the power of our enhancement with
three examples: reliable detection of applications not us-
ing their standard ports, payload inspection of FTP data
transfers, and detection of IRC-based botnet clients and
servers. Prototypes of our system currently run at the
border of three large-scale operational networks. Due to
its success, the bot-detection is already integrated into a
dynamic inline blocking of production trafﬁc at one of
the sites.
1 Introduction
Network intrusion detection systems (NIDSs) analyze
streams of network packets in order to detect attacks
and, more generally, violations of a site’s security pol-
icy. NIDSs often rely on protocol-speciﬁc analyzers to
extract the higher-level semantic context associated with
a trafﬁc stream, in order to form more reliable decisions
about if and when to raise an alarm [38]. Such analysis
can be quite sophisticated, such as pairing up a stream of
replies with previously pipelined requests, or extracting
the speciﬁc control parameters and data items associated
with a transaction.
To select the correct analyzer for some trafﬁc, a NIDS
faces the challenge of determining which protocol is in
use before it even has a chance to inspect the packet
stream. To date, NIDSs have resolved this difﬁculty by
assuming use of a set of well-known ports, such as those
assigned by IANA [19], or those widely used by con-
vention. If, however, a connection does not use one of
these recognized ports—or misappropriates the port des-
ignated for a different application—then the NIDS faces
a quandary: how does it determine the correct analyzer?
In practice, servers indeed do not always use the port
nominally associated with their application, either due
to benign or malicious intent. Benign examples include
users who run Web or FTP servers on alternate ports
because they lack administrator privileges. Less be-
nign, but not necessarily malicious, examples include
users that run servers offering non-Web applications on
port 80/tcp in order to circumvent their ﬁrewall.
In
fact, some recently emerging application-layer protocols
are designed to work without any ﬁxed port, primar-
ily to penetrate ﬁrewalls and escape administrative con-
trol. A prominent example is the voice-over-IP appli-
cation Skype [2], which puts signiﬁcant efforts into es-
caping restrictive ﬁrewalls. Sometimes such applications
leverage a common protocol and its well-known port,
like HTTP, to tunnel their payload not just through the
ﬁrewall but even through application layer proxies. In
these cases, analyzing the application’s trafﬁc requires
ﬁrst analyzing and stripping off the outer protocol be-
fore the NIDS can comprehend the semantics of the
inner protocol. Similarly, we know from operational
experience that attackers can attempt to evade security
monitoring by concealing their trafﬁc on non-standard
ports or on ports assigned to different protocols:
tro-
jans installed on compromised hosts often communicate
on non-standard ports; many botnets use the IRC proto-
col on ports other than 666x/tcp; and pirates build ﬁle-
distribution networks using hidden FTP servers on ports
other than 21/tcp.
USENIX Association
Security ’06: 15th USENIX Security Symposium
257
It is therefore increasingly crucial to drive protocol-
speciﬁc analysis using criteria other than ports. Indeed,
a recent study [37] found that at a large university about
40% of the external trafﬁc could not be classiﬁed by a
port-based heuristic. For a NIDS, this huge amount of
trafﬁc is very interesting, as a primary reason for not us-
ing a standard port is to evade security and policy en-
forcement monitoring. Likewise, it is equally pressing
to inspect whether trafﬁc on standard ports indeed corre-
sponds to the expected protocol. Thus, NIDSs need the
capability of examining such trafﬁc in-depth, including
decapsulating an outer protocol layer in order to then ex-
amine the one tunneled inside it.
However, none of the NIDSs which are known to
us, including Snort [34], Bro [31], Dragon [14], and
IntruShield [20], use any criteria other than ports for
their protocol-speciﬁc analysis. As an initial conces-
sion to the problem, some systems ship with signatures—
characteristic byte-level payload patterns—meant to de-
tect the use of a protocol on a none-standard port. But all
only report the mere fact of ﬁnding such a connection,
rather than adapting their analysis to the dynamically de-
tected application protocol. For example, none of these
systems can extract URLs from HTTP sessions on ports
other than the statically conﬁgured set of ports.1 With
regards to decapsulating tunnels, a few newer systems
can handle special cases, e.g., McAfee’s IntruShield sys-
tem [20] can unwrap the SSL-layer of HTTPS connec-
tions when provided with the server’s private key. How-
ever, the decision that the payload is SSL is still based on
the well-known port number of HTTPS.
In this paper we discuss the design, implementation,
deployment, and evaluation of an extension to a NIDS
to perform dynamic application-layer protocol analysis.
For each connection, the system identiﬁes the protocol
in use and activates appropriate analyzers. We devise a
general and ﬂexible framework that (i) supports multi-
ple ways to recognize protocols, (ii) can enable multiple
protocol analyzers in parallel, (iii) copes with incorrect
classiﬁcations by disabling protocol analyzers, (iv) can
pipeline analyzers to dynamically decapsulate tunnels,
and (v) provides performance sufﬁcient for high-speed
analysis.
We demonstrate the power our enhancement provides
with three examples: (i) reliable detection of applica-
tions not using their standard ports, (ii) payload inspec-
tion of FTP data transfers, and (iii) detection of IRC-
based botnet clients and servers. The prototype system
currently runs at the border of the University of Califor-
nia, Berkeley (UCB), the M¨unchener Wissenschaftsnetz
(Munich Scientiﬁc Network, MWN), and the Lawrence
Berkeley National Laboratory (LBNL). These deploy-
1To keep our terminology simple, we will refer to a single ﬁxed port
when often this can be extended to a ﬁxed set of ports.
ments have already exposed a signiﬁcant number of secu-
rity incidents, and, due to its success, the staff of MWN
has integrated bot-detection into its operations, using it
for dynamic inline blocking of production trafﬁc.
The remainder of this paper is organized as follows:
§2 presents the three network environments that we use
for our study.
In §3 we analyze the potential of non-
port-based protocol detection and discuss the limitations
of existing NIDSs. In §4 we present the design and im-
plementation of our dynamic architecture and discuss the
trade-offs one faces in practice. §5 demonstrates the ben-
eﬁts of the dynamic architecture with three example ap-
plications. In §6 we evaluate the performance of our im-
plementation in terms of CPU usage and detection capa-
bilities. Finally in §7 we summarize our experience.
2 Environments and Dataset
The impetus for performing protocol analysis free
of any assumptions regarding applications using stan-
dard ports arose from our operational experiences
with NIDSs at three large-scale network environments:
the University of California, Berkeley (UCB),
the
M¨unchener Wissenschaftsnetz (Munich Scientiﬁc Net-
work, MWN) and the Lawrence Berkeley National Labo-
ratory (LBNL) [10]. We found that increasingly signiﬁ-
cant portions of the trafﬁc at these sites were not classi-
ﬁable using well-known port numbers. Indeed, at UCB
40% of all packets fall into this category [37].
All three environments support high volumes of traf-
ﬁc. At UCB, external trafﬁc currently totals about
5 TB/day, with three 2 Gbps uplinks serving about
45,000 hosts on the main campus plus several afﬁliated
institutes. The MWN provides a 1 Gbps upstream ca-
pacity to roughly 50,000 hosts at two major universities
along with additional institutes, totaling 1-3 TB a day.
LBNL also utilizes a 1 Gbps upstream link, transferring
about 1.5 TB a day for roughly 13,000 hosts.
Being research environments, the three networks’ se-
curity policies emphasize relatively unfettered connec-
tivity. The border routers impose only a small set of ﬁre-
wall restrictions (e.g., closing ports exploited by major
worms). MWN uses a more restrictive set of rules in or-
der to close ports used by the major peer-to-peer (P2P)
applications; however, since newer P2P applications cir-
cumvent such port-based blocking schemes, MWN is
moving towards a dynamic trafﬁc ﬁltering/shaping sys-
tem. In a ﬁrst step it leverages NAT gateways[16] used
to provide Internet access to most student residences, and
the IPPP2P system for detecting peer-to-peer trafﬁc [21].
In §5 we report on our experiences with running
three different example applications of our extended
NIDS on live trafﬁc. To enable a systematic evalua-
tion (see §3.2 and §6), we captured a 24-hour full trace
258
Security ’06: 15th USENIX Security Symposium
USENIX Association
at MWN’s border router on October 11, 2005, using a
high-performance Endace DAG capturing card [13]. The
trace encompasses 3.2 TB of data in 6.3 billion packets
and contains 137 million distinct connections. 76% of all
packets are TCP. The DAG card did not report any packet
losses.
3 Analysis of the Problem Space
Users have a variety of reasons for providing servicing
on non-standard ports. For example, a site’s policy might
require private services (such as a Web server) to run on
an unprivileged, often non-standard, port. Such private
servers frequently do not run continuously but pop up
from time to time, in contrast to business-critical servers.
From our operational experience, in open environments
such servers are common and not viewed as any par-
ticular problem. However, compromised computers of-
ten also run servers on non-standard ports, for example
to transfer sometimes large volumes of pirated content.
Thus, some servers on non-standard port are benign, oth-
ers are malicious; the question of how to treat these, and
how to distinguish among them, must in part be answered
by the site’s security policy.
In addition, users also use standard ports for running
applications other than those expected on the ports, for
example to circumvent security or policy enforcement
measures such as ﬁrewalls, with the most prevalent ex-
ample being the use of port 80/tcp to run P2P nodes. A
NIDS should therefore not assume that every connection
on HTTP’s well-known port is indeed a communication
using the HTTP protocol; or, even if it is well-formed
HTTP, that it reﬂects any sort of “Web” access. The same
problem, although often unintentional and not malicious,
exists for protocols such as IRC. These are not assigned
a well-known privileged port but commonly use a set of
well-known unprivileged ports. Since these ports are un-
privileged, other applications, e.g., an FTP data-transfer
connection, may happen to pick one of these ports. A
NIDS therefore may encounter trafﬁc from a different
application than the one the port number indicates. Ac-
cordingly the NIDS has to have a way to detect the appli-
cation layer protocol actually present in order to perform
application-speciﬁc protocol analysis.
3.1 Approaches to Application Detection
Besides using port numbers, two other basic approaches
for identifying application protocols have been exam-
ined in the literature: (i) statistical analysis of the trafﬁc
within a connection, and (ii) locating protocol-speciﬁc
byte patterns in the connection’s payload.
Previous work has used an analysis of interpacket de-
lays and packet size distribution to distinguish interac-
tive applications like chat and remote-login from bulk-
transfer applications such as ﬁle transfers [41]. In some
particular contexts these techniques can yield good accu-
racy, for example to separate Web-chat from regular Web
surﬁng [8]. In general, these techniques [29, 35, 23, 40],
based on statistical analysis and/or or machine learn-
ing components, have proven useful for classifying traf-
ﬁc into broad classes such as interactive, bulk transfer,
streaming, or transactional. Other approaches model
characteristics of individual protocols by means of de-
cision trees [39] or neural networks [12].
The second approach—using protocol-speciﬁc, byte-
level payload patterns, or “signatures”—takes advan-
tage of a popular misuse detection technique. Almost
all virus-scanner and NIDSs incorporate signatures into
their analysis of benign vs. malicious ﬁles or network
streams. For protocol recognition, we can use such sig-
natures to detect application-speciﬁc patterns, such as
components of an HTTP request or an IRC login se-
quence. However, there is no guarantee that such a sig-
nature is comprehensive. If it fails to detect all instances
of a given application, it exhibits false negatives. In ad-
dition, if it incorrectly attributes a connection to a given
application, it exhibits false positives.
We can also combine these types of approaches, ﬁrst
using statistical methods (or manual inspection) to clus-
ter connections, and then extracting signatures, perhaps
via machine learning techniques [17]; or using statistical
methods to identify some applications, and signatures to
identify others [41] or to reﬁne the classiﬁcation, or to
combine ports, content-signatures, and application-layer
information [6].
In the context of NIDSs, signature-based approaches
are particularly attractive because many NIDSs already
provide an infrastructure for signature-matching (§3.3),
and often signatures yield tighter protocol identiﬁcation
capabilities.
3.2 Potential of a Signature Set
To evaluate how often common protocols use non-
standard ports, and whether signatures appear capable of
detecting such uses, we examine a 24-hour full trace of
MWN’s border router, mwn-full-packets. To do so
we use the large, open source collection of application
signatures included with the l7-ﬁlter system [24]. To ap-
ply these signatures to our trace, we utilize the signature
matching engine of the open source NIDS Bro [31, 38].
Rather than running the l7-ﬁlter system itself, which is
part of the Linux netﬁlter framework [30], we convert
the signatures into Bro’s syntax, which gives us the ad-
vantages of drawing upon Bro’s built-in trace processing,
connection-oriented analysis, and powerful signature-
matching engine. We note however that while Bro and
USENIX Association
Security ’06: 15th USENIX Security Symposium
259
l7-ﬁlter perform the matching in a similar way, varying
internal semantics can lead to slightly different results,
as with any two matching engines [38].
We begin by examining the breakdown of connections
by the destination port seen in initial SYN packets. Ta-
ble 1 shows all ports accounting for more than one per-
cent of the connections. Note that for some ports the
number of raw connections can be misleading due to the
huge number of scanners and active worms, e.g., ports
445, 1042, and 1433. We consider a connection un-
successful if it either does not complete an initial TCP
handshake, or it does but does not transfer any payload.
Clearly, we cannot identify the application used by such
connections given no actual contents.
We make two observations. First, port-based proto-
col identiﬁcation offers little assistance for most of the
connections using unprivileged ports (totaling roughly
5.6 million connections). Second, the dominance of port
80 makes it highly attractive as a place for hiding con-
nections using other applications. While an HTTP pro-
tocol analyzer might notice that such connections do not
adhere to the HTTP protocol, we cannot expect that the
analyzer will then go on to detect the protocol actually in
use.
To judge if signatures can help improve application
identiﬁcation, for each of a number of popular apparent
services (HTTP, IRC, FTP, and SMTP) we examined the
proportion identiﬁed by the l7-ﬁlter signatures as indeed
running that protocol. Table 2 shows that most of the suc-
cessful connections trigger the expected signature match
(thus, the signature quality is reasonable). Only for FTP
we observe a higher percentage of false negatives. This
can be improved using a better FTP signature. However,
we also see that for each protocol we ﬁnd matches for
connections on unexpected ports, highlighting the need
for closer inspection of their payload.
The differences in Table 2 do not necessarily all arise
due to false negatives. Some may stem from connec-
tions without enough payload to accurately determine
their protocol, or those that use a different protocol. Re-
garding this latter, Table 3 shows how often a different
protocol appears on the standard ports of HTTP, IRC,
FTP and SMTP.
While inspecting the results we noticed that a connec-
tion sometimes triggers more than one signature. More
detailed analysis reveals that l7-ﬁlter contains some sig-
natures that are too general. For example, the signature
for the Finger protocol matches simply if the ﬁrst two
characters at the beginning of the connection are print-
able characters. Such a signature will be triggered by
a huge number of connections not using Finger. An-
other example comes from the “whois” signature. Ac-
cordingly, the data in Table 3 ignores matches by these
two signatures.
Port
80
6665-6669
21
25
HTTP
92.2M
1.2K
0
459
IRC
59
71.7K
0