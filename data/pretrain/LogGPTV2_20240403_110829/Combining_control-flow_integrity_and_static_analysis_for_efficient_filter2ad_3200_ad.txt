### Table 1: CFI Runtime Overheads for SPECint2000

| CFI.no-jt.no-skip (%) |
|-----------------------|
| 3.47                  |
| 14.72                 |
| 3.84                  |
| 14.45                 |
| 1.05                  |
| 3.23                  |
| 1.01                  |
| 3.77                  |
| 2.52                  |
| 4.14                  |
| 2.46                  |
| 5.73                  |
| 0.09                  |
| 0.14                  |
| 0.04                  |
| 0.09                  |
| 11.47                 |
| 25.28                 |
| 15.28                 |
| 34.11                 |
| 13.87                 |
| 82.03                 |
| 13.61                 |
| 81.73                 |
| 26.78                 |
| 67.66                 |
| 28.39                 |
| 72.96                 |
| 6.36                  |
| 22.18                 |
| 6.32                  |
| 22.29                 |
| 4.04                  |
| 4.74                  |
| 3.18                  |
| 5.68                  |
| 7.74                  |
| 24.90                 |
| 8.24                  |
| 26.76                 |

### Table 2: Runtime Overheads of Data Sandboxing Plus CFI for SPECint2000

| Program   | DS-W.CFI (%) | DS-RW.CFI.no-opt (%) | DS-RW.live (%) | DS-RW.live.in-place (%) | DS-RW.CFI (%) |
|-----------|--------------|----------------------|----------------|-------------------------|---------------|
| gzip      | 6.21         | 384.34               | 24.38          | 24.29                   | 23.66         |
| vpr       | 5.82         | 429.38               | 28.06          | 26.69                   | 25.12         |
| gcc       | 2.29         | 129.36               | 6.30           | 5.81                    | 4.96          |
| mcf       | 1.80         | 452.51               | 10.40          | 8.15                    | 5.13          |
| crafty    | 12.80        | 523.66               | 39.67          | 39.12                   | 37.70         |
| gap       | 13.16        | 1092.98              | 58.02          | 49.23                   | 44.49         |
| vortex    | 29.77        | 690.73               | 43.04          | 39.08                   | 34.55         |
| bzip2     | 14.18        | 748.27               | 23.58          | 23.65                   | 23.41         |
| twolf     | 7.55         | 476.25               | 52.91          | 48.69                   | 45.94         |
| average   | 10.40        | 547.50               | 31.57          | 29.08                   | 27.15         |

### Discussion

Table 2 presents the runtime percentage increases for data sandboxing, including the overheads from CFI. The row labeled "DS-W.CFI" contains the numbers when only writes are sandboxed. The average overhead is 10.40%, which adds approximately 2.7% on top of CFI. This overhead is relatively low, considering it sandboxes memory writes and enforces CFI.

The table also shows the overheads when both reads and writes are sandboxed. To understand the impact of the three data-sandboxing optimizations, the table presents the overheads incrementally:

- **DS-RW.CFI.no-opt**: All optimizations are disabled. A check is inserted before every memory access, and scratch registers and the flags register are saved and restored from the stack. This results in high overheads due to the costly saving and restoring operations.
- **DS-RW.CFI.live**: Liveness analysis is performed to remove unnecessary saving and restoring operations, significantly reducing the overhead.
- **DS-RW.CFI.live.in-place**: Both liveness analysis and in-place sandboxing are applied, further reducing the overhead by about 2%.
- **DS-RW.CFI**: All optimizations are enabled, including range analysis, which cuts down another 2% of the overhead. When all optimizations are on, data sandboxing adds about 19% on top of CFI. The overhead for protecting both reads and writes is modest and acceptable for applications where confidentiality is a high priority.

### Performance Comparison with Related Systems

We compare our system with PittSFIeld and XFI, two systems that use software-only techniques for protection:

- **PittSFIeld**: Reports an average of 21% for SPECint2000 for sandboxing both memory writes and jumps. Our system has a lower overhead (10.4% for CFI and write protection) and provides stronger control-flow integrity. It can additionally sandbox memory reads with acceptable overheads.
- **XFI**: We evaluated our implementation on the Independent JPEG Group’s image-decoding reference implementation. The following table compares the performance overheads of our implementation with XFI's fast-path implementation for images of different sizes:

| Size (k) | DS-W.CFI (%) | DS-RW.CFI (%) | XFI-W (%) | XFI-RW (%) |
|----------|--------------|---------------|------------|-------------|
| 4        | 2.90         | 15.53         | 18         | 78          |
| 14       | 2.32         | 13.09         | 18         | 80          |
| 63       | 9.99         | 25.27         | 17         | 75          |
| 229      | 9.09         | 14.17         | 15         | 68          |

Our implementation consistently reports lower overheads, suggesting that our optimizations are effective at reducing overheads. However, this comparison is preliminary as it is based on a single program and uses a different compiler (LLVM) compared to XFI.

### Future Work

- **Static Analysis Optimizations**: Implement more aggressive loop optimizations based on induction variable analysis to further reduce data sandboxing overhead. Additionally, CFI can benefit from static analysis, such as eliminating ID checks for computed jumps if the jump targets can be statically determined to obey the control-flow policy.
- **Portability**: Our prototype is built for x86-32. We plan to port our implementation to newer architectures, including x86-64 and ARM, which lack hardware segmentation support and should benefit more from our approach.
- **General IRMs**: The methodology of combining CFI with static analysis to reduce runtime overhead can be applied to general Inlined Reference Monitors (IRMs). For example, fine-grained memory protection and dynamic taint tracking can benefit from CFI-enabled optimizations.

### Conclusions

In this research, we explored how CFI-enabled static analysis can help build efficient and validated systems for data sandboxing, protecting both integrity and confidentiality. The combination of CFI and static analysis provides strong security, enables sound optimization strategies, is thread-safe, and can be easily integrated into the software toolchain. This combination can serve as a foundation for improving the efficiency of general inlined reference monitors for enforcing advanced security policies.

### Acknowledgments

This research is supported in part by NSF grants CCF-0915157 and CCF-0915030, a research grant from Google, and AFOSR MURI grant FA9550-09-1-0539.

### References

[1] M. Abadi, M. Budiu, ´U. Erlingsson, and J. Ligatti. Control-Flow Integrity. In 12th CCS, pages 340–353, 2005.

[2] M. Abadi, M. Budiu, ´U. Erlingsson, and J. Ligatti. Control-Flow Integrity Principles, Implementations, and Applications. ACM Transactions on Information and System Security, 13:4:1–4:40, Nov. 2009.

[3] A. V. Aho, R. Sethi, and J. D. Ullman. Compilers: Principles, Techniques, and Tools. Addison-Wesley, Reading, MA, 1986.

[4] P. Akritidis, C. Cadar, C. Raiciu, M. Costa, and M. Castro. Preventing Memory Error Exploits with WIT. In IEEE S&P, pages 263–277, 2008.

[5] P. Akritidis, M. Costa, M. Castro, and S. Hand. Baggy Bounds Checking: An Efficient and Backwards-Compatible Defense Against Out-of-Bounds Errors. In 18th Usenix Security Symposium, pages 51–66, 2009.

[6] J. Ansel, P. Marchenko, ´U. Erlingsson, E. Taylor, B. Chen, D. Schuff, D. Sehr, C. Biffle, and B. Yee. Language-Independent Sandboxing of Just-in-Time Compilation and Self-Modifying Code. In PLDI, pages 355–366, 2011.

[7] G. Balakrishnan and T. Reps. Analyzing Memory Accesses in x86 Executables. In 13th International Conference on Compiler Construction (CC), pages 5–23, 2004.

[8] M. Castro, M. Costa, J.-P. Martin, M. Peinado, P. Akritidis, A. Donnelly, P. Barham, and R. Black. Fast Byte-Granularity Software Fault Isolation. In SOSP, pages 45–58, 2009.

[9] S. Checkoway, L. Davi, A. Dmitrienko, A.-R. Sadeghi, H. Shacham, and M. Winandy. Return-Oriented Programming Without Returns. In 17th CCS, pages 559–572, 2010.

[10] J. R. Douceur, J. Elson, J. Howell, and J. R. Lorch. Leveraging Legacy Code to Deploy Desktop Applications on the Web. In OSDI, pages 339–354, 2008.

[11] ´U. Erlingsson, M. Abadi, M. Vrable, M. Budiu, and G. Necula. XFI: Software Guards for System Address Spaces. In OSDI, pages 75–88, 2006.

[12] ´U. Erlingsson and F. Schneider. SASI Enforcement of Security Policies: A Retrospective. In Proceedings of the New Security Paradigms Workshop (NSPW), pages 87–95. ACM Press, 1999.

[13] ´U. Erlingsson and F. Schneider. IRM Enforcement of Java Stack Inspection. In IEEE S&P, pages 246–255, 2000.

[14] B. Ford and R. Cox. Vx32: Lightweight User-Level Sandboxing on the x86. In USENIX Annual Technical Conference, pages 293–306, 2008.

[15] T. Garfinkel, B. Pfaff, and M. Rosenblum. Ostia: A Delegating Architecture for Secure System Call Interposition. In NDSS, 2004.

[16] I. Goldberg, D. Wagner, R. Thomas, and E. A. Brewer. A Secure Environment for Untrusted Helper Applications: Confining the Wily Hacker. In Proceedings of the 6th conference on USENIX Security Symposium, 1996.

[17] S. Ioannidis, S. M. Bellovin, and J. M. Smith. Sub-Operating Systems: A New Approach to Application Security. In ACM SIGOPS European Workshop, pages 108–115, 2002.

[18] V. Kiriansky, D. Bruening, and S. Amarasinghe. Secure Execution via Program Shepherding. In 11th Usenix Security Symposium, pages 191–206, 2002.

[19] P. Klinkoﬀ, E. Kirda, C. Kruegel, and G. Vigna. Extending .NET Security to Unmanaged Code. International Journal of Information Security, 6(6):417–428, 2007.

[20] LLVM 2.8. http://llvm.org.

[21] S. McCamant and G. Morrisett. Evaluating SFI for a CISC Architecture. In 15th Usenix Security Symposium, 2006.

[22] M. Payer and T. R. Gross. Fine-Grained User-Space Security Through Virtualization. In Proceedings of the 7th ACM SIGPLAN/SIGOPS international conference on Virtual execution environments (VEE), pages 157–168, 2011.

[23] N. Provos. Improving Host Security with System Call Policies. In 12th Usenix Security Symposium, pages 257–272, 2003.

[24] K. Scott and J. Davidson. Safe Virtual Execution Using Software Dynamic Translation. In Proceedings of the 18th Annual Computer Security Applications Conference, ACSAC ’02, pages 209–218, 2002.

[25] D. Sehr, R. Muth, C. Biffle, V. Khimenko, E. Pasko, K. Schimpf, B. Yee, and B. Chen. Adapting Software Fault Isolation to Contemporary CPU Architectures. In 19th Usenix Security Symposium, pages 1–12, 2010.

[26] H. Shacham. The Geometry of Innocent Flesh on the Bone: Return-Into-LIBC Without Function Calls (on the x86). In 14th CCS, pages 552–561, 2007.

[27] J. Siefers, G. Tan, and G. Morrisett. Robusta: Taming the Native Beast of the JVM. In 17th CCS, pages 201–211, 2010.

[28] C. Small. A Tool for Constructing Safe Extensible C++ Systems. In COOTS’97: Proceedings of the 3rd conference on USENIX Conference on Object-Oriented Technologies (COOTS), pages 174–184, 1997.

[29] D. Song, D. Brumley, H. Yin, J. Caballero, I. Jager, M. G. Kang, Z. Liang, J. Newsome, P. Poosankam, and P. Saxena. BitBlaze: A New Approach to Computer Security Via Binary Analysis. In Proceedings of the 4th International Conference on Information Systems Security. Keynote invited paper, Hyderabad, India, Dec. 2008.

[30] M. M. Swift, M. Annamalai, B. N. Bershad, and H. M. Levy. Recovering Device Drivers. In OSDI, pages 1–16, 2004.

[31] R. Wahbe, S. Lucco, T. Anderson, and S. Graham. Efficient Software-Based Fault Isolation. In SOSP, pages 203–216, New York, 1993. ACM Press.

[32] Z. Wang and X. Jiang. Hypersafe: A Lightweight Approach to Provide Lifetime Hypervisor Control-Flow Integrity. In IEEE S&P, pages 380–395, 2010.

[33] Z. Xu, B. Miller, and T. Reps. Safety Checking of Machine Code. In PLDI, pages 70–82, 2000.

[34] B. Yee, D. Sehr, G. Dardyk, B. Chen, R. Muth, T. Ormandy, S. Okasaka, N. Narula, and N. Fullagar. Native Client: A Sandbox for Portable, Untrusted x86 Native Code. In IEEE S&P, May 2009.