2−m · max
As 2n >> h, 2n >> ℓ, the maximum success probability
here is
, (1 − 2−2n ) × q22−(h+ℓ)
(cid:40)
2−2n × 2−1
(cid:40)
(cid:41)
(cid:41)
.
q2 (1 − 2−2n )
2−(h+ℓ+l )
.
– Case 3.d.ii: This case essentially reduces to the problem
of finding a different t/2-subset of elements in the SK i∗
that sums to σi∗. Again, this requires at least one element
in {0, 1}2n. The probability of this even is upper bounded
by one over the number of possible distinct t/2- subset
sums, meaning in the order of 2−2n.
– Case 3.d.iii: As the cases 3.d.1, 3.d.ii and 3.d.iii are mu-
tually exclusive, then then the probability of this case
approximately (1 − 2−m − 2−2n ). Suppose that case A
has occurred. This happens with probability smaller than
2−2n [24, 40]. Indeed, σi∗ is not known to the adversary,
and it requires at least one uniformly distributed secret
value in {0, 1}2n since | BM∗ \ BMi∗ |⩾ 1. The only thing
A knows about σi∗ is that it is the sum of at least one
uniformly secret 2n-dimensional binary vector and other
values in [t/2 − 1]2n , which may be part of σi∗. Now
di∗ ∈ BM∗ has probability 1/2. Notice that the case A and
B are complementary to each other and then B happens
with at least probability (1 − 2−2n ) [13]. Now if A occurs
then di∗ ∈ BM∗ happens with probability 1/2 as there are
exactly half of the messages of the total message space
whose 1CFF includes di∗. Now if B occurs, then B returns
breaking MM-SPR of SWIFFT with probability q2/2h+ℓ .
Therefore, total probability of B to achieve success under
case 3.d.iii is
(cid:40)
(cid:41)
(1 − 2−m − 2−2n ) · max
2−2n × 1/2, (1 − 2−2n )q2/2h+ℓ
.
As 2−2n ≈ 0, the maximum success probability here re-
duces to
(1 − 2−m − 2−2n ) · (1 − 2−2n )q22−(h+ℓ) .
(cid:40)
q2 (1 − 2−2n )2−(h+ℓ+l ), 2−2n, (1 − 2−m − 2−2n )·
Therefore, the maximum success probability of B under case
3.d will be
q12−hmax
(1 − 2−2n )q22−(h+ℓ)
(cid:41)
= q12−h (1 − 2−m − 2−2n ) · (1 − 2−2n )q22−(h+ℓ) .
xxx, yyy, zzz
Sabyasachi Karati and Reihaneh Safavi-Naini
• Case 3.e:As the elements of the list Γ is chosen at random,
then the probability of that i∗ (cid:60) Γ is 1 − q1/2h. Now we
analyze the three different cases under this situation.
– Case 3.e.i: This happens with probability with 2−m. As
case A here is exactly the same as the case 3.d.A, the case
A will happen with probability 2−2n. Then case B happens
with probability (1 − 2−2n ) given that case case 3.d.a has
occurred. Then B returns breaking MM-SPR of SWIFFT
with probability q22−(h+ℓ). Therefore, success probability
of B here is
2−m × (1 − 2−2n ) × q22−(h+ℓ) .
– Case 3.e.ii: This case essentially as the same as 3.d.ii,
meaning the probability of this event is 2−2n.
– Case 3.e.iii: This happens with probability with (1 −
2−2n −2−m ). Case B happens with probability with atleast
1 − 2−2n given that case case 3.e has occurred. Then B
returns breaking MM-SPR of SWIFFT with probability
q2/2h+ℓ . Therefore, maximum success probability of B
here is
(1 − 2−2n − 2−m ) × (1 − 2−2n ) × q22−(h+ℓ) .
Therefore, the probability of success under case 3.e is
(1 − q12−h )(1 − 2−2n − 2−m )(1 − 2−2n )q22−(h+ℓ) .
If we assume the success probability of A is ϵ, then the success
′ = max{max. success probability under Case 3.e,
probability of B is ϵ · ϵ′ where
ϵ
max. success probability under Case 3.e}
= (1 − 2−2n − 2−m )(1 − 2−2n ) · max
(cid:40)
q12−hq22−(h+ℓ),
(1 − q12−h )q22−(h+ℓ)
(cid:41)
(cid:40)
Putting q1 = 2h and q2 = 2h+ℓ, we get that
′ = (1−2−2n−2−m )(1−2−2n )·max
ϵ
For a target list of length q′ after q queries, the success probability
of B is upper-bounded by InSecMM-SPR
(H , q, q′) and that implies
2−2h2−2(h+ℓ), (1 − 2−2h )2−2(h+ℓ)
ϵ ⩽ InSecMM-SPR
(H , 2h, 2h (1 + 2ℓ ))/ϵ
′
. □
□
Estimating security level of K2SN-MSS. In [21] it was argued that
(See Equation (16) of [21]), if a hash function H is considered as
random oracle, then
(q + 1)q′
,
.
′
) =
2n′
(H , q, q
InSecMM-SPR
where HK : {0, 1}2n (cid:55)→ {0, 1}n′
In K2SN-MSS, we instantiate H by SWIFFT with parameters
ˆm = 16, ˆn = 64 and p = 257. Therefore, n′, the size of the hash
output is 576 bits.
For h = 20, ℓ = 9, m = 256, n = 512 and n′ = 576, we have
(1 − 2−2n − 2−m )(1 − 2−2n ) ≈ 1, and so,
)2−576
, (1 − 2−40
)2−58(cid:9) ≈ 2−469
max(cid:8)2−402−58
(1 + 29
ϵ ⩽
240
.
The bit-security of the signature scheme is computed as log2 (ϵ/τ ) [9],
where τ is the time (measured in the number of hash evaluation)
required for key generation, q signature generations, q verifica-
tions and the time required for A to forge a signature [40]. Key
generation requires 2h+ℓ+1 − 1 computations of SWIFFT, signing
2h signatures requires 2h × (h + 1) × 2ℓ+1 hash computations and
verification of 2h signatures requires 2h × (h + 2ℓ+1
) hash compu-
tations [13]. Therefore, the lower bound on τ is
τ ⩾ 2h+ℓ+1 + 2h × (h + 1) × 2ℓ+1 + 2h × (h + 2ℓ+1
) ≈ 235
and the bit-security of KSN-MMS for the given parameters will be
504.
4 SIMD PARALLELIZATION OF NTT
Our implementation of K2SN-MMS uses SIMD parallelization of
SWIFFT. In the following we show how ring multiplication, which
is the most costly operation in SWIFFT, can be parallelized using
SIMD instructions of avx2. We use the level of parallelization as a
parameter that can be chosen based on the setting.
Notations. We will denote a vector by bold lowercase alphabet (e.g.
z, βββ). By a single subscript, we denote a vector of dimension 64 (e.g.
zi is a vector of length 64). If we use two subscript separated by a “,”,
then it denotes a vector of length 2δ . We denote the kth component
of a vector zi (or zi, j) as zi[k] (or zi, j[k]). We use ⊕p and ⊙p as
defined in Section 2. The main computation of K2SN-MSS is the
computation of SWIFFT. We describe our SIMD parallelization of
this computation for the following parameters:
ˆn = 64, ˆm = 16, p = 257 and ω = 42 (mod 257),
(cid:41)
.
2
and so mainly computation of NTT.
These are the parameters given in [5, 28]. For these parameters, the
output of SWIFFT and дSWIFFT are elements of Z64
257. The input to
SWIFFT is from Z1024
and to дSWIFFT is from Z1024
257 . An input vec-
tor z is mapped into elements of R by partitioning the vector z into
16 sub-vectors of dimension 64 each, such that z = (z0, z1, . . . , z15) ,
where each zi can be represented as a ring element. Further assume
that each zi = (zi,0, zi,1, . . . , zi,63), with zi, j ∈ Z2 (or zi, j ∈ Z257).
the hash of z is computed by equation (4) as(cid:80)15
Let a0, a1, . . . , a ˆm−1 be the multipliers of a SWIFFT function. Then
putation in practice is by equation (5) as(cid:80)15
i =0 ai · zi. This com-
i =0 NTT(ai ) ⊙p NTT(zi )
Let yi be the NTT of zi given by yi = NTT(zi ) = (yi,0, yi,1, . . . ,
yi,63). Our objective is to parallelize the computation of yi =
NTT(zi ) for 0 ⩽ i ⩽ 15. We introduce a parameter δ that de-
termines the level of parallelization: that is a δ-parallelized compu-
tation of NTT, performs operation on 2δ components of the vector
yi. We divide yi into 64
vectors of dimension 2δ such that yi =
2δ
, where yi, ℓ =
yi,2δ ·ℓ+0, yi,2δ ·ℓ+1, . . . ,
2δ −1
yi,0, yi,1, . . . , yi,
2δ −1. Therefore, each yi, j is jth0 compo-
yi,2δ ·ℓ+2δ −1
nent of the vector yi, j1 for some 0 ⩽ j0 ⩽ 2δ −1 and 0 ⩽ j1 ⩽ 64
2δ −1.
We rewrite the j of equation (8) as j = j0 + 2δ j1, where 0 ⩽ j0 ⩽
2δ − 1 and 0 ⩽ j1 ⩽ 64
2δ − 1. As a consequence, k of the equation (8)
has to broken down into k0 and k1 as k = k0 + 64
2δ k1, where 0 ⩽
(cid:19)
(cid:17) for 0 ⩽ ℓ ⩽ 64
(cid:18)
(cid:16)
64
K2SN-MSS: An Efficient Post-Quantum Signature (Full Version)
xxx, yyy, zzz
k0 ⩽ 64
2δ − 1 and 0 ⩽ k1 ⩽ 2δ − 1. Now we compute each yi, j as,
(8)
2jk ,∀j, 0 ⩽ j ⩽ 63.
(zi,k ωk )ω
yi, j =
63(cid:88)
k =0
The equation (8) can be restated as:
=
k =0
64
yi, j0+2δ j1
63(cid:88)
(cid:18)
2δ −1(cid:88)
= αj0,k0 · βj0,k0 ,
2δ −1(cid:88)
′
y
j0,k0
(cid:18)
αj0,k0 = ω (2j0+1)k0 ,
k0=0
ω
=
βj0,k0 =
k1=0
(zi,k ωk )ω
2jk
2δ +1(cid:19) j1k0 · y
′
j0,k0 ,
(cid:19)
.
zi,k0+ 64
2δ k1
64
2δ k1 (1+2j0)
ω
where
For δ-parallelization, let yi, j1 = (yi,2δ ·j1+0, yi,2δ ·j1+1, . . . , yi,2δ ·j1+2δ −1).
We compute the components of the vectors yi, j1 in parallel for
0 ⩽ j1 ⩽ 64
(for
2δ − 1. From equation (10), we know yi,2δ ·j1+j0
2δ −1
k0=0
Therefore, the vector yi, j1 can be written as
0 ⩽ j0 ⩽ 2δ − 1) can be expressed as(cid:80) 64
(cid:42)(cid:46)(cid:46)(cid:46)(cid:44)
(cid:18)
2δ −1(cid:88)
2δ +1(cid:19) j1k0 · y
′
0,k0 , . . . ,
2δ −1(cid:88)
yi, j1 =
k0=0
k0=0
(cid:18)
ω
ω
64
64
ω
(cid:18)
2δ +1(cid:19) j1k0 · y′
2δ +1(cid:19) j1k0 · y
′
2δ −1,k0
2
j0,k0
j0,k0
j0,k0
j0,k0
as y′
Thus the vector yi, j1 can be computed from the vector y′
(y′
0,k0 , y′
2δ +1
0 ⩽ k0 ⩽ 64
On the other hand, each component y′
2δ −1,k0 ) by multiplications by scalars (ω
1,k0 , . . . , y′
2δ − 1.
of the vector y′
j0,k0
depends on αj0,k0 and βj0,k0 through the equation (11). Thus, we can
express the vector y′
= (α0,k0 · β0,k0 , α1,k0 · β1,k0 , . . . ,
α2δ −1,k0 · β2δ −1,k0 ), which can be viewed as the component-wise
multiplication of the vectors ααα j0,k0 = (α0,k0 , α1,k0 , . . . , α2δ −1,k0 ),
and βββ j0,k0 = (β0,k0 , β1,k0 , . . . , β2δ −1,k0 ).
The vectors ααα j0,k0 can be precomputed as they do not depend on
the input string. If z ∈ Z1024
, the vectors βββ j0,k0 can be precomputed
or computed in real-time during the execution and this depends on
the level of parallelization. To compute vectors yi in parallel, we
first compute vectors y′
from ααα j0,k0, and βββ j0,k0, and then using
equation (14), compute the vectors yi, j1 from the vectors y′
.
j0,k0
Details are in Section 4.1.
4.1 Parallelization of NTT when zi ∈ Z64