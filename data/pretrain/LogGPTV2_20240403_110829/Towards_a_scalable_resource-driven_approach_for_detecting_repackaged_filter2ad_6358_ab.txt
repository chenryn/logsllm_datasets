comparison.
To scale up the detection for millions of apps, we propose a
two-stage methodology that employs the divide-and-conquer
strategy to identify similar apps within small groups of app-
s. More precisely, ResDroid ﬁrst uses statistical features to
divide apps into small classes in the coarse-grained process-
ing module and then employs structural features to identify
similar apps within each group in the ﬁne-grained process-
ing module. The output is a set of potential repackaging
groups (PR-Groups) containing suspicious repackaged apps.
Our approach is rational because repackaged apps are usual-
ly similar to original apps and the process of clustering apps
in diﬀerent groups can be parallelled.
Finally, ResDroid veriﬁes whether those similar apps are
repackaged apps according to their signatures. Since the
percentage of suspicious apps is usually small, they could
be further inspected by in-depth code analysis systems [19],
dynamic analysis systems [23, 38], malware detection sys-
tems [25], or even manual veriﬁcation if necessary.
Based on the selected features, our solution can adopt dif-
ferent algorithms to ﬁnd similar apps. Here, we examine the
performance of two kinds of popular algorithms: clustering
algorithms and nearest neighbor search (NNS) algorithms in
Section 3.6 and Section 3.7, respectively.
3.2 Hardening Detection
To secure Android apps, hardening techniques and ser-
vices have emerged [3] (e.g., Bangcle2, iJiaMi3). Typically,
they encrypt an app’s classes.dex and load it into memo-
ry through java native interfaces (JNI). Hardening not on-
ly raises the bar for attackers to repackage apps, but al-
so thwarts ResDroid to extract apps’ features. To tackle
this problem, we design and implement DexDumper (Sec-
tion 4.1) to dynamically restore the classes.dex.
Before extracting features, ResDroid will check whether
the app is hardened or not by looking for patterns of hard-
ening services. For example, since Bangcle inserts a shared
library libsecexe.so into hardened apps, an app containing
such ﬁle is considered as a hardened app. Moreover, Res-
Droid will invoke DexDumper to dump the original class-
es.dex from a hardened app for feature extraction.
3.3 Major Packages and Core Resources
Not all resources are critical to an app and/or have close
relationship with major codes. To raise the bar for an at-
tacker to evade the detection by modifying features, we de-
ﬁne core resources, which are used by major packages, with
the following requirements: (1) it should be diﬃcult for an
attacker to manipulate these resources. In particular, ran-
dom manipulations by an attacker will impair an app’s func-
tionality and/or QoE, or such manipulations can be easily
ﬁltered out; (2) they are representative.
Major packages refer to important codes in an app ex-
cluding imported libraries. We created a blacklist to ﬁlter
out frequently-used ad and third-party libraries. Motivat-
ed by the module decoupling technique in [46], ResDroid
ﬁrst constructs a package dependency graph, an undirected
and weighted graph, where each vertex represents a package,
and an edge between two vertexes indicates the existence of
method invocations between them. The weight of an edge
is increased by one if it spots a method invocation between
the two packages. Then, ResDroid ranks the packages using
the PageRank algorithm [34] and selects the top X packages
as major packages.
3.4 Statistical Features
3.4.1 Deﬁnition
2http://www.bangcle.com
3http://www.ijiami.cn
Figure 2: The procedure of our resource-driven approach.
1 , ..., f (i)
15 ). The ﬁrst ﬁve dimensions (f (i)
We deﬁne 15 statistical features, which can be easily re-
trieved, and use them in the coarse-gained processing mod-
ule. Let A = {a(i)}i=1...N be a set of apps. The statisti-
cal features of each sample a(i) is represented as a vector
v(i) = (f (i)
1 , ..., f (i)
5 )
include (1) number of activities; (2) number of permission-
s, both system-deﬁned and custom ones are included; (3)
number of intent ﬁlters; (4) average number of .png ﬁles per
drawable* directory; and (5) average number of .xml ﬁles
6 , ..., f (i)
per directory in res. The next 10 dimensions (f (i)
15 )
include the average number of references to the 10 most-
referenced resources. Table 1 lists the top resources in 24,810
randomly selected apps. More features, such as number of
services, can be added to better proﬁle an app without dra-
matically increasing the complexity.
Note that we use the average number of .png and .xm-
l ﬁles instead of the total amount, because they are more
representative. For example, apps that support multiple dis-
play resolutions will have several set of drawables. For ex-
ample, drawable-hdpi contains bitmap drawables for high
screen densities while drawable-ldpi has objects for low-
density displays. As another example, ﬁles in values-zh and
values-fr provide Chinese and French supports, respective-
ly. If an app is repackaged with extra language support, the
total number of certain kinds of resources will increase but
the average values will not be aﬀected.
#
1
2
3
4
5
6
7
8
9
10
Type
id
drawable
string
color
style
dimen
layout
xml
integer
array
Total
Average
6,631,598
3,616,963
1,964,378
1,024,896
823,848
623,906
248,097
136,730
88,130
76,670
267
146
79
41
33
25
10
6
4
3
Table 1: 10 most referenced resource types in 24,810 apps
randomly selected from our dataset.
3.4.2 Comparison
Since the features’ ranges are quite diﬀerent, we normal-
15 ), where
ize v(i) and get a new vector v(i)
1 , ..., F (i)
n = (F (i)
each dimension ranges in [0, 1]. We calculate F (i)
following function:
j using the
(cid:118)(cid:117)(cid:117)(cid:116)
F (i)
j = norm(f (i)
j ) =
j − min(f (1...N )
f (i)
j
)
max(f (1...N )
j
) − min(f (1...N )
j
(1)
)
j
) and max(f (1...N )
Note that min(f (1...N )
) are the minimal
and maximal values of the jth feature for all apps in A. The
similarity between two apps a(k) and a(h) according to the
statistical features is deﬁned as:
−Dc(v
(k)
n ,v
(h)
j
(2)
s(k,h) = e
n ),
n ) is the Euclidean distance of the two nor-
n , v(h)
where Dc(v(k)
malized feature vectors.
3.5 Structural Features
The structural features cover two types of information: (1)
activity layout; (2) event handler. These features are reli-
able and representative because: (1) repackaged apps usual-
ly have the same GUI as the original apps to avoid aﬀecting
their functionality and QoE; (2) although an dedicated at-
tacker can re-implement an existing layout, it takes time to
achieve the completely same appearance and it is diﬃcult
to apply this process to all apps automatically; (3) since
GUI objects and the associated event handlers determine
the functionality of an app, attackers usually keep existing
event handlers to avoid impairing the original app’s func-
tionality. Therefore, ResDroid compares two apps’ event
handlers instead of all codes.
As an app may have multiple activity layouts and diﬀer-
ent kinds of event handlers, features extracted from a single
layout or event handlers should be well organized to form
the ﬁnal structural features. To achieve this goal, for each
app a(i) ∈ A, we ﬁrst perform static analysis to construct
its ATG and then traverse the ATG using depth-ﬁrst search
algorithm starting from the main activity of a(i). If an ap-
p has no main activity, we choose the ﬁrst activity deﬁned
in its AndroidManifest.xml. We remove the activities that
do not belong to core resources from the generated activ-
ity sequence AS(a(i)). The following layout features (Sec-
tion 3.5.1) and event handler features (Section 3.5.2) are
arranged with the order deﬁned in AS(a(i)).
3.5.1 Activity Layout Feature
For an activity act, we denote its layout as L(act). We tra-
verse L(act) using the pre-order traversing algorithm and ob-
tain an element sequence (cid:104)e1, ..., em(cid:105), where ei (i = 1, ..., m)
Coarse-grainedProcessingFine-grainedProcessingRepackagedAppsAndroidApplicationsMarket 2Market nMarket 1...StatisticalFeaturesStructuralFeaturesFeature ExtractionIdentifying Major PackagesExtracting Statistical FeaturesExtracting Structural FeaturesCore  ResourcesRepackagingVerificationPotentialRepackagingGroupsChecking &ProcessingHardened Appsstands for a GUI object, such as Button, EditText. We de-
ﬁne a function α for mapping ei to an English letter (‘a’
to ‘z’, ‘A’ to ‘Z’) according to its type. For example, But-
ton is labelled as ‘b’, EditText as ‘e’, and View as ‘v’, etc.
Since customized components are usually derived from ex-
isting components and their names may be obfuscated, we
use their ancestors’ type to label them. For instance, a Pho-
toView extending View is also labeled as ‘v’.
Following this rule, L(act) is converted into a sequence
LS(act) = (cid:104)α(e1), ..., α(em)(cid:105). For an app a(i) ∈ A and
AS(a(i)) = (cid:104)act1, ..., actn(cid:105), its layout feature will be:
LF (a(i)) = (cid:104)LS(act1), ..., LS(actn)(cid:105)
(3)
3.5.2 Event Handler Feature
Event handler feature refers to the corresponding call-
back methods. We perform static analysis on each even-
t handler and extract their method signatures [21]. Let
σ(m) denote the signature of an event handler m. Since
an activity act may have several event handlers, we repre-
sent its event handler feature as a sequence that consists
of method signatures in lexicographical order : EH(act) =
(cid:104)σ(m1), ..., σ(mk)(cid:105). Given an app a(i) ∈ A and AS(a(i)) =
(cid:104)act1, ..., actn(cid:105), its event handler feature EF (a(i)) is:
EF (a(i)) = (cid:104)EH(act1), ..., EH(actn)(cid:105)
(4)
3.5.3 Comparison
When quantifying the similarity between two apps a(k)
and a(h) using the structure features, we deﬁne the distance
between a(k) and a(h) as:
(cid:17)
(cid:17)
,
(5)
(cid:16)
(cid:16)
Df (a(k), a(h)) = wl ∗ ds
+ we ∗ ds
LF (a(k)), LF (a(h))
EF (a(k)), EF (a(h))
where wl and we are pre-deﬁned weights (the actual values
assigned to wl and we are discussed in Section 5). ds(s1, s2)
measures the distance between two sequence s1 and s2, which
is deﬁned as:
ds(s1, s2) = 1 −
length(LCS(s1, s2))
min(length(s1), length(s2))
,
(6)
where LCS(s1, s2) is the longest common sequence of s1 and
s2, and length(s) is the length of sequence s. The advantage
of LCS is that even if noise is inserted into one sequence the
ﬁnal output of ds may remain unchanged. Therefore, even
though an attacker may insert junk resources to change an
app’s structural features, ResDroid will not be aﬀected.
3.6 Clustering-based Processing
We adopt the spectral clustering [7] algorithm to cluster
apps according to the normalized statistical features. Spec-
tral clustering techniques leverage the spectrum (eigenval-
ues) of the similarity matrix of the input data to perform
dimensionality reduction before performing the clustering.
It allows us to add more features for further improving the
performance in future work.
We apply the complete-linkage hierarchical clustering al-
gorithm and the DB cluster validity index [26] to split each
coarse-grained cluster into ﬁne-grained clusters (i.e., PR-
Groups).
In hierarchical clustering, the linkage criterion
determines the distance between sets of observations. We
chose the complete-linkage criterion because it usually re-
sults in compact clusters with small diameters. Although it
may be sensitive to outliers, we can ﬁlter out outliers before
conducting the hierarchical clustering.
3.7 NNS-based Processing
Selecting Candidate Pairs
Clustering algorithms may compare every pair of apps,
thus leading to high computation complexity. NNS algo-
rithms allow us to only compare apps that are likely to be
similar and therefore dramatically reduce the comparisons.
When applying NNS algorithms, we adopt the k-d tree tech-
nique [35]. In the coarse-grained processing, we select candi-
date app pairs with the help of k-d tree. In the ﬁne-grained
processing we compare apps in pair to obtain PR-Groups.
3.7.1
We ﬁrst build a k-d tree and insert statistical feature vec-
tors v(i) (i = 1, ..., N ) to this tree (k = 15 because of the
15 dimensions). Since diﬀerent apps may have identical sta-
tistical features, we cannot insert both of them into the k-d
tree for the sake of avoiding duplicated nodes. For example,
given two apps a(i) and a(j) with the same feature vectors
(i.e., v(i) and v(j)), if a(i) is in the k-d tree, we cannot insert