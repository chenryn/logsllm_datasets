## 十四、使用 Docker 栈部署应用
大规模部署和管理包含大量小型集成服务的云原生微服务应用非常困难。
幸运的是，Docker Stacks 在这里提供帮助。它们通过提供以下功能简化了应用管理:*想要的状态，滚动更新，简单，缩放操作，健康检查，*等等！都被包装在一个很好的声明模型中。很喜欢！
不要担心如果这些流行语对你来说是新的或者听起来很复杂，你会在这一章结束时理解它们。
我们将把这一章分成通常的三个部分:
*   TLDR
*   深潜
*   命令
### 使用 Docker Stacks 部署应用-TLDR
在笔记本电脑上测试和部署简单的应用很容易，但那是业余爱好者的事。在真实的生产环境中部署和管理多服务应用……这是为专业人士准备的！
幸好书库在这里帮忙！。它们允许您在一个声明性文件中定义复杂的多服务应用。它们还提供了一种部署应用并管理其整个生命周期的简单方法—初始部署>运行状况检查>扩展>更新>回滚等等！
过程很简单。在*合成文件*中定义应用的期望状态，然后使用`docker stack`命令部署和管理它。就这样。
撰写文件包括组成应用的整个微服务栈。它还包括应用所需的所有卷、网络、机密和其他基础设施。`docker stack deploy`命令用于从单个文件部署整个应用。很简单。
为了实现所有这些，栈建立在 Docker Swarm 之上，这意味着您可以获得 Swarm 附带的所有安全性和高级功能。
简而言之，Docker 非常适合应用开发和测试。Docker Stacks 非常适合规模化生产。
### 使用 Docker Stacks 部署应用-深度潜水
如果你知道 Docker Compose，你会发现 Docker Stacks 真的很容易。事实上，在许多方面，栈都是我们一直希望 Compose 做到的——完全集成到 Docker 中，并且能够管理应用的整个生命周期。
从体系结构上讲，栈位于 Docker 应用层次结构的顶部。它们建立在*服务*之上，而服务又建立在容器之上。
我们将本章的这一部分划分如下:
*   示例应用概述
*   仔细查看栈文件
*   部署应用
*   管理应用
#### 示例应用概述
在本章的剩余部分，我们将使用流行的 **AtSea Shop** 演示应用。它位于 [GitHub](https://github.com/dockersamples/atsea-sample-shop-app) 上，在 [Apache 2.0 许可](https://github.com/dockersamples/atsea-sample-shop-app/blob/master/LICENSE)下开源。
我们正在使用这个应用，因为它适度复杂，不会大到无法在书中列出和描述。在封面之下，是一个利用证书和机密的云原生微服务应用。高级应用架构如图 14.1 所示。
![Figure 14.1 AtSea Shop high level architecture](img/figure14-1.png)
Figure 14.1 AtSea Shop high level architecture
如您所见，它包括 5 个*服务*，3 个网络，4 个机密和 3 个端口映射。当我们检查栈文件时，我们将详细看到这些。
> **注意:**在本章中提到*服务*时，我们指的是 Docker 服务对象，它是一个或多个相同的容器，在 Swarm 集群中作为单个对象进行管理。
克隆应用的 GitHub repo，以便在本地机器上拥有所有的应用源文件。
```
$ git clone https://github.com/dockersamples/atsea-sample-shop-app.git
Cloning into 'atsea-sample-shop-app'...
remote: Enumerating objects: 30, done.
remote: Counting objects: 100% (30/30), done.
remote: Compressing objects: 100% (30/30), done.
remote: Total 672 (delta 20), reused 0 (delta 0), pack-reused 642
Receiving objects: 100% (672/672), 7.29 MiB | 1.46 MiB/s, done.
Resolving deltas: 100% (217/217), done. 
```
 `该应用由几个目录和源文件组成。尽情探索吧。然而，我们将关注定义应用及其需求的`docker-stack.yml`文件。我们称之为*栈文件*。
在最高级别，它定义了 4 个顶级键。
```
version:
services:
networks:
secrets: 
```
 `**版本**表示撰写文件格式的版本。这必须是 3.0 或更高版本才能使用栈。**服务**是您定义组成应用的服务栈的地方。**网络**列出需要的网络，**机密**定义应用使用的机密。
如果您展开每个顶级键，您将看到事情如何映射到图 14.1。栈文件有五个服务，分别叫做“reverse_proxy”、“database”、“appserver”、“visualizer”和“payment_gateway”。图 14.1 也是如此。栈文件有三个网络，称为“前端层”、“后端层”和“支付”。图 14.1 也是如此。最后，栈文件有四个机密，称为“postgres_password”、“staging_token”、“revprox_key”和“revprox_cert”。图 14.1 也是如此。
```
version: "3.2"
services:
    reverse_proxy:
    database:
    appserver:
    visualizer:
    payment_gateway:
networks:
    front-tier:
    back-tier:
    payment:
secrets:
    postgres_password:
    staging_token:
    revprox_key:
    revprox_cert: 
```
 `重要的是要理解栈文件捕获并定义了整个应用的许多需求。因此，它是自我记录的，也是弥合开发和运营之间差距的一个很好的工具。
让我们仔细看看栈文件的每个部分。
#### 仔细查看栈文件
栈文件与合成文件非常相似。唯一的要求是`version:`键指定“3.0”或更高的值。请参阅 Docker 文档中的[，了解有关撰写文件版本以及与您的 Docker 版本的兼容性的最新信息。](https://docs.docker.com/compose/compose-file/)
Docker 从栈文件部署应用时首先要做的一件事是创建任何列在`networks`键下的所需网络。如果网络还不存在，Docker 会创建它们。
让我们看看栈文件中定义的网络。
##### 网络
```
networks:
  front-tier:
  back-tier:
  payment:
    driver: overlay
    driver_opts:
      encrypted: 'yes' 
```
 `栈文件描述了三个网络；`front-tier`、`back-tier`和`payment`。默认情况下，它们都将由`overlay`驱动程序创建为覆盖网络。但是`payment`网络是特殊的——它需要一个加密的数据平面。
如覆盖网络一章所述，默认情况下，所有覆盖网络的控制平面都是加密的，但您必须显式加密数据平面。控制平面用于网络管理流量，数据平面用于应用流量。加密数据平面有潜在的性能开销。
要加密数据平面，您有两种选择:
*   将`-o encrypted`标志传递给`docker network create`命令。
*   在栈文件中的`driver_opts`下指定`encrypted: 'yes'`。
加密数据平面产生的开销取决于各种因素，如流量类型和流量流量。您应该执行广泛的测试，以了解加密数据平面流量对工作负载的性能开销。这一比例约为 10%并不罕见。
如前所述，所有三个网络都将在机密和服务之前创建。
让我们看看机密。
##### 机密
机密被定义为顶级对象，我们使用的栈文件定义了四个:
```
secrets:
  postgres_password:
    external: true
  staging_token:
    external: true
  revprox_key:
    external: true
  revprox_cert:
    external: true 
```
 `注意，这四个都被定义为`external`。这意味着在部署栈之前，它们必须已经存在。
部署应用时，可以按需创建机密——只需将`external: true`替换为`file: `。但是，要做到这一点，主机的文件系统上必须已经存在一个包含未加密的机密值的明文文件。这有明显的安全隐患。
当我们开始部署应用时，我们将看到如何创建这些机密。目前，知道应用定义了四个需要预先创建的机密就足够了。
让我们看看每一项服务。
##### 服务
服务是大多数行为发生的地方。
每个服务都是包含一堆键的 JSON 集合(字典)。我们将逐一介绍，并解释每个选项的作用。
###### 反向代理服务
如您所见，`reverse_proxy`服务定义了映像、端口、机密和网络。
```
reverse_proxy:
  image: dockersamples/atseasampleshopapp_reverse_proxy
  ports:
    - "80:80"
    - "443:443"
  secrets:
    - source: revprox_cert
      target: revprox_cert
    - source: revprox_key
      target: revprox_key
  networks:
    - front-tier 
```
 `映像密钥是服务对象中唯一的强制密钥。顾名思义，它定义了将用于构建服务副本的 Docker 映像。请记住，服务是一个或多个相同的容器。
Docker 是固执己见的，所以除非您另外指定，否则**映像**将从 Docker Hub 中拉出。您可以通过在映像名称前面加上注册表的应用编程接口端点的域名来指定来自第三方注册表的映像，例如谷歌容器注册表的`gcr.io`。
Docker Stacks 和 Docker Compose 之间的一个区别是栈不支持**构建**。这意味着必须在部署栈之前构建所有映像。
**端口**键定义了两个映射:
*   `80:80`将群中的端口 80 映射到每个服务副本上的端口 80。
*   `443:443`将 Swarm 中的端口 443 映射到每个服务副本上的端口 443。
默认情况下，所有端口都使用*入口模式*进行映射。这意味着它们将被映射，并且可以从群集中的每个节点访问，甚至是没有运行副本的节点。另一种选择是*主机模式*，其中端口仅映射到运行服务副本的群节点上。但是，*主机模式*要求您使用长格式语法。例如，使用长格式语法在*主机模式*下映射端口 80 如下所示:
```
ports:
  - target: 80
    published: 80
    mode: host 
```
 `推荐使用长格式语法，因为它更容易阅读，功能更强大(支持入口模式**和**主机模式)。但是，它至少需要 3.2 版的合成文件格式。
**机密**键定义了两个机密— `revprox_cert`和`revprox_key`。这些机密必须已经存在于群中，并且必须在栈文件的顶层`secrets`部分定义。
机密作为常规文件装载到服务副本中。该文件的名称将是您在栈文件中指定为`target`值的任何名称，并且该文件将出现在 Linux 上的`/run/secrets`和 Windows 上的`C:\ProgramData\Docker\secrets`下的副本中。Linux 将`/run/secrets`装载为内存文件系统，但 Windows 没有。
本服务中定义的机密将作为`/run/secrets/revprox_cert`和`/run/secrets/revprox_key`装载在每个服务副本中。要将其中一个挂载为`/run/secrets/uber_secret`，可以在栈文件中定义如下:
```
secrets:
  - source: revprox_cert
    target: uber_secret 
```
 `**网络**密钥确保服务的所有副本都将连接到`front-tier`网络。这里指定的网络必须在`networks`顶级密钥中定义，如果还不存在，Docker 会将其创建为覆盖。
###### 数据库服务
数据库服务还定义了:映像、网络和机密。除此之外，它还引入了环境变量和放置约束。
```
database:
  image: dockersamples/atsea_db
  environment:
    POSTGRES_USER: gordonuser
    POSTGRES_DB_PASSWORD_FILE: /run/secrets/postgres_password
    POSTGRES_DB: atsea
  networks:
    - back-tier
  secrets:
    - postgres_password
  deploy:
    placement:
      constraints:
        - 'node.role == worker' 
```
 `**环境**键允许您在运行时将环境变量注入服务副本。该服务使用三个环境变量来定义数据库用户、数据库密码的位置(安装在每个服务副本中的密码)和数据库的名称。
```
environment:
  POSTGRES_USER: gordonuser
  POSTGRES_DB_PASSWORD_FILE: /run/secrets/postgres_password
  POSTGRES_DB: atsea 
```
 `更好、更安全的解决方案是将这三个值都作为机密传入，因为这样可以避免用明文变量记录数据库名称和数据库用户。
该服务还在`deploy`键下定义了*放置约束*。这确保了该服务的副本将始终在 Swarm *工作节点*上运行。