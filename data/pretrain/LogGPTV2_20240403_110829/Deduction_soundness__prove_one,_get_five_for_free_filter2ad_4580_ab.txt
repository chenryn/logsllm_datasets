symbolic models deﬁned in this paper we omit the garbage
symbols and the corresponding reduction rules for the sake
of brevity.
IMPLEMENTATION
3.
An implementation I of a symbolic model is a family of
tuples (Mη, [[·]]η, len η, openη, validη)η for η ∈ N. We usually
omit the security parameter and just write (M, [[·]], len, open,
valid) for an implementation.
{0,1}∗
M is a Turing Machine which provides concrete algorithms
working on bit-strings for the function symbols in the signa-
ture. [[·]] : T → 2
is a function that maps each type to
a set of bitstrings. len : Terms → N computes the length of a
term if interpreted as a bitstring. With open the implemen-
tation provides an algorithm to interpret bitstrings as terms.
valid is a predicate which states whether a concrete use of
the implementation is valid. For example, a correct use of an
implementation might exclude the creation of key cycles or
dynamic corruption of keys from the valid use cases. More
precisely we require the following from an implementation:
We assume a non-empty set of bitstrings [[τ ]] ⊆ {0, 1}η for
each type τ ∈ T . For the base type (cid:4), we assume [[(cid:4)]] =
{0, 1}∗
(cid:2) ∈ T with τ ≤ τ
(cid:2)
]] = ∅ otherwise (i.e., if
we require [[τ ]] (cid:2) [[τ
τ (cid:8)≤ τ
). We write [[T ]] for ∪τ∈T \{(cid:3)}[[τ ]]. Later, we often
(cid:2)
make use of a function (cid:14)c1, . . . , cn, τ(cid:15) that takes a list of
bitstrings c1, . . . , cn and a type τ and encodes c1, . . . , cn as a
(cid:2) ∈ [[τ ]]. We assume that this encoding is bijective,
bitstring c
(cid:2)
i.e., we can uniquely parse c
as (cid:14)c1, . . . , cn, τ(cid:15) again.
and for any pair of types τ, τ
]] and [[τ ]] ∩ [[τ
(cid:2)
(cid:2)
We require the Turing Machine M itself to be determinis-
tic. However, each time it is run, it is provided with a ran-
dom tape R. More speciﬁcally, we require for each f ∈ Σ
with ar(f ) = τ1 × . . . × τn → τ that is not a garbage sym-
bol that for input f M calculates a function (M f ) with
domain [[τ1]] × ··· × [[τn]] × {0, 1}∗
and range [[τ ]]. The run-
time of M and (M f ) has to be polynomial in the length
of its input. Intuitively, to generate a bitstring for a term
t = f l(t1, . . . , tn) we apply (M f ) to the bitstrings generated
for the arguments ti and some randomness (which might not
be used for deterministic function symbols). We call the re-
sulting bitstring computational interpretation of t. The ran-
domness is provided by the generate function introduced in
Section 3.
Interpretations. In cryptographic applications functions
are often randomized and the same random coins may occur
in diﬀerent places within the same term. This is the case
for instance when the same nonce occurs twice in the same
1263generateM,R(t, L):
if for some c ∈ dom(L) we have L[[c]] = t then
return c
else
for i ∈ {1, . . . , n} let (ci, L) := generateM,R(ti, L)
let r := R(t)
let c := (M f )(c1, . . . , cn; r)
let L(c) :=f l(c1, . . . , cn)) (l ∈ labelsH)
return (c, L)
Figure 1: The generate function (t is of the form
f l(t1, . . . , tn) (with possibly n = 0 and no label l for
deterministic function symbols f )).
. By dom(L) ⊆ 2
term. We use a (partially deﬁned) mapping L : {0, 1}∗ →
HTerm from bit-strings to hybrid terms to record this in-
formation. A hybrid term is either a garbage term or
f l(c1, . . . , cn) where f ∈ Σ is a function symbol of arity
n applied to bit-strings ci ∈ {0, 1}∗
{0,1}∗
we denote the domain of L, i.e. the set of bit-strings for
which L is deﬁned. The mapping L induces an interpre-
tation of bit-strings as terms. We deﬁne the interpreta-
tion of bitstring c ∈ dom(L) with respect to a mapping L
as L[[c]] := f l(L[[c1]], . . . , L[[cn]]) if L(c) = f l(c1, . . . , cn)
and L[[c]] := L(c) ifL (c) is a garbage term. We say that
a mapping L is complete, if for all (c, f l(c1, . . . , cn)) ∈ L
c1, . . . , cn ∈ dom(L). Note that L[[c]] is only deﬁned if L is
complete.
Generating function. Given a mapping L we deﬁne a
generating function that associates a concrete semantics for
terms (given the terms already interpreted in L).
The generation function uses a random tape R as a source
of randomness for M when generating the concrete interpre-
tation of terms. We assume that there is an algorithm R(t)
which maps a term t to a bitstring r ∈ {0, 1}η that should
be used as the randomness when t is generated. Even chang-
(cid:2)
ing only one label in t leads to a changed term t
for which
diﬀerent randomness will be used. Figure 1 deﬁnes the gen-
erate function given a closed term t = f l(t1, . . . , tn) and a
mapping L.
Note that generateM,R(t, L) not only returns a bit-string c
associated to t but also updates L (to remember, for exam-
ple, the value associated to t). Note also that generateM,R
depends on M and the random tape R. When needed, we
explicitly show this dependency, but in general we avoid
If a mapping L is complete, then for
it for readability.
(cid:2)
) :=generate (t, L), L
(c, L
is complete. Furthermore, the
generate function requires that, for given inputs t, L, the
:= f l(t1, . . . , tn) ∈ st(t) where
(cid:2)
following holds: For all t
l ∈ labelsA we ﬁnd a c ∈ dom(L) s.t. L[[c]] = t
and t doesn’t
contain garbage symbols carrying honest labels. This guar-
antees that all bitstrings introduced by the generate function
correspond to the application of non-garbage function sym-
bols carrying honest labels.
(cid:2)
(cid:2)
Parsing function. Conversely, we require the implemen-
tation to deﬁne a function parse to convert bit-string into
terms. The function takes a bit-string c and a mapping L
as input and returns a term t and an extended mapping L.
For parsing functions we require the concrete structure in
Figure 2 (where open : {0, 1}∗ × libs → {0, 1}∗ × HTerm a
parse(c, L):
if c ∈ dom(L) then
return (L[[c]], L)
let Lh := {(c, f l(. . .)) ∈ L : l ∈ labelsH}
let L :=
else
(cid:4)
(cid:6)
let G :=
do
(cid:2)(cid:3)
(cid:5)
(c,·)∈L open(c, Lh)
(c, gl(c)(cid:3) )
(cid:5)
let L := (L \ G) ∪
let G :=
while G (cid:8)= ∅
return (L[[c]], L)
(l(c) ∈ labelsA)
(cid:2)(cid:3)
(c, gl(c)(cid:3) ) : (c
(cid:4)
(c,·)∈G open(c, Lh)
, f (. . . , c, . . .)) ∈ L and c (cid:8)∈ dom(L)
(cid:2)
(cid:6)
Figure 2: The parsing function.
function that on call open(c, L) parses the bitstring c in pres-
ence of the library L and returns its hybrid interpretation).
The exact deﬁnition of parse is left unspeciﬁed, as it de-
pends on the particular behavior of open which is provided
by a concrete implementation. We require this structure for
the parsing function to provide a concrete context in which
the open function of diﬀerent implementations can be com-
posed. Note that the open function is only allowed to use
honestly generated bitstrings when dealing with a term. We
will furthermore only use open functions later that ignore
“foreign” bitstrings in the given library, i.e., bitstrings that
are of a data type that is not part of the implementation
open belongs to. Due to these properties the composition
of open functions is commutative. This is important for our
composition theorems later. Furthermore, we think that it
meets the intuition that the composition of diﬀerent imple-
mentations should be commutative.
Good implementation. Until now we have not restricted
the behavior of implementations in any way. However, there
are some properties we will need to hold for every implemen-
tation. We describe these properties in this section and say
that a good implementation is one that satisﬁes all of them.
We stipulate that a good implementation is length regu-
lar, i.e., len(f l(t1, . . . , tn)) := |(M f )(c1, . . . , cn; r)| depends
only on the length of the arguments ci (which are the com-
putational interpretations of the symbolic arguments ti).
We now explain what it means for an implementation
to be collision free. A collision occurs if during a call of
generateM,R(t, L) an execution of M yields a bitstring c that
is already in the domain of L. Since the library L has to be
well-deﬁned, we can either overwrite the old value L(c) with
the new one or discard the new value. Both variants are
problematic:
Overwriting changes the behavior of parse (i.e., bitstrings
may now be parsed diﬀerently). This might have severe
consequences. Imagine that the overwritten bitstring was an
honestly signed message. Now this signature looks like the
signature of a diﬀerent message symbolically; possibly like a
forgery. Note that this would not be a weakness of signatures
but of the fact that collisions can be found for bitstrings
corresponding to the signed terms. Discarding means that
a bitstring c generated for a term t might not be parsed as
1264t later which might wrongfully prevent the adversary from
winning the soundness game.
Hence we will always require our implementations to be
collision free. Details can be found in the full version of this
paper [8].
When we compose implementations later we will need that
their open functions do not interfere. Intuitively, each open
function should stick to opening the bitstrings it is respon-
sible for (i.e., that are of types belonging to the same im-
plementation the open function belongs to). We say that
an open function is type safe if it satisﬁes (i) open(c, L) =
(c, gl(cid:3)) for l ∈ labelsA if c (cid:8)∈ [[T ]] and (ii) open(c, L) =
open(c, L|[[T ]]) where L|[[T ]] := {(c, h) ∈ L : ∃τ ∈ T \ {(cid:4)}:
c ∈ [[τ ]]}. Since we need to simulate parsing later, we require
parse(c, L) (based onopen) to run in polynomial time in the
size of the library.
For technical reasons we have to stipulate some general
properties for the valid predicate, e.g., a polynomial runtime,
to get a good implementation. These details are omitted
here and can be found in [8].
4. TRANSPARENT FUNCTIONS
Typical primitives that are usually considered in sound-
ness results include encryption, signatures, hash functions,
etc.. Intuitively, such functions are eﬃciently invertible, and
the type of their output can be eﬃciently determined. An
example for such functions are data structures (i.e., pairs,
lists, XML documents, etc.). Following the ideas of [13], we
deﬁne and study soundness in presence of transparent func-
tions like these.
In this section we deﬁne the notion of a
transparent symbolic model and the corresponding transpar-
ent implementation.
A transparent symbolic model Mtran = (Ttran, ≤tran, Σtran,
Dtran) is a symbolic model where the deduction system is de-
ﬁned as follows (the label is omitted for deterministic func-
⎫⎪⎬
tion symbols):
⎪⎭
f l(tn,...,tn) l ∈ labelsA, f ∈ Σtran
t1 ··· tn
1 ≤ i ≤ n, l ∈ labels, f ∈ Σtran
Dtran =
⎧⎪⎨
⎪⎩
l(t1,...,tn)
f
ti
Formally, a transparent implementation of a transpar-
ent symbolic model M = (T ,≤, Σ,D) is an implementa-
tion (and thus adhering to the requirements from Figure 3)
Itran = (Mtran, [[·]], len, opentran, validtran) where opentran and
validtran are deﬁned explicitly below. We require two ad-
ditional modes of operation, func and proj, for the Tur-
ing Machine Mtran such that for all f ∈ Σ with ar(f ) =
τ1 × . . . × τn → τ
(Mtran func) : {0, 1}∗ → Σ ∪ {⊥}
(Mtran proj f i) : {0, 1}∗ → {0, 1}∗ ∪ {⊥}
and we have for any ci ∈ [[τi]], 1 ≤ i ≤ n, r ∈ {0, 1}η
(Mtran func)((Mtran f )(c1, . . . , cn; r)) = f
(Mtran proj f i)((Mtran f )(c1, . . . , cn; r)) = ci
Furthermore, we require (Mtran func)(c) = ⊥ for all c (cid:8)∈ [[T ]].
As expected, Mtran is required to run in polynomial time in
η for this modes of operation as well.
For transparent implementations we explicitly deﬁne the
open function opentran as in Figure 3. Note that a transpar-
ent implementation is automatically type safe: Property (i)
opentran(c, L):
if c ∈ [[T ]] ∩ dom(L) then
else if (Mtran func)(c) = ⊥ then
return (c, L(c))
ﬁnd unique τ ∈ T s.t. c ∈ [[τ ]] and
(cid:2) ∈ T with [[τ
(cid:2)
) (l(c) ∈ labelsA)
c (cid:8)∈ [[τ
]] for all τ
(cid:2)
]] (cid:2) [[τ ]]
else
τ
return (c, gl(c)
let f := (Mtran func)(c) (ar(f ) = τ1 × ··· × τn → τ )
if (Mtran proj f i)(c) = ⊥ for some i ∈ {1, . . . , n} then
else
τ
) (l(c) ∈ labelsA)
return (c, gl(c)
for i ∈ {1, . . . , n} do
let (cid:14)ci := (Mtran proj f i)((cid:14)c)
return (c, f l(c)(c1, . . . , cn)) (l(c) ∈ labelsA)
Figure 3: Parsing algorithm for a transparent im-
plementation.
is required above and property (ii) holds since it only uses
L for bitstrings of type T .
We deﬁne validtran(T) = true for all traces T, i.e., the use
of transparent functions is not restricted in any way.
5. COMPOSITION
:= T1 ∪ T2, ≤(cid:2)
:=≤1 ∪ ≤2, Σ
models and their corresponding implementations.
We deﬁne the composition of M(cid:2)
We next explain how to generically compose two symbolic
Let M1 = (T1,≤1, Σ1,D1) and M2 = (T2,≤2, Σ2,D2)
be symbolic models and I1 = (M1, [[·]]1, len 1, open1, valid1)
and I2 = (M2, [[·]]2, len 2, open2, valid2) implementations of
M1 and M2 respectively. We say that that (M1,I1) and
(M2,I2) are compatible if M1 and M2 as well as I1 and I2
meet the requirements for compositions of symbolic models
and implementations stated below respectively.
= M1 ∪ M2 of M1
and M2 if (i) Σ1 ∩ Σ2 = {g(cid:3)} and (ii ) T1 ∩ T2 = {(cid:4)} and
then have T (cid:2)
:= Σ1 ∪ Σ2 and
D(cid:2)
:= D1 ∪ D2.
The corresponding implementations I1 = (M1, [[·]]1, len 1,
open1, valid1) and I2 = (M2, [[·]]2, len 2, open2, valid2) can be
composed if (i) for all types τ1 ∈ T1 \ {(cid:4)}, τ2 ∈ T2 \ {(cid:4)} we
have [[τ1]] ∩ [[τ2]] = ∅ and (ii) the composition of I1 and I2
(as deﬁned below) is a collision-free implementation of M(cid:2)
.
We then deﬁne the composition I(cid:2)
f ) returns (M1 f ) for f ∈ Σ1
and (M2 f ) if f ∈ Σ2. This is non-ambiguous due to (i).1
Similarly, for all τ ∈ T1 we set [[τ ]]
:= [[τ ]]1 and analo-
gously for τ ∈ T2. Note that [[(cid:4)]] = [[(cid:4)]]1 = [[(cid:4)]]2 = {0, 1}∗
.
Since implementations are required to be length regular we
can also compose the length functions len 1 and len 2 in a
straightforward way to get len
= I1 ∪ I2 as follows:
The Turing machine (M
(cid:2)
(cid:2)
(cid:2)
(cid:2)
.
To compose the open functions we deﬁne
(open1 ◦ open2)(c, L):
let (c, t) := open1(c, L)