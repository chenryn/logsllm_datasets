title:TLS Proxies: Friend or Foe?
author:Mark O'Neill and
Scott Ruoti and
Kent E. Seamons and
Daniel Zappala
TLS Proxies: Friend or Foe?
Mark O’Neill, Scott Ruoti, Kent Seamons, Daniel Zappala
Brigham Young University, Department of Computer Science
PI:EMAIL, PI:EMAIL, PI:EMAIL, PI:EMAIL
ABSTRACT
We measure the prevalence and uses of TLS proxies
using a Flash tool deployed with a Google AdWords
campaign. We generate 2.9 million certiﬁcate tests and
ﬁnd that 1 in 250 TLS connections are TLS-proxied.
The majority of these proxies appear to be benevolent,
however we identify over 1,000 cases where three malware
products are using this technology nefariously. We also
ﬁnd numerous instances of negligent, duplicitous, and
suspicious behavior, some of which degrade security for
users without their knowledge. Distinguishing these
types of practices is challenging in practice, indicating a
need for transparency and user awareness.
1.
INTRODUCTION
Secure communication on the Internet is based primar-
ily on digital certiﬁcates signed by certiﬁcate authorities
and intermediate authorities. This validation system is
currently being compromised by the use of TLS proxies,
which can act as a man-in-the-middle (MitM) for TLS
connections [3]). A TLS proxy can issue a substitute
certiﬁcate for any site the user visits, so that the user
establishes an encrypted connection to the proxy rather
than the desired web site. The proxy can then decrypt
and monitor or modify all user traﬃc, before passing it
along via a second encrypted channel to the desired web
site. TLS proxies are used for a variety of legitimate
purposes, such as blocking malware, but can also be
used by malicious entities to compromise the privacy
or security of end users. Isolated attacks have been ob-
served in the wild, notably in Iran [1] and Syria [7]. The
most dangerous aspect of TLS proxies is that the user
is entirely unaware that encrypted traﬃc is being inter-
cepted by an organization or attacker; browser software
Permission to make digital or hard copies of all or part of this work for personal
or classroom use is granted without fee provided that copies are not made or
distributed for proﬁt or commercial advantage and that copies bear this notice
and the full citation on the ﬁrst page. Copyrights for components of this work
owned by others than the author(s) must be honored. Abstracting with credit is
permitted. To copy otherwise, or republish, to post on servers or to redistribute to
lists, requires prior speciﬁc permission and/or a fee. Request permissions from
permissions@acm.org.
IMC 2016, November 14 - 16, 2016, Santa Monica, CA, USA
c(cid:13) 2016 Copyright held by the owner/author(s). Publication rights licensed to
ACM. ISBN 978-1-4503-4526-2/16/11. . . $15.00
DOI: http://dx.doi.org/10.1145/2987443.2987488
still shows a lock icon during such sessions. Thus TLS
proxies are controversial because they mislead users and
compromise the end-to-end security promises made by
TLS.
Detecting the presence and prevalence of TLS proxies
is a challenging measurement problem. To detect a
proxy, we must obtain the certiﬁcate a client, such as a
web browser, actually obtains, then compare this with
the valid certiﬁcate presented by the server the client
is contacting. A mismatch indicates that some kind of
proxy, either benevolent or malicious, is intercepting the
client’s traﬃc to that particular server. To determine
the prevalence of TLS proxies, we must repeat this
measurement on as many client systems as possible.
Two recent works have found some evidence for TLS
proxies by measuring certiﬁcates received by clients.
Huang et al. measure the prevalence of TLS proxies that
intercept traﬃc from clients connecting to Facebook
[9], ﬁnding that 1 in 500 TLS connections are proxied,
mostly by corporate Internet ﬁlters and personal an-
tivirus software. In addition, 1,112 connections were
found to be intercepted by malware. Because this study
uses Flash to detect a certiﬁcate mismatch, it does not
detect proxies aﬀecting most mobile devices. The Net-
alyzer project measured certiﬁcates received by Android
apps, assessing 15,000 sessions and identifying just one
case of a TLS proxy running in an analytics app [22].
Though this is a very low rate of prevalence (30 times
less than Huang’s study), the app was found to whitelist
several sites, including Facebook. This indicates that
measurements of proxies should examine low-proﬁle sites
that are unlikely to be whitelisted.
To measure the prevalence of proxies we use a Flash
app deployed with a Google AdWords campaign. Like
Huang, our measurements use Flash to detect a certiﬁ-
cate mismatch without any user interaction. However,
the deployment via Adwords aﬀords some advantages.
First, we are able to actively measure clients, based on
how much money we spend on the advertisement, en-
abling us to collect as many as 12 million measurements
in one week by spending $750 per day. Second, we are
able to target our measurements toward a server that or-
dinarily does not receive signiﬁcant traﬃc. This enables
us to detect proxies that may intentionally whitelist a
popular site such as Facebook in order to avoid detection.
Using the AdWords campaign, we were able to test
2.9 million connections for substitute certiﬁcates. Our
ﬁndings are as follows:
• We found 11,764 proxied connections out of 2.9 mil-
lion total measurements (0.41% or approximately
1/250 of all connections) spanning 142 countries.
This rate is double that reported by Huang, which
provides evidence that some proxies may use white-
listing. We found that most substitute certiﬁcates
claim to be from benevolent TLS proxies, with
70.87% claiming to be generated by a ﬁrewall soft-
ware and 12.66% claiming to be generated by a
corporate network.
• We found over 2,000 instances of negligent and
malicious behavior. Our analysis of one parental
ﬁlter found it masks forged certiﬁcates, allowing an
attacker to easily perform a MitM attack against
the ﬁrewall’s users. In addition, we found three
malware products aﬀecting over 1,000 connections
that install a new root certiﬁcate and act as a
TLS proxy to dynamically insert advertisements
on secure sites. We also found evidence that spam-
mers are using TLS proxies in their products. We
found numerous other suspicious circumstances in
substitute certiﬁcates, such as a null Issuer Orga-
nization, falsiﬁed certiﬁcate authority signatures,
and downgraded public key sizes.
2. BACKGROUND
To validate the identity of a website such as Amazon,
the web browser relies on certiﬁcate authorities (CAs),
which digitally sign certiﬁcates vouching for the identity
of the web server. When the browser initiates a TLS
connection with a server, it retrieves the server’s certiﬁ-
cate, then must verify the certiﬁcate’s validity before
exchanging encrypted traﬃc.
Web browsers authenticate a site by validating a chain
of digital signatures from the site’s certiﬁcate back to
one of a set of trusted root certiﬁcates. These certiﬁ-
cates comprise the “root store” and are typically bundled
with the operating system or browser. For example, the
certiﬁcate for www.google.com is signed by the Google
Internet Authority G2, an intermediate certiﬁcate au-
thority run by Google. This certiﬁcate is in turn signed
by GeoTrust Global CA, a certiﬁcate authority whose
certiﬁcate is located in the root store of the browser or
operating system. A substitute certiﬁcate’s signature
should not be able to be traced back to a root store
certiﬁcate and should be rejected.
This system can be attacked by a TLS proxy inserting
itself as a man-in-the-middle between the browser and
the web server. As shown in Figure 1, when the browser
tries to open a secure connection to the web server, this
connection is instead intercepted by the proxy. The
proxy also provides a falsiﬁed, substitute certiﬁcate to
Figure 1: “Secure” session establishment with
involving a TLS proxy
the browser, so that it can impersonate the original
website. For this to work, the proxy must somehow
control a substitute certiﬁcate for the original website
that validates against the root store of the user. This
can be accomplished in a variety of ways, both benign
and malicious.
Benign ways to provide valid substitute certiﬁcate in-
clude (a) using enterprise software to supply certiﬁcates
for the root store of all computers in an organization,
(b) creating a software image using new root certiﬁcates,
or (c) installing a new root certiﬁcate with software
such as a personal ﬁrewall. Generally these methods are
used for benevolent reasons, such as blocking malware
and viruses, providing intrusion detection, or protecting
intellectual property.
Other ways of providing seemingly-valid certiﬁcates
are more nefarious. For example, malware typically has
permission to add new root certiﬁcates when it is in-
stalled inadvertently by the user. Alternatively, a rogue
certiﬁcate authority can issue any certiﬁcate it wants,
since all root certiﬁcates are allowed to sign for any do-
main. There have also been numerous reported cases of
compromised and negligent certiﬁcate authorities that
allow attackers to issue fraudulent certiﬁcates [6]. In ad-
dition, governments have the ability to coerce authorities
into granting them substitute certiﬁcates.
3. MEASUREMENT TOOL
We have developed a tool to measure the prevalence of
TLS proxies using existing, widely-deployed technologies.
The tool runs silently from the perspective of the user,
with no user action required to install or run it.
3.1 Design
Our tool works as shown in Figure 2. The client
browser connects to an ad server where the Flash ap-
plication is hosted. The application is embedded in an
advertisement, which is downloaded and automatically
run by the browser. The tool sends a ClientHello mes-
sage to the Web Server to initiate a TLS handshake.
The tool then records the ServerHello and Certifi-
cate messages received in response and terminates the
handshake. The retrieved certiﬁcates are then forwarded
to the Database Server for veriﬁcation.
To measure a TLS proxy, the Web Server must host
a simple “socket policy ﬁle.” For security reasons Flash
9.0 and above requires that applications attempting to
establish a TCP connection with a remote host ﬁrst
TLS ConnectSubstitute Certificate(1)(2)(4)Key InformationEncrypted Traffic(5)Browser(3)Web ServerTLS ConnectCertificateKey InformationTLS ProxyEncrypted TrafficIt is possible that TLS proxies could be engineered to
circumvent our measurements. At the time of our study,
our measurement methodology was not well known, so
it is unlikely that any attacker was evading detection
or tampering with our reports. However, in the case
that this methodology becomes well-known, it would be
diﬃcult to prevent dedicated attackers from modifying
their TLS proxies to avoid our measurements.
While our tool is capable of using multiple hosts si-
multaneously as the ”Web Server”, each of these hosts
must serve a socket policy ﬁle (described previously)
that allows this remote connection to occur.
4. GOOGLE ADWORDS CAMPAIGN
To achieve rapid and widespread deployment of our
measurement tool we leveraged the Google AdWords
platform. This strategy for using an advertising cam-
paign to conduct an end-user measurement study has
previously been used to study CSRF attacks [2], DNS
rebinding attacks [11], and DNSSEC deployment [10,
13]. Our study is the ﬁrst to use this same method to
measure the deployment of TLS proxies.
4.1 Deployment
The deployment of the measurement tool is given in
Figure 2. Deployment responsibilities were delegated to
the Google AdWords platform, while all reports from
the tool were sent back to a Database Server we con-
trolled. To accommodate placement in advertisements,
our measurement tool was modiﬁed to contain a visible
canvas on which we place a simplistic advertisement for
our research lab. Our measurement tool was run as soon
as the user’s browsers loaded the advertisement, and
required no interaction from the users.
For our ad campaign we leveraged the CPM (cost-
per-impression) bidding model for our campaign, which
maximizes the number of unique clients presented with
our ad. We set the Max. CPM to $10 USD. To help us
reach a global audience we indicated that our ad should
be served to all locations and languages. Additionally,
since ads are shown only on websites that match a set of
designated keywords we selected our keywords based on
phrases that were currently trending globally on Google
Trends1. We set our ad to show uniformly throughout
the day so as to collect data from users in a variety of
locations and situations (e.g., home, commuting, work).
Along with the certiﬁcate, we also recorded the IP
address of the client tested. This IP address was then
used to query the MaxMind GeoLite [17] database to
gather geolocation information.
Our Google AdWords advertising campaign ran from
January 6, 2014 to January 30, 2014. During the ﬁrst
17 days of the study we varied the amount of money
allocated to the ad campaign, but for the last week we
kept it at $500/day.
In this study we only gathered
certiﬁcate data for our own website, tlsresearch.byu.edu.
1http://www.google.com/trends/?geo
Figure 2: Using an Ad Server for TLS Proxy
Measurement
obtain permission from that host via this policy ﬁle.
Our Web Server’s socket policy ﬁle is served on port 80,
which reduces the eﬀect of captive portals, which often
block traﬃc targeting ports other than those used by
HTTP and HTTPS (e.g., airport public access WiFi).
3.2 Implementation
To implement our tool it was necessary to retrieve
the certiﬁcate used during a TLS handshake. It would
have been preferable to use JavaScript or HTML5 to
retrieve the certiﬁcate used as part of a current TLS
connection, but unfortunately there is no API available
for this. Firefox allows a plugin to request the certiﬁcate,
but plugins require manual client installation. This left
us with the alternative of establishing a plain TCP
connection with the target server and then initiating
a TLS handshake. Unfortunately, the ability to use
a plain TCP connection rules out the use of HTML5
WebSockets.
Due to these constraints, we opted to use the Adobe
Flash platform. We implemented our tool in Action-
Script using only libraries supported by the Flash 9.0
runtime, due to its nearly complete market penetration
relative to newer versions. Using the Socket API pro-
vided by Flash 9.0 we implemented functionality required
to perform a partial TLS handshake. After receiving
the full Certificate message from the Web Server the
handshake is aborted and the connection is closed. The
Flash application records and parses all certiﬁcates re-
ceived from the Certificate message (as some hosts
oﬀer certiﬁcate chains) and stores them locally until it
parses the ﬁnal one. All certiﬁcate data, in PEM for-
mat, is concatenated and then sent as an HTTP POST
request to the Database Server for analysis.
Code for the measurement tool and collected datasets
will be available for download at https://tlsresearch.byu.
edu.
3.3 Limitations
Our tool is unable to measure TLS proxies being used
against most mobile devices. An overwhelming majority