## PostgreSQL 业务数据质量 实时监控 实践 
### 作者                          
digoal                         
### 日期                           
2017-12-08                      
### 标签                    
PostgreSQL , pg_stat , 实时质量监控    
----                    
## 背景       
当业务系统越来越庞大后，各个业务线的数据对接会越来越频繁，但是也会引入一个问题。  
数据质量。  
例如上游是否去掉了一些字段，或者上游数据是否及时触达，又或者上游数据本身是否出现了问题。  
通过业务数据质量监控，可以发现这些问题。  
而PostgreSQL内置的统计信息能力，已经满足了大部分业务数据质量实时监控场景的需求。  
如果需要更加业务话、定制的数据质量监控。PostgreSQL还能支持阅后即焚，流式计算、异步消息等特性，支持实时的数据质量监控。  
## 内置功能，业务数据质量实时监控  
PostgreSQL内置统计信息如下：  
1、准实时记录数  
```  
postgres=# \d pg_class      
                     Table "pg_catalog.pg_class"      
       Column        |     Type     | Collation | Nullable | Default       
---------------------+--------------+-----------+----------+---------      
 relname             | name         |           | not null |   -- 对象名    
 relnamespace        | oid          |           | not null |   -- 对象所属的schema, 对应pg_namespace.oid    
 relpages            | integer      |           | not null |   -- 评估的页数(单位为block_size)    
 reltuples           | real         |           | not null |   -- 评估的记录数   
```  
2、准实时的每列的统计信息（空值占比、平均长度、有多少唯一值、高频词、高频词的占比、均匀分布柱状图、线性相关性、高频元素、高频元素占比、高频元素柱状图）  
详细的解释如下：  
```  
postgres=# \d pg_stats       
                     View "pg_catalog.pg_stats"      
         Column         |   Type   | Default       
------------------------+----------+---------      
 schemaname             | name     |   -- 对象所属的schema    
 tablename              | name     |   -- 对象名    
 attname                | name     |   -- 列名    
 inherited              | boolean  |   -- 是否为继承表的统计信息（false时表示当前表的统计信息，true时表示包含所有继承表的统计信息）    
 null_frac              | real     |   -- 该列空值比例    
 avg_width              | integer  |   -- 该列平均长度    
 n_distinct             | real     |   -- 该列唯一值个数（-1表示唯一，小于1表示占比，大于等于1表示实际的唯一值个数）    
 most_common_vals       | anyarray |   -- 该列高频词    
 most_common_freqs      | real[]   |   -- 该列高频词对应的出现频率    
 histogram_bounds       | anyarray |   -- 该列柱状图（表示隔出的每个BUCKET的记录数均等）    
 correlation            | real     |   -- 该列存储相关性（-1到1的区间），绝对值越小，存储越离散。小于0表示反向相关，大于0表示正向相关    
 most_common_elems      | anyarray |   -- 该列为多值类型（数组）时，多值元素的高频词    
 most_common_elem_freqs | real[]   |   -- 多值元素高频词的出现频率    
 elem_count_histogram   | real[]   |   -- 多值元素的柱状图中，每个区间的非空唯一元素个数    
```  
3、准实时的每个表的统计信息，（被全表扫多少次，使用全表扫的方法扫了多少条记录，被索引扫多少次，使用索引扫扫了多少条记录，写入多少条记录，更新多少条记录，有多少DEAD TUPLE等）。  
```  
postgres=# \d pg_stat_all_tables   
                      View "pg_catalog.pg_stat_all_tables"  
       Column        |           Type           | Default   
---------------------+--------------------------+---------  
 relid               | oid                      |   
 schemaname          | name                     |   
 relname             | name                     |   
 seq_scan            | bigint                   | -- 被全表扫多少次  
 seq_tup_read        | bigint                   | -- 使用全表扫的方法扫了多少条记录  
 idx_scan            | bigint                   | -- 被索引扫多少次  
 idx_tup_fetch       | bigint                   | -- 使用索引扫的方法扫了多少条记录  
 n_tup_ins           | bigint                   | -- 插入了多少记录  
 n_tup_upd           | bigint                   | -- 更新了多少记录  
 n_tup_del           | bigint                   | -- 删除了多少记录  
 n_tup_hot_upd       | bigint                   | -- HOT更新了多少记录  
 n_live_tup          | bigint                   | -- 多少可见记录  
 n_dead_tup          | bigint                   | -- 多少垃圾记录  
 n_mod_since_analyze | bigint                   |   
 last_vacuum         | timestamp with time zone |   
 last_autovacuum     | timestamp with time zone |   
 last_analyze        | timestamp with time zone |   
 last_autoanalyze    | timestamp with time zone |   
 vacuum_count        | bigint                   |   
 autovacuum_count    | bigint                   |   
 analyze_count       | bigint                   |   
 autoanalyze_count   | bigint                   |   
```  
4、统计信息分析调度策略  
PostgreSQL会根据表记录的变化，自动收集统计信息。调度的参数控制如下：  
```  
#track_counts = on  
#autovacuum = on                        # Enable autovacuum subprocess?  'on'  
autovacuum_naptime = 15s                # time between autovacuum runs  
#autovacuum_analyze_threshold = 50      # min number of row updates before  
                                        # analyze  
默认变更 0.1% 后就会自动收集统计信息。  
#autovacuum_analyze_scale_factor = 0.1  # fraction of table size before analyze  
```  
### 通过内置的统计信息能得到这些信息：  
1、准实时记录数  
2、每列（空值占比、平均长度、有多少唯一值、高频词、高频词的占比、均匀分布柱状图、线性相关性、高频元素、高频元素占比、高频元素柱状图）  
业务数据质量可以根据以上反馈，实时被发现。  
例子  
1、创建测试表  
```  
create table test(id int primary key, c1 int, c2 int, info text, crt_time timestamp);  
create index idx_test_1 on test (crt_time);  
```  
2、创建压测脚本  
```  
vi test.sql  
\set id random(1,10000000)  
insert into test values (:id, random()*100, random()*10000, random()::text, now()) on conflict (id) do update set crt_time=now();  
```  
3、压测  
```  
pgbench -M prepared -n -r -P 1 -f ./test.sql -c 32 -j 32 -T 1200  
```  
4、创建清除数据调度，保持30秒的数据。  
```  
delete from test where ctid = any (array(  
  select ctid from test where crt_time < now()-interval '30 second'  
));  
```  
0.1秒调度一次  
```  
psql   
delete from test where ctid = any (array(  
  select ctid from test where crt_time < now()-interval '30 second'  
));  
\watch 0.1  
```  
```  
日志如下  
DELETE 18470  
Fri 08 Dec 2017 04:31:54 PM CST (every 0.1s)  
DELETE 19572  
Fri 08 Dec 2017 04:31:55 PM CST (every 0.1s)  
DELETE 20159  
Fri 08 Dec 2017 04:31:55 PM CST (every 0.1s)  
DELETE 20143  
Fri 08 Dec 2017 04:31:55 PM CST (every 0.1s)  
DELETE 21401  
Fri 08 Dec 2017 04:31:55 PM CST (every 0.1s)  
DELETE 21956  
Fri 08 Dec 2017 04:31:56 PM CST (every 0.1s)  
DELETE 19978  
Fri 08 Dec 2017 04:31:56 PM CST (every 0.1s)  
DELETE 21916  
```  
5、实时监测统计信息  
每列统计信息  
```  
postgres=# select attname,null_frac,avg_width,n_distinct,most_common_vals,most_common_freqs,histogram_bounds,correlation from pg_stats where tablename='test';  
attname           | id  
null_frac         | 0  
avg_width         | 4  
n_distinct        | -1  
most_common_vals  |   