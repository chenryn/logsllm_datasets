### 优化后的文本

#### 汇编代码
```assembly
call *0x18(%ebx)
call *0xec(%ecx)
call *0x18(%ebx)
call *0x18(%ecx)
call *0xfc(%ebx)
call *0xfc(%ebx)
call *0x2c(%edx)
call *%esi
call *0xf8(%ebx)
call *%edx
call *0x108(%ebx)
call *%ebx
call *%ebx
call *%esi
call *%edx
0xc0155f33
call *0xc4(%ecx)
sys write
sys open
sys close
sys ioctl
sys mmap2
sys fstat64
sys getdents6
sys getdents64
sys fcntl64
```

#### 内核挂钩
- **系统调用表**
  - `syscall table[4]`
  - `syscall table[5]`
  - `syscall table[6]`
  - `syscall table[192]`
  - `syscall table[197]`
  - `syscall table[114]`
  - `syscall table[220]`
  - `syscall table[221]`
  - `syscall table[195]`
  - `syscall table[201]`

- **SELinux操作**
  - `selinux ops[59]`
  - `selinux ops[60]`
  - `selinux ops[61]`
  - `selinux ops[62]`
  - `selinux ops[63]`
  - `selinux ops[64]`
  - `selinux ops[34]`
  - `selinux ops[35]`
  - `selinux ops[46]`
  - `selinux ops[47]`
  - `selinux ops[49]`
  - `selinux ops[88]`
  - `selinux ops[112]`
  - `selinux ops[11]`

- **TTY文件操作**
  - `tty fops[4]`
  - `tty fops[8]`

- **虚拟控制台操作**
  - `dummy con[33]`
  - `vga con[7]`
  - `vga con[6]`
  - `vga ops[8]`

- **控制台操作**
  - `con ops[3]`
  - `con ops[5]`
  - `con ops[4]`
  - `con ops[2]`
  - `con ops[7]`

- **TTY线路规程**
  - `tty ldisc N TTY.write chan`
  - `tty ldisc N TTY.n tty ioctl`

- **ext3目录inode操作**
  - `ext3 dir inode operations[13] (ext3.ko)`
  - `ext3 dir inode operations[3] (ext3.ko)`

- **ext3目录操作**
  - `ext3 dir operations[14] (ext3.ko)`
  - `ext3 dir operations[6] (ext3.ko)`

- **能力操作**
  - `capability ops[47]`
  - `capability ops[6]`
  - `capability ops[63]`
  - `capability ops[46]`

- **内存管理**
  - `mm→get unmapped area`
  - `mm→unmap area`

- **进程和目录操作**
  - `pid base dentry operations[0]`
  - `proc sops[0]`
  - `proc sops[2]`
  - `proc root inode operations[1]`
  - `proc dir inode operations[1]`
  - `proc self inode operations[10]`
  - `proc sys file operations[12]`
  - `proc tgid base inode operations[1]`
  - `proc tty drivers operations[12]`
  - `proc tty drivers operations[14]`
  - `proc dentry operations[3]`
  - `pid dentry operations[3]`

- **其他**
  - `seq ops.start`
  - `seq ops.show`
  - `seq ops.next`
  - `seq ops.stop`
  - `tcp4 seq fops[12]`
  - `timer pmtmr[2]`
  - `kern table[336]`
  - `proc info file operations[2]`
  - `proc file operations[2]`
  - `proc sys file operations[2]`
  - `proc tty drivers operations[2]`
  - `tty drivers op[0]`
  - `tty drivers op[1]`
  - `tty drivers op[2]`
  - `tty drivers op[3]`
  - `proc inode.op.proc read`
  - `simple ones[1].read proc`
  - `simple ones[2].read proc`

#### 动态程序切片算法
为了确定与内核对象关联的内存位置及其内容，我们使用了程序切片算法。具体步骤如下：
1. 计算每个相关指令的两个集合：`DEF[i]` 和 `USE[i]`。
   - `DEF[i]` 包含由该指令定义的变量。
   - `USE[i]` 包含由该指令使用的变量。

2. 向后检查以找到被内核对象占用的内存位置，并确定其内容决定了寄存器值。

图3展示了在`sys_getdents64`上下文中执行的内核函数`mark_inode_dirty`的一些顺序指令。特别是，序列中包含一个HAP指令`call *%edx`，位于内存地址`0xc016b711`（图3中的第i+11行）。通过运行时监控，我们可以精确地知道哪些内存位置/寄存器被定义和/或使用。因此，我们可以直接推导出相应的目标地址（包含在`%edx`寄存器中），即`0xc885bca0`——这是LKM `ext3.ko`中的函数`ext3_dirty_inode`的入口点。显然，这是HAP指令将要跳转的目标地址，而不是相关的内核挂钩。

我们的原型进一步扩展了每个执行指令的相关语义，计算了两个集合`DEF[i]`和`USE[i]`，结果如图3所示。从HAP指令（第i+11行）开始，`USE`集合包含`%edx`寄存器，该寄存器由第i+7行的指令定义。该特定指令的`USE`集合有两个成员：`%eax`和`mem[%eax+0xc]`。最终，`%eax`指向内核对象`ext3_dir_inode_operations`，而`0xc`是该内核对象的偏移量。通过识别负责的内核对象，切片算法输出`ext3_dir_inode_operations[3]`作为相应的内核挂钩并终止。

在表1中，这是在`sys_getdents64`上下文中识别的第四个内核挂钩。注意，这个特定的内核对象是一个包含多个函数指针的跳转表。偏移量`0xc`表示它是该对象中的第四个成员函数，因为每个函数指针的大小为4字节（前四个成员函数的偏移量分别为`0x0`、`0x4`、`0x8`和`0xc`）。

#### 评估
本节介绍评估结果。我们进行了两组实验：
1. **第一组实验**（第5.1节）：监控各种安全程序的执行并识别那些可能被劫持用于隐藏目的的内核挂钩。
2. **第二组实验**（第5.2节）：通过分析一些实际的Rootkit来实证评估已识别的挂钩，看看所使用的内核挂钩是否实际上是已发现的挂钩之一。

##### 5.1 内核挂钩
在实验中，我们重点关注三种主要被Rootkit针对的资源：文件、进程和网络连接。为此，我们选择了三个不同的实用程序——`ls`、`ps`和`netstat`。这些程序来自Red Hat Linux Fedora Core 5的默认安装，运行在我们的系统上作为一个具有512MB内存的客户机VM。测试平台是一台Dell PowerEdge 2950服务器，配备Xeon 3.16GHz处理器和4GB内存，运行Scientific Linux 4.4。

在评估中，我们专注于与安全程序正常功能相关的收集跟踪部分（例如，查询感兴趣的系统状态以及最终结果输出），并排除其他无关的部分。例如，如果某些跟踪是加载例程的一部分，准备进程内存布局，则将其排除在外。

#### 表2：通过监控RedHat Fedora Core 5中的`ps -ef`命令获得的进程隐藏内核挂钩
| 执行路径 | 内核挂钩数量 |
|----------|--------------|
| `sys_read` | 17 |
| `sys_write` | 20 |
| `sys_open` | 11 |
| `sys_close` | 10 |
| `sys_time` | - |
| `sys_lseek` | - |
| `sys_ioctl` | 5 |
| `sys_mprotect` | 3 |
| `sys_getdents8` | 3 |
| `sys_getdents64` | 8 |
| `sys_mmap2` | 3 |
| `sys_stat64` | 16 |

详细信息包括：
- `syscall table[3]`, `selinux ops[5]`, `selinux ops[59]`, `capability ops[5]`, `kern table[336]`, `timer pmtmr[2]`, `proc info file operations[2]`, `proc file operations[2]`, `proc sys file operations[2]`, `proc tty drivers operations[2]`, `tty drivers op[0]`, `tty drivers op[1]`, `tty drivers op[2]`, `tty drivers op[3]`, `proc inode.op.proc read`, `simple ones[1].read proc`, `simple ones[2].read proc`
- `syscall table[4]`, `selinux ops[59]`, `dummy con[33]`, `tty fops[4]`, `con ops[2]`, `con ops[3]`, `con ops[4]`, `con ops[5]`, `vga con[6]`, `vga con[7]`, `tty ldisc N TTY.write chan`
- `syscall table[5]`, `selinux ops[34]`, `selinux ops[46]`, `selinux ops[47]`, `selinux ops[60]`, `selinux ops[88]`, `selinux ops[112]`, `capability ops[46]`, `capability ops[47]`, `pid base dentry operations[0]`, `proc sops[0]`, `proc sops[2]`, `proc root inode operations[1]`, `proc dir inode operations[1]`, `proc self inode operations[10]`, `proc sys file operations[12]`, `proc tgid base inode operations[1]`, `proc tty drivers operations[12]`, `ext3 dir inode operations[13] (ext3.ko)`, `ext3 file operations[12] (ext3.ko)`
- `syscall table[6]`, `selinux ops[35]`, `selinux ops[50]`, `selinux ops[61]`, `pid dentry operations[3]`, `proc dentry operations[3]`, `proc tty drivers operations[14]`, `proc sops[1]`, `proc sops[6]`, `proc sops[7]`
- `syscall table[13]`, `timer pmtmr[2]`
- `syscall table[19]`, `proc file operations[1]`
- `syscall table[54]`, `tty fops[8]`, `selinux ops[62]`, `con ops[7]`, `tty ldisc N TTY.n tty ioctl`
- `syscall table[125]`, `selinux ops[64]`, `capability ops[64]`
- `syscall table[141]`, `selinux ops[59]`, `proc root operations[6]`
- `syscall table[220]`, `selinux ops[59]`, `proc root operations[6]`
- `syscall table[192]`, `selinux ops[63]`, `selinux ops[11]`, `capability ops[6]`, `capability ops[63]`, `ext3 dir inode operations[3] (ext3.ko)`, `ext3 file operations[11]`, `mm→get unmapped area`
- `syscall table[195]`, `selinux ops[34]`, `selinux ops[46]`, `selinux ops[47]`, `selinux ops[49]`, `selinux ops[88]`, `selinux ops[112]`, `capability ops[46]`, `capability ops[47]`, `ext3 dir inode operations[13] (ext3.ko)`, `pid base dentry operations[0]`, `pid dentry operations[3]`, `proc root inode operations[1]`, `proc self inode operations[10]`, `proc sops[0]`, `proc tgid base inode operations[1]`
- `sys_fstat64` | 2 |
- `sys_geteuid32` | 1 |
- `sys_fcntl64` | 2 |

#### 表3：通过监控RedHat Fedora Core 5中的`netstat -atp`命令获得的网络隐藏内核挂钩
| 执行路径 | 内核挂钩数量 |
|----------|--------------|
| `sys_read` | 8 |
| `sys_write` | 12 |
| `sys_open` | 19 |
| `sys_close` | 9 |
| `sys_munmap` | 2 |
| `sys_mmap2` | 6 |
| `sys_fstat64` | 2 |

详细信息包括：
- `syscall table[3]`, `selinux ops[59]`, `seq ops.start`, `seq ops.show`, `seq ops.next`, `seq ops.stop`, `proc tty drivers operations[2]`
- `syscall table[4]`, `selinux ops[59]`, `dummy con[33]`, `con ops[2]`, `con ops[3]`, `con ops[4]`, `con ops[5]`, `tty fops[4]`, `tty ldisc N TTY.write chan`, `vga con[6]`, `vga con[7]`, `vga ops[8]`
- `syscall table[5]`, `selinux ops[34]`, `selinux ops[35]`, `selinux ops[47]`, `selinux ops[50]`, `selinux ops[60]`, `selinux ops[61]`, `selinux ops[112]`, `capability ops[47]`, `ext3 dir inode operations[13] (ext3.ko)`, `pid dentry operations[3]`, `proc root inode operations[1]`, `proc dir inode operations[1]`, `proc sops[0]`, `proc sops[1]`, `proc sops[2]`, `proc sops[6]`, `proc sops[7]`, `tcp4 seq fops[12]`
- `syscall table[6]`, `selinux ops[35]`, `selinux ops[50]`, `selinux ops[61]`, `proc dentry operations[3]`, `proc tty drivers operations[14]`, `proc sops[1]`, `proc sops[6]`, `proc sops[7]`
- `syscall table[91]`, `mm→unmap area`
- `syscall table[192]`, `selinux ops[11]`, `selinux ops[63]`, `capability ops[6]`, `capability ops[63]`, `mm→get unmapped area`
- `syscall table[197]`, `selinux ops[49]`

希望这些优化后的文本能够更清晰、连贯和专业。如果有任何进一步的修改需求，请告知。