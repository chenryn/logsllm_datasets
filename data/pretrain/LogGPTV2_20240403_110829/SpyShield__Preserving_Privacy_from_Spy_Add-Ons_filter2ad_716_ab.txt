Name
Browser
rule
Plug-in
rule
Policy
IDispatch→Invoke(Event)
(cid:3)−→decline
IWebBrowser2→get LocationURL|
IWebBrowser2→get Document|
IWebBrowser2→navigate|
IWebBrowser2→navigate2
(cid:3)−→decline
2.3 Proxy Guardian
Comments
Block an IE browser’s attempt to trigger untrusted plug-ins through
calling the invoke functions of their IDispatch interfaces.
Block untrusted plug-ins’ attempts to access current URLs
functions
and
get LocationURL,
get Document,
and
navigate2 of IWebBrowser2 interface.
the member
navigate
documents
through
calling
Without proper protection, the access-control proxy is subject to a variety of attacks. For
example, a spy add-on may tamper with the proxy’s code and data, in particular sensitive
zones and the hash database for trusted add-ons. Under some operating systems (OS)
such as Windows, an add-on may also be able to read and write the virtual memory of
its host application’s process through API calls even when it is running inside another
process [20]. To defeat these attacks, we developed proxy guardian, a kernel monitor to
provide kernel-level protection to SpyShield components.
Proxy guardian interposes on the system calls related to ﬁle systems (e.g., NtWrite
File), auto-start extensibility points (ASEP) [29] such as registry keys (e.g., NtSet
ValueKey) and processes (e.g., NtWriteVirtualMemory), which enables it to
block the attempts to access the proxy. Speciﬁcally, it ensures that only a dedicated
uninstaller can remove the proxy’s executables and data, and the ASEP for loading
it to the memory. The uninstaller itself is also under the protection and can only be
activated through both password authentication and a CAPTCHA test. Only the proxy
is allowed to change its data. User-mode processes are prevented from accessing a host
302
Z. Li, X. Wang, and J.Y. Choi
application’s process image which also includes the reference controller. In addition,
proxy guardian can keep other system resources related to SpyShield, such as DNS
resolver, from being hijacked by spy add-ons, though the same protection can also be
achieved by proper setting of untrusted executables’ privileges through the OS.
Once an attacker manages to get into the kernel, it can directly attack proxy guardian.
Such a threat can be mitigated by intercepting the system calls for loading a kernel
driver to check the legitimacy of the code being loaded. A trusted driver can be identiﬁed
by comparing its hash values with those of known reliable code, or verifying a trusted
third party’s signature it carries. This is a reasonable solution because kernel drivers
are not as diverse as user-mode applications. Actually, many of them are standard and
well-known, and their hash values are easy to obtain. This approach, however, cannot
prevent spyware from getting into the kernel through exploiting a legitimate driver’s
vulnerabilities, for example, overrun of a buffer. Countermeasures to this attack must
sit outside the OS, which we plan to study in the future research. Here, we just assume
that kernel drivers are reliable.
Another functionality of proxy guardian is to make the existence of the access-
control proxy transparent to the user and other applications. As an example, SpyShield
can be installed on Windows as a normal plug-in, without changes of other plug-ins’
registry keys; when an IE browser is trying to load untrusted plug-ins, proxy guardian
blocks its system calls and lets the plug-in manager load them instead. This also al-
lows an authorized user to easily turn off the proxy by leaving the loading procedure
unchanged. We can further apply the techniques used by kernel-mode rootkits to ma-
nipulate the interactions between untrusted add-ons and the OS so as to hide the proxy’s
process, which protects it from being detected by spyware.
3 Implementation
To study the effectiveness of SpyShield, we implemented a prototype for Internet Ex-
plorer under Windows XP using C++. The choice of IE as the host application is due
to the fact that the vast majority of known spy add-ons are in the form of IE plug-
ins. However, our design is general, which also works for other applications such as
Mozilla Firefox. In this section, we ﬁrst present the technical backgrounds of COM and
IE plug-ins, and then describe the details of our implementation.
3.1 IE Plug-in Architecture
COM Interfaces. The Component Object Model (COM) [31] is an extensible object
software architecture for building applications and systems from the modular objects
supplied by different software vendors. An object is a piece of compiled binary code
that exposes some predeﬁned services to COM clients, the service recipients. These
services are offered through a set of COM interfaces, each of which is a strongly-typed
contract between software objects to provide a collection of functions (aka., methods).
COM supports transparent cross-process interoperability which allows a client to
communicate with an object regardless of where it is running. This is achieved through
a system object encapsulating all the “legwork” associated with ﬁnding and launching
objects, and managing the communication between them. When a client is accessing
SpyShield: Preserving Privacy from Spy Add-Ons
303
an object outside its process, COM creates a “proxy” which implements the object’s
interfaces. The “proxy” acts as the object’s deputy by forwarding all the function calls
from the client, marshalling all parameters if necessary and delivering the outcomes of
the calls to the client. The remote process also accommodates a “stub” to mediate the
communications between the “proxy” and the object.
Browser Helper Object and Toolbar. A browser helper object (BHO) is a COM ob-
ject designed to expand the functionality of IE as a plug-in. A BHO object is required
to implement the IUnknown interface, IObjectWithSite and IDispatch if it
needs to subscribe to IE events during runtime. A toolbar is also a COM object serv-
ing as an IE plug-in. Compared with a BHO, it implements more interfaces to provide
more functionalities which include graphics, usually in the form of a tool band, for a
richer display and control for user interactions. A toolbar must carry four interfaces,
IUnknown, IObjectWithSite, IPersistStream and IDeskBand, and may
also involve several other interfaces such as IInputObject for focus changes of a
user input object and IDispatch for event subscription and processing.
3.2 The Access-Control Proxy
We implemented SpyShield as an access control proxy for IE plug-ins. The proxy in-
cludes a reference controller (RC) and an add-on manager (AM), two proxy components
for managing BHOs and toolbars. The reference controller is a special plug-in which
serves as both BHO and toolbar. It also contains an access control module to identify
the sensitive zone being entered and thus to permit or block function calls originated
from the browser and the add-on manager in accordance with security policies. The
add-on manager acts on the behalf of the IE browser to provide COM interfaces to the
untrusted plug-ins and mediate their communications. During the initialization stage,
the browser loads trusted plug-ins and the reference controller only, leaving the task to
import untrusted plug-ins to the add-on manager. This is achieved transparently through
a kernel driver, which we describe in the next subsection. We implemented both one-
process and two-process solutions, though here we only elaborate the second approach
in which the add-on manager is running as a separate process.
Each proxy component contains three COM objects, proxy BHO, proxy toolbar and
proxy browser. Proxy BHO/toolbar exports the COM interfaces on the plug-in’s side to
IE browsers and the reference controller. Proxy browser exports the COM interfaces on
the browser’s side to the add-on manager and untrusted plug-ins. These COM objects
work in a collaborative way: for example, if one of them acquires the access to the
IUnknown interface of an external object such as an IE browser, it passes the pointer
of the interface on to the other objects, which enables them to directly interact with that
external object. The reference controller uses its proxy BHO/toolbar as the delegate
of untrusted plug-ins to interact with browsers, and the add-on manager employs its
proxy browser as a substitute for the browsers to communicate with untrusted plug-
ins. The other COM objects only serve to exchange parameters and requests with their
counterparts in the other proxy object, and therefore are not used in our implementation
of the one-process solution.
In the follow-up subsections, we elaborate our implementation of proxy interfaces,
cross-process communication and access control mechanism.
304
Z. Li, X. Wang, and J.Y. Choi
Proxy Interfaces. Proxy browser implements a set of COM interfaces that an IE
browser uses to accommodate BHOs and toolbars, and proxy BHO/toolbar adopts the
interfaces on the plug-in’s side. These interfaces ‘wrap’ their counterparts so as to put
access control in place. For example, IE ﬁrst triggers Invoke() within our proxy’s
IDispatch interface in response to the occurrence of an event, which allows it to
decide whether to contact the same interface of untrusted plug-ins to activate their call-
back functions. Another example is an attempt from a plug-in to read the HTML ﬁles
downloaded by IE, which must go through the proxy’s IWebBrowser2 interface and
is therefore subject to its control. The COM objects within our proxy can also simulate
the behaviors of the objects they substitute. As an example, our proxy follows IE’s han-
dling of the QueryInterface() call which does not return to the caller the interface
reference of IInputObjectSite.
A technical challenge to enforcing access control comes from COM functions’ ca-
pability to pass interface pointers. Without a proper design, an untrusted plug-in may
acquire through our proxy a pointer to an IE browser’s interface for directly interacting
with that interface, which bypasses access control. Our solution is to detect such an
attempt within the proxy’s interface functions and returns to the plug-ins the pointers
to the substitutes of the requested IE interfaces. This was implemented in the follow-
ing functions: QueryInterface() in Interface IUnknown, QueryService()
in IServiceProvider, get Document() in IWebBrowser2, and Invoke()
in IDispatch. QueryInterface() is the ﬁrst function queried by plug-ins about
other interfaces. QueryService() can be used to get the interface pointers of IWeb
Browser2, IOleWindow and ITravelLogStg. Of particular interest is get
Document(), which returns a pointer to a COM object inside IE containing the
documents being downloaded. Our prototype creates a substitute of that object and
selectively copies to it the content of documents in conformation with access rules.
Invoke() adds to the complication by taking an interface pointer of IE’s IDispatch
as part of the input parameters for a plug-in’s callback function. Our proxy parses such
parameters and modiﬁes the pointer to a local substitute.
Table 2 describes the interfaces that we implemented for the access-control proxy.
Cross-process Communications. As we introduced in Section 3.1, COM provides a
mechanism which allows a client to request and receive services from an object running
in another process through the interactions between the object’s “proxy” in the client
process and “stub” in its own process. This was employed by our implementation of
Table 2. Interfaces implemented in our prototype
Proxy Browser
IWebBrowser2,
IServiceProvider,
COMPONENTS INTERFACES
IUnknown,
IOleCommandTarget,
IInputObjectSite, IOleWindow, IConnectionPointContainer, IConnectionPoint,
IWebBrowser2, IOleWindow, ITravelLogStg,
IHTMLDocument2,
IMarkupServices, ICustomDoc, IOleWindow,
IUnknown, IObjectWithSite, IDispatch,
IWebBrowser2,
IUnknown,
IOleCommandTarget, IInputObject,
IWebBrowser2
IConnectionPointContainer,
IPersistStream,
IObjectWithSite,
IDispatch,
IDeskBand,
Proxy BHO
Proxy toolbar
IOleObject,
IOleContainer,
SpyShield: Preserving Privacy from Spy Add-Ons
305
the two-process solution to achieve cross-process communications (CPC). IE 6 offers
the “proxy” and “stub” objects for all interfaces in Table 2 except IInputObject
and IInputObjectSite. The problem has been ﬁxed by IE 7 which provides
iepro xy.dll to support CPC for both interfaces. Interestingly, we found this DLL
can also be used in IE 6. Therefore, our prototype works under both IE versions.
Our two-process solution makes the add-on manager an independent process to ac-
commodate untrusted plug-ins. This design, supported by COM’s multi-threaded CPC,
helps reduce the overheads of our approach in terms of memory usage: no matter how
many IE processes have been launched, the add-on manager always stays in a single
process. This is because COM automatically directs a new IE process’s request to the
existing add-on process which forks a new thread to serve it.
Access Control. The access control component was implemented in the reference con-
troller. Whenever an IE browser visits a new website, the component acquires its URL
from the parameters of invoke triggered by the event DISPID BEFORENAVIGATE2
and compares it with those deﬁning sensitive zones. If the browser is found to be in
one of the zones, corresponding security policies are applied. Otherwise, the proxy
still needs to check the validity of the URL through a DNS query, as an invalid URL
must also be protected to defeat error-page hijacking. Our prototype sets a default
zone with the security rules in Table 1. To enforce the browser rule, the access-control
proxy blocks IE’s calls to untrusted plug-ins’ invoke function. The plug-in rule was
achieved by blocking the calls to get LocationURL, get Document, Navigate
and Navigate2 from the add-on manager. In addition, our kernel driver also inter-
cepts and blocks the attempts to directly read or write the browser’s virtual memory
from another process.
Our prototype allows an authorized party to easily deﬁne a new sensitive zone and
set security policies. It includes an IE toolbar to indicate the sensitivity of the current
website and provide an entrance to policy settings. Through that toolbar, an authorized
user can access a friendly user interface (Figure 2) to view and modify existing sensitive
zones and their policies, as well as add new ones. The simplest way to deﬁne a new
zone is just to specify the URL of a sensitive website. The default security policies for
a new zone decline all the requests from an untrusted plug-in whenever the browser
is visiting that URL. To enable the user to set the policies with ﬁner granularity, the
interface offers the options to regulate a variety of channels through which a plug-in
can access or even control the browser. For example, if ‘Browser Hijack Protection’
is enabled, the plug-in will not be allowed to invoke Navigate2 which can be used
to hijack the browser; if ‘Cookie Protection’ is set, the plug-in will be prevented from
calling the COM functions such as get cookie (in IHTMLDocument2) to acquire
the cookie(s) associated with the website being visited.
To prevent spyware from tampering with the security policies, our prototype en-
forces a strict authentication which involves both password and a CAPTCHA. Figure 2
presents a screen snapshot of this mechanism. Such an authentication mechanism will
only be invoked for customizing security policies, which is not supposed to happen
frequently and therefore should not signiﬁcantly increase users’ burden. The chance
for the setting change could be further reduced through careful construction of default
zones, which can include the URLs of the sensitive websites, such as online banks.
306
Z. Li, X. Wang, and J.Y. Choi
3.3 Kernel Driver
We implemented proxy guardian as a kernel driver for Windows XP, which is used
to prevent the add-on process from directly accessing the IE process, protect access-
control data such as security policies and the database for trusted plug-ins from being
sabotaged by spyware, and initialize the proxy transparently to avoid changes to IE and
the Windows registry. This was achieved using an API hooking technique [26]. Table 3
lists the system calls hooked in our kernel driver.
Table 3. System calls hooked in our kernel driver
CATEGORY
File system
Registry keys and
valuekeys
Process, thread
Virtual memory
SYSTEM CALL
NtWriteFile, NtDeleteFile, NtSetInformationFile
NtDeleteKey, NtRenameKey, NtReplaceKey, NtRestoreKey, SetInformationKey,
NtSetValueKey, NtDeleteValueKey, NtQueryValueKey
NtTerminateProcess, NtTerminateThread
NtAllocateVirtualMemory, NtReadVirtualMemory, NtWriteVirtualMemory
The kernel driver can block the calls from the add-on process which operates on
IE and the reference controller’s virtual memory. System calls to modify the proxy’s
data are permitted only if they come from the proxy’s process. The executables and the
registry entry of the proxy can only be deleted and changed by an uninstaller, a program
which is also protected by the kernel driver and allowed to run by authorized users only.
Such users can revise the setting of the kernel driver, for example, specifying which
ﬁles and processes should be under protection. We did not implement the mechanism
to check the drivers to be loaded into the kernel, which can be done by interposing on
other system calls.
The kernel driver can also insert our proxy between IE and untrusted plug-ins without
altering any OS settings. It classiﬁes the BHOs and toolbars recorded in registry entries1
according to their hash values to compile a list of CLSIDs for trusted plug-ins. When an
IE browser attempts to retrieve a plug-in’s registry key, the driver intercepts its system
call NtQueryValueKey and extracts the related CLSID. If it is not on the list, the
driver removes it from the output of the call and notiﬁes the add-on manager to load the
plug-in instead.
4 Evaluations
We evaluated SpyShield using our prototype. Our purpose is to understand the effec-
tiveness of our technique in containing spy add-ons and its overheads. All experiments
were conducted on a desktop with Intel Pentium 3.2GHz CPU and 1GB memory. Its
software includes Windows XP professional, Internet Explorer 7.0 and a vmware work-
station. The effectiveness tests happened inside the virtual machine with a guest OS of
1 Speciﬁcally, the registry key for BHOs’ CLSIDs is \HKLM\SOFTWARE\Microsoft
\Windows\CurrentVersion\Explorer\BrowserHelperObjects, two
registry keys for toolbars’ CLSIDs are \HKLM\SOFTWARE\Microsoft\Internet
Explorer \Toolbar and  \HKCU\Software\Microsoft\InternetExplorer
\Toolbar WebBrowser
\
SpyShield: Preserving Privacy from Spy Add-Ons
307
Windows XP professional, and Internet Explorer 6.0. The performance of our prototype
was evaluated in the host OS. We elaborate this study in the follow-up subsections.
4.1 Effectiveness
The effectiveness study aims at understanding SpyShield’s ability to withstand spyware
surveillance, which was achieved from the following perspectives. We ﬁrst compared
spy add-ons’ networking behaviors in an unprotected browser with those under our
prototype. Such behaviors usually constitute spyware’s calling-home activities and con-
tribute to the delivery of stolen data to the perpetrator. Therefore, this study reveals the
effectiveness of our technique in preventing leakage of sensitive information. Then, we
identiﬁed the COM events and calls being blocked by our access-control proxy. This
further demonstrates the role SpyShield played in disrupting spyware surveillance, as
these events and calls were used by spy add-ons to access sensitive data within an IE.
We evaluated our prototype using nine real BHOs and toolbars which are listed in
Table 4. Five of them are spy plug-ins and the rest are legitimate. Under SpyShield,
these plug-ins worked properly outside a sensitive zone. This demonstrates that our
design does not disrupt plug-ins’ legitimate operations. In the experiment, we ﬁrst in-
stalled them to the unprotected IE inside the vmware station, and navigated the IE to