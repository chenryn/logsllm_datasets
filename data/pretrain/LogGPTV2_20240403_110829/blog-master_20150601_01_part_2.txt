If a would-be client has not completed the authentication protocol in this much time, the server closes the connection.   
This prevents hung clients from occupying a connection indefinitely.   
The default is one minute (1m). This parameter can only be set in the postgresql.conf file or on the server command line.  
```  
所以不要随机的暴露端口。     
7\. 通过端口尝试CANCEL用户QUERY。    
[《PostgreSQL cancel 安全漏洞》](../201509/20150925_01.md)     
## 六、备份，容灾，恢复测试    
再好的安全策略，也需要备份。      
基于时间点的，块级别增量备份，是比较靠谱的。(你可以选择合适的文件系统，例如btrfs)      
请参考，    
[《PostgreSQL 最佳实践 - 块级增量备份(ZFS篇)方案与实战》](../201608/20160823_05.md)    
[《PostgreSQL 最佳实践 - 块级增量备份(ZFS篇)验证 - recovery test script for zfs snapshot clone + postgresql stream replication + archive》](../201608/20160823_09.md)      
另外PostgreSQL的每个数据块中都有LSN编号，使用这个也能实现块级别的增量备份，参考      
[《PostgreSQL 最佳实践 - 块级别增量备份(pg_rman baseon LSN)源码浅析与使用》](../201608/20160826_01.md)      
[《PostgreSQL 最佳实践 - pg_rman 以standby为源的备份浅析》](../201608/20160829_02.md)      
[《PostgreSQL 最佳实践 - pg_rman 数据库恢复示例 与 软件限制解说》](../201608/20160829_03.md)       
## 七、审计    
审计功能，一般是用于排查问题的，当然也是一种举证的手段，例如你的数据库遭到暴力破坏了，证据非常重要。      
这里有一些例子：      
如何跟踪postgresql.conf的配置变更?      
worker process钩子程序的妙用.      
[《PostgreSQL 配置文件变更审计 - A custom background worker process to log changes to postgresql.conf to a table》](../201308/20130806_02.md)    
如何跟踪表中的记录被哪个用户修改或插入?      
[《PostgreSQL 跟踪谁动了你的记录 - Use insert_username Tracking Who Changed a Table》](../201201/20120113_01.md)    
使用pg_log_userqueries插件, 审计指定用户,数据库或超级用户的所有执行的SQL.      
[《PostgreSQL 灵活审计插件 - PostgreSQL per database or per user audit use pg_log_userqueries》](../201201/20120119_01.md)      
使用hstore插件和触发器跟踪表的行记录变更.      
[《USE hstore store table's trace record》](../201206/20120625_01.md)      
PostgreSQL中如何跟踪表的创建时间, 表定义的修改时间      
[《PostgreSQL 跟踪DDL时间 - cann't use pg_class's trigger trace user_table's create,modify,delete Time》](../201206/20120626_01.md)    
PostgreSQL 精细化审计的实施.      
1\. 审计指定表的INSERT, UPDATE, DELETE, TRUNCATE      
2\. 审计指定用户对指定表的INSERT, UPDATE, DELETE, TRUNCATE      
3\. 审计指定表的指定数据的INSERT, UPDATE, DELETE      
4\. 如何让数据库只审计成功提交的数据, 而不记录回滚事务.      
[《PostgreSQL 审计成功事务 - PostgreSQL Fine-Grained Table,Column,Row Level Audit》](../201303/20130320_01.md)    
PostgreSQL 审计功能配置      
[《PostgreSQL 审计 - PostgreSQL Audit by Database or Role wide parameter》](../201303/20130320_02.md)    
PostgreSQL 9.3 规则系统改进, 允许在规则的values中使用多次NEW, OLD.      
使用规则跟踪数据变更, 记录新老数据.      
[《PostgreSQL 审计 - PostgreSQL 9.3 Allow OLD and NEW in multi-row VALUES within rules》](../201305/20130509_01.md)    
如何跟踪基于字段值为条件的行的变更,插入和删除呢?      
创建触发器时when的用法, 或在触发器函数中处理. 选择效率高的.      
[《PostgreSQL 触发器应用 - (触发器WHEN)前置条件过滤跟踪目标记录》](../201409/20140917_01.md)    
PostgreSQL数据库在上市公司重要应用中的SOX审计      
[《PostgreSQL数据库在上市公司重要应用中的SOX审计》](../201409/20140930_01.md)       
审计表的DDL行为, 以及哪个会话在什么时间点,通过什么IP干的.      
[《PostgreSQL 事件触发器 - DDL审计 , DDL逻辑复制 , 打造DDL统一管理入》](../201412/20141211_01.md)     
审计变更的行, 以及被变更的字段内容; 新增的行, 删除的行; 以及哪个会话在什么时间点,通过什么IP干的.      
[《PostgreSQL 触发器应用 - use trigger audit record which column modified, insert, delete.》](../201412/20141214_01.md)    
pg_audit模块      
[《PostgreSQL 审计 - pg_audit module》](../201505/20150515_01.md)    
## 八、补丁    
PostgreSQL社区的更新速度很快，几乎每天都会有commit，有些可能是FIX patch，有些可能是feature，有些可能是性能提升patch，      
正常情况下，我们只要跟随小版本的升级就可以了，一般社区遇到比较大的安全漏洞，提交补丁后马上就会发布小版本，如果没有发布小版本，      
说明没有大的安全漏洞，你可以通过 http://git.postgresql.org 实时跟踪社区的动态，自行打patch。      
大版本的更新，通常情况下大版本有大量的feature，如果需要使用的话，也可以更新到大的版本，但是请注意与应用有关的修改，模块的更新等。      
除了数据库的补丁，还需要更新操作系统的补丁，例如之前就有过这样的问题：OPENSSL的版本问题，低版本可能有漏洞，需要更新到新版本。    
## 九、外界环境安全    
1\. 应用程序是否安全？      
2\. 中间件是否安全？      
3\. 数据库所在操作系统是否安全？      
4\. 数据库所在服务器是否安全？      
5\. 存储安全，存储是否在安全的地方，有没有硬盘被拔掉的风险？      
6\. 网络安全，如机架交换机，未插网线的端口是否禁用了，是否做了MAC地址过滤或绑定？      
7\. 机房安全？      
透明加密     
[《PostgreSQL 透明加密(TDE,FDE) - 块级加密》](../201610/20161031_01.md)    
## 十、资源控制    
虽然我们前面已经控制的挺好了，但是数据库还有一种风险和网络的DDOS攻击类似，大量的用户请求可以把数据库搞慢。      
或者大量的运算量或者IO极大的请求，也很容易把数据库搞慢。      
资源控制手段举例：      
控制连接数，控制活动连接数，控制SQL执行时间，控制锁等待时间，控制事务空闲时间。      
另一方面，因为PostgreSQL的并发控制用到了多版本，所以当更新或删除数据时，老的版本依旧存在于数据库中，需要vacuum进程回收这些数据，      
目前有一个缺陷，当有长事务存在时，事务开启后产生的垃圾被视为新的垃圾，不会被回收，所以长事务容易导致数据库膨胀，太长的事务甚至可以导致数据库的xid耗尽，必须关机做vacuum freeze。      
请参考，    
[《PostgreSQL垃圾回收代码分析 - why postgresql cann't reclaim tuple is HEAPTUPLE_RECENTLY_DEAD》](../201505/20150503_01.md)    
## 十一、监控    
监控是DBA的眼睛，好的监控可以提前发现问题，将问题排除在发生之前。      
参考(zabbix, nagios)       
常用监控项请参考，      
[《PostgreSQL nagios monitor script (archive, vacuum, age, conn, rollback, standby, lock, xact, seq, index...)》](../201402/20140227_01.md)    
巡检参考      
[《PostgreSQL AWR报告》](../201611/20161123_01.md)    
https://raw.githubusercontent.com/digoal/pgsql_admin_script/master/generate_report.sh      
## 十二、开发规约    
[《PostgreSQL 数据库开发规范》](../201609/20160926_01.md)    
# 安全合规通常关注哪些点？  
1、认证：  
- 密码复杂度  
- 修改密码不可与最近若干次重复  
- 密码到期修改策略  
- 密码重复错误超出次数锁定  
- 密码错误后延迟认证  
2、链路  
- 链路加密  
- 数据库防火墙  
- 空闲会话超时   
3、数据  
- 数据存储加密  
- 数据加密类型  
- tde  
- wal日志存储加密  
4、审计  
- sql审计存储加密  
- sql审计，存储时长可配置，可下载   
- GUI、openapi审计   
- 关闭审计的行为被审计  
5、容灾、备份  
- 跨机房、跨地域容灾  
- 跨机房、跨地域备份  
6、外部访问  
- 外部访问链路加密（dblink, fdw）  
- 外部访问认证账号信息加密存储（mapping , dblink , view)  
7、鉴权  
- 数据库权限体系、  
- GUI权限体系、  
- openapi调用权限体系  
8、加密算法强度  
9、监控、告警  
- 错误监控  
- 性能监控  
- 错误告警、不可用告警、性能告警  
10、授权  
- 第三方排错授权   
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")