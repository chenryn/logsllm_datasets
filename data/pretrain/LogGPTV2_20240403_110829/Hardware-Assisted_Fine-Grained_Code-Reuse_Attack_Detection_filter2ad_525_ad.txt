7.2 Implications on Hardware Enhancement
The LBR buﬀer size of modern processors are much larger than their prede-
cessors. Using a large LBR buﬀer can dramatically reduce the amount of inter-
rupts triggered by LBR + PMU. Moreover, we call for integrating LBR and PMU
together as a single facility in the upcoming generation of processors.
8 Related Work
8.1 Code-Reuse Attacks
The idea of code-reuse attack was proposed by Solar Designer [14] in 1997.
Return-into-libc attacks are applied to applications on x86 processors in [22].
In 2007, Shacham et al. [30] proposed ROP (Return-Oriented-Programming).
Unlike return-into-libc, ROP reuses short code snippets (called gadgets) which
is more ﬂexible to construct the malicious payload. Moreover, ROP is shown to be
Turing complete in the sense that the attacker can accomplish any task. Bletsch
et al. [7] proposed Jump-Oriented Programming (JOP) which reuses gadgets
ended with indirect jump instructions to implement malicious functionality.
In 2013, Snow et al. [32] proposed just-in-time ROP to undermine varies ﬁne-
grained ASLR solutions. There are other variants of ROP attacks. For example,
String-Oriented Programming (SOP) [27]) uses a format string bug to exploit
applications that are protected by a combination of weak ASLR, DEP, and
SSP. Bosman et al. [8] proposed Signal-Oriented Programming (SROP) which
employs Linux’s SIGRETURN signal to load data from the stack into a register. If
an attacker controls the data on the stack, he can initialize one or more registers
with his data, then launches ROP or JOP attacks. Bittau et al. [6] proposed
blind-ROP. Although such an attack is launched under a special circumstance,
it demonstrates that a remote server is still vulnerable even when an attacker
does not have any information about the server application.
8.2 Mitigation
Recent years have seen a surge of new techniques to mitigate code-reuse attacks.
The two mainstream approaches are Address Space Layout Randomization
(ASLR [33]) and Control Flow Integrity (CFI [3]). Runtime monitoring is also
proposed as an alternative to ASLR and CFI.
Address Space Layout Randomization. The fundamental rationale of ASLR is
that it is diﬃcult for the adversary to collect available gadgets to construct an
ROP chain when he lacks the knowledge of the address layout of the target code,
which is achieved via randomizing the address space. Many ﬁne-grained ASLR
solutions have been proposed to increase the entropy of randomization [15,18,
25,31,38]. The limitations of ASLR are summarized below. First, many ﬁne-
grained ASLR solutions make the libraries no long sharable [5]. Because of the
changing of code positions, operands of control ﬂow instructions, such as those of
82
P. Yuan et al.
conditional jumps, vary from diﬀerent randomized instances. As a result, security
is achieved at the cost of the share-ability of libraries. Secondly, ASLR can hardly
stop just-in-time ROP [32]. If a program has memory exposure vulnerabilities,
an attacker may dynamically discover the randomized code layout and construct
the ROP payload accordingly on the ﬂy. Ironically, code inﬂation caused by ﬁne-
grained ASLR provides more available gadgets at the attacker’s disposal. Lastly,
ASLR does not withstand return-into-libc attack. As return-into-libc is proved
to be Turing complete [36], ASLR oﬀers limited security assurance.
Control Flow Integrity Enforcement. CFI schemes insert security checks before
indirect branch instruction at the compilation phase [20,23,24,35,37] or through
binary rewriting [2,43,44]. We describe several CFI schemes below.
The classic CFI implementation [2] uses function-level unique IDs as the
control-ﬂow constraint and allocates the same ID for an indirect branch instruc-
tion and its allowed targets. It rewrites the protected binary by inserting an ID
before each target and a security check before each indirect branch instruction.
The security check holds an ID and ID-comparing instructions. A control-ﬂow
transfer is allowed only if its jump-to target holds the same ID as that of security
check.
HyperSafe [37] enforces the ﬁnest-grained CFI because it statically constructs
a speciﬁc target table for each indirect branch instruction. It rewrites the pro-
tected program by replacing an indirect branch instruction with a direct jump
to an external check routine, which at run-time consults the target tables to
validate transfers before launching the original transfers.
CCFIR [43] is a 3-ID implementation according to the classic CFI work.
It classiﬁes the valid targets of all indirect branch instructions into three sets
and stores them in a dedicated code region called springboard. Generally speak-
ing, CCFIR performs security checks as other aligned-chunk CFI works such as
PittSFIeld [21] and NaCli [41], because it detects attacks by checking whether
the target is an aligned entries in the springboard. However, CCFIR allows an
indirect branch to jump to an invalid target address belonging to the assigned
set. Therefore, CCFIR only enforces coarse-grained CFI and can be circumvented
by advanced attacks [16]. Other coarse-grained solutions, including MIP [23] and
bin-CFI [44], also suﬀer from the same security issue [9,13,16,29].
Forward-CFI [35]
focuses on protecting forward indirect transfers,
i.e.
indirect call and indirect jump. It is implemented by the compiler’s CFI
enforcement on the intermediate code. Thus it can easily produce security
enhanced binaries after compilation. However, it needs a huge eﬀort to be adopted
in real-world systems as the users have to recompile all involved code. Moreover,
to protect only certain types of indirect transfers is problematic in security. Some
recently proposed schemes also suﬀer from the same limitation [20,28,42].
Runtime Monitoring. Hardware features provided by modern processors are
used to monitor the code execution in several schemes such as kBouncer [26],
ROPecker [11] and CFIMon [40]. The ﬁrst two use LBR whereas the last uses
BTS. Due to the limitation of hardware facilities, kBouncer and ROPecker can
Hardware-Assisted Fine-Grained Code-Reuse Attack Detection
83
only capture a small portion of indirect branch executions, while CFIMon has
to capture and examine executions of all types of branches. Moreover, all of
them are limited by the accuracy because they require heuristic rules to identify
attacks [9,10,13,16,29].
9 Conclusion
We have described the design and implementation of CFIGuard, a transparent
security system that identiﬁes control-ﬂow integrity violation caused by code-
reuse attacks. By creatively combining Last Branch Recording and Performance
Monitoring Unit, CFIGuard records every execution of indirect branches during
the lifetime of a process and validates the records in a separated security check by
consulting ﬁne-grained CFGs. CFIGuard introduces negligible runtime overhead
on real-world applications. We demonstrate that our prototype implementation
on Linux can eﬀectively detect various advanced attacks, including return-into-
libc and ROP.
In our future work, we plan to extend CFIGuard to protect just-in-time com-
piled code and the operating system kernel, and also to port our implementation
to Windows systems.
Acknowledgments. This work has been partly supported by National NSF of China
under Grant No. 61170070, 61572248, 61431008, 61321491; National Key Technology
R&D Program of China under Grant No. 2012BAK26B01.
References
1. IDA: http://www.hex-rays.com/ida/index.shtml
2. Abadi, M., Budiu, M., Erlingsson, ´U., Ligatti, J.: Control-ﬂow integrity. In: CCS
2005 (2005)
3. Abadi, M., Budiu, M., Erlingsson, ´U., Ligatti, J.: A theory of secure control ﬂow.
In: Lau, K.-K., Banach, R. (eds.) ICFEM 2005. LNCS, vol. 3785, pp. 111–124.
Springer, Heidelberg (2005)
4. Andersen, S., Abella, V.: Data Execution Prevention: Changes to Functionality in
Microsoft Windows XP Service Pack 2, Part 3: Memory Protection Technologies
(2004)
5. Backes, M., N¨urnberger, S.: Oxymoron: making ﬁne-grained memory randomiza-
tion practical by allowing code sharing. In: USENIX 2014 (2014)
6. Bittau, A., Belay, A., Mashtizadeh, A., Mazieres, D., Boneh, D.: Hacking blind.
In: SP 2014 (2014)
7. Bletsch, T., Jiang, X., Freeh, V.W., Liang, Z.: Jump-oriented programming: a new
class of code-reuse attack. In: ASIACCS 2011 (2011)
8. Bosman, E., Bos, H.: Framing signals - a return to portable shellcode. In: SP 2014
(2014)
9. Carlini, N., Wagner, D.: ROP is still dangerous: breaking modern defenses. In:
USENIX 2014 (2014)
10. Casteel, K.: A Systematic Analysis of Defenses Against Code Reuse Attacks. Ph.
D. thesis, Massachusetts Institute of Technology (2013)
84
P. Yuan et al.
11. Cheng, Y., Zhou, Z., Yu, M., Ding, X., Deng, R.H.: ROPecker: a generic and
practical approach for defending against ROP attacks. In: NDSS 2014 (2014)
12. Cowan, C., Pu, C., Maier, D., Hinton, H., Walpole, J., Bakke, P., Beattie, S.,
Grier, A., Wagle, P., Zhang, Q.: StackGuard: automatic adaptive detection and
prevention of buﬀer-overﬂow attacks. In: USENIX 1998 (1998)
13. Davi, L., Lehmann, D., Sadeghi, A.-R., Monrose, F.: Stitching the gadgets: on
the ineﬀectiveness of coarse-grained control-ﬂow integrity protection. In: USENIX
2014 (2014)
14. Designer, S.: Getting around non-executable stack (and ﬁx). Bugtraq (1997)
15. Gupta, A., Kerr, S., Kirkpatrick, M.S., Bertino, E.: Marlin: making it harder to
ﬁsh for gadgets. In: CCS 2012 (2012)
16. G¨okta¸s, E., Athanasopoulos, E., Bos, H., Portokalidis, G.: Out of control: over-
coming control-ﬂow integrity. In: SP 2014 (2014)
17. G¨okta¸s, E., Athanasopoulos, E., Polychronakis, M., Bos, H., Portokalidis, G.: Size
does matter: why using gadget-chain length to prevent code-reuse attacks is hard.
In: USENIX 2014 (2014)
18. Hiser, J., Nguyen-Tuong, A., Co, M., Hall, M., Davidson, J.: ILR: where’d my
gadgets go? In: SP 2012 (2012)
19. Intel: Intel 64 and IA-32 Intel Architecture software developer’s manual (2001)
20. Jang, D., Tatlock, Z., Lerner, S.: SAFEDISPATCH: securing C++ virtual calls
from memory corruption attacks. In: NDSS 2014 (2014)
21. Mccamant, S., Morrisett, G.: Evaluating SFI for a CISC architecture. In: USENIX
2006 (2006)
22. Nergal: The advanced return-into-lib (c) exploits: PaX case study. Phrack Maga-
zine, Volume 0x0b, Issue 0x3a, Phile# 0x04 of 0x0e (2001)
23. Niu, B., Tan, G.: Monitor integrity protection with space eﬃciency and separate
compilation. In: CCS 2013 (2013)
24. Niu, B., Tan, G.: Modular control-ﬂow integrity. In: PLDI 2014 (2014)
25. Pappas, V., Polychronakis, M., Keromytis, A.: Smashing the gadgets: hinder-
ing return-oriented programming using in-place code randomization. In: SP 2012
(2012)
26. Pappas, V., Polychronakis, M., Keromytis, A.D.: Transparent ROP exploit miti-
gation using indirect branch tracing. In: USENIX 2013 (2013)
27. Payer, M., Gross, T.R.: String oriented programming: when ASLR is not enough.
In: PPREW 2013 (2013)
28. Prakash, A., Hu, X., Yin, H.: vfGuard: strict protection for virtual function calls
in COTS C++ binaries. In: NDSS 2015 (2015)
29. Schuster, F., Tendyck, T., Pewny, J., Maaß, A., Steegmanns, M., Contag, M., Holz,
T.: Evaluating the eﬀectiveness of current anti-ROP defenses. In: Stavrou, A., Bos,
H., Portokalidis, G. (eds.) RAID 2014. LNCS, vol. 8688, pp. 88–108. Springer,
Heidelberg (2014)
30. Shacham, H.: The geometry of innocent ﬂesh on the bone: return-into-libc without
function calls (on the x86). In: CCS 2007 (2007)
31. Shioji, E., Kawakoya, Y., Iwamura, M., Hariu, T.: Code shredding: byte-granular
randomization of program layout for detecting code-reuse attacks. In: ACSAC 2012
(2012)
32. Snow, K.Z., Monrose, F., Davi, L., Dmitrienko, A., Liebchen, C., Sadeghi, A.-R.:
Just-in-time code reuse: on the eﬀectiveness of ﬁne-grained address space layout
randomization. In: SP 2013 (2013)
33. PaX Team: PaX address space layout randomization (ASLR) (2003)
Hardware-Assisted Fine-Grained Code-Reuse Attack Detection
85
34. PaX Team: PaX non-executable pages design & implementation (2003)
35. Tice, C., Roeder, T., Collingbourne, P., Checkoway, S., Erlingsson, ´U., Lozano,
L., Pike, G.: Enforcing forward-edge control-ﬂow integrity in GCC & LLVM. In:
USENIX 2014 (2014)
36. Tran, M., Etheridge, M., Bletsch, T., Jiang, X., Freeh, V., Ning, P.: On the expres-
siveness of return-into-libc attacks. In: Sommer, R., Balzarotti, D., Maier, G. (eds.)
RAID 2011. LNCS, vol. 6961, pp. 121–141. Springer, Heidelberg (2011)
37. Wang, Z., Jiang, X.: HyperSafe: a lightweight approach to provide lifetime hyper-
visor control-ﬂow integrity. In: SP 2010 (2010)
38. Wartell, R., Mohan, V., Hamlen, K.W., Lin, Z.: Binary stirring: self-randomizing
instruction addresses of legacy x86 binary code. In: CCS 2012 (2012)
39. Wilander, J., Nikiforakis, N., Younan, Y., Kamkar, M., Joosen, W.: RIPE: runtime
intrusion prevention evaluator. In: ACSAC 2011 (2011)
40. Xia, Y., Liu, Y., Chen, H., Zang, B.: CFIMon: detecting violation of control ﬂow
integrity using performance counters. In: DSN 2012 (2012)
41. Yee, B., Sehr, D., Dardyk, G., Chen, J.B., Muth, R., Ormandy, T., Okasaka, S.,
Narula, N., Fullagar, N.: Native client: a sandbox for portable, untrusted x86 native
code. In: SP 2009 (2009)
42. Zhang, C., Song, C., Chen, K.Z., Chen, Z., Song, D.: VTint: defending virtual
function tables integrity. In: NDSS 2015 (2015)
43. Zhang, C., Wei, T., Chen, Z., Duan, L., Szekeres, L., McCamant, S., Song, D., Zou,
W.: Practical control ﬂow integrity and randomization for binary executables. In:
SP 2013 (2013)
44. Zhang, M., Sekar, R.: Control ﬂow integrity for COTS binaries. In: USENIX 2013
(2013)