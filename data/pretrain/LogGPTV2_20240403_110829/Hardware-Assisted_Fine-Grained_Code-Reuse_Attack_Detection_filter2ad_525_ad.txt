### 7.2 Implications on Hardware Enhancement

Modern processors feature significantly larger Last Branch Record (LBR) buffers compared to their predecessors. Utilizing a large LBR buffer can substantially reduce the number of interrupts triggered by LBR and Performance Monitoring Unit (PMU) interactions. We advocate for the integration of LBR and PMU into a single, unified facility in future processor generations.

### 8 Related Work

#### 8.1 Code-Reuse Attacks

The concept of code-reuse attacks was introduced by Solar Designer in 1997 [14]. In 2001, Nergal demonstrated return-into-libc attacks on x86 processors [22]. In 2007, Shacham et al. proposed Return-Oriented Programming (ROP) [30], which reuses short code snippets (gadgets) to construct malicious payloads. Unlike return-into-libc, ROP is more flexible and has been shown to be Turing complete, allowing attackers to perform any task. Bletsch et al. [7] introduced Jump-Oriented Programming (JOP), which reuses gadgets ending with indirect jump instructions to implement malicious functionality.

In 2013, Snow et al. [32] presented just-in-time ROP to circumvent fine-grained Address Space Layout Randomization (ASLR) solutions. Other variants of ROP attacks include String-Oriented Programming (SOP) [27], which exploits format string bugs in applications protected by weak ASLR, Data Execution Prevention (DEP), and Stack Smashing Protector (SSP). Bosman et al. [8] proposed Signal-Oriented Programming (SROP), which uses Linux's SIGRETURN signal to load data from the stack into a register, enabling the attacker to initialize registers and launch ROP or JOP attacks. Bittau et al. [6] introduced blind-ROP, demonstrating that remote servers remain vulnerable even when an attacker lacks information about the server application.

#### 8.2 Mitigation Techniques

Recent years have seen the development of various techniques to mitigate code-reuse attacks. The primary approaches are Address Space Layout Randomization (ASLR) and Control Flow Integrity (CFI). Runtime monitoring is also proposed as an alternative to these methods.

**Address Space Layout Randomization (ASLR)**: ASLR randomizes the address space to make it difficult for attackers to collect gadgets and construct ROP chains. Fine-grained ASLR solutions [15, 18, 25, 31, 38] aim to increase the entropy of randomization. However, ASLR has several limitations. First, many fine-grained ASLR solutions make libraries non-shareable [5] due to the changing positions of code and control flow instructions. Second, ASLR is ineffective against just-in-time ROP [32], as memory exposure vulnerabilities allow attackers to dynamically discover the randomized code layout. Additionally, code inflation caused by fine-grained ASLR provides more gadgets for attackers. Lastly, ASLR does not prevent return-into-libc attacks, which are Turing complete [36].

**Control Flow Integrity (CFI)**: CFI schemes insert security checks before indirect branch instructions during compilation [20, 23, 24, 35, 37] or through binary rewriting [2, 43, 44]. Here are some notable CFI implementations:

- **Classic CFI** [2]: Uses function-level unique IDs as control-flow constraints, ensuring that indirect branches only transfer to targets with matching IDs.
- **HyperSafe** [37]: Enforces the finest-grained CFI by constructing specific target tables for each indirect branch instruction, replacing indirect branches with direct jumps to external check routines.
- **CCFIR** [43]: A 3-ID implementation that classifies valid targets into three sets stored in a dedicated code region called the springboard. It allows indirect branches to jump to invalid addresses within the assigned set, making it susceptible to advanced attacks.
- **Forward-CFI** [35]: Focuses on protecting forward indirect transfers (indirect calls and jumps) by enforcing CFI at the compiler level. While it can produce security-enhanced binaries, it requires recompiling all involved code, which is impractical for real-world systems.

**Runtime Monitoring**: Modern processors' hardware features, such as LBR and Branch Trace Storage (BTS), are used in runtime monitoring schemes like kBouncer [26], ROPecker [11], and CFIMon [40]. These schemes capture and examine branch executions but are limited by the hardware's capacity and the need for heuristic rules to identify attacks [9, 10, 13, 16, 29].

### 9 Conclusion

We have described the design and implementation of CFIGuard, a transparent security system that identifies control-flow integrity violations caused by code-reuse attacks. By combining Last Branch Recording and Performance Monitoring Unit, CFIGuard records every execution of indirect branches during a process's lifetime and validates these records using fine-grained Control Flow Graphs (CFGs). CFIGuard introduces minimal runtime overhead and effectively detects advanced attacks, including return-into-libc and ROP.

In future work, we plan to extend CFIGuard to protect just-in-time compiled code and the operating system kernel, and to port our implementation to Windows systems.

### Acknowledgments

This work was partly supported by the National NSF of China under Grant Nos. 61170070, 61572248, 61431008, 61321491, and the National Key Technology R&D Program of China under Grant No. 2012BAK26B01.

### References

[References listed as provided, with no changes made.]