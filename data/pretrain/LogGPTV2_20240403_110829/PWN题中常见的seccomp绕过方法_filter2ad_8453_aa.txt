# PWN题中常见的seccomp绕过方法
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
工欲善其事，必先利其器
先了解些前置知识
## 前置知识
在wiki上面 seccomp的说明如下，简而言之就是一个保护系统安全的一种机制，可以通过控制syscall，禁止掉一些危险的syscall
    seccomp (short for secure computing mode) is a computer security facility in the Linux kernel. seccomp allows a process to make a one-way transition into a "secure" state where it cannot make any system calls except exit(), sigreturn(), read() and write() to already-open file descriptors. Should it attempt any other system calls, the kernel will terminate the process with SIGKILL or SIGSYS.[1][2] In this sense, it does not virtualize the system's resources but isolates the process from them entirely.
一般使用seccomp有两种方法，一种是用prctl，另一种是用seccomp
先说下第一种,他可以通过第一个参数控制一个进程去做什么，他可以做很多东西，其中一个就是 PR_SET_SECCOMP，这个就是控制程序去开启 seccomp
mode，还有一个就是PR_SET_NO_NEW_PRIVS，这个可以让程序无法获得特权
    prctl - operations on a process
    prctl() is called with a first argument describing what to do (with values defined in ), and further arguments with a significance depending on the first one
关于 PR_SET_NO_NEW_PRIVS 可以这样用,第二个参数为1就可
    prctl(PR_SET_NO_NEW_PRIVS,1,0,0,0);
PR_SET_SECCOMP 可以这样
先定义好BPF 比如下面这样定义
        struct sock_filter st[]=
    {
        {0x20 ,0x00, 0x00, 0x00000004},
        {0x15 ,0x00, 0x04, 0xc000003e},
        {0x20 ,0x00, 0x00, 0x00000000},
        {0x35 ,0x02, 0x00, 0x40000000},
        {0x15 ,0x01, 0x00, 0x0000003b},
        {0x06 ,0x00, 0x00, 0x7fff0000},
        {0x06 ,0x00, 0x00, 0x00000000}
    };
然后通过再给sock_fprog结构体，然后传给 prctl做参数
    struct sock_fprog sfg ={7,st};
    prctl(PR_SET_SECCOMP,SECCOMP_MODE_FILTER,&sfg);
上面这个 sock_filter 结构体可以通过[seccomp-tools](https://github.com/david942j/seccomp-tools) dump出来，或者 seccomp_export_bpf导出
然后再说说 通过seccomp的函数来 开启 seccomp,先给出一个例子
    {    scmp_filter_ctx ctx;
        ctx = seccomp_init(SCMP_ACT_ALLOW);
        seccomp_rule_add(ctx, SCMP_ACT_KILL, SCMP_SYS(execve), 0);
        seccomp_load(ctx);    
    }
    seccomp_init \\
    scmp_filter_ctx seccomp_init(uint32_t def_action);
    initialize the internal seccomp filter state, prepares it for use, and sets the default action based on the def_action parameter
可以看道 seccomp_init 返回的是一个 scmp_filter_ctx 的结构体
而有效的 def_action 有下面几种
    SCMP_ACT_KILL
    SCMP_ACT_KILL_PROCESS
    SCMP_ACT_TRAP
    SCMP_ACT_ERRNO
    SCMP_ACT_TRACE
    SCMP_ACT_LOG
    SCMP_ACT_ALLOW
我们关注的应该是 SCMP_ACT_KILL 和 SCMP_ACT_ALLOW，一个是白名单，一个是黑名单
seccomp_rule_add 可以添加规则
    int seccomp_rule_add(scmp_filter_ctx ctx, uint32_t action,
                                int syscall, unsigned int arg_cnt, ...);
arg_cnt 这个指令是指后面参数的个数，比如
    rc = seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(read), 3,
                          SCMP_A0(SCMP_CMP_EQ, fd),
                          SCMP_A1(SCMP_CMP_EQ, (scmp_datum_t)buf),
                          SCMP_A2(SCMP_CMP_LE, BUF_SIZE));
    rc = seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(write), 1,
                          SCMP_CMP(0, SCMP_CMP_EQ, fd));
    rc = seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(exit_group), 0);
分别是 3 ，1，0 个。然后后面的参数就是 comparison op,主要有下面几种
    SCMP_CMP_NE
    Matches when the argument value is not equal to the datum value, example:
    SCMP_CMP( arg , SCMP_CMP_NE , datum )
    SCMP_CMP_LT
    Matches when the argument value is less than the datum value, example:
    SCMP_CMP( arg , SCMP_CMP_LT , datum )
    SCMP_CMP_LE
    Matches when the argument value is less than or equal to the datum value, example:
    SCMP_CMP( arg , SCMP_CMP_LE , datum )
    SCMP_CMP_EQ
    Matches when the argument value is equal to the datum value, example:
    SCMP_CMP( arg , SCMP_CMP_EQ , datum )
    SCMP_CMP_GE
    Matches when the argument value is greater than or equal to the datum value, example:
    SCMP_CMP( arg , SCMP_CMP_GE , datum )
    SCMP_CMP_GT
    Matches when the argument value is greater than the datum value, example:
    SCMP_CMP( arg , SCMP_CMP_GT , datum )
    SCMP_CMP_MASKED_EQ
    Matches when the masked argument value is equal to the masked datum value, example:
    SCMP_CMP( arg , SCMP_CMP_MASKED_EQ , mask , datum )
seccomp_load 其实就是应用 filter
下面是安装指令
    sudo apt install libseccomp-dev libseccomp2 seccomp
## CTF中常见的seccomp
第一种，也是最常见的,禁用了execve或者system
     0000: 0x20 0x00 0x00 0x00000004  A = arch
     0001: 0x15 0x00 0x04 0xc000003e  if (A != ARCH_X86_64) goto 0006
     0002: 0x20 0x00 0x00 0x00000000  A = sys_number
     0003: 0x35 0x02 0x00 0x40000000  if (A >= 0x40000000) goto 0006
     0004: 0x15 0x01 0x00 0x0000003b  if (A == execve) goto 0006