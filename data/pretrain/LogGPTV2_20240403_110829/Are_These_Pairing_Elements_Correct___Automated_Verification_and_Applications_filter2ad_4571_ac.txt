j ∈ [1, n] and k ∈ [1, m], Rule 2 can possibly be applied if j /∈ Fixed, k /∈ Trusted and the polynomial fk ∈ f is
of the form c· ud
j + h, where the variable uj ∈ u, the polynomial h contains only variables in uFixed, constant
c ∈ Z∗
p, and constant d ∈ Zp s.t. d is relatively prime to p − 1.
j
Description of Rule 2
Input: A PPE problem Π = (G, n, m, f , u, α, Fixed, Trusted) and integers j ∈ [1, n] and k ∈ [1, m].
Output: A PPE problem Π(cid:48) or ⊥ (meaning could not apply the rule).
Steps of Rule2(Π):
1. If polynomial fk ∈ f is of the form c · ud
j + h, where
• j /∈ Fixed,
• k /∈ Trusted,
• the variable uj ∈ u,
• the polynomial h contains only variables in uFixed,
• the constant c ∈ Z∗
• the constant d ∈ Zp is relatively prime to p − 1
p and
then output the PPE problem Π(cid:48) = (G, n, m, f , u, α, Fixed ∪ {j}, Trusted ∪ {k}).
2. Otherwise, output ⊥.
Figure 3: Procedure for moving certain elements to Trusted by ﬁxing an un-Fixed variable
Let ⊥(cid:54)= Π(cid:48) = Rule2(Π, j, k). We now prove that a testing set for Π(cid:48) is also a testing set for Π, which
ensures that Rule 2 does not “ﬂip” a non-testable PPE problem into a testable one.
Lemma 4.2 (Correctness of Rule 2). Let Π = (G, n, m,f , u, α, Fixed, Trusted) be a PPE problem instance as
in Deﬁnition 3.1, j ∈ [1, n] and k ∈ [1, m]. Suppose ⊥(cid:54)= Π(cid:48) = Rule2(Π, j, k). Then:
1. Π(cid:48) is a PPE problem instance as in Deﬁnition 3.1 and
2. for every testing set T ∈ QΠ(cid:48), it holds that T ∈ QΠ.
Proof. We have that Π =(G,n, m, f ,u, α,Fixed, Trusted). Since Rule1(Π, j, k)= Π(cid:48) (cid:54)=⊥, we know that the rule
was successfully applied, where Π(cid:48) = (G, n, m, f , u, α, Fixed ∪ {j}, Trusted ∪ {k}).
Condition 1: we observe that Π(cid:48) will also satisfy Deﬁnition 3.1, where the only non-trivial observation is
that we must show that if i ∈ Trusted ∪ {k}, then fi is a multivariate polynomial over the set of variables
in uFixed∪{j}. This follows from the fact that a necessary condition for Rule2 to move k to Trusted is that fk
only has variables in uFixed∪{j} and that j is simultaneously moved to Fixed.
9
Condition 2: the PPE problems Π and Π(cid:48) diﬀer only in their last two items: the Fixed and Trusted sets, where
the Π(cid:48) sets have the additional elements {j} and {k} respectively. As the deﬁnition of an YES challenge has
no dependence on Trusted and Fixed sets, each YES challenge for Π is also an YES challenge for Π(cid:48) and vice
versa. Since T is a testing set for Π(cid:48), each equation in T is simultaneously satisﬁed for all YES challenges of
Π(cid:48), and therefore satisﬁed for all YES challenges of Π.
Similarly, we argue that any NO challenge for Π is also a NO challenge for Π(cid:48), meaning that at least
one equation in T is not satisﬁed in both cases. Consider any NO challenge F for the PPE problem Π.
By deﬁnition, F is not a YES challenge for Π (or, by the above, for Π(cid:48)), and there exists an assignment of
u∗ ∈ Zn
We want to show that Fk = gfk(u∗)
. Since Rule2(Π, j, k) (cid:54)=⊥, we know that the polynomial fk was of the
form c · ud
j + h, according to the constraints of Rule2, where j /∈ Fixed. Thus, for this setting of Fk in the
challenge F, there exists only one setting of the variable uj ∈ Zp that is consistent with Fk being derived
via the polynomial fk and the settings of ui ∈ u∗ for all i ∈ Fixed. Let Fk = gy for some y ∈ Zp. Then we
have that:
∀i ∈ Trusted.
p such that Fi = gfi(u∗)
αi
αk
mod p)1/d mod (p−1).
uj = (
y − h
c
There is a unique solution to the above since d is relatively prime to p − 1. Recall that h is derived over the
set of variables in uFixed.
By Deﬁnition 3.1 of a PPE Problem, we have that if i ∈ Trusted, then fi is a multivariate polynomial over
the set of variables in uFixed. We observe that Rule2 preserves this condition by only moving a polynomial’s
index to Trusted if it over the set of variables in uFixed and the variable uj which it simultaneously moves to
Fixed.
∀i ∈ (Trusted ∪ {k}). This
Thus, for the same setting of variables u∗ ∈ Zn
allows us to conclude that if T ∈ QΠ(cid:48), then T ∈ QΠ.
p , it holds that Fi = gfi(u∗)
αi
4.3 Applying the Rules
We now show how to apply these rules in our main searching algorithm. When QSearch(Π) returns a testing
set Q, we conclude Π is PPE testable. When the message unknown is returned, the algorithm failed to ﬁnd
a testing set. It does not, however, allow us to conclude anything about Π’s PPE testability.
At a high-level, for input Π, if all elements are represented as Trusted, then QSearch(Π) returns the trivial
testing set ∅ and the PPE problem is trivially PPE testable. Otherwise, the algorithm attempts to apply
Rule1, which seeks to move an un-Trusted element into Trusted via a PPE C that can test it with respect to
the other Trusted elements. If Rule1 can be applied, then the algorithm recurses on the PPE problem with
one fewer un-Trusted elements and, if a testing set Q(cid:48) for this “smaller” problem is found, it outputs the
joint testing set C ∪ Q(cid:48). If Rule1 cannot be applied, then the search algorithm tries to apply Rule2, which
seeks to move an un-Trusted element into Trusted via ﬁxing an un-Fixed variable. If Rule2 can be applied,
then the algorithm again recurses on the smaller instance and, if a testing set for this instance is found, it
outputs it likewise. We claim that while the order in which we attempt to apply Rule1 doesn’t matter, the
order for Rule2 possibly might; thus, our implementations will sometimes randomize the search order of the
indices for this step (as opposed to the numerically increasing order we present here). We can explore other
implementation options, such as ﬁrst applying Rule2 to variables with the smallest d constants, etc.
Eﬃciency of QSearch. We now discuss about the asymptotic complexity of the QSearch algorithm. First
observe that the size of the Trusted set increases by one with each recursive call to QSearch. Consequently,
the function QSearch is called recursively at most m times. During each call, all the untrusted polynomials
are scanned to check if any rule is applicable. For the purpose of this analysis, let us denote the size of
a polynomial to be the total number of additions and multiplications involved in the normal form of the
polynomial (e.g., the size of x2yz + 3z3y3 is 5). Therefore, multiplying 2 polynomials of size s1 and s2 takes
O(s1s2) time. Let the the maximum size of all polynomials f in the input be s. Executing Rule1 involves
computing completion lists followed by checking if 0 lies in span of certain polynomials. We know that
10
Description of Main Algorithm for PPE Testing Set Search
Input: A PPE problem Π = (G, n, m, f , u, α, Fixed, Trusted).
Output: A PPE testing set Q or the message unknown.
Steps of QSearch(Π):
1. If Trusted = [1, m], then output the testing set Q = ∅.
2. For k = 1 to m,
(a) Call z = Rule1(Π, k).
(b) If z = (C, Π(cid:48)) (cid:54)=⊥, then
i. call Q(cid:48) = QSearch(Π(cid:48)) and
ii. if Q(cid:48) (cid:54)= unknown, then output the testing set Q = C ∪ Q(cid:48).
3. For k = 1 to m and j = 1 to n,
(a) Call Π(cid:48) = Rule2(Π, j, k).
(b) If Π(cid:48) (cid:54)=⊥, then
i. call Q = QSearch(Π(cid:48)) and
ii. if Q (cid:54)= unknown, then output the testing set Q.
4. Otherwise output unknown.
Figure 4: Recursive procedure for searching for a PPE Testing Set
computing completion lists of m polynomials involves O(m2) polynomial multiplications taking O(m2 · s2)
time. Checking if 0 lies in span of O(m2) polynomials (number of polynomials in completion lists) involves
solving a system of O(m2 · s) linear equations (upper bound on number of monomials in completion list)
each of size O(m2), which takes at most O((m2 · s)ω) time, where nω is the complexity of multiplying two
n × n matrices. (Current best known value of ω is 2.3728639 [27]). Consequently, the time taken to execute
Rule1 on an untrusted polynomial is O(m2ω · sω). The time taken to execute Rule2 on a polynomial f is
only linear in terms of the size of f . Consequently, every recursive call takes O(m2ω+1 · sω) time to check
for both the rules on m polynomials. As QSearch involves at most m recursive calls, the total time taken is
at most O(m2ω+2 · sω).
Theorem 4.1 (Correctness of Testing Set from Algorithm in Figure 4). Let Π = (G, n, m, f , u, α, Fixed, Trusted)
be a PPE problem instance as in Deﬁnition 3.1. Let Q = QSearch(Π). If Q (cid:54)= unknown, then Q is a testing
set for Π.
Proof. We want to show that if QSearch(Π) = Q (cid:54)= unknown, then Q is a testing set for Π. We do this by
induction.
Base Case: When Trusted = [1, m], then QSearch(Π) = ∅. In this case, all elements are Trusted; thus all
PPE challenges for Π are either YES or INVALID challenges. The emptyset ∅ trivially satisﬁes Deﬁnition 3.3.
(cid:48) ⊆ [1, m] and Q(cid:48) is a testing
Induction Step: For any Π(cid:48) = (G, n, m, f , u, α, Fixed
) where Trusted
(cid:48)
, Trusted
(cid:48)
set for Π(cid:48), we prove that:
1. If Π(cid:48)(cid:48) = (G, n, m, f , u, α, Fixed
(cid:48)
(cid:48)(cid:48)
, Trusted
[1, m], then Q(cid:48)(cid:48) = C ∪ Q(cid:48) is a testing set for Π(cid:48)(cid:48).
= Trusted
(cid:48) \ {k}) and (C, Π(cid:48)) = Rule1(Π(cid:48)(cid:48), k), for some k ∈
2. If Π(cid:48)(cid:48) = (G, n, m, f , u, α, Fixed
(cid:48) \ {j}, Trusted
(cid:48)(cid:48)
for some k ∈ [1, m], then Q(cid:48)(cid:48) = Q(cid:48) is a testing set for Π(cid:48)(cid:48).
= Fixed
(cid:48)(cid:48)
= Trusted
(cid:48) \ {k}) and (C, Π(cid:48)) = Rule2(Π(cid:48)(cid:48), k),
We have two cases.
Case 1: Since Q(cid:48) is a testing set for Π(cid:48), then we know it tests all (cid:96) = m − |Trusted
(cid:48)| untrusted elements
in Π(cid:48). We need to argue that Q(cid:48)(cid:48) = C ∪ Q(cid:48) tests all (cid:96) + 1 = m − |Trusted
(cid:48)| + 1 untrusted
elements in Π(cid:48)(cid:48). In particular, the sole element they diﬀer in is the element represented by index k. By
(cid:48)(cid:48)| = m − |Trusted
11
inspection of Rule1, we see that the PPE C allows for testing this element k. Thus, if Q(cid:48) is a set of PPEs
testing all untrusted elements except k and C is a PPE testing element k, then together they form a testing
set for all untrusted elements in Π(cid:48)(cid:48).
Case 2: Since Q(cid:48) is a testing set for Π(cid:48), then we know it tests all (cid:96) = m−|Trusted
(cid:48)(cid:48)| = m − |Trusted
(cid:48)| untrusted elements in
(cid:48)| + 1 untrusted elements
Π(cid:48). We need to argue that Q(cid:48)(cid:48) = Q(cid:48) tests all (cid:96) + 1 = m − |Trusted
in Π(cid:48)(cid:48). In particular, the sole element they diﬀer in is the element represented by index k. Since Rule2 was
successfully applied, element k was moved to the trusted set, because it contained an unﬁxed variable, whose
value was ﬁxed by the move. Since the variable was unﬁxed but is now being ﬁxed by the move, no PPE is
required to test this element as a trusted element. All future uses of this variable will now be tested against
its ﬁxed value. Thus, no new PPEs are required for the execution of Rule2 and Q(cid:48)(cid:48) = Q(cid:48) is a testing set for
Π(cid:48)(cid:48).
Argument Summary: Since we have shown that QSearch(Π) (cid:54)= unknown returns a testing set properly for
the base case where all elements are trusted and we have shown the inductive step that for all Π(cid:48), Π(cid:48)(cid:48) which
diﬀer by only one trusted element, according to the relationships of Rule1 or Rule2 called by QSearch, that
QSearch correctly derives a testing set for Π(cid:48)(cid:48) from a testing set for Π(cid:48), then by the principle of induction we
have shown that any testing set output by QSearch is correct.
Corollary 4.1 (Correctness of PPE Testability from Algorithm in Figure 4). Let Π = (G, n, m, f , u,
α, Fixed, Trusted) be a PPE problem instance as in Deﬁnition 3.1. Let Q = QSearch(Π). If Q (cid:54)= unknown,
then Π is PPE Testable.
Proof. Follows directly from Theorem 4.1 and Deﬁnition 3.3.
5
Implementation and Case Studies
We now describe a new software tool, called AutoPPE, which implements the PPE searching algorithm
presented in Figure 4. We ran AutoPPE on a number of IBE, ABE, VRF, signature schemes, and other
type of pairing-based public/private parameters, including some that are PPE testable and some that are
provably not PPE testable. We report on the design, results and performance of AutoPPE in this section.
5.1 AutoPPE Implementation
We implemented the AutoPPE tool using Ocaml version 4.02.3. We utilized the parsing tools and data
structures (to store polynomials) from the Generic Group Analyzer (GGA)2. We used the SageMath package3
to solve systems of linear equations. We implemented the remaining logic ourselves.
AutoPPE takes as input pairing information (such as the Type I, II or III), a set of ﬁxed/unﬁxed
variables, and a set of trusted/untrusted polynomials along with their group identiﬁers. (While this is a
slightly diﬀerent format than we used in Deﬁnition 3.1, we stress that it is the same information.) In addition,
the tool optionally takes as input information that allows the tool to help the user encode some cryptosystem
parameters as a PPE problem instance. In particular, all trusted and untrusted elements (represented by
polynomials) are bilinear group elements in G1, G2 or GT and Deﬁnition 3.1 does not allow including an
element in Zp in either set. However, since it is not uncommon for schemes to contain elements in the Zp
domain as part of their public or private parameters, we implemented a workaround for those schemes as
described in Section 5.2. The tool runs the Figure 4 search algorithm, with a few optimizations detailed in
Section 5.5 and a few limitations detailed in Section 5.6, and outputs either a set of PPEs or the special
symbol unknown. After obtaining PPEs by running QSearch algorithm, the tool further runs an algorithm
similar to [7] to produce equivalent PPEs which are more eﬃcient to check.
2https://github.com/generic-group-analyzer/gga
3https://www.sagemath.org/
12
Figure 5: The workﬂow of the AutoPPE tool which follows the logic in Figure 4.
It takes as input an
intial PPE problem instance along with some additional information (i.e., variables in Zp) that help the user
encode a given pairing-based scheme into a proper PPE problem instance, as we explain in the text. The
tool utilizes and adapted portions of existing tools such as the Generic Group Analyzer (GGA) for handling
polynomials and completion sets and the SageMath package for solving systems of linear equations. The
output is either a set of Pairing Product Equations (PPEs), indicating that the instance is PPE Testable,
or the special symbol unknown.