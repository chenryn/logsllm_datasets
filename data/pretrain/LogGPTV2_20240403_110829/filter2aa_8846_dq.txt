Security(必考)
—88—
SSL 协议对访问网站的流量进行加密，使用 HTTPS 协议和 443 端口，实施过程如下：
①当用户访问网站时，通过浏览器检索 Web 服务器的证书，提取出服务器的公钥。
②浏览器创建一个随机的对称密钥，使用服务器的公钥来加密，并发送给服务器。
③服务器用自己的私钥解密得到对称密钥，然后双方使用对称密钥来实现加密通信。
而 TLS 则作为 SSL 标准的升级和替换，也使用 TCP 端口 443，由于误解，TLS 也被称为
SSL 3.1 版本，其实它和 SSL3.0 版不一样，也不再向下兼容了。详细内容在第四域的 C 和 C.3
章节都有。
下面是一些主要的证书授权机构 CA，不考，简单了解下吧：
赛门铁克 Symantec，Thawte，GeoTrust，GlobalSign，Comodo Limited，Starfield
Technologies，GoDaddy，DigiCert，Network Solutions, LLC，Entrust
证书仅代表了 CA 是认可该主体的，现在已经有很多 CA 被拉黑名单了，因为他的证书花钱
就能买，乱搞。数字证书光有 CA（Certificate Authorities）生成并发布是不够的，证书要
在 CA 的数据库里注册了才有效，使用它的系统和人也要对遇到的各种证书进行验证才行，这
就用到了 RA（Registration Authorities）。CA 就是给你发本本的机构，RA 就是登记这个本
本相关信息的服务器。当其它系统要验证你时，就会上 RA 核对下你的证书本本。
证书路径确认（CPV）Certificate Path Validation（考点）
CPV 指的是：证书链上的所有证书都是合法有效的，这个证书链包括从 CA 到 RA、服务器
到客户端、系统环境到三方系统的所有相关的证书。其中任一证书过期或被替换时，必须重新
验证整个证书链。证书是否过期，是否有效可以通过 2 种方式来核对证书撤销列表（CRLs，
Certificate Revocation Lists）：
证书的撤销都是 CA 要做的事，如果撤销了，就要通知大家：一是定期下载 CRLs；二是通
过联机证书状态协议(OCSP) The Online Certificate Status Protocol 实时验证。后者效率
更高，自动更新。
2.注册授权机构 RA
RA 执行证书注册任务。RA 建立和确认个人的身份，代表终端用户启动使用 CA 的认证过
程，以及执行证书生命周期管理功能。RA 不能发行证书，但是可以作为用户和 CA 之间的中间
人。当需要新证书的时候..用户就会向 RA 发送请求，然后 RA 再将该请求发送给 CA。
3. PKI 步骤
①终端用户注册自己，即获取一个数字证书的过程：
(1)用户向 RA 发送一个请求。
(2)RA 向他索取特定的身份标识信息，如驾驶执照副本、电话号码、地址等。
(3)RA 接收并验证其身份标识信息，通过了就将用户的认证请求发送给 CA。
(4)CA 创建一个证书，该证书嵌入了用户的公钥及其身份信息(私钥/公钥对由 CA 或用户
的计算机在本地创建，这取决于系统的配置。如果由 CA 创建，那么就要通过安全的方式将私
钥发送给用户。在大多数情况下，用户会生成这个密钥对，然后在注册过程中发送他的公钥)。
②终端用户与其它用户保密通信的过程：
(5)用户从一个公共目录请求得到对方的公钥。
(6)这个目录(有时也称为存储库)将对方的公钥发送给用户。
—89—
(7)用户验证数字证书并提取对方的公钥，并使用该公钥加密一个会话密钥，这个会话密
钥将用于加密他们之间传递的消息。然后将加密的会话密钥发送给对方，还要将自己的、包含
其公钥的证书也发送给对方。
(8)对方接收到用户的证书时，其浏览器会询问 CA 是否对该证书进行了数字签名。只有
对方的浏览器信任这个 CA，并且验证了证书，双方就可以进行加密通信了。
I.4 密钥管理实践
其实就是口令/密码管理。密钥的大小以及密钥的保密是实现密码系统安全的核心两个要
素。对称与非对称密钥的管理在上一章都讲过了。这里讲点别的：
1.XML 密钥管理规范 2.0（XKMS)
XKMS 规范定义了分配和注册公钥的协议，适合于与 XML 数字签名和 XML 加密配套使用。
2.金融机构的标准
ANSI X9.17 标准用于金融机构的安全传输，特别描述了确保密钥保密性的手段。
3.职责分离
密钥不能一个人管，必须分开来。对于小公司，人员很少，可以采用其他补偿控制来达到
同样的控制目标，如：活动监测、审计跟踪和管理监督等。实现职责分离有 2 个重要机制：双
重控制和分割知识/知识分离。
①双重控制 dual control。2 个或多人要同时一起来完成一个流程。（2 人同控）
②知识分离 split knowledge。密钥或资产要分发给不同的人来保管。（2 人分管）
4.密钥强度
RSA 数据安全公司指出：
1024 位 RSA 密钥等于 80 位对称密钥、
2048 位 RSA 密钥等于 112 位对称密钥、
3072 位 RSA 密钥等于 128 位对称密钥，2048 位密钥在 2030 年之前是够用的。
此外，1024 位的 RSA 密钥强度相当于 160 位的椭圆曲线密钥强度。
5.密钥丢了怎么办？
M-N 方法：如果密钥涉及到 N 个人的利益，要想找回，必须要同时有最少 M 个人来操作。
M of N Control requires that a minimum number of agents (M) out of the total number
of agents (N) work together to perform high‐security tasks.
I.5 数字签名/（MAC）
公钥密码系统加上散列函数，就可以用来做数字签名了，数字签名要实现 2 个主要目标：
①确实证明了发送者的身份，具有不可否认性。（不可伪造）
②确实证明了消息没有改变，实现消息完整性。（没有篡改）
I.2 的第二大点：非对称密钥学里已经讲过签名流程了，这里再描述一遍：
先对要发送的消息进行散列运算（SHA-512 什么的），得到 1 个消息摘要；再用私钥对这
个消息摘要进行加密，得到 1 个数字签名；然后把加密的消息、数字签名和公钥都发出去就行
了；最后，接收者用自己的公钥解密消息得到消息明文，用对方公钥解密数字签名得到消息摘
—90—
要明文，用散列运算得到接收文件的消息摘要，对比一下消息摘要（散列值）是否一致，就知
道这个消息是不是可靠的了。这里面，消息摘要提供了完整性；数字签名提供了身份验证，也
就是不可否认性。
这个过程也可以把消息明文发送出去，只加密消息摘要就行了，这样提供了身份验证，但
并没有保护信息隐私。数字签名也常用于软件下载分发、驱动程序什么的。
1.消息验证码/消息身份认证码(MAC) Message Authentication Code/（保护完整性）
消息验证码和散列函数（哈希）差不多，只不过多了身份认证和加密，可以防止被伪造。
为了防范中间人攻击，需要使用消息身份验证码 MAC，它对消息发送者的身份进行验证，
并不是对消息进行加密。MAC(亦称密码校验和)是用秘密密钥（对称加密）生成的一小块数据，
附着在消息上。当消息被接收时，接收者可以用私钥生成自己的 MAC，从而得以知道消息在传
输过程中是否曾被无意或有意改动过。MAC 这个词还有另外两个意思：强制身份认证、MAC 地
址。这里 MAC 有 3 种基本类型：
①散列信息身份验证代码(HMAC) Hashed Message Authentication Code
使用散列和共享密钥，验证完整性，提供数据源身份验证。
②CBC-MAC。提供完整性验证、数据源身份验证，但是不提供机密性，并不加密数据。
③CMAC。就是 CBC-MAC 的升级版，还是不加密数据，更复杂更安全。
也有分成 4 种类型的：
①无条件安全消息认证码 unconditionally secure MAC。基于一次一密本或一次性密钥。
②基于散列函数的消息认证码 hash function-based MAC,HMAC。基于散列函数。
③基于流密码的消息认证码 stream cipher-based MAC。基于流密码和线性反馈移位寄存
器 linear feedback shift registers,LFSRs 。
④基于分组密码的消息认证码 block cipher-based MAC。将分组密码（DES-CBC）得到的
最后密文分组做为消息认证码。
—91—
2.正确使用密钥
*加密消息，使用接收者的公钥。
*解密消息，使用你自己的私钥。
*生成数字签名，用你自己的私钥。
*验证数字签名，用发送者的公钥。
3.数字签名标准（DSS）Digital Signature Standard
数字签名是指用户用自己的私钥对原始数据的哈希摘要（散列值）进行加密等到的数据。
接收者通过用对方的公钥解密数字签名，再对照原文的哈希值，就能实现完整性和身份验证（不
可抵赖性）了。
美国国家标准和技术协会在联邦信息处理标准(FIPS) 186-4 中指定了联邦政府可以使用
的数字签名算法，该标准也被称为数字签名标准(DSS)。标准规定美国政府的所有数字签名算
法都必须使用 SHA-2 散列函数；数字签名基础结构的加密算法可以三选一：
①数字签名算法(DSA)，在(FIPS) 186-4 中指定。
②RSA 算法，在 ANSIX 9.31 中指定。
③椭圆曲线 DSA(ECDSA) ，在 ANSIX 9.62 中指定。
还有 2 种算法政府没认可，不过也要了解下：
Schnorr’s 和 Nyberg-Rueppel’s 的签名算法。
—92—
I.6 数字版权管理（DRM）
内嵌的标志或商标称为数字水印(digita1 watennark)。不同于将秘密消息嵌入图形以期
望不被发现，数字水印往往是可以看见的。数字水印的作用是阻止人们使用其他人的素材。这
种隐写术称为数字权利管理 DRM(Digita1 Righs Management)，其目标是限制使用某家公司或
个人所拥有的素材。
1.隐写术和水印 Steganography and Watermarking
隐写术是使用密码学技术在另外一个消息内嵌入秘密消息的方法。通常做法：修改图像数
据中最不重要的数据比特，并不影响图像的浏览。隐写术也被用来做文档的水印。
I.7 抗抵赖
不可否认性/不可抵赖性/可问责性确保发送者无法否认自己发送了一条消息且消息的完
整性是原封不动的。不可抵赖性可通过数字签名和 PKI 实现。具体前面都讲了。
I.8 完整性（哈希法和加盐法）/散列
散列不是加密，是单向的数据转换，是把很长的消息转换成独一无二的一个很短的消息摘
要，这个摘要无法还原成消息的，就是用来验证消息是不是被篡改了，也用于实现数字签名。
术语“消息摘要”也被称为：散列、散列值、散列总数、CRC、指纹、校验和和数字 ID 等，
英文为：message digest 以及 hash,hash value,hash total,CRC,fingerprint,checksum,and
digital ID。
消息摘要通常为 128 位，当然，数值越长，完整性验证就越可靠。按照 RSA 公司的标准，
散列函数应具备以下条件：
①广泛性：输入入值可以是任意长度。
②确定性：输出值具有固定的长度，原文不变，散列就不变。
③均匀性：散列计算容易实现，且不可预测。
④难逆向：散列计算是单向的(无法)。
⑤抗冲突/抗碰撞：散列值是唯一的(不同消息必须算出不同的散列值)。
最简单的散列算法就是将输入消息划分成大小固定的块，如 128 位，然后 XOR 每个块，就
得到 128 位的散列值。
下面是常用散列算法：
1. SHA（常用）
NIST 开发的 SHA,SHA-1 和 SHA-2 都会考到。SHA 基于 MD4，SHA-1 基于 MD5，
①SHA-1：输入值可以是任意长度（小于 2
64
=2097152T）；消息摘要长度 160 位；它将消
息原文拆分为 512 位的分组的处理，如果长度不够多就填充一些附加的消息。
②SHA-2：SHA-1 已经被发现存在缺陷，SHA-2 就出现了，它有 4 种形式：
*SHA-256，处理 512 比特的分组大小，生成 256 比特的消息摘要。
*SHA-224，处理 512 比特的分组大小，生成 224 比特的消息摘要。
*SHA-512，处理 1024 比特的分组大小，生成 512 比特的消息摘要。
*SHA-384，处理 1024 比特的分组大小，生成 384 比特的消息摘要。
—93—
③SHA-3：使用 Keccak 算法，还没发布，至少目前还没有实际破解 SHA-2 的案例。
2. MD2
MD2 是为 8 比特处理器提供的安全散列函数（很老的处理器了）。MD2 处理 16 字节（byte）
的分组大小（128 比特）,在消息的结尾处添加“校验和”（checksum），生成 128 比特的消
息摘要。后来有人证明 MD2 不是单向函数，而且运算很慢，于是它被废止了。
3. MD4
MD4 支持 32 比特的处理器，处理 512 比特的分组大小，通过 3 轮计算，生成 128 比特的
消息摘要。不过其最后一个消息分组必须是 448 比特（留 64 比特做什么，书上没写）。
4. MD5
MD5 处理 512 比特的分组大小，通过 4 轮计算，生成 128 比特的消息摘要。与 MD4 一样，
它的最后一个消息分组必须是 448 比特（留 64 比特做什么，书上没写）。不管 MD 几，都已经
被证明存在散列值冲突了（不同消息得到同一个散列值），专家建议用数字签名来代替。其中，
MD5 同一个摘要找出 2 条不同消息的概率约为 264，从一个摘要推算出原文的概率约为 2128。
6.变长散列(HAVAL)
HAVAL 是对 MD5 的更改，处理 1024 比特的分组，运算 3 轮到 5 轮不等，生成 128、160、
192、224 和 256 比特的散列值。
不同算法的散列值有多少位是要考的，书上有表格，最好自己归纳。