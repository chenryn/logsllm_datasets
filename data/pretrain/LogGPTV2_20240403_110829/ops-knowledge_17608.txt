It seems like you are facing issues with SSL certificate verification while trying to install Python packages using `pip` on a network that uses a man-in-the-middle (MITM) inspection appliance. This appliance re-signs all SSL connections, including those made by `pip`, with its own certificate. As a result, you encounter `[SSL: CERTIFICATE_VERIFY_FAILED]` errors.

To resolve this, you need to add the custom root certificate from your network's MITM appliance to the CA bundle that Python uses. Here’s how you can do it:

### 1. **Locate the Custom Root Certificate**
   - The custom root certificate should already be installed in the Windows Keystore as part of the Group Policy Object (GPO). You can export this certificate from the Windows Keystore.

### 2. **Export the Custom Root Certificate**
   - Open the **Windows Certificate Manager** (`certmgr.msc`).
   - Navigate to the **Trusted Root Certification Authorities** store.
   - Find the custom root certificate used by the MITM appliance.
   - Right-click on the certificate and select **All Tasks > Export**.
   - Follow the wizard to export the certificate in `.crt` or `.pem` format. Make sure to choose the **Base-64 encoded X.509 (.CER)** option.

### 3. **Update Python’s CA Bundle**
   - Python uses a CA bundle file to verify SSL certificates. By default, this file is located at:
     - **Windows**: `C:\Users\<YourUsername>\AppData\Local\Programs\Python\Python<Version>\Lib\site-packages\certifi\cacert.pem`
     - **Linux/Mac**: `/usr/local/lib/python<Version>/dist-packages/certifi/cacert.pem`

   - You need to append the contents of your exported custom root certificate to this `cacert.pem` file. You can do this using a text editor or a command-line tool like `cat` on Linux/Mac:
     ```sh
     cat /path/to/your/custom-root-cert.crt >> /path/to/certifi/cacert.pem
     ```

### 4. **Verify the Update**
   - After updating the `cacert.pem` file, try installing a package using `pip` again:
     ```sh
     pip install <package-name>
     ```
   - If the update was successful, you should no longer see the `[SSL: CERTIFICATE_VERIFY_FAILED]` error.

### 5. **Alternative: Use the `--cert` Option with `pip`**
   - If you prefer not to modify the `cacert.pem` file, you can use the `--cert` option with `pip` to specify the path to your custom root certificate:
     ```sh
     pip install --cert /path/to/your/custom-root-cert.crt <package-name>
     ```

### 6. **Anaconda (Optional)**
   - If you are using Anaconda, you can configure SSL verification in the Anaconda Navigator:
     1. Open **Anaconda Navigator**.
     2. Go to **File > Preferences**.
     3. In the **SSL Verification** section, you can either:
        - **Disable SSL verification** (not recommended for security reasons).
        - **Enable SSL verification and specify the path to your custom root certificate**.

By following these steps, you should be able to resolve the SSL certificate verification issue and successfully install Python packages using `pip`.