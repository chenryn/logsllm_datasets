## 0x00 简介
最近看到一篇关于[RDP攻击的文章](https://www.exploit-db.com/docs/41621.pdf)，不是很新的内容，本着学习的目的进行简单的翻译，也当做学习笔记，鉴于水平有限，有很多不到位的地方，还请包涵。
RDP协议被系统管理员每天用来管理远程Windows服务器。最常见的场景之一就是，用RDP在核心服务器上执行远程管理任务，比如用高权限的账户登录域控服务器，这个账户的凭据通过RDP进行传输。因此，使用安全的RDP配置更加显得至关重要。由于配置错误，经常遇到如下的证书警告：
如果在你所处的环境中，经常出现这种警告，将无法识别出潜在的MitM攻击。
本文的目的在于提升安全意识，严肃的看待证书警告的重要性以及如何进行安全配置。计划的读者群是系统管理员、渗透测试人员以及安全爱好者。虽然不必要，但推荐读者最好具备以下的背景知识：
>\- 公钥及对称密码体制（RSA、RC4）  
>\- SSL  
>\- x509 证书  
>\- TCP  
>\- Python  
>\- 十六进制数及二进制代码
本文将证明如何通过MitM攻击窃取用户凭证。文章内容没有涉及到最新的技术，甚至是早已被Cain实现过的技术。但是，Cain实在是太老了，而且关闭了源码并且只能在Windows下使用。本文将分析技术细节，以及RDP协议的内部工作原理，并尽可能真实的模拟一次攻击行为。
**声明：**
不得利用本文涉及到的技术获取不属于你的服务器权限。本文仅用于教学，且需取得系统管理员的授权。否则，你的行为有可能涉及违法。本文涉及的源代码可在以下链接中找到。。
##  0x01 RDP原理
首先利用Wirdshark，看看在通过RDP连接至服务器时到底发生了些什么：  
如图所示，客户端以一个建议开始，建议对RDP会话使用安全协议。我们将三个安全协议做如下区分：
> _标准RDP安全协议  
>_ 强化的RDP安全协议或TLS协议  
>* CredSSP（凭据安全服务提供者）
以上截图仅显示了前两种安全协议。请注意，RDP默认执行标准安全协议，客户端没有专门提示。TLS仅仅是将标准RDP安全协议封装在TLS通道之中。顺便，在本文中将互换的使用SSL协议与TLS协议。
CredSSP也是封装在TLS协议之中，不过在受保护的通道中所传输的不再是明文的密码，而是用于认证的NTLM或者Kerberos协议。这个协议通常情况下也被用于网络级别认证（NLA）。
早期的用户认证有个特征，允许服务器在用户提交任何凭据之前拒绝客户端的访问。比如，在用户没有所需的访问权限的情况下。
在Wireshark所截取的会话中，可以看到在客户端与服务器协商使用强化的RDP协议之后，双方进行了SSL握手。在这种情况下，我们在协商完成后的第一个数据包上点击右键，选择将TCP流解码至SSL。
所以，如果我们想对RDP会话进行MitM攻击，仅仅使用SSL代理是不够的，这个代理需要能够识别RDP协议。我们选择Python来实现这样一个代理。为实现这个目标，首先建立一个服务端socket，用来接受来自受害客户端的链接。同时建立一个客户端socket，用来链接真正的服务器。代理程序在两个socket之间进行数据转发，在必要的情况下使用SSL协议对数据进行封装。在此过程中，我们会详细检查数据，并对感兴趣的数据进行修改。
首先需要修改的数据就是客户端协议的安全级别，客户端原本想通知服务端使用CredSSP，但通过代理修改安全级别至标准RDP安全协议。在默认配置下，服务端将会正常回复。
##  0x02 创建基于Python的RDP MitM代理
主程序如下：
    def run():
    &nbsp;&nbsp;&nbsp;&nbsp; open_sockets()
    &nbsp;&nbsp;&nbsp;&nbsp; handle_protocol_negotiation()
    &nbsp;&nbsp;&nbsp;&nbsp; if not RDP_PROTOCOL == 0:
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;enableSSL()
    &nbsp;&nbsp;&nbsp;&nbsp; while True:
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if not forward_data():
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break
    def forward_data():
    &nbsp;&nbsp;&nbsp;&nbsp; readable, _, _ = select.select([local_conn, remote_socket], [], [])
    &nbsp;&nbsp;&nbsp;&nbsp; for s_in in readable:
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if s_in == local_conn:
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; From = &quot;Client&quot;
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; to_socket = remote_socket
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elif s_in == remote_socket:
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; From = &quot;Server&quot;
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; to_socket = local_conn
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data = s_in.recv(4096)
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if len(data) == 4096:
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while len(data)%4096 == 0:
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data += s_in.recv(4096)
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if data == b&quot;&quot;: return close()
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dump_data(data, From=From)
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parse_rdp(data, From=From)
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data = tamper_data(data, From=From)
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;to_socket.send(data)
    &nbsp;&nbsp;&nbsp;&nbsp; return True
    def enableSSL():
    &nbsp;&nbsp;&nbsp;&nbsp; global local_conn
    &nbsp;&nbsp;&nbsp;&nbsp; global remote_socket
    &nbsp;&nbsp;&nbsp;&nbsp; print(&quot;Enable SSL&quot;)
    &nbsp;&nbsp;&nbsp;&nbsp; local_conn = ssl.wrap_socket(
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;local_conn,
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;server_side=True,
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;keyfile=args.keyfile,
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;certfile=args.certfile,
    &nbsp;&nbsp;&nbsp;&nbsp; )
    &nbsp;&nbsp;&nbsp;&nbsp; remote_socket = ssl.wrap_socket(remote_socket)
run()：创建socket，处理协议协商，在必要的情况下启用SSL。完成之后在两个socket之间进行数据转发。  
dump_data()：在debug模式下，以十六进制形式将数据打印在屏幕上。  
parse_rdp()：从数据流中提取敏感信息，并利用tamper_data()进行修改。
## 0x03 密码学基础
因为在破解标准RDP安全协议时需要用到密码学相关知识，在此概要的介绍下RSA的基本概念。读者可根据自身情况选择跳过此节。
在RSA加密算法中，加密、解密、签名都是纯粹的数学操作，工作在简单整数的环境中。请明确，所有操作都限定于有限域之中。在生成RSA中的密钥对时，需要两个大素数p和q。模数n
= p _q。利用欧拉函数计算 φ(n)=(p−1)_ (q−1)。随机选择e，使得e与φ(n)互质。利用扩展欧几里得算法求e的逆元d，使得e·d ≡ 1
mod φ(n)。
此时d为私钥，e、n构成公钥。理论上讲d可以通过n、e计算得出，但是在不知道p和q的情况下，求解φ(n)是困难的。这也就是为什么RSA算法的安全性基于大数分解的难度。在目前情况下，没有人知道更加有效的大数分解算法，除非拥有光量子计算机。  
假设待加密明文为m，密文为c，e为公钥，d为私钥。
则加密变换为：c≡m^e mod n。
解密变换为：m≡c^d mod n。
如果你确实不明白以上的加解密算法，没关系，这是数学问题，对于这篇文章来说确实有点难度。签名和解密一样，只需要在一段消息的hash值上进行运算。
当m或者c远大于256bit时，运算的开销会非常大，所以通常情况下，仅会使用RSA对对称加密的密钥进行加密。明文通常情况下使用一次一密的对称加密算法（如AES等）进行加解密。
##  0x04 破解标准RDP安全机制
事实上，对于标准的RDP安全机制根本谈不上破解，因为其设计伊始就存在缺陷。标准RDP协议安全机制工作流程如下：
> \- 客户端声明将使用标准RDP安全协议；  