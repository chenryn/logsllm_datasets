we find that 31 third-party hyperlinks on 2 websites were mod-
ified by a different third-party script. For example, the script
https://s7.addthis.com/js/300/addthis_widget.js modified 11 third-
party hyperlinks on the website https://www.crazy-net.com/ to
https://plus.google.com/110631064773293614230; the script http:
//media1.admicro.vn/core/log_cafef.js modified 20 third-party
hyperlinks on the website http://cafef.vn/ to http://lg1.logging.
admicro.vn/nd?nid=.... This indicates that those third-party
scripts indiscriminately modify anchor elements to intercept
user clicks.
Huge Hyperlinks. We observe 120 huge third-party 
tags on 119 websites. These anchor elements enclose contents
whose size is at least 75% of the browser window size. As a
result, a visitor has a very high chance to click such an anchor
element. For example, on the website http://torrents73.ru/, the
third-party script http://gynax.com/js/MjgxMw==.js created a
large anchor, which encloses a huge background image. Users
would be directed to another page https://wheel.grand-casino48.
com/ upon a click. We also identify that 135 websites used
148 huge first-party  tags, which we currently consider as
legitimate as we discussed in §3.1.
5.2.1 Interception by Hyperlinks
5.2.2
Interception by Event Handlers
We identify three possible ways that a third-party script can
intercept user clicks through hyperlinks (§4.3.1). In total,
we observe that 4,178 hyperlinks on 221 websites were in-
tercepted, which can lead a user to 2,695 distinct third-party
URLs. We present in Table 1 the breakdown of the 4,178 links
and the total number of daily visits to the affected websites6.
Hyperlink Modifications. Surprisingly, the href attribute of
4,027 first-party  tags on 100 websites were directly tam-
pered by a third-party script. For instance, the ad URL shorten-
ing script https://cdn.adf.ly/js/link-converter.js modified the href
6We get the statistics using the SimilarWeb API.
We analyze how event handlers are exploited to intercept user
clicks. Overall, we find 203 elements across 172 websites
were attached with navigation event handlers, which would
drive a user to a third-party URL upon click.
We observe that 189 first-party elements of 161 websites
were added at least one third-party navigation event han-
dler. For example, the third-party script https://smashseek.com/
rq/4949 intercepted user clicks on the website https://www1.
mydownloadtube.com by adding a navigation event listener to
the  element. The user’s browser would open a new
URL (the specific URL changes upon each user click) when
USENIX Association
28th USENIX Security Symposium    949
a user clicks any element on this page7. Another example
is detected on the page http://azasianow.com/, where the third-
party script http://fullspeeddownload.com/rq/4297 registered an
event handler on the  element. We also consider such
practices as a type of privilege abuse, as they force a user
to visit a URL when the user interacts only with first-party
contents. What is worse, even an experienced user with some
technical background cannot easily find out that the naviga-
tion is actually controlled by a third-party script rather than
the website she/he directly visits.
Interestingly, we find on 12 websites that 14 third-party ele-
ments were attached with navigation event handlers by a third-
party script of a different organization. For example, the web-
site https://www.mlbstream.io/ included the third-party script
https://amadagasca.com/rgCQwi5INUm04AxMu/5457, which reg-
istered an event handler on an  element. The user would
be directed to https://jackettrain.com/imp/5457/?scontext_r=...
upon clicking on that image and finally land at a random
website. One possible reason is that the attaching scripts were
loaded after the other third-party scripts had inserted those
elements, so that they mistakenly attached event handlers to
the other third-party elements.
We do not find any third-party script intercepting user clicks
by registering navigation event handlers with huge third-party
elements. On the other hand, we discover 2 websites added
navigation event handlers to their own huge elements. In
particular, the websites http://www.force-download.net/ and http:
//www.force-download.es/ both registered a navigation event
handler to the  node to intercept user clicks, just as the
above-mentioned third-party scripts. Nevertheless, we do not
consider them as malicious.
5.2.3 Interception by Visual Deception
We analyze how the two visual deception techniques, mimicry
and transparent overlay (§4.3.3) are used in the wild.
Mimicry. We discover 140 mimic third-party element groups
on 87 websites. These third-party contents are carefully de-
signed to resemble nearby first-party contents. Hence, unwary
users are very likely to be fooled and consequently click them.
Figure 1(a) shows an example of such a mimicry trick
that we detect on the website https://www.bintang.com. The
contents enclosed within the yellow rectangle were inserted by
the third-party script https://securepubads.g.doubleclick.net/gpt/
pubads_impl_207.js, whereas those in the red rectangles were
the organic first-party contents. Without scrutiny, they just
look like each other. The only visual hint for discriminating
them is the text Sponsored, which was displayed in a very
small font size just as the first-party sub captions in the red
rectangles. Even though a user may notice this small text,
she/he may still decide to click the third-party elements as they
appear to be provided directly by the first-party website which
7This is not true for elements with other click event listeners that stop the
event propagation.
(b) Transparent overlay.
(a) Mimicry.
Figure 1: Examples of visual deceptive third-party contents.
she/he trusts. However, such trust would be abused in this case
because those contents were generated solely by a third-party
script the user does not know. In particular, the navigation
URL was under the full control of this unknown third-party
script and could take the user to any (potentially unsafe) page.
We will discuss more about the security implication in §5.4.
Transparent Overlay. We detect 146 transparent overlay
third-party element groups on 144 websites. Specially, they
covered a significant portion (at least 25%) of first-party ele-
ments regardless of mouse scroll. We could not cancel them
out by automatically clicking elements in those websites. Fur-
ther, they were either completely transparent or translucent
with a very low opacity style value. What is worse, many
of them contained NO user-perceivable content (e.g., texts
or images), hence being transparent. As a result, they were
almost—if not absolutely—invisible and thus difficult to be
noticed.
Figure 1(b) demonstrates an example of such a visual trick
that we identify on the website http://jgsdf.ucoz.com. The yel-
low rectangle includes the third-party contents that over-
lapped with the underlying first-party contents, which are
enclosed by the cyan rectangles. The script that created these
third-party contents is http://pl14318198.puserving.com/a2/49/
14/a2491467a19ffc3f9fe0dbe66e54bae0.js. Although the overlay
third-party contents were not visible in this case, they con-
stantly covered about 50% of the first-party contents in the
cyan rectangles no matter how a user scrolled this page. As
a result, this script could intercept any click on the covered
first-party elements, because the click would be first passed to
the overlay third-party elements. When a user clicked within
the area of yellow rectangle, an ad link was opened in a new
window.
Although third-party scripts can deceive a user with differ-
ent tricks, the effectiveness can vary dramatically depending
on their implementation and the end user’s technical back-
ground. In general, we think they are less effective compared
with the other two direct techniques we have discussed above.
In particular, whether the mimic contents are deceptive is re-
ally subjective. We leave it for our future work to examine
950    28th USENIX Security Symposium
USENIX Association
how effective the visual deceptions are on real users.
5.2.4 Evasion of Detection
We also detect a few cases that third-party scripts selectively
intercepted user clicks. In particular, they would limit the rate
at which they intercept the clicks to avoid a user’s suspicion.
For instance, some scripts would activate the page navigation
code in their event handlers only when a user first visits a
page. This can be easily implemented by dropping a cookie
in a user’s browser. They might clear this flag after some time
(e.g., a day) to reactivate the click interception code. However,
we do not have enough data to learn the timeouts they use.
We discuss next such a detection evasion example.
The
script
https://pndelfast.com/riYfAyTH5nYD/4869—
included by the website https://torrentcounter.to/—selectively
intercepted the user clicks on the background of the website.
We observed the interception only when we visited the
page with a clean cookie, which suggests the script used
a cookie to log click interception status. Interestingly, we
find the script was obfuscated to prevent a normal user from
analyzing it. We deobfuscate the script (Listing 1), and
search for the keyword cookie. As expected, we find several
functions that are used to control the rate of click interception.
Lines 8, 13, and 16 define the functions "setCookie",
"removeCookie", and "getCookie", respectively. Line 6
defines the "timeout" variable that we suspect to control
the interception timeout or interval. It sets the cookie in
Line 28, if the return value of the function init defined in
Line 20 is not true. The cookie is deleted in Line 33. This
script also defines several variables, e.g., "certain_click
",
"delay_before_start_clicks",
"click_num", "interval_between_ads_clicks", which we
believe to be used to control click interception. As is limited
by the space, we do not discuss in more details how the script
works. It would be an interesting research topic to investigate
how these scripts cloak their malicious activities to avoid
detection.
Summary. We confirm that various click interception tech-
niques have been used in the wild. Third-party scripts
intentionally intercepted user clicks using event listeners,
and manipulate user clicks through visual deceptions. They
also leveraged huge anchor elements to deliberately inter-
cept user clicks. Further, many third-party scripts even
modified first-party hyperlinks to intercept user clicks.
"every_x_click",
5.3 Click Interception Scripts
In this section, we characterize click interception based on
the third-party scripts that intercept user clicks. Further, we
investigate how they were embedded to intercept user clicks.
1 var _0x3e0d = ["...", " certain_click ", " every_x_click "
, " delay_before_start_clicks ", " click_num ", "
interval_between_ads_clicks ", " has_adblock ", "...
"];
"data" : {
var target = {
2 var build = function () {
3
4
5
6
7
8
"key" : " cookie ",
"value" : " timeout "
},
" setCookie " : function (value , name , path , headers )
{
var cookie = name + "=" + path;
headers [" cookie "] = cookie ;
},
" removeCookie " : function () {
return "dev";
},
" getCookie " : function (match , href) {
var v = match(new RegExp (" (?:^|; )" + href["
replace " ](/([. $ ?*|{}() []\/+^]) /g, "$1") + "
=([^;]*) "));
return v ? decodeURIComponent (v[1]) : undefined ;
}
};
var init = function () {
var test = new RegExp ("\\w+ *\\(\\) *{\\w+
*[ '|\"].+[ '|\"];? *}");
return test["test"]( target [" removeCookie "]["
toString "]());
};
target [" updateCookie "] = init;
var array = "";
var _0x418128 = target [" updateCookie "]();
if (! _0x418128 ) {
target [" setCookie "](["*"], " counter ", 1);
} else {
if ( _0x418128 ) {
array = target [" getCookie "](null , " counter ");
} else {
target [" removeCookie "]();
}
}
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36 };
Listing 1: A simplified click interception script from https:
//pndelfast.com.
5.3.1 Third-party Scripts Characterization
Our results in §5.2 demonstrate that third-party scripts lever-
age all the three techniques to intercept user clicks. We present
the statistics of these scripts—the unique number of script
URLs, origins, and domains in Table 2.
Huge Hyperlinks. We detect 86 unique third-party scripts
that injected huge  tags into their embedding pages. We
show the top 5 origins of such scripts in Table 3. The notice-
able scripts are those loaded from http://gynax.com. They were
found to create one huge  element on each of 47 web-
sites they were included. Each  tag was enclosed within a
 element, which further contained a full-page image.
All the hyperlinks would finally reach https://wheel.28grand-
casino.com/, which is an online gambling game website.
Hyperlink Modifications. We detect 57 unique third-party
scripts that directly intercepted user clicks by modifying first-
party hyperlinks. We show the top 10 origins of such scripts
in Table 4. The top script https://cdn.adf.ly/js/link-converter.js
USENIX Association
28th USENIX Security Symposium    951
Table 2: Statistics of unique click interception scripts.
Table 4: Top 3rd-party script origins modifying first-party links.
Technique
Hyperlinks
Modifying 1st-party links
Modifying 3rd-party links
Inserting huge 3rd-party links
Event Handlers
On 1st-party nodes
On 3rd-party nodes
On huge 3rd-party nodes
Visual Deceptions
Mimicry
Transparent Overlay
#URLs
145
57
2
86