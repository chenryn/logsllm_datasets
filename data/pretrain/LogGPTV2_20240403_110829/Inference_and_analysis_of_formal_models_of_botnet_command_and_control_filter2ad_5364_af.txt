effort. Hiding our trafﬁc in the background noise would be an in-
teresting area for future research.
We also note that our protocol state-machine inference approach
would not work if any assumptions laid out in Section 2.3 are vi-
olated. The determinism and ﬁniteness assumptions are the most
limiting.
A protocol that behaves non-deterministically (e.g., a date/time
triggered behavior) is more challenging to infer. As discussed in
Section 2.3, one option is to discretize time and encode it directly
into the alphabet. Despite obvious limitations, our conjecture is
that such an approach could be sufﬁcient for inferring a majority of
existing protocols. Only future research can (dis)prove our conjec-
ture.
While inﬁnite-state protocols can be abstracted with ﬁnite-state
machines (c.f. Mohri-Nederhof algorithm for abstracting context-
free with regular ones [27]), such abstractions might not be pre-
cise enough for all potential applications. To make things worse,
many protocols have mildly-context-sensitive features, like buffer
lengths. The grammatical inference techniques [14] for such more
expressive languages are still in their infancy. Inference of more
expressive models is a promising research direction, not only in the
context of protocol inference.
The focus of our work is the model inference technique itself,
and we relied upon prior work [6] and manual abstraction to come
up with the alphabet, which might be incomplete, i.e., it might not
contain all messages that can cause a state-change in the protocol.
The clustering of messages in a single direction for abstraction can
be automatic [10], but cannot guarantee the completeness of the
alphabet either. To our knowledge, automatic reverse-engineering
of the complete alphabet is an open problem.
8. RELATED WORK
The work presented in this paper is in the intersection of protocol
model inference and grammatical inference, and also contributes to
the previous work in the area of analysis of botnets (e.g., [2, 17, 18,
19, 22]).
The most closely related work, to our knowledge, is the work of
Comparetti et al. [10] on the Prospex system. The automatic clus-
tering and abstraction feature in Prospex is more advanced than
the manual abstraction that we did, so our future work is likely
going to focus on improving that aspect of our system. Unlike
our approach, Prospex adopts passive off-line inference and models
protocols with Moore machines. These choices have a number of
consequences: (1) Inferred models are incomplete state-machines,
which means that any subsequent analysis is bound to be impre-
cise. In contrast, our approach infers complete state machines. (2)
Since protocols are reactive systems, there are no accepting or re-
jecting states. To work around that problem, Prospex differenti-
ates states using regular expressions describing messages received
before each state is reached. The regular expression labels pre-
vent the incomplete state-machine minimization algorithms, like
Exbar [25], to merge all the states into a single state. We avoid this
problem altogether by using a model more appropriate for reactive
systems — Mealy machines and L∗ algorithm guarantee that the
inferred machine is minimal. (3) The minimization of incomplete
state-machines is a known NP-complete problem [30], so it is ques-
tionable whether Prospex would scale to large complex protocols.
Our approach dodges the NP-completeness using proactive infer-
ence, at the cost of a small probability of error (ε = 10−2) with
high conﬁdence (γ = 10−6) [3].
Earlier work on protocol inference by Hsu et al. [21] does use
Mealy machines, but also adopts off-line inference, which means
that the inferred models will be incomplete and minimization is
NP-complete. Their solution is an approximate algorithm. Unfor-
tunately, even computing a model that is within a polynomial size
of the minimal one is NP-complete [34, p. 98–99], meaning that
their polynomial-time approximation algorithm will compute very
large models in some cases. In contrast, we developed a version
of L∗ optimized for on-line protocol inference, with known advan-
tages over the off-line approaches (polynomial computational com-
plexity, completeness).
The results presented in this paper would not have been possible
without the prior research on automatic message format reverse-
engineering by Cui et al. [12, 13] and the work of Caballero et
al. [7], which we used in this paper. All these techniques are cru-
cial for both manual and automatic message abstraction into ﬁnite
alphabets, so we are looking forward to the further progress in re-
search on automatic message format reverse-engineering.
Another aspect important in general protocol model inference
437(a)
0
1
  1 / 1   2 / 1
  3 / 1   4 / 1   5 / 1   1 / 1   2 / 1   1 3 / 1
  9 / 3
    1 4 / 3
3
  1 / 1   2 / 1   1 3 / 1
  1 4 / 3   9 / 3
  6 / 1
  7 / 1
  1 0 / 1
  9 / 3   1 4 / 3
4
  9 / 3
  1 4 / 3
  8 / 2
2
5
(b)
0   1
  3 / 1   4 / 1   5 / 1
  1 3 / 1   1 / 1   2 / 1
3
  1 / 1   2 / 1   1 3 / 1
  9 / -
  1 0 / -
  1 4 / 3
  7 / 1   6 / 1
  9 / -
  1 0 / -   1 4 / 3
4
  1 0 / 1
  9 / -
  1 0 / -   1 4 / 3
  8 / 2
2
5
ID
1
2
3
4
5
6
Semantics
HELO 1
EHLO 1
MAIL FROM:
MAIL FROM:<>
MAIL FROM:
RCPT TO:
Direction
→ SS
→ SS
→ SS
→ SS
→ SS
→ SS
ID
7
8
9
10
11
12
(c)
Semantics
Direction
RCPT TO:
DATA
content
\r\n.\r\n
EXPN all
VRFY usr
→ SS
→ SS
→ SS
→ SS
→ SS
→ SS
ID Semantics Direction
13
14
1
2
3
RSET
QUIT
250
354
221
→ SS
→ SS
← SS
← SS
← SS
Figure 8: Inferred SMTP State Machines: (a) Postﬁx SMTP 2.5.5, (b) MegaD non-Standard SMTP and (c) Abstraction Table.
is dealing with encryption. Caballero et al. [6] recently proposed
an automatic technique for extracting encryption routines from bi-
nary. Similarly, Wang et al. [36] deals with reverse-engineering of
encrypted messages.
Once the protocol model is known, it can be used to incorporate
into stateful protocol analyzers, like Bro [29] and GAPA [4], and
ﬁrewalls, like Shield [35]. All these systems require protocol spec-
iﬁcations to analyze trafﬁc, detect intrusions, and improve security.
The technology we developed can provide such speciﬁcations.
Our contributions to the ﬁeld of grammatical inference (more
precisely, regular language inference) extend the previous work of
Shahbaz and Groz [33], by specializing their approach to proto-
col inference, and by a number of optimizations for decreasing the
number of membership queries, which are expensive in the real
network setting. While parallelization of L∗ and introduction of a
cache for concentrating results of parallel probes came as natural
optimizations suitable for our setting, the output symbol prediction
required more intellectual effort. Our inspiration came from the
recent work of Gupta and McMillan [20]. They applied decision-
trees [31], a standard machine-learning technique, to complete in-
complete state-machines learned in the hardware veriﬁcation set-
ting for the purpose of abstracting hardware modules and achieving
compositional veriﬁcation.
9. CONCLUSIONS
We have proposed, to the best of our knowledge, the ﬁrst tech-
nique to infer complete protocol state machines in the realistic high-
latency network setting, and applied it to the analysis of botnet
C&C protocols. While the classic L∗ algorithm would have taken
4.46 days to infer the protocol model of the MegaD C&C dis-
tributed system, we introduced a novel and effective prediction
technique to minimize the number of queries generated during the
inference process, reducing the amount of time required to just 12
hours. This is further optimized through parallelization.
By analyzing the complete protocol models inferred by our tech-
nique, we offer novel insights to existing problems on botnet C&Cs.
We hope that our new insights, gained through our protocol infer-
ence technique and novel analyses, will render future attacks on
MegaD and other botnets cheaper and more effective. With the
new technology to ﬁght botnets we developed, we hope to see a
decrease in the amount of spam and denial of service attacks, and
an increase of everyone’s productivity and security.
10. ACKNOWLEDGMENTS
We would like to thank Greg Bronevetsky, Vern Paxson, Nishant
Sinha, and the anonymous reviewers for insightful comments to
improve this manuscript.
11. REFERENCES
[1] 2007 malware report: The economic impact of viruses,
spyware, adware, botnets, and other malicious code.
Technical report, Computer Economics Inc., 2007.
[2] Moheeb Abu Rajab, Jay Zarfoss, Fabian Monrose, and
Andreas Terzis. A multifaceted approach to understanding
the botnet phenomenon. In IMC ’06: Proceedings of the 6th
ACM SIGCOMM conference on Internet measurement, pages
41–52, New York, NY, USA, 2006. ACM.
[3] Dana Angluin. Learning regular sets from queries and
counterexamples. Information and Computation,
75(2):87–106, 1987.
[4] Nikita Borisov, David Brumley, Helen J. Wang, John
Dunagan, Pallavi Joshi, and Chuanxiong Guo. Generic
application-level protocol analyzer and its language. In
NDSS’07: Proceedings of the 2007 Network and Distributed
System Security Symposium. The Internet Society, Feb 2007.
[5] Juan Caballero, Noah M. Johnson, Stephen McCamant, and
Dawn Song. Binary code extraction and interface
identiﬁcation for security applications. In NDSS’10:
Proceedings of the 17th Annual Network and Distributed
System Security Symposium, Feb 2010.
[6] Juan Caballero, Pongsin Poosankam, Christian Kreibich, and
Dawn Song. Dispatcher: Enabling active botnet inﬁltration
using automatic protocol reverse-engineering. In CCS’09:
438Proceedings of the 16th ACM conference on Computer and
communications security, pages 621–634, New York, NY,
USA, 2009. ACM.
[7] Juan Caballero, Heng Yin, Zhenkai Liang, and Dawn Song.
Polyglot: Automatic extraction of protocol message format
using dynamic binary analysis. In CCS’07: Proceedings of
the 14th ACM Conference on Computer and
Communications Security, pages 317–329, New York, NY,
USA, 2007. ACM.
[8] Chia Yuan Cho, Juan Caballero, Chris Grier, Vern Paxson,
and Dawn Song. Insights from the inside: A view of botnet
management from inﬁltration. In LEET’10: Proceedings of
the 3rd USENIX Workshop on Large-Scale Exploits and
Emergent Threats, pages 1–1, Berkeley, CA, USA, 2010.
USENIX Association.
[9] Edmund M. Clarke, Orna Grumberg, and Doron A. Peled.
Model checking. MIT Press, Cambridge, MA, USA, 1999.
[10] Paolo Milani Comparetti, Gilbert Wondracek, Christopher
Kruegel, and Engin Kirda. Prospex: Protocol speciﬁcation
extraction. In SP’09: Proceedings of the 2009 30th IEEE
Symposium on Security and Privacy, pages 110–125,
Washington, DC, USA, 2009. IEEE Computer Society.
[11] Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest,
and Clifford Stein. Introduction to Algorithms. The MIT
Press, 2nd edition, 2001.
[12] Weidong Cui, Jayanthkumar Kannan, and Helen J. Wang.
Discoverer: Automatic protocol reverse engineering from
network traces. In SS’07: Proceedings of 16th USENIX
Security Symposium, pages 1–14, Berkeley, CA, USA, 2007.
USENIX Association.
[13] Weidong Cui, Marcus Peinado, Karl Chen, Helen J. Wang,
and Luis Irún-Briz. Tupni: Automatic reverse engineering of
input formats. In CCS’08: Proceedings of the 15th ACM
Conference on Computer and Communications Security,
pages 391–402. ACM, Oct 2008.
[14] Colin de la Higuera. Grammatical Inference: Learning
Automata and Grammars. Cambridge University Press,
2010.
[15] Roger Dingledine, Nick Mathewson, and Paul Syverson. Tor:
the second-generation onion router. In SSYM’04:
Proceedings of the 13th conference on USENIX Security
Symposium, pages 21–21, Berkeley, CA, USA, 2004.
USENIX Association.
[16] E. Mark Gold. Complexity of automaton identiﬁcation from
given data. Information and Control, 37(3):302–320, 1978.
[17] Julian B. Grizzard, Vikram Sharma, Chris Nunnery,
Brent ByungHoon Kang, and David Dagon. Peer-to-peer
botnets: overview and case study. In HotBots’07:
Proceedings of the 1st Workshop on Hot Topics in
Understanding Botnets, pages 1–1, Berkeley, CA, USA,
2007. USENIX Association.
[18] Guofei Gu, Roberto Perdisci, Junjie Zhang, and Wenke Lee.
Botminer: clustering analysis of network trafﬁc for protocol-
and structure-independent botnet detection. In SS’08:
Proceedings of the 17th conference on Security symposium,
pages 139–154, Berkeley, CA, USA, 2008. USENIX
Association.
[19] Guofei Gu, Phillip Porras, Vinod Yegneswaran, Martin Fong,
and Wenke Lee. Bothunter: detecting malware infection
through IDS-driven dialog correlation. In SS’07:
Proceedings of 16th USENIX Security Symposium on
USENIX Security Symposium, pages 1–16, Berkeley, CA,
USA, 2007. USENIX Association.
[20] Anubhav Gupta, K. L. McMillan, and Zhaohui Fu.
Automated assumption generation for compositional
veriﬁcation. Form. Methods Syst. Des., 32(3):285–301, 2008.
[21] Tating Hsu, Guoqiang Shu, and David Lee. A model-based
approach to security ﬂaw detection of network protocol
implementation. In ICNP’08: Proceedings of the 15th IEEE
International Conference on Network Protocols, pages
114–123, Oct 2008.
[22] Anestis Karasaridis, Brian Rexroad, and David Hoeﬂin.
Wide-scale botnet detection and characterization. In
HotBots’07: Proceedings of the 1st Workshop on Hot Topics
in Understanding Botnets, pages 7–7, Berkeley, CA, USA,
2007. USENIX Association.
[23] J. Klensin. RFC 5321: Simple Mail Transfer Protocol, Oct
2008.
[24] Andreas Kuehlmann and Florian Krohm. Equivalence
checking using cuts and heaps. In DAC’97: Proceedings of
the 34th annual Design Automation Conference, pages
263–268, New York, NY, USA, 1997. ACM.
[25] Kevin J. Lang. Faster algorithms for ﬁnding minimal
consistent DFAs. Technical report, NEC, 1999.
[26] George H. Mealy. A method for synthesizing sequential
circuits. Bell System Technical Journal, 34(5):1045–1079,
1955.
[27] Mehryar Mohri and Mark-Jan Nederhof. Regular
approximation of context-free grammars through
transformation. In Robustness in Language and Speech
Technology, pages 153–163. Kluwer Academic Publishers,
Dordrecht, 2001.
[28] E. F. Moore. Gedanken Experiments On Sequential
Machines. In Automata Studies, Annals of Mathematical
Studies, volume 34, pages 129–153, Princeton, NJ, USA,
1956. Princeton University Press.
[29] Vern Paxson. Bro: a system for detecting network intruders
in real-time. In SSYM’98: Proceedings of the 7th conference
on USENIX Security Symposium, pages 3–3, Berkeley, CA,
USA, 1998. USENIX Association.
[30] C. P. Pﬂeeger. State reduction in incompletely speciﬁed
ﬁnite-state machines. IEEE Transactions on Computers,
22(12):1099–1102, 1973.
[31] J. R. Quinlan. Induction of decision trees. Machine Learning,
1(1):81–106, 1986.
[32] R. L. Rivest and R. E. Schapire. Inference of ﬁnite automata
using homing sequences. In STOC’89: Proceedings of the
21st annual ACM symposium on Theory of computing, pages
411–420, New York, NY, USA, 1989. ACM.
[33] Muzammil Shahbaz and Roland Groz. Inferring Mealy
machines. In FM’09: Proceedings of the 2nd World
Congress on Formal Methods, pages 207–222, Berlin,
Heidelberg, 2009. Springer.
[34] B. A. Trakhtenbrot and Ya. M. Barzdin. Finite Automata,
Behavior and Synthesis. North Holland, Amsterdam, 1973.
[35] Helen J. Wang, Chuanxiong Guo, Daniel R. Simon, and Alf
Zugenmaier. Shield: vulnerability-driven network ﬁlters for
preventing known vulnerability exploits. SIGCOMM
Computer Communication Review, 34(4):193–204, 2004.
[36] Zhi Wang, Xuxian Jiang, Weidong Cui, Xinyuan Wang, and
Mike Grace. ReFormat: Automatic Reverse Engineering of
Encrypted Messages. In ESORICS’09: Proceedings of the
14th European Symposium on Research in Computer
Security, volume 5789 of Lecture Notes in Computer
Science, pages 200–215. Springer, Sep 2009.
439