directive within any SPL block to provide the autonomous transaction capability.
For more information, see Section 3.6.3.
1.2 Typographical Conventions Used in this Guide
Certain typographical conventions are used in this manual to clarify the meaning and
usage of various commands, statements, programs, examples, etc. This section provides a
summary of these conventions.
In the following descriptions a term refers to any word or group of words which may be
language keywords, user-supplied values, literals, etc. A term’s exact meaning depends
upon the context in which it is used.
 Italic font introduces a new term, typically, in the sentence that defines it for the
first time.
 Fixed-width (mono-spaced) font is used for terms that must be given
literally such as SQL commands, specific table and column names used in the
examples, programming language keywords, etc. For example, SELECT * FROM
emp;
 Italic fixed-width font is used for terms for which the user must
substitute values in actual usage. For example, DELETE FROM table_name;
 A vertical pipe | denotes a choice between the terms on either side of the pipe. A
vertical pipe is used to separate two or more alternative terms within square
brackets (optional choices) or braces (one mandatory choice).
 Square brackets [ ] denote that one or none of the enclosed term(s) may be
substituted. For example, [ a | b ], means choose one of “a” or “b” or neither
of the two.
 Braces {} denote that exactly one of the enclosed alternatives must be specified.
For example, { a | b }, means exactly one of “a” or “b” must be specified.
 Ellipses ... denote that the proceeding term may be repeated. For example, [ a |
b ] ... means that you may have the sequence, “b a a b a”.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 10
Database Compatibility for Oracle® Developers Guide
1.3 Configuration Parameters Compatible with Oracle
Databases
EDB Postgres Advanced Server supports the development and execution of applications
compatible with PostgreSQL and Oracle. Some system behaviors can be altered to act in
a more PostgreSQL or in a more Oracle compliant manner; these behaviors are controlled
by configuration parameters. Modifying the parameters in the postgresql.conf file
changes the behavior for all databases in the cluster, while a user or group can SET the
parameter value on the command line, effecting only their session. These parameters are:
 edb_redwood_date – Controls whether or not a time component is stored in
DATE columns. For behavior compatible with Oracle databases, set
edb_redwood_date to TRUE. See Section 1.3.1.
 edb_redwood_raw_names – Controls whether database object names appear in
uppercase or lowercase letters when viewed from Oracle system catalogs. For
behavior compatible with Oracle databases, edb_redwood_raw_names is set to
its default value of FALSE. To view database object names as they are actually
stored in the PostgreSQL system catalogs, set edb_redwood_raw_names to
TRUE. See Section 1.3.2.
 edb_redwood_strings – Equates NULL to an empty string for purposes of
string concatenation operations. For behavior compatible with Oracle databases,
set edb_redwood_strings to TRUE. See Section 1.3.3.
 edb_stmt_level_tx – Isolates automatic rollback of an aborted SQL command
to statement level rollback only – the entire, current transaction is not
automatically rolled back as is the case for default PostgreSQL behavior. For
behavior compatible with Oracle databases, set edb_stmt_level_tx to TRUE;
however, use only when absolutely necessary. See Section 1.3.4.
 oracle_home – Point Advanced Server to the correct Oracle installation
directory. See Section 1.3.5.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 11
Database Compatibility for Oracle® Developers Guide
1.3.1 edb_redwood_date
When DATE appears as the data type of a column in the commands, it is translated to
TIMESTAMP at the time the table definition is stored in the data base if the configuration
parameter edb_redwood_date is set to TRUE. Thus, a time component will also be
stored in the column along with the date. This is consistent with Oracle’s DATE data type.
If edb_redwood_date is set to FALSE the column’s data type in a CREATE TABLE or
ALTER TABLE command remains as a native PostgreSQL DATE data type and is stored as
such in the database. The PostgreSQL DATE data type stores only the date without a time
component in the column.
Regardless of the setting of edb_redwood_date, when DATE appears as a data type in
any other context such as the data type of a variable in an SPL declaration section, or the
data type of a formal parameter in an SPL procedure or SPL function, or the return type
of an SPL function, it is always internally translated to a TIMESTAMP and thus, can
handle a time component if present.
See the Database Compatibility for Oracle Developers Reference Guide for more
information about date/time data types.
1.3.2 edb_redwood_raw_names
When edb_redwood_raw_names is set to its default value of FALSE, database object
names such as table names, column names, trigger names, program names, user names,
etc. appear in uppercase letters when viewed from Oracle catalogs (for a complete list of
supported catalog views, see the Database Compatibility for Oracle Developers
Reference Guide). In addition, quotation marks enclose names that were created with
enclosing quotation marks.
When edb_redwood_raw_names is set to TRUE, the database object names are
displayed exactly as they are stored in the PostgreSQL system catalogs when viewed
from the Oracle catalogs. Thus, names created without enclosing quotation marks appear
in lowercase as expected in PostgreSQL. Names created with enclosing quotation marks
appear exactly as they were created, but without the quotation marks.
For example, the following user name is created, and then a session is started with that
user.
CREATE USER reduser IDENTIFIED BY password;
edb=# \c - reduser
Password for user reduser:
You are now connected to database "edb" as user "reduser".
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 12
Database Compatibility for Oracle® Developers Guide
When connected to the database as reduser, the following tables are created.
CREATE TABLE all_lower (col INTEGER);
CREATE TABLE ALL_UPPER (COL INTEGER);
CREATE TABLE "Mixed_Case" ("Col" INTEGER);
When viewed from the Oracle catalog, USER_TABLES, with edb_redwood_raw_names
set to the default value FALSE, the names appear in uppercase except for the
Mixed_Case name, which appears as created and also with enclosing quotation marks.
edb=> SELECT * FROM USER_TABLES;
schema_name | table_name | tablespace_name | status | temporary
-------------+--------------+-----------------+--------+-----------
REDUSER | ALL_LOWER | | VALID | N
REDUSER | ALL_UPPER | | VALID | N
REDUSER | "Mixed_Case" | | VALID | N
(3 rows)
When viewed with edb_redwood_raw_names set to TRUE, the names appear in
lowercase except for the Mixed_Case name, which appears as created, but now without
the enclosing quotation marks.
edb=> SET edb_redwood_raw_names TO true;
SET
edb=> SELECT * FROM USER_TABLES;
schema_name | table_name | tablespace_name | status | temporary
-------------+------------+-----------------+--------+-----------
reduser | all_lower | | VALID | N
reduser | all_upper | | VALID | N
reduser | Mixed_Case | | VALID | N
(3 rows)
These names now match the case when viewed from the PostgreSQL pg_tables
catalog.
edb=> SELECT schemaname, tablename, tableowner FROM pg_tables WHERE
tableowner = 'reduser';
schemaname | tablename | tableowner
------------+------------+------------
reduser | all_lower | reduser
reduser | all_upper | reduser
reduser | Mixed_Case | reduser
(3 rows)
1.3.3 edb_redwood_strings
In Oracle, when a string is concatenated with a null variable or null column, the result is
the original string; however, in PostgreSQL concatenation of a string with a null variable
or null column gives a null result. If the edb_redwood_strings parameter is set to
TRUE, the aforementioned concatenation operation results in the original string as done
by Oracle. If edb_redwood_strings is set to FALSE, the native PostgreSQL behavior
is maintained.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 13
Database Compatibility for Oracle® Developers Guide
The following example illustrates the difference.
The sample application introduced in the next section contains a table of employees. This
table has a column named comm that is null for most employees. The following query is
run with edb_redwood_string set to FALSE. The concatenation of a null column with
non-empty strings produces a final result of null, so only employees that have a
commission appear in the query result. The output line for all other employees is null.
SET edb_redwood_strings TO off;
SELECT RPAD(ename,10) || ' ' || TO_CHAR(sal,'99,999.99') || ' ' ||
TO_CHAR(comm,'99,999.99') "EMPLOYEE COMPENSATION" FROM emp;
EMPLOYEE COMPENSATION
----------------------------------
ALLEN 1,600.00 300.00
WARD 1,250.00 500.00
MARTIN 1,250.00 1,400.00
TURNER 1,500.00 .00
(14 rows)
The following is the same query executed when edb_redwood_strings is set to TRUE.
Here, the value of a null column is treated as an empty string. The concatenation of an
empty string with a non-empty string produces the non-empty string. This result is
consistent with the results produced by Oracle for the same query.
SET edb_redwood_strings TO on;
SELECT RPAD(ename,10) || ' ' || TO_CHAR(sal,'99,999.99') || ' ' ||
TO_CHAR(comm,'99,999.99') "EMPLOYEE COMPENSATION" FROM emp;
EMPLOYEE COMPENSATION
----------------------------------
SMITH 800.00
ALLEN 1,600.00 300.00
WARD 1,250.00 500.00
JONES 2,975.00
MARTIN 1,250.00 1,400.00
BLAKE 2,850.00
CLARK 2,450.00
SCOTT 3,000.00
KING 5,000.00
TURNER 1,500.00 .00
ADAMS 1,100.00
JAMES 950.00
FORD 3,000.00
MILLER 1,300.00
(14 rows)
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 14
Database Compatibility for Oracle® Developers Guide
1.3.4 edb_stmt_level_tx
In Oracle, when a runtime error occurs in a SQL command, all the updates on the
database caused by that single command are rolled back. This is called statement level
transaction isolation. For example, if a single UPDATE command successfully updates
five rows, but an attempt to update a sixth row results in an exception, the updates to all
six rows made by this UPDATE command are rolled back. The effects of prior SQL
commands that have not yet been committed or rolled back are pending until a COMMIT
or ROLLBACK command is executed.
In PostgreSQL, if an exception occurs while executing a SQL command, all the updates
on the database since the start of the transaction are rolled back. In addition, the
transaction is left in an aborted state and either a COMMIT or ROLLBACK command must
be issued before another transaction can be started.
If edb_stmt_level_tx is set to TRUE, then an exception will not automatically roll
back prior uncommitted database updates, emulating the Oracle behavior. If
edb_stmt_level_tx is set to FALSE, then an exception will roll back uncommitted
database updates.
Note: Use edb_stmt_level_tx set to TRUE only when absolutely necessary, as this
may cause a negative performance impact.
The following example run in PSQL shows that when edb_stmt_level_tx is FALSE,
the abort of the second INSERT command also rolls back the first INSERT command.
Note that in PSQL, the command \set AUTOCOMMIT off must be issued, otherwise
every statement commits automatically defeating the purpose of this demonstration of the
effect of edb_stmt_level_tx.
\set AUTOCOMMIT off
SET edb_stmt_level_tx TO off;
INSERT INTO emp (empno,ename,deptno) VALUES (9001, 'JONES', 40);
INSERT INTO emp (empno,ename,deptno) VALUES (9002, 'JONES', 00);
ERROR: insert or update on table "emp" violates foreign key constraint
"emp_ref_dept_fk"
DETAIL: Key (deptno)=(0) is not present in table "dept".
COMMIT;
SELECT empno, ename, deptno FROM emp WHERE empno > 9000;
empno | ename | deptno
-------+-------+--------
(0 rows)
In the following example, with edb_stmt_level_tx set to TRUE, the first INSERT
command has not been rolled back after the error on the second INSERT command. At
this point, the first INSERT command can either be committed or rolled back.
\set AUTOCOMMIT off
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 15
Database Compatibility for Oracle® Developers Guide
SET edb_stmt_level_tx TO on;
INSERT INTO emp (empno,ename,deptno) VALUES (9001, 'JONES', 40);
INSERT INTO emp (empno,ename,deptno) VALUES (9002, 'JONES', 00);
ERROR: insert or update on table "emp" violates foreign key constraint
"emp_ref_dept_fk"
DETAIL: Key (deptno)=(0) is not present in table "dept".
SELECT empno, ename, deptno FROM emp WHERE empno > 9000;
empno | ename | deptno
-------+-------+--------
9001 | JONES | 40
(1 row)
COMMIT;
A ROLLBACK command could have been issued instead of the COMMIT command in
which case the insert of employee number 9001 would have been rolled back as well.
1.3.5 oracle_home
Before creating a link to an Oracle server, you must direct Advanced Server to the correct
Oracle home directory. Set the LD_LIBRARY_PATH environment variable on Linux (or
PATH on Windows) to the lib directory of the Oracle client installation directory.
For Windows only, you can instead set the value of the oracle_home configuration
parameter in the postgresql.conf file. The value specified in the oracle_home
configuration parameter will override the Windows PATH environment variable.
The LD_LIBRARY_PATH environment variable on Linux (PATH environment variable or
oracle_home configuration parameter on Windows) must be set properly each time you
start Advanced Server.
When using a Linux service script to start Advanced Server, be sure LD_LIBRARY_PATH
has been set within the service script so it is in effect when the script invokes the pg_ctl
utility to start Advanced Server.
For Windows only: To set the oracle_home configuration parameter in the
postgresql.conf file, edit the file, adding the following line:
oracle_home = 'lib_directory '
Substitute the name of the Windows directory that contains oci.dll for
lib_directory.
After setting the oracle_home configuration parameter, you must restart the server for
the changes to take effect. Restart the server from the Windows Services console.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 16
Database Compatibility for Oracle® Developers Guide
1.4 About the Examples Used in this Guide
The examples shown in this guide are illustrated using the PSQL program. The prompt
that normally appears when using PSQL is omitted in these examples to provide extra
clarity for the point being demonstrated.
Examples and output from examples are shown in fixed-width, blue font on
a light blue background.
Also note the following points:
 During installation of the EDB Postgres Advanced Server the selection for
configuration and defaults compatible with Oracle databases must be chosen in
order to reproduce the same results as the examples shown in this guide. A default
compatible configuration can be verified by issuing the following commands in
PSQL and obtaining the same results as shown below.
SHOW edb_redwood_date;
edb_redwood_date
------------------
on
SHOW datestyle;
DateStyle
--------------
Redwood, DMY
SHOW edb_redwood_strings;
edb_redwood_strings
---------------------
on
 The examples use the sample tables, dept, emp, and jobhist, created and
loaded when Advanced Server is installed. The emp table is installed with triggers
that must be disabled in order to reproduce the same results as shown in this
guide. Log onto Advanced Server as the enterprisedb superuser and disable
the triggers by issuing the following command.
ALTER TABLE emp DISABLE TRIGGER USER;
The triggers on the emp table can later be re-activated with the following
command.
ALTER TABLE emp ENABLE TRIGGER USER;
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 17
Database Compatibility for Oracle® Developers Guide
2 SQL Tutorial
This section is an introduction to the SQL language for those new to relational database
management systems. Basic operations such as creating, populating, querying, and
updating tables are discussed along with examples.
More advanced concepts such as view, foreign keys, and transactions are discussed as
well.
2.1 Getting Started
Advanced Server is a relational database management system (RDBMS). That means it
is a system for managing data stored in relations. A relation is essentially a mathematical
term for a table. The notion of storing data in tables is so commonplace today that it
might seem inherently obvious, but there are a number of other ways of organizing
databases. Files and directories on Unix-like operating systems form an example of a
hierarchical database. A more modern development is the object-oriented database.
Each table is a named collection of rows. Each row of a given table has the same set of
named columns, and each column is of a specific data type. Whereas columns have a
fixed order in each row, it is important to remember that SQL does not guarantee the
order of the rows within the table in any way (although they can be explicitly sorted for
display).
Tables are grouped into databases, and a collection of databases managed by a single
Advanced Server instance constitutes a database cluster.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 18
Database Compatibility for Oracle® Developers Guide
2.1.1 Sample Database
Throughout this documentation we will be working with a sample database to help
explain some basic to advanced level database concepts.
2.1.1.1 Sample Database Installation
When Advanced Server is installed a sample database named, edb, is automatically
created. This sample database contains the tables and programs used throughout this
document by executing the script, edb-sample.sql, located in the
/usr/edb/as11/share directory.
This script does the following:
 Creates the sample tables and programs in the currently connected database
 Grants all permissions on the tables to the PUBLIC group
The tables and programs will be created in the first schema of the search path in which
the current user has permission to create tables and procedures. You can display the
search path by issuing the command:
SHOW SEARCH_PATH;
Altering the search path can be done using commands in PSQL.
2.1.1.2 Sample Database Description
The sample database represents employees in an organization.
It contains three types of records: employees, departments, and historical records of
employees.
Each employee has an identification number, name, hire date, salary, and manager. Some
employees earn a commission in addition to their salary. All employee-related
information is stored in the emp table.
The sample company is regionally diverse, so the database keeps track of the location of
the departments. Each company employee is assigned to a department. Each department
is identified by a unique department number and a short name. Each department is
associated with one location. All department-related information is stored in the dept
table.
The company also tracks information about jobs held by the employees. Some employees
have been with the company for a long time and have held different positions, received
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 19