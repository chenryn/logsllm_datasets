### 1.2 Typographical Conventions Used in this Guide

This guide employs specific typographical conventions to clarify the meaning and usage of various commands, statements, programs, and examples. The following section provides a summary of these conventions.

- **Italic Font**: Introduces a new term, typically in the sentence that defines it for the first time.
- **Fixed-Width (Mono-Spaced) Font**: Used for terms that must be given literally, such as SQL commands, specific table and column names used in examples, and programming language keywords. For example: `SELECT * FROM emp;`
- **Italic Fixed-Width Font**: Used for terms where the user must substitute values in actual usage. For example: `DELETE FROM table_name;`
- **Vertical Pipe (|)**: Denotes a choice between the terms on either side of the pipe. A vertical pipe is used to separate two or more alternative terms within square brackets (optional choices) or braces (one mandatory choice).
- **Square Brackets [ ]**: Indicate that one or none of the enclosed terms may be substituted. For example, `[ a | b ]` means choose one of "a" or "b" or neither.
- **Braces { }**: Indicate that exactly one of the enclosed alternatives must be specified. For example, `{ a | b }` means exactly one of "a" or "b" must be specified.
- **Ellipses (...)**: Indicate that the preceding term may be repeated. For example, `[ a | b ] ...` means you may have the sequence "b a a b a".

### 1.3 Configuration Parameters Compatible with Oracle Databases

EDB Postgres Advanced Server supports the development and execution of applications compatible with PostgreSQL and Oracle. Some system behaviors can be altered to act in a more PostgreSQL or Oracle-compliant manner, controlled by configuration parameters. Modifying these parameters in the `postgresql.conf` file changes the behavior for all databases in the cluster, while setting the parameter value on the command line affects only the current session. These parameters include:

- **edb_redwood_date**: Controls whether a time component is stored in `DATE` columns. For Oracle-compatible behavior, set `edb_redwood_date` to `TRUE`. See Section 1.3.1.
- **edb_redwood_raw_names**: Controls whether database object names appear in uppercase or lowercase when viewed from Oracle system catalogs. For Oracle-compatible behavior, set `edb_redwood_raw_names` to its default value of `FALSE`. To view names as they are stored in PostgreSQL system catalogs, set `edb_redwood_raw_names` to `TRUE`. See Section 1.3.2.
- **edb_redwood_strings**: Equates `NULL` to an empty string for string concatenation operations. For Oracle-compatible behavior, set `edb_redwood_strings` to `TRUE`. See Section 1.3.3.
- **edb_stmt_level_tx**: Isolates automatic rollback of an aborted SQL command to statement-level rollback only. For Oracle-compatible behavior, set `edb_stmt_level_tx` to `TRUE`, but use only when absolutely necessary. See Section 1.3.4.
- **oracle_home**: Points Advanced Server to the correct Oracle installation directory. See Section 1.3.5.

#### 1.3.1 edb_redwood_date

When `DATE` appears as the data type of a column in commands, it is translated to `TIMESTAMP` if `edb_redwood_date` is set to `TRUE`. This ensures that a time component is stored along with the date, consistent with Oracle's `DATE` data type. If `edb_redwood_date` is set to `FALSE`, the column remains as a native PostgreSQL `DATE` data type, storing only the date without a time component.

Regardless of the `edb_redwood_date` setting, when `DATE` appears in other contexts (e.g., variable data types in SPL declarations, formal parameters in SPL procedures, or return types of SPL functions), it is always internally translated to `TIMESTAMP` and can handle a time component if present.

For more information about date/time data types, see the Database Compatibility for Oracle Developers Reference Guide.

#### 1.3.2 edb_redwood_raw_names

When `edb_redwood_raw_names` is set to its default value of `FALSE`, database object names (such as table names, column names, trigger names, program names, user names, etc.) appear in uppercase letters when viewed from Oracle catalogs. Names created with enclosing quotation marks are displayed with those quotation marks.

When `edb_redwood_raw_names` is set to `TRUE`, the database object names are displayed exactly as they are stored in the PostgreSQL system catalogs when viewed from the Oracle catalogs. Thus, names created without enclosing quotation marks appear in lowercase, and names created with enclosing quotation marks appear as they were created, but without the quotation marks.

**Example:**

```sql
CREATE USER reduser IDENTIFIED BY password;
\c - reduser
Password for user reduser:
You are now connected to database "edb" as user "reduser".
```

When connected to the database as `reduser`, the following tables are created:

```sql
CREATE TABLE all_lower (col INTEGER);
CREATE TABLE ALL_UPPER (COL INTEGER);
CREATE TABLE "Mixed_Case" ("Col" INTEGER);
```

When viewed from the Oracle catalog `USER_TABLES` with `edb_redwood_raw_names` set to `FALSE`, the names appear in uppercase except for `Mixed_Case`, which appears as created and with enclosing quotation marks.

```sql
SELECT * FROM USER_TABLES;
```

Output:

```
schema_name | table_name | tablespace_name | status | temporary
-------------+--------------+-----------------+--------+-----------
REDUSER | ALL_LOWER | | VALID | N
REDUSER | ALL_UPPER | | VALID | N
REDUSER | "Mixed_Case" | | VALID | N
(3 rows)
```

When viewed with `edb_redwood_raw_names` set to `TRUE`, the names appear in lowercase except for `Mixed_Case`, which appears as created but without the enclosing quotation marks.

```sql
SET edb_redwood_raw_names TO true;
SELECT * FROM USER_TABLES;
```

Output:

```
schema_name | table_name | tablespace_name | status | temporary
-------------+------------+-----------------+--------+-----------
reduser | all_lower | | VALID | N
reduser | all_upper | | VALID | N
reduser | Mixed_Case | | VALID | N
(3 rows)
```

These names now match the case when viewed from the PostgreSQL `pg_tables` catalog.

```sql
SELECT schemaname, tablename, tableowner FROM pg_tables WHERE tableowner = 'reduser';
```

Output:

```
schemaname | tablename | tableowner
------------+------------+------------
reduser | all_lower | reduser
reduser | all_upper | reduser
reduser | Mixed_Case | reduser
(3 rows)
```

#### 1.3.3 edb_redwood_strings

In Oracle, concatenating a string with a `NULL` variable or column results in the original string. In PostgreSQL, concatenating a string with a `NULL` variable or column results in `NULL`. Setting `edb_redwood_strings` to `TRUE` emulates Oracle's behavior, while setting it to `FALSE` maintains PostgreSQL's native behavior.

**Example:**

The sample application introduced in the next section contains a table of employees. This table has a column named `comm` that is `NULL` for most employees. The following query is run with `edb_redwood_strings` set to `FALSE`.

```sql
SET edb_redwood_strings TO off;
SELECT RPAD(ename,10) || ' ' || TO_CHAR(sal,'99,999.99') || ' ' || TO_CHAR(comm,'99,999.99') "EMPLOYEE COMPENSATION" FROM emp;
```

Output:

```
EMPLOYEE COMPENSATION
----------------------------------
ALLEN 1,600.00 300.00
WARD 1,250.00 500.00
MARTIN 1,250.00 1,400.00
TURNER 1,500.00 .00
(14 rows)
```

The same query executed with `edb_redwood_strings` set to `TRUE` treats `NULL` as an empty string, resulting in the non-empty string.

```sql
SET edb_redwood_strings TO on;
SELECT RPAD(ename,10) || ' ' || TO_CHAR(sal,'99,999.99') || ' ' || TO_CHAR(comm,'99,999.99') "EMPLOYEE COMPENSATION" FROM emp;
```

Output:

```
EMPLOYEE COMPENSATION
----------------------------------
SMITH 800.00
ALLEN 1,600.00 300.00
WARD 1,250.00 500.00
JONES 2,975.00
MARTIN 1,250.00 1,400.00
BLAKE 2,850.00
CLARK 2,450.00
SCOTT 3,000.00
KING 5,000.00
TURNER 1,500.00 .00
ADAMS 1,100.00
JAMES 950.00
FORD 3,000.00
MILLER 1,300.00
(14 rows)
```

#### 1.3.4 edb_stmt_level_tx

In Oracle, when a runtime error occurs in a SQL command, all updates caused by that single command are rolled back. This is called statement-level transaction isolation. In PostgreSQL, if an exception occurs, all updates since the start of the transaction are rolled back, and the transaction is left in an aborted state.

Setting `edb_stmt_level_tx` to `TRUE` emulates Oracle's behavior, where an exception does not automatically roll back prior uncommitted database updates. Setting it to `FALSE` maintains PostgreSQL's native behavior.

**Example:**

The following example in PSQL shows that when `edb_stmt_level_tx` is `FALSE`, the abort of the second `INSERT` command also rolls back the first `INSERT` command.

```sql
\set AUTOCOMMIT off
SET edb_stmt_level_tx TO off;
INSERT INTO emp (empno, ename, deptno) VALUES (9001, 'JONES', 40);
INSERT INTO emp (empno, ename, deptno) VALUES (9002, 'JONES', 00);
```

Error:

```
ERROR: insert or update on table "emp" violates foreign key constraint "emp_ref_dept_fk"
DETAIL: Key (deptno)=(0) is not present in table "dept".
```

```sql
COMMIT;
SELECT empno, ename, deptno FROM emp WHERE empno > 9000;
```

Output:

```
empno | ename | deptno
-------+-------+--------
(0 rows)
```

In the following example, with `edb_stmt_level_tx` set to `TRUE`, the first `INSERT` command is not rolled back after the error on the second `INSERT` command.

```sql
\set AUTOCOMMIT off
SET edb_stmt_level_tx TO on;
INSERT INTO emp (empno, ename, deptno) VALUES (9001, 'JONES', 40);
INSERT INTO emp (empno, ename, deptno) VALUES (9002, 'JONES', 00);
```

Error:

```
ERROR: insert or update on table "emp" violates foreign key constraint "emp_ref_dept_fk"
DETAIL: Key (deptno)=(0) is not present in table "dept".
```

```sql
SELECT empno, ename, deptno FROM emp WHERE empno > 9000;
```

Output:

```
empno | ename | deptno
-------+-------+--------
9001 | JONES | 40
(1 row)
```

A `ROLLBACK` command could have been issued instead of the `COMMIT` command, in which case the insert of employee number 9001 would have been rolled back as well.

#### 1.3.5 oracle_home

Before creating a link to an Oracle server, you must direct Advanced Server to the correct Oracle home directory. Set the `LD_LIBRARY_PATH` environment variable on Linux (or `PATH` on Windows) to the `lib` directory of the Oracle client installation directory.

For Windows, you can set the `oracle_home` configuration parameter in the `postgresql.conf` file. The value specified in `oracle_home` will override the Windows `PATH` environment variable.

The `LD_LIBRARY_PATH` (Linux) or `PATH` (Windows) environment variable, or `oracle_home` configuration parameter, must be set properly each time you start Advanced Server.

When using a Linux service script to start Advanced Server, ensure `LD_LIBRARY_PATH` is set within the service script so it is in effect when the script invokes the `pg_ctl` utility to start Advanced Server.

**For Windows:**

To set the `oracle_home` configuration parameter in the `postgresql.conf` file, edit the file and add the following line:

```sql
oracle_home = 'lib_directory'
```

Substitute the name of the Windows directory that contains `oci.dll` for `lib_directory`.

After setting the `oracle_home` configuration parameter, restart the server for the changes to take effect. Restart the server from the Windows Services console.

### 1.4 About the Examples Used in this Guide

The examples shown in this guide are illustrated using the PSQL program. The prompt that normally appears when using PSQL is omitted in these examples to provide extra clarity for the point being demonstrated.

Examples and output from examples are shown in fixed-width, blue font on a light blue background.

**Note:**

- During the installation of EDB Postgres Advanced Server, select the configuration and defaults compatible with Oracle databases to reproduce the same results as the examples shown in this guide. A default compatible configuration can be verified by issuing the following commands in PSQL and obtaining the same results as shown below.

```sql
SHOW edb_redwood_date;
SHOW datestyle;
SHOW edb_redwood_strings;
```

- The examples use the sample tables `dept`, `emp`, and `jobhist`, created and loaded when Advanced Server is installed. The `emp` table is installed with triggers that must be disabled to reproduce the same results as shown in this guide. Log onto Advanced Server as the `enterprisedb` superuser and disable the triggers with the following command:

```sql
ALTER TABLE emp DISABLE TRIGGER USER;
```

The triggers on the `emp` table can later be re-activated with the following command:

```sql
ALTER TABLE emp ENABLE TRIGGER USER;
```

### 2 SQL Tutorial

This section introduces the SQL language for those new to relational database management systems. Basic operations such as creating, populating, querying, and updating tables are discussed, along with examples. More advanced concepts such as views, foreign keys, and transactions are also covered.

#### 2.1 Getting Started

Advanced Server is a relational database management system (RDBMS). It manages data stored in relations, which are essentially tables. Each table is a named collection of rows, and each row has the same set of named columns, each of a specific data type. While columns have a fixed order in each row, SQL does not guarantee the order of the rows within the table (although they can be explicitly sorted for display).

Tables are grouped into databases, and a collection of databases managed by a single Advanced Server instance constitutes a database cluster.

##### 2.1.1 Sample Database

Throughout this documentation, we will work with a sample database to help explain basic to advanced database concepts.

###### 2.1.1.1 Sample Database Installation

When Advanced Server is installed, a sample database named `edb` is automatically created. This sample database contains the tables and programs used throughout this document, created by executing the script `edb-sample.sql` located in the `/usr/edb/as11/share` directory.

This script does the following:
- Creates the sample tables and programs in the currently connected database.
- Grants all permissions on the tables to the `PUBLIC` group.

The tables and programs will be created in the first schema of the search path in which the current user has permission to create tables and procedures. You can display the search path by issuing the command:

```sql
SHOW SEARCH_PATH;
```

Altering the search path can be done using commands in PSQL.

###### 2.1.1.2 Sample Database Description

The sample database represents employees in an organization and contains three types of records: employees, departments, and historical records of employees.

- **Employees**: Each employee has an identification number, name, hire date, salary, and manager. Some employees earn a commission in addition to their salary. All employee-related information is stored in the `emp` table.
- **Departments**: The company is regionally diverse, so the database keeps track of the location of the departments. Each company employee is assigned to a department. Each department is identified by a unique department number and a short name. Each department is associated with one location. All department-related information is stored in the `dept` table.
- **Historical Records**: The company also tracks information about jobs held by the employees. Some employees have been with the company for a long time and have held different positions, received promotions, and changed departments. This information is stored in the `jobhist` table.

Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved.