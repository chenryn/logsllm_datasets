# Network Protocol Reverse Engineering: Eavesdropping on the Machines

**Presenters:**
- Tim Estell – BAE Systems
- Katea Murray – Leidos
- Date: 2016-08-05

## Overview
This presentation will cover the topic of eavesdropping on machine communications, specifically focusing on network protocol reverse engineering (NPRE). We will provide a repeatable process for reverse engineering protocols and an approach for hacking into Industrial Control System (ICS) environments.

## Table of Contents
1. **Introduction**
   - What is this talk about?
   - What we’ll cover
2. **What is NPRE?**
3. **Tools and Motivation**
4. **Challenges and Importance**
5. **Assumptions and Workflow**
6. **Packet Collection and Framing**
7. **State Machine Analysis**
8. **Field Identification**
9. **Testing and Iteration**
10. **Tips and Tools**
11. **Staying Motivated**
12. **Conclusion**

## 1. Introduction
### 1.1 What is this talk about?
- **Eavesdropping on the Machines**: Understanding and intercepting machine-to-machine communication.
- **Communication Protocols**: Machines use specific protocols, which may be unknown or undocumented.
- **Reverse Engineering**: The process of breaking down these protocols to understand and control the communication.
- **Repeatable Process**: Providing a structured method for reverse engineering network protocols.
- **Hacking the ICS Village**: An approach to test and exploit ICS environments.

### 1.2 What we’ll cover
- Overview
- Definition and importance of NPRE
- Motivation and challenges
- Step-by-step process
- Tips, tools, and staying motivated

## 2. What is NPRE?
- **NPRE = Network Protocol Reverse Engineering**: A systematic approach to analyze and interpret network data captures.
- **Purpose**:
  - **Listening In**: Intercepting and understanding the communication.
  - **Controlling the Conversation**: Manipulating the communication for testing or security purposes.
- **Analysis**:
  - **Understanding Protocols**: Identifying and interpreting the structure and function of network protocols.
  - **Breaking Down Data**: Converting raw data into meaningful information.

## 3. Tools and Motivation
### 3.1 Available Tools
- **libpcap and tcpdump**: Packet capture tools available for Windows, Linux, and Mac.
- **Wireshark**: A powerful network protocol analyzer.
- **Scapy**: A Python-based tool for packet manipulation and fuzzing.
- **Fuzzing Tools**: Various tools for testing and finding vulnerabilities.
- **IDA Pro/OllyDbg**: Useful for analyzing APIs.
- **Hex Editors**: For modifying packet data.

### 3.2 Motivation
- **Penetration Testing**: To demonstrate vulnerabilities.
- **Home Networks**: To monitor and secure personal networks.
- **Testing**: To validate the robustness of systems.
- **Monitoring**: To detect and prevent node forgery and impersonation.
- **Curiosity**: To gain knowledge and understanding.

## 4. Challenges and Importance
### 4.1 How Hard Can It Be?
- **Human Design**: Protocols are designed by humans, who can be predictable.
- **Variations**: There are many variations in protocol design, such as checksums.
- **Security Measures**: Some designers intentionally make protocols difficult to reverse engineer.

### 4.2 Why Bother?
- **Real-World Relevance**: Previous DEF CON talks and literature highlight the importance of NPRE.
- **DEF CON Talks**:
  - **DC 22**: Molina; McDonal; Hoffman & Kinsey
  - **DC 23**: Shipely & Gooler
- **Literature**: Classification algorithms and related research from 2000 to 2010.

## 5. Assumptions and Workflow
### 5.1 Assumptions
- **Framed Network Protocol Data**: We start with framed data.
- **No Encryption Keys**: We do not have or derive encryption keys.
- **Legal Authority**: Only perform NPRE in a legal and ethical manner.
- **Ethical Considerations**: Adhere to the principle of "Don’t be evil."

### 5.2 Workflow
- **Packet Collection**: Gather network data.
- **Framing**: Identify the start and end of packets.
- **State Machine Analysis**: Understand the state transitions.
- **Field Identification**: Derive and categorize packet fields.
- **Testing**: Validate assumptions and findings.
- **Iteration**: Refine the process and results.

## 6. Packet Collection and Framing
### 6.1 Packet Collection
- **Lab Environment**: Use a controlled environment for clean data.
- **Switch vs. Hub**: Understand the differences and limitations.
- **Cable Cutting and Cold Boot**: Techniques for capturing all-weather data.
- **Device Management Interfaces**: Access and configure devices.

### 6.2 Framing
- **Packet Boundaries**: Determine where packets begin and end.
- **HTML Framing**: Dealing with complex and proprietary protocols.
- **IPv4/IPv6**: Common framing in home and enterprise networks.

## 7. State Machine Analysis
- **Definition**: A state machine is a model of system behavior.
- **Message Types**: Identify different types of messages.
- **Pattern Recognition**: Look for recurring patterns.
- **State Chart**: Create a visual representation of state transitions.

## 8. Field Identification
- **String Fields**: Easy to identify in Wireshark.
- **Almost String Fields**: Binary Coded Decimal (BCD) and other formats.
- **Bit Fields and Checksums**: Fixed values and high-entropy fields.
- **Command Values**: Bit fields with specific functions.
- **Other Fields**: Miscellaneous data and contextual information.

## 9. Testing and Iteration
### 9.1 Testing
- **Validation**: Test your assumptions by spoofing communication.
- **Python Tools**: Use Scapy for packet manipulation.
- **Example**: Modbus hacking in the ICS Village.

### 9.2 Iteration
- **Refinement**: Continuously improve the state machine and field knowledge.
- **Completion Criteria**: Aim for no unknowns or sufficient understanding for the task at hand.

## 10. Tips and Tools
### 10.1 Tips
- **Reset Switch**: Find and use the reset switch.
- **Legacy Modes**: Exploit weaker legacy modes.
- **Replay and Fuzzing**: Use replay and fuzzing techniques.
- **Observation**: Learn from failures and successes.

### 10.2 Tools
- **NetZob**: An open-source tool for reverse engineering, traffic generation, and fuzzing.
- **Version 1.0**: Released in January 2016, available for Linux and Windows.

## 11. Staying Motivated
- **Collaboration**: Talk to others and share knowledge.
- **Persistence**: Don’t give up; learn from similar projects.
- **Gamification**: Approach NPRE as a game, using concepts from SuperBetter by Jane McGonigal.

## 12. Conclusion
- **Summary**: We covered the definition, importance, and process of NPRE.
- **Process Steps**:
  - Collect data
  - Frame it
  - State machine analysis
  - Field identification
  - Testing
  - Iteration
- **Final Thoughts**: Use the provided tips, tools, and stay motivated.

**Contact Information:**
- Tim Estell – [PI:EMAIL]
- Katea Murray – [PI:EMAIL]

**Date: 2016-08-05**