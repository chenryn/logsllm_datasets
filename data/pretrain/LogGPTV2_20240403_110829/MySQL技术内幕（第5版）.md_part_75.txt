如果执行下面的代码段，
DBI会把 NULL值返回为undef，所以这件事情比较好办。不过，你必须保证使用了正确的测试。
语言里带引号的字符串时，
8.2.5.5检测NULL值
302
请注意，在使用引号时，必须保证字符串可以按照你所期望的那样进行解释。下面几个因
Perl和MySQL都支持使用单引号或双引号来把字符串引起来，因此在有些时候，你可以通
$stmt=INSERT INTO absence VALUES(14,\'2012-09-16\);
到目前为止，我们构造出来的语句都是一些用引号引起来的简单字符串。
这些测试的顺序非常重要，如果scol_val是一个空字符串，那么第二个比较操作和第三个
elsif ($col_val == 0)
如果想要区分列中的 undef（NULL）值和非 undef 值，则必须使用define（）。只有在知
$col_val = undef; if ($col_val eq "") ( print "false!\n"; )
以上测试表明，测试形式无法把undef、数字0和空字符串区分开来。下面这段代码的两
$stmt ="INSERT INTO absence VALUES(14,'2012-09-16)";
if (!defined ($col_val))( print "NUL\n"; }
$col_val = "";
$col_val=
$col_val=
$col_val
$col_val =undef;
if
当从数据库检索信息时，
se
print"\n";
在语句串里引用特殊字符
for (my $j = 0; $j[$i][$j] = "" if !defined ($matrix_ref->[$i][$jl); # 为NULL 值?
第8章
“false!"，表明这个测试无法区分 undef 和空字符串：
0;
用Perl DBI 编写MySQL程序
0）
if
$matrix_ref->[$i][$j];
则会输出3个“false！”：
，必须对语句字符串里每一个引号字符进行转义：
，那么又会在SQL层面遇到麻烦。当把某条语句构造成一个在Perl
($col_val
(!$col_val)
(!$col_val)
(!$col_val)
经常需要把列里的 NULL 值与数字O或空字符串区分开来。因为
print
print
print"other\n";}
"false!\n";
eq
"zero\n";
）
print
print
"false!\n";
"false!\n";
"false!\n";
"false!\n";
当在带引号的字
---
## Page 323
利用qq{}，可以把它改写为下面这个样子：
脚本里有一条SELECT语句，如下所示：
“}”出现的几率比“)”或“\”都小，并且不容易被误认为是语句的结束字符。例如，在上面
qq{}的这两个特性在下面的INSERT 语句里得到了充分的体现：
使用引号（单引号或双引号)，同时不必对它们进行转义。此外，变量引用也可以被正确解释。
码是等价的：
素需要着重考虑一下。
$sth=$dbh->prepare(qq(
$sth = $dbh->prepare ("SELEcT last_name,
这种qq()结构允许代码跨行。这样一来，我们便可以把语句串与外围的Perl代码区别开来：
qq 结构的分隔符并非只能使用“”和“)”。你完全可以写成qq()或 gq//，只需这种成
在构造语句时，只要使用qq{}，便可以不用考虑引号的问题，因为你可以在语句里随意地
可以利用这一特性，把语句格式化成多行，以增加代码的可读性。例如，dump_members.pl
$id=14;
sdate="2012-09-16";
在Perl层面，除把字符串放在双引号里外，还可以使用qq（}结构，它会告诉Perl把qq{和}
口这两种引号在Perl语言里不等效。只有双引号里的变量引用才能被解释。因此，如果想
$stmt=qg{
sdate
sid=14;
$stmt = qq{INSERT INTO absence VALUES($id,'$date'）};
sdate
$date = qq{2012-09-16};
口
INSERT INTO absence VALUES($id,'$date)
无论是否设置了ANSI_QUOTES，它都可以使用。
库名或表名），则只能使用双引号。因此，使用单引号来引用字符串是最安全的，因为
SQL的ANSI_QUOTES 模式，那么对于字符串必须使用单引号；而对于标识符（如数据
被禁用的SQL模式下，那么使用这两种引号当中的任何一种都可以。但是，如果启用了
在MySQL里，单引号和双引号的含义并不总是相同。如果服务器运行在ANSI_QUOTES
器将会把其中的Svar解释成 member 表里的某个列名。
很显然，第一个字符串更像是你想传递到MySQL服务器的。至于第二个字符串，服务
Perl会把它们解释成下面这个样子：
变量$var的值为14，那么下面两个字符串并不等价：
采用在语句字符串里嵌入变量引用的方式来构造语句，那么不能用单引号。例如，如果
SELECT
"SELECT * FROM member WHERE member_id = $var"
street,city,state,zip,phone
"2012-09-16";
"2012-09-16";
SELECT
*FROM member WHERE member_id= Svar
last_name,
,first_name, suffix, email,
e FROM member ORDER BY last_name");
first_name,
suffix,
8.2Perl DBI概述
email,"
303
---
## Page 324
很明显，在第二种情况里，字符串包含了多余的引号。
这些语句将产生下列输出结果：
把它们处理好。如果你自己添加了引号，那么这条语句里的引号就会过多，如下例所示：
的引号字符都得到了正确的转义处理：
使用这个方法的返回值。上面那个示例可以正确地写成下面这样：
DBI也提供了类似的机制：当需要在语句里使用带引号的值时，可以调用quote（）方法，然后
这条SQL语句是非法的，因为在‘O'Ma1ley'这个单引号字符串里又出现了单引号字符。我们在
号
304
The quoted value is:'paul'
print "The quoted value is:
print “The quoted value is: $quoted_value\n";
请注意，语句串里的$last 和$first 都不应该再用引号引起来，因为 quote（）方法会替你
INSERT INTO member (last_name,first_name,expiration)
现在，do（)方法发送给MySQL的字符串将变成下面这个样子，其中，带引号的字符串里
$quoted_value=$dbh->quote ($value);
$value="paul";
VALUES('0\'Ma11ey',Brian','2013-09-01')
$last = $dbh->quote ("O'Malley");
VALUES('O'Ma1ley','Brian′,'2013-09-01')
$last = "O′Malley";
它想要把一个新行插到member表里：
$expiration=
do（）方法发送给MySQL的结果字符串将会像下面这样：
$expiration ="2013-09-01";
$first="Brian";
而不会引起Perl的抱怨。但是，你也必须认真考虑SQL层面的语法问题。看看下面这段代
这种qq{}结构解决了Perl词法层面上的引号使用问题，它让你可以在字符串里随意使用引
能让语句更容易阅读。这两种格式在本书都有使用，看看你更喜欢哪一个。
（
Sr
虽然放在双引号里的字符串也允许跨行，但是个人认为qq{和}比两个孤零零的"字符更醒
VALUES($last,$first,$expiration)
VALUEs('$last',*$first','$expiration')
INSERT INTO member (last_name,first_name,expiration)
WS
第8章用Perl DBI编写MySQL程序
ORDER BY last_name
FROM member
street,city,state, zip,phone
(q
(last_name,first_name,expiration)
'Squoted_value'\n";
---
## Page 325
排在循环的前面，并在循环里调用execute（）。请注意INSERT语句里的那个问号“？”。它就
从而省去所有其他调用。DBI可以像下面这样实现这一点：
并且在循环里，只调用execute（），那么执行效率会提高很多。这样，只需调用一次prepare（），
prepare（）和execute（）。如果在进入循环之前，只调用一次prepare（）来建立INSERT语句，
效率很低，因为INSERT 语句的基本格式每次都一样，但在循环的过程中，do（)每次都会调用
不使用占位符，那么你可能会像下面这样删除已有表里的内容，并加载新的名字：
册里的 student 表清理干净，并使用保存在某个文件里的新的学生名单来初始化这个表。如果
开销。
预处理它，然后再反复执行它。这样可以避免“在每次执行之前都需要预处理语句”所带来的
便能获得同样的字符引用效果。此外，如果需要在循环里反复地执行某条语句，那么你可以先
值绑定到语句”。采用这种做法，你可以获得字符引用的好处，即不需要显式地调用quote（)
的特殊标记符，然后在执行这个语句时，会使用具体的值来替换这些占位符。这就是所谓的“将
接放置到语句字符串里。这种做法不是必需的。DBI允许在语句串里，使用被称作“占位符”
8.2.7
为了说明占位符是如何工作的，这里做一个假设：现在正值新学期的开始，你需要把成绩
在前面几节，我们在构造语句时，都是把将被插入或者将被用在选择条件里的数据值，直
在使用占位符时，有以下几点需要引起注意。
DBI会自动为这个值里的特殊字符加上引号，因此无需调用quote（）。
一般情况下，如果你发现需要在一个循环里多次调用do（），那么最好把prepare（）调用安
这种方法需要你自己调用uote（)方法来处理各个数据值里的特殊字符。这种做法的执行
口
口
口
while(<>)
$dbh->do（qq{DELETE FROM student）);
必须单独指定各个值，并且为每个值提供一个占位符：
每一个占位符指定的都只能是一个值，而不能是值列表。例如，想要指定多个数据值，
不要使用quote（)方法来指定占位符的值。否则，要插入的那个值里会出现多余的引号。
1不要为语句字符串里的占位符加上引号。否则，DBI不会把它识别为占位符。
$sth->execute($_);
chomp;
chomp;
Ssth->execute("Adams,Bi11,2014-07-19");
）：
my $sth= $abh->prepare(qqt
那就不能像下面这样预处理和执行语句：
须保证其数量与占位符标记的个数是相同的。
INSERT INTO member last_name,first_name VALUES(?)
占位符与预处理语句
=$dbh->quote($_）;
#删除已有行
把它添加到一个新行
8.2Perl DBI概述
305
---
## Page 326
有占位字符的语句的高。
当把脚本移植到某个支持执行计划缓存的数据库服务器时，有占位符的语句的执行效率会比没
下面这样做：
需做的就是启用mysql_server_prepare 选项。例如，给定一个数据库句柄sdbh，那么可以像
支持在服务器端预处理语句，也支持由服务器来处理参数绑定的事宜。
端的DBD::mysql模块里。不过，在MySQL的C语言客户端开发库里所实现的二进制协议，
结果集，而不会缓存执行计划。更多相关信息请参考12.7.3节。
具有通用性。
采用在语句字符串里直接嵌入特定数据值来构造语句的做法相比，利用占位符构造出的语句更
计划，需要花费很多时间。在让语句变得更适合缓存方面，占位符提供了较好的机会。因为与
理。把查询缓存起来的做法对复杂的 SELECT语句特别有用，因为预处理语句和生成最佳执行
当服务器再次接收到同样的语句时，便可以更加快速地重用这条语句，而不必再进行初始预处
效率有关的好处。某些数据库服务器会缓存预处理语句，可能还会缓存语句执行计划。这样，
但与之对应的那个参数却必须存在，因此可以把它指定为undef。
是另一个可用来设定语句处理属性的参数。虽然这些属性很少会被使用到(必要时会用到),
具体原因在于：对于那些支持使用占位符作为参数的语句执行方法，在某些参数的前面可能
或者像下面这样获取行：
意多个“?”字符提供占位符值。例如，可以像下面这样更新行：
306
DBD:mysql模块可以利用这种功能。为了打开服务器端的预处理语句和参数绑定功能，所
默认情况下，MySQL也不会缓存预处理语句。把参数绑定到占位符，这个动作发生在客月
MySQL并不会缓存执行计划。MySQL有一个查询缓存，但它只是用于缓存查询字符串的
即使不想使用MySQL的服务器端预处理语句功能，利用占位符来编写语句也是有好处的：
如果要禁用服务器端的预处理语句功能，则只需把这个选项设置为0。
对于某些数据库服务器，使用占位符除了提高循环语句的效率以外，还有另外一个与执
请注意观察，这两段代码都使用一个看起来毫无意义的神秘参数undef 作为占位符的值。
my $ref = sdbh->selectrow_arrayref (
口
口如果需要把某个占位符的值替换为 NULL值，那么要用undef。
my $rows = $dbh->do(
某些执行语句字符串的 DBI方法，如 do()和 selectrow_array ()，支持为语句里的任 
失败。
关键字或标识符在插到语句后，都会被加上引号，从而导致这条语句因语法错误而执行
字，或者像数据库名、表名、列名之类的标识符。这种做法之所以行不通，是因为这种
占位符和quote（）方法都只适用于数据值。请不要把占位符用于像 SELECT之类的关键
$sth->execute ("Adams","Bi11","2014-07-19");
!（
my $sth= $dbh->prepare (qq(
第8章用Perl DBI编写MySQL程序
INSERT INTO member last_name, first_name VALUES(?,?,?)
undef,14);
"SELECT
undef,
"UPDATE member SET expiration = ? WHERE member_id = ?"
*FROM member WHERE member_id = ?",
"2007-01-01",