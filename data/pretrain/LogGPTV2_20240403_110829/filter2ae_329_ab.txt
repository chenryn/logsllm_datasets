dataConfig：这个配置项可以通过文件配置或通过请求方式传递（在dataimport开启Debug模式时可以通过dataConfig参数），他配置的时怎样获取数据（查询语句、url等等）要读什么样的数据（关系数据库中的列、或者xml的域）、做什么样的处理（修改/添加/删除）等，Solr为这些数据数据创建索引并将数据保存为Document
      对于此漏洞需要了解dataConfig的以下几个元素：
      Transformer：实体提取的每组字段可以在索引过程直接使用，也可以使用来修改字段或创建一组全新的字段，              甚至可以返回多行数据。必须在entity级别上配置Transformer
              RegexTransformer：使用正则表达式从字段（来自源）提取或操作值
              ScriptTransformer：可以用Javascript或Java支持的任何其他脚本语言编写                                 Transformer，该漏洞使用的是这个
              DateFormatTransformer：用于将日期/时间字符串解析为java.util.Date实例
              NumberFormatTransformer：可用于解析String中的数字
              TemplateTransformer：可用于覆盖或修改任何现有的Solr字段或创建新的Solr字段
              HTMLStripTransformer：可用于从字符串字段中删除HTML
              ClobTransformer：可用于在数据库中创建Clob类型的String
              LogTransformer：可用于将数据记录到控制台/日志
      EntityProcessor：实体处理器
            SqlEntityProcessor：不指定时，默认的处理器
              XPathEntityProcessor：索引XML类型数据时使用
              FileListEntityProcessor：一个简单的实体处理器，可用于根据某些条件枚举文件系统中的文件                                  列表
              CachedSqlEntityProcessor：SqlEntityProcessor的扩展
              PlainTextEntityProcessor：将数据源中的所有内容读入名                                                               为"plainText"的单个隐式字段。内容不会以任何方式解析，但是                                   您可以根据需要添加transform来操作“plainText”中的数据
              LineEntityProcessor：为每行读取返回一个名为"rawLine"的字段。内容不会以任何方式解析，                           但您可以添加transform来操作“rawLine”中的数据或创建其他附加字段
              SolrEntityProcessor：从不同的Solr实例和核心导入数据
      dataSource：数据源，他有以下几种类型，每种类型有自己不同的属性
            JdbcDataSource：数据库源
            URLDataSource：通常与XPathEntityProcessor配合使用，可以使用file://、http://、                          ftp://等协议获取文本数据源
            HttpDataSource：与URLDataSource一样，只是名字不同
            FileDataSource：从磁盘文件获取数据源
            FieldReaderDataSource：如果字段包含xml信息时，可以使用这个配合XPathEntityProcessor                                使用
            ContentStreamDataSource：使用post数据作为数据源，可与任何EntityProcessor配合使用
      Entity：实体，相当于将数据源的操作的数据封装成一个Java对象，字段就对应对象属性
            对于xml/http数据源的实体可以在默认属性之上具有以下属性：
              processor（必须）：值必须是 "XPathEntityProcessor"
              url（必须）：用于调用REST API的URL。（可以模板化）。如果数据源是文件，则它必须是文件位置
              stream （可选）：如果xml非常大，则将此值设置为true
              forEach（必须）：划分记录的xpath表达式。如果有多种类型的记录用“|”（管道）分隔它们。如果                         useSolrAddSchema设置为'true'，则可以省略。
              xsl（可选）：这将用作应用XSL转换的预处理器。提供文件系统或URL中的完整路径。
              useSolrAddSchema（可选）：如果输入到此处理器的xml具有与solr add xml相同的模式，则将其                                 值设置为“true”。如果设置为true，则无需提及任何字段。
              flatten（可选）：如果设置为true，则无论标签名称如何，所有标签下的文本都将提取到一个字段中
              实体的field可以具有以下属性：
              xpath（可选）：要映射为记录中的列的字段的xpath表达式。如果列不是来自xml属性（是由变换器                      创建的合成字段），则可以省略它。如果字段在模式中标记为多值，并且在xpath的                      给定行中找到多个值，则由XPathEntityProcessor自动处理。无需额外配置
              commonField：可以是（true | false）。如果为true，则在创建Solr文档之前，记录中遇到的此                      字段将被复制到其他记录
### PoC进化历程
#### PoC第一阶段--数据库驱动+外连+无回显
根据官方[漏洞预警描述](https://issues.apache.org/jira/browse/SOLR-13669)，是DataImportHandler在开启Debug模式时，能接收dataConfig这个参数，这个参数的功能与data-config.xml一样，不过是在开启Debug模式时方便通过此参数进行调试，并且Debug模式的开启是通过参数传入的。在dataConfig参数中可以包含script脚本，在[文档](https://cwiki.apache.org/confluence/display/SOLR/DataImportHandler)搜到一个ScriptTransformer的例子：
可以看到在script中能执行java代码，于是构造下PoC（通过logs查看相关报错信息查看PoC构造出现的问题），这个数据库是可以外连的，所以数据库的相关信息可以自己控制，测试过是可以的（只是演示使用的127.0.0.1）：
在ScriptTransformer那个例子中，能看到row.put的字样，猜测应该是能回显的，测试下：
这里只能查看id字段，name字段看不到，也没有报错，然后尝试了下把数据put到id里面：
能看到回显的信息。一开始不知道为什么put到name不行，后来看到在第三阶段的PoC，又回过头去查资料才意识到dataConfig与schema是配合使用的。因为在schema中没有配置name这个field，但是默认配置了id这个fileld，所以solr不会把name这个字段数据放到Document中去而id字段在其中。在第三阶段的PoC中，每个Field中的name属性都有"_s"，然后去搜索发现可以在schema配置文件中可以配置dynamicField，如下是默认配置好的dynamicField：
在上面的相关概念中对这个字段有介绍，可以翻上去查看下，测试下，果然是可以的：
只要dynamicField能匹配dataConfig中field的name属性，solr就会自动加到document中去，如果schema配置了相应的field，那么配置的field优先，没有配置则根据dynamicField匹配。
#### PoC第二阶段--外连+无回显
在文档中说到JdbcDataSource可以使用JNDI，
测试下能不能进行JNDI注入：
这里有一个JNDI+LDAP的恶意[demo](https://github.com/kxcode/JNDI-Exploit-Bypass-Demo)。使用这种方式无需目标的CLASSPATH存在数据库驱动。
#### PoC第三阶段--无外连+有回显
这个阶段的PoC来自@fnmsd师傅，使用的是[ContentStreamDataSource](https://cwiki.apache.org/confluence/display/SOLR/DataImportHandler#)，但是文档中没有对它进行描述如何使用。在[stackoverflower]()找到一个使用例子：
在相关概念中说到了ContentStreamDataSource能接收Post数据作为数据源，结合第一阶段说到的dynamicField就能实现回显了。
只演示下效果图，不给出具体的PoC：
后来回过头去看其他类型的DataSource时，使用URLDataSource/HttpDataSource也可以，文档中提供了一个例子：
构造测试也是可行的，可以使用http、ftp等协议
### 参考链接
  * 
  * 
  * 
  * 
* * *