### Architecture
In comparison to more common operations, the segment register manipulations and far calls utilized by the NaCl trampoline are less frequent and may have received less attention throughout the history of the x86 architecture.

### 3.4. Communications
The Inter-Module Communication (IMC) system is the foundation for communication into and out of NaCl modules. The IMC implementation is built around a NaCl socket, which provides a bi-directional, reliable, in-order datagram service similar to Unix domain sockets [37]. When an untrusted NaCl module is created, it receives its first NaCl socket, accessible from JavaScript via the Document Object Model (DOM) object used to create it. JavaScript can use this socket to send messages to the NaCl module and can also share it with other NaCl modules. Additionally, JavaScript can connect the module to other services by opening and sharing NaCl sockets as NaCl descriptors. These descriptors can also be used to create shared memory segments.

#### Table 3: NaCl Resource Descriptor Transfer Cost
| Number of Descriptors | Linux (μs) | macOS (μs) | Windows (μs) |
|-----------------------|------------|------------|--------------|
| 1                     | 3.3        | 31.5       | 38           |
| 2                     | 5.3        | 38.6       | 51           |
| 3                     | 6.6        | 47.9       | 64           |
| 4                     | 8.2        | 50.9       | 77           |
| 5                     | 9.7        | 54.1       | 90           |
| 6                     | 11.1       | 60.0       | 104          |
| 7                     | 12.6       | 63.7       | 117          |
| 8                     | 14.2       | 66.2       | 130          |

**Note:** In this test, messages carrying zero data bytes and a varying number of I/O descriptors are transferred from a client NaCl module to a server NaCl module. On macOS, a request/ack mechanism is needed as a workaround for a bug in the macOS implementation of `sendmsg`. On Windows, a `DuplicateHandle()` system call is required per I/O object transferred.

### Using NaCl Messages
Native Client’s Simple Remote Procedure Call (SRPC) abstraction is implemented entirely in untrusted code. SRPC provides a convenient syntax for declaring procedural interfaces between JavaScript and NaCl modules, or between two NaCl modules. It supports basic types (int, float, char) and arrays, in addition to NaCl descriptors. More complex types and pointers are not supported. External data representation strategies such as XDR [18] or Protocol Buffers [26] can be easily layered on top of NaCl messages or SRPC.

### NPAPI Implementation
Our NPAPI implementation is also built on top of the IMC and supports a subset of the common NPAPI interface. Specific requirements that shaped the current implementation include the ability to read, modify, and invoke properties and methods on script objects in the browser, support for simple raster graphics, providing the `createArray()` method, and the ability to open and use a URL like a file descriptor. The currently implemented NPAPI subset was chosen primarily for expedience, although we will likely refine and extend it further as our understanding of related security considerations and application requirements improves.

### 3.5. Developer Tools

#### 3.5.1. Building NaCl Modules
We have modified the standard GNU toolchain, using version 4.2.2 of the GCC compiler collection [22], [29] and version 2.18 of binutils [23], to generate NaCl-compliant binaries. We have built a reference binary from newlib2 using the resulting toolchain, rehosted to use the NaCl trampolines to implement system services (e.g., `read()`, `brk()`, `gettimeofday()`, `imc_sendmsg()`). Native Client supports an insecure "debug" mode that allows additional filesystem interaction not otherwise allowed for secure code.

We modified GCC for Native Client by changing the alignment of function entries (`-falign-functions`) to 32 bytes and the alignment of branch targets (`-falign-jumps`) to 32 bytes. We also changed GCC to use `nacljmp` for indirect control transfers, including indirect calls and all returns. We made significant changes to the assembler to implement Native Client's block alignment requirements. To implement returns, the assembler ensures that call instructions always appear in the final bytes of a 32-byte block. We also modified the assembler to expand the `nacljmp` pseudo-instruction as a properly aligned consecutive block of bytes. For testing, we added support to use a longer `nacljmp` sequence, align the text base, and use `and` and `or` with relocations as masks. This allows running applications on the command line and has been used to run the entire GCC C/C++ test suite. We also changed the linker to set the base address of the image as required by the NaCl loader (64K today).

Apart from their direct use, the toolchain also serves as an example of how to modify an existing toolchain to generate NaCl modules. These changes were achieved with fewer than 1000 lines of patches in GCC and binutils, demonstrating the simplicity of porting a compiler to Native Client.

#### 3.5.2. Profiling and Debugging
Native Client's open-source release includes a simple profiling framework to capture a complete call trace with minimal performance overhead. This is based on GCC's `-finstrument-functions` code generation option combined with the `rdtsc` timing instruction. This profiler is portable and implemented entirely as untrusted code. In our experience, optimized builds profiled in this framework have performance somewhere between `-O0` and `-O2` builds. Optionally, the application programmer can annotate the profiler output with methods similar to `printf`, with output appearing in the trace rather than `stdout`.

Native Client does not currently support interactive debugging of NaCl binary modules. Commonly, we debug NaCl module source code by building with standard tools and a library that exports all the interfaces to the NaCl service runtime, allowing us to build debug and NaCl modules from identical source. Over time, we hope to improve our support for interactive debugging of release NaCl binaries.

### 4. Experience
Unless otherwise noted, performance measurements in this section are made without the NaCl outer sandbox. Sandbox overhead depends on how much message-passing and service runtime activity the application requires. At this time, we do not have realistic applications of Native Client to stress this aspect of the system.

#### Figure 4: SPEC2000 Performance
- **Static**: Results for statically linked binaries.
- **Align32**: Results for binaries aligned in 32-byte blocks.
- **NaCl32**: Results for NaCl binaries.

| Benchmark  | Static (s) | Aligned (s) | NaCl (s) | Increase (%) |
|------------|------------|-------------|----------|--------------|
| ammp       | 200        | 203         | 203      | 1.5%         |
| art        | 46.3       | 48.7        | 47.2     | 1.9%         |
| bzip2      | 103        | 104         | 104      | 1.9%         |
| crafty     | 113        | 124         | 127      | 12%          |
| eon        | 79.2       | 76.9        | 82.6     | 4.3%         |
| equake     | 62.3       | 62.9        | 62.5     | 0.3%         |
| gap        | 63.9       | 64.0        | 65.4     | 2.4%         |
| gcc        | 52.3       | 54.7        | 57.0     | 9.0%         |
| gzip       | 149        | 149         | 148      | -0.7%        |
| mcf        | 65.7       | 65.7        | 66.2     | 0.8%         |
| mesa       | 87.4       | 89.8        | 92.5     | 5.8%         |
| parser     | 126        | 128         | 128      | 1.6%         |
| perlbmk    | 94.0       | 99.3        | 106      | 13%          |
| twolf      | 154        | 163         | 165      | 7.1%         |
| vortex     | 112        | 116         | 124      | 11%          |
| vpr        | 90.7       | 88.4        | 89.6     | -1.2%        |

### 4.1. SPEC2000
A primary goal of Native Client is to deliver substantially all of the performance of native code execution. NaCl module performance is impacted by alignment constraints, extra instructions for indirect control flow transfers, and the incremental cost of NaCl communication abstractions.

To isolate the impact of the NaCl binary constraints (Table 1), we built the SPEC2000 CPU benchmarks using the NaCl compiler and linked them to run as standard Linux binaries. The worst case for NaCl overhead is CPU-bound applications, as they have the highest density of alignment and sandboxing overhead. Figure 4 and Table 4 show the overhead of NaCl compilation for a set of benchmarks from SPEC2000. The worst case performance overhead is for `crafty` at about 12%, with other benchmarks averaging about 5% overall. Hardware performance counter measurements indicate that the largest slowdowns are due to instruction cache misses. For `crafty`, the instruction fetch unit is stalled during 83% of cycles for the NaCl build, compared to 49% for the default build. `gcc` and `vortex` are also significantly impacted by instruction cache misses.

As our current alignment implementation is conservative, there is potential for further optimization.