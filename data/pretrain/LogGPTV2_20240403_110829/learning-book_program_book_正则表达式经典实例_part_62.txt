以使用多选结构来把包含可变数量位置的范围划分成多个包含固定数量位置的范围。
例如范围1～12可以包含一个或两个位置。我们把它划分为包含一个位置的范围1～9，
以及包含两个位置的范围10～12。在这两个范围中的位置则都是独立的，因此我们不
需要对它进行更进一步的划分：
1 [02]1 [1-9]
正则选项：无
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
我们把包含两个数字的范围放到包含单个数字的范围之前。这样做是有原因的，因为
正则表达式引擎是贪心的。它会从左向右对所有选择分支进行扫描，而一且产生匹配
则会立即停止。如果你的自标文本是12，那么（1[0-2[1-9]会匹配到12，而
则只能匹配到（1>。这是因为第-个选择分支1-9]会被最先尝试。因为这个选择分支
会产生“更好”的匹配结果。
有些正则引擎不是贪心的
POSIX兼容的正则引擎和DFA正则引擎并不会遵守这个规则。它们会尝试所有的
选择分支，然后返回找到最长匹配的那个结果，然而，在本书中讨论的所有流派使
用的都是NFA引擎，而它不需要按照POSIX的要求执行额外的查找，它们会告诉
你在12中能匹配到1。
在实践中，你通常会在选择分支的列表中使用定位符或者单词边界。这样，选择分
支的顺序就不再重要了。在本书中的所有正则流派，以及所有POSIX“扩展”正则
表达式和DFA引擎中，（^（[1-9]|1[0-2]）S>和.
{60[-]1[60]-0]91{}6-0]0]9160]091-0]59
[1-9][0-9]{1, 3}1[0-9]
正则选项：无
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
如果再继续进行任何更多合并，就会影响到可读性。例如，你还可以从前4个选择分
支中把开头的6都分离出来：
6(?:553[0-5]155[0-2][0-9]15[0-4][0-9]{2}1[0-4][0-9]{3})1[1-5][0-9]{4}1
[1-9][0-9]{1, 3}1[0-9]
正则选项：无
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
但是这个正则表达式的实际长度比刚才反而增加了-一个字符，这是因为我们不得不添加一
个非捕获分组来把前导的6与其他的选择分支分隔开来。在本书讨论的所有正则流派中，你
也不可能因此而得到任何性能上的提高。因为所有的正则流派都会在内部进行这样的优化。
参见
实例2.8、实例4.12和实例6.1。
6.6在某个特定范围之内的十六进制数
问题描述
你想要匹配在某个特定数值范围之内的十六进制数。你希望正则表达式能够精确说明
这个范围，而不只是对数字的个数进行限制。
解决方案
1~C（1～12：小时或月份）：
[1-9a-c]$
正则选项：不区分大小写
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
1~18（1~24：小时）：
(1[0-8]1[1-9a-f])$
正则选项：不区分大小写
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
1～1F（1～31：一个月中的天次）：
(1[0-9a-f]1[1-9a-f1) $
正则选项：不区分大小写
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
数字
323
www.TopSage.com
---
## Page 340
1～35（1～53：每年的周次）：
(3[0-5]1[12][0-9a-f]1[1-9a-f]) $
正则选项：不区分大小写
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
0～3B（0～59：分钟或秒钟）：
(3[0-9a-b]1[12]?[0-9a-f])$
正则选项：不区分大小写
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
0~64（0~100：百分数）：
^(6[0-4]1[1-5]?[0-9a-f]) S
正则选项：不区分大小写
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
1~64（1~100）：
(6[0-4]1[1-5][0-9a-f]1[1-9a-f]) S
正则选项：不区分大小写
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
20～7E（32～126：可打印的ASCⅡI代码）：
(7[0-9a-e]1[2-6][0-9a-f])$
正则选项：不区分大小写
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
0~7F（0～127：7比特数）：
[1-7]?[0-9a-f]$
正则选项：不区分大小写
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
0~FF（0到255：8比特数）：
^[1-9a-f]?[0-9a-f] S
正则选项：不区分大小写
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
1～16E（1～366：一年中的天次）：
正则选项：不区分大小写
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
76C～833（1900～2099：年份）：
(83[0-3]18[0-2][0-9a-f]17[7-9a-f][0-9a-f]176[c-f]) $
正则选项：不区分大小写
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
0~7FFF:（0到32767：15比特数）：
324
第6章
www.TopSage.com
---
## Page 341
^([1-7) [0-9a-f](3} 1[1-9a-f][0-9a-f](1, 2} 1[0-9a-f]) $
正则选项：不区分大小写
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
0~FFFF:（0~65535：16比特数）：
正则选项：不区分大小写
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
讨论
采用正则表达式来匹配十进制数字范围和十六进制数字范围之间并不存在实质的区
别。读者还可以按照上一个实例中所解释的方法，把一个区间拆分成多个区间，直到
每个区间中都包含固定个数的位置，并且每个位置包含彼此无关的数字。然后，就只
需要在每个位置使用一个字符类，最后把这些区间使用多选结构组合起来。
因为字母和数字在ASCII和Unicode字符表中占据的区域井不连续，因此你无法使用
字符类0-F]>来匹配16个十六进制数字中的任意一个。虽然这个字符类实际上也能完
成这个任务，但是它还会匹配到在ASCII学符表中位于数字和字母之间的一些标点符
号。因此，我们需要在字符类中使用两个字符区间来表示：[0-9A-F]。
另外一个需要注意的问题是大小写敏感性。默认来说，正则表达式都是区分大小写的。
因此，而只能匹配到小写字符。要想
大小写都可以匹配，就需要采用。
在每个字符类中都显式地明确指定大写和小写的字符区间很快就会让人感到乏味。因
此，读者可以选择转而采用不区分大小写的选项。关于如何在你所选择的编程语言中
打开正则选项，请参考实例3.4。
参见
实例2.8和实例6.2。
6.7浮点数
问题描述
你想要匹配一个浮点数，并且可以分别指定该浮点数中的符号、整数部分、小数部分
和指数部分是必需的、可选的或者是不允许的。你并不想用这个正则表达式来把其取
值限制到某个具体范围之内，而是希望按照在实例3.12中的讲解，把这个任务留给过
程代码来完成。
数字
325
www.TopSage.com
---
## Page 342
解决方案
符号、整数部分、小数部分和指数部分都是必需的：
[-+] [0-9]+\.[0-9]+[eE][-+]?[0-9]+$
正则选项：无
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
符号、整数部分和小数部分是必需的，但是不要指数部分：
[-+][0-9]+\.[0-9}+$
正则选项：无
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
符号可选，整数部分和小数部分是必需的，并且不要指数部分：
[- +]?[0-9] +\.[0-9] + $
正则选项：无
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
符号和整数部分是可选的，小数部分是必需的，并且不要指数部分：
$+[6-0]*\•[6-0][+-]
正则选项：无
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
符号、整数部分和小数部分是可选的。如果整数部分没有的话，那么小数部分是必需
的。如果小数部分没有的话，那么小数点也必须不能出现。没有指数部分。
 [-+] ?([09] +(\. [0-9] +) ?1\. [0-9] +) $
正则选项：无
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
符号、整数部分和小数部分是可选的。如果没有整数部分，那么小数部分是必需的。
如果没有小数部分，那么小数点是可选的。没有指数部分。
 [-+]?([09]+(\.[0-9] *) ？1\.[0-9]+) $
正则选项：无
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
符号、整数部分和小数部分是可选的。如果没有整数部分，那么小数部分是必需的。
如果没有小数部分，那么小数点也必须不能出现。指数部分可选：
[-+]?([0-9]+(\.[0-9]+)?1\. [0-9]+) ([eE] [-+]?[0-9]+} ？$
正则选项：无
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
符号、整数部分和小数部分是可选的。如果没有整数部分，那么小数部分是必需的。
如果没有小数部分，那么小数点是可选的。指数部分可选：
[-+] ?([0-9] +(\. [0-9] *) ?1\.[0-9]+) ([eE] [-+]?[0-9]+) ?$
正则选项：无