203.0.113.178
In most cases, the results from this query will be the correct VPN gateways on the network.
2. Next, look for the ports being used by the assets you found in the preceding step. Filtering
outbound traffic from each address for a source port equal to any of those listed in Table 16 will
show which ports the VPN is using. This filter is shown in the following example. Also note the
protocol and destination port associated with each source port.
$ rwfilter sample.rw --type=out \
--saddress=203.0.113.33 --sport=500,4500,1701,1723,10000 \
--pass=stdout \
| rwstats --fields=sport,protocol,dport --bytes --percentage=1
INPUT: 822 Records for 46 Bins and 1661747093 Total Bytes
OUTPUT: Top 10 bins by Bytes (1% == 16617470)
sPort|pro|dPort| Bytes| %Bytes| cumul_%|
4500| 17| 4500| 738166761| 44.421125| 44.421125|
4500| 17| 4476| 292362688| 17.593693| 62.014819|
4500| 17|43648| 220907925| 13.293715| 75.308534|
4500| 17|31780| 68069706| 4.096274| 79.404807|
4500| 17| 1603| 64275393| 3.867941| 83.272748|
4500| 17|31281| 48482198| 2.917544| 86.190292|
4500| 17| 1082| 47065498| 2.832290| 89.022582|
4500| 17|36348| 39271744| 2.363280| 91.385862|
4500| 17| 1079| 37549575| 2.259644| 93.645507|
4500| 17| 1663| 29137025| 1.753397| 95.398904|
The output in the above example shows that the VPN for the sample network uses port 4500 for
the majority of its VPN connections, meaning it is likely using L2TP. Repeat this filter for each
VPN asset.
CMU/SEI-2012-TR-006 | 34
3. Now determine whether each VPN is remote access or point-to-point. Looking at the number of
VPN connections may not help in determining this because some sites may have multiple remote
offices connecting into the VPN gateway. Instead, look at the duration of the flows. In SiLK, the
simplest way to do this is to look at the unique destination IP addresses, as shown in the following
example. By default, SiLK will list the number of flow records associated with that address for
the given time frame. When SiLK collects flows longer than 30 minutes, it cuts the flows into 30-
minute records, so 48 consecutive records actually constitute a 24-hour long flow.
$ rwfilter sample.rw --type=out \
--saddress=203.0.113.33 --protocol=47,50,51 \
--pass=stdout \
| rwuniq --fields=dip --no-titles \
| sort -nrt '|' -k 2
dIP| Records|
74.94.205.65| 48|
75.144.2.201| 48|
74.94.207.85| 48|
75.144.0.93| 48|
... ...
75.145.32.145| 48|
... ...
72.61.11.246| 2|
68.246.188.197| 1|
174.147.23.130| 1|
108.117.128.105| 1|
[…55 total…]
In the above example, the Unix “sort” command was used to sort the output by the second column
in descending order. Almost all the VPN connections for 203.0.113.33 last all day. Based on the
length of the traffic flows, the sample network has about 49 site-to-site connections and is only
acting as remote access for a handful of external connections.
VPNs using SSL are much harder to detect with netflow because they use the standard HTTPS
port and protocol and, therefore, look like web servers. If all of the potential web servers from
Section 5.1 were validated, none would be SSL-based VPNs. If there were some that were not
validated or were questionable, they are possibly SSL VPNs. If there are very long, high-volume
connections to port 443, there is reason to suspect that the server could actually be a VPN
gateway.
The resulting VPNs for the sample network are listed in Table 17.
Table 17: Potential VPN Gateways for the Sample Network
Internal IP Protocol Internal Port External IP External Port Comments
203.0.113.33 50 (17) 0 (4500) * 0 (*) 50 S2S, remote access
203.0.113.35 50 0 (500) * 0 (500) 1 S2S, remote access
203.0.113.178 50 0 (10000, 4500) * 0 (10000, *) 1 S2S, remote access
5.5.2 How to Validate Findings
Assets using IP protocols 47, 50, or 51 are very likely to be VPNs. To verify VPN gateways, look
up the domain names of the assets in the list using the following command.
CMU/SEI-2012-TR-006 | 35
nslookup 
Looking up the three potential VPNs for the sample network resulted in domain names for two of
the addresses. Both include “vpn” in their name.
For assets that cannot be validated using domain name lookup, try taking a quick look at traffic
patterns. VPN connections typically start with a brief (a few seconds) connection setup using one
of the ports listed under the “Initial Setup” header in Table 16. The actual VPN session takes
place over a longer period of time over one of the IP protocols listed under the “Tunnel” header in
Table 16. Also, VPN sessions usually need to be renewed after a period of inactivity (usually 30
minutes), or a certain period of active use.
Because address 203.0.113.35 from the sample network could not be validated using nslookup,
we looked more closely at the traffic going to and from that address. The command and results are
shown in the following example. The flows are sorted by time.
$ rwfilter sample.rw --type=all \
--any-address=203.0.113.35 --aport=0,500 \
--pass=stdout \
| rwsort --fields=sTime \
| rwcut --fields=protocol,sip,sport,dip,dport,stime,etime
pro| sIP|sPort| dIP|dPort| sTime| eTime|
50| 192.0.2.170| 0| 203.0.113.35| 0| 00:00| 00:25|
17| 203.0.113.35| 500| 192.0.2.170| 500| 00:20| 00:20|
17| 192.0.2.170| 500| 203.0.113.35| 500| 00:20| 00:20|
50| 203.0.113.35| 0| 192.0.2.170| 0| 00:26| 00:53|
50| 192.0.2.170| 0| 203.0.113.35| 0| 00:30| 00:53|
50| 203.0.113.35| 0| 192.0.2.170| 0| 00:56| 01:25|
50| 192.0.2.170| 0| 203.0.113.35| 0| 01:00| 01:25|
17| 203.0.113.35| 500| 192.0.2.170| 500| 01:20| 01:20|
17| 192.0.2.170| 500| 203.0.113.35| 500| 01:20| 01:20|
50| 203.0.113.35| 0| 192.0.2.170| 0| 01:26| 01:53|
... ... ... ...
This traffic shows the pattern described above: short negotiations over UDP and a long VPN
session over protocol 50 that is renewed every hour.
5.5.3 Anomalies
Some anomalies associated with VPNs are listed below.
• VPN colocated with other services
Just as with other services, VPN services can be located on the same piece of hardware (and
the same IP address) as another service. It is common to find VPN gateways colocated with
web gateways or proxy servers, which happened with 203.0.113.33 on the sample network.
• VPN gateway as a concentrator and site-to-site
There is no reason to have separate hardware for these two types of VPN tunnels. If the
network has both types, they will likely be located on the same machine.
• VPNs over nonstandard ports
There are a wide variety of VPN solutions from various vendors, all using different ports,
and sometimes different protocols, to establish connections. Also, anyone can choose a
CMU/SEI-2012-TR-006 | 36
different port to use, as long as the other end of the connection knows which port to use as
well. These nonstandard ports often have to be manually configured to be allowed through
the firewall.
• varying timeouts
VPNs commonly use three timeouts: the timeout for establishing a connection, the inactive
timeout, and the active timeout. Different vendors may choose to implement different default
times, and the timeouts can usually be configured manually at the client or concentrator.
Depending on how many types of VPN software are on the network, and whether clients are
allowed to configure their own timeouts, varying timeouts may be seen across VPNs. For
example, the U.S. Government requires active timeouts to be set at 30 minutes for any of its
networks [OMB 2006]. Regardless of the timeout length, there will still be a regular pattern
within each VPN flow.
5.5.4 Results
One high-volume VPN server (203.0.113.33) was found in the sample network, along with two
lower volume VPN servers.
Table 18: Validated VPN Assets for the Sample Network
Proto. Internal Port External IP External Port External Name Comments
203.0.113.33 - webvpn.example.org
50 0 * 0 50 S2S, remote access
17 4500 * *
203.0.113.35
50 0 * 0 1 S2S, remote access
17 500 * 500
203.0.113.178 – vpn.st.example.org
17 4500 * *
17 10000 * 10000
50 0 * 0 1 S2S, remote access
CMU/SEI-2012-TR-006 | 37
5.6 Remote Services
This section discusses how to profile three remote service protocols: Telnet, SSH, and FTP.
Telnet is an older protocol running on TCP port 23 that should no longer be in use today because
of its lack of security [Postel 1983]. The Secure Shell (SSH) protocol provides secure remote
login capabilities over TCP at port 22 [Lonvick 2006]. It often provides security services for FTP
(called SFTP).
Although FTP is not used as much today as it was 10 years ago, it is still used to transfer large
files between entities, to back up hosts to central (or external) servers, and to upload configuration
files to servers [Postel 1985]. An FTP connection starts with a control connection from the client
connecting to the server over TCP at port 21. Then a separate data connection is established over
TCP at a different port. If the mode is set to active, the server initiates the data connection from its
port 20 to an ephemeral port on the client. Otherwise, the mode is set to passive, and the client
initiates the data connection from an ephemeral port to an ephemeral port on the server.
5.6.1 The Process
1. Start looking for FTP by checking for control connections between FTP clients and servers. A
secondary goal will be to find whether the corresponding data connection is active or passive.
To find remote file servers, filter for outbound connections from ports 21, 22, and 23 individually,
as the following example shows. Looking at each service individually prevents a high-traffic
volume for one service from overshadowing traffic volume for another service. Gather the source
addresses. As in the previous sections, look for hosts making up at least 1% of the remote file
service traffic.
$ rwfilter sample.rw --type=out \
--protocol=6 --packets=4- --ack-flag=1 --sport=21 \
--pass=stdout \
| rwstats --fields=sip --percentage=1 --bytes --no-titles \
| cut -f 1 -d "|" \
| rwsetbuild > ftp_servers.set
$ rwsetcat ftp_servers.set
203.0.113.69
203.0.113.71
$ rwfilter sample.rw --type=out \
--protocol=6 --packets=4- --ack-flag=1 --sport=22 \
--pass=stdout \
| rwstats --fields=sip --percentage=1 --bytes --no-titles \
| cut -f 1 -d "|" \
| rwsetbuild > ssh_servers.set
$ rwsetcat ssh_servers.set
203.0.113.222
203.0.113.36
203.0.113.199
CMU/SEI-2012-TR-006 | 38
$ rwfilter sample.rw --type=out \
--protocol=6 --packets=4- --ack-flag=1 --sport=23 \
--pass=stdout \
| rwstats --fields=sip --percentage=1 --bytes --no-titles \
| cut -f 1 -d "|" \
| rwsetbuild > telnet_servers.set
$ rwsetcat telnet_servers.set
[empty]
As the results in this example show, the sample network has two potential FTP servers, three
potential SSH servers, and no Telnet servers.
2. To find clients on the network using these services, filter in the same way as you did to find
servers in the previous step, but look at destination ports instead of source ports, as shown in the
following example.
$ rwfilter sample.rw --type=out \
--protocol=6 --packets=4- --ack-flag=1 --dport=21 \
--pass=stdout \
| rwstats --fields=sip --percentage=1 --bytes --no-titles \
| cut -f 1 -d "|" \
| rwsetbuild > ftp_clients.set
$ rwsetcat ftp_clients.set
203.0.113.220
203.0.113.33
203.0.113.199
$ rwfilter sample.rw --type=out \
--protocol=6 --packets=4- --ack-flag=1 --dport=22 \
--pass=stdout \
| rwstats --fields=sip --percentage=1 --bytes --no-titles \
| cut -f 1 -d "|" \
| rwsetbuild > ssh_clients.set
$ rwsetcat ssh_clients.set
203.0.113.33
$ rwfilter sample.rw --type=out \
--protocol=6 --packets=4- --ack-flag=1 --dport=23 \
--pass=stdout \
| rwstats --fields=sip --percentage=1 --bytes --no-titles \
| cut -f 1 -d "|" \
| rwsetbuild > telnet_clients.set
$ rwsetcat telnet_clients.set
203.0.113.33
The source addresses shown in this example are potential clients and are summarized in Table 19.
CMU/SEI-2012-TR-006 | 39
Table 19: Potential Remote Assets for the Sample Network
Internal IP Internal Port External IP External Port Comments
203.0.113.222 22 * * SSH/SFTP server
203.0.113.36 22 * * SSH/SFTP server
203.0.113.69 21 * * FTP server
203.0.113.71 21 * * FTP server
203.0.113.199 22 * * SSH/SFTP server
203.0.113.220 * * 21 FTP client
203.0.113.33 * * 21 FTP, SSH, Telnet client
203.0.113.199 * 192.168.5.1388 21 FTP client
Addresses 203.0.113.33 and 203.0.113.220 were removed from the sample network because they
were already listed in the profile as gateway devices. Addresses 203.0.113.222 and 203.0.113.69
were also removed because we found earlier that the first is an email server and the second is a
web server. However, their remote file service activities are noted in the profile.
3. Use the following command to determine whether the FTP assets are making active or passive
connections by looking for connections that the servers initiate from TCP port 20. These will be
active connections from the FTP servers.
$ rwfilter sample.rw --type=out \
--sipset=ftp_servers.set --sport=20 --flags-initial=S/SAFR \
--pass=stdout \
| rwuniq --fields=sip
sIP| Records|
4. For clients, use the following command to look at traffic outbound to port 20. These
connections will have been initiated by the server.
$ rwfilter sample.rw --type=out \
--dport=20 --sipset=ftp_clients.set \
--pass=stdout \
| rwuniq --fields=sip
sIP| Records|
The results from the above example confirm that the servers and clients on the sample network
consistently make passive connections.
5.6.2 How to Validate Findings
Start validating servers by resolving their addresses to domain names. The following example
shows how we used nslookup to determine that address 203.0.113.71 resolves to
ftp1.example.org in the sample network.
$ nslookup 203.0.113.71
Non-authoritative answer:
71.113.0.203.in-addr.arpa name = ftp1.example.org.
8 Actual address removed.
CMU/SEI-2012-TR-006 | 40
Next, log in to each server using a file transfer program or command-line utility. If using the
command line, remember to try both SFTP and SSH for port 22 connections. If a prompt for a
username or password comes up as in the following example, it is a valid server.
$ ssh 203.0.113.71
Password:
Try verifying FTP clients by looking for high-port-to-high-port traffic initiated by the client. If
this traffic is preceded by a connection to port 21, it is probably FTP. To verify that it is FTP, look
at the traffic in more detail. Remote access data connections consist of small packets (commands
and responses) on the command channel and large packets (data transfers) over the data channel.
To look at the traffic in more detail, first find the external addresses with which the host is
communicating. The following example shows the command and results.
$ rwfilter sample.rw --type=out \
--saddress=203.0.113.199 --dport=21 --protocol=6 --packets=4- \
--pass=stdout \