            # print 'Captcha failed:', req.POST.get('captcha_answer'), req.session.get('captcha_answer')
        return res
    @require_safe
    def index(req):
        if not req.user.is_authenticated:
            return redirect('login')
        return render(req, 'blog/index.html', {
            'posts': get_user_posts(req.user),
            'captcha': generate_captcha(req),
            })
    @require_safe
    def post(req, postid):
        post = models.Post.objects.get(secretid=postid)
        return render(req, 'blog/post.html', {
            'post': post,
            'captcha': generate_captcha(req),
            })
    def contact(req):
        if req.method == 'POST':
            if not check_captcha(req):
                messages.add_message(req, messages.ERROR, 'Invalid or outdated captcha')
                return redirect('contact')
            postid = req.POST.get('postid')
            valid = False
            try:
                models.Post.objects.filter(secretid=postid).get()
                valid = True
            except:
                traceback.print_exc()
            if not valid:
                messages.add_message(req, messages.ERROR,
                    'That does not look like a valid post ID')
                return redirect('contact')
            url = 'http://localhost:1342/post/' + postid
            models.Feedback(url=url).save()
            messages.add_message(req, messages.INFO,
                    'Thank you for your feedback, an admin will look at it ASAP')
            return redirect('index')
        else:
            feedback_count = models.Feedback.objects.filter(visited=False).count()
            return render(req, 'blog/contact.html', {
                'feedback_count': feedback_count,
                'captcha': generate_captcha(req),
                })
    def signup(req):
        if req.method == 'POST':
            form = UserCreationForm(req.POST)
            if form.is_valid():
                form.save()
                username = form.cleaned_data.get('username')
                raw_password = form.cleaned_data.get('password1')
                user = authenticate(username=username, password=raw_password)
                login(req, user)
                return redirect('index')
        else:
            form = UserCreationForm()
        return render(req, 'blog/signup.html', {'form': form})
    def get_flag(req, num):
        if req.user.username == 'admin' and req.META.get('REMOTE_ADDR') == '127.0.0.1':
            with open('/asdjkasecretflagfile%d' % num) as f:
                return f.read()
        else:
            return '34C3_JUSTKIDDINGGETADMINANDACCESSFROMLOCALHOSTNOOB'
    @require_safe
    def feed(req):
        posts = get_user_posts(req.user)
        posts_json = json.dumps([
            dict(author=p.author.username, title=p.title, content=p.content)
            for p in posts])
        type_ = req.GET.get('type')
        if type_ == 'json':
            resp = HttpResponse(posts_json)
            resp['Content-Type'] = 'application/json; charset=utf-8'
        elif type_ == 'jsonp':
            callback = req.GET.get('cb')
            bad = r'''[\]\\()\s"'\-*/%<>~|&^!?:;=*%0-9[]+'''
            if not callback.strip() or re.search(bad, callback):
                raise PermissionDenied
            resp = HttpResponse('%s(%s)' % (callback, posts_json))
            resp['Content-Type'] = 'text/javascript; charset=utf-8'
        return resp
    @require_POST
    def publish(req):
        if req.user.username == 'admin':
            messages.add_message(req, messages.INFO,
                    'Sorry but admin cannot post for security reasons')
            return redirect('/')
        if not check_captcha(req):
            messages.add_message(req, messages.ERROR, 'Invalid or outdated captcha')
            return redirect('/')
        models.Post(author=req.user,
                content=req.POST.get('post'),
                title=req.POST.get('title')).save()
        return redirect('/')
    @require_POST
    def flag_api(req):
        if not check_captcha(req):
            raise PermissionDenied
        resp = HttpResponse(json.dumps(get_flag(req, 2)))
        resp['Content-Type'] = 'application/json; charset=utf-8'
        return resp
    @require_safe
    def flag1(req):
        return render(req, 'blog/flag1.html', {'flag': get_flag(req, 1)})
    @require_safe
    def flag2(req):
        return render(req, 'blog/flag2.html', {'captcha': generate_captcha(req)})
1、flag获取首先有一个前置条件
    def get_flag(req, num):
        if req.user.username == 'admin' and req.META.get('REMOTE_ADDR') == '127.0.0.1':
            with open('/asdjkasecretflagfile%d' % num) as f:
                return f.read()
        else:
            return '34C3_JUSTKIDDINGGETADMINANDACCESSFROMLOCALHOSTNOOB'
后一个条件由于经过nginx反代，所以没什么用，主要问题是前一个。
req.user.username并不是通过django本身的session设置的，所以即使我们获取到settings中的SECRET_KEY也没有意义，也就是说，我们只能通过bot获取flag。
2、feed页面存在jsonp接口，但是有大把多过滤，忽略了能用上的``{}.$`这几个
    @require_safe
    def feed(req):
        posts = get_user_posts(req.user)
        posts_json = json.dumps([
            dict(author=p.author.username, title=p.title, content=p.content)
            for p in posts])
        type_ = req.GET.get('type')
        if type_ == 'json':
            resp = HttpResponse(posts_json)
            resp['Content-Type'] = 'application/json; charset=utf-8'
        elif type_ == 'jsonp':
            callback = req.GET.get('cb')
            bad = r'''[\]\\()\s"'\-*/%<>~|&^!?:;=*%0-9[]+'''
            if not callback.strip() or re.search(bad, callback):
                raise PermissionDenied
            resp = HttpResponse('%s(%s)' % (callback, posts_json))
            resp['Content-Type'] = 'text/javascript; charset=utf-8'
        return resp
3、整站的返回头是通过django middleware 添加，但是static目录是直接通过nginx处理的，所以没有CSP头
题目思路完整了，我们就需要构造可以利用的攻击链
无论我们怎么获取flag，我们都需要通过操作static页面来执行js传出，否则就会被CSP拦截，所以我们必须通过多个页面来相互操作修改页面，才能实现我们的需求。
这里需要用到一个在HCTF2017中提到过的攻击方式，叫做SOME.
关于SOME的细节可以看以前的博客 
这里就不细讲了，通过SOME，我们可以通过执行js来操作另一个页面中的dom
执行流程大致如下
1、打开页面，通过a标签的的click来实现页面的跳转，跳转至localhost（nginx）下
2、先拿flag1，两次点击，一个打开flag1页面，一个跳转到下一个js页面
3、通过两次点击，打开一个static目录的页面，然后跳转到下一个js执行的页面
4、通过向static页面写入外部js来执行任意js代码，为了更好的处理，payload可以写入标题，写入代码可以写在内容里。
    标题：
    内容：
接下来就是随意开火了，因为evil.js里没有任何限制，你可以做任何需要的操作。
一个完整的利用链就形成了
有趣的是，这个题目是可以强行绕waf来执行js的。
###### 另一种解法
在ctftime的writeup区域，看到了一种强行绕过waf的解法
上面曾经提到过，关于符号的过滤，遗留下了几个特别的还能利用的字符``{}.$`,没想到的是，通过这几个字符，可以强行构造可执行的js
其中所有的敏感符号通过解base64获得，然后写入页面内执行
最后通过
把数据传出...
#### ref
  * RPO: 
  * CSS RPO: 
  * CSS RPO+XSS: 
  * 蓝猫师傅的博客: 
  * SOME: 
* * *