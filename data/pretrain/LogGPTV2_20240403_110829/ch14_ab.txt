不可逆性
系统更改易于撤消的程度。
这些形式的复杂性都可以存在于系统中，但如果你发现业务目标正被猖獗的复杂性所淹没，则有可能将其中一个支柱封顶，并专注于其他可能更易于管理的支柱。早年的福特汽车是以这种方式解决复杂性的典型例子，通过在几年内只提供一种颜色（黑色）的 Model T，并通过装配线来限制工序自由度，从而控制系统状态。在软件系统中，我们很少能限制状态。在现代系统（如微服务体系结构）中，我们也不太能够控制微服务之间的关系的性质。然而，不可逆转性是一个有趣的支柱，值得思考。如果我们能做出决策，尝试一切，并足够快地回滚，我们就能在不需要的系统性影响或造成太大损害之前，对复杂系统的不合理性质做出反应。
微服务通过分离部署并允许小部件异步更改和回滚来帮助实现此要求。一些开发实践（如 XP 和敏捷）还优化了可逆性，将常规检查点放入开发流程中，以便快速轻松地测试和回滚想法。不变的体系结构、持续交付，以及基于云计算的部署都可以说掩盖了这一复杂性的支柱，使我们能够专注于处理其他三个支柱。
对于大多数软件团队来说，往往至少有一根支柱式不可以动摇的。可能限制状态、关系、环境或不可逆性的决策已经做出，或者被业务目标和目的所阻碍。需要其他方法来面对复杂性。
开始混沌开始混沌
 当我在2015年初来到 Netflix 时，混沌猴子已经存在了将近五年。当 Netflix 在 2010 年和 2011 年从数据中心迁移到云时，缩放配置文件从垂直变为水平。在云中，服务在更多但较小的实例上运行。由于实例数量增加，在任意给定的小时内，实例将灾难性地失败或闪烁消失的可能性更大。
 如果消失的实例是单点故障（SPOF），或者如果流量配置文件的突然更改导致级联失败，则这些实例会影响可用性。有许多易于访问的最佳实践，我们可以实现来防止这种情况。在 Netflix，没有首席技术官，或者正如我前面提到的，也就是没有首席架构师来挑选最佳实践或发布所有微服务都必须遵守的法令。最佳实践往往随手可得，但并没有强制的推广机制。
Netflix 的工程师们没有口述最佳实践，而是决定直面他们想要解决的痛苦（实例消失）。混沌猴子是就是结果，它会每天通过伪随机数来从每个服务选择大约一个实例，并粗鲁地关闭它，但只在工作时间。突然间，许多工程师无法完成路线图中的计划。混沌猴子给他们制造了一个问题，放在他们的队列前面。幸运的是，工程师非常善于解决他们面前的问题。所有这些独立的小型工程团队现在都能步调一致，使其服务能够适应实例消失。
并且它成功了：在四年中，Netflix 已经有许多实例消失，但只有一次与 SPOF 相关的故障。绝大多数微服务现在都能够适应该事件。
在一个案例中，我们确实发生了中断，是混沌猴子终止了实例。幸运的是，服务刚刚部署，负责的工程师仍在办公室，因此很容易就近解决故障。如果我们没有混沌猴子，情况就比较难说了；该实例在部署数月或数年后可能会变得不稳定，并且没有任何迹象能够及时识别和修复问题。
安全和复杂性的权衡
  人为因素专家 Jens Rasmussen 提出了一个模型，描述了系统如何随时间演变，逐渐远离工作人员可见的边界。三个边界是经济、工作负载和安全。跨越这些边界直接导致失败。例如，如果某样东西变得过于昂贵，它跨越了经济学的界限，然后公司可能就停业了。如果某件事变得太多，则工作量边界被跨越，也就是说不能在指定时间内完成任务，让大家都感觉不好，等等。在大多数软件工程情况下，对团队的预算进行建模或了解运行应用程序的资源成本并不困难，这就是经济学中关注的总成本。同样，对于工作负载，在大多数情况下，工程师对有多少人在开发和维护他们所从事的项目、投入多少小时以及取得进展的难度有良好的直觉，这些都是信号。成本超支，同事抱怨他们投入了多少小时，对紧迫性的期望——这些也是信号。这些信号提供对边界的感知。
管理的作用之一是加强这一点，并在团队或组织偏离边界太近时向团队或组织发出强烈信号。“嘿，我们的钱用完了，只剩下两个月的时间来建造这个功能了，”这是经济学界强烈信号的一个很好的例子。大多数软件项目都具有经济性和工作负载边界的强烈信号。
关于安全，情况却并非如此。软件工程师不知道他们的系统有多脆弱，直到它意外崩溃。在大多数情况下，没有安全信号。因此，软件项目自然会激励其系统更便宜且更易于操作。它们从经济边界和工作负载边界漂移，向安全边界漂移。随着时间推移，在这种情况下，系统会逐渐减少成本，做更多的工作，而且操作者不知道，它不太安全。混沌猴子的美妙之处在于它创造了安全信号。如果实例消失时跨越了安全边界，则很快就会发现，尤其是在工作时间损失实例时。当这种情况被强迫时，易受实例消失的影响（不管这些影响是什么）都会暴露出来。这是向服务所有者发出的一个强烈信号，表明他们到底有多安全。因此，Netflix 的微服务能够应对此类安全问题，从而防止系统逐渐陷入不太安全的安排。
混沌变大
   在混沌猴子的成功的基础上，Netflix 决定做更大的尝试。我们关闭整个区域，而不是仅仅终止实例。他们称之为混沌金刚。
若你不熟悉云术语，可以将区域视为主要数据中心。Netflix 的控制平面部署在三个地理位置分散的区域。这将处理与流服务交互的所有设备的流量。Netflix 的流量团队已经建立了业务流程，使我们能够检测一个区域中的严重中断，并将所有这些客户转移到其他两个区域。由于仅控制流量就占北美互联网流量的 3% 以上，因此这会是一个很大的转变。混沌金刚定期进行锻炼，以验证网络团队建立的体系。更重要的是，它验证了所有微服务都能在区域中断中生存下来。它为微服务所有者生成安全信号，以防止系统逐渐进入不太安全的配置中。
形式化
到 2015 年底，混沌猴子和混沌金刚在 Netflix 广为人知。这两个程序为小规模中断（实例消失）和非常大规模中断（区域消失）生成了相当可靠的安全信号。对于系统效应，任然没有太多安全信号：微服务之间所有有趣的相互作用，这些相互作用导致不可预见的效果，无论是好的还是坏的。
这样的系统会是什么样子？我得到了一个小的预算（两个员工人数），以建立一个混沌团队。我在公司范围内提问：“什么是混沌工程？”最常见的答案是某种形式的，“那就是我们在生产系统中破坏事物的时候“。我问了整个行业，得到了同样的回答。这个答案的问题在于它不是一个定义。很多事情在生产中可能会中断，并且对业务没有价值。事实上，从系统内部破坏生产中的事情很容易做到，但我怀疑，如果这是他们唯一的目标，混沌团队在公司内部不会得到任何赞赏。我与新的混沌团队坐下来，使实践正规化。其结果是 PrinciplesofChaos.org 上可用的各种宣言。我们定义了具有明确目标、边界和最佳实践的经验实践。这使我们能够发现价值、规划和评估。我们现在知道我们是否在做混沌工程，做得好不好，以及达到了怎样的目标。
西方科学是建立在一个可伪造性的经验过程之上的。通过证明替代解释不正确，我们对某些观察到的现象的解释建立了信心。混沌工程从中大量借用。宣言中的定义抓住了本质：“促进实验，发现系统性弱点。”构建实验的四个步骤如下：
首先将“稳定状态”定义为指示正常行为的系统的某些可测量输出。
假设这种稳定状态将在对照组和实验组中继续。
引入反映真实事件的变动，如崩溃的服务器、出现故障的硬盘、被切断的网络连接等。
通过寻找对照组和实验组之间稳定状态的差异来反驳这一假设。引用principlesofchaos.org。构建实验的模板可应用于实际混沌工程的任何实例化。对于混沌猴子和混沌金刚，Netflix 将视频流的数量视为稳定状态，因为这个数字定义得相当清楚，而且广为人知。对照组和实验组之间的该数字偏差很容易发现。