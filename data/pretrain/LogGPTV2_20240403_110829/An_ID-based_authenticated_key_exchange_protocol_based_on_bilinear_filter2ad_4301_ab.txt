of the party IDi. In this way the adversary gets the
party IDi’s static private key and totally controls the
party IDi. Parties against whom the adversary does
not issue this query are called honest.
• Send(Πs
i,j, m) The adversary sends the message m to
the session s executed by IDi communicating with IDj
and get a response according to the protocol speciﬁca-
tion.
• Test(Πs
i,j) Only one query of this form is allowed for
the adversary. Provided that the session key is deﬁned,
the adversary M can execute this query at any time.
Then with probability 1/2 the session key and with
probability 1/2 a uniformly chosen random value ζ ∈
{0, 1}k is returned.
Definition 1
(Matching Session). Let Πs
i,j be a com-
pleted session with public output (IDi, X, Y, IDj), where IDi
is the owner of the session, IDj is the peer, and X is IDi’s
outgoing message, Y is IDj’s outgoing message. The ses-
sion Πt
j,i is
completed and its public output is (IDj, Y, X, IDi).
j,i is called the matching session of Πs
i,j, if Πt
Definition 2
(Freshness). Let instance Πs
i,j be a com-
pleted session, which was executed by an honest party IDi
with another honest party IDj. We deﬁne Πs
i,j to be fresh
if none of the following three conditions hold:
• The adversary M reveals the session key of Πs
i,j or of
its matching session (if latter exists).
• IDj is engaged in session Πt
j,i matching to Πs
i,j and
M either reveal:
-both StaticKey of IDi and EphemeralKey of Πs
or
-both StaticKey of IDj and EphemeralKey of Πt
i,j;
j,i.
• No sessions matching to Πs
i,j exist and M either reveal:
i,j;
-both StaticKey of IDi and EphemeralKey of Πs
or
-StaticKey of IDj.
Note that the adversary can reveal static key either by Stat-
icKeyReveal queries or by KGCStaticKeyReveal query.
Definition 3
security parameter k, we deﬁne the advantage AdvAKE
of the P P T adversary M in attacking protocol Σ as
(AKE Security). As a function of the
M,Σ (k)
AdvAKE
M,Σ (k)
def
= |SuccAKE
2|
M,Σ (k) − 1
Here SuccAKE
Test oracle to a fresh instance Πs
ˆb = b, where the bit b is used by the Test oracle.
M,Σ is the probability that the adversary queries
i,j, outputs a bit ˆb such that
We call the authenticated key exchange protocol Σ to be
AKE secure if for any P P T adversary M the function is
negligible.
The original CK model does not cover KCI attacks and the
eCK model simultaneously covers KCI attacks resistance,
weak forward secrecy and ephemeral key reveal resistance
etc. In particular, in eCK model the adversary’s ability is
extended to the extent such that the adversary is allowed
to reveal any static private key and ephemeral private key
of parties involved except for both static private key and
ephemeral private key of one of parties involved.
We note that recently Boyd et al. [5] compare these two
models. Their conclusion is that the eCK is not stronger
than the CK model. The essential diﬀerence comes from the
fact the CK model allows session state reveal queries. This
gives the adversary complete information about the state of
a given session at any entity, including all ephemeral values,
but also any other value during the computation. The eCK
model only allows the adversary to access to ephemeral val-
ues. However, we also note that the previous AKE protocols
claiming to use CK model do not allow the adversary to get
access to complete state information, e.g. HMQV.
4. AN ID-BASED AKE PROTOCOL BASED
ON BDH PROBLEM
Setup
Let the value k be the security parameter. Let e : G ×
G −→ GT be a bilinear pairing, where G, GT be two cyclic
groups of prime order q and P ∈ G be the generator of group
G. We denote by G∗ the non-identity elements set of G. Let
H1, H2 : {0, 1}∗ → G∗ and H : {0, 1}∗ → {0, 1}k be three
hash functions. We randomly pick a value z ∈ Zq and set
Z = zP . We keep z as KGC master private key and publish
params=.
Extract
For the given string ID ∈ {0, 1}∗, KGC computes QID1 =
H1(ID), QID2 = H2(ID) and returns the corresponding pri-
vate keys dID1 = zQID1 , dID2 = zQID2 to the applicant,
where z is the KGC master private key.
Protocol description
In the protocol below, A, B are two participants.
1. A chooses an ephemeral private key x ∈ Zq at random,
computes ephemeral public key X = xP and send X
to B. Similarly, B randomly chooses y ∈ Zq, and send
Y = yP to A.
2. Upon receiving X, party B veriﬁes that X ∈ G∗. If so,
B computes Z1 = e(X + QA1 , yZ + dB1 ), Z2 = e(X +
QA2 , yZ+dB2 ), Z3 = yX and SK = H(Z1, Z2, Z3, sid),
where sid = (X, Y, A, B). B keeps SK as the estab-
lished session key.
3. Similarly, upon receiving Y , A checks if Y ∈ G∗. If so,
A computes Z1 = e(Y + QB1 , xZ + dA1 ), Z2 = e(Y +
QB2 , xZ+dA2 ), Z3 = xY and SK = H(Z1, Z2, Z3, sid).
where sid = (X, Y, A, B). A keeps SK as the estab-
lished session key.
5. SECURITY PROOF
Theorem 2. Suppose that the BDH assumption for (G, GT ,
e, P ) holds, CDH assumption for (G, p) holds and H1, H2, H
are random oracles, then the proposed scheme in Figure 1
is a secure ID-based authenticated key exchange protocol in
eCK model.
Proof. Let k denote the security parameter. Assume that
the adversary M activates at most n(k) honest parties and
s(k) sessions in each party. Assume that the adversary suc-
ceeds with non-negligible probability in the environment de-
scribed in Section 3. Since H(·) is modeled as a random
oracle, after the adversary queries Test oracle, it has only
two possible ways to distinguish a session key from a ran-
dom string.
CASE 1 Forging attack: At some point in its run, the ad-
versary M queries H on the value (Z1, Z2, Z3, X, Y, A, B) in
the Test session owned by A communicating with B. Clearly,
in this case M computes the values Z1, Z2, Z3 itself.
CASE 2 Key-replication attack: The adversary M forces a
non-matching session to have the same session key with the
Test session. In this case, the adversary M can simply learn
the session key by querying the non-matching session.
The input to the key derivation function H(·) includes
all information contained in sid. Since two non-matching
sessions can not have same identities and same ephemeral
public keys and H is modeled as random oracle, the success
probability of key replication attack is negligible.
The rest of this section is mainly devoted to the analysis of
the CASE 1 Forging attack. In this case, according to fresh-
ness deﬁnition, We consider separately two complementary
subcases below:
CASE 1.1: No honest party owns a matching session to
the Test session.
CASE 1.2: The Test session has a matching session owned
by another honest party.
5.1 The Analysis of CASE 1.1
Consider the following two subcase:
CASE 1.1.1: At some point, the static private key owned
by the party A has been revealed by the adversary M (Note
that in this case, according to the freshness deﬁnition, M is
not permitted to reveal ephemeral private key of the Test
session).
CASE 1.1.2: The static private key owned by the party
A has never been revealed by the adversary M (Note that
in this case, according to the freshness deﬁnition, M may
reveal party A’s ephemeral private key in the Test session).
CASE 1.1.1:
In this case, following the standard approach, we will
show how to construct BDH problem solver S that uses
an adversary M who succeeds with non-negligible proba-
bility in CASE 1.1.1. The solver S is given BDH problem
instance (U = uP, Z = zP, W = wP ), where u, z, w ∈ Zq
and U, Z, W ∈ G. Its task is to compute BDH(U, Z, W ) =
e(P, P )uzw. S sets KGC master public key to be Z. With
A
x ←R Zq
sid = (X, Y, A, B)
Z1 = e(Y + QB1 , xZ + dA1 )
Z2 = e(Y + QB2 , xZ + dA2 )
Z3 = xY
SK = H(Z1, Z2, Z3, sid)
−−−−−→
X = xP
Y = yP←−−−−−
B
y ←R Zq
sid = (X, Y, A, B)
Z1 = e(X + QA1 , yZ + dB1 )
Z2 = e(X + QA2 , yZ + dB2 )
Z3 = yX
SK = H(Z1, Z2, Z3, sid)
Figure 1: An ID-based AKE protocol under BDH assumption
1
probability at least
n(k)2 , S guesses the adversary M will
select one party denoted by A as the owner of the session ˆs
and the other party denoted by B as the peer. With proba-
1
s(k) , S guesses the adversary M will select the
bility at least
session ˆs as Test session. Furthermore, S randomly chooses
s, r ∈ Zq, assigns static public key QB1 = W1 = W, QB2 =
W2 = sP − rW for B, and random static public/private
key pairs for the remaining n(k) − 1 parties (including A).
When the adversary M activates a party whose static key S
possesses, S follows the protocol description.
The reader may wonder how the simulator respond the
adversary’s queries to these sessions owned by B without B’s
static private key. To address this issue, most of previous
AKE protocols use a additional DDH(·) oracle to keep the
consistency of random oracle queries. However, in this paper
we use the trapdoor test technique to do the same work
instead of using gap assumption. By doing this, our scheme
can be proven secure in more standard BDH assumption.
Below we discuss mainly the simulation action of simulator
S when the adversary M makes queries to party B (because
S does not know B’s static private key). Without loss of
generality, we assume that B is the responder.
• H1(IDi): S maintains an initially empty list H list
1 with
entries of the form (IDi, li1, QIDi1 ). The simulator S
responds to these queries in the following way:
– If IDi
is already there, then S responds with
stored value QIDi1 .
– Otherwise, if IDi = B, S randomly chooses s, r ∈
Zq, computes QB1 = W1 = W, QB2 = W2 = sP −
rW , then inserts (B, null, QB1) into the H list
and
inserts corresponding (B, null, QB2) into the H list
(maintained in H2 query).
– Otherwise, S randomly chooses li1, li2 ∈ Zq, com-
putes QIDi1 = li1P, QIDi2 = li2P , inserts (IDi,
li1, QIDi1 ) into the H list
and inserts correspond-
ing (IDi, li2, QIDi2 ) into the H list
(maintained in
H2 query).
1
1
2
2
• H2(IDi): S maintains an initially empty list H list
2 with
entries of the form (IDi, li2, QIDi2 ). The simulator
S responds to these queries in the same way as that
of H1(IDi). The details will be presented in the full
version.
• H( ˆZ1, ˆZ2, ˆZ3, X, Y, IDi, IDj): S maintains an initially
empty list H list with entries of the form ( ˆZ1, ˆZ2, ˆZ3,
X, Y, IDi, IDj, h). S simulates the oracle in usual way
except for queries of the form ( ˆZ1, ˆZ2, ˆZ3, X, Y, C, B),
where C is B’s peer and may not be honest. The
simulator S responds to these queries in the following
way:
– If ( ˆZ1, ˆZ2, ˆZ3, X, Y, C, B) is already there, then S
responds with stored value h.
– Otherwise, S looks in Llist (maintained in the
Send query) for the entry (X, Y, C, B,∗). If ﬁnds
it, S computes
¯Z1 = ˆZ1/(e(Y, dC1 )e(X, yZ)e(QB1 , dC1 ))
¯Z2 = ˆZ2/(e(Y, dC2 )e(X, yZ)e(QB2 , dC2 ))
r ¯Z2
?= yX.
Then S checks if ˆZ1, ˆZ2 are correctly generated by
?= e(X, Z)s. Note
checking (Theorem 1) ¯Z1
that the values ˆZ1, ˆZ2 are correctly generated iﬀ
ˆZi = e(Y + QBi , xZ + dCi ), which is equivalent
to ¯Zi = e(QBi , xZ) = e(X, Z)wi (i=1,2). S also
checks ˆZ3
∗ If both predicates evaluate to 1, S returns
from Llist the stored value SK to the adver-
sary M and stores the new tuple ( ˆZ1, ˆZ2, ˆZ3,
X, Y, C, B, SK) in H list.
∗ Otherwise, S chooses h ∈ {0, 1}k at random,
sends it to the adversary M and stores the
new tuple ( ˆZ1, ˆZ2, ˆZ3, X, Y, C, B, h) in H list.
– Otherwise (no such entries exist), S chooses h ∈
{0, 1}k at random, sends it to M and stores the
new tuple ( ˆZ1, ˆZ2, ˆZ3, X, Y, C, B, h) in H list.
• EstablishParty(IDi): The simulator S registers the
IDi on behalf of the adversary M . Concretely, S
makes queries to H1, H2 oracle with IDi and returns
the dIDi1 = li1Z, dIDi1 = li2Z to the adversary M .
• KGCStaticKeyReveal: The simulator S fails.
• StaticKeyReveal(IDi):
– If IDi = B then simulator fails (S do not know
the corresponding static private key dB1 , dB2 ).
– Otherwise, S returns the corresponding static pri-
vate key dIDi1 , dIDi2 to the adversary M .
• EphemeralKeyReveal(Πs
i,j):
– If Πs
i,j is Test session, the simulator fails (The
ephemeral key of Test session cannot be revealed).
– Otherwise, S returns the stored ephemeral private
key to the adversary M .
• Send(Πs
i,j, m): S maintains an initially empty list
Llist with entries of the form (X, Y, IDi, IDj, SK).
– If Πs
i,j is Test session, then simulator returns U
to the adversary M (We set the ephemeral public
key of Test session owned by A to be U ).
– If IDi = B (For convenience, we set IDj = C
and X = m).