宝塔⾯板 7.6.0 ，基于python3+flask
⽬录在 /www/server/panel/
config
task.json
定时任务信息
menu.json
⾸⻚路由配置信息
{
  "JOBS": [
    {
      "id": "1",
      "func": "jobs:control_task",
      "args": null,
      "trigger": "interval",
      "seconds": 15
    },
    {
      "id": "2",
      "func": "jobs:install_task",
      "args": null,
      "trigger": "interval",
      "seconds": 10
    },
    {
      "id": "3",
      "func": "jobs:site_end_task",
      "args": null,
      "trigger": "interval",
      "seconds": 10800
    },
    {
      "id": "4",
      "func": "jobs:php_safe_task",
      "args": null,
      "trigger": "interval",
      "seconds": 30
    }
  ],
  "control": {
    "open": true,
    "day": 30
  }
}
[
  {
    "title": "⾸⻚",
    "href": "/",
    "class": "menu_home",
    "id": "memuA",
    "sort": 1
  },
  {
    "title": "⽹站",
    "href": "/site",
    "class": "menu_web",
    "id": "memuAsite",
    "sort": 2
  },
  {
    "title": "FTP",
    "href": "/ftp",
    "class": "menu_ftp",
    "id": "memuAftp",
    "sort": 3
  },
  {
    "title": "数据库",
    "href": "/database",
    "class": "menu_data",
    "id": "memuAdatabase",
    "sort": 4
  },
  {
    "title": "监控",
    "href": "/control",
    "class": "menu_control",
    "id": "memuAcontrol",
    "sort": 5
  },
  {
    "title": "安全",
    "href": "/firewall",
    "class": "menu_firewall",
    "id": "memuAfirewall",
    "sort": 6
  },
  {
    "title": "防⽕墙",
    "href": "/btwaf/index",
    "class": "menu_btwaf",
    "id": "memu_btwaf",
    "sort": 7
api.json
⾃⼰的api信息
ssh_info
  },
  {
    "title": "⽂件",
    "href": "/files",
    "class": "menu_folder",
    "id": "memuAfiles",
    "sort": 8
  },
  {
    "title": "终端",
    "href": "/xterm",
    "class": "menu_xterm",
    "id": "memuAxterm",
    "sort": 9
  },
  {
    "title": "计划任务",
    "href": "/crontab",
    "class": "menu_day",
    "id": "memuAcrontab",
    "sort": 10
  },
  {
    "title": "软件商店",
    "href": "/soft",
    "class": "menu_soft",
    "id": "memuAsoft",
    "sort": 11
  },
  {
    "title": "⾯板设置",
    "href": "/config",
    "class": "menu_set",
    "id": "memuAconfig",
    "sort": 12
  },
  {
    "title": "退出",
    "href": "/login?dologin=True",
    "class": "menu_exit",
    "id": "dologin",
    "sort": 13
  }
]
可能存放ssh信息
basic_auth.json
如果要basic登陆，写⼊这个⽂件
flask 的key是12位，⽣成代码根据硬件来,每个机器唯⼀
检查登陆
宝塔⾯板在发现ua有bot时候会跳转到bt官⽹
宝塔⾸⻚会⾸先检测是否api check(检测config/api.json⽂件)，如果没有，则跳转login
获取客户端IP，直接从remote_addr
爆破的话有20次限制，1⼩时
token需要正确
app.secret_key = uuid.UUID(int=uuid.getnode()).hex[-12:]
app.config['SESSION_MEMCACHED'] = SimpleCache()
app.config['SESSION_TYPE'] = 'memcached'
app.config['SESSION_PERMANENT'] = True
app.config['SESSION_USE_SIGNER'] = True
app.config['SESSION_KEY_PREFIX'] = 'BT_:'
app.config['SESSION_COOKIE_NAME'] = "SESSIONID"
app.config['PERMANENT_SESSION_LIFETIME'] = 86400 * 30
g.ua = request.headers.get('User-Agent','')
if g.ua:
  ua = g.ua.lower()
  if ua.find('spider') != -1 or g.ua.find('bot') != -1:
    return redirect('https://www.baidu.com')
g.version = '7.6.0' # 版本号被硬编码
g.title = public.GetConfigValue('title')
g.uri = request.path
g.debug = os.path.exists('data/debug.pl')
g.pyversion = sys.version_info[0]
session['version'] = g.version
def GetClientIp():
    from flask import request
    return request.remote_addr.replace('::ffff:','')
之后需要传⼊的参数通过 配置的key进⾏aes解密
最后⼀个参数通过md5+时间校验
api 访问 主要要弄到 token和key, /dev/shm/ ⽬录任何⼈可读，读取到这个⽬录就可得知token信息。
登陆检查暗装
如果登陆的ua不和初次登陆的⼀样则退出，应该是防⽌cookie被窃取
登陆⼊⼝⽂件
Flask请求钩⼦
a_file = '/dev/shm/' + get.client_bind_token
            if not os.path.exists(a_file):
                import panelApi
                if not panelApi.panelApi().get_app_find(get.client_bind_token):
                    public.set_error_num(num_key)
                    return public.returnJson(False,'未绑定的设备')
                public.writeFile(a_file,'')
g.form_data = json.loads(public.aes_decrypt(get.form_data,api_config['key']))
request_token = public.md5(get.request_time + api_config['token'])
ua_md5 = public.md5(g.ua)
                if ua_md5 != session.get('login_user_agent',ua_md5):
                    session.clear()
                    return redirect('/login')
admin_path_file = 'data/admin_path.pl'
if request.path in ['/service_status']: return
if session.get('debug') == 1: return
if request.path.find('/static/') != -1 or request.path == '/code':
        if not 'login' in session and not 'admin_auth' in session and not 'down' in 
session:
            session.clear()
            return abort(401)
钩⼦结束
记录⽇志
写⽇志函数
domain_check = public.check_domain_panel()
    if domain_check: return domain_check
    # ⾯板域名检查
if public.is_local():
        # 离线模式，is_local是判断⽂件/www/server/panel/data/not_network.pl是否存在
        # 离线模式下⽆法使⽤这些功能
        not_networks = ['uninstall_plugin', 'install_plugin', 'UpdatePanel']
        if request.args.get('action') in not_networks:
            return public.returnJson(False, 'INIT_REQUEST_CHECK_LOCAL_ERR'), 
json_header
# Flask 请求结束勾⼦
@app.teardown_request
def request_end(reques=None):
    if request.path in ['/service_status']: return
    not_acts = ['GetTaskSpeed', 'GetNetWork', 'check_pay_status', 
'get_re_order_status', 'get_order_stat']
    key = request.args.get('action')
    if not key in not_acts and request.full_path.find('/static/') == -1:
        public.write_request_log()
        if 'api_request' in g:
            if g.api_request:
                session.clear()
#写关键请求⽇志
def write_request_log(reques = None):
    try:
        from BTPanel import request,g,session
        if session.get('debug') == 1: return
        if request.path in 
['/service_status','/favicon.ico','/task','/system','/ajax','/control','/data','/ssl']:
            return False
        log_path = '/www/server/panel/logs/request'
        log_file = getDate(format='%Y-%m-%d') + '.json'
        if not os.path.exists(log_path): os.makedirs(log_path)
        log_data = []
        log_data.append(getDate())
        log_data.append(GetClientIp() + ':' + str(request.environ.get('REMOTE_PORT')))
        log_data.append(request.method)
路由
如果路由函数有这⼀段话，代表在检查登陆
源码中也区分了 普通路由区，代表这个区域都需要检查，严格排查区，代表不需要登陆，但是要严格排查。
login
如果 config/api.json 中有tmp_token，这个可以被⽤来登陆
tips
可以作为⼀个特征，要⽤curl访问，直接⽤chrome访问会js跳转的。
⽂件分享接⼝
        log_data.append(request.full_path)
        log_data.append(request.headers.get('User-Agent'))
        if request.method == 'POST':
            args = str(request.form.to_dict())
            if len(args) ', methods=method_all)
fname = request.args.get('fname')
        if fname:
            if (len(fname) > 256): return abort(404)
        if fname: fname = fname.strip('/')
如果能把 .. 、 ./ ，绕过去就可以跨越⽬录了。
⼩程序接⼝
filename = find['filename']
        if fname:
            filename = os.path.join(filename, fname)
            if not public.path_safe_check(fname, False): return abort(404)
            if os.path.isdir(filename):
                return get_dir_down(filename, token, find)
        else:
            if os.path.isdir(filename):
                return get_dir_down(filename, token, find)
#校验路径安全
def path_safe_check(path,force=True):
    if len(path) > 256: return False 
    checks = ['..','./','\\','%','$','^','&','*','~','"',"'",';','|','{','}','`']
    for c in checks:
        if path.find(c) != -1: return False
    if force:
        rep = r"^[\w\s\.\/-]+$"
        if not re.match(rep,path): return False
    return True
@app.route('/public', methods=method_all)
def panel_public():
    # ⼩程序控制接⼝
    get = get_input()
    try:
        import panelWaf
        panelWaf_data = panelWaf.panelWaf()
        if panelWaf_data.is_sql(get.__dict__): return 'ERROR'
        if panelWaf_data.is_xss(get.__dict__): return 'ERROR'
    except:
        pass
    #获取ping测试
    if 'get_ping' in get:
        try:
            import panelPing
            p = panelPing.Test()
            get = p.check(get)
            # 这个Test() check()函数没找到，找到了这⾥应该可以看下
            # 这⾥应该是没写完，最新版也没发现这个，直接访问会报错，曝出宝塔的路径 
            # http://49.232.39.212:2088/public?get_ping=1
            # class/panelPing.py 这个是python2写的，根据报错信息不同可区分python2 还是 
python3
            if not get: return 'ERROR'
            result = getattr(p,get['act'])(get)
            result_type = type(result)
            if str(result_type).find('Response') != -1: return result
            return public.getJson(result),json_header
        except:
            return public.returnJson(False,public.get_error_info())
    if len("{}".format(get.__dict__)) > 1024 * 32:
        return 'ERROR'
    get.client_ip = public.GetClientIp()
    num_key = get.client_ip + '_wxapp'
    if not public.get_error_num(num_key, 10):
        return public.returnMsg(False, '连续10次认证失败，禁⽌1⼩时')
    if not hasattr(get, 'name'): get.name = ''
    if not hasattr(get, 'fun'): return abort(404)
    if not public.path_safe_check("%s/%s" % (get.name, get.fun)): return abort(404)
    if get.fun in ['scan_login', 'login_qrcode', 'set_login', 'is_scan_ok', 'blind', 
'static']:
        if get.fun == 'static':
            if not 'filename' in get: return abort(404)
            if not public.path_safe_check("%s" % (get.filename)): return abort(404)
            s_file = '/www/server/panel/BTPanel/static/' + get.filename
            # 这⾥很危险，直接拼接，但是..绕不过去。。
            if s_file.find('..') != -1 or s_file.find('./') != -1: return abort(404)
            if not os.path.exists(s_file): return abort(404)
            return send_file(s_file, conditional=True, add_etags=True)
        # 检查是否验证过安全⼊⼝
        if get.fun in ['login_qrcode', 'is_scan_ok']:
            global admin_check_auth, admin_path, route_path, admin_path_file
            if admin_path != '/bt' and os.path.exists(admin_path_file) and not 
'admin_auth' in session:
                return 'False'
        #验证是否绑定了设备
        if not get.fun in ['blind']:
            if not public.check_app('app'):return public.returnMsg(False,'未绑定⽤户!')
        import wxapp
        pluwx = wxapp.wxapp()
        checks = pluwx._check(get)
        if type(checks) != bool or not checks:
            public.set_error_num(num_key)
            return public.getJson(checks), json_header
        data = public.getJson(eval('pluwx.' + get.fun + '(get)'))