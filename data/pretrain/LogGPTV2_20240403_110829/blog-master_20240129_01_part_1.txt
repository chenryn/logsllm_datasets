## 开源PolarDB|PostgreSQL 应用开发者&DBA 公开课 - 5.7 PolarDB开源版本必学特性 - PolarDB 应用实践实验          
### 作者                                      
digoal                                      
### 日期                                      
2024-01-29                                      
### 标签                                      
PostgreSQL , PolarDB , 应用开发者 , DBA , 公开课                            
----                                      
## 背景      
## PolarDB 应用实践实验  
这个章节基于"沉浸式学习PostgreSQL|PolarDB"素材构建, 来自真实的业务场景, 帮助开发者用好数据库, 提升开发者职业竞争力, 同时为企业降本提效. 这个章节核心目标是教大家怎么用好数据库, 而不是怎么运维管理数据库、怎么开发数据库内核. 所以面向的对象是数据库的用户、应用开发者、应用架构师、数据库厂商的产品经理、售前售后专家等角色.   
由于受篇幅限制, 挑选了4个比较经典的实验进行详细的讲解:   
- 1、如何快速构建“海量&逼真”的测试数据   
- 2、跨境电商场景, 快速判断商标|品牌侵权   
- 3、营销场景, 根据用户画像的相似度进行目标人群圈选, 实现精准营销   
- 4、PolarDB向量数据库插件, 实现通义大模型AI的外脑, 解决通用大模型无法触达的私有知识库问题、幻觉问题   
### 1、如何快速构建“海量&逼真”的测试数据      
传统数据库测试通常使用标准套件tpcc,tpch,tpcb,tpcds等生成测试数据, 而当我们需要根据不同的业务场景来设计测试数据的特征, 并根据特征生成比较逼真的大规模数据时, 往往不太容易, 需要针对需求开发程序来实现.    
另外, 传统数据库的测试模型也比较简单, 通常只能使用标准的tpcc,tpch,tpcb,tpcds等相关压测软件来实现测试. 无法根据特定业务需求来进行模拟压测.      
PolarDB & PostgreSQL 自定义生成数据的方法非常多, 通过SRF, pgbench等可以快速加载特征数据, 可以根据实际的业务场景和需求进行数据的生成、压测. 可以实现提前预知业务压力问题, 帮助用户提前解决瓶颈.      
开发者通常需要结合数据库的能力, 业务场景, 以及数据特征等构建符合业务真实情况的数据. 下面开始举例讲解.    
一、如何生成各种需求、各种类型的随机值       
1、100到500内的随机数    
```    
postgres=# select 100 + random()*400 ;    
      ?column?          
--------------------    
 335.81542324284186    
(1 row)    
```    
2、100 到500内的随机整数    
```    
postgres=# select 100 + ceil(random()*400)::int ;    
 ?column?     
----------    
      338    
(1 row)    
```    
3、uuid    
```    
postgres=# select gen_random_uuid();    
           gen_random_uuid                
--------------------------------------    
 84e51794-e19c-40c1-9f8a-2dd80f29bc7a    
(1 row)    
-- 请思考一下UUID的弊端?   
-- 还有哪些UUID类型/类似功能插件?   
```    
4、md5    
```    
postgres=# select md5(now()::text);    
               md5                    
----------------------------------    
 5af6874991f7122e8db67170040fe0f7    
(1 row)    
postgres=# select md5(random()::text);    
               md5                    
----------------------------------    
 744094f5f76f66afe4fbacb663ae03dc    
(1 row)    
```    
5、将任意类型转换为hashvalue    
```    
\df *.*hash*    
postgres=# select hashtext('helloworld');    
  hashtext      
------------    
 1836618988    
(1 row)    
```    
6、随机点    
```    
postgres=# select point(random(), random());    
                  point                      
-----------------------------------------    
 (0.1549642173067305,0.9623178115174227)    
(1 row)    
```    
7、多边形    
```    
postgres=# select polygon(path '((0,0),(1,1),(2,0))');    
       polygon           
---------------------    
 ((0,0),(1,1),(2,0))    
(1 row)    
```    
8、路径    
```    
postgres=# select path '((0,0),(1,1),(2,0))';    
        path             
---------------------    
 ((0,0),(1,1),(2,0))    
(1 row)    
```    
9、50到150的随机范围    
```    
postgres=# select int8range(50, 50+(random()*100)::int);    
 int8range     
-----------    
 [50,53)    
(1 row)    
postgres=# select int8range(50, 50+(random()*100)::int);    
 int8range     
-----------    
 [50,108)    
(1 row)    
```    
10、数组    
```    
postgres=# select array['a','b','c'];    
  array      
---------    
 {a,b,c}    
(1 row)    
```    
```    
SELECT ARRAY(SELECT ARRAY[i, i*2] FROM generate_series(1,5) AS a(i));    
              array    
----------------------------------    
 {{1,2},{2,4},{3,6},{4,8},{5,10}}    
(1 row)    
```    
11、随机数组    
```    
create or replace function gen_rnd_array(int,int,int) returns int[] as $$    
  select array(select $1 + ceil(random()*($2-$1))::int from generate_series(1,$3));    
$$ language sql strict;    
```    
```    
-- 10个取值范围1到100的值组成的数组    
postgres=# select gen_rnd_array(1,100,10);    
         gen_rnd_array              
--------------------------------    
 {4,70,70,77,21,68,93,57,92,97}    
(1 row)    
```    
下面10个例子参考:     
- https://www.cnblogs.com/xianghuaqiang/p/14425274.html    
12、生成随机整数 —— Generate a random integer    
```    
-- Function:    
  -- Generate a random integer    
-- Parameters:    
  -- min_value: Minimum value    
  -- max_value: Maximum value    
create or replace function gen_random_int(min_value int default 1,  max_value int default 1000) returns int  as    
$$    
begin    
    return min_value + round((max_value - min_value) * random());    
end;    
$$ language plpgsql;    
```    
```    
select gen_random_int();    
select gen_random_int(1,10);    
```    
13、生成随机字母字符串 —— Generate a random alphabetical string    
```    
-- Function:    
  -- Generate a random alphabetical string    
-- Parameters:    
  -- str_length: Length of the string    
  -- letter_case: Case of letters. Values for option: lower, upper and mixed    
create or replace function gen_random_alphabetical_string(str_length int default 10, letter_case text default 'lower') returns text as    
$body$    
begin    
    if letter_case in ('lower', 'upper', 'mixed') then    
        return    
        case letter_case     
            when 'lower' then array_to_string(array(select substr('abcdefghijklmnopqrstuvwxyz',(ceil(random()*26))::int, 1) FROM generate_series(1, str_length)), '')    
            when 'upper' then array_to_string(array(select substr('ABCDEFGHIJKLMNOPQRSTUVWXYZ',(ceil(random()*26))::int, 1) FROM generate_series(1, str_length)), '')    
            when 'mixed' then array_to_string(array(select substr('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz',(ceil(random()*52))::int, 1) FROM generate_series(1, str_length)), '')    
            else array_to_string(array(select substr('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz',(ceil(random()*52))::int, 1) FROM generate_series(1, str_length)), '')    
       end;    
    else    
        RAISE EXCEPTION 'value % for parameter % is not recognized', letter_case, 'letter_case'    
        Using Hint = 'Use "lower", "upper" or "mixed". The default value is "lower"', ERRCODE ='22023';    
    end if;    
end;    
$body$    
language plpgsql volatile;    
```    
```    
select gen_random_alphabetical_string(10);    
select gen_random_alphabetical_string(letter_case => 'lower');    
```    
14、生成随机字符串 —— Generate a random alphanumeric string    
```    
-- Function:    
  -- Generate a random alphanumeric string    
-- Parameters:    
  -- str_length: Length of the string    
create or replace function gen_random_string(str_length int default 10) returns text as    
$body$    
    select array_to_string(array(select substr('0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz',(ceil(random()*62))::int, 1) FROM generate_series(1, $1)), '');    
$body$    
language sql volatile;    
```    
```    
select gen_random_string(10);    
```    
15、生成随机时间戳 —— Generate a random timestamp    
```    
 -- Function:    
 -- Generate a random timestamp    
-- Parameters:    
  -- start_time: Lower bound of the time    
  -- end_time: Upper bound of the time    
create or replace function gen_random_timestamp(start_time timestamp default date_trunc('year', now()), end_time timestamp default now()) returns timestamp as    
 $$    
 begin    
     return start_time + round((extract(epoch from end_time)- extract(epoch from start_time))* random()) * interval '1 second';    
 end;    
 $$ language plpgsql;    
```    
```    
select gen_random_timestamp();    
select gen_random_timestamp('2017-10-22 10:05:33','2017-10-22 10:05:35');    
```    