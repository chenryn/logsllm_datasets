title:Detecting Credential Spearphishing in Enterprise Settings
author:Grant Ho and
Aashish Sharma and
Mobin Javed and
Vern Paxson and
David A. Wagner
Detecting Credential Spearphishing Attacks  
in Enterprise Settings
Grant Ho, UC Berkeley; Aashish Sharma, The Lawrence Berkeley National Laboratory;  
Mobin Javed, UC Berkeley; Vern Paxson, UC Berkeley and ICSI; David Wagner, UC Berkeley
https://www.usenix.org/conference/usenixsecurity17/technical-sessions/presentation/ho
This paper is included in the Proceedings of the 26th USENIX Security SymposiumAugust 16–18, 2017 • Vancouver, BC, CanadaISBN 978-1-931971-40-9Open access to the Proceedings of the 26th USENIX Security Symposium is sponsored by USENIXDetecting Credential Spearphishing Attacks in Enterprise Settings
Grant Ho† Aashish Sharma(cid:5) Mobin Javed† Vern Paxson†∗ David Wagner†
(cid:5)
Lawrence Berkeley National Laboratory
∗
†
UC Berkeley
International Computer Science Institute
Abstract
We present a new approach for detecting credential
spearphishing attacks in enterprise settings. Our method
uses features derived from an analysis of fundamental
characteristics of spearphishing attacks, combined with a
new non-parametric anomaly scoring technique for rank-
ing alerts. We evaluate our technique on a multi-year
dataset of over 370 million emails from a large enterprise
with thousands of employees. Our system successfully
detects 6 known spearphishing campaigns that succeeded
(missing one instance); an additional 9 that failed; plus
2 successful spearphishing attacks that were previously
unknown, thus demonstrating the value of our approach.
We also establish that our detector’s false positive rate is
low enough to be practical: on average, a single analyst
can investigate an entire month’s worth of alerts in un-
der 15 minutes. Comparing our anomaly scoring method
against standard anomaly detection techniques, we ﬁnd
that standard techniques using the same features would
need to generate at least 9 times as many alerts as our
method to detect the same number of attacks.
1
Over the past several years, a litany of high-proﬁle
breaches has highlighted the growing prevalence and po-
tency of spearphishing attacks. Leveraging these attacks,
adversaries have successfully compromised a wide range
of government systems (e.g., the US State Department
and the White House [1]), prominent companies (e.g.,
Google and RSA [3]), and recently, political ﬁgures and
organizations (e.g., John Podesta and the DNC [21]).
Introduction
Unlike exploits that target technical vulnerabilities in
software and protocols, spearphishing is a type of social
engineering attack where the attacker sends a targeted,
deceptive email that tricks the recipient into performing
some kind of dangerous action for the adversary. From
an attacker’s perspective, spearphishing requires little
technical sophistication, does not rely upon any speciﬁc
vulnerability, eludes technical defenses, and often suc-
ceeds. From a defender’s perspective, spearphishing is
difﬁcult to counter due to email’s susceptibility to spoof-
ing and because attackers thoughtfully handcraft their at-
tack emails to appear legitimate. For these reasons, there
are currently no generally effective tools for detecting or
preventing spearphishing, making it the predominant at-
tack for breaching valuable targets [17].
Spearphishing attacks take several forms. One of the
most well-known involves an email that tries to fool the
recipient into opening a malicious attachment. However,
in our work, which draws upon several years worth of
data from the Lawrence Berkeley National Lab (LBNL),
a large national lab supported by the US Department of
Energy, none of the successful spearphishing attacks in-
volved a malicious attachment. Instead, the predominant
form of spearphishing that LBNL encounters is creden-
tial spearphishing, where a malicious email convinces
the recipient to click on a link and then enter their creden-
tials on the resulting webpage. For an attachment-driven
spearphish to succeed against a site like LBNL, which
aggressively scans emails for malware, maintains fre-
quently updated machines, and has a team of several full-
time security staff members, an attacker will often need
to resort to an expensive zero-day exploit. In contrast,
credential spearphishing has an incredibly low barrier to
entry: an attacker only needs to host a website and craft a
deceptive email for the attack to succeed. Moreover, with
widespread usage of remote desktops, VPN applications,
and cloud-based email providers, stolen credentials often
provide attackers with rich information and capabilities.
Thus, although other forms of spearphishing constitute
an important threat, credential spearphishing poses a ma-
jor and unsolved threat in-and-of itself.
Our work presents a new approach for detecting cre-
dential spearphishing attacks in enterprise settings. This
domain proves highly challenging due to base-rate is-
sues.
For example, our enterprise dataset contains
370 million emails, but fewer than 10 known instances
of spearphishing. Consequently, many natural methods
fail, because their false positive rates are too high: even
a false positive rate as low as 0.1% would lead to 370,000
false alarms. Additionally, with such a small number of
known spearphishing instances, standard machine learn-
ing approaches seem unlikely to succeed: the training set
is too small and the class imbalance too extreme.
To overcome these challenges, we introduce two key
contributions. First, we present an analysis of character-
USENIX Association
26th USENIX Security Symposium    469
istics that we argue are fundamental to spearphishing at-
tacks; from this analysis, we derive a set of features that
target the different stages of a successful spearphishing
attack. Second, we introduce a simple, new anomaly
detection technique (called DAS) that requires no la-
beled training data and operates in a non-parametric fash-
ion. Our technique allows its user to easily incorporate
domain knowledge about their problem space into the
anomaly scores DAS assigns to events. As such, in our
setting, DAS can achieve an order-of-magnitude better
performance than standard anomaly detection techniques
that use the same features. Combining these two ideas to-
gether, we present the design of a real-time detector for
credential spearphishing attacks.
Working with the security team at LBNL, we eval-
uated our detector on nearly 4 years worth of email
data (about 370 million emails), as well as associated
HTTP logs. On this large-scale, real-world dataset, our
detector generates an average of under 10 alerts per day;
and on average, an analyst can process a month’s worth
of these alerts in 15 minutes. Assessing our detector’s
true positive accuracy, we ﬁnd that it not only detects
all but one spearphishing attack known to LBNL, but
also uncovers 2 previously undiscovered spearphishing
attacks. Ultimately, our detector’s ability to identify both
known and novel attacks, and the low volume and burden
of alerts it imposes, suggests that our approach provides
a practical path towards detecting credential spearphish-
ing attacks.
2 Attack Taxonomy and Security Model
In a spearphishing attack, the adversary sends a targeted
email designed to trick the recipient into performing a
dangerous action. Whereas regular phishing emails pri-
marily aim to make money by deceiving any arbitrary
user [18, 22], spearphishing attacks are speciﬁcally tar-
geted at users who possess some kind of privileged ac-
cess or capability that the adversary seeks. This selective
targeting and motivation delineates spearphishing (our
work’s focus) from regular phishing attacks.
2.1 Taxonomy for Spearphishing Attacks
Spearphishing spans a wide range of social-engineering
attacks.
To better understand this complex prob-
lem space, we present a taxonomy that characterizes
spearphishing attacks across two dimensions. These cor-
respond to the two key stages of a successful attack.
Throughout this paper, we refer to the attacker as Mal-
lory and the victim as Alice.
2.1.1 Lure
Spearphishing attacks require Mallory to convince Alice
to perform some action described in the email. To ac-
complish this, Mallory needs to imbue her email with a
Figure 1: Examples of four different impersonation models for
a real user “Alice Good”. In the address spoofer impersonation
model, an attacker might also spoof the username to exactly
match the true user’s (e.g., by using Alice Good instead of
just Alice). Our work focuses on detecting the latter three
threat models, as discussed in Section 2.2: name spoofer, pre-
viously unseen attacker, and lateral attacker.
sense of trust or authority that convinces Alice to execute
the action. Attackers typically achieve this by sending
the email under the identity of a trusted or authoritative
entity and then including some compelling content in the
email.
Impersonation Model: Spearphishing involves imper-
sonating the identity of someone else, both to create trust
in the recipient and also to to minimize the risk of attri-
bution and punishment. There are several types of im-
personation:
1. An address spoofer uses the email address of a
trusted individual in the From ﬁeld of the attack
email. The attacker may spoof the name in the
From header as well, so that the attacker’s From
header exactly matches the true user’s typical From
header.
DKIM and DMARC [2] block this impersonation
model by allowing domains to sign their sent
emails’ headers with a cryptographic signature,
which receiving servers can verify with a DNS-
based veriﬁcation key. In recent years, these pro-
tocols have seen increasingly widespread adoption,
with many large email providers, such as Gmail, de-
ploying them in response to the rise of phishing at-
tacks [4].
470    26th USENIX Security Symposium
USENIX Association
Previously Unseen Attacker“Enterprise X IT Staﬀ” Lateral Attacker“Alice Good”Name Spoofer“Alice Good” Address Spoofer“Alice”Real User“Alice Good”2. A name spoofer spoofs the name in their email’s
From header to exactly match the name of an
existing, trusted individual (e.g.,Alice Good in
Alice Good ).
How-
ever, in this impersonation model, the attacker does
not forge the email address of their From header,
relying instead on the recipient to only view the
name of the sender, or on the recipient’s mail client
to show only the name of the sender. By not spoof-
ing the From email address,
this impersonation
model circumvents DKIM/DMARC.
3. A previously unseen attacker selects a name and
email address to put
in the From ﬁeld of the
spearphishing email, where neither the name nor
the email address actually match a true user’s name
or email address (though they might be perceived
as trustworthy or similar to a real user’s identity).
For instance, Mallory might choose to spoof the
name LBNL IT Staff and the email address
.
4. A lateral attacker sends the spearphishing email
from a compromised user’s email account.
2.1.2 Exploit Payload
Once Mallory has gained Alice’s trust, she then needs to
exploit this trust by inducing Alice to perform some dan-
gerous action. Three types of exploitation are commonly
seen: (i) attachments or URLs that contain malware, (ii)
URLs leading to websites that attempt to trick Alice into
revealing her credentials, and (iii) out-of-band actions
(e.g., tricking a company’s CFO into wiring money to
a fake, malicious “corporate partner”).
2.2 Security Model
Threat Model: In this work, we speciﬁcally focus on an
enterprise credential spearphishing threat model, where
Mallory tries to fool a targeted enterprise’s user (Alice)
into revealing her credentials. We assume that the adver-
sary can send arbitrary emails to the victim and can con-
vince the recipient to click on URLs embedded in the ad-
versary’s email (leading the victim to a credential phish-
ing website). To impersonate a trusted entity, the attacker
may set any of the email header ﬁelds to arbitrary values.
In other words, we focus on attacks where Mallory’s
lure includes masquerading as a trusted entity, her pay-
load is a link to a credential phishing page, and she
chooses from any of the last three impersonation mod-
els. Because organizations can deploy DKIM/DMARC
to mitigate address spooﬁng (and many large email
providers have done so), we exclude address spooﬁng
from our work.
Security Goals: First, a detector must produce an ex-
tremely low false positive burden, ideally only 10 or so
Data Source
SMTP logs
NIDS logs
LDAP logs
Fields/Information per Entry
Timestamp
From (sender, as displayed to recipient)
RCPT TO (all recipients; from the SMTP dialog)
URL visited
SMTP log id for the earliest email with this URL
Earliest time this URL was visited in HTTP trafﬁc
# prior HTTP visits to this URL
# prior HTTP visits to any URL with this hostname
Clicked hostname (fully qualiﬁed domain of this URL)
Earliest time any URL with this hostname was visited
Employee’s email address
Time of current login
Time of subsequent login, if any
# total logins by this employee
# employees who have logged in from current login’s city
# prior logins by this employee from current login’s city
Table 1: Schema for each entry in our data sources. All sensi-
tive information is anonymized before we receive the logs. The
NIDS logs contain one entry for each visit to a URL seen in any
email. The LDAP logs contain one entry for each login where
an employee authenticated from an IP address that he/she has
never used in prior (successful) logins.
false alarms per day that take at most minutes for an in-
cident response team to process. Second, a detector must
detect real spearphishing attacks (true positives). Given
that current methods for detecting credential spearphish-
ing often rely on users to report an attack, if our ap-
proach can detect even a moderate number of true posi-
tives or identify undiscovered attacks, while achieving a
low false positive rate, then it already serves as a major
improvement to the current state of detection and mitiga-
tion.
3 Datasets
Our work draws on the SMTP logs, NIDS logs, and
LDAP logs from LBNL; several full-time security staff
members maintain these extensive, multi-year logs, as
well as a well-documented incident database of success-
ful attacks that we draw upon for our evaluation in Sec-
tion 6. For privacy reasons, before giving us access to
the data, staff members at LBNL anonymized all data
using the procedure described in each subsection below.
Additionally, our anonymized datasets do not contain the
contents of email bodies or webpages. Table 1 shows the
relevant information in these datasets and Table 2 sum-
marizes the size and timeframe of our data.
3.1 SMTP Logs
The SMTP logs contain anonymized SMTP headers for
all inbound and outbound emails during the Mar 1, 2013
– Jan 14, 2017 time period. These logs contain informa-
tion about all emails sent to and from the organization’s
employees (including emails between two employees),
a total of 372,530,595 emails. The second row of Ta-
ble 1 shows the relevant header information we receive
for each email in these logs.
USENIX Association
26th USENIX Security Symposium    471
The data was anonymized by applying a keyed hash
to each sensitive ﬁeld. Consider a header such as
Alice Good . The ‘name’
of a header is the human name (Alice Good in our
example); when no human name is present, we treat the
email address as the header’s ‘name’. The ‘address’ of
a header is the email address: .
Each name and each email address is separately hashed.
3.2 NIDS Logs
LBNL has a distributed network monitor (Bro) that logs
all HTTP GET and POST requests that traverse its bor-
ders. Each log entry records information about the re-
quest, including the full URL.
Additionally, the NIDS remembers all URLs seen in
the bodies of inbound and outbound emails at LBNL.1
Each time any URL embedded in an email gets visited as
the destination of an HTTP request, the NIDS will record
information about the request, including the URL that
was visited and the entry in the SMTP logs for the email
that contained the fetched URL. The NIDS remembers
URLs for at least one month after an email’s arrival; all
HTTP visits to a URL are matched to the earliest email
that contained the URL.
We received anonymized logs of all HTTP requests,
with a keyed hash applied to each separate ﬁeld. Also,
we received anonymized logs that identify each email