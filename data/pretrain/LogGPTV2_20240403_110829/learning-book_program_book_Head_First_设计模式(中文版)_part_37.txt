折表。
什么？
的所有方法吗？
也请记住，某些步骤是可选的，所以
答：
你可以将这些步骤实现成钩子，而不
合：
钧子有几种用法。如我
是的，每一个具体的子是实现成抽象方法，这祥就可以让抽
们之前所说的，钩子可以让子类实
类都必须定义所有的抽象方法，并为象类的子类的负荷减轻。
你现在的位置》2
295
---
## Page 332
好莱坞原则
好莱坞原则
你听不懂人话呀！我再告诉
你一次：别打电活给我，我会
我们有一个新的设计原则，称为好莱坞原则：
打电话给你！
D
好莱坞原则
别调用（打电话给）我们，我
们会调用（打电话给）你。
很容易记吧？但这和O0设计又有什么关系呢？
好莱坞原则可以给我们一种防止“依赖腐败”的方法。当
高层组件依赖低层组件，而低层组件又依赖高层组件，而
高层组件又依赖边侧组件，而边侧组件又依赖低层组件时，
依赖腐败就发生了。在这种情况下，没有人可以轻易地搞
懂系统是如何设计的。
在好莱坞原则之下，我们允许低层组件将自已挂钩到系统
上，但是高层组件会决定什么时候和怎样使用这些低层组
件。换句话说，高层组件对待低层组件的方式是“别调用
我们，我们会调用你”。
但是高层组件控制何时
高品组件
以及如何让低展组件参
与
低居组件可以参与
计算。
另一个低品
低昆组件
银件
低层组件绝对不可以直接调用
高居组件。
PDG
296
享8巢
---
## Page 333
模板方法模式
好莱坞原则和模板方法
好莱坞原则和模板方法之间的连接其实还算明显：当我们设计模板方法模式时，我们告诉子类，“不
要调用我们，我们会调用你”。怎样才能办到呢？让我们再看一次咖啡因饮料的设计：
CalieineBeverage是我们的高层组
饮科的客户代码只依赖
件，它能够控制冲泡法的算法，
CatseineBeverase抽象，而不
只有在需要子类实现某个方法时，
才调用子类。
依预具体的Tea或Cobsee，这
可以减少整个系统的依赖。
CaffeineBeverage
prepareRecipe()
boilWater()
pourlnCup()
brew[
addCondiments0
Coffee
Tea
brew)
addCondiments()
addCondiments()
Tea和Cossee如集没有光
被调用，绝对不全直接
这些子类只筒单用来提
调用抽象类。
供一些实现细节。
RAIN
POWER
还有哪些模式采用了好莱坞原则？
工厂方法、观察者、还有其他的模式吗？
你现在的位置
297
---
## Page 334
谁做什么
问：
于解耦，但是依赖倒置原则更加注重
好莱坞原则和依赖倒置
如何在设计中避免依赖。
低层组件不可以调用高
原则（第4章）之间的关系如何？
好莱坞原则教我们一个技巧，创建一
层组件中的方法吗？
答：
个有弹性的设计，允许低层结构能够
依赖倒置原则教我们尽
客：
互相操作，而又防止其他类太过依赖
并不尽然。事实上，低
量避免使用具体类，而多使用抽象。
它们。
层组件在结来时，常常会调用从超类
而好莱坞原则是用在创建框架或组件
中继承来的方法。我们所要做的是，
上的一种技巧，好让低层组件能够被
避免让高层和低层组件之间有明显的
挂钩进计算中，而且又不会让高层组
环状依赖。
件依赖低层组件。两者的目标都是在
将模式和叙述之间配对：
模式
叙述
封装可互换的行为，然后使
模板方法
用委托来决定要采用哪一个
行为
子类决定如何实现算法中的
策略
步骤
由子类决定实例化哪个具体
工厂方法
类
298
喜8巢
---
## Page 335
模板方法模式
荒野中的模板方法
模板方法模式是一个很常见的模式，到处都是。尽管如
此，你必须拥有一双锐利的眼睛，因为模板方法有许多实
现，而它们看起来并不一定和书上所讲的设计一致。
这个模式很常见是因为对创建框架来说，这个模式简直棒
极了。由框架控制如何做事情，而由你（使用这个框架的
人）指定框架算法中每个步骤的细节。
让我们步入荒野，展开狩猎吧！（好啦！荒野就是指Java
API)......
在训练中，我们研究了经典模式。
然而，当我们来到外面的真实世界时，
必须学会找出圆围的模式。我们也必须学会识别
模式的变体，因为在真实的世界中，正方形
并非总是毫厘不差。
你现在的位置
299
---
## Page 336
用模板方法排序
围模板方法排序
我们经常需要数组做什么事情？对了！排序。
为了便于解释，我们把代
Java数组类的设计者提供给我们一个方便的模板方法
码稍微简化了。如果你
用来排序。让我们看看这个方法如何运行：
想看完整的代码，就去看
Sun的源码....
这里其实有两个方法，共同提供排序的功能。
第一个方法sott（）只是一个助（helpet）方
法，用来创建一个数组的接见，然后将其传
递给mergeSort（）方法当作目标数组。同时传入
mergeSort（）的参数，还包括数组的长度、以及从
头（0）开始排序。
public static void sort(Object[] a)(
Object aux[] = (Object[])a.clone();
mergeSort(aux,a,0,a.length,0);
merseSort（）方法色含排序算法，此算法依赖子
compartTo(）方法的实现来完成算法。
private static void mergeSort(Object src[], Object dest[],
把这想成是一个模
int low,int high,int off)
板方法。
for (int i=low;ilow &6
((Comparable) dest[j-1]).compareTo((Comparable)dest(j])>0; j--
swap(dest, j，j-1）;
个
return;
这是一个具体方法，已经在数组
我们第要实现compateTo（）方
类中定义了。
法，“填补”模板方法的缺德。
300
第8章
---
## Page 337
模板方法模式
来排序鸭子吧····
假如我们有一个鸭子的数组需要排序，你要怎么做？数组的排序模板
方法已经提供了算法，但是你必须让这个模板方法知道如何比较鸭子。
你所要做的事情就是，实现一个compareTo（）方法.....听起来有道理
吧？
不，听起来没有递理。我
们不是应该要继承什么东
等着被排序的鸭子数
西吗？我认为这才是模板方法的关键
组
所在。数组无法继承，所以我不知递要
如何使用sort()。
很好的观点！事情是这样的：sortO的设计者希望这个方法能使
用于所有的数组，所以他们把sort(O变成是静态的方法，这样一
来，任何数组都可以使用这个方法。但是没关系，它使用起来
和它被定义在超类中是一样的。现在，还有一个细节要告诉你：
因为sortO并不是真正定义在超类中，所以sortO方法需要知道你
已经实现了这个compartToO方法，否则就无法进行排序。
要达到这一点，设计者利用了Comparable接口。你须实现这个
接口，提供这个接口所声明的方法，也就是compareTo（。
什么是compareTo()？
这个compareTo（）方法将比较两个对象，然后返回其中一个是大于、等于还是小于另一个。
sortO只要能够知道两个对象的大小，当然就可以进行排序。
不知道，我们问
我是不是比
。。
compareTo（)!
你大？
你现在的位置
301
---
## Page 338
实现comparable接口
比较鸭子
好了，现在你知道了如果要排序鸭子，就必须实
现这个compareTo(方法：然后，数组就可以被正
常地排序了。
鸭子的实现如下：
请记住，我们需要让聘子类实现
Comparable接口，因为我们无法真的让
鸭子数组去继承数组。
public class Duck implements Comparable {
String name;
int weight;
鸭子有名字和体重。
public Duck(String name, int weight) (
this.name = name;
this.weight = weight;
尽量让这里简单：只打印出名字和
public String toString()(
体重。
return name +" weighs "+ weight;
1
好了，这就是排序所要用的……
public int compareTo(Object object) {
compateTo（）需要被传入另一只聘子，和本身这只
Duck otherDuck =(Duck)object
鸭子做比较。
if (this.weight otherDuck.weight
return 1;
就返回0：如果这只鸭子的体重较重
就返回1。
302
喜8巢
---
## Page 339
模板方法模式
让我们排序一些鸭子
这是测试排序鸭子的程序
public class DuckSortTestDrive {
public static void main(String[] args) {
Duck[] ducks ={
new Duck("Daffy", 8),
new Duck("Dewey", 2),
new Duck("Howard", 7),
我们需要一个降子数组：
new Duck("Louie", 2),
这些看起来不错。
new Duck ("Donald", 10),
new Duck("Huey",2)
请注意，我们调用
Aray类的静态方法
System.out.println("Before sorting:");
将它们打印出来，看鸭子
sort().然后将鸭子数
display (ducks) ;
们的名字和体重。
组当作参数传入。
Arrays.sort (ducks);
开始排序了！
System.out.println("\nAfter sorting:");
display(ducks);
再将它们打印出来，看鸭子们的
名字和体重。
public static void display(Duck[] ducks) {
for (int i = 0;i< ducks.length; i++){
System.out .println (ducks [i]);
执行结果！
java DuckSortTestDrive
Before sorting:
weighs2
还没排序的鸭子
Louie weighs2
Donald weighs 10
Huey weighs 2
After sorting:
ey weighs2
Louie
eighs 2
已经排序的子
Howard weighs 7
Daffy weighs 8
Donald weighs 10
你现在的位置
303
---
## Page 340
幕后花絮：排序鸭子
观察鸭子排序的内部工作
幕后
让我们追踪Array类的sort(）模板方法的工作过程。我们会看到
花絮
模板方法是如何控制算法的，以及在算法中的某些点上它是如
何要求我们的鸭子提供某个步骤的实现的.
for (int i=low; i<high; i++) {
...compareTo()...
...swap()...
首先，我们需要一个鸭子数组：
Duck[] ducks ={new Duck("Daffy", 8)，...};
sort(方法控制算法，没
然后调用Array类的sortO模板方法，并传入鸭子数
有类可以改变这一点。
组：
sort（）依赖一个Compazable类
Arrays.sort(ducks);
提供compateTo（）的实现。
这个sortO方法（和它的helpermergeSortO）控制排
序过程。
想要排序一个数组，你需要一次又一次地比较两个项目，
直到整个数组都排序完毕。
当比较两只鸭子的时候，排序方法需要依赖鸭子的
compareTo()方法，以得知谁大谁小。第一只鸭子的
compareTo（方法被调用，并传入另一只鸭子当成比较对
象：
Duck
ducks[0].compareTo(ducks [1]) ;
compareTo()
toStringo
个这里不使用继
第一只鸭子
比较对象
承，不像典型的
如果鸭子的次序不对，就用Array的具体swap(O方法将两
模板方法。
者对调：
Arrays
swap ()
sort()
swap)
排序方法会持续比较并对调鸭子，直到整个数组的次序
是正确的！