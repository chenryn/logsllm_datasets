letters, representing the name.
---
## Page 710
1 or more digits representing the count of that element may follow if the count is greater than 1.
If the count is 1, no dligits will follow. For example, H2O and H2O2 are possible, but H1O2 is
impossible.
Two formulas concatenated together produce another formula. For example, H2O2He3Mg4 is
also a formula.
A formula placed in parentheses, and a count (optionally added) is also a formula. For example,
(H2O2) and (H2O2)3 are formulas.
Given a formula, output the count of all elements as a string in the following form: the first name
(in sorted order), followed by its count (if that count is more than 1), followed by the second
name (in sorted order), followed by its count (if that count is more than 1), and so on.
Example 1:
Input:
formula = "H2o"
OZH,:4ndno
Explanation:
The count of elements are {'H': 2, ‘o': 1}.
Example 2:
Input:
formu1a = "Mg(OH) 2"
.obwZH,:andano
Explanation:
The count of elements are {'H': 2,‘mg': 1,'o': 2}
Example 3:
Input:
formu1a = “K4(oN(S03)2)2"
Output:“K4N2o14S4"
Exp1anation:
The count of elements are {'k': 4, 'n': 2, 'o': 14, 's': 4}.
Note:
● All atom names consist of lowercase letters, except for the first character which is
uppercase.
● The length of formula will be in the range [1, 10oo] -
● formuTa will only consist of letters, digits, and round parentheses, and is a valid formula as
defined in the problem.
题目大意
---
## Page 711
给定一个化学式，输出所有原子的数量。格式为：第一个（按字典序）原子的名子，跟着它的数量（如
果数量大于1），然后是第二个原子的名字（按字典序），跟着它的数量（如果数量大于1），以此类
推。
原子总是以一个大写字母开始，接着跟随0个或任意个小写字母，表示原子的名字。如果数量大于1，
原子后会跟着数字表示原子的数量。如果数量等于1则不会跟数字。例如，H2O和H2O2是可行的，
但H1O2这个表达是不可行的。两个化学式连在一起是新的化学式。例如H2O2He3Mg4也是化学式。
一个括号中的化学式和数字（可选择性添加）也是化学式。例如（H2O2）和（H2O2)3是化学式。
解题思路
·利用栈处理每个化学元素，用map记录每个化学元素的个数，最终排序以后输出即可
·注意化学元素有些并不是单一字母，比如镁元素是Mg，所以需要考虑字母的大小写问题。
代码
package leetcode
import(
"sort"
"strconv"
"strings"
type atom struct{
name string
type atoms []atom
func (this atoms) LenO int
{return len（this）}
func (this atoms) Less(i, j int) bool { return strings.Compare(this[i].name,
this[j].name)  1 {
S += strconv.Itoa(a.cnt)
return s
---
## Page 712
func countofAtoms(s string) string {
n := len(s)
if n == 0 {
return ""*
stack := make([]string, 0)
for i := 0; i ='0&&v='A&&v='a&&v curr.start && curr.end > e.start {
return false
if curr.start = end {
//
this.calendar = append(this.calendar, Interval{Start: start, End: end})
//
return true
//
//
//如果元素比开头的元素还要小，要插入到开头
//
if this.calendar[o].Start >= end {
//
this.calendar = append(this.calendar, Interval{Start: start, End: end})
//
return true
//
//
return false
//}
// func searchLastlessInterval(intervals []Interval, start, end int) int {
//
low,high := 0,len(intervals)-1
for low > 1)
//
if intervals[mid].Start  start) {//
找到最后一个小于等于target的元素
//
return mid
//
//
1ow = mid + 1
//
}else{
//
high = mid - 1
//
1
//
return -1
//}
/**
* Your Mycalendar object will be instantiated and called as such:
obj ：= ConstructorO;
* param_1 := obj.Book(start,end) ;
*
732.MyCalendarl
题目
pe aq see e ja ma  saaa no aos o s aauepa  e saaldl
Your class will have one method, book(int start, int end) . Formally, this represents a
booking on the half open interval [start, end] , the range of real numbers x such that start
pua > x =>
---
## Page 718
A K-booking happens when K events have some non-empty intersection (ie., there is some time
that is common to all K events.)
integer such that there exists a K -booking in the calendar.
Your class will be called like this:
MyCalendarThree ca1 = new MyCalendarThree() ;
MyCalendarThree.book(start, end)
Example 1:
MyCalendarThree () ;
MyCalendarThree.book(10, 20) : // returns 1
MyCalendarThree.book(50, 60) : // returns 1
MyCalendarThree.book(10, 40) ; // returns 2
MyCalendarThree.book(5, 15) ; // returns 3
MyCalendarThree.book(5, 10); // returns 3
MyCalendarThree.book(25, 55) : // returns 3
Explanation:
The first two events can be booked and are disjoint, so the maximum K-booking
is a 1-booking.
The third event [10, 40) intersects the first event, and the maximum K-booking
is a 2-booking.
The remaining events cause the maximum K-booking to be only a 3-booking.
Note that the last event locally causes a 2-booking, but the answer is stil1 3
because
eg. [10, 20), [10, 40), and [5, 15) are sti11 triple booked.
Note:
●The number of calls to MyCalendarThree.book per test case will be at most 400
●In calls to MyCalendarThree.book(start, end) , start and end are integers in the range
[0, 10∧9].
题目大意
实现一个MyCalendar类来存放你的日程安排，你可以一直添加新的日程安排。
MyCalendar有一个book(int start,int end)方法。它意味着在start到end时间内增加一个日程安排，
注意，这里的时间是半开区间，即[start,end),实数x的范围为，start<=x<end。当K个日程安排
有一些时间上的交叉时（例如K个日程安排都在同一时间内），就会产生K次预订。每次调用
MyCalendar.book方法时，返回一个整数K，表示最大的K次预订。
请按照以下步骤调用MyCalendar 类: MyCalendar cal = new MyCalendarQ; MyCalendar.book(start,
(pua
说明：