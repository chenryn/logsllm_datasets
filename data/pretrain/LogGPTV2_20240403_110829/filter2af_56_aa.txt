> 本文是翻译文章，原文链接： remote-attack-surface-of.html>
>
> 原文名：The Fully Remote Attack Surface of the iPhone
虽然过去几年里有一些关于iPhone被攻击者使用的 **完全远程漏洞(fully remote vulnerabilities)**
的谣言和报道，但有关这些漏洞的技术细节以及它们发生的潜在攻击面的信息有限，我调查了iPhone的远程、无交互攻击面，并发现了几个严重的漏洞
当攻击者不需要任何物理或网络接近目标以便能够利用此漏洞时，漏洞被视为`远程`。远程漏洞被描述为`完全远程`，`无交互`或`零点击`，它们不需要来自目标的任何物理交互，并且实时工作。我专注于远程访问iPhone的攻击面，不需要任何用户交互并立即处理输入
iPhone有几个具有这些特点的攻击面，包括`SMS,MMS,VVM,Email和Message`
# SMS(短信)
短信似乎是一个很好的切入点，因为我在[过去](https://googleprojectzero.blogspot.com/2019/03/android-messaging-few-bugs-short-of.html)研究过短信在Android上的攻击面。与Android不同，iPhone的本地代码处理SMS消息，这增加了出现内存破坏类漏洞的可能性。`SMS数据包数据单元(PDU)`由二进制文件`CommCenter`使用方法`sms::Controller::parseRawBytes`进行解析，该方法创建包含消息详细信息的类`sms::Model`，该实例最终被`sms::Controller::processReceivedSms_sync`处理，它还处理一些其它内容并将消息发送到对应的其他进程。我分析了这两种方法，但是没有发现任何漏洞。
我还注意到`CommCenter`包含一个可以通过`XPC`触发的SMS模拟器，此工具处理SMS传送PDU，就像它们通过网络到达一样。模拟器缺少一些库，这些库可能存在于内部测试设备上。因此我自己编写了一个库，它实现了使模拟器工作所需的功能。此工具可在[此处获得](https://github.com/googleprojectzero/iOS-messaging-tools/tree/master/SmsSimulator)，使用该工具对短信进行fuzz并未发现任何漏洞。
# MMS
MMS消息也由`CommCenter`处理，大部分处理在`MmsOperation::decodeMessage`方法中执行。我使用IDA审查了这个方法，并通过编写在iOS中调用此方法的app来fuzz它，但是也都没有发现任何漏洞
# Visual Voicemail(可视语音邮件)
在查看`sms::Controller::processReceivedSms_sync`方法时，我注意到此方法将许多特殊格式的SMS消息转发到其它进程，一个看起来很有趣的地方是`Visual
Voicemail(VVM)`，我[之前](https://googleprojectzero.blogspot.com/2019/03/android-messaging-few-bugs-short-of.html)在Android上已经回顾过，`VVM`是一种允许以与电子邮件显示方式类似的可视格式查看语音邮件的功能
VVM通过从设备运营商维护的IMAP服务器获取语音邮件来工作，它的服务器URL和credentials(凭证)由运营商通过SMS提供给设备。iPhone使用与公开的格式不同的[VVM
SMS消息格式](http://www.omtp.org/OMTP_VVM_Specification_v1_3_Final.pdf)，因此我通过在接收SMS
PDU的CommCenter中放置断点来确定传入VVM SMS的内容，以下是传入VVM消息的示例：
    STATE?state=Active;server=vvm.att.com;port=143;pw=asdf;name=PI:EMAIL
我把Android设备设置成发送原始PDU，并尝试用它发送该消息，发现日志显示已对服务器进行了其它查询。我尝试将默认服务器更改为我控制的服务器，经过多次尝试，我能够发送更改目标设备的VVM服务器的消息，但有以下限制：
  * 必须在设备上配置VVM
  * 必须将SMS的PID字段设置为目标设备的载波的VVM值(如果你有来自该载波的SIM卡，则可以轻松确定，但每个载波的SIM卡不同)
  * 有些运营商阻止VVM IMAP请求到外部服务器，在这种情况下，这对远程运营商不起作用。攻击者可能使用目标设备附近的基站绕过它，但是我没有尝试这一攻击
对于大多数运营商来说，这足以让VVM
IMAP成为可行的攻击面，我认为它很可能包含错误，因为VVM使用与iOS上电子邮件相同的IMAP库。IMAP服务器通常可以抵御来自不受信任的电子邮件客户端的攻击，因为恶意客户端通常会攻击服务器以尝试访问其他用户的电子邮件。然而，客户端连接到恶意服务器的情况要少得多，因为用户需要手动输入这些服务器，并且通常只会输入他们信任的服务器。
这意味着从服务器的角度来看，服务器到客户端的这一攻击面可能不是很有效，因为它不是一个真正的攻击面。VVM对此进行了更改，因为它允许设备在没有用户交互的情况下连接到恶意IMAP服务器。
我用IDA查看了IMAP库，但仍然没有发现任何问题。我接下来尝试fuzz，
我写了一个假的IMAP服务器，它返回了对每个请求的错误响应，并使用其中的SMS模拟器不断发送`VVM SMS`消息，让设备请求服务器响应。
我用这个方式发现了一个漏洞`CVE-2019-8613`。 此漏洞是由于错误处理`NAMESPACE IMAP`命令而导致的`NSString UAF`。
当IMAP服务器建立连接时，它首先向客户端发送`LIST`命令以获取邮箱分隔符字符串，然后发送`NAMESPACE`命令以获取邮箱前缀。在iOS
IMAP实现中，如果服务器遇到错误，则free分隔符字符串，但调用`NAMESPACE`命令的代码不会检查命令是否成功，因此即使已经free分隔符，它也会继续。
> 译者注：`CVE-2019-8613`
> 
# Email
查看IMAP实现，我注意到`MIME`中有几个代码路径未被`VVM`使用，但在处理消息时由电子邮件客户端使用。其中有一个具有明显且不寻常的问题。
方法`[MFMimePart
_contents:toOffset:resultOffset:downloadIfNecessary:asHTML:isComplete:]`处理传入的`MIME`消息，并根据`MIME类型`将它们发送到特定的解码器。不幸的是，它是通过将传入消息中的MIME类型字符串追加到字符串"decode"并调用结果方法来实现。这意味着可能会调用非预期的选择器，从而导致内存损坏。
我在`iOS 11.3.1`版本中发现了这个漏洞，但由于调用的非预期的选择器的功能发生了变化，因此在iOS
12中显然无法利用，这些变化似乎与安全无关。但此问题仍然可能导致crash，并且已解决为`CVE-2019-8626`。
> 译者注：`CVE-2019-8626` 
虽然电子邮件是iPhone的潜在的远程攻击面，但目前还不清楚它有多严重。首先，一些用户安装第三方客户端而不是使用本机电子邮件客户端，一些电子邮件提供商还会
**过滤传入的邮件** 并 **删除 触发漏洞所需的格式错误 的MIME组件**
。虽然上述错误适用于在本机电子邮件客户端上登录的Gmail，但目前尚不清楚此配置的常见程度，或者提供商过滤是否可能是导致类似错误的问题。
# iMessage
`iMessage`是iOS和Mac设备上的 **本机消息传递客户端**
。它支持使用各种格式选项发送和接收消息，还支持扩展，允许设备发送和接收自定义消息类型。扩展可以由Apple或第三方编写。SamuelGroß和我分析了默认安装在iPhone上的iMessage及其扩展。  
为了开始这个项目，Samuel编写了可以在Mac上发送和转储iMessage消息的工具。它们通过`hook
iMessage中的代码`来工作，该代码使用`Frida`发送或接收消息，并且在转储的情况下将消息写入控制台，或者在发送的情况下将其替换为不同的消息。以下是使用这些工具转储的示例消息。
    to: mailto:PI:EMAIL
    from: tel:+15556667777
    {
        gid = "FAA29682-27A6-498D-8170-CC92F2077441";
        gv = 8;
        p = (
            "tel:+15556667777",
            "mailto:PI:EMAIL"
        );
        pv = 0;
        r = "68DF1E20-9ABB-4413-B86B-02E6E6EB9DCF";
        t = "Hello World";
        v = 1;
    }
它是一个包含多个字段的二进制plist。以下是其中有趣的部分：
**t** | **Plain text message content**  
---|---  
**x** | **XML message content**  
**bid** | **“Balloon identifier” for plugin**  
**bp** | **Plugin data**  
**ati** | **Attribution info**  
**p** | **Participants**  
我们注意到其中几个字段包含使用`NSKeyedUnarchiver`类进行反序列化的二进制数据（字段也可以选择使用gzip压缩。为了解决这个问题，我们编写了一个程序，调用`[NSData
_FTOptionallyDecompressData]`在Mac命令行上解压缩它们）
具体来说， **bp** 字段在SpringBoard中被反序列化以用于通知，这使得反序列化成为一个完全远程的攻击面。`SpringBoard`在iOS上也
**没有任何沙盒** 。此字段也由`MobileSMS`反序列化，但这需要单击一次。 **ATI**
字段也在`imagent`过程中解码，并且不需要用户交互，虽然它相对于`bp`字段在解码时更严格。  
`NSKeyedArchiver`序列化以`plist`格式对`NSObject`实例进行编码。下面是包含`NSURL实例的序列化对象的示例部分。