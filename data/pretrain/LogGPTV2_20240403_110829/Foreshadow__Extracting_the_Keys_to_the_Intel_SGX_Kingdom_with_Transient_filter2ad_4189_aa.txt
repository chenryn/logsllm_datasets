title:Foreshadow: Extracting the Keys to the Intel SGX Kingdom with Transient
Out-of-Order Execution
author:Jo Van Bulck and
Marina Minkin and
Ofir Weisse and
Daniel Genkin and
Baris Kasikci and
Frank Piessens and
Mark Silberstein and
Thomas F. Wenisch and
Yuval Yarom and
Raoul Strackx
Foreshadow: Extracting the Keys to the Intel SGX 
Kingdom with Transient Out-of-Order Execution
Jo Van Bulck, imec-DistriNet, KU Leuven; Marina Minkin, Technion; Ofir Weisse,  
Daniel Genkin, and Baris Kasikci, University of Michigan; Frank Piessens, imec-DistriNet,  
KU Leuven; Mark Silberstein, Technion; Thomas F. Wenisch, University of Michigan;  
Yuval Yarom, University of Adelaide and Data61; Raoul Strackx, imec-DistriNet, KU Leuven
https://www.usenix.org/conference/usenixsecurity18/presentation/bulck
This paper is included in the Proceedings of the 
27th USENIX Security Symposium.
August 15–17, 2018 • Baltimore, MD, USA
ISBN 978-1-939133-04-5
Open access to the Proceedings of the 27th USENIX Security Symposium is sponsored by USENIX.FORESHADOW: Extracting the Keys to the Intel SGX Kingdom with
Transient Out-of-Order Execution
Jo Van Bulck1, Marina Minkin2, Oﬁr Weisse3, Daniel Genkin3, Baris Kasikci3, Frank Piessens1,
Mark Silberstein2, Thomas F. Wenisch3, Yuval Yarom4, and Raoul Strackx1
1imec-DistriNet, KU Leuven, 2Technion, 3University of Michigan, 4University of Adelaide and
Data61
Abstract
Trusted execution environments, and particularly the Soft-
ware Guard eXtensions (SGX) included in recent Intel
x86 processors, gained signiﬁcant traction in recent years.
A long track of research papers, and increasingly also real-
world industry applications, take advantage of the strong
hardware-enforced conﬁdentiality and integrity guaran-
tees provided by Intel SGX. Ultimately, enclaved execu-
tion holds the compelling potential of securely ofﬂoading
sensitive computations to untrusted remote platforms.
We present Foreshadow, a practical software-only mi-
croarchitectural attack that decisively dismantles the se-
curity objectives of current SGX implementations. Cru-
cially, unlike previous SGX attacks, we do not make any
assumptions on the victim enclave’s code and do not
necessarily require kernel-level access. At its core, Fore-
shadow abuses a speculative execution bug in modern
Intel processors, on top of which we develop a novel ex-
ploitation methodology to reliably leak plaintext enclave
secrets from the CPU cache. We demonstrate our attacks
by extracting full cryptographic keys from Intel’s vetted
architectural enclaves, and validate their correctness by
launching rogue production enclaves and forging arbitrary
local and remote attestation responses. The extracted re-
mote attestation keys affect millions of devices.
1
Introduction
It becomes inherently difﬁcult to place trust in modern,
widely used operating systems and applications whose
sizes can easily reach millions of lines of code, and where
a single vulnerability can often lead to a complete collapse
of all security guarantees. In response to these challenges,
recent research [11,41,48] and industry efforts [1,2,35,43]
developed Trusted Execution Environments (TEEs) that
feature an alternative, non-hierarchical protection model
for isolated application compartments called enclaves.
TEEs enforce the conﬁdentiality and integrity of mutually
distrusting enclaves with a minimal Trusted Computing
Base (TCB) that includes only the processor package and
microcode. Enclave-private CPU and memory state is
exclusively accessible to the code running inside it, and
remains explicitly out of reach of all other enclaves and
software running at any privilege level, including a po-
tentially malicious operating system and/or hypervisor.
Besides strong memory isolation, TEEs typically offer an
attestation primitive that allows local or remote stakehold-
ers to cryptographically verify at runtime that a speciﬁc
enclave has been loaded on a genuine (and hence pre-
sumed to be secure) TEE processor.
With the announcement of Intel’s Software Guard eX-
tensions (SGX) [2, 27, 43] in 2013, hardware-enforced
TEE isolation and attestation guarantees are now available
on off-the-shelf x86 processors. In light of the strong se-
curity guarantees promised by Intel SGX, industry actors
are increasingly adopting this technology in a wide variety
of applications featuring secure execution on adversary-
controlled machines. Open Whisper Systems [50] re-
lies on SGX for privacy-friendly contact discovery in its
Signal network. Both Microsoft and IBM recently an-
nounced support for SGX in their cloud infrastructure.
Various off-the-shelf Blu-ray players and initially also the
4K Netﬂix client furthermore use SGX to enforce Digi-
tal Rights Management (DRM) for high-resolution video
streams. Emerging cryptocurrencies [44] and innovative
blockchain technologies [25] rely even more critically on
the correctness of Intel SGX.
Our Contribution. This paper shows, however, that
current SGX implementations cannot meet their security
objectives. We present the Foreshadow attack, which
leverages a speculative execution bug in recent Intel x86
processors to reliably leak plaintext enclave secrets from
the CPU cache. At its core, Foreshadow abuses the same
processor vulnerability as the recently announced Melt-
down [40] attack, i.e., a delicate race condition in the
CPU’s access control logic that allows an attacker to use
USENIX Association
27th USENIX Security Symposium    991
the results of unauthorized memory accesses in transient
out-of-order instructions before they are rolled back. Im-
portantly, however, whereas Meltdown targets traditional
hierarchical protection domains, Foreshadow considers
a very different attacker model where the adversary’s
goal is not to read kernel memory from user space, but
to compromise state-of-the-art intra-address space en-
clave protection domains that are not covered by recently
deployed kernel page table isolation defenses [19]. We
explain how Foreshadow necessitates a novel exploitation
methodology, and we show that our basic attack can be en-
tirely mounted by an unprivileged adversary without root
access to the victim machine. Given SGX’s unique privi-
leged attacker model, however, we additionally contribute
a set of optional kernel-level optimization techniques to
further reduce noise for root adversaries. Our ﬁndings
have far-reaching consequences for the security model
pursued by Intel SGX in that, in the absence of a mi-
crocode patch, current SGX processors cannot guarantee
the conﬁdentiality of enclaved data nor attest the integrity
of enclaved execution, including for Intel’s own archi-
tectural enclaves. Moreover, despite SGX’s ambition to
defend against strong kernel-level adversaries, present
SGX processors cannot even safeguard enclave secrets in
the presence of unprivileged user space attackers.
All previously known attacks against Intel SGX rely on
application-speciﬁc information leakage from either side-
channels [30, 39, 45, 51, 57, 58, 60] or software vulnerabil-
ities [38, 59]. It was generally believed that well-written
enclaves could prevent information leakage by adhering
to good coding practices, such as never branching on
secrets, prompting Intel to state that “in general, these
research papers do not demonstrate anything new or unex-
pected about the Intel SGX architecture. Preventing side
channel attacks is a matter for the enclave developer” [33].
Foreshadow defeats this argument, however, as it relies
solely on elementary Intel x86 CPU behavior and does not
exploit any software vulnerability, or even require knowl-
edge of the victim enclave’s source code. We demonstrate
this point by being the ﬁrst to actually extract long-term
platform launch and attestation keys from Intel’s critical
and thoroughly vetted architectural launch and quoting en-
claves, decisively dismantling SGX’s security objectives.
In summary, our contributions are:
• We evaluate the effectiveness and bandwidth of the
Foreshadow attack through controlled experiments.
• We extract full cryptographic keys from Intel’s archi-
tectural enclaves, and demonstrate how to (i) bypass
enclave launch control; and (ii) forge local and re-
mote attestations to completely break conﬁdentiality
plus integrity guarantees for remote computations.
Current Status. Following responsible disclosure prac-
tices, we notiﬁed Intel about our attacks in January
2018. Intel acknowledged the novelty and severity of
Foreshadow-type “L1 Terminal Fault” attacks, and as-
signed CVE-2018-3615 to the results described in this
paper. We were further indicated that our attacks affect all
SGX-enabled Core processors, while some Atom family
processors with SGX support allegedly remain unaffected.
At the time of this writing, Intel assigned CVSS severity
ratings of “high” and “low” for respectively conﬁdential-
ity and integrity. We note, however, that Foreshadow also
affects the integrity of enclaved computations, since our
attacks can arbitrarily modify sealed storage, and forge
local and remote attestation responses.
Intel conﬁrmed that microcode patches are underway
and should be deployed concurrently to the public re-
lease of our results. As of this writing, however, we have
not been provided with substantial technical information
about these mitigations. We discuss defense strategies in
Section 6, and provide further guidelines on the impact
of our ﬁndings at https://foreshadowattack.eu/.
Disclosure. Foreshadow was independently and concur-
rently discovered by two teams. The KU Leuven authors
discovered the vulnerability, independently developed the
attack, and ﬁrst notiﬁed Intel on January 3, 2018. Their
work was done independently from and concurrently to
other recent x86 speculative execution vulnerabilities, no-
tably Meltdown and Spectre [36, 40]. The authors from
Technion, University of Michigan, and the University
of Adelaide independently discovered and reported the
vulnerability to Intel during the embargo period on Jan-
uary 23, 2018.
2 Background
• We advance the understanding of Meltdown-type
transient execution CPU vulnerabilities by showing
that they also apply to intra-address space isolation
and SGX’s non-terminating abort page semantics.
We ﬁrst overview Intel SGX [2, 10, 27, 43] and reﬁne
the attacker model. Thereafter, we introduce the relevant
parts of the x86 microarchitecture, and discuss previous
research results on speculative execution vulnerabilities.
• We present novel exploitation methodologies that
allow an unprivileged software-only attacker to re-
liably extract enclave secrets residing in either pro-
tected memory locations or CPU registers.
Intel SGX
2.1
Memory Isolation. SGX enclaves live in the virtual
address space of a conventional user mode process, but
992    27th USENIX Security Symposium
USENIX Association
their physical memory isolation is strictly enforced in
hardware. This separation of responsibilities ensures that
enclave-private memory can never be accessed from out-
side, while untrusted system software remains in charge
of enclave memory management (i.e., allocation, eviction,
and mapping of pages). An SGX-enabled CPU further-
more veriﬁes the untrusted address translation process,
and may signal a page fault when traversing the untrusted
page tables, or when encountering rogue enclave memory
mappings. Subsequent address translations are cached
in the processor’s Translation Lookaside Buffer (TLB),
which is ﬂushed whenever the enclave is entered/exited.
Any attempt to directly access private pages from outside
the enclave, on the other hand, results in abort page se-
mantics: reads return the value -1 and writes are ignored.
SGX furthermore protects enclaves against motivated
adversaries that exploit Rowhammer DRAM bugs, or
resort to physical cold boot attacks. A hardware-level
Memory Encryption Engine (MEE) [21] transparently
safeguards the integrity, conﬁdentiality, and freshness
of enclaved code and data while residing outside of the
processor package. That is, any access to main memory
is ﬁrst authenticated and decrypted before being brought
as plaintext into the CPU cache.
Enclaves can only be entered through a few predeﬁned
entry points. The eenter and eexit instructions trans-
fer control between the untrusted host application and an
enclave. In case of a fault or external interrupt, the pro-
cessor executes the Asynchronous Enclave Exit (AEX)
procedure, which securely stores CPU register contents
in a preallocated State Save Area (SSA) at an established
location inside the interrupted enclave. AEX furthermore
takes care of clearing CPU registers before transferring
control to the untrusted operating system. A dedicated
eresume instruction allows the unprotected application
to re-enter a previously interrupted enclave, and restore
the previously saved processor state from the SSA frame.
Enclave Measurement. While an enclave is being built
by untrusted system software, the processor composes a
secure hash of the enclave’s initial code and data. Be-
sides this content-based identity (MRENCLAVE), each
enclave also features an alternative, author-based iden-
tity (MRSIGNER) which includes a hash of the enclave
developer’s public key and version information. Upon
enclave initialization, and before it can be entered, the
processor veriﬁes the enclave’s signature and stores both
MRENCLAVE and MRSIGNER measurements at a secure
location, inaccessible to software — even from within the
enclave. This ensures that an enclave’s initial measure-
ment is unforgeable, and can be attested to other parties,
or used to access sealed secrets.
Each SGX-enabled processor is shipped with a plat-
form master secret stored deep within the processor and
exclusively accessible to key derivation hardware. To
allow for TCB upgrades, and to protect against key wear-
out, each key derivation request always takes into account
the current CPU security version number and a random
KEYID. Enclaves can make use of the key derivation
facility by means of two SGX instructions: ereport
and egetkey. The former creates a tagged local attes-
tation report (including MRENCLAVE/MRSIGNER plus
application-speciﬁc data) destined for another enclave.
The target enclave, residing on the same platform, can
use the egetkey instruction to derive a “report key” that
can be used to verify the local attestation report. Success-
ful veriﬁcation effectively binds the application data to
the reporting enclave, with a speciﬁed identity, which is
executing untampered on the same platform. A secure,
mutually authenticated cryptographic channel can be es-
tablished by means of an application-level protocol that
leverages the above local attestation hardware primitives.
Likewise, enclaves can invoke egetkey to gener-
ate “sealing keys” based on either the calling enclave’s
content-based or developer-based identity. Such sealing
keys can be used to securely store persistent data outside
the enclave, for later use by either the exact same enclave
(MRENCLAVE) or the same developer (MRSIGNER).
Architectural Enclaves. As certain policies are too
complex to realize in hardware, some key SGX aspects are
themselves implemented as Intel-signed enclaves. Spe-
ciﬁcally, Intel provides (i) a launch enclave that gets to
decide which other enclaves can be run on the platform,
(ii) a provisioning enclave to initially supply the long-term
platform attestation key, and (iii) a quoting enclave that
uses the asymmetric platform attestation key to sign local
attestation reports for a remote stakeholder.
To regulate enclave development, Intel SGX distin-
guishes debug and production enclaves at creation time.
The internal state of the former can be arbitrarily inspected
and altered by means of dedicated debug instructions,
such that only production enclaves boast SGX’s full con-
ﬁdentiality and integrity commitment.
2.2 Attack Model and Objectives
Adversary Capabilities. Whereas most existing SGX
attacks require the full potential of a kernel-level attacker,
we show that the basic Foreshadow attack can be entirely
mounted from user space. Our attack essentially implies
that current SGX implementations cannot even protect en-
clave secrets from unprivileged adversaries, for instance
co-residing cloud tenants. Additionally, to further im-
prove the success rate of our attack for root adversaries,
we contribute various optional noise-reduction techniques
that exploit full control over the untrusted operating sys-
tem, in line with SGX’s privileged attacker model.