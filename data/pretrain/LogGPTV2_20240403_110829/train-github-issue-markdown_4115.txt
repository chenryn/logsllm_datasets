Certainly! Here is a more polished and professional version of the text:

---

Currently, operations between tensors of different data types (dtypes) are not supported. However, we should consider changing this behavior to align with the conventions used in NumPy, where such operations would return a floating-point tensor.

For example, in the current implementation:
```python
import torch

a = torch.tensor([1, 2, 3], dtype=torch.long)
b = torch.tensor([3, 2, 1], dtype=torch.long)

result = a / b
print(result)
```
The output is:
```
tensor([0, 1, 3], dtype=torch.int64)
```

In contrast, if we were to follow NumPy's behavior, the result would be a floating-point tensor:
```python
import numpy as np

a = np.array([1, 2, 3], dtype=np.int64)
b = np.array([3, 2, 1], dtype=np.int64)

result = a / b
print(result)
```
The output would be:
```
array([0.33333333, 1.        , 3.        ])
```

By adopting this approach, we can provide more consistent and expected results for users who are familiar with NumPy's behavior.

---