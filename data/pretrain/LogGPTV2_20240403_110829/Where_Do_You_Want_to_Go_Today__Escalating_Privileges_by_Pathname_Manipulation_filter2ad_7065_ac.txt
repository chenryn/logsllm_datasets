hypothetical name resolution does not resolve to the (cid:2)le F
(or else it would be a U-safe name for F , contradicting our
assumption (b)). But it is easy to show (by induction) that
the same directories will be visited also in the actual name
resolution, all of them would be in exactly the same state,
and therefore also the actual name resolution as done by
safe-open would not be resolved to F .
then,
Assume,
that the hypothetical name resolution
would visit some unsafe directories, and let dir0 be the
(cid:2)rst U-unsafe directory to be visited. The same easy induc-
tive argument as above shows that all the directories upto
(and including) dir0 are also visited by the actual name
resolution. We now know that the owner of dir0 remains
the same throughout the execution of safe-open (since
by assumption (c) root did not make any changes in direc-
tories that were examined by safe-open). If the owner is
different than U and root, then safe-open will switch
to unsafe mode when it gets to dir0. If the owner is U
or root then it must be the case that the directory was
group- or world-writable when safe-open was invoked
(since it was unsafe in the hypothetical resolution), and thus
it must still be group- or world-writable when safe-open
examines it (since by our assumption (c) U and root did
not change that directory). We therefore conclude that the
hypothetical and actual name resolutions proceeded identi-
cally upto (and including) dir0, and they both switched to
unsafe mode upon visiting dir0.
In particular it implies that safe-open arrived at the
(cid:2)nal directory in unsafe mode, so it would only open F if
F had a single hard link at the time that the procedure re-
turned. Recall now that by our assumptions (a), this single
hard link must be at the end of a U-safe pathname. But
we know that safe-open visited at least one unsafe di-
rectory, so its traversal must have merged back into the safe
pathname at some point after visiting dir0. As in the static
case, this must have happened by following a symbolic link
or ‘..’, which is a contradiction.
Preventing privilege-escalation in the dynamic setting.
Once we established the security guarantee in the dynamic
setting, we can show how to use it to prevent privilege esca-
lation even in a (cid:2)lesystem where permissions can change.
In addition to creating the protected (cid:2)les with safe names,
we also need to ensure that (a) we never reduce the write
permissions of a non-empty directory that was group- or
world-writable or chown a non-empty user directory back
to root; and (b) we do not change permissions or owner-
ship in the safe name and do not delete it while there are
still programs that have the (cid:2)le open.
It is not hard to see that as long as (a) and (b) do not
happen, then the conditions that we set in our dynamic-
system proof hold, and hence no privilege-escalation can
result from adversarial (cid:2)lesystem actions. Seeing that con-
dition (a) is really needed is also easy:
indeed if the at-
tacker creates an adversarial link in a world-writable direc-
tory and then the victim chmods the directory and removes
the world-writable permission, then safe-open will hap-
pily follow the adversarial link. Demonstrating that (b) is
needed is a bit more tricky: Consider for example the (cid:2)le
/etc/passwd, which is only writable by root, and con-
sider the following sequence of operations:
1. Some user program P opens /etc/passwd for read
and keeps the handle,
2. The
attacker
another
/var/mail/root to he same (cid:2)le,
creates
hard
link
3. A confused administrator deletes /etc/passwd, and
4. The mail-delivery program uses safe-open to open
/var/mail/root, and then writes into it.
Note that safe-open will succeed under these conditions,
since now /var/mail/root is the only name for this (cid:2)le
(and in particular the (cid:2)le has only one hard link). But when
the program P goes to read from its (cid:2)le descriptor, it will
see the data that the mail-delivery program wrote there.
4.
Implementing safe-open for POSIX
Filesystems
We implemented safe-open as a library routine over
the POSIX (cid:2)lesystem interface. The routine performs user-
level name resolution, similar to the routines of Tsafrir et.
al [20, 21], while adding the pathname safety check in every
directory. That is, the routine goes through each component
of the path to be opened, checks for the manipulators of
each directory, and marks a directory unsafe if it has manip-
ulators other than root and the current process’ effective
uid. Once it encounters an unsafe directory, in the remain-
der of the path, it does not follow symlinks or ‘..’, and does
not open a (cid:2)le with multiple hardlinks. A pseudocode de-
scription of our implementation is found in Figures 1 and 2
in Appendix B.
4.1. Race conditions
Our name-resolution procedure is not particularly vul-
nerable to (cid:2)lesystem-based adversarial race conditions, in
that it would correctly label safe/unsafe directories regard-
less of concurrent actions of any attacker (as long as the
euid of the attacker is neither root nor the victim’s
euid). There are only two points in our code where we
need to guard against check/use conditions:
(A) We must never open a symbolic link.
If the
O NOFOLLOW (cid:3)ag is available then we can use it for that
purpose, but to get get the same effect in a truly portable
code we implement the lstat-open-fstat-lstat pat-
tern.
(B) The other check/use window in our code is between
the time that we check permissions and conclude that we
are in a safe directory and the time that we read a symbolic
link or open a (cid:2)le or directory. As we explained in Sec-
tion 3.2, this check/use window is only open to races against
processes with the same effective uid as the process call-
ing safe-open (or root), not to races against an adver-
sarial process trying to escalate privileges. As permission-
changing actions by benign processes are quite rare, we be-
lieve that this window does not pose a major threat. We can
even check the directory permissions both before and after
reading a symlink (or opening a (cid:2)le or directory) to further
narrow this window (and then this race cannot happen as
long as non-adversarial processes do not revoke write per-
missions on non-empty directories).
4.2. Thread safety
Implementing user-level name resolution requires that
we work with handles to directories, using either the cur-
rent working directory (which may not be thread safe) or the
openat, readlinkat and fstatat interfaces, which
are part of a recent POSIX standard [17]. These interfaces
duplicate existing pathname-based interfaces but add an-
other parameter, a (cid:2)le descriptor for a directory. When used
with a relative name, these calls now work relative to the
speci(cid:2)ed directory instead of the current working directory.
The new interfaces are implemented in current Solaris
and Linux versions. On systems without support for the
openat family of function calls, we emulate their func-
tionality inside a synchronized block: Maintaining a handle
to the directory currently visited, we store the current work-
ing directory, change directory with fchdir to the visited
directory, explore the next path element (for example, with
open or lstat), then restore the original current working
directory. To make the emulation signal-safe we also need
to suspend signal delivery while in the protected block.
4.3. Read permissions on directories
Our user-level safe-open implementation relies on
the ability to open all the intermediate directories (e.g., to
fstat them or to use them with openat). Each path
component, except the (cid:2)nal one, is opened in a O RDONLY
mode. For this implementation to work, the process must
have read permission on each non-(cid:2)nal component in the
path (in addition to the search permission that is required
to look up the next pathname component in that directory).
This is different from the regular POSIX open that only
requires search permission on each directory component.
This restriction is of only temporary nature: a recent
POSIX standard [17] introduces the O SEARCH (cid:3)ag to
open a directory for search operations only, and a future
safe-open implementation can migrate to this.
4.4. Opening (cid:2)les without side effects
Upon arriving at the last path element (i.e., the (cid:2)le to be
opened), our safe-open implementation may still need
to verify that it is not a symbolic link. We again use the
lstat-open-fstat-lstat pattern, but we must guard
against potential side-effects of opening the (cid:2)le. For in-
stance, opening the (cid:2)le with the (cid:3)ag O TRUNC in combi-
nation with either O WRONLY or O RDWR will truncate the
(cid:2)le before the safe-open procedure can determine that
it opened an unexpected (cid:2)le. To (cid:2)x this problem, we must
(cid:2)rst remove the O TRUNC (cid:3)ag when opening the (cid:2)le, and if
no error occurs then call ftruncate on the newly opened
handle before returning it.
similarly,
if safe-open unexpectedly
opens a target which is not a regular (cid:2)le (such as a FIFO
or a tty port), then the open call could block inde(cid:2)nitely.
This can be addressed only with cooperation by the applica-
tion: when an application never intends to open a blocking
target then it could specify the (cid:3)ag O NONBLOCK.
Somewhat
4.5. Implementing safe-create, safe-unlink,
and other primitives
Building on the same ideas, we can implement safe ver-
sions of other POSIX interfaces, such as safe-create
for creation of new (cid:2)les, safe-unlink for removing
them, etc. For many of these primitives, the implementa-
tion can be almost trivial: follow the same steps as with
safe-open to reach the (cid:2)nal directory11; in the (cid:2)nal step,
safe-create creates the (cid:2)le (with (cid:3)ags O CREAT and
O EXCL), and safe-unlink removes the target which
may be a symlink or a (cid:2)le with multiple hardlinks.
11Some primitives (such as unlink and mkdir) do not follow a sym-
link that appears as the (cid:2)nal pathname component; the safe-unlink
and safe-mkdir functions must of course behave accordingly.
Our generalized pathname safety policy is easy enough
to express: (cid:147)when resolving a pathname through an unsafe
directory, in the remainder of the path don’t follow ‘..’
or symbolic links, and don’t open or change attributes of
(cid:2)les with multiple hardlinks.(cid:148) Articulating the exact secu-
rity properties that you get may take some care. For exam-
ple, the security property that you get from safe-create
is this: (cid:147)When called with an unsafe name, safe-create
will fail to create the (cid:2)le if the resulting (cid:2)le could also have
a safe name.(cid:148)
Implementing safe versions of POSIX interfaces with
more than one pathname (i.e., safe-rename and
safe-link) can be problematic on systems that don’t
support renameat and linkat. The emulation of these
functions is complicated by the fact that a process can
have only one current working directory at a time; as a
workaround one could perhaps utilize temporary directories
with random names as intermediaries.
Current POSIX standards still lack some primitives that
operate on existing (cid:2)les by (cid:2)le handle instead of (cid:2)le name,
but this may change as standards evolve. For example,
the recently-standardized O EXEC (open (cid:2)le for execute)
(cid:3)ag [17] enables the implementation of a family of fexec
primitives that execute the (cid:2)le speci(cid:2)ed by a (cid:2)le han-
dle.12 Based on these primitives one could implement
safe-exec versions that can recover from accessing an
unexpected (cid:2)le, similar in the way that safe-open recov-
ers before performing an irreversible operation. We note
that executing (cid:2)les in unsafe directories is a mine(cid:2)eld, and
leave the development of a suitable safety policy as future
work.
5. Experimental validation
We conducted extensive experiments to validate our ap-
proach for safe pathname resolution. Our goals in these ex-
periments were (a) to check whether existing applications
would continue to work when they run over a POSIX inter-
face that implements safe pathname resolution; and (b) to
see if we can identify yet-undiscovered vulnerabilities re-
lated to applications that follow unsafe links.
5.1. Testing apparatus
We implemented our safe name resolution and tested
several (cid:147)live(cid:148) systems, to see what applications actually
use unsafe links, and for what purpose. To cover a wide
range of operating systems and production environments,
we opted for implementing our procedure in a (cid:147)shim(cid:148) layer
between the applications and libc. That is, we built a li-
12Support for these is already implemented in some Linux and BSD
versions.
brary that intercepts (cid:2)lesystem calls, and instructed the run-
time linker to load it before the regular libc. We used
this to instrument dynamically-linked programs including
setuid and setgid programs.13 This approach makes it eas-
ier to test existing systems, but it may not be able to inter-
pose on calls between functions within the same library. In
addition it is necessary to intercept some library calls not re-
lated to (cid:2)le access, to prevent the accidental destruction of
environment variables or (cid:2)le handles that our (cid:147)shim(cid:148) layer
depends on.
In the interposition library, we implemented the safe
pathname resolution and used it in the (cid:2)lesystem calls
open, fopen, creat, unlink, remove, mkdir,
rmdir, link, rename, chmod, chown, and the exec
family. With openat and related functions, we did not
implement yet safe pathname resolution with respect to ar-
bitrary directory handles; in our measurements, such calls
were a tiny minority. So far we only instrumented calls that
involve absolute pathnames, or pathname lookups relative
to the current directory.
We also kept some state related to the current working
directory in our library, in order to implement safe name
resolution for relative pathnames. (The same approach can
be used for the directory handles used by openat and re-
lated functions, but we did not implement this yet.) A more
detailed description of the implementation and its intrica-
cies is provided in Appendix C.
5.2. Measurements of UNIX systems
We ran our pathname safety measurements on several
out-of-the-box UNIX systems, speci(cid:2)cally Fedora Core 11,
Ubuntu 9.04, and FreeBSD 7.2 for i386 (both server and
desktop versions). These systems were run on VMware
workstation 5 for Linux and Windows hosts, and on real
hardware. We instrumented the top-level system start-
up and shutdown scripts,
typically /etc/rc.d/rc or
/etc/init.d/rc, and were able to monitor system and
network daemon processes as well as desktop processes.14
In all of these experiments, we con(cid:2)gured our library to run
in a report-only mode, where policy violations are logged
but the intended operation is not aborted. (In fact, following
the complete pathname resolution, our library will simply
make the underlying system call on the original arguments
and return the result.)
13While the LD PRELOAD environment variable was suf(cid:2)cient
to
instrument most programs,
instrumenting setuid and setgid programs
required additional steps. We stored run-time linker instructions in
/etc/ld.so.preload on Linux, and in /var/ld/ld.config on
Solaris; we modi(cid:2)ed the run-time linker /libexec/ld-elf.so.1 on
FreeBSD.
14For this instrumentation, we disabled security software such as Ap-
pArmor and SELinux to avoid interference between our instrumentation
and their enhanced security policies.
We ran these systems in their out-of-the-box con(cid:2)gu-
rations, and also tested some applications including the
Gnome desktop, browsing with several Firefox versions (in-
cluding plugins for popular multi-media formats), of(cid:2)ce
document browsing, printing with Adobe Acroread, soft-
ware compilation with gcc, and software package installa-
tion. The vast majority of these tests passed without a hitch.
Most systems and applications never attempted an operation
that would violate our safety policy, and thus they would
have worked just as well had we con(cid:2)gured our safe name
resolution in enforcing mode. One notable exception is the
web-server application, discussed in Section 5.5.
5.3. Latent vulnerabilities
In the course of our experiments we uncovered a number
of latent privilege escalation vulnerabilities. The latent vul-
nerabilities occur where privileged system processes write
or create (cid:2)les as root in directories that are writable by an
unprivileged process. In these cases, a compromise of an
unprivileged process could result in further privilege esca-
lation:
(cid:15) The Common UNIX Printing System (CUPS) saves
state in (cid:2)les job.cache and remote.cache.
These (cid:2)les are opened with root privileges and with
(cid:3)ags O WRONLY|O CREAT|O TRUNC, in directory
/var/cache/cups which is writable by group lp
(on some systems group cups). The CUPS software