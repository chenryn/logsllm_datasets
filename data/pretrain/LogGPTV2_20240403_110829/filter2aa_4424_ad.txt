        004017aa 48 89 b5        MOV        qword ptr [RBP + local_248],RSI
                 c0 fd ff ff
        004017b1 4c 89 d6        MOV        RSI=>DAT_00403210,R10                            = 04h
        004017b4 41 ba 28        MOV        R10D,40
                 00 00 00
        004017ba 48 89 95        MOV        qword ptr [RBP + local_250],RDX
                 b8 fd ff ff
        004017c1 4c 89 d2        MOV        RDX,R10
        004017c4 48 89 85        MOV        qword ptr [RBP + local_258],RAX
                 b0 fd ff ff
        004017cb 48 89 8d        MOV        qword ptr [RBP + local_260],RCX
                 a8 fd ff ff
        004017d2 4c 89 85        MOV        qword ptr [RBP + local_268],R8
                 a0 fd ff ff
        004017d9 4c 89 8d        MOV        qword ptr [RBP + local_270],R9
                 98 fd ff ff
        004017e0 e8 9b f8        CALL       memcpy                                           void * memcpy(void * __dest, voi
                 ff ff
        004017e5 48 8b 85        MOV        RAX,qword ptr [RBP + local_268]
                 a0 fd ff ff
        004017ec 48 89 c7        MOV        RDI,RAX
        004017ef 48 be 40        MOV        RSI=>DAT_00403240,DAT_00403240                   = 04h
                 32 40 00 
                 00 00 00 00
        004017f9 ba 38 00        MOV        EDX,56
                 00 00
        004017fe e8 7d f8        CALL       memcpy                                           void * memcpy(void * __dest, voi
                 ff ff
        00401803 48 8b 85        MOV        RAX,qword ptr [RBP + local_248]
                 c0 fd ff ff
        0040180a 48 89 c7        MOV        RDI,RAX
        0040180d 48 be 80        MOV        RSI=>DAT_00403280,DAT_00403280                   = 04h
                 32 40 00 
                 00 00 00 00
        00401817 b8 40 00        MOV        EAX,64
                 00 00
        0040181c 48 89 c2        MOV        RDX,RAX
        0040181f 48 89 85        MOV        qword ptr [RBP + local_278],RAX
                 90 fd ff ff
        00401826 e8 55 f8        CALL       memcpy                                           void * memcpy(void * __dest, voi
                 ff ff
        0040182b 48 8b 85        MOV        RAX,qword ptr [RBP + local_250]
                 b8 fd ff ff
        00401832 48 89 c7        MOV        RDI,RAX
        00401835 48 be c0        MOV        RSI=>DAT_004032c0,DAT_004032c0                   = 04h
                 32 40 00 
                 00 00 00 00
        0040183f 48 8b 95        MOV        RDX,qword ptr [RBP + local_278]
                 90 fd ff ff
        00401846 e8 35 f8        CALL       memcpy                                           void * memcpy(void * __dest, voi
                 ff ff
        0040184b 48 8b 85        MOV        RAX,qword ptr [RBP + local_260]
                 a8 fd ff ff
        00401852 48 89 c7        MOV        RDI,RAX
        00401855 48 be 00        MOV        RSI=>DAT_00403300,DAT_00403300                   = 04h
                 33 40 00 
                 00 00 00 00
        0040185f 48 8b 95        MOV        RDX,qword ptr [RBP + local_278]
                 90 fd ff ff
        00401866 e8 15 f8        CALL       memcpy                                           void * memcpy(void * __dest, voi
                 ff ff
        0040186b 48 8b 85        MOV        RAX,qword ptr [RBP + local_258]
                 b0 fd ff ff
        00401872 48 89 c7        MOV        RDI,RAX
        00401875 48 be 40        MOV        RSI=>DAT_00403340,DAT_00403340                   = 04h
                 33 40 00 
                 00 00 00 00
        0040187f 48 8b 95        MOV        RDX,qword ptr [RBP + local_278]
                 90 fd ff ff
        00401886 e8 f5 f7        CALL       memcpy                                           void * memcpy(void * __dest, voi
                 ff ff
        0040188b 48 8b 85        MOV        RAX,qword ptr [RBP + local_270]
                 98 fd ff ff
        00401892 48 89 85        MOV        qword ptr [RBP + local_1b8],RAX
                 50 fe ff ff
        00401899 48 8b 8d        MOV        RCX,qword ptr [RBP + local_268]
                 a0 fd ff ff
        004018a0 48 89 8d        MOV        qword ptr [RBP + local_1b0],RCX
                 58 fe ff ff
        004018a7 48 8b 95        MOV        RDX,qword ptr [RBP + local_248]
                 c0 fd ff ff
        004018ae 48 89 95        MOV        qword ptr [RBP + local_1a8],RDX
                 60 fe ff ff
        004018b5 48 8b b5        MOV        RSI,qword ptr [RBP + local_250]
                 b8 fd ff ff
        004018bc 48 89 b5        MOV        qword ptr [RBP + local_1a0],RSI
                 68 fe ff ff
        004018c3 48 8b bd        MOV        RDI,qword ptr [RBP + local_260]
                 a8 fd ff ff
        004018ca 48 89 bd        MOV        qword ptr [RBP + local_198],RDI
                 70 fe ff ff
        004018d1 4c 8b 85        MOV        R8,qword ptr [RBP + local_258]
                 b0 fd ff ff
        004018d8 4c 89 85        MOV        qword ptr [RBP + local_190],R8
                 78 fe ff ff
        004018df 4c 8d 8d        LEA        R9=>local_238,[RBP + -0x230]
                 d0 fd ff ff
        004018e6 4c 89 cf        MOV        RDI,R9
        004018e9 48 be 80        MOV        RSI=>DAT_00403380,DAT_00403380                   = 01h
                 33 40 00 
                 00 00 00 00
        004018f3 ba 7a 00        MOV        EDX,122
                 00 00
        004018f8 e8 83 f7        CALL       memcpy                                           void * memcpy(void * __dest, voi
                 ff ff
        004018fd 48 8b bd        MOV        RDI,qword ptr [RBP + local_240]
                 c8 fd ff ff
        00401904 be 0b 00        MOV        ESI,0xb
                 00 00
        00401909 ba 0b 00        MOV        EDX,0xb
                 00 00
        0040190e e8 5d f7        CALL       memset                                           void * memset(void * __s, int __
                 ff ff
        00401913 bf 02 00        MOV        EDI,0x2
                 00 00
        00401918 e8 83 fb        CALL       print_hint_in_debug                              undefined print_hint_in_debug(ui
                 ff ff
        0040191d 48 8d bd        LEA        RDI=>local_238,[RBP + -0x230]
                 d0 fd ff ff
        00401924 e8 37 f9        CALL       handle_no_args                                   void handle_no_args(char * param
                 ff ff
        00401929 48 81 c4        ADD        RSP,0x270
                 70 02 00 00
        00401930 5d              POP        RBP
        00401931 c3              RET
```
We'll set a breakpoint after the locals get initialized and before the internal functions get called, and use the debugger to call `handle_no_args` with each of the other buffers when the breakpoint is hit. Here's the script to do that:
```
set environment WHERE_IS_THE_HATTER=1
b *0x0040191d
commands
silent
call ((void (*) (char*)) 0x401260) ($rbp-0x40)
call ((void (*) (char*)) 0x401260) ($rbp-0x80)
call ((void (*) (char*)) 0x401260) ($rbp-0xc0)
call ((void (*) (char*)) 0x401260) ($rbp-0x100)
call ((void (*) (char*)) 0x401260) ($rbp-0x140)
call ((void (*) (char*)) 0x401260) ($rbp-0x180)
q
end
r
```
The output:
```console
root@kali:/media/sf_CTFs/matrix/Hatter# gdb -n -q -x ./commands.gdb ./Hatter
Reading symbols from ./Hatter...
(No debugging symbols found in ./Hatter)
Breakpoint 1 at 0x40191d
.08....9... 00 ^__^
....5...C.. 01 (xx)\_______
...4....... 02 (__)\       )\/\
..6....2... 03  U  ||--WWW |
.7...B...1. 04     ||     ||
.A.....3... 05
A debugging session is active.
        Inferior 1 [process 2601] will be killed.
Quit anyway? (y or n) [answered Y; input not from terminal]
```
We got six weird lines printed, one for each buffer we called. We also got the dead cow from [cowsay](https://en.wikipedia.org/wiki/Cowsay). So what now? It took us a while, but eventually we figured out how to read this, after noticing that the left diagram contains all the hex digits from `0x0` to `0xC`.
First, we align the different "Enter" lines that we saw earlier with the secret output that we've extracted:
```
dMp|dAtA
.08....9... 00 ^__^
do v3rifY
....5...C.. 01 (xx)\_______
hinT
...4....... 02 (__)\       )\/\
iD4Ur5ALF
..6....2... 03  U  ||--WWW |
P_tr01l
.7...B...1. 04     ||     ||
pRnTE
.A.....3... 05
```
Line `#n` from the original output (numbered based on `print_hint_in_debug(n)`) gets paired with the matching secret-output line based on its line index.
Then, we traverse the sequence from `0x0` to `0xC` while taking note of the matching letter. We get:
```
M?L?T34_pAR1Y
```
We will have to guess the two remaining characters. The first one must be `'C'` since that's usually the flag format. The second one is probably `'_'` to separate the flag format from the word "tea". Eventually we get `"MCL_T34_pAR1Y"` which was accepted as the correct flag.