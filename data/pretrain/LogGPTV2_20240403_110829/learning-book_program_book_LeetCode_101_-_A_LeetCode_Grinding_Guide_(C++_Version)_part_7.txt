vector dp(n, 0);
for （int  - 0; i > updateMatrix(vector>& matrix) {
if (matrix.empty()) return {);
int n = matrix.size() , n = matrix[0] .size() ;
vector> dp(n, vector(m, INT_MAX - 1));
for (int i = 0; i  0) {
dp[i] [] = mn(dp[] [j], dp[i] [1] + 1);
}
if (i > 0) {
dp[i] [j] = min(dp[i] [j], dp[i-1] [j] + 1);
上
for （int i = n - 1; i >= 0; --i) {
for （int j = m - 1;  >= 0; --j) {
if (matrix[i][j] != 0) {
if (j >& matrix) {
if (matrix.empty() 11matrix[0] .empty()){
return 0;
int m = matrix.size(), n = matrix[o] .size(), max_side = O;
vector> dp(n + 1, vector(n + 1, 0));
for (int i = 1; i  dp(n + 1, INT_MAX);
dp[0] = 0;
for (int i = 1; i  dp(n + 1, 1);
for (int 1 - 2; i  2) && cur == 0) {
return 0;
if ((prev  0) 11 prev =
上
2&k cur & wordDict) {
int n = s.length();
vector dp(n + 1, false);
dp[o] = true;
for (int i = 1; i = len &l s.substr(i - len, len) == uord) {
dp[i] =  dp[i] 11 dp[i -  len] ;
return dp[n];
7.5子序列问题
300. Longest Increasing Subsequence (Medium)
题目描述
给定一个未排序的整数数组，求最长的递增子序列
注意按照LeetCode 的习惯，子序列（subsequence）不必连续，子数组（subarray）或子字符事
（substring）必须连续。
输人输出样例
输入是一个一维数组，输出是一个正整数，表示最长递增子序列的长度。
Input: [10,9,2,5,3,7,101,18]
Output: 4
在这个样例中，最长递增子序列之一是[2,3,7,18]。
题解
对于子序列问题，第一种动态规划方法是，定义一个dp数组，其中dp目表示以i结尾的子
序列的性质。在处理好每个位置后，统计一遍各个位置的结果即可得到题目要求的结果。
---
## Page 55
7.5子序列问题
50/143 -
在本题中，dp[i可以表示以i结尾的、最长子序列长度。对于每一个位置i，如果其之前的某
个位置j所对应的数字小于位置i所对应的数字，则我们可以获得一个以1结尾的、长度为dp[i]
+1的子序列。为了遍历所有情况，我们需要：和进行两层循环，其时间复杂度为O（n²)。
int lengthOfLIS(vector& nums) {
int max_length = 0, n = nums.size();
if (n  dp(n, 1);
for (int i = 0; i  nums[j]） {
dp[1] = max(dp[i], dp[§] + 1);
max_length = max(max_length, dp[i]) ;
return max_length;
本题还可以使用二分查找将时间复杂度降低为O(nlogn)。我们定义一个dp数组，其中dp[k]
存储长度为k+1的最长递增子序列的最后一个数字。我们遍历每一个位置i，如果其对应的数字
大于dp数组中所有数字的值，那么我们把它放在dp数组尾部，表示最长递增子序列长度加1；
如果我们发现这个数字在dp数组中比数字a大、比数字b小，则我们将b更新为此数字，使得
之后构成递增序列的可能性增大。以这种方式维护的dp数组永远是递增的，因此可以用二分查
找加速搜索。
以样例为例，对于数组[10.9,2.5,3.7,101.18]，我们每轮的更新查找情况为：
num
10
dp
[10]
[10]
CN
[2]
5
[2]
[2,3]
7
[2,3,7]
101
[2,3,7,101]
18
[2,3,7,18]
最终我们就获得了[2.3,7,18]这个最长递增数组之一，该算法的代码实现如下。
int length0fLIS(vector& nums) {
int n = nums.size();
if (n  dp;
dp.push_bacx (nums [0]) ;
for (int i = 1; i > dp(m + 1, vector(n + 1, 0));
for (int i = 1; i <= m; ++i) {
for （int j = 1; j <= n;++j） {
if (text1[i-1] == text2[j-1]）{
dp[i] [j]  = dp[i-1] [j-1]  + 1;
}else{
dp[] [j] = max(dp[i1] [j], dp[] [j1]);
return dp[m] [n];
7.6背包问题
背包问题是一种组合优化的NP完全问题：有N个物品和容量为W的背包，每个物品都有
自己的体积w和价值v，求拿哪些物品可以使得背包所装下物品的总价值最大。如果限定每种物
品只能选择0个或1个，则问题称为0-1背包问题；如果不限定每种物品的数量，则问题称为无
界背包问题或完全背包问题。
---
## Page 57