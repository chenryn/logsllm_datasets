been  written  to  storage,  the  block-layer  interface  can  call 
TE_cleanup_write()  to  remove  the  associated  TAP  write  entries 
and deletion reminders. 
For  data-like  metadata  blocks  (e.g.,  directory  content), 
deletion handling is the same as that of data blocks.   
File updates:  Performing deletion operations is not enough to 
ensure all sensitive information is securely deleted.  By the time a 
secure-deletion  operation  is  issued  for  a  file,  several  versions  of 
its  blocks  might  have  been  created  and  stored  (e.g., due  to  flash 
optimizations),  and  the  current metadata  might  not  reference  old 
versions.  One approach is to track all versions, so that they can be 
deleted at secure-deletion time.  However, tracking these versions 
requires persistent states, and thus recovery mechanisms to allow 
those states to survive failures. 
TrueErase avoids persistent states by tracking and deleting old 
versions  along  the  way.    That  is,  secure  deletion  is  applied  for 
each  update  that  intends  to  overwrite  a  sensitive  block  in  place 
(secure  write  for  short).    Therefore,  in  addition  to  deletion 
operations,  TrueErase  needs  to  track  all  in-transit  updates  of 
sensitive blocks. 
The  file  system  can  report  pending  writes  to  TAP  through 
TE_report_write().    Eventually,  the  block-layer  interface  will 
receive  a  sector  to  write  and  can  then  look  up  information  via 
TE_check_info().  If the corresponding write entry states that the 
sector  is  secure,  the  storage-management  layer  will  write  it 
securely.  Otherwise, it will be written normally.  After the sector 
is written, the block-layer interface calls TE_cleanup_write(). 
4.2.3 
Journaling and Other Events  
Sometimes  file  blocks  are  copied  to  other  memory  locations 
for  performance  and  accessibility  reasons  (e.g.,  file-system 
journal,  bounce  buffers,  etc.).    When  that  happens,  any  write 
entries  associated  with  the  original  memory  location  must  be 
copied  and  associated  with  the  new  location.    If  there  are 
associated deletion reminders, whether they are transferred to the 
new  copy  is  file-system-specific.    For  example,  in  ext3,  the 
deletion reminders are transferred to the memory copy in the case 
of bounce buffers or to the memory copy that will be written first 
in  the  case  of  journaling.    Memory  copies  are  reported  to  TAP 
through TE_report_copy(). 
4.3  Enhanced Storage-management Layer 
TrueErase does not choose a secure-deletion mechanism until 
a storage request has reached the storage-management layer.  By 
doing so, TrueErase ensures that the chosen mechanism matches 
the  characteristics  of  the  underlying  storage  medium.    For 
example, the process of securely erasing flash memory (erase) is 
quite different from the process of securely erasing information on 
a disk (overwrite).  Users should be unaware of this difference. 
In  addition,  we  can  further  add  different  secure-deletion 
methods  at  the  storage  layer  in  accordance  with  different 
requirements and government regulations [21, 37]. 
 TrueErase  can  work  with  both  flash  storage  and  traditional 
hard drives.  Due to the difficulty of secure deletion on flash, we 
concentrate on applying TrueErase to flash storage in this paper.  
However,  we  also  provide  a  high-level  design  of  a  hard  drive 
solution to show the generalizability of TrueErase. 
4.3.1  NAND Flash Storage Management 
NAND  flash  basics:  NAND  flash  has 
the  following 
characteristics:  (1) writing is slower than reading, and erasure can 
be more than an order of magnitude slower [3]; (2) NAND reads 
and  writes  are  in  flash  pages  (of  2-8  Kbytes),  but  erasures  are 
performed in flash blocks (typically 64-512 Kbytes consisting of 
contiguous  pages);  (3) 
in-place  updates  are  generally  not 
allowed—once  a  page  is  written,  the  flash  block  containing  this 
page  must  be  erased  before  this  page  can  be  written  again,  and 
442
other  in-use  pages  in  the  same  flash  block  need  to  be  copied 
elsewhere; and (4) each storage location can be erased only 10K-
1M times [3].   
As  a  common  optimization,  when  flash  receives  a  request  to 
overwrite a flash page, a flash translation layer (FTL) remaps the 
write to a pre-erased flash page, stamps it with a version number, 
and  marks  the  old  page  as  invalid,  to  be  cleaned  later.    (Flash 
overwrites  might  be  allowed  for  some  special  cases.)    These 
invalid  pages  are  not  accessible  to  components  above  the  block 
layer; however, they can be recovered by forensic techniques [20].  
To prolong the lifespan of the flash, wear-leveling techniques are 
often  used  to  spread  the  number  of  erasures  evenly  across  all 
storage locations.   
NAND  secure  commands:  We  added  two  secure-deletion 
commands to the storage-management layer (i.e., FTL) for flash. 
Secure_delete(page  numbers):(cid:3) (cid:3) This  call  specifies  pages  on 
flash  to  be  deleted  securely.    The  call  copies  other  in-use  pages 
from the current flash block to other areas, and marks those pages 
as unused in the block.  The specified pages then can be marked 
invalid, and the current flash block can be cleared via a flash erase 
command.   
Secure_write(page numbers, data):(cid:3)(cid:3)Generally, writing to the 
same  logical  page  to  flash  would  result  in  a  new  physical  page 
being  allocated  and  written,  with  the  physical  page  holding  old 
data versions marked invalid.  This call, on the other hand, would 
securely delete those invalid pages with Secure_delete().     
We choose this type of secure-deleting flash behavior instead 
of  zero-overwriting  or  scrubbing  [27,  38,  41]  for  ease  of 
implementation and portability.  Alternative flash secure deletion 
schemes may have better performance on specific chips.(cid:3)
this 
  However, 
NAND garbage collection: When a NAND flash device runs 
low  on  space,  it  triggers  wear  leveling  to  compact  in-use  pages 
into  fewer  flash  blocks. 
internal  storage 
reorganization  does  not  consult  with  higher  layers  and  has  no 
knowledge  of  file  boundaries,  sensitive  status,  etc.    Thus,  in 
addition  to  storing  a  file’s  sensitive  status  in  the  extended 
attributes, we  found it necessary to store a sensitive-status bit in 
the per-page control area. (This area also contains a page’s in-use 
status.)    With  this  bit,  when  a  sensitive  page  is  migrated  to  a 
different  block,  the  old  block  is  erased  via  Secure_delete().  
Consistency  between  the  file  system  and  the  storage  status  is 
addressed in § 4.5.  
4.3.2  Hard Drive Storage Management 
Hard drive basics:  On a hard drive, writes can be performed 
in-place, in that a write to a logical sector will directly overwrite 
the same physical sector.   
Hard drive secure commands: Similarly to the NAND secure 
commands,  we  can  add  secure_delete(sector  numbers)  and 
secure_write(sector  numbers,  data)  commands  for  disk.    The 
results  of  these  commands  are  the  same  as  for  the  flash  case—
only the mechanism changes.   The secure_delete command will 
overwrite  sector  numbers  in-place  with  random  data,  and  the 
secure_write  command  will  first  overwrite  sectors  specified  by 
sector  numbers  with  random  data  before  writing  data.    The 
number  of  overwrites  of  random  data  is  configurable.    These 
commands can be placed in a high-level software driver, such as 
the Linux device-mapper layer.(cid:3)
4.4  File-system-consistency Properties  
We cannot guarantee the correctness of our framework if it is 
required  to  interact  with  file  systems  that  exhibit  arbitrary 
behaviors.    Therefore,  we  applied  the  consistency  properties  of 
file  systems  defined  in  [34]  to  enumerate  corner  cases.    (These 
properties  also  rule  out  ext2  and  FAT,  which  are  prone  to 
inconsistencies due to crashes.)  By working with file systems that 
adhere  to  these properties,  we  can  simplify  corner-case  handling 
and verify our framework systematically.   
In  a  simplified  sense,  as  long  as  pieces  of  file  metadata 
reference  the  correct  data  and  metadata  versions  throughout  the 
data  path, the  system  is  considered  consistent.    In  particular,  we 
are  interested  in  three  properties  in  [34].    The  first  two  are  for 
non-journaling-based file systems.  In a file system that does not 
maintain  both  properties,  a  non-sensitive  file  may  end  up  with 
data blocks from a sensitive file after a crash recovery.  The last 
property is needed only for journaling-based file systems.   
• 
The reuse-ordering property ensures that once a file’s block 
is freed, the block will not be reused by another file before its 
free status becomes persistent.  Otherwise, a crash may lead 
to  a  file’s  metadata  pointing  to  the  wrong  file’s  content.  
Thus, before the free status of a block becomes persistent, the 
block  will  not  be  reused  by  another  file  or  changed  into  a 
different block type.  With this property, we do not need to 
worry  about  the  possibility  of  dynamic  file  ownership  and 
types for in-transit blocks.  
The pointer-ordering property ensures that a referenced data 
block in memory will become persistent before the metadata 
block  in  memory  that  references  the  data  block.    With  this 
ordering reversed, a system crash could cause the persistent 
metadata block to point to a persistent data block location not 
yet  written.    This  property  does  not  specify  the  fate  of 
updated data blocks in memory once references to the blocks 
are  removed.    However,  the  legacy  memory  page  cache 
prohibits unreferenced data blocks from being written.  The 
pointer-ordering  property  further  indicates  that  right  after  a 
newly  allocated  sensitive  data  block  becomes  persistent,  a 
crash at this point may result in the block being unreferenced 
by  its  file.    To  cover  this  case,  we  will  perform  secure 
deletion  on  unreferenced  sensitive  blocks  at  recovery  time 
(see §4.5). 
The  non-rollback  property  ensures  that  older  data  or 
metadata  versions  will  not  overwrite  newer  versions 
persistently—critical 
file  systems  with 
versions  of  requests  in  transit.    That  is,  we  do  not  need  to 
worry  that  an  update  to  a  block  and  its  subsequent  secure 
deletion will be written persistently in the wrong order.   
journaling 
for 
• 
• 
With  these  consistency  properties,  we  can  identify  the 
structure  of  secure-deletion  cases  and  handle  them  by:  (1) 
ensuring  that  a  secure  deletion  occurs  before  a  block  is 
persistently  declared  free,  (2)  the  dual  case  of  hunting  down  the 
persistent sensitive blocks left behind after a crash but before they 
are  persistently  referenced  by  file-system  metadata,  (3)  making 
sure that secure deletion is not applied (in a sense, too late) to the 
wrong  file,  (4)  the  dual  case  of  making  sure  that  a  secure  block 
deletion  is  not  performed  too  early  and  gets  overwritten  by  a 
buffer  update  from  a  deleted  file,  and  (5)  handling  in-transit 
versions  of  a  storage  request  (mode  changing,  reordering, 
consolidation,  merging,  and  splitting).    Buffering,  asynchrony, 
and cancelling of requests are handled by TAP. 
4.5  Other Design Points 
Crash  handling:    TAP  contains  no  persistent  states  and 
requires  no  additional  recovery  mechanisms.    Persistent  states 
stored  as  file-system  attributes  are  protected  by  journal-recovery 
mechanisms.    At  recovery  time,  a  journal  is  replayed  with  all 
operations  handled  securely.    We  then  securely  delete  the  entire 
journal.    To  hunt  down  leftover  sensitive  data  blocks,  we 
sequentially  delete  sensitive  blocks  that  are  not  marked  as 
allocated  by  the  file  system  for  flash  and  disk  [1].    Since  flash 
migrates in-use pages from to-be-erased blocks by copying those 
pages  elsewhere  before  erasing  the  old  versions,  some  sensitive 
pages may have duplicates during a crash.  Given that the secure 
deletion of the page did not complete, the common journal crash-
recovery  mechanism  will  reissue  the  operation,  so  that  the  other 