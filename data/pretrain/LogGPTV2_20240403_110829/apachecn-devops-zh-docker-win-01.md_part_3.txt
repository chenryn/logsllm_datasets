```
docker container run dockeronwindows/ch01-whale:2e
```
当 Docker Engine 的新版本发布时，您可以通过重复`Install`命令并添加`-Update`标志来更新您的服务器:
```
Install-Package -Name docker -ProviderName DockerMsftProvider -Update 
```
我将此配置用于我的一些环境—在仅安装了 Docker 的轻量级虚拟机中运行 Windows Server 2019 Core。您可以通过与远程桌面连接在服务器上使用 Docker，也可以配置 Docker 引擎以允许远程连接，这允许您使用笔记本电脑上的`docker`命令管理服务器上的 Docker 容器。这是一个更高级的设置，但它确实为您提供了安全的远程访问。
最好设置 Docker Engine，以便使用 TLS(与 HTTPS 使用的加密技术相同)保护与客户端的通信。客户端只有在拥有正确的 TLS 证书以使用服务进行认证的情况下才能连接。您可以通过在虚拟机内部运行这些 PowerShell 命令来设置，提供虚拟机的外部 IP 地址:
```
$ipAddress = ''
mkdir -p C:\certs\client
docker container run --rm `
 --env SERVER_NAME=$(hostname) `
 --env IP_ADDRESSES=127.0.0.1,$ipAddress `
 --volume 'C:\ProgramData\docker:C:\ProgramData\docker' `
 --volume 'C:\certs\client:C:\Users\ContainerAdministrator\.docker' `
 dockeronwindows/ch01-dockertls:2e
Restart-Service docker
```
Don't worry too much about what this command is doing. Over the next few chapters, you'll get a good understanding of all these Docker options. I'm using a Docker image based on one from Stefan Scherer, who is a Microsoft MVP and Docker Captain. The image has a script that secures the Docker Engine with TLS certificates. You can read more details on Stefan's blog at [https://stefanscherer.github.io](https://stefanscherer.github.io).
当这个命令完成时，它将配置 Docker Engine API 只允许安全的远程连接，并且还将创建客户端需要用来连接的证书。将虚拟机上`C:\certs\client`的这些证书复制到您想要使用 Docker 客户端的机器上。
在客户端机器上，您可以设置环境变量来指示 Docker 客户端使用远程 Docker 服务。这些命令将建立到虚拟机的远程连接(假设您对客户端上的证书文件使用了相同的路径)，如下所示:
```
$ipAddress = ''
$env:DOCKER_HOST='tcp://$($ipAddress):2376'
$env:DOCKER_TLS_VERIFY='1'
$env:DOCKER_CERT_PATH='C:\certs\client'
```
您可以使用这种方法安全地连接到任何远程 Docker 引擎。如果您没有访问 Windows 10 或 Windows Server 2019 的权限，您可以在云上创建一个虚拟机，并使用相同的命令连接到它。
# 蓝色 VM Docker
微软让在 Azure 中运行 Docker 变得很容易。他们提供了安装并配置了 Docker 的虚拟机映像，并且已经提取了基本的 Windows 映像，因此您可以快速开始。
为了测试和探索，我总是使用 Azure 中的 DevTest 实验室。这是非生产环境的一大特色。默认情况下，您在开发测试实验室中创建的任何虚拟机每天晚上都会被关闭，因此您不会因为使用了几个小时却忘记关闭的虚拟机而收到一大笔 Azure 账单。
您可以通过 Azure 门户创建一个 DevTest Lab，然后从微软的虚拟机映像**创建一个虚拟机，Windows Server 2019 数据中心带有容器**。作为 Azure 门户的替代方案，您可以使用`az`命令行来管理 DevTest 实验室。我已经将`az`打包在 Docker 映像中，您可以在 Windows 容器中运行它:
```
docker container run -it dockeronwindows/ch01-az:2e
```
这运行了一个交互式 Docker 容器，该容器已经打包了`az`命令并准备使用。运行`az login`，您需要打开浏览器并验证 Azure 命令行界面。然后，您可以在容器中运行它来创建虚拟机:
```
az lab vm create `
 --lab-name docker-on-win --resource-group docker-on-win `
 --name dow-vm-01 `
 --image "Windows Server 2019 Datacenter with Containers" `
 --image-type gallery --size Standard_DS2_v2 `
 --admin-username "elton" --admin-password "S3crett20!9"
```
虚拟机使用完整的 Windows Server 2019 安装和用户界面，因此您可以使用远程桌面连接到机器，打开一个 PowerShell 会话，并立即开始使用 Docker。与其他选项一样，您可以检查 Docker 是否正在使用`docker version`运行，然后从本章的示例映像中运行一个容器:
```
docker container run dockeronwindows/ch01-whale:2e
```
如果 Azure 虚拟机是您的首选，您可以按照上一节中的步骤来保护 Docker API 以进行远程访问。这样，您可以在笔记本电脑上运行 Docker 命令行来管理云上的容器。Azure 虚拟机使用 PowerShell 部署 Docker，因此您可以使用上一节中的`InstallPackage ... -Update`命令更新虚拟机上的 Docker 引擎。
所有这些选项 Windows 10、Windows Server 2019 和 Azure 虚拟机—都可以运行完全相同的 Docker 映像并获得相同的结果。Docker 映像中的示例应用`dockeronwindows/ch01-whale:2e`在每个环境中都以相同的方式运行。
# 用这本书了解 Docker
本书中的每一个代码清单都附有我位于 https://github.com/sixeyed/docker-on-windows T4 的 GitHub 存储库中的完整代码示例。这本书有一个分支，叫做`second-edition`。源代码树为每一章组织成一个文件夹，每一章都有一个文件夹用于每个代码示例。在本章中，我使用了三个示例来创建 Docker 映像，您将在`ch01\ch01-whale`、`ch01\ch01-az`和`ch01\ch01-dockertls`中找到这些映像。
The code listings in this book may be condensed, but the full code can always be found in the GitHub repository.
当我学习一项新技术时，我更喜欢跟随代码示例，但是如果您想使用演示应用的工作版本，每个示例也可以作为 Docker Hub 上的公共 Docker 映像提供。无论你在哪里看到`docker container run`命令，映像已经存在于 Docker Hub 上，所以如果你愿意，你可以使用我的，而不是自己构建。像本章的`dockeronwindows/ch01-whale:2e`一样，`dockeronwindows`组织中的所有映像都是从 GitHub 存储库中的相关 Dockerfile 构建的。
我自己的开发环境分为使用 Docker Desktop 的 Windows 10 和运行 Docker 企业引擎的 Windows Server 2019。我的测试环境是基于 Windows Server 2019 Core 的，我也在那里运行 Docker 企业引擎。我已经在所有这些环境中验证了本书中的所有代码示例。
我使用的是 Docker 的 18.09 版本，这是撰写本文时的最新版本。Docker 一直都是向后兼容的，所以如果您在 Windows 10 或 Windows Server 2019 上使用的版本晚于 18.09，那么示例 docker 文件和映像的工作方式应该是相同的。
我的目标是让它成为关于 Windows Docker 的权威书籍，所以我已经涵盖了从容器 101 到现代化的所有内容.NET 应用与 Docker 和容器的安全含义，CI/CD 和生产中的管理。这本书的结尾是一个在你自己的项目中推进 Docker 的指南。
If you want to discuss the book or your own Docker journey with me, feel free to ping me on Twitter at `@EltonStoneman`.
# 摘要
在本章中，我介绍了 Docker，这是一个应用平台，可以在称为容器的轻量级计算单元中运行新老应用。公司为了效率、安全性和可移植性正在转向 Docker。我讲述了以下主题:
*   Docker 如何在 Windows 上工作，以及容器如何获得许可。
*   关键的 Docker 概念:映像、注册表、容器和编排器。
*   在 Windows 10、Windows Server 2019 或 Azure 上运行 Docker 的选项。
如果您计划使用本书其余部分的代码示例，那么现在您应该已经有了一个工作的 Docker 环境。在[第 2 章](02.html)、*将应用打包和运行为 Docker 容器，*我将继续将更复杂的应用打包为 Docker 映像，并展示如何管理带有 Docker 卷的容器中的状态。