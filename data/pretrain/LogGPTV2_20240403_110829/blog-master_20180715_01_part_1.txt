## PostgreSQL Oracle 兼容性之 - 全局临时表 global temp table         
### 作者                                                                       
digoal                                                                       
### 日期                                                                       
2018-07-15                                                                    
### 标签                                                                       
PostgreSQL , 临时表 , 全局临时表 , unlogged table , advisory lock        
----                                                                       
## 背景        
PostgreSQL 暂时不支持类似Oracle风格的临时表。    
PostgreSQL 临时表结构是会话级别的，而在Oracle中，临时表的结构是全局有效的，只是数据会话之间独立。        
Oracle 全局临时表可以指定SCHEMA，而PostgreSQL的临时表不能指定SCHEMA，自动在temp临时SCHEMA中创建。      
细节差异详见：    
https://www.codeproject.com/Articles/1176045/Oracle-style-global-temporary-tables-for-PostgreSQL      
为了让PostgreSQL临时表的使用与Oracle兼容，除了内核层面兼容之外，目前只能在使用时注意。        
```    
CREATE [ [ GLOBAL | LOCAL ] { TEMPORARY | TEMP } | UNLOGGED ] TABLE [ IF NOT EXISTS ] table_name ( [    
  { column_name data_type [ COLLATE collation ] [ column_constraint [ ... ] ]    
    | table_constraint    
    | LIKE source_table [ like_option ... ] }    
    [, ... ]    
] )    
...........    
[ ON COMMIT { PRESERVE ROWS | DELETE ROWS | DROP } ]      
-- 提交后，保留记录        PRESERVE ROWS    
-- 提交后，清空临时表记录  DELETE ROWS    
-- 提交后，删除临时表      DROP    
```    
用户可以使用以下方式来使用临时表：       
## 方法1(推荐使用)、使用 trigger + inherit 代替临时表 (用户使用形态与ORACLE一致)    
思想来自如下，与之不一样的地方是，直接使用的表触发器+继承功能来实现的。    
https://www.codeproject.com/Articles/1176045/Oracle-style-global-temporary-tables-for-PostgreSQL    
以上这个链接的方法问题：1、不支持truncate, copy。2、使用函数返回所有记录，会有性能问题。3、无法使用游标。4、索引使用比较麻烦。        
本文下面的方法没有以上问题（直接TRUNCATE的支持需要打个PATCH, 社区已于2018.12.27后支持https://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=1e504f01da11db0181d7b28bb30cb5eeb0767184），所有操作(insert,update,delete,select)与直接使用临时表一样。INSERT性能会有下降（使用本方法88417/s，直接写表1111111/s），一般的使用性能也是足够够的；       
对于PG 10以上版本，使用中间表可以增强性能  [《PostgreSQL 10.0 preview 功能增强 - 触发器函数内置中间表》](../201704/20170401_01.md)      
例子    
创建一个临时表 stage.abc。       
1、创建一个schema，放临时表    
```    
create schema IF NOT EXISTS stage;    
```    
2、创建表stage.abc       
```    
drop table if exists stage.abc cascade;    
create table if not exists stage.abc (id int primary key, info text, crt_time timestamp);     
```    
3、创建这个"stage.abc表"的触发器，自动基于它创建临时表，并加入它的继承关系        
所有PG版本通用，自定义insert before触发器函数      
```    
create or replace function public.abc_tg1() returns trigger as $$    
declare    
begin    
  -- 如果临时表的定义修改，修改这个触发器的内容，即表名abc，使用你的实际名字替换    
  -- 注意这里不要加schema.，否则就写入非临时表了。    
  insert into abc values (new.*);      
  return null;    
  -- 第一次插入会插入普通父表，所以创建父表的AFTER触发器，报错，即回到这里处理。  
  exception when others then  
    -- 根据临时表的业务需要使用  on commit PRESERVE|DELETE rows       
    execute format('create temp table if not exists %I (like %I.%I including all) inherits (%I.%I) on commit PRESERVE ROWS',       
      TG_TABLE_NAME, TG_TABLE_SCHEMA, TG_TABLE_NAME, TG_TABLE_SCHEMA, TG_TABLE_NAME);    
    -- 如果临时表的定义修改，修改这个触发器的内容，即表名abc，使用你的实际名字替换    
    -- 注意这里不要加schema.，否则就写入非临时表了。    
    insert into abc values (new.*);       
    return null;     
end;    
$$ language plpgsql strict set client_min_messages = error;    
```    
10以后的版本可用批量写入临时表加速，自定义insert before触发器函数      
```  
略...  
```  
自定义insert after触发器函数，用于加速insert    
(避免每次都要执行```perform 1 from pg_class where relpersistence='t' and relname=TG_TABLE_NAME and pg_table_is_visible(oid);```)    
```  
create or replace function public.abc_tg2() returns trigger as $$    
declare    
begin    
  RAISE EXCEPTION 'Do not insert direct to parent persistence table.';   
  return null;     
end;    
$$ language plpgsql strict set client_min_messages = error;    
```  
4、新建stage.abc的insert before触发器     
```    
create trigger tg1 before insert on stage.abc for each row execute function public.abc_tg1();     
create trigger tg2 after insert on stage.abc for each row execute function public.abc_tg2();     
```    
5、测试，完全OK    
```    
insert into stage.abc values (1,'test',now());    
insert into stage.abc values (2,'test',now());    
postgres=# select tableoid, * from stage.abc;    
 tableoid | id | info |          crt_time            
----------+----+------+----------------------------  
 32224674 |  1 | test | 2018-12-25 09:38:34.252316  
 32224674 |  2 | test | 2018-12-25 09:38:34.257408  
(2 rows)  
postgres=# select tableoid, * from only stage.abc;    
 tableoid | id | info | crt_time   
----------+----+------+----------  
(0 rows)  
postgres=# insert into stage.abc select generate_series(3,10000000);  
INSERT 0 0  
Time: 113095.297 ms (01:53.095)  
postgres=# select count(*) from only stage.abc;  
 count   
-------  
     0  
(1 row)  
Time: 0.464 ms  
postgres=# select count(*) from stage.abc;  
  count     
----------  
 10000000  
(1 row)  
Time: 2109.900 ms (00:02.110)  
postgres=# truncate abc;  
TRUNCATE TABLE  
Time: 149.441 ms  
postgres=# insert into abc select generate_series(1,10000000);  
INSERT 0 10000000  
Time: 9005.758 ms (00:09.006)  
postgres=# select 10000000/9.0;  
       ?column?         
----------------------  
 1111111.111111111111  
(1 row)  
Time: 0.276 ms  
postgres=# select 10000000/113.1;  
      ?column?        
--------------------  
 88417.329796640141  
(1 row)  
Time: 0.287 ms  
postgres=# begin;
BEGIN
postgres=# declare a cursor for select * from stage.abc;
DECLARE CURSOR
postgres=# fetch 1 from a;
 id | info | crt_time 
----+------+----------
  2 |      | 
(1 row)
postgres=# update stage.abc set info='abc',crt_time=now() where CURRENT OF a;
UPDATE 1
postgres=# end;
COMMIT
postgres=# select * from stage.abc where id=2;
 id | info |          crt_time          
----+------+----------------------------
  2 | abc  | 2018-12-25 14:35:30.043199
(1 row)
postgres=# select * from only stage.abc where id=2;
 id | info | crt_time 
----+------+----------
(0 rows)
```    
select, delete, update, copy, 游标 均使用正常。       
6、后期对临时表加索引，直接操作stage.abc即可。因为我们在创建临时表时，使用了including all子句。     
### 封装成接口函数使用方便。  
```  
create or replace function create_temptable(  
  v_schemaname name,  
  v_tablename name,  
  v_on_commit_action text default 'PRESERVE ROWS',  
  v_tg_schemaname name default 'public'  
) returns void as $$  
declare  
  tg_name1 text := 'v'||md5((clock_timestamp()::text||random()::text));  
  tg_name2 text := 'tg_for_temptable_after_insert_error';  -- 这个函数只需要一个通用的即可  
  v_sql1 text;  
  v_sql2 text;  
begin  
  v_sql1 := format($_$  
    create or replace function %I.%I() returns trigger as $__$   -- v_tg_schemaname, tg_name1   
    declare    
    begin    
      insert into %I values (new.*);    -- v_tablename  
      return null;    
    exception when others then    
      execute format('create temp table if not exists %%I (like %%I.%%I including all) inherits (%%I.%%I) on commit %s',     --  v_on_commit_action  
        TG_TABLE_NAME, TG_TABLE_SCHEMA, TG_TABLE_NAME, TG_TABLE_SCHEMA, TG_TABLE_NAME);    
    insert into %I values (new.*);   --   v_tablename  
    return null;     
    end;    
    $__$ language plpgsql strict set client_min_messages = error;   
  $_$, v_tg_schemaname, tg_name1, v_tablename, v_on_commit_action, v_tablename);  
  execute v_sql1;  
  v_sql2 := format($_$  
    create or replace function %I.%I() returns trigger as $__$  -- v_tg_schemaname, tg_name2   
    declare    
    begin    
      RAISE EXCEPTION 'Do not insert direct to parent persistence table.';   
      return null;     
    end;    
    $__$ language plpgsql strict set client_min_messages = error;    
  $_$, v_tg_schemaname, tg_name2 );  
  execute v_sql2;  
  execute format($_$create trigger tg1 before insert on %I.%I for each row execute function %I.%I();$_$, v_schemaname, v_tablename, v_tg_schemaname, tg_name1);     
  execute format($_$create trigger tg2 after insert on %I.%I for each row execute function %I.%I();$_$, v_schemaname, v_tablename, v_tg_schemaname, tg_name2);       
end;  
$$ language plpgsql strict;  
```  
使用举例  
```  
postgres=# drop table stage.abc cascade;  
DROP TABLE  
postgres=# create table stage.abc(id int primary key, info text, crt_time timestamp);  
CREATE TABLE  
postgres=# select create_temptable('stage','abc');  
 create_temptable   
------------------  
(1 row)  
postgres=# \d+ stage.abc  
                                                Table "stage.abc"  
  Column  |            Type             | Collation | Nullable | Default | Storage  | Stats target | Description   
----------+-----------------------------+-----------+----------+---------+----------+--------------+-------------  
 id       | integer                     |           | not null |         | plain    |              |   
 info     | text                        |           |          |         | extended |              |   
 crt_time | timestamp without time zone |           |          |         | plain    |              |   
Indexes:  
    "abc_pkey" PRIMARY KEY, btree (id)  
Triggers:  
    tg1 BEFORE INSERT ON stage.abc FOR EACH ROW EXECUTE PROCEDURE v70c22a86a17342eb6cb571349c85274b()  
    tg2 AFTER INSERT ON stage.abc FOR EACH ROW EXECUTE PROCEDURE tg_for_temptable_after_insert_error()  
```  
### 使用限制    
1、说明：目前的版本已支持。truncate暂不支持，请使用delete代替 (或者打patch支持truncate, 社区已支持，如果你使用的是2018.12.27后发布的版本，不需要打PATCH)      
```    
postgres=# truncate stage.abc;    
ERROR:  0A000: cannot truncate temporary tables of other sessions    
LOCATION:  truncate_check_rel, tablecmds.c:1743    
Time: 0.626 ms    
-- delete正常    
delete from stage.abc;    
```    
修正这个truncate问题的PATCH如下    
https://www.postgresql.org/message-id/flat/20181225004545.GB2334%40paquier.xyz#b08f63fab9997cdf09d879aaaa5a01d3    
```  
diff --git a/src/backend/commands/tablecmds.c b/src/backend/commands/tablecmds.c  
index ad8c176793..9dabfc0d36 100644  
--- a/src/backend/commands/tablecmds.c  
+++ b/src/backend/commands/tablecmds.c  
@@ -1416,6 +1416,19 @@ ExecuteTruncate(TruncateStmt *stmt)  
 				/* find_all_inheritors already got lock */  
 				rel = heap_open(childrelid, NoLock);  
+  
+				/*  
+				 * It is possible that the parent table has children that are temp  
+				 * tables of other backends.  We cannot safely access such tables  
+				 * (because of buffering issues), and the best thing to do seems  
+				 * to be to silently ignore them.  
+				 */  
+				if (RELATION_IS_OTHER_TEMP(newrelation))  
+				{  
+					heap_close(rel);  
+					continue;  
+				}  
+  
 				truncate_check_rel(RelationGetRelid(rel), rel->rd_rel);  
 				truncate_check_activity(rel);  
```  
2、copy to 不支持 (copy from 正常)    
原因：copy时，不读取INHERIT表的内容。    
```    
postgres=# copy stage.abc to '/tmp/abc';    
COPY 0    
```    
所以，直接使用临时表名可以COPY TO    
```    
postgres=# copy abc to '/tmp/abc';    
COPY 1000    
postgres=# copy stage.abc from '/tmp/abc';    
COPY 0    
postgres=# select count(*) from stage.abc;    
 count     
-------    
  1000    
(1 row)    
```    
3、由于使用了insert触发器，INSERT时，数据都写入了继承的临时表，所以returning语法无法获得返回行数，记录。    
```    
postgres=# insert into stage.abc values (-1) returning *;    
 id | info | crt_time     
----+------+----------    
(0 rows)    
INSERT 0 0    
```    
4、如果需要修改临时表的表名，必须同时修改触发器函数的内容。    
5、如果要支持insert into on conflict语法，需要在before trigger中支持，那就不能使用通用的触发器了，得定制。   
例子   
```  
1、创建一个schema，放临时表  
create schema IF NOT EXISTS stage;      
2、创建表stage.abc  
drop table if exists stage.abc cascade;      
create table if not exists stage.abc (id int primary key, info text, crt_time timestamptz);       
3、创建这个"stage.abc 表"的触发器，自动基于它创建临时表，并加入它的继承关系  
所有PG版本通用，自定义insert before触发器函数  
create or replace function public.abc_tg1() returns trigger as $$      
declare      
begin      
  -- 如果临时表的定义修改，修改这个触发器的内容，即表名abc，使用你的实际名字替换      
  -- 注意这里不要加schema.，否则就写入非临时表了。      
  -- insert into on conflict改这里  
  insert into abc values (new.*) on conflict(id) do update set info=excluded.info,crt_time=excluded.crt_time;        
  return null;      
  -- 第一次插入会插入普通父表，所以创建父表的AFTER触发器，报错，即回到这里处理。    
  exception when others then    
    -- 根据临时表的业务需要使用  on commit PRESERVE|DELETE rows         
    execute format('create temp table if not exists %I (like %I.%I including all) inherits (%I.%I) on commit PRESERVE ROWS',         
      TG_TABLE_NAME, TG_TABLE_SCHEMA, TG_TABLE_NAME, TG_TABLE_SCHEMA, TG_TABLE_NAME);      
    -- 如果临时表的定义修改，修改这个触发器的内容，即表名abc，使用你的实际名字替换      
    -- 注意这里不要加schema.，否则就写入非临时表了。      
    -- insert into on conflict改这里  