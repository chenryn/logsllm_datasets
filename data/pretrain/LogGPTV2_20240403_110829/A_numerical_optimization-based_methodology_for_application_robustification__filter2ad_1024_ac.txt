tite Graph Matching. 
error tolerant. 
Our methodology 
implementation 
of Bipar­
error tolerant 
are 
pro­
Other combinatorial 
problems. 
A host of other combinatorial  problems 
processors 
by reduction 
on stochastic 
These include 
exactly 
gramming. 
ESTPATH l22J. In addition, 
rithms for many NP-hard problems 
solution 
MAXFLOW, MIN CUT , and SHORT­
algo­
the 
programs 
to linear 
involve 
rounding 
the best approximation 
[221. 
can be solved 
to linear 
pro­
Other numerical problems. 
and eigenvector 
eigenvalue 
The Courant-Fisher 
8.l.21 
Minmax Theorem [131 [Theorem 
of a 
form. Alternatively, 
expresses 
the kth largest 
matrix in variational 
top eigenvalue/eigenvector 
quotient, 
target 
lems, like fitting 
variational 
rithms 
rank-I matrix from the 
Many data fitting 
prob­
are defined as 
gradient 
algo­
problems, 
for them already 
pair by maximizing 
Vector Machines, 
subtracting 
and repeating 
the resulting 
stochastic 
and efficient 
one can find the 
exist [261. 
matrix, 
Support 
k times. 
a Rayleigh 
To summarize, 
the above numerical 
optimization-based 
robust 
precisely 
can be used to make a large class of appli­
-the ones that require 
applications), 
methodology 
cations 
puts (fragile 
ones that that do not (intrinsically 
IIR filters, 
first work on a generic 
tion code for timing error tolerance 
fragile 
etc. To the best of our knowledge, 
out­
correct 
etc., as well as the 
applications), 
and intrinsically 
applications. 
that may work for both 
methodology 
to transform 
sorting, 
applica­
this is the 
robust 
robust 
e.g., 
e.g., 
Measured 
I s I Exponent(11) 
Emulated 
Mantissa(52) 
Figure 3: Measured distribution 
for floating point data versus the distribution 
emulating the behavior. 
of error magnitudes 
used for 
Voltage vs Error Rate of FPU 
  0.14 
 0.12 
 0.1 
e 0.08 
1 II 
 0.06 
"* 0.04 
c: 0.02 o 
0.7  0.8  0.9 
......... 
1.1  1.2 
Supply Voltage 
(V) 
Figure 4: Error Rate of an FPU as the voltage is scaled. 
5. EXPERIMENTS 
5.1 M ethodology 
To evaluate 
the robust versions 
of the above algorithms, 
framework 
Our framework 
we built an FPGA-based 
fault injection. 
trolled 
II EP2S 180 FPGA that hosts a Leon3 III J soft core 
Stratix 
processor. 
us to run the 
stochastic 
on the Leon3 core. 
The FPGA-based 
and baseline 
with support 
consists 
implementations 
framework 
for con­
allows 
of our applications 
of an Altera 
The framework 
is designed 
to provide 
us fine-grained 
was done 
introduce 
in the floating 
we chose to inject 
the FPGA. At random times, 
of the processor. To 
point 
over the stochasticity 
errors 
control 
stochasticity, 
unit (FPU) of the Leon3 core. Error injection 
module that we 
using a software-controlled 
fault injector 
mapped onto 
the fault injector 
perturbs 
one randomly 
before it is committed 
faults 
tional 
occur in the most significant 
primarily 
nitude 
of faults 
to emulate 
was modeled from circuit 
units [181, where many of the errors 
chosen bit in the output of the FPU 
to a register. 
of bit 
level simulations 
of func­
occur in the low order bits, resulting 
point bits, and the distribution 
errors. 
across 
bits. The rest of the faults 
Figure 3 illustrates 
The distribution 
this behavior. 
the measured 
floating 
used 
in low mag­
distribution 
predominantly 
was drawn using a uniform 
generated 
corruptions 
by a Linear Feedback 
The time between 
distribution 
While the fault model is simplistic, 
ering the goal of the paper. Also, the fault model is a sur­
prisingly 
induced 
reasonable 
errors 
approximation 
of voltage 
in the FPU. 
it is appropriate 
consid­
Shift Register. 
overscaling­
978-1-4244-7501-8/10/$26.00 
©2010 IEEE 
166 
DSN 2010: Sloan et al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 13:54:08 UTC from IEEE Xplore.  Restrictions apply. 
2010 IEEE/IFIP 
International 
Conference 
on Dependable 
Systems & Networks (DSN) 
Accuracy of Sort - 10000 Iterations 
100 ... --11- - ..... -- ...... --- __ --
_ Sase _ SGD _ SGD+AS,LS _ SGD+AS,SQS 
80   -------------­
 60 
 40ii=: --
g 20 
  ___ 
:::> (fJ 0L- ___________ 
Fault Rate (% of FLOPs) 
10 20 30 40 50 60 
Accuracy of Least Squares -1000 
Iterations 
gj  _Sase: SVD _ SGD,LS _ SGD+AS,LS 
  :§:::::: 
:: l.00E-01 
;;: 12 l.00E-03 
Q) 
W l.OOE-OS 
 l.00E-07 
Q; a: l.00E-09 
o  10  20  30 
Fault Rate (% of FLOPs) 
40 
Figure 5: Success rate for different  implementations 
Sorting as a function of fault  rate 
of 
Figure 6: Relative error for different 
implementations 
Least Squares as a function of fault rate (Lower is better). 
SQS results in errors larger than 1.0. 
of 
Accuracy of IIR -1000 Iterations 
_ Sase _ SGD,LS _ SGD+AS,LS _ SGD+AS,SOS 
l.00 '-./..""""''-----------
.....,- .... 
0.10 1+------------
0.01 
0.00 l&- __________ 
o 
20  40 
Fault Rate (% of FLOPS) 
_ 
60 
1;; Q; c: W 
Iterations 
Accuracy of Matching -10000 
_ Sase _ SGD, LS _ SGD+AS, LS _ SGD+AS, sos 
'iii 
if-";80 1\ 
oo+----------------
I_ i::Ir----------
(fJ 
Fault Rate (% of FLOPs) 
o  10 20 30 40 
--.---
50 60 
Figure 7: Error-to-Signal 
tions of IIR as a function offault rate (Lower is better) 
ratio for different implementa­
Figure 8: Success rate for different 
partite Graph Matching as a function of fault rate 
implementations 
of Bi­
To calculate 
the energy benefits 
from application 
error rate of the FPU is 
versus 
the relationship 
between 
tifcation, 
a model for voltage 
needed. 
Figure 
age and error rate for the FPU that was used for our energy 
calculations. 
simulations. 
4 represents 
were generated 
The results 
between 
the quality 
as the rel­
of output is measured 
the ideal output and actual 
out-
Least Squares, 
ative difference 
put. (11Ax - bl12 ) For the IIR filter, 
was measured 
and the ratio of the error energy and output signal 
(IIY -Yaciualll/llYll) 
using the mean square error (MSE) metric, 
energy. 
the quality 
of output 
using circuit-level 
robus­
volt­
5.2 Gradient Descent 
To explore 
the feasibility 
of the proposed 
approach 
to 
robustness 
provide 
tic gradient 
IIR filters, 
wide range of fault rates. 
descent 
Bipartite 
and energy benefits, 
(SGD) on four problems, 
Graph Matching, 
We evaluated 
(LS) of the step size, t, and sqrt scaling 
size, Jt, where t is the number of iterations. 
and Sorting 
a 
we evaluated 
stochas­
Least Squares, 
both linear scaling 
(SQS) of the step 
across 
stepping 
to a fixed number of iterations, 
(AS) (see Section 
while 
to the fixed number of iterations 
with a pe­
We also ex­
3.2). In our 
SGD refers 
amined aggressive 
graphs, 
SGD+AS refers 
riod of aggressive 
stepping 
at the end. 
The metric used to describe 
the quality 
For Sorting, 
of output is dif­
the y-axis 
of outputs 
correctly 
for each benchmark. 
ferent 
sents the percentage 
sorted 
sorted number, etc., is considered 
tite Graph Matching, 
of outputs 
array is 
(any undetermined entries 
wrongly 
where the entire 
(NaNs), 
a failure). 
where all the edges are accurately 
represents 
the y-axis 
chosen. 
For 
For Bipar­
repre­
the percentage 
coefficients, 
We chose small problem 
sizes for our evaluations 
due to 
speeds and the need to manu­
identify 
simulation 
is performed 
Graph Matching 
each experiment 
etc.). For sorting, 
(e.g., 
array size is 5 elements. 
A is 100 x 10 and B is 100 x 1. 
low FPGA-based 
ally orchestrate 
parameters, 
For the LSQ problem, 
for a graph with 
Bipartite 
11 nodes and 30 edges. IIR filter uses a lO-tap filter for 
500 input samples. 
tions are used for each of the application 
was implemented 
using the c++ Standard 
(STL). Least Squares 
or Cholesky 
a simple procedural 
Matching 
IIR was implemented 
using 
decompositions. 
4). Bipartite 
(Section 
Graph 
[21. 
using the OpenCV library 
State of the art deterministic 
applica­
Sorting 
Library 
baselines. 
Template 
using SVD, QR, 
was implemented 
was implemented 
routine 
Our evaluations 
were performed 
for different 
fault rates. 
point operations 
We define fault rate to be the inverse 
ber of floating 
that the baseline 
fault rates ( 0.1), due to the small problem 
enough floating 
num­
of the average 
two faults. 
Note 
at very low 
sizes (i.e. 
point operations). 
will not see any errors 
between 
kernels 
not, 
978-1-4244-7501-8/10/$26.00 
©2010 IEEE 
167 
DSN 2010: Sloan et al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 13:54:08 UTC from IEEE Xplore.  Restrictions apply. 
2010 IEEE/IFIP 
International 
Conference 
on Dependable 
Systems & Networks (DSN) 
Accuracy of Matching -10000 
..... Non-robust  ..... Basic,LS  .... sos 
- PRECOND 
Iterations 
..... ANNEAL 
..... ALL 
100 80 60 • 
* a: 
40 
20  "'  
8 :::> (f) 
0 0 
10 
." 
20 
30 
40 
-
50 
60 
our cost function 
can then be rewritten 
as -cT x + 
QR. The cost function 
>.[QRx - bl+. Defining the new y as y =  Rx, allows us 
as -cT x + >.[Qy - bl+ . 
to then rewrite 
We also need to find a Cnew such that cewy =  cewRx = 
cT x. This gives us cewR =  cT which can be rewritten 
=  c. This allows us to solve for cnew. Gradient 
RT Cnew 
-cewy+>'[Qy-bl+. 
descent 
can then be used to minimize 
After finding the y that minimizes 
Rx =  y for x, gives us the answer 
the cost function, 
to the original 
as 
solving 
problem. 
performs 
Figure 
9, shows that the basic gradient 
descent 
and the intrinsically 
Bipartite 
Graph Matching 
algo­
is 
worse than the non-robust 
rithm at low error rates « 5%). Once preconditioning 
performed, 
comparable 
rate. SGD, with preconditioning, substantially  outperforms 
the non-robust 
2%. 
gradient 
to the non-robust 
for up to a 2% fault 
is able to achieve 
Graph Matching 
fault rates above 
an accuracy 
Bipartite 
descent 
version 
Fault Rate (% of FLOPs) 
Figure 9: The effect of enhancements to gradient de­
Graph Matching 
scent on the success rate of Bipartite 
Examining 
the results, 
we see that we are able to 
achieve 
5) performs 
for both the fragile 
applications. 
Sorting 
step size scaling, 
(Figure 
100% accuracy 
but with sqrt step size scaling 
even with large fault rates. 
better 
other hand, performs 
It is also able to get highly 
6), on the 
step size scaling. 
within 10-6% of the exact value computed 
poorly with 
is able 
Least 
with 
Similarly, 
offline 
7) us­
IIR (Figure 
results 
(Figure 
high quality 
robust 
linear 
to achieve 
Squares 
linear 
results, 
with an SVD-based 
ing SGD produces 
compared 
IIR error reduces 
efits of Aggressive 
pronounced 
Bipartite 
for low fault rates « 1 %). 
Graph Matching 
tions of SGD showed little 
increasing 
obtained, 
was limited 
fault rates. 
even using aggressive 
(Figure 
performance 
8) using 10000 itera­
with 
the maximum success 
rate 
stepping 
However, 
to below 50%. 
degradation 
and step scaling, 
Stepping 
for the applications 
baseline. 
several 
to the baseline 
orders of magnitude 
procedural 
with sqrt step scaling. 
further 
The ben­
are most 
less error 
5.3 Gradient Descent Variants 
Gradient 
descent 
fares well at low error rates, 
but the per­
IIR implementation. 
descent. 
However, 
the addition 
5.3.2 Momentum 
accurate 
We also examined 
the use of a momentum of 0.5, so 
as 
for iteration 
t, can be expressed 
problem, 
+0.5*d(t-1). For the Sorting 
the success 
rate 20 - 40% 
momentum improved 
that the search direction 
d(t) =  0.5*6f(t) 
utilizing 
relative 
of momentum provided 
Bipartite 
cess rate was still 
to the basic gradient 
Graph Matching. 
well below 100%. 
only a marginal 
For both applications, 
benefit « 5%), for 
the suc­
5.3.3 Alternate 
Step Size Scaling 
the step size as t, where 
so far. In later itera­
this may cause the step size to be so small that insuffi­
descent 
gradient 
Baseline 
scales 
t is the number of iterations 
executed 
tions, 
cient progress 
ing the step size more slowly, 
scaling 
to the basic gradient 
rate continues 
descent. 
to be less than 40%. 
we see some improvement 
is made per iteration. 
However, 
We thus examine 
as . Again, utilizing 
scal­
step 
in performance 
the solver 
relative 
success 
functions. 
formance 
and with certain 
objective 
which allow gradient 
even at higher error rates. 
point operations 
ber of variables, 
ing. We also compare 
of the baseline 
OpenCV library 
[21 
can fall off very rapidly 
inputs that result 
for some applications 
in poorly conditioned 
Here, we examine 
descent 
to perform 
In these tests, 
several 
consistently 
better 
0-50% of floating 
techniques 
are erroneous. 
we examine 
only Bipartite 
In order to reduce the num­
the results 
of gradient 
Graph Match­
descent 
to that 
Bipartite 
Graph Matching 
routine 
from the 
5.3 .1 Preconditioning 
The basic version 
descent 
of gradient 
_cT x + >'[Ax -bl+. Preconditioning 
the cost function 
so that gradient 
involves 
minimiz­
de­
ing the cost function 
allows us to rewrite 
scent is solving 
tioning 
by taking 
nal matrix Q and a right triangular 
We perform 
the QR decomposition 
problem. 
an easier 
matrix R such that A = 
to get an orthogo­
precondi­
of the penalty 
to the gradient 
function 
calculation 
can impede 
(corresponding 
the solution, 
compared 
5.3 .4 Annealing 
The contribution 
to the constraints) 
towards 
progress 
scaled 
are poorly 
be mitigated 
parameter 
closer 
annealing 
success 
eration 
rate even with roughly 
containing 
by annealing 