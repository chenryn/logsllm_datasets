title:Proactive Security Analysis of Changes in Virtualized Infrastructures
author:S&quot;oren Bleikertz and
Carsten Vogel and
Thomas Groß and
Sebastian M&quot;odersheim
Proactive Security Analysis of Changes
in Virtualized Infrastructures
Sören Bleikertz
∗
Carsten Vogel
IBM Research - Zurich
{sbl,ten}@zurich.ibm.com
Thomas Groß
Sebastian Mödersheim
Newcastle University
PI:EMAIL
DTU Compute
PI:EMAIL
ABSTRACT
The pervasiveness of cloud computing can be attributed to
its scale and elasticity. However, the operational complexity
of the underlying cloud infrastructure is high, due to its
dynamics, multi-tenancy, and size. Misconﬁgurations and
insider attacks carry signiﬁcant operational and security
risks, such as breaches in tenant isolation put both the
infrastructure provider and the consumers at risk.
We tackle this challenge by establishing a practical secu-
rity system, called Weatherman, that proactively analyzes
changes induced by management operations with respect
to security policies. We achieve this by contributing the
ﬁrst formal model of cloud management operations that cap-
tures their impact on the infrastructure in the form of graph
transformations. Our approach combines such a model of
operations with an information ﬂow analysis suited for iso-
lation as well as a policy veriﬁer for a variety of security
and operational policies. Our system provides a run-time
enforcement of infrastructure security policies, as well as a
what-if analysis for change planning.
1.
INTRODUCTION
Multi-tenant virtualized infrastructures oﬀer self-service
access to a shared physical infrastructure with compute,
network, and storage resources. While administrators of
the provider govern the infrastructure as a whole and the
tenant administrators operate in partitioned logical resource
pools, both groups change the conﬁguration and topology of
the infrastructure. For example, they create new machines,
modify or delete existing ones, causing large numbers of
virtual machines to appear and disappear, which leads to
the phenomenon of server sprawl. Therefore, self-service
administration, dynamic provisioning and elastic scaling lead
to a great number of conﬁguration and topology changes,
which results in a complex and highly dynamic system.
Misconﬁgurations and insider attacks are the adverse re-
∗
Work done at IBM, now aﬃliated with Hylastix, cv@hylastix.com.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ACSAC ’15, December 07 - 11, 2015, Los Angeles, CA, USA
c(cid:2) 2015 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ISBN 978-1-4503-3682-6/15/12. . . $15.00
DOI: http://dx.doi.org/10.1145/2818000.2818034
51
sults of such complex and dynamic systems. Indeed, even if
committed unintentionally, misconﬁgurations are among the
most prominent causes for security failures in IT infrastruc-
ture [20]. Notably, according to studies by ENISA [7] and
CSA [6], operational complexity, which leads to misconﬁgu-
ration and security failures, as well as isolation failures are
among the top threats in virtualized infrastructures. Isola-
tion failures put both the provider as well as the consumers
at great risk due to potential loss of reputation and the
breach of conﬁdential data. Further, malicious insiders and
their attacks are considered a top, very high impact security
risk. Consider an example of isolation breach from miscon-
ﬁguration, which we encountered in the security analysis of
a ﬁnancial institution’s in-house VMware-based production
cloud: An administrator performed a wrong VLAN ID con-
ﬁguration change leading to an unnoticed network isolation
breach between the high-security and the test security zone.
Core Idea: In combating such security failures, the as-
sessment of conﬁguration changes and rigorous enforcement
of security policies is a crucial requirement. It is important
to establish whether an intended conﬁguration change will
compromise the security of the system before the change
is deployed. We build a practical analysis system, called
Weatherman, that uses a model-based approach for assessing
conﬁguration changes and their impact on the security com-
pliance of a virtualized infrastructure. We call our system
proactive as changes are analyzed before they are deployed.
Facing an intended conﬁguration change, Weatherman
needs to establish how the infrastructure would be aﬀected.
Our operations transition model (§3.1) covers security-relevant
operations and models their impact on the infrastructure
conﬁguration and topology in a graph rewriting language.
For our example, it contains a model of the VMware opera-
tion UpdatePortGroup encoding how VLAN ID changes aﬀect
the network. Having established a what-if infrastructure
model for the intended change, the next important question
is: How does the information ﬂow and isolation change in
the system? Weatherman performs an information ﬂow anal-
ysis in the what-if infrastructure model as an intermediary
step to determine isolation properties (§3.2). Finally, the
infrastructure model is checked against a variety of security
and operational policies, which are implemented as graph
matches and evaluated by the graph transformation engine
(§3.3). Overall, our system establishes whether a future con-
ﬁguration change will constitute a security compromise and
rejects the change if a violation is detected (§4).
Our contributions are the following: 1) We propose the
ﬁrst formal model of cloud management operations, the op-
erations transition model, that captures how such operations
change the infrastructure’s topology and conﬁguration. We
express the operations as transformations of a graph model
of the infrastructure, which is based upon the formalism of
graph transformation [23]. 2) We propose a uniﬁed model
that integrates with the operations model the speciﬁcation
of security policies as well as an information ﬂow analysis
suited for isolation policies. We formalize a variety of poli-
cies, such as in the areas of isolation, dependability, and
operational correctness using graph matching. 3) Based on
our model, we design and implement a practical security
system, called Weatherman, which assesses and proactively
mitigates misconﬁgurations and security failures in VMware
infrastructures. We analyze and discuss the security of our
system for a practical deployment environment.
2. SYSTEM AND SECURITY MODEL
In Fig. 1 we illustrate our model of a virtualized infrastruc-
ture, which consists of (virtualized) computing, networking
and storage resources that are conﬁgured through a well-
deﬁned management interface. We consider multiple admin-
istrators with diﬀerent privileges, where the provider admin-
istrators govern the entire virtualized infrastructure, and
tenant administrators manage an assigned logical resource
pool. The model is poised towards a proactive analysis
based on operations that are intercepted at the management
host and the analysis system operates on a model of the
virtualized infrastructure.
(cid:38)(cid:4)(cid:9)(cid:10)(cid:24)(cid:20)(cid:14)(cid:11)(cid:31)(cid:9)(cid:10)
(cid:39)(cid:20)(cid:20)(cid:19)(cid:40)(cid:9)(cid:30)(cid:36)
(cid:29)(cid:20)(cid:30)(cid:2)(cid:6)(cid:7)(cid:3)(cid:13)(cid:14)(cid:1)(cid:10)(cid:9)(cid:31)(cid:13)(cid:27)(cid:7)(cid:27)
(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:2)(cid:6)(cid:7)(cid:3)(cid:8)(cid:14)(cid:15)(cid:11)(cid:32)(cid:11)(cid:17)
(cid:20)(cid:28)(cid:2)(cid:6)(cid:3)(cid:4)(cid:2)(cid:26)(cid:13)(cid:20)(cid:8)
(cid:23)(cid:9)(cid:10)(cid:9)(cid:24)(cid:20)(cid:21)(cid:20)(cid:10)(cid:3)
(cid:25)(cid:26)(cid:20)(cid:6)(cid:9)(cid:3)(cid:7)(cid:5)(cid:10)(cid:27)
(cid:11)(cid:5)(cid:31)(cid:7)(cid:30)(cid:13)
(cid:32)(cid:20)(cid:30)(cid:7)(cid:27)(cid:7)(cid:5)(cid:10)
(cid:16)(cid:2)(cid:3)(cid:17)(cid:18)(cid:19)(cid:3)(cid:4)(cid:18)(cid:20)(cid:8)(cid:13)(cid:21)(cid:20)(cid:22)(cid:2)(cid:17)(cid:13)(cid:20)(cid:23)(cid:13)(cid:9)(cid:18)(cid:6)(cid:4)(cid:24)(cid:3)(cid:17)(cid:18)(cid:19)(cid:2)(cid:22)(cid:13)(cid:25)(cid:8)(cid:23)(cid:6)(cid:3)(cid:26)(cid:4)(cid:6)(cid:24)(cid:27)(cid:4)(cid:24)(cid:6)(cid:2)
(cid:33)(cid:23)(cid:27)
(cid:33)(cid:23)(cid:27)
(cid:18)(cid:34)(cid:37)(cid:38)
(cid:11)(cid:6)(cid:5)(cid:18)(cid:7)(cid:19)(cid:20)(cid:6)(cid:14)(cid:1)(cid:19)(cid:21)(cid:7)(cid:10)
(cid:20)
(cid:30)
(cid:9)
(cid:41)
(cid:6)
(cid:20)
(cid:10)
(cid:3)
(cid:37)
(cid:14)
(cid:7)
(cid:20)
(cid:30)
(cid:18)
(cid:6)
(cid:20)
(cid:29)
(cid:10)
(cid:5)
(cid:7)
(cid:3)
(cid:9)
(cid:8)
(cid:7)
(cid:6)
(cid:5)
(cid:4)
(cid:3)
(cid:2)
(cid:1)
(cid:17)
(cid:11)
(cid:16)
(cid:11)
(cid:15)
(cid:14)
(cid:13)
(cid:12)
(cid:5)
(cid:6)
(cid:11)
(cid:3)
(cid:10)
(cid:20)
(cid:21)
(cid:20)
(cid:24)
(cid:9)
(cid:10)
(cid:9)
(cid:23)
(cid:3)
(cid:27)
(cid:5)
(cid:28)
(cid:28)(cid:5)(cid:27)(cid:3)
(cid:18)(cid:29)(cid:35)(cid:7)(cid:3)(cid:30)(cid:4)
(cid:11)(cid:5)(cid:6)(cid:3)(cid:24)(cid:6)(cid:5)(cid:2)(cid:26)(cid:27)
(cid:28)(cid:5)(cid:27)(cid:3)
(cid:18)(cid:29)(cid:35)(cid:7)(cid:3)(cid:30)(cid:4)
(cid:9)(cid:10)(cid:11)(cid:12)(cid:13)(cid:14)
(cid:11)(cid:5)(cid:6)(cid:3)(cid:24)(cid:6)(cid:5)(cid:2)(cid:26)(cid:27)
(cid:9)(cid:10)(cid:11)(cid:12)(cid:13)(cid:15)
(cid:28)(cid:5)(cid:27)(cid:3)
(cid:18)(cid:29)(cid:35)(cid:7)(cid:3)(cid:30)(cid:4)
(cid:22)(cid:20)(cid:10)(cid:9)(cid:10)(cid:3)(cid:14)(cid:1)(cid:19)(cid:21)(cid:7)(cid:10)
(cid:34)(cid:20)(cid:3)(cid:35)(cid:5)(cid:6)(cid:36)
(cid:29)(cid:3)(cid:5)(cid:6)(cid:9)(cid:24)(cid:20)
Figure 1: The System Model consists of a topology
model of the virtualized infrastructure, an autho-
rization proxy as Policy Enforcement Point, and a
run-time security analysis of operations.
We represent the virtualized infrastructure in a graph
model, called Realization model [4], which is an undirected,
vertex typed and attributed graph. The vertices of the graph
represent the components of the virtualized infrastructure,
which may be entire sub-systems, such as physical servers
or virtual machines, or low-level components, such as vir-
tual network interfaces. Vertices are typed, e.g., type vm
denotes a virtual machine, and annotated with name/value
attributes. The attributes encode detailed properties of the
components and capture their conﬁguration. The edges of
the graph represent the connections and relationships among
components of the virtualized infrastructure, encoding its
topology. Fig. 1 illustrates the Realization model, which
spans compute, network, and storage resources. In particu-
lar, we illustrate the networking part in more detail. Physical
hosts and their hypervisors provide networking to VMs by
virtual switches that connect the VMs to the network. A
virtual switch contains virtual ports, to which the VMs are
52
connected via a virtual network interface card (vNIC). Vir-
tual ports are aggregated into port groups, which apply a
common conﬁguration to a group of virtual ports. Virtual
LANs (VLANs) allow a logical separation of network traﬃc
between VMs by assigning distinct VLAN IDs to the port
groups. Our network model is focused on the OSI Layer2.
The Realization model is populated through an automated
extraction of the conﬁguration of the virtualized infrastruc-
ture from the central management host and the translation
of the conﬁguration into graph nodes and vertices. For each
element in the conﬁguration, such as a virtual machine, it
constructs a corresponding model vertex and populates the
required attributes. To ensure a complete translation of all
relevant elements in the conﬁguration, an element is either
translated or explicitly ignored. A translation warning is
thrown for unhandled elements. Since we are dealing with
a dynamic infrastructure, we also need to keep the graph
model of the infrastructure in sync. For this, we continu-
ously monitor the virtualized infrastructure for changes and
translate the observed changes into updates of the graph
model using an approach presented in [5].
Threat Model: We establish a threat model based on
the dependability taxonomy [1]. Agents, users and admin-
istrators can be malicious or non-malicious. Thereby, we
cover all classes of human-made faults. Faults can be intro-
duced deliberately as result of a harmful decision or without
awareness; faults can be introduced accidentally or by in-
competence. These fault classes include misconﬁgurations as
well as malicious attacks and resulting security failures and,
thereby, constitute a strong adversary model. Agents that
operate on behalf of a human are canonically covered by this
threat model, because the threat model is independent from
the issuer of an operation. Combined with the system model
covering compute, network and storage, this threat model
allows for a comprehensive security analysis of virtualized
infrastructures. As constraints, the adversary is bound to the
well-deﬁned management host API and cannot subvert the
communication between the management hosts and the anal-
ysis system. In §5.1 we assess secure deployment approaches
to realize such a constraint in practice. The software security
of the management host and the hypervisors is out of scope.
3. A MODEL OF DYNAMIC VIRTUALIZED
INFRASTRUCTURES
We capture multiple aspects relevant for the analysis and
integrate them into a uniﬁed model based on graphs and
graph transformations. We represent the topology and con-
ﬁguration of the virtualized infrastructure, establish how the
infrastructure can be changed by management operations,
and verify the infrastructure with regard to security policies.