the exchange collects a fee from each trade between the
users. Most exchanges also charge a withdrawal fee, and
some exchanges collect fees even when the users place
bid and ask orders.
Still,
there have been many thefts of funds from
centralized exchanges (cf. [25]). About 650,000 bitcoins
were lost when the MtGox exchange shut down in
February 2014 [38], and the users of the Bitﬁnex
exchange lost 120,000 bitcoins in August 2016 [6].
3.2 Exchange with Off-chain Channels and
TTP
In this design, each user establishes off-chain bi-
directional payment channels [61, 22, 50] with a semi-
TTP server S, one channel for each cryptocurrency that
the user wishes to trade in. This produces a hub and
spoke network structure, see Figure 3 for an illustration
of trading among the Bitcoin, Ethereum, and Litecoin
cryptocurrencies.
The traders will then communicate their bid and ask
orders to S. Whenever the orders of two traders match,
they will send an instant off-chain payment to S, and S
will route the funds of one trader to the other.
It
is better for each individual
to trade in small
amounts, because the TTP can always steal the most
recent amount that was funneled through S. However,
this recommendation is in conﬂict with the common
behavior of large traders, who frequently create big
bid/ask “walls”.
In any case, even if the amount in each trade is small,
the risk of theft by a corrupt TTP remains high. This
4
Figure 3: Exchange via off-chain channels.
is because the aggregate amount that all the traders
funnel through S at a particular point in time can be
substantial. As an example that does not involve an
exchange but demonstrates this point, the online wallet
service Inputs.io made it attractive for users to deposit
small amounts, and then ran away with more than 4000
bitcoins [52].
Another major drawback of this approach is that the
TTP has to lock matching collateral for each off-chain
payment channel of each trader, due to nature of off-
chain bi-directional channels. It is therefore likely that
the exchange service would need to impose high fees on
its users.
3.3 Non-real-time Exchanges
There are many non-real-time exchanges. We mention a
few to illustrate important points in the design space.
ShapeShift [72] is a centralized matching service
that mitigates the risks associated with a full-ﬂedged
exchange by necessitating that each trader will deposit
only a small amount of cryptocurrency for a short period
of time. If a quick match is available then ShapeShift will
execute the trade, otherwise it will immediately refund
the cryptocurrency to the trader (i.e., via a transaction on
the blockchain). ShapeShift does not support real-time
trades and price discovery. It fetches the current prices
from centralized exchanges.
Since ShapeShift is rather popular,
the aggregated
amount of funds that can be stolen is likely to be
substantial. In this sense, ShapeShift does not solve the
systemic risk that centralized exchanges entail.
EtherDelta [64] is a non-real-time non-cross-chain
decentralized exchange that has been operational
since July 2016, with quite a signiﬁcant amount of
popularity—particularly for the ﬁrst listings of Initial
Coin Offerings (ICO). However, EtherDelta is vulnerable
to frontrunning attacks, see [12].
BitShares [70] offers a cryptocurrency exchange that
It is not real-time,
does not rely on trusted parties.
BobETHBobBTCCarolBTCLTCCarolAliceETHAliceLTCAliceBTCSTable 1: Comparison of Cryptocurrency Exchanges
Trust DoS Collateral
yes minor
no
semi minor from TTP
semi minor
SGX minor
no
no
Centralized
TTP/channels
(Section 3.2)
ShapeShift
Tesseract
Front-
running
Price
Discovery
yes
yes
yes
no
yes
yes
no
yes
but relatively fast due to a delegated proof-of-stake
consensus protocol in which blocks are created every
few seconds by central committee members (who may
engage in frontrunning attacks, see Section 4.2).
Traders ﬁrst convert their cryptocurrency to IOUs in
the BitShares system, and later convert these IOUs to
the native BitShares cryptocurrency (BTS) according
to an up-to-date exchange rate that is set by elected
representatives that the BitShares stakeholders voted for.
See [70, Section 2] and [76] regarding the risk of market
manipulation with this approach.
The BTS cryptocurrency that traders ultimately obtain
can be exchanged for other cryptocurrencies by means
that are again external
to the BitShares system —
centralized exchanges (a.k.a. gateways) are commonly
used for this task.
Exchange Based on Mutual Distrust:
Instead of
relying on trusted hardware,
it would be possible in
principle to operate an exchange service (similar to
Tesseract) as a logical server that is implemented via
multiple physical servers that are distrustful of each
other.
Traders will need to send their bid/ask requests using
threshold encryption [23] in order to avoid frontrunning
attacks (see Section 4.2), and the physical servers
will run a Byzantine consensus protocol and sign the
settlement transactions (cf. Section 4) with a threshold
signature scheme [30]. An honest majority among the
physical servers can guarantee protection from theft.
Since the physical servers would need to reside in
different geographical locations to provide meaningful
security, and since Byzantine agreement with threshold
decryption has to be performed for each of the users’
orders, the latency of a mutual distrust based exchange
would probably be measured in seconds (depending
on the number of physical servers).
By contrast,
the responsiveness of Tesseract can be measured in
milliseconds.
4 The Tesseract Design
The Tesseract exchange achieves its security and
performance goals by relying on a trusted execution
environment, speciﬁcally SGX. Intel Software Guard
Extensions (SGX) is a hardware architecture that enables
code execution in an isolated, tamper-free environment.
Intel SGX can also attest
that an output represents
the result of such an execution, and allows remote
users to make sure that the attestation is correct. The
remote attestation feature is essential for Tesseract, for
reasons that will soon become clear (cf. Section 4.3 for
further discussion). For more information on the SGX
architecture, see [1, 35, 34, 51].
The operation of Tesseract is illustrated in Figure 4.
The enclave code is hardcoded with the hash of the
Bitcoin genesis block, or a more recent “checkpoint”
block of the Bitcoin blockchain. When the execution
starts, the enclave receives the latest block headers from
an untrusted Bitcoin client that runs on the same server
machine. Each header has its PoW validated against the
difﬁculty rule of the Bitcoin protocol, and is then added
to a FIFO queue that is stored inside the enclave. The
size of the queue is set according to a parameter that
speciﬁes the maximum time window that the enclave
maintains. For instance, 8064 Bitcoin block headers
would correspond to a 2-month window (when header
8065 is added the ﬁrst header will be removed, and so
on). The enclave will also maintain the same kind of
queue for every other cryptocurrency that is supported
by the Tesseract exchange service. We note that Bitcoin
and Litecoin block headers are 80 bytes each, and an
Ethereum block header is ≈ 512 bytes.
After
initialization,
the enclave invokes a key
generation procedure to create a keypair (sk, pk) for each
supported cryptocurrency. The randomness that we feed
to the key generator is obtained by concatenating several
sources: the RDRAND instruction that sgx read rand()
uses for hardware-based randomness, the hashes of the
latest blockchain blocks, OS provided randomness via
/dev/random, and the SGX trusted clock. Each of these
sources increases the entropy of the random data, and
therefore reduces the likelihood that an adversary will
have knowledge of the secret key sk.
The enclave will then attest [35] that a public key
pk is its deposit address, for each cryptocurrency. The
attestation to these public keys should be published
through multiple services (such as websites, IPFS [11],
and even Bitcoin and other blockchains).
As an
example, Figure 4 shows two such deposit addresses
PKSGXBTC,PKSGXLTC, for Bitcoin and Litecoin. The
anti-DoS component that we describe in Section 6 is also
useful for making sure that the attested deposit addresses
will be publicly known.
5
this public key PKSGXBTC is hardcoded in the output
and the spending is done by creating a signature with
the corresponding secret key SKSGXBTC). After the
time limit, the user can gain back control of her money
by signing with a secret key that only she knows.
In
cryptocurrencies such as Bitcoin and Litecoin, the time
limit can be expressed in the output script via the
CHECKLOCKTIMEVERIFY instruction [77]. Technically,
SKSGXBTC can still spend the output after the time limit
(since Bitcoin transactions should be reorg safe [55, 77]),
but this is not guaranteed because the user may also
spend the output then. This deposit format ensures
that the funds will safely be restored to the user if the
Tesseract server becomes unavailable.
We note that the enclave is hardcoded with the current
difﬁculty parameter of each PoW-based blockchain. At
the beginning of the execution, the enclave will fetch
blocks from genesis (or the more recent checkpoint), and
verify that the chain reaches a block of the hardcoded
difﬁculty level. This prevents an adversary (who has
physical control of the Tesseract server) from feeding
a low-difﬁculty fake chain to the enclave. The enclave
updates the PoW difﬁculty level by inspecting the
timestamps of block headers in the FIFO queue and
applying the consensus rules of the cryptocurrency
system (the queue size must be at least as the adjustment
interval, which is 2016 for Bitcoin). This implies that
an adversary cannot feed low-difﬁculty blocks to the
enclave at a later time. The users of the Tesseract
exchange can gain extra security by inspecting the latest
block of each traded cryptocurrency and verifying (via
remote attestation) that the enclave has the latest blocks,
see Section 4.1 for details.
Malicious users may try to carry out a DoS attack
on the Tesseract server by attempting to open many
new accounts while providing fake deposits as evidence.
Currently, Bitcoin blocks contain less
than 4000
transactions, which implies that the authentication path
requires 12 or fewer sibling nodes of the Merkle tree,
and hence 12 invocations of a hash function. Thus, the
time complexity of verifying the validity of a deposit is
quite low. To further mitigate the prospects of a DoS
attack, the enclave may require a moderate PoW done on
the entire evidence data of the deposit (that the user will
compute on her own), or simply limit the number of new
account requests per timeframe.
One reason that the enclave maintains a queue of
headers and fetches the additional block conﬁrmations
from the queue — as opposed to asking the user
to concatenate the extra conﬁrmations as part of the
evidence of the deposit — is that the queue provides an
undisputed point of reference in the form of the genesis
(or checkpoint) block. That is to say, if there are two
blockchains that use the same hash function for PoW and
Figure 4: Illustration of deposits followed by bids/asks.
In fact, it is better if the deposit address is a hash of
the public key, as this increases security and reduces
the size of unspent outputs on the public ledger. For
example, a 257-bit compressed ECDSA public key gives
128 bits of security at most, while 160-bit hash digest of
the 257-bit public key will give 160 bits of security (if
the hash function is preimage-resistant). This is done in
our implementation via P2SH [2] (P2WPK/P2WSH [42]
can be used post-SegWit). Note that there is no point in
mounting a collision attack on a scriptless address [5].
The settlement transaction (see next) will expose the
public key, but potential attacks would then have a short
timeframe until the transaction becomes irreversible.
Hence, for maximal security the enclave will generate
and attest to a fresh deposit address after each settlement.
When a new user wishes to open a Tesseract account,
she ﬁrst needs to deposit a signiﬁcant enough amount
into a deposit address of the exchange. After the
deposit transaction is conﬁrmed on the blockchain, the
(GUI client of the) user will transform the conﬁrmed
deposit into evidence that will be sent to the enclave.
This evidence consists of the transaction that spends
the coins into a deposit address of Tesseract, as well
as an authentication path that consists of the sibling
nodes in the Merkle tree whose root is stored in a
block header, and the index of that block. Tesseract
will credit
the user’s account (in the enclave) after
verifying that the deposit transaction is valid, that the
block B that contains the deposit belongs to the enclave’s
headers queue, and that B is buried under enough
additional conﬁrmations (see Section 4.1 for security
analysis). Tesseract also protects against replay attacks,
by requiring strictly increasing block indices for the
user’s deposits.
In Figure 4, the evidence that Alice
provides is Deposit(TXA).
As shown in Figure 4, the output of a valid deposit
transaction needs to specify a time limit (e.g.,
two
weeks). Before the limit is reached, only the enclave
can spend the deposit amount (for a Bitcoin deposit,
6
Alice  if block# > T0+2000    sigverify PKA  else    sigverify PKSGXBTC----------------------  amount: 5  sigverify PKA--------------------  amount: 5TXA  if block# > T1+8000    sigverify PKB  else    sigverify PKSGXLTC----------------------  amount: 600  sigverify PKB--------------------  amount: 600TXBBitcoin:T0Litecoin:BobSGX real-time exchangeDeposit(TXA)Bid(3 BTC, price=310:1) Bid(1 BTC, price=305:1) Deposit(TXB)Ask(500 LTC, price=299:1) GenesisT1Genesis11232have a similar difﬁculty level, then a malicious user could
deceive the enclave into accepting a deposit transaction
that was conﬁrmed on an incorrect blockchain. This
approach also reduces the communication complexity
between the Tesseract server and remote users.
After the user registers with Tesseract, her deposited
amount is credited into her account entry in the array of
users that is stored inside the enclave. Next, the user will
be able to trade in real-time with other users who opened
a Tesseract account, by sending bid/ask orders to the
Tesseract server via a secure channel (see Section 4.2).
If the user wishes to deposit other currencies into her
account, she can then send similar authentication paths
as evidence.
opens
an
4, Bob
In Figure
account with
Deposit(TXB), and then asks to sell 500 LTC for
the price of 299 LTC per BTC. Since Alice’s bids are
with a price of 305 LTC per BTC and higher, there is
no match yet, and the requests of Alice and Bob are
recorded in the order book kept inside the enclave. Each
user can request her recent trading history via the secure
channel, and cancel her pending orders. The Tesseract
server publishes an anonymized version of the order
book (i.e., price and volume of each order, without
usernames) with remote attestation; hence anyone can
observe the price spread of the exchange. Since order
book updates can occur at a very rapid rate, we reduce
the amount of SGX attestations via delayed randomized
checkpoints: the enclave always outputs the anonymized
order book without a signature, and outputs a delayed
attestation (that include an incremental counter) only
for randomly selected data points. The administrator
of the Tesseract server provides her part of the double
attestation for all the data points (using HTTPS, see
Section 4.3). Thus, an administrator that publishes fake
order book data repeatedly will be detected w.h.p.
Real-time trading among the users will cause frequent
updates to the balances of their accounts inside the
enclave, but these updates are not reﬂected on the actual
cryptocurrency systems yet.
If nothing else were to
happen,
the entire process would just be a sandbox
or playground, as the users will simply claim their
original money after the time limit of their deposits
is reached. Therefore, from time to time (e.g., once
a day) Tesseract will broadcast to the cryptocurrency
networks “settlement” transactions that commit
the