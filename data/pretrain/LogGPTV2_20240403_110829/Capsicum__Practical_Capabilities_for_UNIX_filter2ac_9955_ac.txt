### 1. Introduction

The `dhclient` process, identified by the PID 18988, is a critical component in network configuration, particularly for DHCP (Dynamic Host Configuration Protocol) clients. The following analysis will focus on the capabilities and security concerns associated with `dhclient`, as well as potential improvements using Capsicum, a capability-based security framework.

### 2. Current Capabilities of `dhclient`

Below is a list of file descriptors and their corresponding capabilities held by `dhclient` before any Capsicum changes:

| FD | T | FLAGS | CAPABILITIES | PRO | NAME |
|----|---|-------|--------------|-----|------|
| 0  | v | rw------- | - | /dev/null |
| 1  | v | rw------- | - | /dev/null |
| 2  | v | rw------- | - | /dev/null |
| 3  | s | rw------- | - | - |
| 5  | s | rw------- | - | - |
| 6  | p | rw------- | - | - |
| 7  | v | -w------- | - | - |
| 8  | v | rw------- | - | - |
| 9  | s | rw------- | - | - |
| -  | - | - | - | - | UDD /var/run/logpriv |
| -  | - | - | - | - | IP? 0.0.0.0:0 0.0.0.0:0 |
| -  | - | - | - | - | /var/db/dhclient.leas |
| -  | - | - | - | - | /dev/bpf |

**Figure 10:** Capabilities held by `dhclient` before Capsicum changes: several unnecessary rights are present.

### 3. Security Concerns and Improvements

#### 3.1. Existing Privilege Separation

FreeBSD includes the OpenBSD DHCP client, which supports privilege separation. The DHCP client must run with elevated privileges to open BPF (Berkeley Packet Filter) descriptors, create raw sockets, and configure network interfaces. This makes it an attractive target for attackers, as it exposes network code to a complex packet format while running with root privileges.

The current approach to sandboxing involves:
- Starting as the root user.
- Opening necessary resources (raw socket, BPF descriptor, lease configuration file).
- Forking a process to continue privileged activities.
- Confining the parent process using `chroot` and `setuid` system calls.

Despite these measures, the confinement is weak. `chroot` only limits filesystem access, and switching credentials offers poor protection against weak or incorrectly configured DAC (Discretionary Access Control) protections on the `sysctl` and PID namespaces.

#### 3.2. Enhancing Security with Capsicum

By making a small change similar to that in `tcpdump`, we can reinforce or replace existing sandboxing with Capsicum's capability mode. This instantly denies access to previously exposed global namespaces while permitting continued use of held file descriptors. It is crucial to analyze what capabilities have been leaked into the sandbox, as this is the key limitation of this approach.

**Figure 10** shows a `procstat -fC` analysis of the file descriptor array. The existing `dhclient` code effectively eliminates directory access but still allows the sandbox direct rights to submit arbitrary log messages to `syslogd`, modify the lease database, and perform a broad variety of operations on a raw socket. These capabilities are particularly concerning due to `ioctl`, which, although `dhclient` has given up system privilege, allows access to system information. Capsicum's capability mode blocks these operations.

#### 3.3. Extending Privilege Separation

It is feasible to extend the existing privilege separation in `dhclient` to use Capsicum's capability facility to further constrain file descriptors inherited in the sandbox environment. For example, limiting the use of the IP raw socket to `send` and `recv` and disallowing `ioctl`. Using the `libcapsicum` API would require more significant code changes, but since `dhclient` already adopts a message-passing structure to communicate with its components, it would be relatively straightforward. This would offer better protection against capability and memory leakage. Further migration to message passing would prevent arbitrary log messages or direct unformatted writes to `dhclient.leases.em` by constraining syntax.

### 4. Case Study: `gzip`

The `gzip` command-line tool is an interesting target for conversion to Capsicum for several reasons:
- It implements risky compression/decompression routines that have suffered past vulnerabilities.
- It contains no existing compartmentalization.
- It executes with ambient user (rather than system) privileges.

Historic UNIX sandboxing techniques, such as `chroot` and ephemeral UIDs, are a poor match for `gzip` because they require privileges and do not provide the desired security properties when multiple `gzip` sessions run independently for different users.

#### 4.1. Identifying Fault Lines

The first step is to identify natural fault lines in the application. In `gzip`, the main run loop processes command-line arguments, identifies streams and objects to process, and feeds them to compression routines that accept input and output file descriptors. This suggests a partitioning where pairs of descriptors are submitted to a sandbox for processing after the ambient privilege process opens them and performs initial header handling.

#### 4.2. Implementing Capsicum in `gzip`

We modified `gzip` to use `libcapsicum`, intercepting three core functions and optionally proxying them using RPCs to a sandbox based on policy queried from `libcapsicum`. Each RPC passes two capabilities, for input and output, to the sandbox, as well as miscellaneous fields such as returned size, original filename, and modification time. By limiting capability rights to a combination of `CAP_READ`, `CAP_WRITE`, and `CAP_SEEK`, a tightly constrained sandbox is created, preventing access to any other files in the filesystem or other globally named resources if a vulnerability in the compression code is exploited.

These changes added 409 lines (about 16%) to the size of the `gzip` source code, primarily for marshaling and un-marshaling RPCs. Initially, we observed a performance improvement, which was due to a failure to propagate the compression level (a global variable) into the sandbox, leading to incorrect algorithm selection. This underscores the need for careful analysis when adapting code not originally written for decomposition.

#### 4.3. Design Considerations

Compartmentalization of `gzip` raises important design questions. While the changes were small, they were non-trivial. One possibility is a Principle of Least Authority Shell (PLASH), where the shell runs with ambient privilege and pipeline components are placed in sandboxes by the shell. We are exploring this approach on Capsicum, but observe that the design tension exists: `gzip`'s non-pipeline mode performs operations requiring ambient privilege, and logic like this may be equally awkward if placed in the shell. On the other hand, when operating purely in a pipeline, the PLASH approach offers the possibility of near-zero application modification.

Another area of exploration is library self-compartmentalization. With this approach, library code sandboxes portions of itself transparently to the host application. This motivated several of our design choices, especially regarding the process model. However, library APIs are often not crafted for sandbox-friendliness, which is why we placed separation in `gzip` rather than `libz`.

### 5. Case Study: Chromium

Google's Chromium web browser uses a multi-process architecture to improve robustness. Each tab is associated with a renderer process that performs the risky and complex task of rendering page contents through page parsing, image rendering, and JavaScript execution. Recent work on Chromium has integrated sandboxing techniques to improve resilience to malicious attacks.

#### 5.1. Existing Compartmentalization

The FreeBSD port of Chromium did not include sandboxing, and the sandboxing facilities provided on Linux and Mac OS X bear little resemblance to Capsicum. However, the existing compartmentalization meant that several critical tasks had already been performed:
- Chromium assumes that processes can be converted into sandboxes that limit new object access.
- Certain services were already forwarded to renderers, such as font loading via passed file descriptors.
- Shared memory is used to transfer output between renderers and the web browser.
- Chromium contains RPC marshalling and passing code in all the required places.

#### 5.2. Integrating Capsicum

The only significant Capsicum change to the FreeBSD port of Chromium was to switch from System V shared memory (permitted in Linux sandboxes) to POSIX shared memory (capability-oriented and permitted in Capsicum's capability mode). Approximately 100 additional lines of code were required to introduce calls to `lc_limitfd` to limit access to file descriptors inherited by and passed to sandbox processes, such as Chromium data pak files, stdio, and `/dev/random`, font files, and to call `cap_enter`.

This compares favorably with the 4.3 million lines of code in the Chromium source tree, but would not have been possible without existing sandbox support in the design. We believe it should be possible, without a significantly larger number of lines of code, to explore using the `libcapsicum` API directly.

### 6. Comparison of Sandboxing Technologies

We now compare Capsicum to existing sandbox mechanisms. Chromium provides an ideal context for this comparison, as it employs six sandboxing technologies (see Figure 12).

| Operating System | Model | Line Count | Description |
|------------------|-------|------------|-------------|
| Windows          | ACLs  | 22,350     | Windows ACLs and SIDs |
| Linux            | chroot | 605        | setuid root helper sandboxes renderer |
| Mac OS X         | Seatbelt | 560 | Path-based MAC sandbox |
| Linux            | SELinux | 200 | Restricted sandbox type enforcement domain |
| Linux            | seccomp | 11,301 | seccomp and userspace syscall wrapper |
| FreeBSD          | Capsicum | 100 | Capsicum sandboxing using `cap_enter` |

**Figure 12:** Sandboxing mechanisms employed by Chromium.

#### 6.1. Windows ACLs and SIDs

On Windows, Chromium uses DAC to create sandboxes. The model is both incomplete and unwieldy. Chromium creates a modified, reduced-privilege SID, which does not appear in the ACL of any object in the system, effectively running the renderer as an anonymous user. However, objects that do not support ACLs, such as FAT filesystems on USB sticks and TCP/IP sockets, are not protected by the sandbox. Many legitimate system calls are also denied to the sandboxed process and are forwarded to a trusted process responsible for filtering and serving them.

#### 6.2. Linux chroot

Chromium's suid sandbox on Linux attempts to create a privilege-free sandbox using legacy OS access control. Access to the filesystem is limited to a directory via `chroot`, but access to other namespaces, including System V shared memory and network access, is unconstrained. Initiating `chroot` requires a setuid binary, which poses additional risks.

### 7. Conclusion

Capsicum provides a powerful and flexible framework for enhancing the security of applications like `dhclient`, `gzip`, and Chromium. By leveraging capability-based security, it is possible to achieve dramatic security improvements with relatively minor code changes. Future work will continue to explore the integration of Capsicum into a wider range of applications and libraries.