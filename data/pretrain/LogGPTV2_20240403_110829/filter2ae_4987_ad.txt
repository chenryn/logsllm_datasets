来释放对象引用。值得注意的是，赋值锁定不提供安全保障，但线程锁定会提供。万一线程在回调中被销毁，线程或用户对象清理例程自身负责逐个释放那些引用。如果不这样做，将会导致内存泄漏；如果该操作能被任意重复的话，也将导致引用计数溢出（在
64 位平台中，由于对象的 PointerCount 域的 64 位长度，导致似乎不可行）。
窗口对象释放后使用（CVE-2011-1237）
在安装计算机辅助训练（CBT）挂钩时，应用程序能够接收到各种关于窗口处理、键盘和鼠标输入，以及消息队列处理的通知。例如，在新窗口被创建之前，HCBT_CREATEWND
回调允许应用程序通过提供的 CBT_CREATEWND
结构体检查并修改用于确认窗口大小和轴向的参数。通过提供指向已有窗口（当前新窗口将会被插在该窗口的后面）的句柄（hwndInsertAfter），该结构体也允许应用程序选择窗口的层叠顺序。设置该句柄时，xxxCreateWindowEx
获取对应的对象指针，在后面将新窗口链入层叠顺序链表时会用到该对象指针。然而，由于该函数未能适当地锁定该指针，攻击者能够在随后的回调中销毁在
hwndInsertAfter 中提供的窗口，并在返回时迫使 win32k 操作已释放的内存。
获取关于 CBT_CREATEWND 更多信息请访问：
在下面的清单中，xxxCreateWindowEx 调用 PWInsertAfter 来获取（使用 HMValidateHandleNoSecure）在
CBT_CREATEWND 挂钩结构体中提供的 hwndInsertAfter 句柄的窗口对象指针。随后函数将获取到的对象指针存储在一个局部变量中。
    .text:BF892EA1    push   [ebp+cbt.hwndInsertAfter]
    .text:BF892EA4    call   _PWInsertAfter@4             ; PWInsertAfter(x)
    .text:BF892EA9    mov    [ebp+pwndInsertAfter], eax   ; window object
由于 win32k 没有锁定 pwndInsertAfter，攻击者能够在随后的回调中释放在 CBT 挂钩中提供的窗口（例如通过调用
DestroyWindow 函数）。在 xxxCreateWindowEx 的末尾（如下清单所示），函数使用窗口对象指针并尝试将其链入（通过
LinkWindow
函数）窗口层叠顺序链表。由于该窗口对象可能已经不存在了，这就变成了一处“释放后使用”漏洞，允许攻击者在内核上下文中执行任意代码。我们将在第 4
节讨论“释放后使用”漏洞对用户对象的影响。
    .text:BF893924    push   esi              ; parent window
    .text:BF893925    push   [ebp+pwndInsertAfter]
    .text:BF893928    push   ebx              ; new window
    .text:BF893929    call   _LinkWindow@12   ; LinkWindw(x,x,x)
键盘布局对象释放后使用（CVE-2011-1241）
键盘布局对象用来为线程或进程设置活跃键盘布局。在加载键盘布局时，应用程序调用 LoadKeyboardLayout
并指定要加载的输入局部标识符的名称。Windows 也提供未文档化的 LoadKeyboardLayoutEx
函数，其接受一个额外的键盘布局句柄参数，在加载新布局之前 win32k 首先根据该句柄尝试卸载对应的布局。在提供该句柄时，win32k
没有锁定对应的键盘布局对象。这样一来，攻击者能够在用户模式回调中卸载提供的键盘布局并触发“释放后使用”条件。
在下面的清单中，LoadKeyboardLayoutEx 接受首先卸载的键盘布局的句柄并调用 HKLtoPKL 来获取键盘布局对象指针。HKLtoPKL
遍历活跃键盘布局列表（THREADINFO.spklActive）直到其找到与提供的句柄匹配的条目。LoadKeyboardLayoutEx
随后将对象指针存储在栈上的局部变量中。
    .text:BF8150C7    push   [ebp+hkl]
    .text:BF8150CA    push   edi
    .text:BF8150CB    call   _HKLtoPKL@8    ; get keyboard layout object
    .text:BF8150D0    mov    ebx, eax
    .text:BF8150D2    mov    [ebp+pkl], ebx ; store pointer
由于 LoadKeyboardLayoutEx 没有充分锁定键盘布局对象指针，攻击者能够在用户模式回调中卸载该键盘布局并且从而释放该对象。由于函数随后调用
xxxClientGetCharsetInfo
来从用户模式取回字符集信息，这种攻击手法是可能实现的。在下面的清单中，LoadKeyboardLayoutEx
继续使用之前存储的键盘布局对象指针，因此，其操作的可能是已释放的内存。
    .text:BF8153FC    mov    ebx, [ebp+pkl]   ; KL object pointer
    .text:BF81541D    mov    eax, [edi+tagTHREADINFO.ptl]
    .text:BF815423    mov    [ebp+tl.next], eax
    .text:BF815426    lea    eax, [ebp+tl]
    .text:BF815429    push   ebx
    .text:BF81542A    mov    [edi+tagTHREADINFO.ptl], eax
    .text:BF815430    inc    [ebx+tagKL.head.cLockObj]   ; freed memory ?
##### 3.3 对象状态验证
为了追踪对象是如何被使用的，win32k
将一些标志和指针与用户对象关联起来。对象假设在一个确定的状态，应该一直确保其状态是已验证的。用户模式回调能够潜在地修改状态并更新对象属性，例如改变一个窗口对象的父窗口、使一个下拉菜单不再被激活，或在
DDE 会话中销毁伙伴对象。缺乏对状态的检查会导致向空指针引用和释放后使用之类的 BUG，这取决于 win32k 如何使用对象。
DDE 会话状态漏洞
动态数据交换（DDE）协议是一种使用消息和共享内存在应用程序之间交换数据的遗留协议。DDE 会话在内部被窗口挂力气表示为 DDE
会话对象，发送者和接收者使用同一种对象定义。为了追踪哪个对象正忙于会话中以及会话对方的身份，会话对象结构体（未文档化）存储指向对方对象的指针（使用赋值锁定）。这样一来，如果拥有会话对象的窗口或线程销毁了，其在伙伴对象中存储的赋值锁定的指针未被解锁（清理）。
由于 DDE 会话在用户模式中存储数据，它们依靠用户模式回调来向/从用户模式拷贝数据。在发送 DDE 消息时，win32k 调用 xxxCopyDdeIn
从用户模式拷入数据。相似地，在接收到 DDE 消息时，win32k 调用 xxxCopyCopyDdeOut
将数据拷回到用户模式。在拷贝行为已发生之后，win32k 会通知伙伴会话对象对目标数据起作用，例如，其等待对方的应答。
在用于向/从用户模式拷入/出数据的用户模式回调处理之后，一些函数未能适当地重新验证伙伴会话对象。攻击者能够在用户模式回调中销毁会话，并从而在发送者或接收者对象结构体中解锁伙伴会话对象。在下面的清单中，我们看到在
xxxCopyDdeIn 函数中会调用回调，但在将伙伴会话对象指针传递给 AnticipatePost
之前，没有对其进行重新验证。这样反过来导致一个空指针引用，并允许攻击者通过映射零页（见第 4.3 节）来控制该会话对象。
    .text:BF8FB8A7    push   eax
    .text:BF8FB8A8    push   dword ptr [edi]
    .text:BF8FB8AA    call   _xxxCopyDdeIn@16
    .text:BF8FB8AF    mov    ebx, eax
    .text:BF8FB8B1    cmp    ebx, 2
    .text:BF8FB8B4    jnz    short loc_BF8FB8FC
    .text:BF8FB8C5    push   0              ; int
    .text:BF8FB8C7    push   [ebp+arg_4]    ; int
    .text:BF8FB8CA    push   offset _xxxExecuteAck@12
    .text:BF8FB8CF    push   dword ptr [esi+10h] ; conversation object
    .text:BF8FB8D2    call   _AnticipatePost@24
菜单状态处理漏洞
菜单管理是 win32k 中最复杂的组件之一，其中保存了想必起源于现代 Windows
操作系统早期时候的未知代码。虽然菜单对象（tagMENU）其自身如此简单，并且只包含与实际菜单项有关的信息，但是菜单处理作为一个整体依赖于多种十分复杂的函数和结构体。例如，在创建弹出菜单时，应用程序调用
TrackPopupMenuEx
在菜单内容显示的位置创建菜单类的窗口。接着该菜单窗口通过一个系统定义的菜单窗口类过程（win32k!xxxMenuWindowProc）处理消息输入，用以处理各种菜单特有的信息。此外，为了追踪菜单如何被使用，win32k
也将一个菜单状态结构体（tagMENUSTATE）与当前活跃菜单关联起来。通过这种方式，函数能够知道菜单是否在拖拽操作中调用、是否在菜单循环中、是否即将销毁，等等。
获取关于 TrackPopupMenuEx 更多信息请访问：
在处理各种类型的菜单消息时，win32k 在用户模式回调之后没有对菜单进行适当的验证。特别是，当正在处理回调时关闭菜单（例如通过向菜单窗口类过程发送
MN_ENDMENU 消息），win32k
在很多情况下没有适当检查菜单是否仍处于活跃状态，或者被诸如弹出菜单结构体（win32k!tagPOPUPMENU）之类的有关结构体引用的对象指针是否不为空。在下面的清单中，win32k
通过调用 xxxHandleMenuMessages 尝试处理某种类型的菜单消息。由于该函数会调用回调，随后对菜单状态指针（ESI）的使用会造成
win32k 操作已释放的内存。原本可以通过使用 tagMENUSTATE 结构体（未编制的）中的 dwLockCount
变量来锁定窗口状态以避免这种特殊情况。
    push   [esi+tagMENUSTATE.pGLobalPopupMenu]
    or     [esi+tagMENUSTATE._bf4], 200h   ; fInCallHandleMenuMessages
    push   esi
    lea    eax, [ebp+var_1C]
    push   eax
    mov    [ebp+var_C], edi
    mov    [ebp+var_8], edi
    call   _xxxHandleMenuMessages@12   ; xxxHandleMenuMessages(x,x,x)
    and    [esi+tagMENUSTATE._bf4], 0FFFFFDFFh   ; <-- may have been freed
    mov    ebx, eax
    mov    eax, [esi+tagMENUSTATE._bf4]
    cmp    ebx, edi
    jz     short loc_BF968B0B   ; message processed ?
##### 3.4 缓冲区重新分配
很多用户对象拥有与它们相关联的条目数组或其他形式的缓冲区。在添加或删除元素时，条目数组通常被调整大小以节省内存。例如，如果元素个数大于或小于某个特定的阈值，缓冲区将会以更合适的大小重新分配。类似地，如果数组置空，缓冲区会被释放。重要的是，任何能够在回调期间被重新分配或释放的缓冲区都必须在返回时重新检查（如下图所示）。任何没有做重新检查的函数都可能会潜在地操作已释放地内存，从而允许攻击者控制赋值锁定的指针或损坏随后分配的内存。
菜单条目数组释放后使用
为了追踪由弹出或下拉菜单保存的菜单条目，菜单对象（win32k!tagMENU）定义一个指向菜单条目数组的指针（rgItems）。每个菜单条目（win32k!tagITEM）定义一些属性，例如显示的字符串、内嵌图像、指向子菜单的指针等等。菜单对象结构体在
cItems 变量中追踪数组所包含条目的个数，并在 cAlloced
变量中追踪有多少条目能够适应所分配的缓冲区。在向/从菜单条目数组中添加/删除元素时，例如通过调用 InsertMenuItem() 或
DeleteMenu() 函数，如果 win32k 注意到 cAlloced 即将变得小于 cItems 变量（见下图所示），或者如果 cItems 和
cAlloced 变量差异超过 8 个条目，其将尝试调整数组大小。
win32k
中的一些函数在用户模式回调返回之后没有充分地验证菜单条目数组缓冲区。由于无法“锁定”菜单条目，像这样的具有用户对象的案例，要求任意能够调用回调的函数重新验证菜单条目数组。这同样适用于将菜单条目作为参数的函数。如果菜单条目数组缓冲区在用户模式回调中被重新分配，随后的代码将有可能操作已释放的内存或被攻击者控制的数据。
SetMenuInfo 函数允许应用程序设置指定菜单的各种属性。在设置了菜单信息结构体（MENUINFO）中的 MIM_APPLYTOSUBMENUS
标志掩码值的情况下，win32k 同时会将更新应用到菜单的所有子菜单。这种行为可以在 xxxSetMenuInfo
函数中观察到：函数遍历每个菜单条目项并递归处理每个子菜单以部署更新的设置。在处理菜单条目数组和产生任意递归调用之前，xxxSetMenuInfo