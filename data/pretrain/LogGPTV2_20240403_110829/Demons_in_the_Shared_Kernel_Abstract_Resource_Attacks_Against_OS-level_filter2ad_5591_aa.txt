title:Demons in the Shared Kernel: Abstract Resource Attacks Against OS-level
Virtualization
author:Nanzi Yang and
Wenbo Shen and
Jinku Li and
Yutian Yang and
Kangjie Lu and
Jietao Xiao and
Tianyu Zhou and
Chenggang Qin and
Wang Yu and
Jianfeng Ma and
Kui Ren
Demons in the Shared Kernel: Abstract Resource Attacks Against
OS-level Virtualization
Nanzi Yang∗
Xidian University
Xi’an, China
Yutian Yang
Zhejiang University
Hangzhou, China
Tianyu Zhou
Zhejiang University
Hangzhou, China
Wenbo Shen∗†
Zhejiang University
Key Laboratory of Blockchain and
Cyberspace Governance of Zhejiang
University of Minnesota, Twin Cities
Province
Hangzhou, China
Kangjie Lu
Minneapolis, USA
Chenggang Qin
Ant Group
Hangzhou, China
Jinku Li
Xidian University
Xi’an, China
Jietao Xiao
Xidian University
Xi’an, China
Wang Yu
Ant Group
Hangzhou, China
Jianfeng Ma
Xidian University
Xi’an, China
Kui Ren
Zhejiang University
Hangzhou, China
ABSTRACT
Due to its faster start-up speed and better resource utilization ef-
ficiency, OS-level virtualization has been widely adopted and has
become a fundamental technology in cloud computing. Compared
to hardware virtualization, OS-level virtualization leverages the
shared-kernel design to achieve high efficiency and runs multiple
user-space instances (a.k.a., containers) on the shared kernel.
However, in this paper, we reveal a new attack surface that
is intrinsic to OS-level virtualization, affecting Linux, FreeBSD,
and Fuchsia. The root cause is that the shared-kernel design in
OS-level virtualization results containers in sharing thousands of
kernel variables and data structures directly and indirectly. Without
exploiting any kernel vulnerabilities, a non-privileged container
can easily exhaust the shared kernel variables and data structure
instances to cause DoS attacks against other containers. Compared
with the physical resources, these kernel variables or data structure
instances (termed abstract resources) are more prevalent but under-
protected.
To show the importance of confining abstract resources, we con-
duct abstract resource attacks that target different aspects of the
OS kernel. The results show that attacking abstract resources is
∗Co-first authors.
†Corresponding author.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea
© 2021 Association for Computing Machinery.
ACM ISBN 978-1-4503-8454-4/21/11...$15.00
https://doi.org/10.1145/3460120.3484744
highly practical and critical. We further conduct a systematic anal-
ysis to identify vulnerable abstract resources in the Linux kernel,
which successfully detects 1,010 abstract resources and 501 of them
can be repeatedly consumed dynamically. We also conduct the at-
tacking experiments in the self-deployed shared-kernel container
environments on the top 4 cloud vendors. The results show that
all environments are vulnerable to abstract resource attacks. We
conclude that containing abstract resources is hard and give out
multiple strategies for mitigating the risks.
CCS CONCEPTS
• Security and privacy → Virtualization and security.
KEYWORDS
OS-level Virtualization; Shared Kernel; Abstract Resource Attack
ACM Reference Format:
Nanzi Yang, Wenbo Shen, Jinku Li, Yutian Yang, Kangjie Lu, Jietao Xiao,
Tianyu Zhou, Chenggang Qin, Wang Yu, Jianfeng Ma, and Kui Ren. 2021.
Demons in the Shared Kernel: Abstract Resource Attacks Against OS-
level Virtualization. In Proceedings of the 2021 ACM SIGSAC Conference
on Computer and Communications Security (CCS ’21), November 15–19, 2021,
Virtual Event, Republic of Korea.. ACM, New York, NY, USA, 15 pages.
https://doi.org/10.1145/3460120.3484744
1 INTRODUCTION
Operating-system-level virtualization (a.k.a., OS-level virtualiza-
tion) allows multiple self-contained and isolated user-space envi-
ronments to run on the same kernel [67]. Compared to hardware
virtualization (i.e., virtual machines), OS-level virtualization elim-
inates the burden of maintaining an operating system kernel for
each user-space instance and thus has a faster start-up speed and
Session 3B: Operating Systems CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea764better resource utilization efficiency. Therefore, OS-level virtual-
ization has been widely adopted in recent years and has become
a fundamental technology in cloud computing. The user-space in-
stances in OS-level virtualization are named as jails in FreeBSD [33],
Zones in Solaris [59], and containers1 in Linux [67].
Despite its high efficiency, OS-level virtualization also introduces
multiple security concerns. First, OS-level virtualization is vulner-
able to kernel vulnerabilities due to the shared kernel [40]. As a
result, it cannot isolate kernel bugs. Once the shared kernel is com-
promised, all user-space instances (referred to as containers) lose
isolation and protection. Moreover, researchers recently questioned
the isolation of container techniques, such as information leaks [22],
covert channels [24], and out-of-band workloads that break control
groups [23].
However, in this paper, we reveal a new attack surface that is
intrinsic to OS-level virtualization. Compared to hardware virtual-
ization, OS-level virtualization leverages the shared-kernel design
to achieve high efficiency. In a typical OS-level virtualization envi-
ronment, containers run on the same OS kernel and request various
services via 300+ system calls. Notice that the underlying OS kernel
contains hundreds of thousands of variables and data structure
instances to provide services for containers. As a result, these con-
tainers are directly and indirectly sharing these kernel variables and
data structure instances.
Unfortunately, these shared kernel variables and data structure
instances are new attack surfaces in OS-level virtualization. With-
out exploiting any vulnerabilities, a non-privileged container can
easily exhaust certain kernel variables and data structure instances,
causing DoS attacks in OS-level virtualization environments. As a
result, even other containers have enough physical resources, with
the kernel critical variables or data structure instances being ex-
hausted, they still cannot perform any meaningful tasks. Compared
with the physical resources supported by the real hardware, we
regard these kernel variables or data structure instances as abstract
resources and the exhaustion attacks on these resources as abstract
resource attacks.
Though abstract resources can be exploited for DoS attacks, they
are often under-protected. The kernel and container developers
focus more on protecting physical resources rather than abstract
resources. For example, the Linux kernel provides control groups to
restrict the resource usages for each container instance. However,
among 13 control groups, 12 of them are for physical resources,
restricting the usages of CPU, memory, storage, and IO. Only the
PIDs control group is designed for limiting the abstract resource
pid. As a result, hundreds of container-shared abstract resources do
not have any restrictions, such as the global dirty ratio, open-file
structs, and pseudo-terminal structs, which makes them vulnerable
to DoS attacks.
To show the criticality of confining abstract resources on OS-
level virtualization, we conduct attacks using Docker containers on
the Linux kernel, targeting abstract resources on different aspects
of the operating system services, including process management,
memory management, storage management, and IO management.
Our experiments show that attacking abstract resources is highly
practical and critical—it can easily disable new program execution,
slow down the memory writes by 97.3%, crash all file-open related
operations, and deny all new SSH connections. Even worse, it affects
all aspects of OS services. Moreover, experiments also demonstrate
that other than Linux, FreeBSD and Fuchsia are also vulnerable to
abstract resource attacks.
It is unfortunate that even though abstract resources are criti-
cal, they are inherently hard to contain for several fundamental
reasons. First, it is impractical to enumerate all possible abstract
resources in operating system kernels. Different from the few phys-
ical resource types, abstract resource types in the kernel are many
and various. Second, it is fairly easy to form conditions leading to
abstract resource exhaustion. When implementing new features
in the kernel, developers are often concerned about the physical
resource consumption while paying much less attention to abstract
resource consumption. Moreover, the OS kernel has complex data
and path dependencies, leading to various ways to exhaust abstract
resources in the kernel.
Therefore, we design and implement a tool based on LLVM to
identify vulnerable abstract resources in the Linux kernel systemat-
ically. We propose new techniques to identify the shareable abstract
resources and analyze their container controllability. We apply our
tool to the latest Linux kernel and detect 1,010 abstract resources.
501 of them can be repeatedly consumed dynamically. From the
detected abstract resources, we pick 7 resources that affect each
aspect of OS services based on our familiarity (i.e., we know the
impacts of exhausting that resource). We further conduct the attack-
ing experiments on these selected resources in the shared-kernel
container environments deployed on the top 4 cloud vendors, in-
cluding AWS, MS Azure, Google Cloud, and Alibaba Cloud. The
results show that all environments are vulnerable to our attacks.
At last, we give out multiple strategies for mitigating the risks of
abstract resource attacks.
The contributions of this paper are as follows:
• New Attack Surface: We reveal a new attack surface that is
intrinsic to OS-level virtualization. We propose a new attack
called abstract resource attack. We demonstrate that the abstract
resource attack is highly practical and is a broad class of attacks
that affect Linux, FreeBSD, and Fuchsia.
• Systematic Analysis: We design and implement a static analy-
sis tool based on LLVM to identify vulnerable abstract resources
in the Linux kernel. We propose and implement novel tech-
niques, including configuration-based analysis and container-
controllability analysis. Our tool detects 501 abstract resources
that can be dynamically and repeatedly triggered in the Linux
kernel.
• Practical Evaluation: We evaluate 7 abstract resource attacks in
the self-deployed shared-kernel container environments on AWS,
MS Azure, Google Cloud, and Alibaba Cloud. All environments
are vulnerable to abstract resource attacks. 2 In particular, two
environments are vulnerable to 6 attacks, one environment is
vulnerable to 5 attacks, and the other is vulnerable to 4 attacks.
We responsibly disclosed our findings to all cloud vendors. All of
them confirmed the identified problems.
1In this paper, we use the container to refer to the self-contained user-space execution
environment that shares the kernel of the host system.
2Current public cloud vendors do not provide the shared-kernel containers to different
users directly. Containers in public cloud are usually isolated by virtual machines.
Session 3B: Operating Systems CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea765• Community Impact: We plan to open-source our tool and
the identified abstract resources at https://github.com/ZJU-SEC/
AbstractResourceAttack, so that they can help the Linux kernel
community and the container community to identify the weak
spots of resource isolation in OS-level virtualization.
2 BACKGROUND
OS-level virtualization relies on the underlying OS kernel for re-
source isolation and containment. More specifically, the Linux ker-
nel provides namespaces for resource isolation and control groups
for resource containment.
2.1 Linux Namespaces
Linux namespaces provide process-level resource isolation. Cur-
rently, Linux namespaces are divided into 8 types. According to
their release time, we list them as follows:
• Mount for file system isolation;
• UTS for hostname and domain name isolation;
• IPC for IPC and message queue isolation;
• PID for process ID isolation;
• Network for network resource isolation;
• User for UID/GID isolation;
• Cgroup for control group isolation;
• Time for clock time isolation.
A process can be assigned to different namespaces of different
types. But for each type, it can only belong to one namespace. By
default, a process is in the same namespaces as its parent. It can
be added to a new namespace during process creation by passing
specific flags, or during process running by calling the setns system
call. Ideally, only processes within the same namespace can share
the namespace isolated resources. Resources are thus isolated across
namespaces. As a result, running out of an isolated resource in one
namespace does not affect processes in other namespaces. Such a
design inherently requires that the namespace mechanism correctly
and thoroughly contains the resources.
However, there still exist hundreds of types of abstract resources
that are not included by namespaces. The large attacking surface
still exists even with the protection of namespaces. One may ar-
gue to isolate all the abstract resources using namespaces. This is
however impractical: the huge number and flexibility of abstract
resources make the solution unacceptable due to huge code changes
and high performance overhead.
2.2 Linux Control Groups
On the other hand, Linux control groups are used to limit resource
usages. A control group accounts for resources used by all pro-
cesses within that control group. Control groups are organized as
a tree structure, where resources accounted for children are also
accounted for their parents. The limits on resource usages are also
enforced recursively on the tree so that resource usages in a control
group should not exceed the limits of all its ancestors.
Control groups mainly manage hardware resources like CPU,
memory, storage, IO, and etc. There are two versions of control
groups, namely v1 and v2. The main difference is that control group
v1 can have a tree hierarchy for each type of resources while control
group v2 has only one hierarchy. The implementation of resource
accounting and resource usage limiting has little difference between
v1 and v2, though. Control group v1 is currently used by default
because it is more stable and provides control over more resources.
It manages 13 types of resources while v2 supports only 9 resource
types until now [44]. More specifically, among the 13 types of re-
sources, 5 of them are for CPU accounting, including cpu, cpuacct,