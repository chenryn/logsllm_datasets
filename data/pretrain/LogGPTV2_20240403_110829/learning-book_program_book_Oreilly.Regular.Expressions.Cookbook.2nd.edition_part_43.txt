([\s\])\\1
Regexoptions: None
310 | Chapter 4: Validation and Formatting
---
## Page 327
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Example JavaScript solution, basic
The following code combines five password requirements:
•Length between 8 and 32 characters.
One or more uppercase lerters.
• One or more lowercase letters.
• One or more numbers.
● One or more special characters (ASCII punctuation or space characters),
function validate(password){
var minMaxLength =/^[\s′S]{8,32}$/,
upper =/[A-Z]/,
lower = /[a-z]/,
nurber = /[0-9]/,
special =/[ 1"#sx&’()*+,^- /:;?e[\\\]^_{1)~]/;
1f (minMaxLength.test(password) 88
upper.test(password) 38
lower.test(password) &&
nurber.test(password) &&
special. test(password)
){
return true;
}
return false;
The validate function just shown returns true if the provided string meets the password
requirements. Otherwise, false is returned.
Example JavaScript solution, with x out of y validation
This next example enforces a minimum and maximum password length (832 char-
acters), and additionally requires that at least three of the following four characte types
are present:
●One or more uppercase letters.
• One or more lowercase letters.
•One or more numbers.
● One or more special characters (anything other than ASCII letters and numbers).
function validate(password){
var minMaxLength = /^[\s′S]{8,32}$/,
4.19 Validate Passweed Complexity | 311
---
## Page 328
upper = /[A-z]/,
lower = /[a-z]/,
number = /[0-9]/,
special = /[^A-Za-z0-9]/,
count = 0;
1f (minMaxLength.test(password))(
// 0nly need 3 out of 4 of these to match
1f (upper.test(password)) count++;
1f (lower.test(password)) count++;
1f (number.test(password)) count++;
1f (special.test(password)) count++;
{
return count >= 3;
As before, this modified validate function returns true if the provided password meets
the overall requirements. If not, it returns false.
Example JavaScript solution, with password security ranking
This final code example is the most complicated of the bunch. It assigns a positive or
negative score to various conditions, and uses the regexes we've been looking at to help
calculate an overall score for the provided password. The rankPassuord function returns
a number from 04 that corresponds to the password rankings "Too Short,* *Veak,”
"Medium,” "Strong,* and *Very Strong”:
var rank = {
WEAK: 1,
TOO_SHORT: 0,
MEDIUM: 2,
STRONG: 3,
VERY_STRONG: 4
function rankPassword(password) {
var upper = /[A-Z]/,
lower = /[a-z]/,
number = /[0-9]/,
/[6-0z-ez-v] = eads
score = 0;
minLength = 8,
1f (password.length  minLength)(
// Increnent the score for every 2 chars longer than the minimum
score += Math.floor((password.length - minLength) / 2);
// Return a ranking based on the calculated score
1f (score  Weak
Because of how this password ranking algorithm is designed, it can serve rwo purposes
equally well. First, it can be used to give users guidance about the quality of their
password while they're still typing it. Second, it lets you easily reject passwords that
don’t rank at whatever you choose as your minimum security threshold. For example,
the condition if(result aq aouau1os)asnunuxe 
All of the programming languages covered by this book provide a simple and eff-
cient way to determine the length of a string. However, using a regex allows you
to test both the minimum and maximum length at the same time, and makes it
easier to mix and match password complexity rules by choosing from a list of
regexes.
ASCII visible and space characters only
As mentioned earlier, this regex allows the characters AZ, az, 09, space, and
ASCII punctuation only. To be more specific about the allowed punctuation char-
acters,they are1,,#,$,%,&,,（），*+，,/，,2,@,[J_
I, 3, α, and comma. In other words, all the punctuation you can type using a stan-
dard U.S. keyboard.
Limiting passwords to these characters can help avoid character encoding related
issues, but keep in mind that it also limits the potential complexity of your
passwords.
Uppercase letters
To check whether the password contains wo or more uppercase letters, use [A-
 {}[z])>1o  o1  for three or more.
In JavaScript, replace the dots with  anchor after , with the length test coming after the lookaheads.
5.58 that prevents it from working correctly. Microsoft fixed the bug
in the new regex engine included in IE9.
See Also
Techniques used in the regular expressions in this recipe are discussed in Chapter 2.
classes. Recipe 2.4 explains that the dot matches any character. Recipe 2.5 explains
Recipe 2.2 explains how to match nonprinting characters. Recipe 2.3 explains character
anchors. Recipe 2.7 explains how to match Unicode characters. Recipe 2.9 explains
grouping. Recipe 2.10 explains backreferences. Recipe 2.12 explains repetition.
Recipe 2.16 explains lookaround.
4.20ValidateCreditCardNumbers
Problem
You’regiventhejobof implementing an orderform fora company that accepts payment
by credit card. Since the credit card processor charges for each transaction attempt,
including failed attempts, you want to use a regular expression to weed out obviously
invalid credit card numbers.
Doing this will also improve the customer’s experience. A regular expression can in-
stantly detect obvious typos as soon as the customer finishes filling in the field on the
web form. A round trip to the credit card processor, by contrast, easily takes 10 to 30
seconds.
Solution
To keep the implementation simple, this solution is split into two parts. First we strip
out spaces and hyphens. Then we validate what remains.
Strip spaces and hyphens
Retrieve the credit card number entered by the customer and store it into a variable.
Before performing the check for a valid number, perform a search-and-replace to strip
4.20 Validate Credit Card Numbers I 317
---
## Page 334
out spaces and hyphens. Replace all matches of this regular expression with blank
replacement text:
[-]
Regex options: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Recipe 3.14 shows you how to perform this initial replacement.
Validate the number
With spaces and hyphens stripped from the input, the next regular expression checks
if the credit card number uses the format of any of the six major credit card companies.
It uses named capture to detect which brand of credit card the customer has:
^(?:
?4[0-9]{12}(?: [0-9]{3})?)1
(?5[1-5][o-9]{14})|
?6(?:011|5[0-9]{2})[0-9]{12})1
?3[47][0-9]{13})|
(?3(?:o[0-5]][68][0-9])[0-9]{11})1
(?(?:2131|1800|35[0-9]{3})[0-9]{11])
$（
Regex options: Free-spacing
Regexflavers: .NET, Java 7, XRegExp, PCRE 7, Perl 5.10, Ruby 1.9
^(?:
(?P4[0-9]{12}(?:[0-9]{3))?)1
(?P6(?:011|5[0-9]{2))[0-9]{12})1