title:Heterogeneous Private Information Retrieval
author:Hamid Mozaffari and
Amir Houmansadr
Heterogeneous Private Information Retrieval
Hamid Mozaffari
University of Massachusetts Amherst
PI:EMAIL
Amir Houmansadr
University of Massachusetts Amherst
PI:EMAIL
Abstract—Private information retrieval (PIR) enables clients
to query and retrieve data from untrusted servers without the
untrusted servers learning which data was retrieved. In this
paper, we present a new class of multi-server PIR protocols,
which we call heterogeneous PIR (HPIR). In such multi-server
PIR protocols, the computation and communication overheads
imposed on the PIR servers are non-uniform, i.e., some servers
handle higher computation/communication burdens than the oth-
ers. This enables heterogeneous PIR protocols to be suitable for a
range of new PIR applications. What enables us to enforce such
heterogeneity is a unique PIR-tailored secret sharing algorithm
that we leverage in building our PIR protocol.
We have implemented our HPIR protocol and evaluated its
performance in comparison with regular (i.e., homogenous) PIR
protocols. Our evaluations demonstrate that a querying client
can trade off the computation and communication loads of the
(heterogeneous) PIR servers by adjusting some parameters. For
example in a two server scenario with a heterogeneity degree
of 4/1, to retrieve a 456KB ﬁle from a 0.2GB database, the
rich (i.e., resourceful) PIR server will do 1.1 seconds worth of
computation compared to 0.3 seconds by the poor (resource-
constrained) PIR server; this is while each of the servers would
do the same 1 seconds of computation in a homogeneous settings.
Also, for this given example, our HPIR protocol will impose a
912KB communication bandwidth on the rich server compared
to 228KB on the poor server (by contrast to 456KB overheads
on each of the servers for a traditional homogeneous design).
I.
INTRODUCTION
Private information retrieval (PIR) is a technique to provide
query privacy to users when fetching sensitive records from
untrusted databases. That is, PIR enables users to query and
retrieve speciﬁc records from untrusted database(s) in a way
that the serving databases can not identify the records retrieved.
PIR algorithms have been suggested to be used in various
application scenarios involving untrusted database servers [23],
[39], [27], [31], [28], [14], [11], [44], [37], from retrieving
Tor relay information [39] to privacy-preserving querying of
location services [25] to registering Internet domains [23].
There are two major types of PIR protocols. The ﬁrst type
is computational PIR (CPIR) [16], [36], [2], [1], [12], [13],
[22], [32], [38], [50], [4] in which the security of the protocol
relies on the computational difﬁculty of solving a mathematical
problem in polynomial time by the servers, e.g., factorization
of large numbers. Most of the CPIR protocols are designed to
Network and Distributed Systems Security (NDSS) Symposium 2020
23-26 February 2020, San Diego, CA, USA
ISBN 1-891562-61-4
https://dx.doi.org/10.14722/ndss.2020.24363
www.ndss-symposium.org
be run by a single database server, and therefore to minimize
privacy leakage they perform their heavy computations on
the whole database (even if a single entry has been queried).
Consequently, existing CPIR protocols suffer from very high
computation overheads. The second major class of PIR is
information-theoretic PIR (ITPIR) [18], [30], [8], [17], [24],
[26], [7], [20]. ITPIR protocols provide information-theoretic
security, however, existing designs need to be run on more
than one database servers, and they need to assume that the
servers do not collude. Existing ITPIR protocols impose lower
computation overheads compared to CPIR algorithms, but at
the price of requiring the non-collusion assumption for the
servers. Therefore, (multi-server) ITPIR protocols are best ﬁt
to scenarios involving multiple (potentially competing) data
owners who collaborate to run a service privately, therefore
colluding is not in their best interest, e.g., [37], [39], [11].
Our work focuses on this class of PIR, i.e., multi-server PIR
protocols.
Existing multi-server PIR protocols are homogeneous!
The existing body of work on multi-server PIR considers a
setting in which the non-colluding PIR servers have similar
computation and communication constraints. We call such
traditional multi-server PIR protocols homogeneous. Homo-
geneous PIR algorithms have been deployed in a wide range
of homogeneous applications; this includes registering Internet
domains [23], retrieving information of Tor relays [39], private
media delivery [27], privacy-preserving e-commerce applica-
tions [31], private query in open-access eprint repositories [28],
messaging applications [11], private online notiﬁcation [44],
and private ﬁle-sharing applications [37]. For instance,
in
PIR-Tor [39] the servers participating in the protocol are
Tor directory servers with similar resources, in DP5 [11] the
servers are messaging servers with similar network settings,
and in rPIR [37] the servers are p2p ﬁle-sharing seeds with
equal resources. In all of these applications, the proposed
multi-server PIR protocols impose symmetric computation and
communication loads on all of the servers involved in the
multi-server PIR protocol.
Introducing heterogeneous multi-server PIR.
In this pa-
per, we introduce a new class of multi-server PIR, which
we call heterogeneous PIR (HPIR). An HPIR protocol is a
multi-server PIR protocol with asymmetric computation and
communication constraints on its servers, i.e., some of its
servers handle higher computation/communication overheads
than the others. We argue that HPIR algorithms enable new
applications for PIR, as well as improve the utility of some of
the known applications of PIR; this is because HPIR allows
the participation of low-resource entities in running private
services.
Example application scenario for HPIR: Here we present
an example application scenario for HPIR protocols: content
privacy in content delivery networks (CDNs). Consider a
content publisher, say, The New York Times (NYT): https:
//www.nytimes.com/, who uses a CDN provider (in this case,
Fastly Inc.) to host its web service. For the CDN provider
(Fastly) to be able to serve NYT’s content, NYT will need
to expose the activities of its viewers (e.g., what articles they
read) to Fastly, which is usually implemented by NYT sharing
its TLS private keys with Fastly. Obviously, this exposes the
—potentially privacy-sensitive—actions of NYT viewers to
Fastly (i.e., the third-party CDN provider).
As a solution to this problem, we suggest using a two-
server PIR protocol,
in which one PIR server is a CDN
edge server (e.g., a Fastly server), and the other one is
NYT’s origin server. However, one of the main reasons that
content publishers (e.g., NYT) use CDNs is to ofﬂoad their
computation and communication loads on CDNs. Therefore,
for the presented two-server PIR model to be practical, it
needs to impose much lower computation/communication costs
on NYT’s origin server compared to the costs imposed on
CDN (Fastly) edge servers. No existing PIR protocol provides
such heterogeneity, and therefore we argue for the design of
heterogenous PIR protocols. We further elaborate on potential
application scenarios of heterogeneous PIR in Section III.
Our technical approach.
In this paper, we design the ﬁrst
HPIR construction. Similar to state-of-the-art multi-server PIR
protocols [26], [30], [37], our protocol makes use of a secret
sharing algorithm to split queries into shares, where the shares
are sent to the multiple PIR servers. The PIR servers then
perform some computations on the database based on the query
shares they have received, and they send the results of the
computation to the querier. Finally, the querier combines the
responses from multiple PIR servers to retrieve the data record
she had asked for. The main difference between our HPIR
protocol and existing multi-server PIR protocols is that, in our
scheme, different numbers of query shares are sent to different
PIR servers. This results in different (i.e., heterogeneous)
computation and communication overheads on different PIR
servers.
Note that existing multi-server PIR protocols can not be
trivially extended to heterogeneous constructions. One can
modify a single-query PIR design like Goldberg’s PIR [26]
to a heterogeneous one by sending more than one query share
to some of the PIR servers; however, this will increase the
bandwidth/computation overhead on some of the servers (who
receive multiple shares) without reducing the overhead on
any of the PIR servers. The goal of HPIR is to reduce the
overhead on resource-constrained servers, through increasing
the overhead on resourceful servers. To be able to enforce
heterogeneity in our HPIR protocol, we design a speciﬁc multi-
secret sharing algorithm that enables us to split a query non-
uniformly between multiple PIR servers. We call our secret
sharing algorithm PIR-tailored, as it can only be used as part
of a PIR protocol, but has no use in standard applications of
secret sharing.
Note that we are not the ﬁrst to use a multi-secret sharing
algorithm for PIR protocols. Henry et al. [30] and Li et al. [37]
have used multi-secret sharing algorithms for PIR protocols,
with the intent of being able to send multiple PIR queries at
each round of the protocol. Unfortunately, their multi-secret
sharing algorithms are ramp schemes, which are not practical
for typical applications of HPIR: a ramp secret sharing scheme
requires the number of servers to be proportional to the number
of shared secrets. However, most of the application scenarios
of HPIR (as introduced in Section III) need to be deployed
on two servers, as they comprise two non-colluding parties
(e.g., a content publisher and a CDN provider). We therefore
design a PIR-tailored multi-secret sharing algorithm that can
be deployed on as few as two PIR servers regardless of the
number of shares sent to each of the servers.
Therefore, the core of our HPIR algorithm, is our non-
ramp, PIR-tailored multi-secret sharing algorithm. In our PIR-
tailored secret sharing algorithm, any set of q secrets is shared
using a q-degree polynomial, therefore requiring at least q + 1
shares for reconstruction. Therefore, in each round of our PIR
protocol, if the client intends to query for q records, she
will need to send q + 1 query shares to the multiple PIR
servers participating in the protocol. The client can do this in
a heterogeneous manner by sending different fractions of the
q + 1 shares to different servers, e.g., in a two-server setting,
she can send 1 share to the resourceless server (e.g., NYT’s
origin server) and the other q shares to the resourceful server
(e.g., Fastly’s edge server). Consequently,
the computation
and communication overheads on different servers will be
heterogeneous as it is proportional to the number of shares
they receive and process.
Unlike previous secret-sharing based PIRs who use a single
prime number, our protocol makes use of multiple prime
numbers. This can increase the bandwidth of our protocol.
We therefore introduce several novel techniques to improve the
efﬁciency of our PIR protocol. In particular, unlike prior secret-
sharing based PIR schemes, we use random x-coordinates
in deriving the generated secret sharing polynomials. This
reduces the upload and download bandwidth overhead of our
protocol by reducing the element sizes of our PIR communica-
tions. Also, we reduce the upload bandwidth of the clients by
using a pseudo random number generator (PRNG) in sending
the client’s queries to the PIR servers.
Similar to existing multi-server PIR protocols, our HPIR
protocol provides information-theoretic security assuming that
at least one server does not collude. However, if a PRNG
is used for overhead reduction, our protocol’s security will
change to computational.
Implementation. We have implemented our HPIR algorithms
in C++, wrapped in Rust. We have implemented our code to
be compatible with the Percy++ PIR library [43]. We have
compared its performance with the most relevant state-of-the-
art PIR protocols and in different settings, e.g., for different
database sizes, for different numbers of queries, and for various
degrees of heterogeneity. We demonstrate that a querying client
can trade off the computation and communication loads of the
(heterogeneous) PIR servers by adjusting some parameters. For
example in a two server scenario with a heterogeneity degree
of 4/1, to retrieve a 1.4MB ﬁle from a 2GB database, the rich
(i.e., resourceful) PIR server will do 12.5 seconds worth of
computation compared to 4.09 seconds by the poor (resource-
constrained) PIR server; this is while each of the servers would
2
Table I: List of PIR notations
(cid:96)
t
k
D
r
s
w
N
Number of servers
Privacy threshold (max number of colluding servers)
Number of server’s responses
Database matrix
Number of rows in the database
Number of elements in each record of the database
Element size (bits)
Total size of the database (bits)
way that the PIR servers do not learn which record of D was
retrieved by the client.
D1,1 D1,2
D2,1 D2,2
...
...
Dr,1 Dr,2
. . . D1,s
. . . D2,s
...
...
. . . Dr,s
D =
(1)
do the same 12.04 seconds of computation in a homogeneous
settings. Also, for this given example, our HPIR protocol will
impose 2.8MB communication bandwidth on the rich server
compared to 724KB on the poor server (by contrast to 1.4MB
overheads on each of the servers for a traditional homogeneous
design).
Summary of contributions:
following contributions:
In summary, we make the
• We introduce a new class of multi-server PIR, called
HPIR, which imposes non-uniform computation and com-
munication overheads on the PIR servers. We motivate the
importance of HPIR for various real-world applications.
• We design the ﬁrst HPIR protocol which uses a PIR-
tailored multi-secret sharing scheme at the core of its
protocol.
• We have built a highly optimized implementation of our
HPIR protocol in C++ (compatible with the Percy++ PIR
library [43]) wrapped in Rust. We have evaluated the
performance of our HPIR implementation for different
database sizes, for different numbers of queries, and for
various degrees of heterogeneity. Our code is available at
https://github.com/SPIN-UMass/HPIR.
Organization: The paper is organized as follows. We start
by overviewing the preliminaries of PIR and secret sharing
algorithms in Section II. In Section III, we discuss potential
application scenarios for heterogenous PIR. In Section IV, we
present a PIR-tailored secret sharing algorithm, which is the
core of our HPIR constructions. We overview the high-level
ideas of our HPIR design in Section V, and we present the
basic version and the complete version of our HPIR algorithm
in Sections VI and VII, respectively. Finally, we present our
implementation and evaluation results in Section VIII. The
paper is concluded in Section IX.
II. PRELIMINARIES
In this section, we provide background information on
private information retrieval and secret sharing.
A. Preliminaries on PIR
In this section, we introduce the main concepts of PIR.
Table I shows the notations we use for PIR protocols.
Database as a Matrix:
In a PIR protocol, one or multiple
servers, called PIR servers, host a database D, which can be
represented as an r-by-s matrix over a ﬁnite ﬁeld F. The goal
of a client (querier) is to retrieve one row of D, called a data
record, through some interactions with the PIR servers in a
Non-private Information Retrieval: Suppose that the client
aims at retrieving the jth record of the database. She will create
a unit vector (cid:126)ej of size r where all the bits are set to zero except
the jth position being set to one:
(cid:126)ej = [0
0
. . .