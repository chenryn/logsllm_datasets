PerlAPP的全称是 `Perl Dev Kit(PDK)`，有ActiveState
公司开发，但是其已经在2016年不再进行更新维护，在2020年10月份正式终止软件生命周期。
软件终止更新还好，影响不大，但网络上Linux
版本的PerlAPP非常难找，最终是在一个不起眼的小网站上下载到了低版本的安装包（这又是一个辛酸的故事），进行安装测试。
PerlApp安装需要 32位`Active Perl`（必须），而非操作系统自带的perl，又下载了一个低版本的`Active
Perl`，才算完成PDK的安装（一把辛酸泪）。
最后拿一个最简单的 perl 示例代码来进行测试：
    [test@192 Desktop]$ cat test.pl 
    #!/usr/bin/perl 
    print "Hello, World!\n";
    [test@192 Desktop]$ perl test.pl 
    Hello, World!
    [test@192 Desktop]$ 
使用PerlApp进行编译测试：
shell中也能够正常执行：
    [test@192 Desktop]$ ./test 
    Hello, World! # 正常执行
    [test@192 Desktop]$ 
使用GDB 调试编译好的程序：
    [test@192 Desktop]$ gdb test
    GNU gdb (GDB) Red Hat Enterprise Linux 7.6.1-119.el7
    Copyright (C) 2013 Free Software Foundation, Inc.
    License GPLv3+: GNU GPL version 3 or later 
    This is free software: you are free to change and redistribute it.
    There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
    and "show warranty" for details.
    This GDB was configured as "x86_64-redhat-linux-gnu".
    For bug reporting instructions, please see:
    ...
    "/home/test/Desktop/test": not in executable format: File format not recognized # 同样的报错提示
    (gdb) 
好吧，同样的`not in executable format: File format not
recognized`报错提示，完美复刻`webadmin.plx`遇到的问题。
## 六. 反编译 Perl 源码
现在来梳理一下目前的信息：
  1. `webadmin.plx`是使用 `PerlApp`编译而成的ELF 文件
  2. 不能使用GDB 调试，GDB Server也不行
  3. 网络上没有 Linux 反编译Perl 的资料
在团队小伙伴 ztop（此处应该有掌声）的帮助下，发现使用 IDA 的 `linux_server`，结合IDA 远程调试，就可以完美绕过 GDB
无法调试的问题。在Centos 7 中无法使用IDA 远程调试，不知道具体原因是什么，遂放弃，选择使用 Kali 2018
R4，IDA的主机为Windows。
    root@kali:~# chmod +x linux_server
    root@kali:~# ./linux_server
    IDA Linux 32-bit remote debug server(ST) v1.22. Hex-Rays (c) 2004-2017
    Listening on 0.0.0.0:23946...
    =========================================================
    [1] Accepting connection from 192.168.21.1...
    Warning: Section header string table index 26 is out of bounds
    Hello, World!
    Looking for GNU DWARF file at "/usr/lib32/2651bcf6f5569acd1dba629eaaaa5f002af684.debug"... no.
    Looking for GNU DWARF file at "/usr/lib32/.debug/2651bcf6f5569acd1dba629eaaaa5f002af684.debug"... no.
    [1] Closing connection from 192.168.21.1...
    ==========================================================
linux_server 的监听23946端口，需要在宿主机进行配置。
`webadmin.plx`的`main`函数中：
    signed int __cdecl paperl_main(int a1, int a2, int a3, _DWORD *a4, int (__cdecl *a5)(int))
    {
      signed int v5; // ebx
      int v7; // [esp+10h] [ebp-8h]
      v7 = dword_805B4F8;
      v5 = paperl_create((int ***)&v7, a1, a2, a3, a4, a5, 1); //此函数内部进行perl 代码执行。
      paperl_destruct(v7);
      return v5;
    }
进入到 `paperl_create()`函数内部：
          ptr = sub_804C370(**v43, "*SCRIPTNAME", (int)"scriptname");
            if ( ptr )
            {
              v27 = (int *)sub_804C370(**v43, ptr, (int)"script"); //此函数对perl代码进行初始化
              v43[9] = v27;
              if ( !v27 || (v28 = (char *)sub_804C2D0(strlen(ptr) + 14, (int)"hashline"), (v43[8] = (int *)v28) == 0) )
找到关键代码位置：
    LOAD:0804E224 jz      loc_804E32E
    LOAD:0804E22A mov     eax, [edi]
    LOAD:0804E22C mov     ecx, offset aScript             ; "script"
    LOAD:0804E231 mov     edx, [ebp+ptr]
    LOAD:0804E237 mov     eax, [eax]
    LOAD:0804E239 call    sub_804C370                   ; 函数执行后，解密出perl代码
    LOAD:0804E23E mov     [edi+24h], eax
    LOAD:0804E241 test    eax, eax
    LOAD:0804E243 jz      loc_804E517
    LOAD:0804E249 mov     edx, [ebp+ptr]
    LOAD:0804E24F cld
    LOAD:0804E250 mov     ecx, 0FFFFFFFFh
    LOAD:0804E255 xor     eax, eax
经过一系列的仔细调试和分析，最终发现 `0804E239 call sub_804C370`函数执行后，eax 指向堆的内存中出现了
`#!/usr/bin/perl`字符，
验证它：
很明显都是明文字符，dump 出来进行校验，获取到完整的`webadmin.plx`功能的 perl 源码：
    # setting line discipline to utf8 --------------------------    binmode( STDOUT, ':utf8' );
    binmode( STDIN, ':utf8' );
    # getting our paths
    my ( $apppath, $appname ) = &get_path_and_appname();
    # load core config ------------------------------------------    die '[' . $$ . '] DIED: core configuration could not be found' unless -e $RealBin . '/core/res/config.ph';
    my $config_basic = read_ph( $RealBin . '/core/res/config.ph' );
    die "Could not read core config in [$RealBin/core/res/config.ph]!" unless $config_basic;
    # fetching application config ------------------------------    die '[' . $$ . '] DIED: application configuration could not be found' unless -l $RealBin . '/config';
    my $config_app = read_ph( $RealBin . '/config' );
    die "Could not read config for [" . $appname . "] in [" . $RealBin . "/config]!" unless $config_app;
    # initialize Astaro::Logdispatcher -------------------------    Astaro::Logdispatcher->init({
      syslogname      => 'webadmin',
      myname          => 'webadmin',
      redirect_stdout => 0,
      redirect_stderr => 0,
      configfile      => 'core/res/core-log.conf',
      configset       => {
        logvars         => {
          logbitmask       => 7,
          syslogmtypeinfo  => 1,
          syslogcallerinfo => 1,
          tofilehandle     => 0
        }
      },
      logfiler        => [
        '+ .',
      ],
      printfile       => '/dev/null'
    });
至此完整的获取到 Sophos UTM webadmin 功能的perl 源代码，剩余的工作就是基础的代码审计和漏洞挖掘。
## 七. 梳理总结
Perl 编译的ELF 文件在执行时，会在`/tmp/`目录下生成`libperl.so` 文件，perl
代码通过调用so文件接口j来执行，本次调试释放路径是
`/tmp/pdk-root/757fcfe556133c27007d41e4e52f4425/libperl.so` ，也可以通过hook so
的函数来达到获取perl 源码的目的。
Perl 语言编译的ELF文件，如何进行反编译，网络上没有任何有价值的信息，之前对python 和go 编译的ELF
文件都有过反编译经验，按道理来说同样是能够通过反编译来获取源代码，但是GDB 无法调试 ELF
困扰了很长时间，动态获取源码相对于静态去逆向解密算法要简单很多，虽然最后也并不简单。
其中的工作并没有去逆向解密算法，理清楚算法的情况下，可以编写脚本静态还原perl
源代码，但以安全分析或漏洞挖掘为目标，算是告一段落了，后续工作也可以编写IDA 的python 脚本，动态提取源代码。
## 八. 资料索引
### 1\. demo
### 2\. 从PDK打包的可执行程序里面解出完整的Perl源码
## 九. 注意事项
  1. VmWare Workstation 安装固件 ISO 需要选择低版本的兼容性，否则无法安装。
  2. Active Perl 要选择 X32位安装包，X64的安装包无法安装 PDK
* * *