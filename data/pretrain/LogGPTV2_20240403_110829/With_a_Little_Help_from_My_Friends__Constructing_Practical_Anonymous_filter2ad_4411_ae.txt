Set msk = (skAttr1, . . . , skAttr𝑡 ) and mpk = (pkAttr1, . . . , pkAttr𝑡 ) and
return (msk, mpk).
AAEQ.AKGen(msk, Attr): parse msk = (skAttr1, . . . , skAttr𝑡 ) and Attr ∈
[𝑡] and return msk[Attr].
AAEQ.Sign(skAttr, 𝑣Attr, 𝑀): parse skAttr = (pkAttr, (cid:174)𝑥, 𝑘), 𝑣Attr ∈ {0, 1}∗,
1)ℓ , compute 𝑦 ← 𝐹 (𝑘, 𝑀) and with 𝐻Attr(·) := 𝐻 (pkAttr∥·)
𝑦 .
).
𝑍1 =
𝑀𝑥𝑖
𝑖
, 𝑌1 = 𝑔
Return 𝜎 = (𝑍1, 𝑌1, 𝑌2, 𝑉2) ∈ (G∗
2 , 𝑉2 = 𝐻Attr(𝑣Attr) 1
2)2.
AAEQ.ChgRep(𝑀, 𝜎, 𝜇, mpk): given 𝑀 ∈ (G∗
1
𝑦
1 , 𝑌2 = 𝑔
1)2 × (G∗
𝑖=1
1
𝑦
1)ℓ , a valid signature 𝜎,
𝑝 and return (𝑀 𝜇, 𝜎′) with 𝜎′ =
1
1
𝜓
𝜓
2 , 𝑉
2
𝑝 and mpk, choose 𝜓 ←$ Z∗
1
𝜓
, 𝑌
1 , 𝑌
𝜇 ∈ Z∗
(𝑍𝜓 𝜇
1
AAEQ.Agg(mpk, {𝜎𝑖 }): given mpk and set of valid signatures {𝜎𝑖 } of
size 𝑘 parse it as 𝜎𝑖 = (𝑍1,𝑖, 𝑌1,𝑖, 𝑌2,𝑖, 𝑉2,𝑖) and return ⊥ if 𝑌1,𝑖 ≠
𝑌1,𝑗 or 𝑌2,𝑖 ≠ 𝑌2,𝑗 for 𝑖 ≠ 𝑗, 𝑖, 𝑗 ∈ [𝑘] and otherwise return
AAEQ.Verify(mpk, {Attr}, 𝜎′, 𝑀): parse mpk = (pkAttr1, . . . , pkAttr𝑡 ),
{Attr} = ((Attr𝑖, 𝑣Attr𝑖))𝑖∈[𝑡] ∈ ([𝑡] × {0, 1}∗)𝑘, 𝜎′ = (𝑍1, 𝑌1, 𝑌2, 𝑉2)
1)ℓ . Return 1 if the following checks hold and 0 otherwise:
and 𝑀 ∈ (G∗
𝑖=1 𝑍1,𝑖, 𝑌1,1, 𝑌2,1,𝑘
(𝑘
ℓ
pkAttr𝑗 ,𝑖) = 𝑒(𝑍1, 𝑌2) ∧ 𝑒(𝑌1, 𝑔2) = 𝑒(𝑔1, 𝑌2) ∧
𝑖=1 𝑉2,𝑖).
𝑘
𝑒(𝑀𝑖,
𝑖=1
𝑗=1
𝑒(𝑌1,
𝑘
𝑗=1
𝐻Attr𝑗 (𝑣Attr𝑗 )) = 𝑒(𝑔1, 𝑉2)
Scheme 3: Our AAEQ Signature Scheme
Now, we prove the security of our AAEQ scheme in Scheme 3.
Theorem 3.11. The AAEQ scheme in Scheme 3 is EUF-CMA and
provides perfect adaption assuming that 𝐻 is a random oracle.
We again prove the above theorem using a sequence of lemmas.
Lemma 3.12. The AAEQ scheme in Scheme 3 with bounded attribute-
space is EUF-CMA secure in the generic bilinear group model for
Type-3 bilinear groups.
The proof is given in Appendix B.4.
Lemma 3.13. The AAEQ in Scheme 3 is EUF-CMA secure for an
unbounded attribute-space when modeling 𝐻 as a random oracle.
Proof. Up to collisions in the random oracle, which happen
with negligible probability, the AAEQ in Scheme 3 and in particular
the analysis is identical to the proof of Lemma 3.12, but without
the restriction of the tag space being polynomial in size.
□
Lemma 3.14. The AAEQ scheme in Scheme 3 provides perfect adap-
tion if the TBEQd Scheme 2 provides perfect adaption.
Proof. This straightforwardly follows from the perfect adaption
□
notion of the underlying TBEQd scheme.
4 CORE/HELPER CREDENTIALS
We recall that in ACs usually a personal computer or smartphone
is used to store and show the credential and it is assumed that
the user’s device is not limited in any way, i.e., computational or
communication-wise. A core/helper anonymous credential (CHAC)
system considers a different and more realistic scenario. We con-
sider two devices, a core device with limited capabilities (i.e., small
memory and computational power) and a helper device that is more
powerful and the only gateway of the core device to the outside
world, e.g., the Internet. The core device creates and stores the
secret key required to show credentials. However, since it is limited
it only creates so-called partial show tokens. The helper device
stores the credentials and finalizes the show token. The key idea
here is that the core device is responsible for protecting credentials
(i.e., the key to use them) and the helper device is responsible for
protecting the privacy of the showing procedure. In CHACs we
will only consider single round communications and therefore the
semantic will consist only of algorithms and not protocols as it is
the case in standard anonymous credentials.
4.1 Syntax and Security Model
Before defining the syntax of a CHAC system, we assume that
there exists a compressing and collision-resistant function AIDGen
(Attr, nonce) that on input a non-empty attribute set Attr and ran-
dom nonce ∈ {0, 1}𝜆, outputs an attribute identifier aid ∈ {0, 1}𝜆.
We will assume that the attribute set Attr contains pairs of a name
and value, e.g. a valid element is ('Age:', '18').
Definition 4.1 (CHAC). A core/helper anonymous credential
(CHAC) system consists of the following PPT algorithms:
SetupCHAC(1𝜆): on input security parameter 1𝜆, this algorithm
outputs a common reference string 𝜌, which is an implicit input
to the below algorithms. Some constructions might not require
such a string and work without a trusted setup.
IKGen(1𝜆): on input security parameter 1𝜆, this algorithm outputs
the issuer’s key pair (isk, ipk).
CKGen(1𝜆): on input security parameter 1𝜆, this algorithm outputs
the core device secret key ssk.
Session 6D: Authentication and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2012CObtain(aid, ipk, ssk): on input attribute identifier aid, issuer’s
public key ipk and secret key ssk, executed by the core device
outputs a partial credential request apreq.
HObtain(Attr, nonce, ipk, apreq): on input non-empty attribute set
Attr, a random nonce ∈ {0, 1}𝜆, issuer’s public key ipk and
partial credential request apreq, this algorithm executed by the
helper outputs a credential request areq.
Issue(Attr, nonce, areq, isk): on input non-empty attribute set Attr,
a random nonce ∈ {0, 1}𝜆, credential request areq and issuer’s
secret key isk, this algorithm outputs ⊥ on failure and otherwise
a credential cred and a device identifier did.
CShow(aid, ipk, ssk): on input attribute identifier aid, issuer’s pub-
lic key ipk and secret key ssk, this algorithm executed by the
core device outputs a partial show token apsig.
HShow(Attr, nonce, cred, ipk, apsig): on input non-empty attribute
set Attr, a random nonce ∈ {0, 1}𝜆, credential cred, issuer’s
public key and partial show token apsig, this algorithm executed
by the helper outputs a full show token asig.
Verify(Attr, nonce, asig, ipk): on input non-empty attribute set Attr,
a nonce ∈ {0, 1}𝜆, full show token asig and issuer’s public key,
this algorithm outputs either accept(1) or reject(0).
We say that a core/helper anonymous credential system is secure
if it is correct, unforgeable, dependable, anonymous and compact.
Correctness. As one would expect, a showing of a credential with
respect to a non-empty set Attr𝐷 of attributes always verifies if the
credential was issued honestly for some attribute set Attr𝐴 with
Attr𝐷 ⊆ Attr𝐴.
Unforgeability. Showing of attributes for which one does not pos-
sess credentials should not be possible. Even a malicious coalition
should be unable to combine their credentials and show a set of
attributes that no single member has.
Dependability. An adversary that takes control over the helper
device should be unable to show an honestly generated credential
in a given session without interaction with the core device, i.e. this
involves the case that credentials stored on the helper device leak.
Anonymity. A coalition of a malicious verifier and issuer should
not be able to identify the core/helper devices, except that they
possess a valid credential for the shown attributes. Furthermore,
different showings of the same credential should be unlinkable.
Compactness. The size of the full show token asig should not
depend on the number of attributes.
Formal definitions of those properties are given in Appendix A.6.
4.2 Generic Construction
We will now present our generic construction of a CHAC system
for up to 𝑡 attributes i.e., the upper bound on the number of different
attributes an issuer can issue. The two main building blocks are
a SFPK scheme with public key size ℓ and split signing, and an
AAEQ scheme with message size ℓ. We assume that the space of
SFPK public keys and AAEQ messages are compatible (the same).
We also assume that the SFPK key generation algorithm outputs
public keys in canonical form.
Our construction uses the idea of self-blindable certificates sim-
ilar to [63]. The core device generates a long-term SFPK key pair
that is used for all credentials. This key pair is used as a standard
signing key and the core device does not use the randomization
properties of the SFPK public key. However, this key is “certified”
by the issuer using the AAEQ scheme. Since it is attribute-based,
the issuer can easily create multiple signatures on the core device’s
public key depending on the possessed attributes. A credential is
then formed by appending all signatures, i.e., its size depends on
the number of attributes. To show an attribute the core device uses
the SFPK signing procedure to sign an attribute identifier aid send
by the helper device and which corresponds to the disclosed at-
tributes Attr and a nonce (from the verifier). Once the helper device
receives the SFPK signature from the core device it finalizes (we
use split signing here) and randomizes it. We will use 𝑛 to denote
the number of attributes that were issued to a user and by 𝑘 ≤ 𝑛 the
number of attributes that are selectively disclosed within a show
token. Additionally, it aggregates all AAEQ signatures that corre-
spond to the shown attributes (i.e., the 𝑘 that should be selectively
disclosed) and uses the same random coins to randomize it. Note
that thanks to aggregation the show tokens size is independent
of the number of shown attributes. The final show token is a ran-
dom SFPK public key, the corresponding SFPK signature under
aid = AIDGen(Attr, nonce) and an aggregated AAEQ signature for
the public key. More details are given in Scheme 4.
We now show that Scheme 4 can be efficiently instantiated in
the random oracle model using an SFPK with split signing and an
AAEQ scheme (cf. Section 3).
Theorem 4.2 (Unforgeability). Scheme 4 is unforgeable assum-
ing the used SFPK with split signing is unforgeable, the used AAEQ
is unforgeable and AIDGen is collision-resistant.
Theorem 4.3 (Anonymity). Scheme 4 is anonymous if the used
AAEQ are adaptable and the SFPK signatures are class-hiding.
Theorem 4.4 (Dependability). Scheme 4 is dependable if SFPK
with split signing is unforgeable and AIDGen is collision-resistant.
For completeness the proofs for unforgeability, anonymity and
dependability are given respectively in Appendix C.1, C.2 and C.3.
Remark. For our concrete instantiation in the next section, we
require that for every user SFPK public key all requested attributes
are queried once and at the same time. While this is a proof artifact
to simplify the GGM proof, we 1) do not expect this to be a problem
for most use-cases and 2) conjecture that even if ignored this implies
no issues with the security of the CHAC construction.
5 CHAC EVALUATION
In this section we evaluate a concrete instantiation of our CHAC
system based on the building blocks from Section 3. Moreover,
discuss techniques used to optimize the smart card implementation
and helper device side of the CHAC system.
5.1 Setup
To evaluate our CHAC system we prepared a prototype implemen-
tation. We used a Multos smart card [60] as the core device and
implement the helper device on a smartphone with a Snapdragon
Session 6D: Authentication and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2013SetupCHAC(1𝜆): return 𝜌 ← SFPK.CRSGen(1𝜆).
IKGen(1𝜆): return (isk, ipk) ← AAEQ.Setup(1𝜆, 𝑡, ℓ).
CKGen(1𝜆): choose (skSFPK, pkSFPK) ← SFPK.KeyGen(1𝜆) and com-
pute (stsecr, stpub) ← SFPK.Sign1(1𝜆). Return ssk = (skSFPK, pkSFPK,
stsecr, stpub).
CObtain(aid, ipk, ssk): parse ssk = (skSFPK, pkSFPK, stsecr, stpub), compute
pSigSFPK ← SFPK.Sign2(skSFPK, aid, stsecr) and return apreq = (pkSFPK,
stpub, pSigSFPK).
HObtain(Attr, nonce, ipk, apreq): parse apreq = (pkSFPK, stpub, pSigSFPK),
compute SigSFPK ← SFPK.Sign3(pSigSFPK, stpub) and return areq =
(pkSFPK, SigSFPK).
{(Attr1, 𝑣Attr1), . . . ,
(Attr𝑛, 𝑣Attr𝑛)}, areq = (pkSFPK, SigSFPK) and isk = msk.
• Compute identifier aid = AIDGen(Attr, nonce) and output ⊥ if
SFPK.Verify(pkSFPK, aid, SigSFPK) = 0 or canon(pkSFPK) ≠ 1.
{1, . . . , 𝑛} recompute the AAEQ keys
• For all
skAttr𝑖 ← AAEQ.AKGen(msk, Attr𝑖) and compute signatures
, 𝑣Attr𝑖 , pkSFPK).
𝜎Attr𝑖 ← AAEQ.Sign(skAttr𝑖
• Output cred = (𝜎Attr1, . . . , 𝜎Attr𝑛) and did = pkSFPK
Issue(Attr, nonce, areq, isk): parse Attr
indices 𝑖
∈
=
.
CShow(aid, ipk, ssk): execute apsig ← CObtain(aid, ipk, ssk).
HShow(Attr, nonce, cred, ipk, apsig): parse Attr = {(Attr1, 𝑣Attr1), . . . ,
(Attr𝑘, 𝑣Attr𝑘 )} apsig = (pkSFPK, pSigSFPK, stpub).
• Compute identifier aid = AIDGen(Attr, nonce) and finalize signature
SigSFPK ← SFPK.Sign3(pSigSFPK, stpub).
• Set Attr𝜎 = {𝜎Attr1, . . . , 𝜎Attr𝑘 } and aggregate the AAEQ signature
𝜎Attr ← AAEQ.Agg(ipk, Attr𝜎).
• Compute (pk′
SFPK) ← SFPK.ReRand(pkSFPK, aid, SigSFPK, 𝑟)
, Sig′
using blinding 𝑟 ←$ coinSFPK.
• Change
←
the
representation of
AAEQ.ChgRep(pkSFPK, 𝜎Attr, 𝑟, ipk).
• Return the show token asig = (pk′
Verify(Attr, nonce, asig, ipk): Parse
Attr)