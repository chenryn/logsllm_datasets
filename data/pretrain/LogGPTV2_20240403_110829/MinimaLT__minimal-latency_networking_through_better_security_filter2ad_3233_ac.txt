description.
We show packets on a single line such as
t, n, C
0
, s, a, . . . C0→S0
n
which indicates a tunnel establishment packet (visible by the
presence of the plaintext C0, as described in §4.3) from C to
S using keys C0 and S0 to box (encrypt and authenticate)
the message ‘s, a, . . .’ under nonce n. Each packet has a new
nonce but for conciseness we simply write n rather than n1,
n2, etc. The same comment applies for sequence numbers
(s) and acknowledgments (a).
5.1 Initial communication of C with D (T1)
After booting, C establishes a tunnel with D (Figure 4a,
tunnel T1). (C’s static conﬁguration contains its directory
service’s IP address, UDP port, and long-term public key
D.) C generates a single-use public key C0 and uses it to
t A tunnel ID (described in §4)
n A nonce (described in §4)
s A sequence number
a An acknowledgment number
0 or c A connection ID (0 for the control connection)
p A puzzle
r A puzzle solution (i.e., response)
C, D, N, S The client, directory, name, and server long-
C0, D0, N0, S0 An ephemeral client, directory, name, and
term public/private key
server public/private key
U A user’s public/private key
x A user authenticator (described in §5.8)
keys C and S
C → S A message from the client to the server, using
H(m) The cryptographic hash of message m
m k
m S→P
n Encrypt and authenticate message m using
symmetric key k and nonce n
Encrypt and authenticate message m using a
symmetric key derived from private key S and
public key P ; n is a nonce
Figure 5: Notation
n
create a bootstrap tunnel with the directory service.
0
, s, a, requestCert0(D) C0→D
t, n, C
t, n, s, a, giveCert0(certD, ecertD) D→C0
n
n
D responds with a service record (certD,ecertD) contain-
ing its own ephemeral key, D0. C does not make further use
of tunnel T1.
5.2 Subsequent communication of C with D (T2)
C uses D0 to establish another tunnel with D (Figure 4b,
tunnel T2) to request S’s service record. This tunnel uses a
fresh C0, is key-erasure-protected, and is established by:
0
, s, a, requestCert0(S) C0→D0
t, n, C
t, n, s, a, giveCert0(certS, ecertS) D0→C0
n
n
Successive connections to the same server S skip both T1
and T2. T2 remains open for C to look up other servers.
5.3 Communication of C with S (T3)
After receiving certS and ecertS, C is ready to negotiate a
tunnel with the end server (Figure 4, tunnel T3). C encrypts
packets to the server using S0 (from ecertS) and a fresh C0.
Because C places its ephemeral public key in the ﬁrst packet,
both C and S can immediately generate a shared symmetric
key using DH without compromising key erasure. Thus C
can include application-to-service data in the ﬁrst packet to
S. That is,
t, n, C
0
,
s, a, nextTid0(t, C0),
createAuth0(1, serviceName, U, x),
serviceRequest1(. . . )
C0→S0
n
Upon receiving createAuth0, S veriﬁes the authenticator x
(§5.8) and decides if the client user U is authorized to con-
nect. If so, S creates the new connection, here with ID 1.
The server ensures no two tunnels share the same C0. Once
this tunnel is established, C erases the secret key belong-
ing to C0; the tunnel continues to use the shared secret of
C0 and S0. (We describe the purpose of nextTid0 in §5.5.)
The server can then immediately process the service-speciﬁc
serviceRequest1 on this new connection.
5.4 Communication of S with N
Before a client may connect, S must register its own IP ad-
dress, UDP port, public key S, certiﬁcate on S, and current
ephemeral public key S0 with an ephemeral-key name service
429N. This is done using the giveCert0 RPC:
t, n, s, a, giveCert0(certS, ecertS) S0→N0
t, n, s, a, ok0() N0→S0
n
n
(Here we assume S already has a tunnel to N.) In the local
case N may be the same as D, but in general information
must be pushed or pulled from N to D (§3.4).
5.5 Rekeying and key erasure
MinimaLT implements a property called fast key erasure
which means that key erasure can take place at any time,
without interrupting existing connections. A client uses a
nextTid0 RPC to indicate the new TID t that will prompt a
rekey; this RPC also includes a C0 for reasons we describe
in §7.4. Servers invoke rekeyNow0 when their key-erasure
interval expires. In any case, each host erases the previous
key after beginning to use the next. Clients invoke nextTid0
within each tunnel initiation packet (§5.3).
A client causes a rekey when its key-erasure interval ex-
pires or when it receives a rekeyNow0 RPC from the server.
To cause such a rekey, the client (1) computes a new sym-
metric key by cryptographically hashing the tunnel’s exist-
ing symmetric key; (2) computes a new C0 indistinguishable
from a legitimate public key; and (3) issues a tunnel ini-
tiation packet using t and C0 which is encrypted with the
new symmetric key and contains a successive nextTid0 RPC.
The server (1) notices that the tunnel initiation packet con-
tains the t from the previous nextTid0; (2) computes the new
symmetric key and unboxes the packet; and (3) veriﬁes that
the current nextTid0’s C0 parameter matches the plaintext
public key on the tunnel initiation packet. If each veriﬁca-
tion succeeds, then the server transitions to the new tunnel
parameters; otherwise it behaves as with a failed tunnel ini-
tialization.
5.6 IP-address mobility
Because MinimaLT identiﬁes tunnels by their TID, a tun-
nel’s IP and UDP port can change without aﬀecting com-
munication. After changing its IP address or UDP port, a
client simply does a rekey.
5.7 Puzzles
A MinimaLT server under load that receives a tunnel es-
tablishment packet from a stranger client for an authorized
service does not immediately create the tunnel. Instead, it
produces a puzzle that must be solved by the client before
the server will proceed. First, the server computes the solu-
tion (i.e., response) to a puzzle:
r = C0, S0 k
n0
where k is a secret used only for puzzles.
It then selects
a value w that determines the diﬃculty of the puzzle, and
calculates q by zeroing r’s rightmost w bits. The server
sends the puzzle of the form [q, H(r), w, n0] to the client in
the following packet:
t, n, [q, H(r), w, n
0]
(Note that the square brackets do not aﬀect the packet; they
merely make our notation more readable.) The server next
forgets about the client’s request.
The client must solve the puzzle, i.e., reconstruct r from
q and H(r), and provide its solution r along with n0 in a
new tunnel establishment packet boxed using the same C0
and S0. To ﬁnd this solution, the client brute forces the
rightmost w bits of q, checking each resulting candidate d
to see if H(d) = H(r). If this equivalence holds, the client
has found d = r. (This brute force work imposes a high load
on C without aﬀecting S.) The client then responds to the
server with:
t, n, C
0
, [r, n
0], s, a, . . . C0→S0
n
To conﬁrm a solution, the server decrypts r using k and n0,
conﬁrms that the plaintext contains C0 and S0, and ensures
that n0 is within an acceptable window. Although the server
had forgotten r, these protections ensure that r cannot be
reused for other tunnel establishment attempts.
MinimaLT also provides a puzzle RPC that can be used
inside a tunnel for liveness testing. The puzzle format used
by this RPC is the same as that which is used in the tunnel
header.
5.8 User authenticators
Every user serviced by MinimaLT is identiﬁed by his public
key. The createAuth0 authenticator is the server’s long-term
public key encrypted and authenticated using the server’s
long-term public key, the user’s long-term private key U,
and a fresh nonce n never reused for U:
n, S U→S
n
The eﬀect of user authenticators is determined by the
server’s local authorization policy.
5.9 Congestion and ﬂow control
MinimaLT’s tunnel headers contain the ﬁelds necessary to
implement congestion control, namely sequence number and
acknowledgment ﬁelds. We presently use a variation of
TCP’s standard algorithms [22].
MinimaLT hosts adjust per-connection ﬂow control us-
ing the windowSize0 RPC. MinimaLT subjects individual
connections to ﬂow control, so windowSize0 takes as param-
eters both a connection ID and size. MinimaLT currently
implements TCP-style ﬂow control.
As with TCP [27], eﬃcient congestion control is an area
of open research [23], and we could substitute an emerging
algorithm with better performance. MinimaLT does have
one considerable eﬀect on congestion control: controls are
aggregated for all connections in a tunnel, rather than on
individual connections. Since a single packet can contain
data for several connections, the server no longer needs to
allocate separate storage for tracking the reliability of each
connection. This also means that MinimaLT need not re-
peat the discovery of the appropriate transmission rate for
each new connection, and a host has more information (i.e.,
multiple connections) from which to derive an appropriate
rate. The disadvantage is that a lost packet can aﬀect all
connections in aggregate.
6 Performance evaluation
In this section we evaluate MinimaLT’s performance, specif-
ically packet overhead, latency and throughput. For per-
formance under DoS, see §7.6. We focus on server perfor-
mance, because even resource-constrained smartphones can
adequately handle their own load. While servers have faster
CPUs, they are relatively slow compared to their network
capacity and the number of clients they serve. Furthermore,
a server DoS is much more damaging than a client DoS.
6.1 Packet header overhead
MinimaLT’s network bandwidth overhead is modest. The
overhead is due to the cryptography, and includes the nonce,
TID, and checksum (the public key/puzzle ﬁelds are rarely
430present and are thus insigniﬁcant overall). MinimaLT re-
quires 32 bytes more for its headers than TCP/IP; this rep-
resents 6% of the minimum Internet MTU of 576 bytes, and
2% of 1518-byte Ethernet packets.
6.2 Latency and throughput
We experimentally evaluate MinimaLT’s performance in
three areas: (1) the serial rate at which MinimaLT estab-
lishes tunnels/connections, primarily to study the eﬀect of
latency on the protocol; (2) the rate at which MinimaLT
establishes tunnels/connections when servicing many clients
in parallel; and (3) the throughput achieved by MinimaLT.
We benchmarked MinimaLT on Ethos. All of our perfor-
mance tests were run on two identical computers with a 4.3
GHz AMD FX-4170 quad-core processor, 16GB of memory,
and a Gb/s Ethernet adapter. We benchmarked in 64-bit
mode and on only one core to simplify cross-platform com-
parisons.
Serial tunnel/connection establishment latency In
each of our serial connection benchmarks, a client sequen-
tially connects to a server, sends a 28-byte application-layer
request, and receives a 58-byte response. We measure the
number of such operations completed in 30 seconds; the con-
nections do not perform a DNS/directory service lookup.
We performed this experiment under a variety of network
latencies using Linux’s netem interface.
We compare against OpenSSL 1.0.0j using its s_server and
s_time utilities, running on version 3.3.4 of the Linux ker-
nel. We conﬁgured OpenSSL to use 2,048-bit RSA as rec-
ommended by NIST [4] (although 2,048-bit RSA provides
112-bit security, less than that of MinimaLT’s 128-bit secu-
rity), along with 128-bit AES, ephemeral DH, and client-side
certiﬁcates (i.e., cipher suite DHE-RSA-AES128-SHA). In or-
der to ensure disk performance did not skew our results, we
modiﬁed s_server to provide responses from memory instead
of from the ﬁlesystem. We also wrote a plaintext benchmark
which behaves similarly, but makes direct use of the POSIX
socket API without cryptographic protections.
Figure 6b shows abbreviated connections.
Here
MinimaLT reuses an existing tunnel and OpenSSL takes
advantage of its session ID to execute an abbreviated con-
nection. Both protocols avoid computing a shared secret
using DH, except in the case of the ﬁrst connection. Ab-
breviated MinimaLT connections surpass the performance
of unencrypted TCP at LAN+1/4 ms latencies. At higher
To produce results analogous to OpenSSL, we simulated
both (1) many abbreviated connection requests for high
reuse by clients and (2) many full connection requests for no
reuse by clients, we tested both (1) the vanilla MinimaLT
stack and (2) a MinimaLT stack we modiﬁed to artiﬁcially
avoid tunnel reuse.
Figure 6a shows full connection performance ratios be-
tween MinimaLT vs. TCP and MinimaLT vs. OpenSSL.
For each connection, MinimaLT creates a new tunnel and
authenticates the client user; TCP performs a three-way
handshake; and OpenSSL performs full TCP and TLS hand-
shakes. After this initial setup, our benchmark completes an
application-data round trip. Most surprisingly, MinimaLT
creates connections faster than unencrypted TCP, begin-
ning before native LAN latencies+1/2 ms (LAN+1/2 ms).
MinimaLT is about twice as fast as unencrypted TCP at
latencies above LAN+4 ms, and MinimaLT is four to six
times faster than OpenSSL.
latencies, MinimaLT is two times the performance of TCP
and three times the performance of OpenSSL.
At high latencies, the protocol performance ratios ap-
proach the numbers predicted by counting the round trips
inherent in each protocol. We attribute our results to
MinimaLT’s eﬃcient tunnel/connection establishment (es-
pecially at high latencies) and to the speed of the NaCl
library (especially at low latencies).
Figure 6c revisits the measurements described for Figure
6a, this time plotting the actual time each connection took
in log scale. At LAN+1/16 ms, a MinimaLT, TCP, and
OpenSSL connection took 1.32ms, 0.68ms, and 7.63ms, re-
spectively. At LAN+256ms, the times were 0.53s, 1s, and
2.13s, respectively.
Figure 6d displays abbreviated connection time. At
LAN+1/16 ms, a MinimaLT and OpenSSL connection took
1.03ms and 1.67ms, respectively. At LAN+256ms, the times
were 0.52s and 1.60s, respectively. (TCP times are the same
as in Figure 6c.)
Tunnels
per run
One
One
Many
Many
User
Auth.
(cid:88)
(cid:88)