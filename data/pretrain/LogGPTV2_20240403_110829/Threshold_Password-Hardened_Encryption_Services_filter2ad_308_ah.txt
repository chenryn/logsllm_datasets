### References

1. **Editors.** 2013. *Proceedings of the 7778th Volume*. Springer, Heidelberg, 352–368. doi: 10.1007/978-3-642-36362-7_22.

2. **Amos Fiat and Adi Shamir.** 1987. "How to Prove Yourself: Practical Solutions to Identification and Signature Problems." In *CRYPTO'86 (LNCS)*, edited by Andrew M. Odlyzko, Volume 263, 186–194. Springer, Heidelberg. doi: 10.1007/3-540-47721-7_12.

3. **Yael Gertner, Yuval Ishai, Eyal Kushilevitz, and Tal Malkin.** 2000. "Protecting Data Privacy in Private Information Retrieval Schemes." *Journal of Computer and System Sciences* 60(3): 592–629. doi: 10.1006/jcss.1999.1689. https://doi.org/10.1006/jcss.1999.1689.

4. **Mauricio Karchmer and Avi Wigderson.** 1993. "On Span Programs." In *Proceedings of Structures in Complexity Theory*, 102–111.

5. **Russell W. F. Lai, Christoph Egger, Manuel Reinert, Sherman S. M. Chow, Matteo Maffei, and Dominique Schröder.** 2018. "Simple Password-Hardened Encryption Services." In *USENIX Security 2018*, edited by William Enck and Adrienne Porter Felt, 1405–1421. USENIX Association, August 2018.

6. **Russell W. F. Lai, Christoph Egger, Dominique Schröder, and Sherman S. M. Chow.** 2017. "Phoenix: Rebirth of a Cryptographic Password-Hardening Service." In *USENIX Security 2017*, edited by Engin Kirda and Thomas Ristenpart, 899–916. USENIX Association, August 2017.

7. **Allec Muffet.** 2015. "Facebook: Password Hashing and Authentication." Video. https://www.youtube.com/watch?v=7dPRFoKteIU. (Accessed 2015).

8. **PCI Security Standards Council.** 2016. *Requirements and Security Assessment Procedures*. PCI DSS v3.2. (2016).

9. **Jonas Schneider, Nils Fleischhacker, Dominique Schröder, and Michael Backes.** 2016. "Efficient Cryptographic Password Hardening Services from Partially Oblivious Commitments." In *ACM CCS 2016*, edited by Edgar R. Weippl, Stefan Katzenbeisser, Christopher Kruegel, Andrew C. Myers, and Shai Halevi, 1192–1203. ACM Press, October 2016. doi: 10.1145/2976749.2978375.

10. **Claus-Peter Schnorr.** 1990. "Efficient Identification and Signatures for Smart Cards." In *CRYPTO'89 (LNCS)*, edited by Gilles Brassard, Volume 435, 239–252. Springer, Heidelberg, August 1990. doi: 10.1007/0-387-34805-0_22.

11. **Adi Shamir.** 1979. "How to Share a Secret." *Communications of the Association for Computing Machinery* 22(11): 612–613.

12. **John Steven and Jim Manico.** 2016. "A Password Storage Cheat Sheet." https://www.owasp.org/index.php/Password_Storage_Cheat_Sheet. (Accessed 2016).

### Preliminaries

#### A.1 Computational Assumptions

We recall the discrete logarithm and decisional Diffie-Hellman assumptions.

**Definition A.1 (Discrete Logarithm).** We say that the discrete logarithm assumption holds with respect to \( GGen \) if for all probabilistic polynomial-time (PPT) adversaries \( A \),
\[
\Pr_{(G, p, G) \leftarrow GGen(1^\lambda), x' \leftarrow A(G, p, G, G^x)}[x = x'] \leq \text{negl}(\lambda).
\]

**Definition A.2 (DDH).** We say that the decisional Diffie-Hellman assumption holds with respect to \( GGen \) if for all PPT adversaries \( A \),
\[
\left| \Pr_{(G, p, G) \leftarrow GGen(1^\lambda), x, y \leftarrow \mathbb{Z}_p, b \leftarrow A(G, p, G, G^x, G^y, G^{xy})}[b = 1] - \Pr_{(G, p, G) \leftarrow GGen(1^\lambda), x, y, z \leftarrow \mathbb{Z}_p, b \leftarrow A(G, p, G, G^x, G^y, G^z)}[b = 1] \right| \leq \text{negl}(\lambda).
\]

#### A.2 Non-Interactive Zero-Knowledge Proof of Knowledge (NIZKPoK)

We recall the notion of non-interactive zero-knowledge proof of knowledge (NIZKPoK) and a construction for generalized discrete logarithm relations.

Let \( R \subseteq \{0, 1\}^* \times \{0, 1\}^* \times \{0, 1\}^* \) be a ternary relation decidable in polynomial time. Given a common reference string (CRS) \( crs \), we say that \( w \) is a witness of a statement \( x \) if \( (crs, x, w) \in R \).

A tuple of PPT algorithms \( (Gen, Prove, Vf) \) is said to be a non-interactive proof of knowledge (NIZKPoK) scheme for the relation \( R \) if the following properties hold:

- **Perfect Completeness:** For all non-uniform polynomial-time algorithms \( A \),
  \[
  \Pr_{crs \leftarrow Gen(1^\lambda), (x, w) \leftarrow A(crs), \pi \leftarrow Prove(crs, x, w), b \leftarrow Vf(crs, x, \pi)}[(crs, x, w) \notin R \lor b = 1] = 1.
  \]

- **Statistical Proof of Knowledge:** There exists a probabilistic polynomial-time extractor \( E \) such that, for all (unbounded) adversaries \( A \),
  \[
  \Pr_{crs \leftarrow Gen(1^\lambda), (x, \pi) \leftarrow A(crs), w \leftarrow E(crs, x, \pi), b \leftarrow Vf(crs, x, \pi)}[(crs, x, w) \notin R \land b = 1] \leq \text{negl}(\lambda).
  \]
  Note that schemes satisfying this property in the common-reference-string model cannot be zero-knowledge, as the extractor \( E \) does not have secret inputs. This is, however, not an issue in the random oracle model, where \( E \) has black-box access to further copies of \( A \) with the randomness used to define \( (x, \pi) \), and simulates responses to random oracle queries made by \( A \). Furthermore, \( A \) is restricted to make only a polynomial number of random oracle queries.

- **Computational Zero-Knowledge:** There exists a probabilistic polynomial-time simulator \( S \) such that for all probabilistic polynomial-time adversaries \( A_1 \) and non-uniform polynomial-time algorithms \( A_2 \),
  \[
  \left| \Pr_{crs \leftarrow Gen(1^\lambda), (x, w) \leftarrow A_2(crs), \pi \leftarrow Prove(crs, x, w), b \leftarrow A_1(crs, x, \pi)}[(crs, x, w) \in R \land b = 1] - \Pr_{crs \leftarrow Gen(1^\lambda), (x, w) \leftarrow A_2(crs), \pi \leftarrow S(crs, x), b \leftarrow A_1(crs, x, \pi)}[(crs, x, w) \in R \land b = 1] \right| \leq \text{negl}(\lambda).
  \]
  In the random oracle model, \( S \) simulates responses to random oracle queries made by \( A_1 \) and \( A_2 \). Furthermore, \( A_2 \) is restricted to make only a polynomial number of random oracle queries.

Let \( GGen : 1^\lambda \mapsto crs = (G, G, p) \) be a group generator which generates a cyclic group \( G \) of order \( p \) with generator \( G \). Let \( H : \{0, 1\}^* \to \mathbb{Z}_p \) be a hash function. We recall in Figure 7 a generalized Schnorr protocol [17] (Prove, Vf) which is made non-interactive using the Fiat-Shamir transformation [9]. It is well known that the scheme \( (GGen, Prove, Vf) \) is (unconditionally) a NIZKPoK for the relation \( R_{GDL} \) if \( H \) is modeled as a random oracle.

### Discussion

In this section, we discuss miscellaneous topics related to our construction, including different variants, an optimization, a generalization, extensions, and applications.

#### B.1 Fine-Grained Rate-Limiting

Our construction leads to two slightly different variants of \((t, m)\)-PHE – one which supports fine-grained rate-limiting and one which only supports coarse-grained rate-limiting. The former requires a 7-round decryption protocol while the latter requires only 6 rounds. Apart from saving communication costs, the coarse-grained variant also simplifies the implementation.

### Figures and Algorithms

**Figure 7: A NIZKPoK for the Relation \( R_{GDL} \)**

**Prove(crs, x, w):**
1. Parse \( x \) as \( (A_{1,1}, \ldots, A_{m,1}, \ldots, A_{1,n}, \ldots, A_{m,n}) \).
2. Parse \( w \) as \( (x_1, \ldots, x_n) \).
3. Sample \( (r_1, \ldots, r_n) \leftarrow \mathbb{Z}_p \).
4. Compute \( R_i := \prod_{j=1}^n A_{i,j}^{r_j} \) for all \( i \in [m] \).
5. Compute \( c := H(crs, x, R_1, \ldots, R_m) \).
6. Compute \( (y_1, \ldots, y_n) := c \cdot (x_1, \ldots, x_n) + (r_1, \ldots, r_n) \).
7. Return \( (R_1, \ldots, R_m, y_1, \ldots, y_n) \).

**Vf(crs, x, \(\pi\)):**
1. Parse \( \pi \) as \( (R_1, \ldots, R_m, y_1, \ldots, y_n) \).
2. Compute \( c := H(crs, x, R_1, \ldots, R_m) \).
3. Check if \( \forall i \in [m], \prod_{j=1}^n A_{i,j}^{y_j} = B_i^c \cdot R_i \).
4. Return true if all checks pass, otherwise return false.

**Joint Decryption:**

**Server S("dec", sk0, pw, n, C):**
1. Compute \( T_0 := \tilde{U}^{k_0} \) and \( T'_0 := \tilde{U}'^{k_0} \) for all \( j \in P \).
2. Compute \( K_j := \prod_{\ell=0}^{t-1} \bar{K}_{j\ell} \) for all \( j \in P \).
3. Compute \( \pi_{3,0} \leftarrow \text{Prove}(crs, (G, K_0, T_0, T'_0)) \).
4. Ensure \( \forall j \in P : \text{Vf}(crs, (G, K_j, T_j, T'_j), \pi_{3,j}) \).
5. Compute \( T := \prod_{j \in P \cup \{0\}} T_j^{\lambda_{P,j}} \) and \( T' := \prod_{j \in P \cup \{0\}} T'_j^{\lambda_{P,j}} \).
6. Send \( (T_i, \pi_{3,i}, T'_i, \pi'_{3,i}) \) and \( \{(j, T_j, \pi_{3,j})\}_{j \in (P \cup \{0\}) \setminus \{i\}} \) to each \( i \in P \).

**Rate-limiter R_i("dec", sk_i), \(\forall i \in [m]\):**
1. Compute \( T_i := \tilde{U}^{k_i} \) and \( T'_i := \tilde{U}'^{k_i} \).
2. Compute \( K_i := G^{k_i} \) and \( K_j := \prod_{\ell=0}^{t-1} \bar{K}_{j\ell} \) for all \( j \in P \).
3. Compute \( \pi_{3,i} \leftarrow \text{Prove}(crs, (G, K_i, T_i, T'_i)) \).
4. Compute \( \pi'_{3,i} \leftarrow \text{Prove}(crs, (G, K_i, T_i, T'_i)) \).
5. Check if \( \forall j \in P \setminus \{i\} : \text{Vf}(crs, (G, K_j, T_j, T'_j), \pi_{3,j}) \).
6. Return \( b_i \) based on the verification results.