editors. Volume 7778. Springer, Heidelberg, 352–368. doi:
10.1007/978-3-642-36362-7_22.
[9] Amos Fiat and Adi Shamir. 1987. How to prove yourself: Prac-
tical solutions to identification and signature problems. In
CRYPTO’86 (LNCS). Andrew M. Odlyzko, editor. Volume 263.
Springer, Heidelberg, (August 1987), 186–194. doi: 10.1007/3-
540-47721-7_12.
[8]
[10] Yael Gertner, Yuval Ishai, Eyal Kushilevitz, and Tal Malkin.
2000. Protecting data privacy in private information retrieval
schemes. J. Comput. Syst. Sci., 60, 3, 592–629. doi: 10.1006/
jcss.1999.1689. https://doi.org/10.1006/jcss.1999.1689.
[11] Mauricio Karchmer and Avi Wigderson. 1993. On span pro-
grams. In Proceedings of Structures in Complexity Theory,
102–111.
[12] Russell W. F. Lai, Christoph Egger, Manuel Reinert, Sherman
S. M. Chow, Matteo Maffei, and Dominique Schröder. 2018.
Simple password-hardened encryption services. In USENIX
Security 2018. William Enck and Adrienne Porter Felt, editors.
USENIX Association, (August 2018), 1405–1421.
[13] Russell W. F. Lai, Christoph Egger, Dominique Schröder, and
Sherman S. M. Chow. 2017. Phoenix: rebirth of a crypto-
graphic password-hardening service. In USENIX Security
2017. Engin Kirda and Thomas Ristenpart, editors. USENIX
Association, (August 2017), 899–916.
[14] Allec Muffet. 2015. Facebook: password hashing and authen-
tication. https://www.youtube.com/watch?v=7dPRFoKteIU.
Video. (2015).
[15]
[16]
PCI Security Standards Council. 2016. Requirements and
security assessment procedures. PCI DSS v3.2. (2016).
Jonas Schneider, Nils Fleischhacker, Dominique Schröder,
and Michael Backes. 2016. Efficient cryptographic password
hardening services from partially oblivious commitments.
In ACM CCS 2016. Edgar R. Weippl, Stefan Katzenbeisser,
Christopher Kruegel, Andrew C. Myers, and Shai Halevi,
editors. ACM Press, (October 2016), 1192–1203. doi: 10 .
1145/2976749.2978375.
[17] Claus-Peter Schnorr. 1990. Efficient identification and signa-
tures for smart cards. In CRYPTO’89 (LNCS). Gilles Brassard,
editor. Volume 435. Springer, Heidelberg, (August 1990), 239–
252. doi: 10.1007/0-387-34805-0_22.
[18] Adi Shamir. 1979. How to share a secret. Communications of
the Association for Computing Machinery, 22, 11, (November
1979), 612–613.
John Steven and Jim Manico. 2016. A password storage cheat
sheet. https : / / www. owasp . org / index . php / Password _
Storage_Cheat_Sheet. (2016).
[19]
A PRELIMINARIES
A.1 Computational Assumption
We recall the discrete logarithm and decisional Diffie-Hellman as-
sumptions.
Definition A.1 (Discrete Logarithm). We say that the discrete
logarithm assumption holds with respect to GGen if for all PPT
adversaries A
Definition A.2 (DDH). We say that the decisional Diffie-Hellman
assumption holds with respect to GGen if for all PPT adversaries
Pr
𝑥 = 𝑥′ :
𝑏 = 1 :
𝑏 = 1 :
A (cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
Pr
−Pr
(G, 𝑝, 𝐺) ← GGen(1𝜆)
𝑥′ ← A(G, 𝑝, 𝐺, 𝐺𝑥)
𝑥 ←$ Z𝑝
(G, 𝑝, 𝐺) ← GGen(1𝜆)
𝑥, 𝑦 ←$ Z𝑝
𝑏 ← A(G, 𝑝, 𝐺, 𝐺𝑥, 𝐺 𝑦, 𝐺𝑥 𝑦)
(G, 𝑝, 𝐺) ← GGen(1𝜆)
𝑥, 𝑦, 𝑧 ←$ Z𝑝
𝑏 ← A(G, 𝑝, 𝐺, 𝐺𝑥, 𝐺 𝑦, 𝐺𝑧)
 ≤ negl(𝜆) .
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12) ≤ negl(𝜆) .
• (Perfect Completeness) For all non-uniform polynomial-time
Pr
algorithms A,
(crs, 𝑥, 𝑤) ∉ 𝑅 ∨ 𝑏 = 1 :
(crs, 𝑥, 𝑤) ∉ 𝑅 ∧ 𝑏 = 1 :
Pr
crs ← Gen(1𝜆)
(𝑥, 𝑤) ← A(crs)
𝜋 ← Prove(crs, 𝑥, 𝑤)
𝑏 ← Vf(crs, 𝑥, 𝜋)
crs ← Gen(1𝜆)
(𝑥, 𝜋) ← A(crs)
𝑤 ← E(crs, 𝑥, 𝜋)
𝑏 ← Vf(crs, 𝑥, 𝜋)
 = 1.
 ≤ negl(𝜆) .
• (Statistical Proof of Knowledge) There exists a probabilistic
polynomial time extractor E such that, for all (unbounded)
adversaries A,
Note that schemes satisfying this property in the common-
reference-string model cannot be zero-knowledge, as the
extractor E does not have secret inputs. This is however not
an issue in the random oracle model, where E has black-
box access to further copies of A with the randomness used
to define (𝑥, 𝜋), and simulates responses to random oracle
queries made by A. Furthermore, A is restricted to make
only a polynomial number of random oracle queries.
• (Computational Zero-Knowledge) There exists a probabilis-
tic polynomial time simulatorS, such that for all probabilistic
polynomial time adversaries A1 and non-uniform polyno-
mial time algorithms A2,
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
A1(crs, 𝑥, 𝜋) = 1 :
 (crs, 𝑥, 𝑤) ∈ 𝑅∧
 (crs, 𝑥, 𝑤) ∈ 𝑅∧
A1(crs, 𝑥, 𝜋) = 1 :
Pr
−Pr
crs ← Gen(1𝜆)
(𝑥, 𝑤) ← A2(crs)
𝜋 ← Prove(crs, 𝑥, 𝑤)
crs ← Gen(1𝜆)
(𝑥, 𝑤) ← A2(crs)
𝜋 ← S(crs, 𝑥)
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12) ≤ negl(𝜆) .
In the random oracle model, S simulates responses to ran-
dom oracle queries made by A1 and A2. Furthermore, A2
is restricted to make only a polynomial number of random
oracle queries.
Let GGen : 1𝜆 ↦→ crs = (G, 𝐺, 𝑝) be a group generator which
generates a cyclic group G of order 𝑝 with generator 𝐺. Let 𝐻 :
{0, 1}∗ → Z𝑝 be a hash function. We recall in Figure 7 a generalized
Schnorr protocol [17] (Prove, Vf) which is made non-interactive
using the Fiat-Shamir transformation [9]. It is well known that the
scheme (GGen, Prove, Vf) is (unconditionally) a NIZKPoK for the
relation 𝑅GDL if 𝐻 is modeled as a random oracle.
A.2 Non-Interactive Zero-Knowledge Proof of
Knowledge (NIZKPoK)
We recall the notion of non-interactive zero-knowledge proof of
knowledge (NIZKPoK) and a construction for generalized discrete
logarithm relations.
Let 𝑅 ⊆ {0, 1}∗ × {0, 1}∗ × {0, 1}∗ be a ternary relation decidable
in polynomial time. Given a common reference string (CRS) crs, we
say that 𝑤 is a witness of a statement 𝑥 if (crs, 𝑥, 𝑤) ∈ 𝑅.
A tuple of PPT algorithms (Gen, Prove, Vf) is said to be a non-
interactive proof of knowledge (NIZKPoK) scheme for the relation
𝑅 if the following properties hold:
B DISCUSSION
In this section we discuss miscellaneous topics related to our con-
struction, including different variants, an optimization, a general-
ization, extensions, and applications.
B.1 Fine-Grained Rate-Limiting
Our construction leads to two slightly different variants of (𝑡, 𝑚)-
PHE – one which supports fine-grained rate-limiting and one which
only supports coarse-grained rate-limiting. The former requires a
7-round decryption protocol while the latter requires only 6 rounds.
Apart from saving communication costs, the coarse-grained variant
13
Prove(crs, 𝑥, 𝑤)
𝐴1,1
...
𝐴𝑚,1
parse 𝑥 as
(cid:169)(cid:173)(cid:173)(cid:173)(cid:171)
parse 𝑤 as (𝑥1, . . . , 𝑥𝑛)
(𝑟1, . . . , 𝑟𝑛) ←$ Z𝑝
𝑅𝑖 :=𝑛
𝐴1,𝑛
. . .
...
. . .
. . . 𝐴𝑚,𝑛
(cid:170)(cid:174)(cid:174)(cid:174)(cid:172)
𝐵1
...
𝐵𝑚
𝑟 𝑗
𝑗=1𝐴
𝑖,𝑗 , ∀𝑖 ∈ [𝑚]
𝑐 := 𝐻 (crs, 𝑥, 𝑅1, . . . , 𝑅𝑚)
(𝑦1, . . . , 𝑦𝑛) := 𝑐 · (𝑥1, . . . , 𝑥𝑛) + (𝑟1, . . . , 𝑟𝑛)
return (𝑅1, . . . , 𝑅𝑚, 𝑦1, . . . , 𝑦𝑛)
𝐴1,𝑛
. . .
...
. . .
. . . 𝐴𝑚,𝑛
parse 𝑥 as
𝐴1,1
...
𝐴𝑚,1
Vf(crs, 𝑥, 𝜋)
(cid:169)(cid:173)(cid:173)(cid:173)(cid:171)
𝑏 := (∀𝑖 ∈ [𝑚],𝑛
parse 𝜋 as (𝑅1, . . . , 𝑅𝑚, 𝑦1, . . . , 𝑦𝑛)
𝑐 := 𝐻 (crs, 𝑥, 𝑅1, . . . , 𝑅𝑚)
𝑦 𝑗
𝑖,𝑗 = 𝐵𝑐
𝑗=1𝐴
𝑖 · 𝑅𝑖)
𝐵1
...
𝐵𝑚
(cid:170)(cid:174)(cid:174)(cid:174)(cid:172)
return 𝑏
Figure 7: A NIZKPoK for the relation 𝑅GDL
Joint Decryption
Server S(“dec”, sk0, pw, 𝑛, 𝐶)
𝑇0 := ˜𝑈 𝑘0 , 𝑇′
ℓ=0 ¯𝐾 𝑗ℓ
0 := ˜𝑈 ′𝑘0
, ∀𝑗 ∈ 𝑃
𝐾𝑗 :=𝑡−1
ℓ
(cid:18)
˜𝑈
, 𝑘0
(cid:19)
crs,
(cid:18)𝐺
(cid:18)
(cid:18)
𝐾0
𝑇0
(cid:19)
(cid:19)
(cid:18)𝐺
(cid:19)
(cid:18) 𝐺
, 𝑇′ :=𝑗∈𝑃∪{0}𝑇
𝐾𝑗
𝑇′
𝑗
𝐾𝑗
𝑇𝑗
, 𝜋3,𝑗
˜𝑈 ′
crs,
˜𝑈
, 𝜋′
3,𝑗
(cid:19)
(cid:19)
′𝜆𝑃,𝑗
𝑗
𝜋3,0 ← Prove
crs,
ensure ∀𝑗 ∈ 𝑃 : Vf
ensure ∀𝑗 ∈ 𝑃 : Vf
𝑇 :=𝑗∈𝑃∪{0}𝑇
𝜆𝑃,𝑗
𝑗
𝑇𝑖 , 𝜋3,𝑖 ,𝑇′
𝑖 , 𝜋′
3,𝑖
{( 𝑗,𝑇𝑗 , 𝜋3,𝑗)} 𝑗∈(𝑃∪{0})\{𝑖}
to 𝑖 ∈ 𝑃
Rate-limiter R𝑖 (“dec”, sk𝑖), ∀𝑖 ∈ [𝑚]
𝑇𝑖 := ˜𝑈 𝑘𝑖 , 𝑇′
𝑖 := ˜𝑈 ′𝑘𝑖
𝐾𝑖 := 𝐺𝑘𝑖 , 𝐾𝑗 :=𝑡−1
(cid:18)𝐺
(cid:18) 𝐺
𝜋3,𝑖 ← Prove
(cid:18)
(cid:18)
crs,
ℓ=0
𝜋′
3,𝑖 ← Prove
crs,
˜𝑈
˜𝑈 ′
(cid:18)
𝑏𝑖 :=
∀𝑗 ∈ 𝑃 \ {𝑖} : Vf
crs,