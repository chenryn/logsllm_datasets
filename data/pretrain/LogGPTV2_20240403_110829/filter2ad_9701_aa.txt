# 概述：
上一篇文章学习了使用Windows的消息钩子钩取进程的消息并对其进行处理，在这个操作中，我们注入DLL的方式是通过LoadLibrary直接在系统中加载DLL，通过检查目标进程的进程名来判断是否钩取其消息。这种方式非常简单直接，但是利用的范围不大。
对于DLL注入来说，还存在其他的几种注入方式，这一次学习的是通过在目标进程中创建一个远程线程，通过向远程线程中传入对应的DLL，而直接将DLL加载到目标进程的虚拟空间之中。
远程线程的概念大概是通过在另一个进程中创建远程线程的方法进入那个进程的内存地址空间 。
利用远程线程注入DLL这种方式针对性更强且运用也更为广泛。
这次的实验程序有两个：
  1. 执行注入操作的.cpp文件(inject.cpp)
  2. 被注入的.dll文件（dllmain.dll）
下面来分别分析这两个程序的代码
# DllMain.dll
首先还是先给出总的源代码，然后进行分析：
    #include"windows.h"
    #include"tchar.h"
    #pragma comment(lib,"urlmon.lib")
    #define URL (L"http://www.naver.com/index.html")
    #define FILE_NAME (L"index.html")
    HMODULE hMod = NULL;
    DWORD WINAPI ThreadProc(LPVOID lParam)
    {
        TCHAR szPath[_MAX_PATH] = { 0, };
        if (!GetModuleFileName(hMod, szPath, MAX_PATH))
        {
            return FALSE;       
        }
        TCHAR* p = _tcsrchr(szPath, '\\');
        if (!p)
        {
            return FALSE;
        }
        _tcscpy_s(p + 1, _MAX_PATH, FILE_NAME);
        URLDownloadToFile(NULL, URL, szPath, 0, NULL);
        return 0;
    }
    BOOL WINAPI DllMain(HINSTANCE hInstance, DWORD fwdReason, LPVOID lpvReserve)
    {
        HANDLE hThread = NULL;
        hMod = (HMODULE)hInstance;
        switch (fwdReason)
        {
        case DLL_PROCESS_ATTACH:
            OutputDebugString(L"start injection\n");
            hThread = CreateThread(NULL, 0, ThreadProc, NULL, 0, NULL);
            CloseHandle(hThread);
            break;
        default:
            break;
        }
        return TRUE;
    }
程序的逻辑还是比较简单的，主要如下：
  1. 远程线程需要执行的主要操作，本次实验中是完成一次下载操作（ThreadProc）
  2. DLL的入口点函数（DllMain）
下面来具体分析每个部分
## ThreadProc：
这个函数是之后在.cpp程序中创建了远程线程后，这个远程线程要进行的具体操作，可以理解为远程线程要完成的主要功能（也就是要完成下载操作的函数）
这个函数类似于DLL的入口点函数，是有一个固定的定义原型的，可以在MSDN上查到如下：
    DWORD WINAPI ThreadProc(
      _In_ LPVOID lpParameter
    );
这个函数原型只有一个参数：
  * lpParameter
这个参数就是在线程函数中可以自定义传入的函数参数，类型为一个VOID指针（
**这里有一个问题：常规使用到的ThreadProc函数参数只有一个，不知道是否能有多个，希望有清楚的大佬可以赐教** ）
ThreadProc函数的主要逻辑是先获取模块所在的文件路径，截取这个文件路径的中间部分与宏定义的目标文件名（也就是FILE_NAME）组成为后面下载函数需要使用到的一个路径参数。
然后调用了一个API函数URLDownloadToFile，这个就是一个下载文件的API函数，它包含在urlmon.lib这文件中，也就是在程序开头进行包含操作的那个lib文件。
这个API的函数原型在MSDN上查到如下：
    HRESULT URLDownloadToFile(
                 LPUNKNOWN            pCaller,
                 LPCTSTR              szURL,
                 LPCTSTR              szFileName,
      _Reserved_ DWORD                dwReserved,
                 LPBINDSTATUSCALLBACK lpfnCB
    );
  * pCaller：指向ActiveX的组件接口，如果没有调用的ActiveX的操作的话直接使用NULL即可
  * szURL：目标网址，也就是需要从什么地方下载文件
  * szFileName：文件下载后存放的路径，需要注意这个路径要包含下载后文件的文件名（也就是对应前将文件名和路径组合在一起）
  * dwReserved：保留参数，设为0即可
  * lpfnCB：回调接口，一般设置为NULL即可
这部分的代码和注释如下：
    DWORD WINAPI ThreadProc(LPVOID lParam) //创建线程回调函数
    {
        TCHAR szPath[_MAX_PATH] = { 0, }; //文件路径
        if (!GetModuleFileName(hMod, szPath, MAX_PATH)) //查找当前应用程序所在文件位置
        {
            return FALSE;       
        }
        TCHAR* p = _tcsrchr(szPath, '\\'); //获取文件路径
        if (!p)
        {
            return FALSE;
        }
        _tcscpy_s(p + 1, _MAX_PATH, FILE_NAME); //形成一个完整的文件保存路径
        URLDownloadToFile(NULL, URL, szPath, 0, NULL); //下载文件
        return 0;
    }
## DllMain：
这一部分的函数结构与上一篇中提到的DllMain函数的结构是一样的，这里就不多赘述，主要逻辑就是当DLL被装入内存后执行一个CreateThread的API函数，也就是创建线程的函数，这里要厘清一个逻辑顺序：这里创建的线程与远程线程是两个东西，这个线程是为了让ThreadProc能够正常执行，而远程线程是为了让宿主进程装载我们自定义的DLL。
这里主要提一下这个CreateThread的API函数，它在MSDN中可以查到如下：
    HANDLE CreateThread(
      [in, optional]  LPSECURITY_ATTRIBUTES   lpThreadAttributes,
      [in]            SIZE_T                  dwStackSize,
      [in]            LPTHREAD_START_ROUTINE  lpStartAddress,
      [in, optional]  __drv_aliasesMem LPVOID lpParameter,
      [in]            DWORD                   dwCreationFlags,
      [out, optional] LPDWORD                 lpThreadId
    );
  1. lpThreadAttributes：指向安全属性结构体的指针，这里一般设为NULL
  2. dwStackSize：线程堆栈的初始大小，一般是设置为0，使用可执行文件的默认大小
  3. lpStartAddress：指向线程执行函数的指针，也就是指向ThreadProc的指针
  4. lpParameter：ThreadProc函数的参数，也就是对应其函数原型中那个LPVOID lParam参数（在传入时可以将指针类型进行强转，强转为LPVOID，可以避免一些bug）
  5. dwCreationFlags：控制线程创建的标志，有三种选择，具体参考MSDN，这里选择设为0，即创建后线程立即运行。
  6. lpThreadId：指向接收线程标识符的变量的指针，如果此参数为 NULL，则不返回线程标识符。
函数执行成功后函数会返回新线程的句柄，所以可以通过其返回值检查线程是否打开成功。
# Inject.cpp：
首先是总的源码，然后分步进行分析：
    #include"windows.h"
    #include"tchar.h"
    #include"stdio.h"
    #include"Urlmon.h"
    BOOL injectDll(DWORD dwPID, LPCTSTR szDllPath)
    {
        HANDLE hProcess = NULL;
        HANDLE hThread = NULL;
        HMODULE hMod = NULL;
        LPVOID lRemoteBuf = NULL;
        DWORD BufSize = (DWORD)(_tcslen(szDllPath) + 1) * sizeof(TCHAR); 
        LPTHREAD_START_ROUTINE pThreadProc; 
        if (!(hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwPID)))
        {
            _tprintf(L"进程打开失败");
            return FALSE;
        }
        lRemoteBuf = VirtualAllocEx(hProcess, NULL, BufSize, MEM_COMMIT, PAGE_READWRITE);
        WriteProcessMemory(hProcess, lRemoteBuf, (LPVOID)szDllPath, BufSize, NULL);
        hMod = GetModuleHandle(L"kernel32.dll");
        pThreadProc = (LPTHREAD_START_ROUTINE)GetProcAddress(hMod, "LoadLibraryW");
        hThread = CreateRemoteThread(hProcess, NULL, 0, pThreadProc, lRemoteBuf, 0, NULL);
        WaitForSingleObject(hThread, INFINITE);
        CloseHandle(hThread);
        CloseHandle(hProcess);
        return TRUE;
    }
    BOOL EnableDebugPriv()
    {
        HANDLE hToken;
        LUID Luid;
        TOKEN_PRIVILEGES tkp;
        if (!OpenProcessToken(GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &hToken))
        {
            printf("提权失败。");
            return FALSE;
        }
        if (!LookupPrivilegeValue(NULL, SE_DEBUG_NAME, &Luid))
        {
            CloseHandle(hToken);
            printf("提权失败。");
            return FALSE;
        }
        tkp.PrivilegeCount = 1;
        tkp.Privileges[0].Luid = Luid;
        tkp.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;
        if (!AdjustTokenPrivileges(hToken, FALSE, &tkp, sizeof tkp, NULL, NULL))
        {
            printf("提权失败。");
            CloseHandle(hToken);
        }
        else
        {
            printf("提权成功！");
            return TRUE;