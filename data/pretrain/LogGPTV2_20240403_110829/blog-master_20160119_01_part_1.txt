## PostgreSQL 百亿地理位置数据 近邻查询性能    
### 作者                                                                         
digoal                                                                          
### 日期                                                                        
2016-01-19                                                                          
### 标签                                                                        
PostgreSQL , KNN , 地理位置 , PostgreSQL , 点面判断 , 近邻查询 , 查找附近的人 , 百亿级          
----                                                                        
## 背景  
本文主要要展示的是PostgreSQL在位置信息近邻（KNN）查询方面的性能。  
测试类型point，索引类型GiST。  
（PostGIS同样支持KNN查询，性能和本文的测试差不多）   
测试数据量大于100亿。  
测试结果  
64个并发，随机选点，单次KNN查询请求的平均响应时间为0.848毫秒。  
测试环境和优化请参考  
http://blog.163.com/digoal@126/blog/static/16387704020160941345888/  
## 测试细节  
### 创建测试表  
```  
postgres=# create table tbl_point(id serial8, poi point);  
CREATE TABLE  
postgres=# \d tbl_point  
                      Table "benchmarksql.tbl_point"  
 Column |  Type  |                       Modifiers                          
--------+--------+--------------------------------------------------------  
 id     | bigint | not null default nextval('tbl_point_id_seq'::regclass)  
 poi    | point  |   
postgres=# alter sequence tbl_point_id_seq cache 10000;  
ALTER SEQUENCE  
```  
### 生成测试数据：  
point的x和y的取值范围都是-50000到50000，所以一共可以生成100亿个不同的point。  
和测试数据量相符。  
```  
vi test.sql  
insert into tbl_point(poi) select point(trunc(100000*(0.5-random())), trunc(100000*(0.5-random()))) from generate_series(1,10000);  
```  
使用pgbench 每秒 约插入233万位置信息。  
```  
pgbench -M prepared -n -r -f ./test.sql -P 1 -c 96 -j 96 -T 1100  
tps = 233.018365 (including connections establishing)  
tps = 233.150940 (excluding connections establishing)  
```  
数据量  
```  
postgres=# select count(*) from tbl_point;  
   count      
------------  
 2532820000  
(1 row)  
```  
当前表大小：  
```  
postgres=# \dt+  
 benchmarksql | tbl_point  | table | postgres | 123 GB   |   
```  
在point类型上创建GiST索引  
```  
postgres=# create index idx_tbl_point on tbl_point using gist(poi) with (buffering=on);  
postgres=# \d+ tbl_point  
                                         Table "benchmarksql.tbl_point"  
 Column |  Type  |                       Modifiers                        | Storage | Stats target | Description   
--------+--------+--------------------------------------------------------+---------+--------------+-------------  
 id     | bigint | not null default nextval('tbl_point_id_seq'::regclass) | plain   |              |   
 poi    | point  |                                                        | plain   |              |   
Indexes:  
    "idx_tbl_point" gist (poi) WITH (buffering='on')  
```  
索引大小：  
```  
\di+  
 benchmarksql | idx_tbl_point      | index | postgres | tbl_point  | 170 GB  |   
```  
新建完索引后，插入性能会下降，现在每秒约插入55万条位置信息。  
```  
pgbench -M prepared -n -r -f ./test.sql -P 1 -c 96 -j 96 -T 100  
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
number of clients: 96  
number of threads: 96  
duration: 100 s  
number of transactions actually processed: 5587  
latency average: 1726.947 ms  
latency stddev: 118.223 ms  
tps = 55.390665 (including connections establishing)  
tps = 55.419003 (excluding connections establishing)  
statement latencies in milliseconds:  
        1726.946947     insert into tbl_point(poi) select point(trunc(100000*(0.5-random())), trunc(100000*(0.5-random()))) from generate_series(1,10000);  
```  
持续插入100亿记录  
```  
pgbench -M prepared -n -r -f ./test.sql -P 1 -c 64 -j 64 -T 13600  
```  
表大小  
```  
500GB  
```  
索引大小  
```  
720GB  
```  
### knn检索例子  
```  
postgres=# select *,poi  point(1000,1000) dist from tbl_point where poi  point(1000,1000)  point(1000,1000) limit 10;  
     id     |     poi     |       dist         
------------+-------------+------------------  
  399588621 | (1000,999)  |                1  
 1030719903 | (1001,999)  |  1.4142135623731  
 2698052191 | (1001,1001) |  1.4142135623731  
 3291219762 | (999,999)   |  1.4142135623731  
 2757190006 | (1002,1000) |                2  
 2862610530 | (998,1001)  | 2.23606797749979  
 3450459141 | (998,1001)  | 2.23606797749979  
 3124756442 | (1002,1001) | 2.23606797749979  
 3105439886 | (1001,998)  | 2.23606797749979  
  473144305 | (998,1002)  | 2.82842712474619  
(10 rows)  
```  
KNN执行计划  
排序和检索都走了GiST索引。  
例如，一个查询如下，扫描了16个数据块，在shared buffer命中8个，读8个块(可能在OS CACHE或直接读block dev)。  
```  
postgres=# explain (analyze,verbose,buffers,timing,costs) select *,poi  point(10090,10090) dist from tbl_point where poi  point(10090,10090)  point(10090,10090) limit 10;  
                                                                           QUERY PLAN                                                                             
----------------------------------------------------------------------------------------------------------------------------------------------------------------  
 Limit  (cost=0.56..13.15 rows=10 width=24) (actual time=0.469..1.309 rows=10 loops=1)  
   Output: id, poi, ((poi  '(10090,10090)'::point))  
   Buffers: shared hit=8 read=8 dirtied=1  
   ->  Index Scan using idx_tbl_point on benchmarksql.tbl_point  (cost=0.56..1510464450.86 rows=1199422376 width=24) (actual time=0.468..1.306 rows=10 loops=1)  
         Output: id, poi, (poi  '(10090,10090)'::point)  
         Order By: (tbl_point.poi  '(10090,10090)'::point)  
         Filter: ((tbl_point.poi  '(10090,10090)'::point)  point(:x,:y)  point(:x,:y) limit 1;  
```  
测试结果  
单次请求的平均响应时间为0.848毫秒。  
```  
pgbench -M prepared -n -r -f ./test.sql -P 1 -c 64 -j 64 -T 100  
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
number of clients: 64  
number of threads: 64  
duration: 100 s  
number of transactions actually processed: 7418337  
latency average: 0.858 ms  