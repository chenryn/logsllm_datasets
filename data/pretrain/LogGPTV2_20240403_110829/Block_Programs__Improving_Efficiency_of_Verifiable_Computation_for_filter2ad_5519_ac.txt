k∗∈K;k∗̸=k
k∈K
Thus, Av;(w1;w2)(t) =
Bj;(w1;w2)(t) =
∏
∏
∏
k∈K;k̸=w2
k∈K;k̸=w2
0 otherwise:
((cid:27)w2
(t−(cid:27)k)
((cid:27)(w2−1)
∏
k∈K;k̸=w2−1
∏
∏
k∈K;k̸=w2−1
0 otherwise
k′∈K;k′̸=k
k′∈K;k′̸=k
(t−(cid:27)k)
−(cid:27)k)
if w1=v;and
1≤w2≤K;
−(cid:27)k) if w1=j; and
2≤w2≤K+1;
: If
we deﬁne Ak(t) =
gram can be expressed by Ak(t) where k = 1; 2;··· ; K:
(t−(cid:27)k′ )
((cid:27)k−(cid:27)k′ ) , then, the block pro-
Av;(w1;w2)(t) =
Bj;(w1;w2)(t) =
Aw2 (t)
0
Aw2−1(t)
0
if w1 = v; 1 ≤ w2 ≤ K
otherwise:
(5.1)
if w1 = j; 2 ≤ w2 ≤ K + 1
otherwise:
(5.2)
{
{
If we express the corresponding Block Programs by these
Ak(t), instantiate the wire values, and plug them into Deﬁni-
tion 2, we directly have the following result for loop circuits.
Corollary 2. We consider a loop circuit which com-
putes a function Ψ : FM +K·Q 7→ FM . As in Figure 3, this
loop circuit is composed of successive blocks which are iden-
tical and denoted by   : FM +Q 7→ FM . Naturally, the block
can be formulated as M functions:  j : FM +Q 7→ F, j =
1; 2;··· ; M . Let Q be the block program that computes Ψ us-
ing block  . Then, for inputs (Z1;1; Z2;1;··· ; ZM;1) ∈ FM and
the extra inputs ZM +1;1, ZM +2;1, ··· , ZM +Q;1, ··· , ZM +1;K ,
ZM +2;K , ··· , ZM +Q;K , all of which are in F, the correspond-
ing outputs of the circuit are (Z1;K+1; Z2;K+1;··· ; ZM;K+1) ∈
FM , iﬀ there exist coeﬃcients (they are actually the inner
wire values) (Z1;2;··· ; ZM;2) ∈ FM , (Z1;3;··· ; ZM;3) ∈ FM ,
··· , (Z1;K ;··· ; ZM;K ) ∈ FM such that D(t) divides Pj(t)
( K∑
K∑
(j = 1; 2;··· ; M ) where Pj(t) =
(
ZM;k · Ak(t);
Z1;k · Ak(t);··· ;
)
K∑
K∑
)
ZM +1;k · Ak(t);
K∑
 j
k=1
k=1
k=1
··· ;
ZM +Q;k · Ak(t)
−
Zj;k+1 · Ak(t)
:
(5.3)
k=1
k=1
In other words, there exists a polynomial Hj(t) for each Pj(t)
(j = 1; 2;··· ; M ), such that D(t) · Hj(t) = Pj(t).
409Figure 3: A Loop Circuit
Figure 4: One
Single Block
Proof. Since the loop circuit is a circuit which is com-
posed of identical blocks, by Deﬁnition 2, for the purported
intermediate wire values (Z1;2,··· ,ZM;2), (Z1;3,··· ,ZM;3), ··· ,
(Z1;K ,··· ,ZM;K ), it suﬃces to prove (5.3) is equivalent to
(4.1) in the context of loop circuits. In the context of loop
circuits, (4.1) is:
Pj(t) =  j
Zw1;w2
(M +Q∑
K+1∑
M +Q∑
K+1∑
(
M +Q∑
K+1∑
w1=1
w2=1
w2=1
w1=1
−
Zw1;w2
· A1;(w1;w2)(t);··· ;
)
)
· AM +Q;(w1;w2)(t)
· Bj;(w1;w2)(t)
:
Zw1;w2
(5.4)
w1=1
w2=1
If we instantiate Av;(w1;w2)(t), Bj;(w1;w2)(t) using (5.1) and
(5.2), we immediately get (5.3). The conclusion follows.
5.2 Our Interactive Veriﬁcation for Loops
Corollary 2 implies a way to verify a result computed by
a “loop” circuit using BPs. To convince V that the result is
correct, by the Corollary 2, it suﬃces to show the existence
of those intermediate results and the polynomial Hj(t) which
satisfy the divisibility D(t) · Hj(t) = Pj(t).
The divisibility itself can be checked probabilistically: for
polynomials Pj(t), Hj(t) and D(t), V randomly picks (cid:28) ∈ F
and checks whether D((cid:28) ) · Hj((cid:28) ) = Pj((cid:28) ): (We will show
how to evaluate D((cid:28) ), Hj((cid:28) ) and Pj((cid:28) ) later.) If the result
is correct, P must be able to ﬁnd Hj(t) such that Pj(t) =
Hj(t)· D(t), then for any (cid:28) ∈ F, D((cid:28) )· Hj((cid:28) ) = Pj((cid:28) ): If the
result is not correct, then for any Hj(t), D((cid:28) )·Hj((cid:28) ) ̸= Pj((cid:28) )
except with a small probability.
To check the existence of the intermediate results and the
polynomial Hj(t), one naive idea is to let P output the inter-
mediate results and Hj(t), and let V evaluate Hj((cid:28) ) and use
Instead
the intermediate results to check the divisibility.
of this expensive approach, we use a “commit and query”
method. Roughly speaking, we have P commit to the inter-
mediate results and Hj(t) ﬁrst. Then, when V needs to use
the intermediate results and Hj((cid:28) ), he will query P to get
purported values and ﬁnally check the divisibility. (We will
show the “commit and query” method in details later.)
Now we show how we evaluate D((cid:28) ), Hj((cid:28) ) and Pj((cid:28) ).
For D((cid:28) ), V can construct D(t) himself and evaluate D((cid:28) )
K
K
(1)
K
k=1 EX
∑
himself. In our protocol, neither V nor P will materialize
∑
Pj((cid:28) ). Pj(t) involves three sets of polynomials: the poly-
∑
nomials that abstract the outputs of the blocks: Gj(t) =
k=1 Zj;k+1 · Ak(t); j = 1; 2··· M ; the polynomials that
k=1 Zi;k ·
abstract the inputs of the blocks: fINi (t) =
Ak(t); i = 1; 2··· M ; and the polynomials that abstract the
·
(1)
[(k−1)·Q]+u
extra inputs of the blocks: fEXu (t) =
(k−1)·Q+u = Zu+M;k. V
Ak(t); u = 1; 2;··· ; Q, where EX
can construct fEXu (t) and evaluate fEXu ((cid:28) ) himself. We ob-
serve that Gj(t) and fINi (t) are the only parts in the divis-
ibility equation (5.3) that involve the intermediate results.
When evaluating them, neither V nor P genuinely materi-
alizes the polynomial. We view Gj(t), fINi (t) and Hj(t) to
be linear functions, denoted by (cid:25)Gj (j = 1;··· ; M ), (cid:25)INi
(i = 1;··· ; M ), (cid:25)Hj (j = 1;··· ; M ), respectively. We have
P commit to them ﬁrst1, then have V evaluate these poly-
nomials through querying P on these committed functions,
as in [25, 26, 24]. More speciﬁcally, as a PCP style protocol,
in our protocol, P holds a proof l and V holds a query q.
When queried with q, P responds with the evaluation of the
linear function (cid:25)(q) = ⟨l; q⟩ (where ⟨·;·⟩ is the inner prod-
uct of two vectors), which should be the evaluation of l(t)
at the point t = (cid:28) . For example, if l represents the coeﬃ-
cient vector of the polynomial l(t) and q = (1; (cid:28); (cid:28) 2;··· ; ),
then (cid:25)(q) is l((cid:28) ). To evaluate Gj((cid:28) ), V queries P with:
qG = (A1((cid:28) ); A2((cid:28) )··· ; AK−1((cid:28) )). To evaluate fINi ((cid:28) ), V
queries P with: qIN = (A2((cid:28) ); A3((cid:28) )··· ; AK ((cid:28) )). To eval-
uate Hj((cid:28) ), V queries P with: qH = (1; (cid:28); (cid:28) 2;··· ). The
length of qH is equal to the highest degree of all Hj(t)
(j = 1;··· M ).
So far we have demonstrated all the techniques we will
use. Now we show our interactive veriﬁcation protocol as in
Figure 5. Note that before veriﬁcation, V sends the loop pro-
gram and (Z1;1; Z2;1;··· ; ZM;1) (ZM +1;1; ZM +2;1;··· ; ZM +Q;1)
··· (ZM +1;K ; ZM +2;K ;··· ; ZM +Q;K ) to P; on these inputs
P computes and returns the results: (Z1;K+1;··· ; ZM;K+1).
Our idea is to prove that the wire values between repeated
substructures are calculated correctly, and then prove that
the blocks themselves are computed correctly, rather than
trying to verify the entire circuit in one round. The ad-
1Since the commit/decommit and corresponding linearity
tests are mature techniques as in [25, 26, 24], we omit the
details here
410: FM +K·Q 7→ FM .
vantage of this approach is that, since all blocks have iden-
tical structure, the veriﬁcation of all blocks can be done
together as though all blocks are collapsed into a single
block. Let the loop circuit contain K loop iterations. We
view the whole circuit from a two-layer perspective. In the
ﬁrst layer’s perspective, the circuit consists of one big block,
which we call the ﬁrst layer block and denote by a func-
tion  (1)
In the second layer’s per-
spective, the circuit consists of K smaller blocks, which
we call the second layer block and denote by a function
 (2) : FM +K·Q=K 7→ FM . Each of the second layer blocks
is one loop iteration. We reduce the task of verifying (for
j = 1; 2;··· ; M )
j = (1)
1 ;··· ; EX
to the task of verifying (for j = 1; 2;··· ; M )
1 ;··· ; IN
(1)
M ; EX
(1)
Q·K );
(5.5)
(IN
OUT
(1)
(1)
(1)
j
OUT
(2)
j =  (2)
j (IN
(2)
1 ;··· ; IN
(2)
M ; EX
(2)
1 ;··· ; EX
(2)
Q );
(5.6)
(1)
(1)
(1)
1 ;··· ; EX
1 ;··· ; IN
1 ;··· ; OUT
(1)
M , and extra inputs EX
(Here we want to abstract each layer to a block. We denote
inputs (directly from the previous iteration) to this block
by IN, extra inputs (from the outside of the iterations) by
EX, and outputs from the block by OUT. Because we have
multiple layers, we identify inputs/outputs/extra inputs to
each layer by an upper index. Therefore, in our special case
(1)
layer 1 (the whole circuit) has inputs IN
M , out-
(1)
Q·K ,
puts OUT
as in Figure 3, where the second layer (one loop iteration)
(2)
(2)
has inputs IN
M , extra inputs EX
Q , and
(2)
(2)
output OUT
M , as in Figure 4. It is advantageous
to use this notation because when verifying the iterations,
we collapse all of them into a single iteration, such that
IN
dividual iterations’ inputs, outputs and extra inputs. )
1 ;··· , OUT
1 ;··· are aggregates of the in-
To verify (5.6), V can compute itself, or let P perform
some other veriﬁcation protocols like Pinocchio [23], Zaatar
[24], etc. We omit the details here.
5.3 Security Analysis
1 ;··· ; IN
1 ;··· ; OUT
1 ;··· , and EX
1 ;··· ; EX
(2)
(2)
(2)
(2)
(2)
Now, we provide the completeness and soundness of our
design.
Theorem 3. (Completeness) As in Figure 3, the inputs
are (Z1;1; Z2;1;··· ; ZM;1), (ZM +1;1; ZM +2;1;··· ; ZM +Q;1), ··· ,
(ZM +1;K ; ZM +2;K ;··· ; ZM +Q;K ), and (P;V) run the proto-
col in Figure 5. If the results (Z1;K+1; Z2;K+1;··· ; ZM;K+1)
are correct, then P r{V accepts} = 1.
To prove the completeness(Theorem 3), the idea is to show
that an honest prover is able to provide the correct proof as-
sociated with the correct results. This correct proof will pass
all the checks with probability 1. This is straightforward and
we omit the details here.
Theorem 4. (Soundness) As in Figure 3, assume the in-
puts are (Z1;1; Z2;1;··· ; ZM;1), (ZM +1;1; ZM +2;1;··· ; ZM +Q;1),
··· , (ZM +1;K ; ZM +2;K ;··· ; ZM +Q;K ), and P and V proceed
according to Figure 5. There exists a constant (cid:20)  (cid:20), the purported results are correct.
The proof of the soundness is in Appendix A.
ing
5.4 Improving the Performance through Batch-
One question left over is whether, if V queries diﬀerent lin-