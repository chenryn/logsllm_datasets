title:Supporting network evolution and incremental deployment with XIA
author:Robert Grandl and
Dongsu Han and
Suk-Bok Lee and
Hyeontaek Lim and
Michel Machado and
Matthew K. Mukerjee and
David Naylor
Supporting Network Evolution and Incremental
Deployment with XIA
Robert Grandl*, Dongsu Han, Suk-Bok Lee, Hyeontaek Lim, Michel Machado†,
Matthew Mukerjee, David Naylor
Carnegie Mellon University
* University of
Wisconsin-Madison
† Boston University
ABSTRACT
eXpressive Internet Architecture (XIA) [1] is an architecture that
natively supports multiple communication types and allows net-
works to evolve their abstractions and functionality to accommo-
date new styles of communication over time. XIA embeds an ele-
gant mechanism for handling unforeseen communication types for
legacy routers.
In this demonstration, we show that XIA overcomes three key
barriers in network evolution (outlined below) by (1) allowing end-
hosts and applications to start using new communication types (e.g.,
service and content) before the network supports them, (2) ensur-
ing that upgrading a subset of routers to support new functionalities
immediately beneﬁts applications, and (3) using the same mecha-
nisms we employ for 1 and 2 to incrementally deploy XIA in IP
networks.
Categories and Subject Descriptors
C.2.1 [Computer-Communication Networks]: Network Archi-
tecture and Design
General Terms
Design
Keywords
Internet architecture, evolution, multiple communication styles
1
What makes network evolution so hard? The “narrow waist”
design of the Internet has been tremendously successful. How-
ever, the Internet does not facilitate a clean, incremental path for
the adoption of new capabilities at the narrow waist. Two main
barriers against evolution are:
Introduction
B1 It is not possible for an end-host or an application to use new
functionality until the network supports it.
B2 There is no built-in mechanism to support incremental de-
ployment of new functionality. For example, enabling a sin-
gle router in a IP network to support content-centric network-
ing is fruitless if that trafﬁc will simply be tunneled through
the network using IP.
XIA [1] is a clean-state architecture that solves these issues.
However, a clean-state design has its own problems:
Copyright is held by the author/owner(s).
SIGCOMM’12, August 13–17, 2012, Helsinki, Finland.
ACM 978-1-4503-1419-0/12/08.
B3 Incrementally deploying a new architecture over IP is non-
trivial and often requires careful conﬁguration.
In this demo, we show that XIA effectively overcomes these
three barriers. The rest of this section provides a brief summary
of XIA’s core mechanism for evolution.
How does XIA solve this? The key architectural element that XIA
adds to provide evolvability is the notion of an extensible set of
principal communication types (e.g., host-to-host, service-oriented,
and content-oriented). By selecting the appropriate principal for a
given communication, applications can directly express the intent
of that communication.
XIA’s addresses can simultaneously express both identiﬁers for a
“new” principal type (e.g., a content or service identiﬁer) and one or
more backwards compatible identiﬁers (e.g., host identiﬁers) called
fallbacks. XIA allows for this ﬂexibility by specifying addresses as
directed acyclic graphs (DAGs). For example, the following DAG
speciﬁes that the intent is to reach a service (“Srv”), but routers
may instead forward the packet to host “Hst” in destination network
“Dom” if they do not support services.
Srv
Dom
Hst
Thus, by using fallbacks, two hosts that have been upgraded to un-
derstand the service principal can begin to use it even if no routers
support the principal type, overcoming B1. As some routers are up-
graded to support services, applications (without any modiﬁcation)
will begin to see beneﬁts (B2).
How can XIA be deployed? To address B3, we introduce a new
principal type: IPv4 addresses, or “4IDs.” 4IDs leverage the power
of the XIA addressing scheme (namely DAGs and fallbacks) to sup-
port old communication styles (IPv4). We do this by encoding IPv4
addresses within these 4ID identiﬁers, which are included in DAGs
as fallbacks.
Using 4IDs, we can effectively connect an XIA island to the XIA
backbone. A 4ID speciﬁes an IPv4 entry point (a dual-stack router)
of an XIA network, and is obtained through name resolution. Thus,
we eliminate the burden of manually conﬁguring tunnels between
XIA islands. When a packet with a 4ID fallback can no longer
progress though the XIA network, we use the IPv4 address and dy-
namically tunnel the packet to the XIA network whose IPv4 entry
address is speciﬁed by the 4ID.
This begs the question: where do 4IDs come from? The sender
must know of an IPv4 address that serves as an ingress point to the
destination XIA network. We handle this by having each domain
register a set of IPv4 addresses that it is willing to use as ingress
281points. These addresses are returned as 4IDs during the name reso-
lution process.
2 System Overview
We have implemented support for host-, service- and content-oriented
communication over XIA. This includes an XIA router with principal-
speciﬁc processing for each of these principals as well as each
type’s end-host stack and socket API.
Router: We have implemented a prototype router in Click that
processes XIA packets. All routers support host-based communica-
tion. Additionally, routers may support the content, service, and/or
4ID principal types. If content support is enabled, our routers can
act as in-network caches. The router forwards packets that con-
tain content to the content module, which stores content and inserts
a routing entry for the cached content to direct future requests to
itself. If services are supported, anycast and failover support are
implemented.
End-host: We have implemented end-host support for service- and
content-oriented communication and exposed this functionality to
application developers through a sockets API resembling standard
Berkeley sockets. To invoke a particular transport type (and thereby
choose either service- or content-oriented communication), devel-
opers pass an extra parameter when creating a socket.
Applications: See below.
3 Demo Scenarios
We will demonstrate our solutions to the three barriers discussed in
§1, using both the service and content principal types as examples
of new functionality we wish to add to the network incrementally.
To do so, we will use two small XIA networks we have deployed
on GENI and at Carnegie Mellon University (CMU).
Applications We have developed some simple applications that
run over XIA and are in the process of developing more. Some
subset of these will be used to demo XIA:
(cid:129) Web server (and proxy)
(cid:129) Video streaming server (uses content support)
(cid:129) “Stock Ticker” server (uses service support)
(cid:129) “VoIP” (VoXIA, really) — in development
(cid:129) A fun, interactive, application that you too can try (see “At-
tendee Participation” below) — in development
Demonstrating Solutions to Evolution Barriers We will ﬁrst demon-
strate that XIA allows applications to begin using new principal
types without network support (B1) by running applications that
use the service and content principals over a network of XIA routers
in GENI that support only the host principal. The applications run
without problems because the routers use fallbacks to satisfy the ap-
plication’s intent. The audience will be able to observe the amount
of trafﬁc (by principal type) ﬂowing on each link through our real-
time visualization tool that monitors activity on GENI. Figure 1(a)
illustrates this example; none of the packets are being processed us-
ing CID- or SID-speciﬁc processing, meaning the “legacy” routers
are using the host ID fallbacks.
We will then demonstrate that applications can beneﬁt by up-
grading even just one router in the network to support a new princi-
pal type (B2). By enabling support for the content principal type at
one of the routers in our demo network, our video streaming appli-
cation can immediately beneﬁt from in-network content caching.
The audience will be able to observe that the video is being served
(a) Routers forward based on fallback
host IDs
(b) Upgraded routers now forward
packets based on CIDs
Figure 1: Video streaming over XIA networks with and without
support for the content principal.
Figure 2: We use the IPv4 principal type to communicate be-
tween XIA networks without explicit tunnels.
from a nearby cache instead of the server we fell back to previ-
ously. On the upgraded router the trafﬁc will look like Figure 1(b):
the same packets are passing through the link, but our router now
understands that we are using content IDs (CIDs).
Finally, we can show how XIA might be incrementally deployed
in today’s IP Internet (B3). By adding 4IDs as fallback nodes in our
DAG addresses (see below), we will allow XIA-enabled dual-stack
machines at CMU to communicate with our XIA network on GENI
(Figure 2). The GENI XIA backbone and the CMU XIA island will
be connected using 4IDs instead of a manually conﬁgured tunnel.
CID
4IDA
AD
HID
Attendee Participation We are developing an interactive applica-
tion to run over XIA that will allow us to demonstrate 4IDs on a
larger scale. The application will be added to the XIA source code
(already available1) and, environment permitting, we hope to al-
low conference attendees to download our VM and join the fun.
Each XIA-enabled VM would function as its own singleton XIA
network; client applications connecting to our servers would use
4IDs as fallbacks to traverse the IPv4 Internet. The demo will pro-
vide entertainment as well as ﬁrst-hand experience with how two
disjoint XIA networks can be connected using 4IDs.
4 Acknowledgments
This research was supported in part by the National Science Foun-
dation under awards CNS-1040757, CNS-1040800, and CNS-1040801.
5 References
[1] D. Han, A. Anand, F. Dogar, B. Li, H. Lim, M. Machado,
A. Mukundan, W. Wu, A. Akella, D. G. Andersen, J. W. Byers,
S. Seshan, and P. Steenkiste. XIA: Efﬁcient support for evolvable
internetworking. In Proc. 9th USENIX NSDI, San Jose, CA, Apr. 2012.
1http://www.cs.cmu.edu/~xia/
282