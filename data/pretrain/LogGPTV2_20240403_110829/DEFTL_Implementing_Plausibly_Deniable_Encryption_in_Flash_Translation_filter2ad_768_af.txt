DEFTL
Figure 9: Throughput comparison between OpenNFM and
the PDE mode of DEFTL
time for write requests and slightly increase the write throughput
in DEFTL.
Wear leveling. To distribute writes evenly across the entire (cid:30)ash
(Sec. 2.2), DEFTL utilizes a global wear leveling strategy. We use
Hoover economic wealth inequality indicator, which was used in
previous work [7, 32] to evaluate wear leveling e(cid:29)ectiveness. This
metric calculates an appropriately normalized sum of the di(cid:29)erence
of each measurement to the mean. For (cid:30)ash memory, it indicates
the fraction of erasures that must be re-assigned to other blocks
in order to achieve completely even wear. Assuming the erasure
i =1 fn,
the wear leveling inequality (WLI) can be computed as: WLI =
1
2
counts of all the n erase blocks are f1, f2,..., fn, and F =n
n
F − 1
n (cid:107).
i =1(cid:107) fi
We evaluated the wear leveling e(cid:29)ectiveness of DEFTL by vary-
ing the wear leveling threshold. To compute the WLI, we follow
these steps: 1) Choose a wear leveling threshold; 2) Fill the entire
(cid:30)ash with approximately 500MB data (we call this process a wear
leveling test epoch). In DEFTL, we write data to both the public
volume and the hidden volume; 3) Erase all the data being written;
4) Repeat each epoch until 250GB data has been written in total; 5)
Compute WLI. In addition to WLI, we also calculated the average
number of erasures per block performed during each epoch.
The results are shown in Table 1, under di(cid:29)erent wear level-
ing (WL) thresholds. We have following observations: 1) When
the threshold decreases, a more active wear leveling will be per-
formed. Meanwhile, more blocks will be erased and erasures will
be distributed more evenly among blocks. Therefore, the increas-
ing of average erasures per block and decreasing of WLI can be
observed when the threshold decreases. 2) Under di(cid:29)erent wear
leveling thresholds, DEFTL has small WLIs (around 10% as shown
in Table 1). This implies that DEFTL can achieve an acceptable wear
leveling.
8 RELATED WORK
Deniable encryption was originally explored by Canetti et al. [5]
in communications. In data storage, there are mainly two types of
PDE systems: steganography-based and hidden volumes-based.
Steganography-based PDEs. Anderson et al. proposed the (cid:27)rst
steganographic (cid:27)le system [1]. They present two solutions: hiding
sensitive data within cover (cid:27)les or within random data. StegFS [23]
used the second approach to work on EXT2 (cid:27)le system with a
block allocation table to track (cid:27)les. Pang et al. [30] introduced
another steganographic (cid:27)le system, which uses an unencrypted
global bitmap to ensure that blocks are not accidentally overwritten.
All the steganography (cid:27)le systems try to hide sensitive data among
regular (cid:27)le system, which may result in data loss of hidden (cid:27)les, as
they may be overwritten by the regular (cid:27)le data. To mitigate the risk
of data loss, they need to maintain a large amount of redundant data,
which will lead to ine(cid:28)cient use of disk space. The ine(cid:28)cient use
of disk space and increased IO operations make them unacceptable
for mobile devices [33].
Hidden volume-based PDEs. Two well-known desktop PDE tools
are TrueCrypt [38] and FreeOTFE [13]. TrueCrypt is sensitive to
the type of (cid:27)le systems to avoid over-writing of the hidden volume.
Blass et al. [3] present HIVE, which relies on the expensive write-
only oblivious RAM. HIVE su(cid:29)ers from a high system overhead
and is thus not suitable for mobile devices. Zhao et al. [45] present
Gracewipe, which relies on a Trusted Platform Module (TPM) and
CPU’s trusted execution mode (e.g., Intel TXT). It requires extra
special secure hardware and thus is not suitable for mobile devices.
Mobi(cid:30)age is the (cid:27)rst hidden volume-based PDE scheme for mo-
bile devices. It is implemented in two versions: one for FAT32 (cid:27)le
system in external storage [33], and the other for EXT4 (cid:27)le sys-
tem in internal storage [34]. The FAT32 version is not suitable for
mobile devices without external storage; the EXT4 version needs
to signi(cid:27)cantly modify EXT4 (cid:27)le system that introduces a large
attack surface against PDE. MobiHydra [44] improves Mobi(cid:30)age
by addressing a new booting-time attack and adding multi-level
deniability. MobiPluto [6] further introduces a (cid:27)le system friendly
PDE design by combining the hidden volume technology and thin
provisioning.
Session J4:  Flash SecurityCCS’17, October 30-November 3, 2017, Dallas, TX, USA2228Other PDEs. Peters et al. [31] introduced DEFY, a deniable en-
crypted (cid:27)le system based on YAFFS2, a (cid:30)ash-speci(cid:27)c and single-
threaded (cid:27)le system which directly handles raw NAND (cid:30)ash. DEFY
is vulnerable to the deniability compromises described in Sec. 3.2.
In addition, it is incompatible with the (cid:30)ash-based block device,
which is the most popular form of (cid:30)ash storage media being used in
computing devices today. This is because, the deniability achieved
in DEFY strongly relies on the system properties o(cid:29)ered by YAFFS2,
which is unfortunately rarely used nowadays.
9 CONCLUSION
In this paper, we propose DEFTL, a Deniability Enabling Flash
Translation Layer for devices that use (cid:30)ash-based block devices as
storage media. DEFTL is the (cid:27)rst design that incorporates deniabil-
ity into the FTL, a pervasively deployed “translation layer” which
stays between the physical (cid:30)ash layer and the (cid:27)le system layer in
literally all the computing devices. A salient advantage of DEFTL is
that, for the (cid:27)rst time, it eliminates deniability compromises from
the underlying (cid:30)ash medium, and meanwhile, accommodates the
special nature of (cid:30)ash memory. Experimental evaluation con(cid:27)rms
the e(cid:28)ciency of DEFTL, compared to the encryption storage for
(cid:30)ash without deniability support.
ACKNOWLEDGMENT
Luning Xia is the corresponding author. This work was partially
supported by the National Key Research & Development Program
of China (Grant No. 2016YFB0800102) and National Basic Research
Program of China (973 Program No. 2013CB338001). Peng Liu was
supported by ARO W911NF-13-1-0421 (MURI), NSF CNS-1422594,
and NSF CNS-1505664.
REFERENCES
[1] Ross Anderson, Roger Needham, and Adi Shamir. 1998. The steganographic (cid:27)le
system. In International Workshop on Information Hiding. Springer, 73–82.
[2] Apple. 2015. FileVault. https://support.apple.com/en-us/HT204837. (2015).
[3] Erik-Oliver Blass, Travis Mayberry, Guevara Noubir, and Kaan Onarlioglu. 2014.
Toward robust hidden volumes using write-only oblivious RAM. In Proceedings
of the 2014 ACM SIGSAC Conference on Computer and Communications Security.
ACM, 203–214.
[4] Marcel Breeuwsma, Martien De Jongh, Coert Klaver, Ronald Van Der Knij(cid:29), and
Mark Roelo(cid:29)s. 2007. Forensic data recovery from (cid:30)ash memory. Small Scale
Digital Device Forensics Journal 1, 1 (2007), 1–17.
[5] Rein Canetti, Cynthia Dwork, Moni Naor, and Rafail Ostrovsky. 1997. Deniable
encryption. In Annual International Cryptology Conference. Springer, 90–104.
[6] Bing Chang, Zhan Wang, Bo Chen, and Fengwei Zhang. 2015. Mobipluto: File
system friendly deniable storage for mobile devices. In Proceedings of the 31st
Annual Computer Security Applications Conference. ACM, 381–390.
[7] Bo Chen, Shijie Jia, Luning Xia, and Peng Liu. 2016. Sanitizing data is not enough:
towards sanitizing structural artifacts in (cid:30)ash media. In Proceedings of the 32nd
Annual Conference on Computer Security Applications. ACM, 496–507.
[8] Siddharth Choudhuri and Tony Givargis. 2008. Deterministic service guarantees
for NAND (cid:30)ash using partial block cleaning. In Proceedings of the 6th IEEE/ACM/I-
FIP international conference on Hardware/Software codesign and system synthesis.
ACM, 19–24.
[9] Google Code. 2011. OpenNFM. https://code.google.com/p/opennfm/. (2011).
[10] CodePlex. 2017. VeraCrypt SSD. https://veracrypt.codeplex.com/. (2017).
[11] Computerhope. 2017. SCSI. https://www.computerhope.com/jargon/s/scsi.htm.
[12] Freecode. 2014. (cid:27)o. http://freecode.com/projects/(cid:27)o. (2014).
[13] FreeOTFE. 2012. FreeOTFE - Free disk encryption software for PCs and PDAs.
Version 5.21. Project website: http://www.freeotfe.org/ (2012).
[14] P Keith Garvin and H Duane Stanard. 2001. Method and system for managing
bad areas in (cid:30)ash memory. (July 10 2001). US Patent 6,260,156.
[15] Peter Gutmann. 1996. Secure deletion of data from magnetic and solid-state
memory. In Proceedings of the Sixth USENIX Security Symposium, San Jose, CA,
(2017).
[16]
Vol. 14. 77–89.
J. Assange, R.P. Weinmann, and S. Dreyfus. 2001. Rubberhose Filesystem.
Archive available at: https://web.archive.org/web/20100915130330/http://iq.org/
~pro(cid:29)/rubberhose.org/ (2001).
[17] Shijie Jia, Luning Xia, Bo Chen, and Peng Liu. 2016. NFPS: Adding Undetectable
Secure Deletion to Flash Translation Layer. In Proceedings of the 11th ACM on
Asia Conference on Computer and Communications Security. ACM, 305–315.
[18] Sanghyuk Jung and Yong Ho Song. 2013. LINK-GC: a preemptive approach for
garbage collection in NAND (cid:30)ash storages. In Proceedings of the 28th Annual
ACM Symposium on Applied Computing. ACM, 1478–1484.
[19] B. Kaliski. 2000. PBKDF2. https://tools.ietf.org/html/rfc2898. (2000).
[20] Atsuo Kawaguchi, Shingo Nishioka, and Hiroshi Motoda. 1995. A Flash-Memory
Based File System.. In USENIX. 155–164.
[21] Changman Lee, Dongho Sim, Jooyoung Hwang, and Sangyeun Cho. 2015. F2FS:
A new (cid:27)le system for (cid:30)ash storage. In 13th USENIX Conference on File and Storage
Technologies (FAST 15). 273–286.
[22] Mantech. 2017. LPC-H3131. http://www.mantech.co.za/. (2017).
[23] Andrew D McDonald and Markus G Kuhn. 2000. StegFS: A steganographic (cid:27)le
system for Linux. In Information Hiding. Springer, 463–477.
[24] ST Microelectronics. 2004. Bad Block Management in NAND Flash Memories.
Application note AN-1819, Geneva, Switzerland (2004).
[25] Microsof. 2013. BitLocker. https://technet.microsoft.com/en-us/library/hh831713.
aspx. (2013).
[26] MTD. 2015. Ubifs. http://www.linux-mtd.infradead.org/doc/ubifs.html. (2015).
[27]
J. Mull. 2012. How a Syrian refugee risked his life to bear witness to atrocities.
In toronto Star Online.
[28] OpenSSD. 2011. Jasmine OpenSSD Platform. http://www.openssd-project.org/
[29] OpenSSD. 2014. Cosmos OpenSSD Platform. http://www.openssd-project.org/
wiki/Jasmine_OpenSSD_Platform. (2011).
wiki/Cosmos_OpenSSD_Platform. (2014).
[32]
[30] HweeHwa Pang, K-L Tan, and Xuan Zhou. 2003. StegFS: A steganographic (cid:27)le
system. In Data Engineering, 2003. Proceedings. 19th International Conference on.
IEEE, 657–667.
[31] Timothy M Peters, Mark A Gondree, and Zachary NJ Peterson. 2015. DEFY:
A Deniable, Encrypted File System for Log-Structured Storage. In 22th Annual
Network and Distributed System Security Symposium, NDSS.
Joel Reardon, Srdjan Capkun, and David Basin. 2012. Data node encrypted (cid:27)le
system: E(cid:28)cient secure deletion for (cid:30)ash memory. In Proceedings of the 21st
USENIX conference on Security symposium. USENIX Association, 17–17.
[33] Adam Skillen and Mohammad Mannan. 2013. On Implementing Deniable Storage
Encryption for Mobile Devices. In 20th Annual Network and Distributed System
Security Symposium, NDSS 2013, San Diego, California, USA, February 24-27.
[34] Adam Skillen and Mohammad Mannan. 2014. Mobi(cid:30)age: Deniable Storage
IEEE Transactions on Dependable and Secure
Encryptionfor Mobile Devices.
Computing 11, 3 (2014), 224–237.
[35] Source. 2016. Android full disk encryption. https://source.android.com/security/
encryption/. (2016).
[36] Avinash Srinivasan, Jie Wu, Panneer Santhalingam, and Je(cid:29)rey Zamanski. 2014.
DeadDrop-in-a-Flash: Information Hiding at SSD NAND Flash Memory Physical
Layer. SECURWARE 2014 (2014), 79.
[37] Raja Subramani, Haritima Swapnil, Niharika Thakur, Bharath Radhakrishnan,
and Krishnamurthy Puttaiah. 2013. Garbage Collection Algorithms for NAND
Flash Memory Devices–An Overview. In Modelling Symposium (EMS), 2013 Euro-
pean. IEEE, 81–86.
[38] TrueCrypt. 2012. Free open source on-the-(cid:30)y disk encryption software.Version
7.1a. Project website: http://www.truecrypt.org/ (2012).
[39] Chundong Wang and Weng-Fai Wong. 2012. Extending the lifetime of NAND
(cid:30)ash memory by salvaging bad blocks. In Proceedings of the Conference on Design,
Automation and Test in Europe. EDA Consortium, 260–263.
[40] Yinglei Wang, Wing-kei Yu, Shuo Wu, Greg Malysa, G Edward Suh, and Edwin C
Kan. 2012. Flash memory for ubiquitous hardware security functions: True
random number generation and device (cid:27)ngerprints. In Security and Privacy (SP),
2012 IEEE Symposium on. IEEE, 33–47.
[41] Michael Yung Chung Wei, Laura M Grupp, Frederick E Spada, and Steven Swan-
son. 2011. Reliably Erasing Data from Flash-Based Solid State Drives.. In FAST,
Vol. 11. 8–8.
[42] Ya(cid:29)s. 2002. YAFFS. http://www.ya(cid:29)s.net/. (2002).
[43] Ming-Chang Yang, Yu-Ming Chang, Che-Wei Tsao, Po-Chun Huang, Yuan-Hao
Chang, and Tei-Wei Kuo. 2014. Garbage collection and wear leveling for (cid:30)ash
memory: past and future. In Smart Computing (SMARTCOMP), 2014 International
Conference on. IEEE, 66–73.
[44] Xingjie Yu, Bo Chen, Zhan Wang, Bing Chang, Wen Tao Zhu, and Jiwu Jing. 2014.
MobiHydra: Pragmatic and Multi-level Plausibly Deniable Encryption Storage
for Mobile Devices. In Information Security - 17th International Conference, ISC
2014, Hong Kong, China, October 12-14, 2014. Proceedings. 555–567.
[45] Lianying Zhao and Mohammad Mannan. 2015. Gracewipe: Secure and Veri(cid:27)able
Deletion under Coercion. In Network and Distributed System Security Symposium.
Session J4:  Flash SecurityCCS’17, October 30-November 3, 2017, Dallas, TX, USA2229