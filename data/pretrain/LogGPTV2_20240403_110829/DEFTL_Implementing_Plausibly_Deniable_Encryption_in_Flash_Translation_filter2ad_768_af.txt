### Figure 9: Throughput Comparison Between OpenNFM and the PDE Mode of DEFTL

**Throughput Analysis:**
- **Write Requests:** DEFTL slightly increases the write throughput for write requests compared to OpenNFM.

### Wear Leveling

**Objective:**
- To distribute writes evenly across the entire flash memory (Section 2.2), DEFTL employs a global wear leveling strategy.

**Evaluation Metric:**
- The Hoover economic wealth inequality indicator, previously used in [7, 32], is utilized to assess the effectiveness of wear leveling. This metric calculates a normalized sum of the differences between each measurement and the mean, indicating the fraction of erasures that need to be re-assigned to other blocks to achieve even wear.

**Wear Leveling Inequality (WLI) Calculation:**
- If the erasure counts of all \( n \) erase blocks are \( f_1, f_2, \ldots, f_n \), and \( F = \sum_{i=1}^{n} f_i \), then WLI can be computed as:
  \[
  \text{WLI} = \frac{1}{2F - \frac{n}{\|f_i - \frac{F}{n}\|}}
  \]

**Evaluation Method:**
- We evaluated the wear leveling effectiveness of DEFTL by varying the wear leveling threshold. The steps include:
  1. Select a wear leveling threshold.
  2. Fill the entire flash with approximately 500MB of data (a wear leveling test epoch). Data is written to both the public and hidden volumes in DEFTL.
  3. Erase all the written data.
  4. Repeat the epoch until 250GB of data has been written in total.
  5. Compute the WLI and the average number of erasures per block for each epoch.

**Results:**
- Table 1 shows the results under different wear leveling (WL) thresholds. Key observations:
  1. As the threshold decreases, more active wear leveling occurs, leading to more blocks being erased and erasures being distributed more evenly. Consequently, the average erasures per block increase, and WLI decreases.
  2. Under various WL thresholds, DEFTL maintains small WLIs (around 10% as shown in Table 1), indicating acceptable wear leveling performance.

### Related Work

**Deniable Encryption:**
- Deniable encryption was initially explored by Canetti et al. [5] in communications. In data storage, there are two main types of PDE systems: steganography-based and hidden volumes-based.

**Steganography-Based PDEs:**
- Anderson et al. [1] introduced the first steganographic file system, presenting two solutions: hiding sensitive data within cover files or random data. StegFS [23] uses the second approach on the EXT2 file system with a block allocation table. Pang et al. [30] proposed another steganographic file system using an unencrypted global bitmap to prevent accidental overwriting. These systems aim to hide sensitive data among regular file systems but may lead to data loss if hidden files are overwritten. They also require maintaining large amounts of redundant data, leading to inefficient disk space use and increased I/O operations, making them unsuitable for mobile devices [33].

**Hidden Volume-Based PDEs:**
- Notable desktop PDE tools include TrueCrypt [38] and FreeOTFE [13]. TrueCrypt is sensitive to file system types to avoid overwriting hidden volumes. Blass et al. [3] introduced HIVE, which relies on expensive write-only oblivious RAM and suffers from high overhead, making it unsuitable for mobile devices. Zhao et al. [45] presented Gracewipe, which requires a Trusted Platform Module (TPM) and CPUâ€™s trusted execution mode, thus needing special secure hardware. MobiFlash is the first hidden volume-based PDE scheme for mobile devices, implemented for FAT32 and EXT4 file systems. MobiHydra [44] improves MobiFlash by addressing boot-time attacks and adding multi-level deniability. MobiPluto [6] introduces a file system-friendly PDE design by combining hidden volume technology and thin provisioning.

**Other PDEs:**
- Peters et al. [31] introduced DEFY, a deniable encrypted file system based on YAFFS2, a flash-specific and single-threaded file system. DEFY is vulnerable to deniability compromises and is incompatible with modern flash-based block devices, as it relies on YAFFS2, which is rarely used today.

### Conclusion

In this paper, we propose DEFTL, a Deniability Enabling Flash Translation Layer for devices using flash-based block devices as storage media. DEFTL is the first design to integrate deniability into the FTL, a widely deployed translation layer between the physical flash layer and the file system layer. DEFTL eliminates deniability compromises from the underlying flash medium while accommodating the unique characteristics of flash memory. Experimental evaluation confirms the efficiency of DEFTL compared to non-deniable flash encryption storage.

### Acknowledgment

Luning Xia is the corresponding author. This work was partially supported by the National Key Research & Development Program of China (Grant No. 2016YFB0800102) and the National Basic Research Program of China (973 Program No. 2013CB338001). Peng Liu was supported by ARO W911NF-13-1-0421 (MURI), NSF CNS-1422594, and NSF CNS-1505664.

### References

[References listed as provided, with no changes made to the original references.]