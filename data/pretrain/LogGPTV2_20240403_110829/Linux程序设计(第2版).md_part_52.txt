## 制作文件的应用范围
在结束对制作文件的讨论之前，我们认为有必要强调一点：制作文件不仅可以用于编译代码或创建函数库。实际上，任何可以通过一系列命令将输入文件转换为输出文件的任务，都可以通过制作文件来自动完成。典型的“非编译器”用途包括调用AWK或sed命令处理某些文件，或生成使用手册页等。

## 源代码控制系统
随着项目的规模和复杂度增加，源代码版本控制变得越来越重要，特别是在多人协作开发的情况下。UNIX系统中广泛使用的两个源代码控制系统是RCS（修订控制系统）和SCCS（源代码控制系统）。此外，还有许多第三方的源代码控制系统，其中最著名的可能是CVS（并行版本系统），它比SCCS或RCS更先进，但普及程度稍逊一筹。

本章将重点介绍RCS，并将其与SCCS进行对比。读者会发现两者提供的功能相似，切换也相对容易。RCS还提供了适用于MS-DOS的版本，包括一些商业支持的产品。我们还会简要介绍CVS系统，它非常适合多名开发人员通过网络协作的情况。

### 8.3.1 RCS系统

RCS系统提供了一系列命令来管理源代码文件，能够跟踪记录每个文件的每次修改，并将这些改动保存在一个单独的文件中。该系统允许为每次修改添加注释，这对于回顾历史变更非常有帮助。随着项目的发展，可以记录下每个主要修改或修复，并附上注释，这在复查文件更改历史和检查漏洞时非常有用。

由于RCS仅保存不同版本之间的差异，因此其存储效率很高。此外，如果意外删除了文件，RCS还可以恢复之前的版本。

#### 1. rcs命令

以`important.c`为例，首先需要使用`rcs -i`命令初始化RCS控制文件。示例如下：

```bash
$ rcs -i important.c
RCS file: important.c,v
NOTE: This is NOT the log message!
enter description, terminated with single '.' or end of file:
>> This is an important demonstration file
.
```

执行此命令后，RCS将创建一个带有`.v`扩展名的只读文件。如果希望将RCS文件保存到另一个子目录中，可以在首次运行`rcs`命令前创建一个名为`RCS`的子目录。所有`rcs`命令都会自动将RCS文件保存在这个子目录里。

#### 2. ci命令

接下来，使用`ci`命令封存当前版本的文件。示例如下：

```bash
$ ci important.c
important.c,v
enter log message, terminated with single '.' or end of file:
>> Added an extra line to be printed out.
.
```

如果在封存文件时还想保持文件的锁定状态以便继续调试，可以在调用`ci`时加上`-l`选项。

#### 3. rlog命令

使用`rlog`命令查看文件的修改日志。示例如下：

```bash
$ rlog important.c
RCS file: important.c,v
working file: important.c
head: 1.2
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 2; selected revisions: 2
description:
This is an important demonstration file
date: 1999/02/11 16:37:35;  author: rick;  state: Exp;  lines: +1 -0
revision 1.2
Added an extra line to be printed out.
date: 1999/02/11 16:30:19;  author: rick;  state: Exp;
Initial revision
```

#### 4. co命令

使用`co`命令可以取出特定版本的文件。示例如下：

```bash
$ co -r1.1 important.c
important.c,v
revision 1.1
done
```

#### 5. rcsdiff命令

使用`rcsdiff`命令查看两个版本之间的差异。示例如下：

```bash
$ rcsdiff -r1.1 -r1.2 important.c
RCS file: important.c,v
retrieving revision 1.1
diff -r1.1 -r1.2
retrieving revision 1.2
*** 1.1  1999/02/11 16:30:19
--- 1.2  1999/02/11 16:37:35
***************
*** 11 ****
--- 11,12 ----
+ printf("This is an extra line added later\n");
```

#### 6. 修订版本的确定

RCS系统支持在源文件中使用特殊字符串（宏定义）来帮助跟踪修改。最常见的宏定义如`$Id$`会在解封文件时自动扩展，并在封存时刷新其值。

示例如下：

```c
/*
This is an important file for managing this project.
It implements the canonical "Hello World" program.
Filename: $RCSfile: important.c,v $
#include <stdio.h>
#include <stdlib.h>
static char *Rcsinfo = "$Id$";
int main() {
    printf("This is an extra line added later\n");
    printf("This file is under RCS control. It's ID is %s\n", Rcsinfo);
    exit(EXIT_SUCCESS);
}
```

封存这个修订版本后，可以看到宏定义已被扩展。

```bash
$ ci important.c
new revision: 1.3; previous revision: 1.2
important.c,v
enter log message, terminated with single '.' or end of file:
>> Added $RCSfile and $Id strings
.
```

查看子目录清单，只会看到RCS文件：

```bash
$ ls -l
-rw-r--r-- 1 rick users 907 Feb 11 16:55 important.c,v
```

如果解封并取出源文件的当前版本进行检查，会发现宏定义已经被扩展。

```c
/*
This is an important file for managing this project.
It implements the canonical "Hello World" program.
Filename: important.c,v
#include <stdio.h>
#include <stdlib.h>
static char *Rcsinfo = "important.c,v 1.3";
int main() {
    printf("This is an extra line added later\n");
    printf("This file is under RCS control. It's ID is %s\n", Rcsinfo);
    exit(EXIT_SUCCESS);
}
```

### 动手试试：GNU的make命令和RCS系统

GNU的make命令内置了一些规则来管理RCS文件。我们来看看当缺少一个源文件时，make命令是如何处理的。

```bash
$ rm -f important.c
```

以上是对文本的优化，使其更加清晰、连贯和专业。