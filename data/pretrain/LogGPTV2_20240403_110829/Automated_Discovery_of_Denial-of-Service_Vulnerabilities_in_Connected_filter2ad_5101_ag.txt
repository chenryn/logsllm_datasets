Flooding-resilient broadcast authentication for VANETs. In Proc. Mo-
biCom, 2011.
[29] Y. Hu, A. Perrig, and D. B. Johnson. Packet leashes: A defense against
wormhole attacks in wireless networks. In Proc. INFOCOM, 2003.
[30] S. Hussain, O. Chowdhury, S. Mehnaz, and E. Bertino. Lteinspector:
A systematic approach for adversarial testing of 4g lte. In Proc NDSS,
2018.
[31] IEEE 1609 WG. Ieee standard for wireless access in vehicular environ-
ments (wave) - networking services. IEEE Std 1609.3-2010 (Revision
of IEEE Std 1609.3-2007), 2010.
[32] IEEE 1609 WG.
IEEE Standard for Wireless Access in Vehicular
Environments–Security Services for Applications and Management
Messages. IEEE Std 1609.2-2016 (Revision of IEEE Std 1609.2-2013),
2016.
[33] IEEE 1609 WG. Ieee standard for wireless access in vehicular envi-
ronments (wave) – multi-channel operation. IEEE Std 1609.4-2016
(Revision of IEEE Std 1609.4-2010), 2016.
[34] IEEE 1609 WG. Ieee standard for wireless access in vehicular environ-
ments (wave) – networking services. IEEE Std 1609.3-2016 (Revision
of IEEE Std 1609.3-2010), 2016.
[35] IEEE 1609 WG. 1609 WG - DSRC Working Group. https://
tinyurl.com/y2qju2t5, 2017.
[36] IEEE 1609 WG. Ieee guide for wireless access in vehicular environ-
ments (wave) architecture. IEEE Std 1609.0-2019 (Revision of IEEE
Std 1609.0-2013), 2019.
[37] IEEE 802.11 WG. Ieee standard for information technology– local and
metropolitan area networks– speciﬁc requirements– part 11: Wireless
lan medium access control (mac) and physical layer (phy) speciﬁcations
amendment 6: Wireless access in vehicular environments. IEEE Std
802.11p-2010 (Amendment to IEEE Std 802.11-2007), 2010.
[38] IEEE 802.11 WG.
Ieee standard for information technology–
telecommunications and information exchange between systems local
and metropolitan area networks–speciﬁc requirements part 11: Wireless
lan medium access control (mac) and physical layer (phy) speciﬁca-
IEEE Std 802.11-2012 (Revision of IEEE Std 802.11-2007),
tions.
2012.
[39] K. Koscher, A. Czeskis, F. Roesner, S. Patel, T. Kohno, S. Checkoway,
D. McCoy, B. Kantor, D. Anderson, H. Shacham, and S. Savage. Ex-
perimental security analysis of a modern automobile. In Proc. IEEE
S&P, 2010.
[40] S. Krauß. Towards a uniﬁed view of microscopic trafﬁc ﬂow theories.
IFAC Proceedings Volumes, 1997.
[41] H. Krishnan and A. Weimerskirch.
“verify-on-demand”-a practi-
cal and scalable approach for broadcast authentication in vehicle-to-
vehicle communication. SAE International Journal of Passenger Cars-
Mechanical Systems, 2011.
[42] M. Z. Kwiatkowska, G. Norman, and D. Parker. PRISM 4.0: Veriﬁca-
tion of probabilistic real-time systems. In Proc. CAV, 2011.
[43] L. Lamport. Real time is really simple. Microsoft Research, 2005.
[44] C. Laurendeau and M. Barbeau. Threats to security in DSRC/WAVE.
In Proc. ADHOC-NOW, 2006.
[45] J. Liu, D. Ma, A. Weimerskirch, and H. Zhu. Secure and Safe Auto-
mated Vehicle Platooning. IEEE Reliability Society, 2016.
[46] H. Mahmassani, H. Rakha, E. Hubbard, D. Lukasik, et al. Concept
development and needs identiﬁcation for intelligent network ﬂow op-
timization (inﬂo) : assessment of relevant prior and ongoing research.
Technical report, 2012.
3234    30th USENIX Security Symposium
USENIX Association
[47] H. Mahmassani, H. Rakha, E. Hubbard, D. Lukasik, et al. Concept
development and needs identiﬁcation for intelligent network ﬂow opti-
mization (inﬂo) : concept of operations. Technical report, 2012.
[48] J. C. Mitchell, V. Shmatikov, and U. Stern. Finite-state analysis of SSL
3.0. In Proc. USENIX Security, 1998.
[49] S. Mäki, T. Aura, and M. Hietalahti. Robust membership management
for ad-hoc groups. 2000.
[50] P. Narayana, R. Chen, Y. Zhao, Y. Chen, Z. Fu, and H. Zhou. Automatic
vulnerability checking of ieee 802.16 WiMAX protocols through TLA+.
In Proc. IEEE Workshop on NPSec, 2006.
[51] OMNeT++. Omnet++ simulator. https://omnetpp.org/, 2020.
[52] OnBoard Security. Aerolink secure vehicle communication. https:
//tinyurl.com/yaklyx47, 2019.
[53] OpenSSL. Openssl. https://www.openssl.org/, 2019.
[54] J. Petit, F. Schaub, M. Feiri, and F. Kargl. Pseudonym schemes in
vehicular networks: A survey. IEEE Comm. Surveys & Tutorials, 2015.
[55] J. Petit and S. E. Shladover. Potential cyberattacks on automated
vehicles. IEEE Trans. Intelligent Transportation Systems, 2015.
[56] PLEXE. The platooning extension for veins. plexe.car2x.org, 2019.
[57] J. Ploeg, B. T. M. Scheepers, E. van Nunen, N. van de Wouw, and H. Ni-
jmeijer. Design and experimental evaluation of cooperative adaptive
cruise control. In Proc. ITSC, 2011.
[58] M. K. Reiter, K. P. Birman, and L. Gong. Integrating security in a
group oriented distributed system. In Proc. IEEE S&P, 1992.
[59] S. Resch and M. Paulitsch. Using TLA+ in the development of a
safety-critical fault-tolerant middleware. In Proc. ISSRE, 2017.
[60] M. Segata, S. Joerer, B. Bloessl, C. Sommer, F. Dressler, and R. L.
Cigno. Plexe: A platooning extension for veins. In Proc. VNC, 2014.
[61] C. Sommer, R. German, and F. Dressler. Bidirectionally coupled net-
work and road trafﬁc simulation for improved IVC analysis. IEEE
Trans. Mob. Comput., 2011.
[62] SUMO. Simulation of Urban MObility. https://sumo.dlr.de, 2020.
[63] USDOT. Connected Vehicle Pilot Deployment Program. https:
//tinyurl.com/y29u9czy, 2019.
[64] USDOT. Intelligent Transportation Systems - Connected Vehicle Ba-
sics. https://tinyurl.com/yxjj98vr, 2019.
[65] USDOT. Intelligent Transportation Systems - Connected Vehicle Ba-
sics - DSRC. https://tinyurl.com/y5spr5cb, 2019.
[66] USDOT. Intelligent Transportation Systems - Connected Vehicle Pilot
Deployment Program. https://tinyurl.com/yy5u7am6, 2019.
[67] USDOT.
ITS Standards Program | Standards Group. https://
tinyurl.com/yyzb8n4g, 2019.
[68] Veins. Vehicles in network simulation. https://veins.car2x.org/.
[69] VENTOS. Vehicular network open simulator.
http://maniam.
github.io/VENTOS/, 2019.
[70] M. Wagner and B. McMillin. Cyber-physical transactions: A method
for securing vanets with blockchains. In IEEE PRDC, 2018.
[71] L. Walkin. ASN.1 Compiler. http://lionet.info/asn1c/, 2019.
[72] Z. Wang, G. Wu, and M. J. Barth. A review on cooperative adaptive
cruise control (CACC) systems: Architectures, controls, and applica-
tions. In Proc. ITSC, 2018.
[73] W. Whyte, J. Petit, V. Kumar, J. Moring, and R. Roy. Threat and
countermeasures analysis for WAVE service advertisement. In Proc.
IEEE ITSC, 2015.
[74] W. Wong, S. Huang, Y. Feng, Q. A. Chen, Z. M. Mao, and H. X. Liu.
Trajectory-Based Hierarchical Defense Model to Detect Cyber-Attacks
on Transportation Infrastructure. In Transportation Research Board
2018 Annual Meeting (TRB), 2019.
[75] Y. Yu, P. Manolios, and L. Lamport. Model checking TLA+ speciﬁca-
tions. In Proc. CHARME, 1999.
[76] L. Zhou and Z. J. Haas. Securing ad hoc networks. IEEE network,
1999.
A Attack Summary
N2 Request Mute Attack: This attack injects a malicious
learning response with the same HashedId8 value of ca1.
Thus, V2 chooses to remove the matching entry with the
HashedId8 value of ca1. V2 fails in sending a learning re-
quest because V2 wrongly thinks she has learned the unknown
certiﬁcate but not.
Figure 11: N2: the attacker can stop V2 from sending learning
requests to V1 by sending a malicious learning requests.
Assumptions. Similar to N1, we assume that V1 does not man-
date the veriﬁcation for incoming learning responses. Also,
we assume that the attacker has enough computing power to
efﬁciently construct a learning response that can cause partial
hash collision (e.g., low-order 8 bytes collision).
Attack steps. As shown in Figure 11, V2 initializes P2PCD
after receiving a trigger SPDU from V1. V2 stores the
HashedId8 value of the unknown certiﬁcate ca1 in a queue.
Meanwhile, since the attacker can observe the trigger SPDU,
she constructs a malicious learning response, in which the
HashedId8 value of the ﬁrst certiﬁcate in the payload matches
with the unknown certiﬁcate ca1. As deﬁned in P2PCD, after
receiving a learning response, V2 extracts all certiﬁcates in the
learning response and stores them via AddCertificate. At
this time, V2 wrongly thinks that it has successfully learned
the unknown certiﬁcate but actually not. Thus, V2 removes the
entry of the unknown certiﬁcate h8(ca1) in the queue, where
h8 is a function to get the low-order eight-byte hash of the in-
put. As the queue becomes empty, V2 decides not to attach the
learning request in the next outgoing SPDU. Consequently,
V2 is unable to learn the correct unknown certiﬁcate.
Discussion. Similar to N1, N2 is also caused by the use of
truncated hash, and the attacker does not need to possess a
legitimate certiﬁcate. In IEEE 1609.2, the issuer ﬁeld in a
certiﬁcate is a HashedId8 value. Therefore, on receiving the
trigger SPDU, the vehicle can only store the truncated hash
value in the queue. This opens a door for the partial hash col-
lision attack. Although HashedId8 is larger than HashedId3
and makes the attacker harder to ﬁnd a hash collision, a re-
sourceful attacker (e.g., nation-states, terrorists) can always
have enough computing power to efﬁciently ﬁnd the hash col-
lision. The attacker can even prepare these malicious learning
USENIX Association
30th USENIX Security Symposium    3235
Learning response:- h8(certs[0]) == h8(ca1)AttackerVehicle 2q.add(h8(ca1))Vehicle 1Trigger SPDU:- Signer: ee1- (Issuer: ca1)For cert in certs:q.delete(h8(cert))q.empty()?Discard requestYAfter recording the unknown cert.Before sending a learning requestAttackAttack time windowNotes:- q: missing certificate queue- h8(): get low-order 8-byte hash of the inputresponses in an ofﬂine way. On the other hand, due to the
optional verﬁcation of the learning response, it is still possible
that some poorly implemented CV protocols may not verify
the incoming learning response but just store them.
A4 Split Trigger Attack
Assumptions. We assume that the leader keeps the conﬁgura-
tions (e.g., platoon size, members) hidden from followers [5].
Attack steps. A4 requires the attacker to be the leader of the
victim platoon, which is consist of V1 and V2 sequentially.
After becoming the leader, the attacker immediately sends a
SPLIT_REQ to V1. At the last step of the split maneuver, the
attacker sends a SPLIT_DONE to V1, which contains necessary
platoon conﬁguration data. Notably, the attacker can control
the optimal platoon size in SPLIT_DONE and sets it to 1. Since
V1, as a follower, does not store any platoon conﬁgurations, it
can only trust the attacker. However, the platoon size exceeds
the optimal platoon size; V1 thus initiates the split maneuver.
Most importantly, A4 leads to a chain reaction that V1 will
pass the wrong conﬁguration to the last member in the victim
platoon (i.e., V2 in this case). Moreover, V1 and V2 will not
able to merge into other platoons or accept any incoming
merge requests, because there is no available space.
A5, A6 Merge Disruption Attack: The attacker initiates a
merge maneuver but does not faithfully complete the whole
procedure, so the victim platoon leader V1 is trapped at the
busy state and cannot switch back to the idle state. Therefore,
V1 cannot process any incoming messages.
Attack steps. In A5, the attacker ﬁrst sends a MERGE_REQ to
V1. Since there exists available space in the victim platoon,
V1 will accept the request and send a MERGE_ACCEPT to the at-
tacker. In the normal case, V1 will wait for a MERGE_DONE
from the merge request initiator. However, the attacker
chooses not to send a MERGE_DONE; thus, V1 will keep waiting.
In A6, the attacker ﬁrst utilizes A2 to join the victim pla-
toon. If V1 initiates a merge maneuver to join a front platoon
and receives a MERGE_ACCEPT, V1 will inform all the follow-
ers, including the attacker, to change their platoon leader by
sending CHANGE_PL to them. The attacker can either passively
wait for the happening of the merge maneuver or intentionally
trigger the merge maneuver of V1 by conducting the platoon
takeover attack (A1). As a malicious follower of V1, after
receiving a CHANGE_PL from V1, the attacker chooses not to
reply with an ACK. According to the merge FSM in [5], V1
will keep sending CHANGE_PL to the attacker if V1 does not
receive the corresponding ACK.
A8-9 Split Disruption Attack: A8 and A9 have the same
goal and consequence as A5 and A6, but have different attack
targets. They focus on vulnerabilities of the split maneuver.
Attack steps. In A8 and A9, the attacker ﬁrst joins the pla-
toon, which is consist of V1 (leader) and V2 sequentially, by
launching A2 and acts as a malicious follower. In A8, V1 sends
a SPLIT_REQ to the attacker. After accepting the request, the
attacker does not respond to the following CHANGE_PL sent
by V1. Therefore, V1 will not be able to switch back to the
idle state. Differently, in A9, V1 sends a SPLIT_REQ to V2,
the splitting vehicle. After V2 accepting the split request and
acknowledging CHANGE_PL, V1 needs to inform the follower
behind the attacker to change the platoon leader. The attacker
can remain silent, keeping both V1 and V2 at the busy state.
A10 Follower Block Attack: This attack is the immediate
consequence of A1 and is more powerful than A5-9, because
this attack can block all vehicles in the victim platoon rather
than one or two of them. All members in the victim platoon
will be unable to respond any incoming platoon messages.
Attack steps. The attacker ﬁrst takes over the victim pla-
toon. Then, she sends SPLIT_REQ to all her followers (i.e.,
V1 and V2). V1 and V2 accept the split request and reply with
SPLIT_ACCEPT. Following the protocol, the attacker sends
CHANGE_PL to V1 and V2. After that, the attacker can drive
away or keep silence; all followers thus will never receive
SPLIT_DONE from the attacker and keep sending ACK.
A11 Gap Attack: The basic idea of this idea is to prevent
the vehicle from “creating” enough space in the front of the
splitting vehicle during the leader/follower leave maneuver.
Attack steps. The attacker is the last follower in the victim
platoon and initiates a follower leave maneuver. V1 approves
the leave request sent by the attacker. Then, the attacker faith-
fully respond to SPLIT_REQ and CHANGE_PL from V1. To
make the attacker a free agent, V1 sends a SPLIT_DONE to
the attacker. Before the completion of the leave maneuver, V1
has to guarantee that there exists enough space at the front of
the attacker to perform lane change. If the attacker does not
send a GAP_CREATED, V1 will keep busy as it wrongly thinks
the leave maneuver is still on-going.
A12, A13 Leave Disruption Attack: A12 and A13 exploit
timers in the leader leave maneuver and the follower leave
maneuver respectively.
Attack steps. In A12, when the leader wants to leave the pla-
toon, its followers have to elect a new leader. The elected
leader then sends a ELECTED_LEADER to the old leader who
then hands over the leadership to the elected leader, by initi-
ating the leader leave maneuver and safely leave the platoon.
However, if the attacker is one of the followers (A2) and be-
comes the elected leader, she can choose not to respond. As
well, A10 can be used to mislead all followers to a busy state
in advance, so no followers can send ELECTED_LEADER to the
leader, blocking the leader leave maneuver.
In A13, a follower wants to leave the platoon and sends
a LEAVE_REQ to the leader; if no response is received from
the leader, the follower is unable to ﬁnish the follower leave
maneuver. The attacker can place herself at the position of
the leader through A1, and keep silent. On the other hand,
the attacker can utilize A5-9 to prevent the benign leader
from communicating with other followers. Thus, the victim
follower cannot ﬁnish the follower leave maneuver.
A14 Dissolve Disruption Attack: To make a follower un-
available, the attacker can either use A10 to block all followers
or join the victim platoon as a silent follower through A2.
3236    30th USENIX Security Symposium
USENIX Association