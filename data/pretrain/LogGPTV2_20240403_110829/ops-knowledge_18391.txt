### Issue: Executing Shell Commands from PHP under Apache

**Objective:** I am trying to create a PHP page that executes a shell command and displays the output on the web page.

**Code Example:**
```php
<?php
echo shell_exec('ls -l /code');
?>
```

**Problem Description:**
- When I load the PHP page, the output is blank.
- However, when I run the same command from the command line, it executes successfully and displays the output.
- I suspect this issue is related to permissions, and I hope someone can guide me in the right direction.

**Apache HTTPD Log:**
```
ls: cannot access /code: Permission denied
ls: cannot access /code: Permission denied
```

**Additional Information:**
- The directory `/code` is set to "Read only" for the user `apache`.

---

### Analysis and Solution

**1. Permissions Issue:**
The error message in the Apache log indicates that the `apache` user (which runs the web server) does not have the necessary permissions to access the `/code` directory. This is likely the cause of the blank output on the web page.

**2. Directory Permissions:**
- Ensure that the `apache` user has read and execute permissions on the `/code` directory.
- You can change the permissions using the following commands:
  ```sh
  sudo chown -R apache:apache /code
  sudo chmod -R 755 /code
  ```

**3. SELinux or AppArmor:**
- If you are using SELinux or AppArmor, these security modules might be restricting the `apache` user's access to the `/code` directory. Check the security policies and adjust them if necessary.

**4. Alternative Approach:**
- If changing the directory permissions is not an option, you can copy the `ls` binary to a directory where the `apache` user has full access, and then modify your PHP script to use the copied binary.

  **Steps:**
  1. Copy the `ls` binary to the `/code` directory:
     ```sh
     sudo cp /bin/ls /code/
     ```
  2. Modify your PHP script to use the copied `ls` binary:
     ```php
     <?php
     echo shell_exec('/code/ls -l /code');
     ?>
     ```

**5. Base Directory Restrictions:**
- If you are using base directory restrictions in your Apache configuration, ensure that the `/bin` directory is included in the allowed paths. Alternatively, you can add the `/code` directory to the allowed paths.

  **Example Configuration:**
  ```apache
  <Directory "/code">
      Require all granted
  </Directory>
  ```

**6. Testing:**
- After making the necessary changes, reload the Apache configuration and test the PHP page again:
  ```sh
  sudo systemctl reload httpd
  ```

By following these steps, you should be able to resolve the permission issues and get the desired output on your web page.

Thank you!

- Ankit