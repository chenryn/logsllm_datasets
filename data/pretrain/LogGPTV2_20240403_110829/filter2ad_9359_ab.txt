Ntlmrelayx工具成功创建计算机账户
DC上可见computers列表中新创建的名为EJETBTTB的计算机
在域中新的计算机账户EJETBTTB(下图中的service A)建立成功后，后续攻击如下图攻击步骤
攻击步骤
#### 1、攻击者为Service A配置了基于资源的约束委派
由于通过S4U2Self请求到的TGS forwardable标志位为 Non-forwardable,这意味着该TGS服务票据是不可转发的，不可以在接下来的S4U2Proxy中进行转发。但是不可转发的TGS竟然可以用于基于资源的约束委派，S4U2Proxy会接收这张不可转发的TGS。由于我们拥有Service
A的计算机账号以及密码，所以在这里可以为Service A到SDC配置了基于资源的约束委派，将默认的约束委派更改为基于资源的约束委派，以便后续攻击。
#### 2、Service A 调用S4U2Self向认证服务器(SDC)为admin请求访问自身的服务票据.
通过国外安全研究员Elad Shami的研究可知，无论服务账号的 _UserAccountControl_ 属性是否被设为
_TrustedToAuthForDelegation_ ，
服务自身都可以调用S4U2Self为任意用户请求访问自己的服务票据，也就是说，这里Service A
可以调用S4U2Self向SDC为admin用户申请可访问自身的服务票据.
#### 3、SDC将为admin用户申请的访问Service A的TGS发送给Service A
#### 4、Service A通过S4U2Proxy 转发TGS，并为admin申请访问SDC票据
#### 5、SDC将为admin用户申请的访问SDC的TGS发送给Service A
在这里，Service A为Attacker创建并控制，Attacker获得TGS票据，利用该票据以admin身份访问SDC，完成提权
## 技术点分析
在理清利用流程后，接下来详解利用流程中的技术点
#### 客户端与服务器端的SMB通信
补充介绍一些关于SMB通信协议相关内容，通过这部分内容，可以加深对的漏洞流程的理解。对SMB通信协议熟悉的读者，可以跳过此部分
客户端与服务器端的SMB通信流程
**SMB2 / Negotiate Protocol**
Negotiate Protocol是在SMB2的任何新TCP会话上发出的第一个SMB2命令，它用于协商要使用的协议版本。
Negotiate Protocol命令分为Negotiate Protocol Request/ Negotiate Protocol
Response两部分：
  1. Negotiate Protocol Request： 客户端向服务器发送第一个SMB请求：“Negotiate Protocol Request”。这个请求包含了客户端所支持的各种 SMB Dialect。
  2. Negotiate Protocol Response: 服务器收到该请求后，选择一个它支持的最新版本（比如NTLM 0.12），再通过“Negotiate Protocol Response”回复给客户端。
**SMB2 / Session Setup**
SMB2 / Session Setup命令用于对用户进行身份验证并获取分配的UserID。此命令通常是SMB2 / Negotiate
Protocol阶段完成后从客户端发出的第一个命令。
Session Setup分为两部分：
  1. Session Setup Request: Negotiate Protocol阶段结束之后，，客户端请求和服务器建立一个session，在客户端发送的Session Setup Request里，包含了身份验证请求。
  2. Session Setup Response: 服务器回复是否通过验证。
#### SpoolService/printer bug
在攻击利用流程中，需要使用到一个名为printerbug.py的工具，此工具触发SpoolService/printer
bug，强制Windows主机通过MS-RPRN RPC接口向攻击者进行身份验证。
Windows的MS-RPRN协议用于打印客户机和打印服务器之间的通信，默认情况下是启用的。协议定义的RpcRemoteFindFirstPrinterChangeNotificationEx()调用创建一个远程更改通知对象，该对象监视对打印机对象的更改，并将更改通知发送到打印客户端。
任何经过身份验证的域成员都可以连接到远程服务器的打印服务（spoolsv.exe），并请求对一个新的打印作业进行更新，令其将该通知发送给指定目标。之后它会将立即测试该连接，即向指定目标进行身份验证（攻击者可以选择通过Kerberos或NTLM进行验证）。另外微软表示这个bug是系统设计特点，无需修复。
在本次漏洞的利用过程中，我们通过printerbug.py脚本触发了上述bug，强制Exchange服务器对攻击者（192.168.123.69）发起身份验证，而Exchange默认是以SYSTEM身份执行的。
下图是printerbug.py执行后的数据包：
（1） 第一次身份验证由攻击者向exchange服务器发起，以便可以远程连接到Spoolsv服务，可以看到使用的账号是一个普通的域成员账号test；
（2）
接着，printerbug.py脚本中调用RpcRemoteFindFirstPrinterChangeNotificationEx()，请求对一个新的打印作业进行更新，并令其将该通知发送给我们指定的attackerhost（192.168.123.69）。这部分数据就是上图中Encrypted
SMB3中的一部分。
（3）
第二次身份验证便是使Exchange向attackerhost（192.168.123.69）发起的身份验证，用户为TEST\TOPSEC对网络进行身份验证）
#### SMB中继LDAP思路以及难点
在攻击利用流程中，需要将SMB身份验证通过LDAP中继至DC，由于NTLM协议的工作方式，无法将SMB流量直接通过LDAP中继，将SMB流量通过LDAP中继难点以及绕过思路如下：
1、 默认情况下，SMB中的NTLM身份验证:NEGOTIATE_SIGN为set状态
2、 将此SMB流量中继到LDAP时，由于此时的Negotiate
Sign设置为set，该标志会触发LDAP签名，而此SMB流量为Attacker从Exchange服务器上中继而来，无法通过LDAP的签名校验，从而被LDAP忽略，导致攻击失败
3、 为了防止攻击失败，需要将NEGOTIATE_SIGN设置为Not set
4、 MIC保护不被篡改，如果简单的改包，将NEGOTIATE_SIGN设置Not set，将会导致MIC校验不通过
5、 需要寻找一种可以绕过MIC校验的方式，以便更改包中的值
6、 在绕过MIC校验之后，更改NEGOTIATE_SIGN值为Not set，使得在不触发LDAP签名校验的情况下，将SMB中继LDAP
#### MIC校验
NTLM身份验证由3种消息类型组成：
NTLM_NEGOTIATE，NTLM_CHALLENGE，NTLM_AUTHENTICATE。
NTLM_NEGOTIATE，NTLM_CHALLENGE，NTLM_AUTHENTICATE对应位于SMB协议中的SessionSetup阶段
Clinet与Server交互流程图
Clinet与Server交互流量
SMB认证协议流程
为了确保恶意行为者不在传输过程中处理消息，在NTLM_AUTHENTICATE消息中添加了一个额外的MIC（消息完整性代码）字段。
存放于NTLM_AUTH中的MIC
MIC是使用会话密钥应用于所有3个NTLM消息的串联的HMAC_MD5，该会话密钥仅对启动认证的帐户和目标服务器是已知的。
因此，试图篡改其中一条消息的攻击者（例如，修改签名协商）将无法生成相应的MIC，这将导致攻击失败。
#### MIC校验绕过
Microsoft服务器允许无MIC 的NTLM_AUTHENTICATE消息。
如果想要将SMB身份验证中继到LDAP，并完成中继攻击，可以通过如下步骤：
取消MIC校验以确保可以修改数据包中的内容：
（1）从NTLM_AUTHENTICATE消息中删除MIC
（2）从NTLM_AUTHENTICATE消息中删除版本字段（删除MIC字段而不删除版本字段将导致错误）。
#### LDAP签名绕过
在绕过MIC校验之后，可以修改NEGOTIATE_SIGN值以便将SMB流量顺利通过LDAP签名校验
将NEGOTIATE_SIGN设置为not set以绕过LDAP验证
（1）
取消设置NTLM_NEGOTIATE消息中的签名标志（NTLMSSP_NEGOTIATE_ALWAYS_SIGN，NTLMSSP_NEGOTIATE_SIGN
（2）
取消设置NTLM_AUTHENTICATE消息中的以下标志：NTLMSSP_NEGOTIATE_ALWAYS_SIGN，NTLMSSP_NEGOTIATE_SIGN，NEGOTIATE_KEY_EXCHANGE，NEGOTIATE_VERSION。
#### smb中继LDAP流程
为了实现SMB中继LDAP流程，这里使用ntlmrelayx.py工具作为中继
Ntlmrelayx中继流程如下：
1、
取消设置NTLM_NEGOTIATE消息中的签名标志（NTLMSSP_NEGOTIATE_ALWAYS_SIGN，NTLMSSP_NEGOTIATE_SIGN）
Exchange-Attacker-DC交互流量
Exchange向Attacker发送NTLMSSP_NEGOTIATE包内容
Attacker将NTLMSSP_NEGOTIATE通过LDAP中继到DC包内容
可见，在通过LDAP中继时，已经取消设置NTLM_NEGOTIATE消息中的签名标志（NTLMSSP_NEGOTIATE_ALWAYS_SIGN，NTLMSSP_NEGOTIATE_SIGN）
2、从NTLM_AUTHENTICATE消息中删除MIC以及版本字段
Exchange-Attacker-DC交互流量
Exchange向Attacker发送NTLMSSP_AUTH
Attacker将NTLMSSP_AUTH通过LDAP中继到DC
在通过LDAP中继时，NTLM_AUTHENTICATE消息中MIC以及版本字段已被删除
3、取消设置NTLM_AUTHENTICATE消息中的以下标志：NTLMSSP_NEGOTIATE_ALWAYS_SIGN，NTLMSSP_NEGOTIATE_SIGN，NEGOTIATE_KEY_EXCHANGE，NEGOTIATE_VERSION
Exchange-Attacker-DC交互流量
Exchange向Attacker发送NTLMSSP_AUTH包内容
Attacker将NTLMSSP_AUTH通过LDAP中继到DC包内容
在通过LDAP中继时，
NTLM_AUTHENTICATE消息中的以下标志：NTLMSSP_NEGOTIATE_ALWAYS_SIGN，NTLMSSP_NEGOTIATE_SIGN，NEGOTIATE_KEY_EXCHANGE，NEGOTIATE_VERSION已经被设置为’NOT
set’
# 参考链接
[1] [Exchange Server 2013
一步步安装图解](https://www.cnblogs.com/jianyus/p/3170732.html)
[2] [Enable LDAP over SSL (LDAPS) for Microsoft Active Directory
servers](https://gist.github.com/magnetikonline/0ccdabfec58eb1929c997d22e7341e45)
[3] [Windows Server 2012 R2 辅助域控制器搭建](http://www.mamicode.com/info-detail-2275954.html)
[4] [滥用基于资源约束委派来攻击Active
Directory](https://www.cnblogs.com/backlion/p/10537813.html)
[5] [Abusing S4U2Self: Another Sneaky Active Directory
Persistence](https://alsid.com/company/news/abusing-s4u2self-another-sneaky-active-directory-persistence)
[6][利用CVE-2019-1040 - 结合RCE和Domain Admin的中继漏洞](https://dirkjanm.io/exploiting-CVE-2019-1040-relay-vulnerabilities-for-rce-and-domain-admin/)
[7] [滥用Exchange：远离域管理员的一个API调用](https://dirkjanm.io/abusing-exchange-one-api-call-away-from-domain-admin/)
[8] [The SYSTEM Account](https://wiki.samba.org/index.php/The_SYSTEM_Account)
[9] [Wagging the Dog: Abusing Resource-Based Constrained Delegation to Attack
Active Directory](https://shenaniganslabs.io/2019/01/28/Wagging-the-Dog.html#generic-dacl-abuse)
* * *