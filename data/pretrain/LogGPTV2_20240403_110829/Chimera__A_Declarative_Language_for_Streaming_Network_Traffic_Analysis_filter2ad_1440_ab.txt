htable_instancei
| htable_refi [[EXCLUSIVE] {LEFT | RIGHT | FULL}
[OUTER]] [UNORDERED] [SINGLE] JOIN
htable_instancei ON hexpri EQUALS hexpri
[TABLESIZE hrow_counti]
[WINDOW hexpri[, hexpri]]
htable_instancei ::=
| htable_refi SPLIT hexpri AS haliasi, haliasi
htable_namei [AS haliasi]
| ( hselect_bodyi ) AS haliasi
Figure 1: Query syntax for the Chimera language
The GROUP BY clause may also include an ORDER
BY keyword that takes a sorting parameter. Because
Chimera is a stream processing system, some values
will inevitably be discarded. ORDER BY ensures that
the highest values are kept in the GROUP BY table in-
stead of the newest values (the default). Chimera uses a
heap structure to discard rows with the lowest ORDER
BY value. This allows computation of “heavy hitters"
on a high-volume data stream using very little memory.
LIMIT speciﬁes how many to rows to output at the end
of each window. It defaults to TABLESIZE and is only
used if GLOBAL is speciﬁed.
3.1.2
Chimera introduces a few non-standard features for joins
that improve efﬁciency and enable new analytic seman-
tics. The ﬁrst difference is that joins are ordered by de-
fault. This means that the left tuple must arrive before
the right tuple. This lets Chimera use only one hash table
instead of two, improving efﬁciency. The keyword UN-
ORDERED can be added to the JOIN clause for standard
join semantics.
JOIN
Because Chimera is a stream processing system,
only equi-joins are supported, hence the mandatory EQ
(equals) syntax. Furthermore, only one tuple is allowed
per key in the join table. If a new tuple arrives on the
same side with the same key, then the old one is dis-
carded without being matched. This ensures that each
new tuple will generate at most one output, keeping over-
head down to O(1). Support for multi-tuple joins could
be added in the future, but their use could negatively af-
fect performance.
The next feature supported by Chimera is a SINGLE
JOIN, which enforces one-to-one matching between left
and right tuples. Normally, a row from one side of a join
is allowed to match multiple rows from the other side.
When a match occurs in a SINGLE JOIN, the matching
tuple is removed from the join table so that it frees up
space and cannot match any other tuples. This is useful
when performing an EXCLUSIVE OUTER JOIN, which
is similar to a typical outer join, except that the inner part
of the join is excluded, leaving only tuples that do not
have a match. An EXCLUSIVE LEFT SINGLE JOIN
can be used, for example, to detect ICMP ping packets
that never receive a reply. Here, SINGLE effectively in-
creases the time that can elapse before declaring a packet
unmatched by removing matched packets from the table.
The maximum number of elements stored in the JOIN
table can be set with TABLESIZE, just as with GROUP
BY, which guarantees a limit on memory utilization. In
addition to a size-based limit, JOIN also supports a con-
ditional WINDOW clause, which allows it to selectively
age off old tuples from the window. The conditional ex-
pression for the WINDOW clause is evaluated in a spe-
cial context where the oldest tuple is assigned the name
old in the root object, and the newest tuple given the
name new. For each new tuple, it and the oldest tuple
are used to evaluate the WINDOW expression. If the ex-
pression is false, then the old tuple is removed and the
expression is re-evaluated against the next oldest tuple.
For example, [new].[time] - [old].[time] .a().b().c()). Each method function can
operate on one or more types of input data, and can gen-
erate multiple output types. If any function in a method
chain generates a NULL output, then evaluation stops
and later functions in the chain are not called.
Within an expression in a Chimera query statement,
methods may be called without an explicit base ob-
ject. In this case, Chimera uses the implicit default ob-
ject, which is a Map representing a tuple in the current
schema. Chimera also supports a square-bracket syntax:
[]. This is syntactic sugar for calling the get
function get(’’), which will retrieve the ﬁrst
value in the map that has a key matching the given input
string. If the get function or bracket syntax is used on a
List object, then Chimera assumes that the list consists
of Map objects and will add an implicit iterator over the
list, returning the ﬁrst object that is not NULL. Such “ap-
ply” functions are discussed more later in this section.
In the Chimera language, arguments to method func-
tions must be literals and cannot be derived from the
default tuple object. Functions that need to manipulate
multiple elements in the default tuple must be written as
static functions (described in the next section) instead of
method functions. This was a choice that we made based
on readability and it does not effect expressiveness.
3.4.2 Static Functions and Operators
Chimera supports static functions that can operate
on multiple objects (Example: concat(,
, ...)). The arguments to static functions
can be literals or chains of method functions. Chimera
also has a number of basic operators. These operators
are essentially syntactic sugar for static function calls,
though they may be compiled down to the same operator
in the target language if it exists and has the same seman-
tics. Chimera currently support most of the C operators,
including:
(modulo)
• Arithmetic: +, − (subtraction and unary), ∗, /, %
• Comparison: ==, ! =, , =
• Logical: ! (NOT), && (AND), || (OR)
• Bitwise: ∼ (NOT), & (AND), | (OR), ^(XOR), > (Right Shift)
For arithmetic and comparison operators between in-
tegers and ﬂoats, integers are promoted to ﬂoats. Bitwise
operations are only allowed on integers, and left shifting
an integer will never truncate bits that are set. Instead, it
will be expanded so that it can hold the value. For strings
and IP addresses, only the comparison operators are sup-
ported. For Boolean values, only the equality, inequality,
and logical operators are supported.
3.4.3 Aggregate Functions
The next type of function available in Chimera is an ag-
gregate function. Aggregate functions are used to com-
pute some result over multiple data items. Aggregate
functions are typically seen in expressions that are part of
the SELECT, HAVING, or UNTIL clauses in a statement
that uses GROUP BY. In these places, a different aggre-
gate value will be computed for each unique GROUP BY
key (each key has a different state). Aggregate functions
may also be used in WHERE clauses or statements with-
out GROUP BY, but they will have a single global state
in these cases.
The syntax for an aggregate function is exactly the
same as for static functions. However, the deﬁnition must
specify four routines, which are shown in Table 2. These
routines are similar to those for deﬁning an aggregate
function in a standard relational database.
Table 2: User-deﬁned aggregate function routines
Arguments Returns
When Called
Initialization
Iteration
Evaluation
Termination
None
State, Inputs
State
State
Before the ﬁrst input
For each new input
State
State
Outputs To read current output
State At end of each window
Each of the routines in an aggregate function deals
with a state object. This state object is returned from calls
to aggregate routines (except evaluation, which does not
update the state), stored, and then passed back to the next
aggregate routine call. This state object is opaque to the
rest of the system and can contain anything.
The termination function works a bit differently than
in a traditional database due to the streaming nature of
Chimera. This function will be called at the end of each
window as speciﬁed in an UNTIL clause in an aggre-
gate statement. The state object that it returns will be
passed back to the next iteration call for the ﬁrst item
in the next window. This allows aggregate functions to
maintain state across multiple windows.
Some traditional databases also support a Merge rou-
tine for user-deﬁned aggregates. This allows intermedi-
ate results to be merged together, which allows parallel
computation. Chimera does not yet support merging, but
could be extended to do so in the future.
3.4.4 Apply Functions
4
Implementing Analytics in Chimera