```sql
SELECT c1, c2 
FROM t1, t2
```
Join t1 to itself using INNER JOIN clause
```sql
SELECT c1, c2
FROM t1 A
INNER JOIN t1 B ON condition
```
Using SQL Operators
Combine rows from two queries
```sql
SELECT c1, c2 FROM t1
UNION [ALL]
SELECT c1, c2 FROM t2
```
Return the intersection of two queries
```sql
SELECT c1, c2 FROM t1
INTERSECT
SELECT c1, c2 FROM t2
```
Subtract a result set from another result set
```sql
SELECT c1, c2 FROM t1
MINUS
SELECT c1, c2 FROM t2
```
Query rows using pattern matching %, _
```sql
SELECT c1, c2 FROM t1
WHERE c1 [NOT] LIKE pattern
```
Query rows in a list
```sql
SELECT c1, c2 FROM t
WHERE c1 [NOT] IN value_list
```
Query rows between two values
```sql
SELECT c1, c2 FROM t
WHERE  c1 BETWEEN low AND high
```
Check if values in a table is NULL or not
```sql
SELECT c1, c2 FROM t
WHERE  c1 IS [NOT] NULL
```
### Using SQL constraints
Set c1 and c2 as a primary key
```sql
CREATE TABLE t(
    c1 INT, c2 INT, c3 VARCHAR,
    PRIMARY KEY (c1,c2)
);
```
Set c2 column as a foreign key
```sql
CREATE TABLE t1(
    c1 INT PRIMARY KEY,  
    c2 INT,
    FOREIGN KEY (c2) REFERENCES t2(c2)
);
```
Make the values in c1 and c2 unique
```sql
CREATE TABLE t(
    c1 INT, c1 INT,
    UNIQUE(c2,c3)
);
```
Ensure c1 > 0 and values in c1 >= c2
```sql
CREATE TABLE t(
  c1 INT, c2 INT,
  CHECK(c1> 0 AND c1 >= c2)
);
```
Set values in c2 column not NULL
```sql
CREATE TABLE t(
     c1 INT PRIMARY KEY,
     c2 VARCHAR NOT NULL
);
```
### Modifying Data
Insert one row into a table
```sql
INSERT INTO t(column_list)
VALUES(value_list);
```
Insert multiple rows into a table
```sql
INSERT INTO t(column_list)
VALUES (value_list), 
       (value_list), â€¦;
```
Insert rows from t2 into t1
```sql
INSERT INTO t1(column_list)
SELECT column_list
FROM t2;
```
Update new value in the column c1 for all rows
```sql
UPDATE t
SET c1 = new_value;
```
Update values in the column c1, c2 that match the condition
```sql
UPDATE t
SET c1 = new_value, 
        c2 = new_value
WHERE condition;
```
Delete all data in a table
```sql
DELETE FROM t;
```
Delete subset of rows in a table
```sql
DELETE FROM t
WHERE condition;
```
### Managing Views
Create a new view that consists  of c1 and c2
```sql
CREATE VIEW v(c1,c2) 
AS
SELECT c1, c2
FROM t;
```
Create a new view with check option
```sql
CREATE VIEW v(c1,c2) 
AS
SELECT c1, c2
FROM t;
WITH [CASCADED | LOCAL] CHECK OPTION;
```
Create a recursive view
```sql
CREATE RECURSIVE VIEW v 
AS
select-statement -- anchor part
UNION [ALL]
select-statement; -- recursive part
```
Create a temporary view
```sql
CREATE TEMPORARY VIEW v 
AS
SELECT c1, c2
FROM t;
```
Delete a view
```sql
DROP VIEW view_name;
```
### Managing triggers
Create or modify a trigger
```sql
CREATE OR MODIFY TRIGGER trigger_name
WHEN EVENT
ON table_name TRIGGER_TYPE
EXECUTE stored_procedure;
```
#### WHEN
| -        | -                              |
|----------|--------------------------------|
| `BEFORE` | invoke before the event occurs |
| `AFTER`  | invoke after the event occurs  |
#### EVENT
| -        | -                 |
|----------|-------------------|
| `INSERT` | invoke for INSERT |
| `UPDATE` | invoke for UPDATE |
| `DELETE` | invoke for DELETE |
#### TRIGGER_TYPE
| -                    | - |
|----------------------|---|