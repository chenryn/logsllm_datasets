RA-game:
1. Setup: A is given oracle access to SW-Att.
2. Challenge: A random challenge C hal ← ${0, 1}l is generated and
given to A. A continues to have oracle access to SW-Att.
3. Response: Eventually, A responds with a pair (M, σ), where σ is either
forged by A, or the result of calling SW-Att at some arbitrary time t.
4. A wins if and only if σ = HMAC(KDF(K , C hal), M) and M 6= AR(t).
2.2 RA Security Deﬁnition:
An RA protocol is considered secure if there is no ppt A, polynomial in l, capable
of winning the game deﬁned in 2.1 with Pr[A , RA-game] > negl(l)
Figure 6: RA security deﬁnition for VRASED
In the following sections, we deﬁne SW-Att functional
correctness, LTL speciﬁcations 2-10 and formally verify that
VRASED’s design guarantees such LTL speciﬁcations. We de-
ﬁne LTL speciﬁcations from the intuitive properties discussed
in Section 3.2 and depicted in Figure 2. In Appendix A we
prove that the conjunction of such properties achieves sound-
ness (Deﬁnition 1) and security (Deﬁnition 2). For the security
proof, we ﬁrst show that VRASED guarantees that A can never
learn K with more than negligible probability, thus satisfying
the assumption in the security game. We then complete the
proof of security via reduction, i.e., show that existence of an
adversary that wins the game in Deﬁnition 2 implies the exis-
tence of an adversary that breaks the conjectured existential
unforgeability of HMAC.
Remark: The rest of this section focuses on conveying the intu-
ition behind the speciﬁcation of LTL sub-properties. Therefore,
our references to the MCU machine model are via Axioms A1 -
A7 which were described in high level. The interested reader
can ﬁnd an LTL machine model formalizing these notions in
Appendix A, where we describe how such machine model is
used construct computer proofs for Deﬁnitions 1 and 2.
4.3 VRASED SW-Att
To minimize required hardware features, hybrid RA approaches
implement integrity ensuring functions (e.g., HMAC) in soft-
ware. VRASED’s SW-Att implementation is built on top of
HACL*’s HMAC implementation [52]. HACL* code is veri-
ﬁed to be functionally correct, memory safe and secret indepen-
dent. In addition, all memory is allocated on the stack making
it predictable and deterministic.
SW-Att is simple, as depicted in Figure 7. It ﬁrst derives
a new unique context-speciﬁc key (key) from the master key
(K ) by computing an HMAC-based key derivation function,
HKDF [32], on C hal. This key derivation can be extended to
incorporate attested memory boundaries if V rf speciﬁes the
range (see Appendix B). Finally, it calls HACL*’s HMAC,
using key as the HMAC key. AT T EST _DATA_ADDR and
AT T EST _SIZE specify the memory range to be attested (AR
in our notation). We emphasize that SW-Att resides in ROM,
which guarantees P5 under the assumption of no hardware
attacks. Moreover, as discussed below, HW-Mod enforces that
no other software running on P rv can access memory allocated
by SW-Att code, e.g., key[64] buffer allocated in line 2 of
Figure 7.
HACL*’s veriﬁed HMAC is the core for guaranteeing P4
(Functional Correctness) in VRASED’s design. SW-Att func-
tional correctness means that, as long as the memory regions
storing values used in SW-Att computation (CR, AR, and KR)
do not change during its computation, the result of such compu-
tation is the correct HMAC. This guarantee can be formally ex-
pressed in LTL as in Deﬁnition 3. We note that since HACL*’s
HMAC functional correctness is speciﬁed in F*, instead of
LTL, we manually convert its guarantees to the LTL expressed
by Deﬁnition 3. By this deﬁnition, the value in MR does not
need to remain the same, as it will eventually be overwritten
by the result of SW-Att computation.
Deﬁnition 3. SW-Att functional correctness
G : { PC = CRmin ∧ MR = C hal ∧ [(¬reset ∧ ¬irq ∧ CR = SW-Att ∧ KR = K ∧ AR = M) U PC = CRmax ]
→ F : [PC = CRmax ∧ MR = HMAC(KDF(K , C hal), M)] }
where M is any arbitrary value for AR.
In addition, some HACL* properties, such as stack-based
and deterministic memory allocation, are used in alternative
designs of VRASED to ensure P2 – see Section 5.
Functional correctness implies that the HMAC implemen-
tation conforms to its published standard speciﬁcation on all
possible inputs, retaining the speciﬁcation’s cryptographic se-
curity. It also implies that HMAC executes in ﬁnite time. Secret
1436    28th USENIX Security Symposium
USENIX Association
independence ensures that there are no branches taken as a
function of secrets, i.e., K and key in Figure 7. This mitigates
K leakage via timing side-channel attacks. Memory safety
guarantees that implemented code is type safe, meaning that
it never reads from, or writes to: invalid memory locations,
out-of-bounds memory, or unallocated memory. This is par-
ticularly important for preventing ROP attacks, as long as P7
(controlled invocation) is also preserved5.
Having all memory allocated on the stack allows us to either:
(1) conﬁne SW-Att execution to a ﬁxed size protected memory
region inaccessible to regular software (including malware)
running on P rv; or (2) ensure that SW-Att stack is erased
before the end of execution. Note that HACL* does not provide
stack erasure, in order to improve performance. Therefore, P2
does not follow from HACL* implementation. This practice
is common because inter-process memory isolation is usually
provided by the Operating System (OS). However, erasure
before SW-Att terminates must be guaranteed. Recall that
VRASED targets low-end MCUs that might run applications
on bare-metal and thus can not rely on any OS features.
As discussed above, even though HACL* implementation
guarantees P4 and storage in ROM guarantees P5, these must
be combined with P6 and P7 to provide safe execution. P6 and
P7 – along with the key protection properties (P1, P2, and P3)
– are ensured by HW-Mod and are described next.
4.4 Key Access Control (HW-Mod)
If malware manages to read K from ROM, it can reply to V rf
with a forged result. HW-Mod access control (AC) sub-module
enforces that K can only be accessed by SW-Att (P1).
4.4.1 LTL Speciﬁcation
The invariant for key access control (AC) is deﬁned in LTL
Speciﬁcation (2). It stipulates that system must transition to
the Reset state whenever code from outside CR tries to read
from Daddr within the key space.
G : {¬(PC ∈ CR) ∧ Ren ∧ (Daddr ∈ KR) → reset }
(2)
4.4.2 Veriﬁed Model
Figure 8 shows the FSM implemented by the AC sub-module
which is veriﬁed to hold for LTL Speciﬁcation 2. This FSM has
two states: Run and Reset. It outputs reset = 1 when the AC
sub-module transitions to state Reset. This implies a hard-reset
of the MCU. Once the reset process completes, the system
leaves the Reset state.
5Otherwise, even though the implementation is memory-safe and correct
as a whole, chunks of a memory-safe code could still be used in ROP attacks.
otherwise
otherwise
PC = 0
Run
Reset
¬(PC ∈ CR) ∧ Ren ∧ (Daddr ∈ KR)
Figure 8: Veriﬁed FSM for Key AC
4.5 Atomicity
and Controlled Invocation
(HW-Mod)
In addition to functional correctness, safe execution of attes-
tation code requires immutability (P5), atomicity (P6), and
controlled invocation (P7). P5 is achieved directly by placing
SW-Att in ROM. Therefore, we only need to formalize invari-
ants for the other two properties: atomicity and controlled
execution.
4.5.1 LTL Speciﬁcation
To guarantee atomic execution and controlled invocation, LTL
Speciﬁcations (3), (4) and (5) must hold:
G : {[¬reset ∧ (PC ∈ CR) ∧ ¬(X(PC) ∈ CR)] → [PC = CRmax ∨ X(reset)] }
(3)
G : {[¬reset ∧ ¬(PC ∈ CR) ∧ (X(PC) ∈ CR)] → [X(PC) = CRmin ∨ X(reset)] }
(4)
G : {irq ∧ (PC ∈ CR) → reset }
(5)
LTL Speciﬁcation (3) enforces that the only way for SW-Att
execution to terminate is through its last instruction: PC =
CRmax. This is speciﬁed by checking current and next PC val-
ues using LTL neXt operator. In particular, if current PC value
is within SW-Att region, and next PC value is out of SW-Att
region, then either current PC value is the address of the last
instruction in SW-Att (CRmax), or reset is triggered in the next
cycle. Also, LTL Speciﬁcation (4) enforces that the only way
for PC to enter SW-Att region is through the very ﬁrst in-
struction: CRmin. Together, these two invariants imply P7: it
is impossible to jump into the middle of SW-Att, or to leave
SW-Att before reaching the last instruction.
P6 is satisﬁed through LTL Speciﬁcation (5). Atomicity
could be violated by interrupts. However, LTL Speciﬁcation
(5) prevents an interrupt to happen while SW-Att is executing.
Therefore, if interrupts are not disabled by software running
on P rv before calling SW-Att, any interrupt that could violate
SW-Att atomicity will necessarily cause an MCU reset.
4.5.2 Veriﬁed Model
Figure 9 presents a veriﬁed model for atomicity and controlled
invocation enforcement. The FSM has ﬁve states. Two basic
states notCR and midCR represent moments when PC points
to an address: (1) outside CR, and (2) within CR, respectively,
not including the ﬁrst and last instructions of SW-Att. Another
USENIX Association
28th USENIX Security Symposium    1437
PC  CRmax
otherwise
otherwise
notCR
PC = CRmin ∧ ¬ irq
otherwise
PC = 0
(PC  CRmax)
∧¬ irq
PC = CRmin
∧¬ irq
f stCR
otherwise
Reset
otherwise
lastCR
PC = CRmax
∧¬ irq
(PC > CRmin ∧ PC  CRmin ∧ PC < CRmax)
∧¬ irq
Figure 9: Veriﬁed FSM for atomicity and controlled invocation.
two: f stCR and lstCR represent states when PC points to the
ﬁrst and last instructions of SW-Att, respectively. Note that
the only possible path from notCR to midCR is through f stCR.
Similarly, the only path from midCR to notCR is through lstCR.
The FSM transitions to the Reset state whenever: (1) any se-
quence of values for PC does not obey the aforementioned
conditions; or (2) irq is logical 1 while executing SW-Att.
4.6 Key Conﬁdentiality (HW-Mod)
To guarantee secrecy of K and thus satisfy P2, VRASED must
enforce the following:
1. No leaks after attestation: any registers and memory ac-
cessible to applications must be erased at the end of each
attestation instance, i.e., before application execution re-
sumes.
2. No leaks on reset: since a reset can be triggered during
attestation execution, any registers and memory accessible
to regular applications must be erased upon reset.
Per Axiom A4, all registers are zeroed out upon reset and at
boot time. Therefore, the only time when register clean-up is
necessary is at the end of SW-Att. Such clean-up is guaranteed
by the Callee-Saves-Register convention: Axiom A6.
Nonetheless, the leakage problem remains because of RAM
allocated by SW-Att. Thus, we must guarantee that K is not
leaked through "dead" memory, which could be accessed by
application (possibly, malware) after SW-Att terminates. A
simple and effective way of addressing this issue is by reserv-
ing a separate secure stack in RAM that is only accessible (i.e.,
readable and writable) by attestation code. All memory allo-
cations by SW-Att must be done on this stack, and access
control to the stack must be enforced by HW-Mod. As discussed
in Section 6, the size of this stack is constant – 2.3KBytes.
This corresponds to ≈ 3% of MSP430 16-bit address space.
We discuss VRASED variants that do not require a reserved
stack and trade-offs between them in Section 5.
PC = 0
Run
Reset
(¬(PC ∈ CR) ∧ (Ren ∨Wen) ∧ (Daddr ∈ X S))
∨
((PC ∈ CR) ∧ (Wen) ∧ ¬(Daddr ∈ X S) ∧ ¬(Daddr ∈ MR))
Figure 10: Veriﬁed FSM for Key Conﬁdentiality
4.6.1 LTL Speciﬁcation
Recall that X S denote a contiguous secure memory region
reserved for exclusive access by SW-Att. LTL Speciﬁcation
for the secure stack sub-module is as follows:
G : {¬(PC ∈ CR) ∧ (Ren ∨Wen) ∧ (Daddr ∈ X S) → reset }
(6)
We also want to prevent attestation code from writing into
application memory. Therefore, it is only allowed to write to
the designated ﬁxed region for the HMAC result (MR).
G : {(PC ∈ CR) ∧ (Wen) ∧ ¬(Daddr ∈ X S) ∧ ¬(Daddr ∈ MR) → reset }
(7)
In summary, invariants (6) and (7) enforce that only attestation
code can read from/write to the secure reserved stack and that
attestation code can only write to regular memory within the
space reserved for the HMAC result. If any of these conditions
is violated, the system resets.
4.6.2 Veriﬁed Model
Figure 10 shows the FSM veriﬁed to comply with invariants (6)
and (7).
4.7 DMA Support
So far, we presented a formalization of HW-Mod sub-modules
under the assumption that DMA is either not present or disabled
on P rv. However, when present, a DMA controller can access
arbitrary memory regions. Such memory access is performed
concurrently in the memory backbone and without MCU inter-
vention, while the MCU executes regular instructions.
DMA data transfer is performed using dedicated memory
buses, e.g., DMAen and DMAaddr. Hence, regular memory ac-
cess control (based on monitoring Daddr) does not apply to
memory access by DMA controller. Thus, if DMA controller is
compromised, it may lead to violation of P1 and P2 by directly
reading K and values in the attestation stack, respectively. In
addition, it can assist P rv-resident malware to escape detection
by either copying it out of the measurement range or deleting
it, which results in a violation of P6.
4.7.1 LTL Speciﬁcation
We introduce three additional LTL Speciﬁcations to protect
against aforementioned attacks. First, we enforce that DMA
1438    28th USENIX Security Symposium
USENIX Association
USENIX Association
28th USENIX Security Symposium    1439
At the same time, we note that, even with veriﬁed erasure
as a part of SW-Att, P2 is still not guaranteed if the MCU
does not guarantee erasure of the entire RAM upon boot. This
is necessary in order to consider the case when P rv re-boots
in the middle of SW-Att execution. Without a reserved stack,
K might persist in RAM. Since the memory range for SW-Att
execution is not ﬁxed, hardware support is required to bootstrap
secure RAM erasure before starting any software execution. In