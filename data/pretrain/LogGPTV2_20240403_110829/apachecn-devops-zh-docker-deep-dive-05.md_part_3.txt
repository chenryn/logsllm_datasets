$ chmod 0400 ca-key.pem client-key.pem daemon-key.pem 
```
 `您还应该删除对公钥证书的写访问权限。
```
$ chmod -v 0444 ca.pem client-cert.pem daemon-cert.pem 
```
 `##### 分发密钥
现在您已经获得了所有必需的密钥和证书，您需要将它们分发到客户端和守护程序节点，如下所示:
*   从 CA 到`node3`(守护进程节点)的`ca.pem`、`daemon-cert.pem`和`daemon-key.pem`。
*   从 CA 到`node1`(客户端节点)的`ca.pem`、`client-cert.pem`和`client-key.pem`。
有多种方法可以在节点之间复制文件，这些方法可能因系统而异。需要知道的重要一点是，Docker 要求复制的文件具有以下名称和位置:
*   daemon-cert . PEM–> ~/。Docker/证书. pem
*   daemon key . PEM–> ~/。Docker/密钥. pem
*   client-cert . PEM –> ~/。docker/cert.pem
*   client-key . PEM –> ~/。docker/key.pem
您可能需要在守护进程和客户端节点上创建`~/.docker`隐藏目录。您可能还必须更改`.docker`目录上的权限，才能启用副本— `chmod 777 .docker`可以工作，但不安全。
如果您一直在关注，实验室现在看起来如图 5.7 所示
![Figure 5.7 Updated lab with keys](img/figure5-7.png)
Figure 5.7 Updated lab with keys
客户端和守护程序节点上证书颁发机构公钥(`ca.pem`)的存在告诉它们信任由证书颁发机构签署的证书。
有了证书，是时候配置 Docker 了，这样客户端和守护程序就可以使用 TLS 了。
##### 为顶级域名系统配置 Docker
如前所述，Docker 有两种 TLS 模式:
*   守护模式
*   客户端模式
守护程序模式强制守护程序只允许来自具有有效证书的客户端的连接。客户端模式告诉客户端只与拥有有效证书的守护程序连接。
我们将在`node1`上为*守护模式*配置守护进程，并对其进行测试。之后，我们将在`node2`上为*客户端模式*配置客户端进程，并进行测试。
##### 为顶级域名系统配置 Docker 守护程序
保护守护进程就像在`daemon.json`配置文件中设置几个守护进程标志一样简单:
*   `tlsverify`启用张力腿平台验证
*   `tlscacert`告诉守护进程信任哪个 CA
*   `tlscert`告诉 Docker 守护进程的证书位于何处
*   `tlskey`告诉 Docker 守护进程的私钥在哪里
*   `hosts`告诉 Docker 要在哪些套接字上绑定守护程序
我们将在独立于平台的`daemon.json`配置文件中配置这些。这可以在 Linux 上的`/etc/docker/`和 Windows 上的`C:\ProgramData\Docker\config\`中找到。
在将运行安全 Docker 守护程序的节点上执行以下所有操作(示例实验中的`node3`)。
编辑`daemon.json`文件并添加以下行。假设一个叫`ubuntu`的用户，你的可能不一样。
```
{
    "hosts": ["tcp://node3:2376"],
    "tls": true,
    "tlsverify": true,
    "tlscacert": "/home/ubuntu/.docker/ca.pem",
    "tlscert": "/home/ubuntu/.docker/cert.pem",
    "tlskey": "/home/ubuntu/.docker/key.pem"
} 
```
 `**警告！**运行`systemd`的 Linux 系统不允许使用`daemon.json`中的“主机”选项。相反，您必须在 systemd 覆盖文件中指定它。你可以通过`sudo systemctl edit docker`命令做到这一点。这将在编辑器中打开一个名为`/etc/systemd/system/docker.service.d/override.conf`的新文件。添加以下三行并保存文件。
```
[Service]
ExecStart=
ExecStart=/usr/bin/dockerd -H tcp://node3:2376 
```
 `现在已经设置了 TLS 和主机选项，您需要重新启动 Docker。
一旦 Docker 重新启动，您可以通过检查`ps`命令的输出来检查新的`hosts`值是否有效。
```
$ ps -elf | grep dockerd
4 S root  ... /usr/bin/dockerd -H tcp://node3:2376 
```
 `命令输出中出现“`-H tcp://node3:2376`”是守护进程正在网络上侦听的证据。端口`2376`是 Docker 使用 TLS 的标准端口。`2375`是默认的非安全端口。
此时，从`node1`运行`docker version`等命令不起作用。这是因为**守护程序**被配置为在网络上监听，但是 **Docker 客户端**仍在尝试使用本地 IPC 套接字。再次尝试该命令，但这次添加了`-H tcp://node3:2376`标志。
```
$ docker -H tcp://node3:2376 version
Client:
 Version:       19.03.8
 API version:   1.40
Get http://daemon:2376/v1.35/version: net/http: HTTP/1.x transport connection broken: 
malformed HTTP response "\x15\x03\x01\x00\x02\x02".
* Are you trying to connect to a TLS-enabled daemon without TLS? 
```
 `命令看起来更好，但仍然不起作用。这是因为守护进程拒绝来自未经认证的客户端的所有连接。
恭喜你。Docker 守护程序被配置为侦听网络，并拒绝来自未经认证的客户端的连接。
让我们将`node1`上的 Docker 客户端配置为使用 TLS。
##### 为顶级域名系统配置 Docker 客户端
在本节中，您将在`node1`上为两件事配置 Docker 客户端:
*   通过网络连接到远程守护程序
*   签署所有`docker`命令
从将运行安全 Docker 客户端的节点运行以下所有操作(示例实验中的`node1`)。
导出以下环境变量，以配置客户端通过网络连接到远程守护程序。客户端必须能够通过名称连接到守护进程才能工作。
```
export DOCKER_HOST=tcp://node3:2376 
```
 `尝试以下命令。
```
$ docker version
Client:
 Version:       19.03.8
Get http://daemon:2376/v1.35/version: net/http: HTTP/1.x transport connection broken: 
malformed HTTP response "\x15\x03\x01\x00\x02\x02".
* Are you trying to connect to a TLS-enabled daemon without TLS? 
```
 `Docker 客户端现在通过网络向远程守护程序发送命令，而无需您明确指定`-H tcp://node3:2376`标志。但是，您仍然需要配置客户端来签署命令。
再导出一个环境变量，告诉 Docker 客户端使用其证书对所有命令进行签名。
```
export DOCKER_TLS_VERIFY=1 
```
 `再次运行`docker version`命令。
```
$ docker version
Client:
 Version:       19.03.8
Server:
 Engine:
  Version:      19.03.8
  API version:  1.40 (minimum version 1.12)
  Go version:   go1.12.17
  Git commit:   afacb8b
  Built:        Wed Mar 11 01:29:16 2020
  OS/Arch:      linux/amd64
  Experimental: true 
```
 `恭喜你。客户端正在通过安全网络连接与远程守护程序成功对话。实验室的最终配置如图 5.8 所示
![Figure 5.8](img/figure5-8.png)
Figure 5.8
在我们快速回顾之前，还有最后几点。
1.  最后一个示例之所以有效，是因为您将客户端的 TLS 密钥复制到了 Docker 期望它们所在的文件夹中。这是用户主目录中的一个隐藏文件夹，名为`.docker`。您还为键提供了 Docker 期望的默认文件名(`ca.pem`、`cert.pem`和`key.pem`)。您可以通过导出`DOCKER_CERT_PATH`来指定不同的文件夹。
2.  您可能想让环境变量(`DOCKER_HOST`和`DOCKER_TLS_VERIFY`)成为您环境中更持久的固定装置。
### 章节总结
Docker 引擎采用模块化设计，并在很大程度上基于 OCI 的开放标准。
*Docker 守护程序*实现了 Docker API，这是一个丰富的、版本化的 HTTP API，它是与 Docker 项目的其他部分一起开发的。
容器执行由*容器*处理。《容器》是由 Docker，Inc .撰写的，并为《CNCF》供稿。您可以将其视为处理容器生命周期操作的容器主管。它小巧轻便，可以被其他项目和第三方工具使用。例如，它正在成为 Kubernetes 中最常见的容器运行时。
containerd 需要与 OCI 兼容的容器运行时对话，才能真正创建容器。默认情况下，Docker 使用 *runc* 作为其默认容器运行时。runc 实际上是 OCI 运行时规范的实现，并期望从符合 OCI 规范的包中启动容器。containerd 与 runc 对话，并确保 Docker 映像作为符合 OCI 标准的包呈现给 runc。
runc 可以作为一个独立的 CLI 工具来创建容器。它基于 libcontainer 的代码，也可以被其他项目和第三方工具使用。
Docker 守护程序中仍然实现了许多功能。随着时间的推移，更多的这种情况可能会爆发。目前仍在 Docker 守护进程中的功能包括但不限于:Docker API、映像管理、认证、安全功能和核心网络。``````````````````````