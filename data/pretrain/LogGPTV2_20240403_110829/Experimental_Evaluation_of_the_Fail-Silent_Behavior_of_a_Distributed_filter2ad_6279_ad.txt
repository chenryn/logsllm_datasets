3.30 
1.85 
2.83 
1. I7 
1.54 
0.88 
To  choose  the  EDMs  to  remove,  we  have  made  four 
fault  injection  campaigns:  the  first  three  evaluate  the  fail- 
silence obtained when removing one of the three EDMs with 
the highest ordered overlap (Coding, Deadline and Seman); 
the  fourth one evaluates the  fail-silence coverage when  re- 
moving Vmemory, for which  the ordered overlup metric  is 
perverted  because  the execution is  necessary  stopped  after 
an  error  is  detected.  The  following  fail-silence coverage 
have been obtained on campaigns with 3000 activated faults: 
97.5 % with all EDMs except Coding, 98.3 % with all EDMs 
except Deadline, 98.7 % with all EDMs except Seman, and 
98.9 % with all EDMs except Vmemory. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:06:05 UTC from IEEE Xplore.  Restrictions apply. 
From these results, we choose to remove the EDM which 
has the smallest influence on the fail-silence coverage, EDM 
Vmemory. We also remove EDMs Timeout, Automaton, Ar- 
rival, OS and ECI, whose percentage of first error detections 
is less than  1 % (a campaign in which only these EDMs are 
removed  showed  a  fail-silence  coverage  of  98.7  %).  The 
following table evaluates the new  set of EDMs,  i.e.  EDMs 
Coding, Robust, CodingStatic, Deadline, Callgraph, Struc- 
ture, Seman and CPU. 
Fail-silence coverage 
Confidence interval 
(confidence level 95%) 
Average latency 
(extreme 10% excluded) 
Time overhead 
Overall memory overhead 
Memory overhead, code 
Memory overhead, data 
11  AIIEDMs 
99.07 % 
1  Reduced set 
of EDMs 
98.34 % 
1 
[98 80%,99 33701 
[97 98%. 98 70%] 
x 1 8  
x 6 7  
X I 2  
 I 
X I
x 1 4  
x l  I 
With the reduced set of EDMs, the time overhead due to 
error detection  is reduced  by  32%, the memory overhead is 
reduced by 45%, and this with  only a slight decrease of the 
fail-silence coverage (0.73%). 
5. Related work 
There are a large number of hardware  or software meth- 
ods  to  detect  errors.  They  can  be  classified  in  two  cate- 
gories.  Redundancy-based EDMs use  redundancy  of data, 
hardware  or pieces of  software to detect errors.  Examples 
of  redundancy-based  EDMs  are  error  detectingkorrecting 
codes, checksums, robust data structures, temporal or lock- 
step replication  of processes,  recovery  blocks or N-version 
programming.  Behavior-based EDMs detect errors through 
the  detection  of  a  deviation  of  the  system  behavior  com- 
pared  to  a  reference  behavior.  This  category  of  mecha- 
nisms  include  mechanisms  that  verify  the  system  timing 
and control flow: from simple watchdog timers to watchdog 
processors  [ 131, software-implemented control flow  check- 
ing  mechanisms  such  as  [14].  This  category  of  mecha- 
nisms  also  include  mechanisms  that  check  data  validity: 
verification  of  value  domains [8], Algorithm-Based  Fault- 
Tolerance [9].  The study described  in  this paper uses both 
categories  of  mechanisms.  However,  to  avoid  the  finan- 
cial  cost  of  using  dedicated  hardware,  we  concentrate  on 
software-implemented mechanisms, and focus on those that 
have  a  low  cost  (i.e. 
do  not  replicate  entire  computa- 
tions) and require a modification of neither the compiler nor 
the  operating  system.  Moreover, except EDM  Seman, the 
EDMs integrated in HADES can be applied without modifi- 
cation to a different kind of software. 
Fault  injection  has  been  used  in  many  studies  to evalu- 
ate the dependability of systems.  Some of these studies an- 
alyze  the  failure modes  of  (hardware  or software)  systems 
in  general,  while  other  ones concentrate  on a specific de- 
pendability metric which is the coverage of the fail-silence 
assumption. 
In the first class of studies, Damn [6] compares the set of 
EDMs  integrated  into  a real-time  operating  system  (hard- 
ware  mechanisms,  parameter  checks,  process  replication, 
robust data structures, check of time-limits)  in the presence 
of hardware faults. The main performance metric used is the 
percentage of first detection of the mechanisms computed on 
all detected errors. This study shows a much higher percent- 
age of first detections achieved by the hardware (68000 pro- 
cessor)  that  in  our results,  but  a similar percentage  of  first 
detection  for timing checks (less than  4%  in both  studies). 
Salles et al. [ 17) propose an approach (use of reflexivity and 
fault-containment  wrappers)  to  contain  the effect  of  exter- 
nal  and  internal  faults  that  can  affect  the  behavior  of  mi- 
crokernels.  A  set of  fault-containment wrappers have been 
designed.  In the presence of physical faults in the text region 
of the Chorus microkernel, the fail-silence coverage ranges 
from 97.7% (faults in the scheduler) to 99.5%  (faults in the 
synchronization module). Note that in this study, in contrast 
to our work, the workload is not distributed, and the costs of 
the fault containment wrappers is not given. An experimen- 
tal  evaluation of the communication capabilities of Delta-4 
in  the  presence  of  physical  faults is  reported  in  [2].  The 
basis for the Delta-4 multipoint services is an atomic multi- 
cast protocol (AMP) implemented in communication servers 
called  (NACs)  that  exhibit  a  fail-silent  behavior  thanks  to 
self-checking  hardware.  The study evaluates through  pin- 
level  fault  injection  both  the  coverage  of  the  NACs  self- 
checking mechanisms and the  behavior of  the AMp in  the 
presence of faults. 
The studies presented in  [12J, [7] and  [16] focus on the 
coverage  of  the fail-silence assumption  in  the  presence  of 
hardware faults.  Madeira  and  Silva  [I21 evaluate the fail- 
silence coverage in systems without hardware and software 
replication.  The  EDMs  used  are  behavior-based  EDMs 
(ECI, hardware-implemented  control  flow  checking).  The 
coverage  obtained  using  pin-level  physical  fault  injection 
demonstrated a fail-silence coverage of 98.1 % on a 68K, and 
99.6% on a Z80.  When only  software-implemented EDMs 
are used (semantic checks, ABlT, very  simple control flow 
checking) another study from the same research  group has 
shown  a  fail-silence  coverage  of  98.2% on a  68K proces- 
sor  [16].  It  is  difficult  to  compare  the  studies  completed 
in  [ 121 and [ 161 because of the different nature of  the soft- 
ware which is evaluated (scientific applications for [ 121 and 
[ 161, operating system in our study). Fuchs [7] evaluates the 
fail-silence coverage of the Mars system using SWIFI. Mars 
includes EDMs in  the hardware (CPU plus dedicated hard- 
ware),  operating  system  (assertions) and in  the  application 
(CRC, temporal  replication).  The results of  this  study  are 
a coverage  of  92% when  only  hardware,  operating  system 
and CRCs are used, and 100% when temporal replication is 
3 12 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:06:05 UTC from IEEE Xplore.  Restrictions apply. 
added.  Compared with this work, our study shows a lower 
coverage of the fail-silence assumption, but without the use 
of dedicated hardware. 
6. Conclusion 
In this paper, we have presented an evaluation of the fail- 
silent  behavior of computers executing a  run-time support 
for hard real-time dependable applications built from COTS 
components.  The  run-time  support contains error  detec- 
tion mechanisms (EDMs), entirely implemented in software, 
used to enforce fail-silence.  The main  result of the evalua- 
tion  is  a  fail-silence  coverage of  at  most  99.l%, obtained 
when the  whole set of error detection  mechanisms  is used. 
Compared to the initial coverage of 80.6 %,  obtained  when 
no EDM  is  used, this  figure is rather  good  (the  number of 
fail-silence violations  is divided by a  factor 22).  However, 
this  coverage is  clearly  not  sufficient  to  be  used  in  safety- 
critical systems. Achieving a fail-silence coverage of 99.1 % 
comes with  a CPU and memory cost:  the time  spent in  the 
run-time support is multiplied  by a  factor 2.5 when  EDMs 
are introduced, and its memory size is multiplied by a factor 
1.8. The average detection latency is of several milliseconds. 
These costs are far from bcing negligible, and mainly come 
by the fact that EDMs are software-implemented.  However, 
a study of the overlap between EDMs has shown that some 
of them can be removed, thus lowering the memory and CPU 
cost of error detection (x 1.1 and x  1.7) with only a slight de- 
crease of the fail-silence coverage (98.3 %). 
As  a  future  work,  an  interesting  study  would  be  to 
compare  on  the  same platform  our EDMs  with  hardware- 
implemented EDMs.  Another research  direction  would be 
to design a general methodology to select sets of EDMs. 
Acknowledgements  This  work  is  partially  supported 
the  French  Department  of  Defense  (DGAIDSP), 
by 
#98.34.375.00.470.75.65.  The  authors  wish  to  thank  D. 
Powell and the anonymous reviewers for their valuable com- 
ments on this work. 
References 
[ I ]   E. Anceaumc, G. Cabillic, P. Chevochot, and I. Puaut. A flex- 
ible  run-time  support  for distributed dependable  hard  real- 
time applications.  In  Proceedings of  the  2nd International 
Sytnposiiini  on  Object-oriented Real-time distributed Cotn- 
pufing, pages 310-319,  St Malo, France, May  1999. 
121  J.  Arlat,  M.  Aguera,  Y.  Crouzet,  J.  Fabre,  E.  Lartins,  and 
D. Powell.  Experimental evaluation of the fault tolerance of 
an atomic multicast system. IEEE Transaction on Reliability, 
39(4):455-467, Oct.  1990. 
[3]  J. H. Barton, E. W. Czcck, Z. Z. Segall, and D. P. Siewiorek. 
Fault injection experiments using FIAT.  IEEE Transactions 
on Compicters, 39(4):575-581,  Apr.  1990. 
[4]  J. Carreira,  H.  Madeira, and J. G. Silva.  Xception:  A tech- 
nique  for  the  experimental  evaluation  of  dependability  in 
modern computers.  IEEE  Transactions on Sofiware Engi- 
neering, 24(2): 125-1 36, Feb. 1998. 
[5] P.  Chevochot and 1.  Puaut.  Experimental  evaluation of  the 
fail-silent  behavior  of  a distributed  real-time  run-time  sup- 
port  built from COTS components.  Technical Report  1370, 
IRISA,  Oct.  2000. 
137o.ps.gz. 
ftp://ftp.irisa.fr/techreports/20OO/Pl- 
[6]  A.  Damm.  The  effectiveness  of  software  error-detection 
mechanisms in real-time operating systems.  In Proc. of the 
16th International Symposium on Fault-Tolerant Computing 
Systems, pages 171-176,  Vienna, Austria, June  1986. 
[7]  E.  Fuchs. 
Validating  the  fail-silence  assumption  of  the 
MARS architecture.  In Proc.  of  the 6th Dependable  Com- 
puting for Critical Applications Conference, pages 225-247, 
Garmisch-Partenkirchen, Germany, 1998. 
[8]  M. Hiller.  Executable assertions for detecting data errors in 
embedded control systems. In Proc. of the 2000 International 
Conference on Dependable Systems and Networks (FTCS-30 
and DCCA-8), pages 24-33,  New York, USA, June 2000. 
[9]  K.  H.  Huang  and  J.  Abraham.  Algorithm-based  fault- 
tolerance for matrix operations. IEEE Transactions on Com- 
pulers, 33(6):518-528,  June  1984. 
[IO]  G. Kanawati, N. Kanawati, and D. Tang. FERRARI: A flex- 
ible software-based  fault and  error injection system.  IEEE 
Transactions on Computers, 44(2):248-260,  1995. 
[ 1 11  P.  Lala. Fault Tolerant and Fault Testable Hardware Design. 
Prentice Hall,  1985. 
[I21  H.  Madeira  and  J.  G.  Silva.  Experimental  evaluation  of 
the  fail-silent  behavior  in  computers  without  error  mask- 
ing.  In Proc. of the 24th International Sjnzposium on Fault- 
Tolerant Computing Systems, pages 350-359,  Austin, USA, 
June  1994. 
[ 131  A. Mahmood  and E. J. McCluskey. Concurrent error detec- 
tion  using  watchdog processors -  a survey.  IEEE Transuc- 
tions on Computers, 37(2): 160-174,  Feb. 1988. 
[ 141  G. Miremadi, J.  Karlsson,  U.  Gunnetlo, and J. Torin.  Two 
software techniques  for on-line error detection.  In Proc. of 
the  22nd  International Symposium  on Fault-Tolerant  Com- 
puting Systems, pages 328-335,  Boston, USA, June  1992. 
[I51  D.  Powell, G.  Bonn, D.  Seaton, P.  Verissimo, and  F.  Wae- 
selynck.  The  delta-4  approach  to  dependability  in  open 
distributed computing  systems.  In  Proc.  of  the  18th Inter- 
national Symposium  on Fault-Tolerant  Computing Systems, 
pages 246-25  I ,  Tokyo, Japan, June 1988. 
[I61  M. Z. Rela, H. Madeira, and J. G. Silva. Experimental evalu- 
ation of the fail-silent behavior in programs with consistency 
checks. 
In  Proc.  of  the  26th  International  Symposium  on 
Fault-Tolerant  Computing Systems, pages 394-403,  Sendai, 
Japan, June  1996. 
[ 171  F.  Salles, M. R. Moreno, J. Fabre, and J. Arlat.  Metakernels 
and fault containment wrappers.  In Proc. of  the 29th Inter- 
national Symposium  on Fault-Tolerant  Computing Systems, 
pages 22-29,  Madison (WI), June  1999. 
[IS]  A.  Steininger and C. Scherrer.  On  finding an optimal com- 
bination of  error detection  mechanisms based on  results of 
fault  injection  experiments. 
In  Proc.  of  rhe  27th  Inter- 
national Syriiposiictti  on Fault-Tolerant  Cornputing Systems, 
pages 238-247,  Seattle, WA, USA, June  1997. 
313 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:06:05 UTC from IEEE Xplore.  Restrictions apply.