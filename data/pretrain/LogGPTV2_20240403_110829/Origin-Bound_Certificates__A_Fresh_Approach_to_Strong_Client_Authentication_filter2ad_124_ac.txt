### Evaluation of TLS-OBC Performance in Chromium Browser

To assess the minimal impact of origin-bound certificates (OBCs) on TLS connections, we conducted performance evaluations using the open-source Chromium browser and industry-standard benchmarks. The experiments were carried out with Chromium version 19.0.1040.0 on an Ubuntu 10.04 Linux system equipped with a 2.0GHz Core 2 Duo CPU and 4GB of RAM.

#### Experimental Setup
- **Test Environment**: All tests were performed against the TLS-secured version of Google's homepage.
- **Browser Configuration**:
  - JavaScript was disabled to minimize its impact on the results.
  - SPDY connection pooling was disabled.
  - The browser cache was cleared, and all HTTP connections were reset between each test run to eliminate any saved state that could skew the results.
- **Benchmarking Tools**:
  - The Chromium benchmarking extension [12] and the HTML5 Navigation Timing [19] JavaScript interface were used to gather the results.

### 6.1.1 Effects on Chromium TLS Connection Setup

We analyzed the performance impact of the TLS-OBC extension on connections to our website's HTTPS endpoints. Two use-cases were considered:
1. **First Visit**: Requires the client-side generation of a fresh OBC.
2. **Subsequent Visits**: Uses a cached OBC.

The total network latency from the `fetchStart` event to the `responseEnd` event was measured, encapsulating both the TLS handshake time and network communication latency.

#### Results
- **Figure 7: Network Latency with Pre-generated OBC**
  - This figure shows the network latency for subsequent requests where a pre-generated OBC is available in the cache.
  - No significant impact was observed due to the additional `CertificateRequest` and `Certificate` messages in the TLS handshake.

- **Figure 6: Network Latency with OBC Generation**
  - This figure illustrates the total network latency for the first visit, where a new OBC is generated.
  - The higher latency in Figure 6 compared to Figure 7 indicates that OBC generation is the primary factor contributing to the slowdown during the first visit.

- **Figure 8: NSS Certificate Generation Times**
  - This figure provides the performance of the OBC generation routine, confirming that certificate generation is the main contributor to the increased latency during the first visit.

### Client Performance Analysis

These observations demonstrate that certificate generation is the main source of slowdown for clients using OBCs. The choice of public key algorithm significantly affects the initial connection but has a negligible impact on subsequent connections. This suggests that production TLS-OBC browsers should speculatively precompute public/private key pairs to mitigate the delay, although fresh connections will still require signing OBCs, which cannot be done speculatively.

### 6.2 TLS Terminator Performance

We also evaluated the impact of TLS-OBC on Google's high-performance TLS terminator used in large-scale web services. The tests used a corpus of HTTP requests modeling real-world traffic, sent through the TLS terminator to a backend simulating real-world responses.

- **Test Conditions**:
  - 80% of HTTP requests were sent over resumed TLS sessions.
  - 20% of requests were sent through freshly negotiated TLS sessions.
  - The TLS terminator was subjected to 5 minutes of 3000 requests-per-second TLS-only traffic, with periodic measurements of memory and CPU utilization.

- **Tests Conducted**:
  - Without OBCs.
  - With a 1024-bit RSA client key pair.
  - With a 2048-bit RSA client key pair.
  - With a 163-bit client key pair on the sect163k1 elliptic curve (used for ECDSA).

- **Results**:
  - **Figure 9: Memory Footprint**
    - 2048-bit RSA client certs required about 12% more memory than the baseline.
    - 1024-bit RSA and ECDSA keys increased memory consumption by less than 1%.

  - **Figure 10: CPU Utilization**
    - The largest increase in CPU utilization (about 7%) was observed with ECDSA client certificates.

  - **Figures 11-14: Latency Histograms**
    - While there was an increase in higher-latency responses with client-side certificates, the majority of requests were serviced in under one millisecond in all cases.

### Server Performance Analysis

To minimize memory and CPU load on the TLS terminator, 1024-bit RSA is the preferred choice. However, considering the equivalent security offered by 1024-bit RSA and 163-bit ECDSA, the benefits of ECDSA may justify the slightly higher server costs.

### 7. Discussion â€“ Practical Realities

#### 7.1 Domain Cookies and TLS-OBC

- **Issue**: Channel-binding cookies work only if they are not set across multiple origins.
- **Solution**: A "legacy mode" of TLS-OBC is being considered, where the client uses whole domains (based on eTLDs) rather than web origins for client-side certificates. This approach does not increase the risk of credential theft and maintains security properties against man-in-the-middle attacks.

#### 7.2 Privacy

- **Issue**: Reusing OBCs can enable an eavesdropper to track users.
- **Solution**: Combining TLS-OBC with an encrypted client certificate TLS extension, which sends the client certificate over an encrypted channel instead of in the clear.

#### 7.3 SPDY and TLS-OBC

- **Issue**: SPDY IP pooling requires the same client certificate for different origins.
- **Solution**: SPDY version 3 introduces a new CREDENTIAL control frame type, allowing the client to present different client certificates without a new TLS handshake.

#### 7.4 Other Designs Considered

- **Application-Level Crypto API**: Provides some protection but is vulnerable to XSS attacks and requires application rewrites.
- **Signed HTTP Requests**: Quickly becomes complex and redundant when compared to the existing TLS features.

### 8. Related Work

#### 8.1 Traditional TLS Client Certificates

While TLS server authentication is widely used, client authentication is less common. Traditional client certificates do not address the security issues as effectively as TLS-OBC, making the latter a more comprehensive solution.

This structured and detailed analysis provides a clear and professional overview of the performance and practical considerations of implementing TLS-OBC in a real-world environment.