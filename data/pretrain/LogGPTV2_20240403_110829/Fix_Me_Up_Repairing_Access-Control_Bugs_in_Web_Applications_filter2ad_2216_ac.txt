1
2
3
4
5
6
7
8
9
10
11 ACT ← {(mi, Si)} ∪ ACT
12 }
if (sk ∈ SLICE) {
Si[j + +] = sk
}
if (sk is a callsite s . t . (sk, mi+1) ∈ CC) {
}
BuildACT (mi+1, CC, SLICE)
}
Figure 5: Computing an access-control template (ACT)
5 Finding and Repairing Vulnerabilities
We ﬁrst give a high-level overview of how FIXMEUP ﬁnds
vulnerabilities, repairs them, and validates the repairs, and
then we describe each step in more detail.
FIXMEUP considers all security-sensitive operations in
the program. Recall that each sensitive operation is asso-
ciated with a particular user role (see Section 3.3). For
each operation, FIXMEUP computes all of its calling con-
texts. For each context, it considers all candidate checks,
computes the corresponding access-control template ACT (cid:48),
and compares it with the role’s access-control template
ACTrole. If some context CCtgt is missing the check, its
ACT (cid:48) will not match ACTrole. This context has an access-
control vulnerability and FIXMEUP targets it for repair.
To repair CCtgt, FIXMEUP inserts the code from
ACTrole into the methods of CCtgt. ACTrole contains
the calling context CCsrc of a correct access-control check
and FIXMEUP uses it to guide its interprocedural repair
of CCtgt. FIXMEUP matches CCsrc method by method
against CCtgt. At the last matching method minline, FIX-
MEUP inlines all statements from the methods deeper in
CCsrc than minline into minline. We call this adapting
the ACT to a target context. Adaptation produces a method
map indicating, for each msrc ∈ ACTrole, the method
mtgt ∈ CCtgt where to insert statements from msrc.
For each statement in ACTrole, FIXMEUP inserts state-
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16 }
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28 }
ments from msrc into the corresponding mtgt only if they
are missing from mtgt. In the simplest case, if the vulner-
able context has only the entry method and no code that
corresponds to any code in ACTrole, FIXMEUP inserts the
entire template into the entry method.
A repair can potentially introduce two types of undesired
semantic changes to the target code. First, statements al-
ready present in the target may affect statements inserted
from the template. We call these unintended changes to
the inserted policy. Second, inserted statements may affect
statements already present in the target. We call these unin-
tended changes to the program. Because our analysis keeps
track of all data and control dependences and because our
repair procedure carefully renames all variables, we prevent
most of these errors. As we show in Section 6, FIXMEUP
detects when template statements with side effects are al-
ready present in the program and does not insert them.
To validate that there are no unintended changes to an
inserted policy, FIXMEUP computes a fresh ACT from the
repaired code and compares it with the adapted ACT . If
they match, FIXMEUP gives the repaired code to the devel-
oper; otherwise, it issues a warning.
In general,
5.1 Matching templates
To ﬁnd vulnerabilities and validate repairs, FIXMEUP
matches templates.
it is impossible to de-
cide whether two arbitrary code sequences are semantically
equivalent. Matching templates is tractable, however, be-
cause ACTs of real-world applications are loop-free and
consist of a small number of assignments, method invoca-
tions, and conditional statements. Furthermore, when de-
velopers implement the same access-control policy in mul-
tiple places in the program, they tend to use structurally
identical code which simpliﬁes the matching process.
Figure 6 shows our template matching algorithm and the
statement matching algorithm that it uses. The latter algo-
rithm compares statements based on their data and control
dependences, and therefore the syntactic order of statements
does not matter. Matching is conservative: two matching
templates are guaranteed to implement the same logic.
Let ACTx and ACTy be two templates. For every
sx ∈ ACTx, FIXMEUP determines if there exists only one
matching statement sy ∈ ACTy, and vice versa. The de-
velopers may use different names for equivalent variables
in different contexts, thus syntactic equivalence is too strict.
Given statements sx ∈ ACTx and sy ∈ ACTy, FIXMEUP
ﬁrst checks whether the abstract syntax tree structures and
operations of sx and sy are equivalent. If so, sx and sy are
syntactically isomorphic, but can still compute different re-
sults. FIXMEUP next considers the data dependences of sx
and sy. If the dependences also match, FIXMEUP declares
that the statements match. Table 1 shows the matching rules
when neither statement has any dependences.
isMatchingACT (ACTx, ACTy) {
// INPUT: two ACTs to be compared
// OUTPUT: true if ACTx and ACTy match, false otherwise
if (|ACTx| (cid:54)= |ACTy|) return false;
V arM ap ← φ
StatementM ap ← φ
for( sx ∈ ACTx in order ) {
StatementM ap ← StatementM ap ∪ {(sx, sy)}
if ( ∃only one (sx, sy) s.t. sy ∈ ACTy and isM atching(sx, sy) ) {
} else {
}
return false ;
}
return true;
isMatching (ssrc, stgt) {
// INPUT: statements ssrc ∈ ACT , stgt ∈ mtgt to be compared
// OUTPUT: true if ssrc and stgt match, false otherwise
V arM ap: updated variable mappings
if ( ∃(ssrc, stgt) ∈ StatementM ap ) return true
if (AST structures of ssrc and stgt are equivalent) {
msrc ←method containing ssrc ∈ ACT
DDsrc ← {(ssrc, d) s.t. ssrc is data−dependent on d ∈ msrc}
DDtgt ← {(stgt, d) s.t. stgt is data−dependent on d ∈ mtgt}
if (DDsrc ≡ φ and DDtgt ≡ φ) {
// no data dependences
if ( ssrc and stgt are one of the types described in Table 1 ) {
if (ssrc = “vx = Cx” and stgt = “vy = Cy” and
constants Cx and Cy are equal) {
V arM ap = V arM ap ∪ {(vx, vy)}
}
return true
} else return false
} else if (|DDsrc| == |DDtgt|) {
if (∀(ssrc, dx) ∈ DDsrc, ∃ (stgt, dy) ∈ DDtgt and
if (ssrc = “vx = . . . ” and stgt = “vy = . . . ”) {
V arM ap = V arM ap ∪ {(vx, vy)}
}
return true
(dx, dy) ∈ StatementM ap) {
} } }
return false
Figure 6: Matching access-control templates
5.2 Finding access-control vulnerabilities
For each security-sensitive operation (sso), FIXMEUP
computes the tree of all calling contexts in which it may
execute by (1) identifying all methods that may directly in-
voke sso and (2) performing a backward, depth-ﬁrst pass
over the call graph from each such method to all possible
program entries. FIXMEUP adds each method to the call-
ing context once, ignoring cyclic contexts, because it only
needs to verify that the access-control policy is enforced
once before sso is executed.
For each calling context CC in which sso may be
executed, FIXMEUP ﬁrst ﬁnds candidate access-control
checks. A conditional statement b is a candidate check if it
(1) controls whether sso executes or not, and (2) is syntacti-
cally equivalent to the correct check given by the ACTrole.
For each such b, FIXMEUP computes its slice, converts it
into ACTb using the algorithms in Figure 5, and checks
methoda(C0, ..., Ci)
localvara = C ∈ methodi
globalvara = C ∈ methodi
0, ..., C(cid:48)
i)
methodb(C(cid:48)
localvarb = C(cid:48) ∈ methodk
globalvarb = C(cid:48) ∈ methodk Match if (1) globalvara = globalvarb and (2) constants C = C(cid:48)
Match if (1) methoda = methodb and (2) all constants Ck = C(cid:48)
Match if (1) methodi = methodk or both methods are entry methods
and (2) constants C = C(cid:48)
k
Table 1: Matching statements without dependences
whether ACTb matches ACTrole.
If so, this context al-
ready implements correct access-control logic. Otherwise,
if there are no candidate checks in the context or if none of
the checks match the correct check, the context is vulnera-
ble and FIXMEUP performs the repair.
DoRepair (ACT , CCtgt) {
1
2
3
// INPUT
ACT : access−control template speciﬁcation
CCtgt = {(cs(cid:48)
1) . . . (sso, m(cid:48)
vulnerable security−sensitive operation sso
0), (cs(cid:48)
1, m(cid:48)
2, m(cid:48)
n)}: calling context of the
// OUTPUT
StatementM ap ← φ
V arM ap ← φ
RepairedAST : repaired program AST
M atchCount: number of ACT statements already in the target
4
5
6
7
8 M ethodM ap ← φ // Initialize maps between ACT and target context
9
10
11
12
13
14
15
16
17
18
19 }
ACTadapted = AdaptACT (ACT, CCtgt)
(RepairedAST, InsertedCheck, M atchCount) ←
(ACTadapted, InsertedCheck)) {
if ( ValidateRepair
}
return warning
return (RepairedAST, M atchCount)
ApplyACT (ACTadapted, CCtgt)
ValidateRepair (ACTorig, InsertedCheck) {
ACTorig: applied access−control template
InsertedCheck: inserted access−control check
// INPUT
// OUTPUT:
true if extracted ACT from the repaired code matches ACTorig
SEEDS ← {InsertedCheck, exit branch of InsertedCheck}
newSLICE ← doSlicing (SEEDS)
newCC ← calling context of InsertedCheck
ACTrepair ← GetACT (newSLICE, newCC)
return isMatchingACT (ACTorig, ACTrepair)
1
2
3
4
5
6
7
8
9
10
11
12 }
Figure 7: Repairing vulnerable code and validating the re-
pair
5.3 Applying the template
Formally, CCsrc = {(cs1, m0) . . . (check, mn)}, CCtgt =
i+1 ∈ m(cid:48)
{(cs(cid:48)
i
are the call sites of mi+1, m(cid:48)
i+1 respectively. For simplicity,
we omit the subscript from ACTrole.
l)}, where csi+1 ∈ mi, cs(cid:48)
0) . . . (sso, m(cid:48)
1, m(cid:48)
FIXMEUP uses DoRepair in Figure 7 to carry out a re-
pair. It starts by adapting ACT to the vulnerable calling
context CCtgt.
If CCtgt already invokes some or all of
the methods in ACT , we do not want to repeat these calls
because the policy speciﬁes that they should be invoked
only once in a particular order. After eliminating redun-
dant method invocations, FIXMEUP essentially inlines the
remaining logic from ACT into ACTadapted.
Formally,
the algorithm ﬁnds common method invo-
cations in CCsrc and CCtgt by computing the deepest
minline ∈ CCsrc such that for all i ≤ inline mi matches
m(cid:48)
i. For i = 0, m0 and m(cid:48)
0 match if they are both entry
methods. For i ≥ 1, mi and m(cid:48)
i match if they are invo-
cations of exactly the same method. The ﬁrst for loop in
AdaptACT from Figure 8 performs this process.
i), including minline, in M ethodM ap.
In the simplest case, the entry m(cid:48)
The algorithm then adapts ACT to CCtgt by inlining
the remaining statements—those from the methods deeper
than minline in ACT —into minline. The second for loop
in AdaptACT from Figure 8 performs this process and pro-
duces ACTadapted. While matching methods and inlining
statements, FIXMEUP records all matching method pairs
(mi, m(cid:48)
0 ∈ CCtgt is the only
method matching minline = m0. In this case, FIXMEUP
inlines every statement in ACT below m0 and produces a
ﬂattened ACTadapted.
Otherwise, consider the longest matching method se-
quence (m0 . . . minline) and (m(cid:48)
inline) in CCsrc
and CCtgt, respectively. For 1 ≤ i ≤ inline−1, mi and m(cid:48)
i
are exactly the same; only m0 and minline are distinct from
m(cid:48)
0 and m(cid:48)
inline, respectively. AdaptACT stores the (m0,
0) and (minline,m(cid:48)
m(cid:48)
FIXMEUP uses the resulting template ACTadapted to re-
pair the target context using the ApplyACT algorithm in Fig-
ure 9. This algorithm respects the statement order, control
dependences, and data dependences in the template. Fur-
thermore, it avoids duplicating statements that are already
present in the target methods.
inline) mappings in M ethodM ap.
0 . . . m(cid:48)
The algorithm iterates msrc over m0 and minline in
ACTadapted because, by construction, these are the only
methods that differ between the template and the target. It
ﬁrst initializes the insertion point iptgt in mtgt correspond-
ing to msrc in M ethodM ap. The algorithm only inserts
statements between the beginning of mtgt and the sensi-
tive operation sso, or—if mtgt calls other methods to reach
sso—the call site of the next method in the calling context
of sso. Intuitively, the algorithm only considers potential
insertion points and matching statements that precede sso.
Before FIXMEUP inserts a statement s, it checks if there
AdaptACT (ACTsrc, CCtgt) {
ApplyACT (ACT, CCtgt) {
// Adapt ACTsrc to the target context CCtgt
ACT ←clone ACTsrc
CCsrc = ACT.CCsrc
l ← 0
for ( i = 0;
i < |CCsrc|; i++ ) {
iterate from the entry to the bottom method in CCsrc
//
mi ← ith method in CCsrc
mtgt ← ith method in CCtgt
if ( mi and mtgt are entries or mi == mtgt ) {
M ethodM ap ← M ethodM ap ∪ {(mi, mtgt)}
l ← i
} else break;
}
minline ← lth method in CCtgt
for ( k = l+1 ; k < |CCsrc|; k++ ) {
inline method mk from CCsrc into minline in ACT
M ethodM ap ← M ethodM ap ∪ {(mk, minline)}
}
return ACT
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22 }
Figure 8: Adapting ACT to a particular calling context
and false branches of s(cid:48).
already exists a matching statement s(cid:48) ∈ mtgt. If so, FIX-
MEUP adds s and s(cid:48) to StatementM ap, sets the current
insertion point iptgt to s(cid:48), and moves on to the next state-
ment. Otherwise, it inserts s as follows:
1. Transform s into s(cid:48) by renaming variables.
2. If s is a conditional, insert empty statements on the true
3. If iptgt has not been set yet, insert s(cid:48) at the top of mtgt.