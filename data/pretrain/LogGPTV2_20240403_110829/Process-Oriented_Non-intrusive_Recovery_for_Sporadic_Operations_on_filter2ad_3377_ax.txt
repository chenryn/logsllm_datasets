RP 2 
50 
50 
50 
50 
3)  Satisfying Recovery Requirement R6 
Due  to  the  design  of  our  recovery  method,  with  its  dynamic  plan  generation,  false  positives 
from error detection will not cause unnecessary recovery actions. 
G.  Recovery for Recovery Itself  
1)  Experimental Procedure 
To test POD-Recovery’s behaviour when errors occur during the execution of the recovery plan, 
I  performed  the  scale-down  operation,  injected  faults  into  each  determined  recovery  point  to 
trigger  POD-Recovery,  waited  for  the  selected  recovery  action  to  execute,  and  then  manually 
132 
injected additional faults into the recovery action to trigger the “recovery of recovery” block. I 
performed  30  runs  of  this test  of  “recovery  for  recovery  itself”  for  each  recovery  point  of  the 
scale-down operation. 
2)  Experimental Results 
Table 44 shows the recovery time of “recovery for recovery” on the scale-down operation. The 
relative standard deviation is at most 2.2%. 
Table 44.  Recovery Time of “Recovery for Recovery” 
Recovery 
Point 
Process Step 
Errors 
Recovery 
Point 1 
Step 1. Deregister 
12 instances from 
the elastic load 
balancer 
3  instances 
still in ELB  
Selected 
Recovery 
Action(Pareto 
Set) 
Deregister 3 
instances from 
the elastic load 
balancer; 
Time of 
Recovery 
for 
Recovery 
(Pareto 
Set) 
2.93 s 
Selected 
Recovery 
Action(User 
Constraints) 
Deregister 12 
instances from 
the elastic load 
balancer; 
Time of 
Recovery for 
Recovery 
(User 
Constraints) 
4.98 s 
(Reparation) 
 (Direct Redo) 
Recovery 
Point 2 
Step 2. Decrease 
auto scaling 
group’s desired 
capacity from 24 
to 12 
Step 3. Wait for 
the auto scaling 
group to terminate 
12 instances. 
3  instances 
not 
terminated 
Terminate 3 
instances again; 
(Reparation) 
55.76 s 
Set auto scaling 
group’s desired 
capacity to be 
12; 
Wait for the 
auto scaling 
group to 
terminate 3 
instances; 
 (Direct Redo) 
31.55 s 
3)  Satisfying Recovery Requirement R7 
We can see that the maximum recovery time of “recovery for recovery” is 55.76 seconds. Hence, 
the time for the original recovery and the “recovery for recovery” in total is much less than the 
specified  time  gap  between  two  adjacent  recovery  points.  Thus,  the  requirement  of  “recovery 
for recovery” is achieved by POD-Recovery. 
8.5  Case Study 5-Recovery for Migration Operation on Cloud 
In  this  section,  we  present  the  evaluation  results  of  POD-Recovery  by  using  the  migration 
operation on cloud as the case study. The purposes of this experiment are three-fold: 1) showing 
the result of recovery points determination for migration; 2) presenting the workload of resource 
state  management  for  migration;  3)  demonstrating  POD-Recovery’s  capability  of  satisfying 
recovery  requirements  using  migration.  The  experimental  environment  is  described  in  Fig.  26 
above. 
133 
8.5.1  Recovery Points Determination 
The migration operation has 10 steps: 1) stop the old web instance in the old availability zone; 2) 
create an AMI from the old web instance; 3) launch a new web instance in the new availability 
zone, using the AMI of the old web instance; 4) reassign the IP of old web instance to the new 
web  instance;  5)  terminate  the  old  web  instance  in  the  old  availability  zone;  steps  6)  –  10): 
repeat the above for the database instance. Fig. 39 shows the sections resulting from recovery 
points  at  different  levels  of  granularity.  First,  Fig.  39(a)  is  obtained  by  applying  Recovery 
Actions Identifiable to the steps of migration operation. Fig. 39(b) combines some sections with 
low failure rates. The recovery points are determined to be after steps 1, 2, 4, 5, 6, 7, 9, and 10, 
based on our procedure. 
Fig. 39.  Determining Recovery Points for Migration Operation. 
8.5.2  Workload of Resource Space Determination 
The  determined  resource  space  contains  four  resource  types:  Instance  (i.e.  VM),  Availability 
Zone  (AZ),  Elastic  IP  (EIP),  and  Amazon  Machine  Image  (AMI).  Each  resource  type  has 
attributes  (e.g.  instances  have  an  instance  id,  instance  type,  machine  image,  etc.).  The 
134 
dependency relationships among those resources are: 1)  AZ contains any resources; 2) an EIP 
attaches  with  an  instance;  3)  an  EIP  may  not  attach  with  any  instance.  The  workload  of 
determining  resource  space  for  migration  operation  is  shown  in  Fig.  40,  which  shows  the 
execution  time  of  the  resource  space  determination  algorithm  based  on  30  times  of  runs.  The 
average  execution  time  is  calculated  to  be  65.40ms,  and  the  relative  standard  deviation  is 
calculated to be 7.19%. The value of the 75th percentile point (75% percentile) is also calculated, 
which is 68ms. 
Fig. 40.  Workload of Resource Space Determination for Migration Operation. 
8.5.3  Workload of Expected Resource State Templates Generation 
The workload of generating the expected resource state templates for the migration operation is 
shown  in  Fig.  41,  which  shows  the  execution  time  of  expected  resource  state  templates 
generation algorithm based on 30 times of runs. The average execution time is calculated to be 
70.27ms,  and  the  relative  standard  deviation  is  calculated  to  be  5.08%.  The  value  of  the  75th 
percentile point (75% percentile) is also calculated, which is 72.75ms. 
Fig. 41.  Workload of Expected Resource State Templates Generation for Migration Operation. 
8.5.4  Recovery Satisfying Requirements 
POD-Recovery  is  designed  to  achieve  the  goal  of  satisfying  all  of  the  eight  recovery 
requirements  described  in  section  3.5.  Therefore,  experimental  evaluations  are  required  to 
135 
justify  POD-Recovery’s  capability  of  satisfying  all  the  recovery  requirement  The  experiments 
conducted below are constructed in such a way that it can demonstrate how POD-Recovery is 
able to fulfil each of the recovery requirements using the migration operation.  
A.  Runtime Recovery (Satisfying Recovery Requirement R1) 
As  should  be  clear  from  the  descriptions  in  chapters  4-7,  our  method  is  inherently  a  runtime 
recovery solution.  
B.  Recovery Satisfying RTO 
1)  Experimental Procedure 
This  recovery  requirement  concerns  the  time  the  recovery  takes  for  the  system  to  go  to  a 
consistent state. We therefore measure recovery time by performing the migration operation on 
a  cloud  application.  The  software  running  in  the  cloud  instances  is  turned  off  during  the 
migration operation. We used our own proprietary fault injection tool to inject faults for each of 
the  eight  determined  recovery  points  in  the  migration  operation,  automatically  determined  the 
applicable  recovery  patterns  based  on  the  applicable  recovery  patterns  filtering  method 
described in section 7.3, and performed recovery using the selected acceptable recovery action 
based on each of the two recovery action selection methods. The selected recovery action by the 
first selection  method is the  optimal  one; the selected  recovery  action  by  the  second  selection 
method  is  not  necessarily  the  optimal  one,  but  it  is  an  acceptable  one.  Therefore,  the  selected 
recovery actions by both of these two optimization methods are both acceptable ones. The faults 
injected  are  described  in  Table  45.  The  selection  of  injected  faults  is  based  on  our  interviews 
with industry and failure reports, and hence representative. The recovery time is calculated by 
summing up the execution time of each function in the recovery action. We ran the experiment 
30 times, measuring the recovery time.  
Table 45.  Faults injected for Migration Operation 
Recovery Point 
Fault injected 
Recovery Point 1 (After Step 1) 
Old web instance not stopped  
Recovery Point 2 (After Step 2) 
Recovery Point 3 (After Step 4) 
AMI not created 
New web instance not launched 
Recovery Point 4 (After Step 5) 
Old web instance not terminated 
Recovery Point 5 (After Step 6) 
Old DB instance not stopped  
Recovery Point 6 (After Step 7) 
AMI not created 
Recovery Point 7 (After Step 9) 
New DB instance not launched 
Recovery Point 8 (After Step 10) 
Old DB instance not terminated 
136 
2)  Experimental Results 
Table  46 shows  the  recovery  time  of  the  recovery  for  the  migration  operation. Recovery  time 
here  refers  to  exclusively  the  time  for  executing  the  recovery  plan.  The  recovery  time  in  the 
table represents the average value of the recovery time for 30 runs. The highest relative standard 
deviation is 1.9%. For each recovery point, the execution time of the recovery action selected by 
the Pareto set search based optimization method is no greater than the other applicable recovery 
actions;  the  execution  time  of  the  selected  recovery  action  by  the  user  constraints  based 
optimization  method  is  not  necessarily  less  than  all  the  other  ones,  but  it  is  within  the  time 
constraint set by business stakeholders. 
Table 46.  Recovery Time for Migration 
Legends 
Recovery Pattern ID 
RP1 
RP2 
RP3 
RP4 
Recovery Pattern 
Compensated Undo & Redo 
Compensated Undo & Alternative 
Rewind & Replay 
Rewind & Alternative 
Recovery Pattern ID 
RP5 
RP6 
RP7 
RP8 
Recovery Pattern 
Reparation 
Direct Redo 
Direct Alternative 
Farther Undo & Redo 
Recover
y Point 
Process Step 
Errors 
Applicable 
Recovery 
Patterns 
Selected 
Recovery 
Action(Pareto 
Set) 
Recovery 
Time 
(Pareto 
Set) 
Selected 
Recovery 
Action(User 
Constraints) 
Recovery 
Time (User 
Constraints) 
Recovery 
Point 1 
Step 1. Stop the 
old web 
instance in the 
old availability 
zone 
Old  web 
instance 
not 
stopped  
RP1, RP3, 
RP5, RP6 
Stop the old 
web instance 
again; 
(Direct Redo) 
32.78 s 
Stop the old 
web instance; 
(Reparation) 
29.99 s 
Recovery 
Point 2 
Step 2. Create 
an AMI from 
the old web 
instance 
AMI  not 
created 
RP1, RP3, 
RP5, RP6, 
RP8 
Create an AMI 
from the old 
web instance; 
(Direct Redo) 
120.66 s 
Recovery 
Point 3 
Step 3. Launch 
a new web 