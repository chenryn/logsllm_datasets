ECMO Pointers are important to peripheral transplantation. In
this section, we evaluate the success rate of identifying ECMO
Pointers. Among all the 815 Linux kernels, there are 20 different
kernel versions.
Table 1 lists the required ECMO Pointers, the strategies we
used, and the Linux kernel versions that these ECMO Pointers
are used. In total, we need to identify 24 different ECMO Point-
ers for all the 20 Linux kernel versions. Among them, two (i.e.,
mach_desc->init_time, and mach_desc->init_irq ) are data point-
ers. Identifying the data pointers is rather more difficult than the
function pointers as we need to identify symbols in each function
Session 3B: Operating Systems CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea741Table 1: The ECMO Pointers, identification strategy, and the
Linux kernel versions that the ECMO pointers used by.
Forward Pointers
mach_desc->init_irq
mach_desc->init_time
Backward Pointers
irq_set_chip_and_handler_name
irq_set_chip_data
handle_level_irq
__handle_domain_irq
setup_machine_fdt
set_handle_irq
irq_domain_add_simple
irq_create_mapping
of_find_node_by_path
setup_irq
clockevents_config_and_register
irq_domain_xlate_onetwocell
clockevent_delta2ns
clockevents_register_device
set_irq_flags
set_irq_chip
irq_to_desc
__do_div64
platform_device_register
lookup_machine_type
_set_irq_handler
irq_modify_status
Strategy
Kernel Version
I
I
ALL
ALL
Strategy
Kernel Version
III
III
II
III
I
III
III
I
II
I
III
I
I
II
I
I
II
II
I
I
I
III
3.18.x/4.4.x/4.14.x
ALL
ALL
3.18.x/4.4.x/4.14.x
3.18.x/4.4.x/4.14.x
3.18.x/4.4.x/4.14.x
3.18.x/4.4.x/4.14.x
3.18.x/4.4.x/4.14.x
3.18.x/4.4.x/4.14.x
ALL
3.18.x/4.4.x/4.14.x
3.18.x/4.4.x/4.14.x
2.6.x
2.6.x
2.6.x/3.18.x
2.6.x
2.6.x
2.6.x
ALL
2.6.x
2.6.x
4.4.x/4.14.x
Table 2: The decompressed Linux kernel size and the disas-
sembled function numbers for our dataset.
Maximum Minimum
Mean
Median
Size (Bytes)
Functions (#)
8,526,240
4,134,392
7,297,977
8,478,848
48,412
18,455
29,910
23,872
and infer the right ones. Fortunately, these two data pointers are the
return values of setup_machine_fdt and lookup_machine_type, re-
spectively. According to the ARM calling convention, the return
value is saved in register R0. In this case, we can identify these two
data pointers by identifying function pointers setup_machine_fdt
and lookup_machine_type.
Identifying ECMO Pointers requires us to disassemble the de-
compressed Linux kernel. Table 2 lists the information of these
kernels. The decompressed Linux kernel is about 730k bytes on
average, with thousands of functions. Among these functions, we
successfully identify the required ECMO Pointers for all Linux
kernels.
Answer to RQ1: ECMO can identify all the required ECMO
Pointers from thousands of functions inside decompressed
Linux kernel.
5.3 Rehost Linux Kernels (RQ2)
In this section, we evaluate the capabilities of ECMO on rehosting
the Linux kernels. During this process, we use our system to boot
the kernel and provide a root file system (rootfs) in the format of
ramfs. We use our own rootfs because we can include different
benchmark applications into the rootfs to conduct security analysis.
For example, we include PoCs of kernel exploits to conduct the root
cause analysis (Section 5.5). Furthermore, we can include different
400
350
300
250
200
150
100
50
0
355
303
93
93
76
76
72
24
76
76
48
48
Netgear
Asus Pogoplug Buffalo Linksys Others
Transplanted
Rehost
Figure 13: Supported Vendors of OpenWRT Linux Kernels.
peripheral drivers to support more peripherals. The rootfs extracted
from the firmware image can also be used.
Firmware Images from Third Party Projects. Table 3 shows the
5.3.1
overall result and the success rate of peripheral transplantation and
kernel rehosting for OpenWRT. We define the success of periph-
eral transplantation as that the transplanted IC, timer and UART
devices function well in the kernel. If the rehosted kernel enters
into the user-space and spawns a shell, we treat it as a successful
kernel rehosting. In total, we download 902 firmware images from
OpenWRT. However, four images’ formats are not supported by
Binwalk and the Linux kernel cannot be extracted (if there is). For
the left 898 firmware images, 720 of them contain Linux kernels
while the left ones contain only user-level applications. The 720
ones will be evaluated by ECMO.
Linux Kernel Versions The kernels in the 720 OpenWRT firm-
ware images consist of 19 different kernel versions. Our evaluation
shows that we can transplant the peripherals for all the 720 Linux
kernels. However, some Linux kernels cannot be booted. This is
because they cannot recognize our pre-built root file system (in
the ramfs file format) as the support of ramfs is not enabled when
being built. Without the root file system, we cannot launch the
shell. However, all of them enter into the function (i.e., init_post)
to execute the init program. In summary, among 720 kernels, our
system can rehost 624 of them, which is shown in Table 3.
Vendors and Device Models As the OpenWRT project supports
devices from multiple vendors, we calculate the supported vendors
and there are 24 different vendors. Figure 13 shows the result of
the top five vendors, i.e., Netgear, Asus, Pogoplug, Buffalo, and
Linksys, in the OpenWRT dataset. Among them, Pogoplug has a
relatively low success rate of rehosting. That’s because most kernels
from that vendor cannot recognize our pre-built root file system.
We also count the number of device models for the successfully
rehosted Linux kernels. In total, 32 device models are identified.
Firmware Images from Official Vendors. Besides third-party
5.3.2
firmware images, we also apply ECMO on the official images re-
leased by Netgear. We collect the firmware images for five popular
devices, including R6250, R6300v2, R6400, R6700, R6900, from the
vendor’s website [12]. In total, we manage to collect 95 firmware
images, and the latest one is released on 2020-09-30. Table 4 shows
the result. We noticed that all the Linux kernels of these devices are
in the version 2.6.36. We can successfully transplant the peripherals
to all the 95 different firmware images. Among them, we can launch
Session 3B: Operating Systems CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea742Table 3: The overall result of ECMO on rehosting the Linux kernel of OpenWRT. "Downloaded Images" represents the number
of downloaded images. "Format Supported" represents the number of images whose formats are supported by firmware ex-
traction tool (i.e., Binwalk). "Kernel Extracted" represents the number of images extracted from the downloaded image, which
are rehosted by ECMO. "Peripherals Transplanted" represents the number of the images that peripheral can be transplanted
successfully (e.g., IC can handler the interrupt well). "Ramfs are not Mounted" represents the number of images that cannot
mount the given ramfs. "Shell" represents the images that we can rehost and spawn a shell. Success Rate of Transplantation =
(Peripherals Transplanted)/(Images); Success Rate of Rehosting = (Shell)/(Images).
Kernel Version
Downloaded Images
Format Supported
Kernel Extracted
Peripherals
Success Rate of
Ramfs are
Success Rate of
Shell
Transplanted
Transplantation
not Mounted
Rehosting
3.18.20
3.18.23
4.4.42
4.4.47
4.4.50
4.4.61
4.4.71
4.4.89
4.4.92
4.4.140
4.4.153
4.4.182
4.14.54
4.14.63
4.14.95
4.14.128
4.14.131
4.14.151
4.14.162
Overall
23
29
37
37
45
39
40
40
41
41
40
40
54
66
66
66
66
66
66
23
29
37
37
45
39
40
40
41
41
38
38
54
66
66
66
66
66
66
21
29
37
37
45
37
38
38
38
38
38
38
42
42
42
42
42
42
42
21
29
37
37
45
37
38
38
38
38
38
38
42
42
42
42
42
42
42
902
898
720
720
100%
100%
100%
100%
100%
100%
100%
100%
100%
100%
100%
100%
100%
100%
100%
100%
100%
100%