Shell.Explorer.1 OLE对象（CLSID
{EAB22AC3-30C1-11CF-A7EB-0000C05BAE0B}）常用于嵌入式Windows资源管理器或嵌入式Internet
Explorer。我们可以将这个OLE对象嵌入Office文档中，并作为持久对象保存在相应的文档中。对于持久化的Shell.Explorer.1对象来说，会使用一种专有格式，并且，我们可以在偏移量76（0x4C）处可以看到一个熟悉的结构。并且，位于该偏移处的结构看起来好像是ShellLink（LNK）结构[[MS-SHLLINK](https://msdn.microsoft.com/en-us/library/dd871305.aspx "MS-SHLLINK")]。
在初始化（加载）Shell.Exporer.1对象时，ShellLink结构将被解析为常规LNK文件。然后，该对象会从ShellLink获取ID列表，并使用它来导航（浏览）到提供的文件、（shell）文件夹或网站。
图1：来自ShellLink结构的ID列表被传递给CWebBrowserOC::BrowseObject()函数
**嵌入式Windows资源管理器**
* * *
在提供文件夹路径时，该对象的行为类似于Windows资源管理器。利用它不仅可以浏览文件或文件夹，甚至可以通过双击来执行文件。攻击者可能会滥用该功能来嵌入Windows资源管理器，以便打开包含可执行文件的远程共享。如果攻击者可以说服受害者双击处于他们控制之下的文件，就可以通过远程共享运行可执行代码。
这种攻击手法貌似很难实现。首先，OLE对象需要单击才能激活，其次，用户需要双击OLE对象才能实际获得可用的Windows资源管理器视图。最后，用户还需要双击Windows资源管理器视图中的文件才行。
在管理员限制浏览某些文件夹或驱动器的情况下，使用嵌入式Windows资源管理器对象会很方便。例如，如果对C：驱动器的访问受到限制的话，本地用户可以使用包含嵌入式Windows资源管理器的Office文档来绕过该限制。此外，该对象还可用于窃取NetNTLM哈希值，但由于这对于Office文档来说并非难事，因此，使用点击激活的OLE对象并没有什么意义。
图2：使用嵌入式Windows资源管理器浏览本地计算机
**Internet Explorer**
* * *
当Shell.Explorer.1用于嵌入式Internet
Explorer时，事情会变得更有趣。除了可以在文档中嵌入Web浏览器之外，它还能用来浏览本地计算机上的文件，以及浏览远程位置（共享文件夹和网站）上的文件。当然，如果没有用户交互的话，这些都是不可能的。此外，单击激活也适用于该模式，单击该对象将触发Internet
Explorer的文件下载功能，这意味着将向用户显示“文件下载”对话框。如果用户单击“运行”或“打开”（取决于文件格式）按钮的话，就会执行相应的文件。
图3：单击嵌入式Internet Explorer对象后所显示的“文件下载”对话框