devices are not malicious in the sense that their hardware and
ﬁrmware do not contain Trojan-Horse circuits or microcode
that would violate the trusted-path isolation in response to an
adversary’s surreptitious commands. Instead, we assume that
devices operate exactly following their speciﬁcations and do
not perform unintended operations; e.g., intercept bus trafﬁc
that is not destinated to them, remain awake when receiving a
“sleep” command, or write data to a memory address that is
not speciﬁed in DMA commands. Such attacks are outside the
scope of the present work.
3 System Overview
the
Our trusted-path system comprises four components:
program endpoint (PE),
the
the device endpoint(s) (DE),
communication-path, and a hypervisor (HV). Figure 2 illus-
trates the architecture of our system and the trusted-path iso-
lation from the untrusted OS, applications, and devices.
618
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:50:11 UTC from IEEE Xplore.  Restrictions apply. 
plex abstractions with richer functionality than our hypervisor.
For example, seL4 supports full-ﬂedged threads and interpro-
cess communication primitives (as opposed to simple locks),
memory allocation (as opposed to mere memory partitioning),
and capability-based object addressing (as opposed to merely
address space separation via paging). In fact, the formal ver-
iﬁcation of address-space separation of ShadowVisor code (a
shadow-page-table version of TrustVisor [43]) has already been
achieved [24].
Our trusted path is user-veriﬁable since it allows a human
to launch the hypervisor and PE on a local computer system
and verify their correct conﬁguration and state. We illustrate
in Section 8 how to securely perform trusted-path veriﬁcation
for one or more trusted paths, using a simple handheld device
that stores no secrets to verify attestations [43] and to signal the
user that a trusted channel is in place.
3.2 Program Endpoint
Our trusted path design calls for the implementation of the de-
vice drivers of the DEs within the program endpoint for three
assurance reasons. First, our goal is to produce a small and
simple hypervisor, which can be veriﬁed with a signiﬁcant level
of assurance; i.e., assurance based on formal veriﬁcation tech-
niques. Including all device drivers would enlarge the hyper-
visor beyond the point where signiﬁcant assurance could be
obtained. Second, placing the DE’s driver within a program
endpoint is a natural choice: DE driver isolation can leverage
all the mechanisms that protect the PE code and data from ex-
ternal attacks. Third, trusted-path device endpoints are dedi-
cated devices for a speciﬁc application and/or user interface.
Consequently, the DE device drivers are typically simpler than
their shared-device versions. That is, program endpoints have
the freedom to customize the DE driver for their speciﬁc needs
(e.g., some PEs clearly do not need full-ﬂedged drivers, as il-
lustrated in Section 9). In particular, they can tailor the driver’s
functions to those strictly necessary and minimize its codebase
to obtain higher assurance of correct operation.
The alternative of placing a DE device driver in a separately
isolated domain in user or OS space would have two main-
tainability advantages over our choice. First, it would allow
the driver to be updated or even replaced with a different copy
without having to modify application code. Second, it would
remove the need to maintain two versions of a device driver
(one within the commodity OS and the other within the PE).
However, this alternative would have at least two security
disadvantages. First, an additional protected channel would be-
come necessary between the isolated DE driver and separately-
isolated PE, and an additional protection boundary would have
to be crossed and checked—not just the one between the hy-
pervisor HV and PE. Second, driver isolation in separate user
or system space would require extra mechanisms in addition to
those for PE isolation. For example, an additional protection
mechanism would become necessary to control the access of
application PEs to isolated drivers in user space. Furthermore,
serious re-engineering of a commodity OS/hypervisor would
become necessary [14, 36], which would run against our stated
goals. In balance, we picked the “DE driver-in-PE” model since
security and ease of commodity platform integration have been
our overriding concerns.
The key challenge for developing a program endpoint is to
isolate the DE driver from the untrusted OS. Since DE drivers
cannot rely on the OS Application Program Interfaces (API) for
I/O services, they must be modiﬁed from the commodity device
driver to eliminate API dependencies. In Section 7, we analyze
this design and offer guidelines for device driver development
for our trusted-path system.
4 Device-Isolation Challenges
As suggested in the introduction, both device-driver [14, 47]
and program isolation [6, 43, 44, 57] are insufﬁcient for trusted-
path protection from a compromised OS. The fundamental rea-
son is that, aside from the address space containing the device
driver and program endpoint, there is still substantial shared
device-conﬁguration state on the commodity platform. Protect-
ing individual device conﬁgurations within the “shared device-
conﬁguration state” is necessary to provide device isolation for
a trusted path. We identify three categories of “shared state”
on current commodity platforms, and propose corresponding
protection mechanisms for our hypervisor design.
I/O Port Space. All devices on commodity x86 platforms
share the same I/O port space. The I/O port assigned to a partic-
ular device can be dynamically conﬁgured by system software.
If that software is a compromised OS, the I/O port(s) of one
device can be intentionally conﬁgured to conﬂict with those of
other devices. Thus, unmonitored I/O port reconﬁguration of
any device on the platform may breach the I/O port access iso-
lation of a device endpoint. We present isolation mechanisms
for device I/O port access in Section 5.1.
Physical Memory Space.
Devices’ MMIO memory re-
gions share the same physical address space. We present a
new attack—the MMIO mapping attack—which breaches de-
vice memory isolation. This attack cannot be solved by any
current mechanism for preventing unauthorized CPU access to
memory (e.g., AMD Nested Page Table (NPT) [3]) or for pre-
venting unauthorized DMA (e.g., Intel VT-D [34]). No existing
trusted-path solutions (e.g., [11, 22, 56]) prevent this attack.
In the MMIO mapping attack, a compromised OS intention-
ally maps the MMIO memory of a manipulated device such that
it overlaps the MMIO or DMA memory region of a DE. As a
result, the data in DE memory becomes exposed to the manip-
ulated device, and hence the compromised OS. For example,
the malicious OS may map the internal transmission buffer of a
network interface card over top of the frame buffer of a graphics
card (where the graphics card is serving as the DE). Hence, the
display output may be directly sent to a remote adversary via
the network. We present our solution to prevent this attack in
Section 5.2, and also propose some architectural changes that
can help simplify our solution considerably (Section 6.3).
619
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:50:11 UTC from IEEE Xplore.  Restrictions apply. 
Interrupt Space.
Software-conﬁgurable interrupts (e.g.,
MSIs, IPIs) share the same interrupt vector space with hard-
ware interrupts. For example, a compromised OS can send out
any spoofed interrupt to any CPU by writing the proper value
to one register in the Local Advanced Programmable Interrupt
Controller (LAPIC) [3]. By modifying a device’s MSI regis-
ters, a compromised OS can manipulate that device to send out
spoofed MSI interrupts to any CPU on the platform. The de-
vice endpoint isolation is violated, and an unsuspecting device
driver may consequently perform incorrect or harmful opera-
tions when receiving spoofed interrupts. In Section 5.4, we dis-
cuss the interrupt spooﬁng attack in detail and present our so-
lutions to prevent it from breaching trusted-path isolation. We
further suggest concrete I/O architectural changes to improve
our defense mechanisms in Sections 6.1 and 6.4.
For completeness, we also discuss two recently-reported I/O
attacks that are caused by DMA request ambiguity [48] and
by unmediated peer-to-peer device communication [49, 59, 60]
(Section 6). We provide defense mechanisms against these at-
tacks, and suggest potential I/O architectural changes that help
simplify our mechanisms.
5 Hypervisor Design
This section illustrates the detailed hypervisor mechanisms
which isolate the trusted-path device state within the shared
device-conﬁguration state. We start with the protection of I/O-
port and device-memory access (Sections 5.1 and 5.2). Then
we describe the fundamental building block of device I/O iso-
lation, namely, the protection of the device conﬁguration space
in Section 5.3. Section 5.4 shows how we leverage the device
I/O isolation to design device interrupt isolation mechanisms.
5.1 Protection of I/O-Port Access
Software programs use the IN/OUT family of CPU instructions
to exchange data with devices’ I/O ports. To control access
to device I/O ports, the hypervisor HV must prevent device-
port-mapping conﬂicts that may be intentionally created by the
compromised OS, and conﬁne the I/O port access from both the
trusted-path program endpoint and the compromised OS.
Preventing Port-mapping Conﬂicts. The compromised OS
can re-map a manipulated device’s I/O ports to overlap those
of the DE. Read/write accesses to those I/O ports have unpre-
dictable results, since all devices that have port overlaps with
the DE will respond to the I/O access. Thus, a manipulated de-
vice (and a compromised OS) can potentially obtain secret data
from the trusted-path, or corrupt the execution of the PE.
To address this problem, the HV should isolate the DE’s I/O
ports from the shared I/O port space of the platform. Specif-
ically, before executing the PE, the HV scans through all I/O
port mappings relevant to the chipset hardware (as mentioned
in Section 2.3) and enumerates all plug-and-play (PnP) devices
to detect their conﬁgured I/O ports. For example, the HV ac-
cesses the PCI conﬁguration space of all PCI devices in the
system, and parses their I/O port settings via the PCI Base Ad-
dress Registers in the conﬁguration space. If any of the above
port settings conﬂict with those of the DE, the HV issues an ex-
ception to the PE. The HV must protect all I/O port mappings in
the device conﬁguration space from modiﬁcation by a compro-
mised OS or manipulated devices, throughout the PE run-time.
We defer the details of scanning and protecting device conﬁgu-
ration space to Section 5.3.
Conﬁning I/O-port Access. The HV should conﬁne the PE
so that it can only access the I/O ports of its associated DE (s).
Speciﬁcally, the HV intercepts and ﬁlters out the port access
requests by the PE to unassociated I/O ports. This is accom-
plished by conﬁguring the I/O port-access-interception bitmap
in the hypervisor control block that describes the PE’s execu-
tion environment (a standard feature of x86 hardware virtual-
ization support [3, 32]).1 Similarly, the HV should also ﬁl-
ter out access to the DE’s ports from the OS running concur-
rently on different CPUs, by conﬁguring the I/O port-access-
interception bitmap for the OS’s execution environment.
5.2 Protection of Device-Memory Access
There are two methods for the PE to interact with the DE via
physical memory space: Memory Mapped I/O (MMIO) and
Direct Memory Access (DMA). The compromised OS and ma-
nipulated devices can breach the isolation of the DE-associated
physical memory regions in three ways: via an MMIO map-
ping attack, through unauthorized CPU-to-memory access, or
via unmediated DMA.
Preventing MMIO Mapping Attacks. The compromised OS
can launch an MMIO mapping attack on the DE’s associated
MMIO and DMA memory regions (recall Section 4), as shown
in the left half of Figure 3. To defend against this attack, the
hypervisor HV must ensure that all MMIO memory ranges used
by the chipset hardware and peripheral devices outside the PE-
DE trusted path are non-overlapping with those of the DE.
Before executing a PE, the HV scans through all MMIO
memory mappings speciﬁed by the chipset hardware, and enu-
merates all PnP devices to discover their MMIO memory
ranges (e.g., check the PCI Base Address Registers in the PCI
conﬁguration space). If overlaps with the DE’s memory ranges
exist, an MMIO mapping attack may be in progress, and the
device isolation property of the trusted path may be violated.
Upon detection, the HV issues an exception to the PE. During
the PE’s execution, the HV must prevent the compromised OS
and manipulated devices from modifying the MMIO memory
mappings of all devices, by protecting the device conﬁguration
space. We elaborate on our mechanisms for protecting device
conﬁgurations in Section 5.3.
Preventing Unauthorized Memory Access.
The compro-
mised OS can directly access the DE’s MMIO and DMA mem-
ory regions, and can manipulate a device outside the trusted
path to issue unauthorized DMA requests to access those re-
1Section 9.1 presents an optimization mechanism when the PE executes at
user privilege level (CPU Ring 3), which by default will not have sufﬁcient
privilege to access I/O ports.
620
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:50:11 UTC from IEEE Xplore.  Restrictions apply. 
ory mapping attacks cannot corrupt the access to the device
conﬁguration space (shown in the right half of Figure 3). Even
if some manipulated device has its I/O ports or MMIO memory
regions overlapping those of the conﬁguration space, the ma-
nipulated device still can not intercept any conﬁguration space
access destinated to other devices. Speciﬁcally, both the spe-
cial I/O port numbers and the base address of the conﬁguration
space MMIO memory are located in dedicated registers in the
northbridge chipset [23]. The northbridge interposes on every
port and memory access from the CPU(s). If the requested ports
or memory regions fall into those of the conﬁguration space, the
northbridge transforms the access requests into PCI/PCIe con-
ﬁguration bus cycles with special address information. This ad-
dress information is only correlated with the targeted device’s
static geographic position in the system hierarchy where the
targeted PCI/PCIe device is hard-wired or plugged. I/O ports
and MMIO memory remapping cannot manipulate device hier-
archic positions, and thus cannot cause the manipulated devices
to claim the conﬁguration space cycles of other devices.
Therefore, during trusted-path establishment, the hypervisor
only needs to conﬁgure the I/O port-access-interception bitmap
(Section 5.1), Nested/Extended Page Tables, and IOMMU
(Section 5.2), to prevent unauthorized CPU-to-memory access
and DMA to the whole device conﬁguration space. After that,
the HV can securely enumerate all devices. Protection of the
device conﬁguration space remains active until the trusted path
is torn down.