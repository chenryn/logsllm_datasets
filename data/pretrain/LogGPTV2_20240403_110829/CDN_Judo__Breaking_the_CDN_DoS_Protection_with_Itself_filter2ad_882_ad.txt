this connection-exhaustion attack
works in the same way as direct slow HTTP attacks but
consumes fewer resources from the attacker, e.g., the attacker
needs to maintain just one connection with the CDN, which is
then abused to proxy and maximize simultaneous CDN–origin
connections.
Summary. With real-world experiments, three out of the six
CDN vendors are shown to support pre-POST forwarding.
This pre-POST-forwarding behavior introduces a new attack-
ing vector to break the CDN protection and enable resource
exhaustion attacks against the origins of the CDN-powered
websites.
V. DEGRADATION-OF-GLOBAL-AVAILABILITY ATTACK
Because the request-routing mechanisms of a CDN can be
bypassed, and CDN surrogate servers can be accessed directly
(as explained in Section II-A), an attacker can directly send
crafted attacking requests to the globally distributed ingress IPs
to render the threats described in Section IV and Section III
into DDoS attacks, as shown in Fig. 8.
After collecting a massive number of CDN ingress IPs
(surrogate IPs), we evaluate the feasibility of a CDN-rendered
DDoS attack. We ﬁnd that, compared with the number of
ingress IPs that we used, the number of egress IPs that a
CDN uses to forward requests to the origin with is smaller,
resulting in a much lower egress IP-churning rate. We therefore
present the possibility that this lower IP-churning rate can be
leveraged to effectively degrade the global availability of the
CDN-powered websites.
In this section, we ﬁrst reveal how to ﬁnd the ingress and
egress IP distributions of a CDN, illustrate the low IP-churning
rate of the egress IPs, and explain the degradation-of-global-
availability attack.
Fig. 8: Through sending of requests to ingress IPs directly to
simulate global access, a CDN is abused to proxy a DoS attack
into a DDoS attack.
A. CDN Ingress and Egress IP Distribution
Instinctively, to determine the ingress and egress IP ad-
dresses of a given CDN, we can directly ﬁnd the IP ad-
dresses of the CDN either from the ICANN WHOIS database
or from ofﬁcially published information provided by some
CDN vendors [14], [15], [21]. However, WHOIS information
may be incomplete or obsolete (various European registrars
have stopped collecting information for the ICANN WHOIS
database because of the GDPR’s principle of data minimiza-
tion [17]), and the ofﬁcially published addresses are just IP
address ranges that do not separate the ingress IP addresses
from the egress IP addresses.
Because we need an in-depth analysis of how a CDN
assigns the ingress and egress IP addresses when receiving
an end-user request, we explore the ingress IP distribution via
an Internet-wide scan and unveil the egress IP distribution by
sending requests to all ingress IP addresses directly to simulate
global end-user accessing.
Ingress IP Distribution. With our website deployed behind a
CDN, an Internet-wide HTTP scan is a direct method to collect
the ingress IPs, through which we can access the contents
of our website. To avoid offensive Internet scanning in this
study, we ﬁrst use Censys [11] Internet HTTP scanning data
to ﬁlter possible ingress IPs. The Censys project scans TCP
port 80 with the Host header ﬁlled with the scanned IP
address, and the CDN surrogate servers will return distinctive
error HTTP responses (header or body) when they are being
accessed with this incorrect IP-form HTTP Host header, as
shown in Table VIII.
TABLE VIII: Characteristics of HTTP response. CDN surro-
gate servers will return distinctive error HTTP responses when
receiving incorrect Host headers.
CDN
CloudFront
CloudFlare
CDNSun
Fastly
KeyCDN
MaxCDN
Status Code
Response
403
403
400
500
403
200
Header: “Server: CloudFront”
Header: “Server: cloudﬂare”
Header: “X-Edge-IP/X-Edge-Location”
Body: “Fastly error”
Header: “Server: keycdn-engine”
Header: “Server: NetDNA-cache/2.2”
We then actively send requests to these ﬁltered IPs with
our website domain name in the Host header; the IPs through
which we can access our origin are collected as ingress IPs.
8
 Request 1 Origin ServerCDNSurrogateIP 1Surrogate IP n EgressIP 1EgressIP mSurrogateIP 2EgressIP 2 Request 2  Request n TABLE IX: CDN IP distribution. CDNs employ much fewer
egress IPs compared with ingress IPs (N1: number of IPs, N2:
number of BGP Preﬁxes, N3: number of BGP ASes).
Requesting
Routing
DNS
Anycast
DNS
DNS
DNS
Anycast
Ingress IP
N2
720
93
-
170
-
16
N3
29
28
-
34
-
2
Egress IP
N2
160
72
-
56
-
12
N3
3
1
-
1
-
2
N1
862
242
-
1136
-
12
N1
128906
490309
-
64659
-
300
Percentage of requests
when EgressIP=IngressIP
0.06%
0%
-
0.02%
-
3.82%
CloudFront
CloudFlare
CDNSun
Fastly
KeyCDN
MaxCDN
As shown in Table IX, we ﬁnd a large number of ingress IPs 3.
Egress IP Distribution. For our experiments, we ﬁrst set
up an origin server, which will record incoming egress IPs
and requested URLs. From a client, we directly send requests
to all ingress IPs that we found. These requests are tailed
with different query strings to avoid the cache-hit of the
CDN, e.g., http://IngressIP1/i.php?IngressIP1.
The CDN then forwards these requests to our origin server
through different egress IPs. Finally, from the data recorded
at the origin server, we collect the egress IPs and extract the
corresponding ingress IPs from the URL query strings.
To collect as many egress IPs as possible, we send requests
hourly for 24 hours to the ingress IPs and record the resulting
data at the origin. The number of the egress IPs, after dupli-
cates are removed, are shown in Table IX, together with their
BGP preﬁxes and ASes (determined by data from the Route
View Project [50]). From Table IX, we can see that even if
a CDN has a massive number of ingress IPs, the CDN will
group incoming requests and assign a small set of egress IPs
to forward the requests to the origin. We also ﬁnd that, for
each of the forwarded requests, the egress IP of the request is
different from the ingress IP, e.g., in the 24-hour scale, only
0.06% of the requests we send through CloudFront have the
same ingress/egress IP, whereas the corresponding percentages
for the other CDNs are 0% for Cloudﬂare, 0.02% for Fastly,
and 3.82% for MaxCDN.
Further, within the same 24-hour measurement duration, we
analyze the egress IP-churning rate (or occurrence ratio), which
describes how frequently a CDN repeatedly assigns the same
egress IP. In Fig. 9 (with the Y-axis in logarithmic scale), for
simplicity, we just plot the ratios for the top 32 most assigned
egress IPs 4. From Fig. 9, we can see that 96.32% of the
MaxCDN requests come from one single Egress IP. In other
words, MaxCDN has assigned most of the requests through
just one single egress IP. For the other CDNs, on the other
hand, we can see in Fig. 9 that their egress IPs are assigned
more evenly or randomly, where no egress IP is charged with
more than 10% of the requests.
Impact of Origin Location. We can see that some CDNs
assign a small set of egress IPs to access the origin and do not
3We cannot ﬁlter any CDNSun IPs from the Censys data, and we can
ﬁlter only 155 KeyCDN IPs but cannot access our website through these
IPs. Querying the open DNS resolvers is another operational method to ﬁnd
ingress IPs [31], [34], but the result is totally determined by the data-set of
open DNS resolvers (i.e., how many and how globally geo-distributed these
open resolvers are). We think the result of Internet scanning provides a better
coverage, because we ﬁnd more ingress IPs using the Internet scanning method
than using the DNS querying method used in [34].
4These 32 IPs are obviously different across CDNs, we just use IP0 to
IP31 to symbolize the mostly assigned IPs for each CDN.
Fig. 9: Occurrence ratios of the 32 egress IPs with the highest
occurrences (in descending order).
churn these IPs quickly. To verify if the location of the origin
will affect the attack, or in other words, whether the MaxCDN-
assigned egress IPs are a function of the origin IP, we set up
and conduct experiments with origin servers located in Silicon
Valley, Singapore, and Beijing, and determine that the most
assigned egress IP is the same for these different locations.
Further, our results are consistent with [34], which is published
after our work. L. Jin et al. studied the address spaces of the
ingress IPs of three CDN vendors (i.e., Cloudﬂare, CloudFront,
and Fastly) by resolving the IPs through public Open DNS
resolvers, and further explored egress IP addresses using the
same method as ours. They found fewer ingress IPs than we
did and conﬁrmed that the address space of the egress IPs
is quite limited and churning at an extremely low rate. They
also reveal that this lower egress IP churning rate is due to
the internal two-layer structure of the CDN, composed of a
client-facing layer for receiving client requests, and an origin-
facing layer for fetching requested contents from the origin.
This two-layer structure improves the CDN cache-hit ratio and
lowers the workload of the origin. However, we can see that
this lower IP-churning rate also makes attacks on CDN–origin
connections much easier.
B. Attack Surface Analysis
A CDN provides a website with global availability via
its massively geo-distributed surrogate servers. If an attacker
wants to stop or degrade the global availability of a CDN-
powered website, the most obvious method is to launch a DoS
attack against the origin directly. However, the IP address of
the origin is difﬁcult to determine without relevant historical
data [58] or accidental leakage of information [35]. Thus,
to attempt the second-best method of attack, the attacker can
try to invade and control some on-path network infrastructures
(e.g., routers or ﬁrewalls), to be on-path in client–CDN con-
nections or CDN–origin connections to block the relevant IPs.
However, because the CDN surrogates are globally distributed
with massive numbers of IP addresses, it is impossible for an
attacker (even for a state-sponsored attacker) to be on-path
in all client–CDN connections or CDN–origin connections.
Therefore, on the premise that the attacker can just block just a
few connections, normally the attack can not affect the global
availability of the website.
Here, as shown in Fig. 10, we visualize a threat model
that an attacker can cut off only one or a small set of
CDN–origin connections and who aims to degrade the global
availability of a CDN-powered website. We argue that this
9
Fig. 10: Degradation-of-availability attack. When a CDN as-
signs global requests through one or a small set of egress IPs,
cutting off just one or a small set of CDN–origin network paths
can effectively block most global requests to a website.
threat model is practical, because it requires an attacker to
invade and control much fewer on-path network infrastructures
(e.g., router or ﬁrewall) to cut off one or a small set of CDN–
origin connections, or an attacker can launch the crossﬁre
attack [37] to stealthily cut off the Internet connections of
one or a small set of CDN nodes by ﬂooding network links
around the CDN nodes. Based on this threat model, we further
evaluate the feasibility and severity of the degradation-of-
global-availability attack.
C. Real-World Attack Analysis
Experiment Setup. We can see that, according to Fig. 9,
degrading the availability of our MaxCDN-powered website
requires cutting off just one CDN–origin connection (i.e.,
blocking one egress IP), whereas for the other CDNs, the attack
requires cutting off more connections.
In our experiments, we send requests at hour 0 to all of the
ingress IPs of a given CDN to simulate global clients accessing
our website and obtain the number of successful requests as
the base for calculating the following accessing ratios.
Afterward, starting from hour 1, the most assigned egress
IPs are blocked to simulate the cutting off of CDN–origin
connections (e.g., a crossﬁre attack). For MaxCDN, we block
just one egress IP in an on-path ﬁrewall, whereas for the other
CDNs, we block the top 16 most assigned egress IPs. We still
hourly send requests to the same sets of ingress IPs repeatedly
for 12 hours, to simulate global clients accessing, and record
the successful-access ratios. Note that all requests are sent with
random URLs to bypass CDN caching.
Experiment Results. We plot the hourly accessing ratio in
Fig. 11. Because MaxCDN still assigns the blocked IP to
forward most requests, the accessing ratio drops to less than
10% within 12 hours. This phenomenon further reveals that
MaxCDN lacks the mechanism to detect the attack when other
egress IPs can still access the origin.
In Fig. 11, we can see that the other CDNs also lack
the attack, e.g., for CloudFront,
the mechanism to detect
the accessing ratio ﬂuctuates at around 40% after blocking,
whereas for Cloudﬂare and Fastly, the accessing ratios ﬂuctuate
at around 90%, which may be attributed to their capabilities
of churning egress IPs more quickly.
Practical Analysis. Because the IP address of the origin is