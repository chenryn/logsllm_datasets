or a proof of knowledge of these.
Server Sj additionally reveals its commit-
ment to the mapping from Ck,j−1 maps to
Ci,j. That is, if it provided a commitment to
πj of the form Γ(In)
, then it decommits γk,
i.e., its commitment to πj(k).
If the server
provided a commitment Γ(Out)
, then it de-
commits γi, i.e., its commitment to π−1
j (i).
j
j
4.2 Determining which correspon-
dences to reveal
Clearly, a server should not know which in-
put/output correspondences it will have to re-
veal until after it has committed its output
sequence of ciphertexts to the bulletin board.
We ﬁrst focus on the problem of having
a random seed committed to before server
Sj produces its output. This seed will then
help determine which input/output corre-
spondences server Sj should reveal. There
are a variety of ways of achieving this goal;
we suggest the following straightforward ap-
proach.
After the close of the election and prior to
the opening of input/output relations, servers
jointly compute a random seed R. They may
accomplish this by having every server Sj
publish a commitment to a value Rj selected
uniformly at random from some appropriate
set. All servers then decommit and compute
R as a combination of the Rj values; for ex-
ample, they might compute R = ⊕t
j=1Rj.
Let BB here denote the full contents of the
bulletin board after all servers have published
their full transcripts, i.e., all inputs, outputs,
and commitments (but for the moment ex-
cluding input/output relations). Note that
new public transcripts are constantly added
to the bulletin board during the mix pro-
thus, BB denotes both the bulletin
cess:
board and this dynamically changing value.
Servers combine the random value R with BB
through use of an appropriate hash function
h, computing a random value Q = h(R,BB).
The purpose of incorporating BB into the
random seed Q in this manner is to achieve
public veriﬁability for the mix scheme, as we
discuss later.
For each server Sj, a seed Qj derived from
Q can be used to determine what challenges
the server needs to answer. Here, Qj may be
computed straightforwardly using an appro-
priate hash function h. We might, for exam-
ple, compute Qj = h(Q, j).
We next assume the use of two predicates
PIn and POut that determine which inputs
and outputs should have their input/output
correspondences revealed. More precisely:
• If PIn(Qj, k) is true, then server Sj must
reveal the input/output pair containing
Ck,j−1 as input.
• If POut(Qj, i) is true, then server Sj must
reveal the input/output pair containing
Ci,j as output.
(A correspondence may be revealed be-
cause either because PIn speciﬁes it, or be-
cause POut speciﬁes it.)
Any other in-
put/output correspondences should not be
revealed. These predicates may also depend
on other global parameters. For example,
there may be a global selection probability
p that is intended to specify the fraction of
correspondences to be revealed. For some
versions of our scheme it may be that PIn
is always false, or that POut is always false.
(That is, the pairs to be opened may be en-
tirely speciﬁed by their input positions, or by
their output positions.)
We next present two variations on the de-
tails; the second scheme is the one we favor.
4.3 Scheme One – Independent
Random Selections
j
In this scheme, server Sj furnishes a com-
mitment Γ(Out)
on mappings from outputs to
inputs. When input/output relations are re-
vealed here, PIn is always false, and POut is
true with probability p. (Imagine, say, p =
1/2.) For example, we might have POut(Qj, i)
true whenever the low-order bit of h(Qj, i) is
one, for a speciﬁed pseudo-random hash func-
tion h.
When t is large enough, with high proba-
bility every path from an initial input Ck,0
to the corresponding ﬁnal output Ci,t will be
“broken” (contain some unrevealed link).
For p = 1/2, if
t ≥ log2
(cid:1) n
(cid:2)

then the chance that there exists some ﬁnal
output that can be linked to its initial input
is less than .
We note that if a ﬁnal output can not be
linked to its initial input, then there are at
least n/2 inputs from which it could have
been produced. Thus, the ambiguity of the
input corresponding to a given output may
extend over n/2 elements, rather than the full
n elements. For many practical applications,
such as voting, this should be acceptable.
This scheme works ﬁne, but takes more
rounds (a larger value of t) than we would
prefer. For example, with n = 4096 and
 = 2−24 we need t ≥ 36 rounds. It might
in practice be necessary to use the available
servers in some sort of “round-robin” fashion
to achieve the necessary number of rounds.
4.4 Scheme Two – Pairwise De-
pendent Selections
two,
adjacent
In scheme
servers are
letting each server be a member
“paired”,
of exactly one such pair (see Figure 1).
In
particular, we assume an even number t of
servers, and regard each pair of adjacent odd
and even-numbered servers as a cohesive unit.
When servers reveal input/output relations,
the two servers in a pair each reveal non-
overlapping sets of such relations. For sim-
plicity of analysis, we assume p = 1/2 here.
This is to say that each server in a pair re-
veals half of its input/output pairs on aver-
age, and the other server reveals the comple-
mentary half, i.e., the relations not revealed
by its twin. (Of course, neither server would
make its revalations until both of them have
committed to their outputs.)
In this scheme, each odd-numbered server
Sj publishes a commitment Γ(In)
on the
mapping from input elements to output ele-
ments; conversely, each even-numbered server
Sj publishes a commitment Γ(Out)
on the
mapping from output elements to input el-
ements.
j
j
Let us now specify the process for reveal-
ing input/output relations.
Suppose that
(Sj, Sj+1) is a server pair, where j is odd.
Then
• PIn(Qj, k) is always false.
• POut(Qj, i) is true with probability 1/2.
• PIn(Qj+1, i)
true if and only if
is
POut(Qj, i) is false.
• POut(Qj+1, l) is always false.
The privacy guarantee of this variant is
based on a simple observation: Provided that
a (passive) adversary controls only a minor-
ity of the servers, there is at least one server
pair that is entirely honest. Thus, suppose
that the adversary is given complete side in-
formation regarding all input/output corre-
spondences for all servers other than this hon-
est pair. Then in the view of the adversary,
every voter input is mixed uniformly with a
known half of the other inputs. It follows that
for any input value, the adversary can at best
identify the corresponding output value with
probability 2/n. (This assumes ideal cipher
characteristics. Under normal computational
hardness assumptions on the underlying ci-
pher, the adversary has some additional, neg-
ligible advantage.) This holds no matter how
many servers there are, i.e., irrespective of t,
so long as at least t/2 + 1 servers are honest.
In the context of an election, this privacy
guarantee is quite satisfactory from a prac-
tical perspective. Stated loosely, it speciﬁes
that any ballot is hidden among those of half
of the electorate. Provided we are willing to
accept this guarantee, rather than full hiding,
this proposal presents attractively practical
functionality.
5 Electronic Voting Based on
RPC mix nets
We are now ready to sketch a simple elec-
tion scheme using an RPC mix net.
System Setup. Herein, the authorities se-
lect mix servers, publish the public keys of
these, certify voters, and distribute appropri-
ate protocols, which are assumed to be certi-
ﬁed and correct.
Ballot Preparation and Encryption.
Each voter Vi prepares his plaintext ballot
Bi. He then computes a ciphertext Ci,0 =
EPK(Bi). Voter Vi signs Ci,0 with his own
private signing key and posts it to the bul-
letin board.
Each voter prepares his or her ballot by en-
crypting the value that encodes the ballot us-
ing the public key(s) of the authorities. This
may be done by sequential encrypting using
the public keys of the participating servers,
starting with the last one in the mix net –
here, the encryption may either be a plain
asymmetric encryption, or a hybrid encryp-
tion. We refer to [14] for a description of
hybrid encryption techniques. Alternatively,
the encryption may be performed using the
public key of the authorities. As noted ear-
lier, the encryption technique used should be
“plaintext-aware.”
Initial Ballot Checking. When the bal-
loting phase is closed, all servers check the va-
lidity of the posted ciphertexts, elimating by
consensus any ciphertexts that are ill-formed.
They also eliminate any duplicate ciphertexts
(preserving only the ﬁrst posted copy). With-
out loss of generality, we let this result in n
well-formed ciphertexts.
Permutation Commitment. Each server
Sj selects a permutation πj on n elements
uniformly at random. The server publishes to
the bulletin board a commitment to πj, either
Γ(In)
(depending on our choice of
mix variant and the parity of j).
or Γ(Out)
j
j
Mix Net Processing. At this point, each
server Sj in turn accepts n input ciphertexts
{Ci,j}t−1
j=0. The server applies Xj to each of
them, permutes the resulting ciphertexts ac-
cording to πj, and outputs the result to the
bulletin board, along with a digital signature
thereon.
Correctness Check. The operation of the
mix servers is veriﬁed as previously outlined.
If any server is found to have cheated, and
the mixing is based on re-encryption, then
the corrupted server is either emulated or
replaced.
In the latter case, the protocol
is restarted at the beginning of the mixing
stage; in the former at the stage of the em-
ulated server. If the mixing is based on de-
cryption, then the cheater is emulated.
If re-encryption mixing is used, then the
outputs of the last mix server are decrypted
at the end of the correctness check, assuming
this succeeds. The decryption typically would
be performed by a quorum of servers of the
authority sharing its secret key. (Note that
these may be diﬀerent from the mix servers
as long as they collectively trust that a suf-
ﬁcient number of mix servers were honest.)
Each decryption would be associated with a
publicly veriﬁable proof of correct decryption
(which typically means a proof of correct ex-
ponentiation.)
Ballot Decryption. Once the mixing op-
eration is complete, the holders of SK (the
mix servers or some other entities) jointly de-
crypt all output ciphertexts, yielding the full
list of plaintext ballots, if applicable.
Boundary Check. The authorities deter-
mine the minimum number of ballots that
would have to change in order to alter the
outcome of the election, given the tally out-
put at the end of the correctness check stage.
They then compute the probability that this
number of ballots could have been altered by
cheaters, without these being detected.
In particular, suppose that alteration of at
least κ ballots would have been necessary to
aﬀect the election outcome. That is, κ is one-
half the diﬀerence in vote count between the
winner and the runner-up, rounded up. The
authorities estimate the probability that an
adversary could have manipulated κ ballots
without detection. (We give a bound on this
probability for our proposal below.)
If this estimate represents an acceptable
failure probability (which we expect to be al-
most always the case), then the mix servers
proceed to the endorsement phase; otherwise
they invoke an alternative mix net on the
same inputs with a stronger guarantee of cor-
rectness.
If both the
correctness
Endorsement.
check and the boundary check succeeds, then
the output is considered valid. The values
needed for publicly performing the correct-
ness check are published along with the ﬁ-
nal tally. (The initial contents of the bulletin
board are assumed to already be public.) Ev-
erybody can perform the veriﬁcations of the
correctness check (including the potential de-
cryption veriﬁcations at its end); and then
verify that the boundary conditions are sat-
isﬁed.
5.1 Boundary probability
To compute boundary probabilities for our
scheme, let us consider a centralized adver-
sary, i.e., one that is capable of coordinating
(in a static manner) the actions of a minority
of servers and an arbitrary number of vot-
ers. All other servers and voters are assumed
to be honest. Given no evidence of cheating,
the question we aim to answer is this: What
is the probability that the adversary could
have altered votes in such a way that the
apparent election outcome is not the correct
one? For simplicity of presentation, we focus
our analysis here on our second protocol vari-
ant involving “paired” servers, and assume a
re-encryption mix with correct decryption of
output ciphertexts. As a further simplifying
assumption, we regard the underlying cipher
and commitment schemes as “ideal”, i.e., as
providing information theoretic security. For
p = 1/2, we make the following claim:
Claim 1. Suppose that the adversary alters
elements in the mix such that the observed
election tally diﬀers by κ votes from the cor-
rect one. Then the probability that the ad-
versary goes undetected is at most 1/2κ.
Proof 1. (Sketch.) Now let us ﬁrst con-
sider a server Sj such that j is odd, i.e., the
ﬁrst server in a pair. For such a server, let
us deﬁne the antecedent of an output cipher-
text Ck,j to be an input ciphertext Ci,j−1
with the following properties: (1) Ck,j rep-
resents a valid re-encryption of Ci,j−1 and
γi is a commitment to the value πj(i) = k.
Observe that Sj cannot successfully open the
input/output relationship for a given output
ciphertext without a correct antecedent.
Now consider a server Sj such that j is
even, i.e., the second server in a pair. For
such a server, let us deﬁne the successor of
an input ciphertext Ci,j−1 to be an output