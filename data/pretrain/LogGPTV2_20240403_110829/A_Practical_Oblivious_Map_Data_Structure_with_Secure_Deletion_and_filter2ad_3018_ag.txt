9:
10:
11:
(cid:4) W is the partial blocks storable in the bucket
create empty bucket with new child key key
(other child key remains the same)
while W is not empty and bucket is not full do
in the bucket with blk = blk0 blk1 and |blk1| = (cid:3)1.
(id∗, (cid:3), blk) ← arbitrary element from W
(id∗, (cid:3)1, blk1) ← largest partial block of the above, ﬁtting
Add (id∗, (cid:3)1, blk1) to the bucket
if (cid:3)1 = (cid:3)
then remove (id∗, (cid:3), blk) from W and from stash
else replace (id∗, (cid:3), blk) in stash with (id∗, (cid:3)− (cid:3)1, blk0).
(cid:4) split a partial block
end while
key ← {0, 1}λ chosen uniformly at random
insert Enckey(bucket) at loc(id, t) in persistent storage.
12:
13:
14:
15: end for
16: rootkey ← key
Now, we give the pseudocode of the vORAM operations:
insert(blk)
1: id0 ← idgen()
2: evict(id0)
3: id+ ← idgen()
4: insert (id+,|blk|, blk) into stash
5: writeback(id0)
6: return id+
remove(id)
1: evict(id)
2: remove (id, (cid:3), blk) from stash
3: writeback(id)
4: return blk
update(id, callback)
1: evict(id)
2: remove (id, (cid:3), blk) from stash
3: id+ ← idgen()
4: blk+ ← callback(blk)
5: insert (id+,|blk+|, blk+
6: writeback(id)
7: return id+
) into stash
APPENDIX B
HIRB OPERATION DETAILS
All
the HIRB tree operations depend on a subroutine
HIRBpath, which given a label hash, HIRB root node iden-
+
1 ) corre-
tiﬁer, and vORAM, generates tuples ((cid:2), v0, v1, cid
sponding to the search path for that label in the HIRB. In
each tuple, (cid:2) is the level of node v0, which is along the search
path for the label. In the initial part of the search path, that
is, before the given label hash is found, node v1 is always nil,
a dummy access used to preserve obliviousness. The value
+
1 is the pre-generated identiﬁer of the new node that will
cid
be inserted on the next level, for possible inclusion in one
of the parent nodes as a child pointer. This pre-generation is
important, as discussed in Section V, so that only 2 nodes
need to be stored in local memory at any given time.
When the given label hash is found, the search path splits
into two below that node, and nodes v0 and v1 will be the
nodes on either side of that hash label. Note that
in the
actual implementation of HIRBpath, v0 (resp. v1, if deﬁned)
corresponds to a vORAM block, evicted with identiﬁer id0
193193
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:59 UTC from IEEE Xplore.  Restrictions apply. 
0 ) ← (rootid, M.idgen())
1 ) ← (M.idgen(), M.idgen())
(resp. id1) and taken out from vORAM stash. When each tuple
+
1 ) is returned from the generator, the two nodes
((cid:2), v0, v1, cid
can be modiﬁed by the calling function, and the modiﬁed
nodes will be written back to the HIRB. If v1 is returned
from HIRBpath as nil, but is then modiﬁed to be a normal
HIRB node, that new node is subsequently inserted into the
HIRB.
HIRBpath(h, rootid, M)
1: (id0, id+
2: rootid ← id+
3: (id1, id+
4: f ound ← false
5: for (cid:3) = 0, 1, 2, . . . , H do
6:
7:
8:
9:
10:
11:
12:
13:
14:
M.evict(id0)
M.evict(id1)
if (cid:3) = H then (cid+
else (cid+
remove (id0,|v0|, v0) from M.stash
if f ound = true then
remove (id1,|v1|, v1) from M.stash
(cid0, v0.childlast) ← (v0.childlast, cid+
0 )
(cid1, v1.child0) ← (v1.child0, cid+
1 )
1 ) ← (M.idgen(), M.idgen())
1 ) ← (nil, nil)
(cid:4) M is vORAM
(cid:4) dummy access
0 , cid+
0 , cid+
0
(cid:4) v1 is right next to v0 at level (cid:3)
else
(cid:4) only fetched after the target is found.
(cid:4) v0.hi−1  (cid:2)h, where (cid:2)h is the height
of the label hash h, if v1 is nil, then a new node v1 is created,
and the items in v0 with a label greater than h are moved to
a new node v1.
The remove operation works similarly, but instead of split-
ting each v0 below the level of the found item, the values in
v0 and v1 are merged into v0, and v1 is removed by setting it
to nil.
hirbinit(H, M)
1: rootid ← nil
2: salt ← {0, 1}λ. Initialize Hash with salt.
3: for (cid:3) = H, H − 1, . . . , 0 do
node ← new 1-ary HIRB node with child id rootid
4:
rootid ← M.insert(node)
5:
6: end for
7: return rootid
chooseheight(label)
1: h ← Hash(label)
2: Choose coins (c0, c1, . . . , cH−1) ∈ {0, 1, . . . , β − 1}H by
3: return The largest integer (cid:3) ∈ {0, 1, . . . , H} such that c1 =
evaluating PRG(h).
c2 = ··· = c(cid:4) = 0.
(cid:4) v0.hi−1  (cid:3)h and v1 = nil then
v1 ← new node with v1.child0 ← cid+
Move items in v0 past index i into v1
1
8:
9:
10:
11:
12: end for
end if
before
(cid:4) Other items in v0 are shifted over
1 ) ∈ HIRBpath(label, rootid, M) do
remove(label, rootid, M)
1: (h, (cid:3)h) ← (Hash(label), chooseheight(label))
2: for ((cid:3), v0, v1, cid+
if h ∈ v0 then
3:
4:
else if (cid:3) > (cid:3)h and v1 (cid:7)= nil then
5:
6:
7:
8:
9: end for
Add all items in v1 except v1.child0 to v0
v1 ← nil
end if
Remove h and its associated value and subtree from v0
update(label, callback, rootid, M)
1: h ← Hash(label)
2: for ((cid:3), v0, v1) ∈ HIRBpath(h, rootid, M) do
3:
4:
5: end for
i ← index of h in v0
if v0.hi = h then v0.valuei ← callback(v0.valuei)
APPENDIX C
PROOFS OF IMPORTANT THEOREMS
A. Proof of Theorem 1
Let D be any system that stores blocks of data in persistent
storage and erasable memory and supports insert and remove
operations, accessing at most k bytes in persistent or local
Let n ≥ 36 and k ≤ √
storage in each insert or remove operation.
n/2. For any (cid:2) ≤ n/(4k), we
describe a PPT adversary A = (A1,A2) that breaks history
independence with leakage of (cid:2) operations.
Supposing all operations are insertions, D must access the
location where that item’s data is actually to be stored during
execution of the insert operation, which is required to correctly
store the data somehow. However, it may access some other
locations as well to “hide” the access pattern from a potential
194194
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:59 UTC from IEEE Xplore.  Restrictions apply. 
attacker. This hiding is limited of course by k, which we will
now exploit.
The “chooser”, A1, randomly chooses n items which will
these could simply be random bit strings of
be inserted;
equal
these items (and their arbitrary order)
a1, a2, . . . , an. The chooser also randomly picks an index
j ∈ {1, 2, . . . , n − (cid:2) − 1} from the beginning of the sequence.
−→
op(0) returned by A1 consists of n
The operation sequence
insertion operations for a1, . . . , an in order:
length. Call
a1, . . . , aj−1, aj, aj+1, . . . , an−(cid:4)−1, an−(cid:4), an−(cid:4)+1, . . . , an,
−→
op(1) returned by A1
whereas the second operation sequence
contains the same n insertions, with only the order of the j’th
and (n − (cid:2))’th insertions swapped:
a1, . . . , aj−1, an−(cid:4), aj+1, . . . , an−(cid:4)−1, aj, an−(cid:4)+1, . . . , an.
The adversary A1 includes the complete list of a1 up to an,
along with the distinguished index j, in the ST which is passed
to A2. As the last (cid:2) operations are identical (insertion of items
an−(cid:4)+1 up to an), A1 is (cid:2)-admissible.
The “guesser“, A2, looks back in the last ((cid:2) + 1)k entries in
−→
the access pattern history of persistent storage
acc, and tries to
opportunistically decrypt the data in each access entry using
the keys from D.em (and, recursively, any other decryption
keys which are found from decrypting data in the access
pattern history). Some of the data may be unrecoverable, but
at least the (cid:2) + 1 items which were inserted in the last (cid:2) + 1
operations must be present
in the decryptions, since their
data must be recoverable using the erasable memory. Then
the guesser simply looks to see whether aj is present in the
decryptions; if aj is present then A2 returns 1, otherwise if
aj is not present then A2 returns 0.
obl-hiA (D, λ, n, 1, 1), aj must be
among the decrypted values in the last ((cid:2) + 1)k access entries,
since aj was inserted within the last (cid:2) + 1 operations and each
operation is allowed to trigger at most k operations on the per-
obl-hiA (D, λ, n, 1, 1) = 1] = 1.
sistent storage. Therefore Pr[EXP
obl-hiA (D, λ, n, 1, 0), we know that
each item an−(cid:4), . . . , an must be present in the decryptions,
and there can be at most ((cid:2) + 1)(k − 1) other items in the
decryptions. Since the index j was chosen randomly from
among the ﬁrst n − (cid:2) − 1 items in the list, the probability
that aj is among the decrypted items in this case is at most
In the experiment EXP
In the experiment EXP
((cid:2) + 1)(k − 1)
n − (cid:2) − 1
.
From the restriction that (cid:2) ≤ n/(4k), and k ≤ √
((cid:2) + 1)(k − 1)  n/2, so the probability
that aj is among the decrypted items is at most 2
3, and we
obl-hiA (D, λ, n, 1, 0) = 1] ≤ 2/3, and therefore
have Pr[EXP
AdvhiA(D, λ, n) ≥ 1/3. According to the deﬁnition,
this
means that D does not provide history independence with
leakage of (cid:2) operations.
B. Proof of Theorem 5
Our proofs on the distribution of block sizes in the ORAM