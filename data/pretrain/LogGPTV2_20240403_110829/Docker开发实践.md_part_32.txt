# journal message level, 0 is debug
KUBE_LOG_LEVEL="--v=0"
# Should this cluster be allowed to run privleged docker containers
KUBE_ALLOW_PRIV="--allow_privileged=false"
上述代码配置了Etcd服务器的地址和端口、日志的输出方式和级别以及是否支持特权容器。
(2) /etc/kubernetes/apiserver文件的配置，具体为：
# The address on the local server to listen to.
KUBE_API_ADDRESS="--address=0.0.0.0"
# The port on the local server to listen on.
KUBE_API_PORT="--port=8080"
# How the replication controller and scheduler find the kube-apiserver
KUBE_MASTER="--master=192.168.1.83:8080"
# Port minions listen on
KUBELET_PORT="--kubelet_port=10250"
# Address range to use for services
KUBE_SERVICE_ADDRESSES="--portal_net=10.254.0.0/16"
# Add you own!
KUBE_API_ARGS=""
(3) /etc/kubernetes/controller-manager文件的配置，具体为：
# Comma seperated list of minions
KUBELET_ADDRESSES="--machines= 192.168.1.85,192.168.1.86"
# Add you own!
KUBE_CONTROLLER_MANAGER_ARGS=""
其中KUBELET_ADDRESSES列出了使用kubelet组件的从属节点。
(4)/etc/kubernetes/scheduler文件的配置为：
# Add your own!
KUBE_SCHEDULER_ARGS=""
(5) 启动主控节点的Kubernetes服务，具体操作为：
# systemctl daemon-reload
# systemctl start kube-apiserver.service kube-controller-manager.service kube-scheduler.service
# systemctl enable kube-apiserver.service kube-controller-manager.service kube-scheduler.service
 配置从属节点
从属节点包含kubelet和服务代理这两个组件，下面介绍一下如何配置这两个组件。
(1) 编辑/etc/sysconfig/docker，以便后续提供远程API维护：
#vi /etc/sysconfig/docker
加入如下行：
OPTIONS=--selinux-enabled -H tcp://0.0.0.0:2376 -H fd://
16.4 Kubernetes实战 205
(2) 修改从属节点的防火墙，以保证主控节点能够连接到它： 1
iptables -I INPUT -s 192.168.1.83 -p tcp --dport 10250 -j ACCEPT
2
(3) 修改/etc/kubernetes/config文件，具体内容为：
# Comma seperated list of nodes in the etcd cluster 3
KUBE_ETCD_SERVERS="--etcd_servers=http://192.168.1.84:4001"
# logging to stderr means we get it in the systemd journal
KUBE_LOGTOSTDERR="--logtostderr=true" 4
# journal message level, 0 is debug
KUBE_LOG_LEVEL="--v=0"
# Should this cluster be allowed to run privleged docker containers 5
KUBE_ALLOW_PRIV="--allow_privileged=false"
该文件配置了Etcd服务器的地址和端口、日志的输出方式和级别等信息。
6
(4) 修改/etc/kubernetes/kubelet文件：
7
###
# kubernetes kubelet (minion) config
# The address for the info server to serve on (set to 0.0.0.0 or "" for all interfaces)
9
KUBELET_ADDRESS="--address=0.0.0.0"
# The port for the info server to serve on
KUBELET_PORT="--port=10250"
8
# You may leave this blank to use the actual hostname
KUBELET_HOSTNAME="--hostname_override=192.168.1.85"
# Add your own!
10
KUBELET_ARGS=""
(5) 编辑/etc/kubernetes/proxy文件，具体内容为：
10
KUBE_PROXY_ARGS=""
(6) 启动Kubernetes服务，具体操作为： 11
# systemctl daemon-reload
13
# systemctl enable docker.service kubelet.service kube-proxy.service
# systemctl start docker.service kubelet.service kube-proxy.service
我们启动了docker、kubelet和kube-proxy服务，并且将它们加入到开机启动中。至此，我们 14
已经将Kubernetes集群环境搭建完毕。
15
3. 验证安装
在这一节中，我们通过Kubernetes命令操作来验证Kubernetes集群是否成功搭建。要操作
16
Kubernetes集群，需要在主控主机上操作，或者能访问主控主机8080端口的Kubernetes客户端主机
上操作。
17
 常用命令
18
Kubernetes的操作是通过Kubernetes的客户端连接到主控节点的apiserver来进行的。客户端可
206 第16章 Kubernetes
以用命令行的方式进行操作，这主要使用kubectl工具实现。
 kubectl get minions：查看从属主机。
 kubectl get pods：查看Pod清单。
 kubectl get services 或kubectl get services -o json：查看service清单。
 kubectl get replicationControllers：查看备份控制器清单。
 for i inkubectl get pod|tail -n +2|awk '{print $1}'; do kubectl delete pod $i; done：删除
所有Pod。
 REST方式
除了使用kubectl命令的形式外，还可以使用REST方式访问，这种方式比前者实时性更高。
 curl -s -L http://192.168.1.83:8080/api/v1beta1/version | python -mjson.tool：查
看Kubernetes版本。
 curl -s -L http://192.168.1.83:8080/api/v1beta1/pods | python -mjson.tool：查看Pod
清单。
 curl -s -L http://192.168.1.83:8080/api/v1beta1/replicationControllers | python
-mjson.tool：查看备份控制器清单。
 curl -s -L http://192.168.1.83:8080/api/v1beta1/minions | python -m json.tool：查
看从属主机。
 curl -s -L http://192.168.1.83:8080/api/v1beta1/services | python -m json.tool：
查看service清单。
 创建Pod单元
接下来，我们创建一个简单的Apache应用。首先，新建JSON配置脚本apache-pod.json：
{
"id": "fedoraapache",
"kind": "Pod",
"apiVersion": "v1beta1",
"desiredState": {
"manifest": {
"version": "v1beta1",
"id": "fedoraapache",
"containers": [{
"name": "fedoraapache",
"image": "fedora/apache",
"ports": [{
"containerPort": 80,
"hostPort": 8080
}]
}]
}
},
"labels": {
16.4 Kubernetes实战 207
"name": "fedoraapache"
1
}
}
2
然后执行如下命令：
# kubectl create -f apache-pod.json
3
验证Pod是否创建，可以通过如下命令查看：
4
# kubectl get pod
NAME IMAGE(S) HOST LABELS STATUS
fedoraapache fedora/apache 192.168.1.86/ name=fedoraapache Running
5
这里我们配置了一个简单的apache容器，可以通过访问地址为192.168.1.86的从属节点的8080
端口来访问，其效果图如图16-8所示。 6
7
9
8
图16-8 使用装有Apache应用的容器创建Pod的简单效果图
10
16.4.2 应用操作
10
安装好Kubernetes的运行环境后，就可以在上面运行我们的应用服务了。为了更好地说明
Kubernetes的操作，这里将采用Kubernetes官方提供的一个示例GuestBook来展示如何创建和操作 11
Kubernetes集群，其中GuestBook的相关文件和说明在Kubernetes的examples/guestbook目录下。本
节所有操作具有如下3个前提。 13
 Kubernetes环境已经按16.4.1节所示的步骤搭建成功。
14
 kubectl命令操作是在主控节点下进行的。
 相关文件操作需要有Kubernetes官网提供的案例Guestbook，并在该案例目录下。
15
最后，我们将建立起如图16-9所示的架构。前端由3个php-redis Pod组成，它们由frontend备
份控制器生成。后端创建了一个redis-master Pod和两个redisslave Pod，并为它们分别创建
16
redis-master服务和redisslave服务。此外，redisslave Pod是由redisslave备份控制器创建的。
17
18
208 第16章 Kubernetes
图16-9 GuestBook案例架构图
第1步：启动redis主Pod
首先，通过如下操作启动一个redis主Pod：
$ cluster/kubectl.sh create -f redis-master.json
接着使用kubectl get pods命令去获取现有的Pod：
# kubectl get pods
NAME IMAGE(S) HOST LABELS STATUS
redis-master dockerfile/redis 192.168.1.86/ name=redis-master Pending
注意STATUS一栏，这里显示为Pending（等待）。这是由于第一次运行时，需要从网络下载镜
像来创建容器，所以需要等待。下载完毕之后，其状态就会转为Running。接下来，我们分析一
下redis-master.json文件，其内容为：
{
"id": "redis-master",
"kind": "Pod",
"apiVersion": "v1beta1",
"desiredState": {
"manifest": {
"version": "v1beta1",
"id": "redis-master",
"containers": [{
"name": "master",
"image": "dockerfile/redis",
"cpu": 100,
"ports": [{
"containerPort": 6379,
"hostPort": 6379
}]
}]
}
},
"labels": {
"name": "redis-master"
16.4 Kubernetes实战 209
}
1
}
它是以JSON格式存储的，下面简要说明各个参数的含义。
2
 id：它是Pod、服务等各类资源的唯一标识字段。需要说明的是，在Kubernetes中，Pod、
服务、控制器等都可以称作资源。 3
 kind：它是资源类型，可以是Pod、Service和ReplicationController。
 apiVersion：它目前是v1beta1。 4
 containers：字段跟容器相关，这里将其命名为master，它基于dockerfile/redis镜像构
建，还将主机上的6379端口映射到容器的6379端口。 5
 labels标签：里面的键值对为"name"="redis-master"，这个用于后续服务。根据该标签可
以决定是否使用该Pod提供服务。
6
第2步：启动redis主服务
7
由原理部分知道，为了更好地使用后台Pod提供的应用服务，我们应该为其创建Kubernetes
的服务。使用服务能够解耦前后端的耦合性，而且服务代理能够更好地均衡网络负载。接下来，
9
我们为第1步的redis-master Pod创建服务。其操作为：
$kubectl create -f redis-master-service.json
8
redis-master
创建成功后，可以通过下面的命令来查看服务状况：
10
$kubectl get services
NAME LABELS SELECTOR IP PORT
10
kubernetes-ro  component=apiserver,provider=kubernetes 10.254.18.26 80
kubernetes  component=apiserver,provider=kubernetes 10.254.47.133 443
redis-master name=redis-master name=redis-master 10.254.193.174 6379
11
可以看到，有3项服务，其中kubernetes-ro和kubernetes是Kubernetes的内置核心服务，
redis-master即为我们刚刚创建的服务。服务的PORT为10.254.193.174:6379。下面查看一下 13
redis-master-service.json文件的内容，具体为：
14
{
"id": "redis-master",
"kind": "Service",
15
"apiVersion": "v1beta1",
"port": 6379,
"containerPort": 6379,
16
"selector": {
"name": "redis-master"
},
"labels": { 17
"name": "redis-master"
}
18
}