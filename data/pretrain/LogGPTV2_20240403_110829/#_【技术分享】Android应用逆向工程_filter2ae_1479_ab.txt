用于处理异常(万一目标程序还没有在我们的设备上运行的话，就会产生异常)。在知道了运行程序的UID后，我们可以挂接到目标程序上，并且在目标进程上注入jscode。通过使用js的
send() 函数，脚本就会开始注册我们的回调函数。下面是 while
循环，可以看到frida实际上是有多么的强大，在这个循环中，我们检测是否encrypted变量它的类型已经不是None了，如果它的类型发生了改变，脚本的post()函数将会发送一个信息将我们的js代码注入到目标进程，并且信息将会被在js代码中的recv()
函数所处理。
在开始下一步的操作之前，我们需要对目标apk进行静态分析。我们首先要反编译apk并且将java
bytecode转换为.java格式的代码来阅读。在这里，我们使用的分析工具是dex2jar。
    $ ./d2j-dex2jar.sh CrackMe.apk
    dex2jar CrackMe.apk -> ./CrackMe-dex2jar.jar
现在让我们通过JD-GUI来分析刚才生成的CrackMe-dex2jar.jar文件
可以看到反编译后的代码与原始的java代码还是有很大的不同的。我们来分析一下不同的地方：首先可以很明显的看到资源
id由原来的R.x.x变换称为了数字格式的。
正如我们上面看到的，MainActivity只包含一个 onCreate() 函数。我们首先来看一下android应用的生命周期：
可以看到: onCreate()
函数在app启动之后就运行。为了保持应用的实际功能，我们现在就在hook这个函数，来执行对原始函数的调用，能够获取到目前activity的上下文来得到一些字符串的值，就像下面这一行一样：
    String str = MainActivity.this.getString(2131099669);
现在让我们创建punsec.js文件，来得到这些值。
    Java.perform(function () {
        var MainActivity = Java.use('com.punsec.demo.MainActivity');
        MainActivity.onCreate.implementation = function(a) {
            this.onCreate(a);
            send({"encrypted":this.getString(2131099669)});
        };
    });
**Java.perform()** 是 frida 定义的，它的功能是：告诉frida server来运行已经包装好的js代码。
**Java.use()** 是一个包装器为了能够动态的加载packages到我们的目标进程中。为了下一步的需要，我们将会使用 **send()**
回调函数来发送数据到我们的python程序中。现在运行着的python脚本给我们返回了这样的信息：
    $ python punsec.py
    [+] Running
    [+] Starting process
    [+] Received str : vXrMphqS3bWfIGT811/V2Q==
要记住，要想 **onCreate()**
函数触发，必须要执行回调函数，也就是在启动进程之后，必须要让它在后台运行后再打开程序，请参考上面的Activity生命周期。
我们也看到了代码中有几个调用来执行 **Base64.decode()** 和通过数字id来得到string,
我们可能也会需要这些值，所以让我们来修改一下我们的代码
    Java.perform(function () {
        var MainActivity = Java.use('com.punsec.demo.MainActivity');
        MainActivity.onCreate.implementation = function(a) {
            this.onCreate(a);
            send({'encrypted':this.getString(2131099669)});
        };
        var base64 = Java.use('android.util.Base64');
        base64.decode.overload('java.lang.String', 'int').implementation = function(x, y) {
            send('Base64 Encoded : ' + x);
            var buf = new Buffer(base64.decode(x, y));
            send('Base64 Decoded : ' + buf.toString());
            return base64.decode(x, y);
        }
    });
再一次运行我们的python程序将会得到下面的输出:
    $ python punsec.py
    [+] Running
    [+] Process found
    [*] Base64 Encoded : TXlTdXBlclNlY3JldEwzM3RQYXNzdzByZA==
    [*] Base64 Decoded : MySuperSecretL33tPassw0rd
Hmm, 似乎我们已经成功了。不要着急，现在让我们再来仔细看一下我们的反编译代码:
    if (Base64.encodeToString(
    Util.a(paramAnonymousView, 
    Util.a(new String(
    Base64.decode(MainActivity.this.getString(2131099683), 0)
    )
    )
    ), 
    0).trim().equals(str))
在上面的代码中，有两次对 **Util.a** 函数的调用但是都采用的不同的参数类型，我们已经hook了 **Base64.decode()**
函数，所以现在让我们用下面的代码对 **Util.a()** 创建一个 hook :
    Java.perform(function () {
        var MainActivity = Java.use('com.punsec.demo.MainActivity');
        MainActivity.onCreate.implementation = function(a) {
            this.onCreate(a);
            send({'encrypted':this.getString(2131099669)});
        };
        var base64 = Java.use('android.util.Base64');
        base64.decode.overload('java.lang.String', 'int').implementation = function(x, y) {
            send('Base64 Encoded : ' + x);
            var buf = new Buffer(base64.decode(x, y));
            send('Base64 Decoded : ' + buf.toString());
            return base64.decode(x, y);
        }
        var Util = Java.use('com.punsec.demo.Util');
        Util.a.implementation;
    });
运行我们的python代码，然后可以得到以下的输出:
    $ python punsec.py
    [+] Running
    [+] Process found
    [!] Error: a(): has more than one overload, use .overload() to choose from:
    .overload('java.lang.String')
    .overload('java.lang.String', 'javax.crypto.SecretKey')
    .overload('[B', 'javax.crypto.SecretKey')
这似乎出现了一点错误。看起来是我们的Util类中有函数重载(有相同的方法名称但是拥有不同的参数)。为了克服这个问题, frida提供给我们额外的方法
**overload()** ，通过这个方法，我们可以显式地设置哪个方法来 override/hook。我们将会 hook **Util.a(String,
SecretKey)** 函数(因为它是一个负责加密的函数)来为了进行下一步分析:
但是我们怎么样才能识别出这是一个加密函数的呢？首先可以看到这个函数的返回类型是byte，很显然意味着并没有返回一个string类型，同时，本地密码初始化为1来作为第一个参数传递:
现在，让我们来修改我们的js代码为了能够合理地hook这个函数:
    Java.perform(function () {
        var MainActivity = Java.use('com.punsec.demo.MainActivity');
        MainActivity.onCreate.implementation = function(a) {
            this.onCreate(a);
            send({'encrypted':this.getString(2131099669)});
        };
        var base64 = Java.use('android.util.Base64');
        base64.decode.overload('java.lang.String', 'int').implementation = function(x, y) {
            send('Base64 Encoded : ' + x);
            var buf = new Buffer(base64.decode(x, y));
            send('Base64 Decoded : ' + buf.toString());
            return base64.decode(x, y);
        }
        var Util = Java.use('com.punsec.demo.Util');
        Util.a.overload('java.lang.String', 'javax.crypto.SecretKey').implementation = function(x, y) {
            send('UserInput : ' + x);
            return this.a(x,y);
        }
    });
再次运行我们的python程序，观察输出有哪些改变:
    $ python punsec.py
    [+] Running
    [+] Process found
    [*] Base64 Encoded : TXlTdXBlclNlY3JldEwzM3RQYXNzdzByZA==
    [*] Base64 Decoded : MySuperSecretL33tPassw0rd
    [*] UserInput : wrongSecretTest
极好的，我们现在可以拦截我们的输出了。现在我们可以发现 Util 类还有一个函数 **Util.a(byte, SecretKey)**
一直没有在app中使用，通过分析可以看到这是一个解密函数。所以现在我们该如何做呢？
加密函数已经接收到了密钥，所以我们可以在解密函数中利用，但是我们还需要第一个参数。第一个参数是一个 base64 解密的string
变量。所以让我们来修改我们的代码，为了能够在我们的
js中收到这个参数，并且过掉这个解密函数，这样的话，我们就能解密最终的Key来完成这次挑战。现在最后一次修改我们的js代码:
    Java.perform(function () {
        var MainActivity = Java.use('com.punsec.demo.MainActivity');
        MainActivity.onCreate.implementation = function(a) {
            this.onCreate(a);
            send({'encrypted':this.getString(2131099669)});
        };
        var base64 = Java.use('android.util.Base64');
        base64.decode.overload('java.lang.String', 'int').implementation = function(x, y) {
            // send('Base64 Encoded : ' + x);
            // var buf = new Buffer(base64.decode(x, y));
            // send('Base64 Decoded : ' + buf.toString());
            return base64.decode(x, y);
        }
        var Util = Java.use('com.punsec.demo.Util');
        Util.a.overload('java.lang.String', 'javax.crypto.SecretKey').implementation = function(x, y) {
            recv('encrypted', function onMessage(payload) { 
                encrypted = payload['value']; 
            });
            cipher = base64.decode(encrypted, 0); // call the above base64 method
            secret = this.a(cipher, y); // call decrypt method
            send('Decrypted : ' + secret)
            return this.a(secret,y);
        }
    });
我们把一个 **recv()**
调用放在了函数中以便于可以收到我们写的python程序中已经存储的加密string。现在解密这个已经被加密过的base64密钥并且和密钥一起发送到解密函数中。现在让我们再一次运行我们的python程序：
    $ python punsec.py
    [+] Running
    [+] Process found
    [!] Encrypted value not updated yet, try to rotate the device
    [+] Received str : vXrMphqS3bWfIGT811/V2Q==
    [*] Decrypted : knb*AS234bnm*0
woah, 我们得到了key。这也会覆盖掉任何的用户输入并将其替换为解密的string, 所以现在每一个用户输入都是起作用的:
现在我们不仅用实际的secret覆盖了用户输入，而且还覆盖了实际的secret phrase为了通过这个挑战。
假使我们的apk应用中没有解密函数，我们该怎么办呢？
不必担心，我们能巧妙的将js代码插入到package中来执行解密操作并且用必要的参数覆盖这个方法，或者我们还可以用下面的python代码来解密:
    import frida, sys, time, md5
    from Crypto.Cipher import AES
    encrypted = None
    secretKey = None
    def decrypt(encrypted, key):
      key = md5.new(key).hexdigest()[:16]
      cipher = AES.new(key)
      decrypted = cipher.decrypt(encrypted.decode('base64'))[:14]
      for i in range(1,len(encrypted.decode('base64'))/16):
        cipher = AES.new(key, AES, encodedEncrypted.decode('base64')[(i-1)*16:i*16])
        decrypted += cipher.decrypt(encodedEncrypted.decode('base64')[i*16:])[:16]
      return decrypted.strip()
    def on_message(message, data):
        global encrypted, secretKey
        try:
          if not encrypted:
            encrypted = message['payload']['encrypted']
          if not secretKey:
            secretKey = message['payload']['secretKey']
        except:
          pass
        if message['type'] == 'send':
          print('[*] {0}'.format(message['payload']))
        elif message['type'] == 'error':
          if 'ReferenceError' in message['description']:
            print('[!] Rotate the device')
          else:
            print('[!] ' + message['description'])
        else:
          print message
    jscode = open('punsec.js').read()
    print('[+] Running')
    process_name = 'com.punsec.demo'
    device = frida.get_usb_device()