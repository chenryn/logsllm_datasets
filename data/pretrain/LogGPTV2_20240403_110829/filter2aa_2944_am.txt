method.
82
CHAPTER 3
Securing the Natter API
3.4.2
Strict transport security
When a user visits a website in a browser, the browser will first attempt to connect to
the non-secure HTTP version of a page as many websites still do not support HTTPS.
A secure site will redirect the browser to the HTTPS version of the page. For an API,
you should only expose the API over HTTPS because users will not be directly con-
necting to the API endpoints using a web browser and so you do not need to support
this legacy behavior. API clients also often send sensitive data such as passwords on the
first request so it is better to completely reject non-HTTPS requests. If for some rea-
son you do need to support web browsers directly connecting to your API endpoints,
then best practice is to immediately redirect them to the HTTPS version of the API
and to set the HTTP Strict-Transport-Security (HSTS) header to instruct the browser
to always use the HTTPS version in future. If you add the following line to the after-
After filter in your main method, it will add an HSTS header to all responses:
  response.header("Strict-Transport-Security", "max-age=31536000");
TIP
Adding a HSTS header for localhost is not a good idea as it will prevent
you from running development servers over plain HTTP until the max-age
attribute expires. If you want to try it out, set a short max-age value.
3.5
Audit logging for accountability
Accountability relies on being able to determine who did what and when. The sim-
plest way to do this is to keep a log of actions that people perform using your API,
known as an audit log. Figure 3.6 repeats the mental model that you should have for
the mechanisms discussed in this chapter. Audit logging should occur after authenti-
cation, so that you know who is performing an action, but before you make authoriza-
tion decisions that may deny access. The reason for this is that you want to record all
attempted operations, not just the successful ones. Unsuccessful attempts to perform
actions may be indications of an attempted attack. It’s difficult to overstate the impor-
tance of good audit logging to the security of an API. Audit logs should be written to
durable storage, such as the file system or a database, so that the audit logs will survive
if the process crashes for any reason.
Pop quiz
5
Recalling the CIA triad from chapter 1, which one of the following security goals is
not provided by TLS?
a
Confidentiality
b
Integrity
c
Availability
The answer is at the end of the chapter.
83
Audit logging for accountability
Thankfully, given the importance of audit logging, it’s easy to add some basic logging
capability to your API. In this case, you’ll log into a database table so that you can eas-
ily view and search the logs from the API itself.
TIP
In a production environment you typically will want to send audit logs
to a centralized log collection and analysis tool, known as a SIEM (Security
Information and Event Management) system, so they can be correlated with
logs from other systems and analyzed for potential threats and unusual
behavior.
As for previous new functionality, you’ll add a new database table to store the audit
logs. Each entry will have an identifier (used to correlate the request and response
logs), along with some details of the request and the response. Add the following table
definition to schema.sql.
NOTE
The audit table should not have any reference constraints to any other
tables. Audit logs should be recorded based on the request, even if the details
are inconsistent with other data.
CREATE TABLE audit_log(
    audit_id INT NULL,
    method VARCHAR(10) NOT NULL,
    path VARCHAR(100) NOT NULL,
    user_id VARCHAR(30) NULL,
    status INT NULL,
Web browser
Natter API
Audit log
Authentication
Application
logic
Request
Response
Access control
Audit
DB
Rate-limiting
Mobile app
Audit logging occurs
after authentication so
we know who is sending
the request.
Responses should be logged
as well as requests, especially
if access is denied.
Audit logs should be
written to durable
storage.
Figure 3.6
Audit logging should occur both before a request is processed and after it completes. 
When implemented as a filter, it should be placed after authentication, so that you know who is 
performing each action, but before access control checks so that you record operations that were 
attempted but denied.
84
CHAPTER 3
Securing the Natter API
    audit_time TIMESTAMP NOT NULL
);
CREATE SEQUENCE audit_id_seq;
As before, you also need to grant appropriate permissions to the natter_api_user, so
in the same file add the following line to the bottom of the file and save:
GRANT SELECT, INSERT ON audit_log TO natter_api_user;
A new controller can now be added to handle the audit logging. You split the logging
into two filters, one that occurs before the request is processed (after authentication),
and one that occurs after the response has been produced. You’ll also allow access to the
logs to anyone for illustration purposes. You should normally lock down audit logs to
only a small number of trusted users, as they are often sensitive in themselves. Often the
users that can access audit logs (auditors) are different from the normal system adminis-
trators, as administrator accounts are the most privileged and so most in need of moni-
toring. This is an important security principle known as separation of duties.
DEFINITION
The principle of separation of duties requires that different aspects
of privileged actions should be controlled by different people, so that no one
person is solely responsible for the action. For example, a system administra-
tor should not also be responsible for managing the audit logs for that system.
In financial systems, separation of duties is often used to ensure that the per-
son who requests a payment is not also the same person who approves the
payment, providing a check against fraud.
In your editor, navigate to src/main/java/com/manning/apisecurityinaction/controller
and create a new file called AuditController.java. Listing 3.5 shows the content of this
new controller that you should copy into the file and save. As mentioned, the logging
is split into two filters: one of which runs before each operation, and one which runs
afterward. This ensures that if the process crashes while processing a request you can
still see what requests were being processed at the time. If you only logged responses,
then you’d lose any trace of a request if the process crashes, which would be a prob-
lem if an attacker found a request that caused the crash. To allow somebody reviewing
the logs to correlate requests with responses, generate a unique audit log ID in the
auditRequestStart method and add it as an attribute to the request. In the audit-
RequestEnd method, you can then retrieve the same audit log ID so that the two log
events can be tied together.
package com.manning.apisecurityinaction.controller;
import org.dalesbred.*;
import org.json.*;
import spark.*;
Listing 3.5
The audit log controller
85
Audit logging for accountability
import java.sql.*;
import java.time.*;
import java.time.temporal.*;
public class AuditController {
  private final Database database;
  public AuditController(Database database) {
    this.database = database;
  }
  public void auditRequestStart(Request request, Response response) {
    database.withVoidTransaction(tx -> {
      var auditId = database.findUniqueLong(      
          "SELECT NEXT VALUE FOR audit_id_seq");  
      request.attribute("audit_id", auditId);     
      database.updateUnique(
          "INSERT INTO audit_log(audit_id, method, path, " +
              "user_id, audit_time) " +
            "VALUES(?, ?, ?, ?, current_timestamp)",
          auditId, 
          request.requestMethod(), 
          request.pathInfo(),
          request.attribute("subject"));
    });
  }
  public void auditRequestEnd(Request request, Response response) {
    database.updateUnique(
        "INSERT INTO audit_log(audit_id, method, path, status, " +
            "user_id, audit_time) " +
          "VALUES(?, ?, ?, ?, ?, current_timestamp)",
        request.attribute("audit_id"),    
        request.requestMethod(),
        request.pathInfo(), 
        response.status(),
        request.attribute("subject"));
  }
}
Listing 3.6 shows the code for reading entries from the audit log for the last hour. The
entries are queried from the database and converted into JSON objects using a cus-
tom RowMapper method. The list of records is then returned as a JSON array. A simple
limit is added to the query to prevent too many results from being returned.
public JSONArray readAuditLog(Request request, Response response) {
    var since = Instant.now().minus(1, ChronoUnit.HOURS);        
    var logs = database.findAll(AuditController::recordToJson,   
            "SELECT * FROM audit_log " +                         
                    "WHERE audit_time >= ? LIMIT 20", since);    
Listing 3.6
Reading audit log entries
Generate a new audit id before 
the request is processed and 
save it as an attribute on the 
request.
When processing the 
response, look up 
the audit id from the 
request attributes.
Read log 
entries for 
the last hour.
86
CHAPTER 3
Securing the Natter API
    return new JSONArray(logs);    
}
private static JSONObject recordToJson(ResultSet row)                 
        throws SQLException {                                         
    return new JSONObject()                                           
            .put("id", row.getLong("audit_id"))                       
            .put("method", row.getString("method"))                   
            .put("path", row.getString("path"))                       
            .put("status", row.getInt("status"))                      
            .put("user", row.getString("user_id"))                    
            .put("time", row.getTimestamp("audit_time").toInstant()); 
}                                                                     
We can then wire this new controller into your main method, taking care to insert the
filter between your authentication filter and the access control filters for individual
operations. Because Spark filters must either run before or after (and not around) an
API call, you define separate filters to run before and after each request. 
 Open the Main.java file in your editor and locate the lines that install the filters
for authentication. Audit logging should come straight after authentication, so you
should add the audit filters in between the authentication filter and the first route
definition, as highlighted in bold in this next snippet. Add the indicated lines and
then save the file.
  before(userController::authenticate);
  var auditController = new AuditController(database);  
  before(auditController::auditRequestStart);           
  afterAfter(auditController::auditRequestEnd);         
  post("/spaces",
      spaceController::createSpace);
Finally, you can register a new (unsecured) endpoint for reading the logs. Again, in a
production environment this should be disabled or locked down:
  get("/logs", auditController::readAuditLog);
Once installed and the server has been restarted, make some sample requests, and
then view the audit log. You can use the jq utility (https://stedolan.github.io/jq/) to
pretty-print the output:
$ curl pem https://localhost:4567/logs | jq
 [
  {
    "path": "/users",
    "method": "POST",
    "id": 1,
    "time": "2019-02-06T17:22:44.123Z"
  },
Convert each entry into a JSON 
object and collect as a JSON array.
Use a helper 
method to 
convert the 
records to 
JSON.
Add these lines to 
create and register 
the audit controller.
87
Access control
  {
    "path": "/users",
    "method": "POST",
    "id": 1,
    "time": "2019-02-06T17:22:44.237Z",
    "status": 201
  },
  {
    "path": "/spaces/1/messages/1",
    "method": "DELETE",
    "id": 2,
    "time": "2019-02-06T17:22:55.266Z",
    "user": "demo"
  },...
]
This style of log is a basic access log, that logs the raw HTTP requests and responses to
your API. Another way to create an audit log is to capture events in the business logic
layer of your application, such as User Created or Message Posted events. These events
describe the essential details of what happened without reference to the specific pro-
tocol used to access the API. Yet another approach is to capture audit events directly
in the database using triggers to detect when data is changed. The advantage of these
alternative approaches is that they ensure that events are logged no matter how the
API is accessed, for example, if the same API is available over HTTP or using a binary
RPC protocol. The disadvantage is that some details are lost, and some potential
attacks may be missed due to this missing detail.
3.6
Access control
You now have a reasonably secure password-based authentication mechanism in place,
along with HTTPS to secure data and passwords in transmission between the API cli-
ent and server. However, you’re still letting any user perform any action. Any user can
post a message to any social space and read all the messages in that space. Any user
can also decide to be a moderator and delete messages from other users. To fix this,
you’ll now implement basic access control checks.
Pop quiz
6
Which secure design principle would indicate that audit logs should be managed
by different users than the normal system administrators?
a
The Peter principle
b
The principle of least privilege
c
The principle of defense in depth
d
The principle of separation of duties
e
The principle of security through obscurity
The answer is at the end of the chapter.
88
CHAPTER 3
Securing the Natter API
 Access control should happen after authentication, so that you know who is trying
to perform the action, as shown in figure 3.7. If the request is granted, then it can pro-
ceed through to the application logic. However, if it is denied by the access control
rules, then it should be failed immediately, and an error response returned to the
user. The two main HTTP status codes for indicating that access has been denied are
401 Unauthorized and 403 Forbidden. See the sidebar for details on what these two
codes mean and when to use one or the other.
HTTP 401 and 403 status codes
HTTP includes two standard status codes for indicating that the client failed security
checks, and it can be confusing to know which status to use in which situations. 
The 401 Unauthorized status code, despite the name, indicates that the server
required authentication for this request but the client either failed to provide any cre-
dentials, or they were incorrect, or they were of the wrong type. The server doesn’t know
if the user is authorized or not because they don’t know who they are. The client (or
user) may be able fix the situation by trying different credentials. A standard WWW-
Authenticate header can be returned to tell the client what credentials it needs, which
it will then return in the Authorization header. Confused yet? Unfortunately, the HTTP
specifications use the words authorization and authentication as if they were identical.
The 403 Forbidden status code, on the other hand, tells the client that its creden-
tials were fine for authentication, but that it’s not allowed to perform the operation it
requested. This is a failure of authorization, not authentication. The client cannot typ-
ically do anything about this other than ask the administrator for access.
Web browser
Natter API
Audit log
Authentication
Application
logic
Access control
Rate-limiting
Mobile app
When access is
granted, the request
proceeds to the
main API logic.
When access is
denied, the request
is immediately returned
with a 403 Forbidden.
Request
Response
Forbidden
requests
are always
logged.
Figure 3.7
Access control occurs after authentication and the request has been logged for audit. 
If access is denied, then a forbidden response is immediately returned without running any of the 
application logic. If access is granted, then the request proceeds as normal.
89
Access control
3.6.1
Enforcing authentication
The most basic access control check is simply to require that all users are authenti-
cated. This ensures that only genuine users of the API can gain access, while not
enforcing any further requirements. You can enforce this with a simple filter that runs
after authentication and verifies that a genuine subject has been recorded in the request
attributes. If no subject attribute is found, then it rejects the request with a 401 status
code and adds a standard WWW-Authenticate header to inform the client that the user
should authenticate with Basic authentication. Open the UserController.java file in
your editor, and add the following method, which can be used as a Spark before filter
to enforce that users are authenticated:
public void requireAuthentication(Request request,
    Response response) {
  if (request.attribute("subject") == null) {
    response.header("WWW-Authenticate",
        "Basic realm=\"/\", charset=\"UTF-8\"");
    halt(401);
  }
}
You can then open the Main.java file and require that all calls to the Spaces API are
authenticated, by adding the following filter definition. As shown in figure 3.7 and
throughout this chapter, access control checks like this should be added after authen-
tication and audit logging. Locate the line where you added the authentication filter
earlier and add a filter to enforce authentication on all requests to the API that start
with the /spaces URL path, so that the code looks like the following:
before(userController::authenticate);     
before(auditController::auditRequestStart);       
afterAfter(auditController::auditRequestEnd);     
before("/spaces", userController::requireAuthentication);     