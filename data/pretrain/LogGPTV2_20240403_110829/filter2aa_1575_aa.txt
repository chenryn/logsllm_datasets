Author Recar https://github.com/Ciyfly
ksubdomain浅析
ksubdomain是一款基于无状态的子域名爆破工具，类似无状态端口扫描，支持在Windows/Linux/Mac上
进行快速的DNS爆破，拥有重发机制不用担心漏包。
ksubdomain的作者是 w8ay 
ksubdomain 地址 https://github.com/boy-hack/ksubdomain 
ksubdomain的介绍 https://paper.seebug.org/1325/
主要是使用无状态的概念 直接使用网卡发包而不是通过socket去操作 
对于子域名枚举来说 只发一个udp包等等dns服务器的应答 
ksubdomain使用pcap发包和接收数据，会直接将数据包发送至网卡，不经过系统
通过设计了一个状态表 来控制这个udp的丢包和状态
文章目录
ksubdomain浅析
文章目录
简易流程图
代码目录
cmd
core
runner
test
cmd
enumCommand
runner
runner.New
获取pcap版本信息
获取网卡信息并写到yaml文件中
创建内存简易数据库
runner.loadTargets 获取发包总数
core.IsWildCard(domain) 泛解析检测
RunEnumeration
接收协程 runner.recvChanel
发送协程 runner.sendCycle
send 发送dns包
处理结果并输出 runner.handleResult
runner.PrintStatus 任务情况输出
通过定时器和状态表阻塞主进程
重试 runner.retry
Close
verifyCommand 验证功能
testCommand 测试功能 计算发包速率
runner.TestSpeed
总结
简易流程图
代码目录
cmd
包含对命令行的支持 并且拆开了 主程序  enum   test   verify 的命令到不同的go文件
cmd 
├── cmd.go 
├── enum.go 
├── test.go 
└── verify.go 
core
主要的核心逻辑代码等包含  日志   配置文件   banner  是代码的主体
core/ 
├── banner.go 
├── conf 
│   └── config.go 
├── data 
│   ├── subdomain.txt 
│   └── subnext.txt 
├── device 
│   ├── device.go 
│   └── struct.go 
├── gologger 
│   └── gologger.go 
├── options 
│   └── options.go 
├── struct.go 
├── subdata.go 
├── util.go 
└── wildcard.go 
runner
是发包接收包 核心代码
runner/ 
├── recv.go 
├── result.go 
├── retry.go 
├── runner.go 
├── runner_test.go 
├── send.go 
├── statusdb 
│   └── db.go 
└── testspeed.go 
test
就是测试代码了
test/ 
└── checkservername 
    └── main.go 
可以明显看出来代码设计架构等清晰
我们这里按cmd的使用方式来跟进代码
cmd
 cmd\cmd.go  
使用cli 构建命令行解析
app := &cli.App{ 
    Name:    conf.AppName, 
    Version: conf.Version, 
    Usage:   conf.Description, 
    Commands: []*cli.Command{ 
        enumCommand, 
        verifyCommand, 
        testCommand, 
    },
} 
包含三个子命令行
这个的功能是输出主的help
NAME: 
   KSubdomain - 无状态子域名爆破工具 
USAGE: 
   ksubdomain [global options] command [command options] [arguments...] 
VERSION: 
   1.8.2 
COMMANDS: 
   enum, e    枚举域名 
   verify, v  验证模式 
   test       测试本地网卡的最大发送速度 
   help, h    Shows a list of commands or help for one command 
GLOBAL OPTIONS: 
   --help, -h     show help (default: false) 
   --version, -v  print the version (default: false) 
enumCommand
枚举功能
 cmd\enum.go  
枚举相关的参数
&cli.StringFlag{ 
    Name:     "domain", 
    Aliases:  []string{"d"}, 
    Usage:    "爆破的域名", 
    Required: false, 
    Value:    "", 
}, 
&cli.StringFlag{ 
    Name:     "domainList", 
    Aliases:  []string{"dl"}, 
    Usage:    "从文件中指定域名", 
    Required: false, 
    Value:    "", 
}, 
&cli.StringFlag{ 
    Name:     "filename", 
    Aliases:  []string{"f"}, 
    Usage:    "字典路径", 
    Required: false, 
    Value:    "", 
}, 
&cli.BoolFlag{ 
    Name:  "skip-wild", 
    Usage: "跳过泛解析域名", 
    Value: false, 
}, 
&cli.IntFlag{ 
    Name:    "level", 
    Aliases: []string{"l"}, 
    Usage:   "枚举几级域名，默认为2，二级域名", 
    Value:   2, 
}, 
&cli.StringFlag{ 
    Name:    "level-dict", 
    Aliases: []string{"ld"}, 
    Usage:   "枚举多级域名的字典文件，当level大于2时候使用，不填则会默认", 
    Value:   "", 
}, 
从参数获取需要测试的一级域名
指定的单个域名 文件读取的域名都加到  domains 
    var domains []string 
    // handle domain 
    if c.String("domain") != "" { 
        domains = append(domains, c.String("domain")) 
    } 
    if c.String("domainList") != "" { 
        dl, err := core.LinesInFile(c.String("domainList")) 
        if err != nil { 
            gologger.Fatalf("读取domain文件失败:%s\n", err.Error()) 
        } 
        domains = append(dl, domains...) 
    } 
    levelDict := c.String("level-dict") 
    var levelDomains []string 
    if levelDict != "" { 
        dl, err := core.LinesInFile(levelDict) 
        if err != nil { 
            gologger.Fatalf("读取domain文件失败:%s,请检查--level-dict参数\n", err.Error()) 
        } 
        levelDomains = dl 
    } else if c.Int("level") > 2 { 
        levelDomains = core.GetDefaultSubNextData() 
    } 
检验设置参数值 传递给 runner.New方法 
返回一个runner结构体 
 RunEnumeration  枚举运行入口 
 Close  关闭
    opt := &options.Options{ 
        Rate:         options.Band2Rate(c.String("band")), 
        Domain:       domains, 
        FileName:     c.String("filename"), 
        Resolvers:    options.GetResolvers(c.String("resolvers")), 
        Output:       c.String("output"), 
        Silent:       c.Bool("silent"), 
        Stdin:        c.Bool("stdin"), 
        SkipWildCard: c.Bool("skip-wild"), 
        TimeOut:      c.Int("timeout"), 
        Retry:        c.Int("retry"), 
        Method:       "enum", 
        OnlyDomain:   c.Bool("only-domain"), 
        NotPrint:     c.Bool("not-print"), 
        Level:        c.Int("level"), 
        LevelDomains: levelDomains, 
    } 
    opt.Check() 
    r, err := runner.New(opt) 
    if err != nil { 
        gologger.Fatalf("%s\n", err.Error()) 
        return nil 
    } 
    r.RunEnumeration() 
    r.Close() 
    return nil 
}, 
runner
接下来我们跟入 runner来详细看下 New方法做了什么 枚举运行又做了什么
runner.New
首先runner的结构体 在其他语言中可以理解为一个类
type runner struct { 
ether           *device.EtherTable //本地网卡信息 
hm              *statusdb.StatusDb 
options         *options2.Options 
limit           ratelimit.Limiter 
handle          *pcap.Handle 
successIndex    uint64 
sendIndex       uint64 
recvIndex       uint64 
faildIndex      uint64 
sender          chan string 
recver          chan core.RecvResult 
freeport        int 
dnsid           uint16 // dnsid 用于接收的确定ID 
maxRetry        int    // 最大重试次数 
timeout         int64  // 超时xx秒后重试 
ctx             context.Context 
fisrtloadChanel chan string // 数据加载完毕的chanel 
startTime       time.Time 
domains         []string 
} 
New方法 是传入  opt  返回runner 其实就是对opt赋值并实例一个runner
跟入New方法
1. 获取pcap版本
2. 获取使用的网卡
3. 创建状态表
4. 获取使用网卡的监听handler  device.PcapInit(r.ether.Device) 
5. 获取发包总数  runner.loadTargets 
6. 如果枚举域名超过2级 则所有包数为 字典包与域名的乘积 乘上 测试域名的数量的测试层级的幂
7. 计算calcLimit 为 (发包总数/超时时间) *0.85 如果小于1k则为1k
8. 真正的limit为 宽带的下行速度(命令行参数 --band/-b) 和calcLimit的最大值
9. 初始化限流器  r.limit = ratelimit.New(limit)  使用的是uber-go的基于漏桶实现的
 https://github.com/uber-go/ratelimit/ 
10. 初始化发送管道 接收管道
r.sender = make(chan string, 99)          // 多个协程发送 
r.recver = make(chan core.RecvResult, 99) // 多个协程接收 
11. 获取空闲端口  freeport.GetFreePort() 
func GetFreePort() (int, error) { 
addr, err := net.ResolveTCPAddr("tcp", "localhost:0") 
if err != nil { 
return 0, err 
} 
l, err := net.ListenTCP("tcp", addr) 
if err != nil { 
return 0, err 
} 
defer l.Close() 
return l.Addr().(*net.TCPAddr).Port, nil 
} 
12. 设置一些属性 例如dnsid为 0x2021  应该是2021年开发的把 重试次数超时时间 上下文等数据赋值给
runner
13. 将测试的域名发到send管道 并为管道  fisrtloadChanel  传入值
14. 返回runner
详细见下面New代码及部分函数
func New(options *options2.Options) (*runner, error) { 
var err error 
version := pcap.Version() 
r := new(runner) 
gologger.Infof(version + "\n") 
r.options = options 
r.ether = GetDeviceConfig() 
r.hm = statusdb.CreateMemoryDB() 
gologger.Infof("DNS:%s\n", options.Resolvers) 
r.handle, err = device.PcapInit(r.ether.Device) 
if err != nil { 
return nil, err 
} 
// 根据发包总数和timeout时间来分配每秒速度 
allPacket := r.loadTargets() 
if options.Level > 2 { 
allPacket = allPacket * int(math.Pow(float64(len(options.LevelDomains)), float64(options.Level-2)
} 
calcLimit := float64(allPacket/options.TimeOut) * 0.85 
if calcLimit  2 { 