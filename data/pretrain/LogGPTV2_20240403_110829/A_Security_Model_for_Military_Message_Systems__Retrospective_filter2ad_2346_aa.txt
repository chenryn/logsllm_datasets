title:A Security Model for Military Message Systems: Retrospective
author:Carl E. Landwehr and
Constance L. Heitmeyer and
John D. McLean
A Security Model for Military Message Systems: Retrospective 
Constance L. Heitmeyer 
John D. McLean 
Naval Research Laboratory 
PI:EMAIL 
   Naval Research Laboratory 
PI:EMAIL 
Carl E. Landwehr 
Mitretek Systems, Inc. 
PI:EMAIL 
1
Retrospective
In  the  late  1970’s  and  early  1980’s,  the  military 
conducted  an  experiment 
(the  Military  Message 
Experiment,  or  MME)  to  investigate  replacing  existing 
message  systems  in  use  at  CINCPAC  that  were  based  on 
the  AUTODIN  system,  with  local  distribution  of  copies 
via a pneumatic tube system, with a new system based on 
the  ARPANET  and  e-mail  that  provided  a  simulated 
multilevel  secure  (MLS)  interface.    At  the  same  time, 
research  was  underway  to  develop  multilevel  secure 
operating  systems.    Experiences  with  both  the  MME  and 
with prototype MLS systems led to research conducted at 
the Naval Research Laboratory to specify and prototype a 
family  of  military  message  systems  (MMS)  based  on 
software  engineering  principles  and  on  specifying  the 
desired  security  behavior  at  the  application  level,  rather 
than  at  the  operating  system  level.  The  resulting  security 
model  was  published  as  an  NRL  technical  report  and 
subsequently in ACM Transactions on Computer Systems 
in August, 1984.   
The  approach  to  developing  informal  security  models 
presented  here  remains  quite  relevant.  Efforts  to  develop 
assurance  arguments  for  today’s  systems  can  in  many 
cases be related to the approach taken in this work [25]. 
This  paper  was  the  first  in  an  archival  journal  to 
present  a 
security  model  based  on  application 
requirements as opposed to operating system structure.  It 
argues that this is the appropriate orientation for a security 
model that is to be understood by users, and it presents a 
framework for developing and expressing security models 
informally,  using  natural  language,  and  then  formalizing 
the  result.    The  informal  model  is  accessible  to  users, 
while the formal model provides the precision needed for 
designing  a  system  and  determining  whether  an 
implementation enforces the model.   
The  example  presented,  developed  in  the  context  of 
military  message  systems,  includes  a  number  of  concepts 
that are appropriate for other applications as well.  Among 
1  This  retrospective  was  written  by  the  first  author  in  August,  2001.  It 
draws  on  an  introduction  written  when  the  paper  was  anthologized  in 
about 1990. 
these  are  the  concepts  of  roles—job-related  sets  of 
permissions—and  of  multilevel  object—an  object  (here 
termed a container) that has a security level of its own and 
also  encloses  other  objects  that  retain  their  own  security 
levels.   
Each  user  had  an  allowed  set  of  roles,  and  the  access 
controls  on  objects  in  the  system  could  include  roles  as 
well as userIDs.  A user could occupy one or more roles at 
a time, and some roles could be occupied only by a single 
user at a given time.  These constraints were based on the 
observed needs of operational message systems to support 
one  person  acting  for  another  as  shifts  and  watches 
change,  and  for  a  single  point  of  control  (though  not 
necessarily  a  single 
like 
message release. 
individual)  for  operations 
The approach to multilevel objects exploits an analogy 
with  the  physical  world  of  safes,  file  folders,  and 
documents  to  provide  a  model  that  application  users  can 
understand,  and  in  which  they  can  apply  their  intuition 
about  familiar  objects.    Subsequent  work  has  debated 
whether  multilevel  objects  need  to  be  reflected  in  the 
abstractions  provided  by  operating  systems,  but  their 
appeal  to  users  seems  beyond  question.  In  fact,  much  of 
the work reported in this paper can fit quite naturally into 
the framework provided by object-oriented databases. 
An informal model has four parts:  definitions of terms 
used  in  the  model,  a  brief  prose  description  of  system 
operation 
the  security  viewpoint,  a  set  of 
assumptions,  and  a  set  of  assertions.  Assumptions  are 
statements  that  must  be  true  if  system  security  is  to  be 
preserved, but that cannot be maintained by the computer 
system  itself.    For  example,  users  entering  message  text 
must  be  relied  on 
input  properly.  
Assertions  are  statements  that  must  be  true  for  system 
security to be preserved and that the computer system can 
enforce.   
to  classify 
from 
the 
It  is  the  assertions  of  the  model  that  are  re-stated 
formally.  In  contrast  with  the  structure  of  most  other 
security  models,  security  assertions  apply  without 
exception  to  all  system  users  and  entities.    The  formal 
statement  of  the  model's  assertions  is  notable  for  being 
based on both information flow and access control and for 
being  the  first  state-machine  formalization  to  contain 
transition restrictions as well as state restrictions.   
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:07:55 UTC from IEEE Xplore.  Restrictions apply. 
Prior  to  its  publication,  a  draft  version  of  the  security 
model  formed  the  basis  for  a  study  of  database  security 
problems  conducted  under  the  auspices  of  the  National 
Academy  of  Sciences  in  the  early  1980’s  to  investigate 
problems 
in  multilevel  secure  document  handling 
systems.    In  this  context,  the  message  system  example 
was  considered  as  a  restricted  version  of  a  database 
management system.  
Many  other 
technical  reports  and  papers  were 
produced  by  the  SMMS  research  project,  covering 
software  design, 
implementation,  and  operation  of 
prototype systems based on this model.  Some of these are 
included  in  the  bibliography at the end of this paper [27-
38].    None  of  the  prototypes  made  the  transition  to  an 
operational  system,  but  the  ideas  in  this  paper  did 
the  design  of  some  classified  operational 
influence 
systems. 
  The 
security  modeling  approach  was 
subsequently  applied  to  several  operational  systems  as 
documented in [26]. 
The paper as presented below is substantially the same 
as published in ACM Transactions on Computer Systems, 
except  for  the  correction  of  a  few  minor  errors  in  the 
original publication. 
Abstract2
Military  systems  that  process  classified  information 
must  operate  in  a  secure  manner;  that  is,  they  must 
adequately  protect 
information  against  unauthorized 
disclosure,  modification,  and  withholding.  A  goal  of 
current  research  in  computer  security  is  to  facilitate  the 
construction  of  multilevel  secure  systems,  systems  that 
protect information of different classifications from users 
with  different  clearances.  Security  models  are  used  to 
define  the  concept  of  security  embodied  by  a  computer 
system.  A  single  model,  called  the  Bell  and  LaPadula 
model,  has  dominated  recent  efforts  to  build  secure 
systems  but  has  deficiencies.  We  are  developing  a  new 
approach  to  defining  security  models  based  on  the  idea 
that  a  security  model  should  be  derived  from  a  specific 
application.  To  evaluate  our  approach,  we  have 
formulated  a  security  model  for  a  family  of  military 
message  systems.  This  paper  introduces  the  message 
system  application,  describes  the  problems  of  using  the 
Bell-LaPadula  model  in  real  applications,  and  presents 
our  security  model  both 
formally. 
Significant aspects of the security model are its definition 
of  multilevel  objects  and  its  inclusion  of  application-
dependent  security  assertions.  Prototypes  based  on  this 
model are being developed. 
informally  and 
Categories and Subject Descriptors: C.2.0 [Computer-
Communication  Networks]:  General--Security  and 
protection;  D.4.6  [Operating  Systems]:  Security  and 
Protection--access  controls;  information  flow  controls; 
2 The work described in this paper was performed while all three authors 
were associated with the Naval Research Laboratory. 
verification;  F.3.1  [Logics  and  Meaning  of  Programs]: 
Specifying and Verifying and Reasoning about Programs-
-assertions;  invariants;  specification  techniques;  H.4.3 
[Information  Systems  Applications]:  Communications 
Applications--electronic mail 
General Terms: Security, Verification 
Additional Key Words and Phrases: Storage channels, 
message systems, confinement 
1 
Introduction 
if 
is  multilevel  secure 
A system is secure if it adequately protects information 
that 
it  processes  against  unauthorized  disclosure, 
unauthorized  modification,  and  unauthorized  withholding 
(also  called  denial  of  service).  We  say  "adequately" 
because  no  practical  system  can  achieve  these  goals 
without  qualification;  security  is  inherently  relative.  A 
secure  system 
it  protects 
information  of  different  classifications  from  users  with 
different  clearances;  thus  some  users  are  not  cleared  for 
all  of  the  information  that  the  system  processes.  Security 
models  have  been  developed  both  to  describe  the 
protection that a computer actually provides and to define 
the  security  rules  it  is  required  to  enforce  [14].  In  our 
view,  a  security  model  should  enable  users to understand 
how  to  operate  the  system  effectively,  implementors  to 
understand  what  security  controls  to  build,  and  certifiers 
to  determine  whether  the  system's  security  controls  are 
consistent  with  the  relevant  policies  and  directives  and 
whether these controls are implemented correctly [13]. 
In  recent  years,  the  Bell  and  LaPadula  model  [4,  8], 
has  dominated  efforts  to  build  secure  systems.  The 
publication  of  this  model  advanced  the  technology  of 
computer  security  by  providing  a  mathematical  basis  for 
examining  the  security  provided  by  a  given  system. 
Moreover,  the  model  was  a  major  component  of  one  of 
the  first  disciplined  approaches 
to  building  secure 
systems.  The  model  describes  a  secure  computer  system 
abstractly,  without  regard  to  the  system's  application.  Its 
approach  is  to  define  a  set  of  system  constraints  whose 
enforcement  will  prevent  any  application  program 
executed  on  the  system  from  compromising  system 
security.  The  model  includes  subjects,  which  represent 
active  entities in a system (such as active processes), and 
objects, which represent passive entities (such as files and 
inactive  processes).  Both  subjects  and  objects  have 
security levels, and the constraints on the system take the 
form  of  axioms  that  control  the  kinds  of  access  subjects 
may have to objects. 
One  of  the  axioms,  called  the  *-property  ("star-
property"),  prohibits  a  subject  from  simultaneously 
having read access to one object at a given security level 
and  write  access  to  another  object  at  a  lower  security 
level. Its purpose is to prevent subjects from moving data 
of a given security level to an object marked with a lower 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:07:55 UTC from IEEE Xplore.  Restrictions apply. 
level.  Originally, 
the  model  applied 
this 
security 
constraint  to  all  subjects,  since  a  subject  might  execute 
any arbitrary application program, and arbitrary programs 
executed  without  this  constraint  could  indeed  cause 
security violations. 
A  system  that  strictly  enforces  the  axioms  of  the 
original  Bell-LaPadula model is often impractical: in real 
systems,  users  may  need  to  invoke  operations  that, 
although  they  do  not  violate  our  intuitive  concept  of 
security,  would  require subjects to violate the *-property. 
For  example,  a  user  may  need 
to  extract  an 
UNCLASSIFIED  paragraph  from  a  CONFIDENTIAL 