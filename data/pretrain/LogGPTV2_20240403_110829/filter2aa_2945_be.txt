{
    ...
}
The derived class inherits from the base class, and the methods in the base
class become part of the derived class. In C#, a class is allowed to derive
from, at most, one base class; a class is not allowed to derive from two or
more classes. However, unless DerivedClass is declared as sealed, you can
use the same syntax to derive other classes that inherit from DerivedClass.
(You will learn about sealed classes in Chapter 13, “Creating interfaces and
defining abstract classes.”)
Click here to view code image
class DerivedSubClass : DerivedClass
{
    ...
}
Continuing the example described earlier, you could declare the Mammal
class as follows. The methods Breathe and SuckleYoung are common to all
mammals.
Click here to view code image
class Mammal
{
    public void Breathe()
    {
        ...
    }
    public void SuckleYoung()
    {
        ...
    }
    ...
}
Download from finelybook PI:EMAIL
413
You could then define classes for each different type of mammal, adding
more methods as necessary, such as in the following example:
Click here to view code image
class Horse : Mammal
{
   ...
    public void Trot()
    {
        ...
    }
}
class Whale : Mammal
{
    ...
    public void Swim()
    {
        ...
    }
}
Note If you are a C++ programmer, you should notice that you do not
and cannot explicitly specify whether the inheritance is public, private,
or protected. C# inheritance is always implicitly public. If you’re
familiar with Java, note the use of the colon and that there is no extends
keyword.
If you create a Horse object in your application, you can call the Trot,
Breathe, and SuckleYoung methods:
Click here to view code image
Horse myHorse = new Horse();
myHorse.Trot();
myHorse.Breathe();
myHorse.SuckleYoung();
Similarly, you can create a Whale object, but this time you can call the
Swim, Breathe, and SuckleYoung methods; Trot is not available because it is
Download from finelybook PI:EMAIL
414
defined only in the Horse class.
Important Inheritance applies only to classes, not to structures. You
cannot define your own inheritance hierarchy with structures, and you
cannot define a structure that derives from a class or another structure.
All structures actually inherit from an abstract class named
System.ValueType. (Chapter 13 explores abstract classes.) This is purely
an implementation detail of the way in which the Microsoft .NET
Framework defines the common behavior for stack-based value types;
you are unlikely to make direct use of ValueType in your own
applications.
The System.Object class revisited
The System.Object class is the root class of all classes. All classes implicitly
derive from System.Object. Consequently, the C# compiler silently rewrites
the Mammal class as the following code (which you can write explicitly if
you really want to):
Click here to view code image
class Mammal : System.Object
{
    ...
}
Any methods in the System.Object class are automatically passed down
the chain of inheritance to classes that derive from Mammal, such as Horse
and Whale. In practical terms, this means that all classes that you define
automatically inherit all the features of the System.Object class. This includes
methods such as ToString (discussed in Chapter 2, “Working with variables,
operators, and expressions”), which is used to convert an object to a string,
typically for display purposes.
Download from finelybook PI:EMAIL
415
Calling base-class constructors
In addition to the methods that it inherits, a derived class automatically
contains all the fields from the base class. These fields usually require
initialization when an object is created. You typically perform this kind of
initialization in a constructor. Remember that all classes have at least one
constructor. (If you don’t provide one, the compiler generates a default
constructor for you.)
It is good practice for a constructor in a derived class to call the
constructor for its base class as part of the initialization, which enables the
base-class constructor to perform any additional initialization that it requires.
You can specify the base keyword to call a base-class constructor when you
define a constructor for an inheriting class, as shown in this example:
Click here to view code image
class Mammal // base class
{
    public Mammal(string name)  // constructor for base class
    {
        ...
    }
    ...
}
class Horse : Mammal // derived class
{
    public Horse(string name)
        : base(name) // calls Mammal(name)
    {
        ...
    }
    ...
}
If you don’t explicitly call a base-class constructor in a derived-class
constructor, the compiler attempts to silently insert a call to the base class’s
default constructor before executing the code in the derived-class constructor.
Taking the earlier example, the compiler rewrites this:
Click here to view code image
class Horse : Mammal
{
    public Horse(string name)
    {
Download from finelybook PI:EMAIL
416
             ...
    }
    ...
}
as this:
Click here to view code image
class Horse : Mammal
{
    public Horse(string name)
        : base()
    {
        ...
    }
    ...
}
This works if Mammal has a public default constructor. However, not all
classes have a public default constructor (for example, remember that the
compiler generates a default constructor only if you don’t write any
nondefault constructors), in which case, forgetting to call the correct base-
class constructor results in a compile-time error.
Assigning classes
Previous examples in this book show how to declare a variable by using a
class type and how to use the new keyword to create an object. There are also
examples of how the type-checking rules of C# prevent you from assigning
an object of one type to a variable declared as a different type. For example,
given the definitions of the Mammal, Horse, and Whale classes shown here,
the code that follows these definitions is illegal:
Click here to view code image
class Mammal
{
    ...
}
class Horse : Mammal
{
    ...
}
Click here to view code image
Download from finelybook PI:EMAIL
417
class Whale : Mammal
{
    ...
}
...
Horse myHorse = new Horse(...);
Whale myWhale = myHorse;             // error - different types
However, it is possible to refer to an object from a variable of a different
type as long as the type used is a class that is higher up the inheritance
hierarchy. So the following statements are legal:
Click here to view code image
Horse myHorse = new Horse(...);
Mammal myMammal = myHorse; // legal, Mammal is the base class of
Horse
If you think about it in logical terms, all Horses are Mammals, so you can
safely assign an object of type Horse to a variable of type Mammal. The
inheritance hierarchy means that you can think of a Horse simply as a special
type of Mammal; it has everything that a Mammal has with a few extra bits
defined by any methods and fields you added to the Horse class. You can
also make a Mammal variable refer to a Whale object. There is one
significant limitation, however: When referring to a Horse or Whale object
by using a Mammal variable, you can access only methods and fields that are
defined by the Mammal class. Any additional methods defined by the Horse
or Whale class are not visible through the Mammal class.
Click here to view code image
Horse myHorse = new Horse(...);
Mammal myMammal = myHorse;
myMammal.Breathe();     // OK - Breathe is part of the Mammal class
myMammal.Trot();        // error - Trot is not part of the Mammal
class
Note The preceding discussion explains why you can assign almost
anything to an object variable. Remember that object is an alias for
System.Object, and all classes inherit from System.Object, either directly
or indirectly.
Download from finelybook PI:EMAIL
418
Be warned that the converse situation is not true. You cannot unreservedly
assign a Mammal object to a Horse variable:
Click here to view code image
Mammal myMammal = new Mammal(...);
Horse myHorse = myMammal;   // error
This looks like a strange restriction, but remember that not all Mammal
objects are Horses—some might be Whales. You can assign a Mammal
object to a Horse variable as long as you first check that the Mammal is really
a Horse, by using the as or is operator or by using a cast (Chapter 7,
“Creating and managing classes and objects,” discusses the is and as
operators and casts). The code example that follows uses the as operator to
check that myMammal refers to a Horse, and if it does, the assignment to
myHorseAgain results in myHorseAgain referring to the same Horse object.
If myMammal refers to some other type of Mammal, the as operator returns
null instead.
Click here to view code image
Horse myHorse = new Horse(...);
Mammal myMammal = myHorse;               // myMammal refers to a
Horse
...
Horse myHorseAgain = myMammal as Horse;  // OK - myMammal was a Horse
...
Whale myWhale = new Whale(...);
myMammal = myWhale;
...
myHorseAgain = myMammal as Horse;       // returns null - myMammal
was a Whale
Declaring new methods
One of the hardest tasks in the realm of computer programming is thinking up
unique and meaningful names for identifiers. If you are defining a method for
a class and that class is part of an inheritance hierarchy, sooner or later you
are going to try to reuse a name that is already in use by one of the classes
further up the hierarchy. If a base class and a derived class happen to declare
two methods that have the same signature, you will receive a warning when
Download from finelybook PI:EMAIL
419
you compile the application.
Note The method signature refers to the name of the method and the
number and types of its parameters, but not its return type. Two
methods that have the same name and that take the same list of
parameters have the same signature, even if they return different types.
A method in a derived class masks (or hides) a method in a base class that
has the same signature. For example, if you compile the following code, the
compiler generates a warning message informing you that Horse.Talk hides
the inherited method Mammal.Talk:
Click here to view code image
class Mammal
{
    ...
    public void Talk() // assume that all mammals can talk
    {
        ...
    }
}
class Horse : Mammal
{
         ...
    public void Talk()  // horses talk in a different way from other
mammals!
    {
        ...
    }
}
Although your code will compile and run, you should take this warning
seriously. If another class derives from Horse and calls the Talk method, it
might be expecting the method implemented in the Mammal class to be
called. However, the Talk method in the Horse class hides the Talk method in
the Mammal class, and the Horse.Talk method will be called instead. Most of
the time, such a coincidence is at best a source of confusion, and you should
consider renaming methods to avoid clashes. However, if you’re sure that
Download from finelybook PI:EMAIL
420
you want the two methods to have the same signature, thus hiding the
Mammal.Talk method, you can silence the warning by using the new
keyword, as follows:
Click here to view code image
class Mammal
{
    ...
    public void Talk()
    {
        ...
    }
}
class Horse : Mammal
{
    ...
    new public void Talk()
    {
        ...
    }
}
Using the new keyword like this does not change the fact that the two
methods are completely unrelated and that hiding still occurs. It just turns the
warning off. In effect, the new keyword says, “I know what I’m doing, so
stop showing me these warnings.”
Declaring virtual methods
Sometimes, you do want to hide the way in which a method is implemented
in a base class. As an example, consider the ToString method in
System.Object. The purpose of ToString is to convert an object to its string
representation. Because this method is very useful, it is a member of the
System.Object class, thereby automatically providing all classes with a
ToString method. However, how does the version of ToString implemented
by System.Object know how to convert an instance of a derived class to a
string? A derived class might contain any number of fields with interesting
values that should be part of the string. The answer is that the implementation
of ToString in System.Object is actually a bit simplistic. All it can do is
convert an object to a string that contains the name of its type, such as
“Mammal” or “Horse.” This is not very useful after all. So why provide a
Download from finelybook PI:EMAIL
421
method that is so useless? The answer to this second question requires a bit of
detailed thought.
Obviously, ToString is a fine idea in concept, and all classes should
provide a method that can be used to convert objects to strings for display or
debugging purposes. It is only the implementation that requires attention. In
fact, you are not expected to call the ToString method defined by
System.Object; it is simply a placeholder. Instead, you might find it more
useful to provide your own version of the ToString method in each class you
define, overriding the default implementation in System.Object. The version
in System.Object is there only as a safety net, in case a class does not
implement or require its own specific version of the ToString method.
A method that is intended to be overridden is called a virtual method. You
should be clear on the difference between overriding a method and hiding a
method. Overriding a method is a mechanism for providing different
implementations of the same method—the methods are all related because
they are intended to perform the same task, but in a class-specific manner.
Hiding a method is a means of replacing one method with another—the
methods are usually unrelated and might perform totally different tasks.
Overriding a method is a useful programming concept; hiding a method is
often an error.
You can mark a method as a virtual method by using the virtual keyword.
For example, the ToString method in the System.Object class is defined like
this:
Click here to view code image
namespace System
{
    class Object
    {
        public virtual string ToString()
        {
            ...
        }
        ...
    }
    ...
}
Download from finelybook PI:EMAIL
422
Note If you have experience developing in Java, you should note that
C# methods are not virtual by default.
Declaring override methods
If a base class declares that a method is virtual, a derived class can use the
override keyword to declare another implementation of that method, as
demonstrated here:
Click here to view code image
class Horse : Mammal
{
    ...
    public override string ToString()
    {
        ...
    }
}
The new implementation of the method in the derived class can call the
original implementation of the method in the base class by using the base
keyword, like this:
Click here to view code image
public override string ToString()
{
    string temp = base.ToString();
    ...
}
There are some important rules you must follow when you declare
polymorphic methods (as discussed in the sidebar “Virtual methods and
polymorphism”) by using the virtual and override keywords:
A virtual method cannot be private; it is intended to be exposed to
other classes through inheritance. Similarly, override methods cannot
be private because a class cannot change the protection level of a
method that it inherits. However, override methods can have a special
Download from finelybook PI:EMAIL
423
form of privacy known as protected access, as you will find out in the
next section.
The signatures of the virtual and override methods must be identical;
they must have the same name, number, and types of parameters. Also,
both methods must return the same type.
You can only override a virtual method. If the base class method is not
virtual and you try to override it, you’ll get a compile-time error. This
is sensible; it should be up to the designer of the base class to decide
whether its methods can be overridden.
If the derived class does not declare the method by using the override
keyword, it does not override the base class method; it hides the
method. In other words, it becomes an implementation of a completely
different method that happens to have the same name. As before, this
will cause a compile-time warning, which you can silence by using the
new keyword, as previously described.
An override method is implicitly virtual and can itself be overridden in
a further derived class. However, you are not allowed to explicitly
declare that an override method is virtual by using the virtual keyword.
Virtual methods and polymorphism
Using virtual methods, you can call different versions of the same
method, based on the object type determined dynamically at runtime.
Consider the following examples of classes that defi ne a variation on
the Mammal hierarchy described earlier:
Click here to view code image
class Mammal
{
    ...
    public virtual string GetTypeName()
    {
        return "This is a mammal" ;
    }
}