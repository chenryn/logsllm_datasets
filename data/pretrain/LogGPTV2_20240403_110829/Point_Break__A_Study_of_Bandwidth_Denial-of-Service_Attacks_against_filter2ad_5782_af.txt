61
8.1
Stop∗
953
36
26
6.9
6.7
7.4 Attack Cost
We assume that our DoS attacks could be launched on a ded-
icated server. In §3.2 we describe that the amortized cost in
the dedicated server model for 1 Gbit/s of trafﬁc is $0.70/hr.
(which includes the monthly hardware rental and any band-
width costs). Our φ=20k attack with the Stop Reading strat-
egy requires only 288 Mbit/s (36 MiB/s) in our scaled down
private Tor network which contains about 10% of both the
number of relays in and the bandwidth capacity of the public
Tor network (due to the relay sampling approach of Jansen
et al. [48]).
If we assume that the attack scales linearly
with Tor’s bandwidth capacity, then our attack would require
10·288 Mbit/s≈3 Gbit/s. The cost to rent three dedicated
servers supporting 1 Gbit/s of trafﬁc for one month would
then be $0.70·3·24·31≈$1.6K. (The regular version of the
attack consumes ≈4 times as much bandwidth, requiring 12
dedicated servers and costing $0.70·12·24·31≈$6.3K/mo.)
Our attack additionally utilizes multiple client IP ad-
dresses, each of which is used to maintain an average
of 1,000/634≈1.6 circuits per relay.
If (i) the public
Tor network contains 10·634=6,340 relays, (ii) we create
10·20,000=200,000 circuits, and (iii) we maintain the av-
erage 1.6 circuits per relay per client IP address rate, then we
would require 200,000/6,340/1.6≈20 client IP addresses. If
we assume that one IP address is provided for each of our
three dedicated servers, and the cost is $5 per additional IP
address, then the additional monthly cost for purchasing 17
more IP addresses is 17·$5=$85.
Thus, we estimate that the total cost to run a φ=200k cir-
cuit attack using the Stop Reading strategy against the public
Tor network is still $1.6K/mo. due to rounding. (We esti-
mate that the cost of the regular version of the attack is still
$6.3K/mo. due to rounding.)
7.5 Discussion
Limitations: We used Shadow in order to ethically con-
duct full-network Tor simulations, and simulation inherently
incurs some inaccuracy. However, while no simulator is
perfect, Shadow has been shown to exhibit network behav-
ior and performance that is very similar to Linux [50, 52].
Additionally, Shadow has been used to measure perfor-
mance when Tor is generally overloaded (as in our evalua-
tion) [47, 49, 52], and it has been used to measure the effects
of speciﬁc DoS attacks against Tor [51].
Our experiments are limited in scale. We simulated a pri-
vate Tor network with about 10% of both the number of re-
lays in and the bandwidth capacity of the public Tor network.
The cost to the adversary to conduct our attack may not scale
linearly with the amount of Tor capacity as we assumed in
§7.4, or there may be other issues that arise when scaling up
our attack. We note that we are limited by the capabilities of
our tools and resources and highlight that it would be uneth-
ical to conduct this work at scale on the public Tor network.
Attack Extensions: We did not evaluate the effects of onion
connection tunneling on DoS (i) because Tor could prevent
the attack by updating the default exit policy to prevent ex-
iting to a Tor relay, and (ii) in order to provide a more con-
servative estimate of the bandwidth and monetary costs of
performing our bandwidth DoS attack. However, we believe
that the technique would be simple to deploy. Additionally,
it would be interesting to explore the effects of our attacks
on performance when targeting subgroups of relays.
1836    28th USENIX Security Symposium
USENIX Association
050100150200AttackerThroughput(MiB/s)0.00.20.40.60.81.0CumulativeFraction20kCirc.StopReading0.81.01.21.41.61.82.0AggregateTorRelayGoodput(GiB/s)0.00.20.40.60.81.0CumulativeFractionNoAttack20kCirc.StopReadingNoAttack20kCirc.StopReadingTTFBAll0.02.55.07.510.0DownloadTime(s)NoAttack20kCirc.StopReadingTTLB50KiB051015NoAttack20kCirc.StopReadingTTLB1MiB02040NoAttack20kCirc.StopReadingTTLB5MiB0204060Mitigations: It is extremely challenging to mitigate band-
width DoS attacks on Tor because the circuits that we build
in our attack download an amount of trafﬁc that a reasonable
client could realistically download. The Long Path part of
the attack could be mitigated if Tor changes its protocol to
further restrict the length of circuits, however, in this case
an adversary could switch to using hidden service circuits
which are 6 hops by default.
The Stop Reading part of our attack uses a separate TCP
connection to the entry relay for each attack circuit, and
builds many such connections and circuits in parallel. Tor
implemented mitigations to this kind of DoS attack and
merged them in early 2018 [24, 39] in response to reports
of DoS against relays [23, 38, 40]. In the new subsystem,
relays will refuse new TCP connections from any IP address
that creates more than 3 concurrent connections, and they
will refuse new circuits from the IP address if it also creates
more than 3 circuits per second with an allowable burst of
90 circuits (these were the default settings on 2018-11-01).
Our Tor experiments were conﬁgured to run with these DoS
mitigations in place, and our attacks did not trigger the DoS
defense on any relay. Our attacks were able to stay under
the connection threshold because we utilize every relay in
the network as an entry relay and we maintain only 1,000
circuits per client IP address (1.6 circuits per relay per client
IP address on average). While we do believe that the im-
plemented mitigations are effective against some attacks, we
note that the proliferation of IPv6 addressing may further re-
duce their effectiveness.
A defense against the Sniper Attack [45, 51] was merged
in Tor v0.2.4.14-alpha (released on 2013-06-13). The
defense detects and kills the circuit with the longest waiting
cell at the head of the queue if the relay is under memory
(RAM) pressure. The defense was active but was not trig-
gered in our experiments since we only download 20 MiB of
data through each circuit before abandoning it (our goal is
to consume bandwidth rather than a victim’s RAM as in the
Sniper Attack, so we do not require long queues).
In order to further limit the impact of the Stop Read-
ing strategy, we recommend the implementation and deploy-
ment of the authenticated SENDME design as previously de-
scribed [51] and speciﬁed [46]. With authenticated SENDMEs,
a client would need to continue reading data in order to con-
tinue producing authentic SENDME cells, and the exit would
destroy circuits on which it received invalid SENDMEs. This
defense would limit a stop reading DoS strategy to 1,000
cells (500 KiB) per circuit, effectively mitigating it.
8 Sybil Attacks
We previously explored several bandwidth-based DoS at-
tacks against Tor while estimating the cost to conduct each
attack and their effects on Tor performance; we summarize
our cost estimates in Table 5. In this section, we compare
our DoS attacks with a Sybil attack in which an adversary
Table 5: A summary of the costs of our main attacks.
Cost
Attack (Section)
Bridge Congestion (§5)
Load Unbalancing (§6)
Relay Congestion (§7)
Service
stresser
stresser
ded. server
Bandwidth
30 Gbit/s
5 Gbit/s
3 Gbit/s
$17K/mo.
$2.8K/mo.
$1.6K/mo.
Table 6: The effective mean aggregate bandwidth resources of Tor
relays from 2017-11-01 to 2018-11-01 (in Gbit/s), computed us-
ing positional bandwidth weights from 2018-11-01.
Exit
Middle
Entry
42.4 (36.0%)
86.7 (35.0%)
42.9 (36.4%)
96.7 (39.1%)
32.5 (27.6%)
64.0 (25.9%)
Total
118
247
Bandwidth
Usage
Capacity
instead uses its budget to run several high-bandwidth Tor re-
lays in order to affect as much Tor user trafﬁc as possible.
Relay Resources: To determine which type of relays would
be most advantageous, we computed the effective positional
bandwidth usage by and capacity of Tor relays over the year
preceding 2018-11-01. The effective bandwidth accounts
for relay ﬂags and position weights, both of which are used
to determine in which position a relay will be selected. From
the results shown in Table 6, we can see that exit bandwidth
is the scarcest, with only 27.6% of the total bandwidth used
and 25.9% of the total bandwidth capacity.
Sybil DoS Attack: An adversary could run Sybil relays and
then arbitrarily degrade the performance of all trafﬁc for-
warded through its Sybils, or deny service by dropping cir-
cuits. Note that for such an attack to work, the adversary
must (i) maintain a high selection probability by providing
high performance during periods in which it is measured by
Tor’s bandwidth measurement system, and (ii) not trigger
Tor’s abusive relay detection systems (e.g., exit scanners) to
avoid getting ejected from the network. We assume that these
requirements can be met for the purposes of this analysis.
Due to exit bandwidth scarcity, an adversary can maxi-
mize its probability of appearing at least once in a circuit by
running all exit relays. We assume that the aggregate band-
width usage (i.e., network load) will remain constant as the
adversary adds additional bandwidth capacity (i.e., Sybil re-
lays), and that the probability that the adversary serves as the
exit in a circuit is approximately equal to its fractional exit
capacity (Table 6). Then, Sybil DoS attacks with bandwidth
budgets of 30, 5, and 3 Gbit/s (Table 5) could arbitrarily de-
grade performance for 30/(30+64)≈32%, 5/(5+64)≈7.2%,
and 3/(3+64)≈4.5% of exit circuits, respectively. Compara-
tively, our attack in §5 affects all non-private bridge circuits,
and our attacks in §6 and §7 affect all circuits.
Sybil Deanonymization Attack:
If an adversary is able
to observe both the entry and exit points in a circuit (its
relays are chosen in the ﬁrst and last circuit positions),
then it is generally assumed that the circuit is vulnerable to
compromise because trafﬁc correlation can be performed to
deanonymize the user with high probability [65, 66]. Note
USENIX Association
28th USENIX Security Symposium    1837
Table 7: The fraction of circuits affected by Sybil attacks.
Bandwidth
30 Gbit/s
5 Gbit/s
3 Gbit/s
Sybil DoS
32% degraded
7.2% degraded
4.5% degraded
Sybil Deanonymization
21% entry · 5.3% exit ≈ 1.1% total
4.5% entry · 1.2% exit ≈ 0.06% total
2.8% entry · 0.8% exit ≈ 0.02% total
that a selective service refusal attack, where an adversary re-
fuses to forward trafﬁc on any circuit it is not in a position to
compromise [16], could be mitigated by Tor’s route manipu-
lation (path bias) detection system [26, §7].
In order to observe both ends, an adversary must operate
at least one entry guard and at least one exit relay. The entry
position is more difﬁcult to obtain since Tor clients use the
same guard relay for months at a time [29]. Therefore, previ-
ous work has found that a 5:1 guard-to-exit relay bandwidth
allocation maximizes the probability of observing both sides
of a circuit at least once [54].
6·3/( 5
6·3/( 1
A Sybil deanonymization attack with a bandwidth bud-
get of 3 Gbit/s (Table 5) and a 5:1 guard-to-exit relay band-
width allocation would allow the adversary to observe the
6·3+86.7)≈2.8% of Tor clients and observe
entry for 5
6·3+64.0)≈0.8% of circuits built by those
the exit for 1
clients. Thus, approximately 0.02% of circuits would be vul-
nerable. Table 7 shows results for other bandwidth budgets
and summarizes our Sybil attack analysis.
Discussion: Note that Sybil attacks require ﬁxed costs, be-
cause relays must generally be fast and reliable in order to be
properly utilized by the network. Additionally, attacks that
require guard relays can take months to observe a full set of
some clients (due to guard rotation times), and much longer
to observe a set containing speciﬁc clients. Conversely, our
attacks are more ﬂexible because they do not require ﬁxed
costs, can be run with clients rather than service providers
(relays), and can be repeatedly started and stopped as nec-
essary. Further, our attacks immediately affect all clients
(rather than some sample), and our relay congestion attack
(§7) beneﬁts from the anonymity that Tor provides.
9 Conclusion
This paper performs a multifaceted examination of Tor’s vul-
nerability to DoS, considering both the efﬁcacy of DoS at-
tacks as well as the adversary’s cost of performing them. On
the positive side, we ﬁnd that Tor’s growth has made it more
resilient at least to simple attacks: disrupting the service by
na¨ıvely ﬂooding Tor relays using stresser services is an ex-
pensive proposition and requires $7.2M/month.
Unfortunately, however, several aspects of Tor’s design
and rollout make it susceptible to more advanced attacks. We
ﬁnd that Tor’s bridge infrastructure is heavily dependent on
a small set of ﬁxed default bridges, the operational of which
can be disrupted at a cost of $17K/month. Additionally, Tor’s
mechanism for measuring load is too centralized and brittle,
and even inexpensive techniques (e.g., costing $2.8K/month)
can signiﬁcantly perturb these processes and cause dramatic
performance degradation across the network. Finally, attack-
ers can saturate Tor’s capacity by constructing long paths in
the network, and exploit protocol vulnerabilities to decrease
the costs of such attacks; for example, we ﬁnd that an at-
tacker can signiﬁcantly degrade the performance of the net-
work for as little as $1.6K/month. We also compare our at-
tacks to Sybil attacks and highlight that our load balancing
and relay congestion attacks are more effective and ﬂexible
than Sybil attacks with the same budget.
For each attack, we describe mitigation strategies that
Tor could adopt to improve its resiliency. In particular, we
recommend additional ﬁnancing for meek bridges, moving
away from load balancing approaches that rely on central-
ized scanning, and Tor protocol improvements (in particular,
the use of authenticated SENDME cells).
Acknowledgments
We thank the anonymous reviewers for their valuable feed-
back that helped to improve this paper. We thank Nikita
Borisov for shepherding our paper and David Goulet for
discussions about DoS mitigation in Tor. This work has
been partially supported by the Ofﬁce of Naval Research,
the National Science Foundation under grant number CNS-
1527401, and the Defense Advanced Research Projects
Agency (DARPA) under Contract No. HR0011-16-C-0056.
The opinions, ﬁndings, and conclusions or recommendations
expressed in this work are strictly those of the authors and do
not necessarily reﬂect the ofﬁcial policy or position of any
employer or funding agency.
References
[1] AWS Shield Managed DDoS protection. https://aws.amazon.
com/shield/, November 2018.
[2] Azure DDoS
Protection
Standard