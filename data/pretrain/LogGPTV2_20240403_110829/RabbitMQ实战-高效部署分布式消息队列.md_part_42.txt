添加x-前缀。最后是requires 和enables部分，在这里你告诉RabbitMQ为了
注册该交换器，rabbit_registry必须先运行起来（这很明显）；同时，你的交换
器对于kernel_ready事件的触发来说是必要条件。依赖于kernel_ready事件
的启动步骤将必须等待你的交换器初始化完成才行。
同时，你利用rabbit_boot_step系统来初始化自己的插件。由于插件将
使用Mnesia来存储缓存的消息，因此你添加了一个额外的步骤来为插件设置数据库
结构；启动步骤中的mfa部分会调用属于你的交换器模块的setup_schema函数。
你看到的？MODULE片段和C语言中的宏相似，所以在该案例中它会展开为你的模
块名称。由于 setup_schema 函数不需要任何参数，因此此处提供一个空列表[］。
最后，你定义了两个宏：KEEP_NB和RH_TABLE③，它们分别代表了你想要保
4如果你想要学习更多关于RabbitMQ启动过程的话，则可以参考下列文档：https://github.com/
videlalvaro/rabbit-internals/blob/master/rabbit_boot_process.md.
---
## Page 278
256
第12章聪明的Rabbit：扩展RabbitMQ
存在缓存中的消息数目以及你将要创建的Mnesia表的名称。说到Mnesia表，你需
要定义表的结构，在代码最后用-record来完成。你存储的记录称为cached，这
些记录拥有两个元素：key和content。key属性用来存储交换器名称，content
属性用来存储通过该交换器的最近20条消息。这样就建立了从交换器名称到缓存
消息之间易于访问的映射。当需要从缓存中投递近20条消息时，你需要通过交换
器名称来查找消息列表。现在让我们来看看setup_schema/O函数。
清单 12.3rabbit_exchange_type_recent_history.erl
setup_schema()->
ok;
 ok
（用来指示之后的内容就是函数体了）。这
里有一个下列形式的case表达式：
case Expr of
Patternl->
Bodyl;
..·
PatternN->
BodyN
end
Erlang会对Expr进行求值，同时根据表达式的结果执行Body部分；最后用
end单词来结束case表达式。如你所见，这和其他语言中的switch/case语句很相似。
在这里，Expr为对mnesia:create_table的调用。让我们来看看细节：
mnesia:create_table(?RH_TABLE,
[{attributes, record_info(fields, cached)},
{record_name,cached},
{type，set}])
此处你创建了名为rh_exchange_table的表，因为？RH_TABLE宏会展开成
为表名。attributes，或者说是表的columns，将会使用cached记录中的域——就
---
## Page 279
12.3创建自定义交换器模块
257
是你先前定义的key和content域。你告诉Mnesia记录的名称是cached，表类
型为set，该类型的表不会有重复的值。如果使用相同的键来存储新的值，那么旧
的值会被新的值覆盖。
回到setup_schema函数，如果Expr的结果是{atomic，ok}③，那就
意味着表创建成功了，返回ok。注意在Erlang中，和其他函数式编程语言一样，
没有return关键字。函数会隐含地返回最后一条表达式的结果。现在，如果
mnesia:create_table 返回{aborted, {already_exists, ?RH_TABLE}} 4,
也将返回-ok。这是因为表已经存在于Mnesia中了，很有可能是之前RabbitMQ启
动的时候创建的，所以也就无须再做什么了。
12.3.2实现交换器behaviour
现在该来实现交换器behaviour了。由于你将重用RabbitMQ提供的默认实现，
因此你将添加的一些函数实现都很简单。让我们把下列函数添加到模块当中去。
清单 12.4rabbit_exchange_type _recent_history.erl
description(） ->
>),
{description,>)].
2绑定事件
serialise_events() -> false.
序列化
remove_bindings(_Tx, _X, _Bs） -> ok.
validate(_x)->ok.
③其他函数
create(_Tx, _x) -> ok.
4交换器参
assert_args_equivalence(x,Args)->
数等价：
rabbit_exchange:assert_args_equivalence (X, Args) .
首先，description1函数仅仅用于提供信息。它返回了一个属性列表，包
含了交换器名称和它的描述。很简单吧！下一个函数是serialise_events②，
RabbitMQ使用该函数来决定是否序列化交换器接受的绑定事件。在该示例中，你
不需要这样的功能，因此返回false。remove_bindings、validate 和create
的实现3是非常直白的。因为这些针对交换器的操作发生时，你不需要做任何日志
方面的事情，所以此处返回原子ok；RabbitMQ会执行默认的动作。最后，你将对
assert_args_equivalence的调用代理给了RabbitMQ的rabbit_exchange模
---
## Page 280
258
第12章聪明的Rabbit：扩展RabbitMQ
块的实现4。你无须了解这些函数的细节。不过如果你想知道更多内容的话，请参
考服务器源代码中的rabbit_exchange_type.erl文件，它对每个behaviour函
数都有解释。
在你完成了这些基础设置之后，现在该来定义实现交换器功能的函数了。你需
要实现函数route/2、delete/3和add_binding/3。让我们从route/2的代码
开始。
清单12.5消息路由--rabbit_exchange_type_recent_history.erl
route(#exchange{name =XName),
匿名函数
rabbit_misc:execute_mnesia_transaction(
作为参数
fun(）->
Cached=get_msgs_from_cache(xName),
mnesia:write(?RH_TABLE,
#cached(key = Key,
添加消息
到列表中
content= [Content|lists:sublist(Cached, ?KEEP_NB-1)]),
write).
第一个函数cache_msg/2接收两个参数：交换器名称和消息内容。在该函数中，
你需要访问Mnesia以获取消息，消息可能在缓存之中，同时将最新的消息添加上去。
由于你的交换器可能会并发调用，因此你需要将读取和更新的操作运行在一个事务
当中以确保数据一致性。RabbitMQ提供了一个帮助函数rabbit_misC:execute_
mnesia_transaction/1来做到这一点。该函数接收另一个函数作为参数，并将
该函数运行在Mnesia事务的上下文中。就像许多函数式编程语言一样，Erlang提供
了定义匿名函数的方法，在Erlang世界中它们被称为funs。函数是“一等公民”，
这意味着它们可以被当作普通值来传递给其他函数，同时也可以被其他函数返回。
如果你使用过JavaScript的话，那么在使用回调函数时你很可能使用过一些匿名函
数了。Erlangfun的简化语法如下所示：
fun(Argl，Arg2，....，ArgN)->
Exprl,
Expr2
ExprN
end
该代码片段中的fun 不接收任何参数，这是由于它封闭了传递给cache_msg
函数的参数，形成了闭包。该fun首先做的事是通过调用帮助函数get_msgs
from_cache/1，传入交换器名称作为参数，来获取缓存消息。之后将函数调用结
果绑定到变量Cached上，然后传递给函数store_msg/3，由它来负责存储数据。
通过这两个分隔的步骤，即从Mnesia获取数据和将数据存储到Mnesia，你就能重
用这些代码了。
---
## Page 282
260
第12章聪明的Rabbit：扩展RabbitMQ
函数store_msg/3同样简单。它调用了mnesia模块的函数write/3。第一
个参数是表名；第二个参数是想要存储的记录。注意，你使用交换器名称来作为
key字段的值。为了存储缓存内容，你使用语法［Head|Tail］来动态创建Erlang
列表。列表的头是新缓存的元素，列表尾是已缓存的？KEEPNB－1个元素的子列表。
通过这种做法，你能够确保最多缓存20个元素。你可能好奇为什么要将新元素添
加到列表头。Erlang当中的列表是以链表实现的，因此将元素添加到列表头，并在
投递消息时，将列表反转成它们到达时的顺序，这样做并不花费多少性能。Mnesia
函数的最后一个参数是write，它用来向Mnesia请求一把？RH_TABLE表的写锁
（lock）。现在让我们看看get_msgs_from_cache/1函数的代码。将下列代码添
加到模块文件中去。
清单12.7 rabbit_exchange_type_recent_history.erl
get_msgs_from_cache(xName)->
rabbit_misc:execute_mnesia_transaction(
fun(）->
case mnesia:read(?RH_TABLE, XName) of
[]->
1返回一个
[]；
Cached
返回缓存
2的内容
end
end).
该函数的代码也十分简单。你再一次使用execute_mnesia_transaction/1
函数，传递了含有case表达式的fun作为参数。case表达式会提供表名和交换
器名来调用mnesia：read/2。如果数据库返回以[]表示的空列表的话，你就返回
空的列表1。如果你得到了以#cached记录形式的列表，就能从该记录中抽取交换
器名称（exchange name）和内容（content）。现在你可能好奇：为什么你要将key
字段的值和变量XName 关联起来。这又和Erlang中的模式匹配有关。在该示例中，
你使用这种技术来做逻辑检查，以确保你获取的值的确是关联到交换器名称的。它
是如何工作的呢？当函数被调用时，变量XName（也是该函数唯一的参数）将会绑
定传递给函数的值。在Erlang中，与许多函数式编程语言一样，变量不会发生变
化”。在这里的变量和高中数学中的变量工作的方式一样。绑定到xName的值在函数
5在Erlang中，变量只能被赋值一次。一—译者注
---
## Page 283
12.3创建自定义交换器模块
261
执行的范围和生命周期中都无法更改。因此，在case语句的第二个表达式中，它
唯一完成匹配的情况必须是key字段的值和XName变量的值相匹配。这样做就能
确保你从Mnesia取回的值就是当前交换器缓存的值。尽管最初看起来有点复杂，但
它会在之后的编程中简化你的代码；你再也不用在代码中添加无止境的if/then/else
语句了，因为你将预先对变量使用模式匹配（patternmatch）。如果模式匹配失
败的话，那么代码将不会执行。回到代码中来，你可以看到case表达式的第二部分
返回缓存的内容2。
get_msgs_from_cache/1描述了交换器用于路由和缓存消息的代码。现在该
来看看当某人删除其中一个自定义交换器时该怎么办。下列代码实现了delete/3
函数。让我们把它添加到模块中去。
清单 12.8 rabbit_exchange_type_recent _history.erl
delete(_Tx,#exchange{ name =XName }，_Bs）->
rabbit_misc:execute_mnesia_transaction(
fun(）->
mnesia:delete(?RH_TABLE,XName,write)
end),
ok,
delete/1函数也很简单。每当交换器被删除的时候，RabbitMQ就会调用该方
法。虽然在示例中该方法接收了三个参数，但是你仅使用第二个参数来抽取交换器
名称的值，之后将使用该值从Mnesia中删除属于该交换器的信息。记住，你的自定
义交换器类型可能会有多个实例，每个实例缓存了不同的消息。为了防止内存泄漏，
每当交换器类型的示例从服务器中移除时，你需要负责将与之关联的消息一并删除。
下一个要实现的回调函数的功能是将队列绑定到交换器上。将下列代码添加到源文
件中去。
清单 12.9 rabbit_exchange_type_recent_history.erl
add_binding(_Tx,#exchange{ name = XName },
#binding{ destination =QName }）->
1获取队
case rabbit_amqqueue:lookup(QName)of