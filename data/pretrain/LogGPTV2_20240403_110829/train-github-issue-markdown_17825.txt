  * I tried using the `@types/xxxx` package and had problems.
  * I tried using the latest stable version of tsc. https://www.npmjs.com/package/typescript
  * I have a question that is inappropriate for StackOverflow. (Please ask any appropriate questions there).
  * Mention the authors (see `Definitions by:` in `index.d.ts`) so they can respond. 
    * Authors: @bczengel @chrootsu @stepancar
The following code:
    export const filterStepsByPrograms = (educationalProgramSteps: EducationalProgramStep[], programs: EducationalProgram[]): EducationalProgramStep[] => {
      return filter(educationalProgramSteps, (step: EducationalProgramStep) => {
        return find(programs, { name: getValue(step, 'program.name') });
      });
    };
Generates the following error:
    Type 'number' is not assignable to type 'EducationalProgramStep'.
**But this should be valid and shouldn't throw an error**
> Using `| any` fixes the error
    export const filterStepsByPrograms = (educationalProgramSteps: EducationalProgramStep[], programs: EducationalProgram[]): EducationalProgramStep[] => {
      return filter(educationalProgramSteps, (step: EducationalProgramStep | any) => {
        return find(programs, { name: getValue(step, 'program.name') });
      });
    };
Doc: https://lodash.com/docs/4.17.15#filter
* * *
index.d.ts
    // Type definitions for lodash.filter 4.6
    // Project: https://lodash.com
    // Definitions by: Brian Zengel , Ilya Mochalov , Stepan Mikhaylyuk 
    // Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
    // TypeScript Version: 2.8
    // Generated from https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/lodash/scripts/generate-modules.ts
    import { filter } from "lodash";
    export = filter;
@types/lodash/common/collection.d.ts
         interface LoDashStatic {
            /**
             * Iterates over elements of collection, returning an array of all elements predicate returns truthy for. The
             * predicate is invoked with three arguments: (value, index|key, collection).
             *
             * @param collection The collection to iterate over.
             * @param predicate The function invoked per iteration.
             * @return Returns the new filtered array.
             */
            filter(
                collection: string | null | undefined,
                predicate?: StringIterator
            ): string[];
            /**
             * @see _.filter
             */
            filter(
                collection: List | null | undefined,
                predicate: ListIteratorTypeGuard
            ): S[];
            /**
             * @see _.filter
             */
            filter(
                collection: List | null | undefined,
                predicate?: ListIterateeCustom
            ): T[];
            /**
             * @see _.filter
             */
            filter(
                collection: T | null | undefined,
                predicate: ObjectIteratorTypeGuard
            ): S[];
            /**
             * @see _.filter
             */
            filter(
                collection: T | null | undefined,
                predicate?: ObjectIterateeCustom
            ): Array;
        }