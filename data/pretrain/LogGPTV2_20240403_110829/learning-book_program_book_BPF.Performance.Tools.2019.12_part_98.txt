## Page 800
Appendix D
CBPF
This appendix shows examples of BPF tools implemented in C, either as compiled C programs
or executed via the perf(1) utility. This appendix is optional material for those readers who
are interested in developing a deeper understanding of how BPF works, as wellas other BPF
interfaces that are supported by the Linux kernel.
Chapter 5 covers how to develop tools in bpftrace, a higher-level language that is expected
to be sufficient and preferred in many cases, and Appendix C covers the BCC interface as
another preferred option. This appendix is a follow-on from the BPF sections in Chapter 2.
This appendix begins with a discussion on C programming and five tips before you begin.
The first program included is hello_world.c, for demonstrating BPF instruction-level
programming, followed by two C tools, bigreads and bitehist, to demonstrate per-event
output and histograms, respectively. The final tool included is a perf(1) version of bigreads, as
an example of using C programming via perf(1).
WhyPrograminC?
Back in 2014, C was all we had. Then came the BCC project, which provided an improved
C language² for the kernel BPF programs, and other languages for the front end. And now we
have the bpftrace project, where the entire program is a high-level language.
Reasons for continuing to write tracing tools entirely in C include the following, along with
• Lower startup overhead: On my system, bpftrace costs around 40 ms of CPU time
to start up, and BCC costs around 160 ms. These costs can be eliminated with a stand.
alone C binary. But they can also be reduced by compiling a BPF kernel object file once
and re-sending it to the kernel when needed: Cilium and Cloudflare have orchestration
systems that do this with BPF object file templating, where certain data in the program
(IP address, etc.) can be rewritten as needed. For your environment, consider how much
this matters: how frequently will you be starting BPF programs? If frequently, then
1. BCC includes Clang-bas
sinmtothe
---
## Page 801
764Appendix D
should they be left running ("pinned°)? I also suspect that we can tune BCC down to
bpftrace's startup cost,² plus the following point may reduce startup time further.
• No bulky compiler dependencies: BCC and bpftrace currently use LLVM and
Clang to compile their programs, which can add over 80 Mbytes to the file system.
On some environments, incluxding embedded systems, this can be prohibitive.
A C binary containing pre-compiled BPF does not need these dependencies. Another
issue with ILLVM and Clang is that there are frequent new versions with API changes
(during bpftrace development, we’ve worked through LLVM versions 5.0, 6.0, 7, and
S), creating a maintenance burden. However, there are a number of projects in various
stages of progress to change compilation. Some are to build a lightweight and sufficient
BPF compiler as a replacement for LLVM and Clang, at the cost of losing LLVM
optimizations. The SystemTap tracer with its BPF back end and the ply(1) tracer [5]
already do this, Others are for pre-compiling BPF programs from BCC/bpftrace and just
sending the BPF binary to the target system. These projects should also improve startup
overhead.
 Lower runtime overhead: At first glance, this doesn’t make sense, as any front
end will ultimately run the same BPF bytecode in the kernel and pay the same kprobe
and uprobe costs, etc. There are also many BCC and bpftrace tools that use in-kernel
summaries, and while running, there is no user CPU time from those front ends.
Rewriting them in C will accomplish nothing. A case where the front end can matter
is if many events are frequently printed, such that the user-space front end is needing
to read and process thousands of events per second (so much so that you can see the
front end’s CPU consumption in tools such as top(1). In that case, a C rewrite may
yield more efficiency. More efficiency can also be found by tuning BCC's ring-buffer
polling code,² after which, the difference between C and Python may be negligible.
An optimization not yet employed by BCC or bpftrace would be to create consumer
threads bound to each CPU that read the per-CPU ring buffer for the CPU they are
bound to.
• BPF hacking: If you have a use case that's outside the capabilities of BCC and
bpftrace, writing in C willallow you to code anything that the BPF verifier accepts.
Note that BCC already accepts arbitrary C code, so it's hard to imagine a case where this
will be necessary,
• For use with perf(1): perf(1) supports BPF programs to enhance the capabilities of its
record and trace subcommands. perf(1) has a number of uses beyond the other BPF
tools: for example, if you needed a tool to record many events efficiently in a binary
output file, perf(1) has already optimized this use case. See the section *perf C, later in
this appendix.
Note that many BPF networking projects use C, including Cilium [182]. For tracing, it is
expected that bpftrace and BCC will almost always be sufficient.
3 See https://gthub.com/visor/bcc/issues/1033
2 See hfttps://github.com/iovisor/bce/issues//2367
---
## Page 802
C BPF765
Five Tips
Here are tips you should know before writing C tools:
1. BPF C is restricted: no unbounded loops or kernel function calls are possible. You can
only use the bpf,* kernel helper functions, BPF tail cals, BPF to BPF function calls, and
some compiler built-ins.
2. All memory must be read through bpf_probe_read(), which does necessary checks. The
destination is usually stack memory, but for large objects, you can use BPF map storage,
3. There are three ways to output data from kernel to user:
• bpf_perf_event_outputO (BPF_FUNC_perf_event_output): This is the
preferred way to send per-event details to user space, via a custom struct you define.
• BPF_MAP_TYPE.* and map helpers (e.g., bpf_map_update_elem O): A map
is a key-value hash from which more advanced data structures can be built. Maps can
be used for summary statistics or histograms, and read periodically from user space
(efficient).
 bpf_trace_printk (): For debugging only, this writes to trace_pipe and can clash
with other programs and tracers.
4. Use static instrumentation (tracepoints, USDT) instead of dynamic instrumentation
(kprobes, uprobes) wherever possible, as static instrumentation provides a more stable
interface.
5. If you get stuck, rewriting the tool in BCC or bpftrace and then examining its
debug or verbose output may reveal steps that you missed. For example, BCC's
DEBUG_PREPROCESSOR mode shows the C code after the preprocessor.
Some tools use the following macro wrapper to bpf_probe_read():
define _(P) ((typeof (P) val; bpf_probe_read (6ral, sizeof (val), 6P) : val11
So *_(skb->dev)* will expand to the appropriate bpf_probe_read( for that member.
CPrograms
When a new BPF feature is developedl, a sample C program and/or a kernel self-test suite test
pos ane stuerfod  q 'asn stt atensuotuap o las qped aues at u paptaosd uago st ases
in the Linux source under samples/bpf, and the self-tests are under tools/testing/selftests/bpf.
These Linux samples and self-tests demonstrate two ways to specify BPF programs in
C [Zannoni 16]:
4 These were written by many from the BPF kenel community. Deve
Hopers wth more than twerity comimits to thesi
Fastabend, Jesper Dangaard Brouer, Jakub Kicinski, and Andrey Ignatov. There is more development work happen-
ing on seftests, and to keep everything in BPF working as it grows, new developers are encouraged to add to self
tests instead of samples
---
## Page 803
766
Appendix D
• BPF instructions: As an array of BPF instructions embedded in a C program, passed
to the bpf(2) syscall.
• C program: As a C program that can be compiled to BPF, which is later passed to the
bpf(2) syscall. This method is preferred.
aq ueo sares enpoae quaap aau Sudto-ssoso soddns Aerd suapduo
specified. The LLVM compiler has a BPF target? so that C programs can be compiled to BPF in
ELF files, just like they can to x86/ELE The BPF instructions can be stored in an ELF section
named after the BPF program type (*socket*, kprobe/..*, etc.). Some object loaders wil1
parse this type for use with the bpf(2) syscall;° for other loaders (including the ones in this
appendix) the type is used as a label.
Note that other techniques to build BPF programs are also possible: for example, specifying
the BPF program in LLVM intermediate representation format, which LLVM can compile to
BPF bytecode.
The following sections cover API changes, compilation, and example tools for each type
described earlier: an instruction-level example, helo_world.c; and C programming examples,
bigread_kern.c and bitehist_kern.c.
WARNING:API Changes
Between December 2018 and August 2019, this appendix has been rewritten twice to
match changes in the BPF C library APIs. In case of further changes, it is recommended to
follow updates to the libraries as they occur. The libraries are libbpf in the Linux source
(tools/lib/bpf) and libbcc from iovisor BCC [183].
The older API from the Linux 4.x series was a simple library of common functions defined
at u pdqq jo roney ut paqeoadap uaaq seq 1 ydq/sadhues u qpeofjdq pue opeof dq u
kernel, and at some point this older bpf_load API may be removed. Most of the networking
samples have already been converted to use libbpf instead, which is developed in sync with
the kernel features and is used by external projects (BCC, bpftrace). We recommend that
you use libbpf and libcc instead of either the bpf_load library or creating your own
BPF adoption.
custom library, as they will lag features and fixes that are in libbpf and libbcc and hinder
The tracing tools in this appendix use libbpf and libbcc. Thanks to Andri Nakryiko for
rewriting these to use the latest API, which should be present in Linux 5.4, and for his work
tool repository for this book (the URL can be found on http://www.brendangregg.com/
on libbpf. Earlier versions of these tools were written for Linux 4.15 and can be found in the
bpf-performance-tools-book.html).
Compilation
Starting with an Ubuntu 18.04 (Bionic) server, here are example steps for fetching, compiling,
and installing a newer kernel, and compiling the bpf samples. (WARNING: Try this on a test
poeBt wog saf ou seu 1 (8noupe mm se B sy podo(op ooq stu saie} dB  S
poeoedop s (exal ieun (Bnoure ′**peo(“afq/dg/sodues Bupnjpul 9
---
## Page 804
C BPF767
system first, as mistakes such as missing necessary CONFIG options for virtualized environ
ments may cause the system to fail to boot):
 apt-get update
 apt-get instal1 bc libss1-dev 1lvn-9 clang 1ibelf-dev
 1n -s 11c-9 /usr/bin/11c
 cd /usr/src
+ wget https: //git.kernel.org/torvalds/t/1inux-5.4.tar.gz
 cd 1inux-5.4
make olddefconfig
 make $ (getconf _NPROCESSORS_ONLN)
+ make modules_install ss make install s& make headers_instal1
 reboot
[...]
/da/sotdees oxeu 1
IIvm-9 or a newer LLVM version is required for BTF support. These steps are provided as
an example: as your OS distribution, the kernel, LILVM, Clang, and the BPF samples are
upxlated, these steps will need to be adljusted to match.
At times there have been problems with the packaged LLVM, and it has been necessary to
build the latest LLVM and Clang from source. Some example steps:
 apt-get install -y cmake gcc g++
 cd 11vn/too1s
6 6ue//6xo//:du 1 ada-- sut 6 +
 cd ..! mkdir build; cd bui1d
 Cnake -DLLVM_TARGETS_TO_BUILD=*X86 ;BPF" -DLLVN_BUILD_LLVM_DYLIB=ON \
-DLLVM_ENABL&_RTTI=ON -DCMAKE_BUILD_TYPE=Release
+ make -) $ (getconf _NPROCESSORS_ONLN)
-
 nake insta11
Note how the build targets were restricted to X86 and BPF only in these steps.
Tool 1: Hello, World!
As an example of instruction programming, I have rewritten the hello_world.py program
from Appendix C as a C program, hello_world.c. It can be compiled from samples/bpf/ as
described earlier, after adding it to thesamples/bpf/Makefile. Some sample output:
+./he1lo_wor1d
svscan-1991
[007] ... 2582253.708941: 0: Be11o, Yorld!
cron=983
[008]... 2582254.363956: 0: Hell1o, Yorld!
svscan-1991 [007] ..-. 2582258,709153: 0: He1lo, Yor1d!
[...]
---
## Page 805
768
Appendix D
This shows the “Hello, World! text, along with other default fields from the trace buffer
(process name and ID, CPU ID, flags, and timestamp).
The hello_world.c file is:
1#include 
2finclude 
3#lnclude 
4finclude 
5#1nclude 
6finclude 
#1nclude 
8finclude 
9
10fdefine DEB0GFs */sys/kerne1l/debug/tracing/*
11
12
ch.ae lbpf_log_buf [BPr_L0G_BUr_s1zE] :
13
14
int msin(int argc, char *argv[])
15
16
int prog_fd, probe_fd;
17
18
steuct bpf_insn prog[] = [
19
BPF_HOV64_IMN(BPF_REG_1, 0xa211, /**!\,n.* +/
20
BPF_STX_MEM(BPF_H, BPF_REG_10, BPF_REG_1, -4),
21
BPF_M0V64_IMN(BPF_REG_1, 0x646c726E) , /* 'or1d* */
22
BPF_STX_MEM (BPF_K, BPF_REG_10, BPF_REG_1, -B),
EZ
BPF_H0V64_IHK(BPF_REG_1, 0x57202c6C) , /* *o, W* +/
24
BPF_STX_MEM (BPF_, BPF_REG_10, BPF_REG_1, -12) ,
25
BPF_H0V64_IMH (BPF_REG_1, Ox6c6c6548) ,/**He11* */
26
BPF_STX_MEM(BPF_K, BPF_REG_10, BPF_REG_1, -16),
27
BPF_HOV64_IHK (BPF_REG_1,_ 0),
28
BPF_STX_MEM(BPF_B, BPF_REG_10, BPF_REG_1, -2),
29
BPF_H0V64_REG (BPF_REG_1, BPF_REG_10) ,
30
BPF_AI064_IMM (BPE_ACD, BPF_REG_1, -16)
31
BPF_MOV64_IHN (BPF_REG_2, 15),
32
33
BPF_RAM_INSN (BPF_JMP 1 BPF_CALL, O, O, 0
BPF_FUNC_trace_pxintk)
34
BPF_MOV64_IMM(BPE_REG_0,_ 0) ,
35
BPF_EXIT_IXSN () 
36
37
 7
size_t Insns_cnt = sizeof (prog) / slzeof (steuct bpf_insn) ;
---
## Page 806
C BPF769
39
prog_fd = bpf_load_progran (Bpr_pRoc_7YPE_KPRoBE, prog, insns_cnt,
40
"GPL", LINUX_VERSION_CODE,
41
bpf_log_buf, BPF_IOG_BUF_SIZE) 
42
43
1f (pzog_fd < 0) (
printf (*eRRok: failed to load prog *es*\n*, strerror lerrno1l
4 4
return 1;
45
46
47
probe_fd = bpf_attach_kprobe (prog_fd, BPF_pRoss_ENrRy, *hello_vorld*,
48
*do_nanosleep*, 0, 0);
4.9
if (probe_fd < 0)
50
return 2
51
52
Iedtdsoexa/。 sao0830 。 1eo/w91ss
53
54
close (probe_fd) 
55
bpf_detach_kprobe (*he1lo_vorld*) 
56
close (prog_d) 
57
return 0;
This example is about the *Hello, World!° BPF instruction program on lines 19 to 35. The
remainder of this program uses the older file-descriptor based API and trace pipe output as
shortcuts to keep this example small. The newer API and output methods are shown in the
later bigreads and bitehist examples in this appendix, and as you will see, they make the
program much longer.
The BPF program is dleclared as the prog array using BPF instruction helper macros. See
Appendix E for a summary of these BPF macros and BPF instructions. This program also uses
functions from libbpf and libbcc to load the program and attach it to a kprobe.
Lines 19 to 26 store *Hello, World!′,n?° on the BPF stack. For efficiency, instead of storing this
character string one character at a time, groups of four characters are declared and stored
as a 32-bit integer (type BPF_W for word). The final two bytes are stored as a 16-bit integer
(type BPF_H for half-word).
Lines 27 to 33 prepare and call BPF_FUNC_trace_printk, which writes the string to the shared
trace buffer.
Lines 39 to 41 call the bpf_load_program() function from libbpf (the library in the Linux
source under tools/lib/bpf). It loads the BPF program and sets the type to kprobe, and returns
a file descriptor for the program.
Lines 47 to 48 call the bpf_attach_kprobe() function from libbcc (the library from the iovisor
BCC repository; it is defined in BCC's src/cc/libbpf.h), which attaches the program to a kprobe
for the entry of the do_nanosleep() kernel function. The event name *hello_world° is usedl,
(spuaaaaqody/upen/8nqap/auax/sis/ u sreadde ) Su88ngap soy 1ngdau aq ueo upru
bpf_attach_kprobe() returns a file descriptor for the probe. This library function will also print
---
## Page 807
770
Appendix D
an error message on failure, so I do not print an additional error message for the test
on line 49.
Line 52 uses system() to call cat(1) on the shared trace pipe, printing out messages.
Lines 54 to 56 close the probe file descriptor, detach the kprobe, and close the program file
descriptor. If you miss these calls, earlier Linux kernels can be left with probes configured and
enabled, costing overhead but with no user-level consumer. This can be checked using
cat /sys /kexne1/debug/tracing/kprobe_event.s or bpftool(8) prog show, and can be
cleaned up using BCC's reset-trace(8) (which cancels all tracers). By Linux 5.2, the kernel has
switched to file descriptorbased probes, which are automatically closed on process exit.
BPF_FUNC_trace_printk and system() were used to make this example as short as possible.
They operate using the shared trace buffer (/sys/kernel/debug/tracing/trace_pipe), which can
clash with other tracing or debugging programs, for which the kernel offers no protection.
The recommended interface is via BPF_FUNC_perf_event_output: this is explained in the
section *"Tool 2: bigreads," later in this appendix.
To compile this program, hello_world was added to the Makefile. The following diff shows the
extra three lines for Linux 5.3, highlighted in bold:
+ diff -u Makefile.orig Makefile
.. /ox1g/Makef11e 2019=08-03 19:50:23. 671498701 +0000
+++ Makefi1e 20190803 21:23:04 , 440589362 +0000
e8 -10, 6 +10, 7 89
hostprogs=y += sockex]
zxexoos =+ sboadsou
hostprogs-y += sockex3
Paou =+ -soxso+
hostprogs-y += tracex]
zxsoexa =+sboadasou
hostprogs-y += tracex3
e8 -64, 6 +65, 7 @9
sockexl-objs i= sockexl_user,0
sockexz-objs := sockexz_user,0
sockex3-objs = bpf_load.o sockex3_user-o
+hello_world-objs := hello_wor1d.o
tracexl-objs = bpf_losd.o tracexl_user-0
tracexz-objs := bpf_load.o tracex2_user.o
tracex3-objs := bpf_load.o tracex3_user-o
e8 -180, 6 +182, T 88
HOSTCFLAGs_bpf_load,o += -I$ (objtree) /usr/include -Mno-unused-variable
KBUILD_HOSTLDLIBS
+= $(LIBePF) -1elf
7 This trace pipe can also be read by bpftol prog tracelog
---
## Page 808
C BPF771
HOSTLDLIBS_he11o_wor1d
+= -1bcc
HOSTLDLIBS_tracex4
+= -1rt
HOSTLDLIBs_trace_output
+= -1rt
1s8gxeddeuS8rl0T1SOH
+= -1rt
It can then be compiled and executed as described in the *Compilationa section, later in this
appendix.
While instruction-level programming is possible, as shown by this tool, it is not recom
mended for tracing tools. The following two tools switch to developing the BPF code via C
Suqurureu8osd
Tool 2: bigreads
This time the BPF program is declared using C. bigreads is equivalent to the following
bigreads traces the return of vfs_read() and prints a message for reads larger than one Mbyte.
bpftrace one-liner: