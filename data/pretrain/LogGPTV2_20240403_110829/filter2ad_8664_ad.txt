        Cc: Lucas Bates 
        Cc: Jamal Hadi Salim 
        Cc: Jiri Pirko 
        Signed-off-by: Cong Wang 
        Signed-off-by: David S. Miller 
    diff --git a/net/sched/cls_u32.c b/net/sched/cls_u32.c
    index dadd1b344497..b58eccb21f03 100644
    --- a/net/sched/cls_u32.c
    +++ b/net/sched/cls_u32.c
    @@ -399,6 +399,7 @@ static int u32_destroy_key(struct tcf_proto *tp, struct tc_u_knode *n,
                               bool free_pf)
     {
            tcf_exts_destroy(&n->exts);
    +       tcf_exts_put_net(&n->exts);
            if (n->ht_down)
                    n->ht_down->refcnt--;
     #ifdef CONFIG_CLS_U32_PERF
    @@ -476,6 +477,7 @@ static int u32_delete_key(struct tcf_proto *tp, struct tc_u_knode *key)
                                    RCU_INIT_POINTER(*kp, key->next);
                                    tcf_unbind_filter(tp, &key->res);
    +                               tcf_exts_get_net(&key->exts);
                                    call_rcu(&key->rcu, u32_delete_key_freepf_rcu);
                                    return 0;
                            }
所以，漏洞影响的时间范围2017年11月6日~2022年4月13日，持续4年半。
### 时间轴
时间 |  
---|---  
2021年7月27日 | 确认漏洞  
2021年10月 | 完成漏洞利用  
2022年4月12日 | syzbot打出类似漏洞  
2022年4月13日 | 社区修补  
2022年8月 | 参加国内比赛  
## 漏洞利用
漏洞利用的步骤分为：
1.通过信息泄漏，过地址随机化；
2.通过run_cmd提升权限。
### 信息泄漏
第一步：堆布局
1: 填充SLAB中空闲的net
将cache中的net专属SLAB的页全部吃掉，为了让新分配的net使用系统新分配出来的页。图中黄色区域代表堆喷的net objects，如图中的SLAB
1和SLAB 2。
2: 再从新分配的slab中创建victim net
图中红色区域所示。
3:再把victim所在的slab全部吃掉；
如图中的slab A和slab B，其中都用net对象将该8个页大小的slab填满；
第二步：mount net name space
为了后面通过该文件访问victim的引用。
    mount("/proc/self/ns/net", "./mynetns", "nsfs", MS_BIND, NULL)
第三步：把victim所在的页还到伙伴系统
通过u32_destroy_key将Victim的引用计数减少1
第四步：用户态mmap堆喷victim所在的物理页
将刚刚第三步还回系统的物理页，通过mmap分配得到。
第五步：构造任意地址读
在之前通过mount得到的文件上，调用ioctl(NS_GET_NSTYPE)，用户态就可以得到ns->ops->type的值，因为ops的值可控，所以就能实现任意地址读。
第六步：读取cpu_area_entry，绕过Kaslr
因为系统中cpu_area_entry的虚拟地址(0xfffffe0000000000)是固定的，
而该地址里含有一个被Kaslr后的内核代码段地址。所以可以计算出偏移，进而绕过Kaslr。
fs/nsfs.c
    88 static long ns_ioctl(struct file *filp, unsigned int ioctl,
    189                         unsigned long arg)
    190 {        
    191         struct user_namespace *user_ns;
    192         struct ns_common *ns = get_proc_ns(file_inode(filp));
    193         uid_t __user *argp;
    194         uid_t uid;
    195 
    196         switch (ioctl) {
    197         case NS_GET_USERNS:
    198                 return open_related_ns(ns, ns_get_owner);
    199         case NS_GET_PARENT:
    200                 if (!ns->ops->get_parent)
    201                         return -EINVAL;
    202                 return open_related_ns(ns, ns->ops->get_parent);
    203         case NS_GET_NSTYPE:
    204                 return ns->ops->type;    ops->type != CLONE_NEWUSER)
    207                         return -EINVAL;
    208                 user_ns = container_of(ns, struct user_namespace, ns);
    209                 argp = (uid_t __user *) arg;
    210                 uid = from_kuid_munged(current_user_ns(), user_ns->owner);
    211                 return put_user(uid, argp);
    212         default:
    213                 return -ENOTTY;
    214         }
    215 }
include/linux/ns_common.h
      9 struct ns_common {
     10         atomic_long_t stashed;
     11         const struct proc_ns_operations *ops;    ops->owner(ns);    parent;
    1384         }
    1385 
    1386         return &get_user_ns(owner)->ns;
    1387 }
    16 struct proc_ns_operations {
     17         const char *name;
     18         const char *real_ns_name;
     19         int type;
     20         struct ns_common *(*get)(struct task_struct *task);
     21         void (*put)(struct ns_common *ns);
     22         int (*install)(struct nsset *nsset, struct ns_common *ns);
     23         struct user_namespace *(*owner)(struct ns_common *ns);    
[2]
[3]
* * *