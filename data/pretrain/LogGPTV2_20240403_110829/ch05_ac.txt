可操作但能见度有限
供应商解决方案是可操作的，但遥测不反映操作状态。如果你依赖第三方数据来标记服务状态，则第三方集成的示例可能是通过 API 报告或日志记录服务中断。
可操作但 API 故障
供应商解决方案可操作，但其配置 API 和/或门户已故障。供应商通常将配置与操作分开。幸运的是，在操作上，我们仍然可以启动，但这可能会造成瓶颈。
完全失效
供应商解决方案无法运行。完全失效
供应商解决方案无法运行。
使用第三方时，其他一些状态可能包括门户网站故障、处理延迟、数据一致性问题、区域性能下降、区域服务中断等。当我们处理这些状态时，我们拥有的可观察性水平将决定我们的成功。让我们深入探讨一下帮助管理这些状态需要什么。
服务级别指标、服务级别目标和 SLA
  如果不讨论服务级别指标（SLI）、服务级别目标（SLO）和 SLA，我们就无法谈论服务运行情况。但是，如何在技术堆栈之外运行的服务上捕获 SLI，这些服务似乎不受控制？这就是我们需要有创造力的地方。
黑盒上的 SLI
  我们技术堆栈中用于服务的 SLI 在客观上易于收集。在许多情况下，运行守护进程来收集操作系统/虚拟机/容器统计信息或我们导入的库/SDK 来向指标集合群集发出指标。这足够简单。供应商在他们自己的技术堆栈中运行其服务。它们通常不会发出服务器级别的指标；但是，它们确实以几种不同的形式提供了丰富的数据。轮询 API 获取 SLI
  如果您的供应商不提供可靠的报告 API，请走开。 报告 API 将是构建 SLI 的第一步。但是，不应单纯信任它们，也不应像把它们当成实时数据来使用。许多供应商将尽量保持其报告 API 接近“实时”；但是，始终存在处理延迟。运行分布式网络的任何提供商都可能遭受一些报告延迟：他们需要聚合、处理和提供灵活的 API，而这些处理付出的代价不一定会得到回报。
实时数据通知 SLI
随着技术的进步，供应商开始提供通过 Syslog、HTTP POST 或 SFTP 上传提供的实时日志。此外，日志处理公司与这些供应商合作，以促进集成，并提供仪表板。有了这些集成，我们可以看到从供应商是一个黑盒子，的范式转变为供应商是合作伙伴。有了手头的数据，我们就能够提升供应商依赖性，变得更加自力更生。如果实时数据作为付费服务提供，请要求它是免费的。最终，作为 SRE，你将利用这一点来解决问题，从而缓解他们的客户支持压力。综合监控通知 SLI
  信任但要验证。我们的提供商可以为我们提供大量数据，而且我们的供应商不太可能隐藏任何东西。但是对于我们运行的范围很广的服务（例如 CDN 或 DNS），通常很难对其进行分类和诊断。综合监控（APM 解决方案，例如 Catchpoint 和 Keynote）提供了一个额外的细节层，仅通过服务指标就无法看到。综合测试通常会揭示配置问题，交付延迟，缓存效率，压缩处理以及仅通过日志数据很难发现的极端情况。对于拥有 CDN 和 DNS 的 SRE，这变得至关重要。而且，如果想知道，综合监控供应商同时提供实时数据和轮询 API，因此你可以通过测试结果做更多有趣的事情。
RUM 通知 SLI
  没有什么比真实用户数据更好。随着现代浏览器的发展，我们可以从导航计时和资源计时 API（客户端）中获取大量信息。RUM 可以告知有关用户如何体验第三方服务的各种信息，包括 CDN，DNS，CA，付款处理器，广告等。SLO
SRE 通常专注于满足其 SLO（即 SRE 与产品所有者之间的协议），关注服务的 SLI 不合规格的频率。作为与提供者合作的 SRE，SLO 可能很难计算，甚至更难以定义。这不仅仅是从供应商那里继承 SLA 的问题。 与付款，广告，CDN 和 DNS 一样，负责第三方集成的 SRE 可能同时与多个供应商打交道并支持广泛的产品团队。在这种情况下，产品所有者最终将成为你的兄弟 SRE 团队。 在这种情况下，我们定义的 SLO 允许同级 SRE 团队计算风险并制定错误预算。
与供应商谈判 SLA
  首次与供应商注册服务时，往往会签署许多文件，包括涵盖供应商所有产品和服务的 主服务协议（MSA）和 SLA。从历史上看，SRE 不必与 MSA 或 SLA 合作，但随着 SRE 角色的演变和工作范围的扩大，这些协议对于 SRE 更为普遍。也就是说，如果你足够大，有一个法律团队和采购团队，在签署任何东西之前，确保他们处于循环中。通常，供应商 SLA 在未能满足协议结束时提供服务积分作为补偿。大多数 SLA 括 99.5% 的停机时间。除非发生灾难性事件，否则这些 SLA 目标很容易实现。当我们开始考虑满足特定需求的 SLA 时，事情变得棘手，例如 CDN 上大型对象分发的吞吐量、日志处理公司的索引延迟或综合监控提供程序的指标准确性。
使用相同的 SLI 和 SLO 来计算你的 SLA，让供应商对其服务可用性和性能负责。你的采购团队将感激你对他们工作贡献的透明度和可验证性。  
行动手册：从登台到生产
 对于我们运行的许多服务，我们必须遵守某种行动手册，这是在生产中运行服务的方法。这涉及到相关细则的说明：服务打算做什么、如何测试、如何部署，以及如果出现问题如何处理。
测试和登台测试和登台
    季度发行现在成了古老的历史。如今，持续集成（CI）和持续部署（CD）已成为标准配置。我们已经习惯于维护这样的部署流程：将代码提交到主线，并允许我们的自动化程序运行一组单元测试，随后部署到登台环境，随后进行 Selenium 测试，接着进行 Canary 部署 ，最后进行生产部署。
在正确测试登台环境中的功能方面，第三方集成可能会带来一组不同的挑战。CDN、DNS、证书和边缘代理配置不太可能被视为 CI/CD 管道的一部分。如果登台环境存在，那它与生产环境相似的可能性就更小了。不幸的是，由于这些第三方产品被视为辅助产品，因此很少关注这些技术在部署过程中如何发挥作用。
随着 CDN、DNS、证书、边缘和 APM 空间中出现新参与者，我们如何通过代码配置和管理各自的产品正在取得进展。因此，环境复制变得更加可行。此外，某些供应商提供某种形式的登台环境。例如，Akamai 提供登台配置作为其配置部署过程的标准部分；通过修改主机名解析以登台主机为目标来触发登台配置。登台环境最终鼓励创建单元、回归和 Selenium 测试方案。案例分析
   对于 LinkedIn 的 CDN 集成，我们维护了一套回归测试，这些测试在每次配置更改之前和之后执行，并映射到一组内容配置文件（静态图像与 JavaScript 与样式表）。即使一组内容可能有共享源服务器CDN 上下文中的源服务器只是原始内容。和边缘主机名/配置的来源，CDN 边缘主机名通常映射到单个配置/协议组合；该配置包含到源服务器和内容规则的映射。条件规则（如请求标头或上下文路径）可以触发备用源服务器选择、缓存规则、标头修改等。使用各种缓存标头映射到不同基础服务的上下文路径。图像素材和 Logo 很少更改，并且高度可缓存；因此，可以忽略查询参数，实现长时间过期，并禁用边缘压缩。相反，为了优化交付性能，JavaScript 被进行净化和拼接，尽可能利用单个连接下载完毕。此外，JavaScript 将所需的查询参数作为缓存密钥的一部分、实现长时间的过期并支持边缘压缩。回归测试套件验证了可缓存性、保留规则、反面测试（出现问题时会发生什么情况；例如，HTTP 404 或 HTTP 500）、错误处理、压缩和协议，因为它们在每个内容配置文件之间有所不同。除了在配置更改之前和之后运行回归测试外，这些测试还定期执行。这使我们能够检测作为源的基础服务的修改，从而使我们能够尽早避免重大的性能问题或可靠性问题。
监控
  对于第三方解决方案，我们应考虑两类监视： 集成监控（集成是否正常工作？）和 影响监控（解决方案对我们的用户有何影响？）显然，我们希望确保集成服务（CDN、消息处理器等）是稳定的；因此，我们应该看看第三方是正常工作还是有问题。此外，我们想知道集成服务何时丢弃连接、陷入过载或引入处理延迟。某些第三方集成完全依赖于 API；因此，监视集成要简单一些，就像 SMS 或电子邮件提供商的情况一样。影响监控有点不同。当我们将网站的某些控制权让给第三方时（例如，CDN 交付内容或 DNS 提供商转向数据中心），监控第三方对我们用户的影响就更具挑战性。想要了解最终用户如何受到这些关键路径集成的影响，我们应该依靠综合监视或 RUM。
用于综合监测
  综合监视是最终用户体验测试的一个维度，它依赖于定期运行打包测试的探测器或节点。许多第三方专门从事这种类型的 APM 解决方案；其中包括 Catchpoint、Keynote、Gomez、Pingdom 和 Thousand Eyes。这种类型的监视对于简单操作（如测试终结点是在线还是故障），或者像事务工作流一样复杂都可以胜任。
下面是一些要做的事情：
利用实时推送 API 而不是轮询聚合测试数据。如果使用综合测试来识别由于报告聚合延迟而导致的故障，轮询 API 将导致延迟的平均检测时间（MTTD）。推送 API 可以确保你获得原始结果。为每个 CDN/边缘配置创建多个综合测试。每个 CDN 在同一区域内的行为可能不同，合成测试可能反映区域性能和可靠性问题。
监视内容错误，如 HTTP 错误代码或连接重置或子组件（而不仅仅是主页）上的超时，以更好地了解 CDN 提供商如何处理你的内容。
针对权威名称服务器运行 DNS 测试，以便随时了解与流量转向相关的问题；针对默认解析器进行测试，这样不会将问题盲目关联到 DNS 供应商。
确保在最高流量区域保持良好的测试节点覆盖率，并保持较低的测试间隔，以确保最密集的测试数据。这将允许你在较小的滚动窗口中标记服务器中的错误。
下面是一些需要避免的陷阱：
不要依赖第三方报告 API 的轮询。此数据通常经过聚合。
不要为了节省资金而配置长间隔的测试。长间隔执行测试将限制测试粒度。由于每个节点通常在给定的时间间隔内只运行一次测试，因此监视单个节点的连续事件不太可能标记失败。相反，在给定时间间隔内对测试达成共识可能会证明更有成效。不要运行静态页面测试来监视 CDN。 合成测试节点可能会重复地命中相同的 CDN 边缘存在点（PoP），并人为地提高缓存效率。因此，静态页面测试将只告诉你 CDN 对缓存内容的提供程度；这并不表示 CDN 从源到最终用户对内容的服务程度。
不要随意挑选节点。因为某些节点可能并不代表任何用户（如 Comcast 或 Time Warner 公司的节点）；若节点位于数据中心或对等设施中的骨干网上，那么来自骨干网络的性能数据可能并不反映真正的用户体验。
不要选择与实际用户在区域上不同的节点。当大多数客户在北美时，选择 Timbuktu 中的节点是完全不合逻辑的。
RUM 的用处
 RUM 也属于最终用户体验测试的范本。关键区别是 RUM 在客户端执行。浏览器 API 的改进允许增强报告数据。我们现在可以访问导航计时 API（页面加载时间），更有趣的是，在大多数现代浏览器中，每个对象加载时间的资源计时 API。提供综合监视解决方案的同样第三方通常以 JavaScript 信标的形式提供互补的 RUM 解决方案。下面是一些要做的事情：
利用导航和资源计时 API 来查明内容交付问题。
如果使用与供应商无关的主机名（非特定于供应商的主机名），请实现自定义标头，以标识哪个第三方供应商负责对象传递。