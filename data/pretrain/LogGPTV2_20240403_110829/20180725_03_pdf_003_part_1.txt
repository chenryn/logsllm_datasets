**TITLE: PATRONI: HA POSTGRESQL MADE EASY**

**SPEAKER: ALEXANDER KUKUSHKIN, OLEKSIY KLIUKIN, ZALANDO SE**

**DATE: 16-04-2018**

**EVENT: POSTGRESCONF US**

---

**AGENDA:**

- **ARCHITECTURE OVERVIEW**
- **HANDS ON: YOUR FIRST TEST CLUSTER**
- **DYNAMIC CLUSTER CONFIGURATION**
- **REST ENDPOINTS AND MONITORING**
- **CLIENT CONNECTIONS**
- **ADVANCED FEATURES**
- **CUSTOM EXTENSIONS**
- **TROUBLESHOOTING**

---

**POSTGRESQL HIGH AVAILABILITY:**

- **SHARED STORAGE SOLUTIONS:**
  - DRDB + LVM
- **TRIGGER-BASED AND LOGICAL REPLICATION:**
  - pglogical, bucardo, slony, londiste, built-in logical replication in PostgreSQL 10
- **BUILT-IN PHYSICAL SINGLE MASTER REPLICATION:**
  - Starting from PostgreSQL 9.0
- **MULTI-MASTER REPLICATION:**
  - BDR, bucardo

---

**PHYSICAL SINGLE-MASTER REPLICATION:**

- **CONS:**
  - No partial replication
  - Major versions must match WAL
  - Missing automatic failover
- **PROS:**
  - Built-in since Postgres 9.0
  - Minimal overhead
  - Replicates everything
  - Cascading replication
  - Synchronous replication
  - Takes advantage of streaming and WAL shipping

---

**AUTOMATIC FAILOVER DONE WRONG: RUNNING JUST TWO NODES**

- **RUN THE HEALTH CHECK FROM THE STANDBY AND PROMOTE THAT STANDBY WHEN THE HEALTH CHECK INDICATES THE PRIMARY FAILURE**

**DIAGRAM:**
- Primary (WAL stream)
- Standby (WAL)

---

**AUTOMATIC FAILOVER DONE WRONG: SPLIT-BRAIN!**

- **DIAGRAM:**
  - Primary (WAL)
  - Primary (WAL)

---

**AUTOMATIC FAILOVER DONE WRONG: SINGLE WITNESS NODE**

- **WHAT CAN POSSIBLY GO WRONG?**
- **DIAGRAM:**
  - Primary (WAL stream)
  - Standby (WAL)
  - Witness (health check)

---

**AUTOMATIC FAILOVER DONE WRONG: SINGLE WITNESS NODE**

- **WITNESS NODE DIES**
- **DIAGRAM:**
  - Primary (WAL stream)
  - Standby (WAL)
  - Witness (health check)

---

**AUTOMATIC FAILOVER DONE WRONG: SINGLE WITNESS NODE**

- **OR GETS PARTITIONED**
- **DIAGRAM:**
  - Primary (WAL stream)
  - Standby (WAL)
  - Witness (health check)

---

**AUTOMATIC FAILOVER DONE WRONG: SINGLE WITNESS NODE**

- **EXISTING PRIMARY IS RUNNING**
- **DIAGRAM:**
  - Primary (WAL)
  - Primary (WAL)
  - Witness (health check)

---

**AUTOMATIC FAILOVER DONE RIGHT**

- **DIAGRAM:**
  - Standby (WAL)
  - Primary (WAL)
  - Quorum

---

**AUTOMATIC FAILOVER: THE RIGHT WAY**

- **LEADER ELECTIONS AMONG ALL MEMBERS OF THE CLUSTER**
- **EACH MEMBER DECIDES ONLY FOR ITSELF**
- **CLUSTER STATE STORED IN A CONSISTENT DISTRIBUTED STORAGE**
- **LEADER KEY CHANGED VIA ATOMIC CAS OPERATIONS**
- **CLIENT FOLLOWS THE NEW LEADER**
- **FENCING OF NON-COOPERATIVE OR FAILED NODES**

---

**BOT PATTERN**

- **POSTGRESQL CANNOT TALK TO ETCD DIRECTLY**
- **LETâ€™S EMPLOY A BOT TO MANAGE POSTGRESQL**
- **A BOT SHOULD RUN ALONGSIDE POSTGRESQL**
- **A BOT WILL TALK TO ETCD (OR OTHER DCS)**
- **A BOT DECIDES ON PROMOTION/DEMOTION**

---

**BOT PATTERN: MASTER ACKNOWLEDGES ITS PRESENCE**

- **DIAGRAM:**
  - Node A (Primary, updates /leader key)
  - Node B (Standby, watches /leader)
  - Node C (Standby, watches /leader)

---

**BOT PATTERN: MASTER DIES, LEADER KEY HOLDS**

- **DIAGRAM:**
  - Node A (Primary, no update to /leader key)
  - Node B (Standby, watches /leader)
  - Node C (Standby, watches /leader)

---

**BOT PATTERN: LEADER KEY EXPIRES**

- **DIAGRAM:**
  - Node B (Standby, notifies /leader, expired=true)
  - Node C (Standby, next to try to become leader)

---

**BOT PATTERN: WHO WILL BE THE NEXT MASTER?**

- **NODE B:**
  - GET A:8008/patroni -> timeout
  - GET C:8008/patroni -> wal_position: 100
- **NODE C:**
  - GET A:8008/patroni -> timeout
  - GET C:8008/patroni -> wal_position: 100

---

**BOT PATTERN: LEADER RACE AMONG EQUALS**

- **DIAGRAM:**
  - Node B (Standby, fails to set /leader key)
  - Node C (Standby, successfully sets /leader key)

---

**BOT PATTERN: PROMOTE AND CONTINUE REPLICATION**

- **DIAGRAM:**
  - Node B (Standby, watches /leader)
  - Node C (Primary, promotes and continues replication)

---

**ETCD CONSISTENCY STORE**

- **DISTRIBUTED KEY-VALUE STORE**
- **IMPLEMENTS RAFT**
- **NEEDS MORE THAN 2 NODES (OPTIMAL: ODD NUMBER)**
- **REFERENCE: http://thesecretlivesofdata.com/raft/**

---

**PATRONI**

- **PATRONI IMPLEMENTS BOT PATTERN IN PYTHON**
- **OFFICIAL SUCCESSOR OF COMPOSE GOVERNOR**
- **DEVELOPED IN THE OPEN BY ZALANDO AND VOLUNTEERS ALL OVER THE WORLD**
- **REFERENCE: https://github.com/zalando/patroni**

---

**YOUR FIRST PATRONI CLUSTER**

- **QUOTE: "YOUR FIRST PATRONI CLUSTER"**

---

**USING DOCKER**

- **INSTALL DOCKER**
- **DOCKER PULL KLIUKIN/PATRONI-TRAINING**
- **DOCKER RUN -D --NAME PATRONI-TRAINING KLIUKIN/PATRONI-TRAINING**
- **DOCKER EXEC -TI PATRONI-TRAINING BASH**
- **POSTGRES@F40A9391F810:~$ LS *.YML**
  - postgres0.yml
  - postgres1.yml
  - postgres2.yml

---

**(OPTIONAL) USING VAGRANT**

- **INSTALL VAGRANT**
- **GET THE VAGRANTFILE FROM https://GITHUB.COM/ALEXEYKLYUKIN/PATRONI-TRAINING**
- **VAGRANT UP**
- **VAGRANT SSH**
- **UBUNTU@UBUNTU-XENIAL:~$ SUDO -IU POSTGRES**
- **POSTGRES@UBUNTU-XENIAL:~$ LS *.YML**
  - postgres0.yml
  - postgres1.yml
  - postgres2.yml

---

**HANDS ON: CREATING YOUR FIRST CLUSTER WITH PATRONI**

- **COMMANDS:**
  - $ patroni postgres0.yml
  - $ patroni postgres1.yml
- **LOG OUTPUT:**
  - 2018-01-18 13:29:06,714 INFO: Selected new etcd server http://127.0.0.1:2379
  - 2018-01-18 13:29:06,731 INFO: Lock owner: None; I am postgresql0
  - 2018-01-18 13::29:06,796 INFO: trying to bootstrap a new cluster
  - 2018-01-18 13:45:02,479 INFO: Selected new etcd server http://127.0.0.1:2379
  - 2018-01-18 13:45:02,488 INFO: Lock owner: postgresql0; I am postgresql1
  - 2018-01-18 13:45:02,499 INFO: trying to bootstrap from leader 'postgresql0'
  - 2018-01-18 13:45:04,470 INFO: replica has been created using basebackup
  - 2018-01-18 13:45:04,474 INFO: bootstrapped from leader 'postgresql0'
  - 2018-01-18 13:45:07,211 INFO: Lock owner: postgresql1