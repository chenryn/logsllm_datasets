requires 16 semi-honest multiplications per gate in contrast to 6
in our best protocol; in addition, [22] requires more communica-
tion. We stress, however, that [21, 22] is far more general and also
works in the dishonest majority setting, unlike our compiler. The
work of [12] also considers the setting of t < n/2, malicious ad-
versaries and arithmetic circuits. Their protocol works in a very
di(cid:29)erent way to ours. In particular, they do not follow the Beaver
triples methodology [4] in order to achieve security for malicious
adversaries. Rather, they carry out the computation redundantly on
the input and on the input multiplied by a secret (shared) random
value. Correctness of the computation is validated by verifying that
the di(cid:29)erent computation outputs ful(cid:27)ll a given equation. In [12],
the majority of the work is in the circuit computation phase and
the veri(cid:27)cation step is cheap, whereas in our work the majority of
the work is in the veri(cid:27)cation and the circuit computation phase
is cheap. The setting of t < n/2 and malicious adversaries was
also studied in [1, 31], including implementations. However, they
consider only three parties and Boolean circuits.
Finally, we remark that concrete e(cid:28)ciency for the case of a
dishonest majority has also been studied [8, 16, 18, 28, 32]. This
setting is considerably harder, and thus protocols are naturally far
less e(cid:28)cient. The state-of-the-art MASCOT protocol [28] achieves
a rate of below 1,000 multiplication gates (for 3 parties), which
is orders of magnitude slower than what can be achieved in the
honest-majority setting.
2 PRELIMINARIES
Notation. Let P1, ..., Pn denote the n parties participating in the
computation, and let t denote the number of corrupted parties.
Since we assume an honest majority, it follows that t < n2 . Finally,
let F be a (cid:27)nite (cid:27)eld and let |F| denote its size.
2.1 Threshold Secret Sharing
A secret sharing scheme with threshold t enables n parties to share
a secret v ∈ F among n parties so that no subset of t parties can
learn any information about it, whereas any subset of t + 1 parties
can reconstruct it. We require that the scheme used in our protocol
supports the following procedures:
• share(v): In this procedure, a dealer shares a value v ∈ F. For
simplicity, we consider non-interactive secret sharing, and thus
there exists a probabilistic algorithm D that receives v (and some
randomness) and outputs shares v1, . . . , vn, where vi is the share
intended for party Pi. We denote the sharing of a value v by [v].
We stress that if the dealer is corrupted, then the shares received
by the parties may not be correct. Nevertheless, we abuse nota-
tion and say that the parties hold shares [v] even if these are not
correct. Informally, we call a sharing correct if it de(cid:27)nes a single
valid secret; we will de(cid:27)ne this more formally below.
• reconstruct([v], i): Given a sharing of v and an index i held by
the parties, this interactive protocol guarantees that if [v] is not
correct (see formal de(cid:27)nition below), then Pi will output ⊥ and
abort. Otherwise, if [v] is correct, then Pi will either output v or
will abort.
• open([v]): Given a sharing of v held by the parties, this procedure
guarantees that at the end of the execution, if [v] is not correct,
then all the honest parties will abort. Otherwise, if [v] is correct,
then each party will either output v or will abort. Clearly, open
can be run by any subset of t + 1 or more parties. We require
that if any subset J of t + 1 honest parties output a value v, then
any superset of J will output either v or ⊥ (but no other value).
• local operations: Given correct sharings [u] and [v] and a scalar
α ∈ F, the parties can generate correct sharings of [u + v], [α ·
v] and [v + α] using local operations only (i.e., without any
interaction). We denote these local operations by [u] +[v], α ·[v],
and [v] + α, respectively.
We now de(cid:27)ne what it means for a sharing to be correct. The natural
way to de(cid:27)ne this is to say that the honest parties’ shares are the
valid output of an execution of D. Formally, let H ⊆ {P1, . . . , Pn}
denote the set of honest parties. Then, a sharing [v] = (v1, . . . , vn)
is correct if there exists a value v(cid:48) and randomness r such that
for every i ∈ H it holds that vi is the ith share output by the
dealer algorithm D with input v(cid:48) and randomness r. Although
natural, we will actually require only a more relaxed version of
correctness. For a subset of honest parties J of size t +1, we denote by
val([v])J the value obtained by these parties after running the open
procedure (and where no corrupted parties or additional honest
parties participate). Note that val([v])J may equal ⊥ if the shares
held by the honest parties are not valid. We are now ready to
formally de(cid:27)ne correctness.
De(cid:27)nition 2.1. Let H ⊆ {P1, . . . , Pn} denote the set of honest
parties. A sharing[v] is correct if there exists a value v(cid:48) ∈ F (v(cid:48) (cid:44) ⊥)
such that for every J ⊆ H with |J| = t +1 it holds that val([v])J = v(cid:48).
Observe that if a sharing [v] is incorrect then either (a) there
exists a subset of t +1 honest parties J ⊆ H such that val([v])J = ⊥,
or (b) there exist two subsets of t + 1 honest parties J1, J2 ⊆ H
such that val([v])J1 (cid:44) val([v])J2. In case (a) occurs we say that [v]
is invalid; in case (b) occurs we say that [v] is value-inconsistent. If
a sharing is not invalid, then we say that it is valid.
In some cases, like Shamir’s secret sharing, for every J of size
t +1 the shares of the parties de(cid:27)ne a valid value. However, in some
other cases, like replicated secret sharing, this is not necessarily the
case. In such cases, we need an additional requirement on the secret
sharing scheme, as follows. A secret sharing scheme is robustly-
linear if for every pair of invalid shares[u] and[v] (as de(cid:27)ned above)
it holds that there exists a unique α ∈ F such that α ·[u]+[v] is valid
when computed via local operations (and thus when α is chosen
randomly, α · [u] + [v] is almost always invalid). Note that if a
secret sharing scheme has no invalid sharings, like Shamir’s secret
sharing, then it is trivially robustly-linear.
We now prove some useful claims about such secret sharing
schemes. The (cid:27)rst claim is a triviality and follows from the fact that
addition and scalar multiplication are local operations, and so the
honest parties’ values are not in(cid:30)uenced by the adversary.
Claim 2.2. If [u] and [v] are correct sharings, then for every α ∈ F
it holds that [w] = α · [u] + [v] is correct.
We derive the following corollary by taking the contrapositive:
Corollary 2.3. Let [u] and [v] be sharings and let α ∈ F. If
[w] = α · [u] + [v] is not correct, then [u] or [v] are incorrect.
The following lemma is used for checking correctness.
Lemma 2.4. Let [u] be an incorrect sharing of a robustly-linear
secret sharing scheme and let [v] be any sharing. Then, the probability
that [w] = α · [u] + [v] is a correct sharing where α ∈R F \ {0} is
randomly chosen, is at most
1
|F|−1 .
Proof. First, consider the case that [v] is correct, and assume
by contradiction that [w] = α ·[u] +[v] is correct. By Claim 2.2, this
implies that [w]−[v] is correct and thus that [u] = α−1 ·([w]−[v])
is correct, in contradiction.
Next, consider the case that [v] is not correct, and thus both [u]
and [v] are incorrect. There are two cases regarding the incorrect-
ness of [u] (recall that [u] may be invalid or value-inconsistent, as
de(cid:27)ned above):
(1) Case 1 – [u] is invalid: Let J be a subset of t + 1 honest parties
such that val([u])J = ⊥. There are two subcases:
(a) If [v] is valid, then val([v])J (cid:44) ⊥, and by the same ar-
gument as Corollary 2.3 it must hold that val([w])J = ⊥.
Thus, [w] is invalid and so incorrect.
(b) If [v] is invalid, then we have that both [u] and [v] are
invalid. By the assumption that the secret sharing scheme
is robustly-linear, there exists a unique α such that [w] =
α · [u] + [v] is valid. Since α ∈R F \ {0}, we have that the
unique α making the result valid is chosen with probability
only
(2) Case 2 – [u] is value-inconsistent: Let u1, u2 ∈ F be distinct
values and let J1 and J2 be subsets of t + 1 honest parties such
that val([u])J1 = u1 and val([u])J2 = u2. If val([v])J1 = ⊥,
then by the same reasoning as in Corollary 2.3, it follows that
val(α · u + v)J1 = ⊥ and thus val([w]) is invalid; likewise if
val([v])J2 = ⊥. We therefore proceed to analyze the case that for
some v1, v2 ∈ F it holds that v1 = val([v])J1 and v2 = val([v])J2.
There are two subcases:
(a) If v1 = v2 then α · u1 + v1 (cid:44) α · u2 + v2 (this holds since
v1 = v2, α (cid:44) 0 and u1 (cid:44) u2), and thus val(α ·[u] +[v])J1 (cid:44)
val(α · [u] + [v])J2, implying that [w] is incorrect.
(b) If v1 (cid:44) v2 then val([w])J1 = val([w])J2 if and only if α ·
u1 + v1 = α · u2 + v2 which holds if and only if α =
(v2 − v1) · (u1 − u2)−1. (Note that this is well de(cid:27)ned since
u1 (cid:44) u2.) Since α is random in F \ {0}, this equality holds
with probability only
1
|F|−1.
1
|F|−1.
We therefore conclude that [w] is correct with probability at most
1
|F|−1, as required.
(cid:3)
2.2 De(cid:27)nitions
Privacy for malicious adversaries. Our protocol works by running
a multiplication protocol (for multiplying two shares [x] and [y])
that is secure for semi-honest adversaries, and then compiling it
into a protocol that is secure for malicious adversaries by adding a
veri(cid:27)cation step that allows the honest parties to detect cheating.
For our compiler, it is necessary that the semi-honest multiplication
protocol used achieves privacy in the presence of malicious adver-
saries. We use the formulation of this notion as provided in [3].
As we will see, this condition is easily met by all standard secret
sharing based semi-honest multiplication protocols.
Let ViewA,I ,π((cid:174)x, κ) denote the view of an adversary A who
controls parties {Pi}i∈I (with I ⊂ {1, . . . , n}) in a real execution of
the n-party protocol π, with inputs (cid:174)x = (x1, . . . , xn) and security
parameter κ. Loosely speaking, a protocol is private in the presence
of t malicious corrupted parties if the view of the corrupted parties
when the input is (cid:174)x is computationally indistinguishable from its
view when the input is (cid:174)x(cid:48). In order to rule out a trivial protocol
where nothing is exchanged, we also require correctness, which
means that when all parties are honest they obtain the correct
output.
De(cid:27)nition 2.5. Let f : Fn → Fn be an n-party functionality and
let π be an n-party protocol. We say that π t-privately computes
f in the presence of malicious adversaries if it is correct and if
for every non-uniform probabilistic polynomial-time adversary A,
every I ⊂ {1, . . . , n} with |I| ≤ t, and every two vectors (cid:174)x, (cid:174)x(cid:48) ∈ Fn
(cid:8)ViewA,I ,π((cid:174)x, κ)(cid:9)
κ∈N
c≡(cid:8)ViewA,I ,π((cid:174)x
, κ)(cid:9)
(cid:48)
κ∈N
where all elements of (cid:174)x and (cid:174)x(cid:48) are of the same length.
We say that a protocol is private semi-honest if it is private in the
presence of malicious adversaries (as in De(cid:27)nition 2.5) and secure
in the presence of semi-honest adversaries (under the standard
de(cid:27)nition of security).
Security in the presence of malicious adversaries. We use the stan-
dard ideal-real paradigm to prove security. We stress that our proto-
col provides security with abort only and not full security, despite
the fact that an honest majority exists. For details, see Appendix A.
Security up to additive attacks. In one of the variants of our
compiler (Section 3.4), we will need a stronger notion than just
privacy. We say that a protocol is secure up to additive attacks in
the presence of malicious adversaries if, in addition to privacy as
de(cid:27)ned above, it guarantees that a malicious adversary can only
cheat by (obliviously) adding a value to the output.
Formally, consider the case that exactly t + 1 parties are honest.
Then, de(cid:27)ne an ideal functionality for multiplication that receives
shares of x, y from the honest parties and a value d from the adver-
sary, and gives the parties shares of x · y + d for output. Then, a
multiplication protocol is secure up to additive attacks in the presence
of a malicious adversary if it securely computes this ideal function-
ality in the presence of malicious adversaries (under the standard
de(cid:27)nition). Note that we de(cid:27)ne it here for multiplication only, since
that is what we need. More information about this model and de(cid:27)-
nitions can be found in [21].
We stress that many semi-honest protocols based on secret shar-
ing actually achieve security up to additive attacks (sometimes with
small modi(cid:27)cations). Speci(cid:27)cally, it was proven in [21] that the
BGW [7], GMW [24] and DN [17] semi-honest protocols, are all
secure up to additive attacks. We utilize this in Section 6, where we
present instantiations of our protocol.
3 SUB-PROTOCOLS AND BUILDING BLOCKS
In this section, we present the main building blocks that are used
in our protocol.
3.1 Generating Random Value and Shares
Generating random shares. We use an ideal functionality Frand to
generate a sharing [r] of a random r ∈ F, de(cid:27)ned as follows. Frand
receives t shares from the adversary, chooses a random value r ∈ F,
de(cid:27)nes the honest parties’ shares accordingly and provides each
party with its share. In the instantiation section (Section 6), we will
discuss di(cid:29)erent ways to realize it, depending on the secret sharing
scheme that is being used.
Generating random coins. The functionality Frand can be used
to securely compute a functionality Fcoin that chooses a random
element from F \ {0} and hands it to the parties. This functionality
can be easily realized by having the parties call Frand once and
then open the result (if the sharing received from Frand is to 0, then
the parties simply repeat the process). We remark that Fcoin can
actually be realized even if the random share that is generated is not
correct, and thus it is not required to use Frand. This follows from
the fact that the generated share is opened, and by the de(cid:27)nition
of the open procedure, if the result is not correct then all parties
abort.
3.2 Correctness Check of Shares
In this section, we show how to verify that a series of m shares are
correct. This is needed, for example, to ensure that the shares of
the inputs provided by the parties at the onset of the protocol are
correct. The veri(cid:27)cation method follows the approach of [12] and
is formally described in Protocol 3.1. The idea is to choose random
coe(cid:28)cients and then use them to compute a linear combination
of the shares. Since the values of the coe(cid:28)cients are not known
before the shares were generated, it follows that if there exists a
sharing that is not correct, then the resulting share is correct with
small probability (utilizing Lemma 2.4). In order to preserve the
privacy of the shared values, the parties also add a random sharing
to the linear combination, so that when the resulted sharing is open,
nothing can be learned about the inputs of the parties.
PROTOCOL 3.1 (Batch Correctness Check of Shares).
• Inputs: The parties hold m shares [x1], . . . , [xm].
• The protocol:
ρ1, . . . , ρm ∈ F \ {0}.
(1) The parties call Fcoin to receive random elements
(2) The parties call Frand and obtain a sharing [r].
(3) The parties locally compute
[v] = ρ1 · [x1] + . . . + ρm · [xm] + [r]
(4) The parties run open([v]).