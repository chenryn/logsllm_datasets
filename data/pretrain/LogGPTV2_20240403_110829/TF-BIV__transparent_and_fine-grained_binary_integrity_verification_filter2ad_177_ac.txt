end GVAs) and the corresponding binary files. However, this is
time-consuming.
TF-BIV solves this problem by extracting necessary semantic
information of the guest OS with VMI. In the Linux kernel, the
mapping between the virtual address of the memory area and the
binary is recorded in the mm.mmap data structure. TF-BIV constructs
a mapping between the memory areas and the related binaries based
on this information. TF-BIV also constructs a mapping between the
GPAs and the memory areas, and establishes the mapping between
the virtual memory page and the code pages of the related binaries
based on the offsets between the GVA and start GVA. Therefore, for
a newly mapped memory area, TF-BIV can find the corresponding
references hash values based on these mappings efficiently. Note
that the adversaries can manipulate the kernel data structure to
fool TF-BIV. However, we never use it to influence the verification
results, but only for acceleration purposes. It only leads to DoS
attack because it fails the integrity checking of the S-process as
detailed in next section. Unverified code can never be executed in
the S-process’s address space.
4.5 Integrity Verification of Code Pages
TF-BIV configures the EPT entries of the code pages related to the
S-process to enforce the W⊕X property, so that a code page can
be executed only if it has been verified. In details, TF-BIV sets the
EPT entry for each newly loaded physical page as non-executable,
which causes a VM exit once an instruction fetching is requested on
this page. TF-BIV then checks the integrity of this code page. If the
verification passes, it configures the code page as executable but
non-writable. Any modification to the verified code page will trigger
a VM exit, so that the aforementioned verification is performed
again.
TF-BIV differentiates the handling of EPT NX exiting depending
on which code page is fetched. The code page is classified into
three categories: kernel code, S-process related code (the code being
mapped in the S-process’s address space), and insensitive code (all
others). TF-BIV considers CR3 value, GVA and GPA in classifying
the code pages. As shown in Figure 2, TF-BIV uses GVA to determine
whether the code page is the kernel code. If the code page is in
user space, TF-BIV checks whether the code page belongs to any
S-processes based on the CR3 value. For the code pages of an S-
process, TF-BIV further distinguishes the code of the application
itself or that of a shared library based on the mapping between
memory areas and programs’ memory mapped binaries (Section 4.4).
If the CR3 register is not in the S-process list, TF-BIV uses the
mapping between programs’ memory mapped binaries and the
guest physical pages mapped in the S-process’s address space to
determine whether the code page is related to any S-process. If not,
this page is considered insensitive.
As shown in Figure 2, different types of integrity verification
are performed in the handler of the EPT NX exit event for various
code type. For the kernel code, TF-BIV distinguishes the LKM from
other kernel code. We discuss LKM verification in Section 4.6 and
static kernel code verification in Section 4.2. For S-process related
code, TF-BIV obtains the information of the corresponding binaries
and the offsets as discussed in Section 4.4, and checks the integrity
this page belongs to any entry in the maintained list. When a match
is identified, TF-BIV validates the calculated hash value against
the corresponding reference hash values. If no match is found,
TF-BIV checks whether the page belongs to a newly loaded LKM,
comparing the calculated hash value with the reference hash values
of the code pages which contains the entry point (initialization
function) for each specified LKM, or the core block of an initialized
LKM, and comparing the potential reference hash values based on
the GVA of this code page and each inits in the list. If any match
exists, TF-BIV updates the corresponding (inits, inite) or (cores,
coree) entry. For an LKM that does not have code segment in its
init block (e.g., garp.ko and stp.ko), TF-BIV compares the code
page with all the code pages of each specified LKM, and inserts into
the list a new entry ((cores, coree)) if a match found. Otherwise, the
validation fails, and the code page can never be executed. An entry
is removed from the list when any page in the memory area (cores,
coree) is modified, because it indicates that the corresponding LKM
is unloaded.
Figure 2: The handler of EPT NX exiting.
by comparing the hash values of the code pages with the reference
hash values.
Before the S-process related code pages are mapped into S-
process’s address space, it may have already been executed (e.g.,
the same physical page is mapped to another process). To ensure
no unverified code will be executed in S-process’s address space,
TF-BIV records the information of the newly mapped code in GPA
list, and configures the corresponding EPT entry to make it non-
executable again. Each entry of the GPA list is in the form of (id,
offset, GPA, state, num), where id, offset, GPA, state and num
denote the identifier of the binary which the code belongs to, the
offset of the code page in the binary image, the GPA of the code
page, whether the code page has been verified and the number of
S-processes that this code page is mapped to, respectively. When
an S-process related code is mapped into the address space of the
S-process, if no corresponding entry exists in the GPA list of S-
process related code, TF-BIV creates a new entry and sets num to
one. Otherwise, it increases num by one.
In the handler of EPT NX exit events, TF-BIV checks state of
the entry to check whether the code page has been verified or not.
It avoids the redundant verification when the code is shared by
multiple S-processes. When a PTE for an S-process is flushed, num
is decreased by one. When num becomes zero, the whole entry is
deleted.
4.6 Integrity Verification of LKM
An LKM is a dynamically loaded kernel component. When loaded,
it is located in the free area of the kernel space. Code in an LKM is
either loaded in the init block or core block. Pages belonging to
the init block are executed only once during the initialization of
LKM. They are erased after execution. Pages belonging to the core
block are used throughout the lifetime of the LKM. They are not
erased until the LKM is unloaded.
To identify which LKM the target code page belongs to, TF-BIV
maintains a list in the form of (inits, inite, cores, coree) for all LKMs.
In each entry of the list, inits and inite indicate the start and end
GVA of the init block, and cores and coree are for the code block.
When a code page is loaded, TF-BIV checks whether the GVA of
4.7 Handling Mixed Pages
Mixed page problem is common in legacy OS kernel and appli-
cations. Although, various mixed page eliminations (e.g., page-
aligning data) are proposed and even deployed in Linux kernel,
mixed kernel page still exists [61]. In essence, a mixed page con-
tains both code and mutable data, which conflicts with the basic
assumption of TF-BIV.
When a mixed page is loaded, TF-BIV makes a duplication of its
original physical page, and replaces all non-code areas with NOP
instructions in the duplicated page. Verification is performed on
the original page. If the verification is passed, TF-BIV configures
the EPT entry for the original physical page as non-executable, but
readable and writable, and sets the duplicated physical page as exe-
cutable but non-readable and non-writable. At the very beginning,
the mixed page is mapped to the original physical page, hence, exe-
cuting any instruction from the mixed page triggers a VM exit. In
the handler of this VM exit, TF-BIV re-maps the mixed page to the
duplicated physical page to allow execution. Then, accessing data
in the mixed page will trigger another VM exit, since the duplicated
physical page is non-readable and non-writable. In the VM exit
handler, TF-BIV maps the mixed page back to the original physical
page.
Mixed page has been a problem with many similar solutions. For
example, Patagonix [54] handles the problem with shadow page
table. However, it incurs significant overhead due to the complexity
of synchronization the shadow page table for maintaining the per-
mission for the corresponding memory. TF-BIV is more efficient, as
the permission is set on the GPA directly. Moreover, our protection
does not result in frequent VM exits. This is because the mappings
between the GPA to HPA for the instruction and data are cached
in instruction TLB (iTLB) and data TLB (dTLB) separately, which
avoids the VM exit when the corresponding iTLB and dTLB are not
flushed.
5 SECURITY ANALYSIS AND COMPARISON
In this section, we analyze the security of TF-BIV, and compare it
with other solutions.
Page content, GVA, GPA, CR3 valueCR3 value in S-process listKernel codeMemory areas identifiedIntegrity verificationYesKernel code verificationYesRemove from S-process list NoNoNoExit checkingYesS-process related codeYesYesNo5.1 Security Analysis
TF-BIV verifies all the code related with the S-processes, including
the kernel code, LKM, the application code and shared libraries.
The kernel code is verified during the start-up of the OS. The LKM
is identified upon the loading and verified before execution. The
code related to S-processes is verified before executing the code.
TF-BIV finds all these code pages based on the GVAs and in-
memory page table. TF-BIV attempts to find the reference hash
values for the code pages based on the kernel data structure (e.g.,
mmap) to accelerate the integrity verification. The adversary may
modify the kernel data structure, which breaks the mapping be-
tween the code page and the reference hash values. However, in
this case, the verification fails and the code page will never be ex-
ecuted. This only introduces the DoS attack but still ensures the
goal that only the verified code will be executed in S-processes. The
DoS attack may be mitigated by comparing the code page with all
the reference hash values when it is inconsistent with the inferred
reference hash values.
In the life cycle of an S-process, TF-BIV monitors and verifies
each modification to all the related code. TF-BIV prevents the mod-
ification that occurs before the binary is loaded into memory, as
the corresponding pages will yield an invalid hash values. At run-
time, various attacks may be adopted to modify the integrity of
S-processes or add new code pages. For example, the attackers can
exploit vulnerabilities (e.g., buffer overflow and format string over-
flow [51]) of the S-process and others attacks (e.g., double mapping
attack [19] and [63]) to inject malicious instructions and bypass
the software protections (e.g., Stackguard [21], Stackshield [79],
Formatguard [22], PaX [76], RSX [73] and kNoX [60]). TF-BIV pre-
vents these attacks as it relies on EPT, the hardware features, to find
the modification of code page in the address space of an S-process.
Once any modification is detected, re-verification is enforced.
The adversary may also attempt to execute malicious code in
S-process without modifying any code pages. For example, the
address mapping manipulation attacks [19] may be adopted to map
an unverified physical page to the S-process’s address space, or
map a physical page of an S-process to an unprotected process
which makes the physical page executable without being verified.
TF-BIV defeats these attacks by monitoring the page table of an
S-process. Once a new physical page is mapped, TF-BIV finds this
mapping operation immediately as the modification to S-process’s
page table triggers a VM exit. In processing this VM exit, TF-BIV sets
the physical page as non-executable and classifies it as S-process
related code, which ensures that the physical page will be verified
before execution no matter which process it belongs to. More details
are provided in Section 4.5.
Limitations. TF-BIV fails to provide protection for programs gen-
erated by the JIT engines and DBT, because they require the code
pages to be both writable and executable. However, the interpreters
themselves may still benefit from TF-BIV. TF-BIV fails to present
software bugs in the programs themselves (e.g., CFI attacks, data-
oriented attacks), because code integrity is not violated in these
attacks. Existing mitigation mechanisms, such as Heisenbyte [74],
PITTYAPT [28], KVM-PT [67], µCFI [38], CPI [49], YARRA [66],
HardScope [58], HDFI [72] and DFI [72], may be employed for this
Table 1: Analysis of existing integrity verification systems.
Isolation Consistency
Transparency
Fine-grained
(cid:32)
(cid:71)(cid:35)
(cid:32)
(cid:35)
(cid:35)
(cid:35)
(cid:32)
(cid:35)
(cid:35)
(cid:71)(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
HIMA [5]
InkTag [36]
Patagonix [54] (cid:32)
(cid:71)(cid:35)
En-ACCI [47] (cid:71)(cid:35)
(cid:32)
AppShield [19] (cid:32)
(cid:32)
(cid:32)
AppSec [59]
(cid:32)
(cid:32)
(cid:35)
(cid:32)