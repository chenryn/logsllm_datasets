title:Synchronous Consensus with Mortal Byzantines
author:Josef Widder and
G&quot;unther Gridling and
Bettina Weiss and
Jean-Paul Blanquart
Synchronous Consensus with Mortal Byzantines
Josef Widder1,2∗
G¨unther Gridling1†
Bettina Weiss1
Jean-Paul Blanquart3
1 TU Wien, Embedded Computing Systems, Austria, {widder,gg,bw}@ecs.tuwien.ac.at
2 Laboratoire d’Informatique LIX, ´Ecole Polytechnique, 91128 Palaiseau Cedex, France
3 Astrium Satellites, France, PI:EMAIL
Abstract
We consider the problem of reaching agreement in syn-
chronous systems under a fault model whose severity lies
between Byzantine and crash faults. For these “mortal”
Byzantine faults, we assume that faulty processes take a ﬁ-
nite number of arbitrary steps before they eventually crash.
After discussing several application examples where this
model is justiﬁed, we present and prove correct a consensus
algorithm that tolerates a minority of faulty processes; i.e.,
more faults can be tolerated compared to classic Byzantine
faults. We also show that the algorithm is optimal regarding
the required number of processes and that no algorithm can
solve consensus with just a majority of correct processes in
a bounded number of rounds under our fault assumption.
Finally, we consider more restricted fault models that allow
to further reduce the required number of processes.
1. Introduction
Consensus is fundamental for building reliable distrib-
uted systems in which faults have to be tolerated. Crash
faults are very well studied in this context (see [9, 12, 21]
for an overview), but they capture only a small number of
causes that lead to abnormal behavior, such as power out-
age or permanent disconnection of a node from the network.
The most general failure model is the Byzantine one, which
does not postulate any assumption on the behavior of faulty
processes [20].
It captures all causes of failure, ranging
from arbitrary bit ﬂips in memory to intentional (malicious)
causes like intrusions. However, Byzantine behavior may
be overly pessimistic if we consider non-intentional faults.
Additionally, the classic Byzantine assumption may be
too pessimistic in many practical systems where one ﬁnds
modules that observe the behavior of components and may
act on these components — either automatically or by oper-
∗Supported by the Austrian FWF project Theta (proj.no. P17757).
†Supported by the Austrian FWF project SPAWN (proj.no. P18264).
ator decision — in case of anomaly. This results in a modiﬁ-
cation of the component failure mode as perceived by other
components of the system. In such cases, a component may
not fail once and for ever according to a single “static” fail-
ure mode, but its faulty behavior follows some trajectory in
the set of possible failure modes.
This paper is based on the idea that, rather than consider-
ing the worst case single failure mode exhibited by a com-
ponent, it may be fruitful to exploit some characteristics of
its failure mode trajectory. In particular we consider failures
which eventually end as a crash, after some latency period
where a more pessimistic mode (up to arbitrary behavior)
may be exhibited. We call this behavior mortal Byzantine,
and it was introduced by Nesterenko and Arora in the con-
text of self-stabilizing dining philosophers [24].
Contribution. It is well known that consensus in the pres-
ence of (unauthenticated) Byzantine faults can be solved in
synchronous systems if and only if less than a third of the
processes may be faulty [20]. By introducing a novel algo-
rithm in Sect. 4, we show in this paper that in the mortal
Byzantine model (introduced in Sect. 3) it sufﬁces that a
majority of the processes is correct. (Some proofs had to be
omitted due to space restictions; they can be found in [27].)
We also show that a majority is necessary in Sect. 5, i.e., our
algorithm is optimal w.r.t. the required number of processes.
If t is the upper bound on the number of crashes during
an execution, it is also known that consensus can be solved
in t + 1 rounds. We show that in the mortal Byzantine case,
with just a majority of correct processes, such a bound can-
not exist, i.e., no algorithm decides in a bounded number of
rounds in every execution (Sect. 5).
Due to the latter result, it might appear as if this model
cannot be employed if bounded termination time was re-
quired. Following the late binding principle [19] this is only
true when the life time of faults (e.g., the delay of the de-
tection mechanism) in the real system is not bounded. As
our proofs reveal, if the time is bounded in which faulty
processes can pollute the system, so is the termination time.
After the general case, we consider special cases in
Sect. 6 and 7 that may be relevant in many real applications.
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007We discuss that when assumptions on the number of steps
of faulty processes are added, it is possible to reduce the
required number of processes for consensus even to t + 1.
computation cycles. When a given threshold is reached —
and the fault is considered permanent — the component is
eventually shut down by this on-board mechanism.
2. Motivation
The seminal paper by Lamport, Shostak, and Pease [20]
considers the Byzantine Generals problem for synchronous
systems with arbitrary faulty processes. This environment
combines highly optimistic timing assumptions with highly
pessimistic fault assumptions to result in the well-known
n > 3t bound, so naturally researchers turned to inves-
tigating other systems and fault types. Relaxing the syn-
chronous system assumption led to the well-known im-
possibility result [18] for asynchronous systems and sub-
sequently to work on systems augmented with failure de-
tectors, e.g. [14, 15, 22], or limited synchrony assumptions,
e.g. [2, 8, 10, 16]. Other approaches aim at optimizing nor-
mal case behavior [1,11,23] or consider more elaborate fault
models in an effort to improve fault resilience [3, 5, 6, 26].
Our approach aims at improving resilience by strength-
ening the fault assumptions, and in contrast to most previ-
ous work in this area, we consider failure mode trajectories,
where components migrate from one (severe) fault type to
another (less severe) one, since such models are not just of
purely theoretical interest, but also of practical use, as illus-
trated by the following examples from the space domain.
Often, space systems have to meet strong requirements
in terms of lifetime (without the possibility of replacing
faulty components with new ones) and in terms of mass and
volume — limiting the number of available redundant units.
Space systems are also characterized for some missions by
a strong prevalence of temporary faults; e.g., due to heavy
ions. Therefore, when a faulty behavior is observed, it is
usual practice to wait some time and assess more precisely
its actual impact and recurrence characteristics, before (or
instead of) engaging strong reconﬁguration and deﬁnitely
losing the failed component. In this example, the other com-
ponents of the system may observe a faulty behavior evolv-
ing from maybe fully arbitrary to either correct or crash.
Note that the duration of this process may vary from
very short to very long times. On the one hand, short du-
rations occur when an automatic on-board mechanism —
e.g., employing execution control, temperature control, or
power control — can identify a high severity failure at the
ﬁrst manifestation and switch off the component. While,
on the other hand, long durations may be encountered when
ground operators are in the loop to analyze trends in the
telemetry, before requesting some reconﬁguration by tele
commands. Between these two extremes, almost any pos-
sible intermediate durations are possible. For instance, it is
practice that an on-board mechanism explicitly counts the
number of errors produced by a component in successive
The European Automated Transfer Vehicle (ATV) is the
unmanned transport spacecraft to be launched towards the
(manned) International Space Station ISS. The ATV com-
puter architecture contains, among other elements, a pool
of computing units with distributed voting and agreement
mechanisms at pool level. In addition, each computing unit
of the pool is provided with a set of self-checking mecha-
nisms (whose main aim is to provide some detection cover-
age for common mode faults). A computing unit detected
as faulty by these self-checking mechanisms is reset into
a silent mode, and in particular does not participate in the
following votes. As a result of the combination of the vote
and agreement mechanisms at computer pool level and of
the self-checking mechanisms at the level of each computer
unit of the pool, it may happen that a computing unit — as
seen from other units — ﬁrst appears faulty according to an
arbitrary failure mode, before appearing crashed.
Good system design calls for transparent solutions, i.e.,
consensus should work independently of the self-detection
(or the human intervention), and the experienced failure
model should be described independently of the machinery
that enforces it. Proper modeling of the described behavior
leads naturally to the mortal Byzantine failure model which
is formally deﬁned in the following section.
3. Model
We consider a synchronous system of n distributed pro-
cesses of the set Π = {1, . . . , n} that communicate via re-
liable communication links. Correct processes take an inﬁ-
nite number of steps according to their algorithm in inﬁnite
executions. We assume that the correct receiver of a mes-
sage knows the sender.
Distributed algorithms are executed in rounds. Locally,
during an execution, a correct process possibly sends at
most one message to each process for the current round ac-
cording to its state, receives messages and executes a state
transition according to its state, the received messages, and
its algorithm. Messages have ﬁnite delays and a message
sent by correct process p to correct process q in round r is
received by q in round r. A correct process halts by reach-
ing a terminal state in which it remains during the remainder
of the execution; it sends no further messages and the state
transition function is the identity function.
Processes fail by taking a ﬁnite number of arbitrary steps
(that deviate from their algorithm) in which they send at
most a ﬁnite number of messages. So we assume a failure
trajectory from Byzantine to crash and say that a faulty pro-
cess exhibits mortal Byzantine behavior. In every execution,
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007at most t processes are mortal Byzantine faulty. In this pa-
per we study consensus under the mentioned fault model as
consensus lies underneath many agreement problems. The
variant we want to solve in this paper is already folklore.
Problem Statement. Every correct process proposes some
value v ∈ {0, 1} and has to decide irrevocably on some
value in concordance with the following properties:
Agreement. No two correct processes decide differently.
Validity. If some correct process decides v, then v is pro-
posed by some correct process.
Termination. Every correct process eventually decides.
The term termination traditionally considers that pro-
cesses decide. As laid out in [9], in general, results on de-
ciding not necessarily carry over to termination in the sense
of halting, i.e., reaching a terminal state in which no further
messages are sent; cf. [13,21]. In our context the distinction
is interesting as we will show in Sect. 5 that if there is just
a majority of correct processes, there is no ﬁxed number of
rounds that an algorithm requires to decide in each execu-
tion. However, we show that our algorithm also solves the
problem of reaching a terminal state:
Halting. Eventually every correct process reaches a termi-
nal state.
In Sect. 4 and Sect. 5 we show that 2t < n is necessary and
sufﬁcient to solve consensus in our model.
We will denote by f s
q the content of correct process q’s
variable f at the end of round s. Further, we will denote by
“
” the wild card which stands for all possible values.
We do not consider authenticated algorithms in this pa-
per. In addition to the lack of a formal deﬁnition of authenti-
cation in the presence of Byzantine faults and the disadvan-
tage of computational and communication overhead, each
authentication scheme is bound to some probability that it
can be broken. Thus using non-authenticated algorithms,
our correctness proofs cannot be invalidated by this.
4. Algorithm
In this section we present and analyze our algorithm that
solves consensus in the presence of up to t < n/2 faulty
processes. Our Algorithm 1 has some similarities to the
EDAC algorithm described in [9] and originally introduced
in [17]. EDAC solves the early deciding consensus problem
in the presence of crash faults.
The main idea of our algorithm is due to lower bound
proofs for classic Byzantine faulty processes: Informally
speaking, due to the lower bound results [20,21] for consen-
sus in the presence of Byzantine processes we can say that
for every algorithm that should solve consensus, if there are
at least a third of the processes faulty, then there are situa-
tions in certain executions where a correct process p knows
that some other process is faulty, but p cannot decide which.
The main idea of our algorithm is that if p encounters such a
case, it waits until the faulty processes crash, and the faulty
values received can be removed. So this dilemma can be
overcome due to the different failure assumption.
Our algorithm operates in phases consisting of two con-
secutive rounds. In the ﬁrst round of each phase, correct
processes send their proposed value and their decision value
(⊥ until processes decide) to all and collect the values sent
by other processes in the vectors rcvprop and rcvdec. Addi-
tionally, every correct process p checks whether some pro-
cess q’s message was missing in some round. If this is the
case, q is removed from p’s estimate of the set of alive pro-
cesses π, and the number of possibly alive faulty processes
f is updated. Entries in vectors rcvdec or rcvprop which
correspond to faulty processes are set to † or ⊥, respectively.
In the second round of a phase, correct processes send
rcvprop and rcvdec to all (similar to the exponential algo-
rithm in [20]). At the end of the second round, correct pro-
cesses check whether all vectors they received from pro-
cesses in π — i.e., processes not considered faulty — are
equal. In this case they try to decide. They may decide on a
value w if they have received at least f +1 messages stating
that the sender proposed w. Notice that f is not constant (as
t ≥ f is the bound on the number of faults). Intuitively, if
a process has been detected as being faulty (i.e., if no mes-
sage was received from this process in some round), f is
decreased by 1. Additionally, a process may only decide w
if it (or any other process in π, cf. rcvdec) did not receive a
message in the previous round sent by some still alive pro-
cess q stating that q has decided 1 − w. Note that if a faulty
(but still alive) process sends that it decided w and another
process sends it decided 1 − w it is impossible to decide
in this phase. However, since faulty processes eventually
crash, their decision is removed and will later not be con-
sidered anymore so that taking a decision is again possible.