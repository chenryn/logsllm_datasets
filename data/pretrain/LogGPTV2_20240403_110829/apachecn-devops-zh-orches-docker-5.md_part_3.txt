```
coreos:
  etcd:
    # generate a new token for each unique cluster from https://discovery.etcd.io/new
    # WARNING: replace each time you 'vagrant destroy'
    discovery: https://discovery.etcd.io/5cfcf52e78c320d26dcc7ca3643044ee
    addr: $public_ipv4:4001
    peer-addr: $public_ipv4:7001
  fleet:
    public-ip: $public_ipv4
  units:
```
### 类型
每次运行集群时，您将有生成新令牌。简单地重用令牌是行不通的。
### 设置实例数量
在`coreos-vagrant`目录下，还有一个名为`config.rb.sample`的文件。在这个文件中找到注释行，上面写着`$num_instances=1`。取消注释，并将值设置为`3`。这将使游民产生三个 CoreOS 实例。现在将文件保存为`config.rb`。
### 注
`cnfig.rb`文件保存游民环境的配置和集群中的机器数量。
下面是游民实例的代码示例:
```
# Size of the CoreOS cluster created by Vagrant
$num_instances=3
```
### 生成实例并验证运行状况
现在我们已经准备好了配置，是时候看到集群在您的本地机器上运行了:
```
$ vagrant up
Bringing machine 'core-01' up with 'virtualbox' provider...
Bringing machine 'core-02' up with 'virtualbox' provider...
Bringing machine 'core-03' up with 'virtualbox' provider...
==> core-01: Box 'coreos-alpha' could not be found. Attempting to find and install...
 core-01: Box Provider: virtualbox
 core-01: Box Version: >= 0
==> core-01: Adding box 'coreos-alpha' (v0) for provider: virtualbox
. . . . .
. . . . .
. . . . .
```
创建机器后，您可以在其中进行 SSH 来尝试以下命令，但是您需要向您的 SSH 代理添加`ssh`密钥。这样做将允许将您的 SSH 会话转发到集群中的其他节点。要添加密钥，请运行以下命令:
```
$ ssh-add ~/.vagrant.d/insecure_private_key
Identity added: /Users/CoreOS/.vagrant.d/insecure_private_key (/Users/CoreOS/.vagrant.d/insecure_private_key)
$ vagrant ssh core-01 -- -A
```
现在，让我们验证机器是否启动，并要求 fleet 列出群集中运行的机器:
```
$ export FLEETCTL_TUNNEL=127.0.0.1:2222
$ fleetctl list-machines
MACHINE     IP           METADATA 
daacff1d... 172.17.8.101 - 
20dddafc... 172.17.8.102 - 
eac3271e... 172.17.8.103 - 
```
### 启动服务
要在新启动的集群中运行服务，您必须编写`unit-files`文件。单元文件是配置文件，列出了必须在每台机器上运行的服务以及一些关于如何管理这些服务的规则。
创建三个名为`code.it.1.service`、`code.it.2.service`和`code.it.3.service`的文件。用以下配置填充它们:
`code.it.1.service`
```
[Unit]
Description=Code.it 1
Requires=docker.service  
After=docker.service
[Service]
ExecStart=/usr/bin/docker run --rm --name=code.it-1 -p 80:8000 shrikrishna/code.it
ExecStartPost=/usr/bin/etcdctl set /domains/code.it-1/%H:%i running  
ExecStop=/usr/bin/docker stop code.it-1  
ExecStopPost=/usr/bin/etcdctl rm /domains/code.it-1/%H:%i
[X-Fleet]
X-Conflicts=code.it.*.service
```
`code.it.2.service`
```
[Unit]
Description=Code.it 2  
Requires=docker.service  
After=docker.service
[Service]
ExecStart=/usr/bin/docker run --rm --name=code.it-2 -p 80:8000 shrikrishna/code.it
ExecStartPost=/usr/bin/etcdctl set /domains/code.it-2/%H:%i running  
ExecStop=/usr/bin/docker stop code.it-2  
ExecStopPost=/usr/bin/etcdctl rm /domains/code.it-2/%H:%i
[X-Fleet]
X-Conflicts=code.it.2.service
```
`code.it.3.service`
```
[Unit]
Description=Code.it 3  
Requires=docker.service  
After=docker.service
[Service]
ExecStart=/usr/bin/docker run --rm --name=code.it-3 -p 80:8000 shrikrishna/code.it
ExecStartPost=/usr/bin/etcdctl set /domains/code.it-3/%H:%i running  
ExecStop=/usr/bin/docker stop code.it-3  
ExecStopPost=/usr/bin/etcdctl rm /domains/code.it-3/%H:%i
[X-Fleet]
X-Conflicts=code.it.*.service  
```
你可能已经注意到这些文件中的一个模式。`ExecStart`参数保存启动服务必须执行的命令。在我们的例子中，这意味着运行`code.it`容器。`ExecStartPost`是`ExecStart`参数成功后执行的命令。在我们的案例中，服务的可用性在`etcd`服务中注册。相反，`ExecStop`命令将停止服务，一旦`ExecStop`命令成功，则`ExecStopPost`命令执行，这意味着从`etcd`服务中移除服务的可用性。
`X-Fleet`是 CoreOS 特有的语法，告诉 fleet 两个服务不能在同一台机器上运行(因为它们在试图绑定到同一端口时会发生冲突)。现在所有块都已就位，是时候向集群提交作业了:
```
$ fleetctl submit code.it.1.service code.it.2.service code.it.3.service
```
让我们验证服务是否已提交给集群:
```
$ fleetctl list-units
UNIT              LOAD  ACTIVE  SUB  DESC                 MACHINE 
code.it.1.service  -     -       -   Code.it 1  - 
code.it.2.service  -     -       -   Code.it 2  - 
code.it.3.service  -     -       -   Code.it 3  - 
```
机器列为空，未设置激活状态。这意味着我们的服务还没有开始。让我们开始吧:
```
$ fleetctl start code.it.{1,2,3}.service
Job code.it.1.service scheduled to daacff1d.../172.17.8.101 
Job code.it.1.service scheduled to 20dddafc.../172.17.8.102 
Job code.it.1.service scheduled to eac3271e.../172.17.8.103 
```
让我们通过再次执行`$ fleetctl list-units`文件来验证它们是否正在运行:
```
$ fleetctl list-units
UNIT               LOAD    ACTIVE   SUB     DESC                     MACHINE 
code.it.1.service  loaded  active  running  Code.it 1 daacff1d.../172.17.8.101 
code.it.1.service  loaded  active  running  Code.it 2 20dddafc.../172.17.8.102 
code.it.1.service  loaded  active  running  Code.it 3 eac3271e.../172.17.8.103 
```
恭喜你！您刚刚建立了自己的集群！现在在网络浏览器中前往`172.17.8.101`、`172.17.8.102`或`172.17.8.103`，并看到`code.it`应用正在运行！
在这个例子中，我们只设置了一个运行高可用性服务的机器集群。如果我们添加一个负载平衡器来维护与`etcd`服务的连接，以将请求路由到可用的机器，那么我们的系统中将运行一个完整的端到端生产级服务。但是这样做会偏离主题，所以留给你做练习。
就这样，我们走到了最后。Docker 仍在积极开发中，像 CoreOS、Deis、Flynn 等项目也是如此。因此，尽管在过去的几个月里我们已经看到了很棒的东西出现，但接下来会更好。我们生活在激动人心的时代。所以，让我们充分利用它，建造让这个世界变得更美好的东西。航运快乐！
# 总结
在本章中，我们学习了如何将 Docker 与厨师和木偶一起使用。然后我们设置了一个 apt-cache 来加速包下载。接下来，我们用 Dokku 建立了自己的迷你 PaaS。最后，我们使用 CoreOS 和 Fleet 建立了一个高可用性服务。恭喜你！我们一起获得了 Docker 的必要知识来构建我们的容器，“dockerize”我们的应用，甚至运行集群。我们的旅程到此结束。但是对你来说，亲爱的读者，新的旅程才刚刚开始。这本书旨在为帮助您使用 Docker 构建下一个大项目奠定基础。祝你在这个世界上一切顺利。如果你喜欢这本书，在推特上给我一个爆笑。如果你不喜欢，让我知道我如何能让它变得更好。