title:DeWiCam: Detecting Hidden Wireless Cameras via Smartphones
author:Yushi Cheng and
Xiaoyu Ji and
Tianyang Lu and
Wenyuan Xu
Highlights
Detecting Hidden Webcams with Delay-Tolerant Similarity of Si-
multaneous Observation
Kevin Wu, Brent Lagesse
• Description of the streaming video attacker model with delays.
• A novel methodology that is able to detect hidden Wi-Fi cameras with
a mobile phone.
• The ability to defend against a delayed-transmission attacker model.
• Evaluation of the methodology in a variety of environments and con-
ditions.
0
2
0
2
r
a
M
7
2
]
R
C
.
s
c
[
3
v
8
1
8
2
0
.
1
0
9
1
:
v
i
X
r
a
Detecting Hidden Webcams with Delay-Tolerant
Similarity of Simultaneous Observation
Kevin Wua, Brent Lagesseb
University of Washington Bothell
Box 358534
18115 Campus Way NE
Bothell, WA 98011-8246
PI:EMAIL
PI:EMAIL
Abstract
Small, low-cost, wireless cameras are becoming increasingly commonplace
making surreptitious observation of people more diﬃcult to detect. Previous
work in detecting hidden cameras has only addressed limited environments
in small spaces where the user has signiﬁcant control of the environment.
To address this problem in a less constrained scope of environments, we
introduce the concept of similarity of simultaneous observation where the
user utilizes a camera (Wi-Fi camera, camera on a mobile phone or laptop) to
compare timing patterns of data transmitted by potentially hidden cameras
and the timing patterns that are expected from the scene that the known
camera is recording. To analyze the patterns, we applied several similarity
measures and demonstrated an accuracy of over 87% and and F1 score of
0.88 using an eﬃcient threshold-based classiﬁcation. We used our data set
to train a neural network and saw improved results with accuracy as high
as 97% and an F1 score over 0.95 for both indoors and outdoors settings.
We further extend this work against an attacker who is capable of delaying
when the video is sent. With the new approach, we see increased F1 scores
above .98 for the original data and delayed data. From these results, we
conclude that similarity of simultaneous observation is a feasible method for
detecting hidden wireless cameras that are streaming video of a user. Our
work removes signiﬁcant limitations that have been put on previous detection
methods.
Keywords: Security, Privacy, Internet of Things, Streaming Video,
Preprint submitted to Pervasive and Mobile Computing
March 31, 2020
Cyber-Physical Systems
1. Introduction
Internet connected cameras have become a pervasive feature in the world.
Most modern mobile phones contain at least one camera as do many laptops.
Additionally cheap Wi-Fi connected cameras are easy to obtain and deploy.
In addition to these devices, there are a variety of hidden cameras that are
designed to evade visual detection. The cost of obtaining and deploying such
devices continues to drop as retailers such as Amazon include Surveillance
Camera and Hidden Camera shopping categories that include thousands of
results. While Internet-connected cameras bring convenience to the owners,
they also create security risks. Weak security mechanisms allow adversaries
to exploit those IoT devices and have total control over such devices.
In
2016, Mirai malware took advantage of the weak password settings of IoT
devices and compromised 3.5 million devices, many of which were Wi-Fi
cameras [1]. The infected devices were located globally, including most of
the countries in Europe, Asia, and North and South America [2]. While one
of the most widespread, the Mirai botnet is just one of many examples of
cameras being compromised [3, 4, 5]. Furthermore, Wi-Fi cameras have been
installed to spy on people in environments such as hotel rooms and AirBnB
rentals [6, 7, 8, 9].
Given the ease of which cameras can collect information on people with-
out them knowing it, there is very little that has been done to detect cameras
that are spying on people. Previous work in detecting hidden cameras has
generally relied on being indoors, having signiﬁcant control of the environ-
ment, or performing signiﬁcant manual inspection with custom hardware
[9, 10, 11]. In this paper, we extend our work [12] in automatically detecting
Wi-Fi cameras to mitigate the delayed-transmission attacker model. The
approach works both indoors and outdoors in large or small areas and can
be accomplished with common computing equipment such as a mobile phone
or laptop.
To address this problem, we introduce Similarity of Simultaneous Ob-
servation to identify cameras that are streaming video of a user. This is
accomplished by utilizing a known camera in the environment such as the
camera on a mobile phone and recording the environment. Simultaneously,
a networking interface enters into monitor mode and records nearby data
transmissions and logs the number of bytes transmitted in each time step
by each wireless device. Next, we apply similarity measures between the
data timing of the known recording and each network device. Note that due
to similarities in the size of plaintext and its resulting ciphertext when en-
crypted, this approach works regardless of if the camera is using encryption
or is on another wireless network that we do not have credentials to join. If
the two transmissions are deemed similar enough, then we ﬂag that device
as potential webcam.
We have evaluated our approach using over 21 hours of recordings taken
from indoors and outdoors environments with varying levels of motion, res-
olution, and relative angles of the cameras along with a variety of traﬃc
sources that are not observing the user in order to demonstrate the robust-
ness of this approach. Our experimental results show that we can achieve
100% recall and F1 scores of 0.965 with a simple neural network and F1
scores over 0.98 with an LSTM against a more advance attack model than
our original work in [12].
Contributions. The major contributions of our work can be summarized
as the following four items:
1. Description of a problem that has not previously been addressed in
research literature in section 3.
2. A novel methodology that is able to detect hidden Wi-Fi cameras with
a mobile phone in section 4.
3. The ability to defend against a delayed-transmission attacker model in
section 5.3.9.
4. Evaluation of the methodology in a variety of environments and con-
ditions in section 5.
While the focus of our work was on streaming Wi-Fi cameras, the tech-
niques would apply to any streaming camera as long as the system could
acquire the per-time step byte counts of the device transmitting the data
(for example, at a router).
2. Background
Our preliminary work [10] was the ﬁrst known research to demonstrate
that it is feasible to detect hidden cameras that are streaming video of a
user by causing a change in the physical environment and comparing the
bandwidth usage of the devices that could potentially be recording the user.
In this work, the ﬂash on a mobile phone was used to illuminate the room,
thus changing the pixels recorded by a hidden camera. This would cause
a spike in bandwidth usage. The mobile phone uses a network card set to
promiscuous mode to capture the traﬃc and then calculates the correlation
coeﬃcient between a vector of byte counts per time step and a vector of
when the phone was ﬂashing or not. Liu et al.
[14]
published similar research shortly after that also used probes to detect hidden
Wi-Fi cameras. Unfortunately, the techniques described in this work require
a disturbance in the environment to operate such as rapidly ﬂashing the ﬂash
LED on the mobile phone. This is generally not an activity that a user would
want to perform during a meeting. Furthermore, the techniques described
in these papers became increasingly ineﬀective in larger spaces, so it is not
suitable for detecting cameras in outdoor areas or large open spaces such as
shopping malls.
[13] and Cheng et al.
The reason these techniques work is due to the inter-frame video com-
pression algorithms commonly used by Wi-Fi cameras, mobile phones, and
video streaming applications. The most common modern compression algo-
rithm used by Wi-Fi cameras, H.264, was ﬁrst introduced in [15]. One of
the improvements of the H.264(MPEG-4 Part 10) is the ability to reduce the
size of a video ﬁle, which requires less network bandwidth and storage space.
The H.264 achieved this by removing unnecessary information, speciﬁcally,
the unchanged pixels between frames. Instead, the algorithm only encodes
the changing pixels with respect to reference frames. Thus, more movements
occurring in the environment forced the Wi-Fi camera and the mobile phone
to generate more data in network traﬃc and video frames. Our system is not
exclusive to H.264 and should work with any compression technique where
the size of encoding at a given time is a function of the scene it is observing.
3. Problem Statement
In this section, we introduce the problem that we address in our research.
To the best of our knowledge, no previous research has directly addressed this
problem. Given an arbitrary space, is it feasible to detect whether
or not somebody is streaming video of that space.
3.1. System Model and Assumptions
We assume that the user is interested in detecting a camera that is stream-
ing video of them in an environment with a signiﬁcant number of wireless
networks and potentially wireless cameras. In this paper, we refer to a scene
as the area of observation recorded by a given camera. It is not enough just
to detect that a device on the network might be a camera, but also that the
device is recording the scene in question. As a result, there may be dozens
of networks, dozens of streaming devices, and hundreds or thousands of total
devices within range of the user.
We assume that the user has typical computing equipment available to
them. For example, they possess a computer or a mobile phone and a network
card that is capable of entering into monitor mode. We do not make explicit
assumptions about whether the user is indoors or outdoors. We do not
assume knowledge of the location of the Wi-Fi camera other than that it
is within range of the wireless device that is in monitor mode. We do not
assume that the user has credentials to join the network that the Wi-Fi
camera is transmitting on.
3.2. Attacker Model and Assumptions
We make the following assumptions in this paper. This work focuses
on currently publicized attacks such as those in hotels and oﬀ-the-shelf spy
cameras. As a result, we assume the attacker lacks the motivation or technical
skills to drastically reconﬁgure the camera. For example, the attacker may
be an AirBnB owner or even somebody who has compromised a remote
webcam by guessing the password. In this paper, we expand the attacker
model beyond our previous work to include an attacker that has the ability
to introduce delays in the video streaming as that caused misclassiﬁcation in
our previous work.
The work in this paper is designed to address 3 attacker models.
1. The attacker has placed a hidden camera.
2. The attacker has compromised a device with camera capabilities.
3. The user has deployed a device that is streaming video, but does not
realize it.
3.3. Design Requirements
The purpose of our work is to help users detect that a device is streaming
video of them. To this end, our work was approached with the following
requirements:
• The system must work with common computing equipment that people
tend to have with them most of the time.
• The system must work indoors or outdoors.
• The system must not require manipulation of the environment.
• The system must work even if the video is encrypted.
To the best of our knowledge, no known system or technique meets all of
these requirements which has limited the eﬀectiveness of camera detection
techniques.
4. Methodology
We propose and evaluate the detection of Wi-Fi cameras passively by
recording the environment. The detection mechanism analyzes timing char-
acteristics that exist in the recorded video and the network traﬃc of the
Wi-Fi camera.
The default behavior of Wi-Fi cameras is based on the video compression
algorithm they use. H.264, a block-oriented, motion-compensation-based
video compression standard, is utilized by many modern Wi-Fi cameras and
streaming applications to transfer data eﬃciently. To reduce bandwidth us-
age, the standard only records motions between frames, in order to reduce
storing overlapping information. Thus, a large amount of movement forces
the Wi-Fi camera to generate and transfer large amounts of data, which
creates peaks in network traﬃc.
The proposed framework has four major steps. The ﬁrst step is to monitor
the environment digitally by recording video and network traﬃc simultane-
ously. The recorded ﬁles contained timing characteristics that are essential
to identify Wi-Fi camera. The second step is to extract a feature, speciﬁ-
cally, the number of bytes per second, from both either the video ﬁle or the
recorded network traﬃc ﬁle. This results in a vector of unsigned integers that
represents each recording. The third step is to perform statistical analysis,
calculating the Pearson correlation coeﬃcient (CC), Dynamic Time Warping
(DTW) distance, Kullback-Leibler divergence (KLD), and Jensen-Shannon
divergence (JSD) on the bytes-per-time step vectors. The last step is to clas-
sify each vector as belonging to a spying camera or not. Descriptions of each
steps and corresponding implementation are presented in the sections below.
Figure 1 provides a visual overview of this process.
Start detection
Digital monitoring
Record environment
with camera
Record network
traﬃc with Wireshark
Feature selection
Extract
bytes per second
with FFmpeg/Pyshark
Extract
bytes per second
with Pyshark
Statistical analysis
Data Normalization
CC / DTW
KLD
JSD
Decision making
Threshold-based
Classiﬁer
ML-based Classiﬁer
Figure 1: Flowchart of the two detectors.
Figure 2: Correlation Coeﬃcients for Various Traﬃc Sources (Error bars are one standard
deviation above and below the mean)
4.1. Digital Monitoring
Digital monitoring is the ﬁrst step in gathering data from the network
traﬃc and the mobile phone. Network traﬃc is monitored while the mobile
phone is recording the environment. In this step, the recording of the network
traﬃc and the mobile phone are performed simultaneously.
4.1.1. Network Monitoring
In order to record the network traﬃc, a network sniﬃng tool is used with
a network card in either promiscuous or monitor mode. Wireshark, an open
source network sniﬃng tool supported in various platforms, is used to sniﬀ
the network traﬃc. In the experiments, Wireshark is used on a Macbook Pro
with macOS High Sierra 10.13.4 to perform network monitoring. The version
of the Wireshark software installed on the laptop is 2.4.2 and the Network
Interface Card installed on the laptop is AirPort Extreme (0x14E4, 0x170)
with ﬁrmware version of Broadcom BCM43xx 1.0 (7.77.37.29.1a7).
4.1.2. Video Recording