国赛-bbvvmm-SM4逆向分析，虚拟机指令分析
#### SM4
拿到程序是一个ELF，64位程序程序大意是让你输入用户名和密码，放入IDA中看主函数
    __int64 __fastcall main(__int64 a1, char **a2, char **a3)
    {
      __int64 v3; // rax
      char *s1; // ST28_8
      char v5; // ST1B_1
      unsigned __int8 i; // [rsp+19h] [rbp-1A7h]
      int v8; // [rsp+1Ch] [rbp-1A4h]
      void *virtual_1; // [rsp+20h] [rbp-1A0h]
      char v10; // [rsp+30h] [rbp-190h]
      __int64 username; // [rsp+140h] [rbp-80h]
      char v12; // [rsp+148h] [rbp-78h]
      __int64 v13; // [rsp+150h] [rbp-70h]
      __int64 v14; // [rsp+158h] [rbp-68h]
      __int64 v15; // [rsp+160h] [rbp-60h]
      __int64 v16; // [rsp+168h] [rbp-58h]
      char v17; // [rsp+170h] [rbp-50h]
      char v18; // [rsp+171h] [rbp-4Fh]
      char v19; // [rsp+172h] [rbp-4Eh]
      char v20; // [rsp+173h] [rbp-4Dh]
      char v21; // [rsp+174h] [rbp-4Ch]
      char v22; // [rsp+175h] [rbp-4Bh]
      char v23; // [rsp+176h] [rbp-4Ah]
      char v24; // [rsp+177h] [rbp-49h]
      char v25; // [rsp+178h] [rbp-48h]
      char v26; // [rsp+179h] [rbp-47h]
      char v27; // [rsp+17Ah] [rbp-46h]
      char v28; // [rsp+17Bh] [rbp-45h]
      char v29; // [rsp+17Ch] [rbp-44h]
      char v30; // [rsp+17Dh] [rbp-43h]
      char v31; // [rsp+17Eh] [rbp-42h]
      char v32; // [rsp+17Fh] [rbp-41h]
      __int64 v33; // [rsp+180h] [rbp-40h]
      __int64 v34; // [rsp+188h] [rbp-38h]
      char s[8]; // [rsp+190h] [rbp-30h]
      __int64 v36; // [rsp+198h] [rbp-28h]
      __int64 v37; // [rsp+1A0h] [rbp-20h]
      __int64 v38; // [rsp+1A8h] [rbp-18h]
      char v39; // [rsp+1B0h] [rbp-10h]
      unsigned __int64 v40; // [rsp+1B8h] [rbp-8h]
      v40 = __readfsqword(0x28u);
      virtual_1 = malloc(0x4D0uLL);
      setbuf(stdin, 0LL);
      setbuf(stdout, 0LL);
      setbuf(stderr, 0LL);
      puts("Powered by ????? !");
      sub_406656("Powered by ????? !", 0LL);
      puts("---------[LOGIN]---------");
      printf("Username:", a2);
      sub_405B25((__int64)virtual_1);
      username = 0LL;
      v12 = 0;
      __isoc99_scanf("%9s", &username);
      printf("\x1B[?25l", &username);
      printf("Password:");
      for ( i = 0; i > 4) + 0x30;
        if ( v5 > 4) + 55;
        v7 = v6 + 0x30;
        if ( v7  0 )                           // v11的值为16
        {
          for ( i = 0; i  0 )
        {
          v14 = *encode_username;
          v15 = encode_username[1];
          sub_401362(a1 + 8, (unsigned __int8 *)encode_username, v8);
          for ( j = 0; j <= 15; ++j )
            *((_BYTE *)v8 + j) ^= *((_BYTE *)v10 + j);
          *v10 = v14;
          v10[1] = v15;
          encode_username += 2;
          v8 += 2;