    conn mytunnel
        leftid=@west
        left=192.1.2.23
        leftrsasigkey=0sAQOrlo+hOafUZDlCQmXFrje/oZm [...] W2n417C/4urYHQkCvuIQ==
        rightid=@east
        right=192.1.2.45
        rightrsasigkey=0sAQO3fwC6nSSGgt64DWiYZzuHbc4 [...] D/v8t5YTQ==
        authby=rsasig
    ```
4.  导入密钥后，重启 `ipsec`{.literal} 服务：
    ``` screen
    # systemctl restart ipsec
    ```
5.  加载连接：
    ``` screen
    # ipsec auto --add mytunnel
    ```
6.  建立隧道：
    ``` screen
    # ipsec auto --up mytunnel
    ```
7.  要在 `ipsec`{.literal}
    服务启动时自动启动隧道，请在连接定义中添加以下行：
    ``` screen
    auto=start
    ```
:::
:::
::: section
::: titlepage
# []{#configuring-a-vpn-with-ipsec_securing-networks.html#configuring-a-site-to-site-vpn_configuring-a-vpn-with-ipsec}配置站点到站点的 VPN {.title}
:::
要创建一个站点到站点的 `IPsec`{.literal} VPN
，需要将两个网络连接起来，在两台主机之间建立 `IPsec`{.literal}
隧道。主机因此充当端点，它们配置为允许来自一个或多个子网的流量通过。因此您可以将主机视为到网络远程部分的网关。
站点到站点 VPN 的配置只能与主机到主机 VPN
不同，同时必须在配置文件中指定一个或多个网络或子网。
::: itemizedlist
**先决条件**
-   已配置了[主机到主机的
    VPN](#configuring-a-vpn-with-ipsec_securing-networks.html#creating-a-host-to-host-vpn_configuring-a-vpn-with-ipsec "创建主机到主机的 VPN"){.link}。
:::
::: orderedlist
**流程**
1.  将带有主机到主机 VPN 配置的文件复制到新文件中，例如：
    ``` screen
    # cp /etc/ipsec.d/my_host-to-host.conf /etc/ipsec.d/my_site-to-site.conf
    ```
2.  在上一步创建的文件中添加子网配置，例如：
    ``` screen
    conn mysubnet
         also=mytunnel
         leftsubnet=192.0.1.0/24
         rightsubnet=192.0.2.0/24
         auto=start
    conn mysubnet6
         also=mytunnel
         leftsubnet=2001:db8:0:1::/64
         rightsubnet=2001:db8:0:2::/64
         auto=start
    # the following part of the configuration file is the same for both host-to-host and site-to-site connections:
    conn mytunnel
        leftid=@west
        left=192.1.2.23
        leftrsasigkey=0sAQOrlo+hOafUZDlCQmXFrje/oZm [...] W2n417C/4urYHQkCvuIQ==
        rightid=@east
        right=192.1.2.45
        rightrsasigkey=0sAQO3fwC6nSSGgt64DWiYZzuHbc4 [...] D/v8t5YTQ==
        authby=rsasig
    ```
:::
:::
::: section
::: titlepage
# []{#configuring-a-vpn-with-ipsec_securing-networks.html#configuring-a-remote-access-vpn_configuring-a-vpn-with-ipsec}配置远程访问 VPN {.title}
:::
公路勇士是指拥有移动客户端和动态分配的 IP 地址的旅行用户。移动客户端使用
X.509 证书进行身份验证。
以下示例显示了 `IKEv2`{.literal} 的配置，并且避免使用 `IKEv1`{.literal}
XAUTH 协议。
在服务器中：
``` screen
conn roadwarriors
    ikev2=insist
    # support (roaming) MOBIKE clients (RFC 4555)
    mobike=yes
    fragmentation=yes
    left=1.2.3.4
    # if access to the LAN is given, enable this, otherwise use 0.0.0.0/0
    # leftsubnet=10.10.0.0/16
    leftsubnet=0.0.0.0/0
    leftcert=gw.example.com
    leftid=%fromcert
    leftxauthserver=yes
    leftmodecfgserver=yes
    right=%any
    # trust our own Certificate Agency
    rightca=%same
    # pick an IP address pool to assign to remote users
    # 100.64.0.0/16 prevents RFC1918 clashes when remote users are behind NAT
    rightaddresspool=100.64.13.100-100.64.13.254
    # if you want remote clients to use some local DNS zones and servers
    modecfgdns="1.2.3.4, 5.6.7.8"
    modecfgdomains="internal.company.com, corp"
    rightxauthclient=yes
    rightmodecfgclient=yes
    authby=rsasig
    # optionally, run the client X.509 ID through pam to allow or deny client
    # pam-authorize=yes
    # load connection, do not initiate
    auto=add
    # kill vanished roadwarriors
    dpddelay=1m
    dpdtimeout=5m
    dpdaction=clear
```
在移动客户端（即 road warrior 的设备）上，使用与之前配置稍有不同的配置：
``` screen
conn to-vpn-server
    ikev2=insist
    # pick up our dynamic IP
    left=%defaultroute
    leftsubnet=0.0.0.0/0
    leftcert=myname.example.com
    leftid=%fromcert
    leftmodecfgclient=yes
    # right can also be a DNS hostname
    right=1.2.3.4
    # if access to the remote LAN is required, enable this, otherwise use 0.0.0.0/0
    # rightsubnet=10.10.0.0/16
    rightsubnet=0.0.0.0/0
    fragmentation=yes
    # trust our own Certificate Agency
    rightca=%same
    authby=rsasig
    # allow narrowing to the server’s suggested assigned IP and remote subnet
    narrowing=yes
    # support (roaming) MOBIKE clients (RFC 4555)
    mobike=yes
    # initiate connection
    auto=start
```
:::
::: section
::: titlepage
# []{#configuring-a-vpn-with-ipsec_securing-networks.html#configuring-a-mesh-vpn_configuring-a-vpn-with-ipsec}配置网格 VPN {.title}
:::
网状 VPN 网络（也称为 [*任意对任意*]{.emphasis} VPN ）
是一个所有节点都使用 `IPsec`{.literal}
进行通信的网络。该配置允许节点不能使用 `IPsec`{.literal}
的例外情况。可使用两种方式配置网格 VPN 网络：
::: itemizedlist
-   需要 `IPsec`{.literal}。
-   首选 `IPsec`{.literal}，但允许回退到明文通信。
:::
节点之间的身份验证可以基于 X.509 证书或 DNS 安全扩展(DNSSEC)。
以下流程使用 X.509
证书。这些证书可以使用任何类型的证书颁发机构(CA)管理系统生成，如 Dogtag
证书系统。Dogtag 假定每个节点的证书可用 PKCS #12 格式（.p12
文件）提供，其中包含私钥、节点证书和用于验证其他节点的 X.509 证书的根 CA
证书。
每个节点的配置与其 X.509
证书不同。这允许在不重新配置网络中的任何现有节点的情况下添加新节点。PKCS
#12
文件需要一个\"友好名称\"，为此，我们使用名称\"节点\"，这样引用友好名称的配置文件对所有节点都是相同的。
::: itemizedlist
**先决条件**
-   `Libreswan`{.literal} 已安装，在每个节点上都已启动 `ipsec`{.literal}
    服务。
:::
::: orderedlist
**步骤**
1.  在每个节点中导入 PKCS #12 文件。此步骤需要用于生成 PKCS #12
    文件的密码：
    ``` screen
    # ipsec import nodeXXX.p12
    ```
2.  为 ` IPsec 需要的`{.literal}（专用）、`IPsec 可选的`{.literal}
    (private-or-clear)和 `No IPsec`{.literal}
    (clear)配置文件创建以下三个连接定义：
    ``` screen
    # cat /etc/ipsec.d/mesh.conf
    conn clear
    	auto=ondemand
    	type=passthrough
    	authby=never
    	left=%defaultroute
    	right=%group
    conn private
    	auto=ondemand
    	type=transport
    	authby=rsasig
    	failureshunt=drop
    	negotiationshunt=drop
    	# left
    	left=%defaultroute
    	leftcert=nodeXXXX
    	leftid=%fromcert
            leftrsasigkey=%cert
    	# right
    	rightrsasigkey=%cert
    	rightid=%fromcert
    	right=%opportunisticgroup
    conn private-or-clear
    	auto=ondemand
    	type=transport
    	authby=rsasig
    	failureshunt=passthrough
    	negotiationshunt=passthrough
    	# left
    	left=%defaultroute
    	leftcert=nodeXXXX
    	leftid=%fromcert
            leftrsasigkey=%cert
    	# right
    	rightrsasigkey=%cert
    	rightid=%fromcert
    	right=%opportunisticgroup
    ```
3.  以适当的类别添加网络的 IP 地址。例如，如果所有节点都在 10.15.0.0/16
    网络中，那么所有节点都应强制执行 `IPsec`{.literal} 加密：
    ``` screen
    # echo "10.15.0.0/16" >> /etc/ipsec.d/policies/private
    ```
4.  要允许某些节点（如 10.15.34.0/24）使用或不使用 `IPsec`{.literal}
    ，请使用以下方法将这些节点添加到 private-or-clear 组中：
    ``` screen
    # echo "10.15.34.0/24" >> /etc/ipsec.d/policies/private-or-clear
    ```
5.  要将一个不支持 `IPsec`{.literal} 的主机（如 10.15.1.2）定义到 clear
    组，请使用：
    ``` screen
    # echo "10.15.1.2/32" >> /etc/ipsec.d/policies/clear
    ```
    `/etc/ipsec.d/policies`{.literal}
    目录中的文件可以从每个新节点的模板创建，也可以使用 Puppet 或 Ansible
    来提供。
    请注意，每个节点都有相同的异常列表或不同的流量预期。因此，两个节点可能无法通信，因为一个节点需要
    `IPsec`{.literal}，而另一个节点无法使用 `IPsec`{.literal}。
6.  重启节点将其添加到配置的网格中：
    ``` screen
    # systemctl restart ipsec
    ```
7.  完成添加节点后，`ping`{.literal} 命令就足以打开一个
    `IPsec`{.literal} 隧道。查看节点已打开的隧道：
    ``` screen
    # ipsec trafficstatus
    ```
:::
:::
::: section
::: titlepage
# []{#configuring-a-vpn-with-ipsec_securing-networks.html#deploying-a-fips-compliant-ipsec-vpn_configuring-a-vpn-with-ipsec}部署 FIPS 兼容 IPsec VPN {.title}
:::
使用此流程基于 Libreswan 部署 FIPS 兼容 IPsec VPN
解决方案。以下步骤还允许您识别哪些加密算法可用，并在 FIPS 模式的
Libreswan 中禁用了哪些加密算法。