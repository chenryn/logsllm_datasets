x = 0 =};
// source of probe
// set clock
when (x == r && !out.lck)
send_reply {=
out.lck = 1,
out.src = id,
out.dst = cp,
out.pc = pc,
in.lck = 0 =}
// reserve out-buf
// send new probe cnt
} }
The process behaviour starts with some declarations. In
addition to the typical data types, clock variables can be
used. These are real-valued variables that increase implic-
itly and all run at the same pace. Clocks can be reset to zero
and can be compared to expressions. Thus, the bahviour of
a process can be made depending on time explicitly. The
behaviour of a device is non-terminating as indicated by
the outermost do-loop. In that repetitive behaviour, a de-
vice waits until it receives a probe, i.e., until its input buffer
is non-empty. This is indicated by the initial when-clause.
Like for the device, the behaviour of a CP is non-
terminating. Its behaviour starts by probing the device (for
simplicity we assume in this description a single device; in
case of more devices there is one thread per device). In
the innermost do-construct it is waited until one of three
alternatives occurs: (i) if a timeout appears and more re-
transmissions are allowed, a probe is resend, (ii) if a reply
is received in time, the experienced probe load is deter-
mined (using clock y), and the inter-probe-delay d is ad-
justed according to equation (1), and (iii) if a timeout oc-
curs and the maximal number of retransmissions has been
reached, the device is considered absent. In the latter two
cases, a new probe cycle is initiated after respecting the
inter-probe-delay d.
Steady-state analysis.
In order to obtain more insight
into the protocol’s behaviour we (cid:2)rst carried out a steady-
state simulation using the batch-mean technique and con-
(cid:2)dence interval 0.1 with a con(cid:2)dence level of 0.95. The
MOTOR-M ¤OBIUS integrated modeling tool [4] has been
4
used for that purpose. The Mobius project (cid:2)les are avail-
able from [10]. The values for the parameters that deter-
mine the extent to which to enlarge or shorten the delay
(cid:14) between probe cycles are given by [3]: (cid:11)inc = 2 and
2 . Other important parameter values that were
(cid:11)dec = 3
2 , Lideal =
used for the steady-state simulation were: (cid:12) = 3
106 and Lnom = 10 (yielding (cid:1) = 105), (cid:14)min = 0:02 and
(cid:14)max = 10. Furthermore, it has been assumed that there
is a single device, and k = 20, i.e., 20 CPs are continu-
ously present. In a stabilized situation, one would expect
the CPs probing at a frequency of Lnom =k = 0:5. To avoid
buffer overruns, the network buffer size has been (cid:2)xed to
20,000 elements. The network delay has been modeled as
a uniform probabilistic choice between three modes of op-
eration: a slow, a medium and a fast mode. We have exper-
imented with several other types of networks, and obtained
similar phenomena for all of them.
The analysis focused on the probe frequency 1
(cid:14) of the
CPs. The simulation revealed that indeed network buffer
over(cid:3)ow is a seldom phenomenon as the average buffer
length is very small ((cid:25) 0:004). Surprisingly, however, the
mean delay of almost all CPs was about 10.0, whereas two
CPs had a delay of only 0.4. Both values are far away from
the optimal delay, k=Lnom = 2. Whereas the self-adaptive
mechanism should(cid:151)surely in a static system situation(cid:151)
lead to an equal spreading of the probe frequencies, this
is thus apparently not the case. Secondly, some CPs have
a high variance in their computed delays, whereas others
have only minimal variation. The most extreme case is a
CP with a mean delay of 8 and a variance of about 13.5.
Despite this abnormal behaviour of the CPs, the device
load is quite good (i.e., it is near to Lnom = 10, and has
a low variance). These unexpected steady-state simulation
results motivated a set of more detailed simulations in or-
der to obtain a better insight into these phenomena.
transient
simulation. Various
Transient
simulations
have been carried out that simulated the initial 20,000 sec-
onds of the probe protocol. All studied con(cid:2)gurations con-
sist of a single device and a number of CPs. Whereas for
one or two CPs, the probe frequencies were balanced and
exhibit almost no variance as expected, for three CPs this
is not the case: Fig. 2 shows the probe frequencies of the
3 CPs (y-axis) versus the elapsed time (x-axis). Note that
after a short initial phase, one CP is probing less and less
frequent, and is not recovering from this (undesired) sit-
uation. Another observation is that although the remain-
ing two CPs tend to (cid:147)stabilize(cid:148) their probing frequencies,
there remains to be a rather high variance in their frequen-
cies. Simulations of other scenarios with different num-
bers of CP show similar behaviour: some CPs probe rather
fast, whereas others are probing (unexpectedly) slower and
 14
 14
 14
3 active Control Points (5h 33m 20s)
3 active Control Points (5h 33m 20s)
3 active Control Points (5h 33m 20s)
"cp_01_delay.txt"
"cp_01_delay.txt"
"cp_01_delay.txt"
"cp_02_delay.txt"
"cp_02_delay.txt"
"cp_03_delay.txt"
 12
 12
 12
 10
 10
 10
 8
 8
 8
 6
 6
 6
 4
 4
 4
 2
 2
 2
)
)
)
c
c
c
e
e
e
s
s
s
/
/
/
1
1
1
(
(
(
y
y
y
a
a
a
e
e
e
d
d
d
1
1
1
/
/
/
l
l
l
 0
 0
 0
 0
 0
 0
 5000
 5000
 5000
 10000
 10000
 10000
t (sec)
t (sec)
t (sec)
 15000
 15000
 15000
 20000
 20000
 20000
Figure 2. Probe frequencies for 3 CPs
Evolution of Delays over 1 Minute
"cp_01_delay.txt"
"cp_02_delay.txt"
"cp_07_delay.txt"
"cp_10_delay.txt"
"cp_12_delay.txt"
"cp_19_delay.txt"
"cp_20_delay.txt"
 14
 12
 10
 8
 6
 4
 2
)
c
e
s
/
1
(
y
a
e
d
/
1
l
 0
 12300
 12310
 12320
 12330
t (sec)
 12340
 12350
 12360
Figure 3. Probe frequencies for 7 (out of 20)
CPs for 1 minute
slower, and do not recover from this situation. Similarly,
high variances in the individual probe frequencies of a sin-
gle CP occur. Fig. 3 shows for 7 arbitrary CPs out of a
collection of 20 CPs how their probing frequencies evolve
over a short interval of 1 minute. We like to stress that in
all these scenarios the number of CPs is completely static,
i.e., no CPs join or leave the system.
Fig. 4 shows the effect for two CPs that start in a con-
(cid:2)guration of 20 present CPs of which 18 suddenly leave
simultaneously. Whereas in a static scenario with just two
CPs, their frequencies are equal, we see that in this dy-
namic scenario, there is neither a load balance between the
CPs nor a low variance.
Some considerations. The above analysis revealed (at
least) two undesired phenomena:
the variance in prob-
5
 14
"cp_01_delay.txt"
"cp_02_delay.txt"
 12
20 CPs
18CPs leave, 2 CPs left
 10
 8
 6
 4
 2
)
c
e
s
/
1
(
y
a
e
d
1
/
l
 0
 0
 5000
 10000
t (sec)
 15000
 20000
Figure 4. Suddenly 18 out of 20 CPs leave
ing frequencies of (individual and between) CPs may be
extremely large, and CPs can even be completely starv-
ing without the possibility to recover from this situation.
Would it not be possible to adapt the protocol to (cid:147)synchro-
nize(cid:148) CPs in some sense thus obtaining a stable and equal
probe frequency for all CPs? An important source of these
undesired phenomena is that the experienced probe load
Lexp of a CP may be misleading. In particular, a CP cannot
distinguish between many CPs that probe the same device
at medium rate, or a few CPs probing the device at a high
frequency. In both cases, the device tends to be overloaded,
and the difference pc0 (cid:0) pc is large, resulting in a lowering
of the CP’s probe frequency. Moreover, if the device load
drops below the threshold Lnom, the CPs with a higher
pinging frequency will detect this faster. Due to the greedy
nature of the protocol they will therefore increase their re-
spective probe frequencies, thus increasing the probe load
of the device. CPs with a low frequency are therefore with
high probability too late to get their share of the available
bandwidth. The adaptive probe protocol as described here
has therefore an inherent fairness problem.
This raises the question, why devices not simply com-
municate other information that CPs could use to deter-
mine their probing frequency more accurately? These con-
siderations form the basis for the next protocol.
4. An Improved Lightweight Probe Protocol
The protocol described in this section is intended to
overcome the fairness problem encountered just above.
Like before, there are two types of nodes (devices and CPs)
and the basic protocol mechanism is that CPs continuously
probe a device to check its presence. Instead of keeping
track of the number of times the device has been probed
so far, a device simply schedules when a probing CP is al-
6
lowed to probe it again. The device replies to a probe with
a delay value indicating to the respective CP how long it
has to wait before it may probe again. This mechanism
can be viewed as a bakery protocol: on probing, a CP re-
ceives an indication about the next time instant at which it
can probe the device. To facilitate this scheme, the device
keeps track of the (cid:2)rst free time slot at which it wants to
be probed (i.e., (cid:2)rst ticket count that has not been assigned
yet).
In addition to the ticket count, a device sends the
ids of the last two (distinct) CPs that probed it as part of
the reply. This information is used (as before) for a quick
dissemination of absence information concerning a device
using the overlay network. As we will see, CPs will now
probe a device in a (cid:2)xed order, and therefore, the overlay
network will be a ring.3
Device behaviour. A device keeps track of nt, the (cid:2)rst
time instant for which the last pinging CP has been sched-
uled to probe again. On receipt of a new probe from a CP
at time t, this variable is incremented by (cid:1) (nt 0=nt+(cid:1))4
and a reply is sent to the probing CP with as parameters the
delay nt 0 (cid:0) t until the time instant where the pinging CP
is scheduled for its next probe and the ids of the last two
distinct CPs that probed the device. In the following we
describe how we choose an appropriate value for (cid:1).
As in the adaptive protocol, we assume that the device
has a certain maximal probe load, Lnom which it is able
or willing to cope with. We de(cid:2)ne (cid:14)min = 1=Lnom. Ad-
ditionally, we must assume that also a CP does only want
to ping with a maximal frequency, fmax , and we de(cid:2)ne
dmin = 1=fmax. In order to obtain a reasonable value for
(cid:1), the following two constraints should be ful(cid:2)lled. As-
sume again that a probe has just arrived at time t. Then: (i)
(cid:1) > (cid:14)min , which asserts that two consecutive probes are
at least (cid:14)min time units apart, and (ii) nt(cid:0)t+(cid:1) > dmin ,
which states that the CP should not probe earlier than
t+dmin . Summarizing, we have:
(cid:1) > maxf(cid:14)min ; dmin (cid:0)(nt(cid:0)t)g:
In order to be as fast as possible, we choose in the sequel:
(cid:1) = maxf(cid:14)min ; dmin (cid:0)(nt(cid:0)t)g:
(2)
CP behaviour. The CP behaviour is, compared to the
adaptive protocol, much simpler. The CP shows the same
behaviour with respect to the probing and re-probing of
a device, however, the delay between two probe cycles is
3This may be improved by letting the device keeping track of more
CPs that have probed, and sending back a randomly selected subset in a