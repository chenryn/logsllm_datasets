return A[o][O]
var A= [2][2]int{
if n *maxHeight && root.Left == nil && root.Right == nil {
return res 
findBottomLeftvalueDFS(root, O, &res, &maxHeight)
res, maxHeight := O,-1 
 type TreeNode struct {
 Definition for a binary tree node.
next := []*TreeNode{} 
 findBottomLeftvalueDFS(root.Left, curHeight+l, res, maxHeight)
findBottomLeftValueDFS(root.Right, curHeight+l, res, maxHeight)
*res = root.val 
*maxHeight = CurHeight 
 return 0
 Val int 
Right *TreeNode
Left *TreeNode
 curHeight int, res, maxHeight
---
## Page 589
代码
求在二叉树的每一行中找到最大的值。
题目大意
Example:
You need to find the largest value in each row of a binary tree.
题目
515. Find Largest Value in Each Tree Row
解题思路
·用 BFS 层序遍历，将每层排序取出最大值。改进的做法是遍历中不断更新每层的最大值。
·给出一个二叉树，要求依次输出每行的最大值
Output:[1，3，9]
Input:
return 0
了
queue = next
if len(next) == 0 {
5
 return queue[o].va]
if node.Right != nil {
if node.Left != nil {
 next = append(next, node.Right)
 next = append(next, node.Left)
3
9
---
## Page 590
//解法二层序遍历二叉树，遍历过程中不断更新最大值
//解法一层序遍历二叉树，再将每层排序取出最大值
func largestValuesl(root *TreeNode) []int {
func largestValues(root *TreeNode) []int
package leetcode
import
if root == nil {
res := []int{} 
tmp := levelorder(root)
var res []int 
b
return res
for i := O; i  max {
q = q[1:]
node := q[0]
Right *TreeNode
Left *TreeNode
Val int 
q = append(q, node.Right)
q = append(q, node.Left)
max = node.val
tmp[i][len(tmp[i]]-1]]
---
## Page 591
解题思路
最长的串，如果最长的串有多组解，要求输出字典序最小的那组解。
给出一个初始串，再给定一个字符串数组，要求在字符串数组中找到能在初始串中通过删除字符得到的
题目大意
Note:
Example 2: 
Example 1: 
return the empty string.
by deleting some characters of the given string. If there are more than one possible results, 
ao aq u pen seo au ui us saul au pus euo sus e pue us e uai
题目
524. Longest Word in Dictionary through Deleting
· Allthe strings in the input will only contain lower-case letters.
output:
S = "abpcplea", d = ["a","b","c"]
"a"
Output:
.eaLd.*. d[i])] {
func findLongestword(s string, d []string) string 
package leetcode
return res
for i := O; i >1
prefixSum[i]= prefixSum[i-1] + e 
if i == 0 { 
 high = mid
return mid 
low = mid + 1 
prefixsum[i] = e
continue 
---
## Page 597
Example 1:
('M' or 'E'), return the board after revealing this position according to the following rules: 
Now given the next click position (row and column indices) among allthe unrevealed squares 
mine.
how many mines are adjacent to this revealed square, and finally 'x' represents a revealed 
mine, 'E' represents an unrevealed empty square, 'B' represents a revealed blank square that 
You are given a 2D char matrix representing the game board. 'M' represents an unrevealed 
Let's play the minesweeper game (Wikipedia, online game)!
题目
529. Minesweeper
has no adjacent (above, below, left, right, and all 4 diagonals) mines, digit ('1' to '8') represents
click :[3,0]
 4. Return the board when no more squares will be revealed.
 3. If an empty square ('E') with at least one adjacent mine is revealed, then change it to a 
 2. If an empty square ('E') with no adjacent mines is revealed, then change it to revealed blank 
1. If a mine ('M') is revealed, then the game is over - change it to 'X'.
[['B',
Output:
[['e',
Input:
['B',
['e',
3.]
['e',
* param_l := obj.PickIndex();
**
 digit (1' to '8') representing the number of adjacent mines.
('B') and all of its adjacent unrevealed squares should be revealed recursively.
 return low
 obj := Constructor(w)； 
 Your solution object will be instantiated and called as such:
'1',
'e', 'e', 'e', 'e'l]
'E'，'E'，'E'， 'E'],
'1',
'E',
'm',
'm',