discovRE slightly supersedes that of of Multi-k-MH.
One crucial unit of measure is the time needed to execute
a bug search, especially for real-world problems. Pewny et al.
state that the normalized running time to prepare the data was
either 18.7 minutes (Multi-MH) or 286.1 minutes (Multi-k-
MH) per 10,000 basic blocks. We measured the overall time
of our approach, i.e., including the time IDA Pro needed for
the disassembly and its analysis in order to be more realistic.
Our approach needs only 8.7 seconds for 10,000 basic blocks,
which is a speedup by two or three orders of magnitude,
depending on the approach.
In a typical scenario a binary is only prepared once and
then stored in a code base. Typically, there would several
hundreds or even thousands of binaries reside in the code
base. Once a new bug is published, the vulnerable function
is identiﬁed and queried in the code base. Thus, the far more
interesting time is the actual bug search. Here, the approach
Method
Percent Correct Rank Query Time
kNN – k-d Trees (8)
discovRE (kNN (k-d Trees (8)) + Graph)
93.93 %
93.93 %
5.50
1.00
0.32 ms
56.48 ms
TABLE IV: discovRE evaluation with OpenSSL. The table shows the percentage of cases with correct matching, the average rank for correctly
matched functions, and the average query times.
From → To
ARM → MIPS
ARM → x86
ARM → DD-WRT
ARM → ReadyNAS
MIPS → ARM
MIPS → x86
MIPS → DD-WRT
MIPS → ReadyNAS
x86 → ARM
x86 → MIPS
x86 → DD-WRT
x86 → ReadyNAS
Preparation Normalized Avg. Time
Query Normalized Avg. Time
DTLS
Multi-MH
TLS
1;2
1;2
1;2
1;2
2;3
1;4
1;2
2;4
1;2
1;7
70;78
1;2
1;2
1;2
1;2
1;2
3;4
1;3
1;2
6;16
1;2
11;21
1;2
1;2
18.7 min
0.3 s
Multi-k-MH
TLS DTLS
1;2
1;2
1;2
1;2
1;2
1;2
1;2
1;2
1;2
1;2
5;33
1;2
1;2
1;2
1;2
1;2
1;2
1;3
1;2
1;4
1;2
1;6
1;2
1;2
286.1 min
1 s
discovRE
TLS
1;2
1;2
1;2
1;2
1;2
1;2
1;2
1;2
1;2
1;4
1;2
1;2
DTLS
1;2
1;2
1;2
1;2
1;2
1;2
1;2
1;2
1;2
1;3
1;2
1;2
0.14 min
4.1 · 10−4 s
TABLE V: Results for Pewny et al.’s approaches Multi-MH and Multi-k-MH and discovRE for OpenSSL.
by Pewny et al. takes about 0.3 s (Multi-MH) or 1.0 s (Multi-
k-MH) to search one basic block per 10,000 basic blocks.
In comparison, our approach has a normalized average of
0.41 ms, which is three orders of magnitude faster. This value
was calculated with just the OpenSSL library in the code base.
Note that due to the nature of our approach, this value can
signiﬁcantly change. E.g., the normalized average query time
for the complete ReadyNAS image with roughly 3 million
basic blocks is 0.015 ms, which would change the factor by
one order of magnitude towards our approach.
1) Cross-Architecture Bug Search in Complete Firmware
Images: As noted above, the scenario of manually identifying
and extracting potentially vulnerable binaries from a ﬁrmware
image is a tedious task. A better line of action would be
to extract all binaries from a ﬁrmware image and automat-
ically store them in the code base. To put above evaluation
into perspective, we show the total number of basic blocks
of aforementioned ﬁrmware images in Table VI. While for
example the OpenSSL binary of DD-WRT contains already
about 11,000 basic blocks, the accumulated number over all
binaries is several orders of magnitude larger.
In addition to DD-WRT and ReadyNAS, we obtained
a vulnerable Android ROM image (version 4.1.1) compiled
for HTC Desire [56]. The HTC Desire has a Qualcomm
Snapdragon CPU with an ARMv7 instruction set. We extracted
the ﬁle system and found 527 native ELF binaries. A total of
133,205 functions could be identiﬁed as sufﬁciently large and
were thus stored in the code base. For DD-WRT, 143 binaries
could be identiﬁed with a total of 34,884 functions. ReadyNAS
contained 1,510 binaries with a total of 295,792 functions. The
respective preparation times can be found in Table VI.
Even in a realistic scenario the overall time needed to
disassemble all binaries and extract the function features is
manageable, e.g., about 30 minutes for a complete Android
image.
For each combination of CPU architectures and ﬁrmware
image we searched the Heartbleed TLS bug and additionally
CVE-2014-3566 (POODLE). The POODLE vulnerability is
found in the function ssl_cipher_list_to_bytes. We
searched each vulnerable function 20 times in the database and
calculated average values where it was useful. Table VII gives
some insights about the search times and placements of the
queried function, split up in the two search stages of discovRE.
While the kNN algorithm is not always able to assign the
queried function a high rank, it is still always among the
ﬁrst k results. In the next stage, the mCS algorithm correctly
identiﬁes all buggy functions across CPU architectures and
ranks them ﬁrst.
The query times of the kNN algorithm are under 2 ms
and thus very low, compared to the mCS algorithm. For larger
ﬁrmware images, the number of binary functions that share
similar numeric features inevitably becomes larger, as the
density increases. Hence, the number of candidate functions for
the mCS algorithm increases and so does the overall running
11
time. With well under 90 ms the time is acceptable in real-
world scenarios, even for large code bases.
Our results clearly show that the presented syntactic ap-
proach outperforms state-of-the-art semantic approaches wrt.
speed while still maintaining the same predictive quality.
C. Comparison to BinDiff
We compared our results with BinDiff [22]. BinDiff is a
comparison tool for binary ﬁles that matches identical and
similar functions in two binaries. It is based on IDA Pro and
can compare binary ﬁles for x86, MIPS, ARM, PowerPC,
and other architectures supported by IDA Pro. BinDiff is
not designed to handle our use case, i.e., searching for a
single function in a code base. It relies among others on
calling relationship of functions to identify matches in two
binaries. We emphasize that this comparison is informal, as
it is designed to help understand the quality of discovRE in
comparison to BinDiff when applied for bug search.
For this comparison, we searched for functions correspond-
ing to POODLE and Heartbleed vulnerabilities taken from an
x86 OpenSSL binary in an ARM OpenSSL binary. To create
a similar settings to our bug search use case, we removed all
functions from the IDA Pro database except for the queried
function. Then we used BinDiff to check whether it can
correctly match this function in the ARM binary. For POO-
DLE, BinDiff erroneously predicted ssl_callback_ctrl
as match (with a similarity of 0.03 and a conﬁdence of
0.08). BinDiff also fails in the case of Heartbleed; it returned
dtls1_stop_timer as a match with a similarity of 0.01
and a conﬁdence of 0.03. On the other hand, discovRE
correctly identiﬁed the vulnerable functions.
V. LIMITATIONS
The identiﬁcation of vulnerabilities in large code bases
clearly demonstrates the capabilities of our approach. Never-
theless, there exist limitations that need to be considered: First,
our similarity is purely syntactical and thus cannot handle code
that may be heavily obfuscated to avoid similarity detection
(e.g., malware). To tackle this problem, one can leverage
approaches such as [60, 39, 65, 20] to extract and deobfuscate
the binary code and then apply discovRE on the deobfuscated
code. Moreover, the binary code of many prominent software
products is not obfuscated but instead compiled with different
options/compilers/architectures and evolves over time. Our
approach is very fast and accurate when handling these cases.
Second, our method operates at the function level and thus
cannot be used be with sub-function granularity. However,
the vast majority of bugs can be pinpointed to one or a
list of speciﬁc functions. These functions can be efﬁciently
identiﬁed by discovRE and presented to the user for further
analysis. Also, our approach needs a precise identiﬁcation of
the functions contained in a binary. Our evaluation showed that
IDA Pro delivered satisfactory results in our experiments. To
further improve these results, one can leverage the recent and
advanced academic methods to recognize functions in binary
code such as [16, 55]. These methods employ machine learning
techniques to accurately recognize functions across multiple
operating systems, CPU architectures, compilers, and compiler
options.
Third, function inlining may heavily change the CFG of a
program. This will impact the quality of structural similarity
and may thus become problematic for our approach. We leave
the evaluation of discovRE in case of function inlining for
future work.
The functions considered by discovRE need to have a
certain amount of complexity for the approach to work effec-
tively. Otherwise, the relatively low combinatorial number of
CFGs leads to a high probability for collision. Hence, we only
considered functions with at least ﬁve basic blocks, as noted in
Section IV. The potential for bugs in small functions, however,
is signiﬁcantly lower than in large functions, as shown in
[46]. Hence, in a real-world scenario this should be no factual
limitation.
VI. RELATED WORK
The development of methods for ﬁnding vulnerabilities
in software has been in the focus of security research for a
long time and several techniques have been proposed. For our
discussion of related work, we focus on approaches that aim
to measure code similarity and search for already known bugs.
There also exist orthogonal approaches that aim at ﬁnding
previously unknown bugs such as AEG [14] or Mayhem [19].
We will not discuss these approaches further since they have
a different goal and employ different methods such as fuzzing
and symbolic execution.
At the core of searching for known bugs in software is
measuring code similarity. Several works focused on ﬁnding
code clones at the source code level. Token-based approaches
such as CCFinder [38] and CP-Miner [43] analyze the token
sequence produced by lexer and scan for duplicate token sub-
sequences, which indicate potential code clones. In order to en-
hance robustness against code modiﬁcations, DECKARD [35]
characterize abstract syntax trees as numerical vectors and
clustered these vectors wrt. the Euclidean distance metric. Ya-
maguchi et al. [63] extended this idea by determining structural
patterns in abstract syntax trees, such that each function in the
code could be described as a mixture of these patterns. This
representation enabled identifying code similar to a known
vulnerability by ﬁnding functions with a similar mixture of
structural patterns. ReDeBug [34] is a scalable system for
quickly ﬁnding unpatched code clones in OS-distribution scale
code bases. Contrary to discovRE, these systems assume the
availability of source code and cannot operate at the binary
level.
Due to the signiﬁcant challenges associated with comparing
binary code, many previous works support a single architec-
ture or make simplifying assumptions that do not hold in
practice. Flake et al. [24] proposed to match the CFGs of
functions, which helps to be robust against some compiler
optimizations such as instruction reordering and changes in
register allocation. However, the approach could only iden-
tify exact CFG matching and is thus not suitable for bug
search. Myles et al. [51] proposed to use opcode-level k-
grams as a software birthmarking technique. BinHunt [26]
and its successor iBinHunt [49] relied on symbolic execution
and a theorem prover to check semantic equivalence between
basic blocks. Checking for semantic equivalence limits the
applicability of this approach for bug search since it is not
12
Firmware Image
Binaries (unique)
Basic Blocks Multi-MH Multi-k-MH discovRE
DD-WRT r21676 (MIPS)
Android 4.1.1 (ARM)
ReadyNAS v6.1.6 (ARM)
143 (142)
527 (318)
1,510 (1,463)
329,220
1,465,240
2,927,857
616
2,740
5,475
9,419
41,921
83,766
2.1
28.7
51.4
Preparation Time in Minutes
TABLE VI: Preparation times and additional data about three real-world ﬁrmware images that are used in the evaluation of
discovRE. Note that the times shown for Multi-MH and Multi-k-MH are projected times and not actual measurements.
From → To
ARM → DD-WRT
ARM → Android
ARM → ReadyNAS
MIPS → DD-WRT
MIPS → Android
MIPS → ReadyNAS
x86 → DD-WRT
x86 → Android
x86 → ReadyNAS
Heartbleed (TLS)
Multi-MH
1.3 · 105 ms
5.7 · 105 ms
1.1 · 106 ms
Query Time
Multi-k-MH
4.3 · 105
1.9 · 106
3.8 · 106
see above
see above
discovRE
43.8 ms
49.5 ms
66.5 ms
47.2 ms
55.2 ms
65.7 ms
43.0 ms
58.7 ms
69.8 ms
rank (discovRE)
1;2
1;2
1;2