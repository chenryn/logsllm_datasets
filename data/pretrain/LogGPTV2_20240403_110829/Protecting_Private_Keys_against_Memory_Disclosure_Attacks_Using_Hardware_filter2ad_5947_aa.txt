title:Protecting Private Keys against Memory Disclosure Attacks Using Hardware
Transactional Memory
author:Le Guan and
Jingqiang Lin and
Bo Luo and
Jiwu Jing and
Jing Wang
2015 IEEE Symposium on Security and Privacy
2015 IEEE Symposium on Security and Privacy
Protecting Private Keys against Memory Disclosure Attacks using Hardware
Transactional Memory
Le Guan∗†§, Jingqiang Lin∗†, Bo Luo‡, Jiwu Jing∗† and Jing Wang∗†
∗Data Assurance and Communication Security Research Center, Chinese Academy of Sciences, China
†State Key Laboratory of Information Security, Institute of Information Engineering, Chinese Academy of Sciences, China
‡Department of Electrical Engineering and Computer Science, the University of Kansas, USA
Email: {guanle, linjingqiang}@iie.ac.cn, PI:EMAIL, {jingjiwu, wangjing}@iie.ac.cn
§University of Chinese Academy of Sciences, China
Abstract—Cryptography plays an important role in comput-
er and communication security. In practical implementations of
cryptosystems, the cryptographic keys are usually loaded into
the memory as plaintext, and then used in the cryptographic
algorithms. Therefore, the private keys are subject to memory
disclosure attacks that read unauthorized data from RAM.
Such attacks could be performed through software methods
(e.g., OpenSSL Heartbleed) even when the integrity of the
victim system’s executable binaries is maintained. They could
also be performed through physical methods (e.g., cold-boot
attacks on RAM chips) even when the system is free of
software vulnerabilities. In this paper, we propose Mimosa that
protects RSA private keys against the above software-based and
physical memory attacks. When the Mimosa service is in idle,
private keys are encrypted and reside in memory as ciphertext.
During the cryptographic computing, Mimosa uses hardware
transactional memory (HTM) to ensure that (a) whenever a
malicious process other than Mimosa attempts to read the
plaintext private key, the transaction aborts and all sensitive
data are automatically cleared with hardware mechanisms, due
to the strong atomicity guarantee of HTM; and (b) all sensitive
data, including private keys and intermediate states, appear as
plaintext only within CPU-bound caches, and are never loaded
to RAM chips.
To the best of our knowledge, Mimosa is the ﬁrst solution
to use transactional memory to protect sensitive data against
memory disclosure attacks. We have implemented Mimosa on a
commodity machine with Intel Core i7 Haswell CPUs. Through
extensive experiments, we show that Mimosa effectively pro-
tects cryptographic keys against various attacks that attempt
to read sensitive data from memory, and it only introduces a
small performance overhead.
I. INTRODUCTION
Cryptosystems play an important role in computer and
communication security, and the cryptographic keys shall
be protected with the highest level of security in computer
systems. However, in signing or decryption operations, the
private keys are usually loaded into memory as plaintext, and
thus become vulnerable to memory disclosure attacks that
read sensitive data in memory. Firstly, such attacks could be
launched through software exploitations. For instance, the
OpenSSL Heartbleed vulnerability allows remote attackers
Jingqiang Lin is the corresponding author.
without any privileges to steal sensitive data in memory [58].
Malicious unprivileged processes can exploit other different
vulnerabilities [31, 50, 57, 59] to obtain unauthorized mem-
ory data. According to the statistics of Linux vulnerabilities
[24], 16.2% of the vulnerabilities can be exploited to read
unauthorized data from the memory space of operating
system (OS) kernel or user processes. These memory dis-
closure attacks can be launched successfully, even when
the integrity of the victim system’s executable binaries is
maintained at all times. Hence, existing solutions such as
buffer-overﬂow guards [22, 23, 83] and kernel
integrity
protections [38, 47, 63, 70], are ineffective against these
“silent” memory attacks. Finally, attackers with physical
access to the computer are capable of bypassing all the OS
protections to directly read data from RAM chips, even when
the system is free of the vulnerabilities mentioned above.
For example, the cold-boot attacks [32] “freeze” the RAM
chips of a running victim computer, place them into another
machine controlled by the attacker, and then read the RAM
contents.
In this paper, we present Mimosa, which uses hardware
transactional memory (HTM) to protect private keys against
software and physical memory disclosure attacks described
above. In particular, we use Intel Transactional Synchro-
nization eXtensions (TSX) [40], a commodity implementa-
tion of HTM in commercial-off-the-shelf (COTS) platforms.
Transactional memory is originally proposed as a speculative
memory access mechanism to boost
the performance of
multi-threaded applications [37]. However, we ﬁnd that the
strong atomicity guarantee provided by HTM can be utilized
to defeat illegal concurrent accesses to the memory space
that contains sensitive data. Moreover, TSX and most HTM
are physically implemented on top of CPU caches, so that
cryptographic computing using TSX can be constrained
entirely in the CPU, effectively preventing cold-boot attacks
on RAM chips.
In Mimosa, each private-key computation is performed as
an atomic transaction. During the transaction, the encrypted
private key is ﬁrst decrypted into plaintext, and then used to
decrypt or sign messages. If the transaction is interrupted due
© 2015, Le Guan. Under license to IEEE.
© 2015, Le Guan. Under license to IEEE.
DOI 10.1109/SP.2015.8
DOI 10.1109/SP.2015.8
3
3
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:06:11 UTC from IEEE Xplore.  Restrictions apply. 
to any reason (e.g., attack attempt, interrupt, exception, or
fault), a hardware-enabled abort handler clears all updated
but uncommitted data in the transaction, which guarantees
that the sensitive private key (and all intermediate states)
cannot be accessed by concurrent malicious processes. Note
that the abort processing is non-maskable, and is triggered
by HTM automatically. Before committing the computation
result, all sensitive data are carefully cleared. Hence, in
Mimosa, a software-based memory disclosure attack only
obtains cleared data, even if it successfully reads from the
memory addresses for the cryptographic keys or other sensi-
tive data.1 Meanwhile, with the Intel TSX implementation,
the transaction is performed entirely within CPU caches and
the updated but uncommitted contents (i.e., the plaintext
private keys) are never loaded to the RAM chips. Therefore,
Mimosa is also immune to cold-boot attacks.
When the private keys are at-rest (i.e., there is no signing
or decryption request), they always remain encrypted by an
AES key-encryption key. Mimosa integrates TRESOR [56],
a register-based AES cryptographic engine, to protect the
AES master key in debug registers that are only accessible
with ring 0 privileges. If Mimosa is triggered for a sign-
ing/decryption task, the private key is decrypted by the AES
master key, and then used for signing/decryption; the whole
process is implemented as a transaction as introduced above.
We have implemented the prototype system with Intel
TSX, but the Mimosa design is applicable to other existing
HTM implementations using on-chip caches [45, 82] or store
buffers [2, 27, 33]. When the private-key computation is
executed as a transaction protected by HTM and the private
key is decrypted (i.e., the data are updated) on-the-ﬂy in
the transactional execution, any attack attempt to access the
private key would result in data conﬂicts that would abort the
transaction. Because these HTM solutions are CPU-bound,
they are also effective in preventing cold-boot attacks.
Performing the computationally expensive private-key op-
eration as a transaction with Intel TSX is much more
challenging than it seems to be. Because transaction memory
is originally proposed for speculatively running critical sec-
tions, a transaction with Intel TSX is typically lightweight,
such as setting or unsetting a shared ﬂag variable. To
support RSA private-key operations, the Mimosa computing
task needs to address many problems, including unfriendly
instructions, data sharing intrinsic in OS functions, local
interrupts, kernel preemption, and other unexpected aborts;
otherwise, the transactional execution would never commit.
Mimosa is implemented as a kernel module in Linux and
exported as an OpenSSL cryptographic engine. We have
successfully evaluated the Mimosa prototype on an Intel
Core i7 4770S Haswell CPU with TSX. Experimental results
1Our solution reactively clears the memory to protect sensitive data
whenever an attack attempt is detected. Hence, we name it Mimosa, as
it is similar to the plant Mimosa pudica, which protects itself by folding
its leaves when touched or shaken.
show that Mimosa only introduces a small overhead to
provide the security guarantees. Its performance is very close
to popular RSA implementations without additional security
protections. Through extensive validations, we conﬁrm that
no private key is disclosed under various memory disclosure
attacks.
Our contributions are three-fold. (1) We are the ﬁrst in
the literature to utilize transactional memory to ensure the
conﬁdentiality of sensitive information, especially private
keys, against software and physical memory disclosure at-
tacks. (2) We have implemented the Mimosa prototype on
a commodity implementation of HTM (i.e., Intel TSX), and
the experimental evaluation showed that it is immune to
the memory disclosure attacks with a small overhead. And
(3) we develop an empirical guideline to perform heavy
computations in an Intel TSX transaction, which suggests
the possibility to extend the applications of HTM.
The rest of the paper is organized as follows. The back-
ground and preliminaries are introduced in Section II. We
then present the Mimosa’s design and implementation details
in Sections III and IV, respectively. Experimental results are
shown in Section V, and the security analysis is in Section
VI. We summarize related works in Section VII and ﬁnally
conclude the paper.
II. BACKGROUND AND PRELIMINARIES
This section ﬁrst summarizes the software and physical
attacks that steal sensitive data in memory. We then discuss
the CPU-bound solutions against cold-boot attacks. Finally,
we introduce transactional memory and one of its hardware
implementations, Intel TSX, which is used in Mimosa.
A. Memory Disclosure Attacks on Sensitive Data
Memory disclosure attacks are roughly classiﬁed into two
categories: software-based and hardware (or physical) at-
tacks. Software attacks usually exploit system vulnerabilities
to read unauthorized addresses in the memory space, while
hardware-based attacks require physical access to the victim
machine to read from RAM chips.
Software Memory Disclosure Attack. Various software
vulnerabilities allows adversaries to read unauthorized data
from the memory space of OS kernel or user processes
without modifying kernel binaries. That is, even when the
integrity of the victim system is ensured, memory disclosure
attacks can be launched successfully.
These memory vulnerabilities result from unveriﬁed in-
puts, isolation defects, memory dump, memory reuse or
cross-use, and uncleared buffers. For example, the OpenSSL
Heartbleed vulnerability [58] allows remote attackers to re-
ceive sensitive data by manipulating abnormal SSL heartbeat
requests; or attackers can exploit the vulnerability reported
in [31] to read memory at a random location. The un-
initialization error [57] and the ALSA bug [59] leads to
44
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:06:11 UTC from IEEE Xplore.  Restrictions apply. 
sensitive information leakage from kernel memory. As a
result of unintended software design and implementation
issues, such as swap, core dump, hibernation and crash
reports, memory content could be swapped to disks [17],
which may be accessible to attackers. For example, cryp-
tographic keys are recovered from Linux memory dump
ﬁles [65]. Some FTP and Email servers dump core ﬁles to a
directory accessible to adversaries [48, 74, 79, 80], leaking
the passwords that were kept in memory. Finally, uncleared
data buffers in memory are subject
to reuse or cross-
use [77, 78]. By exploiting the Linux ext2 implementation
vulnerability, private keys of OpenSSH and HTTPS can be
exposed from uncleared buffers [35].
Cold-Boot Attack. This typical and powerful physical
memory attack results from the remanence effect of semi-
conductor devices; that is, the contents of dynamic RAM
(DRAM) chips gradually fade away. At low temperatures the
fading speed slows down signiﬁcantly. Hence, adversaries
can retrieve the remained data by cold-booting the running
target computer and loading a malicious OS [32]. The cold-
boot attacks are launched by resetting the computer and
loading a malicious OS from an external storage, or alter-
natively by placing the DRAM chips into another machine
controlled by the attacker. The cold-boot attack requires no
account or credential information on the target machine, and
can be launched even if the victim system is free of the
vulnerabilities that can otherwise be exploited by software
memory disclosure attacks.
B. CPU-Bound Solutions against Cold-Boot Attacks
While there are different solutions against software mem-
ory disclosure attacks [14, 28, 35, 61], the countermeasure
against cold-boot attacks is to bound the operations in
CPUs. The idea of CPU-bound solutions is to avoid loading
sensitive data (e.g., AES keys) into RAM chips, so that
cold-boot attacks would fail. Register-based cryptographic
engines [55, 56, 73] have implemented the AES algorithm
entirely within the processor. In particular, TRESOR [56]
stores the AES keys in debug registers and Amnesia [73]
uses model-speciﬁc registers. These register-based engines
also prevent software memory disclosure attacks, because
the keys and sensitive intermediate states never appear in
memory. Note that atomicity must be ensured in a block
encryption/decryption to avoid swapping register states to
memory, including general purpose registers that store in-
termediate values.
PRIME [29] and Copker [30] extends the CPU-bound
solutions to asymmetric algorithms. The AES key protected
by TRESOR is used as a master key (i.e., the key-encryption
key) to encrypt RSA private keys. In PRIME [29], the private
key is ﬁrst decrypted into AVX registers and the RSA com-
putations are performed within these registers. The perfor-
mance is only about 10% of the traditional implementations,
due to the limited size of registers. Meanwhile, Copker [30]
employs CPU caches to perform RSA decryption/signing,
which results in better performance. However, Copker de-
pends on a trustworthy OS kernel to avoid illegal memory
read operations to keep the sensitive keys in caches. That
is, Copker is not immune to software memory disclosure
attacks.
C. Transactional Memory and Intel TSX
Transactional memory is a memory access mechanism of
CPUs, originally designed to improve the performance of
concurrent threads and reduce programming efforts [37].
Programmers can accomplish ﬁne-grained locking with
coarse-grained locks. The key idea is to run critical sections
speculatively and serialize them only in the case of data
conﬂicts, which happen when several threads concurrently
access the same memory location and at least one of them
attempts to update the content. If the entire transaction is
executed without any conﬂict, all modiﬁed data are commit-
ted atomically and made visible to other threads; otherwise,
all updates are discarded and the thread is rolled back to
the automatically-saved checkpoint. Transactional memory
can be implemented in software [16, 34] or supported by
hardware [40, 45, 82].
Intel TSX [40], ﬁrst shipped in the 4th-generation Core
CPUs (i.e., Haswell), provides transactional memory support
that
is completely hardware-enabled. Programmers only
need to specify critical sections for transactional execution,
the processor transparently performs conﬂict detection, com-
mit and roll-back operations. To detect data conﬂicts, Intel
TSX keeps all updated but uncommitted data in the ﬁrst-
level data (L1D) cache, and tracks a read-set (addresses that
have been read from) and a write-set (addresses that have
been written to) in the transaction.
Data conﬂicts are detected on top of the cache-coherence
protocol, at the granularity of cache lines. A data conﬂict
is detected if another core either (a) reads from a memory
location that is in the transaction’s write-set, or (b) writes to a
location in the write-set or read-set. If no conﬂict is detected,
all write operations within the transaction are committed
and become visible to other cores atomically. Otherwise,
all updated data are discarded and the thread is rolled back
to the saved checkpoint, as if the transaction never started.
However, except for data conﬂicts, several other events
can cause an Intel TSX transaction to abort. This includes
unfriendly instructions such as cache-control
instructions
(e.g., CLFLUSH and WBINVD), operations on the X87 and
MMX architecture states, background system activities such
as interrupt and exception, and executing self-modifying
codes. There are also other micro-architectural implemen-
tation dependent reasons. For a detailed list of events that
may abort a transaction, see the Intel TSX speciﬁcation [40].
Intel TSX provides two programming interfaces with
different abort handling mechanisms. First, Hardware Lock
55
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:06:11 UTC from IEEE Xplore.  Restrictions apply. 
Elision (HLE) is compatible with legacy instructions, and
works with two new instruction preﬁxes (i.e., XACQUIRE
and XRELEASE). The preﬁxes give hints to processors that
execution is about to enter or exit the critical section. On
aborts, after rolling back to the original state, the processor
automatically restarts the execution in a legacy manner; that
is, locks are acquired before entering the critical section.
The second TSX programming interface called Restricted
Transactional Memory (RTM), provides three new instruc-
tions (i.e., XBEGIN, XEND and XABORT) to start, commit,
and abort transactional execution. In RTM, programmers
specify a fallback function as the operand of XBEGIN.
Aborted execution jumps to the speciﬁed address of the
fallback function, so the programmers can implement cus-
tomized codes to handle the situation; for instance, to retry
or explicitly acquire a lock.