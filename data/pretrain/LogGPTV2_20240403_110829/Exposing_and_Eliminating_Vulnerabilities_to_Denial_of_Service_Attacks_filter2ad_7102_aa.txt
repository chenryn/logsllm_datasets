title:Exposing and Eliminating Vulnerabilities to Denial of Service Attacks
in Secure Gossip-Based Multicast
author:Gal Badishi and
Idit Keidar and
Amir Sasson
Exposing and Eliminating Vulnerabilities to
Denial of Service Attacks in Secure Gossip-Based Multicast
Gal Badishi
Idit Keidar
Amir Sasson
EE Department, Technion
EE Department, Technion
CS Department, Technion
Abstract
We propose a framework and methodology for quantify-
ing the effect of denial of service (DoS) attacks on a dis-
tributed system. We present a systematic study of the resis-
tance of gossip-based multicast protocols to DoS attacks.
We show that even distributed and randomized gossip-based
protocols, which eliminate single points of failure, do not
necessarily eliminate vulnerabilities to DoS attacks. We
propose Drum – a simple gossip-based multicast proto-
col that eliminates such vulnerabilities. Drum was imple-
mented in Java and tested on a large cluster. We show,
using closed-form mathematical analysis, simulations, and
empirical tests, that Drum survives severe DoS attacks.
1. Introduction
One of the most devastating security threats faced by a
distributed system is a denial of service (DoS) attack, in
which an attacker makes a system unresponsive by forc-
ing it to handle bogus requests that consume all available
resources. In 2003, approximately 42% of U.S. organiza-
tions, including government agencies, ﬁnancial institutions,
medical institutions and universities, were faced with DoS
attacks [6]. That year, DoS attacks were the second most
ﬁnancially damaging attacks (65 million USD), only short
of theft of proprietary information (70 million USD), and
far above other attacks (0.07− 27 million USD) [6]. There-
fore, coping with DoS attacks is essential when deploying
services in a hostile environment such as the Internet [17].
As a ﬁrst defense, one may protect a system against
DoS attacks using network-level mechanisms [5]. How-
ever, network-level ﬁlters cannot detect DoS attacks at the
application level, when the trafﬁc seems legitimate. Even
if means are in place to protect against network-level DoS,
an attack can still be performed at the application level, as
the bandwidth needed to perform such an attack is usually
lower. This is especially true if the application performs in-
tensive computations for each message, as occurs, e.g., with
secure protocols based on digital signatures. In this paper,
we are concerned with DoS attacks on secure application-
level multicast protocols (such as, e.g., Spinglass [3]), fo-
cusing only on the multicast protocol layer.
A DoS attack that targets every process in a large sys-
tem inevitably causes performance degradation, but also re-
quires vast resources. In order to be effective even with lim-
ited resources, attackers target vulnerable parts of the sys-
tem. For example, consider a tree-based multicast protocol;
by targeting a single inner node in the tree, an attacker can
effectively partition the multicast group. Hence, eliminating
single points of failure is an essential step in constructing
protocols that are less vulnerable to DoS attacks.
We therefore focus on gossip-based (epidemic) multicast
protocols, e.g., [7, 2, 8, 10], which eliminate single points
of failure using redundancy and random choices. Such pro-
tocols are robust and have been shown to provide graceful
degradation in the face of amounting failures [9, 11]. One
may expect that such a system will not suffer from vulner-
abilities to DoS attacks, since it can continue to be effec-
tive when many processes fail. Surprisingly, we show that
gossip-based protocols can be extremely vulnerable to DoS
attacks targeted at a small subset of the processes. This oc-
curs because an attacker can effectively isolate a small set
of processes from the rest of the group by attacking this set.
To quantify the effects of DoS attacks, we measure their
inﬂuence on the time it takes to propagate a message to
all the processes in the system, as well as on the average
throughput processes can receive. We do this using asymp-
totic analysis, simulations, and measurements.
Having observed the vulnerabilities of traditional proto-
cols, we turn to search for a protocol that will eliminate
these vulnerabilities. Speciﬁcally, our goal is to design a
protocol that would not allow an attacker to increase the
damage it causes by focusing on a subset of the processes.
We are not familiar with any previous protocol that achieves
this goal.
We present Drum (DoS-Resistant Unforgeable Multi-
cast), a gossip-based multicast protocol, which, using a few
simple ideas, eliminates common vulnerabilities to DoS at-
tacks. Mathematical analysis and simulations show that
Drum indeed achieves our design goal: when an adversary
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 10:04:10 UTC from IEEE Xplore.  Restrictions apply. 
has a large sending capacity, its most effective attack against
Drum is an all-out attack that distributes the attacking power
as broadly as possible. Obviously, performance degradation
due to a broad all-out DoS attack is unavoidable for any
multicast protocol, and indeed all the tested protocols ex-
hibit the same performance degradation under such a broad
attack.
We have implemented Drum in Java and tested it on a
on a cluster of workstations. Our measurements validate
the analysis and simulation results, and show that Drum can
withstand severe DoS attacks, where na¨ıve protocols that
do not take any measures against DoS attacks completely
collapse. E.g., under an attack that focuses on 10% of the
processes, Drum’s latency and throughput remain constant
as the attack strength increases, whereas in traditional pro-
tocols, the latency grows linearly with the attack strength,
and the throughput continuously degrades.
In summary, this paper makes the following contributions:
• It presents a new framework and methodology for
quantifying the effects of DoS attacks. We are not fa-
miliar with any previously suggested metrics for DoS-
resistance nor with previous attempts to quantify the
effect of DoS attacks on a system.
• It uses the new methodology to conduct the ﬁrst sys-
tematic study of the impact of DoS attacks on multicast
protocols. This study exposes vulnerabilities in tradi-
tional gossip-based protocols.
• It presents Drum, a simple gossip-based multicast pro-
tocol that eliminates such vulnerabilities. We believe
that the ideas used in Drum can serve to mitigate the
effect of DoS attacks on other protocols as well.
• It provides closed-form asymptotic analysis as well as
simulations and measurements of gossip-based multi-
cast protocols under DoS attacks varying in strength
and extent.
This paper proceeds as follows: Section 2 gives back-
ground on gossip-based multicast and related work. Sec-
tion 3 presents the system model. Section 4 describes Drum.
Section 5 presents our evaluation methodology and consid-
ered attack models. The following three sections evaluate
Drum and compare it to traditional gossip-based protocols
using various tools: Section 6 gives closed-form asymptotic
latency bounds; Section 7 provides a thorough evaluation
using simulations; and Section 8 presents actual latency and
throughput measurements. Section 9 concludes.
2. Background and Related Work
Gossip-based dissemination [7] is a leading approach in
the design of scalable reliable application-level multicast
protocols, e.g., [2, 8, 10]. Our work focuses on symmetric
gossip-based multicast protocols that do not rely on external
mechanisms such as IP multicast, e.g., lpbcast [8].
Such protocols work roughly as follows: Each process
locally divides its time into gossip rounds; rounds are not
synchronized among the processes. In each round, the pro-
cess randomly selects a small number of processes to gos-
sip with, and exchanges information with them. Every
piece of information is gossiped for a number of rounds.
It has been shown that the propagation time of gossip pro-
tocols increases logarithmically with the number of pro-
cesses [19, 10]. There are two methods for information
dissemination: (1) push, in which the process sends mes-
sages to selected processes; and (2) pull, in which the pro-
cess requests messages from selected processes. Both meth-
ods are susceptible to DoS attacks: attacking the incom-
ing push channels of a process may prevent it from receiv-
ing valid messages, and attacking a process’s incoming pull
channels may prevent it from sending messages to valid tar-
gets. Some protocols use both methods [7, 10]. Karp et
al. showed that combining push and pull allows the use of
fewer transmissions to ensure data arrival to all group mem-
bers [10].
Drum utilizes both methods, and in addition, allocates a
bounded amount of resources for each operation (push and
pull), so that a DoS attack on one operation does not hamper
the other. Such a resource separation approach was also
used in COCA [22], for the sake of overcoming DoS attacks
on authentication servers. Note that Drum deals with DoS
attacks at the application-level. Network-level DoS analysis
and mitigation has been extensively dealt with (e.g, [20, 4]),
but DoS-resistance at the secure multicast service layer has
gotten little attention.
Secure gossip-based dissemination protocols were sug-
gested by Malkhi et al. [13, 14, 15]. However, they did
not deal with DoS attacks. Follow-up work by Minsky and
Schneider [16] suggested a pull-based protocol that can en-
dure limited DoS attacks by bounding the number of ac-
cepted requests per round. However, these works solve the
diffusion problem, in which each message simultaneously
originates at more than t correct processes, where up to t
processes may suffer Byzantine failures.
In contrast, we
consider a multicast system where a message originates at
a single source. Hence, using a pull-based solution as sug-
gested in [16] does not help in withstanding DoS attacks.
Moreover, Minsky and Schneider [16] focus on load rather
than DoS attacks; they include only a brief analysis of DoS
attacks, under the assumption that no more than t processes
perform the attack, and that each of them generates a single
message per round (the reception bound is also assumed to
be one message per round). In contrast, we focus on sub-
stantially more severe attacks, and study how system per-
formance degrades as the attack strength increases.
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 10:04:10 UTC from IEEE Xplore.  Restrictions apply. 
DoS can also be caused by churn, where processes
rapidly join and leave [12], thus reducing availability. In
Drum, as in other gossip-based protocols, churn has little
effect on availability: even when as many as half the pro-
cesses fail, such protocols can continue to deliver messages
reliably and with good quality of service [9, 11]. A DoS
attack of another form can be caused by process perturba-
tions, whereby some processes are intermittently unrespon-
sive. The effect of perturbations is analyzed in [2], where
it is shown that probabilistic protocols, e.g., gossip-based
protocols, solve this problem. This paper focuses on DoS
attacks in which the attacker sends fabricated application
messages. We note that our work is the ﬁrst that we know
of that conducts a systematic study of the effect of DoS at-
tacks on message latency.
3. System Model and Architecture
Drum supports probabilistically reliable multicast [2,
8, 10] among processes that are members of a group.
Each message is created by exactly one group member (its
source).
We assume that
the underlying network is fully-
connected. There are no bounds on message delays, i.e., the
communication is asynchronous. The loss rate on the com-
munication links is bounded, uniform, and independent of
any other factor. The communication channels are insecure,
meaning that senders of incoming messages cannot be reli-
ably identiﬁed in a simple manner. However, the data mes-
sages’ sources (originators) can be identiﬁed using standard
cryptographic techniques, e.g., [18]. Additionally, some in-
formation intended for a speciﬁc process may be encrypted
using, e.g., a public-key infrastructure.
An adversary can generate fabricated messages and
snoop on messages. However, these operations require the
adversary to utilize resources. Malicious processes perform
DoS attacks on group members.
In case these malicious
processes are part of the group, they also refrain from for-
warding messages.
For simplicity, we consider a static group of n processes
and assume that every process has complete knowledge of
all the other processes in the group. In the full paper [1] we
explain how to deal with dynamic membership, i.e., joins
and leaves. We note that having incomplete knowledge of
current group members in a dynamic setting poses no prob-
lem, as long as enough members are known. For more de-
tails see [1].
4. DoS-Resistant Gossip-Based Multicast Pro-
tocol
Drum is a simple gossip protocol, which achieves DoS-
resistance using a combination of pull and push operations,
separate resource bounds for different operations, and the
use of random ports in order to reduce the chance of a port
being attacked.
Each process, p, locally divides its time into rounds. A
round is typically in the order of a second, and its dura-
tion may vary according to local random choices. Every
round, p chooses two small (constant size) random sets of
processes, viewpush and viewpull, and gossips with them.
E.g., when these views consist of two processes each, this
corresponds to a combined fan-out of four. In addition, p
maintains a message buffer. Process p performs the follow-
ing operations in each round:
• Pull-request – p sends a digest of the messages it has
received to the processes in its viewpull, requesting
missing messages. Pull-request messages are sent to
a well-known port. The pull-request speciﬁes a ran-
domly selected port on which p will await responses,
and p spawns a thread for listening on the chosen port.
This thread is terminated after a few rounds.
• Pull-reply – in response to pull-request messages arriv-
ing on the well-known port, p randomly selects mes-
sages that it has and are missing from the received di-
gests, and sends them to the destinations indicated in
the requests.
• Push – in a traditional push operation, p randomly
picks messages from its buffer, and sends them to each
target t in its viewpush.
In order to avoid wasting
bandwidth on messages that t already has, p instead
requests t to reply with a message digest, as follows:
1. p sends a push-offer to t, along with a random
port on which it waits for a push-reply.
2. t replies with a push-reply to p’s random port,
containing a digest of the messages t has, and a
random port on which t waits for data messages.
3. If p has messages that are missing from the di-
gest, it chooses a random subset of these, and
sends them back to t’s randomly chosen port.
The target process listens on a well-known port for
push-offers.
The random ports transmitted during the push and pull
operations are encrypted (e.g., using the recipient’s pub-
lic key), in order to prevent an adversary from discovering
them. Thus, |viewpush| + |viewpull| encryptions are per-
formed each time these ports are changed.
Upon receiving a new data message, either by push or
in response to a pull-request, p ﬁrst performs some sanity
checks. If the message passes these checks, p delivers it
to the application and saves it in its message buffer for a
number of rounds.
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 10:04:10 UTC from IEEE Xplore.  Restrictions apply. 
Resource allocation and bounds.
In each round, p
sends push-offers to all the processes in its viewpush and
pull-requests to all the processes in its viewpull. If the to-
tal number of push-replies and pull-requests that arrive in a
round exceeds p’s sending capacity, then p equally divides
its capacity between sending responses to push-replies and
to pull-requests. Likewise, p responds to a bounded number
(typically |viewpush|) of push-offers in a round, and if more
data messages than it can handle arrive, then p divides its
capability for processing incoming data messages equally
between messages arriving in response to pull-requests and
those arriving in response to push-replies.
At the end of each round, p discards all unread messages
from its incoming message buffers. This is important, espe-
cially in the presence of DoS attacks, as an attacker can send
more messages than p can handle in a round. Since rounds
are locally controlled and randomly vary in duration, the
attacker cannot “aim” its messages for the beginning of a
round. Thus, a bogus message has an equal likelihood of
being discarded at the end of the round as an authentic mes-
sages does.
Achieving DoS-resistance. We now explain how the
combination of push, pull, random port selections, and re-
source bounds achieves resistance to targeted DoS attacks.
A DoS attack can ﬂood a port with fabricated messages.
Since the number of messages accepted on each port in a
round is bounded, the probability of successfully receiving
a given valid message M in a given round is inversely pro-
portional to the total number of messages arriving on the
same port as M in that round. Thanks to the separate re-
source bounds, an attack on one port does not reduce the
probability for receiving valid messages on other ports.
In order to prevent a process from sending its messages
using a push operation, one must attack (ﬂood) the push-
offer targets, the ports where push-replies are awaited, or
the ports where data messages are awaited. However, the
push destinations are randomly chosen in each round, and
the push-reply and data ports are randomly chosen and en-
crypted. Thus, the attacker has no way of predicting these
choices.
Similarly, in order to prevent a process from receiving
messages during a pull operation, one needs to target the
destination of the pull-requests or the ports on which pull-
replies arrive. However, the destinations and ports are ran-
domly chosen and the ports are sent encrypted. Thus, using
the push operation, Drum achieves resilience to targeted at-
tacks aimed at preventing a process from sending messages,
and using the pull operation, it withstands attacks that try to
prevent a process from receiving messages.
5. Evaluation Methodology
The most important contribution of this paper is our thor-
ough evaluation of the impact of various DoS attacks on
gossip-based multicast protocols. We evaluate three pro-
tocols: (i) Drum, (ii) Push, which uses only push opera-
tions, and (iii) Pull, which uses only pull operations. Pull
and Push are implemented the same way Drum is, with the