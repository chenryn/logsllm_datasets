# Exposing and Eliminating Vulnerabilities to Denial of Service Attacks in Secure Gossip-Based Multicast

## Authors
- Gal Badishi, EE Department, Technion
- Idit Keidar, EE Department, Technion
- Amir Sasson, CS Department, Technion

## Abstract
This paper introduces a framework and methodology for quantifying the impact of denial of service (DoS) attacks on distributed systems. We conduct a systematic study of the resistance of gossip-based multicast protocols to DoS attacks. Our findings indicate that even distributed and randomized gossip-based protocols, which eliminate single points of failure, can still be vulnerable to DoS attacks. To address this, we propose Drum, a simple gossip-based multicast protocol designed to mitigate such vulnerabilities. Drum has been implemented in Java and tested on a large cluster. Through closed-form mathematical analysis, simulations, and empirical tests, we demonstrate that Drum can withstand severe DoS attacks.

## 1. Introduction
Denial of service (DoS) attacks, where an attacker makes a system unresponsive by overwhelming it with bogus requests, are one of the most devastating security threats faced by distributed systems. In 2003, approximately 42% of U.S. organizations, including government agencies, financial institutions, medical institutions, and universities, experienced DoS attacks [6]. These attacks were the second most financially damaging, costing $65 million, just behind the theft of proprietary information ($70 million) and far above other types of attacks (ranging from $0.07 to $27 million) [6]. Therefore, mitigating DoS attacks is crucial when deploying services in hostile environments like the Internet [17].

Network-level mechanisms can provide a first line of defense against DoS attacks [5], but they cannot detect application-level DoS attacks where the traffic appears legitimate. Even with network-level protections, attackers can still target the application layer, especially if the application performs intensive computations, such as secure protocols based on digital signatures. This paper focuses on DoS attacks on secure application-level multicast protocols, such as Spinglass [3], specifically at the multicast protocol layer.

A DoS attack targeting every process in a large system causes performance degradation and requires significant resources. Attackers often target vulnerable parts of the system to be effective with limited resources. For example, in a tree-based multicast protocol, attacking a single inner node can partition the multicast group. Thus, eliminating single points of failure is essential in constructing less vulnerable protocols.

We focus on gossip-based (epidemic) multicast protocols, which use redundancy and random choices to eliminate single points of failure. Such protocols are robust and provide graceful degradation under increasing failures [9, 11]. However, we show that gossip-based protocols can be highly vulnerable to DoS attacks targeted at a small subset of processes. An attacker can isolate a small set of processes from the rest by focusing on this subset.

To quantify the effects of DoS attacks, we measure their influence on message propagation time and average throughput using asymptotic analysis, simulations, and measurements. We then present Drum (DoS-Resistant Unforgeable Multicast), a gossip-based multicast protocol that eliminates common vulnerabilities to DoS attacks. Mathematical analysis and simulations show that Drum achieves our design goal: an adversary's most effective attack against Drum is a broad, all-out attack. Performance degradation due to such a broad attack is unavoidable for any multicast protocol, and all tested protocols exhibit similar performance degradation under such conditions.

We have implemented Drum in Java and tested it on a cluster of workstations. Our measurements validate the analysis and simulation results, showing that Drum can withstand severe DoS attacks, while naive protocols without DoS protection completely collapse. For example, under an attack targeting 10% of the processes, Drum's latency and throughput remain constant as the attack strength increases, whereas traditional protocols experience linearly increasing latency and continuously degrading throughput.

In summary, this paper makes the following contributions:
- It presents a new framework and methodology for quantifying the effects of DoS attacks.
- It conducts the first systematic study of the impact of DoS attacks on multicast protocols, exposing vulnerabilities in traditional gossip-based protocols.
- It introduces Drum, a simple gossip-based multicast protocol that eliminates these vulnerabilities.
- It provides closed-form asymptotic analysis, simulations, and measurements of gossip-based multicast protocols under varying DoS attacks.

## 2. Background and Related Work
Gossip-based dissemination is a leading approach in designing scalable, reliable application-level multicast protocols [7, 2, 8, 10]. Our work focuses on symmetric gossip-based multicast protocols that do not rely on external mechanisms like IP multicast, e.g., lpbcast [8].

Gossip-based protocols work by dividing time into local, unsynchronized rounds. In each round, a process randomly selects a small number of processes to gossip with, exchanging information. The propagation time of gossip protocols increases logarithmically with the number of processes [19, 10]. Information dissemination methods include push (sending messages to selected processes) and pull (requesting messages from selected processes). Both methods are susceptible to DoS attacks. Karp et al. showed that combining push and pull allows fewer transmissions to ensure data arrival to all group members [10].

Drum utilizes both push and pull methods and allocates bounded resources for each operation, ensuring that a DoS attack on one operation does not hamper the other. A similar resource separation approach was used in COCA [22] to overcome DoS attacks on authentication servers. Drum addresses DoS attacks at the application level, while network-level DoS analysis and mitigation have been extensively studied [20, 4].

Secure gossip-based dissemination protocols have been proposed by Malkhi et al. [13, 14, 15], but they did not address DoS attacks. Minsky and Schneider [16] suggested a pull-based protocol that can endure limited DoS attacks by bounding the number of accepted requests per round. However, their work focused on diffusion problems, not DoS attacks, and assumed limited attack strength. In contrast, we consider more severe attacks and study how system performance degrades as attack strength increases.

Churn, where processes rapidly join and leave, can also cause DoS. Gossip-based protocols, including Drum, are resilient to churn and can continue to deliver messages reliably even when up to half the processes fail [9, 11]. Another form of DoS attack involves process perturbations, where some processes are intermittently unresponsive. Probabilistic protocols, such as gossip-based protocols, can solve this problem [2]. This paper focuses on DoS attacks involving fabricated application messages, and it is the first to systematically study the effect of DoS attacks on message latency.

## 3. System Model and Architecture
Drum supports probabilistically reliable multicast among processes in a group. Each message is created by exactly one group member. We assume a fully-connected underlying network with no bounds on message delays, meaning communication is asynchronous. The loss rate on communication links is bounded, uniform, and independent. Communication channels are insecure, but data message sources can be identified using standard cryptographic techniques. Some information may be encrypted using a public-key infrastructure.

An adversary can generate fabricated messages and snoop on messages, but these operations require resources. Malicious processes perform DoS attacks on group members and refrain from forwarding messages if they are part of the group. We consider a static group of \( n \) processes, assuming complete knowledge of all processes. In the full paper [1], we explain how to handle dynamic membership, i.e., joins and leaves. Incomplete knowledge of current group members in a dynamic setting is manageable as long as enough members are known.

## 4. DoS-Resistant Gossip-Based Multicast Protocol
Drum is a simple gossip protocol that achieves DoS-resistance through a combination of pull and push operations, separate resource bounds, and the use of random ports to reduce the chance of port attacks.

Each process, \( p \), divides its time into rounds. In each round, \( p \) chooses two small, random sets of processes, \( \text{viewpush} \) and \( \text{viewpull} \), and gossips with them. For example, if these views consist of two processes each, the combined fan-out is four. Process \( p \) performs the following operations in each round:

- **Pull-request**: \( p \) sends a digest of received messages to processes in \( \text{viewpull} \), requesting missing messages. Pull-requests are sent to a well-known port, specifying a randomly selected port for responses. A thread listens on this port and terminates after a few rounds.
- **Pull-reply**: In response to pull-requests, \( p \) randomly selects messages it has and sends them to the destinations indicated in the requests.
- **Push**: In a traditional push operation, \( p \) randomly picks messages from its buffer and sends them to each target in \( \text{viewpush} \). To avoid wasting bandwidth, \( p \) instead requests a message digest from the target:
  1. \( p \) sends a push-offer to the target, along with a random port for the push-reply.
  2. The target replies with a push-reply containing a message digest and a random port for data messages.
  3. If \( p \) has messages missing from the digest, it sends a random subset back to the targetâ€™s port.

The random ports used in push and pull operations are encrypted to prevent discovery by an adversary. Upon receiving a new data message, \( p \) performs sanity checks and delivers it to the application, saving it in its message buffer for a number of rounds.

**Resource Allocation and Bounds**: In each round, \( p \) sends push-offers to all processes in \( \text{viewpush} \) and pull-requests to all processes in \( \text{viewpull} \). If the total number of push-replies and pull-requests exceeds \( p \)'s sending capacity, \( p \) equally divides its capacity between responding to push-replies and pull-requests. \( p \) responds to a bounded number of push-offers and processes incoming data messages equally between pull-requests and push-replies. At the end of each round, \( p \) discards unread messages, which is important during DoS attacks, as an attacker can send more messages than \( p \) can handle.

**Achieving DoS-Resistance**: The combination of push, pull, random port selections, and resource bounds achieves resistance to targeted DoS attacks. Since the number of messages accepted on each port is bounded, the probability of receiving a valid message is inversely proportional to the total number of messages on the same port. Separate resource bounds ensure that an attack on one port does not affect others. Random port selections and encryption make it difficult for an attacker to predict and target specific ports, thereby preventing targeted attacks on push and pull operations.

## 5. Evaluation Methodology
The primary contribution of this paper is a thorough evaluation of the impact of various DoS attacks on gossip-based multicast protocols. We evaluate three protocols: (i) Drum, (ii) Push, which uses only push operations, and (iii) Pull, which uses only pull operations. Pull and Push are implemented similarly to Drum, with the exception of the specific operations they use.