# 初级篇
前面的很简单,看看就过吧
## [Reflected XSS into HTML context with nothing
encoded](https://portswigger.net/web-security/cross-site-scripting/reflected/lab-html-context-nothing-encoded)
payload
## [Stored XSS into HTML context with nothing
encoded](https://portswigger.net/web-security/cross-site-scripting/stored/lab-html-context-nothing-encoded)
payload
## [DOM XSS in document.write sink using source
location.search](https://portswigger.net/web-security/cross-site-scripting/dom-based/lab-document-write-sink)
漏洞成因
query参数可控,闭合标签
payload
    ">
## [DOM XSS in innerHTML sink using source
location.search](https://portswigger.net/web-security/cross-site-scripting/dom-based/lab-innerhtml-sink)
漏洞成因
payload
## [DOM XSS in jQuery anchor href attribute sink using location.search
source](https://portswigger.net/web-security/cross-site-scripting/dom-based/lab-jquery-href-attribute-sink)
漏洞成因
returnPath可控,直接写入属性href
payload
    javascript:alert(document.cookie)
## [DOM XSS in jQuery selector sink using a hashchange
event](https://portswigger.net/web-security/cross-site-scripting/dom-based/lab-jquery-selector-hash-change-event)
漏洞成因
触发hashchange事件时执行匿名函数
var post=$()这行是用jquery选择对应的元素,可以定位到多个元素
所以下面一行post.get(0)是指符合条件的第一个元素
如果元素存在则执行post.get(0).scrollIntoView();
scrollIntoView()这个方法是跳到对应的元素显示出来
此代码测试scrollIntoView()
触发点击事件后会自动跳到2所在的地方
那接下如何触发hashchange事件
也就是说url中#在内以及以后的部分发生变化就会触发hashchange事件
最后看关键行
`var post = $('section.blog-list h2:contains(' +
decodeURIComponent(window.location.hash.slice(1)) + ')');`
window.location.hash.slice(1)这部分就是指#后面的内容
decodeURIComponent()就是url解码
假设url后面就是#1234
那么这句代码就变成了`var post = $('section.blog-list h2:contains('1234')');`
接下来看选择器选中的元素
也就是当这些h2标签中含有1234页面就会跳到那个位置
接下来验证猜想
找到最后一个h2内容是Spider Web Security
访问#Security果然会跳到最后的位置
到这里代码就全明白了
思考下面payload为什么能弹窗
先访问#再访问下面的payload
    #
根据我们对代码的分析,这个payload没道理会弹窗的
对代码进行调试分析
发现把代码删减后只留下一行仍会弹窗,说明弹窗就在这一行
    var post = $('section.blog-list h2:contains(' + decodeURIComponent(window.location.hash.slice(1)) + ')');
继续改代码,省略传参和事件响应
仍旧弹窗,说明该弹窗是由jquery触发的
我想这个题的知识点就是在此
`jquery选择器内可以插入标签`
利用payload
前面的代码都懂了,也明白为什么弹窗了,下面就是水到渠成了
    '">
## [Reflected XSS into attribute with angle brackets HTML-encoded](https://portswigger.net/web-security/cross-site-scripting/contexts/lab-attribute-angle-brackets-html-encoded)
payload
闭合了value的双引号
    "onmouseover="alert(1)
## [Stored XSS into anchor href attribute with double quotes HTML-encoded](https://portswigger.net/web-security/cross-site-scripting/contexts/lab-href-attribute-double-quotes-html-encoded)
payload
把输入的内容直接放到href里了,也没啥技术含量
    javascript:alert(1)
## [Reflected XSS into a JavaScript string with angle brackets HTML
encoded](https://portswigger.net/web-security/cross-site-scripting/contexts/lab-javascript-string-angle-brackets-html-encoded)
payload
闭合单引号执行js
这里有个知识点值得注意,下面代码会弹窗三次
`字符串+-alert()+-字符串仍旧会执行alert`
# 中级篇
## [DOM XSS in document.write sink using source location.search inside a
select element](https://portswigger.net/web-security/cross-site-scripting/dom-based/lab-document-write-sink-inside-select-element)
payload
参数storeId可控,闭合了select标签,追加img标签
    product?productId=1&storeId=">
## [DOM XSS in AngularJS expression with angle brackets and double quotes
HTML-encoded](https://portswigger.net/web-security/cross-site-scripting/dom-based/lab-angularjs-expression)
此题中<>和引号均被实体化
但发现使用了angular
angular和jquery一样具有自己的特性
payload
    {{$on.constructor('alert(1)')()}}
## [Reflected DOM XSS](https://portswigger.net/web-security/cross-site-scripting/dom-based/lab-dom-xss-reflected)
payload
    "-alert(1)}//
## [Stored DOM XSS](https://portswigger.net/web-security/cross-site-scripting/dom-based/lab-dom-xss-stored)
漏洞成因
下手的地方就是以上两处
payload
    <>
由代码可知这两个位置payload都可以执行
## [Exploiting cross-site scripting to steal
cookies](https://portswigger.net/web-security/cross-site-scripting/exploiting/lab-stealing-cookies)
此处开始有点接近实战利用了
利用xss偷取cookie
下面代码就像burp里的repeater一样发送个post请求,请求体是cookie
谁触发了xss这个请求体的cookie自然就是谁的
在自己服务器上做好记录就能看到所有请求以及请求体,如下
搭建好web服务好像请求的url是会自动生成日志的,名字类似xxx_access_log(不会记录body部分)
想省劲的话可以直接在url后面拼接document.cookie
这里多说两句
既然别人带着该网站的cookie访问你的服务器
那你可以在服务器写个脚本(防止cookie过期失效)
    1.保存cookie
    2.带着cookie发起某些请求,获取敏感信息或进行敏感操作
## [Exploiting cross-site scripting to capture
passwords](https://portswigger.net/web-security/cross-site-scripting/exploiting/lab-capturing-passwords)
也是实战,偷取密码
payload
流程基本和上一题是一样的
不过这个payload修改了原有的html
payload中的两个input输入框是我们自己插入的
当有人在输入框输入账号密码,触发onchange事件
onchange事件会把账号密码发送到别人服务器
## [Exploiting XSS to perform CSRF](https://portswigger.net/web-security/cross-site-scripting/exploiting/lab-perform-csrf)
上面也提到了,获取cookie后可以进行敏感操作
但是有一些操作是需要csrf校验的,如下
获取csrf token的两种方式
    1.利用js代码,获取受害者主机上面的token(在受害者主机发起请求)---稍微麻烦
    2.在自己电脑上替换cookie,提取自己主机上面的token(在自己主机发起请求)---简单无脑
下面这个payload就是提取了受害者主机上面的token在受害者主机上发起请求(有些严苛条件不得不这么做)
上面payload中的逻辑顺序是
    1.访问my-account页面
    2.正则提取csrf token
    3.带着token访问/my-account/change-email修改邮箱
注意一点,虽然`req.onload = handleResponse;`写在第三行
实际是在打开my-account(四五行)后才执行的(要不然你提取哪里的csrf token)
## [Reflected XSS into HTML context with most tags and attributes
blocked](https://portswigger.net/web-security/cross-site-scripting/contexts/lab-html-context-with-most-tags-and-attributes-blocked)
这里就涉及到fuzz的艺术了
首先爆破哪些标签可以用
得到可用标签
爆破可用事件
得到可用事件
payload:body+onresize
onresize在窗口大小改变时触发,那我们直接用代码改变窗口大小就可以了
这里值得思考一下,我们能写dom或者js的地方只有onresize事件里
假如是这样写``就本末倒置了
所以在onresize事件里写出触发onresize事件的代码是不靠谱的
这里payload借用了iframe的onload事件来触发onresize事件
实际利用就是把payload插入到自己的网站中偷cookie
注意比较
    在Exploiting cross-site scripting to steal cookies这题中,
    xss是插入在A站点评论区的,也就是说你偷取的cookie肯定是A站点的且大概率是已经登录过的cookie
    在本题中,
    xss是插入在自己站点上,你并不知道别人有没有登录过A站点所以获取到的大概率是未登录过的cookie
## [Reflected XSS into HTML context with all tags blocked except custom
ones](https://portswigger.net/web-security/cross-site-scripting/contexts/lab-html-context-with-all-standard-tags-blocked)
新知识点:自定义标签
假设waf已经对所有标签拦截且只有onfocus事件可以用
官方payload
xss标签是我们自定义的标签
这里无论id还是class始终弹出-2
结论:网页会自动聚焦在url中有#选择元素里tabindex最小的一个元素
知道了原理,触发弹窗有两个条件
    1.url后面跟#选择器
    2.选择器选中的元素有tabindex属性且值最小
提出问题:为什么官方payload直接贴上却不会弹窗?(学会思考才是最重要的)
首先判断是否符合条件2(为什么不先判断条件1,因为条件2比较好测)
最终得到的payload
    search=xss#x
## [Reflected XSS with some SVG markup allowed](https://portswigger.net/web-security/cross-site-scripting/contexts/lab-some-svg-markup-allowed)