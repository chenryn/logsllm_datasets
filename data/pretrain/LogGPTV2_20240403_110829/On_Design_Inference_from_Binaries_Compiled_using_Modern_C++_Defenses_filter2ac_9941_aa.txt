title:On Design Inference from Binaries Compiled using Modern C++ Defenses
author:Rukayat Ayomide Erinfolami and
Anh Quach and
Aravind Prakash
On Design Inference from Binaries Compiled using Modern C++ Defenses
Rukayat Ayomide Erinfolami
Binghamton University
Anh Quach
Binghamton University
Aravind Prakash
Binghamton University
{rerinfo1,aquach1,aprakash}@binghamton.edu
Abstract
Due to the use of code pointers, polymorphism in C++ has
been targeted by attackers and defenders alike. Vulnerable pro-
grams that violate the runtime object type integrity have been
successfully exploited. Particularly, virtual dispatch mecha-
nism and type confusion during casting have been targeted.
As a consequence, multiple defenses have been proposed
in recent years to defend against attacks that target poly-
morphism. Particularly, compiler-based defenses incorpo-
rate design information—speciﬁcally class-hierarchy-related
information—into the binary, and enforce runtime security
policies to assert type integrity.
In this paper, we perform a systematic evaluation of the
side-effects and unintended consequences of compiler-based
security. Speciﬁcally, we show that application of modern
defenses makes reverse engineering and semantic recovery
easy. In particular, we show that modern defenses “leak" class
hierarchy information, i.e., design information, thereby deter
adoption in closed-source software. We consider a compre-
hensive set of 10 modern C++ defenses and show that 9 out
of the 10 at least partially reveal design information as an
unintended consequence of the defense. We argue a necessity
for design-leakage-sensitive defenses that are preferable for
closed-source use.
1
Introduction
The beneﬁts of C++ as an object-oriented language have
prompted its wide use in commercial software. As a con-
sequence, the under-the-hood mechanisms of the language
implementation (e.g., virtual dispatch) have come under strict
scrutiny from both the attackers and defenders. Particularly,
practical attacks against C++ software that target control-ﬂow
hijacking through virtual dispatch [25, 26], and type confu-
sion through static and dynamic casts [12, 17] have become
commonplace. As such, in the last few years, the defense
community has focused on defending against such attacks.
Defenses both at source-code [4, 15, 16, 27] and binary lev-
els [6, 20] have been proposed. Compiler-based defenses that
rely on source code utilize rich high-level class inheritance
information available in the source code and construct strict
integrity (control-ﬂow integrity in the case of virtual dispatch
and type integrity in the case of type confusion attacks) poli-
cies.
On the one hand, with access to source code, compiler-
based defenses are precise and well-performing when com-
pared to binary defenses, and so, recent research in protection
of C++ software has primarily leaned towards compiler-based
defenses [4, 15, 16, 27]. On the other hand, the unintended
consequences (side effects) of such defenses have been over-
looked, receiving little to no attention. In this paper, we sys-
tematically analyze 10 C++ compiler-based defenses to ex-
amine their effect on binary reverse engineering. Our results
show that 9 out of 10 defenses reveal sensitive class hierarchy
information as an unintended consequence. From a software
design standpoint, designing class hierarchy is pivotal to a
software’s success, and is therefore highly valuable.
From a security perspective, both control-ﬂow-hijacking
and type-confusion attacks originate from abuse of inheri-
tance and polymorphism in C++. In essence, inheritance and
polymorphism in C++ are deﬁned through the classes and
their relationship, i.e., the class inheritance tree. As a common
characteristic, compiler-based defenses analyze the source
code and extract the inheritance tree, and augment sufﬁcient
information into the binary that allows for runtime validation
of—at least a subset of—the inheritance tree. Such defenses
have been successful in thwarting virtual-dispatch and type
confusion attacks with high precision and good performance,
and have been welcomed by the community (e.g., [17]).
From a software development perspective, it is crucial to
prevent reverse engineering, and challenges in binary analysis
that prevent accurate reverse engineering are welcome [18].
Designing classes and their hierarchy is in the heart of C++
design. Software vendors—especially for complex software,
invest huge resources in design, and take stringent measures
to protect their code from plagiarism and reverse engineering.
In fact, commercial software commonly use obfusca-
tion [18] to prevent reverse engineering. In particular, com-
USENIX Association        22nd International Symposium on Research in Attacks, Intrusions and Defenses 17the technical details of the remaining 6 defenses, we believe
that class hierarchy information can be successfully recov-
ered from embedded metadata of 9 out of 10 defenses. In each
case, by modeling classes as nodes and inheritance relation-
ships as edges, we were able to recover 95% of classes with
edge-correctness of over 80%, and low inheritance graph edit
distance. In spite of precise security, leaking of design infor-
mation is counter to the interests of closed-source community.
At the very least, closed-source developers must endure real
non-negligible risk with respect to design revelation in using
modern C++ defenses. Precise and well performing defenses
against control-ﬂow-hijacking and type-confusion attacks in
closed-source C++ software are needed.
Our contributions can be summarized as follows:
1. We consider a comprehensive set of 10 modern C++
defenses, and show that 9 of them at least partially reveal
design (class hierarchy tree) information as shown in
Table 1. We provide systematic inference strategies for
such defenses.
2. We recover directed class inheritance graph for popular
open-source programs and show that the recovery is of
high ﬁdelity, i.e., 95% polymorphic classes recovered
with over 80% edge correctness.
3. Although we primarily target polymorphic classes,
we show that both polymorphic and non-polymorphic
classes can be successfully recovered from binaries com-
piled using 2 out of 10 defenses.
The remainder of the paper is organized as follows. Sec-
tion 2 provides the technical background followed by an
overview of our approach in Section 3. We present the details
of our design inference approach in Section 4 followed by
evaluation in Section 5. Finally we present the related work,
conclusion and acknowledgement in Sections 6, Section 7
and Section 8 respectively.
2 Background
2.1 C++ Polymorphism—Under the Hood
Virtual functions are at the heart of polymorphism. In order to
implement polymorphism, C++ compilers utilize a per-class
supplementary data structure called a “VTable" that contains
a list of polymorphic (virtual) functions an object may invoke.
The structure of a VTable is dictated by the C++ Application
Binary Interfaces (ABIs) – Itanium [3] and MSVC [22]. For
the rest of this paper, we refer to the Itanium ABI although the
differences between the two ABIs are insigniﬁcant to our in-
ference approach. A VTable is allocated for each polymorphic
class (i.e., a class that contains virtual functions, or inherits
from class(es) that contain virtual function, or inherits a class
virtually). Within the constructor of a polymorphic class, a
Figure 1: Vulnerabilities vs Manufacturer in the last 5 years.
Source: cvedetails.com.
mercial C++ software often incorporates compile-time ﬂag
(-fno-rtti) to disable inclusion of inheritance-revealing run-
time type information (RTTI) in the binary. RTTI includes
special type-revealing data structures in the binary that al-
lows for runtime class type resolution. In addition RTTI is
known to impose undesirable runtime performance penal-
ties [17]. Without RTTI, reverse engineering C++ binaries to
recover design is considered hard and impractical for com-
plex software [20]. This is partly due to the complexities in
C++ language along with compiler optimizations that result
in challenges for static and dynamic C++ program analy-
sis. For example, intricacies arising due to dynamic dispatch
of virtual functions necessitate use of indirect branches in
the binary. Indirect branches pose dead-ends with respect to
static analysis [28], and dynamic analysis is known to lack
coverage. These challenges are a blessing-in-disguise to the
closed-source vendor community.
Although modern compiler-based defenses render C++ soft-
ware attack resilient, by very virtue of augmenting a binary
with inheritance information, they reveal a signiﬁcant aspect
of design which vendors do not necessarily want to make pub-
lic. Furthermore, Figure 1 shows that vulnerabilities reported
in the last 5 years for closed-source software vastly outnumber
the vulnerabilities reported in open-source products. There-
fore, practical and impactful defenses must not only target the
open-source community, but also address the concerns of the
closed-source community in order to encourage adoption.
Intuitively, the addition of class inheritance information
into the binary should aid in reverse engineering and design
inference against modern C++ defenses, but so far, there has
not been a systematic evaluation of an such effort. In this pa-
per, we present practical design inference approaches against
modern compiler-based C++ defenses. We show that a signiﬁ-
cant amount of class hierarchy information can be recovered
from binaries protected by modern defenses with high ﬁdelity.
We considered a comprehensive list of 10 modern defenses,
and based on source code availability, we evaluated 4 repre-
sentative defenses. Based on our experimental ﬁndings and
18          22nd International Symposium on Research in Attacks, Intrusions and DefensesUSENIX AssociationInference depends on callsite?
Provides direction info? CHT Recovery
Table 1: Recoverability of Class Hierarchy Tree (CHT) from binaries compiled using various defenses. “Inference depends on
callsite" means that design inference on that defense depends on callsite information, “Provides direction info" means that the
class hierarchy metadata embedded by defense also includes direction of inheritance, “CHT Recovery" means how much of the
embedded class hierarchy tree can be recovered"
Scheme
SafeDispatch [15]
FCFI [27]
Shrinkwrap [11]
OVT [4]
VIP [7]
VTrust [29]
CaVer [17]
TypeSan [12]
HexType [16]
CFIXX [19]
Category
Polymorphic classes-aware
Polymorphic classes-aware
Polymorphic classes-aware
Polymorphic classes-aware
Polymorphic classes-aware
Polymorphic classes-aware
All classes-aware
All classes-aware
All classes-aware
Polymorphic classes-aware
Full
Full
Full
Full
Full
Partial
Full
Full
Full
Low




















ﬁxed predeﬁned offset. While the offset is known at compile-
time, the concrete virtual function is resolved at runtime. At
a virtual function dispatch site (as shown in Figure 2), the
compiler embeds code to access the VTable from the object,
offsets into the VTable and retrieves the appropriate virtual
function, and ﬁnally invokes the virtual function. Because
the virtual functions are resolved at runtime, an indirect call
instruction is used to accomplish the dynamic dispatch.
2.2 Attacks Against C++
The mechanisms surrounding virtual function dispatch, partic-
ularly storage and retrieval of virtual function pointers, have
been targets of exploits. Based on the nature of vulnerability
and the exploitation, we classify attacks into two categories.
Figure 2: Virtual dispatch mechanism in C++.
2.2.1 VTable Hijacking
pointer to the VTable – called “virtual table pointer" or vptr
– is stored as an implicit member in object instance. In case
of multiple inheritance, wherein a class derives from more
than one polymorphic base class, the VTable for derived class
comprises of a group of two or more VTables. The group com-
prising of the primary and secondary VTables is collectively
called the complete-object VTable for the derived class. The
complete-object VTable for an object is a comprehensive rep-
resentation of polymorphic capabilities of an object. For more
information on the structure of a VTable, we refer readers to
the Itanium ABI [3].
Each virtual function and its polymorphic variants (i.e.,
functions that override the virtual function) are stored at a
In this case, an attacker corrupts the object (or creates fake
objects) such that the VTable pointer points to an illegiti-
mate location. An example of virtual dispatch along with the
sample object and the VTable layout is provided in Figure 2.
The code and the VTables are usually protected by allocating
them in non-writable sections. However, the objects them-
selves are located in writable region (heap, stack or the data
region). Typically, the attacker exploits a memory corruption
vulnerability to overwrite the VTable pointer within the ob-
ject. Such a pointer could either point to an attacker-injected
VTable (VTable injection), or an offset in an existing legiti-
mate VTable. In both cases, virtual function pointer resolution
at the virtual dispatch callsite results in a corrupted pointer.
Invocation of corrupted pointer leads to arbitrary code execu-
tion.
//Read-only CodeCallsite (A *obj):  vptr = *(obj)  vfnptr = *(vptr + offset)  call vfnptr //Indirect call&Vtable(A)varA...varN&vfn1&vfn2&vfn3...Vtable(A) (read-only data)obj (read+write data)//Read-only CodeCallsite (A *obj):  vptr = *(obj)  vfnptr = *(vptr + offset)  call vfnptr //Indirect call&Vtable(A)varA...varN&vfn1&vfn2&vfn3...Vtable(A) (read-only data)obj (read+write data)USENIX Association        22nd International Symposium on Research in Attacks, Intrusions and Defenses 192.2.2 Unsafe Casting
2.3.2 Defenses Against Unsafe Casting
In this case, the attacker takes advantage of unsafe and in-
consistent casting operations in code. C++ supports multi-
ple types of casting operations—static_cast, reinterpret_cast,
const_cast and dynamic_cast. Particularly, when an object
allocated to a base class is casted to a derived class, it results
in invalid downcasting. Virtual function calls using such a
downcasted derived class pointer can lead to arbitrary code
execution when the virtual function offset is larger than the
size of the base class VTable.
2.3 Compiler-Based C++ Defenses
2.3.1 Defenses Against VTable Abuse
Defenses in this category, except CFIXX, harness the result
of class hierarchy analysis (CHA) to defend against VTable
abuse. They restrict the functions or vptrs allowed at a callsite
to those in the speciﬁc hierarchy of the callsite’s static type.
While FCFI [27] builds the result of CHA into a table specify-
ing valid vptrs for any given callsite, SafeDispatch [15] builds
for both valid vptrs and valid functions. Shrinkwrap [11]
modiﬁes FCFI by removing redundant vptr entries in the
metadata table, thereby providing stricter defense. This meta-
data is embedded into the binary to be looked up at runtime.
OVT/IVT [4] attempts to reduce the overhead of vptr valida-
tion at runtime by reordering VTables in preorder traversal
such that VTables within the same hierarchy are laid out con-
tiguously. A range can therefore be assigned to specify the
valid VTables in a given hierarchy. The range assigned to a
type tells the set of its subclasses. OVT adds paddings in be-
tween VTables so that vptr validation can be done in a simple
range check. IVT eliminates these paddings by interleaving
VTable entries. More details about the speciﬁc metadata em-
bedded by these defenses is presented in Section 4.2.
At compile time, VTrust [29] generates hash values to tag
functions that are legitimate for each callsite, basically func-
tions deﬁned by classes in the same hierarchy. Hash values are
computed using function name, argument type list, qualiﬁers
and most base class which deﬁned each function. At runtime,
the hash value at the caller callsite is compared with that at
the beginning of the callee. All polymorphic functions have
the same hash values. VIP [7] supplements pointer analysis
with CHA to provide a more precise set of valid vptrs. Pointer
analysis makes it possible to identify types that are likely
to be used at a given callsite during execution. This infor-
mation helps to further restrict the set obtained from CHA.
CFIXX [19] enforces Object Type Integrity (OTI) which dy-
namically tracks object type and enforces its integrity against
arbitrary writes. OTI protects key application control ﬂow
data from being corrupted. CFIXX keeps track of the only
valid object at a callsite at runtime, it does not embed metadata
of class hierarchy.
CaVer [17] uses a runtime type tracing mechanism called type
hierarchy table (THTable) to dynamically verify type cast-
ing operations for polymorphic and non polymorphic classes.
Given a pointer to an object allocated as type T, the THTable
stores the set of all possible types to which T can be casted (i.e.
its base classes) including its phantom classes. TypeSan [12]
improves CaVer by providing lower runtime overhead and
higher detection coverage. It uses two data structures: type
layout table and type relation tables which serve the same
purpose as CaVer’s THTable but useful for optimizing type
checks. These data structures also specify the base classes of
the representing class.
HexType is an improvement over TypeSan and CaVer. It
provides two folds of improvement, 1) higher coverage of
typecasting operations and 2) lower performance overhead.
The ﬁrst is achieved by considering more instances of object
creation which include the use of new operator, placement
new, and when an already constructed object is hard-coded.
The second is achieved by improving the method of object
tracing. HexType and CaVer use the same data structures.
3 Overview
Design Inference. In this work, we propose systematic ap-
proaches to infer design information, speciﬁcally class inheri-
tance tree from a protected C++ binary.
3.1 Compiler Defense Categories
We apply our design inference approach to a diverse and com-
prehensive set of C++ defenses against control-ﬂow-hijacking
and type-confusion attacks. In fact, all compiler-based de-
fenses that result in binaries adhering to the ABI are suscepti-
ble to design inference.
Based on how design information is embedded in the bi-
nary, we group solutions into two categories.
C1: Explicit Design Information Inclusion: Solutions in
this category explicitly embed design information into a given
binary. Validating an object’s type (e.g., object used at a given
callsite) simply requires searching the information stored in
the binary. In order to reverse such binaries, we extract the
embedded information (typically in read-only data sections)
and process them to extract class hierarchy information. FCFI
[27], ShrinkWrap [11], SafeDispatch [15], Caver [17] and
TypeSan [12] are examples of defenses in this category.
C2: Implicit Design Information Inclusion: These solu-
tions transform the original design information into forms
that makes veriﬁcation faster or reduce the amount of work
required to provide protection. For example, OVT [4] encodes
class hierarchy information by choreographed ordering of ex-
isting VTables thereby eliminating the need to embed class
20          22nd International Symposium on Research in Attacks, Intrusions and DefensesUSENIX Associationhierarchy information in a separate section. Similarly, VIP [7]
and VTrust [29] are examples of defenses in this category.
3.4 Key Challenges
3.2 Scope and Assumptions
Our design recovery approaches are applicable to all known
source-code based C++ defenses against attacks that abuse
polymorphism-related mechanisms in C++.