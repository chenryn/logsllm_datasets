2、该组成员也是高权限组的成员或者具备“有趣的”用户属性
3、高权限组成员
组为我们提供了有趣的机会。我们可以在诱饵组中包含诱饵用户，创建“层次化”诱饵。通过这种方法，我们可以记录下攻击者对诱饵组成员的枚举以及诱饵用户的枚举操作。接下来我们可以看到如何使用登录（Logon）限制来避免对用户权限的错误使用。
在如下命令中，我们创建了一个诱饵用户`dnsmanager`，其密码永不过期，当读取隐藏属性时会记录相关日志。我们也创建了名为`Forest
Admins`的一个组，`dnsmanager`用户为该组成员，将`Forest
Admins`组加入内置的`dnsadmins`组中。当该组的成员被读取时就会触发日志记录。我们可以使用`Deploy-GroupDeception`来完成这个任务：
    PS C:\> Create-DecoyUser -UserFirstName dns -UserLastName manager -Password Pass@123 | Deploy-UserDeception -UserFlag PasswordNeverExpires -GUID d07da11f-8a3d-42b6-b0aa-76c962be719a -Verbose 
    PS C:\> Create-DecoyGroup -GroupName 'Forest Admins' -Verbose | Deploy-GroupDeception -AddMembers dnsmanager -AddToGroup dnsadmins -GUID bc0ac240-79a9-11d0-9020-00c04fc2d4cf -Verbose
###  枚举特权用户对象诱饵及横向渗透
我们也可以部署高权限用户诱饵来针对枚举及横向渗透行为。我们可以创建具备高权限的一个诱饵用户，比如属于与管理员组，可以执行DCSync等等。
使用高权限的的诱饵用户有些风险，如果这类用户被攻击者突破，那么其权限可能被滥用。为了避免出现这种情况，我们可以使用几种保护措施：
1、将其`Logon Workstation`属性设置为不存在的一台主机；
2、拒绝该用户登录。
在以上两种情况下，由于诱饵用户不能使用任何类型的凭据（如密码、哈希等）来登录，因此攻击者无法使用该用户的权限。
了解这些知识后，现在我们可以使用`Deploy-PrivilegedUserDeception`来创建高权限诱饵用户：
    PS C:\> Create-DecoyUser  -UserFirstName dec -UserLastName da -Password Pass@123 | Deploy-PrivilegedUserDeception -Technique DomainAdminsMemebership -Protection DenyLogon -Right ReadControl -Verbose
如上命令创建了名为`decda`的用户，该用户属于`Domain
Admins`组，但无法登录到任何主机。一旦有人尝试列出用户的DACL或者列出所有属性，就会生成4662事件。
在横向渗透方面，我们使用了`DenyLogon`防护方案。这意味着即便用户的密码或哈希或者密钥被攻击者获取，他们还是无法复用这些凭据。为了在该用户的凭据被使用时获得有意义的日志，我们需要启用如下组策略：
    Configuration|Windows Settings|Security Settings|Advanced Audit Policy Configuration|Audit Policies|Account Logon | Audit Kerberos Authentication Service | Failure
登录失败的界面如下图所示：
并且域控上会记录下4768错误事件。如果是类似OverPass-The-Hash之类的攻击行为，就不会生成如此详细的错误。
另一个选项是将`LogonWorkstation`设置为不存在的一台主机。我们可以采用与实际主机名类似的一个名字。
    PS C:\> Create-DecoyUser  -UserFirstName dec -UserLastName da -Password Pass@123 | Deploy-PrivilegedUserDeception-Technique DCSyncRights -Protection LogonWorkStation revert-webserver1 -Right ReadControl -Verbose
如上命令会创建名为`decda`的一个诱饵用户，该用户具备DCSync权限，其`LogonWorkStation`设置为不存咋的某台主机。如果攻击者获取并复用了用户凭据，就会出现与`DenyLogon`类似的错误并生成4768事件。
我们也可以对非域管账户使用这两种保护措施。从我的观点来看，在内存中留下错误的密码或者哈希可能更好（这是大家已知的一种技术）。
这种技术可以与其他技术相结合。比如，当我们的目标是横向渗透行为时，更简单的一种方法就是在`Deploy-UserDeception`中使用`-PasswordInDescription`选项，让攻击者能够“获取”诱饵用户的凭据。然后，我们可以让该用户成为特权用户，使用前面讨论的几种保护措施：
    PS C:\> Create-DecoyUser  -UserFirstName new -UserLastName da -Password Pass@123 | Deploy-UserDeception -PasswordInDescription 'The new password is Pass@123' -Verbose
    PS C:\> Deploy-PrivilegedUserDeception -DecoySamAccountName newda -Technique DomainAdminsMemebership -Protection DenyLogon -Right ReadControl -Verbose
如上第一条命令会创建名为`newda`的用户，其描述为`The new password is
Pass[@123](https://github.com/123
"@123")`字符串。第二条命令会让`newda`用户成为域管组的一员，拒绝该用户登录，并且一旦`newda`用户的DACL或者所有属性被读取就会触发告警。
攻击者无需使用特殊工具就可以从描述信息中获得密码！这也是攻击者倾向于摘取“触手可及的果实”的一种表现。
在讨论具备权限的用户时，还有另一个方面我们要关注，即ACL方面的内容。如果某个用户具备操控其他用户的有趣权限，那么攻击者肯定会对这类用户感兴趣（备注：我们要确保对ACL的审核也是安全方法的一部分内容，不管是[域对象](https://github.com/samratashok/nishang/blob/master/ActiveDirectory/Set-DCShadowPermissions.ps1)还是[其他](https://github.com/samratashok/nishang/blob/master/Backdoors/Set-RemotePSRemoting.ps1)[安全性](https://github.com/samratashok/nishang/blob/master/Backdoors/Set-RemoteWMI.ps1)）。
我们可以使用`Deploy-SlaveDeception`来部署一些诱饵用户，其中某个用户具备其他用户的`FullControl`/`GenericAll`权限。攻击者会对此感兴趣，我们可以利用该环境来捕获枚举操作以及横向渗透行为。
为了捕获枚举操作，我们可以使用如下命令：
    PS C:\> Create-DecoyUser -UserFirstName master -UserLastName user -Password Pass@123 | Deploy-UserDeception -GUID d07da11f-8a3d-42b6-b0aa-76c962be719a -Verbose
    PS C:\> Create-DecoyUser -UserFirstName slave -UserLastName user -Password Pass@123 | Deploy-UserDeception -GUID d07da11f-8a3d-42b6-b0aa-76c962be719a -Verbose
    PS C:\> Deploy-SlaveDeception -SlaveSamAccountName slaveuser -DecoySamAccountName masteruser -Verbose
上面第一条以及第二条命令会分别创建`masteruser`以及`slaveuser`用户，仅在读取某个属性时会触发审计规则。第三条命令会为`masteruser`提供`slaveuser`的`GenericAll`权限。一旦攻击者枚举或者扫描域中这两个用户的ACL时就会触发4662事件。
在横向渗透方面，我们可以为`masteruser`使用`PasswordInDescription`选项，或者使用其他常用的方法让攻击者容易获取该用户凭据。我们已经准备好让攻击者获取和使用`masteruser`的凭据（在此之前请仔细考虑风险）。如果`masteruser`修改`slaveuser`的DACL，除了用户或令牌被使用的警告以外，我们还会得到4662事件：
    PS C:\> Create-DecoyUser -UserFirstName slave -UserLastName user -Password Pass@123
    PS C:\> Deploy-SlaveDeception -SlaveSamAccountName slaveuser -DecoySamAccountName masteruser -Verbose
    PS C:\> Deploy-UserDeception -DecoySamAccountName slaveuser -Principal masteruser -Right WriteDacl -Verbose
在如上命令中，一旦`masteruser`修改`slaveuser`的DACL，就会生成4662事件。
###  枚举域及森林信任对象
这部分内容尚未实现自动化，但依然有很多有趣的可能性。比如，我们可以构造一个信任森林（forest）诱饵（这里我们称之为蓝色森林），其中我们允许对用户、计算机以及组的枚举，但拒绝对其他资源的访问。我们可以使用选择性认证来设置森林信任关系，其中在DC上设置了`Allowed
to Authenticate`选项，其他主机上未设置该选项。这样攻击者就可以枚举对象，但无法访问其他计算机上的资源。
## 七、红队的复仇
###  识别欺骗环境
那么红队如何识别那些对象是真实的，哪些对象是陷阱或者诱饵？我们在文章开头提到过，我在过去几个月内测试了多种欺骗方案。有许多企业解决方案所使用的对象可以通过对象的属性进行识别，其中部分属性包括：
1、`objectSID`：该对象必须具有`DomainSID-RID`格式。某些企业解决方案并没有满足该格式。如果我们发现某个对象的SID并不包含域SID，那么请仔细调查该对象。
2、`lastLogon`、`lastlogontimestamp`：我们可以查看这些属性来识别诱饵用户。如果某个高权限用户从来没登录过（`lastLogon`的值为`31/12/1600`，这比`LargeInter`日期的最早时间还要早），那么很有可能这是一个诱饵用户。
3、`logonCount`：虽然不如`lastLogon`好使，`logonCount`还是一个不错的指标。
4、`whenCreated`：与`lastLogon`及`logonCount`结合起来就会成为一个很好的指标。如果某个用户创建时间非常早，但从来没登录过，那很有可能是个诱饵。我们可能会注意到该用户可能是一个休眠用户，因此请务必查看其他属性。
5、`badPwdCount`、`badPasswordTime`：大家应该都输错过密码。如果某个用户从来没输错过密码（`Badpwdcount`值为0，或者其他字段值异常），那么这也是很好的一个指标。
6、过多的属性：某些企业解决方案会为某个对象填满所有属性，或者填充过多属性。我们很容易发现这一点。
最好的方法是将某个对象将已知的某个“良民”对象进行匹配。比如，如果我们怀疑所有计算机列表中的某个计算机对象是一个诱饵，那么可以将其与域控制器或者我们当前所使用的节点进行比较。实际的DC始终位于`logonserver`环境变量中。对于用户对象，内置DA的RID始终为500，我们可以将其属性与我们怀疑的某个用户对象进行对比。
如果某些解决方案不会在域中创建真实的对象，那么我们可以使用WMIC来获取域信息，显示正确的对象，排除伪造的对象。
###  避免被欺骗
红队需要改变他们的方法和虚幻的优越心理，以避免上当受骗：
1、停止摘取“触手可及的果实”。企业网络非常复杂，但如果事情看起来过于简单，那么请保持警惕。
2、避免使用自动化枚举工具，除非我们完全知道这些工具在后台的工作流程。
3、我一直在演讲和培训中强调一点：抑制获取DA权限的冲动，专注于我们的行动目标。
## 八、蓝队应避免被识别
如果使用真实的域对象，那么被识别的概率就会减少。比如，如果某个计算机对象没有映射到某台真实的计算机，那么就有较高的概率被攻击者识别。
对于用户诱饵，前面我们讨论过，这些用户至少应该具有一个登录会话，这样可以减少被识别的几率。下面我们来试一下。
我们来看一下一个简单的例子。大家都知道有个简单识别欺骗环境的脚本：[HoneypotBuster](https://github.com/JavelinNetworks/HoneypotBuster)。现在我们创建一个DA诱饵，运行该脚本：
脚本会检测到我们的DA诱饵用户。`Deploy-PrivilegedUserDeception`中有一个选项`CreateLogon`，这个参数可以使用DA诱饵用户在DC上启动和停止计算器程序，以便填充用户登录相关属性。要使用该参数，我们必须将`LogonWorkstation`属性设置为待操作的DC。后面我们可以随时修改该用户的行为。
    PS C:\> Create-DecoyUser -UserFirstName dec -UserLastName da -Password Pass@123 | Deploy-PrivilegedUserDeception -Technique DomainAdminsMemebership -Protection LogonWorkStation -LogonWorkStation revert-dc -CreateLogon -Verbose
如上命令会创建`decda`用户，使其成为`Domain
Admins`组的一员，限制其登录到DC，创建一个登录会话（这样也会在DC上创建配置文件）。现在，如果我们运行`HoneypotBuster`：
非常好，该工具的`FakeRank`指数已经下降到50。`HoneypotBuster`使用了一个排名系统来评测对象，如果用户的`logonCount`小于6，那么就有可能是一个伪造用户。如果我们使用`decda`的凭据启动某个进程6次，那么其`logonCount`就会变成6，不会出现在该工具的输出结果中。
    PS C:\> Create-DecoyUser -UserFirstName dec -UserLastName da -Password Pass@123 | Deploy-PrivilegedUserDeception -Technique DomainAdminsMemebership -Protection LogonWorkStation -LogonWorkStation revert-dc -CreateLogon -logonCount 6 -Verbose
现在如果我们运行`HoneypotBuster`，就会发现它并没有检测到`decda`。但这种方法针对的是这款特定工具，因此我们不会过多讨论这种“绕过”细节。
## 九、下一步工作
如果你愿意在域环境中部署诱饵并与我分享结果，那将是非常棒的一件事。通过这种方法，即便你无法在代码方面做出贡献，也能极大地帮助该项目。
不久的将来，我会在这款工具中纳入`OU`对象。我也正在研究如何自动化部署域和信任森林诱饵，我雄心勃勃，想使用虚拟化技术来实时部署诱饵森林以及计算机。
主要内容就是这些。感谢大家阅读本文，如果需要可以获取我在BruCON上的[演讲文稿](https://www.slideshare.net/nikhil_mittal/forging-trusts-for-deception-in-active-directory)以及[视频](https://youtu.be/EEceX5x2JY8)。