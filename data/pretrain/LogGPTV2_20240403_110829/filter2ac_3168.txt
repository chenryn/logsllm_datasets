### Title: From Thousands of Hours to a Couple of Minutes: Automating Exploit Generation for Arbitrary Types of Kernel Vulnerabilities

Writing an effective exploit for a vulnerability is typically a challenging, time-consuming, and labor-intensive process. To address this issue, automated exploit generation techniques have been developed. However, existing methods often fall short, especially when it comes to kernel vulnerabilities. This is primarily due to two factors: 

1. **Contextual Limitations**: Current techniques are often limited to exploring exploitability in the context of a crashing process, whereas generating an exploit for a kernel vulnerability requires varying the context of a kernel panic.
2. **Complexity and Scalability**: The program analysis techniques used for exploit generation are generally suitable only for simple programs, not for the highly complex and scalable OS kernel.

In this presentation, we will introduce and release a new exploitation framework designed to fully automate the exploitation of kernel vulnerabilities. Our framework leverages kernel fuzzing to diversify the contexts of a kernel panic and then uses symbolic execution to explore exploitability under different contexts. This approach significantly enhances the ability to craft exploits in several ways:

1. **Automated System Call Identification**: It automates the identification of system calls that security analysts need to exploit vulnerabilities.
2. **Security Mitigation Bypassing**: It provides the capability to bypass security mitigations.
3. **Flexible Exploit Generation**: It allows for the automatic generation of exploits with various objectives, such as privilege escalation or data leakage.
4. **Unconfirmed Exploitability**: It enables the generation of exploits even for kernel vulnerabilities where exploitability has not yet been confirmed or verified.

Along with this talk, we will also release a number of previously unpublished working exploits for several kernel vulnerabilities. Our experiments primarily focused on Use-After-Free and heap overflow vulnerabilities. Notably, more than 50% of the test cases did not have publicly available working exploits. To illustrate this release, I have already disclosed one working exploit on my personal website (http://ww9210.cn/). This exploit pertains to CVE-2017-15649 and demonstrates the bypassing of SMAP, which was not previously available.