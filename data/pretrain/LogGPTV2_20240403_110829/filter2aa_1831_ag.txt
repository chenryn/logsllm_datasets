void rl_tty_set_default_bindings (Keymap kmap)
Read the operating system’s terminal editing characters (as would be displayed by
stty) to their Readline equivalents. The bindings are performed in kmap.
[Function]
void rl_tty_unset_default_bindings (Keymap kmap)
Reset the bindings manipulated by rl_tty_set_default_bindings so that the ter-
minal editing characters are bound to rl_insert. The bindings are performed in
kmap.
[Function]
int rl_reset_terminal (const char *terminal name)
Reinitialize Readline’s idea of the terminal settings using terminal name as the termi-
nal type (e.g., vt100). If terminal name is NULL, the value of the TERM environment
variable is used.
2.4.10 Utility Functions
[Function]
int rl_save_state (struct readline state *sp)
Save a snapshot of Readline’s internal state to sp. The contents of the readline state
structure are documented in ‘readline.h’. The caller is responsible for allocating
the structure.
[Function]
int rl_restore_state (struct readline state *sp)
Restore Readline’s internal state to that stored in sp, which must have been saved by a
call to rl_save_state. The contents of the readline state structure are documented
in ‘readline.h’. The caller is responsible for freeing the structure.
[Function]
void rl_free (void *mem)
Deallocate the memory pointed to by mem. mem must have been allocated by malloc.
[Function]
void rl_replace_line (const char *text, int clear undo)
Replace the contents of rl_line_buffer with text. The point and mark are pre-
served, if possible. If clear undo is non-zero, the undo list associated with the current
line is cleared.
[Function]
void rl_extend_line_buffer (int len)
Ensure that rl_line_buffer has enough space to hold len characters, possibly real-
locating it if necessary.
[Function]
int rl_initialize (void)
Initialize or re-initialize Readline’s internal state. It’s not strictly necessary to call
this; readline() calls it before reading any input.
[Function]
int rl_ding (void)
Ring the terminal bell, obeying the setting of bell-style.
[Function]
int rl_alphabetic (int c)
Return 1 if c is an alphabetic character.
Chapter 2: Programming with GNU Readline
36
[Function]
void rl_display_match_list (char **matches, int len, int max)
A convenience function for displaying a list of strings in columnar format on Read-
line’s output stream. matches is the list of strings, in argv format, such as a list of
completion matches. len is the number of strings in matches, and max is the length of
the longest string in matches. This function uses the setting of print-completions-
horizontally to select how the matches are displayed (see Section 1.3.1 [Readline
Init File Syntax], page 4).
The following are implemented as macros, deﬁned in chardefs.h. Applications should
refrain from using them.
[Function]
int _rl_uppercase_p (int c)
Return 1 if c is an uppercase alphabetic character.
[Function]
int _rl_lowercase_p (int c)
Return 1 if c is a lowercase alphabetic character.
[Function]
int _rl_digit_p (int c)
Return 1 if c is a numeric character.
[Function]
int _rl_to_upper (int c)
If c is a lowercase alphabetic character, return the corresponding uppercase character.
[Function]
int _rl_to_lower (int c)
If c is an uppercase alphabetic character, return the corresponding lowercase charac-
ter.
[Function]
int _rl_digit_value (int c)
If c is a number, return the value it represents.
2.4.11 Miscellaneous Functions
[Function]
int rl_macro_bind (const char *keyseq, const char *macro, Keymap
map)
Bind the key sequence keyseq to invoke the macro macro. The binding is performed in
map. When keyseq is invoked, the macro will be inserted into the line. This function
is deprecated; use rl_generic_bind() instead.
[Function]
void rl_macro_dumper (int readable)
Print the key sequences bound to macros and their values, using the current keymap,
to rl_outstream. If readable is non-zero, the list is formatted in such a way that it
can be made part of an inputrc ﬁle and re-read.
[Function]
int rl_variable_bind (const char *variable, const char *value)
Make the Readline variable variable have value. This behaves as if the readline com-
mand ‘set variable value’ had been executed in an inputrc ﬁle (see Section 1.3.1
[Readline Init File Syntax], page 4).
[Function]
char * rl_variable_value (const char *variable)
Return a string representing the value of the Readline variable variable. For boolean
variables, this string is either ‘on’ or ‘off’.
Chapter 2: Programming with GNU Readline
37
[Function]
void rl_variable_dumper (int readable)
Print the readline variable names and their current values to rl_outstream. If read-
able is non-zero, the list is formatted in such a way that it can be made part of an
inputrc ﬁle and re-read.
[Function]
int rl_set_paren_blink_timeout (int u)
Set the time interval (in microseconds) that Readline waits when showing a balancing
character when blink-matching-paren has been enabled.
[Function]
char * rl_get_termcap (const char *cap)
Retrieve the string value of the termcap capability cap. Readline fetches the termcap
entry for the current terminal name and uses those capabilities to move around the
screen line and perform other terminal-speciﬁc operations, like erasing a line. Readline
does not use all of a terminal’s capabilities, and this function will return values for
only those capabilities Readline uses.
2.4.12 Alternate Interface
An alternate interface is available to plain readline(). Some applications need to interleave
keyboard I/O with ﬁle, device, or window system I/O, typically by using a main loop to
select() on various ﬁle descriptors. To accomodate this need, readline can also be invoked
as a ‘callback’ function from an event loop. There are functions available to make this easy.
[Function]
void rl_callback_handler_install (const char *prompt,
rl vcpfunc t *lhandler)
Set up the terminal for readline I/O and display the initial expanded value of prompt.
Save the value of lhandler to use as a function to call when a complete line of input
has been entered. The function takes the text of the line as an argument.
[Function]
void rl_callback_read_char (void)
Whenever an application determines that keyboard input is available, it should call
rl_callback_read_char(), which will read the next character from the current input
source.
If that character completes the line, rl_callback_read_char will invoke
the lhandler function saved by rl_callback_handler_install to process the line.
Before calling the lhandler function, the terminal settings are reset to the values they
had before calling rl_callback_handler_install. If the lhandler function returns,
the terminal settings are modiﬁed for Readline’s use again. EOF is indicated by calling
lhandler with a NULL line.
[Function]
void rl_callback_handler_remove (void)
Restore the terminal to its initial state and remove the line handler. This may be
called from within a callback as well as independently. If the lhandler installed by
rl_callback_handler_install does not exit the program, either this function or
the function referred to by the value of rl_deprep_term_function should be called
before the program exits to reset the terminal settings.
2.4.13 A Readline Example
Here is a function which changes lowercase characters to their uppercase equivalents, and
uppercase characters to lowercase. If this function was bound to ‘M-c’, then typing ‘M-c’
Chapter 2: Programming with GNU Readline
38
would change the case of the character under point. Typing ‘M-1 0 M-c’ would change the
case of the following 10 characters, leaving the cursor on the last character changed.
/* Invert the case of the COUNT following characters. */
int
invert_case_line (count, key)
int count, key;
{
register int start, end, i;
start = rl_point;
if (rl_point >= rl_end)
return (0);
if (count  rl_end)
end = rl_end;
else if (end  end)
{
int temp = start;
start = end;
end = temp;
}
/* Tell readline that we are modifying the line,
so it will save the undo information. */
rl_modifying (start, end);
for (i = start; i != end; i++)
Chapter 2: Programming with GNU Readline
39
{
if (_rl_uppercase_p (rl_line_buffer[i]))
rl_line_buffer[i] = _rl_to_lower (rl_line_buffer[i]);
else if (_rl_lowercase_p (rl_line_buffer[i]))
rl_line_buffer[i] = _rl_to_upper (rl_line_buffer[i]);
}
/* Move point to on top of the last character changed. */
rl_point = (direction == 1) ? end - 1 : start;
return (0);
}
2.5 Readline Signal Handling
Signals are asynchronous events sent to a process by the Unix kernel, sometimes on behalf
of another process. They are intended to indicate exceptional events, like a user pressing
the interrupt key on his terminal, or a network connection being broken. There is a class
of signals that can be sent to the process currently reading input from the keyboard. Since
Readline changes the terminal attributes when it is called, it needs to perform special
processing when such a signal is received in order to restore the terminal to a sane state, or
provide application writers with functions to do so manually.
Readline contains an internal signal handler that is installed for a number of signals
(SIGINT, SIGQUIT, SIGTERM, SIGALRM, SIGTSTP, SIGTTIN, and SIGTTOU).
When one of
these signals is received, the signal handler will reset the terminal attributes to those that
were in eﬀect before readline() was called, reset the signal handling to what it was before
readline() was called, and resend the signal to the calling application.
If and when
the calling application’s signal handler returns, Readline will reinitialize the terminal and
continue to accept input. When a SIGINT is received, the Readline signal handler performs
some additional work, which will cause any partially-entered line to be aborted (see the
description of rl_free_line_state() below).
There is an additional Readline signal handler, for SIGWINCH, which the kernel sends to a
process whenever the terminal’s size changes (for example, if a user resizes an xterm). The
Readline SIGWINCH handler updates Readline’s internal screen size information, and then
calls any SIGWINCH signal handler the calling application has installed. Readline calls the
application’s SIGWINCH signal handler without resetting the terminal to its original state.
If the application’s signal handler does more than update its idea of the terminal size and
return (for example, a longjmp back to a main processing loop), it must call rl_cleanup_
after_signal() (described below), to restore the terminal state.
Readline provides two variables that allow application writers to control whether or not
it will catch certain signals and act on them when they are received. It is important that
applications change the values of these variables only when calling readline(), not in a
signal handler, so Readline’s internal signal state is not corrupted.
[Variable]
int rl_catch_signals
If this variable is non-zero, Readline will install signal handlers for SIGINT, SIGQUIT,
SIGTERM, SIGALRM, SIGTSTP, SIGTTIN, and SIGTTOU.
The default value of rl_catch_signals is 1.
Chapter 2: Programming with GNU Readline
40
[Variable]
int rl_catch_sigwinch
If this variable is non-zero, Readline will install a signal handler for SIGWINCH.
The default value of rl_catch_sigwinch is 1.
If an application does not wish to have Readline catch any signals, or to handle signals
other than those Readline catches (SIGHUP, for example), Readline provides convenience
functions to do the necessary terminal and internal state cleanup upon receipt of a signal.
[Function]
void rl_cleanup_after_signal (void)
This function will reset the state of the terminal to what it was before readline()
was called, and remove the Readline signal handlers for all signals, depending on the
values of rl_catch_signals and rl_catch_sigwinch.
[Function]
void rl_free_line_state (void)
This will free any partial state associated with the current input line (undo infor-
mation, any partial history entry, any partially-entered keyboard macro, and any
partially-entered numeric argument).
This should be called before rl_cleanup_
after_signal().
The Readline signal handler for SIGINT calls this to abort the
current input line.
[Function]
void rl_reset_after_signal (void)
This will reinitialize the terminal and reinstall any Readline signal handlers, depend-
ing on the values of rl_catch_signals and rl_catch_sigwinch.
If an application does not wish Readline to catch SIGWINCH, it may call rl_resize_
terminal() or rl_set_screen_size() to force Readline to update its idea of the terminal
size when a SIGWINCH is received.
[Function]
void rl_echo_signal_char (int sig)
If an application wishes to install its own signal handlers, but still have readline
display characters that generate signals, calling this function with sig set to SIGINT,
SIGQUIT, or SIGTSTP will display the character generating that signal.
[Function]
void rl_resize_terminal (void)
Update Readline’s internal screen size by reading values from the kernel.
[Function]
void rl_set_screen_size (int rows, int cols)
Set Readline’s idea of the terminal size to rows rows and cols columns. If either rows
or columns is less than or equal to 0, Readline’s idea of that terminal dimension is
unchanged.
If an application does not want to install a SIGWINCH handler, but is still interested in
the screen dimensions, Readline’s idea of the screen size may be queried.
[Function]
void rl_get_screen_size (int *rows, int *cols)
Return Readline’s idea of the terminal’s size in the variables pointed to by the argu-
ments.
[Function]
void rl_reset_screen_size (void)
Cause Readline to reobtain the screen size and recalculate its dimensions.
Chapter 2: Programming with GNU Readline
41
The following functions install and remove Readline’s signal handlers.
[Function]