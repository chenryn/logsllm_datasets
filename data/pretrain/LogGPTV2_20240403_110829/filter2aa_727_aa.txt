TABBY:
Java Code Review like a pro
TABBY:
Java Code Review like a pro
王柏柱（wh1t3p1g）
CONTENTS
目录
1
2
3
Background
Find Java Web Vulnerabilities like a pro
Find Java Gadget like a pro
4
Find Java RPC Framework Vulnerabilities like a pro
Background
01
依靠专家经验人工审计
辅以正则匹配工具
标志性工具：
Seay代码审计工具[1]
过程内分析
AST流分析/token流分析/
简单数据流分析
标志性工具：
rips[2]，cobra[3]
初期半自动化阶段
过程间分析
跨函数的污点数据流分
析。
标志性工具：
GadgetInspector[4]、
fortify[5]
代码数据化
依靠程序分析，生成代码
属性图。
标志性工具：CodeQL[6]
人工审计阶段
代码数据化阶段
后期半自动化阶段
代码审计发展回顾
[1] https://github.com/f1tz/cnseay
[2] https://github.com/ripsscanner/rips
[3] https://github.com/FeeiCN/Cobra
[4] https://github.com/JackOfMostTrades/gadgetinspector
[5] https://www.microfocus.com/en-us/cyberres/application-security/static-code-analyzer
[6] https://github.com/github/codeql
痛点：
1.
分析成本高，中间的分析结果不可重用
2.
可定制化能力差
痛点：
1.
漏报率高，审计不全面；
2.
工具输出结果繁多，误报率高
现阶段最优解
为什么要有tabby？
面向的场景：
CodeQL面向的是甲方场景，可以直接更根据源码进行分析
Tabby面向的是安全研究人员，可以对编译后的项目进行分析
支持的漏洞类型：
CodeQL很难支持Java反序列化利用链的挖掘
Tabby可以对项目、三方组件、jdk组件进行利用链的挖掘
定位：Java安全研究人员代码审计的“辅助”工
具
1. 定位图空间中的对象、函数
2. 聚焦可能存在问题的漏洞链路
3. 枚举类似路径的漏洞
时间：
Tabby方案实现时间在2020年左右，CodeQL当时只提供了线上体验，
又没有好用的同类工具，那就自己造个轮子！
tabby 构架
⽬标提取器
Target Extractor
语义提取器
Semantic Extractor
污点分析引擎
Taint Analysis Engine
代码属性图构建器
CPG Constructor
War、Jar、Jsp、Class
内存数据
1.
类空间
2.
函数空间
3.
污点分析中间数据
面向Java语言的代码属性图
贯
穿
构
建
流
程
目标提取器 Target Extractor
目标提取器
针对不同情况的目标文件，完整抽取所
有待分析的对象：
1. Jsp文件采用tomcat-jasper动态编译
2. War文件采用解压缩的方式抽取
3. fatJar文件采用解压缩方式抽取
另外，jdk依赖可额外添加到分析目标中
语义提取器 Semantic Extractor
语义提取器
在进行语义分析前，语义提取器将待分析
目标的语义信息抽取成语义空间：
1. 类空间：包含全量对象语义节点
2. 函数空间：包含全量函数语义节点
至此，我们获得了包含全量节点的语义空
间，但每个节点之间仍是孤立状态
代码属性图构建器 CPG Constructor
代码属性图构建器
代码属性图构建器主要用于连接语
义空间中各个孤立的节点，将其转
化为一张具备分析能力的语义图。
面向Java语言的代码属性图共包含：
1. 类关系图 ORG
2. 函数别名图 MAG
3. 函数调用图 MCG
4. 精确的函数调用图 PCG （可选）
存在实体节点：
1. Class 节点
2. Method 节点
存在5种实体边：
1. Has边
2. Interface边
3. Extends边
4. Alias边
5. Call边
[1] Martin M, Livshits B, Lam M S. Finding application errors and security flaws using PQL: a program query language[J]. Acm Sigplan Notices, 2005, 40(10): 365-383.
[2] Yamaguchi F, Golde N, Arp D, et al. Modeling and discovering vulnerabilities with code property graphs[C]//2014 IEEE Symposium on Security and Privacy. IEEE, 2014: 590-604.
[3] Backes M, Rieck K, Skoruppa M, et al. Efficient and flexible discovery of php application vulnerabilities[C]//2017 IEEE european symposium on security and privacy (EuroS&P). IEEE, 2017: 334
代码属性图构建器 ｜类关系图 ORG
类关系图
用于描述对象自身的相关信息以及同其他对
象之间的关系。
关系包括：
1. 类与函数之间的归属关系has
2. 类与接口之间的实现关系interface
3. 类与类之间的继承关系extends
Object Relation Graph
函数别名图
描述某一函数所有具体实现的语义图。函数别
名图主要用于Java语言多态特性的分析场景。
多态的特性导致了调用过程的断裂，而MAG做
的就是修补断裂点，使其能完整分析所有链路。
关系包括：
1. 函数与函数之间的别名关系alias
Alias边的集合是一个树状结构，树顶为interface
或顶层类型；树枝为当前树顶函数的具体实现。
Method Alias Graph
代码属性图构建器 ｜函数别名图 MAG
代码属性图构建器｜函数别名图 MAG
基于图数据库的代码分析方法：
分析能力下放到图数据库
由图数据库进行路径检索时，边剪枝边枚举所有实现
->缓解路径爆炸问题
传统程序分析的做法：
内存中枚举所有函数实现
->路径爆炸问题
代码属性图构建器｜函数调用图MCG
函数调用图
MCG描述函数与函数之间的调用关系图，利用有向的调用关系，可查询出一
条有效的函数调用路径。
PCG描述了更为精确的函数调用图，遗弃了不可控的函数调用。
关系包括：
1. 函数与函数之间的调用关系call
Method Call Graph
污点分析引擎 Taint Analysis Engine
污点分析引擎
污点分析引擎是tabby实现最核心的部分
它实现了从“代码属性图”至“带语义信息的代码属性图”的跨越，
使得图数据库具备程序分析的基础。
Tabby重新设计了适合图数据库的污点分析算法：
化整为零
1. 单函数过程内分析算法，生成相应污点信息
2. 跨函数过程间分析算法，应用污点信息避免重复计算
化零为整
1. 依据图数据库路径检索能力，重建调用链路
2. 利用调用边污点信息，边剪枝边构建链路，缓解路径爆炸
问题
Taint Analysis Engine
路径爆炸问题
重复计算问题
污点分析引擎｜过程内分析案例
类型
语句stmt
规则
简单赋值
a = b;
b变量的可控性传递给a变量
新建变量
a = new statement
a变量原有的可控性消除，并生成新的实体值
类属性赋值
a.f = b;
b变量的可控性传递给a变量的f属性
类属性载入
a = b.f;
b变量的f属性的可控性传递给a变量，创建f属性的实体值
静态类属性赋值
Class.field = b;
b变量的可控性传递给静态变量Class.field
静态类属性载入
a = Class.field;
静态变量Class.field的可控性传递给a变量，创建新的实体值
数组赋值
a[i] = b;
b变量的可控性传递给a变量的第i个元素
数组载入
a = b[i];
b变量的第i个元素的可控性传递给a变量
强制转化
a = (T) b;
同简单赋值一样
赋值函数调用
a = b.func(c);
b.func函数返回值的可控性传递给a变量，通常与b变量和入参c变量的可控性
有关。
函数调用
b.func(c)
返回值无关的函数调用，func函数内容决定入参c和b变量本身的可控性。
函数返回
return stmt
当前函数的返回值，其可控性依赖于stmt所返回变量的可控性。
污点分析引擎｜化整为零
跨函数的过程间分析转化为
“调用边上污点信息” 同 “调用函数的语义缓存” 比较
利用逆拓扑排序算法，巧妙地将过程间分析“转化”为类过程内分析
同时也解决了重复计算分析的问题
分而治之的方式，也在一定程度上缓解了程序分析过程中路径爆炸的问题
污点分析引擎｜化整为零