user u and bucket b in the following way. For the compromised
users, i.e., if (u, ·) ∈ ˜S, the a(cid:138)acker (cid:128)rst considers the passwords
known to be associated to that user and the list of 104 targeted
guesses generated based on the credential tweaking a(cid:138)ack intro-
duced in [40]. If any of these passwords belong to α(b) they are
guessed (cid:128)rst. (cid:140)is step is skipped for uncompromised users.
For the remaining guesses, we (cid:128)rst construct a list of candidates L
consisting of all 436 million passwords present in the breached data-
base ˜S sorted by their frequencies, followed by 500×106 passwords
generated from the 3-gram password distribution model ˆpn. Each
password w in L is assigned a weight ˆps(w)/|β((u, w))| (See Section 5
for details on ˆps and ˆpn). (cid:140)e list L is pruned to only contain unique
guesses. Note L is constructed independent of the username or
bucket identi(cid:128)er, and it is reordered based on the weight values.
(cid:140)erefore, it is constructed once for each bucketization strategy.
Finally, based on the bucket identi(cid:128)er b, the remaining guesses are
chosen from {α(b) ∩ (u, w) | w ∈ L} in descending order of weight.
For the HPB implementation, each password is mapped to one
bucket, so |β(w)| = 1 for all w. For FSB, |β(·)| can be calculated
using the equation in (cid:140)eorem 5.1.
Since we are estimating the values to be used in the equation,
the a(cid:138)ack is no longer optimal. However, the a(cid:138)ack we use still
performs quite well against existing C3 protocols, which already
shows that they leak too much information. An optimal a(cid:138)ack can
only perform be(cid:138)er.
Results. We report the success rates of the a(cid:138)ack simulations
in Figure 8. (cid:140)e baseline success rate ((cid:128)rst row) is the advantage
Advgs, computed using the same a(cid:138)ack strategy stated above except
with no information about the bucket identi(cid:128)er. (cid:140)e following
rows record the success rate of the a(cid:138)ack for HPB and FSB with
di(cid:130)erent parameter choices. (cid:140)e estimated security loss (∆q) can
be calculated by subtracting the baseline success rate from the HPB
and FSB a(cid:138)ack success rates.
(cid:140)e security loss from using HPB is large, especially for previ-
ously uncompromised users. Accessibility to the l = 20-bit hash
pre(cid:128)x, used by HIBP [6], allows an a(cid:138)acker to compromise 32.9%
of previously uncompromised users in just one guess. In fewer
than 103 guesses, that a(cid:138)acker can compromise more than 70%
of the accounts (12x more than the baseline success rate with 103
guesses). Google Password Checkup (GPC) uses l = 16 for its
username-password C3 service. Against GPC, an a(cid:138)acker only
needs 10 guesses per account to compromise 33% of accounts. Re-
ducing the pre(cid:128)x length l can decrease the a(cid:138)acker’s advantage.
However, that would also increase the bucket size. As we see for
l = 12, the average bucket size is 105,642, so the bandwidth required
to perform the credential check would be high.
FSB resists guessing a(cid:138)acks much be(cid:138)er than HPB does. For
q ≤ ¯q the a(cid:138)acker gets no additional advantage, even with the
estimated password distribution ˆps. (cid:140)e security loss for FSB when
q > ¯q is much smaller than that of HPB, even with smaller bucket
sizes. For example, the additional advantage over the baseline
against FSB with q = 100 and ¯q = 10 is only 2.4%, despite FSB also
having smaller bucket sizes than HPB with l = 16. Similarly for
¯q = 100, ∆103 = 2.2%. (cid:140)is is because the conditional distribution of
passwords given an FSB bucket identi(cid:128)er is nearly uniform, making
it harder for an a(cid:138)acker to guess the correct password in the bucket
α(b) in q guesses.
For previously compromised users — users present in ˜S — even
the baseline success rate is very high: 41% of account passwords
can be guessed in 1 guess and 56% can be guessed in fewer than
1,000 guesses. (cid:140)e advantage is supplemented even further with
access to the hash pre(cid:128)x. As per the guessing strategy, the a(cid:138)acker
(cid:128)rst guesses the leaked passwords that are both associated to the
user and in α(b). (cid:140)is turns out to be very e(cid:130)ective. Due to the
high baseline success rate the relative increase is low; nevertheless,
in total, an a(cid:138)acker can guess the passwords of 83% of previously
compromised users in fewer than 1,000 guesses. For FSB, the secu-
rity loss for compromised users is comparable to the loss against
uncompromised users for q ≤ ¯q. Particularly for ¯q = 10 and q = 100,
the a(cid:138)acker’s additional success for a previously compromised user
is only 2.7% higher than the baseline. Similarly, for ¯q = 100 an
a(cid:138)acker gets at most 1.4% additional advantage for a guessing bud-
get of q=1,000. Interestingly, FSB performs signi(cid:128)cantly worse for
compromised users compared to uncompromised users for q = 1.
(cid:140)is is because the FSB bucketing strategy does not take into ac-
count targeted password distributions, and the (cid:128)rst guess in the
compromised se(cid:138)ing is based on the credential tweaking a(cid:138)ack.
In our simulation, previously compromised users made up around
46% of the test set. We could proportionally combine the success
rates against uncompromised and compromised users to obtain an
overall a(cid:138)ack success rate. However, it is unclear what the actual
proportion would be in the real world, so we choose not to combine
results from the two se(cid:138)ings.
Password policy experiment. In the previous set of experiments,
we assumed that the C3 server and the a(cid:138)acker use the same esti-
mate of the password distribution. To explore a situation in which
the a(cid:138)acker has a be(cid:138)er estimate of the password distribution than
the C3 server, we simulated a website which enforces a password
policy. We assume that the policy is known to the a(cid:138)acker but not
to the C3 server.
For our sample password policy, we required that passwords
have at least 8 characters and that they must not be on Twi(cid:138)er’s
banned password list [11]. (cid:140)e test samples are drawn from Tsp,
username-password pairs from T where passwords follow this pol-
icy. (cid:140)e a(cid:138)acker is also given the ability to tailor their guesses
to this policy. (cid:140)e server still stores all passwords in ˜S, without
regard to this policy. Notably, the FSB scheme relies on a good
estimate of the password distribution to be e(cid:130)ective in distributing
passwords evenly across buckets. Its estimate, when compared to
the distribution of passwords in Tsp, should be less accurate than
Protocol
Params
Baseline
HPB
FSB
N/A
l = 20‡
l = 16†
l = 12
¯q = 1
¯q = 10
¯q = 102
¯q = 103
Bucket size
Avg
N/A
413
6602
105642
83
852
6299
25191
max
N/A
491
6891
106668
122
965
6602
25718
q = 1
0.7 (±0.1)
32.9 (±0.5)
17.9 (±0.5)
8.2 (±0.4)
0.7 (±0.1)
0.7 (±0.1)
0.7 (±0.1)
0.7 (±1.0)
Uncompromised
q = 10
1.5 (±0.1)
49.5 (±0.3)
33.4 (±0.6)
17.5 (±0.6)
4.7 (±0.4)
1.5 (±0.1)
1.5 (±0.1)
1.5 (±0.1)
q = 102
2.9 (±0.3)
62.5 (±0.4)
47.3 (±0.3)
30.7 (±0.6)
69.8 (±0.5)
5.3 (±0.3)
2.9 (±0.3)
2.9 (±0.3)
q = 103
5.8 (±0.4)
71.1 (±0.5)
59.7 (±0.2)
44.4 (±0.4)
71.1 (±0.5)
70.8 (±0.5)
8.0 (±0.4)
5.8 (±0.4)
q = 1
41.1 (±0.4)
67.3 (±0.8)
61.1 (±0.9)
56.3 (±1.0)
53.7 (±0.9)
52.8 (±0.9)
51.9 (±0.8)
51.4 (±0.9)
Compromised
q = 10
51.1 (±0.8)
74.5 (±0.6)
67.4 (±0.8)
60.8 (±1.0)
55.7 (±0.9)
54.2 (±1.0)
53.8 (±0.9)
53.2 (±0.9)
q = 102
53.3 (±0.9)
79.4 (±0.6)
73.6 (±0.6)
66.5 (±0.8)
82.6 (±0.4)
56.0 (±0.9)
54.8 (±1.0)
54.7 (±1.0)
q = 103
55.7 (±1.0)
82.9 (±0.4)
78.2 (±0.7)
72.3 (±0.6)
83.0 (±0.4)
83.0 (±0.4)
57.1 (±1.0)
55.9 (±0.9)
‡ HIBP uses l = 20 for its password-only C3 service.
† GPC uses l = 16 for username-password C3 service.
Figure 8: Comparison of attack success rate given q queries on di(cid:130)erent password-only C3 settings. All success rates are in
percent (%) of the total number of samples (25,000). (cid:135)e standard deviations across the 5 independent experiments of 5,000
samples each are given in the parentheses. Bucket size, the number of passwords associated to a bucket, is measured on a
random sample of 10,000 buckets.
Protocol
Baseline
HPB (l = 16)
FSB ( ¯q = 102)
q = 1
0.1
12.6
0.1
Uncompromised
10
0.5
25.9
0.5
102
1.3
36.3
1.5
Compromised
102
49.8
65.9
50.4
10
49.0
59.9
50.0
q = 1
42.2
54.6
49.2
103
51.1
70.3
54.9
103
3.4
48.9
13.2
Figure 9: Attack success rate (in %) comparison for HPB with
l = 16 (e(cid:130)ectively GPC) and FSB with ¯q = 102 for password
policy simulation. (cid:135)e (cid:128)rst row records the baseline success
rate Advgs(q). (cid:135)ere were 5,000 samples each from the un-
compromised and compromised settings.
it was in the regular simulation, when compared to the password
distribution from T .
We chose the parameters k = 16 for HPB and ¯q = 100 for FSB,
because they were the most representative of how the HPB and FSB
bucketization schemes compare to each other. (cid:140)ese parameters
also lead to similar bucket sizes, with around 6,500 passwords per
bucket. Overall, we see that the success rate of an a(cid:138)acker de-
creases in these simulations compared to the general experiments
(without a password policy). (cid:140)is is because a(cid:137)er removing popular
passwords, the remaining set of passwords that we can choose from
has higher entropy, and each password is harder to guess. FSB still
defends much be(cid:138)er against the a(cid:138)ack than HPB does, even though
the password distribution estimate used by the FSB implementation
is quite inaccurate, especially at the head of the distribution. (cid:140)e
inaccuracy stems from FSB assigning larger probability estimates
to passwords that are banned according to the password policy.
We also see that due to the inaccurate estimate by the C3 server
for FSB, we start to see some security loss for an adversary with
guessing budget q = 100. In the general simulation, the password
estimate ˆps used by the server was closer to p, so we didn’t have
any noticeable security loss where q ≤ ¯q.
7 PERFORMANCE EVALUATION
We implement the di(cid:130)erent approaches to checking compromised
credentials and evaluate their computational overheads. For fair
comparison, in addition to the algorithms we propose, FSB and IDB,
we also implement HIBP and GPC with our breach dataset.
Setup. We build C3 services as serverless web applications that
provide REST APIs. We used AWS Lambda [1] for the server-
side computation and Amazon DynamoDB [4] to store the data.
(cid:140)e bene(cid:128)t of using AWS Lambda is it can be easily deployed as
Lambda@Edge and integrated with Amazon’s content delivery
network (CDN), called CloudFront [3]. (HIBP uses Cloud(cid:131)are as
CDN to serve more than 600,000 requests per day [7].) We used
Javascript to implement the server and the client side functionalities.
(cid:140)e server is implemented as a Node-JS app. We provisioned the
Lambda workers to have a maximum of 3 GB of memory. For cryp-
tographic operations, we used a Node-JS library called Crypto [12].
For pre-processing and pre-computation of the data we used a
desktop with an Intel Core i9 processor and 128 GB RAM. (cid:140)ough
some of the computation (e.g., hash computations) can be expedited
using GPUs, we did not use any for our experiment. We used the
same machine to act as the client. (cid:140)e round trip network latency of
the Lambda API from the client machine is about 130 milliseconds.