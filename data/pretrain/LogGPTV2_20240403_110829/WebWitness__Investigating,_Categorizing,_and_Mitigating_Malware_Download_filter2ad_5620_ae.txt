if the blacklisted domains remain in use for some period
of time after they are detected. The longer-lived a mali-
cious domain, the more useful it is to blacklist it. As dis-
cussed in Sections 3.3 and 4.3, WebWitness is able not
only to identify the domains from which malware ﬁles
are downloaded, but also to identify the malicious code
injection and exploit domains within drive-by malware
download paths. Clearly, these domains are all candi-
dates for blacklisting.
To evaluate the efﬁcacy of blacklisting the code injec-
tion domains, we demonstrate the advantages this pro-
vides compared to the currently more common approach
of blacklisting the exploit and download domains. To this
end, we use a set of 88 “complete” injection-based drive-
by download paths that we were able to collect from
a large academic network. These samples were “com-
plete” paths in the sense that they were manually veri-
ﬁed to have an injection, exploit, and malware download
node (and related domain).
We evaluate the effect of blocking the different types
of drive-by path domains by counting the number of po-
tential victims that would be saved by doing so. Speciﬁ-
cally, we deﬁne a potential victim as a unique client host
visiting a blacklisted domain. Notice that the actual num-
ber of hosts that get infected may be smaller than the
number of potential victims, because only some of the
hosts that visit a malicious domain involved in a drive-by
download attack will “successfully” download and run
the malware ﬁle (e.g., because an anti-virus blocked the
malware ﬁle from running on the machine). However,
we can use the potential victim count to provide a relative
comparison on the effectiveness of blacklisting injection
versus exploit and malware download domains.
To count the potential victims, we rely on a very large
passive DNS (pDNS) database that spans multiple In-
ternet Service Providers (ISPs) and corporate networks.
This pDNS dataset stores the historic mappings between
domains and IP addresses, and also provides a unique
source identiﬁer for each host that queries a given do-
main name. This allows us to identify all the unique hosts
that queried a given domain in a given timeframe (e.g., a
given day). For each injection-based drive-by download
paths in our set, we compute the potential victims saved
by counting the number of unique hosts that query the
injection, exploit, and ﬁle download domains in the 30
days following the date when we observed and labeled
the download event. Figure 4 shows our results, in which
day-0 is the day when we detected a malicious down-
load path (the victims counts are aggregated, per day, for
all hosts contacting a malicious domain). We can im-
mediately see that the number of potential victims that
query the exploit or ﬁle download domains rapidly drops
as the exploit domain ages. On the other hand, injection
domains are longer lived, and blacklisting them would
Figure 4: Potential victims saved by blocking the injec-
tion versus exploit/download domains on drive-by paths.
prevent a much larger number of potential victims from
being redirected to new (unknown) and frequently churn-
ing exploit and ﬁle download domains. Blacklisting the
injection domain saves almost 6 times more potential vic-
tims, compared to blacklisting the exploit domain.
4.5 Blacklists & Google Safe Browsing
In this section, we aim to gain additional insights into the
advantages that could be provided by our WebWitness’
MDD module, compared to existing domain blacklists.
Public Domain Blacklists First, given the entire set
of malicious domain names related to drive-by down-
loads discovered during our study and deployment of
WebWitness, we counted how many of these domains
appeared in popular public blacklists. We also mea-
sured the delay between when we ﬁrst discovered the
domain on a malware download path and when it ap-
peared on a blacklist. This was possible because we
repeatedly collected all domain names reported by the
following set of public blacklists every day for more
than a year: support.clean-mx.de, malwaredomains.com,
zeustracker.abuse.ch, phishtank.com and malwaredo-
mainlist.com. Table 6 summarizes our ﬁndings.
Table 6: Public Blacklisting Results.
Uniq. Domains
Days: Detect to Blacklist
Mean
Exploit/Download
Injection
Observed
152
52
Blacklisted Min. Med.
20
31
1
20
9
6
29
36
As shown in Table 6, from all drive-by download paths
that we were able to identify, reconstruct, and label, we
collected a total of 52 unique drive-by code injection do-
mains and 152 unique drive-by exploit and malware ﬁle
download domains. Overall, less than 10% of these do-
mains ever appeared on a public blacklist. As we can
see, more exploit/download domains (a total of 9) were
blacklisted, compared to the injection domains (only 6).
Furthermore, we can see that the minimum time it took
for an injection domain to appear in at least one blacklist
was 20 days, whereas some exploit domains were black-
USENIX Association  
24th USENIX Security Symposium  1035
11
 0 10000 20000 30000 40000 50000 60000 70000 80000 0 5 10 15 20 25 30Potential VictimsDayInjectionExploit/Downloadlisted almost immediately (after only one day).
Because injection domains are typically longer lived
than exploit domains, and because the same injection do-
main is often used throughout the course of a drive-by
download campaign to redirect users to different (short-
lived) exploit domains, identifying and blocking injec-
tion domains has a signiﬁcant advantage. By helping to
quickly identify and blacklist injection domains, Web-
Witness enables the creation of better defenses against
drive-by downloads, thus helping to signiﬁcantly reduce
the number of potential malware victims, as we also
demonstrated in the previous Section 4.4.
Google Safe Browsing For the last few weeks of our de-
ployment of WebWitness, we checked the domain names
related to the drive-by download paths reconstructed by
our system against Google Safe Browsing (GSB) [2].
Speciﬁcally, given a malware download path and its ma-
licious domains, we queried GSB on the next day, com-
pared to the day the malware download was observed.
Overall, during this ﬁnal deployment period we observed
34 drive-by download paths. GSB detected a total of 6
malicious domains that were related to only 4 out of the
34 downloads. The domains GSB detected were used to
serve drive-by exploits, the malware ﬁle themselves, or
were related to ads used to lead the victims to a browser
exploit. None of the domains detected by GSB were in-
jection domains, even though our 34 download paths in-
cluded 12 unique injection domains.
It is important to notice, however, that while GSB de-
tected malicious domains related to only 4 out of our 34
drive-by download paths, there may be many more mal-
ware downloads that WebWitness cannot observe, sim-
ply because they are blocked “up front” by GSB. Be-
cause WebWitness passively collects malware download
traces from the network whenever a malicious executable
ﬁle download is identiﬁed in the trafﬁc, it is very possi-
ble that in many cases GSB simply prevented users who
were about to visit a drive-by-related domain from load-
ing the malicious content, and therefore from download-
ing the malware ﬁle in the ﬁrst place. Nonetheless, the
fact that WebWitness automatically discovered 30 drive-
by download paths that were not known to GSB demon-
strates that our system can successfully complement ex-
isting defenses.
4.6 Case Studies
4.6.1 Social Engineering
Figure 5 shows the download path for an in-the-wild
social engineering attack, including the “link” relation-
ships between nodes in the path. The user ﬁrst per-
forms a search on www.youtube.com (A) for a “face-
book private proﬁle viewer”, which is the root of the
path. Next, the user clicks on the top search result lead-
ing to a “trick” page on www.youtube.com (B), which
hosts a video demonstrating a program that supposedly
allows the viewing of the private proﬁles of Facebook
users. A textual description under the video provides a
link to download a “proﬁle viewer” application through
a URL shortener goo.gl (C). This shortened URL link
redirects the user to uploading.com (D), a free ﬁle
sharing site that prompts the user with a link to start
the download. This leads to another uploading.com
(E) page that thanks the user for downloading the ﬁle
and opens a new uploading.com (F) page that includes
an  with source fs689.uploading.com (G),
from which the executable ﬁle is downloaded. The ﬁle is
labeled as “Trojan Downloader” by some anti-virus scan-
ners.
A
B
C
goo .gl
www.youtube .com
root page
www.youtube .com
trick page
D
uploading .com
E
uploading .com
Referrer
Redirect
F
uploading .com
G fs689.uploading .com
download page
Figure 5: Social engineering download example.
Notice that no exploit appears to be involved in this
attack, and that the user (highly likely) had to explicitly
click on various links and on the downloaded malware
ﬁle itself to execute it.
4.6.2 Drive-by
Figure 6 shows the download path related to an in-the-
wild drive-by download.
www.google .com
root page
A
Referrer
Redirect
Source
Same Domain
B
C
coscoslidia .org
injection page
www.excelforum .com
landing page
smalltableschears .biz
D
E
smalltableschears .biz
exploit page
F
smalltableschears .biz
download page
Figure 6: Drive-by download example.
The
path
download
originates
from (A)
www.google.com (the root page), where the user en-
tered the search terms “add years and months together.”
The ﬁrst link in the search results, which the user clicked
on, is for a webpage (B) on www.excelforum[dot]com
(the landing page). Sadly, the page the user landed
1036  24th USENIX Security Symposium 
USENIX Association
12
USENIX Association  
24th USENIX Security Symposium  1037
 0 20 40 60 80 100Drive-bySocialSearchDirectFacebookTwitterUnknownFigure7:“Root”ofmalwaredownloadpaths.onwascompromisedseveraldaysearlier,result-ingintheadditionofatagwithsourceatcoscoslidia[dot]org,whichistheinjectionpage.Thescriptisautomaticallyretrievedfrom(C)andexecuted,forcingantobeaddedandrendered.Thesourceoftheframe(D)isonthesitesmalltableschears[dot]biz,fromwhichthecontentisimmediatelyfetchedandincludedinthepage.Thenewlyloadedjavascriptservedby(D)thenchecksforthepresenceofvulnerableversionsofseveralbrowserplugins.ItquicklymatchesaversionoftheinstalledAdobeFlashPlayertoaknownvulnerabil-ityanddynamicallyaddsanothertothepage,whichpullsamaliciousFlashexploitﬁlefrom(E)onthesamesmalltableschears[dot]bizsite(theexploitpage).TheFlashexploitsucceedsandtheshellcodefetchesamalwarebinary(labeledasZeroAccessbysomeAVs)from(F)onthesamedomainsmalltableschears[dot]biz(thedownloadpage).4.7“Origin”ofMalwareDownloadPathsFigure7showsabreakdownofthedrive-byandsocialengineering“origins”behindthemalwaredownloads.Fordrive-bydownloads,64%ofthedownloadpathsstartedwithasearch.Wenoticedthatthesearchquerykeywordsweretypicallyvery“normal”(e.g.,searchingforanewcar,socialevents,orsimpletools,asshownintheexampleinSection4.6.2),butunfortunatelythesearchresultslinkedtohackedwebsitesthatactedasthe“entrypoint”toexploitdistributionsitesandmalwaredownloads.Forsocialengineeringdownloads,about60%ofthewebpathsstartedwithasearch.Searchenginequeriesthateventuallyledtosocialengineeringattackstendedtoberelatedtolesslegitimatecontent.Forexample,thesearchquerieswereoftenrelatedtofreestreaminglinks,piratedmovies,orpiratedversionsofpopularex-pensivesoftware.Inthesecases,thesearchresultscon-tainedlinksofferingcontentrelevanttothesearch,buttherelatedsearchresultpageswouldalsoencouragetheusertoinstallmalicioussoftwaredisguisedassomere-quiredapplication(e.g.,avideocodecorasoftwarekeygenerator).Thesecondmostcommonoriginisdirectlinks,wherebyauserarrivestoawebpagedirectly(e.g.,byclickingonalinkwithinaspamemail),ratherthanthroughalinkfromanothersite.Mostofthesedirectlinkspointtoabenignwebsitethatiseitherhackedordisplaysmaliciousads.FacebookandTwitterrepresentarelativelyinfrequentoriginformalwaredownloads(7%and3%ofthecases,respectively).WhilebothFacebookandTwitterusuallyrelyonencrypted(HTTPS)communications,wewereabletodetermineifadownloadpathoriginatedfromtheirsitesbynoticingthatFacebookmakessurethatallexternalrequestscarryagenericwww.facebook.comre-ferrer[14].Ontheotherhand,requestsinitiatedbyclick-ingonalinkpublishedontwittercarryareferrercontain-ingat.coshorteningURL.Duringourentiredeploy-ment,weonlyobservedonecaseinwhichalinkfromFacebookorTwitterleddirectlytoadrive-byexploitkit.Inallothercases,thelinksledﬁrsttoalegitimatepagethatwashackedorthatdisplayedamaliciousad.Fortheremainingmaliciousdownloads(lessthan3%,overall)wewereunabletotracethembacktotheirorigin(e.g.,duetomissingtrafﬁc).Duringourdeployment,wealsofoundthatmaliciousadsareresponsibleforasigniﬁcantfractionofthemal-waredownloadsinourdataset.Speciﬁcally,maliciousadswereincludedinthewebpathofabout25%ofdrive-byand40%ofsocialengineeringmalwaredownloads.Themaliciousadsweobservedweretypicallydisplayedonrelativelyunpopularwebsites.WeobservedonlyoneexampleofamaliciousadservedonawebsitewithaUSAlexarankingwithinthetop500.5DiscussionandSystemLimitationsOursystemonlycollecteddataduringoff-peakhoursbecauseitwassharinghardwareresourceswithapro-ductionnetworkmonitoringsystemwhosefunctionalitycouldnotbedisrupted.Thus,ourdataisjustasampleofthemaliciousdownloadsthatoccurredduringthispe-riod.Also,duetothesigniﬁcanteffortsrequiredtoan-alyzecomplexmalwaredownloadtraces,ourevaluationgroundtruthislimitedtoarepresentativesampleofthemaliciousdownloadsthatoccurredinthemonitorednet-work.However,basedonourextensivemanualanalysis,webelievethesamplestobeverydiversebecauseofthevariousexploitkits,exploits,socialengineeringtricksandmalwareobserved,andthereforerepresentativeoftheoverallsetofmalwaredownloadsthatoccurreddur-ingourdeployment.Onemaythinkthatattackerscouldavoiddetectionbysimplydistributingmaliciousﬁlesoverencryptedweb13trafﬁc, using HTTPS. However, it is worth noting that
in sensitive networks (e.g., enterprise and government
networks) it is now common practice to deploy SSL
Man-In-The-Middle (MITM) proxies, which allow for
inspecting and recording the content both HTTP and
HTTPS trafﬁc (perhaps excluding the trafﬁc towards
some whitelisted sides, such as banking applications,
etc.). WebWitness could simply work alongside such
SSL MITM proxies.
Because the detection of malicious executable ﬁles is
outside the scope of this paper, we have relied on a “de-
tection oracle” to extract malicious download traces from
the network trafﬁc. For the sake of this study, we have
chosen to rely on multiple AV scanners. It is well known,
though, that AV scanners suffer from false positive and
negatives. In addition, the labels assigned by the AV are
often not completely meaningful. However, we should
consider that using multiple AV scanners reduces the
false negatives, and the set of ﬁltering heuristics we dis-
cussed in Section 2.2 can mitigate the false positives. In
addition, we used re-scanning over a period of a month
for each of the downloaded executable ﬁles we collected,
to further improve our ground truth. Finally, we used the
AV labels to ﬁlter out adware downloads, because we are
mainly interested in the potentially most damaging mal-
ware infections. We empirically found that the AV labels
usually do a decent job at separating the broad adware
and malware classes. Also, we manually reviewed all
samples of malware downloads in our dataset, to further
mitigate possible mislabeling problems.
Attackers with knowledge of our system may try to
evade it by using a purposely crafted attack in attempt
to alter some of the features we use in Section 3 to per-
form path traceback, categorization and for node label-
ing. Most likely, the attacker will have as a primary goal
the evasion of our traceback algorithm. This, for exam-
ple, could be done by forcing a “disconnect” between the
ﬁnal malware download node and its true predecessors.
Such an attack theoretically may be possible, especially
in case of drive-by attacks. In such events the browser is
compromised and is (in theory) under the full control of
the attacker. Now, if the malware download node is iso-
lated in the reconstructed download path, the cause clas-
siﬁer may label the download event a malware update,
thus preventing any further processing of the download
path (i.e., any attempt to identify the exploit and injec-
tion domains).
However, we should also notice that most drive-by
downloads are based on what we refer as “commonly ex-
ploitable” content in Section 3.3 (e.g., .jar, .swf, or .pdf
ﬁles that carry an exploit). For such type of drive-by
download attacks, the “commonly exploitable” content
feature should connect the exploit and the download, if
they occur in a small time window. If needed, the time
window could be extended by requiring the domain sev-
ering the content to be young by checking its “age” be-
fore making a connection. Since the exploit must occur
before the attacker has control of the browser, it is more