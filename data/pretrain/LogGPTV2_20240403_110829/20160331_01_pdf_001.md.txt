# Introducing PgOpenCL: A New PostgreSQL Procedural Language for GPU Computing

## Unlocking the Power of the GPU!

### By Tim Child

#### Bio
- **Tim Child**
  - Over 35 years of experience in software development.
  - Formerly:
    - VP at Oracle Corporation
    - VP at BEA Systems Inc.
    - VP at Informix
  - Leadership roles at Illustra, Autodesk, Navteq, and Intuit.
  - Over 30 years of experience in 3D, CAD, GIS, and DBMS.

## Terminology
- **Procedural Language**: A language for SQL procedures (e.g., PL/SQL, Perl, TCL, Java).
- **GPU**: Graphics Processing Unit (a specialized CPU for graphics).
- **GPGPU**: General Purpose GPU (non-graphics programming on a GPU).
- **CUDA**: Nvidia’s GPU programming environment.
- **APU**: Accelerated Processing Unit (AMD’s hybrid CPU & GPU chip).
- **ISO C99**: Modern standard version of the C language.
- **OpenCL**: Open Compute Language.
- **OpenMP**: Open Multi-Processing (parallelizing compilers).
- **SIMD**: Single Instruction Multiple Data (vector instructions).
- **SSE**: x86, x64 (Intel, AMD) Streaming SIMD Extensions.
- **xPU**: Any processing unit device (CPU, GPU, APU).
- **Kernel**: Functions that execute on an OpenCL device.
- **Work Item**: Instance of a kernel.
- **Workgroup**: A group of work items.
- **FLOP**: Floating Point Operation (single = SQL real type).
- **MIC**: Many Integrated Cores (Intel’s 50+ x86 core chip architecture).

## Technology Trends Impacting DBMS
- **Solid State Storage**
  - Reduced access time, lower power consumption, increasing capacity.
- **Virtualization**
  - Server consolidation, specialized VMs, lower direct costs.
- **Cloud Computing**
  - Services like EC2, Azure, reducing capital requirements.
- **Multi-Core Processors**
  - Benefits for multi-threaded applications.
- **xPU (GPU/APU)**
  - GPUs with over 1000 cores.
  - >1T FLOP/s at €2500.
  - APU (CPU + GPU hybrids) due in mid-2011.
  - 2T FLOP/s for $2.10 per hour (AWS EC2).
  - Intel MIC “Knights Corner” with >50 x86 cores.

## Compute-Intensive xPU Database Applications
- Bioinformatics
- Signal/Audio/Image/Video Processing
- Data Mining & Analytics
- Searching
- Sorting
- Spatial Selections and Joins
- Map/Reduce
- Scientific Computing
- Many others...

## GPU vs. CPU
| Vendor   | NVidia        | ATI Radeon     | Intel         |
|----------|---------------|----------------|---------------|
| Architecture | Fermi        | Evergreen      | Nehalem       |
| Cores    | 448           | 1600           | 4             |
| Transistors | 3.1 B         | 2.15 B         | 731 M         |
| Clock    | 1.5 GHz       | 851 MHz        | 3 GHz         |
| Peak Float Performance | 1500 GFLOP/s | 2720 GFLOP/s  | 96 GFLOP/s    |
| Peak Double Performance | 750 GFLOP/s  | 544 GFLOP/s   | 48 GFLOP/s    |
| Memory Bandwidth | ~190 GB/s   | ~153 GB/s      | ~30 GB/s      |
| Power Consumption | 250 W       | >250 W         | 80 W          |
| SIMD/Vector Instructions | Many | Many | SSE4+ |

## Future (Mid 2011): APU-Based PC
- **APU (Accelerated Processing Unit)**
  - Adds an embedded GPU to the CPU.
  - Example: APU Chip with 20 GB/s System RAM and 2 GB/s Discrete Graphic RAM.

## Scalar vs. SIMD
- **Scalar Instruction**: `C = A + B`
- **SIMD Instruction**: `Vector C = Vector A + Vector B`

## OpenCL
- **Vector lengths**: 2, 4, 8, 16 for char, short, int, float, double.

## Summary of xPU Trends
- **Many more xPU cores** in the future.
- **Hybrid compute environments** (CPU and GPU).
- **GPU capabilities**:
  - Lots of cores.
  - Vector/SIMD instructions.
  - Fast memory.
- **Future GPU features**:
  - Virtual memory.
  - Multi-tasking/pre-emption.

## Scaling PostgreSQL Queries on xPU
- **Multi-Core CPU and Many-Core GPU**
  - Utilizing PgOpenCL for parallel processing.
  - Threads and processes for efficient query execution.

## Parallel Programming Systems
| Category | CUDA        | OpenMP      | OpenCL      |
|----------|-------------|-------------|-------------|
| Language | C           | C, Fortran  | C           |
| Cross Platform | X           | √           | √           |
| Standard | Vendor      | OpenMP      | Khronos     |
| CPU Support | X           | √           | √           |
| GPU Support | √           | X           | √           |
| Clusters | X           | √           | X           |
| Compilation/Link | Static | Static | Dynamic |

## What is OpenCL?
- **OpenCL (Open Compute Language)**
  - Subset of ISO C99.
  - Open specification proposed by Apple and collaborated on by many companies.
  - Portable and device-agnostic.
  - Specification maintained by the Khronos Group.
- **PgOpenCL**
  - OpenCL as a PostgreSQL procedural language.

## System Overview
- **DBMS Server**
  - PgOpenCL
  - Web HTTP
  - Web SQL
  - Browser
  - PCIe X2 Bus
  - TCP/IP
  - App
  - PostgreSQL GPGPU
  - Disk I/O
  - Tables
  - TCP/IP
  - PostgreSQL Client
  - OpenCL Language

## OpenCL Language
- **Subset of ISO C99**
  - Without some C99 features like standard headers, function pointers, recursion, variable-length arrays, and bit fields.
- **Superset of ISO C99 with additions for:**
  - Work-items and workgroups.
  - Vector types.
  - Synchronization.
  - Address space qualifiers.
- **Built-in functions**
  - Image manipulation.
  - Work-item manipulation.
  - Specialized math routines, etc.

## PgOpenCL Components
- **New PostgreSQL Procedural Language**
  - Language handler: Maps arguments, calls function, returns results.
  - Language validator: Creates function with parameter and syntax checking, compiles function to binary format.
- **New data types**
  - cl_double4, cl_double8, etc.
- **System Admin Pseudo-Tables**
  - Platform, Device, Run-Time, etc.

## PgOpenCL Function Declaration
```sql
CREATE OR REPLACE FUNCTION VectorAdd(IN a float[], IN b float[], OUT c float[])
AS $BODY$
#pragma PGOPENCL Platform : ATI Stream
#pragma PGOPENCL Device : CPU
__kernel __attribute__((reqd_work_group_size(64, 1, 1)))
void VectorAdd(__global const float *a, __global const float *b, __global float *c)
{
    int i = get_global_id(0);
    c[i] = a[i] + b[i];
}
$BODY$
LANGUAGE PgOpenCL;
```

## Execution Model
- **Table to Array Conversion**
  - Select table to array.
  - Execute on xPU with hundreds to thousands of threads (kernels).
  - Return result and copy back to table.

## Today’s GPGPU Challenges
- **No Pre-emptive Multi-Tasking**
- **No Virtual Memory**
- **Limited Bandwidth** to discrete GPGPU (1-8 GB/s over PCIe bus).
- **Hard to Program**
  - New parallel algorithms and constructs.
  - "New" C language dialect.
- **Immature Tools**
  - Compilers, IDEs, debuggers, profilers in early stages.
- **Data Organization Matters**
  - Types, structure, and alignment.
  - SQL needs to shape the data.
- **Profiling and Debugging** is not easy.

## Making a Problem Work for You
- **Determine % Parallelism Possible**
- **Ensure Calculation Time > I/O Transfer Overhead**
- **Learn about Parallel Algorithms and OpenCL Language**
- **Learn New Tools**
- **Carefully Choose Data Types, Organization, and Alignments**
- **Profile and Measure at Every Stage**

## PgOpenCL System Requirements
- **PostgreSQL 9.x**
- **For GPUs**
  - AMD ATI OpenCL Stream SDK 2.x
  - Nvidia CUDA 3.x SDK
  - Recent Macs with OS 11.6
- **For CPUs**
  - AMD ATI OpenCL Stream SDK 2.x
  - Intel OpenCL SDK Alpha Release (x86)
  - Recent Macs with OS 11.6

## PGOpenCL Status
- **Today (1Q 2011)**: Prototype
- **Wish List**
  - Beta testers (existing OpenCL or GPU apps).
  - Contributors (code server-side functions).
  - Sponsors & supporters (AMD Fusion Fund, Khronos).

## Future Plans
- **Increase Platform Support**
- **Scatter/Gather Functions**
- **Additional Type Support**
  - Image types, sparse matrices.
- **Run-Time Enhancements**
  - Asynchronous operations.
  - Events.
  - Profiling.
  - Debugging.

## Using the Whole Brain
- **Heterogeneous Compute Environments**
  - CPUs, GPUs, APUs.
  - Expect 100s to 1000s of cores.

## The Future Is Parallel: What's a Programmer to Do?
- **Summarizing PgOpenCL**
  - Supports heterogeneous parallel compute environments.
  - Integrates PostgreSQL with OpenCL.
  - Provides easy SQL access to xPUs (APU, CPU, GPGPU).
  - Efficient parallel programming language (C99 with extensions).
  - Rich set of built-in functions.
  - Open standard for heterogeneous parallel computing.

## More Information
- **PGOpenCL**
  - Twitter: @3DMashUp
- **OpenCL**
  - [Khronos Group](https://www.khronos.org/opencl/)
  - [AMD](https://www.amd.com/en/technologies/stream-technology/opencl)
  - [Intel](https://software.intel.com/en-us/articles/intel-opencl-sdk)
  - [Nvidia](https://developer.nvidia.com/cuda/opencl)
  - [Apple](https://developer.apple.com/technologies/mac/snowleopard/opencl)

## Q & A
- **Using Parallel Applications?**
- **Benefits of OpenCL / PgOpenCL?**
- **Want to Collaborate on PgOpenCL?**