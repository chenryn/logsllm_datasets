Introducing PgOpenCL
A New PostgreSQL
Procedural Language
GPU
Unlocking the Power of the !
By
Tim Child
Bio
Tim Child
• 35 years experience of software development
• Formerly
• VP Oracle Corporation
• VP BEA Systems Inc.
• VP Informix
• Leader at Illustra, Autodesk, Navteq, Intuit, …
• 30+ years experience in 3D, CAD, GIS and DBMS
Terminology
Term Description
Procedure Language Language for SQL Procedures (e.g. PgPLSQL, Perl, TCL, Java, … )
GPU Graphics Processing Unit (highly specialized CPU for graphics)
GPGPU General Purpose GPU (non-graphics programming on a GPU)
CUDA Nvidia’s GPU programming environment
APU Accelerated Processing Unit (AMD’s Hybrid CPU & GPU chip)
ISO C99 Modern standard version of the C language
OpenCL Open Compute Language
OpenMP Open Multi-Processing (parallelizing compilers)
SIMD Single Instruction Multiple Data (Vector instructions )
SSE x86, x64 (Intel, AMD) Streaming SIMD Extensions
xPU Any Processing Unit device (CPU, GPU, APU)
Kernel Functions that execute on a OpenCL Device
Work Item Instance of a Kernel
Workgroup A group of Work Items
FLOP Floating Point Operation (single = SQL real type )
MIC Many Integrated Cores (Intel’s 50+ x86 Core chip architecture)
Some Technology Trends
Impacting DBMS
• Solid State Storage
– Reduced Access Time, Lower Power, Increasing in capacity
• Virtualization
– Server consolidation, Specialized VM’s, lowers direct costs
• Cloud Computing
– EC2, Azure, … lowers capital requirements
• Multi-Core
– 2,4,6,8, 12, …. Lots of benefits to multi-threaded applications
• xPU (GPU/APU)
– GPU >1000 Cores
– > 1T FLOP /s @ €2500
– APU = CPU + GPU Chip Hybrids due in Mid 2011
– 2 T FLOP /s for $2.10 per hour (AWS EC2)
– Intel MIC “Knights Corner “ > 50 x86 Cores
Compute Intensive
xPU
Database Applications
• Bioinformatics
• Signal/Audio/Image Processing/Video
• Data Mining & Analytics
• Searching
• Sorting
• Spatial Selections and Joins
• Map/Reduce
• Scientific Computing
• Many Others …
GPU vs CPU
Vendor NVidia ATI Radeon Intel
Architecture Fermi Evergreen Nehalem
Cores 448 1600 4
Simple Simple Complex
Transistors 3.1 B 2.15 B 731 M
Clock 1.5 G Hz 851 M Hz 3 G Hz
Peak Float 1500 G 2720 G 96 G
Performance FLOP / s FLOP / s FLOP / s
Peak Double 750 G 544 G 48 G
Performance FLOP / s FLOP / s FLOP / s
Memory ~ 190 G / s ~ 153 G / s ~ 30 G / s
Bandwidth
Power 250 W > 250 W 80 W
Consumption
SIMD / Vector Many Many SSE4+
Instructions
Multi-Core Performance
Source NVidia
Future (Mid 2011)
APU Based PC
APU (Accelerated Processing Unit)
APU Chip
CCPPUU CCPPUU ~~2200 GGBB//ss SSyysstteemm RRAAMM
NNoorrtthh BBrriiddggee
APU’s
~~2200 GGBB//ss
PP
CC Adds an Embedded
II
EEmmbbeeddddeedd EE
GPU
~~
11
GGPPUU
22
GG
BB
//
ss
DDiissccrreettee
GGrraapphhiicc RRAAMM
115500 GGBB//ss
GGPPUU
Source AMD
Scalar vs. SIMD
Scalar Instruction
C = A + B + =
1 2 3
SIMD Instruction
1 3 5 7
+
Vector C = Vector A + Vector B 2 4 6 8
=
3 7 11 15
OpenCL
Vector lengths 2,4,8,16 for char, short, int, float, double
Summarizing xPU
Trends
• Many more xPU Cores in our Future
• Compute Environment becoming Hybrid
– CPU and GPU’s
– Need CPU to give access to GPU power
• GPU Capabilities
– Lots of cores
– Vector/SIMD Instructions
– Fast Memory
• GPU Futures
– Virtual Memory
– Multi-tasking / Pre-emption
Scaling PostgreSQL Queries
on xPU’s
Multi-Core CPU Many Core GPU
PgOpenCL PgOpenCL PgOpenCL PgOpenCL PgOpenCL PgOpenCL PgOpenCL PgOpenCL PgOpenCL
Threads Threads Threads Threads Threads Threads Threads Thread Thread
PgOpenCL PgOpenCL PgOpenCL PgOpenCL PgOpenCL
Postgres
Threads Threads Threads Thread Thread
Process
PgOpenCL PgOpenCL
PgOpenCL PgOpenCL PgOpenCL
Thread Thread
Threads Threads Threads
Using More
Transistors
Parallel
Programming Systems
Category CUDA OpenMP OpenCL
Language C C, Fortran C
Cross Platform X √ √
Standard Vendor OpenMP Khronos
CPU X √ √
GPU √ X √
Clusters X √ X
Compilation / Link Static Static Dynamic
What is OpenCL?
• OpenCL - Open Compute Language
– Subset of C 99
– Open Specification
– Proposed by Apple
– Many Companies Collaborated on the Specification
– Portable, Device Agnostic
– Specification maintained by Khronos Group
• PgOpenCL
– OpenCL as a PostgreSQL Procedural Language
System Overview
DBMS Server
PPggOOppeennCCLL
Web HTTP Web SQL SSQQLL
Browser Server Statement PPrroocceedduurree
PCIe X2 Bus
TCP/IP
App
PostgreSQL GPGPU
Server
Disk I/O Tables
TCP/IP
PostgreSQL
Client
OpenCL
Language
• A subset of ISO C99
– - But without some C99 features such as standard C99 headers,
– function pointers, recursion, variable length arrays, and bit fields
• A superset of ISO C99 with additions for:
– - Work-items and Workgroups
– - Vector types
– - Synchronization
– - Address space qualifiers
• Also includes a large set of built-in functions
– - Image manipulation
– - Work-item manipulation,
– - Specialized math routines, etc.
PgOpenCL
Components
• New PostgreSQL Procedural Language
– Language handler
• Maps arguments
• Calls function
• Returns results
– Language validator
• Creates Function with parameter & syntax checking
• Compiles Function to a Binary format
• New data types
– cl_double4, cl_double8, ….
• System Admin Pseudo-Tables
– Platform, Device, Run-Time, …
PgOpenCL
Admin
PGOpenCL
Function Declaration
CREATE or REPLACE FUNCTION VectorAdd(IN a float[], IN B float[], OUT c float[])
AS $BODY$
#pragma PGOPENCL Platform : ATI Stream
#pragma PGOPENCL Device : CPU
__kernel __attribute__((reqd_work_group_size(64, 1, 1)))
void VectorAdd( __global const float *a, __global const float *b, __global float *c)
{
int i = get_global_id(0);
c[i] = a[i] + b[i];
}
$BODY$
Language PgOpenCL;
PgOpenCL
Execution Model
A
Table
B
Select Table 100’s - 1000’s of
to Array Threads (Kernels)
xPU
+ VectorAdd(A, B) =
A B C
Returns C
Copy
Unnest Array
To Table
Copy
Table
C C C C C C C C C C C C C
Using
Re-Shaped Tables
100’s - 1000’s of
Table of Table of
Threads (Kernels)
Arrays Arrays
+ =
A B C
A
C C C C
B
xPU
VectorAdd(A, B)
Returns C
A
C C C C
B
Copy
Copy
Today’s GPGPU
Challenges
• No Pre-emptive Multi-Tasking
• No Virtual Memory
• Limited Bandwidth to discrete GPGPU
– 1 – 8 G/s over PCIe Bus
• Hard to Program
– New Parallel Algorithms and constructs
– “New” C language dialect
• Immature Tools
– Compilers, IDE, Debuggers, Profilers - early years
• Data organization really matters
– Types, Structure, and Alignment
– SQL needs to Shape the Data
• Profiling and Debugging is not easy
Solves Well for Problem Sets with the Right Shape!
Making a Problem
Work for You
• Determine % Parallelism Possible
∞
for ( i = 0, i >
• Ensure calculation time I/O transfer overhead
• Learn about Parallel Algorithms and the OpenCL language
• Learn new tools
• Carefully choose Data Types, Organization and Alignments
• Profile and Measure at Every Stage
PgOpenCL
System Requirements
• PostgreSQL 9.x
• For GPU’s
– AMD ATI OpenCL Stream SDK 2.x
– NVidia CUDA 3.x SDK
– Recent Macs with O/S 11.6
• For CPU’s
(Pentium M or more recent)
– AMD ATI OpenCL Stream SDK 2.x
– Intel OpenCL SDK Alpha Release (x86)
– Recent Macs with O/S 11.6
PGOpenCL
Status
Today
1Q 2011
Prototype
Beta
2010 2011
• Wish List
• Beta Testers
– Existing OpenCL App?
– Have a GPU App?
• Contributors
– Code server side functions?
• Sponsors & Supporters
– AMD Fusion Fund?
– Khronos?
PgOpenCL
Future Plans
• Increase Platform Support
• Scatter/Gather Functions
• Additional Type Support
– Image Types
– Sparse Matrices
• Run-Time
– Asynchronous
– Events
– Profiling
– Debugging
Using the
Whole Brain
APU Chip
PgOpenCl
PgOpenCl
PgOpenCL
PgOpenCL
CPU
CCPPUU CCPPUU
Postgres You can’t be in a
parallel universe
with a single
brain!
NNoorrtthh BBrriiddggee
~~2200 GGBB//ss
• Heterogeneous Compute Environments
PgOpenCl
• CPU’s, GPU’s, APU’s
PgOpenCl
EEmmbbeeddddeedd PgOpenCl • Expect 100’s – 1000’s of cores
PgOpenCl
GGPPUU PgOpenCL
The Future Is Parallel: What's a Programmer to Do?
Summarizing
PgOpenCL
• Supports Heterogeneous Parallel Compute Environments
• CPU’s, GPU’s, APU’s
• OpenCL
• Portable and high-performance framework
–Ideal for computationally intensive algorithms
–Access to all compute resources (CPU, APU, GPU)
–Well-defined computation/memory model
•Efficient parallel programming language
–C99 with extensions for task and data parallelism
–Rich set of built-in functions
•Open standard for heterogeneous parallel computing
• PgOpenCL
• Integrates PostgreSQL with OpenCL
• Provides Easy SQL Access to xPU’s
• APU, CPU, GPGPU
• Integrates OpenCL
• SQL + Web Apps(PHP, Ruby, … )
More
Information
• PGOpenCL
• Twitter @3DMashUp
• OpenCL
• www.khronos.org/opencl/
• www.amd.com/us/products/technologies/stream-technology/opencl/
• http://software.intel.com/en-us/articles/intel-opencl-sdk
• http://www.nvidia.com/object/cuda_opencl_new.html
• http://developer.apple.com/technologies/mac/snowleopard/opencl.html
Q & A
• Using Parallel Applications?
• Benefits of OpenCL / PgOpenCL?
• Want to Collaborate on PgOpenCL?
|---|--|--|----------------------|
| 0 |  |  | Introducing PgOpenCL |
| 1 |  |  |                      |
| 2 |  |  | A New PostgreSQL 
 Procedural Language 
Unlocking the Power of the GPU!                      |