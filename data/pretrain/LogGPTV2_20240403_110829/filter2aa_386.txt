# Hiding Wookiees in HTTP

## Speaker: @regilero
## Event: DEFCON 24

### Why Wookiees?
- The presentation is about smugglers, Wookiee requests, and responses.
- Wookiee language is challenging to speak and easy to misinterpret.

### Outline
1. **HTTP Basics (Keep-alive, Pipelining)**
2. **What is HTTP Smuggling and Exploitations**
3. **Recent Attack Vectors**
4. **HTTP 0.9**
5. **Demos: Credential Hijacking & Cache Poisoning Without a Cache**
6. **Tool: HTTPWookiee**

### About the Speaker
- **@regilero** (Twitter / Stack Overflow / GitHub)
- Works at Makina Corpus, a small French Free Software web company (50 employees).
- DevOps professional with a background in web security.
- Web Security is a part of both his job and personal interests.

### Motivation
- Interest in Open Source HTTP servers and proxies.
- Found two interesting papers:
  - [Practical HTTP Host Header Attacks](http://www.skeletonscribe.net/2013/05/practical-http-host-header-attacks.html)
  - [HTTP Smuggling Study (2005)](http://www.cgisecurity.com/lib/HTTP-Request-Smuggling.pdf)

### HTTP Smuggling: Protocol Level Attack
- **Definition**: Injection of hidden HTTP messages (requests or responses) inside another message.
- **Characteristics**:
  - Not typically browser-based exploits.
  - Involves crafting low-level HTTP messages.
  - Most available tools do not generate these "bad" messages.
  - Usually results in errors without consequences, but not always.

### Keepalives and Pipelines
- **Without Keepalive**:
  - One TCP/IP connection per resource, leading to performance issues.
  - Connection termination is complex.
- **With Keepalive**:
  - SYN, SYN/ACK, ACK are made only once, and the connection remains open.
  - Can be reused for subsequent exchanges.
  - Common in non-HTTP/2 browsers.

- **Pipelining**:
  - Rarely used but supported by servers.
  - Head-of-line blocking if one response is large.
  - HTTP/2 uses binary multiplexing to address these issues.

### Pipelines and Reverse Proxies
- **Proxy Behavior**:
  - May use keep-alive with the backend.
  - Likely not using pipelining with the backend.
  - Backend is unaware of this.

### Smuggling Techniques
- **Messages**:
  - Valid single message.
  - Pipeline of n messages (mistake).
- **Actors**:
  - **Transmitter**: Ignores or transmits strange syntax.
  - **Splitter**: Splits requests or responses based on this syntax.

### Payloads: Final Objectives
- Run forbidden requests (filter bypass).
- Crash an actor on bad syntax (DoS).
- Poison cached responses.
- Hijack HTTP credentials (HTTP Auth, cookies) using unterminated queries.
- These techniques were described in 2005.

### Exploits: Size Matters
- **Headers**:
  - Double Content-Length headers.
  - Content-Length or chunked transmission with end-of-chunks markers.
  - Invalid headers or values.
  - Invalid end-of-line (EOL) characters.
  - Old features (HTTP v0.9, multi-line headers).

### Demo 1: Hijacking Credentials
- **Node.js Example**:
  ```plaintext
  \r\n
  Hello world\r\n
  \r\n
  ```
- **HTTP v0.9**:
  ```plaintext
  \r\n
  Hello world\r\n
  \r\n
  ```
- **No Headers**: Body is just a text stream.
- **Injection**: Injecting HTTP headers into this stream.

### Before the Next Demo: HTTP/0.9
- **Image as HTTP Stream**:
  - In HTTP 1.0 or 1.1, it's a bad image.
  - In HTTP 0.9, it's an HTTP message.
- **EXIF Data as HTTP Stream**:
  - Extract EXIF data with Range request (206 Partial Content).
- **Restrictions**:
  - Force HTTP/1.0 or HTTP/1.1 on backend communications.
  - No keep-alive (Connection: close).
  - No range on 0.9.

### Before the Next Demo: NoCache Poisoning
- **Cache Poisoning**:
  - Usually complex.
  - Check if a cache exists.
- **NoCache Poisoning**:
  - Reverse proxy reuses TCP/IP connections.
  - Proxy trusts backend communication and does not expect extra content.

### Demo 2: NoCache Poisoning, 0.9 Hidden Response
- **Tools and Techniques**:
  - Splitting issues in Go before v1.4.3/1.5.
  - Nocache poisoning in mod_proxy.
  - Storing HTTP responses in EXIF data.
  - HTTP/0.9 bad downgrade (with range support), now fixed.
  - SSL/HTTPS for added complexity.

- **Command**:
  ```bash
  for i in `seq 5555`; do printf 'GET /index.html HTTP/1.1\r\n'\
  'Host: www.demo.net\r\n'\
  'Transfer Encoding:chunked\r\n'\
  'Content-Length: 139\r\n'\
  'Connection:keep-alive\r\n'\
  '\r\n'\
  '0\r\n'\
  '\r\n'\
  'GET /chewy2.jpg HTTP/0.9\r\n'\
  'Connection: keep-alive\r\n'\
  'Cookie: Something\r\n'\
  'Host:localhost\r\n'\
  'Connection: keep-alive\r\n'\
  'Range: bytes=24-35193\r\n'\
  '\r\n'| openssl s_client -connect www.demo.net:443 -quiet -servername www.demo.net -no_ign_eof -pause & done;
  ```

### CVE Considerations
- **Splitting Issues**:
  - Real problems where actors read the wrong number of messages.
  - Should be considered critical and reported as CVEs.
- **Transmission of Strange Syntax**:
  - Usually fixed without CVEs.
- **Responsibility**:
  - Hard to define, involves a chain of responsibilities.

### Warning
- **Bounties**:
  - Unlikely to earn bounties on HTTP smuggling.
- **Testing Public Infrastructure**:
  - May have unintended consequences on users.
  - Not considered white-hat activity.
- **Peer Review**:
  - More people should review existing code.

### Exploits: Examples
- **Nginx**:
  - Integer Overflow (fixed in 1.7.x).
  - Public issue #762 (fixed in trunk 1.11.x).
- **Varnish**:
  - CVE-2015-8852: [CR] as EOL & Double Content-Length.
- **Apache httpd**:
  - CVE-2015-3183: Chunk size attribute truncation (fixed in 2.4.14).
- **Golang**:
  - CVE-2015-5739/CVE-2015-5740: Double Content-Length support.
- **Node.js**:
  - CVE-2016-2086: Double Content-Length, CR assumed as followed by LF.
- **Other Exploits**:
  - CVE-2016-5699: Python urllib (urlencoded CRLF injection).
  - CVE-2016-2216: Node.js response splitting (Unicode CRLF injection).

### Protections
- **RFC Compliance**:
  - Use RFC 7230 (2014) instead of RFC 2616 (1999).
- **Reverse Proxy**:
  - Avoid writing your own.
  - Rewrite all headers cleanly.
  - Prepare to read books on TCP/IP sockets.
  - Support browsers, not bots or lazy monitoring tools.
  - Reject edge cases, be intolerant.
- **Implementation**:
  - Be conservative in sending behavior and liberal in receiving behavior.
  - Administrators should have more settings.
  - Suspend pipelining without removing keep-alive.
  - Reject 0.9 queries.

### HTTPS and HTTP/2
- **HTTPS**:
  - Does not prevent HTTP attacks.
  - Encloses HTTP in another layer, but the attacked layer is still HTTP.
  - Adding an SSL terminator expands the attack surface.
- **HTTP/2**:
  - Smuggling is harder but not impossible.
  - HTTP/1.1 is still present within HTTP/2.
  - HTTP/2 servers may accept HTTP 0.9.
  - The devil is in the implementation, not the protocol.

### HTTPWookiee: The Tool
- **Purpose**:
  - Automates some tests.
  - Released as a GPL free software tool on GitHub.
  - Priority is security enforcement, not breaking stuff.

### Q&A
- **Acknowledgments**:
  - Thanks to the DEFCON team and colleagues for their help.

---

This optimized version aims to make the content more structured, clear, and professional, while maintaining the original information and intent.