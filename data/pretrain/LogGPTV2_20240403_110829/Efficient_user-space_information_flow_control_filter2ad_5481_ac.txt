# Figure 5: Sparse Labeling for Encodings

1. **Conditional Statements:**
   - **[S-THEN]**
     \[
     \begin{aligned}
     &\sigma, \theta, e_1 \downarrow_{pc} \sigma_1, \text{true} \\
     &\sigma_1, \theta, e_2 \downarrow_{pc} \sigma', v \\
     &\sigma, \theta, (\text{if } e_1 \text{ then } e_2 \text{ else } e_3) \downarrow_{pc} \sigma', v
     \end{aligned}
     \]
   - **[S-THEN-SLOW]**
     \[
     \begin{aligned}
     &\sigma, \theta, e_1 \downarrow_{pc} \sigma_1, v_1 \\
     &\sigma_1, \theta, e_2 \downarrow_{pc} \sigma_2, v_2 \\
     &\sigma, \theta, (\text{if } e_1 \text{ then } e_2 \text{ else } e_3) \downarrow_{pc} \sigma', (v_1, v_2)
     \end{aligned}
     \]

2. **Pair Operations:**
   - **[S-PAIR]**
     \[
     \begin{aligned}
     &\sigma, \theta, e_1 \downarrow_{pc} \sigma_1, v_1 \\
     &\sigma_1, \theta, e_2 \downarrow_{pc} \sigma_2, v_2 \\
     &\sigma, \theta, (\text{pair } e_1 \text{ } e_2) \downarrow_{pc} \sigma_2, (v_1, v_2)
     \end{aligned}
     \]
   - **[S-FST]**
     \[
     \begin{aligned}
     &\sigma, \theta, e \downarrow_{pc} \sigma', (v_1, v_2) \\
     &\sigma, \theta, (\text{fst } e) \downarrow_{pc} \sigma', v_1
     \end{aligned}
     \]
   - **[S-SND]**
     \[
     \begin{aligned}
     &\sigma, \theta, e \downarrow_{pc} \sigma', (v_1, v_2) \\
     &\sigma, \theta, (\text{snd } e) \downarrow_{pc} \sigma', v_2
     \end{aligned}
     \]

3. **Let Bindings:**
   - **[S-LET]**
     \[
     \begin{aligned}
     &\sigma, \theta, e_1 \Downarrow_{pc} \sigma_1, v_1 \\
     &\sigma_1, \theta[x := v_1], e_2 \Downarrow_{pc} \sigma', v \\
     &\sigma, \theta, (\text{let } x = e_1 \text{ in } e_2) \Downarrow_{pc} \sigma', v
     \end{aligned}
     \]

4. **Sequential Execution:**
   - **[S-SEMI]**
     \[
     \begin{aligned}
     &\sigma, \theta, e_1 \Downarrow_{pc} \sigma_1, v_1 \\
     &\sigma_1, \theta, e_2 \Downarrow_{pc} \sigma', v \\
     &\sigma, \theta, (e_1; e_2) \Downarrow_{pc} \sigma', v
     \end{aligned}
     \]

## Proof by Induction

**Proof:**
By induction on the derivation of \(\sigma, e \Downarrow_H \sigma', v\), and case analysis on the final rule in the derivation.

- **[S-CONST], [S-FUN], [S-VAR]:** \(\sigma' = \sigma\).
- **[S-APP], [S-APP-SLOW], [S-LABEL], [S-PRIM], [S-PRIM-SLOW], [S-DEREF], [S-DEREF-SLOW]:** By induction.
- **[S-REF]:** \(\sigma\) and \(\sigma'\) agree on their common domain.
- **[S-ASSIGN]:** Let \(\sigma' = \sigma_2[a := v]\). From the no-sensitive-upgrade check, \(H = \text{label}(a)\). By Lemma 5, \(\sigma_2(a) \sim_H H v\) and so \(\sigma_2 \approx_H \sigma'\). By induction, \(\sigma \approx_H \sigma_1 \approx_H \sigma_2\). Also, \(\text{dom}(\sigma) \subseteq \text{dom}(\sigma_1) \subseteq \text{dom}(\sigma_2) = \text{dom}(\sigma')\). Hence, \(\sigma \approx_H \sigma'\).
- **[S-ASSIGN-SLOW]:** Similar.

We next show that non-inference holds for the sparse-labeling semantics: if \(e\) is executed twice from \(H\)-compatible stores and \(H\)-equivalent substitutions, then the two executions yield \(H\)-compatible resulting stores and \(H\)-equivalent resulting values.

## Theorem 2: Non-Interference for Sparse Labeling

**Theorem 2 (Non-Interference for Sparse Labeling):**
If
\[
\begin{aligned}
&\sigma_1 \approx_H \sigma_2 \\
&\theta_1 \sim_{pc}^H \theta_2 \\
&\sigma_1, \theta_1, e \downarrow_{pc} \sigma'_1, v_1 \\
&\sigma_2, \theta_2, e \downarrow_{pc} \sigma'_2, v_2
\end{aligned}
\]
then
\[
\begin{aligned}
&\sigma'_1 \approx_H \sigma'_2 \\
&v_1 \sim_{pc}^H v_2
\end{aligned}
\]

**Proof:**
By induction on the derivation \(\sigma_1, \theta_1, e \downarrow_{pc} \sigma'_1, v_1\) and case analysis on the last rule used in that derivation. The details of the case analysis are presented in Appendix A.

## 5. Experimental Results

To evaluate the relative costs of universal and sparse labeling, we developed three different language implementations. The implementations all support the same language, which is an extension of \(\lambda_{info}\) with features necessary for realistic programming. These features include pairs and lists built as a native part of the language, strings, and associated utility functions. The three implementations are:

- **NOLABEL:** A traditional interpreter that performs no labeling or information flow analysis, establishing our baseline for performance.
- **UNIVERSALLABEL:** Implements the universal labeling semantics.
- **SPARSELABEL:** Implements the sparse labeling semantics.

### Benchmark Results

| Benchmark              | NOLABEL (secs/100k runs) | UNIVERSALLABEL (vs NOLABEL) | SPARSELABEL (vs. NOLABEL) | SPARSELABEL (vs. UNIVERSALLABEL) |
|------------------------|--------------------------|------------------------------|----------------------------|----------------------------------|
| SumList                | 2.295382                 | 1.94                         | 0.79                       | 0.41                             |
| UserPwdFine            | 1.248581                 | 1.63                         | 1.12                       | 0.68                             |
| UserPwdCoarse          | 1.251994                 | 2.45                         | 1.03                       | 0.42                             |
| FileSys0               | 23.206768                | 3.38                         | 1.07                       | 0.32                             |
| FileSys25              | 24.843616                | 3.00                         | 1.22                       | 0.41                             |
| FileSys50              | 24.840610                | 3.54                         | 1.27                       | 0.36                             |
| FileSys100             | 24.455563                | 4.12                         | 1.62                       | 0.39                             |
| FileSysExplicit        | 24.470711                | Information leak prevented   | Information leak prevented | Information leak prevented       |
| ImplicitFlowTrue       | 0.028825                 | Information leak prevented   | Information leak prevented | Information leak prevented       |
| ImplicitFlowFalse      | 0.031577                 | 1.04                         | 1.01                       | 0.98                             |
| Average                | -                        | 2.64                         | 1.14                       | 0.50                             |

### Benchmark Programs

- **SumList:** Calculates the sum for a list of 100 numbers. There are no labels to show the overhead when information flow is not needed.
- **UserPwdFine:** Simulates a login by looking up a username and password in an association list. The passwords stored in the list are labeled as "secret."
- **UserPwdCoarse:** Identical to UserPwdFine, except that the entire association list is labeled as "secret."
- **FileSys0:** Reads a file from an in-memory file system implemented in our target language, and represented as a directory tree structure. The file system contains 1023 directories and 2048 regular files, and contains no non-trivial labels.
- **FileSys25, FileSys50, and FileSys100:** Identical to FileSys0, except that 25%, 50%, and 100% of the files and directories are labeled as "secret," respectively.
- **FileSysExplicit:** Identical to FileSys100, except that this benchmark causes an information leak by an explicit flow.
- **ImplicitFlowTrue and ImplicitFlowFalse:** Implement the implicit information flow leak example discussed in Section 3, where the confidential variable \(x\) is given values of true and false, respectively.

### Test Environment

We ran our tests on a MacBook Pro with a 2.6 GHz Intel Core 2 Duo processor, 4 gigabytes of RAM, and running OS X version 10.5.6. All three language implementations were interpreters written in Objective Caml and compiled to native code with ocamlopt version 3.10.0. All benchmarks were run 100,000 times, and Table 1 summarizes the results.

In almost all cases, NOLABEL performs the fastest but permits information leaks, as on FILESYSEXPLICIT and IMPLICITFLOWTRUE benchmarks. (Note that IMPLICITFLOWFALSE leaks one bit of termination information in all three implementations, as expected.) Column three shows the slowdown of UNIVERSALLABEL over NOLABEL, which is on average more than a 2.6x slowdown, and may be unacceptable in many situations. In contrast, column five shows that the SPARSELABEL running time is only 50% of the UNIVERSALLABEL running time. Thus, our results show that the sparse labeling runs much closer to the speed of code with no labels.

### Additional Benefits

Our tests also identified an additional, unexpected benefit of the sparse labeling strategy. The SPARSELABEL implementation was noticeably less affected by differences in the style of programmer annotations. This is most visible in the results of UserPwdFine and UserPwdCoarse. The UNIVERSALLABEL implementation suffered a 50% performance penalty, even though there were fewer annotations. Whenever a field is pulled from a secure list, it must be given a label matching the list. In contrast, the SPARSELABEL implementation’s performance was comparable on both UserPwdFine and UserPwdCoarse. Thus, with a sparse labeling strategy, the programmer is to some degree insulated from performance concerns and can instead focus on the proper policy from a security perspective.

While these experimental results are for a preliminary, interpreter-based implementation, these results do suggest that sparse labeling may also provide significant benefits in a highly-optimized language implementation. We are currently adding sparse labeling into the Narcissus JavaScript implementation [Eich] and are exploring how to incorporate these ideas into the SpiderMonkey trace-based compiler for JavaScript [Gal et al. 2009].

## 6. Related Work

Denning’s seminal work [Denning 1976] outlines the general approach to dynamic information flow. Denning and Denning [1977] present a static analysis to certify programs as being information-flow secure. Sabelfeld and Myers [2003] provide an extensive survey of prior research on information flow. Among other things, they discuss various covert channels, including timing channels and resource exhaustion channels. We do not address these attacks in \(\lambda_{info}\), and instead focus only on implicit and explicit flows.

Venkatakrishnan et al. [2006] perform a hybrid of static and dynamic analysis. The static analysis is used to transform the code in order to instrument it with the appropriate runtime checks.

Several approaches use type systems for information flow analysis. Volpano et al. [1996] introduce a type system based on Denning’s model and prove its soundness. Heintze and Riecke [1998] create a simple calculus and show how it can be expanded to deal with concurrency, assignment, and integrity. Pottier and Simonet [2003] introduce type inference to ML (specifically a variation called Core ML).

Non-interference is one of the most common correctness criteria for information flow analyses. Barthe et al. [2004] discuss better approaches for analyzing non-interference, which were extended by Terauchi and Aiken [2005]. McLean [1992] shows that non-interference can be proved on a trace, rather than the usual intermediate step of a state machine. Boudol [2008] argues that non-interference is not necessarily the best property to use, specifically because it rules out programs that deliberately declassify information. Instead, the author suggests using an intensional notion of security.

Fenton [1974] presents a dynamic analysis for information flow; the analysis requires that each mutable variable has a fixed security label, which is somewhat restrictive. Our approach allows these security labels to be dynamically upgraded, while the no-sensitive-upgrade check still prohibits implicit information leaks.

A few papers highlight the challenges of working with more advanced features of languages. Banerjee and Naumann [2002] address complications caused by dynamic memory allocation for information flow analysis. King et al. [2008] highlight the problems with false alarms caused by implicit flows, and in particular exceptions. \(\lambda_{info}\) has neither of these features; extending it to address these topics remains an area for future work.

Web programming has become one of the central targets for information flow analyses. On the server side, Haldar et al. [2005] introduce dynamic taint propagation for Java. Lam et al. [2008] focus on defending against SQL injection and cross-site scripting attacks. Zheng and Myers [2008] address web encryption specifically through static information flow analysis. Dealing with information release (e.g., for password validation) is an interesting case for information flow, since certain outputs must be declassified; Both Chong and Myers [2004] and Fournet and Rezk [2008] address this.

In addition to the server-side, there has been a great deal of interest in information flow analysis for client-side programming. Primarily, this centers around Java applets and, more recently, JavaScript. Myers and Liskov [1997] use a decentralized information control model for Java applets. JFlow [Myers 1999] has become one of the standards for information flow analysis on the JVM. Chandra and Franz [2007] also combine static and dynamic analysis for the JVM, but permitting the information flow policies to be changed at runtime. Interestingly, client-side research is more focused on confidentiality, whereas server-side programming tends to address integrity concerns in more depth.

Unlike with Java code, JavaScript is not compiled in advance. Faced with this limitation, Vogt et al. [2007] add information flow analysis to JavaScript that relies on dynamic analysis whenever possible. Although we have not directly dealt with JavaScript, this is one of our central motivations.

Although static analysis has been considered indispensable in many approaches, the benefits of dynamic analysis are becoming appreciated. Le Guernic et al. [2006] discuss using dynamic automaton-based monitoring. Askarov et al. [2008] highlight the risks with Denning-style analysis. In particular, they show that if intermediary output is allowed, the assumption that only one bit of information leaks with termination is not valid. Although \(\lambda_{info}\) does not technically permit intermediary output, it will be a clear concern as we extend sparse labeling to more realistic languages. Malacaria and Chen [2008] also provide a framework for quantifying exactly how much information can leak with a given model. O’Neill et al. [2006] have highlighted some of the complications that are introduced through interactive programs. Since many web-based applications fall into this domain, this is of particular interest to us.

Our sparse labeling strategy is inspired by prior work on contracts [Findler 2002] and language interoperation [Gray et al. 2005]. In particular, each security domain can be viewed as a separate "language," and explicit labels function as proxies that permit transparent interoperation between these multiple languages.

## 7. Conclusions

With the increasing importance of JavaScript and similar languages, fast and correct information flow analysis at runtime is essential. We have shown that, through sparse labeling, it is possible to track information flow dynamically with reduced overhead. We believe these techniques may help to further safe client-side scripting.

## Acknowledgments

We thank Brendan Eich, Andreas Gal, and Michael Franz for valuable discussions on dynamic information flow analysis.

## References

- Aslan Askarov, Sebastian Hunt, Andrei Sabelfeld, and David Sands. Termination-insensitive noninterference leaks more than just a bit. In ESORICS '08: Proceedings of the 13th European Symposium on Research in Computer Security, pages 333–348, Berlin, Heidelberg, 2008. Springer-Verlag.
- Anindya Banerjee and David A. Naumann. Secure information flow and pointer confinement in a Java-like language. In IEEE Computer Security Foundations Workshop, pages 253–267. IEEE Computer Society, 2002.
- Gilles Barthe, Pedro R. D’Argenio, and Tamara Rezk. Secure information flow by self-composition. In IEEE Computer Security Foundations Workshop, pages 100–114. IEEE Computer Society, 2004.