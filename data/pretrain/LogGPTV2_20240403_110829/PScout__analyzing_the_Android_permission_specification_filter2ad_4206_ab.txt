Intents, an application may call registerReceiver with an
optional permission string that speciﬁes that the sender of
the Intent must hold that permission. Using Soot, an intra-
procedural backward ﬂow analysis is performed on the meth-
ods that call these two APIs and their variants to extract
the permission parameter and the action string assigned to
the Intent parameter. By extracting information from the
Manifest ﬁle and invocations of sendBroadcast and reg-
isterReceiver, PScout builds a global mapping between
permissions and the Intent action strings.
Since this mapping tells PScout which Intent action strings
require permissions to send or receive, PScout abstracts any
send or registration to receive such an Intent as a permis-
sion check. The type of permission that is being checked
is computed by translating the action string of the Intent
being sent or received into an Android permission.
Content Providers: Methods that implicitly access a
content provider protected by a permission are categorized
as content provider permission checks. To access a content
provider, an URI object designating the recipient content
provider is passed to a ContentResolver class, which then
provides a reference to the content provider targeted by the
URI object.
Our handling of content provider permission checks is sim-
ilar to the way we handle Intent permission checks. PScout
ﬁrst constructs a mapping of content provider URIs to per-
mission strings. Each content provider declares the permis-
sions required to read and write to it in its Manifest ﬁle, so
PScout parses the Manifest ﬁle to extract this information.
It is also possible that the content provider programmati-
cally checks the permissions of the caller.
In these cases,
PScout uses all previous identiﬁed permission checks and
performs a backward reachability analysis to see if any con-
tent provider access methods can reach one of those permis-
sion checks. If so, PScout then extracts the URI associated
with the content provider and maps that to the permission
being checked. When this phase is completed, PScout has a
mapping between content provider URIs and permissions.
Finally, to identify all actions on content providers that
require permissions, PScout identiﬁes all instances where a
content provider URI is passed to a content provider access
method. If the URI has a permission associated with it in
the mapping, the access method is abstracted into a per-
mission check. As with the checkPermission functions, the
URI may be manipulated symbolically and passed through
several variables before being passed to a content provider
method. Thus, PScout again uses Soot’s backward ﬂow
analysis to determine what the content of the URI parame-
ter is when the content provider access method is called.
3.2 Call Graph Generation
To generate the global call graph, PScout ﬁrst generates
a set of standard call graphs for each Android framework
component. PScout then combines these into a single call
graph by adding edges for RPCs that occur between Android
components, and then further incorporates Message Handler
IPCs into the graph. Message Handlers often have high
fan-in/fan-out functions so PScout reﬁnes them using ﬂow-
sensitive analysis as they are added to the call graph to
reduce the number of infeasible paths.
PScout begins with all classes in the Android framework
including application and system level classes. In this phase,
PScout only uses Soot to extract the class hierarchy for each
class, a list of methods invoked by each method and the def-
use information mentioned above. PScout then generates
its call graph from this information using Class Hierarchy
Analysis [10], which uses the following rules: (1) a virtual
call to a class can potentially targets all its subclasses; (2)
an interface call can be resolved to call any class that imple-
ments the interface and its subinterfaces; and (3) the target
method of each subclass is the closest ancestor that imple-
ments the method.
Next, PScout adds execution ﬂows across IPCs and RPCs
into its call graph.
IPCs and RPCs tend to use generic
functions to marshal and send arguments across process
boundaries, so we must reﬁne with ﬂow-sensitive analysis
to avoid too much imprecision. In Android, all RPCs ﬂow
through Android’s Binder class. A na¨ıve call graph anal-
ysis of the Binder class would give a result that any RPC
stub could ﬂow to any RPC handler and create many infea-
sible paths. To reﬁne these edges, PScout takes advantage
of the fact that Android uses the Android Interface Deﬁni-
tion Language (AIDL) to automatically generate stubs and
interfaces for all RPCs. By parsing the AIDL ﬁles that de-
scribe each RPC interface, PScout can add edges between
the corresponding interface and stub functions of each RPC.
PScout also adds Message Handlers IPCs to the call graph.
Similar to the Binder class described above, sending of Mes-
sage Handler IPCs uses a generic Handler class in Android
which would also result in many infeasible paths if handled
na¨ıvely. To send messages to a Message Handler class, the
senders must obtain a reference to the Message Handler ob-
ject. PScout performs static analysis to determine the class
220tual call to the generic ContentProvider class. PScout stops
reachability traversal when it reaches a class or subclass of
ContentProvider. At this point, PScout infers the URI
string of the content provider and associates that URI with
the permission of the permission check where the reachabil-
ity analysis started. Thus, access to the ContentProvider
found on the reachability path is abstracted to a content
provider permission check and PScout iterates the reacha-
bility analysis until it converges.
Finally, documented APIs often have a generic parent
class that is called by many other methods. As a result,
once a documented API is reached, calls to its parent class
methods are excluded from the analysis.
4. EVALUATION
Before we rely on the speciﬁcation extracted by PScout,
we wish to evaluate the accuracy of the permission spec-
iﬁcation by measuring the completeness and soundness of
the mapping produced by PScout. We deﬁne completeness
as the fraction of mappings that PScout ﬁnds over the to-
tal number of mappings that exist. We deﬁne soundness as
the fraction of correct mappings over the total number of
mappings found by PScout, where a correct mapping is a
mapping between an API call and a permission such that
there exists some invocation of that API requiring the per-
mission. The opposite of a correct mapping is an incorrect
mapping, which is a mapping between an API and a permis-
sion extracted by PScout where no invocation of that API
could possibly require the mapped permission.
Incorrect
mappings can occur because PScout uses path-insensitive
analysis and thus can include impossible paths in its reach-
ability analysis.
Unfortunately, no “ground truth” exists for the Android
permission speciﬁcation, so we cannot precisely measure the
soundness and completeness. Instead, we estimate the qual-
ity of these by measuring them relative to existing sources
of Android permission information. First, we compare with
the permissions declared by the developers of a corpus of
1,260 applications extracted from the Google Android mar-
ket, which we further reﬁne using our Android UI fuzzer.
Second, we compare against a permission mapping produced
by API fuzzing in the Stowaway project [14]. Because Stow-
away actually executes every path it ﬁnds, it cannot have
any impossible paths like PScout. As a result, we expect
PScout to be more complete, but slightly less sound than
Stowaway. Even though PScout works on any version of An-
droid, Stowaway’s speciﬁcation is for Android 2.2 so for the
purposes of evaluating PScout’s accuracy, all experiments in
this section are performed on Android 2.2 as well.
4.1 Application UI Fuzzer
Our application UI fuzzer exercises the UI of Android ap-
plications and logs the resultant API calls and permission
checks. In contrast to Stowaway, which fuzzes the Android
API directly, we indirectly fuzz the API by fuzzing applica-
tions that use the API. While it is diﬃcult to obtain a more
complete coverage of the API because we are constrained
to the APIs that the applications use, fuzzing applications
has the advantage that we obtain realistic sequences and
parameters to API calls.
Our fuzzing infrastructure consists of a single fuzzer vir-
tual machine (VM) and several Android VMs. For perfor-
mance, we use an x86 port of Android. To fuzz an applica-
Figure 2: A reachability path starts from a permis-
sion check in the system processes. Not all permis-
sions can reach a documented API, meaning that
some permission checks can only be reached from
undocumented APIs.
name of the Message Handler object, which can be used to
link the method sending the message to the method receiv-
ing the message.
In addition to linking the senders and receivers of mes-
sages, PScout also performs simple ﬂow-sensitive analysis
for these IPCs. A large number of message handlers will
use an input passed to them by the sender to index into
a table of handler functions and call the indexed function.
PScout performs intra-procedural backward ﬂow analysis on
the sender to obtain all possible values the index may take.
The call graph is then reﬁned to only include edges from
that call site to the speciﬁc functions that can be invoked
by the receiver in its lookup table.
3.3 Reachability Analysis
Finally, PScout performs a backward reachability analy-
sis starting from the permission checks on the generated call
graph. PScout creates a mapping for every method that
can be reached via a path from a permission check. How-
ever, not every method is an API that can be called by a
third party application – permission protected resources typ-
ically reside in system services, which can only be reached
by third party applications via an RPC or through IPCs
using intents. Thus, any path from a permssion check that
does not cross a process boundary is ﬁltered from PScout’s
speciﬁcation. Figure 2 shows an example of a path identiﬁed
by the reachability analysis.
The backward reachability analysis continues until one of
three stopping conditions is met. First, any calls to check-
Permission and its wrappers always succeed if they are be-
tween calls to clearCallingIdentity and restoreCalling-
Identity because these functions temporarily set the UID
to the system services. As a result, any call path that passes
through a function called between these two functions will
always pass a permission check. Thus, it is not necessary to
perform any reachability analysis beyond one of these points
and any method called between the clearCallingIdentity
and restoreCallingIdentity functions is a stopping point.
Second, access to a content provider is made with a vir-
Binder Application Process System Process Documented API RPC Caller RPC Callee Permission Check Undocumented API(s) 221tion, the fuzzer VM ﬁrst installs the application onto one of
the Android VMs using the standard Android Debug Bridge
(ADB). It then proceeds to fuzz the application using an it-
erative process. Initially, the fuzzer receives UI elements, as
well as the mapping from application names to PIDs and
UIDs, from a system service we install inside each Android
VM. It then proceeds to classify the UI using several screen-
speciﬁc handlers. Each handler performs two actions. First,
it checks if the UI matches the type of screen it is meant to
handle. For example, the Login Screen Handler checks that
the UI has a username ﬁeld and a password ﬁeld and that
there is at least one button to click. Second, it generates
a candidate action for the screen. To continue the example
of the Login Screen Handler, it would heuristically identify
the username and password ﬁelds, and return a sequence of
actions that would ﬁll in the username and password for ac-
counts we have created on various services (we use the same
username and password on each service for simplicity) and
then click the heuristically identiﬁed login button. Finally,
if more than one handler returns success on classiﬁcation,
the fuzzer selects the best action to perform based on a pre-
deﬁned ranking of actions and a history of previous actions
taken for similar screens.
4.2 Completeness
To evaluate the completeness of PScout’s permission spec-
iﬁcation, we extract a list of API calls made by an applica-
tion and feed that to PScout’s mapping to produce a list
of required permissions. We extract the API calls within
an application using a combination of static analysis and
our UI fuzzer. We need the UI fuzzer to enhance our static
extraction because applications may execute API calls that
are not present in the static image of the application by
dynamically calling methods using Java reﬂection for exam-
ple. We note that like Stowaway, our application analysis
may be incomplete because it cannot catch all APIs that are
invoked through Java reﬂection. Therefore, the overdecla-
ration and underdeclaration measurements presented in this
section should not be interpreted as absolute measures but
only as measures of the relative accuracy of PScout versus
Stowaway.
For each application, we compare the list of permissions
produced by PScout with those speciﬁed by the developer
in the application’s Manifest ﬁle. If we ﬁnd a permission in
the developer declared list that is not in the PScout gen-
erated list, this indicates that either the developer overde-
clared that permission or PScout is missing a mapping be-
tween an API and that permission. To distinguish between
these two cases we substitute the developer’s permission list
with PScout’s more constrained permission list and use our
UI fuzzer to exercise the application. If the application does
not experience a permission error with PScout’s permission
list, it can either be because the fuzzer did not successfully
trigger a permission error, or that no permission error is
possible because the developer overdeclared the permissions
required for their application.
If a permission error does
occur, this indicates that PScout is missing an API to per-
mission mapping.
When we perform this experiment, we ﬁnd that 543 out
of 1,260 applications declare at least one “extra” permission
that is not in the list produced by PScout. While many ap-
plications overdeclare, most do not do so severely – 53% of
applications overdeclare by one permission and 95% of appli-
Figure 3: Histogram of UI fuzzer coverage for API
calls and UI elements.
Figure 4: Scatter plot showing relationship between
fuzzer coverage and application size
cations overdeclare by less than 4 permissions. These num-
bers agree with the measurement of overdeclaration when
Stowaway’s speciﬁcation is applied to the same set of API
calls extracted from our corpus of applications, despite us-
ing a completely diﬀerent method for extracting the per-
mission speciﬁcation (564 overdeclaring apps, 54% and 95%
respectively). We conjecture that our slightly lower level of
overdeclaration overall is a result of PScout’s mapping being
more complete than Stowaway’s.
We ﬁnd that our fuzzer was not able to cause a permis-
sion error in any of these applications when executed with
PScout’s more constrained list of permissions. While our
UI fuzzer obtains good coverage in general, it is not able
to do so in some cases. This can be due to several factors,
such as the application requiring functionality not present on
the x86 port of Android (telephony, SMS, GPS) or that cer-
tain application behavior is only triggered by non-UI events,
which would not be exercised by the fuzzer (network packet
arrival, system broadcast, intent from third party applica-
tions). We use two metrics to measure the coverage we ob-
tained with our UI fuzzer. First, we statically count the
number of UI elements deﬁned in the Android XML layout
ﬁle and then track which of those UI elements are seen by the
fuzzer at run time. Second, we also track the number API
calls exercised by the fuzzer as a percentage over the stati-
10%20%30%40%50%60%70%80%90%100%020406080100120140160180APIUI ElementsCoverageApplication Count0%10%20%30%40%50%60%70%80%90%100%050100150200250300350400450500APIUI ElementsCoverageMetric Total Count222cally identiﬁed API calls in each application. We summarize
the results in Figure 3. Figure 4 gives a scatter plot showing
the relationship between coverage and the number of UI el-
ements and APIs in an application. The broad distribution
shows that coverage of our fuzzer is relatively independent
of the size and complexity of the application and is likely
more dependent on the other factors mentioned above. As a
whole, the UI fuzzer is able to obtain coverage of over 70%
for both metrics on half of the fuzzed applications.
As a second evaluation of completeness, we directly com-
pare the speciﬁcation generated by PScout against that gen-
erated by Stowaway’s API fuzzing. Because API fuzzing
tends to be incomplete (the authors could only successfully
execute 85% of the API calls they were able to ﬁnd), we
expect and conﬁrm that PScout’s mapping is a superset
of Stowaway’s mapping. Moreover, because we are able to
identify and cover many more API calls with our static anal-
ysis than Stowaway – we identify 17,218 mappings while
Stowaway identiﬁes only 1259. Stowaway’s incompleteness
is likely due to the fuzzer’s inability to ﬁnd and exercise all
APIs in Android and thus produce mappings for those APIs.
Despite the much larger set of mappings that PScout ﬁnds,
PScout does not ﬁnd signiﬁcantly more overdeclaration than
Stowaway because many of the mappings that PScout has
are for undocumented APIs. As we explain in Section 5,
applications do not use many undocumented APIs, so the
omissions of these APIs from Stowaway’s mapping does not
result in false detection of overdeclaration by Stowaway on
real applications. However, the inclusion of these undocu-
mented APIs in PScout’s mapping allows us to perform a
more complete analysis of Android’s permission map.
We take our evaluation against both Android application
developers and Stowaway’s API fuzzing results as evidence
that the mapping produced by PScout is fairly complete.
4.3 Soundness
We determine the number of incorrect mappings in PSco-
ut’s speciﬁcation by examining applications where PScout’s
permission list included a permission that was not present
in the developer list of permissions. In total there are 1072
applications where PScout found “extra” permissions that
are not in the developer’s list. When we convert the extra
permissions into mappings by ﬁnding the API that caused
PScout to request the permission in the ﬁrst place, we ﬁnd
292 unique mappings exercised by the applications, out of
which 31 (11%) do not produce a correct permission in any
application.
However, not all 31 mappings are necessarily incorrect.
Missing permissions in an application’s Manifest could be
caused by developers forgetting to declare a required per-
mission or by PScout listing a permission that an API re-
quires in certain contexts, but the developer can safely ex-
clude because they know their application never calls the
API in those contexts. When run on the same corpus of ap-
plications, Stowaway, ﬁnds 924 underdeclaring applications,
which exercise 194 API mappings. Of these mappings only
7 (4%) mappings do not produce a correct permission in any
application. Because Stowaway uses API fuzzing, it cannot
have any false mappings – every mapping found by them
is accompanied by an execution that demonstrates that the
call to the API leads to a check for a certain permission.
We intersect PScout’s 31 extra mappings with Stowaway’s
mapping and remove any mappings that appear in Stow-
away’s speciﬁcation leaving 24 (8%) possibly incorrect map-
pings. We then manually examine some of the remaining
mappings and further remove 4 mappings: 1 mapping has
a conditional check to ensure the application holds at least