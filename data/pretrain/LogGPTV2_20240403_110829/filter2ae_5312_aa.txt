# 一、前言
前段时间总是发现客户那边出现了内存马弄的我头大，当时好像是一个脚本小子拿着[SummerSec](https://github.com/SummerSec)师傅的[ShiroAttack2](https://github.com/SummerSec/ShiroAttack2)工具打的，客户那边正好shiro使用的默认密钥存在反序列化漏洞，然后被*穿了，当时本来说是准备研究以下那个工具学习一波，后来工作一堆其他杂事一拖再拖，最近想起来了，就系统的学习了下java内存马这块的技术。
## 本文主要内容
  * 基于动态注册Servlet组件的内存马实现和分析
  * 基于动态注册框架则见的内存马的实现和分析
  * Javaagent技术以及基于Javaagent和Javassist技术的内存马实现和分析
  * 冰蝎、哥斯拉的内存马实现
  * 内存马的检测查杀技术
  * 内存马反查杀技术
  * 内存马的”持久化“ 复活技术
# 二、技术铺垫
## 1、Tomcat相关
### 1）、Tomcat 中有 4 类容器组件：
Engine、Host 、Context 、 Wrapper；关系如下
  * Engine（org.apache.catalina.core.StandardEngine）：最大的容器组件，可以容纳多个 Host。
  * Host（org.apache.catalina.core.StandardHost）：一个 Host 代表一个虚拟主机，一个Host可以包含多个 Context。
  * Context（org.apache.catalina.core.StandardContext）：一个 Context 代表一个 Web 应用，其下可以包含多个 Wrapper。
  * Wrapper（org.apache.catalina.core.StandardWrapper）：一个 Wrapper 代表一个 Servlet（ **重点** ：上文提到的动态注册Servlet组件的内存马技术，想要动态的去注册Servlet组件实现过程中的关键之一就是如何获取Wrapper对像，再往上也就是如何获取到Context对象，从而掌握整个Web应用）。
### 2）、Servlet的三大基础组件：
Servlet、Filter 、Listener ；处理请求时，处理顺序如下：
请求 → Listener → Filter → Servlet
  * Servlet: 最基础的控制层组件，用于动态处理前端传递过来的请求，每一个Servlet都可以理解成运行在服务器上的一个java程序；生命周期：从Tomcat的Web容器启动开始，到服务器停止调用其destroy()结束；驻留在内存里面
  * Filter：过滤器，过滤一些非法请求或不当请求，一个Web应用中一般是一个filterChain链式调用其doFilter()方法，存在一个顺序问题。 
  * Listener：监听器，以ServletRequestListener为例，ServletRequestListener主要用于监听ServletRequest对象的创建和销毁,一个ServletRequest可以注册多个ServletRequestListener接口（都有request来都会触发这个）。
### 3）、Tomcat中Context对象的获取
对于Tomcat来说，一个Web应用中的Context组件为org.apache.catalina.core.StandardContext对象，前文也有提到我们在实现
**通过动态注册Servlet组件的内存马技术**
的时候，其中一个关键点就是怎么获取器Context对象，而该对象就是StandContext对象。那么我们可以通过哪些途径得到StandContext对象那呢？
#### 有requet对象的时候
>
> Tomcat中Web应用中获取的request.getServletContext是ApplicationContextFacade对象。该对象对ApplicationContext进行了封装，而ApplicationContext实例中又包含了StandardContext实例，所以当request存在的时候我们可以通过反射来获取StandardContext对象：
>
>> request.getServletContext().context.context
    ServletContext servletContext = request.getServletContext();//获取到applicationcontextFacade  
    Field fieldApplicationContext = servletContext.getClass().getDeclaredField("context");//利用反射获取ApplicationContext对象  
    fieldApplicationContext.setAccessible(true);//使私有可获取  
    ApplicationContext applicationContext = (ApplicationContext) fieldApplicationContext.get(servletContext);//获取到ApplicationContext对象  
    Field fieldStandardContext = applicationContext.getClass().getDeclaredField("context");//利用反射获取StandardContext对象  
    fieldStandardContext.setAccessible(true);//使私有可获取  
    StandardContext standardContext = (StandardContext) fieldStandardContext.get(applicationContext);//获取到StandardContext对象
#### 没有request对象的时候
1、不存在request的时候从currentThread中的ContextClassLoader中获取（适用Tomcat 8，9）
没有request对象，那就先找出来一个request对象即可，由于Tomcat处理请求的线程中，存在ContextClassLoader对象，而这个对象的resources属性中又保存了StandardContext对象：
    org.apache.catalina.loader.WebappClassLoaderBase webappClassLoaderBase =(org.apache.catalina.loader.WebappClassLoaderBase) Thread.currentThread().getContextClassLoader();
    StandardContext standardContext = (StandardContext)webappClassLoaderBase.getResources().getContext();
2、ThreadLocal中获取
三梦师傅找到的tomcat全系列通用get StandardContext技术
参考地址：
3、从MBean中获取
之前看到过奇安信A-TEAM写的一篇内存马研究的文章，里面有提到利用MBean来实现获取StandardContext方法,但是要知道项目名称和host名称，参考地址：
简单实现：
    JmxMBeanServer jmxMBeanServer = (JmxMBeanServer) Registry.getRegistry(null, null).getMBeanServer();
    // 获取mbsInterceptor
    Field field = Class.forName("com.sun.jmx.mbeanserver.JmxMBeanServer").getDeclaredField("mbsInterceptor");
    field.setAccessible(true);
    Object mbsInterceptor = field.get(jmxMBeanServer);
    // 获取repository
    field = Class.forName("com.sun.jmx.interceptor.DefaultMBeanServerInterceptor").getDeclaredField("repository");
    field.setAccessible(true);
    Object repository = field.get(mbsInterceptor);
    // 获取domainTb
    field = Class.forName("com.sun.jmx.mbeanserver.Repository").getDeclaredField("domainTb");
    field.setAccessible(true);
    HashMap domainTb = (HashMap)field.get(repository);
    StandardContext NamedObject nonLoginAuthenticator = domainTb.get("Catalina").get("context=/bx_test_war_exploded,host=localhost,name=NonLoginAuthenticator,type=Valve"// change for your
## 2、Javaagent技术和Javassist
#### Javassist技术
javassit直接使用java编码的形式，而不需要了解虚拟机指令，就能动态改变类的结构，或者动态生成类。
其主要就是使用四个类：ClassPoll,CtClass,CtMethod,CtField
具体使用的话看下面这个和javaagent一起实现的注入小案例：
要注意的几个点就是：
  * 所引用的类型，必须通过ClassPool获取后才可以使用代码块中所用到的引用类型，
  * 使用时必须写全量类名即使代码块内容写错了，它也不会像eclipse、idea等开发工具一样有提示，它只有在运行时才报错
  * 动态修改的类，必须在修改之前，jvm中不存在这个类的实例对象；修改方法的实现必须在修改的类加载之前 进行
#### Javaagent技术
学习内存马的时候，遇到了的javaagent技术也就是instrumentation，上文提到的第三种java内存马实现的方式之一就是使用agent技术实现，在虚拟机层次上实现一些类的修改和重加载，从内存马到javaagent技术的学习感觉就是管中窥豹，这个技术很火，应用的场景也比较多：
  * Java内存马的实现（这个往前回溯到最开始的利用的话就比较老了，18年的时候冰蝎的作者rebeyond师傅在其开源的项目memshell中就提到了）
  * 软件的破解，如专业版bp、专业版的IDEA都是通过javaagent技术实现的破解
  * 服务器项目的热部署，如jrebel，和一些实时监测服务请求的场景XRebel
  * Java中的这两年比较火的RASP技术的实现以及IAST，如火绒的洞态等都利用了javaagent技术
##### Javaagent的分类：
我倾向于从gent加载的时间点来将javaagent分为两类：preagent和agentmain
preagent：
>
> jdk5引入，使用该技术可以生成一个独立于应用程序的代理程序agent，在代理的目标主程序运行之前加载，用来监测、修改、替换JVM上的一些程序，从而实现AOP的功能。  
>  运行时间：在主程序运行之前执行
agentmain:
> jdk6引入，agentmain模式可以说是premain的升级版本，它允许代理的目标主程序的jvm先行启动，再通过java
> stools的`attach`机制连接两个jvm  
>  运行时间：在主程序运行之后，运行中的时候执行
由于内存马的注入场景通常是后者（agentmain），这里就主要说下后者的使用：
##### agentmain实例
原理：Agent里面的agentmain()方法里面，调用Instrumentation对象的addTransformer方法，传入自定义的XXXTransformer对象，该对象要实现ClassFileTransformer接口，并重写其transform（）抽象方法，在jvm在运行main前加载解析系统class和app的class的时候调用ClassFileLoadHook回调从而执行transform函数，在该方法中对指定类的加载进行一些修改。
拿我写的一个小demo 实现 agentmain项目实例来说：
1、首先定义一个Peoples类，写一个say方法：
    package priv.agentmaininjectdemo;
    public class Peoples {
            public void say(){
                System.out.println("hello");
            }
    }
2、定义一个MainforRun类，实现正在运行的java应用程序，也就是最后被注入的程序；就是一个简单的循环调用say方法
    package priv.agentmaininjectdemo;
    public class MainforRun {
        public static void main(String[] args) throws Exception{
            while (true){
                new Peoples().say();
                Thread.sleep(5000);
            }
        }
    }
3、构造agent程序，定义一个Agenthings类，实现agentmain方法，并出入两个参数，参数类型分别是java.lang.String 和
java.lang.instrument.Instrumentation,第一个参数是运行agent传入的参数，第二个参数则是传入的Instrumentation对西安，用来实现添加转换器以及进行转换的把柄，通过调用Instrumentation的addTransformer来添加自定义的转换器，其实就是通过Instrumentation的retransformClass或者redefinessClass实现对类的字节码修改，区别就是一个时修改一个时替换，这里我们使用retransformClass方法来实现，这两个方法的实现还有一个比较大的区别，涉及到内存马的检测技术的问题，后文在内存马的检测那块将提到。
    package priv.agentmaininjectdemo;
    import java.lang.instrument.Instrumentation;
    import java.lang.instrument.UnmodifiableClassException;
    public class Agentthing {
        public static void agentmain(String agentArgs, Instrumentation inst)
                throws UnmodifiableClassException {
            inst.addTransformer(new PeoplesTransformer(), true);
            inst.retransformClasses(Peoples.class);
            System.out.println("retransform success");
        }
    }
4、实现自定义的PeoplesTransformer类，该类实现ClassFileTransformer接口，实现其抽象方法transformer()方法：
可以看到官方文档上是这么描述该方法的：
传入的四个参数：其中两个参数：通过className我们可以判断来控制任意类的重载或修改，最后return修改后的类的class 的byte数组即可。
其实现如下:动态修改相关类字节码内容时，对字节码操作的方式方式有两种：
1、使用ASM指令层次对字节码进行操作，操纵的级别是底层JVM的汇编指令级别，比较复杂，要动jvm的汇编指令。
​ 优点：性能高
​ 缺点：复杂，对使用者要求高
2、使用javassist技术其直接使用java编码形式，从而改变字节码
​ 优点：简单，直接java编码即可
​ 缺点：性能低，jvm要将java编码再重新转换成汇编指令
因为对ASM JAVA汇编指令了解比较少，这里我们选择javassist来实现，
    package priv.agentmaininjectdemo;
    import javassist.ClassClassPath;
    import javassist.ClassPool;
    import javassist.CtClass;
    import javassist.CtMethod;
    import java.lang.instrument.ClassFileTransformer;
    import java.security.ProtectionDomain;
    public class PeoplesTransformer implements ClassFileTransformer {
        @Override
        public byte[] transform(ClassLoader loader, String className, Class classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) {
            if(!className.startsWith("priv/agentmaininjectdemo/Peoples"))//change for your
            {
                return  classfileBuffer;
            }
            try{
            ClassPool cp = ClassPool.getDefault();
            ClassClassPath classPath = new ClassClassPath(classBeingRedefined);  //get current class's classpath
            cp.insertClassPath(classPath);  //add the classpath to classpool
            CtClass cc = cp.get("priv.agentmaininjectdemo.Peoples");
            CtMethod m = cc.getDeclaredMethod("say");
                System.out.println("changing class method to add some code ........");
            m.addLocalVariable("elapsedTime", CtClass.longType);
            m.insertBefore("System.out.println(\"injected by agent\");");
            byte[] byteCode = cc.toBytecode();//after toBytecode() the ctClass has been frozen
            cc.detach();
            return byteCode;  //change
            }
            catch (Exception e){
                e.printStackTrace();
                System.out.println("falied change");
                return null;
            }
        }
    }
5、准备好了要注入的程序agent，被注入程序main，此时还需要一个注入程序，这里我们通过java tools来实现对jvm的操作：
简单来说，就是通过java
tools中的VirtualMachine对象的loadAgent来注入agent程序；VirtualMachine是通过pid来获取的，pid通过命令jps来找到；
    package priv.agentmaininjectdemo;
    import com.sun.tools.attach.VirtualMachine;
    import java.io.BufferedReader;
    import java.io.InputStream;
    import java.io.InputStreamReader;
    import java.util.Scanner;
    public class Attachthings {
        public static void main(String[] args) throws Exception{
    //        System.out.println(getjarpid());
            //agentfordemo-1.0-SNAPSHOT.jar
            String pid = getjarpid().trim();
    //        System.out.println(pid);
            VirtualMachine vm = VirtualMachine.attach(pid);
            vm.loadAgent("D:\\githubprogram\\Testforjavaagent\\agentfordemo-2.0-SNAPSHOT-jar-with-dependencies.jar");
        }
        private static String getjarpid() throws Exception{
            Process ps = Runtime.getRuntime().exec("jps");
            InputStream is = ps.getInputStream();
            InputStreamReader isr = new InputStreamReader(is);
            BufferedReader bis = new BufferedReader(isr);
            String line;
            StringBuilder sb = new StringBuilder();
            String result = null;
            while((line=bis.readLine())!=null){
                sb.append(line+";");
            }
            String  [] xx= sb.toString().split(";");
            for (String x : xx){
                if (x.contains("jar"))
                {
                    result=x.substring(0,x.length()-3);
                }
            }
            return result;
        }
    }
三个程序都准备好了：1、主程序 MainforRun ；2、agent程序 Agentthings； 3、注入程序Attachthings
将三个程序打包成jar，这里就不手动打包了，直接利用maven的插件 **maven-assembly-plugin**
这个插件可以将依赖都打包进去，但是不能打包本地依赖，本地依赖特殊处理下。
pom.xml: