e
n
o
d
n
u
o
b
-
r
e
w
o
l
n
γ∗
0
D-refresh
D-refresh
M-set-state
next-ror
M-get-state
D-refresh
Figure 5.2 – Entropy Estimates in MROB(γ∗, λ)
M-get-state
M-set-state
D-refresh
D-refresh
M-set-state
next-ror
5.2 Limitation of the Initial Security Property
We show that it is possible to construct a robust pseudo-random number generator with input
(Deﬁnition 29) that never resists a single bit corruption.
Consider G = (setup, refresh, next) a robust pseudo-random number generator with input of
internal state S, and G0 = (setup0, refresh0, next0) a second pseudo-random number generator with
input of internal state S0 = S||b where b is a single bit, deﬁned with the following algorithms:
• refresh0(S0, I) = refresh(S, I)||1 (i.e. S ← refresh(S, I) and b ← 1)
— 79 —
Chapter 5. Robustness Against Memory Attacks
• next0(S0) = next(S) if b = 1, next0(S0) = 0 if b = 0
Then generator G0 is robust since, as soon as one refresh procedure is executed the bit b is set
to 1 and the generator G0 works exactly as G does when the internal state is not compromised.
However, it is obviously not secure under a corruption of the single bit b.
To achieve our new security property, we need to deﬁne a new property named "preserving
security under partial state corruption".
Intuitively, it states that if the state gets partially
compromised between two next calls, such that the estimated entropy inside the internal state
remains above the threshold γ∗, then the generator should remain safe. Below we describe the
notions of preserving security against memory attacks and recovering security against memory
attacks, both adapted from the preserving security and recovering security deﬁned in Chapter 4.
5.3 Preserving and Recovering Security Against Memory At-
tacks
Preserving Security Against Memory Attacks. We now describe our ﬁrst security prop-
erty. It states that if S0 starts uncompromised and gets updated with calls to algorithms refresh,
interleaved with calls to M-set-state or M-get-state, such that the state remains uncompromised,
the output of next should be undistinguishable from random. The security game MPRES uses
proc. D-refresh
k ← k + 1;
S = refresh(S, Ik);
IF c  i (for Gi) or ctr > i + 1 (for Gi+1), the challenger behaves as in
game G0.
is a modiﬁcation of game Gi that uses the following procedures.
Game Gi+ 1
Procedure initialize sets parameters as in Gi and a new ﬂag ns to true. Procedures ﬁnalize and
D-refresh are the same as for the previous games. Procedures M-set-state and M-get-state are
diﬀerent: if c < γ∗ during the procedure, the ﬂag ns is set to false. Finally procedure next-ror is
also diﬀerent: for each uncompromised next query, ctr is incremented, and if ctr ≤ i or ctr = i+1
and ﬂag ns = true, the challenger generates a random couple (S1, R1) ∈ {0, 1}n+‘ and returns
R1 to A. If ctr = i + 1 or ns = false, the challenger behaves as in game G0.
As in Section 4.3, we partition the sequence of next-ror queries done by an adversary A in this
sequence of games into two sets: a next-ror query is said uncompromised if c ≥ γ∗, and it is
compromised otherwise. We then further partition the set of uncompromised next-ror queries
into two subsets:
. Game Gi+ 1
2
2
— 82 —
5.3. Preserving and Recovering Security Against Memory Attacks
• First set : c ≥ γ∗ throughout the entire period between the previous next-ror query and
the current one. We name this next-ror query preserving.
• Second set : c < γ∗ in the period between the previous next-ror query and the current one.
We name this next-ror query recovering.
2
2
2, which ﬁnalizes the proof.
In proposition 6, we show by reduction to the preserving security that | Pr[Gi+ 1
= 1] − Pr[Gi =
1]| ≤ εp for all i ∈ {0, . . . , qn − 1} and in proposition 7, we show by reduction to the recovering
security that | Pr[Gi+1 = 1] − Pr[Gi+ 1
= 1]| ≤ εr. Combining Propositions 6 and 7, we obtain
that | Pr[(G0) = 1] − Pr[(Gqn) = 1]| ≤ qn · (εr + qs · εp). Moreover, Gqn is independent of the
challenge bit b0 and therefore Pr[(Gqn) = 1] = 1
Let us now prove the two reductions. We reuse the notion of mRED query introduced in Section
4.3, to identify the last query done by the adversary A during a recovering process, for which
the the counter c has been set to 0. The main diﬀerence between the proof presented below
and the one in Section 4.3 is that to identify the mRED query in Chapter 4, the adversary only
needs to identify the last call to a get-state or to a set-state or to a compromised next-ror query,
whereas here, the adversary needs to select between qs M-get-state, M-set-state queries. This
explains why the bound in Proposition 7 is equal to qs · εr here and is equal to εr in Section 4.3.
Reduction to the preserving security. We build an adversary (A0,D), with advantage εp
in game MPRES, that uses (A,D) as a subroutine. In particular, it will simulate the game Gi
) and will provide (A,D) inputs that follows the inputs distribution in the games Gi
(or Gi+ 1
and Gi+ 1
.
Proposition 6. Assuming that G has (t, qr, qs, γ∗, λ, εp)-preserving security against memory