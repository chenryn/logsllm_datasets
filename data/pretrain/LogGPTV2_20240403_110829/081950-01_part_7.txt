1 # encoding=utf-8
2 import copy
3 object1 = ["Will", 28, ["Python", "C#", "JavaScript"]]
4 # 对象复制
5 object2 = copy.deepcopy(object1)
6 print(f"id of object1 {id(object1)}")
7 print(object1)
8 print([id(ele) for ele in object1])
9
10 print(f"id of object2 {id(object2)}")
11 print(object2)
12 print([id(ele) for ele in object2])
13
14 # 尝试改为object1 ,然后看object2的变化
15 object1[0] = "Wilber"
16 object1[2].append("CSS")
17 print("更改object1之后")
18 print(f"id of object1 {id(object1)}")
19 print(object1)
20 print([id(ele) for ele in object1])
21
22
23 print(f"id of object2 {id(object2)}")
24 print(object2)
25 print([id(ele) for ele in object2])
运行结果如图1.31所示。
图1.31 深复制操作
48
第1章 自动化运维与Python
从运行结果来看，这个非常容易理解，就是创建了一个与之前对象完全独立的对象。通过
copy模块中的深复制函数deepcopy()对object1指向的对象进行深复制，然后深复制生成的新
对象赋值给object2变量。与浅复制类似，深复制也会创建一个新的对象，这个例子中"object1
is not object2"，但是对于对象中的元素，深复制都会重新生成一份（有特殊情况，下面会说明），
而不是简单地使用原始元素的引用（内存地址）。也就是说，" object1[i] is not object2[i]"。
复制有一些特殊情况：
 对于原子数据类型（如数字、字符串、只含不可变数据类型的元组）没有复制一说，
赋值操作相当于产生一个新的对象，对原对象的修改不影响新对象。简言之，赋值操
作与浅复制和深复制的效果是一样的。
 如果元组变量只包含原子类型对象，深复制就不会重新生成对象，这其实是 Python
解释器内部的一种优化机制，对于只包含原子类型对象的元组，如果它们的值相等，
就在内存中保留一份，类似的还有小整数从-5~256。在内存中只保留一份，可节省内
存，提高访问速度，如图1.32所示。
图1.32 元组的深复制
1.6
多个例子实战 Python 编程
本节通过几个实用的例子来复习Python语法。
1.6.1 实战 1：九九乘法表
本例技术点：打印小学乘法口诀表（练习for循环、字符串格式化）。
我们看到的九九乘法口诀表一般如图1.33所示。
49
Python自动化运维快速入门
图1.33 九九乘法口诀表
第一步：定义乘数x，即每一行中不变的那个数；定义被乘数y，即每一行的乘以乘数x，
依次递增1，但不超过x的数。
第二步：print 被乘数、乘数、 积的相关信息，当乘数增加1时，输出一个换行。
第三步：格式化输出最大长度为6的字符串，右补空格，以显示整齐。
代码如下（example_99.py）：
1 # -*- coding: utf-8 -*-
2 for x in range(1,10): #x是乘数
3 for y in range(1,x+1): #y是被乘数
4 print(f"{y}x{x}={x*y}".ljust（6）,end=' ') #使用新特性格式化字符串，也可以使
用format,%等格式化，其中ljust（6）左对齐，长度为6，右补空格
5 print("") #打印一个换行
保存为99.py，在命令窗口输入python example_99.py，运行结果如图1.34所示。
图1.34 运行结果
1.6.2 实战 2：发放奖金的梯度
企业发放的奖金根据利润提成，利润(I)低于或等于10万元时，奖金可提10%；利润高于
10万元低于20 万元时，低于10万元的部分按10%提成，高于10万元的部分可提成7.5%；
20万元到40万元之间时，高于20万元的部分可提成5%；40万元到60万元之间时，高于40
万元的部分可提成3%；60万元到100万元之间时，高于60万元的部分可提成1.5%；高于100
万元时，超过100万元的部分按1%提成。计算给定的利润I，应发奖金总数。
50
第1章 自动化运维与Python
本例技术点：利用数组（列表）来分界和定位。
代码如下（reward_demo.py）：
1 # -*- coding: UTF-8 -*-
2
3 arr = [1000000, 600000, 400000, 200000, 100000, 0] #定义利润列表
4 rat = [0.01, 0.015, 0.03, 0.05, 0.075, 0.1] #定义提成比例列表，与利润列表一一对应
5
6
7 while True:
8 i = input('净利润(q退出): ') #获取用户输入
9 if i == 'q':
10 exit（0） #退出程序
11 if not i.isdigit(): #如果不是数字，则重新开始循环，重新输入数据
12 continue
13 reward = [] #定义奖金列表，存放每一区间计算的奖金
14 print("奖金为：",end='') #不换行
15 I=int(i)
16 for idx in range(0, 6):
17 if I > arr[idx]:
18 reward.append ((I - arr[idx]) * rat[idx])#将每一区间的奖金存放在奖金列表中
19 I = arr[idx]
20 reward.reverse() #逆序奖金列表，目的为方便输出
21 if(len(reward)) == 1: #如果只有一个，直接输出
22 print(reward[0])
23 else:
24 print(" + ".join([str(num) for num in reward]),"=",sum(reward))
#输出每个区间的奖金，并求和
执行python reward_demo.py 依次输入利润数据，结果如图1.35所示。
图1.35 运行结果
通过本例，我们可以练习 Python 的输入输出、列表的运用、continue 的作用、列表推导
式等。
1.6.3 实战 3：递归获取目录下文件的修改时间
列出某一文件目录下的所有文件（包括其子目录文件），打印修改时间，距当前时间有几
天几时几分。
本例技术点：使用标准库os模块的os.walk方法，使用datetime模拟计算时间差。
51
Python自动化运维快速入门
代码如下：
1 # encoding=utf-8
2
3 import os
4 import datetime
5
6 # 循环e:\job目录和子目录， r表示原始字符串，不含转义字符
7 print(f"当前时间：{datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
8 for root, dirs, files in os.walk(r"e:\job"):
9 for file in files:
10 # 获取文件的绝对路径
11 absPathFile = os.path.join(root, file)
12 # 获取修改时间并转化为datetime类型
13 modifiedTime =
datetime.datetime.fromtimestamp(os.path.getmtime(absPathFile))
14 now = datetime.datetime.now() # 获取当前时间
15 diffTime = now - modifiedTime # 获取时间差
16 # 打印相关信息，ljust(25)表示该字符串，若不足25字节，则右补空格
17 # diffTime.days指间隔的天数，diffTime.seconds表示间隔除了天数外还剩余的秒数，
将其转化为时和分
18 # diffTime.seconds//3600： 对3600秒取整表示小时数
19 # (diffTime.seconds%3600)//60：先对3600秒取余，再对60秒取整，表示分钟数
20 # print(f"{absPathFile}".ljust(25), f"修改时间
[{modifiedTime.strftime('%Y-%m-%d %H:%M:%S')}] \
21 # 距今[{diffTime.days}天{diffTime.seconds//3600}时
{(diffTime.seconds%3600)//60}分]")
22 print(
23 f"{absPathFile: re.txt 。requirements文件有什么
用呢？用处非常大。如果你在机器A上部署了一个应用，现在你需要在机器B上部署同样的
应用，再一个包一个包的安装就太低效了。一般的方法是这样的：在A上生成re.txt ，将re.txt
传到B上，在B上执行pip install -r re.txt 即可自动安装re.txt中指定的包。
（6）下载包：pip download packagename，该命令下载包至当前路径。如果下载到指定路
径path，可以这样执行：pip download --dest path packagename。如果当前版本是Python3.6，想
下载Python2.7相应的软件包，则执行pip download --dest path --Python-version 27 packagename。
（7）下载requirements文件中的包：pip download -r requirements.txt。
（8）查看哪些包可以更新: pip list –outdated。
以上命令基本可以满足我们的日常需求，如果有特殊情况，比如只下载二进制包安装，或
55
Python自动化运维快速入门
者只下载源代码包安装，则需要加--only-binary或--no-binary等参数，可参考pip帮助文档。
下载速度优化：如果安装一些较大的包，我们会发现下载的速度比较慢，是因为pip默认
的安装源都在国外，所以把pip安装源替换成国内镜像，不仅可以大幅提升下载速度，还可以
提高安装成功率。目前国内源有以下几个：
 清华：https://pypi.tuna.tsinghua.edu.cn/simple。
 阿里云：http://mirrors.aliyun.com/pypi/simple/。
 中国科技大学: https://pypi.mirrors.ustc.edu.cn/simple/。
 华中理工大学：http://pypi.hustunique.com/。
 山东理工大学：http://pypi.sdutLinux.org/ 。
 豆瓣：http://pypi.douban.com/simple/。
临 时 使 用 国 内 的 源 可 以 在 使 用 pip 时 加 参 数 -i ， 如 pip install -i
https://pypi.tuna.tsinghua.edu.cn/simple pyspider，这样就会从清华这边的镜像去安装pyspider库。
如果想永久修改默认的源，一劳永逸，就可以将pip的配置文件修改为以下内容（其他的
源类比）：
[global]
index-url = https://pypi.tuna.tsinghua.edu.cn/simple
Linux下，修改 ~/.pip/pip.conf （没有就创建一个文件及文件夹，文件夹要加“.”，表示
隐藏文件夹）。
Windows下，直接在user目录中创建一个pip目录，如C:\Users\xx\pip，新建文件pip.ini，
内容同上。
56
第 2 章
基础运维
本章主要从文本处理、系统监控、日志、FTP、邮件监控、微信监控等方面来介绍基础运
维的相关知识。
2.1
文本处理
在日常的运维工作中一般都离不开与文本，如日志分析、编码转换、ETL 加工等。本节
从编码原理、文件操作、读写配置文件、解析XML等实用编程知识出发，希望能抛砖引玉，
为读者在处理文本问题时提供可实践的方法。
2.1.1 Python 编码解码
我们编写程序处理文本的时候，不可避免地遇到各种各样的编码问题，如果对编码解码过
程一知半解，遇到这类问题就会很棘手。本小节从编码解码的原理出发，结合 Python 3 代码
实例一步步揭开文本编码的面纱，编码解码的原理是相通的，学会编码解码，对学习其他编程
语言也非常有帮助。
首先我们需要明白，计算机只处理二进制数据，如果要处理文本，就需要将文本转换为二
进制数据，再由计算机进行处理。
将文本转换为二进制数据就是编码，将二进制数据转换为文本就是解码。编码和解码要按
照一定的规则进行，这个规则就是字符集。
以常见的ASCII编码为例，字符'a'在ASCII码表中对应的数据是97，二进制是1100001。
下面在Python中验证一下：
>>> ord('a') #查看'a' 的ASCII编码
97
>>> bin(ord('a')) #转换为二进制
'0b1100001'
>>> chr(97) #将十进制数字转为ascii字符
'a'