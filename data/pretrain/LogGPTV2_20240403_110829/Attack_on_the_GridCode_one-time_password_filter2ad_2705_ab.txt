Lemma 2. An adversary can impersonate a user once af-
log(1−m(cid:0)r)
Proof. Any character ϕ entered in the response is in-
distinguishable from n
m characters in the password space Σ,
and will be accepted with probability 1
m . Because each char-
acter is independent, the probability a random r-character
−r compared to n
guess is accepted is m
(
Assuming each response is selected independently at ran-
1 −(
dom, the probability t password attempts are all invalid is
1 − m
t, and the probability at least one is successful is
−r
t. The number of attempts required before
there is a 50% probability of entering a correct GridCode is:
)
−r
1 − m
−r.
)
n
m
The responses aren’t necessarily selected at random. Each
r out of nr possible passwords. A lower
attempt tests
2 mr, where no two
bound of the total number of attempts is 1
sets of preimages intersect. Because the state is selected ran-
domly, the actual number of attempts is bounded by these
two quantities. Depending on the choice of parameter m, it
may be less costly to ﬁnd a valid GridCode randomly than
to discover the user’s password P and secret key K. For ex-
ample, when m = 10 and r = 8, Equation 2 is about 226.05
(below the estimated entropy of a user selected password
using composition rules [4]), and m = 5 is about 218, the
entropy of a user selected password. Weir et al. [21] recently
illustrated password guessing entropy might be signiﬁcantly
higher than password Shannon entropy, making these results
stronger, and GridCode weakens strong passwords.
Exploiting the reduced OTP space only allows the adver-
sary to authenticate a single time, and the attack must be
309
= 1 −(
)t
−r
1 − m
− log 2
t =
log (1 − m−r)
.
1
2
)
(
(1)
(2)
repeated for each subsequent login attempt. Next we eval-
uate how many login attempts the adversary must make,
or how many correct authentications an adversary must ob-
serve, before the user’s secret password and key are known.
3.3 Plaintext Password Recovery
An adversary can obtain correct challenge-response pairs
(S, Ψ) by a variety of means. For example random guessing
discussed in the previous section, eavesdropping, or phish-
ing. We now consider how many challenge-response pairs
are required before the adversary learns the shared secret.
identi(cid:12)ed after
Lemma 3. The additional secret corner K can be uniquely
challenge-response pairs, and the com-
− log n
log n
log m
plete secret after
log(n(cid:0)1+ n(cid:0)1
nm )
pairs.
⌉
⌉
⌈
⌈
Proof. When a challenge-response pair is accepted, the
adversary knows there is one correct corner (key K) and
k − 1 incorrect corners. Because the incorrect corners are
m )r possible preimages.
selected at random, each one has ( n
The correct corner has at least one preimage, the correct
preimage password, and the remaining n− 1 characters in Σ
are uniform likely, therefore there are (1 + n−1
m )r preimages.
The preimages may be easily calculated from the chal-
lange S by reversing the mappings. For example, from
Figure 1(a), the preimages for each character in Φ when
k = 1 are ⟨∅,{1, 6} ,{9} ,{4} ,{4} ,∅,{5} ,{7} ,{2, 8, 0} ,∅⟩.
Each character in Ψ is replaced by the set of preimages, and
each candidate password selects a single element from each
set. We denote the sets of candidate passwords for each ad-
ditional secret K as ∆0, ∆1,··· , ∆k−1. Given one known
challenge-response pair, an adversary must select the user’s
correct password from among
(
)
n − 1
m
1 +
r
+ (k − 1)
(
)
r
n
m
(3)
expected valid passwords.
If k = 4, r = 8, m = 10, and
n = 94, this results in approximately 228.25 possible user
passwords assuming the adversary does not know the secret
key K. Given more challenge-response pairs, an adversary
can reﬁne this set to recover the actual password.
Each successful OTP will produce another k sets of similar
1,··· , ∆
′
′
′
k−1. The correct pass-
size and distribution, ∆
0, ∆
word must be present in all candidate sets ∆K . We reﬁne
the set of candidate passwords using their intersection, i.e.,
∆i = ∆i∩∆
′
i. Eventually ∆K will contain a single entry, the
user’s password, and the remaining ∆K\{K} = ∅. Because
Key Recovery
Password Recovery
n m k Average Variance Average Variance
94
94
94
0.11
0.004
0.00
2.13
2.00
2.00
3.60
2.68
2.67
0.43
0.30
0.28
10
26
26
4
4
8
Table 2: Number of challenge-response pairs re-
quired for key and password recovery.
each character is independent the adversary only needs to
maintaing r ∗ k sets of candidate characters, or nkr bits.
How many successful GridCodes are required? Each suc-
cessful password narrows the k−1 sets of possible passwords
−r of the total space of size nr. After t attempts the
to m
−rt. Thus,
expected size of each candidate password sets is m
For the remaining set, we have
r of the total nr:
nr
mrt
−r
(
r log m
)
)
1 =
t = − log n
log n
=
log m
1 + n−1
(
−r
log n
(1+ n(cid:0)1
(
− log n
n + n−1
m )r
nr
t =
t =
)
log
nm
log
1
m
(4)
(5)
.
(6)
(7)
Note that because each character is mapped independently,
the number of challenge-response pairs is independent of the
length of the user’s password r, a security vulnerability! Us-
ing m = 10, and n = 94 as before, either a unique password
is found, or the set is found to be empty, after approxi-
mately 1.97 challenge-response pairs for the k − 1 keys, and
2.05 pairs for the remaining key. We experimentally conﬁrm
these results for random passwords ranging in length from 3
to 14 characters. The number of pairs required to discover
the additional secret K and password P are given in Table 2.
To discover the key K the remaining k − 1 sets of candidate
passwords ∆K\{K} must be empty.
When we combine these two attacks, an adversary can
⌈
⌉
− log n
log(n(cid:0)1+ n(cid:0)1
nm )
∗
− log 2
log(1−m(cid:0)r)
queries (in-
recover the key in
dependent on k and r). Using our running example, this
is 227.6, substantially less than attacking the shared secret
in 254. More importantly, when t = 2, we expect around
2.63 candidate passwords, and an adversary can recover the
user’s password in 227 attempts. Successive impersonations
provide negligible beneﬁt against a secure OTP.
4. OTHER ATTACKS AND ANALYSIS
In the previous section we analyzed the general security
of the GridCode system and illustrated weaknesses resulting
from the easily invertible function h.
In this section we
more closely analyze the GridCode, the impact of the given
parameters, user selected password entropy, and consider
the impact of the decoy digit extension.
4.1 Decoy Digits
The GridCode password scheme allows a user to enter
what is known as a DecoyDigit, random items from Φ that
are ignored when authenticating. While decoy digits provide
a small increase in security by obscuring the true length of
the user’s password and increasing the number of challenge-
response pairs, these beneﬁts are insigniﬁcant compared to
the decrease in the cost of brute force and replay attacks.
This section analyzes the security impact resulting from the
use of decoy digits.
4.1.1 Decoy Digits and Skeleton Keys
DecoyDigits work as follows. Let Ψ be the expected OTP
(as deﬁned in Section 2.3), and ˆΨ be the OTP entered by
the user. The OTP ˆΨ is accepted if | ˆΨ| − | Ψ| ≤ ℓ, and Ψ is
a subsequence of ˆΨ; ℓ is a security parameter.
The tolerance ℓ cannot be unbounded, and with inade-
quate constraints can result in a “skeleton key” authenticat-
ing any user. A trivial attack is to repeat the alphabet Φ
r times, i.e., ˆΨ = ⟨ϕ0, ϕ1,··· , ϕm−1,··· , ϕ0, ϕ1,··· , ϕm−1⟩
where | ˆΨ| = r ∗ m. Clearly any string Ψ of length r is a
subsequence of ˆΨ. If Ψ must be contiguous, i.e., a substring
of ˆΨ, the skeleton key can instead be deﬁned by a De Bruijn
sequence, B(r, m) of length rm.
4.1.2
Decoy digits as a security mechanism mitigate against key
recovery attacks by increasing the number of preimages, and
thus the number of challenge-response pairs.
Impact on Password Recovery
response pairs required before the key is recovered to −
(
(
Lemma 4. Decoy digits increase the number of challenge-
1−
log
an increase of one for practical values of ℓ.
Let r be the length of the user’s password and r + ℓ be
the length of the OTP. The preimages of the ﬁrst ℓ + 1
OTP characters are candidates for the ﬁrst character of the
user’s password. Preimages of OTP characters two through
ℓ + 2 are candidates for the second character of the user’s
password, and so on. See Figure 2.
Now we must evaluate how large these sets of candidate
characters are. Barot et al. [1] evaluate the problem of es-
timating the size of the union of random subsets of items.
Given a set of n items, where s random subsets of size ω
are selected, the expected size of the union of the s sets
is E(n, ω, ℓ) = n(1 − (1 − ω
n )ℓ). Using the expected size
Figure 2: Mapping the r + ℓ character password con-
taining decoy digits to an r character password with-
′
out. Note each possible password set ϕ
i overlaps ℓ
characters from the adjacent character sets.
310
log n
(m(cid:0)1)(n(cid:0)1)
mn
...⊆ΣCandidate PasswordsOne-Time Password Preimages0≤j≤+1σi+jOne-Time Password∈Φφr+φ0φ1σ0σ1σr+σ0σ1h−1S||K(φi)of the set of valid password characters, we calculate the
total expected number of valid passwords and the number
of challenge-response paris required to uniquely recover the
user’s password. For the k − 1 incorrect keys K \ {K}, the
size of each subset is n
((
m and the expected size of the union
of ℓ + 1 subsets is n(1 − ( m−1
m )ℓ+1).
n(1 − (1 − 1
(
)
(
nr
m − 1
1 −
)
(
m
− log n
1 − ( m−1
1 = nr
1 = nr
m )ℓ+1)
)r
)
)
ℓ+1)
t =
(10)
log
(8)
(9)
ℓ+1
rt
.
t
m
When the ℓ + 1 consecutive characters are not decoys and
correspond to the correct key K, the size of each subset is
1 + n−1
m and the union of the ℓ + 1 subsets is
n
and
(
(
1 −
(
1 −
(
1 −
log
m
n
1 − 1 + n−1
(
1 − 1 + n−1
(
log n
(m−1)(n−1)
n
mn
,
)
)ℓ+1
)ℓ+1
)
m
ℓ+1
rt
)
) .
1 = nr
t = −
Again, like Equations 5 and 7, the number of challenge-
response pairs is independent of the length of the password.
For n = 94, m = 10, and ℓ = 2, the number of challenge-
response pairs increases to 3.48 (up from 1.97) for the in-
correct keys, and 3.71 (up from 2.05) for the correct key.
Because Equation 10 assumes all decoys, and Equation 12
assumes no decoys, the real expected number of collisions is
bounded by these two quantities2. The impact of the num-
ber of decoy digits ℓ allowed is illustrated in Figure 3. While
the decoy digits may add a modest amount of security by
requiring additional challenge response pairs, they increase
the probability a replay attack or random guessing will suc-
ceed. We evaluate their impact on these attacks next.