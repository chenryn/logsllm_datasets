这种方式要求我们知道函数所对应的opcode代码，可以通过gdb调试的办法查找，这里以echo为例，其opcode为`ZEND_ECHO`。  
在`passer6y.h`中添加定义:
    int fake_echo(ZEND_OPCODE_HANDLER_ARGS);
然后在`passer6y.c`中添加
    int fake_echo(ZEND_OPCODE_HANDLER_ARGS)
    {
        php_printf("hook success");
        return ZEND_USER_OPCODE_RETURN;
    }
并在模块初始化`PHP_MINIT_FUNCTION`函数中添加调用：
    PHP_MINIT_FUNCTION(passer6y)
    {
        /* If you have INI entries, uncomment these lines
        REGISTER_INI_ENTRIES();
        */
        //php_override_func("echo", sizeof("echo"), PHP_FN(fake_echo), NULL TSRMLS_CC);
        zend_set_user_opcode_handler(ZEND_ECHO, fake_echo);
        return SUCCESS;
    }
编译运行：  
#### 敏感函数hook
  * eval: INCLUDE_OR_EVAL  
在`php-src-php-7.0.33/Zend/zend_ast.c#1258`还有其他几个也使用了相同的opcode:
    case ZEND_AST_INCLUDE_OR_EVAL:
        switch (ast->attr) {
            case ZEND_INCLUDE_ONCE: FUNC_OP("include_once");
            case ZEND_INCLUDE:      FUNC_OP("include");
            case ZEND_REQUIRE_ONCE: FUNC_OP("require_once");
            case ZEND_REQUIRE:      FUNC_OP("require");
            case ZEND_EVAL:         FUNC_OP("eval");
            EMPTY_SWITCH_DEFAULT_CASE();
        }
        break;
显然，`include_once`、`include`、`require_once`、`require`、`eval`这5个函数的功能一样。
  * system: DO_ICALL  
  * 变量函数执行：DO_FCALL  
`$a="system";$a("whoami");`  
总结一下，hook这几个opcode指令：
  * INCLUDE_OR_EVAL
  * DO_ICALL
  * DO_FCALL
##### 具体实现
**opcode hook**  
通过`zend_set_user_opcode_handler(zend_uchar opcode, user_opcode_handler_t
handler)`函数实现将指定的opcode，替换成我们自定义的。
其中`user_opcode_handler_t`类型是`zend_execute_data *execute_data`的别名：  
> 第一次见typedef的这种用法，参考这篇文章：
`zend_execute_data`结构的注解在文档中有解释：
    #define EX(element)             ((execute_data)->element)
    //zend_compile.h
    struct _zend_execute_data {
        const zend_op       *opline;  //指向当前执行的opcode，初始时指向zend_op_array起始位置
        zend_execute_data   *call;             /* current call                   */
        zval                *return_value;  //返回值指针
        zend_function       *func;          //当前执行的函数（非函数调用时为空）
        zval                 This;          //这个值并不仅仅是面向对象的this，还有另外两个值也通过这个记录：call_info + num_args，分别存在zval.u1.reserved、zval.u2.num_args
        zend_class_entry    *called_scope;  //当前call的类
        zend_execute_data   *prev_execute_data; //函数调用时指向调用位置作用空间
        zend_array          *symbol_table; //全局变量符号表
    #if ZEND_EX_USE_RUN_TIME_CACHE
        void               **run_time_cache;   /* cache op_array->run_time_cache */
    #endif
    #if ZEND_EX_USE_LITERALS
        zval                *literals;  //字面量数组，与func.op_array->literals相同
    #endif
    };
其中第一个车管员`opline`的结构定义：
    struct _zend_op {
        const void *handler; //对应执行的C语言function，即每条opcode都有一个C function处理
        znode_op op1;   //操作数1
        znode_op op2;   //操作数2
        znode_op result; //返回值
        uint32_t extended_value; 
        uint32_t lineno; 
        zend_uchar opcode;  //opcode指令
        zend_uchar op1_type; //操作数1类型
        zend_uchar op2_type; //操作数2类型
        zend_uchar result_type; //返回值类型
    };
还有成员`func`的定义：
    union _zend_function {
        zend_uchar type;    /* MUST be the first element of this struct! */
        struct {
            zend_uchar type;  /* never used */
            zend_uchar arg_flags[3]; /* bitset of arg_info.pass_by_reference */
            uint32_t fn_flags;
            zend_string *function_name;
            zend_class_entry *scope; //成员方法所属类，面向对象实现中用到
            union _zend_function *prototype;
            uint32_t num_args; //参数数量
            uint32_t required_num_args; //必传参数数量
            zend_arg_info *arg_info; //参数信息
        } common;
        zend_op_array op_array; //函数实际编译为普通的zend_op_array
        zend_internal_function internal_function;
    };
现在我们要实现一个执行该opcode的函数以及参数的功能：
    static int php_do_fcall_handler(zend_execute_data *execute_data){
        const zend_op *opline = execute_data->opline;    
        zend_execute_data *call = execute_data->call;
        zend_function *fbc = call->func;
        if (fbc->type == ZEND_INTERNAL_FUNCTION) {
            // 获取参数个数
            int arg_count = ZEND_CALL_NUM_ARGS(call);   
            if (!arg_count) {
                return ZEND_USER_OPCODE_DISPATCH;
            }
            // 如果不在类中
            if (fbc->common.scope == NULL){
                zend_string *fname = fbc->common.function_name;
                char *funcname = ZSTR_VAL(fname);
                int len = strlen(funcname);
                if (fname) {
                    if (strncmp("passthru", funcname, len) == 0
                                || strncmp("system", funcname, len) == 0
                                || strncmp("exec", funcname, len) == 0
                                || strncmp("shell_exec", funcname, len) == 0
                                || strncmp("proc_open", funcname, len) == 0 ) {
                                zend_error(E_WARNING, funcname);
                        }
                }   
            }
        }
        zend_error(E_WARNING, "ZEND_DO_FCALL Hook success");
        return ZEND_USER_OPCODE_DISPATCH;
    }
**函数参数获取**  
参考[php7内核剖析](https://www.kancloud.cn/nickbai/php7/363323)文章的函数参数解析部分，获取到第一个参数：
    static int php_do_fcall_handler(zend_execute_data *execute_data){
    // ...
    zend_execute_data *call = execute_data->call;
    zval *arg = ZEND_CALL_ARG(call, 1);
**格式化输出**
    static void php_warning(const char *fname, const char *arg, const char *format, ...) /* {{{ */ {
        char *buffer, *msg;
        va_list args;
        //EG(error_reporting) = 1;
        va_start(args, format);
        vspprintf(&buffer, 0, format, args);
        spprintf(&msg, 0, "%s(\"%s\"): %s", fname, arg, buffer);
        efree(buffer);
        zend_error(E_WARNING, msg);
        efree(msg);
        va_end(args);
    } /* }}} */
    //... php_do_fcall_handler()
    php_warning(funcname, ZSTR_VAL(Z_STR_P(arg)), "warning function");
接下来写一个循环遍历，获取全部参数：
    // 创建一个数组，记录参数
    ZVAL_NEW_ARR(&z_params);    
    zend_hash_init(Z_ARRVAL(z_params), arg_count, NULL, ZVAL_PTR_DTOR, 0);
    for (i=0; i 剩下几个opcode挖坑
## 污点标记
继续参考fate0师傅的[xmark](https://github.com/fate0/xmark)项目，在扩展中通过`PHP_FUNCTION`来定义`xmark`函数，帮助我们标记字符串，传递一个字符串引用，返回是否标记成功。
    PHP_FUNCTION(xmark)
    {
        zval *z_str;
        if (!XMARK_G(enable)) {
            RETURN_FALSE;
        }
        // 获取参数，第一个参数为接收参数的个数，ZEND_NUM_ARGS()为有多少要多少，z为zval类型，引用传参通过zend_parse_parameters只能用z，第三个为存储参数变量的指针
        if (zend_parse_parameters(ZEND_NUM_ARGS(), "z", &z_str) == FAILURE) {
            return;
        }
        ZVAL_DEREF(z_str);     // 在php-src-php-7.0.33/Zend/zend_types.h中定义，如果z_str是引用则找到其具体引用的zval
        // 只能标记字符串，所以array和其他类型得先遍历一下
        if (IS_STRING != Z_TYPE_P(z_str) || Z_STRLEN_P(z_str) == 0) {
            RETURN_FALSE;
        }
        if (xmark_zstr(z_str) == FAILURE) {
            RETURN_FALSE;
        }
        RETURN_TRUE;
    }
其中标记字符部分在`xmark_zstr`函数中处理：
    static zend_always_inline int xmark_zstr(zval *z_str)
    {
        if (!XCHECK_FLAG(Z_STR_P(z_str))) {
            zend_string *str = zend_string_init(Z_STRVAL_P(z_str), Z_STRLEN_P(z_str), 0);
            ZSTR_LEN(str) = Z_STRLEN_P(z_str);
            zend_string_release(Z_STR_P(z_str));    // 释放z_str字符串
            XMARK_FLAG(str);        // 标记字符串
            ZVAL_STR(z_str, str);       // 标记完了后，将z_str的值设为str
        }
        return SUCCESS;
    }
在具体的`XMARK_FLAG`和`XCHECK_FLAG`函数这样实现的，xmark/php_xmark.h#41
    #if PHP_VERSION_ID  &$value) {
        if (stripos($key, 'HTTP_') === 0) {
            prvd_xmark($value);
        }
    }
这些参数经过拼接、赋值等操作不断的传递，我们把他称之为`filter`点，在这个过程标记也要随之传递，一个例子：
    function base64_decode($data, ...$args) {
        $result = call_user_func(PRVD_RENAME_PREFIX."base64_decode", $data, ...$args);
        if (PRVD_TAINT_ENABLE && prvd_xcheck($data)) {
            prvd_xmark($result);
        }
        return $result;
    }
在遇到base64解码操作时，如果`source`点已被标记，则传递标记给解码后的字符串。
最后就是威胁判断的过程，这些数据在最后到达敏感函数的`sink`点，比如`system`、`eval`这些高危函数，判断标记是否还存在，即检测是否有可控的风险。
## 上报平台
## 最后
最后想了一下payload模式的缺点，在多入口php文件时，容易产生遗漏包含waf的情况，导致误报的问题，当然如果把全部逻辑都写到扩展中，与之而言的代价就是开发难度极高。其次Fuzz模式特殊漏洞检测需要指定的payload，且检测的精度取决于payload的精度。不过我觉得有污点检测功能就够了。
花了差不多半个月的时间来研究PHP的RASP机制，从php内核到各种开源的rasp项目都有了一个深入的学习。写C语言扩展，研究php底层太硬核了，属实自闭，以后打算再研究一下java的rasp机制。
最后膜前辈们的探索和分享。
参考文章：
  * [替换PHP底层函数实现](https://www.ichenfu.com/2015/03/01/override-php-function/)
  * [从PHP源码与扩展开发谈PHP任意代码执行与防御](https://blog.zsxsoft.com/post/30)
  * [php7内核剖析](https://www.kancloud.cn/nickbai/php7/363323)
  * [xmark: A PHP7 extension that can hook most functions/classes and parts of opcodes](https://github.com/fate0/xmark)
  * [一类PHP RASP实现](https://paper.seebug.org/449/)
  * [PHP 运行时漏洞检测](http://blog.fatezero.org/2018/11/11/prvd/)
  * [毕业设计之php RASP](https://www.cnblogs.com/iamstudy/articles/php_code_rasp_1.html)
  * [taint: Taint is a PHP extension, used for detecting XSS codes](https://github.com/laruence/taint/)