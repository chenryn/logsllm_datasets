title:Bulletproofs: Short Proofs for Confidential Transactions and More
author:Benedikt B&quot;unz and
Jonathan Bootle and
Dan Boneh and
Andrew Poelstra and
Pieter Wuille and
Gregory Maxwell
2018 IEEE Symposium on Security and Privacy
Bulletproofs: Short Proofs for Conﬁdential Transactions and More
Benedikt B¨unz1, Jonathan Bootle2, Dan Boneh1,
Andrew Poelstra3, Pieter Wuille3, and Greg Maxwell
1Stanford University
2University College London
3Blockstream
Abstract—We propose Bulletproofs, a new non-interactive zero-
knowledge proof protocol with very short proofs and without
a trusted setup; the proof size is only logarithmic in the
witness size. Bulletproofs are especially well suited for efﬁcient
range proofs on committed values: they enable proving that a
committed value is in a range using only 2 log2pnq ` 9 group
and ﬁeld elements, where n is the bit length of the range. Proof
generation and veriﬁcation times are linear in n.
Bulletproofs greatly improve on the linear (in n) sized
range proofs in existing proposals for conﬁdential transactions
in Bitcoin and other cryptocurrencies. Moreover, Bulletproofs
supports aggregation of range proofs, so that a party can prove
that m commitments lie in a given range by providing only an
additive Oplogpmqq group elements over the length of a single
proof. To aggregate proofs from multiple parties, we enable the
parties to generate a single proof without revealing their inputs
to each other via a simple multi-party computation (MPC)
protocol for constructing Bulletproofs. This MPC protocol uses
either a constant number of rounds and linear communication,
or a logarithmic number of rounds and logarithmic commu-
nication. We show that veriﬁcation time, while asymptotically
linear, is very efﬁcient in practice. The marginal cost of batch
verifying 32 aggregated range proofs is less than the cost
of verifying 32 ECDSA signatures. Bulletproofs build on the
techniques of Bootle et al. (EUROCRYPT 2016). Beyond range
proofs, Bulletproofs provide short zero-knowledge proofs for
general arithmetic circuits while only relying on the discrete
logarithm assumption and without requiring a trusted setup.
We discuss many applications that would beneﬁt from Bullet-
proofs, primarily in the area of cryptocurrencies. The efﬁciency
of Bulletproofs is particularly well suited for the distributed
and trustless nature of blockchains. The full version of this
article is available at [1].
1. Introduction
Blockchain-based cryptocurrencies enable peer-to-peer
electronic transfer of value by maintaining a global dis-
tributed but synchronized ledger, the blockchain. Any in-
dependent observer can verify both the current state of the
blockchain as well as the validity of all transactions on the
ledger. In Bitcoin, this innovation requires that all details
of a transaction are public: the sender, the receiver, and
the amount transferred. In general, we separate privacy for
payments into two properties: (1) anonymity, hiding the
identities of sender and receiver in a transaction and (2)
conﬁdentiality, hiding the amount transferred. While Bitcoin
provides some weak anonymity through the unlinkability
of Bitcoin addresses to real world identities, it lacks any
conﬁdentiality. This is a serious limitation for Bitcoin and
could be prohibitive for many use cases. Would employees
want to receive their salaries in bitcoin if it meant that their
salaries were published on the public blockchain?
To address the conﬁdentiality of transaction amounts,
Maxwell [2] introduced conﬁdential transactions (CT), in
which every transaction amount involved is hidden from
public view using a commitment to the amount. This ap-
proach seems to prevent public validation of the blockchain;
an observer can no longer check that the sum of transaction
inputs is greater than the sum of transaction outputs, and that
all transaction values are positive. This can be addressed by
including in every transaction a zero-knowledge proof of
validity of the conﬁdential transaction.
Current proposals for CT zero-knowledge proofs [3]
have either been prohibitively large or required a trusted
setup. Neither is desirable. While one could use succinct
zero-knowledge proofs (SNARKs) [4], [5], they require a
trusted setup, which means that everyone needs to trust that
the setup was performed correctly. One could avoid trusted
setup by using a STARK [6], but the resulting range proofs
while asymptotically efﬁcient are practically larger than even
the currently proposed solutions.
Short non-interactive zero-knowledge proofs without a
trusted setup, as described in this paper, have many applica-
tions in the realm of cryptocurrencies. In any distributed
system where proofs are transmitted over a network or
stored for a long time, short proofs reduce overall cost.
1.1. Our Contributions
We present Bulletproofs, a new zero-knowledge argu-
ment of knowledge1 system, to prove that a secret committed
1. Proof systems with computational soundness like Bulletproofs are
sometimes called argument systems. We will use the terms proof and
argument interchangeably.
© 2018, Benedikt Bünz. Under license to IEEE.
DOI 10.1109/SP.2018.00020
315
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:29:05 UTC from IEEE Xplore.  Restrictions apply. 
value lies in a given interval. Bulletproofs do not require
a trusted setup. They rely only on the discrete logarithm
assumption, and are made non-interactive using the Fiat-
Shamir heuristic.
Bulletproofs builds on the techniques of Bootle et
al. [7], which yield communication-efﬁcient zero-knowledge
proofs. We present a replacement for their inner-product
argument that reduces overall communication by a factor
of 3. We make Bulletproofs suitable for proving statements
on committed values. Examples include a range proof, a ver-
iﬁable shufﬂe, and other applications discussed below. We
note that a range proof using the protocol of [7] would have
required implementing the commitment opening algorithm
as part of the veriﬁcation circuit.
Distributed Bulletproofs generation. We show that Bul-
letproofs support a simple and efﬁcient multi-party com-
putation (MPC) protocol that allows multiple parties with
secret committed values to jointly generate a single small
range proof for all their values, without revealing their secret
values to each other. One version of our MPC protocol
is constant-round but with linear communication. Another
variant requires only logarithmic communication, but uses
a logarithmic number of rounds. When a conﬁdential trans-
action has inputs from multiple parties (as in the case of
CoinJoin), this MPC protocol can be used to aggregate all
the proofs needed to construct the transaction into a single
short proof.
Proofs for arithmetic circuits. While we focus on con-
ﬁdential transactions (CT), where our work translates to
signiﬁcant practical savings, we stress that the improvements
are not limited to CT. We present Bulletproofs for general
NP languages. The proof size is logarithmic in the number
of multiplication gates in the arithmetic circuit for verifying
a witness. The proofs are much shorter than [7] and allow
inputs to be Pedersen commitments to elements of the
witness.
Optimizations and evaluation. We provide a complete
implementation of Bulletproofs that includes many further
optimizations described in Section 6. For example, we show
how to batch the veriﬁcation of multiple Bulletproofs so that
the cost of verifying every additional proof is signiﬁcantly
reduced. We also provide efﬁciency comparisons with the
range proofs currently used for conﬁdential
transactions
[2], [8] and with other proof systems. Our implementation
includes a general tool for constructing Bulletproofs for any
NP language. The tool reads in arithmetic circuits in the
Pinocchio [9] format which lets users use their toolchain.
This toolchain includes a compiler from C to the circuit
format. We expect this to be of great use to implementers
who want to use Bulletproofs.
1.2. Applications
We ﬁrst discuss several applications for Bulletproofs
along with related work speciﬁc to these applications. Ad-
ditional related work is discussed in Section 1.3.
1.2.1. Conﬁdential Transactions and Mimblewimble.
Bitcoin and other similar cryptocurrencies use a transaction-
output-based system where each transaction fully spends the
outputs of previously unspent transactions. These unspent
transaction outputs are called UTXOs. Bitcoin allows a
single UTXO to be spent to many distinct outputs, each
associated with a different address. To spend a UTXO a
user must provide a signature, or more precisely a scriptSig,
that enables the transaction SCRIPT to evaluate to true [10].
Apart from the validity of the scriptSig, miners verify that
the transaction spends previously unspent outputs, and that
the sum of the inputs is greater than the sum of the outputs.
Maxwell [2] introduced the notion of a conﬁdential
transaction, where the input and output amounts in a
transaction are hidden in Pedersen commitments [11]. To
enable public validation, the transaction contains a zero-
knowledge proof that the sum of the committed inputs is
greater than the sum of the committed outputs, and that
all the outputs are positive, namely they lie in the interval
r0, 2ns, where 2n is much smaller than the group size. All
current implementations of conﬁdential transactions [2], [3],
[12], [13] use range proofs over committed values, where
the proof size is linear in n. These range proofs are the
main contributor to the size of a conﬁdential transaction. In
current implementations [2], a conﬁdential transaction with
only two outputs and 32 bits of precision is 5.4 KB bytes,
of which 5 KB are allocated to the range proof. Even with
recent optimizations the range proofs would still take up 3.8
KB.
We show in Section 6 that Bulletproofs greatly improve
on this, even for a single range proof while simultaneously
doubling the range proof precision at marginal additional
cost (64 bytes). The logarithmic proof size additionally
enables the prover to aggregate multiple range proofs,
e.g. for transactions with multiple outputs, into a single
short proof. With Bulletproofs, m range proofs are merely
Oplogpmqq additional group elements over a single range
proof. This is already useful for conﬁdential transactions in
their current form as most Bitcoin transactions have two or
more outputs. It also presents an intriguing opportunity to
aggregate multiple range proofs from different parties into
one proof, as would be needed, for example, in a CoinJoin
transaction [14]. To do so, we present an MPC protocol that
lets parties efﬁciently combine proofs without compromising
conﬁdentiality.
Conﬁdential transaction implementations are available
in side-chains [3], private blockchains [15], and in the
popular privacy-focused cryptocurrency Monero [13]. All
these implementations would beneﬁt from Bulletproofs.
At the time of writing, Bitcoin has roughly 50 million
UTXOs from 22 million transactions (see statoshi.info).
Using a 52-bit representation of bitcoin that can cover all
values from 1 satoshi up to 21 million bitcoins, this results
in roughly 160GB of range proof data using the current
systems. Using aggregated Bulletproofs, the range proofs
for all UTXOs would take less than 17GB, about a factor
10 reduction in size.
316
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:29:05 UTC from IEEE Xplore.  Restrictions apply. 
Mimblewimble. Recently an improvement was proposed
to conﬁdential transactions, called Mimblewimble [8], [16],
provides further savings.
Jedusor [16] realized that a Pedersen commitment to 0
can be viewed as an ECDSA public key, and that for a
valid conﬁdential transaction the difference between outputs,
inputs, and transaction fees must be 0. A prover constructing
a conﬁdential transaction can therefore sign the transaction
with the difference of the outputs and inputs as the public
key. This small change removes the need for a scriptSig
which greatly simpliﬁes the structure of conﬁdential trans-
actions. Poelstra [8] further reﬁned and improved Mim-
blewimble and showed that these improvements enable a
greatly simpliﬁed blockchain in which all spent transactions
can be pruned and new nodes can efﬁciently validate the
entire blockchain without downloading any old and spent
transactions. Along with further optimizations, this results in
a highly compressed blockchain. It consists only of a small
subset of the block-headers as well as the remaining unspent
transaction outputs and the accompanying range proofs plus
an un-prunable 32 bytes per transaction. Mimblewimble also
allows transactions to be aggregated before sending them
to the blockchain. In Section 4.5, we present a simple and
efﬁcient MPC protocol that allows multiple users to generate
a single transaction with a single aggregate range proof.
The users do not have to reveal their secrets transaction
values to any of the other participants. This aggregation of
transactions can be seen as a CoinJoin [14] protocol which
can improve the anonymity of Mimblewimble transactions.
A Mimblewimble blockchain grows with the size of the
UTXO set. Using Bulletproofs, it would only grow with the
number of transactions that have unspent outputs, which
is much smaller than the size of the UTXO set. Overall,
Bulletproofs can not only act as a drop-in replacement for
the range proofs in conﬁdential
it can
also help make Mimblewimble a practical scheme with
a blockchain that is signiﬁcantly smaller than the current
Bitcoin blockchain.
transactions, but
1.2.2. Provisions. Dagher et al. [17] introduced the Pro-
visions protocol which allows Bitcoin exchanges to prove
that they are solvent without revealing any additional in-
formation. The protocol crucially relies on range proofs
to prevent an exchange from inserting fake accounts with
negative balances. These range proofs, which take up over
13GB, are the main contributors to the proof sizes of almost
18GB for a large exchange with 2 million customers. The
proof size is in fact linear in the number of customers. Since
in this protocol, one party (the exchange) has to construct
many range proofs at once, the general Bulletproofs protocol
from Section 4.3 is a natural replacement for the NIZK proof
used in Provisions. With the proof size listed in Section 6,
we obtain that the range proofs would take up less than
2 KB with our protocol. Additionally, the other parts of
the proof could be similarly compressed using the protocol
from Section 5. The proof would then be dominated by
one commitment per customer, with size 62 MB. This is
roughly 300 times smaller then the current implementation
of Provisions.
1.2.3. Veriﬁable shufﬂes. Consider two lists of committed
values x1, . . . , xn and y1, . . . , yn. The goal is to prove that
the second list is a permutation of the ﬁrst. This problem
is called a veriﬁable shufﬂe. It has many applications in
voting [18], [19], mix-nets [20], and solvency proofs [17].
Neff [19] gave a practical implementation of a veriﬁable
shufﬂe and later work improved on it [21], [22]. Currently
the most efﬁcient shufﬂe [23] has size Op?
Bulletproofs can be used to create a veriﬁable shufﬂe of
size Oplog nq. The two lists of commitments are given as
inputs to the circuit protocol from Section 5. The circuit can
implement a shufﬂe by sorting the two lists and then check-
ing that they are equal. A sorting circuit can be implemented
using Opn ¨ logpnqq multiplications which means that the
proof size will be only Oplogpnqq. This is much smaller than
previously proposed protocols. Given the concrete efﬁciency
of Bulletproofs, a veriﬁable shufﬂe using Bulletproofs would
be very efﬁcient in practice. Constructing the proof and
verifying it takes linear time in n.
nq.
for
Smart Contracts.
1.2.4. NIZK Proofs
The
Ethereum [24]
system uses highly expressive smart
contracts to enable complex transactions. Smart contracts,
like any other blockchain transaction, are public and provide
no inherent privacy. To bring privacy to smart contracts,
non-interactive zero-knowledge (NIZK) proofs have been
proposed as a tool
to enable complex smart contracts
that do not leak the user inputs [25]–[27]. However, these
protocols are limited as the NIZK proof itself is not suitable
for veriﬁcation by a smart contract. The reason is that
communication over the blockchain with a smart contract
is expensive, and the smart contract’s own computational
power is highly limited. SNARKs, which have succinct
proofs and efﬁcient veriﬁers, seem like a natural choice,
but current practical SNARKs [4] require a complex trusted
setup. The resulting common reference strings (CRS) are
long, speciﬁc to each application, and possess trapdoors.
In Hawk [25], for instance, a different CRS is needed for
each smart contract, and either a trusted party is needed
to generate it, or an expensive multi-party computation
is needed to distribute the trust among a few parties. On
the other hand,
for small applications like boardroom
voting, one can use classical sigma protocols [26], but the
proof-sizes and expensive veriﬁcation costs are prohibitive
for more complicated applications. Recently, Campanelli et
al. [27] showed how to securely perform zero-knowledge
contingent payments (ZKCPs) in Bitcoin, while attacking
and ﬁxing a previously proposed protocol [28]. ZKCPs
enable the trust
less, atomic and efﬁcient exchange of
a cryptocurrency vs. some digital good. While ZKCPs
support a wide area of applications they fundamentally
work for only a single designated veriﬁer and do not allow
for public veriﬁcation. For some smart contracts that have
more than two users, public veriﬁcation is often crucial. In
317
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:29:05 UTC from IEEE Xplore.  Restrictions apply. 
an auction, for example, all bidders need to be convinced
that all bids are well formed.
Bulletproofs improves on this by enabling small proofs
that do not require a trusted setup. The Bulletproofs veriﬁer
is not cheap, but there are multiple ways to work around
this. First, a smart contract may act optimistically and
only verify a proof if some party challenges its validity.
Incentives can be used to ensure that rational parties never
create an incorrect proof nor challenge a correct proof.
This can be further improved by using an interactive ref-
eree delegation model [29], previously proposed for other
blockchain applications [30], [31]. In this model, the prover
provides a proof along with a succinct commitment to the
veriﬁer’s execution trace. A challenger that disagrees with
the computation also commits to his computation trace and
the two parties engage in an interactive binary search to ﬁnd
the ﬁrst point of divergence in the computation. The smart
contract can then execute this single computation step and
punish the party which provided a faulty execution trace.
The intriguing property of this protocol is that even when
a proof is challenged, the smart contract only needs to
verify a single computation step, i.e. a single gate of the
veriﬁcation circuit. In combination with small Bulletproofs,
this can enable more complex but privacy preserving smart
contracts. Like in other applications, these NIZK proofs
would beneﬁt from the MPC protocol that we present in
Section 4.5 to generate Bulletproofs distributively. Consider
an auction smart contract where bidders in the ﬁrst round
submit commitments to bids and in the second round open
them. A NIZK can be used to proof properties about the
bids, e.g. they are in some range, without revealing them.
Using Bulletproofs’ MPC multiple bidders can combine