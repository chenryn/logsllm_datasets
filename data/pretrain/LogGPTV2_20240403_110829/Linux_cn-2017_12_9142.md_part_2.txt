为了理解 Primitive 是怎么工作的，我通过几个图像来跑一下它。我用 10 个形状和 100 个形状来为这个插画生成 SVG：
|  |  |  |
| --- | --- | --- |
|  |  |  |
| 使用 Primitive 处理 ，使用 [10 个形状](https://jmperezperez.com/assets/images/posts/svg-placeholders/pexels-photo-281184-square-10.svg) 、 [100 形状](https://jmperezperez.com/assets/images/posts/svg-placeholders/pexels-photo-281184-square-100.svg)、 [原图](https://jmperezperez.com/assets/images/posts/svg-placeholders/pexels-photo-281184-square.jpg)。 |
|  |  |  |
| --- | --- | --- |
|  |  |  |
| 使用 Primitive 处理，使用 [10 形状](https://jmperezperez.com/assets/images/posts/svg-placeholders/pexels-photo-618463-square-10.svg) 、 [100 形状](https://jmperezperez.com/assets/images/posts/svg-placeholders/pexels-photo-618463-square-100.svg)、 [原图](https://jmperezperez.com/assets/images/posts/svg-placeholders/pexels-photo-618463-square.jpg) 。 |
当在图像中使用 10 个形状时，我们基本构画出了原始图像。在图像占位符这种使用场景里，我们可以使用这种 SVG 作为潜在的占位符。实际上，使用 10 个形状的 SVG 代码已经很小了，大约是 1030 字节，当通过 SVGO 传输时，它将下降到约 640 字节。
```
```
正如我们预计的那样，使用 100 个形状生成的图像更大，在 SVGO（之前是 8kB）之后，大小约为 5kB。它们在细节上已经很好了，但是仍然是个很小的载荷。使用多少三角形主要取决于图像类型和细腻程度（如，对比度、颜色数量、复杂度）。
还可以创建一个类似于 [cpeg-dssim](https://github.com/technopagan/cjpeg-dssim) 的脚本，去调整所使用的形状的数量，以满足 [结构相似](https://en.wikipedia.org/wiki/Structural_similarity) 的阈值（或者最差情况中的最大数量）。
这些生成的 SVG 也可以用作背景图像。因为尺寸约束和矢量化，它们在展示 超大题图   hero image 和大型背景图像时是很好的选择。
#### SQIP
用 [Tobias 自己的话说](https://github.com/technopagan/sqip)：
> 
> SQIP 尝试在这两个极端之间找到一种平衡：它使用 [Primitive](https://github.com/fogleman/primitive) 去生成一个 SVG，由几种简单的形状构成，近似于图像中可见的主要特征，使用 [SVGO](https://github.com/svg/svgo) 优化 SVG，并且为它增加高斯模糊滤镜。产生的最终的 SVG 占位符后大小仅为约 800~1000 字节，在屏幕上看起来更为平滑，并提供一个图像内容的视觉提示。
> 
> 
> 
这个结果和使用一个用了模糊技术的极小占位符图像类似。（看看 [Medium](https://medium.com/@jmperezperez/how-medium-does-progressive-image-loading-fd1e4dc1ee3d) 和 [其它站点](https://medium.com/@jmperezperez/more-examples-of-progressive-image-loading-f258be9f440b) 是怎么做的）。区别在于它们使用了一个位图图像，如 JPG 或者 WebP，而这里是使用的占位符是 SVG。
如果我们使用 SQIP 而不是原始图像，我们将得到这样的效果：
|  |  |
| --- | --- |
|  |  |
| [第一张图像](https://jmperezperez.com/assets/images/posts/svg-placeholders/pexels-photo-281184-square-sqip.svg) 和 [第二张图像](https://jmperezperez.com/svg-placeholders/%28/assets/images/posts/svg-placeholders/pexels-photo-618463-square-sqip.svg) 使用了 SQIP 后的输出图像。 |
输出的 SVG 约 900 字节，并且通过检查代码，我们可以发现 `feGaussianBlur` 过滤被应用到该组形状上：
```
```
SQIP 也可以输出一个带有 Base64 编码的 SVG 内容的图像标签：
```
…PjwvZz48L3N2Zz4=);">
```
#### 轮廓
我们刚才看了使用了边缘和原始形状的 SVG。另外一种矢量化图像的方式是 “描绘” 它们。在几天前 [Mikael Ainalem](https://twitter.com/mikaelainalem) 分享了一个 [codepen](https://codepen.io/ainalem/full/aLKxjm/) 代码，展示了怎么去使用两色轮廓作为一个占位符。结果非常漂亮：
![](/data/attachment/album/201712/13/232733frqepv77stztq253.gif)
SVG 在这种情况下是手工绘制的，但是，这种技术可以用工具快速生成并自动化处理。
* [Gatsby](https://www.gatsbyjs.org/)，一个用 React 支持的描绘 SVG 的静态网站生成器。它使用 [一个 potrace 算法的 JS 移植](https://www.npmjs.com/package/potrace) 去矢量化图像。
* [Craft 3 CMS](https://craftcms.com/)，它也增加了对轮廓的支持。它使用了 [一个 potrace 算法的 PHP 移植](https://github.com/nystudio107/craft3-imageoptimize/blob/master/src/lib/Potracio.php)。
* [image-trace-loader](https://github.com/EmilTholin/image-trace-loader)，一个使用了 potrace 算法去处理图像的 Webpack 加载器。
如果感兴趣，可以去看一下 Emil 的 webpack 加载器 (基于 potrace) 和 Mikael 的手工绘制 SVG 之间的比较。
这里我假设该输出是使用默认选项的 potrace 生成的。但是可以对它们进行优化。查看 [图像描绘加载器的选项](https://github.com/EmilTholin/image-trace-loader#options)，[传递给 potrace 的选项](https://www.npmjs.com/package/potrace#parameters)非常丰富。
### 总结
我们看到了从图像中生成 SVG 并使用它们作为占位符的各种不同的工具和技术。与 [WebP 是一个用于缩略图的奇妙格式](https://medium.com/@jmperezperez/using-webp-to-create-tiny-preview-images-3e9b924f28d6) 一样，SVG 也是一个用于占位符的有趣格式。我们可以控制细节的级别（和它们的大小），它是高可压缩的，并且很容易用 CSS 和 JS 进行处理。
#### 额外的资源
这篇文章上到了 [Hacker News 热文](https://news.ycombinator.com/item?id=15696596)。对此以及在该页面的评论中分享的其它资源的链接，我表示非常感谢。下面是其中一部分。
* [Geometrize](https://github.com/Tw1ddle/geometrize-haxe) 是用 Haxe 写的 Primitive 的一个移植。也有[一个 JS 实现](https://github.com/Tw1ddle/geometrize-haxe-web)，你可以直接 [在你的浏览器上](http://www.samcodes.co.uk/project/geometrize-haxe-web/)尝试它。
* [Primitive.js](https://github.com/ondras/primitive.js)，它也是 Primitive 在 JS 中的一个移植，[primitive.nextgen](https://github.com/cielito-lindo-productions/primitive.nextgen)，它是使用 Primitive.js 和 Electron 的 Primitive 的桌面版应用的一个移植。
* 这里有两个 Twitter 帐户，里面你可以看到一些用 Primitive 和 Geometrize 生成的图像示例。访问 [@PrimitivePic](https://twitter.com/PrimitivePic) 和 [@Geometrizer](https://twitter.com/Geometrizer)。
* [imagetracerjs](https://github.com/jankovicsandras/imagetracerjs)，它是在 JavaScript 中的光栅图像描绘器和矢量化程序。这里也有为 [Java](https://github.com/jankovicsandras/imagetracerjava) 和 [Android](https://github.com/jankovicsandras/imagetracerandroid) 提供的移植。
---
via: 
作者：[José M. Pérez](https://medium.freecodecamp.org/@jmperezperez?source=post_header_lockup) 译者：[qhwdw](https://github.com/qhwdw) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出