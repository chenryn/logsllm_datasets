 Namespace: AWS/ECS
 Dimensions:
 - Name: ClusterName
 Value: !Ref ApplicationCluster
 - Name: ServiceName
 Value: !Sub ${ApplicationService.Name}
 MetricName: CPUUtilization
 Statistic: Average
 Period: 60
 EvaluationPeriods: 3
 Threshold: 40
 ComparisonOperator: GreaterThanThreshold
  ...
  ...
```
在前面的示例中，警报是为低 CPU 和高 CPU 条件创建的，并针对在 todo back and ECS 集群上运行的 todo back and ECS 服务进行了标注。当 ECS 服务的平均 CPU 利用率在 3 分钟(3 x 60 秒)内大于 40%时，将触发高 CPU 警报，当平均 CPU 利用率低于 20%时，将触发低 CPU 警报，同样持续 3 分钟。在每种情况下，都会配置一个警报操作，它引用我们将很快创建的横向扩展和纵向扩展策略资源。
# 定义自动缩放目标
AWS 应用自动缩放要求您定义一个自动缩放目标，这是您需要放大或缩小的资源。对于 ECS 用例，这被定义为 ECS 服务，如前面的示例所示:
```
...
...
Resources:
 ApplicationServiceAutoscalingTarget:
 Type: AWS::ApplicationAutoScaling::ScalableTarget
 Properties:
 ServiceNamespace: ecs
 ResourceId: !Sub service/${ApplicationCluster}/${ApplicationService.Name}
 ScalableDimension: ecs:service:DesiredCount
 MinCapacity: 1
 MaxCapacity: 4
 RoleARN: !Sub ${ApplicationServiceAutoscalingRole.Arn}
  ...
  ...
```
在前面的示例中，您为自动缩放目标定义了以下属性:
*   `ServiceNamespace`:定义目标 AWS 服务的命名空间。当瞄准一个 ECS 服务时，将其设置为`ecs`。
*   `ResourceId`:与目标相关联的资源的标识符。对于 ECS，这在`service//`格式中定义。
*   `ScalableDimension`:指定可以缩放的目标资源类型的属性。在 ECS 服务的情况下，这是`DesiredCount`属性，定义为`ecs:service:DesiredCount`。
*   `MinCapacity`和`MaxCapacity`:期望的 ECS 服务计数可以缩放到的最小和最大界限。
*   `RoleARN`:应用自动扩展服务将用于向外扩展和在目标中扩展的 IAM 角色的 ARN。在前面的示例中，您引用了将在下一节中创建的 IAM 资源。
有关上述每个属性的更多详细信息，您可以参考[应用自动缩放应用编程接口参考](https://docs.aws.amazon.com/autoscaling/application/APIReference/API_RegisterScalableTarget.html)。
# 创建自动缩放 IAM 角色
在应用自动缩放目标的资源定义中，您引用了应用自动缩放服务将承担的 IAM 角色。以下示例定义了此 IAM 角色以及应用自动扩展服务所需的权限:
```
...
...
Resources:
  ApplicationServiceAutoscalingRole:
 Type: AWS::IAM::Role
 Properties:
 AssumeRolePolicyDocument:
 Version: "2012-10-17"
 Statement:
 - Action:
 - sts:AssumeRole
 Effect: Allow
 Principal:
 Service: application-autoscaling.amazonaws.com
 Policies:
 - PolicyName: AutoscalingPermissions
 PolicyDocument:
 Version: "2012-10-17"
 Statement:
 - Effect: Allow
 Action:
 - application-autoscaling:DescribeScalableTargets
 - application-autoscaling:DescribeScalingActivities
 - application-autoscaling:DescribeScalingPolicies
 - cloudwatch:DescribeAlarms
 - cloudwatch:PutMetricAlarm
 - ecs:DescribeServices
 - ecs:UpdateService
 Resource: "*"
  ApplicationServiceAutoscalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
  ...
  ...
```
您可以看到，应用自动扩展服务需要大量与应用自动扩展服务本身相关联的读取权限，以及管理 CloudWatch 警报的能力，并且必须能够更新 ECS 服务，以便管理 ECS 服务所需的计数。请注意，您必须在`AssumeRolePolicyDocument`部分将主体指定为`application-autoscaling.amazonaws.com`，这允许应用自动缩放服务承担该角色。
# 配置横向扩展和纵向扩展策略
配置应用自动扩展所需的最后一项任务是添加横向扩展和纵向扩展策略:
```
...
...
Resources:
  ApplicationServiceAutoscalingScaleInPolicy:
 Type: AWS::ApplicationAutoScaling::ScalingPolicy
 Properties:
 PolicyName: ScaleIn
 PolicyType: StepScaling
 ScalingTargetId: !Ref ApplicationServiceAutoscalingTarget
 StepScalingPolicyConfiguration:
 AdjustmentType: ChangeInCapacity
 Cooldown: 360
 MetricAggregationType: Average
 StepAdjustments:
 - ScalingAdjustment: -1
 MetricIntervalUpperBound: 0
 ApplicationServiceAutoscalingScaleOutPolicy:
Type: AWS::ApplicationAutoScaling::ScalingPolicy
 Properties:
 PolicyName: ScaleOut
 PolicyType: StepScaling
 ScalingTargetId: !Ref ApplicationServiceAutoscalingTarget
 StepScalingPolicyConfiguration:
 AdjustmentType: ChangeInCapacity
 Cooldown: 360
 MetricAggregationType: Average
 StepAdjustments:
 - ScalingAdjustment: 1
 MetricIntervalLowerBound: 0
ApplicationServiceAutoscalingRole:
    Type: AWS::IAM::Role
  ...
  ...
```
在这里，您定义了横向扩展和纵向扩展策略，确保资源名称与您之前在配置用于触发策略的 CloudWatch 警报时引用的名称相匹配。`PolicyType`参数指定您正在配置步长缩放策略，其工作方式类似于您之前定义的 EC2 自动缩放策略，并允许您以增量步长向上或向下缩放。其余的属性是相当不言自明的，尽管`StepAdjustments`属性确实值得进一步描述。
`ScalingAdjustment`指示每次缩放时您将增加或减少多少 ECS 服务计数，而`MetricIntervalLowerBound`和`MetricIntervalUpperBound`属性允许您在超过警报阈值时定义自动缩放操作应适用的附加界限。
前面示例中显示的配置是这样的:每当 CPU 利用率超过或低于配置的 CloudWatch 警报阈值时，应用自动缩放将总是被调用。这是因为未配置的上限和下限分别默认为无穷大或负无穷大，因此报警阈值和无穷大/负无穷大之间的任何度量值都将触发报警。为了帮助进一步阐明度量间隔界限的上下文，如果您改为配置 10 的`MetricIntervalLowerBound`值和 30 的`MetricIntervalUpperBound`，当超过 CloudWatch 警报阈值(当前配置为 40%的 CPU 利用率)时，自动缩放操作将仅适用于 50%利用率(阈值+ `MetricIntervalLowerBound`或 40 + 10 = 50)和 70%利用率(`threshold` + `MetricIntervalUpperBound`或 40 + 30 = 70%)之间。
# 部署应用自动扩展
此时，您已经准备好部署您的 ECS 应用自动扩展解决方案。运行`aws cloudformation deploy`命令后，如果您浏览到 ECS 控制台，选择 todo back and 集群和 todobackend ECS 服务，在自动扩展选项卡上，您应该会看到您的新应用自动扩展配置就位:
![](img/b959b6fd-e570-4d8f-99d1-2d243f9b4f1d.png)
现在，只要您的 ECS 服务的 CPU 利用率超过 40%(所有 ECS 任务的平均值)，您的 ECS 服务的期望计数就会增加一。只要 CPU 利用率超过 40%，这种情况就会持续，最多可执行 4 个任务，根据前面示例的配置，每个自动缩放操作之间会有 360 秒的冷却时间。
在 ECS 服务级别，您不需要担心底层的 ECS 群集资源，因为您的 ECS 群集容量管理解决方案确保群集中始终有多余的容量用于额外的 ECS 任务。这意味着您现在可以根据每个 ECS 服务的特定性能特征独立扩展每个 ECS 服务，并强调了了解每个 ECS 任务为每个应用分配最佳资源的重要性。
# 摘要
在本章中，您创建了一个全面的自动扩展解决方案，允许您根据应用负载和客户需求自动扩展您的 ECS 服务和应用，同时确保您的底层 ECS 集群有足够的资源来根据需要部署新的 ECS 任务。
您首先了解了关键的 ECS 资源，包括 CPU、内存、网络端口和网络接口，以及 ECS 如何分配这些资源。管理 ECS 群集容量时，这些资源决定了 ECS 容器实例是否可以运行给定的 ECS 任务，因此了解每种资源的使用方式至关重要。
接下来，您实现了一个 ECS 群集容量管理解决方案，每当发生 ECS 容器实例状态更改时，该解决方案都会计算 ECS 群集容量。ECS 通过 CloudWatch 事件发布这些状态变化，您创建了一个 CloudWatch 事件规则，该规则触发一个计算当前集群容量的 Lambda 函数。此函数计算两个关键指标-容器容量，表示为群集当前可以支持的额外容器或 ECS 任务的数量，以及空闲主机容量，它定义了整个群集当前有多少“虚拟”主机空闲。容器容量用于横向扩展您的 ECS 群集，每当容器容量低于 1 时，就会添加额外的 ECS 容器实例，这意味着群集不再有足够的资源来部署额外的 ECS 任务。空闲主机容量用于在您的 ECS 群集中进行扩展，每当空闲主机容量大于 1.0 时，就会删除 ECS 容器实例，这意味着您可以安全地删除 ECS 容器实例，并且仍然有能力部署新的 ECS 任务。
我们讨论的一个关键概念是，需要始终对所有资源的最坏情况进行计算，这确保了当一种类型的资源有足够的备用容量，但另一种类型的资源可能容量很低时，您永远不会进行扩展。
最后，您学习了如何配置 AWS 应用自动扩展服务来扩展和缩减 ECS 服务。在这里，您将基于特定于您的应用的适当指标来扩展单个 ECS 服务，并且因为您是在单个 ECS 服务的上下文中进行扩展的，所以这一级别的自动扩展很容易定义和理解。扩展您的 ECS 服务最终将推动您的整个 ECS 群集容量的变化，您实现的 ECS 群集容量管理解决方案可以解决这一问题，并允许您自动扩展您的 ECS 服务，而无需担心对底层 ECS 群集的影响。
在下一章中，您将学习如何持续地将您的 ECS 应用交付给 AWS，并结合我们在前面章节中讨论的所有特性。这将允许您以完全自动化的方式部署最新的应用更改，减少操作开销，并向您的开发团队提供快速反馈。
# 问题
1.  对/错:当您使用 ECS 并部署自己的 ECS 容器实例时，ECS 会自动为您上下扩展集群。
2.  您使用哪种 AWS 服务来扩展您的 ECS 集群？
3.  您使用哪种 AWS 服务来扩展您的 ECS 服务？
4.  您的应用至少需要 300 兆字节的内存，最大需要 1 GB 的内存才能运行。您会在 ECS 任务定义中配置哪些参数来支持此配置？
5.  您将 3 个不同的 ECS 任务部署到单个实例 ECS 集群，每个任务运行不同的应用，并将每个 ECS 任务配置为保留 10 个 CPU 单元。在繁忙时段，其中一个 ECS 任务会占用 CPU，从而降低其他 ECS 任务的速度。假设 ECS 容器实例具有 1，000 个 CPU 单元的容量，您可以做些什么来避免一个 ECS 任务占用 CPU？
6.  对/错:如果您只对 ECS 任务使用动态端口映射，则无需担心网络端口资源。
7.  您将一个实例部署到总共支持四个网络接口的 AWS。假设所有的 ECS 任务都使用 ECS 任务网络，就实例的 ECS 任务数量而言，容量是多少？
8.  什么时候应该禁用 EC2 自动缩放组中的自动缩放？你会怎么做？
9.  您的 ECS 集群目前有 2 个 ECS 容器实例，每个实例有 500 个 CPU 单元和 500 MB 的备用内存容量。您只向集群部署了一种类型的应用，并且当前有两个 ECS 任务正在运行。假设 ECS 任务需要 500 个 CPU 单元，500 MB 内存，并且具有到 TCP 端口 80 的静态端口映射，那么就 ECS 任务的数量而言，集群当前的总体备用容量是多少？
10.  您的 ECS 集群需要支持 3 个不同的 ECS 任务，分别需要 300、400 和 500MB 的内存。如果您的每个 ECS 容器实例都有 2 GB 的内存，那么在执行 ECS 集群容量计算时，按内存计算，每个 ECS 容器实例的最大容器数是多少？
# 进一步阅读
您可以查看以下链接，了解本章所述主题的更多信息:
*   ECS 服务自动缩放:[https://docs . AWS . Amazon . com/Amazon ECS/latest/developer guide/Service-自动缩放. html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-auto-scaling.html)
*   EC2 自动缩放用户指南:[https://docs . AWS . Amazon . com/autoscaling/EC2/User Guide/什么是 Amazon-EC2-自动缩放. html](https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-ec2-auto-scaling.html)
*   EC2 自动缩放策略类型:[https://docs . AWS . Amazon . com/autoscaling/EC2/user guide/as-Scaling-simple-step . html](https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html)
*   自动扩展组滚动更新的推荐最佳实践:[https://AWS . Amazon . com/premium support/知识中心/自动扩展-组-滚动-更新/](https://aws.amazon.com/premiumsupport/knowledge-center/auto-scaling-group-rolling-updates/)
*   应用自动缩放用户指南:[https://docs . AWS . Amazon . com/autoscaling/application/User Guide/什么是应用-自动缩放. html](https://docs.aws.amazon.com/autoscaling/application/userguide/what-is-application-auto-scaling.html)
*   任务定义参数参考(见`cpu`、`memory`和`memoryReservation`参数):[https://docs . AWS . Amazon . com/Amazon ics/latest/developer guide/task _ definition _ Parameters . html # container _ definitions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#container_definitions)
*   CloudFormation CloudWatch 事件规则资源参考:[https://docs . AWS . Amazon . com/AWS cloud information/latest/user guide/AWS-Resource-Events-Rule . html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-events-rule.html)
*   cloud information cloud watch alarm resource Reference:[https://docs . AWS . Amazon . com/AWS cloud information/latest/user guide/AWS-properties-CW-alarm . html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cw-alarm.html)
*   CloudFormation EC2 自动扩展策略资源参考:[https://docs . AWS . Amazon . com/AWS cloud information/latest/user guide/AWS-properties-as-Policy . html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-as-policy.html)
*   CloudFormation 应用自动缩放可缩放目标资源参考:[https://docs . AWS . Amazon . com/AWS cloud information/latest/user guide/AWS-Resource-Application autoscaling-scalabletarget . html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-applicationautoscaling-scalabletarget.html)
*   CloudFormation 应用自动缩放策略资源参考:[https://docs . AWS . Amazon . com/AWS cloud information/latest/user guide/AWS-Resource-Application autoscaling-Scaling Policy . html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-applicationautoscaling-scalingpolicy.html)**