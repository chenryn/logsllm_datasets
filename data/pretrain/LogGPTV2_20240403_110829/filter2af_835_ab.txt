        if (msg.value > 0)
          Deposit(msg.sender, msg.value);
        else if (msg.data.length > 0)
          _walletLibrary.delegatecall(msg.data);
      }
      ...  
      // FIELDS
      address constant _walletLibrary = 0xcafecafecafecafecafecafecafecafecafecafe;
    }
    // constructor - just pass on the owner array to the multiowned and
    // the limit to daylimit
    function initWallet(address[] _owners, uint _required, uint _daylimit) only_uninitialized {
        initDaylimit(_daylimit);
        initMultiowned(_owners, _required);
    }
    // constructor is given number of sigs required to do protected "onlymanyowners" transactions
    // as well as the selection of addresses capable of confirming them.
    function initMultiowned(address[] _owners, uint _required) only_uninitialized {
        m_numOwners = _owners.length + 1;
        m_owners[1] = uint(msg.sender);
        m_ownerIndex[uint(msg.sender)] = 1;
        for (uint i = 0; i  0) throw; _; }
根据上述代码我们知道，此时为了防止第一次的Parity中的问题，这里的几段函数都增加了`only_uninitialized`来限制签名人的数量。
Wallet 合约基本上会通过 delegate call 将所有调用传递给 WalletLibrary。此代码段中的常量地址
_walletLibrary，即是实际部署的 WalletLibrary 合约的占位符。
而我们可以使用WalletLibrary 合约可以初始化，并被用户拥有。
    function() payable {
        // just being sent some cash?
        if (msg.value > 0)
          Deposit(msg.sender, msg.value);
        else if (msg.data.length > 0)
          _walletLibrary.delegatecall(msg.data);
      }
倘若我们能够执行上述合约中的`_walletLibrary.delegatecall(msg.data);`，此时，我们通过往这个合约地址转账一个value
= 0, msg.data.length >
0的交易，以执行`_walletLibrary.delegatecall`分支。并将`msg.data`中传入我们要执行的`initWallet
()`函数。而此类函数的特性也就帮助我们将钱包进行了初始化。
    function initMultiowned(address[] _owners, uint _required) only_uninitialized {
        m_numOwners = _owners.length + 1;
        m_owners[1] = uint(msg.sender);
        m_ownerIndex[uint(msg.sender)] = 1;
        for (uint i = 0; i  0)
          Deposit(msg.sender, msg.value);
      }
这种类型的 Parity 多签名钱包中的所有以太都会立即丢失或者说永久不可恢复。
流程图如下：
#### 3防御措施
这档次的Parity事件有几种预防的方式，一是智能合约摒弃自杀函数，这样的话即使黑客获得了高级权限也无法将合约移除。第二是可以进一步对initWallet、initDaylimit及initMultiowned添加internal限定类型，以禁止外部调用：
    // constructor - just pass on the owner array to the multiowned and
    // the limit to daylimit
    function initWallet(address[] _owners, uint _required, uint _daylimit) internal only_uninitialized {
        initDaylimit(_daylimit);
        initMultiowned(_owners, _required);
    }
    // constructor - stores initial daily limit and records the present day's index.
    function initDaylimit(uint _limit) internal only_uninitialized {
        m_dailyLimit = _limit;
        m_lastDay = today();
    }
    // constructor is given number of sigs required to do protected "onlymanyowners" transactions
    // as well as the selection of addresses capable of confirming them.
    function initMultiowned(address[] _owners, uint _required) internal only_uninitialized {
        m_numOwners = _owners.length + 1;
        m_owners[1] = uint(msg.sender);
        m_ownerIndex[uint(msg.sender)] = 1;
        for (uint i = 0; i 
  * 2 
  * 3 
  * 4 
  * 5 
**本稿为原创稿件，转载请标明出处。谢谢。**