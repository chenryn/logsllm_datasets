which allows comparisons over ciphertexts while hiding all other information about the encrypted
messages. More speciﬁcally, an ORE scheme is a MIFE scheme with the function f(x, y) that
outputs the ordering between x and y. This ORE scheme achieves the optimal security deﬁnition
for a scheme that allows the comparison functionality over encrypted data, improving over the
security level provided by order-preserving encryption schemes.
MIFE implementation. We implemented the Boneh et al. [BLR+15] MIFE construction on
top of the libmmap library, and provide interfaces for keygen, encrypt, and eval, which perform the
respective operations supported by MIFE. We parallelize the computation performed during keygen,
but for encrypt, we choose to sequentially construct the encodings belonging to the ciphertext, and
instead defer the parallelism to the underlying mmap implementation for producing encodings, in
the interest of reducing memory usage at the cost of potentially increased running times. We note
that, since CLT enjoys much more parallelism than GGHLite when constructing encodings, this
optimization causes the encrypt time for GGHLite to be less eﬃcient. Finally, for eval, we multiply
encodings in parallel for CLT, since the multiplication of CLT encodings natively does not support
parallelism. However, for GGHLite, we choose to multiply encodings sequentially, and instead rely
on the parallelism aﬀorded by GGHLite encoding multiplication.
The ciphertexts produced by a call to encrypt on an ‘-length input are split into ‘ components
(one for each input slot), which can be easily separated and combined with diﬀerent components
from other ciphertexts in a later call to eval. Hence, with a collection of full ciphertexts, an evaluator
can specify which components from each ciphertext should be passed as input to eval, in order to
evaluate the function on components originating from diﬀerent sources.
12
6.1 Optimizing Comparisons
In this section, we describe a case study of applying the optimizations detailed in §4 to the com-
parison function. We establish two distinct “variants” of the comparison function which result
in shorter ciphertext sizes. Both variants are built from a combination of condensing the input
representation into a larger base d > 2, followed by dimension reduction, and optionally applying
matrix pre-multiplication.
• DC-variant. The degree-compressed optimization is to ﬁrst apply matrix pre-multiplication
to re-order the reading of the input bits as in Equation (1). Then, the dimensions of the
resulting matrices from the layered state machine are slightly reduced.
• MC-variant. The matrix-compressed optimization is to directly apply dimension reduction in
the normal interleaved ordering of the bits (as x1y1x2y2 ··· xnyn). Here, the dimensions of
the matrices can be reduced to depend only linearly in the base representation d, as opposed
to quadratically.
We now discuss each optimization in more detail.
The degree-compressed variant (DC-variant). By optimizing the (layered) comparison state
machine, we obtain that not all matrices need to be of dimension (d + 3) × (d + 3). For example,
the ﬁrst matrix need only be of dimension 1 × d, and the second matrix need only be of dimension
d×(d+2). Also, the last matrix can be of dimension (d+2)×3. And ﬁnally, each of the remaining
intermediate matrices need only be of dimension (d + 2) × (d + 2). Putting these observations
together, the total number of encodings in the ciphertext is
M = d + d(d + 2) + 3(d + 2) + (κ − 3)(d + 2)2
= d2(κ − 2) + (d + 1)(4κ − 6).
(2)
The matrix-compressed variant (MC-variant). Note, however, that if we do not apply the
matrix pre-multiplication optimization, but instead apply dimension reduction directly to the com-
parison state machine associated with the normal (not interleaved) ordering of the input digits,
then the ﬁrst matrix is of dimension 1 × d, the second matrix is of dimension d × 3, and all other
κ − 2 matrices are of dimension either 3 × (d + 2) or (d + 2) × 3. Putting this together, we have
κ = 2n and
M = d + 3d + 3(κ − 2)(d + 2)
= 3(κ − 2)(d + 2) + 4d.
(3)
Concretely, for a domain of size N = 1012, if we choose to represent the inputs in base d = 5,
then this implies n = 18 (since 12 ≤ log10(518)  y.
The basic ORE scheme Πore is deﬁned as follows.
• keygen(1λ) → (pp, sk). The algorithm samples a PRF key k
r←− {0, 1}λ for F, and a random
permutation π : [N] → [N]. The secret key sk is the pair (k, π), and there are no public
parameters.
• encrypt(sk, i, x) → ct. Write sk as (k, π).
If i = 1, the ciphertext output is simply ct =
r←− {0, 1}λ,
(F(k, π(x)), π(x)).
and for j ∈ [N], it computes vj = cmp(π−1(j), y) ⊕ H(F(k, j), r). Finally, it outputs ct =
(r, v1, v2 . . . , vN).
If i = 2, then the encryption algorithm samples a nonce r
• eval(pp, ct1, ct2) → {0, 1}. The compare algorithm ﬁrst parses ct1 = (k0, h) and ct2 =
(r, v1, v2, . . . , vn), then outputs vh ⊕ H(k0, r).
Note that a single ciphertext from this scheme is precisely N + 2λ + dlog2(N)e bits long. For
N = 1012 and λ = 80, this amounts to ciphertexts of length 116.42 GB.5
Choosing the best optimizations. Our goal is to construct an ORE scheme which achieves
shorter ciphertexts than the above construction, without compromising security. To do this, we use
our MIFE implementation for the comparison function, and we apply our optimizations to make
the ciphertext as short as possible.
We compare the ciphertext sizes for four diﬀerent ORE constructions, obtained from either using
the GGHLite or CLT mmap, and by applying either the DC-variant or MC-variant optimizations. For
each of these options, we ﬁx the input domain size N = 1012 and vary the input base representation
d ∈ [2, 25]. Using Equations (2) and (3), we can compute the estimated ciphertext size as a function
of d (since κ is determined by the choice of d and N). See Figure 6.1 for the results. We ﬁnd that,
for N = 1012, the shortest ciphertexts for ORE from GGHLite are obtained when d = 5 using the
DC-variant optimization, and the shortest ciphertexts for ORE from CLT are obtained when d = 4
using the DC-variant optimization as well.
5Clearly, increasing λ has a relatively unnoticeable eﬀect on the overall ciphertext size for the settings of N we
consider.
14
GGHLite (DC)
GGHLite (MC)
CLT (DC)
CLT (MC)
)
B
G
(
e
z
i
S
t
x
e
t
r
e
h
p
C
i
1,000
100
10
2
5
10
15
Input Base d
20
25
Figure 6.1: Estimates of the ciphertext size (in GB) for ORE with best-possible semantic security at
λ = 80, for domain size N = 1012 and for bases d ∈ [2, 25]. We compare GGHLite and CLT, with the
DC-variant and MC-variant optimizations.
)
B
G
(
e
z
i
S
t
x
e
t
r
e
h
p
C
i
1,000
100
10
1
0.1
0.01
8
9
10
GGHLite
11
CLT
12
Basic
13
Domain Size Exponent e
Figure 6.2: Estimates of the ciphertext size (in GB) for ORE with best-possible semantic security at
λ = 80, for varying domain sizes. The exponent e on the x-axis denotes support for plaintexts in the range
from 1 to N = 10e. We compare GGHLite map (DC-variant), the CLT map, and the basic construction Πore
(described in §6.2).
Under these settings, the DC-variant optimization for GGHLite reads the inputs in base 5,
requiring κ = 19, to produce a total of 845 encodings per ciphertext, for a total size of 91.4 GB.
For CLT, the DC-variant optimization reads in the inputs in base 4, requiring κ = 21, to produce
a total of 694 encodings, for a total size of 5.68 GB.
We also measure the ciphertext size as we vary the domain size; see Figure 6.2. We measure
the estimated ciphertext size for various domain sizes when using GGHLite, CLT, and the Πore
construction described above. The results for GGHLite and CLT are using the optimal bases as
detailed in Figure 6.1. We ﬁnd that for N = 1011 and N = 1012, ORE using the CLT mmap and
GGHLite mmap, respectively, produces a smaller ciphertext than Πore. This demonstrates that for
certain domain sizes, our ORE construction produces the smallest known ciphertexts (versus ORE
schemes that do not require mmaps).
15
6.3 Three-Input DNF Encryption
We now explore the applications of MIFE to a function on three inputs, which we call the 3DNF
function. For n-bit inputs x = x1 ··· xn, y = y1 ··· yn, and z = z1 ··· zn, the 3DNF function is
deﬁned as
3DNF(x, y, z) = (x1 ∧ y1 ∧ z1) ∨ ··· ∨ (xn ∧ yn ∧ zn) ∈ {0, 1}.
This function bears resemblance to the “tribes” function studied by Gentry et al. [GLW14], who
also use mmaps to construct tribe instances. We refer to a MIFE scheme for the 3DNF function as
a 3DNF encryption scheme, and we refer to each ciphertext as consisting of three components, one
for each input slot: the left encryption, middle encryption, and right encryption. To the best of our
knowledge, 3DNF encryption schemes do not appear to follow directly from simpler cryptographic
assumptions.
Application to fraud detection. An immediate application of 3DNF encryption is in the fraud
detection of encrypted transactions. Consider the scenario where a (stateless) user makes payments
through transactions that are audited by a payment authority. In this setting, each transaction is
associated with a string of n ﬂags, represented as bits pertaining to a set of n properties of the
transaction. A payment authority, in the interest of detecting fraud, restricts the user to make at
most (say) ‘ = 3 transactions per hour, and wants to raise an alarm if a common ﬂag is set in all ‘
of the transactions made in the past hour (if less than ‘ transactions were made in the past hour,
then the authority does not need to perform a check).
To protect the privacy of the user, the length-n ﬂag string associated with each transaction
can be sent to the payment authority as encrypted under a 3DNF encryption scheme, where the
stateless user holds the decryption key. Here, the user would send a left encryption for the ﬁrst
transaction, a middle encryption for the second, and a right encryption for the third. Then, since
the payment authority cannot decrypt any of the ﬂag strings for the transactions, the privacy of
the user’s transactions is protected. However, the payment authority can still perform the fraud
detection check by evaluating a set of ‘ transactions to determine if they satisfy the 3DNF function.
Since we require that the user is stateless between transactions, this application ﬁts the model for
a 3DNF encryption scheme, and does not seem to directly follow from simpler primitives.
Optimizing 3DNF encryption. Similar to the case of the comparison function, we can apply
the branching program optimizations to the 3DNF function as well, in order to reduce the overall
eﬃciency of the resulting 3DNF encryption scheme. We constructed a 3DNF encryption scheme
using our MIFE implementation, for n = 16 bit inputs at security parameter λ = 80. We optimized
the 3DNF encryption scheme by condensing the input representation into base d = 4. Additionally,
we applied the matrix pre-multiplication optimization, which meant that our input bits were read
in the order x1y1z1z2y2x2x3y3 ··· (the natural generalization of the interleaving of Equation (1)
to three inputs). This resulted in a setting of degree κ = 17 for the underlying mmap. Finally,
we used cryfsm to generate the corresponding MBP, which automatically applied the appropriate
dimension reduction optimizations. Under the CLT mmap, a left encryption is 637 MB, a middle
encryption is 1.4 GB, and a right encryption is 680 MB.
7 Program Obfuscation
A program obfuscator [BGI+01, GGH+13b] is a compiler that aims to make a program “unintelligi-
ble” while preserving its functionality. Formally, an obfuscator O is a tuple of algorithms written as
16
O = (obf, eval), where the obfuscation algorithm obf takes as input a program P (e.g., expressed as
a Boolean circuit), and outputs an obfuscated program obf(P), and the evaluation algorithm takes
an obfuscated program obf(P) and produces an output. An obfuscator is correct for a program P
if, for all valid inputs x accepted by P, we have that eval(obf(P))(x) = P(x).
VBB and pseudo-VBB security. An obfuscator O is virtual black-box (VBB) secure6 for a
program P if for any eﬃcient adversary A, there exists an eﬃcient simulator S, given only oracle
access to P(·), for which the quantity
(cid:12)(cid:12)(cid:12)PrhA(1λ, obf(P)) = 1i − PrhSP(·)(1λ) = 1i(cid:12)(cid:12)(cid:12)
is negligible. We say that an obfuscator O is pseudo-VBB secure (pVBB) for program P and
obfuscator O0 = (obf0, eval0) if O0 is both VBB secure and for every eﬃcient adversary A, there
exists an eﬃcient adversary B for which the quantity
(cid:12)(cid:12)(cid:12)PrhA(1λ, obf(P)) = 1i − PrhB(1λ, obf0(P)) = 1i(cid:12)(cid:12)(cid:12)
is negligible. In other words, if an obfuscator O is pVBB secure for a program P and obfuscator
O0, then any eﬃcient attack on the security of O translates directly to an eﬃcient attack on the
VBB security of O0 for the program P.
In our work, we construct a point function obfuscator that is pVBB secure for the Sahai-Zhandry
obfuscator [SZ14]. Our obfuscator operates identically to the Sahai-Zhandry obfuscator, which is
VBB secure, except that we discard half of the ciphertext that corresponds to the second input
in the “dual-input” branching programs that obfuscator uses. Eﬀectively, our obfuscator can be
seen as operating on “single-input” branching programs, which do not obtain VBB security, but do
obtain pseudo-VBB security. We emphasize that this distinction in security is purely deﬁnitional
from an attacker’s point of view, as any attack on our obfuscator immediately results in an attack
on the Sahai-Zhandry obfuscator.
In this section we show how we use cryfsm and libmmap to build such a program obfusca-
tor. Apon et al. [AHKM14] gave the ﬁrst implementation of program obfuscation, using the CLT
mmap [CLT13] and a program compiler based on the approaches of Barak et al. [BGK+14] and
Ananth et al. [AGIS14]. We extend this codebase in the following ways: