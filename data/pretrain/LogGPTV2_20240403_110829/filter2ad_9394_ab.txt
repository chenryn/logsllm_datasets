Nginx目录遍历漏洞和apache一样，属于配置方面的问题。错误的配置可能导致目录遍历与源码泄露。如图5.1
图5.1
CRLF利用了HTTP包Header与Body是用两个CRLF分隔的这一特性，通过控制HTTP消息头中的字符。若采用解码跳转，攻击者就可以注入一些恶意的换行来注入一些会话Cookie或者HTML代码。如图5.2。任何可设置HTTP头的场景都会出现CRLF注入问题。
图5.2
###  （二）漏洞演示及利用
1、目录遍历
当autoindex on;存在时，可直接访问目录。如图5.3
图5.3
2、CRLF注入
开启burp，刷新页面，抓包，修改数据包。结果如图5.4
图5.4
可以看到，经过恶意修改，攻击者构造的url中的JSPSEEID值被服务器读取成了请求头中的cookie值，达到了会话固定的目的。出去会话固定，通过两次CRLF可将URL中编写的恶意脚本（如反射型XSS）被服务器识别成请求体，从而达成攻击。如图5.5。如未弹窗可能是因为浏览器Filter对XSS特征进行了过滤，并且进行了跳转。
图5.5
###  （三）漏洞修复
1、针对目录遍历，只需在配置文件中删除autoindex on即可。修复结果如图5.6
图5.6
2、针对CRLF注入，修改配置文件使用不解码的url跳转。
将return 302 [https://$host$uri；](https://%24host%24uri%EF%BC%9B) 修改为return 302
[https://$host$request_uri；](https://%24host%24request_uri%EF%BC%9B) 修复结果如图5.7
图5.7
###  （四）补充
关于Nginx配置不当造成目录穿越，其成因除去目录遍历漏洞中开启的autoindex
on;选项，同时在配置文件/etc/nginx/conf.d/error2.conf中，没有闭合跳转目录如图5.8，造成目录穿越如图5.9
图5.8
图5.9
修复方法也很简单，将/files闭合，变为/files/即可，效果如图5.10
图5.10
## 六、apache文件解析漏洞
文件解析与文件上传漏洞往往伴生存在。apache解析文件时逻辑存在问题，造成请求某一个精心编辑过的非法文件时被当作正常的php文件来执行，造成被getshell。
###  （一）漏洞原理
因为apache解析php时，当文件的最后一个后缀php相关时，会把文件交给php处理器处理，完成后结果返回给apache，再发送给浏览器。而当一个文件以多个点分隔无法识别时，则继续向左试别。即当请求shell.php.360,将试别出php，然后交给php处理。
###  （二）漏洞演示及利用
当上传1.php时，由于存在上传后缀名限制，无法完成上传如图6.1，一般情况下，若上传允许的类型则无法利用，但存在文件解析漏洞时，可以绕过。
图6.1
此时上传1.php.aaa文件，则可以上传成功。同时因存在解析问题，1.php.aaa文件可以被访问。如图6.2
图6.2
###  （三）漏洞修复
在配置文件中，不使用AddHandler，改用SetHandler，写好正则，就不会有解析问题。
    SetHandler application /x-httpd-php
禁止.php.这样的文件执行
    Require all denied
###  （四）补充
此漏洞爆出后，官方进行了一次修复，采用了黑名单，如图6.3
图6.3
但之后又爆出了同类型的漏洞（编号：CVE-2017-15715），可通过上传一个包含换行符（x0A）的文件绕过检测，如图6.4、图6.5，Apache2.4.0-2.4.29均受到此漏洞影响。在后续版本中官方已经修复了此漏洞，及时更新即可修复。
图6.4
图6.5
## 七、tomcat任意文件上传
Tomcat远程代码执行漏洞，编号：CVE-2017-12615
###  （一）漏洞原理
当readonly参数设置为false时，即可通过PUT方式创建一个JSP文件，并可以执行任意代码。如图7.1
图7.1
###  （二）漏洞演示及利用
开启Burp，访问Tomcat服务，抓包，修改数据包，转发至repeater并发送，提示404，请求被拦截。如图7.2
图7.2
再次修改请求包，处理文件名相关限制。如图7.3
图7.3
###  （三）漏洞修复
1、将Tomcat、jdk、php更新
2、关闭可通过PUT方式创建JSP文件的功能。
## 八、weblogic SSRF漏洞
Weblogic未对用户url进行过滤，从恶意构造的的url读取数据并展示功能，导致攻击者可借助服务端实现访问本无权访问的url。漏洞编号：CVE-2014-4210
###  （一）漏洞原理
Weblogic的SSRF漏洞出现在uddi组件（也就意味着未安装此组件则无此漏洞），其中的uudi包实现包uddiexplorer.war下的SearchPublicRegistries.jsp。
###  （二）漏洞利用
地址栏输入url：
[http://10.10.10.130:7001/uddiexplorer/SearchPublicRegistries.jsp?rdoSearch=name&txtSearchname=sdf&txtSearchkey=&txtSearchfo=&selfor=Business+location&btnSubmit=Search&operator=http://127.0.0.1:7001](http://10.10.10.130:7001/uddiexplorer/SearchPublicRegistries.jsp?rdoSearch=name&txtSearchname=sdf&txtSearchkey=&txtSearchfo=&selfor=Business+location&btnSubmit=Search&operator=http://127.0.0.1:7001)
得到结果如图8.1
图8.1
修改url中端口为一个未开放的端口如8888，会得到不同的回显如图8.2，根据回显不同，可以判断端口是否开放，以进行下一步渗透
图8.2
网络上获取到批量检测脚本可进行批量端口检测。（附件二），实际操作中此阶段有可能会得到内网网段，获取网段后可使用脚本快速检测。
在检测到相关网段和端口后，可以通过传入%0a%0d来注入换行符，利用Redis反弹shell。
###  （三）漏洞修复
最直接的方式是将SearchPublicRegistries.jsp直接删除。
###  （四）补充
Weblogic除去上述SSRF漏洞，还存在任意文件上传漏洞等，任意文件上传几乎每年都会有新的漏洞。最近的漏洞编号为CVE-2018-2894，此漏洞成因为若开启Web
Service Test Page，可上传任意jsp文件，进而获取服务器权限。
内容较多，暂不展开分析。