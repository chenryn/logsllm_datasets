>>>p.io_counters（） #进程IO信息，包括读写IO数及字节数
pio（read_count=41133， write_count=16811， read_bytes=37023744， write_bytes=4722688）
>>>p.connections（） #返回打开进程socket的namedutples列表，包括fs、family、
laddr
#等信息
[pconn（fd=65， family=10， type=1， laddr=（'：：ffff：
192.168.1.20'， 9000）， raddr=（），……]
>>>p.num_threads（） #进程开启的线程数
33
（2）popen类的使用
psutil提供的popen类的作用是获取用户启动的应用程序进程信息，以便跟踪
程序进程的运行状态。具体实现方法如下：
>>> import psutil
>>>from subprocess import PIPE
#通过psutil的Popen方法启动的应用程序，可以跟踪该程序运行的所有相关信息
>>> p = psutil.Popen（["/usr/bin/python"， "-
c"， "print（'hello'）"]， stdout=PIPE）
>>>p.name（）
'python'
>>>p.username（）
'root'
>>>p.communicate（）
（'hello\n'， None）
>>>p.cpu_times（） #得到进程运行的CPU时间，更多方法见上一小节
pcputimes（user=0.01， system=0.040000000000000001）
参考提示
·1.1.1节示例参考https://github.com/giampaolo/psutil。
·1.1.1节模块说明参考官网http://psutil.readthedocs.org/en/latest/。
1.2 实用的IP地址处理模块IPy
IP地址规划是网络设计中非常重要的一个环节，规划的好坏会直接影响路由
协议算法的效率，包括网络性能、可扩展性等方面，在这个过程当中，免不了
要计算大量的IP地址，包括网段、网络掩码、广播地址、子网数、IP类型等。
Python提供了一个强大的第三方模块IPy（https://github.com/haypo/python-
ipy/），最新版本为V0.81。IPy模块可以很好地辅助我们高效完成IP的规划工
作，下面进行详细介绍。
以下是IPy模块的安装，这里采用源码的安装方式：
# wget https：//pypi.python.org/packages/source/I/IPy/IPy-0.81.tar.gz --no-
check-certificate
# tar -zxvf IPy-0.81.tar.gz
# cd IPy-0.81
# python setup.py install
1.2.1 IP地址、网段的基本处理
IPy模块包含IP类，使用它可以方便处理绝大部分格式为IPv6及IPv4的网络和
地址。比如通过version方法就可以区分出IPv4与IPv6，如：
>>>IP（'10.0.0.0/8'）.version（）
4 #4代表IPv4类型
>>>IP（'：：1'）.version（）
6 #6代表IPv6类型
通过指定的网段输出该网段的IP个数及所有IP地址清单，代码如下：
from IPy import IP
ip = IP（'192.168.0.0/16'）
print ip.len（） #输出192.168.0.0/16网段的IP个数
for x in ip： #输出192.168.0.0/16网段的所有IP清单
print（x）
执行结果如下：
65536
192.168.0.0
192.168.0.1
192.168.0.2
192.168.0.3
192.168.0.4
192.168.0.5
192.168.0.6
192.168.0.7
192.168.0.8
……
下面介绍IP类几个常见的方法，包括反向解析名称、IP类型、IP转换等。
>>>from IPy import IP
>>>ip = IP（'192.168.1.20'）
>>>ip.reverseNames（） #反向解析地址格式
['20.1.168.192.in-addr.arpa.']
>>>ip.iptype（） #192.168.1.20为私网类型'PRIVATE'
>>> IP（'8.8.8.8'）.iptype（） #8.8.8.8为公网类型
'PUBLIC'
>>> IP（"8.8.8.8"）.int（） #转换成整型格式
134744072
>>> IP（'8.8.8.8'）.strHex（） #转换成十六进制格式
'0x8080808'
>>> IP（'8.8.8.8'）.strBin（） #转换成二进制格式
'00001000000010000000100000001000'
>>> print（IP（0x8080808）） #十六进制转成IP格式
8.8.8.8
IP方法也支持网络地址的转换，例如根据IP与掩码生产网段格式，如下：
>>>from IPy import IP
>>>print（IP（'192.168.1.0'）.make_net（'255.255.255.0'））
192.168.1.0/24
>>>print（IP（'192.168.1.0/255.255.255.0'， make_net=True））
192.168.1.0/24
>>>print（IP（'192.168.1.0-192.168.1.255'， make_net=True））
192.168.1.0/24
也可以通过strNormal方法指定不同wantprefixlen参数值以定制不同输出类型
的网段。输出类型为字符串，如下：
>>>IP（'192.168.1.0/24'）.strNormal（0）
'192.168.1.0'
>>>IP（'192.168.1.0/24'）.strNormal（1）
'192.168.1.0/24'
>>>IP（'192.168.1.0/24'）.strNormal（2）
'192.168.1.0/255.255.255.0'
>>>IP（'192.168.1.0/24'）.strNormal（3）
'192.168.1.0-192.168.1.255'
wantprefixlen的取值及含义：
·wantprefixlen=0，无返回，如192.168.1.0；
·wantprefixlen=1，prefix格式，如192.168.1.0/24；
·wantprefixlen=2，decimalnetmask格式，如192.168.1.0/255.255.255.0；
·wantprefixlen=3，lastIP格式，如192.168.1.0-192.168.1.255。
1.2.2 多网络计算方法详解
有时候我们想比较两个网段是否存在包含、重叠等关系，比如同网络但不同
prefixlen会认为是不相等的网段，如10.0.0.0/16不等于10.0.0.0/24，另外即使具有
相同的prefixlen但处于不同的网络地址，同样也视为不相等，如10.0.0.0/16不等
于192.0.0.0/16。IPy支持类似于数值型数据的比较，以帮助IP对象进行比较，
如：
>>>IP（'10.0.0.0/24'） >> '192.168.1.100' in IP（'192.168.1.0/24'）
True
>>>IP（'192.168.1.0/24'） in IP（'192.168.0.0/16'）
True
判断两个网段是否存在重叠，采用IPy提供的overlaps方法，如：
>>>IP（'192.168.0.0/23'）.overlaps（'192.168.1.0/24'）
1 #返回1代表存在重叠
>>>IP（'192.168.1.0/24'）.overlaps（'192.168.2.0'）
0 #返回0代表不存在重叠
示例 根据输入的IP或子网返回网络、掩码、广播、反向解析、子网数、IP
类型等信息。
#！/usr/bin/env python
from IPy import IP
ip_s = raw_input（'Please input an IP or net-range： '） #接收用户输入，参数为
IP地址或网段地址
ips = IP（ip_s）
if len（ips） > 1： #为一个网络地址
print（'net： %s' % ips.net（）） #输出网络地址
print（'netmask： %s' % ips.netmask（）） #输出网络掩码地址
print（'broadcast： %s' % ips.broadcast（）） #输出网络广播地址
print（'reverse address： %s' % ips.reverseNames（）[0]） #输出地址反向解
析
print（'subnet： %s' % len（ips）） #输出网络子网数
else： #为单个IP地址
print（'reverse address： %s' % ips.reverseNames（）[0]） #输出IP反向解析
print（'hexadecimal： %s' % ips.strHex（）） #输出十六进制地址
print（'binary ip： %s' % ips.strBin（）） #输出二进制地址
print（'iptype： %s' % ips.iptype（）） #输出地址类型，如PRIVATE、PUBLIC、
LOOPBACK等
分别输入网段、IP地址的运行返回结果如下：
# python simple1.py
Please input an IP or net-range： 192.168.1.0/24
net： 192.168.1.0
netmask： 255.255.255.0
broadcast： 192.168.1.255
reverse address： 1.168.192.in-addr.arpa.
subnet： 256
hexadecimal： 0xc0a80100
binaryip： 11000000101010000000000100000000
iptype： PRIVATE
# python simple1.py
Please input an IP or net-range： 192.168.1.20
reverse address： 20.1.168.192.in-addr.arpa.
hexadecimal： 0xc0a80114
binaryip： 11000000101010000000000100010100
iptype： PRIVATE
参考提示
·1.2.1节官网文档与示例参考https://github.com/haypo/python-ipy/。
·1.2.2节示例1参考http://blog.philippklaus.de/2012/12/ip-address-analysis-using-
python/和http://www.sourcecodebrowser.com/ipy/0.62/class_i_py_1_1_i_pint.html等
文章的IPy类说明。
1.3 DNS处理模块dnspython
dnspython（http://www.dnspython.org/）是Python实现的一个DNS工具包，它
支持几乎所有的记录类型，可以用于查询、传输并动态更新ZONE信息，同时支
持TSIG（事务签名）验证消息和EDNS0（扩展DNS）。在系统管理方面，我们
可以利用其查询功能来实现DNS服务监控以及解析结果的校验，可以代替
nslookup及dig等工具，轻松做到与现有平台的整合，下面进行详细介绍。
首先介绍dnspython模块的安装，这里采用源码的安装方式，最新版本为
1.9.4，如下：
# http：//www.dnspython.org/kits/1.9.4/dnspython-1.9.4.tar.gz
# tar -zxvf dnspython-1.9.4.tar.gz
# cd dnspython-1.9.4
# python setup.py install
1.3.1 模块域名解析方法详解
dnspython模块提供了大量的DNS处理方法，最常用的方法是域名查询。
dnspython提供了一个DNS解析器类——resolver，使用它的query方法来实现域名
的查询功能。query方法的定义如下：
query（self， qname， rdtype=1， rdclass=1， tcp=False， source=None， raise_on_no_answer=True， source_port=0）
其中，qname参数为查询的域名。rdtype参数用来指定RR资源的类型，常用的有
以下几种：
·A记录，将主机名转换成IP地址；
·MX记录，邮件交换记录，定义邮件服务器的域名；
·CNAME记录，指别名记录，实现域名间的映射；
·NS记录，标记区域的域名服务器及授权子域；
·PTR记录，反向解析，与A记录相反，将IP转换成主机名；
·SOA记录，SOA标记，一个起始授权区的定义。
rdclass参数用于指定网络类型，可选的值有IN、CH与HS，其中IN为默认，使用
最广泛。tcp参数用于指定查询是否启用TCP协议，默认为False（不启用）。
source与source_port参数作为指定查询源地址与端口，默认值为查询设备IP地址
和0。raise_on_no_answer参数用于指定当查询无应答时是否触发异常，默认为
True。
1.3.2 常见解析类型示例说明
常见的DNS解析类型包括A、MX、NS、CNAME等。利用dnspython的
dns.resolver.query方法可以简单实现这些DNS类型的查询，为后面要实现的功能
提供数据来源，比如对一个使用DNS轮循业务的域名进行可用性监控，需要得
到当前的解析结果。下面一一进行介绍。
（1）A记录
实现A记录查询方法源码。
【/home/test/dnspython/simple1.py】
#！/usr/bin/env python
import dns.resolver
domain = raw_input（'Please input an domain： '） #输入域名地址
A = dns.resolver.query（domain， 'A'） #指定查询类型为A记录
for i in A.response.answer： #通过response.answer方法获取查询回应信息
for j in i.items： #遍历回应信息
print j.address
运行代码查看结果，这里以www.google.com域名为例：
# python simple1.py
Please input an domain： www.google.com
173.194.127.180
173.194.127.178
173.194.127.176
173.194.127.179
173.194.127.177
（2）MX记录
实现MX记录查询方法源码。
【/home/test/dnspython/simple2.py】
#！/usr/bin/env python
import dns.resolver
domain = raw_input（'Please input an domain： '）
MX = dns.resolver.query（domain， 'MX'） #指定查询类型为MX记录
for i in MX： #遍历回应结果，输出MX记录的preference及exchanger信息
print 'MX preference ='， i.preference， 'mail exchanger ='， i.exchange
运行代码查看结果，这里以163.com域名为例：
# python simple2.py
Please input an domain： 163.com
MX preference = 10 mail exchanger = 163mx03.mxmail.netease.com.
MX preference = 50 mail exchanger = 163mx00.mxmail.netease.com.
MX preference = 10 mail exchanger = 163mx01.mxmail.netease.com.
MX preference = 10 mail exchanger = 163mx02.mxmail.netease.com.
（3）NS记录
实现NS记录查询方法源码。
【/home/test/dnspython/simple3.py】
#！/usr/bin/env python
import dns.resolver
domain = raw_input（'Please input an domain： '）
ns = dns.resolver.query（domain， 'NS'） #指定查询类型为NS记录
for i in ns.response.answer：
for j in i.items：
print j.to_text（）
只限输入一级域名，如baidu.com。如果输入二级或多级域名，如
www.baidu.com，则是错误的。
# python simple3.py
Please input an domain： baidu.com
ns4.baidu.com.
dns.baidu.com.