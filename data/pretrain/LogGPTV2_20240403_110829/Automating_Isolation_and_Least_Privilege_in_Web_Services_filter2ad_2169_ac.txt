0"8$/! $%+2-  .+,315
$! $+ :9

$
!

%






#
(
)




#
(
)


$
!

%



Figure 5: At the start of a request, Passe provides a view with an initial
token containing the current user. As the view makes database queries, it
supplies the current token which Passe‚Äôs proxy uses to check the integrity
constraints on the arguments supplied to the query. The database proxy
replies with updated versions of the token based on the query results.
In order to store query results in the token, we again use a
hash of the query string to refer to the ‚Äúsource‚Äù of the data.
In addition, we separate the results by column so that Passe
can place constraints at the column granularity, rather than
the entire result set.
C. Handling a Web Request
When a view receives a request, the dispatcher gives it an
initial token containing the current user (or ‚Äúanonymous‚Äù if
appropriate) and any HTTP request variables (query strings
and header Ô¨Åelds).
The contents of Passe‚Äôs tokens during the execution of a
view are shown in Figure 5. As the view makes requests into
trusted Passe components, those components respond with
updated token values, which may in turn be used in future
requests. Whenever updating a token, the trusted component
generates a new message authentication code (MAC) covering
the token‚Äôs latest contents.
This example demonstrates how Passe‚Äôs constraints operate
in practice. When operating correctly, this view displays all
posts from the current user‚Äôs friends, in this case Alice‚Äôs
friends. From a security perspective, the view should only
be able to enumerate the user‚Äôs friends and only read those
updates from her friends (conÔ¨Ådentiality properties). In more
detail, the view initially receives the HTTP request object
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:26 UTC from IEEE Xplore.  Restrictions apply. 
and a token containing the current user. The view makes two
database queries, each with an argument protected by a data-
Ô¨Çow constraint. The Ô¨Årst query derives its argument from the
‚ÄúUser‚Äù key. The second query‚Äôs argument, however, is derived
from the results of the Ô¨Årst (and matches a key that names
the Ô¨Årst query and the ‚Äúuid‚Äù column). These constraints
ultimately enforce the application‚Äôs desired policies, even if
the view were compromised: the view can only see updates
for users contained in the result set of the Ô¨Årst query and
that query can only return the current user‚Äôs friends.
D. User Authentication and Session Management
Passe‚Äôs constraints specify a relationship between a query
and the trusted sources that supply the values to that query
(or affect the control-Ô¨Çow leading to that query). Certain
token keys‚Äîsuch as the current user and HTTP request
parameters‚Äîdo not originate from prior queries, however,
but rather serve as a foundation for the constraints of a view‚Äôs
queries. It is vital that the mechanisms used to generate these
tokens are sound: If an adversary can forge the current user,
conÔ¨Ådentiality is largely lost.
Traditionally, Django has two mechanisms for associating
a request with a user. Either a view can explicitly call into
the authentication library which returns the associated user,
or the request is part of a session already associated with a
logged-in user. In the latter case, before a view handles a
request, the dispatcher calls into the session manager, which
reads the request‚Äôs session cookie and checks whether it is
already associated with a user.
In Passe, we modiÔ¨Åed these two mechanisms so that both
session and authentication manager will securely embed the
current user‚Äôs ID in a token, rather than simply returning the
user to the dispatcher or login view, respectively. This change
also entails that these managers know the shared symmetric
key used to MAC tokens.1 To prevent a compromised view
from stealing session cookies, the Passe dispatcher elides
session information from the token before forwarding the
request to the view.
E. Isolating Views at a Client‚Äôs Browser
An end user‚Äôs browser presents a signiÔ¨Åcant attack channel
for an attacker with control of a view. The attacker can return
an HTML page with malicious code used to circumvent least-
privilege restrictions and thus access other portions of the web
application. For example, if an attacker compromises a view
A which cannot access restricted portions of the database,
the attacker can return Javascript which loads and scripts
control over another view B. View A can then use the results
of view B to gain access to otherwise inaccessible portions
1In fact, our implementation could have left
the session manager
unmodiÔ¨Åed, as it only communicates with the dispatcher, which could have
embedded the user ID on its behalf. Because the authentication manager
is accessed by an untrusted login view, however, it must implement this
secure token embedding itself.

	

	
	

	
		
	










Figure 6: An attacker who has compromised view A is unable to directly
query the database for view B‚Äôs data. However, by returning a script to the
user‚Äôs browser, the attacker can exÔ¨Åltrate B‚Äôs data by having the browser
make seemingly normal requests to view B.
of the database, as shown in Figure 6. This attack is similar
to XSS in that the same-origin policy fails to protect other
portions of the web application from the malicious script.
Typically, applications prevent XSS attacks by Ô¨Åltering user
inputs. However, an attacker with control of a view can
circumvent these protections by inserting Javascript directly
into a response. Even when an application uses a feature
such as Content Security Policies (CSP), entire domains are
typically trusted to supply scripts [11].
To mitigate this cross-view attack channel, Passe supports
the client browser. In
execution with isolation even at
to preserve isolation between views, Passe‚Äôs
particular,
dispatcher interposes on AJAX requests between views. The
dispatcher keeps a mapping, learned during the Passe training
phase, of which views are allowed to originate scripted
requests to other views. Based on this mapping, the dispatcher
approves or rejects requests. This requires the dispatcher
to know which view originated a particular request and
whether that request is an AJAX request. The dispatcher
derives this information from two HTTP headers: Referer
and X-Requested-With.
To prevent adversaries from circumventing these checks,
Passe must ensure that an attacker cannot remove or modify
these headers. Towards this end, Passe sandboxes a view‚Äôs
HTTP responses using the new HTML5 sandbox attribute
with iframes. Every view‚Äôs response is wrapped in this
sandboxed environment by the dispatcher. We implemented a
trusted shim layer which ensures that the headers are correctly
added to each outgoing AJAX request. Our approach is
similar to the shim layer used to enforce privilege separation
in HTML5 applications as introduced by Akhawe et al. [12].
F. Applicability to Other Frameworks
While much of Passe‚Äôs prototype implementation is
concerned with Django-speciÔ¨Åc modiÔ¨Åcations, Passe‚Äôs ar-
chitecture is directly applicable to other web frameworks as
well. For example, in Ruby on Rails, the dispatcher would
make routing decisions based on Rails‚Äô routes and views
would be separated along Rails‚Äô ActionControllers and Views.
139
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:26 UTC from IEEE Xplore.  Restrictions apply. 
However, because some frameworks do not include standard
authentication libraries, Passe would need to provide a new
third party authentication library, or support some of the
most common ones.
V. THE PASSE ANALYSIS PHASE
During the analysis phase, Passe monitors application
execution with the following goals:
‚Ä¢ Enumerate Views. Passe‚Äôs runtime only executes a
Ô¨Åxed set of views. The analysis phase is responsible for
enumerating these views and assigning each of them a
unique identiÔ¨Åer.
‚Ä¢ Enumerate Queries. Passe associates each view with
the SQL queries witnessed during analysis.
‚Ä¢ Infer Dependency Relationships between Queries.
The analysis phase is responsible for determining data
and control-Ô¨Çow relationships between queries, prior
query results, and other data sources.
‚Ä¢ Translate Dependencies
into Enforceable Con-
straints. Dependencies witnessed during the learning
phase must be translated into constraints which the Passe
runtime is capable of enforcing.
Passe‚Äôs analysis phase achieves these goals using a
combination of taint tracking and tracing. As queries execute,
Passe constructs an event log and adds taint values to the
database results, and once execution has completed, Passe
processes this log and outputs the allowed queries for each
view, and the associated constraints on those queries. The
analysis phase runs on a PyPy Python interpreter which we
modiÔ¨Åed to support dynamic taint tracking.
A. Dynamic Taint Tracking in Python
In order to support dynamic taint tracking for Passe,
we developed a modiÔ¨Åed version of the PyPy Python
interpreter (our modiÔ¨Åcations are similar to approaches found
in [13, 14, 15]). Our modiÔ¨Åcations allow for Ô¨Åne-grained
taint tracking through data passing operations and some
control-Ô¨Çow tracking. The interpreter exposes a library which
application-level code can use to add taint to a particular
object, check an object‚Äôs current taint, and check any tainting
of the current control-Ô¨Çow.
Each interpreter-level object is extended with a set of
integer taints. As the interpreter processes Python bytecode
instructions, any instruction which returns an object propa-
gates taint from the arguments to that object. Additionally,
because many functions in PyPy are implemented at the
interpreter level (and therefore are not evaluated by the byte-
code interpreter), these function deÔ¨Ånitions also need to be
modiÔ¨Åed to propagate taint. For our prototype implementation,
only functions for strings, integers, booleans, unicode strings,
lists, dictionaries, and tuple types were modiÔ¨Åed.
In order to track control-Ô¨Çow tainting, the interpreter
checks the taint of any boolean used to evaluate a conditional
jump. If the boolean contains a taint, this taint is added to
the current execution frame. Taints are removed when their
originating function returns. In our prototype, the current
control-Ô¨Çow taint does not propagate during data operations‚Äî
if a control-Ô¨Çow taint is active while a data-Ô¨Çow operation
occurs, the result is not tainted with the control-Ô¨Çow taint.
While this causes the analysis to miss some control-Ô¨Çow
dependencies, this is purely a limitation of the prototype, and
the applications we tested were not affected. While including
this feature will increase the possibility of over-tainting,
Passe‚Äôs constraints only capture equality and set-membership
relationships which mitigates many of the effects of over-
tainting.
B. Tainting Data Objects and Logging Query Events
During the analysis phase, Passe creates a log of query
events by tracing the normal Django execution of the
application. In order to track the data-Ô¨Çow and control-Ô¨Çow
dependencies in the application, these events contain taint
tags for each logged data object.
In addition to capturing query calls, Passe must properly
add taints to data objects as they Ô¨Çow through the application.
As HTTP requests enter the application, Passe taints the initial
data objects. Later, as each database query is made, Passe
also adds taints to each result column.
When Passe captures a query call, it logs the event with
the following information:
1) The view responsible for the query.
2) The query string.
3) An ordered list of the query‚Äôs argument values and the
current set of taints for each of those values.
4) Any previous database results or initial data objects,
and these objects‚Äô associated taints.
5) The control-Ô¨Çow taint set for the current execution
context. In addition to a set of taint tags, for each
permissions library call which affects the control-
Ô¨Çow, the name of the checked permission is included.
The permissions library is special-cased because of
the ‚Äúroot‚Äù permission set. (Existence of a particular
permission may be checked, or if the user is root, then
the check is always approved.)
This information will allow the analyzer to translate
witnessed dependency relationships between queries and
objects into the integrity constraints used by the Passe runtime.
Dependency relationships here are captured by the included
taint sets.
C. Inferring Constraints from Dependency Relationships
Knowing that speciÔ¨Åc database query calls depend on
previous query results is not sufÔ¨Åcient for the Passe runtime
to enforce constraints. Rather, Passe collects the logged query
events and uses these to infer enforceable constraints. To do
this, Passe collects all of the events for a particular (query
string, view) pair and merges the dependency relationships.
140
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:26 UTC from IEEE Xplore.  Restrictions apply. 
The analyzer constructs constraints which are the union of
all witnessed data-Ô¨Çow relationships: if, across all witnessed
query events, multiple data-Ô¨Çow relationships exist for a
particular query argument, then any of those sources will be
allowed to satisfy that argument‚Äôs constraint. On the other
hand, if in some query events, no data-Ô¨Çow relationships
exist at all, then the argument will be left unconstrained.
To capture data-Ô¨Çow relationships, the analyzer only checks
for equality and set membership relationships. These two
relationships capture relationships based on object identiÔ¨Åers,
which are typically how applications express security policies.
(For example, a particular message or post is associated with
a particular set of allowable user IDs.) As we will see in our
example applications (¬ßVII), no policies were missed because
of this limitation. By requiring equality, Passe mitigates
many of the problems normally associated with over-tainting.
Normally, if ‚Äútoo much‚Äù taint propagates in an application,
constraints based solely on taints will be too strong. In
Passe, however, both the taints and the values are required
to be equal, which reduces the chance of over constraining
a particular query. In cases where this does happen, then
the developer can include test cases where equality does not
hold which will prevent that constraint from being inferred.
Passe captures control-Ô¨Çow relationships similarly. For
each query event, Passe determines which control-Ô¨Çow
relationships affected that event. Passe then creates a set
of invariants for the query based on these relationships. Here,
unlike in data-Ô¨Çow constraints, there is a higher chance of
over-Ô¨Åtting the invariant. For example, the getUID query in
Fig. 3 affects the control-Ô¨Çow of getData1. Passe could infer
an invariant containing an ORed set of user IDs. This invariant,
however, is too strong in practice: it Ô¨Åts the invariants to
precisely those witnessed during the testing phase. Thus,
rather than unioning these sets of possible invariants, Passe
takes the intersection of these sets to construct the Ô¨Ånal
invariant. For this example, the invariant R1 in R4 would
be witnessed for all getData1 events, while invariants such
as R1 = Alice‚Äôs UID would only be witnessed for a few
events.
When this translation phase ends, each view will be
associated with a set of allowable queries. Each of these
queries will have an associated set of control-Ô¨Çow and data-
Ô¨Çow constraints, which are exactly what the Passe runtime
uses in its access table to enforce query integrity.
D. Monotonicity of Analysis
By design, the Passe analysis phase does not witness all
possible code paths and, therefore, Passe‚Äôs inferences may
prevent certain code paths from executing correctly. However,
developers can increase the number of test cases witnessed by