### Our Security Model for Adversary Learning and Key Leakage

Our security model allows an adversary to learn certain secret inputs during the protocol execution, including outputs such as session keys. However, we do not permit the adversary to access intermediate values from the protocol execution, as our goal is not to address implementation flaws within the protocol. 

- **Corrupt Query**: Models the leakage of long-term authentication keys.
- **Reveal Query**: Models the leakage of session keys.

To prevent trivial breaches of security, we prohibit the compromise of secrets that would make it easy to break the security properties. We achieve this by defining partners via session identifiers. In a multi-stage setting, each stage has its own identifier. An important consideration in the Reveal query is the security of future session keys in later stages, given that a session key from a previous stage has been revealed. The (session-)key independence principle ensures that such leakage does not endanger future keys.

Our model does not account for the leakage of draft-dh’s semi-static keys, as draft-dh does not include 0-RTT session keys. Therefore, the leakage of semi-static secrets does not affect the security of the handshake. However, in future protocols that use semi-static secrets to derive 0-RTT session keys, the security would depend on these secrets, and appropriate leakage models would be necessary.

### Adaptations for TLS 1.3

For TLS 1.3, some adaptations to the multi-stage model of Fischlin and Günther [FG14] are necessary or beneficial. To cover the various authenticity properties of the TLS 1.3 handshake, we extend their model to include unauthenticated, mutually authenticated, and unilaterally authenticated keys. TLS 1.3 can be seen as a family of three protocols: one without any authentication, one for unilateral authentication (of the server), and another for mutual authentication where both client and server authenticate. This is captured in our security model by allowing the adversary to determine the type of authentication when initializing a session.

We also allow for "post-specified peers" as introduced by Canetti and Krawczyk [CK02], where the communication partner of a session can be unknown at the start of the protocol. This is modeled by letting the adversary initialize a session with a wildcard ‘*’ as the intended communication partner, which corresponds to the regular case in TLS 1.3 where parties discover their peer's identity during the protocol execution.

### Key Secrecy Properties

Another change involves stronger key secrecy properties for sessions with unauthenticated partners. For example, in TLS 1.3, a server can communicate with an unauthenticated client. Since the adversary could easily impersonate the unauthenticated client and compute the shared session key, we cannot generally allow all server sessions with unauthenticated partners to be tested. However, if there is an honest unauthenticated client, the key between these honest parties should still be secure. Thus, we allow Test queries for sessions with unauthenticated partners if an honest partner exists.

This approach, however, is overly restrictive. Intuitively, one should also allow testing such a server session even if the adversary does not deliver the server's final message to the honest client session. Since the client has already completed their contribution to the session key on the server side, this key should be considered secure. We introduce the concept of contributive identifiers to identify sessions of honest parties that are not yet partnered according to full session identifiers but indicate that the key is based on an honest peer's contribution. For soundness, we assume that partnered sessions (having matching session identifiers) also agree on the contributive identifier.

### Preliminaries

We denote by \( U \) the set of identities used to model the participants in the system, each identified by some \( U \in U \) and associated with a certified long-term public key \( \text{pk}_U \) and secret key \( \text{sk}_U \). In addition to long-term keys, parties may hold (uncertified) temporary ("semi-static" in draft-dh) key pairs for the 0-RTT protocol version, each identified by a key identifier \( \text{kid} \).

Sessions of a protocol are uniquely identified using a label \( \text{label} \in \text{LABELS} = U \times U \times \mathbb{N} \), where \( (U, V, k) \) indicates the \( k \)-th local session of identity \( U \) (the session owner) with \( V \) as the intended communication partner.

For each session, a tuple with the following information is maintained as an entry in the session list \( \text{ListS} \):

- **V**: The intended communication partner, where the distinct wildcard symbol ‘*’ stands for “unknown identity” and can be set to a specific identity in \( U \) once by the protocol.
- **label**: The (administrative) session label.
- **U**: The session owner.
- **role**: The session owner’s role in this session (initiator or responder).
- **auth**: The aspired authentication type of each stage from the set of supported properties \( \text{AUTH} \), where \( M \) is the maximum stage and \( \text{auth}_i \) indicates the authentication level in stage \( i > 0 \).
- **kidU**: The key identifier for the temporary public/secret key pair \( (\text{tpk}, \text{tsk}) \) used by the session owner.
- **kidV**: The key identifier for the communication partner.
- **stexec**: The state of execution (running, accepted, or rejected).
- **stage**: The current stage, incremented to \( i \) when stexec reaches accepted \( i \).
- **sid**: The session identifier in stage \( i > 0 \).
- **cid**: The contributive identifier in stage \( i > 0 \).
- **K**: The established session key in stage \( i > 0 \).
- **stkey**: The state of the session key in stage \( i > 0 \) (fresh or revealed).
- **tested**: The test indicator, where true means that \( K_i \) has been tested.

By convention, if we add a partly specified tuple to \( \text{ListS} \), the other entries are set to their default values. Labels are unique, and we use shorthand notation, e.g., \( \text{label.sid} \) for the element sid in the tuple with label label in \( \text{ListS} \).

### Authentication Types

We distinguish between three levels of authentication for the keys derived in a multi-stage key exchange protocol:

- **Unauthenticated**: Provides no authentication for either communication partner.
- **Unilaterally Authenticated**: Authenticates one party (in our case, the responder).
- **Mutually Authenticated**: Authenticates both communication partners.

The adversary can choose the authentication type for each session it creates. For stages with unilateral authentication, we aim for the secrecy of the initiator’s session key, or the responder’s key if the initiator’s contribution to the key is honest and the adversary merely observes the interaction. In the non-authenticated case, we only require the secrecy of keys established through contributions of two honest parties.

Formally, we capture the authenticity properties provided in a protocol by a set \( \text{AUTH} \subseteq \{\text{unauth}, \text{unilateral}, \text{mutual}\}^M \), representing each protocol variant’s authentication by a vector \( (\text{auth}_1, \ldots, \text{auth}_M) \in \text{AUTH} \) specifying for each stage \( i \) whether it is unauthenticated, unilaterally authenticated, or mutually authenticated. We treat all authenticity variants of a protocol concurrently in our model, allowing concurrent executions of the different key exchange sub-protocols.

### Security Queries

- **Reveal(label, i)**: If \( \text{label.stkey}_i \) is revealed, return \( \bot \). Otherwise, set \( \text{label.stkey}_i \) to revealed and provide the adversary with \( K_i \). If there is a tuple \( (\text{label}_0, V, U, \text{role}_0, \text{auth}_0, \text{kid}_V, \text{kid}_U, \text{stkey}_0, \text{tested}_0) \) in \( \text{ListS} \) with \( \text{sidi} = \text{sid}_0 \), then \( \text{key}_i \) is set to revealed as well. If \( i = \text{stage} \), set \( \text{stkey}_j \) to revealed for all \( j > i \) since future keys depend on the revealed key. If a partnered session \( \text{label}_0 \) with \( \text{sidi} = \text{sid}_0 \) and \( \text{stage}_0 = i \), set \( \text{stkey}_{0,j} \) to revealed for all \( j > i \).

- **Corrupt(U)**: Provide \( \text{sk}_U \) to the adversary. No further queries are allowed to sessions owned by \( U \). In the non-forward-secret case, for each session label owned by \( U \) and all \( i \in \{1, \ldots, M\} \), set \( \text{label.stkey}_i \) to revealed. In the case of stage-j forward secrecy, \( \text{label.stkey}_i \) is set to revealed only if \( i < j \).

This comprehensive model ensures robust security properties while accommodating the diverse requirements of modern protocols like TLS 1.3.