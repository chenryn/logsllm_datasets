渗透测试之通过代码审计打点 ⽹络安
- FreeBuf
全⾏业⻔户
在渗透测试时，经常会遇到公开漏洞已经修复、只有⼀个登录框等情况……
“
前⾔
在渗透测试时，经常会遇到公开漏洞已经修复、只有⼀个登录框等情况，这时候如果能拿到代码进⾏审计⼀
波，往往能打开⼀扇新的⼤⻔。
代码审计 (Code Audit) 顾名思义就是通过阅读源代码，从中找出程序源代码中存在的缺陷或安全隐患，提前
发现并解决⻛险，这在甲⽅的 SDL 建设中是很重要的⼀环。⽽在渗透测试中，可以通过代码审计挖掘程序漏
洞，快速利⽤漏洞进⾏攻击，达成⽬标。
审计思路
常⻅的审计思路有：
1、寻找敏感功能点，通读功能点代码；
优点：精准定向挖掘，利⽤程度⾼；
缺点：命名不规范的代码容易被忽略，导致失去先机；
2、根据敏感关键字回溯参数传递过程；
优点：通过搜索敏感关键字可快速定位可能存在的漏洞，可定向挖掘，⾼效、⾼质量；
缺点：对程序整体架构了解不够深⼊，在漏洞定位时⽐较耗时，逻辑漏洞覆盖不到；
3、直接通读全⽂代码；
优点：对整体架构熟悉，了解程序的数据流处理、配置⽂件、过滤函数等；
缺点：耗时⻓，需要⾜够的时间熟悉整体架构；
审计⽅法
按照是否使⽤ (半) ⾃动化⼯具划分，有⼯具扫描、⼈⼯审计和两者相结合的⼏种审计⽅式，笔者⽐较喜欢硬
刚，毕竟正常挖业务层⾯漏洞没有那么复杂，不太需要对底层的⼀些特性了解的很清楚。
按照数据流向可分为正向审计和逆向审计，正向审计即从功能⼊⼝点进⾏跟踪，⼀直到数据流处理结束；逆
向审计即先根据⼀些关键词搜索，定位到可能存在⻛险的关键词 / 函数，再反推到功能⼊⼝，看整个处理过
程是否存在漏洞。
成功案例
案例⼀：⼀个任意⽂件下载漏洞引起的代码审计
在⼀次授权测试中，找到⼀处任意⽂件下载漏洞，正常思路先下载⽹站的配置⽂件，看看数据库是否可以外
联
不幸的是不可以外联（其实现在能外联的也很少了），幸运的是在配置⽂件中收集到了⼀个域⽤户，这是意
外之喜。
接着下载 Download.aspx ⽂件看看内容
我们知道，.net 是编译型语⾔，在 aspx 中⼀般是没有服务代码的，这⾥看到使⽤了 Inherits 来继承后端代
码。
Inherits 是啥？
MSDN 官⽅解释：定义供⻚继承的代码隐藏类。 它可以是从 Page 类派⽣的任何类。 此特性与 CodeFile
特性⼀起使⽤，后者包含指向代码隐藏类的源⽂件的路径。
通俗⼀点就是代码都在这个 Inherits 指向的 dll 中了，那么我们下载到 dll ⽂件，就可以对后端代码进⾏⼀波
窥探了
于是构造下载 XXXXXX.Web.dll，⽂件下载到本地后，IL Spy 打开就是⼀顿⾁眼观察
⼤致看了⼀下⽬录，有 Upload 字样，优先级直线上升，先进去看看
public void uploadFile()
{
string formStringParamValue = SWFUrlOper.GetFormStringParamValue("path");
string formStringParamValue2 = SWFUrlOper.GetFormStringParamValue("fn");
bool flag = SWFUrlOper.GetFormStringParamValue("small").ToLower() == "true";
……
string[] array = new string[]
{
"jpg",
"gif",
"png",
"bmp"
};
string formStringParamValue3 = SWFUrlOper.GetFormStringParamValue("data");
try
{
System.Web.HttpPostedFile httpPostedFile = base.Request.Files["Filedata"];
string b = string.Empty;
string text = string.Empty;
if (httpPostedFile.ContentLength > 0)
{
text = httpPostedFile.FileName;
if (text.IndexOf(".") != -1)
{
b = text.Substring(text.LastIndexOf(".") + 1, text.Length - text.LastIndexOf(".")
}
SWFUploadFile sWFUploadFile = new SWFUploadFile();
if (flag)
{
sWFUploadFile.set_SmallPic(true);
sWFUploadFile.set_MaxWith((formIntParamValue == 0) ? sWFUploadFile.get_MaxWith() :
sWFUploadFile.set_MaxHeight((formIntParamValue2 == 0) ? sWFUploadFile.get_MaxHeigh
}
sWFUploadFile.set_IsWaterMark(isWaterMark);
int num = 0;
string text2 = sWFUploadFile.SaveFile(httpPostedFile, formStringParamValue, formString
……
}
38 ⾏进⾏了⽂件保存，之前没有对⽂件的内容、后缀等有任何过滤，开开⼼⼼挖到任意⽂件上传。⼆话不说
本地构造上传个 shell
假如这⾥代码被混淆的话, 可以使⽤ de4dot 进⾏反混淆, de4dot ⽀持 10 ⼏种混淆⽅式的反混淆：
Dotfuscator
.NET Reactor
Xenocode
CryptoObfuscator
SmartAssembly
......
⽐如使⽤ Dotfuscator 混淆过的 DLL 是这样的：
使⽤ de4dot 反混淆：
CMD 命令⾏执⾏：de4dot.exe ADD.dll
看下效果：
代码已经基本恢复到可读状态了，其他⾼级⽤法请参考 github 上的介绍。
案例⼆：某个开源系统的代码审计
授权渗透时发现只有⼀个登录框，遇到这种情况⼀般只能拼字典进⾏爆破了，还好客户使⽤的是⼀套开源系
统⼆次开发，可以 down 到代码进⾏分析⼀波。
拿到代码看了下结构，是 thinkphp 的⼆开，遵循 MVC 模型代码那是⼀个层次分明。
因为⽬标只有登录框，所以这⾥我关注的重点除了⽂件上传、SQL 注⼊，⼜多了⼀个绕过登录的想法了，no
代码 no 哔哔～～
Upload 太刺眼了，忍不住进去分析⼀下
class UploadController extends ComController{
......
private function saveimg($file){
$uptypes=array(
'image/jpeg',
'image/jpg',
'image/jpeg',
'image/png',
'image/pjpeg',
'image/gif',
'image/bmp',
'image/x-png'
);
$max_file_size=2000000; //上传⽂件⼤⼩限制, 单位BYTE
$destination_folder='Public/attached/'.date('Ym').'/'; //上传⽂件路径
if($max_file_size USER = $user;
$url = U("login/index");
if(!$user){
header("Location: {$url}");
exit(0);
}
$Auth = new Auth();
$allow_controller_name=array('Upload');//放⾏控制器名称
$allow_action_name=array();//放⾏函数名称
if(!$Auth->check(CONTROLLER_NAME.'/'.ACTION_NAME,$this->USER['uid'])&&!in_array(CONTROLLER_NAME,$a
$this->error('没有权限访问本⻚⾯!');
}
$user = member(intval($user['uid']));
$this->assign('user',$user);
恩... 我可能深深爱上这个开发⼯程师了， 从 cookie 中获取认证信息，并赋值给 $user 对象，那我们就可以
操控⽤户登录啦，在配合后台的任意⽂件上传，美滋滋～
失败案例
总结
相对于甲⽅不同，渗透测试中代码审计更多的是挖掘可利⽤的漏洞或利⽤链进⾏攻击，尽可能的获取更⾼的
权限为⽬的。
个⼈觉得渗透测试时关注的漏洞优先级：
命令执⾏ > 代码执⾏ > ⽂件上传 > ⽂件包含 > SQL 注⼊ > ⽂件下载 > 逻辑漏洞 > SSRF > XSS ...
代码审计除了需要了解漏洞的原理、熟悉常⻅的编程语⾔、常⻅的危险函数、常⻅的协议、渗透技巧外，还
需要⼀些开发调试⼯具（IDEA、PHPStrom、PyCharm ...），以上内容有不正之处，还请⼤家斧正。
注:
de4dot 项⽬地址: https://github.com/0xd4d/de4dot/
全⽂完
本⽂由 简悦 SimpRead 转码，⽤以提升阅读体验，原⽂地址