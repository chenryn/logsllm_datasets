User: How to use TCP/IP protocol stack to implement a simple network chat room program? Please provide code samples.
Assistant: The following is a code example of a simple network chat room program, using the TCP/IP protocol stack: Server code: ``` import socket HOST = '127.0.0.1' PORT = 8888 def server(): s = socket.socket( socket.AF_INET, socket.SOCK_STREAM) s.bind((HOST, PORT)) s.listen(1) print('Server started...') conn, addr = s.accept() print('Connected by', addr) while True: data = conn.recv(1024) if not data: break print(f'Received from {addr}: {data.decode()}') msg = input('Server: ') conn.sendall( msg.encode()) conn.close() if __name__ == '__main__': server() ``` client code: ``` import socket HOST = '127.0.0.1' PORT = 8888 def client(): s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((HOST, PORT)) print('Connected to server...') while True: msg = input('Client: ') s.sendall( msg.encode()) data = s.recv(1024) if not data: break print('Received from server:', data.decode()) s.close() if __name__ == '__main__': client() ``` By calling the server() function and the client() function, the server and client programs can be started. After running the server program, the client program can connect to the server and exchange information with it. A client program can send text messages to the server and receive response messages from the server. Note: The sample code here is just a simple TCP/IP protocol stack implemented network chat room program, for reference only. More complex situations and security issues should be considered in actual use.