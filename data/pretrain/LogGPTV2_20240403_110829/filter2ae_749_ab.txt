流程图如下：
如果有读者想通过编程实现从 `keystore` 文件中恢复出私钥，可以参考[How do I get the raw private key from
my Mist keystore
file?[15]](https://ethereum.stackexchange.com/questions/3720/how-do-i-get-the-raw-private-key-from-my-mist-keystore-file)中的最后一个回答。
其中有以下几点注意事项：
  1. 需要的环境是 Python 3.6+ OpenSSL 1.1+
  2. 该回答在 `Decrypting with the derived key` 中未交代 `key` 参数的来历，实际上 `key = dec_key[:16]`
### 1.3 以太坊交易的流程
根据源码以及网上已有的资料，笔者总结以太坊的交易流程如下：
  1. 用户发起转账请求。
  2. 以太坊对转账信息进行签名
  3. 校验签名后的信息并将信息加入交易缓存池(txpool)
  4. 从交易缓存池中提取交易信息进行广播
对于本文来说，步骤2：以太坊对转账信息进行签名对于理解 `3.4节 利用离线漏洞进行攻击` 十分重要。笔者也将会着重分析该步骤的具体实现。
从上文中我们可以知道，私钥已经被加密在 `keystore`
文件中，所以在步骤2进行签名操作之前，需要将私钥解密出来。在以太坊的操作中有专门的接口用于解锁账户： `personal.unlockAccount`
在解锁对应的账户后，我们将可以进行转账操作。在用私钥进行签名前，存在一些初始化操作：
  * 寻找 from 参数对应地址的钱包
  * 判断必须传入的参数是否正确
  * 将传入的参数和原本的设置参数打包成 Transaction 结构体
这里可以注意一点：`Transaction` 结构体中是不存在 `from` 字段的。这里不添加 `from` 字段和后面的签名算法有着密切的关系。
使用私钥对交易信息进行签名主要分为两步：
  1. 对构造的列表进行 RLP 编码，然后通过 sha3_256 计算出编码后字符串的 `hash` 值。
  2. 使用私钥对 `hash` 进行签名，得到一串 65 字节长的结果，从中分别取出 `r`、`s`、`v`
根据椭圆加密算法的特点，我们可以根据 `r`、`s`、`v` 和 `hash` 算出对应的公钥。
由于以太坊的地址是公钥去除第一个比特后经过 `sha3_256` 加密的后40位，所以在交易信息中不包含 `from`
的情况下，我们依旧可以知道这笔交易来自于哪个地址。这也是前文说到 `Transaction` 结构体中不存在 `from` 的原因。
在签名完成后，将会被添加进交易缓存池(txpool)，在这个操作中，`from`
将会被还原出来，并进行一定的校验操作。同时也考虑到交易缓存池的各种极端情况，例如：在交易缓存池已满的情况下，会将金额最低的交易从缓存池中移除。
最终，交易缓存池中存储的交易会进行广播，网络中各节点收到该交易后都会将该交易存入交易缓存池。当某节点挖到新的区块时，将会从交易缓存池中按照
`gasPrice` 高低排序交易并打包进区块。
## 0x02 黑暗中的盗币方式：偷渡时代
### 2.1 攻击流程复现
攻击复现环境位于 `ropsten` 测试网络。
被攻击者IP: 10.0.0.2 ，启动客户端命令为：`geth --testnet --rpc --rpcapi eth --rpcaddr
0.0.0.0 console` 账户地址为：`0x6c047d734ee0c0a11d04e12adf5cce4b31da3921`,剩余余额为 `5
ether`
攻击者IP: 10.0.0.3 , 账户地址为 `0xda0b72478ed8abd676c603364f3105233068bdad`
注：若读者要在公链、测试网络实践该部分内容，建议先阅读 `3.2` 节的内容，了解该部分可能存在的隐藏问题。
攻击者步骤如下：
  1. 攻击者通过端口扫描等方式发现被攻击者开放了 `JSON-RPC` 端口后，调用 `eth_getBlockByNumber` `eth_accounts` 接口查询当前节点最新的区块高度以及该节点上已有的账户。 
  2. 攻击者调用 `eth_getBalance` 接口查询当前节点上所有账户的余额。 
  3. 攻击者对存在余额的账户持续发起转账请求。 
一段时间后，被攻击者需要进行交易：
按照之前的知识点，用户需要先解锁账户然后才能转账。当我们使用 `personal.unlockAccount`
和密码解锁账户后，就可以在终端看到恶意攻击者已经成功发起交易。
读者可以通过该[链接](https://ropsten.etherscan.io/tx/0x4ad68aafc59f18a11c0ea6e25588d296d52f04edd969d5674a82dfd4093634f6)看到恶意攻击者的交易信息。
攻击的流程图如下所示： 
### 2.2 攻击成功的关键点解析
看完 2.1 节 `偷渡漏洞` 攻击流程，你可能会有这样的疑问：
  1. 攻击者为什么可以转账成功？
  2. 如例子中所示，该地址只有 5 ether，一次被转走了 4.79 ether，如果我们解锁账户后在被攻击前发起转账，转走 1 ether，是否攻击者就不会攻击成功？
下文将详细分析这两个问题并给出答案。
#### 2.2.1 攻击者可以通过 rpc 接口转账的原因
首先，分析一下关键的 `unlockAccount` 函数:
    func (s *PrivateAccountAPI) UnlockAccount(addr common.Address, password string, duration *uint64) (bool, error) {
        const max = uint64(time.Duration(math.MaxInt64) / time.Second)
        var d time.Duration
        if duration == nil {
            d = 300 * time.Second
        } else if *duration > max {
            return false, errors.New("unlock duration too large")
        } else {
            d = time.Duration(*duration) * time.Second
        }
        err := fetchKeystore(s.am).TimedUnlock(accounts.Account{Address: addr}, password, d)
        return err == nil, err
    }
在判断传入的解锁时间是否为空、是否大于最大值后，调用 `TimedUnlock()` 进行解锁账户的操作，而 `TimedUnlock()` 的代码如下：
    func (ks *KeyStore) TimedUnlock(a accounts.Account, passphrase string, timeout time.Duration) error {
        a, key, err := ks.getDecryptedKey(a, passphrase)
        if err != nil {
            return err
        }
        ks.mu.Lock()
        defer ks.mu.Unlock()
        u, found := ks.unlocked[a.Address]
        if found {
            if u.abort == nil {
                // The address was unlocked indefinitely, so unlocking
                // it with a timeout would be confusing.
                zeroKey(key.PrivateKey)
                return nil
            }
            // Terminate the expire goroutine and replace it below.
            close(u.abort)
        }
        if timeout > 0 {
            u = &unlocked{Key: key, abort: make(chan struct{})}
            go ks.expire(a.Address, u, timeout)
        } else {
            u = &unlocked{Key: key}
        }
        ks.unlocked[a.Address] = u
        return nil
    }
首先通过 `getDecryptedKey()` 从 `keystore` 文件夹下的文件中解密出私钥（具体的解密过程可以参考 1.2
节的内容），再判断该账户是否已经被解锁，如果没有被解锁，则将解密出的私钥存入名为 `unlocked` 的 map