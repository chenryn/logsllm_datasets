15
16 }
(c) Part of semantic annotations for the grammar
in Fig. 4b. It is in JSON format.
"Comment3": "Type inference rules",
"TypeInference":{
"+": { "left": "long", "right": "long",
"output":"long"} }
],
Fig. 4: An example IR program with its corresponding BNF grammar and semantic annotations. The IRs in Fig. 4a are in a uniform
format. The number suffix of the IR is the IR order. The IR types have corresponding symbols in the BNF grammar in Fig. 4b. left and
right are the two operands. As func-def has four components and the IR can have no more than two operands, ir8 is an intermediate IR
for func-def and does not have a type. The semantic annotations in Fig. 4c describe what semantic properties the symbols in the BNF should
have, which will be reflected in the semantic_property in IRs. We predefine properties about types and scopes for users to use.
to gain language validity by fixing the semantic errors in the
mutated part.
A. Rule 1: Type-Based Mutation
This rule performs three different mutation strategies based
on the IR types. Insertion inserts a new IR (e.g., IRs from
another program) to the IR program. This includes inserting an
IR that represents an element to a list and inserting an IR to
where it is optional but currently absent. Deletion performs the
opposite operation of insertion. For example, in C, a statement
block is a list of statements, and we can insert a statement
to the block. Also, we can delete an optional ELSE statement
after an IF statement. Replacement replaces an IR with a new
one of the same type. For example, we can replace an addition
expression with a division expression as they are both of type
EXPRESSION.
Since the IR type reflects the grammar structures of un-
derlying source codes, this rule helps preserve the syntactic
correctness of the mutated test cases.
B. Rule 2: Local Mutation
This rule requires us to only mutate IRs with local effects.
Changes in these IRs will not invalidate the semantic correct-
ness of the rest of the program. POLYGLOT handles two types
of IRs with local effects as follows.
IRs that Contain No New Definitions. These IRs do not
define any variables, functions, or types, so the rest of the
program will not use anything defined by them. Even if these
IRs get deleted, the rest of the program will not be affected.
For example, line 7 in Fig. 2b only uses the variable arr and
does not define anything. If we delete this line, the program
can still be executed.
IRs that Create Scopes. These IRs can contain new defini-
tions, but these definitions are only visible within the scope
created by the IRs. For example, the for statement at line
9 of Fig. 2b creates a new scope. idx is defined and only
valid within this new local scope. Therefore, mutating the for
statement as a whole will not affect the rest of the program.
With these two rules, our constrained mutation produces
test cases. These test cases might contain
syntax-correct
semantic errors. According to local mutation, the semantic
errors are introduced by the mutated part, which might use
invalid variables from other test cases. Next, we will fix all
these errors to get a semantically correct test case.
VI. SEMANTIC VALIDATION
As the second step towards language validity, we perform
semantic validation to fix the semantic errors in the mutated
part of the test case. We do so by replacing the invalid
variables with the valid ones. To figure out the proper variables
for replacement, we first need to know the scopes of the
variables, which tell us the available variables to use. This
avoids using undefined or out-of-scope variables. Further, we
need to know the types of these variables so that we can use
them appropriately, which avoids using variables of undefined
or unmatched types.
Therefore, our semantic validation relies on two components:
type system that collects type information of variables (§VI-A)
and scope system that collects scope information (§VI-B). We
then integrate all the information into the symbol tables, which
contain the types, scopes, and names of every definition in
the test case. With the symbol tables, the semantic validation
generates correct expressions to replace the invalid ones and
produces a semantically correct test case (§VI-C).
A. Type System
In programming languages, types include predefined ones
such as int in C, and user-defined ones such as class in
JavaScript [8]. We call the former basic types and the latter
composite types. Basic types are limited so they can be
completely described with semantic annotations, but composite
types cannot as they are specific to test cases. To collect
precise type information, we need to handle both basic types
and composite types. Therefore, POLYGLOT utilizes the type
system to construct composite types on demand and infer types
of variables or expressions.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:12:53 UTC from IEEE Xplore.  Restrictions apply. 
646
short *e, b[3] = {1, 2, 0};
e = b;
// Originally: do{ c += *(e++); } while(*e);
/* Replaced by: if(x >= y){
struct X z;
x += y; } */
1 struct S { int d; } s;
2 int a, c;
3 int main() {
4
5
6
7
8
9
10
11
12
13
14
15
16 }
if(FIXME >= FIXME){
//struct X z;
FIXME += FIXME;
}
int res = c;
return res;
(a) A mutated program that needs to be validated
(b) The type map, scope tree and its the symbol tables of the program in Fig. 5a
Fig. 5: A mutated variant of Fig. 2a and its semantic information collected by the semantic validator. The mutated program is generated
by replacing the DO-WHILE statement (line 6) with IF statement (line 10-13) in Fig. 5a. Every invalid variable in the mutated part is replaced
with a FIXME. Line 11 is removed because it uses a composite type (struct X) without a detailed definition. As shown in Fig. 5b, the type
map contains the types used in the program. The program has four different scopes created by different symbols. Each scope has a symbol
table with the information of definitions within the scope. TID in the symbol table refers to the TID in the type map. OID corresponds to the
statement order in the IR program and we currently use line number for easy demonstration.
Type Map. As the collected type information will be used
frequently, we maintain them in a type map for easy and fast
access. The key of the map is a unique id for the type, and
the value is the structure of the type. This map stores all the
basic types of a language and the composite types used in
the current test case. For example, Fig. 5a and Fig. 5b show
a mutated program and its type map. We can see that type
id 5 refers to a function type whose name is main and return
type is int. As composite types are specific to a test case, we
remove them from the map each time we finish processing a
test case to avoid using types defined in other programs.
Composite Type Construction. Currently, the type system
supports the construction of three composite types: structures,
functions, and pointers. These types consist of several com-
ponents. For example, a function consists of a function name,
function arguments, and return value.
To construct a composite type, the type system walks through
the IR program to find IRs related to composite type definitions
by checking their semantic properties. When it finds one, it
searches for the required components for this definition. Then
type system creates a new type with the collected components
and stores it in the type map.
Type Inference. The type system infers the types of variables
so that we know how to use them correctly. We handle both the
variable definition and variable use. For a variable definition,
we check whether it has an explicit type. If so, the type system
searches the name of the type in the type map. Then it returns
the corresponding type id when the names match. Otherwise,
we infer the type of a variable from its assigned expression,
which will be discussed in the next paragraph. For example, in
C, "int y;" explicitly states that the variable y is of type int.
In JavaScript, "let z = 1.0;" does not state a type for z,
but we can infer from expression 1.0 that z is of floating-point
number type. For variable use, we just look for the variable
name in the symbol tables (§VI-B), which contains the type
information of variables, and return its type.
To infer the type of an expression, we first check whether
it consists of a simple variable or literal. If it is a variable,
it must be a variable use, which has been handled above. If
it is a literal, we return its type as described in the semantic
annotations. For an expression with operands and operator, we
first recursively infer the types of the operands as they are also
expressions. As discussed in §IV-A, the semantic properties
describe the expected operand types and the output type of the
operator. If the inferred operand types can match or convert to
the expected types, we return the corresponding result type.
Our type inference has limitations in dynamically typed
programming languages, where the types might be undecidable
statically. For example, the type of x in line 1 of Fig. 2b
is not determined because JavaScript can call the function
with arguments of any type. If we simply skip the variables
whose types cannot be inferred, we might miss useful variables.
Therefore, we define a special type called AnyType for these
variables. Variables of AnyType can be used as variables
of any specific type. Using AnyType might introduce some
type mismatching, but it can improve the effectiveness of
POLYGLOT in dynamically typed programming languages.
B. Scope System
A program can have different scopes that decide the visibility
of variables within them. The scope system partitions the
program into different scopes so that variables automatically
gain their visibility according to the scope they are inside.
Afterward, we integrate the type information collected by the
type system and the scope information into symbol tables. The
symbol tables contain all the necessary information of variables
for fixing the semantic errors.
Partitioning IR Program With A Scope Tree. A program
has a global scope where variables are visible across the
program. Other scopes should be inside existing ones. This
forms directed relations between scopes: variables in the
outer scope are visible to the inner scope, but not vice versa.
Therefore, we build a directed scope tree to describe such
relations. In the scope tree, the global scope is the root node,
and other scopes are the child nodes of the scopes that they
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:12:53 UTC from IEEE Xplore.  Restrictions apply. 
647
NameTIDOIDs41a12c12main53TIDType1int2short3short *4Type:structName: SMember: int d5Type: functionName: mainArg: NoneReturn type: intNameTIDOIDd11NameTIDOIDe34b34res114NameTIDOIDScope TreeType mapID:1Line: 1-16Global ScopeID:2Line: 1Structure bodyID:3Line: 3-16Function bodyID:4Line: 10-13IF statementSymbol TableSymbol TableSymbol TableSymbol Tableare inside. As the semantic properties of IR tell which IRs
create new scopes, we create a new node of scope when we
find such an IR. We assign each node a unique id and label
the IR, along with their children IRs (i.e., their operands), with
this id to indicate that they belong to this scope. In this way,
we partition the IR program into different scopes in the tree.
A variable is visible to a node if the variable is in any node
along the path from the root node to the given node.
Fig. 5b shows the constructed scope tree of Fig. 5a. "Line"
means the IRs translated from these lines belong to the scope
or the children of the scope. Scope 1 is the global scope, which
is the root node. Scope 2 and 3 are created by the structure
body of S and function body of main respectively and they are
child nodes of scope 1. Variables in scope 1 and 3 are visible
to scope 4 as they are in the same path.
Symbol Table. We integrate the collected information of types
and scopes by building symbol tables which contain the names,
scopes, defined orders, and types of variables. They describe
what variables (names) are available at any program location
(scopes and defined orders) and how they can be used (types).
Fig. 5b shows symbol tables of each scope for Fig. 5a.
Variables s, a, c and function main are defined in scope 1, the
global scope, and d is defined in scope 2 which is the scope for
structure body. There is no definition in the IF statement so its
symbol table is empty. TID is the type id of the variable, which
corresponds to the TID in the type map. OID is the defined
order of variables and we currently use the line number as OID
for easy demonstration. A variable is visible at a given location
(i.e., line number) if its scope is the ancestor node of the scope
of the location and if it is defined before the location.
C. Validation
With the symbol tables, we can fix the semantic errors in the
mutated test case. We call this process validation. We replace
every invalid variable with the special string FIXME to indicate
that this is an error to be fixed, as shown in Fig. 5a.
Specifically, we first remove any IRs that use user-defined
types in the mutated part in case we cannot find the definition
of these types. Then, for each FIXME in the mutated code, we
replace it with a correct expression. We generate the expressions
with the variables in the symbol tables according to their types
and scopes. For example, in Fig. 5a, the original for statement
is replaced by an if statement during mutation (line 6-10).
The if statement contains a user-defined structure without
definition (line 8), so we remove line 8. Finally, we replace
the FIXMEs with generated expressions.
Generating Valid Expressions. POLYGLOT generates four
types of expressions: a simple variable, a function call, an
element indexed from an array, and a member accessed from
a structure. In Fig. 5a, "a", "main()", "b[1]", "s.d" are all
examples of generated expressions.
First, POLYGLOT infers the type of expressions containing
FIXME and tries to figure out what type of expressions should
be used for replacement. It adopts a bottom-up approach: it
assigns AnyType to each FIXME, and converts AnyType to a more
specific type when it goes up and encounters concrete operators.
TABLE I: Line of codes of different components of POLYGLOT,
which sum up to 7,016 lines. As we build our fuzzer on AFL, we
only calculate the code that we add into AFL, which is 285 lines in
the fuzzer component.
Module
Frontend Generator
Constrained Mutator
Semantic Validator
Fuzzer
Others
Total
Language
C++
Python
C++
C++
C++
C++/Bash
C++/Python/Bash
LOC
367
1,473
1,273
3,313
285
305
7,016
For example, we want to fix the two FIXMEs in the expression
"FIXME >= FIXME" in line 10 of Fig. 5a. We assign AnyType to
both of them. Then we go up the expression and encounter
the operator ">=", which accepts numeric types as operands,
such as int and short, and outputs a result of type bool. As
the operands are FIXME of AnyType, which can be used as any
other specific type, we convert the type of FIXME to numeric
types. Now POLYGLOT needs to generate two expressions of
numeric types to replace the two FIXMEs.
Second, POLYGLOT checks the symbol tables to collect all
the available variables. It walks through the symbol tables of
all the visible scopes in scope tree, from the global scope to the
scope of the expression with FIXME, and collect the variables
defined before the to-be-validated expression.
Third, we enumerate the possible expressions we can
generate from these variables and categorize them by types.
For example, from the definition s in line 1 in Fig. 5a, we can
generate the expressions s and s.d. They are of different types
so they belong to different categories.
Finally, POLYGLOT randomly picks some expressions of the
required type to replace FIXMEs. If every FIXME of a test case
can be replaced by a proper expression, the validation succeeds.
The validated test case should be semantically correct and we
feed it to the fuzzer for execution. If the validation fails (e.g.,
there is no definition for a specific type), we treat the test case
as semantically invalid and discard it.
One possible solution to fix FIXME >= FIXME at line 11 in
Fig. 5a is "b[1] >= s.d ", where we replace the FIXMEs with
"b[1]" of type short and "s.d" of type int. short and int
are of different numeric types, but short can be converted to
int. Therefore, b[1] and s.d can be compared by >= though
they are of different types.
VII. IMPLEMENTATION
We implement POLYGLOT with 7,016 lines of code. Table I
shows the breakdown.
Frontend Generation. We extend the IR format proposed in
[78] by adding semantic properties. Users provide semantic
annotations to help generate these properties. The frontend
generator generates a parsing and a translation method from
code templates written in C++ for each symbol in the BNF
grammar. Then we use Bison [11] and Flex [9] to generate a
parser with the parsing methods. The parser and the translation
methods are compiled together to be an IR translator.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:12:53 UTC from IEEE Xplore.  Restrictions apply. 
648
Scope Tree Construction. The scope system maintains a
stack of scopes to construct the scope tree. The scope in the
stack top indicates the current scope. First, it generates the
global scope as the root and pushes it in the stack. Next, it
walks through IRs in the IR program, labeling each IR with
the id of the scope in the stack top. Meanwhile, it checks the
semantic properties of the IR. If the scope system meets an IR
that creates a new scope, it creates one. It sets the new scope
as the child node of the scope at the stack top and pushes
it to the stack. After the children of the IR are recursively
processed, the scope system pops the scope out of the stack.
In this way, we construct the scope tree and partition the IRs.
Builtin Variables and Functions. To improve the diversity
of the generated expressions, POLYGLOT allows users to
optionally add predefined builtin variables and functions of
the tested programming language. These builtin variables and
functions are written in the source format and added along with
the initial seed corpus. POLYGLOT then analyzes these test
cases and collects them as definitions. These definitions will
be added into the symbol table of the global scope of every
generated test case and thus used for expression generation.
Complex Expression Generation. To introduce more code
structures in the test cases, we allow semantic validation to