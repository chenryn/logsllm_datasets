algorithm should select these statements such that, if
the programmer ﬁxed these lines of code, then the pro-
gram would type-check. The ideal algorithm would then
look at each error path and decide which statement in
S is the “cause” of this error path. After bucketing
the error paths by their causal statement, the ideal al-
gorithm would select one representive error path from
each bucket and display it to the user.
Implementing the ideal algorithm is impossible, so we
approximate it as best we can. The goal of our approxi-
mation is to print out a small number of error traces from
each of the ideal buckets. When the approximation suc-
ceeds, each of the untypable statements from the ideal
algorithm will be represented, enabling the programmer
to address all his mistakes.
Another way to understand our heuristic is that it tries to
eliminate “derivative” and “redundant” errors, i.e., errors
caused by one type mismatch leaking out into the rest of
the program, as well as multiple error paths that only
differ in some minor, inconsequential way.
The heuristic works as follows. First, CQUAL sorts all
the error paths in order of increasing length. It is ob-
viously easier for the programmer to understand shorter
paths than longer ones, so those will be printed ﬁrst. It is
not enough to just print the shortest path, though, since
the program may have two or more unrelated errors.
Instead, let E be the set of all qualiﬁer variables that trig-
ger type errors. To eliminate derivative errors we require
that, for each qualiﬁer Q ∈ E, CQUAL prints out at most
one path passing through Q. To see why this rule works,
imagine a local variable that is used as both a user and
kernel pointer. This variable causes a type error, and the
error may spread to other variables through assignments,
return statements, etc. When using our heuristic, these
other, derivative errors will not be printed because they
necessarily will have longer error paths. After printing
the path of the original error, the qualiﬁer variable with
the type error will be marked, suppressing any extrane-
ous error reports. Thus this heuristic has the additional
beneﬁt of selecting the error path that is most likely to
highlight the actual programming bug that caused the er-
buf.win_info.handle: $kernel $user
proto-noderef.cq:66
$kernel == _op_deref_arg1@66@1208
cs.c:1208
cs.c:1199
ds.c:809
ds.c:809
include/pcmcia/ds.h:76
ds.c:716
ds.c:748
ds.c:748
ds.c:748
proto-noderef.cq:27
== &win->magic
== *win
== *pcmcia_get_first_window_arg1@809
== buf.win_info.handle
== buf.win_info
== buf
== *cast
== *__generic_copy_from_user_arg1@748
== *__generic_copy_from_user_arg1
== $user
Figure 3: The CQUAL error report for a bug in the PCMCIA system of Linux 2.4.5 through 2.6.0. We shortened ﬁle
names for formatting. By convention, CQUAL type qualiﬁers all begin with “$”.
ror. The heuristic will also clearly eliminate redundant
errors since if two paths differ only in minor, inconse-
quential ways, they will still share some qualiﬁer vari-
able with a type error. In essence, our heuristic approxi-
mates the buckets of the ideal algorithm by using quali-
ﬁer variables as buckets instead.
Before we implemented this heuristic, CQUAL often re-
ported over 1000 type errors per ﬁle, in the kernel source
ﬁles we analyzed. Now, CQUAL usually emits one or
two error paths, and occasionally as many as 20. Fur-
thermore, in our experience with CQUAL, this error re-
porting strategy accomplishes the main goals of the ide-
alized algorithm described above: it reports just enough
type errors to cover all the untypable statements in the
original program.
4 Experiment Setup
We performed experiments with three separate goals.
First, we wanted to verify that CQUAL is effective at
ﬁnding user/kernel pointer bugs. Second, we wanted to
demonstrate that our advanced type qualiﬁer inference
algorithms scale to huge programs like the Linux kernel.
Third, we wanted to construct a Linux kernel provably
free of user/kernel pointer bugs.
To begin, we annotated all the user pointer accessor
functions and the dereference operator, as shown in Fig-
ure 2. We also annotated the kernel memory manage-
ment routines, kmalloc and kfree, to indicate they re-
turn and accept kernel pointers. These annotations were
not strictly necessary, but they are a good sanity check on
our results. Since CQUAL ignores inline assembly code,
we annotated several common functions implemented in
pure assembly, such as memset and strlen. Finally, we
annotated all the Linux system calls as accepting user
arguments. There are 221 system calls in Linux 2.4.20,
so these formed the bulk of our annotations. All told, we
created 287 annotations. Adding all the annotations took
about half a day. The extended version of this paper lists
all the functions we annotated.
The Linux kernel can be conﬁgured with a variety of
features and drivers. We used two different conﬁgura-
tions in our experiments. In the ﬁle-by-ﬁle experiments
we conﬁgured the kernel to enable as many drivers and
features as possible. We call this the “full” conﬁgura-
tion. For the whole-kernel analyses, we used the default
conﬁguration as shipped with kernels on kernel.org.
CQUAL can be used to perform two types of analyses:
ﬁle-by-ﬁle or whole-program. A ﬁle-by-ﬁle analysis
looks at each source ﬁle in isolation. As mentioned ear-
lier, this type of analysis is not sound, but it is very con-
venient. A whole-program analysis is sound, but takes
more time and memory. Some of our experiments are
ﬁle-by-ﬁle and some are whole-program, depending on
the goal of the experiment.
To validate CQUAL as a bug-ﬁnding tool we performed
ﬁle-by-ﬁle analyses of Linux kernels 2.4.20 and 2.4.23
and recorded the number of bugs CQUAL found. We
also analyzed the warning reports to determine what
programmers can do to avoid false positives. Finally,
we made a subjective evaluation of our error reporting
heuristics to determine how effective they are at elimi-
nating redundant warnings.
We chose to analyze each kernel source ﬁle in isolation
because programmers depend on separate compilation,
Version Conﬁguration Mode
2.4.20
2.4.23
2.4.23
2.4.23
Full
Full
Default
Default
File
File
File
Whole
Raw Warnings Unique Warnings Exploitable Bugs
7
6
1
4
512
571
171
227
275
264
76
53
Table 2: Experimental results. A full conﬁguration enables as many drivers and features as possible. The default
conﬁguration is as shipped with kernels on kernel.org. A ﬁle-by-ﬁle analysis is unsound, but represents how pro-
grammers will actually use program auditing tools. A whole kernel analysis requires more resources, but is sound
and can be used for software veriﬁcation. The raw warning count is the total number of warnings emitted by CQUAL.
We discovered in our experiments that many of these warnings were redundant, so the unique warning count more
accurately represents the effort of investigating CQUAL’s output.
so this model best approximates how programmers actu-
ally use static analysis tools in practice. As described in
Section 3, analyzing one ﬁle at a time is not sound. To
partially compensate for this, we disabled the subtyp-
ing relation kernel < user. In the context of single-ﬁle
analysis, disabling subtyping enables CQUAL to detect
inconsistent use of pointers, which is likely to represent
a programming error. The following example illustrates
a common coding mistake in the Linux kernel:
We had two goals with these whole-kernel experiments.
First, we wanted to verify that CQUAL’s new type qual-
iﬁer inference algorithms scale to large programs, so we
measured the time and memory used while performing
the analysis. We then used the output of CQUAL to mea-
sure how difﬁcult it would be to develop a version of the
Linux kernel provably free of user/kernel pointer bugs.
As we shall see, this study uncovered new research di-
rections in automated security analysis.
void dev_ioctl(int cmd, char *p)
{
char buf[10];
if (cmd == 0)
copy_from_user(buf, p, 10);
else
*p = 0;
}
The parameter, p, is not explicitly annotated as a user
pointer, but it almost certainly is intended to be used as
a user pointer, so dereferencing it in the “else” clause is
probably a serious, exploitable bug. If we allow subtyp-
ing, i.e. if we assume kernel pointers can be used where
user pointers are expected, then CQUAL will just con-
clude that p must be a kernel pointer. Since CQUAL
doesn’t see the entire kernel at once, it can’t see that
dev ioctl is called with user pointers, so it can’t detect
the error. With subtyping disabled, CQUAL will enforce
consistent usage of p: either always as a user pointer or
always as a kernel pointer. The dev ioctl function will
therefor fail to typecheck.
5 Experimental Results
All our experimental results are summarized in Table 2.
Error reporting. We quickly noticed that although
our error clustering algorithm substantially improved
CQUAL’s output, it still reported many redundant warn-
ing messages. Each warning is accompanied by an er-
ror path that explains the source of the user pointer and
the line of code that dereferences it, as shown in Fig-
ure 3. Based on our experience reviewing the warnings,
they can further be clustered by the line of code from
which the user pointer originates. In our experiments,
we performed this additional clustering (according to the
source of the user pointer) manually. Table 2 presents
both the raw and manually clustered warning counts. We
refer only to the clustered error counts throughout the
rest of this paper.
In addition, we separately performed a whole kernel
analysis on Linux kernel 2.4.23. We enabled subtyp-
ing for this experiment since, for whole kernel analyses,
subtyping precisely captures the semantics of user and
kernel pointers.
Bug ﬁnding with CQUAL. Our ﬁrst experiment an-
alyzed each source ﬁle separately in the full conﬁgu-
ration of Linux kernel 2.4.20. CQUAL generated 275
unique warnings in 117 of the 2312 source ﬁles in this
version of the kernel. Seven warnings corresponded to
unsigned long arg)
1: int i2cdev_ioctl (struct inode *inode, struct file *file, unsigned int cmd,
2:
3: {
4: ...
5:
6:
7:
8:
9:
(struct i2c_rdwr_ioctl_data *)arg,
sizeof(rdwr_arg)))
case I2C_RDWR:
if (copy_from_user(&rdwr_arg,
return -EFAULT;
10: ...
11:
12:
13: ...
14:
15:
16:
17:
18:
19:
20:
21:
22: ...
for( i=0; i<rdwr_arg.nmsgs; i++ )
{
if(copy_from_user(rdwr_pa[i].buf,
rdwr_arg.msgs[i].buf,
rdwr_pa[i].len))
{
}
}
res = -EFAULT;
break;
Figure 4: An example bug we found in Linux 2.4.20. The arg parameter is a user pointer. The bug is subtle because
the expression rdwr arg.msgs[i].buf on line 15 dereferences the user pointer rdwr arg.msgs, but it looks safe
since it is an argument to copy from user. Kernel developers had recently audited this code for user/kernel bugs
when we found this error.
real bugs. Figure 4 shows one of the subtler bugs we
found in 2.4.20. Kernel maintainers had ﬁxed all but
one of these bugs in Linux 2.4.22, and we conﬁrmed the
remaining bug with kernel developers. Because of this,
we repeated the experiment when Linux kernel 2.4.23
became available.
When we performed the same experiment on Linux
2.4.23, CQUAL generated 264 unique warnings in 155
ﬁles. Six warnings were real bugs, and 258 were false
positives. We have conﬁrmed 4 of the bugs with kernel
developers. Figure 5 shows a simple user/kernel bug that
an adversary could easily exploit to gain root privileges
or crash the system.
We also did a detailed analysis of the false positives gen-
erated in this experiment and attempted to change the
kernel source code to eliminate the causes of the spuri-
ous warnings; see Section 6.
Scalability of Type Qualiﬁer Inference. To verify
the scalability of CQUAL’s type inference algorithms,
we performed a whole-kernel analysis on Linux kernel
2.4.23 with the default conﬁguration. Since the default
conﬁguration includes support for only a subset of the
drivers, this comprises about 700 source ﬁles contain-
ing 300KLOC. We ran the analysis on an 800MHz Ita-
nium computer, and it required 10GB of RAM and 90
minutes to complete. Since CQUAL’s data-structures
consist almost entirely of pointers, it uses nearly twice
as much memory on 64-bit computers as on 32-bit ma-
chines; also, 800MHz Itaniums are not very fast. There-
fore we expect that CQUAL can analyze large programs
on typical developer workstations in use today.
Software Veriﬁcation. Finally, we took a ﬁrst step to-
wards developing an OS kernel that is provably free of
user/kernel pointer bugs. We performed a brief review of
the warnings generated during our whole-kernel analy-
sis of Linux 2.4.23. This review uncovered an additional
four bugs and a total of 49 unique false positives. We can
draw two conclusions from this experiment. First, our
error reporting algorithms may occasionally cause one
bug to be masked by another bug or false positive. This
is obvious from the fact that the bug discovered in our
ﬁle-by-ﬁle analysis is not reported in the whole-program
analysis. On the other hand, a whole-kernel analysis
with CQUAL does not result in many more warnings
1: static int
2: w9968cf_do_ioctl(struct w9968cf_device* cam, unsigned cmd, void* arg)
3: {
4: ...
5:
6:
7:
8:
9:
struct video_buffer* buffer = (struct video_buffer*)arg;
case VIDIOCGFBUF:
{
memset(buffer, 0, sizeof(struct video_buffer));
Figure 5: A bug from Linux 2.4.23. Since arg is a user pointer, an attacker could easily exploit this bug to gain root
privileges or crash the system.
than a ﬁle-by-ﬁle analysis. This suggests that we only
need to reduce CQUAL’s false positive rate by an order
of magnitude to be able to develop a kernel provably free
of user/kernel pointer bugs.
Observations. We can draw several conclusions from
these experiments. First, type qualiﬁer inference is an
effective way of ﬁnding bugs in large software systems.
All total, we found 17 different user/kernel bugs, several
of which were present in many different versions of the
Linux kernel and had presumably gone undiscovered for
years.
Second, soundness matters. For example, Yang, et al.
used their unsound bug-ﬁnding tool, MECA, to search
for user/kernel bugs in Linux 2.5.63. We can’t make a
direct comparison between CQUAL and MECA since we
didn’t analyze 2.5.63. However, of the 10 bugs we found
in Linux 2.4.23, 8 were still present in 2.5.63, so we can
compare MECA and CQUAL on these 8 bugs. MECA
missed 6 of these bugs, so while MECA is a valuable
bug-ﬁnding tool, it cannot be trusted by security soft-
ware developers to ﬁnd all bugs.
Our attempt to create a veriﬁed version of Linux 2.4.23
suggests future research directions. The main obstacles
to developing a veriﬁable kernel are false positives due
to ﬁeld uniﬁcation and ﬁeld updates, which are described
in the extended version of this paper. A sound method
for analyzing these programming idioms would open the