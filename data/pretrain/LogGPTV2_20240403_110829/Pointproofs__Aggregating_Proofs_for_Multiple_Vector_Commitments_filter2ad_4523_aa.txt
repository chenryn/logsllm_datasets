title:Pointproofs: Aggregating Proofs for Multiple Vector Commitments
author:Sergey Gorbunov and
Leonid Reyzin and
Hoeteck Wee and
Zhenfei Zhang
Aggregating Proofs for Multiple Vector Commitments
Pointproofs:
Sergey Gorbunov2, Leonid Reyzin1,3, Hoeteck Wee4,5, and Zhenfei Zhang1
1Algorand
2University of Waterloo
3Boston University
4CNRS, ENS, PSL
5NTT Research
August 25, 2020
Abstract
Vector commitments enable a user to commit to a sequence of values and provably reveal one or
many values at speci(cid:128)c positions at a later time. In this work, we construct Pointproofs— a new vector
commitment scheme that supports non-interactive aggregation of proofs across multiple commitments.
Our construction enables any third party to aggregate a collection of proofs with respect to di(cid:130)erent,
independently computed commitments into a single proof represented by an elliptic curve point of
48-bytes.
In addition, our scheme is hiding: a commitment and proofs for some values reveal no
information about the remaining values.
We build Pointproofs and demonstrate how to apply them to blockchain smart contracts. In our
example application, Pointproofs reduce bandwidth overheads for propagating a block of transactions
by at least 60% compared to prior state-of-art vector commitments.
Pointproofs are also e(cid:129)cient: on a single-thread, it takes 0.08 seconds to generate a proof for 8
values with respect to one commitment, 0.25 seconds to aggregate 4000 such proofs across multiple
commitments into one proof, and 23 seconds (0.7 ms per value proven) to verify the aggregated proof.
1 Introduction
Vector commitments [LY10, CF13] allow a commi(cid:139)er to commit to a vector of N values and then selectively
reveal elements of the commi(cid:139)ed vector, proving that they correspond to the original commitment. Vector
commitments are used to reduce storage costs in a variety of applications, described in more detail below:
instead of storing a vector of values, one can store only the commitment and receive the values together
with their proofs as needed. Vector commitments allow applications to trade o(cid:130) storage (of all values) for
bandwidth (taken up by revealed values and proofs).
To make the tradeo(cid:130) between storage and bandwidth more a(cid:139)ractive, we need to reduce the proof size.
Because individual proofs need to be cryptographically hard to forge, their sizes cannot be reduced too far.
Instead, the savings come from having a single short proof for multiple revealed values. (cid:145)e shortest such
proofs in the literature are provided by the so-called subvector commitments of Lai and Malavolta [LM19,
1
reference
pp
opening
group
Same-Commitment Cross-Commitment
Aggregatable
Aggregatable
[LM19, Fig 1]
O(N )
[LM19, Fig 2] O(N 2)
[BBF19]
O(1)
[CFG+20, 5.1] O(1)
[CFG+20, 5.2] O(1)
[TAB+20]
O(N )
this work
O(N )
256 B
48 B
1312 B
1024 B
512 B
48 B
48 B
class group
bilinear
class group
class group
class group
bilinear
bilinear
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
Table 1: Summary of subvector commitments with constant-size commitments and openings to subvectors
at 128-bit security level. (See Table 3 for an explanation of the numbers.)
Section 5.2]: a proof takes up only 48 bytes (for typical parameter values at conjectured 128-bit security)
regardless of how many elements of the vector are being revealed.1
In many distributed applications, the commitments, values, and proofs come from multiple sources
that are not even aware of each other’s data. (cid:145)is presents two problems that are not solved by subvector
commitments:
• there is no single entity that can produce a single proof for all the values;
• proofs need to be with respect to multiple di(cid:130)erent commitments.
For instance, consider a blockchain that contains information on multiple accounts. Each account,
controlled by a di(cid:130)erent user, is associated with a memory that consists of multiple variables. (cid:145)e memory
may, for example, store the values of variables in a smart contract. To validate each block, participants
in the blockchain protocol (so-called “validators”) need to have access to the variables used during the
relevant transactions. One solutions is to have validators store all the variables locally. However, to save
on storage, we may instead apply commitments, and ask account holders to commit to the values of their
variables. During the relevant transaction, account holders would produce proofs for the relevant values.
Our goal is to save on bandwidth required for these proofs to reach validators, while enabling solutions
that do not rely on central parties or additional interaction.
We construct Pointproofs—an e(cid:129)cient commitment scheme with small commitments and proofs.
Using Pointproofs, a user can independently commit to her variables and provide short proofs for any
subset of them. Moreover, any third party can non-interactively aggregate multiple proofs with respect to
di(cid:130)erent commitments into a single short proof.
We note that dynamic aggregation for a single commitment gives, in particular, subvector commit-
ments. Such same-commitment aggregation was explored by Boneh, B¨unz, and Fisch [BBF19] and (in work
independent of ours) by Tomescu et al. [TAB+20], who showed how to aggregate proofs for elements of a
vector into a single proof for a subvector. Aggregation of [BBF19] was extended to incremental aggregation
(which allows aggregation of already aggregated proofs) by Campanelli et al. [CFG+20]. To the best of
our knowledge, there have been no schemes that can aggregate proofs across multiple commitments; see
Table 1 for a summary of prior constructions.
1Observe that the length of 48 bytes is very close to the information-theoretic minimum of 32 bytes necessitated by the
birthday bound for 128-bit security.
2
1.1 Our Contributions
First, we formalize aggregatable vector commitments in the cross-commitment se(cid:139)ing (Section 3). For
functionality, we require that proofs for individual elements of a single vector commitment can be
aggregated by any third party into a single proof for the subvector, and proofs for subvectors of multiple
commitments can be aggregated by any third party into a single proof for the multiple subvectors. We also
consider hiding while still supporting the aggregation property.
Next, we add same-commitment and cross-commitment aggregation to the vector commitments of
[LY10] to construct Pointproofs (Section 4). Our proof is a single point on a pairing-friendly curve (48
bytes at 128-bit security), whether for a single value, a subvector of values for a single commitment, or
a set of subvectors for multiple commitments. Our construction easily extends to support full hiding
of the commi(cid:139)ed values at the cost of an additional exponentiation and no increase in commitment or
proof sizes. While the authors of [CF13, Section 3] point out that hiding in vector commitments can be
achieved generically by adding an inner layer of hiding commitments to individual values, this approach
does not automatically extend to aggregatable vector commitments, because proofs for the inner layer are
not automatically aggregatable.
We provide a design overview for applying Pointproofs to reduce storage requirements for blockchains
(Section 5). We speci(cid:128)cally focus on smart contracts. Consider a smart contract with multiple variables.
(cid:145)e current values (m1, . . . , mN ) of all the variables in a given contract are commi(cid:139)ed to a single vector
commitment C, one commitment per contract. To transact with the contract, one provides a 48-byte proof
ˆπ of the current values of the variables needed for the transaction, which are then (optionally) updated
as a result of the transaction. When there are multiple smart contracts, cross-commitment aggregation
allows us to compress multiple proofs ˆπ1, . . . , ˆπ(cid:96) into a single 48-byte proof π. (cid:145)is essentially eliminates
the bandwidth overhead due to proofs in a proposed block, which, depending on the se(cid:139)ing, can take up
more bandwidth than the values being proven.
When applied to smart contracts storage, Pointproofs can be used to reduce validators’ storage
requirements to 4.5 GB for 108 accounts while adding only 31 KB per block overhead for 1000 transactions
(assuming one open value per transaction). Alternative approaches to smart contracts require either (a)
extensive storage from validators (TBs), (b) a central entity to generate proofs for all users, or (c) introduce
at least an additional 60% bandwidth overhead per block. (See Section 5.2 for a more detailed comparison.)
We implement Pointproofs and show that Pointproofs are e(cid:129)cient to produce, aggregate, verify, and
update for real-time use. We release our code to open source under the MIT license on GitHub [Alg20b].
In our benchmarks for a commitment for 1000 variables of a smart contract at 128-bit security level, a user
can produce a subvector proof for an arbitrary subset of variables (touched by a particular transaction) in
54-123ms; a block proposer can cross-commitment aggregate all these proofs, at the cost of about .07ms
per proof; a validator who stores commitments can verify the aggregated proofs in a block at the cost of
0.7–1.9ms per value veri(cid:128)ed, and update commitments to re(cid:131)ect new values of the variables (which change
in response to the transaction execution) at the cost of .0.2–0.3ms per variable updated (numerical ranges
are due to variations in the number of commitments and values proven per commitment).
Summary of Contributions. To summarize, our contributions are as follows:
• We formalize aggregatable vector commitments in the cross-commitment se(cid:139)ing. We also formalize
the hiding property while also supporting aggregation.
• We construct Pointproofs based on bilinear groups and prove their security (in the algebraic group
and random oracle models).
3
• We show how to apply Pointproofs to smart-contract-based transactions on blockchains and
evaluate them compared to alternative solutions.
• We build Pointproofs and evaluate their performance for various parameters.
We envisage that there will be multiple possible applications for cross-commitment aggregation of
proofs. Just like signature aggregation can be bene(cid:128)cial to compress multiple signatures produced by
di(cid:130)erent users into a short signature—with applications ranging from sensor networks [AGH10] to internet
routing [BGR12] to consensus [DGNW20]—proof aggregation can help whenever multiple commi(cid:139)ed
values produced by di(cid:130)erent users are revealed. One can imagine many se(cid:139)ings in which multiple
users or entities independently commit to their databases of records (e.g., public keys, healthcare records,
transactions, etc.) and concurrently produce proofs to reveal several commi(cid:139)ed values. Cross-commitment
aggregation can be applied to save on bandwidth in such se(cid:139)ings.
1.2 Related Work
(cid:145)e idea of using commitments to trade storage for bandwidth in the context of blockchains has appeared
in multiple works in varying levels of detail, including [ST99, Mil12, Whi15, Tod16, But17, Dra17, RMCI17,
CPZ18, BBF19]. (cid:145)e improvement of pu(cid:139)ing multiple proofs together to save bandwidth in this context has
also appeared in a number of works, including [RMCI17, LM19, BBF19, CFG+20]. (cid:145)ird-party aggregation
in blockchains has been explored more for signatures than for commitments [DGNW20]. Aggregating
commitment proofs is a natural counterpart to aggregating signatures.
(cid:145)ere is a long line of work on authenticated data structures in general (going back at least to [Mer88])
and vector commitments speci(cid:128)cally ((cid:128)rst formalized in [LY10, CF13]). Constant-size proofs for a subvector
of values were also achieved in [KZG10, (cid:145)a19]; unfortunately, the binding notion de(cid:128)ned in [KZG10,
Section 3.4] is not strong enough to preclude openings to two inconsistent subvectors (this work was later
extended by [TAB+20] to achieve the necessary binding notion).
In Table 1, we compare our scheme to other subvector commitment commitments. Because of our
focus on constant-size proofs for multiple values, we omit vector commitment schemes that do not have
this feature [LY10, CF13, LRY16, CPZ18].2
(cid:145)e starting point for our commitments is the scheme of Libert and Yung [LY10]. We simply augment
it with aggregation algorithms for proofs within the same commitment and across multiple commitments.
Our scheme, like the scheme of [LY10], requires public parameters whose size is linear in the size of the
commi(cid:139)ed vector. Our public parameters are easy to keep short because of cross-commitment aggregation:
we can split up a long vector into shorter ones and simply aggregate the proofs (although this approach
increases the total size of the commitments, which cannot be aggregated).
Like the scheme of [LY10], our scheme relies on a q-type assumption. In order to prove security of
aggregation, we have to work in the algebraic group model and the random oracle model (see Section 2).
We can reduce these assumptions by lowering e(cid:129)ciency and/or security requirements (see Appendices A
and B).
Following the work of Libert and Yung, there has been a long line of work on pairing-based vector
commitments, including [CF13, LRY16, LM19], and a parallel line of work on polynomial commitments
(starting with [KZG10]; see [BM+19] for an overview). None of these address aggregation. In Appendix C
2We note that Libert et al. [LRY16] describe an accumulator with a constant-size membership witnesses for multiple values;
in order to convert such an accumulator to a subvector commitment (using the conversion of [BBF19]), it would need to also
support constant-size nonmembership witnesses for multiple values.
4
we show that recent (independent of ours) construction of polynomial commitments with batch opening
by Boneh et al. [BDFG20] also gives vector commitments with aggregation, but with lower e(cid:129)ciency than
our construction.
In a recent (and independent of ours) work, Campanelli et al.
[CFG+20] introduced incremental
aggregation for proofs, which allows unbounded aggregation of already aggregated proofs (e(cid:130)ectively
making aggregation an associative operation). (cid:145)ey achieve it for same-commitment aggregation by
modifying hidden-order group constructions of [LM19, BBF19]. Our aggregation is not associative.3
In another recent (and independent of ours) work, Tomescu et al. [TAB+20] proposed pairing-based
commitments with same-commitment aggregation based on the work of [KZG10]; in their scheme, public
parameters needed to verify and update proofs are short.
1.3 Technical Overview of Our Scheme
Our starting point is a pairing-based vector commitment of Libert and Yung [LY10]; the novelty of our
work lies in the aggregation algorithms.
Let (G1, G2, GT ) be a bilinear group of prime order p, along with a pairing e : G1 × G2 → GT and
generators g1, g2, gT = e(g1, g2) for G1, G2, GT respectively. Let α ∈ Zp be a secret value (known to no
one a(cid:137)er the initial generation of public parameters). (cid:145)e public parameters are given by 2N − 1 values
in G1, N values in G2, and one value in GT (which can be easily computed from the others):
It is important that gαN +1
1 , . . . , gαN
gα
; gα
is missing in the public parameters.
A commitment to a vector m = (m1, . . . , mN ) ∈ ZN
coe(cid:129)cients given by m (no constant term), evaluated at α:
, . . . , gα2N
, gαN +2
p
1
1
1
1
2 , . . . , gαN
2
; gαN +1
T
.
is given by raising g1 to a polynomial with
(cid:80)N
C := g
1
i=1 miαi
To reveal mi, the commi(cid:139)er computes a proof, which has a similar polynomial, but without mi, and with
a shi(cid:137) so that mi, if it were present, would be the coe(cid:129)cient of αN +1 instead of αi:
(cid:80)
πi := g
1
j(cid:54)=i mj αN +1−i+j
=
C/gmiαi
1
(cid:16)
(cid:17)αN +1−i
(cid:145)e proof can be veri(cid:128)ed using
e(C, gαN +1−i
2
) ?= e(πi, g2) · gαN +1mi
T
Indeed, Libert and Yung [LY10] show that under a q-type assumption, the scheme is binding: namely,
it is hard to (cid:128)nd a commitment C along with proofs (m0
satisfying the
above veri(cid:128)cation equation. (cid:145)e intuition for binding is quite simple. Note that the adversary does not get
, and therefore the coe(cid:129)cient of αN +1 in the exponent of π, even if adversarially produced, should
gαN +1
1
be 0. Comparing coe(cid:129)cients of gαN +1
on both sides of the veri(cid:128)cation equation, we have that mi on the
right-hand-side of the veri(cid:128)cation equation must match mi in C.
i , π1) with m0
i , π0), (m1
(cid:54)= m1
T
i
i
3It may be possible to augment our scheme to allow aggregation of already-aggregated proofs for both same-commitment and
cross-commitment cases, using the same hash-and-exponentiate approach as described below for aggregation (this would require
a careful choice of hash inputs and a new security proof). (cid:145)is approach, even if secure, would not quite achieve associativity, as
the veri(cid:128)er would need to know the sequence of aggregations.
5
Aggregation: (cid:128)rst idea. Now, suppose the commi(cid:139)er would like to reveal multiple values {mi : i ∈ S}
(where S ⊆ [N ]) for a single commitment C via a very short proof πS. A natural idea is to take
(cid:89)
i∈S
πS =
πi
which can in turn be veri(cid:128)ed using
(cid:32)
e
C,
(cid:33)
gαN +1−i
2
(cid:89)
i∈S
?= e(πS, g2) · g
αN +1(cid:80)
T
i∈S mi
T
It is easy to see that this scheme is insecure, in that an adversary can commit to (m1, m2) = (1, 3) and then
provide a valid proof revealing (m1, m2) = (2, 2) for S = {1, 2}. Indeed, if we compare the coe(cid:129)cients
(cid:80)
of gαN +1
on both sides of the veri(cid:128)cation equation, it is easy to see that the adversary is only bound to
i∈S mi and not all of the values {mi : i ∈ S}. More generally, we need to prevent a(cid:139)acks against
inconsistent reveals for possibly two di(cid:130)erent sets, so that an adversary cannot, for example, “prove” that
(m1, m2) is (1, 3) and (m2, m3) is (2, 1).
Handling same-commitment aggregation. To get around these a(cid:139)acks, we introduce additional
“random” scalars ti into the veri(cid:128)cation equation:
(cid:32)
(cid:33)
and compute the aggregate proof πS by πS =(cid:81)
gαN +1−iti
(cid:89)
i∈S
C,
e
2
αN +1(cid:80)
i∈S miti
?= e(πS, g2) · g
T
. (cid:145)e scalars ti are computed by applying a hash
function H on some carefully chosen inputs depending on C, S,{mi : i ∈ S}. We note that a similar idea
appears in the context of aggregating signatures [BDN18].
To get an intuition for how introducing random scalars yields binding, let us once again look at the
i∈S miti.
on both sides of the veri(cid:128)cation equation. Now, the adversary is bound to(cid:80)
i∈S πti