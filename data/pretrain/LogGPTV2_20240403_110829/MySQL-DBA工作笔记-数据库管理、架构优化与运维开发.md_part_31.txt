### 优化后的文本

**关于 DDL 的注意事项**

在脚本执行过程中，如果存在 DDL 语句，需要特别注意。自动提交事务会导致后续操作无法回滚。因此，在脚本中应避免包含 DDL 语句。

**策略4：分离 DDL 和 DML 语句**

将 DDL 语句从脚本中剔除，单独执行。这样，脚本中只保留了三条 `INSERT` 语句。这样可以确保事务的完整性，并且在出现问题时可以回滚。

**示例：事务处理**

```sql
mysql> begin;
Query OK, 0 rows affected (0.00 sec)

mysql> select * from test_abc;
Empty set (0.00 sec)

mysql> rollback;
Query OK, 0 rows affected (0.00 sec)
```

在这个例子中，没有任何反应是因为第一句是一个 `CREATE` 语句（DDL 语句），它会自动提交事务，导致后续操作无法回滚。

**事务完整性验证**

对于事务的完整性，需要注意以下两点：
1. 事务正常退出时，事务是回滚还是提交。
2. 在事务内控制操作，因为 MySQL 默认是自动提交的。

**示例：事务回滚**

```sql
mysql> begin;
Query OK, 0 rows affected (0.00 sec)

mysql> insert into test_abc (id, name) values (1, 'aa');
Query OK, 1 row affected (0.01 sec)

mysql> rollback;
Query OK, 0 rows affected (0.00 sec)

mysql> select * from test_abc;
Empty set (0.00 sec)
```

通过这个测试，我们可以看到数据被成功回滚。

**小结**

在部署脚本中只包含 DML 语句，推荐这种部署方式，因为它更加可控。

**在线 DDL 操作**

MySQL 的 DDL 操作如添加索引、字段等，我们希望这些操作能够高效完成。然而，DDL 会锁表，影响业务流程，同时增加系统负载和空间需求。

**案例5-3：MySQL 5.7版本原生的 DDL 代价测试**

在 MySQL 5.7 版本中，DDL 操作的实现有所改进。例如，添加一个字段：

```sql
alter table newtest add column newcol varchar(10) default '';
```

这个操作在 MySQL 5.7 中仍然会创建一个临时表进行数据复制，但性能有所提升。

**Online DDL 的两种算法**

Online DDL 有两种算法：`COPY` 和 `INPLACE`。

- **COPY**：执行 DDL 时会创建临时表。
- **INPLACE**：不需要创建临时表，直接修改当前的数据文件。

可以通过以下语法指定算法：

```sql
ALTER TABLE newtest ADD COLUMN newcol VARCHAR(10) DEFAULT '' ALGORITHM=INPLACE;
```

**案例5-4：对比测试 Online DDL 的两种算法**

我们使用一个案例来说明这两种算法的差异。假设我们有表 `newtest`，并对其进行 DDL 操作：

```sql
-- 使用 COPY 算法
ALTER TABLE newtest ADD COLUMN newcol VARCHAR(10) DEFAULT '';

-- 使用 INPLACE 算法
ALTER TABLE newtest ADD COLUMN newcol VARCHAR(10) DEFAULT '' ALGORITHM=INPLACE;
```

通过对比，可以看到 `INPLACE` 算法在性能上更有优势。

**小结**

Online DDL 仍有一些限定情况，许多场景尚未完全测试到，需要结合具体需求来考量。在实际应用中，建议根据具体情况选择合适的算法。