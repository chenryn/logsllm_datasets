1 
Bypass Antivirus Dynamic Analysis 
Limitations of the AV model and how to exploit them 
Date of writing: 08/2014 
Author: Emeric Nasi – emeric.nasi[at]sevagas.com 
Website: http://www.sevagas.com/  
License: This work is licensed under a Creative Commons Attribution 4.0 International License 
Note: This paper requires some knowledge C and Windows system programming  
2 
1. Introduction 
« Antivirus are easy to bypass », « Antivirus are mandatory in defense in depth », «This Cryptor is FUD» 
are some of the sentence you hear when doing some researches on antivirus security. I asked myself, 
hey is it really that simple to bypass AV? After some research I came (like others) to the conclusion that 
bypassing Antivirus consists in two big steps:  
Hide the code which may be recognized as malicious. This is generally done using encryption. 
Code the decryption stub in such a way it is not detected as a virus nor bypassed by 
emulation/sandboxing. 
In this paper I will mainly focus on the last one, how to fool antivirus emulation/sandboxing systems. 
I’ve set myself a challenge to find half a dozen of ways to make a fully undetectable decryption stub (in 
fact I found way more than that). Here is a collection of methods. Some of those are very complex (and 
most “FUD cryptor” sellers use one of these). Others are so simple I don’t understand why I’ve never 
seen these before. I am pretty sure underground and official virus writers are fully aware about these 
methods so I wanted to share these with the public.  
2. Table of Contents 
1.Introduction ......................................................................................................................................... 2 
2.Table of Contents ................................................................................................................................. 2 
3.Bypassing Antivirus theory ................................................................................................................... 3 
3.1.Static signature analysis ................................................................................................................ 3 
3.2.Static Heuristic analysis ................................................................................................................. 3 
3.3.Dynamic analysis ........................................................................................................................... 3 
3.4.Antivirus limitations ...................................................................................................................... 4 
4.The test conditions ............................................................................................................................... 5 
4.1.Encrypted malware ....................................................................................................................... 5 
4.2.Local environment ......................................................................................................................... 5 
4.3.VirusTotal ...................................................................................................................................... 6 
5.Complex methods. ............................................................................................................................... 6 
5.1.The code injection method............................................................................................................ 6 
5.2.The RunPE method ........................................................................................................................ 6 
6.Simple yet effective methods ............................................................................................................... 7 
6.1.The “Offer you have to refuse” method ........................................................................................ 7 
6.2.The “I shouldn’t be able to do that!” method ............................................................................. 11 
6.3.The “Knowing your enemy” method ........................................................................................... 14 
6.4.The “WTF is that?” method ......................................................................................................... 16 
6.5.The “Checking the environment” method ................................................................................... 19 
6.6.The “I call myself” method .......................................................................................................... 23 
7.Conclusion .......................................................................................................................................... 29 
3 
3. Bypassing Antivirus theory 
3.1. Static signature analysis 
Signature analysis is based on a blacklist method. When a new malware is detected by AV analysts, a 
signature is issued. This signature can be based on particular code or data (ex a mutex using a specific 
string name). Often the signature is build based on the first executed bytes of the malicious binary. AV 
holds database containing millions of signatures and compares scanned code with this database. 
The first AV used this method; it is still used, combined with heuristic and dynamic analysis. The YARA 
tool can be used to easily create rules to classify and identify malwares. The rules can be uploaded to AV 
and reverse engineering tools. YARA can be found at http://plusvic.github.io/yara/ 
The big problem of signature based analysis is that it cannot be used to detect a new malware. So to 
bypass signature based analysis one must simply build a new code or rather do minor precise 
modification on existing code to erase the actual signature. The strength of polymorphic viruses is the 
ability to automatically change their code (using encryption) which makes it impossible to generate a 
single binary hash or and to identify a specific signature. It is still possible to build a signature on an 
encrypted malicious code when looking at specific instructions in decryption stub. 
3.2. Static Heuristic analysis 
In this case the AV will check the code for patterns which are known to be found in malwares. There are 
a lot of possible rules, which depends on the vendor. Those rules are generally not described (I suppose 
to avoid them being bypassed too easily) so it is not always easy to understand why an AV consideres a 
software to be malicious. The main asset of heuristic analysis is that it can be used to detect new 
malwares which are not in signature database. The main drawback is that it generates false positives. 
An example: The 
CallNextHookEx function (see MSDN at 
http://msdn.microsoft.com/en-
us/library/windows/desktop/ms644974%28v=vs.85%29.aspx ) is generally used by userland keyloggers. 
Some Antivirus will detect the usage of this function to be a threat and will issue a heuristic warning 
about the software if the function name is detected in Data segment of the executable. 
Another example, a code opening “explorer.exe” process and attempting to write into its virtual memory 
is considered to be malicious. 
The easiest way to bypass Heuristic analysis is to ensure that all the malicious code is hidden. Code 
encryption is the most common method used for that. If before the decryption the binary does not raise 
any alert and if the decryption stub doesn't play any usual malicious action, the malware will not be 
detected. 
4 
I wrote an example of such code based on the Bill Blunden RootkitArsenel book. This code is available at 
http://www.sevagas.com/?Code-segment-encryption and here another link to make Meterpreter 
executable invisible to AVs (at  http://www.sevagas.com/?Hide-meterpreter-shellcode-in ). 
3.3. Dynamic analysis 
These days most AV will rely on a dynamic approach. When an executable is scanned, it is launched in a 
virtual environment for a short amount of time. Combining this with signature verification and heuristic 
analysis allows detecting unknown malwares even those relying on encryption. Indeed, the code is self-
decrypted in AV sandbox; then, analysis of the “new code” can trigger some suspicious behavior. 
If one uses encryption/decryption stub to hide a malicious, most AV will be able to detect it provided 
they can bypass the decryption phase! 
This means that bypassing dynamic analysis implies two things: 
Having an undetectable self-decryption mechanism (as for heuristics) 
Prevent the AV to execute the decryption stub 
I found out there are plenty of easy ways to fool the AV into not executing the decryption stub. 
3.4. Antivirus limitations 
In fact Dynamic Analysis is complex stuff, being able to scan these millions of files, running them in 
emulated environment, checking all signatures… It also has limitations. 
The dynamic analysis model has 3 main limitations which can be exploited: 
Scans has to be very fast so there is  a limit to the number of operations it can run for each scan 
The environment is emulated so not aware of the specificity of the machine and malware 
environment 
The emulated/sandbox environment has some specificity which can be detected by the malware 
5 
4. The test conditions 
4.1. Local environment 
I’ve built the sources and tested the code on Virtual machines running Windows Vista and 7 with local 
(free versions) of AV installed. 
4.2. VirusTotal 
VirusTotal ( https://www.virustotal.com) is the current reference for online scanning against multiple AV. 
It aims to provide to everyone possibility to verify a suspicious file. It is linked to more than 50 AV 
scanners including all major actors. VirusTotal is also an interesting possibility to check AV bypassing 
techniques. 
Note:  VirusTotal should not be used to compare between AV because they have different versions and 
configurations.  Also the AV services called by VirusTotal may be different from the ones installed on a PC 
or from more complete costly versions. You can read the warnings about VirusTotal does and don’t at 
this page https://www.virustotal.com/en/faq/ ). 
You may ask “It is well known that if you want a non detected malware to stay FUD you never send it to 
VirusTotal. Why would you do that?” 
Well first, I don’t care; in fact there are so many methods to bypass AV that even if those were corrected, 
others are still available if I need it for pentests. Secondly, some of the methods described below are so 
simple and powerful it is too difficult to build a signature from it. Also they rely on AV limitations that 
would be too costly to modify. So I am pretty confident methods will still work months or years after the 
sample were submitted. Third I consider these methods are well known to malware writers and should 
be shared with the community as well as AV vendors. 
6 
4.3. Encrypted malware 
For my test I applied the method described in §3.3. I needed a code which would normally be considered 
to be a malware. The easiest way to do that is to use the well known Meterpreter payload from the 
Metasploit framework (http://www.metasploit.com/). I create a C code calling non encoded Meterpreter 
shellcode as described in http://www.sevagas.com/?Hide-meterpreter-shellcode-in .   
I encrypted the code in such a way that any AV static analysis fails (including analysis of the decryption 
stub).  
Here is a copy of the main function: 
/* main entry */ 
int main( void ) 
{ 
decryptCodeSection(); // Decrypt the code 
startShellCode();     // Call the Meterpreter shellcode in decrypted code 
return 0; 
} 
This version of the code is detected by local AV scans and has a VirusTotal score of: 
12/55 
This shows that nowadays  AV relies more and more on dynamic analysis but it is not yet the case for the 
majority of them. 
From that result, my goal was to find methods to abuse the AV and to drop that detection rate to Zero 
(Note that I also had AV locally installed which needed to be bypassed as a condition to appear in this 
paper). 
7 
5. Complex methods.  
These are complex ways used to bypass antivirus, these methods are well documented, it is important to 
know them but it is not really the subject of this article (simple bypass of AV). These complex methods 
are usually used by modern malware and not only to avoid AV detection. 
Both complex methods here imply running the code in an unusual matter. 
5.1. The code injection method 
Code injection consists into running a code inside the memory of another process. This is done generally 
using DLL injection but other possibilities exist and it is even possible to inject entire exe (as described in 
http://www.sevagas.com/?PE-injection-explained ).  
The complexity of the process resides in the fact that the injected code must find a way to execute itself 
without being loaded normally by the system (especially since the base address is not the same).  
For DLL injection, this is done when the DLL is loaded. For code injection, the code must be able to 
modify its memory pointers based on the relocation section. Also being able to reconstruct IAT can be 
important as well.  
DLL injection and code injection are already well described on the Internet. These methods are complex 
to implement so describing them more is outside of this document’s scope. Just keep in mind that if code 
injection is a good way for a malware to be stealthy it is also a lot of code some of which may be 
recognized by heuristic analysis. I think this is why code injection is generally not used to bypass AV, it is 
rather used after that phase to bring stealth and also privileges (for example a code injected in a browser 
will have the same firewall permissions as the browser). 
5.2. The RunPE method 
The “RunPE” term refers to a method consisting into running some code in a different process by 
replacing the process code by the code you want to run. The difference with code injection is that in 
code injection you execute code in distant process allocated memory; in RunPE you replace the distant 
process code by the one you want to execute. 
Here is a short example of how it could work to hide a malware.  
Imagine the malware is packed / crypted and inserted in another binary dedicated to load it (using for 
example linked resources). When the loader is started, it will: 
Open a valid system process (like cmd.exe or calc.exe) in suspended state using CreateProcess 
Unmap the memory of the process (using NtUnmapViewOfSection) 
Replace it with the malware code (using WriteProcessMemory) 
Once the process is resumed (using ResumeThread), the malware executes instead of the 
process. 
8 
Note: Replacing a process memory is no more possible when process is protected by DEP (Data 
Execution Prevention, see http://windows.microsoft.com/en-gb/windows-vista/what-is-data-execution-
prevention). In this case however, instead of uring RunPE on another process, the loader can just call 
another instance of itself and run the malware into it. Since the modified code is the one written by the 
attacker, the method will always work (provided the loader is compiled without DEP). 
The RunPE method combined with customizable decryption stubs is often used by self claimed “FUD 
cryptor” that are available on the malware market.  
As for code injection method, giving full example code for this case is not the objective of this paper. 
9 
6. Simple yet effective methods 
Now that we passed some of the complex methods, let’s go through all the simple methods including 
code samples I tested. I also display the detection results on VirusTotal website for each example. 
6.1. The “Offer you have to refuse” method 
The main limit with AV scanner is the amount of time they can spend on each file. During a regular 
system scan, AV will have to analyze thousands of files. It just cannot spend too much time or power on a 
peculiar one (it could also lead to a form of Denial Of Service attack on the AV). The simplest method to 
bypass AV just consists into buying enough time before the code is decrypted. A simple Sleep won’t do 
the trick, AV emulator have adapted to that. There are however plenty of methods to gain time. This is 
called “Offer you have to refuse” because it imposes the AV to go through some code which consume 
too much resources thus we are sure the AV will abandon before the real code is started. 
Example 1: Allocate and fill 100M memory 
In this first example, we just allocate and fill 100 Mega Bytes of memory. This is enough to discourage 
any emulation AV out there. 
Note: In the code below, most AV will just stop during the malloc, the condition verification on allocated 
pointer is not even needed.  
#define TOO_MUCH_MEM 100000000 
int main() 
{ 
char * memdmp = NULL; 
memdmp = (char *) malloc(TOO_MUCH_MEM); 
if(memdmp!=NULL) 
{ 
memset(memdmp,00, TOO_MUCH_MEM); 
free(memdmp); 
decryptCodeSection(); 
startShellCode(); 
} 
return 0; 
} 
VirusTotal score: 
0/55 
See how easy it is to reduce AV detection? Also this method relies on classic and very common malloc 
function and does not need any strings which could be used to build signature. The only drawback is the 
100M Byte memory burst which could be detected by fine system monitoring. 
10 
Note: If you do not run the memset part the detection rate is 4/55. It used to be Zero two months ago 
when I started my test but I guess AV vendors adapted :-). 
Example 2: Hundred million increments 
An even easier method, which does not leave any system trace, consists into doing a basic operation for 
a sufficient number of time. In this case we use a for loop to increment one hundred millions of times a 
counter. This is enough to bypass AV, but it is nothing for a modern CPU. A  human being will not detect 
any difference when starting the code with or without this stub. 
#define MAX_OP 100000000 
int main() 
{ 
int cpt = 0; 
int i = 0; 
for(i =0; i  
#pragma comment(lib, "Wininet.lib") 
int main() 
{ 