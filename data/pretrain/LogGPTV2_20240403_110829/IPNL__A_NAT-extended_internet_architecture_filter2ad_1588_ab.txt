router. These entities are shown in Figure 1.
IP Host
IPNL Host
Frontdoor
Global IP
and DNS
Global IP
and DNS
Global IP
Global IP
Realm
Local IP
Extend IP Address
TCP/UDP
TCP/UDP
IP
Link
IPNL
IP
Link
Internal nl-router
Add New Protocol Layer
Extend Edges of Infrastructure
Figure 1: IPNL Topology
To IP routers5 in a realm, an nl-router appears to be just an-
other host. To nl-routers, a realm appears to be a multi-access non-
broadcast “link”. The “link-layer” protocol of this non-broadcast
link is IPv4. In IPNL, the IPNL header is the end-to-end addressing
header, and the IPv4 header is delegated the role of an encapsulat-
ing “link” header. In other words, at every nl-router hop, the IPv4
header of the incoming packet is stripped away, and a new IPv4
header is attached to the outgoing packet.
IP addresses for a given realm have no meaning outside that
realm and never appear in IP headers outside of that realm. This is
in contrast to today’s situation, where a global IP address does have
meaning in a private realm, but not vice versa6. This IP address
Henceforth, IP boxes mean IPv4 boxes, and IP addresses mean
IPv4 addresses.
Of course, during transition, NAT and two-faced DNS will con-
tinue to operate as they do today, and, in this non-IPNL context, a
global address does have meaning in a private realm.
isolation partly extends to DNS as well—while there is a single
namespace, the DNS infrastructure itself operates independently in
each realm, with no knowledge about other realms. This implies
no new DNS resource record types are required.
IPNL headers can carry two kinds of routable addresses. One is
the FQDN of the host, and the other is the IPNL address of the host.
IPNL addresses are ﬁxed-length numerical addresses. Datagram
packets may be addressed using FQDNs only, IPNL addresses only,
or both. Nl-routers can route packets using either type.
The FQDN serves as a somewhat static “long-term” address.
While a host may have multiple FQDNs, the FQDN used for a
given connection (or socket instantiation lifetime) must not change
during the connection. Applications would normally use the FQDN
to identify other hosts, and pass the FQDN to lower layers through
the socket API. In such cases, the application is unaware of the
IPNL addresses of hosts (including itself).
The IPNL address, on the other hand, is much more dynamic.
A host may have multiple IPNL addresses, and these may change
during a connection. The FQDN is the glue that binds these mul-
tiple IPNL addresses together. FQDNs are transmitted in the ini-
tial packet for a connection in each direction. Subsequent packets
typically carry only IPNL addresses. IPNL uses both FQDNs and
IPNL addresses because FQDN addresses, while fully routable by
nl-routers, are of variable length, and expensive to route on. IPNL
addresses are short ﬁxed length ﬁelds, and, while transient, have
the advantage of being efﬁciently routable. IPNL uses FQDNs to
bootstrap and maintain the IPNL addresses.
2.1 Routing by FQDN
Every realm has associated with it one or more DNS zones. This
is necessary in order for FQDNs to be routable addresses. Con-
versely, every DNS zone is associated with exactly one realm (al-
though its parent zone may be spread over multiple realms). The
realm associated with a given DNS zone is called the home realm
of the zone. It is possible for a host from a given zone to be at-
tached to a realm other than the home realm. Such a host is said to
be a visiting host, and the realm where it is attached is called the
visited realm. In Figure 2, the home realm for a.com is realm R1.
Host y.a.com is a visiting host at realm R6.
site A
middle realm
t
s
r
e
u
o
r
-
l
n
r
o
o
d
n
o
r
f
t
H1
x.a.com
z.a.com
y.b.com
H2
x.b.com
H3
x.c.com
H4
y.a.com
R1
a.com
internal nl-router
R3
b.com
R2
R4
R5
R6
R5
c.com
site B
M1
M2
M3
M4
/16
/24
R1
R2
R1
private
realm
home
networks
host
Figure 2: Example IPNL Conﬁguration
We say that an internal nl-router is behind a frontdoor if it uses
that frontdoor to reach the middle realm. Zone routing informa-
tion is dynamically maintained in nl-routers so that a packet can
be routed from any nl-router behind a given frontdoor to any zone7
behind the same frontdoor. This routing information can consist of
either an explicit forwarding table entry for the zone, or a default
entry towards the frontdoor.
Typically, an nl-router would contain explicit routing table en-
tries for zones in the same administrative domain, and a default
entry would be used for all other zones. At a minimum, though,
the frontdoor must have explicit routing table entries for all zones
behind it. (An nl-router may also have explicit routing table entries
for zones behind other frontdoors. These “backdoor” routes are
not core to the routing architecture, however, and are not discussed
further; [11] has the details for the interested reader.)
This zone routing information is established with dynamic rout-
ing algorithms. Zones are treated as maskable addresses in the
same way that IP addresses are maskable. Whereas IP addresses
are bit-maskable, zones are maskable only at the “dot” boundaries.
Nevertheless, mechanistically, they are aggregatable in the same
way that IP addresses are aggregatable. As such, multiple zones
may be represented by a single routing table entry (for example,
zones a.x.com, b.x.com, and c.x.com might appear as zone x.com
in a routing table entry).
Zones are, of course, not as aggregatable as IP addresses, both
because the assignment of domain names is primarily based on ad-
ministrative closeness, not topological closeness, and because there
are lots of administrative domains. Typically, we wouldn’t expect
to see much aggregation of zones across realms. Aggregatable
zones would normally share the same home realm.
In practice, this lack of zone aggregatability is not a problem be-
cause nl-routers only need to keep explicit entries for a tiny fraction
of all zones—namely those behind the same frontdoor. If a source
and destination zone do not share the same frontdoor, packets are
routed from the source zone to the frontdoor by default. The front-
door then uses conventional global DNS to route8 packets across
the middle realm to the destination frontdoor.
Speciﬁcally, A-records in middle realm DNS refer not to the IP
address of a host behind a frontdoor, but to the middle realm IP
address of the frontdoor. Before a frontdoor can forward a received
default-routed packet across the middle realm, it must ﬁrst have
done a DNS lookup over the middle realm to learn the IP address
of the neighboring frontdoor.
Up to now, we have described how a packet is routed to a zone
behind the same frontdoor, and how a packet is routed across the
middle realm to a zone behind a different frontdoor. What remains
to be described is how an internal nl-router forwards a packet to
individual hosts attached to the same realm. For this, we require
that internal nl-routers maintain the following per-host routing in-
formation:
(cid:15) The FQDN and private realm IP address of all hosts in the
realm, whether the host is visiting or not, and
(cid:15) For each host whose home realm is the attached realm, but
which is visiting another realm, the FQDN of a zone in the
visited realm must be known.
An internal nl-router can learn of non-visiting hosts via a DNS
zone transfer. Visiting hosts must register both with an nl-router in
We say “route to a zone” as shorthand for “route to an nl-router
attached to the home realm of the zone”.
This simply means that the frontdoor also acts as a DNS server,
and does not mean that it queues up FQDN-attached packets wait-
ing for resolution (see Section 3.3 for an example).
its home realm, and with an nl-router in its visited realm. When an
nl-router receives such a registration, it, in turn, informs all other nl-
routers attached to the realm. These neighbor nl-routers are learned
through static conﬁguration.
Because nl-routers must know about every host in its attached
realms as well as about every other attached nl-router, it should
be clear that private realms are not expected to be very big. They
should have only a fraction of the over 16 million (Sections 2.2
gives the IPNL address format, including the sizes of various ﬁelds)
possible hosts from the private address space.
To summarize, take the case where host x.a.com in Figure 2 is
sending a packet to host x.c.com. Default routing gets the packet
to frontdoor M1 (or M2). DNS information gets the packet from
M1 to M4 (or M3). Dynamic routing on zones gets the packet from
M4 to the R5-R6 internal nl-router. Internal nl-router R5-R6’s host
database gets the packet from there to host x.c.com.
2.2 Routing by IPNL Address
IPNL addresses are 10 bytes long, and consist of three parts (in
order of high-order to low order):
1. A 4-byte globally unique IP address, which is the Middle
Realm IP address (MRIP) of a frontdoor that the host cur-
rently uses to reach the middle realm.
2. A 2-byte Realm Number (RN) identifying the realm behind
this frontdoor; because of the possibility of realm number
translation (Section 3.2), the exact RN value in this ﬁeld is
meaningful only from the perspective of this frontdoor, and
may differ from the RN value used by internal hosts within a
site, and by other frontdoors.
3. A 4-byte IP address, which is the End Host IP (EHIP) ad-
dress of the host within the realm speciﬁed by the RN ﬁeld.
Neither RNs nor EHIPs are globally unique.
||
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|
|
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
EHIP
MRIP
RN
|
|
Now, we repeat the example of a packet from host x.a.com to
x.c.com, but using IPNL addresses instead. The destination address
for the packet would be M4:R6:H3 (where M4 is the MRIP, R6 is
the realm number, and H1 is the EHIP). Default routing gets the
packet to M1 (or M2). MRIP M4 gets the packet from M1 to M4.
Dynamic routing on RNs gets the packet from M4 to the R5-R6
internal nl-router. Internal nl-router R5-R6 uses the EHIP H3 to
deliver the packet to host x.c.com.
2.3 Persistent Host Knowledge
IPNL hosts are conﬁgured with only two pieces of information:
1) their EHIP, and 2) their FQDN. Note that this is exactly the
same information they are conﬁgured with for IPv4 today. In other
words, no new conﬁguration mechanisms (i.e., enhancements to
DHCP) are required. Note too that an IPNL host does not keep
persistent information about its MRIPs. Instead, these are learned
dynamically, literally with every packet received (Section 4.1).
IPNL hosts must also learn the set of nl-routers attached to their
realm. The basic approach is for the host to ﬁnd one nl-router, using
either IP anycast or a well-known domain name. This nl-router
can then inform the host of the other nl-routers. Hosts periodically
refresh this information.
2.4 The IPNL Header
1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2
1
2
3
|
Protocol
Source EHIP
Local or Used Source Realm
+-------+-----+-+---------------+---------------+---------------+ local
|Version|Loc|G|F|
+-------+-----+-+---------------+---------------+---------------+
|
|
+---------------+---------------+---------------+---------------+
|
|
+---------------+---------------+---------------+---------------+
|
|
+---------------+---------------+---------------+---------------+
|
|
+
+
|
|
+---------------+---------------+---------------+---------------+
Local Dest Realm
Random ID (RID)
Dest EHIP
Rsv
|
| header
|