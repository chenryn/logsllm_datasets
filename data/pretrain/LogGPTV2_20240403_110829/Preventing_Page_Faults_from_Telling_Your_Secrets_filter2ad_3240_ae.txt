# Data and Analysis

## 1. Performance Metrics
The following table presents the performance metrics for various cryptographic functions, including the number of page faults and execution times. The overhead percentages (Ovh) are also provided.

| Function | Page Faults | Execution Time (ms) | Ovh (%) |
|----------|-------------|---------------------|---------|
| AES      | 1.311       | -3.08               | 1.057   | 81.18  |
| CAST5   | 28.563      | -10.15              | 10.836  | 96.82  |
| EdDSA   | 1.840       | 29.22               | 0.546   | 99.16  |
| powm    | 23.744      | 7413.66             | 10.174  | 93.28  |
| SEED    | 10.623      | 3.67                | 8.295   | 67.31  |
| Stribog | 3.558       | -4.80               | 3.737   | 70.66  |
| Tiger   | 4.26        | -8.89               |         |        |
| Whirlpool| -12.23     | -3.41               |         |        |

## 2. Security Analysis
### 2.1 No Leakage
In Libgcrypt implementations of Blowfish, Camellia, DES, 3DES, IDEA, RC5, Serpent, Twofish, ECDSA, and SHA512, all input-dependent code and data memory accesses are confined within a single page for sensitive portions. Similarly, in OpenSSL, AES, Blowfish, Camellia, DES, 3DES, IDEA, RC5, Serpent, Twofish, DSA, RSA, and SHA512 do not exhibit leakage via page fault side channels.

### 2.2 Leakage via Input-Dependent Code Page Access
In Libgcrypt, EdDSA and `powm` exhibit input-dependent code access across pages, making them vulnerable to pigeonhole attacks. The `powm` function is used in ElGamal, DSA, and RSA, which can leak bits of information about secret exponents.

### 2.3 Leakage via Input-Dependent Data Page Access
For AES, CAST5, SEED, Stribog, Tiger, and Whirlpool implementations in Libgcrypt, at least one of the S-Boxes crosses page boundaries, leaking information about secret inputs. Similarly, CAST5 and SEED implementations in OpenSSL are also vulnerable.

## 3. Application to Case Studies
We transformed 8 Libgcrypt and 2 OpenSSL vulnerable implementations in our evaluation.

### 3.1 Compiler Toolchain Implementation
Our automation tool is implemented in LLVM 3.4 and Clang 3.4 C/C++ front-end to transform C/C++ applications. For our case studies, we log all analysis information for layout analysis and to facilitate developer-assisted improvements. Our transformation pass applies deterministic multiplexing at the LLVM IR level.

### 3.2 Empirical Validation
Applications are compiled into static binaries for testing on PODARCH, which is implemented on QEMU and supports only static linking. We execute the standard regression test-suite (make check) to validate our defenses. We ensure that the page fault profile of patched executions under all test inputs is indistinguishable from the original. We use PinTool to log all instructions and memory accesses, confirming that our deterministic multiplexing produces indistinguishable page access profiles.

## 4. Performance Evaluation
### 4.1 Normalized Baseline
To ensure that the choice of our evaluation platform (PODARCH) does not significantly bias the overheads, we conducted two sets of measurements:
1. Unmodified OpenSSL and Libgcrypt implementations on PODARCH.
2. Vanilla and modified binaries on a native Intel Core i7-2600 CPU.

The overheads on the native CPU were similar to those on PODARCH, deviating by only 1%.

### 4.2 Overhead
We calculate the overhead by comparing the baseline performance of unmodified code against the execution time of the patched application functions. The average overhead is 705×, with a maximum overhead of 4000× for `powm`. The overhead is mainly dominated by the copying of data in the fetch step, accounting for 76.5% of the total overhead on average.

## 5. Effectiveness of Optimizations
We applied developer-assisted strategies to reduce the average overhead from 705× to -2.7%. For `powm`, O3 reduced the performance overhead from 4000× to 74×, and O4 further reduced it to 3.67% by eliminating memory copying. We applied O1 to reduce copy operations and O2 to reorder lookup table layouts, resulting in lower page faults. In 7 cases, the patched version executed faster than the baseline code.

## 6. Hardware-Enabled Defenses
### 6.1 Contractual Execution
We propose a hardware-software technique where the enclave is guaranteed by the hardware that certain virtual addresses will always be mapped to physical memory during its execution. The enclave informs its memory requirements to the OS via a callback mechanism. The CPU acts as a contract mediator, enforcing this guarantee. This approach incurs an overhead of 6.77% for our benchmarks.

### 6.2 Mitigating Contract Violation
When the CPU signals a contract violation, the enclave must terminate safely without leaking information. We intercept page faults and perform a fake execution to suppress the fault location. This defense requires the enclave page fault handler to be invoked, which is not guaranteed in the current SGX design. We have implemented this defense in PODARCH, showing a 6.77% overhead.

### 6.3 Discussion: Other Alternative Approaches
**Randomization of Page Access**: Oblivious RAM (ORAM) randomizes data access patterns but involves significant overhead due to continuous shuffling and re-encryption. For cryptographic implementations, the cost of shuffling is prohibitive, making ORAM less desirable.

## 7. Evaluation
### 7.1 Bucket Size and Execution Time
The following table shows the bucket size (Code + Data), average execution time, and deviation in benign and malicious OS environments for various test-case scenarios.

| Cases   | Bucket Size (Code + Data) | PF Handler (Bytes) | Benign OS (ms) | Malicious OS (ms) | Vanilla Time (ms) | Contractual Time (ms) |
|---------|---------------------------|--------------------|----------------|-------------------|-------------------|-----------------------|
| AES     | 3 + 3                     | 274                | 4.157          | 2.901             | 9729.526          | 4.161                 |
| CAST5  | 1 + 2                     | 231                | 2.901          | 4783.997          | 1.269             | 2.969                 |
| EdDSA  | 19 + 1                    | 204                | 9729.526       | 9754.806          | 0.803             |                       |
| powm   | 21 + 1                    | 256                | 4783.997       |                   | 0.506             |                       |
| SEED   | 2 + 2                     | 261                | 1.269          |                   | 12.680            |                       |
| Stribog| 1 + 5                     | 253                | 0.803          |                   |                   |                       |
| Tiger  | 1 + 3                     | 244                | 0.506          |                   |                   |                       |
| Whirlpool| 1 + 5                  | 245                | 12.680         |                   |                   |                       |

This structured and detailed presentation should make the content more clear, coherent, and professional.