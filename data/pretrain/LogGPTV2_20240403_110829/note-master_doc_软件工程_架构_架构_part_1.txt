---
tags: ['架构']
standardName: 'Architecture'
books: [
  {name: '架构整洁之道'}
]
---
# 架构
架构满足了应用程序的非功能性需求：可维护性、可测试下、可扩展性、可部署性等。
软件架构的最高优先级是保持系统正常工作，软件架构的策略就是京可能长时间保留尽可能多的可选项
## 架构是什么
### 开发
一个软件系统的开发，应该就是要方便其开发团队
- 流行的不一定好，适合的才是最好的
一个系统的架构，反映了开发该系统的团队组织结构
### 部署
良好的软件结构可以让系统构建完成就能部署，同时实现一键式的轻松部署是设计软件架构的一个目标
### 运行
设计良好的架构能明确地反映出系统运行时的需求
架构是系统运行时的一个表示
### 维护
维护的主要成本
- 探秘：解决问题的最佳方式
- 风险：解决问题衍生出的新问题
### 保持可选项
**用例**：对系统如何响应外接请求的描述
软件系统可降解为
- 策略：业务逻辑
- 细节：具体实现技术，数据库、web等
在大部分时间，无法预知系统的所有用例，越晚决定实现细节，就能掌握更多信息，更有利于决策
### 设备无关性
高层策略与低层实现细节分离
### 解耦
系统可以被按层解耦，将不同层隔离开来，避免变化扩散到其他层
当对用例进行分组时，增加新用例就会对旧的用例影响降低
#### 解耦模式
- 源码解耦：控制源代码模块的依赖关系
- 部署层次解耦：控制可部署模块的依赖关系
- 服务解耦：依赖关系降低到服务层次
软件架构是生长的，从单体到相互独立可部署单元，再到服务化
设计良好的架构应该允许软件系统从单体到服务，也可以从服务退化到单体
### 重复
重复需要分清表面重复还是实际重复，随着软件的演进，两段重复的代码可能会变得不同
### 独立性
- 开发独立性：当对系统进行解耦时，不同的模块就可以由多个团队来分工开发
- 部署独立性：同样，解耦之后部署就可以互不影响
## 分类
### 基础架构
- 以云平台 操作系统等基础设施为主
### 中间件与大数据架构
### 业务系统架构
- 通用软件系统 办公软件 浏览器等一类
- 离线业务系统 大数据分析 数据挖掘系统
- 在线业务系统 在线为特定业务服务的系统
这些不同分类的架构界限不是很清晰 随着时间演进 各个类型之间的系统边界会互相渗透
## 架构视图
- 架构的表现形式通常是各种图
绘图原则4R：
- 明确 Rank：也就是说，不要事无巨细地把一个大系统的方方面面都在一张架构图中展现出来，而应该明确你要阐述的系统所属的级别（L0～L4），然后只描述这个级别的架构信息。
- 画出 Role：从不同的角度来分解系统，看看系统包含哪些角色，角色对应架构图中的区块、图标和节点等。
- 画出 Relation：有了角色后，画出角色之间的关系，对应架构图中角色之间的连接线，不同的连接线可以代表不同的关系。
- 最后画出 Rule：挑选核心场景，画出系统角色之间如何协作来完成某项具体的业务功能，对应系统序列图。
### 四加一
![4+1视图](/assets/屏幕截图%202021-01-18%20170117.png)
- 逻辑视图：对系统职责进行划分，通常还要求对各逻辑元素间的关系，也就是接口进行描述
- 实现视图：描述逻辑架构元素代码位置 描述代码构建相关的包括构建依赖、构建工具链、构建环境信息
- 部署视图
- 进程视图：组件之间的交互 常见的如时序图描述
- 场景视图：从用户角度看系统需要实现的需求
### 业务架构图
描述系统对用户提供了什么业务功能
![2022511135653](/assets/2022511135653.webp)
- 通过不同颜色来标识业务状态
- 业务分组管理
- 区块对齐
### 前端架构图
描述客户端和前端的领域逻辑架构
![2022511135951](/assets/2022511135951.webp)
- 不同颜色来标识不同角色
- 通过连接线来表示关系
- 分层或分组
### 系统架构图
描述后端的逻辑架构
![用来表示系统角色](/assets/202251114154.webp)
![用来表示角色之间的关系](/assets/20225111423.webp)
- 不同颜色来标识不同角色
- 连接线来表示关系
- 逻辑分组
### 应用架构图
跟系统架构图很像，唯一需要注意的点就是复杂系统分域来画
![202251114521](/assets/202251114521.webp)
### 部署架构图
描述后端系统具体是如何部署的
![202251114630](/assets/202251114630.webp)
- 用图标代替区块，这样看起来更加美观和容易理解
### 系统序列图
描述某个业务场景下，系统各个角色如何配合起来完成业务功能
![202251114746](/assets/202251114746.webp)
### 架构立方体
- 逻辑
- 物理
- 应用
- 技术
- 功能
- 部署
## 架构体系框架
- ABSD
- DSSA
- AT
## 架构的演进
站在后端开发人员的角度上软件架构风格从大型机（Mainframe），到原始分布式（Distributed），到大型单体（Monolithic），到面向服务（Service-Oriented），到微服务（Microservices），到服务网格（Service Mesh），到无服务（Serverless）
谈起微服务，会想到技术异构，便于部署，高性能等等，但这些似乎都只是锦上添花，架构的核心在于解决软件的存活问题，如果一个软件压根就不能提供服务，这些锦上添花的功能也毫无作用
## 架构认知派别
### 组成派
架构由 模块/服务/领域 组成
本质在描述组件与组件之间的交互（画各种架构图）
### 决策派
软件架构由一个个决策组成的有机整体（把架构比作城市规划）
每个做的决策都有它背后的原因
## 架构的目标
用最小的人力成本来满足构建和维护该系统的需求，主要目的是为了解决软件系统复杂度带来的问题
复杂性的来源：
- [高并发](/软件工程/架构/系统设计/高并发.md)
- [可用性](/软件工程/架构/系统设计/可用性.md)
- 扩展性
- 成本 安全性 规模大小
在乱麻系统下工作，过度的自信导致软件维护成本持续上升
软件的两个价值：
- 行为价值 让系统正常运行 完成需求
- 架构价值 让系统更容易修改
维护架构价值，是研发人员所需要进行斗争的
## 架构的意义
### 项目干系人交流的手段