launching DoS attacks to the root or the peers. In particular, we in-
tend to avoid grim trigger designs [13] where the whole system can
“melt down” due to a single malicious peer sending a single mes-
sage. The following discusses possible malicious attacks in DCast.
Malicious peers may attract multicast blocks from the root and
then discard those blocks. For each such multicast block, the mali-
cious peers need to send Droot junk blocks. If the malicious peers
can send enough junk blocks to attract all the multicast blocks (no-
tice that the root usually sends out as many multicast blocks as its
bandwidth allows), then they can likely already directly DoS the
root with such bandwidth.
Malicious peers may also interact with and attack the peers, in
the following two ways. First, malicious peers may remain silent
when other peers pull from them. To do so however, the malicious
peers need to receive the junk blocks for debt-link establishment
ﬁrst, which makes the damage constrained by their attack band-
width. Further because a peer monitors the multicast blocks it re-
ceives so far, the peer will simply establish new debt-links and pull
from other peers when under such attack. Second, malicious peers
may actively participate in doin issuance/propagation/payment. But
the worst situation that can happen here is non-payment and for
all the debt-links on the propagation chain to be permanently occu-
pied. Under our full design with subintervals (Section 5.2), the total
number of non-deviators that a doin can traverse is bounded (e.g.,
within 10). This in turn limits the damage that a malicious peer
can cause in such a case. Note that in order to participate in doin
issuance/propagation, the malicious peers will need to send/receive
multicast blocks, which again makes the damage constrained by
their attack bandwidth.
5. DCast PROTOCOL
This section elaborates the protocol level details on debt-link es-
tablishment, doin propagation, and doin payment. Algorithm 1 pro-
vides concise pseudo-code for these key procedures. For clarity,
Section 5.1 ﬁrst presents a basic version of the protocol, and then
Section 5.2 describes the full DCast protocol. Also for clarity, the
discussion in Section 5.1 and 5.2 will assume that the peers have
no clock error — at the end of Section 5.2, we will explain how
bounded clock errors can be trivially accounted for. Finally, we
will describe the protocol as if there were no message losses. When
messages are lost, no special action is needed and the intended re-
ceiver simply assumes that the sender did not send that message.
As long as the protocol parameters are set properly as explained in
Section 4.4, the incentives in DCast will not be disrupted by such
message losses.
5.1 The Basic Protocol
Figure 2 illustrates the message exchanges in the key compo-
nents of the basic protocol.
Message encryption and authentication. In DCast, every mes-
sage is encrypted and authenticated via a MAC using a symmet-
ric session key.
In sharp contrast to typical virtual currency de-
signs (e.g., [27]), DCast does not need any other crypto operations.
Setting up these session keys is trivial since each peer has a pub-
lic/private key pair. Speciﬁcally, a peer B may communicate with
peer A when i) paying for doins issued by A, ii) establishing or free-
ing up debt-links from A, or iii) pulling multicast blocks from A.
When paying for a doin, A’s public key’s hash is already contained
in the doin’s id (explained later). When establishing debt-links, B
will contact some random IP addresses in its view to obtain those
peers’ public keys. Since here B just needs to obtain the public
key of some random peers, it does not matter if the IP address is
spoofed — that would just be equivalent to polluting B’s view via
a sybil attack, which we already discussed earlier. Finally, when
freeing up debt-links or pulling blocks from A, B must already
have A’s public key during debt-link establishment.
Establishing debt-links. To establish a debt-link from A, B sim-
ply sends Dlink junk blocks to A. No reply from A is needed.
How many debt-links to establish from which peers is largely a per-
formance issue, and DCast uses the following heuristic. During
each of the ﬁrst few rounds (e.g., 10), each peer B selects a dis-
tinct peer in its view and establishes a certain number (e.g., 20 to
80, depending on available bandwidth) of debt-links from that peer.
Afterwards, B monitors the number of multicast blocks that it has
received in recent rounds, and establishes additional debt-links if
that number is low.
Pulling blocks and propagating doins. In each round, a peer B
selects some random peer A that has debt-links to B, and pulls
multicast blocks from A. To do so, B ﬁrst sends to A a summary
describing the multicast blocks that B already has. A then sends
back those blocks that A has but B does not have, up to the num-
ber of unoccupied debt-links from A to B. For each block, A also
passes to B the id of some doin. A doin’s id includes the IP address
573Algorithm 1 DCast routines for pulling blocks, sending blocks
with doins, paying for doins, and freeing up debt-links. All mes-
sages are encrypted and authenticated (not shown). RLI means re-
lease local id, which serves to enable the two peers at the current
hop to differentiate (potentially) concurrent Releases for the same
debt-link when some peers deviate.
1: /* Pulling multicast blocks */
2: Send h“data-request”, summaryi to a random peer that has at
least one unoccupied debt-link to me;
3: Wait for h“data-reply”, (block, doin id, debt-link id) tuplesi;
4: /* Sending multicast blocks and doins */
5: Upon receiving h“data-request”, summaryi from B:
6:
7:
8:
9:
S = set of blocks that I have and are not in summary;
k = max(|S|, number of unoccupied debt-links to B);
if I hold less than k doins, then issue new doins;
Send back h“data-reply”, k tuples of (block, doin id, debt-
link id)i;
Send h“pay-request”, doin id, summaryi to doin issuer;
10: /* Paying for a doin */
11: for each expired doin that I hold do
12:
13: Wait for h“bill”, doin id, blocks neededi;
14:
15: Wait for time d;
16:
17: end for
Send back h“payment”, doin id, Dpay blocksi;
Send h“release”, debt-link id, RLIi to predecessor;
18: /* Accepting a doin payment */
19: Upon receiving h“pay-request”, doin id, summaryi:
20: if I can ﬁnd in the summary at least Dpay blocks that I need
then
Send back h“bill”, doin id, blocks neededi;
21:
22: Wait for h“payment”, doin id, Dpay blocksi;
23: Mark the doin as paid;
24: end if
25: Upon receiving h“release”, debt-link id, RLIi and if I am the
issuer of the corresponding doin:
26:
27:
if the doin has been paid, then free up debt-link;
else send back h“denial”, debt-link id, RLIi;
28: /* For a peer who previously relayed the doin */
29: Upon receiving h“release”, debt-link id, RLIi:
30:
Relay release to predecessor (with proper debt-link id and
RLI);
Set a timer of 2d · (doin’s r-stamp) for this release;
if no denial within the timeout, then free up debt-link;
31:
32:
33: Upon receiving h“denial”, debt-link id, RLIi:
34: if the corresponding release has not timed out then
35:
36:
Invalidate the release (i.e., will not free up debt-link);
Relay denial to successor (with proper debt-link id and
RLI);
37: end if
and the one-way hash of the public key of the doin issuer, a distinct
sequence number assigned by the doin issuer, as well as the issuing
interval indicating the interval during which the doin was issued.
The total size of the doin id is less than 40 bytes (in comparison,
multicast blocks are often 1KB or larger). The one-way hash func-
tion is publicly-known, and the hash enables the authentication of
the doin issuer. One could directly include the public key itself, but
a hash is shorter.
The above protocol with doins has several salient features as
compared to virtual currency systems. First, our protocol is highly
efﬁcient and is the same as plain gossiping except for piggybacking
the doin ids in A’s reply. In particular, there is no need for A to ob-
tain any signature from B to certify the acceptance of the debt. It
does not matter if B later denies the debt — if B does not pay for
the debt, A simply will not free up the corresponding debt-links. In
fact, even if A obtained a signature from B, such signature would
be of no use: There is no arbitrator in the system that can arbitrate
the interaction and punish B. Second, the double-spending prob-
lem with virtual currency is completely avoided — a rational peer
will prefer to issue a new debt instead of relaying the same debt
to two different peers. Third, there is no need to protect the doin
id from manipulation when a doin is relayed. Modifying any ﬁeld
in the doin id will be equivalent to “issuing” a new doin and not
propagating the current doin.5
Paying for one-hop doins and freeing up debt-links. If a doin
only circulated for one hop before being paid, the payment process
would be simple. Namely, the current holder B of the doin will
send to the doin issuer A the doin id and a summary of the multicast
blocks that B has.
If A can ﬁnd Dpay multicast blocks that A
needs, A tells B those blocks.
(Otherwise B needs to try again
later.) B then sends the blocks to A and completes the payment.
After receiving the blocks, A frees up the debt-link.
Same as earlier, here B does not need to obtain a signature from
A to certify the payment. A has no incentive not to free up the
debt-link after the payment. After all, even if it does not free up
the debt-link, B will not make a second payment.6 Furthermore,
not freeing up the debt-link would prevent A from making further
proﬁts on the debt-link.
5.2 The Full Protocol
Paying for multi-hop doins and freeing up debt-links. The situa-
tion becomes more complex when a doin traverses a chain of peers.
The central difﬁculty here is the lack of incentive for the doin issuer
to notify other peers on the chain to free up their corresponding out-
going debt-links. For example, imagine that a doin traverses three
peers A → C → B and then B pays A for the doin. C needs
to be notiﬁed of the successful payment so that it can free up the
debt-link to B. A has no incentive to notify C, since sending no-
tiﬁcation costs bandwidth. B does have the incentive to notify C,
but B needs to present C a receipt from A to convince C. Unfor-
tunately, A again has no incentive to send B such a receipt. The
standard way of solving this problem is to use fair exchange proto-
cols [10] so that A will only get the payment if it simultaneously
gives B a receipt. Unfortunately, those heavy-weight multi-round
protocols incur by far too much overhead for our purpose.
It turns out that by leveraging the rationality of the peers, a fair
exchange is not necessary. Our key observation here is that while
A has no incentive to conﬁrm the payment, it does have the incen-
tive to rebut a false payment claim. Namely, if B does not pay and
falsely claims to C that B has paid, then A has the incentive to tell
5Of course, this also means that a deviator may “issue” doins on
other peer’s behalf. Our proof will show that a deviator has no
incentive to do so, again because a doin is a debt.
6Formally, it is possible to model this interaction as a game with
two Nash equilibria, and the completion of the payment publicly
signals to the two peers the transition from one equilibrium to the
other. Properly switching between two equilibria is a well-known
technique [16] in mechanism design. Here we omit the tedious
formalism. Also as shown earlier, unexpected message losses can
be readily dealt with as well, as long as the loss probability is not
excessive.
574C that B has lied, because otherwise A will no longer get the pay-
ment. This observation leads to the following design where A does
not send out a receipt — rather, it sends out a denial if necessary.
In DCast, after making the payment, B propagates a simple Re-
lease message backward along the chain to request the debt-links
to be freed up. Each peer on the chain has clear incentive to re-
lay the Release to its predecessor, since doing so is the only way
to free up its incoming debt-link. When the Release reaches A, if
A did not actually receive the payment, A will propagate a Denial
message along the chain to prevent the debt-links from being freed
up. A has clear incentive to do so, because otherwise A will no
longer get a payment. Similarly, all the peers on the chain have the
incentive to relay the Denial to make sure that the message reaches
B (so that a rational B will make the proper payment), because
otherwise their incoming debt-links will never be freed up.
Obviously, A may still propagate a Denial even though payment
has been made. A closer examination shows that A actually has no
incentive to do so. The reason is exactly the same as in our earlier
scenario with one-hop doins: A will simply not obtain a second
payment even if it propagates a Denial after a payment has been
made. Finally in the above design, after receiving a Release, a peer
needs to wait for a potential Denial within a certain timeout, before
freeing up the debt-link. The following discusses how to properly
set the timeout value.
Properly timing out when waiting for a potential Denial. Con-
sider a chain of peers through which the doin has traversed.
If
every peer on the chain naively uses the same timeout, then a de-
viator may intentionally delay the Denial and cause the Denial to
reach some peers but not others before the timeout. Conceptually
to avoid this problem, peers farther away from the doin issuer need
to have larger timeout. Hop counts would enable a peer to deter-
mine how far away it is from the doin issuer, but hop counts can
be easily manipulated by the deviators. Instead, DCast uses the re-
ceiving time of a doin as a secure hop count that is guaranteed to be
monotonic but not necessarily consecutive. Speciﬁcally, we divide
each interval into a number (e.g., 10) of equal-length subintervals.
A peer records the subinterval during which a doin is received as the
doin’s r-stamp. For a doin received in subinterval i, a non-deviator
may only relay the doin in subinterval j when j ≥ i + 1. In other
words, a doin traverses at most one non-deviator in one subinterval.
A peer B with a doin r-stamp of r simply uses a timeout dura-
tion of 2dr after it forwards a Release to its predecessor C. Here
d is a pessimistic upper bound on message propagation delay, and
messages with delay larger than d will simply be treated as lost. As