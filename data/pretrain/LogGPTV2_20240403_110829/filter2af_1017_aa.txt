本文由红日安全成员：ama666 编写，如有不当，还望斧正。
大家好，我们是红日安全-Web安全攻防小组。此项目是关于Web安全的系列文章分享，还包含一个HTB靶场供大家练习，我们给这个项目起了一个名字叫[
**Web安全实战**](https://github.com/hongriSec/Web-Security-Attack)
，希望对想要学习Web安全的朋友们有所帮助。每一篇文章都是于基于 **漏洞简介-漏洞原理-漏洞危害-测试方法（手工测试，工具测试）-靶场测试（分为PHP靶场、JAVA靶场、Python靶场基本上三种靶场全部涵盖）-实战演练（主要选择相应CMS或者是Vulnhub进行实战演练)**
，如果对大家有帮助请 **Star** 鼓励我们创作更好文章。如果你愿意加入我们，一起完善这个项目，欢迎通过邮件形式（PI:EMAIL）联系我们。
## 漏洞简介
### 1.1 什么是反序列化漏洞
利用程序已有的一些函数在参数中注入一些代码，达到代码执行的效果。
### 1.2 漏洞危害
攻击者可以利用反序列化漏洞,通过构造恶意请求报文远程执行命令，危害较大。
## 漏洞原理
### 2.1 序列化与反序列化
在了解反序列化漏洞之前，必须要先了解什么序列化、反序列化以及它们各有什么用。
#### 2.1.1 序列化
以`PHP`语言为例子，在写程序尤其是写网站的时候，经常会构造`类`，并且有时候会将实例化的类作为变量进行传输。序列化就是在此为了减少传输内容的大小孕育而生的一种压缩方法。我们知道一个`PHP类`都含有几个特定的元素:
`类属性`、`类常量`、`类方法`。每一个类至少都含有以上三个元素，而这三个元素也可以组成最基本的类。那么按照特定的格式将这三个元素表达出来就可以将一个完整的`类`表示出来并传递。
**序列化** 就是将一个类压缩成一个字符串的方法。
运行以下PHP代码
    passwd = $passwd;
        }
        public function getPasswd()
        {
            echo $this->$passwd;
        }
    }
    $ama666 = new userInfo();
    $ama666->modifyPasswd('strong');
    $data = serialize($ama666);
    echo $data;
    ?>
得到的输出结果为
O:8:"userInfo":3:{s:16:"userInfopasswd";s:6:"strong";s:6:"*sex";s:4:"male";s:4:"name";s:6:"ama666";}
我们来逐一解读
  * 大括号外表示为“Object”对象名称长度为8是“userInfo”，这个对象有3个属性。
  * 大括号内表示的则是这些属性的具体信息以及它们的值。
根据属性的权限不同，在序列化中的表示方法也有所不同。可以看出在代码中三个属性的权限分别是`private`，`protected`和`public`。这里简单说一下：
>   * public权限就是正常的变量权限，一般声明的变量权限均为public
>   * protected权限是私有权限，即只能在类内使用，子类可以继承这个变量
>   * private权限也是私有权限，比protected权限更似有一些，只能在本类内使用，子类不能继承
>
可以看到代码中三个变量对应的三个权限在序列化字符串中都有不同的表达，红色是`private`，前面加上了本类名称；
蓝色是`protected`，前面加上了星号，绿色是`public`，没有任何前缀。
总结来说一个类经过序列化之后存储在字符串的信息只有类名称和类内属性键值对，序列化字符串中没有将类方法一并序列化。这就引申出了本次讨论的主题，反序列化漏洞。
#### 2.1.2 反序列化
反序列化与序列化相对应的，就是将含有类信息的序列化过的字符串“解压缩”还原成类。
如上图所示，将字符串反序列化出来之后的类不包含任何类方法，那么这样一个类怎么起作用呢？
反序列化的类想要使用原先的类方法必须依托于 **域** ，脱离了域的反序列的类是无法调用序列化之前的类方法的。比如我在上一段代码结尾加上如下代码
    getPasswd();
    ?>
看到成功执行了类方法。如果我同样将之前序列化字符串作为输入，在一个新的域下执行以上代码片段
    getPasswd();
    ?>
提示的是没有这个函数。总结来说反序列化漏洞可控的是要被反序列化的字符串，具体能够走多远还要依靠类方法。
### 2.2 PHP魔法函数
到目前为止我们可以控制类属性，但还称不上漏洞，只能说是反序列化的特性，还要配合上特定函数才能发挥反序列化漏洞的威力。所以要先了解一些特殊的函数，这些函数都是我们在利用反序列化漏洞时候的好帮手，因为这些魔术方法均可以在一些特定的情况下自动触发。如果这些魔术方法中存在我们想要执行，或者说可以利用的函数，那我们就能够进一步进行攻击。
#### 2.2.1 __wakeup()
在php中如果需要进行 **反序列化** ，会先检查类中是否存在`__wakeup()`函数，如果存在，则会先调用此类方法，预先准备对象需要的资源。举例来说
    color = 'white';
        }
        public function printColor()
        {
            echo $this->color . PHP_EOL;
        }
    }
    $ama666 = new example;
    $data = serialize($ama666);
    $new_ama666 = unserialize($data);
    $new_ama666->printColor();
    ?>
运行以上代码，结果如下，看到类属性`color`已经被`__wakeup()`函数自动调用并修改了。
这种函数被称为 **PHP魔法函数** ，会在一定条件下不需要调用而自动调用。
#### 2.2.2 __destruct()
此魔法函数会在对象的所有引用都被删除或者类被销毁的时候自动调用。
执行以上代码，看到在序列化类的时候，`__destruct()`函数自动执行了。
#### 2.2.3 __construct()
此函数会在创建一个类的实例时自动调用。
执行以上代码，看到类在序列化之前，实例化的时候`__construct()`函数就被调用了。
#### 2.2.4 __toString()
此魔法函数会在类被当作字符串的时候调用。在PHP5.2以前，`__toString`函数只有在echo、print时才生效；PHP5.2以后则可以在任何字符串环境生效（例如通过
printf，使用 _%s_ 修饰符），但不能用于非字符串环境（如使用 _%d_ 修饰符）。自 PHP 5.2.0 起，如果将一个未定义
__toString() 方法的对象转换为字符串，会产生 `E_RECOVERABLE_ERROR` 级别的错误。