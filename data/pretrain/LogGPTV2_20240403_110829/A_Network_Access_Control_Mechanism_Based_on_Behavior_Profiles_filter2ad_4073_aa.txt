title:A Network Access Control Mechanism Based on Behavior Profiles
author:Vanessa Fr&apos;ıas-Mart&apos;ınez and
Joseph Sherrick and
Salvatore J. Stolfo and
Angelos D. Keromytis
2009 Annual Computer Security Applications Conference
A Network Access Control Mechanism Based on
Behavior Proﬁles
Vanessa Frias-Martinez
∗
[1], Joseph Sherrick
†
, Salvatore J. Stolfo
†
, Angelos D. Keromytis
†
∗
†
Telefonica Research
Madrid,Spain
PI:EMAIL
Columbia University
New York, USA
js2778,sal,PI:EMAIL
Abstract—Current Network Access Control (NAC) technolo-
gies manage the access of new devices into a network to prevent
rogue devices from attacking network hosts or services. Typically,
new devices are checked against a set of manually deﬁned
policies (rules) before being granted access by the NAC enforcer.
The main difﬁculty with this approach lies in the generation
and update of new policies manually as time elapses and all
devices have to reestablish their access rights. The BB-NAC
mechanism was the ﬁrst to introduce a novel Behavior-Based
Network Access Control architecture based on behavior proﬁles
and not rules, where behavior-based access control policies were
automatically generated. As originally presented, BB-NAC relied
on manually pre-determined clusters of behavior which required
human intervention and prevented the fully automation of the
mechanism. In this paper, we present an enhanced BB-NAC
mechanism that fully automatizes the creation of clusters of
behavior. The access control is enhanced with the incorporation
of automatic behavior clustering, which improves the intrusion
detection capabilities by allowing for a more ﬁne-grained def-
inition of normal behavior. Apart from the lack of automatic
clustering, the original BB-NAC overlooked the evolution of the
mechanism as new behavior proﬁles were computed over time.
As part of our enhancements, we also present an incremental-
learning algorithm that automatically updates the behavior-based
access control policies. We show that the algorithm is resilient
to compromised or fabricated proﬁles trying to manipulate the
policies. We provide extensive experiments with real user proﬁles
computed with their network ﬂows processed from Cisco NetFlow
logs captured at our host institution. Our results show that
behavior-based access control policies enhance conventional NAC
technologies. Speciﬁcally, we achieve true rejection rates of 95%
for anomalous user proﬁles separated by one standard deviation
from the normal user network behavior. In addition, we also show
that the enhanced mechanism can differentiate between normal
changes in the behavior proﬁles (concept drift) and attacks.
I. INTRODUCTION
Network Access Control (NAC) technologies are responsi-
ble for regulating the access of devices to a network. Their
main aim is to prevent the intrusion of rogue devices that
could potentially attack other devices and services in the
network. In most NAC architectures, a NAC enforcer located
at the edge of the network evaluates devices trying to enter
the network (wired, wirelessly or VPN) before access is
granted. This preventive phase, called the pre-connect phase,
[1]Work performed while being a PhD student at Columbia University.
typically checks the status of the antivirus software (AV) of
the new device, determines whether software patches are up-
to-date, or it inspects the types of applications executed by
the device. Access is granted only if the device complies with
all the manually pre-determined policies (rules). Otherwise,
the device is quarantined or expelled. ConSentry’s agentless
LANShield, Nevis LANenforcer, and Cisco’s NAC Appliance
are examples of such technologies. Unfortunately, deﬁning
and updating new policies manually becomes very demanding
and highly inefﬁcient as time elapses and all devices have to
reestablish their access rights.
Previous work introduced a network access control archi-
tecture, BB-NAC, in which behavior proﬁles of network hosts,
modeled by an Anomaly Detection Sensor (AD), were used to
automatically compute behavior-based access control policies
[1]. These behavior proﬁles characterized the typical commu-
nications of network devices i.e., the trafﬁc payload observed
or speciﬁc volumetric measurements of the trafﬁc such as
average number of packets. In BB-NAC, the behavior proﬁles
of the network members were grouped into two manually pre-
determined clusters of behavior: clients and servers. A device
attempting to access the network (newcomer) was required to
present its behavior proﬁle and a self declaration of its nature
(client or server) to the NAC enforcer. To reach an access
control decision, the NAC enforcer then proceeded to conduct
a voting process among behavior proﬁles within the cluster of
behavior of the same nature (client or server). If a majority
agreed that the behavior proﬁle of the newcomer was normal,
the device was granted access into the network. Otherwise, the
device was deemed anomalous and rejected from entering the
network. Once a device had been accepted into the network,
its real-time behavior was continuously checked against the
behavior proﬁles within its respective cluster of behavior.
Devices that drifted in behavior were considered compromised
and placed in quarantine [2].
While the original BB-NAC mechanism offered a ﬁrst
approximation to the automatic creation of access control
policies, it suffered from two signiﬁcant drawbacks. First,
the clusters of behavior had to be manually speciﬁed, which
required human intervention in the mechanism. Second, BB-
NAC focused mainly on the initial creation of access con-
trol policies disregarding the evolution of the mechanism as
1063-9527/09 $26.00 © 2009 IEEE
DOI 10.1109/ACSAC.2009.10
3
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:14:28 UTC from IEEE Xplore.  Restrictions apply. 
new behavior proﬁles were computed over time. This paper
presents novel solutions to these problems. In our enhanced
mechanism, the NAC enforcer uses an automatic clustering
method to group similar behavior proﬁles into clusters of
behavior. These clusters of behavior deﬁne the behavior-
based access control policies. Automatic clustering enables
the identiﬁcation of common behaviors among hosts (and
their users) as well as the generation of behavior-based access
control policies without human intervention. Moreover, the
inclusion of clustering in the access control improves on the
intrusion detection capabilities of BB-NAC by allowing for a
more ﬁne-grained deﬁnition of normal behavior.
Additionally, we incorporate an automatic update of
behavior-based access control policies to account for network
members that may recompute their behavior proﬁles over time.
To accomplish this, it is imperative to understand the nature
of the changes in the behavior proﬁles prior to the update.
Therefore, we have designed and implemented an incremental-
learning algorithm that differentiates between new behavior
proﬁles that derive from existing clusters of behavior (concept
drift) and fabricated proﬁles attempting to maliciously modify
the access control policies (attacks). Finally, we evaluate
the enhancements to the original BB-NAC mechanism using
extensive real network ﬂows generated from Cisco NetFlow
logs with a large amount of users and a wide diversity of
behaviors.
In terms of deployment, the mechanism presented here is
to be installed and executed at the NAC enforcer to guarantee
appropriate access control. We further assume an agent-based
NAC architecture where each of the members of the network
has an AD sensor (similar to a COTS AV scanner) that
computes its local behavior proﬁle. Every time a new proﬁle is
computed by a host or device, it is communicated to the NAC
enforcer. A fully distributed version of our mechanism for
Mobile Ad-hoc Networks (MANETs) is presented in [3]. The
latter provides a light-weight adaptation that fully distributes
the access control decisions among the MANET devices using
a threshold cryptographic layer.
The main contributions of the enhanced behavior-based
network access control mechanism are the following:
• The application of a clustering method to identify com-
mon behaviors among network members as well as
to automatically generate behavior-based access control
policies without human intervention. Clustering enhances
the access control by providing robust intrusion detection
capabilities.
• The incorporation of an incremental-learning algorithm
that manages the automatic update of behavior-based
access control policies by differentiating between new
proﬁles that derive from existing clusters of behavior
(concept drift) and malicious proﬁles (attacks). This
makes the mechanism resilient to attackers attempting to
modify the behavior-based access control policies.
• Efﬁcient scalability to a large amount of users and a wide
diversity of behaviors.
The organization of the rest of the paper is as follows.
Section II presents the behavior-based mechanism in greater
detail and describes each of its phases: clustering, boot-
4
strap and access control. Section III details the incremental-
learning algorithm. Possible attack scenarios and responses are
discussed in Section IV. Section V presents our validation
experiments while section VI describes related work. Section
VII presents the conclusions and future work.
II. DESCRIPTION OF THE NETWORK ACCESS CONTROL
MECHANISM BASED ON BEHAVIOR PROFILES
The network access control mechanism consists of three
phases: clustering, bootstrap and access control. Initially, each
network member communicates its behavior proﬁle to the
NAC enforcer. We assume that all network members have
normal behavior proﬁles and that communications between
the members and the NAC enforcer are secured in such a
way that proﬁles cannot be manipulated during the exchange.
Throughout, we refer to proﬁles that have been modeled with
clean datasets that do not contain any type of attack as normal
behavior proﬁles. Once the NAC enforcer has received all
the initial proﬁles, it performs a clustering phase that builds
clusters of common behavior among its members. Clusters are
computed on a per-port basis e.g., port 22 for service SSH or
port 80 for service HTTP. As a result, the NAC enforcer keeps
independent clusters of behavior for each port whose security
needs to be enforced.
Next, the bootstrap phase is responsible for the determi-
nation of thresholds for each cluster member. Each threshold
measures the largest distance between a host and each of the
other cluster members. These thresholds are then used in the
access control phase as a measure of similarity between pro-
ﬁles. The bootstrap phase is performed whenever the behavior
proﬁle of a member changes.
Finally, every time a new device attempts to enter the
network, it presents its behavior proﬁle to the NAC enforcer
that performs the access control phase. During access control,
the NAC enforcer conducts a voting process in the cluster that
is closest to the newcomer’s presented proﬁle. Each proﬁle
emits an acceptance or rejection individual vote based on its
threshold (derived from the bootstrap phase). A majority vote
determines the ﬁnal decision. In the case where multiple ports
are being considered, this phase is performed separately for
each individual port. The device is accepted only when all
ports agree on a decision. Below we detail each phase of the
mechanism.
A. Phase I: Clustering
Devices on a network may span a range of different types
of behaviors. For port 80, for example, some webservers
may experience a large number of connections from different
IPs and a large number of ﬂows, while others observe a
smaller number of connections from different IPs and a smaller
number of ﬂows. The goal of clustering is to create clusters of
common behavior among the network members that will be
used to detect anomalous proﬁles during access control (Figure
1(a)). The clustering is performed at the NAC enforcer using
the behavior proﬁles communicated by the initial members
of the network. Although this phase may be computationally
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:14:28 UTC from IEEE Xplore.  Restrictions apply. 
c3
cluster3
c2
cluster2
p2
p3
p1
p7
t1 = d(p1,p6) 
p6
p4
p5
c1
cluster1
(a) Clustering: Creates clusters of behavior. Each dot represents
an individual behavior proﬁle.
(b) Bootstrap: Computes thresholds for each cluster member.
Shown is the threshold computation of an individual member
of a cluster.
p_new
c1
cluster1
v > 0.5, accept
v < 0.5, reject
c3
cluster3
c2
cluster2
Fig. 1. Schematics of the three Phases: Clustering, Bootstrap and Access Control.
(c) Access Control: A newcomer attempts to access the net-
work. Members of the closest cluster vote to decide on accep-
tance.
expensive, it is executed only once to setup the network access
control.
To create the clusters of behavior, we use a partitioning
clustering method, K-means++ [4]. The K-means [5] algo-
rithm is a non-deterministic method that iteratively distributes
the proﬁles into k clusters according to the euclidean distance
between them until a stable state is reached. Unlike its
plain version K-means, K-means++ initially executes a smart
selection of seeds in such a way that non-outlier samples are
favored. Although K-means++ increases the complexity of the
execution, we ﬁnd that the smart selection of seeds decreases
the number of times that the method needs to be executed due
to its non-deterministic nature.
A partitioning method was chosen over hierarchical tech-
niques such as Linkage based [6] to take advantage of the
a priori knowledge that the administrator may have about
the initial number of different behaviors (range of values
of k) in the network. While hierarchical techniques are less
computationally intense, these require knowledge of the cluster
width which is far more difﬁcult to guess using behavior
proﬁles.
We assume that each device’s behavior proﬁle is represented
by a vector pi = {pi[0], pi[1], ...pi[n]} where each pi[(cid:2)] is
the average measure of a feature (cid:2) = 0..n. These features
may stand for the typical payload exchanged by a user or
for the volumetric characteristics of connections established
by a user. For instance, the proﬁle pi = 485466.5, 12000000
would represent a very active user with a large number of
ﬂows (485466.5) and a large number of total IPs contacted
(12000000). The K-means++ method distributes these proﬁles
into k clusters according to distance. The distance between two
proﬁles pi and pj is calculated using the euclidean distance:
d(pi, pj) =
(cid:3)
(cid:2)
(
(pi[(cid:2)] − pj[(cid:2)])2)
(1)
(cid:2)=0..n
where pi and pj are proﬁles and n is the number of features
in the proﬁle. Because the scaling across features might be
different, it may be the case that the distance calculation
is dominated by certain individual features. In order to deal
with this problem, we normalize the proﬁles as in [7]. Each
feature is modiﬁed according to a group average μ and a group
standard deviation σ calculated as:
5
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:14:28 UTC from IEEE Xplore.  Restrictions apply. 
μ[(cid:2)] =
(cid:3)
(cid:3)
1
pi[(cid:2)]
m
(pi[(cid:2)] − μ[(cid:2)])2)
i=1..m
i=1..m
σ[(cid:2)] =
(cid:2)
(
1
m − 1
(2)
(3)
where m is the total number of proﬁles to be clustered.
Each feature (cid:2) in the proﬁle pi is then normalized as follows:
(cid:2)
p
i[(cid:2)] = pi[(cid:2)] − μ[(cid:2)]
σ[(cid:2)]
(4)
i corresponds to the normalized proﬁle.
(cid:2)
where p
In order to select a suitable value for k, K-means++ clus-
tering is repeated multiple times for each input k to account
for its non-deterministic nature. For each clustering result, we
perform a cross-validation test that ranks the quality of the
cluster distribution. The highest ranked cluster distribution is
chosen. Details about cross-validation and cluster selection are
covered in Section V. In an actual application of the system,
the clustering method is performed on a per-port basis i.e.,
clusters of behavior are identiﬁed for each port (service) being
secured.
B. Phase II: Bootstrap
Once the clusters of behavior have been computed, the NAC
enforcer calculates the threshold for each proﬁle. The threshold
measures the maximum distance between a proﬁle and each
of the other proﬁles in its cluster as illustrated by Figure
1(b). These thresholds are later used to determine whether
a newcomer’s proﬁle is deemed normal or anomalous during
the access control phase. For each proﬁle pi, the threshold t
is calculated as:
tpi = maxj=1..q(d(pi, pj))
(5)
where q is the number of proﬁles pj in the cluster where pi is
a member and d is the distance between the proﬁles computed
as in Equation 1.
C. Phase III: Access Control
After completing clustering and bootstrap, the mechanism
is ready to perform the access control of new devices. Upon
arrival to the network, a newcomer presents its proﬁle to the
NAC enforcer. The NAC enforcer ﬁrst normalizes the proﬁle
as deﬁned in Equation 4. It then proceeds to calculate which
cluster of behavior is closest to the newcomer’s proﬁle pnew
as follows:
closest cluster = mini=0..k(d(c[i], pnew))
(6)
where k is the number of clusters and c[i] is the centroid of
each cluster i. The centroid c[i] for cluster i is calculated as,
c[i] = (c0, c1, ..., cn)
cn =