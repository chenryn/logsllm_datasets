# 从开发到漏洞挖掘的角色转换
## 作者：王纬  
### 发布日期：2020-06-05

### 关于我
- **ID**: Proteas
- **微博**: @Proteas
- **推特**: @ProteasWang
- **背景**:
  - 3年Windows C++开发经验。
  - 5年iOS App开发经验。
  - 5年iOS & macOS漏洞挖掘经验。
- **现状**: 我目前处于技术理想主义与技术现实主义之间。

### 主要内容
1. 背景与约束
2. 漏洞挖掘与利用
3. 为什么要转漏洞挖掘
4. 如何转到漏洞挖掘
5. 结语

### 背景与约束
- 每个人都有自己的世界观和局限性，而这些经验是无法直接传承的。尽管每个人的道路各不相同，但我希望本文能够为你提供一些有用的指导。
- 本篇讨论将主要围绕二进制漏洞挖掘与利用展开，特别是针对macOS/iOS平台，并面向开发人员。

### 漏洞挖掘与利用
#### 挖掘
- **研究对象**：可以用于突破安全边界的编程错误。
  - 识别编程错误。
  - 探索触发编程错误的方法。
  - 寻找自动且高效地发现编程错误的方式。
- 大多数编程错误都与“信任”相关。从广义上讲，漏洞挖掘实际上是在研究信任与欺骗的关系。

#### 利用
- **核心目标**：控制与转化。
- 例如，在编写iOS内核利用时，实际上是通过初始错误类型逐步提升对内核数据的控制能力，最终实现内核空间任意地址读写的过程。
- 尽管挖掘与利用所需的知识有共同点，但两者存在显著差异：
  - 待处理的问题不同。
  - 解决问题时采用的思维模式也有所区别。
- 相对于挖掘，在没有现成解决方案的情况下，利用更富有创造性和艺术性。

#### 思维模式
- 开发者通常关注的是接口如何使用以及库的设计和算法等细节；而漏洞挖掘人员则更加关心攻击面（即攻击者可控制的数据）以及库内部可能存在的路径穿越、符号问题、溢出或内存操作等问题。
- 开发侧重于直接性（如接口），而漏洞挖掘则注重间接性（如数据对内部实现的影响）。

#### 对抗
- 开发者与厂商的利益是一致的，他们共同维护着一个生态系统；相比之下，漏洞挖掘本质上是对抗性的——如果没有漏洞挖掘人员，厂商可能会减少大量成本支出。
- 此外，在同行之间还存在着“撞洞”的竞争现象。

#### 不确定性
- 在软件工程中，开发者追求的是确定性；然而，漏洞挖掘与利用领域充满了不确定性，尤其是在当前阶段。
- 这种不确定性往往让人感到不安和不可靠。

#### 支撑技术
- 开发领域常常依赖外部资源（如Google、GitHub等），但在漏洞挖掘过程中遇到的问题大多需要自行解决。

#### 工程化程度
- 工程化的目的是确保结果的一致性。如果目标是攻破某个系统，则其工程化水平相对较低；若目标为获得CVE编号，则属于中等偏下。
- 由于产出的不确定性，持续不断地思考、总结、学习及对抗变得尤为重要。

#### 习惯失败
- 开发者面对的是“好与不好”的问题，而漏洞挖掘者面临的则是“能与不能”。后者在实际项目中几乎不可能每天都发现新的漏洞，且所发现的大多数漏洞都难以被利用。
- 需要在多次失败后仍保持研究的热情和动力。

### 为什么要转漏洞挖掘
- 出于兴趣和个人挑战。
- 结果更容易衡量（数量和质量）。
- 认识到除了父母之外，很少有人会真正为我们未来负责。

### 如何转到漏洞挖掘
#### 学习方法
- 对初学者而言，建议采取“功利式”而非“书单式”的学习方式。
- 知识应服务于解决问题的目的。

#### Review
- 核心在于专注于编程错误的研究，并结合实操训练。

#### 强化目的
- 明确目标是为了寻找编程错误。
- 提升代码阅读、静态分析、动态分析等相关技能以支持这一目标。
- 将针对编程错误的思考与实践变成一种习惯。

#### 确定目标
- 鉴于该领域的对抗性质，首先需明确具体目标。
- 不同的目标意味着不同的技术和策略选择。
- 基于个人背景和兴趣来选定适合自己的方向。