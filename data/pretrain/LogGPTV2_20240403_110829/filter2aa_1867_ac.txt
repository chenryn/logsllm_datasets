6. 根据实际的req包与 poc合并处理
 celController.InitSet(scanItem.Plugin.JsonPoc, requestController.New)  将poc的set变量赋值 赋值
request 到 cel控制器中传递变量后给后续表达式 使用
7.  util.RequestPut(requestController.New)  将fasthttp请求包写到 sync.pool 共享池里节省内存
8. 根据数据库中的插件的影响类型 例如是参数类型 目录 脚本等类型分别处理 这个类型是数据库里的表
 plugins  的字段  affects  
根据给出的db文件 类型只有  directory 即 AffectDirectory  和script的
9. 如果是参数类型
a. 通过  InitOriginalQueryParams  获取参数数据 如果get就获取params否则就获取body 
b. 初始化poc控制器 通过
 InitPocController(&requestController, scanItem.Plugin, &celController, handles)  
c. 获取所有url参数
 originalParamFields, err := url.ParseQuery(requestController.OriginalQueryParams)  
c. 遍历参数  requestController.FixQueryParams(field, payload, controller.Plugin.Affects)  将payload插
入到所有的参数中
d.  controller.Next()  对poc中的每个HandleFunc函数进行调用 
e. 如果被终止了说明存在漏洞 封装漏洞结果  util.VulnerableHttpResult  写任务结果  WriteTaskResult  
f. 重置这个控制器 写到 poc控制器池  ControllerPool  里 节省内存给下一次调用 
g. 如果没漏洞也要写到 poc控制器池  ControllerPool  里
10. 如果是  directory   server   url   text  级别的 
a. 初始化控制器  InitPocController(&requestController, scanItem.Plugin, &celController, handles)  
b. 调用  Next 方法 
c. 判断是否存在漏洞同上 
d. 如果是debug状态没漏洞的话 结果是
 util.DebugVulnerableHttpResult(controller.GetOriginalReq().URL.String(), "", controller.Request.Raw) 
封装的
11. 如果是  script  
a. 初始化poc控制器
 controller := InitPocController(&requestController, scanItem.Plugin, &celController, handles)  
b. 如果是终止的 脚本结果不是空 脚本的漏洞不是空 则保存结果  util.ScanResult  
c. 写漏洞结构 poc控制器重置入池 
d. 如果是debug模式 也是使用  util.DebugVulnerableHttpResult 封装下结果 
e. 如果没漏洞也要写到 poc控制器池  ControllerPool  里
12. 都不是的话 返回没有漏洞  util.InVulnerableResult 
// 执行单个poc 
func RunPoc(inter interface{}, debug bool) (result *util.ScanResult, err error) { 
scanItem := inter.(*ScanItem) 
err = scanItem.Verify() 
if err != nil { 
log.Error("[rule/poc.go:RunPoc scan item verify error] ", err) 
return nil, err 
} 
log.Info("[rule/poc.go:RunPoc current plugin]", scanItem.Plugin.JsonPoc.Name) 
var requestController RequestController 
var celController CelController 
err = requestController.Init(scanItem.OriginalReq) 
if err != nil { 
log.Error("[rule/poc.go:RunPoc request controller init error] ", err) 
return nil, err 
} 
handles := getHandles(scanItem.Plugin.Affects) 
err = celController.Init(scanItem.Plugin.JsonPoc) 
if err != nil { 
log.Error("[rule/poc.go:RunPoc cel controller init error] ", err) 
return nil, err 
} 
err = celController.InitSet(scanItem.Plugin.JsonPoc, requestController.New) 
if err != nil { 
util.RequestPut(requestController.New) 
log.Error("[rule/poc.go:RunPoc cel controller init set error] ", err) 
return nil, err 
} 
switch scanItem.Plugin.Affects { 
// 影响为参数类型 
case AffectAppendParameter, AffectReplaceParameter: 
{ 
err := requestController.InitOriginalQueryParams() 
if err != nil { 
log.Error("[rule/poc.go:RunPoc init original request params error] ", err) 
return nil, err 
} 
controller := InitPocController(&requestController, scanItem.Plugin, &celController, handles) 
controller.Debug = debug 
paramPayloadList := scanItem.Plugin.JsonPoc.Params 
originalParamFields, err := url.ParseQuery(requestController.OriginalQueryParams) 
if err != nil { 
log.Error("[rule/poc.go:RunPoc params query parse error] ", err) 
return nil, err 
} 
for field := range originalParamFields { 
for _, payload := range paramPayloadList { 
log.Info("[rule/poc.go:RunPoc param payload]", payload) 
err = requestController.FixQueryParams(field, payload, controller.Plugin.Affects) 
if err != nil { 
log.Error("[rule/poc.go:RunPoc fix request params error] ", err) 
continue 
} 
controller.Next() 
if controller.IsAborted() { 
// 存在漏洞 
result = util.VulnerableHttpResult(controller.GetOriginalReq().URL.String
WriteTaskResult(scanItem, result) 
PutController(controller) 
return result, nil 
} 
controller.Index = 0 
} 
} 
// 没漏洞 
result = &util.InVulnerableResult 
PutController(controller) 
return result, nil 
} 
case AffectDirectory, AffectServer, AffectURL, AffectContent: 
{ 
controller := InitPocController(&requestController, scanItem.Plugin, &celController, handles) 
controller.Debug = debug 
controller.Next() 
if controller.IsAborted() { 
// 存在漏洞 
result = util.VulnerableHttpResult(controller.GetOriginalReq().URL.String(), "", controlle
WriteTaskResult(scanItem, result) 
PutController(controller) 
return result, nil 
} else if debug{ 
// debug 没漏洞 
result = util.DebugVulnerableHttpResult(controller.GetOriginalReq().URL.String(), "", cont
PutController(controller) 
return result, nil 
}else { 
// 没漏洞
result = &util.InVulnerableResult 
PutController(controller) 
return result, nil 
} 
} 
case AffectScript: 
{ 
controller := InitPocController(&requestController, scanItem.Plugin, &celController, handles) 
controller.Debug = debug 
controller.Next() 
if controller.IsAborted() && controller.ScriptResult != nil && controller.ScriptResult.Vulnerable 
// 存在漏洞 保存结果 
result = &util.ScanResult{ 
Vulnerable: controller.ScriptResult.Vulnerable, 
Target:     controller.ScriptResult.Target, 
Output:     controller.ScriptResult.Output, 
ReqMsg:     controller.ScriptResult.ReqMsg, 
RespMsg:    controller.ScriptResult.RespMsg, 
} 
WriteTaskResult(scanItem, controller.ScriptResult) 
PutController(controller) 
return result, nil 
} else if debug { 
// debug 没漏洞 
result = util.DebugVulnerableHttpResult(controller.GetOriginalReq().URL.String(), "", cont
PutController(controller) 
return result, nil 
} else { 
// 没漏洞
PutController(controller) 
return &util.InVulnerableResult, nil 
} 
} 
} 
// 默认返回没有漏洞 
return &util.InVulnerableResult, nil 
} 
celController.Init cel控制器初始化
 poc\rule\cel.go#25 
1.  cel2.InitCelOptions()  加入 大量的xray的自定义函数 例如  randomInt   base64Decode 等 还有变量
2.  option.AddRuleSetOptions(poc.Set)  注入set的变量 set的是 poc里的定义的变量 类型默认都是字符串的
3.  cel2.InitCelEnv(&option)  创建env环境
4. 将cel的env赋值到 Env  并定义个参数map  ParamMap  到cel控制器中
// 
初始化 
func (cc *CelController) Init(poc *Poc) (err error) { 
// 
1.生成cel env环境
option := cel2.InitCelOptions() 
// 
注入set定义的变量 
if poc.Set != nil { 
option.AddRuleSetOptions(poc.Set) 
} 
env, err := cel2.InitCelEnv(&option) 
if err != nil { 
log.Error("[rule/cel.go:Init init cel env error]", err) 
return err 
} 
cc.Env = env 
// 初始化变量列表 
cc.ParamMap = make(map[string]interface{}) 
return nil 
} 
celController.InitSet cel控制器初始化
 poc\rule\cel.go#44 
1. 将request添加到 ParamMap 
2. 将set变量也添加到  ParamMap  如果是反连要创建个反连  reverse.NewReverse() 
3.  cel2.Evaluate(cc.Env, value, cc.ParamMap)  构建set的cel 执行
4. cel执行解析后将对于解析后的值替换回  ParamMap  为了给后续poc表达式使用变量
// 处理poc: set 
func (cc *CelController) InitSet(poc *Poc, newReq *proto.Request) (err error) { 
// 如果没有set 就直接返回 
if len(poc.Set) == 0 { 
return 
} 
cc.ParamMap["request"] = newReq 
for _, setItem := range poc.Set { 
key := setItem.Key.(string) 
value := setItem.Value.(string) 
// 反连平台 
if value == "newReverse()" { 
cc.ParamMap[key] = reverse.NewReverse() 
continue 
} 
out, err := cel2.Evaluate(cc.Env, value, cc.ParamMap) 
if err != nil { 
return err 
} 
switch value := out.Value().(type) { 
// set value 无论是什么类型都先转成string 
case *proto.UrlType: 
cc.ParamMap[key] = util.UrlTypeToString(value) 
case int64: 
cc.ParamMap[key] = int(value) 
default: 
cc.ParamMap[key] = fmt.Sprintf("%v", out) 
} 
} 
return 
} 
controller.Next()
 poc\rule\controller.go#221  
这里的  controller.Handles  是  handles := getHandles(scanItem.Plugin.Affects)  根据类型获取到的poc
Handler 即是 所有除go代码的poc 
计算一共需要测试多个Handles 遍历调用
func (controller *PocController) Next() { 
for controller.Index [^\"]+)\",\n" 
}, { 
"method": "GET", 
"path": "/solr/{{core}}/select?q=%3C%3Fxml%20version%3D%221.0%22%20encoding%3D%22UTF-8%
"follow_redirects": true, 
"expression": "reverse.wait(5)\n" 
}], 
"detail": { 
"author": "sharecast", 
"links": ["https://github.com/vulhub/vulhub/tree/master/solr/CVE-2017-12629-XXE"] 
} 
} 
func ExecExpressionHandle(ctx controllerContext){ 
var result bool 
var err error 
poc := ctx.GetPoc() 
if poc == nil { 
log.Error("[rule/handle.go:ExecExpressionHandle error] ", "poc is nil") 
return 
} 
if poc.Groups != nil { 
result, err = ctx.Groups(ctx.IsDebug()) 
} else { 
result, err = ctx.Rules(poc.Rules,ctx.IsDebug()) 
} 
if err != nil { 
log.Error("[rule/handle.go:ExecExpressionHandle error] ", err) 
return 
} 
if result { 
ctx.Abort() 
} 
return 
} 
controller.Groups 含有 Groups的poc执行
 poc\rule\controller.go#205 
1. 遍历 groups里的rules
2. poc控制器调用  controller.Rules(rules, debug)  返回规则结果 如果一个rules成功即 返回成功 这个成功是
表示rule的表达式也是对的 如果整个rules的表达式都是true就是对的 
下面我们详细看下  controller.Rules 
3.  group  只要有一个rules成功即返回成功否则返回false
// 执行 groups 
func (controller *PocController) Groups(debug bool) (bool, error) { 
groups := controller.Plugin.JsonPoc.Groups 
// groups 就是多个rules 任何一个rules成功 即返回成功 
for _, rules := range groups { 
rulesResult, err := controller.Rules(rules, debug) 
if err != nil || !rulesResult { 
continue 
} 
// groups中一个rules成功 即返回成功 
if rulesResult { 
return rulesResult, nil 
} 
} 
return false, nil 
} 
controller.Rules 含有 Rules的poc执行
 poc\rule\controller.go#186  
如果poc含有多个rule的情况 遍历调用  controller.SingleRule 
// 执行 rules 
func (controller *PocController) Rules(rules []Rule, debug bool) (bool, error) { 
success := false 
for _, rule := range rules { 
singleRuleResult, err := controller.SingleRule(&rule, debug) 
if err != nil { 
log.Error("[rule/controller.go:Rules run error]", err) 
return false, err 
} 
if !singleRuleResult { 
//如果false 直接跳出循环 返回 
success = false 
break 
} 
success = true 
} 
return success, nil 
} 
controller.SingleRule 单条rule怎么执行
 poc\rule\controller.go#148 
1. 调用rule的  Verify  限制rule中的path必须以  "/"  开头
2.  rule.ReplaceSet(controller.CEL.ParamMap)  替换set对应的值 将请求中  headers   path   body  中
 {{xxx}} 的xxx根据之前cel解析构建的变量替换
3. 根据原始请求 + rule 生成并发起新的请求 http  controller.DoSingleRuleRequest  返回resp
4. 给 controller.CEL.ParamMap["response"]  赋值为 返回的resp
5. 如果rule Search不是空的进行匹配  rule.Search  是正则字符串 匹配body 并返回结果map
6.  Evaluate  调用rule的表达式 返回表达式的结果是布尔值  cel2.Evaluate(cc.Env, char, cc.ParamMap)  
计算表达式的时候是将 最开始的 request  以及刚刚通过  controller.DoSingleRuleRequest  返回后
的 response  以及set set是之前执行表达式解析获取到 这个  ParamMap  都带入进去构建解析poc的验证表达
式了
7. 如果debug或者rule表达式返回是True 那么记录请求链  controller.Request.Add(resp) 
// 单个规则运行 
func (controller *PocController) SingleRule(rule *Rule, debug bool) (bool, error) { 
// 格式校验 
err := rule.Verify() 
if err != nil { 
return false, err 
} 
// 替换 set 
rule.ReplaceSet(controller.CEL.ParamMap) 
// 根据原始请求 + rule 生成并发起新的请求 http 
resp, err := controller.DoSingleRuleRequest(rule) 
if err != nil { 
return false, err 
} 
controller.CEL.ParamMap["response"] = resp 
// 匹配search规则 
if rule.Search != "" { 
controller.CEL.ParamMap = rule.ReplaceSearch(resp, controller.CEL.ParamMap) 
} 
// 如果当前rule验证失败，立即释放 
out, err := controller.CEL.Evaluate(rule.Expression) 
if err != nil { 
log.Error("[rule/controller.go:SingleRule cel evaluate error]", err) 
return false, err 
} 
if debug { 
controller.Request.Add(resp) 
} else { 
// 非debug模式下不记录 没有漏洞不记录请求链 
if !out { 
util.ResponsePut(resp) 
return false, nil 
} // 如果成功，记如请求链 
controller.Request.Add(resp) 
} 
return out, err 
} 
controller.DoSingleRuleRequest fasthttp发请求
 poc\rule\controller.go#85  
初始化一个空的req 然后根据 rule 的测试位置对应的进行替换进去发起请求返回cel的Response
1. 获取req的fast包
2.  AcquisiteRequest 从请求池返回一个空请求实例 并将请求内容拷贝到创建的空请求实例
3. 解析获取目录  curPath 
4. 获取这个插件的影响类型  Affects 
5. 判断影响级别是哪些再处理
a. 如果是 params级的  appendparam   replaceparam  将ruile的headers添加到 fastreq包中 通过
 util.DoFasthttpRequest  发包 
b. 如果是 content级的 通过  util.DoFasthttpRequest  发包 
c. 如果是dir级的 目录级漏洞检测 当前路径与  rule.Path  拼接出新的路径 
d. 如果是 server级的 赋值  curPath = rule.Path  
e. 如果是url级的 这里给注释掉了
6. 为了兼容xray 某些poc没有区分path和query 将url中的 空格和``+  替换为  %20  设置url不进行转义 并替