# 表1：不同窗口大小和网络节点的测量原始比特错误率（莱文斯坦距离度量）

| 延迟 (ms) | 42 | 73 | 84 | 112 | 236 |
| --- | --- | --- | --- | --- | --- |
| 跳数 | 14 | 14 | 23 | 19 | 17 |
| 1s | 0 | 0 | 0 | 0 | 0 |
| 500ms | 0 | 0 | 0 | 0 | 0 |
| 100ms | 0 | 0 | 0 | 0 | 0 |
| 20ms | 0.007 | 0.005 | 0.005 | 0.010 | 0.005 | 0.045 |
| 15ms | 0.007 | 0.007 | 0.005 | 0.011 | 0.006 | 0.047 |
| 10ms | 0.010 | 0.008 | 0.005 | 0.011 | 0.009 | 0.048 |
| 5ms | 0.044 | 0.067 | 0.039 | 0.044 | 0.049 | 0.228 |
| 2ms | 0.089 | 0.143 | 0.092 | 0.102 | 0.092 | 0.240 |

许多纠错码适用于可能同时发生替换和删除的信道，并使用莱文斯坦距离作为错误率度量 [29]。标记码 [15, 39] 和水印码 [14] 是此类纠错方案的一些示例。由于我们的主要应用是极低带宽，因此我们接受小于10%的测量原始比特错误率。在第6.3.5节中，我们将讨论使用一些简单帧方案时的信道性能。

对于固定的窗口大小，往返时间和信道性能没有明显的趋势。直观上，这种缺乏趋势是可以预期的。信道编码依赖于数据包到达时间间隔来编码信息。因此，影响信道性能的是网络抖动而不是端到端延迟。

即使接收方距离定时信道源很远，也能实现可接受的性能。例如，新加坡节点的RTT为236毫秒。对于20毫秒的窗口大小，原始信道错误率为4.5%，这对于JitterBug的许多低带宽应用来说是完全可用的。键盘JitterBug每次按键的最大延迟等于窗口大小w。因此，选择此参数取决于用户无法察觉的情况下，该值可以设置多大。尽管我们可以为所有测试节点获得完美的信道，但1秒的窗口大小实际上是不可用的，因为用户会检测到键盘JitterBug的存在。通常认为，用户感觉系统即时响应的时间限制约为0.1秒 [32]。因此，在实践中，窗口大小必须小于这个值。根据我们的经验，20毫秒是一个完全可以接受的窗口大小，每次按键增加的延迟对用户来说几乎是察觉不到的。

窗口大小还会影响帮助吸收部分网络抖动的保护带的大小。抖动有两个组成部分：变化频率和变化幅度。对于窗口大小w，实现可以处理每对数据包最大为w/4的抖动。

从表1可以看出，正如预期的那样，较小的窗口大小会导致更高的错误率。然而，在我们测试的范围内，错误率的增加并不非常显著。即使使用低至2毫秒的窗口大小，信道仍然可用。对于20毫秒或更大的窗口大小，在所有测试节点上，信道性能始终很高。我们的观察结果得到了先前关于互联网往返延迟的研究的支持。研究表明，平均而言，互联网上的往返延迟在相当长的时间内倾向于聚集在10毫秒的抖动窗口内 [4]。因此，这种窗口大小的选择可能在广泛的网络条件下有效。当确切条件已知时，可以通过选择更小的窗口大小进一步优化键盘JitterBug。

## 6.3.2 网络应用

我们测量了到加州大学圣地亚哥分校PlanetLab节点的隐蔽定时信道在四种不同窗口大小下的原始BER。该节点距离19跳，平均往返时间为84.3毫秒。表2显示了SSH和Telnet的测量原始BER。信道性能不受交互式网络终端应用程序选择的影响。当然，Telnet的优势在于其缺乏加密，这使得容易检测由同一网络数据包发送多个字符引起的删除错误。

## 表2：SSH和Telnet的测量原始比特错误率（莱文斯坦距离度量）

| 窗口大小 (ms) | 20 | 15 | 10 | 5 |
| --- | --- | --- | --- | --- |
| SSH | 0.010 | 0.011 | 0.011 | 0.044 |
| Telnet | 0 | 0.006 | 0.010 | 0.010 |

## 6.3.3 操作系统

为了确认信道性能不受通过键盘JitterBug工作的操作系统的显著影响，我们在几种流行的操作系统上进行了实验，以测量其实现性能。我们再次在加州圣地亚哥的PlanetLab节点上进行了四个不同窗口大小的实验。表3总结了不同操作系统下隐蔽定时信道的测量原始BER。所测试的所有操作系统的原始BER都非常相似，没有大的波动。结果的小差异源于两个因素：网络条件的变化和不同操作系统对键盘处理的实现。这两个因素都会影响定时信道到达接收方时存在的噪声量。

## 表3：不同窗口大小和操作系统的测量原始比特错误率（莱文斯坦距离度量）

| 操作系统 | Linux 2.4.20 | Linux 2.6.10 | Windows XP(SP2) | FreeBSD 5.4 | OpenBSD 3.8 |
| --- | --- | --- | --- | --- | --- |
| 20ms | 0.010 | 0.010 | 0.001 | 0.017 | 0.022 |
| 15ms | 0.011 | 0.010 | 0.001 | 0.033 | 0.043 |
| 10ms | 0.011 | 0.010 | 0.001 | 0.044 | 0.05 |
| 5ms | 0.044 | 0.013 | 0.007 | 0.058 | 0.075 |

## 6.3.4 系统负载

通用操作系统中的键盘和网络事件通常具有较高的处理优先级。此外，它们的实现通常是中断驱动的，以提高响应性和性能。因此，我们不期望正常的系统负载变化对定时信道的性能产生重大影响。为了确认这一点，我们使用stress工具 [1] 在源机器上生成高系统负载，然后测量接收方的定时信道性能。与之前一样，定时信道的接收方位于加州圣地亚哥的PlanetLab节点。

## 表4：不同窗口大小和系统负载的测量原始比特错误率（莱文斯坦距离度量）

| 窗口大小 (ms) | 20 | 15 | 10 | 5 |
| --- | --- | --- | --- | --- |
| 空闲 | 0.010 | 0.011 | 0.011 | 0.044 |
| 高负载 | 0.010 | 0.016 | 0.016 | 0.05 |

## 6.3.5 帧结构

键盘JitterBug的许多应用需要在定时信道上传输数据时使用帧结构。我们测试了两种非常简单的帧结构方案：一种基于位填充，另一种使用低级特殊帧分隔符。我们的目标是评估使用汉明距离度量的信道性能，而不是描述定时信道的最佳帧结构方案。实验使用的定时窗口为20毫秒，帧大小为16位。位填充帧同步序列（FSS）长度为8位。结果总结在表5和表6中。如第6.3节所述，每次运行计算三个参数：净BER、平均正确帧BER和帧丢弃率。接收方丢弃任何大小不正确或帧分隔符损坏的帧。

从结果可以看出，大多数网络错误是由于丢弃帧造成的。其中许多是由于网络缓冲导致的帧内位删除引起的同步错误。有许多方法可以优化帧结构方案以减少帧错误的频率。使用较小的帧大小可以减少帧丢弃的影响。

## 表5：带有帧结构（位填充）的测量比特错误率（ET = 净BER, ECF : 平均正确帧BER, EDF : 帧丢弃率）

| 节点 | ColumbiaU (NYC, NY) | UKansas (Lawrence, KS) | UUtah (Salt Lake City, UT) | UCSD (San Diego, CA) | ETHZ (ETH, Zurich) | NUS (Singapore) |
| --- | --- | --- | --- | --- | --- | --- |
| ET | 0.142 | 0.142 | 0.152 | 0.152 | 0.093 | 0.093 |
| ECF | 0.184 | 0.184 | 0.112 | 0.112 | 0.384 | 0.375 |
| EDF | 0 | 0 | 0 | 0 | 0 | 0.014 |

## 表6：带有帧结构（三进制编码）的测量比特错误率（ET = 净BER, ECF : 平均正确帧BER, EDF : 帧丢弃率）

| 节点 | ColumbiaU (NYC, NY) | UKansas (Lawrence, KS) | UUtah (Salt Lake City, UT) | UCSD (San Diego, CA) | ETHZ (ETH, Zurich) | NUS (Singapore) |
| --- | --- | --- | --- | --- | --- | --- |
| ET | 0.121 | 0.12 | 0.104 | 0.104 | 0.136 | 0.137 |
| ECF | 0.2 | 0.202 | 0.088 | 0.088 | 0.386 | 0.39 |
| EDF | 0.002 | 0.002 | 0.005 | 0 | 0 | 0 |

## 表7：高比特率编码（4位/符号 + 帧分隔符）的测量比特错误率（ET = 净BER, ECF : 平均正确帧BER, EDF : 帧丢弃率）

| 节点 | ColumbiaU (NYC, NY) | UKansas (Lawrence, KS) | UUtah (Salt Lake City, UT) | UCSD (San Diego, CA) | ETHZ (ETH, Zurich) | NUS (Singapore) |
| --- | --- | --- | --- | --- | --- | --- |
| ET | 0.140 | 0.150 | 0.148 | 0.174 | 0.16 | 0.170 |
| ECF | 0.156 | 0.173 | 0.153 | 0.147 | 0.299 | 0.34 |
| EDF | 0.011 | 0.030 | 0.012 | 0.021 | 0.007 | 0.057 |

### 结论
通过上述实验和分析，我们发现即使在网络条件较差的情况下，通过适当选择窗口大小和帧结构，JitterBug仍能提供可靠的低带宽通信。未来的工作将集中在进一步优化帧结构和提高信道性能。