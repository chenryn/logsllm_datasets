42 ms
73 ms
84 ms
112 ms
236ms
Hops
14
14
23
19
17
18
1s
0
0
0
0
0
0
500ms
100ms
0
0
0
0
0
0
0
0
0
0
0
0
20ms
.007
.005
.005
.010
.005
.045
15ms
.007
.007
.005
.011
.006
.047
10ms
.010
.008
.005
.011
.009
.048
5ms
.044
.067
.039
.044
.049
.228
2ms
.089
.143
.092
.102
.092
.240
Table 1: Measured Raw Bit Error Rate for different window sizes and network nodes (Levenshtein Distance
Metric)
Many error correction codes exist for channels where
both substitutions and deletions are possible and that use
the Levenshtein distance metric as the error rate met-
ric [29]. Marker Codes [15, 39] and Watermark Codes
[14] are some examples of such error correction schemes.
As our primary application for the channel is very low-
bandwidth, we consider a measured raw bit error rate of
less than 10% to be acceptable. We discuss channel per-
formance using the Hamming distance metric in Section
6.3.5 when we discuss experiments with the use of some
simple framing schemes.
For a ﬁxed window size, the round-trip times and the
channel performance do not exhibit any clear trend. Intu-
itively, this lack of a trend is to be expected. The channel
encoding relies on the packet inter-arrival times for en-
coding the information. Thus, it is the network jitter and
not the end-to-end latency that affects performance of the
channel.
Acceptable performance is achievable even if the re-
ceiver is at a large distance from the source of the timing
channel. The node in Singapore, with a RTT of 236 ms,
is a case in point. For a window size of 20 ms, the raw
channel error rate is around 4.5%, which is quite usable
for many low-bandwidth applications of the JitterBug.
The maximum lag introduced by the Keyboard Jitter-
Bug for each keypress is equal to the window size w.
Consequently, the choice of this parameter is dependent
upon how large the value can be made while still keep-
ing the Keyboard JitterBug undetectable by the user. Al-
though we can get a perfect channel for all the nodes
tested with a window size of 1 second, this value is effec-
tively unusable because the user will detect the presence
of the Keyboard JitterBug. It is widely believed that 0.1
seconds is about the limit for the response time for a user
to feel that the system is reacting instantaneously [32].
Therefore in practice, the window size will have to be
smaller than that. Our own experience with the Keyboard
JitterBug shows that 20 ms is a perfectly acceptable win-
dow size and this amount of added lag for each keystroke
is effectively unnoticeable by the user.
The window size also affects the size of the guard
bands that help absorb some network jitter. The jitter
Load
SSH
Telnet
20ms
.010
0
15ms
.011
.006
10ms
.011
.01
5ms
.044
.01
Table 2: Measured Raw Bit Error Rate for SSH and
Telnet (Levenshtein Distance Metric)
has two components: the frequency of change and the
magnitude of change. For a window size of w the im-
plementation can handle a maximum jitter of w/4 per
packet pair.
From Table 1, it is clear that, as expected, smaller win-
dow sizes lead to higher error rates. The increase in the
error rate, however, is not very drastic over the ranges we
tested. The channel remain usable even if window sizes
as low as 2 ms are used. For a window size of 20 ms or
more, channel performance is consistently high on all the
nodes tested. Our observations are supported by previous
studies of round-trip delays on the Internet. It has been
shown that on average, round-trip delays on the Internet
tend to cluster around within a jitter window of 10 ms
for signiﬁcant periods of time [4]. Thus, this choice of
window size is likely to work under a wide gamut of net-
work conditions. When the exact conditions are known,
it is possible to optimize the Keyboard JitterBug further
by choosing smaller window sizes.
6.3.2 Network application
We measured the raw BER for four different windows
sizes for a covert timing channel to a PlanetLab node
in University of California, San Diego. The node is 19
hops away with an average Round-Trip Time (RTT) of
84.3 ms. Table 2 shows the measured raw BER for SSH
and Telnet. The channel performance is not affected by
the choice of the interactive network terminal applica-
tion. The advantage of Telnet, of course, is its lack of
encryption, which makes it easy to detect deletion errors
caused by multiple characters being sent in the same net-
work packet.
70
Security ’06: 15th USENIX Security Symposium
USENIX Association
OS
Linux 2.4.20
Linux 2.6.10
Windows XP(SP2)
FreeBSD 5.4
OpenBSD 3.8
20ms
.010
.010
.001
.017
.022
15ms
.011
.010
.001
.033
.043
10ms
.011
.010
.001
.044
.05
5ms
.044
.013
.007
.058
.075
Table 3: Measured Raw Bit Error Rate for differ-
ent window sizes and operating systems (Levenshtein
Distance Metric)
Load
Idle
Heavy Load
20ms
.010
.010
15ms
.011
.016
10ms
.011
.016
5ms
.044
.05
Table 4: Measured Raw Bit Error Rate for differ-
ent windows sizes and system loads (Levenshtein Dis-
tance Metric)
6.3.3 Operating System
To conﬁrm that the performance of the channel is not
signiﬁcantly affected by the operating system through
which the Keyboard JitterBug is working, we performed
experiments to measure the performance of the imple-
mentation on several popular operating systems.3 We
again performed the experiments on the PlanetLab node
at San Diego, California for four different window sizes.
Table 3 summarizes the measured raw BER of the covert
timing channel for different operating systems. The raw
BER remains quite similar for all the operating systems
tested without any major ﬂuctuations. The small differ-
ence in the results arises from two factors: variations
in network conditions and different OS implementations
of keyboard processing. Both these factors affect the
amount of noise present in the timing channel when it
reaches the receiver.
6.3.4 System Load
Keyboard and network events in general-purpose oper-
ating systems are typically given high processing prior-
ity. Moreover, their implementation is usually interrupt-
driven for better responsiveness and performance. So,
we do not expect the normal variation in system loads to
have any major inﬂuence on the performance of the tim-
ing channel. To conﬁrm this, we used the stress [1] tool
to generate high system loads4 at the source machine and
then measured the performance of the timing channel at
the receiver. As before, the receiver of the timing chan-
nel is located at the PlanetLab Node in San Diego, CA.
3We did not perform experiments with Mac OS X because of the
absence of a PS/2 keyboard port on the Mac hardware.
4The command-line used was: stress –cpu 8 –io 4 –vm 2 –vm-bytes
256M
Node
ColumbiaU (NYC, NY)
UKansas (Lawrence, KS)
UUtah (Salt Lake City, UT)
UCSD (San Diego, CA)
ETHZ (ETH, Zurich)
NUS (Singapore)
ET ECF EDF
.142
.142
.152
.152
.093
.093
.184
.184
.112
.112
.384
.375
0
0
0
0
0
.014
Table 5: Measured Bit Error Rate(s) with Framing
(Bit-Stufﬁng) (ET = Net BER, ECF : Average Correct
Frame BER, EDF : Frame Discard Rate)
Node
ColumbiaU (NYC, NY)
UKansas (Lawrence, KS)
UUtah (Salt Lake City, UT)
UCSD (San Diego, CA)
ETHZ (ETH, Zurich)
NUS (Singapore)
.002
ET ECF EDF
.121
.12
.104
.104
.136
.137
.2
.202
.088
.088
.386
.39
.001
.001
.005
0
0
Table 6: Measured Bit Error Rate(s) with Framing
(Ternary Encoding) (ET = Net BER, ECF : Average
Correct Frame BER, EDF : Frame Discard Rate)
The source of the timing channel is a Pentium 4 2.4 GHz
Desktop System with 1GB of system memory running
Linux 2.4.20.
Table 4 shows the measured raw BER for normal sys-
tem load vs. heavy system load. The results show that
the behavior of the channel remains quite similar with-
out any drastic drops in the channel performance.
6.3.5 Framing
Many applications of the Keyboard JitterBug would re-
quire the use of framing for transmission of data on the
timing channel. We tested the JitterBug with two very
simple framing schemes: one based on bit stufﬁng and
the other using a low-level special frame delimiter sym-
bol. Our goal is to evaluate the performance of the chan-
nel using the Hamming distance metric rather than de-
scribe an optimal framing scheme for the timing channel.
The timing window used for the experiments is 20 ms
and the frame size is 16 bits. The bit-stufﬁng frame sync
sequence (FSS) used is 8 bits in length. The results are
summarized in Table 5 and Table 6. As described in Sec-
tion 6.3, three parameters are calculated for each run: the
Net BER, Average Correct Frame BER and the Frame
Discard Rate. The receiver discards any frame that is not
the correct size or has a corrupted frame delimiter.
It is clear from the results that the bulk of the net-
work errors are the result of discarded frames. Many
of these are synchronization errors caused by deletion of
bits from a frame due to network buffering. There are
USENIX Association
Security ’06: 15th USENIX Security Symposium
71
Node
ColumbiaU (NYC, NY)
UKansas (Lawrence, KS)
UUtah (Salt Lake City, UT)
UCSD (San Diego, CA)
ETHZ (ETH, Zurich)
NUS (Singapore)
ET ECF EDF
.140
.150
.148
.174
.16
.170
.156
.173
.153
.147
.299
.34
.011
.030
.012
.021
.007
.057
Table 7: Measured Bit Error Rate(s) with high bit-
rate encoding (4bits/symbol + frame delimiter) (ET
= Net BER, ECF : Average Correct Frame BER, EDF :
Frame Discard Rate)
many possible ways the framing scheme could be opti-
mized to reduce the frequency of framing errors. Us-
ing smaller frame sizes can reduce the affect of dis-