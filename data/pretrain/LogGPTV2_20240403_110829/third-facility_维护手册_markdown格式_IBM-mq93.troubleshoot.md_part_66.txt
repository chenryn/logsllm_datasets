You can also enable and disable tracing dynamically. When the application is running, if the
mqclient.ini file is modified, created, or deleted, the IBM MQ .NET client reads the properties of
the trace section again and then enables or disables the trace, so that restart of the application is not
needed.
422 Troubleshooting and Support for IBM MQ
Note: There are several different ways to enable trace.
For the IBM MQ .NETclient libraries built against .NET Framework, the order of precedence is as follows:
1.App.Config
2.Environment variable
3.mqclient.ini
For the IBM MQ .NET client libraries built against .NET Standard and .NET 6, the order of precedence is as
follows:
1.Environment variable
2.mqclient.ini
Procedure
• To start trace, specify the following attributes of the Trace stanza:
a)Set MQDotnetTraceLevel to the value corresponding to the level of tracing you want.
If you want to start tracing with full details (recommended), set this attribute to 2. If you want a
less detailed trace, set the attribute to 1.
b)Set MQDotnetTracePath to the file path of the folder where you want the trace files to be created.
The current directory of the application is used if the path is left blank or if the
MQDotnetTracePath attribute is not defined.
c)Set MQDotnetErrorPath to the file path of the folder where you want the error log files to be
created.
The current directory of the application is used if the path is left blank or if the
MQDonetErrorPath attribute is not defined.
• To stop trace, set MQDotnetTraceLevel to 0.
This is the default value for this attribute.
Related concepts
Trace stanza of the client configuration file
Related tasks
“Tracing IBM MQ classes for .NET Framework applications using commands” on page 425
For a full client installation of IBM MQ you can use the strmqtrc command to enable trace for IBM MQ
classes for .NET Framework.
Tracing IBM MQ classes for .NET Framework clients using an application
configuration file
If you are using IBM MQ classes for .NET Framework, you can generate trace for the IBM MQ .NET
redistributable managed client and stand-alone IBM MQ .NET client by using an application configuration
file.
About this task
These steps for generating trace apply to the IBM MQ .NET redistributable managed client as well as the
stand-alone IBM MQ .NET client and are for IBM MQ classes for .NET Framework only.
You must use the application configuration file and an IBM MQ specific trace configuration file because,
since there is no full IBM MQ client installation, the standard tools that are used for starting and stopping
trace, strmqtrc and endmqtrc, are not available.
The application configuration file is not supported in IBM MQ classes for .NET (.NET Standard and .NET 6
libraries). To enable trace for IBM MQ classes for .NET (.NET Standard and .NET 6 libraries), you use the
MQDOTNET_TRACE_ON environment variable. A value of -1 enables default level tracing. Any other integer
IBM MQ troubleshooting and support 423
value, greater than 0, enables detailed tracing. Setting this environment variable to any other value does
not enable trace.
Procedure
• To start and stop trace, use the application configuration file and an IBM MQ specific trace
configuration file.
Application configuration file (app.config or web.config)
Applications need to define the MQTRACECONFIGFILEPATH property under the 
section of the application configuration file, that is, the app.config or web.config file. (The
actual name of the application configuration file depends on the name of your application.) The
value of the MQTRACECONFIGFILEPATH property specifies the path for the location of the IBM MQ
specific trace configuration file, mqtrace.config, as shown in the following example:
Tracing is disabled if the mqtrace.config file is not found in the path that is specified application
configuration file. However, First Failure Support Technology (FFST) and error logs are created in
the application's directory, if the application has authority to write to the current directory.
IBM MQ specific trace configuration file (mqtrace.config)
The mqtrace.config file is an XML file that defines properties for starting and stopping trace,
the path to the trace files, and the path to the error logs. The following table describes these
properties.
Table 30. Properties defined in the mqtrace.config file
Attribute Description
MQTRACELEVEL 0: Stops tracing - this is the default value.
1: Starts tracing with lesser details.
2: Starts tracing with full details -
recommended.
MQTRACEPATH Points to a folder where the trace files will be
created. The current directory of the application
is used if the path is blank or the MQTRACEPATH
attribute is not defined.
MQERRORPATH Points to a folder where error log files will be
created. The current directory of the application
is used if the path is blank or the MQERRORPATH
attribute is not defined.
The following example shows a sample mqtrace.config file:
2
C:\MQTRACEPATH
C:\MQERRORLOGPATH
Tracing can be started and stopped dynamically when an application is running by altering the
value of the MQTRACELEVEL attribute in the mqtrace.config file.
The running application must have create and write permissions for the folder specified by the
MQTRACELEVEL attribute for generating trace files. Applications that are running in an Microsoft
424 Troubleshooting and Support for IBM MQ
Azure PaaS environment must also ensure similar access permissions since web applications that
use an IBM MQ .NET assembly running in Microsoft Azure PaaS might not have create and write
permissions. The generation of the trace, first failure data capture (FDC), and error logs fails if the
application does not have the required create and write permissions for the specified folder.
Related concepts
IBM MQ components and features
Redistributable clients
.NET application runtime - Windows only
Related tasks
Installing IBM MQ classes for .NET
Using the WMQDotnetXAMonitor application
Tracing IBM MQ classes for .NET Framework applications using commands
For a full client installation of IBM MQ you can use the strmqtrc command to enable trace for IBM MQ
classes for .NET Framework.
About this task
You normally need to use the trace facility only at the request of IBM Support.
Procedure
1.To start tracing, use the strmqtrc command.
For more information, see strmqtrc (start trace).
Note: The -i and -p parameters of the strmqtrc command, which allow you to specify process and
thread identifiers, and named processes, have no effect IBM MQ .NET.
2.To end tracing, use the endmqtrc command.
For more information, see endmqtrc (end trace).
Related tasks
“Tracing IBM MQ .NET applications with mqclient.ini” on page 422
From IBM MQ 9.3.3, you can use the mqclient.ini file to enable traces for the IBM MQ .NET client
libraries.
Tracing JMS/Jakarta Messaging and Java applications
The trace facilities for JMS/Jakarta Messaging and Java applications are provided to help IBM Support
diagnose your problems and issues. You can trace various different resources.
Related tasks
“Collecting troubleshooting information for IBM Support” on page 302
When you open a case with IBM, you can include additional IBM MQ troubleshooting information
(MustGather data) that you have collected to help with investigating the problem. In addition to the
IBM MQ troubleshooting and support 425
information described in this section, IBM Support might request further information on a case by case
basis.
Tracing IBM MQ classes for JMS applications
The trace facility in IBM MQ classes for JMS is provided to help IBM Support to diagnose customer issues.
Various properties control the behavior of this facility.
About this task
Note: For Continuous Delivery, the trace control utility is removed from the product at IBM
MQ 9.3.3. IBM MQ 9.3.2 is the last Continuous Delivery release that it is delivered with. If dynamic trace is
needed to diagnose an issue, IBM Support can guide you through the steps to gather trace as required.
If you are asked to provide trace output to investigate an issue, use one of the options mentioned below:
• If the issue is easy to recreate, then collect an IBM MQ classes for JMS trace by using a Java System
Property. For more information, see “Collecting an IBM MQ classes for JMS trace by using a Java system
property” on page 427.
• If an application needs to run for a period of time before the issue occurs, collect an IBM MQ classes for
JMS trace by using the IBM MQ classes for JMS configuration file. For more information, see “Collecting
an IBM MQ classes for JMS trace by using the IBM MQ classes for JMS configuration file” on page 428.
• To generate a trace from an application that is currently running, collect the IBM MQ
classes for JMS trace dynamically by using the traceControl utility. For more information, see “Collecting
an IBM MQ classes for JMS trace dynamically by using the traceControl utility ” on page 429.
If you are unsure which option to use, contact your IBM Support representative and they will be able to
advise you on the best way to collect trace for the issue that you are seeing.
If a severe or unrecoverable error occurs, First Failure Support Technology (FFST) information is recorded
in a file with a name of the format JMSCC xxxx.FDC where xxxx is a four-digit number. This number is
incremented to differentiate .FDC files.
.FDC files are always written to a subdirectory called FFDC. The subdirectory is in one of two locations,
depending on whether trace is active:
Trace is active, and traceOutputName is set
The FFDC directory is created as a subdirectory of the directory to which the trace file is being written.
Trace is not active or traceOutputName is not set
The FFDC directory is created as a subdirectory of the current working directory.
For more information about FFST in IBM MQ classes for JMS, see “FFST: IBM MQ classes for JMS” on
page 369.
The JSE common services uses java.util.logging as its trace and logging infrastructure. The root
object of this infrastructure is the LogManager. The log manager has a reset method that closes
all handlers and sets the log level to null, which in effect turns off all the trace. If your application
or application server calls java.util.logging.LogManager.getLogManager().reset(), it closes
all trace, which might prevent you from diagnosing any problems. To avoid closing all trace, create a
LogManager class with an overridden reset() method that does nothing, as in shown the following
example:
package com.ibm.javaut.tests;
import java.util.logging.LogManager;
public class JmsLogManager extends LogManager {
// final shutdown hook to ensure that the trace is finally shutdown
// and that the lock file is cleaned-up
public class ShutdownHook extends Thread{
public void run(){
doReset();
}
}
public JmsLogManager(){
426 Troubleshooting and Support for IBM MQ
// add shutdown hook to ensure final cleanup
Runtime.getRuntime().addShutdownHook(new ShutdownHook());
}
public void reset() throws SecurityException {
// does nothing
}
public void doReset(){
super.reset();
}
}
The shutdown hook is necessary to ensure that trace is properly shut down when the JVM finishes. To use
the modified log manager instead of the default one, add a system property to the JVM startup:
java -Djava.util.logging.manager=com. mycompany.logging.LogManager ...
Related concepts
“FFST: IBM MQ classes for JMS” on page 369
Describes the name, location, and contents of the First Failure Support Technology ( FFST ) files that are
generated by the IBM MQ classes for JMS.
Related tasks
“Collecting troubleshooting information for IBM Support” on page 302
When you open a case with IBM, you can include additional IBM MQ troubleshooting information
(MustGather data) that you have collected to help with investigating the problem. In addition to the
information described in this section, IBM Support might request further information on a case by case
basis.
Collecting an IBM MQ classes for JMS trace by using a Java system property
For issues that can be reproduced in a short amount of time, IBM MQ classes for JMS trace should be
collected by setting a Java system property when starting the application.
About this task
To collect a trace by using a Java system property, complete the following steps.
Procedure
• Run the application that is going to be traced by using the following command:
java -Dcom.ibm.msg.client.commonservices.trace.status=ON application_name
When the application starts, the IBM MQ classes for JMS start writing trace information to a trace file
in the application’s current working directory. The name of the trace file depends on the environment
that the application is running in:
– For IBM MQ classes for JMS for IBM MQ 9.0.0 Fix Pack 1 or earlier, trace is written to a file called
mqjms_%PID%.trc.
– From IBM MQ 9.0.0 Fix Pack 2, if the application has loaded the IBM MQ classes for JMS from the
JAR file com.ibm.mqjms.jar, trace is written to a file called mqjava_%PID%.trc.
– From IBM MQ 9.0.0 Fix Pack 2, if the application has loaded the IBM MQ classes for JMS
from the relocatable JAR file com.ibm.mq.allclient.jar, trace is written to a file called
mqjavaclient_%PID%.trc.
– From IBM MQ 9.1.5 and IBM MQ 9.1.0 Fix Pack 5, if the application has loaded the IBM
MQ classes for JMS from the JAR file com.ibm.mqjms.jar, trace is written to a file called
mqjava_%PID%.cl%u.trc.
– From IBM MQ 9.1.5 and IBM MQ 9.1.0 Fix Pack 5, if the application has loaded the IBM MQ classes
for JMS from the relocatable JAR file com.ibm.mq.allclient.jar, trace is written to a file called
mqjavaclient_%PID%.cl%u.trc.
IBM MQ troubleshooting and support 427
– From IBM MQ 9.3.0, if the application
has loaded the IBM MQ classes for Jakarta Messaging from the relocatable JAR file
com.ibm.jakarta.client.jar (Jakarta Messaging 3.0), or loaded the IBM MQ classes for JMS
from the relocatable JAR file com.ibm.mq.allclient.jar (JMS 2.0), trace is written to a file
called mqjavaclient_%PID%.cl%u.trc.
where %PID% is the process identifier of the application that is being traced, and %u is a unique
number to differentiate files between threads running trace under different Java classloaders.
The application stops writing information to the trace file when it is stopped.
If the application has to run for a long period of time before the issue that the trace is being collected
for occurs, then the trace file could potentially be very large. In this situation, consider collecting trace
by using the IBM MQ classes for JMS configuration file (see “Collecting an IBM MQ classes for JMS
trace by using the IBM MQ classes for JMS configuration file” on page 428). When enabling trace in
this way, it is possible to control the amount of trace data that the IBM MQ classes for JMS generate.
Collecting an IBM MQ classes for JMS trace by using the IBM MQ classes for JMS
configuration file
If an application must run for a long period of time before an issue occurs, IBM MQ classes for JMS trace
should be collected by using the IBM MQ classes for JMS configuration file. The configuration file allows
you to specify various options to control the amount of trace data that is collected.
About this task
To collect a trace by using the IBM MQ classes for JMS configuration file, complete the following steps.
Procedure
1.Create an IBM MQ classes for JMS configuration file.
For more information about this file, see The IBM MQ classes for JMS configuration file.
2.Edit the IBM MQ classes for JMS configuration file so that the property
com.ibm.msg.client.commonservices.trace.status is set to the value ON.
3.Optional: Edit the other properties that are listed in the IBM MQ classes for JMS configuration file Java
Standard Edition Trace Settings.
4.Run the IBM MQ classes for JMS application by using the following command:
java -Dcom.ibm.msg.client.config.location=config_file_url
application_name
where config_file_url is a uniform resource locator (URL) that specifies the name and location of the
IBM MQ classes for JMS configuration file. URLs of the following types are supported: http, file,
ftp, and jar.
Here is an example of a Java command:
java -Dcom.ibm.msg.client.config.location=file:/D:/mydir/myjms.config
MyAppClass
This command identifies the IBM MQ classes for JMS configuration file as the file
D:\mydir\myjms.config on the local Windows system.
By default, the IBM MQ classes for JMS start writing trace information to a trace file in the application’s
current working directory when the application starts up. The name of the trace file depends on the
environment that the application is running in:
• For IBM MQ classes for JMS for IBM MQ 9.0.0 Fix Pack 1 or earlier, trace is written to a file called
mqjms_%PID%.trc.
• From IBM MQ 9.0.0 Fix Pack 2, if the application has loaded the IBM MQ classes for JMS from the
JAR file com.ibm.mqjms.jar, trace is written to a file called mqjava_%PID%.trc.
428 Troubleshooting and Support for IBM MQ
• From IBM MQ 9.0.0 Fix Pack 2, if the application has loaded the IBM MQ classes for JMS
from the relocatable JAR file com.ibm.mq.allclient.jar, trace is written to a file called
mqjavaclient_%PID%.trc.
• From IBM MQ 9.1.5 and IBM MQ 9.1.0 Fix Pack 5, if the application has loaded the IBM
MQ classes for JMS from the JAR file com.ibm.mqjms.jar, trace is written to a file called
mqjava_%PID%.cl%u.trc.
• From IBM MQ 9.1.5 and IBM MQ 9.1.0 Fix Pack 5, if the application has loaded the IBM MQ classes
for JMS from the relocatable JAR file com.ibm.mq.allclient.jar, trace is written to a file called
mqjavaclient_%PID%.cl%u.trc.
• From IBM MQ 9.3.0, if the application
has loaded the IBM MQ classes for Jakarta Messaging from the relocatable JAR file
com.ibm.jakarta.client.jar (Jakarta Messaging 3.0), or loaded the IBM MQ classes for JMS
from the relocatable JAR file com.ibm.mq.allclient.jar (JMS 2.0), trace is written to a file
called mqjavaclient_%PID%.cl%u.trc.