### 8.3.28 Validating Publications (validatepubs)

The `validatepubs` command is used to validate publication tables.

#### Synopsis
```bash
-validatepubs -repsvrfile pubsvrfile -pubdbid <publication_database_id> -repgrouptype {m | s}
```

- **-repgrouptype**: 
  - Specify `s` for a single-master replication system.
  - Specify `m` for a multi-master replication system.

#### Examples
In the following example, the Oracle publication database definition identified by publication database ID 1 is validated:

```bash
$ java -jar edb-repcli.jar -validatepubs -repsvrfile ~/pubsvrfile.prop -pubdbid 1 -repgrouptype s
Validating all available publications...
The schema definitions for all the non-snapshot-only publications tables are in sync with the source.
The "validatepubs" feature is not available for the following snapshot-only publications:
- salesemp
```

### 8.3.29 Removing a Publication (removepub)

The `removepub` command removes one or more publications.

#### Synopsis
```bash
-removepub <pubname_1> [ <pubname_2> ... ] -repsvrfile pubsvrfile -repgrouptype { m | s }
```

- **-repgrouptype**:
  - Specify `s` for a single-master replication system.
  - Specify `m` for a multi-master replication system.

#### Parameters
- **pubname_n**: The name of a publication to be removed.
- **pubsvrfile**: The file containing the publication server login information.

#### Examples
A publication named `dept_emp` is removed from a single-master replication system:

```bash
$ java -jar edb-repcli.jar -removepub dept_emp -repsvrfile ~/pubsvrfile.prop -repgrouptype s
Removing publication...
Publication dept_emp unpublished successfully.
```

### 8.3.30 Replicating DDL Changes (replicateddl)

The `replicateddl` command applies an `ALTER TABLE` statement to a publication table in all databases of a replication system and updates the xDB Replication Server insert/update/delete triggers and shadow table associated with that publication table.

#### Synopsis
```bash
-replicateddl <pubname> -repsvrfile pubsvrfile -table <schema_t.table_name> -ddlscriptfile <script_file>
```

#### Parameters
- **pubname**: The name of the publication containing the table to which the `ALTER TABLE` statement is to be applied.
- **pubsvrfile**: The file containing the publication server login information.
- **schema_t**: The name of the schema containing `table_name`. This value is case-sensitive.
- **table_name**: The name of the table in the `ALTER TABLE` statement whose definition is to be modified. This value is case-sensitive.
- **script_file**: Path to the file containing the `ALTER TABLE` statements.

#### Examples
The following example shows the addition of a column named `title` to table `edb.emp`. The `ALTER TABLE` statement is in the text file `addcolumn.sql` as shown below:

```sql
ALTER TABLE edb.emp ADD COLUMN title VARCHAR(20);
```

The `replicateddl` command is executed using the `addcolumn.sql` file to update the triggers and shadow tables on the master nodes:

```bash
$ java -jar edb-repcli.jar -replicateddl emp_pub -repsvrfile ~/pubsvrfile.prop -table edb.emp -ddlscriptfile ~/addcolumn.sql
DDL changes successfully replicated to all master nodes.
```

### 8.3.31 Adding a Subscription Database (addsubdb)

For SMR only: The `addsubdb` command adds a subscription database definition.

#### Synopsis
```bash
-addsubdb -repsvrfile subsvrfile -dbtype {oracle | enterprisedb | postgresql | sqlserver} -dbhost <host> -dbport <port> -dbuser <user> { -dbpassword <encrypted_pwd> | -dbpassfile <pwdfile> } [ -oraconnectiontype {sid | servicename} ] -database <dbname> [ -urloptions <jdbc_url_parameters> ]
```

- **-dbtype**:
  - Specify `oracle` if the database is an Oracle database.
  - Specify `enterprisedb` if the database is an Advanced Server database in Oracle compatible configuration mode.
  - Specify `postgresql` if the database is a PostgreSQL database or an Advanced Server database in PostgreSQL compatible configuration mode.
  - Specify `sqlserver` if the database is a Microsoft SQL Server database.
- **-oraconnectiontype**:
  - Specify `sid` if the Oracle system ID (SID) is used to identify the subscription database in the database parameter.
  - Specify `servicename` if the Oracle service name is used to identify the subscription database in the database parameter. Note: For Oracle 12c, use the service name.

#### Parameters
- **subsvrfile**: The file containing the subscription server login information.
- **host**: The IP address of the host on which the subscription database server is running.
- **port**: The port number on which the database server is listening for connections.
- **user**: The subscription database user name.
- **encrypted_pwd**: The encrypted password of the subscription database user. See Section 8.3.4 for directions on using the `encrypt` command to generate an encrypted password.
- **pwdfile**: The file containing the encrypted password of the subscription database user.
- **dbname**: The Postgres or SQL Server database name, the Oracle SID, or the Oracle service name of the subscription database.
- **jdbc_url_parameters**: Extended usage of JDBC URL parameters such as for support of SSL connectivity. (See Section 7.11 for information on SSL connectivity to the subscription database.)

#### Examples
The following example adds a subscription database definition for an Oracle database. The encrypted password is given on the command line with the `dbpassword` parameter. A subscription database ID of 1 is assigned to the database by the subscription server.

```bash
$ java -jar edb-repcli.jar -addsubdb -repsvrfile ~/subsvrfile.prop -dbtype oracle -dbhost 192.168.2.6 -dbport 1521 -dbuser subuser -dbpassword ygJ9AxoJEX854elcVIJPTw== -oraconnectiontype sid -database xe
Adding Subscription Database...
Subscription database added successfully. Subscription Database id:1
```

The following example adds a subscription database definition for an Advanced Server database. The encrypted password is read from a file named `pwdfile` with the `dbpassfile` parameter. A subscription database ID of 2 is assigned to the database by the subscription server.

```bash
$ java -jar edb-repcli.jar -addsubdb -repsvrfile ~/subsvrfile.prop -dbtype enterprisedb -dbhost 192.168.2.7 -dbport 5444 -dbuser subuser -dbpassfile ~/pwdfile -database subdb
Adding Subscription Database...
Subscription database added successfully. Subscription Database id:2
```

### 8.3.32 Printing Subscription Database IDs (printsubdbids)

For SMR only: The `printsubdbids` command prints the subscription database IDs of the subscription database definitions.

#### Synopsis
```bash
-printsubdbids -repsvrfile subsvrfile
```

#### Parameters
- **subsvrfile**: The file containing the subscription server login information.

#### Examples
The following example lists the subscription database IDs of the subscription database definitions:

```bash
$ java -jar edb-repcli.jar -printsubdbids -repsvrfile ~/subsvrfile.prop
Printing subscription database ids...
1
2
```

### 8.3.33 Printing Subscription Database Details (printsubdbidsdetails)

For SMR only: The `printsubdbidsdetails` command prints the connection information for each subscription database definition.

#### Synopsis
```bash
-printsubdbidsdetails -repsvrfile subsvrfile
```

The output has the following components: `dbid:host:port:dbname:user`

Note: The database userâ€™s password is not displayed.

#### Parameters
- **subsvrfile**: The file containing the subscription server login information.
- **dbid**: The subscription database ID assigned to the subscription database definition.
- **host**: The IP address of the host on which the subscription database server is running.
- **port**: The port number on which the database server is listening for connections.
- **dbname**: The Postgres or SQL Server database name, the Oracle SID, or the Oracle service name of the subscription database.
- **user**: The subscription database user name.

#### Examples
The following are the subscription database definitions subordinate to the subscription server identified by the content of file `subsvrfile.prop`:

```bash
$ java -jar edb-repcli.jar -printsubdbidsdetails -repsvrfile ~/subsvrfile.prop
Printing subscription database ids with details...
id:host:port:database|sid:user
1:192.168.2.6:1521:xe:subuser
2:192.168.2.7:5444:subdb:subuser
```

### 8.3.34 Updating a Subscription Database (updatesubdb)

For SMR only: The `updatesubdb` command provides the ability to change the connection information for an existing subscription database definition identified by its subscription database ID.

#### Synopsis
```bash
-updatesubdb -repsvrfile subsvrfile -subdbid <dbid> -dbhost <host> -dbport <port> -dbuser <user> { -dbpassword <encrypted_pwd> | -dbpassfile <pwdfile> } [ -oraconnectiontype {sid | servicename} ] -database <dbname> [ -urloptions <jdbc_url_parameters> ]
```

- **-oraconnectiontype**:
  - Specify `sid` if the Oracle system ID (SID) is used to identify the subscription database in the database parameter.
  - Specify `servicename` if the Oracle service name is used to identify the subscription database in the database parameter. Note: For Oracle 12c, use the service name.

#### Parameters
- **subsvrfile**: The file containing the subscription server login information.
- **dbid**: The subscription database ID of the subscription database definition to be updated.
- **host**: The IP address of the host on which the subscription database server is running.
- **port**: The port number on which the database server is listening for connections.
- **user**: The subscription database user name.
- **encrypted_pwd**: The password of the database user in encrypted form. See Section 8.3.4 for directions on using the `encrypt` command to generate an encrypted password.
- **pwdfile**: The file containing the password of the database user in encrypted form.
- **dbname**: The Postgres or SQL Server database name, the Oracle SID, or the Oracle service name of the subscription database.
- **jdbc_url_parameters**: Extended usage of JDBC URL parameters such as for support of SSL connectivity. (See Section 7.11 for information on SSL connectivity to the subscription database.) Specification of the `urloptions` parameter completely replaces any existing JDBC URL parameters that may have previously been specified with this database. Omission of the `urloptions` parameter deletes any existing JDBC URL parameters that may have previously been specified with this database.

#### Examples
In the following example, an existing subscription database definition with subscription database ID 2 is updated:

```bash
$ java -jar edb-repcli.jar -updatesubdb -repsvrfile ~/subsvrfile.prop -subdbid 2 -dbhost 192.168.2.7 -dbport 5444 -dbuser subuser -dbpassfile ~/pwdfile -database subdb
Updating subscription database ...
Subscription database with ID 2 is updated successfully.
```

### 8.3.35 Removing a Subscription Database (removesubdb)

For SMR only: The `removesubdb` command removes a subscription database definition.

#### Synopsis
```bash
-removesubdb -repsvrfile subsvrfile -subdbid <dbid>
```

#### Parameters
- **subsvrfile**: The file containing the subscription server login information.
- **dbid**: The subscription database ID of the subscription database definition to be removed.

#### Examples
The subscription database definition identified by subscription database ID 2 is removed:

```bash
$ java -jar edb-repcli.jar -removesubdb -repsvrfile ~/subsvrfile.prop -subdbid 2
Removing Subscription Database...
Subscription Database removed.
```

### 8.3.36 Creating a Subscription (createsub)

For SMR only: The `createsub` command creates a new subscription.

#### Synopsis
```bash
-createsub <subname> -subsvrfile subsvrfile -subdbid <dbid> -pubsvrfile pubsvrfile -pubname <pubname> [ -filterrule <filterid_1>[,<filterid_2> ...] ]
```

The `createsub` command adds a new subscription subordinate to the subscription database definition with the subscription database ID given by parameter `subdbid`.

#### Parameters
- **subname**: The subscription name to be given to the new subscription.
- **subsvrfile**: The file containing the subscription server login information of the subscription server under which the new subscription is subordinate.
- **dbid**: The subscription database ID of the subscription database definition subordinate to which the new subscription is to be added.
- **pubsvrfile**: The file containing the publication server login information of the publication server under which the publication is subordinate to which the new subscription is to be associated.
- **pubname**: The name of the publication to which the new subscription is to be associated.
- **-filterrule**: Comma-separated list of filter IDs to be applied to the subscription.

#### Examples
Creating a new subscription:

```bash
$ java -jar edb-repcli.jar -createsub my_subscription -subsvrfile ~/subsvrfile.prop -subdbid 1 -pubsvrfile ~/pubsvrfile.prop -pubname my_publication
Creating subscription...
Subscription my_subscription created successfully.
```

---

This optimized version of the text aims to improve clarity, coherence, and professionalism. It includes consistent formatting, clear section headings, and improved syntax and structure.