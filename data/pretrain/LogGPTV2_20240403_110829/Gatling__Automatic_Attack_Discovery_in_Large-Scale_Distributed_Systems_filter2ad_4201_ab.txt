ery time a malicious node must decide how to behave when
sending a message, it can choose the same action that suc-
ceeded before, and expect success again. This allows us to
reduce the search space of malicious actions substantially,
because once we have discovered a successful malicious ac-
tion for a message type, we no longer explore other possi-
bilities for the same type of message sent by any malicious
node.
2) Easily reproducible: We assume attacks that are not
largely dependent on the speciﬁc state of the distributed
system and thus can be easily reproduced. Intuitively, the
attacks we discover are those to which the system is gener-
ally vulnerable, rather than having only a small vulnerabil-
ity window. Easily reproducible attacks allow us to safely
ignore the particular sequence of benign actions that occur
alongside the malicious actions and focus our search solely
on malicious actions.
3) Near-immediate measurable effects: We consider at-
tacks that do not have a large time-lag between when they
occur and when the performance of the system is actually
affected. Intuitively, focusing on near-immediate effective
attacks will be ideal for ﬁnding direct attacks on system per-
formance, but it will not allow Gatling to discover stealth
attacks, where the goal is to obtain control without affect-
ing the performance of the system under attack. The near-
immediate impact on the system performance of the attacks
creates the opportunity to ﬁnd attacks by only executing a
smaller sequence of actions for a relatively short window of
time. We decide if a malicious action is a possible attack
by using an impact score Is function that is based on a per-
formance metric of the system and is provided by the user.
We require two properties of the impact score. One, that
it can be evaluated at any time during the execution. Two,
that when comparing scores, a larger score implies that the
performance is worse.
4) Most effective minimal combination: While Gatling
will discover single-behavior attacks that contain basic be-
haviors for many message types, some behaviors will have
only a nominal impact on the performance of the system,
and other behaviors may be quite effective as stand-alone at-
tacks. To allow the developer to discern these cases, Gatling
automatically determines the relative contribution of each
attack action to the overall performance degradation, allow-
ing the developer to further reduce the attack to their mini-
mal portions that have the most signiﬁcant impact.
Gatling builds up an attack by ﬁnding several instances
where applying a malicious action on a message results in
an increase in the impact score, then building up the maxi-
mally effective single-behavior attack across message types.
Once it has found the maximally effective single-behavior
attack, it determines the contribution of each malicious ac-
tion of the attack, and then can be repeated to ﬁnd additional
attacks.
Greedy action selection procedure. To ﬁnd an instance
where a single malicious action results in an increase in the
impact score, we use the procedure depicted in Fig. 2. The
main idea is to execute the program normally until a ma-
licious node attempts to send a message. At this point we
branch the execution and run on each branch the malicious
version of the sending of the message (try all malicious ac-
tions described in Section 2.2) and then continue running
the branch for a window of time tw. By measuring the im-
pact score at the end of each window of execution, we can
determine whether any of the malicious actions degraded
the performance relative to the baseline without a malicious
action. Since we measure the impact of only a single mali-
cious action instance, we consider any increase in the im-
pact score to suggest that the particular malicious action
could be a part of a successful attack. We greedily select
the strongest such malicious action and update a tally for
that message type and malicious action.
Building up the single-behavior attack. The greedy ac-
tion selection procedure ﬁnds the most effective malicious
action for a single instance of sending a message. We report
a malicious action as part of an attack once it has been se-
lected in na different instances for the same message type.
The na threshold allows us to avoid cases in which the im-
pact was a random variation, and provides a balance be-
tween attacks which are more frequently successful but with
a lower impact, and attacks which are less frequently suc-
cessful but with a higher impact.
If we only wished to ﬁnd attacks incorporating a single
message type at a time, we could at this point simply iterate
through the set of message types, and perform the greedy
procedure each time that message type is sent. While suc-
(1) Previous 
execution path 
(2) A malicious node sends a 
message of type m1 
(3) B = m(Ø), 
execute protocol for 
tw seconds 
(4) Find the benign 
baseline 
S = evaluate(Is, B) 
… 
(5) For every malicious 
action ai  
Bi = m(ai ), execute 
protocol for tw seconds,  
(6) Si = evaluate (Is, Bi) 
and update the tally for 
malicious action ai 
Malicious action a
 is 
3
chosen n
a times for 
message type m
2 
Malicious action a
 is 
2
chosen n
a times for 
message type m
1 
Figure 2. Greedy action selection procedure for
one instance of sending message type m1
Figure 3. Greedy procedure applied for several
instances of message types m1 and m2
cessful in ﬁnding single-behavior, single-message attacks,
this approach would not ﬁnd dependent attacks, where the
success of an attack is conditional on a prior malicious ac-
tion choice. Consider for example the case of a malicious
node which lies to increase the number of children it has in
a tree overlay. If the malicious node does not also perform
an action on application data, then this kind of attack would
not be discovered using single-message attacks.
To discover dependent attacks, Gatling simultaneously
searches across all message types, allowing it to ﬁnd com-
bination attacks, where individual malicious actions work
together to build stronger overall attacks. By applying
the greedy action selection procedure to the instances as
they are encountered, rather than iterating through message
types, our algorithm can locate amplifying stealth attacks
without prior knowledge of the order in which malicious
actions must occur. Speciﬁcally, the system is simulated
normally until a malicious node attempts to send a message
of a type for which an attack has not been identiﬁed. The
greedy selection procedure is used to determine the best ac-
tion to take for this instance, and a tally is kept of the times
each malicious action was chosen. The number of times
no malicious action is selected in a row is also tallied, as a
means to halt the search. We show in Fig. 3 the greedy pro-
cedure being applied to several instances for two different
types of messages.
Once the search halts, the contribution of each of the ac-
tions is computed, and if the attack impact is greater than
some ∆, the user is notiﬁed, and the algorithm repeats but
does not search on previously used malicious actions. Com-
puting the action contribution involves running the system
again for an extended period both with and without the de-
termined attack. This allows Gatling to verify that the at-
tack satisﬁes the requirement that its impact is greater than
∆. Gatling then determines the relative contribution of each
component by running additional tests, subtracting out the
least effective contributor until it is no longer an attack.
This computation and sorting procedure is important for
variables:
vector Attack : Learned behaviors for most effective
attack for each message type
map AttackAndContribution : Attack listing relative
contribution of actions
matrix AttackTally : Count, for each message type, the
times the attack is determined most effective
IneﬀectiveTally : The number of times no malicious
action is chosen consecutively
while IneﬀectiveTally  ∆ then
output AttackAndContribution ;
Repeat, ignoring prior Attack actions
end
Algorithm 1: Attack discovery algorithm
three reasons. First, as a greedy approach, it is possible that
Gatling ﬁnds a local maximum, but that the order in which
malicious actions were selected diminished the overall im-
pact (e.g. an attack may later be found which by itself is
more potent than when combined with the earlier attack).
Second, some malicious actions may depend on other ma-
licious actions for success, this search will order them ac-
cordingly. Third, some malicious actions may have only a
minor impact, or a strong enough impact to be used in iso-
lation, this post processing can provide this information. In
fact, we often ﬁnd multiple attacks from a single run of the
Gatling search algorithm. We present our algorithm in de-
tails in Algorithm 1.
Impact score and parameter selection. The user must
specify an impact score. As stated, the impact score must
be able to be executed at any time, rather than only at the
completion of an execution, and must let greater values in-
dicate a greater impact. Consider, for example, an impact
score for a ﬁle download system. Using total download time
as an impact score would satisfy the requirement that big-
ger numbers indicate more impact (slower download times),
but fails the requirement that it can be evaluated at any time
(it can only be evaluated once the ﬁle is downloaded). The
current average goodput of the ﬁle download satisﬁes the
requirement that it can be evaluated at any time, but in the
case of goodput, bigger numbers actually mean less impact.
An alternative might include an inversion of the goodput, or
instead it could simply be a measure of how much of the ﬁle
is left to download.
Gatling requires the setup of two parameters, tw and na.
Larger values of tw increase the search time while smaller
values may not capture the effects of the malicious action
on performance. In the case of na, its setup should take into
account the normal variability of performance in the system
that is evaluated.
3 Implementation
We created a concrete implementation of Gatling for
the Mace [27] toolkit. Mace is publicly available and was
designed for building large-scale, high-performance dis-
tributed systems implementations based on C++. It consists
of a source-to-source compiler, a set of runtime libraries,
as well as a model checker and time-based simulator. The
release also includes several distributed systems implemen-
tations. The Mace compiler enforces the message-event
model and generates implementations of message serial-
ization, both useful for Gatling. Speciﬁcally, the message
event-model allows us to inﬂuence message delivery, while
message serialization allows us to implement message ly-
ing without modifying the target system code, but just by
deﬁning speciﬁc lying actions for different types.
To implement Gatling we made the following changes to
Mace. We added an interposition layer between Mace ser-
vices and the networking services, we modiﬁed the Mace
compiler to include a message serialization code injector,
we added supporting serialization code in the Mace runtime
library, and we modiﬁed the simulator to implement our at-
tack discovery algorithm. The user provides an implemen-
tation of the distributed system in Mace and speciﬁes an
impact score in a simulation driver that allows the system to
run in the simulator. The Mace compiler will generate the
message serialization injected code in the user code.
This modular design allows code reuse and allows
Gatling to focus attacks on modules independently. The
interposition layer implements malicious message delivery
actions. When a node requests sending a message, before
providing the message to the network messaging services,
Gatling consults the attack discovery algorithm to decide
whether to take any message delivery action. Message drop-
ping, delaying, diverting, and duplicating are provided by
either not making the call to the messaging services, queue-
ing the message for sending 0.5 to 2 seconds later, calling
into the messaging services multiple times, or passing a dif-
ferent destination to the messaging services. To support di-
verting messages, the simulator provides lists of malicious
and benign node identiﬁers.
The injected serialization code component implements
malicious message lying actions. The injected code simi-
larly consults the attack discovery algorithm to determine
if a lying action should be taken. As we are searching for
single-behavior attacks, the simulator directs only a single
ﬁeld in a message to be lied about during one branch of the
greedy selection procedure. If any lying does occur, when
serializing the appropriate ﬁeld of the message a simula-
tor chosen value is used instead of the one provided. The
user-written code is not modiﬁed, nor are any user-visible
variables. Simulator-provided lists are similarly used to lie
about node identiﬁers.
Fig. 4 shows the Mace+Gatling architectural design
when testing a layered DHT application. The parts noted
with G represent the Gatling additions and modiﬁcations.
The user provides each DHT component layer in the Mace
language (shown at left): a simulation driver (SimDriver),
containing the impact score function;
the storage layer
(DHT); a recursive overlay routing layer (ROR); and the
Chord lookup service layer. The Mace compiler then trans-
lates each layer into C++ code, injecting message lying ac-
tions into each layer tailored to the messages that layer de-
ﬁnes. Standard C++ tools then compile and link the gen-
erated code with the Gatling interposition layer, Mace run-
time library, simulated TCP and UDP messaging services,
and the Mace simulator application. SimDriver allows the
application to run in the simulator; to deploy the DHT ap-
plication, the C++ code need only be re-linked with the real
TCP and UDP messaging services, and a C++ user applica-
SimDriver 
I 
DHT 
ROR 
Chord 
Mace 
Source-
to-Source 
Compiler 
G 
SimDriver 
DHT 
I 
G 
ROR 
G 
Chord 
G 
G 
SimTCP 
SimUDP 
e
m
i
t
n
u
R
e
c
a
M
y
r
a
r
b
i
L
G 
r
o
t
a
l
u
m
i
S
G 
I 
G 
G 
G 
G 
G 
Mace Toolkit 
User Supplied Code 
User Supplied Impact Score 
Gatling Interposition Layer 
Gatling Serialization Code Injector 
Gatling Injected Serialization Code 
Gatling Attack Discovery Algorithm 
Gatling Serialization Library Modification 
Figure 4. Gatling implementation for one node: DHT example
tion in lieu of SimDriver.
4 Case Study: BulletPrime
In this section we demonstrate how to use Gatling to ﬁnd
attacks on a real system implementation. For our case study
we apply Gatling to an implementation of the BulletPrime
peer-to-peer ﬁle distribution protocol [28, 31] that we re-
ceived from the authors of the system. We selected Bul-
letPrime as a case study because it uses a more complex
design involving several services. While we illustrate how
a developer might use Gatling to ﬁnd attacks arising from
a malicious or simply misconﬁgured node, our intention is
not to criticize BulletPrime’s design. Instead we explore its
behavior in an adversarial environment that many practical
uses might require.
BulletPrime is a ﬁle distribution system similar to Bit-
Torrent [18]. However, where BitTorrent focuses on lo-
cal optimizations that greedily beneﬁt each node individu-
ally, BulletPrime uses a more collaborative set of algorithms
that are geared towards global optimization. For example,
while both BitTorrent and BulletPrime implement mesh-
based strategies for peering, and use rarity as a mechanism
for increasing block diversity, BulletPrime learns about new
peers by using a gossip protocol that guarantees each node
receives a uniformly random distribution of peers and their
current download status. BulletPrime also searches inde-
pendently for peers that can provide maximal download or
upload bandwidth, as opposed to BitTorrent’s symmetric
block exchange algorithm.
The BulletPrime component design is illustrated in
Fig. 5. The BulletPrime service manages the state of the
ﬁle download, implements sending Diff messages to con-
nected peers with information of newly available blocks of
the ﬁle; and tracks the performance of the peers. It utilizes
the Distributor service to manage the queued Data messages
to each peer, keeping the network buffers full without send-
ing excess data. BulletPrime uses the Mesh service to learn
of new peers and maintain active connection to upload and
download peers. The Mesh service sends Join and JoinRe-
ply messages, and uses the RanSub [30] service to discover