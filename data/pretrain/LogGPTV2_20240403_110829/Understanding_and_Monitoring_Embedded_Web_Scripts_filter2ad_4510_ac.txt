### Analytics

Analytics scripts are typically transparent to site visitors and do not affect the functionality or visual output of the embedding webpage. Their base policies include a fixed set of sensitive APIs, such as setting and reading `document.cookie`, but do not involve specific DOM accesses.

### Selection of Container Sites

In selecting the container sites, we excluded inappropriate sites, including those where the embedded scripts do not access anything, trivial sites with few subpages and content, sites with objectionable content (e.g., porn), and foreign language sites for which we were unable to register and log in. The full list of selected sites is available at [ScriptInspector.org/sites](http://ScriptInspector.org/sites).

### Policy 1: Google Analytics Base Policy

- **DOM Accesses:**
  - `/HTML[1]/BODY[1]:GetId`
  - `/HTML[1]/BODY[1]:ClientHeight`
  - `/HTML[1]/BODY[1]:ClientWidth`
  - `/HTML[1]:ClientHeight`
  - `/HTML[1]:ClientWidth`

- **Browser Properties:**
  - `navigator.javaEnabled`
  - `navigator.language`
  - `navigator.plugins`
  - `navigator.cookieEnabled`
  - `navigator.userAgent`
  - `screen.height`
  - `screen.width`
  - `screen.colorDepth`

- **Cookie Management:**
  - `GetCookie`
  - `SetCookie`

- **Network Access:**
  - `NetworkSend:doubleclick.net`
  - `NetworkSend:google.com`
  - `NetworkSend:google-analytics.com`

- **DOM Manipulation:**
  - `/HTML[1]/HEAD[1]>InsertBefore:[o]` (limits insertions to nodes owned by the script)

Google Analytics, being the most frequently embedded script, exhibits a very stable behavior pattern. Its accesses can be categorized into three types:
1. **Generic DOM Access:** Reading the size of the body element.
2. **Special Property Access:** Testing the browser's configuration, reading and writing cookies.
3. **Network Access:** Sending information back to Google Analytics servers via an image element.

The final permission allows the Google Analytics script to insert dynamically-loaded scripts into the page, ensuring that only script elements are inserted. Network policies still apply, restricting the domain hosting the dynamically-loaded script.

### Quantcast Analytics

Quantcast analytics behaves similarly to Google Analytics but also reads the `content` attribute of all `meta` elements. This is likely to collect keywords for the document.

### Chartbeat Analytics

Chartbeat analytics reads the `src` attributes of all `script` elements on the page, along with the `href` and `rel` attributes of `link` elements. It also maintains a heartbeat message protocol with the backend server, resulting in multiple request-response pairs per session.

### Base Policies for Analytics Scripts

All major analytics scripts have sufficiently limited behaviors that base policies can cover all observed behaviors without including permissions that allow access to obviously sensitive resources or content-changing APIs.

### Advertisements

Google offers the most widely used advertising service through AdSense and DoubleClick. The following is an excerpt from the base policy for `googleadservices.com`.

### Policy 2: Google AdSense Base Policy Excerpt

- **DOM Accesses:**
  - `//: GetAttribute:data-ad-container`
  - `// DIV[@id='div-gpt-ad-.*']:!`
  - `/HTML[1]/BODY[1]:document.write`
  - `//: GetId`

- **Network Access:**
  - Similar to Policy 1

The AdSense script accesses several browser properties similar to analytics scripts but also injects advertisements and tracking pixels. The base policy covers the most common use, allowing any APIs to be called on a node whose id starts with `div-gpt-ad-`.

### Other Advertising Scripts

Scripts from `moatads.com`, `rubiconproject.com`, `adroll.com`, and `adnxs.com` exhibit similar behaviors to Google advertising scripts. Additionally, `moatads.com` scripts occasionally read the `src` attribute of all `script` and `img` elements, which could result in information leakage. `betrad.com` scripts also access `localStorage` APIs, adding an extra tracking approach if the user rejects or deletes their cookie.

### Social Widgets

Social widget scripts behave similarly to advertising scripts. For example, the base policy for `twitter.com` scripts includes permissions for getting and setting Twitter-specific attributes, accessing content size, injecting content, and replacing placeholders on the page.

### Web Development Scripts

Web development scripts, such as A/B testing scripts from `optimizely.com` and the jQuery library hosted on `googleapis.com`, have highly variable behavior depending on how they are used. Effective base policies cannot be developed for these scripts, and custom policies are necessary.

### Developing Site-Specific Policies

Site-specific policies are needed for scripts that require different permissions depending on their embedding. To aid in this, we developed the `PolicyGenerator` tool to partially automate the process. The `PolicyGenerator` generates permission candidates based on violations reported by `ScriptInspector`. The site administrator can then examine and select appropriate permissions using the `Visualizer` tool.

### PolicyGenerator Tool

The `PolicyGenerator` helps in generating permission candidates by identifying common selector patterns across different pages and requests. It uses heuristics to synthesize four types of patterns for each attribute name: exact match, match all, starts with, and ends with. The best pattern type is selected based on the number of matched violations.

### Adjusting Permission Candidates

To evaluate the `PolicyGenerator`, we set up a crawler robot to visit 100 test sites using `ScriptInspector`. The robot simulates regular user browsing actions and logs violating traces. We manually examined violations and adjusted permissions as needed.

### Example Adjustments

- **Overfitting Permissions:**
  - Original: `// DIV[@id='adPos300x250']`
  - Adjusted: `// DIV[@id='adPos\d*x\d*']`

- **Relaxing Overfitting:**
  - Adjust the matching threshold in `PolicyGenerator` to eliminate overly specific permissions.

### Conclusion

Using the `PolicyGenerator` and `Visualizer` tools, site administrators can effectively develop site-specific policies for embedded scripts. While some manual adjustments are necessary, the process is generally straightforward and can be learned by experienced web developers.