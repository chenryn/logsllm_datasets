**作者：Badcode@知道创宇404实验室  
时间：2019年4月8日  
English Version: **
看到官方发布了预警，于是开始了漏洞应急。漏洞描述中指出Confluence Server与Confluence Data Center中的Widget
Connector存在服务端模板注入漏洞，攻击者能利用此漏洞能够实现目录穿越与远程代码执行。
![
](https://images.seebug.org/content/images/2019/04/9bb154de-a086-4cf1-ac09-6283de9fe1d0.png-w331s)
确认漏洞点是Widget
Connector，下载最新版的比对补丁，发现在`com\atlassian\confluence\extra\widgetconnector\WidgetMacro.java`里面多了一个过滤，这个应该就是这个漏洞最关键的地方。
![
](https://images.seebug.org/content/images/2019/04/552c7a1b-4dad-4fa9-8bb0-626419b02098.png-w331s)
可以看到
    this.sanitizeFields = Collections.unmodifiableList(Arrays.asList(VelocityRenderService.TEMPLATE_PARAM));
而`TEMPLATE_PARAM`的值就是`_template`，所以这个补丁就是过滤了外部传入的`_template`参数。
    public interface VelocityRenderService {
        public static final String WIDTH_PARAM = "width";
        public static final String HEIGHT_PARAM = "height";
        public static final String TEMPLATE_PARAM = "_template";
翻了一下Widget Connector里面的文件，发现`TEMPLATE_PARAM`就是模板文件的路径。
    public class FriendFeedRenderer implements WidgetRenderer {
        private static final String MATCH_URL = "friendfeed.com";
        private static final String PATTERN = "friendfeed.com/(\\w+)/?";
        private static final String VELOCITY_TEMPLATE = "com/atlassian/confluence/extra/widgetconnector/templates/simplejscript.vm";
        private VelocityRenderService velocityRenderService;
    ......
        public String getEmbeddedHtml(String url, Map params) {
            params.put(VelocityRenderService.TEMPLATE_PARAM, VELOCITY_TEMPLATE);
            return velocityRenderService.render(getEmbedUrl(url), params);
        }
加载外部的链接时，会调用相对的模板去渲染，如上，模板的路径一般是写死的，但是也有例外，补丁的作用也说明有人突破了限制，调用了意料之外的模板，从而造成了模板注入。
在了解了补丁和有了一些大概的猜测之后，开始尝试。
首先先找到这个功能，翻了一下官方的文档，找到了这个功能，可以在文档中嵌入一些视频，文档之类的。
![
](https://images.seebug.org/content/images/2019/04/8f35d723-2e9b-4687-aa67-ae81612461e6.png-w331s)
看到这个，有点激动了，因为在翻补丁的过程中，发现了几个参数，`url`，`width`，`height`正好对应着这里，那`_template`是不是也从这里传递进去的？
随便找个Youtube视频插入试试，点击预览，抓包。
![
](https://images.seebug.org/content/images/2019/04/b8b048e4-cdcb-46f0-9c4c-5c5291911b68.png-w331s)
在`params`中尝试插入`_template`参数，好吧，没啥反应。。
![
](https://images.seebug.org/content/images/2019/04/7eb17ac6-a1b5-4566-a709-b213482e0cd7.png-w331s)
开始debug模式，因为测试插入的是Youtube视频，所以调用的是`com/atlassian/confluence/extra/widgetconnector/video/YoutubeRenderer.class`
    public class YoutubeRenderer implements WidgetRenderer, WidgetImagePlaceholder {
        private static final Pattern YOUTUBE_URL_PATTERN = Pattern.compile("https?://(.+\\.)?youtube.com.*(\\?v=([^&]+)).*$");
        private final PlaceholderService placeholderService;
        private final String DEFAULT_YOUTUBE_TEMPLATE = "com/atlassian/confluence/extra/widgetconnector/templates/youtube.vm";
    ......
        public String getEmbedUrl(String url) {
            Matcher youtubeUrlMatcher = YOUTUBE_URL_PATTERN.matcher(this.verifyEmbeddedPlayerString(url));
            return youtubeUrlMatcher.matches() ? String.format("//www.youtube.com/embed/%s?wmode=opaque", youtubeUrlMatcher.group(3)) : null;
        }
        public boolean matches(String url) {
            return YOUTUBE_URL_PATTERN.matcher(this.verifyEmbeddedPlayerString(url)).matches();
        }
        private String verifyEmbeddedPlayerString(String url) {
            return !url.contains("feature=player_embedded&") ? url : url.replace("feature=player_embedded&", "");
        }
        public String getEmbeddedHtml(String url, Map params) {
            return this.velocityRenderService.render(this.getEmbedUrl(url), this.setDefaultParam(params));
        }
在`getEmbeddedHtml`下断点，先会调用`getEmbedUrl`对用户传入的`url`进行正则匹配，因为我们传入的是个正常的Youtube视频，所以这里是没有问题的，然后调用`setDefaultParam`函数对传入的其他参数进行处理。
        private Map setDefaultParam(Map params) {
            String width = (String)params.get("width");
            String height = (String)params.get("height");
            if (!params.containsKey("_template")) {
                params.put("_template", "com/atlassian/confluence/extra/widgetconnector/templates/youtube.vm");
            }
            if (StringUtils.isEmpty(width)) {
                params.put("width", "400px");
            } else if (StringUtils.isNumeric(width)) {
                params.put("width", width.concat("px"));
            }
            if (StringUtils.isEmpty(height)) {
                params.put("height", "300px");
            } else if (StringUtils.isNumeric(height)) {
                params.put("height", height.concat("px"));
            }
            return params;
        }
取出`width`和`height`来判断是否为空，为空则设置默认值。关键的`_template`参数来了，如果外部传入的参数没有`_template`，则设置默认的Youtube模板。如果传入了，就使用传入的，也就是说，aaaa是成功的传进来了。
![
](https://images.seebug.org/content/images/2019/04/2349415b-a320-439f-8e5c-470348af962f.png-w331s)
大概翻了一下Widget
Connector里面的Renderer，大部分是不能设置`_template`的，是直接写死了，也有一些例外，如Youtube，Viddler，DailyMotion等，是可以从外部传入`_template`的。
能传递`_template`了，接下来看下是如何取模板和渲染模板的。
跟进`this.velocityRenderService.render`，也就是`com/atlassian/confluence/extra/widgetconnector/services/DefaultVelocityRenderService.class`里面的`render`方法。
        public String render(String url, Map params) {
            String width = (String)params.get("width");
            String height = (String)params.get("height");
            String template = (String)params.get("_template");
            if (StringUtils.isEmpty(template)) {
                template = "com/atlassian/confluence/extra/widgetconnector/templates/embed.vm";
            }
            if (StringUtils.isEmpty(url)) {
                return null;
            } else {
                Map contextMap = this.getDefaultVelocityContext();
                Iterator var7 = params.entrySet().iterator();
                while(var7.hasNext()) {
                    Entry entry = (Entry)var7.next();
                    if (((String)entry.getKey()).contentEquals("tweetHtml")) {
                        contextMap.put(entry.getKey(), entry.getValue());
                    } else {
                        contextMap.put(entry.getKey(), GeneralUtil.htmlEncode((String)entry.getValue()));
                    }
                }
                contextMap.put("urlHtml", GeneralUtil.htmlEncode(url));
                if (StringUtils.isNotEmpty(width)) {
                    contextMap.put("width", GeneralUtil.htmlEncode(width));
                } else {
                    contextMap.put("width", "400");
                }
                if (StringUtils.isNotEmpty(height)) {
                    contextMap.put("height", GeneralUtil.htmlEncode(height));
                } else {
                    contextMap.put("height", "300");
                }
                return this.getRenderedTemplate(template, contextMap);
            }
        }
`_template`取出来赋值给`template`，其他传递进来的参数取出来经过判断之后放入到`contextMap`，调用`getRenderedTemplate`函数，也就是调用`VelocityUtils.getRenderedTemplate`。
       protected String getRenderedTemplate(String template, Map contextMap){
            return VelocityUtils.getRenderedTemplate(template, contextMap);
        }
一路调用，调用链如下图，最后来到`/com/atlassian/confluence/util/velocity/ConfigurableResourceManager.class`的`loadResource`函数，来获取模板。