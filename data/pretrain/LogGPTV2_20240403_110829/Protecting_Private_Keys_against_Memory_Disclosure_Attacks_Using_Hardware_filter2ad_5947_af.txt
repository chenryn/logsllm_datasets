intel-software-development-emulator.
1616
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:06:11 UTC from IEEE Xplore.  Restrictions apply. 
memory attacks,” in 6th Theory of Cryptography Con-
ference (TCC), 2009, pp. 474–495.
[5] J. Alwen, Y. Dodis, and D. Wichs, “Survey: Leak-
age resilience and the bounded retrieval model,” in
4th International Conference on Information Theoretic
Security (ICITS), 2010, pp. 1–18.
[6] C. Arnaud and P.-A. Fouque, “Timing attack against
protected RSA-CRT implementation used in PolarSS-
L,” in Topics in Cryptology - CT-RSA, 2013, pp. 18–33.
[7] M. Becher, M. Dornseif, and C. Klein, “Firewire:
All your memory are belong to us,” in 6th Annual
CanSecWest Conference, 2005.
[8] D. Bernstein, “Cache-timing attacks on AES,” 2004,
http://cr.yp.to/antiforgery/cachetiming-20041111.pdf.
[9] A. Birgisson, M. Dhawan, U. Erlingsson et al., “En-
forcing authorization policies using transactional mem-
ory introspection,” in 15th ACM Conference on Com-
puter and Communications Security (CCS), 2008, pp.
223–234.
[10] A. Birgisson and U. Erlingsson, “An implementation
and semantics for transactional memory introspection
in Haskell,” in 4th ACM SIGPLAN Workshop on
Programming Languages and Analysis for Security
(PLAS), 2009, pp. 87–99.
[11] E.-O. Blass and W. Robertson, “TRESOR-HUNT:
Attacking CPU-bound encryption,” in 28th Annual
Computer Security Applications Conference (ACSAC),
2012, pp. 71–78.
[12] B. Bock, “Firewire-based physical security attacks on
Windows 7, EFS and BitLocker,” 2009.
[13] J. Bonneau and I. Mironov, “Cache-collision timing at-
tacks against AES,” in 8th Workshop on Cryptographic
Hardware and Embedded Systems (CHES), 2006, pp.
201–215.
[14] P. Broadwell, M. Harren, and N. Sastry, “Scrash: A
system for generating secure crash information,” in
12th USENIX Security Symposium, 2003.
[15] D. Brumley and D. Boneh, “Remote timing attacks are
practical,” Computer Networks, vol. 48, no. 5, pp. 701–
716, 2005.
[16] B. Carlstrom, A. McDonald, H. Chaﬁ et al., “The
Atomos transactional programming language,” in ACM
SIGPLAN Conference on Programming Language De-
sign and Implementation (PLDI), 2006, pp. 1–13.
[17] J. Chow, B. Pfaff, T. Garﬁnkel et al., “Understanding
data lifetime via whole system simulation,” in 13th
USENIX Security Symposium, 2004.
[18] J. Chow, B. Pfaff, T. Garﬁnkel, and M. Rosen-
blum, “Shredding your garbage: Reducing data lifetime
through secure deallocation,” in 14th USENIX Security
Symposium, 2005.
[19] S. Chow, P. Eisen, H. Johnson, and P. van Oorschot,
“A white-box DES implementation for DRM appli-
cations,” in 2nd ACM Workshop on Digital Rights
Management (DRM), 2002, pp. 1–15.
[20] ——, “White-box cryptography and an AES imple-
mentation,” in 9th International Workshop on Selected
Areas in Cryptography (SAC), 2002, pp. 250–270.
[21] J. Chung, M. Dalton, H. Kannan, and C. Kozyrakis,
“Thread-safe dynamic binary translation using trans-
actional memory,” in 14th IEEE Symposium on High
Performance Computer Architecture (HPCA), 2008,
pp. 279–289.
[22] C. Cowan, C. Pu, D. Maier et al., “StackGuard: Au-
tomatic adaptive detection and prevention of buffer-
overﬂow attacks,” in 7th USENIX Security Symposium,
1998.
[23] C. Cowan, S. Beattie, J. Johansen, and P. Wagle,
“PointGuardTM: Protecting pointers from buffer over-
ﬂow vulnerabilities,” in 12th USENIX Security Sympo-
sium, 2003.
kernel
“Linux
vulnerability
http://www.cvedetails.com/product/47/
in November
accessed
[24] CVE
Details,
statistics,”
Linux-Linux-Kernel.html,
2014.
[25] P. Damron, A. Fedorova, Y. Lev et al., “Hybrid trans-
actional memory,” in 12th International Conference on
Architectural Support for Programming Languages and
Operating Systems (ASPLOS), 2006, pp. 336–346.
[26] Y. Desmedt and Y. Frankel, “Threshold cryptosystems,”
in Advances in Cryptology - CRYPTO, 1989, pp. 307–
315.
[27] D. Dice, Y. Lev, M. Moir et al., “Early experience
with a commercial hardware transactional memory
implementation,” in 14th International Conference on
Architectural Support for Programming Languages and
Operating Systems (ASPLOS), 2009, pp. 157–168.
[28] A. Dunn, M. Lee, S. Jana et al., “Eternal sunshine of
the spotless machine: Protecting privacy with ephemer-
al channels,” in 10th USENIX Conference on Operating
Systems Design and Implementation (OSDI), 2012, pp.
61–75.
[29] B. Garmany and T. M¨uller, “PRIME: Private RSA
infrastructure for memory-less encryption,” in 29th
Annual Computer Security Applications Conference
(ACSAC), 2013.
[30] L. Guan, J. Lin, B. Luo, and J. Jing, “Copker: Com-
puting with private keys without RAM,” in 21st ISOC
Network and Distributed System Security Symposium
(NDSS), 2014.
[31] G. Guninski, “Linux kernel 2.6 fun, Windoze is a
joke,” 2005, http://www.guninski.com/where do you
want billg to go today 3.html.
[32] J. Halderman, S. Schoen, N. Heninger et al., “Lest we
remember: Cold boot attacks on encryption keys,” in
17th USENIX Security Symposium, 2008.
[33] L. Hammond, V. Wong, M. Chen et al., “Transac-
tional memory coherence and consistency,” in ACM
1717
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:06:11 UTC from IEEE Xplore.  Restrictions apply. 
SIGARCH Computer Architecture News, vol. 32, 2004,
p. 102.
[34] T. Harris, S. Marlow, S. Peyton-Jones, and M. Herli-
hy, “Composable memory transactions,” in 10th ACM
SIGPLAN Symposium on Principles and Practice of
Parallel Programming (PPoPP), 2005, pp. 48–60.
[35] K. Harrison and S. Xu, “Protecting cryptographic keys
from memory disclosure attacks,” in 37th IEEE/IFIP
International Conference on Dependable Systems and
Networks (DSN), 2007, pp. 137–143.
[36] N. Heninger and A. Feldman, “AESKeyFinder,” https:
//citp.princeton.edu/research/memory/code/.
[37] M. Herlihy and J. Moss, “Transactional memory: Ar-
chitectural support for lock-free data structures,” in
20th International Symposium on Computer Architec-
ture (ISCA), 1993, pp. 289–300.
[38] O. Hofmann, A. Dunn, S. Kim et al., “Ensuring
operating system kernel integrity with OSck,” in 16th
International Conference on Architectural Support for
Programming Languages and Operating Systems (AS-
PLOS), 2011, pp. 279–290.
[39] Intel Corporation, “Intel 64 and IA-32 architectures
optimization reference manual.”
[40] ——, “Chapter 8: Intel transactional memory synchro-
nization extensions,” in Intel Architecture Instruction
Set Extensions Programming Reference, 2012.
[41] ——, “Intel advanced encryption standard (AES) new
instructions set (revision 3.01),” 2012.
[42] ——, “Desktop 4th generation Intel Core processor
family, speciﬁcation update,” 2014.
Core
“Intel
[43] ——,
2014,
Intel-Core-M-5Y71-Processor-4M-Cache-up-to-2
90-GHz.
processor,”
http://ark.intel.com/products/84672/
M-5Y71
[44] ——, “Intel Software Guard Extensions Program-
ming Reference,” 2014, https://software.intel.com/sites/
default/ﬁles/managed/48/88/329298-002.pdf.
[45] C. Jacobi, T. Slegel, and D. Greiner, “Transaction-
al memory architecture and implementation for IBM
System Z,” in 45th Annual IEEE/ACM International
Symposium on Microarchitecture (MICRO), 2012, pp.
25–36.
[46] T. Karnagel, R. Dementiev, R. Rajwar et al., “Improv-
ing in-memory database index performance with Intel
transactional synchronization extensions,” in 20th IEEE
Symposium on High Performance Computer Architec-
ture (HPCA), 2014, pp. 476–487.
[47] V. Kemerlis, G. Portokalidis, and A. Keromyti, “k-
Guard: Lightweight kernel protection against return-
to-user attacks,” in 21st USENIX Security Symposium,
2012.
[48] V. Kolontsov, “WU-FTPD core dump vulnerability (the
old patch doesn’t work),” 1997, http://insecure.org/
sploits/ftpd.pasv.html.
[49] S. Kumar, M. Chu, C. Hughes et al., “Hybrid trans-
actional memory,” in 11th ACM SIGPLAN Symposium
on Principles and Practice of Parallel Programming
(PPoPP), 2006, pp. 209–220.
[50] M. Lafon and R. Francoise, “CAN-2005-0400: Infor-
mation leak in the Linux kernel ext2 implementation,”
2005, http://www.securiteam.com.
[51] Y. Li, J. McCune, and A. Perrig, “VIPER: Verifying
the integrity of peripherals’ ﬁrmware,” in 18th ACM
Conference on Computer and Communications Securi-
ty (CCS), 2011, pp. 3–16.
[52] Y. Liu, Y. Xia, H. Guan et al., “Concurrent and
consistent virtual machine introspection with hardware
transactional memory,” in 20th IEEE Symposium on
High Performance Computer Architecture (HPCA),
2014, pp. 416–427.
[53] D. Lupei, B. Simion, D. Pinto et al., “Transaction-
al memory support for scalable and transparent par-
allelization of multiplayer games,” in 5th European
Conference on Computer Systems (EuroSys), 2010, pp.
41–54.
[54] K. Moore, J. Bobba, M. Moravan et al., “LogTM: Log-
based transactional memory,” in 12th IEEE Symposium
on High Performance Computer Architecture (HPCA),
2006, pp. 254–265.
[55] T. M¨uller, A. Dewald, and F. Freiling, “AESSE: A
cold-boot resistant implementation of AES,” in 3rd
European Workshop on System Security (EuroSec),
2010, pp. 42–47.
[56] T. M¨uller, F. Freiling, and A. Dewald, “TRESOR runs
encryption securely outside RAM,” in 20th USENIX
Security Symposium, 2011.
[57] National Vulnerability Database, “CVE-2014-0069,”
http://web.nvd.nist.gov/view/vuln/detail?vulnId=
CVE-2014-0069.
[58] ——, “CVE-2014-0160,” http://web.nvd.nist.gov/view/
vuln/detail?vulnId=CVE-2014-0160.
[59] ——, “CVE-2014-4653,” http://web.nvd.nist.gov/view/
vuln/detail?vulnId=CVE-2014-4653.
[60] Y. Ni, A. Welc, A.-R. Adl-Tabatabai et al., “Design and
implementation of transactional constructs for C/C++,”
in 23rd ACM SIGPLAN Conference on Object-Oriented
Programming Systems Languages and Applications
(OOPSLA), 2008, pp. 195–212.
[61] T. Parker and S. Xu, “A method for safekeeping
cryptographic keys from memory disclosure attacks,”
in 1st International Conference on Trusted Systems
(INTRUST), 2010, pp. 39–59.
[62] E. Pattuk, M. Kantarcioglu, Z. Lin, and H. Ulusoy,
“Preventing cryptographic key leakage in cloud virtual
machines,” in 23rd USENIX Security Symposium, 2014.
[63] B. Payne, M. Carbone, M. Sharif, and W. Lee, “Lares:
An architecture for secure active monitoring using
virtualization,” in 29th IEEE Symposium on Security
1818
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:06:11 UTC from IEEE Xplore.  Restrictions apply. 
before
deﬁnitions/226.html.
release,”
2013,
https://cwe.mitre.org/data/
[79] Unknown author, “Solaris (and others) ftpd core dump
bug,” 1996, http://insecure.org/sploits/ftpd.pasv.html.
[80] P. van Dijk, “Coredump hole in imapd and ipop3d in
slackware 3.4,” 1998, http://www.insecure.org/sploits/
slackware.ipop.imap.core.html.
[81] G. Vasiliadis, E. Athanasopoulos, M. Polychronakis,
and S. Ioannidis, “PixelVault: Using GPUs for securing
cryptographic operations,” in 21st ACM Conference on
Computer and Communications Security (CCS), 2014,
pp. 1131–1142.
[82] A. Wang, M. Gaudet, P. Wu et al., “Evaluation of Blue
Gene/Q hardware support for transactional memories,”
in 21st International Conference on Parallel Architec-
tures and Compilation Techniques (PACT), 2012, pp.
127–136.
[83] R. Wartell, V. Mohan, K. Hamlen, and Z. Lin, “Bina-
ry stirring: Self-randomizing instruction addresses of
legacy x86 binary code,” in 19th ACM Conference on
Computer and Communications Security (CCS), 2012,
pp. 157–168.
[84] R. Yoo, C. Hughes, K. Lai, and R. Rajwar, “Perfor-
mance evaluation of Intel transactional synchronization
extensions for high-performance computing,” in Inter-
national Conference for High Performance Computing,
Networking, Storage and Analysis (SC), 2013.
[85] F. Zhang, “IOCheck: A framework to enhance the
security of I/O devices at runtime,” in the International
Workshop, in conjunction with 43rd IEEE/IFIP Con-
ference on Dependable Systems and Networks (DSN),
2013, pp. 1–4.
[86] Y. Zhang, A. Juels, M. Reiter, and T. Ristenpart,
“Cross-VM side channels and their use to extract
private keys,” in 19th ACM Conference on Computer
and Communications Security (CCS), 2012, pp. 305–
316.
[87] F. Zyulkyarov, V. Gajinov, O. Unsal et al., “Atomic
Quake: Using transactional memory in an interactive
multiplayer game server,” in 14th ACM SIGPLAN
Symposium on Principles and Practice of Parallel
Programming (PPoPP), 2009, pp. 25–34.
and Privacy (S&P), 2008, pp. 233–247.
[64] N. Petroni and M. Hicks, “Automated detection of
persistent kernel control-ﬂow attacks,” in 14th ACM
Conference on Computer and Communications Securi-
ty (CCS), 2007, pp. 103–115.
[65] T. Pettersson, “Cryptographic key recovery from Lin-
ux memory dumps,” in Chaos Communication Camp,
2007.
[66] Primate Labs, “Geekbench 3,” http://www.primatelabs.
com/geekbench/.
[67] Roberto A. Vitillo, “Linux proﬁling with performance
counters,” https://perf.wiki.kernel.org/index.php/Main
Page.
[68] D. Samyde, S. Skorobogatov, R. Anderson, and J.-J.
Quisquater, “On a new way to read data from memory,”
in 1st IEEE Security in Storage Workshop, 2002, pp.
65–69.
[69] M. Seltzer, Y. Endo, C. Small, and K. Smith, “Dealing
with disaster: Surviving misbehaved kernel extension-
s,” in 2nd USENIX Symposium on Operating Systems
Design and Implementation (OSDI), 1996, pp. 213–
227.
[70] A. Seshadri, M. Luk, N. Qu, and A. Perrig, “SecVisor:
A tiny hypervisor to provide lifetime kernel code
integrity for commodity OSes,” in ACM Symposium on
Operating Systems Principles (SOSP), 2007, pp. 335–
350.
[71] N. Shavit and D. Touitou, “Software transactional
memory,” Distributed Computing, vol. 10, no. 2, pp.
99–116, 1997.
[72] S. Sidiroglou and A. Keromytis, “Execution trans-
actions for defending against software failures: Use
and evaluation,” International Journal of Information
Security, vol. 5, no. 2, pp. 77–91, 2006.
[73] P. Simmons, “Security through Amnesia: A software-
based solution to the cold boot attack on disk encryp-
tion,” in 27th Annual Computer Security Applications
Conference (ACSAC), 2011, pp. 73–82.
[74] sp00n, “Security Dynamics FTP server core problem,”
http://insecure.org/sploits/solaris.secdynamics.
1997,
core.html.
[75] P. Stewin,
for
“A primitive
revealing stealthy
peripheral-based attacks on the computing platform’s
main memory,” in 16th International Symposium on
Research in Attacks, Intrusions and Defenses (RAID),
2013, pp. 1–20.
[76] P. Stewin and I. Bystrov, “Understanding DMA mal-
ware,” in 9th Conference on Detection of Intrusions
and Malware & Vulnerability Assessment (DIMVA),
2013, pp. 21–41.
[77] The MITRE Corporation, “CWE-212: Improper cross-
boundary removal of sensitive data,” 2013, https://cwe.
mitre.org/data/deﬁnitions/212.html.
[78] ——, “CWE-226: Sensitive information uncleared
1919
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:06:11 UTC from IEEE Xplore.  Restrictions apply.