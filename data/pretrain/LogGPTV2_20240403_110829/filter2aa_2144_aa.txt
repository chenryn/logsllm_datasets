对⼀些基于chrome的dom-xss插件学习,有 dom-based-xss-finder 和 XssSniper ，看看它们的原理是什么。
mainfest.json
对于chrome来说，mainfest.json包含了整个插件各种配置，在配置⽂件中，可以找到插件⼀些启动的源代码。
⼏个⽐较重要的⼏个字段
browser_action
这个字段主要负责扩展图标点击后的弹出内容，⼀般为popup.html
content_scripts
matches 代表scripts插⼊的时机，默认为document_idle，代表⻚⾯空闲时
js 代表插⼊的scripts⽂件路径
run_at 定义了哪些⻚⾯需要插⼊scripts
permissions
这个字段定义了插件的权限，其中包括从浏览器tab、历史纪录、cookie、⻚⾯数据等多个维度的权限
定义
content_security_policy
这个字段定义了插件⻚⾯的CSP
但这个字段不影响content_scripts⾥的脚本
background
这个字段定义插件的后台⻚⾯，这个⻚⾯在默认设置下是在后台持续运⾏的，只随浏览器的开启和关闭
persistent 定义了后台⻚⾯对应的路径
page 定义了后台的html⻚⾯
scripts 当值为false时，background的⻚⾯不会在后台⼀直运⾏
XssSnpier
来⾃360 0kee的插件，下载地址：https://0kee.360.cn/domXss/
出来好早了，我试了下似乎插件有错误还运⾏不了，就直接看相关代码吧。
mainfest.json
{
  "manifest_version":2,
  "name": "XssSniper",  
  "version": "1.1.33",  
  "description": "Find XSS and SOME",  
  "content_scripts": [
    {
  "all_frames": true,
              "matches": [
                "http://*/*",
                "https://*/*",
                "file://*/*"
            ],
  "js": ["js/insert.js"],
  "run_at": "document_start"
   }  
  ],
  "background": {
      "scripts": [ "js/background.js" ],
      "persistent":true
  },
  "permissions": [
    "webRequest",
    "webRequestBlocking",
    "*://*/",
    "tabs",
    "notifications"
  ],
  "browser_action": {
    "default_icon": {
     "19": "img/init_19.png",
     "38": "img/init_38.png"
  },
  "default_popup": "popup.html",
  "default_title": "Open the pannel."
  },
 "icons": {
    "128": "img/logo_128.png",
    "16": "img/error_16.png",
    "48": "img/logo_48.png"
 },
 "incognito": "spanning",
 "content_security_policy": "script-src 'self' 'unsafe-eval'; object-src 'self'"
}
后台执⾏
background.js
去掉http返回头中的 x-frame-options 、 X-XSS-Protection
对于jsonp的内容，会⾃动检测xss，将参数 = 替换为payload
注⼊js
insert.js
先看下jsonp的检测
jsonp = jsonp.replace(/\=/ig,"=tsst");
httpRequest(jsonp,function(s){
  if (s.indexOf("tsst") > -1) {
    notify("Jsonp可能存在XSS",jsonp);
    sendResponse("xss:"+jsonp);
  }
})
MutationObserver 是什么api，查了⼀下，是⼀个监视函数，当dom有变动时候，会触发回调函数。
https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver/MutationObserver
它会监视所有新创建的script标签，判断src的内容是否含有 ? 在做进⼀步判断，进⼀步判断是什么呢，就是正则匹
配内容是否像jsonp，提出报警，然后就是替换参数内容看是否存在xss。
监听事件错误
有的xss能够使⽤，但是需要⼀些特殊构造，⼀般的payload打⼊可能只会报错，这时候可以在整个⻚⾯加载前提
前注⼊好监视错误的js，xsssnpier的思想是这种报错可能也有帮助。
xsssnpier的代码如下
window.addEventListener('error', function(e) {
    if (top == this) {
      window['vultest_frameerr'] = "";
      console.log("self_err_report:"+e.message);
Fuzz
通过对 ? 、 # 进⾏分割取值，组合⼀个新的url，最后调⽤⼀个函数 xss_testfrm
      //top.err_self(e);
      window['vultest_selferr'] =  "";
      window['vultest_selferr'] = window['vultest_selferr'] + "|" +e.message;
    }
    else {
      //top.err_report(e,location.href);
      if (!window['vultest_frameerr'])
        window['vultest_frameerr'] = "";
      window['vultest_frameerr'] = window['vultest_frameerr']+"|"+e.message;
      //console.log("frame_err_report:"+ window['vultest_frameerr']);
    }
  });
xss_testfrm是通过创建⼀个隐藏iframe来执⾏payload。如果使⽤的是alert函数的payload话，成功执⾏会⾃动弹
窗。
最后
因为插件⽆法运⾏了，不知道是它是怎么确定是否存在xss漏洞的，可能出现漏洞窗⼝就⾃动弹个窗？
可以提前对⼀些payload函数hook来监视成功的情况。插件通过监控error来半⾃动审计的⽅案也值得学习⼀下，
fuzz的话有针对性的⽐较好，盲⽬的fuzz成效不⼤，可以先发⼀个探测的⽆害payload，知道payload回显的位置
后再针对性进⾏fuzz。
dom-based-xss-finder
这是在chrome商店搜索xss看到的插件，也找到了它的源码：https://github.com/AsaiKen/dom-based-xss-finde
r
粗看源码发现代码是通过注⼊js，来hook含有对sink敏感触发点和source触发来源的函数，同时还使⽤了 babel
对代码进⾏了语法树解析和替换，所以就想看看它是如何实现的。
插件使⽤
可以直接在Chrome store搜索dom-based-xss-finder，或者下载源码使⽤，我是下载源码，⼿动编译的，因为后
⾯还要进⾏调试和阅读代码，有源代码更好⼀点。
⼀个测试⽹⻚
function xss_testfrm(s){
      try {
        var xss_frm = document.createElement("iframe");
        document.body.appendChild(xss_frm);
        xss_frm.style.display="none";
        xss_frm.id = unescape(s);
        xss_frm.src = s;
      }catch(e) {
        console.log(e);
      }
    }
git clone https://github.com/AsaiKen/dom-based-xss-finder # 下载代码
npm install # 安装依赖
npm run dev # 调试使⽤，会在build⽂件夹⽣成chrome插件所需要的⽂件，在chrome设置插件位置为build⽬
录即可。
python开启服务器
开启插件后浏览⽹⻚ http://127.0.0.1/test.html#hacking8
已经发现了注⼊点，详情显示出了source 和 sink，还有调⽤堆栈。
点击 Check and Generate PoC ，插件就会使⽤fuzz的⽅式来爆破poc，最后会得到正确弹窗xss的payload结果
  dom xss tester
hello 
python -m SimpleHTTPServer 888
原理
很⽜逼的插件，看看它的原理吧
以前接触过的⾃动化查找dom-xss，⼤部分是基于静态规则进⾏识别的。
如 https://paper.seebug.org/1078/ 代码分析引擎 CodeQL 初体验，就使⽤了CodeQL来进⾏dom-xss的搜索，但
是这是静态分析，以前研究过⼀些基于语法树来静态分析js的代码引擎，但是难点就在于怎么寻找从sink到source
的数据，以及它们直接如果有分割成多个变量传递的情况应该怎么办。
dom-based-xss-finder是动态的⽅案，通过提前对⼀些js敏感的源和函数进⾏hook，并打上标记，如果源和敏感
函数最后都是同⼀个标记，就说明它们可以组合成⼀个dom-xss。
mainfest.json
它的mainfest.json内容
{
  "name": "DOM based XSS finder",
  "version": "1.0.0",
  "manifest_version": 2,
  "description": "A Chrome extension for finding DOM based XSS vulnerabilities",
  "permissions": [
    "storage",
    "webNavigation",
    "tabs",
    "*://*/",
    "debugger",
    "unlimitedStorage"
  ],
  "icons" : {
当开启了dom-xss寻找之后即调⽤了 src/background/index.js 中start函数
跟进
会注⼊⼀个js到当前⽹⻚(在所有加载之前注⼊),精简版代码
通过调⽤chrome.debugger来实现在每个新标签中注⼊js。 https://developer.chrome.com/docs/extensions/ref
erence/debugger/
    "16": "images/app_icon_16.png",
    "128": "images/app_icon_128.png"
  },
  "content_security_policy": "script-src 'self' 'unsafe-eval'; object-src 'self'",
  "browser_action": {
    "default_icon": "images/icon-black.png",
    "default_title": "DOM based XSS finder",
    "default_popup": "popup.html"
  },
  "background": {
    "scripts": [
      "background.js"
    ],
    "persistent": true
  },
  "options_ui": {
    "page": "options.html",
    "open_in_tab": true
  }
}
async start() {
    await this.interceptor.start();
    chrome.browserAction.setIcon({ path: './images/icon-green.png' });
    chrome.browserAction.setBadgeBackgroundColor({ color: '#FF0000' });
    await this.setCountBadge();
    console.debug('start');
  }
await this.interceptor.start();
具体注⼊代码的作⽤下⾯再说。继续跟着这个函数，还有⼀些操作。
⽹络拦截
有关⽹络相关的协议可以看chromedevtools：https://chromedevtools.github.io/devtools-protocol/tot/Networ
k/
接下来使⽤ Network.requestIntercepted  ⽤来拦截修改请求消息。
主要功能是拦截script，document类型的⽂本，获取js代码信息，并⽤ babel 进⾏ast语法树分析，进⾏⼀些代码
转换，返回转换后的js代码。
if (PRELOAD_SOURCE === null) {
  const url = chrome.runtime.getURL("preload.js"); # 获取插件⽬录下的preload.js
  const response = await fetch(url);
  PRELOAD_SOURCE = await response.text();
}
await debugger_.sendCommand('Page.enable');
await debugger_.sendCommand('Page.addScriptToEvaluateOnNewDocument', { source: 
PRELOAD_SOURCE });
await debugger_.sendCommand('Network.enable'); // 启⽤⽹络功能
await debugger_.sendCommand('Network.setRequestInterception', {
  patterns: [
    {
      urlPattern: '*',
      resourceType: 'Document',
      interceptionStage: 'HeadersReceived'
    },
    {
      urlPattern: '*',
      resourceType: 'Script',
      interceptionStage: 'HeadersReceived'
    }
  ],
}); // 设置请求以拦截匹配提供的模式和可选的资源类型
await debugger_.sendCommand('Network.clearBrowserCache'); // 清除⽹络缓存
await debugger_.on('Network.requestIntercepted', async({ interceptionId, resourceType, 
responseStatusCode, responseHeaders, request }) => {
  if (responseStatusCode === 200 && ['Document', 'Script'].includes(resourceType)
      && (request.url.startsWith('http://') || request.url.startsWith('https://'))) {
    // OK
  } else {
    await debugger_.sendCommand('Network.continueInterceptedRequest', { interceptionId 
});
    return;
  }
  if (resourceType === 'Script' && this.jsCache[request.url]) {
    // console.debug('cache hit', request.url);
    const { start, end, map, rawResponse, body } = this.jsCache[request.url];
    this.setSourceMap(debugger_.tabId, request.url, start, end, map);
    this.setBodyMap(debugger_.tabId, request.url, body);
    await debugger_.sendCommand('Network.continueInterceptedRequest', {
      interceptionId,
      rawResponse,
    });
    return;
  }
  let interceptTime = Date.now();
  const { body, base64Encoded } = await debugger_.sendCommand(
    'Network.getResponseBodyForInterception',
    { interceptionId },
  );
  const headerLines = [];
  for (const key of Object.keys(responseHeaders)) {
    if (key.toLowerCase() === 'content-type') {
      if (responseHeaders[key].toLowerCase().includes('text') || 
responseHeaders[key].toLowerCase().includes('javascript')) {
        // OK
      } else {
        // not text
        await debugger_.sendCommand('Network.continueInterceptedRequest', { 
interceptionId });
        return;
      }
    }
    headerLines.push(`${key}: ${responseHeaders[key]}`);
  }
  let originalBodyStr;
  if (base64Encoded) {
    // assume utf8
    originalBodyStr = Buffer.from(body, 'base64').toString();
  } else {
    originalBodyStr = body;
  }
  let encoding = null;
  if (base64Encoded) {
    for (const key of Object.keys(responseHeaders)) {
      const value = responseHeaders[key];
      if (key.toLowerCase() === 'content-type' && value.includes('charset=')) {
        const m = value.match(/charset=['"]?([\w-]+)/);
        if (m) {
          encoding = m[1].trim();
          // console.debug('encoding', encoding);
        }
      }
    }
    if (resourceType === 'Document') {
      if (originalBodyStr.includes(`charset=`)) {
        const m = originalBodyStr.match(/charset=['"]?([\w-]+)/);
        if (m) {
          encoding = m[1].trim();
          // console.debug('encoding', encoding);
        }
      }
    }
    if (!encoding) {
      // auto-detect
      encoding = Encoding.detect(Buffer.from(body, 'base64'));
      // console.debug('encoding', encoding);
    }
    if (encoding) {
      originalBodyStr = iconv.decode(Buffer.from(body, 'base64'), encoding);
    }
  }
  // console.debug('originalBodyStr', originalBodyStr);
  let newBodyStr = null;
  let start = null;
  let end = null;
  let map = null;
  let convertTime = Date.now();
  if (resourceType === 'Document') {
    newBodyStr = originalBodyStr;
    const scriptTagStrs = originalBodyStr.match(/]*?>[\s\S]+?/ig);
    for (const scriptTagStr of scriptTagStrs || []) {
      const originalCode = scriptTagStr.match(/]*?>(?:\s*\s*)?/)[1];
      const converted = convert(originalCode);
      const code = converted.code;
      start = newBodyStr.indexOf(originalCode);
      end = start + code.length + 1;
      map = converted.map;
      newBodyStr = newBodyStr.replace(originalCode, code);
      this.setSourceMap(debugger_.tabId, request.url, start, end, map);
    }
  } else if (resourceType === 'Script') {
    const converted = convert(originalBodyStr);
    const code = converted.code;
    newBodyStr = code;
    start = 0;
    end = code.length + 1;
AST语法树转化
babel本身就是⼀个js语法的编译器，在⽹络拦截中插件会拦截JavaScript代码，并对代码进⾏语法转换。
语法转换的作⽤有⼏点
1. ⼀个是可以将所有的代码和表达式重新组合成“函数”的形式，⽽我们是可以控制这些函数的，意味着可以通过
js函数来更灵活的控制js代码。
2. 通过"函数"控制的⽅式就能很容易明⽩⼀个变量的⾛向，明⽩了变量⾛向就能进⾏污点分析，通过污点分析直
接就可以知道从source到sink的变化过程。
会将ast的结构数据转为以下函数
    map = converted.map;
    this.setSourceMap(debugger_.tabId, request.url, start, end, map);
  } else {
    throw new Error();
  }
  // console.debug('newBodyStr', newBodyStr);
  convertTime = Date.now() - convertTime;
  console.debug(request.url, 'convert', `${convertTime} ms`);
  let rawResponse;
  if (encoding) {
    const bodyBuf = iconv.encode(newBodyStr, encoding);
    rawResponse = Buffer.concat([Buffer.from(`HTTP/1.1 200 
OK\r\n${headerLines.join('\r\n')}\r\n\r\n`), bodyBuf]).toString('base64');
  } else {
    rawResponse = Buffer.from(`HTTP/1.1 200 
OK\r\n${headerLines.join('\r\n')}\r\n\r\n${newBodyStr}`).toString('base64');
  }
  if (resourceType === 'Script') {
    this.jsCache[request.url] = { start, end, map, rawResponse, body: newBodyStr };
    setTimeout(() => delete this.jsCache[request.url], 1000 * 60 * 60 * 24);
  }
  this.setBodyMap(debugger_.tabId, request.url, newBodyStr);
  await debugger_.sendCommand('Network.continueInterceptedRequest', {
    interceptionId,
    rawResponse,
  });
  interceptTime = Date.now() - interceptTime;
  console.debug(request.url, 'intercept', `${interceptTime} ms`);
});
}
进⾏语法解析的最终⽬的就是获取可控的source以及相关跟踪的数据流，通过获取类似 document.href 的结构，
对这个结构进⾏标记，并根据语法的左右结构，对左右的数据进⾏标记，就这样⼀直标记直⾄遇到敏感的执⾏函数
sink。
如原本的script是
最终呈现的代码是这样的