these parameters. The two most relevant parts of the round
transformation are the SboxLayer and the LinearLayer.
SboxLayer is an m-fold parallel application of the same 3-
bit Sbox (of multiplicative depth 1) on the ﬁrst 3m bits of
the state. If n > 3m then for the remaining n− 3m bits, the
SboxLayer is the identity. LinearLayer is the multiplica-
tion in F2 of the state with a predetermined dense randomly
chosen invertible binary n × n matrix that is diﬀerent for
every round.
Using the most recent v2[3] formula for r, we need at
least 13 rounds to achieve a security comparable to AES as
a PRF, i.e. k = 128 and d = 64. Using n = 256, the minimal
number Sboxes m for which this is true turns out to be 49.
2.2.2 Computing FLowMC in MPC
To evaluate LowMC in MPC, we consider two approaches.
In the ﬁrst method, denoted FLowMC(vector), we work over
F
2128 and compute the matrix multiplications and XOR op-
erations by parallelizing over 128-bit vectors. Speciﬁcally,
each column Mi of the n × n matrix M is packed into F
2128
elements; to compute the product M [x] we take the inner
product of all columns with [x]. For n = 256, this requires
512 XORs and 512 local ﬁnite ﬁeld multiplications. How-
ever, we then need to switch back to F2 to evaluate the Sbox
(with three F2 multiplications), which requires bit decompo-
sition, adding one round of interaction for every round of the
cipher.
In the second approach, denoted FLowMC(M4R), we use
the “Method of Four Russians” [1] to perform each matrix
multiplication in O(n2/ log n) bit operations. We do not
parallelize the computation by packing bits into vectors, so
this actually results in a higher computation cost than the
vector method, but avoids the need for bit decomposition in
each round.
In both methods, the total number of multiplications over
F2 is 3· m· r. The vector approach requires 256· r additional
random bits, and also 2r rounds of communication, instead
of r rounds for M4R.
2.2.3 Performance
With parameters n = 256, m = 49, r = 13, we obtained a
latency of 4ms and a throughput of almost 600 blocks per
second.
As for AES, the need to convert from a Fp representation
to a bit-oriented representation for application of LowMC
is likely to dominate the run-time for the actual PRF eval-
uation, making LowMC unsuitable for the applications we
discussed at the beginning.
3. NAOR–REINGOLD PRF
In this section we describe the Naor-Reingold PRF, orig-
inally presented in [38]. We then go on to describe how
it can be eﬃciently implemented in a secret sharing based
MPC system.
3.1 FNR Deﬁnition
Let G = (cid:104)g(cid:105) be a multiplicatively written group of prime
order p in which DDH is hard, and encode(·) be a hash
function that maps group elements into elements of Fp. For
a message x = (x1, . . . , xn) ∈ {0, 1}n, the Naor-Reingold
PRF [38] is deﬁned by:
FNR(n)(k, x) = encode(gk0·(cid:81)n
i=1 k
xi
i )
where k = (k0, . . . , kn) ∈ Fn+1
p
is the key.
In practice, we choose G to be a 256-bit elliptic curve
group over the NIST curve P-256, so require an MPC pro-
tocol for Fp with a 256-bit prime p.
3.2 Public Output Exponentiation Protocol
The main ingredient of our method to evaluate FNR in
MPC, when the key and message are secret-shared over Fp,
is an eﬃcient protocol for publicly computing gs, for some
secret value s ∈ Fp. The protocol, shown in Figure 4, uses
any arithmetic MPC protocol based on linear secret sharing
over Fp. This is modeled for the case of additive secret
sharing by the Share command of the FABB functionality,
which produces random shares of secret values.
Given additive shares si ∈ Fp, each party Pi ﬁrst broad-
casts gsi , so the result y = (cid:81) gsi can be computed. To
obtain active security, we must ensure that each party used
the correct value of si. We do this by computing an addi-
tional public exponentiation of gt, where t = r · s for some
random, secret value r. This serves as a one-time MAC on
s, which can then be veriﬁed by opening r and checking
that gt = yr. If an adversary cheats then passing the check
essentially requires guessing the value of r, so occurs only
probability 1/p.
Note that the functionality FABB-Exp (Figure 5) models an
unfair computation, whereby the adversary ﬁrst learns the
output, and can then decide whether to give this to the
honest parties or not. This is because in the protocol, they
can always simply stop sending messages and abort after
learning y.
Theorem 1. The protocol ΠExp securely computes the func-
tionality FABB-Exp in the FABB-hybrid model.
Proof. We construct a simulator S, which interacts with any
adversary A (who controls the corrupt parties {Pi : i ∈ A})
and the ideal functionality FABB-Exp, such that no environ-
ment can distinguish between an interaction with S and a
real execution of the protocol ΠExp.
• In the ﬁrst round S receives si for i ∈ A, as the cor-
rupt parties’ inputs to the FABB-Share command. S calls
FABB-Exp with (exp, [s]) and receives y = gs. Then S
R← Fp and sets yi = gsi for all i /∈ A. S
samples si
−1
,
j(cid:54)=i y
j
modiﬁes one honest party’s share yi to gs(cid:81)
Protocol ΠExp([s])
1. The parties call FABB with command (Share, [s]), so
that each party Pi obtains an additive share si ∈ Fp
4. Take a random shared [r], and compute [t] = [r] · [s]
5. Call FABB with (Share, [t]) so that each Pi obtains ti.
2. Each party Pi broadcasts yi = gsi
3. Compute y =(cid:81)
6. Open [r] and check that(cid:81)
Broadcast zi = gti
i yi
i zi = yr
7. Output y
Figure 4: Securely computing a public exponentia-
tion
Functionality FABB-Exp
Let G = (cid:104)g(cid:105) be a group of prime order p. This functionality has
all of the features of FABB (running in Fp), plus the following
command:
PubExp: On receiving (exp, [s]) from all parties, where s
is stored in memory, retrieve s, then send y = gs to
the adversary and wait for a response. If the adversary
responds with Deliver then send y to all parties. Oth-
erwise output ⊥ to all parties.
Figure 5: Ideal functionality for public exponentia-
tion
then sends yi for all i /∈ A to the adversary and gets
back the corrupted parties’ response y∗
i , for i ∈ A.
• Proceed similarly to the previous step: S samples ri
R←
i zi = yr. Sends zi to A on
Fp, sets zi = yri
behalf of the honest parties. Receives back courrupted
parties z∗
i .
i such that(cid:81)
i ri to the adversary. S performs the
i from A and the honest zi. If
checking phase with z∗
the check passes send Deliver to FABB-Exp.
• Sends r ← (cid:80)
The indistinguishability argument follows from the fact
that all broadcasted values gxi by S and the real protocol
ΠExp have uniform distribution over Fp with output in G
with respect to(cid:81)
i gxi = gx.
Suppose a corrupt party Pj sends y∗
j such that (cid:81)
Correctness is straightforward if all parties follow the pro-
tocol. An adversary A wins if it changes the distribution
of the functionality to output Deliver. Alas, this happens
with negligible probability:
j instead of yj = gsj .
j = gsj · e, for some error e (cid:54)= 1 ∈ G, and
We can write y∗
so y = gs · e. Then the check passes if A can come up with
i zi = grs · er. Writing z∗
j = zj · f , this
z∗
is equivalent to coming up with f ∈ G such that f = er.
Since r is uniformly random and unknown to the adversary
at the time of choosing e and f , passing this check can only
happen with probability 1/|G|. Note that this requires G to
be of prime order, so that e (which is adversarially chosen)
is always a generator of G.
More Efﬁcient Protocol based on SPDZ.
When using the SPDZ MPC protocol with the secret-shared
MAC representation from [25], we can save performing the
multiplication [t] = [r] · [s]. Instead, we can take the shared
MAC value [m] (on the shared s), which satisﬁes m = s · α
for a shared MAC key α, and use [m] and [α] in place of
[t] and [r]. However, in this case α cannot be made public,
otherwise all future MACs could be forged. Instead, steps
4–6 are replaced with:
• Each party commits to zi = yαi · g−mi .
• All parties open their commitments and check that
(cid:81)
i zi = 1.
If the parties are honest, we have zi = gs·αi−mi , so the check
will pass. Since in SPDZ, the honest parties’ MAC shares mi
are uniformly random, the shares of αi are perfectly masked
by the g−mi factor in zi, so no information on α is leaked.
The main diﬀerence here is that the parties must commit to
the zi shares before opening, to prevent a rushing adversary
from waiting and forcing the product to always be 1. The
number of rounds and exponentiations is the same, but one
multiplication is saved compared with the previous protocol.
3.3 Secure Computation of Naor-Reingold
Protocol ΠNR
KeyGen: Call FABB.Random to generate n + 1 random keys
[k0] . . . [kn].
Eval: To evaluate FNR(n)(k, x) on input [x] with key [k]:
1. Bit decompose [x] into [x1] . . . [xn].
2. Compute [s] = [k0] ·(cid:81)n
i=1([ki][xi] + (1 − [xi]) (see
text for details).
3. Call FABB-Exp on input [s].
Figure 6: Computing FNR(n)(k, x)
Given the protocol for public exponentiation, it is straight-
forward to evaluate the Naor-Reingold PRF with public
output when given a bit-decomposed, secret-shared input
[x1], . . . , [xn] and key [k0], . . . , [kn]. First compute
[s] = [k0] · n(cid:89)
([xi] · [ki] + (1 − [xi]))
i=1
using FABB, and then use ΠExp to obtain gs.
The product can be computed in (cid:100)log2 n + 1(cid:101) rounds us-
ing a standard binary tree evaluation. Alternatively, we can
obtain a constant (4) rounds protocol using the preﬁx mul-
tiplication protocol of Catrina and de Hoogh [15], (which is
an optimized variant of the trick of Bar-Ilan and Beaver [5])
at the expense of 2(n + 1) additional multiplications.
Security of the ΠNR protocol is straightforward, since there
is no interaction outside of the arithmetic black box func-
tionality.
Handling Input in Fp.
If the input is given as a ﬁeld element rather than in bit-
decomposed form, then we must ﬁrst run a bit decomposi-
tion protocol, such as that of Catrina and de Hoogh [15] or
Damg˚ard et al. [21]. The latter works for arbitrary values
of x, whilst the former is more eﬃcient, but requires x is (cid:96)
bits long, where p > 2(cid:96)+κ for statistical security κ.
Complexity.
For the logarithmic rounds variant based on SPDZ, with
n-bit input that is already bit decomposed, the protocol re-
quires 2n multiplications of secret values and three exponen-
tations, in a total of (cid:100)log2 n + 1(cid:101) + 3 rounds. The constant
rounds variant takes 4n+2 multiplications in 7 rounds. Note
that there is a higher cost for the secure multiplications, as
we require an MPC protocol operating over Fp for a 256-
bit prime p (for 128-bit security), whereas our other PRF
protocols only require MPC operations in 128-bit ﬁelds.
3.4 Performance
The main advantage of this PRF is the small number of
rounds required, which leads to a low latency in our bench-
marks (4.4ms over LAN). However, the high computation
cost (for EC operations) slows down performance and re-
sults in a low throughput. We found that with a 256-bit
prime p and n = 128, the logarithmic rounds variant out-
performed the constant rounds protocol in all measures in a
LAN environment. In a WAN setting, the constant round
protocol achieves a lower latency, but is worse for through-
put and preprocessing time.
4. PRF FROM THE LEGENDRE SYMBOL
In this section we consider a PRF based on the Legen-
dre symbol, which to the best of our knowledge was ﬁrst
described in [44]. Whilst this PRF is very ineﬃcient when
applied to cleartext data, we show that with secret-shared
data in the MPC setting it allows for a very simple protocol.
4.1 FLeg Deﬁnition
In 1988, Damg˚ard proposed using the sequence of Legen-
dre symbols with respect to a large prime p as a pseudoran-
dom generator [20]. He conjectured that the sequence
(cid:32)
(cid:33)
(cid:32)
(cid:33)
(cid:32)
(cid:33)
k
p
,
k + 1
p
,
k + 2
p
, . . .
is pseudorandom, when starting at a random seed k. Al-
though there have been several works studying the statisti-
cal uniformity of this sequence, perhaps surprisingly, there
has been very little research on cryptographic applications
since Damg˚ard’s paper. Damg˚ard also considered variants
with the Jacobi symbol, or where p is secret, but these seem
less suitable for our application to MPC.
We ﬁrst normalize the Legendre symbol to be in {0, 1, (p+
1)/2}, by deﬁning:
(cid:19)