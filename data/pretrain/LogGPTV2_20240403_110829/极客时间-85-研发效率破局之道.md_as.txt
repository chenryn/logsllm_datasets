### Facebook 决定对 Phabricator 进行开源

Phabricator 源自 Facebook 内部对代码审查的需求，后逐渐发展为一套全面的软件开发 Web 工具套件。这套工具包括代码审查、代码仓库托管、缺陷跟踪、项目管理和团队协作等功能。在开源之前，Phabricator 主要由开发工具团队维护并持续添加新功能，其他开发人员也会贡献代码。Phabricator 的快速发展为 Facebook 的开发和质量保障提供了巨大帮助。然而，它也面临着严重的性能问题。

随着时间推移，Phabricator 的响应速度会逐渐下降，每隔大约一年左右，就会达到让开发人员难以忍受的地步。导致这一性能问题的主要原因有两个：

1. **共享代码库**：Phabricator 和 Facebook.com 在同一个代码仓库中，共享底层代码库。然而，开发人员对 Phabricator 的响应速度要求比用户对 Facebook.com 更高。
2. **非专业贡献**：非开发工具团队的开发人员在增加功能时，由于不了解全貌，往往会在贡献代码的同时降低 Phabricator 的速度。单个功能的速度下降可能不明显，但累积起来会导致总体速度显著下降。

因此，每隔一年左右，Facebook 就需要对 Phabricator 进行重构以提高其响应速度。2010 年年中，这个问题再次爆发，开发工具团队决定寻找更根本的解决方案。经过仔细分析，他们认为将 Phabricator 与 Facebook.com 解耦是一个可行的办法。同时，开源社区对 Phabricator 的代码审核功能表现出浓厚兴趣，这促使团队考虑将其开源。

#### 开源的好处
1. **内部工具不影响核心竞争力**：Phabricator 是一个内部工具，不是面向用户的产品。开源不仅不会影响公司的核心竞争力，还可以提升公司的影响力。
2. **解耦提速**：开源自然而然地将 Phabricator 从主代码仓库中剥离出来，实现与 Facebook.com 的解耦，从而提高其响应速度。
3. **提高产品质量**：开源意味着代码将公开，更多人可以看到并提出改进建议，这会给开发人员带来压力，促使他们更加关注产品质量。
4. **利用开源社区资源**：开源可以利用开源社区的开发资源，加速 Phabricator 的发展。

#### 开源的缺点
1. **支持通用场景**：开源之后，Phabricator 需要支持更加通用的开发场景，这可能会影响对 Facebook 特有场景的支持。
2. **代码管控**：开源之后，代码不会像在内部那样容易管控，灵活性会降低。

为了应对这些缺点，团队决定使用插件的形式来支持 Facebook 特有的开发场景，并将 Phabricator 放在 Facebook 组织之下以保留较强的管控力。最终，内部工具团队和基础平台团队决定此次重构的目标是开源 Phabricator。

### 开源准备工作

确认开源 Phabricator 后，还需要完成一些非开发的准备工作：

1. **法律和信息安全审核**：确保项目的开源不会使公司面临法律和信息安全风险。主要关注是否会泄露知识产权或暴露安全漏洞。
2. **选择授权协议**：
   - **开源软件授权协议**：如 GPL、MIT、Apache 等。Phabricator 选择了 Apache 2.0。
   - **开源贡献协议**：如 CLA（Contributor License Agreement）和 DCO（Developer Certificate of Origin）。Phabricator 选择了 CLA。
3. **选择版本控制代码服务商**：当时选择了最流行的 GitHub。

### 开源具体步骤

完成准备工作后，正式的开发工作主要包括以下三步：

1. **代码解耦**：进行彻底的重构，将分散在各处的代码集中到五个代码仓库中，分别是 Libphutil、Phabricator、Arcanist、Diviner 和 Facebook 内部功能插件模块，实现了 Phabricator 的模块化。
2. **优化性能**：针对代码性能，尤其是底层 API 库进行了大量优化。开源后只需支持通用场景，更容易针对性地提高性能。
3. **支持功能定制**：
   - 提供对象字段、类和库三个级别的扩展，主要采用库级别的扩展来实现对 Facebook 的定制功能。
   - 提供接口供 Facebook 内部工具调用。
   - Facebook 内部工具代码提供接口供 Phabricator 调用。

此外，还需要完成数据库迁移和重新设计部署系统的工作。通过这些开发工作，Phabricator 不仅从 Facebook 中剥离出来，还显著提高了代码质量和性能。

### 开源初期发展

完成开发工作后，Facebook 正式对外宣布了 Phabricator 的开源，并切换到新的部署集群。整个过程比较顺利，虽然一开始出现了一些 Bug，但修复后很快就稳定下来。Phabricator 进入了开源代码仓库和内部插件代码仓库同时开发的阶段。针对 Facebook 的内部需求，尽量将其通用化，放到开源代码仓库中实现；实在需要定制的，才会放到 Facebook 的插件代码仓库中。

一位同事离职后，全职投入到开源社区的 Phabricator 项目中，并创立了一家公司致力于 Phabricator 的商用。从 2011 年年初开源到 2013 年年底，Facebook 和开源社区对 Phabricator 的发展目标一致，合作得非常好。许多著名公司也开始使用 Phabricator，提升了 Facebook 的声望。

### Fork

2014 年开始，越来越多的公司开始使用 Phabricator，但它们的使用场景与 Facebook 不同。这意味着 Facebook 要继续使用最新版本的 Phabricator，必须花费较大成本进行版本更新及维护。考虑到新增功能对 Facebook 用处不大，而维护成本又很高，2014 年下半年 Facebook 决定停止使用外部开源的 Phabricator，转而在公司内部维护一套 Fork 的 Phabricator 代码。这样一来，开源版的 Phabricator 引入新功能时，Facebook 只在需要的情况下参考外部实现引入内部。

### 开源对公司的利弊

开源对公司有利有弊。以下是总结：

- **好处**：
  - 提高代码质量
  - 得到开源社区的免费帮助
  - 提高开发者的积极性
  - 提升公司声誉
  - 回报社区

- **缺点**：
  - 定制困难
  - 内外协调
  - 版本维护

总的来说，开源在以下两种情况下最为有利：
1. **大公司**：开源带来的好处对大公司尤为明显，如提高公司声誉。
2. **需要通过开源获取影响力从而扩展业务的公司**：如 Docker 公司通过开源 Docker 项目迅速成为明星企业。

### 小结

开源正在改变软件开发的格局，选择开源自己的项目对公司来说有利有弊。Phabricator 的开源过程展示了如何充分利用开源带来的好处，同时也展示了在发现维护性价比不好时果断 Fork 的决策。虽然从个人情感上不愿意看到 Phabricator 在 Facebook 内部 Fork，但从理智的角度看，这是一个很好的决定。

### 思考题

跟硅谷相比，国内公司参与开源的非常少。你觉得主要原因是什么，将来的趋势又会是什么样的呢？欢迎你在评论区留言分享你的观点，也欢迎你把这篇文章分享给更多的朋友一起阅读。我们下期再见！