In this case, the reference to enumerator is resolved via a
cross-domain call to the cookie manager. Sabre must sepa-
rately manage the security labels of cookieMgr and those of
its properties because cookieMgr is not a JavaScript object.
Sabre assigns a default security label to cross-domain ob-
jects (described in Section 3.2). It also ensures that proper-
ties that are resolved via cross-domain calls inherit the labels
of their parent objects, e.g., cookieMgr.enumerator inherits
the label of cookieMgr.
3.2. Sources and Sinks
Sabre detects ﬂows from sensitive sources to low-
sensitivity sinks. We consider several sensitive sources (Fig-
ure 3 in [21]) which primarily deal with access to DOM el-
ements, as well as sources enabled by cross-domain access,
including those that allow access to persistent storage. Any
data received over these interfaces is considered sensitive.
Low-sensitivity sinks accessible from the JavaScript in-
terpreter include the ﬁle system and the network (Figure 4
in [21]). In addition to modifying the JavaScript interpreter
to raise an alert when a sensitive object is written to a low-
sensitivity sink, Sabre also modiﬁes the browser’s document
interface to raise an alert when a DOM node that stores sen-
sitive data derived from a JSE is sent over the network. For
example, Sabre raises an alert when a form or a script ele-
ment that contains sensitive data (i.e., data derived from the
cookie or password store) is transmitted over the network.
The browser itself may perform several operations that
result in information ﬂows from sensitive sources to low-
sensitivity sinks. For example, the ﬁle system is listed both
as a sensitive source and a low-sensitivity sink. This is
because a JSE may potentially leak conﬁdential data from
a web application by storing this data on the ﬁle system,
which may then be accessed by other JSEs or malware on
the host machine. However, the browser routinely reads and
writes to the ﬁle system, e.g., bookmarks and user prefer-
ences are read from the ﬁle system when the browser starts
and are written back to disk when the browser shuts down.
To avoid raising an alert on such benign ﬂows, Sabre reports
an information-ﬂow violation only if an object is written to
by a JSE (as discussed in Section 3.1). Consequently, it does
not report an alert on benign ﬂows, such as the browser read-
ing and writing user preferences. Even so, a benign JSE
may contain instances of ﬂows from sensitive sources to
low-sensitivity sinks as part of its advertised behavior. Dis-
allowing such ﬂows may render the JSE dysfunctional. In
Section 3.4, we discuss how Sabre handles such ﬂows via
whitelisting.
While sources and sinks listed above help detect
conﬁdentiality-violating information-ﬂows, a similar set of
low-integrity sources and high-integrity sinks can also be
used to detect integrity violations. In this case, Sabre de-
tects information-ﬂows from low-integrity sources, e.g., the
network, to high-integrity sinks, e.g., calls to nsIProcess,
which can be used to start a process on the host system.
These sources and sinks are largely similar to the ones de-
scribed in [21]; we omit a detailed discussion for brevity.
3.3. Propagating Labels
Sabre modiﬁes the interpreter to additionally propagate
security labels. JavaScript instructions can roughly be cat-
egorized into assignments, function calls and control struc-
tures, such as conditionals and loops.
Explicit ﬂows. Sabre handles assignments in the standard
way by propagating the label of the RHS of an assignment to
its LHS. If the RHS is a complex arithmetic/logic operation,
the result is considered sensitive if any of the arguments is
sensitive. Assignments to complex objects deserve special
care because JavaScript supports dynamic creation of new
object properties. For example, the assignment obj.prop
= 0 adds a new integer property prop to obj if it does not
already exist. Recall that Sabre associates a separate label
with obj and obj.prop (in contrast to [42]). In this case,
the property prop inherits the label of obj when it is ini-
tially created, but the label may change because of further
386
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:05:07 UTC from IEEE Xplore.  Restrictions apply. 
assignments to prop. An aggregate operation on the entire
object (e.g., a length operation on an array) will use the la-
bel of the object. In this case, the label of the object is calcu-
lated (lazily, when the object is used) to be the aggregate of
the labels of its child properties, i.e., an object is considered
sensitive if any of its constituent properties stores sensitive
information. Sabre handles arrays in a similar fashion by
associating each array element associated with its own se-
curity label. However, the label of the entire array is the
aggregate of its members; doing so is important to prevent
unintentional information leaks [42].
consider
Sabre handles function calls in a manner akin to prior
work [42]. The execution of a function may happen within
a labeled scope (described below), in which case the labels
of variables modiﬁed in the function are combined with the
label of the current scope. The scope of a function call such
as obj.func() automatically inherits the label of the parent
object obj. eval statements are handled similar to function
calls; all variables modiﬁed by code within an eval inherit
the label of the scope in which the eval statement executes.
Cross-domain function calls require special care. For
example,
the following call, which initial-
izes a nsIScriptableInputStream object (sis) using a
nsIInputStream object (is): sis.init(is). In this state-
ment, sis is not a JavaScript object. The function call to
init is therefore resolved via a cross-domain call. To handle
cross-domain calls, we supplied Sabre with a set of cross-
domain function models that specify how labels must be
propagated across such calls. For example, in this case, the
model speciﬁes that the label of is must propagate to sis.
We currently use 127 function models that specify how la-
bels must be propagated for cross-domain calls.
Implicit ﬂows. While the above statements are exam-
ples of explicit data dependencies, conditions (and closely
related statements, such as loops and exceptions) induce
implicit information ﬂows.
In particular, there is a con-
trol dependency between a conditional expression and the
statements executed within the conditional. Thus, for in-
stance, all statements in both the T and F blocks in the
following statement must be considered sensitive, because
document.cookie.length is a considered sensitive:
if (document.cookie.length > 0) then {T} else {F}
Sabre handles implicit ﬂows using labeled scopes. Each
conditional induces a scope for both its true and false
branches. The scope of each branch inherits the label of its
conditional; scopes also nest in the natural way. All objects
modiﬁed within each branch inherit the label of the scope in
which they are executed.
x = false; y = false;
if (document.cookie.length > 0)
then {x = true} else {y = true}
if (x == false) {A}; if (y == false) {B}
Figure 3. An implicit ﬂow that cannot be de-
tected using labeled scopes.
While scopes handle a limited class of implicit informa-
tion ﬂows, it is well-known that they cannot prevent all im-
plicit ﬂows. For instance, consider the example shown in
Figure 3 (adapted from [19, 42]). In this ﬁgure, one of block
387
A or B executes, depending on the result of the ﬁrst condi-
tional. Consequently, there is an implicit information ﬂow
from document.cookie.length to both x and y. However, a
dynamic approach that uses scopes will only mark one of x
or y as sensitive, thereby missing the implicit ﬂow.
Precisely detecting such implicit ﬂows requires static
analysis. However, we are not aware of static analysis tech-
niques for JavaScript that can detect all such instances of im-
plicit ﬂow. Although prior work [42] has developed heuris-
tics to detect simple instances of implicit ﬂows, such as the
one in Figure 3, these heuristics fail to detect implicit ﬂows
in dynamically generated code, e.g., code executed as the re-
sult of an eval. Large, real-world JSEs contain several such
dynamic code generation constructs. For example, we found
several instances of the eval construct in about 50% of the
JSEs that we used in our evaluation (Section 4). Our cur-
rent prototype of Sabre therefore cannot precisely detect all
instances of implicit ﬂows. In future work, we plan to inves-
tigate a hybrid approach that alternates static and dynamic
analysis to soundly detect all instances of implicit ﬂows.
Instruction provenance.
In addition to propagating sen-
sitivity values, Sabre uses the provenance of each JavaScript
instruction to determine whether a JavaScript object is mod-
iﬁed by a JSE. If so, it sets a Boolean ﬂag (Section 3.1) and
records the name of the JSE in the security label of the ob-
ject for diagnostics. Because the JavaScript interpreter can
precisely determine the source ﬁle containing the bytecode
currently being executed, this approach robustly determines
the provenance of an instruction, even if it appears in a XUL
overlay that is integrated into the browser core.
3.4. Declassifying and Endorsing Flows
As discussed in Section 3.2, a benign JSE can contain
information ﬂows that may potentially be classiﬁed as vi-
olations of conﬁdentiality or integrity. For example, con-
sider the PwdHash [37] JSE, which customizes passwords
to prevent phishing attacks. This JSE reads and modiﬁes
a sensitive resource (i.e., a password) from a web form,
which is then transmitted over the network when the user
submits the web form. Sabre raises an alert because an
untrusted JSE can use a similar technique to transmit pass-
words to a remote attacker. However, PwdHash customizes
an input password passwd to a domain by converting it
into SHA1(passwd||domain), which is then written back to
a DOM element whose origin is domain. In doing so, Pwd-
Hash eﬀectively declassiﬁes the sensitive password. Conse-
quently, this information ﬂow can be whitelisted by Sabre.
To support declassiﬁcation of sensitive information,
Sabre extends the JavaScript interpreter with the ability to
declassify ﬂows. A security analyst supplies a declassiﬁca-
tion policy, which speciﬁes how the browser must declas-
sify a sensitive object. Flows that violate integrity can sim-
ilarly be handled with an endorsement policy. Sabre sup-
ports two kinds of declassiﬁcation (and endorsement) poli-
cies: sink-speciﬁc and JSE-speciﬁc. A sink-speciﬁc pol-
icy permits ﬁne-grained declassiﬁcation of objects by al-
lowing an analyst to specify the location of a bytecode in-
struction and the object externalized by that instruction. In
turn, the browser reduces the sensitivity of the object when
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:05:07 UTC from IEEE Xplore.  Restrictions apply. 
that instruction is executed. For example, the security an-
alyst would specify the ﬁle, function and line number at
which to execute the declassiﬁcation bytecode on the ob-
ject being externalised.
In case of PwdHash, the policy
would be the tuple .
In contrast, a JSE-speciﬁc policy
permits declassiﬁcation of all ﬂows from a JSE and can be
used when a JSE is trusted.
Declassiﬁcation (and endorsement) policies must be sup-
plied with care because declassiﬁcation causes Sabre to al-
low potentially unsafe ﬂows. In the experiments reported
in Section 4, we manually wrote declassiﬁcation policies by
examining execution traces emitted by Sabre and determin-
ing whether the oﬀending ﬂow is part of the advertised be-
havior of the JSE. If the ﬂow was advertised by the JSE, we
wrote a sink-speciﬁc policy to allow that ﬂow.
4. Evaluation
We evaluated Sabre using a suite of 24 JSEs, compris-
ing over 120K lines of JavaScript code. Our goals were to
test both the eﬀectiveness of Sabre at analyzing information
ﬂows and to evaluate its runtime overhead.
4.1. Eﬀectiveness
Our test suite included both JSEs with known instances
of malicious ﬂows as well as those with unknown ﬂows. In
the latter case, we used Sabre to understand the ﬂows and
determine whether they were potentially malicious.
• JSEs with known malicious ﬂows. We evaluated Sabre
with four JSEs that had known instances of malicious ﬂows.
These included two JSEs that contained exploitable vul-
nerabilities (Greasemonkey v0.3.3 and Firebug v1.01) and
two publicly-available malicious JSEs (FFSniFF [13] and
BrowserSpy [41]).
To test vulnerable JSEs, we adapted information avail-
able in public fora [12, 35, 39, 45] to write web pages con-
taining malicious scripts. The exploit against Greasemon-
key attempted to transmit the contents of a ﬁle on the host to
an attacker, thereby violating conﬁdentiality, while exploits
against Firebug attempted to start a process on the host and
modify the contents of a ﬁle on disk, thereby violating in-
tegrity. In each case, Sabre precisely identiﬁed the informa-
tion ﬂow violation. We also conﬁrmed that Sabre did not
raise an alert when we used a JSE-enhanced browser to visit
benign web pages.
To test malicious JSEs, we considered FFSniFF and
BrowserSpy, both of which exhibit the same behavior—they
steal passwords and other sensitive entries from web forms
and hide their presence from the user by removing them-
selves from the browser’s extension manager. Nevertheless,
because Sabre records the provenance of each JavaScript
bytecode instruction executed, it raised an alert when FF-
SniFF and BrowserSpy attempted to transmit passwords to
a remote attacker via the network.
In addition to the above JSEs, we also wrote a num-
ber of malicious JSEs, both to demonstrate the ease with
which malicious JSEs can be written and to evaluate Sabre’s
ability to detect them. Each of our JSEs comprised under
100 lines of JavaScript code, and were written by an un-
dergraduate student with only a rudimentary knowledge of
JavaScript. For example, ReadCookie is a JSE that reads
browser cookies and stores them in memory. When the user
visits a particular web page (in our prototype, any web page
containing Google’s search utility), the JSE creates a hidden
form element, stores the cookies on this form, and modiﬁes
the action attribute to redirect the search query to a mali-
cious server address. The server receives both the search
query as well as the stolen cookies via the hidden form ele-