### Pointer and Value of Counter Before Update
- `ptrG` and `valG` represent the pointer and value of the counter before the update.
- `ptrG_new` and `valG_new` are the updated pointer and value.
- `is_revoked_rcvd` denotes the accessibility status.

### Modeling Replay Attacks
To model replay attacks, we consider two distinct inputs available to the adversary. We simulate two active signals followed by one inactive signal. The global variable is shared among multiple enclave-threads. The Remote Attestation (RA) procedure is abstracted with a Trusted Broker (TB) and an HCP enclave thread, starting with a pre-knowledge of the RA session key. The communication channel is modeled using facts, and the GMAC tag is modeled as `h(enc_signal)KRA`.

### Resolving Non-Termination Issues
To address non-termination issues, we introduced five helper lemmas:
1. Ensure that the RA session keys are never leaked to the adversary.
2. Ensure that the thread rules for the same ecall strictly follow the specified execution order.
3. Each rule instance for reading or writing global variables must have a preceding rule instance for creating the same global variable.

### Trusted Broker IoT Device
- **SGX-Enabled Access**: Secure RA Session (`KRA`)
  - `enc_signal` = `{sc (Signal Counter)=1, is_revoked=0}KRA`
  - `gmac` = `{h(enc_signal)}KRA`
  - `active signal` = `enc_signal || gmac`
  - `gsc (Global State Counter)` = `0`
  - **Steps**:
    1. Decrypt `sc`, `is_revoked`
    2. Verify GMAC: `{h(enc_signal)}KRA`
    3. If `gsc`...

### Researcher (R) and BI-SGX
- **Secure RA Session (KRA_O)**
  - `request` = `enc_data || gmac`
  - **Data Owner (O)**: Initialize Database
    - `index` = `1`
    - `enc_data` = `{O_info, data}KRA_O`
    - `gmac` = `{h(enc_upload)}KRA_O`
    - Decrypt `O_info`, `data`
    - Verify GMAC: `{h(enc_data)}KRA_O`
  - **SGX Seal Policy MRSIGNER**
    - `seal_data` = `{owner, data}seal_key`
    - `ecall seal_data(request)`
    - `DBStore (index =1, seal_data)`
    - `index` = `index + 1`

- **Secure RA Session (KRA_R)**
  - `enc_query` = `{R_info, req_index = i}KRA_R`
  - `gmac` = `{h(enc_query)}KRA_R`
  - `request` = `enc_data || gmac`
  - Decrypt `R_info`, `req_index`
  - Verify GMAC: `{h(enc_query)}KRA_R`
  - `ecall run_interpreter(request)`
  - `seal_data` = `DBGet (req_index)`
  - `ocall (req_index)`
  - **SGX Unseal Data**
    - `enc_response` = `{data}KRA_R`
    - `gmac` = `{h(enc_response)}`
    - `ocall return(seal_data)`
    - `response` = `enc_reponse || gmac`
    - Decrypt `data`
    - Verify GMAC: `{h(enc_response)}KRA_R`

### Event Labeling
Two types of events need to be labeled:
1. **User’s Request**: Marked by `RCHR_rcv(RA_session_k, index_req)` where `RA_session_k` represents the RA session key and `index_req` indicates the index of the requested data.
2 - **Enclave’s Response**: Marked by `E_reply(RA_session_k, index_req, seal)` at the `ecall run_interpreter` with `seal` representing the sealed data obtained by the BI-SGX enclave when processing the user’s query.

### Security Property
The key challenge is to properly model state continuity. A replay occurs if the same data is retrieved and processed by the BI-SGX enclave when the user sends queries with different indexes. The security property ensures that with queries containing different indexes, different data is retrieved and processed. The property is expressed as:
- For all `RCHR_rcv (RA_session_x, index_x) @t1` and `RCHR_rcv (RA_session_y, index_y) @t2` where `not (index_x = index_y)`, it implies:
  - `E_reply (RA_session_x, index_x, seal_a) @t3` and
  - `All E_reply (RA_session_x, index_t, seal_t) @t4` implies `# t3 = # t4` and
  - `E_reply (RA_session_y, index_y, seal_b) @t5` and
  - `All E_reply (RA_session_y, index_t, seal_t) @t6` implies `# t5 = # t6` and
  - `not (seal_a = seal_b)`

### Analysis Results
Running the Tamarin prover revealed a replay attack on sealed data. The root cause is that the association between the index and data is maintained in untrusted storage (the database). To fix this, we implemented the mapping of the index and data within the enclave using Monotonic Counters (MC), preventing the adversary from modifying the mapping. Specifically, we added MC values inside the sealed data, which act as an index for the user query. This ensures that the adversary cannot modify the index stored inside the sealed data, thus preventing the replay of sealed data for any index other than the one stored. The state continuity property was then proven using the updated Tamarin model.

### Summary of Case Studies
In three case studies, Sawtooth, Heartbeat, and BI-SGX, we used Tamarin to capture vulnerabilities by carefully modeling adversary behavior and enclave operations. We disclosed the vulnerabilities to the developers, who acknowledged and addressed them.

### Responsible Disclosure
We disclosed the vulnerabilities to the developers of these projects. The Sawtooth team acknowledged our findings and patched the vulnerabilities. The BI-SGX developers plan to address the issue by altering the design.

### Verification Time and Size of Tamarin Models
| Application | Model LOC | Discovery Time | Verification Time | Number of Rules |
|-------------|-----------|----------------|-------------------|-----------------|
| Sawtooth [1] | 300 | 1m 18s | 25s | 11 |
| Heartbeat [19] | 250 | 7s | 2h 4m 7s | 11 |
| BI-SGX [42] | 450 | 36s | 37s | 18 |

### Discussion and Limitations
There are two major limitations:
1. **Manual Effort**: The verification process requires manual translation of source code or design logic into Tamarin models. This includes modeling program logic, encoding properties, ensuring correct syntax, and validating results.
2. **Non-Termination**: Tamarin may encounter non-termination problems, especially with complex models. Solutions include building helper lemmas, constructing induction lemmas, and using restriction axioms to minimize loops.

### Future Work
Our work is a first step towards automated verification of state continuity for SGX enclave programs. Future work will aim to fully automate the verification process, extend our approach with LLVM, and integrate learning-based approaches to resolve non-termination problems.

### Related Works
Various solutions for state continuity have been proposed, including libraries like Memoir, ICE, and Ariadne, and distributed solutions like ROTE and LCM. Formal modeling and proving the security of these solutions is also a focus of research. Ahman et al. provide assertion-based constructs in F* for state preservation.

### Conclusion
This paper presents a method for verifying state continuity in SGX applications using Tamarin. We identified and fixed vulnerabilities in three case studies, demonstrating the effectiveness of our approach.