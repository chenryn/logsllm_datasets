pointer and value of the counter values before the update while
ptrG_new and valG_new are the updated pointer and value;
and is_revoked_rcvd denotes the status of the accessibility.
It is enough to consider two distinct inputs available to ad-
versary to model replay attacks. Therefore, we modeled two
active signals followed by one inactive signals. The global
variable is shared among multiple enclave-threads. RA proce-
dure is abstracted with TB and HCP enclave thread starting
with a pre-knowledge of RA session key; the communica-
tion channel is modeled with fact; GMAC tag is model as
h(enc_signal)KRA.
To resolve the non-termination issues, we introduced ﬁve
helper lemmas to ensure that (1) the RA session keys are
never leaked to the adversary, (2) the thread rules of the same
ecall strictly follow the speciﬁed execution order, (3) each rule
instance for reading or writing global variables must have an
antecedent rule instance for creating the same global variable,
584    30th USENIX Security Symposium
USENIX Association
Trusted Broker IoT DeviceSGXEnabledAccessSecure RA Session (KRA)enc_signal ← {sc (Signal Counter)=1, is_revoked=0}KRAgmac ← {h(enc_signal)}KRA active signal = enc_signal || gmacgsc (Global State Counter) = 0 1.   Decrypt sc, is_revoked2.   VerifyGMAC {h(enc_signal)}KRA3.   If    gsc 
USENIX Association
30th USENIX Security Symposium    585
Researcher (R)BI-SGXSecure RA Session (KRA_O)request = enc_data || gmacData Owner (O)Initialize Database index ← 1 enc_data ← {O_info, data}KRA_Ogmac ← {h(enc_upload)}KRA_O Decrypt O_info, dataVerifyGMAC {h(enc_data)}KRA_OSGX Seal Policy MRSIGNERseal_data ← {owner, data}seal_keyecall seal_data(request) DBStore (index =1, seal_data) index ← index + 1 Secure RA Session (KRA_R)enc_query ← {R_info, req_index = i}KRA_Rgmac ← {h(enc_query)}KRA_R request = enc_data || gmacDecrypt R_info, req_indexVerifyGMAC {h(enc_query)}KRA_Recall run_interpreter(request) seal_data ← DBGet (req_index)ocall (req_index)SGX Unseal dataenc_response ← {data}KRA_Rgmac ← {h(enc_response)}ocall return(seal_data) response =enc_reponse || gmacDecrypt dataVerifyGMAC {h(enc_response)}KRA_RTwo types of events need to be labeled: (1) the user’s
request of data is marked by an action-label RCHR_rcv
(RA_session_k, index_req) with RA_session_k repre-
senting the RA session key and index_req indicating the
index of the requested data; (2) the enclave’s response is
marked by another action-label E_reply(RA_session_k,
index_req,seal) at the ecall run_interpreter with seal
representing the sealed data obtained by the BI-SGX enclave
when processing the user’s query.
RA session keys and GMAC tag are abstracted in the same
way as described in §5.2.1. Database is modeled as described
in §4.8 with authentication. Integrity is abstracted by using a
dedicated database fact. The communication with the database
occurs over public channel as it is handled by untrusted code.
We introduce ﬁve helper lemmas: Two for preserving the
MC properties as described in §5.1.2; three others for proving
that each user and BI-SGX enclave communication uses a
unique RA session.
5.3.2 Security Property
The key challenge is to properly model state continuity in
this case. A replay occurs if the same data is retrieved and
processed by the BI-SGX enclave when the user sends queries
with different indexes. Hence, the security property consid-
ered is that with queries containing different indexes, different
data is retrieved and processed. The property, as shown below,
indicates that when two users’ queries containing different in-
dexes are processed, the sealed data involved in the processing
must be different.
All RCHR_rcv ( RA_session_x , index_x ) @t1
& RCHR_rcv ( RA_session_y , index_y ) @t2
& not ( index_x = index_y )
== >
Ex E_reply ( RA_session_x , index_x , seal_a ) @t3
& ( All E_reply ( RA_session_x , index_t , seal_t ) @t4
== > # t3 = # t4 )
& E_reply ( RA_session_y , index_y , seal_b ) @t5
& ( All E_reply ( RA_session_y , index_t , seal_t ) @t6
== > # t5 = # t6 )
& not ( seal_a = seal_b )
5.3.3 Analysis Results
By running the prover, Tamarin shows a replay attack of
sealed data. The root cause of this attack is that the associa-
tion between the index and data is maintained in the untrusted
storage, i.e., the database. Hence, the adversary could alter the
mapping and replay the sealed data. We have also conﬁrmed
the effectiveness of the attack in practice. To ﬁx this vulnera-
bility, we implement the mapping of the index and the data
within the enclave using MC, preventing the adversary from
modifying such mapping. In particular, we add MC value
inside the sealed data which can act as an index of the user
query. Since, the adversary cannot modify the index stored
inside sealed data, she cannot replay a sealed data for any
index other than the one stored inside. This index is checked
in the ecall run_interpreter to match with user’s requested
index. The property of state continuity was then proven using
the updated Tamarin model.
5.4 Summary of Case Studies
In the three case studies, Sawtooth tries to preserve the states
of PoET certiﬁcate generation using monotonic counters;
Heartbeat tries to maintain the recently received active heart-
beat signals, and BI-SGX tries to preserve the one-to-one map-
ping between the index and the sealed data. With Tamarin, we
are able to capture these vulnerabilities by carefully modeling
adversary behaviour and enclave operations.
Responsible disclosure. We have disclosed the vulnerabili-
ties to developers of these three projects. The Sawtooth team
have acknowledged our ﬁndings and patched the vulnerabili-
ties we discovered [2]. Developers of BI-SGX have planned
to address the discovered issue by altering the design of BI-
SGX.
We run the Tamarin prover (v1.7.0) on a machine with a
quad-core 1.80GHz Intel© Core™ i7-8550U CPU and 16
GB RAM, and Ubuntu Linux 18.04. We introduced helper
lemmas— two for Sawtooth, ﬁve for Heartbeat, and ﬁve for
BI-SGX—to help prove the target properties. We can see
that with vulnerable models studied in this paper, Tamarin
could discover attack traces within a couple of minutes, with a
longest case (Sawtooth) being 78 seconds. While for patched
versions, the proofs take a couple of hours to ﬁnish, with a
longest case (Heartbeat) of 2 hours and 4 minutes.
App
Attack
Veriﬁcation
Table 2: Veriﬁcation time and size of the Tamarin models.
Model
LOC
300
250
450
Discovery Time
1m 18s
7s
36s
Sawtooth [1]
Heartbeat [19]
BI-SGX [42]
Time
25s
2h 4m 7s
37s
#
Rules
11
11
18
6 Discussion and Limitations
There are two major limitations of our approach. First, the
veriﬁcation process is not completely automated. It requires
the users to manually translate the source code or design logic
of the enclave program into the Tamarin model. Such man-
ual efforts typically include modeling the program logic in
Tamarin, encoding the property of state continuity as a lemma
expressed in ﬁrst-order logic, ensuring correct syntax and pro-
tocol behavior using executability lemmas [5], validating the
results from Tamarin’s output, and so on. As Tamarin is a
semi-automated tool, the users are also expected to interact
with Tamarin and reﬁne the proof with several iterations.
Second, Tamarin may encounter non-termination problems.
When Tamarin models become complicated, the veriﬁcation
586    30th USENIX Security Symposium
USENIX Association
process may take very long time and sometimes never termi-
nate. Reasons of non-termination include partial deconstruc-
tions, looped construction, and undecidability. Details about
partial deconstructions and solution have been discussed in
prior studies [20, 31]. Looped construction and unbounded
instantiation of terms force Tamarin to resolve similar
constraints repeatedly without converging the state spaces.
After careful observation of the recursive constraint structures
in the Tamarin interactive GUI, users can build helper lemmas
(§2.2.5) that prevent the proof branch from entering into
repeated loop, and thus allowing Tamarin to terminate in
many cases. Additionally, a looped construction could be par-
tially mitigated by constructing induction lemmas to discard
recursive dependencies, and by using restriction axioms to
minimize loops construction. Nevertheless, proving a property
for a given model is undecidable. Therefore, it is impossible
to ensure a termination in all cases. We plan to contribute to
the Tamarin community and improve the tool in future work.
Admittedly, our work is only the ﬁrst step towards
automated veriﬁcation of state continuity for SGX enclave
programs. While our approach in theory can be applied to
large, complex programs, the manual efforts involved remains
a major obstacle for developers to apply this approach
in practice. Future work will aim to fully automate the
veriﬁcation process for developers with minimal expertise
in Tamarin. For instance, we will extend our approach with
LLVM to automate the extraction of SGX primitives and
integrate our solution with a learning-based approach to
resolve non-termination problems.
ﬁx state related rollback issues. However, these works do not
cover state rollback in TEE applications studied in this paper.
Moat [46] uses Boogie veriﬁer [11] and Z3 SMT solver [24]
to provide assertion based formal framework to verify con-
ﬁdentiality of enclave programs. Xu et al. provides Tamarin
based formal framework for modeling to prove conﬁdential-
ity, authentication and privacy for ARM TrustZone’s chain of
trust and attestation protocols of TEE based applications [54].
Jacomme et al. extend SAPIC tool for Tamarin by providing
encodings for report functionality for TEE based applica-
tions [33]. The report functionality is introduced to extend
Tamarin modeling to use direct reporting construct in SAPIC
pi calculus language to prove authentication of TEE appli-
cations to remote clients. Our work focuses modeling and
proving properties different from these work, i.e., state conti-
nuity of SGX applications using Tamarin.
For state-continuity solutions based on TPM chips, TP-
M/TPM2.0 related interaction and applications are formally
veriﬁed [9,23,25,44,47]. These works model TPM speciﬁc in-
terfaces (API or TPM commands), conﬁguration registers and
secure key management unit and prove conﬁdentiality, remote
or local attestation (direct anonymous attestation and root of
trust for measurement) [9, 23, 47] and authorization [25, 44]
of the interacting applications. Our work covers a broader
range of state-continuity scenarios. For applications that re-
quires TPM chips, our focus is to verify whether the SGX
applications use these TPM chips correctly.
7 Related Works
8 Conclusion
Various solutions to provide state continuity have been pro-
posed. Memoir [41], ICE [49] and Ariadne [50] implement
libraries to interact with non-volatile memory protected by
TPM chips to provide freshness and integrity protection upon
each usage within untrusted code. These libraries act as inter-
mediary between TPM chips and untrusted code. To overcome
the limitation of slow speed of non-volatile memory writes,
these works suggest to reduce the number of writes by access-
ing the TPM only at boot time [41,49] or ﬂipping only a single
bit per write using gray-code [50]. While these centralized so-
lutions require TPM chips, ROTE [38] and LCM [16] provide
distributed state-continuity solutions for state continuity.
Another line of research focuses on formally modeling and
proving the security of state continuity provided by these li-
braries and frameworks, which is also the focus of our paper.
In particular, Ahman et al. provide assertion based constructs
in F* veriﬁcation tool for state preservation [6]. It introduces