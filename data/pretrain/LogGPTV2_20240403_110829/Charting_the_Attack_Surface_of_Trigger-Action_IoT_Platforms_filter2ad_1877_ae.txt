i
t
l
a
o
v
f
i
o
#
e
g
a
r
e
v
A
Looping
Conflict
Conflict_2
Reverting
Duplication
Duplication_2
 1000
 100
 10
 1
 0.1
 0.01
 0
 10
 20
 30
 40
 50
 60
 0
 10
 20
 30
 40
 50
 60
 0
 10
 20
 30
 40
 50
 60
# of rules
(a) Random Strategy
# of rules
(b) Install Count Strategy
# of rules
(c) Service-based Strategy
Figure 10: Average number of vulnerabilities discovered for diferent coniguration synthesis strategies (averaged over 50 trials per number
of rules). Diferent inter-rule vulnerability classes are separated by color; Conflict_2 stands for action conlict with diferent triggers and
Duplication_2 stands for group action duplication (i.e., one action subsumes another action). Duplication violations can exceed # of rules
because a single action can be involved in multiple duplications.
data in IFTTT is private, and thus not contained in our dataset,
with the exception of aggregate applet install counts which are
made public.6 Our crawl identiies 315,393 applets and 674 services.
The applets make use of 1,718 distinct triggers and 1,327 distinct
actions. The applets were written by either service providers or
131,768 third-party authors (i.e., users). Some components of IFTTT
applets are not publicly visible, making us unable to discover certain
classes of inter-rule vulnerabilities; for example, because applet
ilter code is not public, we cannot analyze IFTTT for the condition
bypassing vulnerability. Instead, we limit our evaluation to action
loop, conlict, revert, and action duplicate vulnerabilities.
The security of a given IoT deployment ultimately depends on its
coniguration, i.e., the currently active set of rules. However, we are
not aware of a publicly available dataset that describes how actual
users conigure their IoT deployments; for example, on IFTTT each
user’s installed rules are private. This knowledge gap is not speciic
to our study but belies a broader limitation in state-of-the-art IoT
security research. Unfortunately, without an accurate picture of IoT
conigurations, we are limited in our ability to identify real-world
vulnerabilities in smart homes.
In order to evaluate iRuler, we make the observation that IFTTT
actually exposes a limited amount of usage information that will
allow us to approximate realistic IoT conigurations. We leverage
this usage information in the form of 3 competing heuristics for
synthesizing plausible trigger-action rule sets:
• Install Count Strategy. IFTTT reports the total number of installa-
tions of each applet. We normalize these install counts to assign
each applet a weight and construct an IoT coniguration of r rules
by performing a weighted random walk starting at a random point
in the IFTTT information low graph. This strategy relects the
intuition that popular applets are more likely to be simultaneously
installed.
• Service-Based Strategy. We construct an IoT coniguration by ran-
domly selecting a small number of services, then randomly select-
ing r rules from within those services. This strategy relects the
intuition that a user is likely to make use of only a small number
of services.
6We argue that this is analogous to security surveys of mobile app markets (e.g., [37])
and therefore consistent with community norms governing ethical data collection.
)
%
(
e
g
a
t
n
e
c
r
e
p
 100
 80
 60
 40
 20
 0
)
%
(
e
g
a
t
n
e
c
r
e
p
 100
 80
 60
 40
 20
 0
 0
 10
 20
 30
 40
 50
 60
 0
 10
 20
 30
 40
 50
 60
# of rules
# of rules
(a) Including duplication
(b) Excluding duplication
Figure 11: The percentage of applet authors whose applets have at
least one vulnerability.
• Author-Based Strategy. In IFTTT, authors have the option of shar-
ing their applets publicly. We construct an IoT coniguration by
assuming that an author has all of their public applets simultane-
ously installed. This strategy relects the intuition that authors
are likely to use their own applets.
We compare each of these heuristics to a baseline Random Strat-
egy that uniformly selects at random r rules from the IFTTT dataset.
Thus, our indings will not only serve to validate iRuler but also
characterize the potential for real-world inter-rule vulnerabilities.
7.2 Results
We apply each IoT coniguration synthesis strategy for variable
numbers of rules between 2 and 60, reporting the average number
of discovered violations across 50 trials. Figure 10 shows the av-
erage number of vulnerabilities identiied as the number of active
rules increases using the Random Strategy, Install Count Strategy,
and Service-Based Strategy, respectively. In Figure 10, action du-
plication is the most prevalent concern in the IFTTT ecosystem.
Looping behaviors are also quite frequent, occurring at least once
per coniguration when more than 15 rules are simultaneously ac-
tive. While less prevalent, we also identify the potential for conlicts
and reverting behaviors in many of the synthesized conigurations.
The group action duplication vulnerability, while rare, was also ob-
served in our tests. Using the Install Count Strategy, in total, 66% of
the rulesets are associated with at least one inter-rule vulnerability.
We consider the Author-Based Strategy in a separate analysis
because, unlike the other strategies, we are unable to control the
Session 7A: Internet of ThingsCCS ’19, November 11–15, 2019, London, United Kingdom1448Table 4: Rule chaining in IFTTT. Actions/Triggers is the number of
chainable mechanisms in IFTTT, while Observed signiies the num-
ber of linkable mechanisms observed in at least one IFTTT rule.
Type
Explicit chaining
Implicit chaining
Actions (Observed)
Triggers (Observed)
204,510 (200,030)
10,128 (9931)
62,013 (61,967)
6262 (5228)
number of trials and the number of active rules. Figure 11a shows
the percentage of authors of applets with at least one vulnerability.
Almost all authors’ applets show evidence of at least one inter-
rule vulnerability. Again, similar to prior test, duplication is the
most common concern; Figure 11b shows the frequency of vulnera-
bilities excluding duplication. Concerningly, about 1 in 5 authors
will experience a non-duplication vulnerability in their rule set if
they activate at least 10 rules. However, some authors might not
simultaneously activate all their applets, meaning that this test
may overestimate the frequency of vulnerabilities. However, taken
as a whole, this test provides compelling evidence that inter-rule
vulnerabilities currently exist in the wild.
Our study also presents an opportunity to characterize the po-
tential for rule chaining within TA platforms. Because rule chaining
increases the complexity of an IoT coniguration, we theorize that
it also increases the potential for security violations within the de-
ployment. Across the 674 IFTTT services we analyzed, there exist
509 actions that can explicitly link to other rules and 518 triggers
can be explicitly triggered by some action. In addition, we identify
460 actions that can afect an environment variable in order to in-
directly invoke 392 triggers that monitor environmental variables.
Table 4 summarizes our rule chaining results. We identify a total
of 204,510 (64.8%) rules that can explicitly link to other rules, and
62,013 (19.5%) rules that can be explicitly linked by other rules.
There exist 10,128 (3.2%) rules can implicitly link to other rules, and
6262 (2.0%) rules that can be implicitly linked by other rules.
7.3 Vulnerability Analysis
Condition Bypassing & Condition Blocking. While we introduce
the notion of condition-based vulnerabilities in ğ4, we are unable
to detect them on IFTTT because applets’ ilter code is not public.
We veriied the presence of condition vulnerabilities using our own
applets but leave large-scale validation of this issue to future work.
Action Reverting. Our dataset contains 1127 applets with multiple
actions, 50 of which contain contrary action pairs that revert each
other. A rule susceptible to action-reverting by another rule/applet,
usually occur within distance 1 or 2 of one another in the IFTTT
information low graph, but the longest distance observed was 5
in a coniguration of 26 applets; such violations would likely to be
diicult to identify manually. One example of such violation in our
dataset consists of an applet that turns the lights on when motion
is detected, but another applet turns of the lights whenever a light
is turned on. A more concerning violation we observed was a rule
that would disconnect a HomeSeer device from Wi-Fi the moment
it was turned on, creating a DoS attack because the device cannot
function or receive commands without a network connection.
the user whenever their calendar received an appointment, while a
second rule triggered IFTTT to make an appointment to the user’s
calendar whenever they missed a call. Hence, if a user sent IFTTT’s
autodial to voicemail, IFTTT would continue to call back while
simultaneously illing her calendar with pointless appointments.
Action Conlicts. Most of the conlicting action pairs are direct
actions of the same trigger (i.e., distance 1). There are also rules that
conlict with other rules in another branch, including rule chain of
length 4, longest in a coniguration of 23 rules. We observed a rule
chain where two rules conlict: łArm the Scout Alarm when the user
enters an areaž, and łTurn of the user’s phone Wi-Fi when the user
enters an areaž. The second rule disconnects the phone from the
network, so IFTTT is unable to trigger the irst rule, i.e., arm Scout
Alarm. We observe that the sequence of the iring triggers usually
determines the inal states of the conlicting actions. We found one
example where scoutalarm enters armed mode everyday from 10
AM until the user’s phone connects to home Wi-Fi, but a second
rule disables the home Wi-Fi every day at 9:55 AM. Combined,
these will cause scoutalarm to irst disarm at 9:55 AM and then
re-enter armed mode at 10 AM, even when the user is at home.
Action Duplication. As seen from Section 7.2, action duplication
is very common. It is perhaps not surprising to observe redundant
rules in the community-based IFTTT ecosystem as developers may
publish applets with the same function. A chain length of 8 in a con-
iguration of 38 rules is the longest we observed to contain an action
duplicate violation. The number of group duplication violations we
detected is very small as there are only 113 applets that use group
actions. We further investigated that IoT services in IFTTT provides
more group actions, such as Turn of device vs. Turn of all devices
(Linn) or Disarm all cameras vs. Disarm a camera (Eagle Eye Nubo-
Cam). We envision that as more functionalities are introduced in
IoT devices, these superseding relationships will become more com-
mon, creating the potential for action-duplication vulnerabilities to
signiicantly frustrate the debugging of IoT deployments.
8 DISCUSSION & LIMITATIONS
The motivation of this work is to help users better
Usability.
diagnose potential security problems in their IoT deployments. In
future work, we plan to evaluate the usability of iRuler through
real world IoT user studies, and further characterize actual security
threats. An important component of the future work is to extend
iRuler to provide further assistance to non-expert users when an
inter-rule vulnerability is found.
Similar to Ur’s IFTTT recipe dataset in
The IFTTT Applets Dataset.
[86], our dataset is missing relevant information that is not publicly
available, including values for the trigger ields in each applet and
the applet’s ilter code (i.e., conditions). An interesting direction
for further study is leveraging applet descriptions to attempt to
recover these ields; for example, the applet łGet a phone call alert
when a door is opened during sleeping hours,ž suggests the condition
łduring sleeping hoursž is applied to the call_my_phone action. Note
the model checker of iRuler already supports conditions.
Action Looping. Most of the loops we observed consist of 2 or 3
rules, while the longest loop contains 9 rules in a coniguration of
30 applets. We observed one rule chain that triggered IFTTT to call
Because we lack real-world exam-
Synthetic IoT conigurations.
ples of IoT deployment conigurations, in our evaluation, we use
heuristic strategies to synthesize IoT deployments from our IFTTT
Session 7A: Internet of ThingsCCS ’19, November 11–15, 2019, London, United Kingdom1449dataset. Because ilter code is not publically visible, we conserva-
tively assume in our analysis that any action that may low to a
trigger will low to it. We also assume that environmental factors
are always afected such that the low from action to trigger occurs.
Thus, the vulnerabilities we detect may be absent from real-world
conigurations. However, this method demonstrated the validity of
iRuler for cases in which coniguration data is available. In our
future work, we plan to conduct user studies to evaluate our tool
with real-world IoT conigurations.
Manual Coding of Action-Trigger Flows. Due to the diiculty and
cost of registering for hundreds of IFTTT services, many of which
would require the purchase of one to dozens of devices in order to
exercise, we had to rely on manual coding (not physical invocation)
as our ground truth for information low on IFTTT. It is diicult
to judge the correctness of our manual labeling without physical
ground truth; however, because services are incentivized to write
informative text descriptions of their functionalities, we believe
that our coding was accurate enough to demonstrate the validity
of our NLP approach. Regardless, this coding is a potential source
of error in our analysis.
Applicability. We ensure the generality of our approach through
presenting a realistic trigger-action rule model. While we have
implemented iRuler for IFTTT, this model holds for other sys-
tems (e.g., Zapier and Microsoft Flow), as does the observation that
NLP-based analysis is required due to the closed nature of these
platforms.
9 RELATED WORK
IoT Security. Numerous vulnerabilities have been identiied in
IoT devices [3, 45, 78], protocols [2, 42], apps and platforms [38].
Alrawi et al. [22] proposed a modeling methodology for IoT devices,
associated apps and communication protocols to analyze device-