into the evasion kernel, we ﬁrst pose a simpler question: why
not simply recompile drivers for the Qemu-supported kernel?
Unfortunately, without porting, this can only be done in very
simple cases since the driver relies on the host kernel’s speciﬁc
subsystems, header ﬁles, and conﬁguration. While the effort
needed to port the driver depends on the driver and the host
kernel, in this paper we try to avoid any such porting that
requires understanding of driver semantics all together. Instead
of porting each driver, our goal is to develop a kernel that
would handle missing driver dependencies in a generic way.
We start by listing the evasion kernel requirements.
Evasion kernel requirements. Our ultimate goal is to be
able to load alien drivers, execute their system calls without
crashes, and reach real vulnerabilities. Since a driver lives
in-between the kernel and the hardware, these are the only
two components with which it can interact directly. Thus
for the driver’s proper operation we need to make sure
that communications between the driver and the kernel and
attempted communications from the driver to the hardware
do not lead to a crash or failures and allow the driver to
initialize correctly. Given that, our main goal translates into
the following requirements. The evasion kernel should:
1) Satisfy driver’s software dependencies,
2) Mask hardware dependencies, and
3) Ensure consistency in data structure formats passed be-
tween the kernel and the driver.
We note that the third dependency is also a software depen-
dency, however its nature is quite different and solving it also
requires a different approach. Because of this we put it into a
separate category.
Each host kernel might have a different conﬁguration and
a unique set of dependencies. In order to account for that
and achieve better precision in satisfying the dependencies,
the evasion kernel is reconﬁgured for each host kernel (i.e.
once for all drivers for this kernel) based on the host kernel’s
conﬁguration. As a result, the evasion kernel contains compo-
nents (i.e. scripts and logic) outside of the kernel itself, that are
responsible for reconﬁguring and in some cases, recompiling
the evasion kernel with new conﬁgurations. However, for
the sake of brevity, we will refer to the evasion kernel and
such external tooling simply as the “evasion kernel”. We now
discuss each of the requirements and our design choices in
detail.
B. Software dependencies
Drivers rely on the host kernel functionality and thus, when
compiled as standalone modules, reference the host kernel’s
functions. At the same time, the evasion kernel should be
generic enough to support loading and initializing different
kinds of drivers from different host Android kernels. Conse-
quently, as a trade-off, it will lack some of the functionality,
and thus symbols, present in the host kernel and required
by the driver. As a result, during the module’s relocation
phase, these symbols can’t be resolved as they are simply not
present. To solve this problem, the evasion kernel has a custom
module loading subsystem that intercepts relocation requests
for missing symbols and patches them with stub functions. It
then continues on with the loading making the driver believe
that the evasion kernel does implement the dependent function.
Note that our main goal is not to completely replicate the
behavior of the function in the original host kernel, but rather
to prevent driver from crashing.
By default the evasion kernel substitutes missing functions
with one of two stubs depending on the return type of the
missing function. In the case of integer return type, the evasion
kernel replaces the function with stub0 that always returns
zero. This is based on the common Linux kernel convention for
functions to return zero on success, and a non-zero error code
if an error happened. In case the function returns a pointer, the
evasion kernel replaces it with stubP that allocates a memory
region. This region in turn contains pointers to valid memory
locations. This is to deal with cases when a function returns
pointers to structures that in turn contain pointers. In order
to infer missing function return types, the evasion kernel gets
the list of the module’s exported functions from the module’s
binary and checks their signatures in the host kernel source. It
attaches this information as a part of the binary module itself
as a new ELF section. The evasion kernel’s custom module
loading subsystem then uses this information to decide what
function stub to choose.
Some functions may return non-zero code on success, and
zero otherwise. The evasion kernel has a method to deal with
this case. We deﬁne a third stub stub1 which always returns
1 and patch relocation entries to use stub1 instead of stub0
if the module crashed or did not create a ﬁle in /dev. Only
2 out of the 72 drivers we analyzed requires stub1 so we
never automated this process. However, automating it would
be straightforward: if a driver fails to load (i.e. a crash or
no new ﬁle in /dev), the evasion kernel will try different
combinations of stub0 and stub1 starting with the most
recent relocation that was evaded. In order to give an upper
bound estimate of the total number of combinations, the last
column of Table V in the Appendix shows the total number of
stub uses by drivers (i.e. includes repeated calls of the same
function). In the 2 cases that needed stub1, changing the last
evaded relocations enabled the driver to initialize.
C. Hardware dependencies
The main idea behind hardware evasion is the following:
a) we make the driver believe that the peripheral exists so
that the driver can ﬁnish initialization, and b) we then ignore
each device-driver communication attempt. Though the core
idea to evade the hardware dependency is conceptually similar
for all drivers,
implementation would differ for
different bus types. In this paper, we focus on the platform bus,
which represents a large class of devices that do not support
automatic discovery (e.g I2C or AMBA), and is found on the
majority of Android and embedded devices today.
the exact
1) Reusing device tree entries: As detailed in Section II,
an Android kernel reads the list of peripherals present on
the board from a device tree ﬁle. This suggests that
in
order to make the driver believe that the missing hardware
is present, we need to add an entry with the corresponding
compatible property to the evasion kernel’s device tree.
During initialization, drivers will often query the host kernel to
retrieve yet other properties for the devices they are interacting
with. Like software dependencies, some of these properties can
be generically evaded without knowledge of the device tree
entries themselves. However, there are cases where driver code
relies on speciﬁc assumptions about the device properties. For
example, one value may index into another property, a value
may need to be within a speciﬁc range (e.g. gpio type that can
only take values of 0 and 1), a property may need to match a
string exactly.
Our evasion kernel thus implements two ways for satisfying
device property dependencies. First, if a device tree for the
host kernel is available, the evasion kernel uses it since it
is more reliable and still does not require any porting or a
hardware device. However, blindly copying the device tree
entry from the host kernel to the evasion kernel does not
always work. The original device tree entry might contain
cross-references to other hardware that is absent in the evasion
kernel, for example different interrupt controllers or clocks.
We thus design the evasion kernel to replace references to
interrupt controllers and clocks with analogs that are present
in the evasion kernel (i.e. in vexpress, the base kernel on
which we base our evasion kernel). In order to identify the
compatible property expected by the driver, which must
match the returned device property (see Section II for an
explanation of this property) the evasion kernel ﬁrst loads
the driver with hardware evasion disabled. The evasion kernel
can then observe the compatible property provided by the
driver, search the host kernel’s device tree for the matching
entry, and load it into its current device tree.
Second, if the host kernel’s device tree ﬁle is not available,
or the required device tree entry is not present, then the evasion
kernel falls back on a generic device tree entry that returns
reasonable values for the properties that are most commonly
requested by drivers, reg and interrupts (describe MMIO
ranges and IRQ numbers). If the driver requests another
(unknown in advance) property it is generated dynamically
with value of 1 for integer type and random string for strings.
2) Board ﬁles: Some older drivers expect to work with
board ﬁles instead of device tree ﬁles. Board ﬁles have been
deprecated for quite some time now and are only used in
much older drivers. We still added support for board ﬁles to
our evasion kernel but in its current implementation we need
to extract the corresponding board ﬁle entries manually, after
which we load them dynamically into the evasion kernel. This
copying is mechanical and does not require understanding of
the driver code. The only reason we did not implement the
functionality to automate the copying was the small number
of instances (only seven cases in our experimental dataset)
where it was necessary.
3) Ignoring driver-device communications: During initial-
ization, most of the drivers will use values from device tree en-
tries to register MMIO ranges with ioremap/ioremap_wc
or of_iomap which map the corresponding pages. The eva-
sion kernel intercepts the above functions and redirects them
1
2
3
4
5
6
7
8
struct device {
...
#ifdef CONFIG_PINCTRL
struct dev_pin_info
struct device_node
#endif
...
}
*pins;
*of_node;
Listing 3: Deﬁnition of struct device. The offset
of ﬁeld of_node depends on kernel conﬁguration
to kzalloc. This results in that read and write operations
are ignored. In our case of missing peripherals, reading from
this memory will return arrays of zeroes, and writes will pass
through.
Finally,
the evasion kernel
intercepts and replaces with
custom implementations 15 existing kernel functions whose
behavior depends on the presence of peripheral devices. We list
these differently from the replaced software dependency func-
tions as these are functions that have existing implementations
in the vanilla Linux kernel, whereas software dependencies
replace functions that only exist in the host kernel. The list of
intercepted functions can be found in Appendix A.
D. Kernel-driver API structures layout
In order to successfully load a driver into the evasion kernel
we must ensure that both the evasion kernel and the driver
have the same memory layouts for structures that are a part
of kernel-driver API. Since drivers only use a subset of the
kernel APIs we only need to extract layouts of structures
that are actually used by the driver to speak to the kernel.
We found that for many drivers that we analyzed, only two
structures needed to be aligned between the module and the
kernel, namely struct device and struct file. The
former is used to pass information from the driver to the kernel
during the driver initialization/probing, and the latter is used
when the userspace opens a /dev ﬁle. Depending on the host
kernel and its conﬁguration, these structures will either include
or lack some ﬁelds, and if the driver and the evasion kernel
layouts do not match, the kernel and the driver will read/write
information at different offsets (which will lead to a crash most
of the time).
an
deﬁnition
of
on
the
struct device in Listing
CONFIG_PINCTRL conﬁguration option,
structure
contains an additional ﬁeld which shifts the offset of member
of_node by 4 (on a 32 bit machine). If the module was
compiled with CONFIG_PINCTRL set and the kernel has
CONFIG_PINCTRL unset, then the driver will assume the
offset of of_node is 4 bytes larger than it should be and
access the wrong memory location. This will lead to memory
corruption and prevent the driver from initializing correctly.
In order to avoid this problem, structure layouts in the
the evasion kernel must be compatible with those in the
driver. While aligning these two structures layouts can be done
3. Depending
this
example,
consider
the
As
manually, our evasion kernel uses a technique that enables it to
do this alignment automatically by extracting the appropriate
layout and recompiling the evasion kernel to use a layout that
matches the driver. It learns the structure layouts used by the
driver and then suggests conﬁguration options and additional
ﬁelds for the evasion kernel. With this information an external
script can then reconﬁgure and recompile the evasion kernel
with the new data structure layout. This is done by exploiting
the fact that both the host kernel and the evasion kernel are
Linux kernels, and thus will share a great deal of code that
accesses the data structure whose layout needs to be extracted.
In addition, we also have the source code for the evasion ker-
nel. We describe our approach using only struct_device
for the sake of brevity; recovering layouts of other structures
is similar. First we identify a small set of Linux kernel
functions, that a) accept struct_device as an argument,
and b) use as many of its ﬁelds as possible. Currently, we
use functions i2c_new_device, device_resume, and
device_initialize for struct device layout recov-
ery and __dentry_open for struct file recovery. If
the source code for the host kernel is available we can skip
this and simply make our own kernel module that lists all the
ﬁelds of struct_device. The objective in either cases is
to have binary code compiled from identical source code that
accesses the same structure under both the evasion and host
kernel conﬁgurations.
By comparing the resulting binaries, the evasion kernel can
then recover corresponding ﬁeld offsets for the structures in
both itself and the host kernel. Then using the evasion kernel
source code, the evasion kernel’s external tooling identiﬁes the
necessary conﬁguration settings to make the offsets identical.
It then sets the build conﬁguration and then recompiles the
evasion kernel. In some cases, it is possible for the host kernel
to contain a ﬁeld option that is not present in the evasion
kernel—simply having the host kernels .config ﬁle is not
sufﬁcient because of this. In addition, imprecision may result
in case we don’t use our own module but use existing functions
that use only a subset of ﬁelds. In the ﬁrst case, where a
corresponding conﬁguration option doesn’t exist, the tooling
will insert padding to cause the appropriate ﬁelds to align. In
the latter case, the tooling generates several possible conﬁgu-
rations. Currently, this requires manual intervention to compile
and check which option works, but in our experiments, there
was never more than one conﬁguration, so manual intervention
was not necessary. Moreover, we believe this trial and error
process can be easily automated if necessary.
With our own module that lists all the ﬁelds, the evasion
kernel was able to recover all kernel data structure layouts
in our evaluation. We further tested the technique that uses
existing kernel functions (i2c_new_device and others) on
8 different MSM kernel conﬁgurations that produce 5 different
structure layouts and added 3 more manually selected layouts
(see Appendix F). In all 8 cases, the correct conﬁguration
options and correct additional ﬁelds (i.e. where to add them
and of what size) were produced.
E. Surrogate modules
B. dUnicorn
In most cases, if the kernel initializes correctly, a device ﬁle
in the kernel’s /dev directory is created. This device ﬁle is
needed later to send IOCTLs to the driver. However, an inter-
mediate case arises when due to some missing dependencies
the context is initialized only partially but sufﬁciently enough
for the driver to work, but the device never creates the device
ﬁle. This may happen for example if at the end of initialization
the driver requires the peripheral to return a speciﬁc value,
which fails since evasion is imprecise and cannot account for
all possible values. Without the device ﬁle, a user process has
no way of invoking the driver’s system call handlers, which
prevents them from being analyzed. In case no device ﬁle
is created, the evasion kernel provides functionality to create
a “surrogate” device ﬁle and attach the driver’s system call
handlers to the device (by looking up the handlers in the
memory with kallsyms_lookup_name()). This allows
EASIER to invoke the driver’s system call handlers from the
userspace and analyze them.
IV. FUZZING AND SYMBOLIC EXECUTION WITH EASIER
Once the driver is loaded and initialized with missing de-
pendencies taken care of, we can manually analyze the driver,
verify vulnerabilities and prepare proof-of-concept exploits for
known bugs or bugs found via static analysis. However, our
real objective is fuzzing and symbolic execution of drivers for
automatic bug discovery. EASIER enables this by “running”
drivers as userspace programs.
EASIER ﬁrst extracts the initialized state of the driver
and kernel into a memory snapshot. Then inputs from an
input ﬁle are read and injected into the memory snapshot
and the image is loaded and executed in a custom CPU-
only emulator called dUnicorn which is based on the Unicorn
library [30]. To execute the extracted memory snapshot as a
userpace program, certain kernel functions, which cannot exe-
cute without hardware are replaced by our custom equivalents.
Additionally, because each driver has its own IOCTL input
format, dUnicorn dynamically infers the format of the IOCTL
inputs so that our analysis can produce semantically valid
inputs. Using the image and dUnicorn, EASIER can proceed
to perform fuzzing and symbolic execution of IOCTL system
calls, identify vulnerabilities, and automatically generate bug-
triggering programs. We describe each of the components in
more detail in this section.
A. Memory snapshot
EASIER takes a snapshot of the entire evasion kernel image
by ﬁrst issuing a system call (using a userspace program
running on the evasion kernel). Once execution enters the
evasion kernel EASIER pauses the emulator and dumps all
memory pages and register values (see Appendix B-A for
implementation details). Our EASIER prototype currently uses
Qemu as the emulator to run the evasion kernel and produce
the snapshot.
To run the snapshot, dUnicorn loads it into emulated mem-
ory and restores the saved register values. It then uses an input
ﬁle to write speciﬁed values into memory and registers. For
example, when executing a system call handler in a driver
(e.g. IOCTL, read, write), dUnicorn reads the input ﬁle and
uses its content as the argument to the system call. This is
done by copying the ﬁle content into unused space in the
emulated memory, and setting the corresponding register to
point to that memory. This allows one to test the system
call against different potentially malicious inputs. Control is
then transferred to the system call entry point where the
snapshot was taken. dUnicorn then emulates CPU instructions
up to the point where it is about to leave the system call
and return back to userspace (speciﬁcally, once the execution
reaches ret_fast_syscall). If some instruction tries to
access emulated memory that was not mapped, dUnicorn raises
a SEGFAULT event. In other words, dUnicorn runs as a
userspace program that crashes on some input only if the driver
inside the kernel would crash on the same input, and ﬁnishes
successfully otherwise.
The biggest advantage over static analysis is that in our
approach the execution context and kernel structures are
deﬁned and initialized. Thus,
the analysis becomes much
more precise. For example, alternatives like under-constrained
symbolic execution [10] (UC) treat all uninitialized state as
symbolic, and then later tries to ﬁnd both an input and a state
that can trigger a bug. However, for complex programs like
an OS kernel, the symbolic state can become large and lead
to path explosion. Moreover, the large state can also become
beyond what can be solved by a constraint solver. EASIER
elides these problems by producing an initialized state that is
precise enough for dynamic analysis.
C. Replacing kernel functions
As a CPU-only emulator, dUnicorn only emulates ARM
instructions and no other hardware. Thus, dUnicorn needs
to intercept and redirect accesses to hardware that dUnicorn
doesn’t emulate. The intercepted functions fall
into three
main categories. First, since there is no MMU in CPU-only
emulation, the kernel code is not able to map new physical
pages. In most cases, this does not create any difﬁculties as
all the memory that the driver uses or is going to request is
likely to be already mapped by the slub allocator. Nonetheless
if a driver does allocate memory after initialization, dUnicorn
intercepts and replaces memory allocation routines such as
kzalloc, krealloc, and kfree with calls to a simple
custom memory allocator that allocates chunks from unused
emulated memory. Second, dUnicorn intercepts calls that