意思是：你想要生成基于时间生成验证码吗？这里需要需要输入 `y`。
输入 `y`之后你将看到一个代表着该“场景”密钥的二维码和密钥字符串，它使用如下二维码图形格式表示我们数字形态的密钥（这里也提供了一个用于在浏览器中再次显示该二维码的 URL，但是需要翻墙）。接着我们要用到它在“运维密码”上完成配置。（安装 google-authenticator 过程中若出现二维码无法显示的问题，请检查系统中是否安装了二维码生成器：`rpm - q qrencode`，若未安装，请运行命令 `yum install qrencode -y` 安装后重试。）
![](/data/attachment/album/201703/29/223836dy0wpp1ct0phy5g1.png)
在二维码和密钥字符串后面，接着显示了一个当前的校验码和几个紧急密钥。紧急密钥你可以另行保存的一个安全的地方，以防你在无法使用 Google 身份验证器应用或“运维密码”时使用（紧急密钥是 8 位的，不同于普通的 6 位密钥，也是一次性使用的）。
![](/data/attachment/album/201703/29/223951fn5r958jililyz0k.jpg)
保存 Google 服务器端组件的配置文件，Google 身份验证器虽然运行了，但是相关设置还没有保存，接下来会提示保存：
```
Do you want me to update your "/root/.google_authenticator" file? (y/n) 
```
意思是：你想将配置文件更新到 `/root/.google_authenticator` 保存吗？
输入 `y` 回车。
**禁止同一令牌多次登录**
```
Do you want to disallow multiple uses of the same authentication
token? This restricts you to one login about every 30s, but it increases
your chances to notice or even prevent man-in-the-middle attacks (y/n)
```
意思是：你是否要禁用同一密钥多次登录，这将限制你每 30 秒只能使用该密钥登录一次，但这能够让你可以更多地被提醒受到了中间人攻击，甚至能够防止这种攻击。
输入 `y` 回车。
**时间容错设置**
```
By default, tokens are good for 30 seconds. In order to compensate for
possible time-skew between the client and the server, we allow an extra
token before and after the current time. If you experience problems with
poor time synchronization, you can increase the window from its default
size of +-1min (window size of 3) to about +-4min (window size of
17 acceptable tokens).
Do you want to do so? (y/n) 
```
意思是：默认情况下，密钥在 30 秒内有效，为了防止由于客户端与服务器时间偏移（时间相差太大）导致认证失败，google 身份验证器设计了时间容错措施。可以让你使用与当前时间偏移 1 到 4 分钟的密钥。
这个可根据实际情况进行配置，一般一分钟就足够了。
输入 `y`回车。
**暴力破解防护**
```
If the computer that you are logging into isn't hardened against brute-force
login attempts, you can enable rate-limiting for the authentication module.
By default, this limits attackers to no more than 3 login attempts every 30s.
Do you want to enable rate-limiting (y/n) 
```
意思是：为了避免暴力破解，可以启用速率限制，默认情况下，每 30 秒只能尝试 3 次。
输入 `y`回车。
**配置完成**
配置完成后会在home目录下生成一个权限为 400 的隐藏文件，如下图所示：
![](/data/attachment/album/201703/29/224056m505osu5rj77yr5n.jpg)
#### 配置运维密码
**打开微信小程序**
打开微信，依次点击“发现”，“小程序”，输入“运维密码”并搜索。或长按识别下列二维码：
![](/data/attachment/album/201704/18/231139di7prrdkpi7o45rd.jpg)
点击“运维密码”进入应用，然后点击列表下方的“添加场景”：
![场景列表](/data/attachment/album/201704/14/083650lp2xivllix52x5p3.jpg "场景列表")
这会调起“扫一扫”功能，请扫描配置 google-authenticator 时所生成的二维码，然后会识别出该场景信息，你可以根据需要修改场景信息，点击确定添加场景。
这样 Google 身份验证器就和“运维密码”匹配上了。下面我们要使 SSH 服务可以支持该验证。
### 配置 SSH 服务
**添加认证模块**
使用如下命令在 `/etc/pam.d/sshd` 文件添加认证模块：
```
echo "auth required pam_google_authenticator.so" >>/etc/pam.d/sshd
```
在 Centos 6.6 或更低的版本中如果遇到无法进行 google-authenticator 验证的情况，请将 `auth required pam_google_authenticator.so`放在 `/etc/pam.d/sshd` 文件的最顶端进行测试一下。
配置挑战式密码认证：
```
sed -i 's/ChallengeResponseAuthentication no/ChallengeResponseAuthentication yes/g' /etc/ssh/sshd_config
```
重启 sshd 服务：
```
systemctl restart sshd.service
```
**切记，如果你是远程登录到服务器上配置，切勿退出当前的 SSH 会话，而应该另外开一个会话去测试 SSH 登录。重启不会中断当前的 SSH 会话。**
### 测试登录
以上配置完成基本上就搞定了，下面我们进行测试。
#### 密码登录测试
另外开一个终端窗口进行连接，不要关闭当前的 SSH 连接。
输入命令登录主机：
```
ssh root@10.112.2.3
```
首先输入服务器的密码，接着会让输入“运维密码”生成的 6 位数字密钥。
![场景详情](/data/attachment/album/201704/14/083653nelhc0w7pwme1cl0.jpg "场景详情")
如下图：
![](/data/attachment/album/201703/29/225450t8tretbcyn5ierkc.jpg)
我们可以看到，在登录的时候，需要配合“运维密码”才能登录服务器。
#### 公钥登录测试
如果使用公钥登录呢？以上配置是不是也是需要配合“运维密码”才能登录的，我们进行验证一下：
首先，我们将本机的公钥复制到远程机器的 `authorized_keys` 文件中。
```
ssh-copy-id root@10.112.2.3
```
![](/data/attachment/album/201703/29/225550s5at35jpqppi5ppa.jpg)
登录测试：
![](/data/attachment/album/201703/29/230656kzuywsks3yqqyb38.jpg)
我们可以看到，不需要输入任何密码和一次性密钥，直接登录到了系统。
#### 结合运维密码配置增强型SSH安全选项
针对上面公钥登录的测试，如果认为还不是很安全，我们可以设定如下登录场景：公钥 + 密码 + 运维密码，我们需要如何做呢？
配置 SSH 公钥双因子
修改 `/etc/ssh/sshd_config` 配置文件：
```
echo "AuthenticationMethods publickey,keyboard-interactive:pam" >>/etc/ssh/sshd_config
```
重启 SSH 服务：
```
systemctl restart sshd.service
```
登录测试（同样，请新开窗口）：
```
ssh root@10.112.2.3
```
![](/data/attachment/album/201703/29/230833bwbvtrjnvrb9j9ys.jpg)
可以看到，登录的时候是需要验证公钥、密码，及输入“运维密码”生成的密钥才能登录到系统。
没有密钥的情况下尝试登录测试，如下图：
![](/data/attachment/album/201703/29/230911xg58rugdnuw81z54.jpg)
### 总结
至此，本文结束，更多的使用细节可以参照小程序内的帮助，或[此文](/article-8317-1.html)。
如有错误及不足欢迎指正。也欢迎大家加入到这个小程序的开发当中，将这个小程序应用到你的应用场景中。