AuthnRequestï¼Œ`Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"`will
normalized (removing comments and other operations) and compressed, and the
final content will be as above.
Then perform the SHA-256 digest algorithm on this part of the content:
The call stack to the signature is as follows:
    engineSign:190, RSASignature (sun.security.rsa)
    engineSign:1235, Signature$Delegate (java.security)
    sign:598, Signature (java.security)
    engineSign:133, SignatureBaseRSA (org.apache.xml.security.algorithms.implementations)
    sign:174, SignatureAlgorithm (org.apache.xml.security.algorithms)
    sign:628, XMLSignature (org.apache.xml.security.signature)
    signObject:77, Signer (org.opensaml.xml.signature)
    signMessage:193, BaseSAML2MessageEncoder (org.opensaml.saml2.binding.encoding)
    doEncode:109, HTTPPostEncoder (org.opensaml.saml2.binding.encoding)
    encode:52, BaseMessageEncoder (org.opensaml.ws.message.encoder)
    sendMessage:224, SAMLProcessorImpl (org.springframework.security.saml.processor)
    sendMessage:42, ConfigurableSAMLProcessor (mujina.sp)
    sendMessage:148, AbstractProfileBase (org.springframework.security.saml.websso)
    sendAuthenticationRequest:107, WebSSOProfileImpl
Sign the SingedInfo using the SP's private key (configured in the
application.yml file):
    UEOuyyx4dWr3X0XoQryWQfSzNpXleQ5zSg9LayAEX7E=
After these processes, the xml of the AuthnRequest seen is the one that was
captured and decoded before:
Finally, there is an http post that transmits base64 encoding, so what you see
in the capture is also base64 encoding.
#### IDP receives AuthnRequest processing
The AuthnRequest sent by SP is extracted and verified in
`mujina.idp.SAMLMessageHandler#extractSAMLMessageContext`:
The security policy for AuthnRequest verification only detects whether the
IssueInstant has expired, and there are no other policies. Then there is the
validatorSuites detection, you can see that there are two types of validators,
each with multiple labels corresponding to the specific validator. However,
the test found that IDP did not perform certificate verification, signature
verification, and digest verification on AuthnRequest.
#### IDP generates AuthnResponse
For Assertion signature, the call stack is as follows:
    calculateDigest:719, Reference (org.apache.xml.security.signature)
    generateDigestValue:406, Reference (org.apache.xml.security.signature)
    generateDigestValues:206, Manifest (org.apache.xml.security.signature)
    sign:609, XMLSignature (org.apache.xml.security.signature)
    signObject:77, Signer (org.opensaml.xml.signature)
    signAssertion:153, SAMLBuilder (mujina.saml)
    sendAuthnResponse:123, SAMLMessageHandler (mujina.idp)
    doSSO:77, SsoController (mujina.idp)
    singleSignOnServicePost:55, SsoController (mujina.idp)
The summary is as follows:
Summary content:
    http://mock-idp111111http://mock-spurn:oasis:names:tc:SAML:2.0:ac:classes:Passwordhttp://mock-idpJohn Doe111111sdsdsdsdJohn PI:EMAIL@example.comexample.com
The same transform algorithm as the previous SP generated AuthnRequest is also
used here, so the Signature tag is excluded and normalized. The SingedInfo
will be signed later, in the same way as the AuthnRequest signature. The
private key for the signature is configured in the application.yml file.
The Response tag will be digested and signed later:
    calculateDigest:719, Reference (org.apache.xml.security.signature)
    generateDigestValue:406, Reference (org.apache.xml.security.signature)
    generateDigestValues:206, Manifest (org.apache.xml.security.signature)
    sign:609, XMLSignature (org.apache.xml.security.signature)
    signObject:77, Signer (org.opensaml.xml.signature)
    signMessage:193, BaseSAML2MessageEncoder (org.opensaml.saml2.binding.encoding)
    signMessage:97, HTTPPostSimpleSignEncoder (org.opensaml.saml2.binding.encoding)
    doEncode:109, HTTPPostEncoder (org.opensaml.saml2.binding.encoding)