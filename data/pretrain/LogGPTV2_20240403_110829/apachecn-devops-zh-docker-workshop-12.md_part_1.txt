# 十二、最佳实践
概观
在本章中，您将学习在使用 Docker 和您的容器映像时使用的一些最佳实践。这将使您能够监视和管理容器使用的资源，并限制它们对主机系统的影响。您将分析 Docker 的最佳实践，并了解为什么每个容器只运行一个服务很重要，确保您的容器是可扩展和不可变的，并确保您的底层应用在短时间内启动。本章将帮助您在应用和容器运行之前，借助`hadolint's` `FROM:latest`命令和`dcvalidator`通过林挺您的`Dockerfiles`和`docker-compose.yml`文件来实现这些最佳实践。
# 简介
关于安全性的前一章介绍了 Docker 映像和服务的一些最佳实践，这些实践遵循了这些最佳实践。我们确保了我们的映像和服务是安全的，并且它们限制了攻击者访问映像所能达到的效果。本章不仅将带您了解创建和运行我们的 Docker 映像的最佳实践，还将重点介绍容器性能、配置我们的服务，以及确保在这些服务上运行的服务尽可能高效地运行。
我们将在本章开始深入研究如何监控和配置服务使用的资源，例如内存和 CPU 使用情况。然后，我们将带您了解一些您可以在项目中实现的重要实践，看看您如何创建 Docker 映像以及在其上运行的应用。最后，本章将为您提供一些实用的工具来测试您的`Dockerfiles`和`docker-compose.yml`文件，这将作为确保您遵循上述实践的一种方式。
本章展示了如何确保尽可能优化您的服务和容器，以确保它们在从开发环境到生产的整个过程中无问题地运行。本章的目标是确保您的服务尽可能快地启动，并尽可能高效地处理。本章中提到的实践还确保了可重用性(也就是说，它们确保了任何想要重用您的映像或代码的人都可以这样做，并且能够具体地了解任何时候正在发生的事情)。首先，下一节讨论如何使用容器资源。
# 使用容器资源
从传统服务器环境迁移到 Docker 的主要好处之一是，它使我们能够大幅减少服务和应用的占用空间，即使在迁移到生产环境时也是如此。然而，这并不意味着我们可以简单地在我们的容器上运行任何东西，期望所有的进程简单地完成它们的执行。正如我们需要独立服务器上运行的服务的资源一样，我们需要确保容器使用的资源(如 CPU、内存和磁盘输入输出)不会导致生产环境或任何其他容器崩溃。通过监控我们的开发系统中使用的资源，我们可以帮助优化流程，并确保最终用户在进入生产时体验到无缝操作。
通过测试我们的服务和监控资源使用情况，我们将能够了解正在运行的应用所需的资源，并确保运行我们的 Docker 映像的主机有足够的资源来运行我们的服务。最后，正如您将在接下来的章节中看到的，我们还可以限制容器可以访问的 CPU 和内存资源的数量。当在 Docker 上开发我们的服务时，我们需要在我们的开发系统上测试这些服务，以确切地知道当它们被移动到测试和生产环境中时会发生什么。
当我们将许多不同的服务(如数据库、网络服务器和应用编程接口网关)结合在一起创建应用时，有些服务比其他服务更重要，在某些情况下，这些服务可能需要分配更多的资源。然而，在 Docker 中，运行的容器在默认情况下对它可以使用的资源没有真正的限制。
在前面的章节中，我们学习了使用 Swarm 和 Kubernetes 的编排，这有助于在您的系统中分配资源，但是这一章的这一部分将教您一些测试和监控资源的基本工具。我们还将研究如何配置容器，使其不再使用默认的可用资源。
为了帮助我们完成本章的这一部分，我们将创建一个新的映像，该映像仅用于演示系统中的资源使用情况。在本节的第一部分，我们将创建一个映像，添加一个名为 stress 的应用。压力应用的主要功能是给我们的系统施加沉重的负载。该映像将允许我们查看主机系统上正在使用的资源，然后允许我们在运行 Docker 映像时使用不同的选项来限制正在使用的资源。
注意
本章的这一部分将为您提供一些关于监控我们正在运行的 Docker 容器的资源的简单指南。这一章将只涵盖一些简单的概念，因为我们将在这本书的整整一章中提供关于监视您的容器度量的深入细节。
为了帮助我们查看正在运行的容器正在消耗的资源，Docker 提供了`stats`命令作为正在运行的容器正在消耗的资源的实时流。如果您希望限制流呈现的数据，尤其是如果您有大量容器正在运行，您可以通过指定容器的名称或其 ID 来指定只提供某些容器:
```
docker stats 
```
`docker` `stats`命令的默认输出将为您提供容器的名称和 ID、容器正在使用的主机 CPU 和内存的百分比、容器正在发送和接收的数据以及从主机存储中读取和写入的数据量:
```
NAME                CONTAINER           CPU %
docker-stress       c8cf5ad9b6eb        400.43%
```
下一节将重点介绍我们如何使用`docker stats`命令来监控我们的资源。我们还将为`stats`命令提供格式控制，以便只提供我们需要的信息。
# 管理容器 CPU 资源
本章的这一部分将向您展示如何设置容器使用的 CPU 数量的限制，因为没有限制的容器运行可能会耗尽主机服务器上所有可用的 CPU 资源。我们将考虑优化我们正在运行的 Docker 容器，但是使用大量 CPU 的实际问题通常在于底层基础架构或容器上运行的应用。
当我们讨论 CPU 资源时，我们通常指的是单个物理计算机芯片。如今，一个中央处理器很可能有不止一个内核，更多的内核意味着更多的进程。但这并不意味着我们有无限的资源。当我们显示正在使用的 CPU 百分比时，除非您的系统只有一个 CPU 和一个内核，否则您很可能会看到超过 100%的 CPU 正在使用。例如，如果您的系统的 CPU 中有四个核心，并且您的容器正在使用所有的 CPU，您将看到一个 400%的值
我们可以通过提供`--format`选项来修改运行在我们系统上的`docker stats`命令，只提供 CPU 使用的详细信息。该选项允许我们指定所需的输出格式，因为我们可能只需要`stats`命令提供的一个或两个指标。以下示例将`stats`命令的输出配置为以`table`格式显示，仅显示容器的名称、标识和使用的 CPU 百分比:
```
docker stats --format "table {{.Name}}\t{{.Container}}\t{{.CPUPerc}}"
```
如果没有 Docker 映像在运行，该命令将提供一个包含以下三列的表:
```
NAME                CONTAINER           CPU %
```
为了控制我们的运行容器在中央处理器上使用的内核数量，我们可以使用`docker run`命令的`--cpus`选项。以下语法向我们展示了如何运行映像，但通过使用`--cpus`选项来限制映像可以访问的内核数量:
```
docker run --cpus 2 
```
更好的选择不是设置一个容器可以使用的内核数量，而是设置它可以共享的内核总数。Docker 提供了`--cpushares`或`-c`选项来设置容器可以使用的处理能力的优先级。通过使用这个选项，这意味着在运行容器之前，我们不需要知道主机有多少个内核。这也意味着我们可以将正在运行的容器转移到不同的主机系统，而不需要更改运行映像的命令。
默认情况下，Docker 将为每个正在运行的容器分配 1，024 个份额。如果将`--cpushares`值设置为`256`，它将拥有其他运行容器的四分之一处理份额:
```
docker run --cpushares 256 
```
注意
如果您的系统上没有其他容器在运行，即使您已经将`--cpushares`值设置为`256`，该容器也将被允许用尽剩余的处理能力。
即使您的应用可能运行良好，但最好还是看看当您减少它可用的 CPU 数量时它会如何工作，以及在它正常运行时它会消耗多少。
在下一个练习中，我们将使用`stress`应用来监控系统上的资源使用情况。
注意
请使用`touch`命令创建文件，使用`vim`命令使用 vim 编辑器处理文件。
## 练习 12.01:了解 Docker 映像上的 CPU 资源
在本练习中，您将首先创建一个新的 Docker 映像，它将帮助您在系统上生成一些资源。我们将演示如何使用安装在映像上的`stress`应用。该应用将允许您开始监控系统上的资源使用情况，并允许您更改映像正在使用的 CPU 资源数量:
1.  新建`Dockerfile`并打开你喜欢的文本编辑器，输入以下详细信息。您将使用 Ubuntu 作为基础创建映像，因为`stress`应用尚未作为一个包提供，无法轻松安装在阿尔卑斯山的基础映像上:
    ```
    FROM ubuntu
    RUN apt-get update && apt-get install stress
    CMD stress $var
    ```
2.  使用`docker build`命令的`-t`选项构建新映像并将其标记为`docker-stress`:
    ```
    docker build -t docker-stress .
    ```
3.  在运行新的`docker-stress`映像之前，先停止并移除所有其他容器，以确保结果不会被我们系统上运行的其他容器混淆:
    ```
    docker rm -f $(docker -a -q)
    ```
4.  On *line 3* of the `Dockerfile`, you'll notice that the `CMD` instruction is running the stress application following the `$var` variable. This will allow you to add command-line options directly to the stress application running on the container via environment variables, without having to build a new image every time you want to change the functionality. Test this out by running your image and using the `-e` option to add environment variables. Add `var="--cpu 4 --timeout 20"` as a command-line option to the `stress` command:
    ```
    docker run --rm -it -e var="--cpu 4 --timeout 20" docker-stress
    ```
    `docker run`命令添加了`var="--cpu 4 --timeout 20"`变量，该变量将使用这些命令行选项专门运行`stress`命令。`--cpu`选项表示将使用系统的四个 CPU 或核心，而`--timeout`选项将允许压力测试运行指定的秒数——在本例中为`20`:
    ```
    stress: info: [6] dispatching hogs: 4 cpu, 0 io, 0 vm, 0 hdd
    stress: info: [6] successful run completed in 20s
    ```
    注意
    如果我们需要连续运行`stress`命令而不停止，我们将简单地不包括`--timeout`选项。我们的示例都包括`timeout`选项，因为我们不想忘记并持续使用正在运行的主机系统上的资源。
5.  Run the `docker stats` command to see what effect this has on your host system. Limit the output provided to only give CPU usage by using the `--format` option:
    ```
    docker stats --format "table {{.Name}}\t{{.Container}}\t{{.CPUPerc}}"
    ```
    除非您的系统上运行了一个容器，否则您应该只看到表标题，类似于这里提供的输出:
    ```
    NAME                CONTAINER           CPU %
    ```
6.  当`stats`命令运行时，移动到新的终端窗口并再次运行`docker-stress`容器，如本练习的*步骤 4* 所示。使用`docker stress`命令时，使用`--name`选项确保您正在查看正确的映像:
    ```
    docker run --rm -it -e var="--cpu 4 --timeout 20" --name docker-stress docker-stress
    ```
7.  移回终端运行`docker stats`。现在，您应该看到一些输出呈现在您的桌面上。您的输出将与以下不同，因为您的系统上运行的内核数量可能不同。下面的输出显示，我们的 CPU 百分比有 400%被使用。运行命令的系统有六个内核。它显示压力应用 100%使用四个可用的核心:
    ```
    NAME                CONTAINER           CPU %
    docker-stress       c8cf5ad9b6eb        400.43%
    ```
8.  Once again, run the `docker-stress` container, this time with `8` set for the `--cpu` option:
    ```
    docker run --rm -it -e var="--cpu 8 --timeout 20" --name docker-stress docker-stress
    ```
    正如您在下面的统计输出中看到的，我们已经达到了您的 Docker 容器几乎 100%使用我们系统上所有六个内核的极限，为我们系统上的小进程留下了少量的处理能力: