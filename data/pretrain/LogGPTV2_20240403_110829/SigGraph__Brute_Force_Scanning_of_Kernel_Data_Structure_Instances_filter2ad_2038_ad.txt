0
8
4
42
13
1
30
0
55
4
7
62
3
51
4
8
8
12
14
33
50
20
3
4
21
10
59
31
4
38
1
|A|
244
5
11
68
17
41
9
9
7
17
16
41
53
24
2
8
37
6
34
39
6
44
2
Table 2. Summary of data structure signatures for Linux kernel 2.6.18(cid:173)1
The |R| column shows the number of data structure in-
stances detected by the scanning. Due to the limitation of
crash, the ground-truth instances are live, namely reach-
able from global or stack variables. On the other hand,
brute force scanning can further identify freed-but-not-yet-
reallocated objects that are not reachable from global or
stack variables. Such freed objects detected would be
counted as false positives (FPs) when compared with the
ground truth from crash. As such, we present two FP
numbers: (1) |F P ′| for those false positives that include the
freed objects and (2) |F P | for those that do not include the
freed objects (hence |F P ′| ≥ |F P |). The false negative
F N indicates those missed by scanning but present among
the ground truth objects from crash.
Among the 23 data structures, SigGraph perfectly
(namely with accuracy and completeness) identiﬁes all in-
stances of 16 of the data structures when freed objects are
considered FPs (i.e., both F P ′ and F N are zero); whereas
value invariant signatures perfectly identify only 5 of the
data structures. When freed objects are not considered
FPs, 20 data structures can be perfectly identiﬁed by Sig-
Graph whereas value invariant signatures perfectly identify
9. We also note that, with the exception of dentry, Sig-
Graph signatures achieve equal or (much) lower false posi-
tive rate than value invariant-based signatures. No FNs are
observed for SigGraph, while some are observed for the
value invariant-based approach.
False Positive Analysis.
Table 3 shows that Sig-
Graph results in false positives (|F P |) for three of the
23 data structures: vm area struct, dentry, and
sysfs dirent. We carefully examine the memory snap-
shot and identify the reasons as follows.
struct vm_area_struct {
   [0] struct mm_struct *vm_mm;
   [4] long unsigned int vm_start;
   [8] long unsigned int vm_end;
  [12] struct vm_area_struct *vm_next;
  [16] pgprot_t vm_page_prot;
  [20] long unsigned int vm_flags;
  ...
}
struct task_struct{
   [156] struct mm_struct *active_mm;
   [160] struct linux_binfmt *binfmt; 
   [164] long int exit_state; 
   [168] int exit_code; 
   [172] int exit_signal; 
   [176] int pdeath_signal;
   [180] long unsigned int personalit;
}
0xc035dc9c : 0xce8e04e0  0x00000000  0x00000000  0x00000000
0xc035dcac : 0x00000000  0x00000000  0x00000000  0x00000000
0xc035dcbc : 0x00000000  0x00000000  0xc035dc00  0xc035dc00
0xc035dccc : 0xc12f1704  0xc12f1704  0xc035dcd4  0xc035dcd4
0xc035dcdc : 0xc035dc00  0x00000000  0x00000000  0x00000000
0xc035dcec : 0x00000000  0x00000000  0x00000000  0x00000000
0xc035dcfc : 0x00000000  0x00000000  0x00000000  0x00000000
0xc035dd0c : 0x00000000  0x00000000  0x00000000  0x00000000
0xc035dd1c : 0x00000000  0x02bf54e4  0x00000000  0x002eff84
0xc035dd2c : 0x00000000  0x00000000  0x00000000  0x00000000
0xc035dd3c : 0x00000000  0x00000000  0x00000000  0x00000000
0xc035dd4c : 0xc035dd4c  0xc035dd4c  0xc035dd54  0xc035dd54
Figure
vm area struct
6.
False
positive
analysis
of
• vm area struct We have 9 false positives (FPs)
among the 2233 detected instances. After dynamic re-
ﬁnement, some pointer ﬁelds are pruned, such as the
pointer ﬁeld at offset 12 (as shown in Figure 6). The
resultant signature consists of a pointer ﬁeld at offset 0
(mm struct), followed by a sequence of non-pointer
ﬁelds, and so on. However, ﬁeld task struct start-
ing from offset 156 has the same pointer pattern as
that of vm area struct except that offset 160 is a
pointer. Unfortunately, in some rare cases that are not
captured by our proﬁler, the pointer ﬁeld at offset 160
becomes 0, leading to the 9 FPs.
• dentry We have 2 FPs of dentry, which are
shown in Figure 7(a). We consider these two in-
stances as FPs because they cannot be found in ei-
ID
Data Structure Name
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
task struct
thread info
key
mm struct
vm area struct
shmem inode info
kmem cache
files struct
fs struct
file
dentry
proc inode
ext3 inode info
vfsmount
inode security
sysfs dirent
socket alloc
socket
sock
bdev inode
mb cache entry
signal struct
user struct
|I|
88
88
22
52
2174
232
127
53
52
791
31816
885
38153
28
40067
2105
75
55
55
25
520
73
10
SigGraph Signature
Value Invariant Signature
|R|
88
88
22
54
2233
232
127
53
60
791
38611
885
38153
28
40365
2116
75
55
55
25
633
73
10
F P ′
0.00%
0.00%
0.00%
3.70%
2.64%
0.00%
0.00%
0.00%
13.33%
0.00%
17.60%
0.00%
0.00%
0.00%
0.74%
0.52%
0.00%
0.00%
0.00%
0.00%
17.85%
0.00%
0.00%
F P
F N
|R|
0.00%
0.00%
0.00%
0.00%
0.40%
0.00%
0.00%
0.00%
0.00%
0.00%
0.01%
0.00%
0.00%
0.00%
0.00%
0.52%
0.00%
0.00%
0.00%
0.00%
0.00%
0.00%
0.00%
0.00%
0.00%
0.00%
0.00%
0.00%
0.00%
0.00%
0.00%
0.00%
0.00%
0.00%
0.00%
0.00%
0.00%
0.00%
0.00%
0.00%
0.00%
0.00%
0.00%
0.00%
0.00%
0.00%
88
93
19
55
2405
226
5124
50
60
791
31816
470
38153
28
142290
88823
75
49
43
24
638
72
10591
F P ′
0.00%
6.45%
0.00%
5.45%
9.61%
0.00%
97.52%
0.00%
13.33%
0.00%
0.00%
0.00%
0.00%
0.00%
71.84%
97.63%
0.00%
0.00%
0.00%
0.00%
18.50%
0.00%
99.91%
F P
F N
0.00%
6.45%
0.00%
0.00%
7.52%
0.00%
97.52%
0.00%
0.00%
0.00%
0.00%
0.00%
0.00%
0.00%
70.93%
97.63%
0.00%
0.00%
0.00%
0.00%
0.00%
0.00%
99.91%
0.00%
1.08%
15.79%
0.00%
0.00%
2.65%
0.00%
6.00%
0.00%
0.00%
0.00%
88.30%
0.00%
0.00%
0.00%
0.00%
0.00%
12.24%
27.90%
4.17%
0.00%
1.39%
0.00%
Table 3. Experimental results of SigGraph signatures and value invariant(cid:173)based signatures
ther the pool of live objects or the pool of freed ob-
jects. However, if we carefully check each ﬁeld’s
value, especially the boxed ones: 0xdead4ead
(SPINLOCK MAGIC at offset 12) and 0xcf91fe00
(a pointer to dentry operations at offset 88), we
cannot help but thinking that these are indeed dentry
instances instead of FPs. We believe that they belong
to the case where the slab allocator has freed the mem-
ory page of the destroyed dentry instances.
• sysfs dirent We have 6 FPs of sysfs dirent
among the 2116 detected instances. The detailed mem-
ory dumps of the 6 FP cases are shown in Figure 7(b).
After our dynamic reﬁnement, the ﬁelds at offsets 32
and 36 are pruned because they often contain null
pointers. And the ﬁnal signature entails checking two
list head data structures followed by a void*
pointer (at offsets 4, 8, 12, 16 and 20, respectively)
and checking four non-pointer ﬁelds. Note that each
list head has only two ﬁelds: previous and next
pointer. There are 6 memory chunks that match our
signature in the test memory image. But the chunks
are not part of the ground truth. We suspect that these
chunks are aggregations of multiple data structures
and the aggregations coincidentally manifest the same
pattern.
Summary: In this experiment, SigGraph achieves zero FN
and (much) lower FP rates.
Intuitively, the reasons are
the following: (1) SigGraph-base signatures are structure-
oriented and thus tend to be more stable than value-oriented
approaches. And their uniqueness can be algorithmically
determined – that is, we can expand a signature along avail-
able points-to edges to achieve uniqueness. (2) SigGraph-
based signatures are more “informative” as each signature
includes information about other data structures; whereas a
value-based signature only carries information about itself.
7.3 Multiple Signatures
One powerful feature of SigGraph is that multiple sig-
natures can be generated for the same data structure (Sec-
tion 4). We perform the following experiments with the
task struct data structure to verify that.
In each
experiment, we exclude one of the 38 pointer ﬁelds of
task struct (considering that pointer corrupted) before
running Algorithm 1. In each of the 38 experiments, the
algorithm is still able to compute a unique, alternative sig-
nature for task struct. Next, we increase the number
of corrupted pointer ﬁelds from 1 to 2, and conduct ¡ 2
38¢
runs of Algorithm 1 (exhausting the combinations of the
two pointers excluded). The algorithm is still able to gener-
ate a valid signature for each run.
The above experiments indicate that SigGraph is robust
in the face of corrupted pointer ﬁelds. However, the robust-
ness does have its limit. At the other extreme, we exclude
37 of the 38 pointer ﬁelds of task struct and conduct
¡37
38¢ = 38 runs of Algorithm 1. Among the 38 runs, Al-
gorithm 1 only generates valid signatures in 4 runs, where
one of the following pointers is retained: fs struct,
files struct, namespace, and signal struct.
7.4 Performance Overhead