used to carry out each APT stage. HOLMES generates a high-
level graph that summarizes the attacker’s steps in real-time.
We evaluate HOLMES against nine real-world APT threats and
deploy it as a real-time intrusion detection tool. The results
show that HOLMES successfully detects APT campaigns with
high precision and low false alarm rates.
ACKNOWLEDGMENTS
We thank Guofei Gu for the helpful review comments
and suggestions to the manuscript. This work was primarily
supported by DARPA (under AFOSR contract FA8650-15-
C-7561) and in part by SPAWAR (N6600118C4035), NSF
(CNS-1319137, CNS-1514472, and DGE-1069311), and ONR
(N00014-15-1-2378, and N00014-17-1-2891). The views,
opinions, and/or ﬁndings expressed are those of the authors
and should not be interpreted as representing the ofﬁcial views
or policies of the Department of Defense, National Science
Foundation or the U.S. Government.
REFERENCES
[1] About the metasploit meterpreter. https://www.offensive-security.com/
metasploit-unleashed/about-meterpreter/.
[2] Adversarial tactics, techniques and common knowledge. https://attack.
mitre.org/wiki/Main Page.
[3] APT Notes. https://github.com/kbandla/APTnotes. Accessed: 2016-11-
10.
[4] CAPEC: Common Attack Pattern Enumeration and Classiﬁcation. https:
//capec.mitre.org/index.html. Accessed: 2018-02-27.
[5] Common vulnerability scoring system v3.0: Speciﬁcation document.
[6]
https://www.ﬁrst.org/cvss/speciﬁcation-document.
IBM QRadar SIEM.
ibm-qradar-siem.
https://www.ibm.com/us-en/marketplace/
[7] Logrhythm, the security intelligence company. https://logrhythm.com/.
[8] MANDIANT: Exposing One of China’s Cyber Espionage Units.
https://www.ﬁreeye.com/content/dam/ﬁreeye-www/services/pdfs/
mandiant-apt1-report.pdf. Accessed: 2016-11-10.
[ms-smb2]: Server message block (smb) protocol versions 2 and 3.
https://msdn.microsoft.com/en-us/library/cc246231.aspx.
[9]
[10] SIEM, AIOps, Application Management, Log Management, Machine
Learning, and Compliance. https://www.splunk.com/.
[11] Steven Arzt, Siegfried Rasthofer, Christian Fritz, Eric Bodden, Alexan-
dre Bartel, Jacques Klein, Yves Le Traon, Damien Octeau, and Patrick
McDaniel. Flowdroid: Precise context, ﬂow, ﬁeld, object-sensitive and
lifecycle-aware taint analysis for android apps. SIGPLAN Not., 2014.
[12] Adam Bates, Dave Jing Tian, Kevin RB Butler, and Thomas Moyer.
Trustworthy whole-system provenance for the linux kernel. In USENIX
Security, 2015.
[13] Konstantin Berlin, David Slater, and Joshua Saxe. Malicious behavior
In Proceedings of the 8th ACM
detection using windows audit logs.
Workshop on Artiﬁcial Intelligence and Security, 2015.
(cid:18)(cid:18)(cid:21)(cid:26)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:43:10 UTC from IEEE Xplore.  Restrictions apply. 
[20] Ashvin Goel, Kenneth Po, Kamran Farhadi, Zheng Li, and Eyal de Lara.
The taser intrusion recovery system. SIGOPS Oper. Syst. Rev., 2005.
[41]
[14]
Jim Chow, Tal Garﬁnkel, and Peter M Chen. Decoupling dynamic
program analysis from execution in virtual environments. In USENIX
2008 Annual Technical Conference on Annual Technical Conference,
pages 1–14, 2008.
[15] Herv´e Debar and Andreas Wespi. Aggregation and correlation of
intrusion-detection alerts. In RAID. Springer, 2001.
[16] Stephanie Forrest, Steven Hofmeyr, Aniln Somayaji, Thomas Longstaff,
et al. A sense of self for unix processes. In S&P. IEEE, 1996.
[17] Debin Gao, Michael K Reiter, and Dawn Song. Gray-box extraction of
execution graphs for anomaly detection. In CCS. ACM, 2004.
[18] Ashish Gehani and Dawood Tariq. Spade: support for provenance
the 13th
auditing in distributed environments.
International Middleware Conference. Springer, 2012.
In Proceedings of
[19] A. Goel, W. C. Feng, D. Maier, W. C. Feng, and J. Walpole. Forensix:
a robust, high-performance reconstruction system.
In 25th IEEE In-
ternational Conference on Distributed Computing Systems Workshops,
2005.
[21] Guofei Gu, Phillip Porras, Vinod Yegneswaran, and Martin Fong.
Bothunter: Detecting malware infection through ids-driven dialog cor-
relation. In 16th USENIX Security Symposium (USENIX Security 07).
USENIX Association, 2007.
[22] Md Nahid Hossain, Sadegh M. Milajerdi, Junao Wang, Birhanu Eshete,
Rigel Gjomemo, R. Sekar, Scott Stoller, and V.N. Venkatakrishnan.
SLEUTH: Real-time attack scenario reconstruction from COTS audit
data. In 26th USENIX Security Symposium (USENIX Security 17), pages
487–504, Vancouver, BC, 2017. USENIX Association.
[23] Md Nahid Hossain, Junao Wang, R. Sekar, and Scott Stoller. Depen-
In
dence preserving data compaction for scalable forensic analysis.
USENIX Security Symposium. USENIX Association, 2018.
[24] Yang Ji, Sangho Lee, Evan Downing, Weiren Wang, Mattia Fazzini,
Taesoo Kim, Alessandro Orso, and Wenke Lee. Rain: Reﬁnable attack
investigation with on-demand inter-process information ﬂow tracking.
In Proceedings of the 2017 ACM SIGSAC Conference on Computer and
Communications Security, pages 377–390. ACM, 2017.
[25] Vasileios P. Kemerlis, Georgios Portokalidis, Kangkook Jee, and Ange-
los D. Keromytis. Libdft: Practical Dynamic Data Flow Tracking for
Commodity Systems. SIGPLAN Not., 2012.
[26] Angelos D. Keromytis. Transparent computing engagement 3 data
release. https://github.com/darpa-i2o/Transparent-Computing, 2018.
[27] Samuel T King and Peter M Chen. Backtracking intrusions. In SOSP.
ACM, 2003.
[28] Samuel T King, Zhuoqing Morley Mao, Dominic G Lucchetti, and
Peter M Chen. Enriching intrusion alerts through multi-host causality.
In NDSS, 2005.
[29] Calvin Ko, Manfred Ruschitzka, and Karl Levitt. Execution monitoring
of security-critical programs in distributed systems: A speciﬁcation-
based approach. In S&P. IEEE, 1997.
[30] Christopher Kruegel, Fredrik Valeur, and Giovanni Vigna. Intrusion de-
tection and correlation: challenges and solutions, volume 14. Springer
Science & Business Media, 2004.
[31] Christopher Kruegel and Giovanni Vigna. Anomaly detection of web-
based attacks. In CCS. ACM, 2003.
[32] Sandeep Kumar. Classiﬁcation and detection of computer intrusions.
PhD thesis, PhD thesis, Purdue University, 1995.
[33] Yonghwi Kwon, Fei Wang, Weihang Wang, Kyu Hyung Lee, Wen-
Chuan Lee, Shiqing Ma, Xiangyu Zhang, Dongyan Xu, Somesh Jha,
Gabriela Ciocarlie, et al. Mci: Modeling-based causality inference in
audit logging for attack investigation. In Proc. of the 25th Network and
Distributed System Security Symposium (NDSS18), 2018.
[34] Kyu Hyung Lee, Xiangyu Zhang, and Dongyan Xu. High accuracy
attack provenance via binary-based execution partition. In NDSS, 2013.
[35] Wenke Lee, Salvatore J Stolfo, and Kui W Mok. A data mining
In S&P. IEEE,
framework for building intrusion detection models.
1999.
[36] Yushan Liu, Mu Zhang, Ding Li, Kangkook Jee, Zhichun Li, Zhenyu
Wu, Junghwan Rhee, and Prateek Mittal. Towards a timely causality
analysis for enterprise security.
Security Symposium, 2018.
In Network and Distributed Systems
[37] Sadegh M. Milajerdi, Birhanu Eshete, Rigel Gjomemo, and V.N.
Venkatakrishnan. Propatrol: Attack investigation via extracted high-
level
In International Conference on Information Systems
Security. Springer, 2018.
tasks.
[38] Shiqing Ma, Juan Zhai, Fei Wang, Kyu Hyung Lee, Xiangyu Zhang,
and Dongyan Xu. Mpi: Multiple perspective attack investigation with
In 26th {USENIX} Security
semantics aware execution partitioning.
Symposium ({USENIX} Security 17), pages 1111–1128, 2017.
[39] Shiqing Ma, Xiangyu Zhang, and Dongyan Xu. ProTracer: Towards
practical provenance tracing by alternating between logging and taint-
ing. In NDSS, 2016.
[40] Emaad Manzoor, Sadegh M Milajerdi, and Leman Akoglu.
Fast
memory-efﬁcient anomaly detection in streaming heterogeneous graphs.
In Proceedings of the 22nd ACM SIGKDD International Conference on
Knowledge Discovery and Data Mining, pages 1035–1044. ACM, 2016.
Jiang Ming, Dinghao Wu, Jun Wang, Gaoyao Xiao, and Peng Liu.
Straighttaint: Decoupled ofﬂine symbolic taint analysis. In Proceedings
of the 31st IEEE/ACM International Conference on Automated Software
Engineering, pages 308–319. ACM, 2016.
[42] Peng Ning and Dingbang Xu. Learning attack strategies from intrusion
alerts. In CCS. ACM, 2003.
[43] Steven Noel, Eric Robertson, and Sushil Jajodia. Correlating intrusion
events and building attack scenarios through attack graph distances. In
ACSAC. IEEE, 2004.
[44] Thomas Pasquier, Xueyuan Han, Thomas Moyer, Adam Bates, Olivier
Hermant, David Eyers, Jean Bacon, and Margo Seltzer. Runtime
analysis of whole-system provenance. In Proceedings of the 2018 ACM
SIGSAC Conference on Computer and Communications Security, CCS
’18, pages 1601–1616, New York, NY, USA, 2018. ACM.
[45] Kexin Pei, Zhongshu Gu, Brendan Saltaformaggio, Shiqing Ma, Fei
Wang, Zhiwei Zhang, Luo Si, Xiangyu Zhang, and Dongyan Xu. Her-
cule: Attack story reconstruction via community discovery on correlated
log graph. In Proceedings of the 32Nd Annual Conference on Computer
Security Applications, pages 583–595. ACM, 2016.
[46] Devin J Pohly, Stephen McLaughlin, Patrick McDaniel, and Kevin
In
Butler. Hi-ﬁ: collecting high-ﬁdelity whole-system provenance.
ACSAC. ACM, 2012.
[47] Phillip A Porras and Richard A Kemmerer. Penetration state transition
In Computer
analysis: A rule-based intrusion detection approach.
Security Applications Conference, 1992. Proceedings., Eighth Annual,
pages 220–229. IEEE, 1992.
[48] Xinzhou Qin and Wenke Lee. Statistical causality analysis of infosec
alert data. In RAID. Springer, 2003.
[49] R Sekar, Mugdha Bendre, Dinakar Dhurjati, and Pradeep Bollineni.
A fast automaton-based method for detecting anomalous program
behaviors. In S&P. IEEE, 2001.
[50] Xiaokui Shu, Frederico Araujo, Douglas L. Schales, Marc Ph. Stoecklin,
Jiyong Jang, Heqing Huang, and Josyula R. Rao. Threat intelligence
computing. In Proceedings of the 2018 ACM SIGSAC Conference on
Computer and Communications Security, CCS ’18, pages 1883–1898,
New York, NY, USA, 2018. ACM.
[51] Xiaokui Shu, Danfeng Yao, and Naren Ramakrishnan. Unearthing
stealthy program attacks buried in extremely long execution paths. In
CCS. ACM, 2015.
[52] Prem Uppuluri and R Sekar. Experiences with speciﬁcation-based
intrusion detection. In RAID. Springer, 2001.
[53] Qi Wang, Wajih Ul Hassan, Adam Bates, and Carl Gunter. Fear and
logging in the internet of things. In Network and Distributed Systems
Symposium, 2018.
[54] Wei Wang and Thomas E Daniels. A graph based approach toward
network forensics analysis. Transactions on Information and System
Security (TISSEC), 2008.
Integrating ids alert correlation
[55] Yan Zhai, Peng Ning, and Jun Xu.
and os-level dependency tracking.
In International Conference on
Intelligence and Security Informatics, pages 272–284. Springer, 2006.
(cid:18)(cid:18)(cid:22)(cid:17)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:43:10 UTC from IEEE Xplore.  Restrictions apply. 
APPENDIX
Scenario-2: Trojan. This attack scenario (Fig. 19) begins
with a user downloading a malicious ﬁle. The user then
executes the ﬁle. The execution results in a C&C communi-
cation channel with the attacker’s machine. The attacker then
launches a shell and executes some information gathering com-
mands such as hostname, whoami, ifconﬁg, netstat, and uname.
Finally, the attacker exﬁltrates some secret ﬁles. Note that this
attack scenario is similar to the Drive-by Download scenario
discussed earlier except that the initial compromise happens
via a program that the user downloads. Another important
insight from the detection results of this scenario is that it
was missing important events that are relevant to the C&C
communication (connect) and ﬁnal cleanup (unlink) activity
of the attack. Even with such incomplete data, HOLMES was
able to ﬂag this as an APT since the Threat score surpassed
the threshold.

	

















	






	






























	



















	

	








































	

















	








Fig. 20. HSG of Scenario-3. Notations: A= Untrusted External Address; B=
Firefox; C= Trojan File (tedit); D= Executed Trojan Process; E= /bin/dash;
F= Malicious Executable ﬁle (py); G= Executed Malicious Process; H=