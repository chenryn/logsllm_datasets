                    $input  =   explode($depr,trim($_SERVER['PATH_INFO'],$depr));            
                }
                break;
            case 'request' :   
                $input =& $_REQUEST;   
                break;
            case 'session' :   
                $input =& $_SESSION;   
                break;
            case 'cookie'  :   
                $input =& $_COOKIE;    
                break;
            case 'server'  :   
                $input =& $_SERVER;    
                break;
            case 'globals' :   
                $input =& $GLOBALS;    
                break;
            case 'data'    :   
                $input =& $datas;      
                break;
            default:
                return null;
        }
        if(''==$name) { // 获取全部变量
            $data       =   $input;
            $filters    =   isset($filter)?$filter:C('DEFAULT_FILTER');
            if($filters) {
                if(is_string($filters)){
                    $filters    =   explode(',',$filters);
                }
                foreach($filters as $filter){
                    $data   =   array_map_recursive($filter,$data); // 参数过滤
                }
            }
        }elseif(isset($input[$name])) { // 取值操作
            $data       =   $input[$name];
            $filters    =   isset($filter)?$filter:C('DEFAULT_FILTER');
            if($filters) {
                if(is_string($filters)){
                    if(0 === strpos($filters,'/')){
                        if(1 !== preg_match($filters,(string)$data)){
                            // 支持正则验证
                            return   isset($default) ? $default : null;
                        }
                    }else{
                        $filters    =   explode(',',$filters);                    
                    }
                }elseif(is_int($filters)){
                    $filters    =   array($filters);
                }
                if(is_array($filters)){
                    foreach($filters as $filter){
                        if(function_exists($filter)) {
                            $data   =   is_array($data) ? array_map_recursive($filter,$data) : $filter($data); // 参数过滤
                        }else{
                            $data   =   filter_var($data,is_int($filter) ? $filter : filter_id($filter));
                            if(false === $data) {
                                return   isset($default) ? $default : null;
                            }
                        }
                    }
                }
            }
            if(!empty($type)){
                switch(strtolower($type)){
                    case 'a':   // 数组
                        $data   =   (array)$data;
                        break;
                    case 'd':   // 数字
                        $data   =   (int)$data;
                        break;
                    case 'f':   // 浮点
                        $data   =   (float)$data;
                        break;
                    case 'b':   // 布尔
                        $data   =   (boolean)$data;
                        break;
                    case 's':   // 字符串
                    default:
                        $data   =   (string)$data;
                }
            }
        }else{ // 变量默认值
            $data       =    isset($default)?$default:null;
        }
        is_array($data) && array_walk_recursive($data,'think_filter');
        return $data;
    }
首先获取method  
然后取age值并赋值给data  
接着看是否传入了filter
在手册中也是介绍了  
这里就是默认的`htmlspecialchars`  
关于该函数的一些用法
跟入函数，最终是要调到这个`call_user_func`
调用`htmlspecialchars`处理后，对我们的payload影响不太大，那么继续跟
这里又对是数组data里的两个值`exp`和`$payload`进行了`think_filter`函数的调用
    function think_filter(&$value){
        // TODO 其他安全过滤
        // 过滤查询特殊字符
        if(preg_match('/^(EXP|NEQ|GT|EGT|LT|ELT|OR|XOR|LIKE|NOTLIKE|NOT BETWEEN|NOTBETWEEN|BETWEEN|NOTIN|NOT IN|IN)$/i',$value)){
            $value .= ' ';
        }
    }
这里就对一些sql敏感的东西进行了过滤  
此时，我们的`data[0]`是`exp`字符串，这里就匹配了，于是他在`exp`后面加上了一个空格  
也就是`exp`  
然后我们的payload并没有匹配到
那么自然  
到了`parseWhereItem`也就进不了exp那一个判断了，直接进入报错的地方
这样 我们也就没办法再进行注入了
## 总结
也就是说在thinkphp3下，使用了I函数，我们的注入就不太能成功，如果接收参数的时候并没有使用I函数，而是直接接收就传入M函数并实例化，那么我们注入的可能性就更大
# Thinkphp5.0.24
在Thinkphp5里，所有单个字母的函数都被取消了  
查询语句变成了
    Db::table('think_user')->where('id',1)->find();
于是修改index.php代码
    where(array('age'=>$age))->select(false);
        }
    }
接着修改`application/database.php`
    'debug'           => true,
于是看到查询语句
## 底层过滤
我们改一下代码
    where(array('age'=>$age))->find();
        }
    }
传入单引号同样被转义，应该也是在select函数里进行了转义
跟入`select`
继续跟进，在parseWhere时，返回了占位符  
在select结束后，返回了预编译的sql语句，`:where_AND_age`是占位符
跟入getRealSql
提取age的值
在这里，就发生了转义
    if (PDO::PARAM_STR == $type) {
                    $value = $this->quote($value);
                }
跟进quote
里面又调用了`quote`,关于PDO::quote的介绍  
[PDO::quote](https://www.runoob.com/php/pdo-quote.html)  
会转义特殊字符串，也就是我们的单引号
如果一开始的代码是select()不用false  
那么调用栈如下
## insert方法
看了网上有分析该方法存在注入，于是调试  
修改代码
    where(array('age'=>'13'))->insert(array('username'=>$username));
        }
    }
跟进`insert`
继续跟进`parseData`
    protected function parseData($data, $options)
        {
            if (empty($data)) {
                return [];
            }
            // 获取绑定信息
            $bind = $this->query->getFieldsBind($options['table']);
            if ('*' == $options['field']) {
                $fields = array_keys($bind);
            } else {
                $fields = $options['field'];
            }
            $result = [];
            foreach ($data as $key => $val) {
                if ('*' != $options['field'] && !in_array($key, $fields, true)) {
                    continue;
                }
                $item = $this->parseKey($key, $options, true);
                if ($val instanceof Expression) {
                    $result[$item] = $val->getValue();
                    continue;
                } elseif (is_object($val) && method_exists($val, '__toString')) {
                    // 对象数据写入
                    $val = $val->__toString();
                }
                if (false === strpos($key, '.') && !in_array($key, $fields, true)) {
                    if ($options['strict']) {
                        throw new Exception('fields not exists:[' . $key . ']');
                    }
                } elseif (is_null($val)) {
                    $result[$item] = 'NULL';
                } elseif (is_array($val) && !empty($val)) {
                    switch (strtolower($val[0])) {
                        case 'inc':
                            $result[$item] = $item . '+' . floatval($val[1]);
                            break;
                        case 'dec':
                            $result[$item] = $item . '-' . floatval($val[1]);
                            break;
                        case 'exp':
                            throw new Exception('not support data:[' . $val[0] . ']');
                    }
                } elseif (is_scalar($val)) {
                    // 过滤非标量数据
                    if (0 === strpos($val, ':') && $this->query->isBind(substr($val, 1))) {
                        $result[$item] = $val;
                    } else {
                        $key = str_replace('.', '_', $key);
                        $this->query->bind('data__' . $key, $val, isset($bind[$key]) ? $bind[$key] : PDO::PARAM_STR);
                        $result[$item] = ':data__' . $key;
                    }
                }
            }
            return $result;
        }
跟tp3类似的思路
但是，注意这里的拼接
    case 'inc':
                            $result[$item] = $item . '+' . floatval($val[1]);
对`$val[1]`进行了一个`floatval`的强转,那么我们的payload也就不行了
# Thinkphp6开发版
使用composer安装
    composer create-project topthink/think=6.0.x-dev tp
然后运行
    php think run
访问127.0.0.1:8000  
或者直接访问public目录
index.php代码修改
    where(array('age'=>$age))->fetchSql()->find(1);
        }
    }
跟tp5类似预加载
跟入fetch
跟入getRealSql
这里 调用了`addslashes`对单引号进行了转义
我们再看看其他方法
## insert
修改代码
    where(array('age'=>'15'))->fetchSql()->insert(array('age'=>$age));
        }
    }
跟进insert
跟入parsedata
同样的处理方式，把payload进行强转，不过取消了exp
# Referer
  * [ThinkPHP6.0完全开发手册（预览版）](https://www.kancloud.cn/manual/thinkphp6_0/1037479)
  * [ThinkPHP5.0完全开发手册](https://www.kancloud.cn/manual/thinkphp5/135185)
  * [ThinkPHP3.2.3完全开发手册](https://www.kancloud.cn/manual/thinkphp/1678)
  * [ThinkPHP框架 5.0.x sql注入漏洞分析](https://xz.aliyun.com/t/2257)
  * [ThinkPHP3.2.3框架实现安全数据库操作分析](https://xz.aliyun.com/t/79)