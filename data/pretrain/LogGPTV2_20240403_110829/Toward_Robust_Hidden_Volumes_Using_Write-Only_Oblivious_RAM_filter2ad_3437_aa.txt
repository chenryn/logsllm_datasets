title:Toward Robust Hidden Volumes Using Write-Only Oblivious RAM
author:Erik-Oliver Blass and
Travis Mayberry and
Guevara Noubir and
Kaan Onarlioglu
Toward Robust Hidden Volumes Using
Write-Only Oblivious RAM
Erik-Oliver Blass Travis Mayberry Guevara Noubir Kaan Onarlioglu
College of Computer and Information Science
Northeastern University, Boston MA
Email: {blass|travism|noubir|onarliog}@ccs.neu.edu
ABSTRACT
With sensitive data being increasingly stored on mobile devices and
laptops, hard disk encryption is more important than ever. In partic-
ular, being able to plausibly deny that a hard disk contains certain
information is a very useful and interesting research goal. However,
it has been known for some time that existing “hidden volume” so-
lutions, like TrueCrypt, fail in the face of an adversary who is able
to observe the contents of a disk on multiple, separate occasions.
In this work, we explore more robust constructions for hidden vol-
umes and present HIVE, which is resistant to more powerful ad-
versaries with multiple-snapshot capabilities. In pursuit of this, we
propose the ﬁrst security deﬁnitions for hidden volumes, and prove
HIVE secure under these deﬁnitions. At the core of HIVE, we de-
sign a new write-only Oblivious RAM. We show that, when only
hiding writes, it is possible to achieve ORAM with optimal O(1)
communication complexity and only poly-logarithmic user mem-
ory. This is a signiﬁcant improvement over existing work and an
independently interesting result. We go on to show that our write-
only ORAM is specially equipped to provide hidden volume func-
tionality with low overhead and signiﬁcantly increased security. Fi-
nally, we implement HIVE as a Linux kernel block device to show
both its practicality and usefulness on existing platforms.
1.
INTRODUCTION
Disk encryption is an important security technology that is in-
creasingly being used by individuals and businesses alike. All ma-
jor operating systems now support basic encrypted volumes na-
tively, and both corporations and governments are increasingly man-
dating [5] the use of full disk encryption. Additionally, there are
open source software products, most prominently TrueCrypt [21],
that provide more advanced solutions.
One of the advanced features that TrueCrypt offers is a so-called
“hidden volume”.
Instead of a single encrypted volume, a user
may optionally have two encrypted volumes. These volumes are
encrypted with different keys (derived from passwords), and the
user has the ability to plausibly deny the existence of the second
volume. An adversary, knowing only the password to the ﬁrst vol-
ume, cannot tell for sure whether there exists a second volume, let
alone what its contents may be. Given the widespread use of en-
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise,
or republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee. Request permissions from permissions@acm.org.
CCS’14, November 3–7, 2014, Scottsdale, Arizona, USA.
Copyright 2014 ACM 978-1-4503-2957-6/14/11 ...$15.00.
http://dx.doi.org/10.1145/2660267.2660313.
crypted disks, this is a very useful feature. If an adversary takes
possession of an encrypted disk, they know that there is at least
some data on that disk. They can then coerce the user to reveal
their password used to encrypt the disk. With a hidden volume, the
user can reveal the password to the ﬁrst volume while withholding
the password for the second. The adversary will not know whether
the second volume exists, and therefore cannot be sure if there even
is a second password for the user to reveal.
TrueCrypt accomplishes this by storing the second, “hidden”
volume inside the free space of the ﬁrst, “main” volume. Since
the semantics of TrueCrypt guarantee that all free space in the en-
crypted volume will be ﬁlled with random data, and the encryption
used is presumed to be indistinguishable from random, an adver-
sary cannot tell if the blocks marked “free” in the main volume
are actually free or if they contain encrypted data that is part of a
hidden volume.
However, as already noticed by Czeskis et al. [3], TrueCrypt’s
approach has a signiﬁcant ﬂaw:
if the adversary has the ability
to take multiple “snapshots” of the hard disk at different times,
they can determine with high probability whether a hidden vol-
ume exists. Since disk encryption is speciﬁcally designed to protect
against scenarios where the user loses control of their device, this
is a major drawback. Requiring that an adversary has access to
the machine and hard disk only one time is in many situations un-
realistic. As a motivating example for why we consider multiple
access to a hard disk a real threat, it is common for users to travel
with their devices and lose direct possession of them on multiply
occasions (checking bags, leaving them in a hotel room, etc.).
Consequently, we design a system whereby a user can plausi-
bly deny the existence of a hidden volume even if the adversary
has been able to take several snapshots of their disk and knows the
password for the main volume. The reason that TrueCrypt does
not maintain security against multiple snapshots is that it makes
no attempt to hide the pattern of accesses that the user makes to
the disk. That, combined with the fact that the hidden volume is
stored separately from the main volume (in the free blocks of the
main volume), gives the adversary a large advantage. An adversary
can compare separate snapshots and see if a large number of “free”
blocks have changed values. This would indicate that they are ac-
tually encrypted blocks that are part of a hidden volume, since they
would otherwise not have a reason to change spontaneously.
These weaknesses lead us to our ﬁrst observation: a system that
is secure against multiple snapshots must make some attempt to
hide the user’s access pattern. There are several ways to do this,
chief among them being Oblivious RAM [6]. We show how ORAM
can be used to create exactly such a solution. Yet, a straightfor-
ward ORAM application comes with a signiﬁcant read/write over-
head. This motivates us to introduce a more efﬁcient ORAM that
is write-only, but provides sufﬁcient security for our purposes and
has a signiﬁcantly lower overhead than related work. Based upon
this write-only ORAM, we ﬁnally present HIVE, a new scheme for
Hidden Volume Encryption.
The technical highlights of this paper are:
• The ﬁrst formal treatment for hidden volume encryption and
security, including multiple adversarial models. In addition,
we show that several intuitive notions of security against a
strong adversary are impossible to achieve.
• HIVE, a new solution which provides hidden volume encryp-
tion and provably achieves our notions of security using any
write-only ORAM.
• A novel write-only ORAM construction which achieves op-
timal (constant) communication complexity. This result is of
independent interest.
• An implementation of HIVE in the Linux kernel that is prac-
tical. Our implementation realizes hidden volumes as regular
Linux block devices. We evaluate our implementation, and
our benchmarks show that HIVE is both efﬁcient and usable.
The source code is available for download [19].
Plausibly Deniable Encryption: The hidden volume function-
ality offered by HIVE, TrueCrypt, and others [4, 8, 17] is also
called plausibly deniable encryption. Yet, in this paper, we refrain
from using this term, not to confuse it with the slightly different
ideas of deniable encryption by Canetti et al. [2], see Section 7.
Instead, we use hidden volume encryption in this paper.
2. ROBUST HIDDEN VOLUMES
We start by introducing the system and adversary model for hid-
den volume encryption. We envision a typical scenario with a user
U having read/write access to a block storage device, e.g., a hard
disk, USB stick or a network block device. User U is running a
special software for hidden volume encryption. This software gives
access to a sequence of independent volumes Vi that are mapped to
the underlying storage device. To get access to these volumes, U
knows a sequence of passwords P. We stress that each Pi ∈ P
gives full access to hidden Vi, i.e., encryption keys used in Vi are
derived from passwords Pi, and U chooses the Pi carefully. Al-
though passwords have notorious security issues, we simplify the
exposition and assume that each Pi is chosen securely and can be
used to derive a key with at least s bits of entropy, where s is a
security parameter [10].
2.1 Model
One of our main contributions is the ﬁrst formalization for hid-
den volume encryption. A hidden volume encryption scheme Σ
provides an interface to access max volumes. We generalize to
max volumes instead of two for increased ﬂexibility. Each volume
Vi has a password Pi associated with it and holds ni blocks of data,
each of size B. The size of the entire disk is N blocks. For simplic-
ity, both volume blocks and hard disk blocks have the same size B.
Usually, B = 512 Byte, but B can be varied up to 4096 Byte as dis-
cussed later. We do not try to hide the value of max, but rather al-
low the user, U, to choose some number of volumes (cid:96)≤ max which
he will be actively using. It is this choice (cid:96) that will be hidden. Thus
a hidden volume encryption scheme Σ works in such a way that an
adversary, seeing changes to the blocks of a hard disk and knowing
one or more passwords, has some uncertainty about (cid:96). We also as-
sume that the user has t blocks of RAM which are not visible to the
adversary. To avoid the trivial solution of storing everything out of
sight of the adversary, we constrict the size of the RAM to be much
smaller than the size of the disk (i.e., logarithmic in N).
Typically, a hidden volume encryption scheme Σ is embedded
in an operating system. There, it provides the functionality of a
block device driver, yet it resides on top of an underlying (hard-
ware) block device which we now call the disk for simplicity.
DEFINITION 1
(HIDDEN VOLUME ENCRYPTION Σ). Let s
denote the security parameter, t denotes the number of available
RAM blocks, and P = denotes the sequence of user
passwords. A hidden volume encryption (HVE) scheme Σ com-
prises the following algorithms.
• HVESetup(s,t,P,B,): Using parameters s,
t, the sequence of passwords P, block size B, and the size of
each volume ni, this algorithm generates volumes .
• HVEWrite(b,d,i,P): Using passwords P, if i≤ (cid:96), then this
algorithm stores data d at block index b in volume Vi, where
Vi was output by HVESetup(s,P).
• HVERead(b, i,P): Using passwords P, if i ≤ (cid:96), then this
algorithm returns data from the block indexed by b in volume
Vi, where Vi was output by HVESetup(s,P).
DEFINITION 2
(SOUNDNESS). Hidden volume encryption scheme
Σ is called sound, iff for any sequence of HVERead and HVEWrite
operations, the last HVEWrite(b,d,i,P) to block b in volume Vi,
i≤ (cid:96), implies d = HVERead(b,i,P).
To allow a scheme Σ to read from and to write to the disk, we
assume availability of regular read and write system calls. In the
rest of this paper, we will use DiskRead(β) to denote a read from
block index β of the disk and DiskWrite(β,d) to denote a write of
data d to block β. Again for simplicity, we assume that a scheme
Σ creates, for each volume, a new virtual block device within the
operating system, which can be formatted with a ﬁle system and
used just like a regular device. Informally speaking, a scheme Σ
has to 1) translate OS reads and writes to one of the block devices
(volumes) into calls of HVERead and HVEWrite, and 2) apply its
logic to ﬁnally use DiskRead(β) and DiskWrite(β). Note that b
denotes the index of a virtual block in one of the volumes, while β
denotes the index of a physical block of the disk.
2.2 Security Deﬁnitions
We now formalize security for hidden volume encryption. To
start, we deﬁne an access o = (op, b, V, d). If op = write, then
this access is a write to block b with value d in volume V , and if
op = read, then this access is a read of block b in volume V which
returns data value d. We call the sequence of accesses O = the access pattern. We also allow o =⊥, which is a “null”
operation that is simply ignored.
Our formalization of different security levels uses standard game-
based deﬁnitions. All games Γ will be played between an adversary
A and a challenger C running a scheme Σ. All games Γ will adhere
to the following generic game. We present the speciﬁc differences
between the games and corresponding levels of security after the
generic game.
In our games, an adversary A is allowed to repeatedly retrieve
snapshots of the disk. We deﬁne a snapshot as the entire contents
of the disk (i.e., addresses and current values of every block), and a
snapshot is meant to represent a dump or capture of the hard drive
from a machine.
The generic game Γgeneric
A,Σ (s), cf. Fig. 1, is deﬁned as:
1. Adversary A chooses (cid:96)≤ max and sends it to C.
A
chooses (cid:96)≤ max
−−−−−−−−−−−−→
(cid:96)
C
$←−{0,1}
b
∀1≤ i≤ (cid:96),
$←{0,1}s
Pi
Σ0 ← HVESetup(s,)
Σ1 ← HVESetup(s,)
Chooses accesses
O0,1 and O1,1
,D0
←−−−−−−−−−−−− D0 = InitialSnapShotΣb
O0,1,O1,1,d1
−−−−−−−−−−−−→
D1 ← ExecuteΣb (Ob,1)
←−−−−−−−−−−−− If d1 = 1, sends D1
D1
···
Let p = poly(s)
Chooses accesses