# 十二、Kubernetes 安全与合规
在本章中，您将了解 Kubernetes 安全性的一些关键部分。我们将讨论一些最近的 Kubernetes 安全问题，以及最近对 Kubernetes 进行审计的结果。然后，我们将研究在集群的每个级别实现安全性，从 Kubernetes 资源及其配置的安全性开始，然后是容器安全性，最后是带有入侵检测的运行时安全性。首先，我们将讨论一些与 Kubernetes 相关的关键安全概念。
在本章中，我们将涵盖以下主题:
*   了解 Kubernetes 的安全性
*   审查 Kubernetes 的简历和安全审计
*   实现集群配置和容器安全的工具
*   在 Kubernetes 上处理入侵检测、运行时安全性和合规性
# 技术要求
为了运行本章中详细介绍的命令，您将需要一台支持`kubectl`命令行工具的计算机，以及一个工作正常的 Kubernetes 集群。参见 [*第一章*](01.html#_idTextAnchor016)*与 Kubernetes*通讯，了解几种快速与 Kubernetes 一起起床跑步的方法，以及如何安装`kubectl`工具的说明。
此外，您将需要一台支持 Helm CLI 工具的机器，该工具通常具有与`kubectl`相同的先决条件–有关详细信息，请查看位于[https://helm.sh/docs/intro/install/](https://helm.sh/docs/intro/install/)的 Helm 文档。
本章使用的代码可以在本书的 GitHub 资源库中找到[https://GitHub . com/PacktPublishing/Cloud-Native-with-Kubernetes/tree/master/chapter 12](https://github.com/PacktPublishing/Cloud-Native-with-Kubernetes/tree/master/Chapter12)。
# 了解 Kubernetes 的安全性
在 Kubernetes 上讨论安全时，注意安全边界和责任分担是非常重要的。*共享责任模型*是一个常用术语，用于描述公共云服务中如何处理安全性。它规定，客户负责其应用的安全性，以及其公共云组件和服务配置的安全性。另一方面，公共云提供商负责服务本身及其运行的基础设施的安全，一直到数据中心和物理层。
同样，Kubernetes 上的安全性也是共享的。尽管上游的 Kubernetes 不是商业产品，但来自大型科技公司的数以千计的 Kubernetes 贡献者和重要的组织影响力确保了 Kubernetes 组件的安全性得到维护。此外，由个人贡献者和使用该技术的公司组成的大型生态系统确保了随着简历的报告和处理，它会变得更好。不幸的是，正如我们将在下一节中讨论的，Kubernetes 的复杂性意味着有许多可能的攻击媒介。
应用共享责任模型然后，作为开发人员，您负责如何配置 Kubernetes 组件的安全性、在 Kubernetes 上运行的应用的安全性以及集群配置中的访问级别安全性。虽然您的应用和容器本身的安全性不在本书的讨论范围之内，但是它们对于 Kubernetes 的安全性来说绝对是重要的。我们将花大部分时间讨论配置级安全性、访问安全性和运行时安全性。
无论是 Kubernetes 本身还是 Kubernetes 生态系统都提供了工具、库和成熟的产品来处理这些级别的安全性，我们将在本章中回顾其中的一些选项。
现在，在我们讨论这些解决方案之前，最好首先对为什么可能需要它们有一个基本的了解。让我们进入下一部分，我们将详细介绍 Kubernetes 在安全领域遇到的一些问题。
# 审核 Kubernetes 的简历和安全审计
Kubernetes 在其传奇历史中遇到了多个**常见漏洞和暴露** ( **CVEs** )。在撰写本文时，MITRE CVE 数据库在搜索`kubernetes`时列出了 2015 年至 2020 年的 73 份 CVE 公告。其中的每一个都直接与 Kubernetes 相关，或者与运行在 Kubernetes 上的公共开源解决方案相关(例如，像 NGINX 入口控制器)。
其中有几个非常关键，需要对 Kubernetes 源代码进行修复，因此它们在 CVE 描述中列出了受影响的版本。所有与 Kubernetes 相关的简历的完整列表可以在[https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=kubernetes](https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=kubernetes)找到。为了让您了解已经发现的一些问题，让我们按时间顺序回顾一下这些简历。
## 了解 CVE-2016-1905-入场控制不当
这个 CVE 是 Kubernetes 生产的第一批主要安全问题之一。国家脆弱性数据库(NIST 的一个网站)给这个问题的基本评分为 7.7，将其归入高影响类别。
有了这个问题，Kubernetes 准入控制器将无法确保`kubectl patch`命令遵循准入规则，从而允许用户完全绕过准入控制器——这在多租户场景中是一个噩梦。
## 了解 CVE-2018-1002105-连接升级到后端
这个 CVE 可能是 Kubernetes 项目迄今为止最关键的一个。事实上，NVD 给了它一个 9.8 的临界分数！在这个 CVE，人们发现在 Kubernetes 的某些版本中，可以利用来自 Kubernetes API 服务器的错误响应，然后升级连接。一旦连接升级，就可以向集群中的任何后端服务器发送经过身份验证的请求。这使得恶意用户可以在没有适当凭据的情况下模拟完全经过身份验证的 TLS 请求。
除了这些简历(可能部分由这些简历驱动)，CNCF 还在 2019 年赞助了对 Kubernetes 的第三方安全审计。审核的结果是开源的是公开的，值得审核。
## 了解 2019 年安全审计结果
上一节我们提到，2019 年 Kubernetes 安全审计是由第三方进行的，审计结果完全开源。包含所有部分的完整审计报告可在[https://www . cncf . io/blog/2019/08/06/open-sourcing-the-kubernetes-security-audit/](https://www.cncf.io/blog/2019/08/06/open-sourcing-the-kubernetes-security-audit/)上找到。
总的来说，此次审计主要关注以下 Kubernetes 功能:
*   `kube-apiserver`
*   `etcd`
*   `kube-scheduler`
*   `kube-controller-manager`
*   `cloud-controller-manager`
*   `kubelet`
*   `kube-proxy`
*   容器运行时
这样做的目的是为了在安全性方面关注 Kubernetes 最重要和最相关的部分。审计结果不仅包括完整的安全报告，还包括威胁模型和渗透测试，以及白皮书。
深入研究审计结果不在本书的讨论范围之内，但是有一些主要的收获，这些收获是了解许多最大的 Kubernetes 安全问题的关键。
简而言之，审计发现，由于 Kubernetes 是一个复杂的、高度网络化的系统，具有许多不同的设置，没有经验的工程师可能会执行许多可能的配置，并且在这样做时，向外部攻击者开放他们的集群。
Kubernetes 非常复杂，不安全的配置很容易发生，这一点值得注意和牢记。
整个审计值得一读——对于那些对网络安全和容器有丰富知识的人来说，这是一个很好的视角，可以看到一些作为 Kubernetes 平台开发的一部分而做出的安全决策。
既然我们已经讨论了在哪里发现了 Kubernetes 安全问题，我们可以开始研究方法来提高集群的安全态势。让我们从一些默认的 Kubernetes 安全功能开始。
# 实现集群配置和容器安全的工具
Kubernetes 为集群配置和容器权限的安全性提供了许多内置选项。由于我们已经讨论了 RBAC、TLS 入口和加密的 Kubernetes Secrets，让我们讨论几个我们还没有时间回顾的概念:准入控制器、Pod 安全策略和网络策略。
## 使用准入控制器
入场控制是一个经常被忽视但极其重要的 Kubernetes 特性。Kubernetes 的许多高级功能都在引擎盖下使用入场控制器。此外，您可以创建新的准入控制器规则，以便为集群添加自定义功能。
入场控制员一般有两种类型:
*   变异准入控制者
*   验证准入控制器
变异的接纳控制器接受 Kubernetes 资源规范并返回更新的资源规范。他们还执行副作用计算或进行外部调用(在定制准入控制器的情况下)。
另一方面，验证准入控制器只是接受或拒绝 Kubernetes 资源 API 请求。重要的是要知道，这两种类型的控制器只对创建、更新、删除或代理请求起作用。这些控制器不能改变或改变列出资源的请求。
当这些类型之一的请求进入 Kubernetes API 服务器时，它将首先通过所有相关的变异准入控制器运行该请求。然后，在最终被应用编程接口服务器执行之前(或者，如果调用被准入控制器拒绝，则不执行)，可能会发生变化的输出将通过验证准入控制器。
从结构上来说，Kubernetes 提供的准入控制器是功能或“插件”，作为 Kubernetes API 服务器的一部分运行。它们依赖于两个网络钩子控制器(它们本身就是准入控制器，只是特殊的控制器):**突变管理网络钩子**和**验证注册管理网络钩子**。所有其他入场控制人员根据他们的类型，在引擎盖下使用其中一个挂钩。此外，您编写的任何自定义准入控制器都可以连接到这些网络挂钩中的任何一个。
在我们看创建自定义接纳控制器的过程之前，让我们回顾一下 Kubernetes 提供的一些默认接纳控制器。完整列表请查看[上的 Kubernetes 官方文档 https://Kubernetes . io/docs/reference/access-authn-authz/入场控制员/#每个入场控制员做什么](https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#what-does-each-admission-controller-do)。
### 了解默认准入控制器
在典型的 Kubernetes 设置中有相当多的默认准入控制器——其中许多是一些相当重要的基本功能所需要的。这里有一些默认准入控制器的例子。
#### 命名空间存在接纳控制器
名称空间存在许可 T2 控制器检查任何传入的 Kubernetes 资源(名称空间本身除外)。这是为了检查附加到资源的命名空间是否存在。如果不是，它在准入控制器级别拒绝资源请求。
#### 策略准入控制器
**PodSecurityPolicy** 准入控制器支持 Kubernetes Pod 安全策略，我们将马上了解这些策略。此控制器防止创建不遵循 Pod 安全策略的资源。
除了默认的接纳控制器，我们还可以创建自定义的接纳控制器。
### 创建自定义准入控制器
创建自定义准入控制器可以使用两个 webhook 控制器之一动态完成。其工作方式如下:
1.  您必须编写自己的服务器或脚本，单独运行到 Kubernetes API 服务器。
2.  然后，配置前面提到的两个 webhook 触发器中的一个，用资源数据向您的自定义服务器控制器发出请求。
3.  基于这个结果，webhook 控制器将告诉 API 服务器是否继续。
让我们从第一步开始:编写一个快速入场服务器。
### 为自定义准入控制器编写服务器
为了创建我们的定制准入控制器服务器(它将接受来自 Kubernetes 控制平面的网络钩子)，我们可以使用任何编程语言。与 Kubernetes 的大多数扩展一样，Go 拥有最好的支持和库，使得编写自定义准入控制器的任务变得更加容易。现在，我们将使用一些伪代码。
我们服务器的控制流程如下所示:
准入控制服务器
```
// This function is called when a request hits the
// "/mutate" endpoint
function acceptAdmissionWebhookRequest(req)
{
  // First, we need to validate the incoming req
  // This function will check if the request is formatted properly
  // and will add a "valid" attribute If so
  // The webhook will be a POST request from Kubernetes in the
  // "AdmissionReviewRequest" schema
  req = validateRequest(req);
  // If the request isn't valid, return an Error
  if(!req.valid) return Error; 
  // Next, we need to decide whether to accept or deny the Admission
  // Request. This function will add the "accepted" attribute
  req = decideAcceptOrDeny(req);
  if(!req.accepted) return Error;
  // Now that we know we want to allow this resource, we need to
  // decide if any "patches" or changes are necessary
  patch = patchResourceFromWebhook(req);
  // Finally, we create an AdmissionReviewResponse and pass it back
  // to Kubernetes in the response
  // This AdmissionReviewResponse includes the patches and
  // whether the resource is accepted.
  admitReviewResp = createAdmitReviewResp(req, patch);
  return admitReviewResp;
}
```
现在我们有了一个简单的服务器作为我们定制的准入控制器，我们可以配置一个 Kubernetes 准入网络钩子来调用它。
### 配置 Kubernetes 以调用自定义准入控制器服务器
为了告诉 Kubernetes 呼叫我们的定制入场服务器，它需要一个可以呼叫的地方。我们可以在任何地方运行我们的定制入场控制器——它不需要在 Kubernetes 上。
也就是说，本章的目的是在 Kubernetes 上运行它。我们不会查看完整的清单，但是让我们假设我们有一个服务和一个它所指向的部署，运行一个作为我们的服务器的容器。该服务看起来像这样:
服务-web book . YAML
```
apiVersion: v1
kind: Service
metadata:
  name: my-custom-webhook-server
spec:
  selector:
    app: my-custom-webhook-server
  ports:
    - port: 443
      targetPort: 8443
```
需要注意的是，我们的服务器需要使用 HTTPS，这样 Kubernetes 才能接受 webhook 响应。配置这一点有很多方法，我们不会在本书中详细介绍。证书可以自签名，但是证书和 CA 的通用名称需要与设置 Kubernetes 集群时使用的名称相匹配。
现在我们已经运行了服务器并接受了 HTTPS 请求，让我们告诉 Kubernetes 在哪里可以找到它。为此，我们使用`MutatingWebhookConfiguration`。
下面的代码块显示了`MutatingWebhookConfiguration`的一个例子:
突变-webhook-config-service.yaml
```
apiVersion: admissionregistration.k8s.io/v1beta1
kind: MutatingWebhookConfiguration
metadata:
  name: my-service-webhook
webhooks:
  - name: my-custom-webhook-server.default.svc
    rules:
      - operations: [ "CREATE" ]
        apiGroups: [""]
        apiVersions: ["v1"]
        resources: ["pods", "deployments", "configmaps"]
    clientConfig:
      service:
        name: my-custom-webhook-server
        namespace: default
        path: "/mutate"