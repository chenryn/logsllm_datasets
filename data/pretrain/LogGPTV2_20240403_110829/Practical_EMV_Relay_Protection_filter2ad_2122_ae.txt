13296 | 15760 | Rdr |93 20
16964 | 22788 | Tag |3f af e3 54 27
44144 | 54672 | Rdr |93 70 3f af e3 54 27 9a 70
55860 | 59444 | Tag |20 fc 70
67680 | 72384 | Rdr |e0 50 bc a5
77364 | 91252 | Tag |0a 78 80 70 02 20 63 cb b7 80 8b 30 | ok |
|
|
|
|
| ok | SELECT_UID
|
| ok | RATS
| REQA
|
| ANTICOLL
|
|
| CRC | Annotation
Fig. 5. Excerpt from a Proxmark trace (timing in carrier periods ≈ 0.074µs)
Fig. 6. Mean reply time for the 14443-A SELECT UID and RATS commands
(note the different scales here)
to a reader command, both for Level 1 and Level 3 level
messages. The reply time for one command is deﬁned as
t = p (RdrStart − T agEnd), where Rdrstart is the time when
the reader starts transmitting its message and T agEnd is the
time when the card stops sending its reply.
B. Timing All EMV Cards at Level 1
For Level 1 timings, we focused on the responses to the
SELECT UID and Request for Answer To Select (RATS)
commands that both occur after the anti-collision routine is
complete. Note that the reply to the SELECT UID requires
no computation from the NFC chip on the card and would
be consistent with the behaviour of a nonce exchange if the
card’s nonce was prepared before the challenge was received.
Fig. 6 shows the average reply times for the Level 1
SELECT UID command and the RATS commands. The RATS
command involves more processing and its times are longer,
but still much shorter than those at Level 3. It can be seen
that there is little change in the timings for the SELECT UID
as we vary the angle or distance of the card. The standard
deviation did not vary across angles or distances and was
only 0.91µs and the time difference between the quickest reply
and the longest is only 2.36µs. For the RATS, the “normal”
Mastercard, had the longest average response time out of all
the cards, of 3231µs, with a standard deviation of 286.50µs.
So, for our experiments,
timings at Level 1 appear relatively
stable across all EMV cards.
C. Timing a RRP Test-Card at Level 3
For Level 3 timings, we focus on the nonce-exchange in
the ERRD command, although results were obtained for the
other APDUs, so that they could be compared with the other
cards that we tested (see Appendix C).
Our Mastercard-RRP test card implements up to three
nonce-exchanges, as per the ERRD command we described
in Section II. In our tests, we sent all three nonce challenges,
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:59:17 UTC from IEEE Xplore.  Restrictions apply. 
1747
Angles (deg)04590135180Distance (mm)5.011.421.024.227.430.6Time (us)1122.711123.131123.541123.951124.37Mastercard RRP select uid averageAngles (deg)04590135180Distance (mm)5.011.421.024.227.4Time (us)2792.432974.673156.923339.173521.41Mastercard rats averageFig. 7. Mean reply time for the nonce exchange commands implemented on
our Mastercard-RRP Test Card
i.e., three C-APDUs, and measured the response times for each
(labelled: rrp 1, rrp 2 and rrp 3). The average timings for
the ﬁrst and second nonce-exchange messages at the different
heights and angles are shown in Fig. 7. The timings for the
third nonce exchange are very similar to those for the second.
The statistics for these three exchanges (mean/SD in µs) are:
53,000/13,170, 40,100/15,700 and 40,100/15,680. We note:
• The time for the ﬁrst RRP exchange is signiﬁcantly
longer. The Proxmark traces showed us that for the ﬁrst
challenge only, the card responds to the ERRD command
by sending a wait request and then the response.
• The time taken depends on the distance of the card from
the reader, and not so much on the angle. A correlation
analysis conﬁrmed this dependence. Similar correlations
were seen for the other APDUs that were measured.
• The standard deviations did not vary between positions
and was approximately 13,170, 15,700 and 15,680µs for
the different nonce exchange rounds.
• The timings measured inside the replay program are
signiﬁcantly longer than those reported here,
there is
an approximately 17 ms difference (see, for example,
Figure 14 in Appendix C which shows the results for all
of the ﬁrst ERRD command exchange (denoted as rrp 1)
measurements). We initially thought that these delays
were due to the time taken to communicate with the
ACR122u reader, but subsequent tests with an Adafruit
PN532 interface connected to a Raspberry Pi showed
that the delays arose due to the PN532’s handling of
the protocol. (The ACR122u also uses the PN532 IC to
handle the NFC signalling).
In conclusion, all measurements, for all the cards tested,
showed that timings at Level 3 are far less stable than at
Level 1. This suggests that timing for relay-protection should,
for better all-round security, be done at Level 1 for EMV (and
for other application-layer protocols).
D. Relaying & Disclosure to Mastercard
Given the observed Level 3 timing variation, we looked at
the feasibility of relaying the timed nonce exchange from the
PayPass-RRP test card. Using the simple setup shown in
Fig. 8 we found that it is indeed possible to relay at Level 3
faster than the time taken by the card in the worse position to
complete a normal run. While holding the test PayPass-RRP
Fig. 8. Relay setup used to investigate possible PayPass-RRP relaying.
card, we presented it to the reader and of ten trials, three gave
timings within those seen in our measurements (for rrp 1, these
times were 67.79, 74.70 and 77.05ms, while the maximum
seen for a direct replay was 79.62ms.).
We discussed this relay attack against the test PayPass-
RRP card, and all the measurements, with Mastercard. They
welcomed the research and our suggestion that doing the timed
nonce-exchange at Level 1 may indeed be more robust against
even slightly stronger relay “boxes”. They also mentioned that
the three trials in the ERRD command should not be seen
only as an opportunity for re-tries by the relayer, but also
as a usability/recoverability feature: correcting human error,
and alerting the user that the card is in a non-ideal position.
Finally, they mentioned that newer cards (test or commercial),
which may appear soon, will be faster than our test card, and
so much harder to relay.
VII. A NEW LEVEL1-BASED RELAY-PROTECTION FOR
EMV: THE L1RP PROTOCOL
A. Protocol Design
Our L1RP protocol is an extension of the Mastercard EMV
protocol, and it provides relay resistance by timing a nonce
exchange at Level 1. The aim of our protocol is to ensure
that the EMV reader cannot successfully complete an EMV
transaction unless the card responds to the reader with its
nonce within the given time bounds. As in Mastercard’s RRP
protocol the card also returns timing information to enable
the reader to adjust its thresholds to allow for different timing
proﬁles on different cards.
We work in the threat model outlined in Section III. To
this we add the requirement that cards must be backwards
compatible with readers that do not support relay resistance,
without the possibility of downgrade attacks. Additionally,
we must ensure that the timing proﬁle from the card can be
authenticated by the reader.
Protocol Overview: Following our ﬁndings in Section VI,
our L1RP protocol takes ideas from both the Mastercard and
the Visa relay-protections, improves on aspects of them and
combines the result into a new protocol.
Our L1RP protocol moves the timed nonce-exchange, pro-
posed in Mastercard PayPass-RRP,
into the ISO 14443
Level 1 commands. This is informed by our measurements
in Section VI-B, where we concluded that Level 1 Relay
Resistance makes the RTT-measurements more reliable. As
with the proposed Visa protocol, we tie together data at Level 1
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:59:17 UTC from IEEE Xplore.  Restrictions apply. 
1748
Angles (deg)04590135180Distance (mm)5.011.421.024.227.430.6Time (us)26531.5032534.3538537.1944540.0350542.8756545.71Mastercard RRP rrp 1 averageAngles (deg)04590135180Distance (mm)5.011.421.024.227.430.6Time (us)26531.5032534.3538537.1944540.0350542.8756545.71Mastercard RRP rrp 2 averageReader
nonceR ∈R {0, 1}32
Card
AIP = Relay Protection,..
nonceC ∈R {0, 1}32
ISO 14443
messages
timed
MasterCard’s
protocol as Fig. 1
WUPA
ATQA
ANTICOLL
UID
SELECT UID
SAK
NONCE REQ nonceR
NONCE RES nonceC
RATS
ATS
SELECT 2PAY.SYS.DDF01
. . .
. . .
CID, ATC, SDAD(AC), IAD
KS = EncKM (ATC)
AC = MACKs (CDOL1,AIP,ATC,AID)
SDAD = Sign(AIP,CID,AC,CDOL1,UN)
READ RECORD
SignP rivC (AC, nonceC , nonceR, timing info)
Fig. 9. Our new L1RP protocol
with the EMV application authentication at Level 3. However,
note that at Level 1, we include nonces issued not just from
the card but from the reader as well, to avoid the problems
with the Visa proposal that we highlighted in Section V.
A run of our protocol L1RP is shown in Fig. 9. The card
signals to the reader that it supports our protocol using one of
bits in the ISO 14443 Answer to Request (ATQA) message
reserved for future use (bit 6 & bits 9-16). A bit value of 0
means the card does not support the nonce exchange, whereas
a value of 1 will signal that the exchange is supported.
Level 1 Relay Resistance: As per ISO 14443-3 [23] and
outlined in Appendix A, after a card responds with a Select
Acknowledge (SAK) message, it enters the ACTIVE state. The
protocol activation command (RATS) can then be sent by the
reader to start the application level protocol. However, a card
that is compliant with ISO 14443-3, and in the ACTIVE state
can accept proprietary commands from the reader instead.
This allows us to introduce our new Level 1 command,
NONCE_REQ, coupled with our NONCE_RES response; they
are used to execute the nonce exchange at the ISO 14443 level.
If the reader and card support our protocol, the reader sends
the NONCE_REQ command with a 32-bit nonce. A reader that
does not support the protocol will send the RATS command,
missing this NONCE_REQ command. The L1RP card replies
with the NONCE_RES response, with a 32-bit nonce. The
NONCE_REQ – NONCE_RES exchange is timed by the reader,
to prevent MitM attackers from relaying the messages. See
Fig. 10. After this exchange, the RATS command can be used
to continue the protocol.
Nonce Generation by the Card: Book 4 of the EMV
speciﬁcation [35] (page 57) suggests that nonces on EMV
cards should be generated using specialist algorithms and
circuits, e.g., via a PRNG (pseudorandom number generator),
this is left
the low-level. Normally,
but
to the card implementer. We opt for this
EMV-driven approach, that is – we do not specify our card-
side nonce generation at
this is
proprietary to manufacturers (e.g., NXP), and should adhere to
the AIS 20/31 requirements (PTG.1/2/3, DRG.1/2/3/4) [36] for
PRNG security certiﬁcation. Should a manufacturer implement
our protocol, we recommend similar PRNG-security practice
guidelines, as well as checking developments in the ﬁeld of
PRNGs for cards [37] and for other computationally-limited
devices [38].
Including Proof of
the Level 1 Nonce Exchange in
Level 3: At the EMV application level our protocol runs ex-
actly as the Mastercard PayPass protocol, but after receiving
the AC, the L1RP-compatible reader will use a new READ
RECORD command to read out the timing information for
the card (expected, maximum and minimum response times)
and the Level 1 nonces signed by the card along with the AC.
These signed nonces attest that the Level 1 nonce exchange
was done with the the card, and binds the nonces to the AC.
Protection from Downgrade Attacks: The card’s ability to
run our protocol is recorded in the AIP, described in Section
II-A, it is signed by the card in the SDAD which is checked by
the reader. So, any attempts to downgrade a card by changing
the AIP, to make the reader believe it doesn’t support L1RP
will be detected by the reader as a mismatch in the SDAD.
Separate Relay Resistance and Payment Proofs: We note
the separation of relay resistance and payment proofs (e.g.,
adding a “special” SDAD-like message sent by the card for
the distance bounding proofs). It would have been possible to
put the Level 1 nonces into the SDAD, rather than having a
separate new signature. We did not do this because: (1) we did
not want the possibility that a normal EMV transcript could be
confused with a transcript of our protocol; (2) this separation
allows for better backwards-compatibility especially over vari-
ous operation modes; (3) the separation allows clearer security
proofs (adhering to both established EMV as well as distance
bounding security models).
L1RP vs Visa’s Level 1 Relay-Protection: We now sum-
marise why L1RP does not suffer from the attack we showed
in Section V against Visa’s Level 1 relay-protection proto-
col. Recall that the security claims in Visa’s relay-protection
protocol rely on a value called UID coming only from the
card/phone’s side, i.e., the claimed security does not hinge
on any input from the reader side.
Unlike the Visa protocol, our L1RP protocol uses random
nonces (as opposed to UIDs) and they are issued from both
the card and the reader’s sides of the EMV protocol. Even if
we weakened our protocol, and let the card/phone send a UID
as per Visa’s case, just applying our attack from Section V as
is would still not work against this weakened L1RP. In our
attack, only the card’s UID is manipulated maliciously; if this
were applied to L1RP, the victim’s phone would not receive
the nonce of the real reader and the EMV-level checks in the
last step of L1RP would fail.
Now assume we lifted our attack in Section V to a MitM
who was resetting both the card and reader’s nonces in L1RP.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:59:17 UTC from IEEE Xplore.  Restrictions apply. 
1749
In L1RP, the reader’s nonce is sent out ﬁrst, and the nonce
exchange is timed by the reader. So, to fall within the allowed
time-bound, the attacker would have to guess preemptively the
nonce of the reader such as to send it in time to the victim’s
phone. This would happen with a probability of 2−32, under
our assumption of pseudorandom nonces.
In summary, the security of our protocol is based on: (1)
session-identifying, pseudorandom data coming not just from
one side but from both sides of a two-party protocol; (2) timing
this exchange of the random data, so not only can the MitM
attacker not guess it, given its pseudo-random nature, but this
MitM cannot relay it effectively either.
B. Formal Veriﬁcation of Security
We extend our model of Mastercard’s contactless protocol
from Section IV-G with support for our L1RP protocol. New
rules model the sending of the Level 1 ATQA message that
will indicate if a device supports our protocol and, for devices
that do, the NONCE REQ, NONCE RES nonce exchange
messages, as well as the reader asking for the DB proof. We
also enhance the model with the reader checkiing of this DB-
proof, the protocol-type recorded in the AIP, and add lemmas
to verify the lack of downgrade attacks.
Our model includes devices and readers that do and do not
support our L1RP protocol. We check that any combination of
devices and readers can ﬁnish an EMV transaction. We check
protection from downgrade attacks by ensuring that a reader
that supports our L1RP protocol can only ever ﬁnish a run,
without DB protection, if the device it is running the protocol
with does not support our L1RP protocol.
To verify protection from relay attacks we use the frame-
work of Mauw et. al. [5], who present a deﬁnition of causality-
based secure distance-bounding. This can be used to verify the
correctness of distance-bounding protocols without the need
to explicitly model time and locations. This model assumes a
protocol with a veriﬁer (the terminal) and a prover (the device).
The veriﬁer will have a timed phase; in our Tamarin model
we indicate this by a DB Start action when the terminal sends
the NONCE REQ message and a DB End action when the
terminal receives the NONCE RES message.
The action that the device/prover is expected to perform
during this phase (the reply to the NONCE REQ message) is
tagged with a DB Action label, and we add a DB Claim label
to the terminal Tamarin rule that veriﬁes the DB proof. All of
these actions are parameterised on the identities of the prover
and the veriﬁer, and the nonces used in the transaction.
Mauw et. al. [5] show that the standard notion of distance-
bounding security, regarding MitM attackers, holds if when-
ever there exists a DB Claim(P,V,Nc,Nr) action in a trace
then there must have been a preceding DB End (V,Nc,Nr)
action, preceded by a DB Action (P,Nc,Nr) preceded by a
DB Start(V,Nr). I.e., the prover must have acted during the
timed phase of the veriﬁer or, P or V must have been compro-
mised. This deﬁnition a la Mauw et. al. [5] is easy to check
in Tamarin, which takes 327 seconds to show that it holds and
[usb] pm3 --> hf 14a list
[+] Recorded activity (trace len = 137 bytes)
[=] Start = Start of Start Bit, End = End of last modulation.
Src = Source of Transfer