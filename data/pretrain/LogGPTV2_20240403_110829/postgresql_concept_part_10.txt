one-to-nonejoin. Section8.3coversouterjoins,whichallowunjoinedrowstoappearintheresult.
ConsidertheexampleinFigure6.15. Becausetheanimaltable’s507rabbitrowjoinstothree
rowsinthevegetabletable,therabbitrowisduplicatedthreetimesintheoutput. Thisisaone-to-
manyjoin. Thereisno joinforthe508catrowinthevegetabletable,sothe508catrowdoesnot
appearintheoutput. Thisisanexampleofaone-to-nonejoin.
72 CHAPTER6. JOININGTABLES
test=> SELECT * FROM animal;
animal_id | name
-----------+-----------------
507 | rabbit
508 | cat
(2 rows)
test=> SELECT * FROM vegetable;
animal_id | name
-----------+-----------------
507 | lettuce
507 | carrot
507 | nut
(3 rows)
test=> SELECT *
test-> FROM animal, vegetable
test-> WHERE animal.animal_id = vegetable.animal_id;
animal_id | name | animal_id | name
-----------+-----------------+-----------+-----------------
507 | rabbit | 507 | lettuce
507 | rabbit | 507 | carrot
507 | rabbit | 507 | nut
(3 rows)
Figure6.15: Aone-to-manyjoin
6.9. UNJOINEDTABLES 73
test=> SELECT *
test-> FROM animal, vegetable;
animal_id | name | animal_id | name
-----------+-----------------+-----------+-----------------
507 | rabbit | 507 | lettuce
508 | cat | 507 | lettuce
507 | rabbit | 507 | carrot
508 | cat | 507 | carrot
507 | rabbit | 507 | nut
508 | cat | 507 | nut
(6 rows)
Figure6.16: Unjoinedtables
SELECT order_id
FROM customer c, salesorder s
WHERE c.code = ’FLE001’ AND
c.customer_id = s.customer_id;
Figure6.17: Usingtablealiases
6.9 Unjoined Tables
Whenjoiningtables,itisnecessarytojoineachtablementionedintheFROMclausebyspecifying
joins in the WHERE clause. If you use a table name in the FROM clause but fail to join it in the
WHEREclause,thetableismarkedasunjoined. Itisthenpairedwitheveryrowinthequeryresult.
Figure6.16illustratesthiseffectusingthetablesfromFigure6.15. TheSELECTdoesnotjoinany
column from animal to any column in vegetable, causingeveryvalue in animal to be paired with
everyvalueinvegetable. Thisresult, calleda Cartesianproduct, isusuallynot intended. When a
queryreturnsmanymorerowsthanexpected,lookforanunjoinedtableinthequery.
6.10 Table Aliases and Self-joins
In Section 6.1, you saw how to refer to specific tables in the FROM clause using a table alias.
Figure 6.17 shows arewriteof the queryin Figure 6.14 usingaliases. A c isusedasan aliasfor
thecustomer table,andansisusedasanaliasforthesalesordertable. Tablealiasesarehandyin
thesecases.
74 CHAPTER6. JOININGTABLES
SELECT c2.name
FROM customer c, customer c2
WHERE c.customer_id = 648 AND
c.zipcode = c2.zipcode;
SELECT c2.name, s.order_id
FROM customer c, customer c2, salesorder s
WHERE c.customer_id = 648 AND
c.zipcode = c2.zipcode AND
c2.customer_id = s.customer_id AND
c2.customer_id <> 648;
SELECT c2.name, s.order_id, p.name
FROM customer c, customer c2, salesorder s, part p
WHERE c.customer_id = 648 AND
c.zipcode = c2.zipcode AND
c2.customer_id = s.customer_id AND
s.part_id = p.part_id AND
c2.customer_id <> 648;
Figure6.18: Examplesofself-joinsusingtablealiases
Withtablealiases,youcanevenjoinatabletoitselfinaself-join. Inthiscase,thesametable
is given two different alias names. Each alias then represents a different instance of the table.
Thisconceptmightseemtohavequestionableutility,butitcanproveuseful. Figure 6.18 shows
practicalexamples. Forsimplicity,resultsarenotshownforthesequeries.
ThefirstqueryinFigure6.18usescasanaliasforthecustomertableandc2asanotheraliasfor
customer. ItfindsallcustomersinthesameZIPcodeascustomernumber648. Thesecondquery
findsallcustomersinthesameZIPcodeascustomernumber648. Itthenfindstheordernumbers
placedby those customers. We have restrictedthe c2 table’s customer identificationnumber to
benotequalto648becausewedonotwantcustomer648toappearintheresult. Thethirdquery
goesfurther,retrievingthepartnumbersassociatedwiththoseorders.
6.11 Non-equijoins
Equijoins, the most common typeof join, useequality(=) to join tables. Figure 6.19 shows our
firstnon-equijoin. Thefirstqueryusesnotequal(<>)toperformthejoin. Itreturnsallcustomers
notinthesamecountryascustomernumber648. Thesecondqueryuseslessthan( c2.country
ORDER BY c2.name;
SELECT e2.name, e2.hire_date
FROM employee e, employee e2
WHERE e.employee_id = 24 AND
e.hire_date  p2.cost
ORDER BY p2.cost;
Figure6.19: Non-equijoins
thejoin. Insteadoffindingequalvaluestojoin,itjoinsallrowslaterthanaspecifichiredate. The
queryreturnsallemployeeshiredafteremployeenumber24. Thethirdqueryusesgreaterthan
(>)inasimilarway. Itreturnsallpartsthatcostlessthanpartnumber153. Non-equijoinsarenot
usedoften,butcertainqueriesrequirethem.
6.12 Ordering Multiple Parts
Ourmail-orderexamplehasaseriouslimitation: Itallowsonlyonepart_idpersalesorder. Inthe
real world, this restriction would not be acceptable. Now that we have covered many complex
jointopicsinthischapter,wearereadytocreateamorecompletedatabaselayoutthatallowsfor
multiplepartsperorder.
Figure 6.20 shows a new version of the salesorder table. Notice that the part_id column has
beenremoved. Thecustomer,employee,andparttablesremainunchanged.
Figure6.21showsanewtable,orderpart. Thistableisneededbecausetheoriginalsalesorder
tablecouldholdonlyonepartnumberperorder. Insteadofhavingpart_idinthesalesordertable,
theorderparttableholdsonerowforeachpartnumberordered. Iffivepartnumbersareinorder
number15398,thenfiverowswillappearintheorderparttablewithorder_idequalto15398.
We also add a quantity column. If a customer orders sevenof the same part number, we put
onlyonerowintheorderparttable,butsetthequantityfieldequalto7. WeuseDEFAULTtosetthe
quantityto1ifnoquantityisspecified.
Noticethattheorderparttabledoesnotincludeapricefield. Instead,thepriceisstoredinthe
76 CHAPTER6. JOININGTABLES
CREATE TABLE salesorder (
order_id INTEGER,
customer_id INTEGER, -- joins to customer.customer_id
employee_id INTEGER, -- joins to employee.employee_id
order_date DATE,
ship_date DATE,
payment NUMERIC(8,2)
);
Figure6.20: Newsalesordertableformultiplepartsperorder
CREATE TABLE orderpart(
order_id INTEGER,
part_id INTEGER,
quantity INTEGER DEFAULT 1
);
Figure6.21: Theorderparttable
6.13. PRIMARYANDFOREIGNKEYS 77
parttable. Wheneverthepriceisneeded,ajoinisperformedtogettheprice. Thischoiceallows
ustochangeapart’spriceinoneplace,andallreferencestoitwillbeupdatedautomatically.4
The tablelayoutillustratesthe master/detail useof tables. The salesordertableis themaster
table,becauseitholdsinformationcommontoeachorder,suchascustomerandemployeeidenti-
fiersandorderdate. Theorderparttable isthedetailtable, becauseitcontainsthespecificparts
makinguptheorder. Master/detailtablesareacommonuseofmultipletables.
Figure6.22showsavarietyofqueriesusingtheneworderparttable. Thequeriesdemonstrate
increasingcomplexity. Thefirstqueryalreadycontainstheordernumberof interest,sothereis
noreasontousethesalesordertable. Itgoesdirectlytotheorderparttabletofindthepartsmaking
uptheorder,joiningtotheparttabletoobtainpartdescriptions. Thesecondquerydoesnothave
theordernumber,onlythecustomer_idandorder_date. Itmustusethesalesordertabletofindthe
ordernumber,thenjointotheorderpartandparttablestogetorderquantitiesandpartinformation.
The third query does not have the customer_id, but instead must join to the customer table to
getthe customer_id for use with the other tables. Notice that each query displaysan increasing
number of columns to the user. The final querycomputes the total cost of the order. It uses an
aggregatetoSUMcosttimes(*)quantityforeachpartintheorder.
6.13 Primary and Foreign Keys
Ajoinisperformedbycomparingtwocolumns,likecustomer.customer_idandsalesorder.customer_-
id. The customer.customer_id iscalled a primary key becauseit is the unique (primary)identifier
forthecustomer table. Thesalesorder.customer_idiscalledaforeignkeybecauseitholdsakeyto
another(foreign)table.
6.14 Summary
Thischapterdealtwithtechnique—thetechniqueofcreatinganorderlydatalayoutusingmultiple
tables. Acquiringthisskilltakespractice. Expecttoimproveyourfirsttablelayoutsmanytimes.
Gooddatalayoutcanmakeyourjobeasier. Baddatalayoutcanturnqueriesintoanightmare.
As you create your first real-world tables, you will learn to identify good and bad data designs.
Continuallyreviewyourtablestructuresandrefertothischapteragainforideas. Donotbeafraid
toredesigneverything. Redesignishard,butwhenitisdoneproperly,queriesbecomeeasierto
craft.
Relationaldatabasesexcelintheirabilitytorelateandcomparedata. Tablescanbejoinedand
analyzedinwaysyoumightneverhaveanticipated. Withgooddatalayoutandthepowerof SQL,
youcanretrieveanunlimitedamountofinformationfromyourdatabase.
4Inourexample,changingpart.pricewouldchangethepriceonpreviousordersofthepart,whichwouldcauseproblems. In
therealworld,wewouldneedapartpricetabletostorethepartnumber,price,andeffectivedatefortheprice.
78 CHAPTER6. JOININGTABLES
-- first query
SELECT part.name
FROM orderpart, part
WHERE orderpart.part_id = part.part_id AND
orderpart.order_id = 15398;
-- second query
SELECT part.name, orderpart.quantity
FROM salesorder, orderpart, part
WHERE salesorder.customer_id = 648 AND
salesorder.order_date = ’7/19/1994’ AND
salesorder.order_id = orderpart.order_id AND
orderpart.part_id = part.part_id;
-- third query
SELECT part.name, part.cost, orderpart.quantity
FROM customer, salesorder, orderpart, part
WHERE customer.name = ’Fleer Gearworks, Inc.’ AND
salesorder.order_date = ’7/19/1994’ AND
salesorder.customer_id = customer.customer_id AND
salesorder.order_id = orderpart.order_id AND
orderpart.part_id = part.part_id;
-- fourth query
SELECT SUM(part.cost * orderpart.quantity)
FROM customer, salesorder, orderpart, part
WHERE customer.name = ’Fleer Gearworks, Inc.’ AND
salesorder.order_date = ’7/19/1994’ AND
salesorder.customer_id = customer.customer_id AND
salesorder.order_id = orderpart.order_id AND
orderpart.part_id = part.part_id;
Figure6.22: Queriesinvolvingtheorderparttable
Chapter 7
Numbering Rows
Unique identification numbers and short character codes allow references to specific rows in a
table. TheywereusedextensivelyinChapter6. Forexample,thecustomertablehadacustomer_-
idcolumnthatheldauniqueidentificationnumberforeachcustomer. Theemployeeandparttables
includedsimilaruniquelynumberedcolumnsthatwereimportantforjoinstothosetables.
Whileuniquecharactercodesmustbesuppliedbyusers,uniquerownumberscanbegenerated
automaticallyusingtwomethods. Thischapterdescribeshowtousethesemethods.
7.1 Object Identification Numbers (OIDs)
EveryrowinPOSTGRESQLisassignedaunique, normallyinvisiblenumbercalledanobjectiden-
tification number (OID). When the software is initialized with initdb,1 a counter is created and
set to approximately seventeen-thousand.2 The counter is used to uniquely number everyrow.
Although databasesmay be created anddestroyed, the counter continues to increase. It is used
byalldatabases,soidentificationnumbersarealwaysunique. Notworowsinanytableorinany
databasewilleverhavethesameobjectID.3
You have seen object identification numbers already—they are displayed after every INSERT
statement. IfyoulookbackatFigure3.4onpage15,youwillseethelineINSERT 19053 1. INSERTis
thecommandthatwasexecuted,19053istheobjectidentificationnumberassignedtotheinserted
row, and 1 is the number of rows inserted. A similar lineappearsafter everyINSERT statement.
Figure 6.4 on page 63 shows sequential object identification numbers assigned by consecutive
INSERTstatements.
Normally,arow’s objectidentificationnumberisdisplayedonlybyINSERTqueries. However,
iftheOIDisspecifiedby a non-INSERTquery,it willbe displayed,asshownin Figure 7.1. In that
1SeeAppendixBforadescriptionofinitdb.
2Valueslessthanthisarereservedforinternaluse.
3Technically,OID’sareuniqueamongalldatabasessharingacommon/datadirectorytree.
79
80 CHAPTER7. NUMBERINGROWS
test=> CREATE TABLE oidtest(age INTEGER);
CREATE
test=> INSERT INTO oidtest VALUES (7);
INSERT 21515 1
test=> SELECT oid, age FROM oidtest;
oid | age
-------+-----
21515 | 7
(1 row)
Figure7.1: OIDtest
example, the SELECThas accessedthe normally invisible OID column. The OID displayedby the
INSERTandtheOIDdisplayedbytheSELECTarethesame.
Even though no OID column is mentioned in CREATE TABLE statements, every POSTGRESQL
tableincludesaninvisiblecolumncalledOID. Thiscolumn appearsonlyifyou specificallyaccess
it.4 ThequerySELECT * FROM table_namedoesnotdisplaytheOIDcolumn. However,SELECT oid,
* FROM table_namewilldisplayit.
Object identification numbers can be used as primary and foreign key values in joins. Since
everyrowhasauniqueobjectID,aseparatecolumnisnotneededtoholdtherow’suniquenumber.
Forexample,inChapter6weusedacolumncalledcustomer.customer_id. Thiscolumnheldthe
customer number and uniquelyidentifiedeachrow. Alternatively,wecould haveusedthe row’s
objectidentificationnumberastheuniquenumberforeachrow,eliminatingtheneedtocreatethe
columncustomer.customer_id. Inthatcase,customer.oidwouldbetheuniquecustomernumber.
With this change, a similar change should be made in the salesorder table. We could rename
salesorder.customer_id to salesorder.customer_oid because the column now refers to an OID. The
columntypeshouldbechangedaswell. Thesalesorder.customer_idwasdefinedastypeINTEGER.
Thenewsalesorder.customer_oidcolumnwouldholdtheOIDofthecustomerwhoplacedtheorder.
Forthisreason,weshouldchangethecolumntypefromINTEGERtoOID. Figure 7.2showsanew
versionofthesalesordertableusingeachrow’sOIDasajoinkey.
AcolumnoftypeOIDissimilartoanINTEGERcolumn,butdefiningitasatypeOIDdocuments
thatthecolumnholdsOIDvalues. DonotconfuseacolumnoftypeOIDwithacolumnnamedOID.
Every row has a column named OID, which is normally invisible. A row can have zero, one, or
moreuser-definedcolumnsoftypeOID.
AcolumnoftypeOIDisnotautomaticallyassignedanyspecialvaluefrom thedatabase. Only
thecolumnnamedOIDisspeciallyassignedduringINSERT.
Also,theorder_idcolumninthesalesordertablecouldbeeliminated. Thesalesorder.oidcolumn
wouldthenrepresenttheuniqueordernumber.
4Severalotherinvisiblecolumnsexistaswell.ThePOSTGRESQLmanualscovertheirmeaninganduse.
7.2. OBJECTIDENTIFICATIONNUMBERLIMITATIONS 81
test=> CREATE TABLE salesorder (
test(> order_id INTEGER,
test(> customer_oid OID, -- joins to customer.oid
test(> employee_oid OID, -- joins to employee.oid
test(> part_oid OID, -- joins to part.oid
…
Figure7.2: ColumnswithOIDs
7.2 Object Identification Number Limitations
Thissectioncoversthreelimitationsofobjectidentificationnumbers.
Nonsequential Numbering
TheglobalnatureofobjectidentificationassignmentmeansmostOIDsinatablearenotsequential.
Forexample,ifyouinsertonecustomertoday,andanotheronetomorrow,thetwocustomerswill
notgetsequentialOIDs. Infact,theirOIDscoulddifferbythousandsbecauseanyINSERTsintoother
tables between the two customer inserts would increment the object counter. If the OID is not
visibletousers, thisgapinnumbering isnot aproblem. Thenonsequentialnumberingdoesnot
affectqueryprocessing. However,ifuserscanseeandenterthesenumbers,itmightseemstrange
thatcustomeridentificationnumbersarenotsequentialandhavelargegapsbetweenthem.
Nonmodifiable
AnOIDisassignedtoeveryrowduringINSERT. UPDATEcannotmodifythesystem-generatedOID
ofarow.
Not Backed Up by Default
Duringdatabasebackups,thesystem-generatedOIDofeachrowisnormallynotbackedup. Aflag
mustbeaddedtoenablethebackupof OIDs. SeeSection20.5fordetails.
7.3 Sequences
POSTGRESQLoffersanotherwayofuniquelynumberingrows—sequences. Sequencesarenamed