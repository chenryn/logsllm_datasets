### Native Code Context Enforcement

The process creation guard, as discussed in Section V-B, restricts the access privileges of native operations with a coarse-grained Granted or Denied decision. However, enterprises may require more fine-grained control over these operations. For example, instead of completely disconnecting an app from the Internet, it might be preferable to allow access to specific trusted web servers. To address this, we have developed a native code context enforcement module that regulates network access by confining the context of socket calls, such as `connect`, `recvfrom`, and `sendto`.

#### Tracing System Calls

To constrain the native behaviors of a target process, we trace its system calls. It is crucial to ensure that the tracing code is executed before any operation of the target process. Therefore, we detect the launching of the target process and monitor it throughout its entire lifecycle. We achieve this by tracing `fork` calls from processes responsible for creating new app processes (e.g., zygote, adbd) and then mapping newly created processes to applications by matching their UIDs. Once the target app is identified, we recursively trace the system calls of its process tree by setting `ptrace` options, including `TRACEFORK`, `TRACEVFORK`, and `TRACECLONE`.

When our module successfully attaches to the target process, it can receive signals at both the entry and exit of system calls, while the target process is suspended during `syscall-enter-stop` and `syscall-exit-stop`. We maintain a flag for each target process to distinguish between system call entries and exits. In a typical workflow, the module uses `ptrace` to extract CPU register information from a suspended target. According to the ARM Procedure Call Standard [15], the parameters of system calls are stored in registers R0–R3 and SP, and the result of a system call is always stored in register R0. This allows us to easily parse the parameters and return values of system calls. Based on policy rules, we can either decline a resource access request or send a fake return value.

Our focus is on providing a mechanism to support native code context enforcement rather than designing detailed policy rules. Different applications may require different parsers to inspect their unique context information. For instance, to restrict datagram communication with a certain remote server, we need to regulate system calls like `sendto`, `sendmsg`, `recvmsg`, and `recvfrom`. At the entry of `sendto`, the destination address is extracted from the `sockaddr` structure. The system call is allowed if the destination address is valid; otherwise, it is stopped. Similarly, at the exit of `recvfrom`, we can recognize the received buffer data and mask its content accordingly.

### DeepDroid Evaluation

Our evaluation of DeepDroid aims to achieve three main goals: (1) demonstrate that security policies on resource access can be effectively enforced, (2) show that DeepDroid can be easily deployed on various Android platforms, and (3) measure its performance overhead. We also analyze the security and reliability of DeepDroid.

#### Functional Evaluation

To test the effectiveness of DeepDroid, we selected prevalent resources of Android identified in [13] and ran several popular apps that access these resources. For each resource, we chose the five most widely used apps from Google Play. In our experiment, we manually instrumented each resource-related method call to check if the operations could be successfully regulated when DeepDroid was activated to prohibit access to the resource. Table III shows the evaluation results, which confirm that all resource access operations were effectively controlled.

| Resource | Permission | Group | Result |
|----------|------------|-------|--------|
| IMEI | READ PHONE STATE | PEP1 | √ |
| Phone # | READ PHONE STATE | PEP1 | √ |
| Location | ACCESS FINE LOCATION | PEP1 | √ |
| Contacts | READ CONTACTS | PEP1 | √ |
| Camera | CAMERA | PEP1 | √ |
| Account | GET ACCOUNTS | PEP1 | √ |
| Logs | READ LOGS | PEP1 | √ |
| Network | INTERNET | inet | √ |
| SMS/MMS message | SEND SMS | inet | √ |

1. PEP is the policy enforcement point.
2. The policy is enforced either in package service or by Process Creation Guard (PCG).

#### Portability Evaluation

We tested DeepDroid on a series of smartphones running Android OS versions 2.3 to 4.x. As summarized in Table IV, DeepDroid can be successfully deployed on mainstream commercial Android devices with minimal system modifications.

| Device | Android Version | Result |
|--------|-----------------|--------|
| Nexus S (Samsung) | 2.3.6 | √ |
| Sony LT29i | 4.1.2 | √ |
| Galaxy Nexus (Samsung) | 4.2.2 | √ |
| Samsung Galaxy Note II | 4.0 | √ |
| Samsung Galaxy Note 3 | 4.1 | √ |
| Nexus 5 (LG) | 4.3 | √ |
| Meizu MX II | 4.4 | √ |
| HUAWEI Honor 3c | 4.2 | √ |

1. Flyme 3.2 is a customized version of Android OS 4.2.1.

#### Performance Evaluation

DeepDroid's system overhead primarily comes from permission enforcement, binder message interception, and system call tracing. Since permission checking is often accompanied by a binder transaction, we combined these two overhead factors. We evaluated performance by initiating resource access operations that require permission checking in the following scenarios:

- **Normal mode (S)**: The tested apps are granted required permissions by the original permission mechanism, and the trigger points are executed successfully.
- **Intercepted mode (S)**: The tested apps are granted required permissions by the Permission Configurator, and the trigger points are intercepted and monitored by the binder.
- **Normal mode (F)**: The tested apps are denied required permissions.

#### Security Analysis

DeepDroid ensures enterprise security policy enforcement on Android devices through dynamic memory instrumentation of critical system processes. Here are some key security considerations:

- **Malicious Apps**: DeepDroid allows users to install their favorite apps, but malicious apps are securely isolated into separate containers. Without root privilege, they cannot manipulate DeepDroid's code or control flow.
- **Permission Escalation Attacks**: DeepDroid can regulate communications between apps through the binder and system calls. However, if apps communicate through covert channels, additional mechanisms are needed to remove these channels.
- **Uncooperative Users**: Some employees may deactivate the system. Heartbeat messages and software-based attestation can help ensure DeepDroid is running correctly.
- **DeepDroid Misuse**: An attacker impersonating an enterprise administrator cannot send false policy rules without the shared keying material. The small codebase of DeepDroid makes it difficult to misuse, and all communications are protected by a shared secret key.

### Discussion

At the Google I/O 2014 conference, Android L was unveiled, and the experimental Android Runtime (ART) replaced Dalvik as the default environment. ART compiles bytecode into executable ELF files during app installation. Despite this change, the foundations of DeepDroid, including the permission mechanism, system service architecture, and binder IPC, remain largely unchanged. Thus, DeepDroid can be easily ported to ART with minor modifications, particularly in the implementation of runtime method interception.

DeepDroid requires root privilege for installation, a common requirement among enterprise mobile management solutions. With OEM support, installation is straightforward and incurs minimal impact on the Android system. DeepDroid does not alter the framework or kernel, making it compatible with almost all Android versions and platforms. Compared to other solutions like SELinux and Knox, DeepDroid offers better compatibility and ease of deployment.