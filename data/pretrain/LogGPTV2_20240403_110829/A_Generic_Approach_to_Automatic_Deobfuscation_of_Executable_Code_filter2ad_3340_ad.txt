approach on single-level emulation, we applied the commer-
cial obfuscators named above to several malware programs,
whose source code we obtained from VX Heavens [31],
together with two synthetic benchmarks we wrote ourselves.
The malware programs we used were: Blaster [29], Cairuh,
epo, hunacha, newstar, and netsky ae [30]. Of these programs,
Blaster is a network worm; Cairuh is a P2P worm; hunatcha
4“Mutable CISC processor” and “metamorphic level-2” are settings in the
Themida tool; the available documentation does not specify, in any further
detail, exactly how these settings affect the low-level characteristics of the
obfuscated code.
Our Ether-based tracing infrastructure crashed on the Cairuh
and blaster programs obfuscated with Themida so we were
unable to collect an execution trace for these programs.
683683
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:09:00 UTC from IEEE Xplore.  Restrictions apply. 
EnumProcesses
strcpy
OpenProcess
TerminateProcess
EnumProcessModules
GetModuleBaseNameA
CloseHandle
_strupr
FreeLibrary
strcmp
Original










EnumProcesses
strcpy
OpenProcess
TerminateProcess
EnumProcessModules
GetModuleBaseNameA
CloseHandle
_strupr
FreeLibrary
strcmp
Obfuscated (cropped)
Deobfuscated
(a) Netsky ae1: Code Virtualizer
Original
Obfuscated (cropped)
Deobfuscated
(b) Hunatcha: ExeCryptor
Original
Obfuscated (cropped)
Deobfuscated
(c) Matrix multiply: Themida
Fig. 6. Effects of obfuscation and deobfuscation on the control ﬂow graphs of some malware samples
684684
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:09:00 UTC from IEEE Xplore.  Restrictions apply. 
Control ﬂow graph similarity (%)
THEMIDA
PROGRAM
huffman
hunatcha
matrix-mult
Cairuh
blaster
newstar
epo
netsky ae1
netsky ae2
netsky ae3
netsky ae4
AVERAGE
CODE VIRTUALIZER
Deobf.
72.24
90.30
81.63
89.02
84.54
94.38
92.51
88.03
80.85
92.85
86.60
86.63
Obf.
20.75
22.43
06.50
39.37
13.25
09.09
29.26
19.78
50.90
11.52
30.30
23.01
EXECRYPTOR
Obf.
06.08
04.82
01.31
26.46
02.40
02.15
07.86
08.19
13.12
02.43
20.71
08.68
Deobf.
83.50
90.04
83.95
94.04
84.87
92.56
80.92
87.27
93.40
85.49
75.04
86.43
TABLE I
Obf.
06.03
05.60
01.56
NA
NA
02.21
09.28
06.15
19.75
03.84
14.04
07.60
Deobf.
83.91
84.84
81.63
NA
NA
96.70
81.23
84.14
88.17
82.81
82.66
85.12
VMPROTECT
Obf.
16.45
15.57
07.22
28.68
14.07
08.49
20.03
19.00
24.50
09.35
22.65
16.91
Deobf.
46.40
73.65
75.55
82.39
89.24
75.20
96.28
82.81
89.95
94.36
87.85
81.24
SIMILARITY OF ORIGINAL AND DEOBFUSCATED CONTROL FLOW GRAPHS: EMULATION-OBFUSCATION
In Figure 7 we have included the CFGs of a subtrace
of the netsky1 ae program with instructions included in the
graph: Figure 7(a) corresponds to the original program and
(b) corresponds to the deobfuscated program obfuscated us-
ing Code Virtualizer. This shows that with the high level
information that can be recovered by the CFGs, program
semantic information is also included at the instructions level.
For example in Figure 7, it can be seen that in both graphs,
there is a test on the output of the strcmp function call
marked with label 1. The program is trying to kill all the
unwanted processes currently running in the system and by
comparing process names with ones in a list, it determines
whether to terminate the process or not. If the comparison
satisﬁes, it calls OpenProcess (labeled with 2) and then
terminates the process using a call to TerminateProcess
(labeled with 3). There is correspondence between two graphs
and the semantics are equivalent in both the original and
deobfuscated programs. Getting this level of information from
the obfuscated program, where the graph is shown on Figure
6(a), is very unlikely, if not impossible, and requires signiﬁcant
amount of time and efforts.
However, there is one difference between two graphs that
should be noted here. As it was discussed in Section III-D, the
CFG construction algorithm tries to balance between the code
duplications and the number of paths in the ﬁnal graph. Doing
so, the CFG constructed for the deobfuscated program uses an
existing block (pointed by label 4) rather than duplicating it
for the corresponding block in original program (also pointed
by label 4). This is mostly because in the original program,
only one target branch is observed (for the basic block pointed
by label 4) and so the CFG construction algorithm does not
have a clue about the other branch existing in the original
program. It should also be noted that this does not however
affect the semantics of the program and the constructed graph
still represents the original logic correctly and this is a general
limitation for dynamic analysis where the code coverage is an
issue rather a speciﬁc limitation of our approach.
Analysis speed depends partly on the input trace size but
mostly on the number of iterations of code simpliﬁcation
needed, which in turn depends on how entangled the ob-
fuscations are; there seems to be a non-linear component to
the execution time that we are currently looking into. Execu-
tion times for the three largest trace ﬁles, Cairuh-VMProtect
(6.4M instructions), hunatcha-Themida (7.7M instructions),
and huffman-Themida (56.6 M instructions) are 188 sec, 244
sec, and 4,726 sec respectively, which translate to speeds
of 34,042 instrs/sec, 31,557 instrs/sec, and 11,976 instrs/sec
respectively.
We have also applied our deobfuscator
to a number
of emulation-obfuscated malicious binaries that we ob-
tained from virusshare.com, including Win32/Kryptik, Trojan-
Downloader.Banload, Win32.Dubai, W32/Dialer, and Back-
door.Vanbot. Space constraints preclude showing the origi-
nal and simpliﬁed CFGs for these programs, so we brieﬂy
summarize our ﬁndings. We found that in the samples we
tested, emulation was typically applied selectively to selected
sensitive code regions, with multiple layers of unpacking
added subsequently to further obfuscate the malicious payload.
Our deobfuscator was able to remove all of the emulation
and unpacking code, leaving only the logic of the malicious
payload with a much simpler CFG. The time taken to perform
this simpliﬁcation for the malware samples we tested was
around 10 minutes per sample.
Overall, these results show that while our prototype imple-
mentation is not yet perfect, it is nevertheless able to extract
control ﬂow graphs that closely resemble those of original
unobfuscated programs. Notably, it is able to do this for both
“ordinary” emulation-obfuscated programs and also Themida-
obfuscated programs, which combine runtime unpacking with
emulation and, as far as we know, are not handled by any
previously proposed techniques for automatic deobfuscation.
Considering that we make very few assumptions about the
nature of the obfuscations applied, we consider this encourag-
ing. We are currently working on improving our analyses to
improve the deobfuscation results further.
2) Multi-level Emulation: We have also applied our ap-
proach to programs obfuscated using multiple levels of em-
ulation, i.e., where one emulator interprets another emulator
685685
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:09:00 UTC from IEEE Xplore.  Restrictions apply. 
 jmp dword near [0x4020b0] 
 strcpy
2
 mov edx, [ebp+0xfffffee0] 
 mov eax, 0x458 
 push eax 
 push 0x0 
 push dword 0x410 
 mov dword [0x12e79c], 0x0 
 OpenProcess
 cmp dword [ebp+0xffffedec], 0x0 
 lea ecx, [ebp+0xfffffdb0] 
 push ecx 
 push 0x4 
 lea edx, [ebp+0xfffffed8] 
 push edx 
 mov eax, [ebp+0xffffedec] 
 push eax 
 mov dword [0x12e798], 0x0 
 cmp dword [ebp+0xffffedec], 0x0 
 push 0x0 
 mov edx, [ebp+0xffffedec] 
 push edx 
 mov dword [0x12e7a0], 0x0 
3
 EnumProcessModules
 TerminateProcess
 push dword 0x104 
 lea ecx, [ebp+0xfffffdc8] 
 push ecx 
 mov edx, [ebp+0xfffffed8] 
 push edx 
 mov eax, [ebp+0xffffedec] 
 push eax 
 mov dword [0x12e798], 0x0 
 GetModuleBaseNameA
 mov ecx, [ebp+0xffffedec] 
 push ecx 
 mov dword [0x12e7a4], 0x0 
 CloseHandle
 push edx 
 lea eax, [ebp+0xfffffdc8] 
 push eax 
 mov dword [0x12e7a0], 0x0 
 _strupr
 push eax 
 call 0x40101c 
 push eax 
 call 0x40101c 
1
 jmp dword near [0x4020bc] 
 strcmp
 test eax, eax 
 jnz dword 0x401ad9 
 test eax, eax 
 mov dword [ebp+0xfffffeec], 0x1 
 mov eax, [ebp+0xfffffee0] 
 mov ecx, 0x568 
 push ecx 
 push 0x0 
 push 0x1 
 mov dword [0x12e79c], 0x0 
 lea ecx, [ebp+0xfffffef0] 
 push ecx 
 lea edx, [ebp+0xfffffdc8] 
 push edx 
 mov dword [0x12e7a0], 0x0 
4
 mov edx, [ebp+0xfffffee0] 
 add edx, 0x1 
 mov [ebp+0xfffffee0], edx 
 mov eax, [ebp+0xfffffee0] 
 cmp eax, [ebp+0xffffe9fc] 
 jae dword 0x401ade 
 jmp dword near [0x4020b0] 
 strcpy
2
 sub esp, 0x4 
 mov dword [esp], 0x432 
 sub esp, 0x4 
 mov dword [esp], 0x0 
 sub esp, 0x4 
 mov dword [esp], 0x410 
 mov dword [0x12e7a8], 0x0 
 jmp 0x406038 
 OpenProcess
 mov [esp], eax 
 sub esp, 0x4 
 mov edi, 0x404200 
 push eax 
 pop ecx 
 cmp ecx, 0x0 
 pushfd  
 mov eax, 0x7 
 pop dword [edi+eax*4] 
 mov eax, 0x40421c 
 mov ecx, [eax] 
 and ecx, 0x40 
 shr ecx, 0x6 
 mov eax, 0x1 
 xor eax, ecx 
 mov [esp], eax 
 not dword [esp] 
 mov eax, [esp] 
 and eax, 0x1 
 mov edx, eax 
 shl edx, 1 
 mov [0x404220], edx 
 mov edi, 0x404200 
 cmp dword [edi+0x20], 0x0 
 sub esp, 0xc 
 mov dword [esp], 0x0 
 mov eax, [0x12eba0] 
 push eax 
 jmp 0x406038 
3
 TerminateProcess
 add esp, 0x6 
 mov dword [esp], 0x40273c 
 sub esp, 0x6 
 mov dword [esp], 0xfffffdc8 
 add esp, 0x2 
 mov dword [esp], 0x40903b 
 jmp dword near [0x4020b0] 
 push dword 0x0 
 push dword 0x404200 
 mov edx, 0x404200 