约 25 名后端工程师
2 个数据中心
约 30 个后端服务
7 种客户端
前奏
在本节中，我们将讨论如何在处理运营时变得更加敏捷，以及我们的价值如何同步增长：
敏捷运维
我们需要从将服务器视为“宠物”的心态，转向硬件集群是“牲口”的心态；这从根本上改变了我们处理工具和操作流程的方式。
核心工程价值
我们从一开始就倾向于自主和信任，这为我们的工作方式开了一点。然而，随着我们对运维流程的熟悉，技术组织正在发生更大的转变，这将促使我们再次重新评估我们的方法。过去，当我们谈论服务时，我们经常谈论单个服务器：“服务器 X 的磁盘已满”、“我们需要添加另一个 CPU 够威力的服务器，以减轻其他登录服务器的负载”等等。这对我们很重要，因为每个服务器都有自己的特性和个性，只有知道这一点，我们才能真正优化这些服务器的使用。此外，每个健康的服务器都是某人的宠物。通过查看服务器受到的精心处理，可以判断哪些服务是健康的：例如，/home目录是否定期清理，或者特定于服务的日志是否良好且有序。
我们的世界以服务器为中心，而不是以服务为中心，这在我们的对话、优先级和工具中都表现出来。
形成不良习惯
 最初在 Spotify 构建和使用的工具用于管理我们新生的队列，假定服务器在安装并投入使用后将继续在后端的某处工作，直到退役。还假定，从大概率来说，预配服务器本身将是一个不寻常的事件，每月只执行几次。因此，安装服务器的工具需要几分钟才能运行，而且频繁的手动干预是可以接受的。从开始到结束，一批服务器的安装可能需要一个小时到一个完整的工作日。到 2011 年，我们安装新服务器的频率远远超过预期。重新利用服务器是一个已知的过程，但经常有一些问题迫使运维介入并手动修复问题。
对于一家拥有少量服务器的小型公司来说，这并不奇怪或没有错，但在我们目前的阶段，Spotify 已经有了两个数据中心，有实时流量，还有第三个数据中心正在启用中。由于服务器数量数不胜数，因此越来越难以做到这一点。
打破那些坏习惯
 业内的运维模式正在转变，尽管我们中的一些人看到了它的到来，但谁也不知道这对我们意味着什么，也不知道我们的服务的可用性将会如何。当这种转变在我们之中发生时，其实是简单和明显的：我们需要调整我们的硬件，以适应我们的意图，而不是调整我们的意图，以适应硬件。
这种转变对于我们中的许多人来说很难进入，因为我们在日常工作中太舒服了。事实上，这种心态花了几年时间才完全改变，可能是因为我们花了这么长时间才创造出工具，使这种心态的转变成为可能。2011 年底，又开始了另一个基本上被忽视的转变：功能开发人员开始以不同的方式组织。午餐时，我们听到开发人员谈论自主自组织团队，以及他们属于哪个“章节”。我们仍然可以与他们讨论服务和用户，但现在的对话包括关注产品和利益相关者。整个开发部门正在缓慢地过渡到一个可扩展的敏捷组织，我们运维部门从一旁观察到这一点。
从我们这些在运维团队中的人的角度来看，这种组织变革最令人不快的是它对我们的角色产生了辅助作用。命名从“开发团队”到“团队”的转变，加上对自主性和自我组织性的重视，挑战了我们习惯的中心性。小队又被分组成所谓的“部落”，这些“部落”也有自主和自我组织的明确意图。
现在，运维团队面对的是多个部落，每个部落的结构略有不同，令人担忧的是，很少有保持同质化的迹象。 
关键收获
这一时期的一些主要知识是：
将思维模式从以服务器为中心切换到以服务为中心，并使工具反映这一点。
敏捷矩阵组织模型的引入迫使我们重新思考运维的定位。敏捷矩阵组织模型的引入迫使我们重新思考运维的定位。
无法扩展的系统：2012
 近 25 名运维工程师
近 70 名后端工程师
三个数据中心，几千台服务器
近 50 个后端服务
前奏
在本节中，我们将讨论运维团队与组织一同扩展的挑战：
迭代胜过失败
有效的扩展仍然很困难，而放弃我们的责任是不够的。我们需要重新审视 Spotify 的运维含义。
默认需要运维经验
执行大部分运维工作的中央运维团队无法扩展规模。我们需要通过将运维责任完全转移到开发人员更近的位置，使运维真正成为普遍技能。
现在是 2012 年，Spotify 用户群继续增长，为我们带来了新的可扩展性和稳定性问题。
运维小组由不到十名 SRE 组成（事实上，在这两年才开始 SRE 这个称呼），在斯德哥尔摩和纽约两地按需招聘。作为运维所有者，每个 SRE 负责数十项后端服务的维护：处理新版本的部署、容量规划、系统设计评审、配置管理或代码评审，以及维护操作手册，当然还有其他几个日常运维职责。我们的后端现在在三个数据中心运行，第四个数据中心即将投入运行，我们必须维护更多资源。这意味着我们负责配置机架交换机、订购硬件、远程手动布线、服务器引入、主机配置、打包服务、配置管理和部署，从物理空间到应用程序环境。由于责任范围扩大，我们组建了另一个团队来开发工具自动化，并与运维部门密切合作。该团队开发的早期产品之一是（用于硬件清单和容量调配的）配置管理数据库（CMDB）。
由于配置定制且不均匀性，可预测性很难。运维所有者与服务的开发人员需要密切合作，努力提高质量，遵循生产就绪实践，并运行一个现已正式的部署清单，以确保即使在初始阶段的服务设计也符合运维标准。我们经常提出的关切包括：
服务是否在我们的构建系统上打包和构建？
该服务是否生成日志？
是否有图形、监视和警报？
已定义备份和还原测试？
是否有安全审查？
谁拥有这项服务？它的依赖项是什么？
是否有任何潜在的可扩展性问题？是否有任何单点故障？是否有任何潜在的可扩展性问题？是否有任何单点故障？
手工运维碰壁
 尽管我们不断手动或通过配置管理进行部署，但持续交付机制并未形成。我们仍然以良好的速度，不断的发布更新，但是以手工完成的工作为代价。