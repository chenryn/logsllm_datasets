import gmpy2
import hashlib
from Crypto.Util.number import size, getRandomRange, GCD, getStrongPrime, inverse, getRandomInteger
from crypto_commons.netcat.netcat_commons import nc, send
class RemoteOracle:
    def __init__(self):
        url = "ppc2.chal.ctf.westerns.tokyo"
        port = 38264
        self.s = nc(url, port)
    def get_lsb(self, payload):
        send(self.s, hex(long(payload))[2:-1])
        data = self.s.recv(9999)
        if data[0] != '1' and data[0] != '0':
            print("WTF", data)
        return data[0]
def LCM(x, y):
    return x * y // GCD(x, y)
def L(x, n):
    return (x - 1) // n
def encrypt(m, g, n, n2):
    r = getRandomRange(1, n2)
    c = pow(g, m, n2) * pow(r, n, n2) % n2
    return c
def decrypt(c, sk1, sk2, n, n2):
    return L(pow(c, sk1, n2), n) * sk2 % n
def recover_high_bits(low, oracle, n, n2, g, ct):
    print('cracking high bits')
    mbits = size(n)
    b = mbits // 2
    result_bits = []
    subtractor = n - low
    sub = encrypt(subtractor, g, n, n2)
    ct_sub = (ct * sub) % n2
    for i in range(b):
        divisor = inverse(2 ** i, n)
        payload = pow(ct_sub, divisor, n2)
        lsb = oracle.get_lsb(payload)
        result_bits.append(str(lsb))
    return "".join(result_bits[::-1])
def recover_low_bits(oracle, n, n2, g, ct):
    print('cracking low bits')
    mbits = size(n)
    bits_to_recover = mbits // 2
    result_bits = []
    initial_state = oracle.get_lsb(ct)
    for i in range(bits_to_recover):
        filling = ['0' if known_bit == '1' else '1' for known_bit in result_bits]
        add = int("".join(filling + ['1']), 2) > self.b) & 1
def testing_full(i):
    print('running full test %d times' % i)
    bits = 128
    for i in range(100):
        p = gmpy2.next_prime(2 ** (bits / 2))
        q = gmpy2.next_prime(p)
        n = p * q
        n2 = n * n
        mbits = size(n)
        b = mbits // 2
        k = getRandomRange(0, n)
        g = (1 + k * n) % n2
        sk1 = LCM(p - 1, q - 1)
        sk2 = inverse(L(pow(g, sk1, n2), n), n)
        pt = getRandomInteger(bits - 1)
        ct = encrypt(pt, g, n, n2)
        assert decrypt(encrypt(pt, g, n, n2), sk1, sk2, n, n2) == pt
        print(pt)
        print(bin(pt)[2:])
        low = recover_low_bits(LocalOracle(sk1, sk2, n, n2, b), n, n2, g, ct)
        print(low)
        high = recover_high_bits(int(low, 2), LocalOracle(sk1, sk2, n, n2, b), n, n2, g, ct)
        print(high)
        result = int(high + low, 2)
        print(result)
        assert result == pt
# testing_full(100)