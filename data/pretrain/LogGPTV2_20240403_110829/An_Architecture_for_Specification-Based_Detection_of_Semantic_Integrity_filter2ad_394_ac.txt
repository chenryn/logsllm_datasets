lowing are a minimal set of design considerations for the
model builder and speciﬁcation compiler components:
• How will the system distinguish inconsistent data
resulting from a read that occurs while the kernel
is in the middle of a data structure update from an
invalid kernel state?
• How can the system schedule data reads such that
relationships to be tested among digital objects are
tested on a set of objects that were read at or about
the same time?
• How can the system schedule data reads to mini-
mize the total number of reads necessary to check a
particular constraint or set of constraints?
In Section 4, we discuss how our initial implementation
handles these issues. To summarize our results, we pos-
tulate that simple extensions to the modeling language
can help the speciﬁcation compiler reason about the na-
ture of underlying data, including how likely it is to
change over time and the best order in which to process
it. As a promising indication of our success, the resulting
system experienced no false positives in any of our tests.
However, in a speciﬁcation-based system the possibility
for false positives or false negatives is more a reﬂection
of the speciﬁcation than of the system. An expert with
better knowledge of the system will have more success
in this regard.
4 Implementation
In this section, we describe our implementation of the
above architecture and the testing we performed on a sys-
tem running the Fedora Core 4 GNU/Linux distribution.
Using our system, we have implemented (in C) two spec-
iﬁcations designed to protect the Linux 2.6 process ac-
counting and SELinux AVC subsystems respectively. We
then tested our speciﬁcations against implementations of
the two attacks described in Section 2. We successfully
detected both of these attacks with zero false positives
when our detection code was running on a PCI-based
monitor similar to Copilot [29]. Table 1 provides more
detailed information about our test environment. These
USENIX Association
Security ’06: 15th USENIX Security Symposium
295
Protected Host
Dell Dimension 4700
1GB
Single 2.8GHz Pentium 4
40GB IDE Hard Disk
Machine Type
RAM
Processor
Storage
Operating System Redhat Fedora Core 4 full installation Embedded Linux 2.4 kernel
Networking
PCI-based Monitor
Bus-mastering PCI add-in card
32MB
200MHz Motorola PowerPC 405GP
4MB Flash memory
10/100 PCI NIC
10/100 on-board NIC
Table 1: Semantic integrity test platform summary.
tests demonstrate that it is possible to write useful spec-
iﬁcations using our technique, and that these speciﬁca-
tions can be coupled with an existing integrity monitor
to provide an effective defense against real attacks.
We begin our discussion by describing our speciﬁca-
tion language, an adaptation of that presented by Dem-
sky and Rinard [7], in the context of our Linux process
accounting example.
4.1 Writing Speciﬁcations: a Linux
Hidden Process Example
Demsky and Rinard introduced a system for automat-
ically repairing data structure errors based on model
and constraint speciﬁcations [7]. The goal of their
system was to produce optimized data structure error
detection and repair algorithms [9] that were guaranteed
to terminate [8]. Because of the differences explained
in Section 3, we have adapted Demsky and Rinard’s
speciﬁcation languages and the corresponding parser and
discarded all of the automatic code generation portions.
Our intention is to replace them with a code generation
algorithm better suited to our environment. This section
provides a brief overview of their speciﬁcation language
syntax and identiﬁes the changes necessary to support
our kernel integrity system. It also introduces our ﬁrst
example speciﬁcation for detecting hidden processes in
the Linux kernel. Demsky and Rinard’s speciﬁcation
system is actually composed of four separate languages:
Low-level Structure Deﬁnition: The structure deﬁ-
nition language provides C-like constructs for describing
the layout of objects in memory. Demsky and Rinard
provide a few additions to the normal C language syntax.
First, ﬁelds may be marked “reserved,” indicating that
they exist but are not used. Second, array lengths may be
variable and determined at runtime through expression
evaluation. Third, a form of structure “inheritance” is
provided for notational simplicity whereby structures can
be deﬁned based on other structures and then expanded
with additional ﬁelds. We found no need to change the
structure deﬁnition language syntax developed by Dem-
sky and Rinard. However, it was necessary to adapt the
language’s semantics in two important ways because of
the “external” nature of our monitor.
First, named structure instances, which are also de-
clared in the structure deﬁnition language, cannot be re-
solved because our monitor is not part of the normal
software linking process. Instead, we must use an ex-
ternal source for locating variables. Our current im-
plementation allows the user to provide these locations
manually or to have them extracted automatically from
a Linux System.map symbol table ﬁle. The second
semantic modiﬁcation necessary for the structure deﬁni-
tion language is the handling of pointer values, which
are not “local” to our monitor. Instead, pointers must be
treated as foreign addresses accessed through the moni-
tor’s memory access mechanism.
Figure 3(a) contains our speciﬁcation of the Linux
kernel’s process accounting data structures written in the
structure deﬁnition language. Figure 3(b) contains the
result of a manual translation from this speciﬁcation into
the corresponding C declarations that will become part of
the monitoring code. Note the use of the host addr t
to represent host addresses after byte-order conversion
on the monitor. As described above, the appropriate
value for the LINUX SYMBOL init task constant
(and other required symbols) is automatically extracted
from the Linux System.map symbol table ﬁle by our
conﬁguration tool.
Model Space Deﬁnition: The second language,
shown in Figure 3(c) for our process accounting ex-
ample, deﬁnes a group of sets or relations (there are
no relations in our ﬁrst example) that exist
in the
model [7]. There are two sets in our speciﬁcation: one
corresponding to all processes in the all-tasks list (the
AllTasks set) and one corresponding to all processes
in the run queue (the RunningTasks set). Both are of
type Task in the model. We made no modiﬁcations to
this simple language, as all of our example speciﬁcations
were able to be expressed in the context of sets and
relations. The model space deﬁnition language provided
by Demsky and Rinard also provides support for set
partitions and subsets.
296
Security ’06: 15th USENIX Security Symposium
USENIX Association
Task init_task;
structure Task {
}
reserved byte[32];
ListHead run_list;
reserved byte[52];
ListHead tasks;
reserved byte[52];
int pid;
reserved byte[200];
int uid;
reserved byte[60];
byte comm[16];
structure ListHead {
ListHead *next; 
ListHead *prev;
}
sructure Runqueue {
}
reserved byte[52];
Task *curr;
host_addr_t init_task =
LINUX_SYMBOL_init_task;
struct Task {
};
unsigned char reserved_1[32];
ListHead run_list;
unsigned char reserved_2[52];
ListHead tasks;
unsigned char reserved_3[52];
int pid;
unsigned char reserved_4[200];
int uid;
unsigned char reserved_5[60];
unsigned char comm[16];
set AllTasks(Task);
set RunningTasks(Task);
host_addr_t next; 
host_addr_t prev;
struct ListHead {
};
struct Runqueue {
};
unsigned char reserved_1[52];
host_addr_t curr;
(a) Low−Level Structure Definiton
(b) Translated Structure Definiton
(c) Model Space Definition
[ for_circular_list i as ListHead.next starting init_task.tasks.next ], true => container(i, Task,tasks.next) in AllTasks;
[ ], true => runqueue.curr in RunningTasks;
[ for t in RunningTasks ],  t  in  AllTasks
: notify_admin("Hidden task " + t.comm + " with PID " + t.pid + " detected at kernel virtual address " + t);
(d) Model Building Rules
(e) Constraints
Figure 3: Process accounting subsystem speciﬁcation.
Model Building Rules: Thus far we have discussed
languages for describing the low-level format and orga-
nization of data in kernel memory and for declaring the
types of high-level entities we will use in our model.
The model building rules bridge the gap between these
by identifying which low-level objects should be used
within the abstract model. These rules take the form
[],  ->
;
For each rule, there is a set of quantiﬁers that enumer-
ates the objects to be processed by the rule, a guard that
is evaluated for each object to determine if it should be
subject to the rule, and an inclusion that determines how
that object should be classiﬁed in the abstract model. We
have made the following (syntactic and semantic) mod-
iﬁcations to Demsky and Rinard’s model building lan-
guage:
1. User-deﬁned rule order. In Demsky and Rinard’s
system, the speciﬁcation compiler could identify the
dependencies among rules and execute them in the
most appropriate order. Furthermore, their denota-
tional semantics required execution of the rule func-
tion until a least ﬁxed point was reached. This ap-
proach is not suited for external monitors for two
reasons. First, because memory accesses are of a
much higher performance penalty in our system, the
expert beneﬁts from the ability to describe which
objects should be read in which order to build a
complete model. Second, unlike in Demsky and
Rinard’s environment, the low-level monitor may
be performing its reads asynchronously with the
monitored system’s execution. Model building ac-
cesses that have not been optimized are more likely
to encounter inconsistent data as the system state
changes.
2. Pointer handling. As previously mentioned, pointer
references are not local in our environment and
must go through the low-level monitor’s memory
access system. To detect invalid pointers, Dem-
sky and Rinard developed a runtime system that
instruments the heap allocation and deallocation
(malloc(), free(), etc.)
functions to keep
USENIX Association
Security ’06: 15th USENIX Security Symposium
297
track of valid memory regions. This approach is
clearly not an option for external monitors, which
are not integrated with the system’s runtime envi-
ronment. Currently, invalid pointers are handled by
restarting the model build process. If the same in-
valid pointer is encountered during two consecutive
model build operations, an error is generated.
If
the invalid pointer is not encountered again, it is as-
sumed the ﬁrst error was an inconsistency stemming
from the asynchronous nature of the monitor.
3. The contains() expression. A common pro-
gramming paradigm (especially in the Linux ker-
nel) is to embed generic list pointer structures as
members within another data structure. Our added
expression gives speciﬁcation writers an easy way
to identify the object of which a particular ﬁeld is a
member.
4. The for list quantiﬁcation. Linked lists are a
common programming paradigm. This expression
gives speciﬁcation writers a straightforward way to
indicate they intend to traverse a list up to the pro-
vided stop address (or NULL if not indicated).
5. The for circular list quantiﬁcation. This is
syntactic sugar for the for list construct where
the end address is set equal to the ﬁrst object’s ad-
dress. The Linux kernel makes heavy use of circular
lists.
Figure 3(d) shows the model rules for our process ac-
counting example. The ﬁrst rule indicates that a circular
list starting (and ending) at init task.tasks.next
will be processed. The keyword true in the guard indi-
cates that all members of this list should be subject to the
inclusion. The inclusion itself uses our container()
expression to locate the Task that contains the list
pointer and to include that Task in AllTasks. The
second rule is very simple;
it creates a singleton set
RunningTasks with the current task running on the
run queue.
Constraints: The ﬁnal part of the speciﬁcation de-
ﬁnes the set of constraints under which the model is to
be evaluated. The basic form of a rule in Demsky and
Rinard’s constraint language is as follows [7]:
[  ], ;
In the constraint language, the set of quantiﬁers may in-
clude only sets deﬁned in the model. The predicate is
evaluated on each quantiﬁed member and may include
set operations and evaluations of any relations deﬁned in
the model. If the predicate fails for any quantiﬁed mem-
ber, Demsky and Rinard’s system would seek to repair
the model (and the underlying data structures accord-
ingly).
In our system, however, we have added a “re-
sponse” clause to the end of the constraint rule as fol-
lows:
[  ],  :
;
This critical extension allows the speciﬁcation writer to
dictate how failures are to be handled for a particular
rule. In addition to identifying which action to take, the
response portion allows for an optional “consistency pa-
rameter.” This parameter allows the speciﬁcation writer
to identify a “safe” number of failures before taking ac-
tion and helps prevent false positives that might occur
due to data inconsistencies. If no such parameter is pro-
vided, the default value of two consecutive failures is
used. Of course, a secondary result is that actual rule
violations will be given an opportunity to occur once
without detection. The speciﬁcation writer will need to
balance the advantages and the disadvantages for each
constraint rule and can always disable this feature by set-
ting the value to zero. For the threat considered in our
Linux process accounting example, the default value is
acceptable because of the nature of the targeted threat. A
process that is short-lived has no reason to hide, since an
administrator is unlikely to notice the process. Finally,
the consistency value has no meaning for synchronous
monitors, which do not suffer from the same consistency
problems.
Figure 3(e) shows the single constraint rule for our
hidden process example. The rule states that if any pro-
cess is ever seen running on the processor that is not in
the all-tasks list, we have a security problem and need
to alert the administrator. This example describes a rel-
atively simple method of detecting hidden processes. In
order to detect a hidden process, the monitor must catch
the process while it has the host CPU—a probabilis-