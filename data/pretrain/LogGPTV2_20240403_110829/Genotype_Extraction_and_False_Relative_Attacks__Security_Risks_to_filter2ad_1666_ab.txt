privacy concerns and associated defenses range from privacy
risks with genetic testing services,
to the
computation over genetic data by untrusted parties.
to data storage,
One critical and emerging sub-ﬁeld leverages knowledge at
the intersection of both genetics and computer security, as cap-
tured by Erlich and Narayanan [13] in their survey. Work at this
intersection exploits genetic facts to compromise privacy. As a
simple example, because paternal information passes through
the Y chromosome, the knowledge of a target’s Y chromo-
some can yield paternal information and the target’s possible
surname [21]. Other works, such as [12] and [14], leverage
the underlying biology of familial relationships, as well as
genealogical databases, to de-anonymize DNA samples. This
area of research is growing in breadth and depth, and our
work contributes both conceptual and experimental analyses of
threats that, hitherto, have not been deeply explored. As early
as 2009, Goodrich observed that cryptographic approaches for
computing over genomic data would not prevent information
leakage resulting from those computations [17]. Essentially,
knowing the output of a computation over two DNA sequences
3
(even if computed cryptographically), and knowing one of
those two DNA sequences, can leak information about the
other sequence.
III. GENETIC GENEALOGY ATTACK SURFACES
Open-access genetic genealogy services, like GEDmatch,
are feature rich and have complex APIs. In this section, we
consider the security implications of GEDmatch’s design. The
GEDmatch API lets users interface with the genetic database
to upload data and run over twenty different genetic genealogy
queries. The API is typically accessed via a web interface, but
an open source command line interface is also available [23].
A. Genetic Database
The core function of the service is to mediate access
between users running relative matching queries and the sen-
sitive, raw genetic data that needs to be stored and accessed to
return results. The GDFs uploaded by users — referred to as
kits on GEDmatch — are stored in a database and assigned a
unique kit-identiﬁer that references kits in subsequent queries.
Each GDF is also associated with metadata like name and
email address, so it is tied to an individual’s identity. Since
the genetic database stores large quantities of privacy sensitive
GDFs, it is a high risk target; for example, individual GDFs
contain medically relevant markers. If the entire database was
stolen, an adversary might have signiﬁcant and permanent
identity inference capabilities.
The way the database is structured also has important
security implications. In the case of GEDmatch, the kits appear
to be compressed with a lossy compression scheme, likely
applied when the GDF is uploaded (Section V). Intuitively,
compression might lower the risk of data theft because the
raw genotype data is not stored; however, it actually creates
new security issues because it makes it signiﬁcantly simpler
to extract genetic markers from other users through repeated
querying (Section VI and VII).
B. GDF Uploads
One of the most signiﬁcant API functions is to let users
upload new GDFs to populate the genetic database. GDF
uploads are necessary for a user to ﬁnd new relatives or make
other comparisons. GEDmatch supports GDFs produced by
the largest DTC testing companies, but will accept any ﬁle
as long as it conforms to the GDF format with a sufﬁcient
number of SNPs. This fact is signiﬁcant because there are
no current mechanisms to ensure that the uploaded GDFs
actually originated from a DTC service (see Section IX for a
discussion of possible solutions). Law enforcement has already
leveraged this capability to upload GDFs that came from
DNA processed outside of the DTC ecosystem [15]. However,
the ability to upload unauthenticated GDFs opens services to
additional security issues. For example, an attacker can upload
falsiﬁed GDFs or use pathological GDFs in malicious queries
to extract private genetic markers from other users. The lack of
authentication also means that GDF uploads could be a vector
for malware.
C. Relative Matching
A relative matching query, called a one-to-many compari-
son on GEDmatch, takes a kit identiﬁer as input and returns a
list of potential relative kits, sorted by relatedness. The details
on the relative kits include name, contact information, kit-id,
and properties of the match. This list can be expanded to view
over 2,000 matches with standard accounts and 100,000 with
premium [8]. This lets an attacker scrape large numbers of
kit-ids and user information for use in subsequent attacks.
Attackers can recursively run additional relative matching with
each identiﬁed kit to scrape even more kit-ids. Overall, this
design makes it quite easy for an attacker to identify large
numbers of users if they have uploaded GDFs.
D. Direct Comparisons
The API also lets users make direct GDF-to-GDF com-
parisons, known as one-to-one comparisons on GEDmatch, to
investigate potential relatives in detail; all that is required is
the kit-ids of the two kits being compared. This is important
because it lets an attacker target anyone with a known kit-
id if there are vulnerabilities in direct comparisons. One-
to-one comparisons return visualizations called chromosome
paintings that show differences between the kits on each
chromosome and the genetic coordinates ﬂanking the shared
segments. These results are common in genetic genealogy
because they let users understand precisely how they are ge-
netically related to potential relatives. The segment coordinates
are often maintained by “power users” in large spreadsheets,
which are helpful to understand the inter-relatedness of dif-
ferent matches [10]. In Section VI and VII we show how
both the chromosome paintings and segments coordinates on
GEDmatch leak too much information about the underlying
SNPs being compared. Using adversarially crafted kits, we
were able to extract the majority of SNPs from a targeted kit.
E. Additional Utilities
GEDmatch offers 18 additional tools to upload additional
data or query the genetic database. Each of these is a possible
attack vector that could have security implications. However,
in this work, we limited our focus to the most common genetic
genealogy features.
IV. ETHICS AND RESPONSIBLE DISCLOSURE
In the subsequent sections we describe a number of ex-
periments we did to understand the feasibility of different
attacks on GEDmatch service. We took great care to perform
these experiments ethically and legally and to disclose any
vulnerabilities we uncovered responsibly. We elaborate on the
speciﬁc precautions we took below.
Since GEDmatch is a live service, we had to ensure that all
our experiments were not only legal, but that they respected
the privacy of GEDmatch users and had minimal impact to the
GEDmatch service. The GEDmatch Terms-of-Service allows
raw data uploads from artiﬁcial DNA kits as long as they are:
(1) intended for research, and (2) not used to identify anyone
in the GEDmatch database. We ensured that we complied with
both terms.
Further,
the privacy of any individual (both
GEDmatch users and non-users), we derived all DTC proﬁles
to protect
used in this study from publicly available, anonymous genetic
datasets — datasets explicitly designated for research use (the
1000 Genomes Project and OpenSNP). Further, to protect the
privacy of real individuals, and to ensure that our proﬁles
were “artiﬁcial” (as stipulated in the GEDmatch terms of
service), each kit that we uploaded used data composed from
two separate individuals (i.e., did not correspond to any real
human). The privacy setting for each kit we uploaded was set
to “Research” instead of the default “Public” (two settings
offered by GEDmatch). The “Research” designation meant
that our kits would not appear in the matching results of
other users. Furthermore, to avoid any risk of de-anonymizing
the anonymous donors in the 1000 Genomes Project and
OpenSNP datasets, we analyzed only DNA matches between
the experimental kits we uploaded and did not view any
matching results containing real GEDmatch users.
Our University IRB determined, through written review,
that our research did not require IRB oversight because all
data used in our experiments was derived from public data and
had no identiﬁers. Nevertheless, we exercised extreme caution
with all our experiments, as discussed above.
Vulnerabilities we uncovered have been disclosed to GED-
match who is actively developing mitigations to these prob-
lems. We also reached to US government stakeholders before
the paper’s release.
V. REVERSE ENGINEERING ONE-TO-ONE COMPARISONS
ON GEDMATCH
In subsequent sections, we show how the results from
matching queries can be used to steal data or poison the ge-
netic database. Experimenting with these attacks ﬁrst required
signiﬁcant reverse engineering of one-to-one comparisons on
GEDmatch. Here, we describe our experimental setup and an
overview of reverse engineering results. We leave a detailed de-
scription of our reverse engineering procedure to Appendix A.
We created a free GEDmatch user account that was used
for all experimentation in the following sections. All analysis
was done with custom Python scripts and standard libraries.
We used the Python Imaging Library (PIL) to process visual-
ization images. All experiments on GEDmatch were conducted
between 01/16/19 and 06/14/19.
A. Artiﬁcial Kit Design
To generate kits for experimentation, we combined genetic
data from the 1000 Genomes project and DTC data ﬁles
from OpenSNP [1], [18] using a modiﬁed methodology that
Erlich et al. [14] used in their study of identity inference
attacks on GEDmatch. To generate each target DTC ﬁle, we
used data from two 1000 Genomes individuals in the CEU
population and one OpenSNP DTC ﬁle generated by 23andMe
with the v5 chip. The 1000 Genomes individuals were used
for the autosomal genotype data; we alternated chromosome
data from the two individuals (chromosome 1 came from the
ﬁrst individual, chromosome 2 from the second, chromosome
3 from the ﬁrst, etc.). Note that GEDmatch primarily does
matching using autosomal data (chromosomes 1-22). The non-
autosomal genotype, SNP IDs, and positions came from the
OpenSNP DTC genetic ﬁle. We used two 1000 genomes
individuals for the genotype data to ensure that the kit did
4
Fig. 2. One-to-one autosomal comparison results (default parameters) shown for chromosome 3. There is one matching segment between 2,233,338 - 41,017,070
(build hg37) with genetic distance 59.2 cM that includes 8212 SNPs. The image bars are compressed with at 1:35 ratio. On the marker indication bar (top bar):
green represents base pairs with a full match, yellow with a half match, and red with no match. On the matching segments bar (bottom bar): blue represents the
matching segment, black no match, and tan a large gap between adjacent SNPs.
not correspond to any real individual and to conform to the
GEDmatch ToS.
We were primarily interested in understanding privacy
risks to users that had their kits set to the default “Public”
privacy setting on GEDmatch. This setting provides the most
functionality and allows kits to appear in the results of relative
matching queries from other users (but is not supposed to
reveal any raw genetic information)2. However, for our ex-
perimental purposes, to prevent the target kits from interfering
with real user matches, we set the kits to the more restrictive
“Research” privacy setting. This setting prevents kits from
appearing in database-wide one-to-many queries but still lets
the user run one-to-one comparisons if kit-ids are known.
B. Query Requirements
The precise SNPs in a GDF vary by the DTC company and
chip version used to genotype the DNA sample. It is important
that the adversary use kits that match the same DTC company
and chip as the kit corresponding to the target individual so
that as many SNPs as possible overlap between them. The
adversary can ﬁnd these details for a particular target using the
one-to-many matching results, which reveals the DTC testing
company and chip version of all matching kits.
When comparing two kits in a one-to-one comparison, both
kit-ids are needed. Therefore, an adversary attempting to attack
a speciﬁc target needs to know that target’s kit-id. The kit-id
of a speciﬁc individual can be found using a few methods:
•
•
•
Email via User Lookup Tools: GEDmatch provides a
“User Lookup” tool that can ﬁnd a user’s kit-ids via
email address or genealogy ID (GEDCOM ID).
Relative Matching Queries: As described in Sec-
tion III-C, the results from relative matching queries
can be used to scrape thousands of kit-ids.
Publicly Available Information: A user may reveal
a kit-id publicly, something we have seen numerous
times on blog posts, Internet forums, and videos.
C. One-to-One Comparison Details
One-to-one comparisons are highly conﬁgurable: the user
can adjust the minimum matching size, windowing thresholds,
genome build version, and resolution of the chromosome
visualizations; see Appendix B for possible conﬁgurations.
2In mid-May 2019, GEDmatch split the public setting into a public opt-in
and public opt-out for kits related to law enforcement searches. This change
does not impact our analysis.
Each query returns a set of 22 matching results and comparison
images, one for each of the autosomal chromosomes (see
Figure 2 for chromosome 3 results). At each chromosome, the
user is shown a table with the precise genetic coordinates of
matching segments and two colored bars encoding information
about the comparison at different positions along the chromo-
some. One color bar represents how markers compare (i.e.,
how SNPs compare), and the other represents large matching
DNA segments. We refer to these two colored bars as the
marker indication bar and matching segment bar, respectively.
We paid particular attention to the marker indication bar
because it seemed to encode the most information about the
underlying SNPs. Each bar is a 1-dimensional pixel vector
encoded in the GIF image ﬁle format. We were able to collect
these 22 GIF images by downloading the web ﬁles containing
the visualizations in the Chrome web browser. Four colors
appeared in the 22 marker indication bars: green, yellow, red,
and purple. According to a color key, green represents base
pairs with a full match, yellow base pairs with a half match, red
base pairs with no match. Occasionally, the ﬁnal pixel would
be purple, which according to the key, represents a match with
phased data. (When this was the case, we ignored that pixel
in subsequent analysis.)
At full resolution, each pixel in the marker indication bar
corresponds to a single SNP. This bases of a SNP in the ﬁrst
kit are compared to the bases of the same SNP in the second
kit. If the genotype is the same in both kits at that SNP, then
it generates a green pixel (full-match) in the marker indication
bar; one base off and it produces a yellow pixel (half-match);
and if both bases are different than it produces a red pixel (no-
match). Moreover, the bases at each SNP are not compared in
any order, since the genotyping process produces unordered
data. However, this is further complicated by the fact that
the genotype of each SNP appears to be compressed from
2-bit (i.e., {A,C,G,T}) to 1-bit (i.e., {0,1}) when making a
comparison. Speciﬁcally, A/T are interpreted as one-bit (which
we denote 0) and C/G as the other bit (which we denote 1).
This means that A’s are treated identically to T’s and C’s
identically to G’s when making a comparison, and so it is
the ‘one-bit’ bases of the two kits that are being compared.
To make this concrete, consider an arbitrary SNP where
the genotype of the ﬁrst kit is AT and the second kit is CA.
First, the two genotypes are compressed to 1-bit (00 vs 10),