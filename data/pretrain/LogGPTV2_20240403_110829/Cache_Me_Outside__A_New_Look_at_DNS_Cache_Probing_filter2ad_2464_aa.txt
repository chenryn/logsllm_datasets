title:Cache Me Outside: A New Look at DNS Cache Probing
author:Arian Akhavan Niaki and
William R. Marczak and
Sahand Farhoodi and
Andrew McGregor and
Phillipa Gill and
Nicholas Weaver
Cache Me Outside: A New Look at DNS
Cache Probing
Arian Akhavan Niaki1(B), William Marczak2,3, Sahand Farhoodi4,
Andrew McGregor1, Phillipa Gill1, and Nicholas Weaver3,5
1 University of Massachusetts Amherst, Amherst, MA, USA
{arian,mcgregor,phillipa}@cs.umass.edu
2 Citizen Lab, Toronto, Ontario, Canada
3 University of California Berkeley, Berkeley, CA, USA
PI:EMAIL
4 Boston University, Boston, MA, USA
5 International Computer Science Institute, Berkeley, CA, USA
PI:EMAIL
PI:EMAIL
Abstract. DNS cache probing infers whether users of a DNS resolver
have recently issued a query for a domain name, by determining whether
the corresponding resource record (RR) is present in the resolver’s cache.
The most common method involves performing DNS queries with the
“recursion desired” (RD) ﬂag set to zero, which resolvers typically answer
from their caches alone. The answer’s TTL value is then used to infer
when the resolver cached the RR, and thus when the domain was last
queried. Previous work in this space assumes that DNS resolvers will
respond to researchers’ queries. However, an increasingly common pol-
icy for resolvers is to ignore queries from outside their networks. In
this paper, we demonstrate that many of these DNS resolvers can still
be queried indirectly through open DNS forwarders in their network.
We apply our technique to localize website ﬁltering appliances sold by
Netsweeper, Inc and, tracking the global proliferation of stalkerware. We
are able to discover Netsweeper devices in ASNs where OONI and Cen-
sys fail to detect them and we observe a regionality eﬀect in the usage
of stalkerware apps across the world.
Keywords: DNS · Internet measurement · Censorship.
1 Introduction
Many connections on the Internet rely on the DNS protocol to resolve a domain
name into a set of IP addresses. For performance reasons, DNS resolvers typi-
cally have a cache of recently resolved domain names that is shared amongst all
of the resolver’s users [21,22]. Unsurprisingly, this shared state exposes a side-
channel by which a user of a resolver can ﬁgure out if some other user has issued
a query for a speciﬁc domain name. This process is called DNS cache snooping
c(cid:2) Springer Nature Switzerland AG 2021
O. Hohlfeld et al. (Eds.): PAM 2021, LNCS 12671, pp. 427–443, 2021.
https://doi.org/10.1007/978-3-030-72582-2_25
428
A. Akhavan Niaki et al.
(or probing) [18]. Prior work has presented various applications of this tech-
nique, including measuring the size of botnets and proliferation of malware [29],
inferring web usage patterns [37] and providing a lower-bound estimate of the
popularity of rare applications [30]. These prior studies assume that researchers
can elicit answers by directly issuing queries to resolvers. However, most DNS
resolvers nowadays do not respond to queries from outside their network. This is
partly as a countermeasure to DNS ampliﬁcation attacks [28], where an attacker
can trick a resolver into sending a large response to a target of the attacker’s
choosing by spooﬁng the query source address.
In this paper, we instead probe the caches of ISP DNS resolvers through
DNS forwarders on ISP networks, devices that may be misconﬁgured customer-
premises equipment. Prior to our work, accessing these ISP DNS resolvers has
been a challenge for Internet measurement researchers. We develop and validate a
tool, dmap, that can probe resolvers through these forwarders. We demonstrate
the applicability of our technique via two case studies, (1) Netsweeper device
localization, and (2) tracking the global proliferation of stalkerware.
Case Study: Netsweeper Appliance Localization. Netsweeper, Inc., is a
company that provides Internet ﬁltering devices that has received considerable
recent attention, because their appliances appear to be used for Internet censor-
ship of political and LGBTQ content in a number of repressive countries [12,13].
Measuring the proliferation and use of these tools can help hold companies to
account for uses of their technology that may violate the right to free expression,
and can sometimes expose cases where technology is resold or transferred to third
parties [20]. Previous work on localizing Netsweeper devices [12] typically focuses
on ﬁngerprinting block pages that the appliances inject, and globally accessible
admin pages used to conﬁgure the system. We show that DNS cache probing
can be a complementary measurement strategy, because it indicates Netsweeper
activity that these other techniques miss.
Case Study: Tracking the Global Proliferation of Stalkerware. Stalk-
erware are a type of spyware that have powerful surveillance capabilities and
are marketed as monitoring software used for stalking [27]. Previous work has
investigated the technical aspects of stalkerware and the protections that anti-
virus and app stores can oﬀer [27]. However, there has been little quantiﬁcation
of their prevalence across the world. Only a recent work has studied the pop-
ularity of stalkerware apps in the United States by cache probing public DNS
services [30]. Since these spyware can be ﬁngerprinted by the unique domain
names they resolve [34], we measure the global proliferation of stalkerware by
leveraging DNS cache probing.
Through our case studies, we make the following key observations:
1. Expanding our view of Netsweepr globally. We identify Netsweeper
devices in 18 ASNs which were not identiﬁed by related eﬀorts [1,14]. We are
also able to conﬁrm Netsweeper activity in 42% of the ASNs identiﬁed by related
eﬀorts [1,14].
Cache Me Outside: A New Look at DNS Cache Probing
429
2. Shedding light on stalkerware. We perform one of the ﬁrst global char-
acterizations of stalkerware using DNS cache probing. Through this analysis, we
ﬁnd 22 stalkerware apps active in 79 countries. The top countries are the United
States, Brazil, and Germany. We observe a regionality eﬀect in the prevalence
of stalkerware apps, where apps in the Russian language are more prevalent in
Russia and Ukraine.
In ongoing work, we are examining how our method can be applied to other
devices and applications that perform DNS queries.
2 Background
In this section, we provide background on the operation of DNS caches, as well
as prior investigation of DNS cache probing.
2.1 DNS Caching and Recursion
The mapping between a domain name and some other information (such as an
IP address) is called a Resource Record (RR). The TTL ﬁeld of a DNS RR is set
by its authoritative nameserver and indicates how long resolvers should cache
the RR [22]. If an RR for a DNS query is not cached, the resolver will try to
“recursively” resolve the domain name. Once the resolver obtains the RR(s), it
will send the answer to the user, and add the RR(s) to its cache for the number
of seconds speciﬁed by the TTL.
A DNS query may set the Recursion Desired (RD) bit to indicate that the
DNS server should attempt recursive resolution [21]. If the bit is unset (RD =
0), the DNS server answers the query using local information alone. In practice,
some resolvers ignore this ﬂag and always perform recursive resolution on every
query. We discuss these “ill-behaved” resolvers in Sect. 3.1. If the resolver answers
an RD=0 query from its cache, we can use the TTL value it returns to infer the
arrival time of the query that caused the answer to be cached. This process is
known as DNS cache probing (or snooping) [18].
2.2 DNS Cache Probing
The original treatment of DNS cache probing [18] discusses various alternate
ways to infer DNS caching beyond the RD = 0 technique, including measuring
the DNS resolver’s response time. Further, they propose a set of recommenda-
tions to mitigate DNS cache snooping, such as restricting cache access to local
users, an approach that is popular today.
A popular application of DNS cache probing has been understanding the
usage and popularity of networked services. Rajab et al. [29] apply DNS cache
probing to estimate the density of clients accessing a network service. They mea-
sure the relative popularity of websites using this approach, but do not math-
ematically validate their approach. Similarly, Wills et al. [37] characterize the
relative popularity of Internet applications using cache probing of 20 Local DNS
430
A. Akhavan Niaki et al.
servers. Akcan et al. [4] takes a similar approach, but leverages geographically
distributed open DNS resolvers to extract web usage patterns.
A second popular application of DNS cache probing has been to understand
the prevalence of bots and malware that often query distinct domains via DNS.
Rajab et al. [3] perform DNS cache probing on 800K DNS resolvers to infer
the footprint of a botnet. Their study is based on the fact that the botnet in
question issued DNS queries to resolve the Internet Relay Chat (IRC) servers
used for command-and-control. They considered their result to be a lower bound
on the botnet population. Randall et al. [30] perform DNS cache probing on four
large public DNS resolvers (Google, Cloudﬂare Quad1, OpenDNS, and Quad9)
and infer their caching architecture. Finally, they use their tool to estimate the
number of ﬁlled caches for each resolver with a relative error of 10%–50% and
present a lower-bound estimate of 22 stalkerware apps in the U.S.
These prior approaches assume direct access to the DNS server or use open
DNS resolvers. Nowadays, these resolvers appear to be overwhelmingly conﬁg-
ured to respond to queries from only clients on their network (Sect. 3.1). Thus,
the techniques from these prior approaches are becoming increasingly less appli-
cable to today’s Internet. Our leveraging of DNS forwarders for probing resolver
(DNS backend) caches unlocks a vast trove of data missed by directly probing
resolvers alone.
Furthermore, to the extent that previous work have performed DNS cache
probing, there is no indication that they have distinguished between DNS
forwarders and DNS backends. DNS forwarders are included in consumer
NAT/gateway devices in order to respond to DNS queries within the LAN,
while DNS backends are recursive DNS resolvers. This distinction is necessary
for having a reliable measurement and preventing double counting.
3 Revisiting DNS Cache Probing
In this section, we describe how we leverage DNS forwarders to enable DNS
cache probing. DNS forwarders are necessary to probe DNS resolvers that only
respond to local clients. We ﬁrst quantify the prevalence of resolvers that only
respond to local clients where we ﬁnd that 75% of resolvers likely respond to
only their local clients (Sect. 3.1). Using DNS forwarders, local to the resolver of
interest, we are able to get around this limitation. DNS forwarders are hosts that
forward a DNS query to their ISP’s recursive DNS resolver [31]. This is usually
the consequence of poorly engineered or misconﬁgured consumer NAT/gateway
devices. We describe how we identify these DNS forwarders (Sect. 3.1) and how
we use them to perform measurements (Sect. 3.2). We validate the set of for-
warders in Sect. 3.3 and discuss the potential ethical implications of our method
in Sect. 3.4.
3.1 Locating DNS Forwarders
Consumer NAT/gateway devices include a DNS forwarder so they can provide
a DHCP lease (which requires specifying the DNS resolver’s IP address) to
Cache Me Outside: A New Look at DNS Cache Probing
431
clients before the gateway itself obtains a DHCP lease. These DNS forwarders
are intended to only respond to DNS queries from within the LAN but many are
improperly ﬁrewalled, and will also forward external DNS requests to the ISP’s
recursive resolver.
The steps we take to identify DNS forwarders are as follows:
Step 1: Scanning the Internet’s IPv4 Space for DNS Resolvers. We
begin by extracting the results of the October 5 to 11, 2020 Censys [14] DNS
scans from the Censys dataset on Google’s BigQuery platform. Censys’ DNS
scans send an RD=1 DNS query to the entire IPv4 address space. The name-
server of the scan domain name included in the Censys scan’s DNS question will
always return two answers: a ﬁxed IP address (the control answer) used to estab-
lish that the host correctly resolves DNS queries, and the source IP address from
which the nameserver received the DNS query packet (we call this the resolver
address or the backend address).
We process the Censys results as follows. First, we ﬁlter out any IPs from
the Censys results that did not respond correctly. An IP responded correctly if
it answered Censys’ DNS question with exactly two answers, where one answer
is the control answer. Second, we attempt to exclude shared DNS services, such
as Google’s 8.8.8.8 or OpenDNS, by including only those IPs that are in an AS
categorized as “Access/Transit” by CAIDA’s AS Classiﬁcation dataset [6], and
who responded with a resolver address that is also in an “Access/Transit” AS.
We exclude shared DNS services because their users may be globally distributed,
making location inference challenging. In other words, since users from diﬀerent
geographical locations can send queries to shared DNS services, the ﬁdelity of the
information we get from shared DNS services will not indicate speciﬁc countries
or ISPs. Furthermore, previous work have shown that the majority of end-user
ISPs continue to operate their own LDNS services [7].
Step 2: Determining which Resolvers are Suited to Cache Probing.
We are only interested in DNS forwarders that forward to DNS resolvers that
respect the RD=0 ﬂag, i.e., they will not perform resolution on a DNS query
containing an RD=0 ﬂag. We are also only interested in caching DNS resolvers
that are likely to have interesting things in their caches. To ﬁnd the set of DNS
forwarders that exclusively forward to caching well-behaved DNS resolvers, we
perform our own scanning to ﬁlter the list of IPs from Step 1. We run some
experiments from a single vantage point in the United States using our own scan
domain, whose nameserver is conﬁgured identically to the Censys scan domain
and is hosted from the West Coast of the United States. We use a timeout of
20 s throughout the process of our measurement. In particular, our nameserver
will return exactly two answers: a control answer, and the resolver address. We
ﬁlter the list of IPs from Step 1 to include only those IPs that:
– Respond four times to RD = 0 requests to unique subdomains of our scan
domain with zero answers.
– Respond four times to RD = 1 requests to unique subdomains of our scan
domain with a resolver address in a single “Access/transit” AS, and the
resolver address returned with approximately full TTL.
432
A. Akhavan Niaki et al.
– Respond to at least one of ten RD = 0 requests for google.com with an IP in
Google’s AS (AS15169)1.
We consider DNS forwarders that meet the criteria set out in Step 1 and Step
2 to be “well-behaved”. Table 1 shows how many forwarders passed each phase
of our ﬁltering process on seven consecutive days in October 2020.
Table 1. Number of DNS forwarders passing each stage of our ﬁltering process during
the week of October 5–11, 2020.
Forwarders ﬁltered
10/5
10/6
10/7
10/8
10/9
10/10
10/11
Filtered Censys Scan 811,914 814,863 817,935 823,345 790,313 793,807 811,783
RD = 0 check
468,882 450,421 434,773 426,936 461,981 444,785 426,350
Forward check
311,140 295,560 282,458 277,183 307,889 293,075 276,150
Google check
246,710 233,441 223,014 218,417 244,032 230,042 216,049
Since google.com is regularly the number one domain name on the Alexa Top
Sites list [5], and the Cisco Umbrella 1 Million list [11], we would expect a correct
answer for this domain to typically be present in most caching DNS servers with
a signiﬁcant number of users (with the notable exception of countries that inject
fake answers for google.com, such as Iran and China [24,36]). We also would
not expect our scan subdomains to be present in any caches, since we freshly
generate a unique subdomain for each measurement, thus we expect them to be
returned with approximately full TTL when queried with RD = 1. As we have
conﬁgured our scan domain’s DNS server to return answers with TTL=60, we
deﬁne approximately full TTL as either TTL=59 or TTL=60. We believe our
results are not impacted by EDNS client subnet preﬁx per-preﬁx caching, since
previous work have shown [7] that there is little adoption outside of Google’s
Public DNS and OpenDNS, which we have excluded.
We repeat the measurements to get a sense of the behavior of the universe of
resolvers that a forwarder may use for DNS resolution. During our DNS cache
probing, we continually validate the behaviors of respecting the RD=0 ﬂag,
and forwarding to only a single “Access/transit” AS, as forwarder behavior may
change over time. We also take privacy precautions about these DNS forwarders,
as some of them might be pointing to caches of home routers. In this case, when
querying our scan domain from the DNS forwarders, the answer returned by
our nameserver will include the control answer and the DNS forwarder’s address
instead of the resolver’s address. This indicates that the request is not being
forwarded. Thus, we remove these DNS forwarders from the set of “well-behaved”
forwarders. The output of our process is a set of (forwarder, resolver) pairs.
Population of Forwarders/Resolvers. Table 2 presents the breakdown of
DNS forwarders that responded correctly to a query for our control domain and
1 We analyze Farsight Security’s Passive DNS Project data [2], and the responses they
observed for google.com since March 2, 2018, all belong to AS15169.
Cache Me Outside: A New Look at DNS Cache Probing
433
Table 2. Number of DNS forwarders and the number of countries and ASes on each
continent where we have access to DNS resolvers (aggregated over a week). AF =
Africa, AS = Asia, EU = Europe, NA = North America, OC = Oceania/Australia,
SA = South America.
AF
AS
EU
NA
SA
OC
All Forwarders
After ﬁltering
66,626 531,867 392,148 263,730 120,505 14,988
7,890
137,341 17,337
63,411
87,826
4,883
419
Resolvers
Resolver countries 42
Resolver ASes
152
2,609
40
550
7,545
48
2,347
5,671
32
1,095
2,238
12
624
475
14
137
the set of DNS forwarders after our ﬁltering process, across continents. After
obtaining the set of resolvers each forwarder talks to, we present the population