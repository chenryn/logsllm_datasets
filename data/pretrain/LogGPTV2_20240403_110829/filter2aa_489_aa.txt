Next Generation Process 
Emulation with Binee
Kyle Gwinnup @switchp0rt
John Holowczak @skipwich
Carbon Black TAU
The Problem: getting information from binaries
Each sample contains some total set of information. Our goal is to extract as 
much of it as possible
Time/Cost to analyze
Sample coverage
Static
Dynamic
High coverage
Immediate discovery
Few features
Low coverage
Long discovery
Many features
Core Problems
1.
Obfuscation hides much of the info
2.
Anti-analysis is diﬃcult to keep up with
3.
Not all Malware is equal opportunity
Our Goal: Reduce cost of information extraction
1.
Reduce the cost of features 
extracted via dynamic analysis
2.
Increase total number of features 
extracted via static analysis
3.
Ideally, do both of these at scale
Time/Cost to analyze
Sample Coverage
Dynamic
Static + 
Emulation
High coverage
Immediate discovery
Many features
Low coverage
Long discovery
Many features
The How: Emulation
Extend current emulators by mocking functions, system calls and OS subsystems
Existing PE Emulators
●
PyAna 
https://github.com/PyAna/PyAna
●
Dutas 
https://github.com/dungtv543/Dutas
●
Unicorn_pe https://github.com/hzqst/unicorn_pe
●
Long list of other types of emulators 
https://www.unicorn-engine.org/showcase/ 
Requirements: What are we adding/extending from 
current work?
1.
Mechanism for loading up a PE ﬁle with its dependencies
2.
Framework for deﬁning function and API hooks
3.
Mock OS subsystems such as 
a.
Memory management 
b.
Registry 
c.
File system
d.
Userland process structures
4.
Mock OS environment conﬁguration ﬁle
a.
Conﬁg ﬁle speciﬁes language, keyboard, registry keys, etc…
b.
Rapid transition from one Mock OS conﬁguration to another
Binee
Where to start? Parse the PE and DLLs, then map 
them into emulation memory...
Build hook table by linking DLLs outside emulator
Target PE
DLL1
DLL2
DLL3
Emulated 
Process Memory
Binee Address to 
Hook table
1.
Open PE and all dependencies 
2.
Update DLL base addresses
3.
Update relocations
4.
Build Binee exports lookup table
5.
Resolve Import Address Tables 
for each
6.
Map PE and DLLs into memory
Overcoming Microsoft’s ApiSet abstraction layer
Parse ApiSetSchema.dll (multiple versions) and load proper real dll.
Geoﬀ Chappell https://www.geoﬀchappell.com/studies/windows/win32/apisetschema/index.htm
api-ms-.dll
ApiSet Schema 
Table
kernelbase.dll
kernel32:CreateFileA
What is the minimum that the malware 
needs in order to continue proper execution? 
Requirements for hooking
1.
A mapping of real address to Binee’s Hook for that speciﬁc function?
2.
The calling convention used?
3.
How many parameters are passed to the function?
4.
Need to determine the return value if any?
type Hook struct {
Name        string
Parameters  []string
Fn          func(*WinEmulator, *Instruction) bool
Return      uint64
    ...
}
emu.AddHook("", "Sleep", &Hook{
    Parameters: []string{"dwMilliseconds"},
    Fn: func(emu *WinEmulator, in *Instruction) bool {
        emu.Ticks += in.Args[0]
        return SkipFunctionStdCall(false, 0x0)(emu, in)
    },
})
Partial Hook, where the function itself is emulated within the DLL
emu.AddHook("", "GetCurrentThreadId", &Hook{Parameters: []string{}})
emu.AddHook("", "GetCurrentProcess", &Hook{Parameters: []string{}})
emu.AddHook("", "GetCurrentProcessId", &Hook{Parameters: []string{}})
Two types of hooks in Binee
Full Hook, where we deﬁne the implementation
Hook Parameters ﬁeld deﬁnes how many 
parameters will be retrieved from emulator and The 
name/value pair in output
[1] 0x21bc0780: P memset(dest = 0xb7feff1c, char = 0x0, count = 0x58)
emu.AddHook("", "memset", &Hook{Parameters: []string{"dest", "char", "count"}})
Output is the following
Example: Entry point execution
./binee -v tests/ConsoleApplication1_x86.exe
[1] 0x0040142d: call 0x3f4
[1] 0x00401821: mov ecx, dword ptr [0x403000]
[1] 0x0040183b: call 0xffffff97
[1] 0x004017d2: push ebp
[1] 0x004017d3: mov ebp, esp
[1] 0x004017d5: sub esp, 0x14
[1] 0x004017d8: and dword ptr [ebp - 0xc], 0
[1] 0x004017dc: lea eax, [ebp - 0xc]
[1] 0x004017df: and dword ptr [ebp - 8], 0
[1] 0x004017e3: push eax
[1] 0x004017e4: call dword ptr [0x402014]
[1] 0x219690b0: F GetSystemTimeAsFileTime(lpSystemTimeAsFileTime = 0xb7feffe0) = 0xb7feffe0
[1] 0x004017ea: mov eax, dword ptr [ebp - 8]
[1] 0x004017ed: xor eax, dword ptr [ebp - 0xc]
[1] 0x004017f0: mov dword ptr [ebp - 4], eax
[1] 0x004017f3: call dword ptr [0x402018]
At this point, we have a simple loader that will 
handle all mappings of imports to their proper DLL. 
We’re basically done, right?
Still have some functions that require user land memory objects that do not 
transition to kernel via system calls
We need segment registers to point to the correct memory locations (thanks 
@ceagle)
Not inside of main yet…
Userland structures, TIB/PEB/kshareduser
We need a TIB and PEB with some reasonable values
Generally, these are conﬁgurable. 
Many just need some NOP like value, e.g. NOP function pointer for approximate 
malware emulation. 
All address resolution and mappings are built 
outside of the emulator
type ThreadInformationBlock32 struct {
CurentSEH                   uint32    //0x00
StackBaseHigh               uint32    //0x04
StackLimit                  uint32    //0x08
SubSystemTib                uint32    //0x0c
FiberData                   uint32    //0x10
ArbitraryDataSlock          uint32    //0x14
LinearAddressOfTEB          uint32    //0x18
EnvPtr                      uint32    //0x1c
ProcessId                   uint32    //0x20
CurrentThreadId             uint32    //0x24
…
}
PEs are parsed and loaded. Basic structures like the 
segment registers and TIB/PEB are mapped with 
minimum functionality.
We’re deﬁning the entire environment outside of 
the emulator...
Almost Everything in Windows needs HANDLEs
type Handle struct {
Path   string
Access int32
File   *os.File
Info   os.FileInfo
RegKey *RegKey
Thread *Thread
}
type WinEmulator struct {
    ...
    Handles       map[uint64]*Handle
    ...
}
What is the minimum we need for a HANDLE 
in Binee?
1.
An abstraction over subsystem data types
2.
Helper methods for reading/writing/etc... 
to and from subsystems.