script.on('message', on_message)
script.load()
sys.stdin.read()
Anti-Debugging Checks (MSTG-RESILIENCE-2)
Overview
Debugging and exploring applications are helpful during reversing. Using a debugger, a reverse engineer can not only
track critical variables but also read and modify memory.
Given the damage debugging can be used for, application developers use many techniques to prevent it. These are
called anti-debugging techniques. As discussed in the "Testing Resiliency Against Reverse Engineering" chapter for
Android, anti-debugging techniques can be preventive or reactive.
Preventive techniques prevent the debugger from attaching to the application at all, and reactive techniques allow the
presence of a debugger to be verified and allow the application to diverge from expected behavior.
There are several anti-debugging techniques; a few of them are discussed below.
Using ptrace
520
iOS Anti-Reversing Defenses
iOS runs on an XNU kernel. The XNU kernel implements a ptrace system call that's not as powerful as the Unix and
Linux implementations. The XNU kernel exposes another interface via Mach IPC to enable debugging. The iOS
implementation of ptrace serves an important function: preventing the debugging of processes. This feature is
implemented as the PT_DENY_ATTACH option of the ptrace syscall. Using PT_DENY_ATTACH is a fairly well-
known anti-debugging technique, so you may encounter it often during iOS pentests.
The Mac Hacker's Handbook description of PT_DENY_ATTACH:
This request is the other operation used by the traced process; it allows a process that's not currently being
traced to deny future traces by its parent. All other arguments are ignored. If the process is currently being
traced, it will exit with the exit status of ENOTSUP; otherwise, it sets a flag that denies future traces. An attempt
by the parent to trace a process which has set this flag will result in the segmentation violation in the parent.
In other words, using ptrace with PT_DENY_ATTACH ensures that no other debugger can attach to the calling
process; if a debugger attempts to attach, the process will terminate.
Before diving into the details, it is important to know that ptrace is not part of the public iOS API. Non-public APIs are
prohibited, and the App Store may reject apps that include them. Because of this, ptrace is not directly called in the
code; it's called when a ptrace function pointer is obtained via dlsym .
The following is an example implementation of the above logic:
#import 
#import 
#import 
typedef int (*ptrace_ptr_t)(int _request, pid_t _pid, caddr_t _addr, int _data);
void anti_debug() {
ptrace_ptr_t ptrace_ptr = (ptrace_ptr_t)dlsym(RTLD_SELF, "ptrace");
ptrace_ptr(31, 0, 0, 0); // PTRACE_DENY_ATTACH = 31
}
The following is an example of a disassembled binary that implements this approach:
Let's break down what's happening in the binary. dlsym is called with ptrace as the second argument (register R1).
The return value in register R0 is moved to register R6 at offset 0x1908A. At offset 0x19098, the pointer value in
register R6 is called using the BLX R6 instruction. To disable the ptrace call, we need to replace the instruction BLX
R6 (0xB0 0x47 in Little Endian) with the NOP (0x00 0xBF in Little Endian) instruction. After patching, the code will be
similar to the following:
521
iOS Anti-Reversing Defenses
Armconverter.com is a handy tool for conversion between byte-code and instruction mnemonics.
Using sysctl
Another approach to detecting a debugger that's attached to the calling process involves sysctl . According to the
Apple documentation:
The sysctl function retrieves system information and allows processes with appropriate privileges to set
system information.
sysctl can also be used to retrieve information about the current process (such as whether the process is being
debugged). The following example implementation is discussed in "How do I determine if I'm being run under the
debugger?":
#include 
#include 
#include 
#include 
#include 
static bool AmIBeingDebugged(void)
// Returns true if the current process is being debugged (either
// running under the debugger or has a debugger attached post facto).
{
int junk;
int mib[4];
struct kinfo_proc info;
size_t size;
// Initialize the flags so that, if sysctl fails for some bizarre
// reason, we get a predictable result.
info.kp_proc.p_flag = 0;
// Initialize mib, which tells sysctl the info we want, in this case
// we're looking for information about a specific process ID.
mib[0] = CTL_KERN;
mib[1] = KERN_PROC;
mib[2] = KERN_PROC_PID;
mib[3] = getpid();
// Call sysctl.
size = sizeof(info);
junk = sysctl(mib, sizeof(mib) / sizeof(*mib), &info, &size, NULL, 0);
assert(junk == 0);
// We're being debugged if the P_TRACED flag is set.
return ( (info.kp_proc.p_flag & P_TRACED) != 0 );
}
When the code above is compiled, the disassembled version of the second half of the code is similar to the following:
522
iOS Anti-Reversing Defenses
After the instruction at offset 0xC13C, MOVNE R0, #1 is patched and changed to MOVNE R0, #0 (0x00 0x20 in in
byte-code), the patched code is similar to the following:
You can bypass a sysctl check by using the debugger itself and setting a breakpoint at the call to sysctl . This
approach is demonstrated in iOS Anti-Debugging Protections #2.
Needle contains a module aimed to bypass non-specific jailbreak detection implementations. Needle uses Frida to
hook native methods that may be used to determine whether the device is jailbroken. It also searches for function
names that may be used in the jailbreak detection process and returns "false" when the device is jailbroken. Use the
following command to execute this module:
[needle] > use dynamic/detection/script_jailbreak-detection-bypass
[needle][script_jailbreak-detection-bypass] > run
File Integrity Checks (MSTG-RESILIENCE-3 and MSTG-RESILIENCE-11)
Overview
There are two topics related to file integrity:
523
iOS Anti-Reversing Defenses
1. Application source code integrity checks: In the "Tampering and Reverse Engineering" chapter, we discussed the
iOS IPA application signature check. We also saw that determined reverse engineers can easily bypass this
check by re-packaging and re-signing an app using a developer or enterprise certificate. One way to make this
harder is to add an internal run-time check that determines whether the signatures still match at run time.
2. File storage integrity checks: When files are stored by the application, key-value pairs in the Keychain,
UserDefaults / NSUserDefaults , a SQLite database, or a Realm database, their integrity should be protected.
Sample Implementation - Application Source Code
Apple takes care of integrity checks with DRM. However, additional controls (such as in the example below) are
possible. The mach_header is parsed to calculate the start of the instruction data, which is used to generate the
signature. Next, the signature is compared to the given signature. Make sure that the generated signature is stored or
coded somewhere else.
int xyz(char *dst) {
const struct mach_header * header;
Dl_info dlinfo;
if (dladdr(xyz, &dlinfo) == 0 || dlinfo.dli_fbase == NULL) {
NSLog(@" Error: Could not resolve symbol xyz");
[NSThread exit];
}
while(1) {
header = dlinfo.dli_fbase; // Pointer on the Mach-O header
struct load_command * cmd = (struct load_command *)(header + 1); // First load command
// Now iterate through load command
//to find __text section of __TEXT segment
for (uint32_t i = 0; cmd != NULL && i ncmds; i++) {
if (cmd->cmd == LC_SEGMENT) {
// __TEXT load command is a LC_SEGMENT load command
struct segment_command * segment = (struct segment_command *)cmd;
if (!strcmp(segment->segname, "__TEXT")) {
// Stop on __TEXT segment load command and go through sections
// to find __text section
struct section * section = (struct section *)(segment + 1);
for (uint32_t j = 0; section != NULL && j nsects; j++) {
if (!strcmp(section->sectname, "__text"))
break; //Stop on __text section load command
section = (struct section *)(section + 1);
}
// Get here the __text section address, the __text section size
// and the virtual memory address so we can calculate
// a pointer on the __text section
uint32_t * textSectionAddr = (uint32_t *)section->addr;
uint32_t textSectionSize = section->size;
uint32_t * vmaddr = segment->vmaddr;
char * textSectionPtr = (char *)((int)header + (int)textSectionAddr - (int)vmaddr);
// Calculate the signature of the data,
// store the result in a string
// and compare to the original one
unsigned char digest[CC_MD5_DIGEST_LENGTH];
CC_MD5(textSectionPtr, textSectionSize, digest); // calculate the signature
for (int i = 0; i cmdsize);
}
524
iOS Anti-Reversing Defenses
}
}
Sample Implementation - Storage
When ensuring the integrity of the application storage itself, you can create an HMAC or signature over either a given
key-value pair or a file stored on the device. The CommonCrypto implementation is best for creating an HMAC. If you
need encryption, make sure that you encrypt and then HMAC as described in Authenticated Encryption.
When you generate an HMAC with CC:
1. Get the data as NSMutableData .
2. Get the data key (from the Keychain if possible).
3. Calculate the hash value.
4. Append the hash value to the actual data.
5. Store the results of step 4.
// Allocate a buffer to hold the digest and perform the digest.
NSMutableData* actualData = [getData];
//get the key from the keychain
NSData* key = [getKey];
NSMutableData* digestBuffer = [NSMutableData dataWithLength:CC_SHA256_DIGEST_LENGTH];
CCHmac(kCCHmacAlgSHA256, [actualData bytes], (CC_LONG)[key length], [actualData bytes], (CC_LONG)[actualDat
a length], [digestBuffer mutableBytes]);
[actualData appendData: digestBuffer];
Alternatively, you can use NSData for steps 1 and 3, but you'll need to create a new buffer for step 4.
When verifying the HMAC with CC, follow these steps:
1. Extract the message and the hmacbytes as separate NSData .
2. Repeat steps 1-3 of the procedure for generating an HMAC on the NSData .
3. Compare the extracted HMAC bytes to the result of step 1.
NSData* hmac = [data subdataWithRange:NSMakeRange(data.length - CC_SHA256_DIGEST_LENGTH, CC_SHA256_DIGEST_LEN
GTH)];
NSData* actualData = [data subdataWithRange:NSMakeRange(0, (data.length - hmac.length))];
NSMutableData* digestBuffer = [NSMutableData dataWithLength:CC_SHA256_DIGEST_LENGTH];
CCHmac(kCCHmacAlgSHA256, [actualData bytes], (CC_LONG)[key length], [actualData bytes], (CC_LONG)[actualData
length], [digestBuffer mutableBytes]);
return [hmac isEqual: digestBuffer];
Bypassing File Integrity Checks
When you're trying to bypass the application-source integrity checks
1. Patch the anti-debugging functionality and disable the unwanted behavior by overwriting the associated code with
NOP instructions.
2. Patch any stored hash that's used to evaluate the integrity of the code.
3. Use Frida to hook file system APIs and return a handle to the original file instead of the modified file.
When you're trying to bypass the storage integrity checks
1. Retrieve the data from the device, as described in the section on device binding.
2. Alter the retrieved data and return it to storage.
Effectiveness Assessment
525
iOS Anti-Reversing Defenses
For the application source code integrity checks Run the app on the device in an unmodified state and make sure that
everything works. Then apply patches to the executable using optool, re-sign the app as described in the chapter
"Basic Security Testing", and run it. The app should detect the modification and respond in some way. At the very
least, the app should alert the user and/or terminate the app. Work on bypassing the defenses and answer the
following questions:
Can the mechanisms be bypassed trivially (e.g., by hooking a single API function)?
How difficult is identifying the anti-debugging code via static and dynamic analysis?
Did you need to write custom code to disable the defenses? How much time did you need?
What is your assessment of the difficulty of bypassing the mechanisms?
For the storage integrity checks A similar approach works. Answer the following questions:
Can the mechanisms be bypassed trivially (e.g., by changing the contents of a file or a key-value pair)?
How difficult is obtaining the HMAC key or the asymmetric private key?
Did you need to write custom code to disable the defenses? How much time did you need?
What is your assessment of the difficulty of bypassing the mechanisms??
Device Binding (MSTG-RESILIENCE-10)
Overview
The purpose of device binding is to impede an attacker who tries to copy an app and its state from device A to device
B and continue the execution of the app on device B. After device A has been determined trusted, it may have more
privileges than device B. This situation shouldn't change when an app is copied from device A to device B.
Since iOS 7.0, hardware identifiers (such as MAC addresses) are off-limits. The ways to bind an application to a
device are based on identifierForVendor , storing something in the Keychain, or using Google's InstanceID for iOS.
See the "Remediation" section for more details.
Static Analysis
When the source code is available, there are a few bad coding practices you can look for, such as
MAC addresses: there are several ways to find the MAC address. When you use CTL_NET (a network
subsystem) or NET_RT_IFLIST (getting the configured interfaces) or when the mac-address gets formatted, you'll
often see formatting code for printing, such as "%x:%x:%x:%x:%x:%x" .
using the UDID: [[[UIDevice currentDevice] identifierForVendor] UUIDString]; and
UIDevice.current.identifierForVendor?.uuidString in Swift3.
Any Keychain- or filesystem-based binding, which isn't protected by SecAccessControlCreateFlags or and doesn't
use protection classes, such as kSecAttrAccessibleAlways and kSecAttrAccessibleAlwaysThisDeviceOnly .
Dynamic Analysis
There are several ways to test the application binding.
Dynamic Analysis with A Simulator
Take the following steps when you want to verify app-binding in a simulator:
1. Run the application on a simulator.
2. Make sure you can raise the trust in the application instance (e.g., authenticate in the app).
3. Retrieve the data from the Simulator:
Because simulators use UUIDs to identify themselves, you can make locating the storage easier by creating
a debug point and executing po NSHomeDirectory() on that point, which will reveal the location of the
526
iOS Anti-Reversing Defenses
simulator's stored contents. You can also execute find ~/Library/Developer/CoreSimulator/Devices/ | grep
 for the suspected plist file.
Go to the directory indicated by the given command's output.
Copy all three found folders (Documents, Library, tmp).
Copy the contents of the Keychain. Since iOS 8, this has been in
~/Library/Developer/CoreSimulator/Devices//data/Library/Keychains .
4. Start the application on another simulator and find its data location as described in step 3.
5. Stop the application on the second simulator. Overwrite the existing data with the data copied in step 3.
6. Can you continue in an authenticated state? If so, then binding may not be working properly.
We are saying that the binding "may" not be working because not everything is unique in simulators.
Dynamic Analysis Using Two Jailbroken Devices
Take the following steps when you want to verify app-binding with two jailbroken devices:
1. Run the app on your jailbroken device.
2. Make sure you can raise the trust in the application instance (e.g., authenticate in the app).
3. Retrieve the data from the jailbroken device:
You can SSH into your device and extract the data (as with a simulator, either use debugging or find
/private/var/mobile/Containers/Data/Application/ |grep  ). The directory is in
/private/var/mobile/Containers/Data/Application/ .
SSH into the directory indicated by the given command's output or use SCP ( scp
:/ targetfolder ) to copy the folders and it's data. You can use an
FTP client like Filezilla as well.
Retrieve the data from the keychain, which is stored in /private/var/Keychains/keychain-2.db , which you can
retrieve using the keychain dumper. First make the keychain world-readable ( chmod +r
/private/var/Keychains/keychain-2.db ), then execute it ( ./keychain_dumper -a ).
4. Install the application on the second jailbroken device.
5. Overwrite the application data extracted during step 3. The Keychain data must be added manually.
6. Can you continue in an authenticated state? If so, then binding may not be working properly.
Remediation
Before we describe the usable identifiers, let's quickly discuss how they can be used for binding. There are three
methods for device binding in iOS:
You can use [[UIDevice currentDevice] identifierForVendor] (in Objective-C),
UIDevice.current.identifierForVendor?.uuidString (in Swift3), or
UIDevice.currentDevice().identifierForVendor?.UUIDString (in Swift2). These may not be available after you
reinstall the application if no other applications from the same vendor are installed.
You can store something in the Keychain to identify the application's instance. To make sure that this data is not
backed up, use kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly (if you want to secure the data and properly
enforce a passcode or touch-id requirement), kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly , or
kSecAttrAccessibleWhenUnlockedThisDeviceOnly .
You can use Google and its Instance ID for iOS.