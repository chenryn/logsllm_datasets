**作者：启明星辰ADLab  
公众号： **
### 一、前言
国外安全研究人员在由Treck开发的TCP/IP协议栈中发现了多个漏洞，这一系列漏洞统称为Ripple20。这些漏洞广泛存在于嵌入式和物联网设备中，影响了多个行业领域（包括医疗、运输、能源、电信、工业控制、零售和商业等），涉及了众多供应商（包括HP、Schneider
Electric、Intel、Rockwell Automation、Caterpillar、Baxter等）。
这些漏洞源于Ripple20的多个协议（包括IPv4、ICMPv4、IPv6、IPv6OverIPv4、TCP、UDP、ARP、DHCP、DNS或以太网链路层）在处理网络报文发送时存在缺陷，其中包括四个严重漏洞，它们的CVE编号分别为CVE-2020-11896、CVE-2020-11898、CVE-2020-11910、CVE-2020-11911。CVE-2020-11896（CVSS评分10）可导致远程执行代码，CVE-2020-11897（CVSS评分10）可导致越界写入，CVE-2020-11901（CVSS评分9）可导致远程执行代码，CVE-2020-11898（CVSS评分9.1）可导致泄露敏感信息。其它15个Ripple20漏洞的严重程度各异，CVSS评分分别从3.1到8.2。
由于物联网设备供应链的特性，漏洞影响的设备众多，影响范围广且持续时间长，漏洞修复的实施较困难。因此，启明星辰ADLab第一时间对相关漏洞进行了分析并提出了防范建议。
### 二、协议栈检测
由于采用Treck协议栈的厂家较多，有些厂家是硬件IP核的方式引用了Treck协议栈。单纯通过设备指纹来识别漏洞是不足的，如何检测目标设备是否为Treck协议栈成为资产排查的关键，为此启明星辰ADLab安全研究员对Treck协议栈进行了深入分析，并公开了Treck协议栈指纹检测方法发现漏洞。
Treck协议栈自定义了类型为165(0xa5)的ICMP包，并一旦收到165的ICMP包会回复类型为166的ICMP包响应。如下代码所示：
![
](https://images.seebug.org/content/images/2020/07/e9daad81-8790-425a-9b25-3ab0226464dd.png-w331s)
首先，向目标发送 ICMP请求包，其中type=0xa5，code=0。如下图所示：
![
](https://images.seebug.org/content/images/2020/07/e8e9c812-d47a-474f-9401-1de5bc3b303f.png-w331s)
然后，接收目标返回的icmp响应包数据，其中type =0xa6,code
=0，ICMP报文第9字节后的六个字节为0x01,0x51,0x35,0x28,0x57,0x32(大端)或0x51,0x01,0x28,0x35,0x32,0x57(小端）。
满足上述的条件，则表明目标设备为treck 协议栈。如下图所示：
![
](https://images.seebug.org/content/images/2020/07/bfcddf12-9533-4854-ad91-87103634d524.png-w331s)
### 三、防范建议
#### 1、应用更新
及时更新到Treck TCP/IP协议栈软件的最新稳定版本（6.0.1.67或更高版本）。
#### 2、阻止异常IP流量
可以通过深度数据包检查来阻止网络攻击，以下是可以适当应用于网络环境中的可能缓解措施，过滤选项包括：
  * 如果网络环境不支持，则规范化或拒绝IP分片的数据包（IP分片）
  * 如果不需要，请禁用或阻止IP隧道（IPv6-in-IPv4或IP-in-IP隧道）
  * 阻止IP源路由和所有不赞成使用IPv6的功能，例如路由标头
  * 强制执行TCP检查并拒绝格式错误的TCP数据包
  * 阻止未使用的ICMP控制消息，例如MTU更新和地址掩码更新
  * 通过安全的递归服务器或应用层防火墙规范DNS
  * 确保网络环境中使用的是可靠的OSI第2层设备（以太网）
  * 通过DHCP侦听等功能提供DHCP / DHCPv6安全性
  * 如果未在交换基础架构中使用，则禁用或阻止IPv6多播。
### 四、相关概念介绍
#### 1、IP分片
IP分片使得在网络中发送大的IP包成为可能，即使其大小大于网络特定链路中允许的最大值。IP分片技术是一种将数据包分成几个较小的部分以支持通过这些链路和网络传输的技术。该协议支持在发送端进行分片，然后在接收端对分片重新组合。这允许不同的包在网络中零散地传输，并在另一侧正确地重新组装。
不同的包使用IP头中的标识字段（Identification）进行分组。此标识字段描述分片属于哪个包。同一个包的多个分片的Identification是一样的。IPv4通过Flags及Fragment
Offset字段对分片进行管理，Flags由R、DF、MF三部分组成：
  * R（Reserve bit）保留未用
  * DF (Don't Fragment) DF =1：禁止分片 , DF =0：允许分片
  * MF (More Fragment) MF =1：非最后一片, MF =0：最后一片(或未分片)
Fragment Offset(13位)：一个IP分组分片封装原IP分组数据的相对偏移量, 片偏移字段以8字节为单位。IP包结构如下图所示：
![
](https://images.seebug.org/content/images/2020/07/0c6a612e-23b1-4f5e-90a3-490ac832b9c0.png-w331s)
#### 2、IP隧道技术
IP隧道允许两个独立网络之间的虚拟点到点链路。它是通过将包（可以是IP包）封装在另一个包中来实现的，使得内部包具有与外部包不同的源地址和目标地址。外部包的源地址和目标地址是隧道端点，内部包中的地址用于隧道两端的网络路由。隧道入口点是接收应通过隧道转发的IP数据包的节点。它将此数据包封装在外部IP数据包中。当数据包到达隧道出口点时，它被解封装并转发，就好像它是在目标网络中发送的常规数据包一样。IP-in-IP包如下图所示：
![
](https://images.seebug.org/content/images/2020/07/ae8991e8-16b4-4fc7-bd5d-e29f56a76cb8.gif-w331s)
IP隧道技术主要应用在虚拟专用网（VPN）技术中。目前有几种隧道协议，其中最简单和最古老的是IP-in-IP（IP协议编号4）。IP-in-IP是一种IP隧道协议，其中一个IP包通过添加一个外部IP报头（其源地址和目标地址分别等于隧道的入口点和出口点）封装在另一个IP包中。内部数据包未被修改，外部IP头从内部IP头复制一些字段。外部报头的IP协议号为4。IP-in-IP报文示例如下图所示：
![
](https://images.seebug.org/content/images/2020/07/5d992849-ea03-4ce9-b3a7-3178ca723568.png-w331s)
### 五、Treck协议栈
#### 1、协议栈概述
Treck协议栈通过tsPacket结构来描述包结构，通过tsUserPacket结构支持数据包分片。这两个结构体在treck/include/trsocket.h文件中定义。Treck
TCP/IP协议栈中的包数据由tsPacket的结构表示。每个包都与一个数据缓冲区相关联，该数据缓冲区保存从接口驱动程序到达的原始数据。tsPacket结构还保存另一个称为ttUserPacket的重要结构，以及指向tsSharedData结构的指针，该结构包括网络协议栈处理数据包时所需的信息（指向套接字结构、src/dst地址或端口等的指针）。定义如下：
    struct tsPacket {
    ttUserPacket pktUserStruct;
    ttSharedDataPtr pktSharedDataPtr; 
    struct tsPacket * pktChainNextPtr; 
    struct tsDeviceEntry * pktDeviceEntryPtr; 
    union anon_union_for_pktPtrUnion pktPtrUnion;
    tt32Bit pktTcpXmitTime;
    tt16Bit pktUserFlags;
    tt16Bit pktFlags;
    tt16Bit pktFlags2;
    tt16Bit pktMhomeIndex;
    tt8Bit pktTunnelCount; 
    tt8Bit pktIpHdrLen; 
    tt8Bit pktNetworkLayer; 
    tt8Bit pktFiller[1];
    };
这是包含的ttUserPacket结构（tsUserPacket的typedef），定义如下：
    struct tsUserPacket {
    void * pktuLinkNextPtr; // Next tsUserPacket for fragmented data
    ttUser8BitPtr pktuLinkDataPtr; 
    ttPktLen pktuLinkDataLength; 
    ttPktLen pktuChainDataLength; 
    int pktuLinkExtraCount; 
    };
pktuLinkNextPtr
：用于跟踪数据包中的分片。此字段指向表示下一个分片的另一个tsPacket结构，该tsPacket还保存对下一个分片的引用，如果此链接是最后一个分片，或者数据未被分片，则此字段将为NULL。
pktuLinkDataPtr：指向当前分片的数据缓冲区。当Treck协议栈在不同阶段处理数据包时，数据缓冲区中的确切位置会发生变化，这取决于当前正在处理的数据包所在协议层。例如，当Treck协议栈处理以太网层（在tfEtherRecv()函数中）时，此字段指向以太网报头。
pktuLinkDataLength：pktuLinkDataPtr指向的数据的大小，即单个分片的大小。
pktuChainDataLength：表示包含所有分片的数据包长度，即数据包的总大小。它只为第一个分片设置。如果数据没有分片，则等于pktuLinkDataLength。
#### 2、协议栈处理过程
协议栈中的一个常见模式是在协议栈中的层之间移动时调整pktuLinkDataPtr指针。例如，如果我们的包是一个ICMP回显请求包（ping），它的协议由三层组成：Ethernet、IPv4、ICMP。在这种情况下，当处理以太网层（在tfEtherRecv()函数中）时，pktuLinkDataPtr指向以太网报头的开始，然后在移动到下一层之前，使用以下代码对其进行调整，如下代码所示：
![
](https://images.seebug.org/content/images/2020/07/cd10f1be-a675-4d04-825a-d631b5503f07.png-w331s)
在本例中，0xe（十进制为14）是以太网报头（6（dst MAC）+6（src
MAC）+2（etherType））的大小。当tfEtherRecv()函数完成包处理时，它将包转发到下一层处理。支持的以太网类型有ARP、IPv4和IPv6。如下代码所示：
![
](https://images.seebug.org/content/images/2020/07/b6ae6009-b879-452b-ac53-c8b0fae026e6.jpg-w331s)
在示例中，当IPv4层接收到数据包（在函数tfIpIncomingPacket()函数中）时，指针pktuLinkDataPtr已经指向IP报头。传入数据由具有相同命名约定tf
_IncomingPacket的函数处理，其中_
是协议名。对于ICMP包来说，它由三层协议组成（Ethernet/IPv4/ICMP），数据包将由函数tfEtherRecv、tfIpIncomingPacket和tfIcmpIncomingPacket函数分别处理。
#### 3、分片重组
Treck协议栈在tfIpReassemblePacket()函数中处理分片的重组，该函数由tfIpIncomingPacket()调用。每当接收到发往设备的IP分片时，就会调用此函数。如果缺少分片，函数将返回NULL。否则，如果所有分片都到达并且没有空洞，则网络协议栈将使用pktuLinkNextPtr字段将分片链接在一起，然后将数据包传递给下一层进行进一步处理。在此上下文中，“重组”一词并不意味着将数据包复制到连续的存储块，而只是简单地将它们链接到一个链表中。分片数据链表结构如下图所示：
![
](https://images.seebug.org/content/images/2020/07/fd508806-3909-4e99-8bdf-070317df5859.png-w331s)
#### 4、tfIpIncomingPacket函数