# 分析N1CTF 2021中Crypto方向题目
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
N1CTF 2021中主要有4道考察Crypto方向的题目，题目整体难度相对较高，在这里对这4道题目进行一下分析。
## checkin
Name | Category | Points | Solves  
---|---|---|---  
checkin | CRYPTO | 624 / 1000 | 7  
[attachments](https://github.com/roadicing/ctf-writeups/tree/main/2021/n1ctf/checkin/attachments).
###  题目描述
> None
###  题目描述
本题中未知量`x`的表达式为：
    x = 2021 * p + 1120 * q
且未知量`x`和已知量`h`满足：
    x + x^(-1) ≡ h (MOD N)
同余式两边同乘`x`，移项，得：
    x^2 + 1 - h * x ≡ 0 (MOD N)
同时本题还提供了512位素数`p`的高22位`p_0`，那么我们借助`p_0`计算出`x`的一个近似估计`x_approx`：
    x_approx = 2021 * (p_0  = PolynomialRing(Zmod(N))
    f = (x_approx + x_diff)^2 + 1 - h * (x_approx + x_diff)
    res = f.small_roots(X = 2^500, epsilon = 0.02)
    x_diff = Integer(res[0])
    x = x_approx + x_diff
    assert (h == (inverse_mod(x, N) + x) % N)
    p = var('p')
    q = var('q')
    res = solve([x == 2021 * p + 1120 * q, N == p * q], p, q)
    p = Integer(res[0][0].rhs())
    q = Integer(res[0][1].rhs())
    assert (p * q == N)
    d = inverse_mod(65537, (p - 1) * (q - 1))
    pt = pow(ct, d, N)
    FLAG = long_to_bytes(pt)
    print(FLAG)
    # n1ctf{093fd4c4-5cc9-427e-98ef-5a04914c8b4e}
## n1ogin
Name | Category | Points | Solves  
---|---|---|---  
n1ogin | CRYPTO | 624 / 1000 | 7  
###  题目描述
> To prevent any adversary sitting in the middle from eavesdropping, we apply
> hybrid encryption in our n1ogin system.
>
> nc 43.155.59.224 7777
[attachments](https://github.com/roadicing/ctf-writeups/tree/main/2021/n1ctf/n1ogin/attachments).
###  题目描述
本题中提供给选手了一份管理员成功登陆系统的流量，在该系统中，传递的消息使用AES-CBC进行加密，其中AES的密钥使用RSA进行加密，需要选手获得管理员的密码来通过管理员身份登陆系统，继而执行flag命令来拿到`FLAG`。
审计服务器端源码可以发现，在对AES进行解密处理时，引入了各种报错提示，其中就包括对`PKCS #7
padding`的报错提示，如果我们可以获取到该报错提示，那么只需对系统进行标准的AES-CBC padding oracle
attack攻击即可解密密文拿到管理员密码，但是问题在于本题中服务器端在输出消息报错时，不管对于哪种类型的错误，均只提示一种错误，因此我们需要找到一种方法，能够根据这一错误提示来获取关于padding是否正确的信息。
经过分析可以发现，如果服务器端通过了padding check，那么接下来就会进入到mac check环节，而在mac
check环节中，进行了7777次哈希运算，这一过程显然会引入一个比较明显的时间开销，而如果没有通过padding
check的话，则会直接报错，即跳过了mac
check环节，那么时间开销就会显著减少，因此我们可以根据服务器返回报错的时间，来判断padding是否正确，即借助基于时延的侧信道攻击（timing
based side channel attack）来构造出一个padding oracle，接下来再利用CBC padding
oracle恢复出明文拿到管理员密码即可。
这里有两个需要注意的地方，一个是在进行侧信道攻击时，由于服务器的响应时间每次存在差异，因此容易出现False
Positive，为了减少这种偶然事件对攻击的影响，我们可以对每次消息重复发送若干轮，只有每一轮的时间开销都大于我们设置的阈值，才视为padding
check通过的情况，而只要有一轮时间开销小于阈值，即视为padding
check失败的情况，从而提高正确率；再一个需要注意的地方是由于明文较长，加上我们前面引入轮数之后会增加时间开销，因此恢复过程相对较慢，但是这里我们不需要恢复全部明文，注意到的管理员的密码字段正好在明文的末尾，而我们的padding
oracle攻击又正好是从最后一个字节开始逐字节向前恢复，因此只需等到管理员密码恢复后即可。
###  解题脚本
    #!/usr/bin/env python3
    import time
    import json
    from pwn import *
    from tqdm import tqdm
    from client import *
    IP = b"43.155.59.224"
    PORT = 7777
    BLOCK_SIZE = 16
    # You need to debug this value according to the delay of communication with the server in your environment.
    THRESHOLD = 0.10
    # Increase the number of rounds to reduce false positives.
    ROUNDS = 10
    # Get from `packet.pcapng`
    PACKET = {"rsa_data": "391b06a1740b8c9cf1c8d2bb66ba5b191caa8534b4be18c22ce81069658dd2cd3ca3a8d1a3fc8dfab4b68a6b076bf89be807404e0a98dd1bf9daaf8ba34e0556131d3e56cae61c0302d24a177481209e82de7ecf91c2fe66aa39162d7af9c2fdabaf0c444badfc6b82b071fda8e3b26d4d3e57dba25c36298601ae0153c73b7469c472ac4702531c38849772e7c6e24313e6eb7def64a7bec1c21150c1fded52b3ca716d4444b4d75836dff8c92a371f6256ee7a48034f6d5ea949d982f9f05c04d3d7cce10bd11b806cc02088b42fa0cb069390700fb586287ba224ea0b210ebd0479a4f1d2ef5f914bcc861125b7d8d714cf0feecb515c1b1ef869e91ca179", "aes_data": "1709bf9489f6df6dc31491cee4711f7a2a3e050f1ed3e9772442e8a8483e341313713383dd31fbf0133d55e977b8edf54ba832002ee4ee52da32c260b083a35b01626201c36dad6fca7b2be2aa03d90bf5c9a601a24149f55cdcd39f0bf6a032bfabeebee5259a21e188f5c5f8776cd9d7c072054781169174bddbc390e6da21bd7b85f76c93f48914fb1958ac89e464511d9a17fb2174aab825cb13eb3f0dfa"}
    def send_data(io, data):
        time_start = time.time()
        io.sendlineafter(b"> ", json.dumps(data))
        _ = io.recvline()
        time_end = time.time()
        return time_end - time_start
    def timing_attack(io, data):
        for _ in range(ROUNDS):
            time_diff = send_data(io, data)
            if time_diff > THRESHOLD:
                continue
            else:
                return False
        return True
    def oracle(io, ct, mac):
        data = {"rsa_data" : PACKET["rsa_data"], "aes_data" : (ct + mac).hex()}
        return timing_attack(io, data)
    def cbc_padding_oracle_attack(io, ct, mac):
        ct_blocks = [ct[i:i + BLOCK_SIZE] for i in range(0, len(ct), BLOCK_SIZE)]
        pt = b''
        for idx in range(1, len(ct_blocks)):
            known_ct_block = b''
            for pad_len in range(1, BLOCK_SIZE + 1):
                for x in tqdm(range(256)):
                    new_ct_block = bytes([x]) + known_ct_block
                    new_ct_blocks = ct_blocks[:-idx - 1] + [os.urandom(BLOCK_SIZE - pad_len) + new_ct_block] + [ct_blocks[-idx]]
                    new_ct = b''.join(new_ct_blocks)
                    if oracle(io, new_ct, mac):
                        pt += bytes([pad_len ^ ct_blocks[-idx - 1][-pad_len] ^ x])
                        known_ct_block = bytes([i ^ pad_len ^ (pad_len + 1) for i in new_ct_block])
                        print(pt[::-1])
                        break
        return pt[::-1]
    aes_data = bytes.fromhex(PACKET["aes_data"])
    ct, mac = aes_data[:-16], aes_data[-16:]
    io = remote(IP, PORT)
    _ = io.recvline()
    # We don't need to recover the whole plaintext, just stop the process when the password is recovered.
    pt = cbc_padding_oracle_attack(io, ct, mac)
    password = b"R,YR35B7^r@'U3FV"
    login(io)
    '''
    username: admin
    password: R,YR35B7^r@'U3FV
    admin login ok!
    [*] Switching to interactive mode
    admin@local> flag
    n1ctf{R3m0t3_t1m1ng_4ttack_1s_p0ssibl3__4nd_u_sh0uld_v3r1fy_th3_MAC_f1rs7}
    '''