*   `docker-compose images`
该命令列出了来自服务的日志:
*   `docker-compose logs`
`docker-compose logs `列出特定服务的日志，例如`docker-compose logs db`。
该命令列出了基于`docker-compose`运行的容器:
*   `docker-compose ps`
注意，大多数情况下`docker-compose ps`和`docker ps`的结果是有区别的。没有在`docker-compose`上下文中运行的容器将不会被`docker-compose ps`命令显示。
此命令构建、创建、重新创建和运行服务:
*   `docker-compose up`
### 注
运行`docker-compose up`时，如果一个服务退出，整个命令退出。
运行`docker-compose up -d`是在分离模式下运行`docker-compose up`。也就是说，该命令将在后台运行。
## 活动 2 —分析摘要-撰写命令行界面
让你熟悉命令行界面。
您被要求演示运行两个容器所导致的变化的差异。
当还在 WordPress `docker-compose.yml`的目录中时——在我的例子中是沙盒——运行*活动 B-1* 的命令，然后是以下命令:
```
docker-compose up -d
docker-compose stop
docker-compose rm
docker-compose start
docker-compose up -d
docker-compose stop
docker-compose start
```
# 管理多个容器和分布式应用包
这是运行 Django 应用的`docker-compose.yml`。类似的应用可以在姜戈示例下的`docker-compose`文档中找到。
从以下网址下载 Django 示例:[ttps://docs . docker . com/compose/Django/](https://docs.docker.com/compose/django/):
![Managing Multiple Containers and Distributed Application Bundles](img/image02_08.jpg)
### 注
参考放置在`Code/Lesson-2/django-docker-compose.yml`的完整代码。
前往[https://goo.gl/H624J1](https://goo.gl/H624J1)进入密码。
## 改进 Docker 工作流程
提供更多关于`docker-compose`如何参与以及它如何改进 Docker 工作流的上下文。
1.  创建一个新目录并命名为`django_docker`。
2.  在`django-docker`目录下，新建一个`docker-compose.yml`并添加上图或者提供的`django-docker-compose.yml`脚本中的信息。
3.  创建一个新的 Dockerfile，并在提供的 Dockerfile 脚本中添加内容。
4.  创建需求文件；只需复制提供的`django-requirements.txt`文件即可。
5.  向上运行`docker-compose`并观察日志。
请注意，我们可以用一个简单的命令 docker-compose 来旋转两个容器。
### 注
不需要以前与 Django 的经验；这是为了基本的演示目的。`Code/Lesson-2/django-requirements.txt`。
### **姜戈撰写文件分解**
首先，这个文件有多少服务？有，两个:`db`和`web`。服务`db`是基于波斯特格雷人的形象。服务网站是从包含此`docker-compose.yml`的同一目录中的 Dockerfile 构建的。
如果没有的`docker-compose`文件，`db`服务容器会以这样的方式运行:
![The Django Compose File Broken Down](img/image02_09.jpg)
该命令被翻译为以下内容:
![The Django Compose File Broken Down](img/image02_10.jpg)
打开终端中的另一个标签或窗口并运行`docker ps`。你会看到容器在运转。
另一方面，根据示例的`web`服务容器将在以下步骤中运行:
![The Django Compose File Broken Down](img/image02_11.jpg)
第二个命令分解为以下格式:
```
docker run (the command)
          -p  shows the :   (8000:8000)
          -v: shows the   `pwd`   (:/django_docker)
           (django-web)
           (python3 manage.py runserver 0.0.0.0.8000)
```
因此，上述命令被翻译为以下内容:
![The Django Compose File Broken Down](img/image02_12.jpg)
使用`docker-compose.yml`的一个优点是，您有一个命令来运行文件中包含的所有容器，而不是一次又一次地在终端中运行命令。
在上一课中，我们没有介绍卷和端口。我会花时间来帮助我们理解这一点。
### 使用卷忍受数据
卷是用来保存 Docker 容器生成和使用的数据。
### 注
卷将任何更新保存到本地文件或脚本中。这在容器侧产生了相等的变化。
在这种情况下，命令如下:
![Endure Data Using Volumes](img/image02_13.jpg)
在主命令之后的 docker 运行选项中:
```
-v .:/django_docker
```
这在`docker-compose.yml` 文件中。
![Endure Data Using Volumes](img/image02_14.jpg)
### 注
只要在`docker-compose`文件中定义了卷，当进行本地更改(如文件更新)时，更改将自动同步到容器中的文件。
![Endure Data Using Volumes](img/image02_15.jpg)
### 港口
Django 和其他网络服务器一样，运行在特定的端口上。用于构建 Django 映像的 Dockerfile 有一个类似的命令:`EXPOSE 8000`。当容器运行时，该端口保持打开，并打开连接。
在 Django Dockerfile 中，我们将我们的端口定义为`8000`，并在号码前面加上一个地址`(0.0.0.0):`
![Ports](img/image02_16.jpg)
数字`0.0.0.0` 定义运行容器的主机地址。
### 注
该地址告诉`docker-compose`在我们的机器上运行容器，或者，简而言之，在本地主机上运行容器。如果我们跳过地址，只公开端口，我们的设置会有意想不到的结果，就像一个空白页。
考虑`docker run`选项中的以下一行:
```
	-p 8000:8000
```
![Ports](img/image02_17.jpg)
以及`do‑cker-compose.yml`中的以下几行:
![Ports](img/image02_18.jpg)
`docker-compose`端口格式将本地工作站端口映射到容器端口。格式如下:
```
-p :
```
这允许我们从本地机器访问从容器端口映射的端口 8000。
最后还有一个选项`depends_on`，是专门针对`docker-compose.yml`的。`depends_on`规定了我们一运行`docker-compose`就旋转容器的顺序。
在我们的例子中，`depends_on`选项在 web 服务下。这意味着 web 服务容器依赖于`db`服务容器:
![Ports](img/image02_19.jpg)
## 活动 3 —运行摘要器-编写文件
让你熟悉`docker-compose`语法和命令。
您已经被要求构建和运行一个简单的 Python 应用，该应用从映像`josephmuli/flask-app`中暴露端口 5000。定义一个`docker-compose`文件，并将 Postgres 映像扩展为数据库。确保数据库与应用相关。
1.  我已经预建了一个名为`josephmuli/flask-app`的映像。在您的`docker-compose.yml`文件中扩展此映像。
2.  确保编写版本 3 `docker-compose`并定义两个服务。
3.  在端口`5000`上运行应用。
4.  打开浏览器，检查监听端口。
# 与 Docker 建立联系
默认情况下，`docker-compose`为您的应用设置单个网络，每个容器都可以到达该网络并发现其他容器。
网络根据其所在目录的名称来命名。因此，如果你的目录叫做`py_docker`，当你运行`docker-compose up`时，创建的网络叫做`py_docker_default`。
在创建 WordPress 容器时，我们在前面的主题中提到了端口。为了更好地解释网络，我们将使用用于启动 WordPress 应用的`docker-compose.yml`:
![Networking with docker-compose](img/image02_20.jpg)
在这个文件中，我们有两个服务:`db`和`wordpress`。
在 WordPress 服务中，我们有`ports`选项将端口`80`映射到端口`8000`。难怪 WordPress 应用会在我们浏览器的`0.0.0.0:8000`上运行。
端口选项不在`db`服务中。然而，如果你去`docker hub page for mysql`你会注意到`3306`港暴露了。这是 MySQL 的标准端口。你可以从[https://hub.docker.com/r/library/mysql](https://hub.docker.com/r/library/mysql)获得更多关于 MySQL 的信息。
### 注
我们没有数据库的端口映射，因为我们不一定需要映射到我们计算机的端口；相反，我们希望 WordPress 应用映射到 DB 进行通信。
我们没有`db`的端口映射，因为我们不一定需要映射到本地工作站或计算机的端口。我们只需要将它暴露在容器环境中，这样它就可以从 web 服务连接起来，如第 23 行:`WORDPRESS_DB_HOST: db:3306`。
### 注
在`docker-compose`文件中，这是将一个容器连接到另一个容器的方式:
1.  请注意要连接的映像所暴露的端口。
2.  Reference the container under the service that is connecting to it; in our case, the `db` service is connected to by the WordPress service.
    由于我们将服务命名为`db`，因此我们将此连接称为`db:3306`。
    因此，格式是由`service>`暴露出来的`:<port`。
## 运行 WordPress 容器
提供更多关于容器如何连接、同步和通信的上下文。
在合成文件中，您注意到重启选项了吗？此选项的可用值如下:
*   不
*   总是
*   接通故障
*   除非-停止
![Run the WordPress Containers](img/image02_21.jpg)
如果没有指定，默认为`no`。这意味着容器在任何情况下都不会重新启动。但是`db`服务在这里被指定为重启:总是，所以容器总是重启。
让我们看看姜戈的例子，看看网络是如何工作的。这就是`docker-c` `ompose.yml`:
![Run the WordPress Containers](img/image02_22.jpg)
很快，你可能在 WordPress 网站上看不到网络部分。这里有一个片段:
```
DATABASES = {
'default': {
'ENGINE': 'django.db.backends.postgresql',
'NAME': 'postgres',
'USER': 'postgres',
'HOST': 'db',
'PORT': 5432,
}
}
```
这里的问题是，我们怎么知道名字和用户是`postgres`，主机是`db`，端口是`5432`？
这些是我们运行的`postgres`映像和容器中设置的默认值。
为了更清楚，您可以在官方 Postgres Docker 库中查看这一行:
您可以从 GitHub 上的 https://github . com/docker-library/postgres/blob/master/10/docker-entry point . sh # l101 获取 postgres docker sample。
![Run the WordPress Containers](img/image02_23.jpg)
如前所述，主机是`DB`，因为服务名是通过运行`postgres`映像创建的`db`。
您可以从 GitHub 获取 Postgres Docker 示例，网址为:[https://GitHub . com/Docker-library/Postgres/blob/master/10/Docker file # L132:](https://github.com/docker-library/postgres/blob/master/10/Dockerfile#L132:)
![Run the WordPress Containers](img/image02_24.jpg)
间接证明了为什么`settings.py`是这样配置的。
# 总结
在本课中，我们完成了以下工作:
*   讨论并展示了多容器设置
*   浏览`docker-compose`命令，以并行方式构建和运行多个容器
*   对网络容器以及如何从本地机器将数据保存在容器中有了深入的了解
*   通过 Docker Hub 构建和运行应用，甚至无需设置它们