ceedings of IEEE ICC ’17. 1–6. https://doi.org/10.1109/ICC.2017.7997249
[79] Benjamin E. Ujcich, Adam Bates, and William H. Sanders. 2018. A Provenance
Model for the European Union General Data Protection Regulation. In Provenance
and Annotation of Data and Processes, Khalid Belhajjame, Ashish Gehani, and
Pinar Alper (Eds.). Springer International Publishing. https://doi.org/10.1007/
978-3-319-98379-0
[80] Benjamin E. Ujcich, Andrew Miller, Adam Bates, and William H. Sanders. 2017.
Towards an accountable software-defined networking architecture. In Proceedings
of IEEE NetSoft ’17. IEEE. https://doi.org/10.1109/NETSOFT.2017.8004206
[81] Benjamin E. Ujcich, Uttam Thakore, and William H. Sanders. 2017. ATTAIN: An
Attack Injection Framework for Software-Defined Networking. In Proceedings of
IEEE/IFIP DSN ’17. IEEE. https://doi.org/10.1109/DSN.2017.59
[82] Danny van Bruggen. 2018. JavaParser: For Parsing Java Code. (2018). http:
//javaparser.org/
[83] Dimitri van Heesch. 2018. Doxygen: Generate documentation from source code.
(2018). http://www.stack.nl/~dimitri/doxygen/
[84] Andreas Voellmy, Hyojoon Kim, and Nick Feamster. 2012. Procera: a language
for high-level reactive network control. In Proceedings of ACM HotSDN ’12. ACM,
43–48. https://doi.org/10.1145/2342441.2342451
[85] Xitao Wen, Bo Yang, Yan Chen, Chengchen Hu, Yi Wang, Bin Liu, and Xiaolin
Chen. 2016. SDNShield: Reconciliating Configurable Application Permissions
for SDN App Markets. In Proceedings of IEEE/IFIP DSN ’16. IEEE, 121–132. https:
//doi.org/10.1109/DSN.2016.20
[86] Jennifer Widom. 2004. Trio: A System for Integrated Management of Data, Accuracy,
and Lineage. Technical Report 2004-40. Stanford InfoLab. http://ilpubs.stanford.
edu:8090/658/
[87] Yang Wu, Ang Chen, Andreas Haeberlen, Wenchao Zhou, and Boon Thau Loo.
2015. Automated Network Repair with Meta Provenance. In Proceedings of ACM
HotNets ’15. ACM, Article 26, 7 pages. https://doi.org/10.1145/2834050.2834112
[88] Yang Wu, Mingchen Zhao, Andreas Haeberlen, Wenchao Zhou, and Boon Thau
Loo. 2014. Diagnosing Missing Events in Distributed Systems with Negative
Provenance. In Proceedings of ACM SIGCOMM ’14. ACM, 383–394. https://doi.
org/10.1145/2619239.2626335
[89] Changhoon Yoon, Seungwon Shin, Phillip Porras, Vinod Yegneswaran, Heedo
Kang, Martin Fong, Brian O’Connor, and Thomas Vachuska. 2017. A Security-
Mode for Carrier-Grade SDN Controllers. In Proceedings of ACM ACSAC ’17.
ACM, 461–473. https://doi.org/10.1145/3134600.3134603
[90] Wenchao Zhou, Qiong Fei, Arjun Narayan, Andreas Haeberlen, Boon Thau Loo,
and Micah Sherr. 2011. Secure Network Provenance. In Proceedings of ACM SOSP
’11. ACM, 295–310. https://doi.org/10.1145/2043556.2043584
A SECURITY-MODE ONOS DETAILS
Security-Mode ONOS specifies permissions at the 1) bundle, 2) ap-
plication, 3) API, and 4) network (i.e., header space) levels [89].
We considered the API level permissions in our RBAC analysis in
Section 5.1, since it was an appropriate level of granularity for dis-
cussing the shared SDN control plane data structures’ permissions.
Although the Security-Mode ONOS paper describes network-level
permissions that would allow for finer granularities beyond API
level permissions (e.g., FLOWRULE_READ with packets matching an
IP source address within 10.0.0.0/24), we were not able to find
the relevant code in the ONOS repository [60] that implemented
such permissions at the time of writing.
A.1 Configuration
Security-Mode ONOS requires the installation of the Apache Felix
Framework security extensions and a reconfiguration of Apache
Karaf prior to running the controller [58]. It is expected that app
developers must create a manifest of necessary permissions for an
14
Cross-App Poisoning in Software-Defined Networking
CCS ’18, October 15–19, 2018, Toronto, ON, Canada
app in order for it to be allowed to be used when running Security-
Mode ONOS [89]. Such a manifest subsequently is included with
the app and is verified when the app is installed [57].
In addition to our static analysis script (see Section 5.1.4) that
we used to determine which permissions apps would need to run
with Security-Mode ONOS, we encountered other permissions
that needed to be set at the bundle and application levels. In par-
ticular, the interactions with the OSGi framework required that
we allow the org.osgi.framework.ServicePermission and the
org.osgi.framework.AdminPermission permissions for all OSGi
bundles so that the apps could interact with the core ONOS services;
not doing so produced silent failures.
A.2 App, Permission, and Object Details
Table 3 enumerates the specific apps, read permissions, write per-
missions, and objects that we used in our CAP model for Security-
Mode ONOS.
B SELECTED CODE FOR REACTIVE
FORWARDING APP
Figure 9 shows the relevant Java code portions for the reactive for-
warding app fwd. The reactive forwarding app requires PACKET_*
permissions to set up a packet processor (Line 5, Figure 9) and to
process such packets (Line 9, Figure 9), in addition to the FLOWRULE_
WRITE permission to emit flow rules into the data plane (Line 17,
Figure 9). We also permitted fwd to have the APP_* (Line 4, Fig-
ure 9), CONFIG_*, DEVICE_READ, TOPOLOGY_READ, INTENT_*, and
HOST_READ permissions to ensure fwd’s proper operation.
Note that any flows generated from fwd are attributed to fwd
through the fromApp(appId) method (Line 16, Figure 9), in spite
of the fact that fwd’s decisions may be based on data generated
by other apps. In the case of the attack from Section 5.3, trigger
poisons such data before they arrive to fwd (Line 9, Figure 9).
C W3C PROV-DM REPRESENTATIONS
Table 4 summarizes the visual representations of the W3C PROV
data model’s provenance objects and relations [51]. The basic PROV
object classes are Agent, Activity, and Entity. The basic PROV
relation classes that we use for ProvSDN are wasGeneratedBy,
wasAttributedTo, used, wasInformedBy, wasAssociatedWith,
and actedOnBehalfOf.
D IMPLEMENTING ProvSDN ON OTHER
CONTROLLERS
Provenance is effective only if an adversary cannot bypass the
collection system. We note that the feasibility of satisfying this
requirement depends significantly on the language used to imple-
ment the SDN controller. Certain language features may aid (e.g.,
private/public declarators) or hinder (e.g., lack of memory safety)
the ability to instrument all communication paths between apps and
the controller. Here, we discuss what challenges exist if ProvSDN
were to be implemented on other SDN controllers.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
public class ReactiveForwarding {
public void activate(...) {
...
appId = coreService.registerApplication("org.onosproject.
packetService.addProcessor(processor, PacketProcessor.
(cid:44)→ fwd");
(cid:44)→ director(2));
...
}
private class ReactivePacketProcessor implements
(cid:44)→ PacketProcessor {
public void process(PacketContext context) {
...
installRule(context,...);
}
}
private void installRule(PacketContext context,...) {
...
ForwardingObjective forwardingObjective =
(cid:44)→ DefaultForwardingObjective.builder().withSelector(
(cid:44)→ selectorBuilder.build()).withTreatment(treatment).
(cid:44)→ withPriority(flowPriority).withFlag(
(cid:44)→ ForwardingObjective.Flag.VERSATILE).fromApp(appId).
(cid:44)→ makeTemporary(flowTimeout).add();
(cid:44)→ receivedFrom().deviceId(), forwardingObjective)
flowObjectiveService.forward(context.inPacket().
}
}
Figure 9: Selected reactive forwarding app code during app
activation and during packet processing for inserting flow
rules. Lines with permissioned calls are highlighted in gray.
D.1 Java-Based Open-Source Controllers
In addition to ONOS, Floodlight [20], SE-Floodlight [68], and Open-
Daylight [64] are all implemented in Java. Classes in Java can have
member variables be declared as private or protected, which
prevents other, potentially malicious classes from directly manip-
ulating such variables. All interactions must be through public
method invocations that can be instrumented to collect provenance
data. In addition, Java is memory-safe, barring the exploitation of
vulnerabilities against the JVM itself. This ensures that an attacker
cannot, for instance, corrupt a reference to point to a sensitive
object’s private or protected member variables.
As noted earlier, Java’s Reflection API should be disabled to
prevent overriding the declared access modifiers. Furthermore, the
bytecode of compiled Java classes can be modified at class-load
time, and several libraries are available to facilitate this process.
This may allow an attacker to remove provenance collection code,
or induce other unwanted behaviors into other classes. In order to
collect complete provenance information, both reflection and byte
code rewriting should be disabled. For example, static analysis can
detect use of such methods and refuse to load classes which exploit
these features.
D.2 Python-Based Open-Source Controllers
Several SDN controllers, including Ryu [71] and POX [69], are
written in Python. Python does not enforce private data structures
that are only accessible to their containing class. All objects can
directly manipulate the attributes of all other objects and do not
need to go through getter and setter calls that could otherwise
enforce instrumentation. As such, it difficult to support internal
15
CCS ’18, October 15–19, 2018, Toronto, ON, Canada
B. Ujcich et al.
Table 3: Partial RBAC Model for Security-Mode ONOS and Included ONOS Apps.
Apps: A = {acl, actn-mdsc, bgprouter, bmv2-demo, castor, cip, config, cord-support, cpman, dhcp, dhcprelay, drivermatrix, events, faultmanagement,
flowanalyzer, flowspec-api, fwd, gangliametrics, graphitemetrics, influxdbmetrics, intentsync, iptopology-api, kafka-integration, l3vpn, learning-switch,
mappingmanagement, metrics, mfwd, mlb, mobility, netconf, network-troubleshoot, newoptical, ofagent, openroadm, openstacknetworking,
openstacknode, optical, optical-model, pathpainter, pce, pcep-api, pim, proxyarp, rabbitmq, reactive-routing, restconf, roadm, routing, routing-api,
scalablegateway, sdnip, segmentrouting, tenbi, test, tetopology, tetunnel, virtualbng, vpls, vrouter, vtn, yang, yang-gui, yms}
Read permissions: PR = {APP_READ, APP_EVENT, CONFIG_READ, CONFIG_EVENT, CLUSTER_READ, CLUSTER_EVENT, CODEC_READ, DEVICE_KEY_EVENT,
DEVICE_KEY_READ,DEVICE_READ, DEVICE_EVENT, DRIVER_READ, EVENT_READ, FLOWRULE_READ, FLOWRULE_EVENT, GROUP_READ, GROUP_EVENT, HOST_READ,
HOST_EVENT, INTENT_READ, INTENT_EVENT, LINK_READ, LINK_EVENT, PACKET_READ, PACKET_EVENT, PARTITION_READ, PARTITION_EVENT,
RESOURCE_READ, RESOURCE_EVENT, REGION_READ, STATISTIC_READ, TOPOLOGY_READ, TOPOLOGY_EVENT, TUNNEL_READ, TUNNEL_EVENT, UI_READ}
Write permissions: PW = {APP_EVENT, APP_WRITE, CONFIG_WRITE, CONFIG_EVENT, CLUSTER_WRITE, CLUSTER_EVENT, CODEC_WRITE, CLOCK_WRITE,
DEVICE_KEY_EVENT, DEVICE_KEY_WRITE, DEVICE_EVENT, DRIVER_WRITE, EVENT_WRITE, FLOWRULE_WRITE, FLOWRULE_EVENT, GROUP_WRITE,
GROUP_EVENT, HOST_WRITE, HOST_EVENT, INTENT_WRITE, INTENT_EVENT, LINK_WRITE, LINK_EVENT, MUTEX_WRITE, PACKET_WRITE, PACKET_EVENT,
PERSISTENCE_WRITE, PARTITION_EVENT, RESOURCE_WRITE, RESOURCE_EVENT, STORAGE_WRITE, TOPOLOGY_EVENT, TUNNEL_WRITE, TUNNEL_EVENT,
UI_WRITE}
Objects: O = {ApplicationManager, ClusterCommunicationManager, ClusterManager, ClusterMetadataManager, CodecManager,
ComponentConfigManager, CoreEventDispatcher, CoreManager, DefaultOpenFlowPacketContext, DefaultPacketContext, DeviceKeyManager,
DeviceManager, DriverManager, DriverRegistryManager, EdgeManager, FlowObjectiveCompositionManager, FlowObjectiveManager, FlowRuleManager,
FlowStatisticManager, GroupManager, HostManager, IntentManager, LinkManager, LogicalClockManager, MastershipManager,
NettyMessagingManager, NetworkConfigManager, PacketManager, PartitionManager, PathManager, PersistenceManager, ProxyArpManager,
RegionManager, ResourceManager, SimpleClusterStore, StatisticManager, StorageManager, TopologyManager, UiExtensionManager}
collected by instrumenting getters and setters. Unfortunately, nei-
ther language is memory-safe. This is a particularly severe problem
for handling malicious apps. Not only could controller code contain
exploitable bugs, but malicious apps themselves may deliberately
include vulnerabilities that they exploit locally in order to gain
arbitrary read/write access to memory. This clearly bypasses prove-
nance collection and may even have more severe repercussions if
the malicious app can, for example, make system calls.
D.4 Closed-Source Controllers
Collecting provenance data as discussed here implicitly requires the
ability to instrument code, which is not possible for closed source
controllers such as HP’s VAN [32]. However, possible future work
could leverage verbose log files to gain insight into interactions
between the controller and apps.
Table 4: SDN Shared Control Plane State Semantics Using
W3C PROV-DM.
Object or Event
W3C PROV-DM Representation
Control plane object
with attributes
App method or
function call
App, controller, or
switch identity
App reading object
from the shared
control plane
App writing object to
the shared control
plane
Intra-app method or
callback method
Internal service on be-
half of controller
apps while maintaining guarantees about complete provenance
collection, outside of instrumenting the Python interpreter itself.
One option is to move controller apps to discrete processes that
communicate only over inter-process communication primitives.
This would allow provenance collection at the cost of higher latency.
D.3 C/C++-Based Open-Source Controllers
Controllers written in C or C++, such as Rosemary [75] and NOX
[29], support private data structures and allow provenance to be
16
EntityKey1 = Value1Key n= Value nActivity(class:method)Agent(app)Activity(class:method)wasAssociatedWithusedEntityKey1 = Value1Key n= Value nAgent(app)EntityKey1 = Value1Key n= Value nwasGeneratedBywasAssociatedWithActivity(class:method)Agent(app)Activity 2(class:method)Activity 1(class:method)Agent(app)wasAssociatedWithwasAssociatedWithwasInformedByAgentAgentControlleractedOnBehalfOf