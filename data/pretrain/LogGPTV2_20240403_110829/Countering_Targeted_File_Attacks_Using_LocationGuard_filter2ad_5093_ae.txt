o
r
P
 1
 0.8
 0.6
 0.4
 0.2
 0
 0
 3
 3.5
 4
 4.5
 5
 5.5
 6
 6.5
 7
Corruption Threshold (cr)
ρ
 = 1.1
ρ
 = 1.2
ρ
 = 1.5
ρ
 = 3.0
 0.2
 0.4
 0.6
 0.8
 1
Fraction of Good Nodes Compromised
Figure 4: Probability of a Target File
Figure 5: Probability of a Target File
Attack for N = 1024 nodes and
R = 7 using DoS Attack
Attack for N = 1024 nodes and
R = 7 using Host Compromise Attack
(with no token collection)
Figure 6: Probability of a Target File
Attack for N = 1024 nodes and
R = 7 using Host Compromise Attack
with token collection from
compromised nodes
ρ
G0
0.5
0
1.0
0
1.1
0.05
1.2
0.44
1.5
0.77
3.0
0.96
Table 2: Mean Fraction of Good Nodes in Uncompromised State (G
0)
probability of a attack assuming that the adversary col-
lects the ﬁle tokens stored at compromised nodes. Figure
6 shows the mean effort required to locate all the replicas
of a target ﬁle (cr = R). The effort required is expressed
in terms of the fraction of good that need to be compro-
mised by the adversary to attack the target ﬁle.
Note that in the absence of location keys, an adver-
sary needs to compromise at most R good nodes in or-
der to succeed a targeted ﬁle attack. Clearly, location
key based techniques increase the required effort by sev-
eral orders of magnitude. For instance, when ρ = 3, an
adversary has to compromise 70% of the good nodes in
the system in order to attain the probability of an attack
to a nominal value of 0.1, even under the assumption
that an adversary collects ﬁle capabilities from compro-
mised nodes. If an adversary compromises every good
node in the system once, it gets to know the tokens of
all ﬁles stored on the overlay network. In Section 7.3
we had proposed location re-keying to protect the ﬁle
system from such attacks. The exact period of location
re-keying can be derived from Figure 6. For instance,
when ρ = 3, if a user wants to retain the attack prob-
ability below 0.1, the time interval between re-keying
should equal the amount of time it takes for an adver-
sary to compromise 70% of the good nodes in the sys-
)
tem. Table 3 shows the time taken (normalized by 1
λ
for an adversary to increase the attack probability on a
target ﬁle to 0.1 for different values of ρ. Observe that
as ρ increases, location re-keying can be more and more
infrequent.
Lookup Guard. We performed the following exper-
iments on our lookup identiﬁer obfuscation technique
(see Section 6): (i) studied the effect of obfuscation range
on the probability of a safe obfuscation, (ii) measured
the number of lookup retries, and (iii) measured the ex-
pected size of the sieved range (using the range sieving
attack). We found that a safe range for identiﬁer ob-
fuscation is very large even for large values of sq (very
close to 1); we observed that number of lookup retries is
almost zero and seldom exceeds one; we found that the
size of the sieved range is too large to attempt a brute
force attack even if ﬁle accesses over one full year were
logged. Finally, our experimental results very closely
match the analytical results shown in Table 1. For more
details on our experimental results refer to our tech-report
[23].
10 Related Work
Serverless distributed ﬁle systems like CFS [7], Farsite
[1], OceanStore [15] and SiRiUS [10] have received sig-
niﬁcant attention from both the industry and the research
community. These ﬁle systems store ﬁles on a large
collection of untrusted nodes that form an overlay net-
work. They use cryptographic techniques to ensure ﬁle
data conﬁdentiality and integrity. Unfortunately, crypto-
graphic techniques cannot protect a ﬁle holder from DoS
or host compromise attacks. LocationGuard presents
low overhead and highly effective techniques to guard
94
14th USENIX Security Symposium
USENIX Association
ρ
Re-keying Interval
0.5
0
1.0
0
1.1
0.43
1.2
1.8
1.5
4.5
3.0
6.6
Table 3: Time Interval between Location Re-Keying (normalized by 1
λ
time units)
a distributed ﬁle system from such targeted ﬁle attacks.
The secure Overlay Services (SOS) paper [13] de-
scribes an architecture that proactively prevents DoS at-
tacks using secure overlay tunneling and routing via con-
sistent hashing. However, the assumptions and the appli-
cations in [13] are noticeably different from that of ours.
For example, the SOS paper uses the overlay network
for introducing randomness and anonymity into the SOS
architecture to make it difﬁcult for malicious nodes to at-
tack target applications of interest. LocationGuard tech-
niques treat the overlay network as a part of the target
applications we are interested in and introduce random-
ness and anonymity through location key based hashing
and lookup based ﬁle identiﬁer obfuscation, making it
difﬁcult for malicious nodes to target their attacks on a
small subset of nodes in the system, who are the replica
holders of the target ﬁle of interest.
The Hydra OS [6], [22] proposed a capability-based
ﬁle access control mechanism. LocationGuard can be
viewed as an implementation of capability-based access
control on a wide-area network. The most important
challenge for LocationGuard is that of keeping a ﬁle’s
capability secret and yet being able to perform a lookup
on it (see Section 6).
Indirect attacks such as attempts to compromise cryp-
tographic keys from the system administrator or use fault
attacks like RSA timing attacks, glitch attacks, hard-
ware and software implementation bugs [5] have been
the most popular techniques to attack cryptographic al-
gorithms. Similarly, attackers might resort to inference
attacks on LocationGuard since a brute force attack (even
with range sieving) on location keys is highly infeasi-
ble. Due to space restrictions we have not been able
to include location inference guards in this paper. For
details on location inference guards, refer to our tech-
report [23].
11 Conclusion
In this paper we have proposed LocationGuard for se-
curing wide area serverless ﬁle sharing systems from
targeted ﬁle attacks. Analogous to traditional crypto-
graphic keys that hide the contents of a ﬁle, LocationGuard
hide the location of a ﬁle on an overlay network. Lo-
cationGuard retains traditional cryptographic guarantees
like ﬁle data conﬁdentiality and integrity. In addition,
LocationGuard guards a target ﬁle from DoS and host
compromise attacks, provides a simple and efﬁcient ac-
cess control mechanism and adds minimal performance
and storage overhead to the system. We presented exper-
imental results that demonstrate the effectiveness of our
techniques against targeted ﬁle attacks. In conclusion,
LocationGuard mechanisms make it possible to build
simple and secure wide-area network ﬁle systems.
Acknowledgements
This research is partially supported by NSF CNS,
NSF ITR, IBM SUR grant, and HP Equipment Grant.
Any opinions, ﬁndings, and conclusions or recommen-
dations expressed in the project material are those of the
authors and do not necessarily reﬂect the views of the
sponsors.
References
[1] A. Adya, W. Bolosky, M. Castro, G. Cermak,
R. Chaiken, J. R. Douceur, J. Howell, J. R. Lorch,
M. Theimer, and R. P. Wattenhofer. Farsite: Fed-
erated, available and reliable storage for an incom-
pletely trusted environment. In Proceedings of the
5th International Symposium on OSDI, 2002.
[2] I. R. Archives.
RFC 2131:
namic
http://www.faqs.org/rfcs/rfc2131.html.
conﬁguration
host
Dy-
protocol.
[3] J. K. B. Zhao and A. Joseph. Tapestry: An in-
frastructure for fault-tolerance wide-area location
and routing. Technical Report UCB/CSD-01-1141,
University of California, Berkeley, 2001.
[4] E. Biham. How to decrypt or even substitute DES-
In Information
encrypted messages in 228 steps.
Processing Letters, 84, 2002.
USENIX Association
14th USENIX Security Symposium
95
[5] D. Boneh and D. Brumley. Remote timing attacks
are practical. In Proceedings of the 12th USENIX
Security Symposium, 2003.
[6] E. Cohen and D. Jefferson. Protection in the hydra
operating system. In Proceeding of the ACM Sym-
posium on Operating Systems Principles, 1975.
[7] F. Dabek, M. F. Kaashoek, D. Karger, R. Morris,
and I. Stoica. Wide-area cooperative storage with
CFS. In Proceedings of the 18th ACM SOSP, Oc-
tober 2001.
[8] FIPS.
Data
encryption standard (DES).
[18] PGP. Pretty good privacy. http://www.pgp.com/.
[19] S. Ratnasamy, P. Francis, M. Handley, R. Karp, and
S. Shenker. A scalable content-addressable net-
work. In Proceedings of SIGCOMM Annual Con-
ference on Data Communication, Aug 2001.
[20] A. Rowstron and P. Druschel. Pastry: Scalable,
distributed object location and routing for large-
scale peer-to-peer systems.
In Proceedings of
the 18th IFIP/ACM International Conference on
Distributed Systems Platforms (Middleware 2001),
Nov 2001.
http://www.itl.nist.gov/ﬁpspubs/ﬁp46-2.htm.
[21] RSA.
RSA
cryptography
key
http://www.rsasecurity.com/rsalabs/pkcs/.
standards
security
-
public-
(pkcs).
[9] Gnutella.
The
gnutella
home
page.
http://gnutella.wego.com/.
[10] E. J. Goh, H. Shacham, N. Modadugu, and
D. Boneh. SiRiUS: Securing remote untrusted stor-
age. In Proceedings of NDSS, 2003.
[11] H. Harney and C. Muckenhirn.
(GKMP)
management
http://www.rfc-archive.org/getrfc.php?rfc=2094.
Group key
architecture.
protocol
[12] T. Jaeger and A. D. Rubin. Preserving integrity in
remote ﬁle location and retrieval. In Proceedings
of NDSS, 1996.
[13] A. Keromytis, V. Misra, and D. Rubenstein. SOS:
In Proceedings of the
Secure overlay services.
ACM SIGCOMM, 2002.
[14] H.
M.
Bellare,
Krawczyk,
and
RFC 2104 - HMAC: Keyed-
authentication.
R. Canetti.
hashing
http://www.faqs.org/rfcs/rfc2104.html.
message
for
[15] J. Kubiatowics, D. Bindel, Y. Chen, S. Czerwin-
ski, P. Eaton, D. Geels, R. Gummadi, S. Rhea,
H. Weatherspoon, W. Weimer, C. Wells, and
B. Zhao. OceanStore: An architecture for global-
scale persistent storage. In Proceedings of the 9th
International Conference on Architectural Support
for Programming Languages and Operating Sys-
tems, November 2000.
[16] NIST.
AES: Advanced encryption standard.
http://csrc.nist.gov/CryptoToolkit/aes/.
[17] OpenSSL. OpenSSL: The open source toolkit for
ssl/tls. http://www.openssl.org/.
[22] J. S. Shapiro, J. M. Smith, and D. J. Farber. EROS:
A fast capability system.
In Proceedings of 17th
ACM Symposium on Operating Systems Principles,
1999.
[23] M. Srivatsa and L. Liu. Countering targeted ﬁle at-
tacks using location keys. Technical Report GIT-
CERCS-04-31, Georgia Institute of Technology,
2004.
[24] M. Srivatsa and L. Liu. Vulnerabilities and security
issues in structured overlay networks: A quantita-
tive analysis. In Proceedings of the Annual Com-
puter Security Applications Conference (ACSAC),
2004.
[25] I. Stoica, R. Morris, D. Karger, M. Kaashoek,
and H. Balakrishnan. Chord: A scalable peer-to-
peer lookup service for internet applications.
In
Proceedings of SIGCOMM Annual Conference on
Data Communication, August 2001.
[26] M. World.
The
http://www.mathworld.com.
caesar
cipher.
[27] L. Xiong and L. Liu.
Peertrust: Supporting
reputation-based trust for peer-to-peer electronic
communities. In Proceedings of IEEE TKDE, Vol.
16, No. 7, 2004.
96
14th USENIX Security Symposium
USENIX Association