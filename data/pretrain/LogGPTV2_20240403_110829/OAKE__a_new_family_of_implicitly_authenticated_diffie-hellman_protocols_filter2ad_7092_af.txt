Informally speaking, the underlying rationale of N M JP OK(b;y) is: given a random challenge X, no
matter how a malicious ˆB chooses the values Y = gy and B = gb (where the values y and b can be
arbitrarily correlated), it actually has no control over the values db and ey in the RO model. Speciﬁcally,
for each given complete session tag and arbitrary ((cid:11); (cid:12)) ∈ (G\ 1G)2 the probability of F0 = (cid:11) or F1 = (cid:12)
2
2l−1 , and suppose the malicious prover works in T = poly(l) time, then by the birthday
is at most
paradox the probability that there exist a session in which F0 = (cid:11) or F1 = (cid:12) is at most 2T 2
2l−1 , which is
still negligible in l. Alternatively speaking, given a random challenge X, (by the birthday paradox) it
is infeasible for a malicious ˆB to output B = gb and Y = gy such that the values db and ey satisfy some
predetermined (polynomial-time computable) relation with non-negligible probability in the RO model.
The situation with sN M JP OK(b;y) is a bit diﬀerent. Though as in N M JP OK(b;y), the malicious
prover ˆB is infeasible to set ey to a predetermined value, ˆB can always set the value db = b at its wish
as d = 1 for sN M JP OK(b;y). But, ˆB is still infeasible to set the value b correlated to ey = h(B; X; Y )y,
particularly because the value B is put into the input of (i.e., commits to) e. Speciﬁcally, for any value B
(that determines the value b) set by ˆB, with the goal of making b and ey correlated, the probability that
the values ey = h(B; X; Y )y and b satisfy some predetermined (polynomial-time computable) relation
is negligible in the RO model (again by the birthday paradox). In particular, by the birthday paradox,
the probability that Pr[b = f (ey)] or Pr[f (b) = ey], where f is some predetermined polynomial-time
computable function (that is in turn determined by some predetermined polynomial-time computable
relation), is negligible in the RO model, no matter how the malicious ˆB does.
Outside Non-Malleability. As JPOK may be composed with other protocols in practice, another
principle is that the JPOK provided by one party in a session should be bounded to that session, in
the sense that the JPOK should not be malleated into or from other sessions. This is captured by the
following deﬁnition, which particularly implies the property of “key control” [45] for DHKE.
Deﬁnition C.2 (tag-binding self-seal (TBSS)) For a DH protocol in the RO model, denote by ZT ag
the random variable of the shared DH-secret in G (say, JPOK or session-key) determined by a complete
session-tag T ag (taken over the choice of the random function h in the RO model). We say it is tag-
2l ) where l is the
security parameter. The probability is taken over the choice of the random function h in the RO model.
binding self-sealed, if for any (cid:11) ∈ G \ 1G and any complete T ag, Pr[ZT ag = (cid:11)] ≤ O( 1
The deﬁnition of TBSS particularly implies that: given an arbitrary yet complete session-tag T ag,
by the birthday paradox no eﬃcient (polynomial-time) algorithm can, with non-negligible probability,
output a diﬀerent T ag
model assuming h is a random function. In more detail, by the birthday paradox, the probability that
′ ̸= T ag such that ZT ag′ and ZT ag collide in the sense ZT ag′ = ZT ag in the RO
18
2l ),
an eﬃcient algorithm ﬁnds two colliding tags (T ag; T ag
where T = poly(l) is the running time of the algorithm. In a sense, the DH-secret determined by a
complete session-tag is “bounded” to this speciﬁc session, and is essentially “independent” of the outside
world composed concurrently with the current session. In particular, the shared DH-secret is random
and unpredictable.
) such that ZT ag = ZT ag′ is bounded by O( T 2
′
TBSS vs. contributiveness. The work [2] introduced the notion of “contributiveness” property for
password-authenticated group key exchange protocols, which roughly says that the distributions of
session-keys are guaranteed to be random, as long as there are enough honest players in a session. We
noted that our TBSS deﬁnition, originally presented in [66, 67] independently of [2], has similar security
guarantee. As we shall see, (H)MQV lacks the TBSS property by the EDA attacks presented in Section
5, which implies also that the TBSS property is not captured by the CK-framework.
We say that JP OK(b;y) is a non-malleable joint proof-of-knowledge (NMJPOK), of the knowledges
(b; y) w.r.t. the random DH-component challenge X, if JP OK(b;y) satisﬁes both the above two principles.
Remark: The TBSS property simpliﬁes the analysis of (s,r)OAKE in the CK-framework. The com-
putational independence property is not directly used in the analysis in the CK-framework, but it
(together with the TBSS property) is fundamental to security beyond the CK-framework as discussed
in detail in Section 5 and Appendix H.
Preferable candidates for NMJPOK. Guided by the above principles, we propose two preferable
solutions for NMJPOK in the RO model:
• Self-sealed JPOK (SSJPOK): SSJP OK(b;y) = X db+ey, where d = h( ˆA; ˆB; B; X) and e = h(X; Y );
Speciﬁcally, aux0 = { ˆA; ˆB; B; X} and aux1 = {X; Y }, F0 = f h
0 (X b; aux0) = X bh(aux0) and
q is a hash function and l ≈ |q|
1 (X y; aux1) = X yh(aux1). Here, h : {0; 1}∗ → {0; 1}l=0 ⊆ Z
∗
F1 = f h
(in the unlikely case that h(x) = 0 for some x, the output of h(x) can be deﬁned by default to be
a value in Z
• Single-hash SSJPOK (sSSJPOK): sSSJP OK(b;y) = X db+ey, where d = 1 and e = h( ˆA; ˆB; B; X; Y );
Speciﬁcally, aux0 is empty and aux1 = { ˆA; ˆB; B; X; Y }, F0 = f h
0 (X b; aux0) = X b and F1 =
f h
1 (X y; aux1) = X yh(aux1).
\ {0; 1}l).
∗
q
solutions enjoy the following advantageous properties, which make them more desirable:
Needless to say, there may possibly be other NMJPOK candidates, but the above explicitly proposed
• Post-ID, modular and oﬄine computability of SSJPOK. Speciﬁcally, as the input of e does not
include ˆA’s identity and public-key, ˆA can ﬁrst send X without revealing its identity information.
In this case, ˆB can ﬁrst compute X ey, and then X db only after learning ˆA’s identity and public-key.
Also, without inputting Y into d allows ˆA to pre-compute Bdx(= X db) prior to the protocol run.
• sSSJPOK is preferable because of its oﬄine computability, more eﬃcient computational complexity
and the less use of hash function h.
It is quite straightforward to check that, in the RO model, SSJPOK (resp., sSSJPOK) satisﬁes
self-sealed (resp., committed) computational independence, and both of them are tag-binding self-
sealed. In more details, for SSJPOK, for any given values (B; Y ) (which determine (b; y)) output by
a malicious prover ˆB and any value ˆ(cid:12) ∈ Z
∗
q Pr[db = ˆ(cid:12)] (resp., Pr[ey = ˆ(cid:12)]) is constant: either 0 or
2l−1 in the RO model (no matter how a malicious prover ˆB does). The committed computational
independence of sSSJPOK is from the observation: {X; B} (that determines F0 = X b) are committed
to F1 = X yh(aux1) in the RO model as {X; B} ⊆ aux1. The TBSS property of (s)SSJPOK can be
1
derived by a straightforward calculation. Proof details that (s)SSJPOK are NMJPOK in the RO model
are given below.
Proposition C.1 SSJPOK is NMJPOK in the RO Model.
Proof. We ﬁrst prove the self-sealed computational independence of SSJPOK in the RO model. Note
that for SSJPOK, F0 = X db = X h( ^A; ^B;B;Y )b and F1 = X ey = X h(X;Y )y, where b; y; x ← Z
∗
q . For
any given challenge X ∈ G \ 1G, each pair of values (B = gb; Y = gy) ∈ (G \ 1G)2 (that determine
19
q )2) and any pair of given values (cid:11) = g ^(cid:11); (cid:12) = g ^(cid:12) ∈ (G\1G)2, where ˆ(cid:11); ˆ(cid:12) ∈ Z
∗
(b; y) ∈ (Z
∗
q , we consider the
set of values that F0 can be assigned in the RO model SF0 = {X db|0 ≤ d = h( ˆA; ˆB; B; Y ) ≤ 2l − 1} and
also the set of values that F1 can be assigned in the RO model SF1 = {X ey|0 ≤ e = h(X; Y ) ≤ 2l − 1}.
If (cid:11) ̸∈ SF0 or d = 0 (resp., (cid:12) ̸∈ SF1 or e = 0), then we have Pr[F0 = (cid:11)] = 0 (resp., Pr[F1 = (cid:12)] = 0).
If (cid:11) ∈ SF0 (resp., (cid:12) ∈ SF1), then we have Pr[F0 = (cid:11)] = 1
2l−1 ) in the RO
model. As the malicious prover ˆB is polynomial-time, we have that, no matter the polynomial-time
malicious ˆB does on a challenge X, the probability that it outputs B; Y such that F0 = (cid:11) and F1 = (cid:12)
is negligible. Speciﬁcally, suppose N = 2l − 1 and T = poly(l) is the running time of ˆB, by the birthday
paradox the probability that on input (X; (cid:11); (cid:12)) the malicious ˆB outputs (B; Y ) such that F0 = (cid:11) or
F1 = (cid:12) is at most T (T−1)
2l−1 (resp., Pr[F1 = (cid:12)] = 1
that is negligible (in l).
Next we prove the TBSS property of SSJPOK in the RO model, which is based on and can be
easily derived from the NMJPOK property of OAKE. For a complete session of SSJP OK, its tag is:
T ag = ( ˆA; ˆB; B = gb; X = gx; Y = gy), where b; x; y ∈ Z
∗
q , we consider the value ZT ag = X db+ey =
X h( ^A; ^B;B;Y )b · X h(X;Y )y in the RO model where h is assumed to be a random oracle. As for each value
(cid:11) ∈ G \ 1G, Pr[X h( ^A; ^B;B;Y )b = (cid:11)] ≤ 1
2l−1 in the RO model, we get (by
straightforward calculation) that Pr[ZT ag = (cid:11)] ≤ O( 1
(cid:3)
2l ).
2l−1 and Pr[X h(X;Y )y = (cid:11)] ≤ 1
2N
Proposition C.2 sSSJPOK is NMJPOK in the RO model.
Proof. We ﬁrst show the committed computational independence property of sSSJPOK. Similar to
the analysis of Proposition C.1, for the case (cid:14) = 1 we have that for any given (cid:11) ∈ G \ 1G and any DH-
component challenge X, and any (B; Y ) ∈ (G \ 1G)2, Pr[F(cid:14) = X yh(aux1) = X yh( ^A; ^B;B;X;Y ) = (cid:11)] ≤ 1
2l−1
in the RO model, where (cid:14) = 1. As the malicious ˆB is polynomial-time, we have the probability that
the malicious ˆB outputs (B; Y ), given a random challenge X and a given value (cid:11) ∈ G \ 1G, such that
F1 = (cid:11) is negligible in the RO model.4 Then, the committed computational independence of sSSJPOK
is from the following observation that X b is committed to X yh( ^A; ^B;B;X;Y ). Speciﬁcally,
1 (Z1; aux1) = f h
• S1−(cid:14) = S0 = {X; B} ⊆ aux(cid:14) = aux1 = { ˆA; ˆB; B; X; Y }. Note that the value F0 = Z0 = X b (resp.,
1 (X y; aux1) = X yh(aux1) = X yh( ^A; ^B;B;X;Y )) is determined by S0 = {X; B}
F1 = f h
(resp., aux1 = { ˆA; ˆB; B; X; Y }), and aux0 is empty for sSSJPOK.
• Given Z(cid:14) = Z1 = X y and aux(cid:14) = aux1 = { ˆA; ˆB; B; X; Y }, for any B
′
′
0 =
{X; B
′
1)] = Pr[X yh( ^A; ^B;B;X;Y ) =
1 (Z1; aux
X yh( ^A; ^B;B
2l−1 . Thus for any polynomial-time algorithm, the probability that it, on in-
′} for B
;X;Y ) is
put Z1; aux1, outputs S
negligible (again by the birthday paradox).
1 (Z1; aux1) = f h
̸= B such that X yh( ^A; ^B;B;X;Y ) = X yh( ^A; ^B;B
1 = { ˆA; ˆB; B
′
0 = {X; B
′
; X; Y }, we get Pr[f h
̸= B such that S
′} ⊆ aux
′
;X;Y )] ≤ 1
′
′
′
Next, we show the TBSS property of sSSJPOK in the RO model, which is based on and can be easily
derived from the NMJPOK property of sSSJPOK. For the tag T ag = ( ˆA; ˆB; B; X; Y ) of a complete
session of sSSJPOK, we consider the value ZT ag = X b+yh( ^A; ^B;B;X;Y ) = X b · X yh( ^A; ^B;B;X;Y ). No matter
what value X b is, for any value (cid:11) ∈ G \ 1G we have Pr[X yh( ^A; ^B;B;X;Y ) = (cid:11)] ≤ 1
2l−1 in the RO model.
Thus, for any value (cid:11) ∈ G \ 1G we have also that Pr[ZT ag = (cid:11)] ≤ 1
(cid:3)
2l−1 = O( 1
2l ).
D More Variants of (s,r)OAKE
One-round OAKE (oOAKE): The player ˆA sends X = gx to ˆB. Normally, ˆA is a client machine
and ˆB is a server machine. Let K ^A = Ba+ex and K ^B = AbX eb, where e = h( ˆA; A; ˆB; B; X) and the
session-key is K = HK(K ^A) = HK(K ^B). For oOAKE, it is also recommend to set the output length
4Speciﬁcally, by the birthday paradox, the probability is at most O( T 2
2l ), where T = poly(l) is the running time of ˆB.
20
of h to be shorter, e.g., |q|=2, to ease the computation of K ^B = AbX eb = (AX e)b in some application
scenarios (e.g., when the pre-computation of Ab is inconvenient).
Note that the computational complexity of ˆA is 2 exponentiations in total and all the computation
of ˆA can be oﬄine. To improve the on-line eﬃciency of ˆB, the player ˆB can pre-compute Ab in an
oﬀ-line way (and store it in a database entry corresponding to the client ˆA), and only on-line computes
X eb and X q which amounts to about 1.2 exponentiations (it is recommended for ˆB to explicitly check
the subgroup membership of X). In case of embedded subgroup test, ˆB should explicitly check X ∈ G
′
and X ebt ̸= 1G (only checking K ^B
̸= 1G is not suﬃcient to prevent the small subgroup attack). We
remind that oOAKE intrinsically suﬀers from the key compromise impersonation (KCI) vulnerability in
case ˆB’s static secret-key b is compromised, and lacks perfect forward secrecy (the same vulnerabilities
hold also for one-round variant of HMQV).
Adding (explicit) mutual authentication. For adding mutual authentication to (s,r)OAKE,
besides the session-key K we also need a MAC-key Km to be used within the protocol run (but erased
after the protocol run). Both the session-key and MAC-key are derived from the shared DH-secret K ^A =