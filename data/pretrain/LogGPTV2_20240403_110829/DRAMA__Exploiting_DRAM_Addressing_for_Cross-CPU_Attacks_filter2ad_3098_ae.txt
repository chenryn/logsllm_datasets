The exploitable address in the shared library was found
in a cache template attack. We computed the physical
address and thus bank and row of the exploitable address
using privileged operating services. Then we allocated
large arrays to obtain memory that maps to the same row
(and bank). This allows us to perform an attack that has
only minimal differences to a Flush+Reload attack.
During this attack, our spy tool detected 1 false pos-
itive row hit and 1 false negative row hit. Running
stress -m 1 in parallel, which allocates and accesses
large memory buffers, causes a high number of cache
misses, but did not introduce a significant amount of
noise. In this experiment the spy tool detected no false
positive row hits and 4 false negative row hits. Running
stress -m 2 in parallel (i.e., the attacker’s core is un-
der stress) made any measurements impossible. While
no false positive detections occurred, only 9 events were
USENIX Association  
25th USENIX Security Symposium  577
13
Row hits Cache hits
s
e
s
a
c
f
o
r
e
b
m
u
N
60
40
20
0
1
2
3
Address
4
5
·105
Figure 13: Comparison of a cache hits and row hits over
the virtual memory where the gedit binary is mapped,
measured on our Ivy Bridge i5 test system.
correctly detected. Thus, our attack is susceptible to
noise especially if the attacker only gets a fraction of
CPU time on its core.
In the second attack we compared the cache side chan-
nel and the DRAM side channel in a template attack
on keystrokes in gedit. Figure 13 shows the number of
cache hits and row hits over the virtual memory where
the gedit binary is mapped. Row hits occur in spatial
proximity to the cache hits and at shifted offsets due to
the DRAM address mappings.
6.3 Comparison with state of the art
We now compare DRAMA side-channel attacks with
same-CPU cache attacks such as Flush+Reload and
Prime+Probe, as well as with cross-CPU cache at-
tacks [11]. Our attack is the first to enable monitoring
non-shared memory cross-CPU with a reasonably high
spatial accuracy and a timing accuracy that is comparable
to Flush+Reload. This allows the development of new at-
tacks on programs using dynamically allocated or private
memory.
The spatial accuracy of the DRAMA side-channel at-
tack is significantly higher than that of a Prime+Probe
attack, which also does not necessitate shared memory,
and only slightly lower than that of a Flush+Reload at-
tack in most cases. Our Ivy Bridge i5 system has 8 GB
DRAM and a 3 MB L3 cache that is organized in 2 cache
slices with each 2048 cache sets. Thus, in a Prime+Probe
attack 32768 memory lines map to the same cache set,
whereas in our DRAMA side-channel attack, on the
same system, only 32 memory lines map to the same
row. The spatial accuracy strongly depends on the sys-
tem. On our Haswell-EP system only 8 memory lines
map to the same row whereas still 32768 memory lines
map to the same cache set. Thus, on the Haswell-EP sys-
tem the advantage of DRAMA side-channel attacks over
Prime+Probe is even more significant.
To allocate memory lines that are in the same row as
victim memory lines, it is necessary to allocate signifi-
cantly larger memory buffers than in a cache attack like
Prime+Probe. This is a clear disadvantage of DRAMA
side-channel attacks. However, DRAMA side-channel
attacks have a very low probability of false positive row
hit detections, whereas Prime+Probe is highly suscep-
tible to noise. Due to this noise, monitoring singular
events using Prime+Probe is extremely difficult.
Irazoqui et al. [11] presented cache-based cross-CPU
side-channel attacks. However,
their work requires
shared memory. Our approach works without shared
memory. Not only does this allow cross-CPU attacks in
highly restricted environments, it also allows to perform
a new kind of cross-core attack within one system.
7
Improving attacks
In this section, we describe how the DRAM addressing
functions can be used to improve the accuracy, efficiency,
and success rate of existing attacks.
Flush+Reload. The first
step when performing
Flush+Reload attacks is to compute a cache-hit thresh-
old, based on a histogram of cache hits and cache misses
(memory accesses). However, as we have shown (cf.
Figure 1) row hits have a slightly lower access time
than row conflicts. To get the best performance in a
Flush+Reload attack it is necessary to take row hits and
conflicts into account. Otherwise, if a process accesses
any memory location in the same row, a row hit will be
misclassified as a cache hit. This introduces a significant
amount of noise as the spatial accuracy of a cache hit
is 64 bytes and the one of a row hit can be as low as
8 KB, depending on how actively the corresponding
pages of the row are used. We found that even after a
call to sched yield a row hit is still observed in 2%
of the cases on a Linux system that is mostly idle. In a
Flush+Reload attack the victim computes in parallel and
thus the probability then is even higher than 2%. This
introduces a significant amount of noise especially for
Flush+Reload attacks on low-frequency events. Thus,
the accuracy of Flush+Reload attacks can be improved
significantly taking row hits into account for the cache
hit threshold computation.
Rowhammer. In a Rowhammer attack, an adversary
tries to trigger bit flips in DRAM by provoking a high
number of row switches. The success rate and efficiency
of this attack benefit greatly from knowing the DRAM
mapping, as we now demonstrate.
In order to cause row conflicts, one must alternately
access addresses belonging to the same bank, but differ-
ent row. The probability that 2 random addresses ful-
fill this criterion is 2−B, where B is the total number of
578  25th USENIX Security Symposium 
USENIX Association
14
bank-addressing bits (this includes all bits for channel,
rank, etc.). For instance, with the dual-channel DDR4
configuration shown in Figure 4c this probability is only
2−6 = 1/64. By hammering a larger set of addresses,
the probability of having at least two targeting the same
bank increases. However, so does the time in between
row switches, thus the success rate decreases.
The most efficient way of performing the Rowham-
mer attack is double-sided hammering. Here, one tries
to cause bit flips in row n by alternatingly accessing the
adjacent rows n− 1 and n + 1, which are most likely also
adjacent in physical memory. The most commonly ref-
erenced implementation of the Rowhammer attack, by
Seaborn and Dullien [24], performs double-sided ham-
mering by making assumptions on, e.g., the position of
the row-index bits. If these are not met, then their imple-
mentation does not find any bit flips. Also, it needs to test
multiple address combinations as it does not use knowl-
edge of the DRAM addressing functions. We tested
their implementation on a Skylake machine featuring
G.SKILL F4-3200C16D-16GTZB DDR4 memory at the
highest possible refresh interval, yet even after 4 days of
nonstop hammering, we did not detect any bit flips.
By using the DRAM addressing functions we can
immediately determine whether two addresses map to
the same bank. Also, we can very efficiently search
for pairs allowing double-sided hammering. After tak-
ing the reverse-engineered addressing functions into ac-
count, we successfully caused bit flips on the same Sky-
lake setup within minutes. Running the same attack on a
Crucial DDR4-2133 memory module running at the de-
fault refresh interval, we observed the first bit flip af-
ter 16 seconds and subsequently observed on average
one bit flip every 12 seconds. Although the LPDDR4
standard includes target row refresh (TRR) as an op-
tional countermeasure against the Rowhammer attack,
the DDR4 standard does not. Still, some manufactur-
ers include it in their products as a non-standard feature.
For both DDR4 and LPDDR4, both the memory con-
troller and the DRAM must support this feature in order
to provide any protection. To the best of our knowledge,
both our Haswell-EP test system and the Crucial DDR4-
2133 memory module, with Micron DRAM chips, sup-
port TRR [10, 17]. However, we are still able to repro-
ducibly trigger bit flips in this configuration.
8 Countermeasures
Defending against row buffer attacks is a difficult task.
Making the corresponding DRAM operations constant
time would introduce unacceptable performance degra-
dation. However, as long as the timing difference exists
and can be measured, the side channel cannot be closed.
Our attack implementations use the unprivileged
clflush instruction in order to cause a DRAM access
with every memory request. Thus, one countermeasure
might be to restrict said operation. However, this requires
architectural changes and an attacker can still use evic-
tion as a replacement. The additional memory accesses
caused by eviction could make our row-buffer covert
channel impractical. However, other attacks such as the
fully automated reverse engineering or our row-hit side-
channel attack are still possible. Restricting the rdtsc
instruction would also not prevent an attack as other tim-
ing sources can be used as replacement.
To prevent cross-VM attacks on multi-CPU cloud sys-
tems, the cloud provider could schedule each VM on a
dedicated physical CPU and only allow access to CPU-
local DRAM. This can be achieved by using a non-
interleaved NUMA configuration and assigning pages
to VMs carefully. This approach essentially splits a
multi-CPU machine into independent single-CPU sys-
tems, which leads to a loss of many of its advantages.
Saltaformaggio et al. [21] presented a countermeasure
to the memory bus-based covert channel of Wu et al..
It intercepts atomic instructions that are responsible for
this covert channel, so that only cores belonging to the
attacker’s VM are locked, instead of the whole machine.
This countermeasure is not effective against our attacks
as they do not rely on atomic instructions.
Finally, our attack could be detected due to the
high number of cache misses. However, it is unclear
whether it is possible to distinguish our attacks from non-
malicious applications.
9 Conclusion
In this paper, we presented two methods to reverse en-
gineer the mapping of physical memory addresses to
DRAM channels, ranks, and banks. One uses physical
probing of the memory bus, the other runs entirely in
software and is fully automated. We ran our method on
a wide range of architectures, including desktop, server,
and mobile platforms.
Based on the reverse-engineered functions, we demon-
strated DRAMA (DRAM addressing) attacks. This novel
class of attacks exploits the DRAM row buffer that is a
shared resource in single and multi-processor systems.
This allows our attacks to work in the most restrictive
environments, i.e., across processors and without any
shared memory. We built a covert channel with a ca-
pacity of 2 Mbps, which is three to four orders of mag-
nitude faster than memory-bus-based channels in the
same setting. We demonstrated a side-channel template
attack automatically locating and monitoring memory
accesses, e.g., user input, server requests. This side-
channel attack is as accurate as recent cache attacks like
USENIX Association  
25th USENIX Security Symposium  579
15
Flush+Reload, while requiring no shared memory be-
tween the victim and the spy. Finally, we show how to
use the reverse-engineered DRAM addressing functions
to improve existing attacks, such as Flush+Reload and
Rowhammer. Our work enables practical Rowhammer
attacks on DDR4.
We emphasize the importance of reverse engineering
microarchitectural components for security reasons. Be-
fore we reverse engineered the DRAM address mapping,
the DRAM row buffer was transparent to operating sys-
tem and software. Only by reverse engineering we made
this shared resource visible and were able to identify it
as a powerful side channel.
Acknowledgments
We would like to thank our anonymous reviewers as well
as Anders Fogh, Moritz Lipp, and Mark Lanteigne for
their valuable comments and suggestions.
Supported by the EU FP7 programme under GA No.
610436 (MATTHEW) and the Austrian Research Promo-
tion Agency (FFG) under grant number 845579 (MEM-
SEC).
References
[1] ADVANCED MICRO DEVICES. BIOS and Kernel Developer’s
Guide (BKDG) for AMD Family 15h Models 00h-0Fh Pro-
cessors, 2013. URL: http://support.amd.com/TechDocs/
42301_15h_Mod_00h-0Fh_BKDG.pdf.
[2] BENGER, N., VAN DE POOL, J., SMART, N. P., AND YAROM,
Y. “Ooh Aah... Just a Little Bit” : A small amount of side channel
can go a long way. In Proceedings of the 16th Workshop on Cryp-
tographic Hardware and Embedded Systems (CHES’14) (2014),
pp. 75–92.
[3] GRUSS, D., BIDNER, D., AND MANGARD, S. Practical Mem-
ory Deduplication Attacks in Sandboxed JavaScript. In Proceed-
ings of the 20th European Symposium on Research in Computer
Security (ESORICS’15) (2015).
[4] GRUSS, D., MAURICE, C., AND MANGARD, S. Rowham-
mer.js: A Remote Software-Induced Fault Attack in JavaScript.
In DIMVA’16 (2016).
[5] GRUSS, D., MAURICE, C., WAGNER, K., AND MANGARD, S.
Flush+Flush: A Fast and Stealthy Cache Attack. In DIMVA’16
(2016).
[6] GRUSS, D., SPREITZER, R., AND MANGARD, S. Cache
Template Attacks: Automating Attacks on Inclusive Last-Level
Caches. In 24th USENIX Security Symposium (USENIX Security
15) (2015), USENIX Association.
[7] HASSAN, M., KAUSHIK, A. M., AND PATEL, H. Reverse-
engineering embedded memory controllers through latency-
In Real-Time and Embedded Technology and
based analysis.
Applications Symposium (RTAS), 2015 IEEE (2015),
IEEE,
pp. 297–306.
[9] INCI, M. S., GULMEZOGLU, B., IRAZOQUI, G., EISENBARTH,
T., AND SUNAR, B. Seriously, get off my cloud! Cross-VM
RSA Key Recovery in a Public Cloud. Cryptology ePrint Archive,
Report 2015/898 (2015), 1–15.
[10] INTEL CORPORATION. Intel R(cid:31) Xeon R(cid:31) Processor E5 v3 Product
Family – Processor Speciﬁcation Update. No. 330785-009US.
Aug. 2015.
[11] IRAZOQUI, G., EISENBARTH, T., AND SUNAR, B. Cross pro-
cessor cache attacks. In Proceedings of the 11th ACM Symposium
on Information, Computer and Communications Security (2016),
ASIA CCS ’16, ACM.
[12] IRAZOQUI, G., INCI, M. S., EISENBARTH, T., AND SUNAR, B.
Wait a minute! A fast, Cross-VM attack on AES. In Proceed-
ings of the 17th International Symposium on Research in Attacks,
Intrusions and Defenses (RAID’14) (2014).
[13] KIM, Y., DALY, R., KIM, J., FALLIN, C., LEE, J. H., LEE,
D., WILKERSON, C., LAI, K., AND MUTLU, O. Flipping bits
in memory without accessing them: An experimental study of
DRAM disturbance errors. In International Symposium on Com-
puter Architecture – ISCA (2014), pp. 361–372.
[14] LIU, F., YAROM, Y., GE, Q., HEISER, G., AND LEE, R. B.
Last-Level Cache Side-Channel Attacks are Practical.
In Pro-
ceedings of the 36th IEEE Symposium on Security and Privacy
(S&P’15) (2015).
[15] MAURICE, C., LE SCOUARNEC, N., NEUMANN, C., HEEN,
O., AND FRANCILLON, A. Reverse Engineering Intel Last-
Level Cache Complex Addressing Using Performance Counters.
In Proceedings of the 18th International Symposium on Research
in Attacks, Intrusions and Defenses (RAID’15) (2015).
[16] MAURICE, C., NEUMANN, C., HEEN, O., AND FRANCILLON,
A. C5: Cross-Cores Cache Covert Channel. In Proceedings of
the 12th International Conference on Detection of Intrusions and
Malware, and Vulnerability Assessment (DIMVA’15) (July 2015).
[17] MICRON. DDR4 SDRAM. https://www.micron.com/~/
media/documents/products/data-sheet/dram/ddr4/
4gb_ddr4_sdram.pdf, 2014. Retrieved on February 17, 2016.
[18] PARK, K., BAEG, S., WEN, S., AND WONG, R. Active-
Precharge Hammering on a Row Induced Failure in DDR3
SDRAMs under 3x nm Technology. In Proceedings of the 2014
IEEE International Integrated Reliability Workshop Final Report
(IIRW’14) (2014), pp. 82–85.
[19] PERCIVAL, C.
Cache Missing for Fun and Profit,
2005. URL: http://daemonology.net/hyperthreading-
considered-harmful/.
[20] RISTENPART, T., TROMER, E., SHACHAM, H., AND SAVAGE,
S. Hey, You, Get Off of My Cloud: Exploring Information Leak-
age in Third-Party Compute Clouds.
In ACM Conference on
Computer and Communications Security – CCS (2009), ACM,
pp. 199–212.
[21] SALTAFORMAGGIO, B., XU, D., AND ZHANG, X. BusMonitor:
A Hypervisor-Based Solution for Memory Bus Covert Channels.
In Proceedings of the 6th European Workshop on Systems Secu-
rity (EuroSec’13) (2013).
[22] SEABORN, M. Exploiting the DRAM rowhammer bug to gain
kernel privileges. http://googleprojectzero.blogspot.
com/2015/03/exploiting-dram-rowhammer-bug-to-
gain.html, March 2015. Retrieved on June 26, 2015.
[8] HUANG, R.-F., YANG, H.-Y., CHAO, M. C.-T., AND LIN, S.-
C. Alternate hammering test for application-specific DRAMs and
an industrial case study. In Proceedings of the 49th Annual De-
sign Automation Conference (DAC’12) (2012), pp. 1012–1017.
[23] SEABORN, M. How physical addresses map to rows and banks
http://lackingrhoticity.blogspot.com/
in DRAM.
2015/05/how-physical-addresses-map-to-rows-and-
banks.html, May 2015. Retrieved on July 20, 2015.
580  25th USENIX Security Symposium 
USENIX Association
16
[24] SEABORN, M., AND DULLIEN, T. Test DRAM for bit ﬂips
caused by the rowhammer problem. https://github.com/
google/rowhammer-test, 2015. Retrieved on July 27, 2015.
[25] WU, Z., XU, Z., AND WANG, H. Whispers in the Hyper-space:
High-bandwidth and Reliable Covert Channel Attacks inside the
Cloud. IEEE/ACM Transactions on Networking (2014).
[26] XIAO, J., XU, Z., HUANG, H., AND WANG, H. Security im-
plications of memory deduplication in a virtualized environment.
In Proceedings of the 43rd Annual IEEE/IFIP International Con-
ference on Dependable Systems and Networks (DSN’13) (June
2013), Ieee, pp. 1–12.
[27] XIAO, Y., ZHANG, X., ZHANG, Y., AND TEODORESCU, M.-
R. One bit ﬂips, one cloud ﬂops: Cross-vm row hammer attacks
and privilege escalation.
(2016).
In 25th USENIX Security Symposium
[28] YAROM, Y., AND FALKNER, K. Flush+Reload: a High Resolu-
tion, Low Noise, L3 Cache Side-Channel Attack. In Proceedings
of the 23th USENIX Security Symposium (2014).
[29] YAROM, Y., GE, Q., LIU, F., LEE, R. B., AND HEISER, G.
Mapping the Intel Last-Level Cache. Cryptology ePrint Archive,
Report 2015/905 (2015), 1–12.
[30] ZHANG, Y., JUELS, A., REITER, M. K., AND RISTENPART,
T. Cross-VM side channels and their use to extract private keys.
In Proceedings of the 19th ACM conference on Computer and
Communications Security (CCS’12) (2012).
USENIX Association  
25th USENIX Security Symposium  581
17