    DocumentRoot /www/sf2_aonola_com/web（根目录）
    # Options Indexes FollowSymLinks
    # Options -Indexes IncludesNOEXEC -ExecCGI FollowSymLinks
    Options FollowSymLinks
    AllowOverride All
    Order allow,deny
    Allow from all
    # vim: syntax=apache ts=4 sw=4 sts=4 sr noet
禁用不安全的HTTP方法，基本原则是只允许开启GET和POST方法。特别地，要禁用CONNECT方法。
重启服务器，策略生效
当然这样解决的操作基本上只能作为临时修复办法，因为通过这种方式是通过设置403
Forbidden来禁止转发第三方域名的请求，只能解决恶意代理攻击，但是无法有效解决服务器负载过高的问题，因为请求最终还是会发送到服务器上，服务器还是要对其做相关处理。
所以终极解决办法就是：  
你有WAF，你为什么不用WAF呢？或者F5也行啊。
# 攻击测试
经过全方面的测试，有如下5种测试，现在对这5种方法做简单分析。其中主要是对nmap的nse脚本和msf的rb脚本做了代码分析，其实都是简单的socket代码，主要是想锻炼一下代码溯源的能力，以及理清两个渗透杀器nmap和msf的主体代码结构和调用体系。  
1、 nmap的脚本测试（分析以Windows环境为例）；  
我们先分析一下http代理测试，该测试使用的脚本为http-open-proxy，该脚本位于nmap的scripts目录下，名称为http-open-proxy.nse
我们打开这个nse文件看一下代码里这个nmap脚本到底是怎么使用以及怎么实现测试的。
从简单的description中我们可以看到这个脚本就是用来测试HTTP代理是否打开，但是注意去看详细描述会发现，该脚本是以测试通过http代理是否能够访问google，响应码不限于200,301和302的形式来判断的。国内的朋友用起来就会有一些小麻烦了。不过仔细研读一下以下的代码，发现其实它不仅以google为测试url，同时作为测试url的还有wikipedia和computerhistory的官网。可惜，国内访问要不就是访问不了要不就是速度很慢。
但是nmap考虑到了这一点，在@usage中，我们看到他贴心地为我们加上了除了基本的nse使用方法，也就是—script http-open-proxy以外，在2009-05-14的版本更新中Joao Correa为我们添加了自定义proxy.url的参数方案。
所以在全局代码中我们看到了两个基本的function，一个是custom_test()，一个是default_test()。从参数获取我们可以看到custom_test()要求提供host，port，test_url，pattern，而default_test()要求提供host和port即可，完全符合usage中的描述。
由于基本测试形式一样，唯一不同点就是default_test()方法中固定了url和pattern参数为默认值。所以我们这里仅仅分析一下custom_test()的方法实现即可。
首先定义两个最后需要用来反馈给用户的return值，lstatus和response，初始化lstatus为false，最后只要存在http
proxy打开，赋值为true。接着就是初始化各个入口参数，hostname，port，test_url之类的，这里还对test_url传入的用户输入值做了处理，如果用户输入没有加上
由于三种方法的区别仅仅在于使用的HTTP方法不同，这里就仅以test_get()方法为示例进行分析。我们追溯一下test_get()方法，由于其是属于proxy的属性方法，进入proxy的定义中去找一下，定位到proxy.lua找到test_get()方法。
这边首先通过connectProxy()方法进行连接，我们通过定位到connectProxy()方法，发现其实就是简单的socket连接，并且这里的socket连接是通过proxyType的指定来进行不同类型的连接，回归到custom_test()发现三种测试方法都指定proxyType为“http”类型，所以这里就不用sock4和sock5的测试方法来进行测试。回过来看测试方法，也就是构造一个简单的request发送请求，读取器response的响应码即可判断。其实说到底就是建立一个带porxy参数的socket进程。
可以看到与它的名字相符，这只是一个http代理测试的脚本，同样既然这边定义了socks代理连接，那肯定有socks代理的测试脚本，没错，就是socks-open-proxy。
socks-open-proxy的基本方法也是和http-open-proxy一样，同样也是custom_test()方法和default_test()方法，所以也是可以自定义测试url的。跟之前分析的一样，唯一区别也就是在于proxyType的不同，这边是使用socks4和socks5两种类型。
所以使用nmap做测试的总结方法就是如下一条命令：  
nmap 192.168.1.1 --script http-open-proxy socks-open-proxy --script-args
proxy.url=www.baidu.com
2、 msfconsole的auxiliary/scanner/http/open_proxy模块  
先看一下msf接口的简单description：HTTP Open Proxy Detection，基本与nmap的脚本功能出发点是一样的。
先调用一下这个模块看一下有哪些options是属于用户输入范畴的。
可以看到msf的模块也支持自定义checkurl，并且提供自定义测试标记，即响应码和匹配模式，并且还支持是否验证CONNECT通道代理方法。所以可以发现从用户自定义角度来说，msf相对nmap会更加人性化。不过基本上也是和nmap有异曲同工之妙，为什么这么说，因为，emmm……
然后对模块的方法实现进行一个分析，首先是一个初始化方法，其实就是默认值的赋值，和刚刚在options选项中看到的基本一样。
第二个方法是run_host()，这个方法就是自定义用户输入的内容。直接看一下执行主体的verify_target()方法，脚本里写的代码很简单。就是调用了send_request_cgi()方法获取到response，然后对response处理分析来判断是否存在proxy打开的情况。判断一共分3中，没有response判断没有proxy情况，判断普通http代理就通过判断响应码或者响应数据中的匹配模式，而判断CONNECT通道代理就是只判断响应码是否符合。
其实重点在于这个send_request_cgi()方法，定位一下这个方法地址，先看一下全局include，可以确定为include
Msf::Exploit::Remote::HttpClient，找到这个方法的实现脚本地址为/opt/metasploit-framework/embedded/framework/lib/msf/core/exploit/http/client.rb，其实如果看不懂的话可以用grep一键找。
理一下send_request_cgi()方法主体，执行方法主要是下面这一段，所以接下来要定位一下connect()方法，来弄清楚request_cgi的具体执行参数的表达含义。
connect()方法首先会判断一下ssl协议，然后开始连接http
server，可以看到这边的参数opt其实就是制定远程主机rhost的值，实际上就是check_url传入的值。
追踪到/opt/metasploit-framework/embedded/framework/lib/rex/proto/http/client.rb的request_cgi()方法，其实也就是基本的定义参数，然后进行client客户端去连接。
这个client.rb的整体的代码结构和之前的有点类似，只不过更加细化，在initialize()方法中可以看到读取了connect()方法中传入的8个参数值。这边其实分析到底也是一层socket连接，赋予其proxy的参数。所以理论上都是和nmap是类似的。
3、 花刺代理工具测试；  
工具是傻瓜工具，一看就知道怎么用，不再赘述，值得说的是该工具需使用管理员身份打开。
4、 在线代理有效性测试；  
经过一些测试，该测试站点测试效果很好。  
5、上线前白盒分析（基线审核）httpd.conf相关安全配置文件