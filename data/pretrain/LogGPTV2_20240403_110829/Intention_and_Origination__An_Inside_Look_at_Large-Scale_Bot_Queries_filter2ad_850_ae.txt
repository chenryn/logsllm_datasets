“active topics.asp?at=” sorrowing
act “WordPress forum plugin by Fredrik Fahlstad” site:.edu
inch “WordPress forum plugin by Fredrik Fahlstad” site:.cn
plus “WordPress forum plugin by Fredrik Fahlstad” site:.net
change “WordPress forum plugin by Fredrik Fahlstad” site:.com
Burst1
Burst2
Table 18. Example queries submitted in the
two phases
In the ﬁrst burst, a relatively small number (149) of hosts
are involved, but they are very aggressive in generating
queries (submitted 41,276 queries in merely 6 hours). The
average number of queries per IP address is 277, and the
average interval between two consecutive queries is only
4.6 seconds. Most of the bot queries are in the format of a
quoted vulnerability token, followed with a random string
or word for increasing the query diversity. There are a large
number of different vulnerability tokens queried in this pe-
riod. The ﬁrst row in Table 18 lists some examples.
The second burst involves more bots in this cluster, with
1,682 out of 1,807 hosts active. There are 49 bots in the ﬁrst
phase also active in the second phase. These bots are more
persistent (e.g., active for 21 hours compared to 6 hours in
the ﬁrst phase), and their search behaviors are much more
stealthy. Each bot generated fewer queries (31 queries on
average) and the average interval between two consecutive
queries is 21 seconds, signiﬁcantly higher than the 4.6 sec-
onds before. The second row in Table 18 shows the example
queries submitted in this stage. These queries all target at a
speciﬁc type of vulnerability with different site scopes.
Considering the different but correlated query strategies
used in these two bursts, we suspect that queries in the ﬁrst
burst were mainly used to explore the diversity of the vul-
nerable web sites, while those in the second burst focused
more on ﬁnding information about a speciﬁc vulnerability,
which could be the most popular one or the easiest one for
exploitation. This example provides us with detailed under-
standing into the sophisticated query strategies by attack-
ers. Our system can effectively aggregate such activities
and provide important information for attack detection and
defense.
5.2 Case Study II: A Data Center Cluster
# of IPs
# of /24 preﬁxes
# of queries
# of unique queries
# of names
446
29
873,064
495,211
354,709
Table 19. A case study of data center cluster
One of the interesting data center clusters that we iden-
tify share the query pattern “-Genealogy, -Generation”. Ta-
ble 19 presents the cluster statistics. It has 446 distinct IP
addresses coming from 29 /24 IP preﬁxes. In addition, all
the IP addresses have been actively generating bot queries
throughout the data collection period. Despite the fact that
the 29 /24 IP preﬁxes look quite different, reverse DNS
lookups show that all of the IP addresses actually belong
to the same organization “SOFTLAYER”, which appears to
be an hosting service.
This cluster generates in total 873,064 queries with
495,211 unique ones, looking for information using people
names, possibly for background investigation. Each bot ﬁrst
initiates a query with only a name (e.g., “alice foo”), imme-
diately followed by another query with the same name plus
additional constraints (e.g., “alice foo” +(“alice is” OR
“alice was”) -Genealogy -Generation language:en). We
see 354,709 unique names being queried.
s
P
I
/
s
e
i
r
e
u
q
f
o
r
e
b
m
u
n
e
h
T
104
103
102
0
50
IPs
Queries
200
250
Figure 11. Query pattern lifetimes (from D1)
100
150
Time elapsed in hour
Figure 10. Number of queries/IPs in each hour
Figure 10 shows strong diurnal patterns in the number of
queries and the number of IP addresses submitting queries
from this cluster over time, suggesting that these queries
may be triggered by the events related to real users. For ex-
ample, there could exist a front end receiving user requests,
which triggers the back end to submit queries automatically.
Each /24 IP preﬁx in this cluster has around 15 IP addresses,
and the number of queries per host is well balanced, around
1000 queries per host.
This example shows different query contents and behav-
ior patterns from the botnet cluster we study in Section 5.1.
Without our tool, we would not be able to group the hosts
or analyze their different intentions at a large scale.
5.3 Case Study III: Two Data Center Clusters
Used For Malicious Purposes
Cluster1 in D1
# of IPs
# of /24 preﬁxes
# of Queries
41
1
244054
Cluster2 in D2
# of IPs
# of /24 preﬁxes
# of Queries
18
1
113994
Table 20. Case studies for two data center
clusters
Although it is not surprising to observe botnets submit-
ting queries with malicious intentions, the appearance of
data center hosts submitting malicious queries is a rela-
tively new trend. Using SBotScope we also ﬁnd data cen-
ter clusters submitting vulnerability-searching queries. Ta-
ble 20 shows two example data center clusters (Cluster1
and Cluster2) from D1 and D2, both associated with the
query pattern “powered by”, Cluster1 has 41 IP addresses
and Cluster2 has 18 IP addresses, all from the same /24 IP
preﬁx in AS21788 (“NOC”). All the IP addresses have been
actively generating bot queries throughout the data collec-
tion period, with the query volume well balanced across
hosts. Speciﬁcally, each host in these two clusters gener-
ated around 6000 queries, exhibiting strongly coordinated
behaviors. Compared to botnets, data center IP addresses
are often shared among multiple services, so they cannot be
easily blacklisted.
5.4 Application:
Queries
Detecting Additional Bot
Since query patterns are more tightly related to the true
intentions of bot queries, it is natural to consider using pat-
terns for detecting bot queries that are missed by the exist-
ing detection approaches. However, two challenges exist for
leveraging query patterns for detection. The ﬁrst is whether
query patterns are long-lasting enough so that we can apply
the bot query patterns derived from historical data to newly
observed ones. The second is whether bot query patterns
are distinguishing enough to differentiate bot queries from
those submitted by normal users.
To address the ﬁrst challenge, we study the persistence
of bot queries by checking the query patterns derived from
D1 against daily historical search logs in the past three
months. Figure 11 shows that query pattern lifetime has
a bimodal distribution. While many query patterns are rel-
atively short-lived, there still exist a large number of query
patterns that are persistent over time across almost the en-
tire three months. Even for the short-lived query patterns,
their lifetime is on the order of a few days, which still pro-
vide enough room for detection. In particular, we ﬁnd many
vulnerability-ﬁnding query patterns fall into the long-lived
category 2. This is encouraging as normal users usually do
not search for speciﬁc web server vulnerabilities.
2We ﬁnd a lot of query patterns for searching email account information
fall into the short-lived pattern category
Newly detected bot queries
12,436,658
# of IPs
3,873,909
# of new IPs
3,361,532
Table 21. Newly detected bot queries in the
same period of dataset D2.
To address the second challenge, we eliminate query pat-
terns that may introduce false positives. To be conservative,
we use the following two rules for detection:
• Bot-query patterns should not match popular normal
queries. Given that there could exist undetected bot
queries, we match each pattern against historical nor-
mal user queries (e.g., three months ago). If a pattern
matches normal user queries from a large number of
hosts (≥ 1000 IP addresses), we do not select this pat-
tern.
• A bot usually generates more than one query each
time. To be conservative, we select only hosts who
have at least m (we currently set m = 100, which is re-
ally conservative) bot queries (either already detected
or newly matched) and mark their newly matched
queries as additionally detected ones.
Applying these two rules on the normal query log col-
lected in the same period as D2, we additionally detected
12,436,658 bot queries that slip through the existing de-
tection system. Table 21 shows that the newly detected
bot queries have widely spread IP addresses, out of which,
86.8% (3,361,532) are addresses not observed in the already
detected bot-query set.
To validate the newly detected bot queries, we take a
similar approach by looking at the behavior similarity of
these queries in their “Form”, “Referrer” and “UA” ﬁelds.
To be comprehensive, we compare the similarity of these
ﬁelds among newly detected queries sharing the same pat-
terns, as well as comparing them against the clusters we al-
ready derived. Additionally we also compute the temporal
correlations of their activities (i.e., activity burstiness). Us-
ing the combinations of these approaches, we can validate
94.13% as suspicious and likely undetected bot queries.
The purpose of this experiment is not to have a bullet-
proof new detection system, but to illustrate the value of
exploring query patterns for detection. The hosts that sub-
mitted the newly detected bot queries were stealthier in their
search behaviors, but their queries revealed their true inten-
tions.
6 Discussion
Attackers may wish to evade any analysis that may lead
to detection or defense. Since SBotScope directly focuses
on query contents and the invariant patterns in terms of key-
word combinations, typical behavior-based strategies such
as randomizing U A, Ref erer ﬁelds or mimicking legiti-
mate query intervals will not impact our analysis.
Attackers may also wish to modify queries, increase or
decrease the number of queries per host. However, doing so
may lead to undesirable side effects. In particular, modify-
ing queries may not retrieve the same quality search results.
Increasing the number of queries per host (e.g., by adding
obfuscated or randomly picked queries) may lead to detec-
tion as the hosts submit queries more aggressively. Reduc-
ing the number of queries will decrease the query through-
puts, making it less cost-effective for attackers.
The ability to automatically dissect
large-scale bot
queries is only a ﬁrst step toward leveraging the value of bot
queries for security. As bot queries provide rich information
about the interests and focus of attackers, we should analyze
them further to extract stronger signals. The SBotScope
system provides the necessary basis for further study. For
example, we could analyze vulnerability-searching queries
in more detail to reveal the vulnerable software and version
numbers, the set of vulnerable web sites, and even zero-
day exploits. Finally, the information about the botnet sizes
and activity patterns can enable better detection and defense
mechanisms.
7 Conclusion
In this paper, we have presented SBotScope, an auto-
mated system to analyze large-scale bot queries from two
important aspects: query intentions and query origination.
SBotScope performs syntactical and semantical analysis of
bot queries to identify query intentions. It further clusters
hosts and classiﬁes them into botnet clusters and data cen-
ter clusters. Our large-scale study, based on month-long
bot queries collected from the Bing search engine, has re-
vealed a number of unique ﬁndings. First we ﬁnd that a
signiﬁcant portion of bot queries are associated with ma-
licious activities, where 33% of bot queries are used for
vulnerability discovery and 11% are used for harvesting
email addresses. Second, SBotScope identiﬁes 81,520 bot-
nets involved in submitting bot queries on a global scale.
Third, SBotScope identiﬁes 287 data center clusters, some
of which are also performing malicious searches. The ap-
pearance of using data center hosts for malicious activities
seems a newly emerged trend. Finally, we demonstrate the
value of SBotScope using a few case studies and a concrete
application. We believe that SBotScope is a useful tool for
improving security in multiple aspects.
8 Acknowledgements
We thank Zijian Zheng and his team for providing us
with the Bing search logs. We thank Qifa Ke and Yunchao
Gong for their help on the spectral clustering algorithm. We
are grateful to Seungwon Shin and Guofei Gu for their help
in validating IP addresses using the Conﬁcker data set. The
development of the SBotScope system and the related anal-
ysis were conducted while Junjie was at Microsoft Research
Silicon Valley. The analysis on the comparison with the
Conﬁcker botnets was partially supported by the National
Science Foundation under grant no. 0831300, and the Of-
ﬁce of Naval Research under grants no. N000140710907
and no. N000140911042.
References
[1] Amazon.Com Server Said To Have Been Used In Sony
Attack. http://www.bloomberg.com/news/2011-05-13/sony-
network-said-to-have-been-invaded-by-hackers-using-
amazon-com-server.html.
[2] Exploit DB.
http://www.exploit-db.com/
google-dorks.
[3] NOBISTECH. http://www.nobistech.net/.
[4] SOFTLAYER. http://www.softlayer.com/.
[5] Whois. http://en.wikipedia.org/wiki/Whois.
[6] L. M. Aiello, D. Donato, U. Ozertem, and F. Menczer.
In Proc.
Behavior-driven clustering of queries into topics.
ACM CIKM, 2011.
[7] B. Miller, P. Pearce, C. Grier, C. Kreibich, and V. Paxson.
What’s clicking what? Techniques and innovations of to-
day’s Clickbots. In Proc. DIMVA, 2011.
[8] D. Beeferman and A. Berger. Agglomerative clustering of a
search engine query log. In Proc. ACM SIGKDD, 2000.
[9] D. Donato, F. Bonchi, T. Chi, and Y. Maarek. Do you want to
take notes?: Identifying research missions in Yahoo! search
pad. In Proc. WWW, 2010.
[10] D. MacKay.
Information Theory, Inference and Learning
Algorithms. Cambridge University Press, 2003.
[11] E. Cooke, F. Jahanian, and D. McPherson. The zombie
roundup: Understanding, detecting, and disrupting botnets.
In Proc. SRUTI, 2005.
[12] F. R. Bach and M. I. Jordan. Learning spectral clustering,
with application to speech separation. Journal of Machine
Learning Research, 7:1963–2001, 2006.
[13] F. Yu, Y. Xie, and Q. Ke. Sbotminer: Large scale search bot
detection. In Proc. ACM WSDM, 2010.
[14] G. Buehrer, J. W. Stokes, and K. Chellapilla. A large scale
study of automated of automated web search trafﬁc. In Proc.
AIRWEB, 2008.
[15] G. Buehrer, J. W. Stokes, and K. Chellapilla. Classiﬁcation
In Chapter in Weaving Services
of automated web trafﬁc.
and People on the World Wide Web, 2009.
[16] H. Cao, D.H. Hu, D. Shen, D. Jiang, J.-T. Sun, E. Chen, and
Q. Yang. Context-aware query classiﬁcation. In Proc. ACM
SIGIR, 2009.
[17] H. Kang, K. Wang, D. Soukal, F. Behr, and Z. Zheng. Large-
scale bot detection for search engines. In Proc. WWW, 2010.
[18] X. He and P. Jhala. Regularized query classiﬁcation using
search click information. Pattern Recognition, 41(7):2283–
2288–145, 2008.
[19] J. P. John, F. Yu, Y. Xie, A. Krishnamurthy, and M.
Abadi. deSEO: Combating search-result poisoning. In Proc.
USENIX Security, 2011.
[20] J. P. John, F. Yu, Y. Xie, M. Abadi, and A. Krishnamurthy.
Searching the searchers with searchaudit. In Proc. USENIX
Security, 2010.
[21] J. Wen, J. Nie, and H. Zhang. Query clustering using user
logs. ACM Transactions on Information Systems, 20(1):59–
81, 2002.
[22] J.P. John, F. Yu, Y. Xie, A. Krishnamurthy, and M. Abadi.
In Proc.
Heat-seeking honeypots: Design and experience.
WWW, 2011.
[23] L. Lu, R. Perdisci, and W. Lee. Surf: Detecting and measur-
ing search poisoning. In Proc. ACM CCS, 2011.
[24] M. Halkidi, Y. Batistakis, and M. Vazirgiannis. On clustering
validation techniques. J. Intell. Inf. Syst., 17(2-3):107–145,
2001.
[25] N. Daswani and M. Stoppelman. The anatomy of Click-
bot.A. In Proc. USENIX HotBots, 2007.
[26] N. Provos, J. McClain, and K. Wang. Search worms. In Proc.
ACM WORM, 2006.
[27] S. M. Beitzel, E. C. Jensen, D. D. Lewis, A. Chowdhury,
and O. Frieder. Automatic classiﬁcation of web queries us-
ing very large unlabeled query logs. ACM Transactions on
Information Systems, 2, 2007.
[28] S. Shin, G. Gu, N. Reddy, and C. Lee. A large-scale empir-
ical study of Conﬁcker. IEEE Transactions on Information
Forensics and Security, 2012.
[29] S.M. Beitzel, E.C. Jensen, Q. Frieder, D.D. Lewis, A.
Improving automatic query
In Proc. IEEE
Chowdhury, and A. Kolcz.
classiﬁcation via semi-supervised learning.
ICDM, 2005.
[30] Y. Xie, F. Yu, K. Achan, R. Panigrahy, G. Hulten, and I.
Osipkov. Spamming botnet: Signatures and characteristics.
In Proc. ACM SIGCOMM, 2008.