be determined from the scale of D2(Oi; Ct). If the bigger scale of
vij and ctj is s, then the scale D2(Oi; Ct) is s + s = 2 (cid:3) s and
hence the sensitivity of D2(Oi; Ct) is 10
5.4 Efﬁcient Computation of Trapdoor Infor-
(cid:0)2(cid:3)s.
mation
In the trapdoor information for ED2(Oi; Ct), the term g(V; R)
is dependent on the data object Oi and the cluster center Ct. Then,
in an iteration of the k-means clustering algorithm, the data owner
needs to compute the trapdoor information n (cid:3) k times for each
combination of data objects and cluster centers. Since n might be
large, it is still not efﬁcient for the data owner to compute so many
times of trapdoor information in each iteration. In the following,
we present an efﬁcient method to compute trapdoor information.
5.4.1 Reﬁning Trapdoor Information
Our idea is to reﬁne the trapdoor information for the encrypted
distance ED2(Oi; Ct) into static trapdoor information and dynamic
trapdoor information. The static trapdoor information is ﬁxed after
the data objects and initial cluster centers have been encrypted. In
other words, the static trapdoor information will not change after
being generated; hence, it can be reused by all k-means cluster-
ing iterations. On the contrary, the dynamic trapdoor information
needs to be recomputed for new cluster centers in each iteration.
However, the dynamic trapdoor information is computed only from
the cluster centers, which are usually few.
In the previous section, the trapdoor information for ED2(Oi; Ct)
is deﬁned as (cid:0)g(fOi; Ctg; Rit) + b + r, where Rit contains the
random numbers generated during the encryptions of Oi and Ct, b
is a secret key, and r is a random number sampled from [0; (k1 (cid:3)
t1)2 (cid:3) sens) with sens being the sensitivity of ED2(Oi; Ct). To
compute this trapdoor information efﬁciently, we reﬁne it into the
following expression:
d∑
STrapit(Oi; Rit)+
j=1
DTraptj(ctj)(cid:3)STrapitj(Rit)+DTrapt(Ct; b)
where the terms STrapit(Oi; Rit) and STrapitj(Rit) contain the
static trapdoor information, while DTraptj(ctj) and DTrapt(Ct; b)
contain the dynamic trapdoor information. The subscripts i, t or j
in a term (e.g., STrapit(Oi; Rit)) indicate that the term contains
the static or dynamic trapdoor information for the ith data object,
the tth cluster or the jth dimensional value. Since these terms will
be separately generated and stored, the subscripts i, t and j are used
to correlate them.
In the following, we give the deﬁnitions of these terms, with
their correctness proved in the next section. From the deﬁnitions
below, we can see that STrapit(Oi; Rit) and STrapitj(Rit) are
not dependent on the cluster center Ct, so even if Ct is updated in
a new clustering iteration, STrapit(Oi; Rit) and STrapitj(Rit) do
not need to be recomputed. On the other hand, DTraptj(ctj) and
DTrapt(Ct; b) are not dependent on the data object Oi. Hence, the
computation or recomputation of DTraptj(ctj) and DTrapt(Ct; b)
does not involve the large number of data objects.
(cid:15) STrapit(Oi; Rit) is deﬁned by the following expression, where
N Vij and N Ctj are the same as in the deﬁnition of ED2(Oi; Ct).
(N Vij (cid:0) N Ctj)2
vij (cid:3) (N Vij (cid:0) N Ctj) (cid:0) d∑
(cid:0)2 (cid:3) k1 (cid:3) t1 (cid:3) d∑
j=1
j=1
In STrapit(Oi; Rit), the values vij in Oi are aggregated and
randomized with the random numbers in NVij and NCtj. Thus,
it is secure to pass STrapit(Oi; Rit) to the service provider.
(cid:15) STrapitj(Rit) is deﬁned as N Vij (cid:0) N Ctj + N Stj, where
N Stj is a new random number, ensuring N Vij (cid:0) N Ctj +
N Stj > 0. By incorporating the new random number, N Vij (cid:0)
N Ctj is protected in STrapit(Rit), without being directly ex-
posed to the service provider.
For the jth dimension of the tth cluster, we need the maximal
and minimal values of STrapitj(Rit) over all data objects, de-
noted by maxtj and mintj, respectively. That is, for n data
objects, maxtj and mintj denote the maximum and minimum
values in the set fSTrapitj(Rit)j1 (cid:20) i (cid:20) ng, respectively.
Since N Vij (cid:0) N Ctj + N Stj > 0, we have maxtj > 0 and
mintj > 0. The values maxtj and mintj will be used be-
low when determining the ranges of new random numbers in
DTrapt(Ct; b) and DTraptj(ctj).
(cid:15) DTrapt(Ct; b) is deﬁned as the following expression.
(2 (cid:3) k1 (cid:3) t1 (cid:3) ctj (cid:3) N Stj + N Btj)
b (cid:0) d∑
j=1
where N Btj (1 (cid:20) j (cid:20) d) are d new random numbers, which
randomize DTrapt(Ct; b) in each iteration. Each N Btj is re-
quired to satisfy
0  0, since sens >
0, d > 0, mintj > 0 and maxtj (cid:21) mintj. N Bj is used
below to determine the range of the new random number in
DTraptj(ctj).
(cid:15) DTraptj(ctj) is deﬁned as 2 (cid:3) k1 (cid:3) t1 (cid:3) ctj + N Rtj, where
N Rtj is a new random number generated in each iteration. It
should satisfy the following condition.
0 (cid:20) N Rtj (cid:3) rtj (cid:0) N Btj  0, we can replace rtj
in the condition with maxtj and maxtj, obtaining the following
range for N Rtj.
N Btj
mintj
< N Rtj (cid:20) N Btj + (k1 (cid:3) t1)2 (cid:3) sens=d
maxtj
This range is valid, that is,
N Btj
mintj
<
N Btj + (k1 (cid:3) t1)2 (cid:3) sens=d
maxtj
due to the condition on N Btj.
1275.4.2 Correctness
We prove that the trapdoor information for ED2(Oi; Ct) can be
correctly constructed by the following expression with the static
and dynamic trapdoor information deﬁned above.
STrapit(Oi; Rit)+
j=1
DTraptj(ctj)(cid:3)STrapitj(Rit)+DTrapt(Ct; b)
The following are the steps for the correctness proof.
d∑
d
2. By rewriting
d
d
1. By replacing each term with its deﬁnition, the above expres-
d
d
d
d
d
d
d
d
d
+
+
+
+
sion is re-written into:
j=1(N Vij (cid:0) N Ctj)2
j=1(2 (cid:3) k1 (cid:3) t1 (cid:3) ctj + N Rtj) (cid:3) (N Vij (cid:0) N Ctj + N Stj)
N Ctj + N Stj) and
we obtain:
j=1 vij (cid:3) (N Vij (cid:0) N Ctj)
(cid:0)2 (cid:3) k1 (cid:3) t1 (cid:3)∑
(cid:0)∑
∑
+b (cid:0)∑
∑
j=1(2 (cid:3) k1 (cid:3) t1 (cid:3) ctj (cid:3) N Stj + N Btj)
∑
j=1(2 (cid:3) k1 (cid:3) t1 (cid:3) ctj + N Rtj) (cid:3) (N Vij (cid:0)
j=1(2(cid:3) k1 (cid:3) t1 (cid:3) ctj (cid:3) N Stj + N Btj),
(cid:0)2 (cid:3) k1 (cid:3) t1 (cid:3)∑
(cid:0)∑
j=1 vij (cid:3) (N Vij (cid:0) N Ctj)
∑
j=1(N Vij (cid:0) N Ctj)2
∑
j=1(2 (cid:3) k1 (cid:3) t1 (cid:3) ctj) (cid:3) (N Vij (cid:0) N Ctj)
∑
j=1(2 (cid:3) k1 (cid:3) t1 (cid:3) ctj) (cid:3) (N Stj)
j=1(2 (cid:3) k1 (cid:3) t1 (cid:3) ctj (cid:3) N Stj) (cid:0)∑
+b (cid:0)∑
j=1(N Rtj) (cid:3) (N Vij (cid:0) N Ctj + N Stj)
∑
j=1(2(cid:3) k1 (cid:3) t1 (cid:3) ctj)(cid:3) (N Stj) and (cid:0)∑
j=1(2(cid:3) k1 (cid:3)
t1 (cid:3) ctj (cid:3) N Stj) cancel each other, the above expression is
(cid:0)2 (cid:3) k1 (cid:3) t1 (cid:3)∑
(cid:0)∑
reduced to:
j=1 vij (cid:3) (N Vij (cid:0) N Ctj)
∑
j=1(N Vij (cid:0) N Ctj)2
∑
j=1(2 (cid:3) k1 (cid:3) t1 (cid:3) ctj) (cid:3) (N Vij (cid:0) N Ctj)
+b (cid:0)∑
j=1(N Rtj) (cid:3) (N Vij (cid:0) N Ctj + N Stj)
(cid:0)2 (cid:3) k1 (cid:3) t1 (cid:3)∑
(cid:0)∑
j=1(vij (cid:0) ctj) (cid:3) (N Vij (cid:0) N Ctj)
∑
j=1(N Vij (cid:0) N Ctj)2
j=1(N Rtj (cid:3) (N Vij (cid:0) N Ctj + N Stj) (cid:0) N Btj)
d
j=1 N Btj
d
j=1 N Btj
duced.
+
+
d
d
d
d
d
d
d
d
4. After combining like terms, the following expression is pro-
3. Since
d
+
+b
5. Based on the deﬁnition of g(V; Rit) in Section 5.3, the above
d
∑
expression can be represented as:
(cid:0)g(fOi; Ctg; Rit) + b + r
j=1(N Rtj (cid:3)(N Vij (cid:0)N Ctj +N Stj)(cid:0)N Btj).
where r =
In order to obtain correct trapdoor information, the random
number r must be in the range [0; (k1 (cid:3) t1)2 (cid:3) sens), as
required in Section 5.3. Since mintj (cid:20) N Vij (cid:0) N Ctj +
N Stj (cid:20) maxtj, the following inequation holds due to the
condition on N Rtj.
0 (cid:20) N Rtj(cid:3)(N Vij(cid:0)N Ctj+N Stj)(cid:0)N Btj < (k1(cid:3)t1)2(cid:3)sens=d
Hence, we have 0 (cid:20) r < (k1 (cid:3) t1)2 (cid:3) sens. That is, r is in
the range [0; (k1 (cid:3) t1)2 (cid:3) sens).
6. CLUSTERING HOMOMORPHICALLY
ENCRYPTED DATA
By using our proposed method for comparing encrypted dis-
tances, we propose a distributed algorithm for clustering homomor-
phically encrypted data. There are two stages for this approach:
preparation and clustering, which are explained below. In addition,
the data objects might need to be updated after being outsourced.
We also discuss how to manage the changes to the outsourced data
objects and clusters.
6.1 Preparation Stage
Suppose the data owner has n data objects Oi (1 (cid:20) i (cid:20) n),
which are to be clustered into k clusters. By using some method
of its choice, the data owner determines k initial cluster centers
Ct (1 (cid:20) t (cid:20) k). Each data object and cluster center is supposed to
have d attributes. Let Oi = (vi1; :::; vid) and Ct = (ct1; :::; ctd).
The values of n, k and d need to be sent to the service provider.
To protect his data, the data owner generates the homomorphic
encryption key K(m) = [(k1; s1; t1); :::; (km; sm; tm)], in which
we assume t1 ̸= 0. Using the key K(m), the data owner can
encrypt data objects and cluster centers, and then produce the static
trapdoor information.
′
tj2; :::; e
′
tj1; :::; e
However, the memory usage is different depending on whether
data objects or cluster centers are encrypted ﬁrst. This is because
the calculation of STrapit(Oi; Rit) and STrapitj(Rit) needs the
random numbers from all combinations of encrypted data objects
and cluster centers. Suppose the data object Oi is encrypted before
all cluster centers. Then, the random numbers used in encrypt-
ing Oi must be kept until all cluster centers are encrypted, so that
STrapit(Oi; Rit) and STrapitj(Rit) can be calculated. Since the
number of data objects is usually big, the memory space needed for
storing the used random numbers is also big. Hence, we choose to
encrypt the initial cluster centers before encrypting the data objects.
6.1.1 Encryption of Cluster Centers
For 1 (cid:20) t (cid:20) k and 1 (cid:20) j (cid:20) d, the value ctj in Ct is encrypted
′
′
by performing Enc(K(m); ctj) = (e
tjm). For each ci-
tj1; :::; e
′
phertext (e
tjm), our method for comparing encrypted dis-
′
tances only needs the ﬁrst subciphertext e
tj1. Thus, the other sub-
′
tjm can be discarded.
ciphertexts e
′
For the ﬁrst subciphertext e
tj1, the data owner will send it to the
′
tj1,
service provider without keeping it. But the random numbers r
′
′
′
tj1 needs to be kept and will be used in
tjm used in e
tj(m(cid:0)1) and r
r
each clustering iteration. Let RCt denote the set of random num-
bers to be kept for Ct, that is, RCt = fr
tjmj1 (cid:20)
′
j (cid:20) dg. RCt will be used to calculate the static trapdoor informa-
tion and also be used during iterations of k-means clustering.
6.1.2 Encryption of Data Objects
Each value vij in an object Oi is encrypted as Enc(K(m); vij) =
(eij1; :::; eijm) for 1 (cid:20) i (cid:20) k and 1 (cid:20) j (cid:20) d. Let RVi =
frij1; rij(m(cid:0)1); rijmj1 (cid:20) j (cid:20) dg be the set of random numbers
used in eij1 for 1 (cid:20) j (cid:20) d.
Using RVi, the data owner can calculate the static trapdoor infor-
mation terms STrapit(Oi; RVi[RCt) and STrapitj(RVi[RCt),
with respect to each RCt. During the calculation of STrapitj(RVi[
RCt), k (cid:3) d random numbers N Stj are generated and they need to
be kept for calculating the dynamic trapdoor information. Then,
the ciphertext (eij1; :::; eijm), the terms STrapit(Oi; RVi [ RCt)
and STrapitj(RVi [ RCt) are sent to the service provider without
being kept by the data owner.
After the above processing, the original data object Oi is not
needed any more by the clustering algorithm. If the service provider
′
tj(m(cid:0)1); r
′
tj1; r
128has a long-term storage service, the data object Oi can be securely
stored there as the ciphertext (eij1; :::; eijm) and the data owner