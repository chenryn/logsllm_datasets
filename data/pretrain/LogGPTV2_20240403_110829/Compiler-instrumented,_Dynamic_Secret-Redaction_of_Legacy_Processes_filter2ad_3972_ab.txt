propagate pointer taints. Our solution thus complements
existing approaches.
USENIX Association  
24th USENIX Security Symposium  147
3
web server
honey-patch
target
clone
request
trigger
reverse proxy
controller
attacker
web server
unpatched clone
response
decoy
container pool
Figure 1: Architectural overview of honey-patching.
2.3 Application Study: Honey-Patching
Our discoveries are applied to realize practical, efﬁcient
honey-patching of legacy web servers for attacker decep-
tion. Typical software security patches ﬁx newly discov-
ered vulnerabilities at the price of advertising to attackers
which systems have been patched. Cyber-criminals there-
fore easily probe today’s Internet for vulnerable software,
allowing them to focus their attacks on susceptible targets.
Honey-patching, depicted in Figure 1, is a recent strat-
egy for frustrating such attacks. In response to malicious
inputs, honey-patched applications clone the attacker ses-
sion onto a conﬁned, ephemeral, decoy environment,
which behaves henceforth as an unpatched, vulnerable
version of the software. This potentially augments the
server with an embedded honeypot that waylays, moni-
tors, and disinforms criminals.
Highly efﬁcient cloning is critical for such architec-
tures, since response delays risk alerting attackers to the
deception. The cloning process must therefore rapidly lo-
cate and redact all secrets from the process address space,
yielding a runnable process with only the attacker’s ses-
sion data preserved. Moreover, redaction must not be
overly conservative. If redaction crashes the clone with
high probability, or redacts obvious non-secrets, this too
alerts the attacker. To our knowledge, no prior taint-
tracking approach satisﬁes all of these demanding per-
formance, precision, and legacy-maintainability require-
ments. We therefore select honey-patching of Apache as
our ﬂagship case-study.
3 Formal Semantics
For explanatory precision, we formally deﬁne our new
taint-tracking semantics in terms of the simple, typed
intermediate language (IL) in Figure 2, inspired by prior
work [40]. The simpliﬁed IL abstracts irrelevant details
of LLVM’s IR language, capturing only those features
needed to formalize our analysis.
3.1 Language Syntax
Programs P are lists of commands, denoted c. Commands
consist of variable assignments, pointer-dereferencing as-
programs
commands
expressions
binary ops
variables
values
types
taint labels
P ::= c
c ::= v :=e | store(τ, e1, e2) | ret(τ, e)
| call(τ, e, args) | br(e, e1, e0)
e ::= v | (cid:29)u, γ(cid:28) |♦ b(τ, e1, e2) | load(τ, e)
♦b ::= typical binary operators
v
u ::= values of underlying IR language
τ ::= ptr τ | τ τ | primitive types
γ ∈ (Γ,(cid:26))
(label lattice)
locations
(cid:24) ::= memory addresses
environment
∆ :v (cid:23) u
prog counter
pc
stores
σ : ((cid:24) (cid:23)u) ∪ (v (cid:23) (cid:24))
functions
f
function table
φ : f (cid:23) (cid:24)
taint contexts
λ : ((cid:24) ∪ v) (cid:23) γ
propagation
ρ : γ → γ
prop contexts A : f → ρ
call stack
Ξ ::= nil | (cid:29)f, pc, ∆, γ(cid:28) :: Ξ
Figure 2: Intermediate representation syntax.
signments (stores), conditional branches, function invo-
cations, and function returns. Expressions evaluate to
value-taint pairs (cid:30)u, γ(cid:29), where u ranges over typical value
representations, and γ is the taint label associated with
u. Labels denote sets of taints; they therefore comprise
a lattice ordered by subset ((cid:28)), with the empty set ⊥ at
the bottom (denoting public data), and the universe (cid:26) of
all taints at the top (denoting maximally secret data). Join
operation (cid:25) denotes least upper bound.
Variable names range over identiﬁers and function
names, and the type system supports pointer types, func-
tion types, and typical primitive types. Since DFSan’s
taint-tracking is dynamic, we here omit a formal static
semantics and assume that programs are well-typed.
Execution contexts are comprised of a store σ relating
locations to values and variables to locations, an envi-
ronment ∆ mapping variables to values, and a tainting
context λ mapping locations and variables to taint labels.
Additionally, to express the semantics of label propaga-
tion for external function calls (e.g., runtime library API
calls), we include a function table φ that maps external
function names to their entry points, a propagation context
A that dictates whether and how each external function
propagates its argument labels to its return value label,
and the call stack Ξ. Taint propagation policies returned
by A are expressed as customizable mappings ρ from
argument labels γ to return labels γ.
148  24th USENIX Security Symposium 
USENIX Association
4
σ, ∆, λ (cid:31) u ⇓ (cid:29)u,⊥(cid:27)
σ, ∆, λ (cid:31) v ⇓ (cid:29)∆(v), λ(v)(cid:27)
VAL
VAR
σ, ∆, λ (cid:31) e1 ⇓ (cid:29)u1, γ1(cid:27) σ, ∆, λ (cid:31) e2 ⇓ (cid:29)u2, γ2(cid:27) BINOP
σ, ∆, λ (cid:31) ♦b(τ, e1, e2) ⇓ (cid:29)u1 ♦b u2, γ1 (cid:26) γ2(cid:27)
σ, ∆, λ (cid:31) e ⇓ (cid:29)u, γ(cid:27)
σ, ∆, λ (cid:31) load(τ, e) ⇓ (cid:29)σ(u), ρload (τ, γ, λ(u))(cid:27)
LOAD
σ, ∆, λ (cid:31) e ⇓ (cid:29)u, γ(cid:27) ∆(cid:31) = ∆[v (cid:25)→ u] λ(cid:31) = λ[v (cid:25)→ γ]
(cid:29)σ, ∆, λ, Ξ, pc, v := e(cid:27) →1 (cid:29)σ, ∆(cid:31), λ(cid:31), Ξ, pc + 1,P[pc + 1](cid:27)
ASSIGN
σ, ∆, λ (cid:31) e1 ⇓ (cid:29)u1, γ1(cid:27) σ, ∆, λ (cid:31) e2 ⇓ (cid:29)u2, γ2(cid:27) σ(cid:31) = σ[u1 (cid:25)→ u2] λ(cid:31) = λ[u1 (cid:25)→ ρstore (τ, γ1, γ2)]
STORE
(cid:29)σ, ∆, λ, Ξ, pc, store(τ, e1, e2)(cid:27) →1 (cid:29)σ(cid:31), ∆, λ(cid:31), Ξ, pc + 1,P[pc + 1](cid:27)
σ, ∆, λ (cid:31) e(u ? 1 : 0) ⇓ (cid:29)u(cid:31), γ(cid:31)(cid:27) COND
σ, ∆, λ (cid:31) e ⇓ (cid:29)u, γ(cid:27)
(cid:29)σ, ∆, λ, Ξ, pc, br(e, e1, e0)(cid:27) →1 (cid:29)σ, ∆, λ, Ξ, u(cid:31),P[u(cid:31)](cid:27)
σ, ∆, λ (cid:31) e1 ⇓ (cid:29)u1, γ1(cid:27)
··· σ, ∆, λ (cid:31) en ⇓ (cid:29)un, γn(cid:27)
∆(cid:31) = ∆[params f (cid:25)→ u1 ··· un] λ(cid:31) = λ[params f (cid:25)→ γ1 ··· γn]
fr = (cid:29)f, pc + 1, ∆, γ1 ··· γn(cid:27) CALL
(cid:29)σ, ∆, λ, Ξ, pc, call(τ, f, e1 ··· en)(cid:27) →1 (cid:29)σ, ∆(cid:31), λ(cid:31), fr :: Ξ, φ(f ),P[φ(f )](cid:27)
σ, ∆, λ (cid:31) e ⇓ (cid:29)u, γ(cid:27)
fr = (cid:29)f, pc(cid:31), ∆(cid:31), γ(cid:27) λ(cid:31) = λ[vret (cid:25)→ A f γ]
(cid:29)σ, ∆, λ, fr :: Ξ, pc, ret(τ, e)(cid:27) →1 (cid:29)σ, ∆(cid:31)[vret (cid:25)→ u], λ(cid:31), Ξ, pc(cid:31),P[pc(cid:31)](cid:27)
RET
Figure 3: Operational semantics of a generalized label propagation semantics.
3.2 Operational Semantics
Figure 3 presents an operational semantics deﬁning how
taint labels propagate in an instrumented program. Ex-
pression judgments are large-step (⇓), while command
judgments are small-step (→1). At the IL level, expres-
sions are pure and programs are non-reﬂective.
Abstract machine conﬁgurations consist of tuples
(cid:29)σ, ∆, λ, Ξ, pc, ι(cid:28), where pc is the program pointer and
ι is the current instruction. Notation ∆[v (cid:27)→ u] denotes
function ∆ with v remapped to u, and notation P[pc]
refers to the program instruction at address pc. For brevity,
we omit P from machine conﬁgurations, since it is ﬁxed.
Rule VAL expresses the typical convention that hard-
coded program constants are initially untainted (⊥). Bi-
nary operations are eager, and label their outputs with the
join ((cid:24)) of their operand labels.
The semantics of load(τ, e) read the value stored in
location e, where the label associated with the loaded
value is obtained by propagation function ρload. Dually,
store(τ, e1, e2) stores e2 into location e1, updating λ
according to ρstore. In C programs, these model pointer
dereferences and dereferencing assignments, respectively.
Parameterizing these rules in terms of abstract propaga-
tion functions ρload and ρstore allows us to instantiate
them with customized propagation policies at compile-
time, as detailed in §3.3.
External function calls call(τ, f, e1 ··· en) evaluate
arguments e1 ··· en, create a new stack frame fr, and
jump to the callee’s entry point. Returns then consult
propagation context A to appropriately label the value
returned by the function based on the labels of its ar-
guments. Context A can be customized by the user to
specify how labels propagate through external libraries
compiled without taint-tracking support.
NCS
PCS
PC2S
ρ{load,store}(τ, γ1, γ2) := γ2
ρ{load,store}(τ, γ1, γ2) := γ1 (cid:26) γ2
ρ{load,store}(τ, γ1, γ2) := (τ is ptr ) ? γ2 : (γ1 (cid:26) γ2)
Figure 4: Polymorphic functions modeling no-combine,
pointer-combine, and PC2S label propagation policies.
3.3 Label Propagation Semantics
The operational semantics are parameterized by propa-
gation functions ρ that can be instantiated to a speciﬁc
propagation policy at compile-time. This provides a base
framework through which we can study different propa-
gation policies and their differing characteristics.
Figure 4 presents three polymorphic functions that can
be used to instantiate propagation policies. On-load prop-
agation policies instantiate ρload, while on-store policies
instantiate ρstore. The instantiations in Figure 4 deﬁne
no-combine semantics (DFSan’s on-store default), PCS
(DFSan’s on-load default), and our PC2S extensions:
No-combine. The no-combine semantics (NCS) model
a traditional, pointer-transparent propagation policy.
Pointer labels are ignored during loads and stores, causing
loaded and stored data retain their labels irrespective of
the labels of the pointers being dereferenced.
Pointer-Combine Semantics.
In contrast, PCS joins
pointer labels with loaded and stored data labels during
loads and stores. Using this policy, a value is tainted on-
load (resp., on-store) if its source memory location (resp.,
source operand) is tainted or the pointer value derefer-
enced during the operation is tainted. If both are tainted
with different labels, the labels are joined to obtain a new
label that denotes the union of the originals.
USENIX Association  
24th USENIX Security Symposium  149
5
γpp
γp γv
*p   
γpp
*p
γp'
γvv   
*p=v
γp γv
*p 
γp'p'   
*p=p'
*p 
γp'
value-to-pointer store
pointer-to-pointer store
Figure 5: PC2S propagation policy on store commands.
Pointer Conditional-Combine Semantics. PC2S general-
izes PCS by conditioning the label-join on the static type
of the data operand. If the loaded/stored data has pointer
type, it applies the NCS rule; otherwise, it applies the
PCS rule. The resulting label propagation for stores is
depicted in Figure 5.
This can be leveraged to obtain the best of both worlds.
PC2S pointer taints retain most of the advantages of PCS—
they can identify and track aliases to birthplaces of secrets,
such as data structures where secrets are stored immedi-
ately after parsing, and they automatically propagate their
labels to data stored there. But PC2S resists PCS’s over-
tainting and label creep problems by avoiding propaga-
tion of pointer labels through levels of pointer indirection,
which usually encode relationships with other data whose
labels must remain distinct and separately managed.
Condition (τ is ptr ) in Figure 4 can be further gen-
eralized to any decidable proposition on static types τ.
We use this feature to distinguish pointers that cross data
ownership boundaries (e.g., pointers to other instances
of the parent structure) from pointers that target value
data (e.g., strings). The former receive NCS treatment
by default to resist over-tainting, while the latter receive
PCS treatment by default to capture secrets and keep the
annotation burden low.
In addition, PC2S is at least as efﬁcient as PCS because
propagation policy ρ is partially evaluated at compile-
time. Thus, the choice of NCS or PCS semantics for each
pointer operation is decided purely statically, conditional
upon the static types of the operands. The appropriate
specialized propagation implementation is then in-lined
into the resulting object code during compilation.
Example. To illustrate how each semantics propagate
taint, consider the IL pseudo-code in Listing 3, which re-
visits the linked-list example informally presented in §2.2.
Input stream s includes a non-secret request identiﬁer and
a secret key of primitive type (e.g., unsigned long).
If one labels stream s secret, then the public request id
becomes over-tainted in all three semantics, which is
undesirable because a redaction of request id may crash
the program (when request id is later used as an array
index). A better solution is to label pointer p secret and
employ PCS, which correctly labels the key at the moment
it is stored. However, PCS additionally taints the next-
pointer, leading to over-tainting of all the nodes in the
Listing 3: IL pseudo-code for storing public ids and secret
keys from an unstructured input stream into a linked list.
1 store(id, request id, get(s, id size));
2 store(key, p[request id]->key,get(s,key size));
3 store(ctx t*, p[request id]->next,queue head);
containing linked-list, some of which may contain keys
owned by other users. PC2S avoids this over-tainting by
exempting the next pointer from the combine-semantics.
This preserves the data structure while correctly labeling
the secret data it contains.
Implementation
4
Figure 6 presents an architectural overview of our im-
plementation, SignaC1 (Secret Information Graph iNstru-
mentation for Annotated C). At a high level, the imple-
mentation consists of three components: (1) a source-to-
source preprocessor, which (a) automatically propagates
user-supplied, source-level type annotations to containing
datatypes, and (b) in-lines taint introduction logic into
dynamic memory allocation operations; (2) a modiﬁed
LLVM compiler that instruments programs with PC2S
taint propagation logic during compilation; and (3) a run-
time library that the instrumented code invokes during
program execution to introduce taints and perform redac-
tion. Each component is described below.
4.1 Source-Code Rewriting
Type attributes. Users ﬁrst annotate data structures con-
taining secrets with the type qualiﬁer SECRET. This in-
structs the taint-tracker to treat all instantiations (e.g., dy-
namic allocations) of these structures as taint sources. Ad-
ditionally, qualiﬁer NONSECRET may be applied to pointer
ﬁelds within these structures to exempt them from PCS.
The instrumentation pass generates NCS logic instead
for operations involving such members. Finally, qualiﬁer