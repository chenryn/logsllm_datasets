calculated. As one can see from Figure 8, the connection
rate dropped slightly for the instrumented version of Apa-
che. The average decrease is only 2.7 connections per sec-
ond (about 0.4%). In the Snare case, the average decrease
is 19.78 connections per second (about 3.44%). Figure 9
shows that there is no signiﬁcant increase in the average re-
sponse time for instrumented Apache (the average impact
is 0.56%). Snare increases the response time by 4.3%. Fig-
ure 10 shows that the average throughput decreases by 0.4
Mbps (0.6%) for the instrumented version of Apache and
by 3.3 Mbps (3.58%) when Snare is used.
In summary, the audit routines injected into Apache gen-
erate less than 1% overhead on average, which is signiﬁ-
cantly better than the overhead introduced by Snare. The
reason for such a low overhead is that audit routines are
running in the same address space as the Apache process.
Thus, no context-switch cost or memory-copy cost is im-
posed. Snare uses a daemon process to periodically read
audit data from the kernel and write the data to a log ﬁle.
There are two additional memory copies of the data between
the kernel space and the user space and two context-switch
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
d
n
o
c
e
S
/
n
o
i
t
c
e
n
n
o
C
600
500
400
300
200
100
0
0
i
)
s
(
e
m
T
e
s
n
o
p
s
e
R
.
g
v
A
0.3
0.25
0.2
0.15
0.1
0.05
0
0
100
80
60
40
20
)
s
/
t
i
b
M
(
t
u
p
h
g
u
o
r
h
T
t
n
e
i
l
C
0
0
Original
Instrumented
Snare
20
40
60
80
100
Number of clients
Original
Instrumented
Snare
20
40
60
80
100
Number of clients
Original
Instrumented
Snare
20
40
60
80
100
Number of clients
Figure 8: Client connection rate.
Figure 9: Average client response time.
Figure 10: Client throughput.
costs. On the other hand, the audit routines are only effec-
tive for Apache, while Snare logs provide information for
all processes. Considering that the experiments were con-
ducted with all unrelated system services disabled, the ma-
jority of the slowdown was caused by Snare.
6. Limitations
The approach described in this paper has several limi-
tations. First, some attacks, notably buffer overﬂow attacks,
cannot be detected by this approach. Buffer overﬂow attacks
modify the program’s control ﬂow and execute code on the
stack, which is outside the original program code. Thus, a
successful exploitation of buffer overﬂow will bypass in-
serted auditing routines. However, since some tools (e.g.,
StackGuard [5]) can prevent these attacks and many exist-
ing IDSs can successfully detect them, this limitation does
not impact the overall applicability of this approach.
Second, there are some limitations of the approach that
are related to the Dyninst API. One is that the Dyninst API
does not allow further instrumentation once the monitoring
daemon detaches from an application. Because of this limi-
tation, a new audit library can only take effect when the cor-
responding application is restarted. Currently, this is not a
problem, and future versions of Dyninst are expected to al-
low multiple instrumentations for an application.
7. Conclusions and Future Work
In this paper, a new approach for detecting attacks ex-
ploiting application-logic errors has been presented. The
approach exploits a binary rewriting technique to collect
application-speciﬁc data. A tool that uses the data to de-
tect attacks has also been developed. The performance eval-
uation of the tool showed that effective intrusion detection
can be achieved at a low cost.
The tool complements existing operating system audit-
ing facilities and network auditing procedures. The ap-
proach can be used in those cases where semantically-rich
data streams are needed for effective intrusion detection.
Since our approach inserts code into an application, it af-
fects speciﬁcation-based IDS [19] and systems that monitor
the execution ﬂow of an application [10, 37]. Future work
will study how to address these problems.
A further evolution of this approach is to automatically
generate the instrumentation routines directly from a high-
level description of the attack signatures. By doing this, it
will be possible to relieve the auditor from the task of iden-
tifying the instrumentation points and writing the auditing
code. In addition, this approach would allow one to perform
application auditing only if there is a signature that would
actually use the data.
Acknowledgments
This research was supported by the National Science
Foundation under grants CCR-0209065 and CCR-0238492
and by the Army Research Ofﬁce, under agreement
DAAD19-01-1-0484. The views and conclusions con-
tained herein are those of the authors and should not be
interpreted as necessarily representing the ofﬁcial poli-
cies or endorsements, either expressed or implied, of the
National Science Foundation,
the Army Research Of-
ﬁce, or the U.S. Government.
References
[1] M. Almgren and U. Lindqvist. Application-Integrated Data
In Proceedings of Re-
Collection for Security Monitoring.
cent Advances in Intrusion Detection (RAID), LNCS, pages
22–36, Davis, CA, October 2001. Springer.
[2] M. Bishop. A Standard Audit Trail Format. In Proc. 18th
NIST-NCSC National Information Systems Security Confer-
ence, pages 136–145, Baltimore, MD, 1995.
[3] B. Buck and J. K. Hollingsworth. An API for Runtime Code
Patching. The International Journal of High Performance
Computing Applications, 14(4):317–329, Winter 2000.
[4] A. Chander, J. C. Mitchell, and I. Shin. Mobile Code Secu-
rity by Java Bytecode Instrumentation. In DARPA Informa-
tion Survivability Conference and Exposition (DISCEX II),
Anaheim, CA, June 2001.
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
[5] C. Cowan, C. Pu, D. Maier, J. Walpole, P. Bakke, S. Beattie,
A. Grier, P. Wagle, Q. Zhang, and H. Hinton. StackGuard:
Automatic Adaptive Detection and Prevention of Buffer-
Overﬂow Attacks.
In 7th USENIX Security, pages 63–78,
San Antonio, TX, January 1998.
[6] T. W. Curry. Proﬁling and Tracing Dynamic Library Usage
Via Interposition. In USENIX Summer 1994 Technical Con-
ference, pages 267–278, Boston, MA, 1994.
[7] D. P. Ghormley and D. Petrou and S. H. Rodrigues and T.
E. Anderson. SLIC: An Extensibility System for Commod-
ity Operating Systems. In Proceedings of the USENIX 1998
Annual Technical Conference, New Orleans, LO, 1998.
[8] T. E. Daniels and E. H. Spafford. Identiﬁcation of Host Au-
dit Data to Detect Attacks on Low-level IP Vulnerabilities.
Journal of Computer Security, 7(1):3–35, 1999.
[9] D. Engler, B. Chelf, A. Chou, and S. Hallem. Checking
System Rules Using System-Speciﬁc, Programmer-Written
Compiler Extensions. In Proceedings of the Fourth Sympo-
sium on Operating Systems Design and Implementation, San
Diego, CA, October 2000.
[10] S. Forrest. A Sense of Self for UNIX Processes. In Proceed-
ings of the IEEE Symposium on Security and Privacy, pages
120–128, Oakland, CA, May 1996.
[11] T. Fraser, L. Badger, and M. Feldman. Hardening COTS
Software with Generic Software Wrappers.
In IEEE Sym-
posium on Security and Privacy, pages 2–16, Oakland, CA,
1999.
[12] R. Hastings and B. Joyce. Purify: Fast Detection of Mem-
ory Leaks and Access Errors. In Proc. of the Winter USENIX
Technical Conference, San Francisco, CA, January 1992.
[13] G. Hunt and D. Brubacher. Detours: Binary Interception of
Win32 Functions. In Proceedings of the 3rd USENIX Win-
dows NT Symposium, pages 135–144, Seattle, WA, 1999.
[14] K. Ilgun. USTAT: A Real-time Intrusion Detection System
for UNIX. In Proceedings of the IEEE Symposium on Re-
search on Security and Privacy, Oakland, CA, May 1993.
[15] M. B. Jones. Interposition Agents: Transparently Interpos-
ing User Code at the System Interface. In Proceedings of the
Symposium on Operating Systems Principles, pages 80–93,
Asheville, NC, 1993.
[16] F. Kerschbaum, E. H. Spafford, and D. Zamboni. Using In-
ternal Sensors and Embedded Detectors for Intrusion Detec-
tion. Journal of Computer Security, 10(1-2):23–70, 2002.
[17] G. H. Kim and E. H. Spafford. The Design and Implemen-
tation of Tripwire: A File System Integrity Checker. In Pro-
ceedings of the 2nd ACM Conference on Computer and com-
munications security, pages 18–29, Fairfax, VA, 1994.
[18] C. Ko and T. Redmond. Noninterference and Intrusion De-
tection. In Proccedings of the IEEE Symposium on Security
and Privacy, Berkeley, CA, 2002.
[19] C. Ko, M. Ruschitzka, and K. Levitt. Execution Monitor-
ing of Security-Critical Programs in Distributed Systems: A
Speciﬁcation-based Approach. In Proceedings of the 1997
IEEE Symposium on Security and Privacy, pages 175–187,
Oakland, CA, May 1997.
[20] B. A. Kuperman and E. Spafford. Generation of Application
Level Audit Data via Library Interposition. Technical Report
CERIAS TR-99-11, COAST Laboratory, Purdue University,
October 1999.
[21] J. Larus and E. Schnarr. EEL: Machine-Independent Exe-
cutable Editing. In Proceedings of the ACM SIGPLAN ’95
Conference on Programming Language Design and Imple-
mentation, La Jolla, CA, June 1995.
[22] U. Lindqvist and P. Porras. Detecting Computer and Net-
work Misuse with the Production-Based Expert System
Toolset (P-BEST). In IEEE Symposium on Security and Pri-
vacy, pages 146–161, Oakland, California, May 1999.
[23] T. F. Lunt. Detecting Intruders in Computer Systems. In Pro-
ceedings of the Sixth Annual Symposium and Technical Dis-
plays on Physical and Electronic Security, 1993.
[24] B. P. Miller, M. Christodorescu, R. Iverson, T. Kosar, A. Mir-
gorodskii, and F. Popovici. Playing Inside the Black Box:
Using Dynamic Instrumentation to Create Security Holes. In
the Second Los Alamos Computer Science Institute Sympo-
sium, Sante Fe, NM, October 2001.
[25] R. Pandey and B. Hashii. Providing Fine-Grained Access
Control for Java Programs via Binary Editing.
In Proc.
of the 13th Conference on Object-Oriented Programming
(ECOOP’99), pages 449–473, Lisbon, Portugal, 1999.
[26] N. Provos. Improving Host Security with System Call Poli-
cies. In Proceedings of the 12th USENIX Security Sympo-
sium, Washington, DC, 2003.
[27] T. Ptacek and T. Newsham.
Insertion, Evasion and Denial
of Service: Eluding Network Intrusion Detection. Technical
report, Secure Networks, January 1998.
[28] X. Qie, R. Pang, and L. Peterson. Defensive Programming:
Using an Annotation Toolkit to Build Dos-Resistant Soft-
ware. In Proceedings of the Fifth Symposium on Operating
Systems Design and Implementation, Boston, MA, Decem-
ber 2002.
[29] M. J. Ranum and F. M. Avolio. A Toolkit and Methods for
In USENIX Conference, pages 37–44,
Internet Firewalls.
Boston, MA, 1994.
[30] M. Roesch. Snort - Lightweight Intrusion Detection for Net-
works. In Proceedings of the USENIX LISA ’99 Conference,
Seattle, WA, November 1999.
[31] T. Romer, G. Voelker, D. Lee, A. Wolman, W. Wong,
H. Levy, and B. Bershad. Instrumentation and Optimization
of Win32/Intel Executables Using Etch.
In USENIX Win-
dows NT Workshop, Seattle, WA, 1997.
[32] SNARE - System iNtrusion Analysis and Reporting Envi-
ronment. http://www.intersectalliance.com/
projects/Snare.
[33] S. Soman, C. Krintz, and G. Vigna. Detecting Malicious Java
Code Using Virtual Machine Auditing. In Proc. of the 12th
USENIX Security Symposium, pages 153–168, Washington,
DC, 2003.
[34] A. Srivastava and A. Eustace. ATOM - A System for Build-
ing Customized Program Analysis Tools. In Proceesings of
the Symposium on Programming Language Design and Im-
plementation, pages 196–205, Orlando, FL, 1994.
[35] D. Thain and M. Livny. Multiple Bypass: Interposition
Agents for Distributed Computing. Journal of Cluster Com-
puting, 4(1):39–47, March 2001.
[36] W. Venema. TCP Wrapper: network monitoring, access con-
trol, and booby traps. In USENIX Proceedings of the Third
UNIX Security Symposium, Sept. 1992.
[37] D. Wagner and D. Dean. Intrusion Detection via Static Anal-
ysis. In Proceedings of the IEEE Symposium on Security and
Privacy, Oakland, CA, May 2001. IEEE Press.
[38] J. Zimmermann, L. M´e, and C. Bidan. Experimenting with a
Policy-Based HIDS Based on an Information Flow Control
Model. In Proceedings of the 19 Annual Computer Security
Applications Conference (ACSAC), Las Vegas, NV, 2003.
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE