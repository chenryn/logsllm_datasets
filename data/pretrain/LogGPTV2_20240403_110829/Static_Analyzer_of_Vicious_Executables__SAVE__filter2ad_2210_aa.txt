title:Static Analyzer of Vicious Executables (SAVE)
author:Andrew H. Sung and
Jianyun Xu and
Patrick Chavez and
Srinivas Mukkamala
Static Analyzer of Vicious Executables (SAVE) 
*A. H. Sung, J. Xu, *P. Chavez, *S. Mukkamala
Department of Computer Science and 
*Institute for Complex Additive Systems Analysis 
New Mexico Tech 
Socorro, New Mexico 87801 
Sung|dennisxu|pchavez|PI:EMAIL 
Abstract 
Software security assurance and malware (trojans, 
worms,  and  viruses,  etc.)  detection  are  important 
topics of information security. Software obfuscation, a 
general technique that is useful for protecting software 
from reverse engineering, can also be used by hackers 
to  circumvent  the  malware  detection  tools.  Current 
static  malware  detection  techniques  have  serious 
limitations, and sandbox testing also fails to provide a 
complete solution due to time constraints. 
(cid:131)
Examples:  Melissa,  LoveLetter,  VBScript  worm, 
SoBig 
Second generation 
(cid:131) Malware that shares the properties of a worm 
(cid:131) Does  not 
intervention 
require  human 
for 
replication and spreading 
(cid:131) Automatic scanning of victims for vulnerabilities 
(cid:131) Hybrid in nature, blended with viruses and trojans 
(cid:131)
(cid:131)
Propagates via Internet 
Examples:  Slapper  worm,  SQL  Slammer  worm, 
and Blaster worm 
In this paper, we present a  robust signature-based 
technique,  with  emphasis  on 
malware  detection 
detecting  obfuscated  (or  polymorphic)  malware  and 
mutated  (or  metamorphic)  malware.  The  hypothesis  is 
that all versions of the same malware share a common 
core signature that is a combination of several features 
of  the  code.  After  a  particular  malware  has  been  first 
identified,  it  can  be  analyzed  to  extract  the  signature, 
which  provides  a  basis  for  detecting  variants  and 
mutants  of 
future. 
Encouraging  experimental  results  on  a  large  set  of 
recent malware are presented.
the  same  malware 
the 
in 
1. Introduction 
Due  to  the  increasing  prevalence  of  malware 
(trojans,  worms,  and  virues,  etc.)  of  all  sorts  and  the 
significant economic loss they incur to individuals and 
organizations,  one  of  the  current  computer  security 
topics of great interest is malware detection. 
A  classification  of  malware  based  on  payload, 
enabling  vulnerability,  and  propagation  mechanism 
gives three generations [2]. 
First generation 
(cid:131) Malware that shares the properties of a virus 
(cid:131)
Requires  human  action  to  trigger  replication  and 
spreading 
Propagates via email and file sharing 
(cid:131)
Third generation 
(cid:131)
(cid:131)
(cid:131)
(cid:131) Geographical 
Pre-compiled vulnerable targets 
Exploits known and unknown vulnerabilities 
Employs multiple attack vectors 
region-  or  organization-specific 
malware 
(cid:131) Attacks security technologies and products 
are  mostly 
Since theoretical studies have established that there 
is  no  algorithm  that  can  detect  all  types  of  viruses 
[3,4],  heuristic  techniques  have  been  proposed  and 
utilized.  Current  commercial  anti-virus  software, 
however, 
scanning 
polymorphic  and  metamorphic  versions  of  identified 
malware.  Detection 
that  use  program 
annotation  have  been  proposed;  however,  the  amount 
of  time  required  for  analysis  and  annotation,  as 
reported  by  the  authors,  is  too  high  for  even  fairly 
simple malware to be, in our view, practical [5,6]. 
techniques 
ineffective 
in 
Our  work  is  based  on  the  assumption  that  an 
original malware M contains a malicious set of systems 
calls S. A variant of the original malware, O(M), that is 
obtained  by  applying  an  obfuscation  technique  O
retains  the  functionality  of  M and  contains  a  set  of 
system  calls  S’.  The  problem  is  then  to  calculate  a 
similarity measure between S and S’.
in  section  3.3) 
We  apply  the  traditional  obfuscation  techniques 
(described 
to  original  malware 
(executables) to generate (polymorphic) variants. Then 
the functionality of the mutants is verified to ensure the 
validity and fairness of comparison. Next, the variants 
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 11:39:06 UTC from IEEE Xplore.  Restrictions apply. 
are tested against eight commercial anti-virus tools. To 
our  surprise  all  the  commercial  scanners  failed  to 
detect  variants  obtained  through  simple  obfuscations. 
When  they  are  tested  using  our  algorithm  (named 
SAVE for Static Analyzer of Vicious Executables) that 
is  based  on  the  similarity  measure  of  sequences  of 
systems  calls,  the  results  proved  to  be  much  more 
accurate. 
Type 1: Null operations and dead code insertion 
NOPs are inserted into the malicious code.  There is 
virtually  no  modification  to  data  or  control  flow.    An 
example  of  a  type  1  transformation  is  presented  in 
Figure 1 below.  On the left we have the original code 
and  on  the  right  we  have  the  modified  code  with  null 
operations inserted after every two lines. 
2. Obfuscation 
Obfuscation  is  to  obscure  information  such  that 
others  cannot  construe  the  true  meaning.    This  is 
certainly true for code obfuscation where the objective 
is  to  hide  the  underlying  logic  of  a  program.  As  the 
opposite  of  code  optimization  where  the  goal  is  to 
minimize  the  execution  time  or  memory  size,  code 
obfuscation  seeks  to  maximize  the  ‘obscurity’  of  the 
code  [9]  such  that  others  are  prevented  from  gaining 
knowledge about it. 
With  respect  to  malware,  code  obfuscation  is  an 
appealing  technique  to  hinder  detection.    A  simple 
obfuscation,  requiring  very  little  effort  on  the  part  of 
the virus writer, may render a known virus completely 
undetectable to the commercial scanners. 
Applying  a  clever  obfuscating  transformation  to  a 
malware  amounts  to  some  kind  of  self-decrypting 
rendered 
encryption.  The  malicious 
incomprehensible  while 
harmful 
functionality when activated. 
code 
retaining 
is 
its 
2.1 Obfuscation theory 
A  concise  description  of  code  obfuscation  was 
presented  by  Collberg  and  Thomborson.    Given  a 
program  P  and  a  set  of  obfuscation  transformations  T
we want to generate a program P’ such that: 
(cid:131)
(cid:131)
(cid:131)
P’ retains the functionality of P
P’ is difficult to reverse engineer 
P’  performs  comparably  to  P  (i.e.  the  cost  of 
obfuscation is minimized) 
Obfuscation  transformations  need  to  be  resilient. 
After applying  transformation Ti to program  statement 
Sj  and  generating  an  obfuscated  statement  Sj’,  it  must 
be  prohibitively  hard  to  build  an  automated  tool  that 
can generate Sj from Sj’.
2.2 Classification 
For  simplicity  we  have  classified  the  obfuscated 
malware into five types. Generally, the complexity and 
‘robustness’  of  the  malware  increases  as  their  type 
indices increases. 
mov 
mov 
sub 
lea 
push 
Mov 
Mov
Nop
Sub 
Lea 
Nop
Push 
Original code 
eax, -44(ebp) 
-44(ebp), ebx 
12, esp 
-24(ebp) 
eax 
After transformation 
eax, -44(ebp) 
-44(ebp), ebx 
12, esp 
-24(ebp) 
Null Operation
Eax 
Figure 1. Example of null operation insertion 
Inserting null operations is similar to inserting white 
space in a document: it may take longer to read but no 
more difficult as the content remains the same. 
Type 2: Data modification 
Some  data  obfuscating  transformation  is  applied, 
such  as  string  splitting  or  variable  type  replacement. 
For example, we could replace a Boolean variable with 
two  integers.  If  they  are  equal,  the  statement  is  true, 
otherwise it is false. In the example below, Figure 2, x
is  a  Boolean  variable  and  a and  b  are  integers.  The 
code  on  the  left  is  the  original  control  flow  and  the 
code on the right performs exactly  the same but  has a 
different signature. 
cmpb 
je 
mov 
cmpl 
jge 
Original code and meaning
0, x 
.sub 
if (x ==true) 
  goto sub 
Transformed code and meaning 
a, eax 
b, eax 
.sub 
if (a < b) 
  goto sub 
Figure 2. Example of data flow obfuscation 
Type 3: Control flow modification 
Control 
flow  obfuscating 
transformations  are 
applied. Code is swapped around and jump instructions 
are inserted. For example,  we could copy  the contents 
of  a  subroutine  to  another  location  in  the  file  and  add 
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 11:39:06 UTC from IEEE Xplore.  Restrictions apply. 
Type 5: Pointer aliasing 
The  last  technique  is  to  introduce  pointer  aliasing. 
Variables  are  replaced  with  global  pointers  and 
functions are referred to by arrays of function pointers. 
This  type  of  transformation  is  relatively  easy  to 
implement  using  high  level  languages  that  allow 
pointer  references  but  tricky  (at  best)  using  assembly 
languages.  Pointer  aliasing  can  be  as  simple  as 
changing  a  =  b  into  *a  =  **b  or  as  complex  as 
converting  all  variables  and  functions  into  an  array  of 
pointers to be referenced by pointers to pointers. 
2.3 Obfuscation used in this project 
In our research we discovered that most commercial 
virus  scanners  could  be  defeated  with  very  simple 
obfuscation  techniques.  For  example,  simple  program 
entry point modifications consisting of two extra jump 
instructions  effectively  defeated  most 
scanners. 
Therefore,  we  only  used 
the  bare  minimum  of 
obfuscation  needed  to  foil  detection.  Our  goal  is  to 
show how trivial it is to modify recent malware to beat 
existing  scanning  techniques  using  only  the  compiled 
executable and a few tools. 
The  obfuscation  process  is  presented  in  Figure  5. 
The  binary  code  is  disassembled  into  a  more  readable 
format so we can more easily understand the program. 
Once  we  have  the  disassembled  program  and  have 
understood it, we pick an area to perform obfuscation.  
The  first 
target  when  applying  a  control  flow 
transformation  is  to  attack  the  program’s  entry  point; 
but  when  using  a  data  transformation  we  generally 
have  to  take  a  guess.  We  decide  where  and  what 
modifications  need  to  be  performed  and  change  the 
binary file directly, using the disassembled version as a 
guide or map. Once all modifications have been made, 
the file is examined using the anti-virus scanners. 
All  variants  with  the  exception  of  the  MyDoom
virus  were  generated  using  off-the-shelf  hex  editing 
tools.  We  obtained  a  copy  of  the  MyDoom.A  source 
code  and  made  all  our  modifications  using  the 
Microsoft Visual development suite. The Hackman hex 
editing  utility  was  used  to  generate  all  other  variants 
[11].   
jumps  to  and  from  the  subroutine.  The  code  would 
function  exactly  the  same  but  look  quite  different.  In 
Figure 3 below, three lines of code have been shifted to 
some location (denoted as [shift]) and helper code has 
been inserted. 
cmp 
jne 
sub 
push 
jmp 
nop 
nop
push 
cmp 
jne
sub 
jmp 
Original code
24, eax 
.sub 
12, eax 
eax 
After transformation 
[shift] 
Helper Code 
eax  
Original execution 
path resumes
24, eax 
.sub – [shift]
12, eax 
-[shift]Helper Code 
Figure 3. Example of control flow obfuscation 
Type 4: Data and control flow modification 
Pull out all the stops and combine data and control 
flow  transformations.  At  this  level  junk  code  is 
inserted and variables can be completely replaced with 
large  sections  of  needless  code.    For  example,  we  can 
modify  all  Boolean  variables  as  above  and  transpose 
the program’s entry point as in Figure 4. 
cmp 
jne 
sub 
push 
jmp 
nop 
nop
push 
mov
cmpl
jle
jne
sub 
Original code 
24, eax 
.sub 
12, eax 
eax 
After transformation 
[shift] 
Helper Code 
eax 
Original  execution  path 
resumes
24, eax Data obfuscation
b, eax Data obfuscation 
.dead_code
.sub – [shift]
12, eax 
jmp
-[shift]Helper Code
Figure  4.  Example  of  data  and  control  Flow 
obfuscation 
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 11:39:06 UTC from IEEE Xplore.  Restrictions apply. 
Malware PE binary code 
Decompress 
Program analysis 
Applying Obfuscation 
Malware Detected 
Scanner? 
Malware  Not  Detected 
Record malware  
&
obfuscation type 
Figure  5:    Obfuscation  attack  process  on 
commercial scanners  
3. Malware used for analysis 
Four recent viruses (executables) are used for analysis 
and experiments. The description of them given below 
is  based  on 
the  payload,  enabling  vulnerability, 
propagation medium, and the systems infected. 
(cid:131) W32.Mydoom:  A  mass  mailing  worm  and  a 
blended  back  door  that  arrives  as  an  attachment 
with  file  extensions  .bat,  .cmd,  .exe,  .pif,  .scr  or 
.zip [7]. The payload performs a denial of service 
against  www.sco.com  and  creates  a  proxy  server 
for  remote  access  using  TCP  ports  3127  through 
3198.  Infects all Windows systems. 
(cid:131) W32.Blaster:  Exploits  windows  DCOM  RPC 
vulnerability  using  TCP  port  135.  The  payload 
launches  a  denial  of  service  attack  against 
windowsupdate.com, might cause systems to crash 
and  opens  a  hidden  remote  cmd.exe  shell. 
Propagates via TCP ports 135, 4444 and UDP port 
69. Infects only Windows 2000 and XP.  
(cid:131) W32.Beagle: A  mass  mailing  worm blended  with 
a back door. The worm contains large scale email 
with extensions, .wab, .htm, .xml, .nch, .mmf, .cfg, 
.asp, and etc. [7]. Uses its own SMTP engine, TCP 
port 2745 to spread and also tries to spread via file 
sharing networks  like Kazza.  Infects all Windows 
systems.  
(cid:131) Win32.Bika: According to the virus library it is a 
harmless  per-process  memory  resident  parasitic 
Win32  virus.  It  infects  only  Win32  applications 
[8].  The  virus  writes  itself  to  the  end  of  the  file 
while  the  host  file  is  infected.  Once  the  host 
program  is  infected  it  starts  the  virus  hooks  “set 
current 
functions 
(SetCurrentDirectoryA, 
SetCurrentDirectoryW) 
that are imported by the host program and stays as 
a background thread of infected process, and then 
infects  files 
the  directories  when  current 
directory  is  being  changed.  The  virus  does  not 
manifest itself. 
directory”  Win32  API 
in 
4. SAVE 
Our  algorithm  of  calculating  similarity  measure  is 
performed  directly  on  Microsoft  Windows  Portable 
Executable  (PE)  binary  code.  It  is  structured  into  two 
steps which are illustrated in Figure 6.  
Signature DB
PE binary 
code 
Decompression
PE binary 
parser 
API 
sequence 
Similarity 