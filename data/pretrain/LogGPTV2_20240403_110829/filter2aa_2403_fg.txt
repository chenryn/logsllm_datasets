mov     edi, edi 
push     ebp 
mov     ebp, esp 
push     esi 
mov     esi, [ebp+arg_0] 
add     dword ptr [esi+8], 0FFFFFFFFh ; RecursionCount 
jnz     short loc_7DE922B2 
push     ebx 
push     edi 
lea     edi, [esi+4] ; LockCount 
mov     dword ptr [esi+0Ch], 0 
mov     ebx, 1 
mov     eax, edi 
lock xadd [eax], ebx 
inc     ebx 
cmp     ebx, 0FFFFFFFFh 
jnz     loc_7DEA8EB7 
loc_7DE922B0: 
pop     edi 
pop     ebx 
loc_7DE922B2: 
xor     eax, eax 
pop     esi 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 68 章  Windows NT 
699 
pop     ebp 
retn     4 
... skipped 
XADD 指令的功能是：先交换操作数的值，然后再进行加法运算。在本例中，它将 LockCount 与数字
1 的和存储于第一个操作数，同时将 LockCount 的初始值传递给 EBX 寄存器。但是 EBX 里的这个值也随
即被后面的 INC 指令递增，最终与 LockCount 的值同步。因为它带有 LOCK 前缀，所以属于原子操作。这
就意味着所有的其他 CPU（不管是几核的）都不能同时访问那片内存区域。 
LOCK 前缀非常重要。不同的 CPU 或者 CPU 核心（core）可能会加载同一个进程的不同线程。若使用无
LOCK 前缀的指令操作临界区段的数据，很可能发生无法预料的情况。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第七
七部
部分
分  
常
常用
用工
工具
具  
异步社区会员 dearfuture(15918834820) 专享 尊重版权
702 
逆向工程权威指南 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 6699 章
章    反
反汇
汇编
编工
工具
具  
69.1  IDA 
IDA PRO 简称 IDA（Interactive Disassembler），是一个世界顶级的交互式反汇编工具，由总部位于比
利时列日市（Liège）的 Hex-Rayd 公司研发。 
Hex-Rayd 为希望了解 IDA 基本功能的用户提供了一个功能有限的免费版本。这个免费版是由 5.0 版精
简而来，它的下载地址是：https://www.hex-rays.com/products/ida/support/download_freeware.shtml。 
本书的附录 F.1 收录了 IDA 常用的快捷键。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 7700 章
章    调
调  试
试  工
工  具
具  
70.1  tracer 
我很少使用debugger，往往用自己研发的tracer工具对程序进行跟踪和调试。
①
话说回来，在学习和摸索的过程中，初学者还是应当熟悉和掌握debugger程序的使用方法，用debugger
查看寄存器的状态变化
近期以来，我完全不用 debugger 了。debugger 就是一个在程序执行期间辨别函数的参数，或者在某个
断点查看寄存器状态的工具。每次都使用 debugger 进行调试，未免过于烦琐。所以我就自己编写了 tracer
工具。tracer 程序采用控制台界面，能够从命令行里直接发送命令，同样可以在函数的执行过程中进行中
断，并且还能在任意地址设置中断、查看进程状态和修改数据，完成各种各样的任务。 
②
70.2  OllyDbg 
，观察标识位、数据，并手动修改各项数据，验证数据对程序的影响。 
OllyDbg 是一款十分流行的用户模式（user-mode,Ring 3 级）调试程序。它的官方网站是：http://www. 
ollydbg.de/。 
本书的附录 F.2 收录了 OllyDbg 常用的快捷键。 
70.3  GDB 
GDB 不是一款图形化调试器，因而不太受逆向工程研究人员关注。但是它的功能更为强大，可谓独具
特色。 
本书的附录 F.5 收录了部分 GDB 常用指令。 
① tracer 工具的下载地址是 http://yurichev.com/tracer-en.html。 
② 经典的 SoftICE、OllyDbg 和 WinDbg 工具能够用高亮信息提示寄存器变化。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 7711 章
章    系
系统
统调
调用
用的
的跟
跟踪
踪工
工具
具  
71.1  strace/dtruss 
Linux 内核提供了一款非常有用的调试工具，它可以跟踪某个进程调用的系统调用（以及该进程所接
收到的信号）
①
① 有关 syscalls 的详细介绍，请参见本书第 66 章。 
。这款工具就是strace。它属于命令行工具，在使用时，我们可以把希望跟踪的应用程序直
接指定为命令参数。例如： 
# strace df -h 
... 
access("/etc/ld.so.nohwcap", F_OK)        = -1 ENOENT (No such file or directory) 
open("/lib/i386-linux-gnu/libc.so.6", O_RDONLY|O_CLOEXEC) = 3 
read(3, "\177ELF\1\1\1\0\0\0\0\0\0\0\0\0\3\0\3\0\1\0\0\0\220\232\1\0004\0\0\0"..., 512) = 512 
fstat64(3, {st_mode=S_IFREG|0755, st_size=1770984, ...}) = 0 
mmap2(NULL, 1780508, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0xb75b3000 
Mac OS X 的 dtruss 工具与 Linux 下的 strace 功能相同。 
Cygwin 环境里同样也有 strace 程序。如果我没搞错的话，Cygwin 里的 strace 只能分析那些在 Cygwin
环境里编译出来的.exe 文件。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 7722 章
章    反
反编
编译
译工
工具
具  
Hex-Rays Decompiler 是唯一一款众所皆知的、公开销售的、品质较高的 C 语言反编译工具。它的官方
网站是：https://www.hex-rays.com/products/decompiler/。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 7733 章
章    其
其  他
他  工
工  具
具  
 Microsoft Visual Studio Express: 鼎鼎大名的 Visual Studio 的精简版，可用于简单的程序调试。本
书的附录 F.3 收集了它的部分选项及功能。其官方网站是：https://www.visualstudio.com/en-US/ 
products/visual-studio-express-vs。 
 Hiew2：一款优秀的 16 进制编辑器，可以对应用程序进行反汇编，而且支持对可执行文件的 16
进制代码及汇编语言代码的修改，使用起来非常方便。其官方网站是：http://www.hiew.ru/。 
 Binary grep：在海量文件（包括非可执行程序）中搜索常量或任意字节序列的可执行工具。其官
方网站是：https://github.com/yurichev/bgrep。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第八
八部
部分
分  
更
更多
多范
范例
例  
异步社区会员 dearfuture(15918834820) 专享 尊重版权
704 
逆向工程权威指南 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 7744 章
章    修
修改
改任
任务
务管
管理
理器
器（
（VViissttaa）
）  
如果主机上安装的是四核 CPU，那么 Windows 任务管理器应当显示出 4 个 CPU 的性能统计图表。本
章将要稍微 hack 任务管理器，让它显示更多的 CPU 运算核心。 
首先需要了解的问题是：任务管理器如何知道 CPU 有多少个运算核心？虽然运行于 win32 用户空间的
GetSystemInfo()函数确实可以反馈这一信息，但是任务管理器 taskmgr.exe 没有直接导入这个函数。它多次调
用 NTAPI 中的 NtQuerySystemInformation()函数获取的各种系统信息，也是通过后者了解 CPU 的具体情况。 
NtQuerySystemInformation()函数有四个参数：第一个参数是查询的系统信息类型
①
要获取CPU信息，就要在调用它的时候把第一个参数设置为常量SystemBasicInformation
；第二个参数是一
个指针，这个指针用来返回系统的HandleList；第三个参数是程序员指定分配给HandleList的内存空间大小；
第四个参数是NtQuerySystemInformation返回的HandleList的大小。 
②。 
因此，我们要查找的调用指令大体会是“NtQuerySystemInformation(0, ?, ?, ?)”。第一步当然是用 IDA
打开 taskmgr.exe 文件。在处理微软的官方程序时，IDA 能够下载与之相应的 PDB 文件并显示全部函数名
称。显而易见的是，任务管理器是用 C++编写的程序，而且它使用的函数名称和类（class）名称真的是不
为人知。在它使用的类名称里，我们可以看到 CAdapter、CNetPage、CPerfPage、CProcInfo、CProcPage、
CSvcPage、CTaskPage 和 CUserPage。这些类名称和任务管理器程序窗口的标签（tab）有对应关系。 
在跟踪了 NtQuerySystemInformation()函数的每次调用过程之后，我们可以统计出传递给函数的第一个
参数。在图 74.1 中可以看到，部分调用过程里的第一个参数值明显不是零，所以被标记上了“Not Zero”。
另外，还有一些函数调用的情况非常特殊，本章的第二部分再进行有关讲解。总之，我们要找那些“第一
个参数是零”的、NtQuerySystemInformation()函数的调用语句。 
图 74.1  IDA：NtQuerySystemInformation()函数的 xrefs 
那些不公开的名称暂且放置一边。 
在检索“NtQuerySystemInformation(0, ?, ?, ?)”的调用语句时，我们可以很快地在 InitPerfInfo()里找到
如下所示的这种语句。 
指令清单 74.1  taskmgr.exe (Windows Vista) 
.text:10000B4B3    
xor     r9d, r9d 
.text:10000B4B6    
lea     rdx, [rsp+0C78h+var_C58] ; buffer 
.text:10000B4BB    
xor     ecx, ecx 
.text:10000B4BD    
lea     ebp, [r9+40h] 
① 后面提到的 HandleList 就是函数应当反馈的类型信息。 
② 这个常量的值为零。更多信息请参考 MSDN: https://msdn.microsoft.com/en-us/library/windows/desktop/ms724509(v=vs.85).aspx。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
712 
逆向工程权威指南（下册） 
.text:10000B4C1    
mov     r8d, ebp 
.text:10000B4C4    
call     cs:__imp_NtQuerySystemInformation ; 0 
.text:10000B4CA    
xor      ebx, ebx 
.text:10000B4CC    
cmp      eax, ebx 
.text:10000B4CE    
jge      short loc_10000B4D7 
.text:10000B4D0 
.text:10000B4D0 loc_10000B4D0:  
; CODE XREF: InitPerfInfo(void)+97 
.text:10000B4D0                
; InitPerInfo(void)+AF 
.text:10000B4D0    
xor      al, al 
.text:10000B4D2    
jmp      loc_10000B5EA 
.text:10000B4D7 ; ---------------------------------------------------------------------------- 
.text:10000B4D7 
.text:10000B4D7 loc_10000B4D7:   
; CODE XREF: InitPerfInfo(void)+36 
.text:10000B4D7    
mov     eax, [rsp+0C78h+var_C50] 
.text:10000B4DB    
mov      esi, ebx 
.text:10000B4DD    
mov      r12d, 3E80h 
.text:10000B4E3    
mov      cs:?g_PageSize@@3KA, eax ; ulong g_PageSize 
.text:10000B4E9    
shr     eax, 0Ah 
.text:10000B4EC    
lea      r13, __ImageBase 
.text:10000B4F3    
imul     eax, [rsp+0C78h+var_C4C] 
.text:10000B4F8    
cmp      [rsp+0C78h+var_C20], bpl 
.text:10000B4FD    
mov     cs:?g_MEMMax@@3_JA, rax ; __int64 g_MEMMax 
.text:10000B504    
movzx   eax, [rsp+0C78h+var_C20] ; no. of CPUs 
.text:10000B509    
cmova   eax, ebp 
.text:10000B50C    
cmp      al, bl 
.text:10000B50E    
mov     cs:?g_cProcessors@@3EA, al ; uchar g_cProcessors 
从微软的服务器上下载相应的 PDB 文件之后，IDA 就能够给各个变量分配正确的变量名称。我们不难
从中找到全局变量 g_cProcessors。 
传递给 NtQuerySystemInformation()函数的第二个参数（即接收缓冲区）是 var_C58。var_C20 和 var_C58
之间的地址差值是 0xC58−0xC20=0x38(56)。根据 MSDN 的官方说明，可知返回值的数据格式如下： 
typedef struct _SYSTEM_BASIC_INFORMATION { 
     BYTE Reserved1[24]; 
     PVOID Reserved2[4]; 
     CCHAR NumberOfProcessors; 
} SYSTEM_BASIC_INFORMATION; 
因为本例是在 x64 系统上的演示，所以 PVOID 占用 8 个字节。两个“reserved”保留字段共占用 24+4×8＝
56 字节。这意味着 var_C20 很可能就是_SYSTEM_BASIC_INFORMATION 里的 NumberOfProcessors 字段。 
下面我们来验证这一推论。把 C:\Windows\System32 里的 taskmgr.exe 复制出来，然后我们在对复制品
进行修改，以防 Windows 的文件保护机制自动恢复原始文件。 
使用 Hiew 打开复制出来的文件，然后找到图 74.2 所示的程序地址。 
图 74.2  Hiew：找到修改点 
接下来替换 MOVZX 指令，通过 MOV 指令直接把返回结果改为 64（将 CPU 设为 64 核）。由于修改
后的指令比原始指令短 1 个字节，所有我们还需添加 1 个 NOP 指令。如图 74.3 所示。 
图 74.3  Hiew：修改程序 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 74 章  修改任务管理器（Vista） 
713 
修改后的这个程序可以正常运行！当然，图表中的统计信息肯定是不正确的。CPU 的总负载偶尔还会超过
100%。如图 74.4 所示。 
图 74.4  被骗的 Windows 任务管理器 
刚才我们把 CPU 运算核心的总数改为了 64（更大的值会使任务管理器崩溃）。显然 Windows Vista 的
任务管理器无法在拥有更多运算核心的计算机上运行。这也可能是微软通过静态的数据结构把有关数值限
定在 64 以下的原因。 
74.1  使用 LEA 指令赋值 
任务管理器 taskgmr.exe 传递 NtQuerySystemInformation()第一个参数的指令并非都是 MOV 指令，部分
指令是 LEA。 
指令清单 74.2  taskmgr.exe (Windows Vista) 
                 xor      r9d, r9d 
                 div      dword ptr [rsp+4C8h+WndClass.lpfnWndProc] 
                 lea      rdx, [rsp+4C8h+VersionInformation] 
                 lea      ecx, [r9+2]      ; put 2 to ECX 
                 mov      r8d, 138h 
                 mov      ebx, eax 
; ECX=SystemPerformanceInformation 
                 call     cs:__imp_NtQuerySystemInformation ; 2 
                 ... 
                 mov      r8d, 30h 
                 lea      r9, [rsp+298h+var_268] 
                 lea      rdx, [rsp+298h+var_258] 
                 lea      ecx, [r8-2Dh]    ; put 3 to ECX 
; ECX=SystemTimeOfDayInformation 
                 call     cs:__imp_NtQuerySystemInformation ; not zero 
                 ... 
                 mov      rbp, [rsi+8] 
                 mov      r8d, 20h 
                 lea      r9, [rsp+98h+arg_0] 
                 lea      rdx, [rsp+98h+var_78] 
                 lea      ecx, [r8+2Fh]    ; put 0x4F to ECX 
                 mov      [rsp+98h+var_60], ebx 
                 mov      [rsp+98h+var_68], rbp 
异步社区会员 dearfuture(15918834820) 专享 尊重版权