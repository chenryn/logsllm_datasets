\&  printf "%2\e$d %d\en",    12, 34;               # will print "34 12\en"
\&  printf "%2\e$d %d %d\en", 12, 34;               # will print "34 12 34\en"
\&  printf "%3\e$d %d %d\en", 12, 34, 56;           # will print "56 12 34\en"
\&  printf "%2\e$*3\e$d %d\en", 12, 34, 3;           # will print " 34 12\en"
.Ve
.RE
.RS 8
.Sp
If \f(CW\*(C`use locale\*(C'\fR is in effect, the character used for the decimal
point in formatted real numbers is affected by the \s-1LC_NUMERIC\s0 locale.
See perllocale.
.RE
.IP "sqrt \s-1EXPR\s0" 8
.IX Item "sqrt EXPR"
.PD 0
.IP "sqrt" 8
.IX Item "sqrt"
.PD
Return the square root of \s-1EXPR\s0.  If \s-1EXPR\s0 is omitted, returns square
root of \f(CW$_\fR.  Only works on non-negative operands, unless you've
loaded the standard Math::Complex module.
.Sp
.Vb 2
\&    use Math::Complex;
\&    print sqrt(-2);    # prints 1.4142135623731i
.Ve
.IP "srand \s-1EXPR\s0" 8
.IX Item "srand EXPR"
.PD 0
.IP "srand" 8
.IX Item "srand"
.PD
Sets the random number seed for the \f(CW\*(C`rand\*(C'\fR operator.
.Sp
The point of the function is to \*(L"seed\*(R" the \f(CW\*(C`rand\*(C'\fR function so that
\&\f(CW\*(C`rand\*(C'\fR can produce a different sequence each time you run your
program.
.Sp
If \fIsrand()\fR is not called explicitly, it is called implicitly at the
first use of the \f(CW\*(C`rand\*(C'\fR operator.  However, this was not the case in
versions of Perl before 5.004, so if your script will run under older
Perl versions, it should call \f(CW\*(C`srand\*(C'\fR.
.Sp
Most programs won't even call \fIsrand()\fR at all, except those that
need a cryptographically-strong starting point rather than the
generally acceptable default, which is based on time of day,
process \s-1ID\s0, and memory allocation, or the \fI/dev/urandom\fR device,
if available.
.Sp
You can call srand($seed) with the same \f(CW$seed\fR to reproduce the
\&\fIsame\fR sequence from \fIrand()\fR, but this is usually reserved for
generating predictable results for testing or debugging.
Otherwise, don't call \fIsrand()\fR more than once in your program.
.Sp
Do \fBnot\fR call \fIsrand()\fR (i.e. without an argument) more than once in
a script.  The internal state of the random number generator should
contain more entropy than can be provided by any seed, so calling
\&\fIsrand()\fR again actually \fIloses\fR randomness.
.Sp
Most implementations of \f(CW\*(C`srand\*(C'\fR take an integer and will silently
truncate decimal numbers.  This means \f(CW\*(C`srand(42)\*(C'\fR will usually
produce the same results as \f(CW\*(C`srand(42.1)\*(C'\fR.  To be safe, always pass
\&\f(CW\*(C`srand\*(C'\fR an integer.
.Sp
In versions of Perl prior to 5.004 the default seed was just the
current \f(CW\*(C`time\*(C'\fR.  This isn't a particularly good seed, so many old
programs supply their own seed value (often \f(CW\*(C`time ^ $$\*(C'\fR or \f(CW\*(C`time ^
($$ + ($$ size, $sb->mode & 07777,
\&        scalar localtime $sb->mtime;
.Ve
.Sp
You can import symbolic mode constants (\f(CW\*(C`S_IF*\*(C'\fR) and functions
(\f(CW\*(C`S_IS*\*(C'\fR) from the Fcntl module:
.Sp
.Vb 1
\&    use Fcntl ':mode';
.Ve
.Sp
.Vb 1
\&    $mode = (stat($filename))[2];
.Ve
.Sp
.Vb 3
\&    $user_rwx      = ($mode & S_IRWXU) >> 6;
\&    $group_read    = ($mode & S_IRGRP) >> 3;
\&    $other_execute =  $mode & S_IXOTH;
.Ve
.Sp
.Vb 1
\&    printf "Permissions are %04o\en", S_IMODE($mode), "\en";
.Ve
.Sp
.Vb 2
\&    $is_setuid     =  $mode & S_ISUID;
\&    $is_setgid     =  S_ISDIR($mode);
.Ve
.Sp
You could write the last two using the \f(CW\*(C`\-u\*(C'\fR and \f(CW\*(C`\-d\*(C'\fR operators.
The commonly available S_IF* constants are
.Sp
.Vb 1
\&    # Permissions: read, write, execute, for user, group, others.
.Ve
.Sp
.Vb 3
\&    S_IRWXU S_IRUSR S_IWUSR S_IXUSR
\&    S_IRWXG S_IRGRP S_IWGRP S_IXGRP
\&    S_IRWXO S_IROTH S_IWOTH S_IXOTH
.Ve
.Sp
.Vb 2
\&    # Setuid/Setgid/Stickiness/SaveText.
\&    # Note that the exact meaning of these is system dependent.
.Ve
.Sp
.Vb 1
\&    S_ISUID S_ISGID S_ISVTX S_ISTXT
.Ve
.Sp
.Vb 1
\&    # File types.  Not necessarily all are available on your system.
.Ve
.Sp
.Vb 1
\&    S_IFREG S_IFDIR S_IFLNK S_IFBLK S_ISCHR S_IFIFO S_IFSOCK S_IFWHT S_ENFMT
.Ve
.Sp
.Vb 1
\&    # The following are compatibility aliases for S_IRUSR, S_IWUSR, S_IXUSR.
.Ve
.Sp
.Vb 1
\&    S_IREAD S_IWRITE S_IEXEC
.Ve
.Sp
and the S_IF* functions are
.Sp
.Vb 2
\&    S_IMODE($mode)      the part of $mode containing the permission bits
\&                        and the setuid/setgid/sticky bits
.Ve
.Sp
.Vb 3
\&    S_IFMT($mode)       the part of $mode containing the file type
\&                        which can be bit-anded with e.g. S_IFREG
\&                        or with the following functions
.Ve
.Sp
.Vb 1
\&    # The operators -f, -d, -l, -b, -c, -p, and -s.
.Ve
.Sp
.Vb 2
\&    S_ISREG($mode) S_ISDIR($mode) S_ISLNK($mode)
\&    S_ISBLK($mode) S_ISCHR($mode) S_ISFIFO($mode) S_ISSOCK($mode)
.Ve
.Sp
.Vb 3
\&    # No direct -X operator counterpart, but for the first one
\&    # the -g operator is often equivalent.  The ENFMT stands for
\&    # record flocking enforcement, a platform-dependent feature.
.Ve
.Sp