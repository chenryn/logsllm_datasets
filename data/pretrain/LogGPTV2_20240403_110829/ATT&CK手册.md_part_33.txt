OilRig OilRig 恶意软件ISMAgent 如果无法通过HTTP 访问C2 服务器，
则会回退到DNS 隧道机制。
QUADAGEN T
QUADAGENT 为其C2 服务器使用多个协议（HTTPS，HTTP，
DNS）作为后备通道，如果与其中一个通信不成功的话。
S-Type S-Type 主要使用端口 80 用于C2，但如果初始通信失败，则回退到端口
443 或 8080。
SslMM SslMM 有一个硬编码的主要和备用C2 字符串。WINMM WinMM 通常配置有C2
通信的主域和备份域。
XTunnel XTunnel 使用的C2 服务器为受害者提供了一个端口号，以便在连
接在当前使用的端口上关闭时用作后备。1.10.3、Detection
> 分析不常见数据流的网络数据（例如，客户端发送的数据明显多于从服务
>
> 器接收的数据）。
> 利用通常不具有网络通信或从未见过的网络的过程是可疑的。
> 分析数据包内容以检测不遵循正在使用的端口的预期协议行为的通信。
链接：[Fallback Channels](https://attack.mitre.org/techniques/T1008/)
## 、多跳代理
> 为了掩盖恶意流量的来源，攻击者可以将多个代理链接在一起。 通常，
> 防御者将能够识别在进入其网络之前经过的最后一个代理流量;
> 防御者可能或可能不能在最后一跳代理之前识别任何先前的代理。
> 该技术通过要求防御者通过若干代理跟踪恶意流量来识别其来源，从而使识别恶意流量的原始来源变得更加困难。
1.  、Mitigations
Mitigatio
n Description
缓解说明 过滤网络流量可以通过使用网络黑白名单来阻止已知匿名网络和C2
基础设施的流量。
应该注意的是，这种阻塞可以通过其他技术来避开，例如Domain Fronting。
2.  、Examples
Name Description
APT29 APT29 使用的后门创建了一个Tor 隐藏服务，用于将流量从Tor
客户端转发到本地端口 3389（RDP），139（Netbios）和 445
> （SMB），从而实现从网络外部的完全远程访问。
Dok Dok 通过自制软件下载并安装Tor。
FIN4 FIN4 使用Tor 登录受害者的电子邮件帐户。
GreyEnerg y
GreyEnergy 已将Tor 继电器用于命令和控制服务器。
Keydnap Keydnap 使用tor2web 代理的副本进行HTTPS 通信。MacSpy MacSpy
使用Tor 进行命令和控制。
Tor 遍历Tor 网络的流量将在退出Tor
网络并继续到达预定目的地之前转发到多个节点。
WannaCry WannaCry 使用Tor 来控制和控制流量。1.11.3、Detection
> 当观察多跳代理的使用时，来自实际命令和控制服务器的网络数据可以允
>
> 许关联传入和传出流以跟踪恶意流量回到其源。
> 还可以通过警告已知匿名网络（例如Tor）或使用该技术的已知对手基础设施的流量来检测多跳代理。
链接：[Multi-hop Proxy](https://attack.mitre.org/techniques/T1188/)
####### 多个阶段信道 {#多个阶段信道-1}
攻击方可以创建用于在不同条件下或用于某些功能的C2 的多个阶段。
使用多个阶段可以混淆命令和控制的通道，使检测更加困难。
远程访问工具将向 C2
服务器请求第一阶段的指令。第一阶段可能具有自动化功能，可收集基本主机信息，更新工具和上传其他文件。此时可以上传第二个远程访问工具（RAT），使受害主机向
C2 服务器请求第二阶段的指令。
第二阶段可能会更加全面，并允许攻击者通过反弹 shell 或其他 RAT
功能与系统进行交互。
不同的阶段是完全分开的，没有重叠。在被发现或阻断第一阶段通信的情况下，加载器还可以备份第一阶段的回调方法或者回调信道。
####### 多方式通信 {#多方式通信-1}
一些攻击者会将通信分割，利用不同的协议发送出去。这种做法可以有一个用于入站的协议，另一个用于出站数据，这种做法可以绕过某些防火墙限制。拆分也可以是随机的，以简单地避免在任何一个协议通信上的数据警报。
####### 多层加密
攻击者使用多层加密执行C2
通信，通常（但不是唯一地）在协议加密方案（例如HTTPS
或SMTPS）内在自定义一种或多种加密方案。
####### 端口试探
Port Knocking
技术是防御者和攻击者用来隐藏开放端口访问的一种方法。为了打开端口，攻击者在打开端口之前发送一系列具有某些特征的数据包。通常，这一系列数据包包括尝试连接到自定义端口的序列，但可能涉及异常标志，特定字符串或其它特征。序列发送完成后，通常由主机的防火墙打开端口，但也可以通过自定义的软件实现。
这项技术可以用在动态打开一个端口以及启动与不同系统上的监听服务器的连接。
可以通过不同的方法来观察触发通信的握手包。最初由Cd00r
实现的一种方法是使用libpcap
库来嗅探有问题的数据包。另一种方法利用原始套接字，使恶意软件能够使用已经打开的端口供其他程序使用。
> 实践
>
> 以 ssh 服 务 为 例 ： 先 yum install knockd 配置：
>
> /etc/knockd.conf \[options\]
>
> UseSyslog \[opencloseSSH\]
>
> sequence = 44440:udp,44442:udp,44441:udp seq_timeout = 30
>
> tcpflags = syn,ack
>
> start_command = /sbin/iptables -I INPUT -s %IP% -p tcp --dport ssh -j
> ACCEPT cmd_timeout = 300
>
> stop_command = /sbin/iptables -D INPUT -s %IP% -p tcp --dport ssh -j
> ACCEPT
iptable 未开放SSH:
> \[root@ubuntu \~\]# iptables -nL INPUT
>
> Chain INPUT (policy ACCEPT) target prot opt source destination
>
> RH-Firewall-1-INPUT all --- 0.0.0.0/0 0.0.0.0/0
>
> 启动 port knocking daemon，这里开了调试和 Verbose 选项。
>
> \[root@ubuntu \~\]# knockd -D -v
>
> config: new section: 'options' config: usesyslog
>
> config: new section: 'opencloseSSH'
>
> config: opencloseSSH: sequence: 44440:udp,44442:udp,44441:udp config:
> opencloseSSH: seq_timeout: 30
>
> config: tcp flag: SYN config: tcp flag: ACK
>
> config: opencloseSSH: start_command: /sbin/iptables -I INPUT -s %IP%
> -p tcp --d port ssh -j ACCEPT
>
> config: opencloseSSH: cmd_timeout: 300
>
> config: opencloseSSH: stop_command: /sbin/iptables -D INPUT -s %IP% -p
> tcp -- dport ssh -j ACCEPT
>
> ethernet interface detected Local IP: 10.18.1.1
>
> listening on eth0...
客户端来敲下，使用了windows 下的程序:
knock 的 Win32 客 户 端 程 序 ：
> C:\\\>knock.exe -v 10.18.1.1 44440:udp 44442:udp 44441:udp hitting udp
> 10.18.1.1:44440
>
> hitting udp 10.18.1.1:44442
>
> hitting udp 10.18.1.1:44441
服务器端监视到了正确的端口序列，触发动作，开放了 SSH 端口。
> 2019-08-11 00:27:25: udp: 10.18.1.2:54204 -\> 10.18.1.1:44440 60 bytes
>
> 10.18.1.2: opencloseSSH: Stage 1
>
> 2019-08-11 00:27:25: udp: 10.18.1.2:54205 -\> 10.18.1.1:44442 60 bytes
>
> 10.18.1.2: opencloseSSH: Stage 2
>
> 2019-08-11 00:27:25: udp: 10.18.1.2:54206 -\> 10.18.1.1:44441 60 bytes
>
> 10.18.1.2: opencloseSSH: Stage 3 10.18.1.2: opencloseSSH: OPEN SESAME
>
> opencloseSSH: running command: /sbin/iptables -I INPUT -s 10.18.1.2 -p
> tcp --dpo rt ssh -j ACCEPT
>
> 重新查看 iptables
>
> \[root@ubuntu \~\]# iptables -nL INPUT
iptables 中已经加了允许条目。
> Chain INPUT (policy ACCEPT) target prot opt source destination
>
> ACCEPT tcp --- 10.18.1.1 0.0.0.0/0 tcp dpt:22 RH-Firewall-1-INPUT all
> --- 0.0.0.0/0 0.0.0.0/0
####### 远程访问工具
> 攻击者可以使用合法的桌面支持和远程访问软件，例如Team Viewer，
> Go2Assist，LogMein，AmmyyAdmin
> 等，来建立网络内目标系统的交互式命令和控制通道。这些服务通常是合法的技术支持软件，并且可以在目标环境中列入白名单。与攻击者常用的其他合法软件相比，VNC，Ammy
> 和 Teamviewer 等远程访问工具经常被使用。
可以在后渗透测试阶段使用远程访问工具作为访问目标机器的备用通信方式，或者作为与目标系统建立交互式远程桌面会话的方式。它们还可以用作恶意软件的组
件，以建立反向连接或反向连接到服务或攻击者控制的系统。
> TeamViewer
> 等管理工具已被多个黑客团体用于攻击一些俄罗斯国家机构和犯罪组织。
##### 实践
> 分享一个免杀的 Teamviewer 远控端。
>
> TV 需要对方机器的 ID
> 与密码才能控制对方机器，但是通常情况下，我们拿到一般都是 webshell
> 或者反弹回连的 shell，无法查看对方的 ID 和密码。
本例采用一种新的方式，即将 ID
和密码转储到一个文件中，即可在命令行状态下读到数据，从而进一步的进行远程控制。
首先：下载链接
[https://mega.nz/#!tmYlSaiA!Z5ofakL2CwxxDXfRWnNXxTk0Ay-](https://mega.nz/#!tmYlSaiA!Z5ofakL2CwxxDXfRWnNXxTk0Ay-4WA9nB8k5MW0GGgY)
4WA9nB8k5MW0GGgY
> 上传 TV_V2.exe 到目标机器，并执行：
>
> TV_V2.exe 在目标上运行会在当前目录生成生成 3 个文件
>
> 然后请运行生成的 gps.exe 文件之后会生成 vtr.txt 里面有 ID 和 pass
>
> 连接请用压缩包里的TeamViewer_Setup.exe 文件
![](media/image370.jpeg){width="5.801712598425197in" height="1.91125in"}
![](media/image371.jpeg){width="2.638333333333333in" height="10.0in"}
![](media/image372.jpeg){width="5.873166010498688in" height="5.83625in"}
####### 远程文件复制
攻击者可以通过工具或其它程序将文件从一个系统复制到另一个系统，可以通过C2
通道从被控制的系统复制文件，从而将工具上传到目标网络，或通过其他工具
> （如FTP）。也可以使用scp，rsync 和sftp 等本机工具在Mac 和 Linux
> 上复制文件。
攻击者还可以在受害者内部网络系统之间横向复制文件，可以使用自带的文件共享协议进行远程执行的横向移动，例如通过SMB
去连接网络共享或者去连接经过身份验证的Windows
管理员共享或远程桌面协议的的文件共享。
####### 标准应用层协议 {#标准应用层协议-1}
攻击者可以使用通用标准化的应用层协议（如HTTP，HTTPS，SMTP
或DNS）进行通信，这样可以通过与现有流量混合达到防御绕过的目标。远程系统的命令以及这些命令的结果通常隐藏在客户端和服务器之间的通信协议流量中。
对于在安全区内部发生的连接（例如代理或跳板节点与其它节点之间的连接），常用的协议是RPC，SSH
或RDP。
> 使用*websocket*
某些 Web 网关不检查 Web 套接字内容。
因此，它可以用作向主机执行任意命令的通信通道。
安装和配置
1.  git clone https://github.com/Arno0x/WSC2 WSC2
2.  cd WSC2
3.  pip install -r requirements.txt
4.  python wsc2.py
5.  更改配置文件
![](media/image373.jpeg){width="5.876333114610674in"
height="3.3310411198600174in"}
运行：
> python2 wsc2.py
![](media/image374.jpeg){width="5.784620516185477in" height="2.375in"}
生成 payload ，并上线
![](media/image375.jpeg){width="5.838058836395451in" height="2.57375in"}
> 使用*WMI*
WmiShell
Windows Management Instrumentation（WMI）是一项 Microsoft
技术，旨在允许管理员跨网络执行本地和远程管理操作。由于 WMI 是自Windows
98 以来存在与 Windows 生态系统的一部分，因此无论是运行 Windows 10 还是
Windows XP，它几乎可以在每个网络中使用。可以通过WMI 执行的一些操作包括：
-   命令执行
-   文件传输