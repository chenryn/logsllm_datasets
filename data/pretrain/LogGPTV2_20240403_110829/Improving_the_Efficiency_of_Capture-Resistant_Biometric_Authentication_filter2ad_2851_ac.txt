(cid:3)
(cid:2)
q(t−(|A|+ζ))(q − 1)ζ polynomials to hide ϕ.
ζ+|A|
η = μ
|A|
The bigger η, the better that ϕ is hidden by the chaff points
and thus the better the secret embedded in ϕ is hidden. It is
worth noting that this security is information-theoretic and
unconditional in that its security does not depend on an at-
tacker’s computational power.
With ﬁxed parameters (cid:2)μ, q, t,|A|(cid:3), increasing ζ leads
to bigger η and thus higher security. However, bigger ζ
requires bigger storage space for the chaff points. Thus,
a balance point must be found between high-level security
and efﬁcient storage.
The size of q plays a signiﬁcant role on the size of ζ for
η with reasonable security. For example, when q is a 129-
bit prime (which is needed to share a 128-bit secret such as
an AES-128 key), for parameters (cid:2)|A| = 36, t = 12, μ =
2−43(cid:3), to have 80-bit security, we will need more than 5 ×
1015 chaff points. This huge number of chaff points make
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:00:38 UTC from IEEE Xplore.  Restrictions apply. 
|B|
80
80
80
60
80
60
60
60
t
40
35
30
40
25
30
35
25
β ( β|B|)
60 (0.75)
58 (0.725)
55 (0.6875)
50 (0.83)
53 (0.6625)
45 (0.75)
48 (0.8)
43 (0.717)
Number of Tries
FESI
Our improvement (α, σ)
Improvement Ratio
25646754.93
6580194.07
2874867.40
408073.5
402034.73
342927.67
269091.95
85336.84
1 (60, 80)
1 (57, 79)
1 (55, 80)
1 (50, 60)
1 (52, 79)
1 (45, 60)
1 (47, 59)
1 (42, 59)
25646754.93
6580194.07
2874867.40
408073.5
402034.73
342927.67
269091.95
85336.84
Table 1. Number of tries in FESI and our improvement
the chaff-point scheme impractical. (Similarly, when q is
a 129-bit prime, for parameters (cid:2)|A| = 80, t = 30, μ =
2−43(cid:3), to have 80-bit security, we will need far more than
5 × 109 chaff points.)
Fortunately,
the information-theoretic nature of the
chaff-point scheme allows us to reduce the number of chaff
points signiﬁcantly by having small q. Given a 128-bit se-
cret s, we can ﬁrst split it into small pieces, for example,
each with at most 12 bits. For each such piece, we can
then choose a 12-bit prime qi. When applying this smaller
qi to the chaff-point scheme, we need much smaller num-
ber of chaff points ζi. For example, when qi is a 12-bit
prime, for parameters (cid:2)|A| = 36, t = 12, μ = 2−43(cid:3), to
have 12-bit security, we will need just about 10700 chaff
points. Together, for a 128-bit secret, we will need at most
10700 × 11 = 117700 chaff points.
This is far better but still uses much storage space. One
natural improvement over this discrete function is to ﬁnd
and store a continuous function, just as done in [11]. Fol-
lowing this idea, we propose the following improvement on
fA(x) for better storage efﬁciency.
Unlike the computational improvement of Section 4.2,
the storage efﬁciency improvement requires a minor change
in Γ. We assume that a constant ω exists such that it will not
appear in any biometric sample set. For example, ω can be
a big number in Fq.
To generate Γ for a given A = {a1, a2, . . . , an}, in the
step of generating shares for secret s, we do not embed s
in the traditional way as the free term of ϕ(x) (see Section
3.1). Instead, after picking random values r1, r2, . . . , rt−1,
(cid:2)(x) = r0 + r1x + r2x2 +
we calculate r0 such that, for ϕ
. . . + rt−1xt−1 mod q, ϕ
(cid:2)(ω) = s. That is, we embed s as
the value corresponding to ω. Next, shares are generated as
si = ϕ
(cid:2)(IDi) and fA(x) is constructed as follows.
• Find a polynomial π(x) = xn+cn−1xn−1+...+c1x+
c0 mod q such that π(ai) = si, 1 ≤ i ≤ n. The values
of cn−1, cn−2, . . . , c2, c1, c0 can be found by solving
the n equations.
We then deﬁne fA(x) = π(x). In this improvement, the
135145
80
storage of fA(x), as part of Γ, is equivalent to the stor-
age of n values (cid:2)cn−1, cn−2, . . . , c2, c1, c0(cid:3), which for typ-
ical cases like n = 80 needs far less storage space than
117700 chaff points. This improvement can be as high as
117700×2
= 2942.5 times. The generations of the other
parts of Γ remain the same as FESI.
Similar to [11], fA(x) constructed this way does not leak
si or s. An attacker who has compromised the server and
stolen fA(x) needs to solve the noise interpolation problem
to recover si, which is considered hard [3].
Under this improvement, the process to verify a given
biometric sample B needs to be changed accordingly.
In
step 4 of the Reed-Solomon decoding algorithm of Section
3.2, s should be computed as s = ϕ1(ω).
It should be noted that our storage improvement does not
negatively impact the computational improvement of Sec-
tion 4.2 and they coexist very well.
5 Prototype Implementation
Our computational improvement reduces the number of
tries but increases the computation time of a single try. To
compare the overall computing time of FESI and our im-
provement, we developed a prototype implementation.
5.1
Implementation details
In FESI,
|
to t.
is larger than or equal
to verify a given biometric sample B =
(b1, b2, . . . , bm), in each try the server picks one t-subset
Bi and checks whether s can be recovered and whether
|HA ∩ HBi
The most
computation-intensive step of such a try is the reconstruc-
tion of sBi from {s1
i}, which are obtained by
evaluating fA(Bi). We implemented this step as a t-out-
of-n Shamir secret reconstruction [31]. (Correspondingly,
the t-out-of-n Shamir share generation is used in gener-
ating the biometric veriﬁcation data.) We implemented
both the Shamir share generation and Shamir secret recon-
struction in C++, using the computational number library
i , . . . , st
i , s2
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:00:38 UTC from IEEE Xplore.  Restrictions apply. 
|B|
80
80
80
60
80
60
60
60
t
40
35
30
40
25
30
35
25
β ( β|B|)
60 (0.75)
58 (0.725)
55 (0.6875)
50 (0.83)
53 (0.6625)
45 (0.75)
48 (0.8)
43 (0.717)
Computation Time (seconds)
FESI (# of tries × time for one try)
25646754.93 × 0.00612 = 156958.14
6580194.07 × 0.00458 = 30137.29
2874867.40 × 0.00344 = 9889.54
408073.5 × 0.00611 = 2493.33
402034.73 × 0.00231 = 928.70
342927.67 × 0.00343 = 1176.24
269091.95 × 0.00476 = 1280.88
85336.84 × 0.00237 = 202.25
Our improvement
0.0684
0.0661
0.0682
0.0349
0.0667
0.0354
0.0335
0.0348
Ratio
Improvement
2.29 × 106
4.56 × 105
1.45 × 105
7.14 × 104
1.39 × 104
3.32 × 104
3.82 × 104
5.81 × 103
Table 2. Computation time for representative parameters
LiDIA [18]. We chose s as a 128-bit random secret and
q is a 129-bit prime number (in hexadecimal format, it is
0x12cb639444cf b091833261b9def68e68b).
To measure the computation time of Shamir secret re-
construction, we ran the reconstruction method a thousand
times and calculated their average.
In our improvement, in each try, the most computation-
intensive step is the reconstruction of s through the Reed-
Solomon decoding algorithm. We implemented the Reed-
Solomon decoding algorithm of Section 3.2 with the LiDIA
package. LiDIA provides the subroutines for manipulating
polynomial functions over a ﬁnite ﬁeld Fq needed by the
Reed-Solomon decoding algorithm.
To benchmark the Reed-Solomon decoding algorithm,
we ﬁrst generated n secret shares from s with Shamir secret
share generation. Next, we randomly picked (1− β|B|)×|B|
secret shares and modiﬁed their values. (As a result, these
shares have incorrect values). Following the improvement
scheme, we then randomly picked σ shares and sent them
to the Reed-Solomon decoding algorithm. This subroutine
was run 100 times and its average was calculated.
5.2 Results
We ran both implementations on a computer with a 3.40
GHz Intel 4 processor and 1 G bytes of memory to get their
computation times. Table 2 gives the computation time for
FESI and our improvement for some representative param-
eters. The computation time of FESI is the product of the
expected number of tries and the running time of a single
Shamir secret reconstruction. The computation time of our
improvement is the product of the improved expected num-
ber of tries and the running time of a single secret recon-
struction with the Reed-Solomon decoding algorithm.
The improvement ration is the ratio of FESI’s computa-
tion time to the computation time of our improvement.
From Table 2, we can see that for these representative pa-
rameters, our improvement signiﬁcantly enhances the per-
formance.
6 Further Discussions
We shall discuss several related issues in this section.
6.1 The impact of β
In Table 1, we gave some example parameter combina-
tions where β is a constant. In reality, for a speciﬁc biomet-
ric application, β can be obtained by statistics on moderate
number of biometric samples in that application.
(cid:2)
σ. Figure 1
The value of β affects the values of σ and e
describes the impact of β for parameter combination (cid:2)t =
40,|A| = 80(cid:3). (It should be noted that the y-axis is in the
log scale.)
FESI
Ours
1025
1020
1015
1010
105
s
e
i
r
T
f
o
r
e
b
m
u
N
100
 40
 45
 50
 55
 60
β
 65
 70
 75
 80
Figure 1. The impact of β for (cid:2)t = 40,|B| = 80(cid:3)
From Figure 1, we can see that our computational im-
provement outperforms FESI on most β values: when
β ≥ 60, our scheme needs one try on average; when