spectively private channel priv in phase 1 (whilst
the timer is running), to be received on private chan-
nel priv in phase 1, respectively public channel c in
phase 2 (after the timer stops).
The ﬁrst process permits preemption, whereby a message
is sent before a timer starts and received when the timer
is running, and the second permits a message sent whilst
a timer is running to be received after the timer stops.
• !1 : in(priv,x).out(priv,x), which allows messages
sent on private channel priv to be buffered, i.e., re-
ceived and relayed.
This ﬁnal process ensures that any reduction by the
(ASYNC) rule on private channel priv in our timer lo-
cation calculus can be mapped to a reduction in the ap-
plied pi-calculus, which has no such rule (a similar pro-
cesses isn’t required for reductions by the (ASYNC) rule
on public channel c, because the attacker process can
simulate such reductions).
Deﬁnition 10. Given a system context S = new ˜n.[!VL |
Lv] | [!new id.!PL | Lp | A] and a name id, we deﬁne
compile(id,S) as
new priv.new ˜n.(renameC(priv,tToPh(VL)
| renameC(priv, phases(blind(VL), [1,2]))
| renameC(priv, phases(Lv, [1,2]))
| !new id.(phases(PL, [2])) | phases(Lp, [2])
| !in(c,x).1:out(priv,x) |!1:in(priv,x)2:out(c,x)
| !1:in(priv,x).out(priv,x)
USENIX Association
27th USENIX Security Symposium    1575
where tToPh(L) is deﬁned above and renameC(a,P) is
process P with every occurrence of the channel c used for
input and output between all 1 : and 2 : actions replaced
with the channel priv.
The ProVerif tool [8] can test to see if there exists an
attacker process that can make an event reachable.In this
paper we only require events that are a function applica-
tion to new names, which can be deﬁned as follows. Al-
though ProVerif can test such properties, the correspond-
ing deﬁnition has not previously been formally deﬁned,
we do so here:
Deﬁnition 11. We write ev( f (a1, . . . ,ai)),Init :P if there
exists a process Q such that the free names of Q are
a subset of the names Init and Q does not contain any
events, and a trace:
T = Init,{P|Q} →∗ E,{event( f (b1, . . . ,bi)).P(cid:48)}∪ P
and for 1 ≤ j ≤ i the trace T contains the reductions:
E j, P j ∪{new a j.Pj} → E j ∪{b j}, Pi ∪{Pj{b j/a j}}
The following theorem tells us that we can check
the compiled system in the applied pi-calculus and con-
cluded security results about the system with locations:
Theorem 1. Given a system context S = new ˜n.[!VL |
Lv | A] | [!new id.!PL | Lp | A] or S = new ˜n.[!VL | Lv] |
[!new id.!PL | Lp | A], and a name id, we have
⇒ ¬ veriﬁed({c},id):S
not ev(verify(id)),{c}:compile(id,S)
7 Case studies
We have implemented the compiler introduced in the pre-
vious section. Using this tool and ProVerif we analysed
various distance bounding protocols. The tool and all of
the model ﬁles mentioned in this section are available on
the website given in the introduction.
Contactless payment protocols: Smart cards use the
EMV protocol to perform contact-based and contactless
payments via payment terminals [19, 20]. EMV Contact-
less cards make use of ISO/IEC 14443 for the communi-
cation between the card and terminal. ISO/IEC 14443
is a standard that speciﬁes near-ﬁeld communication at
13.56 MHz. This standard is widely used for bank cards
and cards for access control (e.g. for buildings) and pub-
lic transport. Due to its physical characteristics it is
not possible to communicate over a long distance using
ISO/IEC 14443. Even with a very powerful antenna ac-
tive communication is only possible up to around a me-
ter [23].
The EMV protocol comprises of an exchange of trans-
action data and then the card generates a MAC (called
the Application Cryptogram or AC) using a session key
based on a key shared between the smart card and the
Figure 4 MasterCard’s Relay Resistance Protocol
Reader
PubCA
UN ∈R {0,1}32
Card
KM ,PrivC
CertPrivCA(PubB)
CertPrivB(PubC)
Nonce ∈R {0,1}32
SELECT PayPass
PayPass selected
timed
GET PROCESSING OPTIONS
AIP, AFL
EXCHANGE RELAY RESISTANCE DATA, UN
Nonce, Timing information
READ RECORD
CertPrivCA(PubB), CertPrivB(PubC), . . .
GENERATE AC, UN, Amount, Currency, . . .
KS = EncKM (ATC)
AC=MACKs (ATC,Amount,UN,..)
SDAD = SignPrivC(AC, Nonce,
Timing information, UN,. . .)
SDAD, AC
card issuer and the Application Transaction Counter
(ATC), which equals the number of times the card has
been used and will provide freshness to the transaction.
The AC is used for veriﬁcation of the transaction by the
card issuer. As the payment terminal cannot read the
AC, the card also signs the transaction data, known as
the Signed Dynamic Application Data (SDAD) and the
payment terminal uses this to verify the transaction.
MasterCard’s Relay Resistance Protocol (RRP) [20],
as part of an EMV transaction, is presented in Figure 4.
RRP is an extension of the EMV protocol, for which a
new command is added, namely the EXCHANGE RE-
LAY RESISTANCE DATA command. In a regular EMV
session, a transaction is initiated by executing the SE-
LECT command, to select the EMV applet on the smart
card, and then the GET PROCESSING OPTIONS com-
mand to provide information about the capabilities of the
terminal to the card.
The card will typically respond to the GET PRO-
CESSING OPTIONS message with the Application In-
terchange Proﬁle (AIP) and Application File Locator
(AFL), used to indicate the capabilities of the card and
the location of data ﬁles respectively. To ﬁnalise a trans-
action the GENERATE AC command is used. This com-
mand includes a nonce, known as the Unpredictable
Number (UN), to provide freshness to the transaction,
and an AC, and if the card supports it the SDAD, are
them returned.
The new command added in RRP is the EXCHANGE
RELAY RESISTANCE DATA command, which will be
timed and is typically executed after the GET PROCESS-
1576    27th USENIX Security Symposium
USENIX Association
ING OPTIONS command. The terminal will send a
nonce (Terminal Relay Resistance Entropy), which will
also be used as the Unpredictable Number for the rest
of the transaction. The card will respond with another
nonce (Device Relay Resistance Entropy) and three tim-
ing estimates (minimum time for processing, maximum
time for processing and estimated transmission time).
The maximum time serves as an upper bound for the
terminal’s timer. Both random numbers and the timing
information are included in the SDAD. If the card does
not respond in time, it is assumed that it is not actually
present at the current location and the data may be re-
layed.
MasterCard’s RPP is similar to PaySafe [12], though
PaySafe makes fewer changes to the previous EMV spec-
iﬁcation. No new commands are introduced; rather than
sending the nonce using the EXCHANGE RELAY RESIS-
TANCE DATA as in RRP, it is included in the GET PRO-
CESSING OPTIONS command and a nonce is added in
the corresponding response. This exchange is timed to
detect possible relay attacks.
Mauw et al. [28] looked at PaySafe and observed that
it is vulnerable to distance fraud attacks and suggested
adding the UN nonce to the timed response to protect
against this. We note that the same weakness to distance
fraud applies to MasterCard’s protocol. Due to the phys-
ical characteristics of ISO/IEC 14443, we consider dis-
tance fraud attacks not to be applicable to protocols using
this standard, as it will always be necessary to have a lo-
cal adversary in order to be able to communicate with the
local reader. Furthermore, once a card is compromised,
it should not lead to a compromise of other cards but the
compromised card should be considered lost as the infor-
mation on it can be used to clone the card, as discussed
in Section 5. This means that we do not consider attacks
such as terrorist fraud or distance hijacking applicable to
these protocols.
NXP’s distance bounding protocols: NXP’s Mifare
Plus cards are used in, for example, public transport and
for building access control and also make use of the
ISO/IEC 14443 speciﬁcation for contactless communi-
cation. The cards use a proprietary distance bounding
protocol. It is not publicly known what protocol is used.
Nevertheless, NXP have been granted a patent [25] and
have ﬁled a further patent application [14] for distance
bounding technology.
We present the protocol from the granted patent [25]
in Figure 5. As with any protocol on top of ISO/IEC
14443, the session starts with the reader sending a SE-
LECT command to the card and the card responding with
its ID. The distance bounding check will be initialised
by sending a PREPARE PROXIMITY CHECK command.
The card generates a random 8-byte number nP and sends
timing information to the reader indicating how long a
Figure 5 NXP’s patented distance bounding protocol.
The timed step can be repeated up to 8 times
Prover/Card
k
nP ∈R {0,1}64
Veriﬁer/Reader
k
nV ∈R {0,1}64
timed
SELECT
id
PREPARE PROXIMITY CHECK
Timing information: ti
PROXIMITY CHECK, nV
nP
VPC, MACk(VPC,nV ,nP,ti)
MACk(CK,nV ,nP,ti)
reply to the distance bounding check should take. Af-
ter receiving the timing information the reader generates
its own random 8-byte number (nV ), sends this to the
card using a PROXIMITY CHECK command and starts
its timer.
In reply to the PROXIMITY CHECK command the
card sends its own random number and on receiving this
the reader stops its timer and checks the time against the
timing information previously sent by the card. These
steps can send the whole 8-byte nonces in one message,
or the nonces can be split into up to eight exchanges of 1
byte each, so giving multiple time measurements.
Finally,
the reader sends a VERIFY PROXIMITY
CHECK with a MAC of the nonces and the timing infor-
mation. The card checks whether the nonces and timing
information are correct, and if so the card replies with
a MAC of its own, again including the nonces and tim-
ing information. The card and readers MAC are distin-
guished by the inclusion of a different constant in each.
The reader checks the card’s MAC, and if it is correct it
veriﬁes the card as being at the same location.
NXP’s other patent application [14] presents the same
protocol but without the timing information (we refer to
this as NXP’s variant 1 below). It also presents a variant
of the protocol in which the reader does not include a
MAC with the PROXIMITY CHECK command (we refer
to this as NXP’s variant 2 below). Similar protocols are
claimed which use encryption rather than MACs. It is
not speciﬁed whether there is a unique key per card, or a
global key that is shared between many cards.
Checking prover provided timing information: In
the protocols above the prover sends the veriﬁer informa-
tion about how long responses should take. When test-
ing security properties for these protocols we also need
to ensure that the timing information is correctly authen-
ticated.
USENIX Association
27th USENIX Security Symposium    1577
The authentication for the timing information should
be independent of how the information is used, or the
location of the processes, therefore we may reasonably
over-approximate the correctness of the timing infor-
mation by removing the timer actions and running all
processes in parallel in the applied pi-calculus, along
with any required dishonest provers. The ProVerif tool
lets us check the authenticity of information by check-
ing correspondences between events. For protocols that
strongly authenticate the prover’s identity we check the
authenticity of the timing information by adding an
event(start(ti,id)) to the start of the prover being tested,
where it
is a name representing the timing informa-
tion, and id is the identity of the prover. We add an
event(end(ti,id)) to the veriﬁer at the point it accepts the
timing information as valid for prover id. For protocols
that are anonymous, or do not authenticate the prover’s
identity, we replace the id in the event with the session
nonces. We check that every end event has a correspond-
ing start event, i.e., the veriﬁer only accepts timing infor-
mation as valid for a prover if the prover also performed
a session with that timing information.
Analysis and results: We modelled MasterCard’s
RRP, PaySafe, NXP’s protocols and several protocols
from the literature as well as our example protocols in
our calculus. Using our tool we compiled these to the
applied pi-calculus with phases, and analyzed the result-
ing models with ProVerif. Table 1 summarizes the results
of our analysis for the different protocols and attack sce-
narios. The compiled models can be signiﬁcantly larger,
as they scale linearly with the number of input opera-
tions. For example, the PayWave model becomes about
4 times longer than the original model when checking
it for maﬁa fraud. For the results in Table 1, the veriﬁ-
cation with ProVerif ﬁnishes within a second on a sys-
tem with an Intel Core i7-4550U and 8GB of RAM. For
the protocols from the literature we used similar abstrac-
tions to model these as used in [28] and [15]. All models
are available online. For the protocols from the literature
[5, 24, 29, 30, 32, 35, 36] our analysis did not ﬁnd any
new results, so we focus on the industrial protocols.
We found that all
the payment protocols protect
against relay attacks and are safe in the uncompromised
distance bounding scenario.
It follows that your bank
card is safe from relay attacks, even if someone else’s
card is compromised. PaySafe and MasterCard’s RRP
protocol do not defend against distance fraud, but Mauw
et al.’s extension does. However, as noted above, dis-
tance fraud attacks are not applicable to protocols using
ISO/IEC 14443, as it is always required to have a local
adversary in order to communicate with the payment ter-
minal. All of the protocols fail to protect against terrorist
fraud attacks but, as discussed, we do not consider these
applicable to the EMV attacker model. Therefore, we
y
a
l
e
R
/
d
u
a
r
F
a
ﬁ
a
M
OK
OK
OK
OK
OK
OK
OK
OK
OK