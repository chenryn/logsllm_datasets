http:/ /api.example.com/test/1
b
https:/ /api.example.com/test/2
c
http:/ /api.example.com:8443/test/2
d
https:/ /api.example.com:8443/test/2
e
https:/ /www .example.com:8443/test/2
The answer is at the end of the chapter.
110
CHAPTER 4
Session cookie authentication
session. When the user logs out, or the token expires, it is deleted from the database,
and the user must log in again if they want to keep using the API.
NOTE
Some people use the term token-based authentication only when referring
to non-cookie tokens covered in chapter 5. Others are even more exclusive
and only consider the self-contained token formats of chapter 6 to be real
tokens.
To switch to token-based authentication, you’ll introduce a dedicated new login end-
point. This endpoint could be a new route within an existing API or a brand-new API
running as its own microservice. If your login requirements are more complicated,
you might want to consider using an authentication service from an open source or
commercial vendor; but for now, you’ll just hand-roll a simple solution using user-
name and password authentication as before.
 Token-based authentication is a little more complicated than the HTTP Basic
authentication you have used so far, but the basic flow, shown in figure 4.4, is quite
simple. Rather than send the username and password directly to each API endpoint,
the client instead sends them to a dedicated login endpoint. The login endpoint veri-
fies the username and password and then issues a time-limited token. The client then
includes that token on subsequent API requests to authenticate. The API endpoint
Login (username, password)
Token
The client calls a dedicated
login endpoint rather than
sending credentials on
every request.
The login endpoint returns a
time-limited token to the client . . .
Token store
Token
The client includes the token
on subsequent requests.
The API server can look up the
token in the database to check
if the client is authenticated.
. . . and stores the token
in a database.
API server
Client
Client
API server
Figure 4.4
In token-based authentication, the client first makes a request to a dedicated 
login endpoint with the user’s credentials. In response, the login endpoint returns a time-
limited token. The client then sends that token on requests to other API endpoints that 
use it to authenticate the user. API endpoints can validate the token by looking it up in 
the token database.
111
Token-based authentication
can validate the token because it is able to talk to a token store that is shared between
the login endpoint and the API endpoint.
 In the simplest case, this token store is a shared database indexed by the token ID,
but more advanced (and loosely coupled) solutions are also possible, as you’ll see in
chapter 6. A short-lived token that is intended to authenticate a user while they are
directly interacting with a site (or API) is often referred to as a session token, session
cookie, or just session.
 For web browser clients, there are several ways you can store the token on the cli-
ent. Traditionally, the only option was to store the token in an HTTP cookie, which
the browser remembers and sends on subsequent requests to the same site until the
cookie expires or is deleted. You’ll implement cookie-based storage in the rest of this
chapter and learn how to protect cookies against common attacks. Cookies are still a
great choice for first-party clients running on the same origin as the API they are talking
to but can be difficult when dealing with third-party clients and clients hosted on other
domains. In chapter 5, you will implement an alternative to cookies using HTML 5
local storage that solves these problems, but with new challenges of its own.
DEFINITION
A first-party client is a client developed by the same organization
or company that develops an API, such as a web application or mobile app.
Third-party clients are developed by other companies and are usually less
trusted.
4.2.1
A token store abstraction
In this chapter and the next two, you’re going to implement several storage options
for tokens with different pros and cons, so let’s create an interface now that will let
you easily swap out one solution for another. Figure 4.5 shows the TokenStore inter-
face and its associated Token class as a UML class diagram. Each token has an associ-
ated username and an expiry time, and a collection of attributes that you can use to
associate information with the token, such as how the user was authenticated or other
details that you want to use to make access control decisions. Creating a token in the
store returns its ID, allowing different store implementations to decide how the token
should be named. You can later look up a token by ID, and you can use the Optional
+ username : String
+ expiry : Instant
+ attributes : Map
Token
+ create(token: Token): String
+ read(tokenId: String): Optional
>
TokenStore
1
0..*
Figure 4.5
A token store has operations to create a token, returning its ID, and to look 
up a token by ID. A token itself has an associated username, an expiry time, and a set 
of attributes.
112
CHAPTER 4
Session cookie authentication
class to handle the fact that the token might not exist; either because the user passed
an invalid ID in the request or because the token has expired.
 The code to create the TokenStore interface and Token class is given in listing 4.4.
As in the UML diagram, there are just two operations in the TokenStore interface for
now. One is for creating a new token, and another is for reading a token given its ID.
You’ll add another method to revoke tokens in section 4.6. For simplicity and concise-
ness, you can use public fields for the attributes of the token. Because you’ll be writing
more than one implementation of this interface, let’s create a new package to hold
them. Navigate to src/main/java/com/manning/apisecurityinaction and create a
new folder named “token”. In your text editor, create a new file TokenStore.java in the
new folder and copy the contents of listing 4.4 into the file, and click Save.
package com.manning.apisecurityinaction.token;
import java.time.*;
import java.util.*;
import java.util.concurrent.*;
import spark.Request;
public interface TokenStore {
  String create(Request request, Token token);             
  Optional read(Request request, String tokenId);   
  class Token {
    public final Instant expiry;                    
    public final String username;                   
    public final Map attributes;    
    public Token(Instant expiry, String username) {
      this.expiry = expiry;
      this.username = username;
      this.attributes = new ConcurrentHashMap<>();   
    }
  }
}
In section 4.3, you’ll implement a token store based on session cookies, using Spark’s
built-in cookie support. Then in chapters 5 and 6 you’ll see more advanced imple-
mentations using databases and encrypted client-side tokens for high scalability.
4.2.2
Implementing token-based login
Now that you have an abstract token store, you can write a login endpoint that uses
the store. Of course, it won’t work until you implement a real token store backend,
but you’ll get to that soon in section 4.3.
Listing 4.4
The TokenStore abstraction
A token can be 
created and then 
later looked up 
by token ID.
A token has an expiry time, 
an associated username, 
and a set of attributes.
Use a concurrent map if 
the token will be accessed 
from multiple threads.
113
Token-based authentication
 As you’ve already implemented HTTP Basic authentication, you can reuse that
functionality to implement token-based login. By registering a new login endpoint
and marking it as requiring authentication, using the existing UserController filter,
the client will be forced to authenticate with HTTP Basic to call the new login end-
point. The user controller will take care of validating the password, so all our new
endpoint must do is look up the subject attribute in the request and construct a token
based on that information, as shown in figure 4.6.
The ability to reuse the existing HTTP Basic authentication mechanism makes the
implementation of the login endpoint very simple, as shown in listing 4.5. To implement
token-based login, navigate to src/main/java/com/manning/apisecurityinaction/
controller and create a new file TokenController.java. The new controller should
take a TokenStore implementation as a constructor argument. This will allow you to
swap out the token storage backend without altering the controller implementation.
As the actual authentication of the user will be taken care of by the existing User-
Controller, all the TokenController needs to do is pull the authenticated user sub-
ject out of the request attributes (where it was set by the UserController) and create
a new token using the TokenStore. You can set whatever expiry time you want for the
tokens, and this will control how frequently the user will be forced to reauthenticate.
In this example it’s hard-coded to 10 minutes for demonstration purposes. Copy the
contents of listing 4.5 into the new TokenController.java file, and click Save.
Login endpoint
User controller
Password
database
Request
Authenticate user
with HTTP Basic.
If Basic auth succeeds,
then proceed to token
login endpoint.
If Basic auth fails,
then request is rejected.
Token store
Figure 4.6
The user controller authenticates the user with HTTP Basic 
authentication as before. If that succeeds, then the request continues to the 
token login endpoint, which can retrieve the authenticated subject from the 
request attributes. Otherwise, the request is rejected because the endpoint 
requires authentication.
114
CHAPTER 4
Session cookie authentication
package com.manning.apisecurityinaction.controller;
import java.time.temporal.ChronoUnit;
import org.json.JSONObject;
import com.manning.apisecurityinaction.token.TokenStore;
import spark.*;
import static java.time.Instant.now;
public class TokenController {
    private final TokenStore tokenStore;              
    public TokenController(TokenStore tokenStore) {   
        this.tokenStore = tokenStore;                 
    }
    public JSONObject login(Request request, Response response) {
        String subject = request.attribute("subject");           
        var expiry = now().plus(10, ChronoUnit.MINUTES);         
        var token = new TokenStore.Token(expiry, subject);   
        var tokenId = tokenStore.create(request, token);     
        response.status(201);
        return new JSONObject()                              
                .put("token", tokenId);                      
    }
}
You can now wire up the TokenController as a new endpoint that clients can call to
login and get a session token. To ensure that users have authenticated using the User-
Controller before they hit the TokenController login endpoint, you should add the
new endpoint after the existing authentication filters. Given that logging in is an
important action from a security point of view, you should also make sure that calls to
the login endpoint are logged by the AuditController as for other endpoints. To add
the new login endpoint, open the Main.java file in your editor and add lines to create
a new TokenController and expose it as a new endpoint, as in listing 4.6. Because you
don’t yet have a real TokenStore implementation, you can pass a null value to the
TokenController for now. Rather than have a /login endpoint, we’ll treat session
tokens as a resource and treat logging in as creating a new session resource. There-
fore, you should register the TokenController login method as the handler for a POST
request to a new /sessions endpoint. Later, you will implement logout as a DELETE
request to the same endpoint.
Listing 4.5
Token-based login
Inject the token store 
as a constructor 
argument.
Extract 
the subject 
username from 
the request and 
pick a suitable 
expiry time.
Create the token 
in the store and 
return the token 
ID in the response.
115
Session cookies
TokenStore tokenStore = null;                           
var tokenController = new TokenController(tokenStore);  
before(userController::authenticate);    
var auditController = new AuditController(database);   
before(auditController::auditRequestStart);            
afterAfter(auditController::auditRequestEnd);          
before("/sessions", userController::requireAuthentication);  
post("/sessions", tokenController::login);                   
Once you’ve added the code to wire up the TokenController, it’s time to write a real
implementation of the TokenStore interface. Save the Main.java file, but don’t try to
test it yet because it will fail.
4.3
Session cookies
The simplest implementation of token-based authentication, and one that is widely
implemented on almost every website, is cookie-based. After the user authenticates,
the login endpoint returns a Set-Cookie header on the response that instructs the
web browser to store a random session token in the cookie storage. Subsequent
requests to the same site will include the token as a Cookie header. The server can
then look up the cookie token in a database to see which user is associated with that
token, as shown in figure 4.7.
Listing 4.6
The login endpoint
Are cookies RESTful?
One of the key principles of the REST architectural style is that interactions between
the client and the server should be stateless. That is, the server should not store any
client-specific state between requests. Cookies appear to violate this principle
because the server stores state associated with the cookie for each client. Early uses
of session cookies included using them as a place to store temporary state such as
a shopping cart of items that have been selected by the user but not yet paid for.
These abuses of cookies often broke expected behavior of web pages, such as the
behavior of the back button or causing a URL to display differently for one user com-
pared to another.
When used purely to indicate the login state of a user at an API, session cookies are
a relatively benign violation of the REST principles, and they have many security attri-
butes that are lost when using other technologies. For example, cookies are associ-
ated with a domain, so the browser ensures that they are not accidentally sent to
other sites. They can also be marked as Secure, which prevents the cookie being acci-
dentally sent over a non-HTTPS connection where it might be intercepted. I therefore
Create the new 
TokenController, 
at first with a null 
TokenStore.
Ensure the user is authenticated 
by the UserController first.
Calls to the login endpoint 
should be logged, so make 
sure that also happens first.
Reject unauthenticated 
requests before the 
login endpoint can be 
accessed.
116
CHAPTER 4
Session cookie authentication
Cookie-based sessions are so widespread that almost every web framework for any lan-
guage has built-in support for creating such session cookies, and Spark is no excep-
tion. In this section you’ll build a TokenStore implementation based on Spark’s
session cookie support. To access the session associated with a request, you can use the
request.session() method:
Session session = request.session(true);
Spark will check to see if a session cookie is present on the request, and if so, it will
look up any state associated with that session in its internal database. The single boolean
argument indicates whether you would like Spark to create a new session if one does
(continued)
think that cookies still have an important role to play for APIs that are designed to
serve browser-based clients served from the same origin as the API. In chapter 6,
you’ll learn about alternatives to cookies that do not require the server to maintain
any per-client state, and in chapter 9, you’ll learn how to use capability URIs for a
more RESTful solution.
Web server
Web browser
client
Login
Set-Cookie: SESSID=XyZ...
Web server
Web browser
client
POST /spaces/...
Cookie: SESSID=XyZ...
When the user logs in,
the server responds with
a Set-Cookie header.
On subsequent requests,
the browser sends the session
token as a Cookie header.
Token
store
Token
store
Figure 4.7
In session cookie authentication, after the user logs in the server 
sends a Set-Cookie header on the response with a random session token. On 
subsequent requests to the same server, the browser will send the session token 
back in a Cookie header, which the server can then look up in the token store to 
access the session state.
117
Session cookies
not yet exist. To create a new session, you pass a true value, in which case Spark will
generate a new session token and store it in its database. It will then add a Set-Cookie
header to the response. If you pass a false value, then Spark will return null if there
is no Cookie header on the request with a valid session token.
 Because we can reuse the functionality of Spark’s built-in session management,
the implementation of the cookie-based token store is almost trivial, as shown in list-
ing 4.7. To create a new token, you can simply create a new session associated with the
request and then store the token attributes as attributes of the session. Spark will take
care of storing these attributes in its session database and setting the appropriate Set-
Cookie header. To read tokens, you can just check to see if a session is associated with
the request, and if so, populate the Token object from the attributes on the session.
Again, Spark takes care of checking if the request has a valid session Cookie header
and looking up the attributes in its session database. If there is no valid session cookie
associated with the request, then Spark will return a null session object, which you
can then return as an Optional.empty()value to indicate that no token is associated
with this request. 
 To create the cookie-based token store, navigate to src/main/java/com/manning/
apisecurityinaction/token and create a new file named CookieTokenStore.java. Type
in the contents of listing 4.7, and click Save.
WARNING
This code suffers from a vulnerability known as session fixation.
You’ll fix that shortly in section 4.3.1.
package com.manning.apisecurityinaction.token;
import java.util.Optional;
import spark.Request;
public class CookieTokenStore implements TokenStore {
    @Override
    public String create(Request request, Token token) {
        // WARNING: session fixation vulnerability!
        var session = request.session(true);           
        session.attribute("username", token.username);    
        session.attribute("expiry", token.expiry);        
        session.attribute("attrs", token.attributes);     
        return session.id();
    }
    @Override