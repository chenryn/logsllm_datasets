 l[5] = (l[5]>4)
 l[1] = l[1] ⊻ l[5] ⊻ (l[2]>1)
 if l != dest
  return false
 else
  return true
 end
 #if word != "juL1@"
 # return false
 #else
 # return true
 #end
end
function check5(word)
 if length(word) != 13
  return false
 end
 base = BigInt(3)
 result = BigInt(1)
 for i = 1:13
  #global result
  #global base
  if word[i] != 'Z' && word[i] != 'z'
   return false
  end
  if word[i] == 'Z'
   result = result * base
  end
  base *= base
 end
 #println(result)
 if result != 
61679946777506378467872840312841986991667249152929142074166257699228071106887010
75146631681903787645131506509092609320621680335996011774133185924915744219183246
97420251006158808045052575689552302268036359257397440938757775421630755444465318
09677648124663822063039165226064902905602842930107484946595209322524005221327015
03847731262931700009254884130125557658811643798175788587564577224264756167863381
39123440401300401004443422210356971455945469017931960996274214577409381853005046
63647791702978999962154158827496981966921262839116871702388294591952015416863476
48768736129003321187960266022395285700138347393691701069800248507644296815948904
64297623128839040639289113749426583249475940157309721085011466315327431375653753
40181095892065706025405593260392008487166386173677131719887118934026042628985515
64788694015795986970388491176582531665735658490435481200684917725457390389445927
20701773955110489929320803189469159756775137231617323596921870123612933347531212
66874837265181988845134314413737323221373875134111861138154890082049098827672111
69670588119365268975311156035629164815032021033896627248205135889384062142533117
42712617409566428822968898385751405291242937354098963673041161444450027589555378
62885249056724812909149622306639429787119771916170653552853762523009198560612620
86308230629602563968135550187794697940223487471707339180184560459695301837543872
63568148832798074443881093223817517333691010806716110452493414571938958285109736
89357505170778900347544804452397960659560233829530811043913215054924188796428437
44083771488220776322694705558795406301099726143053265877629581376259736759379188
07031467759038018087527358956461355907730503993152153288949287465411646168772143
37295606043450536652953532360766645870879943101944068270227866564998476721933856
24034515585768388568701635965244814323298597210348083543194600191130177132309986
67896937355182944200274748531186657537835070352723871110209536938433635691040400
44693561908061731576325877528294343862871145782911554648807092136414228760023939
11662603315051364986980980896704848929494530865685081868837652490605249636514235
05718220770295232165745445632154078161815225127852826804193082198241714653831934
46392629424092874137583652589367195858882458235848247878396957929423508359753258
89291159555569773698908762648328204484224374476005032892196588715683423064219222
09521018795608405042845353137267495007272621117282558527503741064418621896053910
92031963752945680563469776908405477478225089695308708557172947465239480686578105
45614758240263248907656864643160983042403080961181298595656632900922716579858394
87195890434817004015345305627461111501980650678410820236795140135359271070941662
48554025186084775781914641021292148379789945627962712861108184027755338441161388
32972397140813091516932287622012692130454886149279432122660261892989759781348004
54502999715032604479687254879531520282421802106860544794952828253275398419942736
09813801177279247070970975677553387590710371355820686778412426049843368218249129
07298987321024269757948506834116030717378803260595543851757773593544092953717412
77776594690200642255235778894185099413101198530015695676165276351211733759214136
29037704436404170775878688434017394639460119764273662775356914155383033156808985
71953720879996801759034877085380157983224998649271609665774965177001138337677090
025872131388597130451372531363
  return false
 else
  return true
 end
 #if word != "ZzzZZzzzZZzZZ"
 # return false
 #else
 # return true
 #end
end
function real_main()
 # flag = "n0w_You_kN0w_juL1@_ZzzZZzzzZZzZZ"
 print("> ")
 s = readline(stdin)
EasyAPK
   First of all,ﬁnd the key function sub_13040  according to the RegisterNatives  API,then you 
can see that the function sub_EA3C   is a function which calculates the length of input string and 
ﬁnally you'll ﬁnd  length of the string that you input must be 39.
   Then you'll ﬁnd that all native functions use obfuscator,but the logic of all methods can be 
analyzed if you stay positive and be patient. After dynamic analysis with IDA and frida,You'll ﬁnd 
that the method sub_12930  is a encrypt function using base64 , v39  is the length added with the 
ﬁrst part of you input.Although the function use another table unk_39020 ,which can be see by 
dynamic analysis or just using frida.
    After using frida,the content of it is shown as follows:
 if length(s) != 32
  println("err")
  exit()
 end
 l = split(s, "_")
 if length(l) != 5
  println("err")
  exit()
 end
 if check1(l[1]) && check2(l[2]) && check3(l[3]) && check4(l[4]) && check5(l[5])
  println("n1ctf{$s}")
 else
  println("noo")
 end
end
if abspath(PROGRAM_FILE) == @__FILE__
    real_main()
end
end # module
    Following the execution order,You'll ﬁnd that function sub_F020   hold the result of method  
sub_12930 ,and it is a strcmp  function,then we get the encrypted ciphertext 
jZe3yJG3zJLHywu4otmZzwy/  and get the ﬁrst part of plaintext which shows as follows:
    Stay patient and keep anaylsis,you'll ﬁnd sub_122A0  is the next key function, hook  it,
    Obviously，the ﬁrst argument is the length adding to the second part of our input,the second 
and the last one are used before.After anaylsis for the function sub_122A0 ,You'll ﬁnd it is a 
method using AES-CBC  according to the constants it uses.Just like the next picture shows.
    Then,you should get the ciphertext which used for compared.this part is so easy that you all 
knows,just showing the second ﬂag. 
    Then you got the whole ﬂag : n1ctf{17b87f9aae8933ef03b5029f16f7e605}  
    All scripts are shown as follows:
function print_string(offset){
    var module = Process.findModuleByName("libnative-lib.so")
    var base  = module.base;
    console.log(ptr(base.add(ptr(offset))).readCString());
}
function hook_native(){
    var module = Process.findModuleByName("libnative-lib.so")
    var base  = module.base;
    var sub_12930 = base.add(0x12930);
    Interceptor.attach(sub_12930,{
        onEnter : function(args){
            this.arg0 = args[0];
            console.log("sub_12930 onEnter:",hexdump(this.arg0),"\r\n");
        },onLeave : function(retval){
            console.log("sub_12930 onLeave:",hexdump(retval));
        }
    });
    var sub_122A0 = base.add(0x122A0);
    Interceptor.attach(sub_122A0,{
        onEnter : function(args){
            this.arg0 = args[0]
            this.arg1 = args[1]
            this.arg2 = args[2]
            console.log("sub_122A0 
onEnter:",ptr(this.arg0).readCString(),ptr(this.arg1).readCString(),ptr(this.arg
2).readCString())
        },onLeave : function(retval){
            console.log("sub_122A0 onLeave:",hexdump(retval))
        }
    });
}
Fixed Camera
1.Use Cheat Engine to search the value of angle
2.Lock this value, but doesn't work, seem like value has been encrypted.
3.Use IL2CppDumper to dump the program, and it is easy to ﬁnd the user script.
https://github.com/Perfare/Il2CppDumper
4.Locate to the value encryption function, and found the value encrypts by random number.
5.Take out the random funtion by debuger, then you can ﬁnd the unencrypted value appear in 
program memory.（Or you could just patch the limitation code of angle ）
N1vault
function main(){
    hook_native();
}
setImmediate(main);
EasyRE
Apply for memory in vm_init to read the opcode and initialize the registers and memory.
Looking at vm_run, we can't see all the pseudo code
We can create a new segment, copy the exception handling to this segment, and create a function 
for each exception handling to view the pseudo code.
Write a disassembly script of the virtual machine instructions according to the pseudo code:
import binascii
rip = 0
f=open('opcode.bin','rb')
t=f.read()
opcode=[((t[i+3]>= 4;')
    elif opcode_type==opcode_type_id[5]:
        if opcode_a1==0x800000: