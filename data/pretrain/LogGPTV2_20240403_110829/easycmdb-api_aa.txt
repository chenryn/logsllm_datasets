Open Api 文档
Word 版本附件：
案例代码：
接口权限申请联系【潘杰彬】
正式内容：
1.    CMDB概念介绍 
1.1.      基本概念介绍
模型-object 
类似于传统数据库中的表名，模型id全局唯一。比如HOST是主机的id。
实例-instance 
类似于表中的每一行记录，包含了模型定义时的必填字段。
实例id-instanceid 
每一条数据记录都有一个全局唯一的instanceid， 通过instanceid可以查询到指定实例的详细信息。
关系relation 
模型与模型之间的联系成为关系，比如，设备属于某个机柜，模型“设备”属于“机柜”就是一种关系。
关系架构图
1.2.  OpenAPI签名算法
签名的基本形式
每个用户都有两个独立唯一的key, 分别是: AccessKey和SecretKey, 可以从console中获得其中AccessKey用于唯一标识用户个人, 而SecretKey用于签名示例：
access_key: 7410a3c9783a5a0a11175583
screct_key: aa2ce2cf1692242ea3e43ee2a2789d89c4a336e28466ac2ed3b7752ba8d7b07e
如果需要进行相关接口调用，需要向EasyOps平台管理员单独申请。
Signature = HMAC-SHA1( 'SecretKey', UTF-8-Encoding-Of( StringToSign ) ) );
StringToSign = HTTP-Verb + "\n" +
 URL + "\n" +
 Parameters + "\n" +
 Content-Type + "\n" +
 Content-MD5 + "\n" +
 Date + "\n" +
 AccessKey;
HTTP-Verb: 指HTTP请求方法如, GET, POST, PUT, DELETEURL: 指所访问的资源路径如, /cmdb/object/list
Parameters: 指请求中的URL参数, 其构成规则如下:
1. 对参数key进行升序排序
2. 对于所有参数以key+value方式串联
Content-Type: 请求Header中的Content-Type值
Content-MD5: 请求Header中的Content-MD5值, 等同于对body数据的md5sum
Date: 整形, 请求发生时的时间戳
AccessKey: 用户自己的AccessKey
URL签名认证方式
采用URL签名认证方式, 需要增加URL参数:
/url/ ?accesskey=AccessKey &signature &expires 1460314842
例子1:
GET /cmdb/object/list?page=1&pageSize=30accesskey = "3fc93fed595063856df3ee1a"
secretkey = "1e338744a33426b3394e0ae9cd45af9c4e0d5fee5aad497e969cd21c65963d36"
StringToSign = "GET" + "\n" +
"/cmdb/object/list" + "\n" +
"page1pageSize30" + "\n" +
"\n" +
"\n" +
"1460314842" + "\n" +
"3fc93fed595063856df3ee1a"
signature = HMAC-SHA1( secretkey, StringToSign ) = "3fc93fed595063856df3ee1a"
//url://url:
GET /cmdb/object/list?page=1 &pageSize= 30 &accesskey= fc93fed595063856df3ee1a&signature=e01d1fee0425994caa85a
9ff46e6ba1630cea4b7&expires= 1460314842
OpenAPI的SDK的使用
在sdk文件夹中有python、java以及go版本的OpenAPI的SDK，在easyops_openapi文件里面已经封装好了openapi的签名算法以及请求的类，可以直
接使用，无需再自行实现。具体使用见示例代码：各版本sdk下的example文件。
2.    接口介绍
测试账号
URL = ' ’
HEADERS = {
 'host': ' ',
 'Content-Type': 'application/json',
}'Content-Type': 'application/json',
}
ACCESS_KEY = '118a03c99886a3d51af8f5c6'
SECRET_KEY = '171cd4a4b5d5d2051e9de97bdf15e908d22f1d55fa6656f91f48ffe4a8d4f5eb'
2.1.  实例详情查询
接口介绍
查询指定模型 {OBJECT_ID} 的实例信息，支持属性的查询, 支持内联结构体的属性查询, 支持以关系ID表达的任意层级关系查询。（IDCMDB CMDB 模型梳理》）
接口URL：
POST /cmdb/object/{OBJECT_ID}/instance/_search
请求参数：
| 名称 | 类型 | 必选 | 备注 | 默认值 |
|---|---|---|---|---||---|---|---|---|---|
| object_id |string |是 |资源模型ID，在URL中替换{OBJECT_ID} | |
| query |array |否 |查询条件, 支持MongoDB语法的 $eq, $ne, $and, $or, $in, $nin, $regex, $gt, $gte, $lt, $lte, 扩展了两个关键字 $like(子字符串匹配), $nlike($like关键字的反面), 我们还支持$size(用于查询关系的数量或者数组字段的大小) 和 $exists(用于查询字段是否有值) | |
| page |int |否 |页码, 默认1 | |
| page_size |int |否 |页大小, 默认30 | || page_size |int |否 |页大小, 默认30 | |
| fields |array |否 |过滤的字段列表, 留空代表返回所有字段(true: 表示指定获取字段, false:  表示指定不获取的字段)(支持关系数据的二级jsonPath格式的指定字段如 ),  留空代表返回所有字段，对于包含大量属性的模型实例（如主机），通过该字段获取需要的指定字段可以提高接口效率。 | |
| sort |array |否 |按字段排序, 留空默认按照实例ID降序排序(1表示升序, -1表示降序) | |
| only_relation_view |bool |否 |对于关联的实例数据是否只获取relation_view中指定的属性, 这个字段为true时, 会覆盖fields字段中指定的二级字段设置 |FALSE |
| only_my_instance |bool |否 |是否只获取与自己有关的那部分数据, 默认为false |FALSE |返回值说明：
返回类型： json
被搜索实例数据
请求示例：
{
	 "sort": {
	 "instanceId": 1
	 }, 
	 "permission": [
	 "operate", 
	 "update"
	 ], 
	 "fields": {
	 "clusters.instanceId": true, 
	 "name": true, 
	 "instanceId": true, 
	 "ip": true, 
	 "clusters.name": true, 
	 "_id": false, 
	 "clusters._packageList": false
 }, 
 "page_size": 1000, 
 "query": {
	 "name": {
	 "$like": "%light%", 
	 "$regex": "light"
	 },"$regex": "light"
	 }, 
	 "ip": {
	 "$in": [
	 "127.0.0.1", 
	 "192.168.100.1"
	 ]
	 }, 
	 "age": {
	 "$lte": 18
	 }, 
	 "sex": "female", 
	 "host": {
	 "$exists": false
	 }, 
	 "_businesses_APP.clusters.deviceList.ip": {
	 "$in": [
	 "192.168.100.122"
	 ]
	 }, 
	 "_packageList.installPath": {
	 "$like": "/usr/local/easyops/%"
	 }, 
	 "owner.name": {
	 "$like": "%light%", 
	 "$in": [
	 "lightjiao""$in": [
	 "lightjiao"
	 ]
	 }, 
	 "_businesses_APP.clusters.deviceList": {
	 "$size": {
	 "$gt": 5
	 }
	 }, 
	 "port": {
	 "$exists": true
	 }
	 }, 
	 "page": 1 
}
例子1查询主机模型实例名称 
POST /cmdb/object/HOST/instance/_search
请求params示例
要获取ip、hostname、负责人以及主机关联的负责人名称,主机所属集群ID
{
	 " fields ": {
	 "ip": true,
	 "hostname": true,
	 ""ip": true,
	 "hostname": true,
	 " 
": true,	 " ": true,           //主机所属宿主机名称	 "_deviceList_CLUSTER.clusterId": true,      //主机所属集群的集群ID	 " _deviceList_CLUSTER.name ": true            // 主机所属集群的集群名	 },
	 "page_size": 200,
	 "page": 1 
}
附加说明：想要获取模型中更多的属性值请在上面的fields字典中加入该属性的id作为键，值为True即可；返回值中会包含total字段，它是模型下 所有实例的总数目，而page_size参数是代表按多少实例条目数进行分页查询，page则是代表在按该分页规则下查询第几页的实例，故我们推荐根据 实际情况设定page_size的值确定一次访问的实例数，然后根据返回的total值判断在该page_size值分页下会有多少页，然后修改page值访问下一页 实例来循环遍历模型下所有的实例。返回值示例说明
{
	 "code": 0,
	 "error": "成功",
	 "message": "Success",
	 "data": {
	 "total": 20,
	 "page": 1,
	 "page_size": 200,
	 "list": [
	 {
	 "instanceId": "5bfb6f322a5a6",
	 "owner": [],
	 "VMHOSTHARDWAREBASIC": [],
	 "_deviceList_CLUSTER": [
	 {
	 "name": "上游生产集群",
	 "clusterId": "713035243365a6f183ab8a7af0eba787",	 "instanceId": "5c10cca6a8642"
	 },
	 {
	 "name": "test生产环境",},
	 {
	 "name": "test生产环境",
	 "clusterId": "67f30c83b1e76585dee9a961c8416c11",	 "instanceId": "5c10c27ab30ef"
	 },
	 {
	 "name": "pre-prd",
	 "clusterId": "94d5185c3417a9e8d8626c7cc16e43a5",	 "instanceId": "5c107f3a12897"
	 }
	 ]
	 }
	 ]
	 } 
}
返回的查询信息字典：{
 ‘total’:2,    //模型下实例总数
 ‘page_size’:2000,//本次查询是根据多少条目数进行分页
 ‘page’:1,     //本次查询的是第几页的数据
 ‘list’: 返回的实例信息字典列表
} 
其中instanceId是默认返回的。} 
其中instanceId是默认返回的。
另：实例的主机关联的业务系统名称因不是直接与HOST关联，故无法直接查询，可通过 编写逻辑 从系统关联应用->应用关联主机进行查询
例子2查询应用模型实例名称 
POST /cmdb/object/APP/instance/_search
请求params示例
获取实例的名称、运维负责人、开发负责人、测试负责人、应用关联主机名以及与应用关联的业务系统名称的值
{
	 " fields ": {
	 "name": true,
	 " ": true,
	 " ": true,
	 " ": true,
	 " 
": true,             // 应用关联业务系统名称	 "clusters.deviceList.hostname": true  //应用关联集群下的主机列表	 },
	 "page_size": 2000,"page_size": 2000,
	 "page": 1 
}
应用关联的主机名可以用三级联系获取“clusters.deviceList.hostname”
此法也可用于获取主机的ip等信息“clusters.deviceList.ip”，主机信息字段可参见HOST模型 
附加说明：想要获取模型中更多的属性值请在上面的fields字典中加入该属性的id作为键，值为True即可；返回值中会包含total字段，它是模型下 所有实例的总数目，而page_size参数是代表按多少实例条目数进行分页查询，page则是代表在按该分页规则下查询第几页的实例，故我们推荐根据 实际情况设定page_size的值确定一次访问的实例数，然后根据返回的total值判断在该page_size值分页下会有多少页，然后修改page值访问下一页 实例来循环遍历模型下所有的实例。
返回值示例说明
{返回值示例说明
{
	 "code": 0,
	 "error": "成功",