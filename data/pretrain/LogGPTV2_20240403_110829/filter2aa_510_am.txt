# Network Services Configuration and Management

## DHCP Subnet Settings
### Parameters
- **subnetID**: A unique identifier for the subnet. This can be any number not already assigned to another subnet on the server, and may include hyphens (-).
- **dns-server-n**: To add additional DNS servers, increment `dhcp_name_server` settings with `_array_index:n` for each new value.
- **Other parameters**: Refer to the "DHCP Subnet Settings Array" on page 131 for standard subnet settings.

### Commands
- **(dhcp:command=)**
  - **getLogPaths**: Determines the location of the DHCP service logs.
  - **Value**: The location of the DNS service log.
  - **Default**: `/var/logs/system.log`

## DNS Service
### Starting and Stopping the DNS Service
- **Start DNS Service**:
  ```bash
  $ sudo serveradmin start dns
  ```
- **Stop DNS Service**:
  ```bash
  $ sudo serveradmin stop dns
  ```

### Checking the Status of DNS Service
- **Summary Status**:
  ```bash
  $ sudo serveradmin status dns
  ```
- **Detailed Status**:
  ```bash
  $ sudo serveradmin fullstatus dns
  ```

### Viewing DNS Service Settings
- **List All Settings**:
  ```bash
  $ sudo serveradmin settings dns
  ```
- **List a Specific Setting**:
  ```bash
  $ sudo serveradmin settings dns:setting
  ```
- **List a Group of Settings**:
  ```bash
  $ sudo serveradmin settings dns:zone:_array_id:localhost:*
  ```

### Changing DNS Service Settings
- **Modify DNS Configuration**:
  - Use `serveradmin` to modify DNS settings, or refer to books like "DNS and BIND" by Paul Albitz and Cricket Liu for more detailed instructions.

### DNS Service Settings
- **To list the settings, see “Viewing DNS Service Settings” on this page.**

### List of DNS `serveradmin` Commands
- **Viewing the DNS Service Log**:
  - You can use `tail` or any other file listing tool to view the contents of the DNS service log.
  - **Command**:
    ```bash
    $ tail log-file
    ```
  - **Display Log Path**:
    ```bash
    $ sudo serveradmin command dns:command = getLogPaths
    ```
  - **Default Log Location**: `/Library/Logs/named.log`

- **Listing DNS Service Statistics**:
  - **Command**:
    ```bash
    $ sudo serveradmin command dns:command = getStatistics
    ```
  - **Sample Output**:
    ```plaintext
    dns:queriesArray:_array_index:0:name = "NS_QUERIES"
    dns:queriesArray:_array_index:0:value = -1
    ...
    dns:recursion = 0
    dns:startedTime = "2003-09-10 11:24:03 -0700"
    dns:referral = 0
    ```

## Firewall Service
### Starting and Stopping Firewall Service
- **Start Firewall Service**:
  ```bash
  $ sudo serveradmin start ipfilter
  ```
- **Stop Firewall Service**:
  ```bash
  $ sudo serveradmin stop ipfilter
  ```

### Checking the Status of Firewall Service
- **Summary Status**:
  ```bash
  $ sudo serveradmin status ipfilter
  ```
- **Detailed Status (Including Rules)**:
  ```bash
  $ sudo serveradmin fullstatus ipfilter
  ```

### Viewing Firewall Service Settings
- **List All Settings**:
  ```bash
  $ sudo serveradmin settings ipfilter
  ```
- **List a Specific Setting**:
  ```bash
  $ sudo serveradmin settings ipfilter:setting
  ```
- **List a Group of Settings**:
  ```bash
  $ sudo serveradmin settings ipfilter:ipAddressGroups:*
  ```

### Changing Firewall Service Settings
- **Change a Single Setting**:
  ```bash
  $ sudo serveradmin settings ipfilter:setting = value
  ```
- **Change Multiple Settings**:
  ```bash
  $ sudo serveradmin settings
  ipfilter:setting = value
  ipfilter:setting = value
  ipfilter:setting = value
  Control-D
  ```

### Firewall Service Settings
- **Use the following parameters with the `serveradmin` command to change IPFilter settings.**
- **Parameters**:
  - **ipAddressGroupsWithRules:** An array of settings describing services allowed for specific IP address groups.
  - **rules:** Arrays of rule settings, one array per defined rule.

### Defining Firewall Rules
- **Adding Rules by Modifying `ipfw.conf`**:
  - Modify the `/etc/ipfilter/ipfw.conf` file to define firewall rules using standard syntax.
  - **Default Contents**:
    ```plaintext
    # ipfw.conf.default - Installed by Apple, never modified by Server Admin app
    ...
    ```

- **Adding Rules Using `serveradmin`**:
  - Use the `serveradmin settings` command to add firewall rules.
  - **Example**:
    ```bash
    $ sudo serveradmin settings
    ipfilter:rules:_array_id:1111 = create
    ipfilter:rules:_array_id:1111:source = "10.10.41.60"
    ipfilter:rules:_array_id:1111:protocol = "udp"
    ipfilter:rules:_array_id:1111:destination = "any via en0"
    ipfilter:rules:_array_id:1111:action = "allow"
    ipfilter:rules:_array_id:1111:enableLocked = yes
    ipfilter:rules:_array_id:1111:enabled = yes
    ipfilter:rules:_array_id:1111:log = no
    ipfilter:rules:_array_id:1111:readOnly = yes
    ipfilter:rules:_array_id:1111:source-port = ""
    Control-D
    ```

### IPFilter Rules Array
- **An array of the following settings is included in the IPFilter settings for each defined firewall rule.**

### Firewall `serveradmin` Commands
- **Commands**:
  - **getLogPaths**: Finds the current location of the log used by the service.
  - **getStandardServices**: Retrieves a list of standard services as they appear in the Server Admin GUI.
  - **writeSettings**: Equivalent to the standard `serveradmin settings` command, but also returns a setting indicating whether the service needs to be restarted.

### Viewing Firewall Service Log
- **View the latest entries in the log**:
  ```bash
  $ tail log-file
  ```
- **Display Log Path**:
  ```bash
  $ sudo serveradmin command ipfilter:command = getLogPaths
  ```
- **Output**:
  ```plaintext
  ipfilter:systemLog = 
  ```

### Using Firewall Service to Simulate Network Activity
- **You can use the Firewall service in conjunction with Dummynet, a general-purpose network load simulator. For more information, visit [ai3.asti.dost.gov.ph/sat/dummynet.html](http://ai3.asti.dost.gov.ph/sat/dummynet.html).**

## NAT Service
### Starting and Stopping NAT Service
- **Start NAT Service**:
  ```bash
  $ sudo serveradmin start nat
  ```
- **Stop NAT Service**:
  ```bash
  $ sudo serveradmin stop nat
  ```

### Checking the Status of NAT Service
- **Summary Status**:
  ```bash
  $ sudo serveradmin status nat
  ```
- **Detailed Status**:
  ```bash
  $ sudo serveradmin fullstatus nat
  ```

### Viewing NAT Service Settings
- **List All Settings**:
  ```bash
  $ sudo serveradmin settings nat
  ```
- **List a Specific Setting**:
  ```bash
  $ sudo serveradmin settings nat:setting
  ```

### Changing NAT Service Settings
- **Change a Single Setting**:
  ```bash
  $ sudo serveradmin settings nat:setting = value
  ```
- **Change Multiple Settings**:
  ```bash
  $ sudo serveradmin settings
  nat:setting = value
  nat:setting = value
  nat:setting = value
  Control-D
  ```

### NAT Service Settings
- **Parameters**:
  - **deny_incoming**: `yes|no` (Default: `no`)
  - **log_denied**: `yes|no` (Default: `no`)
  - **clamp_mss**: `yes|no` (Default: `yes`)
  - **reverse**: `yes|no` (Default: `no`)
  - **log**: `yes|no` (Default: `yes`)
  - **proxy_only**: `yes|no` (Default: `no`)
  - **dynamic**: `yes|no` (Default: `yes`)
  - **use_sockets**: `yes|no` (Default: `yes`)
  - **interface**: The network port (Default: `en0`)
  - **unregistered_only**: `yes|no` (Default: `no`)
  - **same_ports**: `yes|no` (Default: `yes`)

### NAT `serveradmin` Commands
- **Commands**:
  - **getLogPaths**: Finds the current location of the log used by the NAT service.
  - **updateNATRuleInIpfw**: Updates the firewall rules defined in the IPFilter service to reflect changes in the NAT settings.
  - **writeSettings**: Equivalent to the standard `serveradmin settings` command, but also returns a setting indicating whether the service needs to be restarted.

### Viewing the NAT Service Log
- **View the latest entries in the log**:
  ```bash
  $ tail log-file
  ```
- **Display Log Path**:
  ```bash
  $ sudo serveradmin command nat:command = getLogPaths
  ```
- **Output**:
  ```plaintext
  nat:natLog = 
  ```

This document provides a comprehensive guide to configuring and managing DHCP, DNS, Firewall, and NAT services using the `serveradmin` command in a Mac OS X environment.