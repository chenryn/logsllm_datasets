contracts remain vulnerable or active on the blockchain even past
their utility. As mentioned earlier, once deployed, smart contracts
are immutable, they cannot be modi(cid:128)ed and bugs cannot be (cid:128)xed.
(cid:140)us, it is not possible to update a smart contract in the later run.
EVM. (cid:140)e Ethereum Virtual Machine (EVM) is a purely stack-based,
register-less virtual machine that supports a Turing-complete in-
struction set of opcodes. (cid:140)ese opcodes allow smart contracts to
perform memory operations and interact with the blockchain, such
as retrieving speci(cid:128)c information (e.g., the current block number).
Ethereum makes use of gas to make sure that contracts terminate
and to prevent denial-of-service a(cid:138)acks. It assigns a gas cost to the
execution of an opcode. (cid:140)e execution of a smart contract results in
the modi(cid:128)cation of its state. (cid:140)e la(cid:138)er is stored on the blockchain
and consists of a balance and a storage. (cid:140)e balance represents the
amount of ether currently owned by the smart contract. (cid:140)e storage
is organized as a key-value store and allows the smart contract to
store values and keep state across executions. During execution,
the EVM holds a machine state µ = (❕, pc, m, i, s), where ❕ is the
gas available, pc is the program counter, m represents the memory
contents, i is the active number of words in memory and s is the
content of the stack. In summary, the EVM is a transaction-based
state machine that updates a smart contract based on transaction
input data and the smart contract’s bytecode.
2.2 Smart Contract Vulnerabilities
Although, a number of smart contract vulnerabilities exist [2], in
this work, we primarily focus on two types of vulnerabilities that
have been de(cid:128)ned by the NCC Group as the top two vulnerabilities
in their Decentralized Application Security Project [13]: reentrancy
and access control.
Reentrancy Vulnerabilities. Reentrancy occurs whenever a con-
tract calls another contract, which then calls back into the original
contract, thereby creating a reentrant call. (cid:140)is is not an issue
as long as all the state updates that depend on the call from the
original contract are performed before the call. In other words,
reentrancy only becomes problematic when a contract updates
its state a(cid:137)er calling another contract. A malicious contract can
3
take advantage of this by recursively calling a contract until all
the funds are drained. Figure 1 provides an example of a malicious
reentrancy. Contract B contains a fallback function (line 12-14),
a default function that is automatically executed when no other
function is called. In this example, the fallback function of contract
B calls the withdraw function of contract A. Assuming that contract
B already deposited some ether in contract A, contract A now calls
contract B to transfer back its deposited ether. However, the trans-
fer results in calling the fallback function of contract B once again,
which results in reentering contract A and once more transferring
the value of the deposited ether to contract B. (cid:140)is repeats until
the balance of contract A becomes zero or the execution runs out
of gas.
Reentrancy vulnerabilities were extensively studied by Rodler
et al. [31], and can be divided into four distinct categories: same-
function reentrancy, cross-function reentrancy, delegated reentrancy
and create-based reentrancy. Same-function reentrancy occurs
whenever an a(cid:138)acker reenters the original contract via the same
function (see Figure 1). Cross-function reentrancy builds on the
same-function reentrancy. However, here the a(cid:138)acker takes ad-
vantage of another function that shares a state with the original
function. Delegated reentrancy and create-based reentrancy are
similar to same-function reentrancy, but use di(cid:130)erent opcodes to
initiate the call. Speci(cid:128)cally, delegated reentrancy can occur using
either the DELEGATECALL or CALLCODE opcodes, while create-based
reentrancy only occurs when using the CREATE opcode. While the
DELEGATECALL and CALLCODE opcodes behave roughly similar to
the CALL opcode, the CREATE opcode causes a new contract to be
created and the contract constructor to be executed. (cid:140)is newly
created contract can then call and reenter the original contract.
Access Control Vulnerabilities. Access control vulnerabilities
result from incorrectly enforced user access control policies in
smart contracts. Such vulnerabilities allow a(cid:138)ackers to gain ac-
cess to privileged contract functions that would normally not be
available to them. (cid:140)e most famous examples of this type of vulner-
ability are the two Parity MultiSig-Wallet hacks [29, 44]. (cid:140)e issue
originates from the fact that the developers of the Parity wallet
decided to split some of the contract logic into a separate smart
contract named WalletLibrary. (cid:140)is had the advantage of reusing
parts of the code for multiple wallets allowing users to save on gas
costs during deployment. A simpli(cid:128)ed version of the code can be
seen in Figure 2. As can be seen in line 17-20, the initialisation
of the wallet is performed via the initWallet function located in
contract L, which is called by the constructor of contract W . In
addition, any unmatched function calls to contract W are caught by
the fallback function in line 6-8, which redirects the call to contract
L by means of the DELEGATECALL operation. Unfortunately, in the
(cid:128)rst version of the Parity MultiSig-Wallet, the developers forgot to
write a safety check for the initWallet function, ensuring that the
function can only be called once. As a result an a(cid:138)acker was able to
gain ownership of contract W by calling the initWallet function
via the fallback function. Once in control the a(cid:138)acker withdrew all
the funds by invoking the execute function (line 32-34).
A(cid:137)er the (cid:128)rst Parity hack, a new Parity MultiSig-Wallet Library
contract was deployed addressing the issue above. In the newly
deployed version, the initWallet function was not part of the
contract W { // Wallet contract
...
function W( address _owner ) { // Contructor
L. delegatecall (" initWallet ( address )" , _owner );
3 RELATED WORK
In this section, we discuss some of the works that are most closely
related to ours.
Security Analysis of Smart Contracts. As with any program,
smart contracts may contain bugs and can be vulnerable to ex-
ploitation. As discussed in [2], di(cid:130)erent types of vulnerabilities
exist, o(cid:137)en leading to (cid:128)nancial losses. (cid:140)e issue is made worse by
the fact that smart contracts are immutable. Once deployed, they
cannot be altered and vulnerabilities cannot be (cid:128)xed. In addition
to that, automated tools for launching a(cid:138)acks exist [21].
Several defense mechanisms have been proposed to detect se-
curity vulnerabilities in smart contracts. (cid:140)is includes tools such
as Erays [46], designed to provide smart contract auditors with
a reverse engineered pseudo code of a contract from its bytecode.
(cid:140)e interpretation of the pseudo code however remains a slow and
gruelling task. More automated tools have also been proposed
bene(cid:128)ting from regular expressions [43] and machine learning
techniques [34] to detect vulnerabilities.
A wealth of security research has focused on the creation of
static analysis tools to automatically detect vulnerabilities in smart
contracts. Formal veri(cid:128)cation has been used together with a formal
de(cid:128)nition of the EVM [1, 16], or by (cid:128)rst converting smart con-
tracts into the formal language F* [5, 11]. Other works focused
on analysing the higher level solidity code [10, 35], which limits
the scope to those contracts with available source code. Another
approach is to apply static analysis on the smart contract bytecode
[38]. A technique commonly used for this purpose is symbolic exe-
cution, designed to thoroughly explore the state space of a smart
contract utilising constraint solving. It has been used to detect con-
tracts with vulnerabilities [23, 28], to (cid:128)nd misbehaving contracts
[20, 26, 37], or detect integer bugs [19, 36]. Fuzzing techniques have
also been applied [15, 18]. In [42] the authors propose Harvey,
a greybox fuzzer that selects appropriate inputs and transaction
sequences to increase code coverage. Fuzzing techniques however
involve a trade-o(cid:130) between the number of discovered paths and
the e(cid:129)ciency in input generation.
While all the listed tools help identify vulnerabilities, they cannot
protect already deployed smart contracts from being exploited.
(cid:140)erefore, to deal with the issue of vulnerabilities in deployed smart
contracts, [12, 31] propose a modi(cid:128)cation to the Ethereum client,
that would allow detection and prevent exploitation of reentrancy
vulnerabilities at runtime. However, these approaches only deal
with reentrancy and require all the clients in the network to be
modi(cid:128)ed. (cid:140)is is an issue for the following reasons. On one hand,
every update of the vulnerability detection so(cid:137)ware requires an
update of the di(cid:130)erent Ethereum client implementations. (cid:140)is is
true for both bug (cid:128)xes and functionality upgrades, for example
the detection of new vulnerabilities. On the other hand, every
modi(cid:128)cation of the clients needs to be adopted by all the nodes
participating in the Ethereum blockchain. (cid:140)is requires time and
breaks compatibility between updated and non-updated clients. In
this work, we propose a generic solution that protects contracts and
users from existing and future vulnerabilities, without requiring
client modi(cid:128)cations and forks every time a new vulnerable smart
contract is found.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
}
function () payable {
L. delegatecall ( msg . data );
}
}
contract L { // Library contract
...
modifier onlyOwner {
if ( m_ownerIndex [ msg . sender ] > 0) _;
}
...
function initWallet ( address [] _owners , uint
_required , uint _daylimit ) {
initDaylimit ( _daylimit );
initMultiowned ( _owners , _required );
}
function initMultiowned ( address [] _owners , uint
_required ) {
...
for ( uint i = 0; i < _owners . length ; ++ i) {
...
m_ownerIndex [ _owners [i ]] = 2+ i;
}
...
}
function execute ( address _to , uint _value , bytes
_data ) onlyOwner {
_to . call . value ( _value )( _data ));
}
function kill ( address _to ) onlyOwner {
suicide ( _to );
}
}
Figure 2: Example of an access control vulnerability.
constructor anymore, but had to be called separately a(cid:137)er deploy-
ment. However, the developers did not call the initWallet func-
tion a(cid:137)er deployment. Hence, contract L remained uninitialised,
meaning that the library contract itself had no owners. As a result,
3 months a(cid:137)er deployment a user known as devops199 was exper-
imenting with the previous Parity hack vulnerability and called
the initWallet function directly inside contract L, marking its
address as the owner. (cid:140)e user then called the kill function (line
32-34), which removed the executable code of contract L from the
blockchain2 and sent the remaining funds to the new owner. (cid:140)e
contract itself contained no funds, however it was used by multiple
Parity wallets which had the address of contract L de(cid:128)ned as a
constant in their executable code. As a result any wallet trying to
use contract L as a library would now receive zero as return value,
e(cid:130)ectively rendering the wallet unusable and therefore freezing the
funds contained in the wallets. (cid:140)is led the user to publicly disclose
the steps that led to this tragedy, with the words: “I accidentally
killed it.” [9].
2(cid:140)e contract code is technically not removed from the blockchain, however, the
contract’s code can no longer be executed on the blockchain, because the contract has
been marked as killed.
4
Wang et al. [40] propose an approach to detect vulnerabilities
at runtime based on two invariants that follow the intuition that
most vulnerabilities are due to a mismatch between the transferred
amount and the amount re(cid:131)ected by the contract’s internal book-
keeping logic. However, this approach has three main drawbacks.
First, it requires the automated and correct identi(cid:128)cation of book-
keeping variables, which besides being a non-trivial task also does
not hold for every contract, since there can be contracts that do
not use internal bookkeeping logic but are nevertheless vulnerable.
Second, their approach does not model environmental information
such as timestamps or block numbers, which does not allow them to
detect vulnerabilities such as timestamp dependence or transaction
order dependency, whereas our approach models environmental
information and allows for the detection of these vulnerabilities.
Finally, Wang et al.’s approach can only detect violations of safety
properties and not violations of liveness properties such as the
Parity Wallet Hack 2. In this work, we demonstrate that our ap-
proach is capable of detecting both Parity wallet hacks and therefore
violations to safety as well as liveness properties.
Blockchain-Based Voting. Since blockchains provide the means
for transparency and decentralization, multiple blockchain-based
solutions have been proposed for performing electronic voting [3,
17, 27]. Interestingly, with the recent developments in quantum
computers, recent work also has started to focus on the development
of quantum-resistant blockchain-based voting schemes [33]. (cid:140)ese
solutions can all be categorised into two categories: cryptocurrency-
based and smart-contract-based.
Cryptocurrency-based solutions focus on using payments as
a proxy for votes in an election. When a voter wishes to cast a
vote, he or she makes a payment to the address of the candidate.
Lee et al. [22] proposed such a system in the Bitcoin network.
However, their system requires a trusted third party to perform the
ballot counting. Zao et al. [45] were the (cid:128)rst to propose a voting
scheme using the public Bitcoin network while preserving the
privacy of the votes. Another well-known cryptocurrency-based
solution is CarbonVote [8]. It was introduced in the a(cid:137)ermath of
the DAO hack to allow the Ethereum Foundation to determine if
the Ethereum community wanted a hard fork or not. (cid:140)e tallying
was performed by counting the amount of ether that each address
received. Needless to say, such a system gives a tremendous amount
of voting power to users with a large amount of funds.
Smart-contract-based voting relies on a decentralized application