---
author: Martin Tournoij
category: 观点
comments_data:
- date: '2019-05-20 17:12:29'
  message: 哈哈，人好少啊
  postip: 221.222.214.246
  username: 来自北京的 Firefox 66.0|Windows 7 用户
- date: '2019-06-10 18:18:55'
  message: 说的真好！有时候IT技术就是跟风而已，过了那阵风，就不了了之了，但是现实生活中是需要用技术来解决问题的，如果不能解决问题，那还不如不用
  postip: 43.231.229.89
  username: 来自亚太地区的 Chrome 73.0|Windows 10 用户
count:
  commentnum: 2
  favtimes: 1
  likes: 0
  sharetimes: 1
  viewnum: 10786
date: '2019-01-23 01:10:41'
editorchoice: false
excerpt: 这或许是一个不受欢迎的观点，但大多数主流公司最好不要再使用 Kubernetes (k8s)。
fromurl: https://arp242.net/weblog/dont-need-k8s.html
id: 10469
islctt: true
largepic: /data/attachment/album/201901/23/010935ah4tgomzmamntzhi.jpg
permalink: /article-10469-1.html
pic: /data/attachment/album/201901/23/010935ah4tgomzmamntzhi.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lujun9972
summary: 这或许是一个不受欢迎的观点，但大多数主流公司最好不要再使用 Kubernetes (k8s)。
tags:
- Kubernetes
- K8S
thumb: false
title: 你（多半）不需要 Kubernetes
titlepic: true
translator: beamrolling
updated: '2019-01-23 01:10:41'
---

![](/data/attachment/album/201901/23/010935ah4tgomzmamntzhi.jpg)

这或许是一个不受欢迎的观点，但大多数主流公司最好不要再使用 Kubernetes (k8s)。

你知道那个关于程序员技能写 "Hello, World" 的笑话吗？——从新手程序员的 `printf("hello, world\n")` 到高级软件架构工程师令人费解的 Java OOP 设计。使用 k8s 有点类似这种情况。

- 新手系统管理员：`./binary`
- 有经验的系统管理员：在 EC2 上运行 `./binary`
- DevOps 工程师：在 EC2 上通过 CI 管道自部署运行 `./binary`
- 高级云编排工程师：在 EC2 上通过 k8s 编排的 CI 管道自部署运行 `./binary`

¯\\_(ツ)_/¯

这并不意味着 Kubernetes 或任何类似的工具本质上是“坏的”，就像 Java 或 OOP 设计本身并不是坏的一样。然而，在很多情况下，它们被严重误用，就像在一个简单的 Hello World 程序中过度使用 Java 面向对象设计模式一样。对于大多数公司来说，系统运维并不十分复杂，此时引入 k8s 并不会带来显著的好处。

复杂性本质上会创造工作，我非常怀疑 k8s 对大多数用户来说能节省时间的说法。这就像花一天时间编写一个脚本来自动化一个每月只需 10 分钟完成的任务，这不是一个好的时间投资，尤其是考虑到未来可能需要更多的时间来扩展或调试这个脚本。

你的部署确实应该自动化——以避免像 [Knightmare](https://dougseven.com/2014/04/17/knightmare-a-devops-cautionary-tale/) 那样的情况——但 k8s 通常可以用一个简单的 shell 脚本来替代。

在我们公司，系统运维团队花费了大量时间设置 k8s，并且还需要大量时间来更新到新版本（例如从 1.6 升级到 1.8）。结果是，如果没有深入理解 k8s，有些东西就没人能真正明白，而深入理解 k8s 本身也非常困难（那些 YAML 文件，哎呀！）

在我能够自己调试和修复部署问题之前，现在变得更加困难了。虽然我理解基本概念，但在实际调试时，这些知识并不总是那么有用。我不经常使用 k8s，这也证明了我的观点。

---

认为 k8s 很难的观点并不是新的，这也是为什么现在有许多“简化 k8s”的解决方案。在 k8s 上再加一层来“使其更简单”的方法让我觉得不明智。复杂性并没有消失，只是被隐藏起来了。

我多次说过，在确定某样东西是否“简单”时，我最关心的不是编写时有多简单，而是在失败时调试起来有多容易。包装 k8s 不会让调试变得更简单，反而会使事情更加复杂。

---

Blaise Pascal 有一句名言：

> 几乎所有的痛苦都来自于我们不善于在房间里独处。

Kubernetes ——甚至更广泛的 Docker ——似乎是这样的例子。许多人似乎迷失在当下的兴奋中，认为“k8s 就是这样！”就像有些人迷失在 Java OOP 刚出来时的兴奋中一样，因此一切都必须从“旧”方法转为“新”方法，即使“旧”方法仍然有效。

有时候 IT 行业真的很愚蠢。

或者用一条推特来总结：

> * 2014 - 我们必须采用 #微服务 来解决单体应用的所有问题
> * 2016 - 我们必须采用 #docker 来解决微服务的所有问题
> * 2018 - 我们必须采用 #kubernetes 来解决 docker 的所有问题

你可以通过 [PI:EMAIL](mailto:PI:EMAIL) 给我发邮件，或者 [创建 GitHub issue](https://github.com/Carpetsmoker/arp242.net/issues/new) 来给我反馈或提出问题等。

---

via: 
作者：[Martin Tournoij](https://arp242.net/)  
选题：[lujun9972](https://github.com/lujun9972)  
译者：[beamrolling](https://github.com/beamrolling)  
校对：[wxy](https://github.com/wxy)

本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出。
---