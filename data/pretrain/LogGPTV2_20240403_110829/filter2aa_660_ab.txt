# Anti-RE Techniques in DRM Code

## Introduction
- **Legal Issues**
- **About DRMs**
- **Approaching the DRM**

## SEH Basics
- **Overview**
- **Exception Dispatching**

## Anti-RE Techniques
- **Overview**
- **Trampolines**
- **Debug Registers**
- **P-Code Machine**

## Decrypting the Content
- **The Algorithm**
- **Demo**

### Use of Debug Registers
- **DR0 and DR6**: Zeroed out.
- **DR1**: Contains a pointer to a shared stack area for data exchange between trampolines.
- **DR2**: Holds the trampoline address, used for return emulation.
- **DR3**: Holds the address of the starting trampoline (trampoline0).
- **DR7**: Used to frequently turn hardware breakpoints on and off.

### Impact of Trampolines on RE
- **Debugging Challenges**: Trampoline addresses jitter, making debugging difficult.
- **Control Flow**: Depends on debug registers, making BPM/BPX unusable.
- **Call Stack**: Absent, making back tracing difficult.
- **Execution Control**: Cannot execute until return, making it hard to determine the caller.
- **Direct Calls**: Reduced, leading to fewer cross-references.
- **Disassembler Confusion**: Lack of `ret` instructions confuses disassemblers.
- **Understanding**: Once understood, a perfect call stack can be reconstructed.

### Mitigating Trampoline Impact
- **Idea**: Fix trampoline addresses using a kernel mode driver.
- **Driver Implementation**:
  1. Turn RDTSC into a privileged instruction (TSD flag, CR4 register).
  2. Hook the Interrupt Descriptor Table (IDT).
  3. Return zero upon exception if:
     - The exception is from user mode.
     - The instruction was RDTSC.
  4. Otherwise, jump to the original handler.

### Reclaiming Debug Registers
- **Usage by DRM System**: Uses debug registers for storage via the `SetThreadContext` API.
- **Debugger Limitation**: Debugger cannot use hardware breakpoints (causes crash or no break).

#### Strategy
- **API Hooking**:
  - Hook into `Set/GetThreadContext` API.
  - Redirect modifications to internal storage.
  - Prevents the DRM system from modifying debug registers.
  - Allows the debugger to use debug registers.

#### Context Emulation
- **Problem**: Modification of EIP depends on debug registers.
- **Solution**:
  - Hook `KiUserExceptionDispatcher`.
  - For fake exceptions, execute a re-implemented `KiUserExceptionDispatcher`:
    1. Pass a fake context with DR values from internal storage.
    2. On return, copy modifications to the real context.
    3. Apply the context via `NtContinue`.

### Summary
- **Situation After Countermeasures**:
  - DRM system cannot modify debug registers (via API hook).
  - Exception handler gets expected values (via `KiUserExceptionDispatcher` patch).
  - Debugger can use hardware breakpoints.
- **Implementation**: Available as an IDA plugin (IDA Stealth[3]).

### P-Code Machine Overview
- **Machine Properties**:
  - Stack-based with a result register.
  - 256 fixed-size opcodes (1 byte).
  - Opcodes interleaved with data (ASN.1).
  - Allocates memory in the host machine.
  - Supports high-level opcodes (load opcodes, calls into other modules, music decoding) and low-level opcodes (emulates a virtual CPU).

### Loading of Opcodes
- **Opcode Module Files**:
  - Special module containing the P-Code machine.
  - Contains native code and opcodes.
  - Decompressed at runtime.
  - No PE, IAT, or sections.
  - Relocation table and some fixed imports (e.g., MSVCRT).

### Obfuscation in the P-Code Machine
- **Executing Opcodes**:
  - Per-module random pool.
  - Randomizes opcode-to-handler mapping.
  - Descrambles opcodes with a PRNG in the machine.
  - Interleaves garbage data with opcodes.
  - Data parsed via ASN.1.

### Impact of the P-Code Machine
- **Static RE Difficulty**:
  - Requires understanding the machine itself.
  - Different opcode meanings per module.
  - ASN.1 parsing.
- **Debugging Difficulty**:
  - Low signal-to-noise ratio (large "handler loop").
  - Further reduced by opcode descrambling.

### P-Code Machine in IDA
- **Strategies to Find Decryption Algorithm and Key Setup**:
  1. **Custom Disassembler** (Expensive):
     - Many handlers.
     - Long and complex high-level handlers.
     - Re-assembles randomization, descrambling, garbage instructions, and ASN.1.
  2. **Trace Until Key Written to Memory** (Brute Force):
     - Single-step via debugger script.
     - Slow but reaches the code writing the key.
  3. **Use Emulation** (Cool):
     - Use CPU emulation (PyEmu[4], x86 Emu for IDA[5]).
     - Fast and flexible.
  4. **Use BPMs / Attack Machine Memory** (Lazy):
     - Exploit machine memory management.
     - Set BP and BPM to detect key setup.
     - Back-trace from there.

### Keen Disappointment
- **Decryption and Key Setup in Native Code**: High-level handlers.

### Conclusion
- **Summary**:
  - Overall good protection.
  - BPMs led to success; P-Code machine almost useless.
  - Implementation weaknesses.
- **Room for Improvements**:
  1. Transform more native code to P-Code.
  2. Make P-Code machine more complex (nesting, polymorphic handlers, self-modifying machine).
  3. Improve weak debugger detection.
  4. Use debug registers, let control flow depend on BPM/BPX firing.
  5. ...

### Thanks for Your Attention!
- **Questions?**
- **Contact**: PI:EMAIL

### References
- **Electronic Frontier Foundation**: [http://www.eff.org/](http://www.eff.org/)
- **DMCA Encryption Research Paragraph**: [http://www.law.cornell.edu/uscode/html/uscode17/usc_sec_17_00001201----000-.html](http://www.law.cornell.edu/uscode/html/uscode17/usc_sec_17_00001201----000-.html)
- **IDA Stealth**: [http://www.newgre.net/idastealth](http://www.newgre.net/idastealth)
- **PyEmu**: [http://dvlabs.tippingpoint.com/team/cpierce](http://dvlabs.tippingpoint.com/team/cpierce)
- **x86 Emulator Plugin for IDAPro**: [http://www.idabook.com/x86emu/](http://www.idabook.com/x86emu/)

---

Jan Newger  
Anti-RE Techniques in DRM Code