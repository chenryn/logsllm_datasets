4确认消息
样），EventingBasicConsumer 都会触 发 critical_notify回调函数。
EventingBasicConsumer对象通过consumer参数将自身的引l用传人，同时通
过eargs参数将收到的消息拷贝传入。像之前那样，你将从中抽取出消息属性
和消息体。但是由于消息体实际上是JSON编码的，因此你需要使用JSON.NET库
2来将消息体解码为.NET数据类型。之后你将发送告警邮件3并通知相关负责人。
有意思的地方在于4你如何确认消息。由于BasicAck是信道对象的方法，因此你
需要访问该对象以确认消息。你通过访问传人的consumer对象上的Mode1属性
来做到这一点。你可能记得，.NET客户端将AMQP信道称为模型（model），同时
consumer的Model属性包含了指向接收消息的信道的引用。因此，对消息的确认
就等同于简单地调用consumer.Model.BasickAck（），同时提供包含在eargs内
的消息的DeliveryTag。这就是为EventingBasicConsumer编写回调函数的全
部内容。
在.NET中使用面向事件的消息消费模型真的如此简单。在本书的示例代码库
中可以检出该C#版本消费者的完整源代码。现在，.NET介绍得差不多了；让我
：们也给Java多一些关爱，来看看在这个世界上最流行的字节码解释器上如何使用
Rabbito
---
## Page 309
A.3边喝咖啡边RPC：用Java实现AMQPRPC
287
A.3边喝咖啡边RPC：用JaVa实现AMQPRPC
在本节中，你将在Java平台上使用RabbitMQ客户端来实现4.3节的RPC客户
端和服务器。客户端会发送一条以JSON格式编码的消息，内容包含了客户端版本
和当前时间戳。消息看起来像这样：
{"client_name":"RPC Client 1.0",
"time":1320846509)
当请求发送给服务器后，客户端就会等待服务器的响应。服务器会将JSON对
象从AMQP消息中取出，抽取消息的时间戳，然后它会用单词Pong！和客户端发
来的原始时间戳作为回应”
A.3.1获取Java库
首先，你要做的工作是下载最新版本RabbitMQ的Java客户端。你可以直接
访问客户端下载页，然后选择适用于你的平台的包：http://www.rabbitmq.com/java-
client.html.
对该示例来说，你将下载的包名为：Binary，compiledforJava1.5ornewer（zip）。
创建一个名为java-rpc的文件夹，然后使用wget来下载这个库。或者你也可以
单击连接，使用浏览器将文件下载到该文件夹下。
$ mkdir java-rpc
$cd java-rpc
v2.7.0/rabbitmq-java-client-bin-2.7.0.zip
现在下载好库之后，你将它解压，然后将*.jar复制到应用程序的1ib目录下。
$ unzip rabbitmq-java-client-bin-2.7.0.zip
$ mkdir lib
$ cp rabbitmq-java-client-bin-2.7.0/*.jar lib/
5在本节中，你将实现RPC客户端和服务器来说明如何将第4章的示例进行转换。话虽如此，值得一
提的是官方RabbitMQJava客户端实现了基本RPC功能，请参考http://www.rabbitmq.com/api-guide
html#rpc
---
## Page 310
288
附录A在Java和.NET上使用Rabbit
由于你也需要发送JSON格式的消息，因此下载DouglasCrockford的org·
jsonJava库：
$ wget http://search.maven.org/remotecontent
?filepath=org/json/json/20090211/json-20090211.jar\
-0 1ib/json-20090211.jar
输人1s1ib命令，你应该看到下列文件：
$ ls lib/
commons-cli-1.1.jar
commons-io-1.2.jar
json-20090211.jar
junit.jar
rabbitmq-client-tests.jar rabbitmq-client.jar
A.3.2设置classpath
你应该知道，每次运行Java程序，你都需要指明classpath，因而JVM才能知
道到哪里找程序需要的包和类。classpath很容易就会变得越来越长，因此你应该创
建一个shell变量来存放classpath信息，这样你就不用一次次地重复输入了。在类
UNIX系统上，你可以像这样来创建变量：
$ export CP=.:./lib/commons-io-1.2.jar:./lib/commons-cli-1.1.jar:\
./lib/rabbitmq-client.jar:./lib/json-20090211.jar
在Windows系统上，你需要将冒号替换为分号来分隔这些·jar文件，并用
set命令来替换export命令：
set CP=.;./lib/commons-io-1.2.jar;./lib/commons-cli-1.1.jar;
./lib/rabbitmq-client.jar;./lib/json-20090211.jar
每次运行Java版消费者或者生产者时，都将使用该class path变量。在设置完
基础信息之后，该来编写RPC服务器端和客户端了。在本节的剩余部分，你会直
接接触Java代码。如果你想要了解更多库的内容的话，则可以阅读在线API指引：
http://www.rabbitmq.com/api-guide.html，同时Javadocs位于http://www.rabbitmq.com/
releases/rabbitmq-java-client/v2.7.0/rabbitmq-java-client-javadoc-2.7.0/
A.3.3创建RPC服务器
和所有Java程序一样，首先你需要导入程序用到的类，因此在java-rpc文件
夹下创建名为Client.java的文件。我们会一步步地讲解该类的代码，并在最终向你
展示整个源文件。让我们从讲解import指令开始：
---
## Page 311
A.3边喝咖啡边RPC：用JaVa实现AMQPRPC
289
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.Channel;
import com.rabbitmq.client.QueueingConsumer;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.BasicProperties;
import org.json.JSONobject;
在这段代码片段中，你导人了RabbitMQ客户端的ConnectionFactory、
Connection 和 Channel类。这些类用于建立到服务器的连接，并获取信道。类
QueueingConsumer和QueueingConsumer.Delivery分别用于获得RabbitMQ
消费者和管理消息投递。AMQP.BasicProperties类用于创建消息的AMQP属性。
最后包含进来的来自org·json包的JSONobject类是用来在内存中加载JSON对
象的。
现在让我们看看类中的init（）方法，在该方法中创建了AMQP连接，获取了
一条信道，然后使用该信道声明交换器、队列，并最终将它们绑定到一起，以此构
建AMQP通信结构。以下是代码清单。
清单A.5服务器端init方法
public Server init()
throws Exception{
1创建连接
ConnectionFactory factory = new ConnectionFactory();
factory.setUsername("rpc_user");
factory.setPassword("rpcme");
connection = factory.newConnection();
②创建信道
channel =connection.createChannel();
channel.exchangeDeclare("rpc","direct");
channel.queueDeclare("ping",false,false,false,null);
3设置AMQP
通信结构
consumer = new QueueingConsumer(channel);
channel.basicConsume("ping"，false,"ping",consumer);
4开始消费
System.out.println(
"Waiting for RPC calls..."
）；
return this;
首先你要做的是创建ConnectionFactory类的实例i，用来建立连接。就
像你看到的那样，factory接受像setUsername和setPassword这样的方法调
---
## Page 312
290
附录A在Java和.NET上使用Rabbit
用。你可以通过这些方法来提供所需的连接信息。ConnectionFactory类也有像
setVirtualHost之类的方法。在这里你使用rpc_user作为用户名、rpcme作为
密码进行连接。一旦factory设置完毕，你就能调用newConnection方法来获取连
接对象了，获得连接之后可以得到channel对象2。就像你看到的那样，你没有声
明connection或者channel变量，因为你已经把它们添加到类的成员变量中了。
然后你使用信道来设置AMQP通信结构3。首先通过调用信道对象的
exchangeDeclare方法来声明交换器。传递给该方法的参数为交换器名称和类型。
然后你声明一个名为ping 的队列。剩余的几个参数分别代表durable、exclusive、
autodelete和extra。在这里也就是说，你创建了一个非持久化、非自动删除、非排
他性的队列。在队列创建之后，通过使用ping作为路由键将队列绑定到ping交
换器上。
init方法的最后一步是启动消费者。首先，通过传入channel对象获取了
到ping队列。在这里你使用字串ping作为消费者标记，并将消费者对象作为消
息回调函数传入，因此每当有新的消息投递过来的时候，就会传给该消费者对象。
basicConsume方法神秘的第二个参数指明了消息的消费处于非自动确认模式一
你需要为收到的每一条消息发送一个消息确认。
清单A.6服务RPC请求
public void serveRequests(){
while(true){
try{
①获得文
Delivery delivery=consumer.nextDelivery();
<本消息
BasicProperties props = delivery.getProperties();
false);
2消息
System.out.println(
"ReceivedAPIcall...replying..."
channel.basicPublish(
向客户
③端回应
props.getReplyTo(),
---
## Page 313
A.3边喝咖啡边RPC：用JaVa实现AMQPRPC
291
null,
getResponse(delivery).getBytes("UTF-8")
）；
}catch（Exception e)[
System.out.println(e.toString());
上
在该方法中你输入了一个无限循环，每次处理一条消息。通过调用消费者对象的
nextDelivery方法来获得服务器发送的最新一条消息。消息投递对象同时拥有消
息载荷和消息属性，在之后的方法中会用到。然后你通过调用basicAck，传人消
息的投递标记,向服务器确认了该消息。其中投递标记是通过delivery获取消息信封，
然后通过链式调用getDeliveryTag获得的。你也可以通过调用Envelope对象
的getExchange获得用于路由消息的交换器，还可以通过调用getRoutingKey
来获得消息路由键，等等。
最后，你通过调用basicPublish方法向客户端发送一条消息3作为回应。消
息将发往匿名交换器，并以原始客户端请求中的reply_to属性作为路由键。null
参数表示该消息不是强制的。响应消息是通过调用方法getResponse 创建的。该
getResponse方法接下来就会实现。总结一下整个方法的内容：首先获得消费者
中的下一条deliverY。使用该delivery来获得消息属性。通过使用消息信封获
得投递标记，然后对消息进行确认，之后你向客户端发送一条回应。现在让我们看
看getResponse方法的代码。
清单A.7创建RPC响应
private String getResponse(Delivery delivery){
String response = null;
1获取消息体并转
try{
换为String类型
String message = new String(delivery.getBody(),"UTF-8");
JSONObject jsonobject = new JSONobject(message);
将消息转换为
2JSON对象
response ="Pong!"+jsonobject.getString("time");
catch (Exception e){
System.out.println(e.toString());
3获得时间
response = "";
return response;
---
## Page 314
292
附录A在Java和.NET上使用Rabbit
该方法接收Delivery对象作为参数，因此它可以从中获得消息体1，并将
其作为String类型存放在 message 变量中。下一步要做的是将该字串解析为一个
JSON对象，这样你就能获取由客户端发来的时间戳了②，然后将该时间戳和字串
Pong！一同发送回去3。通过调用JSONobject实例的getString方法来获取其
参数，它接收对象属性关键字作为参数并返回对应的值。
最后，让我们看看Server类的main方法，在该方法中你实例化了服务器来
等待客户端的请求。以下是代码清单。
清单A.8服务器端main方法
public static void main(String[] args）{
Server server = null;
try{
server = new Server();
—服务器初始化
server.init().serveRequests();
}catch(Exception e）{
e.printStackTrace();
}finally{
if(server != null){
server.closeConnection();
<—资源清理
上
代码很简单。除了try/catch/finally逻辑之外，你只是创建了Server类的实例，
通过调用init方法进行初始化，并在最后链式调用方法serveRequests来启动消
息处理。类的完整代码如下所示，包含了在finally块中调用closeConnection
方法。
清单A.9RPC服务器完整代码
importcom.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.Channel;
import com.rabbitmq.client.QueueingConsumer;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.BasicProperties;
import org.json.JSONobject;
public class Server
private Connection connection;
private Channel channel;
private QueueingConsumer consumer;
---
## Page 315