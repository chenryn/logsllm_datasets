work on con(cid:27)guration analysis: i) using constraint-based graphs,
instead of source-destination paths; and ii) using combinational
search, instead of eagerly computing message sets. This section
provides intuition behind these choices.
2.1 Paths vs. graphs
Consider the network in Figure 2(a). It has three internal routers,
R1 to R3, that run OSPF. It connects to three external neighbors, N1
to N3, via BGP. The internal routers are connected to subnets, S1 to
S3, whose address pre(cid:27)xes they redistribute into OSPF and BGP. R1
and R2 connect via iBGP, to share the BGP routes they hear from
N[1..3]. They also redistribute BGP destinations into OSPF, so that
R3 can reach those destinations, and OSPF into BGP so that internal
subnets are announced externally. The BGP preferences of R1 and
R2 are as shown: R1 (R2) prefers routes through N2, N1, and N3
(N3, N2, N1) in that order. Recall that in BGP, when multiple routes
are available to the same destination, a router will select and share
the most preferred one according to the local con(cid:27)guration.
Suppose we want to ensure that the subnet S3 uses N1 to reach
any external destination even when all three of N1, N2 and N3
announce a path to that destination. Does this property hold in
our network? The correct answer is positive, but interestingly, the
answer a con(cid:27)guration analysis tool delivers depends on the so-
phistication with which it reasons about the interactions of control
plane messages on di(cid:29)erent paths.
• If the analysis only considers the path N1-R1-R3, it will conclude
that the property holds. R1 will select the route through N1 since
no other route is available and pass it to R3. Thus, R3 (and S3)
will send tra(cid:28)c through N1. (Data (cid:30)ows in the opposite direction
to routing information.)
• If the analysis additionally considers the routing path N2-R2-
R1-R3 (which interferes with the (cid:27)rst path at router R1), it will
conclude that the property does not hold. R1 will select the route
through N2 and thus the route through N1 will not reach R3.
• If the analysis also considers N3-R2-R1-R3 (which interferes
with the second path at R2 and the (cid:27)rst path at R1), it will con-
clude once again that the property holds. R2 will select the route
through N3, and thus R1 will select and propagate to R3 the route
through N1.
In the general case, all possible paths can interfere with one
another, and for correct analysis, all mutual interactions should
E
V ),
be considered. But the number of paths can be enormous: O (V
where V and E are the number of nodes and edges (and thus E
V is
the average node degree). Existing path-based tools circumvent this
problem by restricting the networks they can analyze (e.g., Bagpipe)
or conducting a potentially unsound analysis (e.g., ERA).
SIGCOMM ’17, August 21-25, 2017, Los Angeles, CA, USA
Ryan Becke(cid:29), Aarti Gupta, Ratul Mahajan, and David Walker
Our model avoids this problem by constructing a compact rep-
resentation for all possible paths—a graph. The complexity of this
structure is O (V + E). Our graph accurately (and symbolically) mod-
els all interactions between di(cid:29)erent paths and supports a richer
set of properties (described later).
2.2 Message sets vs. combinational search
One possible approach to control plane veri(cid:27)cation is to simulate
all possible outcomes of the distributed control plane computation
by computing (symbolic) sets of messages for all destinations. Once
all outcomes of the control plane computation have been computed,
one can analyze the complete set of possible (cid:27)nal states and judge
if the property of interest holds. Unfortunately, this approach often
leads to a lot of unnecessary work.
In many cases, computing a full solution to the control plane
computation is often unnecessary as the validity of the property
may not depend upon many parts of that solution. In contrast, our
approach encodes both the network and the property in question
as a logical formula. As an SMT solver searches for a satisfying
assignment to the formula, it will take the property into account.
If the property does not require knowledge of some aspects of the
control plane, the search process may ignore that part of the model.
For example, if router R3 had an ACL that drops tra(cid:28)c sent to
R1, then the solver might quickly learn that S3 will not be able to
reach N1 without reasoning about the full control plane behavior.
In §8, we show that many properties can be checked much more
e(cid:28)ciently for this reason.
In addition, approaches that compute message sets represent
and store all possible outcomes of the control plane’s full (cid:27)xed
point computation and they (cid:27)nd all violations of the property. In
contrast, our approach searches for just one outcome of the control
plane computation that violates the given property. The latter can
be done extremely e(cid:28)ciently by modern SMT solvers in many
domains. While our approach will not (cid:27)nd all violations at once,
(cid:27)nding just one violation can help pinpoint a bug. When that bug
has been (cid:27)xed, one can apply the procedure again.
3 THE BASIC NETWORK MODEL
Our goal is to enable network operators to verify the behavior of
their network under any possible environment. To provide this
capability, we model the network with respect to a packet as a func-
tion of its environment. Because the packet and the environment are
symbolic, our model can verify the control and data plane behavior
of the network relevant to any packet under any environment.
More speci(cid:27)cally, we generate F, a system of SMT constraints
de(cid:27)ned as the conjunction of N , the behavior of the network, given
the current con(cid:27)gurations of all routers, and ¬P, a negated property
of interest to the operator. Satisfying solutions for N correspond to
stable forwarding paths in the network. Thus, any stable solution
(even among multiple ones) that violates the property will be re-
ported as a satisfying solution for F. However, if F is unsatis(cid:27)able,
then either all stable paths satisfy the property, or the network has
no stable paths for the destination(s) of interest.
This section describes the techniques we use to generate a basic
network model N using Figure 2 as an example. We explain, in turn,
how to model (1) a data packet, (2) the interactions between routing
Variable
Data plane
dstIp
srcIp
dstPort
srcPort
protocol
Control plane
pre(cid:128)xr
lengthr
adr
lpr
metricr
medr
ridr
bgpInternalr
validr
Decision
controlfwdx,y
datafwdx,y
Topology
failedx,y
Description
Packet destination IP addr
Packet source IP addr
Packet destination port
Packet source port
Packet Protocol
Pre(cid:27)x for record r
Pre(cid:27)x length for r
Administrative distance for r
BGP local preference for r
Protocol metric for r
BGP MED attribute for r
Neighbor router ID for r
Was r learned via iBGP
Is the record r valid
Rep.
[0, 232)
[0, 232)
[0, 216)
[0, 216)
[0, 28)
[0, 232)
[0, 25)
[0, 28)
[0, 232)
[0, 216)
[0, 232)
[0, 232)
1 bit
1 bit
x fwds to y (ignores ACLs)
x fwds to y (includes ACLs)
1 bit
1 bit
Is the link from x to y failed
[0, 1]
Figure 3: Selected symbolic variables from the model
protocols, (3) the control plane information, (4) the import (cid:27)lters in
router con(cid:27)gurations, (5) the route selection process, (6) the export
(cid:27)lters in con(cid:27)gurations, and (7) the access control lists that apply to
data packets. We end this section with (8) an example encoding of
a property P. Throughout this section, we refer to Figure 3, which
lists the main symbolic variables used in our generated formulae. §4
discusses extensions to the basic network model, and §5 discusses
many additional properties.
(1) Modeling data plane packets. The (cid:27)rst section of Figure 3
lists several of the variables used to represent a symbolic data packet.
The packet’s destination IP is modeled by an integer variable dstIP,
which ranges from 0 to 232−1. We model other (cid:27)elds similarly. If
operators wish to ask about a speci(cid:27)c destination, such as 10.0.0.0,
they may issue a query that constrains our model to consider only
packets with that destination (e.g., using the formula dstIP = 10.0.0.0
in their property P). If they instead wish to ask about packets with
any destination IP, they may leave the dstIP (cid:27)eld unconstrained.
Traditional (non-SDN) networks do not typically modify packet
headers1—they only forward or block them. Consequently, we use
only one, global copy of each of these variables in our formula.
In order to determine what happens to such packets in the net-
work, we must, of course, model the control plane protocols and
how they decide to forward packets.
(2) Modeling protocol interactions. Routers commonly run mul-
tiple protocol instances, each of which operates independently and
selects a best route for a destination pre(cid:27)x based on the information
from its remote peers and redistribution from other, local routing
instances. Figure 2(b) presents a protocol-level view of the internal
1Except for TTL and CRC (cid:27)elds, which we do not currently model.
A General Approach to Network Configuration Verification
SIGCOMM ’17, August 21-25, 2017, Los Angeles, CA, USA
routers in our example. Routers R1 and R2 run BGP to exchange
routes with the outside world and OSPF to communicate internally.
CON denotes connected routes, i.e., those known through a directly
connected interface. We model them as if they are another protocol
to avoid special cases.
Figure 2(c) zooms into R1’s BGP instance. Each node is a protocol
instance and each edge represents information (cid:30)ow between two
instances. For example, the nodes R1OSPF and R1BGP represent
protocols OSPF and BGP on router R1. Since OSPF redistributes
into BGP, and vice versa, there are edges back and forth between
R1OSPF and R1BGP. The outgoing edge from R1CON indicates that
the connected routes are redistributed into BGP. Since R1 uses
BGP with the external neighbor N1 and R2, there are edges in both
directions between R1BGP and N1 and R2BGP.
(3) Encoding control plane information. To model the control
plane, we need to encode the information in the messages ex-
changed by protocol instances. We do so using records of symbolic
values, which roughly correspond to protocol messages. As with
the data packets, constraints may map these variables to speci(cid:27)c
concrete values (e.g., the pre(cid:27)x 10.1.0.0/24) or may leave them fully
or partially unconstrained.
Unlike the single symbolic data packet, there are many control
plane records in our encoding. The edge labels in Figure 2(c) indicate
the presence of a speci(cid:27)c record. Consider the edge between R2BGP
and R1BGP. The label e4 represents the message exported by R2’s
BGP process on the link to R1; and the label in4 represents the
message after traversing R1’s BGP import (cid:27)lter on the link from R2.
Naturally, the messages de(cid:27)ned by in4 and e4 are closely related.
We encode the relationship using SMT constraints generated from
import (cid:27)lters in R1’s con(cid:27)guration.
Routing messages from the environment are represented as
records from an external neighbor. For example, the record e2 is the
export from neighbor N1. When left unconstrained, it represents
the fact that N1 could send any message.
The second section of Figure 3 lists the main (cid:27)elds of symbolic
control plane records. Each record is for a destination pre(cid:27)x of a
particular length. Announcements for that pre(cid:27)x are annotated with
the administrative distance (ad). When multiple protocol instances
o(cid:29)er a route to the same pre(cid:27)x, this measure (which is con(cid:27)gured
for each protocol) determines which one is used for forwarding.
These records also contain the local preference (lp) for BGP, and
the metric. The metric is a protocol-speci(cid:27)c measure of the quality
of the route. For instance, it is path length for BGP and path cost for
OSPF. When routes are redistributed from one protocol to another,