# Title: Cache Me If You Can: Effects of DNS Time-to-Live

## Authors
- Giovane C. M. Moura (1)
  - SIDN Labs and TU Delft
- John S. Heidemann (2)
- Ricardo de Oliveira Schmidt (3)
- Wes Hardaker (2)
  - USC/Information Sciences Institute
- University of Passo Fundo (3)

## Abstract
The Domain Name System (DNS) relies heavily on caching to ensure good performance, and every DNS zone owner must set Time-to-Live (TTL) values to control DNS caching. Despite the importance of TTLs, there is limited research-backed guidance on how to set these values. Operators must balance the conflicting demands of caching efficiency and configuration agility. Understanding the impact of TTL choices on operational networks is challenging due to the distributed nature of DNS, where resolvers receive TTLs in different ways (answers and hints), and TTLs are specified in multiple places (zones and their parent’s glue). Additionally, DNS resolution must be security-aware.

This paper provides a detailed evaluation of how these multiple, interacting factors affect the effective cache lifetimes of DNS records and offers recommendations for configuring DNS TTLs based on our findings. We provide recommendations for different scenarios and specify where these TTLs should be configured. Our results show that longer TTLs can significantly reduce latency, from 183 ms to 28.7 ms for one country-code TLD.

## CCS Concepts
- Networks → Network measurement; Naming and addressing

## Keywords
DNS, recursive DNS servers, caching

## ACM Reference Format
Giovane C. M. Moura, John S. Heidemann, Ricardo de O. Schmidt, Wes Hardaker. 2019. Cache Me If You Can: Effects of DNS Time-to-Live. In Internet Measurement Conference (IMC '19), October 21–23, 2019, Amsterdam, Netherlands. ACM, New York, NY, USA, 15 pages. https://doi.org/10.1145/3355369.3355568

## 1 Introduction
The Domain Name System (DNS) [33] is a fundamental component of the Internet, essential for web pages, email, and other services. It provides a low-latency, distributed database that maps domain names to IP addresses, performs service location lookups, and ensures integrity using in-protocol DNS key storage and verification algorithms.

Given its central role, DNS performance and reliability are critical. For instance, DNS performance is a key factor in web browsing optimization [50], and DNS service providers compete to offer consistent, low-latency services globally. Even in less latency-sensitive services, such as the authoritative service for the Root DNS, reducing latency remains a goal [47]. DNS failures often make headlines, as seen in the 2016 DDoS attack on a major DNS provider, which disrupted multiple popular services [41].

DNS also plays a crucial role in associating clients with nearby servers for large content providers and Content-Delivery Networks (CDNs) [10, 12]. This helps improve performance and reliability by reducing latency and implementing load balancing, which is vital for site maintenance and DDoS mitigation [36].

The DNS infrastructure is complex, involving client software (stub resolvers provided by OS libraries), recursive resolvers, and authoritative servers. Large-scale recursive and authoritative resolvers are often engineered with pools of servers, load balancers, and IP anycast [1, 48].

Caching is essential for DNS performance and reliability. A 15 ms response to a new DNS query is fast, but a 1 ms cache hit for a repeat query is even faster. Caching also protects users from short outages and mitigates DDoS attacks [36]. TTLs control cache durations [33, 34], affecting latency, resilience, and CDN server selection. While caching and anycast have been extensively studied, there has been little evaluation of TTLs. Some early work modeled caches as a function of their TTLs [26], and recent work examined their interaction with DNS [36], but no research provides specific recommendations for TTL values.

Determining optimal TTL values is challenging. Short TTLs allow for quick service changes, useful for load balancing in CDNs or redirecting traffic through DDoS scrubbers. Long TTLs, however, reduce latency, server load, and provide resilience against longer DDoS attacks. The complexity of modern DNS, with its impact on web browsing, is influenced by many TTLs, as resolving a DNS name may require dozens of lookups across several organizations, each potentially using different TTLs. As a distributed database, TTLs are given in both the parent and child zones at delegation boundaries, and these may differ. Responses come in different forms, with some values labeled as authoritative and others as hints ("additional"). DNS records sometimes depend on the freshness of other records, which can be exploited in sophisticated DNS hijacking [28].

While there has been some study of what clients see (§7), there has been limited academic research on operator options and their effects. Operational requirements vary, and choices are influenced by components run by multiple parties, leading to a lack of consensus on reasonable TTL values. This results in a wide range of TTL values in practice (§5), offering limited guidance for new deployments.

This paper aims to fill this gap. First, we explore how various factors influence the TTL used by recursive resolvers (§2). Second, we provide recommendations for good TTL values for zone operators, considering user experience and resilience. Our work complements prior studies on recursive resolver caching (see §7). We use controlled experiments and real-world data analysis to make informed recommendations.

Our first contribution shows the effective TTL resulting from TTLs stored in different places (§3) and across multiple, cooperating records (§4). We then examine real-world DNS traffic and deployments to compare current use with our evaluation, and how operators choose TTL values and how these choices affect latency and flexibility (§5). Finally, we demonstrate that longer TTLs can significantly reduce latency and traffic (§6.2). We outline the trade-offs and provide recommendations (§6): those using CDNs or load balancers may need short TTLs (5 or 15 minutes), but most others should prefer longer TTLs (a few hours).

Discussion of our early results with operators led to an increase in their TTLs, and we show that the median latency dropped from 183 ms to 28.7 ms with longer TTLs, enabling better caching. While these results are from one ccTLD (.uy, §5.3), our crawls (§5.1) and discussions with operators (§5.2) suggest that our findings are applicable elsewhere.

We will make the majority of datasets available at no charge. RIPE Atlas datasets are public, and only data from .nl cannot be released. Our measurements focus on public network infrastructure and pose no ethical or privacy issues.

## 2 Our Question: Which TTLs Matter?
DNS caching appears straightforward, with each record cached up to a given time-to-live. However, the reality is more complex, as DNS records come from multiple sources and resolution requires traversing multiple names and types. We systematically examine each source of information to determine which, in practice, takes priority.

First, records are duplicated in multiple places, sometimes with different TTLs. Specifically, DNS records that cross delegation boundaries are in both the parent and child zones and can have different TTLs. In §3, we examine whether recursive resolvers in the wild prefer TTL values provided by the parent or child.

Second, resolving a fully qualified domain name (FQDN) requires identifying authoritative servers (NS records) and their IP addresses (A or AAAA records) for each part of the FQDN. FQDN traversal raises two factors: communicating with an authoritative server requires knowing its IP address(es), but the NS and A/AAAA records for it may have different TTLs. Additionally, records may be in-bailiwick (under the domain being served) or out-of-bailiwick. These factors interact, and some recursive resolvers discard in-bailiwick A/AAAA records when the NS record expires, as shown in §4.

The answer to these questions should be in the DNS specifications. Early specifications were somewhat informal, and implementations varied. The original DNS specifications left precedence unspecified [33, 34], while RFC2181 later gave the child zone's Authoritative Answers priority over the parent's glue [15], but did not require fetching both. DNSSEC [6, 7] confirms that authoritative TTL values must be verified by the signature record, which must come from the child zone. Thus, our question is: Do resolvers in the wild follow these specifications for TTL priorities?

Answering these questions is important to understand who ultimately controls a zone's caching.

## 3 Are Resolvers Parent- or Child-Centric?
We first examine how DNS handles records served from multiple places to determine what controls caching. The DNS is a distributed database with portions of the hierarchy (zones) managed by different organizations through delegation. Glue records duplicate content from a child zone in the parent, either for convenience or necessity if the authoritative server for the child zone is named only in that child's zone (in-bailiwick). A recursive resolver must choose which TTL it prefers (parent or child) based on several factors described below in §3.1.

We examine this question with a case study and real-world traffic observed from the edge and from authoritative servers for a country code TLD. We reach two key results regarding cross-zone TTLs: first, most recursive resolvers are child-centric, trusting the TTL in the child zone's authoritative server over the glue in the parent zone. Depending on the measurement technique, 52% (§3.4, .nl from the authoritative) to 90% (§3.2, .uy from RIPE Atlas) of queries are child-centric.

Our second finding is that enough queries are parent-centric, so parent TTLs still matter. Although only 10 to 48% of queries are parent-centric, setting TTLs the same in both parent and child is necessary to accommodate this sizable minority. In cases where the operator lacks control of the parent zone's TTL, resolvers will see a mix of TTLs for that zone.

### 3.1 Parent and Child TTLs in Chile’s .cl
To explore whether the parent or child's TTL in the hierarchy is "believed more frequently," we first look at Chile's country-code TLD, .cl. Resolving this name involves three authoritative servers, as shown in Table 1.

| Q / Type | Server | Response | TTL (Sec.) | Auth/Add. |
|----------|--------|----------|------------|-----------|
| .cl / NS | k.root-servers.net | a.nic.cl/NS | 172800 | Add. |
| .cl/NS | a.nic.cl | a.nic.cl/A | 172800 | Add. |
| .cl/NS | a.nic.cl | a.nic.cl/AAAA | 172800 | Add. |
| .cl/NS | a.nic.cl | 190.124.27.10/A | 3600* | Ans. |
| .cl/NS | a.nic.cl | a.nic.cl/A | 43200 | Add. |
| .cl/NS | a.nic.cl | a.nic.cl/AAAA | 43200 | Add. |
| .cl/NS | a.nic.cl | 190.124.27.10/A | 43200* | Ans. |

* Indicates an authoritative answer, on 2019-02-12.

| Query | TTL Parent | TTL Child | Date | Probes | Valid | Disc | VPs | Queries | Responses | Valid | Disc. |
|-------|------------|-----------|------|--------|-------|------|-----|---------|-----------|-------|-------|
| .uy-NS | 172800 s | 300 s | 20190214 | 8963 | 8863 | 100 | 15722 | 189506 | 188307 | 188225 | 82 |
| google.co-NS | 900 s | 345600 s | 20190304 | 9127 | 9034 | 93 | 16078 | 97213 | 96602 | 96589 | 3 |
| A a.nic.uy | 172800 s | 600 s | 3h | 172800 s | 600 s | 3h | 172800 s | 600 s | 3h | 172800 s | 600 s | 3h |