Bit-flip 
Pulse 
Delay 
Indetermination
FFs 
Memory
ALU 
FFs 
ALU 
FFs 
ALU 
Figure 14. Results from indetermination emulation 
into combinational logic 
Figure 15. Results from delay emulation into 
combinational logic 
The  correctness  of  these  results  was  studied  by 
comparing them with the ones obtained with VFIT (cf. 
Table 3). Since VFIT requires the model to specify the 
delay  of  signals  by  means  of  generic  clauses  and  the 
selected  model  does  not  include  any  of  them,  the 
comparison  between  delay  experiments  could  not  be 
performed.  As  related  to  faults  into  combinational 
logic, Table 3 shows the results for the ALU unit that is 
considered  the  most  representative  one  since  it  is  the 
only unit which is purely combinational. 
We  can  see  that  the  results  obtained  by  both  tools 
are  quite  similar  and  present  the  same  trend  when 
the  fault  duration.  The  most  notable 
increasing 
differences 
of 
injection 
related 
are 
the 
to 
Hence, according to these results, FADES not only 
shows the feasibility of our approach but it also opens 
an interesting and promising research domain in which 
accurate dependability analysis of VLSI systems can be 
performed at lower temporal costs than using common 
model-based fault injection techniques. 
7. Discussion 
Results have shown that FPGAs can be successfully 
used to emulate the occurrence of transient faults into 
VLSI  systems  quite  much  faster  than  using  classical 
model-based  fault  injection  techniques.  This  section 
deals with some aspects that require further analysis. 
7.1. Speed-up 
Although  the  execution  time  of  the  experiments 
carried out with our experimental tool was sped-up by 
an  average  factor  of  15.66  (cf.  Table 2), it may seem 
that this acceleration is not enough to motivate the use 
of  FPGAs  to  build  a  prototype  of  the  system  under 
analysis. This reasoning is not far from the truth when 
talking about small systems. 
In the case of fault emulation by means of run-time 
reconfiguration techniques, most of the execution time 
is  devoted  to  the  fault  injection  process  and  the 
execution of the workload only takes a small fraction of 
this  time.  On  the  other  hand,  classical  model-based 
fault injection tools like VFIT spend most of the time 
executing  the  model  on  powerful  CPUs,  while  the 
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:11:40 UTC from IEEE Xplore.  Restrictions apply. 
temporal  overhead  induced  by  the  fault  injection 
process  is  very  short  in  comparison.  Hence,  when 
executing  simple  models  and/or  short  workloads, 
modern  CPUs  overpower  FPGAs:  the  models  are  so 
quickly  simulated  that  the  time  devoted  to  FPGA 
reconfiguration  becomes  the  bottleneck  that  limits  the 
speed-up obtained by fault emulation. 
The  8051  microcontroller  we  have  used  as  system 
under study only used 637 out 24576 FFs and 5310 out 
of 24576 LUTs that were available in the Virtex 1000 
FPGA. That explains why the speed-up obtained when 
executing the model was in the range of only one order 
of  magnitude.  We  expect  that  considering  more 
complex models and larger workloads would cause our 
approach  to  be  more  effective  in  terms  of  execution 
time. This topic requires further research. 
7.2.  Faults  in  sequential  logic  versus  fault  in 
combinational logic 
Modern  systems  tend  to  be  fully  synchronous 
(pipeline  stages,  synchronous  memories,  registered 
outputs...) and, therefore, a fault in combinational logic 
will  not  likely  cause  any  failure.  In  order  to  cause  a 
failure in the system, this fault must be captured by any 
sequential  element  driven  by  the  faulty  combinational 
path.  Then, if a fault in combinational logic manifests 
as  a  bit-flip  in  sequential  logic  why  not  exclusively 
inject bit-flips and forget about the rest of faults? 
This reasoning might make sense when considering 
the injection of multiple bit-flips. The occurrence of a 
fault  in  a  combinational  path,  which  can  drive  many 
FFs, may lead to the occurrence on a bit-flip in many of 
these FFs (cf. Table 4). 
Table 4. Effects of the occurrence of pulses in 
combinational logic 
Virtex-related* 
injection point  Affected register Fault free 
hex value 
Faulty 
hex value 
CLB(15, 40) 
slice 1, LUT F 
CLB(22, 39) 
slice 1 LUT G 
s_all_scon_out 
s_all_tl0 
Mtridata_sram_data 
s_rom_data 
s_all_scon_out 
s_rom_data 
Mtridata_sram_data 
sram_we 
Mtrien_sram_data
sram_addr 
2A 
30 
00 
97 
2A 
97 
00 
01 
01 
30 
3A 
01 
04 
F9 
6A 
FF 
03 
00 
00 
07 
the  occurrence  of 
* A Virtex CLB contains two slices comprising two logic elements.
   Each logic element corresponds to a CB as shown in Figure 2. 
Therefore, 
fault 
in 
combinational logic could be emulated by means of the 
injection of a multiple bit-flip in the related sequential 
logic. Although it could seem then that the injection of 
pulses,  delays  and  indeterminations  in  combinational 
logic is of little interest, it is of great value to determine 
a 
it  will  be  necessary 
the  distribution  of  these  bit-flips  depending  on  the 
combinational  path  affected  by  the  fault.  Since  the 
combinational  path  will  not equally affect each FFs it 
drives, 
to  perform  several 
experiments  to determine how each fault model  could 
be emulated by means of a multiple bit-flip. Hence, the 
injection  of faults into combinational logic can not be 
left apart in any case, even when trying to emulate their 
effect by means of multiple bit-flips. 
7.3.  Benefits  of  run-time  reconfiguration 
technique applied to fault emulation 
time 
little 
The main benefit of this technique is related to the 
use of an FPGA to implement the model of the system. 
As  it  has  been  discussed  before,  it  obtains  a  great 
speed-up when considering the execution time required 
by other model-based fault injection techniques. There 
also  exists  another  technique,  named  compile-time 
reconfiguration [5], which employs FPGAs as a means 
to  accelerate  the  experiments  execution.  Although  it 
requires  very 
to  perform  on-the-fly 
reconfiguration, it may take a great amount of time to 
implement instrumented versions of the model to make 
it  “injectable”.  Run-time  reconfiguration,  although 
taking more time to perform the FPGA reconfiguration, 
outperforms this other technique by requiring only one 
implementation.  Hence, it is  a very suitable technique 
for fault emulation in large systems. 
just  one  requirement: 
Most  of  the  model-based  fault  injection techniques 
usually have many requirements to be able to carry out 
the  experiments  (the  model  must  be  written  in  some 
specific HDL language such as VHDL, or Verilog, or it 
must  be  described  at  structural  or  gate  level).  This 
technique  has 
it  uses  a 
synthesisable model of the system, which is not always 
easy to build. Currently, our particular implementation 
(JBits  package  and  prototyping  board)  can  only 
monitor  the  state  of  the  sequential  elements  of  the 
system,  leading  to  a  timing  resolution  of  one  clock 
cycle,  which  could  not  be  precise  enough  for  some 
systems.  This  is  an  open  issue  which  requires  further 
research. 
Finally,  the  use  of  IP  cores  to  build  System-On-a-
Chip (SoC) systems is of great interest. In this case, the 
user is provided with an already implemented core that 
can be integrated into other systems. Since no model is 
usually  available  it  is  not  possible  to  perform  the 
validation of the system via model-based fault injection 
techniques. As the proposed technique works at a lower 
(implementation)  level,  it  can  be  used  to  directly 
emulate  the  occurrence  of  faults  in  IP  cores  with  a 
restricted controllability/observability. 
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:11:40 UTC from IEEE Xplore.  Restrictions apply. 
8. Conclusions and future work 
investigates 
This  paper 
to  what  extent 
the 
occurrence  of  transient  faults  in  HDL  models  can  be 
emulated using FPGAs. It covers a set of representative 
transient  fault  models  existing  today  in the  domain of 
VLSI  systems  such  as  bit-flip,  pulse,  delay  and 
indetermination  that  were  not  considered  for  fault 
emulation to date. 
Several experiments have been conducted by means 
of  a  prototype  tool  named  FADES  and  their  results 
have been compared to those obtained from a VHDL-
based fault injection tool. This comparison showed that 
FADES  not  only  emulates  these  faults  properly  but  it 
also outperforms the other tool by, at least, an order of 
magnitude.  We  expect  that  the  emulation  of  complex 
models will provide even better speed-up factors. 
In the near future, we envisage the extension of this 
framework  to  cover  a  set  of  typical  permanent  faults 
that  have  not  been  used  for  fault  emulation  of  VLSI 
systems  yet,  such  as  short,  open-line,  bridging  and 
stuck-open  faults.  Other aspects that  we will focus on 
are those related to the occurrence of multiple bit-flips, 
or those affecting systems manufactured using FPGAs. 
9. Acknowledgments 
This  work  has  been  supported  by  the  Spanish 
MCYT project TEC 2005-05119/MIC. 
10. References 
[1]  C.  Constantinescu,  “Impact  of  Deep  Submicron 
Technology  on  Dependability  of  VLSI  Circuits”,  IEEE  Int. 
Conf. on Dependable Systems and Networks, USA, 2002, pp. 
205–209. 
[2] T. Karnik, P. Hazucha, and J. Patel, “Characterization of 
Soft  Errors  Caused  by  Single  Event  Upsets  in  CMOS 
Processes”,  IEEE  Trans.  on  Dependable  and  Secure 
Computing, vol. 1, no. 2, 2004, pp. 128–143. 
[3]  A.  Benso,  and  P.  Prinetto,  Fault  Injection  Techniques 
and  Tools  for  Embedded  Systems  Reliability  Evaluation, 
Kluwer Academic Publishers, 2003. 
[4]  K.-T.  Cheng,  S.-Y.  Huang,  and  W.-J.  Dai,  “Fault 
Emulation:  A  New  Methodology  for  Fault  Grading”,  IEEE 
Trans on Computer-Aided Design of Integrated Circuits and 
Systems, vol.18, no. 10, 1999, pp. 1487–1495. 
[5]  P.  Civera,  et  al,  “New  Techniques  for  efficiently 
assessing reliability of SOCs”, Microelectronics Journal, vol. 
34, no. 1, 2003, pp. 53–61. 
[6] L. Antoni, L. Leveugle, and B. Fehér, “Using Run-Time 
Reconfiguration  for  Fault  Injection  Applications”,  IEEE 
Trans. on Instrumentation and Measurement, vol. 52, no. 5, 
2003, pp. 1468–1473. 
[7]  Fault  Representativeness,  Deliverable  ETIE2  of  the 
Dependability  Benchmarking  (DBench)  Project,  IST-2000-
25425, 2002, online: http://www.laas.fr/DBench/ETIE2.pdf. 
[8]  B.  L.  Hutchings,  and  M.  J.  Wirthlin,  “Implementation 
Approaches  for  Reconfigurable  Logic  Applications”,  Int. 
Workshop  on  Field  Programmable  Logic and Applications, 
UK, 1995, pp. 293–302. 
[9] Virtex-II Platform FPGAs: Complete Data Sheet, Xilinx 
Corp., DS031, v3.3, 2004. 
[10]  Stratix  II  Device  Handbook,  Volume  1,  Altera  Corp., 
SII5v1-2.1, 2005. 
[11]  Lattice  ECP/EC  Family  Data  Sheet,  Version  01.3, 
Lattice Semiconductors, 2004. 
[12]  AT40KAL  Series  FPGA,  Atmel  Corp.,  2818E-FPGA-
1/04, 2004. 
[13]  D.  de  Andrés,  et  al.,  “Fast  Run-Time  Reconfiguration 
for  SEU  Injection”,  5th  European  Dependable  Computing 
Conference, LNCS, vol. 3463, Hungary, 2005, pp. 230–245. 
[14] L. Antoni, L. Leveugle, and B. Fehér, “Using Run-Time 
Reconfiguration for Fault Injection in Hardware Prototypes”, 
IEEE  Int.  Symp.  on  Defect  and  Fault  Tolerance  in  VLSI 
Systems, Canada, 2002, pp. 245–253. 
 [15]  A.  Parreira,  J.  P.  Teixeira,  and  M.  Santos,  “A  Novel 
Approach  to  FPGA-Based  Hardware  Fault  Modelling  and 
Simulation”,  Int.  Workshop  on  Design  and  Diagnostics  of 
Electronic Circuits and Systems, Poland, 2003, pp. 17–24. 
[16]  VirtexTM  2.5  V  Field  Programmable  Gate  Arrays: 
Complete Data Sheet, Xilinx Corp., DS003, 2002. 
[17]  RC1000  Functional  Reference  Manual,  Celoxica  Inc., 
RM-1140-0, 2001. 
[18]  S.  Guccione,  D.  Levi,  and  P.  Sundararajan,  “JBits:  A 
Java-based  Interface  for  Reconfigurable  Computing”,  2nd 
Annual  Military 
of 
Programmable Devices and Technologies Conference, USA, 
1999. 
[19] J. C. Baraza, et al., “A prototype of a VHDL-based fault 
injection  tool:  description  and  application”,  Journal  of 
Systems Architecture, vol. 47, no. 10, 2002, pp. 847–867. 
[20]  8051  IP  Core,  version  1.4,  Oregano  Systems,  2004, 
available online at: http://www.oregano.at/ip/8051.htm. 
and  Aerospace  Applications 
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:11:40 UTC from IEEE Xplore.  Restrictions apply.