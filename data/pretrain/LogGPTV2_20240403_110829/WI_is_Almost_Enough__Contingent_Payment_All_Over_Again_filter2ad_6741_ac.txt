𝑤 ← EA(crs, 𝑥, 𝜋)
Pr
: Verify(crs, 𝑥, 𝜋) = 1
∧ 𝑅(𝑥, 𝑤) = 0
 ≤ 𝜖ks(𝜅)
Session 2E: Smart Contracts and Cryptocurrencies CCS '20, November 9–13, 2020, Virtual Event, USA644
 (𝑦, 𝜎)←A(1𝜅)
A Σ-protocol is a simple 3-move interactive protocol used for
building very efficient ZK proof systems. We refer to [34] for a
formal definition of Σ-protocols.
2.2 Trapdoor permutations
Definition 2.2. A collection of efficiently computable functions
H (cid:66) {H𝜅 : K𝜅 × {0, 1}𝜅 → {0, 1}𝜅} is said to be a family of
trapdoor permutations if for every 𝜅 ∈ N and every 𝑘 ∈ K𝜅, we
have that H𝜅(𝑘, ·) is a permutation over {0, 1}𝜅. Furthermore, there
exists a pair of ppt algorithms (H .Gen,H .Inv) where (for certain
polynomial 𝑝):
• H .Gen(1𝜅) → (𝑘, 𝜏𝑘) takes as input the security parameter 𝜅
and outputs a key 𝑘 ∈ K𝜅 and a trapdoor 𝜏𝑘 ∈{0, 1}𝑝(𝜅).
• H .Inv(𝜏𝑘, 𝑦) → 𝑥 takes as input a trapdoor and a value and
outputs another value 𝑥.
And such that, for every 𝜅 ∈ N, every 𝑦 ∈ {0, 1}𝜅 and every
(𝑘, 𝜏𝑘) ← H .Gen(1𝜅), it holds H𝜅(𝑘,H .Inv(𝜏𝑘, 𝑦)) = 𝑦. Further-
more, for every ppt adversary A, the following advantage is negli-
gible in 𝜅,
.
: H𝜅(𝑘, 𝑥) = 𝑦
AdvTPH,A(𝜅) (cid:66) Pr
(𝑘, 𝜏𝑘)←H .Gen(1𝜅)
𝑥 ←A(𝑘, 𝜎)
For a fixed 𝜅 ∈ N, we often write H−1
2.3 Claw-freeness and collision-resistance
The notion of claw-freeness (between two functions 𝐻1 and 𝐻2)
captures the hardness of finding two (not necessarily different)
values 𝑥1 and 𝑥2 such that 𝐻1(𝑥1) = 𝐻2(𝑥2).
𝜅 instead of H .Inv.
Definition 2.3. A function generator FGen is a ppt algorithm
which, on input the security parameter, outputs the description of
two efficiently computable functions 𝐻1 and 𝐻2 with range {0, 1}𝜅.
A function generator FGen is said to be claw-free if for every ppt
adversary A, the following advantage is negligible in 𝜅,
(cid:20) (𝐻1, 𝐻2) ←FGen(1𝜅)
(cid:21)
AdvCF
(𝑥1, 𝑥2) ←A(𝐻1, 𝐻2) : 𝐻1(𝑥1) = 𝐻2(𝑥2)
FGen,A(𝜅) (cid:66) Pr
On the other hand, collision-resistance refers to the hardness of
.
finding two different inputs with the same image.
Definition 2.4. A family of efficiently computable functions F =
{𝐹𝜅 : {0, 1}∗ → {0, 1}𝜅}𝜅∈N is said to be collision-resistant if for
every ppt A the following probability is negligible in 𝜅:
AdvCRF,A(𝜅) (cid:66) Pr(cid:2)(𝑥1, 𝑥2)←A(1𝜅) : 𝐹𝜅(𝑥1) = 𝐹𝜅(𝑥2)(cid:3)
.
2.4 Encryption
Definition 2.5. A private-key encryption scheme E is a triple of
ppt algorithms E = (Gen, Enc, Dec) over a key space K, a message
space M and a ciphertext space C, where:
• Gen(1𝜅) → 𝑘 is a ppt algorithm that on input the security
parameter outputs a key 𝑘 ∈ K.
• Enc(𝑘, 𝑚)→𝑐 is a ppt algorithm that on input a key 𝑘 ∈ K and
a message 𝑚 ∈ M, outputs a ciphertext 𝑐 ∈ C.
• Dec(𝑘, 𝑐)→ 𝑚 is a deterministic algorithm that on input a key
𝑘 ∈ K and a ciphertext 𝑐 ∈ C, outputs a message 𝑚 ∈ M or ⊥.
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)Pr
2
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
 − 1
(cid:21)
We often write Enc𝑘(𝑚) and Dec𝑘(𝑐) instead of Enc(𝑘, 𝑚) and
Dec(𝑘, 𝑐) respectively. We require an encryption scheme be correct,
that is, for every 𝑚 ∈ M, all 𝜅 ∈ N and all 𝑘 ← Gen(1𝜅), it holds
Dec𝑘(Enc𝑘(𝑚)) = 𝑚.
We say an encryption scheme E has indistinguishable encryptions
in the presence of an eavesdropper if for every ppt adversary A, the
following advantage is negligible in 𝜅,
AdveavE,A(𝜅) (cid:66)
(𝑚0, 𝑚1, 𝜎)←A(1𝜅)
𝑘 ←E.Gen(1𝜅)
𝑏 ←$ {0, 1}; 𝑐 ← E.Enc𝑘(𝑚𝑏)
𝑏′←A(𝑐, 𝜎)
: 𝑏′ = 𝑏
,
(cid:20) 𝑚←A(1𝜅);
where the adversary is required to follow the constraint |𝑚0| = |𝑚1|.
We say an encryption scheme E is secure against one-time key
recovery if for every ppt adversary A, the following advantage is
negligible in 𝜅,
Advkey-rec
E,A (𝜅) (cid:66) Pr
Observe that these notions of security are quite weak and both
are implied by the standard IND-CPA security (which is similar to
eav security where the adversary also interacts with an encrypting
oracle). However, both notions are sufficient for our security proofs.
𝑘 ←E.Gen(1𝜅); 𝑘′←A(𝑐)
𝑐 ←E.Enc𝑘(𝑚)
: 𝑘′ = 𝑘
.
2.5 Garbled Circuits
As in [35], we follow the definitions of garbled circuits from [8],
simplifying the terminology to capture our necessities. We also
focus on projective garbling schemes and consider a verification
algorithm.
0 , 𝐿(𝑖)
0 , 𝑍 (𝑖)
1 }𝑖∈[𝑚], {𝑍 (𝑖)
Definition 2.6 (Garbled circuit). A garbled circuit scheme is a triple
GC of ppt algorithms GC = (Garble, Eval, Verify) where:
1 }𝑖∈[𝑛]) on in-
• Garble(1𝜅, 𝑓 ) → (GC, {𝐿(𝑖)
put 𝜅 and the description of a function 𝑓 : {0, 1}𝑚 → {0, 1}𝑛,
outputs a garbled circuit, a set of 𝑚 input label pairs and a set
of 𝑛 output label pairs.
• Eval(GC, {𝐿(𝑖)}𝑖∈[𝑚]) →{𝑍 (𝑖)}𝑖∈[𝑛] on input a garbled circuit
and a set of input labels, outptus a set of output labels.
1 }𝑖∈[𝑛]) → {0, 1} on in-
• Verify(GC, 𝑓 , {𝐿(𝑖)
put a garbled circuit, a function and a set of input label pairs
and a set of output label pairs, outputs a bit (1 for acceptance
and 0 for rejection).
We say a garbled circuit scheme is correct if for all polynomial-
size (in 𝜅) functions 𝑓 : {0, 1}𝑚 → {0, 1}𝑛 and all 𝑥 ∈ {0, 1}𝑚, for
𝑦 = 𝑓 (𝑥), the following probability is overwhelming in 𝜅,
1 }𝑖∈[𝑚], {𝑍 (𝑖)
0 , 𝑍 (𝑖)
0 , 𝐿(𝑖)
Pr
0 , 𝐿(𝑖)
1 }𝑖∈[𝑚], {𝑍 (𝑖)
0 , 𝑍 (𝑖)
{ ˆ𝑍 (𝑖)}𝑖∈[𝑛] ← Eval(GC, {𝐿(𝑖)
1 }𝑖∈[𝑛]) ← Garble(1𝜅, 𝑓 )
𝑥𝑖 }𝑖∈[𝑚]) :
ˆ𝑍 (𝑖) = 𝑍 (𝑖)
𝑦𝑖 ∀𝑖 ∈ [𝑛]
(cid:34) (GC, {𝐿(𝑖)
(cid:35)
.
We say a garbled circuit scheme has authenticity if for all polyno-
mial-size (in 𝜅) functions 𝑓 : {0, 1}𝑚 → {0, 1}𝑛 and all 𝑥 ∈ {0, 1}𝑚,
for 𝑦 = 𝑓 (𝑥), and for all ppt adversaries A, the following probability,
denoted by AdvauthGC,A(𝜅), is negligible in 𝜅,
Pr
(cid:34) (GC, {𝐿(𝑖)
1 }𝑖∈[𝑛]) ← Garble(1𝜅, 𝑓 )
0 , 𝑍 (𝑖)
𝑥𝑖 }𝑖∈[𝑚]) : 𝑍∗ = 𝑍 (𝑖∗)¬𝑦𝑖∗
1 }𝑖∈[𝑚], {𝑍 (𝑖)
(𝑍∗, 𝑖∗) ← A(𝑓 , 𝑥, GC, {𝐿(𝑖)
0 , 𝐿(𝑖)
(cid:35)
.
Session 2E: Smart Contracts and Cryptocurrencies CCS '20, November 9–13, 2020, Virtual Event, USA645tS-WIΠ,RG
A
(𝜅) :
Trapdoor subversion witness indistinguishability. Our new notion of
WI4 requires that the system remain WI even when the adversary
generates the crs and is given a trapdoor associated with the relation
to be proven.
(crs, 𝜎) ← A(𝑅, 𝜏)
A
(𝜅)
(𝜅) S-WIΠ,RG
(crs, 𝜎) ← A(𝑅)
Game WIΠ,RG
A
𝑏 ←$ {0, 1}
(𝑅, 𝜏) ← RG(1𝜅)
crs← Π.CrsGen(𝑅)
𝑏′ ← AO(𝑅,crs,𝑏,·,·,·)(crs, 𝜎)
return (𝑏′ = 𝑏)
O(𝑅, crs, 𝑏, 𝑥, 𝑤0, 𝑤1):
𝜋 ← Π.Prove(𝑅, crs, 𝑥, 𝑤𝑏)
if 𝑅(𝑥, 𝑤0) = 0 or 𝑅(𝑥, 𝑤1) = 0, return ⊥
otherwise, return 𝜋
Definition 2.7 (tS-WI). A NI proof system Π = (CrsGen, Prove,
Verify) with respect to a relation generator RG is trapdoor sub-
version witness indistinguishable if for all ppt A, the following
advantage is negligible in 𝜅,
Π,A (𝜅) (cid:66)
tS-WI
(cid:12)(cid:12)(cid:12)(cid:12)Pr(cid:104)tS-WIΠ,RG
(𝜅)(cid:105) − 1
Adv
(cid:12)(cid:12)(cid:12)(cid:12)
A
.
2
3 CONTINGENT PAYMENT FROM CSP
In the work by Campanelli et al. [18], the authors explored the
idea of using the relation designed for contingent service payment
for information contingent payment. The main motivation is that
the witness indistinguishability of the underlying NI system could
be enough to completely hide the information about the secret
(thanks to the disjunctive structure on the property). Unfortunately,
Fuchsbauer showed that WI is not enough for this application [27].
More concretely, he proposed NI schemes for the CP-from-CSP
relation that are WI and can lead to completely insecure contingent
payment systems, where the buyer can learn all the information
before making the payment. In this section we show that our notion
of tS-WI is indeed enough to achieve a secure CP based on the
following relation (used in [18]):
Definition 3.1 (CP-from-CSP relation generator). Let E (cid:66) (Gen,
Enc, Dec) be an encryption scheme and let 𝑓 : {0, 1}∗→{0, 1} be a
predicate. Let H (cid:66) {H𝜅 : K𝜅 × {0, 1}𝜅 → {0, 1}𝜅} be a trapdoor
permutation, and let F (cid:66) {F𝜅 : {0, 1}∗ → {0, 1}𝜅} be a hash
function family. We define the CP relation generator RGCP as:
RGCP(1𝜅) :
(𝑘, 𝜏𝑘) ← H .Gen(1𝜅);
𝑅((𝑐, 𝑦), 𝑟) (cid:66) {𝑓 (Dec𝑟 (𝑐)) ∧ 𝑦 = F𝜅(𝑟)} ∨ 𝑦 = H𝜅(𝑘, 𝑟);
return (𝑅, 𝜏𝑘)
The only difference with the relation in [18] is that we require H
be a trapdoor permutation, a technical requirement in our security
proof.