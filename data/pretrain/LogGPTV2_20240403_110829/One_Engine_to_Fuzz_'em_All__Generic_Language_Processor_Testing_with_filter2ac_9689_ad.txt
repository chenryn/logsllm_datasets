generate complex expressions. Since we have the symbol tables
and the inference rule of operators, we can chain simple
expressions with operators. For example, with the symbol
tables in Fig. 5b, we can generate complex expressions such as
(a + b[1]) » c, which is chaining three simple expressions
(a, b[1], c) with three operators (+, (), »). We first randomly
pick an operator and then recursively generate expressions of
the types of its operands. Afterward, we simply concatenate
them to get a complex expression.
Fuzzer. We build POLYGLOT on top of AFL 2.56b. We keep
the fork-server mechanism and the queue schedule algorithm
of AFL and replace its test case generation module with
POLYGLOT’s. POLYGLOT also makes use of AFL’s QEMU
mode, which can test binary without instrumentation. Since
many programming languages are bootstrapping, which means
their language processors are written in themselves, it is difficult
or time-consuming to instrument these processors. Using AFL
QEMU mode can greatly save time and effort.
User Inputs for Adoption. To apply POLYGLOT to a
programming language, users need to provide:
the BNF
grammar, the semantic annotations and the initial corpus of test
cases. The BNF grammars of most programming languages are
available from either the official documents of the languages
or open-source repositories [12]. The semantic annotations
should describe symbols that relate to definitions, symbols
that create new scopes, basic types of the languages, and the
inference rules of operators. We provide a template of semantic
annotations in JSON format so users can easily adjust them
according to their needs. Users are free to choose the corpus
that fits the tested processor. In our case, it took one of our
authors 2-3 hours to collect the amentioned inputs for one
language and 3-5 hours to refine them to fit in POLYGLOT.
TABLE II: 21 compliers and interpreters of 9 programming
languages tested by POLYGLOT. # refers to the TIOBE index, a
measurement of the popularity for programming languages [20], and -
means that language is not within top 50. * in Version means the git
commit hash. #Bug shows the number of reported bugs, confirmed
bugs and fixed bugs from left to right.
Language Target
#
1
4
C
C++
7
JavaScript
8
9
10
41
-
-
R
PHP
SQL
Lua
Solidity
Pascal
Sum 9
GCC
Clang
G++
Clang++
V8
JSCore
ChakraCore
Hermes
mujs
njs
JerryScript
DukTape
QuickJs
R
pqR
php
SQLite
lua
luajit
solc
freepascal
21
Version
10.0
11.0.0
10.0
11.0.0
8.2.0
2.27.4
1.12.0
0.5.0
9f3e141*
0.4.3
2.4.0
2.5.0
32d72d4*
4.0.2
5c6058e*
8.0.0
3.32
5.4.0
2.1
0.6.3
3.3.1
LOC(K)
5,956
1,578
5,956
1,578
811
497
690
620
15
78
173
238
89
851
845
1,269
304
31
88
192
405
#Bug
6/5/1
24/3/2
4/4/2
6/0/0
3/3/2
1/1/1
9/4/0
1/1/1
1/1/1
4/4/0
5/5/4
1/1/1
1/1/1
4/4/4
3/1/0
35/27/22
27/27/27
12/12/12
2/2/2
16/16/16
8/8/8
173/136/113
VIII. EVALUATION
Our evaluation aims to answer the following questions:
• Can POLYGLOT generally apply to different real-world
programming languages and identify new bugs in their
language processors? (§VIII-B)
• Can semantic validation improve POLYGLOT’s fuzzing
effectiveness? (§VIII-C)
• Can POLYGLOT outperform state-of-the-art
fuzzers?
(§VIII-D)
A. Evaluation Setup
Benchmark. To evaluate the genericity of POLYGLOT, we
test 21 popular processors of nine programming languages
according to their popularity [20] and variety in domains (e.g.,
Solidity for smart contracts, R for statistical computation,
SQL for data management). We show the target list in Table II.
To understand the contributions of our semantic validation,
we perform an in-depth evaluation on the representative
processors of four popular languages (two statically typed
and two dynamically typed): Clang of C, solc of Solidity,
ChakraCore of JavaScript and php of PHP. We also use these
four processors to conduct the detailed evaluation to compare
POLYGLOT with five state-of-the-art fuzzers, including three
generic ones (the mutation-based AFL, the hybrid QSYM, the
grammar-based Nautilus) and two language-specific ones
(CSmith of C and DIE of JavaScript).
Seed Corpus and BNF Grammar. We collect seed corpus
from the official GitHub repository of each language processor.
Additionally, we collected 71 and 2,598 builtin functions or
variables for JavaScript and PHP respectively from [13]
and [18] using a crawler script. We feed the same seeds to
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:12:53 UTC from IEEE Xplore.  Restrictions apply. 
649
short *e, b[3] = {1, 2, 0};
for (a = 0; a 
Fig. 8: PoC that triggers an invalid memory write in PHP
interpreter. This kind of bug does not involve dangerous functions
and can be used to escape PHP sandboxes.
of 9 programming languages, including 30 from C, 10 from
C++, 26 from JavaScript, 35 from PHP, 16 from Solidity,
27 from SQL, 14 from LUA, 7 from R and 8 from Pascal. The
complete and detailed information of the bugs can be found in
Table V in Appendix. All the bugs have been reported to and
acknowledged by the corresponding developers. At the time
of paper writing, 113 bugs have been fixed and 18 CVEs are
assigned. Most of these bugs exist in the deep logic of the
language processors and are only triggerable by semantically
correct test cases. In the following case studies, we discuss
some of the representative bugs to understand how POLYGLOT
can find these bugs and what security consequences they cause.
Case Study 1: Triggering Deep Bugs in Clang. POLYGLOT
identifies a bug in the loop strength reduction optimization of
Clang. Fig. 6a shows the Proof-of-Concept (PoC), and Fig. 6b
shows its logically equivalent program for understanding the
semantics of the PoC easily. Fig. 11 in Appendix shows
the process of how POLYGLOT turns the benign motivating
example (Fig. 2a) into the bug triggering PoC. After each
round of mutation, all the definitions are intact, and new code
structures are introduced. Each round of validation produces a
semantically correct test case. With new code structures and
semantic correctness, the mutated test case keeps discovering
new execution paths, which encourages POLYGLOT to keep
mutating it. And we get the bug triggering PoC after 3 rounds
of mutation and validation. The PoC might look uncommon
to programmers, but its syntax and semantics are legitimate
in C. Therefore, the PoC shows that POLYGLOT can generate
high-quality inputs to trigger deep bugs in language processors.
Case Study 2: Control Flow Hijacking in njs. POLYGLOT
identified many exploitable bugs, including the one shown
in Fig. 7, which leads to control flow hijacking in njs. In
JavaScript, when JSON parses a string, it accepts a handler
to transform the parsed values. In the PoC, JSON.parse first
parses the string "[1, 2, 3, 4]" into an array of four integer
elements, which is denoted by arr. Then, the handler at line
1 runs on each of the four elements and replaces them with
1.8457939563e-314. It also modifies arr, which is referred by
this in line 2. Assigning a new element of type function to
arr changes the underlying memory layout of arr. After the
handler processes the first element, the memory layout of arr