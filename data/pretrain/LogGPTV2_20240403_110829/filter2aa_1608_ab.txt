Try It!    SSID: SmellOfWifiTalk
Many devices have been seen to emit more than one signature and so there is more 
than one entry for them in the database.
For devices which support both 2.4 and 5 GHz operation, the signatures are almost 
always distinct.
●
there are Information Elements which are only defined for one or the other, like 
Extended Supported Rates on 2.4
●
also the whole of do11ac is only defined for 5GHz.
So for devices which support both bands, we always capture signatures from each 
band.
However even in the same band, devices often have multiple signatures. They vary 
what they advertise based on local conditions like noise, or in what they saw from the 
AP.
This example shows two signatures seen from a Google Pixel Phone. It varies its 
handling of beamforming, presumably based on the noise environment it sees.
0:50
Feedback loop with AP
Try It!    SSID: SmellOfWifiTalk
Probe Request
Association Request
Probe Response
wifi4|probe:0,1,45,
221(0050f2,8),191,1
27,htcap:016f,htagg
:1f,htmcs:000000ff,
vhtcap:33907132,vht
rxmcs:0186fffe,vhtt
xmcs:0186fffe,extca
p:04000000000000408
0|assoc:0,1,33,36,4
8,70,45,221(0050f2,
2),191,127,htcap:01
6f,...
Clients can also behave differently depending on what the AP says in response to 
their Probe Request. For example:
●
If the AP says it supports Radio Resource Management, most Apple and 
some Android devices will include a Spectrum Management IE in their 
Association Request (it’s #70).
●
Another example: though dot11ac is only defined for 5 GHz, many vendors 
have a proprietary implementation handling 2.4GHz as well. Qualcomm 
includes the dot11ac information in the Probe Request, but will only include in 
the Association if it sees the right response from the AP.
Broadcom also has a proprietary dot11ac implementation for 2.4GHz, but it 
works differently. Of course.
When capturing signatures for the database, we use three different APs to maximize 
the chances of capturing different signatures.
1:00
Signature Aliasing
Amazon Dash Button
wifi4|probe:0,1,50,45,3,221(001018,2),221(00904c,51),htcap:110c,htagg:19,htmcs:000000ff|assoc:0,1,48,50,4
5,221(001018,2),221(00904c,51),221(0050f2,2),htcap:110c,htagg:19,htmcs:000000ff
First Alert Thermostat
wifi4|probe:0,1,50,45,3,221(001018,2),221(00904c,51),htcap:110c,htagg:19,htmcs:000000ff|assoc:0,1,48,50,4
5,221(001018,2),221(00904c,51),221(0050f2,2),htcap:110c,htagg:19,htmcs:000000ff
Nexus 7 (2012 edition)
wifi4|probe:0,1,50,45,3,221(001018,2),221(00904c,51),htcap:110c,htagg:19,htmcs:000000ff|assoc:0,1,48,50,4
5,221(001018,2),221(00904c,51),221(0050f2,2),htcap:110c,htagg:19,htmcs:000000ff
Roku HD
wifi4|probe:0,1,50,45,3,221(001018,2),221(00904c,51),htcap:110c,htagg:19,htmcs:000000ff|assoc:0,1,48,50,4
5,221(001018,2),221(00904c,51),221(0050f2,2),htcap:110c,htagg:19,htmcs:000000ff
Withings Scale
wifi4|probe:0,1,50,45,3,221(001018,2),221(00904c,51),htcap:110c,htagg:19,htmcs:000000ff|assoc:0,1,48,50,4
5,221(001018,2),221(00904c,51),221(0050f2,2),htcap:110c,htagg:19,htmcs:000000ff
Try It!    SSID: SmellOfWifiTalk
Nonetheless, sometimes we see the same signature from multiple devices.
These examples are all devices using the Broadcom 43362 chipset, running Linux, 
with the same driver, the same wpa_supplicant, and old enough that none of them 
provide a TX Power IE. The signatures are identical: an Amazon Dash Button, a First 
Alert Thermostat, a Nexus 7, Roku HD, and Withings Scale.
0:30
Signature Disambiguation
Amazon Dash Button
wifi4|probe:0,1,50,45,3,221(001018,2),221(00904c,51),htcap:110c,htagg:19,htmcs:000000ff|assoc:0,1,48,50,4
5,221(001018,2),221(00904c,51),221(0050f2,2),htcap:110c,htagg:19,htmcs:000000ff|oui:amazon
First Alert Thermostat
wifi4|probe:0,1,50,45,3,221(001018,2),221(00904c,51),htcap:110c,htagg:19,htmcs:000000ff|assoc:0,1,48,50,4
5,221(001018,2),221(00904c,51),221(0050f2,2),htcap:110c,htagg:19,htmcs:000000ff|oui:firstalert
Nexus 7 (2012 edition)
wifi4|probe:0,1,50,45,3,221(001018,2),221(00904c,51),htcap:110c,htagg:19,htmcs:000000ff|assoc:0,1,48,50,4
5,221(001018,2),221(00904c,51),221(0050f2,2),htcap:110c,htagg:19,htmcs:000000ff|oui:asus
Roku HD
wifi4|probe:0,1,50,45,3,221(001018,2),221(00904c,51),htcap:110c,htagg:19,htmcs:000000ff|assoc:0,1,48,50,4
5,221(001018,2),221(00904c,51),221(0050f2,2),htcap:110c,htagg:19,htmcs:000000ff|os:roku
Withings Scale
wifi4|probe:0,1,50,45,3,221(001018,2),221(00904c,51),htcap:110c,htagg:19,htmcs:000000ff|assoc:0,1,48,50,4
5,221(001018,2),221(00904c,51),221(0050f2,2),htcap:110c,htagg:19,htmcs:000000ff|oui:withings
Try It!    SSID: SmellOfWifiTalk
In most cases like this we distinguish them using the top 24 bits of the MAC address, 
which is the Organizationally Unique Identifier. OUIs are assigned to a manufacturer. 
Adding the OUI as a qualifier can distinguish similar devices from different 
manufacturers which have the same signature.
We sometimes use information from DHCP: the options present in the request can 
identify the OS, as developed by Fingerbank (http://fingerbank.org) - and by the way, 
that earlier work on DHCP option signatures from Fingerbank inspired this mechanism 
for Wi-Fi. However using DHCP gets further and further from the Wi-Fi layer, so we try 
to be more sparing in using it. In particular, only the AP itself will be able to see the 
DHCP information after decryption, it cannot be used from a separate sniffer device 
on the Wi-Fi network.
0:45
Troublesome cases
Try It!    SSID: SmellOfWifiTalk
iPad Air 2nd gen vs iPhone 6s
wifi4|probe:0,1,45,127,107,191,221(0017f2,10),221(0050f2,8),221(0
01018,2),htcap:006f,htagg:17,htmcs:0000ffff,vhtcap:0f815832,vhtrx
mcs:0000fffa,vhttxmcs:0000fffa,extcap:0400088400000040|assoc:0,1,
33,36,48,45,127,191,221(0017f2,10),221(001018,2),221(0050f2,2),ht
cap:006f,htagg:17,htmcs:0000ffff,vhtcap:0f815832,vhtrxmcs:0000fff
a,vhttxmcs:0000fffa,txpow:1302,extcap:0400000000000040
However there remain some cases which are still troublesome, mainly devices made 
by the same vendor, using the same software, the same Wi-Fi chipset, and at about 
the same time. For example, iPad Air 2nd generation and iPhone 6s have the same 
signature. We can try to use heuristics, like if the DHCP hostname contains iPad then 
maybe it’s an iPad. If nothing else though, we have to return both possibilities.
0:30
Uses of Wi-Fi Taxonomy
Current
● List of Connected Clients in UI
● Correlate with other data
Future
● Optimize for client ?
● WIDS ?
Try It!    SSID: SmellOfWifiTalk
This mechanism was originally developed as part of a Wi-Fi AP project. We intended 
to focus on identifying the Wi-Fi chipset the client was using. We thought if we could 
just know what chipset the client was using, we’d enable all kinds of very clever 
workarounds for bugs in that chipset and we would make Wi-Fi perfect… but it turns 
out that the kinds of bugs which can be easily worked around are mostly handled by 
the software in the client device. Who knew?
Instead, this information is currently used:
●
in the UI where one can see a list of connected clients to also give an 
indication of what those clients are. If the client includes a useful hostname 
that is great, but if it doesn’t include a hostname or it uses something like its 
serial number it is better to say what kind of device we think it is.
●
We also use it to correlate with performance data to break it out by type of 
client device. My colleague Avery Pennarun gave a talk at Netdev 1.1, 
"Measuring wifi performance across all Google Fiber customers"
This taxonomy mechanism was one of the topics. The graph on this page 
shows Wi-Fi throughput getting better and better as the client gets closer to 
the AP, until when it gets really close it drops sharply back down. That sort of 
behavior is only visible if the data can be broken out by the type of device.
https://www.youtube.com/watch?v=yZcHbD84j5Y (the section about this 
mechanism starts at 16:09).
Possible uses in the future:
●
Possibly of interest to this audience: Wireless Intrusion Detection Systems 
could make use of knowing more about the type of client connecting. Some of 
this stuff is rather difficult for malicious clients to spoof, for example pretending 
to be a Broadcom chipset if the attacking device actually uses Qualcomm or 
Marvell.
●
We might also use it for optimizations based on the client, for example in 
packet reorder buffers. These keep retransmitted packets in order at the cost 
of introducing delay. Windows absolutely needs the packets to stay in order, it 
considers even minimal reordering as congestion and slows down. iOS and 
Linux are more tolerant of occasional reordering, and could get lower latency 
on average if we allowed occasional packets to arrive out of order.
2:00
Current Status
● hostapd 2.6 added CONFIG_TAXONOMY.
○ hostapd_cli command: signature
● Database of known signatures:
○
https://github.com/NetworkDeviceTaxonomy/wifi_taxonomy
○ 907 signatures covering 172 devices
○ ~60% of connected Wi-Fi devices
○ the long tail is long
Try It!    SSID: SmellOfWifiTalk
The implementation to extract signatures for clients went into hostapd in August 2016, 
and is present in hostapd 2.6 and later.
The database of known signatures is released as open source code under an Apache 
license.
https://github.com/NetworkDeviceTaxonomy/wifi_taxonomy
It currently identifies about 60% of Wi-Fi clients across a broad swath of the market. 
The remaining 40% of devices are mostly laptops and desktops, with a long tail of 
other types of unidentified devices.
0:45
Other resources
●
Published paper
https://research.google.com/pubs/pub45429.html
https://arxiv.org/abs/1608.01725
●
“Measuring wifi performance across all Google Fiber customers”
Avery Pennarun, Netdev 1.1, 2015
https://youtu.be/yZcHbD84j5Y
http://apenwarr.ca/diary/wifi-data-apenwarr-201602.pdf
●
https://github.com/NetworkDeviceTaxonomy
Try It!    SSID: SmellOfWifiTalk
We published a paper about the mechanism, which goes about a half level of detail 
deeper into the implementation.
Earlier I mentioned the talk at Netdev 1.1 by Avery Pennarun, another senior software 
engineer working on the project and co-developer of the mechanism. That talk 
described the overall environment where this mechanism was developed and how it 
was used in that environment.
The github site is intended to host other tools relating to client taxonomy and 
identification.
0:30
The Way Forward
● Integration
● Better tools to gather signatures
● AP Taxonomy?
What comes next?
●
So. Here is this thing. The signature mechanism is in hostapd, and the 
database of signatures is published as open source code, but it is only useful 
if integrated into other products and systems: Wi-Fi APs, or Wireless Intrusion 
Detection Systems, or other stuff.
●
We need to develop better tools for gathering signatures. Right now it is pretty 
manually intensive.
●
This talk has been all about how APs can identify clients, but running it in 
reverse would likely work as well. It could be run on a client to identify the type 
of AP it is connecting to. The list of IEs present in the AP’s Beacon and Probe 
Response could be turned into a signature, and this would allow any other 
connectivity or performance checks to report more information about the AP.