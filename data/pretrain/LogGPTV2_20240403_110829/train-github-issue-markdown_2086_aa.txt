## Bug Report
**For English only** , other languages will not accept.
Before report a bug, make sure you have:
  * Searched open and closed GitHub issues.
  * Read documentation: ShardingSphere Doc.
Please pay attention on issues you submitted, because we maybe need more
details.  
If no response anymore and we cannot reproduce it on current information, we
will **close it**.
Please answer these questions before submitting your issue. Thanks!
### Which version of ShardingSphere did you use?
5.0.1-SNAPSHOT  
master  
commit `654c876`
### Which project did you use? ShardingSphere-JDBC or ShardingSphere-Proxy?
ShardingSphere-Proxy
### Expected behavior
without error
### Actual behavior
    [ERROR] 2021-11-25 21:46:41.736 [epollEventLoopGroup-3-5] o.a.s.p.f.n.FrontendChannelInboundHandler - Exception occur:
    java.lang.IndexOutOfBoundsException: readerIndex(1) + length(4) exceeds writerIndex(4): PooledSlicedByteBuf(ridx: 1, widx: 4, cap: 4/4, unwrapped: PooledUnsafeDirectByteBuf(ridx: 7, widx: 19, cap: 2048))
    	at io.netty.buffer.AbstractByteBuf.checkReadableBytes0(AbstractByteBuf.java:1442)
    	at io.netty.buffer.AbstractByteBuf.readIntLE(AbstractByteBuf.java:817)
    	at org.apache.shardingsphere.db.protocol.mysql.payload.MySQLPacketPayload.readInt4(MySQLPacketPayload.java:115)
    	at org.apache.shardingsphere.db.protocol.mysql.packet.handshake.MySQLHandshakeResponse41Packet.(MySQLHandshakeResponse41Packet.java:56)
    	at org.apache.shardingsphere.proxy.frontend.mysql.authentication.MySQLAuthenticationEngine.authPhaseFastPath(MySQLAuthenticationEngine.java:88)
    	at org.apache.shardingsphere.proxy.frontend.mysql.authentication.MySQLAuthenticationEngine.authenticate(MySQLAuthenticationEngine.java:75)
    	at org.apache.shardingsphere.proxy.frontend.netty.FrontendChannelInboundHandler.authenticate(FrontendChannelInboundHandler.java:80)
    	at org.apache.shardingsphere.proxy.frontend.netty.FrontendChannelInboundHandler.channelRead(FrontendChannelInboundHandler.java:72)
    	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
    	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
    	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
    	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:324)
    	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:311)
    	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:432)
    	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:276)
    	at io.netty.handler.codec.ByteToMessageCodec.channelRead(ByteToMessageCodec.java:103)
    	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
    	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
    	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
    	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
    	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
    	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
    	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
    	at io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:795)
    	at io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:480)
    	at io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:378)
    	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:986)
    	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
    	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
    	at java.lang.Thread.run(Thread.java:748)
    [ERROR] 2021-11-25 21:46:41.745 [epollEventLoopGroup-3-5] o.a.s.p.f.n.FrontendChannelInboundHandler - Exception occur:
    java.lang.IndexOutOfBoundsException: readerIndex(1) + length(4) exceeds writerIndex(1): PooledSlicedByteBuf(ridx: 1, widx: 1, cap: 1/1, unwrapped: PooledUnsafeDirectByteBuf(ridx: 11, widx: 19, cap: 2048))
    	at io.netty.buffer.AbstractByteBuf.checkReadableBytes0(AbstractByteBuf.java:1442)
    	at io.netty.buffer.AbstractByteBuf.readIntLE(AbstractByteBuf.java:817)
    	at org.apache.shardingsphere.db.protocol.mysql.payload.MySQLPacketPayload.readInt4(MySQLPacketPayload.java:115)
    	at org.apache.shardingsphere.db.protocol.mysql.packet.handshake.MySQLHandshakeResponse41Packet.(MySQLHandshakeResponse41Packet.java:56)
    	at org.apache.shardingsphere.proxy.frontend.mysql.authentication.MySQLAuthenticationEngine.authPhaseFastPath(MySQLAuthenticationEngine.java:88)
    	at org.apache.shardingsphere.proxy.frontend.mysql.authentication.MySQLAuthenticationEngine.authenticate(MySQLAuthenticationEngine.java:75)
    	at org.apache.shardingsphere.proxy.frontend.netty.FrontendChannelInboundHandler.authenticate(FrontendChannelInboundHandler.java:80)
    	at org.apache.shardingsphere.proxy.frontend.netty.FrontendChannelInboundHandler.channelRead(FrontendChannelInboundHandler.java:72)
    	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
    	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
    	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
    	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:324)
    	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:311)
    	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:432)
    	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:276)
    	at io.netty.handler.codec.ByteToMessageCodec.channelRead(ByteToMessageCodec.java:103)
    	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
    	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
    	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
    	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
    	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
    	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
    	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
    	at io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:795)
    	at io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:480)
    	at io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:378)
    	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:986)
    	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
    	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
    	at java.lang.Thread.run(Thread.java:748)
### Reason analyze (If you can)
### Steps to reproduce the behavior, such as: SQL to execute, sharding rule
configuration, when exception occur etc.
  * https://hub.fastgit.org/pingcap/benchmarksql.git
  * 5.0-mysql-support-opt-2.1
### Example codes for reproduce this issue (such as a github link).
# BenchmarkSQL with ShardingSphere-Proxy
## BenchmarkSQL
https://hub.fastgit.org/pingcap/benchmarksql.git  
5.0-mysql-support-opt-2.1
## MySQL
Version：5.7.26 Port：3306
## ShardingSphere-Proxy
https://github.com.cnpmjs.org/apache/shardingsphere.git  
master  
commit `654c876`
## About ShardingSphere-Proxy
### server.yaml
    rules:
      - !AUTHORITY
        users:
          - root@%:root
          - sharding@:sharding
        provider:
          type: NATIVE
    props:
      #max-connections-size-per-query: 1
      #executor-size: 16  # Infinite by default.
      #proxy-frontend-flush-threshold: 128  # The default value is 128.
      #proxy-opentracing-enabled: false
      #proxy-hint-enabled: false
      #sql-show: false
      #check-table-metadata-enabled: false
      #lock-wait-timeout-milliseconds: 50000 # The maximum time to wait for a lock
        # Proxy backend query fetch size. A larger value may increase the memory usage of ShardingSphere Proxy.
        # The default value is -1, which means set the minimum value for different JDBC drivers.
      #proxy-backend-query-fetch-size: 200
      #check-duplicate-table-enabled: false
      proxy-frontend-executor-size: 200 # Proxy frontend executor size. The default value is 0, which means let Netty decide.
        # Available options of proxy backend executor suitable: OLAP(default), OLTP. The OLTP option may reduce time cost of writing packets to client, but it may increase the latency of SQL xecution
        # if client connections are more than proxy-frontend-netty-executor-size, especially executing slow SQL.
      proxy-backend-executor-suitable: OLTP
### config-sharding.yaml
    schemaName: proxy_tpcc
    dataSources:
      ds_0:
        url: jdbc:mysql://IP.10.21:3306/tpcc0
        username: root
        password: Passwd
        connectionTimeoutMilliseconds: 3000
        idleTimeoutMilliseconds: 60000
        maxLifetimeMilliseconds: 1800000
        maxPoolSize: 200
        minPoolSize: 0
      ds_1:
        url: jdbc:mysql://IP.10.21:3306/tpcc1
        username: root
        password: Passwd
        connectionTimeoutMilliseconds: 3000
        idleTimeoutMilliseconds: 60000
        maxLifetimeMilliseconds: 1800000
        maxPoolSize: 200
        minPoolSize: 0
      ds_2:
        url: jdbc:mysql://IP.10.21:3306/tpcc2
        username: root
        password: Passwd
        connectionTimeoutMilliseconds: 3000
        idleTimeoutMilliseconds: 60000
        maxLifetimeMilliseconds: 1800000
        maxPoolSize: 200
        minPoolSize: 0
      ds_3:
        url: jdbc:mysql://IP.10.21:3306/tpcc3
        username: root
        password: Passwd
        connectionTimeoutMilliseconds: 3000
        idleTimeoutMilliseconds: 60000
        maxLifetimeMilliseconds: 1800000
        maxPoolSize: 200
        minPoolSize: 0
      ds_4:
        url: jdbc:mysql://IP.10.21:3306/tpcc4
        username: root
        password: Passwd
        connectionTimeoutMilliseconds: 3000
        idleTimeoutMilliseconds: 60000
        maxLifetimeMilliseconds: 1800000
        maxPoolSize: 200
        minPoolSize: 0
    rules:
      - !SHARDING
        bindingTables:
        #  - bmsql_warehouse, bmsql_customer
        #  - bmsql_stock, bmsql_district, bmsql_order_line
          -  bmsql_district, bmsql_order_line
        defaultDatabaseStrategy:
          none: null
        defaultTableStrategy:
          none: null
        keyGenerators:
          snowflake:
            props:
              worker-id: 123
            type: SNOWFLAKE
        shardingAlgorithms:
          ds_bmsql_customer_inline:
            props:
              algorithm-expression: ds_${c_id % 5}
            type: INLINE
          ds_bmsql_district_inline:
            props:
              algorithm-expression: ds_${d_w_id % 5}
            type: INLINE
          ds_bmsql_history_inline:
            props:
              algorithm-expression: ds_${h_w_id % 5}
            type: INLINE
          ds_bmsql_item_inline:
            props:
              algorithm-expression: ds_${i_id % 5}
            type: INLINE
          ds_bmsql_new_order_inline:
            props:
              algorithm-expression: ds_${no_w_id % 5}
            type: INLINE
          ds_bmsql_oorder_inline:
            props:
              algorithm-expression: ds_${o_w_id % 5}
            type: INLINE
          ds_bmsql_order_line_inline:
            props:
              algorithm-expression: ds_${ol_w_id % 5}
            type: INLINE
          ds_bmsql_stock_inline:
            props:
              algorithm-expression: ds_${s_w_id % 5}
            type: INLINE
          ds_bmsql_warehouse_inline:
            props:
              algorithm-expression: ds_${w_id % 5}
            type: INLINE
          t_bmsql_item:
            type: INLINE
            props:
              algorithm-expression: bmsql_item_${i_im_id % 2}
          t_bmsql_order_line:
            type: INLINE
            props:
              algorithm-expression: bmsql_order_line_${ol_number % 6}