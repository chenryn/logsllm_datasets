的“导航”一节所述。可以创建一个页面，把它作为应用程序shell，再在SplitView的内容中
添加一个Frame。AppShellSample应用程序演示了如何做到这一点。
在模板生成的代码中，在App类的OnLaunched方法中创建一个Frame对象，该Frame导
航到MainPage。这段代码更改为创建一个AppShell，并在AppShell（shell.AppFrame）中
使用Frame，导航到MainPage（代码文件AppShellSample / App.xaml.cs）：
    protected override void OnLaunched(LaunchActivatedEventArgs e)
    {
      AppShell shell = Window.Current.Content as AppShell;
      if (shell == null)
      {
        shell = new AppShell();
        shell.Language = ApplicationLanguages.Languages[0];
        shell.AppFrame.NavigationFailed += OnNavigationFailed;
        if (e.PreviousExecutionState == ApplicationExecutionState.Terminated)
        {
          //TODO: Load state from previously suspended application
        }
      }
      Window.Current.Content = shell;
      if (shell.AppFrame.Content == null)
      {
        shell.AppFrame.Navigate(typeof(MainPage), e.Arguments,
          new SuppressNavigationTransitionInfo());
      }
      Window.Current.Activate();
    }
应用程序的创建与其他XAML页面一样，也使用Blank Page Visual Studio项模板。为
了向应用程序shell添加一个frame，应添加一个SplitView控件，再在SplitView的内容中添
加一个Frame元素。有了Frame，再给页面的事件处理程序分配Navigating和Navigated事件
（代码文件AppShellSample/ AppShell.xaml）：
 注意： 
有了Frame，就定义一个ContentTransition，使用一个
EntraceNavigation-TransitionInfo在Frame中连续改变内容。动画参见第30章。
要使用AppShell类访问SplitView中的Frame对象，添加一个AppFrame属性和处理程序
方法，用于Frame导航（代码文件AppShellSample / AppShell.xaml.cs）：
    public Frame AppFrame => frame;
    private void OnNavigatingToPage(object sender, NavigatingCancelEventArgs e)
    {
    }
    private void OnNavigatedToPage(object sender, NavigationEventArgs e)
    {
    }
32.2.8 汉堡按钮
为了打开和关闭SplitView面板，通常要使用一个汉堡按钮。汉堡按钮在应用程序
Shell中定义。这个按钮在根网格内定义为ToggleButton。其样式设置为定义外观的资源
SplitViewTogglePaneButton-Style。单击该按钮，更改绑定到SplitView控件（下面定义）的
IsChecked属性值。这个绑定打开和关闭SplitView的窗格（代码文件AppShellSample 
/
AppShell.xaml）：
汉堡按钮的外观主要使用字体Segoe MDL2 Assets的字符0xe700来定义。这个字体在
资源SymbolThemeFontFamily中引用（代码文件AppShellSample/Styles/Styles.xaml）：
  注意： 为了查看Segoe MDL2 Assets字体的所有符号及其字符号，最好使用
Character Map桌面应用程序，如图32-11所示。
图32-11
应用程序的汉堡按钮如图32-12所示。
图32-12
32.2.9 分隔视图
汉堡按钮控制SplitView控件的开启和关闭。下面进入SplitView的细节。打开窗格
时，SplitView的OpenPaneLength属性定义了面板的大小。DisplayMode属性有4种不同的模
式：Inline、Overlay、CompactInline和CompactOverlay。Inline和Overlay模式之间的区别
是，打开面板会覆盖SplitView（帧）的内容，或向右移动内容，给窗格腾出空间。紧凑
模式有较小的窗格；例如，它们只显示图标，而不显示菜单的文本。
在AppShell的XAML代码中，定义SplitView时，OpenPaneLength是256, DisplayMode
是Inline （代码文件AppShellSample / AppShell.xaml）：
为了打开和关闭SplitView的面板，可以设置IsPaneOpen属性。单击汉堡按钮时，面板
应打开和关闭，以便使用数据绑定，把汉堡按钮连接到SplitView上。IsPaneOpen属性的类
型是bool, ToggleButton的IsChecked属性是bool？类型，所以需要bool和bool？之间的转换
器（代码文件AppShellSample / Converters / BoolToNullableBoolConverter）：
    public class BoolToNullableBoolConverter : IValueConverter
    {
      public object Convert(object value, Type targetType, object parameter,
        string language) => value;
      public object ConvertBack(object value, Type targetType, object parameter,
        string language)
      {
        bool defaultValue = false;
        if (parameter ! = null)
        {
        defaultValue = (bool)parameter;
        }
        bool? val = (bool?)value;
        return val ? ? defaultValue;
      }
    }
  注意： 数据绑定参见第31章。已编译的数据绑定是UWP的一个功能，参见本
章后面的“数据绑定”一节。
BoolToNullableBoolConverter用页面的资源实例化（代码文件AppShellSample 
/
AppShell.xaml）：
使用ToggleButton，把IsChecked属性绑定到SplitView的IsPaneOpen上，并使用引用为
一个静态资源的BoolToNullableBoolConverter。
  注意： 已编译的绑定不像传统绑定那样支持元素到元素的绑定。然而，因为
SplitView指定了名称RootSplitView，所以这个变量可以直接在代码中使用，也可以在
已编译的绑定中使用。
最后，需要把一些内容添加到SplitView窗格中。
32.2.10 给SplitView窗格添加内容
SplitView的窗格现在应该列出菜单按钮，以导航到不同的页面。示例代码在ListView
控件中利用了简单的按钮控件。ListView定义了Header、Footer和Items部分。Header部分
包括一个后退按钮。此前，通过SystemNavigationManager使用系统的后退按钮。除了这个
系统后退按钮之外，还可以使用定制的按钮，如这里所示。这个按钮元素把IsEnabled属性
绑定到AppFrame.CanGoBack上，根据是否有可用的回退堆栈，来改变IsEnabled模式。
ListView的Footer定义了一个设置按钮。在ListView的项列表内，创建Home和Edit按钮，
以导航到相应的页面（代码文件AppShellSample /AppShell.xaml）：
这些按钮的符号使用Segoe MDL2 Assets的字体定义，与之前创建的汉堡按钮一样。
这些按钮需要文本和图标。这些在Grid元素中定义（代码文件AppShellSample 
/
Styles/Styles. xaml）：
通过单击Edit按钮，调用处理程序方法GoToEditPage，就使用SplitView中的Frame导
航到Edit页面（代码文件AppShellSample / AppShell.xaml.cs）：
    public void GoToEditPage()
    {
      AppFrame? .Navigate(typeof(EditPage));
    }
当单击Home按钮时，不仅应该导航进入主页，也还应该退出Frame的完整堆栈。
Frame没有提供一个直接、明确的方法，从堆栈中删除页面，但在while循环中，只要
CanGoBack返回true，就可以删除页面（代码文件AppShellSample / AppShell.xaml.cs）：
    public void GoToHomePage()
    {
      while (AppFrame? .CanGoBack ? ? false) AppFrame.GoBack();
    }
当运行应用程序时，可以看到图32-13中的SplitView面板关闭了，图32-14中的
SplitView面板打开了。
图32-13
图32-14
32.3 布局
前一节中讨论的SplitView控件是组织用户界面布局的一个重要控件。在许多新的
Windows 
10应用程序中，可以看到这种控件用于主要布局。其他几个控件也定义布局。
本节演示了Variable-SizedWrapGrid在网格中安排自动包装的多个项，RelativePanel相对于
彼此安排各项或相对于父项安排子项，自适应触发器根据窗口的大小重新排列布局。
32.3.1 VariableSizedWrapGrid
VariableSizedWrapGrid是一个包装网格，如果网格可用的大小不够大，它会自动包装
下一行或列。这个表格的第二个特征是允许项放在多行或多列中，这就是为什么它称为可
变的原因。
下面的代码片段创建一个VariableSizedWrappedGrid，其方向是Horizontal，行中最多
有20项，行和列的大小是50（代码文件LayoutSamples 
/ 
Views/
VariableSizedWrapGridSample.xaml）：
VariableSizedWrapGrid填充了30个随机大小和颜色的Rectangle和TextBlock元素。根据
大小，可以在网格内使用1到3行或列。项的大小使用附加属性
VariableSizedWrapGrid.ColumnSpan和VariableSizedWrapGrid.RowSpan设置（代码文件
LayoutSamples/Views/VariableSizedWrapGridSample. xaml.cs）：
        protected override void OnNavigatedTo(NavigationEventArgs e)
        {
          base.OnNavigatedTo(e);
          Random r = new Random();
          Grid[] items =
            Enumerable.Range(0, 30).Select(i =>
            {
            byte[] colorBytes = new byte[3];