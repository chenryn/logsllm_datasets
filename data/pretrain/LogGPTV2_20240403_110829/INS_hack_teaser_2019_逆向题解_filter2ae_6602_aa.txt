# INS hack teaser 2019 逆向题解
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
> 周末没事的时候看了下ctftime上的比赛，正好有个 Insomni’hack teaser
> 2019的比赛，于是花了点时间做了下逆向的2道题，有点意思，学到了很多知识。
## beginner_reverse
> A babyrust to become a hardcore reverser.
看题目意思很明显了，是个硬核的rust逆向题，关于rust语言，自己没有了解，Google了一下，大致是一种着重于安全开发的系统编程语言。
###  直接上手
首先用`file`命令查看下文件特性。
很庆幸，是带符号的动态编译的文件。于是暴力就完事了，直接用ida打开，如下图所示。
这里和一般的C逆向不一样的是，rust运行时环境的初始化过程。由于自己不熟悉rust语言的特性，按照惯性思维，认为start最后返回之前的函数一般为主函数，而开头的函数一般为运行时初始化函数，导致一开始函数分析错误，这也同样导致了ida的反编译F5功能失败。
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      int result; // eax
      std::rt::lang_start_internal::had9505969b8e20a2();
      return result;
    }
如果我们跟进这个`lang_start_internal`函数的话，就会发现找不到我们实际的主函数在什么地方，而一般情况下，主函数肯定是在初始化后才执行的，所以这里会卡住，迷失了方向。
###  写个demo
为了弄清rust加载运行时环境的流程，自己装上了rust的编译环境，同时写了个简单的demo进行编译测试。源代码如下：
    fn main() {
        println!("hello world");
    }
编译代码如下：
    rustc main.rs
运行结果就是输出`hello world`，但我们关心的是输出文件，为此，我使用ida载入文件并分析。可以看到，和题目类似的格式。
为了定位主函数的位置，我直接使用搜索字符串的方法，查找交叉引用。如下图所示。
然后我们可以进一步查找该处的交叉引用，就能定位到主函数的位置。
    void main::main::hfe98083a4c87500f()
    {
      char v0; // [rsp+8h] [rbp-30h]
      core::fmt::Arguments::new_v1::h9482ffdd5f1340ab(&v0, &ptrHelloworld, 1LL, off_23170, 0LL);
      std::io::stdio::_print::h46f3f0db7dd4cd21();
    }
关于这个主函数所引用的位置，我们可以看到如下所示的情况。
    lea    rdi, _ZN4main4main17hfe98083a4c87500fE ;
    mov    [rsp+8+var_8], rsi
    mov    rsi, rax
    mov    rdx, [rsp+8+var_8]
    call   _ZN3std2rt10lang_start17hd1a40614a9e43128E
也就是说在rust中，rust编译器通过使用寄存器指向主函数地址，作为函数指针，作为`lang_start_internal`函数的参数，供rust运行时来初始化程序状态。更多关于rust的主函数加载情况，参看[Rust
Runtime Services](https://github.com/rust-lang/rust/blob/3575be60ea/src/libstd/rt.rs)。
###  分析主函数
解决了这个问题，我们就能找到主函数了，下面我们就跟进`beginer_reverse::main::h80fa15281f646bc1()`这个函数（其实从名字也能看出来，上文基本解释了原因）函数首先载入了一大段密文，很容易猜测这个是密文了，或者通过交叉引用也能看出来，然后从命令行读取输入。
然后会进行很多检测，首先检测长度，再检测输入的最后一位是否正常。
之后会遍历每一个输入，然后进行检测，判断范围等等操作，然后再将每个值拷贝到栈中缓存。由于rust十分注重安全性检测，所以这里的工作有点复杂，自己是用动态调试配合硬件断点的方式直接跳过这段检查了。
比如我输入aptx4869就会变成这样，如下图所示。
在下一次断点断下的时候，我们就会看到常见的循环+相等判断，估计就是解密所在的位置了。找到伪代码对应的位置，如下图所示：
对比看汇编，此时的明文和密文分别由r14和r15寄存器的首地址所指向，我们直接查看即可。
这和我们最开始看到的数据是相匹配的，不同的是，在程序载入后，修改了最后的2个数据，所以我们直接dump下这段密文，然后根据上面所示的判断方法来计算，就能得到flag了。
    cipher = [0x0000010E, 0x00000112, 0x00000166, 0x000001C6, 0x000001CE, 0x000000EA, 0x000001FE, 0x000001E2, 0x00000156, 0x000001AE, 0x00000156, 0x000001E2, 0x000000E6, 0x000001AE, 0x000000EE, 0x00000156, 0x0000018A, 0x000000FA, 0x000001E2, 0x000001BA, 0x000001A6, 0x000000EA, 0x000001E2, 0x000000E6, 0x00000156, 0x000001E2, 0x000000E6, 0x000001F2, 0x000000E6, 0x000001E2, 0x000001E6, 0x000000E6, 0x000001e2, 0x000001de, 0x00000000, 0x00000000]
    cipher = ''.join(map(lambda x: chr((x>>2) ^ 0xa), cipher))
    print cipher
###  总结
  1. 总体来说这题不算很难，也说不上是硬核题，主要是语言不熟悉，导致了对语言的特性不清楚，在这点上浪费了很多时间。
  2. 同时由于rust语言采用大量的安全检测来保证后续的计算正常，在静态分析上出现了些麻烦，但能通过动态调试进行很好的解决。
  3. 程序不是静态链接的，分析起来有字符串可以参考，函数名也有理有据，对逆向有很多帮助，同时最后的算法也很简单，完全不需要逆向，正向计算即可。
## Junkyard
> Wall-E got stuck in a big pile of sh*t. To protect him from feeling too bad,
> its software issued an emergency lock down. Sadly, the software had a
> conscience and its curiosity caused him to take a glance at the pervasive
> filth. The filth glanced back, and then…Please free Wall-E. The software was
> invented by advanced beings, so maybe it is way over your head. Please skill
> up fast though, Wall-E cannot wait for too long. To unlock it, use the login
> `73FF9B24EF8DE48C346D93FADCEE01151B0A1644BC81” and the correct password.
第二题难度比较大，如题所述，整个题目中充斥了很多的垃圾指令，导致程序流程异常复杂，对分析产生了很多困扰。  
首先进入主函数，很明显，如果输入参数不是3个，就会调用一个函数，估计是退出，我将其命名为exit，然后对第二个参数进行判断，不满足条件又会调用exit，再对第三个参数进行判断，不满足也会调用exit。最后如果情况都满足，则在最后调用一个函数来判断，同时将2个参数传入进去，这是很明显最后的check函数，也称为主逻辑。
尝试运行程序，发现运行时间非常长，平均要好几秒才运行完毕，而且根据情况的不同会打印出不同的提示字符串。比如，如果我就输入一个参数会打印出`Usage:
./chall user pass`等等，这些情况包括：
    I don't like your name
    Is that a password?
    Maybe they're hiring at mc donald's? :/
    Computing stuff...
    Usage: ./chall user pass
根据这种情况，我猜测是程序对字符串进行了动态解密，于是先找到字符串解密的地方，就能对程序指向流程有个整体的把握。而很明显，字符串解密的地方就在exit这个函数中，因为这个函数被大量引用，且符合上文所述的参数个数不一致问题所打印的提示信息。
###  解密字符串
下面跟进exit这个函数，发现其只做了一件事，即将一些常量作为参数来调用另一个函数，我将其命名为calcMsg。
对这些字符串并不能得到很多有用的信息，于是继续跟进calcMsg这个函数，我将其中的垃圾指令擦除后，可以看的更清晰些，如下图所示。
其中能看到md5的字样，估计是调用了md5函数进行hash计算，而其中的sub296b伪代码如下：
    _BYTE *__fastcall sub_296B(const char *a1, __int64 a2, unsigned int a3, __int64 a4)
    {
      v7 = a3;
      v6 = a4;
      v10 = strlen(a1);
      v9 = 0;
      v8 = 0;
      while ( v7 > v9 )
      {
        v4 = sub_275F(*(v8 + a2));
        *(v9 + v6) = (16 * v4 + sub_275F(*(v8 + 1LL + a2))) ^ a1[v9 % v10];
        v8 += 2;
        ++v9;
      }
      result = (v9 + v6);
      *result = 0;
      return result;
    }
    __int64 __fastcall sub_275F(unsigned __int8 a1)
    {
      if ( a1 > '/' && a1 <= '9' )