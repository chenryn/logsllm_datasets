图 17.21  OllyDbg：执行两条 FLD 指令 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 17 章  FPU 
209 
接下来将要运行 FCOM 指令，如图 17.22 所示。 
图 17.22  OllyDbg：执行 FCOM 指令 
标志位寄存器都被置零。 
执行过 FNSTSW 之后，AX＝0x30000，如图 17.23 所示。 
图 17.23  OllyDbg：执行 FNSTSW 指令 
此后执行 TEST 指令，如图 17.24 所示。 
图 17.24  OllyDbg：执行 TEST 指令 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
210 
逆向工程权威指南（上册） 
在执行 TEST 置零之后，ZF＝1，不会触发条件转移指令。 
如图 17.25 所示，在执行 FSTP ST（1）的时候，FPU 栈顶的值是 5.6。 
图 17.25  OllyDbg：执行 FSTP 指令 
可见，FSTP ST(1)指令不会操作 FPU 栈顶的值，而会清空 ST(1)寄存器的值。 
GCC 4.4.1 
指令清单 17.12  GCC 4.4.1 
d_max proc near 
b      
= qword ptr -10h 
a                
= qword ptr -8 
a_first_half     = dword ptr  8 
a_second_half    = dword ptr  0Ch 
b_first_half     = dword ptr  10h 
b_second_half    = dword ptr  14h 
    push 
 ebp 
    mov   
 ebp, esp 
    sub  
 esp, 10h 
; put a and b to local stack: 
    mov   
 eax, [ebp+a_first_half] 
    mov   
 dword ptr [ebp+a], eax 
    mov     eax, [ebp+a_second_half] 
    mov     dword ptr [ebp+a+4], eax 
    mov  
 eax, [ebp+b_first_half] 
    mov   
 dword ptr [ebp+b], eax 
    mov   
 eax, [ebp+b_second_half] 
    mov   
 dword ptr [ebp+b+4], eax 
; load a and b to FPU stack: 
    fld   
 [ebp+a] 
    fld      [ebp+b] 
; current stack state: ST(0) - b; ST(1) - a 
    fxch   st(1) ; this instruction swapping ST(1) and ST(0) 
; current stack state: ST(0) - a; ST(1) – b 
    fucompp     ; compare a and b and pop two values from stack, i.e., a and b 
    fnstsw  ax ; store FPU status to AX 
    sahf        ; load SF, ZF, AF, PF, and CF flags state from AH 
    setnbe  al ; store 1 to AL if CF=0 and ZF=0 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 17 章  FPU 
211 
    test   al, al            ; AL==0 ? 
    jz 
 short loc_8048453 ; yes 
    fld 
 [ebp+a] 
    jmp   
 short locret_8048456 
loc_8048453: 
    fld  
 [ebp+b] 
locret_8048456: 
    leave 
    retn 
d_max endp 
FUCOMPP 与 FCOM 指令的功能相似。它的全称是“Floating-Point Unsigned Compare And Pop”，所以它还能
够从 FPU 栈中把两个比较的数值 POP 出来。此外，它们处理非数——“not-a-number/NaN” ①的方式也有所不同。 
FPU 能够处理特定类型的 NaN，如无限大、除以 0 的结果等。NaN 又分为 Quiet NaN 和 Signaling NaN。
对 Quiet NaN 进行操作可能不会出现问题，但是对 Signaling NaN 进行运算将会引发错误（异常处理）。 
只要在 FCOM 的操作数中有 NaN，该指令就会引发异常处理机制。而 FUCOM 仅在处理 Signaling NaN
（简称为 SNaN）时才会报错。 
下一条指令是标志位传送指令 SAHF（Store AH into Flags）。这条指令与 FPU 无关。具体来说，它把
AH 寄存器的 8 个比特位以下列顺序传递到 CPU 的 8 位标志位里： 
7 
6 
4 
2 
0 
SF 
ZF 
AF 
PF 
CF 
在前文的例子中，我们关注过 FSNSTSW 指令。它把标志位 C3/C2/C0 以下列顺序复制到 AH 寄存器的
第 6、2、0 位里： 
6 
2 
1 
0 
C3 
C2 
C1 
C0 
换而言之，成对使用 FNSTSW AX /SAHF 这两条指令，可以把 FPU 的 C3/C2/C0 标志位复制到 CPU 的
ZF/PF/CF 标志位。 
现在回忆一下 C3/C2/C0 标志位的几种情况： 
 如果 a>b，则 C3/C2/C0 依次为 0、0、0。 
 如果 ab，则 ZF＝0、PF＝0、CF＝0。 
 如果 ab 的情况下，CF 和 ZF 标志位才同时为 0 。 
这种情况下 AL 将会被赋值为 1，程序不会触发 JZ 跳转，函数返回值是_a；否则函数返回值是_b。 
Optimizing GCC 4.4.1 
经 GCC 4.4.1（启用优化选项－O3）编译上述程序，可得到如下所示的汇编指令。 
① http://en.wikipedia.org/wiki/NaN。 
② cc 即条件判断指令的通称，如 AE、BE、E 等。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
212 
逆向工程权威指南（上册） 
指令清单 17.13  Optimizing GCC 4.4.1 
public d_max 
d_max         
proc near 
arg_0            = qword ptr  8 
arg_8            = qword ptr  10h 
push    ebp 
mov     ebp, esp 
fld     [ebp+arg_0] ; _a 
fld     [ebp+arg_8] ; _b 
; stack state now: ST(0) = _b, ST(1) = _a 
fxch    st(1) 
; stack state now: ST(0) = _a, ST(1) = _b 
fucom   st(1) ; compare _a and _b 
fnstsw  ax 
sahf 
ja      short loc_8048448 
; store ST(0) to ST(0) (idle operation), pop value at top of stack,  
; leave _b at top 
fstp    st 
jmp     short loc_804844A 
loc_8048448: 
; store _a to ST(1), pop value at top of stack, leave _a at top 
fstp st(1) 
loc_804844A: 
pop     ebp 
retn 
d_max           
endp 
优化编译的效果集中体现在 SAHF 指令之后的 JA 指令上。实际上，依据无符号类型数据的比较结果进行
跳转的条件转移指令（JA/JAE, JB/ JBE, JE/JZ, JNA/ JNAE, JNB/ JNBE, JNE/JNZ），只检测 CF 和 ZF 标志位。 
在执行 FSTSW/FNSTSW 指令后，C3/C2/C0 标志位的值将传递给 AH 寄存器。AH 与 Cx 的关系是： 
6 
2 
1 
0 
C3 
C2 
C1 
C0 
在执行标志位传送指令 SAHF(Store AH into Flags)后，AH 寄存器的各比特位与 CPU 的 8 位标志位的
对应关系就变成了： 
7 
6 
4 
2 
0 
SF 
ZF 
AF 
PF 
CF 
对照上述两个图表可知在比较数值的一系列操作之后 C3 和 C0 标志位的值被传送到 ZF 和 CF 标志位，
以供后续的条件转移指令调用。如果 CF 和 ZF 都为 0，则 JA 跳转将会被触发。 
很显然，FPU 的 C3/C2/C0 状态位之所以占用寄存器的相应数权，是为了方便把 FPU 的标志位复制到
CPU 标志位上、以便进行条件判断。这多半是有意而为之。 
GCC 4.8.1 –启用优化选项-O3 
Intel P6 系列
①的 FPU 指令组新增加了一组指令。这些指令是 FUCOMI（比较操作数并设置主 CPU 的
标志位）和 FCMOVcc（相当于处理 FPU 寄存器的 CMOVcc 指令）。GCC 的维护人员采用了全新的指令集
设计 GCC，显然他们决定不再支持 P6 以前的 CPU（也就是奔腾时代以前的 CPU）。 
① Pentium Pro, Pentium-II 之后的 CPU。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 17 章  FPU 
213 
另外，自 Intel P6 系列 CPU 起，Intel CPU 都整合了 FPU。这使得 FPU 直接修改、检测 CPU 标志位成为可能。 
经 GCC 4.8.1 优化编译后，可得到如下所示的指令。 
指令清单 17.14  Optimizing GCC 4.8.1 
fld      QWORD PTR [esp+4]       ; load "a" 
fld      QWORD PTR [esp+12]      ; load "b" 
; ST0=b, ST1=a 
fxch    st(1) 
; ST0=a, ST1=b 
; compare "a" and "b" 
fucomi  st, st(1) 
; move ST1 (b here) to ST0 if ab 的情况，它将保持 ST（0）的值不变。 
最后一条 FSTP 指令将 ST(0) 寄存器中的值复制到目标操作数 ST(1)，然后弹出寄存器堆栈。为了弹出
寄存器堆栈，处理器将 ST(0) 寄存器标记为空，并调整硬件上的堆栈指针（TOP）、便之递增 1。 
使用 GDB 调试这个程序，可得到如下所示的指令。 
指令清单 17.15  Optimizing GCC 4.8.1 and GDB 
  1 dennis@ubuntuvm:~/polygon$ gcc -O3 d_max.c -o d_max -fno-inline 
  2 dennis@ubuntuvm:~/polygon$ gdb d_max 
  3 GNU gdb (GDB) 7.6.1-ubuntu 
  4 Copyright (C) 2013 Free Software Foundation, Inc. 
  5 License GPLv3+: GNU GPL version 3 or later  
  6 This is free software: you are free to change and redistribute it. 
  7 There is NO WARRANTY, to the extent permitted by law. Type "show copying" 
  8 and "show warranty" for details. 
  9 This GDB was configured as "i686-linux-gnu". 
 10 For bug reporting instructions, please see: 
 11 ... 
 12 Reading symbols from /home/dennis/polygon/d_max...(no debugging symbols found)...done. 
 13 (gdb) b d_max 
 14 Breakpoint 1 at 0x80484a0 
 15 (gdb) run 
 16 Starting program: /home/dennis/polygon/d_max 
 17 
 18 Breakpoint 1, 0x080484a0 in d_max () 
 19 (gdb) ni 
 20 0x080484a4 in d_max () 
 21 (gdb) disas $eip 
 22 Dump of assembler code for function d_max: 
 23    0x080484a0 :  
 fldl 0x4(%esp) 
 24 => 0x080484a4 :  
 fldl 0xc(%esp) 
 25    0x080484a8 :  
 fxch %st(1) 
 26    0x080484aa : 
 fucomi %st(1),%st 
 27    0x080484ac : 
 fcmovbe %st(1),%st 
 28    0x080484ae : 
 fstp %st(1) 
 29    0x080484b0 : 
 ret 
 30 End of assembler dump. 
 31 (gdb) ni 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
214 
逆向工程权威指南（上册） 
 32 0x080484a8 in d_max () 
 33 (gdb) info float 
 34   R7: Valid   0x3fff9999999999999800 +1.199999999999999956 
 35 =>R6: Valid   0x4000d999999999999800 +3.399999999999999911 
 36   R5: Empty   0x00000000000000000000 
 37   R4: Empty   0x00000000000000000000 
 38   R3: Empty   0x00000000000000000000 
 39   R2: Empty   0x00000000000000000000 
 40   R1: Empty   0x00000000000000000000 
 41   R0: Empty   0x00000000000000000000 
 42 
 43 Status Word:  
    0x3000 
 44  
      TOP: 6 
 45 Control Word: 
    0x037f IM DM ZM OM UM PM 
 46  
      PC: Extended Precision (64-bits) 
 47  
      RC: Round to nearest 
 48 Tag Word: 
    0x0fff 
 49 Instruction Pointer: 0x73:0x080484a4 
 50 Operand Pointer:      0x7b:0xbffff118 
 51 Opcode:  
    0x0000 
 52 (gdb) ni 
 53 0x080484aa in d_max () 
 54 (gdb) info float 
 55   R7: Valid   0x4000d999999999999800 +3.399999999999999911 
 56 =>R6: Valid   0x3fff9999999999999800 +1.199999999999999956 
 57   R5: Empty   0x00000000000000000000 
 58   R4: Empty   0x00000000000000000000 
 59   R3: Empty   0x00000000000000000000 
 60   R2: Empty   0x00000000000000000000 
 61   R1: Empty   0x00000000000000000000 
 62   R0: Empty   0x00000000000000000000 
 63 
 64 Status Word:  
    0x3000 
 65  
TOP: 6 
 66 Control Word:  
    0x037f IM DM ZM OM UM PM 
 67  
PC: Extended Precision (64-bits) 
 68  
RC: Round to nearest 
 69 Tag Word:  
    0x0fff 
 70 Instruction Pointer: 0x73:0x080484a8 
 71 Operand Pointer:     0x7b:0xbffff118 
 72 Opcode:  
    0x0000 
 73 (gdb) disas $eip 
 74 Dump of assembler code for function d_max: 
 75    0x080484a0 : 