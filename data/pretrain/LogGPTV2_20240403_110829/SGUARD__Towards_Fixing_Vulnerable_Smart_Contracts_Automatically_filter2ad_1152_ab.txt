Figure 2(a) shows a part of a smart contract named MasBurn
which contains a cross-function reentrancy vulnerability.
MasBurn implements a Midas protocol token, i.e., a tradable
ERC20 token. It allows token holders to burn their owned
tokens by sending tokens to a speciﬁc BURN_ADDRESS, as
shown at line 17. The total amount of burned tokens within
one week can not exceed weeklyLimit (see line 16), which
is a variable that limits the amount of tokens to be burned
weekly. However, the problem is that the returned value of
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:27:22 UTC from IEEE Xplore.  Restrictions apply. 
1216
function transferProxy(address from, address to, uint
if (balances[from] = 1; i--) {
if (burnTimestampArr[i - 1] = 1; (i = sub_uint256(i,
1))) {
if (burnTimestampArr[sub_uint256(i, 1)] <
thisWeekStartTime) break;
total = add_uint256(total, burnAmountArr[
sub_uint256(i, 1)]);
}
return total;
}
returns(uint) {
return sub_uint256(weeklyLimit,
getThisWeekBurnedAmount());
}
function burn(uint amount) external payable
nonReentrant {
require(amount <= getThisWeekBurnAmountLeft());
require(IERC20(tokenAddress).transferFrom(msg.sender,
BURN_ADDRESS, amount));
(numOfBurns = add_uint256(numOfBurns, 1));
}
(a) Before
(b) After
Fig. 2: MasBurn patched by SGUARD
Solidity (as of version 0.5.3), as summarized in Table I. Note
that each opcode is statically assigned with a unique program
counter, i.e., each opcode can be uniquely identiﬁed based on
the program counter.
Note that V ar includes stack variables, memory variables,
and storage variables. Stack variables are mostly used to store
primitive values and memory variables are used to store array-
like values (declared explicitly with keyword memory). Both
stack and memory variables are volatile, i.e., they are cleared
after each transaction. In contrast, storage variables are non-
volatile, i.e., they are persistent on the blockchain. Together,
the variables’ values identify the state of the smart contract at a
speciﬁc point of time. At the Solidity source code level, stack
and memory variables can be considered as local variables in
a speciﬁc function; and storage variables can be considered as
contract-level variables.
A concrete trace of the smart contract is an alternating
sequence of states and opcodes (cid:104)s0, op0, s1, op1,···(cid:105) such that
each state si is of the form (pci, Si, Mi, Ri) where pci ∈ N is
the program counter; Si is the valuation of the stack variables;
Mi is the valuation of the memory variables; and Ri is the
valuation of the storage variables. Note that the initial state
s0 is (0, S0, M0, R0) where S0, M0 and R0 are the initial
valuation of the variables deﬁned by init. Furthermore, for all
i, (pci+1, Si+1, Mi+1, Ri+1) is the result of executing opcode
opi given the state (pci, Si, Mi, Ri) according to the semantic
of opi. The semantics of opcodes are shown in Figure 3 in
form of execution rules, each of which is associated with a
speciﬁc opcode. Each rule is composed of multiple conditions
above the line and a state change below the line. The state
change is read from left to right, i.e., the state on the left
changes to the state on the right if the conditions above the
line are satisﬁed. Note that this formal semantics is based on
Rule
STOP
POP
UNARY-op
BINARY-op
TERNARY-op
MLOAD
SHA3
MSTORE
SLOAD
SSTORE
DUP-I
SWAP-I
JUMPI-T/JUMPI-F
JUMP
CALL
Opcodes
SELFDESTRUCT, REVERT, INVALID, RETURN, STOP
POP
NOT, ISZERO, CALLDATALOAD, EXTCODESIZE,
BLOCKHASH, BALANCE, EXTCODEHASH
ADD, MUL, SUB, DIV, SDIV, MOD, SMOD, EXP,
SIGNEXTEND, LT, GT, SLT, SGT, EQ, AND, OR, XOR,
BYTE, SHL, SHR, SAR
ADDMOD, MULMOD, CALLDATACOPY, CODECOPY,
RETURNDATACOPY
MLOAD
SHA3
MSTORE, MSTORE8
SLOAD
SSTORE
DUP1· · · DUP16
SWAP1· · · SWAP16
JUMPI
JUMP
STATICCALL, CALL, CALLCODE, CREATE, CREATE2,
DELEGATECALL, SELFDESTRUCT
TABLE I: The opcodes according to each rule
the recent effort on formalizing Etherum [12].
Most of the rules are self-explanatory and thus we skip the
details and refer the readers to [12]. It is worth mentioning
how external calls are abstracted in our semantic model. Given
an external function call (i.e., opcode CALL), the execution
temporarily switches to an execution of the invoked contract.
The result of the external call, abstracted as res, is pushed to
the stack.
B. Symbolic Semantics
In order to deﬁne our problem, we must deﬁne the kinds
of vulnerabilities that we focus on. Intuitively, we say that
a smart contract suffers from certain vulnerability if there
exists an execution of the smart contract that satisﬁes certain
constraints. In the following, we extend the concrete traces to
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:27:22 UTC from IEEE Xplore.  Restrictions apply. 
1218
(pc, S, M, R) (cid:32) (cid:3) STOP