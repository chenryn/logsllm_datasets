# Computationally Sound Mechanized Proofs for Basic and Public-key Kerberos

## Authors
- Bruno Blanchet, CNRS & École Normale Supérieure & INRIA (Email: [PI:EMAIL])
- Aaron D. Jaggard, DIMACS, Rutgers University (Email: [PI:EMAIL])
- Andre Scedrov, Department of Mathematics, University of Pennsylvania (Email: [PI:EMAIL])
- Joe-Kai Tsay, Department of Mathematics, University of Pennsylvania (Email: [PI:EMAIL])

## Abstract
This paper presents a computationally sound mechanized analysis of Kerberos 5, both with and without its public-key extension PKINIT. We prove authentication and key secrecy properties using the prover CryptoVerif, which operates directly in the computational model. These are the first mechanical proofs of a full industrial protocol at the computational level. Additionally, we generalize the notion of key usability and use CryptoVerif to prove that this definition is satisfied by keys in Kerberos.

## Categories and Subject Descriptors
- C.2.2 [Computer-Communication Networks]: Network Protocols—Protocol verification
- D.2.4 [Software Engineering]: Software/Program Verification—Formal methods
- F.3.1 [Logics and Meanings of Programs]: Specifying and Verifying and Reasoning about Programs—Mechanical verification

## Acknowledgments
- This research was conducted within the INRIA ABSTRACTION project-team (in collaboration with the CNRS and the ÉNS) and was partially supported by the ANR project ARA SSIA FormaCrypt.
- Partial support from NSF Grants DMS-0239996, CNS-0429689, and CNS-0753492, and ONR Grant N00014-05-1-0818. The work was initiated while Jaggard was in the Mathematics Department at Tulane University.
- Additional support from OSD/ONR CIP/SW URI projects through ONR Grants N00014-01-1-0795 and N00014-04-1-0725, NSF Grants CNS-0429689 and CNS-0524059, and ONR Grant N00014-07-1-1039.
- Partial support from ONR Grants N00014-01-1-0795 and N00014-07-1-1039, and NSF Grant CNS-0429689.

## General Terms
- Security, Verification

## Keywords
- Kerberos, PKINIT, automatic verification, computational model, key usability

## 1. Introduction
There are two main approaches to verifying cryptographic protocols: the cryptographic (or computational) model and the symbolic (or Dolev-Yao) model. The cryptographic model, based on probability and complexity theory, views messages as bitstrings and encryption/decryption as probabilistic algorithms. It provides strong security guarantees by verifying properties against any probabilistic Turing machine attacking the protocol. The symbolic model, an idealization of the cryptographic model, uses an algebra of terms to abstract messages and encryption algorithms. This model has been effective in uncovering design flaws in security protocols and is efficient enough for analyzing large commercial protocols.

Despite the robustness of the symbolic model, manual proofs in the detailed computational model are error-prone and time-consuming. Therefore, efforts have been made to develop mechanized or fully automated provers. Some of these tools work in the symbolic model, facilitating the use of existing theorem provers and model checkers. However, recent work has focused on bridging the gap between the symbolic and computational models, allowing proofs in the symbolic model to be lifted to the computational model under certain conditions. 

In this paper, we report on the formalization and analysis of the Kerberos 5 protocol, with and without its public-key extension PKINIT, using the prover CryptoVerif. Unlike other tools, CryptoVerif can verify protocols directly in the computational model. Previously, CryptoVerif has only been used to analyze academic protocols, making this work a significant test case for its applicability to real-world protocols. Kerberos and PKINIT provide a good test case due to their complex design elements, including symmetric and asymmetric encryption, digital signatures, and keyed hash functions.

Using CryptoVerif's interactive mode, we prove authentication and secrecy properties for Kerberos at the computational level. This suggests that CryptoVerif is capable of analyzing large-scale industrial protocols. Our work extends earlier analyses of Kerberos, including the discovery of a flaw in a draft version of PKINIT and the symbolic proof that the fixed version was secure. We also introduce a stronger notion of key usability and use CryptoVerif to prove that certain keys in Kerberos satisfy this property.

## 2. Kerberos and Its Properties
### 2.1 Basic Kerberos
Kerberos is designed to allow a client to repeatedly authenticate herself to multiple network servers based on a single login. The authentication process can also produce a shared key between the client and end server for future communications. Typically, the user provides a password at the initial login, and a key derived from this password is used in the first round of Kerberos. The credential (or 'ticket') obtained in this round is then used to obtain other credentials, so the password-derived key is not reused.

Figure 1 shows the message flow in basic Kerberos. In the first round, the client generates a fresh nonce \( n_1 \) and sends it to the Kerberos Authentication Server (KAS) to request a Ticket Granting Ticket (TGT) for use with the Ticket Granting Server (TGS) named T. The KAS generates a fresh key \( AK \) for use between the client and T, along with a timestamp \( t_K \), and sends this key to the client. One copy of \( AK \) is encrypted under the client's long-term key \( k_C \) (typically derived from a password), while another is included in the TGT, which is encrypted with a long-term key \( k_T \) shared between the KAS and T.

The client then forwards the TGT to T, along with an authenticator encrypted under \( AK \), a fresh nonce \( n_3 \), and the name S of an end server, to request a Service Ticket (ST) for S. T generates a fresh key \( SK \) for use between the client and S, along with a timestamp \( t_T \), and sends this to the client. One copy of \( SK \) is encrypted under \( AK \), and another is included in the ST, which is encrypted under a long-term key \( k_S \) shared between T and S. The TG exchange can be repeated multiple times to obtain STs for any number of end servers, as long as the TGT is valid.

The last two messages in Figure 1 form the Client/Server (CS) exchange. In this round, the client forwards the ST to S along with an authenticator: the client's name and a timestamp \( t'_C \).

[Figure 1: Message flow in basic Kerberos, where \( T_{GT} = \{AK, t_K, C\}_{k_T} \) and \( S_T = \{SK, t_T, C\}_{k_S} \)]

This overview reflects the level of abstraction used in our CryptoVerif scripts and is consistent with the level of detail used in other analyses of Kerberos. Further low-level details are described in the protocol specifications [23, 34].