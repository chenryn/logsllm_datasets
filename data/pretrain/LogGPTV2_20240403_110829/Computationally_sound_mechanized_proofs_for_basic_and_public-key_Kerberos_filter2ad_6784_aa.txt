title:Computationally sound mechanized proofs for basic and public-key Kerberos
author:Bruno Blanchet and
Aaron D. Jaggard and
Andre Scedrov and
Joe-Kai Tsay
Computationally Sound Mechanized Proofs for Basic and
Public-key Kerberos
‚àó
B. Blanchet
CNRS & √âcole Normale
Sup√©rieure & INRIA
PI:EMAIL
‚Ä†
A.D. Jaggard
DIMACS
Rutgers University
PI:EMAIL
‚Ä°
A. Scedrov
Department of Mathematics
University of Pennsylvania
PI:EMAIL
J.-K. TsayŒ£
Department of Mathematics
University of Pennsylvania
PI:EMAIL
ABSTRACT
We present a computationally sound mechanized analysis of
Kerberos 5, both with and without its public-key extension
PKINIT. We prove authentication and key secrecy proper-
ties using the prover CryptoVerif, which works directly in the
computational model; these are the Ô¨Årst mechanical proofs
of a full industrial protocol at the computational level. We
also generalize the notion of key usability and use Cryp-
toVerif to prove that this deÔ¨Ånition is satisÔ¨Åed by keys in
Kerberos.
Categories and Subject Descriptors
C.2.2 [Computer-Communication Networks]: Network
Protocols‚ÄîProtocol veriÔ¨Åcation; D.2.4 [Software Engi-
neering]: Software/Program VeriÔ¨Åcation‚ÄîFormal meth-
ods; F.3.1 [Logics and Meanings of Programs]: Spec-
ifying and Verifying and Reasoning about Programs‚ÄîMe-
chanical veriÔ¨Åcation
‚àóThis research has been done within the INRIA ABSTRAC-
TION project-team (common with the CNRS and the ¬¥ENS)
and was partly supported by the ANR project ARA SSIA
FormaCrypt.
‚Ä†Partially supported by NSF Grants DMS-0239996, CNS-
0429689, and CNS-0753492, and by ONR Grant N00014-
05-1-0818; this work was started while Jaggard was in the
Mathematics Department at Tulane University.
‚Ä°Partially supported by OSD/ONR CIP/SW URI projects
through ONR Grants N00014-01-1-0795 and N00014-04-1-
0725. Additional support from NSF Grants CNS-0429689
and CNS-0524059 and from ONR Grant N00014-07-1-1039.
Œ£Partially supported by ONR Grants N00014-01-1-0795 and
N00014-07-1-1039, and by NSF Grant CNS-0429689.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proÔ¨Åt or commercial advantage and that copies
bear this notice and the full citation on the Ô¨Årst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciÔ¨Åc
permission and/or a fee.
ASIACCS ‚Äô08, March 18-20, Tokyo, Japan
Copyright 2008 ACM 978-1-59593-979-1/08/0003 ...$5.00.
General Terms
Security, VeriÔ¨Åcation
Keywords
Kerberos, PKINIT, automatic veriÔ¨Åcation, computational
model, key usability
1.
INTRODUCTION
There are two main approaches to the veriÔ¨Åcation of cryp-
tographic protocols. One approach, known as the cryp-
tographic or computational model, is based on probability
and complexity theory and retains the view of messages as
bitstrings and encryption/decryption as probabilistic algo-
rithms. Security properties proved in this model give strong
security guarantees, since properties are veriÔ¨Åed against any
probabilistic Turing machine attacking the protocol. An-
other approach, known as the symbolic or Dolev-Yao model,
can be viewed as an idealization of the former approach for-
mulated using an algebra of terms. Messages are abstracted
as terms in this algebra and, e.g., encryption algorithms
are simply function symbols on these terms. This symbolic
model has been successfully applied to uncover problems
in the design of security protocols [19, 28, 29, 33]. More-
over, veriÔ¨Åcation methods based on the symbolic model have
become eÔ¨Écient and robust enough to be deployed for the
analysis of even large commercial protocols [4, 17, 22, 29,
33]. Because by-hand proofs in the detailed computational
model are prone to human error and are, even in the sym-
bolic model, very time consuming for complex protocols,
eÔ¨Äort has been put into developing mechanized or fully au-
tomated provers. One area of focus has been provers that
work in the symbolic model, which facilitates the use of ex-
isting theorem provers and model checkers, and some of the
resulting tools have been used to analyze commercial pro-
tocols [3, 6, 12, 30]. Since the pioneering work by Abadi
and Rogaway [1], attention has also been paid [5, 18, 21]
to bridging the gap between the symbolic and the computa-
tional models; in these frameworks proofs are carried out in
a symbolic model, facilitating automation, and the results
can be lifted to the computational model under certain con-
ditions. However, provers based on computationally sound
symbolic frameworks (e.g., [20, 38]) are currently at most
87
able to cope with academic protocols.
Here we report results on the formalization and analy-
sis of the Kerberos 5 protocol [34], with and without its
public-key extension PKINIT [23], using the prover Cryp-
toVerif [13, 14, 15]. Unlike the previously mentioned tools,
CryptoVerif can verify protocols directly in the computa-
tional model. We note that CryptoVerif is diÔ¨Äerent from
ProVerif [12], a well-established tool which veriÔ¨Åes proto-
cols in the symbolic model; CryptoVerif is a next-generation
prover. CryptoVerif proofs are presented as sequences of
games in a probabilistic process calculus inspired by [25,
26, 27, 32]. Previously, CryptoVerif has only been used to
analyze academic protocols [13, 14], so this work provides
a test case for the suitability of CryptoVerif for analyzing
real-world protocols. Kerberos and its public-key extension
PKINIT (used in ‚Äòpublic-key mode‚Äô as discussed below) pro-
vide a particularly good test case because they incorporate
many diÔ¨Äerent design elements: symmetric and asymmet-
ric encryption, digital signatures, and keyed hash functions.
Using CryptoVerif‚Äôs interactive mode, we are able to prove
authentication and secrecy properties for Kerberos at the
computational level. This suggests that CryptoVerif is ca-
pable of analyzing large-scale industrial protocols.
Earlier work on analyzing Kerberos includes: analysis
of Kerberos 4 (the previous version of Kerberos, which
lacked the complexity of Kerberos 5 with PKINIT) using
Isabelle [7]; symbolic proofs by hand of authentication and
secrecy in basic Kerberos [17]; the discovery of a Ô¨Çaw in a
draft version of PKINIT (which led to a Windows Security
Bulletin [31]) and the symbolic proof that the Ô¨Åxed version
was secure; by-hand computational proofs of the security
of Kerberos using the Backes‚ÄìPÔ¨Åtzmann‚ÄìWaidner (BPW)
cryptographic library framework [4]; and the mechanical
analysis of the PKINIT fragment (without consideration of
the later rounds or basic Kerberos without PKINIT) [24].
Our work here extends these earlier analyses of Kerberos to
use a mechanized tool on the full Kerberos protocol, with
and without its public-key extension PKINIT; this repre-
sents the Ô¨Årst computationally sound mechanized proof of a
full industrial protocol.
In proving conÔ¨Ådentiality properties for Kerberos, we con-
sider not only key indistinguishability but also the notion
of key usability introduced in [21] (and which was proved
by hand for Kerberos in [36]). This weaker conÔ¨Ådentiality
property ensures that a key is still ‚Äògood‚Äô for use in crypto-
graphic operations, even though it might be distinguishable
from a random bitstring. This type of property is impor-
tant for protocols that, like Kerberos, perform operations
with a key during a protocol run but then allow for the fu-
ture use of this key; because the key has been used, it may
be distinguishable from random, but that still may not help
an attacker learn any information about messages that are
later encrypted under that key. Here we deÔ¨Åne a notion of
strong key usability that is less restrictive on the adversary‚Äôs
power than the original deÔ¨Ånition, and we use CryptoVerif
to prove that certain keys in Kerberos satisfy this stronger
version of key usability.
Using CryptoVerif we are able to prove authentication
properties for Kerberos similar to those previously proved
in [4]. However, in contrast to proofs in the BPW model, our
proofs using CryptoVerif do currently not allow for adaptive
corruption; the set of honest protocol participants is deter-
mined beforehand and cannot be reduced during the run of
C
KAS
TGS (T )
S
C, T, n1
‚Ä¢
‚Ä¢-
‚Ä¢  C,,{AK, n1, tK , T}kC
C, T GT,{AK, n1, tK , T}kC
AK
tK
‚Ä¢?
.
.
.
.
‚Ä¢
n1
n3tC
t(cid:48)
C
T GT,{C, tC}AK , S, n3
C,,{SK, n3, tT , S}AK
 C, ST,{SK, n3, tT , S}AK
‚Ä¢ 
.
.
.
.
‚Ä¢
ST,{C, t(cid:48)
C}SK
‚Ä¢ 
{t(cid:48)
C}SK
‚Ä¢-
SK
tT
‚Ä¢?
‚Ä¢-
‚Ä¢?
Figure 1: Message Ô¨Çow in basic Kerberos, where
T GT = {AK, tK , C}kT and ST = {SK, tT , C}kS
the polynomially many protocol sessions.
In Section 2 we review basic and public-key Kerberos 5.
Section 3 brieÔ¨Çy explains the syntax and semantics of Cryp-
toVerif,
including a sample of our formalization of Ker-
beros, and outlines the authentication and secrecy proper-
ties proved by CryptoVerif. Section 4 presents the details of
these results and other aspects of our work, while Section 5
provides a summary and surveys areas for future work.
2. KERBEROS AND ITS PROPERTIES
We start with an overview of Kerberos and its public-
key extension before discussing (at an informal level) the
security properties that we study here. Our description of
the protocol here reÔ¨Çects the level of abstraction that we
use in our CryptoVerif scripts and which is the level of ab-
straction that has been used to analyze Kerberos in other
frameworks; additional low-level details are described in the
protocol speciÔ¨Åcations [23, 34].
2.1 Basic Kerberos
Kerberos [34] is designed to allow a client to repeatedly
authenticate herself to multiple network servers based on a
single login. This authentication process can also be used
to produce a key shared between the client and end server
that can be used for future communications between them.
Typically, the human user provides a password at the ini-
tial login and a key derived from this password is used in
the Ô¨Årst round of Kerberos. The credential (or ‚Äòticket‚Äô) that
the client process obtains in this round is then used to ob-
tain other credentials so that the password-derived key is
not used again. The client uses this Ô¨Årst credential, which
might be valid for a single day, to obtain a credential for a
particular end server; this second credential might be valid
for a few minutes. Finally, the client presents this credential
to the end server. Each credential may be used repeatedly
as long as it is valid; once the user enters her password, the
rest of the protocol can take place in the background.
Figure 1 shows a more detailed view of the message Ô¨Çow
in basic Kerberos. The Ô¨Årst round, called the Authentica-
tion Service (AS) exchange, comprises the Ô¨Årst two lines of
this Ô¨Ågure.
In it, the client C generates a fresh nonce n1
88
and includes it in a message to the Kerberos Authentication
Server (KAS) requesting a Ticket Granting Ticket (TGT)
for use with the Ticket Granting Server (TGS) named T .
The KAS generates a fresh key AK for use between C and
T (as well as a timestamp tK ) and sends this key to C. One
copy of AK is encrypted under C‚Äôs long-term key kC (typ-
ically derived from a password), while another is included
in the TGT, which is encrypted with a long-term key kT
shared between the KAS and T .
The client then forwards the TGT to T ‚Äîalong with an
authenticator encrypted under AK , a fresh nonce n3, and
the name S of an end server‚Äîto request a Service Ticket
(ST) for S. This message, and the reply from T , form the
Ticket Granting (TG) exchange. T generates a fresh key SK
for use between C and S (as well as a timestamp tT ) and
sends this to C. One copy of SK is now encrypted under
AK and another is included in the ST, which is encrypted
under a long-term key kS shared between T and S. The TG
exchange may be repeated multiple times‚Äîto obtain STs
for any number of end servers‚Äîwith a single TGT as long
as that ticket is valid.
The last two messages shown in Figure 1 form the
Client/Server (CS) exchange.
In this round of the proto-
col, C forwards the ST to S along with an authenticator:
C‚Äôs name and a timestamp t(cid:48)