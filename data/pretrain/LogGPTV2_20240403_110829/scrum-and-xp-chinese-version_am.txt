14 
我们怎样做测试
这是最困难的部分。我不知道它到底是只是 Scrum 中最困难的部 分，还是在软件开发中通常都是最困难的部分。
在不同组织的各种开发活动中，测试可能是差异最大的。它依赖于 你有多少个测试人员、系统类型（只是服务器+web 应用，还是交 付完整的软件？）、发布周期的长短、软件的重要性（博客服务器 vs.飞行控制系统），等等。
我们曾经尝试过多种在 Scrum 中做测试的方式。下面我会尽力描述 一下我们的做法，以及到目前为止掌握的经验。
你大概没法取消验收测试阶段
在理想化的 Scrum 世界中，每个 sprint 最终会产生一个可部署的系 统版本。那赶紧部署就好了，是么？
不是。
我们怎样做测试| 91不是。
我们怎样做测试| 91 
根据我们的经验，这样做一般都是不成的。很恶心的 bug 会因此出 现。如果质量对你来说还算重要，你就应该进行验收测试。此时，团队之外的专职测试人员会用测试来攻击系统，而且这些测试是 Scrum 团队要么考虑不到，要么没有时间完成，或是限于硬件条件 无法完成的。测试人员会采取与终端用户一模一样的方式来操作系 统，也就是说他们必须要手工进行测试（假设你的系统用户是人）。
测试团队会发现 bug，Scrum 团队就得发布针对 bug 修复的版本，或早或晚（希望更早一些）你就要为终端用户发布修复了 bug 的 1.0.1 版本，而不是问题重重的 1.0.0 版本。
我说的“验收测试阶段”，是指整个测试、调试、重新发布阶段，直到得到可以用来做产品发布的版本为止。
把验收测试阶段缩到最短把验收测试阶段缩到最短
验收测试阶段会让人受不了。那的确让人觉得不太敏捷。虽然我们 不能逃避这个阶段，但可以想办法尽量缩短时间。说得更明白一些，把需要花在验收测试阶段上的时间减到最少。我们的做法是：		全力提高 Scrum 团队交付的代码质量。
		全力提高人工测试工作的效率（即，找到最好的测试人员；	给他们最好的工具；确保他们上报那些耗费时间、却能够 	被自动化完成的工作）
那我们该怎么提高 Scrum 团队提交的代码质量呢？嗯，办法还是很 多的。我们发现下面这两种办法效果很好：
 把测试人员放到 Scrum 团队中 每个 sprint 少做点工作
92 | 硝烟中的 SCRUM 和 XP
把测试人员放到 Scrum 团队来提高质量
是的，我听到过对立的意见：
•
• “很明显啊！Scrum 团队应该是跨职能的！”
“Scrum 团队应该是没角色的！我们不能把只做测试的人“Scrum 团队应该是没角色的！我们不能把只做测试的人
放到里面来！”
让我澄清一下。这里我说的“测试人员”指的是“主要技能是测试 的人”，而不是“只做测试的人”。
开发人员常常都是很差劲的测试人员。尤其是他们测试自己代码的 时候。
测试人员就是“验收的家伙”
除了“只是”个团队成员以外，测试人员还有个重要的工作要做。他负责验收。Sprint 中的任何工作，如果他不说完成，那就不能算 完成。我发现开发人员常常说一些工作已经完成了，但事实并非如 此。即使你有一个很明确的对“完成”的定义（你确实应该如此，参见“定义‘完成’”），开发人员也会经常忘掉。我们这些编程 的人都不怎么有耐心，一心想着尽快去做下一个条目。
那么我们的测试先生怎么知道某些事情已经完成呢？嗯，首先，他 应该测试它！（吃惊吧？）我们经常都会发现：开发人员认为“完 成”的工作，却根本无法测试！原因包括代码没有提交，或者还没 有部署到测试服务器上，等等。一旦测试先生开始测试这个特性，他就应该跟开发人员一起浏览一遍“完成”检查列表（如果你有的 话）。例如，如果在“完成”的定义中写着一定要有版本说明，那我们怎样做测试| 93 
测试先生就要去检查是不是有版本说明。如果对这个特性有比较正 式的规范说明（我们这里很少有这种情况），测试先生就要据此进 行检查。等等不一而足。
妙处由此而生：
这下团队中就有了这样一个人，可以完美地担当组织 sprint 演示的 职责。
如果没有任何事情需要测试，那测试人员该做什么？
这个问题会常常出现。测试先生会说：“嘿，Scrum master，目前 没有什么东西需要测试了，那我该做什么呢？”也许团队需要一个 星期才能完成第一个故事，那这段时候测试人员该做什么呢？
嗯，首先，他应该要为测试做准备。包括编写测试规范，准备测试 环境等等。开发人员有开发完的功能可供测试以后，就不用再等了，测试先生可以立刻开始测试。
如果团队在做 TDD，从第一天开始，大家都会花时间来编写测试 代码，此时测试人员应该跟编写测试代码的开发人员一起结对编 程。如果测试人员根本不会编程，他也应该跟开发人员结对，即便 他只能坐在一边看，让开发人员敲键盘。相对于好的开发人员，好 的测试人员常常能想出多种不同类型的测试，所以他们可以互补。如果团队没有实施 TDD，或者没有足够的测试用例需要编写，那 测试人员可以去随意做一些能够帮助团队达成 sprint 目标的事情。就像其他团队成员一样。如果测试人员会编程，那自然再好不过。如果他不会，你的团队就得找出在 sprint 中需要完成的、而且不用 编程的工作。
在 sprint 计划会议中，进行到拆分故事阶段，团队会把注意力放在 编程性任务上，但一般在 sprint 中都会有很多非编程性任务需要完 成。如果在 sprint 计划阶段花上一些时间来找出非编程性任务，测 试先生就有机会来做出大量贡献，即使他不会编程，当前也没有测 试工作要做。
94 | 硝烟中的 SCRUM 和 XP
下面是在 sprint 中需要完成的非编程性任务的例子：		搭建测试环境。
	明确需求。
	与运营部门讨论部署的操作细节。
编写部署文档（版本说明，RFC，或任何在你们组织中要
写的东西）。编写部署文档（版本说明，RFC，或任何在你们组织中要
写的东西）。
	和外界的资源进行联系（例如 GUI 设计师）。
	改进构建脚本。
	将故事进一步拆分成任务。
	标识出来自开发人员的核心问题，并帮助解决这些问题。
从另一个角度来看，如果测试先生成了瓶颈，那我们该怎么办？假 设在 sprint 的最后一天突然完成了很多工作，测试先生根本没有时 间测试完所有的事情。我们怎么办？不妨把团队中的所有人都分配 给测试先生当助手。他决定哪些事情自己来做，把一些烦人的测试 交给团队中的其他人来做。这就是跨职能团队该做的事情！
所以没错，测试先生确实在团队中有一个特定的角色，不过他仍然 可以做其他工作，其他的团队成员也可以做他的工作。
在每个 sprint 中少做工作来提高质量在每个 sprint 中少做工作来提高质量 
回到 sprint 计划会议上。简单来说，就是别把太多故事都放到 sprint 里面去！如果碰到了质量问题，或者验收测试周期太长，干脆就每 个 sprint 少干点！这会自动带来质量提升、验收测试周期缩短、影 响终端用户的 bug 减少，并在短期内得到更高的生产力，因为团队 可以始终关注于新的东西，而不是不断修复出现问题的旧功能。
相对于构建大量功能，然后不得不在惊慌失措的状态下做热修复来 说，少构建一些功能，但是把它弄得稳定点儿，这样做要合算得多。
验收测试应该作为 sprint 的一部分么？
我们在这里分歧较大。有些团队把验收测试当成了 sprint 的一部分。
但大部分团队都没这样做。原因主要有两点：
我们怎样做测试| 95但大部分团队都没这样做。原因主要有两点：
我们怎样做测试| 95 
	Sprint 是有时间盒限制的。验收测试（在我的定义中，它要 	包括调试和再次发布）的时间却很难固定。如果时间用完 	了，你还有一个严重的 bug 怎么办？是要带着这个严重 bug 	交付上线，还是等到下个 sprint 再说？大多数情况下，这 	两种解决方案都是不可接受的。所以我们把人工验收测试 	排除在外。
如果有多个团队开发同一个产品，那就得等所有团队的工
作成果合并以后，再进行人工验收测试。如果每个团队都 在 sprint 中进行人工验收测试，最后还是要有一个团队测 试最终版本，而且这个版本集成了全部团队的工作。
这个解决方案不算完美，但对我们来说，已经可以满足大多数情况 的需要了。
Sprint 周期 vs. 验收测试周期 在完美的 Scrum 世界中，你根本不需要验收测试阶段，因为每个 Scrum 团队在每个 sprint 结束以后，都会发布一个新的可供产品化 的版本。96 | 硝烟中的 SCRUM 和 XP
不过，下面这张图就更符合实际情况了：
在 sprint 1 之后，我们得到了满是 bug 的 1.0.0 版本。在 sprint 2 中，bug 报告开始涌入，团队花了大部分的时间来进行调试，然后又被 迫在 sprint 的中期发布了修复了 bug 的 1.0.1 版本。到了 sprint 2 末 尾，他们发布了 1.1.0 版本，提供了一些新特性，但 bug 数量有增 无减，因为他们从上一个版本发布以后就一直被 bug 所干扰，所以
能够用来保证代码质量的时间就更少。然后就一直这样循环下
去……
在 sprint 2 中的红色斜线表示出了混乱的存在。
我们怎样做测试| 97 
不怎么好看是吧？但令人悲哀的是，即使你有验收测试团队，这些 问题仍会存在。唯一的区别是，在后者中，大多数 bug 报告会来自 于测试团队，而非怒气冲冲的用户。从商业视角来看，二者之间有 着很大差别，但对开发人员而言却几乎没什么两样。不过测试人员 通常都没有用户那么强势。一般如此。我们目前还没有发现这个问题的解决方案。不过还是尝试过许多不 同的模型。
首先，还是全力提高 Scrum 团队发布的代码质量。在一个 sprint 中 及早发现并修复 bug，要比 sprint 结束以后再这样做的代价小得多。
但事实还是事实，就算是我们可以把 bug 数量减少到最小，在 sprint 结束后还是有 bug 报告出来。那我们是怎么做的呢？
方式 1：“在旧版本可以产品化之前，不构建新特性”听起来挺不错的，不是吗？你是否也有这种温暖舒适的感觉？
我们曾几度差点采用这种方式，而且还画出了想象中如何进行实施 的模型。但是意识到它的负面影响后，我们就改变了主意。如果这
98 | 硝烟中的 SCRUM 和 XP
样做的话，我们就得在 sprint 之间添加一个无时间限制的发布阶段，
而且在这个时期内只能进行测试和调试，直到可以做出产品发布来
为止。而且在这个时期内只能进行测试和调试，直到可以做出产品发布来
为止。
我们不喜欢在 sprints 之间加上无时限的发布阶段，主要是因为它 可能会破坏 sprint 的节奏。我们再也无法说出“每三周启动一个新 的 sprint”这样的话来。另外，它也没法根除问题。即使有一个发 布阶段，依然会不时出现紧急的 bug 报告，我们不得不为它们做好
准备。
方式 2：“可以开始构建新东西，但是要给‘将旧功能产
品化’分配高优先级”
这是我们最喜欢的方式。至少现在如此。
一般我们完成一个 sprint 以后就会开始进行下一个。但是我们会在 接下来的 sprint 中花一些时间解决过往 sprint 中留下的 bug。如果 修复 bug 占用了太多时间，从而导致接下来的 sprint 遭到严重破坏，
我们就会分析问题产生的原因以及如何提高质量。我们会确保
sprint 的长度，使之足以完成对上个 sprint 中一定数量 bug 的修复。随着时间推移，经过几个月以后，修复上个 sprint 遗留 bug 所用的 时间就会减少。而且当 bug 发生以后，所牵扯的人也更少了，所以
不会总是干扰整个团队。现在这种做法已经得到了更多人的认可。
我们怎样做测试| 99 
在 sprint 计划会议上，考虑到会花时间修复上个 sprint 的 bug，所 以我们会把投入程度设得足够低。经过一段时间，团队在估算方面 已经做得很到位了。生产率度量也起到了很大帮助作用（参见 24 页，“团队如何决定哪些故事放到 sprint 中？”）。
糟糕的方式——“只关注构建新东西”