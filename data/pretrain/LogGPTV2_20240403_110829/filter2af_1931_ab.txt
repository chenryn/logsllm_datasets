= 消耗的Gas数量 x Gas的价格`
    Gas机制降低了以太坊的恶意情况产生，不过仍然还是会存在恶意攻击绕过了gas机制并带来了严重后果的情况。之后我会针对激励层机制来分析相关恶意事件，下面就先简单的介绍下区块链中的Race-to-empty攻击类型
### 五、Race-To-Empty攻击
对于Race-To-Empty攻击，我们从字面简单分析。  
race简单来看是一种`快速的动作`，而 to
empty意思是`导致为空`。而我对这种攻击的理解是——用一种攻击方法，通过多次快速的调用某个代码致使被攻击者的账户中有用资产为空的情况。
这里我们简单的引出相关攻击手法。我们引用一个简单的例子来说明。（尽量简洁易理解）
    function getBalance(address user) constant returns(uint) {
      return userBalances[user];
    }
    function addToBalance() {
      userBalances[msg.sender] += msg.amount;
    }
    function withdrawBalance() {
      amountToWithdraw = userBalances[msg.sender];
      if (!(msg.sender.call.value(amountToWithdraw)())) { throw; }
      userBalances[msg.sender] = 0;
    }
我们可以暂时规定`msg.sender.call.value()`函数被调用的时候，系统会默认执行一个默认函数Function。我们将其定义如下：
    function () {
      vulnerableContract v;
      uint times;
      if (times == 0 && attackModeIsOn) {
        times = 1;
        v.withdraw();
       } else { times = 0; }
    }
由上面的内容我们可以有所发现，当`withdrawBalance
()`方法被执行的时候，我们里面会执行`msg.sender.call.value(amountToWithdraw)())`，此时我们会默认执行`function
()`方法。加入我们function方法中定义了withdraw()方法（即我进行了回调）。此时就类似于 **递归** 的感觉了，这也是攻击成功的原因之一。
函数入栈情况如下：
    withdraw run 1st
          attacker function run 1st
            withdraw run 2rd
              attacker function run 2rd
                  .........（后面会无限执行这两个方法，这也就是为什么叫race的原因）
大家了解了这个攻击手段后，我会在之后的文章中介绍有关此攻击的具体例子。
在此，感谢参考文献[race-to-empty](https://vessenes.com/more-ethereum-attacks-race-to-empty-is-the-real-deal/)
### 六、参考链接
  * 1 
  * 2 
  * 3 
  * 4 
**本稿为原创稿件，转载请标明出处。谢谢。**