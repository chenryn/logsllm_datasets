a
u
q
E
e
t
a
R
r
o
r
r
l
E
−
a
u
q
E
0
2
.
0
8
1
.
0
6
1
.
0
4
1
.
0
2
1
.
0
0
1
0
.
0
5
10
15
0
50
100
150
200
250
300
Clock Resolution (ms)
Clock Resolution (ms)
(a) Resolutions of 0–15 ms
(b) Resolutions of 0–300 ms
Mean Based
Nearest Neighbor
Multilayer Perceptron
6
1
.
0
4
1
.
0
2
1
.
0
0
1
0
.
5
0
.
4
0
.
3
0
.
2
0
.
1
0
.
0
5
10
15
20
25
30
Clock Resolution (sec)
(c) All resolutions (0–30 sec)
Fig. 5. The equal-error rates of the three detectors increase as clock-resolution goes
from ﬁne to coarse. Panel (a) depicts the minor but signiﬁcant change in performance
resulting from a transition from the high-resolution clock to typical 15 ms clocks. Panel
(b) shows how the error jumps signiﬁcantly when the clock resolution is between 50 ms
and 300 ms. Panel (c) characterizes the variation in detector performance over the full
range of derived clock resolutions from 1 ms to 30 seconds (where the detector does no
better than randomly guessing).
Panel (a) shows the eﬀect of clock resolutions in the range of 0–15 ms on the
equal-error rate. These are resolutions that we see in practice (e.g., in Windows
and X11 event timestamps). We observe some increase in the equal-error rate
for the mean-based and nearest-neighbor detectors, even from the 1 ms clock
to the 15 ms clock. The change from the 1 ms clock to the 15 ms clock does
not seem to have much eﬀect on the multilayer perceptron (which could be
because that detector’s performance is already comparatively poor, rather than
because the multilayer perceptron is more robust to lower-resolution clocks). The
parenthetical percentages in Table 1 quantify the change from high resolution to
typical resolutions. When the detectors use the 15 ms clock, their equal-error rate
The Eﬀect of Clock Resolution on Keystroke Dynamics
347
is an average of 4.2% higher than with the high-resolution clock. While this loss
may not seem signiﬁcant, keystroke dynamics needs near-perfect accuracy to be
practical (1% false-alarm rate and 0.001% miss rate according to the European
standard for access control [3]), so every possible boost in performance will help.
Panel (b) examines the eﬀect of clock resolution beyond the 15 ms range. The
graph reveals that the equal-error rates of the mean-based and nearest-neighbor
detectors increase sharply after a resolution of 50 ms, and all three detectors’
equal-error rates increase together after a resolution of 150 ms. While such low-
resolution clocks are not used for keystroke dynamics, we can consider clock
resolution to be one of many factors that might aﬀect a detector. (Other factors
include bus contention, system load, and even networking delays.) This panel
suggests that these detectors are not particularly robust to noise in the form of
low clock resolution. By extrapolation, it suggests that tens of milliseconds of
noise from any of these sources (or any combination thereof) could be a problem.
Panel (b) also reveals a peak in the equal-error rate of the mean-based and
nearest-neighbor detectors at a resolution of 100 ms. The cause of the peak is not
obvious; it could be an artifact of our particular subjects’ typing characteristics
and would disappear with more or diﬀerent subjects. More typing data and
analysis would be necessary to determine whether such peaks appear consistently
for a particular detector and clock resolution, but the existence of a peak does
suggest that the eﬀects of factors like clock resolution are not always easy to
predict.
Panel (c) demonstrates the eﬀect of very-low-resolution clocks on the equal-
error rate of a detector. All three detectors’ equal-error rates tend to 0.5, which
is the theoretically worst possible equal-error rate (akin to random guessing).
That the equal-error rate goes to 0.5 is not surprising, but it is surprising that
the equal-error rate converges so slowly to 0.5. With a 1-second resolution, the
three detectors all have equal-error rates of about 0.3. While not great, it is
certainly better than randomly guessing. It is surprising that key-hold times
and digram intervals retain some (weakly) discriminative information even when
expressed as a whole number of seconds. It may be that the features being used
to discriminate users from impostors are present only because our impostors are
unpracticed; they type the password a few seconds more slowly than a practiced
user would. It is possible that a curve for practiced impostors would be steeper,
more quickly ascending to 0.5 (to be investigated in future work).
9 Discussion
Based on these ﬁndings, we take away two messages from this investigation, each
of which suggests a trajectory for the future. First, we have demonstrated that
clock resolution does have an eﬀect on the performance of keystroke-dynamics
detectors, and as a result, we should consider the potential deleterious eﬀects
of timing noise. Fortunately, the eﬀect appears to be small for the typical clock
resolutions we see in practice, but we do get a small boost in performance by us-
ing a high-resolution clock. However, clock-resolution granularity is not the only
348
K. Killourhy and R. Maxion
factor that aﬀects keystroke timestamps. Given these results, it seems almost
certain that other forms of noise (e.g., system load) will cause similar problems.
In the long term, we should try to eliminate noise from our timestamps, but in
the short term we should at least acknowledge and account for its presence by
carefully evaluating our timing mechanisms (e.g., by measuring and reporting
clock resolution).
Second, even with the high-resolution timestamps, our detectors’ performance
is less than ideal. The best performance we obtained was a 9.96% equal-error
rate for the nearest-neighbor detector, which is a long way from a 1% false-alarm
rate and a 0.001% miss rate. We were surprised, since the detectors we used are
similar to those that have performed well in the literature (e.g., by Joyce and
Gupta [10], and by Cho et al. [4]). However, it would be improper to compare our
results directly to those in the literature, because there are signiﬁcant diﬀerences
between our experimental method and theirs. The most obvious diﬀerence is our
control of potential confounding factors (e.g., password selection and practice
eﬀect).
We speculate that experimental control is indeed responsible for the poorer
performance of our detectors. Furthermore, we advocate the control of potential
confounding factors in future experiments. Why? While realistic but uncontrolled
experiments can demonstrate that a detector does well (or poorly), controlled
experiments are necessary to reveal a causal connection between experimental
factors (e.g., password choice or practice) and detector performance. If we are to
use keystroke dynamics as a biometric, causal factors must be identiﬁed—why it
works is as important as whether it works. For instance, it would be signiﬁcant
to discover that, regardless of other factors, every typist has an immutable,
intrinsically identiﬁable quality to his or her typing. It would also be signiﬁcant
(but unfortunate) to ﬁnd that a detector’s performance depends primarily on
the number of times an impostor practiced a password, and that with enough
practice, any impostor could pass for a legitimate user.
We intend to conduct a survey of other detectors proposed in the literature
to see whether performance remains poor on our data. We also observe that
these detection algorithms tend to treat typing data as arbitrary points in a
high-dimensional space, ignoring the fact that the data are observations about
ﬁngers typing. Perhaps better results can be obtained by building a detector that
relies upon a model of user typing (such as those proposed by Card et al. [2] or
John [9]).
10 Summary and Conclusion
The goal of this work is to investigate the eﬀect that clock resolution has on
the performance of keystroke-dynamics detectors, in part to determine if a high-
resolution clock would boost performance. We collected data at a high resolution,
and derived data at lower resolutions. We implemented three detectors and eval-
uated their performances over a range of clock resolutions. We found that a
high-resolution clock does provide a slight performance boost, and conversely,
The Eﬀect of Clock Resolution on Keystroke Dynamics
349
clocks with a typical 15 ms resolution increase the equal-error rate by an average
of 4.2%. Based on results using very-low-resolution clocks, we found that detec-
tors are not particularly robust to timing noise. Finally, we discovered that none
of the detectors achieved a practically useful level of performance, and identiﬁed
signiﬁcant opportunities for progress through controlled experimentation.
Acknowledgements
The authors are grateful to Rachel Krishnaswami for her insightful comments
and helpful advice, and to Patricia Loring for running the experiments that
provided the data for this paper. Fahd Arshad and Rob Reeder were responsible
for the instrumentation that presented stimuli to participants. Thanks also to
several anonymous reviewers for their comments.
This work was supported by National Science Foundation grant numbers CNS-
0430474 and CNS-0716677, and by the Army Research Oﬃce through grant
number DAAD19-02-1-0389 (Perpetually Available and Secure Information Sys-
tems) to Carnegie Mellon University’s CyLab. The views and conclusions con-
tained in this document are those of the authors, and should not be interpreted
as representing the oﬃcial policies, either expressed or implied, of any sponsoring
institution, the U.S. government, or any other entity.
References
[1] Bentley, J.L.: Multidimensional binary search trees used for associative searching.
Communications of the ACM 18(9), 509–517 (1975)
[2] Card, S.K., Moran, T.P., Newell, A.: The keystroke-level model for user perfor-
mance time with interactive systems. Communications of the ACM 23(7), 396–410
(1980)
[3] CENELEC. European Standard EN 50133-1: Alarm systems. Access control sys-
tems for use in security applications. Part 1: System requirements, Standard Num-
ber EN 50133-1:1996/A1:2002, Technical Body CLC/TC 79, European Commit-
tee for Electrotechnical Standardization (CENELEC) (2002)
[4] Cho, S., Han, C., Han, D.H., Kim, H.-I.: Web-based keystroke dynamics iden-
tity veriﬁcation using neural network. Journal of Organizational Computing and
Electronic Commerce 10(4), 295–307 (2000)
[5] Dodge, Y.: Oxford Dictionary of Statistical Terms. Oxford University Press, New
York (2003)
[6] Forsen, G., Nelson, M., Staron Jr., R.: Personal attributes authentication tech-
niques. Technical Report RADC-TR-77-333, Rome Air Development Center (Oc-
tober 1977)
[7] Gaines, R.S., Lisowski, W., Press, S.J., Shapiro, N.: Authentication by keystroke
timing: Some preliminary results. Technical Report R-2526-NSF, RAND Corpo-
ration (May 1980)
[8] Hwang, B., Cho, S.: Characteristics of auto-associative MLP as a novelty detector.
In: Proceedings of the IEEE International Joint Conference on Neural Networks,
Washington, DC, July 10–16, 1999, vol. 5, pp. 3086–3091 (1999)
350
K. Killourhy and R. Maxion
[9] John, B.E.: TYPIST: A theory of performance in skilled typing. Human-Computer
Interaction 11(4), 321–355 (1996)
[10] Joyce, R., Gupta, G.: Identity authentication based on keystroke latencies. Com-
munications of the ACM 33(2), 168–176 (1990)
[11] Keeney, M., Kowalski, E., Cappelli, D., Moore, A., Shimeall, T., Rogers, S.: In-
sider threat study: Computer system sabotage in critical infrastructure sectors.
Technical report, U.S. Secret Service and CERT Coordination Center/SEI (May
2005), http://www.cert.org/archive/pdf/insidercross051105.pdf
[12] Limas, M.C., Mer´e, J.O., Gonz´ales, E.V., Martinez de Pis´on Ascacibar, F.J., Es-
pinoza, A.P., Elias, F.A.: AMORE: A MORE Flexible Neural Network Package
(October 2007), http://cran.r-project.org/web/packages/AMORE/index.html
[13] Microsoft. Password checker (2008),
[14] Mount, D., Arya, S.: ANN: A Library for Approximate Nearest Neighbor Search-
http://www.microsoft.com/protect/yourself/password/checker.mspx
ing (2006), http://www.cs.umd.edu/∼mount/ANN/
[15] Microsoft Developer Network. EVENTMSG structure (2008),
http://msdn2.microsoft.com/en-us/library/ms644966(VS.85).aspx
[16] Microsoft Developer Network. QueryPerformanceCounter function (2008),
http://msdn2.microsoft.com/en-us/library/ms644904(VS.85).aspx
[17] Peacock, A., Ke, X., Wilkerson, M.: Typing patterns: A key to user identiﬁcation.
IEEE Security and Privacy 2(5), 40–47 (2004)
[18] R Development Core Team. R: A Language and Environment for Statistical Com-
puting. R Foundation for Statistical Computing, Vienna, Austria (2008)
[19] Sheng, Y., Phoha, V., Rovnyak, S.: A parallel decision tree-based method for user
authentication based on keystroke patterns. IEEE Transactions on Systems, Man,
and Cybernetics 35(4), 826–833 (2005)
[20] Swets, J.A., Pickett, R.M.: Evaluation of Diagnostic Systems: Methods from Sig-
nal Detection Theory. Academic Press, New York (1982)
[21] PC Tools. Security guide for windows—random password generator (2008),
http://www.pctools.com/guides/password/