18
19 // ./example69.go:16: 结构字面量中结构entities.User
20 // 的字段'email'未知
21
22 fmt.Printf("User: %v\n", u)
23 }
代码清单5-73的第08行导入了entities包。在第14行声明了entities包中的公开的
类型User的名为u的变量，并对该字段做了初始化。不过这里有一个问题。第16行的代码试
图初始化未公开的字段email，所以编译器抱怨这是个未知的字段。因为email这个标识符未
公开，所以它不能在entities包外被访问。
让我们看最后一个例子，这个例子展示了公开和未公开的内嵌类型是如何工作的，如代码清
单5-74所示。
代码清单5-74 listing74/
entities/entities.go
-----------------------------------------------------------------------
01 // entities包包含系统中
02 // 与人有关的类型
03 package entities
04
05 // user在程序里定义一个用户类型
06 type user struct {
07 Name string
08 Email string
09 }
10
11 // Admin在程序里定义了管理员
12 type Admin struct {
13 user // 嵌入的类型是未公开的
14 Rights int
15 }
listing74.go
-----------------------------------------------------------------------
01 // 这个示例程序展示公开的结构类型中如何访问
02 // 未公开的内嵌类型的例子
03 package main
04
05 import (
06 "fmt"
07
08 "github.com/goinaction/code/chapter5/listing74/entities"
09 )
10
11 // main是应用程序的入口
12 func main() {
13 // 创建entities包中的Admin类型的值
14 a := entities.Admin{
15 Rights: 10,
16 }
17
18 // 设置未公开的内部类型的
19 // 公开字段的值
20 a.Name = "Bill"
21 a.Email = "PI:EMAIL"
22
23 fmt.Printf("User: %v\n", a)
24 }
现在，在代码清单5-74里，entities包包含两个结构类型，如代码清单5-75所示。
代码清单5-75 entities/entities.go
01 // entities包包含系统中
02 // 与人有关的类型
03 package entities
04
05 // user在程序里定义一个用户类型
06 type user struct {
07 Name string
08 Email string
09 }
10
11 // Admin在程序里定义了管理员
12 type Admin struct {
13 user // 嵌入的类型未公开
14 Rights int
15 }
在代码清单5-75的第06行，声明了一个未公开的结构类型user。这个类型包括两个公开
的字段 Name 和 Email。在第 12 行，声明了一个公开的结构类型 Admin。Admin 有一个名为
Rights的公开的字段，而且嵌入一个未公开的user类型。让我们看一下listing74.go的main
函数，如代码清单5-76所示。
代码清单5-76 listing74.go：第11到24行
11 // main是应用程序的入口
12 func main() {
13 // 创建entities包中的Admin类型的值
14 a := entities.Admin{
15 Rights: 10,
16 }
17
18 // 设置未公开的内部类型的
19 // 公开字段的值
20 a.Name = "Bill"
21 a.Email = "PI:EMAIL"
22
23 fmt.Printf("User: %v\n", a)
24 }
让我们从代码清单 5-76 的第 14 行的 main 函数开始。这个函数创建了 entities 包中的
Admin 类型的值。由于内部类型user 是未公开的，这段代码无法直接通过结构字面量的方式初
始化该内部类型。不过，即便内部类型是未公开的，内部类型里声明的字段依旧是公开的。既然
内部类型的标识符提升到了外部类型，这些公开的字段也可以通过外部类型的字段的值来访问。
因此，在第20行和第21行，来自未公开的内部类型的字段Name和Email可以通过外部
类型的变量a被访问并被初始化。因为user类型是未公开的，所以这里没有直接访问内部类型。
5.7 小结
使用关键字struct或者通过指定已经存在的类型，可以声明用户定义的类型。
方法提供了一种给用户定义的类型增加行为的方式。
设计类型时需要确认类型的本质是原始的，还是非原始的。
接口是声明了一组行为并支持多态的类型。
嵌入类型提供了扩展类型的能力，而无需使用继承。
标识符要么是从包里公开的，要么是在包里未公开的。
6
第 6 章 并发
第6章 并发
本章主要内容
 使用goroutine运行程序
 检测并修正竞争状态
 利用通道共享数据
通常程序会被编写为一个顺序执行并完成一个独立任务的代码。如果没有特别的需求，最好
总是这样写代码，因为这种类型的程序通常很容易写，也很容易维护。不过也有一些情况下，并
行执行多个任务会有更大的好处。一个例子是，Web 服务需要在各自独立的套接字（socket）上
同时接收多个数据请求。每个套接字请求都是独立的，可以完全独立于其他套接字进行处理。具
有并行执行多个请求的能力可以显著提高这类系统的性能。考虑到这一点，Go 语言的语法和运
行时直接内置了对并发的支持。
Go语言里的并发指的是能让某个函数独立于其他函数运行的能力。当一个函数创建为goroutine
时，Go 会将其视为一个独立的工作单元。这个单元会被调度到可用的逻辑处理器上执行。Go 语言
运行时的调度器是一个复杂的软件，能管理被创建的所有goroutine并为其分配执行时间。这个调度
器在操作系统之上，将操作系统的线程与语言运行时的逻辑处理器绑定，并在逻辑处理器上运行
goroutine。调度器在任何给定的时间，都会全面控制哪个goroutine要在哪个逻辑处理器上运行。
Go语言的并发同步模型来自一个叫作通信顺序进程（Communicating Sequential Processes，CSP）
的范型（paradigm）。CSP是一种消息传递模型，通过在goroutine之间传递数据来传递消息，而不是
对数据进行加锁来实现同步访问。用于在 goroutine 之间同步和传递数据的关键数据类型叫作通道
（channel）。对于没有使用过通道写并发程序的程序员来说，通道会让他们感觉神奇而兴奋。希望读
者使用后也能有这种感觉。使用通道可以使编写并发程序更容易，也能够让并发程序出错更少。
6.1 并发与并行
让我们先来学习一下抽象程度较高的概念：什么是操作系统的线程（thread）和进程（process）。
这会有助于后面理解Go语言运行时调度器如何利用操作系统来并发运行goroutine。当运行一个
应用程序（如一个IDE或者编辑器）的时候，操作系统会为这个应用程序启动一个进程。可以将
这个进程看作一个包含了应用程序在运行中需要用到和维护的各种资源的容器。
图6-1展示了一个包含所有可能分配的常用资源的进程。这些资源包括但不限于内存地址空
间、文件和设备的句柄以及线程。一个线程是一个执行空间，这个空间会被操作系统调度来运行
函数中所写的代码。每个进程至少包含一个线程，每个进程的初始线程被称作主线程。因为执行
这个线程的空间是应用程序的本身的空间，所以当主线程终止时，应用程序也会终止。操作系统
将线程调度到某个处理器上运行，这个处理器并不一定是进程所在的处理器。不同操作系统使用
的线程调度算法一般都不一样，但是这种不同会被操作系统屏蔽，并不会展示给程序员。
图6-1 一个运行的应用程序的进程和线程的简要描绘
操作系统会在物理处理器上调度线程来运行，而 Go 语言的运行时会在逻辑处理器上调度
goroutine来运行。每个逻辑处理器都分别绑定到单个操作系统线程。在1.5版本 ①上，Go语言的
运行时默认会为每个可用的物理处理器分配一个逻辑处理器。在1.5版本之前的版本中，默认给
整个应用程序只分配一个逻辑处理器。这些逻辑处理器会用于执行所有被创建的goroutine。即便
只有一个逻辑处理器，Go也可以以神奇的效率和性能，并发调度无数个goroutine。
在图6-2中，可以看到操作系统线程、逻辑处理器和本地运行队列之间的关系。如果创建一
个goroutine并准备运行，这个goroutine就会被放到调度器的全局运行队列中。之后，调度器就
将这些队列中的 goroutine 分配给一个逻辑处理器，并放到这个逻辑处理器对应的本地运行队列
① 直到目前最新的1.8版本都是同一逻辑。可预见的未来版本也会保持这个逻辑。——译者注
中。本地运行队列中的goroutine会一直等待直到自己被分配的逻辑处理器执行。
图6-2 Go调度器如何管理goroutine
有时，正在运行的 goroutine 需要执行一个阻塞的系统调用，如打开一个文件。当这类调用
发生时，线程和 goroutine 会从逻辑处理器上分离，该线程会继续阻塞，等待系统调用的返回。
与此同时，这个逻辑处理器就失去了用来运行的线程。所以，调度器会创建一个新线程，并将其
绑定到该逻辑处理器上。之后，调度器会从本地运行队列里选择另一个 goroutine 来运行。一旦
被阻塞的系统调用执行完成并返回，对应的 goroutine 会放回到本地运行队列，而之前的线程会
保存好，以便之后可以继续使用。
如果一个goroutine需要做一个网络I/O调用，流程上会有些不一样。在这种情况下，goroutine
会和逻辑处理器分离，并移到集成了网络轮询器的运行时。一旦该轮询器指示某个网络读或者写
操作已经就绪，对应的 goroutine 就会重新分配到逻辑处理器上来完成操作。调度器对可以创建
的逻辑处理器的数量没有限制，但语言运行时默认限制每个程序最多创建 10 000 个线程。这个
限制值可以通过调用runtime/debug包的SetMaxThreads方法来更改。如果程序试图使用
更多的线程，就会崩溃。
并发（concurrency）不是并行（parallelism）。并行是让不同的代码片段同时在不同的物理处
理器上执行。并行的关键是同时做很多事情，而并发是指同时管理很多事情，这些事情可能只做
了一半就被暂停去做别的事情了。在很多情况下，并发的效果比并行好，因为操作系统和硬件的
总资源一般很少，但能支持系统同时做很多事情。这种“使用较少的资源做更多的事情”的哲学，
也是指导Go语言设计的哲学。
如果希望让 goroutine 并行，必须使用多于一个逻辑处理器。当有多个逻辑处理器时，调度器
会将goroutine平等分配到每个逻辑处理器上。这会让goroutine在不同的线程上运行。不过要想真
的实现并行的效果，用户需要让自己的程序运行在有多个物理处理器的机器上。否则，哪怕Go语
言运行时使用多个线程，goroutine依然会在同一个物理处理器上并发运行，达不到并行的效果。
图6-3展示了在一个逻辑处理器上并发运行goroutine和在两个逻辑处理器上并行运行两个并
发的goroutine之间的区别。调度器包含一些聪明的算法，这些算法会随着Go语言的发布被更新
和改进，所以不推荐盲目修改语言运行时对逻辑处理器的默认设置。如果真的认为修改逻辑处理
器的数量可以改进性能，也可以对语言运行时的参数进行细微调整。后面会介绍如何做这种修改。
图6-3 并发和并行的区别
6.2 goroutine
让我们再深入了解一下调度器的行为，以及调度器是如何创建 goroutine 并管理其寿命的。
我们会先通过在一个逻辑处理器上运行的例子来讲解，再来讨论如何让 goroutine 并行运行。代
码清单6-1所示的程序会创建两个goroutine，以并发的形式分别显示大写和小写的英文字母。
代码清单6-1 listing01.go
01 // 这个示例程序展示如何创建goroutine
02 // 以及调度器的行为
03 package main
04
05 import (
06 "fmt"
07 "runtime"
08 "sync"
09 )
10
11 // main是所有Go程序的入口
12 func main() {
13 // 分配一个逻辑处理器给调度器使用
14 runtime.GOMAXPROCS(1)
15
16 // wg用来等待程序完成
17 // 计数加2，表示要等待两个goroutine
18 var wg sync.WaitGroup
19 wg.Add(2)
20
21 fmt.Println("Start Goroutines")
22
23 // 声明一个匿名函数，并创建一个goroutine
24 go func() {
25 // 在函数退出时调用Done来通知main函数工作已经完成
26 defer wg.Done()
27
28 // 显示字母表3次
29 for count := 0; count < 3; count++ {
30 for char := 'a'; char < 'a'+26; char++ {
31 fmt.Printf("%c ", char)
32 }
33 }
34 }()
35
36 // 声明一个匿名函数，并创建一个goroutine
37 go func() {
38 // 在函数退出时调用Done来通知main函数工作已经完成
39 defer wg.Done()
40
41 // 显示字母表3次
42 for count := 0; count < 3; count++ {
43 for char := 'A'; char < 'A'+26; char++ {
44 fmt.Printf("%c ", char)
45 }
46 }
47 }()
48
49 // 等待goroutine结束
50 fmt.Println("Waiting To Finish")
51 wg.Wait()
52
53 fmt.Println("\nTerminating Program")
54 }
在代码清单6-1的第14行，调用了runtime包的GOMAXPROCS函数。这个函数允许程序
更改调度器可以使用的逻辑处理器的数量。如果不想在代码里做这个调用，也可以通过修改和这