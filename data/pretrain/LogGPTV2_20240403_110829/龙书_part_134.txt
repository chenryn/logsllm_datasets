的改写可以包括对下标变量重新排序或引人新的循环下标。但是不能改变数组的布局，比如把
性。也就是说，整个高速缓存线被连续使用。如果可以，指明如何改写这个循环。注意，对循环
如果两个访问（不管是读还是写）指向两个不同的位置，显然它们是相互独立的（可以被重
，我们就能获得空间局部性。但是这个断言依赖于：数组是按行存放的假设。如果数组是按列
516
并行化或局部性优化经常对原程序中执行的运算重新排序。和所有的优化一样，只有当对
！练习11.5.7：在例11.27中，我们指出，如果矩阵Z的行的长度很长，以至于不能一起存
2）反依赖，--个读运算后面跟一-个对同--个内存位置的写运算。
！练习11.5.6：在例11.28中，我们看到两个相似的数组访问之间是否存在复用很大程度
1）真依赖，－-个写运算后面跟一个对同一个内存位置的读运算。
回顾--下10.2.1节，可知存在三种类型的数据依赖：
!! 4) A[i,j-k,i +j,i +k] = 0 
3) A[i,j,k,i +j+k] = 0.
!! 2) A[j +k,i,i.] = 0 
1) A[i +l,i +k,j] = 0 
对于下列的各个访问，指出是否可能改写该循环结构，使得对A的访问具有自空间复用特
！练习11.5.4：假设数组A 按行存放，并在下面的循环嵌套结构中被访问：
[ 4) A[i-j,j-k,k-i]
or
(i=0;i，它位于-个深度为 d'的程序嵌套结构中。如果下面的条件成立，这
问函数和界限表示为.=，它位于一个深度为d的循环嵌套结构中；第二个访问表
11.6.1数组访问的数据依赖关系的定义
节将讨论如何系统化地将这个信息应用到并行化中。
问之间没有发现数据依赖关系，那么就可以很容易地把不同的迭代分配给不同的处理器。11.7
访问。
动态实例依赖于另-一-个静态访问的某个动态实例，我们就说第--个静态访问依赖于第二个静态
-个内存位置也是有意义的。为了寻找同一个静态访问的不同实例之间的依赖关系，我们假设
回忆--下静态访问和动态访问之间的区别。-一-个静态访问是程序中某个位暨上的数组引用，而--个动态访问是这
1） Z[i-1]和 Z[订之间的数据依赖关系。除了第－-个迭代，每个迭代都会读取前一个迭代
并行性和局部性优化
2）Z[订和它自身之间的依赖关系。可以看到，这个循环的不同选代向不同的位置写人数
我们可以很容易看出数据依赖关系如何应用到并行化中。比如，如果在一个循环的各个访
因此我们知道实例之间不存在依赖关系。请注意，之所以有第三个条件i=讠是因为要求
所以我们知道它们之间存在一个依赖关系。上面的约束系统有九个解：（i=2,′=1），（i=
因为一个静态访问通常会产生多个动态访问，所以考虑它的多个动态访问是否可能指向同
1）它们中至少有一-个是写运算，且
在上面的讨论中，数据依赖是针对动态访问定义的。只要一-个程序的某个静态访问的某个
3）输出依赖，是两个针对同一个位置的写运算。
③ Fi+f = F'i' +f
2）
个引用的一次执行。
02 时的 gcd（α,μ2,,αn）,使用欧几里德算法来计算 gcd(α,α2）=c,然后递
如果α=b，那么 gcd(α,b）=α。如果α>b,令c为α/b 的余数。如果c=0,那么b整除α,
欧几里德算法按照下面的方法找出 gcd(α,b)的值。首先，假设α和b 为正整数，且α≥b。
考虑两个方程
gcd(24,36,54）=6，因为24/6、36/6 和54/6的余数都是0，而且用任何大于6的整
在例11.30中，我们看到线性丢番图方程2i=2+1无解。我们可以把这个方程写作
线性丢番图方程
ax +a2x +.….+ann = C
24x +36y +54z = 30
欧几里德算法
 3x+2y+z = 5 
x-2y+z= 0
 2i - 2j = 1
519
口
口
口
1
---
## Page 536
替换为。可以重复这个步骤对不等式不断化简，在某些情况下可以确定不等式无解。
是不等号的方向相反，那么我们可以把变量v替换为最大的可能整数值，或者在没有常量上界时
我们可以把;替换为－α。类似地，如果涉及v;的所有约束都可以表示成上面的两种形式，但
其中，c;是非负整数。那么我们可以把变量替换为最小的可能整数值。如果没有这样的下界，
同时v;的上界都具有如下形式：
不等式组有--个整数解。明确地说，假设的每个下界都具有如下形式：
我们可以安全地用这个常量来替换这个变量。简化后的不等式组有一个整数解当且仅当原来的
以构造出每个不等式只涉及一个变量的线性不等式组。
即使存在涉及多个变量的等式，GCD 测试(原文如此，实际应该是独立变量测试，译者注)依然可
这样，把根据后两个不等式得到的下界与根据前两个不等式得到的上界组合起来，我们推出
其中， 和t2是任意整数。把变量t和t2代人上面的线性不等式，我们得到
如下：
j,使得
为了找出 Z[i,j]和 Z[j+10,i+11]之间是否存在数据依赖关系，我们考虑是否存在整数i,j,和
例11.35
成。这类规划问题的解法很简单，只需要分别测试常量上界和常量下界之间是否存在整数即可。
组的几个技术，以及一个可以利用在数据依赖关系分析时发现的相似性的技术。
11.6.4解决整数线性规划的启发式规则
因为t²的下界大于它的上界，因此不存在整数解，也就没有数据依赖关系。这个例子说明，
数据依赖关系问题需要求解很多简单的整数线性规划问题。现在我们讨论处理简单不等式
520
另一个简单的启发式规则是寻找是否存在一个其上界或下界为常量的变量。在某些情况下，
无环测试
对其中的方程应用 GCD 测试可以确定可能存在一个整数解。这些方程的整数解可表示
从数据依赖关系分析中得到的很多整数线性规划问题由多个只涉及一个未知量的不等式组
独立变量测试
考虑嵌套循环结构
C;U;≤co+Cu +...+Ci-1U--1 +Ci+1Wi+1 +...+CnUn
10：
i = ,j=t2, i'=t2-11,j'=t -10
对于某个 c;>0，Co≤c;V;
≥0
wo
0≤i,j,i',j'≤10
11≤≤10
10≤≤10
t2- 11
j=i'+11
i=j'+10
≤10
≤10
第11章
口
---
## Page 537
赖关系问题。提高数据依赖关系的处理速度的重要技术之--是使用记忆模式（memoization）。这