Keepalivedm[24348]:VRRP_cript（checkhttpdsucceeded
vTp(27
urp[27
7931:
793]:
793:
VRRP_
RRP
名
Insta
nce(HA_1）SendinggratuitcusARPsonethO fox
ce(HA_1)TransitiontoMASTERSTATE
第11章高性能集群软件Keepalived315
---
## Page 335
316第四部分集群架构篇
可通过“killall-1”命令显示所有信号名列表，其中每个信号名代表对进程的不同执行方式，
一种，代号为15，它表示以正常的方式结束程序的运行。其实killall可用的信号名有很多，
运行的指定命令的进程。如果没指定信号名，则发送SIGTERM。SIGTERM也是信号名的
实际应用环境而定。
现Keepalived的主、备节点切换。
过 vrrp_script 和 track_script 组合，可以实现对集群资源的监控并改变集群优先级，进而实
script 模块主要用来调用“vrrp_script”模块使Keepalived执行对集群服务资源的检测。
以引人监控脚本、命令组合、shell语句等，以实现对服务、端口等多方面的监控。track
对集群中服务资源进行监控。与此模块一起使用的还有 track_script 模块，在此模块中可
11.3.2
项来实现。
障时才进行切换，这就是前面介绍过的不抢占功能，可以通过Keepalived的 nopreempt选
切换到备用节点，而在主节点故障恢复后，不希望再次切回主节点，直到备用节点发生故
不到万不得已，尽量不要进行主、备角色的切换，也就是说，在主节点发生故障后，必须
负载、高并发、追求稳定的业务系统中，执行一次主、备切换对业务系统影响很大，因此，
资源，重新进人了BACKUP状态，于是整个集群系统恢复了正常的主、备运行状态。
etho 设备上。
下面就详细介绍下vrrp_script模块常见的几种监测机制，至于选择哪种监控方面，视
此外，在vrrp_script模块中还可以定义对服务资源检测的时间间隔、权重等参数，通
纵观Keepalived 的整个运行过程和切换过程，看似合理，事实上并非如此：在一个高
这种监控集群服务的方式主要是通过killall 命令实现的。killall 会发送一个信号到正在
在上节介绍Keepalived 基础 HA 功能时用到了vrrp_script这个模块，此模块专门用于
1.通过killall命令探测服务运行状态
从图11-8中可以看出，keepalived-backup节点在发现主节点恢复正常后，释放了集群
继续查看keepalived-backup节点Keepalived 的运行日志信息，如图1l-8所示。
通过vrrp_script实现对集群资源的监控
图11-8
Mar420:13:51kepalivedbackupavahidaemon1207]:Wihdrawingaddressrecordfor192.168.66.80onetho
remioved
Mar420:13:51keepa
Mar420:13:51keepalvedbadkupKeepaidp27793:RRPnstaneA1ecevedhigherpoade
keepalived-backup节点在keepalived-master节点故障恢复后的日志信息
lived-backupKeepalivedwrp[27793]):VRRP_Instance(HA_1）EnteringBACKUPSTATE
---
## Page 336
义监控脚本的时候，只需按照这个原则来编写即可。
认为服务正常，如果返回状态码为1，则认为服务故障。明白了这个原理之后，在进行自定
它仅仅通过监控脚本的返回状态码来识别集群服务是否正常，如果返回状态码为0，那么就
主、备节点的优先级，进而引发主、备节点发生切换。
务检测失败的提示。然后根据vrrp_script模块中设定的“weight”值重新设置Keepalived
服务关闭，再次执行检测，结果如下：
此返回的状态码为0，此时check_mysqld 模块将返回服务检测正常的提示。接着将 MySQL
-0 mysqld”的方式，其中“interval”选项检查的时间间隔，即 2s 执行一次检测。
面看一个实例：
vrrp_script 模块正是利用了killall命令的这个特性，变相实现了对服务运行状态的监控。下
进程关闭或其他异常，将返回状态码1，反之，如果发现进程运行正常，将返回状态码0。
0的信号并不表示要关闭某个程序，而表示对程序（进程）的运行状态进行监控，如果发现
例如，代号为9的信号表示将强制中断一个程序的运行。这里要用到的信号为0，代号为
从这个过程可以看到,vrrp_script 模块其实并不关注监控脚本或监控命令是如何实现的，
检测端口的运行状态也是最常见的服务监控方式，在Keepalived 的vrrp_script 模块中
2.检测端口运行状态
由于MySQL服务被关闭，因此返回的状态码为1，此时check_mysqld模块将返回服
这里通过“echo $?”方式显示了上个命令的返回状态码，MySQL服务运行正常，因
在MySQL 服务运行正常情况下，通过killall命令检测结果如下：
这个例子定义了一个服务监控模块check_mysqld，其采用的监控的方式是通过“killall
[root@keepalived-master ~]# echo $?
mysqld:no process killed
#]
[root@keepalived-master ~]# killall -0 mysqld
track_script
vrrp_script check_mysqld(
root@keepalived-master~]#echo $?
check_mysqld
interval2
script "killall -0 mysqld"
第11章高性能集群软件Keepalived317
---
## Page 337
318第四部分集群架构篇
0、1两种返回状态，例如下面这个示例：
非常有用。从这里也可以得知，vrrp_script 模块支持的监控方式十分灵活。
认为状态正常，否则认为状态异常，这种监测方式对于一些简单的应用监控或者流程监控
面这个示例：
为此节点资源恢复正常。
次，就认为此节点资源发生故障，将进行切换操作；“rise”表示如果请求一次成功，就认
的状态检测，其中，
可以通过如下方式对本机的端口进行检测：
vrrp_script chk_mysqld(
这是最常见的监控方式，其监控过程类似于nagios的执行方式，不同的是，这里只有
4.通过脚本进行服务状态监控
在这个例子中，通过一个 shell 判断语句，检测 httpd.pid 文件是否存在，如果存在，就
track_script
vrrp_scriptchk_httpd{
在Keepalived 的 vrrp_script 模块中甚至可以直接引用 shell语句进行状态监控，例如下
3.通过shell语句进行状态监控
在这个例子中，通过“&1
在 vrrp_script模块中，如果不设置weight选项值，那么集群优先级的选择将由
在一个一主多备的Keepalived集群中，priority 值最大的将成为集群中的 MASTER 节
在Keepalived集群中，其实并没有严格意义上的主、备节点，虽然可以在Keepalived
这是一个最简单的实现MySQL服务状态检测的 shell脚本，
if[$？= 0];then
 $MYSQL -h $MYSQL_HOST -u $MYSQL_USER -p$MYSQL_PASSWORD -e "show status;" > /dev/
else
MYSQL_PASSWORD='XXXXXX
MYSQL_USER=root
MYSQL_HOST=localhost
MYSQL=/usr/bin/mysql
#!/bin/bash
其中，check_mysqld.sh的内容为：
chk_mysqld
track_script
exit SMYSQL_STATUS
MYSQL_STATUS=1
MYSQL_STATUS=0
，它通过登录MySQL数据
第11 章高性能集群软件Keepalived
319
---
## Page 339
320第四部分集群架构篇
当脚本检测失败时，MASTER节点的权值将是 priority值与weight值之差，因此切换策略为：
切换策略为：
与 priority值之和；如果脚本检测失败，那么 MASTER节点的权值保持为 priority值，因此
weight值可以是正数也可以是负数，因此，要分两种情况进行说明。
问题。下面总结在Keepalived 中使用vrrp_script模块时整个集群角色的选举算法，由于
旧处于MASTER状态，在这种情况下整个HA集群将失去意义。
现，并没有出现B节点接管A节点的日志，B节点仍然处于BACKUP状态，而A节点依
么将会发生如下情况。
B 两个节点都使用了vrrp_script模块来监控MySQL服务，同时都设置weight值为10，那
置 priority值为100，而在B节点keepalived.conf文件中，设置priority值为80，并且A、
通过在vrrp_script模块中设置 weight 值来实现。下面列举一个实例来具体说明。
Keepalived配置文件中的priority值决定，而在需要对集群中优先级进行灵活控制时，可以
下面分析产生这种情况的原因。这也就是Keepalived 集群中主、备角色选举策略的
假定由A和B 两个节点组成的Keepalived 集群，在A节点 keepalived.conf文件中，设
在熟悉了Keepalived主、备角色的选举策略后，再来分析一下前面的那个实例。由于A、
口MASTER节点vrrp_script脚本检测失败时，如果MASTER节点 priority值与weight
在 vrrp_script 中指定的脚本如果检测成功，那么 MASTER节点的权值仍为 priority 值,
口MASTER 节点 vrrp_script 脚本检测成功时，如果 MASTER 节点 weight 值与 priority
MASTER节点vrrp_script 脚本检测失败时，如果MASTER节点priority值小于
2.weight值为负数时
1.weight值为正数时
而B自动成为BACKUP节点，此时将A节点的MySQL服务关闭，通过查看日志发
在两节点都启动Keepalived服务后，正常情况是A节点将成为集群中的MASTER节
BACKUP节点 priority值时，主节点依然为主节点，不发生切换。
值之差小于 BACKUP节点 priority值，将发生主、备切换。
BACKUP 节点weight 值与 priority值之和，将发生主、备切换。
生切换。
值之和大于BACKUP节点weight值与 priority值之和，主节点依然为主节点，不发
---
## Page 340
不好，主节点发生故障时将导致集群角色选举失败，使集群陷于瘫痪状态。
20即可保证集群正常运行和切换。由此可见，对于weight值的设置要非常谨慎，如果设置
BACKUP节点 priority值之差。对于上面A、B两个节点的例子，只要设置weight值大于
出现了A节点权值仍然大于B节点权值的情况，因此不会发生主、备切换。
即为100，而B节点的权值将变为weight值与priority值之和，也就是90（10+80），这样就
务后，A节点的脚本检测将失败，此时A节点的权值将保持为A节点上设置的 priority值，
对于weight值的设置，有一个简单的标准，即weight 值的绝对值要大于MASTER 和
第11章高性能集群软件Keepalived321
---
## Page 342
方案。HAProxy作为一个专业的负载均衡软件，它的显著优点如下：
载均衡软件，借助HAProxy可以快速、可靠地提供基于TCP和HTTP应用的负载均衡解决
12.1.1
衡。本章将详细介绍HAProxy这种基于第三方应用实现的负载均衡技术。
于Linux操作系统实现的一种软负载均衡，而HAProxy就是基于第三应用实现的软负载均
现方式，分别是基于操作系统的软负载实现和基于第三方应用的软负载实现。LVS就是基
负载均衡产品，例如HAProxy、LVS、Nginx等。在软件的负载均衡产品中，又分为两种实
均衡集群解决方案中，有基于硬件的负载均衡设备，例如F5、Big-IP等，也有基于软件的
越来越高，高可用集群、负载均衡集群成为一种热门的系统架构解决方案。在众多的负载
12.1高性能负载均衡软件HAProxy介绍
HAProxy是一个开源的、高性能的、基于TCP（第四层）和HTTP（第七层）应用的负
随着互联网业务的迅猛发展，大型电商平台和门户网站对系统的可用性和可靠性要求
口支持多于8种负载均衡算法，同时也支持session保持。
口最高可以同时维护40000～50000个并发连接，单位时间内处理的最大请求数
口可靠性和稳定性非常好，可以与硬件级的F5负载均衡设备相媲美。
HAProxy的性能强大可见一斑。
为20 000个，最大数据处理能力可达10Gbps。作为软件级别的负载均衡来说，
千万级高并发负载均衡软件HAProxy
HAProxy简介
第12章
Chiayter 1i
---
## Page 343
324
均衡器支持多种应用协议，常见的有HTTP、FTP、SMTP等。七层负载均衡器可以根据报
发报文的同时可能还会对报文原来的源地址进行修改。整个过程如图12-1所示。
TCP连接是客户端和服务器直接建立的，而负载均衡器只不过完成了一个类似路由器的转发动
要是通过分析IP层及TCP/UDP层的流量实现的基于“IP+端口”的负载均衡。常见的基
12.1.2
站等。另外。HAProxy也可用于MySQL 数据库（读操作）的负载均衡。
第四部分集群架构篇
作。在某些负载均衡策略中，为保证后端服务器返回的报文可以正确传递给负载均衡器，在转
IP，然后直接转发给该后端服务器，这样一个负载均衡请求就完成了。从这个过程来看，一个
设定的负载均衡算法选择一台最佳的后端服务器，同时将报文中目标IP地址修改为后端服务器
于四层的负载均衡器有LVS、F5 等。
层的概念与区别。
并发量特别大且需要持久连接或四层和七层处理机制的 Web 系统，例如门户网站或电商网
时，对操作系统进行性能调优是非常重要的。在业务系统方面，HAProxy 非常适用于那些
以常见的TCP应用为例，负载均衡器在接收到第一个来自客户端的SYN请求时，会通过
所谓的四层就是ISO参考模型中的第四层。四层负载均衡器也称为四层交换机，它主
同理，七层负载均衡器也称为七层交换机，位于ISO的最高层，即应用层，此时负载
在12.1节中提到了HAProxy 是一个四层和七层负载均衡器。下面简单介绍下四层和七
HAProxy是借助于操作系统的技术特性来实现性能最大化的，因此，在使用HAProxy
口HAProxy拥有功能强大的ACL支持，能给使用带来很大方便。
口HAProxy拥有一个功能强大的服务器状态监控页面，通过此页面可以实时了解系统
口从HAProxy1.3版本后开始支持连接拒绝、全透明代理等功能，这些功能是其他负载
口支持虚拟主机功能，这样实现Web 负载均衡更加灵活。
均衡器所不具备的。
的运行状况。
client
四层和七层负载均衡的区别
TCP连接
图12-1四层负载均衡器转发原理
修改源地址（根据需求）
修改报文头目标地址
四层负载均衡器
转发连接
realserver
---
## Page 344
TCP和HTTP应用的负载均衡综合解决方案。
衡，而HAProxy是基于第三应用实现的软负载均衡。
缺点和异同了。下面就这两种负载均衡软件的异同做一个简单总结。
12.1.3HAProxy与 LVS 的异同
而七层负载均衡的处理能力也必然低于四层模式的负载均衡。
衡模式下，仅建立一次TCP连接。由此可知，七层负载均衡对负载均衡设备的要求更高，
模式下，负载均衡器与客户端及后端的服务器会分别建立一次TCP连接，而在四层负载均
图12-2所示。
务器。纵观整个过程，七层负载均衡器在这种情况下类似于一个代理服务器。整个过程如