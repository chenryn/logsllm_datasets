# pminfo -f gfs2.glstats
gfs2.glstats.total
    inst [0 or "afc_cluster:data"] value 43680
    inst [1 or "afc_cluster:bin"] value 2091
gfs2.glstats.trans
    inst [0 or "afc_cluster:data"] value 3
    inst [1 or "afc_cluster:bin"] value 3
gfs2.glstats.inode
    inst [0 or "afc_cluster:data"] value 17
    inst [1 or "afc_cluster:bin"] value 17
gfs2.glstats.rgrp
    inst [0 or "afc_cluster:data"] value 43642
    inst [1 or "afc_cluster:bin"] value 2053
gfs2.glstats.meta
    inst [0 or "afc_cluster:data"] value 1
    inst [1 or "afc_cluster:bin"] value 1
gfs2.glstats.iopen
    inst [0 or "afc_cluster:data"] value 16
    inst [1 or "afc_cluster:bin"] value 16
gfs2.glstats.flock
    inst [0 or "afc_cluster:data"] value 0
    inst [1 or "afc_cluster:bin"] value 0
gfs2.glstats.quota
    inst [0 or "afc_cluster:data"] value 0
    inst [1 or "afc_cluster:bin"] value 0
gfs2.glstats.journal
    inst [0 or "afc_cluster:data"] value 1
    inst [1 or "afc_cluster:bin"] value 1
```
:::
::: section
::: titlepage
## []{#assembly_analyzing-gfs2-with-pcp-configuring-gfs2-file-systems.html#checking_the_number_of_glock_structures_that_are_in_a_wait_state}检查处于等待状态的 glock 结构数量 {.title}
:::
最重要的拥有者标志是 H（holder：表示赋予请求的锁定）和
W（wait：等待请求完成时设置）。这些标记分别在赋予锁定请求和锁定请求队列中设置。
下面的 `pminfo`{.literal} 命令显示每个挂载的 GFS2 文件系统的
Wait(W)拥有者标签的 glocks 数。
``` literallayout
# pminfo -f gfs2.holders.flags.wait
gfs2.holders.flags.wait
    inst [0 or "afc_cluster:data"] value 0
    inst [1 or "afc_cluster:bin"] value 0
```
如果您看到在资源组锁定中排队了大量等待的请求,，那么可能有很多原因。一个原因可能是，在文件系统中，相对于资源组有大量的节点。另一个可能的原因是，文件系统可能接近完全被使用（平均来讲，需要较长的搜索时间）对于这两种情况，可通过添加更多存储并使用
`gfs2_grow`{.literal} 命令扩展文件系统来进行改善。
:::
::: section
::: titlepage
## []{#assembly_analyzing-gfs2-with-pcp-configuring-gfs2-file-systems.html#checking_file_system_operation_latency_using_the_kernel_tracepoint_based_metrics}使用基于内核追踪点的指标检查文件系统操作延迟 {.title}
:::
GFS2 PMDA 支持从 GFS2
内核追踪点收集指标数据。默认情况下，禁用了对这些指标的读取。当收集指标时，激活这些指标会打开
GFS2
内核跟踪点来填充指标值。当启用了这些内核追踪点指标数据时，这可能会对性能吞吐量产生小的影响。
PCP 提供了 `pmstore`{.literal} 工具，可让您根据指标值修改 PMDA
设置。`gfs2.control.*`{.literal} 指标允许切换 GFS2
内核追踪点。以下示例使用 `pmstore`{.literal} 命令启用所有 GFS2
内核追踪点。
``` literallayout
# pmstore gfs2.control.tracepoints.all 1
gfs2.control.tracepoints.all old value=0 new value=1
```
当运行这个命令时，PMDA 会切换 `debugfs`{.literal} 文件系统中的所有 GFS2
追踪点。[PCP 中 GFS2 的\"Complete
Metric](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/configuring_gfs2_file_systems/index#ref_available-gfs2-PCP-metrics-analyzing-gfs2-with-pcp){.link}
List\"表解释了每个控制追踪点及其用法，还可以通过 `pminfo`{.literal}
中的帮助参数了解每个控制追踪点的效果及其可用选项。
GFS2
提升指标计算文件系统中提升请求的数量。这些请求由第一次尝试时发生的请求数和初始提升请求后授予的\"其他请求\"分隔。通过\"其他\"提升的首次提升次数下降可指示文件争用的问题。
GFS2
降级请求指标（如提升请求指标）统计文件系统中的降级请求数。但是，这些也被分隔为来自当前节点的请求和来自系统中其他节点的请求。来自远程节点的大量降级请求可能会表示给定资源组在两个节点间出现竞争。
`pminfo`{.literal}
工具显示有关可用性能指标的信息。这个过程显示每个挂载的 GFS2 文件系统的
Wait(W)拥有者标签的 glocks 数。下面的 `pminfo`{.literal}
命令显示每个挂载的 GFS2 文件系统的 Wait(W)拥有者标签的 glocks 数。
``` literallayout
# pminfo -f gfs2.latency.grant.all gfs2.latency.demote.all
gfs2.latency.grant.all
    inst [0 or "afc_cluster:data"] value 0
    inst [1 or "afc_cluster:bin"] value 0
gfs2.latency.demote.all
    inst [0 or "afc_cluster:data"] value 0
    inst [1 or "afc_cluster:bin"] value 0
```
做好的做法是，在工作负载运行时没有问题的情况下观察一般的值，因此当这些值不在正常的范围内时，可以注意到性能的变化。
例如，您可能会看到等待完成的提升请求数量的变化，而不是在第一次请求时就可以完成。您可以从以下命令的输出结果中看到相关的信息。
``` literallayout
# pminfo -f gfs2.latency.grant.all gfs2.latency.demote.all
gfs2.tracepoints.promote.other.null_lock
     inst [0 or "afc_cluster:data"] value 0
     inst [1 or "afc_cluster:bin"] value 0
gfs2.tracepoints.promote.other.concurrent_read
     inst [0 or "afc_cluster:data"] value 0
     inst [1 or "afc_cluster:bin"] value 0
gfs2.tracepoints.promote.other.concurrent_write
     inst [0 or "afc_cluster:data"] value 0
     inst [1 or "afc_cluster:bin"] value 0
gfs2.tracepoints.promote.other.protected_read
     inst [0 or "afc_cluster:data"] value 0
     inst [1 or "afc_cluster:bin"] value 0
gfs2.tracepoints.promote.other.protected_write
     inst [0 or "afc_cluster:data"] value 0
     inst [1 or "afc_cluster:bin"] value 0
gfs2.tracepoints.promote.other.exclusive
     inst [0 or "afc_cluster:data"] value 0
     inst [1 or "afc_cluster:bin"] value 0
```
通过以下命令的输出，您可以确定远程降级请求的大幅增长（特别是其他集群节点）。
``` literallayout
# pminfo -f gfs2.tracepoints.demote_rq.requested
gfs2.tracepoints.demote_rq.requested.remote
     inst [0 or "afc_cluster:data"] value 0
     inst [1 or "afc_cluster:bin"] value 0
gfs2.tracepoints.demote_rq.requested.local
     inst [0 or "afc_cluster:data"] value 0
     inst [1 or "afc_cluster:bin"] value 0
```
以下命令的输出可能会显示，出现无法解释的日志清除数量的增加。
``` literallayout
# pminfo -f gfs2.tracepoints.log_flush.total
gfs2.tracepoints.log_flush.total
     inst [0 or "afc_cluster:data"] value 0
     inst [1 or "afc_cluster:bin"] value 0
```
:::
:::
::: section
::: titlepage
# []{#assembly_analyzing-gfs2-with-pcp-configuring-gfs2-file-systems.html#ref_available-gfs2-PCP-metrics-analyzing-gfs2-with-pcp}PCP 中 GFS2 可用指标的完整列表 {.title}
:::
下表描述了 GFS2 文件系统 `pcp-pmda-gfs2`{.literal}
软件包给出的性能指标的完整列表。
::: table
[]{#assembly_analyzing-gfs2-with-pcp-configuring-gfs2-file-systems.html#tb-pcpgfs2metricgroups}
**表 9.1. 完整指标数据列表**
::: table-contents
  指标名称                            描述
  ----------------------------------- ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  `gfs2.glocks.*`{.literal}           有关从 glock stats 文件收集的信息的指标(`glocks`{.literal})，其中计算当前挂载到系统中的每个状态的 glocks 数量。
  `gfs2.glocks.flags.*`{.literal}     计算给定 glocks 标签已存在的 glock 数量的指标范围
  `gfs2.holders.*`{.literal}          有关从 glock stats 文件收集的信息的指标(`glocks`{.literal})，它计算当前挂载到系统中每个 GFS2 文件系统中每个锁定状态的 glock 数量。
  `gfs2.holders.flags.*`{.literal}    带有给定拥有者标记的 glocks 数量的指标范围
  `gfs2.sbstats.*`{.literal}          为当前挂载到系统中的每个 GFS2 文件系统计时从超级块统计文件(`sbstats`{.literal})收集的信息的指标。
  `gfs2.glstats.*`{.literal}          有关从 glock stats 文件收集的信息的指标(`glstats`{.literal})，它计算当前挂载到系统中的每个 GFS2 文件系统中每种 glock 类型的数量。
  `gfs2.latency.grant.*`{.literal}    一个派生的指标，利用来自 `gfs2_glock_queue`{.literal} 和 `gfs2_glock_state_change`{.literal} 追踪点的数据来计算针对每个挂载的文件系统完成 glock 授权请求的平均延迟。这个指标可用于发现，当授权延迟增加时降低文件系统性能的问题。
  `gfs2.latency.demote.*`{.literal}   一个派生的指标，利用来自 `gfs2_glock_state_change`{.literal} 和 `gfs2_demote_rq`{.literal} 追踪点的数据来计算针对每个挂载的文件系统完成 glock 降级请求的平均延迟。这个指标可用于发现，当降级延迟增加时降低文件系统性能的问题。
  `gfs2.latency.queue.*`{.literal}    使用 `gfs2_glock_queue`{.literal} 追踪点中数据的一个派生指标计算针对每个挂载的文件系统完成 glock 队列请求的微秒的平均延迟。
  `gfs2.worst_glock.*`{.literal}      一个派生的指标，利用 `gfs2_glock_lock_time`{.literal} 追踪点中的数据来计算每个挂载的文件系统已知\"当前最糟糕的 glock\"。如果建议多次使用同一锁定，这个指标可用于发现潜在的锁定争用和降低文件系统的速度。
  `gfs2.tracepoints.*`{.literal}      有关 GFS2 `debugfs`{.literal} 追踪点中目前挂载到系统中的每个文件系统的输出结果的指标。这些指标的每个子类型（每个 GFS2 追踪点中的一个）都可以被控制，无论是启用或关闭控制指标。
  `gfs2.control.*`{.literal}          配置用于在 PMDA 中打开或关闭指标记录的指标数据。使用 `pmstore`{.literal} 工具切换指标。
:::
:::
:::
::: section
::: titlepage
# []{#assembly_analyzing-gfs2-with-pcp-configuring-gfs2-file-systems.html#proc_installing-minimal-PCP-setup-analyzing-gfs2-with-pcp}执行最小 PCP 设置来收集文件系统数据 {.title}
:::
此流程概述了如何安装最小 PCP 设置以收集 Red Hat Enterprise Linux
中的统计信息。这个设置涉及在产品系统中添加收集数据以便进一步分析所需的最小软件包数量。
可使用其他 PCP 工具分析生成的 `pmlogger`{.literal} 输出归档
`tar.gz`{.literal}，并可与其他性能信息来源进行比较。
::: orderedlist
**流程**
1.  安装所需的 PCP 软件包。
    ``` literallayout
    # yum install pcp pcp-pmda-gfs2
    ```
2.  为 PCP 激活 GFS2 模块。
    ``` literallayout
    # cd /var/lib/pcp/pmdas/gfs2
    # ./Install
    ```
3.  启动 `pmcd`{.literal} 和 `pmlogger`{.literal} 服务。
    ``` literallayout
    # systemctl start pmcd.service
    # systemctl start pmlogger.service
    ```
4.  在 GFS2 文件系统中执行操作。
5.  停止 `pmcd`{.literal} 和 `pmlogger`{.literal} 服务。
    ``` literallayout
    # systemctl stop pmcd.service
    # systemctl stop pmlogger.service
    ```
6.  收集输出并将其保存到根据主机名和当前日期和时间命名的
    `tar.gz`{.literal} 文件中。
    ``` literallayout
    # cd /var/log/pcp/pmlogger
    # tar -czf $(hostname).$(date+%F-%Hh%M).pcp.tar.gz $(hostname)
    ```
:::
:::
::: section
::: titlepage
# []{#assembly_analyzing-gfs2-with-pcp-configuring-gfs2-file-systems.html#additional_resources}其它资源 {.title}
:::
::: itemizedlist
-   [使用 GFS2 追踪点和 debugfs glocks 文件调试 GFS2
    文件系统](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/configuring_gfs2_file_systems/index?lb_target=production#assembly_debugging-gfs2-with-tracepoints-creating-mounting-gfs2){.link}
-   [使用 Performance Co-Pilot
    监控性能](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/monitoring_and_managing_system_status_and_performance/monitoring-performance-with-performance-co-pilot_monitoring-and-managing-system-status-and-performance){.link}
-   [Performance
    Co-Pilot(PCP)文章、解决方案、教程和白皮书的索引](https://access.redhat.com/articles/1145953){.link}
:::
:::
:::