title:Dynamic Reconstruction of Relocation Information for Stripped Binaries
author:Vasilis Pappas and
Michalis Polychronakis and
Angelos D. Keromytis
Dynamic Reconstruction of Relocation
Information for Stripped Binaries
Vasilis Pappas, Michalis Polychronakis, and Angelos D. Keromytis
{vpappas,mikepo,angelos}@cs.columbia.edu
Columbia University
Abstract. Address Space Layout Randomization (ASLR) is a widely
used technique for the prevention of code reuse attacks. The basic con-
cept of ASLR is to randomize the base address of executable modules at
load time. Changing the load address of modules is also often needed for
resolving conﬂicts among shared libraries with the same preferred base
address. In Windows, loading a module at an arbitrary address depends
on compiler-generated relocation information, which speciﬁes the abso-
lute code or data addresses in the module that must be adjusted due
to the module’s relocation at a non-preferred base address. Relocation
information, however, is often stripped from production builds of legacy
software, making it more susceptible to code-reuse attacks, as ASLR is
not an option.
In this paper, we introduce a technique to enable ASLR for executa-
bles with stripped relocation information by incrementally adjusting stale
absolute addresses at runtime. The technique relies on runtime monitor-
ing of memory accesses and control ﬂow transfers to the original location
of a relocated module using page table manipulation techniques. De-
pending on the instruction and memory access type, the system identiﬁes
stale oﬀsets, reconstructs their relocation information, and adjusts them
so that subsequent accesses to the same locations proceed directly, with-
out any intervention. To improve performance further, the reconstructed
relocation information is preserved across subsequent runs of the same
program. We have implemented a prototype of the proposed technique for
Windows XP, which is transparently applicable to third-party stripped
binaries, and have experimentally evaluated its performance and eﬀec-
tiveness. Our results demonstrate that incremental runtime relocation
patching is practical, incurs modest runtime overhead for initial runs of
protected programs, and has negligible overhead on subsequent runs.
1
Introduction
Keeping systems up-to-date with the latest patches, updates, and operating sys-
tem versions, is a good practice for eliminating the threat of exploits that rely
on previously disclosed vulnerabilities. Major updates or newer versions of oper-
ating systems and applications also typically come with additional or improved
security protection and exploit mitigation technologies, such as the stack buﬀer
overrun detection (/GS), data execution prevention (DEP), address space layout
A. Stavrou et al. (Eds.): RAID 2014, LNCS 8688, pp. 68–87, 2014.
c(cid:2) Springer International Publishing Switzerland 2014
Dynamic Reconstruction of Relocation Information
69
randomization (ASLR), and many other protections of Windows [27], which help
in defending against future exploits.
At the same time, however, updates and patches often result in compatibility
issues, reliability problems, and rising deployment costs. Administrators are usu-
ally reluctant to roll out new patches and updates before conducting extensive
testing and cost-beneﬁt analysis [34], while old, legacy applications may simply
not be compatible with newer OS versions. It is indicative that although Win-
dows XP SP3 went out of support on April 8th, 2014 [7], many home users,
organizations, and systems still rely on it, including the majority of ATMs [1].
In fact, the UK and Dutch governments we forced to negotiate support for Win-
dows XP past the cutoﬀ date, to allow public-sector organizations to continue
receiving critical security updates for one more year [6].
As a step towards enhancing the security of legacy programs and operating
systems that do not support the most recent exploit mitigation technologies,
application hardening tools such as Microsoft’s EMET (Enhanced Mitigation
Experience Toolkit) [25] can be used to retroﬁt these and even newer (sometimes
more experimental) protections on third-party legacy applications. An important
such protection is address space layout randomization, which aims to defend
against exploitation techniques based on code reuse, such as return-to-libc [15]
and return-oriented programming (ROP) [36].
ASLR randomizes the load address of executables and DLLs to prevent at-
tackers from using data or code residing at predictable locations. In Windows,
though, this is only possible for binaries that have been compiled with relocation
information. In contrast to Linux shared libraries and PIC executables, which
contain position-independent code and can be easily loaded at arbitrary loca-
tions, Windows portable executable (PE) ﬁles contain absolute addresses, e.g.,
immediate instruction operands or initialized data pointers, that are valid only
if an executable has been loaded at its preferred base address. If the actual load
address is diﬀerent, e.g., because another DLL is already loaded at the preferred
address or due to ASLR, the loader adjusts all ﬁxed addresses appropriately
based on the relocation information included in the binary.
Unfortunately, PE ﬁles that do not carry relocation information cannot be
loaded at any address other than their preferred base address, which is speci-
ﬁed at link time. Relocation information is often stripped from release builds,
especially in legacy applications, to save space or hinder reverse engineering.
Furthermore, in 32-bit Windows, it is not mandatory for EXE ﬁles to carry
relocation information, as they are loaded ﬁrst, and thus their preferred base
address is always available in the virtual address space of the newly created
process. For these reasons, tools like EMET unavoidably fail to enforce ASLR
for executables with stripped relocation information. Consequently, applications
with stripped relocation information may remain vulnerable to code reuse at-
tacks, as DEP alone can protect only against code injection attacks. Further-
more, recently proposed protection mechanisms for Windows applications rely
on accurate code disassembly, which depends on the availability of relocation
information, to apply control ﬂow integrity [45] or code randomization [28].
70
V. Pappas, M. Polychronakis, and A.D. Keromytis
In this work, we present a technique for reconstructing the missing relocation
information from stripped binaries, and enabling safe address space layout ran-
domization for executables which are currently incompatible with forced ASLR.
The technique is based on discovering at runtime any stale absolute addresses
that need to be modiﬁed according to the newly chosen load address, and apply-
ing the necessary ﬁxups, replicating in essence the work that the loader would
perform if relocation information were present. As transparency is a key require-
ment for the practical applicability of protections tailored to third-party appli-
cations, the proposed approach relies only on existing operating system facilities
(mainly page table manipulation) to monitor and intercept memory accesses to
locations that need ﬁxup.
We have evaluated the performance and eﬀectiveness of our prototype imple-
mentation using the SPEC benchmark suite, as well as several Windows applica-
tions. Based on our results, incremental runtime relocation patching is practical,
incurs modest runtime overhead for initial runs of protected programs, and has
negligible overhead on subsequent runs, as the reconstructed relocation informa-
tion is preserved. Besides forced ASLR, the proposed technique can also be used
to resolve conﬂicts between stripped binaries with overlapping load addresses,
a problem that occasionally occurs when running legacy applications, and to
signiﬁcantly improve code disassembly.
The main contributions of this work are:
– We present a technique for dynamically reconstructing missing relocation in-
formation from stripped binaries. Our technique can be used to enable forced
ASLR or or resolve base address conﬂicts for third-party non-relocatable bi-
naries.
– We have implemented the proposed approach as a self-contained software
hardening tool for Windows applications, and describe in detail its design
and implementation.
– We have experimentally evaluated the performance and correctness of our
approach using standard benchmarks and popular applications, and demon-
strate its eﬀectiveness.
2 Background
The wide support for non-executable memory page protections [27, 30] in recent
operating systems and processors has given rise to code reuse attacks, such as
return-to-libc [15] and return-oriented programming (ROP) [36], which allow
the exploitation of memory corruption vulnerabilities by transferring control to
code that already exists in the address space of the vulnerable process. Return-
oriented programming, in particular, has become the primary exploitation tech-
nique for achieving arbitrary code execution against Windows applications. In
contrast to return-to-libc, the reused code in ROP exploits consists of small
instruction sequences, called gadgets, scattered throughout the executable seg-
ments of the targeted process.
Dynamic Reconstruction of Relocation Information
71
To reuse code that already exists in the address space of a vulnerable pro-
cess, an attacker needs to rely on a priori knowledge of its exact location (al-
though in some cases the location of code can be inferred dynamically dur-
ing exploitation [8, 10, 20, 23, 35, 42, 43]). Address space layout randomization
(ASLR) [11, 27, 29] protects against code reuse attacks by randomizing the lo-
cation of loaded executable modules, breaking the assumptions of the attacker
about the location of any code of interest. Besides address space randomization,
process diversity [13, 16] can also be increased by randomizing the code of ex-
ecutable segments, e.g., by permuting the order of functions [2, 11, 12, 22] and
basic blocks [3, 5], or by randomizing the code itself [19, 28, 44].
In Windows, which is the main focus of this work, ASLR support was in-
troduced in Windows Vista. By default, it is enabled only for core operating
system binaries and programs that have been conﬁgured to use it through the
/DYNAMICBASE linker switch. For legacy applications, not compiled with ASLR
support and other protection features, Microsoft has released the Enhanced Mit-
igation Experience Toolkit (EMET) [25], which can be used to retroﬁt ASLR
and other exploit mitigation technologies on third-party applications. A core
feature of EMET is Mandatory ASLR, which randomizes the load address of
modules even if they have not been compiled with the /DYNAMICBASE switch,
but do include relocation information. This is particularly important for appli-
cations that even though have opted for ASLR, may include some DLLs that
remain in static locations, which are often enough for mounting code reuse at-
tacks [17, 21, 47]. EMET’s ASLR implementation also provides higher random-
ization entropy through additional small memory allocations at the beginning of
a module’s base address. Many of the advanced ASLR features of EMET have
been incorporated as native functionality in Windows 8, including forced ASLR.
The above recent developments, however, are not always applicable on legacy
executables. Typically, when creating a PE ﬁle, the linker assumes that it will
be loaded to a speciﬁc memory location, known as its preferred base address.
To support loading of modules at addresses other than their preferred base ad-
dress, PE ﬁles may contain a special .reloc section, which contains a list of
oﬀsets (relative to each PE section) known as “ﬁxups” [38]. The .reloc section
contains a ﬁxup for each absolute addresses at which a delta value needs to be
added to maintain the correctness of the code in case the actual load address is
diﬀerent [32]. Although DLLs typically contain relocation information, release
builds of legacy applications often strip .reloc sections to save space or hinder
reverse engineering. This can be achieved by providing the /FIXED switch at
link time. Furthermore, in older versions of Visual Studio, the linker by default
omits relocation information for EXEs when performing release builds, as the
main executable is the ﬁrst module to be loaded into the virtual address space,
and thus its preferred base address is always expected to be available.
As modules (either EXEs or DLLs) with stripped relocation information can-
not be loaded at arbitrary addresses, the OS or tools like EMET cannot protect
them using ASLR. Legacy applications may also occasionally encounter address
conﬂicts due to diﬀerent modules that attempt to use the same preferred base
72
V. Pappas, M. Polychronakis, and A.D. Keromytis
address. Our system aims to enable the randomization of the load address of
modules with stripped relocation information by incrementally adjusting stale
absolute addresses at runtime.
3 Approach
Our approach to the problem of relocating stripped binaries relies on recon-
structing the missing relocation info by discovering such relocatable oﬀsets at
runtime. We note here that a static approach, i.e., using disassembly to ﬁnd all
the relocatable oﬀsets, would be much more diﬃcult, if not infeasible in many
cases—the reason being that stripped binaries also lack debugging symbols, so
complete disassembly coverage would be impossible in most cases.
3.1 Overview
The basic idea of our approach is to load the stripped binary at a random location
and monitor any data accesses or control transfers to its original location. Any
such access to the original location is either a result of using a relocatable oﬀset
or an attack attempt (the attacker might try to reuse parts of the original code,
not knowing that the binary was relocated). The next step is to identify the
source of the access by checking whether it was indeed caused by a relocatable
oﬀset. In this case, the oﬀset it located, its value is ﬁxed to the new random
base, and the relocation info is reconstructed so as next time the same program
is executed a ﬁxup for that address can be automatically applied.
Although there are a few diﬀerent ways to monitor memory access and con-
trol transfers at runtime, we followed an approach that minimizes its eﬀects
and dependencies on third-party components. For instance, instruction-level dy-
namic binary instrumentation was not considered for this reason, as it requires
the installation of third-party dynamic binary instrumentation frameworks (and
typically incurs a prohibitively high runtime overhead). Our monitoring facility
is built around basic operating system functionality, mostly memory protection
mechanisms. More precisely, after a binary is loaded to a random location, we
change the permissions of its original location to inaccessible, so as each time
a memory access or control transfer happens to one of the original locations, a
memory violation exception is raised. This type of exception usually contains
the location of the instruction that caused it, the faulting address (can be the
same as the instruction location), and the type of access (read or write).
The main challenge of our approach now becomes to identify whether an access
to the original binary location is caused by a relocatable oﬀset and how to trace
it back to that oﬀset. To better explain this issue, consider the following example.
Assume that an instruction updates the contents of a global variable using its
absolute address (e.g., 0x1000). When the instruction is executed from the new,
randomly chosen location of the binary, an exception will be raised. At this point,
we know the location of the instruction and the faulting address (0x1000). After
analyzing the faulting instruction, we see that one of its operands is actually the
Dynamic Reconstruction of Relocation Information
73
faulting address. In this case, we have to ﬁx the operand by adjusting it to the
new random base, and also reconstruct the relocation info of this oﬀset.
The example above is the most straightforward case of identifying a relocat-
able oﬀset. In practice, in most cases the relocatable oﬀset is not part of the
faulting instruction. For example, consider the case of dereferencing a global
pointer. There is an instruction to load the value of the pointer, probably in a
register, and another instruction to read the contents of the memory location
stored in the register. In this case, the faulting address is not directly related
with the faulting instruction. Even worse, there are cases in which the relocat-
able oﬀset has been changed before it is used. For example, accessing a ﬁeld from
a structure in a global array would only require a single relocatable address (the
location of the array) and would result in many runtime accesses within the
range of the array. It is very diﬃcult to trace such an access reliably back to its
source relocatable oﬀset.
However, code-reuse attacks rely solely on the knowledge of the code’s loca-
tion, regardless of the location of data. Based on this observation, and due to
the problematic nature of data pointer tracing, we focus on randomizing the
load address of code segments only. Code pointers are usually guaranteed not
to support any arithmetic—it would be diﬃcult to imagine code that depends
on expressions such as adding a few bytes to the location of a function start,
at least for compiler-generated code. An exception to this is jump tables that
contain relative oﬀsets, but this is a case that can be easily covered, as we will
see later on. This simpliﬁes the overall approach, without sacriﬁcing any of the
security guarantees.
Figure 1 shows a high-level overview of our approach. When a stripped binary
is loaded for execution (left side), its code segment is moved to a random location,
while the original location becomes inaccessible (right side). Then, whenever
there is a memory access or control transfer to the original location (solid arrow),
the faulting address along with the instruction that caused it are analyzed. Based
on this analysis, the source relocatable oﬀset is pinpointed, gets ﬁxed, and its
relocation information is reconstructed. In the following, we describe in more
detail how this analysis is being performed.
3.2 Access Analysis
The series of steps performed after a memory access violation exception is raised
due to a memory access in the original code location is depicted in Figure 2.
Broadly speaking, access violations are grouped into two categories based on
their root cause: (i) reading the contents of the original code segment, and (ii)
control transfers to the original code segment. To distinguish between the two,
the system checks whether the value of the instruction pointer is within the
original code segment.
In practice, the ﬁrst case corresponds mostly to indirect jump instructions
that read their target from the code segment. These are typically part of jump