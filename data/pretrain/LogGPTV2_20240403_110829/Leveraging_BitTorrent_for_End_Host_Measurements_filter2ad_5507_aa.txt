title:Leveraging BitTorrent for End Host Measurements
author:Tomas Isdal and
Michael Piatek and
Arvind Krishnamurthy and
Thomas E. Anderson
Leveraging BitTorrent for End Host Measurements
Tomas Isdal, Michael Piatek, Arvind Krishnamurthy, and Thomas Anderson
Department of Computer Science and Engineering
University of Washington, Seattle, WA, 98195
Abstract. Traditional methods of conducting measurements to end hosts require
sending unexpected packets to measurement targets. Although existing techniques
can ascertain end host characteristics accurately, their use in large-scale measure-
ment studies is hindered by the fact that unexpected trafﬁc can trigger alarms in
common intrusion detection systems, often resulting in complaints from adminis-
trators. We describe BitProbes, a measurement system that works around this chal-
lenge. By coordinated participation in the popular peer-to-peer BitTorrent system,
BitProbes is able to unobtrusively measure bandwidth capacity, latency, and topol-
ogy information for ∼500,000 end hosts per week from only eight vantage points
at the University of Washington. To date, our measurements have not generated a
single complaint in spite of their wide coverage.
1 Introduction
Detailed estimates of Internet path properties allow applications to improve perfor-
mance. Content distribution networks (CDNs) such as Coral [1], CoDeeN [2] and
Akamai [3] use topology information to redirect clients to mirrors that provide the
best performance. Peer-to-peer services such as Skype [4] and BitTorrent [5] can use
knowledge of both the core and the edge to optimize peer selection, improving end-user
performance [6]. Overlay services such as RON [7] optimize routes based on metrics
such as loss rate, latency, or bandwidth capacity to allow applications to select routes
based on speciﬁc needs.
Although valuable, large-scale measurement of edge characteristics is encumbered
by uncooperative or even hostile hosts. End hosts are often ﬁrewalled, making them un-
responsive to active probing and ruling out many of the tools commonly used for map-
ping the Internet core. Further, administrators frequently mistake measurement probes
for intrusion attempts, raising alarms in intrusion detection systems (IDSs). To avoid
these problems, researchers have been forced to take alternate approaches when measur-
ing end hosts. Systems such as PlanetSeer [8] take an opportunistic approach to end host
measurement. PlanetSeer infers link properties by passively monitoring existing TCP
connections between a centralized content provider and end hosts. By piggybacking
measurements on existing, expected trafﬁc, an opportunistic approach allows measure-
ment of end hosts without triggering alarms in IDSs. Although successful, these sys-
tems are limited by the popularity of the service offered and require content providers to
instrument servers with custom measurement software. This method has the additional
drawback that the majority of data is transferred from the server to the end host, making
accurate measurements of the end hosts upload capacity impossible.
S. Uhlig, K. Papagiannaki, and O. Bonaventure (Eds.): PAM 2007, LNCS 4427, pp. 32–41, 2007.
c(cid:2) Springer-Verlag Berlin Heidelberg 2007
Leveraging BitTorrent for End Host Measurements
33
Drawing inspiration from these, we consider an alternative platform for attracting
measurement targets: the BitTorrent peer-to-peer system. BitTorrent has several desir-
able features for such a platform. It is extremely popular, suggesting wide coverage.
Also, its normal operation involves sending a large number of data packets over TCP
connections in both directions, making those connections amenable to inspection by
measurement tools.
performs large scale measurements to end hosts using BitTorrent.
We develop a tool aimed at leveraging BitTorrent for large-scale Internet measure-
ments and make the following contributions:
• We present the design, implementation, and evaluation of BitProbes, a system that
• BitProbes discovers ∼500,000 unique measurement targets in a single week, an order
• By using features of the BitTorrent protocol, BitProbes attracts trafﬁc from end hosts
that it uses to measure upload capacity, latency, and network topology. To the best of
our knowledge, it is the ﬁrst system that elicits TCP streams from non-webservers.
• We determine the bandwidth distribution for end hosts, updating a previous study of
• BitProbes collects comprehensive logs of BitTorrent protocol trafﬁc and client be-
havior. We make anonymized versions of these logs public and present a surprising
immediate fallout from their analysis in Sect. 4.5. Speciﬁcally, peer capacity is an
uncertain predictor of performance in BitTorrent.
of magnitude more than previous systems.
Gnutella users collected in 2002 [9].
2 BitTorrent Overview
BitTorrent is a peer-to-peer ﬁle distribution tool that has seen a surge in popularity in
recent years [10]. In this section, we describe the features of the BitTorrent protocol that
make it amenable to end host measurements. A complete description of the BitTorrent
protocol is beyond the scope of this paper, but is readily available [5,11].
For the purpose of Internet measurement, two parts of the protocol speciﬁcation are
relevant: how peers discover one another and exchange control information and when
peers are permitted to send and receive ﬁle data.
2.1 Data and Availability Messages
BitTorrent is a request driven protocol. To initially connect to a swarm, a client ﬁrst
contacts a centralized coordinator called the tracker. The tracker maintains a list of
currently active peers and provides a random subset to clients upon request. The client
will then initiate TCP connections with the peers returned by the tracker. Clients then
request small pieces (typically 64–512 KB) of the complete ﬁle from directly connected
peers that possess them. When the download of any one small piece completes, a client
is required to notify its connected peers that it has new data available for relay via
a have message. By serving these small pieces of the whole ﬁle, peers assist in its
distribution before completing the download themselves.
In addition to per-piece updates between directly connected peers, availability infor-
mation is also exchanged after the handshake between two newly connected peers via a
34
T. Isdal et al.
BitField message. This message allows newly connected peers to efﬁciently update
each other’s views of pieces available for request.
By monitoring the BitField and have messages a peers broadcasts, it is possible
to infer the download rate of that peer by multiplying the rate at which have messages
are sent by the known size of each piece. We use this technique in the instrumented
BitTorrent client of BitProbes, enabling measurement of not only the properties of end
hosts but also information regarding BitTorrent application level behavior.
2.2 Choking, Unchoking, and Optimistic Unchokes
A noted feature of BitTorrent is its support for robust incentives for contribution, achieved
via a tit-for-tat (TFT) reciprocation policy. Informally, a peer preferentially sends data
to those peers that have recently sent it data. This has the effect that the more a peer
contributes to the swarm, the faster the download rate of that peer will be. Before a peer
Q is permitted to request data from a peer P , Q must receive an unchoked message
from P , meaning that its requests are permitted and will be serviced. If, later, P notices
that Q is sending data more slowly than other peers, P will send a choke message to Q,
indicating that it can no longer make requests.
The problem with a pure TFT approach is that it provides no reason for an exist-
ing client to unchoke a newly joined peer as that peer does not have any pieces with
which to reciprocate. To work around this difﬁculty and bootstrap new users, the Bit-
Torrent protocol includes so-called optimistic unchokes. Every 30 seconds, each client
randomly selects a member of its peer set to unchoke. This serves two purposes; it helps
to bootstrap new peers so that they can contribute their resources. Also, it allows each
peer to search the set of available peers for those willing to reciprocate with greater
capacity. For the purpose of end-host measurements, optimistic unchokes are crucial.
3 BitProbes Design and Implementation
BitProbes provides a platform for conducting large-scale measurements of end hosts.
By layering a measurement infrastructure on top of BitTorrent swarms associated with
popular ﬁles, BitProbes leverages the willing participation of end-users to quickly dis-
cover measurement target. This section discusses the BitProbes architecture and the
challenges associated with layering a measurement infrastructure on BitTorrent.
3.1 Attracting Trafﬁc
The key to achieving broad coverage of end hosts is making sure that the BitTorrent
swarms that BitProbes targets have a large number of participants. To this end, we
crawl several popular websites that aggregate swarm connection information and user
statistics. We rank these by total users and assign the most popular to measurement
nodes running our instrumented BitTorrent client. We do not store or serve any content
obtained. This allows BitProbes to connect to the full range of popular swarms since
the risk of distributing copyrighted material is eliminated.
BitProbes relies exclusively on optimistic unchokes to induce measurement targets
to willingly send large packets ﬁlled with piece data. As a result, the behavior of
Leveraging BitTorrent for End Host Measurements
35
the BitProbes client is optimized to maximize optimistic unchokes. First, we increase
the size of the directly connected peer set. Most BitTorrent implementations maintain
50–100 simultaneous connections per swarm. To increase the likely number of opti-
mistic unchokes, BitProbes increases this limit to 1000. The actual connection count is
limited by the number of users in each torrent, but a few hundred directly connected
peers per torrent is not uncommon. Second, we connect to many peers brieﬂy. During
our measurements, we observed that many BitTorrent client implementations quickly
unchoke new connections for a single round without reciprocation, but rarely there-
after. Fortunately BitProbes does not require a large amount of data to be able to make
measurements. To limit the resources consumed, both in the swarm and for the nodes
running BitProbes, we will disconnect a peer after receiving 2 MB of data.
A challenge is that the trackers from which BitProbes receives candidate peers often
specify a minimum time between requests. This time is usually 10 minutes. To increase
the number of peers to which each measurements node can connect, BitProbes main-
tains a shadow tracker to share peer information among measurement vantage points.
Each measurement node relays all peer information obtained from trackers to the single
shadow tracker. The shadow tracker is queried every minute by all measurement nodes
to increase their lists of candidate targets. In addition to increasing the number of can-
didate targets for each measurement node, the shadow tracker also minimizes probing
by preferentially selecting only those targets yet to be measured.
3.2 Performing Measurements
BitProbes is designed to provide a wide ranging set of measurement targets to any tool
that operates on timed packets from TCP connections. Each measurement node runs a
packet logging tool that records packets from BitTorrent TCP connections and passes
them to a given measurement tool. Many of the available techniques for transparently
measuring properties of Internet paths require an open TCP connection between the
target and the measuring node.
To evaluate the feasibility of our approach, the current BitProbes implementation fo-
cuses on upload capacity estimation using the MultiQ tool. MultiQ is known to be rea-
sonably accurate, providing 85% of measurements within 10% of actual capacity [12].
This accuracy comes at a price, however, as MultiQ requires traces from a “signiﬁcant
ﬂow” to provide a prediction. Fortunately, the large data packets obtained from Bit-
Torrent connections are sufﬁcient. We use the libpcap library to record kernel-level
timestamps of incoming packets for accuracy. The arrival times for MTU-sized packets
are then supplied to the MultiQ application, which reports the estimated upload capac-
ity. MultiQ is sometimes able to discover the capacity of multiple bottlenecks between
the measurement node and the end-host. We assume that the lowest capacity measured
is the access link capacity of the end host, even though it also can be due to a bottleneck
within the network or the capacity of the measurement node. It is therefore important
that the measurement nodes have a high capacity connection. To measure per-hop link
latencies and route information, we are currently experimenting with a technique simi-
lar to that used by TCP-Sidecar [13]. By injecting extra packets with the IP record route
option and varying TTL into an existing TCP stream, the probe packets appear as legit-
imate TCP packets both to the end host being probed and to any intermediate ﬁrewalls.
36
T. Isdal et al.
Although our extension of BitProbes to include this technique is ongoing, it serves as
an example of another measurement technique that can be integrated into the BitProbes
framework.
3.3 Analysis of BitTorrent Protocol Messages
In addition to end host behavior, layering our measurement infrastructure on BitTorrent
allows us to collect data regarding the BitTorrent protocol itself and its behavior in the
wild. For instance, we record trace data of have and BitField messages, allowing
us to infer download rates of peers. Correlating this data with capacity measurements
provides insight into the effectiveness of BitTorrent’s TFT incentive mechanism. We
discuss this in Section 4.5.
The trace logs are aggregated at a centralized database for easy access and a global
view of swarm behavior. In addition to capacity measurements, we also log all protocol
messages as well as tracker responses, peer arrivals and departures, and crawled swarm
ﬁle sizes and popularity. We make these anonymized versions of logs public.
4 Results
This section discusses initial results obtained with the BitProbes prototype. We show
that BitProbes quickly discovers a wide ranging set of measurement targets and that
BitTorrent’s opportunistic unchokes can furnish MultiQ with enough large packets to
provide capacity measurements.
Our measurement testbed includes eight machines running at the University of Wash-
ington. Each of these were running 40 instances of the modiﬁed BitTorrent client. The
results presented were collected between September 2nd and September 9th, 2006. Tor-
rent aggregation sites1 were crawled once every 12 hours to obtain candidate swarms.
4.1 Rate of Connections
BitProbes provides measurement targets in two forms. First, it collects a list of valid
candidate target IP addresses and ports on which those IPs expect to receive TCP traf-
ﬁc. Then, if an IP has no ﬁrewall blocking, or if port forwarding is properly set up,
we directly connect to the peer. Otherwise, in the case of a peer P behind a NAT, we