# Leveraging BitTorrent for End Host Measurements

**Authors:**
- Tomas Isdal
- Michael Piatek
- Arvind Krishnamurthy
- Thomas E. Anderson

**Department of Computer Science and Engineering, University of Washington, Seattle, WA, 98195**

## Abstract

Traditional methods of conducting measurements to end hosts often involve sending unexpected packets, which can trigger alarms in intrusion detection systems (IDSs) and lead to complaints from network administrators. We present BitProbes, a measurement system that overcomes this challenge by leveraging the popular peer-to-peer BitTorrent protocol. By participating in BitTorrent swarms, BitProbes can unobtrusively measure bandwidth capacity, latency, and topology information for approximately 500,000 end hosts per week from just eight vantage points at the University of Washington. Our measurements have not generated any complaints, despite their extensive coverage.

## 1. Introduction

Accurate estimates of Internet path properties are crucial for optimizing the performance of various applications. Content distribution networks (CDNs) such as Coral, CoDeeN, and Akamai use topology information to redirect clients to the most efficient mirrors. Peer-to-peer services like Skype and BitTorrent can improve user experience by selecting optimal peers based on both core and edge network characteristics. Overlay services like RON optimize routes using metrics such as loss rate, latency, and bandwidth capacity.

However, large-scale measurement of edge characteristics is challenging due to uncooperative or hostile hosts. Many end hosts are firewalled, making them unresponsive to active probing. Additionally, administrators often mistake measurement probes for intrusion attempts, leading to false alarms in IDSs. To address these issues, researchers have developed alternative approaches, such as PlanetSeer, which passively monitors existing TCP connections between a centralized content provider and end hosts. While effective, these systems are limited by the popularity of the service and require custom instrumentation of servers, which also hinders the measurement of upload capacities.

Inspired by these challenges, we propose an alternative platform for attracting measurement targets: the BitTorrent peer-to-peer system. BitTorrent is highly popular, ensuring wide coverage, and its normal operation involves sending a large number of data packets over TCP connections in both directions, making it suitable for inspection by measurement tools.

We develop BitProbes, a tool designed to leverage BitTorrent for large-scale Internet measurements, and make the following contributions:
- **Design, Implementation, and Evaluation:** We present the design, implementation, and evaluation of BitProbes, a system that performs large-scale measurements to end hosts using BitTorrent.
- **Scalability:** BitProbes discovers approximately 500,000 unique measurement targets in a single week, significantly more than previous systems.
- **Measurement Capabilities:** By using features of the BitTorrent protocol, BitProbes attracts traffic from end hosts, enabling the measurement of upload capacity, latency, and network topology. It is the first system to elicit TCP streams from non-webservers.
- **Bandwidth Distribution:** We determine the bandwidth distribution for end hosts, updating a previous study of Gnutella users collected in 2002.
- **Data Collection and Analysis:** BitProbes collects comprehensive logs of BitTorrent protocol traffic and client behavior. We make anonymized versions of these logs public and present surprising findings in Section 4.5, specifically that peer capacity is an uncertain predictor of performance in BitTorrent.

## 2. BitTorrent Overview

BitTorrent is a peer-to-peer file distribution tool that has gained significant popularity in recent years. For the purpose of Internet measurement, two key aspects of the BitTorrent protocol are relevant: how peers discover each other and exchange control information, and when they are permitted to send and receive file data.

### 2.1 Data and Availability Messages

BitTorrent is a request-driven protocol. To connect to a swarm, a client first contacts a centralized tracker, which maintains a list of active peers and provides a random subset upon request. The client then initiates TCP connections with the peers. Clients request small pieces (typically 64–512 KB) of the complete file from directly connected peers. Upon completing the download of a piece, a client sends a "have" message to notify its connected peers that it has new data available. This allows peers to assist in file distribution before completing their own downloads.

Additionally, availability information is exchanged via a "BitField" message after the handshake between two newly connected peers. By monitoring "BitField" and "have" messages, it is possible to infer the download rate of a peer. BitProbes uses this technique to measure both end host properties and BitTorrent application-level behavior.

### 2.2 Choking, Unchoking, and Optimistic Unchokes

BitTorrent employs a tit-for-tat (TFT) reciprocation policy to incentivize contribution. A peer preferentially sends data to those that have recently sent it data. Before a peer Q can request data from a peer P, Q must receive an "unchoked" message from P. If P notices that Q is sending data more slowly than other peers, P will send a "choke" message to Q, preventing further requests.

To bootstrap new peers, BitTorrent includes "optimistic unchokes." Every 30 seconds, each client randomly selects a member of its peer set to unchoke, allowing new peers to contribute and enabling each peer to find those willing to reciprocate with greater capacity. For end-host measurements, optimistic unchokes are crucial.

## 3. BitProbes Design and Implementation

BitProbes provides a platform for conducting large-scale measurements of end hosts by layering a measurement infrastructure on top of BitTorrent swarms associated with popular files. This section discusses the BitProbes architecture and the challenges associated with integrating a measurement infrastructure into BitTorrent.

### 3.1 Attracting Traffic

To achieve broad coverage, BitProbes targets BitTorrent swarms with a large number of participants. We crawl popular websites that aggregate swarm connection information and user statistics, ranking them by total users and assigning the most popular to measurement nodes running our instrumented BitTorrent client. We do not store or serve any content, eliminating the risk of distributing copyrighted material.

BitProbes relies on optimistic unchokes to induce measurement targets to send large packets filled with piece data. To maximize the likelihood of optimistic unchokes, BitProbes increases the size of the directly connected peer set to 1000 (compared to the typical 50–100). We also connect to many peers briefly, disconnecting after receiving 2 MB of data to limit resource consumption.

A challenge is that trackers often specify a minimum time between requests, typically 10 minutes. To increase the number of peers to which each measurement node can connect, BitProbes maintains a shadow tracker to share peer information among measurement vantage points. Each measurement node relays all peer information obtained from trackers to the shadow tracker, which is queried every minute to increase the lists of candidate targets. The shadow tracker also minimizes probing by preferentially selecting only those targets yet to be measured.

### 3.2 Performing Measurements

BitProbes is designed to provide a wide range of measurement targets to any tool that operates on timed packets from TCP connections. Each measurement node runs a packet logging tool that records packets from BitTorrent TCP connections and passes them to a given measurement tool. Many techniques for measuring Internet path properties require an open TCP connection between the target and the measuring node.

To evaluate the feasibility of our approach, the current BitProbes implementation focuses on upload capacity estimation using the MultiQ tool. MultiQ is known to be reasonably accurate, providing 85% of measurements within 10% of actual capacity. We use the libpcap library to record kernel-level timestamps of incoming packets for accuracy. The arrival times for MTU-sized packets are supplied to the MultiQ application, which reports the estimated upload capacity. We assume that the lowest capacity measured is the access link capacity of the end host, although it could also be due to a bottleneck within the network or the capacity of the measurement node.

To measure per-hop link latencies and route information, we are experimenting with a technique similar to that used by TCP-Sidecar. By injecting extra packets with the IP record route option and varying TTL into an existing TCP stream, the probe packets appear as legitimate TCP packets to both the end host and intermediate firewalls.

### 3.3 Analysis of BitTorrent Protocol Messages

Layering our measurement infrastructure on BitTorrent allows us to collect data regarding the BitTorrent protocol itself and its behavior in the wild. We record trace data of "have" and "BitField" messages, allowing us to infer download rates of peers. Correlating this data with capacity measurements provides insight into the effectiveness of BitTorrent’s TFT incentive mechanism, discussed in Section 4.5.

The trace logs are aggregated in a centralized database for easy access and a global view of swarm behavior. In addition to capacity measurements, we log all protocol messages, tracker responses, peer arrivals and departures, and crawled swarm file sizes and popularity. Anonymized versions of these logs are made public.

## 4. Results

This section discusses initial results obtained with the BitProbes prototype. We show that BitProbes quickly discovers a wide range of measurement targets and that BitTorrent’s opportunistic unchokes can provide enough large packets for capacity measurements.

Our measurement testbed includes eight machines running at the University of Washington, each running 40 instances of the modified BitTorrent client. The results presented were collected between September 2nd and September 9th, 2006. Torrent aggregation sites were crawled every 12 hours to obtain candidate swarms.

### 4.1 Rate of Connections

BitProbes provides measurement targets in two forms. First, it collects a list of valid candidate target IP addresses and ports. Then, if an IP has no firewall blocking or proper port forwarding, we directly connect to the peer. Otherwise, for a peer P behind a NAT, we...