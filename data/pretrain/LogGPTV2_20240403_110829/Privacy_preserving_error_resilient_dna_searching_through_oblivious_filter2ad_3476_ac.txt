for B can be reduced to O (N · min(|Q|, |Σ|)).
4.3 Extension to Transducers
The basic protocol described above can be extended to
transducers, while keeping the same order of complexity.
This can be achieved by including some additional steps at
each state transition, and omitting the last subprotocol (an-
nouncement of results).
Following the notation of Section 2.2, the modiﬁcations
for implementing each type of transducers are described in
the following:
• Moore machines: The output depends only on the cur-
that λj holds the output for the state j.
rent state, so A will have a vector λ ∈ `Z|Π|´|Q|, such
For the initial step, the output is trivial (λ(q0)), and it
can be sent to B. For the k-th state transition protocol,
a modiﬁcation must be made in its third step, in which
besides the homomorphic calculation of ∆(k) · e(k), A
also rotates λ
λ(k)(j + r(k)
a
mod |Q|) = λj ,
computes the encryption of “λ(k)”t
· e(k), and sends
the result (one encrypted scalar) to B.
• Mealy machines: In this case, the output depends on
the state and the input, so A will have a matrix Λ ∈
M|Σ|×|Q|(Z|Π|), such that Λ(i, j) gives the output for
input i and state j.
In the ﬁrst state transition, two OT|Σ|
are run in par-
allel on vectors v(0) and column q0 of Λ. This gives
B the blinded ﬁrst transition and the corresponding
output.
1
For the k-th state transition protocol, its third step
must be modiﬁed, such that besides the homomorphic
calculation of ∆(k) · e(k), A also rotates Λ
Λ(k)(i, j + r(k)
a
mod |Q|) = Λ(i, j),
and computes the encryption of w(k) = Λ(k) · e(k);
the following OT|Σ|
1 protocol is run in parallel on both
vectors v(k) and w(k).
4.4 Security
In this section we analyze the security of the presented
protocol. Due to the asymmetry of the problem in terms of
inputs to the protocol, the security deﬁnitions are slightly
diﬀerent from the framework commonly used for general
two-party computation. Nevertheless, the problem can be
restated as two-party computation in the following way.
Let G be a functionality that, given the description of
a function as a FSM f (.) ≡ (Q, Σ, ∆, q0, F ) and its input
x, gives as output G[f (.), x] = f (x). Then, the problem
for the asymmetric function evaluation may be stated as a
two-party computation problem in which party A holds the
input f (.), and party B holds the input x; both parties want
to evaluate G on their inputs.
In this paper we assume the semi-honest attacker model,
where neither party deviates from the protocol execution,
but try to infer some information about the other party’s
inputs. Note that the protocol allows A to infer N and
B to infer (f (x), |Q|), as this information can be obtained
by inspecting the output of the protocol, the length of the
computation and the amount of transmitted information.
The goal is to show that all the information that each party
can infer from the execution of the protocol about the other
party’s input is no more than what they could infer from the
above mentioned quantities. For A, the framework is exactly
the same as in the general two-party computation case: A
should be unable to decide which length-N string over Σ was
used by B as input. For B, we will informally consider the
protocol to be secure, if B cannot extract from his output
more information about the tuple (∆, q0, F ) than he would
be able to infer from the output of the automaton when it is
run as a black box. More formally, we can state the following
deﬁnition, using a standard simulation argument:
Definition 1. We say that a protocol Π privately evalu-
ates A’s FSM M = (Q, Σ, ∆, q0, F ) on B’s input string x
if, given the views for both parties
V Π
V Π
A = ((|Q|, |Σ|, ∆, q0, F ), m1, . . . , mt, N )
B = ((|Q|, |Σ|, x), m1, . . . , mt, f (x)),
where mi is the i-th message interchanged between both par-
ties, N is the length of x, and f (x) is the output of the
automaton M , there exist two polynomial time algorithms
SA(|Q|, |Σ|, ∆, q0, F, N ) and SB(|Q|, |Σ|, x, f (x)) producing
simulated views, which are computationally indistinguishable
from the respective views of the parties, i.e.,
V Π
V Π
A ≡ SA(|Q|, |Σ|, ∆, q0, F, N )
B ≡ SB(|Q|, |Σ|, x, f (x)).
Considering semi-honest participants, we can state the fol-
lowing claim:
Claim 1. Using a semantically secure encryption scheme
and a secure OT primitive, the proposed protocol privately
evaluates A’s FSM on B’s input.
Proof. (Sketch) We will ﬁrst sketch a simulator SA for
A’s view of the protocol. The input to SA is given by
(|Q|, |Σ|, ∆, q0, F, N ). By our assumption of OT being se-
cure, we can assure the existence of two simulators Sc and
Ss, which produce views that are indistinguishable of those
of the chooser and the sender respectively. SA composes the
simulated view by ﬁrst using Ss to provide one OT view in
order to simulate the subprotocol corresponding to the ﬁrst
state transition; subsequently, it outputs N times (once for
each invocation of the state transition subprotocol) encryp-
tions of a random vector e(k) of length |Q| and an OT view
generated by Ss. Finally, SA uses Ss once more to simulate
the subprotocol announcing the result. Note that in the pro-
tocol a new fresh random value is generated at each state
transition for blinding the transition matrix and the current
state, thus the inputs to each OT protocol are statistically
blinded and mutually independent. Note further, that due
to the semantic security of the encryption scheme, the en-
cryptions of the random vector cannot be distinguished from
encryptions of the vectors sent by B in the protocol. A stan-
dard hybrid argument ﬁnally shows that the simulated view,
consisting of N +1 views of the OT and N encrypted vectors,
is computationally indistinguishable from A’s view.
It remains to construct a simulator SB on input (|Q|, |Σ|, x,
f (x)) for B’s view of the protocol, which proceeds along sim-
ilar lines as SA. The simulator uses Sc to produce B’s view of
the OT protocols and generates encrypted vectors indistin-
guishable from e(k), again thanks to the semantic security of
the encryption. Finally, for the announcement of the result,
the last OT is performed on a fake vector f whose elements
are all equal to the true output f (xB). The security of the
OT primitive guarantees the indistinguishability of the sim-
ulated view from B’s view (B cannot decide whether there is
a one or a zero in those positions diﬀerent to the chosen one),
while the output of the simulator is correct. Again, a hybrid
argument shows that the simulated view is computationally
indistinguishable from B’s view.
Furthermore, it is easy to see that the protocol is correct:
Claim 2. The proposed protocol correctly evaluates A’s
FSM on B’s input.
Proof. It is straightforward to see that each subprotocol
is correct: If both parties follow the protocol, the transition
function is correctly calculated at every step, and the output
is correctly computed. By induction, the claim follows.
L1(x)
Σ∗L1(x)Σ∗
L2(x)
Σ∗L2(x)Σ∗
2500
2000
1500
1000
500
s
e
t
a
t
S
f
o
r
e
b
m
u
N
0
5
10
15
20
25
35
Sequence Length
30
40
45
50
55
Figure 1: Number of states of the Levenshtein Automaton
and its extension, as a function of the sequence length (|xA|).
5. SECURE APPROXIMATE SEARCHING
AND MATCHING
In this section, we show how the problems of privacy-
preserving approximate DNA searching and matching, as
introduced in Section 2.1, can be solved using the protocol
for oblivious automata execution.
5.1 Searching and Matching by FSMs
Given a string xA, we use the method in [22] for comput-
ing a ﬁnite automaton LEV d(xA) that accepts all strings
that have at most Levenshtein distance d from xA. The re-
sulting minimal automaton is denoted degree d Levenshtein
automaton. By construction, LEV d(xA) is always acyclic.
We will denote the language accepted by this automaton
as Ld(xA). For a ﬁxed d, the algorithm for generating
LEV d(xA) given xA is linear in time and space in the length
of the string xA. The dependency on d can be at worst expo-
nential; however, d is usually a small parameter compared to
the length of xA for practical applications (like DNA search-
ing). In this way, the problem of calculating the Levenshtein
distance between two sequences xA and xB and comparing
it to a given threshold d gets reduced to the execution of the
computed automaton LEV d(xA) on input xB. This gives a
solution to the approximate matching problem.
Once the Levenshtein automaton for a given sequence is
generated, we extend it to accept the language Σ∗Ld(xA)Σ∗.
Thus, the resulting automaton accepts any string that con-
tains as substring any of the sequences accepted by the Lev-
enshtein automaton, thus solving the problem of approxi-
mate string searching, when the automaton is run on xB.
The advantage of using an automaton instead of a dy-
namic programming algorithm resides in the fact that an
automaton has predeﬁned transitions, and it does not need
any comparisons while traversing the input sequence. Com-
parisons are one of the most expensive operations under en-
cryption (as they reduce to instances of the Millionaire’s
problem). By using a ﬁnite automaton, all the comparisons
can be avoided, because they are all hard-wired in the au-
tomaton itself. Furthermore, using an automaton allows
the implementation of any matching problem represented
in the form of a regular expression, endowing our privacy-
preserving solution with a strong generality.
Even though the construction of the Levenshtein automa-
ton assures that the number of states of LEV d(xA) is linear
in the length of the sequence xA, computing the extended
automaton Σ∗Ld(xA)Σ∗ will increase its number of states.
Extending the Levenshtein automaton comprises two con-
catenations with Σ∗, the right one being trivial, as it only
involves adding self-loops in all the ﬁnal states. This right
concatenation cannot increase the number of states of the
automaton. Let us suppose that the Levenshtein automaton
has n states, t of them being acceptance states; by construc-
tion, the automaton is acyclic. Applying the right concate-
nation, all of the t acceptance states collapse to only one sink
acceptance state, and the rest of the states remain unaltered.
Thus, the resulting automaton after the right concatenation
has n − t + 1 states, one of them being the unique sink ac-
ceptance state, and the only cycles that the automaton has
are the self loops in this state.
Applying a known bound on the state complexity of the
concatenation of regular languages [25], the left concatena-
tion could increase the number of states of the automa-
ton by at most 2n−t. Nevertheless, this bound is a worst
case bound. We have found experimentally that the num-
ber of states usually grows linearly even after performing
the left concatenation, resulting the number of states of
the extended Levenshtein automaton being linear in the
length of the input sequence xA. As an example, Figure 1
shows the evolution of the number of states of the Leven-
shtein automaton LEV d(xA) and its extension to the lan-
guage Σ∗Ld(xA)Σ∗, as a function of the length of the se-
quence xA, for threshold Levenshtein distances of 1 and 2
errors. The plot was obtained using 100 random DNA se-
quences x for each length and averaging the number of states
of the obtained automata; it also shows the 95% conﬁdence
intervals. From this ﬁgure, it is clear that the state com-
plexity usually is linear in the length of the input sequence.
As a toy example, for the sequence xA = [actg], the Lev-
enshtein automaton for distance d = 1 is shown in Figure 2a,
while the extension to cope with arbitrary length sequences
is shown in Figure 2b. It is clear from this example that the
extension to arbitrary length sequences does not necessarily
imply an increase in the number of states of the automaton;
in this case, it even supposes a reduction, due to the short
length of the used pattern. Figure 2b also shows thicker
arcs for the transitions that the automaton makes when in-
putting the sequence [ttcggcgctgga], where the pattern is
present with one deletion, resulting in acceptance.
5.2 Secure Approximate Searching and
Matching for DNA Sequences
Let us recall the scenario of DNA searching: Two parties
A and B want to check if the DNA pattern xA (owned by A)
is approximately present in B’s DNA sequence xB, where
|xB| ≫ |xA|. Approximate presence means that the Edit
distance between xA and some substring of xB is less than
a given threshold d. The case of matching is similar, except
that |xB| ≈ |xA|.
To perform either matching or searching in a privacy-pre-
serving manner, both parties execute the following steps:
1. A builds the Levenshtein automaton LEV d(xA) corre-
sponding to his sequence xA, given a maximum al-
lowable distance d, following the procedure in [22],
t
a
c
g
g
g
2
3
g
g
4
g
t