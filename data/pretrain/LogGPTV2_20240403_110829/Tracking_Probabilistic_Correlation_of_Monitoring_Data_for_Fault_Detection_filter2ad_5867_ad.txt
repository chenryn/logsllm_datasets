### 优化后的文本

#### 残差计算
\[ \text{ir}_t = \begin{cases} 
0 & \text{if } \text{iR}_t < F \\
1 & \text{otherwise}
\end{cases} \tag{12} \]

\[ h_t = f(F(v_t) \cdot \theta(h_{t-1})) \]
\[ C_h = \sum_{\theta} v_t \]

在接收到固定窗口大小的 \( h \) 个时间窗口的监控数据后，我们可以使用以下公式计算置信度分数：
\[ C_h = \sum_{\theta} v_t \]

#### 自动模型搜索和验证过程
我们的自动模型搜索和验证程序首先为任意一对测量值构建模型，然后逐步用新的数据点来验证这些模型。经过一段时间后，如果某个特定关系的置信度分数低于选定的阈值，则认为该关系的模型无效，并放弃该模型。同时，我们继续测试那些表现良好的模型，并将它们作为故障检测中的参考模型。需要注意的是，在故障检测中，稳健的模型比置信度分数低的模型更可信。在互联网服务等运行环境中，我们总是有无尽的新数据用于模型的顺序测试。

### 故障检测实验
我们的测试系统具有典型的三层架构（如图1所示）。该系统包括Apache Web服务器、JBoss应用服务器和MySQL数据库服务器。系统上运行的应用软件是Pet Store [13]，这是一个J2EE应用程序模板。Pet Store包含27个企业Java Beans (EJBs)、一些Java Server Pages (JSPs) 和Java Servlets。

用户可以访问Pet Store网站购买各种宠物。我们开发了一个客户端模拟器，以生成大量不同用户场景和负载模式。工作负载包括浏览商品、搜索商品、账户登录、将商品添加到购物车、支付和结账等各种用户操作。用户的操作之间的时间间隔是从一个合理范围内随机选择的。注意，工作负载是动态生成的，具有很大的随机性和变化性，因此我们在实验中永远不会遇到完全相同的工作负载。工作负载的规模在每秒0到100个用户请求之间。

如前所述，各种故障可能以不同的方式影响复杂的信息系统。在本节中，我们将一系列故障注入系统，并使用收集到的监控数据计算残差。进一步检查这些残差在故障情况下是否变得异常，以验证我们方法的可行性。请注意，我们的方法并不是专门设计用来检测这些故障的，这里只是利用已知故障进行验证。

此外，我们的方法的有效性还取决于可用监控数据的粒度。在未来的工作中，我们需要一个大的故障注入池来定量验证我们方法的性能。以下实验仅旨在说明我们方法的可行性。

为了方便起见，在以下实验中，我们分别使用R1、R2和R3来表示以下三种数据关系：Java线程-CPU使用率；SQL查询-内存使用率；Web请求-内存使用率。假设不同监控点的时钟是同步的。

#### A. 忙循环
无限循环是一种常见的软件错误，无论是新手还是经验丰富的程序员都可能犯这种错误。通常，终止条件的意外行为会导致这个问题。在这里，我们使用通用的“忙循环”故障来模拟这类故障。被注入“忙循环”故障的进程将在一段时间内进入忙循环状态。图10显示了由忙循环故障引起的残差。在这个实验中，我们选择一个特定的用户请求，通过修改源代码来注入这个故障。每当这个特定请求被提交时，它将进入一个忙循环。图10显示，所有三个残差都有明显的故障迹象。忙循环故障消耗了大量的CPU资源，从而阻塞了应用服务器中其他用户请求的执行。因此，在故障发生后，内存使用率与HTTP和SQL请求数量之间的相关性不再良好，这解释了为什么关系R2和R3也受到影响。

#### B. 内存泄漏
内存泄漏是一种常见的软件错误，程序反复分配堆内存给一个对象但从未释放它。累积的泄漏内存最终可能会耗尽所有可用内存。带有内存泄漏错误的程序可能在长时间内正确运行，直到最终导致问题。内存泄漏错误可能不会始终以相同的方式表现出来。尽管Java支持垃圾回收，但由于已分配的对象仍然可以从有用的长期存活对象中访问到，因此仍可能发生内存泄漏。图11显示了由内存泄漏故障引起的三个关系的残差。在这个实验中，我们通过反复分配一些堆内存并使其从一个长期存活对象中可访问，将这个故障注入到Pet Store应用程序的“ShoppingCart” EJB中。内存泄漏最终会导致JVM垃圾回收的重载操作。

本质上，这种异常操作影响了这三个模型中表征的概率相关性。例如，在此操作期间，许多请求和进程被延迟以进行垃圾回收。因此，所有三个残差都显示出强烈的信号，揭示了故障的存在。与图11中忙循环故障中连续扭曲的残差段相比，内存泄漏故障只导致周期性的离散向下“尖峰”。这是因为沉重的垃圾回收操作只会偶尔发生一次。每次操作完成后，系统恢复到正常状态，因此向下尖峰周期性出现。

#### C. 死锁
死锁是在多线程处理中常见的问题，其中多个进程共享一个互斥资源，通常受锁保护。死锁可能导致多个参与进程进入无休止的等待循环。在这里，我们使用“等待循环”来模拟死锁的影响。与“忙循环”故障实验相比，唯一的区别是我们将相关源代码中的“忙循环逻辑”改为“等待循环逻辑”。对于一个特定的用户请求，它将进入一个等待循环，随机持续4到12秒且在此期间没有任何操作。在忙循环故障的情况下，所有三个残差在故障发生后都会变得异常。相反，如图12所示，在死锁情况下，只有R3变得异常，而R1和R2似乎正常。这是因为“等待循环”故障只影响注入请求的总数，对其他请求没有任何影响。

### 讨论
本文报告了我们在复杂系统中跟踪监控数据概率关系以进行故障检测的初步结果。需要注意的是，上述实验结果仅展示了我们方法的可行性，尽管所有实验都进行了重复。在未来的工作中，我们需要设计多种故障注入方法并进行多次实验，以定量验证我们方法的鲁棒性和有效性，例如故障检测中的误报率和漏报率。

### 参考文献
[1] M. Chen, A. Accardi, E. Kiciman, J. Lloyd, D. Patterson, A. Fox and E. Brewer, “Path-based failure and evolution management”, in 1st USENIX Symposium on Networked Systems Design and Implementation (NSDI’04), San Francisco, CA, March 2004.
[2] G. Jiang, H. Chen and K. Yoshihira, “Discovering likely invariants of distributed transaction systems for autonomic system management”, The 3rd International Conference on Autonomic Computing, Dublin, Ireland, June, 2006.
[3] J. Bilmes, “A gentle tutorial of the EM algorithm and its application to parameter estimation for Gaussian mixture and hidden Markov models,” Technical Report, U.C. Berkeley, April, 1998.
[4] Z. Zivkovic and F. Heijden, “Recursive unsupervised learning of finite mixture models”, IEEE Transactions on Pattern Analysis and Machine Intelligence, vol. 26, no. 5, pp. 651–656, May, 2004.
[5] A. Yemini and S. Kliger, “High speed and robust event correlation”, IEEE Communication Magazine, vol. 34, no. 5, pp. 82-90, May, 1996.
[6] C. Chao, D. Yang and A. Liu, “An automated fault diagnosis system using hierarchical reasoning and alarm correlation”, Journal of Network and Systems Management, vol.9, no.2, pp. 183-202, June, 2001.
[7] A. Benveniste, E. Fabre, C. Jard and S. Haar, “Diagnosis of asynchronous discrete event systems, a net unfolding approach”, IEEE Transactions on Automatic Control, vol. 48, no. 5, pp. 714-727, May, 2003.
[8] R. Vaarandi, “A data clustering algorithm for mining patterns from event logs,” in Proc. of 2003 IEEE Workshop on IP Operations & Management (IPOM2003), Kansas City, Missouri, October, 2003.
[9] K. Yamanishi, J. Takeuchi, G. Williams and P. Milne, “On-line unsupervised outlier detection using finite mixtures with discounting learning algorithms”, in Proceedings of the sixth ACM international conference on Knowledge discovery and data mining, pp. 320-324, Boston, MA, August, 2000.
[10] http://java.sun.com/products/JavaMangement/
[11] P. Filzmoser, “A multivariate outlier detection method”, in Proc. of the Seventh International Conference on Computer Data Analysis and Modeling, volume 1, pp. 18-22, Minsk, Belarus, 2004.
[12] A. Gelman, J.B. Carlin, H.S. Stern and D.B. Rubin, Bayesian data analysis, Chapter 16, Chapman and Hall, 1995.
[13] Http://java.sun.com/deveoper/releases/petstore/.