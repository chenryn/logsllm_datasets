 Code Navigation(? [????.]) 
 Code-Auditing Strategies(? [????.]) 
 Code-Auditing Tactics(? [????.]) 
 Code Auditor's Toolbox(? [????.]) 
 Case Study: OpenSSH(? [????.]) 
 Summary(? [????.]) 
 Part II:  Software Vulnerabilities(? [????.]) 
     Chapter 5.  Memory Corruption(? [????.]) 
 Introduction(? [????.]) 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
10 
 Buffer Overflows(? [????.]) 
 Shellcode(? [????.]) 
 Protection Mechanisms(? [????.]) 
 Assessing Memory Corruption Impact(? [????.]) 
 Summary(? [????.]) 
     Chapter 6.  C Language Issues(? [????.]) 
 Introduction(? [????.]) 
 C Language Background(? [????.]) 
 Data Storage Overview(? [????.]) 
 Arithmetic Boundary Conditions(? [????.]) 
 Type Conversions(? [????.]) 
 Type Conversion Vulnerabilities(? [????.]) 
 Operators(? [????.]) 
 Pointer Arithmetic(? [????.]) 
 Other C Nuances(? [????.]) 
 Summary(? [????.]) 
     Chapter 7.  Program Building Blocks(? [????.]) 
 Introduction(? [????.]) 
 Auditing Variable Use(? [????.]) 
 Auditing Control Flow(? [????.]) 
 Auditing Functions(? [????.]) 
 Auditing Memory Management(? [????.]) 
 Summary(? [????.]) 
     Chapter 8.  Strings and Metacharacters(? [????.]) 
 Introduction(? [????.]) 
 C String Handling(? [????.]) 
 Metacharacters(? [????.]) 
 Common Metacharacter Formats(? [????.]) 
 Metacharacter Filtering(? [????.]) 
 Character Sets and Unicode(? [????.]) 
 Summary(? [????.]) 
     Chapter 9.  UNIX I: Privileges and Files(? [????.]) 
 Introduction(? [????.]) 
 UNIX 101(? [????.]) 
 Privilege Model(? [????.]) 
 Privilege Vulnerabilities(? [????.]) 
 File Security(? [????.]) 
 File Internals(? [????.]) 
 Links(? [????.]) 
 Race Conditions(? [????.]) 
 Temporary Files(? [????.]) 
 The Stdio File Interface(? [????.]) 
 Summary(? [????.]) 
     Chapter 10.  UNIX II: Processes(? [????.]) 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
11 
 Introduction(? [????.]) 
 Processes(? [????.]) 
 Program Invocation(? [????.]) 
 Process Attributes(? [????.]) 
 Interprocess Communication(? [????.]) 
 Remote Procedure Calls(? [????.]) 
 Summary(? [????.]) 
     Chapter 11.  Windows I: Objects and the File System(? [????.]) 
 Introduction(? [????.]) 
 Background(? [????.]) 
 Objects(? [????.]) 
 Sessions(? [????.]) 
 Security Descriptors(? [????.]) 
 Processes and Threads(? [????.]) 
 File Access(? [????.]) 
 The Registry(? [????.]) 
 Summary(? [????.]) 
     Chapter 12.  Windows II: Interprocess Communication(? [????.]) 
 Introduction(? [????.]) 
 Windows IPC Security(? [????.]) 
 Window Messaging(? [????.]) 
 Pipes(? [????.]) 
 Mailslots(? [????.]) 
 Remote Procedure Calls(? [????.]) 
 COM(? [????.]) 
 Summary(? [????.]) 
     Chapter 13.  Synchronization and State(? [????.]) 
 Introduction(? [????.]) 
 Synchronization Problems(? [????.]) 
 Process Synchronization(? [????.]) 
 Signals(? [????.]) 
 Threads(? [????.]) 
 Summary(? [????.]) 
 Part III:  Software Vulnerabilities in Practice(? [????.]) 
     Chapter 14.  Network Protocols(? [????.]) 
 Introduction(? [????.]) 
 Internet Protocol(? [????.]) 
 User Datagram Protocol(? [????.]) 
 Transmission Control Protocol(? [????.]) 
 Summary(? [????.]) 
     Chapter 15.  Firewalls(? [????.]) 
 Introduction(? [????.]) 
 Overview of Firewalls(? [????.]) 
 Stateless Firewalls(? [????.]) 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
12 
 Simple Stateful Firewalls(? [????.]) 
 Stateful Inspection Firewalls(? [????.]) 
 Spoofing Attacks(? [????.]) 
 Summary(? [????.]) 
     Chapter 16.  Network Application Protocols(? [????.]) 
 Introduction(? [????.]) 
 Auditing Application Protocols(? [????.]) 
 Hypertext Transfer Protocol(? [????.]) 
 Internet Security Association and Key Management Protocol(? [????.]) 
 Abstract Syntax Notation (ASN.1)(? [????.]) 
 Domain Name System(? [????.]) 
 Summary(? [????.]) 
     Chapter 17.  Web Applications(? [????.]) 
 Introduction(? [????.]) 
 Web Technology Overview(? [????.]) 
 HTTP(? [????.]) 
 State and HTTP Authentication(? [????.]) 
 Architecture(? [????.]) 
 Problem Areas(? [????.]) 
 Common Vulnerabilities(? [????.]) 
 Harsh Realities of the Web(? [????.]) 
 Auditing Strategy(? [????.]) 
 Summary(? [????.]) 
     Chapter 18.  Web Technologies(? [????.]) 
 Introduction(? [????.]) 
 Web Services and Service-Oriented Architecture(? [????.]) 
 Web Application Platforms(? [????.]) 
 CGI(? [????.]) 
 Perl(? [????.]) 
 PHP(? [????.]) 
 Java(? [????.]) 
 ASP(? [????.]) 
 ASP.NET(? [????.]) 
 Summary(? [????.]) 
 Bibliography(? [????.]) 
 Index(? [????.]) 
3. Copyright 
Many of the designations used by manufacturers and sellers to distinguish their 
products are claimed as trademarks. Where those designations appear in this book, 
and the publisher was aware of a trademark claim, the designations have been 
printed with initial capital letters or in all capitals. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
13 
The authors and publisher have taken care in the preparation of this book, but make 
no expressed or implied warranty of any kind and assume no responsibility for errors 
or omissions. No liability is assumed for incidental or consequential damages in 
connection with or arising out of the use of the information or programs contained 
herein. 
The publisher offers excellent discounts on this book when ordered in quantity for 
bulk purchases or special sales, which may include electronic versions and/or custom 
covers and content particular to your business, training goals, marketing focus, and 
branding interests. For more information, please contact: 
   U.S. Corporate and Government Sales 
   (800) 382-3419 
   PI:EMAIL 
For sales outside the United States please contact: 
   International Sales 
   PI:EMAIL 
Visit us on the Web: www.awprofessional.com 
Copyright Â© 2007 Pearson Education, Inc. 
All rights reserved. Printed in the United States of America. This publication is 
protected by copyright, and permission must be obtained from the publisher prior to 
any prohibited reproduction, storage in a retrieval system, or transmission in any 
form or by any means, electronic, mechanical, photocopying, recording, or likewise. 
For information regarding permissions, write to: 
   Pearson Education, Inc. 
   Rights and Contracts Department 
   75 Arlington Street, Suite 300 
   Boston, MA 02116 
   Fax: (617) 848-7047 
Text printed in the United States on recycled paper at Edwards Brothers in Ann Arbor, 
Michigan. First printing, November 2006 
                                        Library of Congress Cataloging-in-Publication Data 
Dowd, Mark. 
 The art of software security assessment : identifying and preventing software vuln
erabilities / Mark Dowd, 
John McDonald, and Justin Schuh. 
    p. cm. 
 ISBN 0-321-44442-6 (pbk. : alk. paper) 1. Computer security. 2. Computer softwa
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
14 
reDevelopment. 
3. Computer networksSecurity measures. I. McDonald, John, 1977- II. Schuh, Justi
n. III. Title. 
 QA76.9.A25D75 2006 
 005.8dc22 
                                                                      2006023446 
4. About the Authors 
Mark Dowd is a principal security architect at McAfee, Inc. and an established expert 
in the field of application security. His professional experience includes several years 
as a senior researcher at Internet Security Systems (ISS) X-Force, and the discovery 
of a number of high-profile vulnerabilities in ubiquitous Internet software. He is 
responsible for identifying and helping to address critical flaws in Sendmail, Microsoft 
Exchange Server, OpenSSH, Internet Explorer, Mozilla (Firefox), Checkpoint VPN, 
and Microsoft's SSL implementation. In addition to his research work, Mark presents 
at industry conferences, including Black Hat and RUXCON. 
John McDonald is a senior consultant with Neohapsis, where he specializes in 
advanced application security assessment across a broad range of technologies and 
platforms. He has an established reputation in software security, including work in 
security architecture and vulnerability research for NAI (now McAfee), Data Protect 
GmbH, and Citibank. As a vulnerability researcher, John has identified and helped 
resolve numerous critical vulnerabilities, including issues in Solaris, BSD, Checkpoint 
FireWall-1, OpenSSL, and BIND. 
Justin Schuh is a senior consultant with Neohapsis, where he leads the Application 
Security Practice. As a senior consultant and practice lead, he performs software 
security assessments across a range of systems, from embedded device firmware to 
distributed enterprise web applications. Prior to his employment with Neohapsis, 
Justin spent nearly a decade in computer security activities at the Department of 
Defense (DoD) and related agencies. His government service includes a role as a lead 
researcher with the National Security Agency (NSA) penetration testing teamthe Red 
Team. 
4.1 Preface 
"If popular culture has taught us anything, it is that someday mankind must face and 
destroy the growing robot menace." 
Daniel H. Wilson, How to Survive a Robot Uprising 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
15 
The past several years have seen huge strides in computer security, particularly in 
the field of software vulnerabilities. It seems as though every stop at the bookstore 
introduces a new title on topics such as secure development or exploiting software. 
Books that cover application security tend to do so from the perspective of software 
designers and developers and focus on techniques to prevent software vulnerabilities 
from occurring in applications. These techniques start with solid security design 
principles and threat modeling and carry all the way through to implementation best 
practices and defensive programming strategies. Although they serve as strong 
defensive foundations for application development, these resources tend to give little 
treatment to the nature of vulnerabilities; instead, they focus on how to avoid them. 
What's more, every development team can't start rebuilding a secure application 
from the ground up. Real people have to deal with huge existing codebases, in-place 
applications, and limited time and budget. Meanwhile, the secure coding mantra 
seems to be "If it smells bad, throw it out." That's certainly necessary in some cases, 
but often it's too expensive and time consuming to be reasonable. So you might turn 
your attention to penetration testing and ethical hacking instead. A wide range of 
information on this topic is available, and it's certainly useful for the acid test of a 
software system. However, even the most technically detailed resources have a 
strong focus on exploit development and little to no treatment on how to find 
vulnerabilities in the first place. This still leaves the hanging question of how to find 
issues in an existing application and how to get a reasonable degree of assurance that 
a piece of software is safe. 
This problem is exactly the one faced by those in the field of professional software 
security assessment. People are growing more concerned with building and testing 
secure systems, but very few resources address the practice of finding vulnerabilities. 
After all, this process requires a deep technical understanding of some very complex 
issues and must include a systematic approach to analyzing an application. Without 
formally addressing how to find vulnerabilities, the software security industry has no 
way of establishing the quality of a software security assessment or training the next 
generation in the craft. We have written this book in the hope of answering these 
questions and to help bridge the gap between secure software development and 
practical post-implementation reviews. Although this book is aimed primarily at 
consultants and other security professionals, much of the material will have value to 
the rest of the IT community as well. Developers can gain insight into the subtleties 
and nuances of how languages and operating systems work and how those features 
can introduce vulnerabilities into an application that otherwise appears secure. 
Quality assurance (QA) personnel can use some of the guidelines in this book to 
ensure the integrity of in-house software and cut down on the likelihood of their 
applications being stung by a major vulnerability. Administrators can find helpful 
guidelines for evaluating the security impact of applications on their networks and use 
this knowledge to make better decisions about future deployments. Finally, hobbyists 
who are simply interested in learning more about how to assess applications will find 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
16 
this book an invaluable resource (we hope!) for getting started in application security 
review or advancing their current skill sets. 
Prerequisites 
The majority of this book has been targeted at a level that any moderately 
experienced developer should find approachable. This means you need to be fairly 
comfortable with at least one programming language, and ideally, you should be 
familiar with basic C/C++ programming. At several stages throughout the book, we 
use Intel assembly examples, but we have attempted to keep them to a minimum and 
translate them into approximate C code when possible. We have also put a lot of 
effort into making the material as platform neutral as possible, although we do cover 
platform specifics for the most common operating systems. When necessary, we have 
tried to include references to additional resources that provide background for 
material that can't be covered adequately in this book. 
How to Use This Book 
Before we discuss the use of this book, we need to introduce its basic structure. The 
book is divided into three different parts: 
Part I(? [????.]): Introduction to Software Security Assessment (Chapters 1(? 
[????.])4(? [????.])) These chapters introduce the practice of code auditing 
and explain how it fits into the software development process. You learn about 
the function of design review, threat modeling, and operational reviewtools 
that are useful for evaluating an application as a whole, and not just the code. 
Finally, you learn some generic high-level methods for performing a code 
review on any application, regardless of its function or size. 
Part II(? [????.]): Software Vulnerabilities (Chapters 5(? [????.])13(? [????.])) 
These chapters shift the focus of the book toward practical implementation 
review and address how to find specific vulnerabilities in an application's 
codebase. Major software vulnerability classes are described, and you learn 
how to discover high-risk security flaws in an application. Numerous 
real-world examples of security vulnerabilities are given to help you get a feel 
for what software bugs look like in real code. 
Part III(? [????.]): Software Vulnerabilities in Practice (Chapters 14(? 
[????.])18(? [????.])) The final portion of the book turns your attention toward 
practical uses of lessons learned from the earlier chapters. These chapters 
describe a number of common application classes and the types of bugs they 
tend to be vulnerable to. They also show you how to apply the technical 
knowledge gained from Part II(? [????.]) to real-world applications. 
Specifically, you look at networking, firewalling technologies, and Web 
technologies. Each chapter in this section introduces the common frameworks 
and designs of each application class and identifies where flaws typically 
occur. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
17 
You'll get the most value if you read this book straight through at least once so that 
you can get a feel for the material. This approach is best because we have tried to use 
each section as an opportunity to highlight techniques and tools that help you in 
performing application assessments. In particular, you should pay attention to the 
sidebars and notes we use to sum up the more important concepts in a section. 
Of course, busy schedules and impending deadlines can have a serious impact on 
your time. To that end, we want to lay out a few tracks of focus for different types of 
reviews. However, you should start with Part 1(? [????.]) (Chapters 1(? [????.])4(? 
[????.])) because it establishes a foundation for the rest of the book. After that, you 
can branch out to the following chapters: 
UNIX track (Chapters 5(? [????.])10(? [????.]), 13(? [????.])) This chapter 
track starts off by covering common software vulnerability classes, such as 
memory corruption, program control flow, and specially formatted data. Then 
UNIX-centered security problems that arise because of quirks in the various 
UNIX operating systems are addressed. Finally, this track ends with coverage 
of synchronization vulnerabilities common to most platforms. 