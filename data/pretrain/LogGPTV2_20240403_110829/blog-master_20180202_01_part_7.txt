 enable_parallel_append     
------------------------    
 on    
(1 row)    
```    
2、本例子使用分区表的好处：    
2\.1、数据写入并行度提高，    
2\.2、创建索引变快，    
2\.3、维护索引也变快。    
同时PostgreSQL 11已经支持多个分区并行扫描(enable_parallel_append)，同时支持了并行+merge sort，所以海量数据相似搜索的大计算量情况下性能也不是问题。    
在PostgreSQL 11之前，可以使用dblink异步调用来支持多个分区的并行扫描。例子：    
[《PostgreSQL dblink异步调用实现 并行hash分片JOIN - 含数据交、并、差 提速案例》](../201802/20180201_02.md)      
3、相似搜索中很关键的一个点是相似度，通过show_limit()可以查看相似度限制，通过set_limit可以设置相似度阈值。相似度值越大，表示需要的匹配度越高，1表示完全匹配。    
```    
postgres=# select show_limit();    
 show_limit     
------------    
        0.3    
(1 row)    
postgres=# select set_limit(0.9);    
 set_limit     
-----------    
       0.9    
(1 row)    
```    
4、通过similarity或word_similarity可以查看两个字符串的相似度值。    
```    
postgres=# select similarity('abc','abcd');    
 similarity     
------------    
        0.5    
(1 row)    
postgres=# select word_similarity('abc','abcd');    
 word_similarity     
-----------------    
            0.75    
(1 row)    
postgres=# select word_similarity('abc','abc');    
 word_similarity     
-----------------    
               1    
(1 row)    
postgres=# select similarity('abc','abc');    
 similarity     
------------    
          1    
(1 row)    
```    
相似算法详情请参考    
https://www.postgresql.org/docs/devel/static/pgtrgm.html    
5、响应速度与用户设置的相似度有关，用户设置的相似度匹配到的值越多，速度越慢。匹配到的值越少（即精度越高），响应速度越快。    
```    
-- 响应速度更慢    
postgres=# select set_limit(0.1);    
 set_limit     
-----------    
       0.1    
(1 row)    
-- 响应速度更快    
postgres=# select set_limit(0.9);    
 set_limit     
-----------    
       0.9    
(1 row)    
```    
实际生产中使用，我们可以先使用高的limit去搜索，逐渐缩小这个阈值，从而达到较快响应速度。这个逻辑可以封装到UDF中，用户调用UDF即可进行搜索。    
例子    
```    
create or replace function get_res(  
  text,     -- 要按相似搜的文本  
  int8,     -- 限制返回多少条  
  float4 default 0.3,   -- 相似度阈值，低于这个值不再搜搜  
  float4 default 0.1    -- 相似度递减步长，直至阈值  
) returns setof record as $$    
declare    
  lim float4 := 1;    
begin    
  -- 判定  
  if not ($3  0) then   
    raise notice '$3 must >0 and  0 and $4 0 and <=1';  
    return;  
  end if;  
  loop    
    -- 设置相似度阈值    
    perform set_limit(lim);    
    return query select similarity(info, $1) as sml, * from tbl where info % $1 order by sml desc limit $2;    
    -- 如果有，则退出loop    
    if found then    