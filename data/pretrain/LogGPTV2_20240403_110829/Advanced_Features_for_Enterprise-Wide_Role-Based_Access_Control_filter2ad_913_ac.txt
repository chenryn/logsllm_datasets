to a high administration effort. There are basically two rea-
sons for this: multiple factors deÔ¨Åning roles and the need
for Ô¨Åne-grained control of application security.
The access rights a person receives are normally based
on a number of factors. These may be organisational unit,
job, location or others. As the combination of these factors
deÔ¨Ånes the rights, one cannot simply build separate role hi-
erarchies based on organisation, job etc. Instead, a role must
be deÔ¨Åned for every valid combination of these factors. The
resulting role structure would obviously be very complex
and difÔ¨Åcult to maintain1.
In typical business applications, Ô¨Åne-grained, restrictions
to access rights often apply. For example, different loan
managers may be allowed to approve loans up to differ-
ent amounts. Using the described ERBAC model, one loan
manager role must be deÔ¨Åned for every different maximum
approval amount. This would again lead to many similar
roles differing only in a single constraint.
The solution for these problems is to parametrise roles.
We have therefore enhanced our ERBAC model with at-
tributes and rules. Attributes can be assigned to the fol-
lowing entities:
‚Ä¢ users,
‚Ä¢ roles,
‚Ä¢ user assignments,
‚Ä¢ permission assignments,
1The situation is comparable to multiple inheritance in object-oriented
programming. Extensive use of ‚Äì especially multiple ‚Äì inheritance leads
to unmaintainable software systems.
‚Ä¢ role-to-role assignments.
These attributes may specify constraints or other values rel-
evant for access control decisions. Rules specify what hap-
pens when attributes are changed or assignments are given
or removed.
In the following sections, we describe how enhanced
ERBAC can dramatically reduce the number of roles, thus
greatly facilitating role administration. All features are mo-
tivated by real-life situations that we have encountered dur-
ing role deployment in large organisations.
4.1 User Attributes
The user in our ERBAC model contains a rich set of stan-
dard and company-speciÔ¨Åc attributes. These attributes are
used for a number of important functions:
‚Ä¢ A set of attributes such as name, title, telephone num-
ber describes the user. Furthermore, they can also be
propagated to a target system when an account is cre-
ated for the user.
‚Ä¢ Several attributes describe the user‚Äôs organisational
unit, job function(s) and so on. These attributes pro-
vide the basis for automation of user administration
as they normally deÔ¨Åne the roles a user will receive.
As described in section 2, this data is often extracted
from a human resources system.
If these attributes
change, the roles a user receives or loses are com-
puted using rules and automatically assigned or deas-
signed. Of course, automation can considerably reduce
administration costs and is therefore the main goal of
many companies when implementing an enterprise-
wide user administration tool. Some companies have
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:54:27 UTC from IEEE Xplore.  Restrictions apply. 
User
Cost Account
= 4267
?
Enterprise Level
Propagation
Target System
?
Group
ACCT4267
in RACF
User
-

Assignment
Role
Permission
-
Assignment
Joker
Permission
Account
in RACF

?
?
-
Rule Evaluation
Figure 7. ERBAC with Joker: Example
succeeded in automating more than 90-95% of their
user administration tasks. As an example, table 1
shows some Ô¨Ågures for role-based administration in a
European bank.
40 000 users
12 000 changes of user assignments to roles per
week (fully automated)
600 changes of permission assignments to roles
per week (manually)
‚Üí 95% automation of administration
Table 1. Figures for Role-Based Administra-
tion in a Bank
‚Ä¢ A further possibility is to use user attributes for spec-
ifying user-speciÔ¨Åc information which can be used as
constraints for roles and permissions or for other ad-
ministration tasks. The following sections go into
more detail on this.
4.2 Generic Roles
For several types of systems ‚Äì such as Windows NT and
UNIX ‚Äì many organisations have a number of locally dis-
tributed installations. A user is deÔ¨Åned in one or more
of these systems according to location (or some other at-
tribute). Users working at more than one location may be
deÔ¨Åned in several systems. Typically, the group and permis-
sion structures of these systems are deÔ¨Åned quite similarly.
To prevent building separate role structures for all of
these systems, we added the concept of roles with generic
permissions to ERBAC. Normal roles are collections of per-
missions deÔ¨Åned in speciÔ¨Åc target systems. Generic roles
allow the assignment of generic permissions deÔ¨Åned for a
set of target systems. When such a role is assigned to a
user, one or more target systems from this set are speciÔ¨Åed.
The user then receives these permissions only in the speci-
Ô¨Åed target systems.
Figure 6 illustrates this feature. A generic permission de-
Ô¨Åned in a target system set SET1 is assigned to a role. The
target system set SET1 may contain Ô¨Å ve target systems with
similar permission structures (TS1 ... TS5). When assign-
ing our role to a user, we specify the target systems TS1 and
TS2 from this set. The user then receives the permissions
deÔ¨Åned in the role for these two systems.
4.3 Joker Permissions
Information from several structures is often needed to
deÔ¨Åne a role. A common example is that a user‚Äôs access
rights depend on location and job function[6]. If we tried
to build a role tree including both factors, the tree structure
would become quite complex. It also would contain a large
number of roles, as one role is needed for every valid com-
bination of location and job function.
We have established a successful alternative approach
that avoids increasing complexity. Only one structure is
used as a basis for the role graph, while the other is im-
plemented via parameters of these roles. As an example,
we can take the job function for building the role graph and
deÔ¨Åne the location as an attribute of the user/role relation-
ship.
This feature is implemented by assigning so-called joker
permissions instead of explicit permissions to a role. When
assigned to a user, the actual permission is computed using
the attributes of the user and/or user-role connection on the
basis of rules. The permission is then granted to the user.
The rules use attributes of the user (e.g. organisational unit,
location, job function) to compute the actual permission. A
naming convention for the permissions is a prerequisite for
this method.
Figure 7 shows an example for the usage of jokers. In a
bank, all users receive a membership to a RACF group on
the mainframe according to their cost accounts, which are
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:54:27 UTC from IEEE Xplore.  Restrictions apply. 
Constraint: Maximum amount


User
Max. loan
amount =
1 Mio. Euro
?
User
-

Assignment
Role
Permission
-
Assignment
Constraint: Maximum amount
Permission
Enterprise Level
?
Propagation
Account
in TS

?
= 1 Mio. Euro

?
-
Permission
in TS
Target System
Figure 8. Example for user-speciÔ¨Åc constraint
represented by four digit numbers. For this purpose, groups
in RACF are deÔ¨Åned with names consisting of the string
‚ÄúACCT‚Äù followed by the account number. A role is now
deÔ¨Åned containing a Joker Group. When a user is assigned
to this role, a rule is triggered that computes the name of
the group by concatenating the Ô¨Åx ed string ‚ÄùACCT‚Äù with
the cost account of the user (taken from the user attributes)
and assigns the user in RACF to this group. This mecha-
nism is quite powerful, as it uses information about the user
and the permission structure to automate the administration
process.
4.4 User-SpeciÔ¨Åc Constraints
User-speciÔ¨Åc constraints constitute a further aspect often
occurring ‚Äì especially in business applications. People do-
ing principally the same job may have different restrictions.
Some examples include:
‚Ä¢ A bank teller may only work with a speciÔ¨Åc set of cus-
tomer accounts.
‚Ä¢ A loan manager may grant loans up to a speciÔ¨Åc
amount.
It would be possible to build separate loan manager roles
for every different maximum amount or separate bank teller
roles for every range of customer accounts. Obviously, this
is not a good solution as it would lead to a large number of
similar roles.
In ERBAC we have enhanced the permission assignment
with additional parameters. The underlying application se-
curity system already has parameters for its authorisations
in order to check the constraints. These system-speciÔ¨Åc pa-
rameters are now mapped to permission assignments. Fur-
thermore, rules are deÔ¨Åned to determine how these param-
eters are Ô¨Ålled. This can be anything from Ô¨Ålling the pa-
rameter with an attribute from the user record to complex
computations. When a user is assigned to a role in ERBAC,
these parameters are computed and propagated to the un-
derlying system.
Figure 8 shows a simple example of user-speciÔ¨Åc con-
straints. A banking application has deÔ¨Åned the constraint
‚ÄúMaximum amount‚Äù for the assignment of a permission to
approve a loan. A loan manager role is now built that in-
cludes this constrained permission but does not deÔ¨Åne an
explicit amount for the constraint. A user has an attribute
‚ÄúMaximum loan amount‚Äù of one million Euro, which de-
Ô¨Ånes the limit. When this user is connected to the role and
the permission is propagated to the target system, the con-
straint is Ô¨Ålled with the value from the user attribute.
5 Conclusion
Role-Based Access Control is an effective mechanism
for simplifying the administration of users and access rights
in complex IT infrastructures. To support enterprise-wide
security management, we have introduced Enterprise Roles
and the Enterprise Role-Based Access Control Model (ER-
BAC). ERBAC has been implemented in the commercial
security administration tool SAM and has proven success-
ful in many projects in large organisations. We have also
shown that enhancing ERBAC with parameters reduces the
number of roles dramatically, thereby minimising adminis-
tration and role maintenance costs.
Future work will be done to improve the ERBAC model
and its validity will be proven in deployment at further cus-
tomer sites. In particular, we must cope with the challenges
deriving from the growing distribution of IT systems over
the internet.
A second important area is role engineering, as the de-
ployment and maintenance of roles requires a thorough pro-
cess. We have already deÔ¨Åned a role life-cycle in [6]. The
role-Ô¨Ånding process in particular will be further investi-
gated. So far, two approaches have been considered. On one
hand, a top-down approach starts with the business struc-
tures and processes and reÔ¨Ånes them to obtain roles (see
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:54:27 UTC from IEEE Xplore.  Restrictions apply. 
also [9]). The bottom-up approach, on the other hand, takes
the existing permissions and applies data mining techniques
to Ô¨Ånd clusters of permissions which represent roles. It will
be interesting to combine both approaches.
[14] R. Witty and W. Malik. Enterprise User Administration
Magic Quadrant FY01, Research Note. Gartner Group, Jan-
uary 2001.
References
[1] R. Awischus. Role-Based Access Control with the Security
Administration Manager (SAM). In Proceedings of the Sec-
ond ACM Workshop on Role-Based Access Control, Fairfax,
Virginia, USA, pages 61‚Äì68, November 1997.
[2] A. Beu, A. Kern, and J. Schwagereit. ‚ÄúDas User Interface ist
wundersch¬®on...‚Äù. Der benutzerzentrierte Gestaltungsprozess
nach ISO 13407 in der Praxis. Java Magazin, pages 28‚Äì35,
May 2002.
[3] B. Biddle and E. Thomas, editors. Role Theory: Concepts
and Research. Robert E. Krieger Publishing, New York,
1979.
[4] D. F. Ferraiolo and D. R. Kuhn. Role-Based Access Control.
In 15th NCSC National Computer Security Conference, Bal-
timore, 1992.
[5] D. F. Ferraiolo, R. Sandhu, S. Gavrila, D. R. Kuhn, and
R. Chandramouli. Proposed NIST Standard for Role-Based
Access Control. ACM Transactions on Information and Sys-
tem Security (TISSEC), 4(3):224‚Äì274, August 2001.
[6] A. Kern, M. Kuhlmann, A. Schaad, and J. Moffett. Obser-
vations on the Role Life-Cycle in the Context of Enterprise
Security Management. In Proceedings of the 7th ACM Sym-
posium on Access Control Models and Technologies (SAC-
MAT 2002), Monterey, California, USA, pages 43‚Äì51, June
2002.
[7] A. Kern, M. Kuhlmann, and R. Wick. Ein Vorgehensmodell
f¬®ur Enterprise Security Management. In Proceedings of the
Working Conference on IT Security in Electronic Business
Processes, St. Leon-Rot, Germany, September 2002.
[8] S. Osborn and Y. Guo. Modelling Users in Role-Based Ac-
cess Control. In Proceedings of the Fifth ACM Workshop on
Role-Based Access Control, Berlin, Germany, pages 31‚Äì37,
July 2000.
[9] H. R¬®ockle, G. Schimpf, and R. Weidinger. Process-Oriented
Approach for Role Finding to Implement Role-Based Secu-
rity Administration in a Large Industrial Organization.
In
Proceedings of the Fifth ACM Workshop on Role-Based Ac-
cess Control, Berlin, Germany, pages 103‚Äì110, July 2000.
[10] For more information about SAM Jupiter, see our product
homepage: http://www.sam-security.com.
[11] R. Sandhu. Roles Versus Groups. In Proceedings of the First
ACM Workshop on Role-Based Access Control, Gaithers-
burg, Maryland, USA, pages I‚Äì25‚ÄìI‚Äì26, December 1995.
[12] R. Sandhu, E. Coyne, H. Feinstein, and C. Youman. Role-
Based Access Control Models. IEEE Computer, 29(2):38‚Äì
47, February 1996.
[13] D. Thomsen, R. O‚ÄôBrien, and C. Payne. Napoleon Net-
work Application Policy Enforcement.
In Proceedings of
the Fourth ACM Workshop on Role-Based Access Control,
Fairfax, Virginia, USA, pages 145‚Äì152, October 1999.
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:54:27 UTC from IEEE Xplore.  Restrictions apply.