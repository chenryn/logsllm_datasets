### Challenges in Role-Based Access Control (RBAC) Administration

Role-based access control (RBAC) can lead to a high administrative effort due to two primary reasons: the multiplicity of factors defining roles and the need for fine-grained control over application security.

#### Factors Defining Roles

Access rights are typically determined by a combination of several factors, such as organizational unit, job function, and location. Since these factors collectively define the rights, it is not feasible to create separate role hierarchies based on individual factors. Instead, a unique role must be defined for every valid combination of these factors. This results in a highly complex and difficult-to-maintain role structure, similar to the challenges posed by multiple inheritance in object-oriented programming, which can lead to unmaintainable software systems.

#### Fine-Grained Access Control

In typical business applications, fine-grained restrictions on access rights are common. For example, different loan managers may have varying limits on the amount they can approve. Using a standard RBAC model, this would require defining a separate role for each maximum approval amount, leading to a proliferation of similar roles that differ only by a single constraint.

### Solution: Parametrized Roles

To address these issues, we have enhanced our RBAC model with attributes and rules. These enhancements allow us to parametrize roles, significantly reducing the number of roles and simplifying administration. Attributes can be assigned to various entities, including:

- Users
- Roles
- User assignments
- Permission assignments
- Role-to-role assignments

These attributes can specify constraints or other values relevant for access control decisions. Rules define the actions to be taken when attributes change or assignments are added or removed.

### Enhanced ERBAC Features

#### 4.1 User Attributes

Our enhanced RBAC (ERBAC) model includes a rich set of standard and company-specific user attributes. These attributes serve multiple purposes:

- **User Description**: Attributes like name, title, and telephone number describe the user and can be propagated to target systems when creating user accounts.
- **Organizational Data**: Attributes describing the user's organizational unit, job functions, etc., provide the basis for automating user administration. When these attributes change, the roles assigned to the user are automatically updated using predefined rules. This automation can significantly reduce administrative costs, with some companies achieving 90-95% automation in user administration tasks.

**Example**: In a European bank, 40,000 users experience 12,000 weekly changes in role assignments (fully automated) and 600 weekly changes in permission assignments (manually), resulting in 95% automation.

- **User-Specific Constraints**: User attributes can also specify constraints for roles and permissions, aiding in more granular access control and other administrative tasks.

#### 4.2 Generic Roles

For systems with multiple distributed installations, such as Windows NT and UNIX, users are often defined in one or more systems based on location or other attributes. To avoid building separate role structures for each system, we introduced generic roles. These roles allow the assignment of generic permissions across a set of target systems. When a generic role is assigned to a user, specific target systems from the set are specified, and the user receives the permissions only in those systems.

**Example**: A generic permission defined for a set of five target systems (TS1 to TS5) is assigned to a role. When assigning this role to a user, we specify TS1 and TS2. The user then receives the permissions defined in the role for these two systems.

#### 4.3 Joker Permissions

Joker permissions are used to handle scenarios where a user's access rights depend on multiple factors, such as location and job function. Instead of creating a complex role tree, we use one factor to build the role graph and implement the other via parameters of the roles.

**Example**: In a bank, all users receive membership in a RACF group based on their cost account, represented by a four-digit number. A role is defined with a joker group. When a user is assigned to this role, a rule computes the group name by concatenating "ACCT" with the user's cost account and assigns the user to this group in RACF.

#### 4.4 User-Specific Constraints

User-specific constraints are common in business applications, where individuals performing the same job may have different restrictions. For example, a loan manager may have a maximum loan approval limit. Instead of creating multiple roles for different limits, we enhance permission assignments with additional parameters. Rules determine how these parameters are filled, and the values are propagated to the underlying system.

**Example**: A banking application defines a "Maximum amount" constraint for loan approval. A loan manager role includes this constrained permission without specifying an explicit amount. A user with a "Maximum loan amount" attribute of one million Euro is assigned to the role. When the permission is propagated, the constraint is filled with the value from the user attribute.

### Conclusion

Role-Based Access Control (RBAC) is an effective mechanism for simplifying user and access rights administration in complex IT infrastructures. Our enhanced ERBAC model, implemented in the commercial security administration tool SAM, has proven successful in large organizations by dramatically reducing the number of roles and minimizing administrative costs. Future work will focus on further improving the ERBAC model and addressing the challenges of distributed IT systems and role engineering.

### References

[1] R. Awischus. Role-Based Access Control with the Security Administration Manager (SAM). In Proceedings of the Second ACM Workshop on Role-Based Access Control, Fairfax, Virginia, USA, pages 61–68, November 1997.

[2] A. Beu, A. Kern, and J. Schwagereit. “Das User Interface ist wunderschön...”. Der benutzerzentrierte Gestaltungsprozess nach ISO 13407 in der Praxis. Java Magazin, pages 28–35, May 2002.

[3] B. Biddle and E. Thomas, editors. Role Theory: Concepts and Research. Robert E. Krieger Publishing, New York, 1979.

[4] D. F. Ferraiolo and D. R. Kuhn. Role-Based Access Control. In 15th NCSC National Computer Security Conference, Baltimore, 1992.

[5] D. F. Ferraiolo, R. Sandhu, S. Gavrila, D. R. Kuhn, and R. Chandramouli. Proposed NIST Standard for Role-Based Access Control. ACM Transactions on Information and System Security (TISSEC), 4(3):224–274, August 2001.

[6] A. Kern, M. Kuhlmann, A. Schaad, and J. Moffett. Observations on the Role Life-Cycle in the Context of Enterprise Security Management. In Proceedings of the 7th ACM Symposium on Access Control Models and Technologies (SACMAT 2002), Monterey, California, USA, pages 43–51, June 2002.

[7] A. Kern, M. Kuhlmann, and R. Wick. Ein Vorgehensmodell für Enterprise Security Management. In Proceedings of the Working Conference on IT Security in Electronic Business Processes, St. Leon-Rot, Germany, September 2002.

[8] S. Osborn and Y. Guo. Modelling Users in Role-Based Access Control. In Proceedings of the Fifth ACM Workshop on Role-Based Access Control, Berlin, Germany, pages 31–37, July 2000.

[9] H. Röckle, G. Schimpf, and R. Weidinger. Process-Oriented Approach for Role Finding to Implement Role-Based Security Administration in a Large Industrial Organization. In Proceedings of the Fifth ACM Workshop on Role-Based Access Control, Berlin, Germany, pages 103–110, July 2000.

[10] For more information about SAM Jupiter, see our product homepage: http://www.sam-security.com.

[11] R. Sandhu. Roles Versus Groups. In Proceedings of the First ACM Workshop on Role-Based Access Control, Gaithersburg, Maryland, USA, pages I–25–I–26, December 1995.

[12] R. Sandhu, E. Coyne, H. Feinstein, and C. Youman. Role-Based Access Control Models. IEEE Computer, 29(2):38–47, February 1996.

[13] D. Thomsen, R. O’Brien, and C. Payne. Napoleon Network Application Policy Enforcement. In Proceedings of the Fourth ACM Workshop on Role-Based Access Control, Fairfax, Virginia, USA, pages 145–152, October 1999.