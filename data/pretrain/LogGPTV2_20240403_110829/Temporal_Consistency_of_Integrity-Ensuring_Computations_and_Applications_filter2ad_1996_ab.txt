deed, in TrustLite, since memory can change during execution of
MP, the report produced and sent to Vrf might correspond to
a state of Prv’s memory that never existed in its entirety at any
given time. This is problematic if Prv is infected with migratory
malware. Assuming that such malware resides in the second half of
Prv’s memory, it can interrupt MP after the latter covers the first
half of Prv’s memory, copy itself into the first half, erase traces in
its former location, and resume MP. This way, malware remains
undetected despite the fact that all memory locations have been
measured.
In TyTAN [2], memory of each process is measured individu-
ally. While higher-priority processes may interrupt MP to meet
real-time requirements, the process being measured may not do
so, regardless of its priority. While this protects against a single-
process malware from moving in memory, malware that is spread
over several colluding processes can defeat this counter-measure.
Doing so would require malware to violate process isolation, e.g.,
by exploiting an OS vulnerability. Also, in a low-end device with a
single task (besides MP), this corresponds to uninterruptibility.
SMART [11] disables interrupts as the first step in MP. This
precludes migratory malware. Uninterruptibility is required as a
means to protect the attestation key and to ensure MP is performed
from beginning to end. However, temporal consistency was not
an explicit design goal of SMART. Consequently, although it coinci-
dentally guarantees consistency, SMART is unsuitable for time- or
safety-critical applications.
2Or encryption for CBC-MAC.
3For HMAC, the cost of the second hash is negligible compared to hashing data.
Signature time is independent of data sizes, since only the hash of the data is signed.
when memory to be attested includes data regions, such as program
stack, heap or various registers.
One obvious means of dealing with this problem is for Prv to
return to Vrf the actual contents of (parts of) M that are highly
mutable. For example, if M = [C, D] where C represents immutable
code and D – volatile high-entropy data region(s), Prv can return
the result of running MP over M, accompanied by a copy of D.
Clearly, this only makes sense if D is of modest size, e.g., |D| << L.
Furthermore, if D is a highly variable region content of which is
either irrelevant or must be empty, Prv can easily zero it out before
executing MP. This makes it impossible for malware to hide in
such a region and obviates the need for Prv to send Vrf an explicit
copy of D.
In the remainder of this paper, issues stemming from attestation
of static or dynamic memory regions are orthogonal to our work,
and thus are not discussed further.
3 MODELING TEMPORAL CONSISTENCY
We now introduce the model and notation for temporal consistency
and supporting mechanisms. Although we focus on RA, the model
is generic and relevant to other application domains that involve
integrity-ensuring functions. In addition to this section, we develop
in Appendix A a new definition for a security game that captures
temporal consistency in the context of secure remote attestation;
we believe that this definition may be of independent interest for
future research in remote attestation
We assume that input data is located in Prv’s memory M, which
consists of n contiguous blocks [M1 . . . Mn]. Without loss of gen-
erality, we assume that block bit-size matches that of the integrity-
ensuring function F, e.g., 512 for SHA2-HMAC, or 128 for AES-
CBC-MAC. We use Mi to denote content of the i-th block and Mt
–
i
content of Mi at time t.
We consider computation of R = F(M). For now, we focus on
temporal consistency for sequential functions, i.e., each Mi is read
and processed once during the execution of F and blocks are pro-
cessed in order: M1, M2, . . . , Mn. We model a sequential function F
as n independent functions Fi, operating on n blocks sequentially.
Content of memory blocks may change during execution of F,
for t < t′. However, fetching Mi (to
i.e., it might be that Mt
i
be processed by Fi) is considered to be an atomic operation.
We define temporal consistency for integrity-ensuring functions
as follows:
(cid:44) Mt′
i
Definition 1. Output R of an integrity-ensuring function F is
consistent with input M at time t iff: R = F(Mt).
We consider F to be correct and benign, i.e., it faithfully computes
what it is supposed to compute, and its implementation is bug-free.
In the context of RA, this holds since MP (containing F) is protected
by the underlying security architecture. For example, in hybrid RA
architectures, such as TrustLite, TyTAN and SMART, MP is stored
in, and executed from, ROM.
We now consider two specific types of malware.
Definition 2. Migratory malware is present in one or more blocks
of M at ts. It can move (by copying and erasing) itself at any point
during computation of F. Its purpose is to remain in M at te while
remaining undetected.
Figure 2: Computational costs of several hash functions and digital
signatures on ODROID-XU4.
2.3 A Trivial Approach
One trivial and intuitive way to address the contradicting require-
ments of temporal consistency and safety-critical operation is to
first copy memory to be attested over to an area to which MP has
exclusive write access. This way, computation can be performed
on the copy and MP can be arbitrarily interrupted. This would
presumably maximize availability while providing temporal consis-
tency.
Unfortunately, this simple mechanism prompts some concerns.
First, it requires sufficient additional memory, which may or may
not be available. Second, it requires this additional memory to be
locked (either permanently or on demand) to allow MP exclusive
write access. Third, copying represents an extra step, which results
in longer delays. Finally, it does not fully address the interruptibil-
ity/atomicity conflict; it just makes it smaller. Indeed, if copying
is uninterruptible, the same time-critical issues can arise, while if
interrupts are allowed, migratory malware can, in principle, still
evade detection. This is further discussed in Section 4.3.
In the remainder of this paper, we identify and evaluate other
mechanisms that reconcile temporal consistency with interruptible
execution of MP.
2.4 Attestation Target
The usual target of attestation on Prv is executable code. This code
can reside in RAM or in some non-volatile memory. Sometimes,
it might also be desirable to attest non-executable regions on Prv
(i.e., data) .
Let M, of bitsize L, represent Prv’s memory to be attested. If
the reference content of M is a priori known to Vrf and expected
to be immutable, then Prv can execute MP over M and send the
result to Vrf, who can easily validate it. (This is the case if M is
supposed to store static application code.) The same applies if M is
mutable and its entropy is low: Vrf can compute (or pre-compute)
all possible valid outputs of MP over M and thus validate Prv’s
result.
However, if entropy of M is high, enumeration of possible valid
states by Vrf can quickly become infeasible. This is likely to occur
2628210212214216218220222224226228230data [bytes]10-710-610-510-410-310-210-1100101102time [s]rsa1024rsa2048rsa4096ecdsap160ecdsap224ecdsap256SHA256SHA512BLAKE2bBLAKE2sDefinition 3. Transient malware is present in one or more blocks
of M at time ts. It can erase itself at any point during computation of
F. Its purpose is to escape detection.
If R is consistent with M at a given time t, and if R corresponds to
a benign state, it is guaranteed that no malware was present at time
t. This implies that, if ts ≤ t ≤ te, migratory malware cannot escape
detection. Furthermore, if t = ts, neither can transient malware.
4 TEMPORAL CONSISTENCY MECHANISMS
We now describe and analyze several mechanisms that offer various
tradeoffs between consistency guarantees and real-time require-
ments. Consistency is achieved through locking memory regions,
i.e., making them temporarily read-only. Such locking can be real-
ized via system-calls and capabilities enabled by a secure microker-
nel that is supported by underlying hardware features. e.g., as in
the formally-verified seL4 [18] microkernel.
Three points in the timeline of computation of an integrity-
ensuring function F are particularly relevant to our discussion (see
also Figure 3):
(1) ts, the instance where the computation of F starts;
(2) te, the instance when the computation ends;
(3) Optionally, tr when Prv is explicitly requested to release
an existing lock. This release request might come from Prv
itself, for instance if R is no longer relevant.
4.1 Simple Approaches
We begin with three obvious options.
4.1.1 No-Lock. The simplest mechanism is a strawman that
does not lock memory. The result is computed using contents of
each memory block Mi at the time when Fi processes it, which
means that it provides no consistency guarantees. Consequently, it
might not detect migratory or transient malware; see Table 1.
4.1.2 All-Lock. The other extreme is to lock the entire memory
M at ts, and leave it locked throughout computation of F, finally
releasing it all at te. This provides very strong temporal consistency
guarantees at the cost of being very restrictive and unfriendly to
interrupting (potentially critical) tasks that may require modifying
locked memory. R is consistent with M within [ts, te]. This also
implies that M is immutable and thus constant from ts to te.
4.1.3 All-Lock-Ext. An extended variant of All-Lock that
provides extra consistency keeps all memory locked until tr. Similar
to All-Lock, R remains consistent with M at every [ts, tr], and M
stays constant from ts to tr. An extended lock can be advantageous
if the verifier wishes to guarantee that Prv is in a given state at a
particular time tr, as opposed to “some time in the past”.
4.2 Sliding Locks
A natural next step for ensuring temporal consistency is to imple-
ment “sliding” mechanisms to dynamically lock or unlock blocks
of memory during execution of F. Variations of this mechanism are
described below and pictured in Figure 4.
4.2.1 Decreasing Lock (Dec-Lock). This is a less restrictive ver-
sion of All-Lock, which still provides strong consistency guaran-
tees. Entire M is locked at ts, and each Mi is released as soon as Fi
Table 1: Malware detection features.
Migratory Malware Transient Malware
No-Lock
All-Lock
Dec-Lock
Inc-Lock
Cpy-Lock
✗
✓
✓
✓
✓
✗
✓
✓
✗
✓
completes processing it. The output R is consistent with all of M at
time ts only. This implies detection of any malware present in M at
ts.
Let ti be the time that Fi starts/that Mi is loaded. We have the
additional guarantee that Mi remains constant between ts and ti. It
is therefore beneficial to start the computation of F with memory
blocks availability of which (to other processes) is important.
4.2.2
Increasing Lock (Inc-Lock). This variant is the opposite
of Dec-Lock. The main idea is to lock blocks as they are processed.
With entire M unlocked at ts, it becomes gradually locked as compu-
tation of F proceeds, until it is completely locked at te, after which
it is fully released. Each Mi is locked only when it is time for Fi.
Output R in this case is consistent with M at te only. This implies
detection of migratory, though not transient, malware. Also, Mi
remains constant between ti and te. Unlike Dec-Lock, it is beneficial
to finish computing F with blocks that require high availability,
since they are locked for the shortest time.
As discussed in Section 4.4.1, Inc-Lock is better-suited for han-
dling non-sequential functions. On the other hand, locking M can
influence the value of the end-result R. In contrast, Dec-Lock guar-
antees consistency at ts when locking has no impact on R. We con-
sider this to be a subtle yet important distinction between Dec-Lock
and Inc-Lock. Put another way, since Dec-Lock does not interfere
with any process until ts, the result R over the snapshot of M at ts is
in no way influenced by the computation of F. However, Inc-Lock
gradually locks memory and any process that interrupts the execu-
tion of F may or may not have write access to parts of memory that
it needs: the farther along is the computation of F, the less memory
is left unlocked (writable).
4.2.3 Extended Increasing Lock (Inc-Lock-Ext). As with
All-Lock-Ext, it is possible to add extra-computation consistency
to Inc-Lock by only releasing the lock at tr, instead of te. R thus re-
mains additionally consistent with M within the interval [te, tr], and
M stays constant in [te, tr]. This type of extension is not naturally
applicable to Dec-Lock since memory is not locked at te.
4.3 Mixing Copying with Locking
To minimize the impact on time-critical tasks, M can be first copied
to M′ and computation of F can be performed with the latter as
input. This approach is described below and shown in Figure 5.
4.3.1 Copy Lock (Cpy-Lock). Cpy-Lock reduces the time M is
locked by first cloning it and running F over the copy. A lock on M
is acquired at ts and M is copied to another memory segment, M′,
which is also locked. M′ may be a pre-locked portion of memory
allocated to F, or a lock on it may be acquired at ts. Once copying is
finished at time tc, M is entirely free. The second step is to proceed
to computing R = F(M′).
A
B
C
D
ts
te
tr
Figure 3: Timeline for computation of R = F(M). Computation starts at ts and ends at te. Consistency of R is considered until tr. A change to
M at time A or D has no effect. Impact of a change at time B or C depends on the consistency mechanism.
ts
te
tr
ts
ts
ts
ts
ts
te
tr
te
tr
ts
tc
te
tr
ts
tc
te
tc′
tr
(a) Dec-Lock
(b) Inc-Lock
(c) Inc-Lock-Ext
(a) Cpy-Lock
(b) Cpy-Lock & Writeback
Figure 4: Sliding mechanisms discussed in Section 4.2. M is repre-
sented horizontally. Locked portion of M is in gray.
Figure 5: Mechanisms discussed in Section 4.3. M is represented
horizontally. Locked portion of M is in gray.
The same guarantees as All-Lock apply here: R is consistent
with M in [ts, tc].
Cpy-Lock only makes sense if tc < te, i.e., if computation of F is
more time-consuming than copying M. Depending on how memory
locking and unlocking is implemented, it might be better to use
Dec-Lock during the copy, instead of All-Lock. Even though the
process is less streamlined and possibly less efficient, it may be