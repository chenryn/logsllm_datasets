Laplace distribution with mean 0 and scale factor of 2/ϵ. This ran-
dom value is then added to the public threshold T (stored as noisy
1Prior work [3] automatically generates coupling proofs, an alternative language-based
proof technique for differential privacy. But all existing verifiers using alignment-based
proofs[50, 51] require manually provided alignments.
threshold Tη). For each query answer, another independent Laplace
noise η2 = Lap (4N/ϵ) is added. If the noisy query answer q[i] +
η2 is above the noisy threshold Tη, the gap between them (q[i] +
η2 − Tη) is added to the output list out, otherwise 0 is added.
function GapSVT (T,N,size : num0 ,q : list num∗ )
returns (out : list num0 ), check(ϵ)
precondition ∀ i. −1 ≤(cid:98)q[i] ≤ 1
η1 := Lap (2/ϵ)
Tη := T + η1 ;
count := 0; i := 0;
while ( count |=|≤|≥
Bool Exprs
Num Exprs
Expressions
Commands
r
b
x
η
⊕ ::= + | −
⊗ ::= × | /
b ::= true | false | x | ¬b | n1 ⊙ n2
n ::= r | x | η | n1 ⊕ n2 | n1 ⊗ n2 | b ? n1 : n2
e
c
::= n | b | e1 :: e2 | e1[e2]
::= skip | x := e | η := д | c1; c2 |
if e then (c1) else (c2) |
while e do (c) | return e
Rand Exps
Types
Distances
д
τ
d
::= Lap r
::= numd | bool | list τ
::= 0 | ∗
Figure 2: CheckDP: language syntax.
PSI confirms that the probability of this output when q is an input
is ≥ eϵ times the probability of this output when q′ is the input.
When Phase 1 of the invalidate sub-loop generates a new align-
ment θ, which happens in our empirical study (Section 5), Phase
2 follows to generate an “improved” invalidating input, which is
then used to start Phase 2 of the validate sub-loop.
3 PROGRAM TRANSFORMATION
CheckDP takes a probablistic program along with an adjacency
specification (i.e., how much two adjacent inputs can differ) and
the claimed level of differential privacy as inputs. It translates the
source code into a non-probabilistic program with assertions to
ensure differential privacy. The transformed code forms the basis
of finding a proof or a counterexample (Section 4).
3.1 Syntax
The syntax of CheckDP source code is listed in Figure 2. Most of
the syntax is standard with the following features:
• Real numbers, booleans and their standard operations;
• Ternary expressions b ? n1 : n2, it returns n1 when b evaluates
• List operations: e1 :: e2 appends element e1 to list e2, and e1[e2]
• Loop with keyword while and branch with keyword if;
• A final return command return e.
We now introduce other interesting parts that are needed for
to true or n2 otherwise;
th
2 element of list e1;
gets the e
developing differentially private algorithms.
Random Expressions. Differential privacy relies heavily on prob-
abilistic computations: many mechanisms achieve differential pri-
vacy by adding appropriate random noise to variables. To model this
behavior, we embed a sampling command η := Lap r in CheckDP,
which draws a sample from the Laplace distribution with mean 0
and scale of r. In this paper, we only focus on the most interesting
sampling command Lap r (which is used in Laplace Mechanism
and GapSVT in Section 2). However, we note that it is fairly easy
to add new sampling distributions to CheckDP.
5
For clarity, we distinguish variables holding random values, de-
noted by η ∈ H, from other ones, denoted by x ∈ V.
Types with Distances. To enable alignment-based proof, one im-
portant aspect of the type system in CheckDP is the ability to
compute and track the distances for each program variable. Moti-
vated by verification tools using alignments (e.g., LightDP [51] and
ShadowDP [50]), types in the source language of CheckDP have
the form of B0 or B∗, where B is the base type such as numerics
(num), booleans (bool) and lists (list τ). The subscript of each type
is the key to alignment-based proofs: it explicitly tracks the exact
difference between the value of a variable in two related runs.
In the source language of CheckDP, the distances can either be 0
or ∗: the former indicates the variables stay the same in the related
runs; the latter means that the variable might hold different values in
two related runs and the value difference is stored in a distinguished
variable(cid:98)x added by the program transformation (i.e., a syntactic
sugar for dependent sum type((cid:98)x: num0) B(cid:98)x ). For example, inputs
(cid:98)q[i] in two related runs. The type system distinguishes zero-distance
T,N,size are annotated with distance 0 in Figure 1, meaning that
they are public parameters to the algorithm; query answers q are
annotated with distance ∗, meaning that each q[i] differ by exactly