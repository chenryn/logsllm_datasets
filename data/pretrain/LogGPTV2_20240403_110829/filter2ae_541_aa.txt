**作者：[Omegogogo](https://weibo.com/u/3679666233 "Omegogogo")  
来源：[Freebuf](https://www.freebuf.com/articles/web/199925.html "Freebuf")**
### **0×00 前言**
放假和小伙伴们打了几把PUBG，大半年没碰，居然也意外地躺着吃了次鸡。吃鸡这个游戏果然得4个认识的人打(dai)战(dai)术(wo)才更有趣。
由于身边搞安全的人比较多，之前也会和一些安全圈的大佬一起玩，经常会有些认识或不认识的黑阔大佬开着高科技带着躺鸡。当然笔者也曾羞耻地开过挂带妹（纪念号被封的第193天）。
那么这些黑阔大佬们，在不开挂的情况下，谁会是他们之中技术最好的呢？带着这样的疑问，试着从数据分析的角度来看看谁会是安全圈的吃鸡第一人。
> 注：全文所指的“安全圈”是一个非常狭义的概念，在本文中仅覆盖到小部分安全从业者玩家，所以标题有些夸大。如有其他错误也欢迎指出。
### 0×01 数据收集
怎么才能知道哪些安全从业者在玩这个游戏，他们的ID又是什么呢？
在一些APP里可以查到玩家的战绩，其中比较有价值的是，还能看到每位玩家的好友列表。
那么可以有这么个思路，也就是一个广度优先遍历：
  1. 确定一个初始的ID链表，并保证初始链表内都是安全圈内人士。
  2. 遍历初始链表内每一位玩家的所有好友。
  3. 当链表内H的好友J，同时也是链表内另外两位黑客的共同好友，那么认为J也是安全圈内人士，加入到链表尾处。
  4. 向后迭代重复2、3。
#### 动手实现
发现走的是https，挂上证书以MITM的方式来监听https流量：
可以发现数据是以json格式传递的，写个python脚本来自动完成获取数据，单线程+限速（一方面不至于给别人家的api爬挂了另一方面也不至于触发IDS、anti-CC等机制）。
脚本主要代码是：
    def r_get(nickname,offset):
    #发送给api的request
    ...
        return json#返回一个json格式
    def get_friends(nickname):
        offset  = 0 
        res_js = r_get(nickname,str(offset))
        temp_friends = res_js['result']['board']
        if res_js['status'] == "ok":
            while len(res_js['result']['board']) == 30:
                offset = offset + 30
                res_js = r_get(nickname,str(offset))
                temp_friends = temp_friends + res_js['result']['board']
            print("   {0}   的好友人数    {1}".format(res_js['result']['user_rank']['nickname'], len(temp_friends) -1 ))
            friends = []
            Wxname  = ""
            Wxsex = ""
            Wxavatar  = ""
            sql = ""
            for playerinfo in temp_friends:
                if playerinfo['nickname'] != res_js['result']['user_rank']['nickname']:
                    friends.append(playerinfo['nickname'])
                elif playerinfo.has_key('heybox_info') == True:
                    Wxname = playerinfo['heybox_info']['username']
                    Wxsex = playerinfo['heybox_info']['sex']
                    Wxavatar = playerinfo['heybox_info']['avartar']
            friends_s = ','.join(friends) 
            sql = "INSERT INTO player (nickname,avatar,steamID,friends,Wxname,Wxsex,Wxavatar) \
                  VALUES ('{0}','{1}','{2}','{3}','{4}','{5}','{6}')".format(res_js['result']['user_rank']['nickname'],res_js['result']['user_rank']['avatar'], res_js['result']['user_rank']['steam_id'],friends_s,Wxname,Wxsex,Wxavatar)
            return friends,sql      
        else:
            print("获取{0}的好友人数失败, 返回{1}".format(res_js['result']['user_rank']['nickname'],res_js['msg']))
            return 1 
    def record_rds(sql):
        #db操作
    def main():
       ...
笔者先确定一份初始安全圈列表，包括“Rickyhao”、“RicterZ”、“r3dr41n”、“PwnDog”等。这些人或是在bat、360等公司从事安全相关工作，或是笔者信安专业的同学，或ID明显带有安全的特征（PwnDog），总之都是比较确信的安全圈人士。
以这些人为初始列表，很快就有几位玩家被划定为安全圈人士。
在遍历到大约第50来位的时候也看到了自己的游戏昵称：Omego555（正是刚才提到开挂带妹被封的账号）
遍历到“wilson233”时发现直接跳过了，并没有被纳入到安全圈列表中，但笔者读过wilson写下的很多优质文章，他也是某甲方公司的安全从业者。
（该ID在后来的某次遍历中也被纳入了列表中，程序表现出一定的健壮性。 ）
在数据量达到1000多的时候笔者手动终止了程序。原因是列表增长的速度越来越快，在单线程+限速的限制下程序迟迟看不到收敛的希望。另一方面笔者只是想做个小测试，并不需要太大规模的数据集。
#### 观察数据集
初步观察数据集，发现很多有意思的事情：比如在遍历到第300多位玩家的时候，发现了一个ID带得有“pkav”字样的玩家” **PKAV-xiaoL**
“（pkav是原来在乌云很有名气的安全组织，其中一名成员“gainover”正是原乌云知识库《安全圈有多大》一文的作者，笔者也是受到这篇文章的启发才打算做这个小项目）。
随着PKAV-xiaoL被确定到安全圈列表中，由于社交关系，更多的pkav成员也被添加进列表中。
除了pkav-xxx，还看到了一些很眼熟的ID：比如【SparkZheng】—正是多个ios越狱的作者蒸米大大
比如【ma7h1as】，笔者大学时的队友，现玄武实验室大佬，多个Google/MS CVE获得者，超级大黑客
再来看这位，从游戏昵称看不出是谁，但微信昵称告诉我们这个账号的主人应该是安全盒子的创始人王松。
当然还有一些活跃在安全论坛，或者笔者有读过的一些高质量技术文章的作者的ID，眼熟的如”lightless233″、”LoRexxar”、”susu43″、”CurseRed”等，这里不再一一列举。
除此之外还有一些玩家，比如这位：
笔者既不认识他，也从未在安全论坛见过他的ID，只是猜想用“sudo”作为ID的人是安全从业者的可能性比较大吧。那么他真的会是安全圈人士吗？
试着搜索一下：
找到了他的GitHub，并在其中发现了很多你懂的东西，很有趣对吧？
### 0×02 社群发现与社区关系
我们发现了很多安全圈的吃鸡玩家，但是除了这些眼熟和有迹可循的ID，列表里躺着的绝大多数都是笔者没见过，陌生的ID。为了弄清楚他们之间的社区关系。我们使用一些算法和可视化工具来帮助进行数据分析。
先用环形关系图看看：
圆上的每个红点代表一位玩家，无数条灰边则将各位玩家串联起来。在这份数据集中一共有1270个节点，他们互相组成了共计14216次好友关系，形成了7128条灰边。称得上是复杂的社交网络了。
我们使用无向图来构建力引导关系，虽然在安全领域的风控、反欺诈方向中使用有向图更为广泛一些，但好友关系是双向的，因此这里用无向图。代码如下：
    # -*- coding: UTF-8-*-  
    from pyecharts import Graph
    import json
    import sys 
    import sqlite3
    conn = sqlite3.connect('db2.db')
    c = conn.cursor()
    print "Opened database successfully";
    cursor = c.execute("SELECT nickname,friends FROM player")
    nodes = []
    links = []
    temps = []
    for row in cursor:
        temps.append({"name":row[0],"friends":row[1].split(",")})  
        nodes.append({"name":row[0],"symbolSize":5})
    for temp in temps:
        for friend in temp["friends"]:
            if {"name":friend,"symbolSize":5} in nodes:
                links.append({"source":temp["name"],"target":friend})
    graph = Graph("力导图",width=1400,height=1600)
    graph.add(
        "",
        nodes,
        links,
        graph_layout = "force",
        label_pos="right",
        graph_repulsion=10,
        line_curve=0.2,
    )
    graph.render()
得到：