### Abuse Elevation Control Mechanism

**Created:** 2020-01-30T13:58:14.373Z  
**Modified:** 2023-04-21T12:35:07.744Z  
**ID:** T1548  
**Name:** Abuse Elevation Control Mechanism  
**Type:** attack-pattern  
**Version:** 1.1  

**Description:**
Adversaries may exploit mechanisms designed to control and elevate privileges to gain higher-level permissions. Most modern systems have native elevation control mechanisms intended to limit the actions a user can perform on a machine. Authorization must be granted to specific users to perform high-risk tasks. Adversaries can use various methods to take advantage of these built-in control mechanisms to escalate privileges on a system.

**Kill Chain Phases:**
- Privilege Escalation
- Defense Evasion

**Detection:**
- Monitor the file system for files with setuid or setgid bits.
- Look for process API calls indicative of Process Injection and unusual loaded DLLs, which may indicate attempts to access higher-privileged processes.
- On Linux, use auditd to alert when a user's actual ID and effective ID differ.
- Monitor for `/usr/libexec/security_authtrampoline` executions, which may indicate that `AuthorizationExecuteWithPrivileges` is being executed.
- On macOS, monitor system logs for `AuthorizationExecuteWithPrivileges` calls.
- Monitor OS API callbacks for execution, which may require specialized security tooling.
- Sudo has the ability to log all input and output based on the `LOG_INPUT` and `LOG_OUTPUT` directives in the `/etc/sudoers` file.
- For UAC bypasses, focus on mitigation and collecting information on process launches and actions before and after a UAC bypass.

**External References:**
- [MITRE ATT&CK - T1548](https://attack.mitre.org/techniques/T1548)

---

### Create Process with Token

**Created:** 2020-02-18T16:48:56.582Z  
**Modified:** 2023-04-11T21:14:37.714Z  
**ID:** T1134.002  
**Name:** Create Process with Token  
**Type:** attack-pattern  
**Version:** 1.2  

**Description:**
Adversaries may create a new process with an existing token to escalate privileges and bypass access controls. Processes can be created with the token and resulting security context of another user using features such as `CreateProcessWithTokenW` and `runas`.

Creating processes with a token not associated with the current user may require the credentials of the target user, specific privileges to impersonate that user, or access to the token to be used. For example, the token could be duplicated via Token Impersonation/Theft or created via Make and Impersonate Token before being used to create a process.

While this technique is distinct from Token Impersonation/Theft, the techniques can be used in conjunction where a token is duplicated and then used to create a new process.

**Kill Chain Phases:**
- Defense Evasion
- Privilege Escalation

**Detection:**
- If an adversary uses a standard command-line shell, detect token manipulation by auditing command-line activity, specifically looking for the `runas` command.
- If an adversary uses a payload that calls the Windows token APIs directly, detect token manipulation through careful analysis of user activity, examination of running processes, and correlation with other endpoint and network behavior.
- Monitor for use of Windows APIs such as `CreateProcessWithTokenW` and correlate activity with other suspicious behavior to reduce false positives.

**External References:**
- [MITRE ATT&CK - T1134.002](https://attack.mitre.org/techniques/T1134/002)
- [Microsoft - Runas](https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/cc771525(v=ws.11))

---

### Setuid and Setgid

**Created:** 2020-01-30T14:11:41.212Z  
**Modified:** 2023-03-15T18:43:20.995Z  
**ID:** T1548.001  
**Name:** Setuid and Setgid  
**Type:** attack-pattern  
**Version:** 1.1  

**Description:**
An adversary may abuse configurations where an application has the setuid or setgid bits set to run code in a different (and possibly more privileged) userâ€™s context. On Linux or macOS, when the setuid or setgid bits are set for an application binary, the application will run with the privileges of the owning user or group, respectively. This mechanism is used when programs need to be executed in an elevated context, but the user running them may not have the required privileges.

Adversaries can use this mechanism on their own malware to ensure they can execute in elevated contexts in the future. Alternatively, adversaries may find and target vulnerable binaries with the setuid or setgid bits already enabled. The setuid and setgid bits are indicated with an "s" instead of an "x" when viewing a file's attributes via `ls -l`. The `find` command can also be used to search for such files.

**Kill Chain Phases:**
- Privilege Escalation
- Defense Evasion

**Detection:**
- Monitor the file system for files that have the setuid or setgid bits set.
- Monitor for execution of utilities like `chmod` and their command-line arguments to look for setuid or setguid bits being set.

**External References:**
- [MITRE ATT&CK - T1548.001](https://attack.mitre.org/techniques/T1548/001)
- [GTFOBins - Suid](https://gtfobins.github.io/#+suid)

---

### Winlogon Helper DLL

**Created:** 2020-01-24T16:59:59.688Z  
**Modified:** 2023-03-30T21:01:47.069Z  
**ID:** T1547.004  
**Name:** Winlogon Helper DLL  
**Type:** attack-pattern  
**Version:** 1.0  

**Description:**
Adversaries may abuse features of Winlogon to execute DLLs and/or executables when a user logs in. Winlogon.exe is a Windows component responsible for actions at logon/logoff and the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete. Registry entries in `HKLM\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\` and `HKCU\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\` manage additional helper programs and functionalities that support Winlogon.

Malicious modifications to these Registry keys may cause Winlogon to load and execute malicious DLLs and/or executables. Specifically, the following subkeys may be abused:
- `Winlogon\Notify` - points to notification package DLLs that handle Winlogon events.
- `Winlogon\Userinit` - points to `userinit.exe`, the user initialization program executed when a user logs on.
- `Winlogon\Shell` - points to `explorer.exe`, the system shell executed when a user logs on.

**Kill Chain Phases:**
- Persistence
- Privilege Escalation

**Detection:**
- Monitor for changes to Registry entries associated with Winlogon that do not correlate with known software, patch cycles, etc.
- Use tools like Sysinternals Autoruns to detect system changes that could be attempts at persistence.
- Look for abnormal process behavior that may be due to a process loading a malicious DLL.

**External References:**
- [MITRE ATT&CK - T1547.004](https://attack.mitre.org/techniques/T1547/004)
- [Cylance - Windows Registry Persistence](https://blog.cylance.com/windows-registry-persistence-part-2-the-run-keys-and-search-order)

---

### System Firmware

**Created:** 2017-05-31T21:30:28.613Z  
**Modified:** 2020-03-30T19:16:29.473Z  
**ID:** T1019  
**Name:** System Firmware  
**Type:** attack-pattern  
**Version:** 1.0  
**Status:** Revoked  

**Description:**
The BIOS (Basic Input/Output System) and UEFI (Unified Extensible Firmware Interface) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer. System firmware underlies the functionality of a computer and may be modified by an adversary to perform or assist in malicious activity. Capabilities exist to overwrite the system firmware, which may give sophisticated adversaries a means to install malicious firmware updates as a means of persistence on a system that may be difficult to detect.

**Detection:**
- Detect system firmware manipulation.
- Dump and inspect BIOS images on vulnerable systems and compare against known good images.
- Analyze differences to determine if malicious changes have occurred.
- Log attempts to read/write to BIOS and compare against known patching behavior.
- Collect and compare EFI modules against a known-clean list of EFI executable binaries.
- Use the CHIPSEC framework for analysis to determine if firmware modifications have been performed.

**External References:**
- [MITRE ATT&CK - T1019](https://attack.mitre.org/techniques/T1019)
- [Wikipedia - BIOS](https://en.wikipedia.org/wiki/BIOS)
- [Wikipedia - UEFI](https://en.wikipedia.org/wiki/Unified_Extensible_Firmware_Interface)

---

### Distributed Component Object Model

**Created:** 2020-02-11T18:26:36.444Z  
**Modified:** 2023-04-03T18:58:54.034Z  
**ID:** T1021.003  
**Name:** Distributed Component Object Model  
**Type:** attack-pattern  
**Version:** 1.2  

**Description:**
Adversaries may use Valid Accounts to interact with remote machines by taking advantage of Distributed Component Object Model (DCOM). The adversary may then perform actions as the logged-on user.

The Windows Component Object Model (COM) is a component of the native Windows application programming interface (API) that enables interaction between software objects. Distributed COM (DCOM) extends the functionality of COM beyond a local computer using remote procedure call (RPC) technology. Permissions to interact with local and remote server COM objects are specified by access control lists (ACL) in the Registry. By default, only Administrators may remotely activate and launch COM objects through DCOM.

Through DCOM, adversaries can remotely obtain arbitrary and even direct shellcode execution through Office applications and other Windows objects that contain insecure methods. DCOM can also execute macros in existing documents and may invoke Dynamic Data Exchange (DDE) execution directly through a COM-created instance of a Microsoft Office application, bypassing the need for a malicious document. DCOM can be used as a method of remotely interacting with Windows Management Instrumentation (WMI).

**Kill Chain Phases:**
- Lateral Movement

**Detection:**
- Monitor for COM objects loading DLLs and other modules not typically associated with the application.
- Monitor for spawning of processes associated with COM objects, especially those invoked by a user different than the one currently logged on.
- Monitor for any influxes or abnormal increases in DCOM-related Distributed Computing Environment/Remote Procedure Call (DCE/RPC) traffic (typically over port 135).

**External References:**
- [MITRE ATT&CK - T1021.003](https://attack.mitre.org/techniques/T1021/003)
- [FireEye - Hunting COM Objects](https://www.fireeye.com/blog/threat-research/2019/06/hunting-com-objects.html)

---

### Change Default File Association

**Created:** 2017-05-31T21:30:42.222Z  
**Modified:** 2020-01-24T13:41:32.520Z  
**ID:** T1042  
**Name:** Change Default File Association  
**Type:** attack-pattern  
**Version:** 1.0  
**Status:** Revoked  

**Description:**
When a file is opened, the default program used to open the file (also called the file association or handler) is checked. File association selections are stored in the Windows Registry and can be edited by users, administrators, or programs that have Registry access. Applications can modify the file association for a given file extension to call an arbitrary program when a file with the given extension is opened.

System file associations are listed under `HKEY_CLASSES_ROOT\.extension`, for example, `HKEY_CLASSES_ROOT\.txt`. The entries point to a handler for that extension located at `HKEY_CLASSES_ROOT\handler`. The various commands are then listed as subkeys underneath the shell key at `HKEY_CLASSES_ROOT\handler\shell\action\command`. Adversaries can modify these values to continually execute arbitrary commands.

**Detection:**
- Collect and analyze changes to Registry keys that associate file extensions to default applications for execution and correlate with unknown process launch activity or unusual file types for that process.
- User file association preferences are stored under `HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts` and override associations configured under `HKEY_CLASSES_ROOT`.
- Look for abnormal process call trees for execution of other commands that could relate to Discovery actions or other techniques.

**External References:**
- [MITRE ATT&CK - T1042](https://attack.mitre.org/techniques/T1042)
- [Microsoft - Change Default Programs](https://support.microsoft.com/en-us/help/18539/windows-7-change-default-programs)

---

### Regsvr32

**Created:** 2017-05-31T21:31:26.966Z  
**Modified:** 2020-01-31T19:00:56.475Z  
**ID:** T1117  
**Name:** Regsvr32  
**Type:** attack-pattern  
**Version:** 1.2  
**Status:** Revoked  

**Description:**
Regsvr32.exe is a command-line program used to register and unregister object linking and embedding controls, including dynamic link libraries (DLLs), on Windows systems. Regsvr32.exe can be used to execute arbitrary binaries. Adversaries may take advantage of this functionality to proxy execution of code to avoid triggering security tools that may not monitor execution of, and modules loaded by, the regsvr32.exe process because of whitelists or false positives from Windows using regsvr32.exe for normal operations. Regsvr32.exe is also a Microsoft-signed binary.

Regsvr32.exe can also be used to specifically bypass process whitelisting using functionality to load COM scriptlets to execute DLLs under user permissions. Since regsvr32.exe is network and proxy aware, the scripts can be loaded by passing a uniform resource locator (URL) to a file on an external Web server as an argument during invocation. This method makes no changes to the Registry as the COM object is not actually registered, only executed. This variation of the technique is often referred to as a "Squiblydoo" attack and has been used in campaigns targeting governments.

**Detection:**
- Use process monitoring to monitor the execution and arguments of regsvr32.exe.
- Compare recent invocations of regsvr32.exe with prior history of known good arguments and loaded files to determine anomalous and potentially adversarial activity.
- Command arguments used before and after the regsvr32.exe invocation may also be useful in determining the origin and purpose of the script or DLL being loaded.

**External References:**
- [MITRE ATT&CK - T1117](https://attack.mitre.org/techniques/T1117)
- [Microsoft - How to use the Regsvr32 tool](https://support.microsoft.com/en-us/kb/249873)

---

### Password Spraying

**Created:** 2020-02-11T18:39:25.122Z  
**Modified:** 2023-04-14T23:04:38.816Z  
**ID:** T1110.003  
**Name:** Password Spraying  
**Type:** attack-pattern  
**Version:** 1.3  

**Description:**
Adversaries may use a single or small list of commonly used passwords against many different accounts to attempt to acquire valid account credentials. Password spraying uses one password (e.g., "Password01"), or a small list of commonly used passwords, that may match the complexity policy of the domain. Logins are attempted with that password against many different accounts on a network to avoid account lockouts that would normally occur when brute-forcing a single account with many passwords.

Typically, management services over commonly used ports are targeted, including SSH, Telnet, FTP, NetBIOS/SMB/Samba, LDAP, Kerberos, RDP/Terminal Services, HTTP/HTTP Management Services, MSSQL, Oracle, MySQL, and VNC. In addition to management services, adversaries may target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols, as well as externally facing email applications, such as Office 365.

**Kill Chain Phases:**
- Credential Access

**Detection:**
- Monitor authentication logs for system and application login failures of Valid Accounts. Specifically, monitor for many failed authentication attempts across various accounts that may result from password spraying attempts.
- Consider the following event IDs:
  - Domain Controllers: "Audit Logon" (Success & Failure) for event ID 4625.
  - Domain Controllers: "Audit Kerberos Authentication Service" (Success & Failure) for event ID 4771.
  - All systems: "Audit Logon" (Success & Failure) for event ID 4648.

**External References:**
- [MITRE ATT&CK - T1110.003](https://attack.mitre.org/techniques/T1110/003)
- [BlackHillsInfosec - Password Spraying](http://www.blackhillsinfosec.com/?p=4645)

---

### External Proxy

**Created:** 2020-03-14T23:12:18.466Z  
**Modified:** 2020-03-27T17:50:37.411Z  
**ID:** T1090.002  
**Name:** External Proxy  
**Type:** attack-pattern  
**Version:** 1.0  

**Description:**
Adversaries may use an external proxy to act as an intermediary for network communications to a command and control (C2) server to avoid direct connections to their infrastructure. Tools like HTRAN, ZXProxy, and ZXPortMap enable traffic redirection through proxies or port redirection. Adversaries use these types of proxies to manage C2 communications, provide resiliency in the face of connection loss, or ride over existing trusted communication paths to avoid suspicion.

External connection proxies are used to mask the destination of C2 traffic and are typically implemented with port redirectors. Compromised systems outside of the victim environment may be used for these purposes, as well as purchased infrastructure such as cloud-based resources or virtual private servers. Proxies may be chosen based on the low likelihood that a connection to them from a compromised system would be investigated.

**Kill Chain Phases:**
- Command and Control

**Detection:**
- Analyze network data for uncommon data flows, such as a client sending significantly more data than it receives from an external server.
- Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious.
- Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.

**External References:**
- [MITRE ATT&CK - T1090.002](https://attack.mitre.org/techniques/T1090/002)
- [Trend Micro - APT Attack Tools](http://blog.trendmicro.com/trendlabs-security-intelligence/in-depth-look-apt-attack-tools-of-the-trade/)

---

### Web Portal Capture

**Created:** 2020-02-11T18:59:50.058Z  
**Modified:** 2023-03-30T21:01:46.711Z  
**ID:** T1056.003  
**Name:** Web Portal Capture  
**Type:** attack-pattern  
**Version:** 1.0  

**Description:**
Adversaries may install code on externally facing portals, such as a VPN login page, to capture and transmit credentials of users who attempt to log into the service. For example, a compromised login page may log provided user credentials before logging the user in to the service.

This variation on input capture may be conducted post-compromise using legitimate administrative access as a backup measure to maintain network access through External Remote Services and Valid Accounts or as part of the initial compromise by exploitation of the externally facing web service.

**Kill Chain Phases:**
- Collection
- Credential Access

**Detection:**
- File monitoring may be used to detect changes to files in the Web directory for organization login pages that do not match with authorized updates to the Web server's content.

**External References:**
- [MITRE ATT&CK - T1056.003](https://attack.mitre.org/techniques/T1056/003)
- [Volexity - Virtual Private Keylogging](https://www.volexity.com/blog/2015/10/07/virtual-private-keylogging-cisco-web-vpns-leveraged-for-access-and-persistence/)

---

### Email Addresses

**Created:** 2020-10-02T14:56:24.866Z  
**Modified:** 2022-10-21T14:30:10.979Z  
**ID:** T1589.002  
**Name:** Email Addresses  
**Type:** attack-pattern  
**Version:** 1.2  

**Description:**
Adversaries may gather email addresses that can be used during targeting. Even if internal instances exist, organizations may have public-facing email infrastructure and addresses for employees.

Email addresses could be enumerated via more active means, such as probing and analyzing responses from authentication services that may reveal valid usernames in a system. For example, adversaries may be able to enumerate email addresses in Office 365 environments by querying a variety of publicly available API endpoints, such as autodiscover and GetCredentialType.

Gathering this information may reveal opportunities for other forms of reconnaissance, establishing operational resources, and/or initial access (e.g., Phishing or Brute Force via External Remote Services).

**Kill Chain Phases:**
- Reconnaissance

**Detection:**
- Monitor for suspicious network traffic that could be indicative of probing for email addresses and/or usernames, such as large/iterative quantities of authentication requests originating from a single source.
- Analyzing web metadata may also reveal artifacts that can be attributed to potentially malicious activity, such as referer or user-agent string HTTP/S fields.
- Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.

**External References:**
- [MITRE ATT&CK - T1589.002](https://attack.mitre.org/techniques/T1589/002)
- [Azure Active Directory Reconnaisance](https://o365blog.com/post/just-looking/)

---

### Re-opened Applications

**Created:** 2017-12-14T16:46:06.044Z  
**Modified:** 2020-01-24T18:26:18.933Z  
**ID:** T1164  
**Name:** Re-opened Applications  
**Type:** attack-pattern  
**Version:** 1.1  
**Status:** Revoked  

**Description:**
Starting in Mac OS X 10.7 (Lion), users can specify certain applications to be re-opened when a user reboots their machine. While this is usually done via a Graphical User Interface (GUI) on an app-by-app basis, there are property list files (plist) that contain this information as well, located at `~/Library/Preferences/com.apple.loginwindow.plist` and `~/Library/Preferences/ByHost/com.apple.loginwindow.*.plist`.

An adversary can modify one of these files directly to include a link to their malicious executable to provide a persistence mechanism each time the user reboots their machine.

**Detection:**
- Monitoring the specific plist files associated with reopening applications can indicate when an application has registered itself to be reopened.

**External References:**
- [MITRE ATT&CK - T1164](https://attack.mitre.org/techniques/T1164)
- [Methods of Mac Malware Persistence](https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf)

---

### Indicator Blocking

**Created:** 2017-05-31T21:30:47.384Z  
**Modified:** 2020-03-19T19:10:25.404Z  
**ID:** T1054  
**Name:** Indicator Blocking  
**Type:** attack-pattern  
**Version:** 1.1  
**Status:** Revoked  

**Description:**
An adversary may attempt to block indicators or events typically captured by sensors from being gathered and analyzed. This could include maliciously redirecting or even disabling host-based sensors, such as Event Tracing for Windows (ETW), by tampering settings that control the collection and flow of event telemetry. These settings may be stored on the system in configuration files and/or in the Registry, as well as being accessible via administrative utilities such as PowerShell or Windows Management Instrumentation (WMI).

ETW interruption can be achieved multiple ways, such as defining conditions using the PowerShell `Set-EtwTraceProvider` cmdlet or by interfacing directly with the registry to make alterations.

In the case of network-based reporting of indicators, an adversary may block traffic associated with reporting to prevent central analysis. This may be accomplished by stopping a local process responsible for forwarding telemetry and/or creating a host-based firewall rule to block traffic to specific hosts responsible for aggregating events, such as security information and event management (SIEM) products.

**Detection:**
- Detect lack of reported activity from a host sensor. Different methods of blocking may cause different disruptions in reporting.
- Depending on the types of host information collected, an analyst may be able to detect the event that triggered a process to stop or connection to be blocked.
- To detect changes in ETW, monitor the registry key which contains configurations for all ETW event providers: `HKLM\SYSTEM\CurrentControlSet\Control\WMI\Autologger\AUTOLOGGER_NAME\{PROVIDER_GUID}`.

**External References:**
- [MITRE ATT&CK - T1054](https://attack.mitre.org/techniques/T1054)
- [Microsoft - About Event Tracing](https://docs.microsoft.com/en-us/windows/desktop/etw/consuming-events)

---

### Redundant Access

**Created:** 2017-05-31T21:31:18.867Z  
**Modified:** 2021-03-08T10:33:00.985Z  
**ID:** T1108  
**Name:** Redundant Access  
**Type:** attack-pattern  
**Version:** 3.1  
**Status:** Deprecated  

**Description:**
**This technique has been deprecated. Please use [Create Account](https://attack.mitre.org/techniques/T1136), [Web Shell](https://attack.mitre.org/techniques/T1505/003), and [External Remote Services](https://attack.mitre.org/techniques/T1133) where appropriate.**

Adversaries may use more than one remote access tool with varying command and control protocols or credentialed access to remote services so they can maintain access if an access mechanism is detected or mitigated. If one type of tool is detected and blocked or removed as a response but the organization did not gain a full understanding of the adversary's tools and access, then the adversary will be able to retain access to the network. Adversaries may also attempt to gain access to Valid Accounts to use External Remote Services such as external VPNs as a way to maintain access despite interruptions to remote access tools deployed within a target network. Adversaries may also retain access through cloud-based infrastructure and applications.

Use of a Web Shell is one such way to maintain access to a network through an externally accessible Web server.

**Detection:**
- Existing methods of detecting remote access tools are helpful. Backup remote access tools or other access points may not have established command and control channels open during an intrusion, so the volume of data transferred may not be as high as the primary channel unless access is lost.
- Detection of tools based on beacon traffic, Command and Control protocol, or adversary infrastructure require prior threat intelligence on tools, IP addresses, and/or domains the adversary may use, along with the ability to detect use at the network boundary.
- For alternative access using externally accessible VPNs or remote services, follow detection recommendations under Valid Accounts and External Remote Services to collect account use information.

**External References:**
- [MITRE ATT&CK - T1108](https://attack.mitre.org/techniques/T1108)
- [Mandiant - APT1 Exposing One of Chinaâ€™s Cyber Espionage Units](https://www.fireeye.com/content/dam/fireeye-www/services/pdfs/mandiant-apt1-report.pdf)

---

### Spearphishing Attachment

**Created:** 2018-04-18T17:59:24.739Z  
**Modified:** 2020-03-02T19:08:17.884Z  
**ID:** T1193  
**Name:** Spearphishing Attachment  
**Type:** attack-pattern  
**Version:** 1.0  
**Status:** Revoked  

**Description:**
Spearphishing attachment is a specific variant of spearphishing. It employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon User Execution to gain execution.

There are many options for the attachment, such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so.

**Detection:**
- Network intrusion detection systems and email gateways can be used to detect spearphishing with malicious attachments in transit.
- Anti-virus can potentially detect malicious documents and attachments as they're scanned to be stored on the email server or on the user's computer.
- Endpoint sensing or network sensing can potentially detect malicious events once the attachment is opened (such as a Microsoft Word document or PDF reaching out to the internet or spawning PowerShell.exe).

**External References:**
- [MITRE ATT&CK - T1193](https://attack.mitre.org/techniques/T1193)
- [CAPEC - Spearphishing with Attachments](https://capec.mitre.org/data/definitions/163.html)

---

### Cached Domain Credentials

**Created:** 2020-02-21T15:42:25.991Z  
**Modified:** 2020-03-24T20:41:08.996Z  
**ID:** T1003.005  
**Name:** Cached Domain Credentials  
**Type:** attack-pattern  
**Version:** 1.0  

**Description:**
Adversaries may attempt to access cached domain credentials used to allow authentication to occur in the event a domain controller is unavailable. On Windows Vista and newer, the hash format is DCC2 (Domain Cached Credentials version 2), also known as MS-Cache v2 hash. The number of default cached credentials varies and can be altered per system. This hash does not allow pass-the-hash style attacks, and instead requires Password Cracking to recover the plaintext password.

With SYSTEM access, tools/utilities such as Mimikatz, Reg, and secretsdump.py can be used to extract the cached credentials.

**Kill Chain Phases:**
- Credential Access

**Detection:**
- Monitor processes and command-line arguments for program execution that may be indicative of credential dumping.
- Detection of compromised Valid Accounts in-use by adversaries may help as well.

**External References:**
- [MITRE ATT&CK - T1003.005](https://attack.mitre.org/techniques/T1003/005)
- [Microsoft - Cached and Stored Credentials Technical Overview](https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/hh994565(v%3Dws.11))

---

### SSH Authorized Keys

**Created:** 2020-06-24T12:42:35.144Z  
**Modified:** 2023-04-12T23:28:34.599Z  
**ID:** T1098.004  
**Name:** SSH Authorized Keys  
**Type:** attack-pattern  
**Version:** 1.2  

**Description:**
Adversaries may modify the SSH authorized_keys file to maintain persistence on a victim host. Linux distributions and macOS commonly use key-based authentication to secure the authentication process of SSH sessions for remote management. The authorized_keys file in SSH specifies the SSH keys that can be used for logging into the user account for which the file is configured. This file is usually found in the user's home directory under `<user-home>/.ssh/authorized_keys`.

Adversaries may modify SSH authorized_keys files directly with scripts or shell commands to add their own adversary-supplied public keys. In cloud environments, adversaries may be able to modify the SSH authorized_keys file of a particular virtual machine via the command line interface or REST API. For example, by using the Google Cloud CLIâ€™s "add-metadata" command, an adversary may add SSH keys to a user account. Similarly, in Azure, an adversary may update the authorized_keys file of a virtual machine via a PATCH request to the API. This ensures that an adversary possessing the corresponding private key may log in as an existing user via SSH.

Where authorized_keys files are modified via cloud APIs or command line interfaces, an adversary may achieve privilege escalation on the target virtual machine if they add a key to a higher-privileged user.

**Kill Chain Phases:**
- Persistence

**Detection:**
- Use file integrity monitoring to detect changes made to the authorized_keys file for each user on a system.
- Monitor for suspicious processes modifying the authorized_keys file.
- In cloud environments, monitor instances for modification of metadata and configurations.
- Monitor for changes to and suspicious processes modifying `/etc/ssh/sshd_config`.
- For network infrastructure devices, collect AAA logging to monitor for rogue SSH keys being added to accounts.

**External References:**
- [MITRE ATT&CK - T1098.004](https://attack.mitre.org/techniques/T1098/004)
- [Venafi - SSH Key Abuse](https://www.venafi.com/blog/growing-abuse-ssh-keys-commodity-malware-campaigns-now-equipped-ssh-capabilities)

---

### Kernel Modules and Extensions

**Created:** 2018-04-18T17:59:24.739Z  
**Modified:** 2021-03-30T00:59:53.427Z  
**ID:** T1215  
**Name:** Kernel Modules and Extensions  
**Type:** attack-pattern  
**Version:** 1.0  
**Status:** Revoked  

**Description:**
Loadable Kernel Modules (or LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. When used maliciously, Loadable Kernel Modules (LKMs) can be a type of kernel-mode Rootkit that run with the highest operating system privilege (Ring 0). Adversaries can use loadable kernel modules to covertly persist on a system and evade defenses. Common features of LKM-based rootkits include hiding itself, selective hiding of files, processes, and network activity, as well as log tampering, providing authenticated backdoors, and enabling root access to non-privileged users.

Kernel extensions, also called k