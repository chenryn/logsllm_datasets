a standard Kerberos Version 5 message that includes  PA-PK-AS-REQ pre- 
aut hen ticat ion fie Id 
a standard Kerberos Version 5 message that includes  PA-PK-AS-REP pre-authentication 
field 
Figure 3. The PKTAPP transaction flow 
The topology  envisioned  in  Figure  4  anticipates  that 
the local  KDC may be connected  to the client by  a local 
area network (LAN) and the remote KDC and application 
server may be connected by a wide area network (WAN). 
The  mathematical  solution  to 
the  queuing  network 
produces metrics for each queuing station and the system 
as  a  whole-metrics 
such  as  the  average  number  of 
customers,  the  average  delay  time,  and  the  customer 
throughput.  These  metrics  can  be  used  to  compare  the 
performance of the alternative Kerberos proposals. 
the 
Figure  4  presents 
topology  of  a  two-realm 
Kerberos  closed  queuing  network  model.  Customers 
circulate  among  the  servers  in  the  closed  network  and 
sequentially  wait 
for  service,  consume  processing 
resources, and then proceed to the next service station. 
Applicatiori 
Sewer 1 
Remote 
Application 
Sewer n 
Figure 4. The topology of a two-realm Kerberos 
closed queuing network model 
The  brute-force  mathematical  solution  to  the  closed 
queuing  network  can  be  obtained  by  enumerating  all 
possible  states  (that  is,  all  possible  combinations  of 
customers  at  each  server)  and  solving  the  simultaneous 
set  of  equations  representing  balanced  probability  flow 
into  and  out  of  each  state.  This  is  called  the  global 
balance  solution  [12].  For  any  practical  number  of 
customers and servers, the state space is extremely large, 
and the global balance equations are impractical to solve. 
If  the  closed  queuing  network  meets a  certain  set  of 
independence  of 
criteria-primarily 
servers  and  customers-the 
closed  queuing  network  can 
be  represented  by  a  “product  form”  solution  [13].  In  a 
product  form  solution, the  probability  that  the  system is 
in  a  given  state  N  =  (n,,  n2, ...,  nk) representing  the 
number of customers at all k  servers is proportional to the 
product  of  the  marginal  probabilities  P,(n,) that  server  i 
has n, customers. The product form queuing network can 
be  solved  efficiently  even  for  large  numbers  of  servers 
and customers [ 1 1, 141. 
concerning 
the 
A  typical  problem  with  this  solution  approach  is  the 
practicality  of 
the  assumptions  required  to  achieve 
product form. For example, it is difficult to assume, when 
174 
analyzing authentication  protocols, that all customers at a 
“first-come, first-served” resource  have  the  same average 
service  times.  Public  key  encryption  will  be  applied  at 
specific  points  in  the  protocol.  A  message  undergoing 
public  key encryption  will  require much  more processor 
service  time  than  a  message  undergoing  secret  key 
encryption.  Hence,  it  is  impractical  to  assume  that  all 
messages  arriving at  a  server  will  experience  the  same 
average service time. One way around this dilemma is to: 
assume  that  the  server  performing the  encryption 
follows a processor sharing [ 141 queuing scheme, 
assume 
that  messages  undergoing  public  key 
encryption  are  in  a  different  class  [I41  than  messages 
undergoing secret key encryption, and 
implement  a  class-switching 
[ I  1,  131  model  in 
which a transaction  will switch from one class to another 
.as 
types  of  encryption  and 
correspondingly different service times. 
requires  different 
it 
In the above construction,  each closed set of customer 
classes forms an  independent Markov chain  [12],  and  a 
product form solution is maintained. 
2.5 Authentication Performance Problems in 
Large Networks 
The  context  for  this  analysis  is  authentication  in  a 
large,  multi-realm  network.  Consider  the  following 
example as an illustration. 
An  intelligent  software  agent  representing  a  law 
enforcement  official  is  collecting  information  for  an 
investigation.  The agent  “visits”  on-line town  halls  and 
virtual  sheriffs  offices 
in  a  nationwide  search  for 
evidence and  investigative  intelligence.  At each stop, the 
agent  must  show  well-accepted  electronic  credentials. 
The source and level of these credentials will  be used to 
grant  the  agent  access  to  records  tightly  controlled  for 
reasons of  confidentiality  and security. Further, the agent 
may be requested  to pay  for information  with electronic 
currency.  The  infrastructure  to  support  this  type  of 
electronic  investigation  will  require  scalable,  robust 
authentication  protocols. 
The  intelligent  agent  will  probably  be  transiting 
multiple  security  realms  in  the  course  of  the  cyber 
investigation.  Both  PKTAPP  and  PKCROSS  are 
candidates  for  the  authentication  protocol.  A  quick 
analysis  might conclude that PKTAPP would have better 
performance  characteristics  because  the  agent  would 
authenticate directly  at  the  application server  with  only 
two message pairs. However, the agent may be interested 
in  authenticating  to  several  servers  within  a  single 
realm-as  would  be the case for a visit to the cyber town 
hall,  courthouse,  police  station,  and  sheriff‘s  office  for 
the same township. 
If the agent uses PKCROSS, an expensive public  key 
authentication  would be required  only once-between 
the 
local  KDC  and  the  remote  KDC.  After  the  cross- 
authentication  and  the provision  of a TGT to the remote 
TGS, only  secret key  encryption calculations would  be 
required.  At  some  application-server-to-realm  ratio,  it 
would be more efficient to use the PKCROSS protocol. 
This  is  the  specific  performance  question  we  will 
explore: Under what  circumstance is it  more efficient to 
authenticate  to  a  central  KDC  than 
individual 
applications servers’? 
to 
3. Methodology 
Any analysis of PKTAPP and PKCROSS should start 
with  reference  implementations  of  the  two  protocols. 
Unfortunately, there  are no  such sources for PKCROSS 
and  PKTAPP.  Consequently, we  began  our  analysis  by 
building  “skeleton” 
two 
protocols. 
implementations  of 
these 
the 
The objective of  the skeleton  design  was to  consume 
computing resources similar to actual  implementations of 
the protocol (resulting from communications, encryption, 
and  message  processing),  bur  to  avoid  many  of  the 
complexities  presented  by 
real 
protocols.  For  example,  we  excluded  error  processing 
and  many  optional  Kerberos features  from the  skeleton. 
The  implementation  also  included  more  detail  in  the 
servers  than  in  the  clients  because  the  servers  are  the 
shared resources. 
implementing 
We developed  the  skeletons in  standard  C  and  used 
the RSA reference library, RSAREF [15], for public key 
encryption and  Karn’s DES  library  [16] for  symmetric 
key  encryption.  We 
the  KDCs  and 
application servers  on  Microsoft Windows  NT  and  the 
clients  on  Microsoft Windows 98. However, we  did not 
use  any  operating-system-specific  extensions  in  the  C 
programs. 
implemented 
Figure  5  presents  the  software  architecture.  In  the 
PKCROSS transaction, the  client  process  steps through 
the  standard  Kerberos  authentication  message  sequence 
to request  service from an application server in a remote 
realm. 
175 
t t  
P KCROSS Skeleton Implementation 
Local KDC 
KDC Process L1 
Remote KDC 
KDC Process R 2  
I 
I 
Application Server 
pp Server Process A 
I 
I 
1 
TC P 
connection 
P KT A PP S kele to n Im p lem en tat i on 
A pp I icati on Server 
Client Workstation 
Pkclient Process 
TCP 
connection 
U DP 
datagram 
Thread Names 
AS-REQIREP:  Handles initial  Kerberos V  authentication  requests and replies 
TG-REQ/REP  : Handles initial Kerberos V  ticket requests and replies 
PK-ASIREQIREP: Handles public key Kerberos authentication  requests  and replies 
AP-R EQlRE P: Handles Kerb eros V  application  server authentications 
Figure 5. The PK-enabled Kerberos skeleton software architecture 
176 
The primary  purpose  of  the  skeleton software on  the 
client is to issue requests, quickly confirm the  validity of 
the  response,  and  timestamp  the  transaction  to  report 
response  time  statistics. The  client  side  processing  has 
been  simplified  to  focus on  the  shared  resources: KDCs 
and  Application  Servers.  The  client  process  will  loop 
through  many  transactions  for  the  purpose  of  reporting 
average response time statistics. 
A  single  process  runs  on  the  local  KDC  to  accept 
client requests in  UDP datagrams and cross-authenticate 
with the remote KDC using PKINIT. Two processes run 
on  the  remote  KDC:  one  waits  for  standard  Kerberos 
requests arriving as UDP datagrams, and the other opens 
a  TCP 
for  PKINIT 
transactions.  All  KDC and  Application Server processes 
are  multi-threaded-when 
they  receive  a  message,  they 
dispatch  a thread  to process and  respond to the request. 
In the final step of the transaction,  the client authenticates 
to the Application Server using a ticket received from the 
remote KDC. 
socket  and  waits 
listening 
In  the PKTAPP transaction, the client  process  has  the 
same  role  and  interacts  with  two  server  processes.  It 
conducts, a PICINIT  exchange over a TCP connection to a 
mu1ti;threaded  process  and' obtains  a sewice ricker.  The 
client  completes.  the  authentication  by  sending  a  UDP' 
datagram (a, Kerberos  Version' 5; AP-REQ  message)' KO a 
multi-threaded  process  running  on  the  same'  physical 
server. 
With  the availability  of measurable,  skeleton  versions 
of  PKCROSS  and  PKTAPP,  we  followed  a  five-step 
approach  to  answer  the  questions  posed  in  Section 2 
concerning public-key-enabled  Kerberos variants: 
1. Establish  a  test  bed  to  measure  Kerberos  service 
times. Figure  6 illustrates  a  multi-domain  Kerberos  test 
sizes 
and  message 
bed.  We  used  instrumented  code,  an  IP-layer  packet 
monitor,  and  software  monitors  to  capture  the  service 
times 
cross-domain 
authentication transaction. The test bed uses simple, low- 
level  PCs  for  all  clients  and  servers and  connects them 
with  a  IO-Mbps  Ethernet  LAN.  All  servers  used  the 
Microsoft Windows NT operating system; all clients used 
the Microsoft Windows 98 operating system. 
for  a 
2. Develop  a  closed  queuing  network  model  of 
Kerberos  multidomain authentication. We constructed a 
queuing model,  similar in  topology  to  that  illustrated  in 
Figure 4, to represent the operation of Kerberos Version 5 
with  public  key  extensions.  The queuing  model  uses  a 
class-switching  formulation so  the  service times can  be 
varied for each step in the protocol. 
3. Calibrate  the  queuing  model  aminst  the  test  bed. 
We  ran  automated  authentication  scripts  on  each  client 
workstation  in  Figure 6 to  generate load on  the  servers. 
We measured  transaction  throughput  and response times 
for  several  levels  of  workload  submission.  Then  we 
entered  similar workload  profiles  into the queuing model 
to calibrate the model against the test bed emulations. This 
step dkmonsmredi tihe predictim acc.macy of  the  queuing 
model. 
4.. Execute the model, withdifferenr numbers of realms 
and;  servers.  We  executed:  the  modtl!  with;  varying 
numbers, of realms. and  servevs. per  realin to, observe the 
effects: on: tboaghgut and' tiesponse t h e .  
5. Analyze  sensitivity  to  changes in  service time  and 
network  delay.  Any  conclusions  about  the  situations 
favoring  PKTAPP  and  PKCROSS  performance  will 
depend on the capacity and the resources that support the 
protocols, primarily  server speed and  network  delay. We 
varied 
these  parameters  in  our  model  in  order  to 
understand the dependencies. 
Application Server 
Remote K Cc  I 
1 
1 
LocalKDC 
Figure 6. A multiple-realm Kerberos test bed 
177 
4. Analysis 
4.1 Model Calibration 
The flow of the PKCROSS and PKTAPP transactions 
follows  the  message  exchanges  illustrated  in  Figures  2 
and  3. These baseline  transactions are  constructed with 
one  application  host  in  a  remote  realm.  Because  the 
environment under study is a large, multi-realm  network, 
it  is  assumed  that  the  client  and  KDCs  must  present 
certificates  for  authentication  (that  is,  no  parties  store 
certificate serial numbers and local copies of certificates). 
Further, it is assumed that the remote server must validate 
two certificates in a chain corresponding to the certificate 
signed  by  the  local  CA  and  a  certificate  signed  by  the 
remote  CA.  The  same  assumptions  are  applied  to  the 
authentication of the local KDC to the remote KDC. 
implementations 
We  configured  the  client,  KDCs,  and  application 
server 
to  perform  all  encryption 
operations  with  1024-bit RSA  keys  or  standard  DES. 
Table  1 summarizes the encryption  operations  performed. 
The  number  of  public  and  private  key  operations  for 
authentication to  a single application server is  identical. 
PKCROSS requires more secret key operations. 
The model’s  predictive accuracy  for  PKCROSS  and 
PKTAPP  transactions  is  shown  in  Figures  7  and  8, 
respectively.  Both  graphs  demonstrate  good  calibration 
between  the  model  and  observed  test  bed  results.  The 
predicted  response  times  and  throughputs  are  within  3 
percent of measured results. 
4.2 PKCROSS and PKTAPP Performance 
Predictions 
to 
We  used 
the  calibrated  model 
investigate 
performance  with  an  increased  number  of  application 
servers. As the  number of  application servers increases, 
the number of  “visits” made to the corresponding servers 
in  each  transaction  increases. The PKTAPP transaction 
will include an additional set of public key authentication 
calculations for every additional application server. In the 
PKCROSS  transaction,  there  is  only  one  public  key 
authentication-between 
the  local  and  remote  realm 
of  the  number of  application servers 
KDCs-regardless 
in the remote realm. 
Figure  9  presents  the  comparative  performance- 
transaction  response  time  plotted  as  a  function  of 
throughput-for 
the  PKCROSS and  PKTAPP protocols 
as the  number of  application servers are  increased. The 
transactions  for  PKCROSS  represent  authentication  to 
one and  sixteen application servers in  the remote realm. 
The transactions for PKTAPP represent authentication  to 
one,  two,  and  four  servers  in  the  remote  realm.  We 
expect  that  uses  similar  to  the  example  offered 
in 
Paragraph  2.5  could  require  authentication  to  four  or 
more servers in a single realm. 
The 
transaction  rates  for  both  protocols  were 
increased  until the overall response time became unstable 
and  grew rapidly. In the  PKCROSS transaction, the first 
bottleneck  was  the  remote  KDC  processor,  which  had 
two processes running (one monitoring UDP traffic  and 
the  other  listening  for  PKINIT  transactions  over  TCP 
connections) and handled  half the public key calculations 
for the KDC-to-KDC PKINIT exchange. 
Table 1. A summary of the encryption operation performed for PKCROSS and PKTAPP 
authentication transactions 
178 
55 
50 