[Authentik](https://goauthentik.io/) is an open-source Identity Provider focused on flexibility and versatility.
What I like:
* Is maintained and popular
* It has a clean interface
* They have their own [terraform provider](https://registry.terraform.io/providers/goauthentik/authentik/latest/docs/resources/application) Oo!
What I don't like:
* It's heavy focused on GUI interaction, but you can export the configuration to YAML files to be applied without the GUI interaction.
* The documentation is oriented to developers and not users. It's a little difficult to get a grasp on how to do things in the platform without following blog posts.
# [Installation](https://goauthentik.io/docs/installation)
You can install it with Kubernetes or with `docker-compose`. I'm going to do the second.
Download the latest `docker-compose.yml` from [here](https://goauthentik.io/docker-compose.yml). Place it in a directory of your choice.
If this is a fresh authentik install run the following commands to generate a password:
```bash
# You can also use openssl instead: `openssl rand -base64 36`
sudo apt-get install -y pwgen
# Because of a PostgreSQL limitation, only passwords up to 99 chars are supported
# See https://www.postgresql.org/message-id/PI:EMAIL
echo "PG_PASS=$(pwgen -s 40 1)" >> .env
echo "AUTHENTIK_SECRET_KEY=$(pwgen -s 50 1)" >> .env
```
It is also recommended to configure global email credentials. These are used by authentik to notify you about alerts and configuration issues. They can also be used by Email stages to send verification/recovery emails.
Append this block to your .env file
```bash
# SMTP Host Emails are sent to
AUTHENTIK_EMAIL__HOST=localhost
AUTHENTIK_EMAIL__PORT=25
# Optionally authenticate (don't add quotation marks to your password)
AUTHENTIK_EMAIL__USERNAME=
AUTHENTIK_EMAIL__PASSWORD=
# Use StartTLS
AUTHENTIK_EMAIL__USE_TLS=false
# Use SSL
AUTHENTIK_EMAIL__USE_SSL=false
AUTHENTIK_EMAIL__TIMEOUT=10
# Email address authentik will send from, should have a correct @domain
AUTHENTIK_EMAIL__FROM=authentik@localhost
```
By default, authentik listens on port 9000 for HTTP and 9443 for HTTPS. To change this, you can set the following variables in .env:
```bash
AUTHENTIK_PORT_HTTP=80
AUTHENTIK_PORT_HTTPS=443
```
You may need to tweak the `volumes` and the `networks` sections of the `docker-compose.yml` to your liking.
Once everything is set you can run `docker-compose up` to test everything is working.
In your browser, navigate to authentik’s initial setup page https://auth.home.yourdomain.com/if/flow/initial-setup/
Set the email and password for the default admin user, `akadmin`. You’re now logged in.
# Configuration
## [Terraform](https://registry.terraform.io/providers/goauthentik/authentik/latest/docs)
You can use [`terraform`](terraform.md) to configure authentik! `-
      2829BASDFHWEGWG23WDSLKGL323534J35LKWERQS,
      2GEFDBW349YHEDOH2T0GE9RH0NEORIG342RFSLHH
```
Then create the secrets file with the command `sops secrets.enc.json` somewhere in your terraform repository. For example:
```json
{
  "authentik_token": "paste the token here"
}
```
```hcl
terraform {
  required_providers {
    authentik = {
      source = "goauthentik/authentik"
      version = "~> 2023.1.1"
    }
    sops = {
      source = "carlpett/sops"
      version = "~> 0.5"
    }
  }
}
provider "authentik" {
  url   = "https://oauth.your-domain.org"
  token = data.sops_file.secrets.data["authentik_token"]
}
```
## [Configure some common applications](https://goauthentik.io/integrations/)
You have some guides to connect [some popular applications](https://goauthentik.io/integrations/)
### [Gitea](https://goauthentik.io/integrations/services/gitea/)
You can follow the [Authentik Gitea docs](https://goauthentik.io/integrations/services/gitea/) or you can use the next terraform snippet:
```hcl
# ----------------
# --    Data    --
# ----------------
data "authentik_flow" "default-authorization-flow" {
  slug = "default-provider-authorization-implicit-consent"
}
# -----------------------
# --    Application    --
# -----------------------
resource "authentik_application" "gitea" {
  name              = "Gitea"
  slug              = "gitea"
  protocol_provider = authentik_provider_oauth2.gitea.id
  meta_icon = "application-icons/gitea.svg"
  lifecycle {
    ignore_changes = [
      # The terraform provider is continuously changing the attribute even though it's set
      meta_icon,
    ]
  }
}
# --------------------------
# --    Oauth provider    --
# --------------------------
resource "authentik_provider_oauth2" "gitea" {
  name               = "Gitea"
  client_id = "gitea"
  authorization_flow = data.authentik_flow.default-authorization-flow.id
  property_mappings = [
    authentik_scope_mapping.gitea.id,
    data.authentik_scope_mapping.email.id,
    data.authentik_scope_mapping.openid.id,
    data.authentik_scope_mapping.profile.id,
  ]
  redirect_uris = [
    "https://git.your-domain.org/user/oauth2/authentik/callback",
  ]
  signing_key = data.authentik_certificate_key_pair.default.id
}
data "authentik_certificate_key_pair" "default" {
  name = "authentik Self-signed Certificate"
}
# -------------------------
# --    Scope mapping    --
# -------------------------
resource "authentik_scope_mapping" "gitea" {
  name       = "Gitea"
  scope_name = "gitea"
  expression = <<EOF
gitea_claims = {}
if request.user.ak_groups.filter(name="Users").exists():
    gitea_claims["gitea"]= "user"
if request.user.ak_groups.filter(name="Admins").exists():
    gitea_claims["gitea"]= "admin"
return gitea_claims
EOF
}
data "authentik_scope_mapping" "email" {
  managed = "goauthentik.io/providers/oauth2/scope-email"
}
data "authentik_scope_mapping" "openid" {
  managed = "goauthentik.io/providers/oauth2/scope-openid"
}
data "authentik_scope_mapping" "profile" {
  managed = "goauthentik.io/providers/oauth2/scope-profile"
}
# -------------------
# --    Outputs    --
# -------------------
output "gitea_oauth_id" {
  value = authentik_provider_oauth2.gitea.client_id
}
output "gitea_oauth_secret" {
  value = authentik_provider_oauth2.gitea.client_secret
}
```
It assumes that:
* You've changed `git.your-domain.org` with your gitea domain.
* The gitea logo is mounted in the docker directory `/media/application-icons/gitea.svg`.
Gitea can be configured through terraform too. There is an [official provider](https://gitea.com/gitea/terraform-provider-gitea/src/branch/main) that doesn't work, there's a [fork that does though[(https://registry.terraform.io/providers/Lerentis/gitea/latest/docs). Sadly it doesn't yet support configuring Oauth Authentication sources. So you'll need to configure it manually.
Be careful [`gitea_oauth2_app`](https://registry.terraform.io/providers/Lerentis/gitea/latest/docs/resources/oauth2_app) looks to be the right resource to do that, but instead it configures Gitea to be the Oauth provider, not a consumer.
## [Configure the invitation flow](https://yewtu.be/watch?v=mGOTpRfulfQ)
Let's assume that we have two groups (Admins and Users) created under `Directory/Groups` and that we want to configure an invitation link for a user to be added directly on the `Admins` group.
Authentik works by defining Stages and Flows. Stages are the steps you need to follow to complete a procedure, and a flow is the procedure itself.
You create Stages by:
* Going to the Admin interface
* Going to Flows & Stages/Stages
* Click on Create
To be able to complete the invitation through link we need to define the next stages:
* An Invitation Stage: This stage represents the moment an admin chooses to create an invitation for a user. 
  Graphically you would need to:
  * Click on Create
  * Select Invitation Stage
  * Fill the form with the next data:
    * Name: enrollment-invitation
    * Uncheck the `Continue flow without invitation` as we don't want users to be able to register without the invitation.
  * Click Finish
  Or use the next terraform snippet:
  ```terraform
  resource "authentik_stage_invitation" "default" {
    name                             = "enrollment-invitation"
    continue_flow_without_invitation = false
  }
  ```
* An User Write Stage: This is when the user will be created but it won't show up as the username and password are not yet selected.
  Graphically you would need to:
    * Click on Create
    * Select User Write Stage
    * Click on Next
    * Fill the form with the next data:
      * Name: enrollment-invitation-admin-write
      * Enable the `Can Create Users` flag.
      * If you want users to validate their email leave "Create users as inactive" enabled, otherwise disable it.
      * Select the group you want the user to be added to. I don't [yet know how to select more than one group](https://github.com/goauthentik/authentik/issues/2098)
      * Click on Finish
  Or use the next terraform snippet:
  ```terraform
  resource "authentik_stage_user_write" "admin_write" {
    name                     = "enrollment-invitation-admin-write"
    create_users_as_inactive = true
    create_users_group       = authentik_group.admins.id
  }
  ```
  Where `authentik_group.admin` is defined as:
  ```terraform
  resource "authentik_group" "admins" {
    name         = "Admins"
    is_superuser = true
    users = [
      data.authentik_user.user_1.id,
      data.authentik_user.user_2.id,
    ]
  }
  data "authentik_user" "user_1" {
    username = "user_1"
  }
  data "authentik_user" "user_2" {
    username = "user_2"
  }
  ```
* Email Confirmation Stage: This is when the user gets an email to confirm that it has access to it
  Graphically you would need to:
  * Click on Create
  * Select Email Stage
  * Click on Next
    * Name: email-account-confirmation
    * Subject: Account confirmation
    * Template: Account confirmation
  * Click on Finish
  Or use the next terraform snippet:
  ```terraform
  resource "authentik_stage_email" "account_confirmation" {
    name                     = "email-account-confirmation"
    activate_user_on_success = true
    subject                  = "Authentik Account Confirmation"
    template                 = "email/account_confirmation.html"
    timeout                  = 10
  }
  ```
Create the invitation Flow:
  Graphically you would need to:
  * Go to `Flows & Stages/Flows`
  * Click on Create
  * Fill the form with the next data:
    * Name: Enrollment Invitation Admin
    * Title: Enrollment Invitation Admin
    * Designation: Enrollment
    * Unfold the Behavior settings to enable the Compatibility mode
  * Click Create
  Or use the next terraform snippet:
  ```terraform
  resource "authentik_flow" "enrollment_admin" {
    name        = "Enrollment invitation admin"
    title       = "Enrollment invitation admin"
    slug        = "enrollment-invitation-admin"
    designation = "enrollment"
  }
  ```
We need to define how the flow is going to behave by adding the different the stage bindings:
* Bind the Invitation admin stage:
  Graphically you would need to:
  * Click on the flow we just created `enrollment-invitation-admin`
  * Click on `Stage Bindings`
  * Click on `Bind Stage`
  * Fill the form with the next data:
    * Stage: select `enrollment-invitation-admin`
    * Order: 10
  * Click Create
  Or use the next terraform snippet:
  ```terraform
  resource "authentik_flow_stage_binding" "invitation_creation" {
    target = authentik_flow.enrollment_admin.uuid
    stage  = authentik_stage_invitation.default.id
    order  = 10
  }
  ```
* Bind the Enrollment prompt stage: This is a builtin stage where the user is asked for their login information
  Graphically you would need to:
  * Click on `Bind Stage`
  * Fill the form with the next data:
    * Stage: select `default-source-enrollment-prompt`
    * Order: 20
  * Click Create
  * Click Edit Stage and configure it wit:
    * On the fields select: 
      * username
      * name
      * email
      * password
      * password_repeat
    * Select the validation policy you have one
  Or use the next terraform snippet:
  ```terraform
  resource "authentik_stage_prompt" "user_data" {
    name = "enrollment-user-data-prompt"
    fields = [ 
        authentik_stage_prompt_field.username.id,
        authentik_stage_prompt_field.name.id,
        authentik_stage_prompt_field.email.id,
        authentik_stage_prompt_field.password.id,
        authentik_stage_prompt_field.password_repeat.id,
    ]
  }
  resource "authentik_stage_prompt_field" "username" {
    field_key = "username"
    label     = "Username"
    type      = "text"
    order = 200
    placeholder = <<EOT
  try:
      return user.username
  except:
      return ''
  EOT
    placeholder_expression = true
    required = true
  }
  resource "authentik_stage_prompt_field" "name" {
    field_key = "name"
    label     = "Name"
    type      = "text"
    order = 201
    placeholder = <<EOT
  try:
      return user.name
  except:
      return ''
  EOT
    placeholder_expression = true
    required = true
  }
  resource "authentik_stage_prompt_field" "email" {
    field_key = "email"
    label     = "Email"
    type      = "email"
    order = 202
    placeholder = <<EOT
  try:
      return user.email
  except:
      return ''
  EOT
    placeholder_expression = true
    required = true
  }