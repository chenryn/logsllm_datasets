(cid:3)
T
Then m’s expected value increases:
(cid:3)
S, C, m) > L(TS, C, m)
L(T
Weak solicitation incentive (WSI):
Because SSI is difﬁcult to satisfy, we introduce a slightly weaker
solicitation property, WSI. This property is satisﬁed by a lottree
L if, when a new contributing node joins the system, an existing
node’s expected value is greater if the new node becomes its de-
scendent than if the new node joins elsewhere in the tree. This
property promotes competition for new descendent nodes, which
encourages solicitation.
If node m is in the system tree: Tm ⊂ TS, C(m) > 0
and m’s subtree includes some node p: p ∈ N (Tm)
but does not include some other node q: q ∈ N (TS \ Tm)
and there is a new node n: n (cid:4)∈ N (TS) with C(n) > 0
and which in case 1 joins the system as a child of p:
and which in case 2 joins the system as a child of q:
T
T
S = TS ∪ {n, (p, n)}
(cid:3)
S = TS ∪ {n, (q, n)}
(cid:3)(cid:3)
(cid:3)(cid:3)
S , C, m)
(cid:3)
S, C, m) > L(T
L(T
Then m’s expected value is greater in case 1:
Unproﬁtable solicitor bypassing (USB):
Besides attracting contribution and providing incentives for solic-
itation, lottrees must also be secure against different notions of
strategic behavior of its participants. If, for instance, new nodes
tend to join the system not as children of the nodes that solicited
them, then participants will lose interest in soliciting new nodes.
We thus introduce USB, which a lottree L satisﬁes if a new node
can never gain expected value by joining as a child of someone
other than its solicitor.
If nodes m and p are in the system tree: {m, p} ⊂ N (TS)
and there is a new node n that may eventually solicit its own
subtree of nodes: Tn ∩ TS = ∅
S = TS ∪ Tn ∪ {(m, n)}
(cid:3)
S = TS ∪ Tn ∪ {(p, n)}
(cid:3)(cid:3)
T
T
and which in case 1 joins the system as a child of m:
and which in case 2 joins the system as a child of p:
Then n’s expected value is no greater in case 2:
(cid:3)(cid:3)
S , C, n)
which, by symmetry, implies: L(T
S, C, n) ≥ L(T
(cid:3)
L(T
(cid:3)
S, C, n) = L(T
(cid:3)(cid:3)
S , C, n)
Unproﬁtable Sybil attack (USA):
An equally important property is that no participant can increase its
odds by pretending to have multiple identities. That is, a lottree L
satisﬁes USA if a node does not gain expected value by joining the
system as a set of Sybil nodes [14] instead of joining singly. (This
formalism employs Hilbert’s ε operator. εx : P (x) means “choose
some x that satisﬁes P (x).”)
If the system tree contains node p and node set Q:
and there is a new node n: n (cid:4)∈ N (TS)
which can appear as a new node set S: S ∩ N (TS) = ∅
{p} ∪ Q ⊂ N (TS)
wherein S’s aggregate contribution does not exceed n’s
and n may eventually solicit a forest FH of other nodes:
contribution: C(S) ≤ C(n)
FH ∩ TS = ∅
S = TS ∪ {n, (p, n)} ∪ {(n, h) : h ∈ H} ∪ FH
(cid:3)
S = TS ∪ S ∪ {(εq : q ∈ Q ∪ S, s) : s ∈ S}
(cid:3)(cid:3)
and in case 1, n joins the system as a child of p:
and in case 2, S joins as descendents of Q:
∪ {(εs : s ∈ S, h) : h ∈ H} ∪ FH
Then n’s expected value is no greater in case 2:
T
T
S, C, n) ≥
(cid:3)
L(T
(cid:3)(cid:3)
S , C, s)
s∈S L(T
Zero value to root (ZVR):
A lottree L satisﬁes ZVR if the expected value to the root of the
system tree is zero. In a practical lottree, the prize value should
be disbursed to participants and contributors, not retained by the
system: L(TS, C, Sys) = 0. (Clearly, ZVR is impossible to satisfy
in the degenerate case in which the root has no children.)
Discussion: Each of the above seven properties captures a speciﬁc
important characteristic that an ideal lottree scheme should fulﬁll
in order to robustly motivate signiﬁcant participation. We further
believe (but cannot prove) that these properties collectively charac-
terize a lottree that would be ideal for practical use.
As a possible criticism of our formal statement of these proper-
ties, one might argue that when a person decides whether to join a
speciﬁc lottree system or whether to solicit an acquaintance, he is
unlikely to be guided by a rigid and detailed veriﬁcation of proper-
ties such as SSI or USB. However, we believe that strictly satisfying
these properties is of real importance for practical deployments, for
the simple reason that lottrees involve the transfer of money. In any
such system, issues of trust and security are of utmost importance.
There should be no way of increasing one’s odds by circumvent-
ing the rules. Solicitation properties like SSI and WSI are crucial
as well, especially as we consider deployment scenarios in which
purely altruistic motivations for joining have often been insufﬁcient
to yield large deployments.
4. SIMPLE LOTTREE SCHEMES
It might seem that the properties enumerated in Section 3 should
be fairly trivial to satisfy. To demonstrate that this is not the case,
this section constructs two fairly simple lottree schemes, and we
show that they fail to satisfy several important properties.
4.1 The PS (proportional selection) lottree
We ﬁrst consider a very simple lottree scheme, which does not
account for any solicitation structure and simply selects a winning
node based on its own contribution. The PS (proportional selec-
tion) lottree scheme selects each participant n ∈ N (TS) to be the
winner with odds of on = C(n)/C(TS), regardless of the solicita-
tion structure.
While providing optimal fairness (1-VPC) and robustness against
various forms of gaming (satisfying USB and USA, for instance), it
fails to provide any incentive for nodes that have already joined the
lottree to solicit new members. It thus clearly violates both weak
and strong solicitation-incentive properties (WSI and SSI).
4.2 The Luxor lottree
We next present the Luxor lottree scheme, which—unlike the
PS scheme—provides a solicitation incentive to nodes in the tree.
Although it is more involved than the PS scheme, it is a relatively
straightforward extension wherein each node passes some of its win
odds up to its parent.
Algorithm 1 The Luxor lottree - Winner Selection
Input: A lottree TS with N peers. C(n) denotes the
contribution of a peer n ∈ N (TS).
Two parameters 0 ≤ μ, ρ ≤ 1.
Output: A winner ˆn ∈ N (TS) that wins the lottery.
1: ˆn := ∅.
2: Set w(n) := C(n)/C(TS) for each n ∈ N (TS).
3: Randomly select one peer m from N (TS) such that the proba-
bility of selecting peer n is w(n).
4: With probability μ, set ˆn := m and stop.
5: cur := P arent(TS, m).
6: while ˆn = ∅ and cur (cid:4)= Sys do
7: With probability ρ, set ˆn := cur and stop.
cur := P arent(TS, cur);
8:
9: end while
10: if ˆn := ∅ then ˆn := Sys.
Winner selection in the Luxor lottree, characterized by two para-
meters μ and ρ, proceeds in two passes. First, it randomly selects a
node m ∈ N (TS) in proportion to its contribution, just as in the PS
lottree scheme. However, m is merely a candidate; it only becomes
the winner with probability μ. With probability 1 − μ, the winner
is one of m’s ancestors. As shown in Algorithm 1, Luxor moves
incrementally up the path P ath(TS, m) from P arent(TS, m) to
the root Sys, letting each successive candidate cur win the lottery
with probability ρ. Upon selection of a winner ˆn, the process stops.
The parameter μ can be used to tune the tradeoff between solici-
tation incentive and fairness. Increasing μ increases fairness at the
expense of decreasing solicitation incentive.
Algorithm 1 procedurally describes the Luxor scheme. We can
also describe Luxor by formally deﬁning its lottree function LL as
LL(TS, C, n) = μ · w(n) + (cid:2)z∈N (Tn),
z(cid:4)=n
w(z)pnz,
where puv := P [ˆn = u|m = v] denotes the probability that node
u wins the lottery conditioned on the event that node v (cid:4)= u was
initially selected as the candidate. Letting duv be the hop-distance
between two nodes u and v, puv is deﬁned by
puv = (cid:3) (1 − μ)(1 − ρ)duv−1ρ , u ∈ P ath(TS, v)
, otherwise.
0
The Luxor lottree scheme satisﬁes several desirable properties,
as stated in Theorem 4.1. The proof is omitted due to lack of space.
THEOREM 4.1. The Luxor lottree scheme satisﬁes properties
CCI, WSI, USB, and ϕ-VPC for ϕ = μ. The scheme also satis-
ﬁes SSI unless for some node n, there exists a node z ∈ N (Tn) for
which pnz ≥ L(TS \ {(P arent(TS, z), z)}, C, n).
The previous theorem characterizes scenarios for which the Luxor
scheme satisﬁes the SSI property. We will later present Theo-
rem 6.1, a consequence of which is that there must exist scenar-
ios for which the Luxor scheme does not satisfy SSI. In addition,
the following theorem states that this scheme fails to satisfy two
additional properties.
THEOREM 4.2. The Luxor scheme violates USA and ZVR.
PROOF. It is clear that ZVR is violated because there is a non-
zero probability that the root is selected as the winner. The interest-
ing property is USA. Consider Figure 1 and assume node z is capa-
ble of contributing a total of C(z) and joins as a child of n. Its ex-
pected value is therefore μ·C(z)/C(TS). In contrast, if z launches
n
n
z
z2
zk
z1
z
Figure 1: The Luxor scheme is vulnerable to Sybil attacks. z
increases its expected value by splitting its contribution among
Sybil nodes z1, . . . , zn.
a Sybil attack by splitting itself up into two (or more) nodes z1 and
z2 and divides its contribution such that C(z1) + C(z2) = C(n), it
can increase its expected value. Speciﬁcally, z1 joins as a child of
n and z2 becomes a child of z1. That way, the combined expected
value L(TS, C, z1) + L(TS, C, z2) exceeds L(TS, C, z), because
of pz1z2 > 0. In the extreme case, a new node z could split it-
self up into a large number of Sybil nodes z1, . . . , zk, arranged in
form of a large chain, and have C(z1) = . . . = C(zk−1) = 0
and C(zk) = C(z). In this case, the cumulated expected gain of z
reaches C(z)/C(TS), which is by a factor 1/μ larger than if it had
joined as a single node.
The fact that Luxor does not satisfy USA and is thus not robust
against Sybil attacks is particularly problematic, because it encour-
ages gaming behavior, which can signiﬁcantly undermine people’s
trust in the system. Since lottrees distribute money in return for
participation, this lack of trust could decrease people’s willingness
to participate. We address this problem in the following section
by presenting the Pachira lottree scheme, which is provably robust
against Sybil attacks.
5. THE PACHIRA LOTTREE
This section introduces a general and practical lottree scheme
called Pachira, which satisﬁes all properties satisﬁed by the Luxor
scheme, but additionally satisﬁes the USA property, which Luxor
fails (Theorem 4.2).
5.1 Theoretical Underpinnings
The Pachira lottree has two input parameters β and δ that trade
off solicitation incentive against fairness. In its general version, the
Pachira lottree is deﬁned using a function π(c) deﬁned on [0, 1]
with the following characteristics:
I) π(0) = 0, π(1) = 1
II) ∀c ∈ [0, 1] : dπ(c)
≥ β
III) ∀c ∈ [0, 1] : d2π(c)
dc2 > 0
The following two inequalities directly follow from the strict con-
vexity of π(c). First, for any c1 > c2 and  > 0,
(minimum slope of β)
(strictly convex)
dc
π(c1 + ) − π(c1) > π(c2 + ) − π(c2).
(1)
(2)
Secondly, it holds that
π(cid:4) (cid:2)ci∈C
ci(cid:5) ≥ (cid:2)ci∈C
π(ci).
In principle, the Pachira lottree can be deﬁned using any function
π that follows the above mentioned properties. In the sequel, we
are going to use the following particularly convenient and intuitive
function with these characteristics:
π(c) = β c + (1 − β)c
1+δ
,
(3)
Algorithm 2 The Pachira lottree - Winner Selection
Input: A lottree TS with N peers. C(n) denotes the
contribution of a peer n ∈ N (TS).
Two parameters 0 ≤ β, δ ≤ 1.
Output: A winner ˆn ∈ N (TS) that wins the lottery.
1: Compute C(TS) = m∈N (TS ) C(m)
2: for each n ∈ N (TS) in post-order of TS do
3:
Compute C(Sub(TS, n)) by summing up C(n)
and C(Sub(TS, m)) for all children m of n.
Compute W (TS, C, Sub(TS, n)) using (3) and (4).
Compute LP (TS, C, n) according to (5).
4:
5:
6: end for
7: Select ˆn randomly such that every node is selected with prob-
ability LP (TS, C, n).
where β and δ > 0 are the input parameters of Pachira. Our
scheme makes use of this function in the following way: Each
node in the tree computes its weight as the function π applied
to the node’s proportional contribution. Formally, for tree T and
contribution function C, the weight W (T, C, n) of a node n is
W (T, C, n) = π(C(n)/C(T )). Also, the weight for a subtree
Sub(T, n) is deﬁned as
W (T, C, Sub(T, n)) = π(cid:4) C(Sub(T, n))
C(T )
(cid:5) .
(4)
Finally, notice that for any leaf node n, it holds that W (T, C, n) =
W (T, C, Sub(T, n)) = π(C(n)/C(T )).
The Pachira lottree scheme proceeds as follows. Each node n ∈
N (TS) is assigned an expected value, LP , deﬁned as the weight of
the subtree rooted at n minus the weights of all child subtrees of n.
Formally,
LP (T, C, n) = W (T, C, Sub(T, n))
(5)
− (cid:2)(n,m)∈E(T )
W (T, C, Sub(T, m)).
Notice that in general, LP (T, C, n) (cid:4)= W (T, C, n), i.e., a node’s
expected value is different from its weight.
As we show in the following section, this theoretical formulation