being unsafe, the latter are not to be called when multiple threads
are running or asynchronous signals are enabled,
and so the environment can be considered
effectively constant in these contexts,
which makes the former safe.
.tp
.i hostid
the function marked with
.i hostid
as an mt-safety issue reads from the system-wide data structures that
hold the "host id" of the machine.
these data structures cannot generally be modified atomically.
since it is expected that the "host id" will not normally change,
the function that reads from it
.rb ( gethostid (3))
is regarded as safe,
whereas the function that modifies it
.rb ( sethostid (3))
is marked with
.ir const:hostid ,
indicating it may require special care if it is to be called.
in this specific case,
the special care amounts to system-wide
(not merely intra-process) coordination.
.tp
.i sigintr
functions marked with
.i sigintr
as an mt-safety issue access the
gnu c library
.i _sigintr
internal data structure without any guards to ensure
safety in the presence of concurrent modifications.
.ip
we do not mark these functions as mt-unsafe,\" or as-unsafe,
however,
because functions that modify this data structure are all marked with
.i const:sigintr
and regarded as unsafe.
being unsafe,
the latter are not to be called when multiple threads are
running or asynchronous signals are enabled,
and so the data structure can be considered
effectively constant in these contexts,
which makes the former safe.
.\" .tp
.\" .i fd
.\" functions annotated with
.\" .i fd
.\" as an ac-safety issue may leak file
.\" descriptors if asynchronous thread cancellation interrupts their
.\" execution.
.\"
.\" functions that allocate or deallocate file descriptors will generally be
.\" marked as such.
.\" even if they attempted to protect the file descriptor
.\" allocation and deallocation with cleanup regions,
.\" allocating a new descriptor and storing its number where the cleanup region
.\" could release it cannot be performed as a single atomic operation.
.\" similarly,
.\" releasing the descriptor and taking it out of the data structure
.\" normally responsible for releasing it cannot be performed atomically.
.\" there will always be a window in which the descriptor cannot be released
.\" because it was not stored in the cleanup handler argument yet,
.\" or it was already taken out before releasing it.
.\" .\" it cannot be taken out after release:
.\" an open descriptor could mean either that the descriptor still
.\" has to be closed,
.\" or that it already did so but the descriptor was
.\" reallocated by another thread or signal handler.
.\"
.\" such leaks could be internally avoided, with some performance penalty,
.\" by temporarily disabling asynchronous thread cancellation.
.\" however,
.\" since callers of allocation or deallocation functions would have to do
.\" this themselves, to avoid the same sort of leak in their own layer,
.\" it makes more sense for the library to assume they are taking care of it
.\" than to impose a performance penalty that is redundant when the problem
.\" is solved in upper layers, and insufficient when it is not.
.\"
.\" this remark by itself does not cause a function to be regarded as
.\" ac-unsafe.
.\" however, cumulative effects of such leaks may pose a
.\" problem for some programs.
.\" if this is the case,
.\" suspending asynchronous cancellation for the duration of calls
.\" to such functions is recommended.
.\" .tp
.\" .i mem
.\" functions annotated with
.\" .i mem
.\" as an ac-safety issue may leak
.\" memory if asynchronous thread cancellation interrupts their execution.
.\"
.\" the problem is similar to that of file descriptors: there is no atomic
.\" interface to allocate memory and store its address in the argument to a
.\" cleanup handler,
.\" or to release it and remove its address from that argument,
.\" without at least temporarily disabling asynchronous cancellation,
.\" which these functions do not do.
.\"
.\" this remark does not by itself cause a function to be regarded as
.\" generally ac-unsafe.
.\" however, cumulative effects of such leaks may be
.\" severe enough for some programs that disabling asynchronous cancellation
.\" for the duration of calls to such functions may be required.
.tp
.i cwd
functions marked with
.i cwd
as an mt-safety issue may temporarily
change the current working directory during their execution,
which may cause relative pathnames to be resolved in unexpected ways in
other threads or within asynchronous signal or cancellation handlers.
.ip
this is not enough of a reason to mark so-marked functions as mt-unsafe,
.\" or as-unsafe,
but when this behavior is optional (e.g.,
.br nftw (3)
with
.br ftw_chdir ),
avoiding the option may be a good alternative to
using full pathnames or file descriptor-relative (e.g.,
.br openat (2))
system calls.
.\" .tp
.\" .i !posix
.\" this remark, as an mt-safety, as-safety or ac-safety
.\" note to a function,
.\" indicates the safety status of the function is known to differ
.\" from the specified status in the posix standard.
.\" for example, posix does not require a function to be safe,
.\" but our implementation is, or vice-versa.
.\"
.\" for the time being, the absence of this remark does not imply the safety
.\" properties we documented are identical to those mandated by posix for
.\" the corresponding functions.
.tp
.i :identifier
annotations may sometimes be followed by identifiers,
intended to group several functions that, for example,
access the data structures in an unsafe way, as in
.i race
and
.ir const ,
or to provide more specific information,
such as naming a signal in a function marked with
.ir sig .
it is envisioned that it may be applied to
.i lock
and
.i corrupt
as well in the future.
.ip
in most cases, the identifier will name a set of functions,
but it may name global objects or function arguments,
or identifiable properties or logical components associated with them,
with a notation such as, for example,
.i :buf(arg)
to denote a buffer associated with the argument
.ir arg ,
or
.i :tcattr(fd)
to denote the terminal attributes of a file descriptor
.ir fd .
.ip
the most common use for identifiers is to provide logical groups of
functions and arguments that need to be protected by the same
synchronization primitive in order to ensure safe operation in a given
context.
.tp
.i /condition
some safety annotations may be conditional,
in that they only apply if a boolean expression involving arguments,
global variables or even the underlying kernel evaluates to true.
.\" such conditions as
.\" .i /hurd
.\" or
.\" .i /!linux!bsd
.\" indicate the preceding marker only
.\" applies when the underlying kernel is the hurd,
.\" or when it is neither linux nor a bsd kernel, respectively.
for example,
.i /!ps
and
.i /one_per_line
indicate the preceding marker only applies when argument
.i ps
is null, or global variable
.i one_per_line
is nonzero.
.ip
when all marks that render a function unsafe are
adorned with such conditions,
and none of the named conditions hold,
then the function can be regarded as safe.
.sh see also
.br pthreads (7),
.br signal\-safety (7)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man2/getdomainname.2
.so man2/listxattr.2
.so man3/stdarg.3
.\" this man page is copyright (c) 1999 claus fischer.
.\"
.\" %%%license_start(verbatim_one_para)
.\" permission is granted to distribute possibly modified copies
.\" of this page provided the header is included verbatim,
.\" and in case of nontrivial modification author and date
.\" of the modification is added to the header.
.\" %%%license_end
.\"
.\" 990620 - page created - PI:EMAIL
.\"
.th fifo 7 2017-11-26 "linux" "linux programmer's manual"
.sh name
fifo \- first-in first-out special file, named pipe
.sh description
a fifo special file (a named pipe) is similar to a pipe,
except that it is accessed as part of the filesystem.
it can be opened by multiple processes for reading or
writing.
when processes are exchanging data via the fifo,
the kernel passes all data internally without writing it
to the filesystem.
thus, the fifo special file has no
contents on the filesystem; the filesystem entry merely
serves as a reference point so that processes can access
the pipe using a name in the filesystem.
.pp
the kernel maintains exactly one pipe object for each
fifo special file that is opened by at least one process.
the fifo must be opened on both ends (reading and writing)
before data can be passed.
normally, opening the fifo blocks
until the other end is opened also.
.pp
a process can open a fifo in nonblocking mode.
in this
case, opening for read-only succeeds even if no one has
opened on the write side yet and opening for write-only
fails with
.b enxio
(no such device or address) unless the other
end has already been opened.
.pp
under linux, opening a fifo for read and write will succeed
both in blocking and nonblocking mode.
posix leaves this
behavior undefined.
this can be used to open a fifo for
writing while there are no readers available.
a process
that uses both ends of the connection in order to communicate
with itself should be very careful to avoid deadlocks.
.sh notes
for details of the semantics of i/o on fifos, see
.br pipe (7).
.pp
when a process tries to write to a fifo that is not opened
for read on the other side, the process is sent a
.b sigpipe
signal.
.pp
fifo special files can be created by
.br mkfifo (3),
and are indicated by
.ir "ls\ \-l"
with the file type \(aqp\(aq.
.sh see also
.br mkfifo (1),
.br open (2),
.br pipe (2),
.br sigaction (2),
.br signal (2),
.br socketpair (2),
.br mkfifo (3),
.br pipe (7)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/__ppc_set_ppr_med.3
.so man3/rint.3
.\" copyright (c) 1983, 1991 the regents of the university of california.
.\" all rights reserved.
.\"
.\" %%%license_start(bsd_4_clause_ucb)
.\" redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. all advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	this product includes software developed by the university of
.\"	california, berkeley and its contributors.
.\" 4. neither the name of the university nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" this software is provided by the regents and contributors ``as is'' and
.\" any express or implied warranties, including, but not limited to, the
.\" implied warranties of merchantability and fitness for a particular purpose
.\" are disclaimed.  in no event shall the regents or contributors be liable
.\" for any direct, indirect, incidental, special, exemplary, or consequential
.\" damages (including, but not limited to, procurement of substitute goods
.\" or services; loss of use, data, or profits; or business interruption)
.\" however caused and on any theory of liability, whether in contract, strict
.\" liability, or tort (including negligence or otherwise) arising in any way
.\" out of the use of this software, even if advised of the possibility of
.\" such damage.
.\" %%%license_end
.\"
.\"     $id: getsockopt.2,v 1.1 1999/05/24 14:57:04 freitag exp $
.\"
.\" modified sat jul 24 16:19:32 1993 by rik faith (PI:EMAIL)
.\" modified mon apr 22 02:29:06 1996 by martin schulze (PI:EMAIL)
.\" modified tue aug 27 10:52:51 1996 by andries brouwer (PI:EMAIL)
.\" modified thu jan 23 13:29:34 1997 by andries brouwer (PI:EMAIL)
.\" modified sun mar 28 21:26:46 1999 by andries brouwer (PI:EMAIL)
.\" modified 1999 by andi kleen .
.\"     removed most stuff because it is in socket.7 now.
.\"
.th getsockopt 2 2021-03-22 "linux" "linux programmer's manual"
.sh name
getsockopt, setsockopt \- get and set options on sockets
.sh synopsis
.nf
.b #include 
.pp
.bi "int getsockopt(int " sockfd ", int " level ", int " optname ,
.bi "               void *restrict " optval ", socklen_t *restrict " optlen );
.bi "int setsockopt(int " sockfd ", int " level ", int " optname ,
.bi "               const void *" optval ", socklen_t " optlen );
.fi
.sh description
.br getsockopt ()
and
.br setsockopt ()
manipulate options for the socket referred to by the file descriptor
.ir sockfd .
options may exist at multiple
protocol levels; they are always present at the uppermost
socket level.
.pp
when manipulating socket options, the level at which the
option resides and the name of the option must be specified.
to manipulate options at the sockets api level,
.i level
is specified as
.br sol_socket .
to manipulate options at any
other level the protocol number of the appropriate protocol
controlling the option is supplied.
for example,
to indicate that an option is to be interpreted by the
.b tcp
protocol,
.i level
should be set to the protocol number of
.br tcp ;
see
.br getprotoent (3).
.pp
the arguments
.i optval
and
.i optlen
are used to access option values for
.br setsockopt ().
for
.br getsockopt ()
they identify a buffer in which the value for the
requested option(s) are to be returned.
for
.br getsockopt (),
.i optlen
is a value-result argument, initially containing the
size of the buffer pointed to by
.ir optval ,
and modified on return to indicate the actual size of
the value returned.
if no option value is to be supplied or returned,
.i optval
may be null.
.pp
.i optname
and any specified options are passed uninterpreted to the appropriate
protocol module for interpretation.
the include file
.i 
contains definitions for socket level options, described below.
options at
other protocol levels vary in format and name; consult the appropriate
entries in section 4 of the manual.
.pp
most socket-level options utilize an
.i int
argument for
.ir optval .
for
.br setsockopt (),
the argument should be nonzero to enable a boolean option, or zero if the
option is to be disabled.
.pp
for a description of the available socket options see
.br socket (7)
and the appropriate protocol man pages.
.sh return value
on success, zero is returned for the standard options.
on error, \-1 is returned, and
.i errno
is set to indicate the error.
.pp
netfilter allows the programmer
to define custom socket options with associated handlers; for such
options, the return value on success is the value returned by the handler.
.sh errors
.tp
.b ebadf
the argument
.i sockfd
is not a valid file descriptor.
.tp
.b efault
the address pointed to by
.i optval
is not in a valid part of the process address space.
for
.br getsockopt (),
this error may also be returned if
.i optlen
is not in a valid part of the process address space.
.tp
.b einval
.i optlen
invalid in
.br setsockopt ().
in some cases this error can also occur for an invalid value in
.ir optval
(e.g., for the
.b ip_add_membership
option described in
.br ip (7)).
.tp
.b enoprotoopt
the option is unknown at the level indicated.
.tp
.b enotsock
the file descriptor
.i sockfd
does not refer to a socket.
.sh conforming to
posix.1-2001, posix.1-2008,
svr4, 4.4bsd (these system calls first appeared in 4.2bsd).
.\" svr4 documents additional enomem and enosr error codes, but does
.\" not document the
.\" .br so_sndlowat ", " so_rcvlowat ", " so_sndtimeo ", " so_rcvtimeo
.\" options
.sh notes
for background on the
.i socklen_t
type, see
.br accept (2).
.sh bugs
several of the socket options should be handled at lower levels of the
system.
.sh see also
.br ioctl (2),
.br socket (2),
.br getprotoent (3),
.br protocols (5),
.br ip (7),
.br packet (7),
.br socket (7),
.br tcp (7),
.br udp (7),
.br unix (7)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright 2003 walter harms, andries brouwer
.\" and copyright 2008, linux foundation, written by michael kerrisk
.\"     
.\"
.\" %%%license_start(gpl_noversion_oneline)
.\" distributed under gpl
.\" %%%license_end
.\"
.th fdim 3 2021-03-22 "" "linux programmer's manual"
.sh name
fdim, fdimf, fdiml \- positive difference
.sh synopsis
.nf
.b #include 
.pp
.bi "double fdim(double " x ", double " y );
.bi "float fdimf(float " x ", float " y );
.bi "long double fdiml(long double " x ", long double " y );
.fi
.pp
link with \fi\-lm\fp.
.pp
.rs -4
feature test macro requirements for glibc (see
.br feature_test_macros (7)):
.re
.pp
.br fdimf (),
.br fdiml ():
.nf
    _isoc99_source || _posix_c_source >= 200112l
.fi
.sh description
these functions return the positive difference, max(\fix\fp-\fiy\fp,0),
between their arguments.
.sh return value
on success, these functions return the positive difference.
.pp
if
.i x
or
.i y
is a nan, a nan is returned.