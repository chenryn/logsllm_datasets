title:Neuro-Symbolic Execution: Augmenting Symbolic Execution with Neural
Constraints
author:Shiqi Shen and
Shweta Shinde and
Soundarya Ramesh and
Abhik Roychoudhury and
Prateek Saxena
Neuro-Symbolic Execution: Augmenting
Symbolic Execution with Neural Constraints
Shen Shiqi
Shweta Shinde
Soundarya Ramesh Abhik Roychoudhury
Prateek Saxena
Computer Science Department, School of Computing
National University of Singapore
{shiqi04, shweta24, sramesh, abhik, prateeks}@comp.nus.edu.sg
Abstract—Symbolic execution is a powerful technique for
program analysis. However, it has many limitations in practical
applicability: the path explosion problem encumbers scalability,
the need for language-speciﬁc implementation, the inability to
handle complex dependencies, and the limited expressiveness of
theories supported by underlying satisﬁability checkers. Often,
relationships between variables of interest are not expressible
directly as purely symbolic constraints. To this end, we present
a new approach—neuro-symbolic execution—which learns an
approximation of the relationship between program values of
interest, as a neural network. We develop a procedure for check-
ing satisﬁability of mixed constraints, involving both symbolic
expressions and neural representations. We implement our new
approach in a tool called NEUEX as an extension of KLEE, a
state-of-the-art dynamic symbolic execution engine. NEUEX ﬁnds
33 exploits in a benchmark of 7 programs within 12 hours. This
is an improvement in the bug ﬁnding efﬁcacy of 94% over vanilla
KLEE. We show that this new approach drives execution down
difﬁcult paths on which KLEE and other DSE extensions get
stuck, eliminating limitations of purely SMT-based techniques.
I.
INTRODUCTION
Symbolic execution is a code analysis technique which
reasons about sets of input values that drive the program to a
speciﬁed state [68]. Certain inputs are marked as symbolic and
the analysis gathers symbolic constraints on these inputs, by
analyzing the operations along a path of a program. Satisfying
solutions to these constraints are concrete values that cause
the program to execute the analyzed path. Manipulating these
constraints allows one to reason about
the reachability of
different paths and states, thereby serving to guide search
in the execution space efﬁciently. Symbolic execution, espe-
cially its mixed-dynamic variant, has been widely used in
computer security. Its prime application over the last decade
has been in white-box fuzzing, with the goal of discovering
software vulnerabilities [63]. More broadly, it has been used
for patching [80], invariant discovery [66], and veriﬁcation to
prove the absence of vulnerabilities [45]. Off-the-shelf sym-
bolic execution tools targeting languages such as C/C++ [95],
JavaScript [73], and executable binary code [44] are available.
Symbolic analysis is a powerful technique; however, it
has a number of limitations in practical applicability. First,
symbolic analysis is a deductive procedure, requiring complete
Network and Distributed Systems Security (NDSS) Symposium 2019
24-27 February 2019, San Diego, CA, USA
ISBN 1-891562-55-X
https://dx.doi.org/10.14722/ndss.2019.23530
www.ndss-symposium.org
access to target code and pre-speciﬁed semantics of the target
language. The symbolic analysis procedure is speciﬁc to the
target language (e.g., C vs. x64), and further, if a certain
functionality of a program is unavailable for analysis—either
because it is implemented in a different language, or because
it is accessible as a closed, proprietary service—then, such
functionality cannot be analyzed precisely. Today’s symbolic
execution engines either resort
to human assistance (e.g.,
prompting analysts for external stubs) or to ad-hoc concretiza-
tion of symbolic values in such cases.
Second, symbolic analyses may not be able to infer pro-
gram constraints that are directly expressible in underlying
SAT/SMT theories succinctly. Programs often have custom
logic that implements high-level relations (e.g., string manip-
ulation) via low-level control ﬂow constructs (e.g., iterating
over byte arrays in nested loops). This often contributes to
the phenomenon described as the “path explosion” problem,
wherein the symbolic analysis enumeratively explores the
execution path space which can be exponentially large [41].
Providing structured representation of constraints (e.g., arith-
metic expressions or strings) is one approach that has yielded
improvements [33], [56], [91], [100]. However, recovering
and solving such structured constraints require specialized
techniques, each targeted at a speciﬁc class of constraints.
Lastly, many symbolic constraints, even if recovered suc-
cinctly, lack efﬁcient handling or fall outside of the theory
of the underlying SAT/SMT checkers [34]. Symbolic analysis
typically uses quantiﬁer-free and decidable theories in ﬁrst-
order logic, and satisﬁability solvers have well-known limits
in expressiveness [30]. For instance, non-linear arithmetic over
reals is slow and does not scale in existing solvers [57], and
string support is relatively new and still an area of active
research [100]. When program functionality does not fall
within the supported theories, analysis either precludes such
functionality altogether, encodes it abstractly using supported
theories (e.g., arrays, bit-vectors, or uninterpreted functions),
or concretizes symbolic variable with ad-hoc values.
A. Neuro-Symbolic Execution
In this paper, we introduce a new approach that com-
plements dynamic symbolic execution and is easily imple-
mentable in standard tools. We present a technique called
neuro-symbolic execution, in which the symbolic execution
engine accumulates neural constraints (learned inductively) for
certain parts of the analyzed program logic, in addition to
its standard symbolic constraints (derived deductively). Neural
constraints capture relationships between program values for
which the symbolic engine cannot recover quickly solvable
constraints. In neuro-symbolic execution, the engine can switch
to an inductive learning mode by forking off a live training
procedure for such program logic. The training procedure treats
the target logic as a black-box and learns a neural network
representation approximating it as accurately as feasible. This
learnt neural network is called a neural constraint, and both
symbolic and neural constraints are called neuro-symbolic.
Our choice of representation via neural networks is mo-
tivated by two observations. First, neural networks can ap-
proximate or represent a large category of functions, as im-
plied by the universal approximation theorem [55]; and in
practice, an explosion of empirical results are showing that
they are learnable for many practical functions [32], [64].
Although specialized training algorithms are continuously on
the rise [69], [85], we expect that neural networks will prove
effective in learning approximations to several useful functions
we encounter in practice. Second, neural networks are a
differentiable representation, often trained using optimization
methods such as gradient descent [87]. This differentiability
allows for efﬁcient analytical techniques to check for satisﬁa-
bility of neural constraints, and produce satisfying assignments
of values to variables [65], analogous to the role of SMT
solvers for purely symbolic constraints. One of the core
technical contributions of this work is a procedure to solve
neuro-symbolic constraints: checking satisﬁability and ﬁnding
assignments for variables involved in neural and symbolic
constraints simultaneously, with good empirical accuracy on
tested benchmarks. This is the key to utilizing neuro-symbolic
execution for bug-ﬁnding.
B. Applications, Tool & Results
In this work, we focus on establishing the beneﬁts of aug-
menting dynamic symbolic execution with neural constraints
for one security application: generating exploits for out-of-
bound buffer accesses, zero division, and data-type overﬂows.
In this setting, we take a well-maintained dynamic symbolic
execution engine called KLEE as a baseline [40], and augment
it to switch to neuro-symbolic execution for parts of the code
if it gets stuck because of path explosion, solver timeouts, or
external calls. We call this enhanced tool NEUEX.
Results. We analyze 7 real-world Linux programs for the three
classes of vulnerabilities listed above. Our tool NEUEX, which
extends KLEE, ﬁnds a total of 33 bugs in 12 hours. 11 of
these are new and 22 have publicly known CVEs. Vanilla
KLEE (without our neuro-symbolic enhancement) ﬁnds only
17 of these in 12 hours; so NEUEX improves over the baseline
by ﬁnding 94% more bugs. We show that NEUEX helps
vanilla KLEE as it drives program execution down complex
paths on which the latter gets stuck. We show that NEUEX
scales gracefully with the increasing complexity of constraints;
it learns both simple constraints (where KLEE is fast) as
well as complex ones (which KLEE times out in 12 hours).
We compare NEUEX with a structured constraint inference
extension of symbolic execution called LESE [91], ﬁnding that
NEUEX is two orders of magnitudes faster.
Contributions. We make the following contributions:
•
Neuro-Symbolic Constraints. NEUEX is the ﬁrst in-
ductive approach that uses to learn an approximate
2
1 #define BUFFER_LEN 4096
2 void psf_log_printf (...) {
3 ...
4 while (...) { // KLEE path explosion
5 ...
6 }
7 }
8 double psf_calc_signal_max (SNDFILE *psf) {
9 ...
10 sf_read_double ((SNDFILE*) psf, data, .. );
11 ...
12 temp = fabs (data [k]); // KLEE cannot reason about fabs
13 ...
14 return temp;
15 }
16 void sfe_copy_data_fp(..., SNDFILE *infile,..) {
17 static double data[BUFFER_LEN], max;
18 ...
19 max = psf_calc_signal_max (infile);
20 while (readcount > 0) {
21
22
23
24
25 }
26 ...
27 }
28 int main (int argc, const char* argv[]) {
29 char* infilename = argv [argc-2];
30 ...
31 if (strlen (infilename) > 1 && infilename [0] == ’-’) {
32
33 }
34 ...
35 psf_log_printf(...);
36 ...
37 sfe_copy_data_fp(...);
38 ...
39 }
readcount = sf_readf_double(infile,data,frames);
for (k = 0; k < readcount; k++)
data[k] /= max; // potential divide-by-zero
...
// exit
A simpliﬁed example of
Fig. 1.
library. Function
sfe_copy_data_fp copies data from input to output ﬁles. The function ﬁrst
scans the entire input ﬁle to obtain the maximum value of the signal (Line
19) by reading the input ﬁle bytes frame by frame in form of double values
(Line 12). It then normalizes the values (Line 23), and writes the new frame
values to the output ﬁle. The code has a potential divide by zero on Line 23.
libsndﬁle
•
•
representation of difﬁcult program path logic in sym-
bolic execution. This is a generic approach to learn
a representation of constraints different from those
encoded in the program implementation or recovered
by prior template-based inductive approaches.
Neuro-Symbolic Constraint Solving. NEUEX features
a novel procedure that solves purely symbolic, purely
neural, and mixed neuro-symbolic constraints.
Tool and Evaluation. Our approach can augment ex-
isting tools, which we conﬁrm by extending a state-
of-the-art dynamic symbolic execution system. Our
evaluation conﬁrms that our new approach directly
alleviates known challenges for deductive symbolic
analysis: path explosion, limitations of SMT theories,
and missing external code.
II. PROBLEM
We use KLEE, an existing and widely-used engine, as a
baseline to show examples where symbolic execution exhibits
limitations. Figure 1 shows a code snippet from an audio
processing library called libsndﬁle [52], which has a divide-
by-zero (Line 23) reported as CVE-2017-14246 [21].
Constraint Inference is Difﬁcult. For KLEE to ﬁnd the
divide-by-zero, it has to infer two sets of path constraints.
First,
the execution must reach Line 23 in Figure 1 by
satisfying reachability constraints. Second, the value of the
variable in the denominator of the division operation must be
set to 0, which satisﬁes certain vulnerability constraints that
result in a crash. Collecting reachability constraints for Line 23
involves getting past the complex grammar of the ﬁle header
and selecting the right command-line options. Even after part
of the reachability challenge is side-stepped by providing an
input grammar [61], symbolic execution may not be able
to collect the exact reachability and vulnerability constraints.
Thus, the main challenge that still remains is to infer and solve
all the constraints leading to value 0 for the denominator.
KLEE’s classical DSE mode begins from the main function
in the program (Line 28). We expect it to identify the vulner-
ability on Line 23 in function sfe_copy_data_fp. We mark
the input ﬁle name and content as symbolic. The DSE mode
gets past the branch which performs checks on the variable
infilename (Line 31). However, the DSE mode gets stuck
in psf_log_printf called on Line 35. This function has a
complicated loop. The loop guards are controlled by symbolic
values read from the ﬁle (Line 4). Even if KLEE gets past
the loop in psf_log_printf, there are more than 10 loops
(not shown in the Figure) in the call graph before reaching
the sfe_copy_data_fp function. In our experiments, KLEE
could not reach the vulnerability within a 12-hour timeout.
When KLEE encounters the complex loops in our example,
it attempts to enumerate the entire path space of the low-
level
implementation, running into memory exhaustion. A
human analyst can inspect and recognize that the constraint is
perhaps representable differently—for instance, a part of the
complexity can be eliminated from direct use of ﬂoating point
values (doubles) for inputs which can then be subject to SMT
reasoning. Generic approaches to tackling the “path explosion”
phenomenon would not help recover such a representation
automatically in this example. For example, a technique called
loop-extended symbolic execution (LESE) [91] attempts to
extract linear relationships between a small number of loop
induction variables. However, in our example, the relationship
is multi-linear and has ﬂoating point arithmetic, which does not
ﬁt the template expected by LESE. More powerful techniques
like Veritesting [33] generalize to capture dependencies in
multi-path code fragments as much richer SMT constraints. In
the case of Veritesting, loops are unrolled to ﬁxed depths and
limited to certain function boundaries. However, one can see
that SMT constraint encoding simply ofﬂoad the exponential
complexity to SMT solver. Therefore, while being useful
over purely dynamic symbolic execution, prior approaches
do not fundamentally lift the abstraction at which variable
relationships are reasoned about. These approaches simply
model relationships inherent in the low-level implementation
as certain templatized constraint formats.
The key takeaway from this example is that
learning
the right representation of the constraint is a challenge. In
prior constraint synthesis works,
the representation of the
constraints is ﬁxed in advance as templates, such as in
linear arithmetic [91], octagonal
inequalities [82], or even
full SMT theories [33]. Each templating technique comes
with specialized inference procedure. When the code being
approximated does not fall within chosen template structure,
brute-force enumeration of templates to ﬁt the samples or ad-
1 static int _tiffMapProc
2 (thandle_t fd, void** pbase, toff_t* psize){
3 ...
4 *pbase = mmap(0, (size_t)sizem, PROT_READ, MAP_SHARED,
fdh.fd, 0); // returns -1
5 ...
6 }
7 // KLEE Stub
8 void *mmap(void *start, size_t length, int prot, int flags
, int fd, off_t offset) {
9 klee_warning("ignoring (EPERM)");
10 errno = EPERM;
11 return (void*) -1;
12 }
Fig. 2. A simpliﬁed example of libtiff library. KLEE’s uClibc stub does
not model the behavior of mmap and merely returns an error (Line 11).
1 static enum req_action req_iquery(HEADER *hp, u_char **cpp
, u_char *eom, int *buflenp, u_char *msg) {
return (Finish); // klee exit
2 if ((n = dn_skipname(*cpp, eom)) < 0){ // unknown call
3
4 }
5 ...
6 memcpy(anbuf, fname, alen); // buffer overflow
7 ...
8 }
9 // KLEE Stub
10 void __stub1(void) {
11 return;
12 }
13 link_warning (__stub1, "the ‘libresolv’ library is a stub.
Do you really need it?")
Fig. 3. A simpliﬁed example of BIND utility. req_iquery (Line 1) parses
the DNS iquery packet to decides what response to send for the query. The
program has a buffer overﬂow on Line 6. The logic before this line calls
a libc function dn_skipname which is implemented in libresolv library
external to the program. KLEE’s uClibc library does not reason about any
functions in this external library (Line 11), and always returns an error value.
KLEE terminates its analysis on Line 3 and never reaches Line 6.
hoc concretization is the default option undertaken in most
prior works. This motivates our new approach to learn a
different (approximate) representation of program fragments.
Constraint Solving is Difﬁcult. Consider the scenario where
KLEE or its extensions are somehow precisely able to infer the
reachability and vulnerability constraints in the above example,
encoded as SMT constraints over ﬂoating point values. At this