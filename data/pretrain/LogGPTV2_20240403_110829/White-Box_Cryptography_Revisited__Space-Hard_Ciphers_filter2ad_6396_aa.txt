title:White-Box Cryptography Revisited: Space-Hard Ciphers
author:Andrey Bogdanov and
Takanori Isobe
White-box Cryptography Revisited: Space-Hard Ciphers
Andrey Bogdanov
Technical University of Denmark, Denmark
PI:EMAIL
Takanori Isobe
Sony Corporation, Japan
PI:EMAIL
ABSTRACT
The need for software security in untrusted environments
is ever increasing. White-box cryptography aims to ensure
the security of cryptographic algorithms when the attacker
has full access to their implementations. However, there
is no secure white-box implementation of standard block
ciphers such as DES and AES known to date: All published
techniques have been practically broken.
In this paper, we revisit white-box cryptography and pro-
pose a family of white-box secure block ciphers SPACE with
several novel features. The design of SPACE is such that
the key-extraction security in the white box reduces to the
well-studied problem of key recovery for block ciphers (AES
in our example) in the standard black-box setting. More-
over, to mitigate code lifting, we introduce the notion of
space hardness.
It measures the diﬃculty of compressing
the white-box implementation of a cipher, and quantiﬁes se-
curity against code lifting by the amount of code that needs
to be extracted from the implementation by a white-box at-
tacker to maintain its functionality. SPACE includes several
variants with diﬀerent white-box code sizes. Therefore, it is
applicable to a wide range of environments and use cases.
One of the variants called N-SPACE can be implemented
with diﬀerent code sizes while keeping the cipher itself un-
changed.
SPACE oﬀers a high level of space hardness: It is diﬃ-
cult to ﬁnd a compact but still functional representation of
SPACE given its white-box implementation. This property
has several useful consequences for applications. First, it
gets more challenging for a DRM attacker (e.g. in a pay TV
setting) to scale a code-lifting attack and to distribute the
break. Moreover, this paves the way for mass-surveillance
resistant cryptography: If a large proportion of users dedi-
cates a signiﬁcant part of their computers’ storage (e.g. HDD)
to white-box SPACE implementations, it will be much more
complex or even infeasible for governmental agencies to deal
with the keys of all users simultaneously due to the limited
storage available, forcing them to focus on targeted attacks
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from Permissions@acm.org.
CCS’15, October 12–16, 2015, Denver, Colorado, USA.
Copyright is held by the owner/author(s). Publication rights licensed to ACM.
ACM 978-1-4503-3832-5/15/10 ...$15.00.
DOI: http://dx.doi.org/10.1145/2810103.2813699.
instead. This consequence is especially important given
Snowden’s revelations on the extent of the mass surveil-
lance practice by NSA and GCHQ. Finally, the usage of
SPACE ciphers can mitigate the damage of having malware
in security-critical systems such as networks processing top-
secret data: As those are typically insulated from the Inter-
net, the capacity of the communication channel from inside
to outside the system is often limited, making it infeasible
for Trojans to transmit the necessary key material.
Categories and Subject Descriptors
K.6.5 [Management of Computing and Information
Systems]: Security and Protection
Keywords
white-box cryptography; space-hard cipher; code lifting; de-
composition; key extraction; DRM; pay TV; mass surveil-
lance; Trojans; malware
INTRODUCTION
1.
1.1 Background
White-box cryptography, introduced by Chow et al. in
2002, aims to protect software implementations of cryp-
tographic algorithms in untrusted environments [13, 14].
An increasing number of applications are emerging that re-
quire substantial security in purely software environments,
e.g. set-top boxes, PCs, tablets and smartphones, even if
hardware-assisted security mechanisms are available such
as the ARM TrustZone. Here, the attacker has full con-
trol over the execution environment of a cryptographic al-
gorithm, both in static and dynamic ways by decompiler
and debugger tools, e.g. IDA Pro and IL DASM.
The major goal of white-box cryptography is to protect
the conﬁdentiality of secret keys in such a white-box envi-
ronment. In addition, code lifting is a threat [13, 42, 33],
where the attacker attempts to isolate the program code
from the implementation environment and directly uses the
code itself as a larger key, instead of ﬁnding the underlying
compact secret key.
Given the spread of software-only applications in embed-
ded as well as desktop and server systems, it comes as no
surprise that white-box cryptography receives a lot of atten-
tion from industry, especially in pay TV and other DRM set-
tings. As it inherently addresses resistance to malware and
Trojans, white-box cryptography will ﬁnd more and more
1058applications in banking and other security-critical settings
as well.
1.2 Previous Work
White-box implementations of DES and AES were ﬁrst
proposed by Chow et al. in [13, 14]. Their approach was to
ﬁnd a representation of the algorithm as a network of look-
ups in randomized and key-dependent tables. In the wake
of these seminal papers, several further variants of white-
box implementations for DES and AES were proposed [12,
44, 23, 26]. However, all published white-box solutions for
DES and AES to date have been practically broken by key
extraction and table-decomposition attacks [3, 43, 35, 34,
25].
Security against key extraction and code lifting in those
white-box implementations is based upon external encod-
ings, which are randomly drawn bijections added to the in-
put and output of the target block cipher. Such a block
cipher becomes an encoded variant of the original algorithm,
which is inappropriate when standard encryption schemes
are required for interoperability, e.g. on the standard DRM
platform Marlin [27] or in banking.
Dedicated white-box block ciphers have recently been pro-
posed by Biryukov et al. in [4]. They are based on the
ASASA structure that consists of two secret nonlinear lay-
ers (S) and three secret aﬃne layers (A), with aﬃne and
nonlinear layers interleaved. Similarly to [13, 14], the white-
box implementation of ASASA uses table look-ups. The se-
curity of ASASA against key extraction in the white-box
setting relies on the hardness of the decomposition problem
for ASASA. To estimate the security against code lifting at-
tacks without external encodings, the work [4] introduces a
security requirement of weak white-box security: It should be
computationally hard for an attacker to ﬁnd any compact
equivalent representation of the cipher, i.e. table decompo-
sition in the white-box environment should be computation-
ally hard. Indeed, this makes code lifting attacks diﬃcult
in terms of the amount of data that needs to be extracted
from the white-box environment. Unfortunately, eﬃcient
decomposition attacks on ASASA have been proposed [19,
32, 22].
To summarize the design approaches so far, the secu-
rity against key recovery and table-decomposition attacks
of most existing white-box implementations relies on the
hardness of the decomposition problem given multiple se-
cret nonlinear and linear layers. It is pointed out in [4] that
the white-box implementations of AES and DES in [13, 14]
can be considered as the 3-layer ASA, which is much weaker
than the 5-layer ASASA. However, the decomposition of se-
cret nonlinear and linear layers is a relatively new problem
with only a few papers [7, 11, 40] dedicated to its study.
Indeed, although more layers make the construction more
secure, recent cryptanalysis [6] suggests that even as many
as 9 layers (SASASASAS) are susceptible to attacks. Thus,
the assurance on the security of (AS)i against decomposition
is yet to be provided.
In this paper, we take a diﬀerent approach and base the
decomposition security of our ciphers in the white box on
the problem of key recovery for block ciphers in the standard
black-box setting.
1.3 Our Contributions
In this paper, we propose a family of white-box secure
block ciphers. Our ciphers are designed to satisfy the fol-
lowing properties:
White-box security is based on black-box security:
In white-box environments, the security of our con-
structions relies on the well-studied problem of key re-
covery for block ciphers such as AES. Thus, key extrac-
tion and table-decomposition attacks are computation-
ally infeasible as long as the underlying block cipher
is secure against key recovery attacks in the standard
black-box setting.
Space hardness: To quantitatively evaluate the diﬃculty
of code lifting attacks, we introduce a security require-
ment called (M, Z)-space hardness which is a gener-
alization of the weak white-box security notion of [4].
The notion of (M, Z)-space hardness allows us to claim
that if the amount of code to be isolated from the white-
box implementation by an attacker is less than M , a
construction is secure against code lifting. Namely, the
success probability that the code correctly encrypts (or
decrypts) a random input is less than 2
Indeed,
weak white-box security corresponds to the case of
(M, 0)-space hardness.
−Z .
Furthermore, even if the attacker succeeds in code lift-
ing, the property of space hardness discourages him
from illegally distributing the code due to its large size,
as it is infeasible to ﬁnd any compact implementation
unless the secret key is known.
No external encoding: To be applicable to the wide range
of situations and use cases, our ciphers do not require
any external operations such as external encodings for
their white-box security.
Variable white-box implementation size: In order to
provide a high degree of compatibility across platforms
and resource restrictions, our constructions include sev-
eral variants with diﬀerent but ﬁxed code sizes as well
as a variant with variable code sizes while keeping the
cipher itself unchanged.
Our family of white-box secure block ciphers consists of
two types of constructions: SPACE and N-SPACE.
SPACE includes four variants: SPACE-8, -16, -24 and
-32, which are implementable in diﬀerent but ﬁxed sizes of
code, ranging from a few KB to some GB. The table sizes
of SPACE-8, -16, -24 and -32 are suited for L1/L2 cache
(e.g. 32 KB to 256 KB), L3 cache (e.g. 8 MB), RAM (e.g. a
few GB) and HDD (e.g. many GB), respectively. Moreover,
we propose 4-SPACE as an example of N-SPACE. It of-
fers four implementation variants with diﬀerent code sizes
from a few KB to several GB, while keeping the cipher itself
unchanged: 4-SPACE-8, -16, -24 and -32.
Our constructions oﬀer implementation advantages over
known white-box AES implementations and are competitive
to (AS)i structures in white-box environments. In particu-
lar, at the comparable levels of (M ,Z)-space hardness, the
white-box implementations of SPACE-16, -24, and -32 re-
quire exactly the same number of table look-ups as ASASA-
1, -2, and -3, respectively, see Table 4.
Since the underlying internal block cipher can be freely
chosen depending on the user requirements, a wide range of
1059implementation properties in the black box can be attained.
If one chooses a software-oriented lightweight block cipher
such as PRIDE [1] and SIMON/SPECK [2] as the under-
lying block cipher, an implementation with very low RAM
and code size requirements is possible [18]. With AES in-
side, the black-box performance can be optimized by using
bit-sliced implementations or AES-NI.
1.4 Related Work: Memory Hardness
The concept of memory hardness was proposed in the con-
text of password hashing [37, 21, 5]: It forces the attacker
to consume a large amount of memory while computing a
target function. The purpose is to prevent eﬃcient paral-
lel brute-force attacks by dedicated password-cracking hard-
ware and GPUs.
As opposed to that, the goal of (M, Z)-space hardness is
to mitigate the copying of functionality. It states a bound
on the data required to be extracted from the white-box
environment for successfully processing a random input with
−Z . In other words, it aims to
probability of more than 2
eﬀectively increase the key size to M .
2. ATTACK MODELS
In this paper, we deal with two attack models: black-box
model and white-box model.
2.1 In the Black Box
The black-box model is a classical attack model in the
ﬁeld of symmetric-key cryptography.
2.1.1 Attacker’s Abilities
This model assumes that the attacker is able to access
inputs and outputs of the cipher with known- or chosen-
plaintexts or ciphertexts. Adaptive queries can be allowed.
2.1.2 Security Requirements
As the attacker aims to recover the secret key or to distin-
guish the block cipher from a randomly drawn permutation,
some standard security requirements in the black-box model
can be informally summarized as follows.
Key recovery security: It is computationally hard to re-
cover the key of the block cipher.
Distinguishing security: It is computationally hard to dis-
tinguish the block cipher from a randomly drawn per-
mutation.
The hardness of a key recovery is evaluated by the time
complexity accompanied by data and memory complexities
of ﬁnding the key. For instance, a 128-bit security implies a
time complexity of at least 2128 encryptions. The complex-
ity of a distinguishing attack is formally evaluated by the
number of queries necessary.
2.2 In the White Box
The white-box model originates from the seminal results
by Chow et al. [13, 14].
2.2.1 Attacker’s Abilities
This model assumes that the attacker has full control over
the execution environment of a cipher, both in static and
dynamic ways with the aid of arbitrary trace execution, ex-
amination of sub-results and keys in memory, insertion of
Figure 1: Table-based white-box implementations:
The key K is scrambled by a network of table look-
ups
Security Requirements
break-points, modiﬁcation of internal variables, and many
more.
2.2.2
The main goal of the white-box attacker is to extract the
secret key given the full access to the cipher’s implementa-
tion and its internals. Therefore, typical security require-
ments in the white-box setting are as follows.
Key extraction security: It is computationally hard to
extract the secret key of the block cipher.
Code lifting security: Instead of a secret key, the attacker
can directly use the implementation itself as a larger
eﬀective key. In particular, he can isolate the program
code where the key is embedded in order to copy the
functionality of encryption/decryption routines and to
utilize it in a stand-alone manner.
In some aspects,
this is also referred to as global deduction by De Mul-
der [33].
If a code lifting attack succeeds, the attacker gets the advan-
tage which is almost the same as key extraction, i.e. he can
encrypt/decrypt any plaintext/ciphertext. Unless a public-
key primitive is used or external encodings are involved, it
is challenging to completely prevent code lifting attacks. To
evaluate the diﬃculty of this attack, the notions of weak
white-box security and incompressibility have been intro-
duced in [33, 4]. The details of these will be given in the
next section. In this paper, we adopt a more general security
notion: space hardness.
3. KNOWN WHITE-BOX TECHNIQUES
The white-box techniques published so far can be divided
into two groups: white-box implementations of existing block
ciphers such as DES and AES on the one hand, and dedi-
cated designs of block ciphers for the white-box environment
on the other.
3.1 White-box Implementation of DES/AES
White-box implementations of DES and AES were ﬁrst
proposed by Chow et al. in [13, 14]. Their approach was to