# sakuraのAFL源码全注释（三）
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## afl-fuzz长叙
###  Fuzz执行
####  主循环
  * 首先精简队列`cull_queue`
  * 然后如果`queue_cur`为空，代表所有queue都被执行完一轮 
    * 设置queue_cycle计数器加一，即代表所有queue被完整执行了多少轮。
    * 设置current_entry为0，和queue_cur为queue首元素，开始新一轮fuzz。
    * 如果是resume fuzz情况，则先检查seek_to是否为空，如果不为空，就从seek_to指定的queue项开始执行。
    * 刷新展示界面`show_stats`
    * 如果在一轮执行之后的queue里的case数，和执行之前一样，代表在完整的一轮执行里都没有发现任何一个新的case 
      * 如果use_splicing为1，就设置cycles_wo_finds计数器加1
      * 否则，设置use_splicing为1，代表我们接下来要通过splice重组queue里的case。
  * 执行`skipped_fuzz = fuzz_one(use_argv)`来对queue_cur进行一次测试 
    * 注意fuzz_one并不一定真的执行当前queue_cur，它是有一定策略的，如果不执行，就直接返回1，否则返回0
  * 如果skipped_fuzz为0，且存在sync_id 
    * sync_interval_cnt计数器加一，如果其结果是SYNC_INTERVAL(默认是5)的倍数，就进行一次sync
  * `queue_cur = queue_cur->next;current_entry++;`，开始测试下一个queue
####  fuzz_one
  * 如果`pending_favored`不为0，则对于queue_cur被fuzz过或者不是favored的，有99%的几率直接返回1。
  * 如果`pending_favored`为0且queued_paths(即queue里的case总数)大于10 
    * 如果queue_cycle大于1且queue_cur没有被fuzz过，则有75%的概率直接返回1
    * 如果queue_cur被fuzz过，否则有95%的概率直接返回1
  * 设置len为`queue_cur->len`
  * 打开该case对应的文件，并通过mmap映射到内存里，地址赋值给`in_buf`和`orig_in`
  * 分配len大小的内存，并初始化为全0，然后将地址赋值给out_buf
  * **以下关于每部分的变异，因为我在改fuzz的时候，也并不十分需要AFL的原生变异，而是直接替换成我自己写的mutate，而这部分的代码要详细解释又都全是位运算，所以我只是写了几个以供大家参考阅读，剩下更多的参考了[这篇文章](http://rk700.github.io/2018/01/04/afl-mutations)的内容，如嫌我写的冗杂，可移步阅读**
**CALIBRATION阶段**
  * 假如当前项有校准错误，并且校准错误次数小于3次，那么就用calibrate_case再次校准。
**TRIMMING阶段**
  * 如果该case没有trim过， 
    * 调用函数`trim_case(argv, queue_cur, in_buf)`进行trim(修剪)
    * 设置queue_cur的trim_done为1
    * 重新读取一次`queue_cur->len`到len中
  * 将in_buf拷贝len个字节到out_buf中
**PERFORMANCE SCORE阶段**
  * perf_score = `calculate_score(queue_cur)`
  * 如果skip_deterministic为1，或者queue_cur被fuzz过，或者queue_cur的passed_det为1，则跳转去havoc_stage阶段
  * 设置doing_det为1
**SIMPLE BITFLIP (+dictionary construction)阶段**
  * 下面这个宏很有意思 
        #define FLIP_BIT(_ar, _b) do { \
      u8* _arf = (u8*)(_ar); \
      u32 _bf = (_b); \
      _arf[(_bf) >> 3] ^= (128 >> ((_bf) & 7)); \
    } while (0)
  * 设置stage_name为`bitflip 1/1`,_ar的取值是out_buf,而_bf的取值在[0: len > 3`又将[0:
lenwas_fuzzed`为1，然后pending_not_fuzzed计数器减一
如果queue_cur是favored, pending_favored计数器减一。
####  sync_fuzzers(char **argv)
这个函数其实就是读取其他sync文件夹下的queue文件，然后保存到自己的queue里。
  * 打开`sync_dir`文件夹
  * while循环读取该文件夹下的目录和文件`while ((sd_ent = readdir(sd)))`
    * 跳过`.`开头的文件和`sync_id`即我们自己的输出文件夹