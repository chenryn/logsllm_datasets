I have a large mesh, which I intend to render without smooth shading. As such,
there is no point calculating vertex normals. Normally, this is ok, since I
can do:
    geom.computeFaceNormals();
    if(smoothShading) geom.computeVertexNormals();
However, when I do `geometry.computeMorphNormals()`, it does both steps at
once. Could this be sensibly split into two distinct steps?
At present, I've just hacked in an impaired version of
`THREE.Geometry.prototype.computeMorphNormals` that doesn't touch vertex
normals, but I'm not keen on the code duplication:
    // Calculate only face normals, not morph normals, which is much faster
    THREE.Geometry.prototype.computeMorphFaceNormals = function () {
            var i, il, f, fl, face;
            // save original normals
            // - create temp variables on first access
            //   otherwise just copy (for faster repeated calls)
            for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
                    face = this.faces[ f ];
                    if ( ! face.__originalFaceNormal ) {
                            face.__originalFaceNormal = face.normal.clone();
                    } else {
                            face.__originalFaceNormal.copy( face.normal );
                    }
            }
            // use temp geometry to compute face and vertex normals for each morph
            var tmpGeo = new THREE.Geometry();
            tmpGeo.faces = this.faces;
            for ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {
                    // create on first access
                    if ( ! this.morphNormals[ i ] ) {
                            this.morphNormals[ i ] = {};
                            this.morphNormals[ i ].faceNormals = [];
                            var dstNormalsFace = this.morphNormals[ i ].faceNormals;
                            var faceNormal;
                            for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
                                    face = this.faces[ f ];
                                    faceNormal = new THREE.Vector3();
                                    dstNormalsFace.push( faceNormal );
                            }
                    }
                    var morphNormals = this.morphNormals[ i ];
                    // set vertices to morph target
                    tmpGeo.vertices = this.morphTargets[ i ].vertices;
                    // compute morph normals
                    tmpGeo.computeFaceNormals();
                    // store morph normals
                    var faceNormal;
                    for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
                            face = this.faces[ f ];
                            faceNormal = morphNormals.faceNormals[ f ];
                            faceNormal.copy( face.normal );
                    }
            }
            // restore original normals
            for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
                    face = this.faces[ f ];
                    face.normal = face.__originalFaceNormal;
            }
    }