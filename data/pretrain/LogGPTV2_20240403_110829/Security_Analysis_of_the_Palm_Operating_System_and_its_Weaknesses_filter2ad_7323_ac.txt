result ﬂag to exgAskOk, the application will send a
sysAppLaunchCmdExgReceiveData launch code and
always receive the incoming data without displaying
a dialog box or requiring user intervention.
Using the Exchange Manager functionality in this
manner, it is trivial to transmit and receive appli-
cations and data over the infrared communications
channel. With collusion on the receiving end, as
would be possible with an infected system, IR func-
tionality creates a viable conduit for propagation of
virus and other malicious applications.
While infrared beaming is workable in close quar-
ters, other mechanisms must be engaged for wide
distance communications. The wireless technol-
ogy space, particularly RF, has become a primary
driver for portable devices.
Internet and e-mail
connectivity can be obtained through numerous
providers, including Novatel Wireless, SkyTel, and
Sprint PCS. Wireless Application Protocol (WAP)-
capable PDAs and phones are becoming common-
place. Symbol Technologies’ family of Palm OS
devices integrate a Spectrum24 wireless local-area-
network module for enterprise connectivity. The
Palm VII employs a radio modem to communicate
with the “Palm.Net” service on the Bell South Wire-
less Data network.
6.4.3 Recommendations
As with any other ingress or egress point on PDAs,
wireless technologies create a new vector for possible
infection through such means as application trans-
fer or the transmission of intentionally faulty data
packets. The design of properly secured wireless
networks is beyond the scope of this paper, but it
should be noted that if the portable devices are not
suﬃciently protected, they become a weak link in
the transaction process. Consideration should par-
ticularly be placed on the storage of secret compo-
nents (e.g., encryption keys), user authentication,
and data transfer mechanisms.
Care should be taken when running server applica-
tions on a portable device, particularly when using
RF technology (which has a wide operating range).
These applications allow other devices to connect
inbound to the server device thereby increasing the
potential for malicious code to be transferred or for
other malicious action (e.g., theft of data) to take
place.
The scenario of beaming business cards at conven-
tions comes quickly to mind as a potential hostile
environment that previously might not have been
considered as such. Consider a scenario where an
adversary, posing as a conference attendee, beams
malicious code or other payload, in the form of a
business card object, to another individual. The
malicious code could then spread from this individ-
ual to trusted parties during seemingly innocuous
business card transfers.
Global system functionality that would always
prompt for user input and display the applications
requested for data reception or transmission would
diminish wireless infection. The addition of logging
mechanisms for post-mortem analysis would also as-
sist. As these are two suggestions that require ven-
dor intervention, it behooves the user of the device
to be cognizant of their surroundings and assess the
threat before accepting beamed information from
unknown people.
7 Storage and Payload Hiding
A key trait of virus code is the ability to remain in-
visible to casual scrutiny. This is often accomplished
by storing program contents in non-standard areas.
While the various methods of encrypting or other-
wise obfuscating the payload of a virus program to
avoid detection from anti-virus software is beyond
the scope of this paper, areas in which code may be
attached or stored in Palm OS devices is addressed.
7.1 Preferences and Databases
In the Palm OS API, Preferences and Data
Manager functions oﬀer several avenues for data
storage.
System and application preferences
are accessible via the Pref{Get,Set}Preferences
and Pref{Get,Set}AppPreferences function calls.
Similarly, any system or application database can
be attached to and used to store malicious content.
DmOpenDatabase, DmWrite, DmResizeRecord, and
DmSetDatabaseInfo are all common database ma-
nipulation functions that, due to the lack of protec-
tion and ownership of individual records, become
conduits for attachment.
Unused ﬁelds in records are commonly used as
covert channels. Databases on the Palm OS device
are no exception. For example, the Application and
Sort Info Blocks are optional ﬁelds in each database
that can be used to store application-speciﬁc infor-
mation. Common data stored in this block includes
category names or database version numbers. How-
ever, it is not necessary for this ﬁeld to be popu-
lated and often times it is not. Traversing the ex-
isting database records on the device and checking
the appInfoID or sortInfoID parameter for a null
pointer will yield a location for the attacker to store
the handle (pointer to a location) of their payload.
This would not aﬀect the legitimate application’s
usage in any way.
7.2 Flash Memory
Palm OS devices incorporating non-volatile Flash
memory currently use it solely for the storage of the
operating system code. Depending on the family of
Palm OS device, there remains between 440kB and
824kB of unused memory space.
Utilities exist, such as [27], which make use of
the unused memory areas to backup applications
and databases. These utilities are OS- and device-
speciﬁc and use functionality outside of the Palm
OS API. This is a perfect example of payload stor-
age and is identical to how a malicious application
would utilize Flash memory for such a purpose.
Data could also be stored on the Flash memory out-
side of the address space that is used by Palm OS,
but within the valid memory map as speciﬁed in the
DragonBall Group-Base Address registers. In do-
ing so, applications running on Palm OS using only
API functions will not be able to access nor see the
data stored in this region.
Recommendations to minimize the risks of improper
Flash memory usage are discussed in §9.3.1.
8 Execution Triggers
Viruses do not always execute immediately after in-
fecting a target device. There is often an “incuba-
tion period” in which the virus sits dormant, wait-
ing for a speciﬁc time, key sequence, or other pre-
ordained initiator. The inclusion of an incubation
period increases the diﬃculty of determining exactly
how or when the system was infected. As more sys-
tem activity takes place over time, the ability to
backtrack to the point of infection becomes diﬃcult
if not impossible.
8.1 Launch Codes
Particular launch codes sent by Palm OS are re-
ceived by all applications on the Palm device. This
becomes a prime candidate for incubation or virus
execution, since code segments deﬁned in handling
routines are executed without the user’s knowledge
or intervention. Full details of the launch codes can
be found in [22]. A casual perusal of the documenta-
tion for launch codes uncovers several obvious events
that will likely be used for incubation of malicious
code. Our speculations on these are listed in Ta-
ble 2.
Launch codes are handled in switch-style con-
structs within the PilotMain function. An applica-
tion checks each code that it receives to determine
if a handler exists. If one does exist, execution is
Launch Code
sysAppLaunchCmdSystemReset
sysAppLaunchCmdSyncNotify
Potential Incubation Method
This launch code signiﬁes that a system reset has just occurred.
No user input is allowed during this launch code. As Palm OS
devices are not reset at regular intervals, this provides a random
timing for the launch of malicious code.
When a HotSync operation has been completed or an application
has been successfully beamed and received by the device, this
launch code is sent to application. This could signify that the
malicious code has successfully propagated to the target device
and can perform its payload hiding or destructive actions.
sysAppLaunchCmdAlarmTriggered A most probable launch code for malicious use. Malicious code
could set an alarm for a future time. Upon receipt of the alarm,
the desired code would be executed.
Table 2: Selected application launch codes and theorized incubation methods
handed oﬀ to the appropriate functions. The launch
code of sysAppLaunchCmdNormalLaunch, sent when
an application is normally executed, would most
often vector to legitimate code. This provides an
appearance of normalcy while malicious payloads
remain dormant until their speciﬁc launch code is
seen.
8.1.1 Application Transfer
Through the use of launch codes sent by the Palm
OS during the loading of an application (via the
HotSync process or IR beaming), it is possible to
have an application self-execute after it has been
transferred to the target device. Using an infection
technique such as described in §6.1, it would be triv-
ial for malicious code to be loaded and executed on
a Palm device with the legitimate user having no
knowledge of the event.
A typical sequence to execute an application by
transfer is as follows:
The newly transferred application will ﬁrst receive
a sysAppLaunchCmdSyncNotify launch code from
the OS to specify that the device has success-
fully received the application.
If the handling of
this launch code sets an alarm for an immedi-
ate or future time, the application will be started
again with a sysAppLaunchCmdAlarmTriggered
launch code when that time is reached.
The
AppLaunchWithCommand API function can be called
with a sysAppLaunchCmdNormalLaunch launch code
in order for the application to begin normal execu-
tion.
8.1.2 Recommendations
While it is diﬃcult to determine if programs being
introduced to the system are malicious in nature, it
is possible to sweep existing applications to deter-
mine if new launch code handlers have been inserted
since the application’s original introduction. The
modiﬁcation of an existing program to execute new
code at launch would be endemic of viral activity
and noticeable through these scans.
8.2 Trap Patching
Well-known to the virus writing community is the
notion of “trap patching”. When a system function
is called, the operating system performs a look-up
on the trap dispatch table to determine where in
memory the desired function is located. In patch-
ing a system function, this address is replaced in the
table with an address pointing to new code. Often-
times, the new code will hand execution oﬀ to the
original routine after it has served its purpose. In
such a scenario, the patch appears invisible to the
end user, as the original functionality still succeeds.
Trap patching has many uses beyond that of virus
design. For Palm OS devices, trap patching has
been made popular with HackMaster [13]. Any na-
tive functions in the Palm OS are potential vectors
that can be trapped and exploited. This is not only
the case for exported user programming interfaces,
but includes those that are deﬁned for system-use
only.
To help in understanding trap patching as a vulner-
ability, consider a trivial denial-of-service event:
area,
SysHandleEvent hands
to the GrfProcessStroke API
When a penUpEvent event is detected in the
writing
control
over
function.
GrfProcessStroke is located in the trap dispatch
table and the Program Counter starts execution at
the address returned. If the GrfProcessStroke rou-
tine were replaced with a stub that returned imme-
diately after entry, which is to say that the routine
does nothing, the attack would result in characters
being prevented from entering into the key queue.
Obviously, this constitutes a much more benign
attack than ones that might be introduced with
greater functionality.
8.2.1 Recommendations
Solutions for this class of problem have been histori-
cally diﬃcult [7, 25]. Rollback, in particular, makes
the tracking of potentially legitimate patching prob-
lematic. For example, take a natural scenario as
shown in Figure 7.
Figure 8: Function 1 patched to point to Address
D. Address D hands oﬀ to the original location, Ad-
dress A, upon completion.
Potential exists for periodic checks against vendor-
published hash tables to avoid the rollback scenario.
It is envisioned that vendors would publish and
cryptographically sign a list of the entry points to
the various functions. Checks could be made on the
portable devices themselves. The Palm OS could
also create a list of entry points of newly installed
applications and, upon execution, check the stored
values against the live values noting discrepancies.
A message box or other user alert would be shown
should the necessity arise. A cryptographic copro-
cessor, such as [8, 26], could assist in the secure
storage of these entry points.
9 Malicious Actions
9.1 Application Deletion
Figure 7: Functions {1,2,3} with corresponding Ad-
dresses {A,B,C}
Assuming that the structure in the trap dispatch
table for Function 1 is modiﬁed to point to a new
Address, D (Figure 8), it would be up to the pro-
gram that introduced the modiﬁcation to keep track
of the original value.
If yet another patching program is introduced, it
would note the native location of Function 1 as Ad-
dress D. In this case, the second program has no way
of knowing that it did not store the original address
of Function 1. Upon the ﬁrst program returning
Function 1 to Address A, the second program can
still rollback, pushing the return location back to
that of Address D.
Without memory protection, it is trivial to create
applications capable of deleting program code or
database information. The Palm.Liberty.A Tro-
jan horse, detected in August 2000 and claimed to
be the ﬁrst known Trojan for the Palm OS platform,
did just this in erasing all databases on the device.
With complete and unrestricted memory access, the
malicious application simply iterates through the
linked list of databases and unlinks each one as it
proceeds.
9.1.1 Recommendations
There are several preventive approaches for this
type of attack. Trapping operating system calls at
the API level has been employed in certain scenar-
ios [18]. The calls are often patched to alert the user
of a particular action or to disallow an action alto-
123ABC123ABCDRegister(s)
Phase-Locked Loop (PLL) Control
Power Control
Group-Base Address
Group-Base Address Mask
Chip-Select
LCD Controller Module
Potential Eﬀects
System can be halted.
Corrupted memory maps making code and data
fetches impossible.
Aﬀect LCD functionality. It may be possible to
cause LCD hardware damage by modifying the
refresh frequency or by improper power cycling.
Table 3: Selected registers and theorized eﬀects of improper modiﬁcation
gether. Placing the onus of allowing or disallowing
certain functions on the user can be problematic
as, more often than not, the user is not security-
conscious and will
improperly conﬁgure, circum-
vent, or completely ignore the protection mecha-
nisms due to their complexity. Security processes
need to be in place at the operating system level
that are undetectable and inescapable.
While this technique of trapping operating system
calls has enjoyed some amount of success, it has
the drawback that applications legitimately creat-
ing and erasing their own databases are often hin-
dered. One remedy to this situation is to have the
operating system enforce rules that only allow mod-
iﬁcation to databases with the same Creator ID as
the application performing the actions. In this case,
the Creator ID would need to be non-modiﬁable by
the user.
9.2 Register Manipulation
While attacks using the Palm OS API are a major
threat, lack of compartmentalization in the operat-
ing system allows the user to target the underlying
hardware controlling the device. The DragonBall
allows direct control of its registers via memory-
mapping. Direct control of these registers allows
an attacker to control many low-level aspects of de-
vice operation. An application simply has to deﬁne
a pointer to the speciﬁc memory location represent-
ing the target register.
By examining the DragonBall registers, we have de-
termined particular registers that, when improperly
modiﬁed, can lead to disruptive events or physical
damage to the Palm OS device. Our theorized ef-
fects are listed in Table 3. It should be noted that
while these examples focus on the DragonBall pro-
cessor, other embedded microprocessors exhibit sim-
ilar vulnerabilities. These attacks are comparable
to the desktop computer environment in which ma-
licious programs would change the synchronization
rate of a monitor or over-drive and manipulate hard