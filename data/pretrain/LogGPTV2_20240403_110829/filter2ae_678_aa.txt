**作者：thanat0s@360高级攻防实验室  
原文链接：**
## 0x00 前言
这是第一次遇到与 Java Class
字节码相关的漏洞([CVE-2022-34169](https://bugs.chromium.org/p/project-zero/issues/detail?id=2290&continueFlag=5f0a104405cabc4e1e6027013da73bfc))，由于漏洞作者提供的利用脚本未能执行成功，所以根据漏洞描述结合自己的理解尝试进行利用构造，在深入分析并成功构造出
Payload 的过程中，也是加深了对 Java
字节码的了解，虽然漏洞作者在利用脚本中提供了一些注释信息，但对于完整理解整个利用的构造过程是不够的，因此这里对 Payload 构造过程进行一个详细的记录。
## 0x01 漏洞概述
> [XSLT(Extensible Stylesheet Language
> Transformations)](https://zh.wikipedia.org/zh-sg/XSLT) 是一种可以将 XML
> 文档转换为其他格式(如 HTML)的标记语言
>
> [Xalan-J](https://xml.apache.org/xalan-j/) 是 Apache 开源项目下的一个 XSLT 处理器的 Java
> 版本实现
首先看到漏洞作者提供的漏洞描述：
> Xalan-J uses a JIT compiler called XSLTC for translating XSLT stylesheets
> into Java classes during runtime. XSLTC depends on the Apache Byte Code
> Engineering (BCEL) library to dynamically create Java class files
>
> As part of the compilation process, constants in the XSLT input such as
> Strings or Numbers get translated into Java constants which are stored at
> the beginning of the output class file in a structure called the constant
> pool
>
> Small integers that fit into a byte or short are stored inline in bytecode
> using the bipush or sipush instructions. Larger ones are added to the
> constant pool using the cp.addInteger method
    // org.apache.bcel.generic.PUSH#PUSH(org.apache.bcel.generic.ConstantPoolGen, int)
    public PUSH(final ConstantPoolGen cp, final int value) {
        if ((value >= -1) && (value  As java class files only use 2 bytes to specify the size of the constant
> pool, its max size is limited to 2**16 - 1 entries
>
> BCELs internal constant pool representation uses a standard Java Array for
> storing constants and does not enforce any limits on its length. When the
> generated class file is serialized at the end of the compilation process the
> array length is truncated to a short, but the complete array is written out：
    // org.apache.bcel.classfile.ConstantPool#dump
    public void dump( final DataOutputStream file ) throws IOException {
        file.writeShort(constant_pool.length); // 对 constant_pool.length 进行了 short 截断
        for (int i = 1; i  32767` 的数值将存入到字节码的
`常量池表(constant_pool)` 中，漏洞产生的原因在于 Class
字节码规范中限制了常量池计数器大小(`constant_pool_count`) 为 `u2 类型(2个无符号字节大小)`，所以 BCEL 在写入 `>
0xffff` 数量的常量时需要进行截断处理，但是通过上面 `dump()` 方法中的代码可以看到，BCEL 虽然对
`constant_pool_count` 数值进行了处理，但实际依旧写入了 `> 0xffff` 数量的常量，因此大于
`constant_pool_count` 部分的常量最终将覆盖 `access_flags` 及后续部分的内容
    ClassFile {
        u4             magic;                                // 魔术，识别 Class 格式 
        u2             minor_version;                        // 副版本号(小版本)
        u2             major_version;                        // 主版本号(大版本)
        u2             constant_pool_count;                  // 常量池计数器：用于记录常量池大小
        cp_info        constant_pool[constant_pool_count-1]; // 常量池表：0 位保留，从 1 开始写，所以实际常量数比 constant_pool_count 小 1
        u2             access_flags;                         // 类访问标识
        u2             this_class;                           // 类索引
        u2             super_class;                          // 父类索引
        u2             interfaces_count;                     // 接口计数器
        u2             interfaces[interfaces_count];         // 接口索引集合
        u2             fields_count;                         // 字段表计数器
        field_info     fields[fields_count];                 // 字段表
        u2             methods_count;                        // 方法表计数器
        method_info    methods[methods_count];               // 方法表
        u2             attributes_count;                     // 属性计数器
        attribute_info attributes[attributes_count];         // 属性表
    }
## 0x02 环境搭建
  * JDK测试版本: 1.8.0_301、11.0.9
根据作者的描述，使用的是 `Xalan-J 2.7.2` 版本，并通过如下命令生成 `.class` 文件
    // https://xml.apache.org/xalan-j/commandline.html
    java -jar /usr/share/java/xalan2.jar -XSLTC -IN test.xml -XSL count.xsl -SECURE  -XX -XT
    -XSLTC (use XSLTC for transformation)
    -IN inputXMLURL
    -XSL XSLTransformationURL
    -SECURE (set the secure processing feature to true)
    -XX (turn on additional debugging message output)
    -XT (use translet to transform if possible)
为了方便调试，替换为相应的 Java 代码，新建 Maven 项目，添加如下依赖及代码：
  * pom.xml
      xalan
      xalan
      2.7.2
  * org/example/TestMain.java
    package org.example;
    import org.apache.xalan.xslt.Process;
    public class TestMain {
        public static void main(String[] args) throws Exception {
            String xsltTemplate = "/tmp/xalan_test/select.xslt";
            Process.main(new String[]{"-XSLTC", "-IN", "/tmp/xalan_test/source.xml", "-XSL", xsltTemplate, "-SECURE", "-XX", "-XT"});
        }
    }
  * /tmp/xalan_test/source.xml
    Hello
  * /tmp/xalan_test/select.xslt
运行 `TestMain` 后即可生成 `select.class` 文件，反编译后得到如下 Java 代码：
    import org.apache.xalan.xsltc.DOM;
    import org.apache.xalan.xsltc.TransletException;
    import org.apache.xalan.xsltc.runtime.AbstractTranslet;
    import org.apache.xml.dtm.DTMAxisIterator;
    import org.apache.xml.serializer.SerializationHandler;
    public class select extends AbstractTranslet {
        public DOM _dom;
        protected static String[] _sNamesArray = new String[0];
        protected static String[] _sUrisArray = new String[0];
        protected static int[] _sTypesArray = new int[0];
        protected static String[] _sNamespaceArray = new String[0];
        public void buildKeys(DOM var1, DTMAxisIterator var2, SerializationHandler var3, int var4) throws TransletException {
        }
        public void topLevel(DOM var1, DTMAxisIterator var2, SerializationHandler var3) throws TransletException {
            int var4 = var1.getIterator().next();
        }
        public void transform(DOM var1, DTMAxisIterator var2, SerializationHandler var3) throws TransletException {
            this._dom = this.makeDOMAdapter(var1);
            int var4 = var1.getIterator().next();
            this.transferOutputSettings(var3);
            this.topLevel(this._dom, var2, var3);
            var3.startDocument();
            this.applyTemplates(this._dom, var2, var3);
            var3.endDocument();
        }
        public void template$dot$0(DOM var1, DTMAxisIterator var2, SerializationHandler var3, int var4) {
        }
        public final void applyTemplates(DOM var1, DTMAxisIterator var2, SerializationHandler var3) throws TransletException {
            int var4;
            while((var4 = var2.next()) >= 0) {
                switch(var1.getExpandedTypeID(var4)) {
                case 0:
                case 1:
                case 9:
                    this.applyTemplates(var1, var1.getChildren(var4), var3);
                    break;
                case 2:
                case 3:
                    var1.characters(var4, var3);
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 10:
                case 11:
                case 12:
                case 13:
                }
            }
        }
        public select() {
            super.namesArray = _sNamesArray;
            super.urisArray = _sUrisArray;
            super.typesArray = _sTypesArray;
            super.namespaceArray = _sNamespaceArray;
            super.transletVersion = 101;
        }
    }