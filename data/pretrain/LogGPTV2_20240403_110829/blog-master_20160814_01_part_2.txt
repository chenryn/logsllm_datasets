这个文件是不会被pg_resetxlog纂改的，因为可以用来追溯真正的版本。    
```  
cat PG_VERSION  
9.5  
```  
被不同版本的pg_resetxlog强制重建控制文件后，数据库将无法启动。    
怎么办呢？    
方法很简单，使用PG_VERSION对应版本的pg_resetxlog重新生成一遍控制文件即可。    
## pg_resetxlog  的参数计算方法  
pg_resetxlog参数有几个，分别用来设置控制文件中对应的next xid , next oid, next multi-xact xid, ......    
这些值有固定的算法，而且有安全范围，例如，不能设置比实际已创建事务更小的事务号，否则会造成对应事务产生的数据在事务号未消耗前数据不可见。    
安全值的计算方法，可以参考pg_resetxlog的说明。    
其实就是使用xlog中的文件名推算next xid。使用pg_multixact中的members , offsets推断oldest multixact id, next multi-xact。等等。    
```  
       The -o, -x, -e, -m, -O, -c and -l options allow the next OID, next transaction ID, next transaction ID's epoch, next and oldest multitransaction ID, next multitransaction offset, oldest and newest transaction IDs for which  
       the commit time can be retrieved, and WAL starting address values to be set manually. These are only needed when pg_resetxlog is unable to determine appropriate values by reading pg_control. Safe values can be determined as  
       follows:  
       ·   A safe value for the next transaction ID (-x) can be determined by looking for the numerically largest file name in the directory pg_clog under the data directory, adding one, and then multiplying by 1048576. Note that  
           the file names are in hexadecimal. It is usually easiest to specify the option value in hexadecimal too. For example, if 0011 is the largest entry in pg_clog, -x 0x1200000 will work (five trailing zeroes provide the  
           proper multiplier).  
       ·   A safe value for the next multitransaction ID (first part of -m) can be determined by looking for the numerically largest file name in the directory pg_multixact/offsets under the data directory, adding one, and then  
           multiplying by 65536. Conversely, a safe value for the oldest multitransaction ID (second part of -m) can be determined by looking for the numerically smallest file name in the same directory and multiplying by 65536. As  
           above, the file names are in hexadecimal, so the easiest way to do this is to specify the option value in hexadecimal and append four zeroes.  
       ·   A safe value for the next multitransaction offset (-O) can be determined by looking for the numerically largest file name in the directory pg_multixact/members under the data directory, adding one, and then multiplying  
           by 52352. As above, the file names are in hexadecimal. There is no simple recipe such as the ones above of appending zeroes.  
       ·   A safe value for the oldest transaction ID for which the commit time can be retrieved (first part of -c) can be determined by looking for the numerically smallest file name in the directory pg_commit_ts under the data  
           directory. Conversely, a safe value for the newest transaction ID for which the commit time can be retrieved (second part of -c) can be determined by looking for the numerically greatest file name in the same directory.  
           As above, the file names are in hexadecimal.  
       ·   The WAL starting address (-l) should be larger than any WAL segment file name currently existing in the directory pg_xlog under the data directory. These names are also in hexadecimal and have three parts. The first part  
           is the “timeline ID” and should usually be kept the same. For example, if 00000001000000320000004A is the largest entry in pg_xlog, use -l 00000001000000320000004B or higher.  
               Note  
               pg_resetxlog itself looks at the files in pg_xlog and chooses a default -l setting beyond the last existing file name. Therefore, manual adjustment of -l should only be needed if you are aware of WAL segment files  
               that are not currently present in pg_xlog, such as entries in an offline archive; or if the contents of pg_xlog have been lost entirely.  
       ·   There is no comparably easy way to determine a next OID that's beyond the largest one in the database, but fortunately it is not critical to get the next-OID setting right.  
       ·   The transaction ID epoch is not actually stored anywhere in the database except in the field that is set by pg_resetxlog, so any value will work so far as the database itself is concerned. You might need to adjust this  
           value to ensure that replication systems such as Slony-I and Skytools work correctly — if so, an appropriate value should be obtainable from the state of the downstream replicated database.  
       The -n (no operation) option instructs pg_resetxlog to print the values reconstructed from pg_control and values about to be changed, and then exit without modifying anything. This is mainly a debugging tool, but can be  
       useful as a sanity check before allowing pg_resetxlog to proceed for real.  
```  
推断出正确的值后，就可以开始通过pg_resetxlog设置控制文件了。    
## 如何从$PGDATA查看正确的数据库版本    
除了pg_controldata以外，还可以查看文件PG_VERSION得到。    
## 控制文件修复例子  
http://blog.163.com/digoal@126/blog/static/163877040201171233710582/    
http://blog.163.com/digoal@126/blog/static/16387704020130109400557/    
## 小结  
使用与数据文件异版本的pg_resetxlog，将导致数据文件对应到 控制文件损坏。  无法启动数据库。    
解决版本，使用与数据文件版本一致的pg_resetxlog，重新生成控制文件，需要加-f强制执行。    
pg_resetxlog参数的安全值计算方法，见pg_resetxlog的参考手册。    
祝大家玩得开心，**欢迎随时来 阿里云促膝长谈业务需求** ，恭候光临。    
阿里云的小伙伴们加油，努力 **做好内核与服务，打造最贴地气的云数据库** 。    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")