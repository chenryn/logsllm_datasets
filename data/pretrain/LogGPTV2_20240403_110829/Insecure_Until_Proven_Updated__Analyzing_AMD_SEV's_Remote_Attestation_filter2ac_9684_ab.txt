State (SEV-ES) [20].
2.3 SEV: Cryptographic Keys
SEV offers cryptographic proof that a) the remote platform is an
authentic AMD platform which supports SEV and b) that a guest
was deployed with SEV protection in place. To that end, the SEV
firmware manages several cryptographic keys that are explained
in this section.
Figure 1: Cryptographic keys in SEV. A shield denotes the
key as the root of trust for the corresponding certificate
chain. Boxes show the scope of the respective keys.
Firmware Identity Upon initialization, the SEV firmware run-
ning on the PSP generates an ECDSA key, the Platform Endorsement
Key (PEK), using a secure entropy source, see Figure 1. The SEV
firmware uses the PEK to sign the Platform Diffie-Hellman key
(PDH), which is used to negotiate a shared secret with a remote
party, e.g., to establish the secure channel between the guest owner
and the SEV platform[3, Chapter 1.2.2].
Platform Ownership Ownership information is provided by
signing the PEK with a certificate authority (CA) of the cloud
provider, the owner certificate authority (OCA), see Figure 1. The
SEV firmware allows generating a certificate signing request (CSR)
of the PEK. This allows the cloud provider to sign the PEK. The
signed PEK certificate is then re-imported into the SEV firmware [3,
Chapter 1.2.4].
Session 5C: Cloud Security IICCS ’19, November 11–15, 2019, London, United Kingdom1089Platform Authenticity To provide the guest owner with an au-
thenticity guarantee of the platform, the PEK is also signed by the
Chip Endorsement Key (CEK), see Figure 1. The CEK is an ECDSA
key which is derived from CPU-specific secrets stored in one-time-
programmable fuses (OTP fuse) in the CPU [3, Chapter 1.2.3]. To
prove the authenticity of the CEK, it is signed by the AMD SEV
Signing Key (ASK) which is in turn signed by the AMD Root Key
(ARK). As the CEK is unique for each platform, the SEV API spec-
ifies a command to retrieve a unique identifier tied to a platform.
While the CEK private key must remain confidential, the signed
certificates of the CEK, ASK and the ARK can be obtained from
AMD [4] using the platform ID provided by the SEV firmware. The
CEK, therefore, plays a central role in the trust model of SEV.
secret using a Diffie-Hellman key exchange [3, Chapter 2.2.2]. The
master secret is only known by the client and the target, but not by
the hypervisor. Using the master secret the key encryption keys are
derived, see Section 2.3. Finally, the client generates the transport
encryption keys and wraps them using KIK and KEK, Step 7. The
wrapped keys and the Diffie-Hellman share are then transferred to
the target.
Both client and the target SEV firmware now hold the transport
keys that allow authenticated, encrypted, and integrity protected
communication.
Confidential Communication Since SEV assumes an untrusted
hypervisor, confidential communication must be ensured for two
cases: First, during the initial deployment of a VM, between the
guest owner and the SEV firmware of the target platform. Second,
during migration, between the SEV firmwares of the source and
target platform.
To this end, a client and the SEV firmware use the Diffie-Hellman
protocol to establish a shared secret, the master secret. A client in
this context is either a guest owner or another SEV firmware in
case of migration. Using a key derivation function (KDF) and the
established master secret, both the client and the SEV firmware de-
rive the Key Encryption Key (KEK) and the Key Integrity Key (KIK).
These keys are used to protect the transport keys, the so-called
Transport Encryption Key (TEK) and Transport Integrity Key (TIK).
The transport keys are encrypted using the KEK, and a MAC is gen-
erated using the KIK. This process is referred to as key wrapping [3,
Chapter 2.1]. Note that the transport keys are chosen by the client,
whereas KIK and KEK are derived from the master secret.
The transport keys are then used to ensure the integrity and
confidentiality of data exchanged between the SEV firmware and
outside entities. The following section explains the protocol used
to establish the secure channel.
2.4 SEV: Establish Secure Channel
In order to establish the secure channel, both client and SEV firmware
follow the steps depicted in Figure 2. As the SEV API is only ac-
cessible via the hypervisor, the secure channel must guarantee
authenticity, integrity, and confidentiality of the communication.
In case of deployment, the client is the guest owner, see variant D.
In case of migration, the client is the source platform and the SEV
firmware is the target platform of the migration, variant M.
In the first step, the hypervisor retrieves the PDH and the PEK
certificate together with a unique platform ID of the target platform.
Using this ID, either the hypervisor, in case of migration, or the
guest owner, during deployment, consult the AMD key server to
obtain the CEKI D certificate along with the ARK and ASK. The
client is now able to authenticate the target platform by verifying
the certificate chain3 as shown in Step 5. In that case, the client
would also verify that the PEK is signed by the OCA in Step 5). In
Step 6 the authenticated PDH is then used to negotiate the master
3To allow the client to verify the ownership of the platform, the PEK can also be signed
with the OCA.
Figure 2: SEV Secure Channel. Protocol initiated by the guest
owner, in case of deployment (D) and the hypervisor, in case
of migration (M).
2.5 SEV: Guest Deployment
While Section 2.4 explained the establishment of the secure channel,
this section gives an overview of the steps required to deploy a
guest VM in an SEV-enabled cloud system.
Prior to the guest deployment, the platform owner has to ini-
tialize the SEV platform. During initialization, the SEV firmware
derives the platform-specific keys described in Section 2.3. Further-
more, the firmware establishes a chain of trust by signing the PDH
with the PEK and the PEK with the CEK:
PDH → PEK → CEK → ASK → ARK
(1)
This is also depicted in Figure 1. Optionally, a second certificate
chain is established:
PDH → PEK → OCA
(2)
Session 5C: Cloud Security IICCS ’19, November 11–15, 2019, London, United Kingdom1090These chains allow a client to authenticate a given PDH4. After
these steps, the SEV firmware transitions into the initialized state.
Before any guest VM can be deployed on the platform, the guest
owner authenticates the remote SEV platform. Using the steps
shown in Figure 2, she can establish a secure channel with the
remote SEV platform. The verification of the certificate chain, see
Step 5, ensures that the remote system is an authentic AMD system
that supports SEV.
Figure 3: Initial deployment of a guest virtual machine in an
SEV scenario.
Launching the Guest The guest owner now prepares the guest
VM to be executed by the cloud provider. The initial guest VM is
sent to the hypervisor unencrypted and therefore must not contain
any confidential data. To ensure the confidentiality of the guest
owner’s data, the initial guest image will usually contain an addi-
tional encrypted disk image. In this case, the encryption key is then
later provided using the established secure channel. Besides the
VM image itself, the guest owner must also provide a policy that
defines restrictions on the actions the cloud provider can perform
on the guest VM. These include, e.g., the cloud provider’s ability
to migrate the guest VM to another platform or the minimum SEV
API version that the target SEV firmware must implement. As the
memory encryption of SEV prevents traditional VM migration, the
SEV firmware provides an interface to migrate VMs to a different
host, as outlined in the following section.
The guest owner deploys the VM, including the encrypted disk
image, to the cloud provider, see Step 1 of Figure 3. The hypervi-
sor launches the guest and calls the SEV firmware to encrypt the
memory, Step 2. Next, the SEV firmware calculates a hash of the
initial plaintext VM memory. The hash, together with the SEV API
version and the guest policy, is protected by the secure channel and
transferred to the guest owner, see Step 3 and 4. The hash gives the
guest owner confidence that the VM was deployed unmodified by
the hypervisor. Lastly, in Steps 5 and 6, the guest owner uses the
secure channel to provide the disk encryption key to the VM. This
4In case the platform was already initialized, the encrypted and integrity protected
state is read from non-volatile storage.
allows the VM to decrypt the disk and process the confidential data.
The guest VM is now fully operational and protected by SEV.
2.6 SEV: Migration and Snapshots
Virtual machine migration and snapshotting are common tasks in
a cloud computing environment. Both migration and snapshotting
require the export of virtual machine memory. In case of migration,
the memory is then exported to a different platform, while for
snapshotting, the memory is saved on the same platform for a later
re-import.
As SEV encrypts virtual machine memory using ephemeral keys
which never leave the SEV firmware, SEV provides a special mech-
anism to export memory. Additionally, the guest owner can impose
restrictions on the memory export. She can prohibit the export
using the guest policy, and she can define the minimum SEV API
version of the target system using the API fields of the guest pol-
icy [3, Chapter 3].
Using the SEV API, the hypervisor initiates the export of the VM
memory on the source platform. The exported memory is encrypted,
and integrity protected using transport keys that are generated by
the source SEV firmware. To that end a secure channel between
the source and the target SEV firmware is established, see Figure 2
variant M. The target platform can decrypt the exported memory
and re-encrypt it using a freshly generated ephemeral memory
encryption key. This allows the export of encrypted memory in the
face of an untrusted hypervisor as only the source and the target
SEV firmware share the transport keys that are used to encrypt the
exported memory.
3 FIRMWARE ANALYSIS
The Platform Security Processor (PSP) hosts a firmware provided
by AMD. Amongst other things, this firmware implements all SEV
related operations carried out by the PSP. Given the trust model of
SEV where the guest owner requests services from an untrusted
hypervisor, it is paramount that this firmware is not under control
of the platform owner, but instead provisioned by a trusted entity,
AMD in this case. This section presents the results of our firmware
analysis on which our attacks in Section 5 are based.
3.1 PSP Firmware Structure
By analyzing UEFI firmware updates of AMD Epyc systems, we
were able to locate the PSP firmware. It is comprised of several
components which are stored in an undocumented area of the UEFI
firmware image. Although the layout of the UEFI firmware residing
on the SPI flash is standardized [12], the PSP and SEV firmware are
not part of the standardized layout. Building on published informa-
tion from the Coreboot project [26] and the SEV API specification
[3] we were able to understand the proprietary filesystem and iden-
tify and extract all firmware components. The individual firmware
components are prepended with a header containing metadata. This
metadata contains a version field and also determines the certificate
used to verify the component’s integrity.
Most relevant for the attacks presented in this work are three
components: The ARK public key (see Figure 1), a component we
call PSP Operating System (PSP OS) and a component that imple-
ments the SEV API, the SEV firmware. To facilitate further research,
Session 5C: Cloud Security IICCS ’19, November 11–15, 2019, London, United Kingdom1091we developed a PSP firmware analysis tool which is published
under [32].
PSPTool allows to parse the proprietary filesystem used to store
the PSP OS and SEV firmware. It lists all firmware components
alongside various attributes. Furthermore, it is able to correlate SPI
read accesses recorded with a logic analyzer with a given binary.
This allows to inspect the order in which the PSP firmware com-
ponents are loaded from flash. A full list of features can be found
at [32].
firmware. Specifically, the PSP firmware resides in UEFI padding
volumes (Pad File), see [12, Chapter 2.1.4]. We observed that the
first components that are loaded from flash are the ARK public key
and the PSP OS. We also observed a delay after the PSP OS is loaded
and before any other attempt to access the flash can be observed.
Our experiments have shown that a modified ARK will result in no
further flash reads after the ARK is read. In case the PSP OS was
altered, a PSP OS from a different flash location is loaded. If this
recovery PSP OS is also altered, the system resets.
ARK Public Key This ARK is a 2048 bit RSA public key stored
in a format as described in [3, Appendix B.1]. We could verify that
both the PSP OS and the SEV firmware are signed with the ARK
private key. The prepended header of each component is part of
the signed data. The ARK public key is also contained in the ARK
certificate that can be obtained from the AMD key server [4], see
Section 2.3.
PSP Operating System The PSP OS is the only component that
contains privileged ARM code. It executes in the privileged mode
of the PSP, the SVC mode, with paging enabled. Amongst its respon-
sibilities are system initialization and loading of other firmware
components. These components execute in the unprivileged USR
mode and are thus separated from the PSP OS. There is always only
a single unprivileged component present in memory. To switch to
a different component, the currently loaded component is replaced.
The PSP OS provides a syscall interface for unprivileged compo-
nents that provides, e.g., access to the cryptographic co-processor
(CCP). The CCP is a dedicated hardware component that allows
offloading various cryptographic operations. It is usable from both
the main processor and the PSP.
SEV Firmware The SEV firmware implements the SEV API spec-
ification [3]. It is loaded by the PSP OS and is executed in the
unprivileged USR mode. Its responsibilities include the key genera-
tion steps shown in Section 2.3 as well as the policy enforcement
described in Step 4 of Section 2.5. It maintains a state of all SEV-
enabled guest VMs as well as the platform state which includes the
generated certificates and private keys. Upon initialization, the SEV
firmware will either load a previously saved state from non-volatile
storage utilizing the syscall interface provided by the PSP OS or
generate a new state including new certificates. The saved state
is encrypted, and integrity protected [3, Chapter 5.1.5]. The guest
state includes the guest policy as well as the guest VM’s memory
encryption keys. While the PEK and PDH are generated using a
“secure entropy source” [3, 2.1.1f)], the CEK is derived from “chip-
unique OTP fuses” and has a lifetime of the corresponding CPU [3,
2.1.3]. To retrieve the value from the OTP fuse, the SEV firmware
issues a syscall. The PSP OS will then retrieve 32 bytes from the
CCP and relay it to the SEV firmware. These 32 bytes are used as
an input to a key derivation function.
3.2 PSP Boot Security
To better understand the PSP boot process, we used a logic analyzer
to record accesses to the SPI flash memory hosting the UEFI im-
age. The PSP firmware components are stored alongside the UEFI
Figure 4: Boot procedure on an SEV-enabled system. A lock
denotes a non-modifiable component whereas a pen denotes
modifiable components. Arrows denote dependencies of ini-
tialization steps.
Based on these observations and our static analysis from Section
3, we inferred a boot order, as shown in Figure 4. The Figure focuses
on the security-relevant parts of the SEV technology; other steps
of the boot process are omitted.
In addition to the PSP OS and the SEV firmware, a third compo-