### 2.3 SEV: Cryptographic Keys

SEV (Secure Encrypted Virtualization) provides cryptographic proof that:
- The remote platform is an authentic AMD platform supporting SEV.
- A guest was deployed with SEV protection in place.

To achieve this, the SEV firmware manages several cryptographic keys, which are detailed below.

**Figure 1: Cryptographic Keys in SEV**
- A shield denotes the key as the root of trust for the corresponding certificate chain.
- Boxes show the scope of the respective keys.

#### Firmware Identity
Upon initialization, the SEV firmware running on the Platform Security Processor (PSP) generates an ECDSA key, the **Platform Endorsement Key (PEK)**, using a secure entropy source (see Figure 1). The PEK is used to sign the **Platform Diffie-Hellman key (PDH)**, which is used to negotiate a shared secret with a remote party, such as establishing a secure channel between the guest owner and the SEV platform [3, Chapter 1.2.2].

#### Platform Ownership
Ownership information is provided by signing the PEK with a certificate authority (CA) of the cloud provider, the **Owner Certificate Authority (OCA)** (see Figure 1). The SEV firmware allows generating a **Certificate Signing Request (CSR)** for the PEK, enabling the cloud provider to sign it. The signed PEK certificate is then re-imported into the SEV firmware [3, Chapter 1.2.4].

#### Platform Authenticity
To provide the guest owner with an authenticity guarantee of the platform, the PEK is also signed by the **Chip Endorsement Key (CEK)** (see Figure 1). The CEK is an ECDSA key derived from CPU-specific secrets stored in one-time-programmable fuses (OTP fuses) in the CPU [3, Chapter 1.2.3]. To prove the authenticity of the CEK, it is signed by the **AMD SEV Signing Key (ASK)**, which is in turn signed by the **AMD Root Key (ARK)**. Since the CEK is unique for each platform, the SEV API specifies a command to retrieve a unique identifier tied to the platform. While the CEK private key must remain confidential, the signed certificates of the CEK, ASK, and ARK can be obtained from AMD [4] using the platform ID provided by the SEV firmware. The CEK plays a central role in the trust model of SEV.

### 2.4 SEV: Establish Secure Channel

To establish a secure channel, both the client and the SEV firmware follow the steps depicted in Figure 2. The SEV API is accessible only via the hypervisor, so the secure channel must ensure the authenticity, integrity, and confidentiality of the communication. 

- **Deployment**: The client is the guest owner.
- **Migration**: The client is the source platform, and the SEV firmware is the target platform.

**Step 1**: The hypervisor retrieves the PDH and the PEK certificate along with a unique platform ID of the target platform. Using this ID, either the hypervisor (in case of migration) or the guest owner (during deployment) consults the AMD key server to obtain the CEK, ARK, and ASK certificates.

**Step 2**: The client verifies the certificate chain to authenticate the target platform (see Step 5 in Figure 2).

**Step 3**: The authenticated PDH is used to negotiate the master secret using a Diffie-Hellman key exchange [3, Chapter 2.2.2]. The master secret is known only by the client and the target, not by the hypervisor.

**Step 4**: Using the master secret, the client and the SEV firmware derive the **Key Encryption Key (KEK)** and the **Key Integrity Key (KIK)**. These keys are used to protect the transport keys, the **Transport Encryption Key (TEK)** and **Transport Integrity Key (TIK)**. The transport keys are encrypted using the KEK, and a MAC is generated using the KIK. This process is referred to as key wrapping [3, Chapter 2.1].

**Step 5**: The transport keys are used to ensure the integrity and confidentiality of data exchanged between the SEV firmware and outside entities.

### 2.5 SEV: Guest Deployment

This section outlines the steps required to deploy a guest VM in an SEV-enabled cloud system.

**Initialization**:
- The platform owner initializes the SEV platform.
- During initialization, the SEV firmware derives the platform-specific keys described in Section 2.3.
- The firmware establishes a chain of trust by signing the PDH with the PEK and the PEK with the CEK:
  \[
  \text{PDH} \rightarrow \text{PEK} \rightarrow \text{CEK} \rightarrow \text{ASK} \rightarrow \text{ARK}
  \]
- Optionally, a second certificate chain is established:
  \[
  \text{PDH} \rightarrow \text{PEK} \rightarrow \text{OCA}
  \]

**Deployment**:
- Before deploying a guest VM, the guest owner authenticates the remote SEV platform using the steps shown in Figure 2.
- The verification of the certificate chain ensures that the remote system is an authentic AMD system supporting SEV.

**Launching the Guest**:
- The guest owner prepares the guest VM to be executed by the cloud provider.
- The initial guest VM is sent to the hypervisor unencrypted and should not contain any confidential data.
- An additional encrypted disk image is usually included, with the encryption key provided later via the established secure channel.
- The guest owner also provides a policy defining restrictions on the actions the cloud provider can perform on the guest VM, such as migration and minimum SEV API version requirements.

**Steps**:
1. The guest owner deploys the VM, including the encrypted disk image, to the cloud provider.
2. The hypervisor launches the guest and calls the SEV firmware to encrypt the memory.
3. The SEV firmware calculates a hash of the initial plaintext VM memory.
4. The hash, together with the SEV API version and the guest policy, is protected by the secure channel and transferred to the guest owner.
5. The guest owner uses the secure channel to provide the disk encryption key to the VM.
6. The VM decrypts the disk and processes the confidential data, becoming fully operational and protected by SEV.

### 2.6 SEV: Migration and Snapshots

Virtual machine migration and snapshotting are common tasks in a cloud computing environment. Both require the export of virtual machine memory. In migration, the memory is exported to a different platform, while in snapshotting, the memory is saved on the same platform for later re-import.

**Memory Export**:
- SEV encrypts virtual machine memory using ephemeral keys that never leave the SEV firmware.
- The guest owner can impose restrictions on memory export through the guest policy, prohibiting export or defining the minimum SEV API version of the target system.

**Process**:
- The hypervisor initiates the export of the VM memory on the source platform.
- The exported memory is encrypted and integrity-protected using transport keys generated by the source SEV firmware.
- A secure channel is established between the source and target SEV firmwares (see Figure 2, variant M).
- The target platform decrypts the exported memory and re-encrypts it using a freshly generated ephemeral memory encryption key.

### 3. Firmware Analysis

The Platform Security Processor (PSP) hosts a firmware provided by AMD, implementing all SEV-related operations. Given the trust model of SEV, it is crucial that this firmware is not under the control of the platform owner but provisioned by a trusted entity, AMD.

#### 3.1 PSP Firmware Structure

By analyzing UEFI firmware updates of AMD Epyc systems, we located the PSP firmware, which consists of several components stored in an undocumented area of the UEFI firmware image. We were able to understand the proprietary filesystem and identify and extract all firmware components.

**Components**:
- **ARK Public Key**: A 2048-bit RSA public key.
- **PSP Operating System (PSP OS)**: Contains privileged ARM code, executing in the SVC mode with paging enabled.
- **SEV Firmware**: Implements the SEV API specification, executing in the unprivileged USR mode.

**PSPTool**:
- Developed to parse the proprietary filesystem and list all firmware components.
- Correlates SPI read accesses recorded with a logic analyzer with a given binary.
- Features can be found at [32].

#### 3.2 PSP Boot Security

To better understand the PSP boot process, we used a logic analyzer to record accesses to the SPI flash memory hosting the UEFI image. Based on these observations and static analysis, we inferred a boot order, as shown in Figure 4.

**Boot Order**:
- The first components loaded from flash are the ARK public key and the PSP OS.
- A delay occurs after the PSP OS is loaded before further flash reads.
- A modified ARK will result in no further flash reads.
- If the PSP OS is altered, a recovery PSP OS from a different flash location is loaded. If this recovery PSP OS is also altered, the system resets.

**Security-Relevant Components**:
- **ARK Public Key**: Stored in a format as described in [3, Appendix B.1].
- **PSP OS**: Contains privileged ARM code, responsible for system initialization and loading other firmware components.
- **SEV Firmware**: Implements the SEV API, managing key generation and policy enforcement.

### Conclusion

This document provides a comprehensive overview of the SEV technology, detailing the cryptographic keys, secure channel establishment, guest deployment, and migration processes. It also includes an analysis of the PSP firmware structure and boot security, highlighting the importance of maintaining the integrity and trust of the SEV ecosystem.