      https://example.com/messages?user_id=1231
    This is why the vulnerability is called an insecure
     direct object
     reference
    . The user’s ID is used to directly reference the user’s private messages on this site. If not secured by proper access control, these predictable
     direct object references
    expose the data hidden behind them, allowing anyone to grab the information associated with the reference.
    这就是为什么漏洞被称为不安全的直接对象引用。用户的ID被用来直接引用该站点上的用户私信。如果没有经过正确的访问控制保护，这些可预测的直接对象引用会暴露其后面的数据，允许任何人获取与引用相关联的信息。
    Applications can prevent IDORs in two ways. First, the application can check the user’s identity and permissions before granting access to a resource. For example, the application can check if the user’s session cookies correspond to the
     user_id
    whose messages the user is requesting.
    应用程序可以通过两种方式防止IDOR。首先，应用程序可以在授予对资源的访问权限之前检查用户的身份和权限。例如，应用程序可以检查用户的会话cookie是否与用户请求的消息所对应的用户ID相对应。
    Second, the website can use a unique, unpredictable key or a hashed identifier to reference each user’s resources.
     Hashing
    refers to the one-way process that transforms a value into another string. Hashing IDs with a secure algorithm and a secret key makes it difficult for attackers to guess the hashed ID strings. If
     example.com
    structured its requests as follows, attackers would no longer be able to access other users’ messages, since there would be no way for an attacker to guess such a long, random
     user_key
    value:
    其次，该网站可以使用一个唯一、难以预测的密钥或散列标识符来引用每个用户的资源。哈希是指将一个值转换为另一个字符串的单向过程。使用安全算法和秘密密钥对散列 ID 进行处理，可以使攻击者难以猜测散列的 ID 字符串。如果 example.com 将其请求结构化如下，攻击者将不再能够访问其他用户的消息，因为攻击者无法猜测出这样一个长的、随机的 user_key 值：
https://example.com/messages?user_key=6MT9EalV9F7r9pns0mK1eDAEW
    But this method isn’t a complete protection against IDORs. Attackers can still leak user information if they can find a way to steal these URLs or
     user_keys
    . The best way to protect against IDORs is fine-grained access control, or a combination of access control and randomization or hashing of IDs.
    但是这种方法并不能完全保护用户免受IDOR攻击。如果攻击者找到了窃取这些URL或用户密钥的方法，他们仍然可以泄露用户信息。防止IDOR攻击的最佳方法是精细的访问控制，或者将访问控制与ID的随机化或哈希化相结合。
    Hunting for IDORs
    Let’s hunt for some IDORs! The best way to discover IDORs is through a source code review that checks if all direct object references are protected by access control. We’ll talk about how to conduct source code reviews in
     Chapter 22
    . But if you cannot access the application’s source code, here’s a simple and effective way to test for IDORs.
    让我们寻找一些IDORs！发现IDOR的最佳方法是通过源代码审查，检查是否所有直接对象引用都受到访问控制的保护。我们将在第22章中讨论如何进行源代码审查。但是，如果您无法访问应用程序的源代码，这里有一种简单而有效的测试IDOR的方法。
    Step 1: Create Two Accounts
    First, create two different accounts on the target website. If users can have different permissions on the site, create two accounts for each permission level. For example, create two admin accounts, two regular user accounts, two group member accounts, and two non-group-member accounts. This will help you test for access control issues among similar user accounts, as well as across users with different privileges.
    首先，在目标网站创建两个不同的账户。如果用户可以在网站上获得不同的权限，请为每个权限级别创建两个帐户。例如，创建两个管理员帐户、两个普通用户帐户、两个组成员帐户和两个非组成员帐户。这将帮助您测试类似用户帐户之间以及具有不同特权的用户之间的访问控制问题。
    Continuing the previous example, you could create two accounts on
     example.com
    : user
     1235
    and user
     1236
    . One of the accounts would serve as your attacker account, used to carry out the IDOR attacks. The other would be the victim account used to observe the effects of the attack. The message pages for the two users would have the following URLS:
    在之前的例子中，你可以在example.com上创建两个帐户：用户1235和用户1236。其中一个帐户将充当攻击者帐户，用于进行IDOR攻击。另一个帐户将被用作受害者帐户，以观察攻击的影响。这两个用户的消息页面将具有以下URLS：
      https://example.com/messages?user_id=1235
     (Attacker)
      https://example.com/messages?user_id=1236
     (Victim)
    If the application doesn’t allow you to create so many accounts, you could reach out to the company and ask for more accounts. Companies will often grant you extra accounts if you explain that you’re participating in their bug bounty program. Also, if the application has paid memberships, ask the company for a premium account or pay for one yourself. Quite often, paying for these memberships is worth it, because you gain access to new features to test.
    如果应用程序不允许您创建很多帐户，您可以联系该公司并要求更多帐户。如果您解释说您正在参与他们的漏洞赏金计划，公司通常会授予您额外的帐户。另外，如果该应用程序有付费会员资格，可以要求公司提供高级帐户或自己支付。很多时候，支付这些会员资格是值得的，因为您可以获得新的测试功能的访问权限。
    In addition to testing with two accounts, you should also repeat the testing procedure without signing in. See if you can use an unauthenticated session to access the information or functionalities made available to legitimate users.
    除了使用两个账户进行测试外，您还应该在未登录的情况下重复测试程序。查看您是否可以使用未经验证的会话来访问提供给合法用户的信息或功能。
    Step 2: Discover Features
    Next, try to discover as many application features as possible. Use the highest-privileged account you own and go through the application, looking for application features to test.
    接下来，尝试尽可能多地发现应用程序的功能。使用您拥有的最高权限帐户，浏览应用程序，寻找要测试的应用程序功能。
    Pay special attention to functionalities that return user information or modify user data. Note them for future reference. Here are some features that might have IDORs on
     example.com
    :
    特别注意返回用户信息或修改用户数据的功能。将它们记录下来以备将来参考。以下是一些在 example.com 上可能存在 IDOR 的功能特性：
     This endpoint lets you read user messages:
https://example.com/messages?user_id=1236
     This one lets you read user files:
https://example.com/uploads?file=user1236-01.jpeg
     This endpoint deletes user messages:
POST /delete_message
(POST request body)
message_id=user1236-0111
     This one is for accessing group files:
https://example.com/group_files?group=group3
     This one deletes a group:
POST /delete_group
(POST request body)
group=group3
    Step 3: Capture Requests
    Browse through each application feature you mapped in the preceding step and capture all the requests going from your web client to the server. Inspect each request carefully and find the parameters that contain numbers, usernames, or IDs. Remember that you can trigger IDORs from different locations within a request, like URL parameters, form fields, filepaths, headers, and cookies.
    浏览您在先前步骤中映射的每个应用程序功能，并捕获所有从您的 Web 客户端发送到服务器的请求。仔细检查每个请求，找到包含数字、用户名或 ID 的参数。请记住，您可以从请求的不同位置触发 IDOR，例如 URL 参数、表单字段、文件路径、标头和 cookie。
    To make testing more efficient, use two browsers, and log into a different account in each. Then manipulate the requests coming from one browser to see if the change is immediately reflected on the other account. For example, let’s say you create two accounts,
     1235
    and
     1236
    . Log into
     1235
    in Firefox and
     1236
    in Chrome.
    为了使测试更有效率，使用两个浏览器，在每个浏览器中登录不同的账户。然后通过一个浏览器来操纵请求，以查看在另一个账户上是否能立即看到更改。例如，假设您创建了两个账户，1235 和 1236。在 Firefox 中登录到 1235，在 Chrome 中登录到 1236。
    Use Burp to modify the traffic coming from Firefox. Turn on Intercept in the Proxy tab and edit requests in the proxy text window (
     Figure 10-1
    ). Check if your attack has succeeded by observing the changes reflected on the victim account in Chrome.
    使用Burp修改来自Firefox 的流量。在代理选项卡中启用拦截，并在代理文本窗口（图10-1）中编辑请求。通过观察Chrome 中受害者账户反映的更改来检查攻击是否成功。
    Also, note that APIs like Representational State Transfer (REST) and GraphQL are often found to be vulnerable to IDOR too. We will talk more about hacking APIs in
     Chapter 24
    . Be on the lookout for these endpoints. You can use the recon techniques from
     Chapter 5
    to discover additional endpoints. Then follow this testing methodology to switch out IDs found in those endpoints as well.
    还要注意，Representational State Transfer（REST）和GraphQL等API通常也容易受到IDOR攻击。在第24章中，我们将详细讨论如何攻击API。请注意这些端点。您可以使用第5章的侦察技术发现其他端点，然后按照此测试方法来替换这些端点中发现的ID。
       Figure 10-1
      : Modify the request in Burp’s proxy window to switch out the IDs.
      图10-1：在Burp代理窗口中修改请求以替换ID。
    Step 4: Change the IDs
    Finally, switch the IDs in the sensitive requests and check if the information returned also changes. See if you can access the victim account’s information by using the attacker account. And check if you can modify the second user’s account from the first.
    最后，交换敏感请求中的ID，并检查返回的信息是否也发生了变化。尝试使用攻击者帐户访问受害者帐户的信息。并检查是否可以从第一个用户修改第二个用户的帐户信息。
    For example, in this setup, you can try to access the functionalities that user
     1236
    has access to via your Firefox browser:
    例如，在这个设置中，您可以通过Firefox浏览器尝试访问用户1236访问权限中的功能：
     This endpoint lets you read user messages:
https://example.com/messages?user_id=1236
     This one lets you read user files:
https://example.com/uploads?file=user1236-01.jpeg
     This endpoint deletes user messages:
POST /delete_message
(POST request body)
message_id=user1236-0111
     This one is for accessing group files:
https://example.com/group_files?group=group3
     This endpoint deletes a group:
POST /delete_group
(POST request body)
group=group3
    If any of these requests succeed in accessing or modifying user
     1236
    ’s information, you’ve found an IDOR vulnerability.
    如果任何一项请求成功访问或修改了用户1236的信息，那么你就发现了一个IDOR漏洞。
    Bypassing IDOR Protection
    IDORs aren’t always as simple as switching out a numeric ID. As applications become more functionally complex, the way they reference resources also often becomes more complex. Modern web applications have also begun implementing more protection against IDORs, and many now use more complex ID formats. This means that simple, numeric IDORs are becoming rarer. How do we bypass these obstacles and find IDORs anyway?
    IDOR攻击不仅仅是简单地切换数字ID那么简单。随着应用功能的复杂化，它们引用资源的方式也变得更加复杂。现代Web应用程序也开始实施更多的防御措施来避免IDOR攻击，许多应用程序现在使用更复杂的ID格式，因此简单的数字IDOR攻击越来越少。我们如何绕过这些障碍并找到IDOR攻击呢？
    IDORs can manifest in applications in different ways. Here are a few places to pay attention to, beyond your plain old numeric IDs.
    IDOR（间接对象引用）可以以不同的方式在应用程序中表现出来。除了普通的数值ID之外，以下是需要注意的几个地方。
    Encoded IDs and Hashed IDs
    First, don’t ignore encoded and hashed IDs. When faced with a seemingly random string, always suspect that it is encoded and try to decode it. You should also learn to recognize the most common encoding schemes, like base64, URL encoding, and base64url. For example, take a look at the IDs of this endpoint:
    首先，不要忽略编码和哈希ID。当面对看似随机的字符串时，应该怀疑它是被编码了，尝试解码它。你也应该学习认识最常见的编码方案，比如base64，URL编码和base64url。例如，看看这个端点的ID：
      https://example.com/messages?user_id=MTIzNQ
      https://example.com/messages?user_id=MTIzNg
    These
     user_id
    s are just the base64url-encoded version of a user’s ID.
     MTIzNQ
    is the base64url-encoded string of
     1235
    , and
     MTIzNg
    is the encoded version of
     1236
    . Some applications use encoding schemes that you can easily reverse. In this case, you can simply encode your false IDs by using an online base64url encoder and executing the IDOR.
    这些用户ID只是用户ID的Base64 URL编码版本。MTIzNQ是1235的Base64 URL编码字符串，而MTIzNg是1236的编码版本。一些应用程序使用易于反转的编码方案。在这种情况下，您可以使用在线的Base64 URL编码器对假ID进行编码并执行IDOR。
    You might not be able to tell which encoding scheme the site is using at first. In this case, use the Smart Decode tool (
     Figure 10-2
    ) in Burp’s decoder, or simply try to decode the string with different schemes (URL encoding, HTML encoding, hex encoding, octal encoding, base64, base64url, and so on) to figure out the encoding scheme in use. Once you gain more experience reading encoded data, you’ll develop an intuition for knowing the encoding scheme.
    一开始你可能无法确定网站所使用的编码方案。在这种情况下，请使用 Burp 的 Smart Decode 工具（图10-2），或者试着用不同的方案（URL 编码、HTML 编码、十六进制编码、八进制编码、base64、base64url 等）来解码字符串，以确定所使用的编码方案。一旦你获得了更多阅读编码数据的经验，就会发展出对编码方案的直觉。
       Figure 10-2
      : You can try to use different methods to decode a string in Burp’s decoder. Or you can use the Smart Decode tool and see if Burp can detect the encoding scheme.
      图10-2：您可以尝试使用Burp的解码器中的不同方法来解码字符串。或者您可以使用智能解码工具，看看Burp是否能够检测到编码方案。
    If the application is using a hashed or randomized ID, see if the ID is predictable. Sometimes applications use algorithms that produce insufficient entropy.
     Entropy
    is the degree of randomness of the ID. The higher the entropy of a string, the harder it is to guess. Some IDs don’t have sufficient entropy and can be predicted after careful analysis. In this case, try creating a few accounts to analyze how these IDs are created. You might be able to find a pattern that will allow you to predict IDs belonging to other users.
    如果应用程序使用哈希或随机 ID，请查看 ID 是否可预测。有时应用程序使用产生不足熵的算法。熵是 ID 的随机程度。字符串的熵越高，猜测它就越难。有些 ID 没有足够的熵，经过仔细分析就可以预测。在这种情况下，试着创建一些帐户来分析这些 ID 是如何创建的。您可能会发现一个模式，允许您预测属于其他用户的 ID。
    Leaked IDs
    It might also be possible that the application leaks IDs via another API endpoint or other public pages of the application, like the profile page of a user. I once found an API endpoint that allowed users to retrieve detailed direct messages through a hashed
     conversation_id
    value. The request looks like this:
    该应用程序可能也有可能通过另一个API端点或其他应用程序的公共页面泄露ID，比如用户的资料页面。我曾经发现一个API端点，允许用户通过哈希的conversation_id值检索详细的直接信息。请求的样子是这样的：
GET /messages?conversation_id=O1SUR7GJ43HS93VAR8xxxx
    This seems safe at first glance, since the
     conversation_id
    is a long, random, alphanumeric sequence. But I later found that anyone could request a list of
     conversation_id
    s for each user, just by using their public user ID! The following request would return a list of
     conversation_id
    s belonging to that user:
    乍一看，这似乎是安全的，因为conversation_id是一个长的，随机的，字母数字序列。但我后来发现，任何人只需使用其公共用户ID，就可以请求每个用户的会话ID列表！以下请求将返回属于该用户的会话ID列表：
GET /messages?user_id=1236
    Since the
     user_id
    is publicly available on each user’s profile page, I could read any user’s messages by first obtaining their
     user_id
    on their profile page, retrieving a list of
     conversation_id
    s belonging to that user, and finally loading the messages via their
     conversation_id
    s.
    由于每个用户的个人资料页面上都公开了 user_id，因此我可以通过首先获取其个人资料页面上的 user_id，检索属于该用户的会话 ID 列表，最后通过其会话 ID 加载消息，读取任何用户的消息。
    Offer the Application an ID, Even If It Doesn’t Ask for One
    In modern web applications, you’ll commonly encounter scenarios in which the application uses cookies instead of IDs to identify the resources a user can access.
    在现代Web应用程序中，你经常会遇到这样的情况，即应用程序使用Cookie而不是ID来识别用户可以访问的资源。
    For example, when you send the following GET request to an endpoint, the application will deduce your identity based on your session cookie, and then send you the messages associated with that user:
    例如，当您向端点发送以下GET请求时，应用程序将根据您的会话Cookie推断您的身份，然后向您发送与该用户相关联的消息：
GET /api_v1/messages
Host: example.com
Cookies: session=YOUR_SESSION_COOKIE
    Since you don’t know another user’s session cookies, you cannot use those session cookies to read their messages. This might make it seem like the application is safe from IDORs. But some applications will implement an alternative way of retrieving resources, using object IDs. They sometimes do this for the convenience of the developers, for backward compatibility, or just because developers forgot to remove a test feature.
    由于您不知道另一个用户的会话 cookie，因此您不能使用那些会话 cookie 来读取他们的消息。这可能会让应用程序看起来免于 IDORs。但是，有些应用程序将实现一种替代的检索资源的方法，使用对象 ID。他们有时这样做是为方便开发人员，为了向后兼容性，或者只是因为开发人员忘记删除测试功能。
    If no IDs exist in the application-generated request, try adding one to the request. Append
     id
     ,
     user_id