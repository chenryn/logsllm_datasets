Communication and Data Science, and Engineering Research
Center of Cyber Security Auditing and Monitoring, Ministry
of Education, China. This work was supported in part by Na-
tional Science Foundation (NSF) grants CNS-18-54000 and
CNS-18-54001. The views and conclusions contained herein
are those of the authors and should not be interpreted as nec-
essarily representing the ofﬁcial policies or endorsements,
either expressed or implied, of NSF.
References
[1] TheDarkDAO contract. https://etherscan.io/address/
0x304a554a310C7e546dfe434669C62820b7D83490, 2016.
[2] WithdrawDAO contract. https://etherscan.io/address/
0xbf4ed7b27f1d666546e30d74d50d173d20bca754, 2016.
contract.
[3] ChooseWHGReturnAddress
https://etherscan.io/address/
0x3abe5285ED57c8b028D62D30c456cA9eb3E74105, 2017.
[4] Ethereum known attacks.
https://consensys.github.
io/smart-contract-best-practices/known_attacks/,
2017.
[5] Manticore.
manticore, 2017.
https://github.com/trailofbits/
[6] Parity wallet multi-sig library vulnerability. https://www.
parity.io/security-alert-2/, 2017.
[7] Analyzing the ﬁrst token harvest event in blockchain. https:
//paper.seebug.org/646/, 2018.
[8] FoMo3Dlong contract. https://etherscan.io/address/
0xa62142888aba8370742be823c1782d17a0389da1, 2018.
[9] Mythril. https://github.com/ConsenSys/mythril, 2018.
[10] A redundant SafeMath implementation to make your con-
https://blog.peckshield.com/2018/08/
tract unsafe!
14/unsafemath/, 2018.
[11] CoinGecko. https://www.coingecko.com, 2019.
[12] Ethereum in bigquery: a public dataset for smart contract
analytics. https://cloud.google.com/blog/products/
data-analytics/ethereum-bigquery-public-dataset-
smart-contract-analytics, 2019.
[13] Etherscan. https://etherscan.io, 2019.
[14] Fleiss’ kappa. https://en.wikipedia.org/wiki/Fleiss%
27_kappa, 2019.
[15] Fuzzing.
https://en.wikipedia.org/wiki/Fuzzing,
2019.
[16] HoneyBadger
dataset.
https://github.com/
christoftorres/HoneyBadger/tree/master/results/
evaluation, 2019.
[17] LLVM IR.
https://llvm.org/docs/LangRef.html#
introduction, 2019.
[18] OpenZeppelin contracts is a library for secure smart con-
tract development. https://github.com/OpenZeppelin/
openzeppelin-contracts, 2019.
[19] Replay attack.
https://en.wikipedia.org/wiki/
Replay_attack, 2019.
[20] Solidity
programming
language:
Error
handling.
https://solidity.readthedocs.io/en/v0.5.11/
control-structures.html?highlight=require#error-
handling-assert-require-revert-and-exceptions,
2019.
[21] Karthikeyan Bhargavan, Antoine Delignat-Lavaud, Cédric
Fournet, Anitha Gollamudi, Georges Gonthier, Nadim Kobeissi,
Natalia Kulatova, Aseem Rastogi, Thomas Sibut-Pinote, Nikhil
Swamy, et al. Formal veriﬁcation of smart contracts: Short
paper.
In Proceedings of the 2016 ACM Workshop on
Programming Languages and Analysis for Security, 2016.
[22] Lorenz Breindenbach, Phil Daian, Florian Tramèr, and Ari
Juels. Enter the hydra: Towards principled bug bounties
In 27th {USENIX}
and exploit-resistant smart contracts.
Security Symposium ({USENIX} Security 18), pages 1335–
1352, 2018.
[23] Lexi Brent, Anton Jurisevic, Michael Kong, Eric Liu, Francois
Gauthier, Vincent Gramoli, Ralph Holz, and Bernhard Scholz.
Vandal: A scalable security analysis framework for smart con-
tracts. arXiv preprint arXiv:1809.03981, 2018.
[24] Vitalik Buterin. DAO fork. https://blog.ethereum.org/
2016/07/20/hard-fork-completed/, 2016.
[25] Ting Chen, Xiaoqi Li, Xiapu Luo, and Xiaosong Zhang. Under-
optimized smart contracts devour your money.
In 2017
IEEE 24th International Conference on Software Analysis,
Evolution and Reengineering (SANER), 2017.
USENIX Association
29th USENIX Security Symposium    2807
[40] Christof Ferreira Torres and Mathis Steichen. The art of the
scam: Demystifying honeypots in ethereum smart contracts. In
28th USENIX Security Symposium (USENIX Security’19),
2019.
[41] Petar Tsankov, Andrei Dan, Dana Drachsler-Cohen, Arthur
Gervais, Florian Buenzli, and Martin Vechev. Securify: Prac-
tical security analysis of smart contracts.
In Proceedings
of the 2018 ACM SIGSAC Conference on Computer and
Communications Security (CCS’18), 2018.
[42] Peter Vessenes. Deconstructing TheDAO attack: A brief code
tour. https://vessenes.com/deconstructing-thedao-
attack-a-brief-code-tour/, 2016.
[43] Yi Zhou, Deepak Kumar, Surya Bakshi, Joshua Mason, An-
drew Miller, and Michael Bailey. Erays: reverse engineering
ethereum’s opaque smart contracts. In 27th USENIX Security
Symposium (USENIX Security’18), 2018.
[26] Kevin Delmolino, Mitchell Arnett, Ahmed Kosba, Andrew
Miller, and Elaine Shi. Step by step towards creating a safe
smart contract: Lessons and insights from a cryptocurrency
lab. In International Conference on Financial Cryptography
and Data Security, pages 79–94. Springer, 2016.
[27] Neville Grech, Michael Kong, Anton Jurisevic, Lexi Brent,
Bernhard Scholz, and Yannis Smaragdakis.
Madmax:
Surviving out-of-gas conditions in ethereum smart con-
tracts.
The ACM SIGPLAN conference on Systems,
Programming, Languages and Applications: Software for
Humanity (OOPSLA’18), 2018.
[28] Bo Jiang, Ye Liu, and WK Chan. Contractfuzzer: Fuzzing
smart contracts for vulnerability detection. In Proceedings of
the 33rd ACM/IEEE International Conference on Automated
Software Engineering (ASE’18), 2018.
[29] Sukrit Kalra, Seep Goel, Mohan Dhawan, and Subodh Sharma.
Zeus: Analyzing safety of smart contracts.
In 25th
Annual Network and Distributed System Security Symposium
(NDSS’18), 2018.
[30] Johannes Krupp and Christian Rossow. teether: Gnawing at
ethereum to automatically exploit smart contracts.
In 27th
USENIX Security Symposium (USENIX Security’18), 2018.
[31] Loi Luu, Duc-Hiep Chu, Hrishi Olickel, Prateek Saxena,
and Aquinas Hobor. Making smart contracts smarter.
In
Proceedings of the 2016 ACM SIGSAC Conference on
Computer and Communications Security (CCS’16), 2016.
[32] Bernhard Mueller. Smashing ethereum smart contracts for
fun and real proﬁt. In 9th Annual HITB Security Conference
(HITBSecConf), 2018.
[33] Ivica Nikoli´c, Aashish Kolluri, Ilya Sergey, Prateek Saxena, and
Aquinas Hobor. Finding the greedy, prodigal, and suicidal con-
tracts at scale. In Proceedings of the 34th Annual Computer
Security Applications Conference (ACSAC’18), 2018.
[34] Santiago Palladino.
The parity wallet hack explained.
https://blog.openzeppelin.com/on-the-parity-
wallet-multisig-hack-405a8c12e8f7/, 2017.
[35] Daniel Perez and Benjamin Livshits. Smart contract vulnera-
bilities: Does anyone care? arXiv preprint arXiv:1902.06710,
2019.
[36] Michael Rodler, Wenting Li, Ghassan O Karame, and Lucas
Davi. Sereum: Protecting existing smart contracts against
re-entrancy attacks. In 26th Annual Network and Distributed
System Security Symposium (NDSS’19), 2019.
[37] Alex Sherbachev. Hacking the hackers: Honeypots on
https://hackernoon.com/hacking-
ethereum network.
the-hackers-honeypots-on-ethereum-network-
5baa35a13577, 2018.
[38] Alex Sherbuck.
Dissecting an ethereum honeypot.
https://medium.com/coinmonks/dissecting-an-
ethereum-honey-pot-7102d7def5e0, 2018.
[39] Sergei Tikhomirov, Ekaterina Voskresenskaya, Ivan Ivanitskiy,
Ramil Takhaviev, Evgeny Marchenko, and Yaroslav Alexan-
drov. Smartcheck: Static analysis of ethereum smart con-
tracts.
In 2018 IEEE/ACM 1st International Workshop on
Emerging Trends in Software Engineering for Blockchain
(WETSEB’18), 2018.
2808    29th USENIX Security Symposium
USENIX Association
A Zero-day Vulnerable Contract Examples
In the appendix, we describe several example zero-day vul-
nerable contracts in each attack category.
A.1 Zero-day Reentrancy Contract
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
contract InstaDice {
function payoutPreviousRoll ()
public
returns (bool _success ) {
...
_finalizePreviousRoll ( _user , _stats );
stats . totalWon = _stats . totalWon ;
...
}
function _finalizePreviousRoll ( User memory
_user , Stats memory _stats )
private {
...
require(msg. sender . call . value ( _user .
r_payout ) () );
_stats . totalWon += _user . r_payout ;
...
}
}
Figure 9: A zero-day reentrancy contract.
We show the source code of one zero-day reentrancy in Fig-
ure 9. The vulnerability is located at Line 13, which has to be
triggered through a cross-function call from public interface
payoutPreviousRoll to private _finalizePreviousRoll.
Therefore, neither Oyente and ZEUS can detect this cross-
function vulnerability. At the same time, the state update is
via a membership variable of the function parameter _stats
at Line 14. Therefore, Securify and Mythril cannot detect the
vulnerability.
A.2 Zero-day Integer Overﬂow Contract
We show the source code of one zero-day integer overﬂow
in Figure 10. The vulnerability is located at Line 6. The con-
tract adopts a vulnerable multiplication operation at Line 6,
regardless the deployments of Sa f eMath functions in Line 10
and Line 12. Mythril and ZEUS fail to ﬁnd the vulnerabil-
ity because their analysis cannot reach the batchTransfer
function.
A.3 Zero-day Honeypot Contract
Figure 11 shows a new class of honeypots which attract
users to deposit ethers and then refund them. The contract only
leaves a one-minute time window for withdrawing, which is
hard to satisfy due to the inaccurate timestamp determined by
miners. We observed that the contract owner withdrew all the
ethers at 7:50 in October, 2011.
B A List of Function Signatures
In this section, we list all the function signatures used by our
result analysis of identifying token transfers in Table 9.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
1
2
3
4
5
6
7
8
9
10
11
12
13
14
contract PausableToken is StandardToken ,
Pausable {
function batchTransfer (address[]
_receivers , uint256 _value )
public whenNotPaused
returns (bool) {
uint cnt = _receivers . length ;
uint256 amount = uint256( cnt ) * _value
;
require( cnt > 0 && cnt  0 && balances [msg.
sender ] >= amount );
balances [msg. sender ] = balances [msg.
sender ]. sub ( amount );
for ( uint i = 0; i = refundTime && now = ownerTime );
if(owner. send (this. balance )){
suicide (owner);
}
}
}
Figure 11: A zero-day honeypot contract.
Table 9: Sensitive functions related to each result type.
Result Type
Sensitive Function
Signature
token_transfer
owner_change
transfer(address,uint256)
transferFrom(address,address,uint256)
transferMulti(address[],uint256[])
transferProxy(address,address,uint256,
uint256,uint8,bytes32,bytes32)
batchTransfer(address[],uint256)
batchTransfers(address[],uint256[])
multiTransfer(address[],uint256[]
setOwner(address)
initWallet(address[],uint256,uint256)
transferOwnership(address)
changeOwner(address)
addOwner(address)
0xa9059cbb
0x23b872dd
0x35bce6e4
0xeb502d45
0x83f12fec
0x3badca25
0x1e89d545
0x13af4035
0xe46dcfeb
0xf2fde38b
0xa6f9dae1
0x7065cb48
USENIX Association
29th USENIX Security Symposium    2809