The  requirement  for  the  detection  of  missing  or
corrupt data can similarly be addressed using various
architectural  mechanisms. A  number  of  different  sys-
tem modules could take action when data is missing,
and data defects could be signaled by a data collection
module  by  generating  an  event,  by  a  time-out,  or  by
using  special  coded  data  values.  Feasibility  is  an
important criterion in this aspect of selection because
there has to be a high-level of assurance that defective
data will be detected within the specified time limit.
The experience of the authors leads us to select a
sequential  code  implementation  with  each  software
module responsible for detecting and reporting errors
in the data it handles. While this choice is somewhat
arbitrary,  we  note  that  in  a  complete  application  of
ABD  developers  will  balance  the  perceived  risk  of
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:49:24 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007 
C1
RSM system 
context
G1
Detect runway incursions (see requirement 1) 
or report failure (see requirement 2)
C2
RSM system 
requirements
ST1
RSM requirements met by the 
conjunction of separated concerns
G2
RSM functionality is 
implemented with required 
dependability
G3
RSM timing is 
implemented with 
required dependability
G4
RSM data inadequacy 
detection is implemented 
with required dependability
G5
Functionality, timing, and 
error detection assurance 
are independent
Figure 3. Assurance case after first choice
making  (and  thus  having  to  redress)  a  poor  choice
against the time required to more thoroughly enumer-
ate and evaluate alternatives.
Choosing  sequential  code  with  distributed  error
detection  allows  us  to  divide  the  top-level  goal  into
three concerns and address each of these independently
as shown in Figure 3. An important item in this frag-
ment is goal G5. Without careful attention, developers
might  supply  arguments  for  the  satisfaction  of  goals
G2, G3, and G4 that do not, together, imply the satis-
faction of goal G1. If, for example, testing is used to
show low probabilities that the RSM will fail to pro-
vide the required functionality (goal G2) or fail to meet
its timing requirements (goal G3), then the selection of
test cases will affect the way in which the probabilities
are combined to justify meeting requirement 1 in goal
G1.  Goal  G5  obliges  the  developer  to  carefully  con-
sider whether the manner in which the other goals are
satisfied justifies concluding that G1 has been satisfied,
and so acts as a reminder to the developer to consider
an important but subtle consideration that could easily
be missed if the assurance case were not used as guid-
ance.
4.4. The second system development choice
The first choice generated four subgoals, each ini-
tially unaddressed as indicated by the diamond-shaped
decoration. In a complete application of ABD all four
would be addressed in an order chosen to minimize the
risk of needing to readdress a choice. For purposes of
illustration,  we  continue  our  example  by  addressing
RSM failure detection (goal G4 in Figure 3).
There  are  many  available  candidate  choices,
including several architectural patterns, an object-ori-
ented  architecture,  and  functional  decomposition. We
selected functional decomposition because it facilitates
the  use  of  some  forms  of  static  analysis  including
determination  of  worst-case  execution  time.  Our
decomposition, recorded in architectural diagram form
in Figure 4, contains the following six modules:
•
the 
,  which  determines
whether ownship is presently using a runway, and,
if so, builds a model of that runway;
the 
,  which  stores  the  location
and necessary geometric details of all of the run-
ways for which RSM service will be available;
ownship  runway  locator
runway  database
•
P
h
y
s
c
a
i
l
w
o
r
l
d
s
e
n
s
o
r
s
L
o
c
a
t
i
o
n
ADS-B transceiver
IDS
RSM
Runway database
Traffic positions
ff
Ownship runway locator
Runway model
Ownship position
Conflict detector
OWNSHIP AIRCRAFT
Figure 4. Functional decomposition of the RSM
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:49:24 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007•
•
•
•
  runway  model
conflict detector
  traffic  positions
ownship  position 
,  which  stores  the  geometry  of
the
the runway including the incursion zone’s bounds;
the 
component,  which  collects
information about the position of the aircraft from
the aircraft’s ground location system;
the 
, which is invoked if the air-
craft is found to be using a runway, and determines
whether  ownship  is  in  conflict  with  any  other
monitored  traffic  within  that  runway’s  incursion
zone; and
the
  component,  which  collects
information  about  the  position  of  other  traffic
within a specified region from ADS-B broadcasts.
Part of the assurance case fragment that accompa-
nies this system development choice is shown in Fig-
ure  5.  It  details  the  failure  detection  responsibility
allocated to each of the new components listed above
and how these responsibilities, if satisfied, demonstrate
the satisfaction of sub-goal G4. Note the context bub-
ble C3, which clarifies strategy ST2 by describing the
functional decomposition we have selected. This clari-
fication  has  the  effect  of  linking  the  assurance-case
fragment shown in Figure 5 to the development artifact
in which the choice was recorded.
show how the system meets its timing requirements by
linking several forms of evidence, including evidence
showing that various modules will execute within set
time bounds. Functional decomposition as the system
development choice for goals G2, G3, and G4 eases the
task  of  determining  worst-case  execution 
time
(WCET) for the system. WCET is not easy to establish
with any architecture and can be essentially impossible
with  some  modern  processors.  However,  assurance
over  timing  is  essential,  and  that  makes  many  other
candidate architectural choices unacceptable.
Turning now to the other selection criteria, we ask
ourselves whether, given this choice, it is likely that the
system can be built within the specified budget, sched-
ule,  technology  constraints,  etc.  Since  not  even  the
architecture  is  yet  complete,  our  assessment  must  be
speculative. Given our experience, knowledge, and the
system as proposed, it seems likely that we will be able
to  find  acceptable  ways  to  satisfy  the  as-yet  unad-
dressed subgoals, and so we accept this choice for now.
4.5. The third system development choice
The  application  of  the  assurance  case  fragments
associated with our choice of functional decomposition
has, at this point, satisfied goals G2, G3, and G4 from
Figure 3, thus removing their diamond-shaped decora-
tions. Goal G5 and the new subgoals introduced by our
choice remain unsatisfied. We continue our illustration
Although not shown, the arguments for goals G2
and G3 in Figure 3 are similar to that for goal G4. The
argument for goal G2 would show how responsibility
for  the  RSM’s  functionality  is  partitioned  across  the
system’s modules, and the argument for goal G3 would
G4
RSM data inadequacy detection is 
implemented with required dependability
C3
RSM system 
architecture
ST2
Functional decomposition
G4.1
Ownship runway locator reports 
failure with p>=p2 if quality of 
information is inaccurate
G4.2
Conflict detector reports failure 
with p>=p3 if quality of 
information is inadequate
G4.3
RSM detects and reports 
failures in called 
functions with p>=p4
G4.4
Ownship runway 
locator detects & 
reports failures in 
itself and in 
called functions 
with p>=p5
G4.5
Runway
database
reports failure 
with p>=p6 if 
it can't locate 
the runway
G4.6
Ownship position 
component reports 
failure with p>=p7
if quality of 
information is 
inadequate
G4.7
Runway model 
reports failure 
with p>=p8 if 
quality of 
information is 
inadequate
G4.8
Traffic positions 
component reports 
failure with p>=9 if 
quality of 
information is 
inadequate
G4.9
Conflict detector 
detects and 
reports failures 
in itself and in 
called functions 
with p>=p10
Figure 5. Assurance case fragment from second choice
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:49:24 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007 
G4.8
Traffic positions component reports failure with 
p>=p9 if quality of information is inadequate
C4
Reasonableness
constraints for 
traffic position data
ST3
Reasonableness constraints used to 
identify faulty data, error detection 
used to identify faulty transmission
C5
ADS-B error 
detection
protocol
G4.8.1
Data errors not caught by 
reasonableness checks 
occur with p<=p11
G4.8.2
Transmission errors not 
caught by error detection 
protocol occur with p<=p12
G4.8.3
Probability of uncaught 
data and transmission 
errors are uncorrelated