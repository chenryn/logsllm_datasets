### Detection and Handling of Missing or Corrupt Data

The requirement for detecting missing or corrupt data can be addressed through various architectural mechanisms. Multiple system modules can take action when data is missing, and data defects can be signaled by a data collection module in several ways: by generating an event, through a time-out, or by using special coded data values. Feasibility is a crucial criterion in this aspect of selection, as there must be a high level of assurance that defective data will be detected within the specified time limit.

Based on our experience, we have selected a sequential code implementation where each software module is responsible for detecting and reporting errors in the data it handles. While this choice is somewhat arbitrary, in a complete application of ABD, developers will balance the perceived risk of making (and thus having to redress) a poor choice against the time required to more thoroughly enumerate and evaluate alternatives.

### Sequential Code with Distributed Error Detection

Choosing sequential code with distributed error detection allows us to divide the top-level goal into three concerns, addressing each independently as shown in Figure 3. An important item in this fragment is goal G5. Without careful attention, developers might supply arguments for the satisfaction of goals G2, G3, and G4 that do not, together, imply the satisfaction of goal G1. For example, if testing is used to show low probabilities that the RSM will fail to provide the required functionality (goal G2) or meet its timing requirements (goal G3), the selection of test cases will affect how these probabilities are combined to justify meeting requirement 1 in goal G1. Goal G5 obliges the developer to carefully consider whether the manner in which the other goals are satisfied justifies concluding that G1 has been satisfied, acting as a reminder to the developer to consider an important but subtle consideration that could easily be missed without the guidance of the assurance case.

### Second System Development Choice

The first choice generated four subgoals, each initially unaddressed as indicated by the diamond-shaped decoration. In a complete application of ABD, all four would be addressed in an order chosen to minimize the risk of needing to readdress a choice. For illustration, we continue our example by addressing RSM failure detection (goal G4 in Figure 3).

There are many available candidate choices, including several architectural patterns, an object-oriented architecture, and functional decomposition. We selected functional decomposition because it facilitates the use of some forms of static analysis, including the determination of worst-case execution time. Our decomposition, recorded in architectural diagram form in Figure 4, contains the following six modules:

- **Ownship Runway Locator**: Determines whether ownship is presently using a runway and, if so, builds a model of that runway.
- **Runway Database**: Stores the location and necessary geometric details of all runways for which RSM service will be available.
- **Runway Model**: Stores the geometry of the runway, including the incursion zone’s bounds.
- **Physical World Sensors**: Collects information about the position of the aircraft from the aircraft’s ground location system.
- **Conflict Detector**: Invoked if the aircraft is found to be using a runway, and determines whether ownship is in conflict with any other monitored traffic within that runway’s incursion zone.
- **Traffic Positions Component**: Collects information about the position of other traffic within a specified region from ADS-B broadcasts.

Part of the assurance case fragment accompanying this system development choice is shown in Figure 5. It details the failure detection responsibility allocated to each of the new components listed above and how these responsibilities, if satisfied, demonstrate the satisfaction of sub-goal G4. Note the context bubble C3, which clarifies strategy ST2 by describing the functional decomposition we have selected. This clarification links the assurance-case fragment shown in Figure 5 to the development artifact in which the choice was recorded.

### Timing Requirements and Assurance

Functional decomposition as the system development choice for goals G2, G3, and G4 eases the task of determining worst-case execution time (WCET) for the system. WCET is not easy to establish with any architecture and can be essentially impossible with some modern processors. However, assurance over timing is essential, making many other candidate architectural choices unacceptable.

Turning to the other selection criteria, we assess whether, given this choice, it is likely that the system can be built within the specified budget, schedule, technology constraints, etc. Since even the architecture is not yet complete, our assessment must be speculative. Given our experience, knowledge, and the system as proposed, it seems likely that we will be able to find acceptable ways to satisfy the as-yet unaddressed subgoals, and so we accept this choice for now.

### Third System Development Choice

At this point, the application of the assurance case fragments associated with our choice of functional decomposition has satisfied goals G2, G3, and G4 from Figure 3, removing their diamond-shaped decorations. Goal G5 and the new subgoals introduced by our choice remain unsatisfied. We continue our illustration by addressing these remaining goals.

Although not shown, the arguments for goals G2 and G3 in Figure 3 are similar to that for goal G4. The argument for goal G2 would show how responsibility for the RSM’s functionality is partitioned across the system’s modules, and the argument for goal G3 would show how the system meets its timing requirements by linking several forms of evidence, including evidence showing that various modules will execute within set time bounds.

### Assurance Case Fragment for Traffic Position Data

Figure 5 shows part of the assurance case fragment from the second choice, detailing the failure detection responsibility allocated to each of the new components and how these responsibilities, if satisfied, demonstrate the satisfaction of sub-goal G4. Context bubble C4 clarifies the reasonableness constraints for traffic position data, and strategy ST3 describes how reasonableness constraints are used to identify faulty data, and error detection is used to identify faulty transmission. This further breaks down into sub-goals G4.8.1, G4.8.2, and G4.8.3, which address the probability of uncaught data and transmission errors.

By carefully considering and addressing these sub-goals, we ensure that the system meets its dependability requirements, providing a robust and reliable solution.