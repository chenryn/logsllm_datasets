the deployed Vanish client to insert key shares into the DHT
from a distant network location. These served as targets for
our Sybils.
Effective Sybils Target values Targets found Coverage (s) Bandwidth in (bin) / out (bout)
320,000
270,000
80,000
1650
1700
1650
99.4%
99.5%
91.8%
0.0030%
0.0032%
0.0036%
15.7 B/s
13.3 B/s
15.8 B/s
0.589 B/s
0.524 B/s
0.625 B/s
Average per effective Sybil
Table 1. ClearView experimental results. We conducted three trial attacks with our ClearView imple-
mentation. Over periods of around 8 hours, Sybils “hopped” to new node IDs every three minutes,
yielding 320k, 270k, and 80k effective Sybils. On average, each effective Sybil observed s = 0.0033%
of the DHT. Larger trials had slightly worse per-Sybil coverage, possibly due to network congestion.
We ran three trials with different numbers of effec-
tive Sybils, as summarized in Table 1. In all three trials,
ClearView ran on a number of “small” EC2 instances and
used a three minute hop time. The ﬁrst trial used 10 EC2 in-
stances, each supporting 200 concurrent Sybils over 8 hours,
for a total of 320k effective Sybils; there were 1650 target
key shares, and we recovered 1640 of them (99.4%). The
second trial used 9 EC2 instances, each supporting 200 con-
current Sybils over 7.5 hours, for a total of 270k effective
Sybils; there were 1700 target key shares, and we recovered
1692 of them (99.5%). The third trial used 10 EC2 instances,
each supporting 50 concurrent Sybils over 8 hours, for a total
of 80k effective Sybils; there were 1650 target key shares,
and we recovered 1561 of them (91.8%).
These results allow us to estimate the fraction of DHT
values that could be observed with different numbers of effec-
tive Sybils. We calculate how many of the target values were
observed by different size subsets of our effective Sybils.
Figure 2 shows the results, based on data from the 270k trial.
As we explain below, we can accurately model the DHT
coverage we achieve using only a single parameter, s, the
fraction of the DHT observed by each effective Sybil. For
our 320k effective Sybil trial, each Sybil observed 0.050
target values on average, yielding average per-Sybil coverage
s = 0.000030. For our 270k effective Sybil trial, each Sybils
observed 0.055 target values on average, yielding average
per-Sybil coverage s = 0.000032. For the 80k effective Sybil
trial, each Sybils observed 0.059 target values on average,
yielding average per-Sybil coverage s = 0.000036.
An analytic model The shape of the curve plotting DHT
coverage can be explained using a simple combinatorial
model. If we make the approximation that each Sybil sees
some fraction of the network uniformly at random, then we
can use a random process to model the number of unique
objects seen by a collection of Sybils.
In this case, the process is equivalent to the balls-into-bins
problem. If each Sybil sees on average c objects from the
network and there are m Sybils, then the Sybils together will
have collected cm objects. However, once cm is no longer
small with respect to the total number of objects N in the
network, the Sybils will be very likely to collect repeats of
objects and it will be more difﬁcult to discover new objects.
This process is equivalent to throwing cm balls into N bins
and asking how many bins contain at least one ball; that is,
how many objects were seen by at least one Sybil.
The analysis of this problem is standard; see, e.g. [31,
Ch. 5.3]. The expected fraction of DHT objects observed
by m Sybils is 1 − e−cm/N . Let s be the fraction of the
entire DHT observed by each Sybil, that is, s = c
N . We can
rewrite the expected fraction of DHT objects observed by an
m-Sybil attack in terms of this parameter:
E[DHT objects observed] = 1 − e−ms.
Figure 2 illustrates this model’s close correspondence
with our experimental results. The model slightly overesti-
mates actual performance due to the simplifying assumption
that each Sybil observes an equal number of fragments.
We can use this model of DHT coverage, and the cal-
culation of VDO recovery in terms of key share recovery
from Figure 1, to estimate the fractions of VDOs that we
would recover with different size attacks. Figure 3 shows
the results using data from our 270k effective Sybil trial. For
the default Vanish secret sharing parameters of k = 7 and
n = 10, we would need 26k effective Sybils to recover 25%
of VDOs, 59k to recover 90%, and 89k to recover 99%. For
secret sharing parameters of k = 9 and n = 10, we would
need 48k effective Sybils to recover 25% of VDOs, 115k
to recover 90%, and 186k to recover 99%. For the Vanish
paper’s conservative secret sharing parameters of k = 45
and n = 50, we would need 70k effective Sybils to recover
25% of VDOs, 107k to recover 90%, and 136k to recover
99%.
Machine and network costs Based on these approxima-
tions and the costs of running our full experiment, we can
extrapolate the costs of longer attacks targeting various frac-
tions of VDOs. The dominant costs are those of machines
Figure 2. DHT coverage vs. attack size. This graph shows the fraction of values stored in the DHT
that we would have collected using different numbers of effective Sybils. We derived these results
by running ClearView for 8 hours to collect data from 270k node IDs and computing the average
coverage for different size subsets. The data closely correspond to a simple model based on the
average coverage per effective Sybil, s.
Figure 3. VDO recovery vs. attack size. This graph shows the fraction of VDOs that we would be
able to decrypt using key shares collected with different numbers of effective Sybils, based on data
from the previous ﬁgure. The curves correspond to three pairs of secret sharing parameters k/n.
0%20%40%60%80%100%030k60k90k120k150k180k210k240k270kDHT CoverageEffective SybilsExperimentModel80%100%ry20%40%60%VDO Recover7/109/1045/500%20%030k60k90k120k150k180k210k240k270kEffective SybilsFigure 4. Attack cost vs. VDO recovery. Here we plot the costs of using our ClearView attack
implementation to recover different fractions of VDOs, based on data from the previous ﬁgures.
These estimates include the cost of EC2 network transfer as well as the coarse-grained cost of
adding machine instances (which results in the discontinuities). The curves correspond to three
pairs of secret sharing parameters k/n.
and network transfer. Each effective Sybil needs a unique
IP address and port combination. An EC2 instance can only
use a single IP address, so the attacker needs one instance
for every 65535 effective Sybils. (ClearView easily support
this number on even a “small” instance.) Each instance costs
about $500/year with reserved pricing.
Network transfer is the dominant cost for most attack
parameter choices. We can estimate the transfer costs based
on the average bandwidth used by each Sybil. EC2 prices
inbound and outbound transfers differently, so we report
averages for both directions. During our 8-hour trial period
running 320k effective Sybils, ClearView transferred 145 GB
in and 5.5 GB out, for an average bandwidth per effective
Sybil of 15.7 B/s in and 0.589 B/s out. Our other trials
produced similar results, indicating that the network transfer
cost of running an attack for one year would be $52.80–
$54.80 per thousand effective Sybils.
Figure 4 estimates the cost of EC2 instances and transfer
for year-long attacks aiming to recover various fractions of
VDOs. For the default Vanish secret sharing parameters of
k = 7 and n = 10, recovering 25% of VDOs would cost
about $1950 per year, 90% would cost about $3750, and
99% would cost about $5900. For secret sharing parameters
of k = 9 and n = 10, recovering 25% of VDOs would
cost about $3150 per year, 90% would cost about $7350,
and 99% would cost about $11,950. For the Vanish paper’s
conservative secret sharing parameters of k = 45 and n = 50,
recovering 25% of VDOs would cost about $4850 per year,
recovering 90% would cost about $6900, and recovering
99% would cost about $9000.
Storage costs To carry out an ongoing attack, the adver-
sary needs to store the DHT values he collects. We attempted
to quantify the costs of this storage by measuring the data
collected by our Sybils.
Table 2 shows the average number of values and bytes
that were recorded by each Sybil during an 8-hour experi-
mental window. We omit STOREs for empty values, since
they represent key deletion in the DHT. Most of the values
are related to Vuze’s BitTorrent tracking functions. Bencod-
ing [12] is a simple serialization format that is part of the
BitTorrent protocol, and peer records are the human-readable
values inserted into the DHT to record the presence of peers
for DHT-tracked torrents.
To obtain 94% coverage, the attacker would have to run
128,000 effective Sybils over each 8-hour period. Recording
every key-value pair for a one-year period would require
$10,000$12,000$14,000Cost$4,000$6,000$8,000Annual Attack C7/109/10$0$2,0000%20%40%60%80%100%VDO Recovery45/50Category
Peer record
Bencoded
Other
Total
Potential Vanish key share
Values (per 8 Sybil-hours) Bytes (per 8 Sybil-hours)
4000
31,000
5000
40,000
1700
850
330
220
1400
95
Table 2. Observed stored values. These ﬁgures represent the average number of values and bytes
observed by each Sybil during an 8-hour window, without removing duplicates. Currently, Vanish
key shares always occupy 16–51 bytes, so an attacker would only need to retain these values.
about 9.5 TB of storage and cost about $1400 (using Amazon
S3 pricing [3]).
As mentioned earlier, the attacker can greatly reduce the
cost by storing only values that are possible key shares in the
current Vanish implementation—those with lengths between
16 and 51 bytes, inclusive. We estimate that this would
amount to less than 510 GB per year and cost under $80.
Further savings could be achieved by discarding duplicate
stores, though this would require additional post processing.
5. Discussion
Researchers often discover vulnerabilities in systems pro-
posed by other researchers, and the process of learning from
these problems has produced fruitful advances. Examples in-
clude the development of the Tor anonymous communication
system [4, 15, 32–35] and Off-the-Record Messaging [7, 36].
In this section, we discuss problems in the Vanish design
and in the Vanish paper’s security analysis, and we attempt
to draw lessons for future systems.
5.1. Problems with the Vanish Security Analysis
The Vanish paper includes a security analysis that ex-
plicitly considers the threat from Sybil attacks against the
Vuze DHT. We have shown that the paper’s cost estimate—
$860,000 for a year-long attack—is two orders of magnitude
higher than the cost of our attacks. We now examine how the
Vanish paper arrives at this ﬁgure, and where the analysis
goes wrong.
The Vanish paper estimates the number of Sybils required
to compromise 25% of VDOs. Rather than experimenting
with the public Vuze network, the authors used their own
private deployment consisting of 8000 Vuze DHT clients.
For secret sharing parameters of k = 45 and n = 50, they
found that an attacker would need 820 Sybils. Extrapolating
this ﬁgure, they determined that attacking a network with
1M clients would require 87,000 Sybils.
This approach—simulating a much smaller network and
extrapolating—introduces considerable uncertainty and over-
estimates the actual difﬁculty. Our experiments show that
our attacks require roughly 70,000 effective Sybils to com-
promise 25% of VDOs under these parameters.
There are two problems with the 87,000 Sybil estimate.
The ﬁrst is that it assumes the Sybils need to run continuously.
As we have shown with our hopping attack strategy, each
Sybil can run for as little as 3 minutes in each 8 hour period,
with little loss in coverage. Thus, only 544 Sybils need to
run concurrently to achieve the same effect as 87,000 Sybils
running continuously.
The second problem is that estimating the work needed
to recover 25% of VDOs provides only a lower bound on the
Sybils needed to recover greater fractions. Readers might
infer that recovering 90% would take many times more effort.
In fact, as we illustrate in Figure 1, the fraction of the DHT
that the attacker needs to observe increases only slightly,
from 86% to 93%. Our experiments show that, under these
parameters, we can compromise 90% of VDOs with 107,000
effective Sybils—only 53% more than are needed to com-
promise 25% of VDOs.
Based on their estimate that the attacker would need
87,000 Sybils, the Vanish authors calculate that a year-long
attack using EC2 would cost at least $860,000 for “process-
ing and Internet trafﬁc alone.” This ﬁgure is not entirely
explained. One clue comes from the design of their exper-
iments, which were conducted in part on EC2. They used
the ofﬁcial Vuze DHT client, which is written in Java and
has high CPU and memory footprints. They found that the
limiting resource was memory—50 nodes would ﬁt in 2 GB
of RAM. If we round up the memory available in a small
EC2 instance to 2 GB (it is actually 1.7 GB) and assume
reserved instance pricing, operating 87,000 nodes would cost
$854,000 a year for machine time, which the Vanish authors
may have rounded up to arrive at their ﬁgure.
One problem with this estimate is that an actual attacker
can write a much more efﬁcient Vuze client, as we show with
our ClearView implementation. With our optimized client,
we can support thousands of concurrent Sybils in a single
small EC2 instance. Network transfer is the limiting cost,
not memory or CPU. Another problem is that the amount of
trafﬁc used for the attack is very difﬁcult to estimate without
participating in the real network. It depends on empirical
factors like the amount of routing trafﬁc and the rate of
stores. This adds further uncertainty to the Vanish paper’s