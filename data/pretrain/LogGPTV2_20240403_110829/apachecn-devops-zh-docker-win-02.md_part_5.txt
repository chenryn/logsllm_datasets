```
# escape=`
FROM microsoft/dotnet:2.2-sdk-nanoserver-1809 AS builder
WORKDIR C:\src
COPY src .
USER ContainerAdministrator
RUN dotnet restore && dotnet publish
# app image
FROM microsoft/dotnet:2.2-aspnetcore-runtime-nanoserver-1809
EXPOSE 80
WORKDIR C:\dotnetapp
RUN mkdir app-state
CMD ["dotnet", "HitCountWebApp.dll"]
COPY --from=builder C:\src\bin\Debug\netcoreapp2.2\publish .
```
在 Dockerfile 中，我在`C:\dotnetapp\app-state`处创建了一个空目录，应用将在该目录中将命中次数存储在一个文本文件中。我已经将该应用的第一个版本构建为带有`2e-v1`标签的映像:
```
docker image build --tag dockeronwindows/ch02-hitcount-website:2e-v1 .
```
我将在主机上创建一个用于容器状态的目录，并运行一个容器，该容器从主机上的目录装载应用状态目录:
```
mkdir C:\app-state
docker container run -d --publish-all `
 -v C:\app-state:C:\dotnetapp\app-state `
 --name appv1 `
 dockeronwindows/ch02-hitcount-website:2e-v1 
```
`publish-all`选项告诉 Docker 将容器映像中所有暴露的端口发布到主机上的随机端口。这是在本地环境中测试容器的快速选项，因为 Docker 将从主机分配一个空闲端口，您不需要担心哪些端口已经被其他容器使用。您可以使用`container port`命令找到容器发布的端口:
```
> docker container port appv1
80/tcp -> 0.0.0.0:51377
```
我可以在`http://localhost:51377`浏览网站。当我刷新页面几次时，我会看到点击次数增加:
![](img/47bcf624-7bdc-478d-a735-0edc36d20e14.png)
现在，当我有一个升级版本的应用要部署时，我可以把它打包成一个标记有`2e-v2`的新映像。当映像准备就绪时，我可以停止旧容器，并使用相同的卷映射启动新容器:
```
PS> docker container stop appv1
appv1
PS> docker container run -d --publish-all `
 -v C:\app-state:C:\dotnetapp\app-state `
 --name appv2 `
 dockeronwindows/ch02-hitcount-website:2e-v2
db8a39ba7af43be04b02d4ea5d9e646c87902594c26a62168c9f8bf912188b62
```
包含应用状态的卷将被重用，因此新版本将继续使用旧版本中保存的状态。我有一个新的容器，有一个新公布的港口。当我第一次获取端口并浏览到它时，我看到更新后的用户界面有一个吸引人的图标，但命中数是从版本 1 结转过来的:
![](img/6d464a9f-b169-4970-9b8b-cc01198853c4.png)
应用状态可能会在不同版本之间发生结构性变化，这是您需要自己管理的事情。开源 Git 服务器 GitLab 的 Docker 映像就是一个很好的例子。状态存储在卷上的数据库中，当您升级到新版本时，应用会检查数据库，并在需要时运行升级脚本。
应用配置是利用卷装载的另一种方式。您可以在应用中附带一个内置于映像中的默认配置集，但是用户可以使用挂载用自己的文件覆盖基本配置。
在下一章中，您将看到这些技术得到很好的利用。
# 将传统的 ASP.NET 网络应用打包成 Docker 映像
微软已经在 MCR 上提供了视窗服务器核心基础映像，这是视窗服务器 2019 的一个版本，它具有完整服务器版本的大部分功能，但没有用户界面。就基本映像而言，它非常大:在 Docker Hub 上压缩了 2 GB，而 Nano Server 压缩了 100 MB，小的 Alpine Linux 映像压缩了 2 MB。但这意味着你几乎可以对任何现有的 Windows 应用进行 Docker 化，这是开始将你的系统迁移到 Docker 的好方法。
还记得纳丁纳吗？这是一个开源的 ASP.NET MVC 展示应用，最初是由微软的斯科特·汉斯曼和斯科特·格思里等人编写的。您仍然可以在 CodePlex 获得代码，但自 2013 年以来没有任何变化，因此它是证明旧代码的理想选择.NET Framework 应用可以迁移到 Docker Windows 容器中，这可能是它们现代化的第一步。
# 为 NerdDinner 编写一个 Dockerfile
我将遵循 NerdDinner 的多阶段构建方法，因此`dockeronwindows/ch-02-nerd-dinner:2e`映像的 Dockerfile 从构建器阶段开始:
```
# escape=`
FROM microsoft/dotnet-framework:4.7.2-sdk-windowsservercore-ltsc2019 AS builder
WORKDIR C:\src\NerdDinner
COPY src\NerdDinner\packages.config .
RUN nuget restore packages.config -PackagesDirectory ..\packages
COPY src C:\src
RUN msbuild NerdDinner.csproj /p:OutputPath=c:\out /p:Configuration=Release 
```
该阶段使用`microsoft/dotnet-framework`作为编译应用的基础映像。这是微软在 Docker Hub 上维护的一张图片。它建立在 Windows Server Core 映像之上，拥有编译所需的一切.NET 框架应用，包括 NuGet 和 MSBuild。构建阶段分为两部分:
1.  将 NuGet `packages.config`文件复制到映像中，然后运行`nuget restore`。
2.  复制源树的其余部分并运行`msbuild`。
分离这些部分意味着 Docker 将使用多个映像层:第一层将包含所有恢复的 NuGet 包，第二层将包含编译后的 web 应用。这意味着我可以利用 Docker 的层缓存。除非我更改我的 NuGet 引用，否则包将从缓存层加载，Docker 不会运行恢复部分，这是一个昂贵的操作。每次源文件发生变化时，都会运行 MSBuild 步骤。
如果在迁移到 Docker 之前，我有一个关于 NerdDinner 的部署指南，它看起来像这样:
1.  在干净的服务器上安装 Windows。
2.  运行所有窗口更新。
3.  安装 IIS。
4.  安装. NET
5.  建立 ASP.NET。
6.  将网络应用复制到`C`驱动器中。
7.  在 IIS 中创建应用池。
8.  使用应用池在 IIS 中创建网站。
9.  删除默认网站。
这将是 Dockerfile 第二阶段的基础，但我将能够简化所有步骤。我可以使用微软的 ASP.NET Docker 映像作为`FROM`映像，这将为我提供一个安装了 IIS 和 ASP.NET 的干净的 Windows 安装。这解决了一个指令中的前五个步骤。这是`dockeronwindows/ch-02-nerd-dinner:2e`的剩余文件:
```
FROM mcr.microsoft.com/dotnet/framework/aspnet:4.7.2-windowsservercore-ltsc2019
SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop']
ENV BING_MAPS_KEY bing_maps_key
WORKDIR C:\nerd-dinner
RUN Remove-Website -Name 'Default Web Site'; `
    New-Website -Name 'nerd-dinner' `
                -Port 80 -PhysicalPath 'c:\nerd-dinner' `
                -ApplicationPool '.NET v4.5'
RUN & c:\windows\system32\inetsrv\appcmd.exe `
      unlock config /section:system.webServer/handlers
COPY --from=builder C:\out\_PublishedWebsites\NerdDinner C:\nerd-dinner 
```
Microsoft uses both Docker Hub and MCR to store their Docker images. The .NET Framework SDK is on Docker Hub, but the ASP.NET runtime image is on MCR. You can always find where an image is hosted by checking on Docker Hub.
使用`escape`指令和`SHELL`指令让我可以使用没有双反斜杠的普通窗口文件路径，以及 PowerShell 风格的反斜杠来分隔多行命令。使用 PowerShell 移除默认网站并在 IIS 中创建新网站很简单，Dockerfile 清楚地向我显示了应用正在使用的端口和内容的路径。
我用的是内置的.NET 4.5 应用池，这是对原始部署过程的简化。在虚拟机上的 IIS 中，通常每个网站都有一个专用的应用池，以便将进程相互隔离。但是在容器化的应用中，将只有一个网站在运行。任何其他网站都将在其他容器中运行，所以我们已经有了隔离，每个容器都可以使用默认的应用池，而不用担心干扰。
最终的`COPY`指令将发布的 web 应用从构建器阶段复制到应用映像中。这是 Docker 文件中再次利用 Docker 缓存的最后一行。当我在开发应用的时候，源代码将是我最经常更改的东西。Dockerfile 的结构是这样的，当我更改代码并运行`docker image build`时，运行的唯一指令是第一阶段的 MSBuild 和第二阶段的 copy，因此构建非常快。
这可能是一个功能完整的 Dockerized ASP.NET 网站所需要的全部，但是在 NerdDinner 的例子中，还有一个说明，它证明了当你将应用容器化时，你可以处理尴尬的、意想不到的细节。NerdDinner 应用在其`Web.config`文件的`system.webServer`部分有一些自定义配置设置，默认情况下该部分被 IIS 锁定。我需要解锁该部分，这是我在第二个`RUN`指令中用`appcmd`完成的。
现在，我可以构建映像，并在 Windows 容器中运行传统的 ASP.NET 应用:
```
docker container run -d -P dockeronwindows/ch02-nerd-dinner:2e 
```
我可以用`docker container port`获取容器的发布端口，并浏览到 NerdDinner 主页:
![](img/2e704bc2-8b9b-4e32-a63d-4207c87a2d38.png)
这是一个在 Docker 容器中运行了六年的应用，没有任何代码更改。Docker 是构建新应用和更新旧应用的一个很好的平台，但它也是将您现有的应用从数据中心转移到云中的一个很好的方法，或者将它们从不再支持的旧版本的 Windows 中转移出来，如 Windows Server 2003 和(很快)Windows Server 2008。
在这一点上，应用并没有完全发挥作用，我只是运行了一个基本版本。必应地图对象没有显示真实的地图，因为我没有提供应用编程接口密钥。API 键是每个环境都会改变的东西(每个开发人员、测试环境和产品都有不同的键)。
在 Docker 中，您使用环境变量和配置对象来管理环境配置，我将在[第 3 章](03.html)、*开发 Docker 化中的 Dockerfile 的下一个迭代中使用它们.NET 框架和。网络核心应用*。
如果您在这个版本的 NerdDinner 中导航，并尝试注册新用户或搜索晚餐，您将看到一个黄色的崩溃页面，告诉您数据库不可用。在其原始形式中，NerdDinner 使用 SQL Server LocalDB 作为轻量级数据库，并将数据库文件存储在应用目录中。我可以将 LocalDB 运行时安装到容器映像中，但这不符合 Docker 的理念，即每个容器有一个应用。相反，我将为数据库构建一个单独的映像，这样我就可以在它自己的容器中运行它。
在下一章中，我将重复 NerdDinner 示例，添加配置管理，在自己的容器中作为单独的组件运行 SQL Server，并演示如何通过使用 Docker 平台开始实现传统 ASP.NET 应用的现代化。
# 摘要
在本章中，我仔细研究了 Docker 映像和容器。映像是应用的打包版本，容器是应用的实例，从映像运行。您可以使用容器来完成简单的一次性任务，交互式地使用它们，或者让它们在后台运行。随着你开始更多地使用 Docker，你会发现自己做到了这三点。
Dockerfile 是构建映像的源脚本。这是一个简单的文本文件，包含少量指令来指定基本映像、复制文件和运行命令。您可以使用 Docker 命令行来构建映像，这很容易作为一个步骤添加到您的 CI 构建中。当开发人员推送通过所有测试的代码时，构建的输出将是一个版本化的 Docker 映像，您可以将其部署到任何主机，因为您知道它将始终以相同的方式运行。
在本章中，我看了几个简单的 Dockerfiles，并以一个真实的应用结束。NerdDinner 是一个遗留的 ASP.NET MVC 应用，是为在 Windows Server 和 IIS 上运行而构建的。使用多阶段构建，我将该遗留应用打包成 Docker 映像，并在容器中运行。这表明 Docker 提供的新计算模型不仅仅是针对绿地项目使用的.NET Core 和 Nano Server -您可以将现有的应用迁移到 Docker，并让自己处于一个很好的位置来开始更新它们。
在下一章中，我将使用 Docker 来更新 NerdDinner 的体系结构，将特性分解成独立的组件，并使用 Docker 将它们连接在一起。