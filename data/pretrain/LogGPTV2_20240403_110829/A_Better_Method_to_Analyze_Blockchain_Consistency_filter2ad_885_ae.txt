i (1 − µp)∆µp
Pr[e10B]
] + ∆
∆(cid:88)
i =1
Recall that an attack succeeds if the time for the honest players
to grow the chain in this model is more than the time taken for
an adversary to mine a block. Comparing the expectations of the
random variables representing these two measures, we obtain the
following condition for the success of the attack.
1
2 (l01 + Pr[e10A]l10A + Pr[e10A]l10A)  0) for both
measures using Theorem 3.1 in conjunction with a larger expanded
Markov chain equivalent to the 2-chain of Figure 7, and a Chernoff-
Hoeffding bound, respectively. This yields the desired condition of
the theorem.
□
Theorem 5.6. For any δ > 0, the delay attack on the 3-chain
Cliquechain protocol succeeds when
1 + δ
3
(l01 + T1)  0) for both
measures using Theorem 3.1 in conjunction with a larger expanded
Markov chain equivalent to the 3-chain of Figure 7, and a Chernoff-
Hoeffding bound, respectively. This yields the desired condition of
the theorem.
□
Figure 8 shows the minimum adversarial percentage needed for
the attacks to succeed for each value of c (where the probability any
block is mined in a round is 1
). We compare this with the lower
c ∆
bound for any m-chain Cliquechain protocol, which is the same
for Nakamoto’s protocol. We can see that as the number of chains
goes up in the Cliquechain protocol, so does the resilience of the
protocol to the delay attack. At 3-chain, the protocol is essentially
resilient to the attack except for very small c. Note however that
the consistency lower bound remains the same, so there may exist
another attack to which these protocols are susceptible.
0
1A
1B
3A
4A
3C
2A
2B
2C
2D
Figure 9: An example of a block tree where a miner follow-
ing Bitcoin’s longest chain rule would mine on 4A, but a
miner following the GHOST rule would mine on 3C.
6 GHOST ANALYSIS
In this section we extend our method to analyze the GHOST pro-
tocol by Sompolinsky et al. [20]. Section 6.1 provides a summary
of GHOST. We extend our analysis of Nakamoto to GHOST and
introduce a new consensus attack on GHOST and a Markov model
which captures the attack. We note that in their analysis of GHOST,
Sompolinsky et al. define a fork collapse similar to Pass et al.’s con-
vergence opportunity which we use in this paper. We note however
that a crucial point of the analysis we do in this paper is that, under
any adversarial strategy, blocks expire, meaning any block has a
limited time interval in which it can effect the mainchain. This is
not the same as the proof provided in [20] which only accounts for
a 50% attack, and not other adversaries.
In §6.4 we show this with an attack of GHOST which utilizes the
concept of the adversary saving blocks they have mined as bank
to be utilized as needed in the attack. In the following section we
introduce the notion of a ‘subtree expiry’ to replace the requirement
of ‘block expiry’.
6.1 Review of GHOST protocol
The main claim of the GHOST protocol is to be able to handle higher
transaction rates through higher block creation rates and/or larger
block sizes which increase the network delay (i.e. time it takes
for blocks to propagate through the network). The protocol works
by miners keeping track of a tree of blocks instead of a chain and
choosing to mine on the block tree which is heaviest, rather than the
chain which is longest. A block’s weight is calculated by summing
the number of blocks in it’s subtree (i.e. the number of blocks who
directly point to it or who point to a chain which eventually points
to it). Thus a miner starts at the root block and successively picks
the heaviest subtree until it arrives at a childless block to build
on. Figure 9 illustrates this where a miner following the GHOST
rule would mine on block 3C, while a miner following Nakamoto’s
longest chain protocol would mine on 4A. The idea behind this new
rule is that even if two honest nodes mine competing blocks which
point to the same parent block, both blocks still increase the weight
of the parent block and therefore the probability at least the parent
block will be on the mainchain.
Session 4C: Blockchain 1CCS’18, October 15-19, 2018, Toronto, ON, Canada7406.2 Subtree Expiring
For our analysis of GHOST we extend the idea of block expiry
to what we call subtree expiry. In short, if an adversary wants a
path to beat the current heaviest announced path of any honest
player, both paths share a last common block where their subtrees
diverged. We argue that in order for the adversary to make an
honest player choose the other subtree in the future that is not their
current heaviest announced subtree, blocks in that subtree must be
announced.
In GHOST each block not only has a length in a chain path which
corresponds to it’s depth in the tree, but it has a weight equal to the
sum of all blocks in the subtrees pointing to it. We reason that for
the GHOST protocol, all blocks on any honest player’s path have
a weight increase of at least that of the Nakamoto chain growth.
Below we state the subtree growth and expiry lemmas for GHOST.
Lemma 6.1. For any δ > 0, and for any honest player’s chain at
time r, there is some block b in the chain at some length l with weight
w, where at time r + T for some T , the block the player now has at
length l and all blocks it points to have an expected weight increase
≥ T (1 − δ )
µ
∆(c +µ ) .
Proof. In this proof we use the same reasoning as the Nakamoto
growth lemma of this paper [lemma 4.1]. Consider the path P any
honest player takes in the tree to find the heaviest path. Whenever a
new honest block b′ is announced, either this block is now part of P
and all blocks in P have a weight of at least 1 added to it. Or the path
to b′ diverges from P at some block b, where P is in some subtree
pointing to b and b′ is in another. The subtree of P must have at
least the weight of the subtree of b if the honest player did not add
b to it’s path. Thus for each ∆ period surrounding an honest hit, the
weight of some subtree in all honest paths increases by at least 1,
and thus all blocks the subtree points to also increase in weight by
at least 1. We count this using the same Markov model of lemma 4.1.
The expected number of rounds needed for a weight increase of one
is at most c ∆
+ ∆; using standard Chernoff-Hoeffding bounds, the
µ
number of rounds for an increase of д is at most (1 + δ )( c ∆
+ ∆)д
µ
with probability 1− e−Ω(д). That is, in T rounds, GHOST achieves a
subtree weight increase of at least (1 − δ )T
with probability
1−e Ω(T ). We get that for any honest player’s chain at time r, there is
some block at time ≥ r +T whose weight (and therefore the weight
of all blocks it points to) increased in time T by ≥ (1 − δ )T
∆(c +µ )
blocks.
□
∆(c +µ )
µ
µ
We now use the subtree growth to prove that if the adversary
withholds blocks in a subtree for too long, then that subtree will not
become part of any honest path in the future except with negligible
probability.
Lemma 6.2. Let C be some subtree where the adversary is mining
which no honest player is mining on, but which some honest player
is mining on another subtree which points to C’s parent. Let r be the
point when only the adversary is mining on C and r + t be when
the first honest player hears of any block in C after r. There exists
a negligible function ϵ (.) and some δ ∈ (0, 1) s.t. µ ≥ δ ρ and the
probability C becomes part of any honest path is ≤ ϵ (t ).
Proof. Consider the block b which C points to. At time r, there
is some other subtree which points to b which an honest player is
mining on. If at some time T ≥ r +t, some honest player was mining
on this other subtree before hearing of a block in C, then from the
previous section we know that this subtree grew in expectation
by ≥ T
blocks. Thus if the following inequality holds, then
except with negligible probability, the adversary was not able to
mine enough blocks in C to make C the heavier choice from the
honest subtree:
∆(c +µ )
µ
µ
(c + µ)
>
ρ
c
If at time r + t no honest player was mining on any subtree that
b points to, then that means there was some time after r which
the path pointing to C diverged from all honest paths. We consider
the latest such point in the path, i.e. the last block the adversary’s
path has in common with any honest path and the point where this
divergence occurred. For any honest player to now be mining on
another subtree pointing to this block, this subtree must satisfy the
previous lemma’s subtree growth since time r. Thus if this subtree’s
growth is more than the adversary’s, then at time T , the probability
that the adversary mined a heavier subtree is ≤ ϵ (t ). This holds for
the following inequality:
µ
(c + µ)
>
ρ
c
□
Thus if an adversary keeps a subtree silent, i.e. any block in that
subtree silent, then no honest players will contribute to it, and if
the adversary mines less blocks then any honest subtree growth,
then the adversary’s subtree will not be the heaviest choice on any
honest player’s path in the future.
6.3 Convergence Opportunity
Recall from the previous section that the analytical analysis of
Nakamoto’s protocol done by Pass et al. for consensus relies on the
idea of “convergence opportunities” which are events at the end of
which all honest players agree on a single chain. The convergence
opportunities are made up of 3 steps where we consider only what
happens with the honest players and in order for an adversary to
be able to break consensus, they must at the very least be able to
break all convergence opportunities.
With GHOST, we can’t use the same “longest path” or “heaviest
block” argument, so we instead use a “heaviest path” argument.
Lemma 6.3. At the end of a convergence opportunity (∆ silence +
single honest hit +∆ silence), all honest players in GHOST will follow
the same “heaviest path” down the block tree.
Proof. Let T be the tree all honest players see after the first
∆ silent rounds, let h be the player who mines the block in step
2, and T ′ the new tree created by the addition of this new block.
Now consider the path h took when deciding which block to mine
on. Starting at the genesis block, at each block h chooses the next
heaviest subtree in T and two things can happen to this same choice
in T ′ :