\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#
module(load="imuxsock") \# provides support for local system logging
module(load="imklog") \# provides kernel logging support
\#module(load="immark") \# provides ­­MARK­­ message capability
\# provides UDP syslog reception
\#module(load="imudp")
\#input(type="imudp" port="514")
\# provides TCP syslog reception
\#module(load="imtcp")
\#input(type="imtcp" port="514")
\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#
\#\#\#\# GLOBAL DIRECTIVES \#\#\#\#
\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#
*清单11-1:rsyslog.conf文件的内容*
正如您所看到的，rsyslog.conf文件有很多文档，其中有大量注释解释了它的用法。此时，这些信息中的大部分对您没有用处，但是如果您导航到第50行以下，您将找到Rules部分。在这里，您可以为Linux系统将自动为您记录的内容设置规则。
#### *rsyslog日志记录规则*
rsyslog规则决定记录哪种类型的信息，记录哪些程序的消息，以及将日志存储在何处。作为一名黑客，这允许您找出正在记录的日志以及这些日志的写入位置，以便您可以删除或隐藏它们。滚动到第50行，您将看到类似清单11-2的内容。
\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#
\#\#\#\# RULES \#\#\#\#
\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#
\#
\# First some standard log files. Log by facility.
\#
auth,authpriv.\* /var/log/auth.log
\*.\*;auth,authpriv.none ­/var/log/syslog
\#cron.\* /var/log/cron.log
daemon.\* ­/var/log/daemon.log
kern.\* ­/var/log/kern.log
1pr.\* ­/var/log/lpr.log
mail.\* ­/var/log/mail.log
user.\* ­/var/log/user.log
\#
\# Logging for the mail system. Split it up so that
\# it is easy to write scripts to parse these files.
\#
mail.info ­/var/log/mail.info
mail.warn ­/var/log/mail.warn
mail.err /var/log/mail.err
*清单11-2:在rsyslog.conf中查找日志规则*
每一行都是一个单独的日志记录规则，说明记录了哪些消息以及记录到哪里。这些规则的基本格式如下:
facility.priority action
**facility**关键字引用正在记录其消息的程序，例如邮件、内核或打印系统。priority关键字决定为该程序记录哪种类型的消息。在最右边的action关键字引用将发送日志的位置。让我们更仔细地看一下每个部分，首先是facility关键字，它指的是生成日志的任何软件，无论是内核、邮件系统还是用户。
下面是一个有效的代码列表，可以用来代替我们的配置文件规则中的关键字facility:
**auth/authpriv**安全/授权消息
**cron**时钟守护进程
**daemon**其他守护进程
**kern**内核消息
**lpr**打印系统
**mail**邮件系统
**user**常规用户级别消息
星号通配符（\*）代替单词指的是所有信息。 您可以通过以逗号分隔的列表来选择多个。
优先级告诉系统要记录哪种消息。代码从最低优先级列出，从调试开始到最高优先级，以严重结束。如果优先级为\*，则记录所有优先级的消息。指定优先级时，将记录该优先级及更高优先级的消息。例如，如果指定的优先级代码为告警alert，系统将记录分类为告警和更高优先级的消息，但不会记录标记为crit的消息或低于警报的任何优先级。以下是有效优先级代码的完整列表：
-   debug
-   info
-   notice
-   warning
-   warn
-   error
-   err
-   crit
-   alert
-   emerg
-   panic
warning、warn、error、err、emerg、panic，这些都已被弃用，不应该使用。
操作通常是一个文件名和应该发送日志的位置。注意，通常，日志文件被发送到/var/log目录，其文件名描述为生成它们的工具，如auth。这意味着，例如，由auth工具生成的日志将被发送到/var/log.auth.log。
让我们看一些日志规则的例子:
mail.\* /var/log/mail
这个示例将所有(\*)优先级的邮件事件记录到/var/log/mail文件中。
kern.crit /var/log/kernel
这个例子将把危险(crit)优先级或更高的内核事件记录到/var/log/kernel中。
\*.emerg \*
最后一个示例将记录所有登录用户的紧急事件(emerg)优先级的所有事件。通过这些规则，黑客可以确定日志文件的位置、更改优先级，甚至禁用特定的日志规则。
### 使用LOGROTATE自动清理日志
日志文件会占用空间，所以如果不定期删除它们，它们最终会填满整个硬盘驱动器。另一方面，如果太频繁地删除日志文件，那么在将来的某个时间点就没有日志供研究了。您可以使用logrotate通过切割日志来确定这些符合相反需求之间的平衡。
**logrotate**是通过将日志文件移动到其他位置来定期归档日志文件的过程，从而为您留下一个新的日志文件。然后，在指定的一段时间之后，归档的位置将被清理。
您的系统已经在使用**logrotate**实用程序的cron作业切割转储日志文件。您可以配置**logrotate**实用程序，以使用/etc/logrotate.conf文本文件选择日志转储备份的规律性。让我们用文本编辑器打开它看看:
kali \>leafpad /etc/logrotate.conf
您应该看到如清单11-3所示的内容。
\# see "man logrotate" for details
\# rotate log files weekly
➊ weekly
\# keep 4 weeks worth of backlogs
➋ rotate 4
➌ \# create new (empty) log files after rotating old ones
create
➍ \# uncomment this if you want your log files compressed
\#compress
\# packages drop log rotation information into this directory
include /etc/logrotate.d
\# no packages own wtmp, or btmp ­­ we'll rotate them here
/var/log/wtmp
{ missingok
monthly
create 0664 root utmp
rotate 1
}
*清单11-3:logrotate配置文件*
第一，你可以设置的时间单位数字参考➊。这里的默认值是weekly，这意味着rotate关键字之后的任何数字总是指weeks（周）。
进一步往下看，你可以看到设置切割转储日志默认设置的频率是每四个星期转储日志➋。这个默认配置对大多数人都适用，但是如果您想让您的日志更长一些，以便进行调查，或者更短一些，以便更快地清除它们，那么您应该更改这个设置。例如，如果您每周检查日志文件并希望节省存储空间，可以将此设置更改为rotate
1。如果您的日志有足够的存储空间，并且希望保留半永久记录以便以后进行取证分析，那么您可以将此设置更改为rotate
26以保存六个月的日志，或者将rotate 52更改为保存一年的日志。
默认情况下，创建一个新的空日志文件当做旧日志的切割备份➌。在配置文件中建议，你也可以选择压缩转储的日志文件➍。
在每个转储周期结束时，将重命名日志文件，并在创建新日志文件时将其推到日志链的末尾，以替换当前日志文件。例如，/var/log.auth将变成/var/log.auth.1，那么/var/log.auth.2，以此类推。如果您每四周轮换一次日志，并保留四组备份，那么您将得到/var/log.auth.4，但是没有/var/log.auth.5。意思是旧的/var/log.auth.4将被删除，而不是被推到/var/log/auth.5。您可以使用locate命令来查找/var/log/auth.log的log文件，并使用通配符，如下所示:
kali \>locate /var/log/auth.log.\*
/var/log/auth.log.1
/var/log/auth.log.2
/var/log/auth.log.3
/var/log/auth.log.4
有关自定义和使用**logrotate**实用程序的许多方法的详细信息，请参见man
logrotate页面。这是一个很好的资源，可以了解可以使用的函数和可以更改的变量，以定制如何处理日志。一旦您对Linux更加熟悉，您就会更好地了解需要多久进行一次日志记录，以及您喜欢哪些选项，因此值得重新访问*logrotate.conf*文件。
### 保持隐身
一旦您破坏了Linux系统，禁用日志记录并删除日志文件中您入侵的任何证据，这都是有用的，以减少被检测到的机会。有很多方法可以做到这一点，每种方法都有自己的风险和可靠性。
#### *删除证据*
首先，您需要删除活动的任何日志。您可以简单地打开日志文件，并使用在第2章中学习的文件删除技术，逐行准确地删除详细描述您的活动的任何日志。然而，这可能会很耗时，并在日志文件中留下时间间隔，这看起来很可疑。此外，删除的文件通常可以由一个熟练的取证调查员恢复。
更好、更安全的解决方案是分解日志文件。对于其他文件删除系统，熟练的调查员仍然能够恢复已删除的文件，但是假设有一种方法可以删除文件并多次擦写覆盖它，这使得恢复变得更加困难。幸运的是，Linux有一个内置命令，名为**shred**，正是为了这个目的。
要了解**shred**命令是如何工作的，请输入以下命令快速查看帮助信息:
kali \>shred --help
Usage: shred [OPTION]...FILE...
Overwrite the specified FILE(s) repeatedly in order to make it harder
for even very expensive hardware probing to recover data
­­snip­­