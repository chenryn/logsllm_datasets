within the page in a safe way. HTML encoding can be implemented in client-
side JavaScript with a function like the following:
function sanitize(str)
{
cc1122..iinndddd 449977 88//1199//22001111 1122::1122::3366 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 498
498 Chapter 12 n Attacking Users: Cross-Site Scripting
var d = document.createElement(‘div’);
d.appendChild(document.createTextNode(str));
return d.innerHTML;
}
Summary
This chapter has examined the various ways in which XSS vulnerabilities can
arise and ways in which common fi lter-based defenses can be circumvented.
Because XSS vulnerabilities are so prevalent, it is often straightforward to fi nd
several bugs within an application that are easy to exploit. XSS becomes more
interesting, from a research perspective at least, when various defenses are in
place that force you to devise some highly crafted input, or leverage some little-
known feature of HTML, JavaScript, or VBScript, to deliver a working exploit.
The next chapter builds on this foundation and examines a wide variety of
further ways in which defects in the server-side web application may leave its
users exposed to malicious attacks.
Questions
Answers can be found at http://mdsec.net/wahh.
1. What standard “signature” in an application’s behavior can be used to
identify most instances of XSS vulnerabilities?
2. You discover a refl ected XSS vulnerability within the unauthenticated
area of an application’s functionality. State two different ways in which
the vulnerability could be used to compromise an authenticated session
within the application.
3. You discover that the contents of a cookie parameter are copied without
any fi lters or sanitization into the application’s response. Can this behav-
ior be used to inject arbitrary JavaScript into the returned page? Can it be
exploited to perform an XSS attack against another user?
4. You discover stored XSS behavior within data that is only ever displayed
back to yourself. Does this behavior have any security signifi cance?
5. You are attacking a web mail application that handles fi le attachments
and displays these in-browser. What common vulnerability should you
immediately check for?
6. How does the same-origin policy impinge upon the use of the Ajax tech-
nologyXMLHttpRequest?
cc1122..iinndddd 449988 88//1199//22001111 1122::1122::3366 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 499
Chapter 12 n Attacking Users: Cross-Site Scripting 499
7. Name three possible attack payloads for XSS exploits (that is, the mali-
cious actions that you can perform within another user’s browser, not the
methods by which you deliver the attacks).
8. You have discovered a refl ected XSS vulnerability where you can inject
arbitrary data into a single location within the HTML of the returned
page. The data inserted is truncated to 50 bytes, but you want to inject a
lengthy script. You prefer not to call out to a script on an external server.
How can you work around the length limit?
9. You discover a refl ected XSS fl aw in a request that must use the POST
method. What delivery mechanisms are feasible for performing an attack?
cc1122..iinndddd 449999 88//1199//22001111 1122::1122::3366 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 500
cc1122..iinndddd 550000 88//1199//22001111 1122::1122::3366 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 501
CHAPTER
13
Attacking Users: Other
Techniques
The preceding chapter examined the grandfather of attacks against other appli-
cation users—cross-site scripting (XSS). This chapter describes a wide range of
other attacks against users. Some of these have important similarities to XSS
attacks. In many cases, the attacks are more complex or subtle than XSS attacks
and can succeed in situations where plain XSS is not possible.
Attacks against other application users come in many forms and manifest a
variety of subtleties and nuances that are frequently overlooked. They are also
less well understood in general than the primary server-side attacks, with dif-
ferent fl aws being confl ated or neglected even by some seasoned penetration
testers. We will describe all the different vulnerabilities that are commonly
encountered and will spell out the steps you need to follow to identify and
exploit each of these.
Inducing User Actions
The preceding chapter described how XSS attacks can be used to induce a
user to unwittingly perform actions within the application. Where the victim
user has administrative privileges, this technique can quickly lead to complete
compromise of the application. This section examines some additional methods
that can be used to induce actions by other users. These methods can be used
even in applications that are secured against XSS.
501
cc1133..iinndddd 550011 88//1199//22001111 1122::1133::5577 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 502
502 Chapter 13 n Attacking Users: Other Techniques
Request Forgery
This category of attack (also known as sessionriding) is closely related to ses-
sion hijacking attacks, in which an attacker captures a user’s session token and
therefore can use the application “as” that user. With request forgery, however,
the attacker need never actually know the victim’s session token. Rather, the
attacker exploits the normal behavior of web browsers to hijack a user’s token,
causing it to be used to make requests that the user does not intend to make.
Request forgery vulnerabilities come in two fl avors: on-site and cross-site.
On-Site Request Forgery
On-site request forgery (OSRF) is a familiar attack payload for exploiting stored
XSS vulnerabilities. In the MySpace worm, described in the preceding chapter,
a user named Samy placed a script in his profi le that caused any user viewing
the profi le to perform various unwitting actions. What is often overlooked is
that stored OSRF vulnerabilities can exist even in situations where XSS is not
possible.
Consider a message board application that lets users submit items that are
viewed by other users. Messages are submitted using a request like the following:
POST /submit.php
Host: wahh-app.com
Content-Length: 34
type=question&name=daf&message=foo
This request results in the following being added to the messages page:
daf
foo
In this situation, you would, of course, test for XSS fl aws. However, suppose
that the application is properly HTML-encoding any “ characters it inserts
into the page. When you are satisfi ed that this defense cannot be bypassed in
any way, you might move on to the next test.
But look again. You control part of the target of the  tag. Although you
cannot break out of the quoted string, you can modify the URL to cause any user
who views your message to make an arbitrary on-site GET request. For example,
submitting the following value in the type parameter causes anyone viewing
your message to make a request that attempts to add a new administrative user:
../admin/newUser.php?username=daf2&password=0wned&role=admin#
cc1133..iinndddd 550022 88//1199//22001111 1122::1133::5577 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 503
Chapter 13 n Attacking Users: Other Techniques 503
When an ordinary user is induced to issue your crafted request, it, of course,
fails. But when an administrator views your message, your backdoor account
gets created. You have performed a successful OSRF attack even though XSS
was not possible. And, of course, the attack succeeds even if administrators take
the precaution of disabling JavaScript.
In the preceding attack string, note the # character that effectively terminates
the URL before the .gif suffi x. You could just as easily use & to incorporate the
suffi x as a further request parameter.
TRY IT!
In this example, an OSRF exploit can be placed in the recent searches list,
even though this is not vulnerable to XSS:
http://mdsec.net/search/77/
HACK STEPS
1. In every location where data submitted by one user is displayed to other
users but you cannot perform a stored XSS attack, review whether the
application’s behavior leaves it vulnerable to OSRF.
2. The vulnerability typically arises where user-supplied data is inserted into
the target of a hyperlink or other URL within the returned page. Unless the
application specifically blocks any characters you require (typically dots,
slashes, and the delimiters used in the query string), it is almost certainly
vulnerable.
3. If you discover an OSRF vulnerability, look for a suitable request to tar-
get in your exploit, as described in the next section for cross-site request
forgery.
OSRF vulnerabilities can be prevented by validating user input as strictly as
possible before it is incorporated into responses. For example, in the specifi c
case described, the application could verify that the type parameter has one
of a specifi c range of values. If the application must accept other values that it
cannot anticipate in advance, input containing any of the characters /.\?&
and = should be blocked.
Note that HTML-encoding these characters is not an effective defense against
OSRF attacks, because browsers will decode the target URL string before it is
requested.
Depending on the insertion point and the surrounding context, it may also
be possible to prevent OSRF attacks using the same defenses described in the
next section for cross-site request forgery attacks.
cc1133..iinndddd 550033 88//1199//22001111 1122::1133::5577 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 504
504 Chapter 13 n Attacking Users: Other Techniques
Cross-Site Request Forgery
In cross-site request forgery (CSRF) attacks, the attacker creates an innocuous-
looking website that causes the user’s browser to submit a request directly to
the vulnerable application to perform some unintended action that is benefi cial
to the attacker.
Recall that the same-origin policy does not prohibit one website from issuing
requests to a different domain. It does, however, prevent the originating website
from processing the responses to cross-domain requests. Hence, CSRF attacks
normally are “one-way” only. Multistage actions such as those involved in the
Samy XSS worm, in which data is read from responses and incorporated into
later requests, cannot be performed using a pure CSRF attack. (Some methods
by which CSRF techniques can be extended to perform limited two-way attacks,
and capture data cross-domain, are described later in this chapter.)
Consider an application in which administrators can create new user accounts
using requests like the following:
POST /auth/390/NewUserStep2.ashx HTTP/1.1
Host: mdsec.net
Cookie: SessionId=8299BE6B260193DA076383A2385B07B9
Content-Type: application/x-www-form-urlencoded
Content-Length: 83
realname=daf&username=daf&userrole=admin&password=letmein1&
confirmpassword=letmein1
This request has three key features that make it vulnerable to CSRF attacks:
n The request performs a privileged action. In the example shown, the
request creates a new user with administrative privileges.
n The application relies solely on HTTP cookies for tracking sessions. No
session-related tokens are transmitted elsewhere within the request.
n The attacker can determine all the parameters required to perform the
action. Aside from the session token in the cookie, no unpredictable values
need to be included in the request.
Taken together, these features mean that an attacker can construct a web
page that makes a cross-domain request to the vulnerable application contain-
ing everything needed to perform the privileged action. Here is an example of
such an attack:
cc1133..iinndddd 550044 88//1199//22001111 1122::1133::5588 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 505
Chapter 13 n Attacking Users: Other Techniques 505
This attack places all the parameters to the request into hidden form fi elds
and contains a script to automatically submit the form. When the user’s browser
submits the form, it automatically adds the user’s cookies for the target domain,
and the application processes the resulting request in the usual way. If an admin-
istrative user who is logged in to the vulnerable application visits the attacker’s
web page containing this form, the request is processed within the administra-
tor’s session, and the attacker’s account is created.
TRY IT!
http://mdsec.net/auth/390/
A real-world example of a CSRF fl aw was found in the eBay application by
Dave Armstrong in 2004. It was possible to craft a URL that caused the requesting
user to make an arbitrary bid on an auction item. A third-party website could
cause visitors to request this URL, so that any eBay user who visited the website
would place a bid. Furthermore, with a little work, it was possible to exploit the
vulnerability in a stored OSRF attack within the eBay application itself. The
application allowed users to place  tags within auction descriptions. To
defend against attacks, the application validated that the tag’s target returned
an actual image fi le. However, it was possible to place a link to an off-site server
that returned a legitimate image when the auction item was created and sub-
sequently replace this image with an HTTP redirect to the crafted CSRF URL.
Thus, anyone who viewed the auction item would unwittingly place a bid on
it. More details can be found in the original Bugtraq post:
http://archive.cert.uni-stuttgart.de/bugtraq/2005/04/msg00279.html
NOTE The defect in the application’s validation of off-site images is known
as a “time of check, time of use” (TOCTOU) fl aw. An item is validated at one
time and used at another time, and an attacker can modify its value in the
window between these times.
cc1133..iinndddd 550055 88//1199//22001111 1122::1133::5588 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 506
506 Chapter 13 n Attacking Users: Other Techniques
Exploiting CSRF Flaws
CSRF vulnerabilities arise primarily in cases where applications rely solely on
HTTP cookies for tracking sessions. Once an application has set a cookie in a
user’s browser, the browser automatically submits that cookie to the application
in every subsequent request. This is true regardless of whether the request origi-
nates from a link, form within the application itself, or from any other source
such as an external website or a link clicked in an e-mail. If the application does
not take precautions against an attacker’s “riding” on its users’ sessions in this
way, it is vulnerable to CSRF.
HACK STEPS
1. Review the key functionality within the application, as identified in your
application mapping exercises (see Chapter 4).
2. Find an application function that can be used to perform some sensi-
tive action on behalf of an unwitting user, that relies solely on cookies
for tracking user sessions, and that employs request parameters that an
attacker can fully determine in advance—that is, that do not contain any
other tokens or unpredictable items.
3. Create an HTML page that issues the desired request without any user
interaction. For GET requests, you can place an  tag with the src
attribute set to the vulnerable URL. For POST requests, you can create a
form that contains hidden fields for all the relevant parameters required
for the attack and that has its target set to the vulnerable URL. You can
use JavaScript to autosubmit the form as soon as the page loads.
4. While logged in to the application, use the same browser to load your
crafted HTML page. Verify that the desired action is carried out within the
application.
TIP The possibility of CSRF attacks alters the impact of numerous other
categories of vulnerability by introducing an additional vector for their exploi-
tation. For example, consider an administrative function that takes a user
identifi er in a parameter and displays information about the specifi ed user.
The function is subject to rigorous access control, but it contains a SQL injec-
tion vulnerability in the uid parameter. Since application administrators are
trusted and have full control of the database in any case, the SQL injection
vulnerability might be considered low risk. However, because the function
does not (as originally intended) perform any administrative action, it is not
protected against CSRF. From an attacker’s perspective, the function is just as
cc1133..iinndddd 550066 88//1199//22001111 1122::1133::5588 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 507
Chapter 13 n Attacking Users: Other Techniques 507
signifi cant as one specifi cally designed for administrators to execute arbitrary
SQL queries. If a query can be injected that performs some sensitive action,
or that retrieves data via some out-of-band channel, this attack can be per-
formed by nonadministrative users via CSRF.
Authentication and CSRF
Since CSRF attacks involve performing some privileged action within the context
of the victim user’s session, they normally require the user to be logged in to
the application at the time of the attack.
One location where numerous dangerous CSRF vulnerabilities have arisen
is in the web interfaces used by home DSL routers. These devices often contain