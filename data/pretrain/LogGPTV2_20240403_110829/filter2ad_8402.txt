# 【缺陷周话】第20期：无符号整数回绕

##### 译文声明
本文为翻译文章，具体内容及含义以原文为准。

## 1. 无符号整数回绕

在[第17期缺陷周话](http://mp.weixin.qq.com/s?__biz=MzI2NTg4OTc5Nw==&mid=2247488902&idx=1&sn=41b5ea3d26d9ad42b057f32b2a736c9a&chksm=ea9724ecdde0adfaa2a696182a95bce0563675467a5881bf94500344d910cc16a3e10807f377&scene=21#wechat_redirect)中，我们曾对有符号整数溢出问题进行了深入分析。本期我们将探讨C/C++编程语言中不当使用无符号整数类型所引发的问题。

### 无符号整数的取值范围

根据ANSI标准定义，不同类型的无符号整数及其对应的取值范围如下表所示：

| 类型              | 位数 | 取值范围            |
|-----------------|----|-----------------|
| unsigned int    | 16/32 | 0 ~ 65,535 (对于16位)，0 ~ 4,294,967,295 (对于32位) |
| unsigned short int | 16 | 0 ~ 65,535      |
| unsigned long int  | 32 | 0 ~ 4,294,967,295 |
| unsigned long long int | 64 | 0 ~ 18,446,744,073,709,551,615 |

### 回绕现象

根据C99标准（第6.2.5节第9条），涉及无符号整数的算术运算不会导致溢出；相反，当计算结果超出其数据类型所能表示的最大值时，会发生回绕现象。例如，若一个无符号整数达到了它的最大值，再加1将使其回绕至0；反之亦然，如果从最小值减1，则该数值会变为该类型的上限值。造成这种回绕行为的操作包括但不限于“+”、“-”、“*”、“++”、“--”、“+=”、“-=”和“*=”。

### 预防措施

为了防止因无符号整数回绕而导致的安全漏洞或逻辑错误，请遵循以下建议：

- **参数验证**：当函数接收无符号整数作为输入参数时，应确保对该参数的有效性进行严格检查，避免直接操作或间接通过其他计算过程引起回绕。
  
- **数据清洗**：对于来自不可信来源的数据，务必实施严格的过滤与限制策略，以消除潜在风险。
  
- **静态代码审查**：利用源代码静态分析工具定期扫描项目，可自动识别并报告可能存在的无符号整数回绕问题，从而提高软件质量与安全性。