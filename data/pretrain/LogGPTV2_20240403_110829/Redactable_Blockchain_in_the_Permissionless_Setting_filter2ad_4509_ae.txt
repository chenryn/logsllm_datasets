transaction, in turn affecting its transaction consistency.
This could discourage users from using the system due to
its unreliability as a public ledger for monetary purposes.
Since the miners are heavily invested in the system and
are expected to behave rationally, they would not vote for
such an edit request (that is against the policy) during the
voting phase.
• Victim Accountability: After a redaction is performed, our
protocol allows the data owner, whose data was removed,
to claim that it was indeed her data that was removed.
Since we store the hash of the old transaction along
with the candidate transaction in the edited block (refer
to Fig. 6b), it is possible for a user that possesses the old
data (that was removed) to verify it against the hash that is
stored in the redacted block. This enforces accountability
on the miners of the network who vote for a redaction
request by discouraging them from removing benign data.
At
the same time, our protocol guarantees protection
against false claims, as the hash veriﬁcation would fail.
(cid:18)(cid:20)(cid:20)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:48:03 UTC from IEEE Xplore.  Restrictions apply. 
VI. PROOF-OF-CONCEPT IMPLEMENTATION
In this section we report on a Python proof-of-concept
implementation used for evaluating our approach. We imple-
ment a full-ﬂedged Blockchain system based on Python 3 that
mimics all the basic functionalities of Bitcoin. Speciﬁcally, we
include a subset of Bitcoin’s script language that allows us
to insert arbitrary data into the chain, which can be redacted
afterwards. The redacting mechanism is built upon the pro-
posed modiﬁcations to Bitcoin that we describe in Section V.
For conceptual simplicity we rely on PoW as the consensus
mechanism.
A. Benchmarking
5 %
4 %
3 %
2 %
1 %
0 %
0 %
d
a
e
h
r
e
v
O
We detail
the performance achieved by our implemen-
tation running several experiments. The benchmarking was
performed in a virtual environment on a Linux server with
the following speciﬁcations.
• Intel Xeon Gold 6132 CPU @ 2.60GHz
• 128GB of RAM
• Debian Linux 4.9.0-6-amd64
• Python 3.5.3.
We measure the run time of Algorithm 1 by validating
chains of varying lengths (i.e., number of blocks) and with
different numbers of redactions in the chain. For each ex-
periment, a new chain is created and validated 50 times,
then the arithmetic mean of the run time is taken over all
runs. Each chain consists of up to 50, 000 blocks, where each
block contains 1, 000 transactions. Note that a chain of size
50, 000 blocks approximates a one year snapshot of the bitcoin
blockchain.
The great variation of the results shown in the experiments
is due to the randomness involved in the chain creation and
validation process, since each chain will contain its own set
of (different) transactions, slightly inﬂuencing the run time.
Overhead Compared to Immutable Blockchain. For the
ﬁrst series of experiments, we generate chains of length
ranging from 10, 000 up to 50, 000 blocks. We generate both,
immutable and redactable chains (with no redactions). The
goal here is to measure the overhead that comes with the
integration of our redactable blockchain protocol with an
immutable blockchain when there are no redactions performed.
The results in Fig. 8 indicate that there is only a tiny overhead.
Interestingly, we note that as the size of the chain grows,
the overhead tends to get smaller; this is because on a chain
without redactions the only extra step required is to check if
there are any votes in the coinbase transaction of a new block,
what becomes negligible compared to the veriﬁcation time as
the chain grows larger.
Overhead by Number of Redactions. For the second series
of experiments, we generate redactable chains with the number
of redactions ranging from 2% (1, 000 redactions) to 10%
(5, 000 redactions) of the blocks. The redacted transactions
within a block contains dummy data consisting of 4 bytes
that are removed during the experiment. This experiment is
intended to measure the overhead with respect to the number
10 K 20 K 30 K 40 K 50 K
Chain size (in number of blocks)
Figure 8: The graph shows the validation time overhead
required to validate a redactable chain (with no redactions)
compared to an immutable chain.
of redactions performed in a chain compared to a redactable
chain with no redactions. The results in Fig. 9 show that the
overhead tends to be at most linear in the number of redactions,
since in our prototype instead of looking ahead whether there
is a redaction request and a sufﬁcient number of votes, we
keep track of the redaction request and wait for its votes and
eventual conﬁrmation.
Overhead by the Voting Parameters (cid:5) and ρ.
In the last
series of experiments, we consider chains with 1% of the
blocks redacted. We vary the voting period (cid:5) to measure how
it inﬂuences the validation time compared to a chain with
1% of blocks redacted but with a voting period of (cid:5) = 5.
The threshold of votes ρ is set to
/(cid:5) (i.e., requiring
majority number of blocks in the voting period to contain votes
for approving a redaction). The results in Fig. 10 show that the
overhead is very small (even negligible for small sizes of (cid:5))
and tends to be at most linear in (cid:5). This meets our expectations,
since the overhead in validation time originates from keeping
and increasing the voting counts over the voting period (cid:5). In
the worst case, where ρ = 1 we need to keep track of the
voting count over the entire voting period.
(cid:3)(cid:16) (cid:4)
2(cid:17) + 1
(cid:4)
VII. DISCUSSION
In this section we discuss some of the generic attacks on
our system and how it is immune to such attacks.
Unapproved Editing. A malicious miner could pass off an
edit on the blockchain that does not satisfy the network’s
policy. This can occur if the miner presents the blockchain
with an edit that has not been considered for voting, or has
gathered insufﬁcient votes. In any of the above cases, it is
possible for any user in the network to account for an edit
by verifying in the chain if the exact edit presented by the
miner is approved or not. And since majority of the miners in
(cid:18)(cid:20)(cid:21)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:48:03 UTC from IEEE Xplore.  Restrictions apply. 
5 %
4 %
3 %
2 %
1 %
0 %
0 %
d
a
e
h
r
e
v
O
1 K
2 K
3 K
4 K
5 K
# of redactions in the chain
Figure 9: The graph shows the validation time overhead
required to validate a chain for an increasing number of
redactions, compared to a redactable chain with no redactions.
5 %
4 %
3 %
2 %
1 %
0 %
0 %
d
a
e
h
r
e
v
O
15 20 25 30 35 40 45 50 55
Voting period (cid:5)
Figure 10: The graph shows the validation time overhead
required to validate a chain (with 1% of the blocks redacted)
for increasing voting periods, compared to a chain (with 1%
of the blocks redacted) on a ﬁxed voting period of (cid:5) = 5.
the network is honest, the user accepts an approved edit as an
honest edit.
Scrutiny of Candidate Blocks.
It is in the interest of the
(honest) miners and the system as a whole, to actively scruti-
nise a candidate block and decide on voting based on its merit.
Therefore, the miners are strongly discouraged from using a
default strategy in voting, e.g., always vote for a candidate
block without scrutiny, using a pre-determined strategy that is
agnostic to what the candidate block is proposing.
Denial of Service. A malicious miner may try to ﬂood
the network with edit requests as an attempt to slow down
transaction conﬁrmation in the chain. However,
the miner
is deterred from doing this because he incurs the cost of a
transaction fee for the editTx that is part of his edit request
similar to other standard transactions. Moreover, it may also
be the case for the editTx to incur a higher transaction fee as
a strong deterrent against spamming.
False Victim. A malicious user may wrongly claim that a
particular transaction related to him was edited. For example,
he may claim that some monetary information was changed
where he was the beneﬁciary. Since such an edit could affect
the trust in the system, the user could potentially affect the
credibility of the entire system. We prevent such an attack
through victim accountability of our protocol. We can verify
the user’s claim against the hash of the old version of the
transaction that is stored in the chain itself. Given the hash
function is collision resistant, a wrong claim would fail the
check.
Double Spend Attacks. Consider a scenario where a mali-
cious user is the recipient of a transaction. If this transaction
was edited by removing some data stored in it, the hash of the
new version of the transaction is different. If the miner had
already spent the funds from the old version of this transaction,
after the edit, he may attempt a double spend by exploiting the
new version of the transaction. This is prevented by associating
the new version and the old version of the edited transaction
with each other, thereby noticing such a double spend. If
the funds had already been spent, the old version would be
a spent transaction. Because the edit that is performed does
not conﬂict with the consistency of the transaction, the new
version of the transaction would also be a spent transaction.
Consensus delays. Consider a scenario where two different
users hold chains with a different set of redacted blocks, and
therefore cannot arrive at a consensus on the ﬁnal state of the
chain, what may result in delays. Assuming the miners have
not locally redacted blocks on their own and have behaved
honestly according to the protocol, this scenario would mean
that the different set of redacted blocks in the chains held by
the two miners have been approved by the policy. However,
this would be a blatant violation of the Editable common preﬁx
property of our protocol (Theorem 3).
VIII. RELATED WORK
1) Bitcoin and Applications: Several works [8], [12], [40]
have analysed the properties and extended the features of the
Bitcoin protocol. Bitcoin as a public bulletin board has found
several innovative applications far beyond its initial scope,
e.g., to achieve fairness and correctness in secure multi-party
computation [9], [7], [15], [31], to build smart contracts [30],
to distributed cryptography [6], and more [32], [29], [16].
2) Content Insertion in Bitcoin: There have been several
works [13], [35], [36], [42], [45], [46] on analysing and
assessing the consequences of content insertions in public
blockchains. They shed light on the distribution and the usage
of such inserted data entries. The most recent work of Matzutt
et al. [34] gives a comprehensive quantitative analysis of illicit
(cid:18)(cid:20)(cid:22)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:48:03 UTC from IEEE Xplore.  Restrictions apply. 
insertions including,
content
insertion techniques, potential
risks and rational incentives. They also show that compared
to other attacks [20], [24] on Bitcoin system, illicit content
insertion can pose immediate risks to all users of the system.
3) Proactive Countermeasures: Proactive measures to de-
tect illicit material circulated in the network and detecting
them have been studied [44], [27], [25]. In a blockchain set-
ting, preventive solutions [19], [17], [37] focus on maintaining
only monetary information instead of the entire ledger history.
Matzutt et al. [33] use a rational approach of discouraging
miners from inserting harmful content into the blockchain.
They advocate a minimum transaction fee and mitigation of
transaction manipulatability as a deterrent for the same.
ACKNOWLEDGMENT
This work is a result of the collaborative research project
PROMISE (16KIS0763) by the German Federal Ministry of
Education and Research (BMBF). FAU authors were also
supported by the German research foundation (DFG) through
the collaborative research center 1223, and by the state of
Bavaria at the Nuremberg Campus of Technology (NCT). NCT
is a research cooperation between the Friedrich-Alexander-
Universit¨at Erlangen-N¨urnberg (FAU) and the Technische
Hochschule N¨urnberg Georg Simon Ohm (THN).
REFERENCES
[1] “Bitcoin script,” https://en.bitcoin.it/wiki/Script.
[2] “Interpol cyber research identiﬁes malware threat to virtual currencies,”
[5] “Child porn on bitcoin? why this doesn’t mean what you might think,”
2018, https://tinyurl.com/y8yo8ml3.
[6] M. Andrychowicz and S. Dziembowski, “PoW-based distributed cryp-
tography with no trusted setup,” in CRYPTO 2015, Part II, ser. LNCS,
R. Gennaro and M. J. B. Robshaw, Eds., vol. 9216.
Springer,
Heidelberg, Aug. 2015, pp. 379–399.
[7] M. Andrychowicz, S. Dziembowski, D. Malinowski, and L. Mazurek,
“Fair two-party computations via bitcoin deposits,” in FC 2014 Work-
shops, ser. LNCS, R. B¨ohme, M. Brenner, T. Moore, and M. Smith,
Eds., vol. 8438. Springer, Heidelberg, Mar. 2014, pp. 105–121.
[8] M. Andrychowicz, S. Dziembowski, D. Malinowski, and Ł. Mazurek,
“Modeling bitcoin contracts by timed automata,” in International Con-
ference on Formal Modeling and Analysis of Timed Systems. Springer,
2014, pp. 7–22.
[9] M. Andrychowicz, S. Dziembowski, D. Malinowski, and L. Mazurek,
“Secure multiparty computations on bitcoin,” in 2014 IEEE Symposium
on Security and Privacy.
IEEE Computer Society Press, May 2014,
pp. 443–458.
[10] G. Ateniese, M. T. Chiaramonte, D. Treat, B. Magri, and D. Venturi,
“Multiple-link blockchain,” Oct. 10 2017, uS Patent 9,785,369.
[11] ——, “Rewritable blockchain,” May 8 2018, uS Patent 9,967,096.
[12] G. Ateniese, A. Faonio, B. Magri, and B. De Medeiros, “Certiﬁed
bitcoins,” in International Conference on Applied Cryptography and