# 四、与 Docker 注册表共享映像
装运应用是 Docker 平台不可或缺的一部分。Docker 引擎可以从一个中心位置下载映像来运行容器，还可以将本地构建的映像上传到一个中心位置。这些共享的映像存储被称为**注册表**，在本章中，我们将更仔细地研究映像注册表是如何工作的，以及您可以使用的注册表类型。
主映像注册表是 Docker Hub，这是一个免费的在线服务，是 Docker 服务处理映像的默认位置。Docker Hub 是社区共享映像的好地方，这些映像是为打包开源软件而构建的，可以自由地重新分发。Docker Hub 取得了巨大的成功。在写这本书的时候，上面有几十万张图片，每年下载数十亿次。
公共注册表可能不适合您自己的应用。Docker Hub 还提供了一个商业计划，以便您可以托管私有映像(类似于 GitHub 如何让您托管公共和私有源代码存储库)，还有其他商业注册中心添加了安全扫描等功能。您还可以通过使用免费提供的开源注册表实现，在您的环境中运行您自己的注册表服务器。
在这一章中，我将向您展示如何使用这些注册表，我将介绍标记映像(这是您如何对 Docker 映像进行版本化)以及使用不同注册表中的映像的更详细的信息。我们将涵盖:
*   了解注册表和存储库
*   运行本地映像注册表
*   使用本地注册表推送和拉取映像
*   使用商业登记处
# 了解注册表和存储库
您可以使用`docker image pull`命令从注册表下载映像。当您运行该命令时，Docker 引擎会连接到注册表，进行认证(如果需要的话)并下拉映像。拉进程下载所有映像层，并将它们存储在机器上的本地映像缓存中。容器只能从本地映像缓存中可用的映像运行，因此除非它们是在本地构建的，否则需要首先提取它们。
当您开始在 Windows 上使用 Docker 时，您运行的最早的命令之一将是一些简单的东西，比如第 2 章*中的这个例子，将应用打包并运行为 Docker 容器*:
```
> docker container run dockeronwindows/ch02-powershell-env:2e
Name                           Value
----                           -----
ALLUSERSPROFILE                C:\ProgramData
APPDATA                        C:\Users\ContainerAdministrator\AppData\Roaming
...
```
即使您的本地缓存中没有该映像，这也可以工作，因为 Docker 可以从默认注册表 Docker Hub 中提取它。如果您试图从本地没有存储的映像中运行容器，Docker 会在创建容器之前自动提取它。
在这个例子中，我并没有给 Docker 太多的信息——只有映像名`dockeronwindows/ch02-powershell-env:2e`。这个细节足以让 Docker 在注册表中找到正确的映像，因为 Docker 用默认值填充了一些缺失的细节。存储库的名称是`dockeronwindows/ch02-powershell-env`存储库是一个存储单元，可以包含多种版本的 Docker 映像。
# 检查映像存储库名称
存储库有一个固定的命名方案:`{registry-domain}/{account-id}/{repository-name}:{tag}`。所有零件都是必需的，但 Docker 假定某些值为默认值。所以`dockeronwindows/ch02-powershell-env:2e`实际上是完整存储库名称的简称，`docker.io/dockeronwindows/ch02-powershell-env:2e`:
*   `registry-domain`是存储映像的注册表的域名或 IP 地址。Docker Hub 是默认注册表，因此当您使用 Hub 中的映像时，可以省略注册表域。如果您没有指定，Docker 将使用`docker.io`作为注册表。
*   `account-id`是在注册表中拥有映像的帐户或组织的名称。在 Docker Hub 上，帐户名是必需的。我自己的账号 ID 是`sixeyed`，本书所附图片的组织账号 ID 是`dockeronwindows`。在其他注册中心，可能不需要帐户标识。
*   `repository-name`是您希望在注册表中您的帐户的所有存储库中，为您的映像指定的唯一标识应用的名称。
*   `tag`是如何区分存储库中不同的映像变化。
您可以使用标签对应用进行版本控制或识别变体。如果在构建或拉取映像时没有指定标签，Docker 会使用默认标签`latest`。当您开始使用 Docker 时，您将使用 Docker Hub 和`latest`标签，这是 Docker 提供的默认设置，以隐藏一些复杂性，直到您准备深入挖掘。当您继续使用 Docker 时，您将使用标签来明确区分应用包的不同版本。
微软就是一个很好的例子.NET Core 基础映像，位于`microsoft/dotnet`存储库中的 Docker Hub 上。.NET Core 是一个跨平台的应用栈，运行在 Linux 和 Windows 上。您只能在基于 Linux 的 Docker 主机上运行 Linux 容器，并且只能在基于 Windows 的 Docker 主机上运行 Windows 容器，因此微软在标签名称中包含了操作系统。
在撰写本文时，微软有几十个版本的。可在`microsoft/dotnet`存储库中使用的 NET Core 映像，用不同的标签标识。这些只是一些标签:
*   `2.2-runtime-bionic`一个基于 Ubuntu 版本的 Linux 镜像，其中有.NET Core 2.2 运行时已安装
*   `2.2-runtime-nanoserver-1809`一个 Nano Server 版本的映像，其中有.NET Core 2.2 运行时已安装
*   `2.2-sdk-bionic`一个基于 Debian 的 Linux 镜像，它具有。已安装. NET Core 2.2 运行时和 SDK
*   `2.2-sdk-nanoserver-1809`一个具有。已安装. NET Core 2.2 运行时和 SDK
标签清楚地表明了每个映像包含的内容，但它们本质上都是相似的——它们都是`microsoft/dotnet`的变体。
Docker 还支持多拱形映像，其中单个映像标签被用作许多变体的保护伞。基于 Linux 和 Windows 操作系统，或者英特尔和**高级 RISC 机器** ( **ARM** )处理器，可能会有映像变化。它们都使用相同的映像名称，当您运行`docker image pull`时，Docker 会为您的主机操作系统和 CPU 架构提取匹配的映像。.NET Core images 这样做–`docker image pull microsoft/dotnet:2.2-sdk`会在 Linux 机器上下载 Linux 映像，在 Windows 机器上下载 Windows 映像。
If you publish a cross-platform app to Docker Hub and you want to make it as easy as possible for consumers to use it, you should publish it as a multi-arch image. In your own development, it's better to be explicit and specify the exact `FROM` image in your Dockerfiles, otherwise your app will build differently on different operating systems.
# 构建、标记和版本化映像
您可以在第一次构建映像时对其进行标记，但也可以使用`docker image tag`命令向映像中显式添加标记。这在对成熟的应用进行版本控制时非常有用，因此用户可以选择他们想要使用的版本控制级别。如果您要运行以下命令，您将构建一个具有五个标签的映像，对于应用版本具有递增的精度级别:
```
docker image build -t myapp .
docker image tag myapp:latest myapp:5
docker image tag myapp:latest myapp:5.1
docker image tag myapp:latest myapp:5.1.6
docker image tag myapp:latest myapp:bc90e9
```
初始的`docker image build`命令没有指定标签，因此新映像将默认为`myapp:latest`。每一个后续的`docker image tag`命令都会给同一张图片添加一个新的标签。标记不会复制映像，因此不存在数据重复–您只有一个映像，可以用几个标记引用它。通过添加所有这些标签，您可以让消费者选择使用哪个映像，或者根据自己的映像。
这个示例应用使用语义版本控制。最后一个标签可能是触发构建的源代码提交的标识；这可能会在内部使用，但不会公开。`5.1.6`为补丁版本，`5.1`为次要版本号，`5`为主要版本号。
用户可以明确使用`myapp:5.1.6`，这是最具体的版本号，知道标签在那个级别不会改变，映像永远不变。下一个版本将有标签`5.1.7`，但这将是一个不同的应用版本的不同映像。
`myapp:5.1`将随着每个补丁的发布而改变——下一个版本`5.1`将是`5.1.7`的标签别名——但是用户可以确信不会有任何重大改变。`myapp:5`将随着每个小版本而改变——下个月，它可能是`myapp:5.2`的别名。如果用户总是想要版本 5 的最新版本，他们可以选择主要版本，或者如果他们总是想要最新版本，他们可以使用最新版本，并且可以接受打破更改的可能性。
作为映像的制作者，您可以决定如何在映像标签中支持版本控制。作为消费者，你应该更具体一些——尤其是在你自己的构建中使用的`FROM`映像。如果您正在打包一个. NET Core 应用，如果您像这样启动 Dockerfile，您将会遇到问题:
```
FROM microsoft/dotnet:sdk
```
在撰写本文时，此映像的版本为 2.2.103。已安装. NET Core SDK。如果你的应用的目标是 2.2 版本，那没关系；映像将被构建，您的应用将在容器中正确运行。但是当.NET Core 2.3 或 3.0 发布后，通用的`:sdk`标签将被应用到新镜像中，可能不支持瞄准 2.2 应用。当您在该版本之后使用完全相同的 Dockerfile 时，它将使用不同的基础映像—您的映像构建可能会失败，或者它可能会在运行时仅在应用出现重大更改时才完成.NET 核心更新。
相反，您应该考虑为您正在使用的应用框架的次要版本使用一个标签，如果它是一个多拱形映像，则明确说明操作系统和 CPU 体系结构:
```
FROM microsoft/dotnet:2.2-sdk-nanoserver-1809
```
这样，您将从映像的任何补丁版本中受益，但您将始终使用的 2.2 版本.NET Core，所以您的应用在基本映像中总是有一个匹配的主机平台。
您可以标记本地缓存中的任何映像，而不仅仅是您自己构建的映像。如果您想重新标记一个公共映像，并将其添加到本地私有注册表中一组已批准的基础映像中，这将非常有用。
# 将映像推送到注册表
构建和标记映像是本地操作。`docker image build`和`docker image tag`的最终结果是对运行命令的 Docker 引擎上的映像缓存进行了更改。映像需要通过`docker image push`命令明确共享到注册表中。
Docker Hub 可以在不进行认证的情况下使用，以拉取公共映像，但是要上传映像(或拉取私有映像)，您需要注册一个帐户。注册在[https://hub.docker.com/](https://hub.docker.com/)是免费的，在那里你可以创建一个 Docker 标识，你可以在 Docker 中心和其他 Docker 服务中使用。您的 Docker 标识是您如何向 Docker 服务进行认证以访问 Docker 中心。这是通过`docker login`命令完成的:
```
> docker login
Login with your Docker ID to push and pull images from Docker Hub. If you don't have a Docker ID, head over to https://hub.docker.com to create one.
Username: sixeyed
Password:
Login Succeeded
```
要将映像推送到 Docker Hub，存储库名称必须包含您的 Docker ID 作为帐户 ID。您可以使用任何帐户标识(如`microsoft/my-app`)在本地标记映像，但不能将其推送到注册表中的微软组织。您登录时使用的 Docker ID 需要有权限推送至注册表中的帐户。
当我发布映像以配合这本书时，我在存储库中用`dockeronwindows`作为帐户名来构建它们。这是 Docker Hub 上的一个组织，我自己的用户帐户`sixeyed`可以将映像推送至该组织。当我以`sixeyed`身份登录时，我可以将映像推送至属于`sixeyed`或`dockeronwindows`的存储库:
```
docker image push sixeyed/git:2.17.1-windowsservercore-ltsc2019 docker image push dockeronwindows/ch03-iis-healthcheck:2e 
```
Docker CLI 的输出显示了如何将映像分割成层，并告诉您每个层的上传状态:
```
The push refers to repository [docker.io/dockeronwindows/ch03-iis-healthcheck]
55e5e4877d55: Layer already exists
b062c01c8395: Layer already exists
7927569daca5: Layer already exists
...
8df29e538807: Layer already exists
b42b16f07f81: Layer already exists
6afa5894851e: Layer already exists
4dbfee563a7a: Skipped foreign layer
c4d02418787d: Skipped foreign layer
2e: digest: sha256:ffbfb90911efb282549d91a81698498265f08b738ae417bc2ebeebfb12cbd7d6 size: 4291
```
This image uses Windows Server Core as the base image. That image is not publicly redistributable – it's listed on Docker Hub, and free to download from the Microsoft Container Registry, but it is not licensed to be stored on other public image registries. That's why we can see the lines stating *Skipped foreign layer* – Docker will not push layers containing the Windows OS to Docker Hub.