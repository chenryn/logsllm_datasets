specific implant.
Add functionality that makes an implant register itself with
the server upon initial connection, and add functionality for
the admin client to retrieve a list of registered implants.
Perhaps you assign a unique integer to each implant or use a
UUID (check out https://github.com/google/uuid/). This will
require changes to both the admin and implant APIs, starting
with your implant.proto file. Add a RegisterNewImplant RPC
method to the Implant service, and add ListRegisteredImplants to the
Admin service. Recompile the schema with protoc, implement the
appropriate interface methods in server/server.go, and add the
new functionality to the logic in client/client.go (for the admin
side) and implant/implant.go (for the implant side).
Add Database Persistence
If you completed the previous exercises in this section, you
added some resilience to the implants to withstand connection
disruptions and set up registration functionality. At this point,
you’re most likely maintaining the list of registered implants
in memory in server/server.go. What if you need to restart the
server or it dies? Your implants will continue to reconnect, but
when they do, your server will be unaware of which implants
are registered, because you’ll have lost the mapping of the
implants to their UUID.
Update your server code to store this data in a database of
your choosing. For a fairly quick and easy solution with
minimal dependencies, consider a SQLite database. Several
Go drivers are available. We personally used go-sqlite3
(https://github.com/mattn/go-sqlite3/).
Support Multiple Implants
Realistically, you’ll want to support multiple simultaneous
implants polling your server for work. This would make your
RAT significantly more useful, because it could manage more
than a single implant, but it requires pretty significant changes
as well.
That’s because, when you wish to execute a command on
an implant, you’ll likely want to execute it on a single specific
implant, not the first one that polls the server for work. You
could rely on the implant ID created during registration to
keep the implants mutually exclusive, and to direct commands
and output appropriately. Implement this functionality so that
you can explicitly choose the destination implant on which the
command should be run.
Further complicating this logic, you’ll need to consider that
you might have multiple admin operators sending commands
out simultaneously, as is common when working with a team.
This means that you’ll probably want to convert your work and
output channels from unbuffered to buffered types. This will
help keep execution from blocking when there are multiple
messages in-flight. However, to support this sort of
multiplexing, you’ll need to implement a mechanism that can
match a requestor with its proper response. For example, if
two admin operators send work simultaneously to implants,
the implants will generate two separate responses. If operator
1 sends the ls command and operator 2 sends the ifconfig
command, it wouldn’t be appropriate for operator 1 to receive
the command output for ifconfig, and vice versa.
Add Implant Functionality
Our implementation expects the implants to receive and run
operating system commands only. However, other C2 software
contains a lot of other convenience functions that would be
nice to have. For example, it would be nice to be able to
upload or download files to and from our implants. It might be
nice to run raw shellcode, in the event we want to, for
example, spawn a Meterpreter shell without touching disk.
Extend the current functionality to support these additional
features.
Chain Operating System Commands
Because of the way Go’s os/exec package creates and runs
commands, you can’t currently pipe the output of one
command as input into a second command. For example, this
won’t work in our current implementation: ls -la | wc -l. To fix
this, you’ll need to play around with the command variable,
which is created when you call exec.Command() to create the
command instance. You can alter the stdin and stdout
properties to redirect them appropriately. When used in
conjunction with an io.Pipe, you can force the output of one
command (ls -la, for example) to act as the input into a
subsequent command (wc -l).
Enhance the Implant’s Authenticity and Practice
Good OPSEC
Good OPSEC
When you added encrypted communications to the implant in
the first exercise in this section, did you use a self-signed
certificate? If so, the transport and backend server may arouse
suspicion in devices and inspecting proxies. Instead, register a
domain name by using private or anonymized contact details
in conjunction with a certificate authority service to create a
legitimate certificate. Further, if you have the means to do so,
consider obtaining a code-signing certificate to sign your
implant binary.
Additionally, consider revising the naming scheme for your
source code locations. When you build your binary file, the
file will include package paths. Descriptive pathnames may
lead incident responders back to you. Further, when building
your binary, consider removing debugging information. This
has the added benefit of making your binary size smaller and
more difficult to disassemble. The following command can
achieve this:
$ go build -ldflags="-s -w" implant/implant.go
These flags are passed to the linker to remove debugging
information and strip the binary.
Add ASCII Art
Your implementation could be a hot mess, but if it has ASCII
art, it’s legitimate. Okay, we’re not serious about that. But
every security tool seems to have ASCII art for some reason,
so maybe you should add it to yours. Greetz optional.
SUMMARY
Go is a great language for writing cross-platform implants,
like the RAT you built in this chapter. Creating the implant
was likely the most difficult part of this project, because using
Go to interact with the underlying operating system can be
challenging compared to languages designed for the operating
system API, such as C# and the Windows API. Additionally,
because Go builds to a statically compiled binary, implants
may result in a large binary size, which may add some
restrictions on delivery.
But for backend services, there is simply nothing better.
One of the authors of this book (Tom) has an ongoing bet with
another author (Dan) that if he ever switches from using Go
for backend services and general utility, he’ll have to pay
$10,000. There is no sign of him switching anytime soon
(although Elixir looks cool). Using all the techniques
described in this book, you should have a solid foundation to
start building some robust frameworks and utilities.
We hope you enjoyed reading this book and participating
in the exercises as much as we did writing it. We encourage
you to keep writing Go and use the skills learned in this book
to build small utilities that enhance or replace your current
tasks. Then, as you gain experience, start working on larger
codebases and build some awesome projects. To continue
growing your skills, look at some of the more popular large
Go projects, particularly from large organizations. Watch talks
from conferences, such as GopherCon, that can guide you
through more advanced topics, and have discussions on pitfalls
and ways to enhance your programming. Most importantly,
have fun—and if you build something neat, tell us about it!
Catch you on the flippity-flip.
INDEX
A
A records, 104, 109–111
Abstract Syntax Notation One (ASN.1) encoding, 133–135,
137–138
acme/autocert, 235
Add(int), 27
Address Resolution Protocol (ARP) poisoning, 178
Advanced Encryption Standard (AES) algorithm, 242
ancillary chunks, 302
anonymous functions, 126
API interaction
overview, 51–53
Bing scraping, 68–76
Metasploit, 59–68
Shodan, 51–59
APIInfo struct, 55
append() function, 11
ARP (Address Resolution Protocol) poisoning, 178
ASN.1 (Abstract Syntax Notation One) encoding, 133–135,
137–138
assembly, 216
asymmetric algorithms, 234
asymmetric cryptography, 245. See also encryption
Atom, GitHub, 4–5
authentication, 67, 86–88, 239–241
B
backticks, 19
base workspace directory, 2
Base64 encoding, 215–216
bcrypt hashing, 235, 237–239
Beacon, 121
Berkeley Packet Filter (BPF), 175, 181. See also tcpdump
best practices
coding, 19, 49, 66, 185, 195, 329
security, 96, 236
bin directory, 2
binaries, 2
binary data handling, 213–216
Bing, 68–76
bodyType parameter, 46
braces, 14
break statements, 14
brute force, 252–261
buffer overflow fuzzing, 188–192
buffered channels, 29, 37–39
bufio package, 38, 112–113, 197
build command, 7
build constraints, 7–8
byte slices, 19
bytes package, 197
C
C, 201–212, 290–293
C transform, 213
Caddy Server, 127
.Call() method, 273
canonical name (CNAME) records, 109–111
capture() function, 184
CGO package, 291
channels, 16–17
Checker interface, 220–222
Cipher Block Chaining (CBC) mode, 242
ciphertext, 234
cleartext
overview, 234
passwords, 150
sniffing, 178–180
client implants, 323–325, 327–329
Client struct, 53–54
cloned sites, 90–93
Close() method, 25
closed ports, 22
Cmd, 41
CNAME records, 109–111
Cobalt Strike, 118–124, 278
COFF File Header, 282–283
collision, 234
Command() function, 41
commands
build command, 7
cross-compiling, 7–8
go commands, 6–9
set command, 3
complex data types, 10–11
concurrency, 16–17, 37
concurrent scanning, 26–32
Conn, 35–38
connections, 24–25, 35, 327
constraints, 7–8
control structures, 14–16
convenience functions, 46–47, 140
Copy() function, 40
createChunkCRC() method, 304–305
CreateRemoteThread() Windows function, 275–276
credential-harvesting attacks, 90–93
critical chunks, 302
cross-compiling, 7–8
cross-site scripting, 94
crypto package, 197, 235
cryptography
overview, 234–235
hashing, 234–239
curl, 40, 79
D
Data Directory, 285–287
data mapping, 71–73, 125
data types
channels, 16
maps, 11
primitive, 10–11
slices, 11
database miners, 161–170
debug package, 197
decoder function, 300
decoding process, 308
decryption, 234. See also encryption
DefaultServerMux, 78–79
defer, 49
DELETE requests, 47–48
dep tool, 9
development environment set up, 1–10
Dial() method, 24
dialects, 132–133
directives, 19
Dirty COW, 201–204
DNS clients, 104–117
DNS proxies, 124–127
DNS servers, 117–129
DNS tunneling, 121
do loops, 15
Docker, 90, 118–122, 154–158
document metadata, 69
Document Object Model (DOM), 74
domain fronting, 98
DOS Header, 281
DWORD, 271
E
echo servers, 32, 35–37
Empire, 121
Encode() method, 65
encodeDecode() function, 308
encoding package, 197
encoding process, 308
encryption, 234, 242–252
endianness function, 299
error handling, 17–18
error messages, 51
Exclusive OR (XOR), 307–312
Executable and Linkable Format (ELF), 203
exploitation, 196–212
export address table (EAT), 279
F
field tags, 19–20, 139
filesystems, 170–171
filetype filter, 73
filtered ports, 22
filtering search results, 73–76
firewalls, 22–23
fixed field tag, 140
Flusher, 42
fmt package, 25
FOCA, 69
Foo struct, 19
for loop, 15
formatting
data, 38, 113–114
source code, 9
Frida, 278
fully qualified domain name (FQDN), 104
fuzzing, 188–196
G
gaping security holes, 41
Get() function, 46
get() HTTP function, 227–229
GetLoadLibAddress() function, 275
GetProcessAddress() Windows function, 275
getRegex() function, 163
GetSchema() function, 163, 165
Gieben, Miek, 104
GitHub Atom, 4–5
GNU Compiler Collection (GCC), 290
go build command, 6–7
Go DNS package, 104
go doc command, 8
go fmt command, 9
go get command, 8–9
Go Playground execution environment, 10
go run command, 6
Go Syntax
complex data types, 10–11
concurrency, 16–17
control structures, 14–16
data types, 10–11
interface types, 13
maps, 11
patterns, 12–14
pointers, 12
primitive data types, 10–11
slices, 11
struct types, 12–13
go vet command, 9
GOARCH constraint, 7–8
GoLand, 5–6
golint command, 9
GOOS constraint, 7–8
gopacket package, 174
gopacket/pcap subpackage, 174–175
GOPATH environment variable, 2–3
goquery package, 69
gorilla/mux package, 82–83, 84, 101
gorilla/websocket package, 96
GOROOT environment variable, 2–3
goroutines, 16–17, 26–32
gRPC framework, 316–319
gss package, 138
H
HandleFunc() method, 82
handler() function, 75–76
handles, 271. See also tokens
handshake process, 22–23
hash-based authentication, 147–150
hashing, 234–239
Head() function, 46
head() HTTP function, 226–227
hex transform, 214
hexadecimal 198, 281, 297
HMAC (Keyed-Hash Message Authentication Code) standard,
240–241
Holt, Matt, 127
host search, 55–57
HTTP clients
overview, 46–51
Bing scraping, 68–76
Metasploit interaction, 59–68
Shodan interaction, 51–59
HTTP servers
overview, 78–90
credential-harvesting attacks, 90–93
multiplexing, 98–102
WebSocket API (WebSockets), 93–98
http.HandleFunc(), 78–79
I
if statements, 18
implant code, 323–325, 327–329
import address table (IAT), 279
indexing metadata, 68–76
infinite loops, 37
init() function, 101
input/output (I/O) tasks, 32–35
instreamset filter, 73