will need an extra degree of ﬂexibility to support up-and-
coming apps. A large part of our work focuses on an extension
platform that enables near-arbitrary programmatic interaction
with the user’s personal data, in a veriﬁably privacy-preserving
manner.
133
Browser 
Core mining 
Core mining 
Core mining 
Core mining 
Miners 
RePriv APIs 
Personal store 
s
e
i
c
i
l
o
p
d
n
a
t
n
e
s
n
o
c
r
e
s
U
3rd party 
providers 
1st party 
providers 
Fig. 1: REPRIV architecture.
Topic-Speciﬁc Functionality: Users may spend a large
amount of time at particular types of sites, e.g. movie-
related, science, or ﬁnance sites. Users will expect speciﬁc
personalization on these sites that cannot be provided by
a general-purpose behavior mining algorithm. To facilitate
this, third-party developers should be able to write extensions
that have site-speciﬁc understanding of user input, and are
able to mediate REPRIV’s stored personalization information
accordingly. For example, a plugin should be able to track the
user’s interaction with Netﬂix, observe which movies he likes
and dislikes, and update his interest proﬁle to reﬂect these
preferences.
Web Service Relay: Many web API’s now provide services
relevant
to personalization. For example, Netﬂix now has
an API that allows a third-party developer to programmati-
cally access information about the user’s account, including
their movie preferences and purchase history. Other exam-
ples allow a third-party developer to submit portions of a
user’s overall preference proﬁle or history to receive content
recommendations or ratings; getglue.com, hunch.com, and
tastekid.com are all examples of this. REPRIV extensions
should be able to act as intermediaries between the user’s
personal data and the services offered by these API’s. For
example, when a user navigates to fandango.com, the site
can query an extension that in turn consults the user’s Netﬂix
interactions and Amazon purchases, and returns useful derived
information to Fandango for personalized show times or ﬁlm
reviews.
Direct Personalization: In many cases, it is not reasonable to
expect a web site to keep up with the user’s personalization
expectations. It is often simpler to write an extension that can
access REPRIV’s repository of user information, and modify
the presentation of selected sites to reﬂect preferences. To
facilitate this need, REPRIV extensions should be able to
interact with and modify the DOM structure of selected web
sites to reﬂect the contents of the user’s personal information.
D. Incentives for Users, Service Providers, and Developers
Users: The incentives for users to adopt REPRIV are imme-
diate: REPRIV was designed to facilitate the types of person-
alized web experience that have become popular today, while
134
allowing users to maintain control of their personal informa-
tion. REPRIV also helps to solve the cold-start problem, where
a user visits a new web site and cannot recieve personalized
content for lack of data. Finally, we have demonstrated that
REPRIV’s performance overhead is minimal, so there is little
disincentive for a user to adopt REPRIV.
Service providers: While a truly anonymous browsing mode
would leave content providers without an alternative, incen-
tives already exist for service providers to adopt REPRIV
without the need for such measures. The ﬁrst such incentive is
the quality of information that REPRIV can provide relative to
other techniques. REPRIV gives service providers the opportu-
nity to utilize data that is not impeded by tracker blockers on
the client, that is derived using information from the user’s
complete browsing experience. Secondly, because REPRIV
gives content providers a way to respect user privacy without
sacriﬁcing functionality, they can differentiate themselves from
competitors by appealing to the users’ desire for privacy.
Miner developers: Finally, we foresee a number of likely
scenarios to incentivize miner authorship. First observe that
incentive must already exist, as developers already produce
browser extensions that track user behavior; this is typically
done without the user’s consent, and is sometimes referred to
as spyware [22] (one famous example is the Alexa toolbar,
published by Amazon). REPRIV gives these developers a
way of writing similar functionality, but in a manner that is
veriﬁably benign. Another likely scenario arises with con-
tent recommendation services, such as getglue.com and
hunch.com. These sites allow users to create proﬁles of their
interests for sharing with other users and receiving content
recommendations. Key to the effectiveness of these services
is the amount of personal information that can be used for
recommendation. REPRIV miners are a safe way for these
sites to gather this information.
E. Monetizing Privacy with REPRIV
In addition to improving matters in the currently deployed
ecosystem of users, service providers, advertising networks,
personalization services, etc. we want to point out that REPRIV
opens up an entirely new market for personal data. Today,
when a user visits a cite that chooses to track the user
by, say, leaving a cookie in her browser, in many way this
is tantamount to a theft of personal information. While a
single incident of this sort might be overlooked, the reality
of the situation is that user tracking happens daily, on quite a
large-scale, as evidences by the Wall Street Journal series of
articles [18]. A key observation here is that REPRIV can act
as a broker in this emerging markeplace of private user data.
While more research is clearly needed, one example sce-
nario is that of a user visiting the Barnes & Noble online
bookstore and being asked to share their top-level interests. If
they choose to do so, the bookstore will give them a $5 coupon
towards their next purchase. In this transaction, everybody
beneﬁts: the user is given personalized shopping experience
in the form of a customized bn.com page, the retailer is
presenting a more relevant book selection and provides a
monetary incentive for the user to make a purchase. Finally,
the browser manufacturer can, by virtual of orchestrating this
transaction, collect a fee from the retailer, which might be
10% of the coupon or purchase amount. This is not unlike
what happens in the case of pay-per-click advertising, but this
kind of transaction is much more direct and streamlined.
III. TECHNICAL ISSUES
This section is organized as follows. Section III-A discusses
browser modiﬁcations we implemented to support REPRIV.
Section III-B discusses support for REPRIV miners.
A. Browser Modiﬁcations
Our current research prototype is built on top of C3, an
HTML5 experimental platform developed in .NET [21]. How-
ever, we believe that other browsers can be modiﬁed in a very
similar manner. We modiﬁed C3 in the following ways to add
support for REPRIV:
• Added a behavior mining algorithm that observes users’
browsing behavior and automatically updates a proﬁle of
user interests (Section III-A).
• Implemented a communication protocol that sits on top
of HTTP and allows web sites to utilize the information
maintained by REPRIV in the browser (Section III-A).
• Implemented an extension framework that allows third-
party extensions to utilize the information maintained
by REPRIV, and interact programatically with web sites
(Section III-B).
The core of these modiﬁcations is the repository of user
interest and behavior information, called the personal store.
This is a local database, encrypted to prevent tampering or
spying by other applications.
User Behavior Mining: The goal of our general-purpose
behavior mining algorithm is to provide relevant parties with
two types of information about the user:
• Top-n topics of interest, where n can vary to suit the
needs of each particular application,
• The level of interest in a given set of topics, normalized
to a reasonable scale.
We selected these types of information for compatibility with
existing personalization schemes [32, 34]; as we show in one
of our case studies (Section VI),
is straightforward to
map between this representation and those used by existing
personalization frameworks and APIs. Applications that do
not ﬁt this mold can build arbitrary data models using the
extension framework discussed in Section III-B.
it
Our approach works by classifying individual documents
viewed in the browser, and keeping the aggregate information
of total browsing history with respect to document categories
in the personal store.
Interest Categories: To characterize user interests, we use
a hierarchical taxonomy of document topics maintained by
the Open Directory Project (ODP) [28]. The ODP classiﬁes a
portion of the web according to a hierarchical taxonomy with
135
several thousand topics, with speciﬁcity increasing towards the
leaf nodes of the tree. We use only the most general two levels
of the taxonomy, which account for 450 topics. To convey the
level of speciﬁcity contained in our interest hierarchy, a small
portion is presented in Figure 2.
be
top 
science 
sports 
math 
physics 
football 
is
used
Fig. 2: Portion of taxonomy.
taxonomy-based
Our
classiﬁcation
interest
similar
to
scheme
those
targeted
by
advertising networks [11].
As elucidated by Narayanan
and Shmatikov [26], care
must
taken when
selecting the taxonomy to ensure that the target population is
not distributed too sparsely among topics in the taxonomy,
as anonymity attacks may result. As shown in Figure 2, the
depth and speciﬁcity of our taxonomy is quite limited.
Classifying Documents: Of primary importance for our doc-
ument classiﬁcation scheme is performance: REPRIV’s default
behavior must not impact normal browsing activities in a
noticeable way. This immediately rules out certain solutions,
such as querying existing web API’s that provide classiﬁcation
services. We use the Na¨ıve Bayes classiﬁer for its well-known
performance in document classiﬁcation tasks, as well as its
low computation cost on most problem instances. However,
REPRIV’s high-level functionality is independent of the spe-
ciﬁc type of classiﬁer used, so this part of the implementation
can be varied to suit changing technologies and needs.
To create our Na¨ıve Bayes classiﬁer, we obtained 3,000
documents from each category of the ﬁrst two levels of the
ODP taxonomy. We selected attribute words as those that occur
in at least 15% of documents for at least one category, not
including stop words such as “a”, “and”, and “the”. We then
ran standard Na¨ıve Bayes training on the corpus, calculating
the needed probabilities P (wi Cj), for each attribute word wi
and each class Cj. Calculating document topic probabilities
at runtime is then reduced to a simple log-likelihood ratio
calculation over these probabilities.
To ensure that the cost of running topic classiﬁers on a
document does not affect browsing activities, this computation
is done in a background worker thread. When a document
has ﬁnished parsing, its TextContent attribute is queried and
added to a task queue. When the background thread activates,
it consults this queue for unﬁnished classiﬁcation work, runs
each topic classiﬁer, and updates the personal store. Due to the
interactive characteristics of internet browsing, i.e. periods of
bursty activity followed by downtime for content consumption,
there are likely to be many opportunities for the background
thread to complete the needed tasks.
Aggregate Statistics: REPRIV uses the classiﬁcation informa-
tion from individual documents to relay aggregate information
about user interests to relevant parties. The ﬁrst type of infor-
mation that REPRIV provides is the “top-n” statistic, which
reﬂects n taxonomy categories that comprise more of the
user’s browsing history than the other categories. Computing
this statistic is done incrementally, as browsing entries are
classiﬁed and added to the personal store.
The second type of information provided by REPRIV is the
degree of user interest in a given set of interest categories.
For each interest category, this is interpreted as the portion
of the user’s browsing history comprised of sites classiﬁed
with that category. This statistic is efﬁciently computed by
indexing the database underlying the personal store on the
column containing the topic category.
Interest Protocol:
REPRIV allows third-party web sites to query the browser
for two types of information that are computed by default
when REPRIV runs. The protocols are depicted graphically in
Figure 3. The design of these protocols is constrained by the
following concerns:
1) Secure dissemination of personal information. The
user should have explicit control over the information
that is passed from the browser to the third-party web
site, and the parties it is given to.
2) Backwards compatibility with existing protocols. Site
operators should not need to run a separate daemon on
behalf of REPRIV users, or change network infrastruc-
ture to accomodate new protocols.
To address these concerns, we have developed a protocol
that utilizes facilities already present in the HTTP speciﬁ-
cation. This allows implementations to use existing secrecy-
preserving HTTP extensions such as HTTPS, without requir-
ing new protocols. We will now walk through each step of the
protocol. There are two shown in Figure 3; one for each type
of information that can be queried (top-n interests and speciﬁc
interest level by category). However, they differ only in minor
ways regarding the types of information communicated.
The client signals its ability to provide personal information
by including a repriv element in the Accept ﬁeld of the
standard HTTP header. If the server daemon is programmed
to understand this ﬂag, then it may respond with an HTTP 300
message, providing the client with the option of subsequently
requesting the default content, or providing personal informa-
tion to receive personalized content. The information requested
by the server is encoded as URL parameters in one of the
content alternatives listed in this message. For example, the
server in Figure 3(b) requests the user’s interest in the topic
“category-n”, which is encoded by specifying catN as the
value for the interest variable. At this point, the browser
prompts the user regarding the server’s information request,
in order to declassify the otherwise prohibited ﬂow from the
personal store to an untrusted party. If the user agrees to the
information release, then the client responds with a POST mes-
sage to the originally-requested document, which additionally
contains the answer to the server’s request. Otherwise, the
connection is dropped.
B. Miner Support
To support a degree of ﬂexibility and allow future person-
alization applications to integrate into its framework, REPRIV
provides a mechanism for loading third-party software that
utilizes the personal store. We call REPRIV extensions miners,
to reﬂect the fact that they are intended to assist with novel
behavior mining tasks. Of primary importance to supporting
miners correctly is ensuring that (1) they do not leak private
user data to third parties without explicit consent from the