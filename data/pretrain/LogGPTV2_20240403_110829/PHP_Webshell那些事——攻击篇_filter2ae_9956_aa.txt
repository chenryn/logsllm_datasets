# PHP Webshell那些事——攻击篇
##### 译文声明
本文是翻译文章，文章原作者 ASRC，文章来源：ASRC
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
作者：阿里云云安全中心
## 前言
Webshell是网站入侵的常用后门，利用Webshell可以在Web服务器上执行系统命令、窃取数据、植入病毒、勒索核心数据、SE0挂马等恶意操作，危害极大。
所谓Webshell，主要指可以被例如apache、tomcat、nginx在内的webserver即时解释执行的脚本语言编写而成的文本文件，其本质是一种text文本文件。因其隐秘性、基于脚本、灵活便捷、功能强大等特点，广受黑客们的喜爱，因此Webshell的检测也成为云安全防御的重点，甚至成为网站安全防御的一个标配。
近几年攻防对抗不断升级，防御的挑战越来越大，攻防的战场已经不再是谁见的样本多，而越来越转向方法论层面的对抗，攻击者往往会倾向于找到某种方法论体系，通过体系层面，来对防守方发起挑战。安骑士Webshell检测系统在对抗的过程中，逐步发展出了静态规则+动态规则+词法ast解析+动态模拟执行+机器学习等多种综合手段，目的也是为了尽量提高攻击绕过的门槛和成本，缓解Webshell攻击问题。
本文作为这个系列文章的开篇，会着重从攻击者视角，用体系化的方式介绍当前业内Webshell攻击的主要方法论以及具体技术细节。目的是希望能给业内同行带来一些启发，共同进步，提升检测防御能力。
在后续的文章后，我们还会陆续推出各种恶意代码语言的攻击方式方法论分析，以及安骑士在检测方面的技术积累，希望能和同行有更多交流机会。
## Webshell攻击的体系化认知
俗话说，“工欲善其事必先利其器”，作为工程师，体系化认知就是我们最好的“利器”，初期点状的知识积累固然没有太大问题，但是越往后深入，对体系化认知的需求就会越强，它能让你把笔记本读薄。
也许在读这篇文章之前，读者朋友已经了解过非常多的PHP Webshell攻击技巧、名词，例如
  * 字符串拼接
  * 隐式数据类型转换
  * preg_replace
  * 各种callback
  * 等等…
但是这篇文章，我们尝试对各种方式进行“格物”，建立一个概念框架，因为一旦概念框架建立后，我们就可以在概念框架内进行自由地发散思考，同时又不至于陷入局部的最优中，而忽略了全盘上的星星点点。
### 1、利用PHP语言特性
PHP是一种动态弱类型语言，参数传递、类型转换、函数调用方式都非常灵活，这给开发者带来开发便利的同时，也给攻击者编写各种畸形恶意代码带来了很多便利，通过翻阅PHP手册，我们可以查到很多奇技淫巧，例如：
但是这里，笔者整理了一个思考框架，我们可以基于这个思考框架，有效地进行各种变形手段的组合。
我们将构成每个webshell的基本概念组件进行打散，抽象出若干原子逻辑概念组件，我们称之为【一级概念组件】，在每个一级概念组件下都有多个【二级实例组件】。每个二级实例组件都是在对应一级概念下的一个具体实现。
1.攻击者传入外部指令参数的方式
a.从内置全局数组中获取外部参数
    $_GET["op"]
    $GLOBALS['_POST']['op']
b.利用环境变量相关函数获取外部参数
    getenv('HTTP_CONNECTION')
c.将外部参数作为文件/目录信息写入磁盘
d.将外部参数存入output buffering缓存中
e.利用PHP原生函数获取外部参数
    get_defined_vars
    getallheaders
    phpinfo
f.利用输入/输出流获取外部参数
g.利用网络请求从远程IP获取外部参数
    file_get_contents
    get_meta_tags
h.利用xml处理函数获取外部参数
    simplexml_load_string
i.利用数据库相关扩展获取外部参数
    mysql
    memcache
    redis
j.利用本地变量注册获取外部参数
    parse_url
    extract
2.动态生成数值和字符串的方式
a.动态生成数组键值
1.利用try-catch存储和生成当前数组key
2.利用另一个数组变量存储当前数组key
3.利用time延时逻辑生成当前数组key
4.利用random逻辑生成当前数组key
b.动态生成参数名称
利用运算符技术：自增、异或、取非、取反
c.动态生成函数名称
1.利用字符串拼接技术
2.利用explode字符串分组技术
3.对字符串内容进行编码/解码的方式
a.利用BASE64编码/解码上技术
b.利用字符串顺序逆转相关技术
c.利用文本替换相关技术
d.利用0x16进制编码字符串
4.向函数传入实参/变量的方式
a.利用array callback相关函数实现参数传递
b.利用define宏定义方式实现参数传递
c.利用自定义加/解密函数进行处理后再进行参数传递
d.利用类方法重载的方式实现隐式参数传递
__toString方法重载
e.利用try-catch方式传递函数名
    try { throw new Exception("system"); }
5.执行指令的方式
a.利用PHP原生函数执行指令
    eval
    assert
    system
b.通过include方式执行指令
    include ROOT_PATH . $_REQUEST['target'];
c.通过array callback execute方式实现代码执行
    ($a = 'assert')&&($b = $_POST['a'])&&call_user_func_array($a, array($b));
    array_udiff_assoc(array($_REQUEST[$password]), array(1), "assert");
d.利用动态字符串函数调用特性（PHP中字符串可以直接作为函数名称被调用）
    $dyn_func = $_GET['dyn_func']; $argument = $_GET['argument']; $dyn_func($argument);
e.利用序列化/反序列化特性执行指令
f.利用类构造/析构特性执行指令
g.利用anonymous (lambda-style) function（匿名函数）执行指令
    create_function
    eval("function lambda_n() { eval($_GET[1]); }"); lambda_n();
    $a = function($b) { system($b); }; $a($_GET['c']);
h.通过注册系统回调执行指令
    register_shutdown_function
    register_tick_function
    set_error_handler
i.利用反射技术执行指令
j.利用PHP ${}特性执行指令
k.利用系统输出缓存技术执行指令
l.利用“特性执行系统指令
m.利用字符串处理回调（string process callback）技术执行指令
    mbereg_replace
n.利用静态类方法执行指令
    class foo { static function a(callable $b) { $b($_GET['c']); } } foo::a('system');
6.动态改变程序执行流支的技术
a.利用三元运算符
b.根据某外部传入参数，决定某IF条件的判断结果
c.利用header实现二次跳转
d.通过将外部指令写入系统持久化存储后再通过include执行
磁盘文件
临时文件
内存文件
7.攻击沙箱/词法引擎的相关特殊技术
代码间插入注释
举一个具体的例子：
上面这个样本有以下几个绕过点：
  1. 利用try-catch方式传递函数名
  2. 从内置全局数组中获取外部参数
  3. 利用动态字符串函数调用特性（PHP中字符串可以直接作为函数名称被调用）
建立这种思考框架有几个好处：
  * php语言特性本身是存在不同的维度的，在每个维度内通过翻阅内核源代码，可以进行充分的穷举