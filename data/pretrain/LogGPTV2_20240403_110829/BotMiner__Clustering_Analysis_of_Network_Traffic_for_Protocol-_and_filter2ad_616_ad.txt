C&C server
180,988
19
147,945
5635
2,647
9,716
5,495,223
5,495,223
4
4
4
259
4
4
13
82
1
1
1
1
1
1
P2P
P2P
Table 1: Collected botnet traces, covering IRC, HTTP and P2P based botnets. Storm and Nugache share the same
ﬁle, so the statistics of the whole ﬁle are reported.
Trace
Day-1
Day-2
Day-3
Day-4
Day-5
Day-6
Day-7
Day-8
Day-9
Day-10
Pkts
5,178,375,514
7,131,674,165
9,701,255,613
14,713,667,172
11,177,174,133
9,950,803,423
10,039,871,506
11,174,937,812
9,504,436,063
11,071,701,564
Flows
23,407,743
29,632,407
30,192,645
35,590,583
56,235,380
75,037,684
109,549,192
96,364,123
62,550,060
83,433,368
Filtered by F1
Filtered by F2
Filtered by F3
Flows after ﬁltering
C-ﬂows (TCP/UDP)
20,727,588
27,861,853
28,491,442
33,434,985
52,795,168
71,397,138
105,530,316
92,413,010
56,516,281
77,601,188
939,723
533,666
513,164
600,901
1,323,475
1,464,571
1,614,158
1,578,215
3,163,645
2,964,948
40,257
25,758
24,329
33,958
40,016
51,931
56,688
60,768
30,581
27,837
1,700,175
1,211,130
1,163,710
1,520,739
2,076,721
2,124,044
2,348,030
2,312,130
2,839,553
2,839,395
66,981 / 132,333
34,691 / 96,261
39,744 / 94,081
73,021 / 167,146
57,664 / 167,175
59,383 / 176,210
55,023 / 150,211
56,246 / 179,838
25,557 / 164,986
25,436 / 154,294
Table 2: C-plane trafﬁc statistics, basic results of ﬁltering, and C-ﬂows.
3.2 Evaluation Results
Table 2 lists the statistics for the 10 days of network
data we used to validate our detection system. For
each day there are around 5-10 billion packets (TCP
and UDP) and 30-100 million ﬂows. Table 2 shows
the results of several steps of ﬁltering. The ﬁrst step of
ﬁltering (ﬁlter rule F1) seems to be the most effective
ﬁlter in terms of data volume reduction. F1 ﬁlters out
those ﬂows that are not initiated from internal hosts to
external hosts, and achieves about 90% data volume
reduction. The is because most of the ﬂows are within
the campus network (i.e., they are initiated from internal
hosts towards other internal hosts). F2 further ﬁlters
out around 0.5-3 million of non-completely-established
ﬂows. F3 further reduces the data volume by ﬁltering
out another 30,000 ﬂows. After applying all the three
steps of ﬁltering, there are around 1 to 3 million ﬂows
left per day. We converted these remaining ﬂows into C-
ﬂows as described in Section 2.5, and obtained around
40,000 TCP C-ﬂows and 130,000 UDP C-ﬂows per day.
We then performed two-step clustering on C-ﬂows as
described in Section 2.5. Table 3 shows the clustering
results and false positives (number of clusters that are
not botnets). The results for the ﬁrst 5 days are related to
both TCP and UDP trafﬁc, whereas in the last 5 days we
focused on only TCP trafﬁc.
It is easy to see from Table 3 that there are thousands
of C-clusters generated each day.
In addition, there
are several thousand activity logs generated from A-
plane monitors. Since we use relatively weak monitor
modules, it is not surprising that we have this many ac-
tivity logs. Many logs report binary downloading events
or scanning activities. We cluster these activity logs
according to their activity features. As explained early,
we are interested in groups of machines that perform
activities in a similar/coordinated way. Therefore, we
ﬁlter out the A-clusters that contain only one host. This
simple ﬁltering rule allows us to obtain a small number
of A-clusters and reduce the overall false positive rate of
our botnet detection system.
Afterwards, we apply cross-plane correlation. We
assume that the trafﬁc we collected from our campus
network is normal.
In order to verify this assumption
we used state-of-the-art botnet detection techniques like
BotHunter [19] and BotSniffer [20]. Therefore, any
cluster generated as a result of the cross-plane correlation
is considered as a false positive cluster. It is easy to see
from Table 3 that there are very few such false positive
clusters every day (from zero to four). Most of these
clusters contain only two clients (i.e., they induce two
false positives). In three out of ten days no false positive
was reported.
In both Day-2 and Day-3, the cross-
correlation produced one false positive cluster containing
two hosts. Two false positive clusters were reported in
each day from Day-5 to Day-8. In Day-4, the cross-plane
correlation produced four false positive clusters.
For each day of trafﬁc, the last column of Table 3
shows the false positive rate (FP rate), which is calcu-
lated as the fraction of IP addresses reported in the false
positive clusters over the total number of distinct normal
clients appearing in that day. After further analysis we
found that many of these false positives are caused by
clients performing binary downloading from websites
not present in our whitelist.
In practice, the number
of false positives may be reduced by implementing a
better binary downloading monitor and clustering mod-
USENIX Association  
17th USENIX Security Symposium 
149
Trace
Day-1 (TCP/UDP)
Day-2 (TCP/UDP)
Day-3 (TCP/UDP)
Day-4 (TCP/UDP)
Day-5 (TCP/UDP)
Day-6 (TCP)
Day-7 (TCP)
Day-8 (TCP)
Day-9 (TCP)
Day-10 (TCP)
Botnet
IRC-rbot
IRC-sdbot
IRC-spybot
IRC-N
HTTP-1
HTTP-2
P2P-Storm
P2P-Nugache
Step-1 C-clusters
Step-2 C-clusters
A-plane logs
A-clusters
False Positive Clusters
1,374
904
1,128
1,528
1,051
1,163
954
1,170
742
712
4,958
2,897
2,480
4,089
3,377
3,469
3,257
3,226
1,763
1,673
1,671
5,434
4,324
5,483
6,461
6,960
6,452
8,270
7,687
7,524
1
1
1
4
5
3
5
4
2
0
0
1
1
4
2
2
2
2
0
0
Table 3: C-plane and A-plane clustering results.
Number of Bots
Detected?
Clustered Bots
Detection Rate
False Positive Clusters/Hosts
4
4
4
259
4
4
13
82
YES
YES
YES
YES
YES
YES
YES
YES
4
4
3
258
4
4
13
82
100%
100%
75%
99.6%
100%
100%
100%
100%
1/2
1/2
1/2
0
1/2
1/2
0
0
Table 4: Botnet detection results using BotMiner.
FP Rate
0 (0/878)
0.003 (2/638)
0.003 (2/692)
0.01 (9/871)
0.0048 (4/838)
0.008 (7/877)
0.006 (5/835)
0.0091 (8/877)
0 (0/714)
0 (0/689)
FP Rate
0.003
0.003
0.003
0
0.003
0.003
0
0
ule, e.g., by capturing the entire binary and performing
content inspection (using either anomaly-based detection
systems [38] or signature-based AV tools).
In order to validate the detection accuracy of Bot-
Miner, we overlaid botnet trafﬁc to normal trafﬁc. We
consider one botnet trace at a time and overlay it to
the entire normal trafﬁc trace of Day-2. We simulate a
near-realistic scenario by constructing the test dataset as
follows. Let n be the number of distinct bots in the botnet
trace we want to overlay to normal trafﬁc. We randomly
select n distinct IP addresses from the normal trafﬁc trace
and map them to the n IP addresses of the bots. That is,
we replace an IPi of a normal machine with the IPi of
a bot. In this way, we obtain a dataset of mixed normal
and botnet trafﬁc where a set of n machines show both
normal and botnet-related behavior. Table 4 reports the
detection results for each botnet.
Table 4 shows that BotMiner is able to detect all eight
botnets. We veriﬁed whether the members in the reported
clusters are actually bots or not. For 6 out of 8 botnets,
we obtained 100% detection rate, i.e., we successfully
identiﬁed all the bots within the 6 botnets. For example,
in the case of P2P botnets (Botnet-P2P-Nugache
and Botnet-P2P-Storm), BotMiner
correctly
generated a cluster containing all the botnet members.
In the case of Botnet-IRC-spybot, BotMiner
correctly detected a cluster of bots. However, one of
the bots belonging to the botnet was not reported in
the cluster, which means that the detector generated
a false negative. Botnet-IRC-N contains 259 bot
clients. BotMiner was able to identify 258 of the bots in
one cluster, whereas one of the bots was not detected.
Therefore, in this case BotMiner had a detection rate of
99.6%.
There were some cases in which BotMiner also gener-
ated a false positive cluster containing two normal hosts.
We veriﬁed that these two normal hosts in particular were
also responsible for the false positives generated during
the analysis of the Day-2 normal trafﬁc (see Table 3).
As we can see, BotMiner performs quite well in our
experiments, showing a very high detection rate with rel-
atively few false positives in real-world network traces.
4 Limitations and Potential Solutions
Like any intrusion/anomaly detection system, BotMiner
is not perfect or complete.
It is likely that once ad-
versaries know our detection framework and implemen-
tation, they might ﬁnd some ways to evade detection,
e.g., by evading the C-plane and A-plane monitoring
and clustering, or the cross-plane correlation analysis.
We now address these limitations and discuss possible
solutions.
4.1 Evading C-plane Monitoring and Clustering
Botnets may try to utilize a legitimate website (e.g.,
Google) for their C&C purpose in attempt to evade
detection. Evasion would be successful in this case if
we whitelisted such legitimate websites to reduce the
volume of monitored trafﬁc and improve the efﬁciency of
our detection system. However, if a legitimate website,
say Google, is used as a means to locate a secondary
URL for actual command hosting or binary download-
ing, botnets may not be able to hide this secondary
URL and the corresponding communications. Therefore,
clustering of network trafﬁc towards the server pointed
by this secondary URL will likely allow us to detect the
bots. Also, whitelisting is just an optional operation. One
may easily choose not to use whitelisting to avoid such
kind of evasion attempts (of course, in this case one may
150 
17th USENIX Security Symposium 
USENIX Association
face the trade-off between accuracy and efﬁciency).
Botnet members may attempt to intentionally manip-
ulate their communication patterns to evade our C-plane
clustering. The easiest thing is to switch to multiple C&C
servers. However, this does not help much to evade our
detection because such peer communications could still
be clustered together just like how we cluster P2P com-
munications. A more advanced way is to randomize each
individual communication pattern, for example by ran-
domizing the number of packets per ﬂow (e.g., by inject-
ing random packets in a ﬂow), and the number of bytes
per packet (e.g., by padding random bytes in a packet).
However, such randomization may introduce similarities
among botnet members if we measure the distribution
and entropy of communication features. Also, this ran-
domization may raise suspicion because normal user
communications may not have such randomized patterns.
Advanced evasion may be attempted by bots that try
to mimic the communication patterns of normal hosts,
in a way similar to polymorphic blending attacks [15].
Furthermore, bots could use covert channes [1] to hide
their actual C&C communications. We acknowledge
that, generally speaking, communication randomization,
mimicry attacks and covert channel represent limitations
for all trafﬁc-based detection approaches, including Bot-
Miner’s C-plane clustering technique. By incorporating