ℎ))
The full garbling procedure can be obtained by composing
the above functions. On input a circuit 𝐶 and a boolean
vector 𝑥, it picks random labels for the input wires using
𝙻𝚊𝚋𝚎𝚕, calls 𝙶𝚋 to generate a garbled circuit
̃𝐶 and output
labels, and then calls 𝙶𝙴𝚗𝚌 and 𝙶𝙼𝚊𝚜𝚔 to produce a garbled
input ̃𝑥. Note that the second parameter of 𝙶𝙴𝚗𝚌 is a bundle of
bits rather than a boolean vector. In the deﬁnition of 𝙶𝚊𝚛𝚋𝚕𝚎
below we slightly abuse notation and use 𝑥 to denote a bundle
of bits 𝑥1, … , 𝑥𝑛 of a suitable shape, which can be eﬃciently
constructed from 𝑥 and 𝑠.
𝙶𝚊𝚛𝚋𝚕𝚎 :: Circuit(𝑠, 𝑡) × {0, 1}𝑛 → 𝐄𝐱𝐩
𝙶𝚊𝚛𝚋𝚕𝚎(𝐶, 𝑥) = ( ̃𝐶, ̃𝑥) where
𝑢 ← 𝙻𝚊𝚋𝚎𝚕(𝑠)
̃𝐶, 𝑣 = 𝙶𝚋(𝐶, 𝑢)
̃𝑥 = (𝙶𝙴𝚗𝚌(𝑢, 𝑥), 𝙶𝙼𝚊𝚜𝚔(𝑣))
Next, we consider the garbled circuit evaluation algorithm
𝙶𝙴𝚟𝚊𝚕. The core part of 𝙶𝙴𝚟𝚊𝚕 is a recursive function 𝙶𝙴𝚟
that takes a garbled circuit and an encoded input expression,
producing an encoded output expression. Any encoded output
is also an encoded input for evaluating subsequent garbled
circuits. We include a circuit as another input of 𝙶𝙴𝚟, which
is used to determine the shapes of output wires. Ideally we
can use the circuit’s topology instead, but for simplicity we
just use the circuit itself and we do not exploit the function
computed by a circuit.
𝙶𝙴𝚟 ∶∶ Circuit(𝑠, 𝑡) × 𝐄𝐱𝐩 × 𝐄𝐱𝐩 → 𝐄𝐱𝐩
𝙶𝙴𝚟(𝐒𝐰𝐚𝐩, 𝜖, (𝑢, 𝑣)) = (𝑣, 𝑢)
𝙶𝙴𝚟(𝐀𝐬𝐬𝐨𝐜, 𝜖, (𝑢, (𝑣, 𝑤)) = ((𝑢, 𝑣), 𝑤)
𝙶𝙴𝚟(𝐔𝐧𝐚𝐬𝐬𝐨𝐜, 𝜖, (𝑢, (𝑣, 𝑤)) = ((𝑢, 𝑣), 𝑤)
𝙶𝙴𝚟(𝐃𝐮𝐩, 𝜖, (𝑏, 𝑘) = ((𝑏, 𝖦0(𝑘)), (𝑏, 𝖦1(𝑘)))
𝙶𝙴𝚟(𝐍𝐀𝐧𝐝, ̃𝐶, ((𝑏′
0
, 𝑘0), (𝑏′
1
, 𝑘1))) = (𝑏, 𝑘) where
𝜋[𝑏0](𝑟0, 𝑟1) = ̃𝐶
𝜋[𝑏1](𝑒0, 𝑒1) = if 𝑏′
⦃⦃(𝑏, 𝑘)⦄𝑘1
⦄𝑘0 = if 𝑏′
0 ≡ 𝑏0 then 𝑟0 else 𝑟1
1 ≡ 𝑏1 then 𝑒0 else 𝑒1
𝙶𝙴𝚟(𝐶0 ⋙ 𝐶1, ( ̃𝐶0, ̃𝐶1), 𝑢) = 𝙶𝙴𝚟(𝐶1, ̃𝐶1, 𝑤) where
𝙶𝙴𝚟(𝐅𝐢𝐫𝐬𝐭(𝐶), ̃𝐶, (𝑢, 𝑤)) = (𝑣, 𝑤) where
𝑤 = 𝙶𝙴𝚟(𝐶0, ̃𝐶0, 𝑢)
𝑣 = 𝙶𝙴𝚟(𝐶, ̃𝐶, 𝑢)
We brieﬂy explain how 𝙶𝙴𝚟 works. For the basic circuits
𝐒𝐰𝐚𝐩, 𝐀𝐬𝐬𝐨𝐜, 𝐔𝐧𝐚𝐬𝐬𝐨𝐜, and 𝐃𝐮𝐩 whose corresponding gar-
bled circuits are 𝜖, it simply rearranges the bits and keys in
the encoded input to form an encoded output, except for 𝐃𝐮𝐩
where it generates and then splits a pseudo-random key in
the encoded output. For 𝐍𝐀𝐧𝐝, it parses the corresponding
garbled circuit as permutations controlled by atomic bits 𝑏0, 𝑏1,
and it selects the entry corresponding to the bits 𝑏′
1. In
0
the above deﬁnition, we use pattern matching syntax that is
̃𝐶
usually found in functional programming languages to parse
and select the subexpression ⦃⦃(𝑏, 𝑘)⦄𝑘1
⦄𝑘0 . One can verify
𝑖 ∈ {𝑏𝑖, ¬𝑏𝑖} and the entry selected using bits 𝑏′
0
, 𝑘𝑖) is in the encoded input to 𝐍𝐀𝐧𝐝 for 𝑖 ∈ {0, 1},
that, if (𝑏′
then 𝑏′
1 are
doubly encrypted under keys 𝑘0,𝑘1. So the expression (𝑏, 𝑘)
extracted by 𝙶𝙴𝚟 is well-deﬁned. For the composite circuits
𝐶0 ⋙ 𝐶1 and 𝐅𝐢𝐫𝐬𝐭(𝐶), 𝙶𝙴𝚟 produces an encoded output
expression recursively in a way similar to how 𝐄𝐯 evaluates
these circuits.
Notice that the output of 𝙶𝙴𝚟 are bit symbols rather than
boolean values. The function 𝙳𝚎𝚌𝚘𝚍𝚎 uses the output masks
to decode a garbled output into a boolean vector:
, 𝑏′
, 𝑏′
𝑖
𝙳𝚎𝚌𝚘𝚍𝚎((𝑏, 𝑘), 𝑏′) = if 𝑏 ≡ 𝑏′ then 0 else 1
𝙳𝚎𝚌𝚘𝚍𝚎((𝑢0, 𝑢1), (𝑑0, 𝑑1)) = (𝙳𝚎𝚌𝚘𝚍𝚎(𝑢0, 𝑑0), 𝙳𝚎𝚌𝚘𝚍𝚎(𝑢1, 𝑑1))
Finally, the full evaluation algorithm 𝙶𝙴𝚟𝚊𝚕 is deﬁned as4:
𝙶𝙴𝚟𝚊𝚕 ∶∶ Circuit(𝑠, 𝑡) × 𝐄𝐱𝐩 × 𝐄𝐱𝐩 → {0, 1}𝑛
𝙶𝙴𝚟𝚊𝚕(𝐶, ̃𝐶, ̃𝑥) = 𝙳𝚎𝚌𝚘𝚍𝚎(𝙶𝙴𝚟(𝐶, ̃𝐶, 𝑢), 𝑑) where
(𝑢, 𝑑) = ̃𝑥
The following theorem shows that our garbling scheme
is correct. Brieﬂy speaking, the encoded input expressions
contain the suﬃcient bits and keys to obtain the encoded
output from the garbled circuit expression, and the output
masks provide information for decoding the encoded output.
The formal proof can be found in the full version [35].
Theorem 4. For any circuit 𝐶 ∈ Circuit(𝑠, 𝑡) and any boolean
vector 𝑥 of shape 𝑠, 𝙶𝙴𝚟𝚊𝚕(𝐶, 𝙶𝚊𝚛𝚋𝚕𝚎(𝐶, 𝑥)) = 𝐶(𝑥).
4Notice that 𝙳𝚎𝚌𝚘𝚍𝚎 outputs a bundle of bits. Here we slightly abuse
notation and assume a boolean vector can be extracted from a bundle of
bits.
155
V. SYMBOLIC SIMULATION AND PROOF OF SECURITY
In this section we deﬁne a simulator 𝚂𝚒𝚖𝚞𝚕𝚊𝚝𝚎(⋅, ⋅), and
for any circuit 𝐶 and
we then present our proof
the expressions 𝙶𝚊𝚛𝚋𝚕𝚎(𝐶, 𝑥) and
any boolean vector 𝑥,
𝚂𝚒𝚖𝚞𝚕𝚊𝚝𝚎(𝐶, 𝐶(𝑥)) are equivalent up to renaming. Together
with the computational soundness theorem of our symbolic
framework, such proof implies that the garbled circuit scheme
of the previous section is computationally secure.
that,
j) Symbolic simulator: Recall that a simulator must out-
put a symbolic expression that represents a garbled circuit and
a garbled input, and a garbled input consists of an encoded
input and output masks. The simulator has no access to the
circuit input values, so it picks the random bit and the ﬁrst
random key from each label to form the encoded input:
𝚂𝙴𝚗𝚌((𝖡, (𝖪0, 𝖪1))) = (𝖡, 𝖪0)
𝚂𝙴𝚗𝚌((𝐿0, 𝐿1)) = (𝚂𝙴𝚗𝚌(𝐿0), 𝚂𝙴𝚗𝚌(𝐿1))
In order to correctly evaluate the simulated garbled circuit
on the simulated garbled input, we adjust the output masks
according to the circuit output value. Given a label expression
and a boolean vector representing the circuit output value, the
function 𝚂𝙼𝚊𝚜𝚔 computes the output masks:
𝚂𝙼𝚊𝚜𝚔((𝖡, (𝖪0, 𝖪1)), 0) = 𝖡
𝚂𝙼𝚊𝚜𝚔((𝖡, (𝖪0, 𝖪1)), 1) = ¬𝖡
𝚂𝙼𝚊𝚜𝚔((𝐿0, 𝐿1), (𝑦0, 𝑦1)) = (𝚂𝙼𝚊𝚜𝚔(𝐿0, 𝑦0), 𝚂𝙼𝚊𝚜𝚔(𝐿1, 𝑦1))
The core of our simulator is a recursive function 𝚂𝚒𝚖 that
consumes a circuit and a label expression for input wires,
and produces a symbolic expression of the simulated garbled
circuit and a label expression for output wires:
𝚂𝚒𝚖 :: Circuit(𝑠, 𝑡) × 𝐄𝐱𝐩 → 𝐄𝐱𝐩 × 𝐄𝐱𝐩
𝚂𝚒𝚖(𝐒𝐰𝐚𝐩, (𝑢, 𝑣)) = 𝜖, (𝑣, 𝑢)
𝚂𝚒𝚖(𝐀𝐬𝐬𝐨𝐜, (𝑢, (𝑣, 𝑤))) = 𝜖, ((𝑢, 𝑣), 𝑤)
𝚂𝚒𝚖(𝐔𝐧𝐚𝐬𝐬𝐨𝐜, ((𝑢, 𝑣), 𝑤)) = 𝜖, (𝑢, (𝑣, 𝑤))
𝚂𝚒𝚖(𝐶0 ⋙ 𝐶1, 𝑢) = ( ̂𝐶0, ̂𝐶1), 𝑣 where
̂𝐶0, 𝑤 = 𝚂𝚒𝚖(𝐶0, 𝑢)
̂𝐶1, 𝑣 = 𝚂𝚒𝚖(𝐶1, 𝑤)
𝚂𝚒𝚖(𝐅𝐢𝐫𝐬𝐭(𝐶), (𝑢, 𝑤)) = ̂𝐶, (𝑣, 𝑤) where
𝚂𝚒𝚖(𝐃𝐮𝐩, (𝑏, (𝑘0, 𝑘1))) = 𝜖, 𝑤 where
̂𝐶, 𝑣 = 𝚂𝚒𝚖(𝐶, 𝑢)
𝑤 = ((𝑏, (𝖦0(𝑘0), 𝖦0(𝑘1))), (𝑏, (𝖦1(𝑘0), 𝖦1(𝑘1))))
𝚂𝚒𝚖(𝐍𝐀𝐧𝐝, ((𝑏𝑖, (𝑘0
, 𝑘1
𝑖 )), (𝑏𝑗, (𝑘0
𝑗
, 𝑘1
𝑗)))) = ̂𝐶, 𝑤 where
𝑖
ℎ ← new
̂𝐶 = 𝜋[𝖡𝑖](𝜋[𝖡𝑗](⦃⦃(𝖡ℎ, 𝖪0
ℎ)⦄𝑘0
𝜋[𝖡𝑗](⦃⦃(𝖡ℎ, 𝖪0
ℎ)⦄𝑘0
𝑗
⦄𝑘0
⦄𝑘1
𝑖
𝑖
𝑗
,⦃⦃(𝖡ℎ, 𝖪0
ℎ)⦄𝑘1
,⦃⦃(𝖡ℎ, 𝖪0
ℎ)⦄𝑘1
𝑗
𝑗
⦄𝑘0
⦄𝑘1
𝑖
𝑖
),
))
𝑤 = (𝖡ℎ, (𝖪0
ℎ
, 𝖪1
ℎ))
Notice that, for any circuit 𝐶 and any label expression 𝑢, if
̂𝐶, 𝑤 = 𝚂𝚒𝚖(𝐶, 𝑢), then the subscript ℎ of
ℎ that appears in ( ̃𝐶, 𝑣) and ( ̂𝐶, 𝑤)
̃𝐶, 𝑣 = 𝙶𝚋(𝐶, 𝑢) and
any atomic key symbol 𝖪𝑖
follows the same ordering.
Our simulator is composed of the above functions. It takes
a circuit 𝐶 and a boolean vector 𝑦 as input, and it generates
a simulated garbled circuit using 𝚂𝚒𝚖 and a simulated garbled
input using 𝚂𝙴𝚗𝚌 and 𝚂𝙼𝚊𝚜𝚔:
𝚂𝚒𝚖𝚞𝚕𝚊𝚝𝚎 :: Circuit(𝑠, 𝑡) × {0, 1}𝑚 → 𝐄𝐱𝐩
𝚂𝚒𝚖𝚞𝚕𝚊𝚝𝚎(𝐶, 𝑦) = ( ̂𝐶, ̂𝑥) where
𝑢 ← 𝙻𝚊𝚋𝚎𝚕(𝑠)
̂𝐶, 𝑣 = 𝚂𝚒𝚖(𝐶, 𝑢)
̂𝑥 = (𝚂𝙴𝚗𝚌(𝑢), 𝚂𝙼𝚊𝚜𝚔(𝑣, 𝑦))
k) Symbolic proof of security: For this paper we present
a pen-and-paper symbolic security proof, which can also be
adapted to a machine-checked proof using veriﬁcation tools.
For any bit expression 𝑏 ∈ 𝐏𝐚𝐭(𝔹) and any 𝑥 ∈ {0, 1}, we
introduce the notation 𝑏⊕𝑥
to shorten our proofs:
{
𝑏⊕𝑥 =
𝑏
¬𝑏
if 𝑥 = 0