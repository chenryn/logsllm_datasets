Extremal postage-stamp bases with large ℎ (like 23 or 24) can
be hard to find, but if found, such bases allow very high-degree
polynomials to be evaluated without increasing the depth, but
possibly with a significant increase in online computation time due
to the large number of powers needing to be computed through
non-scalar multiplications.
3.1.6 Low depth exponentiation via the Frobenius operation. As
mentioned in Section 2.3, the Frobenius operation is a cheaper
alternative to non-scalar multiplication in terms of running time
and added noise. Using this operation, the sender can compute
powers of(cid:74)𝑦(cid:75) saving multiplicative depth. Hence, the receiver can
send fewer powers, decreasing the communication complexity.
Example 4. Take a plaintext modulus 𝑡 = 2; every SIMD slot
is isomorphic to F2𝑑 for some 𝑑 and the Frobenius operation can
compute(cid:74)𝑥(cid:75) ↦→(cid:74)𝑥2𝑖(cid:75) for 𝑖 ∈ [𝑑 − 1].
should compute the intersection polynomial 𝑃((cid:74)𝑦(cid:75)) of degree 255.
Using the Paterson-Stockmeyer algorithm, it needs(cid:74)𝑦𝑖(cid:75) and(cid:74)𝑦16𝑖(cid:75)
Suppose the sender has 255 values in its set. This means that it
has to send 30 ciphertexts encrypting these powers.
with a depth 1 circuit.
The communication complexity can be reduced even further at
sult, the receiver needs to send only 8 encrypted powers, namely
ers, the sender computes all the low and high powers for the
Paterson-Stockmeyer algorithm with 22 Frobenius operations and
for 𝑖 ∈ [15] to compute 𝑃((cid:74)𝑦(cid:75)) with depth 1. In total, the receiver
However, the sender can compute(cid:74)𝑦16𝑖(cid:75) from(cid:74)𝑦𝑖(cid:75) by apply-
ing the Frobenius operation(cid:74)𝑥(cid:75) ↦→ (cid:74)𝑥22(cid:75), which is depth-free.
Moreover, any even power (cid:74)𝑦2𝑒𝑎(cid:75) with odd 𝑎 can be obtained
from(cid:74)𝑦𝑎(cid:75) with the Frobenius operation(cid:74)𝑥(cid:75) ↦→ (cid:74)𝑥2𝑒(cid:75). As a re-
(cid:74)𝑦(cid:75),(cid:74)𝑦3(cid:75),(cid:74)𝑦5(cid:75),(cid:74)𝑦7(cid:75),(cid:74)𝑦9(cid:75),(cid:74)𝑦11(cid:75),(cid:74)𝑦13(cid:75) and(cid:74)𝑦15(cid:75). Having these pow-
then performs only 15 non-scalar multiplications to compute 𝑃((cid:74)𝑦(cid:75))
the cost of increased depth. If the receiver sends only(cid:74)𝑦(cid:75), then the
sender first computes(cid:74)𝑦(cid:75),(cid:74)𝑦2(cid:75),(cid:74)𝑦4(cid:75),(cid:74)𝑦8(cid:75) with depth 0 using the
Frobenius operations and then obtains the powers(cid:74)𝑦3(cid:75) =(cid:74)𝑦(cid:75)·(cid:74)𝑦2(cid:75),
(cid:74)𝑦5(cid:75) =(cid:74)𝑦(cid:75) ·(cid:74)𝑦4(cid:75),(cid:74)𝑦7(cid:75) =(cid:74)𝑦(cid:75) ·(cid:74)𝑦2(cid:75) ·(cid:74)𝑦4(cid:75),(cid:74)𝑦9(cid:75) =(cid:74)𝑦(cid:75) ·(cid:74)𝑦8(cid:75),(cid:74)𝑦11(cid:75) =
(cid:74)𝑦(cid:75)·(cid:74)𝑦2(cid:75)·(cid:74)𝑦8(cid:75),(cid:74)𝑦13(cid:75) =(cid:74)𝑦(cid:75)·(cid:74)𝑦4(cid:75)·(cid:74)𝑦8(cid:75),(cid:74)𝑦15(cid:75) =(cid:74)𝑦(cid:75)·(cid:74)𝑦2(cid:75)·(cid:74)𝑦4(cid:75)·(cid:74)𝑦8(cid:75)
operations. Thus, the sender can compute 𝑃((cid:74)𝑦(cid:75)) with depth 3
having been given only one ciphertext,(cid:74)𝑦(cid:75).
consecutive powers of(cid:74)𝑦(cid:75) can be computed by the sender with a
depth 𝐷 circuit. This lemma implies that if 𝑃((cid:74)𝑦(cid:75)) has degree 𝐵,
(cid:74)𝑦2(cid:75), . . . ,(cid:74)𝑦𝐵(cid:75) with a circuit of multiplicative depth O(log log 𝐵).
then the sender needs only O(1) encrypted powers of 𝑦 to compute
In the prior work [13], O(log 𝐵) powers are needed to perform the
same task.
with multiplicative binary-tree circuits of depth at most 2. The
remaining low and high powers are again computed with Frobenius
The idea above is formalized in Lemma 5 that indicates how many
26224816251233204222119181715121413567910112610165825912423132262120191821715143471112Session 4C: Private Set Intersection CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1141Lemma 5. Let(cid:74)𝑦(cid:75) be a ciphertext encrypting a plaintext message
sender can compute all the powers(cid:74)𝑦(cid:75),(cid:74)𝑦2(cid:75), . . . ,(cid:74)𝑦𝑒𝐷(cid:75) where
from 𝑅𝑡 . Let 𝐷 be a positive integer. Then, using a depth 𝐷 circuit, the
(cid:16)(cid:16)2𝐷 mod (𝑡 − 1)(cid:17) + 2(cid:17) · 𝑡
− 2.
The proof of this lemma can be found in Appendix C.
Example 6. Let 𝑡 := 2. In this case 2𝐷 mod (𝑡 − 1) = 0, so 𝑒𝐷 =
22𝐷+1 − 2. Since 𝑒1 = 6, the sender can compute {(cid:74)𝑦2(cid:75), . . . ,(cid:74)𝑦6(cid:75)}
with a circuit of depth 1, which is supported by the second part of
Example 4.
(cid:106) 2𝐷
𝑒𝐷 =
(cid:107)
𝑡−1
Example 7. Let 𝑡 := 3. Since 2𝐷 mod (𝑡 − 1) = 0 for any 𝐷 > 0,
𝑒𝐷 = 2 · 32𝐷−1 − 2.
This technique requires the receiver to send additional evaluation
keys to perform Frobenius operations. In particular, the receiver
should send(cid:4)log𝑡 𝐵(cid:5) evaluation keys to the sender to compute
powers(cid:74)𝑦2(cid:75), . . . ,(cid:74)𝑦𝐵(cid:75). Furthermore, the receiver can send only
(cid:74)𝑥(cid:75) ↦→(cid:74)𝑥𝑡(cid:75). The size of the evaluation keys can be significant (see
one evaluation key corresponding to the basic Frobenius operation
Section 5 for more details), but they can be cached by the sender
and used repeatedly for multiple executions of the protocol.
In practice, the advantage of the Frobenius operation is at odds
with the SIMD packing capacity. In general, the packing capacity is
equal to 𝑛/𝑑 where 𝑑 is the order of the plaintext modulus 𝑡 modulo
the order 𝑚 of the ring 𝑅, i.e 𝑚|𝑡𝑑 − 1. This implies that 𝑑 > log𝑡 𝑚
and thus 𝑛/𝑑 < 𝑛·log𝑚 𝑡. Hence, a smaller plaintext modulus yields
a smaller packing capacity, but it results in a better multiplicative
depth due to Lemma 5.
Fast OPRF from FourQ. The OPRF stage is essential to our
3.1.7
protocol, as was pointed out in Section 3.1.1. The sender’s task
is significant: it needs to choose a random number modulo the
OMGDH-hard group order to act as the OPRF key, hash each of its
items into a uniformly random group element, and multiply the
group element with the key.
For performance reasons, we use the FourQ curve [17] for the
group, which provides fast scalar multiplication of random points,
as well as a fast implementation of hash-to-curve as follows. We
apply the birational map (𝑢, 𝑣) ↦→ (𝑢/𝑣, (𝑢 − 1)/(𝑢 + 1)) to modify
the Elligator 2 [5] construction. A naive inspection of the required
F𝑝2 operations suggests that this needs at least four exponentiations
in F𝑝, but a careful combination of the tricks from the literature
(see [56]) allowed the full map to the curve to be achieved with just
3 field exponentiations (all to the power of (𝑝 −3)/4), and a handful
of additional operations in F𝑝. A mini-scalar multiplication by the
cofactor moves these hashed points inside the large prime order
subgroup.
We measured our implementation to take around 12, 000 clock
cycles for the the hash-to-curve function, and 42, 000 clock cycles
for the scalar multiplication. This is faster than GLS-254, a curve
optimized for the unbalanced PSI application by Aranha and Re-
sende [54], which takes around 50, 000 clock cycles for a scalar
multiplication.
𝐿′
1
𝐿′
1,1
𝐿′
1,2
...
𝐿′
1,10
𝐿′
2
𝐿′
3
. . .
𝐿′
20
𝐺1(𝑦)
𝐺2(𝑦)
...
𝐺10(𝑦)
Figure 2: In this example, there are 20 encrypted labels
{𝐿′
1, . . . , 𝐿′
20}, every label is split into 10 parts. The red dotted
lines indicate the different parts. A label polynomial 𝐺𝑖(𝑦)
is created for every part.
4 LABELED PSI
4.1 Labeled PSI in Chen et al., 2018
In labeled PSI, the sender holds a bytestring 𝐿𝑖, called a label, of
length ℓ for each of its items 𝑥𝑖 ∈ 𝑋. The receiver learns the cor-
responding label 𝐿𝑖 for each of its items 𝑦 𝑗 = 𝑥𝑖 ∈ 𝑋 ∩ 𝑌 in the
intersection. The basic idea, as introduced in [13], is for the sender
to construct interpolation polynomials
(cid:40)𝐿𝑖
𝐺(𝑦) =
if 𝑦 = 𝑥𝑖;
random field element otherwise.
The sender evaluates the polynomial on the receiver’s encrypted
input exactly like it evaluates the intersection polynomials, and
sends the result back to the receiver.
It remains to construct the polynomials 𝐺(𝑦), however, the con-
struction in [13] relies on the fact that the intepolation is done
over extension fields, where non-zero field elements can be fully
randomized by multiplying with a non-zero random field element.
4.2 Improvements
The above approach does not work immediately for our construc-
tion, because we break our items into prime-field element sized
chunks, and compute the intersection polynomial on them inde-
pendently. Thus, a partial match, which may be easy to brute-force
due to the small size of the prime fields, would immediately leak
the corresponding part of the label.
Fortunately, [13] already provides a partial solution to this prob-
lem: since we have to use OPRF in any case, we can extend the
output of the OPRF and use one part of the OPRF value to repre-
sent the item in the intersection polynomial, and another part as
a key for a symmetric cipher to encrypt the label. Then, instead
of interpolating over parts of the label, we interpolate over parts
of the encrypted label (see Figure 2 for an example). The receiver
will be able to decrypt the result after extracting the key from the
full OPRF value for the item. This technique ensures that only the
receivers that know the item in the intersection can decrypt the
label corresponding to that item.
One major downside of this approach is the O(𝐵2) complexity
of interpolation in field operations. Using prime-fields yields a
substantial improvement over the extension fields of [13], but the
cost is still unfortunately high for practical parameters. To address
Session 4C: Private Set Intersection CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1142this issue, we note that the precomputation is easily updatable:
items can be added or removed, and labels can be updated. This
presents a problem when the symmetric cipher is an XOR stream
cipher: if the label for an item is changed and the encryption key
and nonce remain unchanged, then even a semi-honest receiver
can find the XOR of the labels (or label parts) before and after
the change. One simple solution is to use a strictly incrementing
nonce for the encryption, but this can be challenging to maintain
in practice. Another solution is to always choose a random nonce
for each label on each update, and append it to be a part of the
label data. This way the receiver always obtains the correct nonce
and can use it to decrypt the label itself. In practice, the label data,
especially when appended with a random nonce, is likely to be
longer than the item. In this case the label data is simply broken up
into item-size fragments and a separate interpolation polynomial is
formed for each fragment. The receiver will then obtain a separate
result for each fragment, reconstruct the encrypted label, and finally
decrypt it.
It was pointed out in [13] that returning the intersection result
to the receiver in addition to the label result is not strictly speaking
necessary, but it may be necessary in practice for the receiver to
know which label values hold valid data. Thus, we consider the
labeled PSI protocol to return both the intersection result as well as
one or more label results, depending on whether the label consists
of a single or multiple item-length fragments.
4.2.1 Resolving a subtle issue. Unfortunately, there is one remain-
ing technicality to address with the above approach. To understand
the problem, note that [13] performed interpolation over large ex-
tension fields, where an extension field element encoded an entire
item. As items never repeat, interpolation would always succeed.
Since we suggest to use a separate interpolation polynomial for
each prime-field size part of the label, interpolation is done over
a much smaller field, where it is easy to end up with item-part
collisions: a single partition (recall Section 3.1.2) can end up with re-
peating item parts in the same bin. If the corresponding label parts
do not match, as is likely to be the case, interpolation is impossible.
To resolve this issue, the sender must check, when inserting
an item, that none of its parts do not already appear in the same
locations in the partition in which the item is being inserted. If a
collision is encountered, the sender must either try to insert the
item in a different partition, or as a last resort create an entirely
new partition where the troublesome item can be inserted.
The procedure described above results in an unfortunate phe-
nomenon, where labeled PSI produces more partitions and with a
lower ‘fill rate’ for the sender’s data structures compared to unla-
beled PSI.
Security. While [13] did not explicitly discuss a security
4.2.2
proof for the labeled case, we note that the ideal functionality
([13], Figure 3) and the security proof of the unlabeled case ([13],
Theorem 1) are straightforward to extend to the labeled case.
In the ideal functionality the sender inputs both its set 𝑋 and
| 𝑥 ∈ 𝑋}, and the receiver learns
a set of labels {𝐿𝑥 ∈ {0, 1}ℓ
{(𝑥, 𝐿𝑥) | 𝑥 ∈ 𝑋 ∩ 𝑌}. A simulator playing the role of a sender uses
the random oracle to extract the malicious receiver’s input 𝑌∗ from
the OPRF queries it made. Then 𝑌∗ is given to the ideal functionality
that responds with {(𝑥, 𝐿𝑥) | 𝑥 ∈ 𝑋 ∩𝑌∗}; the simulator pads this to
size |𝑋| with random pairs (𝑥, 𝐿), where 𝑥 ∈ 𝑋 \ 𝑌∗ and 𝐿 ∈ {0, 1}ℓ,
encrypts the label values corresponding to the receiver’s input with
keys derived from the corresponding OPRF values, and creates
the response ciphertext data. The proof is completed exactly as in
Theorem 1 of [13].
5 EXPERIMENTS
We tested the aforementioned techniques in two C++ libraries, HE-
lib [31] and SEAL [57], which implement the BGV [7] and BFV [22]
schemes, respectively. The encryption parameters used in this sec-
tion support at least 128 bits of security unless marked otherwise
(see Tables 5 and 6). The benchmarks are performed on an Intel
Xeon Platinum 8272CL CPU @ 2.60 GHz, with 24 physical cores
and 192 GB of RAM. We assume this is comparable to the 32-core
machine used in [13].
The rationale behind two implementations is the following. The
SEAL implementation helps us provide an adequate comparison
with the prior works [13, 14]. However, SEAL supports a limited
set of encryption parameters that obstructs the low-depth expo-
nentiation technique from Section 3.1 — our most powerful tool
for reducing the communication cost. In particular, the order of
the ring 𝑅 in SEAL is fixed such that 𝑡𝑑 must be congruent to 1
modulo a power of two greater than or equal to 212. The multi-
plicative order 𝑑 of the plaintext modulus must be relatively small,
i.e., 80 ≤ 𝑑 log 𝑡 ≤ 100, to allow encoding of 80-bit strings with
maximal SIMD capacity. We found that there are no such primes 𝑡
in the range [2, 3000]. For larger 𝑡, the low-depth exponentiation
technique is almost useless in practice, as the Frobenius operation
yields a very sparse set of powers. To solve the above issue, we
resort to the HElib library, where the cyclotomic ring 𝑅 can be of
any order.
In the SEAL-based implementation, we aim to show how our
optimizations reduce both the running time and the communication
cost over prior work, in particular [13]. This setting exploits all
the techniques of Section 3.1, except for the low-depth exponentia-
tion method. In the HElib implementation, we focus solely on the
communication cost and rely on the low-depth exponentiation, the
SIMD packing, and the Paterson-Stockmeyer methods.
Unlike the SEAL version, the HElib version is a proof-of-concept
implementation, written only to demonstrate the low-depth ex-
ponentiation technique used to reduce the communication cost.
Namely, we do not implement OPRF or networking. Nevertheless,
we are able to accurately compute the communication cost since the
cost of OPRF is fixed (32 bytes) per item in the receiver’s set and the
ciphertext sizes can be computed in HElib. We omit the computation
cost of OPRF in our presentation (Appendix D) since it is harder to
estimate accurately and our focus is on the communication cost.
Our SEAL-based protocol is implemented in an open-source
library available at https://GitHub.com/Microsoft/APSI.
5.1 SEAL Implementation: Unlabeled Mode
The computation and communication cost of our SEAL implementa-
tion running in the unlabeled mode is given in Table 1. For each pair
(|𝑋|, |𝑌|) we present only one result, but in reality the situation is
not that simple: the protocol involves rather complex parameteriza-
tion with many communication-computation trade-offs. The results
Session 4C: Private Set Intersection CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1143we present demonstrate one setting for each size of the problem
that we felt captured the overall performance best, but it is always
possible to reduce the running time by increasing communication,
and vice versa.
Table 1 includes a comparison for single-threaded execution
with Chen et al. [13], including details for sender-to-receiver and
receiver-to-sender communication. Furthermore, in Table 2 we
present another a side-by-side comparison with Chen et al. [13],
Kales et al. [36], and Aranha and Resende [54], which represent
different state-of-the-art protocols for unbalanced PSI.
Regarding Chen et al. [13], it is clear that our protocol is faster in
many cases, especially for larger parameters, and has a much smaller
communication cost in every case. For example, with |𝑋| = 224 and
|𝑌| = 11041 our computation-communication trade-offs allowed us
to reduce the communication by 71% at the expense of a marginal
increase in online computation. With |𝑋| = 228 and |𝑌| = 2048,
both our computation and communication cost are roughly a third
of what is presented in [13].
The comparison between our work and Kales et al. [36] is more
nuanced because the protocols and applications are different. For
the protocol aspect, the main difference is that Kales et al. has a
significant sender-side preprocessing step and requires a possibly
large cuckoo filter (𝑂(|𝑋|)) to be communicated ahead of time from
the sender to the receiver, while our protocol has no such offline
communication. On the other hand, the computation cost of Kales
et al. is better in the online phase, as well as the preprocessing
phase, since they do not need to perform any costly homomorphic
encryption operations. In terms of applications, Kales et al. [36]
focuses on mobile contact discovery, where the receiver is a low-
powered mobile device, but our protocol does not target a specific
application. For this reason Kales et al. may have selected protocols
that require more online communication, e.g., GC-based OPRF, to
reduce the computation cost of the mobile device in the online phase.
Nevertheless, we would like to highlight that our communication
complexity in the online phase is either comparable or a lot better
than the two protocols in [36].
What cannot be seen from the table is that the cuckoo filter
also causes Kales et al. [36] to have a non-negligible false-positive
probability. In their experiments, they parameterized the cuckoo
filter to have a false-positive probability of 2−29. For example, if
|𝑌| = 11041, this results in a probability of around 2−15.6 for the
receiver to see at least one false positive result, so at least one
invocation of the protocol out of less than 49, 000 invocations would
report a false positive. While in some applications this may be
acceptable, in others it may not be. On the other hand, [13, 14], as
well as our variant, have a false-positive probability of at most 2−40,
and often much smaller in practical instantiations.
As Kales et al. [36] and Chen et al. [13], we also include a com-
parison to the work or Aranha and Resende [54]. However, we
note that [54] uses extremely aggressive cuckoo filter parameters,
resulting in online performance far better than any other protocol,
but with an impractically high false-positive rate of 2−13. Despite
the aggressive cuckoo filter parameters, [54] suffers from the high
offline communication complexity when the sender’s set is large.
5.2 Very Large Senders
It was pointed out by Kales et al. [36] that in practical applications,
such as mobile contact discovery, it is realistic to encounter sender’s
set sizes of more than a billion. While our protocol easily extends to
this case, running our implementation on such a large set requires
significantly more RAM than our system had available, resulting in
extensive paging and a massive slowdown in online computation.
Therefore, for very large senders a more viable solution is to
partition the dataset into smaller parts and run the protocol multiple
times with smaller parameters. We note that the receiver-to-sender
communication needs to be done only once, so for example running
our protocol against a sender with |𝑋| = 231 would require only 2.6+
8× 3.5 = 30.6 MB of communication, with |𝑌| = 1024, whereas [36]
would require a cuckoo filter of ≈ 8 GB to be communicated from
the sender to the receiver, which is clearly impractical.
5.3 SEAL Implementation: Labeled Mode
We demonstrate a few examples in the labeled mode as well. The
label size matters a lot, namely, recall from Section 4.2 that if labels
are longer than the item length (more correctly, the length of the
OPRF value used to represent the item), then the label must be
broken into multiple item-length chunks and separate interpola-