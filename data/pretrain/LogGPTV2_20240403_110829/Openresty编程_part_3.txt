### 使用过滤器

`Test::Nginx::Socket` 提供了许多方便的过滤器。以下是一个来自前述测试块的数据节示例：

```perl
— error_code: 200 —-
```

如果我们希望将 `200` 单独放在一行，如下所示：

```perl
— error_code 200 —-
```

那么数据节的值会包含一个换行符，这会导致测试失败。这是因为单行形式总是排除尾部的换行符，而多行形式总是包含一个换行符。为了在多行形式中显式地排除尾部的换行符，我们可以使用 `chomp` 过滤器，如下所示：

```perl
— error_code chomp 200 —-
```

现在它的语义与之前的单行形式完全相同。

某些过滤器对数据节的值有更显著的影响。例如，`eval` 过滤器会将数据节的值作为任意 Perl 代码进行求值，并将执行结果用作最终的数据节值。以下示例展示了如何使用 `eval` 过滤器生成 4096 个 'a' 字符：

```perl
— response_body eval "a" x 4096 —-
```

上述 `response_body` 数据节的原始值是一个 Perl 表达式，其中 `x` 符号是 Perl 的重复操作符，用于构造一个字符串，该字符串由左侧指定的字符串重复 N 次，N 由右侧指定。通过 `eval` 过滤器求值后得到的 4096 字节的 Perl 字符串将用作最终的数据节值，与实际响应体数据进行比较。显然，使用 `eval` 过滤器和 Perl 表达式比直接粘贴 4096 个字符更具可读性和可维护性。

用户还可以定义自己的过滤器，我们将在后续章节中详细介绍。

### 完整示例

以下是一个完整的测试文件示例，包括序言部分和数据部分：

```perl
use Test::Nginx::Socket 'no_plan';
run_tests();

DDAATTAA
=== TEST 1: hello, world
This is just a simple demonstration of the `echo` directive provided by `ngx_http_echo_module`.

— config
location = /t {
    echo "hello, world!";
}
— request
GET /t
— response_body
hello, world!
— error_code: 200
—-
```

下一节我们将介绍如何运行这样的测试文件。

**注意：** 本节描述的测试文件布局与基于 `Test::Base`（`Test::Nginx::Socket` 的父类）的其他测试框架基本相同，除了 `Test::Nginx::Socket` 中定义的一些特殊数据节和 Perl 函数。所有 `Test::Base` 的衍生框架都共享相同的基本布局和语法。

### 运行测试

一如大多数基于 Perl 的测试框架，`Test::Nginx` 依赖于命令行工具 `prove` 来运行测试文件。`prove` 工具通常随标准 Perl 发布包一起提供，因此在安装了 Perl 之后，我们应该已经有了 `prove`。

`Test::Nginx` 总是启动一个真实的 NGINX 服务器和套接字客户端来运行测试。它会自动使用系统环境变量 `PATH` 中找到的 `nginx` 程序。你需要确保在 `PATH` 环境变量中指定了正确的 `nginx`。通常我们会指定 OpenResty 安装目录中的 `nginx` 程序路径。例如：

```bash
export PATH=/usr/local/openresty/nginx/sbin:$PATH
```

这里假设 OpenResty 安装在默认路径 `/usr/local/openresty/`。

你可以使用 `which` 命令来验证 `PATH` 环境变量是否设置正确：

```console
$ which nginx
/usr/local/openresty/nginx/sbin/nginx
```

为了方便起见，我们通常将这些环境设置封装在一个自定义的 shell 脚本中，以避免污染全局或账户级别的环境设置，并减轻每次 shell 会话手动设置环境变量的负担。例如，我通常在每个项目中放置一个名为 `go` 的本地 bash 脚本。典型的 `go` 脚本可能如下所示：

```bash
#!/usr/bin/env bash
export PATH=/usr/local/openresty/nginx/sbin:$PATH
exec prove "$@"
```

然后我们可以在任何需要使用 `prove` 的场景中，用这个 `./go` 脚本来替换 `prove`。

由于 `Test::Nginx` 重度依赖环境变量来微调测试行为（我们将在后续章节中详细介绍），这样的包装脚本也使得管理这些环境变量设置变得简单，并且减少了出错的可能性。

**注意：** 请不要将此 bash 脚本的名称与 Google 的 Go 编程语言混淆。它与 Go 语言没有任何关系。

### 运行单个测试文件

如果你想要运行某个测试文件，比如说 `t/foo.t`，你只需在终端中输入以下命令：

```bash
prove t/foo.t
```

`t/foo.t` 文件的内容正是上一节展示的测试文件示例。为了方便读者查看，我们将其内容重复列出如下：

```perl
use Test::Nginx::Socket 'no_plan';
run_tests();

DDAATTAA
=== TEST 1: hello, world
This is just a simple demonstration of the `echo` directive provided by `ngx_http_echo_module`.

— config
location = /t {
    echo "hello, world!";
}
— request
GET /t
— response_body
hello, world!
— error_code: 200
—-
```

值得一提的是，如果你有一个名为 `./go` 的自定义脚本来包装 `prove`（如本节前面提到的），可以使用以下命令：

```bash
./go foo.t
```

如果一切顺利，会有如下输出：

```
.... t/foo.t .. ok
All tests successful.
Files=1, Tests=2, 0 wallclock secs (0.02 usr 0.01 sys + 0.08 cusr 0.03 csys = 0.14 CPU)
Result: PASS
```

这是一个非常简洁的总结。第一行告诉你所有测试都通过了，第二行则给出测试文件数（1）、测试数（2）以及运行全部测试所花费的墙上时间和 CPU 用时。

有趣的是，尽管示例测试文件中只有一个测试块，但在 `prove` 输出的测试摘要中显示测试数为 2。为什么会这样？可以通过让 `prove` 生成所有单独测试的详细报告来揭示真相。这可以通过向之前的 `prove` 命令添加 `-v` 选项（表示“详细”）来实现：

```bash
prove -v t/foo.t
```

现在输出将显示该测试文件中每个测试的运行情况：

```
.... t/foo.t .. ok
1 - TEST 1: hello, world - status code ok
ok 2 - TEST 1: hello, world - response_body - response is expected (req 0)
1..2
ok
All tests successful.
Files=1, Tests=2, 0 wallclock secs (0.01 usr 0.01 sys + 0.07 cusr 0.03 csys = 0.12 CPU)
Result: PASS
```

显然，第一个测试检查状态码，这是由测试块中的 `error_code` 数据节指定的；第二个测试检查响应体，这是由 `response_body` 数据节要求的。现在谜团解开了。

值得一提的是，如果测试块中没有显式提供 `error_code` 数据节，则会自动假设 `--- error_code: 200`。因此，我们可以移除多余的 `--- error_code: 200` 行而不影响测试的总数。因为检查 200 响应状态码是一个常见的需求，所以 `Test::Nginx` 将其设为默认行为。如果你期望的是其他状态码，比如 500，则只需添加一个显式的 `error_code` 数据节。