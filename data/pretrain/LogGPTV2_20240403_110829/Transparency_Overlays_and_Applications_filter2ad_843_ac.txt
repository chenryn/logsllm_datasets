adversary then takes on the role of the log server and is allowed to interact arbitrarily with the actor(s) in the
system, auditor, and monitor. It wins if there is an event that it has pledged to include but that the auditor
and monitor do not believe to be in the log (the third winning condition of Deﬁnition 4.3), yet the auditor
and monitor are unable to produce evidence of this omission (the ﬁrst two winning conditions). For ease of
formal exposition, we assume Sys produces its ﬁnal output before Auditor in the CheckEntry protocol, but
again note that this does not sacriﬁce generality.
Deﬁnition 4.3 (Accountability). Deﬁne Advtrace
trans,A(λ) = Pr[GtraceA (λ)], where GtraceA (λ) is deﬁned as follows:
r←− AMsgSys,MsgAu,MsgMo(1λ)
main GtraceA (λ)
events1, events2, eventspledged, eventsfail, a ← ∅
pkLS
evidence r←− Run(1λ, Gossip, (Auditor, Monitor), (ε, ε))
return ((CheckEvidence(pkLS, evidence) = 0) ∧
(time(stateMo[snap]) ≥ time(stateAu[snap]))∧
((eventspledged ∩ eventsfail) \ stateMo[events] (cid:54)= ∅))
MsgSys(Prot, i, j, m)
a[i, j] ← m
if (Prot = Log)
if (i = 1) events1[j] ← m[events]
if (out = 1) eventspledged ← eventspledged ∪ events1[j]
if (Prot = CheckEntry) ∧ (out = 0) eventsfail[j] ← events2[j]
(a[i + 1, j], m(cid:48), p, out) r←− Prot[Sys, i, j](1λ, a[i, j], m)
return m(cid:48)
MsgAu(Prot, i, j, m)
if (Prot = CheckEntry)
if (i = 1) events2[j] ← m
if (out = 0) eventsfail[j] ← ⊥
(stateAu, m(cid:48), p, out) r←− Prot[Auditor, i, j](1λ, stateAu, m)
return m(cid:48)
MsgMo(i, j, m)
(stateMo, m(cid:48), p, out) r←− Inspect[Monitor, i, j](1λ, stateMo, m)
return m(cid:48)
Then the transparency overlay satisﬁes accountability if for all PT adversaries A there exists a negligible
function ν(·) such that Advtrace
trans,A(λ)  tAu)
b
b ← CheckSnap(snapLS) ∧ CheckAppend(cAu, cLS, π)
snapAu
snapLS,π
π ← ProveAppend(cAu, cLS, eventsLS)
5
6
7
8
9
10
11
12
13
14
15
16
if (b = 0) return 0
snapAu ← snapLS
b ← (rcpt[t] ≤ tAu)
if (b = 0) return fail
b
b
π(cid:48)
b ← CheckIncl(cAu, event, π(cid:48))
event,snapAu
π(cid:48) ← ProveIncl(cAu, event, eventsLS)
return ε
return b
if (b = 0) eventsbad ← eventsbad(cid:107)(event, rcpt)
return 1
Figure 3: The CheckEntry protocol for pledged transparency overlays. The parts of the protocol that may not be
carried out (depending on the ‘if’ clause) are marked with dashed lines.
the two snapshots (i.e., demonstrate that they represent forking or distinct logs) and — if any inconsistencies
do exist — this is returned as evidence of the log server’s misbehavior.
To augment the protocol for pledged overlays, we include in Figure 5 a further optional interaction in
which the auditor sends to the monitor all events for which the CheckEntry protocol failed, to see if they are
being monitored; these are stored in a list eventsbad that is now part of the auditor’s state and updated in
the CheckEntry protocol (line 15 of Figure 3). This allows the auditor and monitor to detect and provide
evidence for the additional type of misbehavior in which the log server simply drops events from the log. This
means that the auditor and monitor can provide two types of evidence: evidence that the log server presented
them with forked or distinct views of the log, or evidence that the log server reneged on the promise it gave
in a receipt. We thus instantiate the algorithm CheckEvidence as follows:
CheckEvidence(pk LS, evidence)
if (evidence = ⊥) return 0
(snap1, snap2, (event, rcpt), π) ← evidence
if (CheckSnap(snap1) = 0) return 0
if (CheckSnap(snap2) = 0) return 0
if ((event, rcpt) = (⊥,⊥)) return (CheckInconsistent(c1, t1, c2, π) ∧ (t1 ≤ t2))
return (CheckRcpt(event, rcpt) ∧ CheckNotIncl(c2, event, π) ∧ (rcpt[t] ≤ t2))
Finally, our gossip protocol assumes the monitor has a more up-to-date snapshot than the auditor, which
protects against an adversarial log server trivially winning the consistency game (Deﬁnition 4.1) by ignoring
the monitor. One could also imagine a protocol in which the monitor pauses, updates (using the Inspect
protocol), and then resumes its interaction with the auditor, in which case the extra winning condition in
Deﬁnition 4.1 could be dropped.
Theorem 4.4. If the DLC is secure in the augmented setting and the signature scheme is unforgeable (i.e.,
EUF-CMA secure), then the protocols presented in Figures 2-5 and the algorithms presented above comprise
a secure pledged transparency overlay, as deﬁned in Section 4.2.
A proof of this theorem can be found in Appendix C. Brieﬂy, consistency follows from three properties
of the dynamic list commitment: provable inconsistency, append-only, and soundness. Together, these ensure
11
/
/
o
o
/
/
o
o
o
o
o
o
/
/
o
o
o
o
1
2
3
4
5
6
7
8
9
10
Monitor(snapMo, eventsbad, eventsMo)
LS(log)
snapMo