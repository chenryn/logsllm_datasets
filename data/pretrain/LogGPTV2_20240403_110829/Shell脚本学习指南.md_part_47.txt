parts[1] = *Karold*
parts[2] = *and*
apnex, - [c]sxed
Field separator = *[ 1°
parts[1] = **
parts[2] 。 **
poze.-[e]exed
parts[4] = **
parts[5] - *and*
parte[6] -*Kaude*
Field separator = 1
parta[1] = *
Harold and Maude*
root:x:0:1:The Ommipotent Super Uner1/root1/ebin/8h
Field separator = FS = **
parts[1] = *root1x:0:1:The*
parts[2] = *Ommipotent*
parts[3] = *Super*
parts[4] = *User:/root:/sbin/sh*
Field separator = *[ 1*
parts[2] = *omnipotent*
parts[1] = *root:x:0:1:The*
www.TopSage.com
---
## Page 285
awk的惊人表现
273
parts [4] = *User :/root:/sbin/sh*
xedng, = [e]sxed
Field separator = *:*
parts[1] = *root*
parts{3] - *0*
perts[2] = *x*
xe80 xedng quagodyuso a4L。 - [5)sszed
parts[4] = *1*
400x/. = [9]sxed
,Q8/uyq6/。 = [2]9red
请特别留意默认字段分隔字符值··与”1“的差异：前者会忽略前置与结尾的空白，
并于运行时将空白（whitespace）视为一个单独空格（single space），后者则正好匹配
一个空格。对绝大多数文本处理应用程序面言，第一种行为模式就已经满足功能上的需
求了，
以冒号为字段分隔字符的例子显示出：当字段分隔字符不匹配时，则split（)会产生单
元素数组（one-element array），井展示切割传统UNIx管理文件/etc/passwd里的记
录。
近期awk的实现提供更一般化的方式：split（string，chars，")，将string分
割为单字符元素放置到chars[1]、chars[2]、、chars[1ength（string）]中。旧
式的实现则要求使用下面这种较没有效率的方式：
n = length(string)
for (k = 1; k = 1)
L
s = array[1]
for (k = 2; k <= n; k++)
s * s fs array[k]
return (s)
1
9.9.8字符串格式化
最后一个与字符串相关的函数是在用户控制下格式化数字与字符串：sprintf（format，
expressicnl，expression2，...)，它会返回已格式化的字符串作为其函数值，printf（）
的运行方式也是这样，只不过它会在标准输出或重定向的文件上显示格式化后的字符串，
而不是返回其函数值。较新的程序语言以更强大的格式化函数来取代格式控制字符串，
但相对而言让代码变得很长。按照传统的文本处理应用来说，sprintf（）与printf（）
儿乎就够用了。
printf（）与sprintf（）的格式字符串有点类似在Shell里的printf命令，详见7.4节。
我们将awk的格式项目概括于表9-5。这些项目每一个都可以用相同字段宽度、精度以
及第7章讨论的标志修改符来增加。
8i、8u与$x并非1987年语言重新设计时的一部分，不过现代的实现都支持它们。尽
管与Shell的printf命令里很相似，但awk的&c对整数参数方面的处理是不同的，且
使用&u的输出时，对负数参数的处理上也有差异，这是由于Shell与awk在算术上的不
同所导致的。
www.TopSage.com
---
## Page 287
awk的惊人表现
275
表9-5：printf与sprintf格式描述符
项目
说明
&c
ASCII字符。显示相对应于字符串参数的第一个字符，或是在主机字符集里，相
对应于该整数参数的编号的字符，通常是256的余数。
e6, &i
十进制整数，
te
浮点格式（[-1d.precisione[+-]dd)。
f
浮点格式（[-]ddd.precision),
eg
e或&f的转换，因为删除结尾的0，所以较短。
无符号八进制值。
$8
字符串。
u
不带正负号的值，awk数字是浮点数值：小的负值整数会以大的正值输出，因为
符号字节被解释为一个数据位。
x
不带正负号的十六进制数字，字母a-E表示10到15，
X
不带正负号的十六进制数字，字母入-?表示10到15。
字面上的%。
大部分的格式项目都是直觉易懂的。不过我们还是得特别留意二进制浮点数值转换为十
进制字符串时能达到的精度，反向运算也然，都可能出现难以解决的大问题。比较好的
解决方案只有在1990年发现的那个，而它需要极高的精度。aWk实现一般是使用底层
的C函数库，进行sprintf（)格式项目所需的转换，虽然函数库的品质一直在改善，但
仍有一些平台的浮点转换精度存在不足。再者，浮点运行硬件的不同与命令计算顺序的
差异，意味着只要硬件架构稍有不同，几乎来自任何程序语言所产生的浮点运算结果就
会有些许不同。
当浮点数出现在print语句里时，awk会根据内建变量OPMT的值格式化它们，OPKT
的默认值为".6g”，如果有必要，可重新定义，
类似地，当浮点数转换为连续字符串时，awk会根据另一个内建变量CONVFMT（注4）的
值进行格式化。CONVFXT的默认值也为“，6g”。
例9-8测试程序所产生的输出，有点类似近期SunSolaris的SPARC系统提供的nawk版
本所产生的结果：
注 4:
最，OFNT做的是输出与字募事的特换，红POSIX根出CONVFMT后，将它们两个的用
逢做了区分，大部分的实现两者都支神，但SGIIRIX与Sun Solaris 7usr/bini/nawk
不支持CONVPMT,
www.TopSage.com
---
## Page 288
276
第9章
$ nawk -f ofnt.awk
[1] OFM =*.6g*
123.457
P。= x20 [2 ]
123
[ 3] OFHT - *te*
1.234568e+02
[ 4]: OFMT =
"$f*
123,456789
[ 5]  OFMT
[ 6] OFMT =
"g”
*$25.16e*
123.457
1.2345678901234568e+02
[7]OFMT
=
*25.16f*
123 4567890123456806
[8] FM - 25.16g*
123.4567890123457
[10] oFMr - *#.25d*
[ 9] 0FMT = *25d*
0000000000000000000000123
133
[12] 0FMT - *25d"
[11] OFHT =
*$25d*
2147483647
2147483647
预期的2147483648
-PSC+.-HO [ET]
2147483647
预期的 9007199254740991
[14] 0FMT = *25.0f"
9007199254740991
显然，尽管在浮点值里可以表示到53位的精确度，但在这个平台上的nawk，在&d格
式的限定下，只支持到32位的整数。相同的nawk版本，在不同架构下执行，便产生略
微不同的结果。例9-8为ofmt，awk的源代码。
例9-8：测试OFMT的效果
BEGIN (
test ( 1, OPYT,
123, 45678901234567891
test( 2,
*$d*,
123 , 45678901234567891
test ( 3,
'te*,
123 45678901234567891
test(4,
123 45678901234567891
test ( 5,
*eg*,
123, 45678901234567891
test ( 6,
*$25.16e",
123,45678901234567891
123 . 45678901234567891
test ( 7,
test ( 8,
*$25.16f*;
*t25.16g*,
123 , 45678901234567891
test ( 9,
*$25d°,
123,45678901234567891
test (10,
'$.25d*,
123, 45678901234567891
test (11,
*$25d*,
2°31 - 1)
test (12,
'$25d*,
252 + (2^52 - 1))
2°31)
test (13,
*$25d*,
test (14,
252 + (2^52 (- 1))
function test (n, fnt, value,
save_fnt)
save_fnt = OFMT
printf(* [42d]OPMr =\*g*\t*, n, OPM)
OFMT = fmt
print value
OFMT = ,8ave_fmt
我们发现，对于在不同的awk实现，这个测试的输出会有完全不同的结果，甚至相同程
序在不同发布版本下也可能出现不同的结果。例如，以gawk执行，我们会得到：
 gavix -f ofnt.awt
www.TopSage.com
---
## Page 289
awk的惊人表现
[11] OFMr = *825d*
2147483647
预期向右对齐的结果C.com
[13] OFMT = *$25d*
9.0072e+15