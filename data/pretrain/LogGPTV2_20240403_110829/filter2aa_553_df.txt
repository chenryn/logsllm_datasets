看来，这样传递参数没问题。注意，sum()函数既不知道也不关心实际
的参数是否是结构的成员，它只要求传入的数据是double类型。
当然，如果需要在被调函数中修改主调函数中成员的值，就要传递成员
的地址：
modify(&stan.bankfund);
这是一个更改银行账户的函数。
把结构的信息告诉函数的第2种方法是，让被调函数知道自己正在处理
一个结构。
14.7.2 传递结构的地址
我们继续解决前面的问题，但是这次把结构的地址作为参数。由于函数
要处理funds结构，所以必须声明funds结构。如程序清单14.6所示。
程序清单14.6 funds2.c程序
/* funds2.c -- 传递指向结构的指针 */
#include 
#define FUNDLEN 50
struct funds {
char   bank[FUNDLEN];
double  bankfund;
1038
char   save[FUNDLEN];
double  savefund;
};
double sum(const struct funds *); /* 参数是一个指针 */
int main(void)
{
struct funds stan = {
"Garlic-Melon Bank",
4032.27,
"Lucky's Savings and Loan",
8543.94
};
printf("Stan has a total of $%.2f.\n", sum(&stan));
return 0;
}
double sum(const struct funds * money)
{
return(money->bankfund + money->savefund);
}
1039
运行该程序后输出如下：
Stan has a total of $12576.21.
sum()函数使用指向funds结构的指针（money）作为它的参数。把地址
&stan传递给该函数，使得指针money指向结构stan。然后通过->运算符获取
stan.bankfund和stan.savefund的值。由于该函数不能改变指针所指向值的内
容，所以把money声明为一个指向const的指针。
虽然该函数并未使用其他成员，但是也可以访问它们。注意，必须使用
&运算符来获取结构的地址。和数组名不同，结构名只是其地址的别名。
14.7.3 传递结构
对于允许把结构作为参数的编译器，可以把程序清单14.6重写为程序清
单14.7。
程序清单14.7 funds3.c程序
/* funds3.c -- 传递一个结构 */
#include 
#define FUNDLEN 50
struct funds {
char  bank[FUNDLEN];
double bankfund;
char  save[FUNDLEN];
double savefund;
};
1040
double sum(struct funds moolah); /* 参数是一个结构 */
int main(void)
{
struct funds stan = {
"Garlic-Melon Bank",
4032.27,
"Lucky's Savings and Loan",
8543.94
};
printf("Stan has a total of $%.2f.\n", sum(stan));
return 0;
}
double sum(struct funds moolah)
{
return(moolah.bankfund + moolah.savefund);
}
下面是运行该程序后的输出：
Stan has a total of $12576.21.
该程序把程序清单14.6中指向struct 
funds类型的结构指针money替换成
1041
struct funds类型的结构变量moolah。调用sum()时，编译器根据funds模板创建
了一个名为moolah的自动结构变量。然后，该结构的各成员被初始化为 stan
结构变量相应成员的值的副本。因此，程序使用原来结构的副本进行计算，
然而，传递指针的程序清单14.6使用的是原始的结构进行计算。由于moolah
是一个结构，所以该程序使用moolah.bankfund，而不是moolah->bankfund。
另一方面，由于money是指针，不是结构，所以程序清单14.6使用的是monet-
>bankfund。
14.7.4 其他结构特性
现在的C允许把一个结构赋值给另一个结构，但是数组不能这样做。也
就是说，如果n_data和o_data都是相同类型的结构，可以这样做：
o_data = n_data; // 把一个结构赋值给另一个结构
这条语句把n_data的每个成员的值都赋给o_data的相应成员。即使成员
是数组，也能完成赋值。另外，还可以把一个结构初始化为相同类型的另一
个结构：
struct names right_field = {"Ruthie", "George"};
struct names captain = right_field; // 把一个结构初始化为另一个结构
现在的C（包括ANSI C），函数不仅能把结构本身作为参数传递，还能
把结构作为返回值返回。把结构作为函数参数可以把结构的信息传送给函
数；把结构作为返回值的函数能把结构的信息从被调函数传回主调函数。结
构指针也允许这种双向通信，因此可以选择任一种方法来解决编程问题。我
们通过另一组程序示例来演示这两种方法。
为了对比这两种方法，我们先编写一个程序以传递指针的方式处理结
构，然后以传递结构和返回结构的方式重写该程序。
程序清单14.8 names1.c程序
1042
/* names1.c -- 使用指向结构的指针 */
#include 
#include 
#define NLEN 30
struct namect {
char fname[NLEN];
char lname[NLEN];
int letters;
};
void getinfo(struct namect *);
void makeinfo(struct namect *);
void showinfo(const struct namect *);
char * s_gets(char * st, int n);
int main(void)
{
struct namect person;
getinfo(&person);
makeinfo(&person);
showinfo(&person);
1043
return 0;
}
void getinfo(struct namect * pst)
{
printf("Please enter your first name.\n");
s_gets(pst->fname, NLEN);
printf("Please enter your last name.\n");
s_gets(pst->lname, NLEN);
}
void makeinfo(struct namect * pst)
{
pst->letters = strlen(pst->fname) +strlen(pst->lname);
}
void showinfo(const struct namect * pst)
{
printf("%s %s, your name contains %d letters.\n",
pst->fname, pst->lname, pst->letters);
}
char * s_gets(char * st, int n)
1044
{
char * ret_val;
char * find;
ret_val = fgets(st, n, stdin);
if (ret_val)
{
find = strchr(st, '\n');  // 查找换行符
if (find)          // 如果地址不是 NULL,
*find = '\0';     // 在此处放置一个空字符
else
while (getchar() != '\n')
continue;     // 处理输入行的剩余字符
}
return ret_val;
}
下面是编译并运行该程序后的一个输出示例：
Please enter your first name.
Viola
Please enter your last name.
1045
Plunderfest
Viola Plunderfest, your name contains 16 letters.
该程序把任务分配给3个函数来完成，都在main()中调用。每调用一个
函数就把person结构的地址传递给它。
getinfo()函数把结构的信息从自身传递给main()。该函数通过与用户交互
获得姓名，并通过pst指针定位，将其放入 person 结构中。由于 pst->lname
意味着 pst 指向结构的 lname 成员，这使得pst->lname等价于char数组的名
称，因此做s_gets()的参数很合适。注意，虽然getinfo()给main()提供了信
息，但是它并未使用返回机制，所以其返回类型是void。
makeinfo()函数使用双向传输方式传送信息。通过使用指向 person 的指
针，该指针定位了储存在该结构中的名和姓。该函数使用C库函数strlen()分
别计算名和姓中的字母总数，然后使用person的地址储存两数之和。同样，
makeinfo()函数的返回类型也是void。
showinfo()函数使用一个指针定位待打印的信息。因为该函数不改变数
组的内容，所以将其声明为const。
所有这些操作中，只有一个结构变量 person，每个函数都使用该结构变
量的地址来访问它。一个函数把信息从自身传回主调函数，一个函数把信息
从主调函数传给自身，一个函数通过双向传输来传递信息。
现在，我们来看如何使用结构参数和返回值来完成相同的任务。第一，
为了传递结构本身，函数的参数必须是person，而不是&person。那么，相
应的形式参数应声明为struct 
namect，而不是指向该类型的指针。第二，可
以通过返回一个结构，把结构的信息返回给main()。程序清单14.9演示了不
使用指针的版本。
程序清单14.9 names2.c程序
/* names2.c -- 传递并返回结构 */
1046
#include 
#include 
#define NLEN 30
struct namect {
char fname[NLEN];
char lname[NLEN];
int letters;
};
struct namect getinfo(void);
struct namect makeinfo(struct namect);
void showinfo(struct namect);
char * s_gets(char * st, int n);
int main(void)
{
struct namect person;
person = getinfo();
person = makeinfo(person);
showinfo(person);
return 0;
1047
}
struct namect getinfo(void)
{
struct namect temp;
printf("Please enter your first name.\n");
s_gets(temp.fname, NLEN);
printf("Please enter your last name.\n");
s_gets(temp.lname, NLEN);
return temp;
}
struct namect makeinfo(struct namect info)
{
info.letters = strlen(info.fname) + strlen(info.lname);
return info;
}
void showinfo(struct namect info)
{
printf("%s %s, your name contains %d letters.\n",
info.fname, info.lname, info.letters);
1048
}
char * s_gets(char * st, int n)
{
char * ret_val;
char * find;
ret_val = fgets(st, n, stdin);
if (ret_val)
{
find = strchr(st, '\n');  // 查找换行符
if (find)          // 如果地址不是 NULL，
*find = '\0';     // 在此处放置一个空字符
else
while (getchar() != '\n')
continue;     // 处理输入行的剩余部分
}
return ret_val;
}
该版本最终的输出和前面版本相同，但是它使用了不同的方式。程序中
的每个函数都创建了自己的person备份，所以该程序使用了4个不同的结
构，不像前面的版本只使用一个结构。
1049