HADES-IoT protects itself and ensures that it is tamper-proof.
4.4.1 Binary Manipulation. When an IoT device is booted, HA-
DES-IoT is deployed to the kernel from its binary file. Therefore,
a possible attack is the deletion of this file. This would cause the
installation of HADES-IoT to fail at boot time. Similarly, an attacker
can move the binary file of HADES-IoT to a different location, again
causing the installation of HADES-IoT to fail at boot time. Finally,
instead of removing or moving the binary file, an attacker could
attempt to modify HADES-IoT’s binary file, which would yield an
unpredictable result. For example, an attacker might modify the
kernel version included in HADES-IoT for compatibility checks.
Since the version information contained in HADES-IoT would not
match with the version of the kernel running on an IoT device,
the kernel would refuse to install HADES-IoT, and thus the device
would remain unprotected. Alternatively, an attacker could corrupt
the HADES-IoT binary, which could result in a permanent denial of
service due to the crashing or freezing of the kernel. As mentioned
in Section 3.2, passing the check that takes place during the LKM
installation does not guarantee that an LKM is fully compatible
with the kernel; hence a faulty LKM can still be installed.
Protection. To prevent a manipulation of HADES-IoT’s binary
by an attacker, HADES-IoT loads its binary into the memory on
boot and when a restart of a device is requested, HADES-IoT’s
binary is (re-)written to the storage, regardless of whether the orig-
inal version was modified or not. Thanks to this, any malicious
6https://busybox.net/
Figure 4: Flow of the execve system call execution with
HADES-IoT installed to the kernel.
(see Section 4.3). Using the computed digest, the intercepting func-
tion looks for a match on the whitelist of all authorized programs.
If a match is found, the process is allowed to run, and therefore the
intercepting function performs a call to the original execve system
call. However, if a match was not found, the intercepting func-
tion returns “−ENOSYS” error code, which tells the process that
the execve system call is not implemented. This naturally termi-
nates the process, thus stopping the execution of any unauthorized
(e.g., potentially malicious) action.
Restoration of CPU Context. It is important to note that the
Linux kernel is not aware of the fact that HADES-IoT changes the
address of the execve system call in the system call table to the
address of the intercepting function. Therefore, when the execve
system call is called by a process, the environment is prepared for
the execution of this system call. This means that the intercepting
function must act transparently and after performing the autho-
rization check, it must restore any tainted processor register to its
original state. Otherwise, it would lead to an inconsistent state that,
in most cases, causes the kernel to freeze or crash.
4.3 Whitelist Design
When HADES-IoT is successfully bootstrapped, each call to the
execve system call is intercepted, followed by a search for a match on
the whitelist for a program that is requested to run. An inefficiently
designed search process would cause the IoT device exhibit slow
response time, particularly when the device has a large number of
periodically spawned processes. For example, if the whitelist were
naïvely designed as a linked list, the asymptotic time complexity
of the search routine would be equal to O(n). This means that the
larger the whitelist is, the longer the imposed delay. Therefore, to
efficiently cope with such a delay, we decided to design the whitelist
as a hash table. The hash table enables us to reach an asymptotic
HADES-IoTlibC libraryProcessexecvelibC wrapperexecveSoftware Interrupt HandlerUser spaceKernel spaceexecveIntercepting FunctionFunctionNot ImplementedWhitelistca978112ca1bbdc...afac231b39a23dc...4da786eff8147c4...e72b9807785afee...⁞ SHA256MatchNo MatchlibC libraryProcessexecvelibC wrapperexecve wrapperSoftware Interrupt HandlerUser spaceKernel spaceexecveWithout HADES-IoTWith HADES-IoTIntercepting FunctionSHA256 InputProgram’s binaryits path[LKM binary] If insmod[LKM name]   If rmmod{HADES-IoT: A Practical Host-Based Anomaly Detection System for IoT Devices
modification, removal, or movement of the original binary is pre-
vented.
4.4.2 Loading Malicious LKMs. A common practice for IoT de-
vices is to install a few LKMs at the boot time. These LKMs usually
represent drivers. However, the utility for installing LKMs (i.e., ins-
mod) is then included in the whitelist of HADES-IoT. This means
that an attacker can exploit the utility to install his own LKM in
order to “override” execve interception with a malicious callback
function, and thus effectively put HADES-IoT out of the game.
Protection. As a protection mechanism, each execution of isn-
mod must be verified against the allowed and known executions,
requiring more fine-grained indexing to the whitelist. In contrast
to the whitelist indexing of standard binaries, in the case of insmod
the index to the whitelist is computed as a cryptographic hash from:
1) binary content of insmod, 2) its path, and 3) the binary content of
an LKM that is requested to load to a kernel. This ensures that only
known LKMs from the profiling stage are allowed to load again.
4.4.3 HADES-IoT Uninstallation. IoT devices often install sev-
eral LKMs (e.g., drivers) on boot, and therefore they might also
uninstall some LKMs during runtime. When such a case occurs,
the utility for uninstalling LKMs (i.e., rmmod) is included in the
whitelist. This means that without a prior check, not only the dri-
vers but also HADES-IoT itself can be uninstalled by the attacker.
Protection. The prevention of this attack is almost the same as
in the previous case. The only difference is that instead of adding the
binary content of the LKM to the hash computation, it is sufficient
to use the name of the LKM, as the name unambiguously identi-
fies a kernel module that has been already installed. On the other
hand, this solution does not prevent an attacker from uninstalling
a kernel module included in the whitelist, and thus disabling some
functionality of an IoT device. We consider this issue out of the
scope of this paper, and we plan to address it in our future work.
Init Script Manipulation. Another possible attack is a
4.4.4
modification of the init script. The init script is executed on boot of
an IoT device, and it contains commands to configure and prepare
the device for use. HADES-IoT installation is one of the commands
included. Therefore, if an attacker manages to remove the com-
mand from the init script and subsequently restarts the device,
HADES-IoT will not be installed into the kernel on boot.
Protection. To prevent this attack, as in the case of protecting
the modification of HADES-IoT’s binary, we propose loading init
script into the memory of HADES-IoT on boot. Therefore, when
an IoT device is rebooted, the script is (re-)written to the storage,
regardless of whether it was modified or not.
4.4.5 Memory Tampering. Memory tampering is another po-
tential attack. However to prevent this, HADES-IoT takes advantage
of the fact that it is integrated into the kernel’s memory. Therefore,
user space programs cannot reach the kernel, since accessing the
kernel space is forbidden and results in a segmentation fault error.
The only chance for an attacker to tamper with HADES-IoT’s mem-
ory is to get into the kernel space as well. Countermeasures that
prevent the attacker from loading anything into the kernel were
presented in Section 4.4.2.
4.5 Extensions
The core functionality of HADES-IoT presented in this paper effec-
tively detects and terminates any unauthorized process spawned on
a protected IoT device. However, in this form, HADES-IoT may be
difficult for users to operate. Therefore, in this section, we present
extensions that were incorporated into HADES-IoT in order to
make it more convenient to use and to further improve its detection
capabilities.
4.5.1 Reporting Subsystem. Although HADES-IoT protects an
IoT device and keeps it safe, the owner of the device should be
informed about any attempted attack, so he can perform further ac-
tions. Therefore, we introduce a reporting subsystem that informs
the owner when an attack has been detected. The reporting sub-
system is optional and contains: 1) an application running on the
owner’s machine, and 2) a user space application which is deployed
along with HADES-IoT on an IoT device. Once an attack attempt is
detected, HADES-IoT immediately notifies the reporting subsystem,
which then forwards this information to the owner of the device.
4.5.2 Remote Control & Whitelist Updates. When an IoT de-
vice is updated, HADES-IoT must be reprofiled or bootstrapped
again (see Section 7.1). In the case of reprofiling, HADES-IoT must
first be terminated. However, this termination and reprofiling must
be performed in a secure way, not allowing an attacker to take
advantage of it.
To address this issue, we further extended the user space applica-
tion described in Section 4.5.1. This extension allows the application
to listen on a specified port, enabling a user to connect through
the remote control application to the port. After connecting, the
user must authenticate himself and then the user may issue certain
commands to HADES-IoT (e.g., stop, start, profile, protect). Dur-
ing an update of an IoT device, the user stops HADES-IoT. Once
the update is done, the user instructs HADES-IoT to run in the
profiling mode, which causes the whitelist to be rebuilt to reflect
the new changes. After reprofiling, the user sends a command to
HADES-IoT in order to enable the protection again.
Since IoT devices rarely provide dependencies for asymmetric
cryptography, we propose using Merkle signatures scheme [18] in
order to authenticate messages sent by the owner to the reporting
subsystem (see Section 5). Merkle signatures scheme only requires
a cryptographically secure hash function, and moreover it provides
resilience against quantum computing attacks.
4.5.3 Signal Monitoring. Signals in Linux are software inter-
rupts that inform a process about an event that has occurred. For
each signal, there is a defined default action that a program will
perform once the signal is received (e.g., stop, continue, or termi-
nate). A signal can be sent to a process by invoking the kill system
call. Another option is to use the kill utility. As sending a signal to a
process can lead to its termination, an attacker may take advantage
of this by sending the SIGKILL signal to a service such as lighttpd
and cause a denial of service attack. Nevertheless, when an IoT
device is protected by HADES-IoT, the attacker cannot use his own
program, since it would be stopped. Therefore, using the kill utility
is the attacker’s only option. According to the POSIX standard, the
kill utility should always be provided as a standalone binary. If
the kill utility is never used in the normal profile of an IoT device,
HADES-IoT will also detect such an attempt of process termination
and prevent it. Note that the kill utility is just a wrapper for the
kill system call; however, some shells call a built-in function that
directly invokes the kill system call instead of executing the kill
utility. Hence, any malicious termination of a process would not be
detected.
To resolve this issue, HADES-IoT also has to intercept the kill
system call. This allows HADES-IoT to detect an invocation of the
kill system call and if it is not authorized, its invocation is prevented.
5 DETAILS OF REMOTE CONTROL
First, we briefly describe Lamport one-time signatures and their
aggregation by Merkle signature scheme. Then, we explain the
integration of this scheme into HADES-IoT for the purpose of
authentication of messages sent to the remote control application.
In detail, we describe the deployment of HADES-IoT with this
scheme and use case representing secure firmware update.
5.1 Lamport One-Time Signatures
Lamport signature scheme [14] is a quantum resistant construct of
the asymmetric cryptography, which serves for authentication of a
single message. The private key is generated by a cryptographically
secure pseudo-random number generator (CSPRNG). The private
key consists of two pairs of K numbers, each K bits long, where
K represents the output size of a cryptographically secure hash
function h(.). Therefore, the size of the key is 2K2 bits (e.g., if
K = 256, then this size is 16kB). Next, the public key is computed
from the private key by making a hash of each number in the key,
obtaining the same size and pair-wise structure of the public key
as for the private key.
Signature of a message m is created by selecting K numbers from
a private key: for each pair of numbers at position i = {1, . . . , K},
one number is selected according to the value of a bit at position i
of the hash h(m) computed from the message m. More specifically,
the first number of the private key at position i is selected, if the
i-th bit of h(m) = 1, while the second number is selected otherwise.
Hence, a signature contains K numbers and the resulting size of
the signature is K2 bits (e.g., if K = 256, then this size is 8kB).
Verification of the signature associated with h(m) starts by select-
ing one number from each number pair of the public key, according
to the value of each bit in h(m). Then, the obtained K values are
compared to K hash values computed from the signature – the
signature is valid in the case of a match, otherwise, it is invalid.
5.2 Merkle Signature Scheme
Merkle Signatures [18] extend one-time signature schemes (such as
Lamport signatures [14]) to support multiple messages. In detail, N
public/private keypairs of one-time signatures are generated by a
cryptographically secure pseudo-random function F(S||i), where S
represents secret seed, i = {1, . . . , N}, || represents string concate-
nation, and N is equal to the power of 2. An example of function
F(.) is a SHA3 hash function. Next, the hash value is computed
from each public key, and then these N hashes are aggregated by a
Merkle tree into a root hash, which represents a master public key
associated with all leaf public keys and their corresponding private
keys.
Figure 5: Deployment of HADES-IoT by a manufacturer.
Signing of a message m is performed as described in the previous
section, but the signature is additionally extended by an authen-
tication path7 associated with a particular leaf in the Merkle tree.
The authentication path consists of loд2(N) hash values and indica-
tions of their left/right positions within the Merkle tree. Given the
authentication path and a particular leaf public key, it is possible to
verify whether this leaf public key is present at a particular position
of the Merkle tree by deriving the root hash value. If the derived
root hash value matches the (master) public key, verification is
successful. In sum, the size of the signature is K2 + Kloд2(N) bits
(e.g., if K = 256 and N = 215, then this size is 8.67kB)
Verification of the signature associated with the message m has
two steps: 1) The verification of the Lamport signature is made (as
described in Section 5.1), 2) if the Lamport signature is correct, then
the verification of the expected public/private key pair is made by
derivation of the root hash (as described above).
5.3 Integration with HADES-IoT
We propose to integrate the Merkle signature scheme with HADES-
IoT, as it has only minimal requirements on dependencies available
on the device – the only requirement is a cryptographically secure
hash function. In the case when HADES-IoT is deployed by a man-
ufacturer (see Figure 5), the secret seed generation is made by the
manufacturer as well. This may impose issues related to secure
delivery of the secret seed S to the user who requires S to generate
all public/private keys and reconstruct the Merkle tree. However,
we consider these issues out of the scope of this paper, and we
assume that the seed S can be delivered securely. Note that these
issues do not exist when HADES-IoT is deployed by the user (see
Figure 6), as the user is the only one who knows the secret seed S,
and thus all the leaf private keys.
When all the leaf public keys are generated, the master public
key is obtained by computing the root hash out of all the leaf public
7Also referred to as Merkle proof or authenticator.
Precompilation& ProfilingManufacturerIoT DeviceDistribution & OperationPrecompile HADES-IoTHADES-IoT binaryProfile HADES-IoTUserIntegrate master public key to HADES-IoTUser buys the deviceReconstruct public/private keys using seed SRun deviceGenerate seed SGenerate master public keySecurely obtains SHADES-IoT: A Practical Host-Based Anomaly Detection System for IoT Devices
Figure 6: Deployment of HADES-IoT by the user.
keys, and then it is integrated into the HADES-IoT’s source code.
After the integration of the master public key into HADES-IoT and
HADES-IoT’s deployment on a device, the owner of S (i.e., the user
or manufacturer) can send commands (i.e., messages) to the user
space application running on the device. This application just passes
the message to HADES-IoT, which verifies the authenticity of the
message, and moreover it verifies whether the ID of the message (i.e.,
the order of leaf) was not used before – for this purpose HADES-IoT
requires only storing the ID of the last valid message, which avoids
reply attacks. If the verification is successful, HADES-IoT executes
the command (e.g., adding a new entry into the whitelist, disabling
the protection, etc.).
Firmware Update. In Figure 7, we depict the proposed authen-
tication mechanism in the use case of firmware update performed
by the user. First, leaf secret key SKi and leaf public key PKi are
computed. Then, SKi is used for signing the command that disables