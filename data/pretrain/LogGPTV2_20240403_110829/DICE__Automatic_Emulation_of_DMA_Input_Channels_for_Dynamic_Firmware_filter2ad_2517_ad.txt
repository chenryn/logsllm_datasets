QEMU, which is the processor emulator used in P2IM and the
PIC32 emulator. It is worth noting that these emulators/ana-
lyzers do not provide any DMA capabilities as part of their
original design. Also, DICE does not rely on any internals
of these systems, making DICE portable to other ﬁrmware
analyzers.
Although the implementation of DICE in the two prototypes
are virtually the same, they could not be integrated under
a single implementation because these systems are based
on different and heavily modiﬁed QEMU forks. Also, each
emulator has a different set of capabilities. P2IM can run a
broader range of ﬁrmware and perform fuzz testing thanks
to its automatic modeling of processor-peripheral interfaces
and integration with AFL [45]. The PIC32 emulator can only
run a small set of ﬁrmware because it emulates a limited
number of peripherals. We consider extending P2IM to support
MIPS M4K/M-Class architecture, or port P2IM to the PIC32
emulator out of the scope of this paper.
On the PIC32 emulator, any access to non-emulated pe-
ripherals will halt
the emulator, which signiﬁcantly limits
ﬁrmware execution. To avoid halting the ﬁrmware, we created
default memory-mapped register handlers in the emulator.
These handlers do not implement any meaningful peripheral
functionalities. They treat registers as memory, i.e, they record
the value that is written to a register, and return it when
the register is read. Besides, we implemented a round-robin
strategy (inspired by P2IM design) for triggering DMA-related
interrupts and invoking the associated ISR (interrupt service
routine). This allows the ﬁrmware to read DMA buffers.
The DICE implementation on P2IM includes 1,237 lines
of C code added to QEMU. The implementation on PIC32
emulator has 1,620 lines of C code. Despite the different
target architectures (ARM and MIPS), both implementations
are fairly similar and the description below applies to both.
The heuristic to capture DMA stream conﬁgurations is im-
plemented in QEMU’s unassigned_mem_write function,
which manages MMIO operations related to the peripheral
memory area ( 1(cid:13) in Fig. 5). This function has access to traces
of the MMIO operations. These traces include information
about the operation type (read/write), value, address and data
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:26:20 UTC from IEEE Xplore.  Restrictions apply. 
1945
Fig. 5: DICE implementation (P2IM version). 1(cid:13) Identiﬁcation of DMA transfer pointers. 2(cid:13) transfer descriptor management. 3(cid:13) Transfer size and DMA
hooks.
width (8, 16 or 32 bits) of the MMIO. The transfer descriptor
manager ( 2(cid:13) in Fig. 5) is a software component that tracks
and orchestrates the life cycles of DMA input channels.
We implemented this component and data structures in the
helper_le_ld_name function. This function is deﬁned in
the softmmu template.h ﬁle and has access to traces of any
memory read in all memory areas of MCU. We modiﬁed
QEMU to invoke this function on every LOAD instruction.
This method is described as the “slow path” for memory
access, according to QEMU’s documentation [4].
The helper_le_ld_name function allows DICE to
place memory hooks on-the-ﬂy ( 3(cid:13) in Fig. 5), according to the
captured DMA input channels and accesses of ﬁrmware to the
destination address. Also, helper_le_ld_name provides
the effective data width (8, 16 and 32-bit) of the LOAD
instruction emulated by QEMU. This information is used to
adjust the span that is used to identify the buffer size.
The DICE implementation on P2IM supports fuzzing. It
reuses the underlying AFL engine and the TriForce [18]
QEMU extensions of P2IM. DICE supports ﬁles, network
sockets, and other input methods that a ﬁrmware analyzer
requires to provide input to ﬁrmware. This architecture allows
DICE to be added as a drop-in component to other ﬁrmware
analyzers and enhance it with the automatic emulation and
manipulation of DMA input channels.
VII. EVALUATION
We evaluated DICE from three different angles: 1) whether
it can accurately identify DMA input channels on ﬁrmware
that run on different architectures, MCUs and OSes; 2) how
much its runtime overhead is; 3) whether it can support fuzz-
testing on real ﬁrmware that uses DMA, and more importantly,
ﬁnd bugs that cannot be found by existing dynamic ﬁrmware
analyzers.
To verify 1) and 2), we performed unit tests and micro-
benchmarks on sample ﬁrmware in §VII-A. As for 3), we
fuzz-tested 7 real-world ﬁrmware with DICE (integrated with
P2IM) and found 5 previously unknown bugs in §VII-B. We
also discussed our insights into DMA emulation.
All experiments were conducted on a dual-core Intel Core
i5-7260U CPU @ 2.20GHz, 8 GB of RAM, and a fresh
installation of Ubuntu 18.04 LTS. We will release all the
ﬁrmware images after the paper is published.
MCU
Architecture
ARM Cortex-M4
ARM Cortex-M0
ARM Cortex-M0
ARM Cortex-M3
ARM Cortex-M4
ARM Cortex-M3
MIPS M4K
NRF52832
NRF51822
NUC123
LPC1837
MK64F
SAM3X
PIC32MX795
PIC32MZ2048 MIPS M-class
STM32F103
STM32L152
STM32F429
ARM Cortex-M3
ARM Cortex-M3
ARM Cortex-M4
DMA cntlr.
model
a
a
b
c
d
e,f
g
g
h
h
i
Vendor
Nordic
Semiconductors
Nuvoton
NXP
Microchip/
Atmel
ST
Microelectronics
TABLE III: Architectures, MCUs, DMA controller models and vendors
covered by the 83 sample ﬁrmware. Some MCUs share the same DMA
controller model. SAM3X has two different DMA controller models. For
brevity, we use the letters (a-i) to differentiate the controller models.
A. Unit Tests on Sample Firmware
We conducted this experiment to show that DICE can accu-
rately identify DMA input channels on different architectures,
MCUs and OSes (i.e., DICE is accurate, hardware-independent
and OS-agnostic). We collected a set of 83 sample ﬁrmware
from the ofﬁcial MCU SDKs and open-source repositories.
These sample ﬁrmware are developed by MCU vendors or
open-source contributors and serve as templates for ﬁrmware
developers. The sample ﬁrmware are suitable for our micro-
benchmarking because each implements a self-contained logic
and they collectively cover: 1) different architectures, ven-
dors, MCUs, and DMA controllers, 2) different OSes/system
libraries, 3) different combinations of DMA sources and
destinations.
Experiment Setup: As shown in Table III, the 83 sample
ﬁrmware cover 2 architectures, 11 different MCUs from 5
major vendors, and 9 unique DMA controller models.
The sample ﬁrmware are based on the real-time OSes
(RTOS) or system libraries chosen by the vendors (SDKs), in-
cluding BSD, Arduino, Mynewt, NuttX, Riot OS and ChibiOS
(Table IV). This set of ﬁrmware include not only those that
use all types of DMA input channels, but also those that do
not use DMA (non-DMA-enabled ﬁrmware). The non-DMA-
enabled ﬁrmware include the whole unit test suite used in [10]
and 2 ports of BSD for MCUs. Including both DMA-enabled
and non-DMA-enabled ﬁrmware allows us to comprehensively
evaluate DICE, in terms of its accuracy and compatibility.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:26:20 UTC from IEEE Xplore.  Restrictions apply. 
1946
Tranfer descriptormanagerMMIO tracesRAM access tracesTransferPointersDMA inputchannelsQEMUMCU memory mapMCURAMAFL fuzzer,ﬁles, socketsP2IM /EmulatedperipheralsCrashReportRAMHooking123Firmware
ADC PDC *
MCU
SAM3x
ARM Cortex-M0/M3/M4 DMA-Enabled Firmware
OS/SDK
Arduino
Atmel ASF
Source Code
http://nicecircuits.com/playing-with-analog-to-digital-converte
r-on-arduino-due/
https://asf.microchip.com/docs/latest/sam.drivers.spi.
spi dmac slave example.sam3x ek/html/index.html
ChibiOS
https://osdn.net/projects/chibios/downloads/70739/
ChibiOS 19.1.0.7z/
SAM3x
STM32F103
STM32F103
STM32F103
STM32F103
STM32F429
STM32L152
STM32L152
SPI DMAC Slave *
USART DMAC
ADC slider
I2C accelerometer
SPI
UART
ADC slider
SPI
UART
ADC SW DMA *
ADC Timer DMA *
I2C DMA IT
I2C DMA Adv IT
I2C TxRx DMA *
SPI Half DMA *
SPI Half DMA Init
SPI Full DMA *
USART TxRx DMA *
USART Full DMA *
UART H.Term. DMA
UART 2Boards DMA
SPI Full EX. DMA *
I2C 2Boards DMA
PDMA M-M
Serial console
SPI slave
SPI master
SPI slave
Serial DMA
PDMA USART
PDMA M-M
Firmware
P2IM unit test suite
(44 ﬁrmware images)
[10]
Firmware
PIC32MX UART
PIC32MX test
PIC32MZ UART
PIC32MZ ef curiosity
Firmware
PIC32MX RetroBSD
PIC32MZ-BSD-Lite
STM32F103
STM32CubeF1
https://www.st.com/en/embedded-software/stm32c
ubef1.html
LPC1837
NRF52832
NRF51822
NRF51822
NRF52832
NRF52832
NRF52832
NUC123
LPC Open
Mynewt
https://www.nxp.com/downloads/en/software/lpcopen 3 02 l
pcxpresso mcb1857.zip
https://mynewt.apache.org/download/
Nordic SDK
https://www.nordicsemi.com/Software-and-tools/So
ftware/nRF5-SDK/Download
OpenNuvoton
https://github.com/OpenNuvoton/NUC123BSP.git
ARM Cortex-M3/M4 Non-DMA-Enabled Firmware
Source Code
MIPS M4K/M-class DMA-Enabled Firmware
https://github.com/RiS3-Lab/p2im-unit tests
Source Code
https://microchipdeveloper.com/harmony3:
pic32mx470-getting-started-training-module
https://microchipdeveloper.com/harmony3:
pic32mzef-getting-started-training-module
OS/SDK
Arduino, Riot
OS, NuttX
OS/SDK
Microchip
Harmony v3
MCU
STM32F103
SAM3x
MK64F
MCU
PIC32MX795
PIC32MX795
PIC32MZ2048
PIC32MZ2048
MCU
PIC32MX795
PIC32MZ2048
MIPS M4K/M-class Non-DMA-Enabled Firmware
OS/SDK
RetroBSD
LiteBSD
Source Code
http://retrobsd.org/wiki/doku.php/start
https://github.com/sergev/LiteBSD/wiki
TABLE IV: Sample ﬁrmware tested in unit tests. Firmware marked with * were also used in performance tests.
All
the sample ﬁrmware include the essential routines
for running on real devices, such as OS initialization and
peripheral (including DMA controller) conﬁguration and oper-
ation. As shown in Figure 6, each ﬁrmware accesses multiple
peripherals (ranging from 4 to 18) and registers (ranging from
9 to 132). Each ﬁrmware conﬁgures up to 4 DMA streams
simultaneously.
We run each unmodiﬁed ﬁrmware binary with the DICE
prototypes supporting ARM and MIPS architectures and col-
lected debug output from QEMU for evaluating DICE’s true
positive rates and false positive rates when detecting DMA
input channels. In this experiment, we ﬁll the detected DMA
buffers (as determined by the transfer pointers and transfer
sizes) with zeros, instead of meaningful or fuzzer-generated
data. This is to make our experiment precise and reproducible.
The result shows that DICE can accurately identify DMA
input channels on different architectures, MCU models and
OSes. In other words, DICE is accurate, hardware-independent
and OS-agnostic.
True positive and false negative analysis: To establish the
ground truth, we looked up the DMA conﬁguration infor-
mation in the MCU data-sheets and veriﬁed it using the
instrumented emulators. There were 52 ﬁrmware-executed
(emulator-observed) DMA stream conﬁgurations in all
the
ﬁrmware. We use these as the ground truth for evaluating
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:26:20 UTC from IEEE Xplore.  Restrictions apply. 