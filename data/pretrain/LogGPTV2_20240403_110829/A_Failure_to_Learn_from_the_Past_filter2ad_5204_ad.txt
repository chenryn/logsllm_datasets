from a variety of witnesses established the magnitude of the
losses nationwide. Testimony about the nature of the code
and comments in the source that was recovered from his ac-
count left little doubt that he wrote the Worm to spread and
be difﬁcult to spot and detect. Thus, it was not surprising
when he was found guilty on 22 Jan1990. Morris appealed
his verdict and the Court of Appeals upheld the verdict. The
case was appealed to the Supreme Court, but they declined
to hear the appeal.
Morris was sentenced to three years of probation, 400
hours of community service, a ﬁne of $10,500, and an ad-
ditional assessment of $3276 to cover the cost of his proba-
tion. He received no time in prison. He was also suspended
from Cornell University where he had been a graduate stu-
dent. (When he applied for readmission several years later,
his request was denied.) He spent several years working as
a programmer, and then as one of the founders of an In-
ternet commerce company. Mr. Morris then entered gradu-
ate school at Harvard University. He completed his Ph.D. in
1999, and he is currently an associate professor at MIT.
Throughout the trial and the time since then, Dr. Morris
has remained silent in public about the Worm and his mo-
tives. To his credit, he has not attempted to trade on his no-
toriety for ﬁnancial gain. His dissertation and current scien-
tiﬁc research are in networking and not security. His behav-
ior has tended to support his contention at trial that his in-
tention was benign. However, his lack of public statements
mean that his complete motive remains a mystery. Conjec-
tures have ranged from an experiment gone awry to a sub-
conscious act of revenge against his father. All of this is
sheer speculation, however. All we have to work with is the
decompiled code for the program and our understanding of
its effects. It is impossible to intuit the real motive from
those or from various individuals’ experiences with the au-
thor. It is entirely possible that we will never learn the full
story; now that 15 years have passed, many of the details
and perspectives have been lost forever.
Two things have been noted by many people who have
read the decompiled code, however (this author included).
First, the Worm program contained no code that would ex-
plicitly cause damage to any system on which it ran. Con-
sidering Morris’s ability and knowledge as evidenced by
the code, it would have been a simple matter for him to
have included such commands if that was his intent. Un-
less the Worm was released prematurely, it appears that the
author’s intent did not involve explicit, immediate destruc-
tion or damage of any data or systems.
The second feature of note was that the code had no
mechanism to halt the spread of the Worm. Once started,
the Worm would propagate while also taking steps to avoid
identiﬁcation and capture. Because of this and the complex
argument string necessary to start it, individuals who have
examined the code (this author included) believe it unlikely
that the Worm was started by accident or was intended not
to propagate widely.
In light of the lack of deﬁnitive information, it was puz-
zling to note attempts by many people to defend Mr. Morris
in 1988 and 1989 by claiming that his intent was to demon-
strate something about Internet security, or that he was try-
ing a harmless experiment. It is curious that so many people,
journalists and computer professionals alike, would assume
to know the intent of the author based on the observed be-
havior of the program. As Rick Adams of the Center for
Seismic Studies (and later founder of UUnet) wryly ob-
served in a posting to the Usenet, we may someday learn
that the Worm was actually written to impress Jodie Fos-
ter — we simply do not know the real reasons.
The Provost’s report from Cornell, however, does not at-
tempt to excuse Mr. Morris’s behavior. It quite clearly la-
bels his actions as unethical and contrary to the standards
of the computer profession. It also clearly stated that his ac-
tions were against university policy and accepted practice,
and that based on his past experience he should have known
it was wrong to act as he did.
Coupled with the tendency to assume motive, we ob-
served different opinions on the punishment, if any, to mete
out to the author. One oft-expressed opinion, especially by
those individuals who believed the Worm release to be an
accident or an unfortunate experiment, was that the author
should not be punished. Some went so far as to say that
the author should be rewarded and the vendors and opera-
tors of the affected machines should be the ones punished,
this on the theory that they were sloppy about their security
and somehow invited the abuse! The other extreme school
of thought held that the author should be severely punished,
including at least a term in a Federal penitentiary.
The Cornell commission recommended some punish-
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:48:07 UTC from IEEE Xplore.  Restrictions apply. 
ment, but not punishment so severe that Mr. Morris’s fu-
ture career in computing would be jepordized. The punish-
ment meted out was consistent with that recommendation.
As was observed in both [14] and [6] there was a danger
in overreacting to that particular incident: less than 10% of
the machines on an unsecure network were affected for less
than a few days.
However, several of us argued that neither should we dis-
miss the whole Worm incident as something of little con-
sequence. That no damage was done could have been an
accident, and Morris’s true motives were never revealed.
Furthermore, many people were concerned about setting a
dangerous precedent for future occurrences of such behav-
ior. Excusing acts of computer vandalism simply because
their authors claim there was no intent to cause damage will
do little to discourage repeat offenses, and may encourage
new incidents. ( I later presented this more general point in
greater depth in [23].)
The claim that the victims of the Worm were somehow
responsible for the invasion of their machines was also cu-
rious. The individuals making that claim seemed to be stat-
ing that there was some moral or legal obligation for com-
puter users to track and install every conceivable security
ﬁx and mechanism available. This totally ignored that many
sites might run turn-key systems without source code or
administrators knowledgeable enough to modify their sys-
tems. Some of those sites might also have been running spe-
cialized software or have restricted budgets that precluded
them installing new software versions. Many commercial
and government sites operated their systems this way. To
attempt to blame these individuals for the success of the
Worm was (and is) equivalent to blaming an arson victim
for the ﬁre because she didn’t build her house of ﬁreproof
metal. (More on this theme can be found in [23].)
5.2. Worm Hunters
A signiﬁcant conclusion reached at the NCSC post-
mortem workshop was that
the reason the Worm was
stopped so quickly was due almost solely to the UNIX
“old-boy” network, and not because of any formal mecha-
nism in place at the time.[16] A general recommendation
from that workshop was that a formal crisis center be es-
tablished to deal with future incidents and to provide
a formal point of contact for individuals wishing to re-
port problems. No such center was established at that
time.
On November 29, 1988, someone exploiting a security
ﬂaw present in older versions of the FTP ﬁle transfer pro-
gram broke into a machine on the MILnet. The intruder was
traced to a machine on the ARPAnet, and to prevent further
access the MILnet/ARPAnet links were immediately sev-
ered. During the next 48 hours there was considerable con-
fusion and rumor about the disconnection, fueled in part by
the Defense Communication Agency’s attempt to explain
the disconnection as a test rather than as a security prob-
lem.
That event, coming as close as it did to the Worm in-
cident, prompted DARPA to establish the CERT (Computer
Emergency Response Team, now the CERT/CC) at the Soft-
ware Engineering Institute at Carnegie-Mellon University.
The stated purpose of the CERT was to act as a central
switchboard and coordinator for computer security emer-
gencies on ARPAnet and MILnet computers. Of interest
here is that the CERT was not chartered to deal with just any
Internet emergency. Thus, problems detected in the CSnet,
Bitnet, NSFnet, and other Internet communities of the time
were not be referable to the CERT. I was told it was the ex-
pectation of CERT personnel that those other network com-
munities would develop their own CERT-like groups.
6. Original Concluding Remarks
(The following is the verbatim conclusion from 1989.)
Not all the consequences of the Internet Worm incident are
yet known; they may never be. Most likely there will be
changes in security consciousness for at least a short while.
There may also be new laws, and new regulations from
the agencies governing access to the Internet. Vendors may
change the way they test and market their products and not
all the possible changes may be advantageous to the end-
user (e.g., removing the machine/host equivalence feature
for remote execution). Users’ interactions with their sys-
tems may change based on a heightened awareness of se-
curity risks. It is also possible that no signiﬁcant change
will occur anywhere. The ﬁnal beneﬁt or harm of the inci-
dent will only become clear with the passage of time.
It is important to note that the nature of both the In-
ternet and UNIX helped to defeat the Worm as well as
spread it. The immediacy of communication, the ability to
copy source and binary ﬁles from machine to machine, and
the widespread availability of both source and expertise al-
lowed personnel throughout the country to work together to
solve the infection, even despite the widespread disconnec-
tion of parts of the network. Although the immediate reac-
tion of some people might be to restrict communication or
promote a diversity of incompatible software options to pre-
vent a recurrence of a Worm, that would be an inappropriate
reaction. Increasing the obstacles to open communication
or decreasing the number of people with access to in-depth
information will not prevent a determined attacker it will
only decrease the pool of expertise and resources available
to ﬁght such an attack. Further, such an attitude would be
contrary to the whole purpose of having an open, research-
oriented network. The Worm was caused by a breakdown of
ethics as well as lapses in security — a purely technologi-
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:48:07 UTC from IEEE Xplore.  Restrictions apply. 
cal attempt at prevention will not address the full problem,
and may just cause new difﬁculties.
What we learn from this about securing our systems will
help determine if this is the only such incident we ever
need to analyze. This attack should also point out that we
need a better mechanism in place to coordinate information
about security ﬂaws and attacks. The response to this inci-
dent was largely ad hoc, and resulted in both duplication of
effort and a failure to disseminate valuable information to
sites that needed it. Many site administrators discovered the
problem from reading the newspaper or watching the tele-
vision. The major sources of information for many of the
sites affected seems to have been Usenet news groups and a
mailing list I put together when the Worm was ﬁrst discov-
ered. Although useful, these methods did not ensure timely,
widespread dissemination of useful information especially
since many of them depended on the Internet to work! Over
three weeks after this incident some sites were still not re-
connected to the Internet because of doubts about the secu-
rity of their systems. The Worm has shown us that we are
all affected by events in our shared environment, and we
need to develop better information methods outside the net-
work before the next crisis. The formation of the CERT may
be a step in the right direction, but a more general solution
is still needed.
Finally, this whole episode should cause us to think about
the ethics and laws concerning access to computers. Since
the technology we use has developed so quickly, it is not al-
ways simple to determine where the proper boundaries of
moral action may be. Some senior computer profession-
als may have started their careers years ago by breaking
into computer systems at their colleges and places of em-
ployment to demonstrate their expertise and knowledge of
the inner workings of the systems. However, times have
changed and mastery of computer science and computer en-
gineering now involves a great deal more than can be shown
by using intimate knowledge of the ﬂaws in a particular op-
erating system. Whether such actions were appropriate ﬁf-
teen years ago is, in some senses, unimportant. I believe it is
critical to realize that such behavior is clearly inappropriate
now. Entire businesses are now dependent, wisely or not,
on computer systems. People’s money, careers, and possi-
bly even their lives may be dependent on the undisturbed
functioning of computers. As a society, we cannot afford
the consequences of condoning or encouraging reckless or
ill-considered behavior that threatens or damages computer
systems, especially by individuals who do not understand
the consequences of their actions. As professionals, com-
puter scientists and computer engineers cannot afford to tol-
erate the romanticization of computer vandals and computer
criminals, and we must take the lead by setting proper ex-
amples. Let us hope there are no further incidents to under-
score this particular lesson.
7. Fifteen Years Later
The previous sections of the paper described the behav-
ior of the Internet Worm and some of the aftermath. It is in-
structive to look back on that episode to see how (and if)
the events in the interim have changed their signiﬁcance.
In the intervening years we have seen the consolidation of
the various regional networks into the single Internet, the
creation of the WWW, the increasing dominance of Win-
dows platforms, the introduction and explosion of Internet
commerce, and growing internationalism of computing. We
have also seen a steadily-rising level of computer vandal-
ism and crime.
7.1. Malicious Code
In the years since the Internet Worm, we have seen a
steadily increasing number of incidents of malicious soft-
ware. In 1988 new viruses were appearing at the rate of
no more than about one a month, and there was a nascent
anti-virus industry.[25] In 2003, there is a huge interna-
tional industry in anti-virus technologies, and new malware
instances are being reported to vendors at an average rate of
over 10 per day. Luckily. most of those viruses are not well-
established in the general network population and will not
go on to spread to many machines. However, anti-virus pro-
tections still need to be updated on a regular, near-daily ba-
sis as a precaution.
The 1988 worm was not a virus by any currently ac-
cepted deﬁnition. However, those deﬁnitions have remained
unclear and imprecise. The Blaster and SoBig.F codes of
late 2003 were really Trojan Horses (users needed to run
them from their mailers, and were tricked into doing so),
but were referred to in the press and online as ”viruses” or
”worms.” Some of this confusion is undoubtedly the result
of the original deﬁnitions being imprecise, and also a result
of the inexact distinction in the minds of average users as to
the boundaries of operating systems, applications, data, and
networks. That same blurring is undoubtedly responsible
for much of the success of malware authors: Unsafe macro
languages and directly executable attachments in email have
been key to many attacks.
It is notable that one particular vendor has been the plat-
form of choice for so much malware over the recent past.
Well over 95% of the reported viruses and worms are di-
rected at products by Microsoft Corporation. Some people
argue that this is because of their dominant position in the
industry, but a careful examination of the underlying tech-
nology suggests that fundamental choices of architectural
design and poor software quality have also played a major
role.
Whatever the reasons, we have seen incidents that have
involved hundreds of thousands of machines, and have
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:48:07 UTC from IEEE Xplore.  Restrictions apply. 
peaked in a matter of minutes while causing extensive
damage — some estimated in the billions of dollars. The
Sapphire/Slammer worm of early 2003 demonstrated how
quickly a worm can propagate on the Internet; given appro-
priate pre-positioning and planning, a worm that could in-
fect a majority of victim hosts in a matter of minutes is cer-
tainly possible.[26]