the SPDU. The certiﬁcate chain links the signing certiﬁcate
to a known trust anchor, which usually refers to the root cer-
tiﬁcates shared by all CV devices, so the incoming SPDU
can be trusted by the receiver. However, the CV device may
be unable to construct such a certiﬁcate chain due to not
recognizing the issuer of the signing certiﬁcate. In this case,
the received SPDU is referred to as a trigger SPDU, and the
CV device will attach P2PCD learning request ﬁeld in the
next outgoing SPDU to request peer devices to provide the
necessary certiﬁcates to complete the chain. P2PCD learning
responses, which contains requested certiﬁcates, will be sent
back through WSMP by peer devices. Note that, a P2PCD
learning response is sent as a protocol data unit (PDU) rather
than an SPDU. That is, the P2PCD learning response itself
does not carry the digital signature. The current IEEE 1609.2
does not mention the veriﬁcation for the payload of the learn-
ing response (cf. IEEE 1609.2-2016, Clause 8.2.4.1 c)). Be-
sides, the P2PCD example in IEEE 1609.2 (cf. 1609.2-2016
Clause D.4.3.6) only considers VerifyCertificate primi-
tive as an optional step before AddCertificate primitive.
2.2 Platoon Management Protocol (PMP)
CVs form a platoon with minimal following distances to
improve trafﬁc density and fuel economy. The PMP is an es-
sential component for platoon applications to control platoon
maneuvers. Typically, vehicles in a platoon exchange speed,
location, platoon ID, platoon depth by broadcasting beacon
messages periodically. The platoon leader has a depth of 0,
and it increases as we go farther. The leader acts as the co-
ordinator and controls platoon decisions such as join/merge,
split, leave, and dissolve. In this paper, We study two PMPs;
since PLEXE [56] only speciﬁes the join-at-tail maneuver
that is the same as Join/Merge maneuver in VENTOS, we
thus mainly follow the description of PMP in VENTOS [69].
Join/Merge Maneuver Two platoons, traveling in the
same lane, can initiate a merge maneuver to form a bigger
platoon. The leader of the rear platoon will send a MERGE_REQ
to the front platoon leader, if it observes that the combined
platoon size is no greater than the optimal platoon size by
USENIX Association
30th USENIX Security Symposium    3221
inspecting the beacon message from front vehicles. Upon
receiving a MERGE_ACCEPT from the front leader, the rear pla-
toon leader will speed up to reduce the front spacing. Then,
the rear leader sends CHANGE_PL to notify its followers to
change the platoon leader to the front leader. Meanwhile,
the rear leader switches to the follower role after sending a
MERGE_DONE to the front platoon leader.
Split Maneuver To break the platoon into two smaller pla-
toons, a platoon leader can either actively initiate this maneu-
ver at a speciﬁc position, or passively trigger this maneuver
when the platoon size exceeds the optimal platoon size. A
platoon leader ﬁrst sends a SPLIT_REQ to the splitting vehicle
where the split should occur. After receiving a SPLIT_ACCEPT,
the platoon leader sends a CHANGE_PL to make the splitting
vehicle a potential leader. Besides, the platoon leader needs
to inform followers behind the splitting vehicle, if any, to
change their leader to the splitting vehicle. After that, the
platoon leader sends a SPLIT_DONE to the splitting vehicle,
which then switches to the leader role.
Leave Maneuver A platoon member may initiate a leave
maneuver, when approaching the destination. For the leader
leave, the leader will send a VOTE_LEADER to all followers
to vote on the new platoon leader. The newly elected pla-
toon leader needs to send a ELECTED_LEADER to the current
leader. Then, the leader splits at the position of the elected
leader by initiating the split maneuver, and thus hands over
the leadership to the elected leader. For the follower leave, the
follower will send a LEAVE_REQ to the leader and wait for a
LEAVE_ACCEPT. The leader needs to split at both the succeed-
ing vehicle, if any, of the follower, and the follower to make it
a free agent, deﬁned as a one-vehicle platoon. At this time, the
follower can slow down. Once there exists enough space for
the follower to change the lane, it will send a GAP_CREATED
to the old leader and ﬁnally leave the platoon.
Dissolve Maneuver This maneuver is only initiated by the
platoon leader, who broadcasts a DISSOLVE to all followers.
Upon receiving all ACK messages, all platoon members act as
free agents and are free to leave.
3 Threat Model
CV communication capability. In our work, we assume that
the attacker can compromise OBUs on her own vehicles or
others’ vehicles, which follows recent works on CV secu-
rity [14, 15, 74]. This assumption is reasonable, as previous
works [13, 39] have already shown that in-vehicle systems
can be compromised physically or remotely. In this case, the
attacker can send malicious packets to other vehicles through
compromised CV devices. All malicious packets should com-
ply with protocol speciﬁcations. Notably, the attacker is al-
lowed to unicast malicious packets to a speciﬁc vehicle (cf.
IEEE 1609.3, Subclause 5.5.1).
Passive monitoring. The attacker can passively eavesdrop
and capture all network trafﬁc in her wireless communication
range under the promiscuous mode of the wireless adapters.
Cryptography operations. We assume that cryptography
operations used in CV protocols (e.g., signing, veriﬁcation,
and hash) are secure. The attacker thus cannot forge digital
signatures used for packet authentications but can use valid
certiﬁcates installed in compromised vehicles to sign outgoing
packets. However, the attacker can still (1) passively collect
valid certiﬁcates by snifﬁng the CV network trafﬁc, and (2)
construct local certiﬁcates, which are not signed by trusted
anchors.
4 Analysis Methodology
In this section, we ﬁrst present our how we construct each
component in the model, including the adversary model and
each protocol state machine. We then describe how we reduce
the state space and document how we implement CVAnalyzer.
Figure 2: CVAnalyzer overview.
ing/outgoing packets, (2) added/deleted/expired timers)
(Events:
(1)
incom-
4.1 Model Construction
As shown in Figure 2, our model, consisting of the envi-
ronment and protocol state machines (P ), is driven by net-
work and timer events. In general, the environment manages
packet/time events generated by protocol state machines. It
delivers triggered events (e.g., packet reception, timeout) to
protocol state machines.
Adversary-controlled communication environment.
We follow the design in prior works [59] and deﬁne three
sequential steps in a loop for the environment:
1. Retrieve: the environment picks one of many different
packet/time events if such an event is available.
2. Process: the protocol state machine processes an event.
3. PostProcess: after processing a given event, the proto-
col state machine either sends a new packet, adds a new
timer, cancels an existing timer, or does nothing. The
environment needs to update its internal states and keeps
track of newly added events.
Our threat model (§ 3) assumes that the attacker has communi-
cation and eavesdropping capabilities. Thus, we add one more
step for the attacker to send and receive arbitrary packets:
4. Attack: the attacker is able to monitor all packets in the
environment. If needed, she can inject arbitrary pack-
ets into the environment, which allows a protocol state
machine to process all possible packet events.
3222    30th USENIX Security Symposium
USENIX Association
Model constructionProtocol state machinesNetwork, timersEnvironmentEventsGeneralmodel checkerViolations:counterexamplesAvailability propertiesModel checkingCounterexamplesProbabilistic model checkerDomain knowledgeORResult AssessmentAttack ValidationTestbedFixing modelTo model the network, we construct the communication
channel C = {chi, j|i, j ∈ [1,n],i (cid:54)= j}, where chi, j is a FIFO
queue from Pi to P j. In this case, the packet sending and
reception are abstracted as enqueue and dequeue operations
on chi, j. Notably, we do not consider network factors for vul-
nerability discovery, such as network latency and packet loss,
because the lossy and erroneous network weakens the attack’s
capability and increases the complexity of the model. Placing
the attacker in her best position can help us uncover all po-
tential attacks. On the other hand, to model timers, we do not
keep track of the absolute time but only care about the tempo-
ral ordering of events, which is a common practice in model
checking distributed system [43]. For progress advancing, all
timers will count down simultaneously if there are no active
events that should be delivered to protocol state machines.
Protocol state machine. All protocol participants (Pi, i ∈
[1,n]) are identical; therefore, each of them can be represented
as the same ﬁnite-state machine (FSM). Then, our model M
can be deﬁned as a concurrent system M = C||i∈[1,n]Pi, in-
cluding an adversary-controlled environment C and n isomor-
phic processes Pi, where || is commutative and associative.
In our analysis, we abstract the higher-layer protocols in
the CV network stack: (1) the communication model deﬁned
in networking services and message sublayer, (2) security
services, and (3) PMP described in [5, 56, 60, 69]. We follow
their speciﬁcations or codebases to deﬁne packet and timer
handlers, which update the internal states of Pi while pro-
cessing packets and timeouts delivered by the environment.
Our model excludes the handler of certiﬁcate revocation in
security services, because it relies on an external public key
infrastructure (PKI) like SCMS [12] to revoke certiﬁcates,
which is out of the scope of the network stack itself. We will
discuss how SCMS affects identiﬁed vulnerabilities in § 8.
For the security services, we ﬁrst abstract away crypto-
graphic constructs because we assume that the cryptography
operations in CV protocols are secure. Then, we model both
packet type and packet header data, as they are required by the
internal security mechanisms. In CV network, each protocol
participant will have a batch of unique end-entity certiﬁcates
(a.k.a., signing certiﬁcates). To trigger all internal security
mechanisms, for the certiﬁcate conﬁguration, we assume that
the issuer of each batch of signing certiﬁcates is different from
each other and is attached with packets in transmission.
Probabilities. Network protocol involves many concurrent
events (e.g., packet transmission), leading to concurrent tran-
sitions in state machines. While building probabilistic models,
we develop a discrete-time Markov chain (DTMC) model that
assigns uniform probabilities to concurrent state transitions,
originating from the same state (§ 4.2).
State reduction. We now show how we abstract the model
to reduce states through a concrete example. For ease of
exposition, we rely on a simpliﬁed example (Figure 3) derived
from N4 (§ 5.1.3). Our goal is to reduce unnecessary states
to get an abstracted model. Also, we want to ensure that
the counterexample found in the abstracted model is a valid
counterexample in the original model.
Figure 3: A simpliﬁed example derived from N4 (N: the total
number of events; M: the total number of timers; TIMEOUT: the
maximum value of the timeout).
In the example, we develop a simpliﬁed protocol, in which
the model updates the timer according to the event (Line
9-13), in which the function h(x) abstracts the hash truncation
operation in P2PCD. Assuming that, without the attacker, the
range of event is [0,X − 1], where X 0thentimer[i]−1countdown13elseNone]expire14Property∆=15∀i∈TimerIndexRange:16(timer[i]=TIMEOUT);(timer[i]=0)event = M leads to the initialization of timer[0]. Thus, we
decide to keep a small set of EventRange. We ﬁrst partition
EventRange into several equivalence classes:
EventRangei = { j ∈ EventRange|h( j) = i},i ∈ [0,M − 1]
where every event in EventRangei triggers the same update
on timer[i]. For each equivalence class EventRangei, we then
pick one value, EventRangei = {i}, so that we can trigger
all updates on timer. In this case, we reduce EventRange
to [0,M − 1]. However, among this range, only events in
[X,M − 1] is triggered by the attacker, meaning that the at-
tacker itself cannot trigger all updates on timer. We thus en-
large [X,M − 1] to [X,2M − 1] so that the attacker itself can
trigger the initialization of all timers. Finally, we derive a
small (cid:92)EventRange = [0,2M − 1] and a mapping function:
f (x) =
(i ∈ [0,M − 1])
Moreover, f is a surjective function; thereby, for every ˆx in
[0,2M − 1], we can always ﬁnd at least one x in [0,N − 1]
such that ˆx = f (x). In another word, for every identiﬁed coun-
terexample in the abstracted model, we can always ﬁnd at
least one corresponding counterexample in the original model
by applying the inverse function f −1 on event.
x ∈ [0,M − 1]
x ∈ { j· M + i| j ∈ [1,(cid:100) N
(cid:26)x,
M (cid:101)− 1]}
M + i,
By combining the aforementioned two strategies together,
we can successfully reduce the state space of the example
and ensure no wrong property violations. In particular, we
reduce TimerIndexRange and EventRange to [0,X − 1] and
[0,2X − 1] respectively.
4.2 Model Checking
The goal of using the general model checker is for vulnera-
bility discovery. Given a model M and security properties,
once the model violates a property, the general MC will gen-
erate a counterexample, an execution trace leading to the
violation. Formally, a model can be deﬁned as consisting in a
ﬁnite set of states S, initial states I ⊆ S, the transition relation
T ⊆ S×S, and a labeling function from states to a ﬁnite set of
atomic propositions L : S → 2AP [17]. Table 1 summarizes the
high-level properties to analyze P2PCD and PMPs. For each
property, we ﬁrst reﬁne ϕi to get a new property ϕi(cid:48) such that