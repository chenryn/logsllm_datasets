hour since the last update. The variable is random because its
update is triggered by a write operation to the thin volume and
the time of the write operation is random. The variable rand
is a random number between 0 and 100 and it is generated by
5https://github.com/changbing1/MobiCeal
461
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:48:36 UTC from IEEE Xplore.  Restrictions apply. 
the function get random bytes(). To conduct a dummy write,
a free block is found using random allocation and then ﬁlled
with random noise. In the bitmap, the corresponding bit of this
block is set to “allocated”, so that it will not be reallocated.
Random Allocation Implementation. To implement the ran-
dom allocation, we ﬁrst obtain the number of free blocks
(denoted by x), and then we generate a random number i
between 1 and x. The ith free block is the result. A transaction
problem happens when an allocated block is allocated again
before it is committed to the bitmap. To resolve the transaction
problem, the block numbers allocated within a transaction are
recorded. When a new block is allocated, MobiCeal judges
whether this new block has been allocated in this transaction,
so an allocated block will not be allocated again.
B. Changes to the Android Volume Daemon
a
command-line
as
vdc,
utility,
(cid:8)pub pwd(cid:9)
In order to set up and use the public volume, the hidden
volume, and the dummy volumes, we modify Android volume
daemon (Vold) [6]. We implement the initialization process
and the boot process. We also implement a function for
switching to the hidden volume.
The Initialization Process. Users can active MobiCeal
using
follows:
(cid:8)num vol(cid:9)
“vdc cryptfs pde wipe
(cid:8)hid pwds(cid:9)”. MobiCeal uses LVM to initialize the public,
hidden and dummy volumes. Note that MobiCeal generates a
random key as the decoy key that is used as the encryption
key of the public volume. The decoy key is encrypted by
the decoy password and the resulting cipher-text is stored in
the encryption footer. The hidden key can be derived from
decrypting the aforementioned cipher-text using the hidden
password, without wasting additional space for storing the
encrypted hidden key.
The Boot Process. MobiCeal attempts to mount the userdata
volume when the device is booted up. If the system fails to ﬁnd
a valid Ext4 ﬁle system, it asks the user to enter a password.
When the user enters a password, the system enables the
thin volumes and then decrypt the decoy key (stored in the
encryption footer) using the password. After that, the system
creates an encrypted block device on the public volume using
the decrypted key. If a valid Ext4 ﬁle system can be mounted,
the password is correct and the system continues to boot.
Otherwise, the system asks the user to enter another password.
Switching to the Hidden Volume. In order to verify the
password and switch to the hidden mode, we implement a
switching function in Vold [7]. This function accepts a string
parameter (password) and switches to the hidden mode if
the password is the hidden password. Otherwise the function
returns “-1”. The switching function ﬁrst reads the salt and
the encrypted decoy key from the encryption footer. Then a
number k is derived using the password and the salt. A key is
also derived by decrypting the decoy key using the password.
After that, the function reads the encrypted password at the
beginning of Vk. To verify the password, the system encrypts
the password using the derived key. If the result is the same as
the previous encrypted password, the password is correct and
the system begins to switch to the hidden mode. Otherwise
the password is wrong and the function simply returns “-1”.
To switch to the hidden mode, the system ﬁrst shuts down
the Android framework to unmount “/data” partition. Then a
new encrypted block device will be created on Vk using the
hidden key. The encrypted block device will be mounted to
“/data” and the Android framework will be restarted. After the
Android framework is restarted, the hidden mode is activated,
and users can store sensitive data in the hidden volume.
C. Changes to the Android Screen Lock
We modify the default Android screen lock app as an en-
trance of the hidden mode. We add a process to verify whether
the password is the hidden password. That is, the system
checks whether the password is the screen lock password as
usual. If not, the system calls “IMountService” to pass
the password to Vold which checks whether the password is
the hidden password. If so, the system switches to the hidden
mode. Otherwise the password is wrong, the system asks the
user to enter another password.
VI. ANALYSIS AND EVALUATION
A. Security Analysis
Lemma VI.1. A hidden volume can be efﬁciently simulatable.
Proof. We build a simulator S, who is not allowed to reveal
the hidden passwords {Pl} or any knowledge of the access pat-
terns beyond its length, aims to simulate identical operations
on public volumes if an operation (e.g., Write) occurs on hid-
den volumes. Note that in the MobiCeal system, if a data block
is assigned to store data on public volumes, then a random
noise will be written into a “dummy” volume with probability
p (see below), we denote it as “dummy” Write. Speciﬁcally,
the random noise on “dummy” volumes can be interpreted as
either random strings or public key encryptions (e.g., IND-
CPA secure) indistinguishable from random. Therefore, the
freshly random strings Write on “dummy” volumes will be
indistinguishable from an actual Write on hidden volumes.
Remark. Note that adversary cannot estimate the amount of
“dummy” Write, since p is a random and untraceable value.
Therefore, the adversary cannot distinguish an actual Write on
hidden volume from a “dummy” Write on dummy volume by
statistical analysis.
Theorem VI.2. The extended MobiCeal scheme achieves
multi-snapshot security, if the hidden volumes are simulat-
able volumes.
Proof. According to the deﬁnition of multi-snapshot security
(see Deﬁnition III.1), the access patterns (O0,O1) chosen by
A will differ only on either a Read to volumes on disk
or a Write to speciﬁc volumes Vj, j ≥ l. It is easy to see
that a Read to Vi, i (cid:11)= j is indistinguishable from a Read
to Vj, while a “dummy” Write to a volume Vj, j ≥ l is
indistinguishable from an actual Write on hidden volume in
462
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:48:36 UTC from IEEE Xplore.  Restrictions apply. 
Android
A-T-P
A-T-H
MC-P
MC-H
s
/
B
K
n
i
t
u
p
h
g
u
o
r
h
T
l
a
i
t
n
e
u
q
e
S
 30000
 25000
 20000
 15000
 10000
 5000
 0
d
d-
W
rite
d
d-
R
e
a
d
B
-
W
rite
B
-
R
e
a
d
Fig. 4. Average throughput and standard deviation in KB/s (B: Bonnie++).
the sense of Lemma VI.1. Therefore, A cannot win the game
with non-negligible advantage.
According to Theorem VI.2, the extended MobiCeal scheme
achieves multi-snapshot security, and the basic MobiCeal
scheme is a special case of the extended MobiCeal scheme
when the numbers of public and hidden volume are both one.
Metadata Security Issues.
The adversary can access the metadata for all virtual vol-
umes, which keep track of blocks being assigned to each
virtual volume. However, the modiﬁcations on the metadata
caused by the hidden volume can be denied since the dummy
writes can cause the same effects. Note that the adversary
cannot decrypt the virtual volumes except the public volume,
because the dummy volumes contain only random data and the
encryption keys of the hidden volumes are protected by the
hidden passwords. As a result, the adversary cannot identify
whether any data blocks in a virtual volume are storing hidden
data or dummy data.
B. Performance Evaluation
Throughput Performance. The main differences between
MobiCeal and the default Android are that MobiCeal uses thin
volumes and that the kernel is modiﬁed. We test how these
two differences impact the performance on an LG nexus 4
phone. We measure the performance in the following settings:
1) Android: the default Android FDE, 2) A-T-P (Android-
Thin-Public): the public volume of modiﬁed Android with
thin volumes and the default kernel, 3) A-T-H (Android-Thin-
Hidden): the hidden volume of modiﬁed Android with thin
volumes and the default kernel, 4) MC-P (MobiCeal-Public):
the public volume of MobiCeal, and 5) MC-H (MobiCeal-
Hidden): the hidden volume of MobiCeal.
In our experiments, we use a popular Linux command tool,
“dd” [5], to measure the sequential throughput. We measure
the write speed using the following command, “time dd
if=/dev/zero of=test.dbf bs=400M count=1 conv=fdata-sync”.
Note that “conv=fdatasync” is necessary because it ensures the
data is written to the disk instead of a RAM buffer. To measure
the read speed, we use “time dd if=test.dbf of=/dev/null
bs=400M”. Each time this command is executed, another
command, “echo 3 > /proc/sys/vm/drop caches”, should be
TABLE I
OVERHEAD COMPARISON. THE VALUES OF DEFY ARE FROM THE FIGURE
6 IN [33]. TEST ENVIRONMENT: DEFY: UBUNTU 13.04, SINGLE
PROCESSOR, 4GB RAM, SIMULATED FLASH DEVICE; HIVE: ARCH
LINUX X86-64, I7-930, 9GB RAM, SAMSUNG 840 EVO SSD;
MOBICEAL: ANDROID 4.2.2, SNAPDRAGON APQ 8064, 2GB RAM,
NEXUS 4 INTERNAL STORAGE.
Ext4 (MB/s)
Encrypted (MB/s)
50
0.97
15.2
Overhead
93.75%
99.55%
22.05%
DEFY
HIVE
MobiCeal
800
216.04
19.5
executed to empty the cache. Otherwise, the data in the cache
may lead to wrong results.
We conduct each test 10 times and use “dd-Write” and “dd-
Read” in Figure 4 to show the average results and standard
deviations. About the write speed, the use of thin volumes
has little inﬂuence on the performance as MobiCeal reduces
the performance by about 18%. The reason of the decrement
is that we modify the kernel to implement the dummy write
and the random allocation. About the read speed, the use of
thin volumes reduces the performance by about 18% while the
modiﬁed kernel has little inﬂuence on the performance. Thin
provisioning adds a layer between ﬁle system and disk, so the
additional operations reduce the read performance.
We also use Bonnie++ [22], a benchmark suite conduct-
ing tests on hard drives and ﬁle systems, to evaluate the
performance. We repeat each experiment 10 times and show
the results in Figure 4. Note that the ﬁles created in the
Bonnie++ benchmarks must be set to twice the size of the
system RAM (2GB in our case) so as to reliably measure the
performance. The “B-Write” and “B-Read” items in Figure 4
show the results of the average throughput from Bonnie++.
The results are similar to the results in the “dd” test. In
addition, Bonnie++ also shows the CPU overhead which
indicates the power consumption difference. It shows that the
CPU overhead results are similar in all operation cases.
Overhead Comparison. Table I shows the overhead com-
parison between MobiCeal, DEFY [33] and HIVE [15], three
solutions which can defend against multi-snapshot adversaries.
We obtained the results of DEFY by interpreting the Figure
6 in [33] since the original data are unavailable in the
paper. We derived the overheads according to the experi-
mental results. Because the test environments are different,
we cannot compare the results directly. DEFY was evaluated
with IOZone [31] on an Ubuntu 13.04 with 4GB of memory
and a single processor. The tested device was a 64MB ﬂash
device with 2KB pages, which was emulated with the nand-
sim MTD device simulator [42]. HIVE was evaluated with
Bonnie++ [22] on an Arch Linux x86-64 with an Intel i7-
930 CPU and 9GB RAM. The tested device was an off-the-
shelf Samsung 840 EVO SSD. MobiCeal was evaluated with
Bonnie++ on Google Nexus 4 with Qualcomm Snapdragon
S4 Pro APQ8064 CPU and 2GB RAM. The tested device was
the internal storage of Nexus 4.
The different test environments cause the different results.
However, we can make comparison among the overheads. The
overheads of DEFY and HIVE are both higher than 90%,
463
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:48:36 UTC from IEEE Xplore.  Restrictions apply. 
INITIALIZATION TIME, BOOTING TIME, AND SWITCHING TIME.
TABLE II