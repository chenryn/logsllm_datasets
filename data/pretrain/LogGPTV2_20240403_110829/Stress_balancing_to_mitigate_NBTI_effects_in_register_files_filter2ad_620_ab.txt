over time, especially when regarding the stability during a
read operation. Abella et al. [16] discussed the importance of
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:40:27 UTC from IEEE Xplore.  Restrictions apply. 
3D histograms of SNM degradation over
time simulated using Monte Carlo sim-
ulation of process variation. The 
"Percentage" axis shows how many 
samples fall into each histogram interval 
of 0.01 V. Each simulation consists of 
1000 samples. Simulation is done 
through our technology simulator built
on top of SPICE.
e
g
a
t
n
e
c
r
e
P
25
20
15
10
5
0
A
g
e
[
y
8
7
6
5
4
3
2
1
0
e
a
r
s
]
e
g
a
t
n
e
c
r
e
P
25
20
15
10
5
0
A
g
e
[
y
8
7
6
5
4
3
2
1
0
e
a
r
s
]
(cid:1)=40%, 22 nm
25%
20%
15%
10%
 5%
 0%
0.1
0
0.4
0.2
0.3
SNM [Volt]
(c)
e
g
a
t
n
e
c
r
e
P
25
20
15
10
5
0
A
g
e
[
y
8
7
6
5
4
3
2
1
0
s
]
r
e
a
(cid:1)=50%, 22 nm
e
g
a
t
n
e
c
r
e
P
60
50
40
30
20
10
0
25%
20%
15%
10%
 5%
 0%
0.1
0
0.4
0.2
0.3
SNM [Volt]
(b)
(cid:1)=0%, 22 nm
40
35
30
25
20
15
10
5
0
e
g
a
t
n
e
c
r
e
P
25%
20%
15%
10%
 5%
 0%
0.4
0.2
0.3
SNM [Volt]
0.1
0
(d)
(cid:1)=0%, 45 nm
0.1
0
0.2
0.3
SNM [Volt]
(e)
(cid:1)=0%, 32 nm
60%
50%
40%
30%
20%
10%
0%
40%
35%
30%
25%
20%
15%
10%
5%
0%
0.1
0
0.2
0.3
SNM [Volt]
(f)
0.4
0.4
A
g
e
[
y
8
7
6
5
4
3
2
1
0
s
]
r
e
a
A
g
e
[
y
8
7
6
5
4
3
2
1
0
s
]
r
e
a
Fig. 3. NBTI-induced SNM degradation over time for different duty cycles with process variation showing also the impact of NBTI as technology scales from
45 nm to 22 nm technology node resulting in lower overall resilience
developing new techniques that overcome the NBTI effects in
new microprocessors and proposed a generic strategy to protect
different blocks in the CPU against NBTI, relying on the idle
time of processor resources. Li et al. [17] proposed a technique
to cope with the NBTI problem by exploiting the idle cycles in
order to relax the stressed PMOS transistors. However, such an
approach is speciﬁc for out-of-order architectures and cannot
work in case of in-order CPUs.
The Recovery Boosting technique [1] proposed a low-level
technique that modiﬁes the design of SRAM cells by adding an
inverter that raises the node voltages of the cell, putting both
PMOS transistors into the recovery phase. Such a circuit-level
approach requires a modiﬁcation of the hardware infrastructure
of the SRAM cell itself and has other side effects on the SRAM
characteristics since the area footprint grows etc.
The authors in [18] studied the NBTI-induced lifetime
degradation in SRAM cells and proposed the Bit Level Ro-
tation (BR) technique to address the NBTI problem in the
register ﬁles which works as follows: at each write operation,
the register is rotated using a circular shift, moving the LSB
(bit0) by one position. When the number of rotations reaches
the bit-width of the register, bit0 has used every cell in the
register to store its value. The beneﬁt of this technique is that
the stored value in each bit in the register will be repeatedly
changed, reducing the overall time that the PMOS transistors
spend in the stress phase leading to mitigate the reliability
degradation induced by NBTI. However, the effectiveness of
this technique declines when the stored value contains a large
number of sequential zeros or ones (which is often the case
as seen later in our analysis). A second scheme in that work,
called Register Rotation, uses a repetitive shift operations to
map the zero register to different registers leading to ensure
that all the register ﬁle rows are utilized to store the zero
register after a complete rotation. This, in turn, results in
distributing the NBTI stress to all the registers but can only be
implemented in CPUs that support register ﬁle mapping unit.
Additionally, the zero register is a special register which, in
practice, is often implemented as “hard-wired” SRAM cells
which are not affected by NBTI.
[19] proposes to ﬂip the whole register data, using an XOR
component, whenever a register is read, and writes the new
value back to that entry to mitigate the NBTI stress. This may
lead to an increase of the total number of write accesses in
addition to the power consumption from frequently accessing
the XOR component. Such a technique tackles the NBTI stress
in all registers using one strategy and which fails to take
the varying access patterns of different registers into account.
Work in [20] is capable of effectively mitigating the NBTI
stress but only in one half of the register ﬁle in out-of-order
CPUs. The NBTI stress evaluation is done by calculating the
averaged duty cycle between the both halves. Compared to
this work, our technique is able to balance both halves of the
register ﬁle. Moreover, not studying the distribution of NBTI
stress across all bits inside the entire register ﬁle may result
in a wrong estimation as will be clariﬁed later in Section IV.
Unlike the current NBTI mitigation techniques for register
ﬁles, where the NBTI effects are mitigated in all registers
using the same strategy, we selectively increase the register
ﬁle resiliency. Based on their classiﬁcation as frequent or
infrequent, NBTI stress in different registers is balanced using
the corresponding strategy detailed in Section V. Additionally,
we evaluate our proposed technique by not only analyzing the
averaged NBTI stress for the whole register ﬁle but also taking
the distribution into account for a more clear and accurate view.
IV. EXPLORATION OF NBTI IN REGISTER FILES
In this section, we present an NBTI stress analysis of
different registers of the register ﬁle and also of different bits
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:40:27 UTC from IEEE Xplore.  Restrictions apply. 
t
e
g
a
n
e
c
r
e
p
100%
90%
80%
70%
60%
Lower Half 
50%
40%
infrequent 
registers 
Upper Half 
Total  
Register File 
frequent 
registers 
8-bits 