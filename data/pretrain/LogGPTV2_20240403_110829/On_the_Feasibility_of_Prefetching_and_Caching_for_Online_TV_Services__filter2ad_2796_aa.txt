title:On the Feasibility of Prefetching and Caching for Online TV Services:
A Measurement Study on Hulu
author:Dilip Kumar Krishnappa and
Samamon Khemmarat and
Lixin Gao and
Michael Zink
On the Feasibility of Prefetching and Caching for Online 
TV Services: A Measurement Study on Hulu 
Dilip Kumar Krishnappa, Samamon Khemmarat, Lixin Gao, and Michael Zink 
University of Massachusetts Amherst, USA 
{krishnappa,khemmarat,lgao,zink}@ecs.umass.edu  
Abstract.  Lately  researchers  are  looking  at  ways  to  reduce  the  delay  on 
video playback through mechanisms like prefetching and caching for Video-
on-Demand (VoD) services. The usage of prefetching and caching also has 
the  potential  to  reduce  the  amount  of  network  bandwidth  usage,  as  most 
popular  requests  are  served  from  a  local  cache  rather  than  the  server 
containing the original content. In this paper, we investigate the advantages 
of having such a prefetching and caching scheme for a free hosting service of 
professionally created video (movies and TV shows) named “hulu”. We look 
into the  advantages  of  using  a  prefetching  scheme  where  the  most  popular 
videos  of  the  week,  as  provided  by  the  hulu  website,  are  prefetched  and 
compare  this  approach  with  a  conventional  LRU  caching  scheme  with 
limited  storage  space  and  a  combined  scheme  of  prefetching  and  caching. 
Results  from  our  measurement  and  analysis  shows  that  employing  a  basic 
caching scheme at the proxy yields a hit ratio of up to 77.69%, but requires 
storage  of  about  236GB.  Further  analysis  shows  that  a  prefetching  scheme 
where the top-100 popular videos of the week are downloaded to the proxy 
yields  a  hit  ratio  of  44%  with  a  storage  requirement  of  10GB.  A  LRU 
caching scheme with a storage limitation of 20GB can achieve a hit ratio of 
55% but downloads 4713 videos to achieve such high hit ratio compared to 
100 videos in prefetching scheme, whereas a scheme with both prefetching 
and caching with the same storage yields a hit ratio of 59% with download 
requirement of 4439 videos. We find that employing a scheme of prefetching 
along with caching with trade-off on the storage will yield a better hit ratio 
and bandwidth saving than individual caching or prefetching schemes. 
Keywords: Video-on-Demand services, Hulu, Cache, and Prefetching. 
1   Introduction 
The Internet has emerged as a prime medium for TV shows, radio programs, movies, 
and  the  exchange  of  videos  for  personal  as  well  as  commercial  use.  The  advent  of 
websites  such  as  Hulu  [1]  and  Netflix  [2],  which  offer  streaming  of  TV  shows  and 
movies, has made the Internet a major source for digital entertainment in the US. The 
N. Spring and G. Riley (Eds.): PAM 2011, LNCS 6579, pp. 72–80, 2011. 
© Springer-Verlag Berlin Heidelberg 2011 
On the Feasibility of Prefetching and Caching for Online TV Services 
73 
growing  use  and  popularity  of  content  streaming  among  users  is  closely  tied  to  the 
increasing  popularity  of  broadband  Internet  connection  in  homes.  The  greater 
adoption of broadband in the US has motivated television channels such as NBC and 
ABC to offer their prime-time programming to online viewers via the media content 
provider hulu. In parallel, Netflix, a DVD rental company began to take advantage of 
the  click-and-view  streaming  of  full-length  films  and  television  episodes  with  a 
subscription service.  
In the measurement study described in this paper, we focus on hulu as it is free and 
offers ad-supported streaming video of TV shows and movies from NBC, Fox, ABC, 
and many other networks and studios [3]. The advantage of hulu is that it is owned by 
these  corporations,  and  the  shows  that  air  on  their  traditional  TV  channels  are 
available for Internet users the next day for free (but not free of ads). This is popular 
in university campuses as many students would not have a TV in their dorm rooms 
and  rely  on  Internet  content  for  entertainment.  Apart  from  TV  shows,  movies  and 
video clips from other commercial sources are also hosted for free on hulu.  
Due to the high popularity of TV shows and movies hosted on hulu, many people 
watch the same content in a certain time period. Our analysis of how hulu requests are 
distributed  reveals  that  the  requested  videos  are  streamed  from  original  servers 
hosting the content even when multiple clients request the same video, which shows 
that there is no proxy employed. This redundancy in streaming the same video from a 
server which is far away leads to an unnecessary increase in the network traffic.  
In this paper, we investigate, through trace-based simulations, how prefetching and 
caching of videos requested from a campus network could reduce the consumption of 
network bandwidth by reducing multiple downloads of the same video from the origin 
server(s).  We  evaluate  three  different  schemes:  conventional  caching  scheme, 
popularity based prefetching scheme [5] and a combined scheme. The popular videos 
list  is  obtained  from  the  hulu  website,  which  is  updated  on  a  weekly  basis.  In  our 
popularity-based  prefetching  simulation,  we  download  the  top-100  videos  from  that 
list  to  our  local  cache.  Next  to  reducing  bandwidth  consumption,  prefetching  and 
caching  can  also  reduce  the  potential  of  delayed  playout,  and  pauses  during  video 
playback since videos streamed from the proxy are not prone to congestion or outages 
in the backbone network. 
We  evaluate  the  proposed  caching  and  prefetching  schemes  with  user  browsing 
pattern  data  collected  from  a  university  network.  Results  from  our  trace-driven 
simulation  show  that  a  conventional  caching  scheme  at  the  proxy  with  no  limit  on 
storage  yields a hit ratio of up to 77.69%. A prefetching scheme  where the top-100 
popular videos of the week are downloaded to the proxy yields a hit ratio of 44% with 
a  storage  requirement  of  10GB  and  download  requirement  of  100  videos.  A  LRU 
caching scheme with a storage limitation of 20GB can achieve a maximum hit ratio 
55%  %  but  downloads  4713 videos  to  achieve  such  high  hit  ratio  compared  to 100 
videos in prefetching  scheme,  whereas a  scheme  with both prefetching and caching 
with the same storage yields a hit ratio of 59% with download requirement of 4439 
videos. We find that employing a prefetching scheme along with caching with limited 
storage will yield a better hit ratio than individual caching or prefetching schemes. 
Although caching and prefetching are not new mechanisms [6, 7], we believe that, 
to the best of our knowledge, our work is the first that systematically investigates their 
effectiveness on the hulu VoD service based on trace-driven simulations. 
74 
D.K. Krishnappa et al. 
2   Methodology 
In this section, we describe our methodology to monitor the traffic between clients in our 
campus network and hulu servers. The methodology allows us to understand how a client 
receives a video stream from hulu and to obtain the hulu usage statistics in our campus 
network. Also, we explain the extraction of hulu requests from the captured trace. 
The  measurement  equipment  used  to  monitor  the  traffic  between  clients  in  our 
campus network and hulu servers is a commodity PC installed with a DAG card [4] to 
capture  packet  headers.  It  is  placed  at  the  gateway  router  of  UMass  Amherst, 
connected  via  optical  splitters  to  the  Giga-bit  access  link  connecting  the  campus 
network to a commercial ISP. The TCP and IP headers of all the packets that traverse 
these  links  are  captured  by  the  DAG  card  along  with  the  current  timestamp.  In 
addition,  we  capture  the  HTTP  headers  of  all  the  HTTP  packets  going  out  to 
www.hulu.com.  Note  that  all  the  recorded  IP  addresses  are  anonymized.  (A  more 
detailed description of the measurement setup can be found in [8].) 
For  each  outgoing  packet  through  the  gateway  router,  its  timestamp,  source  IP 
address, destination IP address and the HTTP request header are extracted from the 
captured trace files. Out of these packets, the ones containing only hulu requests are 
filtered  using  the  filtering  pattern  “/watch/”  and  the  destination  IP  address  of  hulu 
servers.  The  video  requests  that  are  unique  in  the  trace  were  filtered  using  sort  and 
eliminate  duplicates  algorithm  to  obtain  information  about  the  number  of  duplicate 
requests present in the trace. 
3   Dataset 
In this section, we present the dataset obtained by the measurement process described 
in the previous section.  
Table 1. Day-to-Day statistics of the trace 
Trace 
Day1 
Day2 
Day3 
Total 
Total Video Requests 
    3511 
    3461 
    3616 
   10588 
Unique Videos 
     1109 
     1101 
     1113 
     2363 
Percentage (%)  
 31.58 
 31.81 
 30.77 
 22.31 
3.1   Trace Details 
For our analysis we captured a three day network trace using the measurement setup 
described  in  Section  2.  The  trace  was  captured  during  fall  2010  semester  when 
students were back in full numbers. The trace captured was filtered for hulu data as 
explained in Section 2. There were 10,588 hulu video requests in a three day period 
where only 2,363 distinct videos were requested in total. Table 1 provides the day-to-
day and total statistics of the hulu trace used in our analysis. It should be noted that 
the total unique videos value of 2,363 is not the sum of the unique videos of each day 
as seen from the table. This is an artifact of subdividing the trace into single day data 
and shows that videos are repeatedly requested not only in a 24-hour time span but 
On the Feasibility of Prefetching and Caching for Online TV Services 
75 
also over several days. The table also shows that there are only 22.31% distinct video 
requests,  which  leaves  us  with  77.69%  of  the  video  requests  being  two  or  more 
requests  for  the  same  video.  This  is  an  important  result  since  this  indicates  the 
feasibility of prefetching and caching. 
To give an overview of the usage of hulu on campus, we use the trace details to show 
the  number  of  requests  for  each  unique  video  during  the  period  of  the  trace.  Figure  1 
shows the CCDF plot of the popularity graph describing the requests per video similar to 
[8]. We can see that the number of unique videos requested only once are about 48.92% 
(1,156  videos),  which  leaves  us  with  a  majority  51.08%  (1,207  videos)  requested 
multiple times, demonstrating the popularity of the content provided in hulu. 
3.2   Popular Video List Details 
In  addition  to  the  network  trace,  to  validate  our  proposed  prefetching  approach,  we 
obtain  the  list  of  most  popular  videos  watched  by  viewers  for  a  particular  week 
preceding the capture of the traces. The hulu website provides a list of videos which 
are  ranked  in  the  order of  their  popularity  for  a  particular  day,  week  or  month.  We 
chose the weekly popularity list since many TV shows are updated on a weekly basis 
rather than daily or monthly basis. Our experiment shows that change in popularity of 
videos over a week is minimal. Thus, popularity list on a weekly basis serves best for 
prefetching. We use ‘wget’ to obtain the HTML page that contains popular videos list 
from the hulu website. We then parse the obtained HTML page to extract the URLs of 
the popular videos. These data are later used to simulate the prefetching of the videos 
from the hulu server to our local storage. 
4   Simulation and Results 
In this section, we present a simulation methodology for the evaluation of our proposed 
approaches.  Through  trace-driven  simulations,  we  compare  the  performance  of  the 
cache-only  and  prefetch-only  schemes.  We  also  evaluate  the  performance  of  an 
approach that combines both caching and prefetching. Also, the impact of storage size 
on the performance of our proposed schemes and the overall bandwidth consumption is 
evaluated. 
Fig. 1. CCDF popularity plot of the hulu trace 
76 
D.K. Krishnappa et al. 
4.1   Evaluation Metrics 
We  simulate  the  proposed  prefetching  and  caching  schemes  from  real  user  request 
patterns by issuing video requests based on the network trace presented in Section 3.1. 
Prefetching  is  simulated  by  maintaining  a  prefetching  storage  which  keeps  track  of 