# On the Feasibility of Prefetching and Caching for Online TV Services: A Measurement Study on Hulu

**Authors:**
- Dilip Kumar Krishnappa
- Samamon Khemmarat
- Lixin Gao
- Michael Zink

**Affiliation:**
University of Massachusetts Amherst, USA

**Emails:**
- krishnappa@ecs.umass.edu
- khemmarat@ecs.umass.edu
- lgao@ecs.umass.edu
- zink@ecs.umass.edu

## Abstract
Recently, researchers have been exploring ways to reduce video playback delay in Video-on-Demand (VoD) services through mechanisms such as prefetching and caching. These techniques also have the potential to decrease network bandwidth usage by serving popular requests from a local cache rather than the original content server. This paper investigates the benefits of implementing prefetching and caching schemes for a free, professionally created video hosting service called "Hulu." We examine the advantages of a prefetching scheme that downloads the most popular videos of the week, as provided by the Hulu website, and compare it with a conventional Least Recently Used (LRU) caching scheme and a combined prefetching and caching approach.

Our measurements and analysis show that a basic caching scheme at the proxy can achieve a hit ratio of up to 77.69%, but requires approximately 236GB of storage. A prefetching scheme that downloads the top-100 popular videos of the week achieves a hit ratio of 44% with a storage requirement of 10GB. An LRU caching scheme with a 20GB storage limit can achieve a hit ratio of 55%, but requires downloading 4,713 videos compared to 100 in the prefetching scheme. A combined prefetching and caching scheme with the same storage limit yields a hit ratio of 59% and requires downloading 4,439 videos. Our findings suggest that a combined prefetching and caching scheme with limited storage provides better hit ratios and bandwidth savings compared to individual caching or prefetching schemes.

**Keywords:** Video-on-Demand services, Hulu, Cache, Prefetching

## 1. Introduction
The Internet has become a primary medium for streaming TV shows, radio programs, movies, and other video content for both personal and commercial use. Websites like Hulu and Netflix, which offer streaming of TV shows and movies, have made the Internet a major source of digital entertainment in the US. The growing popularity of content streaming is closely linked to the increasing adoption of broadband internet connections in homes. This trend has motivated television channels such as NBC and ABC to offer their prime-time programming online via Hulu. Additionally, Netflix, originally a DVD rental company, has expanded to provide click-and-view streaming of full-length films and TV episodes through a subscription service.

In this study, we focus on Hulu, which offers free, ad-supported streaming of TV shows and movies from networks like NBC, Fox, ABC, and others. Hulu's advantage is that it is owned by these corporations, and the shows that air on their traditional TV channels are available for free (with ads) the next day. This is particularly popular on university campuses where many students rely on internet content for entertainment. Apart from TV shows, Hulu also hosts movies and video clips from various commercial sources.

Due to the high popularity of TV shows and movies on Hulu, many users watch the same content within a certain period. Our analysis reveals that requested videos are streamed directly from the original servers, even when multiple clients request the same video, indicating the absence of a proxy. This redundancy increases network traffic unnecessarily.

In this paper, we investigate, through trace-based simulations, how prefetching and caching of videos requested from a campus network can reduce network bandwidth consumption by minimizing multiple downloads of the same video from the origin server(s). We evaluate three different schemes: a conventional caching scheme, a popularity-based prefetching scheme, and a combined scheme. The list of popular videos is obtained from the Hulu website, which is updated weekly. In our prefetching simulation, we download the top-100 videos from this list to our local cache. Prefetching and caching can also reduce the potential for delayed playout and pauses during video playback, as videos streamed from the proxy are less prone to congestion or outages in the backbone network.

We evaluate the proposed caching and prefetching schemes using user browsing pattern data collected from a university network. Our trace-driven simulation results show that a conventional caching scheme at the proxy with unlimited storage can achieve a hit ratio of up to 77.69%. A prefetching scheme that downloads the top-100 popular videos of the week achieves a hit ratio of 44% with a storage requirement of 10GB and a download requirement of 100 videos. An LRU caching scheme with a 20GB storage limit can achieve a hit ratio of 55% but requires downloading 4,713 videos, while a combined prefetching and caching scheme with the same storage limit yields a hit ratio of 59% and requires downloading 4,439 videos. We find that a combined prefetching and caching scheme with limited storage provides better hit ratios and bandwidth savings than individual caching or prefetching schemes. Although caching and prefetching are not new, to the best of our knowledge, our work is the first to systematically investigate their effectiveness on the Hulu VoD service using trace-driven simulations.

## 2. Methodology
In this section, we describe our methodology for monitoring the traffic between clients in our campus network and Hulu servers. This methodology helps us understand how a client receives a video stream from Hulu and obtain Hulu usage statistics in our campus network. We also explain the extraction of Hulu requests from the captured trace.

### 2.1 Measurement Equipment
We used a commodity PC installed with a DAG card [4] to capture packet headers. The PC was placed at the gateway router of UMass Amherst, connected via optical splitters to the Giga-bit access link connecting the campus network to a commercial ISP. The DAG card captures the TCP and IP headers of all packets traversing these links, along with the current timestamp. Additionally, we captured the HTTP headers of all HTTP packets going out to www.hulu.com. All recorded IP addresses were anonymized. (A more detailed description of the measurement setup can be found in [8].)

### 2.2 Data Extraction
For each outgoing packet through the gateway router, we extracted the timestamp, source IP address, destination IP address, and the HTTP request header from the captured trace files. We filtered the packets containing only Hulu requests using the pattern “/watch/” and the destination IP address of Hulu servers. Unique video requests in the trace were filtered using a sort and eliminate duplicates algorithm to obtain information about the number of duplicate requests.

## 3. Dataset
In this section, we present the dataset obtained from the measurement process described in the previous section.

### 3.1 Trace Details
We captured a three-day network trace during the fall 2010 semester when students were back in full numbers. The trace was filtered for Hulu data as explained in Section 2. There were 10,588 Hulu video requests in the three-day period, with only 2,363 distinct videos requested in total. Table 1 provides the day-to-day and total statistics of the Hulu trace used in our analysis. It should be noted that the total unique videos value of 2,363 is not the sum of the unique videos of each day, indicating that videos are repeatedly requested over several days. The table also shows that only 22.31% of the video requests are distinct, leaving 77.69% of the video requests being two or more requests for the same video. This result highlights the feasibility of prefetching and caching.

| **Trace** | **Day 1** | **Day 2** | **Day 3** | **Total** |
|-----------|-----------|-----------|-----------|-----------|
| Total Video Requests | 3,511 | 3,461 | 3,616 | 10,588 |
| Unique Videos | 1,109 | 1,101 | 1,113 | 2,363 |
| Percentage (%) | 31.58 | 31.81 | 30.77 | 22.31 |

To provide an overview of Hulu usage on campus, we use the trace details to show the number of requests for each unique video during the trace period. Figure 1 shows the Complementary Cumulative Distribution Function (CCDF) plot of the popularity graph, describing the requests per video. The number of unique videos requested only once is about 48.92% (1,156 videos), while 51.08% (1,207 videos) were requested multiple times, demonstrating the popularity of the content provided by Hulu.

### 3.2 Popular Video List Details
In addition to the network trace, we obtained the list of the most popular videos watched by viewers for the week preceding the trace capture. The Hulu website provides a list of videos ranked by popularity for a particular day, week, or month. We chose the weekly popularity list because many TV shows are updated weekly. Our experiment shows that the change in video popularity over a week is minimal, making the weekly list suitable for prefetching. We used 'wget' to obtain the HTML page containing the popular videos list from the Hulu website and parsed the HTML to extract the URLs of the popular videos. These data were later used to simulate the prefetching of videos from the Hulu server to our local storage.

## 4. Simulation and Results
In this section, we present a simulation methodology for evaluating our proposed approaches. Through trace-driven simulations, we compare the performance of cache-only and prefetch-only schemes and evaluate a combined caching and prefetching approach. We also assess the impact of storage size on the performance of our proposed schemes and overall bandwidth consumption.

### 4.1 Evaluation Metrics
We simulate the proposed prefetching and caching schemes based on real user request patterns from the network trace presented in Section 3.1. Prefetching is simulated by maintaining a prefetching storage that keeps track of the top-100 popular videos of the week. The evaluation metrics include hit ratio, storage requirements, and the number of video downloads required to achieve the hit ratio.

**Results:**
- **Conventional Caching Scheme:**
  - Hit Ratio: Up to 77.69%
  - Storage Requirement: ~236GB

- **Prefetching Scheme:**
  - Hit Ratio: 44%
  - Storage Requirement: 10GB
  - Download Requirement: 100 videos

- **LRU Caching Scheme (20GB Storage Limit):**
  - Hit Ratio: 55%
  - Download Requirement: 4,713 videos

- **Combined Prefetching and Caching Scheme (20GB Storage Limit):**
  - Hit Ratio: 59%
  - Download Requirement: 4,439 videos

Our findings indicate that a combined prefetching and caching scheme with limited storage provides better hit ratios and bandwidth savings compared to individual caching or prefetching schemes.

**Figure 1: CCDF Popularity Plot of the Hulu Trace**

![CCDF Popularity Plot](path_to_image.png)

---

This revised version aims to enhance the clarity, coherence, and professionalism of the original text.