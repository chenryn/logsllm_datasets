title:Pointing in the Right Direction - Securing Memory Accesses in a Faulty
World
author:Robert Schilling and
Mario Werner and
Pascal Nasahl and
Stefan Mangard
Pointing in the Right Direction - Securing Memory Accesses in a
Faulty World
Robert Schilling
Graz University of Technology
Know-Center GmbH
PI:EMAIL
8
1
0
2
p
e
S
4
2
]
R
C
.
s
c
[
1
v
1
1
8
8
0
.
9
0
8
1
:
v
i
X
r
a
Pascal Nasahl
Graz University of Technology
PI:EMAIL
ABSTRACT
Reading and writing memory are, besides computation, the most
common operations a processor performs. The correctness of these
operations is therefore essential for the proper execution of any
program. However, as soon as fault attacks are considered, assuming
that the hardware performs its memory operations as instructed is
not valid anymore. In particular, attackers may induce faults with
the goal of reading or writing incorrectly addressed memory, which
can have various critical safety and security implications.
In this work, we present a solution to this problem and propose
a new method for protecting every memory access inside a pro-
gram against address tampering. The countermeasure comprises
two building blocks. First, every pointer inside the program is re-
dundantly encoded using a multi-residue error detection code. The
redundancy information is stored in the unused upper bits of the
pointer with zero overhead in terms of storage. Second, load and
store instructions are extended to link data with the corresponding
encoded address from the pointer. Wrong memory accesses subse-
quently infect the data value allowing the software to detect the
error.
For evaluation purposes, we implemented our countermeasure
into a RISC-V processor, tested it on a FPGA development board,
and evaluated the induced overhead. Furthermore, a LLVM-based
C compiler has been modified to automatically encode all data
pointers, to perform encoded pointer arithmetic, and to emit the
extended load/store instructions with linking support. Our evalua-
tions show that the countermeasure induces an average overhead of
10 % in terms of code size and 7 % regarding runtime, which makes
it suitable for practical adoption.
CCS CONCEPTS
• Security and privacy → Tamper-proof and tamper-resistant
designs; Embedded systems security;
KEYWORDS
fault attacks, countermeasure, memory access, pointer protection
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
© 2018 Copyright held by the owner/author(s). Publication rights licensed to ACM.
This is the author’s version of the work. It is posted here for your personal use. Not
for redistribution. The definitive Version of Record was published in 2018 Annual
Computer Security Applications Conference (ACSAC ’18), December 3–7, 2018, San Juan,
PR, USA, https://doi.org/10.1145/3274694.3274728.
Mario Werner
Graz University of Technology
PI:EMAIL
Stefan Mangard
Graz University of Technology
PI:EMAIL
1 INTRODUCTION
A memory access is a highly critical operation. Many decisions
inside a program rely on the correct execution of a memory access.
Password checks, signature verification, or grants to a privileged
function they all rely on the genuine execution of a memory access.
Under normal operating conditions, a memory access reads/writes
from/to the desired location and random malfunctions, e.g., caused
by cosmic radiation [4], are comparably rare. However, the situa-
tion changes dramatically as soon as intentionally induced faults,
via so-called fault attacks, are considered. Here, the attacker modi-
fies the state of a computing device by, e.g., inducing glitches on
the voltage supply or the clock signal [2] or by shooting with a
laser on the chip [30]. Such a fault attack is capable of skipping
instructions [6], redirecting the memory access [9], or flipping bits
in registers or memory leading to a critical attack vector [11]. While
this type of attack requires local access to the device to induce a
fault, more advanced attacks can even induce faults remotely. For
example, the Rowhammer effect [16], which modifies the state of
the memory by frequently accessing neighboring memory cells,
can also be induced in software via Javascript [12] or remotely over
a network interface [18, 31].
While a fault may not directly reveal sensitive information, differ-
ent techniques have been developed to exploit faulty computation.
For example, it has been shown that it is possible to deduce the
secret key in various cryptographic algorithms [1, 5] solely by
analyzing the faulty computation output. Subsequently, a lot of
research has been performed to protect specific cryptographic al-
gorithms against fault attacks [3, 27]. However, the hardening of
general purpose software against fault attacks is a young research
area.
Two complementary subareas exist. The first subarea deals with
the protection of the executed code. The respective techniques [8,
29, 35] typically enforce control-flow integrity (CFI), which is also a
well-known mitigation strategy against software attacks, with fine
granularity. The resulting countermeasures ensure that executed
instructions and branches are genuine and that they are processed
in the correct sequence without omission.
The second subarea mainly deals with the protection of data.
There, well-known redundancy-based techniques like arithmetic
codes [7, 19, 26, 28] are utilized. In these schemes, the data is en-
coded into a redundant domain, where faults are detectable up to a
certain number of bit flips. Interestingly, while such schemes were
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
Robert Schilling, Mario Werner, Pascal Nasahl, and Stefan Mangard
initially developed to protect the data while it is stored in the mem-
ory, arithmetic codes also support to perform certain arithmetic
operations on the encoded value.
However, even when mechanisms of the two subareas are com-
bined, i.e., a system implements a CFI protection mechanism and
redundantly encodes the data, memory transfers from the proces-
sor via the memory subsystem are still vulnerable to fault attacks.
Namely, when a fault modifies the address on one of the buses dur-
ing the read or write operation, the data is read or written from/to
the wrong memory location, which is not trivially detectable given
that the data is unmodified. Similar effects can be triggered by in-
jecting faults into pointers, which are typically not prevented by
these schemes.
Unfortunately, current extensions to data encoding, which aim
to solve this issue, are very costly and impose severe restrictions
on the protected code. ANB-codes [28], for example, introduce a
tremendous runtime overhead of 90 % on average on top of already
expensive AN-codes, solely to solve the memory access problem.
Furthermore, they can only protect a limited set of variables with
well-known memory alignment and size. More efficient and less re-
strictive approaches are needed to protect memory accesses against
address tampering.
Contribution
In this work, we address the issue of unprotected memory accesses
in the context of fault attacks. We propose a practical solution to
detect address tampering in pointers and on memory buses. Our
generic approach works independently of the used code and data
protection schemes and therefore can effectively be combined with
state-of-the-art techniques in the context of hardening general
purpose computing against fault attacks.
In detail, the contributions of this paper are as follows. First,
we present a new approach to protect pointers against faults with
negligible overhead in terms of runtime and storage requirements.
We encode pointers using a multi-residue arithmetic code, which
allows us to detect faults on encoded pointers during both storage
and computation. The redundancy information of the code word is
hereby stored in the unused upper bits of a pointer to fully utilize
the available register space and yield zero-overhead for storing an
encoded pointer. Furthermore, by transforming the pointer arith-
metic into the encoded multi-residue domain, the protection of the
pointer is maintained also when performing arithmetic operations
on the pointer; e.g., when adding an offset to the stack pointer.
Second, we propose an efficient way to protect memory accesses
from tampering by linking the stored data in memory with the
address of the access. We establish this link whenever data is writ-
ten to the memory and remove the link as soon as the data is read
back into the processor. When considering fault attacks, counter-
measures like data encoding are already necessarily employed. By
linking the redundant address information with the encoded data,
faults during addressing manifest as errors in the redundantly en-
coded data, where they can be detected. As the result, data integrity
checks implicitly also checks for address tampering and make ex-
plicit addressing error checks unnecessary.
Finally, to evaluate the concept, we integrated our protection
mechanism into an FPGA hardware implementation of an open-
source RISC-V processor. Furthermore, to avoid tedious manual
encoding of all pointers and addresses inside the program, we inte-
grated this concept directly into a LLVM-based C compiler, which
is capable of automatically protecting complex codebases without
manual interference. The resulting prototype induces 10 % code
size and less than 7 % runtime overhead on average.
Outline
The remainder of this paper is structured as follows. Section 2 dis-
cusses the threat model and the attack vector, gives an introduction
to arithmetic codes, and discusses related work. In Section 3, we de-
scribe how we protect pointers against fault attacks. The approach
to link the pointer protection with data encoding is presented in Sec-
tion 4. Section 5 details how we extend the RISC-V instruction set to
support encoded pointers and discusses our compiler modifications.
Finally, Section 6 evaluates the overhead and Section 7 concludes
this work.
2 STATE OF THE ART AND BACKGROUND
In this section, we first describe the attack vector and the threat
model we consider. Furthermore, we present state-of-the-art meth-
ods of error detection codes, which we use to protect a memory
access against tampering efficiently. We also show related concepts,
which aim to secure pointers or a memory access in general.
2.1 Threat Model and Attack Vector
For this work, we assume a powerful attacker, which performs fault
attacks in order to compromise a system. Faults can be induced
into instructions and data at various places like, for example, in
registers, during computation in the ALU, on buses, and in memory.
Many of these attack vectors can be covered by existing and estab-
lished countermeasures, which we assume to be in place. Namely,
CFI-based fault countermeasures [8, 29, 35], which enforce the au-
thenticity of instructions as well as their execution sequence, can
be used to protect code against faults. Furthermore, such a CFI
scheme already protects function pointers, which do not require
further protection. Data, on the other hand, can be protected dur-
ing computation and storage using data encoding techniques like,
for example, arithmetic codes [7, 19, 26, 28]. However, as soon as
data is transferred via a memory bus these codes are insufficient.
Namely, while the value itself is protected via the code, the cor-
responding address information remains vulnerable. Furthermore,
pointers as such, typically, also remain unprotected by the data
encoding schemes considering that eventually the plain value of
the pointer is used to address the memory.
To illustrate the problem, Figure 1 visualizes a simple memory
access. On the left side there is the pointer used for a memory
access, on the right side there is the memory, and the arrow in
between denotes the memory access. The data in the memory is
redundantly encoded denoted by the c-subscript of the variables.
Originally, the pointer p points to the address 0x1001 to readout the
value falsec from the memory. However, a fault can manipulate the
memory access to readout a wrong value. In particular, there are
two error sources, which can lead to a wrong memory access. First,
Pointing in the Right Direction - Securing Memory Accesses in a Faulty World
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
Figure 1: Attack vector: Modified pointers and manipulated
memory accesses.
the attacker can modify the pointer as shown in the middle example
in Figure 1. If a pointer gets modified, then all subsequent memory
accesses lead to a wrong location. An attacker could, e.g., modify
two pointers used for a signature comparison to point to the same
location, which always bypasses the memory comparison. This can
occur anywhere in the program, also during pointer arithmetic.
The second source of a manipulated memory access is the memory
operation itself. When assuming the pointer is correct and not
manipulated, the memory access can still be manipulated. A fault
on the address bus can redirect the memory access to a wrong
location as indicated in the third example.
Both of these attack vectors can lead to a wrong memory access.
Today, there is no efficient way to protect them leaving frequently
used memory operations completely unprotected against fault at-
tacks.
2.2 Error Detection Codes
Error detection codes [23] are a well-known and well-studied con-
cept to detect errors during storage or transmission. However, dif-
ferent types of code have been developed, which also support the
computation on encoded data. Logical operations, for example, can
directly be computed in the encoded domain when binary linear
codes [13] are used. Arithmetic codes, on the other hand, can be
used when primarily arithmetic operations have to be performed
on encoded data.
2.2.1 AN(B)-Codes. AN-codes [7, 10] are an example for such an
arithmetic code and are defined by multiplying the functional value
x with the encoding constant A: xc = x · A. Therefore, all code
words are multiples of the encoding constant A and every value in
between corresponds to an invalid code word. To check if a code
word is valid, a modulo operation with the encoding constant is
performed, which must yield zero. Decoding is done by using an
integer division with the encoding constant. Because of multiply-
ing the functional value with the encoding constant, it cannot be
separated from the redundancy part, thus the name non-separable
code. The encoding constant A defines the error detection capabil-
ities. Finding a good encoding constant is not easy and currently
only possible via exhaustive search [21]. Research already found
suitable encoding constants, which maximize the error detection
capabilities, so-called Super A [14]. To maintain the error detection
capabilities, the functional value needs to be less than the encoding