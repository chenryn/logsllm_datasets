which mainly stress JavaScript operations, VTPin imposes an over-
head of 4.1% and 1.2%, respectively. The rest of the benchmarks
incur less overhead, practically less than 1%. Similar overheads
are reported for Chromium, as well. We also observed our default
garbage collection strategy to yield a very low impact on our bench-
marks. Even for Firefox/Peacekeeper, which reported the highest
number of garbage collection sweeps (i.e.,, 3), we observed a GC-
455Application
Calls Unhandled
null
483.xalanc
447.dealII
444.namd
450.soplex/1
450.soplex/2
453.povray
462.libquantum
473.astar
Firefox/SunSpider
Firefox/Kraken
Firefox/Peacekeeper
Firefox/Octane
Chromium/SunSpider
Chromium/Kraken
Chromium/Peacekeeper
Chromium/Octane
126,929,346
12,173,483
2,944
2,816
191,361
2,569,867
2063
1116981
2,102,173
1,708,089
33,478,893
2,328,826
473,217
340,390
467,963
270,036
1,594
1,594
1,594
1,594
1,594
1,594
178
181
1,747
1,600
178
178
16
15
15
15
81,211
857,082
28
6
12
151,060
0
0
226,331
157,846
15,820,851
607,237
30,603
25,222
37,848
24,731
Non-virtual
(invalid vfPtr)
126,780,487
11,313,200
1,322
1,213
189,751
2,415,154
0
0
1,562,756
1,329,169
14,614,465
1,591,611
437,928
310,511
425,051
238,534
Non-virtual
(RTTI failed)
78
11
0
0
0
1,990
0
0
7,613
7,673
119,131
7,082
3,804
3,535
4,208
4,759
Virtual
(all)
65,898
1,596
0
3
4
69
0
0
303,726
211,507
2,924,268
122,718
867
1,107
841
1,997
Virtual
(multi. inheritance)
27.481 (41.70%)
1263 (71.90%)
0
0
0
0
0
0
8,462 (2.78%)
5,939 (2.80%)
17,752 (0.60%)
4,353 (3.54%)
308 (35.5%)
468 (42.2%)
358 (42.5%)
828 (41.4%)
Table 2: Distribution of free calls for the C++ benchmarks of the SPEC CPU2006 suite, as well as for Mozilla Firefox and
Chromium.
Benchmark
Firefox
SunSpider
Octane
Peacekeeper
Kraken
SPEC CPU2006
483.xalanc
447.dealII
450.soplex/1
450.soplex/2
453.povray
Max memory VTPin/norealloc (%) VTPin/realloc (%)
131,309 KB
321,166 KB
624,546 KB
1,240,534 KB
38,616 KB (29.4%)
16,740 KB (5.21%)
102,400 KB (16.4%)
28,674 KB (2.31%)
3,462 KB (2.63%)
1,549 KB (0.48%)
21,632 KB (3.46%)
2,559 KB (0.20%)
373,889 KB
107,035 KB
16,231 KB
15,758 KB
3,278 KB
102,400 KB (27.4%)
372 KB (0.34%)
496 B (0.00%)
608 B (0.00%)
12 KB (0.36%)
68,350 KB (18.2%)
272 KB (0.25%)
24 B (0.00%)
32 B (0.00%)
552 B (0.01%)
Table 3: Memory footprint of virtual objects for Firefox (when running several benchmarks) and SPEC CPU2006 (only benchmarks
that contain virtual objects are included). Max memory refers to the maximum cumulative allocation size observed during the
execution of each benchmark. The VTPin/norealloc column (default on Firefox) depicts the amount of memory used by VTPin in
absence of adequate realloc support from the underlying allocator (e.g.,, via a slab allocator). The VTPin/realloc column (default
on SPEC) lists the amount of memory used by VTPin when adequate realloc support is available (e.g., via the glibc allocator).
Note that VTPin’s default conﬁguration bounds memory leakage to 100 MB.
induced overhead impact of only +1.7%. Our results on Firefox
and Chromium suggest that VTPin can secure real-world software
with negligible (less than 5%) overhead.