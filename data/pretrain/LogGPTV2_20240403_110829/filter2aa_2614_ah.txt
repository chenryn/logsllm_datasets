口。默认情况下，Yarn开放8088和8089端口，无用户鉴别和授权机
制，任意用户均可以访问。攻击者就是利用Hadoop Yarn资源管理系统
REST 
API未授权漏洞对服务器进行攻击，在未授权的情况下，远程执
行文件下载脚本，从而再进一步启动挖矿程序达到集群化挖矿的目的。
Hadoop集群被挖矿病毒攻击的过程如图3-8所示。
●图3-8 Hadoop集群被挖矿病毒攻击示意图
3.4.2 Hadoop管理API漏洞利用过程
攻击者首先通过Hadoop Yarn的Cluster Applications API中申请的新
application接口生成新的application对象，如下所示：
返回内容类似于：
接着，通过Submit 
Application的POST方法，提交生成带命令行的
脚本，再调用Hadoop Yarn REST API执行脚本，其接口执行命令行原理
如图3-9所示。
●图3-9 Hadoop Yarn REST API调用命令行样例
而脚本内容为下载挖矿病毒的程序，伪码如下：
执行脚本下载挖矿程序到指定目录下，再通过下载配置文件以
nohup方式给挖矿程序添加执行权限和运行时环境设置。最后，将脚本
以crontab任务的方式运行。
当然，除了上述的这些基本的入侵操作外，报告中对病毒还做了其
他的分析。但这里通过对new application和submit application两个API的
调用分析，基本理清了攻击者入侵的过程和引起问题的原因。
3.4.3 Hadoop管理API漏洞启示
继续利用思维导图，来对攻击过程做一下回顾，如图3-10所示。
●图3-10 Hadoop Yarn资源管理API攻击过程
在整个攻击过程中，攻击者对Yarn管理API的利用是突破的关键
点，它完成了两项重要任务。
■ 创建新的application，并上传脚本文件。
■ 下载挖矿病毒程序脚本，并在集群内以定时任务方式运行。
这些两点是挖矿病毒在集群中赖以生存下来的根本。
从攻击者的角度看，它仅仅是利用了Hadoop Yarn公开的API接口构
造了独特的攻击手段，从而达成攻击目的。而防御者自身对Hadoop
Yarn REST API接口安全意识不足，没有禁止将接口开放在公网或启用
Kerberos认证功能、禁止匿名访问是导致此漏洞发生的原因。
如果把视野再扩大一点就会发现，其实不但Hadoop Yarn有此类问
题，Spark和Solr也存在类似的问题。在笔者亲身经历的一个Solr案例
中，恶意攻击者将Solr中的数据清洗一空，给某电商企业造成了很大的
损失。无论是安全从业者还是业务技术负责人，都应该吸取这样的教
训，在使用开源类组件时，关注默认配置项的安全设置是否合理，以防
患于未然。
3.5 Apache SkyWalking管理插件GraphQL API漏洞
作为一项新兴的技术，GraphQL在很多互联网应用中开始被使用，
Apache SkyWalking也对外部提供了GraphQL API的接口，本节将要介绍
的漏洞就与GraphQL API技术相关。
3.5.1 GraphQL API漏洞基本信息
自从2015年GraphQL被Facebook推出以来，在互联网应用中得到了
广泛的使用。随着GraphQL使用范围的扩大，新技术带来的安全问题也
逐渐增多。近日，NVD发布的CVE编号为CVE-2020-9483的漏洞就与
GraphQL相关，下面带读者一起来看看这个漏洞的详情。
漏洞类型：API5-失效的功能级授权。
漏洞难度：高。
报告日期：2020-07-10。
信息来源：https://nvd.nist.gov/vuln/detail/CVE-2020-9483。
Apache 
SkyWalking是一款开源、功能强大的应用性能监控系统，
尤其是针对微服务、云原生和面向容器的分布式系统的性能监控。它通
过直观和友好的用户操作界面为用户提供包括指标监控、分布式追踪、
分布式系统性能诊断等功能，受到国内很多互联网公司的欢迎，比如华
为、阿里巴巴、腾讯微众银行等。在其63.0.0～6.6.0、7.0.0版本中，如
果使用H2/MySQL/TiDB作为数据存储，通过GraphQL协议查询元数据
时，存在一个SQL注入漏洞，允许攻击者访问未授权的数据。其利用过
程如图3-11所示。
●图3-11 CVE-2020-9483漏洞利用示意图
3.5.2 GraphQL API漏洞利用过程
GraphQL协议导致的SQL注入漏洞，在原理上与普通的Web安全中
的SQL注入漏洞并无本质的差别。这点，从GitHub上对应的issue下的
pull request修改的代码内容可以看出，如图3-12所示。
●图3-12 GitHub源码库修复CVE-2020-9483漏洞的代码片段
在提交的新代码中（如图33-12中方框标注部分），作者将SQL字
符串拼接方式的代码改为预编译方式的SQL语句，这是修复SQL注入的
普遍解决思路。GraphQL协议导致的SQL注入漏洞与传统Web安全中所
说的SQL注入漏洞的不同在于请求时的应用协议为GraphQL。在
SkyWalking的基础配置中，有对GraphQL请求接入点的配置项，如图33-
13所示。
●图3-13 Apache SkyWalking配置文件中关于GraphQL的配置代码段
当Apache 
SkyWalking运行时，可以通过此访问入口/graphql进行
GraphQL请求和响应。可以通过构造一个非恶意的请求参数，验证请求
链路的正确性，响应结果如图3-14所示。
●图3-14 Apache SkyWalking GraphQL请求样例
在Apache SkyWalking公开的源码库中，有对GraphQL请求参数定义
的相关schema配置文件。其访问地址为
https://github.com/apache/skywalking-query-protocol，其中包含了当前版
本中使用GraphQL协议查询的详细定义文件，如图3-15所示。
●图3-15 Apache SkyWalking GraphQL查询协议定义
熟悉GraphQL协议的攻击者，在请求的JSON对象中构造普通SQL注
入请求参数，访问GraphQL查询路径/graphql，即可达到SQL注入的目
的。
3.5.3 GraphQL API漏洞启示
继续利用思维导图，来对漏洞利用过程做一下回顾，如图3-16所
示。
●图3-16 CVE-2020-9483漏洞利用关键步骤
作为一项新的API技术，GraphQL正在迅速地普及。因其具有内置
查询语言的特性，使得请求的参数都包含在JSON数据结构中，对传统
的安全测试人员和网络安全防护产品来说，如果不熟悉其协议或无法检
测JSON数据结构中的攻击载荷，都将是一个大的安全挑战。本案例
中，攻击者将Apache SkyWalking默认端口和默认请求路径/graphql作为
攻击入口，是漏洞被利用成功的第一个关键因素。如果修改默认端口和
默认请求路径，将提高发现注入点的难度。研发人员在编写代码时，使
用SQL字符串拼接的方式组装SQL查询语句，是漏洞能被利用成功的根
本原因。如果不使用字符串拼接的方式，调整为预编译方式来执行SQL
语句，将可以避免SQL注入漏洞的产生。
当前的这个案例中，漏洞利用所需要的技术除了GraphQL协议外，
并无其他新颖的攻击手法，漏洞利用过程也不复杂。作为技术人员，在
使用一项新技术时，除了要评估新技术给业务带来的价值以外，也应考
虑新技术的使用成本和风险，充分了解新技术的优缺点，扬长避短，发
挥新技术优势的同时也要规避因使用新技术带来的不必要的风险。
3.6 小结
本章通过上述5个案例，从OAuth协议、委托授权、API 
KEY等方
面，介绍了API技术中常见的安全漏洞及其原因。这些漏洞案例，仅仅
是API安全问题中很小的一部分。API发展到今天，API安全也并非新生
事物，它已然积患已久，亟待整治。从NVD到各大互联网厂商的安全应
急响应中心以及漏洞赏金平台，都有它频频闪现的身影，这也着实提醒
每一个安全从业者，需加强对它的重视。就像人类健康的治理一样，应
大力倡导安全的生产方式和行为习惯，逐步从“以治病为中心”转变
到“以预防为中心”。
第4章 API安全工具集
工欲善其事，必先利其器。在API的生命周期管理中，研发人员或
安全人员通常使用各种工具，比如API文档管理工具、API测试验证工
具、API自动化扫描工具等。使用这些工具或软件，能快速地提高工作
效率，同时也为API产品的生产质量提供规范的过程保证。本章主要介
绍API安全相关的工具。
4.1 工具分类
通常来说，当IT从业人员谈论工具时，是站在工程或项目的视角去
界定工具的。在PMBOOK理论中，工具包含系统、平台、软件，也包
含表单、模板、指导规范，在这里API安全工具的界定范围也是如此。
笔者根据工具使用方式或效果的不同，将工具划分为两类：赋能型工具
和操作型工具。
1.赋能型工具
赋能型工具本身不提升效能，它强调的是基础知识和体系，能让读
者系统地了解相关知识的来龙去脉，掌握其技术细节。基于其内容的相
关性，将它为以下两类。
■ 规范指南类：主要是指各类官方文档、操作指南、checklist等，
典型的如OpenAPI官方文档、微软Azure WEB API设计规范、GraphQL
规范、OWASP API安全文档等。
■ 
知识学习类：主要是指培训材料、学习平台、演示环境等，典
型的如各个API开放平台公开的培训材料、DEMO源码程序、Inon
Shkedy在GitHub公开的API安全小贴士、GraphQL漏洞练习程序
vulnerable-graphql-api等。
2.操作型工具
与赋能型工具不同，操作型工具更符合软件研发人员对传统工具的
定义和认知，一如人类在石器时期学会使用石刀、石斧来征服自然，
API从业人员使用此类工具来改进工作环境，更有利于开发出包含API
功能的相关产品。依据其功能的不同，笔者将此类工具作如下划分。
■ 辅助类工具：主要是指各类规范的符合度，比如OpenAPI规范检
测工具、安全编码规范检测工具、API格式转换工具等。
■ 
手工类工具：主要是指用来辅助人工测试的工具，比如常见的
SoapUI、Postman、Burp Suite均属于此类。
■ 自动化工具：此类工具主要提供自动化扫描功能，在这里重点是
指安全漏洞扫描，比如用于代码安全的Fortify、用于API漏洞扫描的
Astra。
■ 综合类工具：此类工具以平台系统为主，对线上运维的API进行
多种监控和管理，比如API生命周期的管理、API入侵检测的监控等。
4.2 典型工具介绍
在众多与API安全相关的工具中，有一些工具被广泛使用或在某个
方面有着独特的优势，在这里为读者挑选几款做重点介绍。
4.2.1 API安全小贴士
API安全小贴士是一份公开在GitHub上的纯英文文档型工具，内容
非常适合API安全入门者参考，将它作为API安全入门案例来分析，是
希望读者能快速掌握API安全诸多技术细节。
工具名称：31-days-of-API-Security-Tips。
工具网址：https://github.com/smodnix/31-days-of-API-Security-
Tips。
工具简介：文档以Inon 