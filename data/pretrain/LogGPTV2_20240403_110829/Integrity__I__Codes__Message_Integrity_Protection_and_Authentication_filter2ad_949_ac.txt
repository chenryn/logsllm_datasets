form the original codeword c into a different codeword ˆc of
the same length. Since c is an I-code codeword, the adver-
sary would have to ﬂip at least one bit “1” of c into a bit
“0”. However, by assumption he cannot accomplish this.
We now prove that the adversary cannot achieve that the
111000 emerges in any (other) part of the sequence (2) and
that at the same time any resulting codeword ˆc is valid. For
this, let us consider all possible 6-bit substrings (of consec-
utive bits) in the sequence (2). These can be captured by
one of the eleven cases given below:
1. 1 11000c1 c2 . . . ck−1ck111000
2. 11 1000c1c2 c3 . . . ck−1ck111000
3. 111 000c1c2c3 c4 . . . ck−1ck111000
4. 1110 00c1c2c3c4 c5 . . . ck−1ck111000
5. 11100 0c1c2c3c4c5 c6 . . . ck−1ck111000
6. 111000 . . . ci−4 ci−3ci−2ci−1cici+1ci+2 . . . 111000
7. 111000c1c2 . . . ck−5 ck−4ck−3ck−2ck−1ck1 11000
8. 111000c1c2 . . . ck−4 ck−3ck−2ck−1ck11 1000
9. 111000c1c2 . . . ck−3 ck−2ck−1ck111 000
10. 111000c1c2 . . . ck−2 ck−1ck1110 00
11. 111000c1c2 . . . ck−1 ck11100 0
Case 2 – Case 5. The strings (1000c1c2), (000c1c2c3),
(00c1c2c3c4) and (0c1c2c3c4c5) cannot be transformed into
the string 111000 without ﬂipping at least one bit “1”, since
c1 ⊕ c2 = 1 and c3 ⊕ c4 = 1 (by the complementary encod-
ing).
Case 6. We showed at the beginning of the proof that the
string 111000 satisﬁes the condition one in Deﬁnition 2. So
no string (ci−3ci−2ci−1cici+1ci+2), i ∈ [4, 5, . . . , k − 2],
can be transformed into the string 111000 without ﬂipping
at least one bit “1”.
Case 7 – Case 11. The strings (ck−4ck−3ck−2ck−1ck1),
(ck−3ck−2ck−1ck11),
(ck−1ck1110)
and (ck11100) cannot be converted into the string 111000
without ﬁlliping at least one bit “1”, since they all contain
at least one bit “1” among the last three digits.
(ck−2ck−1ck111),
Case 1. The string (11000c1) can be transformed into the
string 111000 by ﬂipping the third bit to “1”, conditioned
on c1 = 0. In this case, the bit c2 = 1 becomes the ﬁrst bit
of the new codeword ˆc (not necessarily valid). From Case 2
to Case 11 above we know that the ending of the codeword
ˆc must be denoted either by the original delimiter 111000
or by the delimiter obtained by joining the ﬁrst bit “1” of
the original delimiter to the new codeword ˆc. In the ﬁrst
case, the length of the resulting codeword ˆc is k − 1 (an odd
number) and so ˆc cannot be a valid codeword. In the second
case, one bit “1” is added to the sequence that already has a
deﬁcit of bits “0” (i.e., the bit c1 = 0 is not a part of ˆc) and
so the resulting codeword ˆc cannot be not valid.
We conclude the proof by observing that the string
111000 is the shortest string (i.e., 6 bits long) that satisﬁes
all the conditions in Deﬁnition 2.
Remark 1 It is interesting to observe that for the comple-
mentary encoding rule and the delimiter 111000, the ﬁrst
two conditions from Deﬁnition 2 imply the third one (they
are sufﬁcient). If this holds in general (for any I-code and
an i-delimiter) is an interesting open problem.
Referring back to the example (1), the sender can pre-
serve the integrity of message 11010 (i.e., the codeword
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:52:17 UTC from IEEE Xplore.  Restrictions apply. 
c = 1010011001) by simply emitting (using the on-off key-
ing) the following repetitive sequence
(cid:5)(cid:6)
c
(cid:7)
(cid:6) (cid:7)(cid:4) (cid:5)
1010011001111000
i-delimiter
1010011001111000
i-delimiter
. . .
(cid:4)
(cid:5)(cid:6)
c
(cid:7)
(cid:4)
(cid:6) (cid:7)(cid:4) (cid:5)
(cid:6) (cid:7)(cid:4) (cid:5)
. . . 111000
i-delimiter
The receiver decodes a codeword received between any two
consecutive i-delimiters (after having veriﬁed that the peer
sender is active). According to Theorem 2, any successfully
demodulated codeword between two i-delimiters must have
been emitted by the peer sender (the codeword is authen-
tic). At this stage, the peer sender can stop transmitting
the above repeated sequence. The important implication of
the synchronization based on i-delimiters is that the receiver
does not have to know in advance the length of the message
to be transmitted by the sender.
In the following sections, we report on our experience
with the real-life implementation of I-codes and we intro-
duce the novel concept of authentication through presence.
4
Implementation and Results
We implemented I-codes on Mica2 sensor networking
platform [1]. This platform consists of a processor and a
CC1000 radio. CC1000 is a single-chip RF transceiver, has
a programmable frequency (300-1000 MHz) and uses FSK
modulation spectrum shaping. It has programmable output
power, (-20 to 10 dBm) and a high receiver sensitivity (-110
dBm).
In our I-code implementation, each original message m
is ﬁrst I-coded such that each “1” is transformed into a
“10” and “0” into a “01”. An I-coded message is then
transmitted such that each “1” is transmitted as a packet
containing a random payload of length k (the payload is
chosen randomly for each packet) and each “0” is transmit-
ted as an absence of signal of duration Ts = 10 ms). Each
packet consists of a preamble and of a payload. The pream-
ble is 12 bytes long and with the payload makes a total of
18 bytes per packet.
The decoding process at the receiver is implemented as
follows. A “silence period” on the channel of the duration
of 10 ms is interpreted as a “0”, whereas the presence of a
packet is interpreted as “1”. Here, the “silence on the chan-
nel” is deﬁned as a period during which the received signal
strength on the receiver remains below a preset RSSI level.
If the signal level remains above the preset RSSI level, but
the received information cannot be interpreted as a packet,
the signal is interpreted as “1”.
We experimented with this implementation of I-codes,
by sending 8 to 512 bits long messages (pre-coded mes-
sages from 16 to 1024 bits). To transmit an (cid:2)-bit long mes-
sage using I-codes, due to the complementary encoding,
t
ρ
o
i
t
a
r
s
s
e
c
c
u
s
n
o
i
t
i
m
s
n
a
r
T
1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0
100
200
300
400
500
600
Message size [bits]
Figure 3. Robustness of I-codes. The ﬁgure
shows the message transmission success ratio ρt as
a function of the size of transmitted messages. The
results are obtained through measurements on Mica2
sensor motes.
we actually transmit (cid:2) “0”s (10 ms of the absence of sig-
nal) and (cid:2) random packets (each 18 bytes long). We mea-
sured the message transmission success ρt as a ratio be-
tween the number of correctly transmitted messages and the
total number of attempts. Here, we consider that a message
is correctly transmitted if the message originating from the
sender is the same one received by the receiver. For each
different message size, we perform 20 experiments as fol-
lows. We ﬁrst generate 100 random messages of the given
size. Next, we transmit these 100 messages and count the
number of messages that have been successfully received.
From this we calculate the success ratio ρt. Finally, we av-
erage the results obtained from 20 experiments and present
them with 95% conﬁdence interval.
The results of our measurements are shown in Figure 3.
Quite expectedly, from Figure 3 we can observe that the
transmission success ratio decreases quickly as the message
size increases. These results further show that I-codes are
best suited for reasonably short messages. For longer mes-
sages, we would need to transmit them multiple times in or-
der for one of the messages to be transmitted correctly. For
this purpose, we relay on the i-delimiters introduced in Sec-
tion 3.4. From our measurement results we further observed
that no messages were altered on the channel such that they
appear to the receiver as correct I-coded messages, but they
are different from the messages sent by the sender. More-
over, with our implementation, no bit “1” sent by the trans-
mitter was interpreted as a bit “0” on the receiver’s side.
This is important as it shows that the integrity of the mes-
sages transmitted with I-codes is preserved in our imple-
mentation.
From these measurements we conclude that I-codes pro-
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:52:17 UTC from IEEE Xplore.  Restrictions apply. 
original message
m
m
one-way
function ( )h
h m(
)
I-coding
c
on-off keying
channel C
I
(dedicated for
2
-coded
channel C
1
(insecure high
messages ensuring integrity
bandwidth channel)
protection)
Figure 4. Usage of I-codes for integrity pro-
tection. Original message is transmitted over an in-
secure high-bandwidth channel C1, whereas the in-
tegrity protection is enabled with I-codes on a differ-
ent channel C2.
vide sufﬁcient robustness for the transfer of short messages
(e.g., public keys, public parameters, message digests, etc).
For example, a 160 bit message (a typical size of the mes-
sage digest) has a 70% chance of being transmitted cor-
rectly, meaning that transmitting it correctly with a 0.999
probability takes approximately 6 successive transmissions;
on average it will take 1/0.7 ≈ 2 retransmissions. These
numbers can, however, vary depending on the channel con-
ditions (the level of interference on the channel can be also
estimated by the sender and taken into account in estimating
the number of transmissions).
With the Mica2 communication speed of 19.2 Kbps,
each packet (representing a “1”) is transmitted in 7.5 ms.
This means that each bit of the original message gets trans-
mitted in 17.5 ms (single “0” and a single “1”) which means
that the communication speed of transmitting the original
message with I-codes is 57 bps. Although I-codes reduce
the speed of communication, this speed is sufﬁcient to en-
able the integrity-preserving transmission of a message di-
gest (the size of which typically is 160 bits), which then
guarantees the integrity-preserving transmission of the en-
tire message.
5 Authentication through presence
Using I-codes, we develop a novel concept called au-
thentication through presence, which enables (broadcast)
message authentication based solely on the awareness of the
presence in the power range of an entity. We ﬁrst introduce
this concept and then we describe its use in two application
A → B (on C1) : m
A → B (on C2) :
(cid:6) (cid:7)(cid:4) (cid:5)
. . . 111000
(cid:2)
I-code
(cid:3)
h(m)
(cid:6) (cid:7)(cid:4) (cid:5)
111000
. . .
i-delimiter
i-delimiter
B : Verify the integrity and the authenticity
of h(m) using I-codes.
Verify the integrity and the authenticity
of m using h(m).
Figure 5. Authentication through presence.
An example of the protocol that enables authentica-
tion through presence property; h(·) represents a one-
way function.
scenarios: broadcast authentication and key establishment.
We describe our concept thorough and example involv-
ing two parties: the sender A and the receiver B. Note that
the sender and the receiver do not share any authentication
material. The main idea of our approach is shown in Fig-
ure 4. The message m, whose integrity needs to be pro-
tected, is sent over a channel C1 which does not protect its
integrity and over which its authenticity cannot be veriﬁed.
This channel can be realized as any communication chan-
nel. The message digest h(m) (e.g., the message hash) is
sent over a separate communication channel C2, dedicated
for integrity protection (we have shown through our imple-
mentation in Section 4 that this dedicated channel can be
realized using existing communication channels). Thus, if
A wants to send a message to B, she will use the protocol
shown in Figure 5.
In this protocol, h(·) represents a one-way function
the integrity of the transmitted mes-
used to protect
(cid:2)
sage. This function can be implemented as a simple
hash. I-code
represents the I-coded message di-
gest h(m). The sequences preceding and following after
I-code
are i-delimiters (Section 3.4), which ensure
that the receiver knows the beginning and the end of the