viewer applications verified if the first entry of the /Byterange
equals zero. This makes it impossible to move the first hashed part
to an arbitrary position because of a > 0 and leads to a warning.
For this reason, we used the trick to concatenate both hashed parts
to a single unit. By this means, the value of a could remain zero.
Surprisingly, no viewer verified whether b > 0, but even in such
a case, we can apply SWA. A lightly different Variant 2∗ can be
created by using the fact that the beginning of every PDF file starts
with \%PDF- followed by the specified interpreter version, e.g., 1.7.
Therefore, a byte range from byte offsets a=0, . . . , b=5 can always
be used. A comparison of all SWA variants is depicted in Figure 10.
5 EVALUATION
In this section, we present the results of our evaluation. We applied
various manipulations based on the three presented attack classes
to a validly signed test document. Afterward, we conducted black-
box security tests to evaluate whether native applications or online
validation services in the scope of this paper can be successfully
attacked using our attack classes.
5.1 Applications
In the first phase of our evaluation, we searched for desktop applica-
tions validating digitally signed PDF files. We analyzed the security
of their signature validation process against our three attack classes.
The 22 applications listed in Table 1 fulfill these requirements. We
evaluated the latest versions2 of the applications on all supported
platforms (Windows, MacOS, and Linux).
Results. During our evaluation, we identified vulnerabilities in 21
of the 22 evaluated applications. These vulnerabilities allow us to
bypass the document integrity protection provided by the signature
completely and to manipulate the displayed content of signed PDF
files. There was only one application which could not successfully
be attacked: the last Linux version of Adobe Reader (9.5.5) which
was released in 2013. All other applications could be successfully
attacked using at least one attack vector. The SWA class turned
out to be the most successful. It led to successful attacks on 17
applications, while ISA could be used to successfully attack half of
the evaluated applications and USF succeeded for four applications.
In the following section, we present interesting results as an
example for each attack class. The complete results are depicted in
Table 1.
Universal Signature Forgery. USF attacks were successful against
four applications. However, two of these applications are Adobe
Acrobat Reader DC and Adobe Reader XI. Surprisingly, these two ap-
plications are not vulnerable to any attack we evaluated except the
USF attack. To bypass the protection of the applied digital signature
in Adobe Acrobat Reader DC and Adobe Reader XI an attacker only
needs to remove the /ByteRange entry of the signature object which
specifies the part of the document protected by the signature, or re-
place its value with null.3 Afterwards, he can arbitrarily change the
displayed content of the document. Nevertheless, both applications
showed a blue banner stating that the document is “Signed and all
signatures are valid”. The applications also informed the user in the
signature panel that the document “has not been modified since
the signature was applied” although the manipulated content was
displayed.
Incremental Saving Attack. By using the ISA class, it was possi-
ble to attack 11 of the 22 evaluated applications successfully. For
example, PDF Studio Viewer 2018 and Perfect PDF 10 Premium inform
the user that the document has been changed after the application
of the signature when a regular incremental saving is applied to a
signed document. However, it is sufficient to delete the Xref table
and trailer of the incremental saving and add the keyword startxref
as a comment at the end of the file to create a successful attack for
these applications. When the manipulated document is opened, the
applications display the exchanged content but still inform the user
that the applied signature is valid and the document has not been
changed since it was applied.
We found two even easier bypasses of the document integrity
protection for LibreOffice. Both bypasses are based on Variant 1 of
the ISA class, whose structure is very similar to regular incremental
saving. The manipulated files both contain body updates, a new
Xref table, and a new trailer but differ in the contents of the Xref
2Which were available at the beginning of our evaluation.
3According to the PDF reference v1.7, a dictionary entry whose value is null should
be treated similar to a non present entry [21, p. 63].
Signed PDFHeadera…/Contents /ByteRange [a b c d]...Xref TableTrailerbcdVariant: 1Headera…/Contents /ByteRange [a b c* d]>> endobjXref TableTrailerbc*d Malicious BodyXref TableTrailer (optional)/ByteRange [a b c d]...Variant: 2Header…/Contents /ByteRange [0 0 c* d*]>> endobjXref TableTrailerc*d*Header…/Contents/ByteRange [a b c* d]>> endobj Malicious BodyXref TableTrailerProtected by the signatureContent ManipulationVariant: 2*  Header…/Contents /ByteRange [0 5 c* d*]>> endobjXref TableTrailerc*d*Header…/Contents/ByteRange [a b c* d]>> endobj Malicious BodyXref TableTrailer%PDF-1.4ba%PDF-Session 1A: Attack ICCS ’19, November 11–15, 2019, London, United Kingdom8PDF Viewer
Version
OS
USF
Adobe Acrobat Reader DC
2018.011
Adobe Reader 9
Adobe Reader XI
eXpert PDF 12 Ultimate
Expert PDF Reader
Foxit Reader
LibreOffice (Draw)
Master PDF Editor
Nitro Pro
Nitro Reader
Nuance Power PDF Standard
PDF Architect 6
PDF Editor 6 Pro
9.5.5
11.0.10
12.0.20
9.0.180
9.1.0; 9.2.0
6.0.6.2;
6.0.3.2,
6.1.0.3
5.1.12/24
11.0.3.173
5.5.9.2
3.0.0.17
6.0.37
6.4.2; 6.6.2
PDFelement 6 Pro
6.7.1; 6.8.0
PDF Studio Viewer 2018
2018.0.1
PDF Studio Pro
PDF-XChange Editor
PDF-XChange Viewer
Perfect PDF 10 Premium
Perfect PDF Reader
Soda PDF Desktop
Soda PDF
Total Successful
Attacks
12.0.7
7.0.326
2.5
10.0.0.1
13.0.3
10.2.09
9.3.17
Win10,
MacOS
Linux
Win10,
MacOS
Win10
Win10
Win10,
Linux,
MacOS
Win10,
Linux,
MacOS
Linux,
Win10,
MacOS
Win10
Win10
Win10
Win10
Win10,
MacOS
Win10,
MacOS
Win10,
Linux,
MacOS
Win10,
Linux,
MacOS
Win10
Win10
Win10
Win10
Win10
Win10
(cid:32)
✓
(cid:32)
✓
✓
✓
✓
✓
✓
✓
✓
✓
(cid:72)(cid:35)
(cid:72)(cid:35)
✓
✓
✓
✓
✓
✓
✓
✓
4/22
PDF Signature
ISA
✓
SWA
✓
✓
✓
✓
✓
(cid:32)
(cid:72)(cid:35)
(cid:32)
(cid:72)(cid:35)
(cid:72)(cid:35)
(cid:32)
✓
(cid:32)
(cid:32)
✓
✓
(cid:32)
(cid:32)
(cid:32)
✓
✓
(cid:32)
(cid:32)
✓
(cid:32)
(cid:32)
(cid:32)
Comments
Error when a visible signature is clicked, for
invisible signatures this is not a problem
Error when a visible signature is clicked, for
invisible signatures this is not a problem
No signature verification on Linux and MacOS
available (latest version 2.4.1)
Detects ISA when certificate is trusted
Attack only on Linux and Windows success-
ful. On MacOS the original, not manipulated
signature was already invalid.
Detects ISA when certificate is trusted
Detects ISA when certificate is trusted
USF successful on UI-Layer 1;
ISA and SWA only on Windows successful. On
MacOS the original, not manipulated signature
was already invalid.
USF successful on UI-Layer 1;
ISA and SWA only on Windows successful. On
MacOS the original, not manipulated signature
was already invalid
(cid:32)
(cid:32)
✓
✓
(cid:32)
(cid:32)
✓
✓
11/22
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
Summary Signature Vulnerabilities: 21/22
17/22
✓: Secure/Attack fails;
Table 1: Evaluation results of 22 PDF Viewer showing critical vulnerabilities in 21 of them.
(cid:32): Insecure/Attack successful;
(cid:72)(cid:35): Limited attack success
table. In contrast to regular incremental saving, the Xref table of
the first bypass is empty and only consists of the keyword xref. We
presume that LibreOffice assumes that the incremental saving does
not add new objects due to the empty Xref table. The second bypass
uses an Xref table which does not only contain entries for the body
updates, as would be the case for regular incremental saving, but
also entries for all objects added to the file when the signature was
applied. LibreOffice seems to assume that the signature is part of
this manipulated incremental saving, and therefore informs the
user that the document was not modified after the signature was
applied.
Signature Wrapping Attack. Attacks based on the SWA attack
class were the most successful against the viewer applications. All
but five applications are vulnerable to attacks of this class. It was
even possible to attack 14 applications with a single manipulated
document successfully. This document was created by adding new
objects manipulating the displayed content of the document, a new
Xref table, and a new trailer in between the two signed byte ranges.
Two things are essential for the attack to work: (1) The Xref table
contains entries for all added objects, and objects present in the
second signed byte range. (2) The last trailer of the file, as well as
the newly added one, must reference the correct byte offset of the
new Xref table. The second signature wrapping approach – moving
the signed data to the end of the file – led to another interesting,
however not successful, result. When the different test files, which
were created for this signature wrapping approach and led not to
Session 1A: Attack ICCS ’19, November 11–15, 2019, London, United Kingdom9successful attacks, are opened in eXpert PDF 12 Ultimate, PDF Ar-
chitect 6, Soda PDF Desktop or Soda PDF the application’s signature
panel states that “some modifications have been made in the docu-
ment”. Some of these test files are called “Revision 1” and some are
called “Revision 2” in the signature panel. The application’s behav-
ior when the “View Signed Version” option in the signature panel is
selected differs for these two revisions. For all files called Revision
1, the option opens a new tab showing the original file’s content
(“Hello World!” for our test files). However, for all files called Revi-
sion 2, the opened tab also displays the manipulated content (“Hello
Attacker!”), and the signature panel now states that “after adding
the signature, the document has not been modified”. This implies
to the user that the opened document has been altered after the
signature was applied; nevertheless, the content displayed in the
new tab after clicking on “View Signed Version” is the original file
content. These attacks are not classified as successful because the
attacker model specifies that both UI-layers must not state that the
document was modified after the application of the signature when
the manipulated document is opened.
5.2 Online Validation Services
In the second phase of our evaluation, we focused on online vali-
dation services. These services are used to verify the integrity and
validity of signed PDF documents. Thus, validating the signature of