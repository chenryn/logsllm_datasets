t = TOAST table,   
v = view,   
m = materialized view,   
c = composite type,   
f = foreign table,   
p = partitioned table,   
I = partitioned index  
```  
```  
db1=> select distinct on (relkind) relkind,relname from pg_class;  
 relkind |         relname           
---------+-------------------------  
 f       | pglog  -- 函数  
 i       | pg_extension_name_index  -- 索引  
 r       | pg_ts_dict -- 表  
 t       | pg_toast_2618 -- toast切片表  
 v       | pg_matviews -- 视图  
(5 rows)  
```  
#### 66 查看数据类型  
数据类型:   
https://www.postgresql.org/docs/14/datatype.html  
类型转换  
```  
db1=# \c db1 r1  
You are now connected to database "db1" as user "r1".  
db1=> select cast('abc' as int);  
ERROR:  invalid input syntax for type integer: "abc"  
LINE 1: select cast('abc' as int);  
                    ^  
db1=> select cast('123' as int);  
 int4   
------  
  123  
(1 row)  
db1=> select cast('123.345' as numeric);  
 numeric   
---------  
 123.345  
(1 row)  
db1=> select cast('123.345' as text);  
  text     
---------  
 123.345  
(1 row)  
```  
```  
db1=> select '123.345'::int;  
ERROR:  invalid input syntax for type integer: "123.345"  
LINE 1: select '123.345'::int;  
               ^  
db1=> select '123.345'::numeric;  
 numeric   
---------  
 123.345  
(1 row)  
```  
https://www.postgresql.org/docs/14/typeconv.html  
支持的索引类型: [《PostgreSQL 9种索引的原理和应用场景》](../201706/20170627_01.md)    
```  
btree  
hash  
gin  
gist  
sp-gist  
brin  
bloom  
扩展索引  
hnsw  
...  
```  
https://www.postgresql.org/docs/14/indexes.html  
隐含列  
- ctid, 物理行号  
- xmin, 被插入时的事务号  
- xmax, 被删除时的事务号  
- cmin, 事务中第几条命令产生的记录   
- cmax, 事务中第几条命令产生的记录   
```  
db1=> create table t_hid (id int);  
CREATE TABLE  
db1=> insert into t_hid values (1);  
INSERT 0 1  
db1=> begin;  
BEGIN  
db1=*> insert into t_hid values (2);  
INSERT 0 1  
db1=*> insert into t_hid values (3);  
INSERT 0 1  
db1=*> insert into t_hid values (4);  
INSERT 0 1  
db1=*> end;  
COMMIT  
db1=> insert into t_hid values (5),(6),(7);  
INSERT 0 3  
db1=> select ctid,xmin,xmax,cmin,cmax,* from t_hid;  
 ctid  | xmin | xmax | cmin | cmax | id   
-------+------+------+------+------+----  
 (0,1) |  975 |    0 |    0 |    0 |  1  
 (0,2) |  976 |    0 |    0 |    0 |  2  
 (0,3) |  976 |    0 |    1 |    1 |  3  
 (0,4) |  976 |    0 |    2 |    2 |  4  
 (0,5) |  977 |    0 |    0 |    0 |  5  
 (0,6) |  977 |    0 |    0 |    0 |  6  
 (0,7) |  977 |    0 |    0 |    0 |  7  
(7 rows)  
```  
#### 67 查看数据类型支持的函数和操作符   
类型支持的函数和操作符:  
https://www.postgresql.org/docs/14/functions.html  
触发器  
- [《USE hstore store table's trace record》](../201206/20120625_01.md)    
创建需要被跟踪的测试表    
```    
drop table test;  
CREATE TABLE test (id int primary key, info text, crt_time timestamp(0));    
```    
创建hstore extension;    
```    
CREATE EXTENSION hstore;    
```    
创建通用的存储跟踪记录的记录表    
```    
CREATE TABLE table_change_rec (    
  id serial8 primary key,    
  relid oid,    
  table_schema text,    
  table_name text,    
  when_tg text,    
  level text,    
  op text,    
  old_rec hstore,    
  new_rec hstore,    
  crt_time timestamp without time zone DEFAULT now(),    
  username text,    
  client_addr inet,    
  client_port int    
);    
```    
创建通用的触发器函数    
```    
CREATE OR REPLACE FUNCTION dml_trace()    
RETURNS trigger    
LANGUAGE plpgsql    
AS $BODY$    
DECLARE    
v_new_rec hstore;    
v_old_rec hstore;    
v_username text := session_user;    
v_client_addr inet := inet_client_addr();    
v_client_port int := inet_client_port();    
BEGIN    
case TG_OP    
when 'DELETE' then     
  v_old_rec := hstore(OLD.*);    
  insert into table_change_rec (relid, table_schema, table_name, when_tg, level, op, old_rec, username, client_addr, client_port)    
    values (tg_relid, tg_table_schema, tg_table_name, tg_when, tg_level, tg_op, v_old_rec, v_username, v_client_addr, v_client_port);    
when 'INSERT' then     
  v_new_rec := hstore(NEW.*);    
  insert into table_change_rec (relid, table_schema, table_name, when_tg, level, op, new_rec, username, client_addr, client_port)    
    values (tg_relid, tg_table_schema, tg_table_name, tg_when, tg_level, tg_op, v_new_rec, v_username, v_client_addr, v_client_port);    
when 'UPDATE' then     
  v_old_rec := hstore(OLD.*);    
  v_new_rec := hstore(NEW.*);    
  insert into table_change_rec (relid, table_schema, table_name, when_tg, level, op, old_rec, new_rec, username, client_addr, client_port)    
    values (tg_relid, tg_table_schema, tg_table_name, tg_when, tg_level, tg_op, v_old_rec, v_new_rec, v_username, v_client_addr, v_client_port);    
else    
  return null;    
end case;    
  RETURN null;    
END;    
$BODY$ strict;    
```    
在测试表上分别创建插入, 更新, 删除的三个触发器.    
```    
CREATE TRIGGER tg AFTER DELETE or INSERT or UPDATE ON test FOR EACH ROW EXECUTE PROCEDURE dml_trace();    
```    
测试插入, 删除, 更新操作是否被跟踪.    
(已更新dml_trace, 以下例子未包含client_addr和client_port)    
```    
db1=> insert into test values (1, 'digoal', now());    
INSERT 0 1  
db1=> select * from test;    
 id |  info  |      crt_time         
----+--------+---------------------  
  1 | digoal | 2023-11-11 05:33:43  
(1 row)  
db1=> select * from table_change_rec;    
db1=> \x  
Expanded display is on.  
db1=> select * from table_change_rec;    
-[ RECORD 1 ]+---------------------------------------------------------------  
id           | 1  
relid        | 106648  
table_schema | s1  
table_name   | test  
when_tg      | AFTER  
level        | ROW  
op           | INSERT  
old_rec      |   
new_rec      | "id"=>"1", "info"=>"digoal", "crt_time"=>"2023-11-11 05:33:43"  
crt_time     | 2023-11-11 05:33:43.33753  
username     | r1  
client_addr  |   
client_port  |   
db1=> update test set info='DIGOAL' where id=1;    
UPDATE 1  
db1=> select * from test;    
-[ RECORD 1 ]-----------------  
id       | 1  
info     | DIGOAL  
crt_time | 2023-11-11 05:33:43  
db1=> select * from table_change_rec;    
-[ RECORD 1 ]+---------------------------------------------------------------  
id           | 1  
relid        | 106648  
table_schema | s1  
table_name   | test  
when_tg      | AFTER  
level        | ROW  
op           | INSERT  
old_rec      |   
new_rec      | "id"=>"1", "info"=>"digoal", "crt_time"=>"2023-11-11 05:33:43"  
crt_time     | 2023-11-11 05:33:43.33753  
username     | r1  
client_addr  |   
client_port  |   
-[ RECORD 2 ]+---------------------------------------------------------------  
id           | 2  
relid        | 106648  
table_schema | s1  
table_name   | test  
when_tg      | AFTER  
level        | ROW  
op           | UPDATE  
old_rec      | "id"=>"1", "info"=>"digoal", "crt_time"=>"2023-11-11 05:33:43"  
new_rec      | "id"=>"1", "info"=>"DIGOAL", "crt_time"=>"2023-11-11 05:33:43"  
crt_time     | 2023-11-11 05:34:09.639511  
username     | r1  
client_addr  |   
client_port  |   
db1=> delete from test where id=1;    
DELETE 1  
db1=> select * from test;    
(0 rows)  
db1=> select * from table_change_rec;    
-[ RECORD 1 ]+---------------------------------------------------------------  
id           | 1  
relid        | 106648  
table_schema | s1  
table_name   | test  
when_tg      | AFTER  
level        | ROW  
op           | INSERT  
old_rec      |   
new_rec      | "id"=>"1", "info"=>"digoal", "crt_time"=>"2023-11-11 05:33:43"  
crt_time     | 2023-11-11 05:33:43.33753  
username     | r1  
client_addr  |   
client_port  |   
-[ RECORD 2 ]+---------------------------------------------------------------  
id           | 2  
relid        | 106648  
table_schema | s1  
table_name   | test  
when_tg      | AFTER  
level        | ROW  
op           | UPDATE  
old_rec      | "id"=>"1", "info"=>"digoal", "crt_time"=>"2023-11-11 05:33:43"  
new_rec      | "id"=>"1", "info"=>"DIGOAL", "crt_time"=>"2023-11-11 05:33:43"  
crt_time     | 2023-11-11 05:34:09.639511  
username     | r1  
client_addr  |   
client_port  |   
-[ RECORD 3 ]+---------------------------------------------------------------  
id           | 3  
relid        | 106648  
table_schema | s1  
table_name   | test  
when_tg      | AFTER  
level        | ROW  
op           | DELETE  
old_rec      | "id"=>"1", "info"=>"DIGOAL", "crt_time"=>"2023-11-11 05:33:43"  
new_rec      |   
crt_time     | 2023-11-11 05:34:28.112658  
username     | r1  
client_addr  |   
client_port  |   