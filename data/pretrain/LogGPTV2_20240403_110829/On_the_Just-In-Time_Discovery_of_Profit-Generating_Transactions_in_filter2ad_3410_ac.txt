the base cryptocurrency asset. Recall that the objective of the
trader is to maximize the amount of base assets held.
Heuristic 4: Apart from the entering actions, an action must
depend on at least one previous action. Conceptually, this is
to avoid a strategy to contain actions that do not interact with
any other actions. Given two actions ai, aj ∈ A, we deﬁne that
ai and aj are independent actions, iff. there is no intersection
T
T
T
T
(aj) = ∅
(ai) and K
ai ⊥⊥ aj ⇐⇒ K
(aj) (cf. Equation 8). In other words,
between K
the execution of ai does not affect the execution results of aj,
no matter what concrete state is given.
(ai) ∩ K
(8)
Recall that K(a) denotes the set of smart contract storage
variables an action a reads from and writes to, and K
(a)
denotes a subset of K(a), which is relevant to the trader T.
As an example of independence, we assume a1 transacts c1
to c2 using a constant product market M 1 with liquidity L1c1
and L1c2, and a2 transacts c1 to c3 using another constant
product market M 2 with liquidity L2c1 and L2c3. Equation 9
shows the storage variables a1 and a2 reads from and writes
to. a1 and a2 are not independent, as they both read/write
variable T.c1. Therefore, Heuristic 4 does not prune the path
containing a1 and a2.
T
T
T
K
K
(a1) = {M 1.L1c1, M 1.L1c2 , T.c1, T.c2}
(a2) = {M 2.L2c1, M 2.L2c3 , T.c1, T.c3}
(9)
a3−→ c3
a4−→ c4
a2−→ c4, c1
a1−→ c2
a5−→ c1] is composed of two paths, [c1
Heuristic 5: An action cannot be immediately followed by
another reversing action (i.e., a mirroring action) on the same
DeFi market. For instance, if a1 transacts c1 to c2, and a2
converts c2 to c1 on the same market, then heuristic 5 will
prune all paths that contain a1, a2.
Heuristic 6: A path cannot include any branching. For ex-
a4−→
a1−→ c2
ample, a path of 5 actions [c1
a5−→
c4, c4
a5−→ c1] (cf. Figure 5a). In our
c1] and [c1
work, we choose the more proﬁtable path, and discard the
other, because both paths affect the asset c4. In a future work,
it might be interesting to attempt to extract proﬁt from both
paths in an effort to maximize the revenue.
Heuristic 7: A path must not include any loops. For example,
a5−→ c1] consists of a
a1−→ c2
a path [c1
loop between c2 and c3. This path is composed of two sub-
a4−→
paths, namely [c1
a5−→ c1] (cf. Figure 5b). We again chose the more proﬁtable
c3
path, and discard the other for simplicity. We leave it to future
work to optimize the potential gain.
a4−→ c3
a5−→ c1] and [c1
a3−→ c2
a2−→ c3
a2−→ c3
a1−→ c2
a3−→ c3
a2−→ c4
a1−→ c2
The efﬁciency of path pruning can be evaluated across two
dimensions: (i) the number of paths that are pruned, and, (ii)
the reduction in revenue resulting from the heuristic pruning.
To address the former, we show the reduction of the number of
paths due to the heuristics in Table II and discuss these results
further in Section VI-B. Regarding the latter, because we
cannot quantify the optimal revenue due to the combinatorial
explosion of the search space, we, unfortunately, see no avenue
to quantify the reduction in revenue caused by the heuristics.
C. DEFIPOSER-SMT Revenue Optimizer
SMT solvers validate if any initialization of the free vari-
ables would satisfy the requirements deﬁned. One requirement
we specify is to increase the base cryptocurrency asset balance
by a ﬁxed amount. To ﬁnd the maximum satisﬁable revenue,
we chose to use the following optimization algorithm (cf. Al-
gorithm 3). At a high level, to identify a coarse upper and
6
(b) Graph after shorting 1 ETH.
Cycle weight sum = 4.07 − 3.79 = 0.28
(a) Initial state graph.
(c) Graph after shorting 1, 000 ETH.
Cycle weight sum = 4.07 − 3.79 = 0.28
Cycle weight sum = 4.07−4.70 = −0.63
Fig. 4: Directed weighted graph for the economic bZx attack on the Ethereum block 9, 462, 687. Shorting ETH for WBTC on
bZx does not return assets to the trader T, and the action, therefore, does not point to any cryptocurrency assets. Graph 4a
has no arbitrage opportunity on the WBTC/ETH market (0.0170 × 44.1488 = 0.75 ≤ 1). In Graph 4b and 4c, the weights
change (ETH/WBTC price) after the trader increases the ﬂow (in ETH) to the bZx market because bZx’s price depends on the
Uniswap price. The graph is hence dynamic [15], i.e., the weights need to be updated after each action. The action encoding
of DEFIPOSER-SMT models the bZx’s price dependence on Uniswap. Note that the bZx attack does not violate Heuristic 6,
because action 1 does not return any asset nor forms a sub-path (cf. Figure 15).
(a) Heuristic 6 - Branching example
U niswap
U niswap
M KR
Strategy 2 [ET H
−−−−−−→ BAT Bancor
−−−−−−→ ET H] with 0.11 ETH of revenue.
−−−−−→ BN T Bancor
−−−−−→
DEFIPOSER-SMT will only execute strategy 1. DEFIPOSER-
ARB, however, ﬁnds and executes strategy 2 ﬁrst to extract
0.11 ETH. After executing strategy 2 and updating the graph,
strategy 1 is no longer proﬁtable. Therefore, DEFIPOSER-
ARB only extracts a revenue of 0.11 ETH in this block.
Note that DEFIPOSER-SMT provides proof of satisﬁable/un-
satisﬁable revenue targets for each considered path. However,
DEFIPOSER-SMT remains a best-effort
tool because the
heuristics prune paths that may be proﬁtable. Contrary to
DEFIPOSER-ARB, DEFIPOSER-SMT does not merge paths.
(b) Heuristic 7 - Looping example
E. Limitations
Fig. 5: Example of branching and looping paths.
We elaborate on a few limitations of our work.
lower revenue bound, this algorithm ﬁrst attempts to solve,
given multiples of 10 for the trader revenue. Given these
bounds, we perform a binary search to ﬁnd the optimal value.
D. Comparing DEFIPOSER-SMT to DEFIPOSER-ARB
Table I summarizes our comparison between DEFIPOSER-
SMT and DEFIPOSER-ARB. While arbitrage opportunities
appear plentiful, DEFIPOSER-ARB cannot capture non-cyclic
transactions such as the bZx case. Because DEFIPOSER-
SMT can encode any arbitrary strategy as an SMT prob-
lem, we argue that it
is a more generic tool, as long as
the underlying SMT solver can ﬁnd a solution fast enough.
We would like to stress again that both tools DEFIPOSER-
ARB and DEFIPOSER-SMT do not provide optimal solutions.
DEFIPOSER-ARB greedily searches for arbitrage and extracts
revenue as each opportunity arises. To show that DEFIPOSER-
ARB does not ﬁnd optimal solutions, we provide the following
example at block 9, 819, 643. Here, DEFIPOSER-SMT ﬁnds
two opportunities:
Strategy 1 [ET H Bancor
−−−−−→ BN T Bancor
−−−−−→ M KR
−−−−−−→
ET H] with 0.20 ETH of revenue.
U niswap
State dependency: In this study, we focus on block-level state
dependencies (cf. Appendix G), i.e., we consider a state to only
change when a new block is mined. In practice, a DeFi state
can change several times within the same blockchain block
(as several transactions can trade on a DeFi platform within
a block). Our assumption hence may cause us to not consider
potentially proﬁtable trades. An alternative approach to study
state dependency, which we leave to future work, is to perform
a transaction-level analysis. Such an analysis would assume
that the trader observes the peer-to-peer network layer of the
Ethereum network. Based on the information of transactions
in the memory pool (the pool of unconﬁrmed transactions), the
transaction order and state changes in the next block could be
estimated ahead of the block being mined.
Scalability: One problem of DEFIPOSER is the combinatorial
path explosion. To mitigate this problem, heuristics reduce
the path space, which only needs to be executed once. For
every new block, DEFIPOSER can parallelize the parameter
search process to ﬁnd the most proﬁtable paths. A limitation
of negative cycle detection is that it has to search for negative
cycles before starting to search parameters. The graph needs
to be updated after executing every strategy. This is difﬁcult
to parallelize and limits the system’s real-time capability,
7
ETHWBTC1. bZx, short ETH for WBTCprice = 0, weight = inf2. Compound, borrow WBTC with ETHprice = 0.0170 WBTC/ETH, weight = 4.07453. Uniswap, trade WBTC for ETHprice = 44.1488 ETH/WBTC, weight = -3.7875NoneETHWBTC1. bZx, short ETH for WBTCprice = 0, weight = inf2. Compound, borrow WBTC with ETHprice = 0.0170 WBTC/ETH, weight = 4.07453. Uniswap, trade WBTC for ETHprice = 44.2149 ETH/WBTC, weight = -3.7890 Send1 ETH ﬂowNoneETHWBTC1. bZx, short ETH for WBTCprice = 0, weight = inf2. Compound, borrow WBTC with ETHprice = 0.0170 WBTC/ETH, weight = 4.07453. Uniswap, trade WBTC for ETHprice = 110.2139 ETH/WBTC, weight = -4.7024 Send100 ETH ﬂowNonec1c2c4c3c5a1a3a2a4a5c1c2c4c5a1a2a5c1c4c3c5a3a4a5Path:Sub-path 1:Sub-path 2:c1c2c3a1a2a3c2a5c3a4c1c1c2c3a1a2a5c1c1a1c2a5c3a4c1Path:Sub-path 1:Sub-path 2:Path generation
Path selection
Manual DeFi modeling
Captures non-cyclic strategies
Optimally chosen parameters
Maximum Revenue
Total Revenue (over 150 days)
Lines of code (Python)
DEFIPOSER-ARB
Bellman-Ford-Moore, Walk to the root; No acyclic paths
Combines multiple sub-paths
Not required
No
No
81.31 ETH (32,524 USD)
4,103.22 ETH (1,641,288 USD)
300
DEFIPOSER-SMT
Pruning with heuristics; Any paths within the heuristics
Selects the highest revenue path
Required
Yes (e.g., bZx)
Yes (subject to inaccuracy of binary search)
22.40 ETH (8,960 USD)
1,552.32 ETH (620,928 USD)
2, 300
TABLE I: High-level comparison between DEFIPOSER-ARB and DEFIPOSER-SMT.
especially when there are multiple negative cycles, or the cycle
length is long.
Manual Modeling and Code Complexity: DEFIPOSER-
ARB only needs to be aware of the spot price of each market
and treats the underlying smart contracts and exchange pro-
tocols as a black box while greedily exploring opportunities.
DEFIPOSER-SMT, however, requires the manual translation
of the objective function into an SMT problem. This requires
to encode the state transitions into a group of predicates (cf.
Appendix C). The modeling process not only increases the
code complexity (cf. Table I) but also causes inaccuracies in
the found solutions and therefore requires a validation process
through, e.g., concrete execution.
Approximated Revenue: To avoid double-counting revenue
when a proﬁtable path exists over multiple blocks, we apply
a state dependency analysis and only exploit paths with a
state change (cf. Section G). However, DEFIPOSER’s reported
revenue is not accurate because: (i) We work on historical
blockchain states. In practice, the proﬁtability of DEFIPOSER
will be affected by the underlying blockchain’s network layer;
(ii) For simplicity within this work, we assume that DEFI-
POSER does not change other market participants’ behavior.
In practice, other traders are likely to monitor our activity and
adjust their trading strategy accordingly.
Multiple Traders: Within this work, we only consider a
single trader using DEFIPOSER. Zhou et al. [61] simulated the
outcome of competing transactions from several traders under
a reactive counter-bidding strategy. We believe that those re-
sults translate over to MEV when multiple traders (speciﬁcally
non-miners) compete over DEFIPOSER transactions. Zhou et
al. [61]’s results suggest that the total revenue will be divided
among the competing traders.
VI. EXPERIMENTAL EVALUATION
To query the Ethereum blockchain, we set up a full
archive Geth1 node (i.e., a node which stores all intermediate
blockchain state transitions) on a AMD Ryzen Threadripper
3990 X Processor (4.3 GHz, 64 cores), 4x2 TB NVMe SSD
RAID 0 and 256 GB RAM. We perform the concrete exe-
cution with a custom py-evm2, which can fork the Ethereum
blockchain at any given block height. To simplify our exper-
imental complexity, we do not consider trades which yield
1https://github.com/ethereum/go-ethereum
2https://github.com/ethereum/py-evm
below 0.10 ETH (40 USD) and are aware that this potentially
reduces the resulting ﬁnancial gain.
We select 96 actions from the Uniswap, Bancor, and Mak-
erDAO, with a total of 25 assets (cf. Table III and IV in Ap-
pendix). To enable action chaining, all considered assets trade
on Uniswap and Bancor, while SAI and DAI are convertible
on MakerDAO. The total value of assets on the three platforms
sums up to 3.3 billion USD, which corresponds to 82% of the
total USD value locked in DeFi as of May 2020.
Both DEFIPOSER-ARB and DEFIPOSER-SMT apply
dependency-based state reduction. Stationary blockchain states
are identiﬁed and skipped to avoid redundant computation and
double counting of revenue.
A. DEFIPOSER-ARB
We translate the 25 assets and 96 actions into a graph
with 25 nodes and 94 edges. Each node in the graph represents
a cryptocurrency asset. For each edge ei,j pointing from asset
ci to cj, we ﬁnd all markets with asset ci as input, and output
asset cj. Each edge’s weight is derived using the highest price
found among all supporting markets, or 0 if there is no market.
We then follow Algorithm 1 to greedily extract arbitrage
revenue as soon as one negative cycle is found. We use the
BFCF (Bellman-Ford-Moore, Walk to the root) algorithm to
ﬁnd negative cycles, which operates in O(|N 2|·|E|). For each
arbitrage opportunity, DEFIPOSER-ARB gradually increases
the input parameter (amount of base cryptocurrency asset)
until the revenue ceases to increase.
B. DEFIPOSER-SMT
We translate DeFi states into Z3 [21] as constraints on
state symbolic variables (cf. Section III). We symbolically
encode all variables using ﬂoats instead of integers because
the EVM only supports integers. Most DeFi smart contracts
express ﬂoats as integers by multiplying ﬂoats with a large
factor. Division and power are,
therefore, estimated using
integer math. This practice may introduce a bias in our state
and transition functions. Due to such model inaccuracies, we
proceed to concrete execution (i.e., real-world smart contract
execution on the EVM) to avoid false positives and validate
our result.
An exhaustive search over the total action space is infea-
sible. Therefore, we apply path pruning (cf. Section V-B) to
discard irrelevant paths.
Path Discovery and Pruning: The 96 DeFi actions (cf.
Table IV in Appendix) result in 9.92 × 10149 possible paths
8
Path length
2
3
4
5
Total
Before After
9, 120
857, 280
79, 727, 040
7, 334, 887, 680
7, 415, 481, 120
2
90