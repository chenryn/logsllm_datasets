   2:   
   3:  hash = computeHash(preferredHash, testString);
   4:   
   5:  private string computeHash(HashAlgorithm myHash, string input) {
   6:       byte[] data;
   7:       data = myHash.ComputeHash(Encoding.UTF8.GetBytes(input));
   8:       sb = new StringBuilder();
   9:       for (int i = 0; i 
  /InsecureDesign/action/AddUserDetails
  Action.UserAction
Sample 13.1
136
Another popular feature seen in most of the design frameworks today is data binding, where the request 
parameters get directly bound to the variables of the corresponding business/command object. Binding here 
means that the instance variables of such classes get automatically initialized with the request parameter val-
ues based on their names. The issue with this design is that the business objects may have variables that are 
not dependent on the request parameters. Such variables could be key variables like price, max limit, role etc. 
having static values or dependent on some server side processing logic. A threat in such scenarios is that an at-
tacker may supply additional parameters in request and try to bind values for unexposed variable of business 
object class. In this case the attacker can send an additional “price” parameter in the request which binds with 
the unexposed variable “price” in business object, thereby manipulating business logic.
What to Review
It is imperative to place all validation checks before processing any business logic and in case of ASP.NET applications 
independent of the POSTBACKs.  The security controls like authentication check must be place before processing any 
request.
The use of filters is recommended when authorization is being implemented in MVC 3 and above as .NET MVC 3 
introduced a method in global.asax called RegisterGlobalFilters which can be used to default deny access to URL’s in 
the application.
It is recommended when reviewing MVC3/4 .NET to take a look at how authorization is being implemented.  The line 
above, “filters.Add(new System.Web.Mvc.AuthorizeAttribute());” default denies access to any request without a valid 
  JSP_WithDesign/Success.jsp
  /InsecureDesign/action/ChangePassword
  Action.ChangePasswordAction
  JSP_WithDesign/Success.jsp
  /InsecureDesign/action/test
  Action.TestAction
  JSP_WithDesign/Success.jsp
public static void RegisterGlobalFilters(GlobalFilterCollection filters)
{
   filters.Add(new HandleErrorAttribute());
   filters.Add(new System.Web.Mvc.AuthorizeAttribute());
}
Sample 13.2
A7 - Missing Function Level Access Control
137
session.  If this is implemented we may need to provide unauthorized access to certain pages such as a registration 
page, public welcome page or a login page. 
The directive “AllowAnonymous” is used to provide access to public pages with no valid session required.  The code 
may look like this:
When reviewing code for authorization, the following considerations can be checked for:
• Every entry point should be authorized. Every function should be authorized. 
• Authorization checks should be efficient, and implemented in a central code base such that it can be applied 
consistently. 
• In cases where authorization fails, a HTTP 403 not authorized page should be returned. 
• When using RBAC, there must be some way for the application to report on the currently provisioned users of the 
system and their associated roles.  This allows the business to periodically audit the user access to the system and 
ensure it is accurate.  For example, if a user is provisioned as an admin on the system, then that user changes job to 
another department, it could be the case that the admin role is no longer appropriate.
• There should be an easy method to change or remove a user’s role (in RBAC systems).  Adding, modifying or remov-
ing a user from a role should result in audit logs.
• For roles that are higher risk, addition, modification and deletion of those roles should involve multiple levels of 
authorization (e.g. maker/checker), this may be tracked within the application itself, or through some centralized 
role application.  Both the functionality and code of the system controlling roles should be part of the review scope.
• At a design level attempt to keep the range of roles simple. Applications with multiple permission levels/roles often
increases the possibility of conflicting permission sets resulting in unanticipated privileges.
• In application architectures with thick clients (i.e. mobile apps or binaries running on a PC) do not attempt to 
perform any authorization in the client code, as this could be bypassed by an attacker.  In browser based applications 
do not perform any authorization decisions in JavaScript.
• Never base authorization decisions on untrusted data.  For example do not use a header, or hidden field, from the
client request to determine the level of authorization a user will have, again this can be manipulated by an attacker.
• Follow the principle of ‘complete mediation’, where authorization is checked at every stage of a function.  For exam-
ple, if an application has four pages to browse through to purchase an item (browse.html, basket.html, inputPay-
ment.html, makePayment.html) then check user authorization at every page, and stage within pages, instead of only 
performing a check in the first page.
[AllowAnonymous]
    public ActionResult LogMeIn(string returnUrl)
Sample 13.3
A7 - Missing Function Level Access Control
138
• By default deny access to any page, and then use authorization logic to explicitly allow access based on roles/
ACL rules.
• Where to hold authorization data, DB or session?
• Remove all redundant/test/unexposed business logic configurations from the file
• The business/form/command objects must have only those instance variables that are dependent on the
user inputs.
A7 - Missing Function Level Access Control
139
A8
140
A8 - Cross-Site Request Forgery (CSRF)
A CSRF attack forces a logged-on victim’s browser to send a forged HTTP request, including the victim’s session 
cookie and any other automatically included authentication information, to a vulnerable web application. This 
allows the attacker to force the victim’s browser to generate requests the vulnerable application thinks are 
legitimate requests from the victim.
14.1 Description
CSRF is an attack which forces an end user to execute unwanted actions on a web application in which they are 
currently authenticated. With a little help of social engineering (like sending a link via email/chat), an attacker 
may force the users of a web application to execute actions of the attacker’s choosing. A successful CSRF ex-
ploit can compromise end user data, and protected functionality, in the case of a normal privileged user. If the 
targeted end user is the administrator account, this can compromise the entire web application.
The impact of a successful cross-site request forgery attack is limited to the capabilities exposed by the vul-
nerable application. For example, this attack could result in a transfer of funds, changing a password, or pur-
chasing an item in the user’s context. In effect, CSRF attacks are used by an attacker to make a target system 
perform a function (funds Transfer, form submission etc.) via the target’s browser without knowledge of the 
target user, at least until the unauthorized function has been committed.
CSRF is not the same as XSS (Cross Site Scripting), which forces malicious content to be served by a trusted 
website to an unsuspecting victim. Cross-Site Request Forgery (CSRF, a.k.a C-SURF or Confused-Deputy) at-
tacks are considered useful if the attacker knows the target is authenticated to a web based system. They only 
work if the target is logged into the system, and therefore have a small attack footprint. Other logical weak-
nesses also need to be present such as no transaction authorization required by the user. In effect CSRF attacks 
are used by an attacker to make a target system perform a function (Funds Transfer, Form submission etc..) via 
the target’s browser without the knowledge of the target user, at least until the unauthorized function has 
been committed. A primary target is the exploitation of “ease of use” features on web applications (One-click 
purchase).
Impacts of successful CSRF exploits vary greatly based on the role of the victim. When targeting a normal user, 
a successful CSRF attack can compromise end-user data and their associated functions. If the targeted end 
user is an administrator account, a CSRF attack can compromise the entire Web application. The sites that are 
more likely to be attacked are community Websites (social networking, email) or sites that have high dollar 
value accounts associated with them (banks, stock brokerages, bill pay services). This attack can happen even 
if the user is logged into a Web site using strong encryption (HTTPS). Utilizing social engineering, an attacker 
will embed malicious HTML or JavaScript code into an email or Website to request a specific ‘task url’. The task 
then executes with or without the user’s knowledge, either directly or by utilizing a Cross-site Scripting flaw 
(ex: Samy MySpace Worm).
How They Work
CSRF attacks work by sending a rogue HTTP request from an authenticated user’s browser to the application, 
which then commits a transaction without authorization given by the target user. As long as the user is au-
thenticated and a meaningful HTTP request is sent by the user’s browser to a target application, the applica-
tion does not know if the origin of the request is a valid transaction or a link clicked by the user (that was, say, 
in an email) while the user is authenticated to the application. The request will be authenticated as the request 
from the users browser will automatically include the ‘Cookie’ header, which is the basis for authentication.  So 
CROSS-SITE REQUEST FORGERY (CSRF)
A8
141
A8 - Cross-Site Request Forgery (CSRF)
an attacker makes the victim perform actions that they didn’t intend to, such as purchase an item. Sample 
14.1 shows an example an HTTP POST to a ticket vendor to purchase a number of tickets.
What to Review
This issue is simple to detect, but there may be compensating controls around the functionality of the application 
which may alert the user to a CSRF attempt. As long as the application accepts a well formed HTTP request and the 
request adheres to some business logic of the application CSRF shall work.
By checking the page rendering we need to see if any unique identifiers are appended to the links rendered by the 
application in the user’s browser. If there is no unique identifier relating to each HTTP request to tie a HTTP request to 
the user, we are vulnerable. Session ID is not enough, as the session ID shall be sent automatically if a user clicks on a 
rogue link, as the user is already authenticated.
Prevention Measures That Do NOT Work
Examples of attempted CSRF prevent techniques which attackers can bypass are listed in table 21, these measures 
should not be used in sensitive applications and should fail code review.
POST http://TicketMeister.com/Buy_ticket.htm HTTP/1.1
Host: ticketmeister
User-Agent: Mozilla/5.0 (Macintosh; U; PPC Mac OS X Mach-O;) Firefox/1.4.1
Cookie: JSPSESSIONID=34JHURHD894LOP04957HR49I3JE383940123K
ticketId=ATHX1138&to=PO BOX 1198 DUBLIN 2&amount=10&date=11042008
The response of the vendor is to acknowledge the purchase of the tickets:
HTTP/1.0 200 OK
Date: Fri, 02 May 2008 10:01:20 GMT
Server: IBM_HTTP_Server
Content-Type: text/xml;charset=ISO-8859-1
Content-Language: en-US
X-Cache: MISS from app-proxy-2.proxy.ie
Connection: close