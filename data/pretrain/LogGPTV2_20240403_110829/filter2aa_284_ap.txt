### 代码示例优化

```csharp
// 计算哈希值
hash = ComputeHash(preferredHash, testString);

private string ComputeHash(HashAlgorithm myHash, string input)
{
    byte[] data = myHash.ComputeHash(Encoding.UTF8.GetBytes(input));
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i < data.Length; i++)
    {
        sb.Append(data[i].ToString("x2"));
    }
    return sb.ToString();
}
```

### 安全设计和数据绑定

当前大多数设计框架中常见的一个功能是数据绑定，即将请求参数直接绑定到相应业务或命令对象的变量。这种绑定意味着这些类的实例变量会根据其名称自动初始化为请求参数的值。然而，这种设计存在一个问题：业务对象可能包含与请求参数无关的变量。这些变量可能是关键变量，如价格、最大限制、角色等，它们具有静态值或依赖于某些服务器端处理逻辑。在这种情况下，攻击者可能会在请求中提供额外的参数，并尝试将值绑定到业务对象类中未暴露的变量。例如，攻击者可以在请求中发送一个额外的“价格”参数，从而将其绑定到业务对象中的未暴露变量“价格”，进而操纵业务逻辑。

### 审查要点

- 在处理任何业务逻辑之前，必须进行所有验证检查。对于ASP.NET应用程序，无论是否是POSTBACK，都应如此。
- 推荐在MVC 3及以上版本中使用过滤器来实现授权。.NET MVC 3引入了一个名为`RegisterGlobalFilters`的方法，可以用于默认拒绝应用中的URL访问。
- 在审查MVC3/4 .NET时，应查看授权是如何实现的。例如，“`filters.Add(new System.Web.Mvc.AuthorizeAttribute());`”这一行代码默认拒绝了没有有效会话的任何请求。

### 示例代码

```csharp
public static void RegisterGlobalFilters(GlobalFilterCollection filters)
{
    filters.Add(new HandleErrorAttribute());
    filters.Add(new System.Web.Mvc.AuthorizeAttribute());
}
```

### 缺失的功能级访问控制（A7）

- 每个入口点和每个函数都应经过授权。
- 授权检查应高效且集中实现，以便一致应用。
- 授权失败时应返回HTTP 403未授权页面。
- 使用基于角色的访问控制（RBAC）时，应用必须能够报告系统中当前配置的用户及其关联角色，以便定期审计用户访问权限。
- 应该有简单的方法来更改或移除用户的角色（在RBAC系统中）。添加、修改或删除用户角色应生成审计日志。
- 对于高风险角色，增加、修改和删除这些角色应涉及多级授权（例如，制单/审核），这可以通过应用本身或集中化的角色管理系统来跟踪。
- 设计时尽量保持角色范围简单，以减少权限冲突的可能性。
- 在客户端代码（如移动应用或PC上的二进制文件）中不要尝试执行任何授权决策，因为攻击者可以绕过这些决策。在基于浏览器的应用程序中，不要在JavaScript中执行任何授权决策。
- 不要基于不可信数据做出授权决策。例如，不要使用来自客户端请求的头部或隐藏字段来确定用户的授权级别，因为这些可以被攻击者篡改。
- 遵循“完全中介”的原则，在每个函数的每个阶段都进行授权检查。

### 跨站请求伪造（CSRF）攻击（A8）

CSRF攻击通过迫使已登录的受害者的浏览器发送伪造的HTTP请求，包括受害者的会话cookie和其他自动包含的身份验证信息，来攻击易受攻击的Web应用程序。这使得攻击者能够迫使受害者的浏览器生成应用程序认为是合法的请求。

#### 攻击原理

- CSRF攻击通过利用社会工程学手段（如通过电子邮件或聊天发送链接）迫使用户在他们已经认证的Web应用程序中执行非预期的操作。
- 成功的CSRF攻击可以危及最终用户的数据和受保护的功能。如果目标用户是管理员账户，整个Web应用程序都可能受到威胁。
- CSRF攻击的工作原理是发送一个恶意HTTP请求，该请求由已认证用户的浏览器发送到目标应用程序。只要用户已认证并且发送了有意义的HTTP请求，应用程序就无法区分该请求是合法交易还是用户点击了恶意链接。

#### 预防措施

- 检查页面渲染时，确保每个HTTP请求都有唯一的标识符，以将其与用户关联起来。仅凭会话ID是不够的，因为会话ID会在用户点击恶意链接时自动发送。
- 避免使用容易被攻击者绕过的CSRF预防技术，如仅依赖于Cookie或简单的令牌机制。

通过以上优化和改进，文本变得更加清晰、连贯和专业。