else
j = index of v in ith
row + 1, mi,j−1 = v.
while mi,j = si or (v, mi,j) unavailable do
j = j + 1
forward packet to mi,j
Note that if some failover node mi,j is visited by the i-th
ﬂow, many different link failures may be the cause. However,
for a given ﬂow (row i), it holds that in this case one link
pointing to node mi,1, one link pointing to node mi,2, etc. are
in the set of failed links.
In general, we can observe that in order to avoid loops (and
provide maximal resilience), each row should contain each
non-source/non-destination nodes exactly once. To make the
analysis and description simpler, we also allow the source and
destination nodes to appear in each row: the failover scheme
simply ignores them when they occur. In this case, each row
is a permutation of all nodes.
Figure 1 illustrates the use of the failover matrix for a ﬂow
from node 1 to node 6, when the links {(1, 6), (2, 6), (2, 3)}
347
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:03:05 UTC from IEEE Xplore.  Restrictions apply. 
6
5
1
4
2
3
Fig. 1. Example: Rerouting of ﬂow i from 1 to 6, according to M , where
the ith
row without source and destination nodes is [2, 3, 4, 5]. If the links
{(1, 6), (2, 6), (2, 3)} failed, packets of this ﬂow are ﬁrst forwarded to node
2 from node 1. Since there is no direct link from 2 to 6, the next entry in the
row, 3, is considered. As the link between 2 and 3 is missing and the next
entry is 4, packets are then forwarded to node 4, from where they can reach
their destination.
failed. Observe that while the speciﬁc permutation does not
matter for correctness, it matters in terms of performance.
Figure 2 shows an example for n = 6 in a scenario with ﬂows
from each node to node 6 (no ﬂow from node 6 to another
node). We assume that the links {(1, 6), (2, 6), (3, 6)} failed.
On the left, the resulting failover routes for the following matrix
are shown:
M1 =
1 2 3 4 5
1
2 3 4 5
2
1
3 4 5
4
1
2
3
4
3
2
5
5
2
3
4
5
1
1
where the ith
ﬂow originates from node i. The elements in bold
indicate the preﬁxes of the rows that are used for rerouting.
The resulting maximum overhead load is 3 on (4, 6): the load
of 3 ﬂows aggregates along the failover path. On the right, a
failover scheme resulting in load 2 only is shown. For example,
this can be achieved with the following failover matrix:
M2 =
1 2 3 4 5
4
2 5 1
2
3 4 5
3
2
4
5
4
1
4
2
5
3
1
5
2
3
1
3
1
Intuitively, the bad performance of M1 comes from the
similarity of each node’s scheme: as nodes all rely on similar
failover schemes, the failover ﬂows will all end up on the same
route, leading to a high link congestion.
IV. RESILIENT OBLIVIOUS ROUTING
A. The Case for Latin Square Failover Matrices
Before we present the proposed scheme to compute resilient
oblivious routing matrices, let us ﬁrst make some observations.
We will ﬁrst focus on the fundamental All-to-One Routing
scenario which is often considered in related works [3], [5]:
all nodes communicate to a single destination d, let us say vn
348
⎡
⎢⎢⎢⎢⎢⎢⎣
⎡
⎢⎢⎢⎢⎢⎢⎣
⎤
⎥⎥⎥⎥⎥⎥⎦ ,
6
6
6
6
6
6
⎤
⎥⎥⎥⎥⎥⎥⎦ .
6
6
6
6
6
6
6
5
1
4
2
6
6
3
5
5
1
1
4
4
2
2
3
3
Fig. 2. Example: Rerouting of ﬂows from nodes 1,2, and 3 due to link failures
{(1, 6), (2, 6), (2, 3)} according to M1 (left) and M2 (right) respectively. A
failover matrix rerouting ﬂows to similar paths can lead to a high overhead
load (left). Accordingly, failover matrixes should be designed where node
repetitions in row preﬁxes are minimized (right).
(we assume vn does not communicate to anyone else, so we
consider n−1 ﬂows only). It is known from prior work that for
all-to-one routing the highest overhead load is induced if links
towards the destination node vn are failed [3]. In this case,
the adversary can “reuse“ failures: if the adversary removes
the links between vi and vn, then the occurrence of vi in any
failover sequence implies a higher number of ﬂows on the
subsequent node in the failover sequence. Thanks to this claim,
we can assume that F consists of links (vi1 , vn), (vi2 , vn), . . .
for some i1, i2, . . . only. Accordingly, we can simply refer to
them by i1, i2, . . ., whenever we consider all-to-one routing.
Consider two ﬂows originating from u and v in a system
relying on a failover scheme represented by M . Both ﬂows
cannot reach the destination, so they are rerouted to their fail-
safe paths, trying the failover paths as described earlier. If they
both use the same node t in their failover paths, the links from
nodes earlier in the corresponding rows of the failover matrix to
the destination must have failed. That is, mu,a = mv,b = t for
some indices a, b. Thus the ﬂow from u will transit through t
if all the previous failover routes have failed: {(mu,i, vn), 1 ≤
i ≤ a} ⊆ F . Similarly the ﬂow from v will transit through t
if {(mv,i, vn), 1 ≤ i ≤ b} ⊆ F . As a shorthand notation, we
will refer to the set of elements of row i before t as Pt(i) =
{mi,j|mi,ti = t, 1 ≤ j ≤ ti}, the preﬁx of t in row i (this can
include the source and destination of the ﬂow, although they
are ignored in the failover scheme). The number of failed links
is hence at least the number of elements in the union of these
preﬁxes minus the occurrence of the destination node of the
ﬂows: |F| ≥ a + b−|Pt(u)∩ Pt(v)|− 2. This relation provides
two techniques to ensure that the link (t, vn) has a low load: i)
makes sure a and b are as high as possible (that is, t is used as
a last resort), and ii) ensure that the failover routes used by u
and v are as different as possible, ideally Pt(u) ∩ Pt(v) = ∅:
this prevents the adversary from “reusing” links failed on the
failover path of packets from u when targeting the ﬂow of
packets from v.
When generalizing this brief analysis of node t to all nodes
of the system, it is interesting to observe that i) and ii) conﬂict:
on the one hand, several different nodes must be used early
in failover schemes (to prevent a large intersection size), on
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:03:05 UTC from IEEE Xplore.  Restrictions apply. 
the other, nodes should be used as late as possible on failover
sequences so that no congestion can easily happen on their link
to vn. Led by this intuition, we now focus on latin squares:
that is, failover matrices where each node appears exactly once
on each row and each column. Since there are no repetitions
on rows, forwarding loops in failover paths are avoided.
However, not all latin squares are good failover matrices. As
an example, let us analyze the following latin square M =
[mij]1≤i,j≤n−1 where relay nodes are tried in a round-robin
fashion: mij = (i + j − 1) mod (n− 1) . This scheme cannot
lead to forwarding loops because ∀1 ≤ j, j(cid:4) ≤ (n − 1), j (cid:6)=
j(cid:4) ⇒ mij (cid:6)= mij (cid:2) . However, this scheme results in a high load:
if the adversary fails the f ﬁrst links to destination d (that
is, F = {(vi, d), i = 1 . . . f}), the f ﬁrst nodes will all route
through (vf +1, d): we have φ = θ(f ).
In the next section we will investigate which additional
properties latin squares must have to constitute good failover
matrices. As we will see, the intersection of preﬁxes of rows
plays a central role.
B. Performance of Latin Square Schemes
Let us now take a closer look at how a high load can arise
at a node. A link e = (w, x) carrying load (cid:4), by deﬁnition,
serves on the failover route of (cid:4) different ﬂows. In particular,
there are (cid:4) rows in the failover matrix which include w, the
head node of the link, “early on”, in a short preﬁx of the row:
the current set of failures leads to a failover routing to w.
Accordingly, if the maximum load is φ then there is a node w
where this maximum load is manifested and φ rows of M are
responsible for generating this load. In other words, these φ
rows form a set T , where the links from the predecessors of w
to vn in these rows (ignoring the destination node) are all in
the failure set, i.e., ∃w ∈ V s.t.
Let M be a latin square failover matrix, and let F ∈ Fo(φ)
(cid:8)
i∈T Pw(i) \ {vn} ⊆ F .
be an optimal attack set (i.e., a worst-case set of link failures
inducing a maximum load).
node). In the best case (from a load perspective), for instance
|(cid:8)
We now aim to lower bound the minimal size of F .
Let (w, vn) be the link on which the load is φ. We have |F| ≥
i∈T Pw(i)|−1 (we deduct one to account for the destination
(cid:9)
when φ << n, two rows do not intersect: |F| =
i∈T |Pw(i)|.
Since M is a latin square, it holds for all i, j ∈ T that
(cid:9)
the position of w in the rows differs. If F is of minimal
|F| ≥
cardinality, F necessarily contains the shortest preﬁxes:
i∈T (|Pw(i)| − 1) = (t − 1)(t − 2)/2, for t = |T|, because
an occurrence of the destination in the preﬁx of w in row i is
ignored.
This optimistic estimation technique captures the core of
our performance analysis scheme. The only technical problem
is now to limit the intersection size between the rows affected
by the failures. Of course, since any row ultimately contains
the n nodes, we must work on the ﬁrst columns of failover
matrix M . Let M k = [mij]1≤i<n,1≤j≤k denote the k-block
of M , the submatrix of the failover matrix consisting of the k
ﬁrst columns of M and let M k(i) the set of the ﬁrst k elements
of the ith
row of M . We say that a matrix is a latin matrix
4 12 9
5
1
3 12 4
4
x
x
3
6
6 13 8 11
4
x
x
x
x
x
x
x
5
8
1
13
9
......
4
load
k
n-k
Fig. 3. Computation of load and worst-case failure sets. Let the ﬂows 2, 3, 4, 5
lead to the worst-case load φ = 4 on the link (4, vn). In the failover matrix M ,
we highlight the occurrence of 4 with a square in each row, and color the
background of the preﬁxes of the rows responsible for the load in blue. The
number of failures responsible for the use of the blue preﬁxes depends on the
number of unique elements in their union. Two preﬁxes of length at most k
share at most one element, which allows us to bound the number of distinct
elements.
if it can be the k-block of a latin square, that is, no element
occurs more than once in each row and in each column.
F
φ
M
M k
M k(i)
Pv(i)
set of failed links
maximum load induced by F
failover matrix [mi,j ]1≤i<n,1≤j<n, with element mi,j
at the jth
k-block / submatrix of the ﬁrst k columns of M
set of the ﬁrst k elements of the ith
set of nodes in the preﬁx of node v in row i
position at the ith
row of M
row.
OVERVIEW OF NOTATION USED IN THIS PAPER
TABLE I
a latin submatrix such that
the size of the intersection of two rows is at most 1. That
We now formalize the statement for the minimal number of
link failures necessary to generate a load φ, depending on the
intersection size of short preﬁxes. Figure 3 depicts an example
of how load accumulates on a link.
n and M k
Theorem 1. Let k ≤ √
is, for ∀i, j ≤ n, i (cid:6)= j it holds that |M k(i) ∩ M k(j)| ≤ 1.
Let F ∈ Fo(φ). If φ ≤ k then |F| = Ω(φ2).
Proof. Let w be a node that carries a load of φ on its link to vn
due to F . Consider the set of failover sequences that contribute
to this load (the rows with the blue background in Figure 3,
i.e., the set of ﬂows T for which all nodes in the preﬁx of
their rows are in the failure set,
from the predecessors of w on the rows of T in M must be in
the set of failed links, unless the destination vn is in the preﬁx.