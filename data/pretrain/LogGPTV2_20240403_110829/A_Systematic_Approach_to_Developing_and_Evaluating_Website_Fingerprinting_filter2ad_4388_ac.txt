Defense
Unique packet lengths
Packet length counts
Packet ordering
Timing
PadM *
*
PadE F2 28 91 F3
*
*
*
3 F3 59 * F3
2
Wr-Morph F2 13 74 F2 29 180 *
HTTPOS F3 29 30 F3 23
Pa-Decoy F1
6
68 F1 48 178 F1 34 * F3 93
50 F3 45 * F3
1
BuFLO F2 147 *
*
Tamaraw F2 177 * F2 180
*
*
*
*
*
G1
*
G2
*
1
G3
G8
G6
G4
G7
*
G5
9 F2 16 57
* * F2 16 57 F2 3
9 F3 1
27 F2 2
11 F2 32 68
* * F2 43 72 F2 2
18 F2 3
9 F3 1
* F2 38 151 F3 1
G10
* * F4 23
1 F3 29 * F3 2 3 F3 4 4 F4 23
* * F4 23
3 F3 179 * F3 2 * F3 4 4 F4 23
*
* * F2 23 85 F2 78
* F2 20 94
* * F2 122 * F2 68 168 F2 82 *
47
47
47
47
* * * * F3 14 * F4 111 146
*
* * * * *
* * * * *
*
* * * * *
* * * * *
* *
* *
*
*
*
*
*
*
G9
*
*
*
*
*
*
*
Table 3: Upper bounds on the quality of the defenses. Results are given in three columns: the ﬁrst column is the feature classiﬁer
that was able to achieve the highest mean accuracy, the second is the value of v for which the feature classiﬁer in column 1 had an
accuracy greater than 0.55 for all greater values of v, and the third is similar, but for 0.75; asterisks indicate when these accuracies
were not reached for v ≤ 180. Asterisks and higher v values indicate that the corresponding defense is more successful in covering
the speciﬁc feature. Tamaraw is our BuFLO-based defense presented in Section 6.
Maximum Packet Padding (PadM): Padding adds garbage data
to the end of packets in order to obscure their true length. Packet
padding schemes have been known in the literature; a large number
of different padding schemes were analyzed by Dyer et al. [5] and
shown to be ineffective against the attack classiﬁers described in [9]
and [12]. Packet padding schemes are meant to obscure the unique
packet length feature. In the PadM defense, all packet lengths are
padded to the MTU. The effect of using Tor is similar to PadM, as
Tor trafﬁc is delivered in ﬁxed-size cells.
Exponential Packet Padding (PadE): Here, packet lengths are
padded upwards to the closest power of 2, but not exceeding the
MTU. No extra packets are added in either of the two schemes.
PadE is meant to be a bandwidth-cheaper version of PadM.
Trafﬁc Morphing (Wr-Morph): Wright et al. [19] published a
WF defense that is meant to obscure packet lengths, known as traf-
ﬁc morphing. Unique among the defenses, Wr-Morph is designed
to allow the client to set a target page CT and mimic the page’s
packet size distribution by modifying packet lengths.
In our implementation, we use google.com as CT , our target
morph page since it is reasonable for the client to attempt to hide
her trafﬁc features by using the most commonly accessed page as a
decoy.
HTTP Obfuscation (HTTPOS): HTTPOS was presented by
Luo et al. [11] as a platform for website ﬁngerprinting defenses.
Unlike many other defenses, HTTPOS is implemented entirely on
the client-side, with no need for support from any proxy or the end
server. It does so by using TCP advertised windows, HTTP pipelin-
ing, and HTTP ranges in order to control the sizes of both outgoing
and incoming packets.
Our simulation is not done at the application layer; rather, we
simply go through the packet sequence and split up each incom-
ing packet of size less than the MTU. In the implementation of
HTTPOS, this requires a new outgoing packet between the two
splits which signals the end server that the client is ready to receive
the second split, which costs one round-trip time. In our simulated
defense, we assume this can be done without the signal and round-
trip time, which is possible with the cooperation of a proxy or the
end server.1 We complete this defense by also padding all outgoing
packets to a ﬁxed size of 1500; the authors describe how outgoing
packet padding can be done, but they are not clear as to what they
implemented. Our choice gives maximum protection for unique
packet lengths, at the cost of extra overhead.
Background Noise (Pa-Decoy): Background noise can be used
to add randomness to each page load in order to make them less
distinguishable. Tor has some background activity that makes ﬁn-
gerprinting more difﬁcult, such as circuit construction, circuit mea-
surement, and stream SENDMEs.
Panchenko et al. [12] proposed a simple defense using back-
ground noise to defeat their own attack. Whenever a page is loaded,
a decoy page is loaded in the background, using its own connec-
tions and connection limit so as not to interfere with the connec-
tions of the intended page. This defense has a high overhead. We
1This assumption is reasonable for us as many of the other defenses
also require the cooperation of a proxy or the end server.
used a different page from Alexa’s top 800 sites as background
noise for each of the training and testing elements in order to simu-
late the intended effect that the attacker cannot predict which page
the client picked. Our simulated defense assumes that the decoy
page does not interfere at all with the page load of the true page.
Buffered Fixed Length Obfuscator (BuFLO): After Dyer et
al. analyzed a large number of trafﬁc analysis countermeasures and
found that efﬁcient defenses failed, they presented their own de-
fense, BuFLO — a Buffered Fixed-Length Obfuscator, and demon-
strated its relative success against the attacks of the day [5]. The
BuFLO defense is an obfuscator with large bandwidth and time
overhead that is applied to both the incoming and outgoing traf-
ﬁc. Packets are sent at ﬁxed intervals with ﬁxed length, and if no
data needs to be sent, dummy packets are sent instead. The trafﬁc
must continue for a minimum amount of time, after which it may
terminate if no more data needs to be sent.
BuFLO is parameterized by three values: d the ﬁxed size of
packets (set to 1500), ρ the interpacket timing (set to one packet/20
milliseconds), and τ the ﬁxed minimum amount of time for which
data must be sent (set to 10 seconds). These parameter settings
were the strong (and more bandwidth-intensive) choice presented
by Dyer et al., which was able to sharply decrease the accuracy of
the Panchenko classiﬁer [12].
4.2 Comparative Results
In this section we highlight the conclusions of our comparative
evaluation. The full results are given in Table 3. For each defense,
we only present the most successful feature classiﬁer. We only use
the interpacket timing classiﬁer on G10. We vary v from 1 to 180
and present the minimum value of v for which the feature classi-
ﬁer had a higher accuracy than 0.55 and 0.75 for all greater v. A
lower v indicates that the defense was less successful in covering
the feature against our classiﬁers, whereas an asterisk indicates that
our feature classiﬁers could not distinguish the classes with the tar-
get accuracy (0.55 or 0.75) for any value of v that we tested. This
table also includes our new proposed defense, Tamaraw (presented
in Section 6).
Our evaluation shows that PadM covers unique packet length as
well as packet orderings.
In PadE, changing packet length can
cause the lengths to be padded to different powers of 2, which
could affect the set of unique packet lengths. However, the number
of distinct lengths with PadE is small, so this is unlikely. Con-
sequently, the unique packet length classiﬁer did not detect a dif-
ference. Our packet ordering classiﬁer, however, considered the
changes in packet lengths to be re-ordering, and therefore managed
to defeat PadE. PadM and PadE are ineffective against attacks that
use packet length frequencies.
HTTPOS has been shown to be effective against attack classi-
ﬁers that are strongly dependent on unique packet lengths [9, 11].
However, Cai, et al.’s attack succeeds against HTTPOS [3] . This
is because HTTPOS attempts to remove unique packet lengths as a
feature, but Cai’s attack primarily uses packet ordering.
Pa-Decoy and BuFLO are effective against the Panchenko clas-
siﬁer and attacks that are dependent on packet length frequencies
[5,12] – i.e., these defenses partly cover packet length frequencies.
The table exposes several ﬂaws. PadM, PadE, Wr-Morph and
HTTPOS are not designed to cover total transmission size (packet
length frequencies), so they would be ineffective against the attacks
that leverage them. Pa-Decoy fails to completely cover interpacket
timing because it only covers the total transmission time roughly
half the time (i.e., when the decoy page takes longer to load than
the desired page), which may leak the total page size, a powerful
feature. Similarly, BuFLO does not cover total transmission time if
it is over 10 seconds at ρ = 0.020 s/packet, which happened quite
often. Trying to cover packet length frequency on G(v)
4 becomes a
race between v and the overhead of BuFLO; a larger v requires a
larger setting of minimum time τ to cover it.
Our results are upper bounds on the quality of the defense, as
more complicated classiﬁers could reveal more information. For
instance, HTTPOS performs well against F1, but if C(cid:48) has larger
unique packet lengths than C, then D(C(cid:48)) will also have larger
unique packet lengths than D(C) under HTTPOS. We wrote a clas-
siﬁer speciﬁcally to ﬁnd this difference and achieved an accuracy
of 0.99 with G(100)
compared to 0.5 for F1.
Tor developers want to understand what WF defenses work with
Tor [15]. As Tor already covers unique packet length, PadM, PadE,
Wr-Morph, and HTTPOS are not meaningful on Tor, as all of these
defenses are focused on covering unique packet lengths (although
only PadM truly does so). We note in particular that HTTPOS is a
platform valuable for its client-only implementation (requiring no
cooperation from a proxy or the end server), but Tor bridges can be
made to cooperate by implementing a WF defense as a pluggable
transport. Pa-Decoy and Dy-BuFLO achieve only limited success
at covering packet length frequencies. In short, none of these de-
fenses can be considered a perfect ﬁt for Tor.
1
5. THEORETICAL FOUNDATIONS
In this section we develop a model of website ﬁngerprinting at-
tacks and defenses, derive lower bounds on the bandwidth overhead
of any defense that achieves a given level of security, and show how
to derive open-world performance from closed-world experimental
results.
5.1 Security vs. Overhead Trade-Off
We focus on understanding the relationship between bandwidth
overhead and security guarantees. The overhead required by a ﬁn-
gerprinting defense depends on the set of web sites to be protected
– a set of similar websites can be protected with little overhead, a
set of dissimilar websites requires more overhead. To derive lower
bounds of bandwidth costs, we consider an ofﬂine version of the
website ﬁngerprinting defense problem, i.e.
the defense system
knows, in advance, the set of websites that the user may visit and
the packet traces that each website may generate. We develop an
efﬁcient dynamic program to compute a lower bound on the band-
width overhead of any ﬁngerprinting defense scheme in the closed-
world setting. We will use this algorithm to compute lower bounds
on overhead for the websites used in our evaluation (in Section 6.2).
5.1.1 Deﬁnitions
In a website ﬁngerprinting attack, the defender selects a website,
w, and uses the defense mechanism to load the website, producing
a packet trace, t, that is observed by the attacker. The attacker then
attempts to guess w.
Let W be a random variable representing the URL of the web-
site selected by the defender. The probability distribution of W
reﬂects the probability that the defender visits each website. For
each website, w, let T D
w and Tw be the random variables repre-
senting the packet trace generated by loading w with and without
defense system D, respectively. Packet traces include the time, di-
rection, and content of each packet. Since cryptographic attacks
are out of scope for this paper, we assume any encryption functions
used by the defense scheme are information-theoretically secure.
The probability distribution of T D
w captures variations in network
conditions, changes in dynamically-generated web pages, random-
ness in the browser, and randomness in the defense system. We
assume the attacker knows the distribution of W and T D
w.
w for every
In a closed world setting, the attacker’s goal is to infer W from
W . The optimal closed-world attacker, A, upon observing trace t,