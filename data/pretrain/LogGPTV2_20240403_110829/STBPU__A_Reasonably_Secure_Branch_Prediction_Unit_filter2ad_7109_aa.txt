title:STBPU: A Reasonably Secure Branch Prediction Unit
author:Tao Zhang and
Timothy Lesch and
Kenneth Koltermann and
Dmitry Evtyushkin
3
2
0
0
0
.
2
2
0
2
.
5
0
4
3
5
N
S
D
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
2
2
0
2
©
0
0
.
1
3
$
/
2
2
/
1
-
3
9
6
1
-
4
5
6
6
-
1
-
8
7
9
|
)
N
S
D
(
s
k
r
o
w
t
e
N
d
n
a
s
m
e
t
s
y
S
e
l
b
a
d
n
e
p
e
D
n
o
e
c
n
e
r
e
f
n
o
C
l
a
n
o
i
t
a
n
r
e
t
n
I
P
I
F
I
/
E
E
E
I
l
a
u
n
n
A
d
n
2
5
2
2
0
2
2022 52nd Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)
STBPU: A Reasonably Secure
Branch Prediction Unit
Tao Zhang
William & Mary
PI:EMAIL
Timothy Lesch
William & Mary
PI:EMAIL
Kenneth Koltermann
William & Mary
PI:EMAIL
Dmitry Evtyushkin
William & Mary
PI:EMAIL
Abstract—Modern processors have suffered a deluge of threats
exploiting branch instruction collisions inside the branch predic-
tion unit (BPU), from eavesdropping on secret-related branch
operations to triggering malicious speculative executions. Pro-
tecting branch predictors tends to be challenging from both
security and performance perspectives. For example, partitioning
or ﬂushing BPU can stop certain collision-based exploits but only
to a limited extent. Meanwhile, such mitigations negatively affect
branch prediction accuracy and further CPU performance. This
paper proposes Secret Token Branch Prediction Unit (STBPU),
a secure BPU design to defend against collision-based transient
execution attacks and BPU side channels while incurring minimal
performance overhead. STBPU resolves the challenges above by
customizing data representation inside BPU for each software
entity requiring isolation. In addition, to prevent an attacker from
using brute force techniques to trigger malicious branch instruc-
tion collisions, STBPU actively monitors the prediction-related
events and preemptively changes BPU data representation.
I. INTRODUCTION
Although hardware attacks such as microarchitectural side
channels [1, 3, 6, 22, 27, 41, 54, 55], covert channels [20,
25, 46, 52], and power analysis [2, 33, 45, 48, 53] attacks
have been known for a long time, only recently did re-
searchers demonstrate the true power of microarchitectural
attacks with newly discovered transient execution attacks, such
as Meltdown [39, 70] and Spectre [15, 31, 32, 34, 44, 66].
These attacks are based on speculative (transient) execution,
a performance optimization technique present in nearly all
of today’s processors. While this technique improves CPU
performance, with a carefully crafted exploit, it completely
undermines memory protection, giving unauthorized users the
ability to read arbitrary memory [32, 39], bypass crucial
protections [31] or even perform arbitrary computations [18].
Microarchitectural attacks are possible because performance
optimizations such as caches, prefetchers, and various predic-
tors were not traditionally designed with security in mind. For
example, data structures used to implement these mechanisms
are often shared, making various conﬂicts possible. Some of
these conﬂicts result in the leakage of sensitive data. One such
mechanism is the branch prediction unit (BPU). To maximize
is typically shared between hardware
BPU’s utilization,
threads;
is not ﬂushed on mode and context switches
while addresses are truncated, making it prone to various
branch collisions [17, 62]. This enables attacks such as side
channels [2, 19, 21] that are capable of leaking encryption keys
or bypassing address space layout randomization (ASLR), and
it
it
the recently introduced speculative execution attacks [31, 32].
At the same time, shared BPUs are beneﬁcial for performance.
They allow high utilization of hardware structures to reduce
the cost and enable efﬁcient branch history accumulation [50].
Therefore, na¨ıve protections which disable sharing or ﬂushing
BPU structures have high performance overhead. Recently
Intel introduced microcode updates implementing countermea-
sures against Spectre attacks [28]. While being effective at
mitigating attacks, they can impose the performance overhead
as high as 440% [56, 68].
Despite signiﬁcant efforts directed towards designing var-
ious secure microarchitectural components e.g., caches [16,
30, 40, 61, 71, 73, 74] and memory buses [4, 38, 65], secure
BPU designs remain a handful of attempts [23, 36, 72, 81].
When designing a microarchitecture security mechanism, it
is important to correctly estimate the attacker’s capabilities.
Otherwise, it risks to be defeated by more advanced attack
algorithms as was recently demonstrated with randomized
caches [9, 13, 57, 59, 69].
In this paper, we propose Secret-Token Branch Predic-
tion Unit (STBPU), a secure BPU design aimed to protect
against collision-based BPU attacks and eliminate BPU side
channels. STBPU prevents attacks by disallowing software
entities from creating controlled branch instruction collisions
and thus affecting each other in an unsafe way. This is done
by customizing the branch instruction representation for each
software entity in the form of address mappings and by
encrypting data stored in BPU. In STBPU, each software
entity is provided with a unique, randomly-generated secret
token (ST) that customizes the data representations. STBPU
detects active attacks by monitoring related hardware events
and automatically re-randomizes the ST to prevent attackers
from reverse-engineering the ST value and creating collisions.
II. BACKGROUND
A. BPU Baseline Model
A typical ISA permits the following types of branch instruc-
tions: i) Direct jumps/calls where target addresses are encoded
as an offset from the current instruction pointer and stored as
an immediate value. ii) Conditional jumps that are only taken if
a certain ﬂag in the ﬂag register is set. The target of this branch
is encoded similarly to direct jumps. iii) Indirect jumps/calls
where targets are stored in a register or in memory, and can
change throughout program execution. iv) Return instructions
2158-3927/22/$31.00 ©2022 IEEE
DOI 10.1109/DSN53405.2022.00023
109
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:28:07 UTC from IEEE Xplore.  Restrictions apply. 
Return
ip: ret (%rsp)
Indir. jump/call
ip: jmp ($addr)
Direct jump/call
ip: jmp + n
Cond. jump/call
ip: jcc + n
BHB
(cid:2)
1
(cid:2)
PHT
2
(cid:2)
3
4
BTB
taken/nontaken
b
GHR
call
ret
RSB
a
(cid:1)
5
target pred
STBPU
components:
(cid:1)
encryption
(cid:2) remapping
Fig. 1: BPU with STBPU components highlighted
are a special type of indirect jumps where the target is stored
on top of the call stack.
Below we describe a BPU baseline model that we will
utilize as a foundation to build STBPU. The baseline reﬂects
the branch predictor (including structure sizes) used in In-
tel Skylake microarchitecture. Derived from recent reverse-
engineering works [19, 21, 32, 34, 43, 78], it represents a
generalization of mechanisms used in modern Intel processors.
STBPU can be applied to other branch predictor conﬁgu-
rations and designs. This is possible because STBPU does
not interfere with underlying prediction mechanisms and only
changes the branch instruction representation inside BPU data
structures. We demonstrate this by adapting the STBPU to
protect several advanced predictors such as TAGE-SC-L [67]