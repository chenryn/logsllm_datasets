### Event Localization and Clustering in Sensor Networks

To accurately determine the location of an event, the Cluster Head (CH) must process and analyze the data from sensor nodes. One problem that can be addressed through this approach is tracking a mobile sensor node as it moves and transmits signals within the network.

#### Simplifying Assumptions
1. **Time Difference (Tout)**: Assume there is a minimum time difference of \( T_{out} \) between any two events to avoid overlapping event neighbors.
2. **Event Report Accuracy**: A correct event report from a sensing node specifies the location of an event within a radius \( r_{error} \) around the actual event.

#### Clustering Algorithm
Once \( T_{out} \) has elapsed after the first event report, let there be \( k \) other reports from nodes in the cluster. The CH performs a clustering algorithm based on K-Means to group these \( k \) event reports into clusters based on their reported locations [14]. Each cluster represents a possible location where the event could have occurred, as indicated by the reports. The goal is to minimize the sum of squares error.

**Goal**: Organize the event reports into disjoint event clusters of radius \( r_{error} \).

- Let \( C \) be the set of all event clusters, consisting of elements \( \{C_1, C_2, \ldots, C_r\} \).
- Let \( \{c_1, c_2, \ldots, c_r\} \) be the centers of the event clusters.
- Let \( d(x, y) \) denote the distance between two points \( x \) and \( y \). For any two clusters \( C_i \) and \( C_j \), \( d(c_i, c_j) > r_{error} \).
- \( C_k.cg \) (Center of Gravity) denotes the average location indicated by all event reports in cluster \( C_k \).

**Clustering Procedure**:
1. **Initialization**: Start the clustering algorithm once \( T_{out} \) has elapsed after the first event report. The set of all event reports in this time \( T_{out} \) is referred to as \( E \). Compute and sort the distances between each pair of event reports in a 2D array.
2. **Initial Clusters**: Identify the two event reports \( E_1 \) and \( E_2 \) with the greatest distance between them. Create clusters \( C_1 \) and \( C_2 \) with \( E_1 \) and \( E_2 \) as centers, and add them to \( C \).
3. **Cluster Formation**: For any event report \( E_k \) to form a separate cluster, \( d(E_k, c_i) > r_{error} \) for all \( C_i \in C \). Iterate through the set \( E \) and identify all cluster centers such that the remaining event reports are at a distance of less than \( r_{error} \) from at least one element in \( C \).
4. **Assignment and Update**: Add the remaining event reports in \( E \) to the nearest cluster in \( C \). Update the center of gravity \( C_k.cg \) for each cluster.
5. **Refinement**: If the centers of two or more clusters lie within \( r_{error} \) of each other, repeat the clustering algorithm by forming a new cluster center at the weighted average of these centers. Continue until no change in cluster constituency occurs in a new round.

The final elements in \( C \) represent the set of all events. \( C_k.cg \) represents the location of event \( k \). Event neighbors can be determined, and a decision on whether an event has occurred is made based on the trust indices of the associated nodes, as described in Section 3.1. This design effectively discards event reports from nodes that make a localization error greater than \( r_{error} \).

### Concurrent Events

In this section, we extend the previous model to handle multiple events occurring within \( T_{out} \) (referred to as concurrent events). We assume that concurrent events cannot occur closer than a distance of \( r_{error} \).

**Procedure**:
1. **First Event Report**: When the CH receives the first event report \( E_1 \), draw a symbolic circle of radius \( r_{error} \) around it and start a timer \( E_1.T_{out} \). All subsequent events within \( r_{error} \) of \( E_1 \) reported within \( T_{out} \) are added to the same circle.
2. **New Event Reports**: If any subsequent event report \( E_k \) lies outside the circle, form a new circle of radius \( r_{error} \) with \( E_k \) as its center and start a new timer \( E_k.T_{out} \).
3. **Clustering After Timer Elapse**: Once \( E_k.T_{out} \) has passed, perform the clustering algorithm on the event reports inside the circle to determine the event's location.
4. **Overlapping Circles**: If circles overlap, wait until \( T_{out} \) has elapsed for all overlapping circles. Perform the clustering algorithm on the union of all event reports in the overlapping circles to determine the event clusters and the number of actual events.

### Unreliable Cluster Heads

Although CHs are chosen based on high trust index (TI) values, they can still fail. To address this, assign two additional shadow cluster heads (SCHs) to each cluster. SCHs monitor all input and output traffic associated with the selected CH and are chosen based on having the highest TI among nodes within one hop of the CH. SCHs listen to the communication, perform all functions except transmitting aggregated event reports to the base station, and send their own computations if they detect a wrong conclusion at the CH. The base station uses a simple voting mechanism to arrive at the correct conclusion, prompts a new CH election, and reduces the TI of the faulty CH. This ensures that only a single CH failure can be tolerated.

### Simulation

The TIBFIT protocol is simulated using the ns-2 network simulator. Events are generated at regular intervals, and the event generator informs the event neighbors of the event and its location.

**Experiments**:
1. **Binary Events**: Show the accuracy of the binary event model versus the percentage of the network compromised by level 0 faulty nodes.
2. **Location Determination Model**: Show the accuracy of the location event model versus the percentage of the network compromised by level 0, 1, and 2 faulty nodes.
3. **Time-Based Analysis**: Show the accuracy of the location event model versus time, with the percentage of the network compromised increasing linearly over time.

**Experiment 1 - Binary Events**:
- **Setup**: A cluster of ten nodes, all considered event neighbors for every randomized event. Level 0 faulty nodes generate both missed alarms and false alarms.
- **Results**: The network can maintain over 85% accuracy even with 70% of its nodes compromised. Excessive false alarms lower faulty nodes' TIs, increasing system reliability.

**Experiment 2 - Location Determination Model**:
- **Setup**: 100 nodes uniformly placed on a 100x100 grid. The CH decides on the occurrence and location of the event. \( r_{error} \) is 5 units.
- **Results**: At low percentages of the network compromised, TIBFIT and the baseline system perform similarly. Beyond 40% compromise, TIBFIT outperforms the baseline by up to 20%. TIBFIT maintains accuracy near 80% even with faulty nodes having errors 70% of the time.

These results demonstrate the effectiveness of TIBFIT in handling both binary and location-based event detection in the presence of faulty nodes.