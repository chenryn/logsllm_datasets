4
5
6
7
8
9
getURL("javascript:"+var )
writeHTML(var )
eval("x = "+var +";")
eval("x = ’"+var +"’;")
eval("x = \""+var +"\";")
eval("alert("+var +")")
eval("alert(’abc = ’"+var +"’)")
eval("alert(\"abc = \""+var +"\")")
control - plain target URL
JavaScript URL
JavaScript code by itself
Contents of var
target URL
javascript:code
code
 HTML  tag injection
0; code//
’; code//
"; code//
0); code//
’); code//
"); code//
introducing closing quotes and
semicolons
introducing closing quotes,
brackets and semicolons
Figure 7: The 10 injection templates used in our implementation. Each injection template matches a certain
example occurrence of a exploitable variable in ActionScript. The injection template indicates what data
should be injected for a successful attack. The ﬁrst template is a control, where the logging URL is injected
instead of any code. The other nine inject actual JavaScript code.
nine ways in which an attacker-speciﬁed payload can ulti-
mately be injected into a JavaScript context, through ex-
ploitable variables in an SWF ﬁle. As a control, we also
use an injection template that injects no JavaScript code.
The injection templates are summarized in Figure 7. For
each of these injection templates, a separate attack URL is
constructed.
As discussed in Section 3.2, the attack URL should encode
information about entry point, attack vector and payload
type into a unique identiﬁer. The entry point is encoded by a
unique hex-encoded 256-bit number that identiﬁes the SWF
ﬁle being analyzed. The attack vector, or the exploitable
variable used to inject the payload, is encoded as an index
into the list of identiﬁed potentially exploitable variables.
Finally, the payload type is encoded as an index into the list
of nine injection templates speciﬁed earlier.
The process for building an attack URL for an example
SWF ﬁle with swfid equal to ABCDEF, an exploitable variable
abc and injection template 1 is shown in Figure 6. From the
given SWF ﬁle identiﬁer (swﬁd), injection template index
(type id) and exploitable variable index (var id), a unique
identiﬁer is constructed for this speciﬁc attack URL, by con-
catenating these three values, separated by a ’x’ character.
This unique identiﬁer is appended to the URL for the log-
server, forming the logging URL. The logging URL is then
used in a JavaScript code fragment that, when executed, will
trigger a request to the log-server, logging the unique iden-
tiﬁer. This piece of JavaScript code is then inserted into the
selected injection template, forming the payload of the at-
tack URL, in this case a simple javascript: URL. Finally,
the payload is assigned to the exploitable variable (abc in
Figure 6) in a query string of the attack URL.
4.3 Automated interaction
The ﬁnal step of FlashOver, involves passing the crafted
attack URL to a simulated victim and let that victim in-
teract with it, potentially triggering the execution of the
injected JavaScript. Based on our personal experience and
the analysis of many Flash applications, we make the as-
sumption that most interactions with Flash applications are
achieved through mouse clicks. For that reason, we only
consider this type of interaction in our prototype implemen-
tation.
The Flash application is loaded into a real Firefox browser.
The browser itself is started in Xvfb, a virtual frame-buﬀer X
server 3 and the virtual mouse attached to this Xvfb session
is controlled through the xte program 4. The Xvfb server is
set up to oﬀer a virtual frame-buﬀer of 640x480 pixels with
24-bit color to any program running inside. Firefox, running
inside Xvfb is started full-screen (so 640x480) in kiosk mode.
This means that all toolbars and menus are removed, and
undesirable functionality, like printing, is disabled.
Once Firefox has started and loaded the Flash applica-
tion, a list with 10,000 random (x,y) locations is generated
and passed to xte, which moves the mouse to those loca-
tions and issues a click. After these 10,000 clicks, the auto-
mated clicker pauses to give the Flash application time to
process the input, which could involve executing the injected
JavaScript payload.
If the execution of the injected JavaScript is triggered as
a result of one or more mouse-clicks, this will be recorded
in our logging server. The detection of the injected codes’
execution eﬀectively creates a new set of actually exploitable
variables which is a subset of the original potentially ex-
ploitable variables set, as that was generated in the ﬁrst
stage of FlashOver. The entries of the logging server can
then be used, as previously explained, to pinpoint the exact
place in the Flash application and the speciﬁc attack vector
that can be used for a XSS attack.
5. EVALUATION
We evaluated our FlashOver prototype with a large-scale
experiment to determine how many SWF ﬁles vulnerable to
XSS are hosted on the Alexa top 1,000 Internet sites [5].
5.1 Experimental setup
For each of the domains in the Alexa top 1k, a list of pub-
licly exposed SWF ﬁles was retrieved from Altavista using
the query “site:domain.com ﬁletype:swf ” where domain.com
would be a domain in our experiment.
The SWF ﬁles discovered through these queries were down-
loaded onto a local web server. Although the experiment
could have been conducted using the SWF hosted on their
original locations, we feared that it might potentially harm
the targeted site. In addition, storing the SWF locally im-
proved performance by reducing the time it took to load the
SWF ﬁle into the browser.
3http://www.xfree86.org/4.0.1/Xvfb.1.html
4http://linux.die.net/man/1/xte
After the non-SWF or otherwise invalid SWF ﬁles were
removed from the set of downloaded ﬁles, they were pro-
cessed by FlashOver. The static analysis and attack URL
construction steps of FlashOver were performed on all SWF
ﬁles in advance to reduce overhead for the entire experiment.
The ﬁnal step, using an automated clicker, was performed
in parallel on 70 dual-core computers.
Because the automated clicker clicks on random positions
on the Flash application, each run of the automated clicker
can yield diﬀerent results. To increase the odds that the
payload in the attack URLs was triggered, the entire dataset
was processed by the automated clickers 20 times. The total
experiment ran for approximately ﬁve days, approximately
six hours per run.
5.2 Results
From Altavista, 18,732 URLs were retrieved. After down-
loading, 3,800 SWF ﬁles did not contain a valid Flash ap-
plication. Of the remaining 14,932 SWF ﬁles, 35 caused
our decompiler to destabilize and crash. From the 14,897
SWF ﬁles that were decompiled successfully, 8,441 were de-
termined to have exploitable variables. For each of these
8,441 SWF ﬁles, 10 attack URLs were generated: one for
each injection template listed in Figure 7. The ﬁnal gener-
ated dataset contained a list of 84,410 attack URLs. All of
these were processed in parallel by the automated clickers.
After analysis of the log ﬁles, 523 SWF ﬁles were found to
load content from an attacker-supplied URL (i.e. URL in-
jection) and 286 SWF ﬁles allowed the execution of attacker-
supplied JavaScript code. These 286 vulnerable SWF ﬁles
can be traced back to 64 Alexa domains, of which six are in
the top 50.
Figure 8: Results from our FlashOver experiment,
shown as a cumulative plot. The amount of SWF
ﬁles per site found is divided by 10 to match the
scale of the other results.
The results of our large-scale experiment are summarized
in the cumulative plot in Figure 8. The data-points are
sorted on the x -axis, lower values indicating higher Alexa
ranking, and vice versa. Three data-points per Alexa do-
main are shown: the amount of SWF ﬁles found per domain,
divided by 10 to match scale, the amount of SWF ﬁles in
that domain vulnerable to URL injection and the amount
Variable Name
clicktag
pageurl
click
counturl
gameinfo
link1
url
link04
downloadaddress
Instances found Percentage
35.31%
33.92%
9.10%
3.50%
2.80%
2.44%
1.05%
0.70%
0.70%
101
97
26
10
8
7
3
2
2
Figure 9: Top ten most commonly-named vulnera-
ble variables found in our experiment
of SWF ﬁles vulnerable to XSS. The three distinguishable
jumps, at indices 193, 293 and 806, indicate a large amount
of vulnerable SWF ﬁles located at the Alexa domains of the
corresponding ranking.
Figure 9 shows the ten most commonly named vulnerable
variables that we discovered in our analysis. Interestingly,
the two most commonly vulnerable variables are responsi-
ble for more than 69% of all vulnerabilities found. The fact
that many diﬀerent Flash applications are vulnerable to the
same attack and through the same variables, suggests the
use of automated tools for the creation of Flash applications
that generate code in a vulnerable way. At the same time,
our results highlight the need for scanning of variables and
code-paths beyond the ones commonly associated with vul-
nerabilities.
5.3 Discussion
When one considers the number of vulnerable Flash ap-
plications found on the Internet’s top websites, it becomes
clear that XSS attacks through Flash applications are indeed
a problem. Although Adobe advocates security best prac-
tices [3], stating that user-input should be sanitized where
needed, this advice seems to be overlooked by Flash appli-
cation developers.
The required eﬀort and skill to automatically discover
these XSS vulnerabilities is limited. As discussed in Sec-
tion 4, our FlashOver prototype uses suboptimal static anal-
ysis and randomized clicking to simulate a user. For the
static analysis part, a more precise taint-analysis system
would produce better results since it could identify more
variables inﬂuenced by user-input and thus produce a longer
list of potentially exploitable variables. Moreover, a deter-
mined attacker can easily uncover additional vulnerabilities
using a manual static analysis. Likewise, the randomized
clicker is lacking the cognitive ability of an actual human
user: it does not understand typical GUI widgets that a hu-
man would click and it can not interact with e.g. a game
like a human would. This means that there may be vulner-
abilities that our clickers couldn’t trigger but that a human
victim would. Therefore, the amount of vulnerable Flash
applications detected in this experiment is a lower bound:
the actual amount of vulnerable applications is most likely
higher, making the security threat an even bigger issue.
An interesting property of FlashOver is that it detects
successful JavaScript injection by actually simulating a vic-
tim who triggers the use of the injected JavaScript code in
one or more potentially exploitable variables. Thus, while
FlashOver may miss some vulnerabilities (false negatives), it
has practically zero false positives. While one can construct
examples where FlashOver would report a false positive, e.g.
an application that is vulnerable to XSS but inspects the in-
jected payload and only allows it if it is “not dangerous”, we
believe that these are unrealistic examples and thus would
not be encountered in the analysis of real-life Flash applica-
tions.
6. ETHICAL CONSIDERATIONS
Testing the security of real websites against Cross-site
Scripting attacks may raise some ethical concerns. How-
ever, analogous to the real-world experiments conducted by
Jakobsson et al. [18, 19] and Nikiforakis et al. [29], we believe
that realistic experiments are the only way to reliably esti-
mate success rates of attacks in the real world. Moreover,
we believe that our experiments will help raise awareness
against this, usually overlooked, issue. In particular, note
that:
• All Flash applications were downloaded and exploited
locally thus no malicious traﬃc was sent towards the
live Web servers of each website
• All attacks were targeting our own simulated victim
and no real users
• We are in the process of disclosing these vulnerabilities
to all the aﬀected websites so that they may repair
them
7. RELATED WORK
Due to the large installation percentage of Adobe’s Flash
in desktop and laptop computers, Flash has been the target
of many attacks over the years. These attacks have been
targeting either implementation bugs in the Flash plugin