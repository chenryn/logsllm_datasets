[37] J. Kilian. A note on efﬁcient zero-knowledge proofs and
arguments (extended abstract). In STOC, 1992.
[38] J. Kilian. Improved efﬁcient arguments (preliminary version). In
CRYPTO, 1995.
[39] D. Malkhi, N. Nisan, B. Pinkas, and Y. Sella. Fairplay—a secure
two-party computation system. In USENIX Security, 2004.
30(4):1253–1298, 2000.
[42] M. Naehrig, K. Lauter, and V. Vaikuntanathan. Can
homomorphic encryption be practical? In ACM Workshop on
Cloud Computing Security, 2011.
[43] A. Polishchuk and D. A. Spielman. Nearly-linear size
holographic proofs. In STOC, 1994.
[44] S. Setty, A. J. Blumberg, and M. Walﬁsh. Toward practical and
unconditional veriﬁcation of remote computations. In HotOS,
2011.
[45] S. Setty, R. McPherson, A. J. Blumberg, and M. Walﬁsh.
Making argument systems for outsourced computation practical
(sometimes). In NDSS, 2012.
[46] S. Setty, V. Vu, N. Panpalia, B. Braun, A. J. Blumberg, and
M. Walﬁsh. Taking proof-based veriﬁed computation a few steps
closer to practicality (extended version). Technical Report
TR-12-14, Dept. of CS, UT Austin, June 2012.
[47] N. Smart and F. Vercauteren. Fully homomorphic SIMD
operations. Aug. 2011. Cryptology eprint 133.
[48] J. Thaler. Personal communication, June 2012.
[49] J. Thaler, M. Roberts, M. Mitzenmacher, and H. Pﬁster.
Veriﬁable computation with massively parallel interactive
proofs. In USENIX HotCloud Workshop, June 2012. Full paper
at http://arxiv.org/abs/1202.1350, Feb. 2012.
[50] C. Wang, K. Ren, J. Wang, and K. M. R. Urs. Harnessing the
cloud for securely outsourcing large-scale systems of linear
equations. In Intl. Conf. on Dist. Computing Sys. (ICDCS), 2011.
[51] D. A. Wheeler. SLOCCount.
[52] A. C.-C. Yao. How to generate and exchange secrets. In FOCS,
1986.
A Efﬁcient arguments with linear PCPs
but no linearity tests
Whereas previous work [35, 45] established that the
commitment protocol in phases 2 and 3 of PEPPER (§2.3)
binds the prover to a particular function, there were no
constraints on that function. The principal result of this
section is that the prover is actually bound to a function
that is linear, or very nearly so. As a consequence, we can
eliminate linearity testing from the PCP protocol. Fur-
thermore, the error bound from one run of this modiﬁed
PCP protocol is far stronger (lower) than was known.
This section describes the base protocols (A.1), states
the reﬁnements and proves their soundness (A.2), and de-
scribes a few other optimizations (A.3).
A.1 Base protocols
GINGER uses a linear commitment protocol that is bor-
rowed from PEPPER [45]; this protocol is depicted in Fig-
ure 12.5 As described in Section 2.3, PEPPER composes
this protocol and a linear PCP; that PCP is depicted in
Figure 13. The purpose of {γ0, γ1, γ2} in this ﬁgure is to
make a maliciously constructed oracle unlikely to pass
5Like PEPPER, GINGER veriﬁes in batches (§2.3), which changes the
protocols a bit; see [45, Appendix C] for details.
12
Commit+Multidecommit
The protocol assumes an additive homomorphic encryption scheme (Gen, Enc, Dec) over a ﬁnite ﬁeld, F.
Commit phase
Input: Prover holds a vector w ∈ Fn, which deﬁnes a linear function π : Fn → F, where π(q) = (cid:104)w, q(cid:105).
1. Veriﬁer does the following:
• Generates public and secret keys (pk, sk) ← Gen(1k), where k is a security parameter.
• Generates vector r ∈R Fn and encrypts r component-wise, so Enc(pk, r) = (Enc(pk, r1), . . . , Enc(pk, rn)).
• Sends Enc(pk, r) and pk to the prover.
2. Using the homomorphism in the encryption scheme, the prover computes e ← Enc(pk, π(r)) without learning r. The prover
sends e to the veriﬁer.
= s + α1a1 + ··· + αµaµ. If so, it outputs (a1, a2, . . . , aµ). If not, it rejects, outputting ⊥.
3. The veriﬁer computes s ← Dec(sk, e), retaining s and r.
Decommit phase
Input: the veriﬁer holds q1, . . . , qµ ∈ Fn and wants to obtain π(q1), . . . , π(qµ).
4. The veriﬁer picks µ secrets α1, . . . , αµ ∈R F and sends to the prover (q1, . . . , qµ, t), where t = r + α1q1 + ··· + αµqµ ∈ Fn.
5. The prover returns (a1, a2, . . . , aµ, b), where ai, b ∈ F. If the prover behaved, then ai = π(qi) for all i ∈ [µ], and b = π(t).
6. The veriﬁer checks: b ?
Figure 12—The commitment protocol of PEPPER [45], which generalizes a protocol of Ishai et al. [35]. q1, . . . , qµ are the PCP
queries, and n is the size of the proof encoding. The protocol is written in terms of an additive homomorphic encryption scheme, but
as stated elsewhere [35, 45], the protocol can be modiﬁed to work with a multiplicative homomorphic scheme, such as ElGamal [23].
the circuit test; to generate the {γi}, V multiplies each
constraint by a random value and collects like terms, a
process described in [5, 13, 35, 45]. The completeness
and soundness of this PCP are explained in those sources,
and our notation is borrowed from [45]. Here we just as-
sert that the soundness error of this PCP is  = (7/9)ρ;
that is, if the proof π is incorrect, the veriﬁer detects that
fact with probability greater than 1 − . To make  small,
PEPPER takes ρ = 70.
A.2 Stronger soundness analysis and consequences
GINGER retains the (P, V) argument system of PEP-
PER [45] but uses a modiﬁed PCP protocol (depicted in
Figure 14) that makes the following changes to the base
PCP protocol (Figure 13):
tors (S, R) (a sender and receiver, which correspond to
our prover and veriﬁer) in an environment E that gener-
ates F, w and Q = (q1, . . . , qµ). In the ﬁrst phase, the
commit phase, S has w, and S and R interact, based on
their random inputs. In the decommit phase, E gives Q
to R, and S and R interact again, based on further ran-
dom inputs. At the end of this second phase, R outputs
A = (a1, . . . , aµ) ∈ Fµ or ⊥. A CFMD meets the fol-
lowing properties:
• Correctness. At the end of the decommit phase, R
outputs π(qi) = (cid:104)w, qi(cid:105) (for all i), if S is honest.
• B-Binding. Consider the following experiment. The
environment E produces two (possibly distinct) µ-
tuples of queries: Q = (q1, . . . , qµ) and ˆQ =
(ˆq1, . . . , ˆqµ). R and a cheating S∗ run the commit
phase once and two independent instances of the de-
commit phase. In the two instances R presents the
queries as Q and ˆQ, respectively. We say that S∗ wins
binding if R’s outputs at the end of the respective
decommit phases are A = (a1, . . . , aµ) and ˆA =
(ˆa1, . . . , ˆaµ), and for some i, j, we have qi = ˆqj but
ai (cid:54)= ˆaj. We say that the protocol meets the B-Binding
property if for all E and for all efﬁcient S∗, the proba-
bility of S∗ winning binding is less than B. The proba-
bility is taken over three sets of independent random-
ness: the commit phase and the two runnings of the
decommit phase.
• L-Linearity. Consider the same experiment above.
We say that S∗ wins linearity if R’s outputs at the
end of the respective decommit phases are A =
(a1, . . . , aµ) and ˆA = (ˆa1, . . . , ˆaµ), and for some i, j, k,
we have ˆqk = qi + qj but ˆak (cid:54)= ai + aj. We say that
• Remove the linearity queries and tests.
• Set ρ = 1.
ment system with soundness G ≈ 6(cid:112)1/|F|. (The exact
Theorem A.1. The (P, V) described above is an argu-
value of G depends on intermediate lemmas and will be
given at the end of the section.)
We will prove this theorem at the end of this section.
To build up to the proof, we ﬁrst strengthen the deﬁni-
tion of a linear commitment primitive. We note that only
the third property (linearity) in the deﬁnition is new; the
rest is taken from [45, Appendix B], which itself heavily
borrows framing, notation, and text from Ishai et al. [35].
Deﬁnition A.1 (Commitment to a function with multi-
ple decommitments (CFMD)). Deﬁne a two-phase ex-
periment between two probabilistic polynomial time ac-
13
The linear PCP from [5]
GINGER’s PCP protocol
Loop ρ times:
• Generate linearity queries: Select q1, q2 ∈R Fs and
q4, q5 ∈R Fs2. Take q3 ← q1 + q2 and q6 ← q4 + q5.
• Generate quadratic correction queries: Select q7, q8 ∈R Fs
and q10 ∈R Fs2. Take q9 ← (q7 ⊗ q8 + q10).
• Generate circuit queries: Select q12 ∈R Fs and q14 ∈R Fs2.
Take q11 ← γ1 + q12 and q13 ← γ2 + q14.
• Issue queries. Send q1, . . . , q14 to oracle π, getting back
π(q1), . . . , π(q14).
• Linearity tests: Check that π(q1) + π(q2) = π(q3) and that
π(q4) + π(q5) = π(q6). If not, reject.
• Quadratic correction test: Check that π(q7) · π(q8) =
π(q9) − π(q10). If not, reject.
(π(q11) − π(q12)) +
• Circuit
that
(π(q13) − π(q14)) = −γ0. If not, reject.
Check
test:
If V makes it here, accept.
Figure 13—The linear PCP that PEPPER uses. It is from [5].
The notation x ⊗ y refers to the outer product of two vectors x
and y (meaning the vector or matrix consisting of all pairs of
components from the two vectors). The values {γ0, γ1, γ2} are
described brieﬂy in the text.
the protocol meets the L-linearity property if for all E
and for all efﬁcient S∗, the probability of S∗ winning
linearity is less than L. As with the prior property,
the probability is taken over three sets of independent
randomness: the commit phase and the two runnings
of the decommit phase.
Prior work proved that Commit+Multidecommit (Fig-
ure 12) meets the ﬁrst two properties above [45]. We will
now show that it also meets the third property.
Lemma A.1. Commit+Multidecommit meets the deﬁni-
tion of L-linearity, with L = 1/|F| + S, where S comes
from the semantic security of the homomorphic encryp-
tion scheme.
Proof. We will show that if S∗ can systematically cheat,
then an adversary A could use S∗ to break the semantic
security of the encryption scheme.
Let r ∈R Fn and Z1, Z2 ∈R F (we use ∈R to mean
“drawn uniformly at random from”). Semantic security
(see [30], deﬁnitions 5.2.2, 5.2.8 and Exercise 17) im-
plies that for all PPT A (A can be non-uniform),
Gen,Enc,r,Z1,Z2
Pr
 1/|F|+S.
Let q(cid:48) (cid:44) ˆqk = qi + qj.
We now describe an algorithm A that, when given
input I = (pk, Enc(pk, r), r + Z1q(cid:48), r + Z2q(cid:48)), can re-
cover Z1 with probability more than 1/|F| + S. A has
Q, ˆQ, qi, qj, i, j, k hard-wired (because it is working under
environment E) and works as follows:
(a) A gives (pk, Enc(pk, r)) to S∗ and ignores the reply.
(b) A randomly generates α1, . . . , αµ and sends to S∗
the input (Q, r+α1q1+···+(αi+Z1)qi+···+(αj+
Z1)qj +···+αµqµ). A is able to construct this input
because A was given r + Z1q(cid:48) = r + Z1qi + Z1qj. In
response, S∗ returns (b, a1, . . . , ai, . . . , aj, . . . , aµ).
(c) A randomly generates ˆα1, . . . , ˆαµ. A sends to S∗ the
input ( ˆQ, r + ˆα1ˆq1 +··· + Z2ˆqk +··· + ˆαµˆqµ). A is
able to construct this input because A was given r +
Z2q(cid:48) = r+Z2ˆqk. A gets back (ˆb, ˆa1, . . . , ˆak, . . . , ˆaµ).
At this point, A assumes that the responses from S∗
pass the decommitment phase; that is, A acts as if b =
s+α1a1+···+(αi+Z1)ai+···+(αj+Z1)aj+···+αµaµ
and ˆb = s + ˆα1ˆa1 +··· + Z2ˆak +··· + ˆαµˆaµ. A can write
K1 = Z2ˆak − Z1(ai + aj),
ι(cid:54)=k ˆαιˆaι +(cid:80)
where A can derive K1 = ˆb− b−(cid:80)
(2)
ι αιaι.
Now, let t = r + Z1q(cid:48) and let ˆt = r + Z2q(cid:48) (both of
these were supplied as input to A). These two equations
concern vectors. However, by choosing an index ι in the
vector q(cid:48) where q(cid:48) is not zero (if the vector is zero every-
where, then r is revealed), A can derive
K2 = Z2 − Z1,
(3)
where K2 = (ˆt(ι) − t(ι))/q(cid:48)(ι).
Now, observe that if ˆak (cid:54)= ai + aj (as happens when
S∗ wins), then A can recover Z1 by solving equations (2)
and (3). Thus,
Pr
{A(I) = Z1}