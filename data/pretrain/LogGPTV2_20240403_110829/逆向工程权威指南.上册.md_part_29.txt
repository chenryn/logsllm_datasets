_type$ = 8
:size= 4
工
PROC
push
ebp
mov
sub
DMORD PTR _readS[ebp], 0 
mov
DWORD PTR _write$[ebp], 0
eax, DWORD PTR _typeS [ebp]
mOV
DWORD PTR tv64[ebp] 。 eax
---
## Page 168
150
逆向工程权威指南（上册）
cnp
DMORD PTR tv64[ebp], 1 J R
Je
SHORT SIN2eE
cnp
DMORD PTR tv64[ebp] , 2 : W
Je
DWORD PTR tv64[ebp], 3 : RW
SHORT $IN3ef
cnp
Je
jnp
SHORT $LN5ef
SHORT $IN48f
$IN48f: 1 case RK:
moV
DMORD PTR _readS[ebp], 1
$IN3ef: : case W:
nov
DWORD PTR _write$[ebp], 1
$LN2ef: 1 case R:
j=p
SHORT SLNSBf
mov
DWORD PTR _readS[ebp], 1
$LN58f:
1 default
mOv
eCx, DwoRD PTR _write$[ebp]
push
edx, DWORD PTR _read$ [ebp]
Xxa
mov
push
push
OFFS8T $SG1305 : *read=Id, write=ld*
edx
ca11
add
esp,12
esP
pop
ebp
ret
ebp
ENDP
上述汇编指令与C语言源代码几乎一对应。因为在SLN4@f和SLN3@f之间没有转移指令，所以当
程序执行了SLN4@f处的“令read的值为1”的指令之后，它还会执行后面那个标签的write赋值指令。这
执行下一个陈述语句的指令（write赋值）。如果type的值为W，程序会执行SLN3@f的指令，而不会执行
前面那个read赋值指令。
13.4.2
ARM64
指令清单13.14GCC（Linaro)4.9
.LC0:
string *read=td, write=ld'n*
f:
stp
x29, x30, [sp, -48]!
str
add
v0, [x29,28]
x29, sp,0
str
str
vzr, [x29, 40]
vzr, [x29, 44]
; set "read* and *vrite" 1ocal variables to zero
1dr
￥0,[x29, 28]
load “type* argument
beq
cnp
α0, 2
-L3
1 type=W?
cnp
v0, 3
beq
: type=RMf?
v0, 1
. L4
CRp
: type=R?
beq
L6
,L5
I othervise...
.L4: ;
case
str
noV
w0,1
w0, [x29, 44]
.L3: 1
case
read=1
mov
w0, 1
str
w0, [x29,40]
: write=1
b
-L6
.L5: : case R
BOV
w0, 1
str
￥0, [x29, 44]
 read=1
---
## Page 169
第13章switch/case/default
151
L6: : default
nop
adrp
add
x0,.1C0
x0,x0,1o12:.LC0
:*read-1d, xrite=id`n*
1dr
v1, [×29, 44]
: load *read*
b1
1dr
v2,[x29, 40]
: load *vrite”
printf
1dp
x29,x30,[sp],48
ret
Arm64程序的汇编指令与MSVCx86的汇编指令大致相同。偏移器同样没有在标签.L4和标签.L3
之间分配转移指令，从而形成了SwitchO语句的fall-through效应。
13.5练习题
13.5.1题目1
13.2节有一段C语言源代码。请改写这个程序，并且在不改变程序功能的前提下，让编译器生成体积
更小的可执行程序。
---
## Page 170
第14章循
环
14.1
举例说明
14.1.1x86
x86指令集里有一条专门的LOOP指令。LOOP指令检测ECX寄存器的值是否是0，如果它不是0则
将其递减，并将操作权交给操作符所指定的标签处（即跳转）。或许是因为循环指令过于复杂的缘故，我至
今尚未见过直接使用LOOP指令将循环语句转译成汇编语句的编译器。所以，如果哪个程序直接使用LOOP
指令进行循环控制，那它很可能就是手写的汇编程序。
C/C++语言的循环控制语句主要分为forO、whileO、do/whileO语句。
我们从forO语句开始演示。
forO语句定义了循环的初始态（计数器的初始值）、循环条件（在变量满足何等条件下继续进行循环），
以及循环控制（每次循环后对变量进行什么操作，通常是递增或递减）。当然这种语句也必须声明循环体，
即每次循环时要实现什么操作。简而言之，for0语句的使用方法是：
for（初始志：循环条件：福环控制）
循环体：
根据for0语句所代表的各种功能，编译器会把forO语句在编译为4个相应的功能体。
我们一起来编译下面的程序：
#include 
void printing_function (int i)
printf (*f(kd) \n*, i)=
1:
int nain()
int i;
for (i=2; i<10; i++)
_printing_function(1))
return 0;
使用MSVC2010编译上述程序，可得到如下所示的指令。
指令清单14.1MSVC2010
_nainPROC
_i$ = -4
push
mov
dqa
ebp,esp
push
ecx
nov
DWORD PTR_i$[ebp], 2
：初始志
Jnp
SHORT $IN38main
$LN2emain:
mov
eax, DWORD PTR _IS[ebp]
：循环控制语句：
add
eax, 1
11 递增1
---
## Page 171
第14章循
环
153
nov
DWORD PTR _1$[ebp], eax
$IN3(main1
cmp
DWORD PTR _I$[ebp], 10
：判断是否满足循环条件
Jge
SHORT $LN1fmain
1如果1=10则终止循环语句
nov
ecx, DWoRD PTR _i$ [ebp]
：环体：cal1 f(i)
push
ca11
_printing_function
ecx
add
esp, 4
jmp
SHORT $IN2fmain
：跌到循环开始处
SLN18main:
：循环结束
KOT
mov
dqa *dsa
pop
ret
ebp
0
_nain
ENDP
上面的汇编代码可以说是中规中矩。
使用GCC4.4.1（未启用优化选项）编译上述程序，可得到下述汇编指令。
指令清单14.2
GCC 4.4.1
main
proc near
var_20
= dvord
ptr -20h
var_4
= dvord
ptr -4
push
ebp
mov
and
esp, OFFFFFFFOh
ebp,
dee
sub
e8p, 20h
moV
[esp+20h+var_4], 2 :(1)initializing
1oc_8048465:
J=p
short 1oc_8048476
mOV
[1e+uoz+ds] xee
mov
[esp+20h+var_20], eax
ca11
add
[esp+20h+rar_4], 1= (1] increnent
pzinting_function
loc_8048476:
crp
[esp+20h+var_4], 9
j1e
mov
eax, 0
short 1oc_8048465 ; 1f 1<=9, continue 1oop
Leave
main
retn
endp
在开启优化选项（/Ox）后，MSVC的编译结果如下。
指令清单14.3
 Optimizing MSVC
_main
PBOC
pushesi
$LL38nain1
push
ca11
_printing_function
T89
add
inc
esp,4
e81
cnp
esi, 10
：0000000aH
51
SHORT $LL38main
xor
eax, eax
pop
ret
0
e81
main
ENDP
在开启优化选项后，ESI寄存器成为了局部变量：的专用寄存器：而在通常情况下，局部变量都应当
位于栈。可见，编译器会在局部变量为数不多的情况下进行这样的优化。
---
## Page 172
154
逆向工程权威指南（上册）
进行这种优化的前提条件是：被调用方函数不应当修改局部变量专用寄存器的值。当然，在本例中编
译器能够判断函数printing_functionO不会修改ESI寄存器的值。在编译器决定给局部变量分配专用寄存器
的时候，它会在函数序言部分保存这些专用寄存器的初始状态，然后在函数尾声里还原这些寄存器的原始
值。因此，您可以在本例mainO函数的序言和尾声中分别看见PUSH ESI/POPESI指令。
现在启用GCC4.4.1的最深程度优化选项-03，看看生成的汇编指令。
指令清单14.4Optimizing GCC 4.4.1
saLn
proc near
var_10
UOT- x4d pzoxp =
push
ebp
mov
and
dqa
90.33533.30
esp
sub
esp, 10h
esp,
mov
[esp+10h+var_10], 2
ca11
printing_function
mov
[esp+10h+var_10], 3
ca11
[esp+10h+var_10], 4
printing_function
mov
ca11
mov
[esp+10h+var_10], 5
printing_function
ca11
printing_function
ca11
[esp+10h+var_10], 6
printing_function
[esp+10h+vaz_10], 7
ca11
printing_funetion
mOv
[esp+10h+var_10], 8
ca11
printing_funetion
mOv
[esp+10h+rar_10], 9
ca11
xor
printing_Cunction
leave
eax, e8x
main
ret.n
endp
GCC把我们的循环指令给展开（分解）了。
编译器会对选代次数较少的循环进行循环分解（Loopunwinding）对处理。展开循环体以后代码的执
行效率会有所提升，但是会增加程序代码的体积。
编译经验表明，展开循环体较大的循环结构并非良策。大型函数的缓存耗费的内存占有量（cache
footprint）较大。
我们把变量i的最大值调整到100，看看GCC是否还会分解循环。
指令清单14.5GCC
public main
main
proc near
var_20
= dword
ptr -20h
push
ebp
mov
and
esp, OFFFFFFF0h
ebp,
esp
push
mov
ebx, 2 : 1=2
cbx
qns
u *dsa
:zap3og o2/q-9t Aq (urboq Apoq doot) 00t8so8°oot taqet 5urubtte 1
dou
① 请参阅 Dre07,及 Int14, 3.4.1.7 节。
---
## Page 173
第14章
环
155
1oc_8048400:
: pass (i) as first argu
int to printing_functlon() :
md
[esp+20h+var_20], ebx
ebx, 1 : i++
ca11
printing_function
crp
ebx, 64h : ==100?
jnz
esp, 1ch
short 1oc_80484o0 : 1f not, continue
add
ebx
eax,
eax  return 0
pop
pop
ebp
espr
ebp
main
retn
endp
这就与MSVC2010/Ox编译出来的代码差不多了。唯一的区别是，GCC使用EBX寄存器充当变量i的
专用寄存器。因为GCC能够判断后面的被调用方函数不会修改这个专用寄存器的值，所以它才会这样分配
寄存器。在GCC不能进行相应判断，但是还决定给局部变量分配专用寄存器的时候，它就会在使用局部变量
的那个函数的序言和尾声部分漆加相应指令，利用数据栈保存和恢复专用寄存器的原始值。我们可以在mainO
函数里看到这种现象：它在函数的序言和尾声部分分别存储和恢复了局部变量专用寄存器ebx的原始值。
14.1.2x86:OllyDbg
我们启用MSVC2010的优化选项“/Ox”和“/Ob0”来编译上述程序，然后使用OllyDbg调试生成的
可执行文件。
如图14.1所示，OllyDbg能够识别简单的循环语句，并用方括号进行标注。
图14.1OllyDbg:main(函数的启动代码
我们按F8键进行单步调试，将会看到ESI寄存器的值不断递增。我们运行到ESI的值（变量i）为6的时
刻，如图14.2所示。
图 14.2 OllyDbg;(=6时的循环体
当9的时候，循环语句会做最后一次选代。进行了这次选代之后，1值变为10，不会再触发条件转
移指令JIL。main0函数结束时的情况如图14.3所示。
图 14.3 OyDbg:ESI=10 之后，循环结束
---