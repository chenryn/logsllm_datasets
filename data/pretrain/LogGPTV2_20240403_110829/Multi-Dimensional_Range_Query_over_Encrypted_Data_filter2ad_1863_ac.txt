0 /∈ Bi) ∧ (X∗
0 ∈ Bi) ∧ (X∗
0 ∈ Bi)∧(X∗
• Guess: The adversary outputs a guess b
(cid:1)
of b.
(cid:1)(cid:1)Pr[b = b
(cid:1)(cid:1).
Likewise, an adversary A’s advantage in the above game is
deﬁned as AdvA(Σ) =
(cid:1)] − 1
In this paper, we use the MR security model, i.e., we do
not protect the privacy of the attributes if an entry is matched
by the query. This security notion sufﬁces for applications
such as network audit logs, and the stock-trading application
as described in Section 8.
2
3.3 Preliminary: Bilinear Groups
A pairing is an efﬁciently computable, non-degenerate
, satisfying the bilinear property
are all groups of
function, e : G × (cid:3)G → G(cid:1)
that e(gr,(cid:3)gs) =e( g,(cid:3)g)rs. G, (cid:3)G and G(cid:1)
prime order. g, (cid:3)g and e(g,(cid:3)g) are generators of G, (cid:3)G and
paper, i.e., G = (cid:3)G.
G(cid:1)
respectively. Although our MRQED scheme can be con-
structed using asymmetric pairing, for simplicity, we describe
our scheme using symmetric pairing in the remainder of the
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:54:17 UTC from IEEE Xplore.  Restrictions apply. 
2007 IEEE Symposium on Security and Privacy(SP'07)0-7695-2848-1/07 $20.00  © 2007We name a tuple G = [p, G, G(cid:1)
, g,e] a bilinear instance,
where G and G(cid:1)
are two cyclic groups of prime order p. We
assume an efﬁcient generation algorithm that on input of a
security parameter Σ, outputs G R← Gen(Σ) where log2 p =
Θ(Σ).
We rely on the following complexity assumptions:
Decision BDH Assumption: The Decision Bilinear DH as-
sumption, ﬁrst used by Joux [32], later used by IBE sys-
tems [11], posits the hardness of the following problem:
Given [g, gz1 , gz2 , gz3, Z] ∈ G4 × G(cid:1)
, where exponents
z1, z2, z3 are picked at random from Zp, decide whether
Z = e(g, g)z1z2z3.
Decision Linear Assumption: The Decision Linear assump-
tion, ﬁrst proposed by Boneh, Boyen and Shacham for group
signatures [9], posits the hardness of the following problem:
Given [g, gz1 , gz2 , gz1z3 , gz2z4 , Z] ∈ G6, where z1, z2, z3, z4
are picked at random from Zp, decide whether Z = gz3+z4.
4 A First Step towards MRQED
In this section, we ﬁrst show a trivial construction for
MRQED which has O(T 2D) public key size, O(T 2D) en-
cryption cost and ciphertext size, O(1) decryption key size
and decryption cost. Then in Section 4.2, we show that using
AIBE, we can obtain an improved one-dimension MRQED
scheme. Henceforth, we refer to a one-dimension MRQED
scheme as MRQED1 and refer to multi-dimension MRQED
as MRQEDD. The AIBE-based MRQED1 construction has
O(1) public key size, O(log T ) encryption cost, ciphertext
size, decryption key size and decryption cost. While de-
scribing the AIBE-based MRQED1 construction, we intro-
duce some primitives and notations that will later be used
in our main construction in Section 5.
In Section 4.3, we
demonstrate that a straightforward extension of the AIBE-
based MRQED1 scheme into multiple dimensions results in
encryption cost, ciphertext size, decryption key
O
size and decryption cost. The AIBE-based MRQED1 con-
struction aids the understanding of our main construction in
Section 5. By contrast, details of the AIBE-based MRQEDD
scheme are not crucial towards the understanding of our main
construction. Therefore, we only highlight a few important
deﬁnitions and give a sketch of the scheme in Section 4.3. We
give the detailed description of the AIBE-based MRQEDD
scheme in the technical report version [43].
(log T )D
(cid:4)
(cid:5)
4.1 Trivial Construction
We ﬁrst give a trivial construction for one-dimensional
range query over encrypted data. We refer to one-dimensional
range query over encrypted data as MRQED1 where the su-
perscript represents the number of dimensions.
In the trivial MRQED1 construction, we make use of
any secure public key encryption scheme. We ﬁrst generate
O(T 2) public-private key pairs, one for each range [s, t] ⊆
[1, T ]. To encrypt a message Msg under a point x, we pro-
duce O(T 2) ciphertexts, one for each range [s, t] ⊆ [1, T ].
In particular, if x ∈ [s, t], we encrypt Msg with public key
pks,t; otherwise, we encrypt an invalid message ⊥ with pks,t.
The decryption key for any range [s, t] is then sks,t, the pri-
vate key for [s, t]. In the technical report version [43], we give
a formal description of this trivial construction.
One can extend this idea into multiple dimensions.
The resulting MRQEDD scheme requires that one encrypt
δB(Msg, X) for all hyper-rectangles B in space. Therefore,
the trivial MRQEDD scheme has O(T 2D) public key size,
O(T 2D) encryption cost and ciphertext size, O(1) decryption
key size and O(1) decryption cost.
4.2
Improved MRQED1
Based on AIBE
Construction
We show an improved MRQED construction based on
Anonymous Identity-Based Encryption (AIBE). For clarity,
we ﬁrst explain the construction for one dimension. We call
the scheme MRQED1 where the superscript denotes the num-
ber of dimensions. We note that the primitives and notations
introduced in this section will be used in our main construc-
tion.
4.2.1 Primitives: Efﬁcient Representation of Ranges
To represent ranges efﬁciently, we build a binary interval tree
over integers 1 through T .
Deﬁnition 5 (Interval tree). Let tr(T ) denote a binary inter-
val tree over integers from 1 to T . Each node in the tree has a
pre-assigned unique ID. For convenience, we deﬁne tr(T ) to
be the set of all node IDs in the tree. Each node in tr(T ) rep-
resents a range. Let cv(ID) denote the range represented by
node ID ∈ tr(T ). Deﬁne cv(ID) as the following: Let ID
be the ith leaf node, then cv(ID) =i . Otherwise, when ID
is an internal node, let ID1 and ID2 denote its child nodes,
then cv(ID) = cv(ID1) ∪ cv(ID2). In other words, cv(ID)
is the set of integers that correspond to the leaf descendants
of ID.
Given the interval tree tr(T ), we deﬁne the P(x) of IDs
covering a point x ∈ [1, T ], and the set Λ(x) of IDs repre-
senting a range [s, t] ⊆ [1, T ].
• Set of IDs covering a point x. For a point x ∈ [1, T ]
and some node ID ∈ tr(T ), we say that ID covers
the point x if x ∈ cv(ID). Deﬁne P(x) to be the
set of IDs covering point x. Clearly, P(x) is the col-
lection of nodes on the path from the root to the leaf
node representing x. As an example, in Figure 1 (a),
P(x) = {ID1, ID2, ID3, ID4}.
• Range as a collection of IDs. A range [s, t] ⊆ [1, T ]
is represented by a collection of nodes: Λ(s, t) ⊆ tr(T ).
We deﬁne Λ(s, t) to be the smallest of all subsets V ⊆
tr(T ) such that
cv(ID) = [s, t]. It is not hard
to see that for any [s, t] ⊆ [1, T ], Λ(s, t) is uniquely
deﬁned, and its size |Λ(s, t)| is at most O(log T ).
We will make use of the following properties in our AIBE-
based construction: If x ∈ [s, t], then P(x) ∩ Λ(s, t) (cid:10)= ∅; in
addition, P(x) and Λ(s, t) intersect at only one node. Other-
wise, if x /∈ [s, t], then P(x) ∩ Λ(s, t) = ∅.
(cid:6)
ID∈V
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:54:17 UTC from IEEE Xplore.  Restrictions apply. 
2007 IEEE Symposium on Security and Privacy(SP'07)0-7695-2848-1/07 $20.00  © 2007ID1
ID2
ID3
c 1
2c
1 . . .
x
ID4
. . .
T
1 . . .
x
c 3
c 4
k
IDA
k
IDB
k
IDC
. . .
T
1
. . .
3
. . .
7
T
(a) The path from a leaf to the root.
[3,7]
(b) A ciphertext and a decryption key in MRQED1.
Figure 1. An MRQED1 scheme.
(b) Encryption under the point x = 3 and the keys released for the range [3, 7].
(a) Path from the leaf node representing x ∈ [T ] to the root. P(x) ={ID 1, ID2, ID3, ID4}.
4.2.2 AIBE-Based MRQED1 Scheme
AIBE encrypts a message Msg using an identity ID as the
public key. Given the private key for ID, one can success-
fully decrypt all messages encrypted by identity ID. The
encryption scheme protects both the secrecy of the message
Msg and the identity ID in the following sense: Given ci-
phertext C, which is an encryption of Msg by identity ID0,
and given decryption keys for identities ID1, ID2, . . . , IDq
but not for ID0, a computationally bounded adversary cannot
learn anything about Msg or about ID0 from the ciphertext
C. Researchers have successfully constructed secure AIBE
schemes [15, 1] with O(1) cost in all respects: in public pa-
rameter size, encryption cost, ciphertext size, decryption key
size and decryption cost.
Given a secure AIBE scheme, we can construct an
MRQED1 scheme based on the following intuition. To en-
crypt the message Msg under point x, we encrypt Msg un-
der all IDs in P(x). To release the decryption key for a range
[s, t] ⊆ [1, T ], we release the keys for all IDs in Λ(s, t).
Now if x ∈ [s, t], then P(x)∩ Λ(s, t) (cid:10)= ∅. Suppose P(x) and
Λ(s, t) intersect at node ID. Then we can apply the decryp-
tion key at ID to the ciphertext encrypted under ID, and ob-
tain the plaintext message Msg. Otherwise, if x /∈ [s, t], then
P(x)∩Λ(s, t) = ∅. In this case, the security of the underlying
AIBE scheme ensures that a computationally bounded adver-
sary cannot learn any information about the message Msg
or the point x, except for the obvious fact (since decryption
fails) that x /∈ [s, t].
In Figure 1(b), we show a ciphertext C en-
Example.
crypted under the point x. Let L = O(log T ) denote the
height of the tree, C is composed of O(log T ) components:
{c1, c2, . . . , cL}. On the right, we show the decryption keys
for the range [3, 7]. Since [3, 7] can be represented by the set
of nodes Λ(3, 7) = {IDA, IDB, IDC}, the decryption key
for [3, 7] consists of three sub-keys, kIDA, kIDB and kIDC .
The AIBE-based construction has O(1) public key
size, O(|P(x)|) encryption cost and ciphertext size, and
O(|Λ(s, t)|) decryption key size. Since |P(x)| = O(log T ),
and |Λ(s, t)| = O(log T ), we get O(log T ) in encryption
cost, ciphertext size, and decryption key size. Later, we will
(cid:7)
(cid:8)
show that decryption can be done in O(log T ) time as well.
Stated more formally, given a secure AIBE scheme
(Σ), DeriveKey
(PK, SK, ID),
(PK, ID, Msg), Decrypt
(PK, DK, C)
∗
∗
Setup
∗
Encrypt
∗
one can construct a secure MRQED1 scheme as below:
(cid:1)
∗
cID
∗
.
(cid:9)
(PK, ID, Msg||0m(cid:1)
to message Msg ∈ {0, 1}m.
(cid:1)(cid:1)ID ∈ P(x)
(cid:10)
(cid:1)(cid:1) ID ∈ Λ(s, t)
(cid:10)
• Setup(Σ, T) calls Setup
(Σ) and outputs PK and
SK.
• Encrypt(PK, x, Msg) encrypts the message Msg
under every ID ∈ P(x).
In other words, Encrypt
yields C =
, where cID =
∗
). To check whether a
Encrypt
(cid:1)
decryption is valid, prior to encryption, we append m
trailing 0s denoted 0m(cid:1)
• DeriveKey(PK, SK, [s, t]) releases a decryption key
kID for each ID ∈ Λ(s, t).
(cid:9)
kID is computed as
kID = DeriveKey
(PK, SK, ID). The entire de-
cryption key for the range [s, t] is then the set DKs,t =
kID
• QueryDecrypt(PK, DK, C) tries each key kID ∈
DKs,t on each ciphertext cID(cid:1) ∈ C. If ID = ID
, then
∗
(PK, kID, cID(cid:1)) yields result of the form
Decrypt
(cid:1)M SG||0m(cid:1)
. In this case, we accept the result and exit
the QueryDecrypt algorithm. If all trials fail to yield
result of the form (cid:1)M SG||0m(cid:1)
, QueryDecrypt out-
puts ⊥, indicating failure to decrypt.
Note that in the AIBE-based construction, if we simply
try all decryption keys over all ciphertexts, then decryption
would require O(|P(x)| · |Λ(s, t)|) time; and since |P(x)| =
O(log T ),|Λ(s, t)| = O(log T ), decryption would require
O(log2
T ) time. However, observe that it is not necessary
(cid:1)
to try kID on cID(cid:1), if ID and ID
are at different depth in
the tree; since then, ID and ID
cannot be equal. Thus we