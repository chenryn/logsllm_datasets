4.2.1
4.2
64
来看一看Python创建PyListObject对象的过程（见代码清单41）。
代码清单4-1
初始的元素个数。需要注意，这里仅仅指定了元素的个数，并没有指定元素是什么。我们
PyObject PyList_New(int size)
受一个size参数，从而允许我们可以在创建一个PyListobject对象的同时指定该列表
一样。从这里我们实际上已然可以窥见pyListObject管理元素的策略了。
obitem=NULb意味着ob_size==allocated0
ob_size为5，而al1ocatea则为10。
元素的 PyListobject 对象已经装入了5个元素，那对于这个PyListObject对象，
[listobject.c]
中，而其中实际被使用了的内存的数量则记录在了ob_size中。假如有一个能容纳10个
时候，PyListobject总会申请一大块内存，这时申请的总内存的大小记录在allocated
由相信，用户选用列表正是为了频繁地插入或删除元素。所以，在每一次需要申请内存的
存了多少东西就申请对应大小的内存，这样的内存管理策略显然是低效的，因此我们有理
object所采用的内存管理策略和C++中vector采取的内存管理策略是一样的。它并不是
又有一个allocated，那么这两个变量之间的关系是什么呢？
allocated中则维护了当前列表中的可容纳的元素的总数。
0ob_size=size:
elaet
nbytes
//[2]：为PyListObject对象申请空间
/口1]内存数量计算，溢出检查
size_t nbytes;
PyListobject
H
1131
else
op->ob_item=NULL;
Isize
op=Pyobject_Gc New(PyuistQbject,&PyList_Type）;
1/级冲池可用
(nbytes
//缓冲池不可用
：为pyListObjecE对象中维护的元素列表申请空间
>ob_iteml=（Pyobjeot
=size
则会通过Pyobjeot_GC_New在系统堆中申请内存，创建新的PyList-
*opi
listslnum_free_listsl;
size:
0,nbytes）:
**)PyMemuMALLOC(nbytes);
4.2PyListObject对象的创建与维护
Python源码剖析
一深度探索动态语言核心技术
---
## Page 96
Python源码剖析
4.2.2
66
沌初开的第一个PyListobject对象的情形可以从图41中看到。
也就是通过PyList_New（6）来创建PyListObject对象，在ryList_New完成之后，这混
PyListObject对象，假设我们创建的PyListobject是包含6个元素的PyListobject，
单4-1的[2]处会绕过对象缓冲池，转而调用Pyobject_GC_New在系统堆上创建一个新的
的。
运行时，第一个PyListobject对象被创建时的情形。嗯，这有点像上帝创世纪，挺有趣
指向的pyListobject对象是在何时何地被创建的呢？
么这个缓冲池里的pyListobject*究竞指向什么地方呢？换句话说，这些PyListObject*
实际有一个很奇特的地方。我们看到，在free_1ists中缓存的只是pyListobject*，那
object对象，用于维护元素列表中元素数量的ob_size和al1ocated两个变量。
这里创建的PyListobject*列表，其中的每一个元素都会被初始化为NULL值。
据调用pyList_New时传递的size参数创建PyListobject对象所维护的元素列表。在
80个PyListObject对象。
GC_New想象成ma1loc即可。在Python2.5中，默认情况下，Eree_1ists中最多会维护
中，对垃圾收集机制的考察会作为单独的一章在后面讲解，这里，我们只需要将PyObject
圾收集机制做一些准备工作，不过在这里，我们还不打算深入到Pyuon的垃圾收集机制
Object对象。实际上，Pyobject_GC_New除了申请内存之外，还会为Python中的自动垃
[listobject.c]
设置元素
列位看官，花开两朵，各表一枝。我们先把这个问题放一放，看一看在Pyhon开始
在第一个PyListobject创建的时候，这时的num_free_lists是0，所以在代码清
细心的读者一定注意到了，在代码清单4-1的[2]处提及的pyListobect对象缓冲池，
完成了PyListobject 对象及其维护的列表的创建之后，Python会调整该PyList-
第4章Python中的List对象
当Pyton创建了新的PyListobject对象之后，在代码清单41的[3]处，会立即根
static
def
一深度探索动态语言核心技术
lne
Pyuistobi
MAXFREELISTS 8O
ect
ee_liStsIMAXFREELISTSl:
---
## Page 97
比如向一个新创建的PyListObject对象加入元素，
计数，将这个位置原来存放的对象的引用计数减1。这里的olditem很可能会是NULL，
Python在代码清单42的[2]处将待加入的Pyobject*指针放到指定的位置，然后调整引用
4-2的[1]处，会进行索引的有效性检查。当类型检查和索引有效性检查都顺利通过之后，
来完成这个动作。首先Pyhon会进行类型检查，在这里我们省略了。随后，在代码清单
代码清单4-2
代码清单42）。
示元素列表的变化，所以不必在意元素是否可以为NULL。
内存中的PyListObject对象中元素列表中的元素不可能是NULL。这里我们只是为了演
int PyList_SetEtem(register Pyobject opyregister int i，register Pyobject
[listobject.c]
个整数对象100放到第4个位置上去，用Python的行话来说就是1ist[3]=100（见
当我们在Python中运行1ist[3]=1o0时，在Python内部，就是调用pyList_SetItem
olditem=*p:
77[1]：索引检查
register Pyobject
需要注意的是，
Leglster
一个什么东西都没有的list当然是很无趣的，我们来尝试向里边添加一点东西，把
（（0））
recurn.-I:
range");
设置元素
当我们在Pyhon的交互式环境或者py源文件中创建一个iist时，
*newitem)
[PyListObj ect
*p:
*oldltem;
图4-1
allocated=6
ob_item
ob_size=6
ob_type
ob_refent
新创建的PyListObject 对象
®
4.2
Python源码剖析
lop)
PyListObject对象的创建与维护
"list assignment index out of
就会碰到这样的情况，所以这里必须
NULL
NULL
NULL
NULL
NULL
NULL
一深度探索动态语言核心技术
9
---
## Page 98
Python源码剖析
4.2.3
68
static int insl(PyListobject self.Py _ssize_t where.Pyobject *v)
代码清单4-3
之前的，这个地球人都知道。
[1istobject.c]
的（见代码清单4-3），我们就以图43所示的在100之前插入99为例。99确实是在100
的内存的变化。接下来会深入地剖析插入元素的动作是如何导致元素列表的内存发生变化
99）则是插入元素的动作，从图43的结果可以看到，这个插入动作确实导致了元素列表
int PyList_Insert(PyObject *op.Py_ssize_twhere,
元素和插入元素的区别：
化，而插入元素的动作则有可能使得ob_item指向的内存发生变化。图4-3中显示了设置
如图4-2所示：
使用Py_XDECREF
return insl((PyListobject *)op.where,mewitem);
其中的1st[3]=100正是我们在上一节讨论过的设置元素的动作，而1st.4nsert（3）
设置元素和插入元素的动作是不同的，设置元素不会导致ob_item指向的内存发生变
插入元素
好了，现在我们的 PyLiatobject对象再不是当年那个一穷二白的可怜虫了，其情形
第4章
一深度探索动态语言核心技术
Python中的List对象
图4-2
图43设置元素与插入元素
allocated=
obitem
ob_size=6
ob_type
ob_refcnt
lst.insert(3,
0,0,100,0,01
设置元素后的PyListObject 对象
lst
1st[3]=100
Ist
99
[0,0,0,0,0,0]
®
100,0,0]
NULL
NULL
NULL
NULL
NULL
100
Pyobject*newitem)
---
## Page 99
Pyobject*列表的大小。
能成立。仅仅从函数名我们就可以想象，这个函数一定是改变了PyListobject所维护的
static int list_resize(PyListobject|self,int mewsize)
的元素。
际上是调用了Pyhon内部的ins1。在ins1中，为了完成元素的插入工作，必须首先保
[listobject.c]
一个条件得到满足，那就是PyListobject对象必须有足够的内存来容纳我们期望插入
self->ob_item =itemsi
Intallocated =self->allocated;
Pyobject
Python内部通过调用pyList_Insert来完成元素的插入动作，而pyList_Insert实
/扩展列表
//计算重新申请的内存大小
//不需要重新申请内存
return o;
items[where]= V;
Py_INCREF(V):
for
//[2]：确定插入点
Py_ssize_t
。Pyhon通过在代码清单43的[1]处调用了1istxesize函数来保证该条件一定
[1]：调整列表容量
new_allocated=0:
(newsize
return 0:
self-
(allocated
(where>
(1iat_resize(self,n+1)==
if
(whereob_item
插入元素
where=
(where
-xobisize
**items;
**items;
n=self->obsize
0
items[i];
newsize &&
newsize:
newsize
-1
4.2
Python源码剖析
PyListObject 对象的创建与维护
(allocated >>1））：
深度探索动态语言核心技术
---
## Page 100
Python源码剖析
是非常相似的，相反，它和C++中的List却是大相径庭的。
一致。没错，正如我们前面提到的，Python中的 pyListobject对象与C++中的vector
搬移元素的工作完成，实际上也就是大功告成了，我们想插入的元素有了容身之地了。
将插入点之后的所有元素向下挪动一个位置，这样，在插入点就能空出一个位置来。一旦
插入的位置。在确定了插入的位置之后，Pyhon会在代码清单43的[3]处开始搬动元素，
须处理负数的情形。
作为对灵活性的代价，Python对插入点的确定就不能像STL中vector那样直截了当，必
特性，就是负值索引，比如一个n个元素的1ist：1st[n]，那么1st[-1]就是1st[n-1]。
单4-3的[2]处首先确定元素的插入点。Pyhon的1ist操作非常灵活，支持一个很有趣的
来收缩列表的内存空间，真是恨不得把一个字节成两个字节来用。
allocated的关系满足newsize<allcated/2的时候，Python甚至还会通过realloc
熟悉C++的读者一定看出来了，这种处理插入的方法实际上与C++中的vector完全
Python进行元素插入的动作流程如图4-4所示：
可以看到，不管你插入在什么位置，对于Pyhon来说，都是合法的，它会自己调整
将pyListobject的空间调整之后，函数ins1在实际插入元素之前还需要在代码清
可以看出，Pyhon对内存可谓是弹精竭虑了，甚至在第2种情况中，当newsize与
其他情况，调用realloc，重新分配空间。
在调整PyListobject对象所维护的列表的内存时，Python分两种情况处理：
第4章Python中的List对象