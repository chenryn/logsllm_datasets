AB
，就是有可能写出无穷递归的定义，例如cFLAGS－$(CFLAGS）-O，或者：
x
CPPFLAGS
←
CFLAGS
CC:
all:
bar = Huh?
，而把CPPFLAGS定义成一些预处理选项，
foo =
:= $(x) bar
:=
= gcc
foo
得到s(bar)
$(bar)
..........
@echo "-$(y)-"
$(CC) $(CFLAGS) $(CPPFLAGS) -C $
，缺省值是as。
-o $@
389
---
## Page 390
2.隐含规则和模式规则
RM
COMPILE.cC
COMPILE.C
LINK.cC
LINK.c
LINK.o
OUTPUT_OPTION 
TARGET_ARCH
LDFLAGS
LD
CPPFLAGS 
一页
删除命令的名字，缺省值是rm-f。
编译.cc文件的命令行，
编译.c文件的命令行，缺省值是s（CC）$（CFLAGS）$（CPPFLAGS）$（TARGET_ARCH）-c。
$（LDFLAGS）$（TARGET_ARCH）。
$(TARGET_ARCH）。
把.c文件链接在一起的命令行，缺省值是S（CC）$（CFLAGS）$（CPPFLAGS）$（LDFLAGS）
把.o文件链接在-
输出的命令行选项，缺省值是-。$@。
和目标平台相关的命令行选项，没有定义。
链接器的选项，
链接器的名字，
C预处理器的选项，
C预处理器的名字，
没有定义。
缺省值是ld。
一起的命令行，缺省值是s（CC）$（LDFLAGS）$（TARGET_ARCH）。
，缺省值是s(cc）-E。
没有定义。
，缺省值是S（CXX）$(CXXFLAGS）$(CPPFLAGS）$（TARGET_ARCH）-C。
全国嵌入式人才培训基地
起始页
上一级
4.自动处理头文件的依赖关系
390
下三
---
## Page 391
接下来的问题是怎么把这些规则包含到Makefile中，GNU make的官方手册建议这样写:
-M选项把stdio.h以及它所包含的系统头文件也找出来了，如果我们不需要输出系统头文件的依赖
4.自动处理头文件的依赖关系 请点评
关系，
系
修改Makefile的规则。为了解决这个问题，
另一个头文件中，
的规则时要查看源代码，
按照惯例，
现在我们的Makefile写成这样:
上一页
，可以用-MM选项：
stack.o: stack.c stack.h main.h
main.o: main.c main.h stack.h maze.h
main.h
maln
s
.PHONY: clean
clean:
maze.o: maze.h main.h
stack.o: stack.h main.h
main.o: main.h stack.h maze.h
main: main.o stack.o maze.o
all: main
 gcc -M main.c
 stack.h maze.h
/usr/lib/gcc/i486-1inux-gnu/4.3.2/include/stdarg.h \
/usr/include/gnu/stubs.h
，用al1做缺省目标。现在还有一点比较麻烦，
/usr/include/bits/stdio_lim.h 
/usr/include/bits/types.h
usr/
 在写规则时很容易遗漏，
-rm main *.o
找出它们依赖于哪些头文件,
/i486-
/usr/include/stdio.h /usr/include/features.h \
4.自动处理头文件的依赖关系
第22章Makefile基础
全国嵌入式人才培训基地
 /usr/include/bits/typesizes.h.>
可以用gcc的-m选项自动生成目标文件和源文件的依赖关
二是如果以后修改源代码改变了依赖关系，
 /usr/include/bits/sys_errlist.h
这很容易出错，
一是因为有的头文件包含在
很可能忘记
.3
---
## Page 392
和Makefile，运行make的结果是：
类似于C语言的#include指示，
量中每一项的.c替换成.d，所以include这-
sources变量包含我们要编译的所有.e文件,
一开始找不到.a文件,
，而这些目标适用模式规则.d：%℃，
Makerial!
maze.d;
set -e; rm -f maze.d;
 gcc main.o stack.o maze.o
set -e; rm
set -e; rm -f maze.d;
Makefile:13: main.d: No such file or directory
include main.d stack.d maze.d
main: main.o stack.o maze.o
all: main
main.d; 
stack.d;
set -e; 1
maze.d; 
S
%.d: %.c
include
sources
.PHONY: clean 
clean:
 make
-c -o maze.o maze.c
-c
rm
sed
cc
rm -f main.d.$$
sed 
rm
sed
cc
sed
 set -e; rm -f $@; \
 $(sources:.c=.d)
 = main.c stack.c maze.c
-rm main *.0
、$ 056 
rm
rm
rm -f 
-o
 -0 main.o main.c
 -f maze.d.$$
-f
 -MM
-MM
所以make会报警告。
's,\(main\)\.o[
 stack.d.$$
 maze.d.$$
 stack.d:
 main.d;
 stack.d;
MM
-o $@
maze.c
main.c
stack.
maze.c
C
 No such
\.o[ :]*
main.d.$$;
-o main
 stack.d.$$;
所以执行它的命令列表，比如生成maze.a的命令：
[ :]*,\i.o main.d : ,g' 
但是make会把include的文件名也当作目标来尝试更
，$(sources:.c=.d)是一个变量替换语法，把sources变
一句相当于：
 maze.d : ,g' 
,directory
只有.c文件、.h文件
3
---
## Page 393
2、由于main.d被Makefle包含，main.d被更新又导致make重新读取整个Makefile，把新的main.d包
因此main.a的内容被更新为main.o main.d：main.c main.h stack.h maze.h foo.h。
则
成main.o和main.d。生成main.o的规则有两条：
如果我在main.c中加了-
条规则：
读取整个Makefile以及被它包含的所有文件，
不管是Makefile本身还是被它包含的文件,
骤为：
条命令，这条命令分为5个子命令，用；号隔开，并且为了美观，用续行符\拆成四行来写。执行步
1、main.c的修改日期变了，
5.1
4.
2．把原来的maze.a删掉。
1． set-e命令设置当前Shell进程为这样的状态：如果它执行的任何一条命令的退出状态非零则
，
意
因此执行cc命令重新编译main.o。生成main.a的规则也有两条
最后把临时文件maze.d.1234删掉。
maze.c maze.h main.ho
这个sed命令比较复杂，
以保证文件名唯一。
四个$传给Shell变成两个$，
重新生成maze.c的依赖关系,
立刻终止，不再执行后续命令。
意
虽然在Makefile中这个命令写了四行，
main.d: main.c main.h stack.h maze.h
#
%.○：
main.o: main.c main.h stack.h maze.h
main.o main.d: main.c main.h stack.h maze.h
，在Makefile中s有特殊含义，
sed
$(COMPILE.C）
'S!
 $@.$$$$
-MM
，就不细讲了
，两个$在Shell中表示当前进程的id，
保存成文件maze.d.1234（假设当前Shell进程的id是1234）。
，如果要表示它的字面意思则需要写两个$，所以Makefile中的
，经过sed处理之后存为maze.d，其内容是maze.o maze.d:
 main.h
只要有一个文件在make过程中被更新了，
主要作用是查找替换。maze.d.1234的内容应该
，但其实是一条命令，make只创建一个Shell进程执行这
一般用它给临时文件起名，
，make就会重新
，就可以正常
393
三
注
---
## Page 394
3.变量
含进来，
一页
于是新的依赖关系生效了。
全国嵌入式人才培训基地
起始页
上一级
5.常用的make命令行选项
---
## Page 395
如果在Makefile中也定义了cFLAGs变量，则命令行的值覆盖Makefile中的值。
g选项，可以在命令行定义cFLAGS变量，
的Makefile（假设我们的源代码都放在testmake目录下）：
确，由于Makefle不是顺序执行的，用这个选项可以先看看命令的执行顺序，确认无误了再真正执
5.常用的make命令行选项 请点评
在make命令行也可以用=或:=定义变量,
都写一个该目录的Makefile，
-c选项可以切换到另一个目录执行那个目录下的Makefile，
行命令。
-n选项只打印要执行的命令，
．自动处理头文件的依赖关系
-些规模较大的项目会把不同的模块或子系统的源代码放在不同的子目录中，然后在每个子目录下
上一页
一页
gcc
cc
make:
gcc main.o stack.o maze.o,
CC
cc
CC
S
 make_-C testmake 
cd.
-g
 main.o
-g
6
.........
-c
C
-α
-0
-0
-0
 stack.o
 maze.o maze.c
stack.o stack.c
directory 
 然后在一个总的Makefile中用make-c命令执行每个子目录下
，而不会真的执行命令，
 stack.c
5.常用的make命令行选项
- /home/akaedu/testmake
全国嵌入式人才培训基地
，而不必修改Makefile编译完了再改回来：
/home/akaedu/testmake
 -0 main 
第22章Makefile基础
如果这次编译我想加调试选项-g,
全国嵌入式人才培训基地
起始页
一级
，这个选项有助于我们检查Makefile写得是否正
子目录fs、net等也有各自的Makefile,
，比如先退到上一级目录再执行我们
，但我不想每次编译都加-
第 23章指针
下一页
下一