    如果您正在公开发布`guestbook`图表，那么您的图表用户可以将该密钥保存到可下载的位置，例如 Keybase。然后，用户可以通过利用本章*验证 Helm 版本*一节中描述的`gpg --import`命令来导入该公钥。
    图表用户可以在安装前利用`helm verify`命令验证图表的数据来源和完整性。该命令旨在针对本地下载的`.tgz`图表档案和`.tgz.prov`来源文件运行。
5.  The following command provides an example of running this process against the `guestbook` Helm chart and assumes that your public key has been imported to a keyring called `~/.gnupg/pubring.gpg`:
    ```
    $ helm verify --keyring ~/.gnupg/pubring.gpg guestbook-1.0.0.tgz
    ```
    如果验证成功，将不显示任何输出。否则，将返回一条错误消息。验证可能因各种原因而失败，包括以下原因:
    那个。tgz 和. tgz.prov 文件不在同一目录中。
    . tgz.prov 文件已损坏。
    文件哈希不匹配，表明完整性丧失。
    用于解密签名的公钥与最初用于加密签名的私钥不匹配。
`helm verify`命令是设计用于在本地下载的图表上运行，因此用户可能会发现更好的方法是利用`helm install --verify`命令，该命令在一个命令中执行验证和安装，假设`.tgz`和`.tgz.prov`文件都可以从图表存储库中下载。
以下命令描述了如何使用`helm install --verify`命令:
```
$ helm install my-guestbook $CHART_REPO/guestbook --verify --keyring ~/.gnupg/pubring.gpg
```
通过使用本节中描述的方法来签名和验证 Helm 图表，您和您的用户都可以确保您正在安装的图表都属于您，并且没有被更改。
了解了数据来源和完整性如何在 Helm 中发挥作用后，让我们继续讨论 Helm 安全性考虑事项，进入下一个主题——与 Helm 图表和 He lm 图表开发相关的安全性。
# 开发安全的舵角图
虽然出处和完整性在 Helm 的安全性中起着主要作用，但它们不是您需要考虑的唯一问题。图表开发人员应该确保，在开发过程中，他们遵循有关安全性的最佳实践，以防止用户在 Kubernetes 集群中安装图表时引入漏洞。在本节中，我们将讨论与 Helm 图表开发相关的许多主要安全问题，以及作为开发人员，您可以做些什么来将安全作为首要任务来编写 Helm 图表。
我们将首先讨论我们的 Helm 图表可能使用的任何容器映像的安全性。
## 使用安全映像
由于 Helm(和 Kubernetes)的目标是部署容器映像，因此映像本身是一个主要的安全问题。首先，图表开发人员应该知道映像标签和映像摘要之间的区别。
标签是对给定映像的人类可读引用，为开发者和消费者提供了一种确定映像内容的简单方法。但是，标签可能会带来安全问题，因为无法保证给定标签的内容始终保持不变。映像所有者可以选择使用相同的标签来提供更新的映像，例如，为了解决安全漏洞，这将导致在运行时执行不同的底层映像，即使标签是相同的。对同一个标签执行这些修改会引入回归的可能性，这会给用户带来意想不到的负面影响。映像也可以通过摘要来引用，而不是通过标签来引用。映像摘要是映像的计算 SHA-256 值，它不仅为精确的映像提供不可变的标识符，还允许容器运行时验证从远程映像注册表检索的映像包含预期内容。这消除了部署包含针对给定标签的意外回归的映像的风险，也消除了中间人攻击的风险，在中间人攻击中，标签的内容被恶意修改。
例如，在图表模板中，不要将映像引用为`quay.io/bitnami/redis:5.0.9`，而是可以通过摘要将其引用为`quay.io/bitnami/redissha256:70b816f2127afb5d4af7ec9d6e8636b2f0f 973a3cd8dda7032f9dcffa38ba11f`。请注意，映像名称后面没有标签，而是明确指定了 SHA-256 摘要。这可以确保映像内容不会随着时间的推移而改变，即使标签发生了变化，从而增强您的安全态势。
随着时间的推移，您可能会认为与映像相关联的标签或摘要在部署时变得不安全，因为漏洞最终可能会针对该映像可能包含的包或操作系统版本发布。有许多不同的方法可以确定与给定映像相关的漏洞。一种方法是利用映像所属的注册表的本机功能。许多不同的映像注册中心都包含映像漏洞扫描功能，有助于了解映像何时易受攻击。
例如，Docker 容器登记处可以以指定的时间间隔自动扫描映像，以确定映像包含的漏洞数量。Nexus 和 Artifactory 容器注册中心也是具有这种能力的容器注册中心的例子。除了容器注册中心提供的本地扫描功能之外，还可以利用其他工具，如 Clair(也是 **Quay** 的后备扫描技术)、Anchore、Vuls 和 OpenSCAP。当您的映像注册表或独立扫描工具报告某个映像易受攻击时，您应该立即将图表的映像更新到较新的版本(如果可用)，以防止漏洞被引入用户的 Kubernetes 集群。
为了帮助简化更新容器映像的过程，您可以开发一个定期检查映像更新的节奏。这有助于防止您的目标映像包含不适合部署的漏洞。许多团队和组织还规定映像只能来自可信的注册中心，以减少运行包含漏洞的映像的可能性。此设置是在容器运行时级别配置的，位置和特定配置因每个运行时而异。
除了映像漏洞扫描和内容来源，您还应该避免部署需要更高权限或能力的映像。功能用于给进程一个根权限子集。功能的一些例子是`NET_ADMIN`，它允许进程执行与网络相关的操作，以及`SYS_TIME`，它允许进程修改系统时钟。以根用户身份运行容器可以让容器访问所有的功能，只要有可能，就应该对这些功能进行限制。功能列表可以在 Linux 手册页的*Capabilities(7)*pa[ge(http://man7.org/linux/man-](http://man7.org/linux/man-pages/man7/capabilities.7.html)页/手册 7/capabilities.7.html)中找到。
授予容器能力或允许它以 root 身份运行，会让恶意进程更容易损坏底层主机。这不仅会影响引入漏洞的容器，还会影响在该主机上运行的任何其他容器，并可能影响整个 Kubernetes 集群。如果一个容器确实存在漏洞，但是没有任何被授予的能力，那么攻击向量就会小得多，并且有可能被完全阻止。开发 Helm 图表时，必须同时考虑映像的漏洞和权限要求，以确保您的用户以及 Kubernetes 集群的其他租户的安全。
除了部署的容器映像之外，图表开发人员还应该关注授予应用的资源。我们将在下一节深入探讨这个话题。
设置资源限制
pod 使用属于其底层节点的资源。如果没有适当的默认值，pod 可能会耗尽`node of resources`，导致 CPU 节流和 pod 驱逐等问题。耗尽底层节点也将阻止在那里调度其他工作负载。由于资源限制未被检查时可能出现的问题，图表开发人员应该关心在他们的 Helm 图表或 Kubernetes 集群中设置合理的默认值。
许多图表允许将部署`resources`字段声明为 Helm 值。图表开发人员可以默认`values.yaml`文件中的`resources`字段，设置开发人员认为应用应该需要的资源量。下面的代码显示了一个这样的例子:
```
resources:
  limits:
    cpu: 500m
    memory: 2Gi
```
如果保留默认值，该示例值将用于将 pod 的 CPU 限制设置为`500m`，将内存限制设置为`2Gi`。在`values.yaml`文件中设置此默认值可防止 pod 耗尽节点资源，同时还可为所需的应用资源量提供建议值。如果需要，用户可以选择覆盖资源限制。请注意，图表开发人员也可以为资源请求设置默认值，但这不会阻止 pod 耗尽节点资源。
虽然您应该考虑在`values.yaml`文件中设置默认资源限制，但您也可以在图表将安装的 Kubernetes 命名空间中设置限制范围和资源配额。这些资源通常不包含在 Helm 图表中，而是由集群管理员在应用部署之前创建的。限制范围用于确定允许容器在命名空间内使用的资源数量。限制范围还用于为部署到尚未定义资源限制的命名空间的每个容器设置默认资源限制。以下是由`LimitRange`对象定义的限制范围示例:
```
apiVersion: v1
kind: LimitRange
metadata:
  name: limits-per-container
spec:
  limits:
    - max:
        cpu: 1
        memory: 4Gi
      default:
        cpu: 500m
        memory: 2Gi
      type: Container
```
`LimitRange`在创建`LimitRange`对象的命名空间中实施指定的限制。它将允许的最大容器资源量设置为`cpu`的`1`核心和`memory`的`4Gi`。如果未定义资源限制，则自动将资源限制设置为`cpu`的`500m`和`memory`的`2Gi`。通过将`type`字段设置为`Pod`，也可以在 pod 级别应用限制范围。这将确保 pod 中所有容器的资源利用率总和低于指定的限制。除了针对 CPU 和内存利用率设置限制之外，您还可以通过将`type`字段设置为`PersistentVolumeClaim`来设置`LimitRange`对象默认为`PersistentVolumeClaim`对象所要求的存储。
这将允许您创建以下资源来设置单个聚氯乙烯的存储限制:
```
apiVersion: v1
kind: LimitRange
metadata:
  name: limits-per-pvc
spec:
  - max:
      storage: 4Gi
    type: PersistentVolumeClaim
```
当然，您也可以在 Helm 图表的`values.yaml`文件中设置默认存储量。`values.yaml`文件中的默认设置反映了您认为默认安装所需的存储量，`LimitRange`对象强制用户可以覆盖的绝对最大值。
除了限制范围之外，您还可以设置资源配额，以针对命名空间的资源使用添加其他限制。虽然限制范围在每个容器、容器或聚氯乙烯级别实施资源，但资源配额在每个命名空间级别实施资源使用。它们用于定义命名空间可以利用的最大资源数量。以下是资源配额示例:
```
apiVersion: v1
kind: ResourceQuota
metadata:
  name: pod-and-pvc-quota
spec:
  hard:
    limits.cpu: '4'
    limits.memory: 8Gi
    requests.storage: 20Gi
```
前面的`ResourceQuota`对象在应用到 Kubernetes 命名空间时，将最大 CPU 利用率设置为`4`内核，最大内存利用率设置为`8Gi`，将最大存储请求设置为`20Gi`，以获取命名空间中所有工作负载的总和。资源配额也可用于设置每个名称空间的最大`secrets`、`ConfigMaps`和其他 Kubernetes 资源量。通过使用`resource quotas`，可以防止单个命名空间过度利用集群资源。
通过在您的 Helm 图表中设置合理的默认资源限制，以及`LimitRange`和`ResourceQuota`的存在，您可以确保您的 Helm 图表的用户不会耗尽集群资源并导致中断或中断。了解了如何实施资源限制后，让我们进入下一个关于 Helm 图表安全性的话题——汉在 Helm 图表中掌握机密。
## 在舵手图中处理机密
处理机密是使用 Helm 图表时的常见问题。考虑一下 [*第 3 章*](03.html#_idTextAnchor147)*中的 WordPress 应用安装您的第一个 Helm 图*，其中您需要提供密码来配置管理员用户。在`values.yaml`文件中默认不提供该密码，因为如果您忘记覆盖`password`值，这将使应用易受攻击。图表开发人员应该习惯于不为密码等机密值提供默认值，而是应该要求用户提供一个显式值。这可以通过利用`required`功能轻松实现。Helm 还具有使用`randAlphaNum`功能生成随机字符串的能力。
但是，请注意，每当图表升级时，此函数都会生成一个新的随机字符串。因此，开发人员在设计图表时，应期望用户提供自己的密码或其他密钥，以`required`功能作为确保提供值的大门。
当用户在图表安装过程中提供一个机密时，该值应该保存在`secret`中，而不是`ConfigMap`中。配置映射以纯文本显示值，不包含凭据或其他机密值。另一方面，机密通过对其内容进行 Base64 编码来提供混淆。机密也允许将它的内容作为`tmpfs`挂载到一个容器中，这意味着内容被挂载到易失性存储器中的容器中，而不是磁盘上。作为图表开发人员，您应该确保由 Helm 图表管理的所有凭据和机密配置都是使用 Kubernetes Secrets 创建的。
虽然图表开发人员应确保使用 Kubernetes Secrets 和`required`函数适当处理机密，但图表用户应确保像凭据这样的机密被安全地提供给 Helm 图表。最常见的是将值提供给带有`--values`标志的 Helm 图表，其中附加值或覆盖值在单独的`values`文件中声明，并在安装过程中传递给 Helm CLI。在使用常规值时，这是一种合适的方法，但是在使用机密值时，应该小心谨慎。用户应确保包含机密的`values`文件不会被检入`git`存储库或其他可能暴露机密的公共场所。用户可以避免暴露机密的一种方法是利用`--set`标志从他们的本地命令行内联传递机密。这降低了凭据被暴露的风险，但是用户应该知道这将暴露 bash 历史中的凭据。
用户可以避免暴露机密的另一种方法是利用加密工具对包含机密的`values`文件进行加密。这将继续允许用户应用`--values`标志并将`values`文件推送到远程位置，例如 git 存储库。`values`文件只能由拥有适当密钥的用户解密，并对所有其他用户保持加密，只允许可信成员访问数据。用户可以简单地利用 GPG 对`values`文件进行加密，也可以利用 **Sops** 等阿格专用工具。**Sops**(https://github.com/mozilla/sops)是一个工具，旨在加密 YAML 或 JSON 文件的值，但不加密密钥。以下代码显示了 Sops 加密文件中的密钥/值对:
```
password:ENC[AES256GCM,data:xhdUx7DVUG8bitGnqjGvPMygpw==,iv:3LR9KcttchCvZNpRKqE5LcXRyWD1I00v2kEAIl1ttco=,tag:9HEwxhT9s1pxo9lg19wyNg==,type:str]
```
请注意`password`密钥是如何未加密的，但值是如何加密的。这使您可以轻松地查看文件中包含什么类型的值，而不会暴露它们的机密。
还有其他工具能够加密包含 se [密码的`values`文件。例如`git-`](https://github.com/AGWA/git-crypt)`crypt`([https://github.com/AGWA/git-crypt](https://github.com/AGWA/git-crypt))和`blackbox`([https://github.com/StackExchange/blackbox](https://github.com/StackExchange/blackbox))。此外，哈希公司的`Vault`或赛博方舟幻化等工具可用于加密密钥/值存储形式的机密。然后，可以通过向机密管理系统进行认证来检索机密，然后通过将它们传递给`--set`，在 Helm 中利用它们。
了解了安全性在 Helm 图表开发中的作用后，现在让我们讨论如何在 Kubernetes 中应用**基于角色的访问控制**(**【RBAC】**)来为您的用户提供更高的安全性。