grj,x ,
Brj,x , otherwise.
Tj,x =
For j ∈ U∗, x ∈ ΣTu ,
(cid:189)
(cid:189)
Phase 1 A adaptively makes query for a secret key related
with an attribute set γ such that T ∗(γ) = 0. To generate the
secret key, S needs to assign a polynomial qx for every non-
leaf node in T and outputs a piece of secret key according
to each non-leaf node.
With an attribute set γ as input, for any node x ∈ Tu, we
call a node x: a unsatisﬁed node iﬀ there exists a unsatisﬁed
node x(cid:48) in T ∗ such that map(x(cid:48)) = x; a satisﬁed node iﬀ
there exists a satisﬁed node x(cid:48) in T ∗ such that map(x(cid:48)) = x;
a non-mapped node iﬀ there exists no node x(cid:48) in T ∗ so that
map(x(cid:48)) = x. We deﬁne the following three procedures:
PolyUnsat, PolySat and PolyNotCare.
For j ∈ γ,
Dj,x =
For j ∈ U∗,
 g
 g
g
qx(j)
rj,x ,
bqx(j)
rj,x = B
bqx(j)
brj,x = (gqx(j))
if f (j, x(cid:48)) = 1
1
rj,x , otherwise.
D∗
j,x =
qx(j)
r∗
j,x ,
bqx(j)
r∗
j,x = B
bqx(j)
br∗
if j ∈ ωx(cid:48) ;
1
r∗
j,x , otherwise.
Then, for each non-leaf child node z of x in Tu,
If z is a non-mapped node,
j,x = (gqx(j))
g
If z is a satisﬁed node,
PolyNotCare(Tz, γ, gqx(index(z)));
PolySat(Tz, γ, qx(index(z)));
PolyUnsat(Tz, γ, gqx(index(z))).
If z is a unsatisﬁed node,
Figure 5: PolyUnsat(Tx, γ, gλx )
PolyUnsat(Tx, γ, gλx ) for a unsatisﬁed node x ∈ ΣT is de-
ﬁned as follows:
This procedure generates a polynomial qx for a unsatisﬁed
node x. We have a unsatisﬁed node x(cid:48) such that map(x(cid:48)) =
x. γ does not satisfy this access tree T ∗
x(cid:48) (γ) = 0,
where T ∗
x(cid:48) is a subtree of T ∗. λx is an integer from Zp. The
unsatisﬁed root node x(cid:48) have at most kx(cid:48) − 1 satisﬁed child
node. Thus, it could implicitly sets qx(0) = λx, and chooses
c − 1 other points at random to completely ﬁx qx, including
x(cid:48) , noted as T ∗
348j,map(x)}j∈ωx,x∈ΣT ∗(cid:105)
Challenge The adversary A will submit two challenge mes-
sages m0 and m1 to S. Then, S chooses µ ∈ {0, 1} at ran-
dom, and returns an encryption of mµ under the challenge
access tree T ∗. The challenge ciphertext E is formed as:
(cid:104)T ∗, E(cid:48) = mµ · Z,{Ej,x = C rj,map(x)}j∈U,x∈ΣT ∗ ,f (j,x)=1,
j,x = C r∗
{E∗
If (g, A, B, C, Z) ∈ Dbdh and we let s = c, then we have
Y s = e(g, g)abc and Ej,x = C rj,map(x) = (grj,map(x) )s, E∗
j,x =
C r∗
j,map(x) = (gr∗
j,map(x) )s. Therefore, the ciphertext is a
valid random encryption of message mµ
Otherwise, if (g, A, B, C, Z) ∈ Drand, we have E(cid:48) = mµ·Z.
Since Z is randomly chosen from GT , E(cid:48) will be a random
element of GT from the adversary’s view and the ciphertext
contains no information about mµ.
Phase 2 The simulator S acts exactly as it did in Phase
1.
Guess S outputs ν(cid:48) = 1 to indicate that it was given a
tuple from Dbdh if A gives a correct guess µ(cid:48) = µ; otherwise
output ν(cid:48) = 0 to indicate that it was given a tuple from
Drand.
Let us compute the success probability of S:
In the case of ν = 0 the adversary gains no information
about µ. Therefore, we have Pr[µ (cid:54)= µ(cid:48)|ν = 0] = 1
2 . Since
the simulator guesses ν(cid:48) = 0 when µ (cid:54)= µ(cid:48), we have Pr[ν(cid:48) =
ν|ν = 0] = Pr[ν(cid:48) = 0|ν = 0] = 1
2 .
In the case of ν = 1, the adversary gets a valid ciphertext
of mµ. By deﬁnition, the adversary has ε to guess the correct
µ(cid:48), and thus Pr[µ = µ(cid:48)|ν = 1] = 1
2 + ε. Since the simulator
guesses ν(cid:48) = 1 when µ = µ(cid:48), we have Pr[ν(cid:48) = ν|ν = 1] =
Pr[ν(cid:48) = 1|ν = 1] = 1
ν(cid:48) = ν is Pr[ν = ν(cid:48)] − 1
2 · ( 1
1] − 1
The overall advantage of the simulator to output a correct
2 = Pr[ν = ν(cid:48), ν = 0] + Pr[ν = ν(cid:48), ν =
2 + ε) − 1
2 · 1
2 = 1
2 = ε
2
2 + 1
2 + ε.
5. BCPABE SCHEME BCP2 WITH CHOSEN
CIPHERTEXT SECURITY
5.1 Extended BCPABE scheme BCP2
Now, by using one-time signature technique introduced in
Section 2.3, we presented an extended scheme BCP2 achieving
chosen ciphertext security.
The selective-tree CCA model was introduced in Section
3.2 and the similar security model can be found in [6].
We assume that there exist a bounded ciphertext pol-
icy attribute based encryption scheme BCP1 secure in the
selective-tree CPA model as presented in Section 3.2, includ-
ing four algorithms (BCP1.Setup, BCP1.KGen, BCP1.Enc,
BCP1.Dec) and a secure one-time signature ots including
three algorithms (ots.KGen, ots.Sig, ots.Ver).
Assume that the veriﬁcation key vk from ots is a bit string
of length l, and we write vki for the i-th bit in vk. Let L
denote {1, 2,··· , l}. BCP2 constructed based on BCP1 and
ots including the following algorithms:
Setup(d, c) This algorithm takes two system parameters
(d, c) as its input. Then, it calls BCP1.Setup(d, c) to gen-
erate BCP1’s public parameter PP1 and master key MK1. In
addition, it randomly chooses a set {t(cid:48)
i}i∈{1,··· ,2l} from Zp
and deﬁnes T (cid:48)
i . Now, it outputs the public param-
i = gt(cid:48)
eter PP = (cid:104)PP1,{T (cid:48)
MK = (cid:104)MK1,{t(cid:48)
i}i∈{1,··· ,2l}(cid:105) to itself.
i}i∈{1,··· ,2l}(cid:105) and keeps the master key
KGen(γ, MK) This algorithm takes an attribute set γ and
the master key MK as its input. Then, it randomly chooses
r(cid:48) from Zp and calls BCP1.KGen(γ, MK1) to generate a
user’s secret key D1 by using r(cid:48) instead of y in MK1 (i.e.
ri
qr(0) = r(cid:48)). For every i ∈ L, let Di,0 = g
t(cid:48)
(cid:80)
i and Di,1 =
ri
t(cid:48)
l+i , where {ri}i∈L are randomly chosen from Zp. Deﬁne
g
r = r(cid:48) +
i∈L ri and let ˆD = gy−r. Finally, it outputs
D = (cid:104)D1,{Di,0, Di,1}i∈L, ˆD(cid:105).
Enc(m, PP,T ) This algorithm takes a message m, the pub-
lic parameter PP and a (d, c)-bounded access tree T as its
input.
It ﬁrst calls BCP1.Enc(m, PP1,T ) and obtains a partial
ciphertext E1. Then, a key pair (cid:104)sk, vk(cid:105) is obtained by run-
ning ots.KGen. For each i ∈ L, it sets E(cid:48)
if vki = 0;
E(cid:48)
i = T (cid:48)s
l+i otherwise. Let ˆE = gs. 5 It runs ots.Sig with
input (sk,(cid:104)E1,{E(cid:48)
i}i∈L, ˆE(cid:105) and obtain σ.
The output ciphertext E = (cid:104)E1,{E(cid:48)
i}i∈L, ˆE, σ, vk(cid:105).
i = T (cid:48)s
i
Dec(D, E) This algorithm takes a secret key D and a ci-
phertext E as its input.
It ﬁrst checks if σ is a valid signature on message (cid:104)E1,{E(cid:48)
ˆE(cid:105) using vk. If valid, it proceeds the following; otherwise,
output ⊥.
quently decrypts e(g, g)sr(cid:48)
It separates D1 and E1 from tuple (D, E) and conse-
For each i ∈ L, it computes
according to BCP1.Dec.
i}i∈L,
 e(Di,0, T (cid:48)s
e(Di,1, T (cid:48)s
e(g, g)sri =
i ) = e(g
l+i) = e(g
ri
i , gt(cid:48)
t(cid:48)
is),
ri
l+i , gt(cid:48)
t(cid:48)
e( ˆE, ˆD)·e(g,g)sr(cid:48)·(cid:81)
E(cid:48)
if vki = 0;
if vki = 1.
l+is),
i∈L e(g,g)sri
.
Finally, it computes m =
Compared with BCP1, BCP2’s ciphertext is augmented with
l elements, while public parameter and secret key are both
augmented 2l elements. Another method mentioned in [11]
could be also used for extending BCP1 with CCA security
level. It treats each veriﬁcation key as an attribute. How-
ever, it has shorter additional size of ciphertext (1 element)
but larger additional size of public parameter and secret key
(2l elements).
5.2 Security Proof of BCP2
The selective-tree CCA model is introduced in Section 3.2.
We prove BCP2’s security based on the strong existentially
unforgeable assumption of ots and the Decisional Bilinear
Diﬃe-Hellman assumption.
Theorem 2. Suppose ots is a εots-secure one-time sig-
nature scheme deﬁned in Section 2.3. If the DBDH assump-
tion holds in (G, GT ), then scheme BCP2 is selective-tree
CCA secure in the standard model.
Proof. Suppose there exists a polynomial-time adver-
sary A who can attack BCP2 in the selective-tree CCA model
with non-negligible advantage ε. We construct a simulator
S who can distinguish the DBDH tuple from a random tuple
with non-negligible advantage ε
5Here, s is consistent with the random value in E1
2 − εots.
349We ﬁrst let the challenger set the groups G and GT with
an eﬃcient bilinear map e and a generator g. The challenger
ﬂips a fair binary coin ν, outside of S’s view.
If ν = 1,
the challenger sets (g, A, B, C, Z) ∈ Dbdh; otherwise it sets
(g, A, B, C, Z) ∈ Drand.
Init The simulator S runs A. A chooses a (d, c)-bounded
access tree T ∗ it wishes to be challenged upon. S runs
ots.KGen to obtain (cid:104)sk∗, vk∗(cid:105). S sets Y = e(g, g)ab =
e(A, B). S deﬁnes a (d, c)-universal access tree T and a
map from T ∗ to T . Then, it generates PP1 as Init step in
Section 4.2.
For i ∈ L, randomly choose ηi, θi ∈ Zp and implicitly set
if vk∗
i = 0,
(cid:48)
t
i = ηi, T
if vk∗
i = 1,
(cid:48)
t
i = bηi, T
(cid:48)
i = Bηi and t
(cid:48)
i = gηi and t
(cid:48)
l+i = bθl+i, T
(cid:48)
l+i = θl+i, T
(cid:48)
l+i = Bθl+i ;
(cid:48)
l+i = gθl+i .
The algorithm outputs public parameter
i}i∈{1,··· ,2l}(cid:105)
(cid:48)
PP = (cid:104)PP1,{T
Phase 1 A is allowed to make secret key queries and de-
cryption queries:
• Secret Key Query. A submits an attribute set γ such
i ∈ Zp for
that T ∗(γ) = 0. S randomly chooses r(cid:48)(cid:48), r(cid:48)
i ∈ L and implicitly sets: r(cid:48) = ab + br(cid:48)(cid:48), ri = br(cid:48)
i.
According to the Phase 1 in Section 4, it calls
PolyUnsat(Tu, γ, A · gr(cid:48)(cid:48)
ˆD = gy−r = gab−ab−br(cid:48)(cid:48)−(cid:80)
computes:
) and obtains D1. Then, it
i∈L br(cid:48)
i =
(cid:80)
i∈L r(cid:48)
Br(cid:48)(cid:48)+
1
i
and for i ∈ L, if vk∗
i = 0,
if vk∗
i = 1
r(cid:48)
i
ηi and Di,1 = g
r(cid:48)
θl+i ;
i
Di,0 = B
r(cid:48)
i
ηi and Di,1 = B
r(cid:48)
θl+i .
i
Di,0 = g
Finally, it outputs the secret key
D = (cid:104)D1,{Di,0, Di,1}i∈L, ˆD(cid:105).
• Decryption Query. A submits a ciphertext
E = (cid:104)E1,{E(cid:48)
i}i∈L, ˆE, σ, vk(cid:105) related with T . S checks
the signature σ using vk.
If σ is invalid, S outputs
⊥; otherwise S checks if vk = vk∗.
If so, we call it
forge event and S outputs ν(cid:48) = 0 to indicate that
it was given a tuple from Drand. Now, the only case
is vk (cid:54)= vk∗, S deﬁnes an attribute set γ such that
T (γ) = 1, if T ∗(γ) = 0, it will generates a secret key
related with γ from Secret Key Query and use it to
decrypt E; otherwise T ∗(γ) = 1, w.l.o.g. assuming
j = 0, S would generate a partial secret
vkj = 1, vk∗
key for decrypting E as follows:
– S randomly chooses r(cid:48)(cid:48), r(cid:48)
i ∈ Zp for i ∈ L and