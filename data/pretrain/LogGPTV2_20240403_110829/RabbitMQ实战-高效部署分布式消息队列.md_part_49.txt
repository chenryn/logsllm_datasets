while(true){
Delivery delivery = consumer.nextDelivery();
break;
{
return response;
public void close(） throws Exception {
connection.close();
人
private BasicProperties
getRequestProperties()(
return new BasicProperties
.Builder()
.replyTo(replyQueueName)
.build();
public static String createRequest()
throws JSONException{
float epoch = System.currentTimeMillis()/1000;
JSONStringer msg = new JsONStringer();
return msg
.object()
.key("client_name")
.value("RPC Client 1.0")
.key("time")
.value(Float.toString(epoch))
.endobject().tostring();
public static void main(String[] args){
Client client = null;
String response = null;
try{
client = new Client();
client.init().setupConsumer();
response =client.call(client.createRequest());
System.out.println("RPC Reply
---"+response）;
catch
(Exception e）{
---
## Page 322
300
附录A在Java和.NET上使用Rabbit
e.printStackTrace();
finally{
if (client!= null）{
try{
client.close();
catch (Exception ignore）{}
让我们执行以下命令来编译代码：
$javac-cp./lib/rabbitmq-client.jar:./lib/json-20090211.jar
Client.java
如果编译成功的话，那么你就有了新的client.class文件：
$ ls Client.class
Client.class
现在启动RabbitMQ服务器，你就能测试RPC客户端和服务器了。记住，你需
要和第4章相同的设置—你需要将rpc_user配置在你的服务器上。
A.3.5测试RPC客户端和服务器
$java -cp $CP Server
Waiting for RPC calls...
现在服务器已经准备好接收客户端的请求了。让我们转到第二个终端窗口，设
置我们之前解释过的CP变量，然后输人：
$java -cp $CP Client
Sent 'ping' RPC call. Waiting for reply...
RPC Reply --- Pong!1.32087475E
你可以看到屏幕上立刻打印出了回应信息。另一方面，在服务器运行的那个终
端窗口，你应该看到如下输出：
Received API call...replying...
通过这个例子，我们完成了Java平台的RabbitMQ客户端的讲解。作为练习，
---
## Page 323
A.4总结
301
请尝试运行PythonRPC服务器来和Java客户端交互，或者反过来测试两种AMQP
客户端的互操作性。
A.4总结
当我们开始介绍本附录内容的时候，你也许已经有了一定的RabbitMQ基础，
但是从Java和.NET平台上使用这些基础知识可能有些难以捉摸。现在你已经将
HelloWorld（第2章）和告警服务器（第4章）示例转换成厂.NET平台实现，并
拥有了一个可以运作的Java平台的RPC客户端和服务器，它和最初的Python实现
之间可以完全互操作（第4章）。我们希望这段在Java和.NET平台上使用Rabbit
的闪电般的学习旅程，能够为你带来必要的思维导图，能够将本书中的所有概念和
示例用于你青睐的字节码解释语言。
---
## Page 324
附录B
在线资源
在本附录中，我们收集了一些有趣的在线资源。当你在寻找RabbitMQ相关的
信息（不论是支持你喜爱的编程语言的客户端库，还是解决你当前问题的最新消息
通信设计模式）时，这些资源都能让你倍感轻松。好吧，实话实说：虽然我们无法
照顾到你方方面面的需求，但是我们会尽力列出那些对我们来说有帮助的资源。
B.1这些站点你应该知道
让我们从回顾一些网站开始
·RabbitMQ官方文档一如果你正寻找有关RabbitMQ的信息的话，这就是
首选之地。自从我们开始编写本书以来，官方网站上的资源已经得到了非常
可观的加强。更多信息请参阅：http://www.rabbitmq.com/documentation.html。
·AMQP参考文档一如果你想更深人地理解AMQP的话，则可以访问该协
议的官方网站（http://amqp.org/），在那里你可以找到各种版本的规范（http://
amqp.org/resources/download）。除了这些链接之外，RabbitMQ开发团队还
创建了AMQP 快速指引l：http://www.rabbitmq.com/amqp-0-9-1-quickref.html。
当你想要知道某个AMQP方法第四个参数的含义的时候，检索一下这个网
页即可。
---
## Page 325
B.2博客
303
■企业集成模式一一如果你对消息通信和集成模式感兴趣的话，那么由Gregor
Hohpe和BobbyWoolf一同编写的EnterpriseIntegrationPatterns一书值得一
读。这里我们必须对AMQP用户提醒一下：书中的所有示例都是基于诸如
JMS或者MSMQ技术的。你需要稍微转换一下概念。同时，一些模式已经
应用在了RabbitMQ上。好消息是这本书无须购买。针对模式的叙述和图解
是在知识共享署名协议（CreativeCommonsAttributionLicense）下发布的，
因此你可以在线阅读http://www.eaipatterns.com/eaipatterns.html。像发布订阅
（PublishSubscribe）竞争消费者（CompetingConsumers）以及一些其他模式，
我们在第4章的示例中曾介绍过。
·RubyAMQPgem文档站点一RubyAMQPgem站点上有很多关于如何使用
RabbitMQ和AMQP的文档和示例。示例中甚至还有滑稽的兔子画：http://
rubyamqp.info/。
■RabbitMQ开发RSS订阅—RabbitMQMercurial库提供了一个有关最新服
务器代码变更的RSS订阅。如果你想要站在最前沿的话，则这些信息对你
来说一定很有意思：http://hg.rabbitmq.com/rabbitmq-server/rss-log。
B.2博客
护了一个博客。你可以看到他们在该博客上讨论服务器的新功能开发、提供
性能调优提示等。一定要留意这个博客哦。
■Jason's plans—Jason早在2009年的时候就开了自己的博客。那时候我们
还在找寻关于如何使用RabbitMQ和AMQP的示例。他那篇名为Rabbits
andwarrens的文章在许多年里一直对人们有启发性。偶尔有人会重新发现
它，同时它又会再次出现在Twitter上。请参阅这里：http://blogs.digitar.com
jww/2009/01/rabbits-and-warrens/。
■Alvaro的博客——Alvaro维护了一个博客来讨论消息通信和许多其他软件议
题。你可以在那里找到诸如用RabbitMQ实现RPC和Haskell的短篇文章：
http://videlalvaro.github.com/2010/10/rpc-over-rabbitmq.html。
---
## Page 326
304
附录B在线资源
B.3AMQP库和相关的OSS项目
■开发工具和学习资料一RabbitMQ官方网站有一个开源项目列表，这些项
目以某种方式和RabbitMQ相关联：http://www.rabbitmq.com/devtools.html。
在这里你可以找到从AMQP库到Github库的各种链接，提供可替代的交换
器实现一甚至有社区创建的视频教程！
B.3.1客户端库
在这里我们专门列出了一些有意思的AMQP和RabbitMQ库。
■Java一除了官方Java客户端外，你还有其他方式来集成Java和RabbitMQ。
Spring 框架提供了 Spring AMQP 库：http://www.springsource.org/spring-amqp。
MuleESB也提供与AMQP和RabbitMQ的集成。你可以在这里了解更多详情：
https://github.com/mulesoft/mule-transport-amqp/blob/master/GUIDE.md。
最后，最初创建RabbitMQ的公司LShift针对ApacheCamel开发了一个实验
性质的 RabbitMQ组件：https://github.com/lshift/camel-rabbitmqo
■.NET/C#—对C#来说，有之前附录中提到的官方客户端，而且Spring
AMQP也提供一个库来和Spring集成框架一起使用。该链接和之前Java的
—样：http://www.springsource.org/spring-amqp
除了上述库之外，MikeHadlow创建了一个名为EasyNetQ的库，位于
https://github.com/mikehadlow/EasyNetQ/wiki/Introduction上。这个库的目标
是：“尽可能少的配置（甚至是零配置）”并且“简单的API"。
■Python—在本书中我们使用了名为 Pika 的库。作为RabbitMQ开发团队中
的一员，MarekMajkowski开始研发一个新的名为Puka的库。他在下列网
址中解释了新库背后的设计原因：http://www.rabbitmq.com/blog/2011/07/08/
puka-rethinking-amqp-clients/。
·C—针对C语言，有一个名为rabbitmq-c的库，是由DavidWragg编
写并维护的，同时也对RabbitMQ有用。该库也被C++和Objective-C的用
户包装使用。它位于RabbitMQMercurial代码库：http://hg.rabbitmq.com/
rabbitmq-c/o
·PHP一针对PHP，我们使用php-amqplib客户端库，它是纯PHP实现。
还有一个AMQP的 PECL扩展，你可以在http://pecl.php.net/package/amqp
---
## Page 327
B.3AMQP库和相关的OSS项目
305
上找到。在编写本书的时候，该库正处于大力发展之中。记住，它依赖于
rabbitmq-c库。
另一个纯PHP库由于作者的积极开发和文档工作而值得一提。它的名字是
amqphp，你可以在https://github.com/braveSirRobin/amqphp找到它。
·Ruby——针对Ruby，你可以尝试我们先前提到的RubyAMQP Gem（http://
rubyamqp.info/）。如果你使用JRuby的话，有一个可替代的库叫作hot
bunnies，你可以在https://github.com/ruby-amqp/hot_bunnies 上找到它。好消
息是，它是由AMQPGem的其中一位作者维护的。
·Erlang—Erlang是用来编写RabbitMQ的语言。如果你需要在Erlang上
使用RabbitMQ的话，RabbitMQ团队提供了一个客户端库。绝大多数
RabbitMQ插件使用该库，所以有可能你正在RabbitMQ下间接地使用它呢。
具体使用细节可以在RabbitMQ官方网站上找到：http://www.rabbitmq.com/
erlang-client-user-guide.html
·JavaScript、Node.js和Web消息通信一虽然JavaScript是一种前端语言，
但是最近服务器端框架的出现，向人们展示了该语言作为后端编程语言也可
以很有趣。Node.js 就允许你使用JavaScript来编写服务器端代码，并且你能
想象得到用不了多久就会有人为其编写AMQP客户端。其中之一就是node
amqp库，它是由ScalableInternetArchitectures一书的作者TheoSchlossnagle
维护的。更多内容请访问：https://github.com/postwait/node-amqp。
还有一个叫作Rabbit.js的库，它针对Web实现了多种消息通信模式。它
是由RabbitMQ开发团队中的MichaelBridgen创建的。更多详情请访问：
https://github.com/squaremo/rabbit.js
·Clojure一针对Clojure平台有个叫作langohr的库。它的作者Michael
Klishin同时也是RubyAMQPGem和hot_bunnies库的维护者之一。该库是
建立在作者编写Ruby客户端的经验之上的。该库将Java官方库包装为符合
Clojure的语言习惯。以下是Github代码库：https://github.com/michaelklishin/
langohr。
·Scala一针对Scala，有一个AMQP库可以直接同AKKA可伸缩性
（Scalability）框架一同使用。该库的文档可以在其代码库中找到：http://doc.
akka.io/docs/akka-modules/1.3.1/modules/amqp.html..
·Haskell—如果你想要在Haskell上使用RabbitMQ的话，请参阅该 amqp
包：http://hackage.haskell.org/package/amqp。这里有一份人门指南：http://
---
## Page 328
306
附录B在线资源
videlalvaro.github.com/2010/09/haskell-and-rabbitmq.html
·NoSQL一RabbitMQ也和一些NoSQL数据库进行了集成；其中最值得
注意的是JonBrisbin的作品。他一直致力于将RabbitMQ桥接到Riak。有
一个可选的RabbitMQ交换器，可以将消息记录到Riak中，请参阅https://
github.com/jbrisbin/riak-exchange。同时，如果你想要接收Riak 数据库中发生
更改的通知的话，Jon编写了一个Riak post-commit-hook。更多信息请参考
https://github.com/jbrisbin/riak-rabbitmq-commit-hooks
B.4讨论和邮件列表
·邮件列表一如果你想要联系RabbitMQ社区和开发者们的话，有几个地方
你可以去找找。首先，可以通过官方的邮件列表：http://lists.rabbitmq.com/
cgi-bin/mailman/listinfo/rabbitmq-discuss。该列表非常活跃，以至于有些时候
你在当天下午就能获得刚提出问题的答案了。如果你使用RabbitMQ遇到麻
烦的话，这里是寻求帮助最好的地方了。
IRC 聊天频道：http://freenode.net/ network。随便问，这里总是有不少来自社
区的成员，他们很愿意为其他人提供帮助。
■Twitter一最后，如果你想要随时了解有关RabbitMQ的讨论，则可以在
Twiter 上订阅 #rabbi tmq : http://twitter.com/#!/search?q=%23rabbitmq。
B.5总结
本附录提供了三十多条新资源连接。如果你想要“深挖免子洞”的话，那么就
有一大堆功课要做了。我们提供了有意思的网站和博客中的一系列精选链接，并且
为我们提到的每个库都给出了简短的评论。有了RabbitMQ和AMQP，你将不再受
限于特定于语言的解决方案。最后，如果你想要联系社区的话，则可以使用传统的
email，直接进行IRC交谈，或者通过Twitter来实时了解RabbitMQ用户身上发生
的事情。
---
## Page 329
附录C
在Windows上安装
RabbitMQ
和大多数从UNIX起源的程序一样，在Windows上安装RabbitMQ和我们在
第1章提到的安装说明有所不同。幸运的是，RabbitHQ的团队为我们提供了基于
MSI的安装包，这使得整个安装过程相对轻松。不过在安装Rabbit之前，你必须首
先从http://www.erlang.org/download.html安装最新版本的Erlang。通常来讲，erlang.
org上可用的最新版Erlang 能够和最新版RabbitMQ一起工作。那么现在就动手下
载WindowsBinaryFile吧（见图C.1）。
在下载Erlang安装包之后（在这里是otp_win32_R14B04.exe），进人下载目
录并运行（见图C.2）
---