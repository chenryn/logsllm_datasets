coon’s code transformations respect the original pro-
gram’s control and data dependences. Moreover, Rac-
coon’s obfuscation code uses thread-local storage. Thus,
4Various solutions have been proposed that allow limited use of
“transactional” I/O statements through runtime systems [6], operating
systems [28], or the underlying hardware [4].
4
...
1: p ← &a;
2: if secret = true then
3:
4: else
5:
6:
7:
8: end if
...
p ← &b;
∗p ← 10;
(cid:30) Real path.
(cid:30) Decoy path.
(cid:30) Dummy instructions do not update p.
(cid:30) Accesses variable a instead of b!
Figure 2: Illustrating the importance of Property 2. This
code fragment shows how solutions that do not update
memory along decoy paths may leak information. If the
decoy path is not allowed to update memory, then the
dereferenced pointer in line 7 will access a instead of
accessing b, which reveals that the statement was part of
a decoy path.
Raccoon’s obfuscation technique works seamlessly with
multi-threaded applications because it does not introduce
new data dependences.
4 Raccoon Design
This section describes the design and implementation of
Raccoon from the bottom-up. We start by describing the
two critical properties of Raccoon that distinguish it from
other obfuscation techniques. Then, after describing the
key building block upon which higher-level oblivious op-
erations are built, we describe each of Raccoon’s individ-
ual components: (1) a taint analysis that identiﬁes pro-
gram statements that require obfuscation (Section 4.3),
(2) a runtime transaction-like memory mechanism for
buffering intermediate results along decoy paths (Sec-
tion 4.4), (3) a program transformation that obfuscates
control-ﬂow statements (Section 4.5), and (4) a code
transformation that uses software Path ORAM to hide
array accesses that depend on secrets (Section 4.6). We
then describe Raccoon’s program transformations that
ensure crash-free execution (Section 4.7). Finally, we
illustrate with a simple example the synergy among Rac-
coon’s various obfuscation steps (Section 4.8).
4.1 Key Properties of Our Solution
Two key properties of Raccoon distinguish it from other
branch-obfuscating solutions [20, 21, 25, 8]:
• Property 1: Both real and decoy paths execute ac-
tual program instructions.
• Property 2: Both real and decoy paths are allowed
to update memory.
Property 1 produces decoy paths that—from the per-
spective of an adversary monitoring a digital side-
channel—are indistinguishable from from real paths.
434  24th USENIX Security Symposium 
USENIX Association
Without this property, previous solutions can close one
side-channel while leaving other side-channels open. To
understand this point, we refer back to Figure 1 and con-
sider a solution that normalizes execution time along the
two branch paths in the Figure by adding NOP instructions
to the Not Taken path. This solution closes the timing
channel but introduces different instruction counts along
the two branch paths. On the other hand, the addition
of dummy instructions to normalize instruction counts
will likely result in different execution time along the two
branch paths, since (on commodity hardware) the NOP in-
structions will have a different execution latency than the
multiply instruction.
Property 2 is a special case of Property 1, but we in-
clude it because the ability to update memory is critical to
Raccoon’s ability to obfuscate execution. For example,
Figure 2 shows that if the decoy path does not update the
pointer p, then the subsequent decoy statement will up-
date a instead of b, revealing that the assignment to *p
was part of a decoy path.
4.2 Oblivious Store Operation
Raccoon’s key building block is the oblivious store op-
eration, which we implement using the CMOV x86 in-
struction. This instruction accepts a condition code, a
source operand, and a destination operand; if the condi-
tion is true, it moves the source operand to the destina-
tion. When both the source and the destination operands
are in registers, the execution of this instruction does
not reveal information about the branch predicate (hence
the name oblivious store operation).5 As we describe
shortly, many components in Raccoon leverage the obliv-
ious store operation. Figure 3 shows the x86 assembly
code for the CMOV wrapper function.
4.3 Taint Analysis
attribute
Raccoon requires the user to annotate secret variables
construct. With these secret
using the
variables identiﬁed, Raccoon performs inter-procedural
taint analysis to identify branches and data access state-
ments that require obfuscation. Raccoon propagates taint
across both implicit and explicit ﬂow edges. The result of
the taint analysis is a list of memory accesses and branch
statements that must be obfuscated to protect privacy.
5Contrary to the pseudocode describing the CMOV instruction in the
Intel 64 Architecture Software Developer’s Manual, our assembly code
tests reveal that in 64-bit operating mode when the operand size is
16-bit or 32-bit, the instruction resets the upper 32 bits regardless of
whether the predicate is true. Thus the instruction does not leak the
value of the predicate via the upper 32 bits, as one might assume based
on the manual.
01: cmov(uint8_t pred, uint32_t t_val, uint32_t f_val) {
02:
03:
04:
05:
06:
07:
08:
09:
10:
11:
12:
13: }
%2, %0;"
"mov
%1, %1;"
"test
%3, %0;"
"cmovz
%2, %2;"
"test
: "=r" (result)
: "r" (pred), "r" (t_val), "r" (f_val)
: "cc"
uint32_t result;
__asm__ volatile (
);
return result;
Figure 3: CMOV wrapper
4.4 Transaction Management
To support Properties 1 and 2, Raccoon executes each
branch of an obfuscated if-statement in a transaction. In
particular, Raccoon buffers load and store operations
along each path of an if-statement, and Raccoon writes
values along the real path to DRAM using the oblivi-
ous store operation.
If a decoy path tries to write a
value to the DRAM, Raccoon uses the oblivious store
operation to read the existing value and write it back.
At compile time, Raccoon transforms load and store
operations so that they will be serviced from the transac-
tion buffers. Figure 4 shows pseudocode that implements
transactional loads and stores. Loads and stores that ap-
pear in non-obfuscated code do not use the transaction
buffers.
4.5 Control-Flow Obfuscation
To obfuscate control ﬂow, Raccoon forces control ﬂow
along both paths of an obfuscated branch, which re-
quires three key facilities: (1) a method of perturbing
the branch outcome, (2) a method of bringing execu-
tion control back from the end of the if-statement to
the start of the if-statement so that execution can fol-
low along the unexplored path, and (3) a method of en-
suring that memory updates along decoy path(s) do not
alter non-transactional memory. The ﬁrst facility is im-
plemented by the obfuscate() function (which forces
sequential execution of both paths arising out of a con-
ditional branch instruction). Although Raccoon executes
both branch paths, it evaluates the (secret) branch pred-
icate only once. This ensures that the execution of the
ﬁrst path does not unexpectedly change the value of the
branch predicate. The second facility is implemented
by the epilog() function (which transfers control-ﬂow
from the post-dominator of the if-statement to the be-
ginning of the if-statement). Finally the third facility
is implemented using the oblivious store operation de-
scribed earlier. The control-ﬂow obfuscation functions
USENIX Association  
24th USENIX Security Symposium  435
5
// Writes a value to the transaction buffer.
tx_write(address, value) {
if (threaded program)
lock();
// Write to both the transaction buffer
// and to the non-transactional storage.
tls->gl_buffer[address] = value;
*address = cmov(real_idx == instance,
value, *address);
if (threaded program)
unlock();
}
// Fetches a value from the transaction buffer.
tx_read(address) {
if (threaded program)
lock();
value = *address;
if (address in tls->gl_buffer)
value = tls->gl_buffer[address];
value = cmov(real_idx == instance,
*address, value);
if (threaded program)
unlock();
return value;
}
Figure 4: Pseudocode for transaction buffer accesses.
Equality checks are implemented using XOR operation to
prevent the compiler from introducing an explicit branch
instruction.
(obfuscate() and epilog()) use the libc setjmp() and
longjmp() functions to transfer control between pro-
gram points.
Safety of setjmp() and longjmp() Operations. The
use of setjmp() and longjmp() is safe as long as the
runtime system does not destroy the activation record of
the caller of setjmp() prior to calling longjmp(). Thus,
the function that invokes setjmp() should not return un-
til longjmp() is invoked. To work around this limitation,
Raccoon copies the stack contents along with the register
state (identiﬁed by the jmp buff structure) and restores
the stack before calling longjmp(). To avoid perturbing
the stack while manipulating the stack, Raccoon manip-
ulates the stack using C macros and global variables.
As an additional safety requirement, the runtime sys-
tem must not remove the code segment containing the
call to setjmp() from instruction memory before the call
to longjmp(). Because both obfuscate()—which calls
setjmp()—and epilog()—which calls longjmp()—
are present in the same program module, we know that
that the code segment will not vanish before calling
longjmp().
Obfuscating Nested Branches. Nested branches are
obfuscated in Raccoon by maintaining a stack of transac-
tion buffers that mimics the nesting of transactions. Un-
like traditional transactions, transactions in Raccoon are
easier to nest because Raccoon can determine whether
to commit the results or to store them temporarily in
the transaction buffer at the beginning of the transaction
(based on the secret value of the branch predicate).
4.6 Software Path ORAM
Raccoon’s implementation of the Path ORAM algorithm
builds on the oblivious store operation. Since proces-
sors such as the Intel x86 do not have a trusted mem-
ory (other than a handful of registers) for implementing
the stash, we modify the Path ORAM algorithm from
its original form [34]. Raccoon’s Path ORAM imple-
mentation cannot directly index into arrays that represent
the position map or the stash, so Raccoon’s implementa-
tion streams over the position map and stash arrays and
uses the oblivious store operation to selectively read or
update array elements. Raccoon implements both re-
cursive [33] as well as non-recursive versions of Path
ORAM. Our software implementation of Path ORAM
permits ﬂexible sizes for both the stash memory and the
position map.
Section 6.3 compares recursive and non-recursive
ORAM implementations with an implementation that
streams over the entire data array. Raccoon uses AVX
vector intrinsic operations for streaming over data ar-
rays. We ﬁnd that even with large data sizes, it is faster
to stream over the array than perform a single ORAM
access.
4.7 Limiting Termination Channel Leaks
By executing instructions along decoy paths, Raccoon
might operate on incorrect values. For example, consider
the statement if (y != 0) { z = x / y; }. If y = 0 for
a particular execution and if Raccoon executes the decoy
path with y = 0, then the program will crash due to a
division-by-zero error, and the occurrence of this crash
in an otherwise bug-free program would reveal that the
program was executing a decoy path (and, consequently,
that y = 0).
To avoid such situations, Raccoon prevents the pro-
gram from terminating abnormally due to exceptions.
For each integer division that appears in a transaction
(along both real and decoy paths), Raccoon instruments
the operation so that it obliviously (using cmov) replaces
436  24th USENIX Security Symposium 
USENIX Association
6
/* Sample user code. */
01: int array[512] __attribute__((annotate ("secret")));
02: if (array[mid] <= x) {
03:
04: } else {
05:
06: }
l = mid;
r = mid;
/* Transformed pseudocode. */
07: r1 = stream_load(array, mid);
08: r2 = r1 <= x;
09: key = obfuscate(r2, r3);
10: if (r3) {
11:
12: } else {
13:
14: }
tx_write(l, mid);
tx_write(r, mid);
15: epilog(key);
Figure 5: Sample code and transformed pseudocode.
the divisor with a non-zero value. To prevent integer di-
vision overﬂow, Raccoon checks whether the dividend is
equal to INT MIN and whether the divisor is equal to -1;
if so, Raccoon obliviously substitutes the divisor to pre-
vent a division overﬂow. Raccoon also disables ﬂoating
point exceptions using fedisableexcept(). Similarly,
array load and store operations appearing on the de-
coy path are checked (again, obliviously, using cmov) for
out-of-bounds accesses. Thus, to ensure that the execu-
tion of decoy paths does not crash the program, Raccoon
patches unsafe operations. Section 5.3 demonstrates that
this process of patching unsafe operations does not leak
secret information to the adversary.
4.8 Putting It All Together
We now explain how Raccoon transforms the code
shown in Figure 5. Here, the secret annotation informs
Raccoon that the contents of array are secret.
Static taint analysis then reveals that the branch predi-
cate (line 2) depends on the secret value, so Raccoon ob-
fuscates this branch. Similarly, implicit ﬂow edges from
the branch predicate to the two assignment statements (at
lines 3 and 5) indicate that Raccoon should use the obliv-
ious store operation for both assignment statements.
Accordingly, Raccoon replaces direct memory stores
for l and r with function calls that write into trans-
action buffers in lines 11 and 13 of the transformed
pseudocode. The access to array in line 1 is replaced
by an oblivious streaming operation in line 7.
Fi-
nally, the branch in line 2 is obfuscated by inserting
the obfuscate() and epilog() function calls. The
epilog() and obfuscate() function calls are coordi-
nated over the key variable. To prevent the compiler
from deleting or optimizing security-sensitive code sec-
tions, Raccoon marks security-sensitive functions, vari-
ables, and memory access operations as volatile (not
shown in the transformed IR).6
At runtime, the transformed code executes the follow-
ing steps:
1. Line 7 streams over the array and uses ORAM to
load a single element (identiﬁed by mid) of the ar-
ray.
2. Line 8 calculates the actual value of the branch
predicate.
3. The key to this obfuscation lies in the epilog()
function on line 15, which forces the transformed
code to execute twice. The ﬁrst time this function is
called, it transfers control back to line 9. The sec-
ond time this function is called, it simply returns,