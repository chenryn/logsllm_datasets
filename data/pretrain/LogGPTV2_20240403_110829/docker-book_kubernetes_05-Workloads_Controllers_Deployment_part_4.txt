```
$ kubectl describe deployment nginx-deployment
Conditions:
  Type            Status  Reason
  ----            ------  ------
  Available       True    MinimumReplicasAvailable
  Progressing     True    ReplicaSetUpdated
  ReplicaFailure  True    FailedCreate
```
如果运行`kubectl get deployment nginx-deployment -o yaml` ，则Deployment状态可能如下所示：
```
status:
  availableReplicas: 2
  conditions:
  - lastTransitionTime: 2016-10-04T12:25:39Z
    lastUpdateTime: 2016-10-04T12:25:39Z
    message: Replica set "nginx-deployment-4262182780" is progressing.
    reason: ReplicaSetUpdated
    status: "True"
    type: Progressing
  - lastTransitionTime: 2016-10-04T12:25:42Z
    lastUpdateTime: 2016-10-04T12:25:42Z
    message: Deployment has minimum availability.
    reason: MinimumReplicasAvailable
    status: "True"
    type: Available
  - lastTransitionTime: 2016-10-04T12:25:39Z
    lastUpdateTime: 2016-10-04T12:25:39Z
    message: 'Error creating: pods "nginx-deployment-4262182780-" is forbidden: exceeded quota:
      object-counts, requested: pods=1, used: pods=3, limited: pods=2'
    reason: FailedCreate
    status: "True"
    type: ReplicaFailure
  observedGeneration: 3
  replicas: 2
  unavailableReplicas: 2
```
最终，一旦Deployment进度超过了截止时间，Kubernetes将会更新状态以及导致Progressing的原因：
```
Conditions:
  Type            Status  Reason
  ----            ------  ------
  Available       True    MinimumReplicasAvailable
  Progressing     False   ProgressDeadlineExceeded
  ReplicaFailure  True    FailedCreate
```
可缩容Deployment、缩容正在运行的其他Controller或通过增加namespace中的配额，从而解决配额不足的问题。当您满足配额条件后，Deployment Controller就会完成升级，您将看到Deployment的状态更新为成功（ `Status=True`和`Reason=NewReplicaSetAvailable` ）。
```
Conditions:
  Type          Status  Reason
  ----          ------  ------
  Available     True    MinimumReplicasAvailable
  Progressing   True    NewReplicaSetAvailable
```
`Type=Available` ，并且`Status=True` 表示您的Deployment具有最低可用性。 最低可用性由部署策略中指定的参数决定。 `Type=Progressing` ，并且 `Status=True` 表示您的Deployment正在升级中；正处于progressing状态；抑或已成功完成其进度，并且达到所需的最小可用新副本个数（请查看特定状态的原因——本例中，`Reason=NewReplicaSetAvailable` 意味着Deployment完成）。
可使用`kubectl rollout status` 来检查Deployment进程是否失败。如果Deployment已超过截止之间，则`kubectl rollout status` 将会返回非零的退出代码。
```
$ kubectl rollout status deploy/nginx-deployment
Waiting for rollout to finish: 2 out of 3 new replicas have been updated...
error: deployment "nginx" exceeded its progress deadline
$ echo $?
1
```
### 操作失败的Deployment
应用于完成的Deployment的所有操作也适用于失败的Deployment。如果需要在Deployment的Pod模板中应用多个调整，您可以进行扩容/缩容、回滚到先前的版本，甚至是暂停。
## 清理策略
可在Deployment中设置`.spec.revisionHistoryLimit` 字段，从而指定该Deployment要保留多少个旧版本ReplicaSet。 其余的将在后台垃圾收集。 默认情况下，所有修订历史都将被保留。在将来的版本中，默认是2。
**注意：**明确将此字段设置为0将会导致清除Deployment的所有历史记录，这会导致Deployment无法回滚。
## 用例
### Canary Deployment（金丝雀部署）
如果要使用Deployment向一部分用户或服务器发布版本，则可以按照 [managing resources](https://kubernetes.io/docs/concepts/cluster-administration/manage-deployment/#canary-deployments) 描述的金丝雀模式，创建多个Deployment，每个Deployment对应各自的版本。
## 编写Deployment Spec
与所有其他Kubernetes配置一样，Deployment需要`apiVersion` 、 `kind` 和 `metadata` 等字段。有关使用配置文件的一般信息，请参阅 [deploying applications](https://kubernetes.io/docs/tutorials/stateless-application/run-stateless-application-deployment/) ，配置容器以及 [using kubectl to manage resources](https://kubernetes.io/docs/tutorials/object-management-kubectl/object-management/) 文档。
Deployment还需要一个 [`.spec` section](https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status) 。
### Pod Template
`.spec.template`是`.spec` 唯一必需的字段。
`.spec.template`是一个 [pod template](https://kubernetes.io/docs/concepts/workloads/pods/pod-overview/#pod-templates) 。它与 [Pod](https://kubernetes.io/docs/concepts/workloads/pods/pod/) 有完全相同的schema，除了它是嵌套的，并且没有`apiVersion` 或`kind` 。
除了Pod必需的字段之外，Deployment中的Pod模板必须指定适当的标签和重启策略。对于标签，请确保不与其他Controller重叠。详见 [selector](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#selector) ）。
[`.spec.template.spec.restartPolicy`](https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/) 只允许等于 `Always` ，如果未指定，则为默认值。
### 副本
`.spec.replicas` 是一个可选字段，用于指定期望的`.spec.replicas` 的数量，默认为1。
### 选择器
`.spec.selector` 是一个可选字段，指定此Deployment所关联的Pod的 [label selector](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/) 。
`.spec.selector`必须与`.spec.template.metadata.labels` 相匹配，否则将被API拒绝。
在API版本`apps/v1beta2` 中，如果未经设置，则`.spec.selector` 和`.metadata.labels` 不再默认与`.spec.template.metadata.labels` 相同。 所以，必须明确设定这些字段。 另请注意，在`apps/v1beta2` 中，`.spec.selector` 在Deployment创建后是不可变的。
对于模板与`.spec.template` 不同，抑或副本总数超过`.spec.replicas` 定义的Pod，Deployment可能会终止这些Pod。如果Pod的数量小于所需的数量，它将会使用`.spec.template` 的定义启动新Pod。
> 译者按：“模板与`.spec.template` 不同”的场景：Deployment先创建，然后修改YAML定义文件，升级镜像的版本。此时，旧Pod的镜像字段就与`.spec.template` 不同了
**注意：**你不应该建立其他与该选择器相匹配的Pod，无论是直接创建，还是通过另一个Deployment创建，抑或通过另一个Controller创建（例如ReplicaSet或ReplicationController）。如果这样做，第一个Deployment将会认为是它创造了这些Pod。 Kubernetes并不会阻止你这么做。
如果多个Controller的选择器发生重叠，Controller会发生冲突，并导致不正常的行为。
### 策略
`.spec.strategy` 指定使用新Pod代替旧Pod的策略。`.spec.strategy.type` 可有“Recreate”或“RollingUpdate” 两种取值。默认为“RollingUpdate”。
#### Recreate Deployment
当`.spec.strategy.type==Recreate` 时，创建新Pod前，会先杀死所有现有的Pod。
#### Rolling Update Deployment（滚动更新Deployment）
当`.spec.strategy.type==RollingUpdate` 时，Deployment以 [rolling update](https://kubernetes.io/docs/tasks/run-application/rolling-update-replication-controller/) 的方式更新Pod。可指定`maxUnavailable` 和`maxSurge` 控制滚动更新的过程。
##### Max Unavailable
`.spec.strategy.rollingUpdate.maxUnavailable` 是一个可选字段，用于指定在更新的过程中，不可用Pod的最大数量。该值可以是一个绝对值（例如5），也可以是期望Pod数量的百分比（例如10％）。通过百分比计算出来的绝对值会向下取整。如果 `.spec.strategy.rollingUpdate.maxSurge`是0，那么该值不能为0。默认值是25％。
例如，此值被设置为30％，当滚动更新开始时，旧ReplicaSet会立即缩容到期望Pod数量的70％。一旦新的Pod进入Ready状态，老ReplicaSet可进一步缩容，然后扩容新ReplicaSet，确保在更新过程中，任何时候都会有至少70％的可用Pod。
##### Max Surge
`.spec.strategy.rollingUpdate.maxSurge` 是一个可选字段，用于指定在更新的过程中，超过Pod期望数量的最大数量。该值可以是一个绝对值（例如5），也可以是期望Pod数量的百分比（例如10％）。如果`MaxUnavailable`为0，该值不能为0。通过百分比计算出来的绝对值会绝对会向上取整。默认值是25％。
例如，此值被设置为30％，当滚动更新开始时，新ReplicaSet会立即扩容， 新旧Pod的总数不超过期望Pod数量的130％。一旦老Pod已被杀死，新ReplicaSet可进一步扩容，确保在更新过程中，任何时候运行的Pod总数不超过期望Pod数量的130％。
### Progress Deadline Seconds
`.spec.progressDeadlineSeconds` 是一个可选字段，用于指定表示Deployment Controller等待多少秒后认为Deployment进程已  [failed progressing](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#failed-deployment)  ——表现为在资源状态中有： `Type=Progressing` 、`Status=False`，以及`Reason=ProgressDeadlineExceeded` 。Deployment Controller将继续重试该Deployment。在未来，一旦实现自动回滚，Deployment Controller观察到这种状况时，就会尽快回滚 Deployment。
如需设置本字段，值必须大于`.spec.minReadySeconds` 。
### Min Ready Seconds
`.spec.minReadySeconds` 是一个可选字段，用于指定新创建的Pod进入Ready状态（Pod的容器持续多少秒不发生崩溃，就被认为可用）的最小秒数。默认为0（ Pod在Ready后就会被认为是可用状态）。要了解什么时候Pod会被认为已Ready，详见 [Container Probes](https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes) 。
### Rollback To
在API版本`extensions/v1beta1` 和`apps/v1beta1` 中，`.spec.rollbackTo` 已被弃用，并且在API版本`apps/v1beta2` 中不再支持该字段。取而代之的是，建议使用`kubectl rollout undo` ，详见 [Rolling Back to a Previous Revision](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#rolling-back-to-a-previous-revision) 。
### Revision History Limit（修订历史限制）
Deployment的修订历史记录存储在它所控制的ReplicaSet内。
`.spec.revisionHistoryLimit` 是一个可选字段，用于指定要保留的ReplicaSet数量，以便回滚。它的理想取值取决于新Deployment的频率和稳定性。默认情况下，所有老ReplicaSet都被保存，将资源存储在`etcd` 中，使用`kubectl get rs` 查询ReplicaSet信息。每个Deployment修订的配置都被存储在其ReplicaSet；因此，一旦旧ReplicaSet被删除，Deployment将无法回滚到那个修订版本。
更具体地讲，将该字段设为零，意味着所有0副本的旧ReplicaSet将被清理。在这种情况下，一个新的Deployment无法回滚，因为其修订历史都被清除了。
### Paused
`.spec.paused` 是一个可选的布尔类型的字段，用于暂停和恢复Deployment。Deployment暂停和未暂停之间唯一的区别是：对暂停Deployment的PodTemplateSpec所做的任何更改，不会触发新的升级。当Deployment创建后，默认情况下不会暂停。
## Deployment的替代方案
### kubectl滚动更新
[Kubectl rolling update](https://kubernetes.io/docs/user-guide/kubectl/v1.8/#rolling-update) 以类似的方式更新Pod和ReplicationControllers。但是建议使用Deployment，因为是声明式、服务器端的，并有额外的功能，例如滚动更新完成后可回滚到历史版本。
## 原文