                                                       | |
                                                 .------------------------------------.
                                                 |  0x40232b [gm]                     |
                                                 | ; CODE XREF from entry1 (0x402324) |
                                                 | call sub.ntdll.dll_bc0;[go]        |
                                                 | push 0                             |
                                                 | test al, al                        |
                                                 | jne 0x40233c;[gp]                  |
                                                 `------------------------------------'
                                                         f t
                                                         | |
                                                         | '------------.
            .--------------------------------------------'              |
            |                                                           |
        .-------------------------------------------------------.   .-------------------------------------------------------------.
        |  0x402336 [gr]                                        |   |  0x40233c [gp]                                              |
        | ; 0x42a0b0                                            |   | ; CODE XREF from entry1 (0x402334)                          |
        | ; "V\xb6\x03"                                         |   | ; 4                                                         |
        | call dword [sym.imp.KERNEL32.dll_ExitProcess];[gq]    |   | push 4                                                      |
        `-------------------------------------------------------'   | lea eax, [local_ch]                                         |
                                                                    | push eax                                                    |
                                                                    | ; 7                                                         |
                                                                    | push 7                                                      |
                                                                    | ; 0x42a0bc                                                  |
                                                                    | ; "\"\xb6\x03"                                              |
                                                                    | call dword [sym.imp.KERNEL32.dll_GetCurrentProcess];[gc]    |
                                                                    | push eax                                                    |
                                                                    | call dword [0x43dde8];[gs]                                  |
                                                                    | ; CODE XREF from entry1 (0x40230c)                          |
                                                                    | cmp dword [local_ch], 0                                     |
                                                                    | jbe 0x40235c;[gt]                                           |
                                                                    `-------------------------------------------------------------'
                                                                            f t
                                                                            | |
                                                                            | '------------------------.
                                                                           .'                          |
                                                                           |                           |
                                                                       |  0x402357 [gu]           |    |
                                                                       | call fcn.00402e00;[gi]   |    |
                                                                       `--------------------------'    |
                                                                           v                           |
                                                                           |                           |
                                                                     .-----'                           |
                                                                     | .-------------------------------'
                                                                     | |
                                                               .------------------------------------------------------------.
                                                               |  0x40235c [gt]                                             |
                                                               | ; CODE XREF from entry1 (0x402355)                         |
                                                               | push 0                                                     |
                                                               | ; 0x42a0ac                                                 |
                                                               | ; "d\xb6\x03"                                              |
                                                               | call dword [sym.imp.KERNEL32.dll_GetConsoleWindow];[gv]    |
                                                               | push eax                                                   |
                                                               | ; 0x42a1b8                                                 |
                                                               | call dword [sym.imp.USER32.dll_ShowWindow];[gw]            |
                                                               | mov ecx, dword [local_4h]                                  |
                                                               | xor ecx, ebp                                               |
                                                               | call fcn.0040c5e7;[gx]                                     |
                                                               | mov esp, ebp                                               |
                                                               | pop ebp                                                    |
                                                               | ret 0xc                                                    |
                                                               `------------------------------------------------------------'
```
We have two anti-debug checks here.
The first one starts in the "gf" block, and consists of calling `CheckRemoteDebuggerPresent`:
```
BOOL WINAPI CheckRemoteDebuggerPresent(
  _In_    HANDLE hProcess,
  _Inout_ PBOOL  pbDebuggerPresent
);
```
The result is placed in `local_8h`, and if the value is TRUE, this means that the process is being debugged. In this case, the program will call `fcn.00402e00`, which is a suicide function that jumps to a random location on the stack and crashes the program.
Therefore, in order to bypass this check, we will patch the "gh" block:
```assembly
cmp dword [local_8h], 0
je 0x40230a
```
We'll change `je` to `jmp` in order to never jump to the suicide function.
The next anti-debug check is located in the "gp" block:
```assembly
push 4                                                   
lea eax, [local_ch]                                      
push eax                                                 
; 7                                                      
push 7                                                   
; 0x42a0bc                                               
; "\"\xb6\x03"                                           
call dword [sym.imp.KERNEL32.dll_GetCurrentProcess];[gc] 
push eax                                                 
call dword [0x43dde8];[gs]                               
; CODE XREF from entry1 (0x40230c)                       
cmp dword [local_ch], 0                                  
jbe 0x40235c;[gt]                                        
```
`[0x43dde8]` is resolved in runtime to `NtQueryInformationProcess`:
```
__kernel_entry NTSTATUS NtQueryInformationProcess(
  IN HANDLE           ProcessHandle,
  IN PROCESSINFOCLASS ProcessInformationClass,
  OUT PVOID           ProcessInformation,
  IN ULONG            ProcessInformationLength,
  OUT PULONG          ReturnLength
);
```
The `7` parameter is a request for  `ProcessDebugPort`: 
> Retrieves a DWORD_PTR value that is the port number of the debugger for the process. A nonzero value indicates that the process is being run under the control of a ring 3 debugger. 
So `cmp dword [local_ch], 0` will jump to the suicide function if a debugger is present (the port is non-zero).
We change the `jbe` to `jmp` in order to jump over the suicide function.
Note that we have two additional references to `NtQueryInformationProcess` (a.k.a. `dword [0x43dde8]`)
```
[0x004022d0]> axt 0x43dde8
entry1 0x40234b [CALL] call dword [0x43dde8]
main 0x4023b8 [CALL] call dword [0x43dde8]
(nofunc) 0x402539 [CALL] call dword [0x43dde8]
```
Checking these calls shows that they are used for the same purpose. We patch them too in order to avoid the anti-debug checks. 
One last point of interest in the TLS callback is in the "gt" block:
```
push 0                                                  
; 0x42a0ac                                              
; "d\xb6\x03"                                           
call dword [sym.imp.KERNEL32.dll_GetConsoleWindow];[gv] 
push eax                                                
; 0x42a1b8                                              
call dword [sym.imp.USER32.dll_ShowWindow];[gw]         
```
Here we have the `ShowWindow` function called with a command of 0 (SW_HIDE)
```
BOOL ShowWindow(
  HWND hWnd,
  int  nCmdShow
);
SW_HIDE (0) -  Hides the window and activates another window. 
```
So, in order to cancel the logic that hides the application's window, we patch the program and replace the `0` with a `1` (`SW_SHOWNORMAL`).
Now we can run the program again (outside the debugger) and view the console. What we get is:
```
Error during CryptAcquireContext!
2148073494
```
Let's find the location of the error in the assembly:
```
[0x00402b03]> iz~CryptAcquireContext
1370 0x00035c68 0x00437668  34  70 (.rdata) utf16le Error during CryptAcquireContext!\n
1516 0x00039ed6 0x0043b8d6  20  21 (.rdata) ascii CryptAcquireContextW
[0x00402b03]> axt @ 0x00437668
sub.Microsoft_Enhanced_Cryptographic_Provider_v1.0_a00 0x402b05 [DATA] mov edx, str.Error_during_CryptAcquireContext
```
The exact logic is here:
```assembly
0x00402a44      8b35b4a04200   mov esi, dword sym.imp.KERNEL32.dll_GetLastError ; [0x42a0b4:4]=0x3b646 reloc.KERNEL32.dll_GetLastError ;
...
0x00402b03      ffd6           call esi
0x00402b05      ba68764300     mov edx, str.Error_during_CryptAcquireContext ; 0x437668 ; u"Error during CryptAcquireContext!\n"
```
Now we can debug and see that `rax` is `0000000080090016` (which is hex for the `2148073494` value we saw in the console). Searching for the error code in Google shows that this error is called `NTE_BAD_KEYSET` and is returned by `CryptAcquireContext` if:
> The key container could not be opened. A common cause of this error is that the key container does not exist. To create a key container, call CryptAcquireContext using the CRYPT_NEWKEYSET flag. This error code can also indicate that access to an existing key container is denied. Access rights to the container can be granted by the key set creator by using CryptSetProvParam. 
The call itself to `CryptAcquireContext` is:
```assembly
|           0x00402a13      6a00           push 0
|           0x00402a15      6a01           push 1                      ; 1
|           0x00402a17      68a8754300     push str.Microsoft_Enhanced_Cryptographic_Provider_v1.0 ; 0x4375a8 ; u"Microsoft Enhanced Cryptographic Provider v1.0"
|           0x00402a1c      6a00           push 0
|           0x00402a1e      8d45f4         lea eax, [local_ch]
|           0x00402a21      8955ec         mov dword [local_14h], edx
|           0x00402a24      50             push eax
|           0x00402a25      8bf9           mov edi, ecx
|           0x00402a27      c745f0000000.  mov dword [local_10h], 0
|           0x00402a2e      32db           xor bl, bl
|           0x00402a30      c745f8000000.  mov dword [local_8h], 0
|           0x00402a37      c745f4000000.  mov dword [local_ch], 0
|           0x00402a3e      ff1518a04200   call dword [sym.imp.ADVAPI32.dll_CryptAcquireContextW] ; 0x42a018
```
And since the signature of the function is:
```
BOOL CryptAcquireContextW(
  HCRYPTPROV *phProv,
  LPCWSTR    szContainer,
  LPCWSTR    szProvider,
  DWORD      dwProvType,
  DWORD      dwFlags
);
```
This means that `CryptAcquireContextW` is called with `dwFlags` as 0.