the joint distributions are identical. (Note that after Step 4, all the
remains for P3 to do is to interpolate the polynomials, and send
proper commitments and decommitments to their roots.)
In conclusion, the joint distributions in both worlds are compu-
tationally indistinguishable.
Theorem B.2. The protocols of Figure 8 for computing PSI cardi-
nality securely realize the ideal functionality FPSI-CA (Figure 3) with
abort, under a single malicious corruption. The variants for computing
on the payloads of the intersecting items securely realize the ideal
functionality Ff(PSI) (Figure 7)
that the protocol remains secure when P1 is malicious.
We begin by simulating P1 in both f (PSI) protocols, and argue
(1)(cid:101)k: S samples(cid:101)k uniformly at random and sends it to P1.
(2) S extracts the input (X ′, D′(1)) of P1 from the shares sent
to P2 and P3. If there are any inconsistencies, or if P1 sends
any duplicates, S sets abort = 1. Otherwise, S sends the
input to the ideal functionality, and receives f (D), and t =
|X ′ ∩ Y|. We note that D ≡ {(d1, d2)|∃w ∈ X ′ ∩ Y : (w, d1) ∈
(X ′, D′(1)) ∧ (w, d2) ∈ (X , D(2))}.
input shares of P2.
(4) If P1 sends incorrect shares during the opening of Z in Step
4, S sends abort to the functionality, outputs the partial view
of P1, and terminates.
S sends abort to the functionality, outputs the partial view
(3) [(cid:101)V2],[(cid:101)D(2)] : S sends random field elements to simulate the
(5) [(cid:102)Z1],[(cid:102)Z2] : If P1 sends incorrect shares as input to FShuffle,
partial view of P1, and terminates.
of P1, and terminates. Otherwise, S sends random field ele-
ments to simulate the output of FShuffle.
(6)(cid:101)t : S sends the value received from the ideal functionality,
(cid:101)t = |X∩Y| to P1. If P1 reports a different value while verifying
(cid:101)t with P2, S sends abort to the functionality, outputs the
(7) (cid:101)R,(cid:101)b1 : S simulates the outputs of Fcoin using random bits. If
P1 submits ζ (cid:44)t
(cid:101)b1 = false to P1, sends abort to the functionality, outputs
(cid:101)b1 = true as the output of FCheckZero.
the output by sending(cid:101)b2 = true.
Hybrid protocol:(cid:101)b3: If P1 sends incorrect shares to FunionLB,
Otherwise, S sends(cid:101)b3 = true.
(9) For f (PSI),f (psi): If P1 alters his shares [D] before sending
i =1 ri[(z2i − z2i−1)] to FCheckZero, S sends
the partial view of P1, and terminates. Otherwise, he returns
(8) Circuit-based protocol:S simulates the output of the share
conversion, [Z2]A → [Z2]B, by sending random Boolean val-
ues for the replicated shares. If P1 submits correct shares to
the computations of the comparison circuits, S simulates
S simulates the output of FunionLB by sending abort to P1.
them to the functionality that compute the circuit f (psi), S
aborts and outputs the partial view. Else, S hands P1 f(psi)
(obtained from the ideal functionality).
(cid:17)(cid:111)
c≡
z∈{0,1}∗,κ∈N
(2)), κ
z∈{0,1}∗,κ∈N
Claim 3. For the simulator S corrupting party P1 as described
above, and interacting with the functionality Ff(psi),
(cid:110)hybridπcb,A(z)
(cid:16)(X , D
(cid:16)(X , D
(cid:110)idealFf(psi),S(z)
(1)),(Y , D
(2)), κ
(1)),(Y , D
(cid:17)(cid:111)
Proof. Case 0: We consider the case where P1 executes the
protocol honestly. In this case, the joint distributions in the hybrid
and in the ideal worlds are:
For circuit-based protocol:
{hybridπcb,A(z)((X , D(1)),(Y , D(2)), κ)}z∈{0,1}∗,κ∈N = {k, [V2],
[D(2)], [π(D(1)||D(2))], [Z1], [Z2], t, R, b1, [Z2]B, b2, o1, o2, o3}
For hybrid protocol:
{hybridπcb,A(z)((X , D(2)),(Y , D(2)), κ)}z∈{0,1}∗,κ∈N = {k, [V2],
{idealFf(psi),S(z)((X , D(1)),(Y , D(2)), κ)}z∈{0,1}∗,κ∈N = {(cid:101)k, [(cid:101)V2],
[(cid:101)D(2)], [π((cid:101)D(1)||(cid:101)D(2))], [(cid:101)Z1], [(cid:101)Z2],(cid:101)t,(cid:101)R,(cid:101)b1, [(cid:101)Z2]B,(cid:101)b2,(cid:101)o1,(cid:101)o2,(cid:101)o3}
{idealFf(psi),S(z)((X , D(1)),(Y , D(2)), κ)}z∈{0,1}∗,κ∈N = {(cid:101)k, [(cid:101)V2],
[(cid:101)D(2)], [π((cid:101)D(1)||(cid:101)D(1))], [(cid:101)Z1], [(cid:101)Z2],(cid:101)t,(cid:101)R,(cid:101)b1,(cid:101)b3,(cid:101)o1,(cid:101)o2,(cid:101)o3}
As k,(cid:101)k ,R,(cid:101)R, and the shares are sampled uniformly at random
and independent from on another, bi =(cid:101)bi = true, and the outputs
[D(2)], [π(D(1)||D(2))], [Z1], [Z2], t, R, b1, b3, o1, o2, o3}
are identical, the joint distributions in both worlds are identically
distributed.
Case 1: If P1 cheats in either Step 2 by sending inconsistent
replicated shares or by sending X’ that contains duplicated items,
or in Step 4 by sending the wrong messages to P3 (so that he cannot
reconstruct Z properly), in the ideal world, S detects immediately as
he can extract P1’s input. S outputs the partial view and terminates.
hybrid world, P3 will detect the cheating in Step 4 and calls abort.
The joint distribution in the hybrid world is {[V2],[D(2)], ⊥}, which
is identically distributed as that in the ideal world.
The joint distribution in the ideal world is {[(cid:101)V2],[(cid:101)D(2)], ⊥}. In the
Session 10C: Secret SharingCCS ’19, November 11–15, 2019, London, United Kingdom2418{(cid:101)k, [(cid:101)V2], [(cid:101)D(2)], [π((cid:101)D(1)||(cid:101)D(1))], [(cid:101)Z1], [(cid:101)Z2],(cid:101)t,(cid:101)R,(cid:101)b1 = false, ⊥}. In the
Case 2: If P1 aborts in Step 7, it is also clear that abort will
happen in both worlds, and their joint distributions are identically
distributed.
Case 3: If P1 cheats in Step 8 by sending the wrong shares to
FCheckZero, in the ideal world, S aborts with the joint distribution
hybrid world, FCheckZero also return b1 = false with probability of
1 − 1/|F|. So, with probability 1 − 1/|F|, the joint distribution in
the hybrid world is {k, [V2], [D(2)], [π(D(1)||D(1))], [Z1], [Z2], t, R,
b1 = false, ⊥}. These two joint distributions are statistically close.
Case 4: P1 follows the protocols honestly till Step 9.
• In circuit-base branch: If P1 sends the wrong shares to the
ideal functionality F[x]A→[x]B , abort happens in both worlds
and the joint distributions are identically distributed. Else, S
[Z2]B that P1 receives from the ideal functionality in the hy-
brid world. If P1 provides the wrong shares to the ideal func-
tionality that perform the order check on Z2, abort happens
in both worlds, and the joint distributions are identically dis-
hands P1 random strings as [(cid:101)Z2]B to simulate the message
tributed. Else, in the ideal world, S hands P1(cid:101)b2 = true, in the
are {(cid:101)k, [(cid:101)V2], [(cid:101)D(2)], [π((cid:101)D(1)||(cid:101)D(1))], [(cid:101)Z1], [(cid:101)Z2],(cid:101)t,(cid:101)R,(cid:101)b1 = true,
[(cid:101)Z2]B} and {k, [V2], [D(2)], [π(D(1)||D(1))], [Z1], [Z2], t, R,
(cid:101)b3 = true, in the hybrid world P1 receives b3 = true from
b1 = true, [Z2]B} respectively.
• In hybrid branch: If P1 sends the wrong shares to FunionLB,
aborts happen in both worlds, and the joint distributions are
identically distributed. Else, in the ideal world S hands P1
hybrid world, the ideal functionality outputs b2 = true. Pp
to this point, the partial views in the ideal and hybrid world
the ideal functionality as he behaves honestly till now.
Case 5: If P1 cheats in Step 10 by alter his shares before sending
them to the function to compute f(psi), S aborts and output the
partial view. With similar arguments as in case 4, we claim that
the joint distributions in both worlds are also computationally
indistinguishable in this case. Else, S hands P1 the output f(psi) he
obtained by querying the ideal functionality. In the hybrid world, P1
receives the identical output from the ideal functionality. The joint
distributions in both worlds are identically distributed as argued in
case 0.
In conclusion, the joint distributions in both worlds are compu-
tationally indistinguishable.
We now present the simulation of P3.
and receives t = |X∩Y|.S chooses 2n−t random strings from
the domain of the PRP, without replacement. He duplicates
copy of the duplicated items, and (n − t) other items. He
randomly shuffles Vi, creates random replicated sharings of
these elements, and sends shares to P3, on behalf of P1 and
P2. He also sends P3 random strings to simulate the data
(1) [(cid:101)V1],[(cid:103)D(1)],[(cid:101)V2],[(cid:103)D(2)] : S queries the ideal functionality
the first t strings and create two sets,(cid:101)V1,(cid:101)V2, each with one
shares [(cid:103)D(1)], [(cid:103)D(2)] that P3 receives from P1 and P2.
(2) (cid:101)Z: S simulates the opening of(cid:101)Z by sending the missing
(3) [π((cid:101)Z)],[π((cid:101)D(1)||(cid:101)D(2))]: S receives π from P3, and uses π to
shuffle Z, computing π((cid:101)z). S simulates the output of FShuffle
share of each value on behalf of both P1 and P2.
by creating new replicated shares of π((cid:101)Z), shares are random
strings. S sends P3 random strings as shares [π((cid:101)D(1)||(cid:101)D(2))].
S then observes the message t P3 sends to P1 and P2 in
Step 7, indicating the supposed intersection size. If P3 sends
different t to each of P1 and P2, S sends abort to the trusted
party, and outputs the partial view. If P3 sends the same
t to P1 and P2, but Z1 is not in the correct format, S sets
abort1 = 1. If Z2 is not in strictly increasing order, he sets
abort2 = 1. If P3 sends the same t′  |X ′ ∩ Y|, abort1 = 1. With similar arguments in case 2, the
claim that the joint distributions in both worlds are computationally
indistinguishable holds.
Case 4: After Step 7, it is not difficult to verify that no matter what
P3 does, the simulator can always simulate the joint distribution,
which is computationally indistinguishable from that in the hybrid
world: if P3 sends wrong shares to FCheckZero in Steps 8, 9, or 10 in
the ideal world, S always aborts, and in the hybrid world, P1 and
P2 always catch P3 with non-negligible probability.
In conclusion, the joint distributions in both worlds are compu-
tationally indistinguishable.
Session 10C: Secret SharingCCS ’19, November 11–15, 2019, London, United Kingdom2420