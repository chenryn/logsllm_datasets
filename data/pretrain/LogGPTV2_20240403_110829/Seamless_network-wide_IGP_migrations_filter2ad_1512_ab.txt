refer to these scenarios as ﬂat2hier, hier2ﬂat and hier2hier,
respectively.
Unlike to protocol replacement, changing the mode of the
IGP conﬁguration can require a speciﬁc router migration
316Figure 1: Bad Square Gadget. When the IGP
hierarchy is modiﬁed, a given migration ordering
is needed between B1 and E1 to avoid forwarding
loops.
ordering. Indeed, the nh function can change in hierarchy
modiﬁcation scenarios because of the intra-zone over inter-
zone path preference rule applied by routers in hierarchi-
cal IGPs (see Section 2). Hence, forwarding loops can arise
due to inconsistencies between already migrated routers and
routers that are not migrated yet. Consider for example the
topology depicted on the left side of Fig. 1. In a ﬂat2hier
scenario, some routers change their next-hop towards desti-
nations E1 and E2. In particular, the right side of Fig. 1
shows the next-hop function for all the routers when the des-
tination is E2. During the migration process, a forwarding
loop arises for traﬃc destined to E2 if B1 is migrated before
E1. Indeed, B1 reaches E2 via E1 in hierarchical mode, and
E1 reaches E2 via B1 in ﬂat mode. Hence, for each time t
where B1 is already migrated and E1 is not, the forward-
ing path used by B1 is π(B1, E2, t) = {(B1 E1 B1)}, since
nhf inal(B1, E2) = {E1} and nhinit(E1, E2) = {B1}. No-
tice that such a loop lasts until E1 is migrated. A symmet-
ric constraint holds between routers B2 and E2 for traﬃc
destined to E1. A loop-free migration can be achieved by
migrating E1 and E2 before B1 and B2.
Nevertheless, there are also cases in which it is not possible
to avoid loops during the migration. Consider, for example,
the topology represented in Fig. 2. In this topology, sym-
metric constraints between B1 and B2 for traﬃc destined
to E2 and E3 imply the impossibility of ﬁnding a loop-free
ordering. We refer the reader to the central and the right
parts of Fig. 2 to visualize the next-hop functions in ﬂat and
hierarchical modes.
Similar examples can be found for hier2ﬂat and hier2hier
migrations. They are omitted for brevity. Observe that
problems in hierarchy modiﬁcation scenarios are mitigated
in protocols such as IS-IS that natively support multiple
adjacencies [14]. In fact, multiple adjacencies belonging to
diﬀerent zones decrease the number of cases in which the nh
function changes during the migration. However, migration
loops can still arise, depending on the initial and the ﬁnal
conﬁgurations.
Route summarization
Introducing or removing route summarization (i.e., summ
scenarios) in a network can lead to forwarding loops. For
example, consider the topology represented in the left part
of Fig. 3. The right part of the ﬁgure visualizes the nh
functions before and after the introduction of route summa-
rization. It is evident that the introduction of route summa-
rization on B1 and B2 can lead to a forwarding loop between
B3 and B4 for traﬃc destined to E2. Indeed, before sum-
marizing routes, B3 and B4 prefer to send traﬃc destined
Figure 3: Route summarization gadget. When sum-
marization is introduced or removed, a speciﬁc mi-
gration ordering is needed between B3 and B4 to
avoid forwarding loops.
Steps for a Seamless IGP Migration
1. Compute a loop-free order in which routers can
be migrated without creating loops.
2. Introduce the ﬁnal IGP conﬁguration network-
wide. In this step, routers still forward packets
according to the initial IGP conﬁguration only.
3. Monitor the status of the IGP conﬁgurations.
Wait for the convergence of the ﬁnal IGP conﬁg-
uration.
4. Migrate routers
following the pre-computed
loop-free order. Migrating a router means con-
ﬁguring it to forward packets according to the
ﬁnal IGP conﬁguration.
5. Remove the initial IGP conﬁguration from all
the routers.
Figure 4: Proposed methodology for seamless IGP
migrations.
to E2 via B2. On the other hand, when summarization is
introduced, B1 and B2 propagate one aggregate for both E1
and E2 with the same weight. Hence, B3 and B4 change
their next-hop since the path to B1 has a lower weight than
the path to B2.
As for hierarchy modiﬁcations, no loop-free ordering exists
in some cases. An example of such a situation can be built by
simply replicating the topology in Fig. 3 so that symmetric
constraints on the migration order hold between B3 and B4.
4. METHODOLOGY
Fig. 4 illustrates the main steps of our methodology. In
the ﬁrst step, we pre-compute an ordering in which to seam-
lessly migrate routers, with no packet loss (Section 5). When
such an ordering does not exist, we use technical fallback so-
lutions (see [15]). Fallback solutions are only exploited as a
backup since they make the whole migration process slower
and harder to pilot. As we always could ﬁnd an ordering for
all the ISP topologies we analyzed (Section 7), we believe
that fallback solutions will be rarely needed in practice.
The actual migration process begins in the second step
of our methodology. As a basic operation, we exploit a
known migration technique called ships-in-the-night [1, 2, 4],
in which both the initial and the ﬁnal IGP conﬁgurations are
317Figure 2: Loop Gadget. No migration ordering is loop-free for f lat2hier and hier2f lat scenarios because of
contradictory constraints between B1 and B2.
running at the same time on each router in separate rout-
ing processes. Routing processes are ranked on the basis of
their priority, the Administrative Distance (AD). When a
route for a given preﬁx is available from several processes,
the one with the lowest AD is installed in the FIB. In this
step, we set the AD of the routing process running the ﬁnal
IGP conﬁguration to 255, since this setting ensures that no
route coming from that process is installed in the FIB [23].
All ISP routers typically support this feature.
In the third step of the migration, we wait for network-
wide convergence of the ﬁnal IGP conﬁguration. After this
step, both IGPs have reached a stable routing state. In the
fourth step, we progressively migrate routers following the
ordering pre-computed in the ﬁrst Step of the methodology.
For this purpose, we lower the AD of the routing process
running the ﬁnal IGP such that it is smaller than the AD
of the process running the initial conﬁguration. Doing so,
the router installs the ﬁnal routes in its FIB. Since a rout-
ing entry change takes about 100ms before being reﬂected
in the FIB [24], we wait for a given amount time (typically
few seconds) before migrating the next router in the order-
ing. This step ensures a loop-free migration of the network.
Notice that switching the AD and updating the FIB are loss-
less operations on ISP routers [25]. Lowering the AD on all
the routers at once is not a viable solution in practice as
it can generate protocol-dependent loops and control-plane
traﬃc storms concerning all the protocols (BGP, LDP, PIM,
etc.) that rely on the IGP. Moreover, this approach prevents
operators from controlling the migration process and from
backtracking to a previously working state when a problem
is detected, e.g., a router that does not receive an intended
command. All the discussions that we had with network op-
erators further conﬁrm that they prefer to gradually migrate
their network to have full-control of the process.
In the last step, we remove, in any order, the initial IGP
conﬁguration from the routers. This is safe since all of them
are now using the ﬁnal IGP to forward traﬃc.
5. LOOP-FREE MIGRATIONS
In this section, we study the problem of migrating a net-
work from one link-state IGP conﬁguration to another with-
out creating any loop. Firstly, we present the algorithms we
use to compute a loop-free router migration ordering. Then,
we discuss how to adapt the algorithms to address conges-
tion and network failures.
5.1 Migration Ordering Computation
We now study the following problem from an algorithmic
perspective.
Problem 2. Given an initial and a ﬁnal next-hop func-
1: loop enumeration run(G = (V, E),D,nhinit,nhf inal)
2: CS ← ∅
3: for d ∈ D do
4:
¯Gd = (V, ¯E), with ¯E = {(u v)} such that v ∈ nhinit(u, d)
or v ∈ nhf inal(u, d)
for each cycle L in ¯Gd do
Vinit,L = {u ∈ L : ∃v, (u v) ∈ L, v ∈ nhinit(u, d) but
v 6∈ nhf inal(u, d)}
Vf inal,L = {u ∈ L : ∃v, (u v) ∈ L, v ∈ nhf inal(u, d)
but v 6∈ nhinit(u, d)}
CS ← CS ∪ {u0 ∨ · · · ∨ uk  t′. Then, L cannot arise ∀t  t′, since
nh(cu, d, t) = nhf inal(cu, d) implies that cu+1 6∈ nh(cu, d, t)
Figure 7: Routing Trees Heuristic.
by deﬁnition of Vinit,L. Since t′′ > t′, no time exists such
that L arises during the migration.
Theorem 1. The Loop Enumeration Algorithm is correct
and complete.
Proof. The statement follows by Lemma 1, since the
linear program encodes all the suﬃcient and necessary con-
ditions for any migration loop to not arise.
It is easy to verify that the algorithm requires exponential
time. Indeed, the algorithm is based on the enumeration of
all the cycles in a graph, and the number of cycles in a graph
can be exponential with respect to the number of nodes.
Routing Trees Heuristic
The Routing Tree Heuristic is illustrated in Fig. 7. As the
ﬁrst step, for each destination d ∈ D, the heuristic exploits
a greedy procedure to compute a set Sd of nodes that are
guaranteed not to be part of any loop (line 4). The greedy
procedure (lines 20-32) incrementally (and greedily) grows
the set Sd, adding a node to Sd at each iteration if and only