---
title:  'Create an app to run management commands'
description: Learn how to create an app to run management commands using Kusto client libraries.
ms.reviewer: yogilad
ms.topic: how-to
ms.date: 11/07/2023
---
# Create an app to run management commands
In this article, you learn how to:
> [!div class="checklist"]
>
> - [Run a management command and process the results](#run-a-management-command-and-process-the-results)
> - [Change the table level ingestion batching policy](#change-the-table-level-ingestion-batching-policy)
> - [Show the database level retention policy](#show-the-database-level-retention-policy)
## Prerequisites
[Set up your development environment](app-set-up.md) to use the Kusto client library.
## Run a management command and process the results
In your preferred IDE or text editor, create a project or file named *management commands* using the convention appropriate for your preferred language. Then add the following code:
1. Create a client app that connects your cluster. Replace the `` placeholder with your cluster name.
    ### [C\#](#tab/csharp)
    > [!NOTE]
    > For management commands, you'll use the `CreateCslAdminProvider` client factory method.
    ```csharp
    using Kusto.Data;
    using Kusto.Data.Net.Client;
    namespace ManagementCommands {
      class ManagementCommands {
        static void Main(string[] args) {
          var clusterUri = "";
          var kcsb = new KustoConnectionStringBuilder(clusterUri)
              .WithAadUserPromptAuthentication();
          using (var kustoClient = KustoClientFactory.CreateCslAdminProvider(kcsb)) {
          }
        }
      }
    }
    ```
    ### [Python](#tab/python)
    ```python
    from azure.kusto.data import KustoClient, KustoConnectionStringBuilder
    def main():
      cluster_uri = ""
      kcsb = KustoConnectionStringBuilder.with_interactive_login(cluster_uri)
      with KustoClient(kcsb) as kusto_client:
    if __name__ == "__main__":
      main()
    ```
    ### [Typescript](#tab/typescript)
    ```typescript
    import { Client as KustoClient, KustoConnectionStringBuilder } from "azure-kusto-data/";
    import { InteractiveBrowserCredentialInBrowserOptions } from "@azure/identity";
    async function main() {
      const clusterUri = "";
      const authOptions = {
        clientId: "5e39af3b-ba50-4255-b547-81abfb507c58",
        redirectUri: "http://localhost:5173",
      } as InteractiveBrowserCredentialInBrowserOptions;
      const kcsb = KustoConnectionStringBuilder.withUserPrompt(clusterUri, authOptions);
      const kustoClient = new KustoClient(kcsb);
    }
    main();
    ```
    [!INCLUDE [node-vs-browser-auth](../../../includes/node-vs-browser-auth.md)]
    ### [Java](#tab/java)
    ```java
    import com.microsoft.azure.kusto.data.Client;
    import com.microsoft.azure.kusto.data.ClientFactory;
    import com.microsoft.azure.kusto.data.KustoOperationResult;
    import com.microsoft.azure.kusto.data.KustoResultSetTable;
    import com.microsoft.azure.kusto.data.KustoResultColumn;
    import com.microsoft.azure.kusto.data.auth.ConnectionStringBuilder;
    public class ManagementCommands {
      public static void main(String[] args) throws Exception {
        try {
          String clusterUri = "";
          ConnectionStringBuilder kcsb = ConnectionStringBuilder.createWithUserPrompt(clusterUri);
          try (Client kustoClient = ClientFactory.createClient(kcsb)) {
          }
        }
      }
    }
    ```
    ---
1. Define a function that prints the command being run and its resultant tables. This function unpacks the column names in the result tables and prints each name-value pair on a new line.
    ### [C\#](#tab/csharp)
    ```csharp
    static void PrintResultsAsValueList(string command, IDataReader response) {
      while (response.Read()) {
        Console.WriteLine("\n{0}\n", new String('-', 20));
        Console.WriteLine("Command: {0}", command);
        Console.WriteLine("Result:");
        for (int i = 0; i 
    ### [Java](#tab/java)
    ```java
    public static void printResultsAsValueList(String command, KustoResultSetTable results) {
      while (results.next()) {
        System.out.println("\n" + "-".repeat(20) + "\n");
        System.out.println("Command: " + command);
        System.out.println("Result:");
        KustoResultColumn[] columns = results.getColumns();
        for (int i = 0; i ` placeholder with your database name.
    ### [C\#](#tab/csharp)
    ```csharp
    string database = "";
    string table = "MyStormEvents";
    // Create a table named MyStormEvents
    // The brackets contain a list of column Name:Type pairs that defines the table schema
    string command = @$".create table {table}
                      (StartTime:datetime,
                       EndTime:datetime,
                       State:string,
                       DamageProperty:int,
                       DamageCrops:int,
                       Source:string,
                       StormSummary:dynamic)";
    ```
    ### [Python](#tab/python)
    ```python
    database = ""
    table = "MyStormEvents"
    # Create a table named MyStormEvents
    # The brackets contain a list of column Name:Type pairs that defines the table schema
    command = ".create table " + table + " " \
              "(StartTime:datetime," \
              " EndTime:datetime," \
              " State:string," \
              " DamageProperty:int," \
              " DamageCrops:int," \
              " Source:string," \
              " StormSummary:dynamic)"
    ```
    ### [Typescript](#tab/typescript)
    ```typescript
    const database = "";
    const table = "MyStormEvents";
    // Create a table named MyStormEvents
    // The brackets contain a list of column Name:Type pairs that defines the table schema
    const command = `.create table ${table}
                  (StartTime:datetime,
                   EndTime:datetime,
                   State:string,
                   DamageProperty:int,
                   Source:string,
                   StormSummary:dynamic)`;
    ```
    ### [Java](#tab/java)
    ```java
    String database = "";
    String table = "MyStormEvents";
    // Create a table named MyStormEvents
    // The brackets contain a list of column Name:Type pairs that defines the table schema
    String command = ".create table " + table + " " +
                     "(StartTime:datetime," +
                     " EndTime:datetime," +
                     " State:string," +
                     " DamageProperty:int," +
                     " DamageCrops:int," +
                     " Source:string," +
                     " StormSummary:dynamic)";
    ```
    ---
1. Run the command and print the result using the previously defined function.
    ### [C\#](#tab/csharp)
    > [!NOTE]
    > You'll use the `ExecuteControlCommand` method to run the command.
    ```csharp
    using (var response = kustoClient.ExecuteControlCommand(database, command, null)) {
      PrintResultsAsValueList(command, response);
    }
    ```
    ### [Python](#tab/python)
    > [!NOTE]
    > You'll use the `execute_mgmt` method to run the command.
    ```python
    response = kusto_client.execute_mgmt(database, command)
    print_result_as_value_list(command, response)
    ```
    ### [Typescript](#tab/typescript)
    > [!NOTE]
    > You'll use the `executeMgmt` method to run the command.
    ```typescript
    const response = await kustoClient.executeMgmt(database, command);
    printResultsAsValueList(command, response)
    ```
    ### [Java](#tab/java)
    ```java
    KustoOperationResult response = kusto_client.execute(database, command);
    printResultsAsValueList(command, response.getPrimaryResults());
    ```
    ---
The complete code should look like this:
### [C\#](#tab/csharp)
```csharp
using Kusto.Data;
using Kusto.Data.Net.Client;
namespace ManagementCommands {
  class ManagementCommands {
    static void Main(string[] args) {
      string clusterUri = "https://";
      var kcsb = new KustoConnectionStringBuilder(clusterUri)
          .WithAadUserPromptAuthentication();
      using (var kustoClient = KustoClientFactory.CreateCslAdminProvider(kcsb)) {
        string database = "";
        string table = "MyStormEvents";
        // Create a table named MyStormEvents
        // The brackets contain a list of column Name:Type pairs that defines the table schema
        string command = @$".create table {table} 
                          (StartTime:datetime,
                           EndTime:datetime,
                           State:string,
                           DamageProperty:int,
                           DamageCrops:int,
                           Source:string,
                           StormSummary:dynamic)";
        using (var response = kustoClient.ExecuteControlCommand(database, command, null)) {
          PrintResultsAsValueList(command, response);
        }
      }
    }
    static void PrintResultsAsValueList(string command, IDataReader response) {
      while (response.Read()) {
        Console.WriteLine("\n{0}\n", new String('-', 20));
        Console.WriteLine("Command: {0}", command);
        Console.WriteLine("Result:");
        for (int i = 0; i < response.FieldCount; i++) {
          Console.WriteLine("\t{0} - {1}", response.GetName(i), response.IsDBNull(i) ? "None" : response.GetString(i));
        }
      }
    }
  }
}
```
### [Python](#tab/python)