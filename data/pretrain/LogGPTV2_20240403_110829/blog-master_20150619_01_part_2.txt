执行DML，等待，这里可以清晰的看到等待的对象  
```  
postgres=# insert into t1 values (1);  
LOG:  00000: LockAcquire: lock [13181,16903] RowExclusiveLock  
LINE 1: insert into t1 values (1);  
                    ^  
LOCATION:  LockAcquireExtended, lock.c:724  
LOG:  00000: LockAcquire: found: lock(0x7f79f1a62020) id(13181,16903,0,0,0,1) grantMask(108) req(0,0,1,0,0,0,0)=3 grant(0,0,1,0,0,0,0)=2 wait(1) type(RowExclusiveLock)  
LINE 1: insert into t1 values (1);  
                    ^  
LOCATION:  LOCK_PRINT, lock.c:319  
LOG:  00000: LockAcquire: new: proclock(0x7f79f82737b0) lock(0x7f79f1a62020) method(1) proc(0x7f7a0fec6be8) hold(0)  
LINE 1: insert into t1 values (1);  
                    ^  
LOCATION:  PROCLOCK_PRINT, lock.c:331  
LOG:  00000: WaitOnLock: sleeping on lock: lock(0x7f79f1a62020) id(13181,16903,0,0,0,1) grantMask(108) req(0,0,2,0,0,0,0)=4 grant(0,0,1,0,0,0,0)=2 wait(1) type(RowExclusiveLock)  
LINE 1: insert into t1 values (1);  
                    ^  
LOCATION:  LOCK_PRINT, lock.c:319  
LOG:  00000: DumpAllLocks: waiting on: lock(0x7f79f1a62020) id(13181,16903,0,0,0,1) grantMask(108) req(0,0,2,0,0,0,0)=4 grant(0,0,1,0,0,0,0)=2 wait(2) type(INVALID)  
LINE 1: insert into t1 values (1);  
                    ^  
LOCATION:  LOCK_PRINT, lock.c:319  
LOG:  00000: DumpAllLocks: proclock(0x7f79f82737b0) lock(0x7f79f1a62020) method(1) proc(0x7f7a0fec6be8) hold(0)  
LINE 1: insert into t1 values (1);  
                    ^  
LOCATION:  PROCLOCK_PRINT, lock.c:331  
LOG:  00000: DumpAllLocks: lock(0x7f79f1a62020) id(13181,16903,0,0,0,1) grantMask(108) req(0,0,2,0,0,0,0)=4 grant(0,0,1,0,0,0,0)=2 wait(2) type(INVALID)  
LINE 1: insert into t1 values (1);  
                    ^  
LOCATION:  LOCK_PRINT, lock.c:319  
LOG:  00000: DumpAllLocks: proclock(0x7f79f8273960) lock(0x7f79f1a62020) method(1) proc(0x7f7a0fec6ed0) hold(108)  
LINE 1: insert into t1 values (1);  
                    ^  
LOCATION:  PROCLOCK_PRINT, lock.c:331  
LOG:  00000: DumpAllLocks: lock(0x7f79f1a62020) id(13181,16903,0,0,0,1) grantMask(108) req(0,0,2,0,0,0,0)=4 grant(0,0,1,0,0,0,0)=2 wait(2) type(INVALID)  
LINE 1: insert into t1 values (1);  
                    ^  
LOCATION:  LOCK_PRINT, lock.c:319  
LOG:  00000: DumpAllLocks: proclock(0x7f79f8273918) lock(0x7f79f1a62020) method(1) proc(0x7f7a0fec71b8) hold(0)  
LINE 1: insert into t1 values (1);  
                    ^  
LOCATION:  PROCLOCK_PRINT, lock.c:331  
LOG:  00000: DumpAllLocks: lock(0x7f79f1a62020) id(13181,16903,0,0,0,1) grantMask(108) req(0,0,2,0,0,0,0)=4 grant(0,0,1,0,0,0,0)=2 wait(2) type(INVALID)  
LINE 1: insert into t1 values (1);  
                    ^  
LOCATION:  LOCK_PRINT, lock.c:319  
```  
会话D：  
使用LOCK 命令，同时使用 NOWAIT参数：  
```  
postgres=# begin;  
BEGIN  
postgres=# lock table t1 in access exclusive mode nowait;  
LOG:  00000: LockAcquire: lock [13181,16903] AccessExclusiveLock  
LOCATION:  LockAcquireExtended, lock.c:724  
LOG:  00000: LockAcquire: found: lock(0x7f79f1a62020) id(13181,16903,0,0,0,1) grantMask(108) req(0,0,1,0,0,0,0)=3 grant(0,0,1,0,0,0,0)=2 wait(1) type(AccessExclusiveLock)  
LOCATION:  LOCK_PRINT, lock.c:319  
LOG:  00000: LockAcquire: new: proclock(0x7f79f82737b0) lock(0x7f79f1a62020) method(1) proc(0x7f7a0fec6be8) hold(0)  
LOCATION:  PROCLOCK_PRINT, lock.c:331  
LOG:  00000: LockAcquire: conditional lock failed: lock(0x7f79f1a62020) id(13181,16903,0,0,0,1) grantMask(108) req(0,0,1,0,0,0,0)=3 grant(0,0,1,0,0,0,0)=2 wait(1) type(AccessExclusiveLock)  
LOCATION:  LOCK_PRINT, lock.c:319  
LOG:  00000: LockReleaseAll: lockmethod=1  
LOCATION:  LockReleaseAll, lock.c:1949  
LOG:  00000: LockReleaseAll done  
LOCATION:  LockReleaseAll, lock.c:2196  
LOG:  00000: LockReleaseAll: lockmethod=2  
LOCATION:  LockReleaseAll, lock.c:1949  
LOG:  00000: LockReleaseAll done  
LOCATION:  LockReleaseAll, lock.c:2196  
ERROR:  55P03: could not obtain lock on relation "t1"  
LOCATION:  RangeVarGetRelidExtended, namespace.c:391  
```  
因为目前PostgreSQL DDL 语法没有NOWAIT选项，（除了set tablespace)。  
所以要解决无休止等待的问题，需要另辟蹊径。  
## DDL NOWAIT方法  
方法也比较多：  
1\. 使用lock_timeout  
在执行DDL前，设置本地会话的锁超时为1毫秒。那么影响也只有1毫秒。  
```  
postgres=# set lock_timeout='1ms';  
SET  
postgres=# alter table t1 add column cc int;  -- 等待1毫秒后如果无法获得锁，立即返回。  
ERROR:  canceling statement due to lock timeout  
```  
2\. 在事务中叠加lock nowait命令,不需要执行下面的DDL。  
```  
postgres=# \h lock  
Command:     LOCK  
Description: lock a table  
Syntax:  
LOCK [ TABLE ] [ ONLY ] name [ * ] [, ...] [ IN lockmode MODE ] [ NOWAIT ]  
where lockmode is one of:  
    ACCESS SHARE | ROW SHARE | ROW EXCLUSIVE | SHARE UPDATE EXCLUSIVE  
    | SHARE | SHARE ROW EXCLUSIVE | EXCLUSIVE | ACCESS EXCLUSIVE  
```  
例如,  
```  
postgres=# begin;  
BEGIN  
postgres=# lock table t1 in access exclusive mode nowait;  --  如果获得锁失败了，不需要执行下面的DDL。  
LOCK TABLE  
postgres=# alter table t1 add column cc1 int;  
ALTER TABLE  
postgres=# end;  
COMMIT  
```  
个人还是推荐第一种方法，更方便，但是不要在全局参数中这么设置，只需要在当前维护操作的会话中设置。  
3\. 其他：  
3\.1\. 如果要实现DDL的nowait，这里的一些锁函数需要调整一下，当使用nowait时LockAcquire传入dontWait=true；  
或者增加一个GUC参数，控制是否NOWAIT(不过感觉和lock timeout有点冲突，没有必要)。  
```  
LockRelationOid  
LockRelation  
LockRelationIdForSession  
LockRelationForExtension  
XactLockTableInsert  
XactLockTableWait  
SpeculativeInsertionLockAcquire  
SpeculativeInsertionWait  
LockDatabaseObject  
LockSharedObject  
LockSharedObjectForSession  
```  
3\.2\. 事件触发器行么？-- 不行，因为进入等待后你不能自己检测自己的状态。  
例如，这样是行不通的。  
```  
CREATE OR REPLACE FUNCTION online_ddl_command()  
  RETURNS event_trigger  
 LANGUAGE plpgsql  
  AS $$  
BEGIN  
  raise notice 'event trigger';  
  perform 1 from pg_stat_activity where pid=pg_backend_pid() and waiting;  
  if found then  
    RAISE EXCEPTION 'command % is waiting lock, I must abort it.', tg_tag;  
  end if;  
END;  
$$;  
CREATE EVENT TRIGGER online_ddl ON ddl_command_start  
   EXECUTE PROCEDURE online_ddl_command();  
```  
## 参考  
1\. http://blog.163.com/digoal@126/blog/static/163877040201422083228624  
2\. src/include/pg_config_manual.h  
3\. http://www.postgresql.org/docs/devel/static/runtime-config-developer.html  
4\. http://dev.mysql.com/doc/refman/5.6/en/innodb-create-index-overview.html#innodb-online-ddl-summary-grid  
5\. src/backend/storage/lmgr/lock.c  
如果要使用nowait, 在调用LockAcquire 时，dontWait传入true。  
```  
/*  
 * LockAcquire -- Check for lock conflicts, sleep if conflict found,  
 *              set lock if/when no conflicts.  
 *  
 * Inputs:  
 *      locktag: unique identifier for the lockable object  
 *      lockmode: lock mode to acquire  
 *      sessionLock: if true, acquire lock for session not current transaction  
 *      dontWait: if true, don't wait to acquire lock  
 *  
 * Returns one of:  
 *              LOCKACQUIRE_NOT_AVAIL           lock not available, and dontWait=true  
 *              LOCKACQUIRE_OK                          lock successfully acquired  
 *              LOCKACQUIRE_ALREADY_HELD        incremented count for lock already held  
 *  
 * In the normal case where dontWait=false and the caller doesn't need to  
 * distinguish a freshly acquired lock from one already taken earlier in  
 * this same transaction, there is no need to examine the return value.  
 *  
 * Side Effects: The lock is acquired and recorded in lock tables.  
 *  
 * NOTE: if we wait for the lock, there is no way to abort the wait  
 * short of aborting the transaction.  
 */  
LockAcquireResult  
LockAcquire(const LOCKTAG *locktag,  
                        LOCKMODE lockmode,  
                        bool sessionLock,  
                        bool dontWait)  
{  
        return LockAcquireExtended(locktag, lockmode, sessionLock, dontWait, true);  
}  
```  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")