1201
---
## Page 1203
桌面范围域的对象标识和查询服务。
[1]http://pim.kde.org/development/meetings/osnabrueck4/overview.php
12.3.3Akonadi的架构
在这次会议中制定的第一份设计草案中，就提到了许多在该架构的
后续迭代中仍然存在的关键点。最重要的决策之一就是不使用
DBUS来传输实际的负载数据，这虽然是Akonadi中最显然可选的
IPC机制。取而代之的是使用了一个名为IMAP的、能够处理成批传
输的、独立的传输通道和协议。之所以选择它，主要考虑到它能够
对数据传输过程进行控制，因此可以取消长的数据传输，这样数
据管道就不会阻塞控制管道。基于IMAP的数据传输的负载要比通
过IPC机制传输小得多，因为该协议就是面向快速和流式传送大量
数据而设计的。而DBUS的传输性能正是放弃它的主要原因之一，
在其文档中就已经明确地说明它不是针对这种应用场景设计的。这
将可以复用现有的IMAP程序库，在实现该协议时可以减少很多工
作，不管是对KDEPIM开发团队还是未来想集成Akonadi的第三方开
发团队均是如此。它还可以保留通用的访问邮件内容的功能，不仅
仅是Akonadi特定的工具，还可以通过诸如pine或mutt之类的命令行
电子邮件应用程序。如果保管在一个系统中的数据将被锁定，无法
通过其他手段来访问，那么会增加用户的担心。由于IMAP只识别
电子邮件，因此需要对该协议进行扩展，以对其他mime类型提供支
持，不过仍然可以保留基本的协议兼容性。在选择数据传输协议
时，还曾经讨论过http/webdav，它可以复用诸如Apache之类的现有
http服务器，但这种方法并未得到足够的支持。
Akonadi的一个核心观念是为系统中所有的PIM数据和相关的元数据
建立一个集中的缓存。然而老框架假定对后端存储的访问通常是在
线式的，而Akonadi引用了本地副本机制，这样当需要向用户显示数
据时能够马上提供，例如它可以保留许多可能已经获得的数据，以
便避免不必要的重新下载。应用程序希望能够直接从内存中获得当
前所需显示的信息（例如，在电子邮件应用程序中，只有当前文件
夹中的少量电子邮件的头信息是需要显示的），而无需自己维护磁
盘缓存。这样就需要使缓存是共享的和保持一致的，减少应用程序
对内存的访问，并采用惰性加载（lazy-loaded）等优化技术，不过
这样做用户无法马上看到数据。由于缓存是一直可用的，虽然可能
不完整，但在绝大多数情况下仍然是可离线使用的。这大大加强了
基于不可靠、低带宽、高延迟网络时的健壮性。为了支持非拥塞性
1202
---
## Page 1204
的并发访问，该服务器设计成了为每个连接保存一个执行上下文
（线程），所有层要考虑的并发上下文的数量可能很庞大。这意味
着针对状态的操作将引入事务性语义，需要进行严格的锁定，能够
检查可以导致状态不一致的交叉性操作等。它同时也是选择管理系
统内容的磁盘存储技术时所需考虑的关键约束，它也必须能够支持
高强度的并发读、写操作。由于状态可能会在任何时候被当前会话
（连接）所修改，因此需要一种通知机制，可靠、完整、快速地通
知所有当前修改所影响的连接终端。这也是将低延迟、低带宽但高
相关性的控制信息和高带宽、高延迟（由于存在潜在的服务器往返
通信）、时间性不强的批量数据分并的另一个理由，这样就可以避
题。如果应用程序是并发的，而在数据传输的同时还将发送带外的
通知信息时则更重要。虽然这对于应用Akonadi的潜在应用程序而言
并非主流的场景，但有足够的理由认为未来的应用程序将会有更多
的并发，而不仅仅是因为存在诸如ThreadWeaver之类的工具，我们
在本章的下一个小节中将介绍它。在针对KDE的Akonadi访问程序库
中的一部分高等级的辅助类中就已经用到了这一功能。
Akonadi中还有一个基础性的视角，它在其第一次选代的设计中就已
经存在，那就是用来访问特定类型存储后端（如群件服务器）的组
件将以单独的进程运行。这样做有好几个好处。与该服务器潜在的
错误、缓慢或不可靠的通信都不会影响整个系统的可靠性。代理!1
可能会崩溃，但不会使整个服务器崩溃。如果和服务器之间的同步
交互更方便，或者从其他后端获取数据只有这一种方法，那么它将
被阻塞而不会阻塞其他与Akonadi的交互。它们可以通过链接第三方
程序库的方法，以避免对核心系统的依赖。它们可以独立地授权。
它对于需要访问并源软件之外的程序库时十分重要。它同时也将正
确地隔离Akonadi服务器的地址空间，因此减少了潜在的安全问题。
这样第三方编写它也更简单，也能够更容易地在已运行的系统上部
署、测试，无论什么编程语言都能够匹配，同时也提供了DBUS和
IMAP的支持。当然它也存在缺点，那就是必须对Akonadi存储空间
中的数据进行序列化，存储空间是跨进程边界的。不过这在实践中
很少考虑，其原因有两个方面。首先，它是在后台发生的，从用户
的视角看不会对UI层面有任何干扰。其次，不管是本地已有的数
据，还是在缓存的数据，或者从网络套接字（Socket）中获取的数
据，当用户请求时都将把数据传给未解析的Akonadi服务器套接字
上，在很多情况下甚至无需复制它。如果用户请求的数据是其中的
1203
---
## Page 1205
一部分，那么就将能够以最快速度呈现，避免了过长的等待时间。
在多数情况下，代理和服务器存储之间的交互性能并不是关键的。
从并发的观点看，Akonadi有两层。在multiprocessing（多处理）
层，每个Akonadi用户（也就是一个应用程序或一个代理）都有自己
独立的地址空间和资源获取上下文（文件、网络套接字等）。这些
进程可以打开一个或多个到服务器的连接，每个都将分别以一个线
程表示。为了平衡线程和进程的好处，最终决定都使用：进程更健
壮、资源更独立、实现了安全的隔离是最重要的；而线程采用的地
址空间共享机制是为了提高性能的需要，同时其代码也可以通过
Akonadi服务器实现本身对其进行控制（而它被假定很少会引发可靠
性问题）。
通过合理的努力为系统添加新数据类型的支持，也是最初希望实现
的属性之一。从理想的角度看，datamanagement（数据管理）层应
该是完全类型无关的，针对每种类型数据（最初的电子邮件、事件
和联系人，以及后来的RSS文件、即时通讯聊关记录、书签等）的
内容和标签相关的知识应该集中放在一处。虽然最初对于实现该目
标是很清晰的，但如何实现却没有明确的构想。当该目标实现时，
核心系统本身以及访问程序库API都经历了几次设计选代。在本小
节中，我们还将对其最终结果做进一步说明。
在最初关于架构的讨论中，团队以很传统的方法构建了一个大蓝
图，通过自底向下的层分离了各种关注点。他们讨论中在白板上绘
制出来的架构快照如图12-1所示，在最底下是一个存储（持久）
层，上面是访问它的逻辑层，再上面就是传输层和访问协议层，最
后就是应用程序域。
虽然关于应用程序应该采用什么样的API来访问存储层（反对使用
代理或资源分发来访问）有许多争论，有些人认为只需要一种访问
API，所有实体都通过它来访问存储层，无论它的目标是提供数据
还从以用户视角来使用数据。大家很快发现这种选择是更好的，它
使得这一切更加简单、也更加均衡。代理所执行的任何操作，都是
由数据变化通知触发的，这些都将由负责监控系统其他部分的代理
获取。无论资源是否对应用程序有额外的需求（例如，能够向存储
层提交大量数据而不会引发提醒消息风暴），实现统一API的努力
仍然是足够通用的，也是足够有用的。无论如何，不管是应用程序
访问还是资源的需求都需要使API保持简单，这样才能够使第三方
能够提供额外的群件服务器后台，也能够使应用程序开发人员接受
1204
---
## Page 1206
Akonadi。针对性能、错误校正等特定情况的处理都应该尽可能放在
后台处理。要避免出现提醒消息风暴，通过可配制的提醒消息压缩
和更新监视系统来有效地解决它，这样系统的用户可以按特定的时
间周期来订阅。
KMail
KOrganizer
IMAP
EDS
Kolab
Ox
calendar
control
mail
contacts
libakonadi
(QI-only)
KDE
存储访问协议
(IMAP,HTTP,D-BUS.)
存储访问逻辑
存储（数据库、
文件系统等）
图12-1：Akonadi框架最初的层划分草案
图12-2所示的就是新版本的高层级架构图，它映射出来的想法是将
系统的各个层描绘为同心圆或圆弧。
根据前面描述的需求，最底层（或最里层）使用关系型数据库构建
显然是最简单的。至少针对实际PIM数据项（如获取时间、本地标
签、每个文件夹的策略）的元数据而言，甚至没有考虑过其他解决
方案，因为它们的名称是有限的、有类型的、结构化的，可以受益
于快速、已索引的随机访问和高效的查询。而对于负载数据本身
1205
---
## Page 1207
（如电子邮件、联系人等），它们都是存储在磁盘上的。这一决策
并不是那么清晰明确。由于这方面信息的存储应该是类型无关的，
如果需要在数据库表中存储的数据无法确定其结构类型，那么通常
会被迫以BLOB字段形式存储。当涉及非结构化数据（从数据库的
视角看）时，数据库的优势只能够发挥出一小部分。进行有效的索
引基本上是不可能了，因为这需要能够对数据字段的内容进行解
析。因而对这些字段进行的查询无法高效完成。而且预期的访问模
式似乎也不是数据库所喜欢的：采用一种能够处理包含大量本地引
用的连续数据流是更可取的方法。对于某个数据项无法使用数据
库，意味着对存储层的事务性操作必须手动实现。针对这个问题，
大家提议的方法是对maildir标准定义的原则进行扩展，其本质是通
过文件系统中原子性的重命名操作来实现无锁的ACID访问I21。对
于最初的实现，决定采用数据库来存储所有的数据和元数据，并决
定当以后能够更好地定义搜索需求时再对其进行优化。
Akonadi-PiM存储服务
EDS
储
存储层
资源
图12-2：从里向外，而非自底向上
1206
---
## Page 1208
将Akonadi存储服务变成存储用户个人信息的权威的缓存，它可以有
效地提供和加强高级缓存生命周期管理。通过缓存策略的概念可以
实现很精密的控制，包括应该保留哪些数据项、在多长时间内可以
输出给用户，并提供了多种多样的使用模式。如果位于应用谱的末
端（例如，在网络链接很差、存储很受限的嵌入式设备上），那么
开发一个除了头信息之外其他都不存储的策略就很有意义，这样做
是很轻量级的，而只等到需要显示时才下载完整的信息，不过对于
已下载的数据项将仍然存储在RAM中，直到连接占用了过大的内存
或者关机时清空了内存。对于笔记本电脑而言，经常会遇到没有网
络连接或连接不可靠的情况，但通常会有很丰富的磁盘空间，那么
就可以尽可能多地进行预先的缓存，以便在离线的情况下也能够使
用，并且将每隔几关、几周甚至是几个月才清除一部分文件夹。而