最低目标是保证每次代码提交都能通过所有测试，最好是能以自动的方式实现。
commands=flake8
第6章单元测试
测试策略
本电子书仅限学习交流使用，请勿用于商业用途
Jenkins
---
## Page 96
熊猫爱中国www.xiongmaoi.com
熊穗普云服务的“杰出技术专家”，从事OpenStack 相关的工作。Robert 还开发过本书中介绍
性,组件中未发现的问题产生的成本，从事这一工作的团队的规模和凝聚力……….以OpenStack
6.9
前推进而不是引入更多 bug 而倒退。
示例6.17.travis.yml文件的例子
我认为这是一个软件工程上的取舍问题—需要考虑问题被引入未经检测产品的可能
你会建议使用什么样的测试策略？什么情况下不进行代码测试是可以接受的？
尽管你可能不知道 Robert 是谁，但你很可能已经用过他写的程序，别的暂且不提，他
无论你的代码托管在哪里，都应该尽可能实现软件测试的自动化，进而保证项目不断向
script: nosetests
python:
language: python
#command to run tests
install: "pip install -r requirements.txt --use-mirrors"
# command to install dependencies
Robert Collins 访谈
本电子书仅限学习交流使用，请勿用于商业用途
6.9Robert Collins 访谈
89
---
## Page 97
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
同 testresources 和并行运行的其他方式结合。
test_suite/load_tests 函数。这样可以在小规模安装时很容易将测试分离。
以使层之间的关系保持简单、可预测且对测试最有用的—可替换。
测试IME最恶心的是深层栈，它们具有复杂的跨层的行为依赖。这里就需要不断改进代码，
僻的测试用例的行为，并且通过仿真/测试进一步确认期望的状态传播是否如预期那样发生，
与HTTP服务器交互等。相关的其他方式也同样受益，可以通过替换测试计算逻辑来触发生
两者都做。这样就可以测试所有的计算行为而无须处理状态改变之类的操作，如写入数据库、
易。尽可能使方法的功能单一，例如，对于单个方法要么用来计算，要么改变状态，但不要
都相当高。
但这只是相对较少的情况。大部分事情都可以进行低成本的测试，而在早期发现问题的回报
可以的。
生僻的测试用例。我认为在已经有了测试的情况下，在测试的不同风格之间稍做平衡是完全
功能测试可能会放在不同的代码库中。单元测试的执行速度非常快，而且可以用来定义比较
组成部分，保证代码实现的正是其要做的，以及代码要做的也正是需要其完成的。通常来说，
为很多人会有不同的意见。总体上来讲，应该有一些自动检查的方式作为代码并入主干时的
（http://openstack.org）为例，它拥有超过1600 名贡献者，因此很难有细致入微的策略，
90
（相对于这种$ROOT/SPACKAGE/$SUBPACKAGE/teSts）。
你能展望一下未来Python中单元测试库和框架的发展吗？
我只是用项目中使用的 unittest 的某些部分，它能灵活地满足大部分需求，尤其是
Python中有哪些库可以用来做功能测试？
应该避免从源代码树的其余部分导入测试包，除非是在顶层的_init_
在测试文件夹内部，我经常镜像源代码的其余部分的结构，如SROOT/SPACKAGE／foo.
使用类似SROOT/$PACKAGE/tests 的层次结构，但我对于整个源代码树只创建一个
依你看来，在源代码中组织单元测试的最佳方式是什么？
分而治之—不要在一个地方做多件事情。这便于重用，也可以让测试的重复运行更容
在编写Python代码时，有哪些令测试更容易且可提高代码质量的切实可行的最佳策略？
尽管测试的成本很高而回报较低，同时我也觉得在知情的情况下不测试是可以接受的，
第6章单元测试
本电子书仅限学习交流使用，请勿用于商业用途
中放一个
因
---
## Page 98
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
·在新机器上持续扩展平行处理的能力。要知道现在手机都有4个CPU了，而已有的
我能看到的一些大的挑战包括以下几个。
用，例如，对于集成测试，常常有多个不同的测试运行器在使用。
找出方法汇总目前我们拥有的大量测试框架：生成跨多个项目的汇总视图将非常有
域进行限定。
更加复杂的调度支持-
就是针对这一问题的。
单元测试内部API并没有针对并行的工作负载进行过优化。我在开发的 StreamResult
本电子书仅限学习交流使用，请勿用于商业用途
一针对此问题的一个不太难看的方案就是对类和模块的作用
6.9Robert Collins访谈
91
---
## Page 99
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
本电子书仅限学习交流使用，请勿用于商业用途
---
## Page 100
熊猫爱中国www.xiongmaoi.com
熊7.1创建装饰器
就是本体函数（identity function），它除了返回原函数什么都不做。
后的函数进行替换。很可能你已经使用过装饰器作为自己的包装函数。最简单的装饰器可能
的工作机制，本章就是要改变这一现状。
供了一些现成的装饰器（包括上面提到的两个)，但似乎大部分开发人员并不了解它们背后
www.python.org/dev/peps/pep-0318/）中被大规模重构，并提高了灵活性和可读性。Python提
中伴随classmethod（）和staticmethod（）被首次引入，但随后又在PEP318（http:/
第7章一
这个装饰器没什么用，但确实可以正常运行。只不过它什么都不做。
它和下面的过程类似：
然后就可以像下面这样使用这个装饰器：
foo = identity(foo)
@identity
def identity(f):
def foo(）:
def foo():
returnf
Python中提供了装饰器（decorator）作为修改函数的一种便捷的方式。它们在Python 2.2
return'bar'
return'bar'
方法和装饰器
本电子书仅限学习交流使用，请勿用于商业用途
---
## Page 101
熊猫爱中国www.xiongmaoi.com
熊猫爱中Lisp Object System）。
用的代码。同样的东西还有开发人员已经用过的非常棒的方法组合，来源于CLOS（Common
码。如果你写过 Emacs Lisp 代码，可能用过 defadvice，它允许你定义围绕某个函数进行调
示例7.1注册装饰器
94
class Store(object):
def check_is_admin(username) :
显然，第一步就是要先分离出检查部分的代码：
class Store(object):
考虑这样一组函数，它们在被调用时需要对作为参数接收的用户名进行检查：
装饰器主要的应用场景是针对多个函数提供在其之前，之后或周围进行调用的通用代
在后面的几节中我会介绍Python 中提供的标准装饰器，以及如何（何时）使用它们。
在这个例子中，函数被注册并存储在一个字典里，以便后续可以根据函数名字提取函数。
def foo():
@register
def register(f):
_functions = ()
第7章
def get_food(self, username, food) ;
 return 'bar
def put_food(self,
 def get_food(self, username, food)
return f
_functions[f._name
global _functions
raise Exception("This user is not allowed to get food")
self.storage.put(food)
if username !='admin':
return self.storage.get(food)
if username !='admin':
方法和装饰器
raise Exception("This user is not allowed to get food")
本电子书仅限学习交流使用，请勿用于商业用途
username,food)
f
---
## Page 102
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
多原函数的属性，如 docstring 和名字。
缺点。
这看起来有点儿老生常谈，但你可能没有意识到这种实现装饰器的原生方法有一些主要的
>>> def foobar(username="someone"):
正如前面提到的，装饰器会用一个动态创建的新函数替换原来的。然而，新函数缺少很
>>> def is_admin(f):
类似这样使用装饰器会让常用函数的管理更容易。如果有过正式的Python经验的话，
class Store(object):
def check_is_admin(f):
现在代码看上去稍微整洁了一点儿。但是有了装饰器能做得更好：
def put_food(self, username, food) :
@check_is_admin
def get_food(self, username, food) :
@check is_admin
return wrapper
def wrapper(*args,
def put_food(self, username, food):
def wrapper(*args,
self.storage.put(food)
return self.storage.get(food)
if kwargs.get('username')!='admin':
self.storage.put(food)
check_is_admin(username)
return wrapper
return self.storage.get(food)
check_is_admin(username)
raise Exception("This user is not allowed to get food")
return f(*args,
if kwargs.get('username')!='admin′:
raise Exception("This user is not allowed to get food")
本电子书仅限学习交流使用，请勿用于商业用途
**kwargs):
**kwargs)
**kwargs):
7.1创建装饰器
%
---
## Page 103
熊猫爱中国www.xiongmaoi.com
熊猫爱中所示。
它会复制这些属性给这个包装器本身。update_wrapper 的源代码是自解释的，如示例 7.2
96
def update_wrapper (wrapper,
幸好,Python 内置的 functools 模块通过其 update_wrapper 函数解决了这个问题,
WRAPPER_UPDATES = ('dict',)
'wrapper'
aueu·xeqoog >> @is_admin
'foobar'
aeueqooy>
第7章方法和装饰器
for attr in updated:
for attr in assigned:
wrapper.wrapped_= wrapped
foobar.doc_
foobar.func_doc
getattr(wrapper, attr).update(getattr(wrapped, attr, ()))
else:
except AttributeError:
try:
pass
pass
setattr(wrapper, attr, value)
pass
value = getattr(wrapped, attr)
本电子书仅限学习交流使用，请勿用于商业用途
updated = WRAPPER_UPDATES) :
assigned = WRAPPER ASSIGNMENTS,
wrapped,
---
## Page 104
熊猫爱中国www.xiongmaoi.com
熊猫
查看被装饰函数的参数并从中提取需要的参数。
参数传入，但情况并非总是如此。考虑到这一点，最好是提供一个更加智能的装饰器，它能
示例7.3使用functools.wraps
wraps 的装饰器，如示例7.3所示。
为此，inspect 模块允许提取函数的签名并对其进行操作，如示例 7.4 所示。
目前为止，在我们的示例中总是假设被装饰的函数会有一个名为 username 的关键字
class Store(object):
def check_is_admin(f):
import functools
手工调用update_wrapper
'Do crazy stuff.'
>>> foobar.__doc
>>> def foobar(username="someone") :
如果用这个函数改写前面的示例，代码看起来会更简洁：
'foobar'
>>>
def get_food(self, username, food):
@checkis_admin
return wrapper
def wrapper(*args,
@functools.wraps(f)
foobar = functools.update_wrapper(is_admin, foobar)
return wrapper