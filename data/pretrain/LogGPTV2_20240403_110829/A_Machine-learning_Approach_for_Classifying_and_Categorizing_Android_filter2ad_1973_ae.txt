### Android Version Analysis

**Figure 3.** Number of Source Methods for Bluetooth, Location, and NFC Information in Different Android Versions

#### Obfuscation Techniques and Malware Analysis
Our analysis included examining malware samples for obfuscation techniques that could potentially exploit personal data through less-known methods. However, we did not find any samples that attempted to obtain personal data using such methods. Additionally, we did not identify any methods for sinks that were as obscure as those in our motivating example (cf. Section II). We anticipate that as security tools evolve, more advanced obfuscation techniques will become prevalent, making it increasingly important to detect and mitigate these threats.

#### RQ4: Changes During Android Versions
To evaluate how well SUSI can handle previously unseen versions of the Android operating system, we compared the categorized source and sink lists generated for various Android releases. Figure 3 illustrates the number of sources found for API versions 4 (Android 1.6) to 18 (Android 4.3), focusing on Bluetooth, location, and NFC categories. These categories effectively demonstrate the evolution of Android over different versions.

From the figure, it is evident that new sources are introduced with each version. For instance, the number of location information sources shows significant increases between versions 8 and 9, 16 and 17, and 17 and 18, due to major changes in the Android location APIs [34]–[36]. Similarly, the number of Bluetooth information sources increased between versions 17 and 18, with the addition of new source-bearing classes to the `android.bluetooth` API. NFC was first introduced in API version 9 [34].

In some cases, the number of sources decreased from one version to the next, such as between versions 4, 5, 6, 7, and 8 for location, which is related to minor API changes. The cross-validation results for different Android versions were consistent with those reported for version 4.2 in Sections V-A2 and V-B.

**Key Findings:**
- SUSI effectively detects changes in different API versions, reliably identifying new sources and sinks.
- SUSI provides a higher level of coverage than manually assembled lists.
- For completely new, unanticipated APIs, SUSI cannot automatically categorize them, but new categories can be easily added by annotating a few examples.

#### RQ5: Existing Lists of Sources & Sinks
We assessed the extent to which current static [2]–[7], [9], [12], [13] and dynamic [14], [15] code analysis approaches could benefit from our categorized sources/sinks list. Our results show that SUSI identifies all the sources and sinks mentioned by previous approaches, plus many others that were previously unknown, including some used by malware.

**Comparison with Other Tools:**
- **Mann et al. [9]:** Their hand-picked list is only a fraction of SUSI's output.
- **CHEX [2]:** Uses a semi-automatically collected list of 180 sources and sinks, but the list is not publicly available.
- **LeakMiner [3]:** Relies on the Android permission map to identify sources and sinks, but this approach may overlook some sensitive data.
- **ScanDal [6] and AndroidLeaks [7]:** Provide categories rather than specific method lists, which are also covered by SUSI.
- **Aurasium [15]:** Intercepts calls at the system level, reducing the number of methods but making it harder to reconstruct higher-level semantics.

**Publicly Available Tools:**
- **TaintDroid [14]:** Uses lower-level internal system methods, leading to imprecise data leakage tracking.
- **DeD by Enck et al. [4]:** Decompiles Android bytecode into Java and uses Fortify SCA [12] for static analysis. The list contains about 100 Android sources and 35 sinks, all of which are included in SUSI’s lists.
- **SCanDroid [38]:** The list appears hand-picked and is fully covered by SUSI’s output.

**Evaluation:**
- Table VIII shows that the three tools miss important methods, such as one returning the Wi-Fi MAC address and the method for obtaining the list of accounts registered on the phone.
- TaintDroid over-approximates the list of sources and sinks, leading to over-tracking.

**Commercial Tools:**
- **Fortify SCA [12] by HP and IBM AppScan Source [13]:** Provide incomplete lists by default but allow easy integration of new sources and sinks. SUSI can help provide more comprehensive defaults.

### Sources Not Considered by SUSI
SUSI excels at classifying sources and sinks based on structural similarity. However, it has limitations in handling certain types of sources and sinks:

- **Callback Methods:** Applications can implement callback methods to receive data from the operating system. For example, an app might use `onNmeaReceived` instead of `onLocationChanged` to parse raw GPS data (NMEA records) and avoid detection. A complete list of callback methods is required to find all data leaks.
- **XML Layout Controls:** In Android, layout controls are defined through XML files and accessed via `findViewById`. Depending on the ID, this function can return a reference to a password field or other UI elements. Precise analysis requires modeling the Android resource system to avoid false positives.

### Related Work
Our work was inspired by Merlin [42], a probabilistic approach that uses potentially incomplete specifications to produce a more complete one. Livshits et al.’s approach is based on a propagation graph, where probabilistic inference rules are applied to interprocedural data flow, focusing on string-related vulnerabilities like cross-site scripting and SQL injections.

**Table VIII.** Detection of Most Frequently Used Sources and Sinks in Malware Samples [21] in Different Analysis Tools

| Method | Description | TaintDroid | SCanDroid | DeD |
| --- | --- | --- | --- | --- |
| `android.bluetooth.BluetoothAdapter.getAddress()` | Returns the hardware address of the local Bluetooth adapter. | no | no | no |
| `android.net.wifi.WifiInfo.getMacAddress()` | Returns the MAC address of the Wi-Fi interface. | no | no | no |
| `java.util.Locale.getCountry()` | Returns the country code for the phone’s locale. | no | no | no |
| `android.net.wifi.WifiInfo.getSSID()` | Returns the SSID of the current 802.11 network. | no | no | no |
| `android.telephony.gsm.GsmCellLocation.getCid()` | Returns the GSM cell id. | no | no | no |
| `android.telephony.gsm.GsmCellLocation.getLac()` | Returns the GSM location area code. | no | no | no |
| `android.location.Location.getLongitude()` | Returns the longitude in degrees. | yes | yes | yes |
| `android.location.Location.getLatitude()` | Returns the latitude in degrees. | yes | yes | yes |
| `android.accounts.AccountManager.getAccounts()` | Returns all accounts of any type registered on the device as a list. | no | no | no |
| `java.util.Calendar.getTimeZone()` | Returns the time zone. | no | no | no |
| `android.telephony.TelephonyManager.getDeviceId()` | Returns the unique device ID. | yes | yes | yes |
| `android.telephony.TelephonyManager.getSubscriberId()` | Returns the unique subscriber ID. | yes | yes | yes |
| `android.telephony.TelephonyManager.getLine1Number()` | Returns the phone number of the device. | yes | yes | yes |
| `android.provider.Browser.getAllBookmarks()` | Returns a cursor pointing to a list of all the bookmarks. | no | no | no |
| `android.telephony.SmsManager.sendTextMessage()` | Send a text-based SMS. | yes | yes | yes |
| `android.util.Log.d()` | Sends a debug log message. | yes | yes | yes |
| `java.net.URL.openConnection()` | Returns a URLConnection instance that represents a connection to the remote object referred to by the URL. | no | no | no |
| `android.telephony.TelephonyManager.getSimSerialNumber()` | Returns the serial number of the SIM. | no | no | no |

This table highlights the gaps in the detection capabilities of existing tools and underscores the need for a more comprehensive approach like SUSI.