### 优化后的文本

#### 查询修满3门课程的学生信息（排除学号01）

```sql
-- 步骤1：获取每个学生所修课程数量
WITH StudentCourseCount AS (
    SELECT s_id, COUNT(c_id) AS course_count
    FROM Score
    GROUP BY s_id
)

-- 步骤2：筛选出修满3门课程的学生，排除学号01
SELECT *
FROM Student
WHERE s_id IN (
    SELECT s_id
    FROM StudentCourseCount
    WHERE course_count = (SELECT course_count FROM StudentCourseCount WHERE s_id = 01)
      AND s_id != 01
);
```

#### 使用 `GROUP_CONCAT` 函数查询与学号01修同样课程的学生

```sql
-- 步骤1：获取每个学生的课程列表并排序
WITH GroupedScores AS (
    SELECT s_id, GROUP_CONCAT(c_id ORDER BY c_id) AS course_list
    FROM Score
    GROUP BY s_id
)

-- 步骤2：筛选出与学号01修同样课程的学生，排除学号01
SELECT *
FROM Student
WHERE s_id IN (
    SELECT s_id
    FROM GroupedScores
    WHERE course_list = (SELECT course_list FROM GroupedScores WHERE s_id = 01)
      AND s_id != 01
);
```

#### 查询没有修过张三老师讲授的任何一门课程的学生姓名

```sql
-- 步骤1：获取张三老师的课程ID
WITH ZhangSanCourses AS (
    SELECT c_id
    FROM Course
    WHERE t_id = (SELECT t_id FROM Teacher WHERE t_name = '张三')
)

-- 步骤2：筛选出没有修过张三老师课程的学生
SELECT s_name
FROM Student
WHERE s_id NOT IN (
    SELECT DISTINCT s_id
    FROM Score
    WHERE c_id IN (SELECT c_id FROM ZhangSanCourses)
);
```

#### 查询两门及其以上不及格课程的同学的学号、姓名及其平均成绩

```sql
-- 步骤1：获取不及格课程数量大于等于2的学生
WITH FailedStudents AS (
    SELECT s_id
    FROM Score
    WHERE s_score < 60
    GROUP BY s_id
    HAVING COUNT(s_score) >= 2
)

-- 步骤2：获取这些学生的详细信息及平均成绩
SELECT 
    s.s_id,
    s.s_name,
    ROUND(AVG(sc.s_score)) AS avg_score
FROM Student s
JOIN Score sc ON s.s_id = sc.s_id
WHERE s.s_id IN (SELECT s_id FROM FailedStudents)
GROUP BY s.s_id, s.s_name;
```

#### 检索01课程分数小于60，按分数降序排列的学生信息

```sql
-- 步骤1：获取满足条件的学生ID
WITH LowScoringStudents AS (
    SELECT s_id
    FROM Score
    WHERE c_id = 01 AND s_score < 60
)

-- 步骤2：获取这些学生的详细信息
SELECT 
    s.*,
    sc.s_score
FROM Student s
JOIN Score sc ON s.s_id = sc.s_id
WHERE s.s_id IN (SELECT s_id FROM LowScoringStudents)
ORDER BY sc.s_score DESC;
```

#### 按平均成绩从高到低显示所有学生的所有课程的成绩及平均成绩

```sql
-- 步骤1：计算每个学生的平均成绩
WITH StudentAverages AS (
    SELECT s_id, ROUND(AVG(s_score), 2) AS avg_score
    FROM Score
    GROUP BY s_id
    ORDER BY avg_score DESC
)

-- 步骤2：获取学生的详细信息及平均成绩
SELECT 
    s.s_id,
    s.c_id,
    s.s_score,
    t.avg_score
FROM Score s
JOIN StudentAverages t ON s.s_id = t.s_id
ORDER BY t.avg_score DESC;
```

通过上述优化，SQL语句更加清晰、连贯和专业。每个步骤都有明确的注释，便于理解和维护。