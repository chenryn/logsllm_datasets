CUBE and VDF to answer RQ 1.. We used the open-source
version of HYPER-CUBE, but unfortunately VDF is not
openly available. Therefore, we follow the authors of HYPER-
CUBE and compare against the numbers published in the
VDF paper. While the authors of VDF evaluated for approx-
imately 60 days, the authors of HYPER-CUBE managed to
beat VDF in both terms of coverage found and bugs found
in only ten minutes. As we are not able to reproduce the ex-
act hardware that VDF used for their experiments, we too,
choose to drastically reduce the time for evaluation. However,
since NYX performs many complex operations such as mini-
mizing new inputs found, we also extended the experiments
to 24 hours each. To compare fairly against HYPER-CUBE,
we created specs that very closely represent HYPER-CUBE’s
operations (NYX-Legacy) and used both fuzzers to target QE-
MU/KVM. As we will later see, NYX can perform even better
using custom speciﬁcations for speciﬁc targets. To demon-
strate the impact of specs on NYX’s performance, we also
added another complex device (XHCI).
We ran the target VM with Gcov, and restarted it every
10 minutes or after each crash, to dump the coverage. This
way, we could obtain coverage plots over time, as otherwise
only the ﬁnal coverage could be reported. The coverage found
over time is shown in Figure 4. Note that this ﬁgure only
contains those devices where non-trivial differences in perfor-
mance where observed. The full set of results can be found
in the Appendix. We also display the overall results in Ta-
ble 1. As can be seen, our approach easily surpasses VDF in
all (but two) scenarios. After manual inspection, we believe
that the difference in coverage between VDF and NYX is
due to the fact that the code changed since VDF performed
their experiments and that the observed difference does not
represent a real difference in performance. Compared to the
blind fuzzer HYPER-CUBE, we see that in all but six cases,
NYX and HYPER-CUBE perform identical or nearly identical
(Though NYX might sometimes need a few more minutes to
reach the same coverage). Since many device emulators have
rather simple control ﬂows (many do not even contain loops),
this is not entirely surprising.
However, on the more complex devices, the advantages of
coverage-guided fuzzing begin to show. Over a reasonable
time frame (typically the ﬁrst few hours), the advantages begin
to outweigh the additional cost. This effect is particularly
pronounced in the complex examples where HYPER-CUBE
stops making any progress very early. Hence, NYX produces
drastically more coverage on four of the six devices, which
also answers RQ 2.. On the other two devices (SoundBlaster
and E1000), HYPER-CUBE performs better. We investigate
SoundBlaster and believe this is due to interrupt handlers
which are triggered after speciﬁc timeout interrupts occur.
These timeouts are never triggered due to the short time span
of our test cases and the subsequent VM resets. We believe a
similar mechanism affects our performance on E1000.
5.3 Structured and Coverage
To further substantiate the impact of proper structure deﬁ-
nitions (RQ 3.), we studied the Intel speciﬁcations for the
eXtensible Host Controller Interface (XHCI) and built speci-
ﬁcations that speciﬁcally target this device. Besides the usual
MMIO operations that are required to actually interact with
the device emulators, this also includes setting up complex
data structures in the guest’s memory. For example, the XHCI
USB Host Controller uses multiple linked list for different
purposes to be handled. The MMIO access then only writes
the pointer to the head of the list, and the device iterates the
list on its own. We created a speciﬁcation that allows to setup
such memory structures in the guest. Using this speciﬁcation,
we performed another set of runs. To answer RQ 3., we com-
pare the results of the legacy speciﬁcation that emulates the
2606    30th USENIX Security Symposium
USENIX Association
Table 1: Branch coverage by NYX using a legacy speciﬁcation and HYPER-
CUBE in 24 hours (compared to VDF with multi-month experiments). If the
differences between NYX and HYPER-CUBE are statistically relevant with
p<0.01 according to a Mann-Whitney-U test, the better result is printed bold.
∆ denotes the difference in percentage points between NYX and HYPER-
CUBE.
Device
AC97
CS4231a
ES1370
Intel-HDA
SoundBlaster
Floppy
Parallel
Serial
IDE Core
EEPro100
E1000
NE2000 (PCI)
PCNET (PCI)
RTL8139
SDHCI
XHCI
VDF
Cov
53.0%
56.0%
72.7%
58.6%
81.0%
70.5%
42.9%
44.6%
27.5%
75.4%
81.6%
71.7%
36.1%
63.0%
90.5%
-
HYPER-CUBE
Cov
NYX
∆
Cov
100.00% 98.92%
-1.62
-
74.76% 74.76%
-
91.38% 91.38%
79.17% 78.33%
-0.84
83.80% 81.34%
-2.46
84.51% 83.10%
-1.41
-
38.61% 38.61%
-
73.76% 73.76%
-0.18
74.87% 74.69%
-
83.82% 83.82%
66.08% 54.55%
-11.53
71.89% 71.89%
-
78.71% 89.49% +10.78
74.68% 79.28%
+4.60
81.15% 88.93%
+7.78
64.70% 69.93%
+5.23
Figure 4: Overview of the median, best, and worst branch coverage across 10
experiments. We only display the 6 devices with relevant differences between
NYX using the legacy spec and HYPER-CUBE.
behavior of HYPER-CUBE and our more detailed speciﬁca-
tion. The results can be seen in Figure 5. As the experiment
results show, using more detailed speciﬁcations drastically
increases the performance of the fuzzer. While in the previous
experiment, coverage guidance on helped in the long term,
and HYPER-CUBE dominated for the ﬁrst hour of fuzzing,
here we can see that such speciﬁcations are showing drastic
improvements in performance from the very ﬁrst moment on.
To further conﬁrm our claim that coverage guidance is
in fact helpful (RQ 3.), we perform a second experiment
comparing coverage-guided and non-coverage-guided fuzzing
with these more detailed speciﬁcations. As we could not inte-
grate them into HYPER-CUBE, we instead used NYX, but dis-
abled the coverage guidance mechanism. Thus, we compare
a blinded version of NYX with the normal, coverage-guided
version of NYX. This allows us to speciﬁcally identify the
impact of coverage guidance in the presence of structured
fuzzing. The result are also shown in Figure 5. As we can see,
without coverage guidance, the more complex speciﬁcations
added very little coverage. However, in combination with cov-
erage guidance, the ability to ﬁnd deeper code paths increased
massively. While it might seem somewhat surprising that the
speciﬁcations offer so little without coverage guidance, this
can actually be explained by the fact that a signiﬁcant number
of integer parameters need to be chosen properly to generate
interesting structures from the speciﬁcation. Without the cov-
erage feedback, picking the right shape and the right values
is exceedingly unlikely.
5.4 Fast Snapshot Reload Performance
To quantify the performance impact of our fast VM reloads,
and to answer RQ 4., we perform two experiments on the
reload performance. Since reloading the register- and device-
state is independent of the fuzzing target, the reload perfor-
mance is primarily determined by the number of dirty pages
that need to be restored. As our fuzzer is also able to fuzz ring-
3 applications, we created a small test application that dirties
a given number of pages on each execution. To inspect the
behavior, we perform measurements with different numbers
of dirty pages. The results can be seen in Figure 6. Device
reloads create an additional performance cost, even when no
pages need to be reset. As expected, as more and more pages
are reset, the performance gets gradually worse. Overall, for
large resets we approach the memory throughput.
To put these numbers in relation to similar mechanisms,
we also compare with AFL’s forkserver and QEMU’s normal
snapshot restoration mechanism. We use the same ring-3 ap-
plication as before and note the number of executions AFL’s
forkserver achieves depending on the number of dirty pages.
As expected, for very small deltas, the forkserver is slightly
more effective, yet as the number of modiﬁed pages grows, the
performance differences shrink. In contrast, QEMU always
restores the full snapshot. Hence, the performance remains
USENIX Association
30th USENIX Security Symposium    2607
00h08h16h24h0255075100e100000h08h16h24h0255075100pcnet00h08h16h24h0255075100rtl813900h08h16h24h0255075100sdhci00h08h16h24h0255075100xhci00h08h16h24h0255075100idecoreTime%BranchesFoundNyx-LegacyHyperCubeFigure 5: Comparing the code coverage found on XHCI by the legacy spec-
iﬁcation and more detailed speciﬁcations across 10 runs. The dotted lines
show the performance that NYX achieved, if used as a blind fuzzer.
constant, until running the application which accesses large
amounts of memory begins to affect the performance.
For realistic workloads, our snapshots reloads are multiple
orders of magnitude faster than QEMU’s internal snapshot
restoration mechanism, and we are able to perform about 60%
as many test cases compared to AFL’s forkserver. While ob-
taining similar performance, NYX reloads perform a lot more
tasks than the fork server: we observe that when the target
only dirties ten pages, we reload almost a 100 pages in the
kernel. We also reset all of the devices’ state, including hard
discs. This also shows up in the number of pages reloaded:
When fuzzing more complex targets that modify the disc state,
this becomes fundamental.
When using NYX in ofﬂine experiments, we observed that
fuzzing programs like Bash with AFL is very hard: great
care has to be taken to ensure that script interpreters do not
overwrite or remove any relevant ﬁles. Similarly, they do
tend to quickly ﬁll up the disc with junk. All of these issues
are mitigated by the snapshot restoration process. Lastly, we
observed similar performance when fuzzing target programs
under Windows. This is a signiﬁcant advantage, as Windows
does not offer the performance gains of a forkserver, which
signiﬁcantly slows down the fuzzing process.
5.5 New Vulnerabilities
Besides analyzing the coverage, we also used our fuzzer to
ﬁnd novel bugs. To this end, we picked all the devices from
Section 5.3 as well as some additional ones that we could
not use to compare coverage for various reasons. For ex-
ample, we evaluated various VirtIO devices on bhyve such
as (virtio_blk, virtio_net, and virtio_serial) that are
not readily supported by HYPER-CUBE.
Figure 6: Comparing raw executions per second for targets that dirty N pages,
with an AFL forkserver, QEMU’s loadvm snapshot restore functionality, and
NYX’s fast full-system reloads.
Table 2: Overview of vulnerabilities found by NYX in our targets.
Hypervisor
Type
#Bugs
QEMU
Use-After-Free (Write)
Heap-based Buffer Overﬂow (Write)
Stack Overﬂow
Inﬁnite Loop
Segmentation Fault
Abort/Assertion
BHYVE
Segmentation Fault
Inﬁnite Loop
Assertion
1
1
1
1
3
9
14
1
13
During the evaluation, we identiﬁed 44 manually veriﬁed,
unique crashes. An overview of the types of crashes found is
shown in Table 2, a full list of the crashes with more details
on the exploitability can be found in the Appendix. All bugs
were reported in a coordinated way and CVEs were requested
for all memory corruption issues. Many of the bugs were ﬁxed
and some are still being actively discussed on the maintainers’
mailing lists. Even after QEMU and bhyve were fuzzed by
HYPER-CUBE, NYX ﬁnds a signiﬁcant number of serious
issues in both hypervisors, answering RQ 5..
In the following, we provide a more in-depth look at some
of the bugs found.
Case Study: bhyve Inﬁnite XHCI TRB Loop. The XHCI
device implementation of the bhyve hypervisor is vulnerable
to a denial-of-service attack via an inﬁnite loop in the host.
According to the XHCI speciﬁcation, the guest’s driver has to
setup and maintain multiple memory regions in its physical
memory to communicate with the XHCI USB controller and
its attached USB devices. A set of data structures called TRBs
(Transfer Ring Blocks) are used for bi-directional communi-
cation. Link TRBs are used to link multiple memory chunks
together to implement rings across non-continues memory
regions. By conﬁguring a crafted TRB ring array containing
a Link TRB pointing to itself, the emulator gets stuck in an
inﬁnite loop in the function pci_xhci_trb_next.
2608    30th USENIX Security Symposium
USENIX Association
00h08h16h24h020406080100Time%BranchesFoundNyx-SpecNyx-LegacyHyperCubeCase Study: QEMU EE100Pro Stack Overﬂow via Re-