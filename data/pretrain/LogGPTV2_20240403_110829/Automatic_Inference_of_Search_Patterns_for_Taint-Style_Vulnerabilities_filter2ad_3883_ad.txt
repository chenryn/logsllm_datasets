(cid:12)
(cid:10)(cid:11)
z∈Cv
Let T denote the set of conditions, each represented by a
syntax tree. Then we map each condition t ∈ T to a vector
as follows: First, inner nodes in the syntax tree are labeled
by the hash value of their type attributes, e.g., multiplication,
unary expression or assignment, while leaf nodes are labeled
by the hash value of their code attribute, typically an identiﬁer,
operator or literal. Second, the symbol that is being propagated
is renamed to var. In that way, the condition does not depend
on the name of the identiﬁer. Numbers, relational, and equal-
ity operators are also normalized using regular expressions.
Finally, the neighborhood of each node v is taken into account
by computing its neighborhood hash as a function of the labels
of its child nodes as
where l(v) is the label of the node v, r(·) denotes a single-bit
rotation, ⊕ indicates a bit-wise XOR operation on the labels of
the nodes, and ﬁnally Cv are the child nodes of v. In effect, we
obtain a set of hash values for each syntax tree that we can use
to represent it. We deﬁne the mapping Φ : T → {0, 1}n from
conditions to n-dimensional vectors where n is the number of
different hash values and for a condition c ∈ T
(cid:2)
Φj(c) =
1 if c contains a node v with h(v) = j
0 otherwise
.
Upon performing this mapping for each condition in the
defnition graph, we employ linkage clustering yet again using
the city-block distance with a ﬁxed parameter of 2, yielding
clusters of conditions. We store the cluster identiﬁers of all
conditions used in each of the combination clusters calculated
in the previous section and ﬁnally attach them to the search
patterns.
D. Generation of Graph Traversals
The generated clusters enhanced with sanitization overlays
fully express search patterns that can now ﬁnally be mapped
to graph traversals to mine for vulnerabilities. To achieve
this, we construct a generic template for the pattern-based
analysis platform Joern that can capture missing sanitization
of arguments and can be easily instantiated to express different
search patterns for taint-style defects.
1) Traversal template: Figure 8 shows the template traver-
sal in the query language Gremlin. To instantiate the template,
we need to deﬁne the name of the sensitive sink, descriptions
for data sources of each argument as well as descriptions
for their sanitization. These are referred to as argiSource
and argiSanitizer where i denotes the argument number.
The traversal proceeds by determining all call sites of sink.
It then processes each sink separately using the traversals
taintedArgs and unchecked in order.
The traversal taintedArgs is used to ﬁnd if a sink
conforms to the source descriptions (argiSource). It achieves
this by ﬁrst generating the corresponding deﬁnition graph
as described in Section IV-A. Without decompressing the
getCallsTo(sink)
.taintedArgs(
[arg1Source,..., argnSource]
)
.unchecked(
[arg1Sanitizer, ... argnSanitizer]
)
Fig. 8: Template for taint-style vulnerability as a graph
traversal in the query language Gremlin.
graph, it then determines whether the call site can possibly
fulﬁll the argument description by checking whether for each
description, at
least one matching statement exists in the
deﬁnition graph.
This step drastically reduces the number of call sites that
need to be analyzed further, however, we cannot yet
tell
with certainty whether the call site matches the argument
descriptions. To achieve this, the particular deﬁnition graph
is decompressed according to Algorithm 2. With deﬁnition
combinations at hand, it now becomes trivial to check whether
argument descriptions are matched. Finally, we thus return
all deﬁnition combinations that match the descriptions and
pass them on to the traversal unchecked for analysis of
sanitization.
The traversal unchecked determines all call sites where
at least one of the arguments is not sanitized according to the
sanitizer descriptions. The function proceeds by checking each
of the conditions in the deﬁnition graph against the respective
sanitizers descriptions.
2) Template instantiation: We instantiate queries from clus-
ters by translating deﬁnitions and conditions into argument
descriptions and sanitizer descriptions respectively. Recalling
that for each argument, a set of clusters for data sources as well
as conditions is available, these merely have to be summarized
in a form suitable to be understood easily by security analysts.
To this end, we generate regular expressions from these
clusters by determining longest common sub sequences as
commonly performed in signature generation [see 40]. The
resulting graph traversals can then be used as is to mine code
for bugs as well as allow for reﬁnement by analysts.
V. EVALUATION
We proceed to evaluate our method on the source code
of ﬁve popular open-source applications in two steps. First,
we perform a controlled experiment where we evaluate our
method’s ability to generate traversals for known vulnerabil-
ities and measure how these reduce the number of call sites
to inspect. Second, we evaluate our method’s ability to assist
in a real-world code audit of the popular media player VLC
where we uncover several previously unknown vulnerabilities.
We implement our method as a plugin for the code analysis
platform Joern version 0.3.1, using the library fastcluster [37]
for clustering. To allow other researchers to reproduce our
results, we make our plugin available as open source2.
2https://github.com/fabsx00/querygen
805805
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:04:25 UTC from IEEE Xplore.  Restrictions apply. 
Project
Linux
OpenSSL
Pidgin
VLC
Poppler (Xpdf)
Version
3.11.4
1.1.0f
2.10.7
2.0.1
0.24.1
Component
Driver Code
Entire Library
Entire Program
Entire Program
Entire Library
Lines of code
6,723,955
378,691
363,746
555,773
227,837
Vulnerability
CVE-2013-4513
CVE-2014-0160
CVE-2013-6482
CVE-2012-3377
CVE-2013-4473
Sensitive sink
copy_from_user
memcpy
atoi
memcpy
sprintf
# Call Sites
1715
738
255
879
22
TABLE I: Data set of ﬁve open-source projects with known taint-style vulnerabilities. The table additionally lists the sensitive
sinks of each vulnerability and the number of traversals inferred by our method.
Correct Source Correct Sanitization
CVE-2013-4513
CVE-2014-0160
CVE-2013-6482
CVE-2012-3377
CVE-2013-4473
Average
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
# Traversals Generation Time Execution Time Reduction[%]
96.50
99.19
92.16
91.13
95.46
94.90
142.10 s
110.42 s
20.76 s
229.66 s
12.32 s
10.25 s
8.24 s
3.80 s
20.42 s
2.55 s
37
38
3
60
1
TABLE II: Reduction of code to audit for discovering the ﬁve taint-style vulnerabilities. For the last vulnerability no correct
sanitizer is infered due to the low number of call sites.
A. Controlled Experiment
To evaluate our method’s ability to generate queries for
real vulnerabilities in program code in a controlled setting,
we analyze the security history of ﬁve popular open-source
projects: the Linux kernel, the cryptographic library OpenSSL,
the instant messenger Pidgin,
the media player VLC and
ﬁnally, the rendering library Poppler as used by the document
viewers Evince and Xpdf. For each of these projects, we
determine a recent taint-style vulnerability and the associated
sensitive sink. Table I provides an overview of this data set,
showing the project and its version, the vulnerable component,
and the lines of code it contains. Moreover, the vulnerability,
denoted by its CVE-identiﬁer, the associated sensitive sink,
and the number of call sites of the sink are shown. We
now brieﬂy describe each of these taint-style vulnerabilities
in detail.
• CVE-2013-4513 (Linux). An attacker-controlled variable
named count of type size_t is passed as a third
argument to the sink copy_from_user without being
sanitized, thereby triggering a buffer overﬂow.
• CVE-2014-0160 (OpenSSL “Heartbleed’). The variable
payload of type unsigned int as deﬁned by the
source n2s is passed as a third argument to memcpy
without being checked, causing a buffer overread.
• CVE-2013-6482 (Pidgin). The string unread is read
from the attacker-controlled source xmlnode_get_data
and passed to the sink atoi without undergoing
sanitization, thereby possibly causing a NULL pointer
to be dereferenced.
• CVE-2012-3377 (VLC). The length of the data buffer
p_stream->p_headers is dependent on an attacker-
controlled allocation via the function realloc and
reaches a call to memcpy without verifying the available
buffer size, leading to a buffer overﬂow.
• CVE-2013-4473 (Poppler). The attacker-controlled string
destFileName is copied into the local stack buffer
pathName of type char [1024] using the function
sprintf without checking its length,
leading to a
stack-based buffer overﬂow.
We proceed to generate traversals for all of these sinks.
Table II summarizes our results, showing the number of
traversals generated for each vulnerability, and whether our
method was able to generate a traversal that expresses both the
correct source and sanitizer. It also shows the time required to
generate traversals from the code, and the execution time of
the traversal in seconds. Finally, the percentage of call sites
that do not have to be inspected when using the generated
traversal as a robust signature for the vulnerability is shown
(reduction percentage).
Our method generates correct descriptions for the respective
argument sources in all cases, and correct sanitizers in all but
one case. In the case of CVE-2013-4473, no sanitizer descrip-
tion is returned. In this case, only 22 call sites are available,
making the inference of a sanitizer description difﬁcult using
statistical methods. Regardless of this, the number of call sites
to inspect to locate the vulnerabilities is drastically reduced by
our queries, allowing 94.9% of the call sites to be skipped on
average.
Finally, Table III shows the inferred regular expressions for
sources and sinks. In these regular expressions the names of
attacker-controlled sources from the vulnerability descriptions
are clearly visible. Moreover, apart from those sanitization
patterns from the bug descriptions, additional sanitizers are
recognized in some cases. For example, the method determines
that the ﬁrst argument to memcpy stemming from the source
n2s is commonly compared to NULL to ensure that it is not
a NULL pointer. For arguments where multiple sanitizers are
enforced, only one is shown.
806806
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:04:25 UTC from IEEE Xplore.  Restrictions apply. 
Sink
Argument 1
Argument 2
Argument 3
Sanitizer 1
Sanitizer 2
Sanitizer 3
CVE-2014-0160
CVE-2013-4513
memcpy
copy_from_user
.*
.*
.*const .*cha.*r *.* .*
.*size_t.*
-
-
-
.*sym .*(\d+).*
.*n2s.*
.*sym ( ==|!=) NULL.* .*sym.*
.*sym.*\+(\d+).*
-
-
CVE-2012-3377
memcpy
CVE-2013-6482
atoi
.*xmlnode_get_.* .*alloc.*
.*
.*
.*
.*
.*sym.*
-
-
CVE-2013-4473
sprintf
.*char \[ .* \].*
.*
.*
-
-
-
TABLE III: Regular expressions contained in the search patterns for the ﬁve taint-style vulnerabilities, where sym is replaced
by the tracked symbol at runtime. For the last vulnerability, no sanitizers are inferred.
B. Case Study: The Heartbleed Vulnerability
In this case study, we show how our method successfully
generates a search pattern for the “Heartbleed” vulnerability
presented in Section II as an example of a taint-style vul-
nerability. We use our method to generate patterns for the
security-sensitive sink memcpy in OpenSSL version 1.1.0f, the
last version of the library to be vulnerable to this particular
bug. Among functions such as strcpy, strcat and sprintf,
memcpy is one of the functions most commonly associated
with buffer overﬂow vulnerabilities [see 5, 11].
We begin by employing the heuristic presented in Sec-
tion III-B to discover library functions that deﬁne their argu-
ments. Figure 9a shows the discovered library function names
and argument numbers. We manually verify each of these to
ﬁnd that all but one are inferred correctly. For the falsely
identiﬁed third argument to memset, we found that it is often
of the form sizeof(buffer) where buffer is a variable
reaching memset without prior deﬁnition. Slightly adapting
our heuristic to account for the semantics of sizeof (by
suppressing its arguments) ﬁxes this problem as well, leaving
us only with correctly inferred data sources.
Function
fgets
sprintf
memset
write
memcpy