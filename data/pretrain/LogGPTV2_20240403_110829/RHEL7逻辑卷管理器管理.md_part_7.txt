:::
[]{#LVM_CLI.html#idm140426180339296
.indexterm}[]{#LVM_CLI.html#idm140426180338336 .indexterm}
::: para
当 LVM 操作需要为一个或多个逻辑卷分配物理扩展时，分配的步骤如下：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    在卷组中生成一组完整的未分配物理扩展供使用。如果在命令后结尾处提供任何物理扩展范围，则只会使用指定物理卷中符合那些范围的未分配物理扩展。
    :::
-   ::: para
    将依次尝试每个分配策略，从最严格的策略（即
    `contiguous`{.literal}）开始，到使用 `--alloc`{.option}
    选项指定的分配策略结束，也可以将具体逻辑卷或卷组设定为默认选项。在每个策略中，从需要填充的空白逻辑卷空间数字最小的逻辑扩展开始，该空间填充后，则根据分配策略限制依次填充。如果需要更多空间，则
    LVM 会移至下一个策略。
    :::
:::
::: para
分配策略限制如下：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    `contiguous`{.literal}
    分配策略要求任意逻辑扩展（不是逻辑卷的第一个逻辑扩展）的物理位置紧邻它前面一个逻辑扩展的物理位置。
    :::
    ::: para
    逻辑卷为条带或镜像时，`contiguous`{.literal}
    分配限制可独立应用于每个需要空间的条带或镜像（leg）。
    :::
-   ::: para
    `cling`{.literal}
    分配策略要求将要添加到现有逻辑卷中的任意逻辑扩展使用的物理卷条件到任意逻辑扩展使用的物理卷条件到之前已经由那个逻辑卷中的一个逻辑扩展使用的现有逻辑卷中。如果已定义配置参数
    `allocation/cling_tag_list`{.literal}，则在两个物理卷中出现任何一个列出的标签时，就将这两个物理卷视为匹配。这样就可以分配为目的，标记有相似属性（比如其物理位置）的物理卷，并将其视为对等。有关与
    LVM 标签一同使用 `cling`{.command} 策略指定扩展 LVM
    卷时要附加物理卷的详情，请查看 [第 4.4.15.3 节 "使用
    `cling`{.literal}
    分配策略扩展逻辑卷"](#LVM_CLI.html#extend-lv-cling){.xref}。
    :::
    ::: para
    逻辑卷为条带或镜像时，`cling`{.literal}
    分配限制可独立应用于每个需要空间的条带或镜像（leg）。
    :::
-   ::: para
    `normal`{.literal}
    分配策略不会在平行逻辑卷中使用相同的偏移选择与分配给该平行逻辑卷（即不同的条带或镜像映象/分支）的逻辑扩展共享同一物理卷的物理扩展。
    :::
    ::: para
    分配镜像日志的同时分配逻辑卷以保留镜像数据时，`normal`{.literal}
    分配策略会首先尝试为该日志和数据选择不同类型的物理卷。如果无法实现，且将
    `allocation/mirror_logs_require_separate_pvs`{.literal}
    配置参数设定为 0，它就会允许将部分数据记录到共享物理卷中。
    :::
    ::: para
    同样，分配精简池元数据时，`normal`{.literal}
    分配策略会与考虑镜像日志分配一样根据
    `allocation/thin_pool_metadata_require_separate_pvs`{.literal}
    配置参数做决定。
    :::
-   ::: para
    如果有足够的剩余扩展满足分配要求，但 `normal`{.command}
    分配策略不会使用它们，则 `anywhere`{.command}
    会使用，即使出现将两个条带放到同一物理卷，从而降低性能的情况。
    :::
:::
::: para
可使用 `vgchange`{.command} 命令更改分配策略。
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
如果根据定义的分配策略需要使用本小节外的任意布局行为，则应注意在以后的版本中可能有所变化。例如：如果在命令行中提供两个有相同可用剩余物理扩展数供分配的空物理卷，LVM
目前考虑使用每个卷以便将其列出；不保证今后的发行本仍保留这个属性。如果获取某个具体逻辑卷的特定布局很重要，则应使用
`lvcreate`{.command} 和 `lvconvert`{.command}
步骤顺序构建，以便在每个步骤中应用分配策略，让 LVM
不会在布局上自由裁量。
:::
:::
:::
::: para
要查看目前在任意具体示例中的分配进度方法，可查看 debug
日志输出结果，例如在命令中添加 `-vvvv`{.option} 选项。
:::
:::
::: section
::: titlepage
## [⁠]{#LVM_CLI.html#VG_create_cluster}4.3.3. 在集群中创建卷组 {.title}
:::
[]{#LVM_CLI.html#idm140426166497632
.indexterm}[]{#LVM_CLI.html#idm140426166496192
.indexterm}[]{#LVM_CLI.html#idm140426166494752 .indexterm}
::: para
可使用 `vgcreate`{.command}
命令在集群环境中创建卷组，这与在单一节点中创建卷组是一样的。
:::
::: para
默认情况下，所有可访问共享存储的计算机都可以看到使用 CLVM
在共享存储中创建的卷组。但也可以 使用 `vgcreate`{.command} 命令的
`-c n`{.option} 选项创建只能在该集群的一个节点中本地看到的卷组。
:::
::: para
在集群环境中执行以下命令可在执行该命令节点中创建本地卷组。该命令创建名为
`vg1`{.filename}，包含物理卷 `/dev/sdd1`{.filename} 和
`/dev/sde1`{.filename} 的卷组。
:::
``` screen
# vgcreate -c n vg1 /dev/sdd1 /dev/sde1
```
::: para
可使用 `vgchange`{.command} 命令的 `-c`{.option}
选项指定现有卷组是本地卷组还是集群卷组，如 [第 4.3.8 节
"更改卷组参数"](#LVM_CLI.html#VG_change){.xref} 所述。
:::
::: para
可使用 `vgs`{.command}
命令查看现有卷组是否为集群的卷组，如果是集群的卷组，则会显示
`c`{.command} 属性。下面的命令显示卷组 `VolGroup00`{.filename} 和
`testvg1`{.filename} 属性。在这个示例中，`VolGroup00`{.filename}
不是集群的卷组，而 `testvg1`{.filename} 是集群的卷组，如
`Attr`{.command} 标题下的 `c`{.command} 属性所示。
:::
``` screen
# vgs
  VG            #PV #LV #SN Attr   VSize  VFree
  VolGroup00      1   2   0 wz--n- 19.88G    0
  testvg1         1   1   0 wz--nc 46.00G 8.00M
```
::: para
有关 `vgs`{.command} 命令的详情，请查看 [第 4.3.5 节
"显示卷组"](#LVM_CLI.html#VG_display){.xref} [第 4.8 节 "LVM
的自定义报告"](#LVM_CLI.html#custom_report){.xref} 以及 `vgs`{.command}
man page。
:::
:::
::: section
::: titlepage
## [⁠]{#LVM_CLI.html#VG_grow}4.3.4. 在卷组中添加物理卷 {.title}
:::
[]{#LVM_CLI.html#idm140426152366960
.indexterm}[]{#LVM_CLI.html#idm140426152365520
.indexterm}[]{#LVM_CLI.html#idm140426154942624
.indexterm}[]{#LVM_CLI.html#idm140426154941184 .indexterm}
::: para
请使用 `vgextend`{.command}
命令在现有卷组中添加额外的物理卷。`vgextend`{.command}
命令通过添加一个或多个可用物理卷增大卷组容量。
:::
::: para
下面的命令在卷组 `vg1`{.filename} 中添加物理卷 `/dev/sdf1`{.filename}。
:::
``` screen
# vgextend vg1 /dev/sdf1
```
:::
::: section
::: titlepage
## [⁠]{#LVM_CLI.html#VG_display}4.3.5. 显示卷组 {.title}
:::
[]{#LVM_CLI.html#idm140426144715744
.indexterm}[]{#LVM_CLI.html#idm140426144714304 .indexterm}
::: para
有两个命令可显示 LVM 卷组的属性：即 `vgs`{.command} 和
`vgdisplay`{.command}。
:::
::: para
`vgscan`{.command} 命令扫描卷组的所有磁盘，并重新构建 LVM
缓存文件，同时显示卷组。有关 `vgscan`{.command} 命令的详情，请查看
[第 4.3.6 节
"为卷组扫描磁盘以构建缓存文件"](#LVM_CLI.html#vgscan){.xref}。
:::
::: para
`vgs`{.command}
命令使用可配置格式提供卷组信息，每行表示一个卷组。`vgs`{.command}
命令提供大量的格式控制，有助于脚本编写。有关使用 `vgs`{.command}
命令自定义输出结果的详情，请查看 [第 4.8 节 "LVM
的自定义报告"](#LVM_CLI.html#custom_report){.xref}。
:::
[]{#LVM_CLI.html#idm140426152440768 .indexterm}
::: para
`vgdisplay`{.command}
命令采用固定格式显示卷组属性（比如大小、扩展、物理卷数等等）。下面的示例显示使用
`vgdisplay`{.command} 命令显示卷组 `new_vg`{.filename}
的输出结果。如果无法指定卷组，则会显示当前所有卷组。
:::
``` screen
# vgdisplay new_vg
  --- Volume group ---
  VG Name               new_vg
  System ID
  Format                lvm2
  Metadata Areas        3
  Metadata Sequence No  11
  VG Access             read/write
  VG Status             resizable
  MAX LV                0
  Cur LV                1
  Open LV               0
  Max PV                0
  Cur PV                3
  Act PV                3
  VG Size               51.42 GB
  PE Size               4.00 MB
  Total PE              13164
  Alloc PE / Size       13 / 52.00 MB
  Free  PE / Size       13151 / 51.37 GB
  VG UUID               jxQJ0a-ZKk0-OpMO-0118-nlwO-wwqd-fD5D32
```
:::
::: section
::: titlepage
## [⁠]{#LVM_CLI.html#vgscan}4.3.6. 为卷组扫描磁盘以构建缓存文件 {.title}
:::
[]{#LVM_CLI.html#idm140426174828432
.indexterm}[]{#LVM_CLI.html#idm140426174827152 .indexterm}
::: para
`vgscan`{.command} 命令扫描系统中的所有支持的磁盘设备以查找 LVM
物理卷和卷组。这样可在 `/etc/lvm/cache/.cache`{.filename}
文件中构建缓存，以保持当前 LVM 设备列表。
:::
::: para
LVM 会在系统启动及执行 LVM 操作时自动运行 `vgscan`{.command}
命令，比如当您执行 `vgcreate`{.command} 命令或 LVM 探测到非一致性时。
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
更改硬件配置以及在某个节点中添加或删除设备时，可能需要手动运行
`vgscan`{.command}
命令，以便系统可以识别系统启动时不存在的新设备。这是必需的，例如当在 SAN
中的系统中添加新磁盘，或热插拔标记为物理卷的新磁盘时。
:::
:::
:::
::: para
可在 `lvm.conf`{.filename}
文件中定义过滤器进行限制以避免扫描具体设备。有关使用过滤器限制要扫描设备的详情，请查看
[第 4.5 节 "使用过滤器控制 LVM
设备扫描"](#LVM_CLI.html#lvm_filters){.xref}。
:::
::: para
以下是 `vgscan`{.command} 命令的输出结果示例。
:::
``` screen
# vgscan
  Reading all physical volumes.  This may take a while...
  Found volume group "new_vg" using metadata type lvm2
  Found volume group "officevg" using metadata type lvm2
```
:::
::: section
::: titlepage
## [⁠]{#LVM_CLI.html#VG_remove_PV}4.3.7. 从卷组中删除物理卷 {.title}
:::
[]{#LVM_CLI.html#idm140426175339232
.indexterm}[]{#LVM_CLI.html#idm140426175337792
.indexterm}[]{#LVM_CLI.html#idm140426175336352
.indexterm}[]{#LVM_CLI.html#idm140426149785600 .indexterm}
::: para
使用 `vgreduce`{.command}
命令从卷组中删除未使用的物理卷。`vgreduce`{.command}
命令通过删除一个或多个空物理卷来缩小卷组容量。这样可释放那些不同卷组中要使用的物理卷，或者将其从该系统中删除。
:::
::: para
从卷组中删除物理卷前，可使用 `pvdisplay`{.command}
命令确定任何逻辑卷都没有使用该物理卷。
:::
``` screen
# pvdisplay /dev/hda1
-- Physical volume ---
PV Name               /dev/hda1
VG Name               myvg
PV Size               1.95 GB / NOT usable 4 MB [LVM: 122 KB]
PV#                   1
PV Status             available
Allocatable           yes (but full)
Cur LV                1
PE Size (KByte)       4096
Total PE              499
Free PE               0
Allocated PE          499
PV UUID               Sd44tK-9IRw-SrMC-MOkn-76iP-iftz-OVSen7
```
::: para
如果该物理卷仍被使用，则必须使用 `pvmove`{.command}
命令将该数据迁移到另一个物理卷中。然后使用 `vgreduce`{.command}
命令删除该物理卷。
:::
::: para
下面的命令从卷组 `my_volume_group`{.filename} 中删除物理卷
`/dev/hda1`{.filename}。
:::
``` screen
# vgreduce my_volume_group /dev/hda1
```
::: para
如果逻辑卷包含失败的物理卷，则不能使用那个逻辑卷。要从卷组中删除物理卷，如果没有在缺少的物理卷中分配逻辑卷，则可以使用
`vgreduce`{.command} 命令的 `--removemissing`{.option} 参数。