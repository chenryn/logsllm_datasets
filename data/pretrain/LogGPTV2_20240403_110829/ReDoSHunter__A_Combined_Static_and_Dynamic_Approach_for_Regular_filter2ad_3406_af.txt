!
!
!
!
!
!
!
!
!
!
!
!
!
35
% 28.57
25.71
28.57
60.00
34.29
14.29
34.29
100
among all methods, only our ReDoSHunter (RHR) can iden-
tify all 35 ReDoS-vulnerabilities, while the best existing
works (i.e., SAX) can only identify around half of them (21 /
35 = 60.00%). While identiﬁcation rate of other works range
from 14.3% (5 / 35) to 34.4% (12 / 35). In addition, it is
noteworthy that there are 7 / 35 (20.00%) unique CVEs (#12,
#18, #19, #22, #28, #29, and #35) that can only be identiﬁed
by ReDoSHunter, indicating the limitation of existing works
and reﬂecting the effectiveness of ReDoSHunter.
To get more insights, we illustrate the presence of patterns
on all 35 ReDoS-related CVEs, as depicted in Figure 9. The
solid circle denotes the pattern that has been identiﬁed in
the corresponding CVE. We can see that every one of 35
CVEs involves at least one pattern, indicating the effective-
ness of our ﬁve patterns and reasoning about the high recall
of ReDoSHunter.
Furthermore, to demonstrate the usefulness of Re-
DoSHunter, we present the case of CVE #35 (i.e., CVE-2015-
8854, given in Figure 10) in detail. ReDoSHunter success-
fully detected two vulnerabilities in the regex. Speciﬁcally,
ReDoSHunter not only generated two attack strings (‘_’ +
‘__’ × 100 + ‘!’, and ‘*’ + ‘**’ × 100 + ‘!’), but also diag-
nosed corresponding two EOD patterns ((?:__|[\s\S])+
and (?:\*\*|[\s\S])+) that lead to the two ReDoS-
vulnerabilities. In comparison, the other seven detectors all
failed to detect any vulnerability. Furthermore, the vulnerabil-
ity discloser only found one vulnerability11 (correspondingly,
the project maintainers only ﬁxed one vulnerability12). This
reveals the capability of ReDoSHunter to ﬁnd real-world vul-
nerabilities.
Summary to RQ2: ReDoSHunter can identify all 35
ReDoS-related CVEs, compared with the best work identi-
fying only over 60.00% of them. Besides, there are 20.00%
CVEs (7 over 35) can only be identiﬁed by ReDoSHunter,
indicating the effectiveness of the patterns we concluded.
Therefore, to answer RQ2, ReDoSHunter signiﬁcantly out-
performs other seven state-of-the-art methods in ﬁnding
real-world known ReDoS-vulnerabilities.
11 https://github.com/markedjs/marked/issues/497
12 https://github.com/markedjs/marked/commit/a37bd643f05b
f95ff18cafa2b06e7d741d2e2157
USENIX Association
30th USENIX Security Symposium    3859
var inline = {
// sub-regex (?:__|[\s\S])+
// vulnerable to '_' + '__' × 100 + '!' trigger EOD
// sub-regex (?:\*\*|[\s\S])+
// vulnerable to '*' + '*' × 100 + '!' trigger EOD
...
em:/^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,
...
};
Figure 10: The npm package marked (25.1k stars) is a mark-
down parser and compiler. The marked package before 0.3.4
allows attackers to cause a denial of service (CPU consump-
tion) via unspeciﬁed vectors that trigger a ReDoS issue for
the em inline rule.
Table 11: The Overall Evaluation Results on Unknown
ReDoS-vulnerabilities. The abbreviations RXR, RER, NAA,
SAX, RET, SDL, RSE and RHR represent RXXR2, Rex-
ploiter, NFAA, safe–regex, Regexploit, SDL, ReScue and Re-
DoSHunter, respectively. ! and % denote whether the corre-
sponding method can successfully detect the vulnerability or
not.
No.
Project
Status
RXR RER NAA SAX RET
SDL
RSE RHR
#1
#2
#3
#4
#5
#6
#7
#8
#9
ua-parser-js
CVE-2020-7733
trim
CVE-2020-7753
npm-user-validate
CVE-2020-7754
dat.gui
CVE-2020-7755
codemirror-js
CVE-2020-7760
@absolunet/kafe
CVE-2020-7761
express-validators
CVE-2020-7767
djvalidator
CVE-2020-7779
ua-parser-js
CVE-2020-7793
%
%
%
%
!
!
!
!
%
#10
glob-parent
CVE-2020-28469 %
#11
jinja2
#12
three
#13
lodash
#14
py
CVE-2020-28493 %
CVE-2020-28496 %
CVE-2020-28500 %
CVE-2020-29651 %
#15
uap-core
CVE-2021-21317 %
#16 CKEditor 5
CVE-2021-21391 %
#17
prism
CVE-2021-23341 %
#18
path-parse
CVE-2021-23343 %
#19
html-parse-stringify
CVE-2021-23346 !
#20
jspdf
#21
printf
CVE-2021-23353 !
CVE-2021-23354 %
#22
hosted-git-info
CVE-2021-23362 %
#23
browserslist
CVE-2021-23364 %
#24
postcss
#25
postcss
#26
ssri
#27
Python
#28
validator
CVE-2021-23368 %
CVE-2021-23382 %
CVE-2021-27290 !
Fixed
Fixed
%
%
Total
7
%
%
%
!
%
!
%
!
%
%
!
!
%
%
%
!
%
%
!
%
%
%
!
%
%
%
%
%
8
%
%
%
%
!
!
%
!
%
%
!
!
%
%
%
!
%
%
%
!
%
%
!
!
%
!
%
%
10
%
%
%
%
!
!
!
!
%
%
%
%
%
%
%
%
%
%
!
!
!
!
%
%
%
!
%
%
9
%
%
%
!
%
!
!
!
%
!
%
%
%
%
%
%
%
%
!
%
%
%
%
%
%
!
%
%
7
%
%
%
%
%
!
%
!
%
%
%
%
%
%
%
%
%
%
!
%
%
%
%
%
%
%
%
%
3
%
%
%
%
%
!
%
!
%
%
%
%
%
%
%
%
%
%
%
%
%
%
%
!
%
!
!
!
6
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
28
% 25.00
28.57
35.71
32.14
25.00
10.71
21.43
100
4.4 Results on Unknown Vulnerabilities
On top of the remarkable result of ReDoSHunter of identify-
ing known vulnerabilities, we then explore the effectiveness
of ReDoSHunter in the wild and compare it with other works.
Speciﬁcally, for 26 popular-used projects on GitHub, npm
and PyPI, we apply ReDoSHunter to identify whether there
are possible ReDoS-vulnerable regexes. Once ReDoSHunter
detected a vulnerable regex, we then reported to the maintain-
ers and submit to CVE to get conﬁrmation. To speed up the
disclosure and report process, we cooperated with Snyk [39],
a security research team, who helped us to verify the repro-
ducibility and severeness of the ReDoS-vulnerable regexes,
contact the maintainers of corresponding projects and assign
CVE IDs once conﬁrmed by the maintainers.
The results are shown in Table 11. In total, ReDoSHunter
detected 28 ReDoS-vulnerable regexes in these 26 projects,
26 of them were assigned CVE IDs, and 2 of them were ﬁxed
by the maintainers. We also applied other methods to explore
these projects as well, the results were unsatisfactory, with at
most 35.71% ReDoS-vulnerabilities (an average of 25.51%)
can be detected, leaving about 64% vulnerabilities unrevealed.
The results are in line with the previous ﬁndings in §4.2 and
§4.3, revealing the effectiveness of ReDoSHunter in exploring
unrevealed vulnerabilities.
Summary to RQ3: ReDoSHunter is capable to be applied
to exploring unknown ReDoS-vulnerabilities in the wild.
Among 28 identiﬁed vulnerabilities, 26 of them were as-