# Hash Joins: Past, Present & Future
### Thomas Munro, PGCon 2017, Ottawa

## About Me
- **EnterpriseDB Database Server Team** (approximately 2 years)
- **PostgreSQL Contributions**:
  - SKIP LOCKED
  - remote_apply
  - replay_lag
  - DSA (co-author)
  - Various smaller contributions, debugging, and code reviews
- **Active Proposal**: Parallel-aware hash join

## Overview
- **Joins**
- **Hash Tables**
- **Simple Hash Joins**
- **Multi-Batch Hash Joins**
- **Parallel Hash Joins**
- **Open Problems**
- **Questions**

## Joins
- **Definition**: A set of operators from the relational algebra.
- **Function**: Join operators take two relations and produce a new relation.

### Example Join Syntax in SQL
- `R, S WHERE R.foo = S.foo`
- `R [INNER] JOIN S ON R.foo = S.foo`
- `R {LEFT|RIGHT|FULL} OUTER JOIN S ON R.foo = S.foo`
- `R WHERE [NOT] EXISTS (SELECT * FROM S WHERE R.foo = S.foo)`
- `R WHERE foo IN (SELECT foo FROM S)`

### Execution Strategies
- **Nested Loop**: For each tuple in the outer relation, scan the inner relation.
- **Merge Join**: Scan both inner and outer relations in the same order.
- **Hash Join**: Build a hash table from the inner relation, then probe it for each value in the outer relation.

### Hash Join Characteristics
- **Comparison to Nested Loop**: A hash join is similar to a nested loop but uses a temporary in-memory hash index.
- **Memory Considerations**: Early memory-constrained SQL systems relied on nested loops and merge joins. Large RAM systems enabled hash joins, but also improved sorting speed, leading to extensive discussions on the merits of each.
- **Algorithm Choice**: Limited by join conditions and join type. For example, a full outer join requires merge-joinable or hash-joinable conditions.

## Hash Tables
- **DynaHash**: Chained (conflict resolution by linked lists), private or shared memory, general purpose.
- **simplehash**: Open addressing (conflict resolution by probing), private.
- **Hash Join’s Open-Coded Hash Table**: Why?
  - **Structure**: Essentially an array.
  - **Collision Handling**: Multiple tuples with the same key (and unintentional hash collisions) require managing a same-key chain.
  - **Phases**: Insert-only phase followed by a read-only probe phase, requiring minimal operations.
  - **Resizing**: If memory constraints require resizing, the old table is freed, a new one is allocated, and all tuples are reinserted.
  - **Simplicity**: The basic array structure is sufficient for hash join needs.

### Chunk-Based Storage
- **Efficiency**: Tuples are loaded into 32KB chunks to reduce palloc overhead.
- **Iteration and Resizing**: Provides a convenient way to iterate over all tuples when resizing the bucket array.
- **Memory Management**: Useful for dumping tuples due to memory constraints, allowing some to be copied into new chunks and others to be written to disk.

## Simple Hash Joins
- **High-Level Algorithm**:
  - **Build Phase**: Load all tuples from the inner relation into the hash table.
  - **Probe Phase**: For each tuple in the outer relation, find a match in the hash table.
  - **Unmatched Phase**: For full and right outer joins, scan the hash table for unmatched rows.

### Optimizations
- **Empty Outer**: Before building the hash table, check if the outer plan is empty.
- **Empty Inner**: After building the hash table, check if it is empty.
- **Out Joins**: Prevents the above optimizations for certain join types.

### Buckets
- **Load Factor**: Number of tuples divided by the number of buckets.
- **Initial Sizing**: The planner estimates the number of rows in the inner relation, initially sizing the hash table for a load factor of one (rounded up to a power of two).
- **Resizing**: If the load factor is too high, the bucket array is resized, and tuples are reinserted.

## Multi-Batch Hash Joins
- **Work_mem Respect**: Partition the inner relation into batches that fit into work_mem.
- **Grace Algorithm**: Known as the “Grace” algorithm or “hybrid” with the refinement that partition 0 is loaded directly into the hash table.
- **Adaptive Batching**: If a batch is too large, double the number of batches.
- **Skew Optimization**: Use statistics to minimize disk I/O by placing the most common values from the outer plan into special “skew buckets.”

## Parallel Hash Joins
- **Concept**: Leverage multiple processors to perform hash joins in parallel.
- **Implementation**: Details and challenges of implementing parallel hash joins.

## Open Problems
- **Current Challenges**: Discuss ongoing issues and areas for improvement in hash join implementations.

## Questions
- **Q&A Session**: Open floor for questions and discussions.

---

This revised version aims to provide a clear, professional, and coherent presentation of the content, making it easier to follow and understand.