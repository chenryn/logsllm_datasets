# Title: How to Kill Symbolic Deobfuscation for Free (or: Unleashing the Potential of Path-Oriented Protections)

## Authors
- Mathilde Ollivier, CEA, LIST, Paris-Saclay, France, PI:EMAIL
- Sébastien Bardin, CEA, LIST, Paris-Saclay, France, PI:EMAIL
- Richard Bonichon, CEA, LIST, Paris-Saclay, France, PI:EMAIL
- Jean-Yves Marion, Université de Lorraine, CNRS, LORIA, Nancy, France, PI:EMAIL

## Abstract
Code obfuscation is a critical tool for safeguarding software intellectual property from attacks such as reverse engineering and code tampering. However, recent automated attacks based on Dynamic Symbolic Execution (DSE) have shown promising results, thereby threatening software integrity. Current defenses are either not effective against symbolic reasoning, significantly impact runtime performance, or are easily detectable. We introduce and study a new class of anti-DSE protections, termed path-oriented protections, which target the weakest aspect of DSE: path exploration. We propose a lightweight, efficient, and analytically proven class of obfuscation algorithms designed to thwart DSE-based attacks. Extensive evaluation demonstrates that these approaches effectively counter symbolic deobfuscation while incurring only a minimal overhead.

## CCS Concepts
- Security and privacy → Software reverse engineering; Logic and verification; Malware and its mitigation
- Software and its engineering → Formal methods

## Keywords
Reverse Engineering, Code Protection, Obfuscation

## ACM Reference Format
Mathilde Ollivier, Sébastien Bardin, Richard Bonichon, and Jean-Yves Marion. 2019. How to Kill Symbolic Deobfuscation for Free (or: Unleashing the Potential of Path-Oriented Protections). In 2019 Annual Computer Security Applications Conference (ACSAC '19), December 9–13, 2019, San Juan, PR, USA. ACM, New York, NY, USA, 13 pages. https://doi.org/10.1145/3359789.3359812

## 1. Introduction
### Context
Reverse engineering and code tampering are commonly used to extract proprietary assets (e.g., algorithms or cryptographic keys) or bypass security checks in software. Code protection techniques aim to prevent or at least make such man-at-the-end attacks difficult, where the attacker has total control over the environment running the software. Obfuscation [21, 22] hides a program's behavior by transforming its executable code, making it much harder to understand while preserving its functionality.

Although obfuscation techniques are resilient against basic automatic reverse engineering (including static and dynamic attacks), code analysis techniques are rapidly improving [39]. Attacks based on Dynamic Symbolic Execution (DSE) [18, 30, 40] use logical formulas to represent input constraints along execution paths and automatically solve these constraints to discover new paths. DSE is highly effective against existing obfuscations [5, 8, 13, 24, 37, 51], combining the strengths of dynamic and semantic analysis.

### Problem
The current state of symbolic deobfuscation is unclear. Proposed protections, such as Mixed Boolean Arithmetic (MBA) formulas [52] or cryptographic hash functions [42], have limitations. The effect of complexified constraints on automatic solvers is unpredictable [6], and cryptographic hash functions can induce significant overhead and are susceptible to key extraction attacks, possibly via DSE. DSE has been successfully applied to malware and legitimate codes protected by state-of-the-art tools, including virtualization, self-modification, hashing, and MBA [8, 37, 51]. A recent systematic evaluation [5] shows that most standard obfuscation techniques do not seriously impact DSE. Only nested virtualization provides good protection, but at a high cost in terms of runtime and code size [37].

### Goals and Challenges
We aim to propose a new class of dedicated anti-DSE obfuscation techniques to make automated symbolic execution attacks inefficient. These techniques should be strong, rendering DSE intractable in practice, and lightweight, with very low overhead in both code size and runtime performance. Most anti-DSE defenses focus on breaking symbolic reasoning, but we target the real weak spot of DSE: path exploration. Banescu et al. [5] present a specific obfuscation scheme with large space overhead and no experimental evaluation. We aim to provide a general framework for understanding such obfuscations and to define new schemes that are both strong and lightweight.

## 2. Motivation
### 2.1 Attacker Model
#### Scenario
We consider man-at-the-end scenarios where the attacker has full access to a potentially protected code. The attacker has the executable but not the source code, is skilled in program analysis, and has limited resources, typically motivated by economic gains [19] or short-term attack scenarios like VOD cracking or video games.

The attacker has access to state-of-the-art off-the-shelf tools (DSE, etc.), can try to attack protections (tainting [40], slicing [44], patterns), and craft attacks by combining these tools. Our goal is to delay the attack enough so that the attacker stops due to the cost. If the attacker needs to develop a dedicated tool beyond the state-of-the-art, the defender has won.

#### Scope
We focus on Symbolic Execution and other trace-based semantic attacks, as they have proven to be useful automated techniques in recent attacks. We aim to remove them from the attacker’s toolbox to increase the attack's costs. Typical DSE-based attacks include finding rare behaviors (triggers [13], secrets, etc.) of the whole program or local exhaustive exploration (proofs [8], simplifications [37]). Such attacks can be abstracted into two goals: (1) Secret Finding and (2) Exhaustive Path Exploration.

#### Caveat
Part of our experimental evaluations uses source codes, as state-of-the-art source-level DSE tools are more efficient than binary-level ones. This favors the attacker, making our approach even more effective.

### 2.2 Motivating Example
Let us illustrate anti-symbolic path-oriented protections using a toy crackme program [1]. Figure 1 shows a skeleton of its source code. The `main` function calls `check` to verify each character of an 11-byte input and outputs "win" for a correct guess, "lose" otherwise. Each sub-function `check_char_ii` (where \( i \in [0, 10] \)) hides a secret character value behind bitwise transformations, like XOR or shift. This challenge can be easily solved by symbolic execution tools. KLEE [17] needs 0.03s (on C code) and Binsec [26] 0.3s (on binary code) to find a winning input and explore all paths.

#### Standard Protections
To measure the impact of standard obfuscations on symbolic deobfuscation, we protect the program using Tigress [23], a widely used tool for systematic evaluation of deobfuscation methods [5, 8, 37]. Table 1 shows that virtualization does not prevent KLEE from finding the winning output, though it can thwart path exploration with a high runtime overhead (40×).

#### The Case for (New) Path-Oriented Protections
To defend against symbolic attackers, we need better anti-DSE obfuscation: path-oriented protections. These protections aim to exponentially increase the number of paths that a DSE-based deobfuscation tool, like KLEE, must explore. Two such protections, Split and For, are illustrated in Figure 2 on the `check_char_0` function.

```c
// Split
int func(char chr) {
    char ch = 0;
    for (int i = 0; i < 10; i++) {
        if (i > 5) garb++;
        else garb--;
    }
    if (ch2 > 20) garb++;
    else garb--;
    ch ^= 97;
    return (ch == 31);
}

// For
int func(char chr) {
    char ch = 0;
    for (int i = 0; i < 60; i++) {
        if (i > 50) garb++;
        else garb--;
    }
    ch ^= 97;
    return (ch == 31);
}
```

For simplicity, the protections are implemented in a naive form, sensitive to slicing or compiler optimizations. Robustness is discussed later. In summary, Split adds a number \( k \) of conditional statements depending on new fresh inputs, increasing the number of paths to explore by a factor of \( 2^k \). For adds \( k \) loops whose upper bound depends on distinct input bytes, expanding the number of paths to explore by a factor of \( 2^{8 \cdot k} \). Both obfuscated codes rely on the input, forcing DSE to explore all paths. Table 1 summarizes the performance of Split and For. Both Split and For do not induce any overhead, Split is highly efficient (timeout) against coverage but not against secret finding, while For is highly efficient for both. For (k = 2) performs better than Split (k = 19), and further experiments show For to be a much more effective path protection than Split.

**Question: How to distinguish a priori between mildly effective and very strong path-oriented protections?**

Note that `gcc -Ofast` removes this simple Split, as it is not related to the output (slicing attack). A basic For resists this attack, but `clang -Ofast` can remove it through pattern matching.

## Table 1: DSE Attack on the Crackme Example (KLEE)
| Protection | Coverage Time (s) | Secret Finding Time (s) |
|------------|-------------------|-------------------------|
| None       | 0.03              | 0.03                    |
| Virtualization | 1.2             | 0.03                    |
| Split (k=19) | Timeout          | 0.03                    |
| For (k=2)   | Timeout          | Timeout                 |

This table summarizes the performance of different protections against DSE attacks using KLEE.