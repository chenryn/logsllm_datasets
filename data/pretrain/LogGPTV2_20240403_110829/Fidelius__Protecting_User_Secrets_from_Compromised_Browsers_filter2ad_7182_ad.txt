that our code will abide by this policy.
The second issue is that of rollback attacks. A malicious
operating system could roll back or delete data that is stored
to disk, so, for applications that rely on maintaining sensitive
state, the enclave must have a way to determine whether it
has the most up-to-date stored data. A generic solution to
this problem, such as ROTE [30], would sufﬁce, but ROTE
requires a distributed setting which may not be available to a
user browsing the web from home. We can solve this problem
by enlisting the assistance of the server to ensure protection
against rollbacks, especially in situations where an enclave is
connected to a server that already keeps information about
the user. The idea is to keep a revision number, one for each
origin, that gets sent from the server to the enclave at the end
of the attestation process and is incremented whenever changes
are made to locally stored data. Since the attacker cannot
change the number stored on the server or in the enclave
during execution, we can detect whenever a rollback attack has
been launched or stored data has been deleted by observing
a mismatch between the number on the data reloaded by the
enclave and the number sent by the server.
Our generic approach for storage of user secrets and net-
work connections could easily be extended to include storage
of cookies, resulting in a separate cookie store, accessible only
to the enclave, that otherwise provides the same functionality
available from cookies in unmodiﬁed browsers.
VIII. SECURITY ANALYSIS
In this section we give a clear enumeration of the different
kinds of threats against which we expect Fidelius to defend and
argue that Fidelius does indeed protect against these attacks.
We ﬁrst discuss attacks on the core features of Fidelius and
then move on to attacks targeted speciﬁcally at the trusted I/O
path and user interface.
A. Attacks on Core Features
Enclave omission attack. An attacker with full control of
the sofware running on a system may manipulate the browser
extension and enclave manager software to pretend to use an
enclave when in fact it does not. This attack will, however,
fail because of defenses built into our user interface via the
keyboard and display dongles. Absent a connection to a real
enclave, the trusted input lights on the keyboard and display
will not light, alerting the user that entered data is unprotected.
Enclave misuse attack. A more subtle attack of this form
uses the enclave for some tasks but fakes it for others. For
example, to circumvent the defense above, trusted input from
the user could use the real enclave functionality, but trusted
output on the display could be spoofed without the enclave. As
such, it is necessary for each I/O device to separately defend
against fake use of an enclave. The defenses described for the
previous attack sufﬁce to protect against this attack as well,
but both lights are needed.
An attacker could also use the genuine trusted I/O path but
attempt to omit use of the enclave when running JavaScript
inside the browser. This attacker could clearly not access
persistent storage, trusted network communication, or user
inputs because those features require keys only available inside
the enclave. On the other hand,
to be run
the JavaScript
(cid:19)(cid:24)(cid:18)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:45:26 UTC from IEEE Xplore.  Restrictions apply. 
inside the enclave is not encrypted, so an attacker could
potentially also run it outside the enclave, so long as it
does not make use of any other resources or features offered
by Fidelius. At this point, however, the JavaScript becomes
entirely benign because it cannot give the attacker running it
any new information or convince the user or remote server
of any falsehoods because the trusted paths to all private
information or trusted parties are barred.
A last variant of this attack would omit certain ECALLs
that perform necessary setup operations like initializing a form
and its inputs before the user begins to enter data. Omission of
these ECALLs would result in the system crashing but would
not leak secrets in the process. As mentioned before, we cannot
conceivably protect against a denial of service attack where the
compromised OS refuses to allow any access to the system.
We can only ensure that normal or abnormal use of the enclave
does not leak user secrets.
Page tampering attack. Failing to omit an enclave entirely
or even partially, the attacker can turn to modifying the inputs
given to various ecalls. In particular, the names and structure
of forms and their inputs or the JavaScript to be run inside
the enclave could be modiﬁed. Mounting this attack, however,
would require an adversary who can break the unforgeability
property of the signatures used to sign secure  and
 tags. Those tags are veriﬁed with an origin-
speciﬁc public key (either hard-coded in the enclave or veriﬁed
with a certiﬁcate) that lies out of reach of our attacker.
Since trusted JavaScript is the only way to access trusted
user inputs from within the browser, the fact that we have sep-
arate scope for execution of trusted and untrusted JavaScript
means that any attempt to directly access user secrets stored
in protected inputs will necessarily be thwarted.
Redirection attack. This attack resembles a straightforward
phishing attempt. Instead of tampering with the operation of
Fidelius, a browser could navigate to a malicious website
designed to look legitimate in an attempt to send user secrets to
an untrusted server. Here again the persistent overlay added by
our display dongle prevents an attack by displaying the origin
to which the enclave has connected. The strict same-origin
policy within the enclave means that the origin displayed in
the trusted portion of the screen is the only possible destination
for network connections originating withing the enclave. While
an attacker could establish a connection with a server other
than the declared origin, the data sent to that server will
be encrypted with a key known only to the intended origin,
rendering the data useless to others. As such, the only way for
an attacker to have legitimate-looking text appear there is to
send user data only to legitimate destinations.
Storage tampering attack. Although authenticated encryp-
tion with a sealing key tied to the enclave protects persistently
stored data from tampering, an attacker can still delete or roll
back the state of stored data. We detail our solution to protect
against this attack in Section VII-B4, where we enlist the
assistance of the server to keep an up-to-date revision number
for the enclave’s data out of reach of the attacker. Attacks
where the browser connects to a malicious site whose trusted
JavaScript tries to read or modify persistent storage for other
sites are prevented by our policy of strict separation between
stored data associated with different origins.
B. Attacks on Trusted I/O Path and UI
We now consider attacks against the trusted I/O path to
the user. Direct reading of private key presses and display
outputs is prevented by encryption of data between the enclave
and keyboard/display dongles, but we also consider a number
of more sophisticated attacks. Since the I/O path to the user
closely relates to the user interface, we discuss attacks against
both the protocols and the interface together. We discuss
security considerations involved in the setup of trusted I/O
devices in Section VI-A.
Mode switching attack. As discussed in Section VI, the
decision to switch between trusted and untrusted modes ul-
timately lies with the untrusted browser because it decides
when an input ﬁeld receives focus or blurs or when to activate
Fidelius in the ﬁrst place. We defend against this type of
tampering with the light on the dongles and the delay when
switching from trusted to untrusted modes. These defenses
protect against both a standard unauthorized exit from the
enclave as well as a rapid switching attack that tries to capture
some key presses by quickly switching between modes.
Replay attack. We defend against replay of trusted com-
munications between the enclave and display by including a
non-repeating count in every message that is always checked
to make sure an old count does not repeat. An attacker
could, however, eavesdrop on key presses destined for one
enclave, switch to a second enclave connected with a site it
controls, and replay the key presses to the second enclave
in an attempt to read trusted key presses. We defend against
this attack by including the name of the origin along with
the count in encrypted messages, so they cannot be replayed
across different enclaves. Likewise, since the keyboard and
display use different keys to encrypt communications with the
enclave(s), messages cannot be replayed across sources.
Input manipulation attack. Attackers can attempt to make
untrusted input ﬁelds appear where a user might expect
trusted input ﬁelds and thereby fool users into typing trusted
information in untrusted ﬁelds. Since the attacker has almost
full control of what gets placed on the display, this grants
considerable freedom in manipulating the display to mimic
visual queues that would indicate secure ﬁelds. Fortunately,
our display dongle reserves a strip at the bottom of the screen
for trusted content directly from the enclave. This area informs
the user what trusted input is currently focused, if any.
An attacker could also manipulate the placement of actual
trusted input ﬁelds or the labels that precede them on a page
in order to confuse or mislead a user as to the purpose of
each ﬁeld. By using the trusted display area to show which
trusted input currently has focus, if any, we give developers
the opportunity to assign inputs descriptive trusted names that
will alert a user if there is a mismatch between an input’s name
and its stated purpose in the untrusted section of the display.
(cid:19)(cid:24)(cid:19)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:45:26 UTC from IEEE Xplore.  Restrictions apply. 
Timing attack. The fact that key presses originate with the
user means that the timing of presses and associated updates
to content on the screen may leak information about user
secrets [27]. We close this timing side channel by having the
keyboard send encrypted messages to the enclave at a constant
rate while in trusted mode, sending null messages if the user
does not press a key during a given time period and queueing
key presses that appear in the same time period. A high enough
frequency for this process ensures that the user experience is
not disrupted by a backlog of key presses. Updates to display
overlay contents also happen at a constant rate, so timing
channels through key presses and display updates cannot leak
information about user secrets.
Multi-Enclave Attacks. As mentioned in Section III, Fi-
delius does not aim to protect against attacks mounted by
incorrect or privacy-compromising code provided by an origin
that has already been authenticated. That said, we brieﬂy dis-
cuss here some attacks that could be launched by collaboration
between a malicious OS and a malicious remote origin that
is trusted by Fidelius (for example, in case of a maliciously
issued certiﬁcate) and which tries to steal data a user meant
to send to a different trusted origin. An attacker who has
compromised a trusted site could always ask for data from a
user directly, rendering these attacks less important in practice,
but there may be some kinds of data a user would only want
to reveal to one trusted origin and not others, e.g. a password
for a particular site.
First we consider an enclave-switching attack, a more in-
volved variant of the mode-switching attack described above.
In this attack, the untrusted sytem rapidly switches between
different enclaves, one connecting to a legitimate site and the
other to a malicious site controlled by the attacker. Fidelius’s
existing mode-switching delay also protects against this variant
of the attack because the display always shows the origin
associated with the enclave currently in use.
A more complicated attack could run one honest, uncompro-
mised enclave concurrently with an enclave connected to an
malicious origin. The uncompromised enclave would feed its
overlays to the display while the compromised enclave would
receive inputs from the keyboard. This may be noticed by
users in the current Fidelius design because anything typed
would not appear on the display, but by the time a user
notices this, secrets may have already been compromised. To
defend against this, the keyboard and display dongles could
be conﬁgured to only connect to one enclave at a time (not
connecting to another enclave until the ﬁrst enclave declares
it has entered the end state) and to check that they have
connected to the same enclave at setup by using the enclave
to send each other hashes of fresh origin-speciﬁc secrets.
IX. IMPLEMENTATION
Fig. 4.
Images of our Fidelius prototype in use. The image above shows
the view of a user, and the image below shows the view of an attacker
taking a screen capture while the user enters credit card information. Since
trusted overlays are decrypted and placed over the image after leaving the
compromised computer, the attacker does not see the user’s data.
Enclave features described in Section VII2. Our prototype is
fully functional but does not include the trusted setup stage
between the enclave and devices, which we carry out manually.
Figure 4 shows screenshots of our prototype in use, and
Figure 5 gives an overview of its physical construction.
Since Fidelius requires few changes on the server side and
our evaluation therefore focuses on browser overhead, we do
not implement a server modiﬁed to run Fidelius. This would
consist mainly of having the server verify a remote attestation
and decrypt messages from the web enclave.
A. Trusted Path
Our prototype runs on an Intel Nuc with a 2.90 GHz Core
i5-6260U Processor and 32 GB of RAM running Ubuntu
16.04.1 and SGX SDK version 2.1.2. We produced dongles
to place between the Nuc and an off-the-shelf keyboard and
display using a Raspberry Pi Zero with a 1 GHz single
core Broadcom BCM2835 processor and 512 MB of RAM
running Raspbian GNU/Linux 9 (stretch) for the keyboard and
a Raspberry Pi 3 with a 1.2 GHZ quad-core ARM Cortex
A53 processor and 1GB RAM running Raspbian GNU/Linux
9 (stretch) at a display resolution of 1280x720. Figures 6 and 7
show our input and output dongle devices.
We implemented a prototype of Fidelius, including both
the trusted path described in Sections V and VI and the Web
2Our open source implementation of Fidelius, the instructions to build the
dongles and accompanying sample code are available at https://github.com/
SabaEskandarian/Fidelius.
(cid:19)(cid:24)(cid:20)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:45:26 UTC from IEEE Xplore.  Restrictions apply. 
7UXVWHG.H\ERDUG212))
7UXVWHG'LVSOD\212))
:HE(QFODYH
%URZVHU
53,=HUR
86%+,'
86%+,'
6HF86%+,'
53,
2YHUOD\)UDPHV
+'0,
26
+'0,
D
E
F
Fig. 5. Prototype of the trusted path: (a) standard USB keyboard connected to our RPI Zero dongle to encrypt keystrokes, (b) Computer with a Fidelius-enabled
browser, and (c) standard HDMI display connected to our RPI 3 dongle to overlay secure frames.

	




	




		


		

Fig. 6. Trusted keyboard dongle built from Raspberry Pi Zero. In untrusted
mode, the dongle forwards key presses from the keyboard to the computer. In
trusted mode, the dongle sends a constant stream of encrypted values to the
enclave. The values correspond to key presses if there has been any input or
null values otherwise.

	