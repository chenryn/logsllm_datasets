### Ensuring Code Compliance with Policy
Our code will strictly adhere to this policy.

### Rollback Attacks
The second issue concerns rollback attacks. A malicious operating system could roll back or delete data stored on disk, which poses a significant risk for applications that rely on maintaining sensitive state. The enclave must have a mechanism to determine whether it has the most up-to-date stored data. A generic solution, such as ROTE [30], would be sufficient, but ROTE requires a distributed setting, which may not be available for a user browsing from home. We can address this problem by enlisting the server's assistance to ensure protection against rollbacks, especially when the enclave is connected to a server that already maintains information about the user. The solution involves keeping a revision number for each origin. This number is sent from the server to the enclave at the end of the attestation process and incremented whenever changes are made to locally stored data. Since the attacker cannot alter the number stored on the server or in the enclave during execution, a mismatch between the number on the reloaded data and the number sent by the server indicates a rollback attack or data deletion.

### Extending User Secrets and Network Connections
Our generic approach for storing user secrets and managing network connections can be easily extended to include cookie storage. This results in a separate cookie store, accessible only to the enclave, providing the same functionality as cookies in unmodified browsers.

## Security Analysis
In this section, we outline the various threats Fidelius is designed to defend against and argue that Fidelius effectively protects against these attacks. We first discuss attacks on the core features of Fidelius and then move on to attacks targeting the trusted I/O path and user interface.

### Attacks on Core Features

#### Enclave Omission Attack
An attacker with full control over the software running on a system might manipulate the browser extension and enclave manager to pretend to use an enclave when it does not. However, this attack will fail due to defenses built into our user interface via the keyboard and display dongles. Without a connection to a real enclave, the trusted input lights on the keyboard and display will not light, alerting the user that entered data is unprotected.

#### Enclave Misuse Attack
A more subtle attack involves using the enclave for some tasks but faking it for others. For example, trusted input from the user could use the real enclave, but trusted output on the display could be spoofed without the enclave. Therefore, each I/O device must independently defend against fake use of the enclave. The defenses described for the previous attack are also effective here, but both lights are necessary.

An attacker could use the genuine trusted I/O path but attempt to omit the enclave when running JavaScript inside the browser. This attacker would not access persistent storage, trusted network communication, or user inputs because those features require keys only available inside the enclave. However, JavaScript run inside the enclave is not encrypted, so an attacker could potentially run it outside the enclave, provided it does not use any other resources or features offered by Fidelius. At this point, the JavaScript becomes benign, as it cannot provide new information to the attacker or convince the user or remote server of falsehoods, since the trusted paths to all private information or trusted parties are blocked.

A variant of this attack would omit certain ECALLs that perform necessary setup operations, like initializing a form and its inputs before the user begins to enter data. Omitting these ECALLs would cause the system to crash but would not leak secrets. As mentioned, we cannot protect against a denial-of-service attack where the compromised OS refuses to allow any access to the system. We can only ensure that normal or abnormal use of the enclave does not leak user secrets.

#### Page Tampering Attack
If the attacker fails to omit the enclave entirely or partially, they might modify the inputs given to various ECALLs, such as the names and structure of forms and their inputs or the JavaScript to be run inside the enclave. However, mounting this attack would require breaking the unforgeability property of the signatures used to sign secure `<form>` and `<input>` tags. These tags are verified with an origin-specific public key (either hard-coded in the enclave or verified with a certificate) that is out of reach of the attacker.

Since trusted JavaScript is the only way to access trusted user inputs from within the browser, the separation of execution scopes for trusted and untrusted JavaScript ensures that any attempt to directly access user secrets stored in protected inputs will be thwarted.

#### Redirection Attack
This attack resembles a phishing attempt. Instead of tampering with Fidelius, a browser could navigate to a malicious website designed to look legitimate, attempting to send user secrets to an untrusted server. The persistent overlay added by our display dongle prevents this by displaying the origin to which the enclave has connected. The strict same-origin policy within the enclave means that the origin displayed in the trusted portion of the screen is the only possible destination for network connections originating from the enclave. While an attacker could establish a connection with a different server, the data sent to that server will be encrypted with a key known only to the intended origin, rendering the data useless. Thus, the only way for an attacker to display legitimate-looking text is to send user data to legitimate destinations.

#### Storage Tampering Attack
Although authenticated encryption with a sealing key tied to the enclave protects persistently stored data from tampering, an attacker can still delete or roll back the state of stored data. Our solution, detailed in Section VII-B4, involves enlisting the server's assistance to keep an up-to-date revision number for the enclave’s data out of reach of the attacker. Attacks where the browser connects to a malicious site whose trusted JavaScript tries to read or modify persistent storage for other sites are prevented by our policy of strict separation between stored data associated with different origins.

### Attacks on Trusted I/O Path and UI
We now consider attacks against the trusted I/O path to the user. Direct reading of private key presses and display outputs is prevented by encrypting data between the enclave and keyboard/display dongles. We also consider more sophisticated attacks, as the I/O path closely relates to the user interface.

#### Mode Switching Attack
As discussed in Section VI, the decision to switch between trusted and untrusted modes ultimately lies with the untrusted browser, which decides when an input field receives focus or blurs or when to activate Fidelius. We defend against this type of tampering with the light on the dongles and a delay when switching from trusted to untrusted modes. These defenses protect against both unauthorized exits from the enclave and rapid switching attacks that try to capture key presses by quickly switching between modes.

#### Replay Attack
We defend against replay of trusted communications between the enclave and display by including a non-repeating count in every message, always checked to ensure an old count does not repeat. An attacker could eavesdrop on key presses destined for one enclave, switch to a second enclave connected to a site they control, and replay the key presses to the second enclave to read trusted key presses. We defend against this by including the name of the origin along with the count in encrypted messages, preventing replays across different enclaves. Since the keyboard and display use different keys to encrypt communications with the enclave(s), messages cannot be replayed across sources.

#### Input Manipulation Attack
Attackers can attempt to make untrusted input fields appear where a user might expect trusted input fields, tricking users into typing trusted information in untrusted fields. The attacker has considerable freedom in manipulating the display to mimic visual cues that indicate secure fields. Fortunately, our display dongle reserves a strip at the bottom of the screen for trusted content directly from the enclave, informing the user what trusted input is currently focused, if any.

An attacker could also manipulate the placement of actual trusted input fields or the labels that precede them on a page to confuse or mislead the user. By using the trusted display area to show which trusted input currently has focus, developers can assign descriptive trusted names that alert the user to any mismatch between an input’s name and its stated purpose in the untrusted section of the display.

#### Timing Attack
The timing of key presses and associated updates to content on the screen may leak information about user secrets. We close this timing side channel by having the keyboard send encrypted messages to the enclave at a constant rate while in trusted mode, sending null messages if the user does not press a key during a given time period and queuing key presses that appear in the same time period. A high enough frequency ensures that the user experience is not disrupted by a backlog of key presses. Updates to display overlay contents also happen at a constant rate, preventing timing channels from leaking information about user secrets.

#### Multi-Enclave Attacks
Fidelius does not aim to protect against attacks mounted by incorrect or privacy-compromising code provided by an origin that has already been authenticated. However, we briefly discuss attacks that could be launched by collaboration between a malicious OS and a malicious remote origin trusted by Fidelius (e.g., through a maliciously issued certificate). An attacker who has compromised a trusted site could always ask for data from a user directly, making these attacks less important in practice. However, there may be data a user would only want to reveal to one trusted origin, such as a password for a particular site.

First, we consider an enclave-switching attack, a more involved variant of the mode-switching attack. In this attack, the untrusted system rapidly switches between different enclaves, one connecting to a legitimate site and the other to a malicious site controlled by the attacker. Fidelius’s existing mode-switching delay also protects against this variant because the display always shows the origin associated with the enclave currently in use.

A more complicated attack could run one honest, uncompromised enclave concurrently with an enclave connected to a malicious origin. The uncompromised enclave would feed its overlays to the display, while the compromised enclave would receive inputs from the keyboard. Users might notice this in the current Fidelius design because anything typed would not appear on the display. To defend against this, the keyboard and display dongles could be configured to connect to only one enclave at a time and check that they have connected to the same enclave at setup by using the enclave to send each other hashes of fresh origin-specific secrets.

## Implementation
### Prototype Overview
Fig. 4. Images of our Fidelius prototype in use. The image above shows the view of a user, and the image below shows the view of an attacker taking a screen capture while the user enters credit card information. Since trusted overlays are decrypted and placed over the image after leaving the compromised computer, the attacker does not see the user’s data.

### Enclave Features
Our prototype is fully functional but does not include the trusted setup stage between the enclave and devices, which we carry out manually. Figure 4 shows screenshots of our prototype in use, and Figure 5 provides an overview of its physical construction.

Since Fidelius requires few changes on the server side, our evaluation focuses on browser overhead, and we do not implement a server modified to run Fidelius. This would mainly involve the server verifying a remote attestation and decrypting messages from the web enclave.

### Trusted Path
Our prototype runs on an Intel NUC with a 2.90 GHz Core i5-6260U Processor and 32 GB of RAM, running Ubuntu 16.04.1 and SGX SDK version 2.1.2. We produced dongles to place between the NUC and an off-the-shelf keyboard and display using a Raspberry Pi Zero with a 1 GHz single-core Broadcom BCM2835 processor and 512 MB of RAM running Raspbian GNU/Linux 9 (stretch) for the keyboard, and a Raspberry Pi 3 with a 1.2 GHz quad-core ARM Cortex A53 processor and 1 GB RAM running Raspbian GNU/Linux 9 (stretch) at a display resolution of 1280x720. Figures 6 and 7 show our input and output dongle devices.

We implemented a prototype of Fidelius, including both the trusted path described in Sections V and VI and the Web enclave features. Our open-source implementation of Fidelius, instructions to build the dongles, and accompanying sample code are available at https://github.com/SabaEskandarian/Fidelius.

### Prototype of the Trusted Path
Fig. 5. Prototype of the trusted path: (a) standard USB keyboard connected to our RPI Zero dongle to encrypt keystrokes, (b) Computer with a Fidelius-enabled browser, and (c) standard HDMI display connected to our RPI 3 dongle to overlay secure frames.

### Trusted Keyboard Dongle
Fig. 6. Trusted keyboard dongle built from Raspberry Pi Zero. In untrusted mode, the dongle forwards key presses from the keyboard to the computer. In trusted mode, the dongle sends a constant stream of encrypted values to the enclave. The values correspond to key presses if there has been any input or null values otherwise.