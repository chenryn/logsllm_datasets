# Accelerating Last-Mile Web Performance with Popularity-Based Prefetching

**Authors:**  
Srikanth Sundaresan, Nazanin Magharei, Nick Feamster, Renata Teixeira  
{srikanth.sundaresan, nazanin, feamster}@cc.gatech.edu, [PI:EMAIL]

## Categories and Subject Descriptors
C.2.3 [Computer-Communication Networks]: Network Operations—Network Management; C.2.3 [Computer-Communication Networks]: Network Operations—Network Operations

## General Terms
Measurement, Performance

## Keywords
Broadband Networks, Web Performance, Prefetching

## 1. Introduction
As broadband speeds increase, latency is becoming a significant bottleneck for many applications, particularly for web downloads. Latency affects various aspects of web page load times, including DNS lookups, TCP handshakes, and the transfer of web objects. Previous research has shown that much of this latency can occur in the last mile [2]. While some performance bottlenecks can be mitigated by increasing downstream throughput (e.g., by purchasing a higher service plan), latency often remains a critical issue, especially for connections with higher throughput.

To address these latency bottlenecks, we have implemented a system that performs DNS prefetching and TCP connection caching for the most frequently visited websites within a home network, a technique we term "popularity-based prefetching." Although many devices and applications already perform DNS prefetching and maintain persistent TCP connections, these are typically based on predictive content rather than past site popularity. We evaluate our optimizations using a trace-driven simulator, driven by traffic data collected from five homes in the BISmark testbed [1]. Our results show that performing DNS prefetching and TCP connection caching for the twenty most popular sites can double the DNS and connection cache hit rates.

## 2. Popularity-Based Prefetching
Figure 1 illustrates the design of our system, which we have implemented and deployed on BISmark. We enhance `dnsmasq`, a caching DNS resolver, to maintain a list of the most frequently resolved domains, and `polipo`, an HTTP proxy, to manage a list of the most visited domains. A helper script refreshes DNS entries for expired domains and maintains open connections to servers in the connection list by periodically sending dummy GET requests. The system ensures that these actions do not create a positive feedback loop that keeps unpopular domains in the popular domain list. The following parameters influence the trade-off between page load time and overhead:

- **Sizes of the Popular Domains and Popular Connections Lists:** The number of domains for which the system actively prefetches DNS records and the number of sites for which it maintains active connections. The router uses an LRU (Least Recently Used) cache to manage these lists.
- **Domain and Connection Timeout Thresholds:** If no device in the home network looks up a domain within the domain timeout threshold, the system removes the domain from the list and stops prefetching its DNS records. Similarly, if no HTTP request occurs within the connection timeout threshold, the system no longer keeps TCP connections alive for that domain. The system maintains only one active connection per domain.

Deploying these optimizations on the router itself, rather than relying solely on browser-based optimizations, offers several benefits:
1. Not all devices and browsers may implement these optimizations.
2. Users and devices across a household may share common browsing activity.

![Augmenting the home router to automatically prefetch DNS records and maintain TCP connections to popular Web sites](figure1.png)

## 3. Evaluation
We analyze the effects of popularity-based DNS prefetching and connection caching using a trace-driven discrete event simulator that models the optimizations as described in the previous section.

### 3.1 Simulator Setup
We evaluate the benefits of popularity-based prefetching using a simulator driven by traces from five homes in the BISmark testbed [1]. These traces contain all DNS lookups and HTTP connection requests (anonymized) across all devices. Table 1 summarizes the characteristics of the homes we study.

| Home | People | Days | DNS Lookups | New HTTP Transactions | Unique Lookups | Unique HTTPs | DNS Int-req. | Non-simultaneous HTTP intervals | Non-simultaneous HTTP requests |
|------|--------|------|-------------|-----------------------|----------------|--------------|--------------|---------------------------------|--------------------------------|
| 1    | 5      | 8    | 159K        | 450K                  | 23             | 32           | 840s         | 210s                            | 59%                            |
| 2    | 3      | 7    | 185K        | 254K                  | 1              | 88           | 82K          | 146K                            | 450s                           |
| 3    | 38     | 23   | 850s        | 135s                  | 37%            | 2            | 103          | 219K                            | 347K                          |
| 4    | 9      | 10   | 180s        | 72s                   | 60%            | 1            | 24           | 60K                             | 99K                           |
| 5    | 20     | 14   | 502s        | 340s                  | 63%            | -            | -            | -                               | -                             |

Table 1: Properties of traces analyzed in our simulations.

### 3.2 DNS Prefetching
The size of the popular domains list and the value of the domain timeout threshold determine the benefits and overhead of DNS prefetching. The overhead is the ratio of the number of prefetched DNS requests to the total number of DNS cache hits. We first examine how the domain timeout threshold affects the DNS cache hit ratio and overhead when the size of the popular domain list is 20.

Figure 2 shows the results of our experiment. The median daily DNS cache hit ratio without prefetching varies from 7% to 15% depending on the home, but setting a prefetching threshold of 30 minutes results in a cache hit ratio of about 30–50%. By default, the prefetching overhead varies from 5 to 150, but applying the backoff algorithm described in Section 2 reduces the prefetching overhead to less than 10 for all homes, with less than a 2% reduction in the hit ratio. The DNS cache hit ratio and prefetching overhead depend on traffic characteristics in each home, such as the number of concurrent Internet users, diversity of looked-up domains, inter-arrival times of requests, browser, and distribution of TTLs across domain names. Larger DNS request inter-arrival times decrease the DNS cache hit ratio. Homes with higher prefetching overhead have domains with TTL values as low as one second. To test the sensitivity of our results to the domain list size, we repeated the experiment for sizes ranging from 10 to 320. Sizes beyond 20 result in only marginal improvements in cache hit ratio in most cases.

![Daily DNS cache hit ratio with DNS prefetching when the popular domain list size is 20](figure2.png)

### 3.3 TCP Connection Caching
We explore whether popularity-based TCP connection caching can improve the cache hit ratio. We use a popular connection list size of 20. Overhead is defined as the number of keepalive packets required to keep the TCP connections to the server open.

We find that maintaining an active connection cache of popular connections can improve the connection cache hit ratio by up to 30%, even by maintaining no more than one active connection to each server. Figure 3 shows that the hit ratio of the connection cache can improve by up to 30%, even for connection timeout values as small as two minutes. For a timeout of two minutes, the connection hit ratios are 16–32%, compared with a baseline of 4–19% across homes. The overhead varies from two to nine keep-alives per cached connection per day with a timeout value of two minutes. Increasing the timeout to larger than one minute yields only marginally better connection hit ratios. Even small threshold values result in significant improvements because HTTP requests tend to be quite bursty. Due to the low diversity in HTTP requests, we observe only a 2% improvement in daily connection cache hit ratio for popular connection list sizes larger than 20.

![Daily TCP connection cache hit ratio when the popular connection list size is 20](figure3.png)

## Acknowledgments
This project is supported by NSF CNS-1059350 and a Google Focused Research grant.

## References
[1] BISMark: Broadband Internet Service Benchmark. <http://projectbismark.net/>

[2] S. Sundaresan, W. de Donato, N. Feamster, R. Teixeira, S. Crawford, and A. Pescapè. Broadband internet performance: A view from the gateway. In Proc. ACM SIGCOMM, Toronto, Canada, Aug. 2011.