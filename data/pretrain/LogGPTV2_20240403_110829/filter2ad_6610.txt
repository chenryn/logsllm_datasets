title:Accelerating last-mile web performance with popularity-based prefetching
author:Srikanth Sundaresan and
Nazanin Magharei and
Nick Feamster and
Renata Teixeira
Accelerating Last-Mile Web Performance with
Popularity-Based Prefetching
Srikanth Sundaresan, Nazanin Magharei, Nick Feamster, Renata Teixeira
{srikanth.sundaresan,nazanin,feamster}@cc.gatech.edu, PI:EMAIL
Categories and Subject Descriptors
C.2.3 [Computer-Communication Networks]: Network Opera-
tions—Network Management; C.2.3 [Computer-Communication
Networks]: Network Operations—Network Operations
General Terms
Measurement, Performance
Keywords
Broadband Networks, Web performance, Pre-fetching
1.
INTRODUCTION
As broadband speeds increase, latency is becoming a bottleneck
for many applications—especially for Web downloads. Latency af-
fects many aspects of Web page load time, from DNS lookups to the
time to complete a three-way TCP handshake; it also contributes
to the time it takes to transfer the Web objects for a page. Previ-
ous work has shown that much of this latency can occur in the last
mile [2]. Although some performance bottlenecks can be mitigated
by increasing downstream throughput (e.g., by purchasing a higher
service plan), in many cases, latency introduces performance bot-
tlenecks, particularly for connections with higher throughput.
To mitigate latency bottlenecks in the last mile, we have imple-
mented a system that performs DNS prefetching and TCP con-
nection caching to the Web sites that devices inside a home visit
most frequently, a technique we call popularity-based prefetching.
Many devices and applications already perform DNS prefetching
and maintain persistent TCP connections, but most prefetching is
predictive based on the content of the page, rather than on past site
popularity. We evaluate the optimizations using a simulator that
we drive from trafﬁc traces that we collected from ﬁve homes in
the BISmark testbed [1]. We ﬁnd that performing DNS prefetch-
ing and TCP connection caching for the twenty most popular sites
inside the home can double DNS and connection cache hit rates.
2. POPULARITY-BASED PREFETCHING
Figure 1 shows the design of our system, which we have im-
plemented and deployed on BISmark. We augment dnsmasq,
a caching DNS resolver, to maintain a popular domain list that
users in the home network resolve most frequently, and polipo,
a HTTP proxy, to maintain a popular connection list of domains
users visit. A helper script refreshes the DNS entries for expired
domains, and maintains open connections to servers in the con-
nection list by periodically sending dummy GET requests to each
Copyright is held by the author/owner(s).
SIGCOMM’12, August 13–17, 2012, Helsinki, Finland.
ACM 978-1-4503-1419-0/12/08.
site. (The prototype ensures that neither of these actions induce a
positive feedback loop that keeps unpopular domains in the popular
domains list.) The following parameters affect the tradeoff between
page load time and overhead:
• Sizes of the popular domains and popular connections list. The
number of domains for which the system actively prefetches DNS
records and the number of sites to which it maintains active con-
nections. The router maintains this list using an (LRU) cache.
• Domain and connection timeout thresholds. If no device in the
home network looks up a domain in the popular domain list
within a domain timeout threshold, the system removes the do-
main from the list and no longer actively prefetches the DNS
records for this domain. Similarly, if no HTTP request oc-
curs within a connection timeout threshold, the system no longer
keeps TCP connections alive for that domain. The system main-
tains only one active connection per domain.
Deploying these optimizations on the router itself, rather than re-
lying solely on browser-based optimizations, offers several bene-
ﬁts, since: (1) not all devices and browsers may implement these
optimizations; (2) users and devices across a household may have
common browsing activity.
Figure 1: Augmenting the home router to automatically prefetch DNS
records and maintain TCP connections to popular Web sites.
3. EVALUATION
We analyze the effects of popularity based DNS prefetching and
connection caching using a trace-driven discrete event simulator
that models the optimizations as described in the previous section.
3.1 Simulator Setup
We evaluate the beneﬁts of popularity-based prefetching us-
ing a simulator driven by traces from ﬁve homes in the BISmark
testbed [1]. These traces contain all DNS lookups and HTTP con-
nection requests (anonymized) across all devices. Table 1 shows
303Home 1
Home 2
Statistics
Home 3
Home 4
Home 5
1
81
159K
450K
23
32
840s
210s
59%
3
75
185K
254K
1
88
82K
146K
Trafﬁc Properties
5
8
450s
63s
58%
38
23
850s
135s
37%
2
103
219K
347K
9
10
180s
72s
60%
1
24
60K
99K
20
14
502s
340s
63%
People
Days
DNS Lookups
New HTTP
transactions
Unique Lookups
Unique HTTPs
DNS Int-req.
Non-simultaneous
HTTP intervals
Non-simultaneous
HTTP requests
Table 1: Properties of traces we have analyzed in our simulations.
)
%
(
e
t
a
r
t
i
h
e
h
c
a
c
S
N
D
60
50
40
30
20
10
0
0
300
Home 1
Home 2
Home 3
900
Domain timeout threshold (s)
Home 4
Home 5
1800
Figure 2: Daily DNS cache hit ratio with DNS prefetching when the popu-
lar domain list size is 20.
the characteristics of the homes we study. Unique lookups and
HTTPs are the median number of unique domains and new HTTP
connections every hour. DNS inter-request time is the median inter-
arrival time between DNS requests. Non-simultaneous HTTP in-
terval is the median time between the end of one HTTP ﬂow and
the start of the next to the same server, for non-overlapping ﬂows.
Non-simultaneous HTTP requests is the percentage of HTTP ﬂows
that do not overlap with the previous request to the same server.
DNS caching and prefetching The simulator maintains the DNS
cache using the timestamp, domain, and TTL of resolved DNS re-
sponses from trafﬁc logs. When prefetching a domain, the simu-
lator introduces a random delay between 50 and 200 ms; the trace
determines the TTL that we use for each DNS record. We consider
DNS requests for domains that wait for a response as cache misses.
TCP connection caching The simulator maintains the TCP con-
nection cache based on the timestamp, ﬁve-tuple, and duration of
both the entire TCP connection and its connection establishment of
all port 80 requests from the passive traces. For each new request,
we update the popularity of the corresponding IP address and com-
pare it with the entries in connection cache. In the event of a cache
miss, or when a connection to the same IP address is still in use
by another request, we establish a new connection, with the ﬂow
and TCP connection establishment durations that correspond to the
TCP connection in the trace. Upon a cache hit, the simulator de-
notes the cache entry as in use for the duration of TCP connection,
minus the connection establishment time.
3.2 DNS prefetching
The size of the popular domains list and the value of the domain
timeout threshold determine the beneﬁts and the overhead of DNS
prefetching. The overhead is the ratio of the number of prefetched
DNS requests to the total number of DNS cache hits. First, we
)
%
(
e
t
a
r
t
i
h
e
h
c
a
c
n
o
i
t
c
e
n
n
o
C
40
35
30
25
20
15
10
5
0
0
20
Home 1
Home 2
Home 3
80
Home 4
Home 5
100
120
40
60
Connection timeout threshold (s)
Figure 3: Daily TCP connection cache hit ratio when the popular connec-
tion list size is 20.
study how the domain timeout threshold affects the DNS cache hit
ratio and overhead when the size of popular domain list is 20.
Figure 2 shows the results of our experiment. The median daily
DNS cache hit ratio without prefetching varies from 7% to 15% de-
pending on the home, but setting a prefetching threshold of 30 min-
utes results in a cache hit ratio of about 30–50%. By default, the
prefetching overhead varies from 5 to 150, but applying the backoff
algorithm described in Section 2 reduced the prefetching overhead
to less than 10 for all homes, with less than a 2% reduction in the
hit ratio. The DNS cache hit ratio and prefetching overhead depend
on trafﬁc characteristics in each home, such as number of concur-
rent Internet users, diversity of the looked up domains, inter-arrival
times of of the requests, browser, and distribution of TTLs across
domain names. Larger DNS request interarrival times decrease the
DNS cache hit ratio. Homes with higher prefetching overhead have
domains with TTL values as low as one second. To test the sensitiv-
ity of our results to the domain list size, we repeated the experiment
for sizes ranging from 10 to 320. Sizes beyond 20 results in only a
marginal improvement in cache hit ratio in most cases.
3.3 TCP connection caching
We explore whether popularity-based TCP connection caching
can improve the cache hit ratio. We use a popular connection list
size of 20. We deﬁne overhead as the number of keepalive packets
required to keep the TCP connections to the server open.
We ﬁnd that maintaining an active connection cache of popular
connections can improve connection cache hit ratio of as much as
30%, even by maintaining no more than one active connection to
each server. Figure 3 shows that hit ratio of the connection cache
can improve by up to 30%, even for connection timeout values of
as small as two minutes. For a timeout of two minutes, the con-
nection hit ratios are 16–32%, compared with a baseline of 4–19%
across homes. The overhead varies from two to nine keep-alives
per cached connection per day with a timeout value of two min-
utes. Increasing the timeout to larger than one minute yields only
marginally better connection hit ratio. Even small threshold values
result in signiﬁcant improvements because HTTP requests tend to
be quite bursty. Due to the low diversity in HTTP requests, we ob-
serve only a 2% improvement in daily connection cache hit ratio
for popular connection list size of larger than 20.
Acknowledgments This project
1059350 and a Google Focused Research grant.
is supported by NSF CNS-
REFERENCES
[1] BISMark: Broadband Internet Service Benchmark.
http://projectbismark.net/.
[2] S. Sundaresan, W. de Donato, N. Feamster, R. Teixeira, S. Crawford,
and A. Pescapè. Broadband internet performance: A view from the
gateway. In Proc. ACM SIGCOMM, Toronto, Canada, Aug. 2011.
304