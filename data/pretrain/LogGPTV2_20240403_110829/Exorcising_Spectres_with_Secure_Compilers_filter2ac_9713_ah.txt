### Bounds Check Bypass
- **Bounds Check Bypass.** CoRR abs/1805.08506 (2018).
- **Spectre Mitigations in MSVC.** [Online]. Available: https://blogs.msdn.microsoft.com/vcblog/2018/01/15/spectre-mitigations-in-msvc/

### References
1. **Vineet Rajani, Deepak Garg, and Tamara Rezk.** 2016. On Access Control, Capabilities, Their Equivalence, and Confused Deputy Attacks. In *Proceedings of the 29th IEEE Computer Security Foundations Symposium (CSF)*. IEEE.
2. **Gabriel Scherer, Max New, Nick Rioux, and Amal Ahmed.** 2018. Fabulous Interoperability for ML and a Linear Language. In *FOSSACS '18*. 146–162.
3. **Daniel Schoepe, Musard Balliu, Benjamin Pierce, and Andrei Sabelfeld.** 2016. Explicit Secrecy: A Policy for Taint Tracking. In *Proceedings of the 1st IEEE European Symposium on Security and Privacy (EuroS&P)*. IEEE.
4. **Michael Schwarz, Martin Schwarzl, Moritz Lipp, Jon Masters, and Daniel Gruss.** 2019. Netspectre: Read arbitrary memory over network. In *Proceedings of the 24th European Symposium on Research in Computer Security (ESORICS)*. Springer.
5. **Lau Skorstengaard, Dominique Devriese, and Lars Birkedal.** 2020. Reasoning about a Machine with Local Capabilities: Provably Safe Stack and Return Pointer Management. *ACM Transactions on Programming Languages and Systems* 42, 1 (2020).
6. **Julian Stecklina and Thomas Prescher.** 2018. LazyFP: Leaking FPU Register State using Microarchitectural Side-Channels. CoRR abs/1806.07480 (2018).
7. **David Swasey, Deepak Garg, and Derek Dreyer.** 2017. Robust and Compositional Verification of Object Capability Patterns. *Proceedings of the ACM on Programming Languages* 1, OOPSLA (2017).
8. **Tachio Terauchi and Alex Aiken.** 2005. Secure Information Flow as a Safety Problem. In *Proceedings of the 12th International Symposium on Static Analysis (SAS)*. Springer.
9. **Caroline Trippel, Daniel Lustig, and Margaret Martonosi.** 2018. MeltdownPrime and SpectrePrime: Automatically-Synthesized Attacks Exploiting Invalidation-Based Coherence Protocols. CoRR abs/1802.03802 (2018).
10. **Stephan van Schaik, Alyssa Milburn, Sebastian Österlund, Pietro Frigo, Giorgi Maisuradze, Kaveh Razavi, Herbert Bos, and Cristiano Giuffrida.** 2019. RIDL: Rogue In-flight Data Load. In *Proceedings of the 40th IEEE Symposium on Security and Privacy (S&P '19)*. IEEE.
11. **Marco Vassena, Craig Disselkoen, Klaus von Gleissenthall, Sunjay Cauligi, Rami Gökhan Kıcı, Ranjit Jhala, Dean Tullsen, and Deian Stefan.** 2021. Automatically Eliminating Speculative Leaks from Cryptographic Code with Blade. *Proceedings of the ACM on Programming Languages* 5, POPL (2021).
12. **Guanhua Wang, Sudipta Chattopadhyay, Ivan Gotovchits, Tulika Mitra, and Abhik Roychoudhury.** 2018. oo7: Low-overhead Defense against Spectre Attacks via Binary Analysis. CoRR abs/1807.05843 (2018).

### Session 2B: Formal Analysis and Verification
**CCS '21, November 15–19, 2021, Virtual Event, Republic of Korea**

#### A Taint Tracking Overview
The language semantics we devise includes two parallel operational frameworks: the operational semantics, as presented in the paper, and the taint tracking semantics, detailed here. The top-level semantics is parametric in the taint tracking semantics. Strong languages \(L\) and \(T\) use the strong form of taint tracking, while weak languages \(L^-\) and \(T^-\) use the weak form. We provide an in-depth overview of our taint-tracking semantics; see [52] for the full models.

To integrate taint tracking into our semantics, we enrich the program state with taint information and develop a taint-tracking semantics that governs how taint is propagated. The top-level semantic judgment is then expressed in terms of the extended program states. An extended state steps if its operational part steps according to the semantics of Section 2.4 and if its taint part steps according to the rules of the taint semantics.

We define the elements needed to define the extended program states: extended heaps and extended bindings. In this appendix, we denote the heap, state, and bindings used by the operational semantics with a \(v\) suffix, so the \(H\), \(\Omega\), and \(B\) from Section 2.4 are denoted as \(H_v\), \(\Omega_v\), and \(B_v\) respectively. Formally, we indicate taint as \(\sigma ::= S | U\). Extended heaps \(H_e\) extend heaps with the taint of each location, whereas taint heaps \(H_t\) only track the taint. Extended heaps \(H_e\) can be split/merged into their value-only part \(H_v\) (used for the language semantics) and their taint-only part \(H_t\) (used for taint-tracking). This split is denoted as \(H_e \equiv H_v + H_t\).

Similarly, extended variable bindings \(B_e\) extend the binding with the taint of the variable, whereas taint bindings \(B_t\) only track the taint. Bindings can also be split/merged as \(B_e \equiv B_v + B_t\).

**Definitions:**
- **Extended Heaps:** \(H_e ::= \emptyset | H_e; n \mapsto v : \sigma\) where \(n \in \mathbb{Z}\)
- **Taint Heaps:** \(H_t ::= \emptyset | H_t; n \mapsto \sigma\) where \(n \in \mathbb{Z}\)
- **Extended Bindings:** \(B_e ::= \emptyset | B_e; x \mapsto v : \sigma\)
- **Taint Bindings:** \(B_t ::= \emptyset | B_t; x \mapsto \sigma\)
- **Extended Program States:** \(\Omega_e ::= C, H_e, B_e \vdash (s)f\)
- **Taint States:** \(\Omega_t ::= C, H_t, B_v \vdash (s)f\)

The taint semantics follows two judgments:
- **Judgment \(B_t \vdash e \downarrow \sigma\):** Reads as "expression \(e\) is tainted as \(\sigma\) according to the variable taints \(B_t\)".
- **Judgment \(\sigma; \Omega_t \xrightarrow{\sigma'} \Omega'_t\):** Reads as "when the pc has taint \(\sigma\), state \(\Omega_t\) single-steps to \(\Omega'_t\) producing a (possibly empty) action with taint \(\sigma'\)".

Below are the most representative rules for the taint tracking used by strong languages:

1. **(T-write-prv):**
   - **Premise:** \(B_e \vdash e \downarrow n : \sigma\)
   - **Action:** \(\sigma_{pc}; C, H_t, B_e \cdot B_e \vdash e :=pr e'\)
   - **Result:** \(B \vdash e' \downarrow n : \sigma'\)
   - **Update:** \(na = -|n|\), \(t = H_t \cup -|n| \mapsto \sigma''\), \(H'_t\), \(B_e \cdot B_e \vdash \text{skip}\)
   - **Taint Update:** \(\sigma = \sigma'' \sqcap \sigma'\), \(\sigma \sqcup \sigma_{pc} \xrightarrow{} C, H'_t\), \(H_t(na) = \sigma''\)

2. **(T-read-prv):**
   - **Premise:** \(B_e \vdash e' \downarrow _ : \sigma''\)
   - **Action:** \(\sigma_{pc}; C, H_t, B_e \cdot B_e \vdash \text{let } x = rdpr e \text{ in } s\)
   - **Result:** \(\sigma \sqcup \sigma_{pc} \xrightarrow{} C, H_t, B_e \cdot B_e \cup x \mapsto 0 : U \vdash s\)

For taint-tracking of the weak languages, we replace Rule (T-read-prv) with the following rule, which taints the read variable with the glb of the taints of the pc and the read value (\(\sigma' \sqcup \sigma_{pc}\)) instead of \(U\):

1. **(T-read-prv-weak):**
   - **Premise:** \(B \vdash e \downarrow n : \sigma'\)
   - **Action:** \(na = -|n|\), \(H_t(na) = \sigma''\), \(\sigma = \sigma'' \sqcap \sigma'\)
   - **Result:** \(\sigma_{pc}; C, H_t, B \cdot B \vdash \text{let } x = rdpr e \text{ in } s\)
   - **Taint Update:** \(\sigma \sqcup \sigma_{pc} \xrightarrow{} C, H_t, B \cdot B \cup x \mapsto 0 : \sigma' \sqcup \sigma_{pc} \vdash s\)

To correctly taint memory accesses, we need to evaluate expression \(e\) to derive the accessed location \(|n|\); see, for instance, Rule (T-write-prv). This is why taint-tracking states \(\Omega_t\) contain the full stack of bindings \(B_v\) and not just the taints \(B_t\). The rules above rely on a judgment \(B_e \vdash e \downarrow n : \sigma\) which is obtained by joining the result of the expression semantics on the values of \(B_e\) and the taint-tracking semantics on the taints of \(B_e\).

**Combining Operational and Taint Semantics:**
- **Combine-B:** \(B_v + B_t \equiv B_e\)
- **Operational Step:** \(B_v \vdash e \downarrow v\)
- **Taint Step:** \(B_e \vdash e \downarrow v : \sigma\)
- **Taint Binding:** \(B_t \vdash e \downarrow \sigma\)

The operational and taint single-steps from Section 2.4 are combined according to the judgment \(\Omega_e \xrightarrow{\lambda\sigma} \Omega'_e\):

- **Combine-s-L:** \(\Omega_v + \Omega_t \equiv \Omega_e\)
- **Operational Step:** \(\Omega_v \xrightarrow{\lambda} \Omega'_v\)
- **Taint Step:** \(S; \Omega_t \xrightarrow{\sigma} \Omega'_t\)
- **Merge-Ω:** \(\Omega_v + B_t \equiv B_e\), \(B'_v + B_t \equiv B'_e\), \(H_v + H_t \equiv H_e\), \(C; H_v; B_v \vdash s + C; H_t; B_e \vdash s' \equiv C; H_e; B'_e \vdash s\)

The operational semantics determines how states reduce (\(\Omega_v \xrightarrow{\lambda} \Omega'_v\)), whereas the taint-tracking semantics determines the action’s label and how taints are updated (\(S; \Omega_t \xrightarrow{\sigma} \Omega'_t\)). As mentioned, the pc taint is always safe since there is no speculation in \(L\). Merging states \(\Omega_v + \Omega_t\) results in ignoring the value information accumulated in \(\Omega_t\) since we rely on the computation performed by the operational semantics for values (Rule Merge-Ω).

In the speculative semantics, as in the non-speculative one, we decouple the operational aspects from the taint-tracking ones. At the top level, speculative program states (\(\Sigma_e\)) are defined as stacks of extended speculation instances (\(\Phi_e\)), which can be merged/split into their operational (\(\Phi_v\)) and taint (\(\Phi_t\)) sub-parts. The operational part (\(\Phi_v\)) was presented in Section 2. The taint part (\(\Phi_t\)) keeps track of the taint part of the program state (\(\Omega_t\)) and the taint of the pc (\(\sigma\)). As before, \(\Phi_v\) and \(\Phi_t\) can be split/merged as \(\Phi_e \equiv \Phi_v + \Phi_t\).

**Definitions:**
- **Speculative States:** \(\Sigma_e ::= \Phi_e\)
- **Extended Speculation Instance:** \(\Phi_e ::= (\Omega_e, w, \sigma)\)
- **Speculation Instance Taint:** \(\Phi_t ::= (\Omega_t, \sigma)\)

In the taint tracking used by the speculative semantics, reductions happen at the top of the stack: \(\Phi_t \xrightarrow{\sigma} \Phi'_t\). Selected rules are below:

1. **(T-T-speculate-action):**
   - **Premise:** \(\Omega_t \equiv C, H_t, B \vdash s; s'\)
   - **Action:** \(\sigma'; \Omega_t \xrightarrow{\sigma} \Omega'_t\)
   - **Result:** \(\Phi_t \cdot (\Omega_t, \sigma) \xrightarrow{\sigma' \sqcap \sigma} \Phi_t \cdot (\Omega'_t, \sigma)\)

2. **(T-T-speculate-if):**
   - **Premise:** \(\Omega_t \equiv C, H_t, B \cdot B \vdash (s; s')f\)
   - **Condition:** \(s \equiv \text{ifz } e \text{ then } s'' \text{ else } s'''\)
   - **Action:** \(\sigma; \Omega_t \xrightarrow{\sigma'} \Omega'_t\)
   - **Result:** 
     - If \(B \vdash e \downarrow 0 : \sigma\), then \(\Omega''_t \equiv C, H_t, B \cdot B \vdash s''; s'\)
     - If \(B \vdash e \downarrow n : \sigma\) and \(n > 0\), then \(\Omega''_t \equiv C, H_t, B \cdot B \vdash s'''; s'\)
     - \(\Phi_t \cdot (\Omega'_t, \sigma') \cdot (\Omega''_t, U) \xrightarrow{\sigma \sqcap \sigma'} \Phi_t \cdot (\Omega_t, \sigma') \cdot (\Omega''_t, U)\)

In these rules, \(\sigma\) is the program counter taint, which is combined with the action taint \(\sigma'\) (Rules (T-T-speculate-action) and (T-T-speculate-if)). Mis-speculation pushes a new state on top of the stack whose program counter is tainted \(U\), denoting the beginning of speculation (Rule (T-T-speculate-if)).

The two operational and taint-tracking single steps from Section 2.6 are combined in a single reduction as follows:

- **Combine-T:** \(\Phi_v + \Phi_t \equiv \Sigma_e\)
- **Reduction:** \(\Phi_v \xrightarrow{\lambda} \Phi'_v\)
- **Taint Reduction:** \(\Phi_t \xrightarrow{\sigma} \Phi'_t\)
- **Result:** \(\Sigma_e \xrightarrow{\lambda\sigma} \Sigma'_e\)

This reduction is used by the big-step semantics \(\Sigma_e \xrightarrow{\lambda\sigma} \Sigma'_e\) that concatenates single labels into traces, which, as before, do not contain microarchitectural actions generated by the attacker.

**Session 2B: Formal Analysis and Verification**
- **CCS '21, November 15–19, 2021, Virtual Event, Republic of Korea**