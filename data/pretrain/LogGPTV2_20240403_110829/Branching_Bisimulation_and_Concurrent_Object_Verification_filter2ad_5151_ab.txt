The following theorem shows that trace reﬁnement exactly
captures linearizability. A proof of the result is given in [23].
Theorem 2.3: Let Δ be an object system and Θsp the
corresponding linearizable speciﬁcation. All histories of Δ are
(cid:5)(cid:6)
linearizable if and only if Δ (cid:7)tr Θsp.
III. CHARACTERIZING STATE EQUIVALENCE BY
MAX-TRACE EQUIVALENCE
The key to effective algorithm analysis and veriﬁcation is
to understand when two states are semantically equivalent.
Since trace reﬁnement, which is deﬁned using traces, exactly
captures linearizability, it is tempting to say that two states of
an object system are equivalent if they have the same set of
traces. We take Michael-Scott lock-free queue [25] that is used
in java.util.concurrent, as a real example, to show that
an internal τ-step that takes effect for concurrent method calls,
cannot be perceived by means of the linear-time equivalence,
but by a branching-time equivalence.
A. State equivalence of MS lock-free queue
The concrete algorithm of the queue is shown in Fig. 5. The
queue’s representation is a linked list, where Head points to
the ﬁrst node (a sentinel), and Tail points to the last or the
penultimate last node. The sentinel node marks a position in
the queue, which is never added or removed. The usual way
to prove the linearizability of concurrent object is to identify
for each method a linearization point (LP) where the method
takes effect [17]. For the MS queue, the successful CAS at
269
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:24:37 UTC from IEEE Xplore.  Restrictions apply. 
Line 8 and Line 28 are LPs for the successful enqueue and
dequeue, and Line 20 is the LP for the empty queue case, but
it is non-ﬁxed, which depends on the future executions (c.f.
[20]). The intuition is that, if we read null from h.next at
Line 20, but interleavings with other threads before Line
21 yield a change of Head such that the condition on Head
at Line 21 fails, then the method has to restart the loop, and
the Line 20 may not be the LP in the new iteration.
01enq(v) {
02 local x,t,s,b;
03 x:=new_node(v);
04 while(true) {
05
06
07
08
09
10
11
12
13
14 }
15}
if (b) {
}
t:=Tail; s:=t.next;
if (t=Tail) {
if (s=null) {
b:=cas(&(t.next),s,x);
cas(&Tail,t,x);
return true; }
}else cas(&Tail,t,s);
h:=Head; t:=Tail;
if (h=Head)
if (h=t) {
16deq() {
17 local h,t,s,v,b;
18 while(true) {
19
20 s:=h.next;
21
22
23
24
25
26
27
28
29
30 }
31}
if (s=null)
}else {
return EMPTY;
cas(&Tail,t,s);
v :=s.val;
b:=cas(&Head,h,s);
if(b) return v;}
Fig. 5. MS lock-free queue: enqueue and dequeue
The intricate interleavings between Lines 20,21 make
trace equivalence no longer adequate to recognize the effect
of an essential internal step. This phenomenon is validated by
the following instance. Consider an object system involving 2
threads and each invokes the methods enqueue and dequeue
for 5 times. A part of the transition graph generated from
the system is depicted in Fig. 6, where s0 is the initial state,
and the invocation events of Enq and Deq (i.e., statements at
Lines 1,16) of a thread t are denoted by (t.call.Enq(v))
and (t.call.Deq), respectively. All internal computation steps
of a method are regarded as invisible, that is, the τ-transitions.
For the sake of readability, each transition is also marked with
the corresponding line number (e.g., L20) in the program text.
The states marked with ◦ have some additional transitions that
are irrelevant to the discussion below and hence omitted.
The interleaved executions of threads t1 and t2 from s0
to s1 are brieﬂy described as follows: the execution trace is
given in the right hand side of Fig. 6, where t2 has invoked
methods Enq and Deq ﬁve times and t1 twice. In the last
invocation (t2.call.Deq) of t2, the queue state is empty, and
t2 ﬁrst reads Tail and Head at Line 19, then t1 starts to
invoke Enq(10) and completes it sequentially to reach state
s. At state s, t2 executes Line 20 and then t1 starts a new
invocation (t1.call.Deq), but has not taken effect. Thus at
state s1, the queue contains item 10, and τ-transitions of t1
τ−−→ s3 labeled with t1.L28(true),
and t2 at state s1 are s1
τ−−→ s2 labeled with t2.L21(true). The remaining call
and s1
actions after s1 are (t1.call.Enq(20)), (t1.call.Enq(30))
and (t1.call.Deq) by t1. The subtle interleavings let t2
response different return values in its last invocation. The left
hand side of Fig. 6 shows the subsequent executions of s1
(some intermediate steps are denoted by ellipsis), where
• at s2, it is easy to see t2 always returns t2.RET(EMPTY).
t1.L28−−−−→ s3 changes the queue
• in s1 ==⇒ s5, since step s1
state to empty, the later check by t2 at Line 21 fails and
t2 restarts a new iteration. So after s5, t2 always returns
t2.RET(EMPTY), regardless of the invocations of t1.
• in s3 ==⇒ q1, t1 dequeues 10 and enqueues 20 in order.
So the later check by t2 at Line 21 fails and t2 restarts.
In the new iteration, t2 returns t2.RET(20).
• in s4 ==⇒ r1, since before s4, t2 has restarted a new itera-
tion and executed Line 20, after completing Enq(20) by
t1, t2 checks Lines 21,22,23 successfully. Therefore,
t2 returns t2.RET(EMPTY).
• in s4 ==⇒ r2, t1 completes Enq(20) and Enq(30) and Deq
in order. Since t1 dequeues 20 successfully, t2 restart the
iteration and return t2.RET(30).
We use T 1(s) to denote the trace set of s. From the above
executions, it is not difﬁcult to see that T 1(s1) = T 1(s3). First,
all the traces of s3 are the traces of s1. Obviously s2 and s5
have the same traces, so the trace of s1 is also the trace of
s3. Thus, s1 and s3 are trace equivalent. However, the step
t1.L28−−−−→ s3 is an LP that takes effect to change the queue
s1
state (i.e., the value of Head). Therefore, trace equivalence is
not a precise notion to capture the computation effect of the
ﬁne-grained executions.
The effect of s1 −−→ s3 is essentially captured by the branch-
ing potentials, i.e., the traces of s3, s4 and s5. For the paths
s1 −−→ s2 and s3 −−→ s4 −−→ s5, we have T 1(s1) = T 1(s3)
and T 1(s2) = T 1(s5), but T 1(s3) (cid:9)= T 1(s4) (cid:9)= T 1(s5). So the
traces of intermediate state s4 on s3 −−→ s4 −−→ s5 is over-
looked by the path s1 −−→ s2. Such a branching potential is
not taken into account in trace equivalence, but is vital to the
computation effect in object systems.
B. K-trace sets
From the above discussions, in order to arrive at an adequate
notion of state equivalence, we need to consider not only the
traces of s1 and s3, but also the traces of the intermediate
states which lie on their paths. Thus such a notion naturally
involves a hierarchy of equivalence relations, each constructed
on top of the hierarchies below it. This motivates the following
deﬁnition that coincides with the k-trace set in [32], where
∞ = N ∪{∞} and N is the set of natural numbers.
N
Deﬁnition 3.1: For each k ∈ N
∞ and each state s, let T k(s)
denote the k-trace set of s. The notions of k-traces and k-trace
sets are deﬁned inductively as follows:
(cid:2)-traces of s, for k
 1). Higher
traces capture the branching potentials of the states that are
passed through in lower traces. This means, as far as visible
actions are concerned, there is no way to distinguish the two
states in the object system.
equivalent if and only if s ≡ r.
that Δ1 (cid:7)tr Δ2. Ifs (cid:9)≡ r in Δ1, then s (cid:9)≡ r in Δ2.
Deﬁnition 3.2: In an object system, states s and r are
(cid:5)(cid:6)
Theorem 3.3: Let Δ1 and Δ2 be two object systems such
(cid:5)(cid:6)
Example 1: We show that s1 and s3 in Fig. 6 are not state
equivalent according to Deﬁnition 3.2. The 2-trace sets of s1
and s3 are as follows:
T 2(s1) ={(T 1(s1), τ , T1(s2), · · ·), (T 1(s1), τ , T1(s3), · · ·), · · · }
T 2(s3) ={(T 1(s3), τ , T1(s4), τ , T1(s5), · · ·), · · · }
Since T 1(s4) (cid:9)= T 1(s3) (cid:9)= T 1(s5) and T 1(s2) = T 1(s5) and
T 1(s1) = T 1(s3), it follows T 2(s1) (cid:9)⊆ T 2(s3). Sos 1 (cid:9)≡2 s3.
C. K-trace equivalence of various algorithms
K-trace equivalence not only captures the state equivalence,
but also provides a guide to know about the intricacy of non-
blocking algorithms. It is normal that in concurrent programs
states are not 1-trace equivalent. But systems have states that
are 1-trace equivalent but k-trace inequivalent (k > 1) imply
more intricate executions, like Fig. 6.
We have implemented a tool1 to check k-trace equivalence
1http://lcs.ios.ac.cn/∼xxyang/tools/ktrace-checking.pdf
271
between states in a ﬁnite system for a given k. The k-trace
equivalence of various concurrent algorithms are shown in
Table I, where (≡1 and (cid:9)≡2) in the third column means that
τ−−→ r in the system such that s ≡1 r
there exists τ-transition s
and s (cid:9)≡2 r, and (cid:9)≡1 in the fourth column means that there
exists τ-transition s
τ−−→ r such that s (cid:9)≡1 r.
These results indicate that the simple algorithms like Treiber
stack and NewCAS, which have ﬁxed LPs, only generate 1-trace
inequivalence, but the complicated algorithms (with non-ﬁxed
LPs [20]) often involve the “higher” trace inequivalence.
K-TRACE EQUIVALENCE IN VARIOUS CONCURRENT ALGORITHMS.
TABLE I
Object
HW queue [18]
MS queue [25]
DGLM queue [7]
Treiber stack [28]
NewCompareAndSet
CCAS [29]
RDCSS [15]
Non-ﬁxed LPs ≡1 and (cid:3)≡2
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)