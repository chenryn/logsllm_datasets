9955336633cc0011..iinndddd 22 11//2255//0099 44::3399::2277 PPMM
The Mac® Hacker’s
Handbook
Charlie Miller
Dino A. Dai Zovi
9955336633ffffiirrss..iinndddd ii 11//2255//0099 44::3388::0000 PPMM
The Mac® Hacker’s Handbook
Published by
Wiley Publishing, Inc.
10475 Crosspoint Boulevard
Indianapolis, IN 46256
www.wiley.com
Copyright 2009 by Wiley Publishing, Inc., Indianapolis, Indiana
Published simultaneously in Canada
ISBN: 978-0-470-39536-3
Manufactured in the United States of America
10 9 8 7 6 5 4 3 2 1
Library of Congress Cataloging-in-Publication Data is available from the publisher.
No part of this publication may be reproduced, stored in a retrieval system or transmitted in any form or
by any means, electronic, mechanical, photocopying, recording, scanning or otherwise, except as permitted
under Sections 107 or 108 of the 1976 United States Copyright Act, without either the prior written permis-
sion of the Publisher, or authorization through payment of the appropriate per-copy fee to the Copyright
Clearance Center, 222 Rosewood Drive, Danvers, MA 01923, (978) 750-8400, fax (978) 646-8600. Requests to
the Publisher for permission should be addressed to the Permissions Department, John Wiley & Sons, Inc.,
111 River Street, Hoboken, NJ 07030, (201) 748-6011, fax (201) 748-6008, or online at http://www.wiley.
com/go/permissions.
Limit of Liability/Disclaimer of Warranty: The publisher and the author make no representations or war-
ranties with respect to the accuracy or completeness of the contents of this work and specifi cally disclaim all
warranties, including without limitation warranties of fi tness for a particular purpose. No warranty may be
created or extended by sales or promotional materials. The advice and strategies contained herein may not
be suitable for every situation. This work is sold with the understanding that the publisher is not engaged in
rendering legal, accounting, or other professional services. If professional assistance is required, the services
of a competent professional person should be sought. Neither the publisher nor the author shall be liable for
damages arising herefrom. The fact that an organization or Web site is referred to in this work as a citation
and/or a potential source of further information does not mean that the author or the publisher endorses the
information the organization or Web site may provide or recommendations it may make. Further, readers
should be aware that Internet Web sites listed in this work may have changed or disappeared between when
this work was written and when it is read.
For general information on our other products and services please contact our Customer Care Department
within the United States at (877) 762-2974, outside the United States at (317) 572-3993 or fax (317) 572-4002.
Trademarks: Wiley and the Wiley logo are trademarks or registered trademarks of John Wiley & Sons, Inc.
and/or its affi liates, in the United States and other countries, and may not be used without written permis-
sion. Mac is a registered trademark of Apple, Inc. All other trademarks are the property of their respective
owners. Wiley Publishing, Inc. is not associated with any product or vendor mentioned in this book.
Wiley also publishes its books in a variety of electronic formats. Some content that appears in print may not
be available in electronic books.
9955336633ffffiirrss..iinndddd iiii 11//2255//0099 44::3388::0011 PPMM
I’d like to dedicate this book to the security research community and
everyone who is passionate about advancing the state of offensive and
defensive security knowledge.
— Dino A. Dai Zovi
9955336633ffffiirrss..iinndddd iiiiii 11//2255//0099 44::3388::0011 PPMM
About the Authors
Charlie Miller is Principal Analyst at Independent Security Evaluators. He was
the fi rst person to publically create a remote exploit against Apple’s iPhone and
the G1 Google phone running Android. He has discovered fl aws in numer-
ous applications on various operating systems. He was the winner of the 2008
PwnToOwn contest for breaking into a fully patched MacBook Air. He has
spoken at numerous information-security conferences and is author of Fuzzing
for Software Security Testing and Quality Assurance (Artech House, 2008). He was
listed as one of the top 10 hackers of 2008 by Popular Mechanics magazine, and
has a PhD from the University of Notre Dame.
Dino Dai Zovi is Chief Scientist at a private information security fi rm. Mr. Dai
Zovi is perhaps best known in the security and Mac communities for winning
the fi rst Pwn2Own contest at CanSecWest 2007 by discovering and exploit- ing
a new vulnerability in Apple’s QuickTime in one night to compromise a fully
patched MacBook Pro. He previously specialized in software penetration test-
ing in roles at Matasano Security, @stake, and Sandia National Laboratories. He
is an invited speaker at information security conferences around the world, a
coauthor of The Art of Software Security Testing: Identifying Software Security Flaws
(Addison-Wesley, 2006) and was named one of the 15 Most Infl uential People
in Security by eWEEK in 2007.
iv
9955336633ffffiirrss..iinndddd iivv 11//2255//0099 44::3388::0011 PPMM
Credits
Executive Editor Vice President and Executive Publisher
Carol Long Barry Pruett
Development Editor Associate Publisher
Christopher J. Rivera Jim Minatel
Technical Editor Project Coordinator, Cover
Ron Krutz Lynsey Stanford
Production Editor Compositor
Elizabeth Ginns Britten Jeffrey Lytle,
Happenstance Type-O-Rama
Copy Editor
Candace English Proofreader
Justin Neely, Word One
Editorial Manager
Mary Beth Wakefi eld Indexer
Jack Lewis
Production Manager
Tim Tate Cover Illustration
Michael E. Trent
Vice President and Executive
Group Publisher Cover Designer
Richard Swadley Michael E. Trent
v
9955336633ffffiirrss..iinndddd vv 11//2255//0099 44::3388::0011 PPMM
Acknowledgments
I’d like to thank my wife Andrea for not getting too upset when I locked myself
away at night to work on the book after the kids went to bed. I’d also like to
thank my two sons, Theo and Levi, for being good kids and keeping a smile on
my face. Finally, I’d like to thank ISE for giving me time to do research for the
book, and the following people for donating their time to look at early drafts of
it: Dave Aitel, Thomas Ptacek, Thomas Dullien, and Nate McFeters.
— Charlie Miller
I’d like to thank my friends for their support and patience while I was working
on this book and lacking a normal social life for the warmer half of the year.
I’d also like to thank the members of the Apple Product Security team for their
diligence in addressing the security issues that I have reported to them over
the years, as well as Apple for creating an operating system and computers that
are a joy to use. Finally, I’d like to thank our volunteer reviewers, Dave Aitel,
Halvar Flake, and Thomas Ptacek, for their advice and comments.
— Dino A. Dai Zovi
vi
9955336633ffffiirrss..iinndddd vvii 11//2255//0099 44::3388::0011 PPMM
Contents
Foreword xi
Introduction xiii
Part I Mac OS X Basics 1
Chapter 1 Mac OS X Architecture 3
Basics 3
XNU 4
Mach 4
BSD 5
I/O Kit 5
Darwin and Friends 7
Tools of the Trade 8
Ktrace/DTrace 8
Objective-C 10
Universal Binaries and the Mach-O File Format 13
Universal Binaries 13
Mach-O File Format 14
Example 15
Bundles 17
launchd 19
Leopard Security 21
Library Randomization 22
Executable Heap 24
Stack Protection (propolice) 27
Firewall 29
Sandboxing (Seatbelt) 29
References 34
Chapter 2 Mac OS X Parlance 35
Bonjour! 35
Get an IP Address 36
Set Up Name Translation 37
Service Discovery 38
Bonjour 40
mDNSResponder 41
Source Code 44
vii
9955336633ffttoocc..iinndddd vviiii 11//2255//0099 44::3388::3322 PPMM
viii Contents
QuickTime 47
.mov 47
RTSP 52
Conclusion 61
References 61
Chapter 3 Attack Surface 63
Searching the Server Side 63
Nonstandard Listening Processes 68
Cutting into the Client Side 72
Safari 75
All of Safari’s Children 77
Safe File Types 79
Having Your Cake 80
Conclusion 81
References 81
Part II Discovering Vulnerabilities 83
Chapter 4 Tracing and Debugging 85
Pathetic ptrace 85
Good Ol’ GDB 86
DTrace 87
D Programming Language 88
Describing Probes 89
Example: Using Dtrace 90
Example: Using ltrace 91
Example: Instruction Tracer/Code-Coverage Monitor 93
Example: Memory Tracer 95
PyDbg 96
PyDbg Basics 97
Memory Searching 98
In-Memory Fuzzing 99
Binary Code Coverage with Pai Mei 102
iTunes Hates You 108
Conclusion 111
References 112
Chapter 5 Finding Bugs 113
Bug-Hunting Strategies 113
Old-School Source-Code Analysis 115
Getting to the Source 115
Code Coverage 116
CanSecWest 2008 Bug 121
vi + Changelog = Leopard 0-day 122
Apple’s Prerelease-Vulnerability Collection 124
Fuzz Fun 125
Network Fuzzing 126
File Fuzzing 129
Conclusion 133
References 134
Chapter 6 Reverse Engineering 135
Disassembly Oddities 135
EIP-Relative Data Addressing 136
Messed-Up Jump Tables 137
Identifying Missed Functions 138
Reversing Obj-C 140
Cleaning Up Obj-C 141
Shedding Light on objc_msgSend Calls 145
9955336633ffttoocc..iinndddd vviiiiii 11//2255//0099 44::3388::3333 PPMM
Contents ix
Case Study 150
Patching Binaries 154
Conclusion 156
References 157
Part III Exploitation 159
Chapter 7 Exploiting Stack Overfl ows 161
Stack Basics 162
Stack Usage on PowerPC 163
Stack Usage on x86 164
Smashing the Stack on PowerPC 165
Smashing the Stack on x86 170
Exploiting the x86 Nonexecutable Stack 173
Return into system() 173
Executing the Payload from the Heap 176
Finding Useful Instruction Sequences 181
PowerPC 181
x86 182
Conclusion 184
References 184
Chapter 8 Exploiting Heap Overfl ows 185
The Heap 185
The Scalable Zone Allocator 186
Regions 186
Freeing and Allocating Memory 187
Overwriting Heap Metadata 192
Arbitrary 4-Byte Overwrite 193
Large Arbitrary Memory Overwrite 195
Obtaining Code Execution 197
Taming the Heap with Feng Shui 201
Fill ’Er Up 201
Feng Shui 202
WebKit’s JavaScript 204
Case Study 207
Feng Shui Example 209
Heap Spray 211
References 212
Chapter 9 Exploit Payloads 213
Mac OS X Exploit Payload Development 214
Restoring Privileges 215
Forking a New Process 215
Executing a Shell 216
Encoders and Decoders 217
Staged Payload Execution 217
Payload Components 218
PowerPC Exploit Payloads 219
execve_binsh 221
system 223
decode_longxor 225
tcp_listen 231
tcp_connect 232
tcp_fi nd 233
dup2_std_fds 234
vfork 235
Testing Simple Components 236
Putting Together Simple Payloads 237
Intel x86 Exploit Payloads 238
9955336633ffttoocc..iinndddd iixx 11//2255//0099 44::3388::3333 PPMM
x Contents
remote_execution_loop 241
inject_bundle 244
Testing Complex Components 254
Conclusion 259
References 259
Chapter 10 Real-World Exploits 261
QuickTime RTSP Content-Type Header Overfl ow 262
Triggering the Vulnerability 262
Exploitation on PowerPC 263
Exploitation on x86 273
mDNSResponder UPnP Location Header Overfl ow 276
Triggering the Vulnerability 277
Exploiting the Vulnerability 279
Exploiting on PowerPC 283
QuickTime QTJava toQTPointer() Memory Access 287
Exploiting toQTPointer() 288
Obtaining Code Execution 290
Conclusion 290
References 290
Part IV Post-Exploitation 291
Chapter 11 Injecting, Hooking, and Swizzling 293
Introduction to Mach 293
Mach Abstractions 294
Mach Security Model 296
Mach Exceptions 297
Mach Injection 300
Remote Threads 301
Remote Process Memory 306
Loading a Dynamic Library or Bundle 307
Inject-Bundle Usage 311
Example: iSight Photo Capture 311
Function Hooking 314
Example: SSLSpy 315
Objective-C Method Swizzling 318