any functionality) 145 or more system calls for more than half
of the analyzed containers, neutralizing this way 51 previously
disclosed kernel vulnerabilities. As part of our future work,
we plan to address the limitations of our prototype and explore
the generation of more ﬁne-grained system call policies.
Acknowledgments
This work was supported by the Ofﬁce of Naval Research
(ONR) through award N00014-17-1-2891, the National
Science Foundation (NSF) through award CNS-1749895, and
the Defense Advanced Research Projects Agency (DARPA)
through award D18AP00045, with additional support by
Accenture. Any opinions, ﬁndings, and conclusions or
recommendations expressed herein are those of the authors
and do not necessarily reﬂect the views of the ONR, NSF,
DARPA, or Accenture.
References
[1] Capabilities(7) - Linux Programmer’s Manual. http:
//man7.org/linux/man-pages/man7/capabiliti
es.7.html.
[2] Cassandra - Docker Hub. https://hub.docker.com
/_/cassandra/.
[3] Cgroups(7) - Linux Programmer’s Manual. http://ma
n7.org/linux/man-pages/man7/cgroups.7.html.
[4] Chronograf - Docker Hub. https://hub.docker.com
/_/chronograf.
[5] Common vulnerabilities and exposures database.
https://www.cvedetails.com.
[6] CVE-2017-5123. https://www.cvedetails.com/c
ve/CVE-2017-5123/.
[7] Docker Hub. https://hub.docker.com.
[8] DockerSlim. https://dockersl.im.
[9] Elasticsearch - Docker Hub. https://hub.docker.c
om/_/elasticsearch.
[10] Elgg. https://elgg.org/.
[11] GNU Compiler Collection. https://gcc.gnu.org.
[12] Inﬂuxdb - Docker Hub. https://hub.docker.com
/_/influxdb.
[13] Kubernetes - Production-Grade Container Orchestration.
https://kubernetes.io.
[14] The LLVM compiler infrastructure. http://llvm.org.
[15] Mongo-perf. https://github.com/mongodb/mongo
-perf.
[16] MongoDB - Docker Hub. https://hub.docker.com
/_/mongo/.
[17] Musl Libc. https://www.musl-libc.org.
[18] Namespaces(7)
- Linux Programmer’s Manual.
http://man7.org/linux/man-pages/man7/name
spaces.7.html.
[19] Package Callgraph - GoDoc. https://godoc.org/go
lang.org/x/tools/go/callgraph.
[20] Pgbench. https://www.postgresql.org/docs/10
/pgbench.html.
[21] Python AST. https://docs.python.org/3/librar
y/ast.html.
[22] Redis-benchmark. https://redis.io/topics/benc
hmarks.
[23] Seccomp BPF (SECure COMPuting with ﬁlters).
https://www.kernel.org/doc/html/v4.16/user
space-api/seccomp_filter.html.
[24] Selenium. https://selenium.dev/.
[25] Sematext Agent Monitoring and Logging - Docker Hub.
https://hub.docker.com/_/sematext-agent-m
onitoring-and-logging.
[26] Sysdig. https://github.com/draios/sysdig.
[27] Ioannis Agadakos, Di
Jin, David Williams-King,
Vasileios P Kemerlis, and Georgios Portokalidis. Nib-
bler: debloating binary shared libraries. In Proceedings
of the 35th Annual Computer Security Applications
Conference (ACSAC), pages 70–83, 2019.
[28] Babak Amin Azad, Pierre Laperdrix, and Nick Niki-
forakis. Less is more: Quantifying the security beneﬁts
of debloating web applications. In Proceedings of the
28th USENIX Security Symposium, 2019.
[29] Lars Ole Andersen. Program analysis and specialization
for the C programming language. PhD thesis, University
of Cophenhagen, 1994.
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    455
[30] Brandon Butler. Which is cheaper: Containers or virtual
machines? https://www.networkworld.com/artic
le/3126069/which-is-cheaper-containers-or-
virtual-machines.html, September 2016.
[31] Theo Combe, Antony Martin, and Roberto Di Pietro. To
Docker or not to Docker: A security perspective. IEEE
Cloud Computing, 3(5):54–62, 2016.
[32] Nicholas DeMarinis, Kent Williams-King, Di Jin,
Rodrigo Fonseca, and Vasileios P. Kemerlis. Sysﬁlter:
Automated system call ﬁltering for commodity software.
In Proceedings of the International Conference on Re-
search in Attacks, Intrusions, and Defenses (RAID), 2020.
[33] Henry Hanping Feng, Jonathon T Gifﬁn, Yong Huang,
Somesh Jha, Wenke Lee, and Barton P Miller. Formal-
izing sensitivity in static analysis for intrusion detection.
In Proceedings of the IEEE Symposium on Security &
Privacy (S&P), pages 194–208, 2004.
[34] Stephanie Forrest, Steven A Hofmeyr, Anil Somayaji,
and Thomas A Longstaff. A sense of self for Unix
processes. In Proceedings of the IEEE Symposium on
Security & Privacy (S&P), pages 120–128, 1996.
[35] Tal Garﬁnkel, Ben Pfaff, and Mendel Rosenblum.
Ostia: A delegating architecture for secure system
call interposition. In Proceedings of the Network and
Distributed System Security Symposium (NDSS), 2004.
[36] Masoud Ghaffarinia and Kevin W. Hamlen. Binary
control-ﬂow trimming. In Proceedings of the 26th ACM
Conference on Computer and Communications Security
(CCS), 2019.
[37] Seyedhamed Ghavamnia, Tapti Palit, Shachee Mishra,
and Michalis Polychronakis. Temporal system call spe-
cialization for attack surface reduction. In Proceedings
of the 29th USENIX Security Symposium, 2020.
[38] Andreas Gustafsson. Egypt. https://www.gson.org
/egypt/egypt.html.
[39] Ashish Gehani Hashim Sharif, Muhammad Abubakar
and Fareed Zaffar. Trimmer: Application specialization
In Proceedings of the 33rd
for code debloating.
ACM/IEEE International Conference on Automated
Software Engineering (ASE), 2018.
[40] Haifeng He, Saumya K Debray, and Gregory R Andrews.
The revenge of the overlay: automatic compaction of OS
kernel code via on-demand code loading. In Proceedings
of the 7th ACM & IEEE international conference on
Embedded software, pages 75–83, 2007.
[41] Kihong Heo, Woosuk Lee, Pardis Pashakhanloo,
and Mayur Naik. Effective program debloating via
reinforcement learning. In Proceedings of the 24th ACM
Conference on Computer and Communications Security
(CCS), 2018.
[42] Michael Hind. Pointer analysis: Haven’t we solved this
problem yet? In Proceedings of the ACM SIGPLAN-
SIGSOFT Workshop on Program Analysis for Software
Tools and Engineering (PASTE), pages 54–61, 2001.
[43] Kapil Jain and R Sekar. User-level infrastructure for sys-
tem call interposition: A platform for intrusion detection
and conﬁnement. In Proceedings of the Network and
Distributed System Security Symposium (NDSS), 2000.
[44] Yufei Jiang, Can Zhang, Dinghao Wu, and Peng Liu.
Feature-based software customization: Preliminary
analysis, formalization, and methods. In Proceedings
of the 17th IEEE International Symposium on High
Assurance Systems Engineering (HASE), 2016.
[45] Vasileios P. Kemerlis. Protecting Commodity Operating
Systems through Strong Kernel Isolation. PhD thesis,
Columbia University, 2015.
[46] Vasileios P. Kemerlis, Michalis Polychronakis, and
Angelos D. Keromytis.
ret2dir: Rethinking kernel
isolation. In Proceedings of the 23rd USENIX Security
Symposium, pages 957–972, 2014.
[47] Hyungjoon Koo, Seyedhamed Ghavamnia, and Michalis
Polychronakis. Conﬁguration-driven software debloat-
ing. In Proceedings of the 12th European Workshop on
Systems Security, 2019.
[48] Alexey Kopytov. Sysbench. https://github.com/a
kopytov/sysbench.
[49] Christopher Kruegel, Engin Kirda, Darren Mutz, William
Robertson, and Giovanni Vigna. Automating mimicry
attacks using static binary analysis. In Proceedings of
the USENIX Security Symposium, 2005.
[50] Anil Kurmus, Reinhard Tartler, Daniela Dorneanu, Bern-
hard Heinloth, Valentin Rothberg, Andreas Ruprecht,
Wolfgang Schroder-Preikschat, Daniel Lohmann, and
Rudiger Kapitza. Attack surface metrics and automated
compile-time OS kernel tailoring. In Proceedings of the
Network and Distributed System Security Symposium
(NDSS), 2013.
[51] Chi-Tai Lee, Jim-Min Lin, Zeng-Wei Hong, and
Wei-Tsong Lee. An application-oriented Linux kernel
customization for embedded systems. J. Inf. Sci. Eng.,
20(6):1093–1107, 2004.
[52] Lingguang Lei, Jianhua Sun, Kun Sun, Chris Shene-
ﬁel, Rui Ma, Yuewu Wang, and Qi Li. SPEAKER:
Split-phase execution of application containers.
In
456    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association
Proceedings of the 12th Conference on Detection of
Intrusions and Malware, and Vulnerability Assessment
(DIMVA), pages 230–251, 2017.
[53] Yiwen Li, Brendan Dolan-Gavitt, Sam Weber, and
Justin Cappos.
Lock-in-pop: Securing privileged
operating system kernels by keeping on the beaten
path. In Proceedings of the USENIX Annual Technical
Conference (ATC), 2017.
[54] Xin Lin, Lingguang Lei, Yuewu Wang, Jiwu Jing, Kun
Sun, and Quan Zhou. A measurement study on Linux
container security: Attacks and countermeasures.
In
Proceedings of the 34th Annual Computer Security Ap-
plications Conference (ACSAC), pages 418–429, 2018.
[55] Steven McCanne and Van Jacobson. The BSD packet
ﬁlter: A new architecture for user-level packet capture.
In Proceedings of the USENIX Winter Conference, 1993.
[56] Shachee Mishra and Michalis Polychronakis. Shredder:
Breaking Exploits through API Specialization.
In
Proceedings of the 34th Annual Computer Security
Applications Conference (ACSAC), 2018.
[57] Shachee Mishra and Michalis Polychronakis. Safﬁre:
Context-sensitive function specialization against code
reuse attacks. In Proceedings of the 5th IEEE European
Symposium on Security and Privacy (EuroS&P), 2020.
[58] Collin Mulliner and Matthias Neugschwandtner.
Breaking payloads with runtime code stripping and
image freezing, 2015. Black Hat USA.
[59] Karen Scarfone Murugiah Souppaya, John Morello.
Application
Container Security Guide, 2017.
https://nvlpubs.nist.gov/nistpubs/Spec
ialPublications/NIST.SP.800-190.pdf.
[60] Tapti Palit, Yongming Shen, and Michael Ferdman.
Demystifying cloud benchmarking. In Proceedings of
the International Symposium on Performance Analysis
of Systems and Software (ISPASS), pages 122–132, 2016.
[61] Chetan Parampalli, R Sekar, and Rob Johnson. A
practical mimicry attack against powerful system-call
monitors. In Proceedings of the ACM Symposium on
Information, Computer and Communications Security
(ASIACCS), pages 156–167, 2008.
[62] Nikita Popov.
https://github.com/nikic/php-ast.
PHP abstract
syntax tree.
[63] Chris Porter, Girish Mururu, Prithayan Barua, and
Santosh Pande. Blankit library debloating: Getting
what you want instead of cutting what you don’t.
In
Proceedings of the 41st ACM SIGPLAN Conference on
Programming Language Design and Implementation
(PLDI), pages 164–180, 2020.
[64] Chenxiong Qian, Hong Hu, Mansour Alharthi, Pak Ho
Chung, Taesoo Kim, and Wenke Lee. RAZOR: A frame-
work for post-deployment software debloating. In Pro-
ceedings of the 28th USENIX Security Symposium, 2019.
[65] Anh Quach and Aravind Prakash. Bloat factors and
binary specialization. In Proceedings of the 3rd ACM
Workshop on Forming an Ecosystem Around Software
Transformation (FEAST), pages 31–38, 2019.
[66] Anh Quach, Aravind Prakash, and Lok Yan. Debloating
software through piece-wise compilation and loading.
In Proceedings of the 27th USENIX Security Symposium,
pages 869–886, 2018.
[67] Mohan Rajagopalan, Matti Hiltunen, Trevor Jim, and
Richard Schlichting. Authenticated system calls. In Pro-
ceedings of the International Conference on Dependable
Systems and Networks (DSN), pages 358–367, 2005.
[68] Vaibhav Rastogi, Drew Davidson, Lorenzo De Carli,
Somesh Jha, and Patrick D. McDaniel. Cimpliﬁer:
In Proceedings
automatically debloating containers.
of the 11th Joint Meeting on Foundations of Software
Engineering (ESEC/FSE), 2017.
[69] Vaibhav Rastogi, Chaitra Niddodi, Sibin Mohan, and
Somesh Jha. New directions for container debloating.
In Proceedings of the 2nd Workshop on Forming an
Ecosystem Around Software Transformation (FEAST),
pages 51–56, 2017.
[70] Daniel Shapira.
Escaping Docker container us-
ing waitid() – CVE-2017-5123, 2017.
h t t p s :
//www.twistlock.com/labs-blog/escaping-doc
ker-container-using-waitid-cve-2017-5123/.
[71] Rui Shu, Xiaohui Gu, and William Enck. A study of
security vulnerabilities on Docker Hub. In Proceedings
of the 7th ACM Conference on Data and Application
Security and Privacy (CODASPY), pages 269–280, 2017.
[72] Linhai Song and Xinyu Xing. Fine-grained library
In Proceedings of the 1st ECOOP
customization.
International Workshop on Software Debloating and
Delayering (SALAD), 2018.
[73] Kanchi Gopinath Suparna Bhattacharya and Man-
gala Gowri Nanda. Combining concern input with
program analysis for bloat detection. In Proceedings
of the ACM SIGPLAN International Conference on
Object Oriented Programming Systems Languages &
Applications (OOPSLA), 2013.
[74] David Wagner and Drew Dean. Intrusion detection via
static analysis. In Proceedings of the IEEE Symposium
on Security & Privacy, pages 156–168, 2001.
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    457
[75] Zhiyuan Wan, David Lo, Xin Xia, Liang Cai, and Shan-
ping Li. Mining Sandboxes for Linux Containers. In
Proceedings of the 10th IEEE International Conference
on Software Testing, Veriﬁcation and Validation (ICST),
pages 92–102, 2017.
[78] Tong Zhang, Wenbo Shen, Dongyoon Lee, Changhee
Jung, Ahmed M. Azab, and Ruowen Wang. PeX: A
permission check analysis framework for linux kernel.
In Proceedings of the 28th USENIX Security Symposium,
pages 1205–1220, 2019.
[76] David Williams-King, Hidenori Kobayashi, Kent
Williams-King, Graham Patterson, Frank Spano, Yu Jian
Wu, Junfeng Yang, and Vasileios P Kemerlis. Egalito:
Layout-agnostic binary recompilation. In Proceedings
of the 25th International Conference on Architectural
Support for Programming Languages and Operating
Systems (ASPLOS), pages 133–147, 2020.
[77] Dinghao Wu Yufei Jiang and Peng Liu. Jred: Program
customization and bloatware mitigation based on static
analysis. In Proceedings of the 40th Annual Computer
Software and Applications Conference (ACSAC), 2016.
[79] Zhi Zhang, Yueqiang Cheng, Surya Nepal, Dongxi
Liu, Qingni Shen, and Fethi Rabhi. KASR: A reliable
and practical approach to attack surface reduction
In Proceedings of the
of commodity OS kernels.
International Conference on Research in Attacks,
Intrusions, and Defenses (RAID), pages 691–710, 2018.
[80] Xiangyu Zhang Zhongshu Gu, Brendan Saltaformaggio
and Dongyan Xu. Face-change: Application-driven dy-
namic kernel view switching in a virtual machine. In
Proceedings of the 44th IEEE/IFIP International Confer-
ence on Dependable Systems and Networks (DSN), 2014.
458    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association