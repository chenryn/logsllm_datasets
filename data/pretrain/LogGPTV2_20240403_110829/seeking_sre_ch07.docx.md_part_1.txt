# 无 SRE 的 SRE 模式：Spotify 案例研究

作者：Daniel Prata Almeida, Saunak Jai Chakrabarti, Jeff Eklund, David Poblador i Garcia, Niklas Gustavsson, Mattias Jansson, Drew Michel, Lynn Root, Johannes Russek, Spotify

许多人对 Spotify 实际上没有 SRE 组织感到惊讶。我们不仅没有中央 SRE 团队，甚至也没有全职的 SRE 团队。然而，由于我们在所有工作中都应用了 SRE 原则，我们仍然能够实现规模化运维。鉴于这种独特的设置，其他公司已联系我们以了解我们的模型（"Ops-in-Squads"）是如何运作的。有些公司已经采纳了类似的模式。

让我们来介绍一下我们如何使用此模型，以便你判断类似的方法是否对你有用。

## 背景介绍

在 Spotify，我们组织成小型自主团队。每个团队负责特定的功能或用户体验。这些工程团队由跨职能的开发人员组成，包括前端和后端开发人员、数据科学家等，他们共同处理各种 Spotify 客户端、后端服务和数据管道。

为了支持这些功能团队，我们创建了以基础设施为中心的小组。这些小组也是小而跨职能的，并且自主提供自助服务基础设施产品，例如持续集成、部署、监控、软件框架和指南。Spotify 的大多数 SRE 工程师都在这些小组中工作，利用他们的技能和经验使生产环境可靠、可扩展且易于与功能团队协作。

尽管如此，一些 SRE 的任务是跨领域的，只能从中心角度解决。这包括大型故障引起的级联中断、部署最佳实践的教学、事件管理和事后分析。我们的 SRE 组织在整个公司的工作组中发挥作用，但这些工作组并不完全由具有 SRE 头衔的工程师组成。例如，我们集中轮值团队（内部称为事件轮值经理或 IMOC）的工程师中，只有一半是 SRE；其余的是扮演不同角色的工程师。

## 为什么选择这样的结构？

那么，我们为什么要采用这种组织结构呢？它有什么好处，又有哪些权衡？接下来的部分将讨论 Spotify 如何构建其 SRE 组织，从最初仅需满足斯德哥尔摩公寓内服务器需求的小型初创公司发展到如今的全球性大公司。我们将重点介绍 Spotify 如何通过提供无摩擦的开发环境以及建立信任和知识共享的文化，使运维成为所有工程师的默认行为。

### 初创阶段：2006-2007

- 一名运维工程师
- 七名开发人员，在仅限邀请的测试版发布时大约有 9 个后端系统

#### 关键收获

- 引入运维工程师从一开始就影响了工程文化，并证明非常有益。
- 应该尽早引入运维理念。
- 除了业务逻辑架构之外，还应及早建立基础设施架构。

### 测试版和正式发布：2008-2009

- 三名运维工程师
- 约 10 名后端工程师
- 一个数据中心
- 10-20 个后端服务
- 四种客户端：Windows、Mac、iPhone 和 libspotify

#### 关键收获

- 从一开始就将运维纳入开发人员的可扩展性和可靠性讨论，对于创建我们的工程方法基础至关重要。
- 先天信任工程师，为我们的技术组织中最普遍的原则之一奠定了基础：自主性。

在此期间，Spotify 经历了首次真正意义上的服务拥塞，伴随着快速用户增长带来的问题。这些问题不仅给后端服务造成压力，而且一直影响整个技术堆栈。以下是一些具体示例：

- 后端服务在高峰时段出现容量相关的服务中断。
- RAID 控制器电池故障导致磁盘 I/O 性能问题。
- ZFS 的 Bug 导致关键数据服务器在高负载运行后失去响应。
- 机架和堆叠服务器的速度非常缓慢。

随着 Spotify 开发新功能，后端服务的数量和复杂性也随之增加。虽然随着时间的推移和技术努力，每个问题都得到了解决，但最初的运维工程师工作方式无法随着公司的增长而扩展。当时三位运维工程师承担了以下所有职责：

- 监督从开发人员移交给运维部门的所有服务。
- 维护底层 Linux 服务器配置。
- 响应服务中断。
- 确保事件补救的优先次序。
- 跟进系统安全需求。
- 维护网络设备和配置。
- 发布新的 Spotify 桌面客户端并监控部署失败。
- 数据中心管理，包括采购、供应商关系和调配。
- 维护和扩展存储。