symbolic links, 166
symbolic links and junctions, NTFS, 634–637
SymbolicLink object, 129
symmetric encryption, 711
synchronization. See also Low-IRQL synchronization
High-IRQL, 172–177
keyed events, 194–196
overview, 170–171
syscall instruction, 92
system call numbers, mapping to functions and arguments, 102–103
system call security, 99–100
system call table compaction, 101–102
system calls and exception dispatching, 122
system crashes, consequences of, 421
System Image Recover, 845
SYSTEM process, 19–20
System Restore, 845
system service activity, viewing, 104
system service dispatch table, 96
system service dispatcher, locating, 94–95
system service dispatching, 98
system service handling
architectural system service dispatching, 92–95
overview, 91
system side-channel mitigation status, querying, 28–30
system threads, 597–598
system timers, listing, 74–75. See also timers
system worker threads, 81–85
T
take state segments, 6–9
Task Manager, starting, 832
Task Scheduler
boot task master key, 478
COM interfaces, 486
initialization, 477–481
overview, 476–477
Triggers and Actions, 478
and UBPM (Unified Background Process Manager), 481–486
XML descriptor, 479–481
task scheduling and UBPM, 475–476
taskschd.msc command, 479, 484
TBOOT module, 806
TCP/IP activity, tracing with kernel logger, 519–520
TEB (Thread Environment Block), 4–5, 104
Terminal object, 130
TerminalEventQueue object, 130
thread alerts (object-less waiting), 183–184
!thread command, 75, 190
thread-local register effect, 4. See also Windows threads
thunk kernel routines, 33
tiered volumes. See also volumes
creating maximum number of, 774–775
support for, 647–651
Time Broker, 256
timer coalescing, 76–77
timer expiration, 70–72
timer granularity, 67–70
timer lists, 71
Timer object, 128
timer processing, 66
timer queuing behaviors, 73
timer serialization, 73
timer tick distribution, 75–76
timer types
and intervals, 66–67
and node collection indices, 79
timers. See also enhanced timers; system timers
high frequency, 68–70
high resolution, 80
TLB flushing algorithm, 18, 20–21, 272
TmEn object, 129
TmRm object, 129
TmTm object, 129
TmTx object, 129
Token object, 128
TPM (Trusted Platform Module), 785, 800–801
TPM measurements, invalidating, 803–805
TpWorkerFactory object, 129
TR (Task Register), 6, 32
Trace Flags field, 132
tracing dynamic memory, 532–533. See also DTrace (dynamic tracing); ETW
(Event Tracing for Windows)
transaction support, NTFS on-disk structure, 688–689
transactional APIs, NTFS on-disk structure, 690
transactions
committing, 697
undoing, 702
transition stack, 18
trap dispatching
exception dispatching, 85–91
interrupt dispatching, 32–50
line-based interrupts, 50–66
message signaled-based interrupts, 50–66
trap dispatching (continued)
overview, 30–32
system service handling, 91–104
system worker threads, 81–85
timer processing, 66–81
TRIM commands, 645
troubleshooting Windows loader issues, 556–557
!trueref debugger command, 148
trusted execution, 805–807
trustlets
creation, 372–375
debugging, 374–375
secure devices, 376–378
Secure Kernel and, 345
secure system calls, 354
VBS-based enclaves, 378
in VTL 1, 371
Windows hypervisor on ARM64, 314–315
TSS (Task State Segment), 6–9
.tss command, 8
tunneling, NTFS on-disk structure, 666–667
TxF APIs, 688–690
$TXF_DATA attribute, 691–692
TXT (Trusted Execution Technology), 801, 805–807, 816
type initializer fields, 139–140
type objects, 131, 136–140
U
UBPM (Unified Background Process Manager), 481–486
UDF (Universal Disk Format), 603
UEFI boot, 777–781
UEFI runtime virtualization, 358–363
UMDF (User-Mode Driver Framework), 209
\UMDFCommunicationPorts directory, 161
undo pass, NTFS recovery support, 701–703
unexpected traps, 31
Unicode-based names, NTFS, 633
user application crashes, 537–542
User page tables, 18
UserApcReserve object, 130
user-issued system call dispatching, 98
user-mode debugging. See also debugging; GDI/User objects
kernel support, 239–240
native support, 240–242
Windows subsystem support, 242–243
user-mode resources, 205
UWP (Universal Windows Platform)
and application hives, 402
application model, 244
bundles, 265
and SEB (System Event Broker), 238
services to apps, 243
UWP applications, 245–246, 259–260
V
VACBs (virtual address control blocks), 572, 576–578, 581–582
VBO (virtual byte offset), 589
VBR (volume boot record), 657
VBS (virtualization-based security)
detecting, 344
overview, 340
VSM (Virtual Secure Mode), 340–344
VTLs (virtual trust levels), 340–342
VCNs (virtual cluster numbers), 656–658, 669–672
VHDPMEM image, creating and mounting, 737–739
virtual block caching, 569
virtual PMs architecture, 736
virtualization stack
deferred commit, 339
EPF (enlightened page fault), 339
explained, 269
hardware support, 329–335
hardware-accelerated devices, 332–335
memory access hints, 338
memory-zeroing enlightenments, 338
overview, 315
paravirtualized devices, 331
ring buffer, 327–329
VA-backed virtual machines, 336–340
VDEVs (virtual devices), 326–327
VID driver and memory manager, 317
VID.sys (Virtual Infrastructure Driver), 317
virtual IDE controller, 330
VM (virtual machine), 318–322
VM manager service and worker processes, 315–316
VM Worker process, 318–322, 330
VMBus, 323–329
VMMEM process, 339–340
Vmms.exe (virtual machine manager service), 315–316
VM (View Manager), 244
VMENTER event, 268
VMEXIT event, 268, 330–331
\VmSharedMemory directory, 161
VMXROOT mode, 268
volumes. See also tiered volumes
caching and file systems, 565–566
defined, 565–566
NTFS on-disk structure, 655
setting repair options, 706
VSM (Virtual Secure Mode)
overview, 340–344
startup policy, 813–816
system calls, 349–355
VTLs (virtual trust levels), 340–342
W
wait block states, 186
wait data structures, 189
Wait for a single object service, 136
Wait for multiple objects service, 136
wait queues, 190–194
WaitCompletionPacket object, 130
wall time, 57
Wbemtest command, 491
Wcifs (Windows Container Isolation minifilter driver), 248
Wcnfs (Windows Container Name Virtualization minifilter driver), 248
WDK (Windows Driver Kit), 392
WER (Windows Error Reporting)
ALPC (advanced local procedure call), 209
AeDebug and AeDebugProtected root keys, 540
crash dump files, 543–548
crash dump generation, 548–551
crash report generation, 538–542
dialog box, 541
Fault Reporting process, 540
implementation, 536
kernel reports, 551
kernel-mode (system) crashes, 543–551
overview, 535–537
process hang detection, 551–553
registry settings, 539–540
snapshot creation, 538
user application crashes, 537–542
user interface, 542
Windows 10 Creators Update (RS2), 571
Windows API, executive objects, 128–130
Windows Bind minifilter driver, (BindFit) 248
Windows Boot Manager, 785–799
BCD objects, 798
\Windows directory, 161
Windows hypervisor. See also Hyper-V schedulers
address space isolation, 282–285
AM (Address Manager), 275, 277
architectural stack, 268
on ARM64, 313–314
boot virtual processor, 277–279
child partitions, 269–270, 323
dynamic memory, 285–287
emulation of VT-x virtualization extensions, 309–310
enlightenments, 272
execution vulnerabilities, 282
Hyperclear mitigation, 283
intercepts, 300–301
memory manager, 279–287
nested address translation, 310–313
nested virtualization, 307–313
overview, 267–268
partitions, processes, threads, 269–273
partitions physical address space, 281–282
PFN database, 286
platform API and EXO partitions, 304–305
private address spaces/memory zones, 284
process data structure, 271
processes and threads, 271
root partition, 270, 277–279
SLAT table, 281–282
startup, 274–279
SynIC (synthetic interrupt controller), 301–304
thread data structure, 271
VAL (VMX virtualization abstraction layer), 274, 279
VID driver, 272
virtual processor, 278
VM (Virtualization Manager), 278
VM_VP data structure, 278
VTLs (virtual trust levels), 281
Windows hypervisor loader (Hvloader), BCD options, 796–797
Windows loader issues, troubleshooting, 556–557
Windows Memory Diagnostic Tool, 845
Windows OS Loader, 792–796, 808–810
Windows PowerShell, 774
Windows services
accounts, 433–446
applications, 426–433
autostart startup, 451–457
boot and last known good, 460–462
characteristics, 429–433
Clipboard User Service, 472
control programs, 450–451
delayed autostart, 457–458
failures, 462–463
groupings, 466
interactive services/session 0 isolation, 444–446
local service account, 436
local system account, 434–435
network service account, 435
packaged services, 473
process, 428
protected services, 474–475
Recovery options, 463
running services, 436
running with least privilege, 437–439
SCM (Service Control Manager), 426, 446–450
SCP (service control program), 426
Service and Driver Registry parameters, 429–432
service isolation, 439–443
Service SIDs, 440–441
shared processes, 465–468
shutdown, 464–465
startup errors, 459–460
Svchost service splitting, 467–468
tags, 468–469
triggered-start, 457–459
user services, 469–473
virtual service account, 443–444
window stations, 445
Windows threads, viewing user start address for, 89–91. See also thread-local
register effect
WindowStation object, 129
Wininit, 831–835
Winload, 792–796, 808–810
Winlogon, 831–834, 838
WinObjEx64 tool, 125
WinRE (Windows Recovery Environment), 845–846. See also recovery
WMI (Windows Management Instrumentation)
architecture, 487–488
CIM (Common Information Model), 488–495
class association, 493–494
Control Properties, 498
DMTF, 486, 489
implementation, 496–497
Managed Object Format Language, 489–495
MOF (Managed Object Format), 488–495
namespace, 493
ODBC (Open Database Connectivity), 488
overview, 486–487
providers, 488–489, 497
scripts to manage systems, 495
security, 498
System Control commands, 497
WmiGuid object, 130
WmiPrvSE creation, viewing, 496
WNF (Windows Notification Facility)
event aggregation, 237–238
features, 224–225
publishing and subscription model, 236–237
state names and storage, 233–237
users, 226–232
WNF state names, dumping, 237
wnfdump command, 237
WnfDump utility, 226, 237
WoW64 (Windows-on-Windows)
ARM, 113–114
ARM32 simulation on ARM 64 platforms, 115
core, 106–109
debugging in ARM64, 122–124
exception dispatching, 113
file system redirection, 109–110
memory models, 114
overview, 104–106
registry redirection, 110–111
system calls, 112
user-mode core, 108–109
X86 simulation on AMD64 platforms, 759–751
X86 simulation on ARM64 platforms, 115–125
write throttling, 596–597
write-back caching and lazy writing, 589–595
write-behind and read-ahead. See read-ahead and write-behind
WSL (Windows Subsystem for Linux), 64, 128
X
x64 systems, 2–4
viewing GDT on, 4–5
viewing TSS and IST on, 8–9