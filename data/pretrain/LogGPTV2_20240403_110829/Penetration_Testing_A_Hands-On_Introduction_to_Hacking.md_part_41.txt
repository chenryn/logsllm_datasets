cises to give users hands-on experience exploiting web application issues
like the ones in this chapter, as well as others. Working through Webgoat is
a great next step if you want to learn more about testing web apps.
Another thing to note is that our application is an ASP.net application
running on Windows. In your pentesting career, you will encounter other
kinds of applications, such as Apache/PHP/MySQL applications running
on Linux, or a Java web application. You may also find yourself testing appli-
cations that use APIs such as REST and SOAP to transfer data. Though the
underlying issues caused by lack of input sanitation can occur on any plat-
form, the particular coding mistakes and the syntax to exploit them may
vary. Be sure to become familiar with different kinds of applications as you
continue to study web application security.
Web Application Testing 337
15
wireless at taCks
In this chapter we’ll take a brief look at wireless secu-
rity. So far we’ve looked at several ways to breach
the security perimeter. But web application security,
firewalls, security-awareness training, and so on can
do nothing to protect an internal network if there’s
an attacker sitting on a bench in front of the target
organization’s building and the organization provides
wireless access with weak encryption to the internal
network.
setting up
For the examples in this chapter, I’ll be using a Linksys WRT54G2 wire-
less router, but any router that supports WEP and WPA2 encryption will
work. By default, my Linksys router has a web administration interface at
http://192.168.20.1, as shown in Figure 15-1. The default username and
password for the router is admin:admin. The default credentials vary from
device to device, but it’s common on penetration tests to find routing
equipment that still uses the default credentials—a failing that could allow
attackers to gain administrative control over the routers.
note We won’t cover attacking networking devices in this book, but take a look at the
administrative interfaces on any networking equipment you have. Attacker access to
enterprise network devices can do significant damage and should not be overlooked.
Figure 15-1: Linksys WRT54G2 web interface
I’ll also be using an Alfa Networks AWUS036H USB wireless card. This
card, and similar Alfa USB models, are ideal for wireless security assessments,
particularly when working with virtual machines. VMware doesn’t have driv-
ers for wireless cards, but it is capable of USB passthrough, allowing us to use
the wireless drivers built into Kali Linux from a virtual machine. The use of
a USB wireless card will allow us to assess wireless networks from our virtual
machine.
Viewing Available Wireless Interfaces
After attaching the Alfa wireless card to the Kali virtual machine, enter
iwconfig to see the wireless interfaces available on your virtual machine.
Note in my case that the Alfa card is attached as wlan0 u, as shown in
Listing 15-1.
root@kali:~# iwconfig
wlan0u IEEE 802.11bg ESSID:off/any
Mode:Managed Access Point: Not-Associated Tx-Power=20 dBm
340 Chapter 15
Retry long limit:7 RTS thr:off Fragment thr:off
Encryption key:off
Power Management:off
lo no wireless extensions.
eth0 no wireless extensions.
Listing 15-1: Kali Linux wireless interfaces
Scan for Access Points
Now we can scan for nearby access points. The command iwlist wlan0 scan
will scan for nearby access points using the wlan0 interface, as shown in
Listing 15-2.
root@kali:~# iwlist wlan0 scan
Cell 02 - Address: 00:23:69:F5:B4:2Bu
Channel:6v
Frequency:2.437 GHz (Channel 6)
Quality=47/70 Signal level=-63 dBm
Encryption key:offw
ESSID:"linksys"x
Bit Rates:1 Mb/s; 2 Mb/s; 5.5 Mb/s; 11 Mb/s; 6 Mb/s
9 Mb/s; 14 Mb/s; 18 Mb/s
Bit Rates:24 Mb/s; 36 Mb/s; 48 Mb/s; 54 Mb/s
Mode:Master
--snip--
Listing 15-2: Scanning for nearby wireless access points
From this initial scan we gather almost all the information we’ll need
in order to attack the base station, as you’ll see later in the chapter. We have
its MAC address u, the channel it’s broadcasting on v, we learn that it’s not
using encryption at this time w, and we have its SSID x.
monitor mode
Before proceeding, let’s put our Alfa card into monitor mode. Much like
promiscuous mode in Wireshark, monitor mode allows us to see additional
wireless traffic on top of the traffic intended for our wireless card. We’ll
use the Airmon-ng script, part of the Aircrack-ng wireless assessment suite,
to put the Alfa card into monitor mode. First, make sure that no running
processes will interfere with monitor mode by entering airmon-ng check, as
shown in Listing 15-3.
root@kali:~# airmon-ng check
Found 2 processes that could cause trouble.
If airodump-ng, aireplay-ng or airtun-ng stops working after
a short period of time, you may want to kill (some of) them!
-e
Wireless Attacks 341
PID Name
2714 NetworkManager
5664 wpa_supplicant
Listing 15-3: Checking for interfering processes
As you can see, Airmon found two running processes that could inter-
fere. Depending on your wireless card and its drivers, you may or may not
run into any trouble if you don’t kill off these programs. The card we’re
using shouldn’t have trouble, but some USB wireless cards do. To kill all
interfering processes in one step, enter airmon-ng check kill, as shown in
Listing 15-4.
root@kali:~# airmon-ng check kill
Found 2 processes that could cause trouble.
If airodump-ng, aireplay-ng or airtun-ng stops working after
a short period of time, you may want to kill (some of) them!
-e
PID Name
2714 NetworkManager
5664 wpa_supplicant
Killing all those processes...
Listing 15-4: Killing interfering processes
Now enter airmon-ng start wlan0 to switch the wireless interface into
monitor mode, as shown in Listing 15-5. This will allow us to capture pack-
ets not intended for us. Airmon-ng creates the wireless interface mon0 u.
root@kali:~# airmon-ng start wlan0
Interface Chipset Driver
wlan0 Realtek RTL8187L rtl8187 - [phy0]
(monitor mode enabled on mon0) u
Listing 15-5: Putting the Alfa card in monitor mode
Capturing Packets
With our interface in monitor mode, let’s see what data we can gather using
Airodump-ng from the Aircrack-ng suite. Airodump-ng is used to capture
and save wireless packets. Listing 15-6 shows how we tell Airodump-ng to
use the wireless interface in monitor mode mon0.
root@kali:~# airodump-ng mon0 --channel 6
CH 6 ][ Elapsed: 28 s ][ 2015-05-19 20:08
BSSID PWR Beacons #Data, #/s CH MB ENC CIPHER AUTH ESSID
00:23:69:F5:B4:2Bu -30 53 2 0 6 54 . OPNv linksysw
342 Chapter 15
BSSID STATION PWR Rate Lost Frames Probe
00:23:69:F5:B4:2B 70:56:81:B2:F0:53x -21 0 -54 42 19
Listing 15-6: Starting a packet dump with Airodump-ng
The Airodump-ng output gathers information about the wireless packets,
including the base service set identification (BSSID), which is the base sta-
tion’s MAC address u. We also see additional information such as the encryp-
tion algorithm used for wireless security v and the Service Set Identification
(SSID) w. Airodump-ng also picks up the MAC addresses of connected
clients x and the MAC address of my host machine attached to the wireless
access point. (We’ll examine the other fields in the Airodump-ng output as
we move through cracking wireless security later in the chapter.)
Now we know the Linksys access point is open, with no security.
open wireless
Open wireless networks are a real disaster from a security perspective
because anyone within antenna range of the access point can connect to
that network. While open networks could require authentication after con-
nection, and some do, many just let anyone connect.
Also, the wireless packets traveling through an open network are not
encrypted, and anyone listening can see any data in plaintext. Sensitive
data may be secured by protocols like SSL, but that’s not always the case.
For instance, FTP traffic on an open wireless network is completely unen-
crypted, including login information, and we don’t even need to use ARP
or DNS cache poisoning to capture the packets. Any wireless card in moni-
tor mode will be able to see the unencrypted traffic.
Now let’s look at attacking networks that deploy various security protocols
that keep unwanted entities from connecting to the network and intercept-
ing traffic.
wired equivalent Privacy
Many routers that come with encryption enabled use older encryption
called wired equivalent privacy (WEP) by default. The fundamental problem
with WEP is that flaws in its algorithm make it possible for an attacker to
recover any WEP key. WEP uses the Rivest Cipher 4 (RC4) stream cipher
and a pre-shared key. Anyone who wants to connect to the network can use
the same key, made up of a string of hexadecimal digits, for both encryp-
tion and decryption. The plaintext (unencrypted) data undergoes an exclu-
sive or (XOR) bitwise operation with the keystream to create encrypted
ciphertext.
Wireless Attacks 343
The bitwise XOR operation has four possibilities:
• 0 XOR 0 = 0
• 1 XOR 0 = 1
• 0 XOR 1 = 1
• 1 XOR 1 = 0
The zeros and ones in the bitstream in Figures 15-2 and 15-3 can represent
any data being sent over the network. Figure 15-2 shows how the plaintext is
XORed with the keystream to create the ciphertext.
Plaintext: 101101100000111100101010001000...
Keystream: 110001101011100100011100110100...
Ciphertext: 011100001011011100100110001100...
Figure 15-2: WEP encryption
When decrypted, the same keystream is XORed against the ciphertext
to restore the original plaintext, as shown in Figure 15-3.
Ciphertext: 011100001011011100100110001100...
Keystream: 110001101011100100011100110100...
Plaintext: 101101100000111100101010001000...
Figure 15-3: WEP decryption
The shared WEP key can be either 64 or 148 bits. In either case, an
initialization vector (IV) makes up the first 24 bits of the key to add ran-
domness, making the effective key length really only 40 or 104 bits. Adding
randomness with an IV is common in cryptographic systems because if the
same key is used repeatedly, attackers can examine the resulting ciphertext
for patterns and potentially break the encryption.
344 Chapter 15
note Cryptanalysts often find that randomness is not correctly implemented in crypto-
graphic algorithms, as is the case with WEP. For starters, WEP’s 24 bits of random-
ization is minimal by modern cryptographic standards.
The IV and key are concatenated, then run through a key-scheduling
algorithm (KSA) and a pseudorandom number generator (PRNG) to cre-
ate the keystream. (I’ll skip the math here.) Next, an integrity check value
(ICV) is computed and concatenated with the plaintext before encryption
in order to prevent attackers from intercepting the ciphertexts, flipping
some bits, and changing the resulting decrypted plaintext to something
malicious or, at least, misleading. The plaintext is then XORed with the key-
stream (as shown in Figure 15-2). The resulting packet is made up of the IV,
the ICV, the ciphertext, and a two-bit key ID, as shown in Figure 15-4.
IV IV
KSA PRNG
key ID
key
message ciphertext
ICV ICV
Figure 15-4: WEP encryption
Decryption is similar, as shown in Figure 15-5. The IV and key (denoted
by the key ID), stored in plaintext as part of the packet, are concatenated
and run through the same key-scheduling algorithm and pseudorandom
number generators to create a keystream identical to the one used for
encryption. The ciphertext is then XORed with the keystream to reveal
the plaintext and the ICV. Finally, the decrypted ICV is compared with the
plaintext ICV value appended to the packet. If the values don’t match, the
packet is thrown out.
Wireless Attacks 345
IV
KSA PRNG
key ID key
ciphertext message
ICV ICV
Figure 15-5: WEP decryption
WEP Weaknesses
Unfortunately, WEP has some inherent problems that allow an attacker to
recover a key or alter legitimate packets. In fact, every WEP key is recover-
able by an attacker armed with enough ciphertexts encrypted with the same
shared key. The only cryptosystem that is truly secure is a random one-time
pad, which uses a specific key only once. The main trouble with WEP is that
the 24-bit IV doesn’t introduce enough randomness; it has at most 224 (that
is, 16,777,216) values.
There is no standard way for wireless cards and access points to com-
pute IVs, and in practice, the IV space used may be even smaller. Either way,
given enough packets, IVs will be reused, and the same value (static key
concatenated with the IV) will be used to generate the ciphertext. By pas-
sively listening for traffic (or better yet, injecting traffic into the network to
force more packets and, thus, more IVs to be generated), an attacker can
gather enough packets to perform cryptanalysis and recover the key.
Similarly, the ICV that attempts to keep attackers from intercepting the
encrypted message, flipping bits, and changing the resulting plaintext is
insufficient. Unfortunately, weaknesses in the ICV implementation Cyclic
Redundancy Check 32 (CRC-32) may allow attackers to craft the correct
ICV for a modified message. Because CRC-32 is a linear algorithm, flipping
a specific bit in the ciphertext has a deterministic result on the resulting
ICV, and an attacker with knowledge of how CRC-32 is calculated could
cause a modified message to be accepted. Thus, the ICV implementation,
like the IV, is not considered sound by modern cryptographic standards.
We can use the Aircrack-ng suite to recover the shared key from a wire-
less network secured with WEP. Again, the math behind the cryptographic
attacks is beyond the scope of this book. Luckily, we have tools that will take
care of the hard stuff if we can capture the required traffic.
346 Chapter 15
Cracking WEP Keys with Aircrack-ng
There are multiple ways to crack WEP keys, including the fake authentica-
tion attack, fragmentation attack, chopchop attack, caffé latte attack, and
PTW attack. We’ll take a closer look at the fake authentication attack, which
requires at least one legitimate client connected to the access point.
We’ll use the host system to simulate an attached client. First, change
the wireless security on your router to WEP (see your user guide if you need
help), and then make sure your wireless card is in monitor mode so that you
can capture traffic from the network without first authenticating.
Now to see what data we can collect using the Airodump-ng tool from
Aircrack-ng. Tell Airodump-ng to use the wireless interface in monitor mode
mon0, as shown in Listing 15-7, and use the -w flag to save all packets to a file.
root@kali:~# airodump-ng -w book mon0 --channel 6
CH 6 ][ Elapsed: 20 s ][ 2015-03-06 19:08
BSSID PWR Beacons #Data, #/s CH MB ENC CIPHER AUTH ESSID
00:23:69:F5:B4:2Bu -53 22 6 0 6v 54 . WEPw WEP linksysx
BSSID STATION PWR Rate Lost Frames Probe
00:23:69:F5:B4:2B 70:56:81:B2:F0:53 -26 54-54 0 6
Listing 15-7: Airodump-ng capture for WEP cryptanalysis
This initial scan gathers all the information we need to begin a WEP
attack against the base station. Here we have the BSSID u, wireless chan-
nel v, encryption algorithm w, and the SSID x. We’ll use this information