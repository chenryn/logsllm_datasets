### Hands-On Experience with Web Application Exploitation

To provide users with practical experience in exploiting web application vulnerabilities, such as those discussed in this chapter and others, consider using tools like WebGoat. Working through WebGoat is an excellent next step for those looking to deepen their understanding of web application testing.

It's important to note that our example application is an ASP.NET application running on Windows. In your penetration testing career, you will encounter various types of applications, including Apache/PHP/MySQL applications on Linux and Java web applications. Additionally, you may test applications that use APIs such as REST and SOAP for data transfer. While the underlying issues caused by lack of input sanitization can occur on any platform, the specific coding mistakes and the syntax to exploit them may vary. It is crucial to familiarize yourself with different kinds of applications as you continue to study web application security.

### Wireless Security

In this chapter, we will explore wireless security. So far, we have examined several methods to breach the security perimeter. However, if an attacker is sitting on a bench outside the target organization's building and the organization provides wireless access with weak encryption, all other security measures (e.g., web application security, firewalls, security-awareness training) are rendered ineffective.

#### Setting Up

For the examples in this chapter, I will be using a Linksys WRT54G2 wireless router. Any router that supports WEP and WPA2 encryption will work. By default, my Linksys router has a web administration interface at `http://192.168.20.1`, as shown in Figure 15-1. The default username and password for the router are `admin:admin`. Default credentials vary by device, but it is common during penetration tests to find routing equipment still using default credentials, which can allow attackers to gain administrative control over the routers.

**Note:** We will not cover attacking networking devices in this book, but it is essential to review the administrative interfaces on any networking equipment you have. Access to enterprise network devices by attackers can cause significant damage and should not be overlooked.

**Figure 15-1: Linksys WRT54G2 Web Interface**

I will also be using an Alfa Networks AWUS036H USB wireless card. This card, and similar Alfa USB models, are ideal for wireless security assessments, especially when working with virtual machines. VMware does not have drivers for wireless cards, but it supports USB passthrough, allowing us to use the wireless drivers built into Kali Linux from a virtual machine. Using a USB wireless card will enable us to assess wireless networks from our virtual machine.

#### Viewing Available Wireless Interfaces

After attaching the Alfa wireless card to the Kali virtual machine, enter the `iwconfig` command to see the available wireless interfaces on your virtual machine. In my case, the Alfa card is attached as `wlan0u`, as shown in Listing 15-1.

```bash
root@kali:~# iwconfig
wlan0u IEEE 802.11bg ESSID:off/any
Mode:Managed Access Point: Not-Associated Tx-Power=20 dBm
Retry long limit:7 RTS thr:off Fragment thr:off
Encryption key:off
Power Management:off
lo no wireless extensions.
eth0 no wireless extensions.
```

**Listing 15-1: Kali Linux Wireless Interfaces**

#### Scanning for Access Points

Now, we can scan for nearby access points. The command `iwlist wlan0 scan` will scan for nearby access points using the `wlan0` interface, as shown in Listing 15-2.

```bash
root@kali:~# iwlist wlan0 scan
Cell 02 - Address: 00:23:69:F5:B4:2Bu
Channel:6v
Frequency:2.437 GHz (Channel 6)
Quality=47/70 Signal level=-63 dBm
Encryption key:offw
ESSID:"linksys"x
Bit Rates:1 Mb/s; 2 Mb/s; 5.5 Mb/s; 11 Mb/s; 6 Mb/s
9 Mb/s; 14 Mb/s; 18 Mb/s
Bit Rates:24 Mb/s; 36 Mb/s; 48 Mb/s; 54 Mb/s
Mode:Master
--snip--
```

**Listing 15-2: Scanning for Nearby Wireless Access Points**

From this initial scan, we gather almost all the information needed to attack the base station. We have its MAC address `u`, the channel it’s broadcasting on `v`, the fact that it’s not using encryption `w`, and its SSID `x`.

#### Monitor Mode

Before proceeding, let’s put our Alfa card into monitor mode. Similar to promiscuous mode in Wireshark, monitor mode allows us to see additional wireless traffic beyond what is intended for our wireless card. We’ll use the `Airmon-ng` script, part of the Aircrack-ng wireless assessment suite, to put the Alfa card into monitor mode. First, ensure no running processes will interfere with monitor mode by entering `airmon-ng check`, as shown in Listing 15-3.

```bash
root@kali:~# airmon-ng check
Found 2 processes that could cause trouble.
If airodump-ng, aireplay-ng or airtun-ng stops working after
a short period of time, you may want to kill (some of) them!
-e
PID Name
2714 NetworkManager
5664 wpa_supplicant
```

**Listing 15-3: Checking for Interfering Processes**

As you can see, Airmon found two running processes that could interfere. Depending on your wireless card and its drivers, you may or may not run into trouble if you don’t kill these programs. To kill all interfering processes in one step, enter `airmon-ng check kill`, as shown in Listing 15-4.

```bash
root@kali:~# airmon-ng check kill
Found 2 processes that could cause trouble.
If airodump-ng, aireplay-ng or airtun-ng stops working after
a short period of time, you may want to kill (some of) them!
-e
PID Name
2714 NetworkManager
5664 wpa_supplicant
Killing all those processes...
```

**Listing 15-4: Killing Interfering Processes**

Now, enter `airmon-ng start wlan0` to switch the wireless interface into monitor mode, as shown in Listing 15-5. This will allow us to capture packets not intended for us. Airmon-ng creates the wireless interface `mon0u`.

```bash
root@kali:~# airmon-ng start wlan0
Interface Chipset Driver
wlan0 Realtek RTL8187L rtl8187 - [phy0]
(monitor mode enabled on mon0) u
```

**Listing 15-5: Putting the Alfa Card in Monitor Mode**

#### Capturing Packets

With our interface in monitor mode, let’s see what data we can gather using `Airodump-ng` from the Aircrack-ng suite. `Airodump-ng` is used to capture and save wireless packets. Listing 15-6 shows how we tell `Airodump-ng` to use the wireless interface in monitor mode `mon0`.

```bash
root@kali:~# airodump-ng mon0 --channel 6
CH 6 ][ Elapsed: 28 s ][ 2015-05-19 20:08
BSSID PWR Beacons #Data, #/s CH MB ENC CIPHER AUTH ESSID
00:23:69:F5:B4:2Bu -30 53 2 0 6 54 . OPNv linksysw
BSSID STATION PWR Rate Lost Frames Probe
00:23:69:F5:B4:2B 70:56:81:B2:F0:53x -21 0 -54 42 19
```

**Listing 15-6: Starting a Packet Dump with Airodump-ng**

The `Airodump-ng` output gathers information about the wireless packets, including the base service set identification (BSSID), which is the base station’s MAC address `u`. We also see additional information such as the encryption algorithm used for wireless security `v` and the Service Set Identification (SSID) `w`. `Airodump-ng` also picks up the MAC addresses of connected clients `x` and the MAC address of my host machine attached to the wireless access point. (We’ll examine the other fields in the `Airodump-ng` output as we move through cracking wireless security later in the chapter.)

#### Open Wireless Networks

Open wireless networks are a significant security risk because anyone within antenna range of the access point can connect to that network. While open networks could require authentication after connection, many simply allow anyone to connect.

Additionally, the wireless packets traveling through an open network are not encrypted, and anyone listening can see the data in plaintext. Sensitive data may be secured by protocols like SSL, but this is not always the case. For instance, FTP traffic on an open wireless network is completely unencrypted, including login information, and we don’t even need to use ARP or DNS cache poisoning to capture the packets. Any wireless card in monitor mode will be able to see the unencrypted traffic.

Next, let’s look at attacking networks that deploy various security protocols to prevent unwanted entities from connecting to the network and intercepting traffic.

#### Wired Equivalent Privacy (WEP)

Many routers that come with encryption enabled use older encryption called wired equivalent privacy (WEP) by default. The fundamental problem with WEP is that flaws in its algorithm make it possible for an attacker to recover any WEP key. WEP uses the Rivest Cipher 4 (RC4) stream cipher and a pre-shared key. Anyone who wants to connect to the network can use the same key, made up of a string of hexadecimal digits, for both encryption and decryption. The plaintext (unencrypted) data undergoes an exclusive or (XOR) bitwise operation with the keystream to create encrypted ciphertext.

The bitwise XOR operation has four possibilities:
- 0 XOR 0 = 0
- 1 XOR 0 = 1
- 0 XOR 1 = 1
- 1 XOR 1 = 0

The zeros and ones in the bitstream in Figures 15-2 and 15-3 can represent any data being sent over the network. Figure 15-2 shows how the plaintext is XORed with the keystream to create the ciphertext.

**Plaintext:** 101101100000111100101010001000...
**Keystream:** 110001101011100100011100110100...
**Ciphertext:** 011100001011011100100110001100...

**Figure 15-2: WEP Encryption**

When decrypted, the same keystream is XORed against the ciphertext to restore the original plaintext, as shown in Figure 15-3.

**Ciphertext:** 011100001011011100100110001100...
**Keystream:** 110001101011100100011100110100...
**Plaintext:** 101101100000111100101010001000...

**Figure 15-3: WEP Decryption**

The shared WEP key can be either 64 or 148 bits. In either case, an initialization vector (IV) makes up the first 24 bits of the key to add randomness, making the effective key length really only 40 or 104 bits. Adding randomness with an IV is common in cryptographic systems because if the same key is used repeatedly, attackers can examine the resulting ciphertext for patterns and potentially break the encryption.

**Note:** Cryptanalysts often find that randomness is not correctly implemented in cryptographic algorithms, as is the case with WEP. For starters, WEP’s 24 bits of randomization is minimal by modern cryptographic standards.

The IV and key are concatenated, then run through a key-scheduling algorithm (KSA) and a pseudorandom number generator (PRNG) to create the keystream. (I’ll skip the math here.) Next, an integrity check value (ICV) is computed and concatenated with the plaintext before encryption to prevent attackers from intercepting the ciphertexts, flipping some bits, and changing the resulting decrypted plaintext to something malicious or misleading. The plaintext is then XORed with the keystream (as shown in Figure 15-2). The resulting packet is made up of the IV, the ICV, the ciphertext, and a two-bit key ID, as shown in Figure 15-4.

**IV IV**
**KSA PRNG**
**key ID**
**key**
**message ciphertext**
**ICV ICV**

**Figure 15-4: WEP Encryption**

Decryption is similar, as shown in Figure 15-5. The IV and key (denoted by the key ID), stored in plaintext as part of the packet, are concatenated and run through the same key-scheduling algorithm and pseudorandom number generators to create a keystream identical to the one used for encryption. The ciphertext is then XORed with the keystream to reveal the plaintext and the ICV. Finally, the decrypted ICV is compared with the plaintext ICV value appended to the packet. If the values don’t match, the packet is discarded.

**IV**
**KSA PRNG**
**key ID key**
**ciphertext message**
**ICV ICV**

**Figure 15-5: WEP Decryption**

#### WEP Weaknesses

Unfortunately, WEP has inherent problems that allow an attacker to recover a key or alter legitimate packets. Every WEP key is recoverable by an attacker armed with enough ciphertexts encrypted with the same shared key. The only cryptosystem that is truly secure is a random one-time pad, which uses a specific key only once. The main issue with WEP is that the 24-bit IV doesn’t introduce enough randomness; it has at most \(2^{24}\) (that is, 16,777,216) values.

There is no standard way for wireless cards and access points to compute IVs, and in practice, the IV space used may be even smaller. Either way, given enough packets, IVs will be reused, and the same value (static key concatenated with the IV) will be used to generate the ciphertext. By passively listening for traffic (or better yet, injecting traffic into the network to force more packets and, thus, more IVs to be generated), an attacker can gather enough packets to perform cryptanalysis and recover the key.

Similarly, the ICV that attempts to keep attackers from intercepting the encrypted message, flipping bits, and changing the resulting plaintext is insufficient. Unfortunately, weaknesses in the ICV implementation (Cyclic Redundancy Check 32, CRC-32) may allow attackers to craft the correct ICV for a modified message. Because CRC-32 is a linear algorithm, flipping a specific bit in the ciphertext has a deterministic result on the resulting ICV, and an attacker with knowledge of how CRC-32 is calculated could cause a modified message to be accepted. Thus, the ICV implementation, like the IV, is not considered sound by modern cryptographic standards.

We can use the Aircrack-ng suite to recover the shared key from a wireless network secured with WEP. Again, the math behind the cryptographic attacks is beyond the scope of this book. Luckily, we have tools that will handle the complex calculations if we can capture the required traffic.

#### Cracking WEP Keys with Aircrack-ng

There are multiple ways to crack WEP keys, including the fake authentication attack, fragmentation attack, chopchop attack, caffé latte attack, and PTW attack. We’ll take a closer look at the fake authentication attack, which requires at least one legitimate client connected to the access point.

We’ll use the host system to simulate an attached client. First, change the wireless security on your router to WEP (see your user guide if you need help), and then make sure your wireless card is in monitor mode so that you can capture traffic from the network without first authenticating.

Now, let’s see what data we can collect using the `Airodump-ng` tool from Aircrack-ng. Tell `Airodump-ng` to use the wireless interface in monitor mode `mon0`, as shown in Listing 15-7, and use the `-w` flag to save all packets to a file.

```bash
root@kali:~# airodump-ng -w book mon0 --channel 6
CH 6 ][ Elapsed: 20 s ][ 2015-03-06 19:08
BSSID PWR Beacons #Data, #/s CH MB ENC CIPHER AUTH ESSID
00:23:69:F5:B4:2Bu -53 22 6 0 6v 54 . WEPw WEP linksysx
BSSID STATION PWR Rate Lost Frames Probe
00:23:69:F5:B4:2B 70:56:81:B2:F0:53 -26 54-54 0 6
```

**Listing 15-7: Airodump-ng Capture for WEP Cryptanalysis**

This initial scan gathers all the information we need to begin a WEP attack against the base station. Here we have the BSSID `u`, wireless channel `v`, encryption algorithm `w`, and the SSID `x`. We’ll use this information to proceed with the attack.