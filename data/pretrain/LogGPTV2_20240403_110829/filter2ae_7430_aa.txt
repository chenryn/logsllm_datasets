## 描述
下载文件，解压后文件结构如下：
    $ ls -l
    total 407504
    -rwxr-xr-x@  1 raycp  staff        281 Jul 11  2017 launch.sh
    drwxr-xr-x@ 59 raycp  staff       1888 Jul 11  2017 pc-bios
    -rwxr-xr-x@  1 raycp  staff   39682064 Jul 11  2017 qemu-system-x86_64
    -rw-r--r--@  1 raycp  staff    3864064 Jul 11  2017 rootfs.cpio
    -rwxr-xr-x@  1 raycp  staff    7308672 Jul 11  2017 vmlinuz-4.8.0-52-generic
其中`launch.sh`内容如下：
    #!/bin/sh
    ./qemu-system-x86_64 \
    -initrd ./rootfs.cpio \
    -kernel ./vmlinuz-4.8.0-52-generic \
    -append 'console=ttyS0 root=/dev/ram oops=panic panic=1' \
    -enable-kvm \
    -monitor /dev/null \
    -m 64M --nographic  -L ./dependency/usr/local/share/qemu \
    -L pc-bios \
    -device hitb,id=vda
## 分析
首先将设备`sudo ./launch.sh`运行起来并将`qemu-system-x86_64`拖到IDA里面进行分析。
运行起来的时候可能会报错如下错误，`sudo apt-get install libcurl3`即可解决。登录用户名为`root`，密码为空。
    ./qemu-system-x86_64: /usr/lib/x86_64-linux-gnu/libcurl.so.4: version `CURL_OPENSSL_3' not found (required by ./qemu-system-x86_64)
根据命令行参数`-device hitb`，大概知道了要pwn的目标pci设备是`hitb`。在IDA里面搜索hitb相关的函数，相关函数列表如下：
查看`pci_hitb_register_types`，知道了该设备所对应的`TypeInfo`。并且它的`class_init`函数为`hitb_class_init`，`instance_init`函数为`hitb_instance_init`。
其对应的结构体为`HitbState`：
    00000000 HitbState       struc ; (sizeof=0x1BD0, align=0x10, copyof_1493)
    00000000 pdev            PCIDevice_0 ?
    000009F0 mmio            MemoryRegion_0 ?
    00000AF0 thread          QemuThread_0 ?
    00000AF8 thr_mutex       QemuMutex_0 ?
    00000B20 thr_cond        QemuCond_0 ?
    00000B50 stopping        db ?
    00000B51                 db ? ; undefined
    00000B52                 db ? ; undefined
    00000B53                 db ? ; undefined
    00000B54 addr4           dd ?
    00000B58 fact            dd ?
    00000B5C status          dd ?
    00000B60 irq_status      dd ?
    00000B64                 db ? ; undefined
    00000B65                 db ? ; undefined
    00000B66                 db ? ; undefined
    00000B67                 db ? ; undefined
    00000B68 dma             dma_state ?
    00000B88 dma_timer       QEMUTimer_0 ?
    00000BB8 dma_buf         db 4096 dup(?)
    00001BB8 enc             dq ?                    ; offset
    00001BC0 dma_mask        dq ?
    00001BC8                 db ? ; undefined
    00001BC9                 db ? ; undefined
    00001BCA                 db ? ; undefined
    00001BCB                 db ? ; undefined
    00001BCC                 db ? ; undefined
    00001BCD                 db ? ; undefined
    00001BCE                 db ? ; undefined
    00001BCF                 db ? ; undefined
    00001BD0 HitbState       ends
先看`hitb_class_init`函数：
    void __fastcall hitb_class_init(ObjectClass_0 *a1, void *data)
    {
      PCIDeviceClass *v2; // rax
      v2 = (PCIDeviceClass *)object_class_dynamic_cast_assert(
                               a1,
                               "pci-device",
                               "/mnt/hgfs/eadom/workspcae/projects/hitbctf2017/babyqemu/qemu/hw/misc/hitb.c",
                               469,
                               "hitb_class_init");
      v2->revision = 16;
      v2->class_id = 255;
      v2->realize = (void (*)(PCIDevice_0 *, Error_0 **))pci_hitb_realize;
      v2->exit = (PCIUnregisterFunc *)pci_hitb_uninit;
      v2->vendor_id = 0x1234;
      v2->device_id = 0x2333;
    }
看到它所对应的`device_id`为`0x2333`，`vendor_id`为`0x1234`。在qemu虚拟机里查看相应的pci设备：
    # lspci
    00:00.0 Class 0600: 8086:1237
    00:01.3 Class 0680: 8086:7113
    00:03.0 Class 0200: 8086:100e
    00:01.1 Class 0101: 8086:7010
    00:02.0 Class 0300: 1234:1111
    00:01.0 Class 0601: 8086:7000
    00:04.0 Class 00ff: 1234:2333
`00:04.0`为相应的`hitb`设备，不知道为啥`lspci`命令没有`-v`选项，要查看I/O信息，查看`resource`文件：
    # cat /sys/devices/pci0000\:00/0000\:00\:04.0/resource
    0x00000000fea00000 0x00000000feafffff 0x0000000000040200
    0x0000000000000000 0x0000000000000000 0x0000000000000000
`resource`文件内容的格式为`start_address end_address
flag`，根据`flag`最后一位可知存在一个MMIO的内存空间，地址为`0x00000000fea00000`，大小为`0x100000`
查看`pci_hitb_realize`函数：
    void __fastcall pci_hitb_realize(HitbState *pdev, Error_0 **errp)
    {
      pdev->pdev.config[61] = 1;
      if ( !msi_init(&pdev->pdev, 0, 1u, 1, 0, errp) )
      {
        timer_init_tl(&pdev->dma_timer, main_loop_tlg.tl[1], 1000000, (QEMUTimerCB *)hitb_dma_timer, pdev);
        qemu_mutex_init(&pdev->thr_mutex);
        qemu_cond_init(&pdev->thr_cond);
        qemu_thread_create(&pdev->thread, "hitb", (void *(*)(void *))hitb_fact_thread, pdev, 0);
        memory_region_init_io(&pdev->mmio, &pdev->pdev.qdev.parent_obj, &hitb_mmio_ops, pdev, "hitb-mmio", 0x100000uLL);
        pci_register_bar(&pdev->pdev, 0, 0, &pdev->mmio);
      }
函数首先注册了一个[timer](https://rickylss.github.io/qemu/2019/05/20/qemu-timer.html)，处理回调函数为`hitb_dma_timer`，接着注册了`hitb_mmio_ops`内存操作的结构体，该结构体中包含`hitb_mmio_read`以及`hitb_mmio_write`，同时也看到了`size`大小为`0x100000`。
接下来仔细分析`hitb_mmio_read`以及`hitb_mmio_write`函数。
`hitm_mmio_read`函数没有什么关键的操作，主要就是通过`addr`去读取结构体中的相应字段。
关键的在`hitm_mmio_write`函数中，关键代码部分如下：
    void __fastcall hitb_mmio_write(HitbState *opaque, hwaddr addr, uint64_t value, unsigned int size)
    {
      uint32_t v4; // er13
      int v5; // edx
      bool v6; // zf
      int64_t v7; // rax
      if ( (addr > 0x7F || size == 4) && (!((size - 4) & 0xFFFFFFFB) || addr dma.cmd & 1) )
            opaque->dma.src = value;                // 0x80 set src
        }
        else
        {
          v4 = value;
          if ( addr > 128 )
          {
            if ( addr == 140 )
            {
              ...