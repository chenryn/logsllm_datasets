title:A Usability Study and Critique of Two Password Managers
author:Sonia Chiasson and
Paul C. van Oorschot and
Robert Biddle
A Usability Study and Critique of Two Password Managers
Sonia Chiasson and P.C. van Oorschot
School of Computer Science, Carleton University, Ottawa, Canada
PI:EMAIL
Robert Biddle
Human Oriented Technology Lab, Carleton University, Ottawa, Canada
Abstract
We present a usability study of two recent password man-
ager proposals: PwdHash (Ross et al., 2005) and Pass-
word Multiplier (Halderman et al., 2005). Both papers
considered usability issues in greater than typical detail,
the former brieﬂy reporting on a small usability study;
both also provided implementations for download. Our
study involving 26 users found that both proposals suf-
fer from major usability problems. Some of these are not
“simply” usability issues, but rather lead directly to se-
curity exposures. Not surprisingly, we found the most
signiﬁcant problems arose from users having inaccurate
or incomplete mental models of the software. Our study
revealed many interesting misunderstandings – for ex-
ample, users reporting a task as easy even when unsuc-
cessful at completing that task; and believing their pass-
words were being strengthened when in fact they had
failed to engage the appropriate protection mechanism.
Our ﬁndings also suggested that ordinary users would
be reluctant to opt-in to using these managers: users
were uncomfortable with “relinquishing control” of their
passwords to a manager, did not feel that they needed
the password managers, or that the managers provided
greater security.
1 Introduction
Several recent password managers, intended for protect-
ing web accounts, generate strong passwords (i.e., more
resistant to dictionary and/or social engineering attacks)
from weaker but more easily remembered user-chosen
passwords. They can also facilitate safer re-use of pass-
words across accounts by using various forms of salts
such as those derived from target site domain names. The
expectation is that these password managers increase se-
curity. Does this expectation materialize when real users
are involved? Can ordinary users actually use these sys-
tems? Do they want to? These are some of the questions
which we address in this paper, as we carry out a usabil-
ity study of two password managers – PwdHash [24] and
Password Multiplier [11].
Despite the inadequacies of passwords from a secu-
rity viewpoint, they are becoming more common. This
is causing additional challenges for ordinary users who
accumulate password-protected accounts for a growing
number of services and web sites. This also increases
security risks for several reasons. One is that passwords
are commonly reused across accounts; thus a password
used for a low-security site, easily compromised by an at-
tacker, may allow access to a higher-security site. Phish-
ing attacks on passwords have increased dramatically
over the past three years, complicating matters further.
On top of these issues, it is well known that security is
viewed as an obstacle by many users because security is
rarely a user’s primary goal. When security procedures
impede users’ end goals, users bypass security [2, 5, 26].
Thus usability is an increasingly important aspect of se-
curity in general, and password systems in particular.
Our objective was to examine if any progress had been
made in addressing usability in security, seven years after
“Why Johnny Can’t Encrypt” [31]. Since novice users
are often at increased risk from security vulnerabilities,
we sought tools aimed at novice users as a logical start-
ing point. Two password manager projects in particu-
lar piqued our interest: PwdHash and Password Multi-
plier. Both were published in 2005, had a signiﬁcant fo-
cus on usability and positioned it as a major objective,
and had publicly available implementations. Although
the implementations that we tested are still in beta ver-
sions, their authors state that these should help novice
computer users protect their passwords. We decided to
carry out an independent study to test the effectiveness
of the two systems from a usability standpoint – could
they be successfully used, and did any security problems
arise due to usability problems?
We found discrepancies between the usability claims
of the published password manager papers and the results
of our study. We uncovered numerous usability prob-
lems with the interfaces, some of which create security
USENIX Association
Security ’06: 15th USENIX Security Symposium
1
exposures. Many of the usability issues found are not
particular to security, and are addressed in the existing
Human-Computer Interaction (HCI) and usability litera-
ture. This suggests that the existing gap between the HCI
and security communities hurts the latter due to a lack of
awareness (or at least application) of the HCI usability
literature, and leads only to rediscovery of well-known
principles. Research effort would of course be better
spent focusing on those usability issues that are unique
to security interfaces.
The authors of both password managers state that se-
curity interfaces should be as transparent as possible; re-
sulting in absolutely minimal or no change in user ex-
perience. Our study reveals that designing towards this
belief can not only contribute to usability problems, but
can lead to “dangerous errors” [31];1 we conclude that
this idea requires closer scrutiny and validation.
OUR CONTRIBUTIONS. We add to the relatively
sparse, albeit growing, set of published usability stud-
ies in the security literature. We carry out an indepen-
dent usability test of two proposed password mecha-
nisms which have received signiﬁcant attention within
the security community: PwdHash [24] and Password
Multiplier [11]. The results of our larger study directly
contradict the ﬁndings reported for PwdHash (no user
study was published for Password Multiplier), and sug-
gest that both earlier papers (1) over claim the actual us-
ability of their mechanisms as provided in their own pub-
licly available implementations; and (2) result in “dan-
gerous errors” with serious security implications. Our
work reiterates the necessity of actual user studies before
concluding that new security mechanisms are usable. It
also raises the question of what the standard should be in
the security community: should usability tests become a
requirement for new authentication proposals, if a major
claim is usability? Aside from usability and security con-
siderations per se, we also provide interesting results on
how users felt about these mechanisms: about giving up
“control” of their passwords to these mechanisms, their
perceived security, and their perceived necessity.
ORGANIZATION. Section 2 reviews the two password
managers we evaluate. Section 3 ﬁrst brieﬂy provides
context on usability testing, and then details our study
methodology. Section 4 presents the data collected from
interaction with participants, our interpretation and anal-
ysis of which is provided in Section 5. Section 6 provides
further discussion and recommendations. Section 7 dis-
cusses related work. Section 8 gives concluding remarks.
2 Password Managers
Passwords are the most common form of authentication
on computers today [23]; yet they are far from the most
secure. Cognitive demands increase as people use more
computer systems, leading to poorer password choices
Figure 1: Remote web site for generating PwdHash passwords
in an attempt to manage the load. Encouraging stronger
passwords through password rules or advice on select-
ing good passwords does not help users remember the
stronger passwords. Encouraging the use of passphrases
similarly does not mitigate the problem of matching mul-
tiple passwords and multiple accounts.
One proposed solution to these password problems
is password managers. One class of these managers
maps low-entropy (easy to remember) user passwords
into stronger passwords (more resistant to dictionary at-
tacks), and may also generate site-speciﬁc passwords
partially dependent on the domain name of the site (pro-
tecting against some phishing attacks). Several pass-
word managers exist in different formats: stand-alone
applications (e.g., Site Password [13]), browser plug-ins
(e.g., Password Maker [15]), browser scripts (e.g., Pass-
word Composer [14]), and bookmarklets (e.g., Password
Generator [33]). PwdHash and Password Multiplier are
two recent additions to the list. They are both browser
plug-ins claiming to make it easier for users to have se-
cure passwords without having to remember a number of
complicated passwords.
2.1 PwdHash
PwdHash [24] is a browser plug-in that applies a cryp-
tographic hash at the client machine to generate strong
passwords based on the user’s entered password and the
site domain. The new stronger password is sent to the
target site. No server-side changes are needed. Users
activate the installed plug-in by adding the @@ preﬁx
to passwords they want “protected”, or by pressing the
F2 key before entering their password. Once passwords
are “protected”, the users no longer know their effective
passwords; thus PwdHash must always be used to log in
to the web accounts. The authors [24] provide a web site
where users can remotely generate their protected pass-
word for times when they are logging on to a site from a
computer without the plug-in (see Figure 1). This gener-
ated password is copied and pasted by the users into the
target password ﬁeld.
Users must initially log on to each web account they
want to protect, and change their password. They en-
ter @@ in front of their new password, which activates
2
Security ’06: 15th USENIX Security Symposium
USENIX Association
PwdHash and generates a new “strong” password. Users
later changing their protected password for a given site
use that web site’s Change Password interface, but with
@@ as a preﬁx to both their current and new passwords.
PwdHash is also designed to prevent certain JavaScript
attacks. It processes the input stream, scanning for the
@@ character, processing so-designated passwords, and
replacing the input, before JavaScript would have access.
PwdHash also protects against phishing attacks by using
a hash salt based on the domain name of the target web
site. If users enter their password at a fraudulent site, that
site’s domain will be used as the salt.
An implementation is publicly available. The reported
user study of ﬁve users found that participants experi-
enced little difﬁculty using the plug-in and that the only
usability problems were observed with the remote inter-
face. The approach was positioned as unique in that it
implements password hashing within the browser, with-
out additional window pop-ups or having a visible soft-
ware interface. The PwdHash authors believe that this
improves its usability: “We can reduce the threat of
password attacks with no server changes and little or
no change to the user experience. Since the users who
fall victim to many common attacks are technically un-
sophisticated, our techniques are designed to transpar-
ently provide novice users with the beneﬁts of password
practices that are otherwise only feasible for security ex-
perts” [24].
2.2 Password Multiplier
identiﬁed
(hereafter
Password Multiplier
as P-
Multiplier) is a second password manager intended
to help users generate strong passwords for web
accounts [11].
It is a plug-in for Mozilla’s Firefox
web browser, requiring no changes to the servers; all
computation is done client-side. As with PwdHash,
a cryptographic hash function is applied, generating
strong passwords for the user’s accounts. While a
primary design goal of PwdHash is to protect web site
passwords against phishing attacks, P-Multiplier
is
intended to generate and manage strong passwords from
a single user-chosen password for arbitrary password-
protected applications (i.e, not restricted to web site
passwords); this difference does not affect our usability
study, and the plug-in we tested is restricted to web
site passwords. P-Multiplier uses a master username
and master password so that users need only remember
one password for all of their accounts. A protected
password is generated based on the master username,
master password, and the target site domain name. Users
activate the plug-in by double-clicking on the password
ﬁeld or pressing Alt+P while the cursor is in that ﬁeld.
This opens a small dialog box. The master username
is entered automatically (it is set upon installation).
Figure 2: The dialog box for P-Multiplier is activated by
double-clicking on the password ﬁeld
Users enter the master password (see Figure 2). When
users click the OK button, the dialog box closes and the
generated password is automatically placed into the web
site’s password ﬁeld. The background colour of the web
site’s password ﬁeld changes to signal the entry of the
protected password.
Users must switch each account password over to a
protected password generated by P-Multiplier, by using
the Change Password interface of each web site. They
double-click on the new password ﬁeld to activate P-
Multiplier and generate their new password. To up-
date any password after it is protected, users must mod-
ify the “site name” argument used to generate the pass-
word (e.g., for a google.com password, change the site
name in the P-Multiplier dialog box to google.com-two).
Users thereafter must remember to enter their changed
site name each time they log in to this particular site.
To help protect against dictionary attacks, P-Multiplier
uses a two-stage process which in the ﬁrst stage, mas-
sively iterates the hash function, with the intent to slow
down any attack on the master password. This intro-
duces a 100-second delay when ﬁrst installing the plug-
in, while it computes a ﬁrst hash result which is cached
on the local computer. Passwords later generated on this
computer use the cached ﬁrst hash, as well as the mas-
ter secret again, as input to a second (less massively it-
erated) hash operation. Legitimate users experience the
long delay only on new installations of the plug-in (not
per-login). The idea is that attackers must compute the
hash function from scratch each time they test a new mas-
ter password, encountering the long delay with each trial.
For use from remote (secondary) computers, users
must download and install the plug-in on the remote
computer, and on it enter the correct master password
and username in order to generate their protected pass-
words (and experience the 100s ﬁrst-stage delay). No al-
ternative is provided for users unable to install software
(this is positioned as a relatively rare occurrence by the
USENIX Association
Security ’06: 15th USENIX Security Symposium
3
P-Multiplier authors).
No usability testing was reported in publication [11]
or on the P-Multiplier web site [12]. When discussing
usability, they acknowledge that transportability is a nec-
essary characteristic. They assert that PwdHash and P-
Multiplier are equally transportable, however their soft-
ware requires installation on a remote site (unlike Pwd-
Hash).
3 Study Methodology
To investigate the usability of these password managers,
we conducted a study with participants who would be
typical users of these systems. We ﬁrst provide some
background on usability studies, then describe our study
methodology in detail.
3.1 Usability Testing
Since it is not a mainstream topic for most security re-
searchers, we begin by brieﬂy providing some back-
ground on usability studies. There are two general cat-
egories of methods for assessing the usability of a sys-
tem: usability inspection methods and user studies. With
usability inspection methods (such as cognitive walk-
throughs and heuristic evaluations), evaluators inspect
and evaluate usability-related aspects of a system. They
are conducted without end users and require a certain
level of expertise in usability [19]. These are useful in
ﬁnding obvious usability problems but are no substitute
for user studies with real users. Typically, usability in-
spection methods are used early on to guide the design
process, then user studies are conducted to conﬁrm the
design decisions and ﬁnd any problems that have been
overlooked. User studies can range from closely con-
trolled experimental studies testing speciﬁc hypotheses
to ﬁeld studies where the system is deployed for real us-
age and system logs and interviews are used to assess its
usability. Most user studies fall somewhere in between,
conducted in a lab, with pre-determined tasks, but also
leaving room to observe users in a more ad hoc manner
and uncover unexpected problems as they arise [27].
Usability tests are used to determine whether a system
is suitable for the intended audience and for its intended
purpose. Typically, the tests aim to uncover any difﬁ-
culties encountered by the users as they go through a set
of predetermined tasks. These tasks should be carefully
chosen to reﬂect realistic usage scenarios. To preserve
ecological validity, the environment should be set up to
mimic reality as closely as possible in terms of techni-
cal details, but also in terms of instructions given. If a
typical end-user is expected to be able to use the system
without in-person training, then training on system use
should not be provided during the test.
It is important to closely observe users as they per-
form these tasks as this is how most usability problems
are revealed. The observer’s role is mainly to observe
and record what is happening. They need to be careful
not to provide extra instructions or cues that may inﬂu-
ence the user’s actions. In fact, a script should be used to
ensure that all participants receive the same information.
It is important to emphasize that it is the system that is
being tested and not the user; the participants should feel
that they are helping with the development of the system
rather than feel like their performance is being evaluated.
A method called “think-aloud” is typically used, where
users are asked to keep a running commentary as they
perform the tasks. Pre/post questionnaires or interviews
are also useful in gathering users’ opinions, attitudes, and
feedback about the system. This should be a secondary
source of information, used in conjunction with obser-
vations and potentially system logs, because users’ re-
ported views often do not reﬂect their performance and
often fail to reveal crucial usability problems.