title:PDoT: private DNS-over-TLS with TEE support
author:Yoshimichi Nakatsuka and
Andrew Paverd and
Gene Tsudik
PDoT: Private DNS-over-TLS with TEE
Support
Andrew Paverd∗
Microsoft Research
PI:EMAIL
Yoshimichi Nakatsuka
University of California, Irvine
PI:EMAIL
Gene Tsudik
University of California, Irvine
PI:EMAIL
9
1
0
2
p
e
S
5
2
]
R
C
.
s
c
[
1
v
1
0
6
1
1
.
9
0
9
1
:
v
i
X
r
a
ABSTRACT
Security and privacy of the Internet Domain Name System (DNS)
have been longstanding concerns. Recently, there is a trend to pro-
tect DNS traffic using Transport Layer Security (TLS). However,
at least two major issues remain: (1) how do clients authenticate
DNS-over-TLS endpoints in a scalable and extensible manner; and
(2) how can clients trust endpoints to behave as expected? In this pa-
per, we propose a novel Private DNS-over-TLS (PDoT) architecture.
PDoT includes a DNS Recursive Resolver (RecRes) that operates
within a Trusted Execution Environment (TEE). Using Remote Attes-
tation, DNS clients can authenticate, and receive strong assurance
of trustworthiness of PDoT RecRes. We provide an open-source
proof-of-concept implementation of PDoT and use it to experimen-
tally demonstrate that its latency and throughput match that of the
popular Unbound DNS-over-TLS resolver.
CCS CONCEPTS
• Security and privacy → Web protocol security; Hardware-
based security protocols; Network security; Privacy protections.
KEYWORDS
Domain Name System, Privacy, Trusted Execution Environment
ACM Reference Format:
Yoshimichi Nakatsuka, Andrew Paverd, and Gene Tsudik. 2019. PDoT: Pri-
vate DNS-over-TLS with TEE Support. In 2019 Annual Computer Security
Applications Conference (ACSAC ’19), December 9–13, 2019, San Juan, PR, USA.
ACM, New York, NY, USA, 11 pages. https://doi.org/10.1145/3359789.3359793
1 INTRODUCTION
The Domain Name System (DNS) [29] is a distributed system that
translates human-readable domain names into IP addresses. It has
been deployed since 1983 and, throughout the years, DNS privacy
has been a major concern.
In 2015, Zhu et al. [39] proposed a DNS design that runs over
Transport Layer Security (TLS) connections [13]. DNS-over-TLS
protects privacy of DNS queries and prevents man-in-the-middle
(MiTM) attacks against DNS responses. [39] also demonstrated the
∗Work done while visiting University of California, Irvine, as a US-UK Fulbright Cyber
Security Scholar.
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
© 2019 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-7628-0/19/12.
https://doi.org/10.1145/3359789.3359793
practicality of DNS-over-TLS in real-life applications. Several open-
source recursive resolver (RecRes) implementations, including Un-
bound [23] and Knot Resolver [12], currently support DNS-over-
TLS. In addition, commercial support for DNS-over-TLS has been
increasing, e.g., Android P devices [18] and Cloudflare’s 1.1.1.1
RecRes [9]. However, despite attracting interest in both academia
and industry, some problems remain.
The first challenge is how clients authenticate the RecRes. Certificate-
based authentication is natural for websites, since the user (client)
knows the URL of the desired website and the certificate securely
binds this URL to a public key. However, the same approach cannot
be used to authenticate a DNS RecRes because the RecRes does not
have a URL or any other unique long-term user-recognizable iden-
tity that can be included in the certificate. One way to address this
issue is to provide clients with a white-list of trusted RecRes-s’ pub-
lic keys. However, this is neither scalable nor maintainable, because
the white-list would have to include all possible RecRes operators,
ranging from large public services (e.g., 1.1.1.1) to small-scale
providers, e.g., a local RecRes provided by a coffee-shop.
Even if the RecRes can be authenticated, the second major issue
is the lack of means to determine whether a given RecRes is trust-
worthy. For example, even if communication between client stub
(client) and RecRes, and between RecRes and the name server (NS)
is authenticated and encrypted using TLS, the RecRes must decrypt
the DNS query in order to resolve it and contact the relevant NS-s.
This allows the RecRes to learn unencrypted DNS queries, which
poses privacy risks of a malicious RecRes misusing the data, e.g.,
profiling users or selling their DNS data. Some RecRes operators
go to great lengths to assure users that their data is private. For
example, Cloudflare promises “We will never sell your data or use
it to target ads” and goes on to say “We’ve retained KPMG to audit
our systems annually to ensure that we’re doing what we say” [9].
Although helpful, this still requires users to trust the auditor and
can only be used by operators who can afford an auditor.
In this paper, we use Trusted Execution Environments (TEEs)
and Remote Attestation (RA) to address these two problems. By using
RA, the identity of the RecRes is no longer relevant, since clients
can check what software a given RecRes is running and make trust
decisions based on how the RecRes behaves. RA is one of the main
features of modern hardware-based TEEs, such as Intel Software
Guard Extensions (SGX) [27] and ARM TrustZone [4]. Such TEEs
are now widely available, with Intel CPUs after the 7th generation
supporting SGX, and ARM Cortex-A CPUs supporting TrustZone.
TEEs with RA capability are also available in cloud services, such
as Microsoft Azure [28]. Specifically, our contributions are:
• We design a Private DNS-over-TLS (PDoT) architecture, the
main component of which is a privacy-preserving RecRes
that operates within a commodity TEE. Running the RecRes
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
Yoshimichi Nakatsuka, Andrew Paverd, and Gene Tsudik
inside a TEE prevents even the RecRes operator from learn-
ing clients’ DNS queries, thus providing query privacy. Our
RecRes design addresses the authentication challenge by
enabling clients to trust the RecRes based on how it behaves,
and not on who it claims to be. (See Section 4).
• We implement a proof-of-concept PDoT RecRes using In-
tel SGX and evaluate its security, deployability, and perfor-
mance. All source code and evaluation scripts are publicly
available [21]. Our results show that PDoT handles DNS
queries without leaking information while achieving suffi-
ciently low latency and offering acceptable throughput (See
Sections 5 and 6).
• In order to quantify privacy leakage via traffic analysis, we
performed an Internet measurement study. It shows that
94.7% of the top 1, 000, 000 domain names can be served
from a privacy-preserving NS that serves at least two distinct
domain names, and 65.7% from a NS that serves 100+ domain
names. (See Section 7).
2 BACKGROUND
2.1 Domain Name System (DNS)
DNS is a distributed system that translates host and domain names
into IP addresses. DNS includes three types of entities: Client Stub
(client), Recursive Resolver (RecRes), and Name Server (NS). Client
runs on end-hosts. It receives DNS queries from applications, cre-
ates DNS request packets, and sends them to the configured RecRes.
Upon receiving a request, RecRes sends DNS queries to NS-s to re-
solve the query on client’s behalf. When NS receives a DNS query, it
responds to RecRes with either the DNS record that answers client’s
query, or the IP address of the next NS to contact. RecRes thus re-
cursively queries NS-s until the record is found or a threshold is
reached. The NS that holds the queried record is called: Author-
itative Name Server (ANS). After receiving the record from ANS,
RecRes forwards it to client. It is common for RecRes to cache
records so that repeated queries can be handled more efficiently.
2.2 Trusted Execution Environment (TEE)
A Trusted Execution Environment (TEE) is a security primitive
that isolates code and data from privileged software such as the
OS, hypervisor, and BIOS. All software running outside TEE is
considered untrusted. Only code running within TEE can access
data within TEE, thus protecting confidentiality and integrity of
this data against untrusted software. Another typical TEE feature
is remote attestation (RA), which allows remote clients to check
precisely what software is running inside TEE.
One recent TEE example is Intel SGX, which enables applications
to create isolated execution environments called enclaves. The CPU
enforces that only code running within an enclave can access that
enclave’s data. SGX also provides RA functionality.
Memory Security. SGX reserves a portion of memory called
the Enclave Page Cache (EPC). It holds 4KB pages of code and data
associated with specific enclaves. EPC is protected by the CPU
to prevent non-enclave access to this memory region. Execution
threads enter and exit enclaves using SGX CPU instructions, thus
ensuring that in-enclave code execution can only begin from well-
defined call gates. From a software perspective, untrusted code can
make ECALLs to invoke enclave functions, and enclave code can
make OCALLs to invoke untrusted functions outside the enclave.
Attestation Service. SGX provides two types of attestation:
local and remote. Local attestation enables one enclave to attest
another (running on the same machine) to verify that the latter
is a genuine enclave actually running on the same CPU. Remote
attestation involves more entities. First, an application enclave to be
attested creates a report that summarizes information about itself,
e.g., code it is running. This report is sent to a special enclave, called
quoting enclave which is provided by Intel and available on all SGX
machines. Quoting enclave confirms that requesting application
enclave is running on the same machine and returns a quote, which
is a report with the quoting enclave’s signature. The application
enclave sends this quote to the Intel Attestation Service (IAS) and
obtains an attestation verification report. This is signed by the IAS
confirming that the application enclave is indeed a genuine SGX
enclave running the code it claims. Upon receiving an attestation
verification report, the verifier can make an informed trust decision
about the behavior of the attested enclave.
Side-Channel Attacks. SGX is vulnerable to side-channel at-
tacks [24, 36], and various mechanisms have been proposed [11, 32,
34] to mitigate them. Since defending against side-channel attacks
is orthogonal to our work, we expect that a production implemen-
tation would include relevant mitigation mechanisms.
3 ADVERSARY MODEL & REQUIREMENTS
3.1 Adversary Model
The adversary’s goal is to learn, or infer, information about DNS
queries sent by clients. We consider two types of adversaries, based
on their capabilities:
The first type is a malicious RecRes operator who has full control
over the physical machine, its OS and all applications, including
RecRes. We assume that the adversary cannot break any crypto-
graphic primitives, assuming that they are correctly implemented.
We also assume that it cannot physically attack hardware compo-
nents, e.g., probe CPU physically to learn TEE secrets. This ad-
versary also controls all of RecRes’s communication interfaces,
allowing it to drop/delay packets, measure the time required for
query processing, and observe all cleartext packet headers. The
second type is a network adversary, which is strictly weaker than
the malicious RecRes operator. In the passive case, this adversary
can observe any packets that flow into and out of RecRes. In the
active case, this adversary can modify and forge network pack-
ets. DNS-over-TLS alone (without PDoT) is sufficient to thwart
a passive network adversary. However, since an active adversary
could redirect clients to a malicious RecRes, clients need an efficient
mechanism to authenticate the RecRes and determine whether it is
trustworthy, which is the main contribution of PDoT.
We do not consider Denial-of-Service (DoS) attacks on RecRes,
since these do not help to achieve either adversary’s goal of learning
clients’ DNS queries. Connection-oriented RecRes-s can defend
against DoS attacks using cookie-based mechanisms to prevent
SYN flooding [39].
3.2 System Requirements
We define the following requirements for the overall system:
PDoT: Private DNS-over-TLS with TEE Support
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
R1: Query Privacy. Contents of client’s query (specifically, do-
main name to be resolved) should not be learned by the
adversary. Ideally, payload of the DNS packets should be
encrypted. However, even if packets are encrypted, their
headers leak information, such as source and destination IP
addresses. In Section 7.1, we quantify the amount of infor-
mation that can be learned via traffic analysis.
R2: Deployability. Clients using a privacy-preserving RecRes
should require no special hardware. Minimal software modi-
fications should be imposed. Also, for the purpose of transi-
tion and compatibility, a privacy-preserving RecRes should
be able to interact with legacy clients that only support un-
modified DNS-over-TLS.