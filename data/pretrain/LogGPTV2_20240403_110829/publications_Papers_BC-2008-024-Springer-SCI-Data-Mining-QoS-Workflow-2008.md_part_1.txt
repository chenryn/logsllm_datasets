**Applying Data Mining Algorithms to Calculate the Quality of Service (QoS) of Workflow Processes**

**Jorge Cardoso**  
Department of Mathematics and Engineering  
9000-390 Funchal, Portugal  
Email: [PI:EMAIL]

**Abstract**  
Organizations have long recognized the importance of Quality of Service (QoS) for maintaining competitiveness. Workflow systems are widely acknowledged as effective tools for managing QoS in processes and workflows. Proper QoS management in workflows can enhance customer satisfaction, reduce internal costs, and increase the value of services provided. This paper introduces a novel method that utilizes data mining algorithms to predict the QoS of running workflow instances. The method is validated through experimentation, demonstrating its effectiveness in predicting QoS.

**Keywords**: Quality of Service, Data Mining, Business Process, Workflow

### 1. Introduction
In today's global economy, advanced information systems are essential. Business Process Management Systems (BPMS), such as Workflow Management Systems (WfMS), provide the infrastructure to define and manage various business processes. These systems help organizations streamline and automate their processes, thereby increasing efficiency and reducing costs.

A critical requirement for BPMS and WfMS is the ability to manage the Quality of Service (QoS) of processes and workflows. QoS specifications, such as response time, reliability, and cost, must be integrated into the design and composition of workflows to ensure high-quality products and services that meet customer expectations.

One key aspect of QoS management is the prediction of QoS for workflows. Various approaches, including statistical algorithms, simulation, and data mining, have been used to predict QoS before or during workflow execution. Data mining-based methods, in particular, have gained significant attention and are associated with the emerging field of Business Process Intelligence (BPI).

This paper aims to enhance previous work on BPI and business process quality by developing more accurate QoS prediction methods. Specifically, we address the following limitations:

1. **Path Mining and QoS Activity Models**: We combine path mining with QoS activity models to improve the accuracy of QoS predictions.
2. **Time Prediction**: Unlike previous methods, our approach provides a more precise estimate of the time required for workflow execution.
3. **Algorithm Performance**: We demonstrate that MultiBoost Naïve Bayes outperforms decision trees in QoS prediction.

The paper is structured as follows: Section 2 outlines our method for QoS mining based on path mining, QoS activity models, and workflow QoS estimation. Section 3 describes the experiments conducted to validate our method. Section 4 reviews related work, and Section 5 presents our conclusions.

### 2. Motivation
Many organizations are adopting workflow management systems to support their business processes. However, current systems often lack QoS management for critical parameters such as delivery deadlines, reliability, and service costs.

For example, if a workflow is initiated to deliver a service to a customer, it would be beneficial for the organization to predict the completion time and associated costs. Workflows are non-deterministic and concurrent, making QoS prediction challenging. The QoS of a workflow instance depends on the activities invoked and their execution times and costs.

Predicting QoS allows organizations to monitor and adjust workflows in real-time. If a running workflow is unlikely to meet initial QoS requirements, adaptation strategies can be employed to modify the workflow structure, thereby reducing costs or execution times.

### 3. QoS Mining Method
Our method for QoS mining consists of three phases: path mining, QoS activity model construction, and workflow QoS estimation. Each phase is described below.

#### 3.1 Path Mining
Path mining uses data mining algorithms to predict the path that a workflow instance will follow at runtime. A path is a sequence of activities that are likely to be executed. By analyzing historical workflow logs, we can identify the most probable paths and the activities they involve.

**Definition (Path)**: A path P is a continuous mapping P: [a, b] → Co, where P(a) is the initial point, P(b) is the final point, and Co denotes the space of continuous functions. In a workflow, a path is a sequence of transitions {t1, t2, …, tn} where each ti is connected to a workflow activity.

To perform path mining, workflow logs are extended to include input/output values and path information. Table 1 shows an example of an extended workflow log.

| Workflow Log Extension | Parameter/Value | Path |
|------------------------|-----------------|------|
| ...                    | int SSN=7774443333; ... | string loan-type="car-loan" |
| ...                    | string name=PI:EMAIL; | {FillLoanRequest, CheckLoanType, CheckCarLoan, ApproveCarLoan, NotifyCarLoanClient, ArchiveApplication} |
| ...                    | ...             | ...  |

Once sufficient data is gathered, data mining methods can be applied to predict the path followed by a process instance based on instance parameters.

#### 3.2 QoS Activity Model Construction
After identifying the likely path, we construct a QoS activity model for each activity. This model includes information about the activity's runtime behavior, such as its cost and execution time. The model is built using activity profiling, which involves testing the activity with specific inputs and associating each input with a probability of being selected during operational use.

The QoS activity model is constructed at design time and updated at runtime based on the data from previous instance executions stored in the workflow log. Four scenarios can occur when computing QoS dimensions (Table 2):

| Scenario | Formula |
|----------|---------|
| a)       | QoS(a) = Designer Average(a) |
| b)       | QoS'(a) = w1 * Designer Average(a) + w2 * Multi-Workflow Average(a) |
| c)       | QoS(a, w) = w1 * Designer Average(a) + w2 * Multi-Workflow Average(a) + w3 * Workflow Average(a, w) |
| d)       | QoS(a, w, i) = w1 * Designer Average(a) + w2 * Multi-Workflow Average(a) + w3 * Workflow Average(a, w) + w4 * Instance Average(a, w, i) |

The weights wi reflect the degree of correlation between the workflow under analysis and other workflows. At the end of this phase, we know the likely activities and their QoS metrics.

#### 3.3 Workflow QoS Estimation
With the path and QoS activity models, we can predict the QoS of a workflow instance. We use a variation of the Stochastic Workflow Reduction (SWR) algorithm to compute the estimated QoS step-by-step. The SWR algorithm reduces the process by applying reduction rules until only one activity remains, which contains the QoS metrics for the workflow.

For example, if the predicted path includes a parallel system (Figure 3), the parallel system reduction rule is applied to create a new section of the workflow. The QoS of the new workflow is computed using the following formulae:

- Time(t1n) = Max {Time(ti)}
- Cost(t1n) = Sum {Cost(ti)}

**Figure 3. Parallel System Reduction**

```
t1
* *
ta  t2 tb
* *
tn
(a) Original Workflow

t1
* *
ta  t1n tb
* *
tn
(b) Reduced Workflow
```

### 4. Experiments
We conducted a series of experiments to validate our QoS mining method. Different data mining algorithms were applied to predict the QoS of workflow instances. The results show that our method, particularly when using MultiBoost Naïve Bayes, outperforms previous approaches in terms of prediction accuracy.

### 5. Related Work
Several studies have explored the use of data mining for QoS prediction in workflows. However, our method addresses specific limitations and provides a more flexible and accurate approach.

### 6. Conclusions
This paper presents a novel method for predicting the QoS of workflow instances using data mining algorithms. The method combines path mining, QoS activity models, and workflow QoS estimation to provide more accurate predictions. Our experiments demonstrate the effectiveness of the method, especially when using MultiBoost Naïve Bayes. Future work will focus on further refining the method and exploring additional applications.

---

This revised version of your text is more structured, clear, and professional, with improved coherence and flow.