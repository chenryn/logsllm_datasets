## log4j 配置    
### 作者           
digoal      
### 日期            
2017-01-26      
### 标签      
日志 , java , log4j , 配置           
----            
## 背景      
Log4j是Apache的一个开源项目，通过使用Log4j，可以控制将应用日志信息输送到：  
控制台、文件、GUI组件，甚至是套接口服务器、NT的事件记录器、UNIX Syslog守护进程、数据库等；  
可以控制每一条日志的输出格式；  
通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。  
最令人感兴趣的就是，这些可以通过一个配置文件来灵活地进行配置，而不需要修改应用的代码。  
以下内容取自互联网  
## log4j的配置方法  
### 第一步, jar包  
加入log4j-1.2.8.jar(可以选择log4j的更高版本)到lib下。  
### 第二步, 在CLASSPATH下建立log4j.properties  
内容如下：  
```  
log4j.rootCategory=INFO, stdout , R  
log4j.appender.stdout=org.apache.log4j.ConsoleAppender  
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout  
log4j.appender.stdout.layout.ConversionPattern=[QC] %p [%t] %C.%M(%L) | %m%n  
log4j.appender.R=org.apache.log4j.DailyRollingFileAppender  
log4j.appender.R.File=D:\\Tomcat 5.5\\logs\\qc.log  
log4j.appender.R.layout=org.apache.log4j.PatternLayout  
log4j.appender.R.layout.ConversionPattern=%d-[TS] %p %t %c - %m%n  
log4j.logger.com.neusoft=DEBUG  
log4j.logger.com.opensymphony.oscache=ERROR  
log4j.logger.net.sf.navigator=ERROR  
log4j.logger.org.apache.commons=ERROR  
log4j.logger.org.apache.struts=WARN  
log4j.logger.org.displaytag=ERROR  
log4j.logger.org.springframework=DEBUG  
log4j.logger.com.ibatis.db=WARN  
log4j.logger.org.apache.velocity=FATAL  
log4j.logger.com.canoo.webtest=WARN  
log4j.logger.org.hibernate.ps.PreparedStatementCache=WARN  
log4j.logger.org.hibernate=DEBUG  
log4j.logger.org.logicalcobwebs=WARN  
```  
#### 说明  
1\. log4j.rootCategory=INFO, stdout , R  
将等级为INFO的日志信息输出到stdout和R这两个目的地，stdout和R的定义在下面的代码，可以任意起名。  
等级可分为OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL，如果配置OFF则不打出任何信息，如果配置为INFO则显示INFO、WARN、ERROR的log信息，（即显示自己以及比自己更粗粒度级别的信息）。  
3\. log4j.appender.stdout=org.apache.log4j.ConsoleAppender  
此句log4j.appender定义名为stdout的输出端是哪种类型，可以是  
```  
org.apache.log4j.ConsoleAppender（控制台），  
org.apache.log4j.FileAppender（文件），  
org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件），  
org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件）  
org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）  
```  
输出端可以甚至是数据库，NT2000，EMAIL等  
具体讲解可参照第三部分定义配置文件中的Appender。  
4\. log4j.appender.stdout.layout=org.apache.log4j.PatternLayout  
此句定义名为stdout的输出端的layout是哪种类型，可以是  
```  
org.apache.log4j.HTMLLayout（以HTML表格形式布局），  
org.apache.log4j.PatternLayout（可以灵活地指定布局模式），  
org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），  
org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）  
```  
具体讲解可参照第三部分定义配置文件中的Layout。  
5\. log4j.appender.stdout.layout.ConversionPattern= [QC] %p [%t] %C.%M(%L) | %m%n  
如果使用PatternLayout布局就要指定的打印信息的具体格式ConversionPattern，打印参数如下：  
```  
%m 输出代码中指定的消息；  
%M 输出打印该条日志的方法名；  
%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL；  
%r 输出自应用启动到输出该log信息耗费的毫秒数；  
%c 输出所属的类目，通常就是所在类的全名；  
%t 输出产生该日志事件的线程名；  
%n 输出一个回车换行符，Windows平台为"rn”，Unix平台为"n”；  
%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyyy-MM-dd HH:mm:ss,SSS}，输出类似：2002-10-18 22:10:28,921；  
%l 输出日志事件的发生位置，及在代码中的行数；  
[QC]是log信息的开头，可以为任意字符，一般为项目简称。  
```  
输出的信息举例  
```  
[TS] DEBUG [main] AbstractBeanFactory.getBean(189) | Returning cached instance of singleton bean 'MyAutoProxy'  
```  
具体讲解可参照第三部分定义配置文件中的格式化日志信息。  
7\. log4j.appender.R=org.apache.log4j.DailyRollingFileAppender  
此句与第3行一样。定义名为R的输出端的类型为每天产生一个日志文件。  
8\. log4j.appender.R.File=D:\\Tomcat 5.5\\logs\\qc.log  
此句为定义名为R的输出端的文件名为D:\\Tomcat 5.5\\logs\\qc.log可以自行修改。  
9\. log4j.appender.R.layout=org.apache.log4j.PatternLayout  
与第4行相同。  
10\. log4j.appender.R.layout.ConversionPattern=%d-[TS] %p %t %c - %m%n  
与第5行相同。  
12\. log4j.logger.com.neusoft = DEBUG  
指定com.neusoft包下的所有类的等级为DEBUG。  
可以把com.neusoft改为自己项目所用的包名。  
13\. log4j.logger.com.opensymphony.oscache=ERROR  
14\. log4j.logger.net.sf.navigator=ERROR  
这两句是把com.opensymphony.oscache和net.sf.navigator这两个包下出现的错误的等级设为ERROR，如果项目中没有配置EHCache，则不需要这两句。  
15\. log4j.logger.org.apache.commons=ERROR  
16\. log4j.logger.org.apache.struts=WARN  
这两句是struts的包。  
17\. log4j.logger.org.displaytag=ERROR  
这句是displaytag的包。（QC问题列表页面所用）  
18\. log4j.logger.org.springframework=DEBUG  
此句为Spring的包。  
24\. log4j.logger.org.hibernate.ps.PreparedStatementCache=WARN  
25\. log4j.logger.org.hibernate=DEBUG  
此两句是hibernate的包。  
以上这些包的设置可根据项目的实际情况而自行定制。  
### 第三步, 配置log4j.properties  
### 第四步, 程序中如何使用log4j  
在要输出日志的类中加入相关语句：  
定义属性：static Logger logger = Logger.getLogger(LogDemo.class);   // LogDemo为相关的类  
在相应的方法中：  
```  
if (logger.isDebugEnabled()){  
  logger.debug("System ...");  
}  
```  
## log4j 配置文件详解  
Log4j支持两种配置文件格式，一种是XML（标准通用标记语言下的一个应用）格式的文件，一种是Java特性文件log4j.properties（键=值）。  
下面将介绍使用log4j.properties文件作为配置文件的方法  
### 定义根Logger  
rootLogger 负责处理日志记录的大部分操作。  
其语法为：  
```  
log4j.rootLogger = [ level ] , appenderName, appenderName, ...  
```  
其中，level 是日志记录的优先级，分为OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL或者自定义的级别。  
Log4j建议只使用四个级别，优先级从高到低分别是ERROR、WARN、INFO、DEBUG。通过在这里定义的级别，您可以控制到应用程序中相应级别的日志信息的开关。  
比如在这里定义了INFO级别，只有等于及高于这个级别的才进行处理，则应用程序中所有DEBUG级别的日志信息将不被打印出来。  
ALL: 打印所有的日志，  
OFF: 关闭所有的日志输出。  
appenderName 就是指定日志信息输出到哪个地方。可同时指定多个输出目的地。  
### 定义非根Logger  
```  
log4j.logger.loggerName1 = [ level ], appendName1,…appendNameN  
……  
log4j.logger.loggerNameM = [ level ], appendName1, …appendNameN  
```  
我们可以定义任意个非根记录器。  
### 在代码中调用Logger类  
要取得rootLogger对象可通过Logger.getRootLogger()函数，要取得非rootLogger可通过Logger.getLogger()函数。  
### 配置日志信息输出目的地 Appender  
Appender 负责控制日志记录操作的输出。  
其语法为：  
```  
log4j.appender.appenderName = fully.qualified.name.of.appender.class  
log4j.appender.appenderName.option1 = value1  
…  
log4j.appender.appenderName.optionN = valueN  
```  
这里的appenderName为在log4j.rootLogger里定义的，可任意起名。  
其中，Log4j提供的appender有以下几种：  
```  
org.apache.log4j.ConsoleAppender（控制台），  
org.apache.log4j.FileAppender（文件），  
org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件），  
org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件），可通过log4j.appender.R.MaxFileSize=100KB设置文件大小，还可通过log4j.appender.R.MaxBackupIndex=1设置为保存一个备份文件。  
org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）  
```  
例如：log4j.appender.stdout=org.apache.log4j.ConsoleAppender  
定义一个名为stdout的输出目的地为ConsoleAppender(控制台)。  
### Logger运用在代码中  
1\. 导入所有需的commons-logging类：  
```  
import org.apache.commons.logging.Log;  
import org.apache.commons.logging.LogFactory;  
```  
2\. 在自己的类中定义一个org.apache.commons.logging.Log类的私有静态类成员：  
```  
private final Log log = LogFactory.getLog(getClass());  
```  
LogFactory.getLog()方法的参数使用的是当前类的class。  
3\. 使用org.apache.commons.logging.Log类的成员方法输出日志信息：  