available then
Insert into attributeNames the
attributes of T’ that are subclassOf a
Lookup split/merge attribute rules R
Insert into attributeNames the attributes of
T’ in R mapping to a
tableNames[tableCounter].attributeNames ←
attributeNames
tableCounter ← tableCounter + 1
{Using Complex Mapping Rules }
for each complex mapping rule r that contains T
in Q do
tableNames[tableCounter] ← the SQL query in
r
tableNames[tableCounter].attributeNames ←
mapping attributes in r for those attributes
that are in T and Q
tableCounter ← tableCounter + 1
return (tableNames, attributeNames)
end
perform data translation before sending the results back to
the requestor.
Role Reﬁnement: For our example, let us also assume
that while performing role-translation, role EKF BI (Agent)
gets translated to an equivalent CIA role EKCIA (ﬁeld agent).
If Agent did not have an equivalent CIA role, the mediator
would then look for CIA roles that are subclass of Agent. If
such subclass roles are also not available, then the mediator
would perform a breadth-ﬁrst search down the FBI role-
lattice to identify all subclasses of Agent and rewrites the
subclass-roles with equivalent (preferred) or subclass roles
(if equivalent not available) from the CIA role-lattice. For
subclasses that do not have a mapping role, the search pro-
ceeds further down the role-lattice till there are no further
subclass-roles. The mediator checks each rewritten query
under each of these rewritten roles. If no subclass of Agent
exists that has an equivalent or subclass role in the CIA role-
lattice, the query is rejected. This process of role-reﬁnement
is similar to term-reﬁnement shown in the next section.
Step 4: Semantic Access Control

After a query has been rewritten, PACT checks to verify if
the translated role has the permissions to access the tables
and columns in the rewritten queries. A novelty of PACT
is that it does semantic access control at the mediator. The
advantage is that the queries that are rejected are not sent
to the responder. This aspect of PACT results in the follow-
ing advantages: (1) Increased throughput because rejected
queries are rejected early. (2) Reduced network traﬃc due
to some queries not being forwarded to the responder. (3)
Reduced denial-of-service attacks because only valid queries
are forwarded to the responder. (4) Reduced processing load
at the responder.
A main security concern in developing this access con-
trol scheme is whether it will violate our trust assumptions.
The level of trust we assume in the mediator w.r.t metadata
management and the level of trust we assume in the me-
diator w.r.t access control enforcement must be consistent,
otherwise our claim that PACT greatly reduces the trust
requirements on the mediator will not hold. To make our
trust assumptions consistent, we have done the following:
• We do not trust that the mediator will always pre-
serve the privacy and conﬁdentiality of metadata. Cor-
respondingly, we do not trust that the mediator will
always preserve the privacy and conﬁdentiality of ac-
cess control policies. To achieve this aspect of consis-
tency, (a) PACT lets the mediator use encrypted access
control policies to do access control without knowing
anything about the policies. The mediator does not
know the encryption key used by the responder to
“distribute” her policy to the mediator. (b) Due to
schema obfuscation, the mediator does not have the
actual schema terms in the access control table.
• We assume that the mediator will not purposely cor-
rupt the encrypted ontology mapping table or the role
mapping table (unless it is broken). Correspondingly,
we assume the mediator will not purposely corrupt the
encrypted access control policies.
• We assume that the mediator will not purposely dis-
tort the term mapping and query rewriting process
(unless it is broken). Correspondingly, we assume the
mediator will not collude with any organization A to
get unauthorized access of data owned by organiza-
tion B. Nevertheless, we assume that the mediator
may abuse the way it enforces access control so that
it can infer more information about the metadata of
an organization. It should be noticed that the above
assumption is not unrealistic, and such assumptions
are often made in secure protocols that involve a third
party (For example, in fair exhange protocols a semi-
trusted thrid party can do bad things but he does not
collude with any other parties). To protect organiza-
tions from mediator abuses, (1) PACT suggests the
responder to selectively double-check the authorities
of an incoming query. (2) PACT suggests auditing at
each end. Both methods can eﬀectively detect media-
tor abuses and greatly discourage the mediator to do
“bad” things. For example, when a query does not
pass authority double-checking, we know the mediator
probably did something bad. Finally, note that au-
diting is a standard thing that every organization will
usually do no matter it will help detect mediator mis-
ues or not. Also note that selective double-checking
of authorities is a light-weight procedure, especially
when the responder is able to tolerate a small amount
of conﬁdentiality/privacy loss.
As indicated above, due to schema obfuscation, the me-
diator does not have the actual access control table from
the responding database. Instead it has an access control
table where the objects are the synonyms of the table or col-
umn names from the database, and the roles are the equiva-
lent roles from the role-hierarchy used in the database. We
refer such an access control table as the semantic access
control table. For example, say, CIA’s database-ontology
mapping table indicates that the ontology term staﬀ is syn-
onymous to the database table-name adminpersonnel. Also,
the corresponding role-table indicates the ontology role ﬁeld-
agent is synonymous with the database role secretagent. Let
the role-privilege assignment table in the database initially
contain the entry (secretagent, pi(adminpersonnel, select,
+)) indicating that the secretagent has select access to the
table adminpersonnel. The semantic authorization table
constructed and encrypted by CIA, and made available to
the mediator will contain the semantically equivalent en-
try (EKCIA (ﬁeldagent), pi(EKCIA (staﬀ), select, +)), which
means that EKCIA (ﬁeldagent) has read access to the at-
tributes EKCIA (pay), EKCIA (ﬁrstName), and EKCIA (last-
Name) of the table EKCIA (staﬀ). So the second rewritten
query shown in Step 3 can be provided access. Upon suc-
cessful access control check, the mediator forwards the query
to the responder 7.
Now, let us assume that the responder does not allow
access to the EKCIA (manager) table for an user with the
role EKCIA (ﬁeldagent). The mediator will then perform a
breadth-ﬁrst search on the CIA ontology to identify subClass-
es of EKCIA (manager) and check to see if the role EKCIA (ﬁeld-
agent) has access to them. If the access-control check suc-
ceeds for one or more subclasses, the search stops checking
the subtree of these subclasses anymore. All queries for
which the access control check succeeded are forwarded to
the responder. Say, EKCIA (manager) has two subclasses,
EKCIA (ﬁrstLevelManager) and EKCIA (ExecutiveManager)
and the access-control table allows EKCIA (ﬁeldagent) to ac-
cess the table EKCIA (ﬁrstLevelManager) but not
EKCIA (ExecutiveManager). The mediator will reﬁne the
ﬁrst rewritten query to:
select Merge(EKCIA (ﬁrstName), EKCIA (lastName)),
DollarToEuro(EKCIA (comp)) from EKCIA (ﬁrstLevelManager)
where EKCIA (comp) > EuroToDollar(EKs (70000));
Assuming that the attribute names are the same in the ta-
bles EKCIA (ﬁrstLevelManager) and EKCIA (manager) and
sends it to the responder. The mediator continues walking
down the subclass-hierarchy of the term EKCIA (Executive-
Manager). If there are no more subclasses of EKCIA (Executive-
Manager), the query reﬁnement process is complete.
For the complex ontology-mapping rules, PACT replaces
each table in the query by the SQL query given in the com-
plex mapping rule and the attributes in that table are re-
placed using the attribute mapping rules associated with the
complex mapping rule.
Example 3. Consider the query:
select EKF BI (name), EKF BI (Mk) from EKF BI (employee),
7See [15] for more details about our semantic access control
scheme.
EKF BI (LuxuryCar) where EKF BI (employee.VehID) =
EKF BI (LuxuryCar.VehID);
Using the complex mapping shown in Example 1, and the
binary mappings used to rewrite Example 2, PACT will
rewrite this query to the following query:
select Merge(EKCIA (ﬁrstName), EKCIA (lastName)),
EKCIA (Make) from EKCIA (managers), EKCIA (Car),
EKCIA (Prices) where EKCIA (managers.VehID) =
EKCIA (Car.VehID) and EKCIA (Car.ID) = EKCIA (Prices.ID)
and EKCIA (Prices).EKCIA (Price) > DollarToEuro(40,000);
Note that this query is obtained by replacing FBI.employee
by its subClass CIA.managers and by replacing FBI.LuxuryCar
by the SQL query in its complex rule in Example 1. A simi-
lar query is obtained by replacing FBI.employee by its other
subClass CIA.staﬀ.
After the mediator rewrites the query and the roles and
tries all possible reﬁnements of the query by walking down
the ontology tree, if the process fails to ﬁnd an equivalent
or contained query that is accessible to the given role, the
query is not forwarded to the responder and sent back to
the requestor with an error message indicating that access
was denied.
If a table or an attribute in a where clause
does not have a mapping table in the responder, the query
is rejected. If an attribute whose values are being selected
does not have a mapping attribute in the responder, that
attribute is dropped from the rewritten query and the rest
of the query is forwarded to the responder. The mediator
assigns an unique identiﬁer to each rewritten query. For each
rewritten query, the mediator sends an (identiﬁer, bitmap)
pair to the requestor. The bitmap indicates which attributes
of the original query were dropped in the rewritten queries.
Step 5: Semantic to Syntactic Query Translation
At the responder, a semantic query is translated to a syntac-
tic query by replacing ontology terms in the query with their
equivalent terms that appear in the responder’s database.
For example, as indicated above, if the CIA database con-
tains a table named adminpersonnel (equivalent to the ontol-
ogy term staﬀ) that has database attributes fname, lname,
and compensation equivalent to the ontology terms ﬁrst-
Name, lastName, and pay respectively, then the query:
select Merge(EKCIA (ﬁrstName), EKCIA (lastName)),
DollarToEuro(EKCIA (pay)) from EKCIA (staﬀ) where
EKCIA (pay) > EuroToDollar(EKs (70000));
is decrypted and translated to:
select Merge(fname,lname), DollarToEuro(compensation)
from adminpersonnel where compensation > EuroToDol-
lar(70000);
Here, in order to preserve the simplicity of the example, we
showed one-to-one binary mappings between database terms
and ontology terms. However, PACT does not require the
mappings between database terms and ontology terms to be
one-to-one. In general, the database-ontology mappings can
be any of the four types of mappings used by the mediator.
However, note that if there are no database tables equivalent
to the ontology tables, and instead we use database table
terms that are subClassOf the ontology tables, the rewritten
query is not equivalent to the original query but is contained
in the original query.
Step 6: Query Evaluation. The query is then evaluated
at the database and the results returned to the requestor.

Step 7: Returning the Results.
The results of the
query are sent back to the requestor after the data is trans-
lated using the split-merge attribute rules and the conver-
sion functions. The data is sent back directly from the re-
sponder to the requestor bypassing the mediator. Conse-
quently, the result of a query needs to be reformulated into
the schema of the requestor before the results can be sent
back to the requestor 8. As shown above, the mediator sent
the responder a query attached with hints on how to refor-
mulate the data results using the merge/split attribute rules
and data conversion functions. The responder applies the
Merge function to merge the attribute values of the columns
ﬁrstName and lastName and the function DollarToEuro to
the columns pay and comp respectively from the two tables
before sending out the results to the requestor.
We chose to send the data back via a secure and direct
data channel because this choice provides maximum secu-
rity. If all data goes via the mediator, the mediator becomes
a bottleneck. Besides, any intruder who is able to record the
history of all communication with the mediator or capture
the mediator can infer characteristics of the data. Having
separate secure data channels reduces the chances of such
intrusion and avoids the capture of all the data by compro-
mising one channel or one entity.
4.3 Correctness and Maintenance Issues
Soundness & completeness: The mediation algorithm
(i.e., Algorithm 1) attempts to ﬁnd all answers to the query
posed by the end-user. If it fails to ﬁnd an equivalent an-
swer, the algorithm derives the maximally contained set of
answers that are available.
Theorem 4.1. Given a query Q and target information
sources T, the Mediator Algorithm used by PACT generates
a sound and complete set of answers to Q for which the user
posing Q has access permissions at any source in T.
Due to lack of space, we omit the proof of the theorem.
Maintenance: Here, we address the overhead implied by
metadata updates, when an update to the database schema
or roles occurs. First, PACT works seamlessly in the pres-
ence of changes to data because PACT does not materialize
any views at the mediator. Second, when an element is
removed from the database schema, no update to the en-
crypted ontology mapping table or the ontologies (used by
the Mediator) is needed.
Third, when a new element is added to the database
schema, if the ontology mapping table only contains the syn-
onyms of schema terms, the corresponding term (of the new
element) needs to be added to the table. Nevertheless, to
add this new term, light-weight incremental maintenance
is enough (in both automated ways and semi-automated
ways), and we do not need to redo the whole ontology-
matching process. Moreover, to achieve more obfuscation,
people may want to put additional term-mapping rules be-
yond schema terms into the ontology mapping table. In this
case, if the new schema element is already covered by the
additional term-mapping rules, no maintenance is needed.
Fourth, changes to the access-control policy at an infor-
mation source mandates updates at the mediator but we
expect such changes to be fewer than changes to the data
and the schema of information sources. Finally, note that
8Note that in Step 3 the mediator already compiled the
matched terms into the results’ schema (see Figure 1.).
an organization may periodically refresh her master key for
more privacy.
5. SECURITY AND PRIVACY ANALYSIS
In this section, we analyze the extent to which PACT can
protect the privacy & conﬁdentiality of metadata. Since
both privacy and conﬁdentiality of metadata are threatened
by the attempts or attacks to infer the encrypted metadata
stored on a mediator, we do the analysis in an uniform way.
(Note that we have already investigated whether PACT’s
semantic access control scheme can allow unauthorized ac-
cesses in [15]).
[High sensitivity] the data schemas;
We assume the attacker’s goal is to infer 4 types of in-
formation:
[Medium
sensitivity] the access control policies; [Low sensitivity] the
ontology and role hierarchy of each organization. We also
assume the attacker uses a dictionary of size N to infer the
above information.
Accordingly, we are interested in 3 representative types of
inference attacks: [Mode A: ] The attacker breaks into the
Mediator without any prior knowledge about the two orga-
nizations. [Mode B: ] The attacker breaks into the Mediator
with a history (log) of the queries mediated by the Mediator
some prior knowledge about the two organizations.
[Mode
C: ] Besides Mode B, the attacker breaks into one of the two
organizations as well. Note that the case where the Media-
tor infers the 4 types of sensitive information is equivalent
to Mode A.
In the following, we show that PACT can provide very
good privacy. For simplicity, we assume the attacker’s dic-
tionary contains every term embedded in the 4 types of
metadata together with many other terms.
Mode A. In Mode A, since no key is known by the Me-
diator and no key is used during any mediation procedure
– we assume a secure key distribution protocol is used –
decrypting the 4 types of metadata stored on the Mediator
is almost impossible. Since the attacker does not have any
prior knowledge about the two organizations, he can only
rely on his dictionary.
First, one possible inference attack is to exploit the equi-
valentClass and subClassOf relations among encrypted
concepts to infer an ontology. Although concepts are en-
crypted in every ontology, their relationships are not. Hence,
a graph with the encrypted concepts as a node and the
equivalentClass and subClassOf relationships as an edge
can be constructed for one ontology or two ontologies “con-
nected” by a mapping table. Similarly, such graphs can be
constructed among the cleartext concepts in the attacker’s