pered the adoption of these systems. BackFi and other WiFi
backscatter systems [27] use ambient WiFi signals for com-
municating backscatter data, hence deployment is easier.
BackFi is also related to recent work on ambient backscat-
ter communication [28, 34] that enables two RF powered
devices to communicate with each other. However these
systems do not provide connectivity to the Internet which
is BackFi’s primary focus. BackFi is also related but com-
plementary to recent work on harvesting power from RF
sources such as TV signals [28, 48, 30], cellular transmis-
sions [33] and WiFi [27, 21, 25, 32]. These systems have
demonstrated the ability to harvest around 60−100µW from
ambient sources such as TV signals [46, 51, 44, 29] which
is sufﬁcient power to provide a high throughput battery-less
IoT sensor. Hence with BackFi’s high throughput, long range,
and low power WiFi backscatter connectivity combined with
the ability to harvest power from ubiquitous RF sources, we
believe we are closer to the vision of RF powered, battery-
less IoT sensors ubiquitously deployed and connected to the
Internet.
based backscatter systems too. The reason is that the silent
mode of BackFi eliminates all the backscattered signal by
the rest of the environment (including the structural mode of
antenna). This allows use of the information on the tone (ex-
citation signal) for decoding, instead of nulling it as in most
RFID decoders.
Effective backscatter protocol: BackFi presents a protocol
for backscatter devices which allows an efﬁcient decoding
for backscatter system. For high order modulation, this de-
sign choice becomes imperative to provide good throughput
and SNR.
Spectral Efﬁciency: BackFi presents a high throughput sys-
tem by piggybacking on the existing data signaling like WiFi
or Bluetooth. BackFi capability to reuse existing signaling
makes it spectrally efﬁcient and easy to seamlessly deploy.
Moreover, since WiFi can be deployed in 900 MHz band
too, deploying BackFi is much more effective than deploy-
ing RFID readers.
3. OVERVIEW
BackFi’s basic mode of operation is shown in Fig. 1. A
BackFi capable WiFi AP transmits a WiFi packet to a stan-
dard WiFi client. The IoT device with the BackFi tag backscat-
ters the WiFi transmission back to the WiFi AP, and modu-
lates its data on the backscatter signal. The AP decodes the
backscatter signal to recover the data from the IoT gadget.
At a high level, the above description also applies to a
RFID reader and RFID tag. So why can’t we just reuse the
RFID design to build WiFi backscatter systems? We argue
why but start with a brief primer on standard RFID backscat-
ter ﬁrst.
3.1 How does traditional RFID work?
In traditional RFID systems, communication happens by
the reader ﬁrst transmitting an excitation signal which is typ-
ically a single frequency tone (a sinusoid) in the 900 MHz
band. The tag receives this excitation signal and then backscat-
ters (reﬂects) it after appropriately modifying the phase of
the excitation signal. The data that the tag wishes to trans-
mit is modulated on these phase changes. The tag design at
a conceptual level is very simple, it is an antenna connected
to an array of switches which are turned on and off appropri-
ately to control the phase of the reﬂected signal from the tag.
The array of switches is controlled by logic that reads the in-
formation bits, and computes the on-off routine that needs to
be implemented on the switch to create the phase difference
that encodes the information bits. The backscattered signal
is then received by the reader whose goal is then to demodu-
late the signal by ﬁrst detecting the phase changes introduced
by the tag and then recovering the original data. The design
of the tag is fairly standard and is not the focus of this paper,
we refer the reader to a large body of literature [49, 30] on
the circuit level details of implementing tags.
It is useful to construct a model of the signal that the
reader receives after the tag backscatters the signal. If x(t) is
the excitation signal transmitted by the reader, it undergoes
four distortions before it arrives back at the reader again af-
ter reﬂections and backscatter. First, the signal gets reﬂected
285by objects in the environment other than the RFID tag and
arrives back at the reader, we model this environmental dis-
tortion as henv. The other portion of the signal is the one that
ﬁrst goes to the tag, has its phase changed to modulate data,
and then comes back to the reader, i.e, the backscatter signal.
We represent the forward channel between the reader and
tag as hf , the phase modulation at the tag is simply a mul-
tiplication of the received signal by ejθ(t) and the backward
channel is represented by hb. The phase θ(t) is changed at
the tag according to the data that is being modulated, for ex-
ample, if DQPSK is being used, the phase w.r.t. the previous
symbols phase is shifted by the appropriate multiple of 90
degrees. Note that θ(t) is changing at the rate of the symbol
period at the tag. So the overall signal received back at the
reader is given by:
yrx(t) = x(t) ∗ henv(t)
+{(x(t) ∗ hf (t)).ejθ(t)} ∗ hb(t)
(cid:124)
(cid:123)(cid:122)
(cid:125)
(cid:124)
(cid:123)(cid:122)
(cid:125)
environment
backscatter
(1)
The goal for the reader of course is to estimate θ(t) and thus
demodulate the tag data. As the above equation shows, there
are two challenges in accomplishing that. First is the envi-
ronmental term; it contains no useful information and there-
fore acts as interference. This self-interference (because its
generated by the reader’s own transmission) is likely quite
strong relative to the backscatter signal because it consists
of direct leakage from the reader’s transmitter to the receiver
as well as reﬂections from nearby objects. In many cases,
the self-interference and the backscatter signal can be sep-
arated by more than the dynamic range of the reader’s re-
ceiver chain, which would end up completely drowning the
backscatter signal. Second, if the environmental interference
can be eliminated, the challenge is to estimate hf and hb, and
then given that we know x(t) it is simple to recover θ(t) and
demodulate the tag data. The above two challenges are true
for any backscatter system, we describe how current RFID
systems handle them and why we cannot use that design for
BackFi next.
3.1.1 Decoding Standard RFID Backscatter
In standard RFID based backscatter, the excitation signal
is a sinusoid. So x(t) in the above equation is ejωct, where
ωc = 2πfc is angular frequency and fc is the carrier fre-
quency (typically in the 900MHz ISM band). This simple
fact ends up making both the interference cancellation and
demodulation problem easier.
First, self-interference cancellation is simple because with
a tone as the excitation signal, the interference term x(t) ∗
henv(t) is simpliﬁed to Henv(ωc)ejωct, where Henv(ωc) is
the frequency domain channel response corresponding to henv(t)
and is evaluated at the tone frequency ωc. In other words the
original excitation signal is modiﬁed by a single complex
number, essentially a single attenuation value and a phase
shift. This is a special property of sinusoidal inputs to LTI
channels, convolution simply becomes multiplication with
the frequency domain channel response’s value at the tone’s
frequency for tone inputs. This simpliﬁcation does not apply
to wideband signals such as WiFi. Hence to implement in-
terference cancellation, all we need is a tunable phase shifter
and attenuator, which is programmed dynamically to emu-
late Henv(ωc). The cancellation circuit would get a copy
of the transmitted excitation signal as input, pass it through
the phase shifter and attenuator which have been tuned to
∠Henv(ωc) and |Henv(ωc)| respectively. Finally, the design
subtracts it from the received signal at the reader to eliminate
the self-interference. Note that this is a well known tech-
nique and is implemented in commercial readers today [15,
5].
Similarly, recovering ejθ(t) becomes easy because x(t) is
a simple tone. To see why consider the following mathemat-
ical simpliﬁcation after substituting x(t) with a tone, ejωct:
{(x(t)∗hf (t))ejθ(t)}∗hb(t) = Hf (ωc){ejωctejθ(t)}∗hb(t)
Further simpliﬁcation happens after down-conversion to
baseband at the reader:
ytag(t) = Hf (ωc)hb(t) ∗ ejθ(t),
(2)
which is a standard decoding problem on a linear time in-
variant system with channel Hf (ωc)hb(t) and input ejθ(t).
Hence standard phase demodulation and decoding techniques [38]
can be applied to recover the original phase modulated data.
3.2 Why can’t we reuse the above design
for BackFi?
The key difference between BackFi and conventional RFID
backscatter is that BackFi aims to use standard WiFi signals
as the excitation signal. So none of the above simpliﬁca-
tions that came about because the excitation signal was a
simple tone apply. In fact the self-interference cancellation
and demodulation problems become signiﬁcantly harder as
we show below.
First, self-interference cancellation now has to eliminate a
relatively wider band signal, not just a tone. The implication
is that the self-interference cannot be modeled as a simple
attenuation and phase shift applied to the original excitation
signal. For WiFi signals that typically span 20-40 MHz or
even more wider bandwidths, the frequency domain repre-
sentation of the distortion introduced by the environment,
henv is quite frequency selective. The practical implication
is that a simple cancellation circuit that uses a programmable
attenuator and phase shifter is not enough to cancel, in fact
we need more sophisticated designs that can model the atten-
uation and phase shifts that happen over the entire bandwidth
of the WiFi signal. Hence the traditional reader design for
eliminating self-interference doesn’t apply.
Second, and more importantly, the decoding problem no
longer reduces to a standard demodulation problem at the
reader like it did with a tone. To see why, the reader is now
trying to recover the phase θ(t) from the following received
signal at the reader after down-conversion:
ytag(t) = (ejωctx(t) ∗ hf (t)).ejθ(t)} ∗ hb(t)
(3)
The above equation represents a time variant channel that
transports the input ejθ(t) into the output ytag(t), and the in-
formation that we are trying to decode is buried inside this
time variant channel. The reason the channel term is time
286varying is because the WiFi signal x(t) is also acting as a
channel distortion that is modifying ejθ(t). Consequently
standard decoding techniques designed for linear time in-
variant systems cannot be applied.
The main contributions of this paper are the design of self-
interference cancellation and decoding techniques that can
work when WiFi signals are used for backscatter. We also
describe how BackFi ensures that it does not interfere with
standard WiFi communication which the WiFi signal was
originally created for.
4. DESIGN
BackFi uses ambient WiFi transmissions that are being
sent by a WiFi AP to a standard WiFi client as the excita-
tion signal. The tag receives the WiFi signal, modulates data
on the received WiFi signal, and backscatters the signal to
the AP. The architectural design of the BackFi tag is shown
in Fig. 2. IoT sensor consists of BackFi tag and a sensor
populating the data in the tag data memory unit.
4.1 The BackFi Link Layer Protocol
First, we describe how a BackFi AP activates and gets a
BackFi tag to backscatter information. The protocol pro-
ceeds in two stages as described below.
How is the tag activated?
Whenever a BackFi AP transmits, if it is willing to receive
backscatter communication, it follows a special protocol be-
fore transmitting the WiFi packet. Speciﬁcally, like in prior
work [27], it transmits a CTS_to_SELF packet to force other
WiFi devices to keep silent. Next it transmits a series of
short pulses to encode a pseudo-random preamble sequence.
If the preamble bit is one, then a pulse is transmitted and if
its zero, no pulse is transmitted. The preamble is 16 bits long
and each bit period lasts for a 1 µs. The preamble is meant to
be the signal to the BackFi tag that the BackFi AP is willing
to listen to backscatter transmissions. Note that a preamble
can be unique to a particular BackFi tag that is connected to
this BackFi AP and can be used to select which BackFi tag
gets to backscatter at that instant. In such cases, a tag only
backscatters when it detects the preamble meant for it.
A BackFi tag by default is in an energy saving sleep mode
if it has no data to transmit. If it has sufﬁcient data to trans-
mit (potentially after a sensor has collected enough data), the
tag wakes up and listens for its preamble from the BackFi
AP. To listen and detect the preamble, the tag uses an energy
efﬁcient detector circuit. To build our preamble detector we
leverage a large body of work done in low power wake up
radio design [40, 18, 36, 37]. These detectors work at power
consumption between 98nW [40] to 7.5 µW [18], and can
detect input signals with power between −41 dBm and −56