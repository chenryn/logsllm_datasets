feature test macro requirements for glibc (see
.br feature_test_macros (7)):
.re
.pp
.nf
.br log1p ():
    _isoc99_source || _posix_c_source >= 200112l
        || _xopen_source >= 500
.\"    || _xopen_source && _xopen_source_extended
        || /* since glibc 2.19: */ _default_source
        || /* glibc = 200112l
        || /* since glibc 2.19: */ _default_source
        || /* glibc 
.\"
.\" %%%license_start(gplv2_misc)
.\" this copyrighted material is made available to anyone wishing to use,
.\" modify, copy, or redistribute it subject to the terms and conditions of the
.\" gnu general public license v.2.
.\"
.\" this program is distributed in the hope that it will be useful, but without
.\" any warranty; without even the implied warranty of merchantability or
.\" fitness for a particular purpose. see the gnu general public license for
.\" more details.
.\"
.\" you should have received a copy of the gnu general public
.\" license along with this manual; if not, see
.\" .
.\" %%%license_end
.\"
.th gai.conf 5 2020-06-09 "linux" "linux programmer's manual"
.sh name
gai.conf \- getaddrinfo(3) configuration file
.sh description
a call to
.br getaddrinfo (3)
might return multiple answers.
according to rfc\ 3484 these answers must be sorted so that
the answer with the highest success rate is first in the list.
the rfc provides an algorithm for the sorting.
the static rules are not always adequate, though.
for this reason,
the rfc also requires that system administrators should have the possibility
to dynamically change the sorting.
for the glibc implementation, this can be achieved with the
.i /etc/gai.conf
file.
.pp
each line in the configuration file consists of a keyword and its parameters.
white spaces in any place are ignored.
lines starting with \(aq#\(aq are comments and are ignored.
.pp
the keywords currently recognized are:
.tp
\fblabel\fr \finetmask\fr \fiprecedence\fr
the value is added to the label table used in the rfc\ 3484 sorting.
if any \fblabel\fr definition is present in the configuration file,
the default table is not used.
all the label definitions
of the default table which are to be maintained have to be duplicated.
following the keyword,
the line has to contain a network mask and a precedence value.
.tp
\fbprecedence\fr \finetmask\fr \fiprecedence\fr
this keyword is similar to \fblabel\fr, but instead the value is added
to the precedence table as specified in rfc\ 3484.
once again, the
presence of a single \fbprecedence\fr line in the configuration file
causes the default table to not be used.
.tp
\fbreload\fr 
this keyword controls whether a process checks whether the configuration
file has been changed since the last time it was read.
if the value is
"\fbyes\fr", the file is reread.
this might cause problems in multithreaded
applications and is generally a bad idea.
the default is "\fbno\fr".
.tp
\fbscopev4\fr \fimask\fr \fivalue\fr
add another rule to the rfc\ 3484 scope table for ipv4 address.
by default, the scope ids described in section 3.2 in rfc\ 3438 are used.
changing these defaults should hardly ever be necessary.
.sh files
\fi/etc/gai.conf\fr
.sh versions
the
.i gai.conf
.\" added in 2006
file is supported by glibc since version 2.5.
.sh examples
the default table according to rfc\ 3484 would be specified with the
following configuration file:
.pp
.in +4n
.ex
label  ::1/128       0
label  ::/0          1
label  2002::/16     2
label ::/96          3
label ::ffff:0:0/96  4
precedence  ::1/128       50
precedence  ::/0          40
precedence  2002::/16     30
precedence ::/96          20
precedence ::ffff:0:0/96  10
.ee
.in
.\" .sh author
.\" ulrich drepper 
.\"
.sh see also
.br getaddrinfo (3),
rfc\ 3484
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright 2002 walter harms 
.\" and andries brouwer .
.\"
.\" %%%license_start(gpl_noversion_oneline)
.\" distributed under gpl
.\" %%%license_end
.\"
.th ioctl_tty 2 2021-08-27 "linux" "linux programmer's manual"
.sh name
ioctl_tty \- ioctls for terminals and serial lines
.sh synopsis
.nf
.b #include 
.br "#include " "      /* definition of " clocal ", and"
.br    "                             tc*" { flush , on , off "} constants */"
.pp
.bi "int ioctl(int " fd ", int " cmd ", ...);"
.fi
.sh description
the
.br ioctl (2)
call for terminals and serial ports accepts many possible command arguments.
most require a third argument, of varying type, here called
.i argp
or
.ir arg .
.pp
use of
.br ioctl ()
makes for nonportable programs.
use the posix interface described in
.br termios (3)
whenever possible.
.ss get and set terminal attributes
.tp
.b tcgets
argument:
.bi "struct termios *" argp
.ip
equivalent to
.ir "tcgetattr(fd, argp)" .
.ip
get the current serial port settings.
.tp
.b tcsets
argument:
.bi "const struct termios *" argp
.ip
equivalent to
.ir "tcsetattr(fd, tcsanow, argp)" .
.ip
set the current serial port settings.
.tp
.b tcsetsw
argument:
.bi "const struct termios *" argp
.ip
equivalent to
.ir "tcsetattr(fd, tcsadrain, argp)" .
.ip
allow the output buffer to drain, and
set the current serial port settings.
.tp
.b tcsetsf
argument:
.bi "const struct termios *" argp
.ip
equivalent to
.ir "tcsetattr(fd, tcsaflush, argp)" .
.ip
allow the output buffer to drain, discard pending input, and
set the current serial port settings.
.pp
the following four ioctls, added in linux 2.6.20,
.\" commit 64bb6c5e1ddcd47c951740485026ef08975ee2e6
.\" commit 592ee3a5e5e2a981ef2829a0380093006d045661
are just like
.br tcgets ,
.br tcsets ,
.br tcsetsw ,
.br tcsetsf ,
except that they take a
.i "struct termios2\ *"
instead of a
.ir "struct termios\ *" .
if the structure member
.b c_cflag
contains the flag
.br bother ,
then the baud rate is stored in the structure members
.b c_ispeed
and
.b c_ospeed
as integer values.
these ioctls are not supported on all architectures.
.rs
.ts
lb l.
tcgets2	\fbstruct termios2 *\fpargp
tcsets2	\fbconst struct termios2 *\fpargp
tcsetsw2	\fbconst struct termios2 *\fpargp
tcsetsf2	\fbconst struct termios2 *\fpargp
.te
.re
.pp
the following four ioctls are just like
.br tcgets ,
.br tcsets ,
.br tcsetsw ,
.br tcsetsf ,
except that they take a
.i "struct termio\ *"
instead of a
.ir "struct termios\ *" .
.rs
.ts
lb l.
tcgeta	\fbstruct termio *\fpargp
tcseta	\fbconst struct termio *\fpargp
tcsetaw	\fbconst struct termio *\fpargp
tcsetaf	\fbconst struct termio *\fpargp
.te
.re
.ss locking the termios structure
the
.i termios
structure of a terminal can be locked.
the lock is itself a
.i termios
structure, with nonzero bits or fields indicating a
locked value.
.tp
.b tiocglcktrmios
argument:
.bi "struct termios *" argp
.ip
gets the locking status of the
.i termios
structure of the terminal.
.tp
.b tiocslcktrmios
argument:
.bi "const struct termios *" argp
.ip
sets the locking status of the
.i termios
structure of the terminal.
only a process with the
.br cap_sys_admin
capability can do this.
.ss get and set window size
window sizes are kept in the kernel, but not used by the kernel
(except in the case of virtual consoles, where the kernel will
update the window size when the size of the virtual console changes,
for example, by loading a new font).
.tp
.b tiocgwinsz
argument:
.bi "struct winsize *" argp
.ip
get window size.
.tp
.b tiocswinsz
argument:
.bi "const struct winsize *" argp
.ip
set window size.
.pp
the struct used by these ioctls is defined as
.pp
.in +4n
.ex
struct winsize {
    unsigned short ws_row;
    unsigned short ws_col;
    unsigned short ws_xpixel;   /* unused */
    unsigned short ws_ypixel;   /* unused */
};
.ee
.in
.pp
when the window size changes, a
.b sigwinch
signal is sent to the
foreground process group.
.ss sending a break
.tp
.b tcsbrk
argument:
.bi "int " arg
.ip
equivalent to
.ir "tcsendbreak(fd, arg)" .
.ip
if the terminal is using asynchronous serial data transmission, and
.i arg
is zero, then send a break (a stream of zero bits) for between
0.25 and 0.5 seconds.
if the terminal is not using asynchronous
serial data transmission, then either a break is sent, or the function
returns without doing anything.
when
.i arg
is nonzero, nobody knows what will happen.
.ip
(svr4, unixware, solaris, and linux treat
.i "tcsendbreak(fd,arg)"
with nonzero
.i arg
like
.ir "tcdrain(fd)" .
sunos treats
.i arg
as a multiplier, and sends a stream of bits
.i arg
times as long as done for zero
.ir arg .
dg/ux and aix treat
.i arg
(when nonzero) as a time interval measured in milliseconds.
hp-ux ignores
.ir arg .)
.tp
.b tcsbrkp
argument:
.bi "int " arg
.ip
so-called "posix version" of
.br tcsbrk .
it treats nonzero
.i arg
as a time interval measured in deciseconds, and does nothing
when the driver does not support breaks.
.tp
.b tiocsbrk
argument:
.bi "void"
.ip
turn break on, that is, start sending zero bits.
.tp
.b tioccbrk
argument:
.bi "void"
.ip
turn break off, that is, stop sending zero bits.
.ss software flow control
.tp
.b tcxonc
argument:
.bi "int " arg
.ip
equivalent to
.ir "tcflow(fd, arg)" .
.ip
see
.br tcflow (3)
for the argument values
.br tcooff ,
.br tcoon ,
.br tcioff ,
.br tcion .
.ss buffer count and flushing
.tp
.bi fionread
argument:
.bi "int *" argp
.ip
get the number of bytes in the input buffer.
.tp
.b tiocinq
argument:
.bi "int *" argp
.ip
same as
.br fionread .
.tp
.b tiocoutq
argument:
.bi "int *" argp
.ip
get the number of bytes in the output buffer.
.tp
.b tcflsh
argument:
.bi "int " arg
.ip
equivalent to
.ir "tcflush(fd, arg)" .
.ip
see
.br tcflush (3)
for the argument values
.br tciflush ,
.br tcoflush ,
.br tcioflush .
.ss faking input
.tp
.b tiocsti
argument:
.bi "const char *" argp
.ip
insert the given byte in the input queue.
.ss redirecting console output
.tp
.b tioccons