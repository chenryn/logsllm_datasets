---
author: Seth Kenlon
category: 软件开发
comments_data:
- date: '2020-11-25 11:25:28'
  message: 思维也很重要呀
  postip: 60.191.148.247
  username: 来自浙江台州的 Chrome 86.0|Windows 10 用户
count:
  commentnum: 1
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 7587
date: '2020-11-19 22:59:35'
editorchoice: false
excerpt: 只需一点编程经验，你就可以在短短几天内（有时更少）学会一种新编程语言。
fromurl: https://opensource.com/article/20/10/learn-any-programming-language
id: 12842
islctt: true
largepic: /data/attachment/album/202011/19/225851j7miw3kd17joowa7.jpg
permalink: /article-12842-1.html
pic: /data/attachment/album/202011/19/225851j7miw3kd17joowa7.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lujun9972
summary: 只需一点编程经验，你就可以在短短几天内（有时更少）学会一种新编程语言。
tags:
- 编程语言
thumb: false
title: 五步学会任何编程语言
titlepic: true
translator: xiao-song-123
updated: '2020-11-19 22:59:35'
---
> 
> 只需一点编程经验，你就可以在短短几天内（有时更少）学会一种新编程语言。
> 
> 
> 
![](/data/attachment/album/202011/19/225851j7miw3kd17joowa7.jpg)
有些人喜欢学习新的编程语言，也有一些人觉得学习一种都是可望不可及的事情。在本文中，我将向你展示如何像程序员一样思考，这样你就可以自信地学习任何一门你想要学习的编程语言。
事实上，一旦你学会了如何编程，你使用的编程语言就不再是一个障碍，而更像是一种形式。实际上，这就是教育家们倡导 [让孩子尽早学习编程](https://opensource.com/article/20/9/scratch) 的众多原因之一。不管他们的入门语言有多简单，这种编程的逻辑和儿童们（或成人学习者）以后可能遇到的其他语言的逻辑有着想通之处。
只需有一点编程经验（你可以从我们这里的几篇介绍性文章中获得），你就可以在短短几天内（有时更短）学习任何编程语言。这并不是魔法，你也确实要为此付出一些努力。诚然，学习一种编程语言每个的可用库，或者学习打包代码以及进行交付的细微差别，需要的时间远远不止几天。但是，就入门来说，比你想像中的要容易许多，剩下的则要通过不断练习来完成。
当有经验的程序员静下心来学习一门新的编程语言时，他们会寻找五样东西。只要你知道了这五件事，你就可以开始编码了。
### 1、语法
![Syntax](/data/attachment/album/202011/19/230020xjiui6jonjnedwo4.png "Syntax")
语言的语法描述了代码的结构。这包括如何逐行编写代码，以及用于构造代码语句的实际单词。
例如，[Python](https://opensource.com/downloads/cheat-sheet-python-37-beginners) 以使用缩进来指示一个代码块在哪里结束以及另一代码块在哪里开始而闻名：
```
while j ` 符号完成。测试是否相等通常使用 `==` 来完成（是的，是两个等号，因为通常一个等号用来赋值）。
当然也有一些例外，比如像 Lisp 和 Bash 语言算数运算符就不是如此，但与其他语言一样，这只是一个心理翻译的问题。一旦你了解了表达方式有何不同，很快就可以适应它。快速浏览一下一门编程语言的算数运算符通常足以让你了解算数操作是如何完成的。
你还需要知道如何比较和操作非数值数据，比如字符和字符串。这些通常是通过编程语言的核心库来进行的的。例如，Python 提供了 `split()` 方法，而 C 语言需要引入头文件 `string.h` 来提供 `strtok()` 函数。
#### 实践
了解用于处理基本数据类型的基本函数和关键字，并寻找可帮助你完成复杂操作的核心库。
### 5、函数
![Class](/data/attachment/album/202011/19/230206ri48npt8ptv8jrnp.png "Class")
代码不只是计算机的待办清单。通常情况下，在编写代码时你往往希望向计算机提供一组理论条件和一组操作指令，当满足每个条件时计算机就会采取这些操作。尽管使用条件语句以及数学和逻辑运算符进行流控制可以做很多事情，但是引入了函数和类之后，代码会变得更加高效，因为它们使你可以定义子程序。例如，如果应用程序非常频繁地需要一个确认对话框，那么将其作为类的实例编写一次要比每次需要它时重新编写实现起来要容易得多。
你需要学习如何在编程语言中定义类和函数。更准确地说，你首先需要了解编程语言中是否支持类和函数。大多数现代语言都支持函数，但是类是面向对象的编程语言中所特有的。
#### 实践
学习语言中可用的结构，这些结构可以帮助你高效地编写和使用代码。
### 你可以学到任何东西
学习编程语言，就其本身而言，是一种编码过程中的子程序。一旦理解了代码如何工作，你所使用的语言就只是一种传递逻辑的媒介。学习一门新编程语言的过程几乎都是一样的：通过简单的练习来学习语法，通过学习词汇来积累进行复杂动作的能力，然后练习、练习、再练习。
---
via: 
作者：[Seth Kenlon](https://opensource.com/users/seth) 选题：[lujun9972](https://github.com/lujun9972) 译者：[xiao-song-123](https://github.com/xiao-song-123) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出