Options:
      --help   Print usage
Commands:
  create      Create a checkpoint from a running container
  ls          List checkpoints for a container
  rm          Remove a checkpoint
```
然后，按照说明安装 CRIU([https://criu.org/Installation](https://criu.org/Installation))。接下来，让我们看一个简单的例子来展示 CRIU 有多强大。我有一个简单的`busybox`容器，它每秒钟运行一次`1`来增加计数器，如下面的代码片段所示:
```
# docker run -d --name looper --security-opt seccomp:unconfined busybox /bin/sh -c 'i=0; while true; do echo $i; i=$(expr $i + 1); sleep 1; done'
91d68fafec8fcf11e7699539dec0b037220b1fcc856fb7050c58ab90ae8cbd13
```
睡了几秒钟后，我看到计数器的输出增加，如下所示:
```
# sleep 5
# docker logs looper
0
1
2
3
4
5
```
接下来，我想检查容器并将状态存储到本地文件系统，如下所示:
```
# docker checkpoint create --checkpoint-dir=/tmp looper checkpoint
checkpoint
```
现在`checkpoint`状态已经保存在`/tmp`目录下。请注意，容器活套将在检查点之后被杀死，除非您在创建检查点时指定了`--leave-running`标志。
然后，创建一个镜像容器，但不运行它，如下所示:
```
# docker create --name looper-clone --security-opt seccomp:unconfined busybox /bin/sh -c 'i=0; while true; do echo $i; i=$(expr $i + 1); sleep 1; done'
49b9ade200e7da6bbb07057da02570347ad6fefbfc1499652ed286b874b59f2b
```
现在，我们可以以存储状态启动新的`looper-clone`容器。让我们再等几秒钟，看看会发生什么。结果可以在下面的代码片段中看到:
```
# docker start --checkpoint-dir=/tmp --checkpoint=checkpoint looper-clone
# sleep 5
# docker logs looper-clone
6
7
8
9
10
```
新`looper-clone`容器从`6`开始计数，表示状态(计数器为`5`)成功恢复使用。
CRIU 对于容器取证非常有用，尤其是当容器内发生一些可疑活动时。您可以检查容器(假设集群中运行多个副本)，让 CRIU 杀死可疑容器，然后在沙箱环境中恢复容器的可疑状态，以便进一步分析。接下来，让我们讨论另一种捕获数据进行取证的方法。
## 使用系统挖掘和系统挖掘检查
Sysdig 是 Linux 系统探索和故障排除的开源工具，支持容器。Sysdig 还可以通过检测 Linux 内核并捕获系统调用和其他操作系统事件来创建系统活动的跟踪文件。捕获功能使其成为容器化环境中令人敬畏的取证工具。为了支持 Kubernetes 集群中的捕获系统调用，Sysdig 提供了一个`kubectl`插件`kubectl-capture`，它使你能够像使用其他一些`kubectl`命令一样简单地捕获目标 Pod 的系统调用。捕获完成后，可以使用功能强大的开源工具 Sysdig Inspect 进行故障排除和安全调查。
让我们继续以`insecure-nginx`为例，因为我们得到了一个 Falco 警报，如下面的代码片段所示:
```
08:22:19.484698397: Warning Anomalous file read activity in Nginx pod (user= process=nginx file=/etc/passwd container_id=439e2e739868 image=kaizheh/insecure-nginx) k8s.ns=insecure-nginx k8s.pod=insecure-nginx-7c99fdf44b-gffp4 container=439e2e739868 k8s.ns=insecure-nginx k8s.pod=insecure-nginx-7c99fdf44b-gffp4 container=439e2e739868
```
当警报被触发时，仍然有可能`nginx`Pod 正在遭受攻击。有几件事可以做回应。开始捕捉然后分析法尔科警报的更多背景是其中之一。
要触发捕获，请从[https://github.com/sysdiglabs/kubectl-capture](https://github.com/sysdiglabs/kubectl-capture)下载`kubectl-capture`，并将其与其他`kubectl`插件放在一起，如下所示:
```
$ kubectl plugin list
The following compatible plugins are available:
/Users/kaizhehuang/.krew/bin/kubectl-advise_psp
/Users/kaizhehuang/.krew/bin/kubectl-capture
/Users/kaizhehuang/.krew/bin/kubectl-ctx
/Users/kaizhehuang/.krew/bin/kubectl-krew
/Users/kaizhehuang/.krew/bin/kubectl-ns
/Users/kaizhehuang/.krew/bin/kubectl-sniff
```
然后，在`nginx`Pod 上开始捕获，如下所示:
```
$ kubectl capture insecure-nginx-7c99fdf44b-4fl5s -ns insecure-nginx
Sysdig is starting to capture system calls:
Node: ip-172-20-42-49.ec2.internal
Pod: insecure-nginx-7c99fdf44b-4fl5s
Duration: 120 seconds
Parameters for Sysdig: -S -M 120 -pk -z -w /capture-insecure-nginx-7c99fdf44b-4fl5s-1587337260.scap.gz
The capture has been downloaded to your hard disk at:
/Users/kaizhehuang/demo/chapter11/sysdig/capture-insecure-nginx-7c99fdf44b-4fl5s-1587337260.scap.gz
```
在引擎盖下，`kubectl-capture`启动一个新的 Pod ，在疑似受害者 Pod 运行的主机上进行捕获，捕获持续时间为`120`-秒，这样我们就可以看到此时此刻和下一个`120`秒在该主机上发生的一切。一旦捕获完成，压缩的捕获文件将被创建在当前工作的目录中。您可以引入 Sysdig Inspect 作为 Docker 容器来启动安全调查，如下所示:
```
$ docker run -d -v /Users/kaizhehuang/demo/chapter11/sysdig:/captures -p3000:3000 sysdig/sysdig-inspect:latest
17533f98a947668814ac6189908ff003475b10f340d8f3239cd3627fa9747769
```
现在登录`http://localhost:3000`，应该会看到登录**用户界面** ( **UI** )。请记住解压缩`scap`文件，这样您应该能够看到捕获文件的概览页面，如下所示:
![Figure 11.5 – Sysdig Inspect overview ](img/B15566_11_005.jpg)
图 11.5–系统挖掘检查概述
Sysdig Inspect 从以下角度提供了对容器内部活动的全面了解:
*   执行的命令
*   文件存取
*   网络连接
*   系统调用
让我们比法尔科警报做更多的挖掘。从警报中，我们可能会怀疑这是文件路径遍历问题，因为它是访问`/etc/passwd`文件的`nginx`进程，我们知道这个 pod 只服务静态文件，因此`nginx`进程永远不会访问`/usr/share/nginx/html/`目录之外的任何文件。现在，让我们看看下面的截图，看看发送到`nginx`Pod 的网络请求是什么:
![Figure 11.6 – Sysdig Inspect investigating network connections to nginx ](img/B15566_11_006.jpg)
图 11.6–系统挖掘检查调查与 nginx 的网络连接
查看连接后，我们看到请求来自单个 IP，`100.123.226.66`，看起来像一个 pod IP。会不会是来自同一个集群？单击左侧面板上的**容器**视图，并在过滤器中指定`fd.cip=100.123.226.66`。然后，你会发现它来自`anchore-cli`容器，如下图所示:
![Figure 11.7 – Sysdig Inspect investigating a container sending a request to nginx ](img/B15566_11_007.jpg)
图 11.7–Sysdig Inspect 调查向 nginx 发送请求的容器
`anchore-cli` pod 实际上恰好与运行在与`nginx` pod 相同的节点上，如下面的代码块所示:
```
$ kubectl get pods -o wide
NAME          READY   STATUS    RESTARTS   AGE   IP               NODE                           NOMINATED NODE   READINESS GATES
anchore-cli   1/1     Running   1          77m   100.123.226.66   ip-172-20-42-49.ec2.internal              
$ kubectl get pods -n insecure-nginx -o wide
NAME                              READY   STATUS    RESTARTS   AGE   IP               NODE                           NOMINATED NODE   READINESS GATES
insecure-nginx-7c99fdf44b-4fl5s   1/1     Running   0          78m   100.123.226.65   ip-172-20-42-49.ec2.internal              
```
现在我们知道可能有一些从`anchore-cli`Pod 发起的文件路径遍历攻击，让我们看看是什么(只需双击前面 **Sysdig Inspect** 页面中的条目)，如下所示:
![Figure 11.8 – Sysdig Inspect investigating path traversal attack commands ](img/B15566_11_008.jpg)
图 11.8–Sysdig Inspect 调查路径遍历攻击命令
我们发现在`anchore-cli`窗格中有执行的文件路径遍历命令列表，详细如下:
*   `curl 100.71.138.95/files../etc/`
*   `curl 100.71.138.95/files../`
*   `curl 100.71.138.95/files../etc/passwd`
*   `curl 100.71.138.95/files../etc/shadow`
我们现在能够离攻击者更近一步，下一步是尝试更多地调查攻击者是如何降落在`anchore-cli`Pod 中的。
CRIU 和 Sysdig 都是在容器化环境中进行取证的强大工具。CRIU 问题有望很快得到解决。请注意，CRIU 还要求 Docker 守护程序在`experimental`模式下运行，而 Sysdig 和 Sysdig Inspect 在 Kubernetes 级别工作得更多。Sysdig Inspect 为提供了一个很好的用户界面，帮助浏览在 Pod 和容器中发生的不同活动。
# 总结
在这漫长的一章中，我们介绍了 Kubernetes 审计、Kubernetes 集群的高可用性、使用 Vault 管理机密、使用 Falco 检测异常活动以及使用 CRIU 和 Sysdig 进行取证。虽然您可能会发现熟悉所有的实践和工具需要相当长的时间，但是深度防御是一个巨大的主题，值得深入挖掘安全性，以便为您的 Kubernetes 集群建立更牢固的防护。
我们谈到的大多数工具都易于安装和部署。我鼓励您尝试一下:添加您自己的 Kubernetes 审核规则，使用 Vault 管理 Kubernetes 集群中的机密，构建您自己的 Falco 规则来检测异常行为，因为您比任何人都更了解您的集群，并使用 Sysdig 收集所有取证数据。一旦您熟悉了所有这些工具，您应该相信您的 Kubernetes 集群会受到更多的控制。
在下一章中，我们将讨论一些已知的攻击，例如针对 Kubernetes 集群的加密挖掘黑客攻击，并了解如何使用我们在本书中学习的技术来减轻这些攻击。
# 问题
1.  为什么不应该将保密对象的审核级别设置为`Request`或`RequestResponse`？
2.  在`kops`中设置多个主节点使用什么标志？
3.  当一个机密在 Vault 中更新时，边车容器会做什么？
4.  法尔科使用的事件来源有哪些？
5.  Falco 使用哪个过滤器从系统调用 l 事件中检索进程名？
6.  CRIU 能对正在运行的容器做什么？
7.  你能用 Sysdig Inspect 做什么？
# 进一步参考
*   Kubernetes 审核:[https://kubernetes . io/docs/tasks/debug-application-cluster/audit/](https://kubernetes.io/docs/tasks/debug-application-cluster/audit/)
*   通过`kubeadm` : [实现高可用性](https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/high-availability/)
*   金库:[https://www.vaultproject.io/docs/internals/architecture](https://www.vaultproject.io/docs/internals/architecture)
*   法尔科:https://falco.org/docs/
*   Sysdig 过滤:[https://github . com/DRA IOs/Sysdig/wiki/Sysdig-用户-指南#用户-内容-过滤](https://github.com/draios/sysdig/wiki/Sysdig-User-Guide#user-content-filtering)
*   大喊:https://criu . org/dock
*   sys dig`kubectl-capture`:[https://sys dig . com/blog/tracing-in-kubi treble-capture 插件/](https://sysdig.com/blog/tracing-in-kubernetes-kubectl-capture-plugin/)
*   Sysdig 检查:https://github . com/draos/sys dig 检查
*   sys dig:https://github . com/draos/sys dig**