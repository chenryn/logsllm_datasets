program design and developers. The 6-bytes buffer mac_addr is allo-
cated on stack. It is supposed to be initialized in the dump_station
function before it is sent out. However, since dump_station is an
interface function that has different implementations for different
protocols written by different programmers, it is hard to ensure
};
static int proc_connectinfo(struct usb_dev_state *ps,
void __user *arg) {
unsigned int devnum;
unsigned char slow;
/* 3-bytes padding inserted for alignment */
/* File: drivers/usb/core/devio.c */
struct usbdevfs_connectinfo {
1
2
3
4
5
6
7
8
9 ⋆ struct usbdevfs_connectinfo ci = {
10
11
12
13
14
};
.devnum = ps->dev->devnum,
.slow = ps->dev->speed == USB_SPEED_LOW
/* sizeof(ci) == 8, but only 5 bytes are initialized */
15 ⊙ if (copy_to_user(arg, &ci, sizeof(ci)))
return -EFAULT;
return 0;
16
17
18
}
Figure 4: New kernel leak caused by compiler padding. Object ci contains
3-bytes padding at the end, which is copied to userland. Note that ⋆ denotes
memory allocation and partial initiation, and ⊙ notes a leakage point.
the object is consistently initialized. Specifically, this buffer is not
initialized in the implementation of the wilc1000 module. As this
uninitialized data is actually never used by the kernel, it is sim-
ply copied outside the kernel boundary; from the perspective of
compiler, these cases are not errors. Moreover, dump_station is
a function pointer (i.e., dereferenced by an indirect call), tracking
which requires a complete call graph that is not provided by current
compiler features.
2.2.2 Data Structure Padding
Besides developer mistakes, a more interesting source of unini-
tialized data leaks is compiler-added data structure paddings. In
particular, when modern processors access a memory address, they
usually do this at the machine word granularity (e.g. 4-bytes on a
32-bits systems) or larger. So if the target address is not aligned,
the processor may have to access the memory multiple times to
perform shifting and calculating to complete the operation, which
can significantly degrade the performance [33]. Moreover, different
instructions or architectures could also have their own alignment
requirements. For instance, SSE instructions on the x86 architecture
require the operands to be 16-bytes aligned, and ARM processors
always require memory operands to be 2-bytes or 4-bytes aligned.
For these reasons, compilers usually add paddings within a data
structure so fields are properly aligned.
The problem is that as these paddings are not visible at the pro-
gramming language level, and so they are not initialized even when
all fields have been properly initialized in the code written by devel-
opers and hence may lead to information leaks. Figure 4 illustrates a
kernel leak in the USB module caused by data structure paddings. In
this case, although developers have explicitly initialized all fields of
the stack object ci, because of its last 3-byte padding, information
can still be leaked when copy_to_user is invoked to copy the whole
object to user space. To detect such leaks, byte-level analysis is re-
quired; object-level or even field level (i.e., field-sensitive) analyses
are still not fine-grained enough to catch such leaks.
To summarize, leaking padding bytes is a serious problem for
three reasons. First, it is prevalent. Compilers frequently introduce
padding for better performance. Padding is even more prevalent
when porting programs from 32-bits to 64-bits platforms. Second,
inter-procedural and byte-level analysis is required to detect such
leaks. Third, it is often not visible to developers. Padding bytes can
be leaked even developers have correctly initialized all fields.
After we submitted patches for these vulnerabilities, the compiler-
injected padding issue was discussed extensively by the Linux com-
munity and became a major concern to the Linux kernel developers
1 ⋆ struct usbdevfs_connectinfo ci = {
2
3
4
.devnum = 1234,
.slow = 1
};
Figure 5: An example that fields in a object are initialized with constants in
an initializer. LLVM will generate a global initializer for this object.
Figure 6: Overview of UniSan’s workflow. UniSan takes as input the LLVM
IR (i.e., bitcode files) and automatically generates secured IR as output. This
is done in two phases: identifying all potentially unsafe allocations and
instrumenting the kernel to initialize all detected unsafe allocations.
because, from the developers’ perspective, they have properly ini-
tialized the data structures and this type of leak is hardly visible
even to skilled programmers. On the other hand, from the compil-
ers’ perspective, they have the benefit of not proactively initializing
such padding regions to achieve better performance, because this
design decision can be independently made by each compiler accord-
ing to the C/C++ specification. However, considering its severity,
prevalence and more importantly, its non-trivial nature to develop-
ers, we, as well as many kernel maintainers urge the incorporation
of UniSan’s approach to solve this problem at the compiler level,
perhaps as an extra option to the compiler.
Global initializer in LLVM. Initializers are often used in the ker-
nel; Figure 5 shows an example of an initializer that initializes fields
of the allocated object. When the fields are initialized with constants
(not variables), LLVM will generate a global initializer that will
zero the remaining bytes including the padding in the object. In this
case, we should not report it as an unsafe allocation. On the other
hand, GCC does not use the global initializer to zero the remaining
bytes; hence it is still a leak when the whole object is sent out. This
example demonstrates that compiler-based analysis is necessary to
accurately detect unsafe allocations.
3. OVERVIEW
In this work, we focus on preventing kernel information leaks
caused by uninitialized data reads. UniSan achieves this goal via a
two-phase process (Figure 6). In the first phase, UniSan analyzes
the kernel and conservatively identifies all potential unsafe objects
that may leave the kernel space without having been fully initial-
ized. Then in the second phase, UniSan instruments the kernel to
automatically initialize (zero out) the detected unsafe allocations.
3.1 Problem Scope
The protection target of UniSan is the OS kernel. Since UniSan
performs analysis over source code, we assume the source code of
the kernel is available. We assume the attackers do not have the
kernel privilege (e.g., through loading a malicious kernel driver),
but they can be either local or remote. The goal of the attackers
is to leak sensitive data (e.g., addresses, cryptographic keys, file
content) in the kernel space to the external world (e.g., userland and
network). After gathering the information, the attacker can launch
more attacks, such as privilege escalation and phishing.
As discussed in §2, kernel information leaks have multiple root
causes: uninitialized data read, buffer overread, use-after-free, data
race, logical errors, etc. In this work, we focus on uninitialized
data read because a majority of kernel leaks are caused by this
Unsafe alloc.detectorLLVM IRUniSan(built upon LLVM)KernelSource codeSecured kernel imageUnsafe alloc.initializercomplete call graphreachability analysisinitialization analysiszero out unsafebytesModifiedLLVM IRbuild user graphFigure 7: Unsafe allocation detector incorporates a reachability analysis
and an initialization analysis to check whether any byte of the allocation is
uninitialized when leaves the kernel space.
particular type of vulnerabilities and there is no practical solution
yet; whereas other types of vulnerabilities can be addressed by
existing techniques and are thus out-of-scope. For instance, buffer
overread and use-after-free bugs can be prevented by memory safety
techniques [26–28, 35]. Data race can be detected by [14]. Logical
errors (e.g., missing permission check) are relatively rare and can
be identified by semantic checking techniques [3, 25].
3.2 The UniSan Approach
There are multiple candidate solutions for preventing uninitialized
data leaks. The first is zeroing the memory when it is deallocated.
Since we cannot know when the deallocated memory will be al-
located and used in the future, we have to conservatively zero all
deallocated stack and heap objects, which can introduce a significant
performance overhead. More importantly, deallocation is not always
paired with allocation, such as the case of memory leak, thus intro-
ducing false negatives. The second is dynamically tracking the status
of every byte in the object, so that we can know exactly if any unini-
tialized bytes are leaving the kernel space. MemorySanitizer [39]
and kmemcheck [31] are based on this approach. However, while
they are effective and able to detect general uninitialized data uses,
their 3x performance overhead is too high to be used for runtime
prevention. The third is selectively zeroing the allocated memory
that is detected as unsafe by static analysis. After assessing the
effectiveness and performance of these approaches, we chose the
third approach—only initializing the unsafe allocations.
Figure 6 illustrates the approach of UniSan. Specifically, UniSan
takes as input the LLVM IR (i.e., bitcode files) compiled from
the kernel source code, upon which the analysis and instrumen-
tation are performed. Given a stack or heap allocation, UniSan
leverages static data-flow (taint) analysis to check whether this al-
location can reach the pre-defined sinks, such as copy_to_usr and
sock_sendmsg. Along the propagation path, UniSan also tracks the
initialization status of each byte of the allocation. If any byte of the
allocation reaches the sink without having been initialized in any
possible execution path, UniSan considers it unsafe. After collecting
all unsafe allocations, UniSan instruments the IR with initialization
code right after them. For stack allocation, UniSan inserts a memset
or zero-initiailzation to initialize it. For heap allocation, UniSan
adds the __GFP_ZERO flag to the allocation functions (e.g., kmalloc).
Finally, by assembling and linking the instrumented bitcode files,
UniSan generates the secured kernel image.
4. DESIGN
In this section, we present the design of UniSan. We first describe
the design of unsafe allocation detector, including how we generate
the complete call graph, perform reachability analysis, and track the
initialization status of allocations. Then we describe how unsafe
allocation initializer instruments the kernel to generate secured
kernel image.
4.1 Detecting Unsafe Allocations
Our unsafe allocation detection is essentially a static taint analy-
sis that incorporates two orthogonal analyses: object initialization
analysis and sink reachability analysis, as shown in Figure 7. The
initialization analysis checks which bytes of the object will be ini-
tialized along the paths from allocation to sinks, i.e., which bytes
will be assigned with other values. The sink reachability analysis
checks which bytes of the object will leave the kernel space along
the paths from allocation to sinks, i.e., being passed to sinks. The
initialization analysis and reachability analysis are then integrated
to detect unsafe bytes—a byte is unsafe if it is uninitialized when it
leaves kernel space.
The workflow of the detection is as follows. Given the bitcode
files of the target program, it first builds a complete and global
call graph. Then it parallelly performs the reachability analysis
and initialization analysis for each allocation to detect the unsafe
bytes. Our analysis is flow-sensitive in that the order of the uses
of the allocation is maintained with a dedicated user-graph (that
will be elaborated in §4.1.4); context-sensitive in that function calls
are followed with callsite-specific context; and field-sensitive in
that it performs fine-grained tracking for each byte of the allocation.
However, to avoid the path explosion problem and make our analysis
scalable to the whole kernel, our analysis is path-insensitive.
4.1.1 Defining Sources and Sinks
Both the reachability analysis and initialization analysis track the
“taint” status of the allocated bytes from the allocation site to the
sink functions. As the first step, we need to pre-define the sources
(i.e., allocations) and sinks (i.e., data-leaking functions).
Sources. For stack, all objects are allocated by the AllocaInst
(i.e., an instruction to allocate memory on the stack) . By handling
this instruction, we are able to find all tracking sources on stack.
Heap objects can be allocated in many ways. In our current im-
plementation, we include only the standard allocator from SLAB,
namely, kmalloc and kmem_cache_alloc. These heap allocators
accept a flag parameter. If the flag contains __GFP_ZERO bit, the
allocated memory will be initialized with zero. In UniSan, we track
only heap allocations without the __GFP_ZERO flag. Please note that
although UniSan currently does not include custom allocators, it
can be easily extended to support them once developers denote the
function name and allocation flags (i.e., create the source signature).
Sinks. Under the threat model of UniSan, any function that may
send kernel data to userland, network, or file is classified as a
sink function. In UniSan, we use two policies to generally define
the sinks. We first empirically define a list of known sink func-
tions, based on our study of previous kernel leaks. For example,
copy_to_user copies data to userland; sock_sendmsg sends data
to network, and vfs_write writes data to files. Although there
are various implementations for file writing (for different file sys-
tems) and message sending (for different protocols), vfs_write and
sock_sendmsg are the uniformed interfaces, so we can generally
catch the sink functions by annotating these functions.
Clearly, there are more sink functions that are not covered by the
first step. To eliminate false negatives introduced by an incomplete
sink list, we utilized three conservative rules to generally cover
additional sinks. These rules are defined based on the fact that under
our recursive tracking algorithm (Figure 8), for any data to leave
kernel space, it will always be stored to a non-kernel-stack location
(or non-AllocaInst to be specific), so once we cannot determine
that the destination of an store operation is on kernel stack, we treat
it as a sink.
• Rule 1: A StoreInst (i.e., an instruction for storing to mem-
ory) is a sink if the destination is not allocated by an AllocaInst
in kernel;
• Rule 2: A CallInst (i.e., an instruction for calling a function)
Allocations(e.g., alloca/kmalloc)Reachability analysisdata flowSinks(e.g., copy_to_user)Initialization analysisreturn;
UnsafeBytes = Array();
for (User in NextUsers) {
/* terminate if all bytes have been inited or sinked */
if (AllInitied(Alloc) || AllSunk(Alloc))
/* user relationships are maintained */
MergedUnsafeBytes = Array();
UserGraph = BuildUserGraph(Alloc);
NextUsers = GetFirstUser(UserGraph);
RecursiveTrackUsers(Alloc,NextUsers,MergedUnsafeBytes);
if (IsNotEmpty(MergedUnsafeBytes))
1 /* Unsafe allocation detection algorithm */
2 UnsafeAllocDetection(Module) {
3
4
5
6
7
8
9
10
11
12 }
13 RecursiveTrackUsers(Alloc, NextUsers, MergedUnsafeBytes) {
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36 }
/* Next users of User are recursively tracked */
if (IsLoadInst(User))
RecursiveTrackLoad(User, UnsafeBytes);
/* Conservatively merge (union) all unsafe bytes */
MergedUnsafeBytes += UnsafeBytes;
RecursiveTrackCall(User, UnsafeBytes);
else if (IsGetElementPtr(User))
RecursiveTrackGEP(User, UnsafeBytes);
/* assume remaining uninitialized bytes unsafe */
UnsafeBytes += GetUninitializedBytes(Alloc);
else if (IsStoreInst(User))
RecursiveTrackStore(User, UnsafeBytes);
else if (IsCallInst(User))
...
/* Unrecognized cases */
else
for (Alloc in Module) {
Report(Alloc, MergedUnsafeBytes);
}
}
Figure 8: The pseudo-code of the recursive tracking algorithm for the unsafe
allocation detection.
is a sink if the called value is inline assembly that is not in the
whitelist (§4.1.6);
• Rule 3: A CallInst is a sink if the called function’s body is
empty (i.e., not compiled into LLVM IR).
4.1.2 Building Global Call-Graph
Since UniSan’s analysis is inter-procedural, global call graph is
required. To eliminate false negatives, UniSan must conservatively
identify all potential targets of indirect calls. To this end, we first
collect the address-taken functions, and use the type-analysis-based
approach [30, 41] to find the targets of indirect calls. That is, as long
as the type of the arguments of an address-taken function matches
with the callsite of the indirect call, we assume it is a valid target.
Note that we also assume universal pointers (e.g., char *, void *)
and an 8-bytes integer can match with any type.
4.1.3 Recursive Detection Algorithm
With the global call-graph, we conduct the unsafe allocation
detection. The algorithm of the detection is shown in Figure 8. In
short, given an allocation in a module, we first build its user-graph
(that will be elaborated in §4.1.4). After that, we recursively keep
track of which bytes of the allocated object have been initialized
and which bytes have reached sink functions, by traversing the user-
graph. Different users are handled properly. If there are any corner
cases that are not recognized before, we conservatively assume the
bytes being tracked are unsafe. All unsafe bytes in different paths
are concatenated together. That is, a byte is assumed unsafe as long
as it is unsafe in any possible path.
4.1.4 Building User-Graph
In LLVM IR, a user of a value is an instruction or expression
that takes the value as an operand. The unsafe allocation detection
Figure 9: A simple user-graph example.
is designed to be flow-sensitive, which requires considering the
order of users. Given the being tracked value (e.g., the allocated
value), LLVM framework only tells us all the users but not the
relationships (e.g., sequential and parallel relationships) among
them. To maintain the relationships of the users, we build the user-
graph for the tracked value. Figure 9 shows a simple user-graph
example. Instructions that do not use the tracked value will not
show up in the graph. More specifically, we first put all the users in
the corresponding basic blocks. Users in the same basic block are
always in a sequential order. Then we use the DominatorTree pass
of LLVM to understand the relationships among the involved basic
blocks. With this information, we chain all the users together into a
user graph. When an alias of the tracked value is generated (e.g., by
the CastInst and GetElementPtr instructions), all the users of the
alias will be seamlessly merged into the user-graph as well.
4.1.5 Fine-Grained Status Tracking
UniSan performs unsafe allocation detection in a fine-grained
manner (i.e., byte-level analysis). There are several advantages of
performing the analysis at byte granularity. First, due to the com-
piler’s padding, initializing all fields of an object does not guarantee
that all bytes are initialized (Figure 4). Therefore, byte-level analysis