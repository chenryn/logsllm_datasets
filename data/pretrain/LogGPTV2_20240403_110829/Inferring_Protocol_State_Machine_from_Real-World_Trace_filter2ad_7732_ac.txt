Once the K-S test ﬁnished (i.e., been accepted), the elements in Aλ
Bλ will
be called candidate message units. Then Veritas attempts to recover the
protocol format messages from these candidate message units.
(cid:4)
Protocol Format Message Inference. Obtaining protocol format messages
is important, as these messages are used for inferring protocol state messages,
which is described in Section 3.2. We design a units combiner, which is employed
to recover protocol format messages from candidate message units obtained. Here
we give a concrete example to explain the process of protocol format messages
reconstruction. As shown in Figure 2, the candidate units set φ is comprised
of ﬁve message units (DAT, AT A, HOS, OST and ST S). The possible protocol
format message can be checked out as follows,
1. Randomly selecting a group of packets from the traﬃc collection, say Packet
Header 1 in Figure 2.
2. With candidate message units, the units combiner tries to rebuild all se-
quences as long as possible (maybe more than one) for each packet header.
So all of these sequences only contain possible three-byte subsequences which
are lying in φ.
3. All of these obtained sequences are regarded as protocol format messages,
such as ‘DAT A HOST S’ in Figure 2.
Furthermore, not all packets contain protocol format message, since some packets
only transmit data. Next, we describe our machine-learning methods for inferring
protocol state messages.
3.2 Inferencing Protocol State Messages
As deﬁned earlier, protocol state messages are important and can be used to
represent states of a protocol. From our packet analysis, our system obtains a
set of protocol format messages from application-layer packet headers, based on
which we derive protocol state messages. This derivation is based on a statistical
approach, namely using a clustering algorithm.
We need to assign a type to each protocol format message, which can be accom-
plished in two steps. First, we deﬁne the features of a protocol format message,
Inferring Protocol State Machine from Network Traces
9
Protocol Format Message 1
Protocol Format Message 2
Protocol Format Message 3
Protocol State Message
Fig. 3. The Relationship between Protocol Format Messages and Protocol State Mes-
sages
as well as a similarity metric between messages. We assume that messages of the
same type share a similar message format. Second, our system will group similar
format message into a cluster using machine learning methods. Similar messages
are likely to be placed in the same cluster, which is labeled by us with the proper
type. We deﬁne the center of each cluster as a protocol state message, which can be
used to represent other messages in the cluster. The relationship between protocol
state messages and protocol format messages is illustrated in Figure 3. In Figure
3, each dot represents one protocol format message. Furthermore, as shown in Fig-
ure 3, protocol state messages are part of protocol format messages, and a protocol
state messages is the center message of a cluster.
However, there are two technical challenges in message clustering. First, we
have no knowledge of the similarities between messages or their types. Second, we
get no prior knowledge about how many state messages are in a certain protocol
under analysis. Next, we describe the details of our similarity computation, and
how we realize clustering and address the challenges.
Feature Extraction and Similarity Calculation. In order to group similar
format messages, we need to extract the feature from each format message. In Ver-
itas, the feature of a protocol format message is expressed by a vector in ∈ R256,
with the i-th (starting from 0) component counting the number of one-byte char-
acter (values i) in that message. Meanwhile, we regard that two format messages
of the same type should have a similar character composition. Afterwards, our sys-
tem carries out similarity calculation between diﬀerent format messages.
For the purpose of comparing the similarity between two format messages, we
make use of the Jaccard index [13], which is deﬁned as follows:
J(a, b) =
|a ∩ b|
|a ∪ b| ,
(1)
where, a is the set of elements associated with the feature of the ﬁrst message,
while b is the set that stands for the same feature of the second message. J(a, b)
gains its maximum value 1 when all the items in the given set are the same
and it will achieve its minimum value 0 when all the items in the given set are
distinct.
10
Y. Wang et al.
Message Clustering. Based on the feature and the similarity function intro-
duced in the previous subsection, we deﬁne the distance between two protocol
format messages, which is crucial in clustering. The distance of two protocol for-
mat messages a and b is deﬁned as d(a, b) = 1 − J(a, b), where J is the Jaccard
index in this paper.
In order to group protocol format messages, we make use of the Partitioning
Around Medoids (PAM) algorithm [12]. In contrast to the k-means algorithm,
the partitioning around medoids algorithm is more robust to noise and outliers.
Therefore, PAM algorithm are suitable for protocol state messages inferring. Just
like most other clustering algorithms, the partitioning around medoids algorithm
needs an integer value k (the number of clusters) as the input. In order to
ﬁnd out a proper k value, we use a generalization of the Dunn index [18] as a
measurement. The Dunn index is a standard intrinsic measurement of clustering
quality, deﬁned as follows.
D(k) =
min1≤i≤k{min1≤j≤k{δ(Ci, Cj)}}
max1≤i≤k{Δ(Ci)}
,
(2)
where Ci, .., Ck are the clusters, Δ(Ci) is the diameter of cluster Ci, and
δ(Ci, Cj) is the distance between two clusters. According to Equation 2, we may
see in a clear way that the numerator of Equation 2 is a measure of cluster sepa-
ration and denominator is a measure of cluster compactness. In our experiment,
the k, which maximizes the Dunn index, would be chosen. Finally, the format
message of each cluster center is regarded as a protocol state message, and the
type of the protocol state message is represented by π.
3.3 Probabilistic Protocol State Machine
Because our analysis is based on statistical methods, Veritas is able to represent
protocol state relations probabilistically. In this section, we introduce a novel
expression of protocol state machine – probabilistic protocol state machine (P-
PSM). P-PSM can be used to describe both protocol state transitions and their
probabilities. Moreover, the probabilistic protocol state machine is helpful for
identifying critical paths of a protocol.
Notation. Let Σ be the set of characters (256 possibilities) and Σ∗ be the set of
protocol state messages that can be built from Σ. In Σ, symbols can be denoted
as (\00, \01, \02, ... , \ff) and protocol state messages in Σ∗ will be represented
by alphabet letters (a, b, ... , z). Therefore, a protocol state transition Tij can be
denoted by (σi,σ2,... ,σj) from a starting state i to an accepting state j, where
∀σ ∈ Σ∗. Pr(Tij) is a probability
k=i,σk∈Σ∗ σk. Moreover, the distribution
ij∈Σ∗ Pr(Tij) = 1. The distribution can be modeled
must satisfy the equation
by a probabilistic protocol state machine A (deﬁned next). The protocol under
analysis will be described by A in a probabilistic manner.
Formal Deﬁnition of P-PSM. We give the formal deﬁnition for probabilis-
tic protocol state machine (P-PSM). P-PSM is a specialization of the general
probabilistic ﬁnite-state machine [10] in the (network) protocol context.
(cid:5)j
(cid:2)
Inferring Protocol State Machine from Network Traces
11
 I(q0) = 1
q0
(0)
a(¼)
c(½)
q2
(1)
q1
(0)
b(¼)
d(1/3)
e(2/3)
q3
(1)
Fig. 4. An Example of P-PSM
Deﬁnition 4. A P-PSM is a tuple A.
A = (cid:7)QA, Σ∗, δA, IA, FA, PA(cid:8), where:
– QA is a ﬁnite set of states;
– Σ∗ is the set of protocol state messages;
– δA ⊆ QA × Σ∗ × QA is a set of transitions;
– IA : QA −→ R+ (initial-state probabilities);
– FA : QA −→ R+ (ﬁnal-state probabilities);
– PA : δA −→ R+ (transition probabilities).
IA, FA, PA are function such that:
(cid:6)
q∈QA
IA = 1,
and
∀q ∈ QA, FA(q) +
(cid:6)
x∈Σ∗,q(cid:2)∈QA
PA(q, x, q(cid:4)
) = 1.
(3)
(4)
By convention, P-PSMs are illustrated by directed labeled graphs. In
Figure 4, we give a concrete example of P-PSM. In what follows, the subscript
A will be dropped when there is no ambiguity. Typically, a protocol description
by means of P-PSM begins with starting states (q0 in Figure 4) and ﬁnishes
with accepting states (q2, q3 in Figure 4). In Figure 4, there are four states
Q = {q0, q1, q2, q3}, only one initial-state (I(q0) = 1) and the real numbers in
the states are the ﬁnal-states probabilities. In addition, there are ﬁve protocol
state messages, Σ∗ = {a, b, c, d, e}, and real numbers in the arrows are transi-
tion probabilities.
3.4 State Machine Inference
Veritas constructs the protocol state machine based on protocol state mes-
sages, which are obtained from message clustering. Since each stateful packet
12
Y. Wang et al.
has its own type, a TCP or UDP ﬂow fi, can be represented as a sequence
Fi = (π1, .., πh), where π1, .., πh ∈ M and M is the set of protocol state mes-
sages. Next, we give details on how to associate a network packet with a state
label and to construct the protocol state machine in a probabilistic fashion.
State Labeling. We describe how to label each network packet with a state
type, which is assigned at message clustering. Since our state labeling method is
entirely based on a ﬂow model, a 5-tuple of a ﬂow, (source address, destination
address, source port, destination port, timeout), is needed as a distinction of
diﬀerent ﬂows. In a 5-tuple, the timeout value indicates the duration of a ﬂow.
In our work, several timeout values (16s, 32s, 64s) have been examined in our
experiments. From our experiment results, we ﬁnd that the timeout value is
not sensitive in our system, and diﬀerent timeout values will yield the same
experiment results. As a result, in the following experiments, the timeout value
will be set to 64s.
As it is deﬁned in previous section, πi, .., πk are cluster center messages (pro-
tocol state messages). In this phase, after aligning the two messages to be com-
pared, we denote the feature of the packet header under analysis with ρ, and
the feature of the cluster center message πi with θi. For each packet, our system
calculates the distance between ρ and θi, and labels the packet header ρ with
the type of πi, which satisﬁes that arg min d(ρ, θi), where i ∈ [1, k].
However, not each packet header have a state type. For example, some data
transmission packet do not contain any protocol format message, so it will be
not marked with any state type. Assuming that Δ(Ci) is the diameter of cluster
Ci, dmax can be deﬁned as follows, dmax = max1≤i≤k{2Δ(Ci)}. Ch is the cluster
that is nearest to the packet header ρ(cid:4) under analysis. If d(θh, ρ(cid:4)) > dmax, the
packet header ρ(cid:4) will be assigned with an unknown state type.
After labeling all packets of a speciﬁc protocol, Veritas constructs a proba-
bilistic protocol state machine, as explained next.
Obtaining Probabilistic Protocol State Machine. After the phase of state
labeling, we are aware of the state type π of the packet in each ﬂow. And then in
each TCP or UDP ﬂow Fi, Fi = (π1, .., πh), our system calculate the frequency