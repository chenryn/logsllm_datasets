Hello,  
I am new to 6to5 and I am trying to convert some of my ES6 files into ES5. I
have had some success with this but wasn't entirely sure my approach was
right. This is what I am doing:
  1. Using `grunt-6to5` to transpile my code
  2. Using `grunt-browserify` to concatenate my files into a bundle
using the following `grunfile`:
    module.exports = function(grunt) {
        require('load-grunt-tasks')(grunt);
        grunt.initConfig({
            '6to5': {
                dist: {
                    files: [{
                        expand: true,
                        cwd: 'public/js/',
                        src: ['**/*.js'],
                        dest: 'public/dist/'
                    }]
                }
            },
            browserify: {
                dist: {
                    files: {
                        'public/dist/bundle.js' : 'public/dist/app.js'
                    }
                }
            }
        });
        grunt.registerTask('default', ['6to5', 'browserify']);
    }
My question is, is this the right approach or is there anyway I can combine
both these steps into one?
Also, upon transpiling a class, the output doesn't look as pretty as
advertised. It adds the following block to every transpiled file (and it is
understandable)
    var _prototypeProperties = function (child, staticProps, instanceProps) {
      if (staticProps) Object.defineProperties(child, staticProps);
      if (instanceProps) Object.defineProperties(child.prototype, instanceProps);
    };
My class goes from
    class myclass {
        greet() {
            console.log('Hello world');
        }
    }
to:
    "use strict";
    var _prototypeProperties = function (child, staticProps, instanceProps) {
      if (staticProps) Object.defineProperties(child, staticProps);
      if (instanceProps) Object.defineProperties(child.prototype, instanceProps);
    };
    var myclass = (function () {
      function myclass() {}
      _prototypeProperties(myclass, null, {
        greet: {
          value: function greet() {
            console.log("Hello world");
          },
          writable: true,
          enumerable: true,
          configurable: true
        }
      });
      return myclass;
    })();
Which is fine but upon bundling them using broswerify, every class that got
transpiled has the `_prototypeProperties` duplicated. Is there a trick to
avoid this?