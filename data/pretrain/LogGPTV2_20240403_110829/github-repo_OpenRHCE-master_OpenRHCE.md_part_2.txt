#### Virtual Machine Consoles
-   virt-manager
    > Double-click the Virtual Machine desired.
-   virt-viewer
    >     # virt-viewer 
#### Virtual Machine Text Console
With libguestfs-tools installed and the VM in question shut-down, from
the host:
    # virt-edit {VMname} /boot/grub/menu.lst
There, append to the kernel line:
    console=tty0 console=ttyS0.
After saving, the following commands should allow a console based view
of the boot process and a console login:
    # virsh start {VMname} ; virsh console {VMname} 
#### Virtual Machine Text Console Caveat
> After this change, some messages that appear only on the default
> console will be visible only here. For example, the passphrase prompt
> to decrypt LUKS-encrypted partitions mounted in /etc/fstab will not be
> visible when using virt-viewer and the vm will appear to be hung. Only
> by using virsh console can the passphrase be entered to allow the boot
> process to continue.
#### Start, stop, and check the status of network services
Distinguish between starting a service and configuring it to be
persistently on.
-   Start services with:
    >     # service  start
    >
    > or
    >
    >     # /etc/init.d/ start
-   Configure services to run on each reboot with:
    >     # chkconfig  on 
    >
    > or with `ntsysv` or `system-config-services`
#### Exercise 1-5: Manipulate the cups service
-   
    Check the status of the cups service
    :   -   Is it running now?
        -   Is it configured to run on future boots? In which runlevels?
-   Stop the cups service.
-   Start the cups service.
-   Configure cups to start only on runlevels 3 and 5
#### Modify the system bootloader
-   Edit the GRUB config file:
        # vim /boot/grub/grub.conf
-   Interactively edit the GRUB menu system.
-   Directly manipulate GRUB through its shell.
### Supplemental Reading
Jang, Chapters 1-3
### Supplemental Exercises
-   Setup a practice environment following instructions in Jang, Ch 1.
#### Reading
Topics from this class:
:   Jang, Chapters 1-3
Topics for next class:
:   Jang 4,6,8
### Session 2 User Mgmt, Storage, and filesystems
#### User Administration with Config Files
/etc/passwd
:   World-readable file of user information
/etc/shadow
:   Restricted-access file with password and expiry info.
/etc/group
:   World-readable file of group information
/etc/gshadow
:   Restricted-access group password, admin, membership info
::: important
::: title
Important
:::
If editing directly, `vipw` and `vigr` should be used.
:::
#### Structure of /etc/passwd
`Name:Password:UID:GID:Comments:Homedir:Shell`
**Sample Contents**
    $ cat /etc/passwd
    root:x:0:0:root:/root:/bin/bash
    sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin
    ntp:x:38:38::/etc/ntp:/sbin/nologin
    gdm:x:42:42::/var/gdm:/sbin/nologin
    scott:x:500:500:Scott Purcell:/home/scott:/bin/bash
The \"x\" in the password field indicates that the actual password
hashes have been moved to /etc/shadow in order to implement the shadow
password system.
#### Structure of /etc/shadow
`Name:Password:Lastchange:May:Must:Warn:Disable:Expire`
**Sample Contents**
    # cat /etc/shadow
    root:$1$IyApEyOS$dZ5SMuC7Yw9/PDMyWi1H11:14373:0:99999:7:::
    sshd:!!:14373:0:99999:7:::
    ntp:!!:14373:0:99999:7:::
    gdm:!!:14373:0:99999:7:::
    scott:$1${...}:14374:0:99999:7:::
    bob:$1${...}:14398:7:30:7:7:14457:
The values in field 3 and field 8 are dates \-- rendered as a count of
days elapsed since the start of the \"Unix Epoch\" (1/1/1970).
The \"{\...}\" marks where the actual encrypted password is stored.
#### Structure of /etc/group
`Name:Password:GID:Users`
**Sample Contents**
    # cat /etc/group
    root:x:0:root
    scott:x:500:
    bob:x:501:
    mary:x:502:
    sales:x:503:bob,mary
    training:x:504:scott
#### Structure of /etc/gshadow
`Name:Password:Admins:Members`
**Sample Contents** \*\*
    # cat /etc/gshadow
    root:::root
    scott:!!::
    bob:!::
    mary:!::
    sales:!::bob,mary
    training:!::scott
#### User Admin with CLI tools
useradd, usermod, userdel
:   Create, delete, and modify user accounts
groupadd, groupmod, groupdel
:   Create, delete, and modify group accounts
chage
:   Modify password aging and expiration
#### User Admin with GUI tools
The GUI tool for managing users and groups is the Red Hat User Manager.
It can be launched from the menu at **System \| Administration \| Users
and Groups** or from the CLI as `system-config-users`.
> ![image](images/UserMgr.png){width="80.0%"}
#### User environment
Home directories
:   /home/{user}/ or /root/
/etc/skel
:   Contents copied to home directory of each new user.
##### Common Contents:
> .bashrc
>
> .bash_logout
>
> .bash_profile
#### System-wide Shell Config Files
/etc/profile
:   Executed with each user login. Sets paths, variables, etc. Runs
    scripts in `/etc/profile.d`.
/etc/profile.d
:   Scripts that extend /etc/profile, usually added by applications.
/etc/bashrc
:   System-wide functions and aliases
::: tip
::: title
Tip
:::
In order to remember what types of content goes in which of these files,
it is helpful to remember the origin of each file. /etc/profile was the
config file for the Bourne shell and thus supported only the older and
more limited feature set of that shell. /etc/bashrc is the newer,
bash-specific config file.
Thus, the newer features such as functions and aliases can only go in
bashrc, while older features such as environment variables can go in
profile.
:::
#### User-configurable Environment Files
\~/.bashrc
:   User aliases and functions
\~/.bash_profile
:   User paths, variables, and environment settings
#### Exercise 2-1: Configure Users and Groups
On your client virtual machines, perform these tasks:
1.  Create Groups \"goodguys\" and \"villains\"
    > -   Use custom GIDs so that the automatically created GIDs for the
    >     UPG scheme remain in sync with the usernames.
2.  Create Users \"bugs\", \"tweety\" and \"roadrunner\" and make them
    members of \"goodguys\"
3.  Create Users \"taz\", \"sam\", and \"wiley\" and make them members
    of \"villains\"
4.  Set sam\'s account to expire in 30 days (\"wabbit season\" ends!)
::: tip
::: title
Tip
:::
The following command is useful for sorting the existing GIDs in order
to choose unique out-of-sequence GIDs for the instructions above:
    # sort -t: -k3 -n /etc/group
The following command is useful for converting dates in /etc/shadow to
calendar dates:
    # date -d "1 January 1970 + lastchg days"
:::
#### \"Filesystem\" - Disambiguation
Several meanings for the term:
1.  The way files are physically written to storage devices, as in the
    ext3, Fat-32, NTFS filesystems, or etc.
    > Example: \"Create a VFAT filesystem on a USB drive if you want a
    > device that works for both Windows and Linux.\"
2.  The collection of files and directories stored on a particular
    storage device.
    > Example: \"On any device using Ext 2/3/4, you should find a
    > \"lost+found\" directory at the root level of the filesystem.\"
3.  The unified directory structure which logically organizes files.
    > Example: \"In contrast with Windows, which accesses drives with
    > various drive letters, on Linux all storage devices are mounted
    > into a single filesystem.\"
4.  The standard which defines how directories should be structured and
    utilized in Linux
    > Example: \"In a Linux filesystem, third party applications should
    > generally be installed in /opt.\"
#### Linux Filesystem Hierarchy
The directory structure of a Linux system is standardized through the
Filesystem Hierarchy Standard (explained at
)
The Linux Manual system has an abbreviated reference:
> `$ man 7 hier`
Red Hat has a more complete description, along with RedHat-specific
implementation decisions in their **Storage Administration Guide** at
#### Disk and Filesystem tools
-   `fdisk` or `parted` \-- Used to partition hard disks or other block
    devices
-   `mkfs` and variants \-- Used to create filesystems on block devices
    (actually a front-end for a variety of FS-specific tools)
-   `fsck` and variants \-- Used to run filesystem checks (a front-end
    to FS specific tools)
-   `mount` \-- Used to mount a filesystem to a specific location in the
    directory structure
-   `/etc/fstab` \-- Configuration file used to describe the filesystems
    that should be persistently mounted
-   `blkid` \-- used to identify filesystems or other in-use devices by
    UUID or filesystem labels.
-   `df` \-- used to display the capacity and utilization % of mounted
    filesystems.
-   `partx` \-- used to force implementation of a new partition table on
    an in-use device w/o the need to reboot.
-   `partprobe`
#### Working with Partitions
Overview of process for using Basic Storage Devices:
-   Install the device or otherwise make it available to the system.
-   Partition it with `fdisk` or `parted`.
-   Create a filesystem on the partition with mkfs or other tools.
-   Choose or create a directory to serve as a mount point.
-   Mount the partition.
-   Add an entry to `/etc/fstab` to make it persistent.
#### Exercise 2-2: Work with Basic Partitions
On your Host machine:
-   Use `virt-manager` to create a 20 GB virtual disk for your Client
    VM.
On your Client virtual machine:
1.  Use `fdisk -luc` to verify that it is seen after a reboot of the VM.
2.  Use fdisk to create a 5 GB partition (leaving the remainder unused.
3.  Create an ext4 filesystem on the new partition.
4.  Create a new directory at /shared/villains and mount the new
    filesystem there.
5.  Verify with `df -h` that the new space is seen.
6.  Create an entry in `/etc/fstab` to make it persistent.
Optional Steps:
-   Save a test file to `/shared/villains/`.
-   Use `ls` to verify that it was saved as intended.
-   Use `umount` to unmount the new partition.
-   Use `ls` to verify that the file is no longer seen.
-   Remount the partition.
#### Working with Logical Volume Management
Overview of process for using Logical Volume Management:
-   Install the device or otherwise make it available to the system.
-   Create a type `8e` partition with `fdisk` or `parted`.
-   Initialize the partition as a physical volume with `pvcreate`.
-   Add the storage of the PV to a volume group with `vgcreate`.
-   Allocate storage from the volume group to a logical volume with
    `lvcreate`.
-   Create a filesystem on the logical volume with mkfs or other tools.
-   Choose or create a directory to serve as a mount point.
-   Mount the partition.
-   Add an entry to `/etc/fstab` to make it persistent.
#### Removing Logical Volume structures
-   Unmount the lv you want to remove
-   Edit /etc/fstab to remove its entry
-   Remove the logical volume: `lvremove /dev//`
-   Before removing a VG, ensure there are no more LVs within it.
-   Remove the volume group: `vgremove /dev/`
-   Remove the LVM signature from the partitions: `pvremove /dev/`
#### Exercise 2-3: Work with Logical Volume Management
On your Client virtual machine:
> 1.  From the unallocated space on the disk you added in the previous
>     exercise, create a 5 GB partition (type 8e) for LVM
> 2.  Initialize it with pvcreate
> 3.  Use vgcreate to create a volume group named \"shared\" from the
>     physical volume.
> 4.  Use lvcreate to create a 2.5 GB logical volume called \"goodguys\"
>     from the \"shared\" volume group.
> 5.  Create an ext3 filesystem on `/dev/shared/goodguys`.
> 6.  Create a directory `/shared/goodguys` and mount the LV there.
> 7.  Create an entry in `/etc/fstab` for persistance.
> 8.  Use `df -h` to verify the available space.
> 9.  Use lvextend to add another 1 GB to `/dev/shared/goodguys`.
> 10. Use resize2fs to grow the filesystem on `/dev/shared/goodguys` to
>     use the new space.
> 11. use `df -h` to verify the available space.
#### Commands to Know
fdisk
> -   Always use -u and -c for best compatibility with newer storage
>     devices
> -   Can\'t create partitions \>= 2TB, use parted with GPT instead
parted
> -   fdisk-replacement that is GPT-aware. Required for drives \> 2TB.
mkfs
> -   Used to create filesystems on devices
> -   Front-end for other filesystem-specific tools (usually named
>     mkfs.\)
blkid
> -   Shows device name, Fileystem Labels, and UUID of detected block
>     devices.
> -   May not show block devices until a filesystem is created on them.
> -   May not show block devices used in non-standard ways (for example,
>     a filesystem on a whole disk instead of on a partition)
mount
> -   used to make a new filesystem available
#### Working with LUKS encrypted storage
cryptsetup-luks-1.1.2-2.el6.x86_64
Overview of process for using LUKS encryption:
-   Create a new partition
-   Encrypt it with `cryptsetup luksFormat /dev/`
-   Open the encrypted device and assign it a name with
    `cryptsetup luksOpen /dev/ `
-   Create a filesystem on the named device (/dev/mapper/\)
-   Create a mountpoint for the device
-   Mount the device
To lock the volume:
-   unmount it
-   Use `cryptsetup luksClose ` to remove the decryption mapping
#### Persistent mounting of LUKS devices
To persistently mount it
> -   Create an entry in /etc/crypttab:
>
>          /dev/ |)>
>
> -   If the password field is \"none\" or left blank, the system will
>     prompt for a password.
>
> -   Create an entry in /etc/fstab
>
> ::: note
> ::: title
> Note
> :::
>
> At reboot, the password prompt goes only to the default console. If
> console redirection is enabled, as it might be in the case of enabling
> a virtual machine to accessible through `virsh console `, then
> the only place where the prompt is seen and the passphrase can be
> entered is at that redirected console.
> :::
#### Exercise 2-4: Create a LUKS-encrypted volume
#### Working with SWAP
Overview of process for adding SWAP space using a partition:
-   Create a type 82 partition
-   Initialize as swap with `mkswap /dev/`
-   Identify the UUID with `blkid`
-   Add an `/etc/fstab` line:
        UUID= swap swap defaults 0 0
-   Activate the new swap space with: `swapon -a`
#### Using a file for SWAP
Overview of process for adding SWAP space using a file:
-   create a pre-allocated file of the desired size:
        dd if=/dev/zero of=/path/to/ bs=1M count=
-   Initialize as swap with `mkswap /path/to/`
-   Add an `/etc/fstab` line:
        /path/to/ swap swap defaults 0 0
-   Activate the new swap space with: `swapon -a`
#### Exercise 2-5: Add a new SWAP partition
On your Client virtual machine:
> 1.  Use `free -m` to report the amount of swap in mebibytes (MiB)[^1]
>     your system is configured to use. Note that number.
> 2.  Create a new partition (this may be a new primary partition, or a
>     logical partition on an extended partition, or you may need to add
>     a new virtual disk, depending on your needs \-- consult your
>     instructor if you need help making this determination) of 512 MiB
>     and make it a \"Linux Swap\" partition (type 82).
> 3.  Initialize it with `mkswap`. Note the \"UUID=\...\" in the output.
> 4.  Configure `/etc/fstab` to use that device by device name or,
>     preferably, by UUID as swap.
> 5.  Activate the new swap partition with `swapon`.
> 6.  Use `free -m` to confirm that the new swap space is available.
#### Exercise 2-6: Add a new SWAP file
On your Client virtual machine: