### 0x04 深入攻防
前面说到JS防御点击劫持的方式，事实上，点击劫持刚被提出时，几乎没有站点做了防御，之后有很多站点使用JS的方式防御，但是JS的防御代码存在被绕过的可能性，前面提到的斯坦福大学的论文就详细说明了绕过的各种方式。事实上，经过笔者测试，论文里提到的很多方法在现在最新的版本的浏览Chrome和IE上都无法重现了，浏览器可能已经针对性地修复了一些问题，但用户有可能仍然使用低版本浏览器，仍然要注意这些问题
JS防御代码的主要绕过方式有4种
  * JS接口函数的hook
  * 检查代码的绕过
  * 部分浏览器特性导致的绕过
  * JS禁用
#### JS接口函数的hook
站点防御方式
    if (top.location != location) {
        top.location = self.location;
    }
方法一：onBeforeUnload事件触发：在即将离开当前页面(刷新或关闭)时执行自定义函数
攻击方式
跳转时诱惑用户点击留在此页，如下图所示，跳转操作就不会触发。此方法在IE浏览器上仍然有效，Chrome已经无效，应该做了相应的规则处理
方法二：重写top.location，此方法在IE和Chrome上都无效，某些版本Safari有效
攻击方式，重写top.location，使该接口无效
    // 或者
#### 检查代码的绕过
这种方式具有特殊性，需要站点对点击劫持的检查代码本身有逻辑错误，可以绕过，而绕过方式就是安全里比较常规的编码、特殊符号、大小写等fuzz手段
方法一：双重框架
当站点防御方式为
    if (top.location != location) {
        parent.location = self.location;
    }
使用双层框架，攻击者先嵌入一个页面，再在那个页面里嵌入受害站点，某些版本浏览器会在第一跳转后parent对象仍然不变，导致防御失败。时间有限我没有尝试
    Attacker top frame:
    Attacker sub-frame:
双层框架还有另一种情况，即比如微软允许google嵌套的页面，检查的top.location是google则放过，但google没有点击劫持的防御，那我们可以嵌套google的页面，则可以间接嵌套微软的页面。此时问题发生在当允许被一个站点嵌套时，安全取决于防护做得最差的那一个
方法二：referrer检查
有的站点后端对referrer检查，不符合就不返回响应包或者返回错误信息，一般使用正则匹配，不是专门有安全方面意识的情况下，写的匹配语句可能被绕过
方法三：top.location检查绕过
防御方式：
    if (filter(top.location)) {
        top.location = self.location;
    }
以上filter函数可能对站点名称做一些匹配，可以尝试使用fuzz的方式绕过，匹配规则不完全的情况下可以绕过
方法四：手机端一类站点绕过
简单讲就是example.com加了，但是和example.com功能一样的m.example.com没加，属于疏漏
#### 部分浏览器特性的绕过
这部分实验比较复杂，且出现情况特定，了解一下就好，详情可以看论文
  * IE8和Chrome引入了XSS过滤器，我们在可以写一段恶意代码，利用浏览器XSS过滤器的匹配规则，禁用iframe标签页面里的JS代码或者禁用部分代码，这段恶意代码的构造就比较复杂，需要研究者专门针对性测试
  * OnBeforeUnload-204冲刷，很多浏览器（IE7、IE8、Chrome、FireFox）可以让一个攻击者通过修改onBeforeUnload来重复提交location到204页面，不断冲刷会取消原始locaiton请求，和之前OnBeforeUnload差不多，但不需要和用户交互
  * IE对iframe有一个`security='restricted'`属性，Chrome对iframe有一个`sandbox`属性，这些可以用来禁用被嵌套页面的JS，导致防御代码无效，但IE的这个属性也无法传送Cookie，也就失去了点击劫持的意义，Chrome仍然可以传送Cookie
  * IE和FireFox实现的`document.designMode`可以在框架页面中被开启，会禁用JS，可以传送Cookie
#### 禁用JS
不管怎么用JS防御，被浏览器或者用户使用插件禁用JS就没有作用了
### 0x05 案例与总结
最后，使用facebook的一个案例做个总结
facebook知道JS代码可以被绕过被禁用的特性，为了真正防御点击劫持，在某个版本使用了以下的防御代码：这段代码添加了一个黑色9999*9999的像素块，50%透明，所有facebook的页面都在这个div之中，点击后会被跳转，不跳转点击也没有用，可以说是非常精巧了
    if (top != self){
        window.document.write("")
    }
上面防御代码可以用以下方式绕过
         window.scrollTo(10200, 0);
scrollTo function动态移动frame到中心，清除了点击会跳转的div，防御代码失效
精巧如facebook的代码仍然被绕过，再回头看我们推荐的防御方式
X-Frame-Options头部存在以下问题
  * 改策略需要为每个页面指定，这可能会使部署复杂化，可以在一些重要页面部署，比如支付和登录，当然，框架或Web容器部署则无问题
  * 代理在添加和删除头部方面是臭名昭著的，可能会去掉头部X-Frame-Options导致不能防护，就像通信通信给HTTP页面嵌广告，HTTPS则无问题
JS的防御代码：我们上面推荐的JS防御代码只是已知还未存在绕过方式的代码，特点如下
  * 页面加载时，样式表会隐藏页面上所有内容，禁用js，页面保持为空
  * 类似的，如果页面被框架，将保持空白或者frame bust
  * frame bust代码被阻止，如被hook，页面会保持空白
  * 该脚本仅显示内容页面不在框架中运行的文档
  * 注意用户使用NoScript也会不显示页面，需要后备机制
  * 实验中没有发现任何用户可感知的渲染上的延迟
  * 是目前最安全的方案而不是一定没有问题的方案
建议重要功能还是加上多因素认证
注意漏洞修复方式，不要以为修复了实际上没有用，所以对漏洞和业务的理解都很重要，很多情况下需要安全去积极了解业务或者业务主动询问安全来确定更好的修复方案
### 0x06 参考资料
《白帽子讲Web安全》
[《Busting Frame Busting:  
a Study of Clickjacking Vulnerabilities on Popular
Sites》](http://seclab.stanford.edu/websec/framebusting/framebust.pdf)