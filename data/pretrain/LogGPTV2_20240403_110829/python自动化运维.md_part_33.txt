网变更任务。另外在用户体验方面，模拟Linux终端效果，接收返回串，并使用
Psyco模块对Python运行程序进行加速。任何人都可以根据自身的业务特点对
OManager平台进行扩展，现已支持XML与现有资产平台进行对接。平台登录、
管理界面见图16-1和图16-2。
图16-1 平台登录页面
图16-2 平台主界面
16.2 系统构架设计
OManager平台采用了两层设计模式。
第一层为客户端交互层，采用了wxpython+xrc+rpyc+MySQL等技术，实现了
客户端与主控服务器端直连通信，rpyc分布式计算框架负责传输与计算，传输采
用加密（RC4算法）方式，保证平台整体安全性；
第二层为集群主控端服务层，支持Saltstack、Ansible、Func等平台，且具备
多机服务的能力。系统架构图见图16-3。
图16-3 系统架构图
从图16-3中可以看出系统两个层次的结构，首先管理员在办公电脑安装
OManager客户端软件包，作为rpyc客户端向rpyc服务器发送加密指令串，指令串
通过“RC4+b64encode+密钥key”进行加密，rpyc服务器端同时也是Saltstack、
Ansible、Func等的主控端，主控端将接收的数据通过“RC4+b64decode+密钥
key”进行解密，解析成OManager调用的任务模块，结合Saltstack、Ansible或Func
向目标业务服务器集群发送执行任务，执行完毕后，对返回的执行结果做加密/
解密处理，最后返回给客户端，整个任务模块分发执行流程结束。
16.3 数据库结构设计
16.3.1 数据库分析
OManager平台采用了开源数据库MySQL以存储数据，数据库名为
OManager，数据库总共有3张表，表信息说明如下。
·upgrade：系统升级表；
·users：用户表；
·user_logs：操作日志表。
16.3.2 数据字典
1）upgrade系统升级表。
2）user_logs操作日志表。
3）users用户表。
16.3.3 数据库模型
考虑到平台的通用性，OManager的数据库结构设计得非常简单，只涉及账
号及操作日志等基础表，平台中服务器分类及清单来源于企业资产库生成的
XML文件。数据库中users表存储了管理员的账号信息；user_logs表存储了管理
员的操作日志，表中字段“user”配置外键，与users表中的“admin”字段进行关
联，upgrade表存储OManager的版本号，系统数据库模型见图16-4。
图16-4 系统数据库模型
16.4 系统环境部署
16.4.1 系统环境说明
OManager由wxPython2.8、rpyc-3.2.3、psyco-1.6等开源组件构建。为了便于
读者理解，下面对平台的运行环境、安装部署、开发环境优化等进行详细说
明，环境设备角色表如表16-1所示。
表16-1 系统环境说明表
16.4.2 系统环境搭建
OManager平台基于多种Python第三方模块实现，包括wxpython、rpyc、
MySQL-python、psyco、pywin32等，这些开源组件无论是在开发效率还是运行
速度方面都赢得了很好的口碑，尤其容易上手，可以做到快速开发、快速实
现。wxPython官网提供了非常丰富的demo代码，可以帮助开发人员做到边学边
用，下面介绍平台所需模块及功能说明。
·MySQL-python-1.2.4b4.win32-py2.7.exe：Python访问MySQL的API模块。
·psyco-1.6.win32-py25.exe：Python程序提速模块。
·pyinstaller-2.0.zip：Python程序打包工具，安装包制作推荐使用Smart Install
Maker。
·pywin32-218.win32-py2.7.exe：Windows系统API访问库。
·rpyc-3.2.3.win32.exe：分布式计算框架。
·wxPython2.8-win32-docs-demos-2.8.12.1.exe：wxPython Demo（可选项）。
·wxPython2.8-win32-unicode-2.8.12.1-py27.exe：Python GUI图形库。
平台重点文件及目录说明见图16-5。
图16-5 系统目录结构及说明
16.5 系统功能模块设计
16.5.1 用户登录模块
OManager平台的登录采用了双重安全校验机制：一种为传统的用户名与密
码匹配，另一种为密钥文件校验方式，实现的原理是在密钥文件中输入任意随
机字符串，通过平台自带的md5sum.exe工具计算出该文件的md5，将生成的md5
字符串更新到users（用户表）管理员账号对应的Privatekey字段，以root用户的
密钥numbers/root.pem为例，使用方法见图16-6和图16-7。
图16-6 查看密钥文件md5
图16-7 数据库存储的密钥文件md5数据
管理员登录时首先获得选择密钥文件的md5，再与数据库中的Privatekey字段
进行匹配，建议由超级管理员提前开设好所有用户的账号信息，包括用户名、
密码及密钥。再统一将密钥文件以人为单位进行发放。验证的实现方法源码如
下：
def Check（self，name， password，Privatekey）：
import md5
m = md5.new（password） #使用md5模块计算密码的md5串
md5pass=m.hexdigest（）
myrow=DBclass（） #创建数据库连接对象（自定义类）
sql = "select admin，privileges from users where admin='%s' and
passwd='%s' \
and Privatekey='%s'"% （name， md5pass，Privatekey） #参照MySQL中的
用户名、
#密码、密钥进行校验
result = myrow.fetchallq（sql）
return result #返回结果集
下面是计算密钥文件md5的实现方法，主要用到了hashlib模块：
#计算文件md5值，参数fileName为实体文件路径；参数excludeLine为排除的文本行；
#参数includeLine为额外包含的行
def md5（fileName， excludeLine=""， includeLine=""）：
m = hashlib.md5（） #使用hashlib模块生成一个md5 hash对象
try：
fd = open（fileName，"rb"） #打开密钥文件
except IOError：
print "Unable to open the file in readmode："， filename
return
eachLine = fd.readline（）
while eachLine： #遍历密钥文件
if excludeLine and eachLine.startswith（excludeLine）： #排除指定的
行
continue
m.update（eachLine） #用update方法对行字符串进行md5加密且不断做更新处理
eachLine = fd.readline（）
m.update（includeLine） #对额外包含的行做更新和加密处理
fd.close（）
return m.hexdigest（） #返回十六进制结果
调用计算文件密钥md5方法：
md5（self.Privatekey.GetValue（）） #self.Privatekey.GetValue（）为用户选择的
密钥文件路径
16.5.2 系统配置功能
OManager平台将常用的参数配置化，包括连接数据库、主控端、传输密钥
等信息，当外部环境发生变化时无须做代码变更，简单更新配置即可，提高了
平台的易用性，降低使用门槛，具体是通过ConfigParser模块操作ini文件实现，
效果见图16-8。
图16-8 系统配置功能
手工修改ini文件与界面操作达到的效果是一样的，平台ini文件格式如下：
【data/config.ini】
[system]
height = 765
width = 1024
version = v2014
upversion = 10026
ip = 192.168.1.20
port = 11511
timeout = 10
max_servers = 10
secret_key = ctmj#&amp；8hrgow_^sj$ejt@9fzsmh_o）-=（byt5jmg=e3#foya6u
upgrade_url = http：//update.domain.com/upgrade
[db]
db_ip = 192.168.1.10
db_user = servmanageruser
db_pass = 123456#abc
db_name = OManager
使用ConfigParser模块操作ini配置文件非常方便，通过get（）、set（）方法
来读取与更新配置文件。读配置源码如下：
self.cf = ConfigParser.ConfigParser（） #创建ConfigParser对象
self.cf.read（sys.path[0]+'/data/config.ini'，encoding='utf8'） #读取配置文
件
#读取“system”节中所有键值到指定的变量
self.cf = ConfigParser.ConfigParser（）
self.cf.read（sys.path[0]+'/data/config.ini'）
self._syswidth= self.cf.get（"system"，"Width"）
self._sysheight= self.cf.get（"system"，"Height"）
self._timeout=self.cf.get（"system"，"Timeout"）
self._ip=self.cf.get（"system"，"IP"）
self._port=self.cf.get（"system"，"Port"）
self._max_servers=self.cf.get（"system"，"max_servers"）
self._secret_key=self.cf.get（"system"，"secret_key"）
self._sysversion= self.cf.get（"system"，"Version"）
self._sysUpversion= self.cf.get（"system"，"Upversion"）
self._upgrade_url= self.cf.get（"system"，"upgrade_url"）
#读取“db”节中所有键值到指定的变量
self._db_ip= self.cf.get（"db"，"db_ip"）
self._db_user= self.cf.get（"db"，"db_user"）
self._db_pass= self.cf.get（"db"，"db_pass"）
self._db_name= self.cf.get（"db"，"db_name"）
更新配置也非常简单，将get（）方法更换成set（），再指定ini的节、键、
值三个元素即可。下面是更新数据库IP参数的代码，其中
self.DB_ip.GetValue（）为输入框的内容。
self.cf.set（"db"， "db_ip"， self.DB_ip.GetValue（））
16.5.3 服务器分类模块
为了让OManager更具通用性，平台的服务器信息依赖企业现有资产库数
据，通过平台规范好的格式生成XML文件，结合Tree与ListBox控件实现功能分
类与服务器联动，效果见图16-9。
图16-9 服务器分类选择
服务器分类的组织形式与OMserver保持一致，即功能分类→业务分类→服务
器。图16-10为服务器类别的XML数据文件，用来描述服务器类别信息。
【data/ServerOptioninfo.xml】
图16-10 服务器分类的XML文件
其中，“”标签id属性值为功能分类ID号，“应用
服务器”使用子元素描述功能分类名称。服务器信息的
XML数据文件用来描述服务器的详细属性，详细内容见图16-11，属性与子元素
说明见表16-2。
【data/Serverinfo.xml】（部分内容）
图16-11 服务器信息的XML文件
表16-2 属性与子元素说明
每个管理员所负责的服务器资源通常都不一样，一般以服务器功能分类的维
度划分。OManager可为这种权限要求提供支持，实现的思路是在users表的
privileges（权限角色）字段定义服务器分类ID，其中“root”为特殊权限，代表超
级管理员，所有服务器资源都可见。账号“demo”的权限配置，以及在平台中展
示的效果见图16-12。
图16-12 用户权限配置及展示效果
当窗体（wx.Frame）初始化时，“服务器类别”控件会自动加载数据，实现的
方法是通过遍历以上提到的两个XML数据，将当前账号的权限ID列表与服务器
类别ID进行关联，获取所具备的权限，即拥有的服务器类别ID。“应用名称”则通
过服务器信息的“”元素与服务器类别ID进行匹配，实现源码如下：
import xml.etree.ElementTree as ET
import os
import sys
root_tree = ET.parse（sys.path[0]+'/data/ServerOptioninfo.xml'） #打开服务器类
别XML文档
class_tree = ET.parse（sys.path[0]+'/data/Serverinfo.xml'） #打开服务器信息
XML文档
root_doc = root_tree.getroot（） #获得服务器类别XML文档root节点
class_doc = class_tree.getroot（） #获得服务器信息XML文档root节点
class ServerClassList（）：
def Resurn_list（self，UserPrivileges）： #返回服务器类别、应用方法
ServerList_KEY=[] #定义返回的服务器类别、应用信息列表对象
serverclass=[] #定义服务器类别列表对象
serverapp=[] #定义业务应用列表对象
for root_child in root_doc： #遍历服务器类别节点
if not root_child.get（'id'） in UserPrivileges and not
UserPrivileges[0]=="root"：
continue #没有权限的服务器类别将被忽略
serverclass.append（root_child[0].text.encode（'gbk'）） #追加服务
器类
#别名称
serverapp=[]
for class_child in class_doc： #遍历服务器信息节点
#如与功能分类ID相匹配，则追加到serverapp
#通过index（）方法产生的异常判断当前是否已经存在于serverapp中
if class_child[6].text==root_child.get（'id'）：
try：
serverapp.index（class_child[4].text.encode（'gbk'））
except：
serverapp.append（class_child[4].text.encode（'gbk'））
serverclass.append（serverapp）
ServerList_KEY.append（serverclass）
serverclass=[]
#返回结果串格式：[['应用服务器'，['www.a.com'，'www.b.com']]，['数据库服务器'，
['www.c.com']]...]
return ServerList_KEY
16.5.4 系统升级功能
相比B/S结构程序，C/S结构的另一缺点是不方便升级，部分软件甚至要求重
新安装、重启计算机等操作。为了解决此问题，OManager在系统升级方面结合
了B/S的模式，将升级包放在远端，由管理员触发升级操作，同时不影响当前的
其他操作，重启OManager程序后即可完成升级。OManager系统升级流程图见图
16-13。
图16-13 系统升级流程图
OManager系统升级的原理：首先将升级描述文件（updateMS.xml）、升级包
上传至版本服务器，由管理员触发升级操作，再通过urllib模块实现HTTP方式下
载updateMS.xml文件并进行分析，获取所有需要升级的程序包，包括远程URL及
下载本地存储地址，最后遍历下载所有升级包到指定的位置，完成整个升级过
程。下面是升级描述文件updateMS.xml的示例：
【tmp/updateMS.xml】
data/Serverinfo.xml
/data/Serverinfo.xml