### 1. Data Collection and Ground-Truth Labeling

To understand evasion techniques and train our machine learning classifiers, we first collect ground-truth phishing pages. We avoid using existing automated phishing detection tools for labeling, as these tools may be vulnerable to evasion. Instead, we rely on user-reported and manually verified phishing pages. Specifically, we use PhishTank, an online service that leverages crowdsourcing to collect phishing URLs. Any internet user can submit phishing URLs, and others can verify if the reported pages are indeed phishing.

#### PhishTank Crawling
From February 2 to April 10, 2018, we set up a crawler to collect phishing URLs under all 204 brand names provided by PhishTank. We excluded the "other" category as it does not specify the target brand. Our crawler checked the latest list five times a day to ensure we captured newly submitted URLs. We focused on URLs verified as phishing and marked as "active," allowing us to immediately crawl live phishing webpages. For each URL, we used a dynamic crawler to obtain both web and mobile pages and took screenshots of both.

In total, we crawled 6,755 unique phishing URLs under 138 brands. The remaining 66 brands had no URL submissions during our data collection period. As shown in Figure 5, the number of phishing pages per brand is highly skewed. The top 8 popular brands cover 4,004 phishing URLs, accounting for 59% of the total.

#### Popularity and Squatting
To provide context for the phishing URLs, we examined the ranking of their domains on Alexa. As shown in Figure 6, 70% of the phishing URLs are ranked beyond the Alexa top 1 million, suggesting that most phishing pages are hosted on unpopular domains. Further analysis revealed that 000webhostapp is the most frequently used hosting domain (914 URLs), followed by sites.google and drive.google (140 URLs). This indicates that web hosting services have been abused for phishing.

We also analyzed squatting domains in the phishing URLs. As shown in Figure 7, 91% of phishing URLs did not use squatting domains. We found one homograph squatting domain (gooqle.online) and one typo squatting domain (paypals.center). There were no bits squatting or wrongTLD squatting in the PhishTank, confirming that we cannot rely on phishing blacklists to study squatting phishing.

#### Ground-Truth Labeling
Although the phishing URLs from PhishTank have been validated, some pages may have been replaced or taken down by the time we crawled them. Therefore, we manually examined the top 8 brands (4,004 URLs, 59.1%) to label the crawled pages. Surprisingly, only 1,731 out of 4,004 (43.2%) were still active phishing pages, while the rest (2,273) were no longer phishing (benign). This suggests that phishing pages have a very short lifetime, with many being taken down or replaced with legitimate pages before they are listed on PhishTank.

### 2. Evasion Measurement

Based on the ground-truth data, we examined common evasive behaviors of phishing pages. Our evasion measurement focused on three main aspects: image layout, string text in the source code, and obfuscation indicators in JavaScript code. These are common areas where adversaries manipulate content to hide malicious features while maintaining a legitimate appearance.

#### Layout Obfuscation
Many phishing detection methods assume that phishing pages will mimic the legitimate pages of the target brands, leading to high-level layout similarity. To examine potential evasions against page layout matching, we computed Image hashes to compare the visual similarity of phishing and real pages. The (dis)similarity was measured by the Hamming distance between two image hashes.

We found that layout obfuscation is widely applied, with phishing pages often changing their layout significantly to evade detection. Figure 8 shows an example for the brand PayPal, where the left-most page is the official PayPal page, and the other three are phishing pages with different image hash distances (7, 24, and 36) compared to the real page. With a distance of 7, the phishing page is visually similar to the original, but at distances of 24 and 36, the pages look different yet still appear legitimate. These pages would likely be missed by visual similarity-based detectors.

Figure 9 shows the average image hash distance to the original pages for all phishing pages of different brands. Most brands have an average distance around 20 or higher, indicating that layout obfuscation is very common. Different brands have varying levels of visual similarity, making it difficult to set a universal threshold for all brands.

#### String Obfuscation
String obfuscation involves hiding important text and keywords in the HTML source code. For example, attackers may change the brand name "PayPal" to "PayPaI" or embed the text in images. We performed a simple measurement by looking for the brand name in the phishing pages' HTML source. If the target brand name was not found, we considered the page to be string-obfuscated. Table 6 shows the percentage of string-obfuscated pages for each brand, indicating that simple string matching is less effective.

#### Code Obfuscation
JavaScript code can also be obfuscated to hide its real purpose. We used known obfuscation indicators from FrameHanger to measure the level of code obfuscation in phishing pages. Indicators include string functions, dynamic evaluation, and special characters. For each phishing page, we downloaded and parsed the JavaScript code into an AST and extracted obfuscation indicators. Table 6 presents the percentage of phishing pages containing obfuscation indicators, representing a lower bound of code obfuscation in phishing.

### 3. Machine Learning Detection

After understanding common evasion techniques, we designed a new machine learning classifier to detect squatting phishing pages. The key is to introduce more reliable features. Below, we outline our feature engineering process, training the classifier using ground-truth data from PhishTank, and presenting the accuracy evaluation results.

#### Feature Engineering
Based on our analysis, we identified that visual, text-based, and JavaScript-based features can be evaded by obfuscations. We designed new features to compensate for these. Specifically, we focused on suspicious squatting domains that attempt to impersonate target brands. Among these, two main hints for phishing are:
1. The page contains keywords related to the target brands in plaintext, images, or dynamically generated content.
2. The page contains forms to trick users into entering important information, such as login forms for passwords or payment forms for credit card information.

To overcome obfuscations, we extracted features from the screenshots of suspicious pages using OCR to extract text, traditional features from HTML, and form-based features. These features are independent of specific brands, allowing the classifier to focus on the nature of phishing.

#### Image-based OCR Features
We used OCR to extract text from page screenshots. Tesseract, a state-of-the-art OCR engine developed by Google, was used for this purpose. Tesseract can recognize texts of different sizes and backgrounds, with an error rate below 3%. By applying Tesseract to the crawled screenshots, we could extract keywords like "paypal" and "facebook" from logos and "email" and "password" from input boxes. These extracted keywords serve as OCR features.

#### Text-based Lexical Features
We complemented OCR features with text-based features from HTML. We extracted and parsed text elements from HTML tags such as h, p, a, and title. We did not consider text dynamically generated by JavaScript due to the high overhead. These keywords serve as lexical features.

#### Form-based Features
We identified forms from HTML and collected their attributes, focusing on type, name, submit, and action. These form-based features help in detecting phishing attempts that involve collecting sensitive information.

### 4. Conclusion

By understanding and addressing common evasion techniques, we designed a robust machine learning classifier to detect squatting phishing pages. Our approach includes a comprehensive feature engineering process, leveraging OCR, text, and form-based features. This allows us to effectively identify phishing pages, even when they employ sophisticated evasion techniques.