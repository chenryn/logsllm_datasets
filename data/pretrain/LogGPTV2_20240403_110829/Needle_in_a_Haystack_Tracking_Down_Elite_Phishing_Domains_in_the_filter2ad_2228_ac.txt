We first collect ground-truth phishing pages to understand evasion
and train our machine learning classifiers. Here, we don’t want to
use any existing automated phishing detection tools to label the
ground-truth since existing tools may be vulnerable to evasions.
Instead, we rely on user reported and manually verified phishing
pages as ground-truth. More specifically, we choose PhishTank [9]
which is an online services that leverage crowdsourcing to collect
phishing URLs. Any Internet users can submit phishing URLs and
others can help to verify if the reported pages are truly phishing.
From February 2 to April 10 in 2018,
PhishTank Crawling.
we set up a crawler to crawl the phishing URLs under all 204 brand
names provided by PhishTank. We ignore the brand named “other”
since it does not specify the target brand. For each brand, our
crawler checked the latest list 5 times a day to make sure we don’t
miss any newly submitted URLs. We focus on URLs that have been
verified as phishing and URLs that are marked as “active”. This
allows us to immediately crawl the live phishing webpages under
the reported URL. Same as before, for each Phishing URLs, we use
a dynamic crawler to obtain its web and mobile pages and take
screenshots for both pages.
In total, we crawled 6,755 unique phishing URLs under 138
brands. The other 66 brands do not have any URL submissions
during our data collection period. As shown in Figure 5, the num-
ber of phishing pages per brand is highly skewed. The top 8 popular
brands cover 4004 phishing URLs which counts for 59% of total
phishing URLs.
To provide contexts for the phish-
Popularity and Squatting.
ing URLs, we first examine the ranking of their domains on Alexa
IMC ’18, October 31–November 2, 2018, Boston, MA, USA
Ke Tian et al.
Figure 5: Accumulated % phishing URLs
from top brands in PhishTank.
Figure 6: Alexa ranking of phishing
URLs in PhishTank.
Brand
PayPal
Facebook
Microsoft
Santander UK
Google
Ebay
Aode
DropBox
SubTotal
# of URLs
1306
1059
580
336
218
189
166
150
4004
Percent (%) Valid Phishing
19.3
15.6
8.6
5.0
3.2
2.8
2.4
2.2
59.1
348
734
285
30
95
90
79
70
1731
Table 5: Top 8 brands in PhishTank cover 4004 phishing
URLs (59.1%). Manual verification shows that 1731 pages are
true phishing pages.
top 1 Million list. As shown in Figure 6, the vast majority (4749,
70%) of the phishing URLs are ranked beyond the Alexa top 1 mil-
lion. This suggests most phishing pages are hosted on unpopular
domains. A further analysis shows that 000webhostapp is most
frequently used hosting domains for phishing pages (914 URLs)
followed by sites.google and drive.google (140 URLs). The result
suggests web hosting services have been abused by phishing.
We then analyze the squatting domains in the phishing URLs. As
shown in Figure 7, the majority of phishing URLs are not squatting
phishing — 6,156 (91%) of phishing URLs did not use squatting
domains. In addition to the combo-squatting domains, we find one
homograph squatting gooqle.online for google, one typo squatting
paypals.center for paypal. There is no bits squatting or wrongTLD
squatting in the PhishTank. This confirms that we cannot rely on
phishing blacklists to study squatting phishing.
Although the phishing URLs from
Ground Truth Labeling.
PhishTank have been “validated”, it is possible some of phishing
pages have been replaced or taken-down when we crawl the pages.
To this end, we cannot simply label all the crawled pages as “phish-
ing”. To obtain the ground-truth label, we select the top 8 brands
(4,004 URLs, 59.1%) to manually examine the crawled pages (screen-
shots). As shown in Table 5, surprisingly, it turns out a large number
of pages are no longer considered as phishing pages during the
time of crawling. Only 1,731 out of 4,004 (43.2%) are still phishing
pages. The rest 2,273 pages are no longer phishing pages (benign).
Recall that our crawler has been monitoring the newly submitted
URLs to PhishTank and immediately crawled their pages. The re-
sults suggest that phishing pages have a very short lifetime. Many
phishing URLs have been taken-down or replaced with legitimate
pages before the URLs are listed on PhishTank.
Figure 7: PhishTank squatting domains
distribution.
4.2 Evasion Measurement
Based on the ground-truth data, we next examine the common
evasive behavior of phishing pages. We will use the measurement
results to derive new features to more robust phishing page detec-
tion. Our evasion measurement focuses on three main aspects: the
image layout, the string text in the source code, and obfuscation
indicators in the javascript code. These are common places where
adversaries can manipulate the content to hide its malicious fea-
tures, while still giving the web page a legitimate look. For this
analysis, we focus on web version of the pages. We find that 96% of
the pages on PhishTank have the same underlying HTML sources
for both the web and mobile versions. This indicates that the most
attackers did not show different pages to web and mobile users (i.e.
no cloaking).
Many phishing detection methods as-
Layout Obfuscation.
sume that the phishing pages will mimic the legitimate pages of
the target brands. As a result, their page layout should share a high-
level of similarity [47]. Phishing detection tools may apply some
fuzzy hashing functions to the page screenshots and match them
against the hash of the real pages. To examine the potential evasions
against page layout matching, we compute the Image hash [6] to
compare the visual similarity of the phishing pages and the real
pages of the target brands. The (dis)similarity is measured by the
hamming distance between two image hashes.
We find that layout obfuscation is widely applied, and phishing
pages often change their layout greatly to evade detection. Figure 8
shows a real example in our dataset for brand paypal. The left-most
page is the official paypal page. The other 3 pages are phishing
pages with different image hash distances 7, 24 and 36 respectively
compared to the real pages. With a distance of 7, the phishing page
is still visually similar to the original page. When the distance goes
to 24 and 36, the pages look different from the original pages but
still have a legitimate looking. Those pages would be easily missed
by visual similarity based detectors.
Figure 9 shows the average image hash distance to the origi-
nal pages for all phishing pages of different brands. We show that
most brands have an average distance around 20 or higher, suggest-
ing that layout obfuscation is very common. In addition, different
brands have a different level of visual similarity, which makes it
difficult to set a universal threshold that works for all the brands.
These evasion steps would likely to render visual similarity based
detection methods ineffective.
String obfuscation is hiding important
String Obfuscation.
text and keywords in the HTML source code. For example, attackers
 0 20 40 60 80 100 20 40 60 80 100 120 140Accumulated % of DomainsBrand Index 200 1200 2200 3200 4200 5200(0-1000](1000-1e4](1e4-1e5](1e5-1e6](1e6+# of Domains24610424442744749 0 1000 2000 3000 4000 5000 6000 7000HomographBitsTypoComboWrongTLDNo# of Domains40359206156Tracking Down Elite Phishing Domains in the Wild
IMC ’18, October 31–November 2, 2018, Boston, MA, USA
(a) The original paypal page.
(b) Phishing page (distance 7).
(c) Phishing page (distance 24).
(d) Phishing page (distance 38).
Figure 8: An example of page layout obfuscation of phishing pages (paypal).
String Obfuscated
30 (100%)
200 (70.2%)
38 (48.1%)
259 (35.3%)
16 (22.9%)
61 (17.5%)
10 (10.5%)
8 (8.9%)
Brand
Santander
Microsoft
Adobe
Facebook
Dropbox
PayPal
Google
Ebay
Code Obfuscated
4 (13.3%)
127 (44.6%)
15 (18.9%)
342 (46.6%)
1 (1.5%)
140 (40.2%)
11 (11.6%)
9 (10.0%)
Figure 9: Average Image hash distance and standard vari-
ance for phishing pages of different brands.
may want to hide keywords related to the target brand names to
avoid text-matching based detection [39]. For example, in a phishing
page that impersonates paypal, we find that the brand name string
is obfuscated as “PayPaI”, where the “l” (the lower case of “L”) is
changed to “I” (the upper case of “i”). Another common technique
is to delete all related text about the brand name paypal but instead
put the text into images to display them to users. From the users’
perspective, the resulting page will still look similar.
We perform a simple measurement of text string obfuscation by
looking for the brand name in the phishing pages’ HTML source.
Given a phishing page (and its target brand), we first extract all the
texts from the HTML source. If the target brand name is not within
the texts, then we regard the phishing page as a string obfuscated
page. Table 6 shows the percentage of string obfuscated pages
for each brand. For example, 70.2% of microsoft phishing pages
are string obfuscated. 35.3% of facebook phishing pages are string
obfuscated. This suggests that simple string matching is less likely
to be effective.
Javascript code may also apply obfuscation
Code Obfuscation.
to hide their real purposes. This is a well-studied area and we use
known obfuscation indicators to measure the level of code obfus-
cation in the phishing pages. Obfuscation indicators are borrowed
from FrameHanger [59]. According to previous studies [38, 63],
string functions (e.g., fromChar and charCodeAt), dynamic evalu-
ation (e.g., eval) and special characters are heavily used for code
obfuscation. For each phishing page, we download and parse the
JavaScript code into an AST (abstract syntax tree). We then use
AST to extract obfuscation indicators.
Table 6 presents the percentage of phishing pages that contain
obfuscation indicators. Since we focus on strong and well-known
indicators only, the results are likely to represent a lower bound of
code obfuscation in phishing. For example, we find that some Adobe
phishing pages adopt php script “action.php” for login forms. The
script is invoked from a php file stored in a relative path. Automated
Table 6: String and code obfuscation in phishing pages.
analysis of php code (in a relative path) to detect obfuscation is a
challenging problem itself.
5 MACHINE-LEARNING DETECTION
After understanding the common evasion techniques, we now de-
sign a new machine learning based classifier to detect squatting
phishing pages. The key is to introduce more reliable features. Be-
low, we first introduce our feature engineering process and then
we train the classifier using the ground-truth data obtained from
PhishTank. Finally, we present the accuracy evaluation results.
5.1 Feature Engineering
Based on the analysis in §4.2, we show that visual features, text-
based features and javascript based features can be evaded by obfus-
cations. We need to design new features to compensate for existing
ones. More specifically, we are examining squatting domains that
are already suspicious candidates that attempt to impersonate the
target brands. Among these suspicious pages, there are two main
hints for phishing. First, the page contains some keywords related to
the target brands either in the form of plaintext, images, or dynam-
ically generated content by Javascripts. Second, the page contains
some “forms” to trick users to enter important information. For
example, this can be a login form to collect passwords or payment
forms to collect credit card information.
To overcome the obfuscations, our intuition is that no matter
how the attackers hide the keywords in the HTML level, the infor-
mation will be visually displayed to users to complete the deception.
To this end, we extract our main features from the screenshots of
the suspicious pages. We use optical character recognition (OCR)
techniques to extract text from the page screenshots to overcome
the text and code level obfuscations. In addition, we will still extract
traditional features from HTML considering that some phishing
pages may not perform evasion. Finally, we consider features ex-
tracted from various submission “forms” on the page. All these
features are independent from any specific brands or their original
pages. This allows the classifier to focus on the nature of phishing.
 10 20 30 40EbayFacebookPaypalDropboxAdobeGoogleMicrosoftSantanderImage Hash DistanceIMC ’18, October 31–November 2, 2018, Boston, MA, USA
Ke Tian et al.
From the screenshots, we expect
Image-based OCR Features.
the phishing page to contain related information in order to deceive
users. To extract text information from a given page screenshot,
we use OCR (Optical character recognition), a technique to extract
text from images. With the recent advancement in computer vision
and deep learning, OCR’s performance has been significantly im-
proved in the recent years. We use the state-of-the-art OCR engine
Tesseract [13] developed by Google. Tesseract adopts an adaptive
layout segmentation method, and can recognizes texts of differ-
ent sizes and on different backgrounds. According to Google, the
recent model has an error rate below 3% [12], which we believe
this is acceptable for our purpose. By applying Tesseract to the
crawled screenshots, we show that Tesseract can extract text such
as “paypal” and “facebook” directly from the logos areas of the
screenshots. More importantly, from the login form areas, it can
extract texts such as “email” and “password” from the input box,
and even “submit” from the login buttons. We treat the extracted
keywords as OCR features.
Text-based Lexical Features. We still use text based features
from HTML to complement OCR features. To extract the lexical
features, we extract and parse the text elements from the HTML
code. More specifically, we focus on the following HTML tags: h
tag for all the texts in the headers, p tag for all the plaintexts, a tag
for texts in the hyperlinks, and title tag for the texts in the title of
the page. We do not consider texts that are dynamically generated
by JavaScript code due to the high overhead (which requires dy-
namically executing the javascript in a controlled environment).
We treat these keywords as lexical features.
To extract features from data submis-
Form-based Features.
sion forms, we identify forms from HTML and collect their at-
tributes. We focus on 4 form attributes: type, name, submit and