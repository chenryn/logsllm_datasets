$pe>psout.txt
S sort paout.txt >pasort.out
接上一个管道就精巧得多了，如下所示：
如果我们还想在屏幕上看到一页一页的输出结果，可以再多接一个第一进程more，把它们
都放在同一个命令行上，如下所示：
2 12 19 
允许连接的进程数量是没有限制的。假设我们想看看所有运行中进程的名字，不包括shell
本身，可以使用下面的命令：
Sps -xo com1 sort 1 uniq 1 grep - sb | more
这个命令行先用sort命令把ps命令的输出按字母表顺序排列好，再用uniq命令去掉重复的内
容，然后用“grep-vsh”副去名为sh的进程、最后一页一页地把它显示在屏幕上。
在看过这些基本的shell操作之后，我们再来看看脚本程序。
2.3可以被视为程序设计语言的shell
编写shell程序有两种办法。你可以顺序敲人一系列会令让shel交互式地执行它们；也可以把
这些命令保存到一个文件里，再把这个文件当作程序一样去调用执行。
2.3.1交互式程序
在命令行上直接敲入shell脚本程序是检验小代码块的便捷方法。
如果bash不是你系统上的联认shell，就需要由你转换到其他shell上。你可以直接敲
入新shell的名宇（比如/bin/bash）来运行它并改变命令行提示符。如果bash根本就没有
安装在你的系统上，你可以从GNU的站点http://www/gnu.org上免费下载它。它的源代
码可移植性非需好，极可能在你的UNIX系统上毫不费力地就通过了编译。
假设我们有许多的C语言程序文件，但我们只想编译那些包含有字符串“POSIX”的。与其
先用grep命令在文件里搜索字符串然后再逐个编译那些包含着该字符串的文件，不如用一个下面
这样的交互式脚本程序来完成整个操作：
s for file 1n *
加入jaVa编程群：524621833
---
## Page 39
20
Linux程序设计
>if grap -1 posix $file
opthen
more$f1le
>f1
pooix
>done
This is a file with Posix in it - tzcat it weli
请注意shell提示符“$”会在你敲人shell命令的时候变为“>”。你可以一直敲下去，shell会
判断出你是否已经结束了键盘输入并立刻开始执行这个脚本程序。
在这个例子里，grep命令会显示出它找到的包含有“POSIX”的文件，然后more命令会把文
件的内容显示在屏幕上。最后，返回shell的提示符。还要注意我们使用了一个用来处理各个文
件的shell变址file，它使我们的脚本程序能够自成文档。
shell还完成了文件通配符的扩展匹配（也叫做“globbing”）工作，你已经知道会这样了，
对吗？你可能还不知道能够用“？”来匹配单个字符，面“[set]”允许匹配方括号中任何一个单
个的字符。“Iset]”对集合进行取反-也就是匹配任何没有出现在你给出的字符集合中的字符
使用花括号“）”的通配符（只能够在部分shell上使用，其中包括bash）扩展允许你人为地把
儿个字符串分在一组，集中起来供shell进行扩展和匹配。请看下面的例子：
5 1s my_(finger, toe)6
这个例子将列出两个文件，而这两个文件的文件名有几个共同之处。我们用shelI对当前子
目录中的每一个文件进行检查。
事实上，有经验的UNIX用户会以一种更有效的办法来完成这个简单操作，也许就是使用下
面这样的命令：
XIS0d - d1B.1o S
或者功能相同的另一种命令形式：
（ISOdI-dox）sxomS
而下面这个命令
Sgrep -1 POsIx *（ore
将输出其内容与模版“POSIX”相匹配的文件的名字。在上面的脚本程序里、我们看到shell
使用了命令grep和more来完成主要的工作。shell本身的作用却很简单，只是把儿个现有的命令
“粘”起来，最终构成了一个新的功能更强的命令行。
如果每次需要执行这一系列命令时都要反反复复地输人这么多的东西当然有些讨厌。我们
需要把这些命令保存到一个文件里去，这就是我们常说的sheH脚本程序，这样在我们需要的时
候就可以随时执行它们了。
2.3.2编写脚本程序
首先，我们必须用一个文本编辑器创建一个用来保存命令的文件。我们给这个文件取名为
first.sh，它的内容如下所示：
加入jaVa编程群：524621833
---
## Page 40
第2章shell程序设计
27
#!/bin/sh
#first.sh
directory for the string PoSIx.and then displays those
This file
e 1ooks through all the files Ln the current
files to the standard output.
for file in *
if grep -q POSIx Sfile
then
more Sf1le
fi
Gone
exit 0
程序中的注释以一个“#”符号开始，一直持续到该行的结束。为了阅读上的方便，我们通
常把“#”放在第一列。明确这一点之后，我们来看看第一行上的“#！/bin/sh”，它是注释语句
的一个特殊形式，“#！”字符告诉系统同一行上紧跟在它后面的那个参数是用来执行本文件的程
序。在这个例子里，/bin/sh就是默认情况下的shell程序。
请注意在注释中我们使用的是绝对路径。因为现实中的某些UNIX系统把解释器路径的字符
长度限制在32个以内，所以最好在/bin子目录里至少保留一个你最爱用的shell的符号链接。如果
你调用的是一个名字非常长的命令，或者调用的是一个位于深层嵌套子目录中的命令，它就有
可能工作不正常。
因为脚本程序本原则上被看做是sheH的标准输人（我们在前面介绍过这个概念），所以它可
/
以包含任何能够通过你的PATH环境变量引用到的UNIX命令。
exit命令的作用是确保脚本程序能够返回一个合理的退出码（exitcode，本章的后面还将详
继介绍这个概念）。当程序是以交互方式运行时很少需要检查它的退出码，但如果你打算从另-
个脚本程序里调用这个脚本程序并查看它是否执行成功，返回一个适当的退出码就很重要了。
即使你从来也没想过要从另一个脚本程序里调用自已的这个脚本程序，也应该在退出时安排一
个合理的退出码。这一做法体现了UNIX程序设计中的一个重要特色：重用。咱们继续学习，要
相信自已的脚本程序是有用的。
在shel1程序设计里，“0”表示成功。又因为脚本程序本身不检查有无错误，所以我们永远
都返回一个表示成功的退出码。我们将在本章后面的内容里对exit命令做进一步的讲解，到那时
再告诉大家为什么要用一个“0”来表示执行成功。
来确定文件的类型。我们完全可以省略“sh”，或者给它加上一个不同的扩展名，shell是不关心
这些问题的。大多数预安装的脚本程序根本就没有什么扩展名，要想知道它们是否是脚本程序，
最好的办法就是使用file命令，比如“fitefirstsh”或“file/bin/bash”。
2.3.3把脚本设置为可执行程序
我们的脚本文件输人完成之后，运行它有两种办法。最简单的办法是在调用shell的时候把
脚本文件的名字用做一个参数，如下所示：
/bin/eh first.sh
加入jaVa编程群：524621833
1
---
## Page 41
22
Linux程序设计
这就行了，但如果能像对待其他UNIX命令部样只人脚本程序的名字就调用执行它岂不是
更好、没问题，我们只需用chmod命令对这个文件的状态（mode）进行修改，使这个文件能够
被全体用户执行就可以了、如下所示：
S chaod +x f1rat.eh
当然，这可不是用chmod命令把文件设置为可执行程序的惟一办法，请用“man
chmod”命今查看它的八进制参数和其他选项的资料
现在我们可以用下面的命令执行它了：
S first,sh
可这样也许不能成功，你会看到一条出错信息告诉你命令没有找到。这很可能是因为没有
设置shell的环境变量PATH去查找当前子日录。这个小毛病很好解决，一种办法是在命令行上直
接敲人“PATH=SPATH:”；另--种办法是编辑你的.bash_profile文件，把例才这条命令加到文
件的末尼，退出登录后再重新登录进来，另外，在保存着你脚本程序的子目录里敲人./firstsh也
行，它把该文件的相对路径通知给shell。
用这种办法修改根用户rooI的PATH变量是不充许的。这是-一个系统安全方面的
陷阱，因为以根用户root身份登录上机的系统管理员可能会因不明真相而调用了某个
标准命今的改装版本。本书作者之一就曾经达样弄过一次，目的当然是为了向系统
营理员指出达一点！即使是在善通账户上，把当前子目录包括在PATH里也多少有些
危险，因此，最好的办法是养成在当前子目录中的所有命令前面都加上一个“.”的
好习情
在确信我们的脚本程序能够正确执行之后，我们可以把它从当前子目录移到一个更合适的
地方去。如果这个命令只是供你本人使用的，你可以在自已的登录子目录里创建一个bin子目录
并且把它漆加到你自己的PATH变量里去。如果你想让其他人也能够执行这个脚本程序，就可以
把/usr/local/bin或者其他系统级的子目录用做添加新程序的适当场所。如果你在自己使用的
UNIX系统上没有根权限，可以请求系统管理员替你拷贝你的文件，当然你必须先说服他们才行。
为了防止其他用户对脚本程序的修改，哪怕只是意外，你应该去掉它的写权限。系统管理员用
来设置文件属主权限和访问权限的系列命令如下所示：
chowmroot/uer/local/bin/first.sh
cp first.sh/uar/local/bin
chgrp root/usr/local/bin/firat.sh
chmod 755 /usr/local/bin/firat.sh
注意我们在这里不是修改特定部分的访问权限标志，面是使用了chmod命令的绝对格式，因
为我们清楚地知道需要设置什么样的访问权限。
如果你愿意，还可以使用chmod命令相对长一些但可能更明确的格式，如下所示：
#chaod u=rwx, go=rx /usr/local/bln/first.8b
关于chmod命令的详细资料请参考它的使用手册。
加入jaVa编程群：524621833
---
## Page 42
第2章shell程序设计
23
请记住，在UNIX系统里，如果你拥有保存着某个文件的子目录的写权限，就可以
到除这个文件。因此，为了安全起见，你应该确定只有根用户root才能对你想保持安全
性的子目录进行写操作。
2.4shell程序设计的语法
在看过上面那个简单的shell程序例子之后，我们来深人研究一下shell强大的程序设计能力。
shell是一种很容易学习的程序设计语言，至少因为它能够在把各个小程序段组合为--个大程序
之前很容易地对它们分别进行交互式的测试。利用现代UNIX操作系统的shell，我们可以编写出
相当庞大的结构化程序。在接下来的几个小节里，我们将学习：
·变址：字符串、数字、环境和参数
·条件：shell中的布尔值。
·程序控制：if、elif、for、while、until、case等：
·命令表。
·函数。
·内建在shell中的命令。
·获取某个命令的执行结果。
·即时文档（here文档）。
2.4.1变量
在shel里，使用变量之前并不需要事先对它们做出声明。我们是在第一次用到它们的时候
（比如我们给它们赋一个初始值的时候）创建它们的。在默认的情况下，所有变量都被认为是并
保存为字符串，即使它们被赋值为数值时也是如此。shell和其他一些工具程序会把“数值”型字
符串依次转换为正确的数值，并且按照正确的方式对它们进行操作。UNIX是一个区分字母大小
写的系统，因此，shell会认为变量“foo”与“Foo”是不同的，而这两者与“FOO”又是不同的。
在shell里，在变量名前面加上一个“$”字符就可以获得它的内容，用echo命令就可以输出
它的内容。只要用到变量，我们就必须在它前面加上一个“s”字符，除非我们是在对该变量进
行赋值操作。请看下面的例子，我们可以在命令行上给变量salutation赋以任何值：
Ssalutation=gello
Ssalutations*Yes Dear*
He1lo
S echo $salutation
Yes Dear
S echo Ssalutation
7 +5
注意，如果宇将串里包含着空格，就必须用引号把它们括起来。还要注意的是等号
两边不能有空格。
加入jaVva编程群：524621833
---
## Page 43
24
Linux程序设计
我们可以用read命令把用户的输人赋值给-个变量：这个命令需要有一个参数，也就是那个
准备读人用户输人数据的变量的名字，它会等待用户输人字符串。当用户按下回车键时read命令
继续往下执行
1.引号的用法
在继续学习之前，我们需要弄清shell的一个特色—引号的使用。
一般情况下，参数之间是用空白字符分隔的，比如-个空格、一个制表符或一个换行符等。
如果想在一个参数里包含一个或多个这样的空白字符，就必须给参数加上引号
像Sfoo这样的变量在引号中的行为取决于我们使用的引号的类别。如果你把--个带有“S”
字符的变量表达式故在双引号里，程序执行到这一行时就会把它替换为它的值、如果你把它故
在单引号里，就不会发生替换现象。我们还可以通过在“$”字符前面加上一个“”字符取消它
的特殊意义。
字符串通常都被括在双括号里以防止它们被其中的空白字符分断开，但允许“$”字符引起
的名-值替换
动手试试：变量
我们米吞看引号在变量输出中的作用：
#1b;n/sh
nyvar*Hi there*
echo $myvar
echo \Snyvar
echo ‘Snyvar’
echo Enter some text
read nyvar
eAus snba mou , 1AAus. ou2a
exit 0
它的输出情况是这样的：
Hi there
Hi there
$myvar
Enter sone text
$myva1
HelloWorld
Smyvar now equals Hello wor1@
操作注释：
变tmyvar在创建的时候被赋值为字符串“Hithere”：我们用echo命令显示了该变量的内容、
大家可以乔到在变量名前面加上一个“S”符号得到的是该变量的内容。我们还看到使用双引号
时不影响变站的名-值替换，而单引号和反斜线就不进行变量的名-值替换。我们还用red命令从
用户那里读入了--个字符串。
2.环境变量
在shel脚本程序开始执行的时候，某些变量会根据环境中的值进行初始化。这些变通常
加入jaVa编程群：524621833
---
## Page 44
第2章shell程序设计
25
使用大写字母做名字以便把它们和用户在脚本程序里定义的（shell）变量区分开来，后者一般
都使用小写字母做名字。具体会创建出哪些变量取决于你的个人配置。在系统的使用手册里列