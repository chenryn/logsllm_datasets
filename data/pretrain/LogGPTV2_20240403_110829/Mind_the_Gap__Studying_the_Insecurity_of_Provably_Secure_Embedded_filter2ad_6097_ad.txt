a) Broken assumption: Our audit of the real-world im-
plementation revealed a serious bug, where, after ﬁrst correctly
restoring the shadow register contents, reti incorrectly does
not clear the hardware ﬂag that indicates a non-empty backup.
This means that once an enclave is successfully interrupted,
any subsequent untrusted reti instruction will also incor-
rectly restore the register values from the backup, which
still contains the secret values from when the enclave was
interrupted. Since this includes the program counter – as well
as all other register values – the attacker is practically capable
of setting a checkpoint in the enclave via an interrupt and later
jumping back to it.
b) Attack: To demonstrate the attack, we use the fol-
lowing minimal enclave that increases a zero-initialized credit
counter by one, but stores a private is_modified ﬂag
to prevent multiple increases. While this enclave should be
contextually equivalent with one that always returns 1 in
r5, we experimentally validated that
interrupts break this
equivalence by allowing the value to increase over 1.
1
2
3
4
5
cmp #0x0, &is_modified ; if (is_modified == 0)
jnz 1f
add #0x1, &user_credit ;
mov #0x1, &is_modified ;
user_credit += 1
is_modified = 1
; {
1: mov &user_credit, r5
; } return user_credit
Listing 2. Credit management enclave (all variables are initialized to zero).
Sancus [16] only allows enclaves to start executing from
their entry points (the ﬁrst instruction in this case): jumps
to the middle of the code section are blocked in hardware.
However, if we ﬁrst interrupt the enclave at the start of line 3,
right before the add instruction, but, importantly, after the
check on is_modified; we can subsequently use reti
from outside the enclave to jump back to that point and
increase our credit an arbitrary number of times.
c) Mitigation: The Verilog implementation should be
corrected to adhere to the pen-and-paper model by clearing
the hardware ﬂag indicating a non-empty backup upon reti.
4) Restarting enclaves from the ISR: The SancusV model
imposes that interrupted enclaves can only be resumed via
reti, and cannot be reentered from the start.
a) Broken assumption: Our audit revealed that this be-
havior is not enforced in the real-world Verilog implementa-
tion. Reentering an interrupted enclave from the start, instead
of resuming it properly via reti, may allow an attacker to
manipulate enclave values in an unintended way.
b) Attack: Reconsider the credit management enclave of
Listing 2. This time, however, we interrupt at the start of
line 4, right after the add instruction. At this point, the enclave
has incremented the credit balance, but has not yet set the
private is_modified ﬂag to block further updates. Instead
of executing reti,
the attacker now simply reenters the
enclave again from the start. We experimentally validated that
the second start-to-end run of the enclave breaks contextual
equivalence by once again incrementing the credit before
ﬁnally setting is_modified and returning 2 (instead of the
expected value 1) in r5.
c) Mitigation: The Verilog implementation should be
corrected to adhere to the pen-and-paper model by disallowing
jumps to an interrupted enclave’s entry point before reti.
5) Multiple enclaves: The SancusV paper explicitly docu-
ments that only a single enclave is modeled.
a) Broken assumption: The real-world openMSP430-
based SancusV implementation can be parameterized with any
number of hardware-enforced enclaves. Our audit revealed that
the implementation uses the default number of 4 enclaves.
b) Attack: Consider the credit management enclave Ec
of Listing 2, which is again interrupted at the start of line 4. In
this attack, however, instead of directly resuming or reentering
Ec, the ISR jumps to another enclave, Ea. The purpose of
this attacker-controlled second enclave is to set the program
counter to the entry point of Ec, just before getting interrupted
itself (which is also scheduled by the attacker). Upon the
second interrupt, the single backup register ﬁle – originally
containing the Ec register values – is overwritten with the
attacker-controlled Ea values, including the modiﬁed program
counter pointing to the start of Ec. Hence, the original progress
in Ec is lost, and we experimentally validated that, when the
ISR ﬁnally calls reti, control will be incorrectly transferred
to the start of Ec.
c) Mitigation: The Verilog implementation should over-
ride the default number of supported enclaves to one. If
support for multiple enclaves is desired, the SancusV model
and proof should be extended to rule out any additional attacks,
such as – but not necessarily limited to – the one above.
6) Enclave accessing unprotected memory: The SancusV
paper highlights that an important condition is that enclaves
cannot access unprotected memory outside of the enclave.
a) Broken assumption: Our security audit revealed that
the real-world implementation still allows enclaves to read
from and write to unprotected shared memory locations.
b) Attack: This oversight can clearly be abused to
differentiate two otherwise contextually equivalent enclaves:
E1 = {mov #1, &addr; mov #0, &addr} and E2 =
{mov #2, &addr; mov #0, &addr}, where addr lies
outside the enclave. While without interrupts the value at
addr always ends up being zero, we experimentally validated
that E2 can be trivially distinguished by interrupting after the
ﬁrst instruction and inspecting the value at addr.
c) Mitigation: This important model assumption should
be properly enforced in the Verilog implementation. The most
straightforward solution would be to check target memory
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:23:35 UTC from IEEE Xplore.  Restrictions apply. 
1645
addresses in the openMSP430 memory backbone and only
allow unprotected accesses based on whether the enclave is
executing in the given cycle.
7) Manipulating interrupt behavior from the enclave: The
SancusV model speciﬁes that interrupt-related functionality
cannot be inﬂuenced from within the enclave itself. Concretely,
enclaves cannot manipulate (i) the interrupt-enable bit (GIE)
in the status register, (ii) the interrupt vector table (IVT)
containing ISR addresses, and (iii) the timer peripheral itself.
a) Broken assumption: We experimentally validated that
enclaves are currently allowed all 3 of the above forbidden
behaviors in the real-world Verilog implementation.
(i) Consider E1 = {nop; dint} and
E2 = {dint; nop}, where interrupts are disabled from
the instruction following dint. While contextually equivalent
without interrupts, the enclaves can be trivially distinguished
by interrupting during the second instruction and observing
whether the ISR executes (E1) or not (E2).
b) Attack:
(ii) Another way to break contextual equivalence is to
map part of the enclave’s data section over the ﬁxed IVT
location. This allows to trivially distinguish two enclaves that
write different unprotected ISR addresses to their private data
memory: the attacker just needs to schedule an interrupt and
observe which ISR executes.
(iii) Finally, we found that contextual equivalence can also
be broken by mapping part of the enclave’s private data section
over the memory-mapped I/O (MMIO) registers of the timer
peripheral. This allows the enclave to directly trigger inter-
rupts. Clearly, attackers controlling the ISR can distinguish
enclaves that schedule two consecutive interrupts vs. only one.
c) Mitigation: While in enclave mode, updates to GIE
should be blocked in the Verilog code of the core. Furthermore,
the core can easily be extended to disallow the creation of
enclaves that map over the ﬁxed IVT location.
However, disallowing enclave timer conﬁguration is less
straightforward and highlights the consequences of simplifying
a model. SancusV only models a single abstract peripheral
that is conﬁgured through simpliﬁed IN/OUT instructions,
whereas the real-world implementation may include several
peripherals that can reside at different MMIO address ranges
(cf. Section V-C2). One option would be to disallow enclaves
to map over any part of the MMIO range, but this would break
the important use case of secure enclave drivers [16]
C. Exploiting missing attacker capabilities
1) DMA side-channel leakage: In line with the original
Sancus 2.0 architecture [16], the SancusV implementation is
based on an older version of the openMSP430 core without
DMA capabilities. The SancusV formalization, hence, does not
model attackers with DMA capabilities.
a) Unmodeled capability: Although DMA is currently
not part of the formal model nor the implementation of
SancusV, we still consider it an interesting attack vector against
this system, as both more recent versions of openMSP430 [26]
and the upstream version of Sancus [31] support DMA. More-
over, this attack demonstrates how an extension not directly
related to interrupts can still undermine security properties
related to them, showing valuable insight.
b) Attack: An enclave can easily be constructed to
demonstrate how a DMA attacker with access to cycle-
accurate memory traces can obtain information that is hidden
to a Nemesis attacker (cf. Section IV). However, to directly
break the security guarantees of SancusV, we need to show an
example where the introduction of interrupts provides addi-
tional leakage compared to the DMA side channel alone. List-
ing 3 provides an example enclave with conditional branches
that are carefully balanced to be DMA side channel resistant.
1
2
3
4
5
6
7
8
9
1:
2:
mov #0x42, r5
cmp r6, &password
jnz 1f
mov #0x42, r6
jmp 2f
mov r5, r6
mov r5, r6
jmp 2f
mov #0x0, r7
; 2 cycles, 2 accesses
; 2 cycles, 2 accesses
; 1 cycle,
; 1 cycle,
; 2 cycles, 2 accesses
1 access
1 access
Listing 3. Memory-balanced branches.
Both branches have an execution time of 4 cycles, dur-
ing which the CPU continuously accesses program memory
(fetching the instructions and the constants). Hence, these
branches are indistinguishable both to start-to-end timing and
to DMA side-channel adversaries. Since the instructions in the
two branches have different individual execution lengths, the
SancusV padding defense is still needed to protect against a
Nemesis attacker. However, even with correctly implemented
interrupt handling and padding, the DMA attacker can distin-
guish between the two branches if they are interrupted. Fig-
ure 8 shows the program memory accesses when interrupting
the ﬁrst cycle after the branch, i.e., at the start of line 4 or 6.
1
2
3
4
5
6
7
8
9
10
11
11
12
CLK
IRQ
PMEM1
E1
MOV #N, r6
IRQ 8
ISR
RETI r0
PMEM2
E2
MOV
IRQ 8
ISR
RETI r0
Fig. 8. Program memory accesses for the two ﬂows in Listing 3.
The PMEM signal is high when the memory bus is free,
these are the cycles when the attacker’s DMA requests would
be served. We can see that the additional padding cycles (5-8
and 4-8) added to the interrupt handling logic do not access
the memory. Using DMA requests, an attacker can count how
many cycles have no memory access, i.e., how many padding
cycles were added. The number of padding cycles is directly
correlated with the interrupted instruction’s execution length,
which can be reconstructed this way, completely bypassing the
Nemesis defense.
c) Mitigation: In case DMA support would be added to
the current SancusV implementation, a straightforward defense
may be to disable DMA completely during enclave execution.
However, care needs to be taken, since even unﬁnished DMA
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:23:35 UTC from IEEE Xplore.  Restrictions apply. 
1646
TABLE II. List of falsiﬁed and exploitable assumptions found in VRASED.
IM = Implementation-model mismatch; MA = Missing attacker capability;
DE = Deductive error.
IM
MA
DE
VI-B1
VI-B2
VI-C1
VI-C2
VI-C3
VI-C4
VI-C5
VI-D
The dma_addr bus contains the full address being accessed.
All components use a consistent key size.
Shared peripheral bus is not modeled.
Secure stack initialization in SW-Att is not modeled.
Timing attacks on SW-Att outside of HACL* are not modeled.
Interrupt latency timing attacks are not modeled.
DMA timing attacks are not modeled.
Missing assumptions about the core.
requests may leak information (cf. Section VI-C5). More
sophisticated defenses that preserve some of the performance
gains offered by DMA are out of scope for this paper.
2) Scheduling interrupts with the watchdog timer: The
openMSP430 architecture has multiple hardware components
that can generate interrupts. The model of SancusV, however,
only has the notion of a single, abstract peripheral timer device
that can issue interrupts in any attacker-chosen clock cycle.
a) Unmodeled capability: The implementation supports
two timer peripherals: TIMER_A and the watchdog timer
(WDT). The number of padding cycles is calculated based on
the irq_arrived signal. This signal is raised for external
interrupts coming from TIMER_A, but not for the integrated,
on-chip WDT, which has its dedicated wdt_irq signal.
b) Attack: Although conﬁguration options are more lim-
ited, the WDT can still schedule cycle-accurate interrupts. We
experimentally validated that, for WDT interrupts, no padding
is added, thus completely and trivially breaking the defense.
It is important to note that the shadow register switching
does not depend on these signals, so register values from the
enclave cannot leak to the ISR, even during a WDT interrupt.
c) Mitigation: This issue highlights the attention to be
given to interface signals. The padding implementation is
activated based on a signal that is too speciﬁc. If the detection
happened based on a signal that is raised for any type of
incoming interrupt, this attack would not be possible.
VI. SECURITY ANALYSIS OF VRASED
A. Identifying falsiﬁable and hidden assumptions
As explained earlier,
the VRASED [15] security argu-
ment relies on only 7 explicit assumptions (cf. Appendix B)
that reportedly encapsulate all assumptions placed on the
functionality of the core and the compiler. Favorably, these
assumptions are explicitly listed and not scattered throughout
the paper, which makes them easier to validate. However, our
analysis revealed several imprecisely formulated or missing
assumptions, as well as important unmodeled attacker interac-
tions. Table II lists falsiﬁed and exploitable assumptions and
unmodeled features, as well as a deductive error. We refer to
Appendix C for remaining assumptions that were not found
to be directly exploitable.
B. Validating the implementation
As a ﬁrst important observation, it is interesting to note that,
while our analysis of SancusV revealed seven implementation-
model mismatches, we found fewer such exploitable errors
in VRASED. This shows the power of extracting the model
directly from HW-Mod’s Verilog implementation.
1) Incorrect DMA address translation: One of the signals
HW-Mod monitors from the core is the DMA address bus