the public key, hash function, hash value, signature, and
additional options to rsa.VerifyPSS() ❻. Notice that in this case
you’re passing the public key, not the private key, into this
function. Endpoints wishing to validate the signature won’t
have access to the private key, nor will validation succeed if
you input the wrong key value. The rsa.VerifyPSS() function
returns nil when the signature is valid and an error when it’s
invalid.
Here is a sample run of the program. It behaves as
expected, encrypting the message by using a public key,
decrypting it by using a private key, and validating the
signature:
$ go run main.go
Ciphertext: a9da77a0610bc2e5329bc324361b480ba042e09ef58e4d8eb106c8fc0b5
--snip--
Plaintext: Some super secret message, maybe a session key even
Signature: 68941bf95bbc12edc12be369f3fd0463497a1220d9a6ab741cf9223c6793
--snip--
Signature verified
Next up, let’s look at another application of public-key
cryptography: mutual authentication.
Mutual Authentication
Mutual authentication is the process by which a client and
server authenticate each other. They do this with public-key
cryptography; both the client and server generate
public/private key pairs, exchange public keys, and use the
public keys to validate the authenticity and identity of the
other endpoint. To accomplish this feat, both the client and
server must do some legwork to set up the authorization,
explicitly defining the public key value with which they intend
to validate the other. The downside to this process is the
administrative overhead of having to create unique key pairs
for every single node and ensuring that the server and the
client nodes have the appropriate data to proceed properly.
To begin, you’ll knock out the administrative tasks of
creating key pairs. You’ll store the public keys as self-signed,
PEM-encoded certificates. Let’s use the openssl utility to create
these files. On your server, you’ll create the server’s private
key and certificate by entering the following:
$ openssl req -nodes -x509 -newkey rsa:4096 -keyout serverKey.pem -out
serverCrt.pem -days 365
The openssl command will prompt you for various inputs, to
which you can supply arbitrary values for this example. The
command creates two files: serverKey.pem and serverCrt.pem.
The file serverKey.pem contains your private key, and you
should protect it. The serverCrt.pem file contains the server’s
public key, which you’ll distribute to each of your connecting
clients.
For every connecting client, you’ll run a command similar
to the preceding one:
$ openssl req -nodes -x509 -newkey rsa:4096 -keyout clientKey.pem -out
clientCrt.pem -days 365
This command also generates two files: clientKey.pem and
clientCrt.pem. Much as with the server output, you should
protect the client’s private key. The clientCrt.pem certificate
file will be transferred to your server and loaded by your
program. This will allow you to configure and identify the
client as an authorized endpoint. You’ll have to create,
transfer, and configure a certificate for each additional client
so that the server can identify and explicitly authorize them.
In Listing 11-6, you set up an HTTPS server that requires a
client to provide a legitimate, authorized certificate.
func helloHandler(w http.ResponseWriter, r *http.Request) { ❶
fmt.Printf("Hello: %s\n", r.TLS.PeerCertificates[0].Subject.CommonName) ❷
fmt.Fprint(w, "Authentication successful")
}
func main() {
var (
err error
clientCert []byte
pool *x509.CertPool
tlsConf *tls.Config
server *http.Server
)
http.HandleFunc("/hello", helloHandler)
if clientCert, err = ioutil.ReadFile("../client/clientCrt.pem")❸; err != nil {
log.Fatalln(err)
}
pool = x509.NewCertPool()
pool.AppendCertsFromPEM(clientCert) ❹
tlsConf = &tls.Config{ ❺
ClientCAs: pool,
ClientAuth: tls.RequireAndVerifyClientCert,
}
tlsConf.BuildNameToCertificate() ❻
server = &http.Server{
Addr: ":9443",
TLSConfig: tlsConf, ❼
}
log.Fatalln(server.ListenAndServeTLS("serverCrt.pem", "serverKey.pem")❽)
}
Listing 11-6: Setting up a mutual authentication server (/ch-11/mutual-
auth/cmd/server/main.go)
Outside the main() function, the program defines a
helloHandler() function ❶. As we discussed way back in Chapters
3 and 4, the handler function accepts an http.ResponseWriter
instance and the http.Request itself. This handler is pretty boring.
It logs the common name of the client certificate received ❷.
The common name is accessed by inspecting the http.Request’s
TLS field and drilling down into the certificate PeerCertificates
data. The handler function also sends the client a message
indicating that authentication was successful.
But how do you define which clients are authorized, and
how do you authenticate them? The process is fairly painless.
You first read the client’s certificate from the PEM file the
client created previously ❸. Because it’s possible to have
more than one authorized client certificate, you create a
certificate pool and call pool.AppendCertsFromPEM(clientCert) to add
the client certificate to your pool ❹. You perform this step for
each additional client you wish to authenticate.
Next, you create your TLS configuration. You explicitly set
the ClientCAs field to your pool and configure ClientAuth to
tls.RequireAndVerifyClientCert ❺. This configuration defines your
pool of authorized clients and requires clients to properly
identify themselves before they’ll be allowed to proceed. You
issue a call to tlsConf.BuildNameToCertificate() so that the client’s
common and subject alternate names—the domain names for
which the certificate was generated—will properly map to
their given certificate ❻. You define your HTTP server,
explicitly setting your custom configuration ❼, and start the
server by calling server.ListenAndServeTLS(), passing to it the server
certificate and private-key files you created previously ❽.
Note that you don’t use the client’s private-key file anywhere
in the server code. As we’ve said before, the private key
remains private; your server will be able to identify and
authorize clients by using only the client’s public key. This is
the brilliance of public-key crypto.
You can validate your server by using curl. If you generate
and supply a bogus, unauthorized client certificate and key,
you’ll be greeted with a verbose message telling you so:
$ curl -ik -X GET --cert badCrt.pem --key badKey.pem \
https://server.blackhat-go.local:9443/hello
curl: (35) gnutls_handshake() failed: Certificate is bad
You’ll also get a more verbose message on the server,
something like this:
http: TLS handshake error from 127.0.0.1:61682: remote error: tls: unknown
certificate authority
On the flip side, if you supply the valid certificate and the
key that matches the certificate configured in the server pool,
you’ll enjoy a small moment of glory as it successfully
authenticates:
$ curl -ik -X GET --cert clientCrt.pem --key clientKey.pem \
https://server.blackhat-go.local:9443/hello
HTTP/1.1 200 OK
Date: Fri, 09 Oct 2020 16:55:52 GMT
Content-Length: 25
Content-Type: text/plain; charset=utf-8
Authentication successful
This message tells you the server works as expected.
Now, let’s have a look at a client (Listing 11-7). You can
run the client on either the same system as the server or a
different one. If it’s on a different system, you’ll need to
transfer clientCrt.pem to the server and serverCrt.pem to the
client.
func main() {
var (
err error
cert tls.Certificate
serverCert, body []byte
pool *x509.CertPool
tlsConf *tls.Config
transport *http.Transport
client *http.Client
resp *http.Response
)
if cert, err = tls.LoadX509KeyPair("clientCrt.pem", "clientKey.pem"); err != nil
{ ❶
log.Fatalln(err)
}
if serverCert, err = ioutil.ReadFile("../server/serverCrt.pem"); err != nil { ❷
log.Fatalln(err)
}
pool = x509.NewCertPool()
pool.AppendCertsFromPEM(serverCert) ❸
tlsConf = &tls.Config{ ❹
Certificates: []tls.Certificate{cert},
RootCAs: pool,
}
tlsConf.BuildNameToCertificate()❺
transport = &http.Transport{ ❻
TLSClientConfig: tlsConf,
}
client = &http.Client{ ❼
Transport: transport,
}
if resp, err = client.Get("https://server.blackhat-go.local:9443/hello"); err != nil {
❽
log.Fatalln(err)
}
if body, err = ioutil.ReadAll(resp.Body); err != nil { ❾
log.Fatalln(err)
}
defer resp.Body.Close()
fmt.Printf("Success: %s\n", body)
}
Listing 11-7: The mutual authentication client (/ch-11/mutual-
auth/cmd/client/main.go)
A lot of the certificate preparation and configuration will
look similar to what you did in the server code: creating a pool
of certificates and preparing subject and common names.
Since you won’t be using the client certificate and key as a
server, you instead call tls.LoadX509KeyPair("clientCrt.pem",
"clientKey.pem") to load them for use later ❶. You also read the
server certificate, adding it to the pool of certificates you wish
to allow ❷. You then use the pool and client certificates ❸ to
build your TLS configuration ❹, and call
tlsConf.BuildNameToCertificate() to bind domain names to their
respective certificates ❺.
Since you’re creating an HTTP client, you have to define a
transport ❻, correlating it with your TLS configuration. You
can then use the transport instance to create an http.Client struct
❼. As we discussed in Chapters 3 and 4, you can use this
client to issue an HTTP GET request via
❽.
client.Get("https://server.blackhat-go.local:9443/hello")
All the magic happens behind the scenes at this point.
Mutual authentication is performed—the client and the server
mutually authenticate each other. If authentication fails, the
program returns an error and exits. Otherwise, you read the
HTTP response body and display it to stdout ❾. Running your
client code produces the expected result, specifically, that
there were no errors thrown and that authentication succeeds:
$ go run main.go
Success: Authentication successful
Your server output is shown next. Recall that you
configured the server to log a hello message to standard
output. This message contains the common name of the
connecting client, extracted from the certificate:
$ go run main.go
Hello: client.blackhat-go.local
You now have a functional sample of mutual
authentication. To further enhance your understanding, we
encourage you to tweak the previous examples so they work
over TCP sockets.
In the next section, you’ll dedicate your efforts to a more
devious purpose: brute-forcing RC2 encryption cipher
symmetric keys.
BRUTE-FORCING RC2
RC2 is a symmetric-key block cipher created by Ron Rivest in
1987. Prompted by recommendations from the government,
the designers used a 40-bit encryption key, which made the
cipher weak enough that the US government could brute-force
the key and decrypt communications. It provided ample
confidentiality for most communications but allowed the
government to peep into chatter with foreign entities, for
example. Of course, back in the 1980s, brute-forcing the key
required significant computing power, and only well-funded
nation states or specialty organizations had the means to
decrypt it in a reasonable amount of time. Fast-forward 30
years; today, the common home computer can brute-force a
40-bit key in a few days or weeks.
So, what the heck, let’s brute force a 40-bit key.
Getting Started
Before we dive into the code, let’s set the stage. First of all,
neither the standard nor extended Go crypto libraries have an
RC2 package intended for public consumption. However,
there’s an internal Go package for it. You can’t import internal
packages directly in external programs, so you’ll have to find
another way to use it.
Second, to keep things simple, you’ll make some
assumptions about the data that you normally wouldn’t want to
make. Specifically, you’ll assume that the length of your
cleartext data is a multiple of the RC2 block size (8 bytes) to
avoid clouding your logic with administrative tasks like
handling PKCS #5 padding. Handling the padding is similar to
what you did with AES previously in this chapter (see Listing
11-4), but you’d need to be more diligent in validating the
contents to maintain the integrity of the data you’ll be working
with. You’ll also assume that your ciphertext is an encrypted
credit card number. You’ll check the potential keys by
validating the resulting plaintext data. In this case, validating
the data involves making sure the text is numeric and then
subjecting it to a Luhn check, which is a method of validating
credit card numbers and other sensitive data.
Next, you’ll assume you were able to determine—perhaps
from pilfering filesystem data or source code—that the data is
encrypted using a 40-bit key in ECB mode with no
initialization vector. RC2 supports variable-length keys and,
since it’s a block cipher, can operate in different modes. In
ECB mode, which is the simplest mode, blocks of data are
encrypted independently of other blocks. This will make your
logic a little more straightforward. Lastly, although you can
crack the key in a nonconcurrent implementation, if you so
choose, a concurrent implementation will be far better
performing. Rather than building this thing iteratively,
showing first a nonconcurrent version followed by a
concurrent one, we’ll go straight for the concurrent build.
Now you’ll install a couple of prerequisites. First, retrieve
the official RC2 Go implementation from
https://github.com/golang/crypto/blob/master/pkcs12/internal/
rc2/rc2.go. You’ll need to install this in your local workspace
so that you can import it into your brute-forcer. As we
mentioned earlier, the package is an internal package, meaning
that, by default, outside packages can’t import and use it. This
is a little hacky, but it’ll prevent you from having to use a
third-party implementation or—shudder—writing your own
RC2 cipher code. If you copy it into your workspace, the non-
exported functions and types become part of your
development package, which makes them accessible.
Let’s also install a package that you’ll use to perform the
Luhn check:
$ go get github.com/joeljunstrom/go-luhn
A Luhn check calculates checksums on credit card numbers
or other identification data to determine whether they’re valid.
You’ll use the existing package for this. It’s well-documented
and it’ll save you from re-creating the wheel.
Now you can write your code. You’ll need to iterate
through every combination of the entire key space (40-bits),
decrypting your ciphertext with each key, and then validating
your result by making sure it both consists of only numeric
characters and passes a Luhn check. You’ll use a
producer/consumer model to manage the work—the producer
will push a key to a channel and the consumers will read the
key from the channel and execute accordingly. The work itself
will be a single key value. When you find a key that produces
properly validated plaintext (indicating you found a credit card
number), you’ll signal each of the goroutines to stop their
work.
One of the interesting challenges of this problem is how to
iterate the key space. In our solution, you iterate it using a for
loop, traversing the key space represented as uint64 values. The
challenge, as you’ll see, is that uint64 occupies 64 bits of space
in memory. So, converting from a uint64 to a 40-bit (5-byte)
[]byte RC2 key requires that you crop off 24 bits (3 bytes) of
unnecessary data. Hopefully, this process becomes clear once
you’ve looked at the code. We’ll take it slow, breaking down
sections of the program and working through them one by one.
Listing 11-8 begins the program.
import (
"crypto/cipher"
"encoding/binary"
"encoding/hex"
"fmt"
"log"
"regexp"
"sync"
❶ luhn "github.com/joeljunstrom/go-luhn"
❷ "github.com/bhg/ch-11/rc2-brute/rc2"
)
❸ var numeric = regexp.MustCompile(`^\d{8}$`)
❹ type CryptoData struct {
block cipher.Block
key []byte
}
Listing 11-8: Importing the RC2 brute-force type (/ch-11/rc2-brute/main.go)
We’ve included the import statements here to draw attention
to the inclusion of the third-party go-luhn package ❶, as well as
the inclusion of the rc2 package ❷ you cloned from the
internal Go repository. You also compile a regular expression
❸ that you’ll use to check whether the resulting plaintext
block is 8 bytes of numeric data.
Note that you’re checking 8 bytes of data and not 16 bytes,
which is the length of your credit card number. You’re
checking 8 bytes because that’s the length of an RC2 block.
You’ll be decrypting your ciphertext block by block, so you
can check the first block you decrypt to see whether it’s
numeric. If the 8 bytes of the block aren’t all numeric, you can
confidently assume that you aren’t dealing with a credit card
number and can skip the decryption of the second block of
ciphertext altogether. This minor performance improvement
will significantly reduce the time it takes to execute millions
of times over.
Lastly, you define a type named CryptoData ❹ that you’ll use
to store your key and a cipher.Block. You’ll use this struct to
define units of work, which producers will create and
consumers will act upon.
Producing Work
Let’s look at the producer function (Listing 11-9). You place
this function after your type definitions in the previous code
listing.
❶ func generate(start, stop uint64, out chan <- *CryptoData,\
done <- chan struct{}, wg *sync.WaitGroup) {
❷ wg.Add(1)
❸ go func() {
❹ defer wg.Done()
var (
block cipher.Block
err error
key []byte
data *CryptoData
)
❺ for i := start; i <= stop; i++ {
key = make([]byte, 8)
❻ select {
❼ case <- done:
return
❽ default:
❾ binary.BigEndian.PutUint64(key, i)