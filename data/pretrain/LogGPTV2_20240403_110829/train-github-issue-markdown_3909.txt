 **Keith Garry Boyce** opened **SPR-1076** and commented
The call to getBean(factoryProcessorNames[i]) is flawed because it then must
go out to get dependencies just to do ordering.. Below is an example where I
had a problem. And below is a work around.. I think rather than implement
order perhaps you might want to add an attribute to bean definition i.e:
order= and use that instead.
What was happening is that to find the order of
ConfigurationPlaceholderProcessor it had to satisfy dependency jconfigBean.
The placeholder in that bean was supposed to be replaced first by
propertyPlaceholderConfigurer so even though it gets the order for
ConfigurationPlaceholderProcessor it's then to late to instantiate jconfigBean
with appropriate placeholder from the propertyPlaceholderConfigurer since it
had already been instantiated.
\--------- flawed code -------
for (int i = 0; i 
            ${config.filename}
            jmxConfig
    	jmxConfig
         	2
             dev_config.xml            
          SYSTEM_PROPERTIES_MODE_OVERRIDE 
         	1
\------------- Here is possible (not ultimate) fix -----------  
for (int i = 0; i < factoryProcessorNames.length; i++) {  
if (Ordered.class.isAssignableFrom(getType(factoryProcessorNames[i]))) {  
MutablePropertyValues values =
getBeanFactory().getBeanDefinition(factoryProcessorNames[i]).getPropertyValues();  
int order = Integer.MAX_VALUE;  
if (values != null) {  
PropertyValue orderValue = values.getPropertyValue("order");  
if (orderValue != null) {  
String orderInt = (String) orderValue.getValue();  
if (orderInt != null) {  
order = new Integer(orderInt).intValue();  
}  
}  
}  
OrderedFactoryHolder factoryProcessorHolder = new
OrderedFactoryHolder(factoryProcessorNames[i],order);  
orderedFactoryProcessorHolders.add(factoryProcessorHolder);  
}  
else {  
nonOrderedFactoryProcessorNames.add(factoryProcessorNames[i]);  
}  
}
    private class OrderedFactoryHolder implements Ordered {
        /**
         * @param factoryName
         * @param order
         */
        public OrderedFactoryHolder(String factoryProcessorName, int order) {
            this.factoryProcessorName = factoryProcessorName;
            this.order = order;
        }
        private String factoryProcessorName;
        private int order;
        /**
         * @return Returns the factoryProcessorName.
         */
        public String getFactoryProcessorName() {
            return factoryProcessorName;
        }
        /* (non-Javadoc)
         * @see org.springframework.core.Ordered#getOrder()
         */
        public int getOrder() {
            return order;
        }
    }
* * *
**Affects:** 1.2.1
**Attachments:**
  * AbstractApplicationContext.java ( _29.74 kB_ )
  * EagerPropertyPlaceholderConfigurer.java ( _3.85 kB_ )
  * PlaceHolderOrderTest.zip ( _1.72 kB_ )
**Issue Links:**
  * #6019 One BeanFactoryPostProcessor can't modify definition of a 2nd that has yet to run ( _ **"is duplicated by"**_ )
1 votes, 4 watchers