PAL3
idPAL1
idPAL4
a
t
a
d
s
s
a
p
.
4
PAL1
next:3
PAL3
next:1
next:4
1. look up
   PAL3’s id
2. pass 
   data
3. look up
   PAL1‘s id
Taab
PAL ID
idPAL1
1
2
3
4
...
idPAL3
idPAL4
Fig. 4: The looping PALs problem (left-side) and our solution of detaching
PALs from identities (right-side).
The only data that is accepted inside the trusted environ-
ment without being initially validated is the client’s input.
Similarly, the only data that is released outside without being
protected in secure storage is the ﬁnal output. However, their
measurements are included in the last attestation, which allows
the veriﬁcation of the overall execution chain.
Freshness is guaranteed by the client provided nonce,
which is propagated throughout the full execution. This pre-
vents attacks where a malicious UTP would replace the output
of a PAL pi with a value returned by the same PAL in a
previous run of the protocol. Notice however that this attack
could only succeed if the initial client input values (and so
h(in)) were the same in both service executions.
C. Addressing Looping PALs
PALs that exchange their intermediate state through TCC-
based secure storage must have access to each others’ iden-
tities. In auth put, a module must specify the identity of
the next PAL that should be granted access to secured data.
Similarly, in auth get, a PAL must give the identity of the
sender module from which it is supposed to receive the data.
A straightforward approach is to include the identities of
the next PALs statically in the code of a PAL. Unfortunately,
this solution does not work out due to possible loops in
the control ﬂow graph of the service that end up creating
unsolvable hash loops. Consider the example in Fig. 4 (left-
side), where a PAL’s code c has the identities of other PALs
appended to it (e.g., module p1’s code c1 contains the identity
of PAL p3, namely h(p3
)||h(p4
= c1||h(p3
= c3||h(p1
= c1||h(c3||h(p1
)). It follows that:
)||h(p4
p1
p3
))
)
)
This example shows that loops in a control ﬂow graph require
a module to depend on a hash of itself. Solving the above
equations cannot be done for cryptographic hashes as it would
require us to violate the properties of these functions. Trapdoor
functions could be used instead but they bring a few draw-
backs. First, they are typically based on asymmetric cryptog-
raphy. Hence, they can be comparatively more expensive and
further introduce the difﬁculty of protecting the private key.
Second, they do not answer the more fundamental question of
whether these hash loops can be avoided. In the following we
show how to solve this issue without trapdoor functions.
Our approach uses a level of indirection to separate a
PAL’s code from its identity. We replace the critical identity
information, hard-coded inside a PAL, with a lookup operation
in a table Tab. The table contains the set of all PALs’ identities
and is built when the modules are originally created. In
addition, we hard-code inside each PAL the index(es) in Tab
423
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:20:56 UTC from IEEE Xplore.  Restrictions apply. 
(cid:2)
Ksndr−rcpt =
f (K , REG, rcpt)
f (K , sndr, REG)
on kget sndr by sndr
on kget rcpt by rcpt
TCC Reg
Keyed Hash Function
K
Kp1-p2 
Fig. 5: Identity-depend key sharing construction for Secure Storage. rcpt is
the identity of the recipient PAL and sndr is the identity of the sending
PAL. REG is the register inside the TCC that stores the identity of the
currently executing PAL. It is equivalent to a P CR on TPMs [20] or to the
M REN CLAV E register in Intel SGX [34]. f () is a keyed hash function.
of the correct next PAL(s) in the control ﬂow (Fig. 4 right-
side). The identities thus become independent from each other
and each PAL’s hash can be computed despite any loop in the
control ﬂow graph. The chain that binds our PALs together is
now based on Tab, which translates an index into an identity.
Tab is critical to ensure the correct execution ﬂow of the
PALs. Hence, it has to be protected throughout the computation
of all modules and eventually veriﬁed as follows. The ﬁrst
PAL accepts the table as input and propagates it to subsequent
PALs using the TCC-based secure storage. The attestation of
one PAL—the last executed in the control ﬂow—has to cover
the measurement of Tab. In order to eventually verify the
execution, the client needs to be aware of: the last executed
PAL’s identity and the integrity measurement of Tab. Notice
that this imposes only a small additional constant space and
time overhead for any trusted execution.
The service developers should produce Tab together with
the executable modules. Tab and PALs should be deployed on
the UTP. The integrity measurements of (attested) PALs and
Tab should be provided to the client to enable veriﬁcation.
Analysis. The table Tab ﬁxes the set of identities of the
PALs that are allowed to implement each part of the service
functionality. When the client veriﬁes the correctness of the
last executed PAL, say pn, together with Tab, the client can
trust that only valid PALs were used throughout the execution
process. In fact, Tab ensures that only correct identities are
used for secure storage operations, and only correct PALs have
access to securely stored data that is critical for the execution.
D. Novel Secure Storage Solution
Secure channels to transfer intermediate results across
trusted PAL executions should be available with low overhead.
They should be (1) fast to set up, (2) require minimal TCC
support, and (3) ensure mutual authentication of the end points.
The secure channel design described above can be built
on current trusted components, but it is inefﬁcient because its
implementation provides more guarantees than desired. For ex-
ample, on TPMs v1.2, sealed storage is based on asymmetric
cryptography, which provides non-repudiation unnecessarily.
As another example, while symmetric algorithms are available
on TPMs v2.0, the trusted component still implements and en-
forces data access control (i.e., it checks whether the identiﬁed
code is allowed to access the data), besides guaranteeing the
conﬁdentiality or integrity of sealed data. Intel SGX instead
uses a different paradigm. The ENCLU[EGETKEY] instruction
(for sealing) only provides a key to the Enclave based on its
identity. The key is used by the Enclave to protect the data that
can be then released outside its secure execution environment.
Unfortunately, when two Enclaves need a shared secret key,
they have to run an authentication protocol [7] to bootstrap
trust in each other’s attestations and validate public Difﬁe-
Hellman keys. This involves at least two message exchanges,
besides asymmetric cryptographic operations.
1. kget_sndr(idPAL2)
2. kget_rcpt(idPAL1)
PAL1
next PAL: 2
Tab
PAL ID
idPAL1
idPAL2
idPAL3
1
2
3
PAL2
next PAL: 3
measurement of PAL2
Fig. 6: Identity-based Secure Storage construction. It enables two PALs to
share a mutually authenticated secret key in zero rounds, with no message
exchange. Two PALs can use such key to transfer data with minimal overhead.
We propose a new construction that binds a secret shared
key to the identities of two PALs efﬁciently. In particular, for
any two PALs, the construction can build a secret key to create
their secure channel. For any such key, only the PALs with the
correct identity can access it. Our construction can be seen
as a generalization of the Intel SGX approach, since a PAL
is allowed to set up a secure channel not only with another
code module but also with itself—e.g., to seal and save data
in external untrusted storage. Last but not least, it is fast and
requires minimal TCC support.
In contrast to TPM sealed storage, in our solution, the TCC
does not make any access control decision on whether to accept
or reject a PAL request, based on its current conﬁguration (e.g.,
the value of the PCR registers) and the information included in
the sealed data. The TCC always generates symmetric keys on-
demand. For example, it is up to a PAL to decide to use the key
to encrypt (or just authenticate) some result values and what
code module can later retrieve this data. If an invalid module
attempts to obtain encrypted data, it simply gets some random
information because the wrong key is used for decryption.
Similarly, if a valid module is run with incorrect data, it is
simply unable to authenticate the initial input. Hence, it is
essential that correct modules have access to correct identities.
Keys are derived from a master key K. This is a secret
symmetric key that the TCC maintains internally for comput-
ing identity-dependent keys. Any PAL pi can use an identity-
dependent key to protect data. Any such key depends on: K,
pi’s identity and another PAL pj’s identity. Also, the key can
only be accessed by pi and pj.
i
j
−p
When module pi wants to secure some information, it calls
kget sndr with the identity of the receiver pj. The TCC then
performs the operations in Fig. 5 to derive a secret shared
that is then returned to the PAL. To retrieve the
key Kp
same key at a later moment, pj invokes kget rcpt to perform
an equivalent operation. Provided that
the source and the
recipient PALs respectively supply each other’s identity (i.e.,
resp. rcpt≡ pj or sndr≡ pi) to the TCC, the computed key is
the same in the two cases.
The usage of the shared key for the new secure storage
construction is shown in Fig. 6. It allows the protection of data
to be transmitted between adjacent PALs. PALs can use the
identity table Tab to look up the identity of the next executing
PAL according to the control ﬂow. Next, the sender PAL (resp.
recipient PAL) calls kget sndr (resp. kget rcpt) to obtain the
shared key. The key is then used by a function internal to
424
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:20:56 UTC from IEEE Xplore.  Restrictions apply. 
fvTE Protocol 
Entity 
C  UTP  Request service execution with input in and nonce N(cid:2)
UTP 
UTPTCC 
Prepare input:   in1  in || N || Tab(cid:2)
{{out1}Kp1-p2 , Tab[1] ,Tab[2]}  execute(p1, in1)(cid:2)
Repeat for 2 ≤ i ≤ n-1(cid:2)
    {{outi}Kpi - pi+1, Tab[i] ,Tab[i+1]}  (cid:2)
                          execute(pi,  {outi-1 }Kpi-1 – pi  || Tab[i-1])(cid:2)
{outn ,report}  execute(pn, {outn-1}Kpn-1 – pn || Tab[n-1])(cid:2)
UTP  C  Return to client:   {outn , report }(cid:2)
C 
Check execution:   
    verify(h(pn), h(in) || h(Tab) || h(outn), N, K+
TCC, report)(cid:2)
PAL 
p1 
pi 
pn 
execute() step 
Identify p1 in REG(cid:2)
Execute p1 with in1 and compute out(cid:2)
out1   out || h(in) || N || Tab(cid:2)
{out1}Kp1-p2  auth_put(Tab[2], out1)(cid:2)
Return:  {{out1}Kp1-p2 , Tab[1] ,Tab[2]} (cid:2)
Identify pi in REG(cid:2)
ini  auth_get(Tab[i-1], {outi}Kpi -1  - pi)(cid:2)
Execute pi with ini and compute out(cid:2)
outi   out || h(in) || N || Tab(cid:2)
{outi}Kpi – pi+1  auth_put(Tab[i+1], outi)(cid:2)
Return:  {{outi}Kpi – pi+1 , Tab[i] ,Tab[i+1]} (cid:2)
Identify pn in REG(cid:2)
inn  auth_get(Tab[n-1], {outn-1}Kpn -1  - pn)(cid:2)
Execute pn with inn and compute out(cid:2)
outn   out || h(in) || N || Tab(cid:2)
report  attest(N, h(in) || h(Tab) || h(outn ))(cid:2)
Return:  {outn , report} (cid:2)
1 
2 
3 
4 
5 
6 
7 
8 
9 
10 
11 
12 
13 
14 
15 
16 
17 
18 
19 
20 
21 
22 
23 
24 
25 
Fig. 7: fvTE protocol run by client C, the trusted component TCC and the
UTP (above, lines 1-8), and the execute step at the various PALs pi (below,
lines 9-25). A single attestation and veriﬁcation allows the client to trust the
service execution, despite the number of executed PALs. Also, only PALs that
are necessary to serve a speciﬁc request are loaded and executed in the TCC.
the PAL to secure (resp. validate) the data to be released to
(resp. supplied by) the UTP. In order to keep the terminology
simple, we will henceforth reuse the names of the TCC secure
storage primitives — auth put and auth get — to refer to
these internal functions.
Analysis.
In the execution of the key derivation function,
the TCC uses the trusted identity of the currently executing
PAL and a possibly untrusted identity provided by the PAL
itself. These are positioned differently by the TCC in the f
function, depending on whether the current PAL is saving or
retrieving data (as in Fig. 5). The presence and the eventual
veriﬁcation of table Tab ensure that only correct identities
(and thus PALs) are used to call the key derivation function.
Furthermore, since a valid PAL forwards the data to the proper
next PAL in accordance with the control ﬂow, this guarantees
that the right order of execution is followed and that only the
correct next PAL can decrypt/validate the data.
E. A Flexible Trusted Execution Protocol
We now integrate the techniques discussed in the previous
subsections into the Flexible and Veriﬁable Trusted Execution
(fvTE) protocol detailed in Fig. 7. The protocol ensures all