title:POSTER: UAFChecker: Scalable Static Detection of Use-After-Free
Vulnerabilities
author:Jiayi Ye and
Chao Zhang and
Xinhui Han
Received March 3, 2020, accepted April 19, 2020, date of publication April 24, 2020, date of current version May 11, 2020.
Digital Object Identifier 10.1109/ACCESS.2020.2990197
Scalable Static Detection of Use-After-Free
Vulnerabilities in Binary Code
KAILONG ZHU , YULIANG LU , AND HUI HUANG
College of Electronic Engineering, National University of Defense Technology, Hefei 230037, China
Corresponding author: Yuliang Lu (PI:EMAIL)
This work was supported in part by the National Key Research and Development Project of China under Grant 2017YFB0802900.
ABSTRACT The number of use-after-free vulnerabilities has been increasing rapidly in recent years, which
is a serious threat to computer systems. However, few effective mitigations exist for large-scale binary code.
In this study, the authors propose a scalable static approach for detecting use-after-free vulnerabilities in
binary code. First, the use-after-free feature model is proposed to provide guidance for detection. Then,
the binary code of the target program is converted to an intermediate representation, and CFGs (control
ﬂow graphs) are constructed. Finally, lightweight pointer tracking is performed to identify the use-after-free
vulnerable point. Compared with state-of-the-art approaches, this approach uses function summaries rather
than naive in-lining technique for the inter-procedural analysis in the vulnerability detection. Therefore, our
approach has the ability to avoid redundant repeat analysis caused by the in-lining technique in the existing
approaches and reduce the unnecessary performance overhead. The authors have implemented a prototype
called UAFDetector and evaluated it using standard benchmarks and real-world programs. The experimental
results show that this approach is effective in detecting use-after-free vulnerabilities in binary code and is
more efﬁcient and scalable than state-of-the-art static solutions.
INDEX TERMS Vulnerability detection, use-after-free, function summary, UAFDetector.
I. INTRODUCTION
When an object is deallocated in a program, the pointer
to it becomes a dangling pointer. Any dereference of dan-
gling pointers causes a use-after-free vulnerability that can
be exploited by an attacker. Moreover, a double-free vulner-
ability is considered a special use-after-free vulnerability [1].
Fig. 1 shows the number of use-after-free and double-free
vulnerabilities
recorded in the National Vulnerability
Database (NVD) [2] since 2009. These two classes of vul-
nerabilities are increasingly common. These vulnerabilities
are present in various applications, including Microsoft’s
and Google’s browsers, Windows and Linux operating sys-
tem kernels, and OpenJPEG and LibPNG image processing
libraries. Attackers can exploit these vulnerabilities to read or
rewrite sensitive data [3]–[6] and can even hijack the program
control ﬂow to execute arbitrary code [7]–[9]. In the famous
Operation Aurora attack,
the attacker exploited several
0-day vulnerabilities, including use-after-free vulnerabilities,
The associate editor coordinating the review of this manuscript and
approving it for publication was Junaid Arshad
.
FIGURE 1. Use-after-free and double-free vulnerabilities in NVD.
to attack the networks of Google and Adobe, causing serious
economic losses [10].
Current solutions for use-after-free vulnerability detection
fall into two categories: dynamic analysis and static analysis.
Most solutions rely on dynamic analysis [7], [11]–[14], which
generally have a high performance overhead and low code
coverage. Static analysis does not suffer from such limita-
tions. However, there are only a few studies [1], [15], [16]
VOLUME 8, 2020
This work is licensed under a Creative Commons Attribution 4.0 License. For more information, see https://creativecommons.org/licenses/by/4.0/
78713
K. Zhu et al.: Scalable Static Detection of Use-After-Free Vulnerabilities in Binary Code
on static analysis for use-after-free detection, and they are
not widely used in practice due to some important limita-
tions. The solutions in [1] and [15] are only able to analyze
the open-source programs. But in many practical situations,
the original high-level source code is unavailable. The solu-
tion GUEB in [16] is a state-of-the-art static tool for detecting
use-after-free vulnerabilities and has certain ability to detect
vulnerabilities in binary code. In this approach, an in-lining
technique is used for inter-procedural analysis and functions
that are called many times need to be analyzed repeatedly.
This approach introduces a lot of unnecessary overhead in
analyzing large-scale programs. Therefore, this solution is not
scalable enough and only targets small programs.
In this paper, we propose a scalable static approach for
detecting use-after-free vulnerabilities in binary code. First,
a use-after-free vulnerability feature model
is presented
through the analysis of a large number of samples, which pro-
vides a guide for detecting vulnerabilities. Then, considering
indirect jumps, we construct more complete CFGs. Finally,
we focus on pointer-related operations in the program to track
each pointer’s states and use a ﬁnite state machine (FSM) to
identify use-after-free vulnerabilities. The main advantages
of our approach are as follows: (1) the function summaries
technique is used for an inter-procedural analysis instead of
in-lining, which avoids repeated analysis of functions and
improves the scalability of the analysis; and (2) pointer aliases
and indirect jumps are considered to enhance the complete-
ness of the analysis.
able to detect use-after-free vulnerabilities in the bench-
mark with zero false positive rate and 2.39% false neg-
ative rate. In given real-world programs, it can discover
most known vulnerabilities and an unknown vulnerabil-
ity (CNNVD-201904-1451) despite some false positives
and negatives. Furthermore, our approach has lower per-
formance overhead and better scalability than the state-
of-art tool GUEB [16].
The remainder of this paper is organized as follows:
Section II presents the use-after-free feature model and intro-
duces the challenges of detecting use-after-free vulnerabili-
ties. The overview of the proposed method is described in
Section III. Section IV describes the details of each part and
takes a real-world vulnerability as an example to introduce the
workﬂow. Section V presents the implementation details and
evaluates the implemented prototype. The limitations, appli-
cable conditions and improvement measures are discussed in
Section VI. We summarize the related work in Section VII
and provide our conclusions in Section VIII.
II. PROBLEM DESCRIPTION
A. FEATURES OF USE-AFTER-FREE VULNERABILITIES
Through the analysis of a large number of use-after-free vul-
nerabilities, we summarize the feature model of use-after-free
vulnerabilities, as shown in Fig. 2. The model focuses on
three types of pointer operations in the program:
Based on this approach, we implement a prototype
called UAFDetector and use standard benchmarks [17] and
real-world programs to evaluate it. The experimental results
show that our approach can detect known vulnerabilities
effectively and can discover new vulnerabilities in binary
code. Compared with the existing tool GUEB [16], our
approach has less overhead and more scalability.
paper:
Accordingly, we make the following contributions in this
• Proposing a scalable static detection approach for detect-
ing use-after-free vulnerabilities in binary code. This
approach uses the function summaries technique in
an inter-procedural analysis to reduce overhead and
improve scalability, and it integrates a pointer alias anal-
ysis and CFG recovery to improve the completeness of
detection.
• Implementing UAFDetector, which is a prototype for
detecting use-after-free vulnerabilities in binary code.
The prototype uses IDA Pro [18] to disassemble binary
code and uses a binary analysis platform BinNavi [19] to
translate assembly code into intermediate representation
REIL. Then, based on the intermediate code and the
CFGs provided by CFGConstructor [20], UAFDetec-
tor performs the detection procedure to identify use-
after-free vulnerabilities.
• Evaluating the effectiveness and performance overhead
of our approach using a standard benchmark (Juliet Test
Suite [17]) and real-world programs. UAFDetector is
FIGURE 2. The feature model of use-after-free vulnerabilities.
• FREE(p): frees the object pointed to by the pointer p.
This type of operation changes the pointer p into a
dangling pointer, such as the function free in C language.
• USE(p): dereferences the pointer p. FREE(p) is a special
dereference.
• DESTROY(p): destroys the dangling pointer p through
reassigning p to a new valid address or NULL.
Through observation, the path with a use-after-free vulner-
ability has the following features:
1) Creating dangling pointers. A use-after-free vulnerabil-
ity is caused by dereferencing dangling pointers. There-
fore, performing FREE(p) to create dangling pointers is
a necessary condition for causing vulnerabilities.
2) Preserving the dangling pointer. If a dangling pointer is
destroyed by DESTROY(p) before being dereferenced,
no vulnerability will occur. Thus, when use-after-free
vulnerabilities are discovered in practice, developers
usually set the dangling pointer to NULL to prevent
them.
3) Dereferencing a dangling pointer. Not all dangling
pointers lead to use-after-free vulnerabilities because
78714
VOLUME 8, 2020
K. Zhu et al.: Scalable Static Detection of Use-After-Free Vulnerabilities in Binary Code
dangling pointers may not be dereferenced later. A use-
after-free vulnerability occurs only when USE(q) is
executed, where q is a dangling pointer or a dangling
pointer’s alias.
Accordingly, the path a → e → h → i → j in Fig. 2
contains a use-after-free vulnerability, as it satisﬁes the above
three features, where node a creates a dangling pointer p and
node j dereferences it. However, the path a → e → f →
g → j has no use-after-free vulnerabilities because node
f destroys the dangling pointer p. In the path a → b →
c → d, the dangling pointer p is retained but not dereferenced
in the following nodes. Hence, this path also does not contain
vulnerabilities.
B. CHALLENGES
Compared to detecting famous buffer overﬂow vulnerabili-
ties [21], there are many challenges in detecting use-after-free
vulnerabilities using a static analysis in binary code:
1) Incomplete CFG: The construction of a CFG is the
basis of detecting use-after-free vulnerabilities. There
are many binary analysis tools that provide the abil-
ity to construct CFGs, such as IDA Pro. This tool
constructs CFGs from assembly code based on static
analysis. This method cannot obtain indirect jump
addresses, which leads to incomplete CFGs. Detecting
use-after-free vulnerabilities using incomplete CFGs
may result in false negatives.
in different
2) Inter-procedural analysis: The operations FREE(p),
USE(p) and DESTROY(p) related to use-after-free
vulnerabilities may occur
functions.
Hence, vulnerability detection needs to support an
inter-procedural analysis. The existing solution in [16]
implements inter-procedural analysis by using a naive
in-lining technique, which inserts callee functions
directly into the caller function. This approach may be
easier to implement but has a critical limitation that a
function called many times will be analyzed repeatedly.
The repeated analysis introduces a lot of redundancy
overhead in analyzing large-scale programs. Therefore,
the method has a high performance overhead and only
targets small programs. An example will be shown
in Section IV-B to further clarify the limitations of
existing methods.
FIGURE 3. Example of a pointer alias.
3) Alias analysis: Pointer alias is a difﬁcult problem to
solve in detecting use-after-free vulnerabilities. Fig. 3
shows an example of an alias. Two pointers, p and q,
refer to the same memory block; they are then called
aliases. The object pointed to by these two pointers
is deallocated in line 4, and p and q become dangling
pointers. DESTROY(p) in line 5 destroys the dangling
pointer p, while q is still dangling. USE(q) in line 6
leads to a use-after-free vulnerability. If a vulnerability
detection lacks the alias analysis, this vulnerability will
not be discovered.
III. OVERVIEW
Fig. 4 shows the overview of our proposed approach, in which
the white modules represent the existing techniques and the
gray modules represent our proposed parts. The input of the
detection is the binary code of the target program, such as
an executable ﬁle or a dynamic library. The outputs are error
reports containing the sets of program locations involved
in the use-after-free vulnerability. Our approach consists of
two procedures: a pre-processing procedure and a detection
procedure.
• Pre-processing procedure. The main function of this
procedure is to convert binary code into an intermediate
representation and construct the CFGs of functions in the
program. First, we use a disassembler to transform the
binary code into an assembly code. Then, this assembly
code is translated into an intermediate representation
by a translator. The CFGs containing indirect jumps
are constructed from the intermediate representation by
CFGConstructor, which combines dynamic and static
analysis. Finally, this procedure outputs the intermediate
code and the CFGs, which are taken as inputs of the
detection procedure.
• Detection procedure. A scalable static analysis is per-
formed to detect use-after-free vulnerabilities on the
intermediate code and the CFGs. We use the function
summaries technique for an inter-procedural analysis
and a dedicated data ﬂow analysis for the pointer alias.
Finally, exploiting the above analyses, we track the
pointer operations and transfers to identify use-after-free
vulnerabilities and report program points that create and
dereference dangling pointers.
IV. DESIGN
A. CFG CONSTRUCTION
Constructing CFGs is the basis of vulnerability analysis.
Function summaries, alias analysis and pointer tracking in
use-after-free vulnerability detection all depend on CFGs.
It is important to construct complete and accurate CFGs from
binary code.
There are two methods for constructing CFGs from binary
code: dynamic analysis and static analysis. A dynamic
method in [22] constructs CFGs by recording the program
execution paths, which has high accuracy but low path cov-
erage and efﬁciency. The static method, such as IDA Pro,
directly analyzes the code to construct CFGs without running
programs. This method has high code coverage but cannot
VOLUME 8, 2020
78715
K. Zhu et al.: Scalable Static Detection of Use-After-Free Vulnerabilities in Binary Code
FIGURE 4. Overview of our proposed approach.
obtain indirect jump addresses, resulting in some code areas
that cannot be reached.
We use a hybrid analysis CFGConstructor [20] that has
been completed in our previous work to construct CFGs
from binary code. First, a static analysis is used to obtain
the basic control ﬂow without indirect jumps by dividing
and connecting basic blocks. Second, test cases generated by
fuzz testing were exploited to run the target program, during
which a dynamic binary instrumentation technique is used to
obtain indirect jumps. Finally, the results of these two steps
are integrated to construct more complete CFGs by adding
indirect jumps to the basic control ﬂow.
B. FUNCTION SUMMARY GENERATION
Detection of use-after-free vulnerabilities requires tracking
the creation and dereference of dangling pointers, which may
occur in different functions. Hence, it is necessary to sup-
port the inter-procedural analysis. For this issue, the existing