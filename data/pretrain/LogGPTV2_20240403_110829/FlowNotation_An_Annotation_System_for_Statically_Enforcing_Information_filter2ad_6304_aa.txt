title:FlowNotation: An Annotation System for Statically Enforcing Information
Flow Policies in C
author:Darion Cassel and
Yan Huang and
Limin Jia
POSTER: FlowNotation: An Annotation System for Statically
Enforcing Information Flow Policies in C
Darion Cassel
Carnegie Mellon University
Pittsburgh, Pennsylvania
PI:EMAIL
Yan Huang
Indiana University
Bloomington, Indiana
PI:EMAIL
Limin Jia
Carnegie Mellon University
Pittsburgh, Pennsylvania
PI:EMAIL
ABSTRACT
Programmers often need to enforce high-level policies on their
cryptographic applications written in C; for instance, that private
data is not sent over public channels, trusted data is not modified
by untrusted functions, and that the ordering of protocol steps is
maintained. These secrecy, integrity, and sequencing policies can be
cumbersome to check with existing general-purpose tools. We have
developed a novel means of specifying and checking these policies
that allows for a much lighter-weight approach than previous tools;
requiring less work from programmers. Further, we have modeled
our policy annotations as an information flow type system and
proved a noninterference guarantee. We embed the policy anno-
tations in C’s type system via a source-to-source translation and
leverage existing C type checkers to enforce our policies, achieving
high performance and scalability. We show through case studies
of cryptographic libraries from both industry and recent literature
that our work expresses detailed policies for large bodies of C code
with little annotation burden, and finds subtle implementation bugs.
CCS CONCEPTS
• Security and privacy → Information flow control; Software
security engineering;
KEYWORDS
Information Flow Control, Type Systems
ACM Reference Format:
Darion Cassel, Yan Huang, and Limin Jia. 2018. POSTER: FlowNotation: An
Annotation System for Statically Enforcing Information Flow Policies in C.
In 2018 ACM SIGSAC Conference on Computer and Communications Security
(CCS ’18), October 15–19, 2018, Toronto, ON, Canada. ACM, New York, NY,
USA, 3 pages. https://doi.org/10.1145/3243734.3278508
1 INTRODUCTION
Programs often have complex data invariants and policies on API
usage patterns written as library documentations or comments.
What is missing is a lightweight tool for programmers to statically
check high-level policies on cryptographic libraries and protocols
written in C without having to specify large amounts of annota-
tions, state machines, or subtle invariants. The policies that are
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
CCS ’18, October 15–19, 2018, Toronto, ON, Canada
© 2018 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-5693-0/18/10.
https://doi.org/10.1145/3243734.3278508
particularly important are secrecy (e.g., sensitive data is not given
to untrusted functions), integrity (e.g., trusted data is not modified
by untrusted functions), and API call sequencing (e.g., the ordering
of cryptographic protocol steps is maintained).
In this poster, we present a framework called FlowNotation
where C programmers can add lightweight annotations to their
programs to specify policies. These policies are then automatically
checked using a C compiler’s type checker. Our annotations are in
the same family as type qualifiers [12, 13].
In addition to basic secrecy and integrity properties supported
by previous work, our annotations can also specify more complex
API call sequencing properties. Consider the following policy: a
data object is initially tainted, then it has to be sanitized using an
encodeURI API, then the resulting data has to be serialized using
a serialize API. Such API sequencing policies are quite common,
but cannot be straightforwardly implemented using the qualifier
system provided by previous type qualifier works.
To gain a formal understanding of what properties are enforced
by such annotations, we model the annotated types as informa-
tion flow types. We define a core language polC and prove that its
information flow type system enforces noninterference.
We also define µC, a core imperative language with nominal
types but without information flow labels in order to model a frag-
ment of C. We then formally define our translation algorithm based
on polC and µC. We prove the correctness of our translation algo-
rithm: If the translated program is accepted by the type checker in
µC, then the original program is well-typed in polC.
To demonstrate the effectiveness of FlowNotation we imple-
ment a prototype for a subset of C and evaluate the prototype on
several cryptographic libraries. Our evaluation shows that we are
able to specify and check useful and modular information flow poli-
cies and uncover subtle flaws in C programs and APIs. Even though
our examples and case studies center around cryptography-related
programs, much of our proposed method is generally applicable to
other application domains.
2 OVERVIEW AND MOTIVATING EXAMPLES
We illustrate how FlowNotation works below. First, a programmer
annotates their C program, then our source-to-source translation
tool takes the annotated program as input, and produces another
C program. The resulting program is then type checked using a
C compiler. If the compiler returns a type error that means the
policies are violated; otherwise, the policies are satisfied.
′ compiler−→ Type error/OK
p + annotation source-to-source translation
Next we show example secrecy, integrity, and sequencing policies
−→
p
in the context of secure multi-party computation applications.
Poster PresentationCCS’18, October 15-19, 2018, Toronto, ON, Canada22072.1 Secrecy
Suppose a team of software developers is working on a large C
project that uses customers’ financial data. This project integrates
a secure two-party computation component that allows Alice and
Bob to find out which of the two is wealthier without revealing
their wealth to the other or relying on a trusted third party. Let us
assume that the following variable balA contains Alice’s balance,
and therefore should be handled with care. In particular, the pro-
grammer wants to ensure the secrecy of balA. One method is to
use information flow types (e.g. [20]). We will give balA an infor-
mation flow type (int AlicePrivate), indicating that balA is an
integer, and it contains an AlicePrivate type of secret. In contrast,
variables that do not contain secrets can be given the type (int
Public). The information flow type system then makes sure that
read and write operations involving balA are consistent with its
secrecy label.
Our annotations are information flow labels, each of which has
a secrecy component and an integrity component. We allow pro-
grammers to provide these annotations right before the declaration
of balA to specify the secrecy policy as follows:
# requires AlicePrivate : secrecy
int balA ;
This annotation can be used to enforce the following policy P1.
P1 :
balA should never be given as input
to an untrusted function.
Here, trusted functions are those trusted by the programmers not
to leak balA (e.g., send it to an attacker). Next, we discuss how
programmers can annotate trusted functions.
Our programmer trusts a secure computation library that pro-
vides secure computation primitives. Let us assume the API encodeA
converts an integer argument into a bit representation similar to
what is used in Obliv-C [25]. The API yao_execA(f, a) takes a
pointer to a function f and an argument for f, and runs f as a
circuit with Yao’s protocol [21]. Our programmer constructs the
following code for Alice (Bob’s code is symmetric, which we omit):
int compare ( int a , int b) { return a > b; }
int wealthierA ( balA ) {
balA2 = encodeA ( balA );
int res = yao_execA (& compare , balA2 );
reveal (& res , ALICE ); }
This program first encodes Alice’s balance, and then calls yao_execA
with the comparison function and encoded Alice’s balance balA2
as arguments, and finally calls reveal to see the result.
The code as it stands does not type-check after being translated.
The programmer needs to also annotate the secure computation
APIs handling Alice’s balance:
# param AlicePrivate : secrecy
int encodeA ( int balA );
# param (2) AlicePrivate : secrecy
int yao_execA ( void * compare , int balA );
These two annotations state that the functions must accept pa-
rameters with the label AlicePrivate. In the second annotation,
#param(2) specifies that the annotation should only apply to the
second parameter. The annotations ensure that balA cannot be given
to functions that are not allowed (by the programmer) to accept
AlicePrivate-labeled data. As we will show in the next section,
integrity labels work in a similar manner.
2.2 Integrity and Sequencing
We can enforce the following, more refined, policy P2.
P2 :
balA should be used by the encoding function
and then by the Yao protocol execution.
The annotations for balA is as follows:
# requires AlicePrivate : secrecy then EncodedBal :
integrity
int balA ;
The keyword then is a connective that allows for the sequencing
of labels. The encodeA function, as before, requires the argument to
have the AlicePrivate secrecy label. In addition, the return value
from encodeA will have the integrity label EncodedBal, stating that
this is endorsed by the encodeA function to be properly encoded.
The yao_execA function requires the argument to have the same
integrity label. If only programmer-approved encoding functions
are annotated with EncodedBal label at its return value, the type
system will ensure an appropriate API call sequence (encodeA fol-
lowed by yao_execA) be applied on the value stored in balA. It is
safe to lose the AlicePrivate label after encoding because it is no
longer a plaintext balance value.
3 CASE STUDIES
We evaluate the effectiveness of FlowNotation at checking high-
level secrecy, integrity and API usage policies using case studies
drawn from several open-source cryptographic libraries. A sum-
mary of our evaluation results is shown in Figure 1; LoA stands for
the number of lines of annotations, and LoC stands for the number
of lines of code.
The libraries that we examined include: Obliv-C, a C dialect that
features an “oblivious" keyword that its compiler uses to check
that oblivious data is being used correctly [23, 25]; SCDtoObliv,
a set of floating point circuits synthesized into C code [24]; the
Absentminded Crypto Kit (ACK), a library of Secure Computation
protocols and primitives [9, 10]; Secure Mux, a secure multiplexer
application [28]; the Pool Framework, a library for implementing