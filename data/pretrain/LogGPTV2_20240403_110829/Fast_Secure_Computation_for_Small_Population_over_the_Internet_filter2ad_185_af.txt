Lemma 5.4 and 5.3. In case (b), since the TTP is honest, the strong binding property of commitments established
by Round 2 ensures the correctness of output computed by the TTP, irrespective of whether Pα is honest or not.
For case (c), the chosen TTP, Pβ, is honest, irrespective of whether the message (TTP, β) is received from a
corrupt or an honest party. While the former follows from the fact that a corrupt party does not have a corrupt
companion to elect, the latter follows from Lemma 5.2 and 5.1. Now the correctness follows in case (c) from case
(b).
While the sketch of proof of security appears in Appendix E (the full proof and intuition for achieving guaran-
teed output delivery is similar to our 5-round 4PC), we state the theorem below.
Theorem 5.6. Assuming one-way permutations, our protocol g4PC4 securely realizes the functionality FGOD (Fig.
11) against a malicious adversary that can corrupt at most one party.
5.3 Optimizations
The communication efﬁciency of our g4PC4 can be boosted similar to as described for f3PC in Section 3.2.
Additionally, computation of commitment on encoding information by a garbler wrt pp (for NICOM) sent by
20
each of the two evaluators can be avoided as follows: P3 alone chooses pp used for commitment on encoding
information and sends pp to all. The message from garblers can include pp, allowing P4 to check if the garblers
and P3 are in agreement with respect to pp or populate the conﬂict set accordingly based on mismatch.
6 3PC with Guaranteed Output Delivery
In this section, we describe our efﬁcient 3PC protocol, g3PC with guaranteed output delivery. This protocol
necessarily requires a broadcast channel [CHOR16]. In accordance with our goal of computation and communi-
cation efﬁciency, the broadcast communication complexity of our (optimized) protocol is independent of circuit
size. In terms of communication over private channels, g3PC involves a single GC and is therefore comparable to
[MRZ15].
Starting with the protocol of [MRZ15], the main idea of our protocol is centered around the following neat
trick. In a situation where it is publicly known that a pair of parties is in conﬂict, it must be the case that one
among the two speciﬁc parties is corrupt. It follows that the third party is honest and therefore entitled to act as
the trusted-third party (TTP). Suppose such a TTP is established during the protocol, the other parties send their
inputs on clear to this TTP who computes the function on direct inputs and forwards the output to all. Banking on
this intuition, we now proceed to give a high-level description of our protocol.
In the ﬁrst round, similar to f3PC, P3 shares his input while the garblers agree upon common randomness. In
round 2, garblers broadcast the common message computed using shared randomness, namely the GC and com-
mitment on encoding information. Additionally, the garblers privately send the opening of relevant commitments,
namely corresponding to their own input and the input share of P3 held by them. If the broadcast messages are
identical and openings are valid then P3 can begin evaluating the GC. However, if the broadcast messages mis-
match, it can be publicly inferred that P1, P2 are in conﬂict and therefore P3 is eligible to enact the role of TTP.
We extend this idea to the case when broadcast messages are identical but P3 locally identiﬁes one of the garblers
to be corrupt. In this scenario, say P3 identiﬁed P2 to be corrupt. Then, P3 makes this conﬂict public in Round 3
via broadcast. Consequently P1 is entitled to act as the TTP. The protocol ensures that if P3 fails to evaluate the
GC, a TTP is established at most by Round 3. If the TTP is established, the parties send their inputs on clear to
the TTP in Round 4 who computes and subsequently sends the output to all in the ﬁnal round of the protocol.
An issue that surfaces in the above approach is that a corrupt P3 who has successfully evaluated the GC with
respect to his input x3 shared in the round 1, might pretend to be in conﬂict with one of the garblers, say P2. Now
3 (cid:54)= x3 to P1 and get the output corresponding to x(cid:48)
P1 would be established as the TTP. P3 can now send x(cid:48)
3
as well. This violates security since P3 gets outputs corresponding to his two chosen inputs. To handle this, we
adopt the following strategy: The evaluator P3 broadcasts the commitment on his shares in Round 1 and sends the
openings of shares to the respective garbler. A garbler who receives invalid opening is allowed to publicly raise a
conﬂict with P3 in Round 2, establishing his co-garbler as the TTP. If valid openings are issued, P3 is committed
to each of his shares and therefore his input. The binding property of commitment ensures that the TTP computes
output with respect to P3’s shares distributed in Round 1. Tying up the loose ends, if P3 is identiﬁed to be corrupt
by both garblers, then P1 is chosen to be the TTP by default.
In a nutshell, P3 acts as TTP only when common message broadcast by garblers are not identical. Contrarily,
a garbler, say P1, is TTP when either P3 locally identiﬁed P2 to be corrupt at the end of Round 2 (due to invalid
opening of commitment on encoded inputs) or P2 found P3 to be corrupt at the end of Round 1 (inconsistent
opening of commitment of P3’s input share sent to P2). Also, P1 is chosen as TTP by default when both garblers
identify P3 to be corrupt. The formal description of the protocol appears in Figures 7, 8 and its proofs appear
below. Our proposed optimizations which are incorporated in our implementation are given below.
6.1 Correctness and security
Below we give the proof of correctness.
Lemma 6.1. A pair of honest parties can never be in conﬂict.
21
Figure 7: Protocol g3PC
Inputs: Party Pα has xα for α ∈ [3].
Common Inputs: Same as f3PC.
Output: y = C(x1, x2, x3, x4) = f (x1, x2, x3 ⊕ x4)
Primitives: A garbling scheme G = (Gb, En, Ev, De) that is correct, private and authentic with the property
of soft decoding, a NICOM (Com, Open) and a PRG G.
Round 1:
– P1 chooses random seed s ∈R {0, 1}κ for G and sends s to P2.
– P3 picks x31, x32 ∈R {0, 1}(cid:96) with x3 = x31 ⊕ x32. P3 samples pp for NICOM and generates (c31, o31) ←
Com(pp, x31), (c32, o32) ← Com(pp, x32), broadcasts {pp, c31, c32} and sends (x31, o31), (x32, o32) to
P1, P2 respectively.
Round 2:
– Pi(i ∈ [2]) broadcasts (Conflict, P3) if Open(c3i, o3i) (cid:54)= x3i. Else, it does the following:
(cid:96)+α, e1
2(cid:96)+α, e1
(cid:96)+α}α∈[(cid:96)], {e0
◦ Compute GC (C, e, d) ← Gb(1κ, C) using randomness from G(s). Assume {e0
{e0
P1, P2 and the shares of P3 respectively (w.l.o.g).
mitments to e using randomness from G(s). For b ∈ {0, 1}, (cb
(cid:96)+α, ob
(cb
α}α∈[(cid:96)],
2(cid:96)+α}α∈[2(cid:96)] correspond to the encoding information for the input of
◦ Compute permutation strings p1, p2 ∈R {0, 1}(cid:96) for the garblers’ input wires and generate com-
1 ⊕b
),
α
2(cid:96)+α) for α ∈ [2(cid:96)].
◦ P1 computes m1 = x1 ⊕ p1 and sends to P3: the openings of the commitments corresponding to
2(cid:96)+α}α∈[(cid:96)] and m1. Similarly, P2 computes m2 = x2 ⊕ p2 and sends to P3:
(x1, x31) i.e {omα
the openings of the commitments corresponding to (x2, x32) i.e {omα
Set Bi =(cid:8)C,{cb
2 ⊕b
(cid:96)+α) ← Com(pp, epα
(cid:96)+α ) for α ∈ [(cid:96)] and (cb
α}α∈[4(cid:96)],b∈{0,1}(cid:9). Broadcast Bi.
2(cid:96)+α) ← Com(pp, eb
α) ← Com(pp, epα
3(cid:96)+α}α∈[(cid:96)] and m2.
(cid:96)+α, oxα
α , oxα
2(cid:96)+α, ob
α, e1
α, ob
32
31
2
1
– Every party sets TTP as follows. If exactly one Pi(i ∈ [2]) broadcasts (Conflict, P3) in Round 2, set
TTP = P[2]\i. If both raise conﬂict, set TTP = P1. If B1 (cid:54)= B2, set TTP = P3.
Round 3: If TTP = ∅, P3 does the following:
◦ Assign Xα
1 = Open(pp, cmα
α , omα
(Conflict, P1) if Open results in ⊥
(cid:96)+α, omα
(Conflict, P2) if Open results in ⊥
2 = Open(pp, cmα
1
2
2
◦ Assign Xα
◦ Else, set X = X1|X2|X31|X32, run Y ← Ev(C, X) and y ← sDe(Y). Broadcast Y.
If P3 broadcasts (Conflict, Pi), then set TTP = P[2]\i. If TTP = ∅ and P3 broadcasts Y, Pi (i ∈ [2]) does
32 = Open(pp, cxα
(cid:96)+α) and Xα
3(cid:96)+α, oxα
32
the following: Execute y ← De(Y, d). If y = ⊥, set TTP = P1.
1
α ) and Xα
31 = Open(pp, cxα
2(cid:96)+α, oxα
31
31
2(cid:96)+α) for α ∈ [(cid:96)]. Broadcast
3(cid:96)+α) for α ∈ [(cid:96)]. Broadcast
32
Round 4: If TTP (cid:54)= ∅: Pi (i ∈ [2]) sends xi and o3i (if valid) to TTP. P3 sends o31, o32 to TTP.
22
Figure 8: Protocol g3PC (contd)
Round 5: TTP computes x3i = Open(c3i, o3i) using openings sent by P1, P2 (if available), else uses the
openings sent by P3. If valid opening is not received, a default value is used for shares of x3. Compute
y = f (x1, x2, x31 ⊕ x32) and send y to others.
Every party computes output as follows. If y = ⊥ and received y(cid:48) from TTP, set y = y(cid:48).
It is easy to note that a pair of honest garblers will never be in conﬂict since the message B broadcast by
Proof.
them in Round 2 must be identical. Next, a garbler, say P1 and evaluator P3 would be in conﬂict only if one of
the following hold: (a) The commitment and opening of the input share sent by P3 to P1 is inconsistent (b) P1’s
opening of committed encoded input of garbled circuit sent to P3 fails. It is easy to check that the above cannot
occur for honest P1, P3.
Lemma 6.2. An honest evaluator either evaluates the GC successfully at the end of round 2 or a TTP is established
latest by Round 3.
Proof. Consider an honest P3. If a garbler raises a conﬂict with P3 in Round 2, then his co-garbler is established
as the TTP. Else, if P3 receives broadcast and pairwise messages as per the protocol in round 2, then P3 evaluates
the circuit. On the other hand, if P3 discovers that the broadcast messages sent by the garblers do not match, then
P3 is unanimously established as the TTP. Finally, in case P3 locally identiﬁes one of the garblers to be corrupt
due to inconsistent/invalid pairwise message received in round 2, he raises a conﬂict, establishing the other garbler
as the TTP. Thus the lemma holds.
Theorem 6.3. The protocol g3PC is correct i.e output obtained by the parties corresponds to a valid computation
performed on unique set of inputs.
Proof. We analyze the cases based on whether TTP is established during the protocol or not. If not, since none
of the garblers raised a conﬂict with P3 in Round 2, each of them must have a valid opening corresponding to
P3’s public commitment of its input shares. In such a case, these shares constitute P3’s committed input. With
respect to garblers, input labels sent by them in round 2 corresponding to their own input establish their committed
inputs. It now follows from correctness of garbling and authenticity (potentially corrupt P3 could not have forged
Y) that the output obtained by all corresponds to the evaluation of garbled circuit on above mentioned committed
inputs. We now consider the case when TTP is established. Here, the inputs sent by garblers on clear to the
TTP constitute their committed inputs. The committed input of P3 depends on whether the TTP is established
during or after Round 2. In the former where none of the garblers raised conﬂict in Round 2, it is clear from the
protocol description that P3’s committed input is based on its shares distributed in Round 1 (enforced by binding
of commitment on input shares). Else, the committed input of P3 is considered as the one sent on clear to the TTP.
Finally, the correctness of output computation based on committed inputs follows from the fact that the TTP must
be honest (Lemma 6.1 shows that the pair of parties in conﬂict must involve the corrupt).
While the full proof of security appear in Appendix F, the intuition on why the protocol achieves guaranteed
output delivery and the theorem statement follow. Based on whether the evaluator is honest or corrupt, guaranteed
output delivery is argued below. By Lemma 6.2, an honest evaluator either identiﬁes a TTP or evaluates the GC
successfully at the end of round 2. If evaluation is performed, then an honest evaluator would obtain output by
soft decoding and enable the garblers to get output by sending the encoded output. If TTP is identiﬁed by an
honest evaluator all parties accept the output sent by the TTP. Next, consider a corrupt evaluator. In case a corrupt
evaluator does not communicate the encoded output to the garblers or sends an invalid Y, then the garblers would
unanimously identify the evaluator to be corrupt. Then, P1 would be chosen as a TTP and eventually each party
receives the output through the computation performed by TTP. Even in the case when a corrupt evaluator falsely
raises a conﬂict, the TTP chosen by him must be honest and each party would obtain the output from the TTP.
23
Theorem 6.4. Assuming one-way functions, protocol g3PC securely realizes the functionality FGOD (Fig. 11)
against a malicious adversary that corrupts at most one party.
6.2 Optimizations
We propose several optimizations for g3PC to reduce its communication. Firstly, since broadcast communication is
considered more expensive than private communication, a broadcast of a message, say m is replaced with broadcast
of H(cid:48)(m), where H(cid:48) denotes a collision-resistant hash while the message m is sent privately over point-to-point
channel to the receiver. Besides, the trick described for fair3PC (Section 3.2) can be applied where the common
message of garblers B is divided into equal halves B = B1||B2; each garbler sends one part on clear and the other
in compressed form. Second, we elaborate on the optimization applied to broadcast of Y in round 3 by P3: P3
broadcasts H(cid:48)(Y) where Y denotes the encoded output comprising of concatenation of the output label of each
output wire obtained by GC evaluation. Additionally, P3 sends Y privately to each of the garblers enabling them
to compute the hash of the message received privately and check against the broadcast message to conclude its
consistency. Thus, the optimization applied on broadcast of B and Y makes broadcast independent of circuit size.
Finally, we point that the description of protocol in Figures 7, 8 includes certain redundancies such as a party
established as TTP sending message to itself and the protocol proceeding till the last round even in cases where
termination can occur earlier. This was done only to keep the protocol description simple and facilitate better
understanding. In the implementation, the redundant messages are avoided. Further, when TTP is established in
round 2 itself, round 3 can be skipped and the last two rounds executed, enabling the protocol to terminate within
4 rounds.
7 Experimental results
In this section, we provide empirical results for our protocols. We use the circuits of AES-128, SHA-256 and MD5
as benchmarks. We start with the description of the setup environment, both software and hardware.
Hardware Details We have experimented both in LAN and WAN setting. The speciﬁcations of our systems used
for LAN include 32GB RAM; an Intel Core i7-7700-4690 octa-core CPU with 3.6 GHz processing speed. The
hardware supports AES-NI instructions. For WAN setting, we use Microsoft Azure Cloud Services with machines
located in West USA, East Asia and India. Our 3PC protocols have exactly one party at each location while for
4PC results, two of the four parties are located in East Asia and one party each in West USA and India. We
used machines with 1.75GB RAM and single core processor. The bandwidth is limited to 100Mbps for the WAN
network between the machines in West USA and East Asia and it is limited to 8Mbps from the machine in India.
Before running our experiments, we measured sample round trip delay between India-West USA, India-East Asia
and East Asia-West USA for communication of one byte of data. These values average to 0.42 s, 0.14 s and 0.18 s
respectively.
Software Details For efﬁcient implementation, the garbling technique used throughout is that of Half Gates
[ZRE15]. The code is built on libgarble library whose starting point is the JustGarble library, both licensed under
GNU GPL License. The libgarble library operates with AES-NI support from hardware. The operating system
used for LAN and WAN results are Ubuntu 17.10 (64-bit) and Ubuntu 16.04 (64-bit) respectively. Our code
follows the standards of C++11. We make use of openSSL 1.0.2g library for commitments. We use SHA-256
to implement a commitment scheme. We have benchmarked our results with 3 circuits AES, SHA-256, MD5.
The circuit description is obtained as a simple text ﬁle (.txt) for implementation purposes. Communication is
done with the help of sockets. We instantiate multiple threads to facilitate communication between the garblers
and evaluator. The garblers also share a connection between each other to share the randomness. All our results