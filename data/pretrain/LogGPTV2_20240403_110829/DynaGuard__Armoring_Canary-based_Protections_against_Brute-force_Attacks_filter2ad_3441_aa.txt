title:DynaGuard: Armoring Canary-based Protections against Brute-force Attacks
author:Theofilos Petsios and
Vasileios P. Kemerlis and
Michalis Polychronakis and
Angelos D. Keromytis
DynaGuard: Armoring Canary-based Protections against
Brute-force Attacks
Theoﬁlos Petsios
Columbia University
theoﬁPI:EMAIL
Vasileios P. Kemerlis
Brown University
PI:EMAIL
Angelos D. Keromytis
Columbia University
PI:EMAIL
Michalis Polychronakis
Stony Brook University
PI:EMAIL
ABSTRACT
Over the past decade many exploit mitigation techniques
have been introduced to defend against memory corruption
attacks. WˆX, ASLR, and canary-based protections are
nowadays widely deployed and considered standard prac-
tice. However, despite the fact that these techniques have
evolved over time, they still suﬀer from limitations that en-
able skilled adversaries to bypass them.
In this work, we focus on countermeasures against the
byte-by-byte discovery of stack canaries in forking programs.
This limitation, although known for years, has yet to be ad-
dressed eﬀectively, and was recently abused by a series of
exploits that allowed for the remote compromise of the pop-
ular Nginx web server and a full ASLR bypass in x86-64
Linux. We present DynaGuard, an extension to canary-
based protections that further armors hardened applications
against brute-force canary attacks. We have implemented
DynaGuard in two ﬂavors: a compiler-based version, which
incurs an average runtime overhead of 1.2%, and a ver-
sion based on dynamic binary instrumentation, which can
protect binary-only applications without requiring access to
source code. We have evaluated both implementations using
a set of popular server applications and benchmark suites,
and examined how the proposed design overcomes the lim-
itations of previous proposals, ensuring application correct-
ness and seamless integration with third-party software.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection
General Terms
Design, Reliability, Security
Keywords
canary-based protection; canary re-randomization
This paper is authored by an employee(s) of the United States Government and is in the
public domain. Non-exclusive copying or redistribution is allowed, provided that the
article citation is given and the authors and agency are clearly identiﬁed as its source.
ACSAC ’15, December 7–11, 2015, Los Angeles, California, USA
ACM 978-1-4503-3682-6/15/12
DOI: http://dx.doi.org/10.1145/2818000.2818031.
1.
INTRODUCTION
Among the many diﬀerent types of memory corruption
vulnerabilities actively exploited throughout the past two
decades, stack buﬀer overﬂows remain the most frequently
encountered [45], and various protection mechanisms have
been proposed to prevent adversaries from abusing them.
Widely deployed defenses include WˆX [31, 36] and non-
executable memory [20,30], Address Space Layout Random-
ization (ASLR) [18,35], and stack canaries [10,13,28]. How-
ever, none of these protections has fully eliminated stack
smashing attacks.
In fact, although stack buﬀer overﬂows are no longer triv-
ially exploitable, they are still present in popular appli-
cations, and are often used as a stepping stone in mod-
ern, multi-stage exploits that make use of techniques like
Return-Oriented Programming (ROP) [40]. For instance,
the recently-introduced Blind ROP (BROP) [4] attack re-
quires only a stack-based memory corruption vulnerability
and a service that restarts after a crash to automatically
construct a ROP payload.
In certain cases, however, attacks can be rendered feasible
due to inherent limitations of the deployed protection mech-
anisms. In this work, we examine one such case, related to a
limitation of current canary-based protections [10,13], which
allows adversaries to guess the value of a canary in fork-
ing applications, byte-by-byte, in a brute-force manner, and
with a small number of attempts. This is possible due to the
underlying process creation mechanism adopted by modern
operating systems (OSes): new (child) processes are created
by duplicating the memory of a template (parent) process.
This duplication of memory is known to have critical secu-
rity implications. In the Android OS, it signiﬁcantly weak-
ens ASLR [23]. In case of stack canaries, it results in iden-
tical stack canary values being present in the parent and
child process(es), after invoking the fork system call. Al-
though this issue has been known since 2006 [16], it remains
unaddressed. As a result, a previously-known technique for
bypassing SSP (the canary mechanism of GCC [13]) and
ASLR in Linux forking servers [38], was recently used in the
wild by a series of exploits against the (hardened) Nginx
web server [27]. The same canary bypass technique is also
pivotal to the BROP attack [4], which automates the cre-
ation of ROP payloads given only a stack vulnerability and
a service that restarts after a crash. Similarly, a full ASLR
bypass in x86-64 Linux was possible [26], facilitated by a
bypass of SSP using byte-by-byte canary guessing.
The severity and plethora of these exploits underline the
need to revise the design of canary-based protections. To
address the aforementioned issue, we present a scheme that
armors (stack) canary protectors against attacks that brute-
force the canary in forking applications. Speciﬁcally, through
a lightweight, per-thread bookkeeping mechanism, our de-
sign enables the runtime update of the canary value in all
protected (active) stack frames of the running thread, so
that newly-forked processes get a fresh canary, diﬀerent from
the canary of their parent process. Contrary to previous
work [25], our approach guarantees correctness and can be
used as-is in production software.
We have prototyped our proposed solution in DynaGuard,
which can be applied on top of existing stack smashing pro-
tection mechanisms to prevent brute-force guessing of ca-
naries in forking programs. DynaGuard provides protection
across the whole spectrum of applications, as it comes in two
versions: when source code is available, a compiler-level ver-
sion of DynaGuard, implemented as a GCC plugin, incurs
just 1.2% runtime overhead over native execution, and is
fully compatible with third-party libraries that are protected
with the default canary mechanism; for binary-only executa-
bles, for which no source code is available, we have imple-
mented a version of DynaGuard on top of Intel’s Pin [24]
Dynamic Binary Instrumentation (DBI) framework, which
incurs an average slowdown of 2.92% over Pin and 1.7x over
the native binary.
More importantly, the DBI-based and compiler-based ver-
sions of DynaGuard can be combined, if needed, to achieve
full coverage of security-critical applications: parts for which
access to source code is available can be compiled using Dy-
naGuard’s GCC-based version, while all other components
can be protected at runtime using the Pin-based variant (or
the inverse, for instance, if one has access to the OS libraries
but not to the application’s source code), allowing for cost-
eﬀective, targeted protection. In addition, the modular de-
sign of DynaGuard facilitates its integration to the back-
end of popular compilers, such as GCC and LLVM, as it is
naturally compatible with other compiler-assisted hardening
techniques (e.g., PointGuard [9], CFI [1], CPI [22]).
In summary, the main contributions of this work are the
following:
• We present DynaGuard, a robust solution for armoring
existing canary-based protections against brute-force
attacks in forking applications.
• We have evaluated the correctness of a recently pro-
posed solution [25] to the problem of canary brute force
attacks, and demonstrate how DynaGuard overcomes
its design limitations.
• We have implemented two versions of DynaGuard: a
GCC plugin and a DBI tool built on top of Pin, pro-
tecting both binary-only applications and programs
whose source code is available. Both implementations
are publicly available as open-source projects.
• We demonstrate the practicality of our our approach,
which incurs a runtime overhead of 1.2% when applied
at the compiler level, and show that it can be easily
adopted by popular compiler toolchains to further ad-
dress security issues arising from the process creation
mechanism of modern OSes [2, 5, 23, 32].
2. BACKGROUND
2.1 Canary-based Stack Smashing Protection
The main idea behind canary-based stack protections is
to place a tripwire right after the return address, in every
stack frame, to detect overwrites by buﬀer overﬂows. This
tripwire, known as canary or canary cookie, is generated
dynamically at the creation of each thread and is typically
stored in the Thread Local Storage (TLS) area. During
execution, whenever a new frame is created, the canary is
pushed from the TLS into the stack. When the function
epilogue is reached, and right before the destruction of the
stack frame, the canary is compared against the one stored
in the TLS. If the two values do not match, the process is
terminated, as a stack smashing attack has occurred and has
potentially overwritten the return address.
The stack smashing protector of GCC (i.e., SSP [38])
adopts a series of layout transformations to further pre-
vent bypasses. Speciﬁcally, SSP creates local copies of the
function arguments so that the original arguments are never
referenced, and also re-orders local variables in the stack,
placing them always behind buﬀers,
in order to prevent
pointer variables from being overwritten. Although SSP
still faces some limitations [38] (e.g., it does not protect
each buﬀer separately and cannot create argument copies
for functions with a variable number of arguments), it hin-
ders stack smashing signiﬁcantly, as the attacker is unable
to read the TLS area and needs to have knowledge of the ca-
nary value to successfully corrupt the saved return address.
2.2 Bypassing Canary-based Defenses
Attackers wishing to bypass the stack canary protection,
while lacking any additional information, are restricted to a
random-guessing attack, the eﬃciency of which is bounded
by the entropy of the canary. The canary is four bytes long
on 32-bit architectures and eight bytes on 64-bit ones, and
is, in principle, random. However, there do exist cases [38]
where the canary either has a ﬁxed value or always contains
a NULL terminating byte, reducing its entropy. If we ignore
such cases, an attacker will need to perform 232/264 attempts
for brute-forcing the canary in the x86/x86-64 architecture.
However, under certain conditions, an adversary can brute-
force the canary with much fewer attempts, by abusing the
process creation mechanism.
Whenever a process is forked, it inherits the address space
of its parent process, i.e., all the in-memory code and data,
including the canaries placed in the stack frames and the
TLS. If execve is called after fork, all memory regions
of the calling process are overwritten by the program that
gets loaded, whereas, if not, they remain unchanged. Hence,
due to this duplication of memory, in canary-protected ap-
plications, attackers are able to brute-force the canary, byte-
by-byte, as long as they are able to force child processes to
be forked from the same parent process and check if any of
these child processes has crashed or not (i.e., after success-
fully triggering a stack buﬀer overﬂow on the latter). Unfor-
tunately, the aforementioned conditions are met in several
applications, most notably in multi-process, network-facing
programs, such as web and database servers, where new pro-
cesses are forked to service incoming requests.
Speciﬁcally, the byte-by-byte canary brute-force attack
works as follows.
Initially, the adversary exploits a stack
buﬀer overﬂow vulnerability and overwrites only the ﬁrst
(a) Parent process before fork. Frames a and b are canary-protected.
(b) The forked (child) process is an exact copy of the parent.
(c) Updating the canary in the TLS of the child will result in two
canary values being present its stack frames.
(d) Epilogue check for function c succeeds, but will fail once
execution reaches frames inherited from the parent.
Figure 1: Renewing the canary in the TLS alone will result in an abort as soon as execution reaches a stack frame inheritted
from the parent process.
byte of the canary. If the respective process aborts, the at-
tacker knows that the canary check in the function epilogue
failed. Subsequently, the attacker forces the forking of a
new (child) process and tries with a diﬀerent byte value. As
new processes are forked from the same parent, the attacker
only needs 256 requests (128 on average) to brute-force the
ﬁrst byte of the canary. Armed with the correct byte value,
the attacker can then brute-force the second byte using the
same approach, totalling 4 ∗ 256 = 1024 tries, at most, for
the full discovery of the canary in 32-bit architectures, and
8 ∗ 256 = 2048 in 64-bit architectures.
3. CHALLENGES AND REQUIREMENTS
Had the stack canary been diﬀerent for the newly forked
processes, attacks that brute-force the canary value byte-by-
byte would have been infeasible. Since the canary is pushed