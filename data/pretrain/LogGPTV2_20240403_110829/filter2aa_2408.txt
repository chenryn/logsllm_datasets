# Space Elephants at DEFCON 19

## Presented by Abstrct

### About Me
- **Expertise:** Designing videogame UI, Human-Computer Interaction, Graphic Design, and Technical Writing.
- **Passion:** Database and Information Security.

### What is The Schemaverse?
- **Overview:** A space game built entirely in PostgreSQL.
- **Features:**
  - No traditional UI; interactions are through SQL queries.
  - The database is fully accessible over the internet.
  - Security is implemented within the database itself.
  - Surprisingly addictive, fun, and challenging.

### Why The Schemaverse?
- **Educational Value:** Learn about database design and security.
- **Innovation:** Push the boundaries of database systems.
- **Entertainment:** It's also quite amusing.

### Architecture and Security
- **Securing PostgreSQL... Insecurely:**
  - Query Limits
  - Authentication
  - SQL Injections
  - Challenges with some database communities

#### SQL Injection Example
```sql
-- Fleet Script Creation
EXECUTE '
CREATE OR REPLACE FUNCTION FLEET_SCRIPT_' || NEW.id || '() 
RETURNS boolean as 
$fleet_script$
DECLARE
   this_fleet_id integer;
   ' || NEW.script_declarations || '
BEGIN 
   this_fleet_id := ' || NEW.id || ';
   ' || NEW.script || '
   RETURN 1;
END 
$fleet_script$ LANGUAGE plpgsql;'::TEXT;
```

#### Malicious SQL Injection Example
```sql
-- Fleet Script Creation
EXECUTE '
CREATE OR REPLACE FUNCTION FLEET_SCRIPT_' || NEW.id || '() RETURNS boolean as 
$fleet_script$
DECLARE
   this_fleet_id integer;
   ' || NEW.script_declarations || '
BEGIN 
   this_fleet_id := ' || NEW.id || ';
   UPDATE player SET balance=0;  
   RETURN 1;
END 
$fleet_script$ LANGUAGE plpgsql SECURITY DEFINER; 
CREATE OR REPLACE FUNCTION MOVE() RETURNS boolean as 
$fleet_script$
BEGIN
  -- Add move code but altered slightly to send players backwards
  RETURN 1;
END 
$fleet_script$ LANGUAGE plpgsql;'::TEXT;
```

#### SQL Injection Fix
```sql
-- Fleet Script Creation
secret := 'fleet_script_' || (RANDOM()*1000000)::integer;
EXECUTE '
CREATE OR REPLACE FUNCTION FLEET_SCRIPT_' || NEW.id || '() 
RETURNS boolean as 
$' || secret || '$
DECLARE
   this_fleet_id integer;
   ' || NEW.script_declarations || '
BEGIN 
   this_fleet_id := ' || NEW.id || ';
   ' || NEW.script || '
   RETURN 1;
END 
$' || secret || '$ LANGUAGE plpgsql;'::TEXT;
```

### Schema Security
- **Roles**
- **Triggers**
- **Rules**
- **Views**
- **Functions**

### Understanding the Game
- **Getting Started:**
  - Connect using a client (e.g., pgAdmin).
  - Demo of connecting via pgAdmin.

- **Sequence of a Tic:**
  - Every ship moves.
  - All enabled fleets execute.
  - The Perform Mining function runs.
  - Some planets randomly have their fuel increased.
  - Damage/repair is committed to the ship table.
  - Ships damaged for a set time are destroyed.
  - `Jc_seq.nextval` is used for sequence generation.

- **Understanding Relationships:**
  - Ships
  - Planets
  - Events
  - Players
  - Fleets

### Creating Ships
- **Example Queries:**
  ```sql
  INSERT INTO my_ships(name) VALUES('Shipington');
  ```
  ```sql
  INSERT INTO my_ships(name, attack, defense, engineering, prospecting) 
  VALUES('My First Attacker', 15, 5, 0, 0);
  -- Total skill on insert must not exceed 20
  ```
  ```sql
  INSERT INTO my_ships(name, location_x, location_y) 
  VALUES('My Strategically Placed Ship', 100, 100);
  -- You can only create a ship where:
  -- location_x and location_y are between -3000 and 3000
  -- or the coordinates match a planet you are the current conqueror of
  ```

### Functions - Actions
- **Attack(AttackerShip, EnemyShip):**
  ```sql
  SELECT Attack(ship_in_range_of, id), name FROM ships_in_range;
  -- Uses my_ships.attack and enemy ships' defense
  ```
- **Repair(RepairShip, DamagedShip):**
  ```sql
  SELECT Repair(10, id) FROM my_ships ORDER BY current_health ASC;
  -- Uses my_ships.engineering to determine repair amount
  ```
- **Mine(MinerShip, Planet):**
  ```sql
  SELECT mine(my_ships.id, planets.id) FROM my_ships, planets 
  WHERE my_ships.location_x = planets.location_x AND my_ships.location_y = planets.location_y;
  -- Uses luck and my_ships.prospecting when mining is performed
  ```

### Functions - Movement
- **Move(Ship ID, Speed, Direction, Destination X, Destination Y):**
  ```sql
  SELECT MOVE(id, 100, NULL, destination_x, destination_y), id, name, location_x, location_y FROM my_ships;
  UPDATE my_ships SET direction=90, speed=10 WHERE name='Shipington';
  ```

### Other Functions
- **UPGRADE(Ship ID, Code, Quantity)**
- **REFUEL_SHIP(Ship ID)**
- **CONVERT_RESOURCE(Resource, Quantity)**
- **READ_EVENT(Event ID)**
- **GET_CHAR_VARIABLE(Variable Name)**
- **GET_NUMERIC_VARIABLE(Variable Name)**

### How to Win
- **Criteria:**
  - Conquered Planets
  - Most Ships
  - Best Ships
  - Most Amount of Destruction

### Fleet Scripts
- **Why, What, and How:**
  - Demonstration of creating a script.
  - Error handling.
  - First-ever Schemaverse Tournament at DEFCON!

### Tournament Details
- **Schedule:**
  - Starts: Thursday afternoon
  - Ends: Sunday at Noon
- **Registration:**
  - Location: Contest Area
- **Prizes:**
  - To be announced

### Resources
- **Schemaverse DEFCON Tournament:**
  - [http://defcon.schemaverse.com](http://defcon.schemaverse.com)
- **Project Home:**
  - [http://Schemaverse.com](http://Schemaverse.com)
- **GitHub:**
  - [http://github.com/Absrtct/Schemaverse](http://github.com/Absrtct/Schemaverse)
- **Wiki:**
  - [http://github.com/Absrtct/Schemaverse/Wiki](http://github.com/Absrtct/Schemaverse/Wiki)

### Thank You
- **DEFCON 19 Organizers!**

---

**Tigereye, App, Rick**