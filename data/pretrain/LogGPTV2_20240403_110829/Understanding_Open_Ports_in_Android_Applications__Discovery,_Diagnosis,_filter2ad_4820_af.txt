Android static analysis. Static analysis has been used
extensively to understand the (in)security of Android apps.
12
They have been applied to malware analysis (e.g., [59], [68],
[77], [85]), privacy leakage detection (e.g., [58], [60], [61]),
vulnerability discovery (e.g., [47], [63], [81], [82], [84], [87]),
and so on. Two analysis frameworks, FlowDroid [40] and
Amandroid [76], are proposed to simplify tool development.
For example, OPAnalyzer [52] is built upon Amandroid to
forwardly track the ﬂows between server sockets’ accept()
calls and sinks. However, it cannot analyze open-port param-
eters due to the lack of a backward-style parameter tracking
engine. There are a few static tools for parameter analysis,
but they cannot be applied to our problem due to limitations,
such as no complete parameter representation in SAAF [51],
no array handling [86], and no open port relevant API mod-
eling [42]. We address these issues by introducing the back-
ward slicing graph and semantic-aware constant propagation.
Besides uncovering open-port parameters, our OPTool is also
the ﬁrst static analysis tool able to detect open-port SDKs in
Android apps.
VIII. CONCLUSION
In this paper, we proposed the ﬁrst open-port analysis
pipeline to conduct a systematic study on open ports in An-
droid apps and their threats. By ﬁrst deploying a novel crowd-
sourcing app on Google Play for ten months, we observed the
actual execution of open ports in 925 popular apps and 725
built-in apps. Crowdsourcing also provided us a more accurate
view of the pervasiveness of open ports in Android apps:
15.3% discovered by our crowdsourcing as compared to the
previous estimation of 6.8%. We then showed the signiﬁcant
presence of SDK-introduced open ports and identiﬁed insecure
open-port API usages through the static analysis enhanced
with open-port context and semantics. Furthermore, we un-
covered ﬁve vulnerability patterns in open ports and reported
vulnerabilities in popular apps and widely-embedded SDKs.
The feasibility of remote open-port attacks in today’s networks
and the effectiveness of denial-of-service attacks were also
experimentally evaluated. We ﬁnally discussed mechanisms for
different stakeholders to mitigate open-port threats.
ACKNOWLEDGEMENTS
We thank all the anonymous reviewers of this paper for
their valuable comments. This work is partially supported
by the Singapore National Research Foundation under NCR
Award Number NRF2014NCR-NCR001-012, and the National
Natural Science Foundation of China (Grant No. U1636205).
REFERENCES
[1]
[2]
[3]
[4]
[5]
[6]
[7]
“5G Carrier Grade Wi-Fi: Addressing the Needs for Uplink Through-
put, Dense Deployments and Cellular-like Quality,” http://tinyurl.com/
5gNeedOfUplink.
“AlarmManager,” https://developer.android.com/reference/android/app/
AlarmManager.html.
“AlarmManager change since Android 4.4,” https://developer.android.
com/about/versions/android-4.4.html#BehaviorAlarms.
“Alibaba AMap SDK,” http://lbs.amap.com/api/android-sdk/summary.
“Android Fragmentation Report August 2015,” https://opensignal.com/
reports/2015/08/android-fragmentation/.
“Android Logcat,” https://developer.android.com/reference/android/util/
Log.html.
“AndroidVideoCache,”
AndroidVideoCache.
https://github.com/danikula/
[8]
[9]
[10]
[11]
[12]
[13]
[14]
[15]
[16]
[17]
[18]
[19]
[20]
[21]
[22]
[23]
[24]
[25]
[26]
[27]
[28]
[29]
[30]
[31]
[32]
[33]
[34]
[35]
[36]
[37]
[38]
[39] K. Allix, T. F. Bissyande, J. Klein, and Y. L. Traon, “AndroZoo:
Collecting millions of Android apps for the research community,” in
Proc. ACM MSR, 2016.
[40] S. Arzt, S. Rasthofer, C. Fritz, E. Bodden, A. Bartel, J. Klein, Y. Traon,
D. Octeau, and P. McDaniel, “Flowdroid: Precise context, ﬂow, ﬁeld,
object-sensitive and lifecycle-aware taint analysis for Android apps,” in
Proc. ACM PLDI, 2014.
13
Identiﬁers
in
Android
O,”
to
Device
AdTech
SDK,”
http://www.aolpublishers.com/support/
UPnP
SDK,”
https://github.com/cybergarage/
https://developer.android.com/reference/android/
for Android,” https://www.pnfsoftware.com/jeb/
“Aol
documentation/mobile/ads.md.
“Apache Cordova SDK,” https://cordova.apache.org/docs/en/latest/
guide/platforms/android/.
“BluetoothSocket,”
bluetooth/BluetoothSocket.html.
“Changes
https://android-developers.googleblog.com/2017/04/
changes-to-device-identiﬁers-in.html.
“Conﬁgure Apps with Over 64K Methods,” https://developer.android.
com/studio/build/multidex.html.
“Corona Game Engine SDK,” https://docs.coronalabs.com/native/
android/index.html.
“CyberGarage
cybergarage-upnp.
“Disassemble Android dex ﬁles,” http://blog.vogella.com/2011/02/14/
disassemble-android-dex/.
“The ephemeral port range,” http://www.ncftp.com/ncftpd/doc/misc/
ephemeral ports.html.
“Facebook Audience Network SDK,” https://developers.facebook.com/
docs/audience-network/android-native.
“Getui Push SDK,” http://docs.getui.com/mobile/android/overview/.
“hping3,” http://linux.die.net/man/8/hping3.
“Huawei’s 5G Vision: 100 Billion connections, 1 ms Latency, and 10
Gbps Throughput,” http://www.huawei.com/minisite/5g/en/deﬁning-5g.
html.
“JEB Decompiler
android.
“LG Smartshare,” http://www.lg.com/support/smart-share.
“LocalServerSocket — Android Developers,” https://developer.android.
com/reference/android/net/LocalServerSocket.html.
“Millennial
android-ad-sdk/.
“MIT App Inventor,” https://github.com/mit-cml/appinventor-sources.
“NFCSocket: Android Play Near Flied Communication in the Socket
way,” https://github.com/Chrisplus/NFCSocket.
“Nmap: the network mapper,” https://nmap.org/.
“PhoneGap SDK,” https://phonegap.com/.
“proc(5): process info pseudo-ﬁle system - Linux man page,” http://
linux.die.net/man/5/proc.
“Samsung Accessory SDK,” http://developer.samsung.com/galaxy/
accessory.
“Selenium - web browser automation,” http://docs.seleniumhq.org/.
“Setting the Record Straight on Moplus SDK and the Wormhole
Vulnerability,” http://tinyurl.com/wormholevulnerability.
“Sony DLNA Support,” https://esupport.sony.com/US/p/support-info.
pl?info id=884.
“The tcp states.h ﬁle in Linux kernel,” http://git.kernel.org/cgit/linux/
kernel/git/torvalds/linux.git/tree/include/net/tcp states.h?id=HEAD.
“Tcp/udp port numbers used in samsung system,” ftp://81.24.117.226/
Samsung/OS%20ports/attachment.pdf.
“Tencent XG Push SDK,” http://docs.developer.qq.com/xg/.
“Titanium
droid,”
titanium-mobile-intro-series-fastdev-for-android/.
“Yandex
Metrica
metrica-sdk-android.
An-
http://www.appcelerator.com/blog/2011/05/
http://docs.onemobilesdk.aol.com/
https://github.com/yandexmobile/
Fastdev
for
Mobile
Intro
Series:
SDK,”
SDK,”
Ad
[41] M. Backes, S. Bugiel, and E. Derr, “Reliable third-party library de-
tection in Android and its security applications,” in Proc. ACM CCS,
2016.
[42] M. Backes, S. Bugiel, E. Derr, S. Gerling, and C. Hammer, “R-Droid:
Leveraging Android app analysis with static slice optimization,” in Proc.
ACM AsiaCCS, 2016.
[43] R. Bonett, K. Kaﬂe, K. Moran, A. Nadkarni, and D. Poshyvanyk,
“Discovering ﬂaws in security-focused static analysis tools for Android
using systematic mutation,” in Proc. USENIX Security, 2018.
[44] Y. Cao, Y. Fratantonio, A. Bianchi, M. Egele, C. Kruegel, G. Vigna,
and Y. Chen, “EdgeMiner: Automatically detecting implicit control ﬂow
transitions through the Android framework,” in Proc. ISOC NDSS, 2015.
[45] E. Chin, A. Felt, K. Greenwood, and D. Wagner, “Analyzing inter-
application communication in Android,” in Proc. ACM MobiSys, 2011.
[46] Y. Duan, M. Zhang, A. V. Bhaskar, H. Yin, X. Pan, T. Li, X. Wang,
and X. Wang, “Things you may not know about Android (un)packers:
A systematic study based on whole-system emulation,” in Proc. ISOC
NDSS, 2018.
[47] M. Egele, D. Brumley, Y. Fratantonio, and C. Kruegel, “An empirical
study of cryptographic misuse in Android applications,” in Proc. ACM
CCS, 2013.
[48] M. Egele, C. Kruegel, E. Kirda, and G. Vigna, “PiOS: Detecting privacy
leaks in iOS applications,” in Proc. ISOC NDSS, 2011.
[49] W. Enck, D. Octeau, P. McDaniel, and S. Chaudhuri, “A study of
Android application security,” in Proc. USENIX Security, 2011.
[50] M. Grace, W. Zhou, X. Jiang, and A. Sadeghi, “Unsafe exposure
analysis of mobile in-app advertisements,” in Proc. ACM WiSec, 2012.
J. Hoffmann, M. Ussath, T. Holz, and M. Spreitzenbarth, “Slicing
droids: Program slicing for smali code,” in Proc. ACM SAC (Symposium
on Applied Computing), 2013.
[51]
[52] Y. Jia, Q. Chen, Y. Lin, C. Kong, and Z. Mao, “Open doors for Bob and
Mallory: Open port usage in Android apps and security implications,”
in Proc. IEEE EuroS&P, 2017.
[53] M. Johns, S. Lekies, and B. Stock, “ZMap: Fast Internet-wide scanning
and its security applications,” in Proc. USENIX Security, 2013.
[54] O. Lhotak and L. Hendren, “Scaling Java points-to analysis using
Spark,” in Proc. Springer Compiler Construction, 2003.
[55] L. Li, T. F. Bissyande, D. Octeau, and J. Klein, “DroidRA: Taming
reﬂection to support whole-program analysis of Android apps,” in Proc.
ACM ISSTA, 2016.
[56] Z. Li, W. Wang, C. Wilson, J. Chen, C. Qian, T. Jung, L. Zhang, K. Liu,
X. Li, and Y. Liu, “FBS-Radar: Uncovering fake base stations at scale
in the wild,” in Proc. ISOC NDSS, 2017.
[57] C. Lin, H. Li, X. Zhou, and X. Wang, “Screenmilker: How to milk your
Android screen for secrets,” in Proc. ISOC NDSS, 2014.
[58] K. Lu, Z. Li, V. P. Kemerlis, Z. Wu, L. Lu, C. Zheng, Z. Qian, W. Lee,
and G. Jiang, “Checking more and alerting less: Detecting privacy
leakages via enhanced data-ﬂow analysis and peer voting,” in Proc.
ISOC NDSS, 2015.
[59] E. Mariconti, L. Onwuzurike, P. Andriotis, E. D. Cristofaro, G. Ross,
and G. Stringhini, “MaMaDroid: Detecting Android malware by build-
ing markov chains of behavioral models,” in Proc. ISOC NDSS, 2017.
[60] Y. Nan, M. Yang, Z. Yang, S. Zhou, G. Gu, and X. Wang, “UIPicker:
User-input privacy identiﬁcation in mobile applications,” in Proc.
USENIX Security, 2015.
[61] Y. Nan, Z. Yang, X. Wang, Y. Zhang, D. Zhu, and M. Yang, “Finding
clues for your secrets: Semantics-driven, learning-based privacy discov-
ery in mobile apps,” in Proc. ISOC NDSS, 2018.
[62] D. Octeau, P. McDaniel, S. Jha, A. Bartel, E. Bodden, J. Klein, and Y. L.
Traon, “Effective inter-component communication mapping in Android
with Epicc: An essential step towards holistic security analysis,” in Proc.
USENIX Security, 2013.
[63] M. Oltrogge, E. Derr, C. Stransky, Y. Acar, S. Fahl, C. Rossow,
G. Pellegrino, S. Bugiel, and M. Backes, “The rise of the citizen
developer: Assessing the security impact of online app generators,” in
Proc. IEEE Symposium on Security and Privacy, 2018.
[64] T. Peng, C. Leckie, and K. Ramamohanarao, “Survey of network-based
defense mechanisms countering the DoS and DDoS problems,” in Proc.
ACM CSUR, 2007.
[65] S. Poeplau, Y. Fratantonio, A. Bianchi, C. Kruegel, and G. Vigna,
“Execute this! analyzing unsafe and malicious dynamic code loading
in android applications,” in Proc. ISOC NDSS, 2014.
[66] L. Qiu, Y. Wang, and J. Rubin, “Analyzing the Analyzers: FlowDroid/Ic-
cTA, AmanDroid, and DroidSafe,” in Proc. ACM ISSTA, 2018.
[67] Z. Qu, S. Alam, Y. Chen, X. Zhou, W. Hong, and R. Riley, “DyDroid:
Measuring dynamic code loading and its security implications in
Android applications,” in Proc. IEEE DSN, 2017.
[68] S. Rasthofer, S. Arzt, M. Miltenberger, and E. Bodden, “Harvesting
runtime values in Android applications that feature anti-analysis tech-
niques,” in Proc. ISOC NDSS, 2016.
[69] A. Razaghpanah, R. Nithyanand, N. Vallina-Rodriguez, S. Sundaresan,
M. Allman, C. Kreibich, and P. Gill, “Apps, trackers, privacy, and
regulators: A global study of the mobile tracking ecosystem,” in Proc.
ISOC NDSS, 2018.
J. Schiller, F. Turbak, H. Abelson, J. Dominguez, A. McKinney,
J. Okerlund, and M. Friedman, “Live programming of mobile apps in
App Inventor,” in Proc. ACM Workshop on Programming for Mobile &
Touch, 2014.
[70]
[71] Y. Shao, J. Ott, Y. J. Jia, Z. Qian, and Z. M. Mao, “The misuse of
Android Unix domain sockets and security implications,” in Proc. ACM
CCS, 2016.
[72] D. Springall, Z. Durumeric, and J. A. Halderman, “FTP: The forgotten
cloud,” in Proc. IEEE DSN, 2016.
[73] R. Stevens, C. Gibler, J. Crussell, J. Erickson, and H. Chen, “Inves-
tigating user privacy in Android Ad libraries,” in Proc. IEEE Mobile
Security Technologies (MoST), 2012.
[74] X. Tang, Y. Lin, D. Wu, and D. Gao, “Towards dynamically monitoring
Android applications on non-rooted devices in the wild,” in Proc. ACM
WiSec, 2018.
[75] N. Vallina-Rodriguez, S. Sundaresan, C. Kreibich, N. Weaver, and
V. Paxson, “Beyond the radio: Illuminating the higher layers of mobile
networks,” in Proc. ACM MobiSys, 2015.
[76] F. Wei, S. Roy, X. Ou, and Robby, “Amandroid: A precise and general
inter-component data ﬂow analysis framework for security vetting of
Android apps,” in Proc. ACM CCS, 2014.
[77] M. Wong and D. Lie, “IntelliDroid: A targeted input generator for the
dynamic analysis of Android malware,” in Proc. ISOC NDSS, 2016.
[78] M. Y. Wong and D. Lie, “Tackling runtime-based obfuscation in
Android with TIRO,” in Proc. USENIX Security, 2018.
[79] D. Wu and R. K. C. Chang, “Indirect ﬁle leaks in mobile applications,”
in Proc. IEEE Mobile Security Technologies (MoST), 2015.
[80] D. Wu, R. K. C. Chang, W. Li, E. K. T. Cheng, and D. Gao, “MopEye:
Opportunistic monitoring of per-app mobile network performance,” in
Proc. USENIX Annual Technical Conference, 2017.
[81] D. Wu, X. Liu, J. Xu, D. Lo, and D. Gao, “Measuring the declared
SDK versions and their consistency with API calls in Android apps,”
in Proc. Conference on Wireless Algorithms, Systems, and Applications
(WASA), 2017.
[82] D. Wu, X. Luo, and R. K. C. Chang, “A sink-driven approach to
detecting exposed component vulnerabilities in Android apps,” CoRR,
vol. abs/1405.6282, 2014.
[83] L. Xing, X. Bai, N. Zhang, X. Wang, X. Liao, T. Li, and S.-M.
Hu, “Staying secure and unprepared: Understanding and mitigating
the security risks of Apple ZeroConf,” in Proc. IEEE Symposium on
Security and Privacy, 2016.
[84] G. Yang, J. Huang, G. Gu, and A. Mendoza, “Study and mitigation of
origin stripping vulnerabilities in hybrid-postMessage enabled mobile
applications,” in Proc. IEEE Symposium on Security and Privacy, 2018.
[85] M. Zhang, Y. Duan, H. Yin, and Z. Zhao, “Semantics-aware An-
droid malware classiﬁcation using weighted contextual API dependency
graphs,” in Proc. ACM CCS, 2014.
[86] Y. Zhou, L. Wu, Z. Wang, and X. Jiang, “Harvesting developer
credentials in Android apps,” in Proc. ACM WiSec, 2015.
[87] C. Zuo, Z. Lin, and Y. Zhang, “Why does your data leak? uncovering
the data leakage in cloud from mobile apps,” in Proc. IEEE Symposium
on Security and Privacy, 2019.
14