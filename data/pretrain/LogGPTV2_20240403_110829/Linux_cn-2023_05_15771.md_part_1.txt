---
author: Pratham Patel
category: 软件开发
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 2319
date: '2023-05-01 14:50:31'
editorchoice: false
excerpt: 推进你的 Rust 学习，熟悉 Rust 程序的变量和常量。
fromurl: https://itsfoss.com/rust-variables/
id: 15771
islctt: true
largepic: /data/attachment/album/202305/01/144948gp13zdindx50ll0p.png
permalink: /article-15771-1.html
pic: /data/attachment/album/202305/01/144948gp13zdindx50ll0p.png.thumb.jpg
related:
- displayorder: 0
  raid: 15709
- displayorder: 0
  raid: 15811
reviewer: wxy
selector: lkxed
summary: 推进你的 Rust 学习，熟悉 Rust 程序的变量和常量。
tags:
- Rust
thumb: false
title: 'Rust 基础系列 #2: 在 Rust 程序中使用变量和常量'
titlepic: true
translator: Cubik65536
updated: '2023-05-01 14:50:31'
---
![](/data/attachment/album/202305/01/144948gp13zdindx50ll0p.png)
> 
> 推进你的 Rust 学习，熟悉 Rust 程序的变量和常量。
> 
> 
> 
在 [该系列的第一章](/article-15709-1.html)中，我讲述了为什么 Rust 是一门越来越流行的编程语言。我还展示了如何 [在 Rust 中编写 Hello World 程序](/article-15709-1.html)。
让我们继续 Rust 之旅。在本文中，我将向你介绍 Rust 编程语言中的变量和常量。
此外，我还将讲解一个称为“ 遮蔽   shadowing ”的新编程概念。
### Rust 变量的独特之处
在编程语言中，变量是指 *存储某些数据的内存地址的一个别名* 。
对 Rust 语言来讲也是如此。但是 Rust 有一个独特的“特性”。每个你声明的变量都是 **默认  不可变的   immutable ** 。这意味着一旦给变量赋值，就不能再改变它的值。
这个决定是为了确保默认情况下，你不需要使用  自旋锁   spin lock  或  互斥锁   mutex  等特殊机制来引入多线程。Rust **会保证** 安全的并发。由于所有变量（默认情况下）都是不可变的，因此你不需要担心线程会无意中更改变量值。
这并不是在说 Rust 中的变量就像常量一样，因为它们确实不是常量。变量可以被显式地定义为可变的。这样的变量称为 **可变变量** 。
这是在 Rust 中声明变量的语法：
```
// 默认情况下不可变
// 初始化值是**唯一**的值
let variable_name = value;
// 使用 'mut' 关键字定义可变变量
// 初始化值可以被改变
let mut variable_name = value;
```
> 
> ? 尽管你可以改变可变变量的值，但你不能将另一种数据类型的值赋值给它。
> 
> 
> 这意味着，如果你有一个可变的浮点型变量，你不能在后面将一个字符赋值给它。
> 
> 
> 
### Rust 数据类型概观
在上一篇文章中，你可能注意到了我提到 Rust 是一种强类型语言。但是在定义变量时，你不需要指定数据类型，而是使用一个通用的关键字 `let`。
Rust 编译器可以根据赋值给变量的值推断出变量的数据类型。但是如果你仍然希望明确指定数据类型并希望注释类型，那么可以这样做。以下是语法：
```
let variable_name: data_type = value;
```
下面是 Rust 编程语言中一些常见的数据类型：
* **整数类型**：分别用于有符号和无符号的 32 位整数的 `i32` 和 `u32`
* **浮点类型**：分别用于 32 位和 64 位浮点数的 `f32` 和 `f64`
* **布尔类型**：`bool`
* **字符类型**：`char`
我会在下一篇文章中更详细地介绍 Rust 的数据类型。现在，这应该足够了。
> 
> ? Rust 并不支持隐式类型转换。因此，如果你将值 `8` 赋给一个浮点型变量，你将会遇到编译时错误。你应该赋的值是 `8.` 或 `8.0`。
> 
> 
> 
Rust 还强制要求在读取存储在其中的值之前初始化变量。
```
{ // 该代码块不会被编译
    let a;
    println!("{}", a); // 本行报错
    // 读取一个**未初始化**变量的值是一个编译时错误
}
{ // 该代码块会被编译
    let a;
    a = 128;
    println!("{}", a); // 本行不会报错
    // 变量 'a' 有一个初始值
}
```
如果你在不初始化的情况下声明一个变量，并在给它赋值之前使用它，Rust 编译器将会抛出一个 **编译时错误** 。
虽然错误很烦人，但在这种情况下，Rust 编译器强制你不要犯写代码时常见的错误之一：未初始化的变量。
### Rust 编译器的错误信息
来写几个程序，你将
* 通过执行“正常”的任务来理解 Rust 的设计，这些任务实际上是内存相关问题的主要原因
* 阅读和理解 Rust 编译器的错误/警告信息
#### 测试变量的不可变性
让我们故意写一个试图修改不可变变量的程序，看看接下来会发生什么。
```
fn main() {
    let mut a = 172;
    let b = 273;
    println!("a: {a}, b: {b}");
    a = 380;
    b = 420;
    println!("a: {}, b: {}", a, b);
}
```
直到第 4 行看起来都是一个简单的程序。但是在第 7 行，变量 `b` —— 一个不可变变量 —— 的值被修改了。
注意打印 Rust 变量值的两种方法。在第 4 行，我将变量括在花括号中，以便打印它们的值。在第 8 行，我保持括号为空，并使用 C 的风格将变量作为参数。这两种方法都是有效的。（除了修改不可变变量的值，这个程序中的所有内容都是正确的。）
来编译一下！如果你按照上一章的步骤做了，你已经知道该怎么做了。
```
$ rustc main.rs
error[E0384]: cannot assign twice to immutable variable `b`
 --> main.rs:7:5
  |
3 |     let b = 273;
  |         -
  |         |
  |         first assignment to `b`
  |         help: consider making this binding mutable: `mut b`
...
7 |     b = 420;
  |     ^^^^^^^ cannot assign twice to immutable variable
error: aborting due to previous error
For more information about this error, try `rustc --explain E0384`.
```
> 
> ? “binding” 一词是指变量名。但这只是一个简单的解释。
> 
> 
> 
这很好的展示了 Rust 强大的错误检查和信息丰富的错误信息。第一行展示了阻止上述代码编译的错误信息：
```
error[E0384]: cannot assign twice to immutable variable b
```
这意味着，Rust 编译器注意到我试图给变量 `b` 重新赋值，但变量 `b` 是一个不可变变量。所以这就是导致这个错误的原因。
编译器甚至可以识别出错误发生的确切行和列号。
在显示 `first assignment to b` 的行下面，是提供帮助的行。因为我正在改变不可变变量 `b` 的值，所以我被告知使用 `mut` 关键字将变量 `b` 声明为可变变量。
> 
> ?️ 自己实现一个修复来更好地理解手头的问题。
> 
> 
> 
#### 使用未初始化的变量
现在，让我们看看当我们尝试读取未初始化变量的值时，Rust 编译器会做什么。
```
fn main() {
    let a: i32;
    a = 123;
    println!("a: {a}");
    let b: i32;
    println!("b: {b}");
    b = 123;
}
```
这里，我有两个不可变变量 `a` 和 `b`，在声明时都没有初始化。变量 `a` 在其值被读取之前被赋予了一个值。但是变量 `b` 的值在被赋予初始值之前被读取了。
来编译一下，看看结果。
```
$ rustc main.rs
warning: value assigned to `b` is never read
 --> main.rs:8:5
  |
8 |     b = 123;
  |     ^
  |
  = help: maybe it is overwritten before being read?
  = note: `#[warn(unused_assignments)]` on by default
error[E0381]: used binding `b` is possibly-uninitialized
 --> main.rs:7:19
  |
6 |     let b: i32;
  |         - binding declared here but left uninitialized
7 |     println!("b: {b}");
  |                   ^ `b` used here but it is possibly-uninitialized
  |
  = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)
error: aborting due to previous error; 1 warning emitted
For more information about this error, try `rustc --explain E0381`.
```
这里，Rust 编译器抛出了一个编译时错误和一个警告。警告说变量 `b` 的值从来没有被读取过。