        res = n.padEnd(9,rstr)  
        s1= encrypto(res,15,25)  
        f1 = b1.encode(s1)  
        ws.send(f1)  
        console.log('Connection Send:'+f1)  
    };  
    ws.onclose = function(evt) {  
        console.log("Connection closed.");  
    };  
    function Encode() {  
      _keyStr = "/128GhIoPQROSTeUbADfgHijKLM+n0pFWXY456xyzB7=39VaqrstJklmNuZvwcdEC";
这里基本已经可以看到 加密的逻辑了 基本可以猜测我们需要的内容就在这里
> 找到完整的代码可以试试用关键字 `_keyStr`
接下来摸到相关的内存 Unit 号之后 在该数字后面稍微减少 10 左右
然后使用 Data Unit 分析附近内存号 ± 20 个内存单元的内容
接着我们可以摸到如下的代码 大约在 内存编号 987382 处
    function randomString(e) {  
        e = e || 32  
        var t = "ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678",  
        a = t.length,  
        n = "";  
        for (i = 0; i > 2;  
          enc2 = ((chr1 & 3) > 4);  
          enc3 = ((chr2 & 15) > 6);  
          enc4 = chr3 & 63;  
          if (isNaN(chr2)) {  
            enc3 = enc4 = 64;  
          } else if (isNaN(chr3)) {  
            enc4 = 64;  
          }  
          output = output +  
          _keyStr.charAt(enc1) + _keyStr.charAt(enc2) +  
          _keyStr.charAt(enc3) + _keyStr.charAt(enc4);  
        }  
        return output;  
      }  
      _utf8_encode = function (string) {  
        string = string.replace(/\r\n/g,"\n");  
        var utftext = "";  
        for (var n = 0; n  127) && (c > 6) | 192);  
            utftext += String.fromCharCode((c & 63) | 128);  
          } else {  
            utftext += String.fromCharCode((c >> 12) | 224);  
            utftext += String.fromCharCode(((c >> 6) & 63) | 128);  
            utftext += String.fromCharCode((c & 63) | 128);  
          }  
        }  
        return utftext;  
      }  
    }  
### 逆向算法
这里我写了一个小小的 Decode 就交给队里的逆向大师傅了
我的 Decode
    // encrypto rev
    function decrypto(str ,xor ,hex) {
        console.log("decrypto_get:","str: " + str, xor,hex)
        let splitStr = String.fromCharCode(hex + 97);
        resultStr = str.split(splitStr);
        console.log(resultStr)
        resultList = []
        for(let i = 0; i> (-2 * bitCounter & 6)
                    );
                }
            }
            return output;
        };
合作非常愉快
队里的 RE 大师傅用了一会儿就搞定了，搞定之后直接顺手就解出结果了。
> 什么叫术业有专攻啊 战术后仰 （x
### 结果
    WdzsPXdzs
    MrtMmCrtM
    CBDkfSBDk
    TYKf4XYKf
    Fbspppbsp
    {kKfEZkKf
    LzaTNdzaT
    OfGDiDfGD
    LxTQYcxTQ
    _BmtPGBmt
    SnH6CxnH6
    ti6kzzi6k
    RKPCiwKPC
    1xzrcnxzr
    nQ74wYQ74
    gWZ3X6WZ3
    sHWPZ3HWP
    _AcyG4Acy
    1ic4ZYic4
    sH7BQ5H7B
    _KmhYMKmh
    FzErmGzEr
    @KTmPbKTm
    k65sDx65s
    esEbHRsEb
    _5nmf45nm
    Bt3WEJt3W
    UDC5RwDC5
    ThBpHbhBp
    ==> WMCTF{LOL_StR1ngs_1s_F@ke_BUT
BUT 后面明显还有后半句话 猜想是 一半 flag 的藏头
想到之前还存在后半段 Flag 在内存中 进行一个拼接后提交
    WMCTF{LOL_StR1ngs_1s_F@ke_BUT_HTTP3_1s_C000L}
虽然说有一点点脑洞但是基本题目逻辑是清晰的。可以说是出的很好的一道 misc。
> misc 不是套娃捏 misc == 套娃 的坏毛病建议改改
# 说说 Autopsy 工具
赛后在和队友和其他队伍的成员交流的时候, 发现大家都基本在使用 `VOL` `取证大师` `strings`或者一些二进制编辑器，甚至听说有用 WinHex
嗯做来解这道题的。相反对于一些国外的优秀工具了解并不是很多，于是我一合计就有了这篇文章。
在 Autopsy 的帮助下，我基本不需要担心搜素字符串不全或者很慢的问题，这些内容都交给工具自动处理了。Autopsy
不仅非常的贴心的在关键字的搜索中有专门的正则搜索，而且还会额外帮你匹配大小写不敏感的搜索，也可以匹配到诸如
`S\x00T\x00R\x00I\x00N\x00G\x00` 的字符串。所以我的脑袋基本聚集于根据获取的结果进一步推理相关内容去解题的过程中。
此外 Windows 版本使用流程和 web
版本的基本一致，如果你是使用该版本来解决这道题，你可以直接提取出来镜像里所有的文件。关键字搜索也很方便，他可以直接识别出来 go
文件。但是定位代码相关上下文就非常的困难，就是 data unit 相关的功能有一点点欠缺，不过问题不大。