and react to such event fast enough before the AP transmits new frames. Given
the stringent timing requirement of this attack, it is unlikely that attackers can
successfully exploit this false negative.
To measure the probability of this false negative in actual WLAN traﬃc, we
collected frame traces when an STA downloads a 89-Mbyte ﬁle through the AP.
The STA downloaded the ﬁle 2 times when it is close to the AP and another 2
Table 2. Percentage of frames that are sent before a beacon or probe response frame
and eventually lost when downloading a 89-Mbyte ﬁle. These represent the upper bound
for the type of false negatives in which an attacker forges an out-of-order frame from
the AP.
STA Loca-
tion
AP
Frames
False Neg-
ative Per-
centage
Frames
Lost Be-
fore Bea-
con/Probe
Response
Far
Far
Near
Near
87,764
86,816
63,799
65,013
32
21
19
20
0.036%
0.024%
0.029%
0.031%
Sequence Number-Based MAC Address Spoof Detection
325
times when it is far away from the AP. The results are in Table 2. When the
downloading STA is far away from the AP, the monitor node captures more
frames as more frames are retransmitted.
From the frame traces, we counted the number of instances in which AP’s
frame is lost before a beacon/robe response frame. Only these frames can poten-
tially lead to this type of false negatives. As shown in Table 2, regardless of the
location of the downloading STA, the percentage of lost frames whose sequence
number is in the duplicate range of a beacon/robe response frame remains con-
sistently low, under 0.03%. Because this percentage is almost negligible and the
timing requirement for successful exploit is so stringent, we believe this type of
false negative will not be a threat in practice.
Simulating Victim STA’s Sequence Number. In this case, an attacker
simulates the victim STA’s sequence number when the victim is inactive, and
eventually misleads the monitor node into thinking that subsequent frames from
the victim are actually spoofed frames. To demonstrate this attack, we need a
way to manipulate an IEEE 802.11 frame’s sequence number without modifying
the ﬁrmware on the WLAN NIC. We used the following procedure to mount this
attack. First we monitor the victim STA’s sequence number, then we transmit a
suﬃcient number of frames from the attacker NIC so that its current sequence
number is the same as the victim’s. Next we change the attacker NIC’s MAC
Table 3. The frame trace that shows how an attacker correctly simulates a victim’s
sequence number while it is inactive. Although the current algorithm can eventually
detect the spooﬁng activity, it cannot detect all the spoofed frames in real time.
Frame Attacker Victim Gap
Index Frame SN Frame SN
1
2
3
4
5
6
7
8
9
10
11
12
13
14
22
23
24
25
26
27
28
29
30
31
32
21
1
1
1
1
1
1
1
1
22
23
4089
4090
1
1
1
326
F. Guo and T.-c. Chiueh
address to be the same as the victim’s and ﬁnally transmit a series of spoofed
frames, which to the monitor node are as real as those from the victim STA.
Table 3 shows the sequence number trace of this attack scenario.
In the beginning, the victim’s current sequence number is 21. From frame 2
to frame 9, the attacker simulates the sequence numbers of the victim and sends
spoofed frames without being detected. To speed up the test, the monitor node
sends out a periodic probing every 10 frames. So frame 10 is triggered by the
probing and is a probe response from the victim with a sequence number of
22. At this point, the inter-frame sequence number gap is 4089, which triggers
the veriﬁcation process. So frame 11 is again a probe response from the victim.
But since our sequence number baseline is already tricked as 29 by the attacker,
frame 11 looks normal in the veriﬁcation process because its gap is 4090 and
is bigger than 4089. Fortunately, frame 12 from attacker indeed reveals that its
gap is “smaller” than frame 10’s gap and raises a spooﬁng alarm.
In the above test, the proposed algorithm will not report the attacker’s frames
as spoofed frames. Instead, it will label the victim’s frames (frame 10 and 11)
as spoofed frames because the detection algorithm is tricked into believing that
the attacker’s sequence number is the victim’s current sequence number.
To successfully exploit this type of false negative, an attacker needs to con-
stantly monitor the victim’s sequence number, and needs to have a way to change
its sequence number state to be the same as the victim’s before the latter changes.
If the victim is inactive, the attacker’s spoofed frames will not get caught until
the monitor node starts probing the victim. So in the current design, the spoof-
ing will be caught within 2000 frames, in the worst case. If the victim is active,
each frame the victim sends will expose the attacker’s spooﬁng attempt. In this
false negative, not every frame can be detected. But as soon as the victim node
becomes active, the spooﬁng activity will be detected.
If the spoofed frames are data frames, this false negative does not pose a
serious threat as long as the spooﬁng activity is eventually detected. However,
for management or control frames such as deauthentication and disassociation,
delayed detection of spooﬁng is undesirable. Our current solution to this problem
is to double-check the validity of the sequence number of every sensitive manage-
ment frame so that spoof detection of these types of frames is in real time even
if the attacker can correctly simulates the victim’s sequence number. Because
the number of sensitive management frames is small in real WLAN traﬃc, the
performance impact of additional checking is small.
No Probe Response During Veriﬁcation Period. If the monitor node does
not receive any response from the victim during the veriﬁcation period, it will
terminate the veriﬁcation process and no spooﬁng alert will be raised. Therefore,
the algorithm relies on that the victim node can respond to probes, which are
in the form of ARP request/response, before the veriﬁcation period ends.
The ARP request/response round-trip time is tested on both idle channels
and fully loaded channels. We sent ARP requests from the monitor node to the
victim every one second. When the channel is idle, the round-trip time for an
ARP probe is only around 3 msec. When channel is fully loaded, the ARP probe
Sequence Number-Based MAC Address Spoof Detection
327
round-trip time increases to around 100 msec. However, during the whole test,
regardless of whether the channel is idle or busy, no ARP responses are lost.
This means that with a veriﬁcation timer of 200 msec, we can expect most ARP
responses to come back before the timer expires. So we believe this type of false
negative is rare in practice when the veriﬁcation timer is properly set.
In summary, among the three types of false negatives examined, only the
second type, simulating the victim’s sequence number, appears feasible from the
attacker’s standpoint. Even if the attacker can simulate the victim’s sequence
number correctly, the spooﬁng will be caught as soon as the victim sends out any
frame. By sending a probe for each sensitive management frame, the proposed
spoof detection algorithm can detect spooﬁng of these frames in real time, further
reducing the potential threat of this type of false negatives. The ﬁrst type, faking
an out-of-order frame that the AP happens to lose, is unlikely to be exploited
because the percentage of lost frames before a beacon/probe response frame is
below 0.03%. The third type, receiving no probe responses within the veriﬁcation
period, is also rare in practice if the veriﬁcation timer is properly set.
5.4 Detecting Real Attacks
Finally we installed the AirJack tool [5] on the attacker node, and mounted
attacks by injecting spoofed frames as if they were from the victim node. Figure 6
shows that the algorithm detects all of the four spoofed frames because in the
veriﬁcation process, the sequence number of the ARP response frame is “smaller”
than the spoofed frame. There is no false negative.
Because the victim node is placed far away from the AP, there are several
frames with a gap around 6. This triggers the veriﬁcation process. Since all sub-
sequent frames in the veriﬁcation period are “larger” than the frame triggering
Spoofed Frame Gap
1000
p
a
G
r
e
b
m
u
N
e
c
n
e
q
e
S
100
10
1
0
Frame Index
500
Fig. 6. Inter-frame sequence number gaps for frames that appear in an attack test.
There are 4 attacks in the test and the proposed spoof detection algorithm detects all
of them. Even though there are lost frames, they do not cause false positives.
328
F. Guo and T.-c. Chiueh
the veriﬁcation, the algorithm correctly ignores these abnormal sequence number
gaps and there is no false positive either.
6 Conclusion
Compared with wired networks, wireless LAN opens up new attack possibili-
ties because an attacker can easily send any frames to a given WLAN. More-
over, because the IEEE 802.11 standard does not provide any mechanism for
per-frame source authentication, it is relatively easy for an attacker to pretend
to be any entity it desires. By impersonating a legitimate AP or STA, an at-
tacker can disrupt the operation of a wireless LAN by mounting various types
of denial-of-service attacks, using faked deauthentication/disassociation frames,
power saving frames, etc. Using a spoof attack, an attacker can also steal cre-
dential information, launch man-in-the-middle attacks, or simply gain access
to a network. Widely available wireless LAN attack tools such as Airjack [5],
Void11 [4], KisMAC [7], Airsnarf [6], dsniﬀ [8], WEPWedgie [3], etc., further sim-
pliﬁes the logistics of mounting these attacks, making it possible for casual users
to attempt these attacks. While the ultimate solution to the spooﬁng problem
is through a cryptographic sender authentication mechanism, so far incorporat-
ing link-layer sender authentication for all types of frames into the IEEE 802.11
standard does not appear likely, at least in the foreseeable future. Moreover, the
large installed base of legacy IEEE 802.11 devices demands a diﬀerent solution
that does not require any infrastructure modiﬁcations.
This paper proposes a sequence number-based spoof detection algorithm that
can eﬀectively detect MAC address spooﬁng without requiring any changes to
existing APs or STAs. By leveraging the sequence number ﬁeld in the IEEE
802.11 MAC header, all existing spooﬁng attacks can be detected without any
false positive or negative. Although the idea of using sequence number for spoof
detection has been discussed in other papers and some commercial WLAN mon-
itoring systems [17,18,19] claim the ability to detect spooﬁng, to the best of our
knowledge this paper represents the ﬁrst paper that details the results of a sys-
tematic study on how to detect spooﬁng using sequence numbers in real WLAN
environments, where frame loss, retransmission and out-of-order transmission
is common. We describe the proposed spoof detection algorithm in detail and
comprehensively analyze its weaknesses in terms of its false positives and false
negatives. Furthermore, the proposed spoof detection algorithm is implemented
and quantitatively tested against real WLAN traﬃc to empirically evaluate the
seriousness of its false positives and false negatives.
The test results show the algorithm can tolerate STAs with abnormal sequence
number evolution patterns without generating any false positives. As for false
negatives, each spoofed frames will be detected if casual attackers don’t exploit
the false negative of the algorithm. If attackers can successfully exploit the false
negatives, in the worst case the proposed algorithm can always detect a spooﬁng
activity although some of the spoofed frames may go undetected, and all spoofed
management frames will be detected in real time.
Sequence Number-Based MAC Address Spoof Detection
329
References
1. IEEE 802.11
Standard.
http://standards.ieee.org/getieee802/download/802.
11-1999.pdf
2. J. Bellardo and S. Savage. 802.11 Denial-of-Service Attacks: Real Vulnerabili-
ties and Practical Solutions. In Proceedings of the USENIX Security Symposium,
Washington D.C., August 2003.
3. WEPWedgie. http://sourceforge.net/projects/wepwedgie/
4. void11. http://www.wlsec.net/void11/
5. AirJack. http://sourceforge.net/projects/airjack/
6. Airsnarf. http://airsnarf.shmoo.com/
7. KisMAC. http://binaervarianz.de/projekte/programmieren/kismac/
8. dsniﬀ. http://www.monkey.org/∼dugsong/dsniﬀ
9. N. Borisov, I. Goldberg, and D. Wagner. Intercepting Mobile Communications:
The Insecurity of 802.11. Mobicom 2001
10. J. Wright. Detecting Wireless LAN MAC Address Spooﬁng. http://home.
jwu.edu/jwright/papers/wlan-mac-spoof.pdf
11. E. D Cardenas. MAC Spooﬁng–An Introduction. http://www.giac.org/practical/
GSEC/Edgar Cardenas GSEC.pdf
12. D. Dasgupta, F. Gonzalez, K. Yallapu and M. Kaniganti. Multilevel Monitoring
and Detection Systems (MMDS). In the proceedings of the 15th Annual Computer
Security Incident Handling Conference (FIRST), Ottawa, Canada June 22-27, 2003
13. J. Hall, M. Barbeau and E. Kranakis. Using Transceiverprints for Anomaly Based
Intrusion Detection. In Proceedings of 3rd IASTED, CIIT 2004, November 22-24,
2004, St. Thomas, US Virgin Islands.
14. J. Yeo, M. Youssef and A. Agrawala. A framework for wireless LAN monitoring and
its applications. In Proceedings of the 2004 ACM workshop on Wireless security,
October 01-01, 2004, Philadelphia, PA, USA
15. F. Robinson. 802.11i and WPA Up Close. Network Computing, 2004.
16. A. Mishra and W. Arbaugh. An Initial Security Analysis of the IEEE 802.1X
Standard. CS-TR 4328, Department of Computer Science, University of Maryland,
College Park, December 2002.
17. AirDefense. Enterprise Wireless LAN Security and WLAN Monitoring. http://
www.airdefense.net/
18. Aruba Wireless Networks. Wireless
Intrusion Protection.
http://www.
arubanetworks.com/pdf/techbrief-IDS.pdf
19. AirMagnet. http://www.airmagnet.com/products/enterprise.htm
20. J. Malinen. Host AP driver for Intersil Prism2/2.5/3. http://hostap.epitest.ﬁ/