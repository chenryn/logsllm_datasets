I think this could be a very practical solutions for whole set of issues where
aggregation needs to be done on nested documents but be able to group on its
parent document properties. It i snot the same as using reverse nested because
reverse nested changes document scope to groupp and then it will needs to be
changed back to nested again introducing double-counting.  
Also from ease of use it would be a significant step forward comparing to
using reverse nested just to be able to access parent document properties
(even if were equivalent)
Here is an example I used in another issue:
Imagine having Teams that handle Requests of certain Priority. Each request
may have multiple teams assigned to it and each team request assignment has
number of hours allocated for this team on this request
    request:{
      priority:1,
      teams:[
        {name:'team1', hours:10},
        {name:'team2', hours:20},
      ]
    }
I need a report that gives me number of hours by team by priority. Doing
nested aggregation on **teams.name** and then reverse nested to group on
**priority** and then nested to sum **teams.hours** double-counts hours
because second nesting on teams knows nothing about upstream nesting as it is
executed in context of request and as result it will lump hours for each team
on request under the top level team aggregation
If i could access "../priority" from teams nested document context I would not
have to use reverse nested and lose my aggregation context and everything
would have worked like a charm
please see also #16380