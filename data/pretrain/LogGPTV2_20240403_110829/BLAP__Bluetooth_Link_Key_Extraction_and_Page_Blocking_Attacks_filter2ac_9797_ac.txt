challenges a prover with two arbitrary values, and the prover
then calculates and responds with a hash of the values and
its link key. On receipt of it, the veriﬁer can conﬁrm whether
the prover possesses the same link key by comparing its local
calculation result and the response value.
2Depending on the selected IO capabilities, the suitable association model
is selected among the following four options: Numeric Comparison, Just
Works, Out of Band, and Passkey Entry. For example, Numeric comparison
is launched when both devices have capabilities of displaying a six-digit
number and providing a ‘Yes/No’ input method for manual comparison and
authentication code conﬁrmation.
After the LMP authentication, both devices generate an
encryption key using an encryption key generator that takes
the following parameters: a public random number, an extra
result value obtained from the challenge-response procedure
in LMP authentication, and a link key.
III. SYSTEM AND ATTACK MODELS
A. System Model
We suppose a Bluetooth system composed of three devices,
A, M, and C, each of which plays different roles as follows.
M is a device with sensitive data which can be shared via
Bluetooth proﬁle services such as Phone Book Access Proﬁle
(PBAP), Hands-Free Proﬁle (PBAP), and Message Access
Proﬁle (MAP) (e.g., mobile phone). C is another device trying
to pair with M as a trusted client (e.g., car-kits, headset
devices, or PC). A is a malicious device aiming to connect
to the Bluetooth services in M to access sensitive data by
impersonating C. SSP authentication and LMP authentication
procedures are supposed to protect the Bluetooth communica-
tions between M and C for each bonded or non-bonded case.
However, we will demonstrate how our two attacks break them
in the subsequent sections.
B. Attack Model and Assumption
In our attack model, an attacker’s ﬁnal goal is to Bluetooth
connect to M in order to mine sensitive information. To this
end, the attacker establishes a long-term presence around M
(i.e., a hard target), collecting a list of pairing devices (i.e., soft
targets) that are easily accessible and relatively unprotected.
Once C is determined, the attacker harvests pairing information
of C, impersonates C using A, and establishes an illicit and
persistent connection to M. In the attack, we assume that the
attacker A can (1) silently access and manipulate C, (2) extract
HCI dump from C, (3) sniff USB data of HCI from C, and (4)
obtain BDADDR of C.
As for the ﬁrst assumption, there are many real-world sce-
narios where C (e.g., car-kit, headset device, etc) receives less
security attention than M (e.g., smartphones). For instance,
on-board infotainment devices do not directly store secure
information. They thus tend to be easily shared without much
security concern, making C vulnerable to physical access by
A. As for the second assumption, some operating systems
provide HCI dump tools. For example, Android supports a
background HCI dump option among its native hidden menu,
called ‘Bluetooth HCI snoop log’ that anyone can activate
in a straightforward way. As for the third assumption, there
are various USB analyzers such as ‘Free USB Analyzer’
[16], which are free to use. Thus, it is also not a strong
assumption that
the attacker can sniff the USB interface
for HCI data extraction in practice. Finally, for BDADDR
tracking, Cominelli et al. [17] proved that it is possible to
calculate an actual BDADDR from Bluetooth signals in 4
seconds.
Therefore, we consider that our attack model and assump-
tions are reasonable in practice, posing realistic threats. On
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:17:30 UTC from IEEE Xplore.  Restrictions apply. 
229
the basis of the attack models and assumptions, we describe
the details of attack implementations in the next sections.
IV. LINK KEY EXTRACTION ATTACK
Link key extraction attack aims to extract bonded link keys.
Once a link key is extracted, A can leverage it continuously
for impersonation attacks as well as eavesdropping against M.
Thereby sensitive Bluetooth data such as phone books, mes-
sages, and phone call conversations of M will be continuously
leaked.
Although link keys are used by the controller, it typically
has limited storage for only supporting light, small, and low-
powered Bluetooth chipset designs. Thus, the host stack which
typically has enough storage is used to manage (e.g., storing
and reloading) link keys. Whenever a link key is generated, the
controller sends the link key to the host stack through HCI via
HCI Link Key Notiﬁcation for the purpose of future reuse.
After that, on the subsequent re-connection, if LMP needs the
link key for a certain device, the controller requests the link
key to the host using HCI Link Key Request, and then the
host replies to the event with a corresponding key via HCI.
While a link key is loaded in the messages it is not protected,
i.e. the link key is transmitted through the HCI as plaintext.
Furthermore, the HCI may leak its data more easily than the
host and the controller. Thus, the attacker extracts HCI data of
a target device for the purpose of obtaining a target link key,
which is the point that our link key extraction attack exploits.
Next, we show how to extract HCI data, and describe our
attack procedure.
A. Extracting HCI Data from HCI Dump
The HCI dump is a widely used HCI logging method
by Bluetooth implementations [18], [19]. It allows users to
log the whole HCI data in RFC 1761 format [20] between
a host and a connected controller. The link key related
HCI messages, such as HCI Link Key Request and HCI
via HCI Link Key Notiﬁcation, are also logged by the HCI
dump, including a link key in their payload.
The HCI dump log can be easily parsed as shown in
Fig. 3. In the ﬁgure, a mobile phone and a headset device
are bonded with a link key ‘71bb87cecb...’, and the key
information is captured from the HCI in the mobile phone.
When they start to authenticate each other, each controller
requests a corresponding link key to the connected host with
HCI Link Key Request. The bottom of the ﬁgure shows that
HCI Link Key Request Reply, which is the reply command
for the event,
includes the corresponding link key. If an
attacker can get the HCI dump from a device, he can exploit
it to extract link keys in the device.
Some Linux-based operating systems support SW tools of
HCI dump. For example, one can launch an HCI dump after
installing the ‘bluez-hcidump’ package on Ubuntu, which can
be an effective attack surface for the attacker. Android OS
also provides an HCI dump tool. However, no installation of
the hcidump package is required, as the HCI dump module
is built in the package of the Android host stack solution
(cid:43)(cid:82)(cid:86)(cid:87)(cid:3)
(cid:43)(cid:82)(cid:86)(cid:87)(cid:3)
(cid:42)(cid:37)(cid:43)(cid:3)
(cid:21)(cid:17)(cid:3)(cid:43)(cid:38)(cid:44)(cid:66)(cid:47)(cid:76)(cid:81)(cid:78)(cid:66)(cid:46)(cid:72)(cid:92)(cid:66)(cid:53)(cid:72)(cid:84)(cid:88)(cid:72)(cid:86)(cid:87)(cid:3)
(cid:42)(cid:37)(cid:43)(cid:3)
(cid:21)(cid:17)(cid:3)(cid:43)(cid:38)(cid:44)(cid:66)(cid:47)(cid:76)(cid:81)(cid:78)(cid:66)(cid:46)(cid:72)(cid:92)(cid:66)(cid:53)(cid:72)(cid:84)(cid:88)(cid:72)(cid:86)(cid:87)(cid:3)
(cid:22)(cid:17)(cid:3)(cid:43)(cid:38)(cid:44)(cid:66)(cid:47)(cid:76)(cid:81)(cid:78)(cid:66)(cid:46)(cid:72)(cid:92)(cid:66)(cid:53)(cid:72)(cid:84)(cid:88)(cid:72)(cid:86)(cid:87)(cid:66)(cid:53)(cid:72)(cid:83)(cid:79)(cid:68)(cid:92)(cid:3)
(cid:22)(cid:17)(cid:3)(cid:43)(cid:38)(cid:44)(cid:66)(cid:47)(cid:76)(cid:81)(cid:78)(cid:66)(cid:46)(cid:72)(cid:92)(cid:66)(cid:53)(cid:72)(cid:84)(cid:88)(cid:72)(cid:86)(cid:87)(cid:66)(cid:53)(cid:72)(cid:83)(cid:79)(cid:68)(cid:92)(cid:3)
(cid:38)(cid:82)(cid:81)(cid:87)(cid:85)(cid:82)(cid:79)(cid:79)(cid:72)(cid:85)(cid:3)
(cid:20)(cid:17)(cid:3)(cid:36)(cid:88)(cid:87)(cid:75)(cid:72)(cid:81)(cid:87)(cid:76)(cid:70)(cid:68)(cid:87)(cid:76)(cid:82)(cid:81)(cid:3)(cid:86)(cid:87)(cid:68)(cid:85)(cid:87)(cid:3)
(cid:38)(cid:82)(cid:81)(cid:87)(cid:85)(cid:82)(cid:79)(cid:79)(cid:72)(cid:85)(cid:3)
Fig. 3: A link key in a HCI packet and its HCI dump
Fig. 4: HCI dump menu in Android Automotive platform
by default. Further, the module can be easily executed via
Android’s native menu, ‘Android developer options’, a set of
hidden menu. Therefore, anyone can activate it by operating an
Android settings app, tapping the build number several times
[21], and performing the HCI dump via ‘Bluetooth HCI snoop
log’ option. The snoop log option enables background logging
for HCI dump, which can be extracted by users via ‘Android
bug report’ [22] without any system access permission. Hence,
it is straightforward for the attacker to extract an HCI dump
log, including link keys, from an Android platform.
Capturing HCI dump from released products is also possible
by leveraging their HW ports. Many vendors (e.g., Bluetooth
headset manufacturers) provide HCI dump tools for debugging
purposes. Although they require hardware access, such as
debugging port wiring,
it may not be difﬁcult for well-
motivated attackers to carry out the attack.
B. Extracting HCI Data via USB Snifﬁng
While some platforms (e.g., Android OS and Linux-based
OS) provide HCI dump, the others (e.g., Microsoft Windows
host stack and CSR harmony host stack solutions) do not
support it. However, the HCI data can still be leaked through
its hardware interface.
There are typically two types of Bluetooth chipsets. One is
the ‘controller-type’ consisting of controller components. It is
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:17:30 UTC from IEEE Xplore.  Restrictions apply. 
230
connected to an Application Processor which has host compo-
nents inside. The other is the ‘stand alone-type’ which consists
of the whole core components, including host stack, HCI,
and controller. The Bluetooth system using the controller-
type chipset employs physical transport interfaces such as
UART or USB for the HCI. It is thus possible to sniff the
hardware port with capturing equipment. For example, FTE
commercially provides a device called FTS4USB™ [23] that
can capture UART/USB HCI data by connecting electronic
wires to hardware ports between AP and controller.
Windows OS can also support a USB-type Bluetooth dongle
as the Bluetooth controller. Speciﬁcally,
the host stack is
implemented on CPU, and the host and the controller are
connected via USB, which is the hardware interface of the
HCI. To extract HCI data, the attacker may sniff the USB using
various USB analyzers available online for free. In Section
VI-B1, we describe how to extract a link key via USB snifﬁng
in practice.
C. Attack Procedure
Direct extraction of HCI data from a private device M
would be difﬁcult in a naive way because all of the precon-
ditions, such as executing HCI dump or USB snifﬁng, can
hardly be satisﬁed in practice. For example, when the attacker
accesses M and tries to silently extract the HCI dump log, it
may fail if M is locked. Hence, our attack model does not aim
to extract a link key directly from the victim device. Rather, by
taking advantage of the fact that a pair of bonded devices share
exactly the same link key, the attacker aims to leverage the link
key from C which can be easily shared with the attacker (e.g.,
headset, car-kit, or PC), and deliver the attack against M.
In the attack procedure,
the attacker can sniff physical
interface of HCI on Windows PC, or gather HCI dump logs
on Android systems such as an Android automotive platform.
Fig. 4 shows the Android automotive platform providing HCI
dump functionality from the developer options menu. (The
real-world implementation of HCI data extraction is described
in Section VI-B1.)
as follows:
As shown in Fig. 5, the link key extraction attack progresses
1) A accesses C and manipulates it to record HCI data such
as HCI dump or USB snifﬁng.
2) As A targets to extract the bonded link key from C, he
changes BDADDR of A to impersonate M
3) C establishes a connection and initiates LMP authentica-
tion procedure with A. AsA spoofs M, the controller
in C requests to its host the link key associated with M .
4) The host responses to the link key request from its
controller, at this time, the link key is logged into a
HCI dump log.
5) The attacker disconnects the link at the beginning of the
LMP authentication.
6) The attacker extracts HCI dump, and ﬁnally gathers the
link key between C and M by analyzing the HCI dump.
Mobile (M)