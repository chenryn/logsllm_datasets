permission assignment U P A, user-to-role assignment
U A, role-to-permission assignment P A, and a role
hierarchy RH are δ-consistent if and only if
(cid:11) M(U P A) − M(U P Ad) (cid:11)1 ≤ δ
where M(U P A) denotes the matrix representation of
U P A, while M(U P Ad) denotes the matrix representa-
tion of the U P A derived from U A, P A, and RH (i.e.,
including both direct and indirect permission mappings
due to the hierarchy). Thus, cell {i, j} in U P Ad is 1 if
and only if one of the following three cases is true:
1. ∃r ∈ ROLES, such that i ∈ users(r) and j ∈
∈ E,
∈
i
users(ra), j
∈
permissions(r).
2. ∃(ra, rb)
permissions(rb)
3. { ∃ R ⊆ V | R = {r1,r2,
. . . rx } (cid:8)= ∅, {
(ra,r1),(r1,r2),. . ., (rx−1,rx),(rx,rb) } ⊆ E, i ∈
users(ra), j ∈ permissions(rb) }
This concept of mapping assures that, for any cell
{i, j} with value of 1 in U P Ad, in RH, there exists a
role that permission j is assigned to either directly or in-
directly, and, user i is authorized to it. On the contrary,
for any cell {i, j} with value of 0 in U P Ad, there exists
no role in the RH, such that the corresponding permis-
sion is assigned (either directly or indirectly) to it and the
user is authorized to that role. δ-Consistency thus essen-
tially bounds the degree of difference between the user
permission assignment U P A and the discovered roles
and role hierarchy. We can now deﬁne the minimal per-
turbation role hierarchy problem.
Deﬁnition 7. [The Minimal Perturbation Role Hierar-
chy Problem (MinPert RHMP)] Given a set of users U ,
a set of permissions P RM S, a user-permission assign-
ment U P A, and a set of deployed roles DROLES, ﬁnd
a set of roles ROLES, a user-to-role assignment U A, a
role-to-permission assignment P A and a complete role
hierarchy, RH = G(V, E), such that RH is 0-consistent
with U P A and the sum of the predeﬁned perturbation
function and the number of edges |E| in G is minimized.
MinPert RHMP describes the problems faced by or-
ganizations which would like to achieve optimality so
that total sum of the number of roles and the number of
direct relations in RH is minimized. However, they may
prefer to strike a balance between getting closer towards
optimality (in terms of the roles and role hierarchy) and
towards causing as little disruption to the existing sys-
tem as possible. MinPert RHMP tends to update the
existing deployed roles to a degree that the quantiﬁed
disruptions and the number of direct relations in role hi-
erarchy are minimized. This is closer in spirit to the
notion of Minimal Perturbation RMP deﬁned by Vaidya
et al.[15] where the optimal roles need to be discovered
that cause as little disruption to the existing roles as pos-
sible. The notion of role similarity based on Jaccard co-
efﬁcient (deﬁned in [15]) can be directly used to measure
perturbation.
When there are no deployed roles, the hierarchy min-
ing must include role mining as well. Essentially, the op-
timal set of roles and role hierarchy must be discovered.
We deﬁne this as the role hierarchy mining problem:
Deﬁnition 8. [The Role Hierarchy Mining Problem
(RHMP)] Given a set of users U , a set of permissions
P RM S, and a user-permission assignment U P A, ﬁnd
a set of roles ROLES, a user-to-role assignment U A, a
role-to-permission assignment P A and a complete role
hierarchy, RH = G(V, E), such that RH is 0-consistent
with U P A, and that minimize the sum of |ROLES| +
|E|.
240240
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:56:35 UTC from IEEE Xplore.  Restrictions apply. 
Given the user-permission matrix U P A, the Role Hi-
erarchy Mining problem asks us to ﬁnd a user-to-role as-
signment U A and a role-to-permission assignment P A,
and a complete role hierarchy RH such that both the pair
of (U A, P A) and RH are capable of exactly describing
U P A (i.e. are 0-consistent with U P A).
The above deﬁnition is suitable for cases where no
existing roles are deployed yet or role mining is still at
its initial stage therefore, abandoning the previous role
engineering effort is still tolerable.
Example 2. Figure 2 shows an example of optimal hi-
erarchy given a set of users U , a set of permissions
P RM S, and the user-permission assignment U P A.
Figure 2.(a) shows the U P A with 3 users and 6 per-
missions. Figure 2.(b) and (d) together shows an op-
timal solution for RHMP. It generates 3 roles, r1 =
{p1, p2, p3, p4, p5, p6}, r2 = {p1, p2, p5, p6}, r3 =
{p5, p6}, and 2 edges in the hierarchy. For this U P A,
there are no role sets which could have the sum of the
number of roles and the number of edges in the hier-
archy less than 5. However, there may exist multiple
optimal solutions for a speciﬁc U P A. Figure 2.(c) and
(e) provides another optimal solution.
Given a deployed role set r1 = {p1, p2, p3, p4},
r2 = {p1}, r3 = {p1, p2}, r4 = {p1, p3}, r5 =
{p1, p3, p4}, there could exist multiple role hierarchies
which are complete. Figure 1.(a) and (b) are two of the
hierarchies built from this role set. They have the same
transitive closure, but Figure 1.(a) is superior to Figure
1.(b) since it has less number of edges. Actually Figure
1.(a) is the optimal solution for this deployed role set.
4 The Role Hierarchy Construction
In this section, we propose two algorithms to con-
struct the role hierarchy. Section 4.1 describes RH-
Builder which aims to address Role Hierarchy Building
Problem (RHBP). RH-Miner is introduced in Section
4.2 for the Role Hierarchy Mining Problem (RHMP).
4.1 RH-Builder Algorithm
The RH-Builder algorithm builds a complete and
non-redundant hierarchy from any given set of roles.
The completeness property guarantees that two roles are
connected in the hierarchy if and only if they have an
inheritance/containment relation. Non-redundancy im-
plies that each link/edge in the graph carries irreplace-
able information. If we removed that edge, certain role-
to-role relation would be lost and completeness would
be violated. Accordingly, the modiﬁed hierarchy would
have a different transitive closure than earlier. Both
Algorithm 1 RH-Builder(DROLES, E)
Input: A list of initially deployed roles, DROLES
Output: The set of direct links E representing the hier-
archy G
1: E ← φ
2: super role ← all permissions from all roles in
3: for each r ∈ DROLES do
DROLES
call RH-Builder-Iteration(r, super role, E)
4:
5: end for
Completeness and Non-redundancy can be described by
the following observation:
• ∀ ri, rj ∈ ROLES, if ri (cid:5) rj, then either {
∃ R ⊆ ROLES | R = {r1,r2, . . . rx } (cid:8)= ∅, {
(ri,r1),(r1,r2),. . ., (rx−1,rx),(rx,rj) } ⊆ E } or
(ri,rj) ∈ E.
This observation has two implications. First it states that
any two roles with inheritance relation should be linked
either directly or indirectly. Second, it implies that re-
dundancy occurs whenever indirect path and direct link
between the same pair of roles coexists. Since the re-
lation represented by the direct link is already implicit
in the indirect path, for the sake of workload reduction
for role management, the direct link can be removed.
This is preferable to removing any link from the indi-
rect path, since doing so could result in information loss
as the transitive closure could be different due to loss of
some relationship information.
The RH-Builder constructs the hierarchy by sequen-
tially inserting all roles in DROLES into the hierarchy
which can be fully represented by its set of edges E.
Later, we prove that RH-Builder is order-insensitive for
insertion. Algorithm 1 simply calls Algorithm 2 to in-
sert each role r in the deployed role set. The basic idea
is to check the inheritance relation of the role r with
each direct descendant ri of the super role sr. Based
on the containment relationship between r and ri (dis-
joint / subset / superset / neither), different operations
are performed. After the for loop, r will be placed at
the best position in the current hierarchy. Currently best
has two implications: ﬁrst, if the hierarchy construction
stops at r and no more roles are inserted, all the inher-
itance relations associated with r will be represented in
the hierarchy and no edges incident on r is redundant.
In other words, the created hierarchy is optimal. Sec-
ond, when other roles are inserted after r, r’s position
might need to be adjusted to stay optimal. We now go
into the details:
241241
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:56:35 UTC from IEEE Xplore.  Restrictions apply. 
p1
p2
1
1
0
p1
1
1
0
1
1
0
p2
1
1
0
u1
u2
u3
r1
r2
r3
p4
p5
p6
0
1
0
p4
1
0
0
1
1
1
p5
1
0
1
1
1
1
p6
1
0
1
p3
0
1
0
(a)
p3
1
0
0
(c)
p1
1
1
0
p2
1
0
0
r1
r2
r3
p5
1
1
1
p6
1
1
1
p4
1
0
0
p3
1
0
0
(b)
r1
p1,p2,p3,p4,p5,p6
r2 
p1,p2,p5,p6
r3
p5,p6
(d)
r1
p1,p2,p3,p4,p5,p6
r2 
p1,p2
r3
p5,p6
(e)
Figure 2. An example of optimal role hierarchies for a given U P A
Algorithm 2 RH-Builder-Iteration(r, super role, E)
1: E ← (super role, r)
2: for each ri such that super role (cid:4) ri do
if r ∩ ri = φ {The two are disjoint} then
else if r ⊇ ri then
ignore subtree rooted at ri
E ← (r, ri), ﬂag the whole subtree rooted at
ri, meanwhile, mark ri as r’s direct descendant
remove (super role, ri) from E
remove (r, rj) from E for any rj that ri (cid:5) rj
∧ (r, rj) ∈ E
else if r ⊆ ri then
remove (super role, r) from E
recursively call RH-Builder-Iteration(r, ri, E)
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
else if r ∩ ri (cid:8)= φ then
breadth ﬁrst search on subgraph rooted at ri
if (ri (cid:5) rj) ∧ (r ⊇ rj) then
E ← (r, rj), ﬂag the whole subtree rooted
at rj, meanwhile, mark rj as r’s direct de-
scendant
remove (r, rk) from E for any rk that rj (cid:5)
rk ∧ (r, rk) ∈ E
end if
17:
end if
18:
19: end for
Line 1 adds the edge (sr, r) into the graph. Note that
a super role sr incorporates all permissions in U P A.
This role can ensure that all roles are connected to the
graph by at least linking with the super role if it has no
containment relation with any other roles. Now the con-
tainment relation of r is checked with every direct de-
scendent ri of the super role sr. Lines 3-4 ensure that
if r is disjoint with the descendant ri, the entire subtree
of ri is ignored (since there is no common permission
between them, r cannot be linked with any role in that
subtree). Lines 5-8 handle the case where r fully con-
tains ri. This relation means that all permissions in ri
are also associated with r. If this is the case, RH-builder
242242
removes the direct link (sr, ri) and replaces it with the
indirect path ((sr, r), (r, ri)). Then the subtree rooted
at ri will be ﬂagged to ensure that the roles in it won’t
be checked since r can not establish a link with any of
those roles because r can reach any of them through a
path via ri, therefore, any links between r and them are
redundant. RH-Builder also marks ri as the descendant