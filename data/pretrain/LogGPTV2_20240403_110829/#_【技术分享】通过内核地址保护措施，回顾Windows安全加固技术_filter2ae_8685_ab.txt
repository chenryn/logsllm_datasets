    typedef enum _SYSTEM_INFORMATION_CLASS {
        SystemLockInformation = 12
    } SYSTEM_INFORMATION_CLASS;
接下来，我们需要定义输出结构，为此，我引用了j00ru的文件中的结构定义，并假设提供LocksCount信息的容器结构也采用其他结构的模式。
    typedef struct _SYSTEM_LOCK {
        PVOID   Address;
        USHORT  Type;
        USHORT  Reserved1;
        ULONG   ExclusiveOwnerThreadId;
        ULONG   ActiveCount;
        ULONG   ContentionCount;
        ULONG   Reserved2[2];
        ULONG   NumberOfSharedWaiters;
        ULONG   NumberOfExclusiveWaiters;
    } SYSTEM_LOCK, *PSYSTEM_LOCK;
    typedef struct SYSTEM_LOCK_INFORMATION {
        ULONG              LocksCount;
        SYSTEM_LOCK        Locks[1];
    } SYSTEM_LOCK_INFORMATION, *PSYSTEM_LOCK_INFORMATION;
在SYSTEM_LOCK结构中，需要注意的关键值是Address字段，它是指向内核内存中的对象的指针。
就像SystemExtendedHandleInformation的用法那样，无法直接让NtQuerySystemInformation提供我们所需的输出缓冲区大小，我们需要在一个循环中调用它，直至给出长度不匹配错误代码为止。
    PSYSTEM_LOCK_INFORMATION pLockInfo = NULL;
    ULONG len = 20;
    NTSTATUS status = (NTSTATUS)0xc0000004;
    do {
        len *= 2;
        pLockInfo = (PSYSTEM_LOCK_INFORMATION)GlobalAlloc(GMEM_ZEROINIT, len);
        status = query(SystemLockInformation, pLockInfo, len, &len);
    } while (status == (NTSTATUS)0xc0000004);
一旦分配了足够的内存，该函数就会成功返回，然后我们就可以像前面介绍的那样来遍历输出，并打印我们感兴趣的值了。
    for (int i = 0; i LocksCount; i++) {
        PVOID lockAddress = pLockInfo->Locks[i].Address;
        USHORT lockType = (USHORT)pLockInfo->Locks[i].Type;
        printf("Lock Address 0x%Xt", lockAddress);
        printf("Lock Type 0x%Xrn", lockType);
    }
它可以在32位Windows 7 上成功运行：
完整代码，包括64位Windows的相应版本，可以从Github下载。
**  
**
**SystemExtendedProcessInformation**
在j00ru的论文中提到的最后一个SystemInformationClass值是SystemExtendedProcessInformation，它返回在系统中运行的所有进程和线程的详细信息，包括每个线程用户和内核模式堆栈的地址。
首先，我们需要定义正确的SYSTEM_INFORMATION_CLASS值。
    typedef enum _SYSTEM_INFORMATION_CLASS {
        SystemSessionProcessInformation = 57
    } SYSTEM_INFORMATION_CLASS;
接下来，我们需要定义所有的输出结构，这些结构取自伯克利的BOINC项目。借助于逆向工程，人们已经对该结构有了全面的了解，所以我们不妨使用完整的结构定义。
    typedef LONG       KPRIORITY;
    typedef struct _CLIENT_ID {
        DWORD          UniqueProcess;
        DWORD          UniqueThread;
    } CLIENT_ID;
    typedef struct _UNICODE_STRING {
        USHORT         Length;
        USHORT         MaximumLength;
        PWSTR          Buffer;
    } UNICODE_STRING;
    typedef struct _VM_COUNTERS {
        SIZE_T         PeakVirtualSize;
        SIZE_T         VirtualSize;
        ULONG          PageFaultCount;
        SIZE_T         PeakWorkingSetSize;
        SIZE_T         WorkingSetSize;
        SIZE_T         QuotaPeakPagedPoolUsage;
        SIZE_T         QuotaPagedPoolUsage;
        SIZE_T         QuotaPeakNonPagedPoolUsage;
        SIZE_T         QuotaNonPagedPoolUsage;
        SIZE_T         PagefileUsage;
        SIZE_T         PeakPagefileUsage;
    } VM_COUNTERS;
    typedef enum _KWAIT_REASON
    {
        Executive = 0,
        FreePage = 1,
        PageIn = 2,
        PoolAllocation = 3,
    //SNIP
        WrRundown = 36,
        MaximumWaitReason = 37
    } KWAIT_REASON;
    typedef struct _SYSTEM_THREAD_INFORMATION{
        LARGE_INTEGER KernelTime;
        LARGE_INTEGER UserTime;
        LARGE_INTEGER CreateTime;
        ULONG WaitTime;
        PVOID StartAddress;
        CLIENT_ID ClientId;
        KPRIORITY Priority;
        LONG BasePriority;
        ULONG ContextSwitches;
        ULONG ThreadState;
        KWAIT_REASON WaitReason;
    } SYSTEM_THREAD_INFORMATION, *PSYSTEM_THREAD_INFORMATION;
    typedef struct _SYSTEM_EXTENDED_THREAD_INFORMATION
    {
        SYSTEM_THREAD_INFORMATION ThreadInfo;
        PVOID StackBase;
        PVOID StackLimit;
        PVOID Win32StartAddress;
        PVOID TebAddress;
        ULONG Reserved1;
        ULONG Reserved2;
        ULONG Reserved3;
    } SYSTEM_EXTENDED_THREAD_INFORMATION, *
    PSYSTEM_EXTENDED_THREAD_INFORMATION;
    typedef struct _SYSTEM_EXTENDED_PROCESS_INFORMATION
    {
        ULONG NextEntryOffset;
        ULONG NumberOfThreads;
        LARGE_INTEGER SpareLi1;
        LARGE_INTEGER SpareLi2;
        LARGE_INTEGER SpareLi3;
        LARGE_INTEGER CreateTime;
        LARGE_INTEGER UserTime;
        LARGE_INTEGER KernelTime;
        UNICODE_STRING ImageName;
        KPRIORITY BasePriority;
        ULONG UniqueProcessId;
        ULONG InheritedFromUniqueProcessId;
        ULONG HandleCount;
        ULONG SessionId;
        PVOID PageDirectoryBase;
        VM_COUNTERS VirtualMemoryCounters;
        SIZE_T PrivatePageCount;
        IO_COUNTERS IoCounters;
        SYSTEM_EXTENDED_THREAD_INFORMATION Threads[1];
    } SYSTEM_EXTENDED_PROCESS_INFORMATION, *PSYSTEM_EXTENDED_PROCESS_INFORMATION;
在这些结构中，我们感兴趣的关键值是StackBase和StackLimit字段，它们提供了线程内核模式堆栈的起始地址及其边界。
再次重申，NtQuerySystemInformation不会告诉我们需要分配多少内存，所以我们需要利用循环来调用它。
    ULONG len = 20;
    NTSTATUS status = NULL;
    PSYSTEM_EXTENDED_PROCESS_INFORMATION pProcessInfo = NULL;
    do {
        len *= 2;  
        pProcessInfo = (PSYSTEM_EXTENDED_PROCESS_INFORMATION)GlobalAlloc(GMEM_ZEROINIT, len);
        status = query(SystemSessionProcessInformation, pProcessInfo, len, &len);
    } while (status == (NTSTATUS)0xc0000004);
一旦函数成功调用，我们就可以为系统上运行的每个线程打印出相应的StackBase和StackLimit值了。为此，我们需要遍历所有的ProcessInfo结构，然后遍历其中的每个线程，并打印我们感兴趣的值。
    while (pProcessInfo->NextEntryOffset != NULL) {
        for (unsigned int i = 0; i NumberOfThreads; i++) {
            PVOID stackBase = pProcessInfo->Threads[i].StackBase;
            PVOID stackLimit = pProcessInfo->Threads[i].StackLimit;
            printf("Stack base 0x%Xt", stackBase);
            printf("Stack limit 0x%Xrn", stackLimit);
        }
        pProcessInfo = (PSYSTEM_EXTENDED_PROCESS_INFORMATION)((ULONG_PTR)pProcessInfo + pProcessInfo->NextEntryOffset);
    }
下面是它在32位Windows 7上面的运行结果：
这个示例的完整代码（包括用于64位系统的相应版本）可以在Github上找到。
**  
**
**Windows 8 64 bit**
所有这些代码，要想用于64位Windows 8上，都需要稍作修改。当然，具体需要做出怎样的修改，则需要借助于调试代码本身来完成。
**  
**
**SystemModuleInformation**
只有两处需要稍作修改，首先位于system_module结构之后的ImageBaseAddress指针是32位的，所以需要加入一个填充变量，至于填充的额外32位所包含的内容则是无所谓的。
    typedef struct SYSTEM_MODULE {
        ULONG           Reserved1;
        ULONG           Reserved2;
    #ifdef _WIN64
        ULONG       Reserved3;
    #endif
        PVOID           ImageBaseAddress;
此外，一旦NtQuerySystemInformation被调用，用于打印基地址的printf语句需要进行相应的更新，以便打印64位指针。
     printf("Base Addr 0x%llxrn", kernelImageBase);
编译之后，就可以成功运行在64位Windows 8上面了：
此外，编译后的代码也可以从Github上下载。
**  
**
**SystemHandleInformation**
对于SystemHandleInformation来说，只需要改动print语句，其他一切正常。
    #ifdef _WIN64