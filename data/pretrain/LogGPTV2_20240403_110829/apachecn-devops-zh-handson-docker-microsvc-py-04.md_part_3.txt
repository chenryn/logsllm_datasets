```
travis login --pro
```
3.  使用 Docker 集线器用户名创建一个安全变量:
```
$ travis encrypt --com DOCKER_USERNAME=""
```
4.  您将看到类似如下的输出:
```
secure: ".... encrypted data ...."
```
5.  然后，您需要将加密数据添加到环境变量中，如下所示:
```
env:
  global:
    - DOCKER_COMPOSE_VERSION=1.23.2
    - secure: ".... encrypted data ...."
```
6.  现在，记下新的`global`部分，并使用 Docker Hub 密码重复步骤 3:
```
$ travis encrypt --com DOCKER_PASSWORD=""
```
7.  在第一个变量之后添加另一个安全变量:
```
env:
  global:
    - DOCKER_COMPOSE_VERSION=1.23.2
    - secure: ".... encrypted data ...."
    - secure: ".... encrypted data ...."
```
此操作创建两个环境变量，在构建过程中可用。不要担心，日志中不会显示它们:
```
Setting environment variables from .travis.yml
$ export DOCKER_COMPOSE_VERSION=1.23.2
$ export DOCKER_PASSWORD=[secure]
$ export DOCKER_USERNAME=[secure]
```
我们现在可以在`before_install`部分添加正确的登录命令，以便 Docker 服务可以连接和推送映像:
```
before_install:
  ...
  - echo "Login into Docker Hub"
  - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
```
下一步是构建并标记生成的映像。
# 标记和推送构建
下面的代码将添加一个新的阶段，该阶段将构建、标记并最终将结果推送到 Docker 注册表:
```
jobs:
  include:
    ...
    - stage: push
      script:
      - cd Chapter04
      - docker-compose build server
      - docker tag thoughts_server:latest /thoughts-backend:$TRAVIS_BRANCH
```
第一部分为服务器构建最终映像，并用分支的名称对其进行标记。为了部署它，我们将添加一个`deploy`部分:
```
- stage: push
  script:
  ...
  - docker tag thoughts_server:latest /thoughts-backend:$TRAVIS_BRANCH
  deploy:
  - provider: script
    script: docker push /thoughts-backend:$TRAVIS_BRANCH
    on:
      branch: master 
```
当分支为`master`时，`deploy`部分将执行`script`命令。现在，我们的构建还将生成一个最终映像并推送它。这将确保我们的注册表在我们的主分支获得最新版本。
我们可以添加更多的`deploy`条件来推送标签；例如，如果我们创建一个新的 Git 标签，我们可以用适当的标签推送结果映像。
Remember that tags, as discussed in the previous chapter, are a way to mark an image as significant. Normally, this will mean it's ready for some to be used outside automatic tests, for example, in deployment. 
我们可以将标签添加到`deploy`部分:
```
      deploy:
      - provider: script
        script: docker push /thoughts-backend:$TRAVIS_BRANCH
        on:
          branch: master 
      - provider: script
        script: docker push /thoughts-backend:$TRAVIS_TAG
        on:
          tags: True
```
Note that here we push whether the branch is the master or there's a defined tag, as both conditions won't be matched.
您可以在此查看完整的部署文档:[https://docs.travis-ci.com/user/deployment](https://docs.travis-ci.com/user/deployment)。我们已经介绍了`script`提供程序，这是一种创建我们自己的命令的方式，但是提供对诸如 Heroku、PyPI(在创建 Python 包的情况下)和 AWS S3 等提供程序的支持。
# 标记和推送每个提交
可以将每个单独构建的映像推送到注册表，由其 Git SHA 标识。当正在进行的工作可以共享用于演示目的、测试等时，这可能会很有用。
为此，我们需要在`before_install`部分用 Git SHA 创建一个环境变量:
```
before_install:
  ...
  - export GIT_SHA=`git rev-parse --short HEAD`
  - echo "Building commit $GIT_SHA"
```
`push`部分然后添加映像的标签和推送:
```
- stage: push
  script:
  - cd Chapter04
  - docker-compose build server
  - docker tag thoughts_server:latest /thoughts-backend:$GIT_SHA
  - docker push /thoughts-backend:$GIT_SHA
  - docker tag thoughts_server:latest /thoughts-backend:$TRAVIS_BRANCH
```
由于该动作发生在`deploy`部分之前，因此将在到达该部分的每个构建上产生。
This method will produce a lot of tags. Depending on how your registry manages them, that may be costly. Be sure that it is a sensible thing to do.
Keep in mind that this same approach can be used for other conditional pushes.
请注意，注册表需要根据您自己的注册表详细信息进行调整。如果克隆示例 repo，则需要更改后者。
# 摘要
在本章中，我们介绍了持续集成实践，并探讨了 Docker 如何帮助实现它们。我们还研究了如何设计一个管道，确保我们的代码始终遵循高标准，并尽快检测出偏差。在 GitHub 中使用 Git 分支和拉请求与此同时进行，因为我们可以确定代码何时准备好合并到主分支并部署。
然后，我们介绍了 Travis CI，它是与 GitHub 一起工作以实现持续集成的一个很好的工具，并讨论了它的特性。我们学习了如何在 Travis CI 中创建管道，从创建`.travis.yml`文件开始，如何配置作业，如何让构建将一个经过验证的 Docker 映像推送到我们的 Docker 注册表，以及如何得到通知。
我们描述了如何加速并行运行部分，以及如何将值设置为机密。我们还配置了 GitHub，以确保在将新代码合并到我们的主分支之前，Travis CI 管道已经成功运行。
在下一章中，我们将学习基本的 Kubernetes 操作和概念。
# 问题
1.  增加部署数量会降低部署质量吗？
2.  描述什么是管道。
3.  我们如何知道我们的主要分支是否可以部署？
4.  Travis CI 的主要配置来源是什么？
5.  默认情况下，Travis CI 何时发送通知电子邮件？
6.  我们如何避免将一个断了的分支合并到我们的主分支中？
7.  为什么我们要避免在 Git 回购中存储机密？
# 进一步阅读
要了解更多关于持续集成和其他工具的信息，您可以查看书籍*动手持续集成和交付*([https://www . packtpub . com/eu/virtualization-and-cloud/Hands-持续集成和交付](https://www.packtpub.com/eu/virtualization-and-cloud/hands-continuous-integration-and-delivery))，该书不仅涵盖了 Travis CI，还涵盖了 Jenkins 和 CircleCI 等其他工具。如果你想更深入地挖掘 GitHub 及其所有可能性，包括如何有效协作以及它所支持的不同工作流，请在*GitHub Essentials*([https://www . packtpub . com/eu/web-development/GitHub-Essentials-第二版](https://www.packtpub.com/eu/web-development/github-essentials-second-edition))中了解更多信息。