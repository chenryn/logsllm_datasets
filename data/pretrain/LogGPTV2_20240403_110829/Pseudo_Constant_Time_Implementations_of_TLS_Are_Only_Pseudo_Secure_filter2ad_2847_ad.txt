5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16: end function
ValRes ← OracleCondition(val ⊕ δ)
if ValRes (cid:54)= OracleRes then
remove val from ValList
end if
end for
end if
end for
if Length(ValList)==1 then
return ValList[0]
2. OracleCondition(PadLen): returns the result of the linear condition executed by the
above oracle, assuming that the value PadLen is used as input (along with some ﬁxed
TLS record length). For example, the oracle may return the value of the predicate
“PadLen > 172”.
The algorithm starts by initializing two byte-lists ValList and MaskList with all possible
byte values. We iterate over all possible single-byte mask values δ. For each possible
δ, we get the result of the oracle by running OracleFunc(δ). We then iterate over the
possible values in ValList. For each possible val, we check if the linear condition on
val ⊕ δ is equal to the result of the oracle. If not, the value is discarded (and this will
be a correct decision with probability 1 − β). The algorithm ends when there is only
one possible value remaining in ValList.
The complexity of the algorithm is dominated by the number of calls to the OracleFunc(·)
function. The expected number is 128, with a worst case of 256. Recall, however, that
each call to this oracle involves some number n executions of the underlying cache
timing attack, giving an average of 128n executions of the cache timing attack. More-
over, each execution of the underlying attack consumes a TLS connection (since the
attacker’s constructed ciphertext will always fail HMAC veriﬁcation). For example, as
we will see in Appendix 5.3, this results in roughly 13000 runs of the synchronized
probe PRIME+PROBE attack in Algorithm 2 for the attack on s2n. This ﬁgure of
128n might make the attack impractical. For this reason, we developed an improved
greedy algorithm which can reduce the attack complexity by a factor of more than 50.
We present this next.
5.2 Greedy Algorithm
Our greedy algorithm optimizes the way in which we choose the masks δ that we use
in our oracle calls. Instead of iterating over all possible values, in each iteration of
the attack we choose as the next mask the one that will give us the most information
(maximizing the entropy of each oracle call). Algorithm 4 chooses the ”best” mask in
a greedy manner. It takes as input a list of all remaining possible byte values (ValList)
and mask values (MaskList). For each mask it simulates all the oracle responses on the
16
Eyal Ronen, Kenneth G. Paterson, and Adi Shamir
HalfLenValList ← Length(ValList)/2
MinMaskCount ← 256
BestMask ← 0
for all δ in MaskList do
Algorithm 4 Padding Oracle to Plaintext Byte — Greedy Algorithm
1: function GetBestMask(MaskList, ValList, OracleCondition)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
ValRes ← OracleCondition(val ⊕ δ)
if ValRes == 1 then
OneCount ← 0
for all val in ValList do
OneCount ← OneCount + 1
end if
end for
Count = |HalfLenValList − OneCount|
if Count ≤ MinMaskCount then
returning 1 and half returning 0?
BestMask ← δ
MinMaskCount ← Count
14:
15:
16:
17:
18:
19: end function
end for
end if
(cid:46) maximum possible value
(cid:46) how far are we from half the values
possible values remaining, and chooses the mask that maximizes the entropy of this
experiment. Since we only consider single bytes at a time, the algorithm is eﬃcient. In
a further optimization, we can also remove the masks with zero entropy from MaskList
in each iteration.
5.3 Application to Amazon s2n
In our attack we can obtain oracles of the form “PadLen > 12 + 16k mod 256” for any
k. We will analyze the run time complexity of the SHA-384 version of the attack.
Attack complexity of the naive algorithm For the naive algorithm, the expected
number of runs is 128, with a worst case of 256. We focus for the moment on successfully
recovering a single byte of plaintext with probability pB > 0.5 (a standard requirement
for success probability in cryptanalysis). In the worst case we will require 256 correct
calls to the oracle. So we would need each oracle call to return the correct result with
β = 0.51/256 = 0.9973. Based on our experiments, we model the s2n SHA-384 attack
cache hit distribution as a binomial distribution with p = 0.75 for PadLen ≤ 172 and
p = 0.97 for PadLen > 172. We would then need n = 100 executions of the cache attack
to distinguish between the two distributions with probability larger than β = 0.9973.
The expected total number of cache attack executions needed for the naive attack is
then 12800 with a worst case of 25600.
Attack complexity of the greedy algorithm We simulated the complexity of the
greedy algorithm for all oracles of the form PadLen > 12 + 16k mod 256. The oracle
with the lowest complexity is the one with k = 10, where the condition is PadLen > 172,
having an expected number of 8.5 runs and a worst case of 11. This is very close to
the information theoretical lower bound of 8 runs.. To achieve pB > 0.5 this requires
β = 0.51/11 = 0.939, which translates to n = 28. So the expected total number of cache
Pseudo Constant Time Implementations of TLS Are Only Pseudo Secure
17
attack executions needed for the greedy attack is only 238, with a worst case of 308.
This is more than 50 times less than needed in the naive attack.
Recovering multiple bytes We are typically interested in recovering multiple plain-
text bytes, e.g. an entire 16-byte cookie, with good probability. To achieve success prob-
ability greater than 0.5 across 16 bytes, we need a per-byte probability of pB ≈ 0.96,
which in the greedy attack yields β = 0.51/11·16 = 0.996. In turn, this translates to
n = 92 and an expected total number of TLS connections of 782 per byte. For com-
parison, the naive algorithm requires an expected total of 21900 TLS connections per
byte.
6 A Padding Oracle Based on TLS Record Cache Access
Pattern
The original Lucky 13 attack [3] exploited the time diﬀerence of the TLS record veri-
ﬁcation process for valid and invalid padding. As a mitigation, all the pseudo constant
time TLS implementations added dummy compression function calls that cause the
total number of compression function calls to be independent of the padding length.
However, unlike proper constant time TLS implementations, the cache access pat-
tern to the data structure holding the TLS record is still dependent on the padding
length. We can exploit this cache access pattern with our novel synchronized prime
PRIME+PROBE attack to restore the original padding oracle of [3] in several TLS im-
plementations – mbed TLS , GnuTLS and wolfSSL . All implementations were patched
against Lucky 13 [3]. Moreover, mbed TLS was also patched against a second cache-
based attack by Irazoqui et al. [5], targeting the code of the ﬁrst patch. We will again
use a PRIME+PROBE [30] cache attack, assuming a cache side channel as in Liu
et.al. [23]. Our attack works on HMAC using both SHA-384 and SHA-256, even if all
the bugs in Appendix 3 were ﬁxed, and all the previous variants of Lucky 13 were
patched correctly.
6.1 Attack Preliminaries
All of the vulnerable implementations follow this general code ﬂow for constant time
decryption:
1. Decrypt the message, accessing all the bytes in the TLS record.
2. Perform constant time checking of the TLS record padding, assuming zero-length
padding if the padding is not valid. All of the ﬁnal 256 bytes of the TLS record are
accessed.
3. Calculate HMAC on the decrypted TLS record payload (excluding the padding).
All bytes in the decrypted TLS record are accessed, except for the padding bytes at
the end.
4. Add extra dummy compression function calls to make the number of calls the same
in every case. The data input to these function calls is obtained from the start of
the TLS record or from a dummy memory buﬀer. The padding bytes of the TLS
record are not accessed (except for messages that are shorter than the hash block
size).
18
Eyal Ronen, Kenneth G. Paterson, and Adi Shamir
LastBytesCache ← FindPtrCache(Valid TLS record[End])
Send attacker’s TLS record to target
Delay to synchronize to the start of the HMAC veriﬁcation
Prime(MsgCache)
Delay till maximum time for HMAC calculation
if Probe(MsgCache) then
Algorithm 5 Message Access Attack
1: function MessageAccessPadOracle(Valid TLS records, Attack TLS record)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12: end function
return 0
else
end if
return 1
(cid:46) evict end of record from cache
(cid:46) end of record was accessed
(cid:46) padding was invalid
(cid:46) padding was valid
In our attack, we will try to distinguish between two cases: long valid padding
and long invalid padding. We will explain in Section 6.3 how an oracle yielding this
information can be used to recover plaintext bytes. Consider the cache access pattern
from the beginning of the HMAC veriﬁcation. In the case of invalid padding, the code
typically assumes zero-length padding, and the HMAC veriﬁcation will access all of the
TLS record bytes (possibly excluding the last byte). However, if the padding is valid
and long (e.g. PadLen = 255, in which case there are 256 bytes of padding), the HMAC
veriﬁcation will not access the last PadLen + 1 bytes of the TLS record.
6.2 synchronized prime PRIME+PROBE Attack Description
Our synchronized prime PRIME+PROBE attack exploits this diﬀerence in the access
pattern using a PRIME+PROBE [30] cache attack. We synchronize the PRIME part
of the attack to run in parallel to the HMAC veriﬁcation process, that is, after the
padding check but before the HMAC veriﬁcation is done. The maximum TLS record
size is ca. 214 bytes, corresponding to about 28 compression function calls for a 64-
byte hash block size. By working with ciphertexts of this size, we can force the HMAC
veriﬁcation to take a long time to complete. This makes the synchronization of the
attack relatively easy.
The attack (described in Algorithm 5) has four main parts:
1. Finding the cache sets containing the last bytes of the TLS record.
2. Sending the attack TLS record. The TLS record is constructed to have long valid
padding, except possibly in the ﬁrst padding byte. This is the byte we try to recover
in the attack.
3. Delaying till the HMAC veriﬁcation begins. This occurs after the decryption and
padding check is ﬁnished (and takes a constant amount of time regardless of the
padding).
4. In parallel to the HMAC veriﬁcation, we Prime the end of the TLS record to evict
it from the cache.
5. After the end of the HMAC veriﬁcation calculation, we probe the cache set that
contains the last few bytes of the TLS record. If it was accessed, then with high
probability the padding was invalid; otherwise it was valid.
Pseudo Constant Time Implementations of TLS Are Only Pseudo Secure
19
6.3 Constructing an Attack on TLS Records
It remains to explain how we construct the TLS records used in the attack, and how
we use the results of the oracle to recover plaintext bytes (HTTP cookie bytes in this
case). We rely on techniques ﬁrst explained in [14]: we use HTTP pathname padding
and the ability to choose plaintext bytes that are placed after the cookie in the HTTP
request to ensure that the plaintext in the TLS record contains 16 consecutive blocks
in which the ﬁrst block has the form:
p∗||“\r”||“\n”||0xFF|| . . .||0xFF,
and the remaining 15 blocks consist solely of values 0xFF. Here p∗ is the last byte of
the cookie and the target of the ﬁrst step of the attack, while “\r(cid:48)(cid:48), “\n(cid:48)(cid:48) represent
ASCII characters inserted after the cookie by HTTP. Note that these plaintext blocks
are almost correct padding of maximum length; of course they are incorporated into a
TLS record containing an HMAC tag and correct TLS padding. Let C∗
15 denote