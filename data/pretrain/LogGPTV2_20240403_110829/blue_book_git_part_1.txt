---
Title: Git
Author: Lyz
Date: 20161202
Keywords: git
Tags: publish
---
[Git](https://en.wikipedia.org/wiki/Git) is a software for tracking changes in
any set of files, usually used for coordinating work among programmers
collaboratively developing source code during software development. Its goals
include speed, data integrity, and support for distributed, non-linear workflows
(thousands of parallel branches running on different systems).
# Learning git
Git is a tough nut to crack, no matter how experience you are you'll frequently
get surprised. Sadly it's one of the main tools to develop your code, so you
must master it as soon as possible.
Depending on how you like to learn I've found these options:
- Written courses: [W3 git course](https://www.w3schools.com/git/default.asp)
- Interactive tutorials:
  [Learngitbranching interactive tutorial](https://learngitbranching.js.org/)
- Written article:
  [Freecode camp article](https://www.freecodecamp.org/news/learn-the-basics-of-git-in-under-10-minutes-da548267cc91/)
- Video courses: [Code academy](https://www.codecademy.com/learn/learn-git) and
  [Udemy](https://www.udemy.com/course/learngit/)
# [Pull Request Process](https://raw.githubusercontent.com/kubernetes/community/master/contributors/devel/pull-requests.md)
This part of the doc is shamefully edited from the source. It was for the k8s
project but they are good practices that work for all the projects. It explains
the process and best practices for submitting a PR It should serve as a
reference for all contributors, and be useful especially to new and infrequent
submitters.
## Before You Submit a PR
This guide is for contributors who already have a PR to submit. If you're
looking for information on setting up your developer environment and creating
code to contribute to the project, search the development guide.
**Make sure your PR adheres to the projects best practices. These include
following project conventions, making small PRs, and commenting thoroughly.**
## Run Local Verifications
You can run the tests in local before you submit your PR to predict the pass or
fail of continuous integration.
## Why is my PR not getting reviewed?
A few factors affect how long your PR might wait for review.
If it's the last few weeks of a milestone, we need to reduce churn and
stabilize.
Or, it could be related to best practices. One common issue is that the PR is
too big to review. Let's say you've touched 39 files and have 8657 insertions.
When your would-be reviewers pull up the diffs, they run away - this PR is going
to take 4 hours to review and they don't have 4 hours right now. They'll get to
it later, just as soon as they have more free time (ha!).
There is a detailed rundown of best practices, including how to avoid
too-lengthy PRs, in the next section.
But, if you've already followed the best practices and you still aren't getting
any PR love, here are some things you can do to move the process along:
- Make sure that your PR has an assigned reviewer (assignee in GitHub). If not,
  reply to the PR comment stream asking for a reviewer to be assigned.
- Ping the assignee (@username) on the PR comment stream, and ask for an
  estimate of when they can get to the review.
- Ping the assignee by email (many of us have publicly available email
  addresses).
- If you're a member of the organization ping the team (via @team-name) that
  works in the area you're submitting code.
- If you have fixed all the issues from a review, and you haven't heard back,
  you should ping the assignee on the comment stream with a "please take another
  look" (`PTAL`) or similar comment indicating that you are ready for another
  review.
Read on to learn more about how to get faster reviews by following best
practices.
## Best Practices for Faster Reviews
You've just had a brilliant idea on how to make a project better. Let's call
that idea Feature-X. Feature-X is not even that complicated. You have a pretty
good idea of how to implement it. You jump in and implement it, fixing a bunch
of stuff along the way. You send your PR - this is awesome! And it sits. And
sits. A week goes by and nobody reviews it. Finally, someone offers a few
comments, which you fix up and wait for more review. And you wait. Another week
or two go by. This is horrible.
Let's talk about best practices so your PR gets reviewed quickly.
### Familiarize yourself with project conventions
- Search for the Development guide
- Search for the Coding conventions
- Search for the API conventions
### Is the feature wanted? Make a Design Doc or Sketch PR
Are you sure Feature-X is something the project team wants or will accept? Is it
implemented to fit with other changes in flight? Are you willing to bet a few
days or weeks of work on it?
It's better to get confirmation beforehand. There are two ways to do this:
- Make a proposal doc (in docs/proposals; for example
  [the QoS proposal](http://prs.k8s.io/11713)), or reach out to the affected
  special interest group (SIG). Some projects have that
- Coordinate your effort with SIG Docs ahead of time
- Make a sketch PR (e.g., just the API or Go interface). Write or code up just
  enough to express the idea and the design and why you made those choices
Or, do all of the above.
Be clear about what type of feedback you are asking for when you submit a
proposal doc or sketch PR.
Now, if we ask you to change the design, you won't have to re-write it all.
### Smaller Is Better: Small Commits, Small PRs
Small commits and small PRs get reviewed faster and are more likely to be
correct than big ones.
Attention is a scarce resource. If your PR takes 60 minutes to review, the
reviewer's eye for detail is not as keen in the last 30 minutes as it was in the
first. It might not get reviewed at all if it requires a large continuous block
of time from the reviewer.
**Breaking up commits**
Break up your PR into multiple commits, at logical break points.
Making a series of discrete commits is a powerful way to express the evolution
of an idea or the different ideas that make up a single feature. Strive to group
logically distinct ideas into separate commits.
For example, if you found that Feature-X needed some prefactoring to fit in,
make a commit that JUST does that prefactoring. Then make a new commit for
Feature-X.
Strike a balance with the number of commits. A PR with 25 commits is still very
cumbersome to review, so use judgment.
**Breaking up PRs**
Or, going back to our prefactoring example, you could also fork a new branch, do
the prefactoring there and send a PR for that. If you can extract whole ideas
from your PR and send those as PRs of their own, you can avoid the painful
problem of continually rebasing.
Multiple small PRs are often better than multiple commits. Don't worry about
flooding us with PRs. We'd rather have 100 small, obvious PRs than 10
unreviewable monoliths.
We want every PR to be useful on its own, so use your best judgment on what
should be a PR vs. a commit.
As a rule of thumb, if your PR is directly related to Feature-X and nothing
else, it should probably be part of the Feature-X PR. If you can explain why you
are doing seemingly no-op work ("it makes the Feature-X change easier, I
promise") we'll probably be OK with it. If you can imagine someone finding value
independently of Feature-X, try it as a PR. (Do not link pull requests by `#` in
a commit description, because GitHub creates lots of spam. Instead, reference
other PRs via the PR your commit is in.)
### Open a Different PR for Fixes and Generic Features
**Put changes that are unrelated to your feature into a different PR.**
Often, as you are implementing Feature-X, you will find bad comments, poorly
named functions, bad structure, weak type-safety, etc.
You absolutely should fix those things (or at least file issues, please) - but
not in the same PR as your feature. Otherwise, your diff will have way too many
changes, and your reviewer won't see the forest for the trees.
**Look for opportunities to pull out generic features.**
For example, if you find yourself touching a lot of modules, think about the
dependencies you are introducing between packages. Can some of what you're doing
be made more generic and moved up and out of the Feature-X package? Do you need
to use a function or type from an otherwise unrelated package? If so, promote!
We have places for hosting more generic code.
Likewise, if Feature-X is similar in form to Feature-W which was checked in last
month, and you're duplicating some tricky stuff from Feature-W, consider
prefactoring the core logic out and using it in both Feature-W and Feature-X.
(Do that in its own commit or PR, please.)
### Comments Matter
In your code, if someone might not understand why you did something (or you
won't remember why later), comment it. Many code-review comments are about this
exact issue.
If you think there's something pretty obvious that we could follow up on, add a
TODO.
### Test
Nothing is more frustrating than starting a review, only to find that the tests
are inadequate or absent. Very few PRs can touch code and NOT touch tests.
If you don't know how to test Feature-X, please ask! We'll be happy to help you
design things for easy testing or to suggest appropriate test cases.
### Squashing and Commit Titles
Your reviewer has finally sent you feedback on Feature-X.
Make the fixups, and don't squash yet. Put them in a new commit, and re-push.
That way your reviewer can look at the new commit on its own, which is much
faster than starting over.
We might still ask you to clean up your commits at the very end for the sake of
a more readable history, but don't do this until asked: typically at the point
where the PR would otherwise be tagged `LGTM`.
Each commit should have a good title line (` squash
Do squash when there are several commits to fix bugs in the original commit(s),
address reviewer feedback, etc. Really we only want to see the end state and
commit message for the whole PR.
- Layers => don't squash
Don't squash when there are independent changes layered to achieve a single
goal. For instance, writing a code munger could be one commit, applying it could
be another, and adding a precommit check could be a third. One could argue they
should be separate PRs, but there's really no way to test/review the munger
without seeing it applied, and there needs to be a precommit check to ensure the
munged output doesn't immediately get out of date.
A commit, as much as possible, should be a single logical change.
### KISS, YAGNI, MVP, etc.
Sometimes we need to remind each other of core tenets of software design - Keep
It Simple, You Aren't Gonna Need It, Minimum Viable Product, and so on. Adding a
feature "because we might need it later" is antithetical to software that ships.
Add the things you need NOW and (ideally) leave room for things you might need
later - but don't implement them now.
### It's OK to Push Back
Sometimes reviewers make mistakes. It's OK to push back on changes your reviewer
requested. If you have a good reason for doing something a certain way, you are
absolutely allowed to debate the merits of a requested change. Both the reviewer
and reviewee should strive to discuss these issues in a polite and respectful
manner.