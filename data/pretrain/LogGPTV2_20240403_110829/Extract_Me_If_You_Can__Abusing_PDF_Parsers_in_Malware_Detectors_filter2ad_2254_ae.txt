determine the prevalence of these weaknesses and the strength
of parser confusion attacks, we applied our obfuscations to a
PDF containing a working exploit and then evaluated whether
or not different JavaScript extractors and malicious PDF de-
tectors were still able to correctly extract the JavaScript or
classify the sample as malicious. By identifying several strong
obfuscations and combining them, we were able to thwart all
evaluated JavaScript extractors, all commercial AV products
on VirusTotal, and the metadata based PDFrate detector.
B. Attack Construction
To demonstrate the effectiveness of these attacks in evading
detection, a malicious PDF was created using a Metasploit
module [3] which exploits a “use after free” vulnerability
present in versions 9.0.0 to 11.0.3 of Adobe Reader [12] as the
payload. The payload we embedded in this malicious sample
opens a reverse shell on another machine on the network,
and for each modiﬁcation applied to the original sample the
functionality of the exploit was veriﬁed.
The original Metasploit module generated some obfus-
cations which were ﬁrst removed before any of ours were
added, which produces a sample clearly identiﬁed as malicious
and which can be correctly processed by all extractors. With
the exception of embedding a comment
in the document
trailer, which is easily applied using a hex editor, all of these
modiﬁcations were made using the open-source qpdf tool [13]
or the PyPDF2 Python library [11].
In general, the aim behind these attacks is to obscure the
payload of a malicious sample using aspects of the speciﬁca-
tion which a detector’s parser does not support or handles in-
correctly. Figure 4 outlines a simpliﬁed example demonstrating
how this attack works starting with the unobfuscated malicious
content in ﬁgure 4a.
By applying ﬁlters or encodings to object streams in the
document, as seen in ﬁgure 4b, the malicious JavaScript is
obscured from all detectors which do not support the encoding
used. However, the fact that the document contains JavaScript
is not hidden, which may be used with other heuristics to
classify the sample as malicious. If the objects are ﬁrst placed
in streams before the stream data is encoded, as seen in
ﬁgure 4c, no indication of the embedded malicious JavaScript
remains for malware detectors which do not correctly handle
these aspects of the speciﬁcation.
To evaluate the effectiveness of these attacks against the
commercial malware detectors on VirusTotal, we started with
the base unobfuscated malicious ﬁle and then applied different
obfuscations, including Flate compression, R5 & R6 security
handlers, hexadecimal encoding, etc. By determining which
obfuscations were successful and which detectors they evaded,
we were able to combine several obfuscations so as to maxi-
mize the number of evaded detectors. Although the application
of many of these obfuscations is quite easy, they are powerful
in practice.
Knowing that
these parser confusion attacks are likely
insufﬁcient to thwart metadata based detection systems on their
own, since the core content of the sample is not changed, we
mounted our parser confusion attacks in combination with a
reverse mimicry attack[28]. To mount this attack, we removed
the payload from the malicious sample and applied it to a
benign root ﬁle, a tax form taken from the IRS’ website2. We
2http://www.irs.gov/pub/irs-pdf/fw4.pdf
11
TABLE V: Parser Confusion Attacks on Commercial Detectors and JS Extractors
Obfuscation
None
Flate Compression, objects streams
Flate Compression, R5 security handler
Flate Compression, R5 security handler, objects streams
Flate Compression, R6 security handler
Flate Compression, R6 security handler, object streams
Flate Compression, R6 security handler, objects streams, comment in trailer
JS encoded as UTF-16BE in hex string
JS encoded as UTF-16BE in hex string. Flate compression, object streams
JS encoded as UTF-16BE in hex string, Flate Compression, R5 security handler,
objects streams, comment in trailer
1Origami 2libpdfjs 3PDFiD 4jsunpack-n
MD5 Hash
Detection
Ratio
ae91ec6a96dc4d477beba9be6b907568
eb64df4dbd733b5aa72fb0c41995f247
2b1071b27f96d9cdcfc59e35040d28b7
8887439e33d15bcc8716634cbcbb392e
4e05ad44febe26f25629f27c155a7a0e
c82643a1388a2645409395ef3420d817
6b6abbce700027f7935e3eeacd43618d
ab09a01fe61a1066f814e3ffc2548f0a
b21e264efbb14b928f0121b22030c3a7
5039c273435300a46cd42ad0de0bb4ff
30/55
24/56
19/56
14/54
4/57
0/56
0/57
23/55
10/55
1/57
O1










l2










P3










j4










TABLE VI: PDFrate Evasion
Sample
MD5 Hash
Unobfuscated malicious ﬁle
Malware w/parser confusion attack only
Benign root ﬁle
Root ﬁle w/parser confusion + reverse mimicry
attacks
ae91ec6a96dc4d477beba9be6b907568
6b6abbce700027f7935e3eeacd43618d
303b209708842adf30b81f437c5ec0ed
d48a343058503f931eadec99f3a89e70
Contagio
Malware Dump
86.4%
70%
0.7%
7.8%
George Mason
University
89.6%
65.8%
13.9%
2.3%
PDFrate
Community
91%
82.2%
13.5%
11.0%
then applied obfuscations which were successful in thwarting
the commercial malware detectors to this sample to evaluate
its effect on the detector. This attack is evaluated against the
PDFrate classiﬁer[32] which has been published as a publicly
available online service[9].
C. Attack Effectiveness
Commercial Detectors and JS Extractors. Table V lists a se-
ries of different parser confusion attacks which were mounted
using this sample and their effects on both the detectors on
VirusTotal and the JavaScript extractors which we used in
our differential analysis. This table lists the “Detection Ratio”
for the AV scanners, which is the number of scanners which
identify the ﬁle as malicious over the number of scanners
which could return a result in a timely manner. Additionally,
each sample’s MD5 checksum is provided which can be used
to get additional information about the ﬁle and the scan from
VirusTotal. Researchers with sufﬁcient access to the VirusTotal
API can also obtain copies of these ﬁles, though caution must
be exercised as they do contain working exploit.
Starting with the completely unobfuscated malicious ﬁle,
which the majority of the detectors identify as malicious, we
started applying different obfuscations. Each parser has its
own individual weaknesses, and by combining the obfuscations
in different combinations, we can exploit the weaknesses in
several parsers to reduce the detection ratio. We can also
reduce the detection ratio by layering the obfuscations in ways
which our analysis indicates a parser is unlikely to anticipate
or handle correctly. By combining these techniques with the
use of object streams to increase the amount of information
in the document which is encoded, we are able to ensure
that detection requires successful parsing while simultaneously
decreasing the chances that a detector is able to do so.
While common encodings such as Flate compression only
slightly reduce the detection ratio,
the application of the
more complicated revision 5 (R5) security handler and the
obscure revision 6 (R6) handler are very effective in evading
detection. Though the Origami tool correctly implements the
revision 6 security handler, it is easily thwarted by injecting a
comment into the document trailer, producing a sample which
completely evades detection. Eventually, the sample obfuscated
using the combination of Flate compression, the revision 6
security handler, object streams and the comment injected in
the trailer produces zero detections on VirusTotal and can
defeat all the JavaScript extractors.
Similarly, by only applying the relatively simple and well-
understood UTF-16BE and hexadecimal encodings, the detec-
tion ratio is only slightly reduced. Knowing from our analysis
that many parsers handle relatively simple encodings but do
not correctly handle complex combinations, we combine these
with Flate compression and encryption to almost completely
evade detection. The fact that this can be done without the
use of the unratiﬁed revision 6 security handler indicates that
even within speciﬁcations which have existed for years there
are still many failings which need to be addressed.
Metadata Based Detectors. Table VI shows the effectiveness
of parser confusion attacks against PDFrate. We evaluated the
version of this classiﬁer which is publicly available as an online
service. The classiﬁer produces the likelihood that a sample
is malicious using models trained against three different data
sets, the Contagio malware dump, samples collected at George
Mason University, and samples submitted by the PDFrate
community [9]. No threshold is provided by PDFrate for
determining whether or not a sample is malicious, but the effect
of the attack is clear.
The classiﬁer correctly identiﬁes the unobfuscated mali-
cious ﬁle generated by Metasploit as malicious, and though
we can reduce its malicious rating using the same obfuscations
the detectors on VirusTotal (i.e.,
which completely thwart
R6 security handler, objects streams, comment
in trailer),
we cannot do so signiﬁcantly. This is due to the fact that
PDFrate does not detect malware based on the contents of
12
TABLE VII: PJScan Performance
Tool
Original PJScan
PJScan & Adobe Reader 9.5.0
PJScan & Adobe Reader 11.0.08
True Positive
68.34% (1453)
96.04% (1441)
94.02% (1021)
False Positive
0.18% (3814)
0.32% (3521)
0.20% (3677)
TABLE VIII: Average Runtime
Tool
libpdfjs
jsunpack-n
Origami
Reference JS Extractor
Avg. Runtime (s)
0.05
0.78
1.86
3.93
Fig. 5: Possible Deployment Scenario
B. Improvement of Parsers
embedded JavaScript but rather on the ﬁle’s metadata and
that these obfuscations cannot signiﬁcantly alter many of the
features used for classiﬁcation (e.g. ﬁle size). In contrast, the
application of the reverse mimicry attack produces a sample
which is classiﬁed as much less malicious. However,
the
sample might still appear as suspicious depending on the
threshold values used for classiﬁcation.
By mounting a parser confusion attack in addition to a
reverse mimicry attack on this ﬁle, the ability of the classiﬁer
to recognize the sample as malicious is signiﬁcantly reduced,
to the point where it is classiﬁed as more benign than the
original sample by two of the classiﬁers. Since PDFrate’s reg-
ular expression based parser cannot perform the computation
necessary to decrypt the document, much of the document
appears to the classiﬁer to be large streams of random data.
Thus, many of the features of the sample which would be used
to classify the sample as malicious are obscured by the parser
confusion attack.
VI. MITIGATIONS
To mitigate parser confusion attacks, three classes of mit-
igation methods can be utilized.
A. Runtime-Based Exploit Detection
The ﬁrst possible solution is to capture the JavaScript ex-
ecution completely at runtime. Since parser confusion attacks
only defeat static parsing and further classiﬁcation efforts, it
does not prevent JavaScript from being executed and thus,
observed when Adobe Reader opens the hosting PDF ﬁles.
Prior malware detection systems have been presented
which, though not designed to detect malicious PDFs specif-
ically, can detect the existence of malware by analyzing the
runtime behavior of the target application. Nozzle [30] and
ShellOS [33], for example, have both been shown to be effec-
tive in detecting attacks against Adobe Reader speciﬁcally.
While these tools are able to completely circumvent is-
sues related to parsing, they have signiﬁcant overhead. These
systems also not only depend on the execution of malicious
JavaScript, but on the actual execution of an exploit in order to
classify a PDF as malicious meaning that malicious JavaScript
which selectively executes or fails to execute correctly cannot
be correctly classiﬁed.
13
The second potential solution is to improve the existing
parsers that are used in malicious PDF classiﬁers. Since the
proposed attacks focus on the discrepancies between 3rd party
PDF parsers and Adobe Reader, the attacks can essentially be
defeated provided we can improve the quality of the parsers
and resolve these discrepancies.
However, it is in general very difﬁcult to make one program
precisely mimic the behavior of another. Even though our ref-