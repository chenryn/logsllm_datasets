    module M1
    type T1
    y
    end
    foo(x::Int) = 10
    foo(x::T1) = foo(x.y)
    end
    @show code_typed(M1.foo, (M1.T1,))
gives
    code_typed(M1.foo,(M1.T1,)) = Any[:($(Expr(:lambda, Any[:x], Any[Any[],Any[Any[:x,M1.T1,0]],Any[]], :(begin  # /home/mlubin/test2.jl, line 8:
            return foo((top(getfield))(x::M1.T1,:y))::Int64
        end::Int64))))]
on Julia 0.4.
This is incorrect, we can't infer anything about the return type here, since
`foo` could be extended later and `x.y` doesn't need to be an `Int`.