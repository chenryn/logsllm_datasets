2lnr
1
2lnr
·
+
1
2lnr
.
(1)
D. Security against SAT Attack
The SAT attack can be considered as a special form of brute
force attack. Observing our result obtained for brute force
214
attack and the one for SAT attack reported in [3] (when the
attack target is the password), one can easily see the former
is much smaller than the latter in most cases. For instance,
for the basic PAS scheme with the default parameters and
t = 1, the latter is as high as 2103.3, but the former is only
about 222 (cid:28) 2103.3. This implies that the security analysis
on SAT attack given in [3] was also highly over-estimated.
E. Usability
In [3] it is claimed that the usability of the (basic) PAS
scheme is much better than some other solutions (see the
last sentence of Section 5.1 of [3]). We doubt if it is a fair
comparison. The main problem is the lack of a consistent
security analysis of the solutions. The existence of multiple
security factors also makes it difﬁcult to ﬁnd a reasonable
parameter set of each solution to compare the usability.
For instance, the Cognitive Authentication Scheme (CAS)
proposed in [11] has a low-complexity variant, which has
relatively good usability but a lower security level according
to [12]. Comparing the CAS solution with the default setting
of the basic PAS scheme, we have the following results:
• average login time: CAS – 1.5 minutes = 90 seconds,
• security against random guess attack: CAS – 220 ∼ 225,
PAS – 84.23 seconds;
PAS – 210;
• maximal number of authentication sessions a password
can be used: CAS – less than 12, PAS – around 10
(actually less, see the next section of this paper).
is obvious that
It
the basic PAS scheme is worse than
the low-complexity CAS in terms of both security and
usability. Actually, even the above comparison is not a
fair one, either, since not all security and usability factors
are considered. In our opinion, comparing performance of
different human authentication systems is not an easy task
without a comprehensive security and usability study of
all the systems involved. But one principle is clear: the
comparison of usability should be made for the same level
of security against various kinds of attacks, and vice versa.
In other words, the performance comparison should be done
by considering both security and usability simultaneously.
Another problem with the basic PAS scheme is that it
requires too long passwords. For the default setting, each
user has to remember two cell indices and two words of
length 10. In total there are 4 digits and 20 characters to be
remembered. Although there are several ways of creating
easily memorable but still strong passwords as discussed in
[3], we doubt if they indeed work in reality for average users.
In [3] it was not reported if the participants in the user study
had difﬁculties choosing their passwords and how likely
they might forget their passwords. According to a large-
scale user study on web password habits [20], the average
password length is around 6 to 9 and passwords longer than
13 characters are rare. Hence, it remains a question if 4
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:10:53 UTC from IEEE Xplore.  Restrictions apply. 
digits plus 20 characters are indeed usable.
In case the usability of the basic PAS scheme may be
a problem,
the extended PAS scheme seems even more
difﬁcult for average users to handle. Even when k = 2,
the average login time will be at least doubled, which is
about 2 × 84 seconds ≈ 2.8 minutes, exceeding the upper
bound of more than half of the average users according to
the user study reported in [3]. In addition, if the value of len
remains the same, the number of digits and characters to be
remembered will also be doubled. By using a smaller value
of len, the memorability problem can be relaxed, but it has
no obvious inﬂuence on the average login time, which does
not depend on the value of len. Further more, we expect the
error rate will also signiﬁcantly increase due to the added
complexity of handling more terms in each predicate.
To sum up, although we cannot deﬁnitely say if the basic
PAS scheme is usable or not, it is clear that the extended PAS
scheme is not usable. Because of this, in the next section we
will focus our attention mainly on the basic PAS scheme.
V. A Probabilistic Attack
The security analysis given in the previous section has
shown that security of the PAS scheme is much weaker
than claimed in [3]. In Section IV-A, we also show that the
number of candidate predicates decreases exponentially as t
increases. For the default setting of the basic PAS scheme,
the predicate pair used can be uniquely determined with high
probability when t = 2, since 1+((25×26)2−1)/22×5×2 ≈
1.4029  1, count the number of times each
cell-index vector occurs in P∗
1, . . . , P∗
ˆt and rank the
cell-index vectors in order of occurrence. All cell-index
vectors that are ranked ﬁrst are the candidates for the
secret cell-index vector. All characters in P∗
1, . . . , P∗
ˆt
that correspond to these candidates cell-index vectors
are then the candidates for the secret characters.
In the proposed attack, Step 1 corresponds to the brute
force attack targeting each p-predicate vector, and Step
2 exploits the correlation existing between different p-
predicate vectors (i.e., the static cell-index vector). Step 3
has two different cases, according to the cardinality of C∗.
The ranking based strategy in Step 3b is justiﬁed by the
215
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:10:53 UTC from IEEE Xplore.  Restrictions apply. 
THE RANGE OF ˆt TO ENSURE Pr[|C∗| = 1] ≥ q.
Table V
q
ˆt ≥
0.01
0.05
7
8
0.1
8
0.2
9
0.3
9
0.4
9
0.5
10
0.6
10
0.7
11
0.8
11
0.9
12
(cid:0)N1
(cid:1)(cid:0)1/2lnr(cid:1)a(cid:0)1 − 1/2lnr(cid:1)N1−a, where 0 ≤ a ≤ N1 and
fact that the secret cell-index vector appears most frequently,
since it occurs at least once while others may never occur.
A more detailed analysis on this ranking probability will be
discussed in Section V-B2. Step 3b is the main part to make
the attack work in a probabilistic manner.
B. Theoretical Analysis
In this subsection, we show some theoretical analyses on
Steps 3a and 3b of the attack.
1) Number of observed authentication sessions
First let us investigate how many observed authentication
|C∗| = 1 happens with high
sessions will ensure that
probability. According to our discussion in Section IV-A, the
probability that each incorrect p-predicate vector will remain
in Pi is 1/2lnr. Then, we can derive Pr[|Pi| = a + 1] =
N1 = (M H)p − 1. Note that the correct p-predicate vector
is always in Pi, so |Pi| ≥ 1.
Given a set Pi of size a + 1, let us estimate the probabil-
ity that an incorrect p-tuple cell-index vector (c1, . . . , cp)
belongs to Ci under the assumption that all incorrect p-
predicate vectors appear in Pi with equal probability. To
facilitate the following discussion, denote the probability by
ρ0(a). When a > N1 − H p, we can see ρ0(a) = 1, since
there can be a maximum of N1−H p p-predicate vectors with
other cell-index vectors. When a ≤ N1−H p, the probability
.
Based on the above results, for a randomly generated set
Pi whose size is unknown, the probability that an incorrect
cell-index vector (c1, . . . , cp) belongs to Ci is as follows
is ρ0(a) = 1 −(cid:0)N1−H p
(cid:1) = 1 −Qa−1
(cid:1).(cid:0)N1
1 − H p
N1−i
(cid:16)
(cid:17)
i=0
a
a
a
ρ = Pr[(c1, . . . , cp) ∈ Ci]
= XN1
a=0
ρ0(a) · Pr[|Pi| = a + 1].
(2)
Qˆt
Assuming the above probability ρ does not depend on
i, we get Pr[(c1, . . . , cp) ∈ C∗] =
the subscript
i=1 Pr[(c1, . . . , cp) ∈ Ci] = ρˆt. Then, we can further
derive the probability that |C∗| = 1 as the probability that
1 − ρˆt(cid:17)M p−1
none of the M p − 1 incorrect cell-index vectors is in C∗:
get the following condition: ˆt ≥l
. Let Pr[|C∗| = 1] ≥ q, we
Pr[|C∗| = 1] =
(cid:17)m
1 − q
(cid:16)
(cid:16)
M p−1
.
1
logρ
Once the parameters of the basic PAS scheme are all
given, one can immediately estimate the value of ρ and
then calculate the minimal value of ˆt corresponding to
any threshold probability q. For the default parameters,
ρ = 0.4834. Table V shows the minimal value of ˆt ensuring
|C∗| = 1 happens with different threshold probabilities q.
We can see that 10 observed authentication sessions are
enough to guarantee q ≥ 0.5.
2) Ranking Probability in Step 3b
Table V shows that Step 3a is not able to effectively re-
duce the number of observed authentication sessions. When
q = 0.5, we need 10 observed authentication sessions, which
is the maximal number before password renewal. Although
we may be able to break the password with 7 observed
authentication sessions, the probability is too low. Step 3b
can help the attack work with even less than 7 observed
authentication sessions, and with a nontrivial success rate.
To make a theoretical analysis on the ranking probability
problem involved in Step 3b, we need to estimate the size of
P∗
i . Assuming the number of incorrect p-predicate vectors in
Pi decreases with the same rate as the number of incorrect
i | = 1+ρˆt(|Pi|−1). Since
cell-index vectors in C, we have |P∗
i |) = 1 + ρˆtN1/2lnr.
E(|Pi|) = 1 + N1/2lnr, we get E(|P∗
i |, we need to know the proba-
bility that the correct cell-index is among the most frequent
one(s). This is equivalent to the following problem.
With the estimation of |P∗
H p/N1. Randomly pick L = Pˆt
There are N = M p types of objects. Type-1
objects occur with probability q1 = (H p − 1)/N1,
and all other objects occur with probability q0 =
i | − 1)
objects with the above probabilities and add ˆt
more type-1 object(s), what is the probability that
the number of type-1 object(s) is not less than the
number of objects of any other type?
i=1(|P∗
we have the following result:
Note that q1 + (N − 1)q0 = 1 for the above problem.
To facilitate our discussion, denote the number of type-i
objects in the L objects by #(Oi). It is not easy to get
an explicit solution to the above problem. Now let us try
to derive a practical lower bound of the probability. When
L ≤ ˆt, #(Oi) ≤ L ≤ ˆt ≤ #(O1) + ˆt always holds, so
Pr(cid:2)maxN
i=2(#(Oi)) ≤ #(O1) + ˆt(cid:3) = 1. When L ≥ ˆt + 1,
Pr(cid:2)maxN
i=2(#(Oi)) ≤ #(O1) + ˆt(cid:3)
= 1 − Pr(cid:2)∃i ∈ {2, . . . , N}, #(Oi) > #(O1) + ˆt(cid:3)
Pr(cid:2)#(Oi) ≥ ˆt + 1(cid:3)!
NX