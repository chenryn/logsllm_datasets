probe subshell=entry (C11e, ch1ldp1d) 
probe subshell-return (file, rval):
probe line (ffle, Lineno] 
probe variable-set (file, variable, value) 
probe variableunset ([11e, vaxiable);
J
This should also provide ideas for future bash shell USDT probes.
12.4.6 bash One-Liners
These sections show BCC and bpftrace one-liners for bash shell analysis.
BCC
Count execution types (requires symbols):
funccount */bin/bash:execute_**
Trace interactive command input:
trace *e:/bin/bashsreadline *%s*。 retral*
bpftrace
Count execution types (requires symbols):
4)qunoo =[aqoxd] g)aqnoaxa:qeeq/utq/qodn,a-aoesngdg
Trace interactive command input:
bpftrace -e *ur:/bin/bashsreadline 1 printf 1*read: la`n", ste(retvalll: )*
---
## Page 620
12.5 Other Languages
583
12.5 OtherLanguages
There are many more programming languages and runtimes, and more will be created. To
instrument them, first identify how they are implemented: are they compiled into binaries, JTT
compiled, interpreted, or some combination of these? Studying the relevant previous section on
C (for compiled), Java (for JIT compiled), and the bash shell (for interpreted), will give you a head
start on the approach and challenges involved.
On this book’s website [140] I willink to articles about using BPF to instrument other languages
as they are written. The following are tips for other languages that I have previously traced using
BPF: JavaScript (Node.js), C++, and GoLang.
12.5.1 JavaScript (Node.js)
BPF tracing is similar to Java. The current runtime used by Node.js is v8, developed by Google for
the Chrome web browser. v8 can run Java functions interpreted, or JIT compile them for native
execution. The runtime also manages memory, and has a garbage collection routine.
The following summarizes Node.is USDT probes, stack walking, symbols, and function tracing.
USDT Probes
There are built-in USDT probes and a node-usdt library for adding dynamic USDT probes to
the JavaScript code [141]. The Linux distribution currently does not ship with the USDT probes
enabled: to use them, you must recompile Node.js from source with the vI thdtrace option.
Example steps:
S tar xf node-v12.4.0.tar.gz
5 cd node-v12.4.0
$./configure -vith-dtrace
5 nake
Listing USDT probes using bpftrace:
apou/ura/teoot/zsm/ :apsm, T- eoez,dq 
usdit:/usx/1ocal/bin/node :node:gc_start
usdt: /usx/1ocal/bin/node :node: gc_Gone
usdt:/usr/local/bin/node:node:http_server__response
usdt:/usx/local/bin/node :node:net_strean__end
usdit:/usr/local/bin/node :node:net__server_connect.ion
usdt:/usx/1ocal/oin/node :node:http_c1ient_response
usdt:/usr/local/bin/node :node:http__client_request
usdt:/usx/1ocal/bin/node :node :http_sezver_request
[..]
---
## Page 621
584
4 Chapter 12 Languages
These show USDT probes for garbage collection, HTTP requests, and network events. For more on
Node.js USDT, see my blog post “Linux bcc/BPF Node.js USDT Tracing° [142].
Stack Walking
Stack walking should work (frame pointer based), although translation of JITed JavaScript func
(xau pauedxa) daps enxa ue sanbau sjoquas opu suo
Symbols
As with Java, supplemental symbol files in /tmp are required to translate JTTted function addresses
to function names. If you are using Node.js v10.x or above, there are two ways to create these
sag goqss
1. Using the v8 flags -perf_bas1c_prof or --pex f_bas1c_prof_only_functlon.s. These
will create a rolling symbol logs that are continually updated, unlike Java which dumps
snapshots of the symbol state, Since these rolling logs cannot be disabled while the process
is running, over time it can lead to extremely large map files (Gbytes) containing mostly
stale symbols.
2. The linux-perf module [143], which is a combination of how the flags work and how Java's
perf-map-agent work: it will capture all functions on the heap and write to the map file,
and then it will continue to write to the file while new functions are compiled. It's possible
to start capturing new functions at any time. This method is recommended.
Using both approaches, P've needed to post-process the supplemental symbol files to remove stale
entries.2*
Another recommended flag is 1nterpze tedfxanesnat1ves tack (also available for
Node.js v10.x and above). With this flag, Linux perf and BPF tools wil be able to translate
interpreted JavaScript functions into their actual names (instead of showing *Interpreter” frames
on the stack).
A common use case that requires external Node.js symbols is CPU profiling and CPU flame graphs
[144]. These can be generated using perf(1) or BPF tools.
Function Tracing
There are not currently USDT probes for tracing JavaScript functions, and due to V8's architec.
ture, it would be challenging to add them. Even if someone adds it, as I discussed with Java, the
overhead can be extreme: slowing applications by 10x while in use.
The JavaScript functions are visible in user-level stack traces, which can be collected on kernel
events such as timed sampling, disk I/O, TCP events, and context switches. This provides many
insights into Node.js performance, including with function context, without the penalty of
tracing functions directly.
supddeu ua2as sou au sn pue spiempeq als joqufs 4g pea pnom (Tlμuad ael soo eu ounsse xflu noi, CZ
for 8 given address. Ive found that not to be the case, and an older mspping is used when there is a newer mapping in
sessauppe joj slujdidew jsewau eup Tuquegau A(juo :slol aseug ssesoad sod og papesu ar,1 Ayw s) sfu1 'Tlo) eg
---
## Page 622
12.5  Other Languages
585
12.5.2C++
C++ can be traced much the same as C, with uprobes for function entry, uprobes for function
a couple of differences:
returns, and frame pointerbased stacks if the compiler has honored the frame pointer. There are
•Symbol names are C++ signatures. Instead of ClassLoader:initialize0, that symbol may
be traced as _ZN11ClassLoader 10initializeEx. The BCC and bpftrace tools use demangling
when printing symbols.
Function arguments may not accommodate the procesor ABI for support of objects and
the self object.
Counting function calls, measuring function latency, and showing stack traces should all be
saeus a o saeu uoun e o sprepm asn o dau e ipemouens
when possible (e.g-, uprobe:/path:*ClassL.oader*initialize*).
Inspecting arguments will require more work. Sometimes they are simply offset by one to accom
modate a self object as the first argument. Strings are often not native C strings, but C++ objects,
and can’t simply be dereferenced. Objects need structs to be declared in the BPF program so that
BPF can dereference members.
This may all become much easier with BTF, introduced in Chapter 2, which may provide the
locations of arguments and object members.
12.5.3 Golang
Golang compiles to binaries, and tracing them is similar to tracing C binaries, but there are some
important differences with its function calling conventions, goroutines, and dynamic stack
management. Due to the latter, uretprobes are currently unsafe to use on Golang as they can
crash the target program. There are also differences between the compiler used: by default Go gc
emits statically linked binaries, whereas gccgo emits dynamically linked binaries. These topics are
discussed in the following sections.
Note that there are already other ways to debug and trace Go programs that you should be aware
of, including gdb's Go runtime support, the go execution tracer [145], and GODEBUG with
gctrace and schedtrace.
Stack Walking and Symbols
Both Go gc and gccgo honor the frame pointer by default (Go since version 1.7) and include
symbols in the resulting binaries. This means that stack traces that include Go functions can
always be collectedl, from either user- or kernel-level events, and profiling via timed sampling will
also work immediately.
---
## Page 623
586
Chapter 12 Languages
Function Entry Tracing
calls that begin with fmt” in a Hello, World:* Golang program named *hello’, which was
The entry to functions can be traced with uprobes. For example, using bpftrace to count function
compiled using Go gc:
(:()unoo = [aqo3d] g ) 4ug:otteu/66exbq/auou/:aqozdn, o- 0oexdq 
Attaching 4z probes..-
^C
[uprobe:/hone/bgregg/he1lo:fmt. (*fmt] fnt_s] : 1
[upzobe : /hone/bgxegg/he11o:fmt nevPx1nter] : 1
[uprobe:/hone/bgregg/he1lo:fmt. Fprintln] : 1
e[upzobe: /hone/bgxegg/he11o:fst. (*pp) - fnt:String] : 1
[uprobe: /hone/bgregg/he1lo:fmt glob. , func1| : 1
e[upzobe:/hone/bgxegg/he1lo:fst. (*pp) -pxintArg : 1
 [uprobe: /home/bgregg/he11o:fmt.。 (*pp) - free] : 1
e[upzobe:/hone/bgxegg/he1lo:Est., PxintIn] : 1
[uprobe: /hone/bgregg/he11o:fmt . in.it] : 1
 [upzobe:/hone/bgxegg/heI1o:Ext. (*pp) -doPrIntIn]: 1
[uprobe: /hone/bgregg/hello:fmt. (*fmt] padString] : 1
e [upzobe : /hone/bgxegg/he11o : fmt . (* fmt) truncate] : 1
While tracing I ran the hello program once. The output shows that various fmt functions were
called once, including fmt.Printin(), which I suspect is printing “Hello, World!'.
Now counting the same functions from a gccgo binary. In this case, those functions are in the
libgo library, and that location must be traced:
= [aqoxd] g )￥g:t osoq/nuxnur99gx/qt/3sn/:aqoxdn, - aoexdq +
count() : }'
Attach.ing 143 probe5...*
[upzobe:/usr/11b/x86_6411nux=gnu/11bgo.so.13:fαt, fnt, clearflaga : 1
 [uprobe: /usr/lib/x86_64-linux-gnu/libgo.so.13:fmt. fnt, t.runcate] : 1
e[upzobe:/usx/1lb/x86_641inux=gnu/11bgo-so 13:mt. Print.1n] : 1
9[uprobe: /usr/lib/xB6_641inux=gnu/libgo.so.13:fmt.nevPrinter] : 1
e[upzobe:/usx/1lb/x86_641inux=gnu/1ibgo-so 13: fmt.,buCfer WriteByte] : 1
[uprobe:/usr/lib/xB6_64linux=gnu/libgo-so.13:fmt-pp-printArg] : 1
t : [futasaug*dd*wg:et*os*o6gTt/nubxmutt-b99gx/gTt/xsn/ :egoxdn]@
e[uprobe:/usr/lib/x86_641inuxgnu/libgo.so.13:fmt. fnt, fnt_s]: 1
e[upzobe:/usx/1lb/x&6_641inux=gnu/1ibgo-so 13: mst-p-fxee] : 1
[uprobe:/usr/lib/xB6_61inux=gnu/libgo-so.13:fmt fnt init] : 1
e[upzobe: /usr/1ib/xB6_641inux=gnu/1ibgo_so.13:fmt.buffer,WriteString] : 1
---
## Page 624
12.5 Other Languages
587
e[uprobe:/usr/lilb/xB6_641inux=gnu/libgo-so-13:fmt-p -doPcintln] : ]
[upzobe:/usx/11b/x6_541inux=gnu/1ibgo.so.13:fαt.,fnt,padstz1ng] = 1
[uprobe:/usr/lib/xB6_641inux=gnu/libgo-so-13:fmt.FprintIn] : 1
e[upzobe:/usr/11b/xB6_541inux=gnu/11bgo-so 13:fmt. Inport] : 1
9[upcobe:/usr/Lib/xB6_641inux=gnu/libgo-so.13: fmt. go., func1] =1
The naming convention for the functions is a little different. The output includes fmt.Println0, as
seen earlier.
These functions can also be counted using the funccount(8) tool from BCC. The commands for
the Go gc version and then the gccgo version are:
+*ug:otes/66eaba/euoq/,。 1un.ooung
funccount *go:fnt , **
Function Entry Arguments
Go's gc compiler and gccgo use different function-calling conventions: gccgo uses the standard
fetching function arguments differs: with gecgo, the usual approach (e.g., via bpftrace argo.
AMD64 ABI, whereas Go’s gc compiler uses Plan 9's stack-passing approach. This means that
argN) will work, but it will not with Go gc: custom code will need to be used to get it from the
stack (see [146][147]).
For example, consider the add(x int, y int) function from the Golang tutorial [148], which is
called with the arguments 42 and 13. To instrument its arguments on a gccgo binary:
+ bpftrace -e *uprobe:/home/bgregg/fune:nain*add ( printf ("ed ed\n*, arg0, argl) : )'
Attaching 1 prcbe..*
42 13
The arg0 and arg1 built-ins work. Note that I needed to compile using gccgo 00 so that the add()
function wasn’t inlined by the compiler.
Now instrumenting its arguments on a Go gc binary:
',u\ps pt1gaurad 1 ppe,uyew:oung/06/6uer/66exfq/auou/:aqoxdn, a- eoexagdq +
.1 : ((9T +(,ds_16ex) 。* (8 +(ds,)6ex) +
Attaching 1 probe...
42 13
This time the arguments needed to be read from their offsets the stack, accessed via reg(*sp°)
A future version of bpftrace may support these as aliases, such as sarg0, sarg1 [149], short for
'stack argument*, Note that I needed to compile this using go bu11d =gcf1ags *1 1′ -* . so
that the add() function wasn’t inlined by the compilet.
---
## Page 625
588
Chapter 12 Languages
Function Retums
Unfortunately, uretprobe tracing is not safe with the current implementation of uretprobes.
The Go compiler can modify the stack at any time, unaware that the kernel has added a uretprobe
trampoline handller to the stack.?°* This can cause memory corruption: once the uretprobe is
deactivated, the kernel will return those bytes to normal, however, those bytes may now contain
other Golang program data, and will be corrupted by the kernel. This can cause Golang to crash
(if you are lucky) or continue running with corrupt data (if you are unlucky).
Gianluca Borello has experimented with a solution that involves using uprobes on the return
locations of functions rather than uretprobes. This involves disassembling a function to find the
return points, and then placing a uretprobe on them (see [150]),
Another problem is goroutines: these can be scheduled between different OS threads as they are
running, so the usual method of timing function latency by using a timestamp keyed on thread
ID (e.g., with bpftrace: starttid] = nsecs) is no longer reliable.
USDT
The Salp library provides dynamic USDT probes via libstapsdlt [151]. This allows static probe
points to be placed in your Go code.
12.6Summary
Whether your programming language of interest is compiled, JIT compiled, or interpreted, there
is likely a way to analyze it with BPF. In this chapter I discussed these three types and then showed
how to trace an example from each: C, Java, and the bash shell. With tracing it should be posible
to examine their function or method calls, examining their arguments and return value, function
or method latency, and also show stack traces from other events. Tips for other languages were
also included for JavaScript, C++, and Golang.
24 Thanks Suresh 
ng explain this p
nent in [1.46]
---
## Page 626
napter
Applications
The applications running on a system can be studied directly using static and dynamic
instrumentation, which provides important application context for understanding other events.
Previous chapters studied applications via the resources they used: CPUs, memory, disks, and
networking. This resource-based approach can solve many issues, but it may miss clues from the
application, such as details about the requests it is currently servicing. To complete your observa
tion of an application, you need both resource analysis and application-level analysis. With BPF
tracing, this allows you to study the flow from the application and its code and context, through
libraries and syscalls, kernel services, and device drivers.
I will use the MySQL database as a case study in this chapter. MySQL database queries are an
example of application context. Imagine taking the various ways disk I/O was instrumented in
Chapter 9 and adding query string as another dimension for breakdowns. Now you can see which
queries are causing the most disk I/O, and their latencies and patterns, and so on.
Learning Objectives:
Discover issues of excessive process and thread creation
 Solve CPU usage issues using profiling
Solve off-CPU blocking issues using scheduler tracing
Solve excessive I/O issues by showing I/O stack traces
 Trace application context using USDT probes and uprobes
 Investigate code paths responsible for lock contention
 Identify explicit application sleeps
This chapter is supplemental to the prior resourc
-oriented chapters; for full visibility of the soft-
ware stack also see:
Chapter 6, *CPUs”
Chapter 7, *Memory”
Chapter 8, *File Systems*
 Chapter 9, “Disk I/O"
Chapter 10, "Networking*
Application behavior not covered in those other chapters is covered here: fetching application
context, thread management, signals, locks, and sleeps.
---
## Page 627
590
) Chapter 13Applications
13.1 Background
An application may be a service that responds to network requests, a program that responds to
direct user input, or a program that runs on data from a database or a filesystem, or something
else. Applications are typically implemented as user-mode software, visible as processes, and
(s8unddetu Asotuau so) aoejaqu [eosAs auq egA saounosau ssaooe
13.1.1Application Fundamentals
Thread Management
For multi-CPU systems, the operating system construct called threads allows applications to
efficiently execute work across multiple CPUs in parallel, while sharing the same process address
Supn[ou 'siem puaagip u speanq po asn axeu ueo suopeoddy aoeds
Service thread pool: A pool of threads services network requests, where each thread
services one client connection and request at a time. If the request needs to block on a
resource, including synchronization locks with other threads in the pool, the thread sleeps.
The application may have a fixed number of threads in the pool, or it may increase and
decrease them based on client demand. An example is the MySQL database server.
• CPU thread pool: The application creates one thread per CPU for executing work across
them. This is commonly used for batch processing applications, which process one or more
queued requests, continuously and without further input, whether that takes minutes
hours, or days. An example is video encoding.
 Event worker thread: Either one or multiple threads are event workers, processing a queue
of client work until the queue is empty and the thread sleeps. Each thread services multiple
clients concurrently, piecemeal: executing a part of a client request until it blocks on a later
asn pe suogeddy ssaood o ananb a u puaa pua pxau a o Buas u suana
a single event worker thread may avoid the need for synchronization locks, but they risk
benefits from it in this way.
becoming single-threaded bound under load. Node.js uses a single event worker thread and
 Staged Event-Driven Architecture (SEDA): SEDA decomposes application requests into
stages, which may be processed by pools of one or more threads [Welsh 01].
Locks
memory from threads running in parallel, similarly to the way traffic lights regulate acces to an
Locks are synchronization primitives for multi-threaded applications; they police access to
intersection. And, like traffic lights, they can halt the flow of traffic, causing wait time (latency).
On Linux, applications commonly use locks via the libpthread library, which provides different
lock types, including mutual exclusive (mutex),reader-writer, and spin locks.
While locks protect memory, they can become a source of performance issues. Lock contention
occurs when where multiple threads are competing to use one lock, and blocking while waiting
their turn.
---
## Page 628
13.1 Background
T69
Sleeps
Applications can deliberately sleep for a period of time. Such sleeps may make sense (depenxding
on the reason), or may notand may therefore be opportunities for optimization. If you have
ever developed applications there may be a time where you've thought: *I'll just add a sleep one
second here so that the events I'm waiting for have completed; we can delete this sleep later and
make it event-based.* However, that later never comes, and now end users are wondering why
some requests take at least one second.
13.1.2Application Example:MySQL Server
As an example application to analyze in this chapter, I'lI look at the MySQL database server. This
service responds to network requests using a service thread pool. Depending on the size of the
lata frequently accessed, it is expected that MySQL will either be disk bound for large working
sets or CPU bound for small working sets where queries return from its memory cache.
MySQL server is written in C++ and has embedded USDT probes for queries, commands, filesort,
inserts, updates, network I/O, and other events. Table 13-1 provides some examples.
Table 13-1MySQL Probe Examples
USDT Probe
Arguments
connection__start
unsigned long connection_id, char *user, char *host
connection_done
int status, unsigned long connection_id
command_start
unsigned long connection_id, int command, char *user, char *host
command_done
 int status
query._start
jesn, jeuo *aweu qp+ Jeuo 'p!uogoeuuoo Buol pauBisun Xuanb, Jeqo
char *host
query._done
int status
filesort_start
char *db_name, char *table
filesort__done
 int status, unsigned long rows
net__write.__start
unsigned long bytes
net_write_done
 int status
See *mysqld DTrace Probe Reference° in the MySQL Reference Manual for the full list of
probes [152]. These MySQL USDT probes are only available when MySQL is compiled with
DENABLE_DTRACE=1 as a parameter to cmake(1) during the build process. The current
mysql-server package for Linux does not do this, so you will need to build your own MySQL server
software to use USDT probes or ask the package maintainers to include this setting.
Since there are many scenarios where USDT probes may not be available for your application, this
chapter includes MySQL tools that instrument the server using uprobes instead.
---
## Page 629
592
2 Chapter 13 Applications
13.1.3 BPF Capabilities
BPF tracing tools can provide additional insight beyond application-provided metrics, with
on atesn aonnosan jo qsta pure 'suerfostq ouape sau Aouape pue peopom wopsns
within the kernel. These capabilities can answer:
ouae nau st pem sssanbar uoedde at ae pe
• W'here is the time spent during application requests?
• Why is the application on CPU?
• W'hy does the application block and switch off CPU?
• What I/O is the application performing, and why (code path)?
W'hat locks is the application blocking on, and for how long?
· W'hat other kernel resources is the application using, and why?
These can be answered by instrumenting the application using USDT and probes for request
context, kernel resources and blocking events via tracepoints (including syscall) and kprobes,