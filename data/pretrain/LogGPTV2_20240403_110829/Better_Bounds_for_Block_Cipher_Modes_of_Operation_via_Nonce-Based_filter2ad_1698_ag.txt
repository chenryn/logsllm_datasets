that one can encrypt almost 264 messages with the same nonce
being used for up to Bmax = 216 blocks, or 248 messages with
the same nonce being used for up to 224 blocks, or 232 messages
i =1 (Bi )
2n−m−2
2
i =1 (Bi )
2n−m−2
(cid:80)N
(cid:80)N
with the same nonce being used for up to Bmax = 232 blocks, and
still remain within the NIST-recommended limit of 2−32 advantage.
Observe that when nonce misuse is low, it is possible to support
the encryption of much longer messages, because the Bmax2 factor
is the overall number of blocks with each nonce (and this factor is
quadratic).
= 1
Nonce-misuse vs no-nonce. The advantage of deploying nonce-
misuse resistant schemes is that such schemes do not break when
nonces repeat. However, some have interpreted such schemes as
being secure when no nonce (or a (cid:27)xed nonce) is used. Of course,
in such a case, repeating plaintexts are detected. Nevertheless, in
some applications, messages are guaranteed to not repeat, in which
case it would seem safe to always use the same (cid:27)xed nonce.
Our analysis shows that although the above has some truth
to it, repeatedly using the same nonce can impact the security
bounds. For example, consider the case of 232 messages of length
232, all encrypted using the same nonce. In this case, N = 1 and
Bmax = 264, and thus the term N·Bmax2
2 and so there is no
2129
security guarantee. This must be the case since encrypting 264
blocks with the same key can never be secure (by the birthday
paradox). Thus, when encrypting massive amounts of data, one
should not purposefully reuse the same nonce all the time.
6.2 AES-GCM-SIV with Random IVs
In order to derive the advantage in the case of a random IV, the only
di(cid:29)erence is due to the probability that nonces repeat. Even given
the case of a poor source of entropy, the probability that a randomly-
chosen IV will repeat very many times is extremely low. In this
case, we apply Theorem 3.2, and obtain a fundamentally di(cid:29)erent
result from CTR and AES-GCM with a random IV. In particular,
AES-GCM-SIV can be used with a random IV to encrypt essentially
the same number of blocks as when used with (hopefully unique)
nonces. Speci(cid:27)cally, Theorem 3.2 yields a bound that is the same
4
as for the case of a nonce-adversary, with the addition of QE
.
24·23(cid:96)
4
Considering the case of a 96-bit IV, we have that this equals QE
24·2288 .
This value is smaller than 3N296 for any QE ≤ 264, and so can be
ignored. Thus, whereas AES-GCM with a random IV is limited
to just 232 encryptions, with AES-GCM-SIV it is even possible to
encrypt N = 264 messages of length 212 each, or N = 248 messages
of length 220 each; see Table 2 below. Before providing the bound,
E ≤ 3 for every i in this case, we can also
we note that since Qi
2
ignore the
term in Theorem 6.2 and Corollary 6.3. We
provide the simpler version of the bound, as in Corollary 6.3, and
conclude:
that Assumption 1 holds, that N ≤ 264, and that (2a+2m )·(cid:80)N
Theorem 6.4. Let Π(cid:48) be the AES-GCM-SIV scheme, and assume
D <
i =1 Qi
. Then, for every (t, N, QE , (cid:126)QD , (cid:126)B, 0, m)-IV adversary A:
i =1 (Q i
E )
2126−m
N·Bmax2
(cid:80)N
2
AdvEncΠ(cid:48),A,nmrAE ≤ 3N
296 + N · Bmax2
2129
.
6.3 Summary Parameters
In Table 2, we show what parameters can be used for AES-GCM-SIV,
within the error bound of 2−32.
Scheme
AES-GCM-SIV (nonce)
AES-GCM-SIV (random IV)
N Qi
E
210
245
215
232
225
26
232
1
231
1
28
242
210
264
264
215
28
264
210
248
28
248
264
210
210
248
210
232
264
-
248
-
2m N·Bmax2
2129
2−32
216
2−35
216
2−32
230
2−35
230
2−34
216
2−39
216
2−39
23
2−33
1
2−33
28
2−33
214
2−33
216
2−25
210
2−29
216
2−29
224
2−35
212
2−35
220
(cid:80)N
)2
(Q i
E
2126−m
i =1
2−45
2−48
2−59
2−62
2−47
2−52
2−39
2−31
2−38
2−44
2−46
2−32
2−42
2−50
-
-
Table 2: Example parameters and security bounds for dominant terms
(exponent rounded to nearest integer). Recall that N is the number of dif-
ference nonces in encryption and decryption queries, Q i
is the number of
messages encrypted per nonce (we assume all are equal), and 2m − 1 is the
E
D ) · 2m when
maximum message length. Observe that Bmax = (Q i
E
all messages are of maximum length. Bounds that are below acceptable are
colored in red.
+ Q i
2
i =1
Observe that in almost all cases, the term N·Bmax2
2n+1
dominates; the
only exception is for extremely short messages. It is also worthwhile
noting that while a bad event that happens with probability N·Bmax2
2n+1
enables distinguishing the encryption game from the random game,
it is not a catastrophic event as in the case of a bad event that
(Q i
2n−m−2 . This is because the latter bad
E )
event reveals complete plaintext and breaks the authenticator for
all future messages.
occurs with probability(cid:80)N
Note that for short messages, AES-GCM-SIV provides very im-
pressive bounds. For example, in the QUIC protocol, the messages
are very short, at approximately 100 bytes which translates to 8
blocks. QUIC uses a random IV and so it is possible to encrypt 264
messages safely, even if they are much longer (212 blocks). When
considering the nonce setting and nonce misuse, then even if nonces
are misused up to 1,024 times, it is well within the security bounds
to encrypt even 264 messages. Thus, if QUIC is used in a setting
with a poor pseudorandom generator, it is still possible to encrypt
at extremely high volumes. We remark that in QUIC there is no
AAD at all. Thus, the assumption in Theorem 6.4 holds trivially.
7 PERFORMANCE
This section discusses some performance results, measured on the
Skylake processor (with Hyperthreading and Turbo disabled), as
shown in Table 3. The results cover short ,medium and long mes-
sages for Π= CTR, AES-GCM and GCM-SIV (encryption) and their
respective Π(cid:48) variant, using DeriveKey. Note that GCM-SIV+ with
DeriveKey, is called AES-GCM-SIV (see [13]). In all of these cases,
the key is of 128 bits. Obviously the relative overhead incurred by
DeriveKey (see Section 4) is higher for (very) short messages, as
illustrated messages of 64 bytes (4 blocks). This is unavoidable. For
CTR, where there are no other computations except encryption,
the relative overhead is the highest, and for the other modes it is
reduced is by the other operations. However, already for medium
messages, and certainly for long ones, the relative overhead de-
creases monotinically, down to a few percents. Derivation of 256-bit
keys has a similar performance e(cid:29)ect.
Given the objectively fast rates obtained, we argue that in most
applications, the gain in security margins is worth the additional
overhead. This is especially true for applications that encrypt masses
of data because (a) in this case the percentage overhead is very
small, and (b) the better security margins are of importance.
The AES-GCM code that we measured is the OpenSSL (1.0.2k)
implementation, using the OpenSSL speed utility;9 the results were
converted to cycles and cycles per-byte (C/B). Note that this utility
does not include the Init step. As a result (due to the structure
of the OpenSSL code), this also means that the encryption of the
mask (cid:27)rst counter block (1000000000000000000000000000000) is
not measured.10 Therefore, to make a consistent comparison, the
OpenSSL results needed to be adjusted by adding the cost of one
encryption. We used a very generous estimation as follows: for
the 128 bit case, we added 45 cycles, and for the 256 bit case, we
added 60 cycles. These adjustments have negligible impact for long
messages, but are noticeable for short ones.
Incl. Derivation
(C/B)
w/ DeriveKey
2.04
0.71
0.65
0.64
3.95
0.90
0.70
0.67
AES-GCM w/ DeriveKey
Original
(C/B)
CTR
0.69
0.63
0.63
0.63
2.96
0.84
0.68
0.66
Message length
(bytes)
64
1,024
4,096
8,192
64
1,024
4,096
8,192
64
1,024
4,096
8,192
GCM-SIV
4.53
1.25
1.01
0.97
w/ DeriveKey
5.67
1.37
1.04
0.98
Relative
overhead
2.96
1.13
1.03
1.02
1.34
1.07
1.02
1.01
1.25
1.10
1.03
1.01
Table 3: Performance (throughput in cycles per byte on a Skylake proces-
sor) of CTR, AES-GCM, and AES-GCM-SIV (128-bit key) with and without
DeriveKey, for short, medium and long messages. The table shows (right-
most column) the relative overhead due to the derivation. See explanation
and discussion in the text.
ACKNOWLEDGMENTS
We thank Adam Langley for many helpful discussions regarding
AES-GCM-SIV and the key derivation technique, and we thank
9For example, openssl speed -evp aes-128-gcm, and openssl speed -decrypt
-evp aes-256-gcm.
10Technically, the speed utility measures AES-GCM with a (cid:27)xed key and repeating
nonces, which does not really represent a legitimate usage of the cipher, rather a
performance characteristic.
Tetsu Iwata and Yannick Seurin for pointing out some typos and
small errors in an earlier manuscript.
This research was supported by the Israel Science Foundation
grant no. 1018/16, the PQCRYPTO project which was partially
funded by the European Commission Horizon 2020 Research Pro-
gramme grant no. 645622, and by the BIU Center for Research in