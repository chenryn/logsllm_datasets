func (mc *MetaChunk) readChunk(b *bytes.Reader) {
mc.readChunkSize(b)
mc.readChunkType(b)
mc.readChunkBytes(b, mc.Chk.Size) ❶
mc.readChunkCRC(b)
}
func (mc *MetaChunk) readChunkSize(b *bytes.Reader) {
if err := binary.Read(b, binary.BigEndian, &mc.Chk.Size); err != nil { ❷
log.Fatal(err)
}
}
func (mc *MetaChunk) readChunkType(b *bytes.Reader) {
if err := binary.Read(b, binary.BigEndian, &mc.Chk.Type); err != nil {
log.Fatal(err)
}
}
func (mc *MetaChunk) readChunkBytes(b *bytes.Reader, cLen uint32) {
mc.Chk.Data = make([]byte, cLen) ❸
if err := binary.Read(b, binary.BigEndian, &mc.Chk.Data); err != nil {
log.Fatal(err)
}
}
func (mc *MetaChunk) readChunkCRC(b *bytes.Reader) {
if err := binary.Read(b, binary.BigEndian, &mc.Chk.CRC); err != nil {
log.Fatal(err)
}
}
Listing 13-7: Chunk-reading methods (/ch-13/imgInject/pnglib/commands.go)
The methods readChunkSize(), readChunkType(), and readChunkCRC()
are all similar. Each reads a uint32 value into the respective
field of the Chunk struct. However, readChunkBytes() is a bit of an
anomaly. Because the image data is of variable length, we’ll
need to supply this length to the readChunkBytes() function so that
it knows how many bytes to read ❶. Recall that the data
length is maintained in the SIZE subfield of the chunk. You
identify the SIZE value ❷ and pass it as an argument to
readChunkBytes() to define a slice of proper size ❸. Only then can
the byte data be read into the struct’s Data field. That’s about it
for reading the data, so let’s press on and explore writing byte
data.
WRITING IMAGE BYTE DATA TO
IMPLANT A PAYLOAD
Although you can choose from many complex steganography
techniques to implant payloads, in this section we’ll focus on a
method of writing to a certain byte offset. The PNG file format
defines critical and ancillary chunk segments within the
specification. The critical chunks are necessary for the image
decoder to process the image. The ancillary chunks are
optional and provide various pieces of metadata that are not
critical to encoding or decoding, such as timestamps and text.
Therefore, the ancillary chunk type provides an ideal
location to either overwrite an existing chunk or insert a new
chunk. Here, we’ll show you how to insert new byte slices into
an ancillary chunk segment.
Locating a Chunk Offset
First, you need to identify an adequate offset somewhere in the
ancillary data. You can spot ancillary chunks because they
always start with lowercase letters. Let’s use the hex editor
once again and open up the original PNG file while advancing
to the end of the hex dump.
Every valid PNG image will have an IEND chunk type
indicating the final chunk of the file (the EOF chunk). Moving
to the 4 bytes that come before the final SIZE chunk will
position you at the starting offset of the IEND chunk and the
last of the arbitrary (critical or ancillary) chunks contained
within the overall PNG file. Recall that ancillary chunks are
optional, so it’s possible that the file you’re inspecting as you
follow along won’t have the same ancillary chunks, or any for
that matter. In our example, the offset to the IEND chunk begins
at byte offset 0x85258 (Figure 13-3).
Figure 13-3: Identifying a chunk offset relative to the IEND position
Writing Bytes with the ProcessImage() Method
A standard approach to writing ordered bytes into a byte
stream is to use a Go struct. Let’s revisit another section of the
ProcessImage() method we started building in Listing 13-5 and
walk through the details. The code in Listing 13-8 calls
individual functions that you’ll build out as you progress
through this section.
func (mc *MetaChunk) ProcessImage(b *bytes.Reader, c *models.CmdLineOpts)
❶ {
--snip--
❷ var m MetaChunk
❸ m.Chk.Data = []byte(c.Payload)
m.Chk.Type = m.strToInt(c.Type)❹
m.Chk.Size = m.createChunkSize()❺
m.Chk.CRC = m.createChunkCRC()❻
bm := m.marshalData()❼
bmb := bm.Bytes()
fmt.Printf("Payload Original: % X\n", []byte(c.Payload))
fmt.Printf("Payload: % X\n", m.Chk.Data)
❽ utils.WriteData(b, c, bmb)
}
Listing 13-8: Writing bytes with the ProcessImage() method (/ch-13/imgInject/pnglib
/commands.go)
This method takes a byte.Reader and another struct,
models.CmdLineOpts, as arguments ❶. The CmdLineOpts struct,
shown in Listing 13-9, contains flag values passed in via the
command line. We’ll use these flags to determine what
payload to use and where to insert it in the image data. Since
the bytes you’ll write follow the same structured format as
those read from preexisting chunk segments, you can just
create a new MetaChunk struct instance ❷ that will accept your
new chunk segment values.
The next step is to read the payload into a byte slice ❸.
However, you’ll need additional functionality to coerce the
literal flag values into a usable byte array. Let’s dive into the
details of the strToInt() ❹, createChunkSize() ❺, createChunkCRC() ❻,
MarshalData() ❼, and WriteData() ❽ methods.
package models
//CmdLineOpts represents the cli arguments
type CmdLineOpts struct {
Input string
Output string
Meta bool
Suppress bool
Offset string
Inject bool
Payload string
Type string
Encode bool
Decode bool
Key string
}
Listing 13-9: The CmdLineOpts struct (/ch-13/imgInject/models/opts.go)
The strToInt() Method
We’ll start with the strToInt() method (Listing 13-10).
func (mc *MetaChunk) strToInt(s string)❶ uint32 {
t := []byte(s)
❷ return binary.BigEndian.Uint32(t)
}
Listing 13-10: The strToInt() method (/ch-13/imgInject/pnglib/commands.go)
The strToInt() method is a helper that consumes a string ❶ as
an argument and returns uint32 ❷, which is the necessary data
type for your Chunk struct TYPE value.
The createChunkSize() Method
Next, you use the createChunkSize() method to assign the Chunk
struct SIZE value (Listing 13-11).
func (mc *MetaChunk) createChunkSize() uint32 {
return uint32(len(mc.Chk.Data)❷)❶
}
Listing 13-11: The createChunkSize() method (/ch-13/imgInject/pnglib/commands.go)
This method will obtain the length of the chk.DATA byte
array ❷ and type-convert it to a uint32 value ❶.
The createChunkCRC() Method
Recall that the CRC checksum for each chunk segment
comprises both the TYPE and DATA bytes. You’ll use the
createChunkCRC() method to calculate this checksum. The method
leverages Go’s hash/crc32 package (Listing 13-12).
func (mc *MetaChunk) createChunkCRC() uint32 {
bytesMSB := new(bytes.Buffer) ❶
if err := binary.Write(bytesMSB, binary.BigEndian, mc.Chk.Type); err != nil {
❷
log.Fatal(err)
}
if err := binary.Write(bytesMSB, binary.BigEndian, mc.Chk.Data); err != nil {
❸
log.Fatal(err)
}
return crc32.ChecksumIEEE(bytesMSB.Bytes()) ❹
}
Listing 13-12: The createChunkCRC() method (/ch-13/imgInject/pnglib/commands.go)
Prior to arriving at the return statement, you declare a
bytes.Buffer ❶ and write both the TYPE ❷ and DATA ❸ bytes
into it. The byte slice from the buffer is then passed as an
argument to the ChecksumIEEE, and the CRC-32 checksum value
is returned as a uint32 data type. The return statement ❹ is doing
all the heavy lifting here, actually calculating the checksum on
the necessary bytes.
The marshalData() Method
All necessary pieces of a chunk are assigned to their respective
struct fields, which can now be marshaled into a bytes.Buffer.
This buffer will provide the raw bytes of the custom chunk
that are to be inserted into the new image file. Listing 13-13
shows what the marshalData() method looks like.
func (mc *MetaChunk) marshalData() *bytes.Buffer {
bytesMSB := new(bytes.Buffer) ❶
if err := binary.Write(bytesMSB, binary.BigEndian, mc.Chk.Size); err != nil {
❷
log.Fatal(err)
}
if err := binary.Write(bytesMSB, binary.BigEndian, mc.Chk.Type); err != nil {
❸
log.Fatal(err)
}
if err := binary.Write(bytesMSB, binary.BigEndian, mc.Chk.Data); err != nil {
❹
log.Fatal(err)
}
if err := binary.Write(bytesMSB, binary.BigEndian, mc.Chk.CRC); err != nil {
❺
log.Fatal(err)
}
return bytesMSB
}
Listing 13-13: The marshalData() method (/ch-13/imgInject/pnglib/commands.go)
The marshalData() method declares a bytes.Buffer ❶ and writes
the chunk information to it, including the size ❷, type ❸, data
❹, and checksum ❺. The method returns all the chunk
segment data into a single consolidated bytes.Buffer.
The WriteData() Function
Now all you have left to do is to write your new chunk
segment bytes into the offset of the original PNG image file.
Let’s have a peek at the WriteData() function, which exists in a
package we created named utils (Listing 13-14).
//WriteData writes new Chunk data to offset
func WriteData(r *bytes.Reader❶, c *models.CmdLineOpts❷, b []byte❸) {
❹ offset, _ := strconv.ParseInt(c.Offset, 10, 64)
❺ w, err := os.Create(c.Output)
if err != nil {
log.Fatal("Fatal: Problem writing to the output file!")
}
defer w.Close()
❻ r.Seek(0, 0)
❼ var buff = make([]byte, offset)
r.Read(buff)
❽ w.Write(buff)
❾ w.Write(b)
❿ _, err = io.Copy(w, r)
if err == nil {
fmt.Printf("Success: %s created\n", c.Output)
}
}
Listing 13-14: The WriteData() function (/ch-13/imgInject/utils/writer.go)
The WriteData() function consumes a bytes.Reader ❶ containing
the original image file byte data, a models.CmdLineOpts ❷ struct
inclusive of the command line argument values, and a byte slice
❸ holding the new chunk byte segment. The code block starts
with a string-to-int64 conversion ❹ in order to obtain the offset
value from the models.CmdLineOpts struct; this will help you write
your new chunk segment to a specific location without
corrupting other chunks. You then create a file handle ❺ so
that the newly modified PNG image can be written to disk.
You use the r.Seek(0,0) function call ❻ to rewind to the
absolute beginning of the bytes.Reader. Recall that the first 8
bytes are reserved for the PNG header, so it’s important that
the new output PNG image include these header bytes as well.
You include them by instantiating a byte slice with a length
determined by the offset value ❼. You then read that number of
bytes from the original image and write those same bytes to
your new image file ❽. You now have identical headers in
both the original and new images.
You then write the new chunk segment bytes ❾ into the
new image file. Finally, you append the remainder of the
bytes.Reader bytes ❿ (that is, the chunk segment bytes from your
original image) to the new image file. Recall that bytes.Reader
has advanced to the offset location, because of the earlier read
into a byte slice, which contains bytes from the offset to the
EOF. You’re left with a new image file. Your new file has
identical leading and trailing chunks as the original image, but
it also contains your payload, injected as a new ancillary
chunk.
To help visualize a working representation of what you
built so far, reference the overall working project code at
https://github.com/blackhat-go/bhg/tree/master/ch-
13/imgInject/. The imgInject program consumes command line
arguments containing values for the original PNG image file,
an offset location, an arbitrary data payload, the self-declared
arbitrary chunk type, and the output filename for your
modified PNG image file, as shown in Listing 13-15.
$ go run main.go -i images/battlecat.png -o newPNGfile --inject -offset \
0x85258 --payload 1234243525522552522452355525
Listing 13-15: Running the imgInject command line program
If everything went as planned, offset 0x85258 should now
contain a new rNDm chunk segment, as shown in Figure 13-4.
Figure 13-4: A payload injected as an ancillary chunk (such as rNDm)
Congratulations—you’ve just written your first
steganography program!
ENCODING AND DECODING IMAGE
BYTE DATA BY USING XOR
Just as there are many types of steganography, so are there
many techniques used to obfuscate data within a binary file.
Let’s continue to build the sample program from the previous
section. This time, you’ll include obfuscation to hide the true
intent of your payload.
Obfuscation can help conceal your payload from network-
monitoring devices and endpoint security solutions. If, for
example, you’re embedding raw shellcode used for spawning a
new Meterpreter shell or Cobalt Strike beacon, you want to
make sure it avoids detection. For this, you’ll use Exclusive
OR bitwise operations to encrypt and decrypt the data.
An Exclusive OR (XOR) is a conditional comparison
between two binary values that produces a Boolean true value
if and only if the two values are not the same, and a Boolean
false value otherwise. In other words, the statement is true if
either x or y are true—but not if both are true. You can see this
represented in Table 13-1, given that x and y are both binary
input values.
Table 13-1: XOR Truth Table
x y x ^ y output
0 1 True or 1
1 0 True or 1
0 0 False or 0
1 1 False or 0
You can use this logic to obfuscate data by comparing the
bits in the data to the bits of a secret key. When two values
match, you change the bit in the payload to 0, and when they
differ, you change it to 1. Let’s expand the code you created in
the previous section to include an encodeDecode() function, along
with XorEncode() and XorDecode() functions. We’ll insert these
functions into the utils package (Listing 13-16).
func encodeDecode(input []byte❶, key string❷) []byte {
❸ var bArr = make([]byte, len(input))
for i := 0; i < len(input); i++ {
❹ bArr[i] += input[i] ^ key[i%len(key)]
}
return bArr
}
Listing 13-16: The encodeDecode() function (/ch-13/imgInject/utils/encoders.go)
The encodeDecode() function consumes a byte slice containing
the payload ❶ and a secret key value ❷ as arguments. A new
byte slice, bArr ❸, is created within the function’s inner scope
and initialized to the input byte length value (the length of the
payload). Next, the function uses a conditional loop to iterate
over each index position of input byte array.
Within the inner conditional loop, each iteration XORs the
current index’s binary value with a binary value derived from
the modulo of the current index value and length of the secret
key ❹. This allows you to use a key that is shorter than your
payload. When the end of the key is reached, the modulo will
force the next iteration to use the first byte of the key. Each
XOR operation result is written to the new bArr byte slice, and
the function returns the resulting slice.
The functions in Listing 13-17 wrap the encodeDecode()
function to facilitate the encoding and decoding process.
// XorEncode returns encoded byte array
❶ func XorEncode(decode []byte, key string) []byte {
❷ return encodeDecode(decode, key)
}
// XorDecode returns decoded byte array
❶ func XorDecode(encode []byte, key string) []byte {
❷ return encodeDecode(encode, key)
}
Listing 13-17: The XorEncode() and XorDecode() functions (/ch-
13/imgInject/utils/encoders.go)
You define two functions, XorEncode() and XorDecode(), which
take the same literal arguments ❶ and return the same values
❷. That’s because you decode XOR-encoded data by using
the same process used to encode the data. However, you
define these functions separately, to provide clarity within the
program code.
To use these XOR functions in your existing program,
you’ll have to modify the ProcessImage() logic you created in
Listing 13-8. These updates will leverage the XorEncode()
function to encrypt the payload. The modifications, shown in
Listing 13-18, assume you’re using command line arguments
to pass values to conditional encode and decode logic.
// Encode Block
if (c.Offset != "") && c.Encode {
var m MetaChunk
❶ m.Chk.Data = utils.XorEncode([]byte(c.Payload), c.Key)
m.Chk.Type = chk.strToInt(c.Type)
m.Chk.Size = chk.createChunkSize()
m.Chk.CRC = chk.createChunkCRC()
bm := chk.marshalData()
bmb := bm.Bytes()
fmt.Printf("Payload Original: % X\n", []byte(c.Payload))
fmt.Printf("Payload Encode: % X\n", chk.Data)
utils.WriteData(b, c, bmb)
}
Listing 13-18: Updating ProcessImage() to include XOR encoding (/ch-
13/imgInject/pnglib/commands.go)
The function call to XorEncode() ❶ passes a byte slice
containing the payload and secret key, XORs the two values,
and returns a byte slice, which is assigned to chk.Data. The
remaining functionality remains unchanged and marshals the
new chunk segment to eventually be written to an image file.
The command line run of your program should produce a
result similar to the one in Listing 13-19.
$ go run main.go -i images/battlecat.png --inject --offset 0x85258 --encode \
--key gophers --payload 1234243525522552522452355525 --output
encodePNGfile
Valid PNG so let us continue!
❶ Payload Original: 31 32 33 34 32 34 33 35 32 35 35 32 32 35 35 32 35 32 32
34 35 32 33 35 35 35 32 35
❷ Payload Encode: 56 5D 43 5C 57 46 40 52 5D 45 5D 57 40 46 52 5D 45 5A 57
46
46 55 5C 45 5D 50 40 46
Success: encodePNGfile created
Listing 13-19: Running the imgInject program to XOR encode a data chunk block
The payload is written to a byte representation and displayed
to stdout as Payload Original ❶. The payload is then XORed with a
key value of gophers and displayed to stdout as Payload Encode ❷.
To decrypt your payload bytes, you use the decode
function, as in Listing 13-20.
//Decode Block
if (c.Offset != "") && c.Decode {
var m MetaChunk