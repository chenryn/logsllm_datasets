0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
y
c
a
r
u
c
c
A
n
o
i
t
c
e
t
e
D
2−gram
3−gram
5−gram
7−gram
11−gram
13−gram
1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
y
c
a
r
u
c
c
A
n
o
i
t
c
e
t
e
D
2−gram
3−gram
5−gram
7−gram
11−gram
13−gram
0
0
0.01
0.02
0.03
False−Positive Rate
0.04
0.05
0
0
0.01
0.02
0.03
False−Positive Rate
0.04
0.05
(a) Student server - Ascii Shellcode.
(b) Dept. server - Ascii Shellcode.
Figure 8. ROC (cid:173) ASCII encoded shellcode hide binary x86 instructions as printable characters and
can potentially frustrate statistical sensors. When small gram sizes are used, the sensors lock on
only to character distributions and not content. In the small FP range, gram size makes a noticeable
difference in discrimination ability.
Gram-Level
Train Time (Matlab)
Sensor Speed (C++) Model Size
2-Gram
3-Gram
5-Gram
7-Gram
15-Gram
50.3 s
35.5 s
54.8 s
69.4 s
89.8 s
17,094 req/s
12,195 req/s
7262 req/s
4721 req/s
1960 req/s
3.1 Mb
4.6 Mb
7.7 Mb
11 Mb
23 Mb
Request-reassembly
39,000 req/s
Table 4. Run(cid:173)times for SG-5 on a 3Ghz machine (off(cid:173)line tests). Training is done in MATLAB and the
ﬁnal sensor is implemented in C++. Training time will depend on data and convergence rate. 15, 927
samples were used and an average of ﬁve trials is reported. Packet(cid:173)reassembly is done using the
tcpflow library.
large gram sizes without under-ﬁtting highlights the beneﬁt
of the proposed Markov-chain factorization. In practice, the
appropriate gram and mixture size will depend on the type
of data observed by the monitored server. More dynamic
content would require larger mixture sizes while more com-
plex structure/input would require larger gram sizes. The
optimal settings for these parameters should be recovered
through cross-validation. Methods and tools to automate
the cross-validation process are being developed and will
be made available. The threshold setting can be automati-
cally adjusted based on the false positive rate on the training
data e.g. ﬁnding the threshold that yields 0.0011% FP.
Training: Spectrogram is a supervised learning sen-
sor.
In our experiments, we monitored remote hosts and
manually labeled legitimate requests. With judicious use
of the unix commands: tr, grep, sort, uniq and
manual examination, we were able to generate a clean
dataset of unique requests from over 6 Million samples
within a couple of hours. More optimal ways to generate la-
beled data is under investigation. Since only unique samples
of legitimate requests are needed, one possibilility is for
the script writers to generate samples of legitimate requests,
which they would already do when testing their code. We
also refer the reader to the work by Cretu et al. [6] on au-
tomated data-sanitization and labeling. Spectrogram’s
model does not admit online/continuous training. How-
ever, as we have shown, training using over 15,000 samples
requires only a few minutes. Automated nightly or even
hourly re-training is not unreasonable to deal with script
updates. False positives identiﬁed within the logs can be
reinserted into the training set so they are recognized in the
future. Individual models can also be trained at different
intervals based on the update-frequency of different hosts.
Since Spectrogram outputs a normality score for each
request, it is possible to rank alerts to generate short-lists
for human analysis.
Scalability and Forensics: Two main issues concerning
scalability are speed and model-capacity. With regard to the
former, our results demonstrate that the sensor can perform
at sufﬁcient speeds to keep up with thousands of requests
per second but it is also possible to deploy several sensors
on the network in parallel to monitor different subnets or
even individual hosts, as would be the case when protect-
ing large data-centers. Since the sensors are driven by the
content of the legitimate data, there is no need to keep in-
dividual sensors consistent with each other if the content
does not overlap. Further improvement in speed is also pos-
sible if implemented on-host, without packet-reassembly.
Regarding model-capacity, using larger settings for M and
N during training automatically increases the level of de-
tails with which Spectrogram models the content. This
feature addresses highly dynamic content within a speciﬁc
service. In our experiments using two independent sensors
was sufﬁcient for all of our department websites. In prac-
tice, if the content stream being modeled is highly dynamic,
improved data-normalization procedures can also be intro-
duced to add stability to the model. One potential approach
is to incorporate some domain knowledge to ﬁlter the con-
tent into symbol streams and have Spectrogram model
operate over these transitions instead.
White-listing: Spectrogram is protocol-aware and
script-aware and contains a white-listing feature based on
the script names and request types. This allows false posi-
tive reduction by white-listing scripts with highly dynamic
input e.g. POST with binary content.
Evasion tactics: Spectrogram is designed to resist
common evasion tactics. Network-layer sensors and cer-
tain ﬁrewall conﬁgurations can be bypassed by fragmen-
tation attacks; Spectrogram dynamically re-assembles
requests to reconstruct the attack, to see what the target
script sees. Polymorphism frustrate signature based sen-
sors; Spectrogram utilizes anomaly detection and never
trains using malicious content therefore polymorphism has
little effect. Some counting-features based statistical AD
sensors can have their scoring skewed by attacks crafted to
appear like normal requests; Spectrogram uses higher
order statistics in addition to length. If an attacker were to
craft a blending attack to evade this sensor, he would need
to insert content and structure that is statistically consistent
with normal requests at the n-gram level, while remain-
ing within the acceptable input length, at which point he
would be sending a legitimate request. However, if the pro-
tected scripts legitimately reads data from foreign sources,
with only destination addresses exposed, additional data-
sanitization must exist.
6 Conclusions
As the web-exploit threat continues to expand and sig-
nature based approaches wane in their usefulness, statis-
tics based IDS solutions which offer more natural resis-
tance against these threats deserve further investigation.
Spectrogram represents another step in this direction,
offering some improvements over previous sensors by de-
signing a model speciﬁc for web-layer inputs, as well as
an architecture that offers the ﬂexibility needed in a usable
NIDS solution, in terms of speed and deployment require-
ments. This paper studied the AD problem in the context
of n-gram modeling, discussed the ill-posed nature of the
problem and derived a relaxation of the task into a more
tractable linear form through the use of Markov-chains. Our
experiments highlight the beneﬁcial effect of these changes.
A parameter estimation technique to train this model is
offered. Spectrogram has two adjustable parameters: the
mixture-size and the gram-size and the optimal settings for
both can be found by cross-validation to obtain the desired
trade-off between speed and accuracy.
Acknowledgments
This research was sponsored by the NSF through grants
CNS-07- 14647 and CNS-04-26623, and by ONR through
grant No. N00014-07-1-0907. We authorize the U.S. Gov-
ernment to reproduce and distribute reprints for Govern-
mental purposes notwithstanding any copyright notation
thereon. Any opinions, ﬁndings, and conclusions or rec-
ommendations expressed in this material are those of the
authors and do not necessarily reﬂect the views of the NSF
or the U.S. Government.
References
[1] K. G. Anagnostakis, S. Sidiroglou, P. Akritidis, K. Xinidis,
E. Markatos, and A. D. Keromytis”. Detecting Targeted
Attacks Using Shadow Honeypots. In ”Proceedings of the
14th USENIX Security Symposium.”, ”August”.
[2] P. Biondi”. Shellforge Project, ”2006”.
[3] D. Brumley, J. Newsome, D. Song, H. Wang, and S. Jha”.
Towards Automatic Generation of Vulnerability-Based Sig-
natures. In ”Proceedings of the IEEE Symposium on Secu-
rity and Privacy”.
[4] M. Costa, J. Crowcroft, M. Castro, and A. Rowstron”. Vigi-
lante: End-to-End Containment of Internet Worms. In ”Pro-
ceedings of the Symposium on Systems and Operating Sys-
tems Principles (SOSP)”, October.
[5] J. R. Crandall, Z. Su, S. F. Wu, and F. T. Chong”. On Deriv-
ing Unknown Vulnerabilities from Zero-Day Polymorphic
and Metamorphic Worm Exploits. In ”Proceedings of the
12th ACM Conference on Computer and Communications
Security (CCS)”, ”November”.
[22] J. Newsome, B. Karp, and D. Song”. Polygraph: Automat-
ically Generating Signatures for Polymorphic Worms.
In
”Proceedings of the IEEE Symposium on Security and Pri-
vacy”, ”May”.
[23] J. Newsome and D. Song. Dynamic Taint Analysis for Au-
tomatic Detection, Analysis, and Signature Generation of
Exploits on Commodity Software. In ”Proceedings of the
12th Symposium on Network and Distributed System Secu-
rity (NDSS)”, February 2005.
[24] Panda Labs. MPack Uncovered, ”2007”.
[25] C. Reis, J. Dunagan, H. J. Wang, O. Dubrovsky, and S. Es-
meir. Browsershield: Vulnerability-driven ﬁltering of dy-
namic html.
In Proceedings of Symposium on Operating
Systems Design and Implementation (OSDI), 2006.
[26] SANS. SANS Top 20. http://www.sans.org/top20/.
revisited,
[27] S. Siddharth.
Evading NIDS,
2005.
http://www.securityfocus.com/infocus/1852.
[28] S. Singh, C. Estan, G. Varghese, and S. Savage”. Automated
In ”Proceedings of Symposium on
Worm Fingerprinting.
Operating Systems Design and Implementation (OSDI)”.
[29] Snort Development Team. Snort Project.
[30] Y. Song, M. E. Locasto, A. Stavrou, A. D. Keromytis, and
S. J. Stolfo. On the Infeasibility of Modeling Polymor-
phic Shellcode.
In ”Proceedings of the ACM Conference
on Computer and Communications Security (CCS)”.
[31] Sophos. Security threat report. Technical report, Sophos,
https://secure.sophos.com/security/whitepapers/sophos-
security-report-2008, 7 2008.
[32] T. Toth and C. Kruegel”. Accurate Buffer Overﬂow Detec-
tion via Abstract Payload Execution. In ”Proceedings of the
5th International Symposium on Recent Advances in Intru-
sion Detection (RAID)”, pages 274–291, ”October”.
[33] H. J. Wang, C. Guo, D. R. Simon, and A. Zugenmaier.
Shield: Vulnerability-Driven Network Filters for Preventing
Known Vulnerability Exploits. In Proceedings of the ACM
SIGCOMM Conference, pages 193–204, August 2004.
[34] K. Wang, G. Cretu, and S. J. Stolfo”. Anomalous Payload-
based Worm Detection and Signature Generation. In ”Pro-
ceedings of the 8th International Symposium on Recent
Advances in Intrusion Detection (RAID)”, pages 227–246,
”September”.
[35] J. Xu, P. Ning, C. Kil, Y. Zhai, and C. Bookholt”. Automatic
Diagnosis and Response to Memory Corruption Vulnerabil-
ities. In ”Proceedings of the 12th ACM Conference on Com-
puter and Communications Security (CCS)”, ”November”.
[36] V. Yegneswaran, J. T. Gifﬁn, P. Barford, and S. Jha”. An
Architecture for Generating Semantics-Aware Signatures. In
”Proceedings of the 14th USENIX Security Symposium”.
[6] G. F. Cretu, A. Stavrou, M. E. Locasto, S. J. Stolfo, and
A. D. Keromytis. Casting out demons: Sanitizing training
data for anomaly detection. In Proceedings of the IEEE Sym-
posium on Security and Privacy (S&P), May 2008.
[7] W. Cui, M. Peinado, H. J. Wang, and M. E. Locasto”. Shield-
Gen: Automated Data Patch Generation for Unknown Vul-
nerabilities with Informed Probing. In ”Proceedings of the
IEEE Symposium on Security and Privacy”, ”May”.
[8] A. Dempster, N. Laird, and D. Rubin. Maximum likelihood
from incomplete data via the em algorithm. Journal of the
Royal Statistical Society, pages 1–38, 1977.
[9] J. Elson.
tcpﬂow – A TCP Flow Recorder, 2003.
http://www.circlemud.org/ jelson/software/tcpﬂow/.
[10] M. V. Gundy, D. Balzarotti, and G. Vigna. Catch Me, If You
Can: Evading Network Signatures with Web-based Poly-
morphic Worms. In Proceedings of the First USENIX Work-
shop on Offesive Technologies (WOOT), August 2007.
[11] A. Joshi, S. T. King, G. W. Dunlap, and P. M. Chen”. De-
tecting Past and Present Intrusions through Vulnerability-
Speciﬁc Predicates. In ”Proceedings of the Symposium on
Systems and Operating Systems Principles (SOSP)”, Octo-
ber.
[12] S. J. S. Ke Wang, Janak J. Parekh. Anagram: A Content
Anomaly Detector Resistant To Mimicry Attack. In ”Pro-
ceedings of the 9th International Symposium on Recent Ad-
vances in Intrusion Detection (RAID)”.
[13] H.-A. Kim and B. Karp”. Autograph: Toward Automated,
Distributed Worm Signature Detection. In ”Proceedings of
the USENIX Security Conference”.
[14] O. Kolesnikov and W. Lee. Advanced polymorphic worms:
Evading ids by blending in with normal trafﬁc. In Proceed-
ings of the USENIX Security Symposium, 2006.
[15] C. Kruegel and G. Vigna. Anomaly Detection of Web-Based
In Proceedings of the 10th ACM Conference on
Attacks.
Computer and Communications Security (CCS).
[16] C. Kruegel, G. Vigna, and W. Robertson. A Mult-Model
Approach to the Detection of Web-based Attacks. computer
Networks, ”48”, 2005.
[17] C. Krugel, E. Kirda, D. Mutz, W. Robertson, and G. Vi-
gna”. Polymorphic Worm Detection Using Structural Infor-
mation of Executables. In ”Proceedings of the 8th Interna-
tional Symposium on Recent Advances in Intrusion Detec-
tion (RAID)”, pages 207–226, ”September”.
[18] Z. Liang and R. Sekar”. Fast and Automated Generation
of Attack Signatures: A Basis for Building Self-Protecting
Servers. In ”Proceedings of the 12th ACM Conference on
Computer and Communications Security (CCS)”, ”Novem-
ber”.
[19] B. Livshits and W. Cui. Spectator: Detection and contain-
ment of javascript worms. In ”Proceedings of the USENIX
Annual Technical Conference”, June 2008.
[20] M. E. Locasto, K. Wang, A. D. Keromytis, and S. J. Stolfo”.
FLIPS: Hybrid Adaptive Intrusion Prevention.
In ”Pro-
ceedings of the 8th International Symposium on Recent
Advances in Intrusion Detection (RAID)”, pages 82–101,
”September”.
[21] Metasploit Developement Team.
Metasploit Project,
”2006”.