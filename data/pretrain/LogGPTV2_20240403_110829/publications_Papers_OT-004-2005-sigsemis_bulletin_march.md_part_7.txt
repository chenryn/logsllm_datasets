AIS SIGSEMIS Bulletin 2(1) January-March 2005
scholars of similar interests.
20. Miltiadis: Dear President, thank you for your time. It was an excellent talk. Any parting thoughts you would like
to share with our readers?
President Watson: Thanks for creating this opportunity to share my thoughts on some
important issues with your readers. It is always a privilege to have someone else want to read
what you think.
Short Bio
Richard Watson is the J. Rex Fuqua Distinguished Chair for Internet Strategy and Director of the Center for
Information Systems Leadership in the Terry College of Business, the University of Georgia. He has published in leading
journals in several fields as well as authored books on data management and electronic commerce. His current research
focuses primarily on electronic commerce and IS leadership. He has given invited seminars in more than 20 countries for
companies and universities. He is President of AIS, a visiting professor at Agder University College, Norway, Fudan
University, China, and a consulting editor to John Wiley & Sons. He has been a co-chair of ICIS and a senior editor for
MIS Quarterly.
40
AIS SIGSEMIS Bulletin 2(1) January-March 2005
RESEARCH PAPERS IN THIS ISSUE
TABLE OF CONTENTS
Bernstein A., Kaufmann E. and Fuchs N. *, Talking to the Semantic Web –A Controlled English Query Interface for
Ontologies
* Department of Informatics, University of Zurich, Switzerland
Sengupta A. *, Kim H. **, SWAP - A Framework for Ontology Support in Semantic Web Applications
* Indiana University, Kelley School of Business, USA
** York University, Schulich School of Business, Canada
41
AIS SIGSEMIS Bulletin 2(1) January-March 2005
Talking to the Semantic Web –
A Controlled English Query Interface for Ontologies
Abraham Bernstein, Esther Kaufmann, Norbert E. Fuchs
Department of Informatics
University of Zurich, Switzerland
PI:EMAIL, PI:EMAIL, PI:EMAIL
Abstract
The semantic web presents the vision of a distributed, dynamically growing knowledge base founded on
formal logic. Common users, however, seem to have problems even with the simplest Boolean expression. As
queries from web search engines show, the great majority of users simply do not use Boolean expressions. So
how can we help users to query a web of logic that they do not seem to understand?
We address this problem by presenting a natural language front-end to semantic web querying. The front-end
allows formulating queries in Attempto Controlled English (ACE), a subset of natural English. Each ACE
query is translated into a discourse representation structure – a variant of the language of first-order logic –
that is then translated into the semantic web querying language PQL. As examples show, our approach offers
great potential for bridging the gap between the semantic web and its real-world users, since it allows users to
query the semantic web without having to learn an unfamiliar formal language.
1. Introduction
The semantic web presents the vision of a dynamically growing knowledge base that should allow users to
draw on and combine distributed information sources specified in languages based on formal logic. Common
users, however, were shown to have problems even with the simplest Boolean expressions. Experience in
information retrieval, for example, demonstrates that users are better at understanding graphical query
interfaces than simple Boolean queries [Spoerri 1993]. As queries from web search engines reveal, the great
majority of users simply do not use Boolean expressions. So how can we bridge the gap between the logic-based
semantic web and real-world users, who are at least ill at ease and, oftentimes, unable to use formal logic concepts?
We address this problem by presenting a natural language front-end to the semantic web. In its current form the
front-end provides users with a controlled natural language interface to formulate queries. The controlled
natural language used, Attempto Controlled English (ACE) [Fuchs et al. 2003; Fuchs et al. 2004], is an
unambiguous subset of English, which is translated automatically [Bonin 2004] into the semantic web query
language PQL [Klein et al. 2004] providing users with an almost natural language interface to the semantic
web. As experience with controlled languages has shown, they are much easier to learn by end-users than
formal languages like logic. We, therefore, believe that the approach presented here has great potential in
bridging the gap between the semantic web and its end-users and becoming a major enabler for the growth of
the semantic web.
APE
Query in
Query (Attempt Query Rewriting Query Query
Sem Web
in ACE o Parsing in DRS Framework Engine Response
QL (PQL)
Engine)
Prolog Prolog Java
Figure 1: Overall data flow of the controlled English query front-end
The rest of this paper closely follows the data flow of the query front-end (Figure 1). Section 2 introduces
Attempto Controlled English (ACE) and the Attempto Parsing Engine (APE). APE translates ACE texts into a
discourse representation structure (DRS), a variant of the language of first-order logic introduced by Kamp
and collaborators [Kamp et al. 1993]. Section 3 introduces the rewriting framework that translates the DRS to
42
AIS SIGSEMIS Bulletin 2(1) January-March 2005
the semantic web query language PQL. PQL queries are evaluated by a standard query engine that we do not
discuss in this paper. In section 4 we provide a first assessment of the approach posing some real-world
queries to the knowledge base. We close with a discussion of the current limitations as well as related and
future work.
2. Attempto Controlled English as a Query Language
Our query front-end automatically processes queries expressed in Attempto Controlled English (ACE), a
controlled natural language originally designed for requirements specifications and knowledge representation
[Fuchs et al. 2003; Fuchs et al. 2004]. ACE is a subset of English meaning that each ACE sentence is correct
English, but not vice-versa. ACE's grammar is specified by a small set of construction and interpretation rules.
The construction rules allow users to build simple sentences (e.g. "John sells books."), composite sentences (e.g.
"If John sells books and John's business does not fail then he is content."), and queries (e.g. "Which books does
John sell?"). The interpretation rules eliminate syntactic and semantic ambiguities, for which natural languages
are highly notorious, hereby also reducing the computational complexity of processing ACE sentences. As
such, ACE avoids the major disadvantages of full natural language processing, while maintaining the ease of
use for end-users and allowing the translation of all ACE sentences to first-order logic.
Though ACE appears completely natural, it is in fact a formal language and its small set of construction and
interpretation rules must be learned. As an example, consider the sentence "A man sees a girl with a
telescope." In full English this sentence is ambiguous since the prepositional phrase "with a telescope" can
either modify the verb phrase "sees", leading to the interpretation that the man has the telescope, or the noun
phrase "a girl", meaning that the girl has the telescope. In ACE, however, the sentence is unambiguous since
an interpretation rule limits the meaning to the first alternative "sees with a telescope". To express the second
alternative "a girl with a telescope" one could, for instance, write "A man sees a girl that has a telescope."
making use of another – complementary – interpretation rule. Thus ACE's interpretation rules eliminate
ambiguity without reducing expressability.
DRS First-order Logic
A B
customer(A)
∃ A B : customer(A) ∧ book(B) ∧ buy(A, B)
book(B)
buy(A, B)
Figure 2: DRS and first-order logic representation of “A customer buys a book.”
The Attempto Parsing Engine (APE) – implemented in Prolog as a Definite Clause Grammar – translates a –
possibly multisentential – ACE text into a discourse representation structure (DRS) that logically represents
the information of the text [Kamp et al. 1993]. DRSs are a powerful means to adequately capture linguistic
phenomena, for instance anaphoric references. A DRS consists of discourse referents, i.e. quantified variables
representing the objects of a discourse, and of conditions for the discourse referents. The conditions can be
logical atoms or complex conditions built from other DRSs and logical connectors (negation, disjunction, and
implication). As an example, the translation of the sentence "A customer buys a book." is shown in its typical
box-styled DRS representation in Figure 2 on the left. The two discourse referents, A and B, are shown at the
top and the three conditions derived from the sentence are listed below. Figure 2 shows on the right the first-
order formula equivalent to the DRS. 1
3. From DRS to the Semantic Web Query Language PQL
As the next step, the rewriting framework (an extension of [Bonin 2004]) translates the DRS produced by APE
into the semantic web query language PQL, which is then used to query an ontology. As an exemplary
ontology we chose the MIT Process Handbook [Malone et al. 1999] that describes organizational processes. The
Process Handbook treats a real-world domain that everybody can relate to, has a large number of instances
(>5000), and has been used in a number of semantic web projects. Each process (object) of the ontology enters
a variety of relationships to attributes, sub-processes, exceptions, etc. and has a detailed textual description.
The process query language (PQL) presented in [Klein et al. 2004] allows to pose queries which are then evalu-
1 To emphasize the principle of the translation we radically simplified the DRS. As will be seen later, real DRSs
are more complex to adequately represent a wide range of linguistic phenomena.
43
AIS SIGSEMIS Bulletin 2(1) January-March 2005
ated against the process ontology. PQL essentially allows the composition of process fragments that result in a
query-by-example style specification of the sought after processes. PQL’s two major statement types are
ATTRIBUTE and RELATION. ATTRIBUTE statements query literal properties of objects in the ontology,
whereas RELATION statements match properties of objects whose range are again objects (for an example see
Figure 3). As such, any PQL query can be mapped to a standardized RDF-QL statement. Consequently, none
of our findings are limited to the Process Handbook and PQL. They apply analogously to other semantic web
query languages such as, for instance, SquishQL [Miller et al. 2002].
Full-text and Keywords PQL
"Find all processes that sell books
(ATTRIBUTE “Name” OF ?process INCLUDES "sell") ∧
over the internet."
(ATTRIBUTE “Name” OF ?process INCLUDES "book") ∧
(RELATION ?process USES-MECHANISM ?mechanism) ∧
Keywords:
(ATTRIBUTE “Name” OF ?mechanism INCLUDES "internet")
“sell book internet”
Figure 3: An example full-text query with its corresponding keywords and derived PQL query
In order to translate the DRS generated by APE into PQL queries, we developed rewriting rules for the typical
DRS structures. Each structure is first matched against a set of ontology-model specific keyword rules that – when
they apply – result in a constraint between objects, i.e. a RELATION statement. If none of these rules applies,
then a set of general-vocabulary rules is tried, typically resulting in the comparison with a literal value, i.e. an
ATTRIBUTE statement.
The ontology-model specific keyword rules apply if one of the keywords of the ontology – including its
morphological or syntactic variants – appears in the DRS to be translated. For example, the expression "has a
specialization" in the query "Which process has a specialization?" is identified as the ontology-model
relationship HAS-SPECIALIZATION and, hence, translated into the following PQL statement:
RELATION ?process HAS-SPECIALIZATION ?specialization
A limitation of this approach is the choice of the vocabulary when building the ontology. In some cases we,
therefore, had to include synonyms of the ontology-keywords in the rewriting rules.
Elements of the DRS not handled by the ontology-model specific keyword rules are passed to the general-
vocabulary rules. Simple sentence structures, i.e., sentence structures not containing relative sentences, adverbs,
or prepositional phrases, can now be interpreted as simple literal values. For example, the verb "sell" in a
query like "How does somebody sell consumer electronics?" is represented in the DRS as
"predicate(D,event,sell,A,C)". It is treated as a literal value and translated into:
ATTRIBUTE "Name" OF ?process INCLUDES "sell"
Complex structures initiate a search in the ontology-model for corresponding relationships. As an example,
consider the query "How does somebody sell consumer electronics over the internet?" Here, the prepositional
phrase "over the internet" indicates that a good is sold using the internet as an instrument, which is noted in
the sentence’s DRS (see also Example 2). As instruments, or rather their synonym "mechanisms", are included
in the Process Handbook ontology-model as the USES-MECHANISM relationship or property, we can
translate the phrase "over the internet" into the following PQL statement:
RELATION ?process USES-MECHANISM ?mechanism
ATTRIBUTE "Name" OF ?mechanism INCLUDES "internet"
If the search in the ontology-model results in no corresponding relationships, then the structure is reduced to a
simple structure by treating the modifiers as literals resulting in an ATTRIBUTE statement.
A full discussion of all rewrite rules is beyond the space limitations of this paper. Even so, we will try to
convey the extent of the rules discussing three realistic query examples. For each example we show the ACE
query, its DRS generated by APE, and the resulting PQL query. Example 1 shows the application of the simple
general-vocabulary rules. Here the lexical elements "consumer", "electronics", and "sell" are treated as literal
44
AIS SIGSEMIS Bulletin 2(1) January-March 2005
values. Note that the rewriting framework splits the compound "consumer electronics" into its constituents to
improve recall. Example 2 illustrates the combination of simple and complex structures treated by the general-
vocabulary rules. Finally, Example 3 uses a combination of ontology-model specific keyword rules and both
types of general-vocabulary rules. Here "Which sales process…" results in the first two statements of the PQL
query, which can be interpreted as "Find all processes which are sales processes and which have a subtask
that…" Note that the straightforward ontology-based translation of ACE queries to PQL queries allows the
user to directly grasp the system-inherent logic rather then having the system "guess" the user’s intention
based on some heuristics.
ACE DRS PQL
A B C D
structure(A, dom)
How does object(C, consumer_electronic, object)
(ATTRIBUTE “Name” OF ?process INCLUDES “sell”) ∧
somebody sell structure(C, atomic)
(ATTRIBUTE “Name” OF ?process INCLUDES “consumer”) ∧
consumer quantity(C, cardinality, count_unit, B, eq, 1)
(ATTRIBUTE “Name” OF ?process INCLUDES “electronic”)
electronics? predicate(D, event, sell, A, C)
modifier(D, manner, none, how)
query(D, how)
Example 1: Transformation of "How does somebody sell consumer electronics?"
ACE DRS PQL
A B C D
How does structure(A, dom)
(ATTRIBUTE “Name” OF ?process INCLUDES "sell") ∧
somebody sell object(B, consumer_electronic, object)
(ATTRIBUTE “Name” OF ?process INCLUDES "consumer") ∧
consumer predicate(C, event, sell, A, B)
(ATTRIBUTE “Name” OF ?process INCLUDES "electronic") ∧
electronics object(D, internet, object)
(RELATION ?process USES-MECHANISM ?mechanism) ∧
over the modifier(C, instrument, over, D)
(ATTRIBUTE “Name” OF ?mechanism INCLUDES "internet")
internet? modifier(C, manner, none, how)
query(C, how)
Example 2: Transformation of "How does somebody sell consumer electronics over the internet?" 2
ACE DRS PQL
A B C D
Which sales (ATTRIBUTE “Name” OF ?process INCLUDES “sale”) ∧
query(A, which)
process (RELATION ?process HAS-PART ?part) ∧
object(A, sales_process, object)
informs its (ATTRIBUTE “Name” OF ?part INCLUDES “inform”) ∧
object(B, customer, person)
customers (ATTRIBUTE “Name” OF ?part INCLUDES “customer”) ∧
predicate(C, event, inform, A, B)
over the (RELATION ?part USES-MECHANISM ?mechanism) ∧
object(D, internet, object)
internet? (ATTRIBUTE “Name” OF ?mechanism INCLUDES “internet”)
modifier(C, instrument, over, D)
Example 3: Transformation of "Which sales process informs its customers over the internet?"
4. Validation – Query Performance of a Non-trivial Example
For the implementation of the validation prototype we combined Prolog and Java components, as APE and
the rewriting framework are programmed in SICStus Prolog, and the user interface and the query engine are
programmed in Java (see Figure 1). Currently, ACE queries are entered into the user interface and then passed
to APE using the "Jasper" Java-to-Prolog bridge. The resulting DRSs are forwarded to the rewriting framework
that generates the PQL queries. These are then evaluated by the query engine that passes the result back to the
user interface.
Using the prototype we executed a number of real-world queries – including all examples in this paper – and
compared its retrieval performance with two keyword-based retrieval approaches: one using a TFIDF-style
ranking [Salton et al. 1983], the other one searching for the conjunction of keywords. Both of those approaches
have a proven track record of being suitable for end-users. We then hand-coded the database to find the
correct results for the natural language queries.
ACE DRS PQL
Which sales process A B C D E F G H
2 Unprocessed DRS conditions such as structure and quantity are omitted in all further DRSs to improve readability.
45
AIS SIGSEMIS Bulletin 2(1) January-March 2005
informs its query(A, which) (ATTRIBUTE “Name” OF ?process INCLUDES “sale”) ∧