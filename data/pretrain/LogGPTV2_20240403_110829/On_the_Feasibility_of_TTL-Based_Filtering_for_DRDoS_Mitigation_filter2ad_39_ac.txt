not behind a NAT or the corresponding port is forwarded, or there could be a
chance that a public-facing administrative interface is being exposed for service
needs [2]. Therefore, it is plausible that such routers may respond to HTTPS
requests, explaining the high number of our oﬀ-by-one measurements.
Next to probing of the target system itself, we can probe neighboring hosts.
More speciﬁcally, we probe direct neighbors (IP ±1) and additionally rely on
previous measurements aimed towards other hosts within the same /24 network.
In doing so, we ﬁnd that both types of probing increase the coverage. In our
experiment, we found that directly probing neighbors increases the number of
measurable TTLs by 69,399, resulting in a total coverage of 73.4 %. Taking into
account all information from hosts within the same /24 network increases the
coverage more drastically (by 168,730 hosts), yielding TTL values for 91.6 % of
all hosts. At the same time, the accuracy remains similar, with 27 % of the probed
values matching the ground truth. For ±1, we can correctly measure the TTL in
88.9 % of the cases, and 94.3 % of all measurements are within a threshold of ±2.
Given these results for coverage and accuracy, we note that combining diﬀerent
types of probing towards a single host with horizontal probing of the system’s
neighbors allows us measure the TTL within a threshold of ± 2 for 86.4 % of all
connecting hosts.
4.2 Spoofed Traﬃc
Next to the benign data set, for which we can measure the TTL within a small
threshold for the majority of the hosts correctly, we wanted to investigate how
well HCF would be suited for spoofed traﬃc. To that end, we set up a honeypot
running a vulnerable version of NTP server prone to becoming an ampliﬁer for
DRDoS attacks. To avoid unnecessarily harming the spoofed targets while still
pretending to be attractive to adversaries, the outgoing bandwidth was limited,
i.e., we answered to at most two monlist requests per host per minute. We did
not announce the IP address of this machine in any manner and hence assume
that no legitimate traﬃc would be directed to the host. Instead, incoming NTP
On the Feasibility of TTL-Based Filtering for DRDoS Mitigation
313
Fig. 2. Deviation diﬀerence between spoofed and non-spoofed traﬃc
requests are either due to scanning, or spoofed packets sent by an attacker. In
a time-period of 96 h, we recorded 5,616 distinct alleged sender addresses, for
which we could gather direct probe results in 3,983 cases (70.9 %). This slightly
higher coverage (compared to the benign data) can be explained by the fact that
most attacks are targeting servers, which also are more likely to expose services
we actively probe for.
Before conducting any of our measurements, one property of the spoofed
traﬃc became apparent: more than 99 % of all incoming packets had an assumed
initial TTL of 255. This speciﬁc feature, however, should not be used solely to
detect spoofed traﬃc, since the initial TTL can be changed without much eﬀort
by the attacker. Therefore, we normalized the TTL value as outlined before.
Figure 2 shows the comparison between the measured TTL values and the
TTL values extracted from incoming packets, for both benign and spoofed data
sets. While we can clearly observe that for the majority of benign clients, the
TTL can be guessed within a threshold of ±2, we note that no such trend is
visible for spoofed traﬃc.
4.3 Implications
In this section, we outlined the results of our experiments on benign and spoofed
data sets to evaluate a feasible margin of error for HCF. With respect to those
data sets, we ﬁnd that distinguishing between benign and spoofed traﬃc appears
to yield useful results when using a threshold of 2. The reasons for the impre-
cision of the measurements are manifold, e.g., when a client is behind a NAT
or incoming traﬃc to the machine is ﬁltered by a ﬁrewall. Therefore, a TTL-
based defense mechanism must make a trade-oﬀ between false positives and
false negatives, respectively. Based on the data sets we analyzed, if a TTL-based
defense mechanism was to be deployed to protect a service against becoming an
314
M. Backes et al.
unwilling actor in an attack, over 85 % of the benign traﬃc could pass, while
more than 3/4 of spoofed packets could be dropped, thus avoiding to harm the
targets.
Depending on the type of attacked hosts, this distinction might be even easier
to make. Nevertheless, any TTL-based defense relies on one tacit assumption:
an attacker can not learn the correct TTL value for an arbitrary victim and
an ampliﬁer of his choosing. Therefore, in the following section, we discuss the
feasibility of a method in which the attacker can learn the TTL value (within a
given threshold).
5 Methodology for Estimating Hop Count Value
So far we showed that deploying a TTL-based ﬁltering at the server side would
require some tolerance interval to be functional and avoid collateral damage by
incorrectly classifying legitimate traﬃc. In this section, we assess if an attacker
can actually bypass the ﬁltering by predicting the correct hop count value
between the hosts and properly adjusting the TTL value. That is, we present a
methodology for estimating the hop count value between ampliﬁers and victims.
5.1 Key Idea and Attacker Model
Our key idea lies on the observation that paths between arbitrary locations
to a selected destination share (small) segments of the path. We leverage the
fact that such path information can be learned by an attacker to estimate the
number of hops of a packet sent from one location to another. To learn subpaths,
we (i) probabilistically model known paths obtained via traceroutes, and (ii)
combine this knowledge with BGP routing information. Figure 3 shows our idea
for estimating the distance (number of hops) between an ampliﬁer (M) and a
victim (V). For our methodology, we use the common approach for representing
the Internet, which is a graph where nodes are the autonomous systems and
edges are the peerings (routing links) between them. Additionally, we assign
weights to the nodes to denote the hop count number within the individual
AS. One way to build such a graph that illustrates the AS-level topology of the
Internet is to use available BGP data to discover the connectivity information for
the ASes. Nevertheless, studies have shown that BGP data is only available to a
limited extent, therefore the Internet AS-level topology is partially hidden [9,16].
However, our methodology does not primarily rely on the available BGP data,
but rather on the traceroute information an attacker can obtain. We use the
BGP data, when available, as a complement to the traceroute data in order to
discover the missing ASes, and to subsequently calculate the number of hops.
Our attacker (A) aims at evading any TTL-based ﬁlter or, at least, reduce its
eﬀectiveness in mitigating ampliﬁcation attacks. His main goal is to predict the
TTL value as close as possible to the correct one, such that he can craft requests
which are deemed to be legitimate to the server, i.e., ampliﬁer. In theory, there
are few approaches that the attacker may follow to learn the correct TTL value.
On the Feasibility of TTL-Based Filtering for DRDoS Mitigation
315
Fig. 3. Approach to estimate the hops between ampliﬁer (M) and victim (V)
First, he may learn the TTL value by actively or passively monitoring traﬃc
anywhere on the route, and then probe the destination in order to calculate
the remaining part of the route. This approach is neither realistic nor practical
because the attacker has to be present at every route Ri between Mi and the
victim V . Second, if the attacker can position a probe either in the network of
M or V, he can easily measure the TTL value by tracerouting to the other host.
For a more realistic scenario, we restrict the attacker’s capabilities. Figure 3
illustrates this attacker model. Similar to the reverse traceroute method [11],
our attacker is capable of probing from random, distributed locations and can
use any publicly available online resources to traceroute to the ampliﬁer and to
the victim (e.g., RIPE Atlas [3] or looking glass servers). However, he does not
have control over the ampliﬁer and not necessarily full control over the probes.
We restrict neither the location of the ampliﬁers nor the victims, i.e., they
can be located at arbitrary network locations. We assume that A can obtain a
set of ampliﬁers (e.g., NTP, DNS), all of which deploy TTL-based ﬁltering and
respond to valid requests only1.
5.2 Methodology
We propose a methodology for estimating the distance between hosts on the
internet through an Exploratory Data Analysis (EDA)2. Our methodology is
comprised of three main components, namely, data collection, data processing,
and EDA. Figure 4 illustrates the methodology we propose in this paper.
1 We assume that the ampliﬁers have deployed HCF to protect against ampliﬁcation
attacks, therefore “valid” protocol requests are those with matching TTL value.
2 Exploratory Data Analysis is not a method or a technique, but rather a philosophy
for data analysis that employs a variety of techniques.
316
M. Backes et al.
Fig. 4. Workﬂow of the methodology
Data Collection. First, depicted in the data collection component, the attacker
collects traceroute data for the victim and the ampliﬁer(s). The attacker launches
traceroutes to the targeted locations from a globally distributed set of hosts on
the Internet such as RIPE Atlas [3]. Note that the distribution of the selected
hosts is required to be global such that there will be a diversity of the paths,
allowing us to predict TTLs for arbitrarily chosen victims.
Data Processing. Second, in the data processing component, we have to ensure
that the relevant data collected in the previous stage is complete and usable.
In an ideal world, tracerouting returns a complete path including all the IP
addresses and ASes on the way up to the destination. In practice, the collected
data from the previous phase is usually imperfect, with a plethora of missing
connecting hops [13]. Such data can pose diﬃculties in eﬀective data analysis;
therefore, we need to develop certain methods for eﬃcient data scrubbing. First,
we discard all the traceroutes that are missing more than a certain percentage
(e.g., 50 %) of the intermediate hops. Also, we ignore traceroutes that cannot
reach at least the AS of the destination. In the case where the destination address
belongs to the same AS as the last replying node, we make an intuitive assump-
tion that this is the last AS in the path, and we supplement the route with the
AS number of the last replying node. We then continue ﬁlling up the gaps of
the unknown ASes due to private IP addresses within the traceroute. Private
addressing might occur when a packet passes through someone’s internal net-
work with implemented Multiprotocol Label Switching (MPLS) routing [21]. In
such cases, we assume that the border AS, the one with a public IP address
before the MPLS routing, is the correct one, and we ﬁll in the gaps accordingly.
Finally, to ﬁll in the remaining missing hops, we apply a technique that employs
the publicly available BGP data. The BGP data assists in the discovering of the
neighboring AS3 and helps us to bridge the gap between two known autonomous
3 A neighbor (or peering) autonomous system is the one that the AS directly inter-
connect with in order to exchange traﬃc.
On the Feasibility of TTL-Based Filtering for DRDoS Mitigation
317
Fig. 5. Connecting border ASes (AS-Mi and AS-Vi)
systems. Note that this technique can only complete the lacking AS numbers,
but not the actual hops (and their IP addresses).
Exploratory Data Analysis. Once the data is processed, i.e., prepared for
analysis, we dissect the data set using the EDA approach. This stage of the
methodology repeats for every victim and it involves three subsequent steps.
Find Common Patterns. Finding common patterns is the ﬁrst step in the
data exploration. This method transforms the paths from detailed traceroutes
with IP addresses of the hops to coarse-grained ones with only AS-level paths
and their weights, i.e., the number of hops in each AS for a particular traceroute.
Build a Model. This method assists in constructing a probabilistic table that
identiﬁes the likelihood of an AS to be part of the route between ampliﬁer and
victim. If all collected traceroutes pass through a particular AS, say AS-1, on
the way to the target location T, the method denotes the probability of 1 that
the AS-1 exist as a hop on the way to T. Moreover, this method also considers
the average number of hops within the AS and the distance of the AS from the
target. The average number is the AS internal hop count value, and it may vary
due to routing-related reasons such as load balancing. To identify the border
autonomous systems (in the next step), we need to deﬁne the distance as a
number of hops that a particular AS is distant from the target AS. For example,
the AS the target T belongs to always has a probability of 1 and distance 0.
Approximate the TTL Value. The probabilistic modeling helps in building a
partial path between two hosts. Consider the scenario illustrated in Fig. 5. The
model identiﬁes with a degree of certainty the common subpaths of the target
and the source. Furthermore, it estimates the hop count value of these subpaths.
To estimate the ﬁnal hop count value, we need to bridge these two subpaths with
the missing intermediate AS(s). To this end, we apply techniques based on the
available BGP data such that the ﬁnal result is a fully connected AS-level path.
Initially, we identify the border autonomous systems (labeled as AS-Mi and
AS-Vi in Fig. 5), i.e., the last certain (most distant) AS in the common subpaths.
With respect to the possible missing hops for connecting these two subpaths, we
distinguish three diﬀerent scenarios (marked with a, b and c in Fig. 5):
318
M. Backes et al.
Direct connection (a) When a direct peering between the border autonomous
systems exists, i.e., AS-Mi is in the neighborhood4 of AS-Vi and vice versa,
and the intersection set of the AS-Mi and AS-Vi neighbors is empty; we
assume that the border ASes are directly connected (AS-Mi ←→ AS-Vi).
One-hop connection (b) To identify the single connecting point in between,
accordingly, we have to check the neighbors of the border ASes. In the case
where only one intersecting AS exists, we assume that this particular AS is
the connecting point. If the intersection set contains more than one common
AS, we refer to our probability table. We then accordingly choose the AS
with the biggest probability to be a part of the route.