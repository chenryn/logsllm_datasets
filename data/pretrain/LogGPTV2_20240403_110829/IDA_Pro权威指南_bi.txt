访问数据交叉引用信息的函数与访问代码交叉引用信息的函数非常类似。这些函数如下所示。
long Dfirst(long from)
 ，返回给定地址引用一个数据值的第一个位置。如果给定地址没有引用其他地址，则返回 BADADDR (-1）。
long Dnext(long from, long current)
 ，如果current
 已经在前一次调用 Dfirst
 或Dnext
 时返回，则返回给定地址（from
 ）向其引用一个数据值的下一个位置。如果没有其他交叉引用存在，则返回 BADADDR 。
long XrefType()
 ，返回一个常量，说明某个交叉引用查询函数（如 Dfirst
 ）返回的最后一个交叉引用的类型。对于数据交叉引用，这些常量包括dr_0
 （提供的偏移量）、dr_W
 （数据写入）和 dr_R
 （数据读取）。
long DfirstB(long to)
 ，返回将给定地址作为数据引用的第一个位置。如果不存在引用给定地址的交叉引用，则返回 BADADDR （-1）。
long DnextB(long to, long current)
 ，如果currnet
 已经在前一次调用 DfristB
 或DnextB
 时返回，则返回将给定地址（to
 ）作为数据引用的下一次位置。如果没有其他对给定地址的交叉引用存在，则返回 BADADDR 。
和代码交叉引用一样，如果需要知道你收到的交叉引用的类型，那么在调用另一个交叉引用查询函数之前，必须调用 XrefType
 函数。
15.4.9 数据库操纵函数
有大量函数可用于对数据库的内容进行格式化。这些函数如下所示。
void MakeUnkn(long addr, long flags)
 ，取消位于指定地址的项的定义。这里的标志（参见IDC 的MakeUnkn
 文档）指出是否也取消随后的项的定义，以及是否删除任何与取消定义的项有关的名称。相关函数 MakeUnknown
 允许你取消大块数据的定义。
long MakeCode(long addr)
 ，将位于指定地址的字节转换成一条指令。如果操作成功，则返回指令的长度，否则返回 0。
bool MakeByte(long addr)
 ，将位于指定地址的项目转换成一个数据字节。类似的函数还包括MakeWord
 和MakeDword
 。
bool MakeComm(long addr, string comment)
 ，在给定的地址处添加一条常规注释。
bool MakeFunction(long begin, long end)
 ，将由begin
 到end
 的指令转换成一个函数。如果end
 被指定为 BADADDR （1），IDA 会尝试通过定位函数的返回指令，来自动确定该函数的结束地址。
bool MakeStr(long begin, long end)
 ，创建一个当前字符串（由 GetStringType
 返回）类型的字符串，涵盖由begin
 到end-1
 之间的所有字节。如果end
 被指定为 BADADDR ，IDA会尝试自动确定字符串的结束位置。
有许多其他 Make XXX
 函数可提供类似于上述函数的操作。请参考 IDC 文档资料了解所有这些函数。
15.4.10 数据库搜索函数
在IDC 中，IDA 的绝大部分搜索功能可通过各种FindXXX
 函数来实现，下面我们将介绍其中一些函数。FindXXX
 函数中的flags
 参数是一个位掩码，可用于指定查找操作的行为。3个最为常用的标志分别为SEARCH_DOWN
 ，它指示搜索操作扫描高位地址；SEARCH_NEXT
 ，它略过当前匹配项，以搜索下一个匹配项；SEARCH_CASE
 ，它以区分大小写的方式进行二进制和文本搜索。
long FindCode(long addr, long flags)
 ，从给定的地址搜索一条指令。
long FindData(long addr, long flags)
 ，从给定的地址搜索一个数据项。
long FindBinary(long addr, long flags, string binary)
 ，从给定的地址搜索一个字节序列。字符串 binary
 指定一个十六进制字节序列值。如果没有设置 SEARCH_CASE
 ，且一个字节值指定了一个大写或小写 ASCII 字母，则搜索仍然会匹配对应的互补值。例如，“41 42”将匹配“61 62”（和“61 42”），除非你设置了 SEARCH_CASE
 标志。
long FindText(long addr, long flags, long row, long column, string text)
 ，在给定的地址，从给定行（row
 ）的给定列搜索字符串 text
 。注意，某个给定地址的反汇编文本可能会跨越几行，因此，你需要指定搜索应从哪一行开始。
还要注意的是，SEARCH_NEXT
 并未定义搜索的方向，根据 SEARCH_DOWN
 标志，其方向可能向上也可能向下。此外，如果没有设置SEARCH_NEXT
 ，且 addr
 位置的项与搜索条件匹配，则 FindXXX
 函数很可能会返回 addr
 参数传递给该函数的地址。
15.4.11 反汇编行组件
许多时候，我们需要从反汇编代码清单的反汇编行中提取出文本或文本的某个部分。下面的函数可用于访问反汇编行的各种组件。
string GetDisasm(long addr)
 ，返回给定地址的反汇编文本。返回的文本包括任何注释，但不包括地址信息。
string GetMnem(long addr)
 ，返回位于给定地址的指令的助记符部分。
string GetOpnd(long addr, long opnum)
 ，返回指定地址的指定操作数的文本形式。IDA以零为起始编号，从左向右对操作数编号。
long GetOpType(long addr, long opnum)
 ，返回一个整数，指出给定地址的给定操作数的类型。请参考 GetOpType
 的IDC 文档，了解操作数类型代码。
long GetOperandValue(long addr, long opnum)
 ，返回与给定地址的给定操作数有关的整数值。返回值的性质取决于 GetOpType
 指定的给定操作数的类型。
string CommentEx(long addr, long type)
 ，返回给定地址处的注释文本。如果 type
 为0，则返回常规注释的文本；如果 type
 为1，则返回可重复注释的文本。如果给定地址处没有注释，则返回一个空字符串。
15.5 IDC 脚本示例
现在，分析一些完成特定任务的脚本示例会很有用。在本章的剩余部分，我们将介绍一些相当常见的情形，说明如何使用脚本来处理与数据库有关的问题。
15.5.1 枚举函数
许多脚本针对各个函数进行操作。例如，生成以某个特定函数为根的调用树，生成一个函数的控制流程图，或者分析数据库中每个函数的栈帧。代码清单 15-1 中的脚本遍历数据库中的每一个函数，并打印出每个函数的基本信息，包括函数的起始和结束地址、函数参数的大小、函数的局部变量的大小。所有输出全部在输口窗口中显示。
代码清单 15-1 函数枚举脚本
#include   
static main() {  
   auto addr, end, args, locals, frame, firstArg, name, ret;  
   addr = 0;  
   for (addr = NextFunction(addr); addr != BADADDR; addr = NextFunction(addr)) {  
      name = Name(addr);  
      end = GetFunctionAttr(addr, FUNCATTR_END);  
      locals = GetFunctionAttr(addr, FUNCATTR_FRSIZE);  
      frame = GetFrame(addr);    // retrieve a handle to the function’s stack frame  
      ret = GetMemberOffset(frame, " r"); // " r" is the name of the return address  
      if (ret == -1) continue;  
      firstArg = ret + 4;  
      args = GetStrucSize(frame) - firstArg;  
      Message("Function: %s, starts at %x, ends at %x\n", name, addr, end);  
      Message("   Local variable area is %d bytes\n", locals);  
      Message("   Arguments occupy %d bytes (%d args)\n", args, args / 4);  
   }  
}
这个脚本使用IDC 的一些结构操纵函数，以获得每个函数的栈帧的句柄（GetFrame
 ），确定栈帧的大小（GetStrucSize
 ），并确定栈中保存的返回地址的偏移量（GetMemberOffset
 ）。函数的第一个参数占用保存的返回地址后面的 4 个字节。函数的参数部分的大小为第一个参数与栈帧结束部分之间的空间。由于IDA 无法为导入的函数生成栈帧，这个脚本检查函数的栈帧中是否包含一个已保存的返回地址，以此作为一种简单的方法，确定对某个导入函数的调用。
15.5.2 枚举指令
你可能想要枚举给定函数中的每一条指令。代码清单 15-2 中的脚本可用于计算光标当前所在位置的函数所包含的指令的数量。
代码清单 15-2 指令枚举脚本
    #include   
    static main() {  
       auto func, end, count, inst;  
➊     func = GetFunctionAttr(ScreenEA(), FUNCATTR_START);  
       if (func != -1) {  
➋        end = GetFunctionAttr(func, FUNCATTR_END);  
          count = 0;  
          inst = func;  
          while (inst  end) {
             count++;  
➌            inst = FindCode(inst, SEARCH_DOWN | SEARCH_NEXT);  