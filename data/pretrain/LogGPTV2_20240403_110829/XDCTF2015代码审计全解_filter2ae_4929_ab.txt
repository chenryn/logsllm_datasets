                $method = '_remap';
    }
但如果开发者错误地将关键代码放在了init方法或__construct方法中,将造成一个越权。(因为还没执行检查权限的before_handler方法)_remap是在$hook['post_controller_constructor']后执行的,
我在$hook['post_controller_constructor']中又定义了一个init方法,如果控制器中实现了这个方法将会调用之。
remap方法我将其伪装成修改方法名的hook函数,实际上我在其中加入了一个before_handler方法,如果控制器实现了它,将会调用之。
(这两个方法实际上灵感来自tornado,tornado中就有这样的两个方法。)
代码在/xdsec_app/admin_app/core/Xdsec_Controller.php:
    public function _remap($method, $params=[])
    {
        $method = "handle_{$method}";
        if (method_exists($this, $method)) {
            if(method_exists($this, "before_handler")) {
                call_user_func([$this, "before_handler"]);
            }
            $ret = call_user_func_array([$this, $method], $params);
            if(method_exists($this, "after_handler")) {
                call_user_func([$this, "after_handler"]);
            }
            return $ret;
        } else {
            show_404();
        }
    }
所以这里,结合上面说的init尚未检查权限的越权漏洞,组成一个无需后台登录的SQL注入。所以,综上所述,最后实际上整个脚本执行顺序是:  
core -> __construct -> hook -> init -> before_hanlder(在此检查权限) -> controller主体
-> after_handler
我将检查后台权限的代码放在before_handler中。而init方法的本意是初始化一些类变量。
回到控制器代码中。/xdsec_app/admin_app/controllers/Log.php 其中就有init函数:
    public function init()
        {
            $ip = I("post.ip/s") ? I("post.ip/s") : $this->input->ip_address();
            $this->default_log = $this->query_log($ip);
            $this->ip_address = $ip;
    }
熟悉CI的同学可能觉得没有问题,但其实我这里已经偷梁换柱得将CI自带的ip_address函数替换成我自己的了:很明显其中包含关键逻辑$this->query_log($ip);  
    protected function query_log($value, $key="ip")
        {
            $user_table = $this->db->dbprefix("admin");
            $log_table = $this->db->dbprefix("adminlog");
            switch($key) {
                case "ip":
                case "time":
                case "log":
                    $table = $log_table;
                    break;
                case "username":
                case "aid":
                default:
                    $table = $user_table;
                    break;
            }
            $query = $this->db->query("SELECT `{$user_table}`.`username`, `{$log_table}`.*
                                        FROM `{$user_table}`, `{$log_table}`
                                        WHERE `{$table}`.`{$key}`='{$value}'
                                        ORDER BY `{$log_table}`.`time` DESC
                                        LIMIT 20");
            if($query) {
                $ret = $query->result();
            } else {
                $ret = [];
            }
            return $ret;
    }
后台代码一般比前台代码安全性差,这里得到了很好的体现。后台大量where语句是直接拼接的字符串,我们看到这里将$value拼接进了SQL语句。  
而$value即为$ip,$ip可以来自$this->input->ip_address()。
    function ip_address()
        {
            if (isset($_SERVER["HTTP_CLIENT_IP"])) {
                $ip = $_SERVER["HTTP_CLIENT_IP"];
            } elseif (isset($_SERVER["HTTP_X_FORWARDED_FOR"])) {
                $ip = $_SERVER["HTTP_X_FORWARDED_FOR"];
            } elseif (isset($_SERVER["REMOTE_ADDR"])) {
                $ip = $_SERVER["REMOTE_ADDR"];
            } else {
                $ip = CI_Input::ip_address();
            }
            if(!preg_match("/(d+).(d+).(d+).(d+)/", $ip))
                $ip = "127.0.0.1";
            return trim($ip);
    }
这个函数看起来没有问题,实际上最后一个正则判断因为没有加^$定界符,所以形同虚设,只需利用“1.2.3.4’ union select …”
即可绕过。(这里的灵感来自我去年挖的ThinkPHP框架注入,也是没有首尾限定符,详见我乌云)
但因为init后就是检查权限的函数,没有登录的情况下将会直接返回302,而且后台数据库debug模式关闭了,无法报错。
这里只能利用time-based盲注。
多的不说,编写一个盲注脚本(xdseccms.py)即可跑出管理员密码:
[](https://dn-leavesongs.qbox.me/content/uploadfile/201510/29551443958260.png)
跑出密码为:c983cff7bc504d350ede4758ab5a7b4b
cmd5解密登录即可。
登录后台,在后台文件管理的javascript一项中发现第三个flag:
[](https://dn-leavesongs.qbox.me/content/uploadfile/201510/25ae1443958261.png)
这里说一下ctf技巧。
像我这种基于框架的代码审计,作者可能会修改框架核心代码(当然我这里没有,我都是正常hook)。如果修改框架核心代码的话,就很不好找漏洞了,因为一般框架核心代码都比较多。
这时候你应该拿diff这类工具,把正常的框架和你下载的ctf源码进行比较,很容易就能知道作者修改了哪些内容。
**0×04 后台GETSHELL**
最后一步,getshell。
实际上getshell也不难,因为后台有文件管理功能。阅读源码可以发现,我们可以重命名文件,但有几个难点(坑):
一、 只能重命名后缀是js、css、gif、jpg、txt等静态文件
二、 新文件名有黑名单,不能重命名成.php等格式
三、 老文件经过finfo处理得到mime type,需和新文件名后缀所对应的mime type相等
难点1,哪里有权限合适的静态文件?
后台可以下载文件,但只能下载来自http://libs.useso.com/
的文件,这个网站是静态文件cdn,内容我们不能控制。这是一个迷惑点,其实利用不了。
前台用户可以上传txt文件,但用户上传的文件会自动跟随8个字符的随机字符串,我们不能直接获取真实文件名。
怎么办?
查看SQL结构,可见`realname` varchar(128) NOT
NULL,,文件名realname最长为128字符,而linux系统文件名长度最长为255。
所以利用这一点,我们可以上传一个长度超过128小于255的文件,上传成功后插入数据库时报错,得到真实文件名:
[](https://dn-leavesongs.qbox.me/content/uploadfile/201510/29551443958356.png)
访问可见(此时还只是.txt后缀):
[](https://dn-leavesongs.qbox.me/content/uploadfile/201510/25ae1443958358.png)
难点2,新文件名黑名单。
和第二个flag的做法有异曲同工之妙,I函数第三个参数是一个正则表达式,用来检测传入的数据是否合法。
但检测完成后才会进行trim,所以我们可以传入“xxx.php ”,利用空格绕过黑名单,这是很常见的WAF绕过方法。
难点3,mime type如何相等?
因为新文件名后缀一定是.php,所以新文件名后缀对应的mime type就是text/x-php。
而老文件的mime type是需要finfo扩展来检测的。Php的finfo扩展是通过文件内容来猜测文件的mime
type,我们传入的文件aaaa…aaa.txt,只要前几个字符是
这里是XDCTF2015其他题目的Writeup
XDCTF writeup 链接: 密码: imwg