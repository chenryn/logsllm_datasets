### Identifying Suspicious Behavior in Android Applications: A Comparative Analysis

Several approaches have been proposed to detect potentially malicious Android applications. **FlowDroid** [19] and **DroidSafe** [35] employ precise static taint analysis to identify potentially harmful data flows. In contrast, **Drebin** [18] and **DroidAPIMiner** [14] extract various features from Android applications, such as requested permissions and invoked framework APIs, and then use machine learning techniques for classification.

Similarly, **TRIGGERSCOPE** aims to identify suspicious behavior in Android applications. However, while existing systems focus on general malware detection, the primary goal of TRIGGERSCOPE is to identify triggered malware through the detection of logic bombs. Specifically, we focus on functionality that, while not inherently malicious, can be considered so when executed under specific conditions. As demonstrated in the evaluation section, TRIGGERSCOPE outperforms existing approaches in detecting triggered malware, as illustrated in Figure 1.

**AppContext** [62] is a system that leverages supervised machine learning to classify potentially malicious behaviors by considering the context in which they are executed. It operates in two steps: first, it identifies actions known to be suspicious (methods matching known malware signatures [32], [2]); then, it adds context by analyzing the input controls that trigger these suspicious actions. Although AppContext shares the basic observation that behavior alone is insufficient for precise classification, it differs significantly from our approach.

One key difference is that the set of behaviors AppContext considers suspicious (or, in our terminology, sensitive) is much narrower than ours. This limitation prevents AppContext from detecting logic bombs where the triggered behavior is not inherently suspicious, as in the example shown in Figure 1. The narrow definition of suspicious behaviors in AppContext is necessary to avoid a high false positive rate, as any check involving certain inputs is flagged as a trigger, regardless of the check's nature.

In contrast, TRIGGERSCOPE first identifies suspicious triggers based on the checks performed on inputs and then examines the behaviors these triggers control. This approach allows us to be more lenient in defining sensitive operations, enabling the detection of triggers like the one in Figure 1, where the action (sending information to the network) is potentially sensitive but not inherently suspicious. TRIGGERSCOPE achieves this with a very low false positive rate of 0.38%.

Another significant difference is that TRIGGERSCOPE provides detailed information about each suspicious check, going beyond mere detection. These checks reveal the actual trigger conditions, such as the inputs needed to reach certain behaviors, which is invaluable for both automatic and manual analysis of logic bombs.

### Dynamic Analyses

Many dynamic analysis systems have also been proposed for Android applications in a security context. For instance, **AppFence** [38] by Hornyack et al. modifies the Android framework to prevent user privacy attacks via data shadowing. Similarly, **TaintDroid** [29] by Enck et al. performs whole-system data flow tracking through modifications to the Android framework and native libraries. Other tools, such as **Mobile Sandbox** [53], **CopperDroid** [49], [55], and **Andrubis** [40], dynamically analyze unknown Android applications. Google's **Bouncer** [41] uses dynamic analysis to screen submissions to the Google Play Store.

Additionally, research has proposed dynamic analysis approaches for multipath execution and dynamic symbolic execution of unknown Windows binaries [43], and Java and Android applications [8], [34], [42], [61], [48]. These methods achieve higher code coverage compared to simpler dynamic analysis tools.

However, these dynamic analysis systems share several fundamental limitations. They can be detected and evaded [21], [44], and they cannot guarantee complete coverage of the applications under test. Even if the functionality implemented in a logic bomb is reached, these systems cannot determine whether the executed check or functionality was malicious. To do so, they would require a fine-grained specification of the intended app behavior, which is often unavailable.

To address this limitation, one approach could be to extend these systems to track detailed information related to the checks, similar to what TRIGGERSCOPE does, to reconstruct their semantics. While this is an interesting direction for future work, static analysis systems remain preferable as they are not affected by coverage-related issues and do not risk missing relevant behavior due to the malicious functionality being executed only after, for example, a user successfully logs in.

### Related Work: Detecting Hidden Time Bombs

Crandall et al. [25] proposed a method to detect hidden time bombs in Windows binaries by running a virtual machine at different rates of perceived time and correlating memory write frequency with timer interrupt frequency. Their approach was able to detect time-related behaviors in four Windows worms. However, this method is based on dynamic analysis and shares the limitations of other dynamic approaches. Additionally, it is specifically designed for time-related behaviors and would be extremely difficult, if not impossible, to adapt to other trigger inputs. In contrast, TRIGGERSCOPE can be extended to other trigger inputs, with the main challenge being engineering effort.

### Conclusions

In this paper, we address the challenge of precisely identifying logic bombs in Android applications. We propose analyzing path predicates (checks) to determine if they encode narrow conditions and introduce trigger analysis as a static program analysis for identifying suspicious trigger conditions that guard potentially sensitive functionality in Android applications.

To evaluate our approach, we implemented a prototype called TRIGGERSCOPE, which detects time-, location-, and SMS-based triggers. Our evaluation over a large corpus of benign and malicious applications demonstrates that trigger analysis can automatically and precisely discover both interesting and malicious path predicates on sensitive operations, including previously unknown backdoors in benign apps from the official market and various logic bombs in real-world malicious samples. Finally, our experiments show that existing approaches are not suitable for detecting logic bombs.

### Acknowledgements

We would like to thank the anonymous reviewers for their valuable feedback. We also thank Sebastian PÃ¶plau and Ryan Magennis for their help with the evaluation of our work, and Yousra Aafer for her assistance in reproducing DroidAPIMiner. Finally, we thank Betty Sebright and her team for their significant help in motivating the development of this work.

This material is based on research sponsored by DARPA under agreements number FA8750-12-2-0101 and FA8750-15-2-0084. The U.S. Government is authorized to reproduce and distribute reprints for governmental purposes notwithstanding any copyright notation thereon. The views and conclusions contained herein are those of the authors and should not be interpreted as necessarily representing the official policies or endorsements, either expressed or implied, of DARPA or the U.S. Government.

### References

[References are listed as provided in the original text.]

---

This revised version enhances the clarity, coherence, and professionalism of the text, making it more accessible and informative for readers.