bolic execution and a set of heuristics to detect unknown ma-
licious applications. FlowDroid [19] and DroidSafe [35] pro-
pose precise static taint analyses to detect potentially malicious
data ﬂows. Differently, Drebin [18] and DroidAPIMiner [14]
are two approaches that extract several features from Android
applications (e.g., requested permissions, invoked framework
APIs) and then apply machine learning techniques to perform
classiﬁcation.
Similarly to these projects, TRIGGERSCOPE aims to identify
suspicious behavior in Android applications. However, while
the goal of existing systems is to perform malware detection
in the general sense,
the main goal of our work is the
identiﬁcation of triggered malware (through the identiﬁcation
of logic bombs). In other words, we focus on the detection of
functionality that are not malicious per se, but that could be
considered as such because they are executed only under very
speciﬁc circumstances. As discussed in the evaluation section,
existing approaches are clearly outperformed by TRIGGER-
SCOPE when tasked to detect triggered malware (like the one
shown in Figure 1).
AppContext [62] is a system proposed in a software en-
gineering venue. It leverages supervised machine learning to
classify potentially malicious behaviors by taking into account
the context in which such behaviors are executed. AppContext
works in two steps: First,
it starts from a set of actions
that are known to be suspicious (i.e., methods that match
known malware signatures [32], [2]); Then, the analysis adds
context by considering which category of input controls the
execution of such suspicious actions. While this approach
shares the same basic observation as our work (i.e.,
just
looking at behaviors alone is not enough to perform precise
classiﬁcation), it also signiﬁcantly differs.
One of the main differences is that the set of behaviors that
AppContext considers as suspicious (or, according to the ter-
minology used in this paper, sensitive) is much narrower than
ours. This aspect prevents this approach to detect logic bombs
where the triggered behavior is not suspicious per se (as in our
opening example in Figure 1). Note that AppContext’s choice
to select a narrow set of potentially-suspicious behaviors is
necessary by design. In fact, since AppContext considers any
check that involves certain inputs as a trigger (independently
from the typology of the check itself), ﬂagging a much wider
set of actions as suspicious (as we do) would cause a very
high false positive rate.
As we explained in the paper, in our work we take the
opposite view: we ﬁrst identify suspicious triggers (based on
the checks that the code performs on inputs) and, only as a
subsequent step, we consider which behavior these triggers can
control. Thus, the triggered behavior per se has a much less
important role in our analysis, and our approach can hence be
much more lenient with the deﬁnition of sensitive operations.
This different design choice allows us to detect triggers like the
one shown in Figure 1, where the action (sending information
to the network) is potentially sensitive but not suspicious per
se, while having a very low false positive rate (0.38%).
Another important difference with respect to AppContext is
that our static analysis provides details about each suspicious
check, going well-beyond the mere detection (see our discus-
sion in Sections V-F and V-G). Such checks reveal the actual
trigger condition, such as the inputs needed to reach certain
behaviors. This information is invaluable when automatically
identifying logic bombs, but it is also very useful for efﬁcient
manual analysis.
Dynamic Analyses. As in the case of static analyzers, many
systems have been proposed that apply dynamic analyses
to Android applications in a security context. Hornyack et
al. present AppFence [38], a dynamic system implemented as
modiﬁcations to the Android framework that prevents attacks
against user privacy via data shadowing. Along similar lines,
Enck et al. [29] present TaintDroid, a dynamic taint analy-
sis that performs whole-system data ﬂow tracking through
modiﬁcations to the underlying Android framework and na-
tive libraries. Other efforts, such as Mobile Sandbox [53],
CopperDroid [49], [55], and Andrubis [40] developed tools
and techniques to dynamically analyze unknown Android
applications. Google also makes use of dynamic analysis in
Bouncer [41], an automated system that screens submissions
to the Google Play Store.
Finally, other research has proposed approaches based on
dynamic analysis to perform multipath execution and dynamic
symbolic execution of unknown Windows binaries [43], and on
Java and Android applications [8], [34], [42], [61], [48]. These
achieve higher code coverage than simpler dynamic analysis
tools.
However, all of these systems share several fundamental
limitations. Due to their nature, their analysis can be detected
and evaded [21], [44] and they cannot guarantee complete
coverage of the applications under test. Even more important,
even in those cases where the functionality implemented in
a logic bomb is reached, these systems are not capable of
determining whether the just-executed check or functionality
was malicious or not. In fact, at the very least, these tools
would require a very ﬁne-grained speciﬁcation of the intended
app behavior, something that is typically not available.
To solve this limitation, one approach would be to extend
such systems to keep track of detailed information related
to these checks, similarly to what TRIGGERSCOPE does, to
then reconstruct
their semantics. Whether this is possible
is a very interesting direction for future work. Nonetheless,
static analysis systems are preferable, as they are not affected
391391
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:13:49 UTC from IEEE Xplore.  Restrictions apply. 
by coverage-related issues, and, therefore, they do not risk
missing relevant behavior due to the malicious functionality
being executed only after, for example, a user successfully
logs in.
One last project
that relates to ours was proposed by
Crandall et al. [25]. In that work, the authors aim to detect
hidden time bombs in Windows binaries by running a virtual
machine at different rates of perceived time and correlating
memory write frequency to timer interrupt frequency. The
authors show that their approach was able to detect time-
related behaviors in four Windows worms. However, this work
has also several limitations. First, it is based on dynamic
analysis, and, therefore, it shares the limitations of the previous
approaches. Second, this approach is intrinsically related to
time-related behaviors and it would be extremely difﬁcult, if
not impossible, to adapt it to other trigger inputs. We note that
TRIGGERSCOPE could be extended to other trigger inputs, the
only challenge being engineering effort.
VIII. CONCLUSIONS
In this paper, we tackle the challenge of precisely identi-
fying logic bombs in Android applications. To this end, we
propose the idea of analyzing path predicates (checks) to
determine whether they encode a narrow condition, and we
introduced trigger analysis as a static program analysis for
identifying suspicious trigger conditions that guard potentially-
sensitive functionality in Android applications.
To evaluate the practicality of our idea, we implemented
a prototype called TRIGGERSCOPE to detect time-, location-,
and SMS-based triggers, and evaluated it over a large cor-
pus of benign and malicious applications. Our evaluation
demonstrates that trigger analysis is capable of automatically
and precisely discovering both interesting and malicious path
predicates on sensitive operations in these applications, in-
cluding previously-unknown backdoors in benign apps from
the ofﬁcial market, and a variety of logic bombs in real-world
malicious samples. Finally, our experiments show that existing
approaches are not suitable for detecting logic bombs.
ACKNOWLEDGEMENTS
We would like to thank the anonymous reviewers for their
valuable feedback. We would also like to thank Sebastian
P¨oplau and Ryan Magennis for their help with the evaluation
of our work, and Yousra Aafer for her help in reproducing
DroidAPIMiner. Finally, we would like to thank Betty Sebright
and her team for their signiﬁcant help in motivating the
development of this work.
This material is based on research sponsored by DARPA
under agreements number FA8750-12-2-0101 and FA8750-15-
2-0084. The U.S. Government is authorized to reproduce and
distribute reprints for Governmental purposes notwithstanding
any copyright notation thereon. The views and conclusions
contained herein are those of the authors and should not be
interpreted as necessarily representing the ofﬁcial policies or
endorsements, either expressed or implied, of DARPA or the
U.S. Government.
REFERENCES
[1] AceDeceiver: First iOS Trojan Exploiting Apple DRM Design Flaws
to Infect Any iOS Device.
http://researchcenter.paloaltonetworks.
com/2016/03/acedeceiver-ﬁrst-ios-trojan-exploiting-apple-drm-design-
ﬂaws-to-infect-any-ios-device/.
[2] Androguard Signatures.
https://code.google.com/p/androguard/wiki/
DatabaseAndroidMalwares.
[3] Android Open Source Project (AOSP). https://source.android.com/.
[4] dex2jar - Tools to work with android .dex and java .class ﬁles. http:
//code.google.com/p/dex2jar/.
[5] HackingTeam’s private conversation with Ecuador’s representative –
WikiLeaks. https://wikileaks.org/hackingteam/emails/emailid/630533.
[6] HackingTeam’s private conversation with Egypt’s representative – Wik-
iLeaks. https://wikileaks.org/hackingteam/emails/emailid/530895.
[7] HackingTeam’s private conversation with Saudi Arabia’s representative
– WikiLeaks. https://wikileaks.org/hackingteam/emails/emailid/74975.
[8] JPF-symbc: Symbolic PathFinder. http://babelﬁsh.arc.nasa.gov/trac/jpf/
wiki/projects/jpf-symbc.
[9] My Remote Phone application.
https://play.google.com/store/apps/
details?id=com.innovationdroid.myremotephone.
[10] Pirated iOS App Stores Client Successfully Evaded Apple iOS Code Re-
http://researchcenter.paloaltonetworks.com/2016/02/pirated-ios-
view.
app-stores-client-successfully-evaded-apple-ios-code-review/.
[11] RemoteLock application. http://www.androlib.com/android.application.
tw-nicky-lockmyphonetrial-pqwBC.aspx.
[12] Soot: a Java Optimization Framework. http://www.sable.mcgill.ca/soot/.
[13] WALA: T.J. Watson Library for Analysis. http://wala.sourceforge.net/.
[14] Y. Aafer, W. Du, and H. Yin. DroidAPIMiner: Mining API-Level
Features for Robust Malware Detection in Android.
In International
Conference on Security and Privacy in Communication Networks (Se-
cureComm), 2013.
[15] Adrian Ludwig. Android Security State of the Union. Black Hat USA
Brieﬁngs, 2015.
[16] V. Afonso, A. Bianchi, Y. Fratantonio, A. Doupe, M. Polino, P. de Geus,
C. Kruegel, and G. Vigna. Going Native: Using a Large-Scale Analysis
of Android Apps to Create a Practical Native-Code Sandboxing Policy.
In Proceedings of the Annual Symposium on Network and Distributed
System Security (NDSS), 2016.
[17] AppBrain. Number of Available Android Applications. http://www.
appbrain.com/stats/number-of-android-apps, March 2016.
[18] D. Arp, M. Spreitzenbarth, H. Malte, H. Gascon, and K. Rieck. Drebin:
Effective and Explainable Detection of Android Malware in Your Pocket.
In Proceedings of the Annual Symposium on Network and Distributed
System Security (NDSS), 2014.
[19] S. Arzt, S. Rasthofer, C. Fritz, E. Bodden, A. Bartel, J. Klein, Y. Le
Traon, D. Octeau, and P. McDaniel.
FlowDroid: Precise Context,
Flow, Field, Object-sensitive and Lifecycle-aware Taint Analysis for
Android Apps.
In Proceedings of the ACM SIGPLAN Conference on
Programming Language Design and Implementation (PLDI), 2014.
[20] K. W. Y. Au, Y. F. Zhou, Z. Huang, and D. Lie. PScout: Analyzing
In Proceedings of the ACM
the Android Permission Speciﬁcation.
Conference on Computer and Communications Security (CCS), 2012.
[21] G. S. Babil, O. Mehani, R. Boreli, and M.-a. Kaafar. On the Ef-
fectiveness of Dynamic Taint Analysis for Protecting Against Private
Information Leaks on Android-based Devices.
In Proceedings of the
International Conference on Security and Cryptography, 2013.
[22] D. Brumley, C. Hartwig, Z. Liang, J. Newsome, D. Song, and H. Yin.
Automatically Identifying Trigger-based Behavior in Malware. In Botnet
Detection, 2007.
[23] C. Cadar, D. Dunbar, and D. Engler. KLEE : Unassisted and Automatic
Generation of High-Coverage Tests for Complex Systems Programs. In
Proceedings of the USENIX Symposium on Operating Systems Design
and Implementation (OSDI), 2008.
[24] Y. Cao, Y. Fratantonio, A. Bianchi, M. Egele, C. Kruegel, G. Vigna,
and Y. Chen. EdgeMiner: Automatically Detecting Implicit Control
Flow Transitions through the Android Framework. In Proceedings of the
Annual Symposium on Network and Distributed System Security (NDSS),
2015.
[25] J. R. Crandall, G. Wassermann, D. A. S. D. Oliveira, Z. Su, S. F. Wu, and
F. T. Chong. Temporal Search: Detecting Hidden Malware Timebombs
with Virtual Machines. In Proceedings of the International Conference
on Architectural Support for Programming Languages and Operating
Systems (ASPLOS), 2006.
392392
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:13:49 UTC from IEEE Xplore.  Restrictions apply. 
[26] Defense Information Systems Agency, Department of Defense. DoD
http://www.disa.mil/Services/Enterprise-Services/
Mobility Program.
Mobility.
[27] Denis Maslennikov. ZeuS-in-the-Mobile Facts and Theories. https:
//securelist.com/analysis/36424/zeus-in-the-mobile-facts-and-theories/.
[28] E. Dupuy. JD-Gui: Yet another fast java decompiler. http://jd.benow.ca/.
[29] W. Enck, P. Gilbert, B.-G. Chun, L. P. Cox, J. Jung, P. McDaniel, and
A. N. Sheth. TaintDroid: An Information-Flow Tracking System for
Realtime Privacy Monitoring on Smartphones.
In Proceedings of the
USENIX Conference on Operating Systems Design and Implementation
(OSDI), 2010.
[30] W. Enck, M. Ongtang, and P. McDaniel. Kirin Analysis Tool. http:
//siis.cse.psu.edu/tools/kirin-0.1.tar.gz, 2009.
[31] W. Enck, M. Ongtang, and P. McDaniel. On Lightweight Mobile Phone
In Proceedings of the ACM Conference on
Application Certiﬁcation.
Computer and Communications Security (CCS), 2009.
[32] Y. Feng, S. Anand, I. Dillig, and A. Aiken. Apposcopy: Semantics-Based
Detection of Android Malware Through Static Analysis. In Proceedings
of the ACM Symposium on the Foundations of Software Engineering
(FSE), 2014.
[33] Y. Fratantonio, A. Machiry, A. Bianchi, C. Kruegel, and G. Vigna.
CLAPP: Characterizing Loops in Android Applications. In Proceedings
of the ACM Symposium on the Foundations of Software Engineering
(FSE), 2015.
[34] P. Godefroid, N. Klarlund, and K. Sen. DART: Directed Automated
Random Testing. In ACM Sigplan Notices, 2005.
[35] M. Gordon, D. Kim, J. Perkins, L. Gilham, N. Nguyen, and M. Rinard.
Information-Flow Analysis of Android Applications in DroidSafe.
In
Proceedings of the Annual Symposium on Network and Distributed
System Security (NDSS), 2015.
[36] M. Grace, Y. Zhou, Q. Zhang, S. Zou, and X. Jiang. RiskRanker: Scal-
able and Accurate Zero-day Android Malware Detection. In Proceedings
of the International Conference on Mobile Systems, Applications, and
Services (MobiSys), 2012.
[37] Hex-Rays. IDA Pro: a cross-platform multi-processor disassembler and
debugger. http://www.hex-rays.com/products/ida/index.shtml.
[38] P. Hornyack, S. Han, J. Jung, S. Schechter, and D. Wetherall. These
Aren’t the Droids You’re Looking For: Retroﬁtting Android to Protect
Data from Imperious Applications. In Proceedings of the ACM Confer-
ence on Computer and Communications Security (CCS), 2011.
[39] IDC. Smartphone OS Market Share, Q1 2015. http://www.idc.com/
prodserv/smartphone-os-market-share.jsp, May 2015.
[40] M. Lindorfer, M. Neugschwandtner, L. Weichselbaum, Y. Fratantonio,
V. van der Veen, and C. Platzer. ANDRUBIS-1,000,000 Apps Later: A
View on Current Android Malware Behaviors.
In Proceedings of the
International Workshop on Building Analysis Datasets and Gathering
Experience Returns for Security (BADGERS), 2014.
[41] H. Lockheimer. Android and Security. http://googlemobile.blogspot.
com/2012/02/android-and-security.html, February 2012.
[42] N. Mirzaei, S. Malek, C. S. Pasreanu, N. Esfahani, and R. Mahmood.
Testing Android Apps Through Symbolic Execution. In ACM SIGSOFT
Software Engineering Notes, 2012.
[43] A. Moser, C. Kruegel, and E. Kirda. Exploring Multiple Execution
Paths for Malware Analysis. In Proceedings of the IEEE Symposium on
Security and Privacy, 2007.
[44] J. Oberheide. Dissecting Android’s Bouncer. https://www.duosecurity.
com/blog/dissecting-androids-bouncer, June 2012.
[45] D. Octeau, P. McDaniel, S. Jha, A. Bartel, E. Bodden, J. Klein, and Y. L.
Traon. Effective Inter-Component Communication Mapping in Android
with Epicc: An Essential Step Towards Holistic Security Analysis. In
Proceedings of the USENIX Security Symposium, 2013.
[46] S. Poeplau, Y. Fratantonio, A. Bianchi, C. Kruegel, and G. Vigna.
Execute This! Analyzing Unsafe and Malicious Dynamic Code Loading
in Android Applications. In Proceedings of the Annual Symposium on
Network and Distributed System Security (NDSS), 2014.
[47] S. Rasthofer, S. Arzt, and E. Bodden. A Machine-learning Approach
for Classifying and Categorizing Android Sources and Sinks.
In
Proceedings of the Annual Symposium on Network and Distributed
System Security (NDSS), 2014.
[48] S. Rasthofer, S. Arzt, M. Miltenberger, and E. Bodden. Harvesting
Runtime Values in Android Applications that Feature Anti-Analysis
Techniques. In Proceedings of the Annual Symposium on Network and
Distributed System Security (NDSS), 2016.
[49] A. Reina, A. Fattori, and L. Cavallaro. A System Call-Centric Anal-
ysis and Stimulation Technique to Automatically Reconstruct Android
Malware Behaviors. EuroSec, 2013.
[50] M. Sharif, A. Lanzi, J. Gifﬁn, and W. Lee. Impeding Malware Analysis
Using Conditional Code Obfuscation.
In Proceedings of the Annual
Symposium on Network and Distributed System Security (NDSS), 2008.
Pick Your Con-
texts Well: Understanding Object-Sensitivity.
In Proceedings of the
ACM SIGPLAN-SIGACT Symposium on Principles of Programming
Languages (POPL), 2011.
[51] Y. Smaragdakis, M. Bravenboer, and O. Lhot´ak.
[52] P. Software.
JEB: a Dalvik Bytecode Decompiler.
https://www.
pnfsoftware.com/.
[53] M. Spreitzenbarth, F. Freiling, F. Echtler, T. Schreck, and J. Hoffmann.
Mobile-sandbox: Having a Deeper Look into Android Applications. In