has the form A.r1.r2, e2 has the form B.r2, and there is a
∗→ A.r1 in EC i. The outer induction hypothesis gives
path B
us exprSC (B) ⊆ exprSC (A.r1), i.e., B ∈ SC(A.r1). The inner
induction hypothesis gives us exprSC (e1) ⊆ exprSC (B.r2).
Together with the deﬁnition of expr for A.r1.r2, these imply
exprSC (e1) ⊆ exprSC (e), as required.
case 3: When e2→ e is introduced by closure property 3, e
has the form f1 ∩ ··· ∩ fk, e2 = e1 is an entity D (because
entity nodes have no incoming edges), and there are paths
∗→ fj in EC i for each j ∈ [1..k]. The outer induction
D
hypothesis gives us D ∈ exprSC (fj) for j ∈ [1..k]; therefore,
exprSC (e1) ⊆ exprSC (e).
Theorem 2
(Completness). For any role, A.r, D ∈
SC(A.r) implies there exists a path D
The proofs for this and other theorems are omitted due to
space limitation; they can be found in the full version of this
paper.
∗→ A.r in EC.
Together, Theorems 1 and 2 tell us that we can answer
each of the queries enumerated at the top of this section
by consulting the credential graph. The rest of this section
gives algorithms for constructing subgraphs that enable us
to answer such questions without constructing the entire
∗→ A.r
graph. As we have seen, constructing the path D
∗→ A.r
alone proves D is in role A.r. However, where D
contains derived edges, the paths they are derived from must
be constructed ﬁrst. The portion of the credential graph
that must be constructed is what we call a credential chain:
∗→ A.r) is the least set of edges in EC containing
chain(D
∗→ A.r and also containing all the paths that the derived
D
edges in the set are derived from.
3.3 The Backward Search Algorithm
The backward search algorithm determines the member
set of a given role expression e0.
In terms of the creden-
tial graph, it ﬁnds all the entity nodes that can reach the
node e0. We call it backward because it follows edges in the
reverse direction. This name is consistent with the terminol-
ogy in X.509 [5, 9], in which forward means going from sub-
jects to issuers and reverse means from issuers to subjects.
This algorithm works by constructing proof graphs, which
are equivalent to, but slightly diﬀerent from, subgraphs of
a credential graph. The minor diﬀerence is discussed after
the presentation of the algorithm.
The backward search algorithm constructs a proof graph,
maintaining a queue of nodes to be processed; both initially
contain just one node, e0. Nodes are processed one by one
until the queue is empty.
To process a role node A.r, the algorithm ﬁnds all creden-
tials that deﬁne A.r. For each credential A.r←− e, it creates
a node for e, if none exists, and adds the edge e→ A.r. In the
proof graph, there is only one node corresponding to each
role expression and each edge is added only once. Each time
the algorithm tries to create a node for a role expression e,
it ﬁrst checks whether such a node already exists; if not, it
creates a new node, adds it into the queue, and returns it.
Otherwise, it returns the existing node.
On each node e, the algorithm stores a children set, which
is a set of nodes, e1, that e can reach directly (i.e., e→ e1),
and a solution set, which is the set of entity nodes, D, that
∗→ e). Solutions are propagated from e
can reach e (i.e., D
to e’s children in the following ways. When a node is notiﬁed
to add a solution, it checks whether the solution exists in its
solution set; if not, it adds the solution and then notiﬁes all
its children about this new solution. When a node e1 is ﬁrst
added as a child of e2 (as the result of adding e2 → e1), all
existing solutions on e2 are copied to e1.
To process an entity node, the algorithm notiﬁes the node
to add itself to its own solution set.
To process a linked role node A.r1.r2, the algorithm cre-
ates a node for A.r1 and creates a linking monitor to observe
the node. The monitor, on observing that A.r1 has received
a new solution B, creates a node for B.r2 and adds the edge
B.r2→ A.r1.r2, which we call a link-containment edge.
To process an intersection node e = f1 ∩···∩ fk, the algo-
rithm creates one intersection monitor, for e, and k nodes,
one for each fj, then makes the monitor observe each node
fj. This monitor counts how many times it observes that an
entity D is added. For a given entity D, each fj notiﬁes e
at most once. If the count reaches k, then the monitor adds
the edge D→ e. So, to summarize, in addition to the nodes
and edges in the credential graph, the algorithm constructs
monitors that implement closure properties 2 and 3.
Given a set of credentials C, the proof graph, Gb(e0, C), con-
structed by the backward search algorithm starting from e0,
is closely related to the credential graph, GC. Gb(e0, C) is
almost identical to the smallest subgraph of GC whose node
set, N 0C , satisﬁes the following four closure properties and
whose edge set consists of all edges of EC over nodes of N 0C :
(i) e0 ∈ N 0C ; (ii) e2 ∈ N 0C & e1 → e2 ∈ EC =⇒ e1 ∈ N 0C ;
(iii) A.r1.r2 ∈ N 0C =⇒ A.r1 ∈ N 0C ; and (iv) f1 ∩ ··· ∩ fk ∈
N 0C & j ∈ [1..k] =⇒ fj ∈ N 0C . The only diﬀerence be-
tween Gb(e0, C) and such a subgraph of GC is this: Gb(e0, C)
contains role nodes, created during the processing of linked
roles, that don’t appear in C. Speciﬁcally, when the algo-
rithm processes a linked-role node A.r1.r2, the node B.r2
and the link-containment edge, B.r2 → A.r1.r2, are added,
even when B.r2 does not appear in C, and will therefore re-
ceive no incoming edges and no solutions. It is not diﬃcult
∗→ e0) for every D
to see that Gb(e0, C) contains chain(D
that can reach e0.
Theorem 3. Given a set of credentials C, let N be the
number of credentials in C, and M be the total size of C:
(cid:14)
A.r←−e ∈C |e|, where |A| = |A.r| = |A.r1.r2| = 1 and
|f1 ∩ ··· ∩ fk| = k. Assuming that ﬁnding all credentials
that deﬁne a role takes time linear in the number of such
credentials (e.g., by using hashing), then the worst-case time
complexity of the backward search algorithm is O(N 3+N M ),
and the space complexity is O(N M ). If each intersection in
C has size O(N ), then the time complexity is O(N 3).
To see that O(N 3) is a tight bound for the algorithm, con-
sider the following example:
C = {A0.r0 ←− Ai, A0.ri ←− A0.ri−1 mod n, Ai.r0 ←−
Ai−1 mod n.r0, A0.r(cid:9)←− A0.ri.r0 | 0 ≤ i < n}
There are N = 4n credentials. When using backward search
algorithm from A0.r(cid:9)
, there are edges from each Aj.r0 to
each A0.ri.r0, where 0 ≤ i, j < n, so there are n2 such edges.
Each Aj.r0 gets n solutions, so the time complexity is n3.
We can see that intersections do not increase the worst-case
time complexity of this algorithm. O(N M ) is a tight space
bound. Following is an example that reaches the bound: C =
{A0.r0 ←− Ai, A0.ri ←− A0.ri−1 mod n, A0.r(cid:9) ←− A0.ri.r0 ∩
A0.ri.r1 ∩ ··· ∩ A0.ri.rK−1 | 0 ≤ i < n}
160(0) Alice
1 StateU.stuID
7 EPub.student
✲0
(1) StateU.stuID
1 StateU.stuID
✲5
(6) EPub.university.stuID
7 EPub.student
✲6
(7) EPub.student
7 EPub.student
7 EPub.student
✟✟✟✙ 3
1
(4) ABU.accredited.stuID
(2) StateU
3 ABU.accredited
✲2
(3) ABU.accredited
3 ABU.accredited
✲3
(5) EPub.university
5 EPub.university
5 EPub.university
5 EPub.university
Figure 1: Gf (Alice, C), the proof graph constructed by doing forward search from Alice with C =
{EPub.student ←− EPub.university.student, EPub.university ←− ABU.accredited, ABU.accredited ←−
StateU, StateU.stuID ←− Alice}. The ﬁrst line of each node gives the node number in order of creation
and the role expression represented by the node. The second part of a node lists each solution eventually
associated with this node. Each of those solutions and each graph edge is labeled by the number of the node
that was being processed when the solution or edge was added. The edge labeled with 1 is a linking monitor.
3.4 The Forward Search Algorithm
The forward search algorithm ﬁnds all roles that an entity
is a member of. The direction of the search moves from the
subject of a credential towards its issuer.
The forward algorithm has the same overall structure as
the backward algorithm; however, there are some diﬀer-
ences. First, each node stores its parents instead of its chil-
dren. Second, each node e stores two kinds of solutions: full
solutions and partial solutions. Each full solution on e is a
role that e is a member of, i.e., a role node that is reachable
from e. Each partial solution has the form (f1 ∩ ···∩ fk, j),
where 1 ≤ j ≤ k. The node e gets the solution (f1∩···∩fk, j)
when fj is reachable from e. Such a partial solution is just
one piece of a proof that e can reach f1∩···∩fk. It is passed
through edges in the same way as is a full solution. When
an entity node D gets the partial solution, it checks whether
it has all k pieces; if it does, it creates a node for f1∩···∩fk,
if none exists, and adds the edge D→ f1 ∩ ··· ∩ fk.
The processing of each node is also diﬀerent from that in
the backward algorithm. For any role expression e, forward
processing involves the following three steps. First, if e is
a role B.r2, add itself as a solution to itself, then add a
linking monitor observing B. This monitor, when B gets
a full solution A.r1, creates the node A.r1.r2 and adds the
edge B.r2 → A.r1.r2. The addition of such an edge results
in B.r2 being added as a parent of A.r1.r2. Second, ﬁnd all
credentials of the form A.r ←− e; for each such credential,
create a node for A.r, if none exists, and add the edge e→
A.r. Third, if e is not an intersection, ﬁnd all credentials of
the form A.r ←− f1 ∩ ··· ∩ fk such that some fj = e; then
add (f1 ∩ ··· ∩ fk, j) as a partial solution on e.
Figure 1 shows the result of doing forward search using a
subset of the credentials in example 3.
Theorem 4. Under the same assumptions as in theo-
rem 3, the time complexity for the forward search algorithm
is O(N 2M ), and the space complexity is O(N M ).
3.5 Bi-direction Search Algorithms
When answering queries about whether a given entity, D,
is a member of a given role, A.r, we have the ﬂexibility of
combining forward and backward algorithms into a search
that proceeds from both D and A.r at once.
In this bi-
directional algorithm, a node e stores both its parents and
its children, as well as both backward solutions (entities that
are members of e) and forward solutions (roles that e is a
member of).
In the centralized case, doing either forward search from
D or backward search from A.r suﬃces to answer the query.
However, using bi-directional search could improve search
eﬃciency (where search space size is sometimes exponential
in path length) by ﬁnding two shorter intersecting paths,
rather than one longer one. A variety of search strategies
bear consideration, and diﬀerent algorithms can be devel-
oped based on them. The algorithms described above use
queues to organize node processing, resulting in breadth-ﬁrst
search. If they used stacks, they would perform depth-ﬁrst
search. In general, when there are several nodes that can
be explored (from either direction), they can be placed in
a priority queue according to some heuristic criteria, e.g.,
fan-out. Note that these remarks also apply to the forward
and backward algorithms.
In the distributed case, the ability to locate credentials
can become a limiting factor. This is the main issue we
address in section 4.
3.6
Implementation, Generalization, and Ap-
plication to SDSI
We have implemented the above algorithms in Java. Our
program can be conﬁgured to store the parent or child node
from which each solution arrives. Using this information,
one can easily trace paths, and compute the set of credentials
being used in any proof graph.
Our algorithms can be generalized to search for paths be-
tween two arbitrary role expressions. One way to do this is
to generalize the solution set to collect all reachable nodes,
not just entity and role nodes. Then, one knows that a path
∗→ e2 exists when e1 is added as a backward solution on e2
e1
or when e2 is added as a forward solution on e1. Of course,
such a change would aﬀect the algorithm’s complexity.
Our algorithms can also be used to do chain discovery in
SDSI. To allow their construction in RT0, long linked names
can be broken up. Instead of using A.r ←− B.r1.r2.··· .rk,
k−2.rk−1, ··· ,
one can use {A.r←− A.r(cid:9)
A.r(cid:9)
i’s are newly
introduced role names. Then one can use any of the algo-
rithms to do goal-oriented chain discovery.
k−1←− A.r(cid:9)
1←− B.r1}, in which the r(cid:9)
k−1.rk, A.r(cid:9)
2←− A.r(cid:9)
1.r2, A.r(cid:9)
Theorem 5. Given a set of “SDSI” credentials C, which
have arbitrarily long linked roles and no intersection, let
161C(cid:9)