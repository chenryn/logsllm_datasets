## Page 154
Dim ResultString = Regex.Match(SubjectString,
"http://([a-z0-9.-]+)").Groups(1).Value
要想重复使用同一个正则式，那么就需要构造一个Regex对象：
Dim RegexObj As New Regex("http://([a-z0-9.-]+)")
Dim ResultString = RegexObj.Match(SubjectString).Groups (1) .Value
Java
String resultString = null;
Pattern regex = Pattern.compile("http://([a-z0-9.-]+)");
Matcher regexMatcher = regex.matcher(subjectString);
if （regexMatcher.find())(
resultString = regexMatcher.group(1);
）
JavaScript
var result = "";
var match =/http:\/\/([a-z0-9.-]+)/.exec(subject);
if （match）{
result = match[1];
}else{
result = ;
PHP
if (preg_match('$http://([a-z0-9.-]+)g'，$subject,$groups））{
$result = $groups[1];
}else{
$result =
Perl
if （$subject ~m!http://（[a-z0-9.-]+)!）
$result =$1;
}else{
$result =
Python
如果只是做一次性的快速检查，你可以使用如下的全局函数：
matchobj = re.search("http://([a-z0-9.-]+)",subject)
if matchobj:
result - matchobj.group(1)
138
专EL
www.TopSage.com
---
## Page 155
else:
result = ""
要想重复使用同一个正则表达式，就需要使用一个编译过的对象：
reobj = re.compile("http://([a-z0-9.-]+)")
matchobj = reobj.search(subject)
if match:
result = matchobj·group(1)
result = ##
Ruby
你可以使用=～操作符和它提供的编号变量，比如$1：
if subject =~ $r!http://([a-z0-9.-]+)！
result = $1
else
result = "#
end
另外，你也可以使用一-个Regexp对象来调用match方法：
matchobj =$r!http://([a-z0-9.-]+)!.match(subject)
if matchobj
result = matchobj [1]
else
result = "#
end
讨论
实例2.10和实例2.21讲解了如何在正则表达式中使用编号的向后引用和替代文本，以
再次匹配同一段文本，或者是把正则匹配的一部分插人到替代文本中。你可以使用同
样的引用编号来在代码中获取由一个或多个捕获分组匹配到的文本。
在正则表达式中，捕获分组的编号是从1开始的。编程语言则通常都是从0开始对数
组和列表进行编号的。本书中所有会把捕获分组保存到一个数组或者列表中的编程语
言都会使用同正则表达式一样的编号，也就是从1开始编号。在数组或列表中的第0
个元素因此就会被用于保存整个的正则表达式匹配。这意味着如果你的正则表达式有
三个捕获分组，那么保存它们的匹配的数组会包含4个元素。元素0保存的是总的匹
配，而元素1、2和3分别保存由三个捕获分组匹配的文本。
.NET
要获取关于捕获分组的更多详细信息，我们还需要求助于最初在实例3.7中介绍过的
Regex.MatchO成员函数。它返回的Match对象拥有一个名为Groups的属性。它是类型
使用正则表达式编程
139
www.TopSage.com
---
## Page 156
为GroupCollection的一个集合（collection）属性。这个集合中会保存你的正则表达式
中所有捕获分组的详细信息。Groups[1]保存关于第一个捕获分组的详细信息，Groups[2]
保存第二个分组，以此类推。
在Groups集合中会为每个捕获分组都保存一个Group对象。除了Groups属性之
外，Group类与Match类拥有完全相同的属性集合。Match.Groups[1].Value会返回
第一个捕获分组所匹配的文本，这与Match.Value会返回整个正则表达式匹配是一
样的。Match.Groups[1].Index和Match.Groups[1].Length则会分别返回由该分组匹
配的文本的起始位置和长度。实例3.8中会介绍关于Index和Length的更多详细
信息。
Groups[0]中保存的是整个正则匹配的详细信息，它同时也会被直接保存在匹配对象
中。Match.Value和Match.Groups[O].Value是等价的。
如果你传递了一个非法的分组编号，Groups集合并不会产生-一个例外。例如，Groups[-1]
依然会返回一个Group对象，但是这个Group对象中会说明以-1为编号的捕获分组并
没有产生匹配。检查它最好的方法是使用Success属性。Groups[-1].Success总是会返
回false。
要想确定到底存在多少个捕获分组，可以检查Match.Groups.Count。这里的Count属
性与在.NET中所有其他collection对象的Count属性是一样的：它会返回在集合中的
元素个数，也就是最大允许的索引再加1。在我们的例子中，Groups集合中只包含
Groups[0]和Groups[1]。所以Groups.Count会返回2。
Java
用来获得捕获分组所匹配的文本，或者是捕获分组的匹配细节的代码，实际上与
我们在前面两个实例中所给出的用来处理整个正则匹配的代码是一样的。Matcher
类中的groupO、startO和endO这三个方法都会接受一个可选参数。如果没有这个
参数，或者把这个参数设置为0，那么所得到的就是这个正则匹配的文本或者位置
信息。
如果传一个正整数给它们，那么你就会得到相应的捕获分组的详细信息。分组的编号
是从1开始的，这与在正则表达式中的向后引用的编号是一致的。如果你给了一个大
于正则表达式中捕获分组个数的参数，那么这三个函数都会产生一个
IndexOutOfBoundsException例外。如果捕获分组存在，但是并没有参与匹配，那么
group(n)会返回null，而start(n)和end(n)都会返回-1。
JavaScript
在前一个实例中已经介绍过，一个正则表达式对象的exec(0方法会返回关于匹配结构详
细信息的一个数组。数组的元素0中会包含整个的正则匹配。元素1包含第一个捕获
140第3章
www.TopSage.com
---
## Page 157
分组匹配的文本，元素2保存第二个分组的匹配，以此类推。
如果正则表达式不能匹配自标字符串，那么regexp.execO会返回null。
PHP
实例3.7讲解了可以通过向preg_match0传递第三个参数来获得正则表达式所匹配的文
本。当preg_matchO的返回值是1的时候，这个参数会被赋值为一个数组。其中元素0
中会包含整个的正则匹配。元素1包含第一个捕获分组匹配的文本，元素2保存第二
个分组的匹配，以此类推。数组的长度就是捕获分组的个数加1。数组索引则正好对应
于在正则表达式中的向后引用编号。
在上一个实例中讲到，如果你使用常量PREG_OFFSET_CAPTURE作为第四个参数，
那么数组的长度依然是捕获分组的个数加1。但是它在每个位置保存的就不再单单是一
个字符串，而是一个包含两个元素的子数组。子元素1是一个整数，用来说明匹配文
本在目标字符串中的起始位置。
Perl
当模式匹配操作符m/找到一个匹配的时候，它会设置几个特殊变量。这些变量中包含
了编号变量$1，$2，$3，等等，它们会分别保存在正则表达式中的捕获分组所匹配的
文本。
Python
的时候没有使用任何参数，在这里我们给出了感兴趣的捕获分组的编号。调用group(1)
就可以获得第一个捕获分组匹配的文本，而使用group(2)可以得到第二个分组，以此类
推。Python支持最多99个捕获分组。分组编号0是整个正则表达式匹配。如果你传递
的参数大于正则表达式中的捕获分组的个数，那么groupO就会产生一个IndexError例
外。如果分组编号是合法的，但是分组并没有参与正则表达式的匹配，那么group(会
返回None。
可以一次向group0传递多个分组编号，从而通过一次调用获得几个捕获分组匹配的文
本。所得到的结果是一个字符串的列表。
如果想要获取包含所有捕获分组所匹配文本的一个元组，那么你就需要调用
MatchObject的groupsO方法。对于没有参与到匹配中的分组，在返回的元组中对应的
值是None。
如果想要得到的不是一个元组，而是所有捕获分组匹配文本的一个字典（dictionary），
那么就应该调用groupdictO，而不是groupsO。你还可以向groupdictO传递一个参数，
作为不参与匹配的分组在字典中对应的返回值（这样就不必非要返回None）。
使用正则表达式编程141
www.TopSage.com
---
## Page 158
Ruby
实例3.8中介绍了变量S～以及MatchData对象。在数组的上下文中，这个对象的值是
一个包含你的正则表达式中所有捕获分组匹配到的文本的一个数组。捕获分组的编号
是从1开始的，这与在正则表达式中向后引用的编号是一致的。数组中的元素0中保
存的是总的正则表达式匹配。
$1、$2等是特殊的只读变量。S1是的$～[1]简写，其中保存的是第一个捕获分组匹配
到的文本。$2能得到第二个分组的信息，以此类推。
命名捕获
如果你的正则表达式中使用了命名的捕获分组，那么就可以在代码中使用分组的名称
来获取它的匹配。
#
如果只是做一次性的快速检查，你可以使用如下的静态调用：
string resultString - Regex.Match(subjectString,
"http://(?[a-z0-9.-]+)").Groups["domain"].Value;
要想重复使用同一个正则式，那么就需要构造-个Regex对象：
((+[-'6-z-]ueop>):xbuqoxbax xb
string resultString=regexObj.Match(subjectString).Groups ["domain"].Value;
在C#中，对于命名分组和编号分组来说，获取Group对象的代码并没有实质上的区别。
这里我们不再使用一个整数来对Groups集合进行索引1，替代它的是一个字符串。另外
在这个例子中，如果一个分组不存在，那么.NET并不会产生一个例外。
Match.Groups["nosuchgroup"].Success只会简单地返回false。
VB.NET
如果只是做一次性的快速检查，你可以使用如下的静态调用：
Dim ResultString=Regex.Match(SubjectString,
"http://(?[a-z0-9.-]+)").Groups("domain") Value
要想重复使用同一个正则式，那么就需要构造一个Regex对象：
Dim RegexObj As New Regex("http://(?[a-z0-9.-]+)")
在VB.NET中，对于命名分组和编号分组来说，获取Group对象的代码并没有实质上
的区别。这里我们不再使用一个整数来对Groups集合进行索引，替代它的是一个字符
串。另外在这个例子中，如果一个分组不存在，那么.NET并不会产生一个例外。
Match.Groups["nosuchgroup"].Success只会简单地返回false。
142第3章
www.TopSage.com
---
## Page 159
PHP
if(preg_match('%http://(?P[a-z0-9.-]+)'，$subject,$groups)){
$result = $groups['domain'];
}else{
$result ='';
如果你的正则表达式中包含命名的捕获分组，那么赋给Sgroups的数组就是一个关联数
组（associativearray）。每个命名捕获分组所匹配到的文本会在该数组中添加两次。你
可以使用该分组的编号或者分组的名称来获得它所匹配到的文本。在上面的代码示例
中，$groups[0]保存的是总的正则匹配，而Sgroups[1]和$groups[domain]保存的是正则
表达式中的唯一捕获分组所匹配到的文本。
Perl
if ($subject =~·!http://(?[a-z0-9.-]+)!）{
$result = $+{′domain′};
}else{
Sresult ='';
）
Perl从5.10版开始支持命名捕获分组。“S+hash”会保存所有命名捕获分组匹配到的文
本。Perl中会把命名分组与编号分组一起进行编号。在这个例子中，S1和S+{name}
保存的都是这个正则表达式中的唯-一捕获分组所匹配到的文本。
Python
matchobj = re.search("http://(?P[a-z0-9.-]+)"，subject)
if matchobj:
result = matchobj.group("domain")
else:
result = ""
如果你的正则表达式中包含命名捕获分组，那么你在调用group(方法的时候，可以以
不使用分组编号，而使用分组的名称。