then the signature is generated using the RSASSA-PSS signature 
scheme as defined in RFC 3447 with SHA256 as the hash function.
• 
If ecdsap256 key parameter is used during the negotiation phase, the 
signature is generated with ECDSA using Curve P-256 and SHA256 as 
defined in ANSI.X9–62.2005 and FIPS.186–4.2013.
In case a browser acts as the client, then the browser itself has to generate 
the keys and maintain them against the hostname of the server. You can find the 
status of this feature development for Chrome from here (www.chromestatus.com/
feature/5097603234529280). Then again the token binding is not only for a browser, 
it’s useful in all the interactions between a client and a server—irrespective of the client 
being thin or thick.
 Proof of Possession
A token binding is established by a user agent (or the client) generating a private/
public key pair (possibly, within a secure hardware module, such as trusted platform 
module (TPM)) per target server, providing the public key to the server, and proving 
the possession of the corresponding private key, on every TLS connection to the server. 
The generated public key is reflected in the token binding ID between the client and the 
server. At the server end, the verification happens in two steps.
First, the server receiving the token binding message needs to verify that the key 
parameters in the message match with the token binding parameters negotiated 
and then validate the signature contained in the token binding message. All the key 
parameters and the signature are embedded into the token binding message.
Chapter 11  Oauth 2.0 tOken Binding
248
The structure of the token binding message is defined in the Token Binding Protocol 
specification (RFC 8471). A token binding message can have multiple token bindings 
(see Figure 11-3). A given token binding includes the token binding ID, the type of the 
token binding (provided or referred—we’ll talk about this later), extensions, and the 
signature over the concatenation of exported keying material (EKM) from the TLS layer, 
token binding type, and key parameters. The token binding ID reflects the derived public 
key along with the key parameters agreed upon the token binding negotiation.
Once the TLS connection is established between a client and a server, the EKM will 
be the same—both at the client end and at the server end. So, to verify the signature, 
the server can extract the EKM from the underneath TLS connection and use the token 
binding type and key parameters embedded into the token binding message itself. The 
signature is validated against the embedded public key (see Figure 11-3).
Figure 11-3. The structure of the token binding message
How to carry the token binding message from the client to the server is not defined 
in the Token Binding Protocol specification, but in the Token Binding for HTTP 
specification or the RFC 8473. In other words, the core token binding specification 
lets the higher-level protocols make the decision on that. The Token Binding for HTTP 
specification introduces a new HTTP header called Sec-Token-Binding—and it carries 
the base64url-encoded value of the token binding message. The Sec-Token-Binding 
Chapter 11  Oauth 2.0 tOken Binding
249
header field MUST NOT be included in HTTP responses—MUST include only once in an 
HTTP request.
Once the token binding message is accepted as valid, the next step is to make sure 
that the security tokens carried in the corresponding HTTP connection are bound to 
it. Different security tokens can be transported over HTTP—for example, cookies and 
OAuth 2.0 tokens. In the case of OAuth 2.0, how the authorization code, access token, 
and refresh token are bound to the HTTP connection is defined in the OAuth 2.0 Token 
Binding specification (https://tools.ietf.org/html/draft-ietf-oauth-token-
binding- 08).
 Token Binding for OAuth 2.0 Refresh Token
Let’s see how the token binding works for OAuth 2.0 refresh tokens. A refresh token, 
unlike authorization code and access token, is only used between the client and the 
authorization server. Under the OAuth 2.0 authorization code grant type, the client first 
gets the authorization code and then exchanges it to an access token and a refresh token 
by talking to the token endpoint of the OAuth 2.0 authorization server (see Chapter 4 for 
details). The following flow assumes the client has already got the authorization code 
(see Figure 11-4).
Figure 11-4. OAuth 2.0 refresh grant type
 1. The connection between the client and the authorization server 
must be on TLS.
 2. The client which supports OAuth 2.0 token binding, during the 
TLS handshake itself, negotiates the required parameters with the 
authorization server, which too supports OAuth 2.0 token binding.
Chapter 11  Oauth 2.0 tOken Binding
250
 3. Once the TLS handshake is completed, the OAuth 2.0 client will 
generate a private key and a public key and will sign the exported 
keying material (EKM) from the underlying TLS connection 
with the private key—and builds the token binding message. (To 
be precise, the client will sign EKM + token binding type + key 
parameters.)
 4. The base64url-encoded token binding message will be added 
as the value to the Sec- Token- Binding HTTP header to the 
connection between the client and the OAuth 2.0 authorization 
server.
 5. The client will send a standard OAuth request to the token 
endpoint along with the Sec-Token-Binding HTTP header.
 6. The authorization server validates the value of Sec-Token-Binding 
header, including the signature, and records the token binding 
ID (which is also included in the token binding message) against 
the issued refresh token. To make the process stateless, the 
authorization server can include the hash of the token binding 
ID into the refresh token itself—so it does not need to remember/
store it separately.
 7. Later, the OAuth 2.0 client tries to use the refresh token against the 
same token endpoint to refresh the access token. Now, the client 
has to use the same private key and public key pair used before 
to generate the token binding message and, once again, includes 
the base64url-encoded value of it to the Sec-Token-Binding HTTP 
header. The token binding message has to carry the same token 
binding ID as in the case where the refresh token was originally 
issued.
 8. The OAuth 2.0 authorization server now must validate the Sec-
Token-Binding HTTP header and then needs to make sure that 
the token binding ID in the binding message is the same as the 
original token binding ID attached to the refresh token in the 
same request. This check will make sure that the refresh token 
cannot be used outside the original token binding. In case the 
authorization server decides to embed the hashed value of the 
Chapter 11  Oauth 2.0 tOken Binding
251
token binding ID to the refresh token itself, now it has to calculate 
the hash of the token binding ID in the Sec-Token-Binding HTTP 
header and compare it with what is embedded into the refresh 
token.
 9. If someone steals the refresh token and is desperate to use it 
outside the original token binding, then he/she also has to steal 
the private/public key pair corresponding to the connection 
between the client and the server.
There are two types of token bindings—and what we discussed with respect to the 
refresh token is known as provided token binding. This is used when the token exchange 
happens directly between the client and the server. The other type is known as referred 
token binding, which is used when requesting tokens, which are intended to present 
to a different server—for example, the access token. The access token is issued in a 
connection between the client and the authorization server—but used in a connection 
between the client and the resource server.
 Token Binding for OAuth 2.0 Authorization  
Code/Access Token
Let’s see how the token binding works for access tokens, under the authorization code 
grant type. Under the OAuth 2.0 authorization code grant type, the client first gets the 
authorization code via the browser (user agent) and then exchanges it to an access token 
and a refresh token by talking to the token endpoint of the OAuth 2.0 authorization 
server (see Figure 11-5).
Chapter 11  Oauth 2.0 tOken Binding
252
 1. When the end user clicks the login link on the OAuth 2.0 client 
application on the browser, the browser has to do an HTTP GET 
to the client application (which is running on a web server), and 
the browser has to establish a TLS connection with the OAuth 
2.0 client first. The browser, which supports OAuth 2.0 token 
binding, during the TLS handshake itself, negotiates the required 
parameters with the client application, which too supports OAuth 
2.0 token binding. Once the TLS handshake is completed, the 
browser will generate a private key and public key (for the client 
domain) and will sign the exported keying material (EKM) from 
the underlying TLS connection with the private key—and builds 
the token binding message. The base64url-encoded token binding 
message will be added as the value to the Sec-Token-Binding HTTP 
header to the connection between the browser and the OAuth 2.0 
client—which is the HTTP GET.
 2. In response to step 1 (assuming all the token binding validations 
are done), the client will send a 302 response to the browser, asking 
to redirect the user to the OAuth 2.0 authorization server. Also in 
the response, the client will include the HTTP header Include-
Referred-Token-Binding-ID, which is set to true. This instructs the 
Figure 11-5. OAuth 2.0 authorization code flow
Chapter 11  Oauth 2.0 tOken Binding
253
browser to include the token binding ID established between the 
browser and the client in the request to the authorization server. 
Also, the client application will include two additional parameters 
in the request: code_challenge and code_challenge_method. 
These parameters are defined in the Proof Key for Code Exchange 
(PKCE) or RFC 7636 for OAuth 2.0. Under token binding, these two 
parameters will carry static values, code_challenge=referred_tb 
and code_challenge_method=referred_tb.
 3. The browser, during the TLS handshake itself, negotiates the 
required parameters with the authorization server. Once the TLS 
handshake is completed, the browser will generate a private key 
and public key (for the authorization server domain) and will 
sign the exported keying material (EKM) from the underlying 
TLS connection with the private key—and builds the token 
binding message. The client will send the standard OAuth 
request to the authorization endpoint along with the Sec-Token-
Binding HTTP header. This Sec-Token-Binding HTTP header now 
includes two token bindings (in one token binding message—see 
Figure 11-3), one for the connection between the browser and the 
authorization server, and the other one is for the browser and the 
client application (referred binding).
 4. The authorization server redirects the user back to the OAuth 
client application via browser—along with the authorization code. 
The authorization code is issued against the token binding ID in 
the referred token binding.
 5. The browser will do a POST to the client application, which also 
includes the authorization code from the authorization server. 
The browser will use the same token binding ID established 
between itself and the client application—and adds the Sec-Token-
Binding HTTP header.
 6. Once the client application gets the authorization code (and 
given that the Sec- Token- Binding validation is successful), it 
will now talk to the authorization server’s token endpoint. 
Chapter 11  Oauth 2.0 tOken Binding
254
Prior to that, the client has to establish a token binding with the 
authorization server. The token request will also include the 
code_verifier parameter (defined in the PKCE RFC), which will 
carry the provided token binding ID between the client and the 
browser—which is also the token binding ID attached to the 
authorization code. Since the access token, which will be issued 
by the authorization server, is going to be used against a protected 
resource, the client has to include the token binding between 
itself and the resource server into this token binding message as 
a referred binding. Upon receiving the token request, the OAuth 
2.0 authorization server now must validate the Sec-Token-Binding 
HTTP header and then needs to make sure that the token binding 
ID in the code_verifier parameter is the same as the original 
token binding ID attached to the authorization code at the point of 
issuing it. This check will make sure that the code cannot be used 
outside the original token binding. Then the authorization server 
will issue an access token, which is bound to the referred token 
binding, and a refresh token, which is bound to the connection 
between the client and the authorization server.
 7. The client application now invokes an API in the resource server 
passing the access token. This will carry the token binding 
between the client and the resource server.
 8. The resource server will now talk to the introspection endpoint 
of the authorization server—and it will return back the binding 
ID attached to the access token, so the resource server can check 
whether it’s the same binding ID used between itself and the 
client application.
 TLS Termination
Many production deployments do include a reverse proxy—which terminates the TLS 
connection. This can be at an Apache or Nginx server sitting between the client and 
the server. Once the connection is terminated at the reverse proxy, the server has no 
clue what happened at the TLS layer. To make sure the security tokens are bound to the 
Chapter 11  Oauth 2.0 tOken Binding
255
incoming TLS connection, the server has to know the token binding ID. The HTTPS 
Token Binding with TLS Terminating Reverse Proxies, the draft specification (https://
tools.ietf.org/html/draft-ietf-tokbind-ttrp-09), standardizes how the binding 
IDs are passed from the reverse proxy to the back-end server, as HTTP headers. The 
Provided-Token-Binding-ID and Referred-Token-Binding-ID HTTP headers are 
introduced by this specification (see Figure 11-6).
Figure 11-6. The reverse proxy passes the Provided-Token-Binding-ID and 
Referred-Token-Binding-ID HTTP headers to the backend server
 Summary
• 
OAuth 2.0 token binding proposal cryptographically binds security 
tokens to the TLS layer, preventing token export and replay attacks.
• 
Token binding relies on TLS—and since it binds the tokens to the 
TLS connection itself, anyone who steals a token cannot use it over a 
different channel.
• 
We can break down the token binding protocol into three main 
phases: negotiation phase, key generation phase, and proof of 
possession phase.
• 
During the negotiation phase, the client and the server negotiate a set 
of parameters to use for token binding between them.
• 
During the key generation phase, the client generates a key pair 
according to the parameters negotiated in the negotiation phase.
• 
During the proof of possession phase, the client uses the keys 
generated in the key generation phase to prove the possession.
Chapter 11  Oauth 2.0 tOken Binding
257
© Prabath Siriwardena 2020 
P. Siriwardena, Advanced API Security, https://doi.org/10.1007/978-1-4842-2050-4_12
CHAPTER 12
Federating Access to APIs
One of the research performed by Quocirca (analyst and research company) confirms 
that many businesses now have more external users who interact with enterprise 
applications than internal ones. In Europe, 58% of businesses transact directly with users 
from other firms and/or consumers. In the United Kingdom alone, the figure is 65%.
If you look at recent history, most enterprises today grow via acquisitions, mergers, 
and partnerships. In the United States alone, the volume of mergers and acquisitions 
totaled $865.1 billion in the first nine months of 2013, according to Dealogic. That’s a 
39% increase over the same period of the previous year and the highest nine-month total 
since 2008. What does this mean for securing APIs? You need to have the ability to deal 
with multiple heterogeneous security systems across borders.
 Enabling Federation
Federation, in the context of API security, is about propagating user identities across 
distinct identity management systems or distinct enterprises. Let’s start with a simple 
use case where you have an API exposed to your partners. How would you authenticate 
users for this API from different partners? These users belong to the external partners 
and are managed by them. HTTP Basic authentication won’t work. You don’t have access 
to the external users’ credentials, and, at the same time, your partners won’t expose 
an LDAP or a database connection outside their firewall to external parties. Asking for 
usernames and passwords simply doesn’t work in a federation scenario. Would OAuth 
2.0 work? To access an API secured with OAuth, the client must present an access token 
issued by the owner of the API or issued by an entity that your API trusts. Users from 
external parties have to authenticate first with the OAuth authorization server that the 
API trusts and then obtain an access token. Ideally, the authorization server the API 
trusts is from the same domain as the API.
Neither the authorization code grant type nor the implicit grant type mandates how 
to authenticate users at the authorization server. It’s up to the authorization server to 
258
decide. If the user is local to the authorization server, then it can use a username and 
password or any other direct authentication protocol. If the user is from an external 
entity, then you have to use some kind of brokered authentication.
 Brokered Authentication
With brokered authentication, at the time of authentication, the local authorization 
server (running in the same domain as the API) does not need to trust each and every 
individual user from external parties. Instead, it can trust a broker from a given partner 
domain (see Figure 12-1). Each partner should have a trust broker whose responsibility 
is to authenticate its own users (possibly through direct authentication) and then pass 
the authentication decision back to the local OAuth authorization server in a reliable 
and trusted manner. In practice, an identity provider running in the user’s (in our case, 
the partner employees’) home domain plays the role of a trust broker.
Figure 12-1. Brokered authentication for OAuth client applications
Chapter 12  Federating aCCess to apis
259
The trust relationship between the brokers from partners and the local OAuth 
authorization server (or between two federation domains) must be established out 