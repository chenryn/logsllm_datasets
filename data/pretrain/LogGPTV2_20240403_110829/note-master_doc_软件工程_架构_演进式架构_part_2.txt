### 低代码/4GL
这类工具注定无法完成过于定制化的需求
### 滥用复用
复用是有代价的 复用性越高 易用性越低
- 重复优于耦合（微服务）
### 为新而新
### 组织架构跟软件架构不一致
### 发布过慢
### 产品定制
- 不同的条件化功能会加重测试负担
### 报表
- 其几乎耦合了整个系统的大部分
### 看的太远
## 遗留系统现代化
> 遗留系统: 仍在使用过时技术但至关重要的系统
现代化的价值：
1. 数据资产
2. 蕴含的丰富业务知识
遗留系统的认知负载：
- 分布在各处的业务知识
- 难以获取的系统知识：具体实现细节，包括模块的划分、架构的取舍，以及每一个技术决策的原因
遗留系统改造的难点：
- 容易出错
- 软件复杂度高，不知从何入手
- 复杂度不会消失，只会从一个地方转移到另外一个地方
遗留系统的增量演进：
1. 代码增量：先把代码复制出来一份，在复制的代码处进行重构。等重构完毕，再通过某种开关，来控制新旧代码的切换
2. 架构增量：架构演进
### 四个现代化
1. 代码现代化：[重构](/软件工程/软件设计/代码质量/代码重构.md)提升代码质量，增强可测试性，为了对遗留系统进行测试，要在不修改其代码的情况下进行测试，此时可以通过代码的接缝来进行测试：可以被修改的状态、可以操控的行为、以及代码模块本身暴露的接口，通过对这些对象操控来进行测试验证
2. 架构现代化：进行更合理的规划，清晰明确各模块组件职责及边界
3. DevOps现代化：自动化手段降低开发运维成本
4. 团队结构现代化：更合理的团队结构使得演进更容易
### 策略
1. 退休：评估完工作量、使用情况和业务价值之后，选择完全停止使用的一种策略
2. 维持原样：对于尚可满足使用的遗留系统，保持系统当前的状态不做任何修改或更新
3. 封装：将遗留系统中的数据或者功能封装成 API，供外部调用
4. 替换运行平台：只需要对代码做少量更改，以适配新的平台。这样，只通过较小的成本就可以降低基础设施的成本，并提高性能
5. 基础设施迁移：完全不需要修改代码，而只需要迁移部署的环境
6. 重构：不改变系统外部行为的前提下，对代码或架构进行调整、优化，以偿还拖欠已久的技术债务、改善非功能需求、提升系统健康度。
7. 重写：对应用程序的某个组件或某个服务的重新设计或重写或彻底淘汰应用程序的所有组件，去构建或购买新的软件
### 持续集成
遗留系统加入持续集成流水线，由于历史原因，没有单元测试，在现代化早期可以裁剪掉单元测试，只要初步引入工具链，简单的静态代码扫描，就是一种进步
## 服务架构演进
> **Unix的分布式设计哲学**
> 保持接口与实现的简单性，比系统的任何其他属性，包括准确性、一致性和完整性，都来得更加重要。
传统架构 -> 分布式架构 -> SOA（Service-Oriented Architecture）架构 -> 微服务架构
### 原始分布式时代
上世纪7 80年代 当时计算机硬件局促的运算处理能力，已直接妨碍到了在单台计算机上信息系统软件能够达到的最大规模。为突破硬件算力的限制，各个高校、研究机构、软硬件厂商开始分头探索，寻找使用多台计算机共同协作来支撑同一套软件系统运行的可行方案
这个时代提出了RPC的雏形以及日后分布式文系统的最早实现AFS
“调用远程方法”与“调用本地方法”尽管只是两字之差，但若要同时兼顾到简单、透明、性能、正确、鲁棒、一致的话，两者的复杂度就完全不可同日而语
**某个功能能够进行分布式，并不意味着它就应该进行分布式，强行追求透明的分布式操作，只会自寻苦果**
这个时间段过后的一端时间 摩尔定律的黄金时代 计算机的算力不断提升 在日后的一端时间 单体软件架构还是主流
### 单体系统时代
在微服务盛行的这段日子 单体系统好像总是以反派身份登场 但对于小型系统 不论是开发 测试 部署，单体系统都有着不可比拟的优越性
乍一看单体架构的缺点似乎会是不可拆分 难以扩展 无法继续支撑越来越大的软件规模
但几乎所有的单体系统都会进行分层拆分：
![分层架构](/assets/202011813502.png)
单体系统的缺陷在于拆分之后的隔离与自治能力上的欠缺，所有的代码都会运行在同一进程空间之内
传统的架构，分为三层架构 web控制层、业务逻辑层、数据库访问层
一旦发生问题 问题就会扩散到整个系统，并且如果想要发布新版本 维护也是一个难题
**为了允许程序出错，为了获得隔离、自治的能力，为了可以技术异构等目标，是继为了性能与算力之后，让程序再次选择分布式的理由**
### SOA时代
- 烟囱式架构：指的是一种完全不与其他相关信息系统进行互操作或者说协调工作的设计模式
- [微内核架构](/软件工程/架构模式/架构模式.md#微内核架构)：也被称为插件式架构，将公共服务、数据、资源集中到一块，成为一个被所有业务系统共同依赖的核心，具体的业务系统以插件模块（Plug-in Modules）的形式存在
![2020118135845](/assets/2020118135845.png)
- 事件驱动架构：通过一个事件管道，各个自系统通过发送/接收事件的方式进行交互
![202011814010](/assets/202011814010.png)
SOA是集成的思想，使用ESB集成现有的老系统，是解决服务孤岛打通链条，是无奈之举
SOA的终极目标是希望总结出一套自上而下的软件研发方法论，所以SOA本身有着许多规范，但正是由于过于严格的规范定义带来过度的复杂性
### 微服务时代
> 轻量级 围绕业务 异构 自动化
在微服务的早期 它还是被作为SOA的一种补充手段
- SOA是把多个系统整合，而微服务是把单个系统拆开来
微服务追求的是更加自由的架构风格，摒弃了几乎所有SOA里可以抛弃的约束和规定
### 后微服务时代
>从软件层面独力应对微服务架构问题，发展到软、硬一体，合力应对架构问题的时代
这里的硬件指的更多是诸如容器 虚拟化技术等为主的基础设施
为了解决在硬件上的服务治理粒度过粗的问题，这个时代完成了第二次进化，也就是[服务网格](/软件工程/微服务/ServiceMesh/ServiceMesh.md)的引入，到目前为止，服务网格还算是个新概念，仍然还在发展
### 另外一条路-[Serverless](/软件工程/架构/Serverless.md)
>如果说微服务架构是分布式系统这条路的极致，那无服务架构，也许就是“不分布式”的云端系统这条路的起点
- 后端设施：指数据库、消息队列、日志、存储，等等这一类用于支撑业务逻辑运行，称其为后端即服务
- 函数：指的业务逻辑代码
无服务的无状态特征天生就不适合做某些事，或许在某些场景下，它会做的更好，但长期来看，还是为以服务架构为主