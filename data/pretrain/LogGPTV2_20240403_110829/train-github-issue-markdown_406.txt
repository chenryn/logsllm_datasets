### Use Case: Precision and Recall Data for Classifiers with `predict_proba`

When working with classifiers that provide probability estimates via the `predict_proba` method, it is often useful to evaluate precision and recall across different probability thresholds. This can be easily achieved by modifying the current implementation in `cross_validation.py`.

### Current Limitation

The current implementation of `_cross_val_score` in `cross_validation.py` raises a `ValueError` if the score is not a numeric type:

```python
if not isinstance(score, numbers.Number):
    raise ValueError
```

This restriction prevents the function from returning more complex data structures, such as lists of precision and recall values for different probability thresholds.

### Proposed Solution

To address this limitation, we propose changing the `ValueError` to a warning. This modification allows `cross_val_score` to perform the type check before converting scores to a NumPy array. If the scores are of an incompatible type (e.g., a list of precision and recall values), the function can return the scores as a plain list instead of raising an error.

### Implementation

Here is a suggested implementation:

1. **Modify the Type Check**:
   - Replace the `ValueError` with a warning in `_cross_val_score`.

2. **Update `cross_val_score`**:
   - Add a check to convert scores to a NumPy array only if they are numeric.
   - Return scores as a plain list if they are of an incompatible type.

### Example Code

```python
import warnings
import numpy as np
from sklearn.utils import _safe_indexing

def _cross_val_score(estimator, X, y, cv, scoring, groups=None):
    scores = []
    for train, test in cv.split(X, y, groups):
        X_train, y_train = _safe_indexing(X, train), _safe_indexing(y, train)
        X_test, y_test = _safe_indexing(X, test), _safe_indexing(y, test)
        
        estimator.fit(X_train, y_train)
        score = scoring(estimator, X_test, y_test)
        
        if not isinstance(score, numbers.Number):
            warnings.warn("Score is not a numeric type. Returning as a list.")
        
        scores.append(score)
    
    try:
        scores = np.array(scores)
    except ValueError:
        # Scores are not compatible with np.array, return as a list
        return scores
    
    return scores
```

### Benefits

- **Flexibility**: The modified function can handle more complex score types, such as lists of precision and recall values.
- **Usability**: Users can easily obtain and analyze precision and recall data across different probability thresholds without encountering errors.

By implementing these changes, the `cross_val_score` function will become more versatile and better suited for evaluating classifiers with `predict_proba` methods.