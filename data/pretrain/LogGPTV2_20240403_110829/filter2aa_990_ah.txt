基础上提出的，利用此类技术能够自动地发现代码中的安全缺陷和违
背安全规则的情况。目前主流的分析技术包括：1）词法分析技术，
只对代码的文本或 Token 流与已知归纳好的缺陷模式进行相似匹配，
不深入分析代码的语义和代码上下文。词法分析检测效率较高，但是
只能找到简单的缺陷，并且误报率较高。2）抽象解释技术，用于证
明某段代码没有错误，但不保证报告错误的真实性。该技术的基本原
理是将程序变量的值映射到更加简单的抽象域上并模拟程序的执行
云计算开源产业联盟                                                        研发运营安全白皮书 
33 
情况。因此，该技术的精度和性能取决于抽象域对真实程序值域的近
似情况。3）程序模拟技术，模拟程序执行得到所有执行状态，分析
结果较为精确，主要用于查找逻辑复杂和触发条件苛刻的缺陷，但性
能提高难度大。主要包括模型检查和符号执行两种技术，模型检查将
软件构造为状态机或者有向图等抽象模型，并使用模态/时序逻辑公
式等形式化的表达式来描述安全属性，对模型遍历验证这些属性是否
满足；符号执行使用符号值表示程序变量值，并模拟程序的执行来查
找满足漏洞检测规则的情况。4）定理证明技术，将程序错误的前提
和程序本身描述成一组逻辑表达式，然后基于可满足性理论并利用约
束求解器求得可能导致程序错误的执行路径。该方法较为灵活性，能
够使用逻辑公式方便地描述软件缺陷，并可根据分析性能和精度的不
同要求调整约束条件，对于大型工业级软件的分析较为有效。5）数
据流分析技术，数据流分析技术基于控制流图，按照某种方式扫面控
制流图的每一条指令，试图理解指令行为，以此判断程序中存在的威
胁漏洞。数据流分析的通用方法是在控制流图上定义一组方程并迭代
求解，一般分为正向传播和逆向传播，正向传播就是沿着控制流路径，
状态向前传递，前驱块的值传到后继块；逆向传播就是逆着控制流路
径，后继块的值反向传给前驱块。 
静态应用程序安全测试（SAST）使用功能主要包括：1）代码提
交、集成，在用户 IDE 环境中集成代码静态检测插件进行代码检查，
对发现的问题能够直接显示在 IDE 上。将代码提交到远程仓库时，触
发代码检查，系统会先去拉取代码，再执行代码扫描，扫描时支持全
云计算开源产业联盟                                                        研发运营安全白皮书 
34 
量与增量代码扫描方式。构建时，支持每日定时设置，每天执行代码
检查，同时也支持根据需要手动触发检查。2）风险展示与处理，扫
描结束后，会在代码扫描系统及代码仓库上展示整体风险趋势变化，
包括新增、修复、遗留告警、项目代码质量状态展示等，同时支持各
个告警详情查看，包括风险等级、错误代码片段、问题描述、修复指
导等。支持用户对告警进行标记，包括确认、误报、设计如此等多种
场景。3）可扩展性，支持用户自定义规则扫描，也支持单个告警/批
量告警/路径屏蔽等功能，便于提高与业务场景的契合度。 
目前静态应用程序安全测试（SAST）主要厂商包括国外的
Synopsys、Checkmarx、Veracode 等，以及国内的奇安信、默安科技
等。 
2. 软件组成分析 
软件组成分析（SCA）主要针对开源组件，通过扫描识别开源组
件，获取组件安全漏洞信息、许可证等信息，避免安全与法律法规风
险。开源软件相比于闭源软件，带来了如获取便捷、降低成本等诸多
好处，但相比于闭源软件，由于开源软件的所有权和使用权分离，如
果使用不当，会导致最终的使用用户被迫承受风险。因此在使用中用
户仍然需要注意遵循相关规则，例如遵循开源许可证的相关要求和监
管条例、甚至需要公开自有的商业代码等，对引入和使用过程中潜在
的安全风险进行有效监管。 
云计算开源产业联盟                                                        研发运营安全白皮书 
35 
目前来看，开源软件主要涉及的安全风险为以下三点：不清楚具
体引用或使用了哪些开源组件、对开源许可证引入的知识产权和合规
风险、开源软件自身的安全风险。 
现有的开源扫描技术分为五种，1）通过进行源代码片段式比对
来识别组件并识别许可证类型；2）对文件级别提取哈希值，进行文
件级哈希值比对，若全部文件哈希值全部匹配成功则开源组件被识别；
3）通过扫描包配置文件读取信息，进行组件识别从而识别组件并识
别许可证类型；4）对开源项目的文件目录和结构进行解析，分析开
源组件路径和开源组件依赖；5）通过编译开源项目并对编译后的开
源项目进行依赖分析，这种方式可以识别用在开源项目中的开源组件
信息。 
上述 5 种识别技术的识别速度是依次增快的，并且组件物料清单
的完整性也是依次增高的。源代码片段识别出的开源组件的数量较多，
但因为源代码片段比对受行数和关键词位置影响，识别出的开源组件
的误报率通常较高，且识别出的开源组件需要手动确认，对操作人员
的技术能力要求较高；其他 3 类识别出的开源组件数量通常少于源代
码片段识别，但因为哈希值的不变性，其识别出的开源组件的误报率
较低，同时相比于开源代码片段识别，由于源代码被改写生成哈希值
也会随之改变，因此漏报率通常比源代码片段识别高。 
主流的安全漏洞检测原理为两种，第一种方法是依据获取到的开
源组件名称和版本号信息，在公开的 CVE 或 CNVD 库里去查寻该版本
曾经出现过的漏洞；第二种方法是通过程序分析技术，获取到开源组
云计算开源产业联盟                                                        研发运营安全白皮书 
36 
件名称、版本信息和引用的函数，依据企业的商业漏洞库去匹配所引
用的函数是否会造成漏洞。方法二的准确性远远高于方法一，但是实
现难度也非常大。 
针对开源组件自身安全风险，与传统的软件漏洞修复流程不同的
是并不对开源软件做漏洞修补工作，开源软件漏洞治理通常会依靠扫
描技术发现存有安全漏洞的开源软件版本号，与当前最新版本号做匹
配，进行替换。因此开源软件的版本号管理、漏洞更新及跟踪工作也
十分重要。 
目前软件组成分析（SCA）主要厂商包括国外的 Synopsys、Micro 
Focus、WhiteHat Security 等，以及国内的奇安信、棱镜七彩等。 
3. 交互式应用程序安全测试 
交互式应用程序安全测试（IAST）是 2012 年 Gartner 公司提出
的一种新的应用程序安全测试方案，通过代理和在服务端部署的
Agent 程序，收集、监控 Web 应用程序运行时请求数据、函数执行，
并与扫描器端进行实时交互，高效、准确的识别安全漏洞，同时可准
确确定漏洞所在的代码文件、行数、函数及参数。 
交互式应用程序安全测试（IAST）主要在三方面做工作：流量采
集、Agent 监控、交互扫描。1）流量采集，指采集应用程序测试过程
中的 HTTP/HTTPS 请求流量，采集可以通过代理层或者服务端 Agent。
采集到的流量是测试人员提交的带有授权信息有效数据，能够最大程
度避免传统扫描中因为测试目标权限问题、多步骤问题导致扫描无效；
同时，流量采集可以省去爬虫功能，避免测试目标爬虫无法爬取到导
云计算开源产业联盟                                                        研发运营安全白皮书 
37 
致的扫描漏水问题。2）Agent 监控，指部署在 Web 服务端的 Agent 程
序，一般是 Web 服务编程语言的扩展程序，Agent 通过扩展程序监控
Web 应用程序性运行时的函数执行，包括 SQL 查询函数、命令执行函
数、代码执行函数、反序列化函数、文件操作函数、网络操作函数，
以及 XML 解析函数等有可能触发漏洞利用的敏感函数。3）交互扫描，
指 Web 应用漏洞扫描器通过 Agent 监控辅助，只需要重放少量采集到
的请求流量，且重放时附带扫描器标记，即可完成对 Web 应用程序漏
洞的检测。例如在检测 SQL 注入漏洞时，单个参数检测，知名开源 SQL
注入检测程序 SQLMAP 需要发送上千个 HTTP 请求数据包；交互扫描只
需要重放一个请求，附带上扫描器标记，Agent 监控 SQL 查询函数中
的扫描器标记，即可判断是否存在漏洞，大大减少了扫描发包量。 
目前交互式应用程序安全测试（IAST）主要厂商包括国外的
Synopsys、Veracode 等，以及国内的悬镜安全、默安科技等。 
4. 动态应用程序安全测试 
动态应用程序安全测试（DAST）技术在测试或运行阶段分析应用
程序的动态运行状态。它模拟黑客行为对应用程序进行动态攻击，分
析应用程序的反应，从而确定该应用是否易受攻击。 
以 Web 网站测试为例对于动态应用程序安全测试进行介绍，主要
包括三个方面的内容：1）信息收集，测试人员在测试开始前，需要
收集待测试网站的全部 URL，包括静态资源和动态接口等，每一条 URL
需要包含路径和完整的参数信息。测试人员收集 URL 的方式包括但不
限于：（1）从网站源代码中获取 URL 的路径和参数信息，（2）编写
云计算开源产业联盟                                                        研发运营安全白皮书 
38 
网络爬虫对目标网站进行爬取，获得网站每一个页面中包含的全部
URL 信息。网络爬虫不仅要具备静态页面的爬取和分析能力，同时也
要具备对 Web2.0 时代新型的动态展示页面的爬取和分析能力。此外，
网络爬虫在最终输出结果前，应当具备以某种规则对 URL 列表进行去
重的能力，（3）在目标网站的服务器上安装 Web 流量采集工具，该
工具会记录该网站所有的 Web 请求。测试人员模拟正常访问把目标网
站的所有功能都是访问一遍，随后从流量采集工具中导出全部请求信
息，从中提取出网站的 URL 列表。除了收集 URL，测试人员还要解决
目标网站访问权限的问题。如果网站的部分功能需要账号登录后才能
访问，则测试人员需准备一套或多套能满足测试要求的账号密码信息，
并将信息传递到安全测试工具中，且保证测试过程产生的数据包都有
携带登录态信息。2）测试过程，测试开始前，测试人员应当将测试
所需的 URL 列表导入到测试工具中。导入的方式包括但不限于：（1）
手工从测试工具的管理页面逐条添加，（2）测试工具本身提供 API 接
口，测试人员可以通过编写程序调用该 API 接口进行提交，（3）测
试人员将 URL 集合按照一定的格式写入到文件中，然后上传到测试工
具的服务器上，使得后者可以读取。测试工具需要提供“检测风险项”
的选择列表，测试人员可根据测试计划选择不同的风险检测项。测试
工具在测试过程中，应当对访问目标网站的速度进行控制，保证目标
网站不会因为同一时刻的请求数过高，导致网站响应变慢或崩溃。测
试人员在设定测试任务的基本信息时，应当根据目标网站的性能情况
填入“每秒请求数”的最大值。测试工具在测试过程中应当保证每秒
云计算开源产业联盟                                                        研发运营安全白皮书 
39 
发送请求的总数不超过该数值。3）测试报告，在安全测试各步骤都
完成后，输出测试报告。测试报告一般包含总览页面，内容包括：（1）
根据测试过程产生的各种数据，输出目标网站安全性的概要性结论；
（2）测试过程发现的总漏洞数，以及按照不同安全等级维度进行统
计的漏洞数据。测试报告应详细列出每一项风险的详细信息。详细信
息包括：风险名称、风险等级、修复方案等关于风险的基本信息，证
明风险存在的证据，包括复现风险情况的步骤和方法，测试过程中被
用于证实存在风险的原始请求数据包和网站响应数据包，以及在原始
请求数据包中指出触发漏洞的关键点。 
目前动态应用程序安全测试（DAST）主要厂商及工具包括国外的
Micro Focus Fortify WebInspect、Veracode 等，以及国内的各类
安全漏洞扫描工具等。 
5. 实时应用自我保护 
实时应用自我保护（RASP）是一种运行时应用自我保护程序，可
自身注入到应用程序中，与应用程序融为一体，实时监测、阻断攻击，
使程序自身拥有自保护的能力，并且应用程序无需在编码时进行任何
的修改，只需进行简单的配置即可。通过 RASP 可以实现对关键函数
的监控，获取关键函数的参数信息（如对数据库操作进行监控）。 
通过 RASP 的基本原理是注入到被保护的应用中，替换关键函数，
获取到应用运行时的上下文，根据运行时上下文或者敏感操作，对攻
击进行精准的识别或拦截。实时采集 Web 应用的高风险行为，在安全
测试阶段可以辅助测试人员提前发现安全漏洞，在业务线上运行阶段
云计算开源产业联盟                                                        研发运营安全白皮书 
40 
可以实时检测到外部攻击和漏洞利用，可检测的风险包括 SQL 注入、
命令注入、代码执行、上传漏洞、文件读取等。同时通过特征规则、
上下文语义分析及第三方安全产品数据关联分析等多种安全模型来
提升检测准确率，相较于传统 Web 应用安全产品，RASP 从海量的攻
击中排除掉了大量的无效攻击，聚焦发现真实的安全威胁。 