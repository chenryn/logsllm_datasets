0x33
51
(gdb)x/1i $eip
0x809c89d:
mov
DWORD PTR[edx+ebp*1+Ox10],eax
此外也显示了FFmpeg试图保存EAX寄存器值的地址。
(gdb）x/1x$edx+$ebp+0x10
0x855ffd0:
0xb7dd4d40
不出所料，FFmpeg试图把EAX寄存器的值写到memalign（)的GOT人口提供
的地址（0x855ffdo）。
(gdb）shell cat/proc/$(pidof ffmpeg_g)/maps
08048000-0855f000r-xp0000000008:01 101582
/home/tk/BHD/ffmpeg_relro/ffmpeg_g
0855f000-08560000Y--p0051600008:01101582
/home/tk/BHD/ffmpeg_relro/ffmpeg_g
285000 T0:80 0000500d-MI00009980-00009580
/home/tk/BHD/ffmpeg_relro/ffmpeg_g
0856c000-0888c000 rw-p 0856c000 00:00 0
0a834000-0a855000 rw-p 0a834000 00:000
[heap]
000:000000900qd-mI 000090q-00009q
b7d61000-b7ebd000r-xp
00000000 08:01 148202
/lib/tls/i686/cmov/libc-2.9.so
b7ebdoo0-b7ebe000
---p 0015c000 08:01 148202
/lib/tls/i686/cmov/1ibc-2.9.so
b7ebe000-b7ec0000
I--p 0015c00008:01 148202
/lib/tls/i686/cmov/libc-2.9.s0
b7ec0000-b7ec1000
rw-p 0015e00008:01 148202
/lib/tls/i686/cmov/libc-2.9.so
b7ec1000-b7ec5000
0rw-pb7ec1000 00:000
b7ec5000-b7ec7000
r-xp0000000008:01 148208
/lib/tls/i686/cmov/1ibdl-2.9.so
b7ec7000-b7ec8000
I--p0000100008:01 148208
/lib/tls/i686/cmov/1ibdl-2.9.so
b7ec8000-b7ec9000
rw-p 0000200008:01 148208
/lib/tls/i686/cmov/1ibdl-2.9.s0
b7ec9000-b7eed000
r-xp
00000000 08:01 148210
/lib/tls/i686/cmov/1ibm-2.9.s0
b7eed000-b7eee000
0r--p0002300008:01 148210
/lib/tls/i686/cmov/1ibm-2.9.s0
b7eee000-b7eef000
rw-p 00024000 08:01 148210
/1ib/tls/i686/cmov/1ibm-2.9.s0
b7efc000-b7efe000
rw-p b7efc000 00:00 0
b7efe000-b7effo00
0r-xp b7efe000 00:000
[vdso]
b7eff000-b7f1b000
r-xp 00000000 08:01 130839
/1ib/1d-2.9.s0
b7f1b000-b7f1c000I--p0001b00008:01130839
/lib/1d-2.9.so
b7f1c000-b7f1d000 rw-p 0001c000 08:01 130839
/lib/1d-2.9.so
bfb07000-bfb1c000 rw-p bffebo00 00:00 0
[stack]
---
## Page 83
68第4章空指针万岁
这一次FFmpeg在试图覆写只读的GOT人口（见地址0855fo00到o8560000
处GOT的r--p权限）时由于段错误而崩溃。看来完全RELRO技术确实可以成
功地缓解GOT覆写。
4.4经验和教训
作为一名程序员：
口不要混淆不同的数据类型；
口了解编译器自动进行的隐蔽转换。这些隐式的转换非常微妙，会导致大量
的安全bug”（见A.3节）；
口扎实掌握C语言的类型转换；
口不是所有的用户空间空指针解引用都是拒绝服务攻击（DoS）那么简单，
其中有一些是非常严重的漏洞，会导致任意代码执行；
口完全RELRO能帮助缓解GOT覆写漏洞利用技术。
作为一名媒体播放器的用户：
口永远不要相信媒体文件扩展名（见2.5节）
4.5补充
2009年1月28日，星期三
漏洞已经修复（图4-9显示了时间表），新版本的FFmpeg也可以获得了，因
此我在自己的网站上发布了详细的安全报告。这个bug编号是CVE-2009-0385。
FFMPeg维护者打补丁
FFMpe9维护者得到通如
FFMpe9修补版发布
我的安全报告公开
01.27.2009
01.28.2009
图4-9FFmpegbug从告知到发布修复版本的时间表
附注
[1]见http://wiki.multimedia.cx/index.php?title-YouTube（短址为http:/bit.ly/xDbNah）。
[2]见http://ffmpeg.org/download.html（短址为http://bit.ly/wHaMSs）。
---
## Page 84
4.5补充69
）
[4]4X电影文件格式的详细介绍可从以下网址找到：http://wiki.multimedia.cx/index.php？
title-4xm_Format（短址为http:/bit.ly/xqBSYr）。
[5]见http://www.trapkit.de/books/bhd/（短址为http://bit.ly/yZX6td）。
[6]FFmpeg维护者提供的补丁可从以下网址得到：http://git.videolan.org/?p=ffmpeg.git;a-
commitdiff;h=0838cfdc8a10185604db5cd9d6bffad71279a0e8（短址为http:/bit.ly/AEpLF3）。
[7]关于类型转换及相关安全问题的更多信息可参考MarkDowd、JohnMcDonald和Justin
Schuh的TheArtofSoftwareSecurityAssessment:IdentifyingandPreventingSoftware
Vulnerabilities（Indianapolis,IN:Addison-WesleyProfessional,2007）。可获得的样章参见
http://bit.ly/xjWPgB)
[8]我的描述这个FFmpeg漏洞细节的安全报告可从以下网址找到：http://www.trapkit.de/
advisories/TKADV2009-004.txt（短址为http://bit.ly/x7jozO）
---
## Page 85
5
浏览即遭劫持
2008年4月6日，星期日
现在，浏览器和浏览器插件中的漏洞开始流行起来，因此我打算查看-一些
ActiveX控件。第-个查看的就是商业领域中广泛使用的思科在线会议、网络会议
软件WebEx。花了一些时间逆向工程WebEx的微软IE浏览器ActiveX控件后，
我找到了一个很明显的bug，如果我使用模糊测试方法而不是读汇编代码，几秒
钟内就能找到它。真没成就感。@
5.1探寻漏洞
寻找漏洞的步骤如下。
以下步骤中我使用的平
口第一步：列出WebEx注册的对象和导出
台是32位windowsXPSP3撬作
方法。
系统和IE6.
口第二步：在浏览器中测试导出方法。
口第三步：找到二进制文件中的对象方法。
口第四步：找到用户控制的输人数值。
口第五步：逆向工程这个对象方法。
---
## Page 86
5.1探寻漏洞71
注意以下网址中可以找到下载这个漏洞版本的WebEx会议管理软件（WebEx
MeetingManager）的链接：http://www.trapkit.de/books/bhd/。
5.1.1第一步：列出WebEx注册的对象和导出方法
下载安装WebEx会议管理软件之后，我运行COMRaider，生成一份控件提
供给调用者的导出接口清单。点击COMRaider的Start按钮并且选择“扫描目录
查找已注册的COM服务”（ScanadirectoryforregisteredCOMservers）来测试
WebEx组件。
如图5-1所示，WebEx安装自录下注册了两个对象，而GUID为{32E26FD9
F435-4A20-A561-35D4B987CFDC}、ProgID为WebexUCFObject.WebexUCF-
Object.1的对象实现了IObjectSafety接口。IE会信任这个对象，因为它标记为可
该对象可能成为“浏览即遭劫持”（browseandyou'reowned）攻击的目标，因为
它的方法有可能会从网页中调用。[2]
2clasesfundtoobjectsregisteredinths pah
(ED6E2E93-0AA1-11D4-ABA6-0060082AA75C)GpcContainet.GpcCont
dFCProgamFl\WebExwebE824tobdDesnWebUCFObctCla
Piogio
WebexUCFObiectWebexUCF0beGUID(32E26FD9F435-4A20A561-35D48987CFDC)
udk Noles
RegkeySaleloScrFae
SaetyReoe
IDisp Sale:Sale for unlu
ectSafty.True
cled caler,dsl
图5-1COMRaider中WebEx注册的对象
微软也提供了一个方便的C#类ClassId.cs3]，它可以列出ActiveX控件的各
种属性。为使用这个类，我在源文件中添加了如下几行，并用VisualStudio的C#
命令行编译器（csc）编译。
[..]
namespace ClassId
class ClassId
static void Main(string[] args)
---
## Page 87
72第5章浏览即遭劫持
SWI.ClassId_q.ClassId clsid = new SWI.ClassId_q.ClassId();
if （args.Length == o|l（args[o].Equals(/?")== true |1
args[o].ToLower().StartsWith("-h")==true）11
args.Length\n");
return;
clsid.set_clsid(args[o]);
System.Console.WriteLine(clsid.ToString());
在命令提示符窗口运行以下命令，编译并使用这个工具。
C:\Documents and Settings\tk\Desktop>csc /warn:o/nologo ClassId.cs
C:\Documents and Settings\tk\Desktop>ClassId.exe {32E26FD9-F435-4A20-A561-35D4B987CFDC}
Clsid:{32E26FD9-F435-4A20-A561-35D4B987CFDC}
Progid:WebexUCFObject.WebexUCFObject.1
BinaryPath:C:\ProgramFiles\WebEx\WebEx\824\atucfobj.d11
Implements IobjectSafety:True
Safe For Initialization (IobjectSafety):True
Safe For Scripting（IobjectSafety):True
Safe For Initialization (Registry):False
Safe For Scripting (Registry):False
KillBitted:False
工具的输出显示这个对象确实是通过IObjectSafety接口标记为可安全初始
化和可安全执行脚本的。
然后点击COMRaider中的Select按钮，查看GUID为{32E26FD9-F435-4A20-
A561-35D4B987CFDC的对象导出的公共方法列表。如图5-2所示，该对象导出
的方法NewObject()以一个字符串值作为输人。
区
COMSeCPogFfeWWebEacdd
 Shoule
ATUCFOBJLb
Function Newobject（
As Long
Byual bstrConpNane As String
O IwebexUCFAutho
erDbe
Jsenghi cick
teluzz fles
图5-2GUID为{32E26FD9-F435-4A20-A561-35D4B987CFDC}的对象导
出的公共方法
---
## Page 88
5.1探寻漏洞73
5.1.2第二步：在浏览器中测试导出方法
生成可用的对象及导出方法列表之后，我写了一个简单的HTML文件，通过
VBScript调用NewObject（)方法。
代码清单5-1调用NewObject（)方法的HTML文件（webex_poc1.html）
01
02
WebEx PoC 1
EO
04
09
10
代码清单5-1的第4行，实例化GUID或ClassID为{32E26FD9-F435-4A20-
A561-35D4B987CFDC}的对象。第7行调用NewObject（)方法，参数是由12个字
符A组成的字符串。
为了测试这个HTML文件，我用Python实现了一个简单的Web服务器，它
可以伺服webex_poc1.html文件给浏览器（见代码清单5-2）。
代码清单5-2Python实现的一个简单Web服务器伺服文件webex_poc1.html（www
serv.py）
01import string,cgi
02from os import curdir，sep
03 from BaseHTTPServer import BaseHTTPRequestHandler，HTTPServer
04
05 class WwWHandler(BaseHTTPRequestHandler):
06
07
def do_GET(self):
08
try:
60
f= open(curdir + sep+"webex_poc1.html")
10
11
self.send_response(200)
12
self.send_header('Content-type'，'text/html')
13
self.end_headers()
self.wfile.write(f.read())
15
f.close()
16
17
return
18
19
except IOError:
20
self.send_error(404,'File Not Found:%s'%self.path)
21
---
## Page 89
74第5章浏览即遭劫持
22 def main():
23
try:
24
server =HTTPServer((''，8o)，wwwHandler)
25
print'server started'
26
server.serve_forever()
27
except KeyboardInterrupt:
28
print''shuttingdown server
29
server.socket.close()
30
31 if
name
_main_':
32
main()
虽然WebEx的这个ActiveX控件标记为可安全执行脚本的（见图5-1），这样
设计本来是为了让它只能从webex.com域运行。实际上，借助跨站点脚本漏洞
（Cross-SiteScripting，XSs4）就可以绕过这个要求。鉴于如今的web应用中XSS
漏洞非常普遍，应该不难在webex.com域中找出这样的漏洞。为了在不借助XSS
漏洞的前提下测试这个控件，我直接在Windows的hosts文件里添加了如下一项
（见C:IWINDOWS\system32\driversletc\hosts\）。
127.0.0.1
localhost,www.webex.com
之后，启动我那个简单的PythonWeb服务器，并将IE导向http://www.webex.
com（见图5-3）。
12:16:261CEH11P/1.1268
Het
webex.com
ex1]-Notepad
cscr1pt
图5-3用我那个简单的PythonWeb服务器测试webex_poc1.html
5.1.3第三步：找到二进制文件中的对象方法
到目前为止，我收集到了以下信息。
---
## Page 90
5.1探寻漏洞75
口一个WebEx对象，ClassID是{32E26FD9-F435-4A20-A561-35D4B987CFDC}。
口这个对象实现了IobjectSafety接口，有希望成为攻击目标，因为它的方
法可以从浏览器中调用。
口这个对象导出一个NewObject()方法，接受一个用户控制的字符串作为输入。
为了逆向工程导出的方法NewObject()，我必须在二进制文件atucfobj.dll中找
到它。为此，我用了一种特别的技术，与CodyPierce在一篇重要的MindshaRE
文章中描述的类似。大意是调试浏览器时从OLEAUT32!DispCalIFunc的参数中
取出调用方法的地址。
如果一个ActiveX控件的方法被调用到，通常由DispCallFunc（)函数执行实
际的调用。这个函数由OLEAUT32.dll导出。调用方法的地址可由DispCallFunc（）
的前两个参数（叫作pvInstance和oVft）确定。
为了找出NewObject（)方法的地址，我从WinDbg"中打开IE（调试命令的详
细描述见B.2节），并在OLEAUT32!DispCa1lFunc处设置如下断点（见图5-4）。