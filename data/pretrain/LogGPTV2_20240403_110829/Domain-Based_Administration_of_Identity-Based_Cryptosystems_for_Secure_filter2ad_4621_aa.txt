title:Domain-Based Administration of Identity-Based Cryptosystems for Secure
Email and IPSEC
author:Diana K. Smetters and
Glenn Durfee
USENIX Association
Proceedings of the
12th USENIX Security Symposium
Washington, D.C., USA
August 4–8, 2003
© 2003 by The USENIX Association
Phone: 1 510 528 8649
FAX: 1 510 548 5738
THE ADVANCED COMPUTING SYSTEMS ASSOCIATION
All Rights Reserved
Email: PI:EMAIL
For more information about the USENIX Association:
WWW: http://www.usenix.org
Rights to individual papers remain with the author or the author's employer.
 Permission is granted for noncommercial reproduction of the work for educational or research purposes.
This copyright notice must be included in the reproduced paper. USENIX acknowledges all trademarks herein.
Domain-Based Administration of Identity-Based Cryptosystems
for Secure Email and IPSEC
D. K. Smetters and Glenn Durfee
Palo Alto Research Center
3333 Coyote Hill Road
Palo Alto, CA 94304
{smetters,gdurfee}@parc.com
Abstract
Effective widespread deployment of cryptographic tech-
nologies such as secure email and IPsec has been ham-
pered by the difﬁculties involved in establishing a large
scale public key infrastructure, or PKI. Identity-based
cryptography (IBC) can be used to ameliorate some of
this problem. However, current approaches to using IBC
for email or IPsec require a global, trusted key distribu-
tion center. In this paper, we present DNSIBC, a system
that captures many of the advantages of using IBC, with-
out requiring a global trust infrastructure. The resulting
system can be conﬁgured to require almost no user inter-
vention to secure both email and IP-based network traf-
ﬁc. We have built a preliminary implementation of this
system in Linux.
1 Introduction
Standards for end-to-end encryption and authentication
of email messages and IP-based communication have
been in place for several years [8, 18]. Implementations
of those standards are provided by most mail clients and
network stacks. For the most part, however, we still
don’t use them. A large reason for this is the difﬁculty
of managing and distributing keys – of having an authen-
tic copy of your desired communication partner’s public
key when you need it.
Traditional approaches to key distribution in the public
key setting rely on a Public Key Infrastructure, or PKI,
to authenticate the public keys of users and devices rel-
ative to a hierarchical organization of trust. PKIs can be
complex and difﬁcult to set up and manage. Even with a
PKI, you have solved only part of the problem – it only
allows you to determine the authenticity of a user’s cer-
tiﬁed public key once you actually have it. But, that user
ﬁrst has to create a key pair and have it certiﬁed, and
you still have to obtain a copy of his certiﬁcate before
you can communicate securely with him.
1.1
Identity-Based Cryptography
Identity-Based Cryptography (IBC), originally intro-
duced by Shamir [26], was proposed as a means to
solve this problem. In an identity-based cryptographic
scheme, you don’t have to obtain your communication
partner’s public key or certiﬁcate from anywhere – you
already know it.
In such a scheme, your public key
is an arbitrary string – e.g. “PI:EMAIL” or
“myhost.parc.com”. If that string is chosen to be some
identity that your communication partner knows, he can
encrypt a message to you using only that string and a
set of global system parameters. You decrypt that mes-
sage using the private key corresponding to your public
identity string. That private key is derived from your
public identity using the global system parameters and a
“master secret” – a global system secret held by a trusted
third party known as a Private Key Generator, or PKG.
Given the master secret, the PKG can derive a private
key corresponding to any desired public key or identity
string. As a result, such a system provides automatic key
escrow.
Although identity-based signature schemes have been
known for some time (e.g. [11, 12]), practical and secure
identity-based encryption (IBE) schemes have been de-
scribed only recently [2, 6]. One such IBE scheme, that
of Boneh and Franklin, is based on the Weil or Tate pair-
ing on supersingular elliptic curves [2]. This work has
been used as the basis of several identity-based signa-
ture schemes [3, 16, 23], as well as a number of identity-
USENIX Association
12th USENIX Security Symposium 
215
based key agreement protocols [4, 5, 14, 25, 27]. Several
of these protocols allow a pair of communicating parties
to agree on a shared symmetric key with no interaction
whatsoever [14, 25].
IBC seems like an appealing way to solve the usability
problems inherent in traditional approaches to key distri-
bution. Not only do you automatically know the public
key of anyone or anything with which you might want
to communicate, without having to look it up anywhere,
but you can encrypt a message to them before that person
has even obtained their private key [2, 26]. If software
support makes it easy to do so, a user receiving an en-
crypted email message seems more likely to obtain the
private key necessary to read it than they might be to go
through the complex steps necessary to get a digital cer-
tiﬁcate and provide it to someone who wants to send en-
crypted email to them (see [28] for a prototype of such
a system). Similarly, the noninteractive key exchange
protocols available using IBC have been proposed as a
means to secure network trafﬁc [1].
Unfortunately, systems that provide the full beneﬁts of
traditional IBC – knowing any party’s public key with no
interaction whatsoever – suffer from tremendous scal-
ing and trust management problems.
In order to use
your public key in an IBC system, I need to know not
only your identity, but also a set of system parameters
– these include both basic cryptographic parameters like
the choice of an elliptic curve, but also includes the pub-
lic key of the PKG, derived from the PKG’s master se-
cret [2]. In an extreme case, using an IBC-based nonin-
teractive key exchange protocol requires not only that I
know the system parameters associated with your public
key, but that you and I share the same system parameters
– and hence we must both trust a single PKG in posses-
sion of the corresponding master secret.
In general, traditional approaches to IBC assume that
all users will share the same PKG. This means that ev-
eryone knows the global system parameters, and hence
can immediately derive anyone’s public key, but also
requires the establishment of a system of global trust,
where all users obtain their private keys from the same
PKG. The global PKG’s master secret can be distributed
among several centers using threshold cryptography [2]
– if everybody could agree on a set of entities to trust
with such a secret. However, the mere existence of such
a vulnerable global secret – and the resulting system of
global key escrow – is simply unacceptable for most ap-
plications. Additionally, a global private key generator
would be extremely difﬁcult to make work in practice,
as it would have to authenticate the “correct” recipient
of each private key in a global system of identiﬁers.
To address the latter problem, recent work has pro-
posed mechanisms for constructing IBC systems using
a hierarchically-organized set of PKGs [14, 17]. Un-
fortunately, in some of these schemes, PKGs higher in
the tree can recover the private keys of PKGs lower in
the tree, resulting in a system that has a somewhat eas-
ier time of distributing keys, but still requires global
trust. Even in schemes without escrow, the tree must still
be constructed hierarchically – all the nodes in the tree
above yours must be in place before your keys can be
generated. The resulting system is even more difﬁcult to
implement than a global, hierarchical public key infras-
tructure – something which so far has been notoriously
difﬁcult to establish.
1.2 Our Approach
We would like to take advantage of the usability of IBC
without requiring everyone to participate in a global trust
model. Our goal is to design a system that balances se-
curity and usability in a manner resulting in much wider
deployment of secure email and IP security (IPsec). In
contrast to the approach of Appenzeller and Lynn [1], we
attempt to integrate our approach into existing standards
and software, so as to ease deployment. We design our
trust model to mirror the trust and management divisions
that exist in today’s deployed networks. We emphasize
autoconﬁguration and automatic update as much as pos-
sible to minimize practical barriers to use.
Building an IBC system that allows us to manage trust
along appropriate boundaries is simple – we merely have
each such trust domain run their own Private Key Gen-
erator. This means that to communicate securely with a
given party, you must know not only that party’s iden-
tity, but you must obtain the system parameters of their
trust domain. While this isn’t as simple and seamless
as a traditional IBC system, it is considerably simpler
than a traditional PKI, as those system parameters are
shared by an entire trust domain. At worst, it’s equiva-
lent to having to obtain the certiﬁcate of the certiﬁcation
authority (CA) serving a given trust domain, and having
that, being able to immediately derive the public key of
everyone else in that trust domain. It makes the distribu-
tion of private keys within a trust domain considerably
simpler, as the namespace of identiﬁers is local to the
trust domain, and a smaller population of key recipients
needs to be authenticated. Making such a system easy to
deploy in practice requires appropriate construction of
those trust domains, and the design of software to take
advantage of them.
216
12th USENIX Security Symposium 
USENIX Association
1.2.1 Bootstrapping IBC with Domain-Based Trust
Currently, user identities for email (email addresses),
and the identities of hosts (names or IP addresses) are
managed at the level of network domains, as described
by the Domain Name System, or DNS. DNS delegates
management of parts of the Internet name space to in-
dividual domains of control. We propose to divide the
responsibility for authenticating those email addresses
and host identities along exactly the same lines, by hav-
ing each DNS domain responsible for creating a set of
IBC system parameters and distributing private keys to
its own users. This is directly analogous to having a
given domain run its own Certiﬁcation Authority and is-
sue certiﬁcates to its users and machines.
Recent security extensions to DNS, known as DNSSEC,
allow a DNS server to digitally sign the responses to
queries, so that they cannot be modiﬁed or spoofed [9].
Each DNS server providing DNSSEC services offers up
a KEY record for its domain containing its public key,
signed by the key of the name server above it in the
domain hierarchy. When fully deployed, the DNSSEC
hierarchy will terminate in a root key trusted by all
DNS clients and servers. In the meantime, parts of the
DNSSEC hierarchy can be authenticated using cross-
certiﬁcation. As DNSSEC-capable name servers are
already capable of providing and authenticating cryp-
tographic data, they have been suggested as the most
practical distribution method for cryptographic keys and
certiﬁcates to be used by IPsec, TLS, secure email,
and other protocols [9, 10, 24]. FreeS/WAN, a stan-
dard Linux IPsec distribution, has attempted to use these
mechanisms to bootstrap an approach to “opportunisti-
cally” encrypt all network trafﬁc, by combining distribu-
tion of host IPsec keys in DNS records with records that
indicate what machines can act as “security gateways”
(IPsec termination points) for machines that cannot ter-
minate IPsec themselves [13].
Using DNSSEC to store and distribute a set of authen-
ticated IBC parameters for a domain, retrievable under
the domain entry (e.g. “parc.com”) is a simple exten-
sion of these approaches. However, we suggest that the
resulting combination of IBC and DNSSEC-based pa-
rameter distribution has a number of advantages over a
traditional PKI, even one that uses the DNS as a key dis-
tribution mechanism.
First, it minimizes the amount of information stored in
and retrieved from the DNS. IBC parameter information
is global to the domain. It is generated once, and only re-
generated in the case of master secret compromise. Up-
dating of cryptographic information in the DNS is done
once for the domain, with intermittent additional updates
(e.g. we use a small amount of transient data, a “salt” to
provide revocation of keys through key expiration, see
Section 2.1). This can be done under administrator con-
trol, and doesn’t require either clients or a CA to be able
to publish information to the DNS, as would likely be
necessary if clients put their certiﬁcate or key informa-
tion into the DNS.
Second, as parameters (and salt) are global to the do-
main, clients wishing to communicate with multiple par-
ties in the domain (or the same party more than once)
must only pull one copy of the domain’s system param-
eters. These it can cache over time, reducing the load on
the DNS servers.
Third, individual domains can deploy such a system in-
crementally – if a domain does not provide parameter
information in its DNS entry, it obviously does not par-
ticipate. And though DNSSEC is some ways from being
completely deployed, it is designed to allow trust to be
constructed incrementally, subtree by subtree, until the
roots are in place. A system that bootstraps trust from
DNSSEC will grow naturally along with it.
Fourth, client conﬁguration can be dramatically simpli-
ﬁed and automated. Clients don’t have to obtain their
private key from the domain key distribution center un-
til they need it. In the case of email, this means that the
motivation is on the “right foot” – a user having received
encrypted email is interested in reading it, and will go
and get their private key, while a user who wants to send
encrypted email to someone else in a non-IBC system is
hard pressed to get that person to go and get themselves
a certiﬁcate [2]. In the case of IPsec, clients can be de-
signed to auto-conﬁgure themselves, and automatically
request their private key at installation time. We believe
the more setup steps that can proceed independently, the
simpler the system will be to deploy in practice.
And ﬁnally, the fact that we can simply and automati-
cally generate the public key of any party whose domain
participates in the system (and the lack of domain pa-
rameters in the DNS will tell us whether they participate)