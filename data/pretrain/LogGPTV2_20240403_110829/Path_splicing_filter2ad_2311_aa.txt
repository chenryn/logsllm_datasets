title:Path splicing
author:Murtaza Motiwala and
Megan Elmore and
Nick Feamster and
Santosh S. Vempala
Path Splicing
Murtaza Motiwala, Megan Elmore, Nick Feamster and Santosh Vempala
College of Computing, Georgia Tech
http://www.gtnoise.net/splicing
ABSTRACT
We present path splicing, a new routing primitive that allows net-
work paths to be constructed by combining multiple routing trees
(“slices”) to each destination over a single network topology. Path
splicing allows trafﬁc to switch trees at any hop en route to the des-
tination. End systems can change the path on which trafﬁc is for-
warded by changing a small number of additional bits in the packet
header. We evaluate path splicing for intradomain routing using
slices generated from perturbed link weights and ﬁnd that splicing
achieves reliability that approaches the best possible using a small
number of slices, for only a small increase in latency and no ad-
verse effects on trafﬁc in the network. In the case of interdomain
routing, where splicing derives multiple trees from edges in alter-
nate backup routes, path splicing achieves near-optimal reliability
and can provide signiﬁcant beneﬁts even when only a fraction of
ASes deploy it. We also describe several other applications of path
splicing, as well as various possible deployment paths.
Categories and Subject Descriptors:
C.2.1 [Computer-
Communication Networks]: Network Architecture and De-
sign C.2.2 [Computer-Communication Networks]: Network
Protocols—Routing Protocols
General Terms: Algorithms, Design, Reliability
Keywords: Path Splicing, path diversity, multi-path routing
1.
INTRODUCTION
Many networked applications can beneﬁt from access to multiple
paths between endpoints. Multipath routing, which provides nodes
access to multiple paths for each destination, can increase avail-
ability by providing fast (or simultaneous) access to backup paths;
it can also improve capacity by increasing the number of paths that
endpoints can use to communicate with one another. As Internet
applications demand higher availability and faster recovery from
failures, multipath routing and pre-computed backup paths have
emerged as promising mechanisms for recovering from failures.
Despite the need for, and the promise of, multipath routing, many
such schemes require considerable precomputation to achieve even
a small number of paths through the network. Two obstacles have
hindered many multipath routing solutions; the ﬁrst is scalabil-
ity. Existing schemes typically compute a small number of backup
paths that can protect against certain failure scenarios, but they do
not provide recovery from many others. Instead, the routing sys-
tem should provide much stronger guarantees: Unless the under-
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
SIGCOMM’08, August 17–22, 2008, Seattle, Washington, USA.
Copyright 2008 ACM 978-1-60558-175-0/08/08 ...$5.00.
Figure 1: With k paths between the pairs of nodes, any k fail-
ures, one on each path disconnects the network. With splicing,
a graph cut must be created to disconnect the network.
lying network is partitioned, the routing system should provide at
least one path that allows endpoints to communicate. The second
obstacle is control: an endpoint (or intermediate point) should have
some ability to change the path or paths that it uses to send trafﬁc to
each destination. Unfortunately, granting too much control to end
systems can interfere with trafﬁc engineering and may potentially
result in trafﬁc oscillations [24].
This paper presents the design, implementation, and evaluation
of a new routing primitive called path splicing, a scalable mech-
anism for providing network nodes or endpoints access to a very
large number of alternate paths. Path splicing has three key fea-
tures: (1) it constructs multiple routing trees over a single ﬁxed
physical topology; (2) it allows trafﬁc to take a path that switches
between these trees at intermediate hops en route to the destination;
(3) it allows end systems to change the forwarding path by changing
a small number of additional bits in the packet header. Intermedi-
ate nodes can also change the path on which trafﬁc is forwarded.
These building blocks, of course, could apply to any routing proto-
col. In this paper, we study them in the context of intradomain and
interdomain routing.
We explore how path splicing can improve availability accord-
ing to two metrics: reliability and recovery. Reliability mea-
sures whether the routing information that is disseminated between
routers reﬂects the connectivity in the underlying topology. In other
words, it measures whether the paths that each router knows cre-
ate a connected graph in the underlying topology, even when links
or nodes in the underlying topology fail. Recovery measures how
quickly endpoints can re-establish working paths with one another
by ﬁnding a working path in among the available choices in the
routing tables. Our evaluation demonstrates that, with just a few
slices, path splicing can achieve reliability that approaches that of
the underlying graph (i.e., the best possible), and that, in the face of
failures, end systems can discover a new working path within two
trials (which are independent and can be run simultaneously), even
without any knowledge about the location of the failure. The actual
time to recover from a failure, of course, also comprises the time to
detect the existence of a failure, which we do not consider in this
work. Our results suggest that, when combined with a fast failure
detection mechanism, path splicing can provide end systems with
enough resilience to quickly recover from failures without waiting
for dynamic routing protocols to converge to a new working path.
To illustrate why path splicing can be so effective, consider Fig-
ure 1. A conventional routing algorithm would compute one path
between the nodes at each end. Multipath routing typically aims to
compute k edge-disjoint paths between these nodes. Unfortunately,
if at least one link fails on each path, the nodes may become dis-
connected, even if the underlying topology remains connected. Path
splicing computes multiple paths and also allows trafﬁc to change
paths at intermediate nodes, thus “splicing” paths together. By pro-
viding access to these spliced paths, path splicing can sustain con-
nectivity in the face of many more link and node failure scenarios.
In Figure 1, the pair of nodes on each side of the graph will become
disconnected if a link fails on each of the k edge-disjoint backup
paths. With path splicing, k links must fail in the same cut to cre-
ate a disconnection, a much less likely event (since this is only one
speciﬁc way in which all k paths could be broken). If we assume
that links fail at random, then O(k log k) failures will disconnect
all k paths with high probability1, and the probability of a cut is
exponentially small.
Despite its conceptual simplicity, path splicing faces several
practical challenges. First, splicing forwards trafﬁc along paths that
do not constitute a single tree to a destination, which creates the
possibility for paths to contain loops. We show, both analytically
and empirically, that in practice these loops are neither persistent
nor long. Second, splicing gives end hosts some control over where
trafﬁc is forwarded, which can interfere with operators’ trafﬁc en-
gineering goals and potentially cause oscillations if all end systems
forward trafﬁc over the same set of links. Path splicing’s inter-
face for path selection carries no explicit semantics about the actual
path, however, which means that end systems have no mechanism
or incentive to select the same alternate path when a path fails. Our
experiments show that spliced paths do not adversely affect the traf-
ﬁc distribution or load across the network links. Finally, there is an
inherent tradeoff between the extent to which alternate slices pro-
vide paths with a diverse set of edges and the additional latency
(“stretch”) incurred along the spliced paths. For intradomain rout-
ing, path splicing can achieve near-optimal reliability with a stretch
of about 30%; for interdomain routing, splicing can achieve near-
optimal reliability with negligible stretch in terms of the number of
AS hops.
Although this paper focuses on how splicing applies to Inter-
net routing (speciﬁcally, we focus on applications of splicing to
both intradomain and interdomain routing), the mechanism is gen-
eral and could certainly be applied in other contexts (e.g., routing
in wireless networks or overlays). This paper explores how path
splicing can improve availability by facilitating rapid recovery from
failures; however, splicing is useful in any scenario that requires ac-
cess to multiple paths. In Section 8, we discuss various open issues
with ultimately deploying path splicing in practice.
The rest of the paper is organized as follows. Section 2 summa-
rizes our design goals. Section 3 presents related work. Section 4
provides an overview of path splicing and describes the high-level
properties of the technique. Section 5 describes how splicing can be
applied to intradomain routing, and Section 6 describes an exten-
sion of splicing to interdomain routing. Section 7 presents experi-
ments that quantify how splicing improves both reliability and re-
covery, and explores splicing’s effects on and interactions with traf-
ﬁc. Section 8 describes a possible implementation path for splicing,
as well as security concerns, and Section 9 concludes.
2. DESIGN GOALS
To achieve high availability, routing must exploit the underlying
diversity of the network graph. Routing should maintain paths be-
tween nodes in the network unless the underlying network graph
itself is disconnected. Current routing protocols, which are typi-
1This result follows from the coupon collector problem.
cally single-path, cannot achieve this. The challenge in providing
multiple paths in the network to provide high path diversity is to
disseminate the information about the multiple paths in a simple,
scalable fashion. Speciﬁcally, a routing system should have the
following design goals:
• High reliability. A routing protocol should allow nodes to
maintain information about connectivity between pairs of
network nodes, even as nodes or links in the network fail.
(Section 2.1)
• Fast recovery. In addition to providing many alternate paths,
the routing protocol should allow end systems to discover
and use these alternate paths. (Section 2.2)
• Small stretch. The alternate paths should not be signiﬁ-
cantly longer, in terms of latency or number of hops, than
the default path. (Section 2.3)
• Control to end systems. End systems should have some
control over the paths that trafﬁc uses. (Section 2.4)
The rest of this section describes these goals in more detail and
formally deﬁnes metrics that we use to evaluate them.
2.1 High Reliability
Many attempts to improve reliability through diverse, multiple
paths have operated without a clear deﬁnition of either reliability
or path diversity, although they have typically implicitly assumed
an “operational” deﬁnition of masking path failures along paths be-
tween endpoints. To capture the effect of increasing path diversity
on the actual availability of the network, we introduce a formal
metric for reliability, which describes how the graph behaves un-
der failure. It is convenient to talk about reliability in terms of the
fraction of node pairs become disconnected when a certain fraction
of edges fail. We formalize this notion below.
Deﬁnition 2.1 (Reliability) For a given graph G, and any 0 ≤
p ≤ 1, let R(p) denote the fraction of node pairs that are dis-
connected when each edge fails independently with probability p.
Reliability is then represented as a function y = R(x), where x
ranges from 0 to 1.
This metric has an edge version and a vertex version. We have
stated the edge version, but the vertex variant is quite similar. Note
that this metric can apply to any graph, including the underlying
network graph; we can assess the reliability of a routing protocol
by comparing the reliability achieved by the routing protocol to
that of the underlying graph. To achieve high reliability (i.e., to
attain a reliability curve that mirrors as closely as possible that of
the underlying graph), a routing protocol should exploit the path
diversity that exists in the underlying graph.
Conventionally, previous routing protocols have achieved high
path diversity by providing systems access to node-disjoint paths.
However, paths do not need to be completely node disjoint to pro-
vide high reliability (particularly if edges are failing, as opposed to
nodes). To capture this property, we quantify the diversity that is
achieved by two paths using a notion we call novelty. Essentially,
the novelty of two paths is the fraction of edges between the two
paths that are distinct.
Deﬁnition 2.2 (Novelty) Given a (source, destination) pair, let
Ps be the path with fewer edges and Pl be the path with more edges.
Formally, novelty is
1 − |Pl ∩ Ps|
|Ps|
Novelty provides a diversity metric for any two paths between a
source-destination pair. Note that novelty captures disjointness in
some fashion: For example, two paths that are completely edge
disjoint will have novelty 1. As with reliability, novelty has a vertex
version, but we focus on the edge version in this paper.
In our
experiments, we use novelty to quantify the diversity of the paths
in each alternate slice relative to the original shortest path.
2.2 Fast Recovery
Simply achieving high reliability is not of much use if the rout-
ing system cannot quickly discover working paths when nodes or
edges fail. Beyond simply achieving high reliability, a routing sys-
tem should quickly, scalably, and simply provide working paths to
nodes and end systems when links or nodes fail. We deﬁne the time
it takes for a pair of nodes to establish a working path after a failure
has occurred the recovery time.
Deﬁnition 2.3 (Recovery Time) Recovery time is the time that
the routing system takes to re-establish connectivity between a
(source, destination) pair after the existing path has failed.
In the absence of pre-computed backup paths or other “fast recov-
ery” techniques, the recovery time is simply the convergence time
of the routing protocol (i.e., the time it takes to re-establish a work-
ing path after a failure has occurred). In the case where backup
paths are available, however (e.g., in the cases of fast reroute and
path splicing), recovery can be faster than convergence time, be-
cause a failure can trigger an immediate failover to a backup path.
When we consider recovery time for the case of path splicing,
we are interested in quantifying how long it takes for end systems
to discover alternate working paths after a failure occurs. Recovery
time should ideally be measured in units of time and include both
the detection time (i.e., the time taken to detect a failure) and the
time to discover a new working path. Without a complete imple-
mentation, however, it is difﬁcult to express recovery time in units
of time. For the purposes of our evaluation in Section 7, we express
recovery in terms of number of trials—the number of recovery at-
tempts before a working path is found. One could estimate recovery
time as detection time plus the recovery time, where recovery time
is the number of trials required for recovery divided by the number
of trials that can be executed in parallel.
2.3 Low Stretch
Routing protocols should provide access to alternate paths that
are not signiﬁcantly longer than the “default” path between those
nodes, both in terms of the actual latency of the alternate paths and
in terms of the number of hops that they traverse. We deﬁne a
notion of stretch to quantify the additional latency that is incurred
by alternate paths over the default path.
Deﬁnition 2.4 (Stretch) Stretch is deﬁned as the ratio of the la-
tency on a path (between a pair of nodes) in the perturbed topology
to the ratio of the shortest path (between the same pair of nodes) in
the original topology.
We use total path cost as a proxy for latency. Path diversity and
stretch are somewhat conﬂicting goals. Thus, we must generate
slices to have low stretch, but high novelty. An easy approach to
creating paths with high novelty with acceptable stretch is to create
slices at random (i.e., by using random link weights for creating
each slice). Selecting link weights in this way would lead to paths
with high stretch.
2.4 Control to End Systems
The notions of availability and failure are speciﬁc to the appli-
cation sending trafﬁc along these paths. In the case of real-time
applications such as VoIP, it matters if the packets cannot reach the
destination in a certain bounded time. For other applications (e.g.,
bulk ﬁle transfer), these constraints may matter less, but end sys-
tems may wish to ﬁnd paths with high throughput. Because end
systems have differing requirements for what constitutes a “good”
path, building a “one size ﬁts all” routing system that provides good
paths to all applications without taking input from the end systems
themselves about the quality of paths is difﬁcult.
If an end system deems some path in the network to be non-
functional or detrimental to application performance, it should be
able to signal to the network the desire to send its trafﬁc along a
different path. Of course, because network operators have trafﬁc
engineering goals and constraints of their own, the routing system
should provide this control without introducing too much instabil-
ity to the offered trafﬁc load in the network.
3. RELATED WORK
We survey related work in three areas—multihoming and multi-
path routing, fast recovery schemes and overlay networks—and ex-
plore the tradeoffs of each of these recovery schemes in terms of
processing overhead, storage overhead, recovery time, and required
modiﬁcations to existing routers.
Multihoming and multipath routing. Multihoming and multi-
path routing provide nodes multiple paths for exchanging trafﬁc.
Various mechanisms manipulate routing to take better advantage of
multiple underlying network paths [9,15]. These schemes can oper-
ate without changing hosts or routers but are more coarse-grained,
since they still only forward trafﬁc along one path to each destina-
tion at any time. Perlman designed a routing protocol that ﬂoods
routes in a way that is robust to Byzantine failure [22]. MIRO [31]
and R-BGP [16] allow networks to discover additional interdomain
routes to recover from failure. MIRO provides more explicit con-
trol over the AS path that trafﬁc travels to a destination (e.g., it al-
lows a network to explicitly select the ASes that its trafﬁc traverses)
and it requires no modiﬁcations to the data plane (i.e., packet head-
ers or forwarding functions), but it requires establishing additional
state at routers for each alternate path and additional out-of-band
control-plane signaling, which may make it too heavyweight as a
general recovery mechanism. R-BGP provides similar interdomain
failure recovery as splicing, without requiring any modiﬁcations
to the packet headers. Like splicing, it requires additional state in
forwarding tables like splicing. Unlike splicing, however, R-BGP
provides only local recovery at routers.
Path splicing relates to multi-topology routing, which precom-
putes backup topologies for speciﬁc failures by removing edges
from the underlying topology or by setting high costs on some
edges [3,12,17]; in contrast, path splicing computes alternate paths
for arbitrary failure combinations. Path splicing allows trafﬁc to
traverse multiple topologies along a single path, whereas multi-
topology routing only allows trafﬁc to switch topologies once en
route to the destination. It also allows end systems to divert traf-
ﬁc along different paths. Aspects of multi-topology routing have
been standardized [23], and Cisco has recently incorporated a re-
lated mechanism called multi-topology routing into their IOS rout-
ing platform [8]; a small variant could ultimately enable path splic-
ing.
Fast recovery and reroute. Path splicing uses bits in the IP header
to affect how routers along a path forward trafﬁc to a destination.
This mechanism is similar to the “deﬂection” mechanism recently
proposed by Yang et al. [32]. Although path splicing’s mecha-
nisms for deﬂecting trafﬁc along a new end-to-end path are sim-
ilar, we show in Section 7 that path splicing achieves more path
diversity than this deﬂection mechanism with considerably shorter
paths. Establishing parallel backup paths resembles various tech-
niques proposed by the IETF routing working group [26] and router
vendors, including load balancing mechanisms such as equal-cost
multipath [14], link protection mechanisms such as MPLS Fast
Reroute [7], IP Fast Reroute [27] (as well as various optimiza-
tions [4, 28]), but fast reroute requires manual conﬁguration and
requires additional routing state for each link or node to be pro-
tected. Furthermore, rerouting is triggered only by local failure de-
tection, not by end systems. Failure-carrying packets (FCPs) carry
information about failed links; this information allows routers to
re-route data packets around failed links [18]. Like fast reroute
mechanisms, FCPs allow routers to circumvent node and link fail-
ures without waiting for the routing protocol to reconverge, but
the mechanism only provides local recovery and requires insert-
ing large amounts of information into packets as well as potentially
expensive dynamic computation.
Improving reliability with overlays. Overlay networks can im-
prove diversity by routing trafﬁc on alternate paths above the net-
work layer [1, 2, 13]. Others have investigated how to improve
connectivity by strategically placing overlay nodes within a sin-
gle ISP [6]. Splicing provides a similar recovery capability without
requiring continual probing of alternate paths.
4. PATH SPLICING: MAIN IDEA
Path splicing is a general mechanism for giving end systems ac-
cess to multiple paths composed from multiple routing trees. Any
instantiation of path splicing relies on the following three aspects:
1. Generate many alternate paths by running multiple routing
protocol instances.2 Instead of running a single instance of a
routing protocol over a topology, routers run k routing pro-
tocol instances on the same topology, each with a slightly
different conﬁguration. The goal is to design the conﬁgura-