in the overlay. Since each source / target pair was tested individ-
ually, at most two nodes per POP would be selected to serve the
functions of beacon and servlet. When ordering the overlay nodes
according to the geographic heuristic described below, designating
more than two nodes per POP could only change a route between a
source and target by possibly passing through a different client on
a given POP. When ordering the overlay nodes randomly and using
Chord as the routing algorithm for the overlay, the probability that
a client on a speciﬁc POP was picked as a beacon or servlet, or
was at a certain position in the overlay impacted the route. Since it
was assumed overlay eligible nodes were evenly distributed across
all POPs, having 2 versus 100 overlay nodes per POP would not
impact the probabilities and thus would not affect the results. The
node for the source was chosen to be a client on the same POP as
the source. The impact due to it being served by a different POP
than the source would be to add the cost of the normal route be-
tween the source and SOAP to the cost of the route between the
SOAP and target.
3.3 Routing Algorithms
In SOS, trafﬁc from a source to a target utilizes a route which
contains the following sequence of nodes in order: source, access
point, beacon, servlet and target. Normal routing is used to reach
the SOAP. Also, since the beacon knows the speciﬁc servlet for the
target, and the servlet knows the location of the target, normal rout-
ing is used between the beacon and servlet, and between the servlet
and target. An overlay route is used between the SOAP and bea-
con. The increase in the route length over that of the normal route
between the source and target is due not only to the requirement
that the route pass through speciﬁc nodes, but also due to the need
to route through an overlay network between the SOAP and bea-
con as opposed to using the normal route between the two nodes.
For normal routing, each node in the model contained a routing ta-
ble populated via Dijkstra’s algorithm, using minimum hops as the
criteria for shortest path. Each node in the overlay network also
contained a table with the destination address and overlay node id
of a subset of overlay nodes. The table was populated based on the
routing algorithms described below.
A routing algorithm for use in overlays is required to send trafﬁc
between the SOAP and beacon. The Chord algorithm was utilized
in the ﬁrst set of experiments. The overlay nodes where randomly
ordered. The tables within each overlay node were populated using
the method described previously involving powers of 2. The size
of a node’s table is O(log n), where n is the size of the overlay.
The second set of experiments used a heuristic which divided the
POPs into geographical areas. This method is based on modiﬁca-
tions suggested to the basic algorithm for CAN. For a speciﬁc area,
A, a node nA was chosen as the area’s representative. Each nA was
an entry in each overlay node’s table. In addition, if ni is an over-
lay node in area A, ni’s table would include entries for each nj in
A, i (cid:5)= j. Thus an overlay node maintained pointers to every other
overlay node in the same geographical area and to one overlay node
in each other geographical area. For an overlay of size n, the size
of a node’s table is O(n/5) + #(areas), which is O(n/5) when n
is large compared to the number of areas. The US model involved
6 areas, one contained 2 POPs and the other contained 3 or 4 POPs
each. The Europe model contained 4 areas with 4 to 5 POPs each.
3.4 Beacon/Servlet Selection Scenarios
Seven source-target pairs were chosen in each of the two mod-
els. They were selected to represent a variation in source-target
relations. Factors considered when selecting the pairs included the
distance between cities, whether they were served by neighboring
POPs and the level of connectivity for the POP. In all cases a servlet
and beacon for a speciﬁc target were not permitted to be the same
node and neither could serve as a SOAP .
For each model and each routing algorithm, the normal route
between each source-target pair was computed then the following
eight scenarios were tested on each pair. In the scenarios, minimiz-
ing the number of hops refers to the number of hops as calculated
by normal routing.
1. Randomly select the servlet and beacon (100 trials per source-
target pair were run).
2. Select the servlet to minimize the number of hops between
the servlet and target, then select the beacon to minimize the
number of hops between the beacon and servlet, with the re-
striction that the servlet and beacon not be served by the same
POP.
3. Select the servlet to minimize the number of hops between
the servlet and target, then select the beacon to minimize the
number of hops between the beacon and source.
4. Select a servlet randomly from those approximately X miles
from the target then select a beacon randomly from those
approximately X miles from the servlet, where X was 1000
in the US model and 500 in the Europe model. In the case of
the Europe model, a few POPs did not have neighbors within
this distance, in which case the next closest available overlay
node was used.
The ﬁrst scenario was used to obtain an understanding of the
impact when no selection criteria was utilized for the servlet and
beacon. This would be the simplest version to implement. The
second and third scenarios were aimed at keeping the intermediate
nodes in the route near the end points to determine if the route
between the source and target would then be similar to the normal
route. These two scenarios using minimum distance instead of hops
were tested on the US version, but the results were not noticeably
different from the scenarios using hops. The fourth scenario was
used to understand the impact of selecting the servlet and beacon
so they would be served by different POPs than the target, which
may be desired for diversity, but at the same time guaranteeing they
would be relatively close in an attempt to avoid an unnecessarily
long route.
Table 1: Average ratio: latency with SOS vs. normal routing.
Europe Europe
US
US
Chord CAN Chord
scenario
1 random selection
2 min hops
3 min hops
4 diversity
4.51
3.45
7.19
5.18
4.16
2.4
1.75
4.08
5.69
3.25
6.77
5.6
CAN
4.11
2.54
1.74
2.88
3.5 Results
Results are presented in terms of the ratio of the measurement
for the SOS route to that of the normal route between the source
and target. The measurements are for one direction only, source
to target. Table 1 shows the ratio of the latency using SOS to the
latency expected when using normal routing. The scenario num-
ber corresponds to the previous list. These were averaged over all
source-target pairs. The worst case from all source-target pairs is
shown in Table 2. Table 3 indicates the increase in the number of
ISP POPs involved in a route compared to that of the normal route.
When using scenario 3 with the geographic heuristic, the servlet
was always selected from a node on the same POP as the target
and the beacon was selected from a node on the same POP as the
source and SOAP because there were eligible nodes at every POP.
This resulted in the SOS route being identical to the normal route
with the addition of a few detours to clients within the ﬁrst and last
POPs in the route, thus it was expected to produce the best results
in terms of latency.
The results reported for random selection are averaged over 100
trials run per source-target pair. The actual increase in latency may
be much higher depending on the speciﬁc servlet and beacon cho-
sen. The greatest increase occurs when the source and target are
close together. The overlay route may involve points geographi-
cally far from the source and target, turning a normally short route
into one that may traverse every POP in the ISP at least once.
Among all trials involving random selection, the worst case in the
Europe model was an increase in latency 15 times that of the nor-
mal route between London and Paris when using Chord and 9.5
times when using the geographical heuristic. In the US model, the
worst case also involved a latency 15 times normal between NY
and Philadelphia when using Chord and 8.86 times when using the
geographical heuristic. For NY to Philadelphia, the worst case in-
crease using the geographical heuristic is approximately the same
as the average (8.76) when using Chord. The worst cases from all
trials involved latencies of 378ms using Chord and 230ms using the
geographical heuristic.
The number of POPs serves as a measure of the complexity of
the route but does not necessarily imply a physically long route
because several POPs may be geographically close. In scenario 3,
the beacon would be selected on the same POP as the SOAP. The
ratio for scenario 3 using Chord is high due to a couple of source-
target pairs in which the beacon’s overlay id was just prior to that of
the SOAP’s id, resulting in routing through several overlay nodes
in the path between the SOAP and beacon.
When using Chord, other variations for populating the overlay
node’s tables using powers of 3 and i + xj, where xj is the jth
number in the Fibonacci series, for j = 3,4,5.., were tested on a
subset of source-target pairs but had no noticeable impact on the
length of the route between the SOAP and beacon. A geographic
ordering of the overlay nodes was also tested while maintaining the
Chord routing. Nodes that were geographically close were assigned
IDs placing them close together on the overlay network. While this
shortened the route in cases where nodes X and Y were physically
close, a packet was being routed from X to Y using the overlay and
X was assigned a lower overlay id than Y; it resulted in a worst
case scenario when Y was assigned the overlay id just prior to X’s
because the packet would route to O(log n) overlay nodes before
reaching the one that knew about X.
3.6 Other Considerations
If the overlay nodes are placed within POPs, as opposed to clients’
networks, we eliminate the latency due to the connection between
the POP and client, and it could be more difﬁcult to attack.
In
contrast to a client’s LAN which may receive trafﬁc for multiple
reasons and has a relatively low bandwidth connection to the POP,
a server dedicated to SOS and attached to a router within a POP
allows most invalid trafﬁc to be ﬁltered out in a high-capacity area.
However, the use of special purpose servers would result in fewer
potential overlay nodes. Furthermore, such servers would not re-
move the delay due to cross-country routes through the overlay.
Having the overlay network span multiple ISPs will increase the
latency of the SOS route. There will be a larger number of POPs
serving potential overlay nodes. Even if the overlay nodes are ge-
ographically distributed in the same manner as with one ISP, the
route between any pair of overlay nodes will increase on average
due to having to route between ISPs. When the overlay nodes are in
the same city but are served by different ISPs, having to route from
one ISP POP to another ISP’s POP, as opposed to routing between
nodes within the same POP, will increase latency. Furthermore, if
there is no peering point between the ISPs for that city, the route
will require a path to a different city.
4.
IMPLEMENTATION
While the simulation results are encouraging, we felt that experi-
mentation in real networks was necessary to validate our approach.
To that end, we developed a prototype of WebSOS, consisting of
three main modules. The components are a communications mod-
ule, a WebSOS routing module, and an overlay routing module run-
ning on each node in the WebSOS overlay. The interactions of these
are shown in Figure 6.
SOS
Routing
Module
Query/response 
for next hop address
in overlay
Query/response 
for next hop address
Overlay 
Routing
Module
status
messages
Communication
Module
(for packet 
forwarding/
reception)
Request from 
user to target.
other nodes
Figure 6: Software modules for the WebSOS implementation.
The communications module is responsible for forwarding HTTP
requests and responses among the nodes in the WebSOS overlay.
When a new proxy request (in the form of a new TCP connection)
is received, the communications module calls the WebSOS routing
module with the target’s destination address to obtain the address
of the next hop in the overlay. It then opens a new TCP connection
to that node and relays the received HTTP request. Any trafﬁc re-
ceived in the opposite direction (i.e., the HTTP responses and web
content) are relayed back to the source. Authentication of the re-
questing node by the access point (SOAP) and by internal nodes is
accomplished through SSL. Authorized users and WebSOS overlay
nodes are issued X.509 [5] certiﬁcates signed by the SOAP, once
the user has succeeded in the CAPTCHA authentication.
The main WebSOS routing module receives requests from the
communications module and responds with the IP address of the
next node in the WebSOS overlay to which the request should be
forwarded. The module ﬁrst checks whether the current node serves
a speciﬁc purpose (i.e., whether is it a beacon or secret servlet for
Table 2: Worst-case ratio: latency with SOS vs. normal routing.
US/Chord US/CAN Europe/Chord Europe/CAN
scenario
1 random selection — worst individual source-
target average over 100 trials
2 min hops
3 min hops
4 diversity
8.76
7.57
10.9
10.57
6.05
3.76
2.14
6.24
8.05
4.74
11.29
8.1
5.81
3.26
2.14
3.57
Table 3: Numbers of POPs in SOS routing vs. normal routing.
US/Chord US/CAN Europe/Chord Europe/CAN
scenario
1 random selection — worst individual source-
target average over 100 trials
2 min hops
3 min hops