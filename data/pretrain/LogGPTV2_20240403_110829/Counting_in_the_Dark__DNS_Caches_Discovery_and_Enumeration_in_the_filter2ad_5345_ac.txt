IP Ii
seeded ‘honey’ record. If queries are responded without
accessing our server, we add Ii
IN to the same cluster of
caches as I1
IN. We perform this for every ingress IP until
all are mapped.
The mapping from the set of caches to the egress IP
addresses is straightforward: typically, different egress
IP addresses participate in resolution chains. By repeat-
ing the experiment with a set of queries to an ingress IP
address, and checking which egress IP addresses they
arrive from at our nameservers, all the egress addresses
can be covered. The analysis for number of queries is
similar to ingress IP addresses and is given in Section
V-B.
In contrast to open resolvers, when DNS resolution
platforms are studied using email servers or web
browsers, there is no direct access to the resolver, and
all the queries are triggered by the (stub) DNS software.
As we discussed above, local caches pose a challenge
and impose two main limitations: same query will be
responded from the local cache (without reaching the
ingress resolver) and we cannot control the timing of
the issued DNS requests; We next show two ways we
devised to bypass the local caches.
2) Indirect Ingress and Direct Egress Access: In this
section we show how to adapt our methodologies when
an indirect access to ingress resolver is provided.
a) Bypassing Local Caches with CNAME Chain:
We setup q DNS records in our cache.example zone
mapping them to CNAME DNS record as follows:
x-1.cache.example
IN CNAME name.cache.example
x-2.cache.example
...
x-q.cache.example
name.cache.example
IN CNAME name.cache.example
IN CNAME name.cache.example
IN A
a.b.c.d
Then we trigger q DNS requests via email server
or web browser, for names x-1.cache.example,...,
x-q.cache.example. The local caches are not in-
volved in the resolution process (speciﬁcally in resolv-
ing the CNAME redirection) and only receive the ﬁnal
answer.
b) Bypassing Local Caches with Names Hierar-
chy: This technique utilises the hierarchy that can be
created with DNS names. We set up two zones as
follows:
;zone fragment for sub.cache.example
$ORIGIN sub.cache.example.
x-1.sub.cache.example
x-2.sub.cache.example
...
x-q.sub.cache.example
sub.cache.example
IN A a.b.c.e
IN NS ns.sub.cache.example
IN A a.b.c.e
IN A a.b.c.e
;zone fragment for cache.example
$ORIGIN cache.example.
sub.cache.example
ns.sub.cache.example
IN NS ns.sub.cache.example
IN A a.b.c.d
Then we trigger q queries asking for A records of
A
an
and
referral
an
records
queried
response
NS
for cache.example will
x-1.sub.cache.example,...,x-q.sub.cache.example.
First time, the cache in the target resolution platform
will ask for cache.example. The nameserver
authoritative
return
for sub.cache.example,
a
i.e.,
for
ns.sub.cache.example. When
for
an A record
x-i.sub.cache.example
(0 < i ≤ q), the nameserver will respond with an IP
address a.b.c.e. During the subsequent queries,
the cache will have stored the NS and A records for
sub.cache.example, and should query it directly
for the A records of x-i.sub.cache.example.
The number of queries arriving at
the nameserver
of cache.example indicate the number of caches
used by a given IP address at a measured resolution
infrastructure.
of
3) Indirect Egress Access: When the CDE infrastruc-
ture is limited to using domains not under its control,
the queries do not arrive at our nameservers and we
cannot study the caches by monitoring the queries. To
that end, we devise a timing side channel which allows
counting the number of caches without observing the
arriving queries. We force all the caches to store a honey
record (in one of the domains that they can access)
utilising sufﬁcient redundancy to ensure that all caches
are covered, e.g., issuing 100 queries to the resolution
platform.
Assuming we have a direct ingress access, we mea-
sure the latency it takes the target resolution platform
373
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:02:38 UTC from IEEE Xplore.  Restrictions apply. 
to respond to queries for the honey record (that already
exists in caches) vs records that are not in caches (e.g.,
a honey record with a random subdomain prepended to
it). Speciﬁcally, our direct prober measures the latency
of the responses that it receives.
When an indirect ingress access is provided, the study
depends on locating domains with a structure similar
to those described in Section IV-B2. Fortunately, such
zone ﬁles are common. We perform a measurement
evaluation for domains that use the names hierarchy
(described in latter approach for caches bypassing) -
popular Alexa domains that are under com TLD. For
comparison between direct and indirect ingress access,
we focus on the 1K domains where the nameserver IP
addresses are hidden behind recursive resolution caches
(see Section for details III-A), and use an open recursive
resolution access to those domains as well as access
via a web browser. We measure the latency it takes the
resolution platform to respond to queries for the honey
record when it is responded from the cache vs when
the query is forwarded to a nameserver, and count the
number of times the latency of the response that arrives
at our prober corresponds to an uncached latency – this
number corresponds to the amount of caches.
V. Measuring Resolution Platforms
In this section we apply the techniques developed in
Section IV for study of DNS resolution platforms in the
Internet. We ﬁrst report on our results of enumeration of
caches behind IP addresses and on correlation between
IP addresses and caches. Then we provide an analysis
on the bound of the number of packets required for our
study of caches discovery and enumeration.
During our Internet measurements we incurred packet
loss in some networks, which impacted the results.
Highest packet loss was measured in Iran with 11%,
China almost 4%; the rest networks exhibited around
1% packet
loss which is considered typical. A lost
packet during the tests affects the results of the test, and
to cope with packet loss we use a statistical approach we
dub carpet bombing, which is less sensitive to packet
loss. The idea is intuitive we increase the number of
probes we send to the target network, and instead of a
single query we use κ queries; such that the parameter
κ is a function of a packet loss in the measured network.
A. IP Addresses to Caches Mapping
Our measurements show that in very few cases the
resolution platforms in the Internet use a single IP
address, while typical platforms have multiple ingress
or egress IPs. In Figure 3 we plot our measurements for
number of egress IP addresses supported by resolution
platforms of the three common networks’ populations
Fig. 3. The number of egress IP addresses supported by resolution
platforms.
that we studied. In enterprises measured via email
servers, 50% of the platforms use more than 20 IP
addresses. In ISPs resolution platforms (measured via
ad-network) 50% use more than 11 IP addresses. In net-
works operating open resolvers the situation is slightly
different, 85% use 5 or less IP addresses.
Fig. 4. The number of caches supported by resolution platforms.
Figure 4 shows our measurements of the cumulative
number of caches in DNS resolution platforms. The
networks running open resolvers use the least number of
caches, 70% use 1-2 caches per IP address. About 60%
of DNS platforms operated by ISPs use 1-3 caches, and
65% of networks measured via email servers use 1-4
caches per egress IP address.
The results in Figures 5, 7 and 8 provide the dis-
tribution of the number of ingress IP addresses vs.
caches for networks operating open resolvers, enterprise
networks and ISPs. The circles’ sizes correspond to
the number of measured networks that fall within that
set, i.e., the larger the circle is the more networks call
within that set. The center of the circle corresponds to
the (x,y) coordinate on the graph. The majority of the
networks with open resolvers have similar properties:
374
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:02:38 UTC from IEEE Xplore.  Restrictions apply. 
IP address and one cache. In contrast, less than 10%
of ISP networks and less than 5% of enterprises use
a single address and cache. The majority of ISPs and
of enterprise networks use more than one address and
more than one cache (almost 65% of IPSs and more
than 80% of enterprises).
The difference in results between the networks with
open resolvers and the enterprise and ISP networks
corresponds to our data collection of networks of open
resolvers. Speciﬁcally,
these DNS resolution caches
are conﬁgured to reduce trafﬁc to the nameservers, to
protect the nameservers against attacks and to lower
the latency for clients’ communication to the services.
Since these caches are used only by clients accessing
that speciﬁc domain, as well as by other services in
those networks, the trafﬁc volume is not high, hence a
few or even a single cache sufﬁces.
Fig. 5.
resolvers.
IP addresses vs. caches count in DNS platforms with open
use 1 ingress IP address and 1 cache – this corresponds
to the largest circle in Figure 5. Smaller circles on y
axis show that many other networks have less than 10
IP addresses. On the other hand, very few networks also
use more than 500 IP addresses, with more than 30
caches (top right circles in Figure 5).
Fig. 7.
IP addresses vs. caches count in SMTP population.
Fig. 6.
tions: open resolvers, enterprises and ISPs.
IP addresses vs. caches count across three networks popula-
B. Analysis
In contrast, the results for enterprise networks and
networks of ISPs are more scattered, with a more
even distribution and signiﬁcantly less IP addresses.
ISP networks appear to use least caches and have the
smallest number of IP addresses, Figure 8.
We illustrate the percentages for different cache to
IP ratio in Figure 6. Almost 70% of networks with
open resolvers use DNS resolution platforms with one
In this section we provide bounds on the complexity
of caches enumeration problem. The complexity de-
pends on the cache selection algorithm, and on the
trafﬁc from other clients, arriving to the resolution
platform.
Assuming a round robin cache selection and no trafﬁc
from other sources, then q = n DNS requests would be
needed to probe all the caches behind a given IP address
in the resolution platform.
375
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:02:38 UTC from IEEE Xplore.  Restrictions apply. 
i=1
after probing i caches for i ∈ {1, ...,n}, is n−i
n . Since
the caches are selected with uniform probability Xi
has a geometric distribution with parameter n−i+1
. By
n
linearity of expectations, we obtain that the expected
number of queries to probe all the caches is E(X) =
i = n · Hn, where Hn
E(X1) + ... + E(Xn) = n × Σn
1
i=1
i . For n → ∞, the
1
is the harmonic series, Hn = Σn
series converges to Hn = logn + ε + 1
2n + O( 1
n2 ). Hence
E(X) = nlogn + nε + 1
n ). We obtain E(X) =
(cid:3)
nlogn + O(n) = Θ(nlogn).
In our Internet measurements, we perform caches
enumeration in two phases: init and then validate,
which we run N times in “parallel”. Namely, during
the initialisation phase we send N seeds: s1,s2, ...,sN
(in parallel or in rapid succession). Then, we run the
validate phase requesting for the records inserted during
the init phase: c1, ...,cN (in parallel or in rapid succes-
sion). During the validate phase we check for presence
of our seeds in the caches, and count the instances of
caches.
2 + O( 1
A prerequisite is that N (number of copies) is larger
than n (number of caches). Speciﬁcally, the expected
part of the n caches that is not covered in N attempts
is roughly exp(− N
n ), so only a small fraction of caches
may be missed with N = 2∗n. Consequently, with seeds
s1, ...,sN we statistically initiate all the caches and we
count the caches c1, ...,cN by checking for presence of
seed records in them planted during the init phase.
We expect success rate of N · (1 − exp(− N
n ))2; as N
n
grows, this asymptotically reaches N.
VI. Related Work
Our work is related to the research on DNS platforms
and its results and tools are especially important for
security of DNS. We review related work and the
relevant threats on caches and explain the relationship
to our work.
Particularly relevant to our work are studies on the
client side of the DNS infrastructure, including studies
of the actors involved in resolution platforms and study-
ing of DNS software ﬁngerprinting. Prior work studied