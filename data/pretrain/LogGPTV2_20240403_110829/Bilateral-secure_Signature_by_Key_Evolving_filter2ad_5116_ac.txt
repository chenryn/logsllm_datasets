procedure.
e(mxj
1 , Yj) = e(mxj
1 , g
xj
j )
2
·xj
2
)
xj
= e(m, g
1
j
= e(m, gx
j )
Combining steps 1 and 2, our proposed FBSS signature
scheme is correct.
5.2 Security
The following theorem shows that the signature scheme
is bilateral-secure. Security of the scheme follows from the
hardness of the CDH problem.
Theorem 2. The proposed key-evolving signature scheme
is bilateral-secure under the random oracle model for any
probabilistic polynomial time adversary if the CDH assump-
tion holds.
Proof. We prove it by contradiction. Suppose there is a
probabilistic polynomial time adversary A (t, qs, qu, ε) that
breaks the signature scheme, namely breaks the forward-
security or backward-security with ε-advantage. Then we
-time algorithm B that solves the CDH problem
build a t
′
with advantage at least ϵ
, where
′
′ ≤ t + cq(qH1 + 2qs + 2qu)
t
(5)
cq denotes the maximum time of one time query, qH1 denotes
the number of queries to the hash function H1 and
′ ≥
ϵ
ϵ
2e(1 + qs)
.
(6)
ϵ
which yields a algorithm that solves the CDH problem in
group G1 with at least
Let (g, u = ga, h) be B’s challenge in group G1. Recall
that B’s goal is to break the CDH assumption which asks B
to ﬁnd v ∈ G1 such that v = ha. B interacts with A in the
following three phases:
2e(1+qs) -advantage.
• Setup phase: Algorithm B starts by selecting two ran-
dom integers y1, y2 ∈ Zq, then B calculates uy2 gy1y2 =
gy2(a+y1) as the public key at time periods 0, which
implies that x = y2(a + y1), x1 = a + y1 and Y0 = gy2 .
B’s goal is to compute ha. In the process of attack,
our algorithm B records all information (previous pub-
lic keys or signatures) of diﬀerent time period into a
table, which provide facilities for B to query the infor-
mation of previous time periods while calculating ha in
the future. The current time period is set to 0. Algo-
rithm B maintains a list of tuples (j, sj, xj
1, πj, Yj) for
key updating and this list is initially empty. We call
this list as the updated-list. Finally, B adds the tuple
(0, 1,⊥, 0, Y0) to the updated-list, where ⊥ denotes the
default values.
• Query phase: In the query phase A can issue several
types of requests in an adaptive, interactive manner.
(A can also repeatedly make random oracle queries to
H1 and H2 just as the Sign and Update queries).
{ H2 queries: At any time period j, B allows A
to query the random oracle H2. In order to re-
spond to these queries, B maintains a list of tuples
528(j, gj, cj) as explained below. We refer to this list
as the H2-list. This list is initially empty. When
A queries the oracle H2 at time period j, algo-
rithm B responds as follows:
1. If the query at time period j already has been
issued on the H2-list in a tuple (j, gj, cj), then
the algorithm B responds with H2(j) = gj ∈
G1.
2. Otherwise, B chooses a random cj ∈ Zq and
computes gj = gcj ∈ G1.
3. Algorithm B adds the tuple (j, gj, cj) to the
H2-list and responds to A by H2(j) = gj.
, algorithm B responds as follows:
In fact, at each time period j, we allow algorithm
A to query H2 many times. However, no matter
how many times A queries, the query results are
the same. Thus, A queries to H2 only once in the
description of algorithm B.
{ H1 queries: At any time period j, B allows A
to query the random oracle H1. For respond-
ing to these queries, B maintains a list of tuples
(Mi, wi, bi, τi) as explained below. We refer to
this list as the H1-list. This list is initially emp-
ty. When A queries the oracle H2 at a point
Mi ∈ {0, 1}∗
1. If the query of Mi already has been issued
on the H1-list in a tuple (Mi, wi, bi, τi), then
algorithm B responds with H1(Mi) = wi ∈
G1.
2. Otherwise, B generates a random coin τi ∈
{0, 1} such that Pr[τi = 0] = 1/(qs + 1).
3. Algorithm B also runs the above algorithm
for responding to H2-list and obtains a gj ∈
G1 such that H2(j) = gj.
4. Algorithm B picks a random bi ∈ Zq and com-
∈ G1.
putes wi = h1−τi gbi
5. Algorithm B adds the tuple (Mi, wi, bi, τi) to
the H1-list and responds to A by H1(Mi) =
wi.
j
Note that either way wi is uniform in G1 and is
independent of A’ current view as required.
{ Update: At any time period j − 1, algorithm is
allowed to issue the key update queries. Firstly, B
picks a random coin πj ∈ {0, 1} such that Pr[πj =
0] = 1/2. If πj = 0, then B updates the key to
the next time period j as follows:
1. Algorithm B runs the above algorithm for re-
sponding H2-list to obtain a gj ∈ G1 such
that H2(j) = gj.
2. Algorithm B selects a random sj ∈ Zq and
(cid:0)1
j and P Kj = (ugy1 )cj y2 ,
3. Algorithm B adds the tuple (j, sj,⊥, πj, Yj)
If πj = 1, then B updates the key to the next time
period j as follows:
1. Algorithm B runs the above algorithm for re-
sponding H2-list to obtain a gj ∈ G1 such
that H2(j) = gj.
computes Yj = gy2s
where u = ga.
to the updated-list, here πj = 0.
2. Algorithm B selects a random xj
(cid:0)1
∈ Zq and
1
computes Yj = (gj)y2(a+y1)(xj
1)
and P Kj =
(gj)y2(a+y1). One may worry that a is un-
known and in fact we can calculate the P Kj
by
P Kj = (gj)y2(a+y1)
= (gcj )y2(a+y1)
= (ugy1 )y2cj
and thus Yj.
3. Algorithm B adds the tuple (j,⊥, xj
to the updated-list, here πj = 1.
1, πj, Yj)
{ Sign: Let Mi be a signature query at time period
j issued by A. If πj = 0, then we obtain the tuple
(j, sj,⊥, 0, Yj) from the updated-list. Algorithm
B responds to this query as follows:
1. Algorithm B runs the above algorithm for re-
sponding H1-list to obtain a wi ∈ G1 such
that H1(Mi) = wi. Let (Mi, wi, bi, τi) be the
corresponding tuple in the H1-list. If τi = 0,
then B reports failure and terminates.
2. Otherwise, we know τi = 1 and hence wi =
(gj)bi where gj = gcj . Then B responds to A
with ⟨j, σi = ⟨σij, Yj⟩⟩, where
σij = (ugy1 )cj bisj
and Yj is obtained from the updated-list. Ob-
serve that σij = w(a+y1)sj
and the underly-
2 = (a + y1)sj · y2s
−1
ing xj
j = y2(a + y1),
1
therefore σi is a valid signature on Mi at time
period j.
· xj
i
If πj = 1, then we obtain the tuple (j,⊥, xj
1, 1, Yj)
from the updated-list. Algorithm B responds to
this query as follows:
1. Algorithm B runs the above algorithm for re-
sponding H1-list to obtain a wi ∈ G1 such
that H1(Mi) = wi.
2. Then B responds to A with ⟨j, σi = ⟨σij, Yj⟩⟩,
where σij = w
and Yj is obtained from
the updated-list. Observe that the underly-
·y2(a+y1)(xj
−1 = y2(a+y1),
ing xj
1)
1
therefore σi is a valid signature on Mi at time
period j.
{ Break-in: The algorithm A is allowed to request
the sign key at some time periods. For responding
the query at time period j, algorithm B does the
following:
1. Algorithm B gets the πj from the updated-
If πj = 0, then B reports failure and
·xj
2 = xj
xj
1
i
1
∗
∗
• Forge phase: Eventually algorithm A produces a message-
, Mf , σf ) of time period j
such that
signature pair (j
no signature query was issued for Mf and j
is not
the break-in time period. If there is no tuple on the
H1-list containing Mf , then B issues a query itself for
∗
list.
terminates.
2. Otherwise, B obtains the xj
updated-list and sends ⟨xj
key to A.
1 and Yj from the
1, Yj⟩ as the signing
529H1(Mf ) to ensure that such a tuple exists. We as-
∗
sume σf is a valid signature on Mf at time period j
,
where σf = ⟨σf j, Yj(cid:3)⟩. If it is not, B reports failure
and terminates. Then we computes ha as follows:
1. Algorithm B gets the πj(cid:3) from the updated-list.
If πj(cid:3) = 1, then B reports failure and terminates.
2. Otherwise, B ﬁnds the tuple (Mf , w, b, τ ) on the
H1-list. If τ = 1, B reports failure and terminates.
Otherwise, τ = 0 and therefore H1(Mf ) = w =
h · gbcj(cid:3)
. Hence we have
σf j = h(a+y1)sj(cid:3) · (gbcj(cid:3)
)(a+y1)sj(cid:3)
= (ha · hy1 · (ugy1 )bcj )sj(cid:3)
and thus we compute ha by
ha =
(cid:0)1
j(cid:3)
(σf j)s
hy1 · (ugy1 )bcj(cid:3)
This completes the description of algorithm B. It remains
to show that B solves the CDH problem in G1 with proba-
′
bility at least ϵ
. To do so, we analyze four events needed
for B to succeed:
• E1: B does not abort as a result any of A’s signature
queries.
• E2: B does not abort at the break-in phase.
• E3: A generates a valid message-signature pair Mf , σf .
• E4: πj(cid:3) = 0 for the tuple on the updated-list and τ = 0
for the tuple on the tuple containing Mf on the H1-list.
From the descrition of algorithm B, the parameters πj(cid:3)
and τ in event E4 are chosen randomly and thus E4 is inde-
pendent of E3, and the probability of succeeding is
Pr[B succeeds] = Pr[E3] Pr[E4]
= Pr[E3|E1 ∧ E2] Pr[E1 ∧ E2] Pr[E4]
Since that E1 and E2 are independent of each other, we
have that Pr[E1 ∧ E2] = Pr[E1] Pr[E2]. Consequently, we ob-
tain that
Pr[B succeeds] = Pr[E3|E1 ∧ E2] Pr[E1] Pr[E2] Pr[E4]
First, the sign queries were issued at most qs times and
the the probability that algorithm B does not abort because
of sign queries is at least
(7)
Pr[E1] = (1 − 1
1 + qs
)qs ≥ 1
e
(8)
where e is the base of the natural logarithm.
Second, the break-in queries and forge phase both happen
at most only once and the coin π in the updated-list and
the coin τ in the H1-list are both independent, thus the
probability of E2 and E4 is
and
Pr[E2] =
1
2
Pr[E4] =
·
1
2
1
1 + qs
(9)
(10)
Third,
if algorithm B does not abort in the signature
queries and break-in query, then algorithm A’s view is i-
dentical to its view in the real attack. Thus the probability
of A generating a valid message-signature pair Mf , σf is
Pr[E3|E1 ∧ E2] = ϵ
(11)
Consequently, substituting Equations (8), (9), (11) and
(10) into Equation (7), we obtain the probability of B suc-
ceeding is
′
ϵ
= Pr[B succeeds] = Pr[E3] Pr[E4] ≥
ϵ
2e(1 + qs)
Algorithm B’s running time is the same as A’s running
time plus the time it takes for qH1 + qs H1 queries, qu H2
queries, qs signature queries, qu key update queries, and one
break-in query. Suppose each of these queries takes at most
cq time. Hence the total running time is at most
′ ≤ t + cq(qH1 + 2qs + 2qu)
t
This completes the proof of Theorem 2.
6. PERFORMANCE EVALUATION
In this section, we show the theoretical and experimental
performance of our scheme respectively. We also compare
our scheme FBSS with the scheme FSSUU in [8], which is
the most related state-of-the-art work. First, we compare
FBSS and FSSUU from the perspectives of time complexity
and space complexity theoretically. Second, we implement
FBSS and FSSUU in C++ programming language to eval-
uate their experimental performance. Experimental results
demonstrate that FBSS is more eﬃcient than FSSUU, ex-
cept for the key update algorithm; FBSS is also more space-
saving than FSSUU because of the trade oﬀ between the
time complexity and space complexity.
6.1 Theoretical Evaluation
We ﬁrst compare our signature scheme FBSS and the
scheme FSSUU theoretically, which illustrates that our F-
BSS outperforms FSSUU in terms of eﬀectiveness and eﬃ-
ciency.
Let Tp be the time of one pairing operation, Te be the
time of one exponentiation operation, Tm be the time of one
multiplication operation, and G1 be the length of the ele-
ments in the group G1 (such as 128, 256, 512 bits). Usually,
we have that Tp > Te > Tm, where Tp is about 8 ms, Te is
about 1.8 ms and Tm is about 0.013 ms. Table 2 presents
the comparison between our FBSS and the FSSUU, where l
is a parameter capturing the total time periods in FSSUU,
m is the binary representation length of message in FSSUU,
and k is the parameter relevant to the number of players in
FBSS.
In the key generation algorithm, our FBSS requires k + 1
exponentiation operations and k(k + 1) multiplication oper-
ations; the costs in the FSSUU mainly center on the l(l+1)
exponentiation operations. In reality, to maintain a signa-
ture system to be used for a longer time, l usually is larger
than the parameter k, for example l = 10, 20, 30,··· and
k = 3, 4, 5,··· . Thus FSSUU requires more times to gener-
ate their keys. l(l−1)
pairing operations are required to check
whether a key is valid at some period in FSSUU, which is
increasing with the parameter l. Clearly, the cost is much
lager than the two pairing operations in FBSS. To compare
2
2
530Table 2: Theoretical comparison of FBSS and FSSUU