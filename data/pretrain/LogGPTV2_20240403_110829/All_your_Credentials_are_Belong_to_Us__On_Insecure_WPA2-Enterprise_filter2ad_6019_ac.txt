many instructions use screenshots to illustrate the steps that users
should follow, although sometimes the texts might contradict the
images. In such cases, we follow the textual description.
When we assign labels to instructions, we respect the OS (and
version) that each instruction is explicitly specified to be targeting,
however, in some cases it is necessary to extrapolate. The first
such case concerns different versions of Android. While we made a
distinction between Android 6- and 7+, many TEIs do not take that
into consideration when they prepare instructions, and oftentimes
they just provide one instruction for Android (without specifying
which version). Given such instructions, we would grade them for
both Android 6- and 7+, based on the UI restrictions discussed
in Section 4.1. Another case where we perform extrapolation is
when dealing with generic instructions. We assign labels based
on OS-specific instructions if they exist, however, sometimes TEIs
prescribe very generic instructions that are non-OS-specific. Given
such instructions, we extrapolate based on the default OS behavior
discussed in Section 4.
5.1.2 Ambiguity and threats to validity. The main challenge of
evaluating instructions is the ambiguity of natural languages. While
the OS-specific instructions tend to be relatively straightforward
to grade, the generic ones can sometimes be incredibly vague and
confusing. For example, some non-OS-specific instructions might
implicitly base their terminologies on one OS (e.g., "Unspecific",
an UI option only valid for Android 6-), and claim that the users can
configure similarly on other OSs. In those cases, we try our best
to match the given information, and imagine what a user would
do, given the default behaviors and UI restrictions discussed in
Section 4. This, however, is not a definitive prediction of what
might actually happen in real life. Also, some instructions provide a
link for downloading a CA certificate, without actually instructing
the users how to install it. For these cases, we give them the benefit
of the doubt and imagine the users would be able to properly install
the CA certificate (and use it as the trust anchor if applicable).
Moreover, some instructions casually mentioned information
that might be useful in performing certain checks, e.g., "When
prompted, click Trust, to trust the  certificate." We
interpret this as clicking the Trust button directly (assuming the
 clause is merely informational and not a precondition
to the click), but some might argue that this means the server name
is being checked (γ = M). Although we cannot guarantee perfect
labeling of instructions, to improve the overall consistency and reli-
ability of our results, one of our team members randomly sampled
and verified thousands of security labels against their correspond-
ing instructions, and the lead author independently checked all the
security labels assigned. Most of the labeling conflicts are due to
language ambiguity (similar to the examples given above), and con-
fusing cases were discussed among authors, with the corresponding
author making the final decision in conflict resolution.
Table 2: Instruction security (excluding profile installers)
Total
Labels
Campus Wi-Fi
Insecure
Labels
774
663
888
961
797
908
243
402
5636
801
725
990
992
809
916
251
454
5938
OS
Windows 10
Windows 7
Android 7+
Android 6-
macOS
iOS
Chrome OS
Others
Total
Insecure
OS
Perc.
96.6% Windows 10
91.4% Windows 7
89.7%
Android 7+
96.9%
Android 6-
98.5%
99.1%
96.8%
88.5%
94.9%
Others
Total
Chrome OS
macOS
iOS
eduroam
Insecure
Labels
780
624
761
840
749
799
207
368
5128
Total
Labels
814
692
941
941
766
812
247
484
5697
Insecure
Perc.
95.8%
90.2%
80.9%
89.3%
97.8%
98.4%
83.8%
76.0%
90.0%
Table 3: Majorities of labels assigned for each OS
OS
Total
Windows 10 923
Windows 7 863
Android 7+ 1040
Android 6- 1043
893
993
Chrome OS 276
macOS
iOS
Campus Wi-Fi
1st Majority
N, n/a, N, Ob.
P, Sys., N, Ob.
N, n/a, N, Ob.
N, n/a, N, Ob.
N, n/a, N, Cl.
N, n/a, N, Cl.
N, n/a, N, Ob.
Perc.
81.6%
49.6%
44.0%
49.1%
80.9%
81.1%
34.8%
eduroam
2nd Majority
Installer only
N, n/a, N, Ob.
N, n/a, N, Cl.
N, n/a, N, Cl.
Installer only
N, n/a, M, Cl.
P, Sys., N, Ob.
Perc.
13.2%
27.2%
41.3%
43.0%
9.41%
10.3%
27.5%
OS
Total
Windows 10 1187
Windows 7 1054
Android 7+ 1227
Android 6- 1223
1148
1195
macOS
iOS
1st Majority
N, n/a, N, Ob.
P, Sys., N, Ob.
N, n/a, N, Ob.
N, n/a, N, Ob.
N, n/a, N, Cl.
N, n/a, N, Cl.
2nd Majority
Perc.
Perc.
63.2% eduroam CAT only 23.6%
45.4% eduroam CAT only 25.6%
28.1%
33.9%
38.4%
30.3%
58.4% eduroam CAT only 24.9%
57.0% eduroam CAT only 24.1%
20.1%
N, n/a, N, Cl.
N, n/a, N, Cl.
P, Sys., N, Ob.
Chrome OS 487 eduroam CAT only 42.1%
5.2 Analysis of results
Each applicable instruction (e.g., a single Webpage/PDF) can cover
one or more OSs and can thus lead to multiple labels being as-
signed. For the 7275 applicable instructions collected, we assigned
a total of 14602 labels, 2967 of which indicate profile installers,
and 11635 are security labels for manual configurations follow-
ing our framework presented in Section 3. 243 TEIs mandate the
use of profile installers, and 1818 TEIs endorsed manual configura-
tions, 97.2% of which prescribed at least one insecure instruction
for one of the mainstream OSs. An OS-specific break down of the
security label assigned for manual configurations can be found
in Table 2. Not all schools have both a dedicated campus Wi-Fi and
eduroam, hence we separate the configuration instructions accord-
ingly. Overall, campus Wi-Fi instructions are slightly less secure
than their eduroam counterparts. Nevertheless, a vast majority of
both rely on manual configurations, and the percentages of inse-
cure labels are overwhelming. Another highlight from Table 2 is
that Android 7+ performed slightly better than the other OSs, and
we attribute this to its UI design, which gives the users a slightly
higher chance of ending up with a (P, Sys., P, _) configuration.
The rows of “Others” concern instructions for various OSs that
have relatively low market shares, including Windows 8, Linux
distributions, Blackberry and Symbian. Chrome OS is only sporadi-
cally supported among TEIs, primarily by schools in the US. For all
OSs considered, however, the majority of labels are rather insecure,
as shown in Table 3. Some examples of misguided instructions can
be found in Appendix D.
Session 4B: Wireless, Mobile, and IoT CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1107We found that about 29% of the labels across all OSs are based
on generic, non-OS-specific instructions. Also, among all the An-
droid labels, more than 70% of them were from non-version-specific
instructions. These numbers suggest that authors of instructions
often want a one-size-fits-all solution, without carefully consid-
ering the technical subtleties of different versions of OSs. This is
particularly bad for Android, where an insecure instruction based
on old versions (e.g., without server name checking) could limit the
security of newer, better versions.
Further analysis of the data shows interesting patterns. We see
that only a tiny portion of instructions actually mandate checking
the hash digest of server certificates (less than 3% for Windows 10
and less than 2% for macOS and iOS). We attribute this to a low
awareness of its positive implications among authors of instructions
and the UI design of the OSs, as in all three cases the hash digest
is not shown to the user by default, hindering adoption. In fact,
on macOS and iOS, the digests are buried in a pile of auxiliary
information regarding the certificate, which might have contributed
to the even lower adoption percentage than Windows 10. Moreover,
the percentage of profile installers for eduroam is more than doubled
on each OS when comparing to that of campus Wi-Fi. We attribute
this to the success of the CAT project. However, for both categories,
Android sees the lowest percentage of profile installers.
Also, we found that the purple nodes in Figure 1 are not very
common in the wild. Since Android 6- and Chrome OS do not have
an input box for server name, those are the best security labels
that they can achieve from the UI. Unfortunately, the percentage
observed is rather low (less than 3% for campus Wi-Fi, and less
than 9% for eduroam). Regarding the choice of phase-2 method on
Android and Chrome OS, MSCHAPv2 is much more prominent
than the other options, but a significant portion (more than 30%
for Android) of instructions left it unspecified. Together with the
fact that most do not configure proper certificate validation, this
leaves an enormous amount of cleartext passwords world-wide to
be stealable by an ET attacker.
The regional statistics for the various OSs considered can be
found in Table G7 to G9 in Appendix. The overall trends still hold,
though several regions, primarily European countries, rely more
on eduroam CAT and are less prone to insecure configurations.
For Android, the choice for phase-2 method also differs, with some
Asian countries/regions tend to favor δ = Cl. over δ = Ob.
6 ANALYSIS OF EDUROAM CAT PROFILES
To get a more complete picture of supplicant configurations, we
also collect and analyze the official eduroam CAT profiles that are
available to users. We choose to focus on eduroam CAT because a
significant number of TEIs recommend/mandate the use of CAT,
and its pre-configured profiles are publicly accessible online (https:
//cat.eduroam.org/). Some TEIs might employ similar tools from
other vendors for their campus Wi-Fi, but in those cases the users
would first need to connect to a guest network in order to download
the installers and profiles, making them difficult for us to obtain at
scale. Another advantage of focusing on CAT is that for each OS
that it supports, a standard format would be used to encapsulate
the profile. We can thus use standard text processing tools for the
analysis, and consult the corresponding documentation to obtain
the syntax and semantic meanings of the contents [1, 4–6].
We performed the data collection in January 2021, and in the
end we successfully crawled 3593 CAT configuration profiles for
each of the mainstream OSs considered in this study (Windows
10 has only 3592 downloadable profiles because one school does
not offer CAT profiles for it). These profiles are from 3300 unique
identity providers (IdPs)2. Sometimes a CAT profile can contain
the configuration of multiple Wi-Fi (and wired) networks. In most
cases, each organization runs an IdP for its users, but occasionally
several organizations share the same IdP (and thus one IdP can
be used in multiple profiles). Since a precise mapping between
organizations and IdPs is unavailable to us, in what follows we use
IdPs to approximate the organizations behind profiles.
A quick inspection shows that iOS and macOS profiles are mostly
the same, with only minor differences in some internal payload
identifiers (which do not affect the security of the configurations),
and that macOS profiles sometimes have additional LAN config-
urations (on top of the WLAN ones), and thus we only consider
macOS (but not iOS) profiles. Android CAT profiles appear to be
quite similar across different versions of Android, and for simplicity
we focus on profiles for Android 10. Likewise, we only consider
profiles for Windows 10 as the ones for Windows 7 are quite similar.
We found that although CAT profiles in general lead to more
secure connection attributes (e.g., certificate validation is always
enabled) than their manual configuration counterparts, they are not
completely free from configuration problems. Specifically, there are
interesting discrepancies across profiles for different OSs, some of
which can lead to vulnerabilities and other usability issues. Names
of TEIs have been redacted to protect them from potential attacks.
6.1 No server name checking (γ = N)
The first issue we discovered is that not all CAT profiles contain
the information necessary for server name checking to happen. For
Windows 10, Android 10, and macOS, we found only one profile
without server name checking information. Since the resulting
configurations rely on an internal CA as the trust anchor, depending
on its issuing policy, it might not be possible for an ET attacker to
obtain a workable certificate.
For Chrome OS, however, the situation is more bleak. In total we
found 30 profiles without server name checking information. To
determine whether they would be vulnerable to an ET attacker, we
cross-referenced the anchoring CA certificates in such profiles with
the trusted root CA certificates in /etc/ssl/certs on a recent
installation of Ubuntu 20.04. 12 out of the 30 profiles rely on at
least one commonly trusted root CA certificate as the trust anchor
(Table E1 in Appendix). In other words, an attacker can simply
purchase a certificate chain from the corresponding anchoring CAs
for a domain under control, and then use it to launch the ET attack
to exploit these profiles and steal user credentials. For the other 18
profiles, the success of the ET attack once again depends upon the
issuing policies of their corresponding anchoring CAs.
Our findings on profiles without server name checking seem to
correlate with the fact that Chrome OS does not have a hostname
input box on its UI (Section 4.2.2), but short of interviewing the
2For the purpose of this paper, IdPs are logically equivalent to authentication servers.
Session 4B: Wireless, Mobile, and IoT CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1108actual creator of those problematic Chrome OS profiles, we cannot
definitively prove causality.
6.2 Unspecific server names
Another requirement for server name checking is that the match-
ing constraint needs to be hierarchically specific. This is usually
achieved by either adding more subdomain labels if a hostname is
preferred, or taking the directory attributes (e.g., country, locality,
organization, etc.) into consideration. Using only a single string
without any directory or domain components as the server name
matching constraint is prone to collision, as an attacker can try to
obtain a certificate chain with the same server name from a differ-
ent country, and then use that to satisfy the matching constraints.
Some profiles contain multiple name matching constraints, and a
certificate name is considered to be a match when at least one of
the constraints is satisfied. Thus we only need to consider the most
permissive constraint as we focus on potential impersonation at-
tacks. Our analysis revealed several profiles with unspecific server
names that rely on commonly trusted CAs as the trust anchor (see
Table E2 in Appendix). Since the expected names are rather generic
for those profiles, an attacker can set up a similarly named entity
in a different country and obtain a workable certificate chain from
the same anchoring CAs, and then use that to launch the ET attack
against staffs and students of these TEIs.
6.3 Permissive hostname constraints
Another way to render server name checking ineffective is to use
overly permissive hostname constraints. For this, we searched for
hostname constraints that are less than 8 characters long, which
resulted in only tens of profiles for each OS. As some organizations
happen to own short domains, we manually filtered out those cases.
In the end, we found 20 Chrome OS profiles to have exceptionally
short and permissive hostname matching constraints (e.g., TLDs like
.at, .br, .cz, .dk, etc.). After cross-referencing the anchoring CAs