title:Cozilet: Transparent Encapsulation to Prevent Abuse of Trusted Applets
author:Hisashi Kojima and
Ikuya Morikawa and
Yuko Nakayama and
Yuji Yamaoka
Cozilet: Transparent Encapsulation to Prevent Abuse of 
Trusted Applets 
Hisashi Kojima 
Ikuya Morikawa 
Yuko Nakayama 
Yuji Yamaoka 
Secure Software Development Group 
Fujitsu Laboratories Limited 
{hisashi, ikuya, yamaoka}@labs.fujitsu.com, PI:EMAIL
Abstract 
the  signed  applet 
to 
signed  applet,  called  a  cozilet, 
We have developed a mechanism which prevents abuse 
of trusted Java applets, such as digitally signed applets. A 
signed  applet  is  usually  permitted  by  a  user  to  perform 
certain  functions.  However,  an  attacker  may  improperly 
recompose 
include  malicious 
components and harm(cid:2)the  user by abusing such functions 
of a signed applet. In this paper, we call this a malicious 
recomposition  attack  and  propose  an 
innovative 
mechanism  to  solve  the  problem  of  such  attacks.  Before 
deployment,  a target signed applet is  encapsulated  into a 
special 
in  an 
indecomposable  format.  On  its  execution,  the  cozilet 
isolates  the  classes  and  resources  of  the  encapsulated 
applet  by  assigning  a  special  class  loader  unique  to  the 
applet. It also enforces applet-document binding so that it 
is  never  executed  from  untrusted  HTML  documents.  The 
mechanism  is  easily  applicable  to  target  signed  applets 
because it is transparent not only to target applets, but also 
to  current  Java  VM  implementations.(cid:2)Therefore,  the 
mechanism can easily protect both applets developed in the 
future  and 
in  use.  We  have 
implemented  this  mechanism  for  Sun  Java  VM.  In  this 
paper,  we  describe 
its  basic  architecture  and 
implementation details. 
the  applets  currently 
1. Introduction 
Web applications use Java applets to control client-side 
behavior. For security reasons, applets are not permitted to 
perform  any  behavior  which  may  harm  users.  These 
in  Web 
restrictions 
application 
various 
e-government  systems  ask  users  to  digitally  sign  their 
application(cid:2)forms or registration forms using smart cards. 
This  cannot  be  done  with  normal  applets,  because  they 
cannot access client-side local devices, such as smart cards. 
sometimes  become  obstacles 
development. 
example, 
For 
To empower applets, applets whose origins are guaranteed 
are  allowed  to  bypass  the  restrictions.  A  popular  way  to 
guarantee  their  origins  is  to  digitally  sign  them.  Signed 
applets can dynamically ask users for permission to bypass 
the  restrictions,  and  provide  an  important  benefit  in  that 
they do not oblige users to change their security settings in 
advance. 
Unfortunately,  attackers  may  reuse  signed  applets  and 
harm users by abusing the functions of the applets. Signed 
applets consist of reusable components, such as signed JAR 
files [13]. Attackers can try to call methods or modify fields 
of  classes  in  signed  jar  files  by  recomposing  them  as  the 
attackers’ own components for malicious purposes. In this 
paper, we call this a malicious recomposition attack. This 
issue  applies  not  only  to  applets,  but  also  to  other  signed 
reusable components, such as signed ActiveX controls. In 
contrast  to  server-side  vulnerabilities,  which  can  be 
mitigated  by  stopping  vulnerable  servers,  it  is  difficult  to 
stop the spread of damage caused by vulnerable client-side 
signed  components  because  attackers  may  have  already 
obtained  them  and  can  redistribute  them  for  their  own 
purposes. There is a pressing need to address this problem 
of malicious recomposition attacks. 
We  have  analyzed  the  risks  associated  with  signed 
applets  and  have  considered  various  strategies  that  a 
malicious recomposition attack can follow. Although these 
attack  strategies  can  be  prevented  through  careful  design 
and  programming  on  the  part  of  developers,  most 
developers  cannot  easily  understand  and  prevent  all 
possible strategies.(cid:2)Developers  need  to  ensure  that some 
mechanism  for  signed  applets  lessens  the  possibility  of  a 
malicious  recomposition  attack.  To  easily  apply  such  a 
mechanism to the signed applets now in use, however, the 
mechanism should not require changes to signed applets or 
the 
Java  VM 
implementations. Therefore, we have developed the Cozilet
mechanism which protects signed applets transparently by 
encapsulating them. 
replacement  of  currently 
installed 
The rest of this paper is organized as follows. Section 2 
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
1
describes  the  basic  mechanism  and  typical  examples  of 
malicious recomposition attacks on signed applets, to show 
that  current  Java  VM  implementations  are  susceptible  to 
such attacks. Section 3 describes our mechanism to protect 
signed apples from a malicious recomposition attack. This 
mechanism is transparent to both signed applets and current 
Java VM implementations. Section 4 describes the details 
of implementation. Section 5 discusses the issue in a more 
general  manner, and Section 6 discusses related work. We 
conclude in Section 7. 
2. Malicious recomposition attacks 
To  perform  a  malicious  recomposition  attack,  an 
attacker  needs  to  force  a  trusted  applet  to  harm  a  user  by 
recomposing the trusted applet with malicious components. 
This  section  first  describes  an  example  of  a  signed 
applet.  It  then  goes  on  to  explain  two  typical  attack 
strategies  for  malicious  recomposition:  exploiting  an 
improperly 
implemented  privileged  code  and  class 
replacement. 
2.1. Example of a signed applet 
Suppose,  for  instance,  there  is  a  signed  applet  for 
e-commerce.  It  is  digitally  signed  by  a  trustworthy 
company  and  allowed  to  perform  potentially  insecure 
behavior,  such  as  accessing  a  smart  card.  The  applet  is 
composed  of  the  signed  JAR  file  purchase.jar  and 
invoked by the applet tag below. 
<applet code="foo.PurchaseApplet" 
 archive="purchase.jar" ... 
purchase.jar includes 
the  applet  main  class 
foo.PurchaseApplet.  Here,  purchase.jar  and  an 
HTML  document  with  the  above  applet  tag  would  be 
deployed on a trusted Web site. If a user accesses the Web 
page (i.e., the HTML document) on the site, Java Runtime 
Environment (JRE) shows a security dialog to the user. The 
dialog  displays  the  signer  information  of  the  applet  and 
asks the user to grant the applet the permission required to 
perform  the  insecure  behavior.  In  this  example,  since  the 
signer is a trustworthy company, the user will grant it. The 
applet then runs and performs the insecure behavior. 
2.2. Exploiting an improperly implemented 
privileged code 
The  first  attack  strategy  is  where  an  attacker  uses 
classes  of  a  signed  applet  as  library  classes.  With  this 
strategy, the attacking applet can access the classes of the 
target applet and execute their methods. This kind of access 
is usually prevented through stack inspection (see Section 
2.2.2), but this is bypassed if there is a privileged code in 
the class and it is not implemented properly. 
This  subsection  describes  the  strategy.  First,  the  basic 
strategy is described. After that, the Java security model is 
described  and  it  is  shown  that  an  attacker  cannot  usually 
use  a  target  applet.  Finally,  the  privileged  code  for 
bypassing  stack  inspection  is  described  and  it  is  shown 
that  improperly  implemented  privileged  code  causes  a 
security breach. 
2.2.1. Abuse of a signed applet as a library. Suppose that 
an  attacker  creates  an  attacking  applet  which  maliciously 
uses the classes in purchase.jar from Section 2.1. The 
attacking applet is unsigned and composed of the unsigned 
JAR(cid:2)file evil.jar. The applet main class is EvilApplet
and  is  included  in  evil.jar.  The  attacker  deploys  the 
HTML  document  including  the  applet  tag  shown  below, 
with evil.jar and purchase.jar on the attacker’s own 
Web site. 
<applet code="EvilApplet" 
 archive="evil.jar,purchase.jar" ... 
If  the  attacker  can  lead  a  user  to  the  above  page,  the 
attacking applet runs and may harm the user. Although the 
security dialog in Section 2.1 is shown, the user will grant 
permission because the dialog shows the information of the 
trusted signer who signed purchase.jar.
However,  the  attacker  normally  cannot  use  the  target 
applet,  because  Java  uses  stack  inspection  to  prevent  an 
attacker from performing any insecure behavior [14]. 
2.2.2. Protection through stack inspection. Java uses the 
Sandbox  security  model  which  prevents  untrusted 
programs  from  accessing  system  resources.  Java  defines 
interfaces  to  system  resources  as  system  methods.  In  this 
paper, we call them insecure methods. Java also defines the 
corresponding  permissions  required  for  execution  of 
insecure  methods.  The  stack  inspection  checks  whether 
each caller of a methods has the required permission [14]. 
When  an  insecure  method  is  called,  JRE  checks  the 
trustworthiness  of  classes  in  its  method  call  chain  by 
inspecting the stack of the current thread. If all the classes 
in the method call chain are trusted (e.g., classes of a signed 
applet)  as  shown  in  Figure  1(A),  the  insecure  method  is 
executed. Or if there is any single untrusted class (e.g., the 
classes  of  attackers)  as  shown  in  Figure  1(B),  a  security 
exception  is  thrown  instead  of  execution  of  the  insecure 
method. Therefore, an attacker’s class cannot execute any 
insecure  method,  either  directly  or  indirectly,  via  any 
method of trusted classes in a signed applet. 
Unfortunately, an attacker is sometimes able to bypass 
the  stack  inspection  by  invoking  privileged  code  in  a 
signed applet. 
2.2.3.  Privileged  code.  The  privileged  code  mechanism 
[14]  is  provided  to  enable  a  trusted  class  to  delegate  its 
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
2
(A)
(B)
(C)
inspect
inspect
inspect
insecure()
trusted1()
trusted2()
trusted3()
ok
insecure()
new FileReader()
trusted1()
trusted2()
untrusted()
doPrivileged()
ok
no!
loadConf()
JavaScript code
don’t
care
Figure 1. Stack inspection 
execution  of  an  insecure  method  to  an  untrusted  class.  In 
the  case  of  signed  applets,  it  is  mainly  used  to  accept 
accesses  from  script  code  running  on  a  Web  browser 
(which  we  will  refer  to  as  browser  script  code),  because 
most Java VM implementations regard browser script code 
as untrusted code. 
Suppose that the foo.PurchaseApplet from Section 
2.1  declares  the  method  loadConf()  which  is  called  by 
browser  script  code.    A  sample  implementation  of  the 
method for Sun Java VM is shown below. 
public String loadConf(final String name) { 
 Reader r = // Begin privileged block 
   (Reader)AccessController.doPrivileged( 
    new PrivilegedAction() { 
     public Object run() { 
      try { 
       // Open a text file 
       return new FileReader(name); 
      } catch (Exception e) { 
       e.printStackTrace(); 
       return null; 
 }}});       // End privileged block  
 // Read the file and return string ... 
  : 
}
the 
loadConf()  executes 
insecure  method  new
FileReader()  in  the  privileged  block,  which  starts  at 
doPrivileged().  JRE  regards  the  privileged  block  and 
all the methods called within the block as privileged code, 
and  simplifies  the  stack  inspection  as  follows.  When  the 
browser script code calls loadConf(), JRE checks classes 
in the call chain of new FileReader(), but does not check 
any  callers  of  loadConf()  as  shown  in  Figure  1(C). 
Therefore, untrusted browser script code can execute new 
FileReader().
Improperly 
2.2.4. 
implemented  privileged  code.
Privileged code should be carefully  implemented because 
an  attacker  can  bypass  the  stack  inspection  by  executing 
this code. The example in Section 2.2.3 is vulnerable, and 
an attacker may steal an arbitrary file on a user’s local disk 
by  executing  loadConf().  The  problem  here  is  that  an 
attacker can specify an arbitrary file name as the argument 
name,  and  this  is  passed  to new FileReader()  without 
being properly validated. 
improperly 
The  exploitation  of 
implemented 
privileged  code  is  a  widely  known  problem,  and  some 
guidelines  recommend  that  developers  pay  particular 
attention to it [2][3][4]. Developers of signed applets for 
Microsoft  or  Netscape  Java  VM  especially  should  use 
care because these Java VM implementations require the 
invocation of any insecure method in a signed applet to 
be  implemented  as  privileged  code,  regardless  of 
whether or not there is a call from untrusted code. 
Fortunately,  a  developer  can  avoid  use  of  privileged 
code through careful design. For example, privileged code 
is not needed for a signed applet which is only for Sun Java 