approaches Chord [40] and CAN [31] in sections 4-6. This
section also shows results for Pastry and the static butter-
ﬂy graph (without detailed analysis) and all together omits
Tapestry since its diameter-degree tradeoﬀ is very similar
to that of Pastry.1 Note that our treatment of the butter-
1Strictly speaking, Tapestry’s routing table size is b logb N
instead of (b − 1) logb N [43].
Graph
Degree
Diameter D
de Bruijn
Trie
Chord
CAN
Pastry
Classic butterﬂy
k
k+1
log2N
2d
(b−1)logbN
k
logkN
2logkN
log2N
1/2dN 1/d
logbN
2 logk N (1 − o(1))
Table 1: Asymptotic degree-diameter properties of
the diﬀerent graphs.
ﬂy graph follows the traditional deﬁnition [22], which is the
basis of two recent proposals Viceroy [25] and Ulysses [42];
however, neither of these two graphs exactly implements the
classic butterﬂy. Therefore, as we discuss below, the indi-
vidual diameter-degree tradeoﬀs of these approaches are dif-
ferent from that in the classic graph. We further remove all
fault-resilient additions of each structure (such as the pre-
decessor pointer and r-element successor list in Chord) and
only analyze the “raw” performance of each graph.
As an illustration of ﬁxed-degree tree structures, we also
examine k-ary tries as they have been recently proposed for
DHTs [13]. A k-ary trie uses preﬁx-based routing over a
tree where each parent maintains k children, one child for
each symbol in the alphabet. Consequently, the maximum
degree of any node in the trie is k + 1 and the diameter of
the graph is 2(cid:4)logk N(cid:5) (i.e., the distance to the root and
back).
Finally, recall that the traditional butterﬂy network con-
tains N = mk m nodes (where k is again the degree of each
node) and has diameter D = 2m–1. Notice that D can be
expressed in terms of degree k using Lambert’s function W
[22]:
D = 2m − 1 = 2
− 1 = 2 logk N (1 − o(1)).
(4)
W (N ln k)
ln k
Even though butterﬂies are appealing graphs, there are
non-trivial diﬃculties in building them as nodes join and
leave the system. In one example, Viceroy [25] implements
a binary butterﬂy with diameter 3log2N and degree 7 and
further requires estimation of the number of nodes in the
system. In another example, Ulysses [42] adds logN neigh-
bors to each node and is no longer a ﬁxed-degree graph. As
we show in section 7, distributed de Bruijn graphs possess
no more conceptual complexity than Chord, achieve optimal
diameter in the peer-to-peer graph, and can be built with a
ﬁxed application-layer degree.
Table 1 shows asymptotic diameter and node degree of
de Bruijn graphs and several existing (deterministic) struc-
tures. First note that we assume that CAN uses circular
(toroidal) routing in each of the dimensions, which means
that all nodes along the borders maintain 2d neighbors and
that the CAN graph is regular. Second, Chord allows a gen-
eralization to d log2 N neighbors and diameter log1+d N [40];
however, it is most frequently used with the default value of
d = 1 shown in the table (which is also the version studied
in this paper). Finally, the trie maintains its average de-
gree over all nodes equal to only 2 (since approximately k−1
fraction of the nodes are leaves); however, the imbalance in
the middle of the tree with nodes of degree k + 1 creates a
rather pessimistic diameter-degree tradeoﬀ.
k
k
2
3
4
10
20
50
100
de
Trie Chord CAN Pastry
Bruijn
20
13
10
6
5
4
3
–
40
26
13
10
8
6
–
–
–
–
20
–
–
huge
–
1,000
40
20
–
–
–
–
–
–
20
7
5
Classic
butterﬂy
31
20
16
10
8
7
5
Table 2: Graph diameter for N = 106 (cells with a
dash indicate that the graph does not support the
corresponding node degree).
We next examine the performance of these graphs in a
hypothetical peer-to-peer system of N = 106 nodes. Table
2 shows the diameter of each graph as a function of its de-
gree k. Notice that for low-degree networks (k ≤ 20), even
the trie oﬀers a better diameter than the three classical ap-
proaches (i.e., CAN, Chord, and Pastry). In fact, the trie
routes in half the time compared to Chord or CAN. Also
notice that de Bruijn graphs with the same number of neigh-
bors oﬀer diameters at least four times smaller than those in
Chord and CAN. Furthermore, de Bruijn graphs can route
between any pair of nodes in 20 hops with only 2 neighbors,
which is 10 times less than that required by CAN, Chord,
or Pastry to achieve the same diameter. Finally, the tra-
ditional butterﬂy oﬀers a diameter approximately 50-60%
larger than that in de Bruijn graphs for all values of k.
One interesting observation about CAN points to the fact
that selection of the number of dimensions d is an important
decision for a given number of nodes N . It is noted in [31]
that d is likely to be ﬁxed while N changes; however, as
Table 2 shows, many small values of d (cid:9) log2 N result in
greatly suboptimal diameters. This observation is easy to
explain since CAN’s diameter 1/2dN 1/d is a strictly convex
function with a unique minimum located at d = lnN (e
peers per dimension). Keeping in mind that each dimension
must contain an integer number of peers, the best practical
diameter is achieved for d = log3N . Thus, for N = 106, the
optimal number of dimensions d is 12 (k = 24 neighbors)
and the optimal diameter is 19. Also note that when d =
1/2 log2 N , CAN’s degree and diameter are both equal to that
of Chord (this is shown in Table 2 for k = 20 and also noted
in [31], [40]).
Further examining Table 2, notice that Pastry oﬀers a
good diameter only for large b (cid:10) 2. In fact, to come within
one hop of the optimal diameter for N = 106, Pastry re-
quires at least 160 neighbors (not shown in the table). Such
large routing tables may be impractical in the real Internet
due to high volume of traﬃc required to maintain peer-level
connections and repair broken links when existing neighbors
frequently fail. From this angle, bounded-degree graphs are
preferable.
On the other hand, Pastry has an advantage over other
structures in its ability to employ proximity-based peer se-
lection.
In theory, such graph construction is possible in
Chord, CAN, and de Bruijn, but it requires a less-transparent
implementation. Since the beneﬁts of topologically aware
peer-to-peer networks are hard to quantify with respect to
other metrics, our current study only focuses on pure graph
performance of each approach. Construction of topologi-
cally aware de Bruijn graphs is a possible topic for future
investigation.
4. ROUTING ANALYSIS
De Bruijn graphs have desirable properties for peer-to-
peer networks that stem from their small diameter. How-
ever, the diameter of a graph is simply the largest distance
between any pair of nodes and only provides an upper bound
on the delay (number of hops) experienced by the users. A
much more balanced metric is the average distance between
any pair of nodes since this is the performance a user can
expect from the peer-to-peer system when searching for ob-
jects. In fact, it is possible to reduce the diameter of a graph
and at the same time increase its average routing distance
as was recently demonstrated in [42].
Deﬁne d(x,y) to be the shortest distance between nodes
x and y in a given graph. To better understand how the
distribution of d(x,y) is formed and study expansion prop-
erties of each graph, the full version of the paper [24] ﬁrst
derives the density (mass) function of d(x,y) and then com-
putes its expectation µd. In this paper, we present the most
important results from [24] and omit all technical proofs.
4.1 Chord
Stoica et al.
[40] showed in simulation that the average
inter-node distance µd in Chord is D
2 and oﬀered a sim-
ple explanation of why this happens. They further showed
the distribution of d(x,y) to be bell-shaped as demonstrated
in Figure 2 (left) for N = 1,024. The histogram appears
to be Gaussian as illustrated by an almost-perfect ﬁt of a
Gaussian distribution in the ﬁgure. It has been noted before
that certain real-world graphs (such as those describing web-
page linkage structure [3]) exhibit Gaussian distributions of
d(x,y), but no explanation of why this happens has been
oﬀered. Below, we analyze Chord’s distribution of shortest
distances, understand why it appears to be Gaussian, and
provide additional qualitative insight into the structure of
the graph using “small-world” terminology.
The following lemma is proved in [24].
Lemma 1. Each node in Chord can reach exactly C D
n nodes
at shortest distance n.
Using symmetry of nodes in Chord and the result of this
lemma, the PMF (probability mass function) of d(x,y) is
given by a binomial distribution with parameters p = q = 1/2
(recall that N = 2D):
p(n) =
C D
n
N
=
C D
n
2n2D−n = C
n
D
n p
q
D−n
,
(5)
where p(n) is the PMF of shortest distances d(x, y). Our
simulation results conﬁrm that (5) gives the exact distribu-
tion of shortest path lengths in Chord. The expected value
µd of a binomial random variable is a well-known result and
equals Dp, or simply D
2 . This provides an alternative deriva-
tion of the result previously shown in [40].
The reason why the distribution of shortest distances in
Chord appears to be Gaussian is explained by the de Moivre-
Laplace theorem, which states that the binomial distribu-
tion in (5) asymptotically tends to a Gaussian distribution
with mean Dp = D
4 for suﬃciently
large D. Even though we have not provided an insight into
why certain Internet graphs exhibit Gaussian distributions
2 and variance Dpq = D
30%
25%
20%
15%
10%
5%
0%
y
t
i
l
i
b
a
b
o
r
p
Chord
Gaussian model
1D
3D
2D
4D
y
t
i
l
i
b
a
b
o
r
p
24%
18%
12%
6%
0%
0 1 2 3 4 5 6 7 8 9 10
0
5
10
15
20
distance d(x,y)
distance n
Figure 2: Distribution of shortest paths d(x, y) in
Chord for N = 1,024 together with a Gaussian model
(left). Shortest path distribution in CAN for N =
10 (1D), 102 (2D), 103(3D), 104 (4D) nodes (right).
of shortest paths, we found a clear explanation of this phe-
nomenon in Chord.
There is also a simple intuitive link between the bell shape
of the curve in Figure 2 (left) and the expansion properties
of the graph. As the distance from any given node x in-
creases, the number of new neighbors found by the search
slowly saturates and starts declining after half the nodes
have been reached. This means that many of the newly
found nodes link to some of the previously discovered nodes.
This leads to a situation where the new neighbors “know”
many of the old neighbors, which is often called the small-
world property (or clustering) of the graph [3], [4]. In graph
theory, the growth in the number of new neighbors discov-
ered at a certain distance is related to node expansion of the
graph. Quickly expanding graphs maintain an exponentially
increasing number of new neighbors up to the diameter of
the graph, which means that very few of the new neighbors
“know” the old ones (and hence their clustering coeﬃcients
are virtually zero). We study these phenomena more care-
fully in section 5, but currently conjecture that we should
expect reasonably high clustering and low expansion from
Chord.
4.2 CAN
Recall that CAN organizes its nodes into a d-dimensional
Cartesian space. We ﬁrst examine the average distance in
this graph and then show that for the same degree, CAN’s
distribution of routing distances becomes identical to that
in Chord. The following result in proved in [24] and is men-
tioned for the even values of N in [31].
Lemma 2. The expected distance between any pair of nodes
− o(1) for odd N.
in CAN is D
2 for even N and 2D+d
4
Our next lemma shows that as the number of dimensions
d increases, CAN’s distribution of shortest paths becomes
Gaussian as well [24].
Lemma 3. For large d, CAN’s distribution of shortest
distances p(n) is Gaussian.
This lemma is illustrated in Figure 2 (right) for four dif-
ferent values of d. As the ﬁgure shows, starting with d =
4, the PMF function p(n) becomes Gaussian with very high
accuracy (the Gaussian model is not shown in the ﬁgure).
As noted in section 3.4, when d = 1/2 log2 N , CAN’s de-