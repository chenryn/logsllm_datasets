255个字节个空间（第50行），即DNS_MAX_NAME_SIZE。后面调用DNS_Unpack_Domain_Name的过程中，显然可以通过构造恶意的数据包溢出这255字节。
![
](https://images.seebug.org/content/images/2021/04/25a3b810-2193-4dcd-84c5-d64bbec649ba.png-w331s)
所以根据以上内容，PoC的编写的思路有很多方法，比如可以让程序永远无法退出循环，类似下图：
![
](https://images.seebug.org/content/images/2021/04/15e25a91-bc8e-4274-9fce-098f4801e800.png-w331s)
c0为压缩指针，1e为偏移量，而偏移的位置正好重新指向c0，造成无限循环。
#### 2、FreeBSD漏洞（CVE-2020-7461）
该漏洞出现在dhclient解析DHCP数据包中的“域搜索选项”数据时，由于边界检查错误而导致堆溢出。dhclinet是FreeBSD系统中用于提供DHCP服务的二进制程序，执行命令：dhclient
em0便可进行DHCP配置，em0为网卡。源码位于sbin\dhclient\options.c，从do_packet()函数开始，代码清单如下图所示：
![
](https://images.seebug.org/content/images/2021/04/b29b37c8-90e2-4abf-84b3-9148e302d576.png-w331s)
该函数用于处理DHCP客户端接收到的数据包，行890，调用parse_options()函数解析数据包中的options，代码清单如下图所示：
![
](https://images.seebug.org/content/images/2021/04/813eb705-2407-4f40-928a-ca8f1b37d397.png-w331s)
行106，调用expand_domain_search()函数进一步解析DHCP域搜索选项数据，该函数进行两个操作，第一步操作是先获取所有域名标签的总长度，第二步操作是根据第一步获取的长度进行内存分配，并拷贝所有域名标签。
先看第一操作，如何获取所有域名标签的长度，关键代码实现如下图所示：
![
](https://images.seebug.org/content/images/2021/04/837127e2-6a42-4326-90bb-a7d74975c283.png-w331s)
首先判断options是否为空，不为空就获取options，行229，然后进入while循环，调用find_search_domain_name_len()函数处理options，该函数通过一个while循环逐个字节解析Searchsting并分类处理，第一种情况的关键代码实现如下图所示：
![
](https://images.seebug.org/content/images/2021/04/53ca0577-3c3a-4d48-9bd8-ebb71319bd4e.png-w331s)
如果读取到data[i]为0，表示域名标签的结尾，并返回该域名标签长度。接着第二种情况的关键代码实现如下图所示：
![
](https://images.seebug.org/content/images/2021/04/2bbb61de-58e0-4e66-81d1-7f9b8bed63ae.png-w331s)
如果读取到data[i]为0xC0，表示为压缩指针，指向另一个域名标签，行287，计算pointer，然后对该指针进行范围检查判断是否越界（第299行），递归调用find_search_domain_name_len()函数解析压缩指针指向的另一个域名标签（第301行），递归调用返回后，进行domain_name_len
+= pointer_len累加。如果既不是0结尾也不是压缩指针，则依次累加并移位游标，实现代码如下图所示：
![
](https://images.seebug.org/content/images/2021/04/d9281aad-e8a9-47f8-a81c-2566f8a22625.png-w331s)
在第299行和第301行之间是存在问题的，如果递归处理压缩指针指向的另一个域名标签不合法时，返回的pointer_len为-1，这里并没有将其视为无效并进行返回，而是依旧返回部分域名标签长度。
再看第二操作，分配缓冲区并进行域名标签拷贝，关键代码如下图所示：
这里expanded_len为计算出来的域名标签的长度（第242行），分配一段内存（第248行），进入while循环，调用expand_search_domain_name()函数进行域名标签拷贝，实现代码如下图所示：
![
](https://images.seebug.org/content/images/2021/04/d7258760-c2e8-4bb0-8710-e2e55d94b145.png-w331s)
该函数和find_search_domain_name_len()函数实现基本是一样的，分类处理0结尾和压缩指针，但是在处理压缩指针的情况时，并没有判断指针范围的合理性。行366，调用memcpy进行域名标签拷贝，拷贝长度为label_len。
根据前文分析，第一步操作在递归处理压缩指针的情况时，是存在问题的，并没有丢弃包含无效压缩指针的域名标签。可以构造一个特殊的域名标签混淆lebal的递归解析，该域名标签表示为：|
1 |x3F|x00| 1 |'A'|xC0|x01|。
依次读取到label_len为0xC0时，进一步递归调用解析，这次读取到label_len为0x3f，将0x3f当成了域名长度，但是第305行，判断发生越界，因此返回-1。
![
](https://images.seebug.org/content/images/2021/04/5b6b1407-d7d9-4406-8b7a-7dab215b0b91.png-w331s)
但是这里仍然计算出domain_name_lan为1，因此第二个域名包含一个0x41。
![
](https://images.seebug.org/content/images/2021/04/a44a4de1-534a-450e-906d-14b95e5afaa9.png-w331s)
最后计算出expanded_len为0x5，如下图所示：
![
](https://images.seebug.org/content/images/2021/04/e076c65d-2361-475d-b038-f8361dc02b75.png-w331s)
然后开始进行第二步拷贝操作，先拷贝第一个domain：0x3f。如下图所示：
![
](https://images.seebug.org/content/images/2021/04/008138f8-7fca-4d7a-9a6f-918f5ceef271.png-w331s)
第二次拷贝第二个domain：0x41。如下图所示：
![
](https://images.seebug.org/content/images/2021/04/7e78d3b0-4334-4466-bc1a-1e10bba53a36.png-w331s)
递归解析压缩指针0XC004时，发生了混淆，如下图所示：
![
](https://images.seebug.org/content/images/2021/04/a1b0b723-a370-46c3-8008-3b1f414fa27c.png-w331s)
错误地将0x3f当成label_len，这明显是大于expanded_len的，直接拷贝导致溢出。不过在实际测试中，并未产生内存破坏，而可以构造其他的域名标签陷入无限递归，让dhclient进程堆栈耗尽导致崩溃，造成拒绝服务。
![
](https://images.seebug.org/content/images/2021/04/8da0220c-ecc5-4a39-b028-b3f7e95809a3.png-w331s)
### 4\. 处置建议
FreeBSD、Nucleus NET和 NetX，建议先实施以下安全建议，再及时更新设备供应商发布的安全更新。
安全建议：
  * 使用一些缓解信息来开发检测DNS漏洞的签名；
  * 发现并清点运行易受攻击堆栈的设备；
  * 实施分段控制和适当的network hygiene；
  * 监视受影响的设备供应商发布的补丁；
  * 配置设备依赖内部DNS服务器；
  * 监控所有网络流量中的恶意数据包。
### 5\. 参考链接
[1]   
[2]   
[3]   
[4]   
[5] 
* * *