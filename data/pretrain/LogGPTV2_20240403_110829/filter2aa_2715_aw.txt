show router 
rsvp session 
display mpls 
rsvp-te 
session x 
show rsvp 
counters 
show rsvp 
statistics 
show router 
rsvp statistics 
display mpls 
rsvp-te 
statistics 
global 
MULTICAST 
show mfib/mrib 
route 
show multicast 
route 
show mfib/mrib 
route 
display 
multicast 
routing-table 
– 
show multicast 
statistics 
– 
display 
multicast 
flow-
statistic 
show pim 
interface 
show pim 
interfaces 
show router pim 
interfaces 
display pim 
interface 
show pim 
neighbor 
show pim 
interfaces 
show router 
pim  neighbor 
display pim 
neighbor 
show pim group-
map 
show pim group 
show router pim 
group 
– 
217 
show ip pim rp 
mapping 
show pim rps 
show router pim 
rp 
display pim 
rp-info 
show pim 
traffic 
show pim 
statistics 
show router pim 
statistics 
– 
show mroute 
show mfib 
– 
display 
multicast 
routing-table 
show igmp 
interface 
show igmp 
interface 
show router 
igmp interface 
display igmp 
interface 
show igmp 
groups 
show igmp group 
show router 
igmp group 
– 
show igmp 
traffic 
show igmp 
statistics 
show router 
igmp  statistic
s 
– 
show mld 
interface 
show mld 
interface 
show router mld 
interface 
display igmp 
interface 
show mld groups show mld group 
show router mld 
group 
display igmp 
group 
show mld 
traffic 
show mld 
statistics 
show router mld 
statistics 
– 
VRRP 
show vrrp 
interface 
interface 
show vrrp 
interface 
interface 
show router 
vrrp instance 
interface 
display vrrp 
interface 
interface 
show vrrp 
status 
show vrrp brief – 
display vrrp 
brief 
show vrrp 
summary 
show vrrp 
summary 
– 
– 
show vrrp 
statistics 
– 
show vrrp 
statistics 
display vrrp 
statistics 
REFERENCE: 
https://ipcisco.com/cli-commands-cheat-sheets/ 
http://labnario.com/huawei-cheat-sheets/ 
N
N 
NFTABLES 
RED/BLUE TEAM 
FIREWALL 
LINUX 
nftables (netfilter tables) is the successor to iptables. It 
replaces the existing iptables, ip6tables, arptables and ebtables 
framework. 
TABLES 
ip 
Used for IPv4 related chains 
ip6 
Used for IPv6 related chains 
arp 
Used for ARP related chains 
bridge 
Used for bridging related chains 
inet 
Mixed ipv4/ipv6 chains 
218 
CHAINS 
filter 
for filtering packets 
route 
for rerouting packets 
nat 
for performing Network Address Translation 
HOOKS 
prerouting 
This is before the routing decision, all packets 
entering the machine hits this chain 
input 
All packets for the local system hits this hook 
forward 
Packets not for the local system, those that need 
to be forwarded hits this hook 
output 
Packets that originate from the local system pass 
this hook 
postrouting 
This hook is after the routing decision, all 
packets leaving the machine hits this chain 
RULES 
ip 
IP protocol 
ip6 
IPv6 protocol 
tcp 
TCP protocol 
udp 
UDP protocol 
udplite 
UDP-lite protocol 
sctp 
SCTP protocol 
dccp 
DCCP protocol 
ah 
Authentication headers 
esp 
Encrypted security payload headers 
ipcomp 
IPcomp headers 
icmp 
icmp protocol 
icmpv6 
icmpv6 protocol 
ct 
Connection tracking 
meta 
Meta properties such as interfaces 
MATCHES 
MATCH 
DESCRIPTION 
ip 
version 
Ip Header version 
hdrlength 
IP header length 
tos 
Type of Service 
length 
Total packet length 
id 
IP ID 
frag-off 
Fragmentation offset 
ttl 
Time to live 
protocol 
Upper layer protocol 
checksum 
IP header checksum 
saddr 
Source address 
daddr 
Destination address 
ip6 
version 
IP header version 
priority 
flowlabel 
Flow label 
length 
Payload length 
nexthdr 
Next header type (Upper layer protocol number) 
hoplimit 
Hop limit 
219 
saddr 
Source Address 
daddr 
Destination Address 
tcp 
sport 
Source port 
dport 
Destination port 
sequence 
Sequence number 
ackseq 
Acknowledgement number 
doff 
Data offset 
flags 
TCP flags 
window 
Window 
checksum 
Checksum 
urgptr 
Urgent pointer 
udp 
sport 
Source port 
dport 
destination port 
length 
Total packet length 
checksum 
Checksum 
udplite 
sport 
Source port 
dport 
destination port 
cscov 
Checksum coverage 
checksum 
Checksum 
sctp 
sport 
Source port 
dport 
destination port 
vtag 
Verification tag 
checksum 
Checksum 
dccp 
sport 
Source port 
dport 
Destination port 
ah 
nexthdr 
Next header protocol (Upper layer protocol) 
hdrlength 
AH header length 
spi 
Security Parameter Index 
sequence 
Sequence Number 
esp 
spi 
Security Parameter Index 
sequence 
Sequence Number 
ipcomp 
nexthdr 
Next header protocol (Upper layer protocol) 
flags 
Flags 
cfi 
Compression Parameter Index 
icmp 
type 
icmp packet type 
icmpv6 
type 
icmpv6 packet type 
ct 
state 
State of the connection 
direction 
Direction of the packet relative to the connection 
status 
Status of the connection 
220 
mark 
Connection mark 
expiration 
Connection expiration time 
helper 
Helper associated with the connection 
l3proto 
Layer 3 protocol of the connection 
saddr 
Source address of the connection for the given 
direction 
daddr 
Destination address of the connection for the given 
direction 
protocol 
Layer 4 protocol of the connection for the given 
direction 
proto-src 
Layer 4 protocol source for the given direction 
proto-dst 
Layer 4 protocol destination for the given 
direction 
meta 
length 
Length of the packet in bytes: meta length > 1000 
protocol 
ethertype protocol: meta protocol vlan 
priority 
TC packet priority 
mark 
Packet mark 
iif 
Input interface index 
iifname 
Input interface name 
iiftype 
Input interface type 
oif 
Output interface index 
oifname 
Output interface name 
oiftype 
Output interface hardware type 
skuid 
UID associated with originating socket 
skgid 
GID associated with originating socket 
rtclassid 
Routing realm 
STATEMENTS 
accept 
Accept the packet and stop the ruleset evaluation 
drop 
Drop the packet and stop the ruleset evaluation 
reject 
Reject the packet with an icmp message 
queue 
Queue the packet to userspace and stop the ruleset 
evaluation 
continue 
return 
Return from the current chain and continue at the 
next rule of the last chain. In a base chain it is 
equivalent to accept 
jump 
Continue at the first rule of . It will 
continue at the next rule after a return statement 
is issued 
goto 
after the new chain the evaluation will continue at 
the last chain instead of the one containing the 
goto statement 
Initial setup iptables like chain setup, use ipv4-filter file 
provided in the source: 
nft -f files/nftables/ipv4-filter 
221 
List the resulting chain: 
nft list table filter 
**Note that filter as well as output or input are used as chain and 
table name. Any other string could have been used. 
BASIC RULES HANDLING 
Drop output to a destination: 
nft add rule ip filter output  ip daddr 1.2.3.4 drop 
Rule counters are optional with nftables. Counter keyword need to 
be used to activate it: 
nft add rule ip filter output  ip daddr 1.2.3.4 counter drop 
Add a rule to a network: 
nft add rule ip filter output ip daddr 192.168.1.0/24 counter 
Drop packet to port 80: 
nft add rule ip filter input tcp dport 80 drop 
Accept ICMP echo request: 
nft add rule  filter input icmp type echo-request accept 
Combine filtering specify multiple time the ip syntax: 
nft add rule ip filter output ip protocol icmp  ip daddr 1.2.3.4 
counter drop 
Delete all rules in a chain: 
nft delete rule filter output 
Delete a specific rule use the -a flag on nft get handle number: 
# nft list table filter -a 
table filter { 
        chain output { 
                 ip protocol icmp ip daddr 1.2.3.4 counter packets 
5 bytes 420 drop # handle 10 
... 
Then delete rule 10 with: 
nft delete rule filter output handle 10 
Flush the filter table: 
nft flush table filter 
Insert a rule: 
nft insert rule filter input tcp dport 80 counter accept 
222 
Insert or add a rule at a specific position. Get handle of the rule 
where to insert or add a new one using the -a flag: 
# nft list table filter -n  -a 
table filter { 
        chain output { 
                 type filter hook output priority 0; 
                 ip protocol tcp counter packets 82 bytes 9680 # 
handle 8 
                 ip saddr 127.0.0.1 ip daddr 127.0.0.6 drop # 
handle 7 
        } 
} 
nft  add rule filter output position 8 ip daddr 127.0.0.8 drop  
Added a rule after the rule with handle 8 
# nft list table filter -n -a 
table filter { 
        chain output { 
                 type filter hook output priority 0; 
                 ip protocol tcp counter packets 190 bytes 21908 # 
handle 8 
                 ip daddr 127.0.0.8 drop # handle 10 
                 ip saddr 127.0.0.1 ip daddr 127.0.0.6 drop # 
handle 7 
        } 
} 
Add before the rule with a given handle: 
nft insert rule filter output position 8 ip daddr 127.0.0.12 drop 
Match filter on a protocol: 
nft insert rule filter output ip  protocol tcp counter 
IPv6 
Create IPv6 chains with filter in source: 
nft -f files/nftables/ipv6-filter 
Add rule: 
nft add rule ip6 filter output ip6 daddr home.regit.org counter 
List of the rules: 
nft list table ip6 filter 
Accept dynamic IPv6 configuration & neighbor discovery: 
nft add rule ip6 filter input icmpv6 type nd-neighbor-solicit 
accept 
nft add rule ip6 filter input icmpv6 type nd-router-advert accept 
223 
Connection tracking accept all incoming packets of an established 
connection: 
nft insert rule filter input ct state established accept 
Filter on interface accept all packets going out loopback 
interface: 
nft insert rule filter output oif lo accept 
And for packet coming into eth2: 
nft insert rule filter input iif eth2 accept 
REFERENCE: 
https://www.funtoo.org/Package:Nftables 
https://home.regit.org/netfilter-en/nftables-quick-howto/comment-page-1/ 
https://git.netfilter.org/nftables/ 
N
N 
NMAP 
RED/BLUE TEAM 
RECON/ASSET DISCOV 
WINDOWS/LINUX/MacOS 
Nmap (Network Mapper) is a free and open-source network scanner and 
is used to discover hosts and services on a computer network by 
sending packets and analyzing the responses. 
COMMAND 
DESCRIPTION 
nmap 10.0.0.1 
Scan a single IP 
nmap www.testhostname.com 
Scan a host 
nmap 10.0.0.1-20 
Scan a range of IPs 
nmap 10.0.0.0/24 
Scan a subnet 
nmap -iL list-of-ips.txt 
Scan targets from a 
text file 
nmap -p 22 10.0.0.1 
Scan a single Port 
nmap -p 1-100 10.0.0.1 
Scan a range of ports 
nmap -F 10.0.0.1 
Scan 100 most common 
ports (Fast) 
nmap -p- 10.0.0.1 
Scan all 65535 ports 
nmap -sT 10.0.0.1 
Scan using TCP connect 
nmap -sS 10.0.0.1 
Scan using TCP SYN 
scan (default) 
nmap -sU -p 123,161,162 10.0.0.1 
Scan UDP ports 
nmap -Pn -F 10.0.0.1 
Scan selected ports - 
ignore discovery 
nmap -A 10.0.0.1 
Detect OS and Services 
nmap -sV 10.0.0.1 
Standard service 
detection 
nmap -sV --version-intensity 5 10.0.0.1 
More aggressive 
Service Detection 
224 
nmap -sV --version-intensity 0 10.0.0.1 
Lighter banner 
grabbing detection 
nmap -oN outputfile.txt 10.0.0.1 
Save default output to 
file 
nmap -oX outputfile.xml 10.0.0.1 
Save results as XML 
nmap -oG outputfile.txt 10.0.0.1 
Save results in a 
format for grep 
nmap -oA outputfile 10.0.0.1 
Save in all formats 
nmap -sV -sC 10.0.0.1 
Scan using default 
safe scripts 
nmap --script-help=ssl-heartbleed 
Get help for a script 
nmap -sV -p 443 –script=ssl-
heartbleed.nse 10.0.0.1 
Scan using a specific 
NSE script 
nmap -sV --script=smb* 10.0.0.1 
Scan with a set of 
scripts 
nmap --script=http-title 10.0.0.0/24 
Gather page titles 
from HTTP services 
nmap --script=http-headers 10.0.0.0/24 
Get HTTP headers of 
web services 
nmap --script=http-enum 10.0.0.0/24 
Find web apps from 
known paths 
nmap --script=asn-query,whois,ip-
geolocation-maxmind 10.0.0.0/24 
Find Information about 
IP address 
REFERENCE: 
https://nmap.org/ 
https://github.com/rackerlabs/scantron 
https://github.com/cloudflare/flan 
https://appsecco.com/books/subdomain-enumeration/ 
https://gtfobins.github.io/gtfobins/nmap/#shell 
O 
225 
O
O 
OSINT_Techniques 
OSINT 
ENUMERATION 
N/A 
GAP ANALYSIS METHODOLOGY 
Gap analysis takes stock of the initial information that you have 
and then applies four simple questions to identify what to do next. 
This can be applied to bring structure and order to your OSINT 
research. The four questions are: 
1) What do I know? 