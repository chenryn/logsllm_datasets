### RSVP and MPLS Commands

- **Show Router RSVP Sessions:**
  - `show router rsvp session`
  - `show rsvp counters`
  - `show rsvp statistics`
  - `show router rsvp statistics`

- **Display MPLS RSVP-TE Session:**
  - `display mpls rsvp-te session x`

- **Global MPLS RSVP-TE Statistics:**
  - `display mpls rsvp-te statistics global`

### Multicast Commands

- **Show MFIB/MRIB Route:**
  - `show mfib/mrib route`
  - `show multicast route`
  - `display multicast routing-table`

- **Multicast Statistics:**
  - `show multicast statistics`
  - `display multicast flow-statistic`

- **PIM Interface and Neighbor Information:**
  - `show pim interface`
  - `show pim interfaces`
  - `show router pim interfaces`
  - `display pim interface`
  - `show pim neighbor`
  - `show router pim neighbor`
  - `display pim neighbor`

- **PIM Group and RP Mapping:**
  - `show pim group-map`
  - `show pim group`
  - `show router pim group`
  - `show ip pim rp mapping`
  - `show pim rps`
  - `show router pim rp`
  - `display pim rp-info`

- **PIM Traffic and Statistics:**
  - `show pim traffic`
  - `show pim statistics`
  - `show router pim statistics`

- **IGMP Interface and Group Information:**
  - `show igmp interface`
  - `show router igmp interface`
  - `display igmp interface`
  - `show igmp groups`
  - `show igmp group`
  - `show router igmp group`
  - `show igmp traffic`
  - `show igmp statistics`
  - `show router igmp statistics`

- **MLD Interface and Group Information:**
  - `show mld interface`
  - `show router mld interface`
  - `display igmp interface`
  - `show mld groups`
  - `show mld group`
  - `show router mld group`
  - `display igmp group`
  - `show mld traffic`
  - `show mld statistics`
  - `show router mld statistics`

- **VRRP Status and Statistics:**
  - `show vrrp interface <interface>`
  - `show router vrrp instance <interface>`
  - `display vrrp interface <interface>`
  - `show vrrp status`
  - `show vrrp brief`
  - `display vrrp brief`
  - `show vrrp summary`
  - `show vrrp statistics`
  - `display vrrp statistics`

### Nftables (Netfilter Tables)

**Overview:**
Nftables is the successor to iptables, replacing the existing iptables, ip6tables, arptables, and ebtables frameworks.

**Tables:**
- `ip`: Used for IPv4 related chains
- `ip6`: Used for IPv6 related chains
- `arp`: Used for ARP related chains
- `bridge`: Used for bridging related chains
- `inet`: Mixed IPv4/IPv6 chains

**Chains:**
- `filter`: For filtering packets
- `route`: For rerouting packets
- `nat`: For performing Network Address Translation

**Hooks:**
- `prerouting`: Before the routing decision, all incoming packets hit this chain
- `input`: All packets for the local system hit this hook
- `forward`: Packets not for the local system, those that need to be forwarded, hit this hook
- `output`: Packets originating from the local system pass this hook
- `postrouting`: After the routing decision, all outgoing packets hit this chain

**Rules:**
- `ip`: IP protocol
- `ip6`: IPv6 protocol
- `tcp`: TCP protocol
- `udp`: UDP protocol
- `udplite`: UDP-lite protocol
- `sctp`: SCTP protocol
- `dccp`: DCCP protocol
- `ah`: Authentication headers
- `esp`: Encrypted security payload headers
- `ipcomp`: IPcomp headers
- `icmp`: ICMP protocol
- `icmpv6`: ICMPv6 protocol
- `ct`: Connection tracking
- `meta`: Meta properties such as interfaces

**Matches:**
- **IP Matches:**
  - `version`: IP header version
  - `hdrlength`: IP header length
  - `tos`: Type of Service
  - `length`: Total packet length
  - `id`: IP ID
  - `frag-off`: Fragmentation offset
  - `ttl`: Time to live
  - `protocol`: Upper layer protocol
  - `checksum`: IP header checksum
  - `saddr`: Source address
  - `daddr`: Destination address

- **IPv6 Matches:**
  - `version`: IP header version
  - `priority`: Flow label
  - `flowlabel`: Flow label
  - `length`: Payload length
  - `nexthdr`: Next header type (Upper layer protocol number)
  - `hoplimit`: Hop limit
  - `saddr`: Source Address
  - `daddr`: Destination Address

- **TCP Matches:**
  - `sport`: Source port
  - `dport`: Destination port
  - `sequence`: Sequence number
  - `ackseq`: Acknowledgement number
  - `doff`: Data offset
  - `flags`: TCP flags
  - `window`: Window
  - `checksum`: Checksum
  - `urgptr`: Urgent pointer

- **UDP Matches:**
  - `sport`: Source port
  - `dport`: Destination port
  - `length`: Total packet length
  - `checksum`: Checksum

- **Connection Tracking (CT) Matches:**
  - `state`: State of the connection
  - `direction`: Direction of the packet relative to the connection
  - `status`: Status of the connection
  - `mark`: Connection mark
  - `expiration`: Connection expiration time
  - `helper`: Helper associated with the connection
  - `l3proto`: Layer 3 protocol of the connection
  - `saddr`: Source address of the connection for the given direction
  - `daddr`: Destination address of the connection for the given direction
  - `protocol`: Layer 4 protocol of the connection for the given direction
  - `proto-src`: Layer 4 protocol source for the given direction
  - `proto-dst`: Layer 4 protocol destination for the given direction

- **Meta Matches:**
  - `length`: Length of the packet in bytes
  - `protocol`: Ethertype protocol
  - `priority`: TC packet priority
  - `mark`: Packet mark
  - `iif`: Input interface index
  - `iifname`: Input interface name
  - `iiftype`: Input interface type
  - `oif`: Output interface index
  - `oifname`: Output interface name
  - `oiftype`: Output interface hardware type
  - `skuid`: UID associated with originating socket
  - `skgid`: GID associated with originating socket
  - `rtclassid`: Routing realm

**Statements:**
- `accept`: Accept the packet and stop the ruleset evaluation
- `drop`: Drop the packet and stop the ruleset evaluation
- `reject`: Reject the packet with an ICMP message
- `queue`: Queue the packet to userspace and stop the ruleset evaluation
- `continue`: Continue at the next rule
- `return`: Return from the current chain and continue at the next rule of the last chain
- `jump`: Continue at the first rule of a specified chain
- `goto`: Continue at the first rule of a new chain

**Initial Setup:**
- To set up iptables-like chains, use the `ipv4-filter` file provided in the source:
  ```sh
  nft -f files/nftables/ipv4-filter
  ```
- List the resulting chain:
  ```sh
  nft list table filter
  ```

**Basic Rules Handling:**
- Drop output to a destination:
  ```sh
  nft add rule ip filter output ip daddr 1.2.3.4 drop
  ```
- Add a counter to a rule:
  ```sh
  nft add rule ip filter output ip daddr 1.2.3.4 counter drop
  ```
- Add a rule to a network:
  ```sh
  nft add rule ip filter output ip daddr 192.168.1.0/24 counter
  ```
- Drop packets to port 80:
  ```sh
  nft add rule ip filter input tcp dport 80 drop
  ```
- Accept ICMP echo requests:
  ```sh
  nft add rule filter input icmp type echo-request accept
  ```
- Combine multiple filters:
  ```sh
  nft add rule ip filter output ip protocol icmp ip daddr 1.2.3.4 counter drop
  ```
- Delete all rules in a chain:
  ```sh
  nft delete rule filter output
  ```
- Delete a specific rule using the handle number:
  ```sh
  nft list table filter -a
  nft delete rule filter output handle 10
  ```
- Flush the filter table:
  ```sh
  nft flush table filter
  ```
- Insert a rule:
  ```sh
  nft insert rule filter input tcp dport 80 counter accept
  ```
- Insert or add a rule at a specific position:
  ```sh
  nft list table filter -n -a
  nft add rule filter output position 8 ip daddr 127.0.0.8 drop
  nft insert rule filter output position 8 ip daddr 127.0.0.12 drop
  ```
- Match on a protocol:
  ```sh
  nft insert rule filter output ip protocol tcp counter
  ```

**IPv6:**
- Create IPv6 chains with the `ipv6-filter` file:
  ```sh
  nft -f files/nftables/ipv6-filter
  ```
- Add a rule:
  ```sh
  nft add rule ip6 filter output ip6 daddr home.regit.org counter
  ```
- List the rules:
  ```sh
  nft list table ip6 filter
  ```
- Accept dynamic IPv6 configuration and neighbor discovery:
  ```sh
  nft add rule ip6 filter input icmpv6 type nd-neighbor-solicit accept
  nft add rule ip6 filter input icmpv6 type nd-router-advert accept
  ```
- Connection tracking to accept all incoming packets of an established connection:
  ```sh
  nft insert rule filter input ct state established accept
  ```
- Filter on interface to accept all packets going out the loopback interface:
  ```sh
  nft insert rule filter output oif lo accept
  ```
- For packets coming into `eth2`:
  ```sh
  nft insert rule filter input iif eth2 accept
  ```

### Nmap (Network Mapper)

**Overview:**
Nmap is a free and open-source network scanner used to discover hosts and services on a computer network by sending packets and analyzing the responses.

**Commands:**
- Scan a single IP:
  ```sh
  nmap 10.0.0.1
  ```
- Scan a host:
  ```sh
  nmap www.testhostname.com
  ```
- Scan a range of IPs:
  ```sh
  nmap 10.0.0.1-20
  ```
- Scan a subnet:
  ```sh
  nmap 10.0.0.0/24
  ```
- Scan targets from a text file:
  ```sh
  nmap -iL list-of-ips.txt
  ```
- Scan a single port:
  ```sh
  nmap -p 22 10.0.0.1
  ```
- Scan a range of ports:
  ```sh
  nmap -p 1-100 10.0.0.1
  ```
- Scan the 100 most common ports (Fast):
  ```sh
  nmap -F 10.0.0.1
  ```
- Scan all 65535 ports:
  ```sh
  nmap -p- 10.0.0.1
  ```
- Scan using TCP connect:
  ```sh
  nmap -sT 10.0.0.1
  ```
- Scan using TCP SYN scan (default):
  ```sh
  nmap -sS 10.0.0.1
  ```
- Scan UDP ports:
  ```sh
  nmap -sU -p 123,161,162 10.0.0.1
  ```
- Scan selected ports and ignore discovery:
  ```sh
  nmap -Pn -F 10.0.0.1
  ```
- Detect OS and services:
  ```sh
  nmap -A 10.0.0.1
  ```
- Standard service detection:
  ```sh
  nmap -sV 10.0.0.1
  ```
- More aggressive service detection:
  ```sh
  nmap -sV --version-intensity 5 10.0.0.1
  ```
- Lighter banner grabbing detection:
  ```sh
  nmap -sV --version-intensity 0 10.0.0.1
  ```
- Save default output to a file:
  ```sh
  nmap -oN outputfile.txt 10.0.0.1
  ```
- Save results as XML:
  ```sh
  nmap -oX outputfile.xml 10.0.0.1
  ```
- Save results in a format for grep:
  ```sh
  nmap -oG outputfile.txt 10.0.0.1
  ```
- Save in all formats:
  ```sh
  nmap -oA outputfile 10.0.0.1
  ```
- Scan using default safe scripts:
  ```sh
  nmap -sV -sC 10.0.0.1
  ```
- Get help for a script:
  ```sh
  nmap --script-help=ssl-heartbleed
  ```
- Scan using a specific NSE script:
  ```sh
  nmap -sV -p 443 --script=ssl-heartbleed.nse 10.0.0.1
  ```
- Scan with a set of scripts:
  ```sh
  nmap -sV --script=smb* 10.0.0.1
  ```
- Gather page titles from HTTP services:
  ```sh
  nmap --script=http-title 10.0.0.0/24
  ```
- Get HTTP headers of web services:
  ```sh
  nmap --script=http-headers 10.0.0.0/24
  ```
- Find web apps from known paths:
  ```sh
  nmap --script=http-enum 10.0.0.0/24
  ```
- Find information about an IP address:
  ```sh
  nmap --script=asn-query,whois,ip-geolocation-maxmind 10.0.0.0/24
  ```

### OSINT Techniques

**Gap Analysis Methodology:**
Gap analysis helps to identify what information you have and what you need to do next. This can bring structure and order to your OSINT research. The four key questions are:

1. **What do I know?**
   - Identify the initial information you have.
   
2. **What do I need to know?**
   - Determine the additional information required to complete your research.
   
3. **How do I get the information I need?**
   - Develop a plan to gather the necessary information.
   
4. **What will I do with the information?**
   - Plan how to use the gathered information effectively.

By answering these questions, you can systematically approach your OSINT tasks and ensure a comprehensive and structured research process.