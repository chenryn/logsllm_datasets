Finally,thereisacommit-relatedentry.Datainsertionisnotlogged.
Replica
Duringcrashrecovery, entriesarereplayedtorestorethedataondiskupto
aconsistentstate. Backuprecoveryworksinasimilarway,butitcanalsorestore
the database state up to the specified recovery target point using a  archive.
Thenumberofarchivedentriescanbequitehigh(forexample,theycanspan
severaldays),sotherecoveryperiodwillincludemultiplecheckpoints.Therefore,
theminimallevelisnotenough: itisimpossibletorepeatanoperationifitis
unlogged.Forbackuprecovery,filesmustincludealltheoperations.
Thesameistrueforreplication: unloggedcommandswillnotbesenttoareplica
andwillnotbereplayedonit.
Thingsgetevenmorecomplicatedifareplicaisusedforexecutingqueries. First
ofall,itneedstohavetheinformationonexclusivelocksacquiredontheprimary
serversincetheymayconflictwithqueriesonthereplica. Second,itmustbeable
p. tocapturesnapshots,whichrequirestheinformationonactivetransactions.When
wedealwithareplica,bothlocaltransactionsandthoserunningontheprimary
serverhavetobetakenintoaccount.
Theonlywaytosendthisdatatoareplicaistoperiodicallywriteitintofiles.1
Itisdonebythebgwriter2process,onceinseconds(theintervalishard-coded).
Theabilitytoperformdatarecoveryfromabackupandusephysicalreplicationis
guaranteedatthereplicalevel.
1 backend/storage/ipc/standby,LogStandbySnapshotfunction
2 backend/postmaster/bgwriter.c
216
11.3. WALLevels
Thereplicalevelisusedbydefault,sowecansimplyresettheparametersconfig- v.
uredaboveandrestarttheserver:
=> ALTER SYSTEM RESET wal_level;
=> ALTER SYSTEM RESET max_wal_senders;
postgres$ pg_ctl restart -l /home/postgres/logfile
Let’srepeatthesameworkflowasbefore(butnowwewillinsertonlyonerowto
getaneateroutput):
=> SELECT pg_current_wal_insert_lsn();
pg_current_wal_insert_lsn
−−−−−−−−−−−−−−−−−−−−−−−−−−−
0/45F98AA0
(1 row)
=> BEGIN;
=> TRUNCATE TABLE wal;
=> INSERT INTO wal VALUES (42);
=> COMMIT;
=> SELECT pg_current_wal_insert_lsn();
pg_current_wal_insert_lsn
−−−−−−−−−−−−−−−−−−−−−−−−−−−
0/45F98D60
(1 row)
Checkoutthegeneratedentries.
Apartfromwhatwehaveseenattheminimallevel,wehavealsogotthefollowing
entries:
• replication-related entries of the Standby resource manager: _
(activetransactions)and
• theentrythatlogsthe+operation,whichinitializesanewpageand
insertsanewrowintothispage
217
Chapter11. WALModes
postgres$ /usr/local/pgsql/bin/pg_waldump \
-p /usr/local/pgsql/data/pg_wal -s 0/45F98AA0 -e 0/45F98D60
rmgr: Standby len (rec/tot): 42/ 42, tx: 133855, lsn:
0/45F98AA0, prev 0/45F98A28, desc: LOCK xid 133855 db 16391 rel 16562
rmgr: Storage len (rec/tot): 42/ 42, tx: 133855, lsn:
0/45F98AD0, prev 0/45F98AA0, desc: CREATE base/16391/24786
rmgr: Heap len (rec/tot): 123/ 123, tx: 133855, lsn:
0/45F98B00, prev 0/45F98AD0, desc: UPDATE off 49 xmax 133855 flags
0x60 ; new off 50 xmax 0, blkref #0: rel 1663/16391/1259 blk 0
rmgr: Btree len (rec/tot): 64/ 64, tx: 133855, lsn:
0/45F98B80, prev 0/45F98B00, desc: INSERT_LEAF off 178, blkref #0:
rel 1663/16391/2662 blk 2
rmgr: Btree len (rec/tot): 64/ 64, tx: 133855, lsn:
0/45F98BC0, prev 0/45F98B80, desc: INSERT_LEAF off 149, blkref #0:
rel 1663/16391/2663 blk 2
rmgr: Btree len (rec/tot): 64/ 64, tx: 133855, lsn:
0/45F98C00, prev 0/45F98BC0, desc: INSERT_LEAF off 256, blkref #0:
rel 1663/16391/3455 blk 4
rmgr: Heap len (rec/tot): 59/ 59, tx: 133855, lsn:
0/45F98C40, prev 0/45F98C00, desc: INSERT+INIT off 1 flags 0x00,
blkref #0: rel 1663/16391/24786 blk 0
rmgr: Standby len (rec/tot): 42/ 42, tx: 0, lsn:
0/45F98C80, prev 0/45F98C40, desc: LOCK xid 133855 db 16391 rel 16562
rmgr: Standby len (rec/tot): 54/ 54, tx: 0, lsn:
0/45F98CB0, prev 0/45F98C80, desc: RUNNING_XACTS nextXid 133856
latestCompletedXid 133854 oldestRunningXid 133855; 1 xacts: 133855
rmgr: Transaction len (rec/tot): 114/ 114, tx: 133855, lsn:
0/45F98CE8, prev 0/45F98CB0, desc: COMMIT 2022−08−16 19:35:14.959492
MSK; rels: base/16391/24785; inval msgs: catcache 51 catcache 50
relcache 16562
Logical
Lastbutnotleast,thelogicallevelenableslogicaldecodingandlogicalreplication.
Ithastobeactivatedonthepublishingserver.
If we take a look at  entries,we will see that this level is almost the same as
replica: itaddstheentriesrelatedtoreplicationsourcesandsomearbitrarylogical
entriesthatmaybegeneratedbyapplications.Forthemostpart,logicaldecoding
dependsontheinformationaboutactivetransactions(_)becauseit
requirescapturingasnapshottotracksystemcatalogchanges.
218
Index
A 136,147
Abortingtransactions 76,80,83 autovacuum_vacuum_cost_limit 131,
Alignment 67 136
Analysis 120 autovacuum_vacuum_in-
Anomaly sert_scale_factor
dirtyread 38,40,44 124–125
lostupdate 40,50,52 autovacuum_vacuum_insert_thresh-
non-repeatableread 41,46,53 old
phantomread 41,53 124–125
readskew 48,50,54 autovacuum_vacuum_scale_factor
read-onlytransaction 57,60 123–124
writeskew 56,59 autovacuum_vacuum_threshold
“Asterisk,”thereasonsnottouseit 123–124
29 autovacuum_work_mem 122
Atomicity 39,83 autovacuum_freeze_max_age 146
autoprewarmleader 179–181
autoprewarmworker 181 B
autovacuum 121 Backend 31
autovacuumlauncher 121–123 Backgroundworker 119,122
autovacuumworker 122 Backgroundwriting 197
autovacuum_analyze_scale_factor setup 200
125 Batchprocessing 158
autovacuum_analyze_threshold 125 bgwriter 197,200–202,216
autovacuum_enabled 113,123 bgwriter_delay 200
autovacuum_freeze_max_age 141, bgwriter_lru_maxpages 200,202
146–147 bgwriter_lru_multiplier 200
autovacuum_freeze_min_age 147 Bitmap
autovacuum_freeze_table_age 147 NULLvalues 67
autovacuum_max_workers 122,131, Bloating 97,111,157
136 Block seepage
autovacuum_naptime 122–123 Buffercache 30,163,184,190
autovacuum_vacuum_cost_delay 131, configuration 176
219
Index
eviction 171 fillfactor 100–101,107–108,139,
local 181 142,150
Bufferpin 165,167 Fork 20
Bufferring 173 freespacemap 22,100,112
initialization 22
C main 21,66
Checkpoint 190,208 visibilitymap 23,100,141–142,
monitoring 200 155
setup 197 Freezing 138,154,169
checkpoint_completion_target manual 147
197–198 fsync 208
checkpointer 190–191,196,198, Fullpageimage 194
200–202,208 full_page_writes 211,213
checkpoint_timeout 198,201
H
checkpoint_warning 200
Hashtable 166
CLOG 73,147,184,187,190
Header
Cluster 15
page 64,114
Cminandcmax 93
rowversion 67
Combo-identifier 93
Hintbits seeinformationbits
commit_delay 204
Horizon 94–95,100,115,157
commit_siblings 204
HOTupdates 104
Consistency 37,39
CTID 67,104 I
Cursor 92,168 idle_in_transaction_session_timeout
158
D
ignore_checksum_failure 210
Database 15 Index
data_checksums 209 pruning 110
default_transaction_isolation 62 versioning 78
Dirtyread 40,44 Informationbits 67,71,74,87,211
Durability 39 Instance 15
Integrityconstraints 37
E
Isolation 39
Eviction 171,186,197
snapshot 43,59,86
F L
fdatasync 208 Locks 42
220
Index
memory 165 fullimage 194
nowaits 158 header 149,155
relation 120,151,156,216 split 110
row 159 pageinspect 64,68,72,78,140,186
log_autovacuum_min_duration 135 pgbench 206,211
log_checkpoints 200 pg_buffercache 165,177
logical 214,218 pg_checksums 209
Lostupdate 40,50,52 pg_controldata 193
PGDATA 15
M
pg_dump 98
maintenance_work_mem 118,132,
pg_prewarm 179
134
pg_prewarm.autoprewarm 179
Map
pg_prewarm.autoprewarm_interval
freespace 22,100,112
179
freeze 23,141,144,155
pg_rewind 185
visibility 23,100,141–142,155
pgstattuple 151–152
max_parallel_processes 179
pg_test_fsync 208
max_wal_senders 214
pg_visibility 114,141
max_wal_size 198,201
pg_waldump 189,196,215
max_worker_processes 122
Phantomread 41,53
minimal 208,214,216–217
Pointerstotuples 66
min_parallel_index_scan_size 119
postgres 29
min_wal_size 199
postmaster 29–31,122,193,195
Multiversionconcurrencycontrol
ProcArray 74,88
44,66,111
Process 29
Protocol 32
N
Pruning 100,107,110
Non-repeatableread 41,46,53
psql 9,12,16,84–85
NULL 67
R
O
ReadCommitted 41,43–46,48,50,
OID 16
53–54,62–63,86,94,96,
old_snapshot_threshold 158
98,115
P Readskew 48,50,54
Page 24 ReadUncommitted 40–41,43–44
dirty 164 Read-onlytransactionanomaly 57,
fragmentation 67,102 60
221
Index
Recovery 193 track_io_timing 171
Relation 19 Transaction 38,70,86
RepeatableRead 41,43–44,53–54, abort 76,80,83
56–57,59,61–63,86,95, age 137
98,148 commit 73,187
replica 214,216–218 status 88,187
Rowversion seetuple subtransaction 80,190
virtual 79
S
Transactioncommit
Savepoint 80
asynchronous 204
Schema 17
synchronous 204
search_path 17
TransactionIDwraparound 137,145
Segment 20,188
Truncation 120
Serializable 42–43,59,61–63,86,
Tuple 66
95,98
insertonly 119,124
Server 15
TupleID 66
shared_buffers 176
Tuplepointer 102
shared_preload_libraries 179
Snapshot 86,89,216 V
export 98 Vacuum 95,168
systemcatalog 97 aggressivemode 143
autovacuum 121
Specialspace 65
startup 193–195 full 150
monitoring 132,153
Statistics 120
phases 118
Subtransaction 80,190
routine 112
Synchronization 204,208
vacuum_cost_delay 130,147
synchronous_commit 203–205
vacuum_cost_limit 130–131
Systemcatalog 16,216
vacuum_cost_page_dirty 130
T vacuum_cost_page_hit 130
Tablespace 18 vacuum_cost_page_miss 130
temp_buffers 182 vacuum_failsafe_age 141,147
temp_file_limit 182 vacuum_freeze_min_age 141–142,
Timeline 188 144,148
TOAST 17,24,79,174 vacuum_freeze_table_age 141,
track_commit_timestamp 88 143–144
track_counts 121 vacuum_index_cleanup 148
222
Index
vacuum_truncate 120 walsender 203,214
vacuum_freeze_min_age 142 wal_skip_threshold 214–215
Virtualtransaction 79 wal_sync_method 208
Visibility 87,92 walwriter 204–205
Volatility 49 wal_writer_delay 204–205
wal_writer_flush_after 205
W
work_mem 11
WAL seewrite-aheadlog
Writeskew 56,59
wal_buffers 185
Write-aheadlog 31,183
wal_compression 211
levels 213
wal_keep_size 200
wal_level 214
wal_log_hints 211 X
wal_recycle 199 Xminandxmax 67,69,73,75,87,
wal_segment_size 188 137
223