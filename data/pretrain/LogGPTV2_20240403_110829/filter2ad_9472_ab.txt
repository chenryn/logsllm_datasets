上述的基础拦截案例中，使用的是默认的拦截方式，也就是将非法流量以重定向的方式拦截，而通过配置文件的修改，我们可以更改拦截的方式，以及重定向的站点URL，其实这种方式与之说是重定向，描述为劫持、克隆或许更贴切，因为返回的响应状态码为200，是从另一个网站获取响应，以尽可能接近地模仿克隆/劫持的网站。
无效数据包可能会根据两种策略被错误路由：
  * **reset** ：立即终止 TCP 连接。
  * **proxy** ：从另一个网站获取响应，以尽可能接近地模仿克隆/劫持的网站。
    # Determines whether to intercept intercepted traffic default false / true
    DROP = false
    # URL to redirect to
    Redirect = https://360.net
配置文件中 **Redirect = URL**
指向的就是劫持的URL地址，RedGuard支持“热更改”，也就是说在工具通过nohup这种方式在后台运行的过程中，我们依旧可以通过修改配置文件的内容进行实时的功能启停。
    ./RedGuard -u --drop true
注意，通过命令行修改配置文件的时候。-u选项不要少，否则无法对配置文件修改成功，如果需要还原默认配置文件设置只需要输入 `./RedGuard -u`
即可。
而另一种拦截方式就是DROP，直接Close HTTP通信响应，通过设置 **DROP = true** 启用，具体拦截效果如下图：
可以看到，没有获取到HTTP响应码，C2前置流量控制对非法请求直接close响应，在网络空间测绘的探测中，DROP的方式可以实现隐藏端口开放情况的作用，具体效果可以看下面的案例分析。
## 代理端口修改
这里其实就很好理解了，对配置文件中以下两个参数的配置实现更改反向代理端口的效果，这里建议在不与当前服务器端口冲突的前提下，使用默认的端口隐匿性会更好，如果一定要修改，那么注意参数值的
**:** 不要缺少
    # HTTPS Reverse proxy port
    Port_HTTPS = :443
    # HTTP Reverse proxy port
    Port_HTTP = :80
## RedGuard日志
通过目标请求的拦截日志分析蓝队溯源行为，可用于跟踪对等连接事件/问题，日志文件生成在运行RedGuard所在目录下，
**文件名：RedGuard.log** 。
## 请求地域限制
配置方式以AllowLocation = 济南,北京
为例，这里值得注意的是，RedGuard提供了两个IP归属地反查的API，一个适用于国内用户，另一个适用于海外用户，并且可以根据输入的地域名动态的分配使用哪个API，如果目标是中国的那么设置的地域就输入中文，反之输入英文地名，建议国内的用户使用中文名即可，这样反查到的归属地准确度以及API的响应速度都是最好的选择。
P.S. 国内用户，不要使用 **AllowLocation = 济南,beijing** 这种方式！没啥意义，参数值的首个字符决定使用哪个API！
    # IP address owning restrictions example:AllowLocation = 山东,上海,杭州 or shanghai,beijing
    AllowLocation = *
决定限制地域之前，可以通过以下命令手动查询IP地址归属地。
    ./RedGuard --ip 111.14.218.206
    ./RedGuard --ip 111.14.218.206 --location shandong # 使用海外API查询归属地
这里我们设置仅允许山东地域上线
**合法流量：**
**非法请求地域：**
关于地域限制的上线，在目前的攻防演练可能比较实用，基本上省市级的护网限制的目标都是在指定区域中，而对于其他地域请求的流量自然可以忽略不计，而RedGuard这一功能不仅仅可以限制单一地域也可以根据省、市限制多个上线地域，而对其他地域请求的流量进行拦截。
## 基于白名单拦截
除了RedGuard内置的安全厂商IP的黑名单，我们还可以依据白名单的方式进行限制，其实我也是建议在web打点的时候，我们可以根据白名单限制上线的IP的地址，以，分割多个IP地址的方式。
    # Whitelist list example: AllowIP = 172.16.1.1,192.168.1.1
    AllowIP       = 127.0.0.1
如上图，我们限制仅允许127.0.0.1上线，那么其他IP的请求流量就会被拦截。
## 基于时间段拦截
这个功能就比较有意思了，在配置文件中设置以下参数值，代表了流量控制设施仅可以上午8点至晚上9点上线，这里具体的应用场景也就是在指定攻击时间内，我们允许与C2进行流量交互，其他时间保持静默状态。这也能让红队们睡一个好觉，不用担心一些夜班的蓝队无聊去分析你的木马，然后醒来发生不可描述的事情，哈哈哈。
    # Limit the time of requests example: AllowTime = 8:00 - 16:00
    AllowTime     = 8:00 - 21：00
## Malleable Profile
RedGuard采用 Malleable C2
配置文件。然后，它解析提供的可延展配置文件部分以了解合同并仅通过那些满足它的入站请求，同时误导其他请求。诸如`http-stager`,`http-get`和`http-post`它们对应的 uris, headers, User-Agent 等部分都用于区分合法信标的请求和不相关的 Internet
噪声或 IR/AV/EDR 越界数据包。
    # C2 Malleable File Path
    MalleableFile = /root/cobaltstrike/Malleable.profile
风起编写的profile，推荐使用：
> 
# 0x04 案例分析
## 空间测绘
如下图所示，当我们的拦截规则设置为DROP的时候，空间测绘系统探针会对我们反向代理端口的/目录进行几次探测，理论上测绘发送的请求包就是伪造成正常的流量所示。但是当尝试几次因为请求包特征不符合RedGuard的放行要求，所以均被Close
HTTP响应。最终展现在测绘平台上的效果也就是认为反向代理端口未开放。
下图所示的流量也就是当拦截规则设置为Redirect时，我们会发现当测绘探针收到响应后会继续对我们进行目录扫描，UserAgent为随机，看起来符合正常流量的请求，但是也都成功被拦截了。
**测绘平台 - 重定向拦截方式效果：**
## 域前置
RedGuard是支持域前置的，在我看来一共有两种展现形式，一种是利用传统的域前置方式，在全站加速回源地址中设置为我们反向代理的端口即可实现。在原有的基础上给域前置增加了流量控制的功能，并且可以根据我们设置的重定向到指定URL使其看起来更像是真的。需要注意HTTPS
HOST头RedGuard设置的要与全站加速的域名一致才可以。
在单兵作战中，我建议可以使用上述方式，而在团队任务中，也可以通过自建“域前置”的方式来实现。
在自建域前置中，保持多个反向代理端口一致，HOST头一致指向后端真实的C2服务器监听端口。而这种方式，可以很好的隐藏我们的真实C2服务器，而反向代理的服务器可以通过配置防火墙仅开放代理端口即可。
这里可以通过多个节点服务器实现，在CS监听器HTTPS上线IP配置多个我们的节点IP。
## CobaltStrike上线
如果说上面的这种方式有一个问题就是，实际上线的C2服务器是不能通过防火墙直接拦截掉的，因为在反向代理中实际进行负载均衡请求的是云服务器厂商IP进行的。
如果是单兵作战的话，我们可以在云服务器防火墙设置拦截策略。
然后把代理指向的地址设置为
    {"360.net":"http://127.0.0.1:8080","360.com":"https://127.0.0.1:4433"}
而且因为我们的基础验证就是基于HTTP HOST请求头来做的，所以在HTTP流量中看到的也是与域前置的方式一致，但是成本更低，只需要一台云服务器即可实现。
对于监听器的设置上线端口设置为RedGuard反向代理端口，监听端口为本机实际上线端口。
# 0x05 Loading
感谢各位用户的支持，RedGuard也会坚持进行完善更新的，希望 RedGuard 能够让更多安全从业者所知，工具参考了RedWarden的设计思想。
**欢迎大家多多提出需求，RedGuard也会在这些需求中不断地成长，完善！**
**关于开发者 风起 相关文章：**
**Kunyu:**
> 风起于青萍之末，浪成于微澜之间。
# 0x06 Community
如果有问题或者需求可以在项目下提交issue，或通过添加WeCat联系工具作者。