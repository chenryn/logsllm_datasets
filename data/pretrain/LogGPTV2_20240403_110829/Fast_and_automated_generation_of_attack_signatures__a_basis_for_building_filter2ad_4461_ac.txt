The following two constructs enable the value matching a pattern
to be remembered and used subsequently.
(cid:15) binding: The format speciﬁer name = f ormat matches the
same string as f ormat, but has the additional effect of assign-
ing the string that matches f ormat to the variable name. For
efﬁciency of matching, bindings are restricted so that they are
deterministic. This enables bindings to be handled without back-
tracking.
(cid:15) conditional pattern: The format speciﬁer f ormat matches
the exact same strings as f ormat, provided cond is true. Other-
wise, it doesn’t match any string. The condition component may
refer to variables that have previously been bound using the pre-
vious construct. They may also use simple arithmetic and string
operations.
The basic speciﬁers can be composed by the following operators.
(cid:15) Concatenation: A string s1s2 matches a format speciﬁer F1F2
iff s1 matches F1 and s2 matches F2.
(cid:15) Repetition: A format speciﬁer F (cid:3) matches s if s = s1s2 (cid:1) (cid:1) (cid:1) sn,
where n (cid:21) 0, and each si matches F . A tighter bound on the
value of n can be speciﬁed using bounded repetition: F fl; mg
has the same meaning as F (cid:3), provided l (cid:20) n (cid:20) m. F fm; mg
is abbreviated as F fmg. F + is a short form of F f1; 1g.
(cid:15) Choice: A string s matches a format speciﬁer F1j (cid:1) (cid:1) (cid:1) jFn iff s
matches any of F1 through Fn.
4.2
Illustrative Examples
In this section, we illustrate the format speciﬁcation language
with a few examples, starting with the FTP protocol.
WORD = [ˆ \t\n]*
LINE = [ˆ\n]*\n
message = ([ \t]*)(cmd=%WORD)(params=%LINE)
This speciﬁcation states that each message is on a line by itself.
The ﬁrst word in the line, which matches the regular expression
named WORD, speciﬁes the name of an FTP command. The rest of
the line describes the parameters to this command. The above spec-
iﬁcation does not attempt to capture the format of these parameters
in detail, but simply states that, for the purposes of signature gen-
eration, every thing until the end of line should be considered as
one ﬁeld. This ability to leave out detailed speciﬁcations (for some
parts of the protocol) is the reason for the simplicity of our format
speciﬁcations.
In the context of generating signatures, bindings have an addi-
tional effect: only those parts of an input that are matched and
bound to variables are used in signature generation. This provides a
way for programmers to exert some control over the message ﬁelds
that are used in signature generation.
We now illustrate the speciﬁcation of a more complex protocol,
namely, SMTP:
CMD = [ˆ \t\n]*
WORD = [ˆ \t\n]+
LINE = [ˆ\n]*\n
HEADER = ([ \t]*)(hdrtype=%WORD)(%LINE)
BODYLINE = (\n)|(\.[ˆ\n]+\n)|([ˆ\.][ˆ\n]*\n)
EMAILBODY = (%BODYLINE*)(\.\n)
EMAILMSG = (%HEADER+)(%EMAILBODY)
EXTRA = %EMAILMSG
message = ([ \t]*)(cmd=%CMD)(%LINE)(%EXTRA|(cid:15))
At the top level are SMTP protocol messages such as HELO. The
actual email message appears immediately following the protocol
command DATA. Following this line, there are a list of email head-
ers, followed by an email body. The boundary between the header
and message body is given by a blank line. The end of email mes-
sage body is identiﬁed by a line consisting of just one “.” character.
In spite of the fact that SMTP is a complex protocol, our input
speciﬁcation is only several lines long.
Next, we illustrate the language for the SMB ﬁle-sharing proto-
col that uses binary data.
message = (%b{15})(len=%b{17})(%B{4})
(type=%B)(%B{len-5})
In SMB speciﬁcation, the ﬁrst four bytes correspond to the ses-
sion header, in which the last 17 bits specify the length of the mes-
sage. Following the header is the message body, of which the ﬁfth
byte speciﬁes the message type. This speciﬁcation ignores the de-
tails of the ﬁrst 4 bytes of message (captured by the format string
%Bf4g), and then stores the ﬁfth byte in a variable named type.
Finally, the remaining sequence of bytes must have a length of ﬁve
bytes less than the length speciﬁed in the session header.
5. Signature Generation
After the three preceding steps have identiﬁed the potentially
malicious ﬁeld and malicious data within it, our signature gener-
ation algorithm generates a signature by comparing this malicious
data with data appearing in the same ﬁeld in benign messages. The
signature generation algorithm needs to satisfy the following re-
quirements:
(cid:15) Virtually zero false positive rate. It is critical that automatically
generated ﬁlter doesn’t discard legitimate inputs.
(cid:15) Protection from variations of previously encountered attacks. Any
sophisticated attack, including those launched by polymorphic
worms, is characterized by the fact that the exact details of the
attack vary from one attack instance to the next.
(cid:15) High performance. In order to meet our goal of sub-second de-
ployment of ﬁltering rules, the ﬁlter generation must be very fast.
General-purpose classiﬁers such as RIPPER [8] provide powerful
rule generation capabilities, but do not satisfy all of the above re-
quirements. Therefore, we have developed a simple, light-weight
rule generation algorithm that exploits unique features of buffer
overﬂows to satisfy the above requirements. Our algorithm makes
use of all available benign input samples, which can include all of
the inputs ever seen by a server. It ensures that none of these in-
puts will be ﬁltered out, thereby minimizing the likelihood of false
positives. In order to provide high performance, it operates in an
incremental fashion: it maintains certain summary statistics about
all benign inputs, which can be quickly compared with those of
attack inputs when they are encountered.
Our algorithm uses two basic characteristics of inputs: (a) length
of input ﬁelds, and (b) distribution of characters in a ﬁeld. A gen-
erated signature may use (a), (b), or both. Buffer overﬂows are
usually characterized by excessively long input ﬁelds, and more-
over, contain binary data such as addresses and executable code
that signiﬁcantly alters the statistical characteristics of input. By
using rules based on these characteristics, we increase the likeli-
hood that the signature captures properties of the underlying vul-
nerability, over which the attacker has no control, as opposed to the
speciﬁcs of the attack string that he/she can control.
We illustrate signature generation with a few examples. The sig-
natures are internally represented in our system using a binary for-
mat. We present them using a textual representation for readability.
The ﬁrst example is a size based signature, which is generated for
the OpenSSL heap overﬂow vulnerability (discussed in Section 7).
ftype = 2; data:size > 420g
Here, type and data refer to variable names deﬁned in the input
format speciﬁcation for OpenSSL. This signature says that the sys-
tem needs to drop an input if one of its ﬁeld’s type is 2, and the
Detector
Memory
Analyzer
Randomized
Program
Input Logger
Input Filter
Signature
Generator
Figure 3: Architecture of our implementation.
ﬁeld’s size is greater than 420. The next example is uses character
distribution based signature for FTP.
fcmd = "SITE"; params:size > 452 && non-ASCII(params)g
This signature speciﬁes that an attack has size greater than 452 and
contains non-ASCII characters.
6.
Implementation
We have prototyped COVERS on Red Hat Linux 7.3. The ar-
chitecture of our prototype system is shown in Figure 3. The com-
ponents are divided into two groups: internal components and ex-
ternal components. Shown in the dashed box, internal components
hook into the protected program by means of library interposition.
They implement the functionalities of attack detection, attack input
correlation, and input context identiﬁcation. The external compo-
nent runs in a separate process, which implements the functionality
of signature generation.
We chose library interposition, rather than system call interpo-
sition, to implement the internal components. This is because the
former has less overhead and can intercept operations at higher lay-
ers, e.g., scanf function, as opposed to read. The main weakness
of library interception is that it can be bypassed by a successful
attack. However, in our case, we are interested in examining in-
puts before an attack compromises the protected application, and
hence this weakness does not pose a problem for us. Moreover,
ASR stops the attack before it can cause any damage, and hence
bypassing itself is a non-issue.
Library interposition is implemented by providing wrapper func-
tions for the library functions we are interested in, and using the
LD PRELOAD mechanism to redirect calls to these wrappers.
6.1
Input Filter and Logger
The input ﬁlter intercepts all inputs consumed by the protected
application. Inputs from different sessions are kept separate, while
inputs corresponding to a single session are aggregated together
into a single string2. This string is broken into ﬁelds, based on the
input speciﬁcations. The result of this matching is a series of bind-
ings to variables used in signatures. With these bindings in place,
the active signatures are evaluated. The input ﬁlter drops any in-
put that matches a signature. For TCP-based services, the associ-
ated connection is severed, and an error-code signifying a broken
2Session aggregation is simpliﬁed in our approach since we rely on
library interposition. Speciﬁcally, a series of input actions involv-
ing a single ﬁle descriptor are assumed to belong to a session until
the descriptor is closed.
connection is returned as the return code for the most recently inter-
cepted input call. As network servers expect and handle these types
of network errors, they invoke appropriate error recovery code on
such an error return, and bring the server back to a normal state
without the need for a restart.
Unmatched inputs are forwarded to the protected program, as
well as logged by the input logger to maintain a history of inputs
to the program. These logs are buffered in memory3. Those inputs
that do not trigger the detector are labeled as benign inputs. Period-
ically, the main-memory buffer is examined, and the key character-
istics of each benign input (such as the length of each recognized
ﬁeld, its character distribution, etc.) are written to the disk for sub-
sequent use in signature generation.
The most complex part of the input ﬁlter is that of parsing them
using format speciﬁcations described in Section 4. This parsing
code is generated by ﬁrst translating our format speciﬁcations into
Lex speciﬁcations, and then using Flex to compile them down to
C-code. The details of this translation aren’t very important for the
purposes of this paper, and hence to conserve space, they are not
provided here. Our compiler relies on the capability of Lex speciﬁ-
cations to describe regular-expression based as well as FSA based
lexical speciﬁcations. (The concept of start states provides support
for FSA-based lexical speciﬁcations in Lex.) The regular expres-
sion capability is useful for matching text-based inputs, while an
FSA based speciﬁcation is useful for handling binary data.
The parser needs operate in an incremental fashion, parsing the
input as it is read, and making the results available to the signature
generator and matcher. However, the program generated by Flex
expects to read all its input all at once, and provides no way to
“suspend” itself while awaiting more input. In order to make this
parser incremental, we take the following steps. First, we use a
separate stack to run the parsing program. Next, when the parser
attempts to read more input when there is no more available, it
is effectively suspended by switching back to the original stack,
and continuing. Essentially, the parsing code and the rest of the
application (including all the rest of our defense code) run as co-
routines.
6.2 Detector and Memory Analyzer
The detector monitors the execution of the protected program,
and activates memory analyzer to correlate a crash to its corre-
sponding input event when an attack is observed. Both components
are implemented as signal handlers.
In order to detect an attack and analyze the process memory,
we replace the signal handler for SIGBUS (bus error), SIGSEGV
(segmentation violation) and SIGILL (illegal instruction) signals
with our own. This is done when our interposing library initializes.
When the protected server attempts to install a new signal handler
or change it, our wrapper functions intercept these calls, and ensure
that our library will continue to be the one to get these signals ﬁrst.
Our signal handler uses a separate stack, so that it can function
even if the stack pointer contents are invalid at the time of signal de-
livery. Moreover, this approach helps preserve the process memory
image at the point of memory exception, thereby permitting a more
accurate forensic analysis. The Linux signal mechanism provides
a way to access the program’s context when the signal occurs, such
as the value of processor registers, which is used in our analysis.
3In-memory buffering may seem to be vulnerable to corruption by
an attack, but since we rely on ASR to detect attacks before any
damaging code can be executed, this is not a problem.
6.3 Signature Generator
The signature generator uses the input identiﬁed by the memory
analyzer to generate a signature as described in Section 5, which
is then deployed in the input ﬁlter to make the system immune to
future attacks.
7. Evaluation
In this section, we present an experimental evaluation of our ap-
proach. Our experiments were conducted on Red Hat Linux 7.3
operating system running over VMWare Workstation 4.5. Runtime
measurements were conducted without using VMWare on a dual
Intel Xeon 1.70GHz CPUs and 2GB main memory. All servers
programs used in our experiments were protected using address-
space randomization.
7.1 Experience
In this section we describe our experience with three types of