# ETHBMC：智能合约的有界模型检查器
|
##### 译文声明
本文是翻译文章，文章原作者 Joel Frank, Cornelius Aschermann, Thorsten Holz
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
智能合约的引入极大地推动了加密货币的最新发展。智能合约是生活在区块链上的程序，用于控制资金流向。但是，获得金钱收益的承诺吸引了错误的人，导致了骇人听闻的黑客攻击，导致数百万美元的货币损失。作为响应，开发了一些强大的静态分析工具来解决这些问题。对最近提出的针对以太坊智能合约的八种静态分析器进行了调查，发现它们都无法捕获以太坊生态系统的所有相关功能。例如，发现缺少精确的内存模型，仅部分支持合约间分析。
基于这些见解，介绍了基于符号执行的有界模型检查器的设计和实现，该模型检查器提供了以太坊网络的精确模型。通过一系列实验证明其功能。首先，将其与上述八个工具进行比较，表明即使是相对简单的玩具示例也可以阻碍其他分析器。为了进一步证明精确建模是必不可少的，利用ETHBmc功能进行自动漏洞扫描。对当前活跃在区块链上的大约220万个帐户进行大规模分析，并自动生成5,905个有效输入以触发漏洞。其中1,989个可以随意销毁合约（所谓的自杀合约），而其余的则可以被对手用来任意提取金钱。最后，将大规模分析与之前的两次分析进行了比较，发现比以前的方法有更多的输入（22.8％）。
## 0x01 Introduction
自2008年推出比特币以来，加密货币在学术界和行业中都获得了相当大的关注。 称为区块链的底层技术最初被设计为一种分散的点对点支付协议，而无需受信任的各方。
最近，这项技术还在许多不同领域得到了应用，例如供应链管理，资产转移或医疗保健。 区块链是由网络的所有参与者维护的分布式，仅追加的分类帐。
参与者运行共识协议以将新数据（即所谓的块）附加到分类账，从而使网络中的交易成为可能。
智能合约，直接部署在区块链上的程序允许用户对有关如何以及何时进行交易的复杂规则进行编码。例如，当特定事件发生时，合约可以转移资金。甚至有可能将多个合约链接在一起以表达更复杂的逻辑。这个想法由Szabo于1997年首次提出，但由以太坊于2014年提供了第一个现实世界实现方法。实际的智能合约通常以高级语言编写，以太坊最常使用Solidity。然后，将这些高级语言编译为字节码，该字节码在基于事务的状态机以太坊虚拟机（EVM）上执行。
这提供了很大程度的控制力，并保证了多种用例，例如状态或付款渠道，分散式加密货币交易所和多签名钱包。不利的一面是，智能合约与其他程序一样，也会遭受软件故障的困扰。在传统程序中，这可能“仅”导致崩溃，而在以太坊世界中，一个简单的错误可能会带来更直接的后果（通常是财务方面的后果）。臭名昭著的奇偶校验事件就是一个很好的例子。首先，攻击者利用共享库代码中的错误窃取了价值超过15万的以太坊（以太坊区块链背后的加密货币）。在遭到黑客攻击时，这笔交易的价值约为3000万美元。在第二个事件中，当时被打补丁的库再次被利用，这次导致超过514,000个以太坊（约合1.55亿美元）无法访问。
已经提出了几种以自动化方式检测软件故障的建议。对来自学术界和工业界的此类自动分析工具进行了调查，发现它们都至少缺乏以下类别：（i）合约间推理，（ii）内存建模，尤其是内存复制式操作，或（iii）加密哈希函数的处理。
在本文中解决了这些缺点，并介绍了ETHBMC的设计和实现，ETHBMC是基于符号执行器的智能合约自动分析框架，与最新工具相比，它对EVM内部使用更强大，更精确的推理。
ETHBMC被设计为有界模型检查器，可以根据智能合约的代码检查预定义模型。在模型被违反的情况下，ETHBMC可以自动生成具体的输入以简化进一步的分析（即，生成了一系列交易来证明检测到的漏洞）。因此，ETHBMC是第一种以完全自动化的方式识别奇偶校验漏洞的方法，甚至能够生成第二次利用原始攻击未使用的攻击。
为了证明工具的功能进行了一系列实验，将方法与被调查的分析仪进行了比较。主要目的是，即使是简单的示例也可能妨碍其他方法的不精确分析。接下来，将ETHBMC的功能作为自动生成漏洞利用的手段，扫描以太坊区块链（截至2018年12月）上的所有账户，生成5,905个漏洞利用。从这5905个漏洞中发现1,989个可用于任意破坏合约（所谓的自杀合约），其余的可用于提取金钱。此外，将本研究的大规模分析与该主题的两项先前的工作进行了比较。首先将分析结果与最新的自动漏洞利用生成工具teEther进行比较，证明了本文的方法可以在更短的时间内发现更多漏洞（22.8％），同时还能识别teEther中的假阳性。其次将其与一个可以使人找到自杀合约的执行器MAIAN作比较，并再次发现ETHBMC发现了更多的利用。最后对ETHBMC引入的技术进行消融研究，以定性的方式显示这些改进。在重新扫描易受攻击的合约时会系统地禁用其功能，从而了解不同技术如何对分析结果做出贡献。
为了促进智能合同安全的研究，ETHBMC的代码可在  上获得。
## 0x02 Background
在深入介绍分析过程的技术细节之前，简要介绍了有关加密货币和以太坊虚拟机（EVM）的所需背景信息。
###  1）加密货币
2008年，中本聪（Satoshi
Nakamoto）引入了比特币和区块链的概念，这是一种在对等网络上运行的去中心化分类账。非正式地讲，区块链是一个公共的，仅附加的分类账，用于存储系统中发生的所有事件。参与者运行一个共识协议，该协议可以确保只要网络的大多数行为都是诚实的，总账是正确且安全的。
以太坊可以在许多方面被视为“比特币2.0”。由Buterin于2013年推出，它是一种具有图灵完备字节码语言的加密货币，可以协调系统中的价值转移。网络中的参与者由一个160位地址标识，该地址从ECDSA非对称密钥对的公共部分派生而来。在以太坊的情况下，这些所谓的帐户可能还会附加代码。这种帐户称为智能合约，将复杂的行为编码为字节码程序。用户可以以Ether的形式互相汇款，或者通过将交易提交到对等网络并用其私钥进行签名来执行智能合约代码，从而证明交易的正确性。尽管智能合约的执行时间受称为gas的参数限制，即保证程序最终终止的费用，但合约可以通过将交易链接在一起或使用多个合约拆分逻辑来实现相当复杂的行为。
###  2）以太坊虚拟机
以太坊定义了一种专用的，基于堆栈的虚拟机，称为以太坊虚拟机（EVM），用于确定智能合约执行的结果。以太坊在黄皮书中提供了正式规范，其中定义了EVM的整个内部工作方式。该机器对字节码进行操作，其中每个操作数将值弹出或推入数据堆栈，每个值具有256位字长。此外，EVM增强了针对加密货币环境量身定制的多种机制。
**World State**
：以太坊世界状态是整个系统的状态。在本文的其余部分将其称为环境。它由两部分组成，从帐户地址到帐户状态的映射以及当前块信息。帐户状态是一个元组，其中包含多个信息，例如帐户的当前余额。此外，如果帐户是智能合约，则帐户状态还包含字段代码和存储。代码字段保存智能合约的代码，而存储是用于在多个合约调用之间保留值的永久性存储器。
内存：EVM区分三种不同类型的内存，
•存储：存储是一个持久的键值存储，它将256位键ping到256位值。
•Calldata：交易的数据部分用于向合约提供用户输入。注意，这是一个可字节寻址的数据数组，在执行期间是不变的。
•执行存储器：该存储器是易失性字节数组，仅在整个执行过程中一直保持不变。它在经典计算机程序中像堆一样被使用，例如，在计算过程中存储中间结果。  
该设置创建了具有独立指令和数据存储器的哈佛式架构。另外，EVM提供了内存复制式的操作，例如CALLDATACOPY，它将部分调用数据复制到执行存储器中。
###  3）符号执行和SMT解决
虽然研究的工具是基于多种不同的程序分析技术的，但ETHBMC是基于符号执行的，因此提供了简要的介绍。符号执行最初被设计为一种软件测试技术，但此后已被安全社区用于程序分析。符号执行将所有输入视为符号变量，而不是具体的输入，它们在程序的整个输入域中范围内。直观地讲，对于函数f（x），符号执行不是考虑一个具体的执行轨迹，例如f（10），而是考虑符号输入ϕ。产生符号函数执行f（ϕ），其中ϕ代表整个输入域，例如32位整数，因此探索了程序可以采用的所有可能路径。当到达分支（例如，if语句）时，将执行分支以探索两种可能的路径。为了保持较低的探索状态空间，符号执行器将程序的当前状态以及路径条件（例如，x
<= 3）编码为一阶逻辑公式，并使用可满足性模理论（SMT）求解器检查程序路径是否可行，避免进一步探索不可能的路径。
SMT公式用一阶逻辑表示，它是命题逻辑（也称为布尔逻辑）的扩展，它为表达问题提供了多种不同的理论。
SMT求解器通过枚举执行证明：它试图找到约束系统的满意（具体）分配，从而证明可以求解。在对程序的执行进行建模时，此具体分配为程序提供了输入，可用于达到给定状态。当另外将故障条件编码为逻辑公式并为二者找到令人满意的分配（即执行和故障条件）时，此具体分配是触发相应软件故障的程序的输入。
## 0x03 Challenges in Analyzing Smart Contracts
###  1)智能合约中的常见障碍
####  (a) Keccak256函数
EVM提供了一条特定指令，用于在执行内存区域上计算keccak哈希。基于实体的智能合约在实现映射数据类型（本质上是像数据结构的哈希表）时会大量使用此指令。而且，该功能可以由智能合约开发人员手动调用，例如，以实现诸如承诺方案之类的密码协议。
List 1演示了keccak函数的简单用法，可以通过keccak256关键字调用该函数。List