Now, we investigate the security of the PCH in Scheme 1.
Theorem 1. If the PCH scheme in Scheme 1 is based on
a strongly indistinguishable CHET, then the PCH scheme is
strongly indistinguishable.
The theorem above can be proven by a straight forward re-
duction to strong indistinguishability of the underlying CHET.
We provide the proof in the full version.
Theorem 2. If the PCH scheme in Scheme 1 is based on
a publicly collision-resistant CHET, then the PCH scheme is
outsider collision-resistant.
The theorem above can be proven by a straightforward re-
duction to public collision-resistance of the underlying CHET.
We provide the proof in the full version.
Theorem 3. If the PCH scheme in Scheme 1 is based on
a strongly privately collision-resistant CHET and an IND-
CCA2-secure ABE, then the PCH scheme is insider collision-
resistant.
Proof: We prove the theorem above in a sequence of
games, where we use Pr[Si] to denote the success probability
of the adversary in Game i. In addition we let the number of
queries to the oracle Hash(cid:48) be denoted by q.
Game 0. This is the original CRin security experiment from
Figure 4 played with Scheme 1.
Game 1. As Game 0, but we guess the index i∗ corresponding
to the query to Hash(cid:48) which returns the hash h∗ which will be
attacked by the adversary. We store the hash h∗ = (h∗
CHET, C∗)
as well as the corresponding randomness r∗ and the ephemeral
∗. If we detect that our guess is wrong at some
trapdoor etd
point during the simulation, we abort.
The winning probability in Game 1 is the same as in
Game 0, unless an abort happens. Therefore we have that
Pr[S1] = Pr[S0] · 1/q.
Game 2. As Game 1, but whenever we receive an adapt query
for a hash h = (hCHET, C), where C = C∗ we do not decrypt,
but directly adapt using etd
∗.
The winning probability in Game 2 is the same as in
Game 1 under the perfect correctness of the encryption
scheme, i.e., Pr[S2] = Pr[S1].
Game 3. As Game 2, but we change the simulation of
(cid:48)
the Hash algorithm within the i∗-th query to the Hash
oracle: instead of running C ← ΠABE.Enc(etd, A), we run
CHET
C ← ΠABE.Enc(0|etd|, A) and locally store etd.
B,ABE
We claim that Game 2 and Game 3 are indistinguishable
under the IND-CCA2 security of ΠABE, i.e., |Pr[S3]−Pr[S2]| ≤
AdvIND-CCA2
(κ). To prove the claim, we show that we can
use an adaptive IND-CCA challenger to effectively interpolate
between Game 2 and Game 3. In particular, consider the fol-
lowing hybrid game: Upon setup we obtain mpk from an IND-
CCA challenger, set msk ← ⊥ and complete the remainder of
the setup honestly. To simulate queries to the key generation
oracles we use the respective oracles provided by the chal-
lenger. Decryption within the adapt oracle is done by using
the decryption oracle provided by the challenger. Furthermore,
upon the i∗-th query to Hash(cid:48), we output (etd, 0|etd|, A, state)
to the challenger to obtain (C∗, state) and set C ← C∗.
For adapt queries with respect to the hash returned upon the
i∗-th query to Hash(cid:48), we directly adapt using etd without
prior decryption. Now, observe that aborting as soon as we
detect that our guess of index i∗ is wrong ensures that we
will never have to answer queries which involve queries to
the challenger’s oracle which would not be answered. This, in
turn, means that if the bit b of the challenger is 0 we perfectly
simulate Game 2, whereas we perfectly simulate Game 3 if
b = 1. This proves the claim.
Reduction to Strong Private Collision-Resistance. Now
we are ready to describe the reduction to private collision-
resistance. In particular, we obtain PPCHET from a private
collision-resistance challenger C and honestly complete the
setup. Then we simulate all oracles except the hash and the
adapt oracle as in Game 3. In particular, we can internally
(cid:48)
simulate KGenCHET and all queries to the Hash
CHET oracle
(cid:48)
up to the i∗-th query. In the i∗-th query to the Hash
oracle, we use the Hash(cid:48) oracle provided by the private
CHET
collision-resistance challenger to obtain (hchet, rchet). As the
ciphertext C already encrypts 0|etd|
instead of etd we do
not require to know etd. Likewise, for the adaption ora-
cle, we only modify the simulation for queries with respect
(cid:48)
to the etd returned upon the i∗-th query to Hash
CHET in
that we use the adaption oracle provided by the challenger
to compute the adapted hashes. If the adversary eventually
outputs a collision (m∗, r∗
chet, C∗)), we out-
chet, m(cid:48)∗, r(cid:48)∗
put (m∗, r∗
chet, h∗
chet) as a private collision for the
C,CHET(κ) ≥ Pr[S3].
CHET. Consequently, we have that AdvSCRpriv
Overall Bound. As we have shown above, the advantage of
any adversary in the ﬁnal game is bounded by the advantage
of any adversary in the private collision freeness game, i.e.,
Pr[S3] ≤ AdvSCRpriv
C,CHET(κ). This yields the following bound for
the original game AdvsCRinA,PCH(κ) ≤ q · (AdvIND-CCA2
(κ) +
AdvSCRpriv
C,CHET(κ)), which concludes the proof.
B,ABE
chet, m(cid:48)∗, r(cid:48)∗
chet, (h∗
C. On the Choice of Access Policies
The policy expressiveness of our PCH construction is
given by the policy expressiveness of the underlying CP-ABE
scheme. In general,
the most basic and reasonable access
policies offer at least monotonic operators such as AND and
OR. If we speak of access policies in this work, we refer
to monotone access policies. For access policies, we use
monotone span programs (MSPs) as described in Section II
for encoding the access policy.
More expressive policies are known in the cryptographic
literature, e.g., ones that allow for NOT-gates to be present
within an access policy. However, the provided ABE schemes
are often not as efﬁcient compared to their monotonic coun-
terparts in a practical sense. In [26], Goyal et al. describe
an inefﬁcient way of realizing more general access policies
to allow the NOT operator. Furthermore, we can allow even
for access policies that are represented as general circuits as
described by the work of Gorbunov et al. [25] based on lattices
and by the work of Garg et al. [24] based on multilinear maps.
However, those scheme are not at all efﬁcient yet. Hence,
for practical considerations, schemes in the bilinear group
setting supporting monotone access policies (i.e., monotone
span programs) currently seem to be the optimal choice.
IV.
INSTANTATION AND EVALUATION
In this section, we start with discussing the choice of
primitives to come up with an efﬁcient instantiation of our
generic approach to PCHs. We then present our construction
and report on the evaluation of an implementation of our
concrete PCH.
8
A. Selecting a CP-ABE Scheme
In terms of practical CP-ABE instantiations, we consider
the recent work by Agrawal and Chase on a very efﬁcient
CP-ABE scheme they dubbed FAME [1]. FAME supports
unbounded ABE universes, has no restrictions on the monotone
policies used,
is based on efﬁcient Type-III pairings, has
constant-time decryption, and is adaptively secure under a stan-
dard assumption. Those features make FAME very versatile
in practical environments as used in our context. The only
restriction is that FAME does not support multiple attributes
in a ciphertext policy (which is commonly referred to as one-
use restriction). However, FAME can be adapted to allow up
to a constant number of the repeating attributes within a policy
by increasing the ciphertext and keys by a small factor.
The CP-ABE scheme by Waters [39] yields a good candi-
date for our scenario as well; in particular, since his construc-
tion does not have the one-use restriction. However, Waters’
scheme is only selectively secure and requires a q-type (i.e.,
non-standard and non-static) assumption. In a selective security
model, the adversary has to output the target access policy
before receiving the public parameters of the system which is
clearly not a realistic scenario and too weak for the security
required by PCHs. Furthermore, encryption and decryption is
less efﬁcient compared to FAME [1].
We also considered the state-of-the-art adaptively secure
CP-ABE scheme from the literature, i.e., the work by Chen,
Gay, and Wee [18]. Their scheme is fairly efﬁcient (see [1]
for comparisons); however, not suitable for our scenario due
to the restriction of a bounded universe of attributes.
Finally, we end up with selecting FAME [1]. Since FAME
only provides IND-CPA security, but we require IND-CCA2
security, we apply a variant of the well known Fujisaki-
Okamoto transform [23] (cf. [30]) to FAME. Basically, the
encryption algorithm will encrypt as its message (m, r) with
m the original message and r a sufﬁciently large randomly
sampled bitstring (this requires to injectively encode (m, r)
into the message space of ABE). The ABE encryption is
derandomized and uses as the random coins H(r, A) where
H is a hash function modeled as a random oracle and A the
used access policy to obtain the ciphertext C. The decryption
algorithm applies the original decryption algorithm from IND-
CPA-secure ABE to receive (m(cid:48), r(cid:48)). Then,
it re-encrypts
(m(cid:48), r(cid:48)) using random coins H(r, A) to obtain ciphertext C(cid:48).
If it holds that C = C(cid:48), it outputs m(cid:48) and otherwise it outputs
⊥. Note that if we want to use the resulting scheme as an IND-
CCA2-secure KEM, we can simply sample a random (say (cid:96)
bit) key k and use (k, r) as the message to be encrypted with
the ABE and k as the key (and also need to include k as input
to H). Observe, that clearly for the transformation to work, A
needs to be known to the decryption algorithm. We can safely
assume that this can be inferred from a given ciphertext (of the
IND-CPA-secure variant of ABE), i.e., by simply appending a
canonical representation of A to the ciphertext.
B. Modiﬁed CHET
Camenisch et al. in [16] provide, among others, a generic
construction of a CHET by combining two chameleon-hashes,
both requiring collision-resistance even in presence of a
collision-ﬁnding oracle. The keys for the second chameleon-
hash are drawn freshly for each new hash. Thus, the secret
key for the second chameleon-hash is the ephemeral trapdoor.
In this section, we provide a construction which is essentially
the one given by Camenisch et al. [16], but we additionally
check whether a hash h is valid after adaption and add the
two public keys to the hash-computation, as already done by
Krenn et al. [32], but in a slightly different context. This
allows us to prove our stronger notion of private collision-
resistance required in this work. The formal deﬁnitions are
given in Appendix A while our generic construction is given
in Scheme 2.
PPGenCHET(1κ) : On input a security parameter κ,
PPCH ← PPGenCH(1κ). Return PPCHET ← PPCH.
KGenCHET(PPCHET) : On input PPCHET = PPCH,
return
let
(sk1
CH, pk1
CH) ← KGenCH(PPCH).
let
CH))
CH, pk2
HashCHET(pkCHET, m) : On input of pkCHET = pk1
CH
CH) ← KGenCH(PPCH). Let
and
CH)). Return
and m,
(h1, r1) ← HashCH(pk1
(h2, r2) ← HashCH(pk2
((h1, h2, pk1
CH, (m, pk1
CH, (m, pk1
(etd, pk2
CH, pk2
CH, pk2
CH), (r1, r2)).
CH, (m, pk1
CH, pk2
CH, (m, pk1
CH, pk2
VerifyCHET(pkCHET, m, h, r) : On input of pkCHET = pk1
m, h = (h1, h2, pk1
1, if VerifyCH(pk1
VerifyCH(pk2
return 0.
CH,
CH) and r = (r1, r2), return
CH, pk2
CH), h1, r1) = 1 and
CH), h2, r2) = 1. Otherwise,
AdaptCHET(skCHET, etd, m, m(cid:48), h, r) : On input a secret key
CH, etd, messages m and m(cid:48), a hash
skCHET = sk1
CH, pk2
h = (h1, h2, pk1
CH) and r = (r1, r1), ﬁrst check
that VerifyCHET(pkCHET, m, h, r) = 1. Otherwise, return
⊥. Let r(cid:48)1 ← AdaptCH(sk1
CH), (m(cid:48),
CH), r1, h1) and r(cid:48)2 ← AdaptCH(etd, (m, pk1
pk1
CH,
CH), r2, h2). Let r(cid:48) ← (r(cid:48)1, r(cid:48)2). If
pk2
VerifyCHET(pkCHET, m(cid:48), h, r(cid:48)) = 0, return ⊥. Return r(cid:48).
CH, pk2
CH), (m(cid:48), pk1
CHET, (m, pk1
CH, pk2
CH, pk2
Scheme 2: Construction of a CHET
Theorem 4 (Security of Scheme 2). If CH is strongly in-
distinguishable, collision-resistant, and correct, then the con-
struction of a CHET given in Construction 2 is strongly in-
distinguishable, publicly collision-resistant, strongly privately
collision-resistant, and correct.
We provide a proof of this theorem in Appendix C.
Concrete Instantiation. For our concrete instantiation of the
CHET, we use the RSA-based CH from [16] which builds
upon the one presented by Brzuska et al. [15]. We recall this
construction in Appendix B1 and show its security in our
stronger model.
C. Selection of Suitable Parameters
Subsequently, we discuss the selection of parameters for
the required cryptographic building blocks considering the
cryptanalytic state-of-the-art.
Bilinear Groups. We assume that the reader is familiar with