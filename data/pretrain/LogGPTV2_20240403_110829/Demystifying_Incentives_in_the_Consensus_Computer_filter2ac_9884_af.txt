9, 10, 11, 12, 13, 14]. A key diﬀerence is in the assumptions
and goals. Our goal is not to produce explicit proofs of cor-
rectness, rather to enable an incentive structure where cheat-
ing provides no intrinsic advantage over following the proto-
col honest. Secondly, our techniques are speciﬁc to certain
algorithms, whereas veriﬁable computation enables proving
correctness of arbitrary circuits. Moreover, veriﬁable com-
putation can be and have been applied in our setting, since
recent schemes have constant veriﬁcation eﬀort [43]. How-
ever, such schemes impose impractically high overheads on
provers and require expensive inial key setup between all
miners in the protocol.
Since the rise of Bitcoin, a new line of work on repurposing
the blockchain for other applications has been initiated [19,
21, 16, 20]. For example, in [19, 21], Kumaresan et al. stud-
ied how to run several applications, including veriﬁable com-
putation, on Bitcoin. Their technique is fairly complicated
and relies on the assumption that all the computations done
by consensus protocol will be correct. As we have shown,
with expressive scripting languages (c.f. Ethereum), one can
achieve what these previous works have done in Bitcoin with
a single concise smart contract. However, as we pointed
out in this paper, miners have incentive to deviate from the
honest protocol in a new Turing-complete cryptocurrency.
Thus, techniques used in [20, 21] may not guarantee the
correctness of the computation on some ε-consensus com-
puter having small ε. Furthermore, our technique diﬀers
from theirs by leveraging a new cryptocurrency design and
adapting property testing techniques within the veriﬁable
computation domain.
8. CONCLUSION
In this paper, we introduce a veriﬁer’s dilemma demon-
strating that honest miners are vulnerable to attacks in cryp-
tocurrencies where verifying transactions per block requires
signiﬁcant computational resources. We formalize the se-
curity security model to study the incentive structure and
attacks which aﬀect the correctness of computations per-
formed on a consensus computer. Finally, we discuss how
to implement our ε-consensus computer in Ethereum with
various trade-oﬀs in latency and accuracy. We consider it
an interesting open problem to determine whether one can
incentivize robust computations to execute correctly on a
consensus computer by modifying its underlying consensus
mechanism.
9. ACKNOWLEDGMENT
We thank Frank Stephan, Shruti Tople, Pratik Soni, Ratul
Saha, Virgil Griﬃth and Vitalik Buterin for useful discus-
sions and feedback on the early version of the paper. This
work is supported by the Ministry of Education, Singapore
under under Grant No. R-252-000-560-112. All opinions ex-
pressed in this work are solely those of the authors.
10. REFERENCES
[1] Satoshi Nakamoto. Bitcoin: A peer-to-peer electronic
cash system. bitcoin.org, 2009.
[2] Karl J. O’Dwyer and David Malone. Bitcoin mining
and its energy footprint. In Irish Signals Systems
Conference 2014 and 2014 China-Ireland International
Conference on Information and Communications
Technologies (ISSC 2014/CIICT 2014). 25th IET,
pages 280–285, June 2014.
[3] Rob Halford. Gridcoin: Crypto-currency using
berkeley open infrastructure network computing grid
as a proof of work. http://www.gridcoin.us/images/
gridcoin-white-paper.pdf, May 2014.
[4] Use case for factom: The world’s ﬁrst blockchain
operating system (bos). http://kencode.de/
projects/ePlug/Factom-Linux-Whitepaper.pdf, Feb
2015.
[5] Ethereum Foundation. Ethereum’s white paper.
https:
//github.com/ethereum/wiki/wiki/White-Paper,
2014.
[6] blockchain.info. Bitcoin average number of
transactions per block. https://blockchain.info/
charts/n-transactions-per-block.
[7] Gavin Andresen. Why increasing the max block size is
urgent. http://gavinandresen.ninja/
why-increasing-the-max-block-size-is-urgent,
May 2015.
[8] Justin Thaler. Time-optimal interactive proofs for
circuit evaluation. In Advances in Cryptology -
CRYPTO 2013 - 33rd Annual Cryptology Conference,
Santa Barbara, CA, USA, August 18-22, 2013.
Proceedings, Part II, pages 71–89, 2013.
[9] Graham Cormode, Michael Mitzenmacher, and Justin
Thaler. Practical veriﬁed computation with streaming
interactive proofs. In Proceedings of the 3rd
Innovations in Theoretical Computer Science
Conference, ITCS ’12, pages 90–112, 2012.
[10] Srinath T. V. Setty, Richard McPherson, Andrew J.
Blumberg, and Michael Walﬁsh. Making argument
systems for outsourced computation practical
(sometimes). In 19th Annual Network and Distributed
System Security Symposium, NDSS, pages 253–268,
2012.
[11] Eli Ben-Sasson, Alessandro Chiesa, Daniel Genkin,
Eran Tromer, and Madars Virza. Snarks for c:
Verifying program executions succinctly and in zero
knowledge. Cryptology ePrint Archive, Report
2013/507, 2013. http://eprint.iacr.org/.
[12] Benjamin Braun, Ariel J. Feldman, Zuocheng Ren,
Srinath Setty, Andrew J. Blumberg, and Michael
Walﬁsh. Verifying computations with state. In
Proceedings of the Twenty-Fourth ACM Symposium on
Operating Systems Principles, SOSP ’13, pages
341–357, 2013.
[13] Srinath Setty, Victor Vu, Nikhil Panpalia, Benjamin
Braun, Andrew J. Blumberg, and Michael Walﬁsh.
Taking proof-based veriﬁed computation a few steps
closer to practicality. In Proceedings of the 21st
USENIX Conference on Security Symposium,
Security’12, 2012.
[14] Bryan Parno, Jon Howell, Craig Gentry, and Mariana
Raykova. Pinocchio: Nearly practical veriﬁable
computation. In Proceedings of the 2013 IEEE
Symposium on Security and Privacy, SP ’13, pages
238–252, 2013.
[15] Joseph Bonneau, Andrew Miller, Jeremy Clark,
Arvind Naryanan, Joshua A. Kroll, and Edward W.
Felten. SoK: Research Perspectives and Challenges for
Bitcoin and Cryptocurrencies. In IEEE Security and
Privacy 2015, May 2015.
[16] A Miller, A Juels, E Shi, B Parno, and J Katz.
Permacoin: Repurposing bitcoin work for long-term
data preservation. IEEE Security and Privacy, 2014.
[17] Ian Miers, Christina Garman, Matthew Green, and
Aviel D Rubin. Zerocoin: Anonymous Distributed
E-Cash from Bitcoin. IEEE Symposium on Security
and Privacy, 2013.
[18] Eli Ben Sasson, Alessandro Chiesa, Christina Garman,
Matthew Green, Ian Miers, Eran Tromer, and Madars
Virza. Zerocash: Decentralized anonymous payments
from bitcoin. In Proceedings of the 2014 IEEE
Symposium on Security and Privacy, SP ’14, 2014.
[19] Ranjit Kumaresan and Iddo Bentov. How to use
bitcoin to incentivize correct computations. In
Proceedings of the 2014 ACM SIGSAC Conference on
Computer and Communications Security, 2014, pages
30–41, 2014.
[20] Marcin Andrychowicz, Stefan Dziembowski, Daniel
Malinowski, and Lukasz Mazurek. Secure multiparty
computations on bitcoin. In Proceedings of the 2014
IEEE Symposium on Security and Privacy, SP ’14,
pages 443–458. IEEE Computer Society, 2014.
[21] Iddo Bentov and Ranjit Kumaresan. How to use
bitcoin to design fair protocols. In Advances in
Cryptology - CRYPTO 2014 - 34th Annual Cryptology
Conference, Santa Barbara, CA, USA, August 17-21,
2014, Proceedings, Part II, pages 421–439, 2014.
[22] Nick Szabo. The idea of smart contracts. http:
//szabo.best.vwh.net/smart_contracts_idea.html,
1997.
[23] Gavin Wood. Ethereum: A secure decentralised
generalised transaction ledger.
http://gavwood.com/paper.pdf, 2014.
[24] Andrew Miller, James Litton, Andrew Pachulski,
Neil Spring Neal Gupta, Dave Levin, and Bobby
Bhattacharjee. Discovering Bitcoin’s public topology
and inﬂuential nodes. http:
//cs.umd.edu/projects/coinscope/coinscope.pdf,
May 2015.
[25] US-CERT/NIST. Resource exhaustion attack in
bitcoin. https://web.nvd.nist.gov/view/vuln/
detail?vulnId=CVE-2013-2292, 2013.
[26] Sergio Demian Lerner. New bitcoin vulnerability: A
transaction that takes at least 3 minutes to be veriﬁed
by a peer. https://bitcointalk.org/?topic=140078,
2013.
[27] Some miners generating invalid blocks. https:
//bitcoin.org/en/alert/2015-07-04-spv-mining,
July 2015.
[28] Byron Cook, Andreas Podelski, and Andrey
Rybalchenko. Proving program termination. Commun.
ACM, 54(5):88–98, May 2011.
[29] Dana Ron. Property testing (a tutorial). http:
//www.eng.tau.ac.il/~danar/Public-pdf/tut.pdf,
2000.
[30] Oded Goldreich. Combinatorial property testing (a
survey). Electronic Colloquium on Computational
Complexity (ECCC), 4(56), 1997.
[31] Endre Szemer´edi. Regular partitions of graphs. In
Probl`emes combinatoires et th´eorie des graphes
(Colloq. Internat. CNRS, Univ. Orsay, Orsay, 1976),
volume 260 of Colloq. Internat. CNRS, pages 399–401.
1978.
[32] Noga Alon and Asaf Shapira. Every monotone graph
property is testable. SIAM Journal on Computing,
38(2):505–522, 2008.
[33] Noga Alon and Michael Krivelevich. Testing
k-colorability. SIAM Journal on Discrete
Mathematics, 15(2):211–227, 2002.
[34] Miguel Castro and Barbara Liskov. Practical
byzantine fault tolerance. In Proceedings of the Third
Symposium on Operating Systems Design and
Implementation, OSDI ’99, pages 173–186, 1999.
[35] David Mazieres. The stellar consensus protocol: A
federated model for internet-level consensus.
https://www.stellar.org/papers/
stellar-consensus-protocol.pdf, April 2015.
[36] Kwon Jae. Tendermint: Consensus without mining.
http://jaekwon.com/2014/05/11/tendermint/, May
2014.
[37] King Sunny and Nadal Scott. Ppcoin: Peer-to-peer
crypto-currency with proof-of-stake. http:
//peercoin.net/assets/paper/peercoin-paper.pdf,
August 2012.
[38] Loi Luu, Ratul Saha, Inian Parameshwaran, Prateek
Saxena, and Aquinas Hobor. On power splitting
games in distributed computation: The case of bitcoin
pooled mining. The 28th IEEE Computer Security
Foundations Symposium, July 2015.
[39] Ittay Eyal and Emin G¨un Sirer. Majority is not
enough: Bitcoin mining is vulnerable. arXiv preprint
arXiv:1311.0243, 2013.
[40] Ittay Eyal. The miner’s dilemma. In The 36th IEEE
Symposium on Security and Privacy, SP ’15, May
2015.
[41] Joshua A. Kroll, Ian C. Davey, and Edward W. Felten.
The economics of Bitcoin mining, or Bitcoin in the
presence of adversaries. In Workshop on the
Economics of Information Security, June 2013.
[42] Juan A. Garay, Aggelos Kiayias, and Nikos Leonardos.
The bitcoin backbone protocol: Analysis and
applications. In Advances in Cryptology -
EUROCRYPT 2015, pages 281–310, 2015.
[43] Ahmed Kosba, Andrew Miller, Elaine Shi, Zikai Wen,
and Charalampos Papamanthou. Hawk: The
blockchain model of cryptography and
privacy-preserving smart contracts. Cryptology ePrint
Archive, Report 2015/675, 2015.
http://eprint.iacr.org/.
[44] Response from founder of ethereum about our paper.
https://www.reddit.com/r/ethereum/comments/
3fcw0i/verifiers_dilemma_renders_ethereum_
nonincentive/, July 2015.
APPENDIX
A. DISCUSSION ON GASLIMIT IN ETHEREUM
We explain why gasLimit does not help Ethereum prevent
our DoS attack completely. The current design allows the
miners to set the gasLimit for the next block once they ﬁnd
a block. However, the gasLimit of the next block cannot
vary more than a fraction (2−10) of the current gasLimit.
We learned this from our private communication with the
founder of Ethereum. The constraint seems to mitigate our
attack, however, we explain why the gasLimit can reach
to a high value that makes the resource exhaustion attack
feasible.
In practice, miners have diﬀerent views of what gasLimit
value is acceptable because of various reasons. For instance,
one may be willing to always verify a new block regardless
of its gasLimit value because they have more resources or
they simply value the advantages of having a high gasLimit
value than the disadvantages. Thus, each miner will decide
to only reduce block’s gasLimit at a diﬀerent threshold Gi.
Suppose that our DoS attack requires gasLimit to be at
least G0 to be practical. In a scenario where more than 50%
of computational power consider G0 is still within their Gi,
all miners are under our denial-of-service attack. On the
other hand, if the majority of miners have their Gi less than
G0, gasLimit can successfully block our attack.
For the completeness of our argument, rational users in
the network have the following incentives to extend gasLimit
value.
• Higher gasLimit value means higher transaction fee
that miners can collect from a block.
• A block with a higher gasLimit can support more ap-
plications, speciﬁcally the application that requires more
gas to run. Thus, the value of the network and its un-
derlying currency is more valuable, which beneﬁts di-
rectly the miners.
• As more and more applications are built on top of
Ethereum, the gasLimit has to be increased correspond-
ingly in order to improve the throughput of the network
to support those applications. It is not practical to wait
for, say, ten blocks to see a transaction gets included in
the blockchain due to the small throughput.
There are also reasons that miners decide to reduce gasLimit.
The Ethereum founder mentions about those reasons in a
public post which discusses our work [44].
• Miners realize that high gasLimit value may cause DoS
attack as we described.
• Transaction fee is increased because low gasLimit means
only a limited number of transactions can be included
in a block.
In conclusion, gasLimit does not completely block our
DoS attack, i.e., resource exhaustion attack, in Ethereum.