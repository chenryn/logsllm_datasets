`kubectl exec`命令的语法与 Docker 中的`exec`命令非常相似，只有一点不同，正如您从[第 7 章](07.html)、*对 Kubernetes* 的介绍中所记得的，一个 Pod 可以运行多个容器。在这种情况下，我们可以使用`--container`或`-c`命令开关在`kubectl exec`命令中指定一个容器。例如，假设我们有一个名为`rest-example-3660361385-gkzb8`的 Pod。这个 Pod 有两个名为服务和数据库的容器。以下命令将打开服务容器的外壳:
```
$ kubectl exec -it rest-example-3660361385-gkzb8 --container service -- /bin/bash 
```
能够查看日志并与容器进行交互，这为您提供了很大的灵活性，可以查明您在运行 Pods 时可能遇到的潜在问题。让我们总结一下与查看日志和与表格中的 Pods 交互相关的`kubectl`命令:
| **示例命令** | **表示** |
| `kubectl logs myPod` | 转储`pod`日志(`stdout`) |
| `kubectl logs myPod -c myContainer` | 倾倒`pod`容器原木(`stdout`，多容器箱) |
| `kubectl logs -f myPod` | 流`pod`日志(`stdout`) |
| `kubectl logs -f myPod -c myContainer` | 流`pod`容器原木(`stdout`，多容器箱) |
| `kubectl run -i --tty busybox --image=busybox -- sh` | `run pod`作为交互外壳 |
| `kubectl attach myPod -i` | 连接到运行容器 |
| `kubectl port-forward myPod 8080:8090` | 将 Pod 的端口`8080`转发到本地机器上的`8090` |
| `kubectl exec myPod -- ls /` | 现有`pod`中的`run`命令(一个容器箱) |
| `kubectl exec myPod -c myContainer -- ls /` | 现有`pod`中的`run`命令(多容器情况) |
| `kubectl top pod POD_NAME --containers` | 显示给定`pod`及其容器的度量 |
正如你已经知道的，豆荚和容器是易碎的。它们可能会坠毁或被杀死。您可以使用`kubectl`日志从带有`--previous`标志的容器的先前实例中检索日志，以防容器崩溃。假设我们的服务运行良好，但是由于[第 7 章](07.html)、*介绍的原因，比如更高的负载，比如你决定增加运行的容器数量。Kubernetes 为您提供了增加每个服务中运行的 Pod 实例数量的可能性。这可以手动或自动完成。让我们首先关注手动缩放。*
# 手动缩放
创建部署后，还会自动创建新的复制集。从[第 7 章](07.html)、*库本内斯*的介绍中你会记得，一个复制集确保指定数量的豆荚克隆体(称为`replicas`)在任何给定的时间运行。如果有太多，其中一些将被关闭。如果需要更多，例如，如果他们中的一些人因错误或崩溃而死亡，将创建新的 Pods。请注意，如果您尝试直接缩放复制器集，那么它将(在很短的时间内)拥有您想要的 Pods 数量的新计数，例如三个。但是，如果部署控制器看到您已经将副本集修改为三个，因为它知道它应该是一个(在部署清单中定义)，它会将其重置回一个。通过手动修改为您创建的副本集，您在某种程度上是在对抗系统控制器。
You need to scale your deployment instead of the replica set directly.
当然，我们的 Java `rest-example`服务将其数据保存在内存中，所以它不是无状态的，所以它可能不是扩展的最佳示例；如果另一个实例被激活，它将拥有自己的数据。然而，它是一个 Kubernetes 服务，所以我们无论如何都可以用它来演示扩展。要将我们的`rest-example`部署从一个吊舱扩展到三个吊舱，请执行以下`kubectl scale`命令:
```
$ kubectl scale deployment rest-example --replicas=3 
```
过了一会儿，为了检查，执行以下命令，您将看到现在部署中有三个 Pods 正在运行:
```
$ kubectl get deployments
$ kubectl get pods      
```
在下表中，您可以看到更多与手动缩放相关的`kubectl`命令示例:
| **示例命令** | **表示** |
| `kubectl scale deployment rest-example --replicas=3` | 将名为`rest-example`的部署扩展到`3`单元 |
| `kubectl scale --replicas=3 -f deployment.yaml` | 将`deployment.yaml`文件中指定的资源缩放至`3` |
| `kubectl scale deployment rest-example --current-replicas=2 --replicas=3` | 如果名为`rest-example`的部署当前大小为`2`，将其扩展至`3`吊舱 |
| `kubectl scale --replicas=5 deployment/foo deployment/bar` | 一次扩展多个部署 |
例如，如果服务负载增加，Kubernetes 可以自动进行缩放。
# 自动缩放
使用水平 Pod 自动扩展，Kubernetes 会根据观察到的 CPU 利用率自动扩展部署或复制集中的 Pod 数量。Kubernetes 控制器定期调整部署中 Pod `replicas`的数量，以使观察到的平均 CPU 利用率与您指定的目标相匹配。
水平自动缩放器只是 Kubernetes 中的另一种资源，因此我们可以使用`kubectl`命令将其创建为任何其他资源:
*   `kubectl get hpa`:列出自动标尺
*   `kubectl describe hpa`:获取详细描述
*   `kubectl delete hpa`:删除自动标尺
此外，还有一个特殊的`kubectl autoscale `命令，用于轻松创建水平吊舱自动缩放器。例如:
```
$ kubectl autoscale deployment rest-example --cpu-percent=50 --min=1 --max=10  
```
前面的命令将为我们的`rest-example`部署创建一个自动缩放器，将目标 CPU 利用率设置为`50` %以及`1`和`10`之间的`replicas`数量。
所有集群事件都将被注册，包括那些来自手动或自动缩放的事件。当监控集群上正在执行的操作时，查看集群事件会很有帮助。
# 查看集群事件
要查看集群事件，请键入以下命令:
```
$ kubectl get events  
```
它将呈现一个巨大的表，其中记录了集群上的所有事件:
![](img/f114bdbe-f2ea-4f8f-8c00-e99a6896558d.png)
该表将包括节点状态的变化、拉取 Docker 映像、启动和停止容器的事件等。可以非常方便地看到整个集群的图片。
# 使用 Kubernetes 仪表板
Kubernetes 仪表板是一个通用的、基于 web 的 Kubernetes 集群用户界面。它允许用户管理集群中运行的应用并对其进行故障排除，以及管理集群本身。我们还可以编辑部署、服务或 Pods 的清单文件。例如，Kubernetes 将立即接受这些更改，因此它为我们提供了缩小或扩大部署的能力。
如果您使用`minikube dashboard`命令打开仪表板，它将使用仪表板网址打开您的默认浏览器。从这里，您可以列出集群上的所有资源，例如部署、服务、Pods 等。我们的仪表盘不再是空的，如下图截图所示；我们有一个名为`rest-example`的部署:
![](img/f2bfe21d-a06f-4d0f-bc0f-bd728942cacf.png)
如果您点击它的名称，您将进入部署详细信息页面，该页面将显示您可以通过`kubectl describe deployment`命令获得的相同信息，并具有良好的用户界面:
![](img/cfebf399-2ea1-4811-ae65-8750e0c0c8a5.png)
仪表板不仅是只读工具。每个资源都有一个方便的菜单，您可以使用它来删除或编辑它的清单:
![](img/af9be4b8-f4a0-470e-ac7b-ab6c03577a3e.png)
如果您选择查看/编辑 YAML 菜单选项，您将能够使用方便的编辑器编辑清单:
![](img/7f1044c5-e8ae-4122-aed7-703f3d8624e2.png)
请注意，如果您更改一个值，例如`replicas`的数量，并单击更新，更改将被发送到 Kubernetes 并执行。例如，通过这种方式，您还可以扩展您的部署。
由于部署已自动创建了一个复制集，复制集也将在仪表板中可见:
![](img/ceaaa045-fe09-4a7a-ab41-0638f229e129.png)
这同样适用于服务。如果您浏览到“服务”菜单，它将显示在群集上创建的所有服务的列表:
![](img/56a3cd90-a5de-484a-b802-a3edcd35f0f2.png)
单击服务名称将带您进入详细信息页面:
![](img/fca3012f-39e7-4ca2-a80e-c104a27f6f5d.png)
在详细信息屏幕上，列出了所有重要信息。这包括标签选择器，它将用于查找 Pods、端口类型、集群 IP、内部端点，当然还有服务内部运行的 Pods 列表。通过单击 Pod 的名称，您可以看到正在运行的 Pod 的详细信息，包括其日志输出，如下图所示:
![](img/a3bfb034-8f7b-469b-b27f-6bcd07714dc7.png)
仪表板是一个非常方便的工具，可以与您现有的部署、服务和 Pods 交互。但还有更多。如果您单击仪表板工具栏右上角的“创建”按钮，您将看到“部署容器化应用”屏幕。从这里，您实际上可以创建一个新部署:
![](img/65611164-6c7a-4fd1-9755-4a2d9c6024b6.png)
您有机会使用`.yaml`文件，就像我们之前使用命令行一样，但是您也可以手动指定部署的细节，提供要使用的应用名称和容器映像，并可选地为部署创建服务。很方便，不是吗？仪表板只是可用的 Minikube 附加组件之一。让我们看看我们还有什么可以利用的。
# 迷你库布阿登
Minikube 自带几个插件，比如 Kubernetes 仪表盘、Kubernetes DNS 等等。我们可以通过执行以下命令列出可用的插件:
```
$ minikube addons list
```
前一个命令的输出将列出可用的插件及其当前状态，例如:
![](img/326d29f0-2eee-4d71-96de-6e096c16bc86.png)
要启用或禁用插件，我们分别使用`minikube addons disable`或`minikube addons enable`，例如:
```
$ minikube addons disable dashboard
$ minikube addons enable heapster  
```
如果启用了插件，我们可以通过执行`addon open`命令来打开相应的网页用户界面，例如:
```
$ minikube addons open heapster  
```
# 清理
如果您已经完成部署和服务，或者想从头开始，您可以通过删除部署或服务来进行一些群集清理:
```
$ kubectl delete deployment rest-example
$ kubectl delete service rest-example      
```
此代码也可以组合在一个命令中，例如:
```
$ kubectl delete service,deployment rest-example
```
`kubectl delete`支持标签`selectors`和命名空间。让我们在表格中查看该命令的其他一些示例:
| **示例命令** | **表示** |
| `kubectl delete pod,service baz foo` | 删除名称相同的豆荚和服务`baz`和`foo` |
| `kubectl delete pods,services -l name=myLabel` | 删除带有标签`name=myLabel`的豆荚和服务 |
| `kubectl -n my-ns delete po,svc --all` | 删除命名空间`my-ns`中的所有 pods 和服务 |
要停止`minikube`集群，只需发出:
```
$ minikube stop 
```
如果您想删除当前的`minikube`集群，您可以发出以下命令来完成:
```
$ minikube delete 
```
# 摘要
如您所见，Minikube 是试用 Kubernetes 并将其用于本地开发的简单方法。运行本地集群并不像开始时看起来那么可怕。最重要的是，本地`minikube`集群是有效的 Kubernetes 集群。如果您通过在本地使用 Kubernetes 来了解它，您将能够在真正的云中部署您的应用，而没有任何问题。让我们总结一下在 Kubernetes 集群上运行我们的 Java 应用需要执行的步骤。
首先，我们需要为微服务编写一些代码。这可以基于您想要的任何东西，它可以是运行在 Tomcat、JBoss 或 Spring Bootstrap 上的微服务。没关系，您只需选择您希望软件运行的技术:
*   接下来，将代码放入 Docker 映像。你可以通过创建一个 Dockerfile 手工完成，或者你可以使用 Docker Maven 插件来自动完成
*   创建 Kubernetes 元数据，如部署清单和服务清单
*   通过展开部署和创建服务来应用元数据
*   根据您的需求扩展您的应用
*   从命令行或仪表板管理您的集群
在[第 9 章](09.html)、*与 Kubernetes 斯 API* 合作中，我们将了解一下 Kubernetes 斯 API。这是一种与 Kubernetes 集群交互的好方法。因为 API，可能性几乎是无止境的，你可以创建自己的开发流程，比如使用 Jenkins 的持续交付。有了这个应用编程接口，您不仅仅局限于现有的工具来将您的软件部署到 Kubernetes。事情可以变得更有趣。