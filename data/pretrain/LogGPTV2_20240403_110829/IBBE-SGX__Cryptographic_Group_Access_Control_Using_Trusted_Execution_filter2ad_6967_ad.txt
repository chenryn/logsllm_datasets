compared to HE. Figure 7a displays the computational cost for
operations of creating a group, removing a user from a group,
and the storage footprint of the group metadata. One can notice
that all three operations are better than their HE counterparts
by approximately a constant factor. The computational cost of
create and remove operations of IBBE-SGX is on average 1.2
orders of magnitude faster than HE. Compared to the original
IBBE scheme, IBBE-SGX is better by 2.4 orders of magnitude
for groups of 1,000 users and 3.9 orders of magnitude for one
million users (see Figures 2a and 7a). Storage-wise, IBBE-
SGX is up to 6 orders of magnitude better than HE. Moreover,
Figure 7b zooms into the performances of IBBE-SGX create
and remove operations, and the storage footprint respectively,
when considering different sizes of partitions. One can notice
that the remove operation takes half the time than the create
operation. Considering the storage footprint, the degradation
brought by using smaller partition sizes is fairly small (e.g.,
432 vs. 128 bytes for groups of 1 million members).
The Cumulative Density Function (CDF) of latencies for
adding a user to a group is shown in Figure 8a. The operation
has a constant time complexity for both IBBE-SGX and HE.
As the add operation of IBBE-SGX can take two paths, either
adding a user to an existing partition or creating a new one if
all the others are full, the plot points the difference between the
two at the CDF value of 0.8. Moreover, the HE add operation
is generally twice as fast as IBBE-SGX.
(a) Comparing IBBE-SGX and HE
(b) Partitioning Evaluation
Fig. 7. Evaluation of create and remove operations and storage footprint, by
varying the partition size for IBBE-SGX (1000, 2000, 3000 and 4000).
(b) Decrypt performance.
(a) Add user to group performance.
Fig. 8. Performance of the adding a user to a group and decrypt operations.
The client decryption performance is shown in Figure 8b.
The decryption operation, like the add operation, is faster
within the HE approach than IBBE-SGX. The difference of
2 orders of magnitude is caused by the quadratic cost of
the IBBE-SGX decryption operation. We argue that a slower
decryption time for IBBE-SGX can be acceptable in practice.
First, the decrypt performance is overshadowed by the slow
cloud response time necessary for clients to update the group
metadata that always precedes a decryption operation. Second,
the cost of decryption remains bounded to a partition size,
independent on the number of users in the group.
B. Macrobenchmarks
1) Real Data Set: To capture the performance of the IBBE-
SGX scheme within a realistic scenario, we decide to replay
an access control trace based on the membership changes in
the version control repository of the Linux Kernel [31].
8
1k2k3k4kpartition size0123456setup latency (s)1k2k3k4kpartition size600650700750800850900key extract speed (op/s)0.010.115create (s)0.010.115remove (s)1k10k100k1Mgroup size1 KB1 MB.2 GBfootprint (MB)0.00.51.01.52.02.53.03.5create (s)0.00.51.01.52.02.53.03.5remove (s)100k500k1Mgroup size0100200300400500footprint (B)1k2k3k4kpartition size0.0010.12latency (s)Fig. 9. Measuring total administrator replay time and average user decryption
time per different partition sizes using the Linux Kernel ACL data set.
We derive the membership trace by considering the ﬁrst
commit of a user as the add to group operation. The remove
from group operation is represented by the user’s last commit.
The generated trace contains 43,468 membership operations
that spawn across a period of 10 years, during which the
group size never exceeds 2803 users. We replay the generated
trace sequentially for both HE and IBBE-SGX by varying
the partition size. We also capture the total time spent by
the administrator to replay the trace and the average user
decryption time.
Figure 9 displays the results. Considering the administrator
replay time, IBBE-SGX performs better when the partition
size converges to the number of users in the group. Using
a small partition size, e.g. 250, is almost twice as inefﬁcient
when compared to a partition of 1000 users. Compared to
HE replay time, IBBE-SGX is generally 1 order of magnitude
faster. On the other hand, decryption time for IBBE-SGX
grows quadratically per partition size while in HE it remains
constant. This evidentiates IBBE-SGX’s trade-off caused by
different partition sizes on the performances of membership
changes and user decryption time. A prior estimation of the
maximal group size (2803 in our case) suggests the choice of
a small partition for practical use (such as 750), so that it can
manifest satisfactory outcomes both in terms of admininistra-
tor performance and user decryption time.
2) Synthetic Data Set: In order to observe the impact of
different workloads of group membership access control, we
generate a set of synthetic traces that capture incremental
percentages of revocation rates. Concretely, we generate 11
different traces consisting of 10,000 membership operations.
The composition of the traces is randomly generated by
considering different revocation rates. We replay the 11 traces
through our system and measure the end-to-end time required
by the administrator to perform all membership changes. We
then repeat the process by considering different partition sizes.
The results are shown in Figure 10. We observe a linear
increase in the total time when incrementally increasing the
revocation ratio up to 50% in workloads dominated by add
operations. After this point,
time stabilizes and
ﬁnally decreases when the revocation ratio is more than 90%.
This behavior is caused by the merging of sparse partitions,
which happens more frequently with the increasing rate of
revocations. Having fewer partitions, IBBE-SGX’s operations
become faster, therefore decreasing the total time.
the total
9
Fig. 10. Measuring total replay time of IBBE-SGX scheme per different par-
tition sizes (1000, 1500, 2000) for synthetically generated datasets considering
increasing revocation rates.
VII. RELATED WORK
We structure the presentation of the related work on three
axes detailing ﬁrst research work on cryptographic schemes
used for access control. Then we go into research work of
systems that cryptographically protect from untrusted storages.
Last, we detail related work regarding Intel SGX.
A. Cryptographic Schemes for Access Control
HE making use of a PKI and IBE has been utilized within
a role based access control and proved unsuitable in the cloud
storage context [3].
ABE [32] is a cryptographic construction that allows a ﬁne-
grained access control by matching attributes labeled to both
users and content. Depending on the labeled location, one
can distinguish between key-policy ABE [6] and ciphertext-
policy ABE [33]. However, when employed for simple access
control policies, such as our group sharing context, ABE has
substantially greater costs than identity-based encryption [3].
Hierarchical Identity Based Encryption (HIBE) [34] and
Functional Encryption (FE)
[35] are two cryptographic
schemes offering functionalities for access control that, sim-
ilarly to IBE and ABE, rely on pairing-based cryptography.
HIBE is speciﬁcally designed to target hierarchical organiza-
tions where a notion of descendants exists. FE is a powerful
construction that can arbitrarily encapsulate programs as ac-
cess control, but is unsuitable for practical use [36].
the data owner needs to generate and transmit
Proxy re-encryption [37] is a cryptographic system in
which the owner of some encrypted data can delegate the
re-encryption of her data to a proxy, with the intent of
sharing it with another user. For the re-encryption to take
place,
to
the proxy a re-encryption key. The scheme proves to be
beneﬁcial for the cloud environment, as the re-encryption and
the storage of the data can happen on the same premises. A
number of approaches have shown how proxy re-encryption
can be combined with identity-based encryption [8], or with
attribute-based encryption [38], [39]. Differently than proxy
re-encryption, our construction does not require users to send
transformational keys to the administrators. Therefore, even
if the administrators would be hosted on the cloud storage
premises, they do not act as proxies.
The related research area of multicast communication secu-
rity [22], [40] deﬁnes efﬁcient schemes focusing exclusively
on revocation aspects. Logical Key Hierarchy [41] is a re-
keying scheme in which communications for revocation oper-
ations are minimized to logarithmic sizes. Other schemes [26],
[42] exploit a secret sharing mechanism, considering that no
coalition of revoked users larger than a threshold number is
trying to decrypt the transmission.
B. Cryptographically Protected Untrusted Storages
The shared cloud-backed ﬁle system (SCFS) designed by
Bessani et al. [2] offers conﬁdentiality guarantees to users by
encrypting data stored by the clouds on the client-side. Even
though the encryption keys are distributed among multiple
cloud storages through secret sharing schemes,
the access
control is not cryptographically protected, but stored and en-
forced from a trusted coordination service. We argue that this
approach is not secure enough because it does not protect from
curious administrators. The global access control structure can
be compromised if an attacker gain access to this service.
CloudProof [43] is a secure cloud storage system offering
guarantees such as conﬁdentiality,
integrity, freshness and
write-serializability. To enforce access control, CloudProof
makes use of broadcast encryption to protect the keys that are
used for encrypting and signing the actual data. Unlike our
construction, CloudProof does not offer the zero knowledge
guarantee for membership operations. Moreover, CloudProof
does not discuss how the authentic identity of the users in
the broadcast set is established (e.g. during a group creation
operation). Hypothetically, a PKI could be employed for this
task, thus requiring a trusted entity in the system. However
accessing regularly the PKI would add a signiﬁcant overhead.
In order to mitigate these issues, our solution relies on the
identity-based version of broadcast encryption.
REED [44] considers the problem of rekeying in the context
of honest-but-curious deduplicated storages. To provide access
control, REED relies on ABE. However, as noted by the
authors in their evaluation, the performance overhead of the
rekeying operation drastically increase to several seconds
when varying the total number of users up to 500. Considering
group sizes of thousands of users (as we do for groups up to
one million), ABE becomes impracticable for access control
at large scale.
Sieve [45] platform allows users to store their data encrypted
in the cloud and then discretionary delegate access to the
data to consuming web services. Sieve makes use of attribute
based encryption for access control policies and key homomor-
phism for providing a zero knowledge guarantee against the
storage provider. This access control construction has many
similarities with ours, however we differentiate exploiting
the zero knowledge guarantee for lowering the computational
complexity of the access control scheme, IBBE in our case.
C. SGX
SGX has been extensively used in shielding applications and
infrastructure platform services like ours that handle sensitive
data. Iron [36] is the closest to our proposal in the sense
that it takes advantage of SGX to build a practical encryption
scheme for an unpractical strategy thus far. Like us, they use
an enclave that holds a master secret as root for later key
derivations. They target, however, functional encryption. The
enclave generates a key that is associated to a function, so
that the computation can be performed without revealing the
data on top of which it is applied. The results of applying
such function, though, are presented in clear. The authors show
that this approach outperforms by orders of magnitude other
cryptographic schemes that also offer functional encryption.
Other systems relate to ours with regards to the reduction
of overhead for an otherwise costlier design. Hybster [46], for
instance, proposes a hybrid state-machine replication protocol.
Hybrid because it does tolerate arbitrary faults but yet
it
assumes that some nodes may crash. It relies on SGX features
such as isolation, replay protection and trusted counters to
achieve a parallelization scheme that makes it a viable solu-
tion for demanding applications, reaching higher numbers of
operations per second in comparison to traditional approaches.
At the level of infrastructure services, SCBR [47] proposes
a content-based routing solution where the ﬁltering step is put
inside enclaves, thus allowing the matching of publications
against stored subscriptions in a safe manner. It is shown to
be one order of magnitude faster than an approach with com-
parable security guarantees. The gain comes from the plaintext
operations done inside the enclave against the counterpart that
needs to perform computations over encrypted data.
VIII. CONCLUSION
We have introduced IBBE-SGX, a new cryptographic access
control extension that is built upon Identity-Based Broadcast-
ing Encryption (IBBE) and exploits Intel Software Guard Ex-
tensions (SGX) to derive cuts in the computational complexity
of IBBE. We propose a group partitioning mechanism such
that the computational cost of membership update is bound
to a ﬁxed constant partition size rather than the size of the
whole group. We have implemented and evaluated our new
access control extension in a single administrator with multiple
users set-up. We have conducted both real and synthetic
benchmarks, demonstrating that IBBE-SGX is efﬁcient both
in terms of computation and storage even when processing
large and dynamic workloads of membership operations. Our
innovative construction performs membership changes 1.2
orders of magnitude faster than the traditional approach of
Hybrid Encryption (HE), producing group metadata that are 6
orders of magnitude smaller than HE, while at the same time
offering zero knowledge guarantees.
There are a number of interesting avenues of future work.
The ﬁrst is to dynamically adapt the partition sizes based
on the undergoing workload. This would optimize the speed
of administrator- and user-performed operations. A second
challenge would be to adapt our construction to a distributed
set of administrators that would perform membership changes
concurrently on the same group or partition, by using lock-free
techniques. Third, in a setup with multiple administrators, one
can envision certifying blocks of membership operations logs
through blockchain-like technologies.
10
ACKNOWLEDGMENT
The research leading to these results has received funding
from the French Directorate General of Armaments (DGA) un-
der contract RAPID-172906010. The work was also supported
by European Commission, Information and Communication
Technologies, H2020-ICT-2015 under grant agreement number
690111 (SecureCloud project) and partially supported by the
CHIST-ERA ”DIONASYS” project.
REFERENCES
[1] H. Seybert and P. Reinecke, “Internet and cloud services – statistics
on the use by individuals,” vol. 16, 2014.