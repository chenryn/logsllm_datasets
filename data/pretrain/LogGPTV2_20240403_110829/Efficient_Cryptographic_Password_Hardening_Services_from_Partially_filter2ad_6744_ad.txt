validation protocol executions. To simulate these, D honestly
simulates the server as speciﬁed in the protocol, except that
it uses its oracle to compute the values s.
Eventually, A outputs ((t0, m0), (t1, m1), T ). If t0 = t1, the
distinguisher outputs a random bit b ←${0, 1}. Otherwise, it
queries t0 and t1 to its function oracle, receiving responses s0
and s1 respectively. If s0 = s1, then D outputs 1, otherwise
0.
We now analyze the advantage of D. Consider ﬁrst the
case where the function oracle is the PRF F . In this case, D
performs a perfect simulation of the binding challenger for
A. Hence, we get
(cid:104)DFk(·)(1n) = 1
+ Pr[t0 (cid:54)= t1 ] · Pr(cid:2)BindingΠ,A(1n) = 1(cid:12)(cid:12) t0 (cid:54)= t1
= Pr[t0 = t1 ] · 1
2
(cid:3) .
(cid:105)
Pr
Now consider the case where the function oracle is a truly
random function H. Since the adversary only makes a poly-
nomial number of queries, the probability that it was able
to ﬁnd a collision in a truly random function is negligible.
Hence, we get
Pr
We thus get
= Pr[t0 = t1 ] · 1
2
(cid:104)DH(·)(1n) = 1
(cid:105)
(cid:12)(cid:12)(cid:12)Pr
(cid:104)AFk(·)(1n) = 1
(cid:104)AH(·)(1n) = 1
(cid:12)(cid:12)(cid:12)(cid:12) Pr[t0 (cid:54)= t1 ] · Pr(cid:2)BindingΠ,A(1n) = 1(cid:12)(cid:12) t0 (cid:54)= t1
=⇒ Pr[t0 (cid:54)= t1 ] · Pr(cid:2)BindingΠ,A(1n) = 1(cid:12)(cid:12) t0 (cid:54)= t1
− Pr[t0 (cid:54)= t1 ] · negl(n)
(cid:105) − Pr
=⇒
(cid:105)(cid:12)(cid:12)(cid:12) ≤ negl(n)
(cid:12)(cid:12)(cid:12)(cid:12) ≤ negl(n)
(cid:3)
(cid:3) ≤ negl(n)
(2)
+ Pr[t0 (cid:54)= t1 ] · negl(n) .
Now consider the case where t0 = t1. Let a0, a1 be elements
of Zq such that T ab
, i.e., let ab be the discrete
logarithm of T3/mcsk
relative to base T1. Observe, that
the second zero knowledge proof in the validation protocol
proves that gybab = gybsk Fk(tb) for b ∈ {0, 1}. Therefore,
1 = T3/mcsk
b
b
by the perfect soundness of the NIZK, we have that ab =
sk Fk(tb), however, since t0 = t1, this implies a0 = a1 and –
by deﬁnition of ab – it thus follows that m0 = mb.
(t0, m0) (cid:54)= (t1, m1). Thus we can conclude that
if A outputs t0 = t1,
it never holds that
Therefore,
(cid:3) = 0
(3)
Pr[t0 = t1 ] · Pr(cid:2)BindingΠ,A(1n) = 1(cid:12)(cid:12) t0 = t1
Pr(cid:2)BindingΠ,A(1n) = 1(cid:3) ≤ negl(n)
and ﬁnally combining Equations (1) to (3), we get that
and Construction 1 is thus binding.
Obliviousness.
Let A be an adversary, such that
Π,A(1n) − Obliv1
(cid:12)(cid:12)Obliv0
Π,A(1n)(cid:12)(cid:12) = (n).
We will bound  using a series of games.
Game 1. The ﬁrst game is Obliv0
Π,A(1n).
Game 2. The second game behaves exactly like the ﬁrst
game, except that the values s are no longer chosen via a
PRF and are instead computed using a lazily sampled truly
random function.
Game 3. The third game behaves exactly like the second
game, except that all zero-knowledge proofs are now simu-
lated.
Game 4. The fourth game behaves exactly like the third
game, except that b = 1.
Game 5. The ﬁfth game behaves exactly like the fourth game,
except that zero-knowledge proofs are once again computed
honestly.
Game 6. The sixth game is Obliv1
Π,A(1n).
We will now bound the diﬀerence between each pair of
consecutive games.
Let |Pr[Game1(1n) = 1] − Pr[Game2(1n) = 1]| = δ1(n).
Consider the distinguisher D against the pseudorandomness
of F as follows: The distinguisher D gets as input the se-
curity parameter and access to an oracle that is either the
PRF with a uniformly chosen key k or a uniformly random
function. It then samples random elements z, x ←$ Zq and
invokes A1 on input (csk = z, pk = gx). A1 may now invoke
arbitrary enrollment and validation protocol executions. To
simulate these, D honestly simulates the server as speciﬁed
in the protocol, except that it uses its oracle to compute the
values s. Once A1 outputs (t, m0, m1, st), D once again hon-
estly computes T ←$(cid:104)C(csk , pk , t, mb),S(sk )(cid:105)enrl computing
s using its oracle. D then invokes A2 on st and T , simulating
the enrollment protocol executions as before. Eventually, A2
outputs a bit b(cid:48) and D outputs the same bit.
It should be clear, that if the function oracle is the PRF F ,
then D perfectly simulates Game1, while with a truly random
oracle, D provides a perfect simulation of Game2. Therefore,
by assumption that F is a pseudorandom function, we get
that
(cid:104)DFk(·)(1n) = 1
(cid:105) − Pr
(cid:104)DH(·)(1n) = 1
δ1(n) =
(cid:12)(cid:12)(cid:12)Pr
Let |Pr[Game2(1n) = 1] − Pr[Game3(1n) = 1]| = δ2(n).
Consider the reduction B against the zero-knowledge prop-
erty of the NIZK. Let Sim = (Sim0, Sim1) be the simulator
(cid:105)(cid:12)(cid:12)(cid:12) ≤ negl(n) .
(cid:104)
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12) Pr
(cid:104)
(cid:105)
(cid:105) (cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12) ≤ negl(n) .
of the non-interactive zero-knowledge proof system. The
reduction B gets as input the common reference string and
access to an oracle that is either the Prove algorithm, or the
simulator Sim(cid:48). It then samples random elements z, x ←$ Zq
and invokes A1 on input (csk = z, pk = gx). A1 may now
invoke arbitrary enrollment and validation protocol execu-
tions. To simulate these, B honestly simulates the server as
speciﬁed in the protocol, except that it computes s using
a lazily sampled truly random function and computes all
proofs π, π1 and π2 by querying statement and witness to the
oracle. Once, A1 outputs (t, m0, m1, st), B once again hon-
estly computes T ←$(cid:104)C(csk , pk , t, mb),S(sk )(cid:105)enrl computing
s using its lazily sampled truly random function and com-
puting π by querying its oracle. B then invokes A2 on st and
T , simulating the enrollment protocol executions as before.
Eventually A2 outputs a bit b(cid:48) and B outputs the same bit.
It should be clear, that if the oracle is the Prove algorithm,
then B perfectly simulates Game2. And if the oracle is in fact
the simulator, then B provides a perfect simulation of Game3.
Therefore, by assumption that the NIZK is zero knowledge,
we get that
δ2(n) =
σ ← ZKSetup(1n) : BProve(σ,·,·)(σ) = 1
− Pr
(σ, τ ) ← Sim0(1n) : BSim(cid:48)(σ,τ,·,·)(σ) = 1
Let |Pr[Game3(1n) = 1] − Pr[Game4(1n) = 1]| = δ3(n).
Consider the reduction D against the hardness of DDH. The
reduction D gets as input a tuple (G, g, A, B, C) that is ei-
ther a DDH tuple, or a random tuple. It draws a random
element z ←$ Zq and invokes A1 on input (csk = z, pk = B).
A1 may now invoke arbitrary enrollment and validation
protocol executions. In the protocol executions D follows
the description of Game3, except that c is computed as
(c1, c2, c3) := gy, gys, Bys·v. Once, A1 outputs (t, m0, m1, st),
D samples a bit b ←${0, 1} at random, computes the s for t
according to its lazily sampled random function, and com-
putes T = (T1, T2, T3) := (As−1
). D then invokes
A2 on st and T , simulating the enrollment protocol execu-
tions as before. Eventually A2 outputs a bit b(cid:48) and D outputs
1, if b = b(cid:48) and outputs a random bit otherwise.
Now consider the two cases. If (A, B, C) is a DDH tuple,
then D perfectly simulates Game3 if b = 0 and Game4 if b = 1.
It is easy to see that answers to the protocol invocations
are well formed. But also the challenge is well formed. To
see this, consider that we have (A, B, C) = (ga, gb, gab) and
therefore (gas−1
b ) is a well-formed enrollment
record for y = as−1, which is a uniform random element.
Therefore, Pra,b
(cid:2)D(G, g, ga, gb, gab) = 1(cid:3) = 1
, ga, gab · mcsk
, A, C · mcsk
b
2 + δ3.
Now consider the other case. If (A, B, C) is a random tuple,
then the challenge enrollment record contains no information
about the bit b, since mb is blinded by a uniformly distributed
element C. Therefore, Pra,b,c
2 ,
and thus by the DDH assumption in G,
(cid:2)D(G, g, ga, gb, gc) = 1(cid:3) = 1
(cid:2)D(G, g, ga, gb, gc) = 1(cid:3) (cid:12)(cid:12)(cid:12)(cid:12) ≤ negl(n) .
(cid:2)D(G, g, ga, gb, gab) = 1(cid:3)
(cid:12)(cid:12)(cid:12)(cid:12) Pra,b
− Pra,b,c
δ3(n) =
The ﬁfth game simply reverts the changes introduced in
game three and an almost identical reduction lets us bound
δ4 by the assumption that the NIZK is zero knowledge. Sim-
ilarly, it is easy to see that the sixth game simply reverts
the changes introduced in game two and an almost identical
reduction lets us bound δ5 by the assumption that F is a
pseudorandom function. Finally, we conclude that
(n) ≤ 5(cid:88)
δi(n) ≤ negl(n) ,
and Construction 1 is thus oblivious.
i=1
Secure Key Rotation.
We defer the proof of secure key rotation to the full version
of this paper for brevity. Intuitively, the proof follows from
the fact that each key rotation unconditionally hides the
previous key material unless the initial client state is known.
4.4 Password Authentication Using Our Con-
struction
In this section, we show how to build a password authenti-
cation system that enjoys all functional properties described
in Section 2.
Setup. The client and the PO-COM-Service run the setup
of the PO-COM protocol meaning that the client receives a
public key and unique client secret of the PO-COM protocol
and can now make enrollment and validation queries to the
PO-COM-Service.
Enrollment. The user provides her password and user-
name to the client. The client sets t = username and m =
password and makes an enrollment query for (t, m), storing
the resulting enrollment record T alongside t.
Password verification. If a user contacts the client pro-
viding a tentative password’ for a username, the client sets
(cid:48) and performs a
again t = username and m = password
validation query for the enrollment record stored for t and
(cid:48) was the correct
(t, m). If validation is successful, password
password for username.
Key Rotation. To perform key rotation, each client exe-
cutes the key rotation protocol with the server to obtain a
new public key and an updated unique client secret.
Stretching. Orthogonal to the functionality of our con-
struction, one could introduce an additional step of password
stretching on the client side by not enrolling the message
itself, but the result of a key derivation function such as
PBKDF2 [28] or Argon2 [7].
Intuitively this step could
further inhibit oﬄine-brute force attacks.
5. EVALUATION
We have implemented a prototype of our construction
using the Charm framework [1] for cryptographic prototyp-
ing and using NIST curve P-256 as the base group for our
construction. This group choice reﬂects a security level of
approximately 128 bits. The average runtime across 10,000
iteration of all the common group operations on our server
machine is given on the right side of Table 1.
The server is implemented as an HTTPS web service using
the falcon framework in Python and served via a standard
conﬁguration of the nginx web server.
Latency. Latency test were performed with an amazon web
services t2.micro instance on the client side and an amazon
web services c4.2xlarge instance on the server side. The client