-e script
最低限度的缓存输入与输出。
输入流。而 GNU sed 则允许把它们当作单独的文件。
默认情况下，sed将把输入的多个文件名作为一个长的连续的
在脚本指令中使用扩展正则表达式。
禁用GNU sed扩展功能。
符。
该选项指定1指令可以输出的行长度，1指令为输出非打印字
慎用，该选项将直接修改源文件。
从文件中读取脚本指令，对编写自动脚本程序很实用。
允许多个脚本指令被执行。
第3章自动化运维
125
---
## Page 142
本文件中可以包含多行指令，而且也便于修改。
选项-n。
注释行是以#开始的行，如果#后面的字符为n，则屏蔽Sed程序的自动输出功能，等同于命令
用正则表达式确定操作对象（地址）。下面是使用正则表达式定位操作行的示例：
Linux运维之道
126
然而在命令行上输入过长的指令是愚蠢的，
通过以上范例不难发现，我们编写的脚本指令需要指定一个地址来决定操作范围，如果不
2.操作地址匹配范例
>s/static/dhcp/' test.txt
而当你需要执行多个指令时，可以使用以下三种方法：
创建一个sed脚本，内容如下：
另外，我们的操作指令可以写入到脚本文件中，并通过 sed 的-f 选项读取，脚本文件中的
匹配以GATEWAY开始的行，并删除该行：
匹配到包含ONBOOT的行，并在其后添加TYPE=Ethermet：
实际工作中，可能大多数情况你并不确定你要操作对象（地址）的行号，这时更多的会使
>s/yes/no/
[root@centos6~]#sed's/yes/no/;s/static/dhcp/'test.txt#使用分号隔开指令
[root@centos6 ~]# sed -f sed.sh test.txt
1$/d
#This is a test sed command
[root@centos6~]#catsed.sh
[root@centos6 ~]# sed'/^GATEWAy/d' test.txt
[root@centos6~]#sed'/oNBooT/aTYPE=Ethernet'test.txt
以上大多数操作指令都依据行号定位操作对象（地址），如：2a即第二行后追加。
root@centos6~]#sed
[root@centos6~]#sed'3,4d'test.txt
[root@centos6~]#sed
root@centos6~]#
ONBOOT=yes
GATEWAY=192.168.0.254
sed
's/yes/no/g'test.txt
'3iTYPE=Ethernet'test.txt#第三行前追加TYPE=Ethernet
，这时需要使用-f 选项指定 sed 脚本文件，在脚
#对test.txt文件执行sed.sh脚本指令
#脚本内容为匹配到空白行后，删除该行
#删除第3、4行的内容
#将样本文件中的所有yes替换为no
#利用分行
---
## Page 143
新内容。Flags 标记可以是：
删除第二行。Sed 为我们提供了以下这些方式来确定需要操作地址的范围。
表3-9
指定，则默认对文件的所有行进行操作。如：sed'd' test.txt 将删除 test.txt 的所有行，而'2d则仅
3.7.4
n
address 为操作地址，s为替换指令，/patterm/匹配需要替换的内容，/replacement/为替换的
指令格式：
（1）替换指令（s,Substitution）
2．部分指令详解
表3-9给出了常用的 sed脚本指令的说明，下面分别看看每个指令的详细用法。
1.Sed常用指令汇总
addrl,+N
[root@centos6~]#sed'2,8d
addrl,addr2
\cregexpc
/regexp/
S
first~step
number
[root@centos6~]#sed-n'1~2p'
指令
Sed指令与脚本
1~512之间的数字，表示对模式空间中指定模式的第n次出现进行替换。如
一行中有3个A，而只想替换第二个A。
[address]s/pattern/replacement/flags
保存至文件
打印
按字符转换
更改
追加
替换
匹配地址1以及后面的N行内容
匹配从操作地址1到操作地址2的所有行
\c与c之间匹配扩展正则表达式，c字符可以使用任意字符替代
达式为空，匹配最近一次正则表达式的匹配地址，后面会有范例
//中间包含的是正则表达式，通过正则表达式匹配操作地址。如果//中正则表
匹配文件的最后一
指定以first开始，并指定操作步长为step，如1、2指定第一行、第三行、
指定输入文件的唯一行号
功能
test.txt
一行
6
test.txt
指
令
#删除2～8之间的所有行
#打印文件的奇数行
退出
读入文件内容
打印（不显示非打印字符）
打印（显示非打印字符）
插入
删除
功能
自动化运维
127
---
## Page 144
为/body)。
用来定位需要修改的行，source-chars 为需要被修改的字符，dest-chars 为准备替换的字符。
除时是删除整行，而不只是删除匹配的内容（如要删除匹配的内容，可以使用替换）。
导致读取新的输入行（下一行)，而 sed脚本中的命令则从头开始重新执行。需要注意的是，删
配的行一旦被删除，模式空间将变为“空”，自然不会再执行 sed脚本后续的命令。删除命令将
Linux 运维之道
列字符有特殊含义。
128
编写 sed脚本，替换与行匹配相同的内容，即将 body 替换为/body，但仅替换第二个 body
范例1：将样本文件中的第二个替换为。
范例1所使用的样本文件为：
3.Sed脚本指令范例
按字符转换（Transform）的语法格式为：[address]y/source-chars/dest-chars/，其中，[address]
（3）转换指令（y）
删除指令用于删除匹配的行，而且删除命令还会改变 sed 脚本中命令的执行顺序。因为匹
（1）范例1
（2）删除指令（d,delete）
wfile
HellotheWorld!
First Web
[root@centos6 ~]#cat test.txt
replacement 为字符串，用来替换与正则表达式匹配的内容。在replacement 部分，只有下
转义（转义替换部分包含：&、等）。
用正则表达式匹配的内容进行替换。
将模式空间的内容写到文件file中。
打印模式空间的内容。
对模式空间的所有匹配进行全局更改。没有g则只有第一次匹配被替换，如
匹配第n个子串，该子串之前在 patterm 中用\V)指定。
一行中有3个A，则仅替换第一个A。
---
## Page 145
h1,h2......
其中&为前面要替换的内容。上一条指令仅替换第一个h1，h2..，本行指令用来替换第二个
He11o
He11o
He1lo
[root@centos6 ~]# sed-f sed.sh test.txt
执行sed程序的结果如下：
s//\/2
s//\/1
编写sed脚本为：
范例2：给所有第一个的hl,h2等添加；第二个hl,h2添加。
/h[0-9]/{
[root@centos6~]#cat sed.sh
h3Helloh3
h2Helloh2
hlHellohl
[root@centos6 ~]# cat test.txt
范例2所使用的样本文件为：
First Web
（2）范例2
HellotheWorld!
First Web
[root@centos6~]# sed -f sed.sh test.txt
执行sed程序的结果如下：
s//\/body/2
/body/{
[root@centos6 ~]# cat sed.sh
第3章自动化运维
129
---
## Page 146
有许多斜杠，则可以通过在‘之后指定一个不同的字符来更改分隔符。
Linux运维之道
130
BOOTPROTO=static
ONBOOT=yes
范例4~范例7所使用的样本文件为：
（4）范例4~范例7
ONBOOT=yes
执行sed程序的结果如下：
DEVICE=etho
[root@centos6 ~]# cat test.txt
GATEWAY=192.168.0.254
NETMASK=255.255.255.0
BOOTPROTO=static
[root@centos6 ~]# sed -f sed.sh test.txt
p/sv/
[root@centos6~]# cat sed.sh
编写 sed脚本为：
范例3：删除文件中的空白行。
GATEWAY=192.168.0.254
NETMASK=255.255.255.0
IPADDR=192.168.0.1
BOOTPROTO=Static
DEVICE=etho
范例3所使用的样本文件为（注意有空白行）：
（3）范例3
此时是替换分隔符，sed会将/usr/local替换为/usr。
示例：sed-e's:/usr/local:/usr:g'mylist.txt
IPADDR=192.168.0.1
DEVICE=etho
/.*/{
ONBOOT=yes
[root@centos6~]#cat test.txt
---
## Page 147
输出两次。
执行 sed程序的结果如下：
编写 sed脚本为：
范例8：将小写转换为大写
范例8、范例9所使用的样本文件为：
结果如下：
[root@centos6~]#sed-n'1,21’test.txt #在sed脚本文件中，需要#n屏蔽自动输出
范例7：列印（1）显示模式空间中的内容，显示非打印字符，
NETMASK=255.255.255.0
BOOTPROTO=static
ONBOOT=yes
DEVICE=etho
[root@centos6~]#sed-f sed.sh test.txt
[root@centos6 ~]# cat sed.sh
（5）范例8和范例9
范例6：将包含ONBOOT行的内容更改为ONBOOT=yes。
范例5：在匹配NETMASK的行前插入内容IPADDR=192.168.0.1。
范例4：在 static 行后添加一行，内容为IPADDR=192.168.0.1。
/netmask/y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYz/
.*/{
GATEWAY=192.168.0.254
netmask=255.255.255.0
BOOTPROTO=Static
ONBOOT=yes
DEVICE=etho
[root@centos6~]#cattest.txt
ONBOOT=yesS
DEVICE=ethos
[root@centos6~]#sed'/oNBooT/cONBooT=yes'test.txt
[root@centos6~]# sed'/NETMASK/i IPADDR=192.168.0.1'test.txt
[root@centos6~]#sed'/static/a IPADDR=192.168.0.1
GATEWAY=192.168.0.254
NETMASK=255.255.255.0
一般与-n一起使用，否则会
test.txt
第3章自动化运维
---
## Page 148
?
Linux运维之道
3.7.5Sed 高级应用
132
正常的Sed数据处理流程是读取文档的一行至模式空间，然后对该行应用相应的 Sed指令，
[root@centos6~]#sed'2q'test.txt
范例1l：显示name.txt内容的前两行内容后退出sed指令。
PI:EMAIL
PI:EMAIL
Jerry
Jacob
[root@centos6~]# sed -f sed.sh name.txt
执行sed程序的结果如下：
$r mail.txt
编写sed脚本为：
范例10：先读取name.txt文件内容，
PI:EMAIL
范例10、范例11所使用的样本文件为：
（6）范例10和范例11
ONBOOT=yes
[root@centos6~]# sed-n'1,2p'test.txt
打印（p)：作用类似于1（列印)，但不显示非显示字符，
Tom
[root@centos6 ~]#cat sed.sh
PI:EMAIL
PI:EMAIL
[root@centos6~]# cat mail.txt
Jerry
Jacob
DEVICE=eth0
范例9：显示第一、二行的内容。
GATEWAY=192.168.0.254
.*/{
再读取mail.txt文件内容。
一般与-n 配合使用。
---
## Page 149
立刻读取下一行内容，再输出模式空间中的内容，#用来屏蔽自动输出)。
符可以使用n匹配。
行模式空间。模式空间的最初内容与新的输入行之间用换行符分隔。在模式空间中插入的换行
对该文档进行处理，就需要对Sed工作流程进行人工干预。
然而在真实环境中的数据可能不会那么有规律，有时我们会把数据分多行写入文档，如：
当指令完成后输出该行并清空模式空间，依此循环读入文档的下一行数据，直至文档数据结尾。
222
Next范例2所使用的样本文件为：
name:Jerry,mail:PI:EMAIL
Name:Tom,mail:PI:EMAIL
编写 Sed 指令脚本如下（读取样本文件内容至模式空间，当读取的内容与Name匹配时，
Next范例1所使用的样本文件为：
Next（N）指令通过读取新的输入行，并将它追加至模式空间的现有内容之后，来创建多
1.多行操作Next
从上面的模板文件中可以看出，实际上每两行为一条完整的记录，而此时如果需要使用 Sed
111
[root@centos6~]#cat test.txt
[root@centos6~]# sed -f sed.sh test.txt
2
/Name/
[root@centos6 ~]# cat sed.sh
Mail:PI:EMAIL
Name:Jerry
Mail:PI:EMAIL
Name:Tom,
[root@centos6~]#cattest.txt
邮箱：PI:EMAIL
邮箱：
姓名：张三，
3
2
名：
李四，
PI:EMAIL
#运行脚本结果如下
自动化运维
133
---
## Page 150
信息分析如下。
直到第一个插入的\n换行符为止。
取下一行内容，再输出模式空间中的内容，小写的1会打印非打印字符)。
表3-10
Linux运维之道
sed7.*/N'test.txt
134
编写Sed指令脚本（读取样本文件内容至模式空间，当读取的内容与 222匹配时，立刻读
下面通过多条 sed命令对比不同打印方式的差别，输出结果见表3-10，各个 sed 命令输出
综合范例所使用的样本文件为：
Print（P）即多行打印P，