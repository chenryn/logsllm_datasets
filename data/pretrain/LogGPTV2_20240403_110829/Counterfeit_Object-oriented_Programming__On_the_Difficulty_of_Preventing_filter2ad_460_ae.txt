The attack code does not rely on an array-based ML-
ARG-G (recall that in 32-bit ML-ARG-Gs are used instead
of ML-Gs);
it uses a more complex ML-ARG-G
that traverses a linked list of object pointers using a C++
iterator. We discovered this ML-ARG-G in jscript9.dll that is
available in every Internet Explorer process. The ML-ARG-
G consists of four basic blocks and invokes the function
SListBase::Iterator::Next() to get the next object
pointer from a linked list in a loop. The assembly code of the
ML-ARG-G is given in Listing A.1 in the Appendix.
instead,
Figure 9 depicts the layout of the linked list: each item in
the linked list consists of one pointer to the next item and
*next
*obj
obj0
loop
*next
*obj
*next
*obj
obj1
obj2
...
...
Fig. 9: Schematic layout of the linked list of object pointers
the ML-ARG-G traverses in the Internet Explorer 10 32-
bit exploit; dashed arrows are examples for dynamic pointer
rewrites for the implementation of conditional branches.
another pointer to the actual object. This layout allows for
the low-overhead implementation of conditional branches and
loops. For example, to implement the loop in our attack code,
we simply made parts of the linked list circular as shown in
Figure 9. Inside the loop in our attack code, a counter within
a counterfeit object is incremented for each iteration. Once
the counter overﬂows, a W-COND-G rewrites the backward
pointer such that the loop is left and execution proceeds along
another linked list. Our attack code consists of 11 counterfeit
objects, and 11 linked list items of which two point to the same
counterfeit object. Four counterfeit objects overlap and one
counterfeit object overlaps with a linked list item to implement
the conditional rewriting of a next pointer.
This example highlights how powerful linked list-based ML-
Gs/ML-ARG-Gs are in general.
C. Firefox 36.0a1 for Linux x64
To demonstrate the wide applicability of COOP, we also
created an attack code for the GCC-compiled Firefox 36.0a1
for Linux x64. For this proof of concept, we created an
artiﬁcial vulnerable application and loaded Firefox’s main
library libxul.so into the address space. Our COOP attack code
here invokes system("/bin/sh"). It is comprised of nine
counterfeit objects (of which two overlap) corresponding to
ﬁve different vfgadgets. The attack code reads a pointer to
libc.so from the global offset table (GOT) and calculates the
address of system() from that.
VI. DISCUSSION
We now analyze the properties of COOP, discuss different
defense concepts against it, and review our design goals G-1–
G-4 from §III-A. The effectiveness against COOP of several
existing defenses is discussed afterwards in §VII.
A. Preventing COOP
We observe that the characteristics C-1–C-5 of existing
code reuse attack approaches cannot be relied on to defend
against COOP (goal G-1):
in COOP, control ﬂow is only
dispatched to existing and address-taken functions within an
application through existing indirect calls. In addition, COOP
does neither inject new nor alter existing return addresses as
well as other code pointers directly. Instead, only existing vptrs
(i. e., pointers to code pointers) are manipulated or injected.
Technically, depending on the choice of vfgadgets, a COOP
755
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:08:18 UTC from IEEE Xplore.  Restrictions apply. 
attack may however execute a high ratio of indirect branches
and thus exhibit characteristic C-3. But we note that ML-Gs
(which are used in each COOP attack as central dispatchers)
are legitimate C++ virtual functions whose original purpose
is to invoke many (different) virtual functions in a loop. Any
heuristics attempting to detect COOP based on the frequency
of indirect calls will thus inevitably face the problem of high
numbers of false positive detections. Furthermore, similar to
existing attacks against behavioral-based heuristics [16], [26],
it is straightforward to mix-in long “dummy” vfgadget to
decrease the ratio of indirect branches.
As a result, COOP cannot be effectively prevented by (i) CFI
that does not consider C++ semantics or (ii) detection heuris-
tics relying on the frequency of executed indirect branches and
is unaffected by (iii) shadow call stacks that prevent rogue
returns and (iv) the plain protection of code pointers.
On the other hand, a COOP attack can only be mounted
under the preconditions given in §III-B. Accordingly, COOP
is conceptually thwarted by defense techniques that prevent
the hijacking or injection of C++ objects or conceal necessary
information from the attacker, e. g., by applying ASLR and
preventing information leaks.
1) Generic Defense Techniques: We now discuss the ef-
fectiveness of several other possible defensive approaches
against COOP that do not require knowledge of precise C++
semantics and can thus likely be deployed without analyzing
an application’s source code or recompiling it.
a) Restricting the Set of Legitimate API Invocation Sites:
A straightforward approach to tame COOP attacks is to restrict
the set of code locations that may invoke certain sensitive
library functions. For example, by means of binary rewriting
it is possible to ensure that certain WinAPI functions may only
be invoked through constant indirect branches that read from a
module’s IAT (see CCFIR [58]). In the best case, this approach
could effectively prevent the API calling techniques W-2 and
W-3 described in §III-E. However, it is also common for
benign code to invoke repeatedly used or dynamically resolved
WinAPI functions through non-constant indirect branches like
call rsi. Accordingly, in practice, it can be difﬁcult to
precisely identify the set of a module’s legitimate invocation
sites for a given WinAPI function. We also remark that even
without immediate access to WinAPI functions or systems
calls COOP is still potentially dangerous, because, for example,
it could be used to manipulate or leak critical data.
b) Monitoring of the Stack Pointer:
In 64-bit COOP,
the stack pointer is virtually never moved in an irregular
or unusual manner. For the 32-bit thiscall calling convention
though, this can be hard to avoid as long as not only vfgadgets
with the same ﬁxed number of arguments are invoked. This
is a potential weakness that can reveal a COOP attack on
Windows x86 to a C++-unaware defender that closely observes
the stack pointer. However, we note that it may be difﬁcult to
always distinguish this behavior from the benign invocation of
functions in the cdecl calling convention.
c) Fine-grained Code Randomization: COOP is con-
ceptually resilient against the ﬁne-grained randomization of
locations of binary code, e. g., on function, basic block, or
instruction level. This is because in a COOP attack, other than
for example in a ROP attack, knowing the exact locations
of certain instruction sequences is not necessary but rather
only the locations of certain vtables. Moreover, in COOP, the
attacker mostly misuses the actual high-level semantics of ex-
isting code. Most vfgadget types, other than ROP gadgets, are
thus likely to be unaffected by semantics-preserving rewriting
of binary code. Only LOAD-R64-Gs that are used to load x64
argument registers could be broken by such means. However,
the attacker could probably oftentimes fall back to x86-style
ML-ARG-G-based COOP in such a case.
2) C++ Semantics-aware Defense Techniques: We observe
that the control ﬂow and data ﬂow in a COOP attack are
similar to those of benign C++ code (goal G-2). However,
there are certain deviations that can be observed by C++-aware
defenders. We now discuss several corresponding defenses.
a) Veriﬁcation of Vptrs: In basic COOP, vptrs of coun-
terfeit objects point to existing vtables but not necessarily to
their beginning. This allows for the implementation of viable
defenses against COOP when all legitimate vcall sites and
vtables in an application are known and accordingly each
vptr access can be augmented with sanity checks. Such a
defense can be implemented without access to source code by
means of static binary code rewriting as concurrently shown
by Prakash et al. [41]. While such a defense signiﬁcantly
shrinks the available vfgadget space, our exploit code from
§V-A1 demonstrates that COOP-based attacks are still possible,
at least for large C++ target applications.
Ultimately, a defender needs to know the set of allowed
vtables for each vcall site in an application to reliably prevent
malicious COOP control ﬂow (or at least needs to arrive at
an approximation that sufﬁciently shrinks the vfgadget space).
For this, the defender needs (i) to infer the global hierarchy
of C++ classes with virtual functions and (ii) to determine
the C++ class (within that hierarchy) that corresponds to each
vcall site. Both can easily be achieved when source code is
available. Without source code, given only binary code and
possibly debug symbols or RTTI metadata2, the former can
be achieved with reasonable precision while, to the best of
our knowledge, the latter is generally considered to be hard
for larger applications by means of static analysis [20], [21],
[24], [41].
b) Monitoring of Data Flow:
COOP also exhibits a
range of data-ﬂow patterns that can be revealing when C++
semantics are considered. Probably foremost, in basic COOP,
vfgadgtes with varying number of arguments are invoked
from the same vcall site. This can be detected when the
number of arguments expected by each virtual function in an
application is known. While trivial with source code, deriving
this information from binary code can be challenging [41].
An even stronger (but also likely costlier) protection could be
created by considering the actual types of arguments.
2Runtime Type Information (RTTI) metadata is often linked into C++
applications for various purposes. RTTI includes the literal names of classes
and the precise class hierarchy.
756
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:08:18 UTC from IEEE Xplore.  Restrictions apply. 
In a COOP attack, counterfeit objects are not created and
initialized by legitimate C++ constructors, but are injected by
the attacker. Further, the concept of overlapping objects creates
unusual data ﬂows. To detect this, the defender needs to be
aware of the life-cycle of C++ objects in an application. This
requires knowledge of the whereabouts of (possibly inlined)
constructors and destructors of classes with virtual functions.
c) Fine-grained Randomization of C++ Data Structures:
In COOP, the layout of each counterfeit object needs to be
byte-compatible with the semantics of its vfgadget. Accord-
ingly, randomizing C++ object layouts on application start-
up, e. g., by inserting randomly sized paddings between the
ﬁelds of C++ objects, can hamper COOP. Also, the ﬁne-grained
randomization of the positions or structures of vtables could
be a viable defense against COOP.
We conclude that COOP can be mitigated by a range of
means that do not require knowledge of C++ semantics. But
we regard it as vital to consider and to enforce C++ semantics
to reliably prevent COOP. Doing so by means of static binary
analysis and rewriting only is challenging as the compilation
of C++ code is in most cases a lossy process. For example, in
binary code, distinguishing the invocation of a virtual function
from the invocation of a C-style function pointer that happens
to be stored in a read-only table can be difﬁcult. Hence,
unambiguously recovering essential high-level C++ semantics
afterwards can be hard or even impossible. In fact, as we
discuss in more detail in §VII, we know of no binary-only
CFI solution that considers C++ semantics precisely enough
to fully protect against COOP.
B. Applicability and Turing Completeness
We have shown that COOP is applicable to popular C++
applications on different operating systems and hardware
architectures (goal G-3). Naturally, a COOP attack can only
be mounted in case at least a minimum set of vfgadgets is
available. We did not conduct a quantitative analysis on the
general frequency of usable vfgadgets in C++ applications: de-
termining the actual usefulness of potential vfgadgets in an au-
tomated way is challenging and we leave this for future work.
In general, we could choose from many useful vfgadgets in the
libraries mshtml.dll (around 20 MB) and libxul.so (around 60
MB) and found the basic vfgadget types ARITH-G, W-G, R-
G, LOAD-R64-G, and W-SA-G to be common even in smaller
binaries. The availability of ML-Gs/ML-ARG-Gs is vital to ev-
ery COOP attack. While sparser than the more basic types, we
found well-usable representatives, e. g., in Microsoft’s standard
C/C++ runtime libraries msvcr120.dll and msvcp120.dll (both
smaller than 1 MB; dynamically linked to many C and C++
applications on Windows): the virtual function Scheduler-
Base::CancelAllContexts() with ﬁve basic blocks in
msvcr120.dll is a linked list-based ML-G and the virtual func-
tion propagator_block::unlink_sources() with
eight basic blocks in msvcp120.dll is an array-based ML-
ARG-G. Interestingly, this particular ML-ARG-G is also de-
ﬁned in Visual Studio’s standard header ﬁle agents.h. In
msvcr120.dll, we also found the INV-G Cancellation-
TokenRegistration_TaskProc::_Exec() that con-
sists of one basic block and is suitable for x86 and x64 COOP.
Given the vfgadget types deﬁned in Table I, COOP has the
same expressiveness as unrestricted ROP [46]. Hence, it allows
for the implementation of a Turing machine (goal G-4) based
on memory load/store, arithmetic, and branches. In particular,
the COOP examples in §V show that complex semantics like
loops can be implemented under realistic conditions.
VII. COOP AND EXISTING DEFENSES
Based on the discussions in §VI, we now assess a selection
of contemporary defenses against code reuse attacks and
discuss whether they are vulnerable to COOP in our adversary
model. A summary of our assessment is given in Table II.
A. Generic CFI
We ﬁrst discuss CFI approaches that do not consider C++
semantics for the derivation of the CFG that should be
enforced. We observe that all of them are vulnerable to COOP.
The basic implementation of the original CFI work by
Abadi et al. [3] instruments binary code such that indirect
calls may only go to address-taken functions (coarse-grained
CFI). This scheme and a closely related one [59] have re-
cently been shown to be vulnerable to advanced ROP-based
attacks [16], [25]. Abadi et al. also proposed to combine their
basic implementation with a shadow call stack that prevents
call/return mismatches. This extension effectively mitigates
these advanced ROP-based attacks while, as discussed in §VI,
it does not prohibit COOP.
Davi et al. described a hardware-assisted CFI solution for
embedded systems that incorporates a shadow call stack and
a certain set of runtime heuristics [15]. However, the indirect
call policy only validates whether an indirect call targets a
valid function start. As COOP only invokes entire functions, it
can bypass this hardware-based CFI mechanism.
CCFIR [58], a CFI approach for Windows x86 binaries,
uses a randomly arranged “springboard” to dispatch all indirect
branches within a code module. On the baseline, CCFIR
allows indirect calls and jumps to target all address-taken
locations in a binary and restricts returns to certain call-
preceded locations. One of CCFIR’s core assumptions is that
the attacker is unable to “[...] selectively reveal [s]pringboard
stub addresses of their choice” [58]. G¨oktas¸ et al. recently
showed that ROP-based bypasses for CCFIR are possible given
an up-front information leak from the springboard [25]. In con-
trast, COOP breaks CCFIR without violating its assumptions:
the springboard technique is ineffective against COOP as we
do not inject code pointers but only vptrs (pointers to code
pointers). CCFIR though also ensures that sensitive WinAPI
functions (e. g., CreateFile() or WinExec()) can only
be invoked through constant indirect branches. However, as
examined in §VI-A1a, this measure does not prevent dangerous
attacks and can probably also be sidestepped in practice. In
any case, COOP can be used in the ﬁrst stage of an attack to
selectively readout the springboard.
Many system modules in the Microsoft Windows 10 Tech-
nical Preview are compiled with Control Flow Guard (CFG),
757
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:08:18 UTC from IEEE Xplore.  Restrictions apply. 
Category
Generic CFI
C++-aware CFI
Heuristics-based detection
Code hiding, shufﬂing, or rewriting
Memory safety
Realization
Scheme
Binary + debug symbols
Original CFI + shadow call stack [3]
Binary
CCFIR [58]
Binary
O-CFI [54]
Source code + specialized hardware
SW-HW Co-Design [15]
Source code
Windows 10 Tech. Preview CFG
Source code
LLVM IFCC [52]
—various— [5], [29], [52]
Source code
Binary
T-VIP [24]
Binary
VTint [57]
Binary
vfGuard [41]