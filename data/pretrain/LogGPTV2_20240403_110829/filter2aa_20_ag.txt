其中，涉及安全性的 3 个重要属性为 Domain、Secure、HttpOnly。
Cookie 的 Domain 属性
Cookie 在默认情况下只能被发送到与其绑定的服务器。虽然从安全性方面考虑这样是最安全的，但有时也需要能向多个服务器发送的 Cookie，这时就要用到 Domain 属性。
图 3-21 展示了指定 Domain 属性后的 Cookie 被发送给服务器的情况。由于指定了 Domain=example.jp，因此，Cookie 就被发送给了 a.example.jp 和 b.example.jp，而 a.example.com 则因为域名不同而没有发送。
图 3-21 指定 Cookie 的 Domain 属性
假如 a.example.jp 的服务器在 Set-Cookie 时指定了 Domain=example.com，此 Cookie 就会被浏览器忽略。这是因为如果可以在 Cookie 中指定不同域名，就可能发生前述的会话固定攻击，所以 Cookie 是不能指定不同域名的。
未指定 Domain 属性时，Cookie 只被发送至生成它的服务器。换言之，未指定 Domain 属性的 Cookie 发送范围最小，最安全。而设置 Domain 属性时稍有疏忽，就会产生安全隐患。
举例来说，假设 example.com 是服务器租赁商，foo.example.com 和 bar.example.com 都是托管在此租赁服务器上的网站。如果 foo.example.com 网站发送的 Cookie 中指定了 Domain=example.com，此 Cookie 就会被泄漏至 bar.example.com。
由此可见，不设置 Cookie 的 Domain 属性是最佳实践。
要点
  原则上不设置 Cookie 的 Domain 属性
专栏：Cookie Monster Bug
笔者所在公司的网站域名是 hash-c.co.jp，生成的 Cookie 中指定的域名最短也应当为 hash-c.co.jp。但是，使用一些旧版本浏览器时 Cookie 的域名却被指定成了 .co.jp。这一问题就被称为“Cookie Monster Bug”。
使用存在 Cookie Monster Bug 的浏览器会极易遭受会话固定攻击。因为域名为 .co.jp 的 Cookie 也能匹配 amazon.co.jp 和 yahoo.co.jp 等其他 .co.jp 的域名，这就意味着能够对这些网站任意指定 Cookie。
在 Internet Explorer 8（IE8）中使用地域型域名时也存在 Cookie Monster Bug。举例来说，笔者所住的横滨市的域名为 city.yokohama.jp，而横滨市内的地方政府或企业、团体、个人等也都能够获得以 yokohama.jp 结尾的域名。也就是说笔者能够申请获得 tokumaru.kanazawa.yokohama.jp 这个域名（kanazawa 为横滨市金沢区）。问题是，使用 Internet Explorer 时，网站 tokumaru.kanazawa.yokohama.jp 能够生成域名为 yokohama.jp 的 Cookie。
地域型域名在地方政府的网站中有着广泛的应用，却容易遭到会话固定攻击。最近，.lg.jp
 作为地方政府的域名开始被使用，横滨市也启用了 city.yokohama.lg.jp 域名。因此，建议使用地域型域名的网站，在加强防范会话固定攻击的同时，也不妨考虑一下迁移至其他形式的域名。
Cookie 的安全属性
设置了 Secure 属性（下述为安全属性）的 Cookie 仅在 SSL 传输的情况下能够被发送给服务器。而未设置安全属性的 Cookie 则无关是否为 SSL 传输，都会被发送。
指定 Cookie 的安全属性是为了确保 Cookie 在 SSL 的情况下发送。详情请参考 4.8.2 节。
Cookie 的 HttpOnly 属性
设置了 HttpOnly 属性后，JavaScript 就不能访问该 Cookie 了。
恶意使用 JavaScript 进行跨站脚本攻击从而取得 Cookie 信息，是窃取 Cookie 中会话 ID 的典型案例。而 Cookie 中设置了 HttpOnly 属性后，就能防止 JavaScript 窃取 Cookie 信息。
后面专门讲述跨站脚本时也会提到，其实设置了 HttpOnly 属性也无法彻底抵御跨站脚本攻击，但是能加大攻击的难度。而设置 HttpOnly 属性通常不会带来坏处，所以应当时常给 Cookie 加上 HttpOnly 属性。
使用 PHP 的情况下，给 Cookie 添加 HttpOnly 属性，只要在 php.ini 中添加如下设置即可。
session.cookie_httponly = on
关于 Cookie 的 HttpOnly 属性，在讲跨站脚本漏洞的防范对策时还会再次提到。
8
http://www.cryptrec.go.jp/list.html
总结
为了有助于理解 Web 应用的安全隐患，本节讲述了 HTTP、Basic 认证、Cookie、会话管理的相关知识。当前大多数应用都采用 Cookie 来进行会话管理，这在认证结果的保存等安全性方面扮演着重要角色。
作为本节的应用篇，下节将讲述被动攻击和同源策略。
参考文献
[1] 山本阳平 .（2010）.《Web を支える技术－HTTP、URI、HTML、そして REST》（《Web 背后的技术－HTTP、URI、HTML 和 REST》）. 技术评论社 .
[2] 小森裕介 .（2010）.《“プロになるための Web 技术入门”——なぜ、あなたは Web システムを开発できないのか》（《“Web 技术入门”——为什么你无法开发 Web 系统》）. 技术评论社 .
3.2 被动攻击与同源策略
本节首先讲述被动攻击这一攻击手法，然后介绍浏览器针对此类攻击的防御策略——沙盒。沙盒技术的核心概念为“同源策略”，它对于理解 Web 应用的安全隐患至关重要，所以，对同源策略这一概念，本节也会进行详细说明。
主动攻击与被动攻击
针对 Web 应用程序的攻击可分为主动攻击（Active Attack）和被动攻击（Passive Attack）。下面先简单介绍这两者的区别，然后再重点讲述被动攻击。
主动攻击
所谓主动攻击，是指攻击者直接攻击 Web 服务器。SQL 注入攻击即是主动攻击的代表性例子（图 3-22）。
图 3-22 主动攻击
被动攻击
被动攻击是指，攻击者并不直接攻击服务器，而是针对网站的用户设下陷阱，利用掉入陷阱的用户来攻击应用程序。下面，让我们按照由易到难的顺序来依次解说被动攻击的 3 种模式。
单纯的被动攻击
将用户诱导至设有圈套的网站，就是一种单纯的被动攻击模式。图 3-23 描绘了此类攻击的流程。
图 3-23 单纯的被动攻击
此类攻击的典型案例为，用户在浏览过所谓的“可疑网站”之后会感染上恶意软件（病毒等）。理论上如果浏览器（包括 Adobe Flash Player 等插件）不存在漏洞，此类单纯的被动攻击是行不通的。但现实中，针对浏览器以及 Adobe Reader、Adobe Flash Player、JRE 等插件的漏洞进行的攻击却层出不穷。
恶意利用正规网站进行的被动攻击
下面介绍一种稍微复杂一些的被动攻击模式，即通过在正规网站设置陷阱来实施攻击。这也是一种屡见不鲜的模式。图 3-24 描绘了此类攻击的流程。
图 3-24 在正规网站中设置陷阱的被动攻击
攻击者事先入侵正规网站，往其内容中嵌入恶意代码（①）。网站用户在浏览了含有恶意代码的内容后（②～③），就会感染病毒（④）。在这一流程中，单看步骤①的话似乎应归类为主动攻击，但步骤②～④均为被动攻击，因此，可将①视作被动攻击的前期准备。
通过恶意利用正规网站进行被动攻击，与自己准备一个恶意网站这种单纯的攻击模式相比要费事得多，但另一方面，这种方式对于攻击者来说可以说是利大于弊，原因如下。
不需要专门将用户诱导至恶意网站
正规网站的用户数量庞大，因此能提高增加受害者的可能性
攻击者能入侵正规网站，非正当地使用其功能，并从中受益
攻击者能通过窃取网站用户的个人信息而受益
在正规网站中设置陷阱的手法通常有下列 4 种。
非法获取 FTP 等服务器的密码后篡改网站内容（参考 7.1 节）
通过攻击 Web 服务器的安全隐患来篡改网站内容（参考 7.1 节）
通过 SQL 注入攻击来篡改网站内容（参考 4.4 节）
在社交网络这类用户能够自己发布内容的网站上，利用跨站脚本漏洞实施攻击（参考 4.3 节）
2010 年初爆发的恶意程序 Gumblar 就属于此类模式的被动攻击。另外，2008 年以来数量急剧增加的 SQL 注入攻击，也被频繁地用于此类攻击。而无论哪种方法，在第 1 章介绍的僵尸网络的构建过程中，都会被恶意使用。
跨站被动攻击
最后，让我们看一下同时使用恶意网站和正规网站的被动攻击模式。攻击流程见图 3-25。
图 3-25 跨站被动攻击
接下来，让我们根据上图来看一下跨站被动攻击的具体流程。
① 用户浏览恶意网站
② 从恶意网站下载含有恶意代码的 HTML9
③ HTML 中的恶意代码被触发，从而向正规网站发送攻击请求
④ 正规网站返回含有 JavaScript 等的响应内容
有些情况下步骤④会被省略。
此类攻击的特征为，恶意利用已经在正规网站登录的用户账号来实施攻击。由于步骤③的请求中要向正规网站发送会话 Cookie，因此，如果用户已经在正规网站登录，就会利用其已经登录的状态实施攻击。
此类攻击模式的典型案例包括，在步骤③的请求中对 Web 应用发动攻击的跨站请求伪造（CSRF，参考 4.5 节），以及在步骤④的响应中利用浏览器来执行攻击的跨站脚本攻击（XSS，参考 4.3 节）和 HTTP 消息头注入攻击（参考 4.7 节）。
9
 含有恶意代码的 HTML，多是指在网络论坛上发布的专门用来攻击的 URL。
浏览器如何防御被动攻击
针对以上被动攻击，浏览器和网站都需要采取相应的防御措施。本书将从第 4 章开始详述网站方面的对策，但其前提是浏览器不存在安全方面的问题。如果浏览器存在安全问题，网站方面即使实施了对策也无法完全确保安全性。
在说明网站的对策之前，让我们先来关注一下浏览器的安全功能。
沙盒
浏览器能够在用户浏览网站的同时运行一些程序，比如 JavaScript、Java Applet、Adobe Flash Player、ActiveX 等。而为了防止恶意程序在用户的浏览器上运行，JavaScript 等语言提供了一些增强安全性的机能。基本思想有如下两种。
只有在用户确认了程序的发行方并且允许运行的情况下，程序才能被运行
提供限制程序权限的沙盒环境
第一种方式经常被用于 ActiveX 或带有签名的 Applet，但如果一般的应用程序都采用这种方式的话，对用户来说就显得负担过大，因此，现在这种方式主要用于为浏览器提供插件功能。
沙盒（Sandbox），是 JavaScript、Java Applet、Adobe Flash Player 等经常使用的一种思路。在沙盒里面，程序的权限受到制约，即使编写了恶意程序也无法对用户造成伤害。就像孩子们能在沙地中尽情地喧闹而不会给外界带来困扰一样，由此便使用了英语“sandbox”一词，并将其引申为“沙盒”。
通常情况下，沙盒限制了以下功能。
禁止访问本地文件
禁止使用打印机等资源（可以显示页面）
限制网络访问（同源策略）
虽然网络访问无法被完全禁止，但却受到了严格的限制，此限制就被称为同源策略。下面，让我们一起看一下 JavaScript 中的同源策略。
同源策略
同源策略（Same Origin Policy）是禁止 JavaScript 进行跨站访问的安全策略。它也是浏览器的沙盒环境所提供的一项制约。
浏览器可以同时处理多个网站的内容，其典型方法为使用标签页或 frame 等。下面，我们以 iframe 为例来说明同源策略的必要性。
JavaScript 访问 iframe 的试验
接下来，让我们通过观察 JavaScript 对 iframe 的访问限制来体验同源策略。首先，有一点需要了解到的是，如果主机（Host）相同，在 iframe 的外部就能够通过 JavaScript 取得 iframe 内部的 HTML 内容。
下面展示的是包含 iframe 要素的“外层”HTML10
 。
代码清单 /32/32-001.html（外层 HTML）
 跨 frame 的读取试验 
                                         ┌在 iframe 中显示其他HTML的内容
下面是显示在 iframe 中的“内层”HTML。
代码清单 /32/32-002.html（内层 HTML）
iframe 的内层 
密码 
运行页面如图 3-26 所示。点击“密码→”按钮后，iframe 内部的文本框中的文字出现在了按钮右侧。由此证实了 JavaScript 能够取得 iframe 内部的内容。
图 3-26 JavaScript 能够读取 iframe 内部数据
iframe 被恶用的可能性
iframe 内部的信息能被 JavaScript 读取，这样会不会有安全性问题呢？
现在假设你是被动攻击的受害者。在 example.jp 登录以后，浏览了恶意网站 trap.example.com。恶意网站使用 iframe 来显示 example.jp 的内容，如图 3-27 所示。由于你已经登录了 example.jp，所以 iframe 内会显示你的个人信息，但这些信息只有你自己看到，所以显示在浏览器上本身不存在问题。
图 3-27 使用 iframe 的恶意网站
但是，假如恶意网站能用 JavaScript 访问 iframe 内部信息的话就存在问题了。因为你的个人 信息会被恶意网站上的脚本发送给它的服务器。下面我们来试验一下这是否可行。
这次充当恶意网站的是包含 iframe 的 HTML（32-900.html），假设它被托管于 trap.example.com， 并在其 iframe 中显示刚才的 32-002.html（内侧 HTML）。32-900.html 虽然扮演恶意网站的角色， 但其内容同 32-001.html 一样。
同源策略
访问 http://trap.example.com/32/32-900.html
 后点击“密码→”按钮，页面显示如下。
图 3-28 恶意网站试图使用 JavaScript 读取 iframe 内部内容被拒绝
虽然 iframe 内可以显示 example.jp 的内容，但是其他主机（trap.example.com）上的 JavaScript 却无法访问其内容。这是因为 JavaScript 若能访问其他主机的话就会导致安全性问题，所以根据同源策略，访问遭到了拒绝。
同源的条件
目前为止一直使用着“相同主机”这个含糊的用语，而严格来说，“同源”需满足以下全部条件。
URL 的主机（FQDN ：Fully Qualified Domain Name，全称域名）一致 11
Scheme（协议）一致
端口号一致
发送 Cookie 时的条件与协议或端口号无关，所以针对 JavaScript 的限制正变得越发严格。而另一方面，JavaScript 却没有访问目录的限制 12
 。
同源策略的保护对象不仅仅是 iframe 内的文档。比如，实现 Ajax 时所使用的 XMLHttpRequest 对象能够访问的 URL 也受到了同源策略的限制。