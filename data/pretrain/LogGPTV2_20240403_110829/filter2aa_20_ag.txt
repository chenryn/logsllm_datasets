### Cookie 的安全性属性

涉及安全性的三个重要属性为 Domain、Secure 和 HttpOnly。这些属性在确保Cookie的安全性和隐私性方面起着关键作用。

#### 1. Domain 属性
默认情况下，Cookie 只能被发送到与其绑定的服务器。虽然这种设置是最安全的，但在某些场景下，需要向多个服务器发送同一个 Cookie，这时就需要使用 Domain 属性。

- **示例**：假设一个 Cookie 指定了 `Domain=example.jp`，那么这个 Cookie 将被发送给 `a.example.jp` 和 `b.example.jp`，但不会发送给 `a.example.com`，因为域名不同。
- **安全性考虑**：如果 `a.example.jp` 的服务器在设置 Cookie 时指定了 `Domain=example.com`，浏览器会忽略这个 Cookie，以防止会话固定攻击（Session Fixation Attack）。
- **最佳实践**：不指定 Domain 属性是最佳选择，因为未指定 Domain 属性的 Cookie 发送范围最小，最安全。设置 Domain 属性时稍有疏忽，就可能产生安全隐患。

**要点**：
- 原则上不设置 Cookie 的 Domain 属性。

**专栏：Cookie Monster Bug**
- 在一些旧版本的浏览器中，生成的 Cookie 可能会被错误地指定为更广泛的域名。例如，`hash-c.co.jp` 的 Cookie 被指定为 `.co.jp`，这使得该 Cookie 也能匹配 `amazon.co.jp` 和 `yahoo.co.jp` 等其他 `.co.jp` 域名的网站，从而导致会话固定攻击的风险增加。
- 类似的问题也出现在 Internet Explorer 8 中，特别是在使用地域型域名时。

#### 2. Secure 属性
设置了 Secure 属性的 Cookie 只能在 SSL/TLS 传输的情况下被发送给服务器。未设置 Secure 属性的 Cookie 则无论是否使用 SSL/TLS 都会被发送。

- **用途**：确保 Cookie 在安全的 HTTPS 连接中传输，防止在非加密连接中泄露敏感信息。

#### 3. HttpOnly 属性
设置了 HttpOnly 属性的 Cookie 不能被 JavaScript 访问。这有助于防止跨站脚本攻击（XSS），因为恶意脚本无法读取或篡改 HttpOnly Cookie。

- **示例**：使用 PHP 时，可以在 `php.ini` 中添加 `session.cookie_httponly = on` 来启用 HttpOnly 属性。
- **安全性考虑**：虽然 HttpOnly 属性不能完全防止 XSS 攻击，但它增加了攻击的难度，因此应常规地为 Cookie 设置 HttpOnly 属性。

### 总结
为了更好地理解 Web 应用的安全隐患，本节介绍了 HTTP、Basic 认证、Cookie 和会话管理的相关知识。当前大多数应用都采用 Cookie 进行会话管理，这对于认证结果的保存等安全性方面至关重要。

### 参考文献
[1] 山本阳平 . (2010). 《Web を支える技术－HTTP、URI、HTML、そして REST》. 技术评论社.
[2] 小森裕介 . (2010). 《“プロになるための Web 技术入门”——なぜ、あなたは Web システムを开発できないのか》. 技术评论社.

### 3.2 被动攻击与同源策略
本节首先介绍被动攻击这一攻击手法，然后讨论浏览器针对此类攻击的防御策略——沙盒。沙盒的核心概念是“同源策略”，对于理解 Web 应用的安全隐患至关重要。

#### 主动攻击与被动攻击
针对 Web 应用程序的攻击可分为两类：主动攻击和被动攻击。

- **主动攻击**：直接攻击 Web 服务器，如 SQL 注入攻击。
- **被动攻击**：攻击者不直接攻击服务器，而是通过诱导用户访问恶意网站来实施攻击。被动攻击包括单纯被动攻击、利用正规网站进行被动攻击和跨站被动攻击。

#### 浏览器如何防御被动攻击
浏览器提供了多种安全功能来防御被动攻击，其中包括沙盒环境和同源策略。

- **沙盒**：限制程序的权限，防止恶意程序对用户造成伤害。
- **同源策略**：禁止 JavaScript 进行跨站访问，确保同一源内的资源可以互相访问，而不同源的资源则受到限制。

**同源的条件**：
- URL 的主机（FQDN）一致
- 协议（Scheme）一致
- 端口号一致

通过这些措施，浏览器能够有效地减少被动攻击的风险，保护用户的网络安全。