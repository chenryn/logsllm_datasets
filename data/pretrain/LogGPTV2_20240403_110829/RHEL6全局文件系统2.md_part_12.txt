## [⁠]{#ch-manage.html#s2-manage-mountnoatime}4.9.2. 使用 `noatime`{.command} 挂载 {.title}
:::
[]{#ch-manage.html#idm140546314611072
.indexterm}[]{#ch-manage.html#idm140546297815504
.indexterm}[]{#ch-manage.html#idm140546297812784 .indexterm}
::: para
当挂载文件系统时，可指定 Linux 挂载选项
`noatime`{.option}，它可在那个文件系统中禁用 `atime`{.command} 更新。
:::
::: simplesect
::: titlepage
### [⁠]{#ch-manage.html#ss-manage-noatime-use}用法 {.title}
:::
``` screen
mount BlockDevice MountPoint -o noatime
```
::: variablelist
[*`BlockDevice`*]{.term}
:   ::: para
    指定 GFS2 文件系统所在的块设备。
    :::
[*`MountPoint`*]{.term}
:   ::: para
    指定要挂载 GFS2 文件系统的目录。
    :::
:::
:::
::: simplesect
::: titlepage
### [⁠]{#ch-manage.html#ss-manage-noatime-ex}示例 {.title}
:::
::: para
在这个示例中，GFS2 文件系统位于
`/dev/vg01/lvol0`{.filename}，并挂载到关闭了 `atime`{.command} 更新的
`/mygfs2`{.filename} 目录中。
:::
``` screen
mount /dev/vg01/lvol0 /mygfs2 -o noatime
```
:::
:::
:::
::: section
::: titlepage
# [⁠]{#ch-manage.html#s1-manage-suspendfs}4.10. 在文件系统中挂起一个动作 {.title}
:::
[]{#ch-manage.html#idm140546318829728
.indexterm}[]{#ch-manage.html#idm140546318828800 .indexterm}
::: para
您可以使用 `gfs2_tool freeze`{.command}``{=html}
命令挂起对某个文件系统的写入动作。挂起写入动作允许使用基于硬件的设备快照捕获处于一致状态的文件系统。`dmsetup resume`{.command}``{=html}
命令可终止挂起。
:::
::: simplesect
::: titlepage
## [⁠]{#ch-manage.html#ss-manage-suspendfs-use}用法 {.title}
:::
::: para
[**Start Suspension**]{.application}
:::
``` screen
dmsetup suspend MountPoint
```
::: para
[**End Suspension**]{.application}
:::
``` screen
dmsetup resume MountPoint
```
::: variablelist
[*`MountPoint`*]{.term}
:   ::: para
    指定文件系统。
    :::
:::
:::
::: simplesect
::: titlepage
## [⁠]{#ch-manage.html#ss-manage-suspendfs-ex}示例 {.title}
:::
::: para
这个示例挂起了对文件系统 `/mygfs2`{.filename} 的写入动作。
:::
``` screen
# dmsetup suspend /mygfs2
```
::: para
这个示例终止了对文件系统 `/mygfs2`{.filename} 写入动作的挂起。
:::
``` screen
# dmsetup resume /mygfs2
```
:::
:::
::: section
::: titlepage
# [⁠]{#ch-manage.html#s1-manage-repairfs}4.11. 修复文件系统 {.title}
:::
[]{#ch-manage.html#idm140546329662304
.indexterm}[]{#ch-manage.html#idm140546329660864
.indexterm}[]{#ch-manage.html#idm140546329659904 .indexterm}
::: para
当挂载文件系统节点失败时，文件系统日志允许快速恢复。但如果存储设备断电或者断开物理连接，则会发生文件系统崩溃。（无法使用日志进行存储子系统失败修复。）当这种崩溃发生时，您可以使用
`fsck.gfs2`{.command} 命令修复 GFS2 文件系统。
:::
::: {.important xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**重要**
:::
::: admonition
::: para
`fsck.gfs2`{.command} 命令必须只能在从所有节点中卸载的文件系统中运行。
:::
:::
:::
::: {.important xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**重要**
:::
::: admonition
::: para
不应在引导时使用 `fsck.gfs2`{.command} 命令检查
GFS2。`fsck.gfs2`{.command}
命令不能在引导时确定是否在集群的另一个节点中挂载该文件系统。应只在系统引导后手动运行
`fsck.gfs2`{.command} 命令。
:::
::: para
To ensure that the `fsck.gfs2`{.command} command does not run on a GFS2
file system at boot time, modify the `/etc/fstab`{.filename} file so
that the final two columns for a GFS2 file system mount point show \"0
0\" rather than \"1 1\" (or any other numbers), as in the following
example:
:::
``` screen
/dev/VG12/lv_svr_home   /svr_home       gfs2     defaults,noatime,nodiratime,noquota     0 0
```
:::
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**备注**
:::
::: admonition
::: para
如果您以前有在 GFS 文件系统中使用 gfs_fsck 命令的经验，请注意
`fsck.gfs2`{.command} 命令在以下方面和之前发布的 `gfs_fsck`{.command}
有所不同：
:::
::: itemizedlist
-   ::: para
    在运行 `fsck.gfs2`{.command} 时按
    [**Ctrl**]{.keycap}+[**C**]{.keycap}
    会中断进程并显示提示信息，询问您是否要取消该命令，跳过剩余操作或者继续该进程。
    :::
-   ::: para
    您可以使用 `-v`{.option} 标签提高详细等级。添加第二个 `-v`{.option}
    标签会再次提高等级。
    :::
-   ::: para
    您可以使用 `-q`{.option} 标签降低详细等级。添加第二个 `-q`{.option}
    标签会再次降低等级。
    :::
-   ::: para
    `-n`{.option} 会以只读方式打开某个文件系统并自动对所有查询回答
    **`no`**。该选项提供了在不允许 `fsck.gfs2`{.command}
    命令生效的前提下使用命令找出错误的方法。
    :::
:::
::: para
有关其他命令选项详情请参考 `fsck.gf2`{.filename} man page。
:::
:::
:::
::: para
运行 `fsck.gfs2`{.command}
命令要求系统内存高于操作系统使用的内存而低于内核使用的内存。GFS2
文件系统中的每块内存本身需要大约 5 比特额外内存，或者 5/8
字节。因此要估算在您的文件系统中运行 `fsck.gfs2`{.command}
命令所需内存字节数，您可以确定包含的文件系统块的数量，然后乘以 5/8。
:::
::: para
例如：要确定在大小为 16TB，块大小为 4K 的 GFS2 文件系统中运行
`fsck.gfs2`{.command}
命令大约需要多少内存，首先要确定该文件系统中包含多少内存块，可使用 16TB
除以 4K：
:::
``` screen
 17592186044416 / 4096 = 4294967296
```
::: para
这个文件系统中包含 4294967296 个块，再乘以 5/8 就可确定需要多少内存：
:::
``` screen
4294967296 * 5/8 = 2684354560
```
::: para
该文件系统大约需要 2.6GB 可用内存方可运行 `fsck.gfs2`{.command}
命令。请注意：如果块大小为 1K，那么运行 `fsck.gfs2`{.command}
命令将需要四倍于以上值的内存，即大约 11GB。
:::
::: simplesect
::: titlepage
## [⁠]{#ch-manage.html#ss-manage-repairfs-use}用法 {.title}
:::
``` screen
fsck.gfs2 -y BlockDevice
```
::: variablelist
[`-y`{.option}]{.term}
:   ::: para
    `-y`{.option} 标签可使对所有问题的回答都为
    `yes`{.computeroutput}。如果指定 `-y`{.option}
    标签，`fsck.gfs2`{.command} 命令则不会在进行修改前提示您回答问题。
    :::
[*`BlockDevice`*]{.term}
:   ::: para
    指定 GFS2 文件系统所在的块设备。
    :::
:::
:::
::: simplesect
::: titlepage
## [⁠]{#ch-manage.html#ss-manage-repairfs-ex}示例 {.title}
:::
::: para
在这个示例中，修复了位于块设备 `/dev/testvol/testlv`{.filename} 中的
GFS2 文件系统。所有关于修复查询的回答都自动为 `yes`{.computeroutput}。
:::
``` screen
[root@dash-01 ~]# fsck.gfs2 -y /dev/testvg/testlv
Initializing fsck
Validating Resource Group index.
Level 1 RG check.
(level 1 passed)
Clearing journals (this may take a while)...
Journals cleared.
Starting pass1
Pass1 complete
Starting pass1b
Pass1b complete
Starting pass1c
Pass1c complete
Starting pass2
Pass2 complete
Starting pass3
Pass3 complete
Starting pass4
Pass4 complete
Starting pass5
Pass5 complete
Writing changes to disk
fsck.gfs2 complete
```
:::
:::
::: section
::: titlepage
# [⁠]{#ch-manage.html#s1-manage-pathnames}4.12. 绑定挂载以及上下文关联路径名 {.title}
:::
[]{#ch-manage.html#idm140546307461472
.indexterm}[]{#ch-manage.html#idm140546307460064
.indexterm}[]{#ch-manage.html#idm140546307458624
.indexterm}[]{#ch-manage.html#idm140546307457696 .indexterm}
::: para
GFS2 文件系统不提供对上下文关联路径名（CDPN）的支持，CDPN
允许您生成指向不同目的地文件或者目录的符号链接。在 GFS2 中使用
`mount`{.command} 命令的 `bind`{.option} 选项实现此功能。
:::
::: para
`mount`{.command} 命令的 `bind`{.option}
选项允许您在不同位置重新挂载部分文件结构，且使其在初始位置仍可用。该命令的格式如下：
:::
``` screen
mount --bind olddir newdir
```
::: para
执行此命令后，*`olddir`* 目录中的内容在两个位置可用：*`olddir`* 和
*`newdir`*。您还可以使用这个选项生成在两个位置可用的独立文件。
:::
::: para
例如：在执行以下命令后，`/root/tmp`{.filename} 中的内容将和之前挂载的
`/var/log`{.filename} 目录内容一致。
:::
``` screen
[root@menscryfa ~]# cd ~root
[root@menscryfa ~]# mkdir ./tmp
[root@menscryfa ~]# mount --bind /var/log /root/tmp
```
::: para
另外，您可以使用 `/etc/fstab`{.filename}
文件中的条目在挂载时得到同样的结果。`/etc/fstab`{.filename}
中的以下条目可使 `/root/tmp`{.filename} 的内容和 `/var/log`{.filename}
目录中的内容一致。
:::
``` screen
/var/log                /root/tmp               none    bind            0 0
```