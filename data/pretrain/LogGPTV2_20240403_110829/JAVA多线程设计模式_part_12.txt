安全的（这是为了使运行速度提高）。
 int size0
void addList(Object obj)
 O6ject removeFirst0
例程序小，使用了下面3种方法：
类作简单的解说。LinkedList 是川来表示中状连接在一起的对象集合体的类。在范
java.util.LinkedList类的操作
稳加条件加心防卫
这段语们。不过，这“行程序要能安全地执行，必须要满足queue.size)>0的
首先，请先思考 getRequest 方法应该做到的“目的操作”是什么。这个方法的
在链表的尾端加上元素olbj。
取出链表前面第一个元素，并将这个元素返回。如果--个元素都不剩，会抛出
在详细阅读List 3-2 前，在这里先就queue 字段的类型——java.util.LinkedList
queue.removeFirst()
接下来我们就米彻底地分析List 3-2的 getRequest 方法吧：
使用java.util.LinkedList类，可以简单的实现出队列。不过，这个类并不是线程
返回链表连接的元素数量。
return
try l 
catch (InterruptedException e) ↑
(Request)queue.removeFirst();
wait();
---
## Page 118
"-定是成立的。
前进到 while 的下一个语句时能够保证的事
只有收到notify/notifyAll，才能继续执行后面的语句。
程等待着警戒条件的成立，
实线程是很想要继续前进的。等待中的线程，正等待着条件的变化。也就是说，线
入等待状态，是因为警戒条件不成立。是被这个警戒条件挡住，才无法向前的。
思考的是更深一层的意义。线程真正所等待的，是实例状态的变化。线程之所以进
程，除非被 notify/血motityAll，不然都会在等待区里持续等待的状态。不过，这里要
在等待什么呢？
执行 wait等待条件的变化
戒条件不成立时，线程才会执行wait。
川removeFirst方法。这个时候不会执行到 wait，所以线程不会等待。
不等待的情况，等待的情况
while的卜一个语句（调用removeFirst）。
调用的时候，警戒条件－定会成立。
式是警戒条件的逻辑否定。程序就是靠这个 while语句，来保证removeFirst方法被
condition)。
这种一定要满足的条件，称为Guarded Suspension Patterm 的警戒条件（guard
况。
正在 wait 的线程，期望当警戒条件成立时，能收到一声 notify/notifyAll。因为
好像前面说了·大堆理所当然的废话，事实上这个部分真的请多加留意。因为
当警戒条件不成立时，线程会进入 while 块中，执行wait 乒始等待。只有当警
当警戒条件成立时，线程不会进入while块，而会直接进行到下-一个语句，调
满足警成条件的逻辑否定时—也就是警戒条件不成立时一
也就是说，
while 语句的后面，就是主要想要进行的操作了。这时，while语句的警戒条件，
那么，我们继续看getRequest方法。
“当然一定是在等待 notify/notifyAll嘛!”没错，的确如此。调用wait 后的线
当警戒条件不成立时，线程就会执行wait开始“等待”的操作。那么，线程是
当线程抵达 while 语句的时候，会分为满足警戒条件与不满足警戒条件两种情
仔细看 getRequest 方法的 while 语句中的条件式后会发现，while 语句中的条件
queue.size(） >0
：调用removeFirst 的时候，
Guarded Suspension--
警戒条件
一要等到我准备好喔
—就绝对不会进入
3第
其
---
## Page 119
getRequest方法中的这两个操作：
什么？"这个 synchronized所保护的是queue亨段（LinkedList的实例）。
synchronized 的意义
这两者都是 synchronized方法。
警戒条件一
仔细分析putRequest 方法
条件。
到的条件，我们称为事前条件（precondition）。警戒条件就是“目的操作”的事前
法绝不会抛出 NoSuchElementException 异常。
看到 synchronized，就要想到如前面所说的，思考“这个 synchronized是在保护
●判断queue字段的元素数是否大于0;
我们己经看完了 getRequest 方法与 putRequest 方法。不过前面没有特别提及，
这就是 putRequest。
前面的 getRequest中，wait 中的线程所等待的是什么呢？对，正是这个条件一
·从queue字段取出1个元素。
queue.size() >0
执行addLast方法，在 queue的最后面新增一个请求（request）。
public synchronized void putRequest(Request request) {
接着是 putRequest 方法，这个方法比较短，可以分析得比较快。
在进行真正的操作前，警戒条件一-定会满足。这种在进行某个操作前一定要达
一定“只有惟的线程在进行”。这是 Single Threaded Execution Pattern（第1章）。
进行“目的操作”；
while（“警戒条件”的逻辑否定）{
这就是 getRequest 方法。
这个表达式一定会满足。因为“queue 中的元素数大于0”，所以 removeFist 方
下而是前面说明的架构稍作整理的结果：
queue.size() > (
queue.addLast(request);
notifyAll(l:
一的成立。所以在这里，
使用Wa主土等待：
，我们就调用 notifyAll。
.警戒条件
例如保护
---
## Page 120
用 notify/notifyAll 方法米实现 stateChangingMethod，
就要开始等待。警戒条件的成立与否，会随GuardedObject 参与者的状态变化。
程执行guardMethod时，只要满足警戒条件，就会马上执行。但警戒条件不成立时，
Guarded Suspension Pattern 的所有参与者
wait与锁定
GuardedObjecr（独防卫的对象）参岛者
习一下。这不是Java线程的进阶知识，而是基础知识。请务必中牛记在脑海里。
行下一个语句之前，必须再次获取this的锁定才行。
解除this的锁定，
的确线程正获取this的锁定，
定。若像范例程序这样在 synchronized 方法中i调用 wait方法，在执行 wait 的时候，
（特别是用来更改警戒条件）的方法（stateChangingMethod）。
在 Java 语言中，是使用 while 语句与 wait 方法来实现 guardedMethod的。而使
GuardedObject 参与者除了guardedMethod以外，可能还会有用米更改实例状态
GuardedObject 参与者是个拥有被防.卫的方法（guardedMethod）的类。当线
上述线程的行为，在前面已经详细解说过了。如果您忘记了，请翻到前面再复
而线程可能会因为 notify、notifyAll 或 interrupt 退出等待区。不过，在实际进
Guarded Suspension Patterm 的所有参与者如下 :
当某个线程试图去执行某个实例的 wait 方法时，这个线程必须获取该实例的锁
针对还不习惯Java的 wait方法的读者，这里再稍微加以补充说明。
stateChangingMethod (guarded}
guardedMethod guarded}
图3-3Giuarded Suspension Pattern 的类
state
Guarded Suspension-
Guardedobject
I
一要等到我准备好喔
---
## Page 121
例的状态也不过是：·直保持不理想罢了。
变实例的状态。所以，即使实例“现在”的状态不理想，要线程等待的话，这个实
作主体的线程只有--个，如果这个惟--的线程进入等待状态，其他的线程都无法改
多线程版的if
“有条件的 synchronized”。
其他的线程就不能进入，而被请求等待。
有条件的 synchronized
扩展思考方向的提示
而Guarded Suspension Pattern中，线程要不要等待，则是依警戒条件决定的。
Single Threaded Execution Patterm（第1章）中，只要有一个线程进入临界区间，
当然，单线程的程序，是不需要Guarded Suspension Pattern 的。单线程中，操
图3-4Guarded Suspension Pattern的时序图（警戒条件不成立时）
:Thread
的的操作，所以
stateChangingMethod
:Guardedobiect
state
---
## Page 122
绍的操作与名称，只有参考程度。
献与文本语句上的不同，相同的名称有时候也代表不同的意义。所以请注意下面介
各种各样的称呼
方法与 putRequest 方法就行了。
RequestQueue类的--方，并不需要考虑 wait/notifyAll的问题，只要调用getRequest
Suspension Pattern 的实现是封闭在 RequestQueue 类垦的。
在 ClientThread、ServerThread、Main 等其他类里都没有出现 wait/notifyAll。Guarded
wait与notify/notifyAll的责任[复用性]
可以在调用 wait 方法时，在参数里指定终止（timeout）的时间。详见 Balking Patten
象，认定为一种错误，而想要中断程序运行。想要在一定时间后中断操作时，我们
执行，程序就失去生命性了。
多久都不会成立。这种时候，
进入wait，
notify/notifyAll多少次，如果还是没有满足警戒条件，那线程会随着while循环再度
忘记更改状态与生命性
（第4章）的进阶说明。
之所以隐藏住wait/notifyAll，是为了RequestQueue 类的复用性。使用
意义是“被阻挡而暂时中断执行”。这个名称并没有表现出实现方法。
如果仔细阅读范例程序的话，会发现只有RequestQueue类有用到wait/notifyAll。
所以我们可能会想将 wait 经过一段很长的时间还没有被 notify/notifyAll 的现
如果程序写错，忘记修改GuardedObjcct 参与者的状态，那警戒条件无论经过
●因为某种原因在“等待”
与Guarded Suspension Patterm 类似的处理，有各种不同的称呼。但随着参考文
wait中的线程会在notify/notifyAll的时候重新测试警戒条件。无论被
·有循环的存在
共通的特征是下面3点：
从这个角度看来，Guarded Suspension Pattern 就像是“多线程版的if".
所以一般来说，
有条件的测试
单线程的程序，警戒条件会使用if语句处理。
 Guarded Suspension-
-要等到我准备好喔
3草
---
## Page 123
学段必频声明成volatie：
应处理的方式（参考附录E[Lea])。
 pofing
方式（参考附录E[Lewis00])。另外，有些以硬件实现的同步机制，也称为 spin lock。
相同。另外，有时候则是指开始时使用 busy wait，之后再切换成 guarded wait的
spin lock 有时意思与guarded wait相同（参考附录E[Holuboo]），有时则与busy wait
 spin fock
交给其他线程），并不断测试条件的实现方法，因为等待中的线程也持续运行着，所
 busy wait
行，所以不会浪费到Java执行环境的处理时间。
后再次测试条件的实现方法。使用 wait等待的时间，其实是停止在等待区里停止执
106
注1：Thread.yield不会解除锁定，所以这段程序代码不可以写在 synchronized里。而 teady
“忙碌地等待”的意思。线程不使用 wait等待，而使用yield（尽可能把优先级
意义是“被阻挡而等待”。大致上是线程使用 wait等待，等到被 notify/notifyAll
“进行舆论调查”的意思。反复检查某个事件是否发生，当发生时，就进行对
“旋转而锁定”的意思。表现出条件成立前while循环不断“旋转”的样子。
ready = true;
@唤醒端的范例
while (!ready) {
等待端的范例
notifyAll(};
ready = true:
@唤醒端的范例
while (!ready)
等待端的范例
 Thread.yieldil;
wait()
---
## Page 124
Future Pattern（第9章）
者获取数据时，有用到Guarded Suspension Patterm。
Producer-Consumer Pattern（第5章）
Balking Pattern（第 4章）
Single Threaded Execution Pattern （第 1章)
件不成立时，就会等待到成立为止。
试现在使用满足警戒条件，只有在警成条件满足时，才会进行日的处理；而警戒条
状态合适的时候，才会让线程进行目的处理。
Guarded Suspension Pattern 进入等待。
立为止。
为在测试后、设置前时，不能让其他线程插进来测试。
Execution Patterm。一连串的测试、设置操作，都必须保证只有单线程可以执行。因
重点回顾
相关Pattern
Java 语言中使用 while语句来测试条件，使川 wait 方法来等待。而当条件更改
于是，首先我们以“警戒条件”来表示对象的合适状态。
Producer-Consumer Pattern 中，Producer 参与者放置数据时，与Consumer 参与
而 Balking Pattrn 中，线程不会等待警戒条件，而会直接退出。
使用notify/notifyAll方法发出通知。
这一章我们学习了Guarded Suspension Paltemme
Future Pattern
当警戒条件不成立时，Guarded Suspension Patterm 中，线程会等到警成条件成
Guarded Suspension Patterm 用于许多与并发性相关的 Patterm 中。
“测试警戒条件”与"测试后更改状态（设置）"的部分，都使用了Single Threaded
中，若要获取目的信息时，而目的信息还没准备好时，会使用
Guarded Suspension-
并在目的处理前，测
一要等到我准备好喔
3
---
## Page 125
[范例程序的执行范例（见图3-2）中，的确 ServerThread（List 3-4）会依次处理
a假设范例程序中，RequestQueue 类（List 3-2）的 putRequest 方法改如 List 3-6
[关丁范例程序的操作，请仔细阅读下列语句，止确的请回答○，不正确的请回
00
练习问题
方法与notifyAll 方法是否有如同我们所期待的被调用。
ClientThread（List 3-3）所送出的请求，可是从程序结果上，我们看不出来wait
问题3-3（加上调试输出）
public synchronized void putRequest (Reguest request) 1
安全执行吗？为什么呢？
所示（在执行addList之前就执行notifyAll）。
问题3-1（基础知识的确认）
解答请见附录A
那么，就进入练习问题吧。
期待运行。
问题3-2（notifyAll的位置）
（1）getRequest‘putRequest 分别由不同的线程来调用。
答×。
这就是 Guarded Suspension Patterm-
List 3-6
（3）从 getRequest 当中调用removeFirst 方法时，queue.size(）>0的值一定是
（2）RequestQueue的实例可以做出两个来，
7）
6）
（5）
（4）
queue.addLast (request);
notifyAli();
putRequest方法中的notifyAllO;这个语句跟写成queuc.notifyAllO;的意思
－·样，只是后者比较儿长。
仟何处理。
从 getRequest 当中调用 wait 方法时，queue.size()>0的值定为 falsee
true：
先执行 notifyAll的putRequest 可以安全执行吗
：请问这时 RequestQueue 类可以
---
## Page 126
[RequestQueue 类（List 3-2）的 getRequest 方法若分别写成下面（1）～（4）的
 public synchronized Request getRequest() (
public Request getRequest() t
public syrchrcnized Request. gelRequest() {
 L.ist 3-7.
版本，各会出现什么问题。
问题 3-4（似是而非的 Guarded Suspension Pattern）
(4）以 Thread.sleep 取代 wait (List 3-10)
（1）把while写成if（List 3-7）
List 3-8.
(3) t
(2)8
List'3-9
try{
return (Request.)queue.removeFirst (l;
while (queue.size() <= 0) {
if (queue.sizei) <= 0) ↑
return (Request)queue.removeFirst ();
try...catch放在 while 的外面（(List 3-9)
synchronized 的范围只有wait（List 3-8）
while (queue.size() <= 0)
try  
try {
synchronized (this)
catch 
cateh 
wait();
把try...catch放在while 的外面会出问题吗
wait();
synchronized 的范围只有 wait 会出问题吗
把 while 写成if会出问题吗
waii);
(InterruptedException e) {
(InterruptedException e)
 Guarded Suspension-
要等到我准备好喔
3草
---
## Page 127
[有个人想以范例程序为基础，来写“以父谈方式互相传送请求的两个线程”。
public class TalkThread extends Thread
期待的请求交换呢？
了，但什么都没有显示。这是为什么呢？再间，要怎样改写，才能达到我们所
但实例执行程序时，执行结果如图3-5 所示。Alice与 Bobby 两个线程确实启动
应该会不断地持续交换着。于是，最后写出了Main类如List 3-12所示，
实例（互相颠倒）。这个人想着这只程序执行时，惊叹号应该持续增加的请求，
并使用输出用 RequestQueue 的 putRequest 方法，送出这个请求给交谈对象的线
的RequcstQueue，以 getRequest 方法获取一个请求（requestl）。
TalkThread 类（List 3-11）拥有两个 RequestQueue（List 3-2）的实例。
问题 3-5（两个 Guarded Suspension）
public synchronized Request getRequest() ↑
List 3-11
程。
立两个.上述TalkThread 的实例，并共享两个输出、输入用的 RequestQueue
着，在requestl名称的后面加上一个惊叹号（！），建立出新的请求（request2）。
List 3-10
 public TalkThread (RequestQueue input, RequestQueue output,
private RequestQueue output;
 private RequestQueue irput;
return (Request)queue.removeFirst();
while (queue.size() <= 0){
return (Request)queue.removeFirst(};
} calch (InterruptedException e) {
try［
1 catch (InterruptedException e) {
rhread.sléep(lc0);