有一个清晰的部署路径很重要，这样每个人都在同一页上。它还提供了部署速度的明确预期。通过这样做，我们可以指定何时需要审查。
8.  **为什么数据库迁移不同于常规代码部署？**
它们是不同的，因为它们不容易回滚。虽然可以回滚代码部署，以便再次部署以前的映像，但数据库迁移会对数据库或数据的模式进行更改，如果恢复这些更改，可能会导致数据丢失。通常，数据库迁移是向前的，出现的任何问题都需要通过新的部署来纠正。
这是我们必须格外小心数据库迁移并确保它们不会向后不兼容的主要原因。
# 第十章
1.  **什么是系统的可观测性？**
这是一个系统的能力。它让你知道它的内部状态是什么。
2.  **默认情况下，日志中有哪些不同的严重级别？**
按照严重程度递增的顺序，不同的严重程度为`DEBUG`、`INFO`、`WARNING`、`ERROR`和`CRITICAL`。
3.  **指标用于什么？**
指标允许您找出系统上发生的事件的聚合状态，并允许您了解系统的一般状态。
4.  **为什么需要在日志中添加请求 ID？**
您需要向日志中添加一个请求标识，这样您就可以将对应于同一请求的所有日志分组。
5.  **普罗米修斯中有哪些度量？**
计数器，对特定事件进行计数；仪表，跟踪可以上升或下降的值；和直方图(或摘要)，它们跟踪具有关联值的事件，例如事件发生的时间或请求的状态代码被返回的时间。
6.  **一个指标中的第 75 百分位是什么，它与平均值有什么不同？**
对于直方图而言，*75*百分位是 *25%* 的事件高于平均值，而 *75%* 低于平均值。平均值是通过将所有的值加在一起，然后将该值除以最初加在一起的值的数量得到的。通常，平均值将接近第 50 个百分点，尽管这取决于值是如何分布的。
如果我们希望确定延迟，第*90*-*95*百分位是好的，因为它为请求提供了上限时间，不计算异常值。平均值可能会被异常值扭曲，因此无法为绝大多数请求提供真实的数字。
7.  **四大黄金信号是什么？**
这四个黄金信号是收集系统健康描述的四个测量值。它们是请求的延迟、流量、返回错误的百分比和资源的饱和。
# 破产重组保护
1.  **发布微服务架构系统中的变更和单块有什么区别？**
发布单块中的变更将只涉及一个存储库，因为单块只是一个代码库。在微服务架构中进行的一些更改将需要我们更改两个或多个微服务，以便我们可以分配它们。这需要更多的计划和关心，因为我们需要确保这是适当的协调。在适当架构的微服务系统中，这样的多存储库更改应该相对较少，因为它们会产生开销。
2.  **为什么微服务架构中的发布变更应该很小？**
微服务的优势在于我们可以并行发布微服务，这比单块发布要快。然而，考虑到微服务中的发布可能潜在地影响其他微服务，它们应该以迭代的方式工作，减少变更的规模并提高它们的部署速度。
如果需要的话，一个小的改变风险更小，也更容易回滚。
3.  **语义版本化是如何工作的？**
在语义版本化中，版本有三个编号:一个*主*版本号，一个*次*版本号，一个*补丁*版本号。这些都用点隔开:
*   补丁版本的增加只修复了错误和安全问题。
*   次要版本的增加增加了更多的特性，但没有向后不兼容的变化。
*   主版本的增加会产生向后不兼容的变化。
4.  **微服务架构系统内部接口的语义版本化有哪些问题？**
由于微服务中的部署非常普遍，并且向后兼容性非常重要，因此*重大*发布的意义变得淡化了。此外，微服务的大多数消费者是内部的，因此版本之间的隐式通信不太重要。
当发布变得普遍时，语义版本化就失去了意义，因为目标是持续改进产品，而不是标记大的发布。
5.  **增加版本端点有什么好处？**
任何使用微服务的消费者都可以像提出任何其他请求一样请求其版本:通过使用 RESTful 调用。
6.  **如何修复本章代码中的依赖问题？**
本章中的代码在待填充之间存在依赖性问题。
7.  **我们应该在共享配置映射中存储哪些配置变量？**
我们应该存储由多个微服务访问的配置变量。首先，我们应该存储大部分配置变量，以便它们可以被重用。
8.  **描述将所有配置变量放入单个共享配置图的优缺点。**
单个共享配置映射使得配置变量非常明确。它鼓励每个人重用它们，并告诉其他人配置在其他微服务中的用途。
更改微服务的依赖关系将触发重新启动，因此更改充当一切依赖关系的配置映射将导致集群中的所有微服务重新启动，这非常耗时。
此外，单个配置映射文件可能会变得非常大，将它分成几个更小的文件可以帮助我们更有效地组织数据。
9.  **Kubernetes 配置图和 Kubernetes 机密有什么区别？**
Kubernetes Secrets 可以更好地防止意外访问。直接访问工具不会以纯文本显示机密。对机密的访问也需要以更明确的方式进行配置。另一方面，可以批量配置配置映射，因此 pod 将能够访问已存储在配置映射中的所有值。
10.  **如何才能改变一个 Kubernetes 的机密？**
我们可以使用`kubectl edit`更改一个机密，但是它需要以 Base64 格式编码。
例如，要用`someotherpassword`值替换`postgres-password`机密，我们可以使用以下代码:
```
$ echo someotherpassword | base64
c29tZW90aGVycGFzc3dvcmQK
$ kubectl edit secrets -n example thoughts-secrets
# Please edit the object below. Lines beginning with a '#' will be ignored,
# and an empty file will abort the edit. If an error occurs while saving this file will be
# reopened with the relevant failures.
#
apiVersion: v1
data:
 postgres-password: c29tZW90aGVycGFzc3dvcmQK
...
secret/thoughts-secrets edited
```
一旦重启，我们的吊舱将能够使用新的机密。
11.  **想象一下，基于我们的配置，我们决定将 public_key.pub 从 Secret 更改为 ConfigMap。我们要做什么改变？**
我们需要更改配置映射，使其包含`configuration.yaml`中的文件:
```
THOUGHTS_BACKEND_URL: http://thoughts-service
public_key.pub: |
  -----BEGIN PUBLIC KEY-----
  -----END PUBLIC KEY-----
USER_BACKEND_URL: http://users-service
```
注意文件的缩进。`|`字符标记一个多行字符串。
然后，在`deployment.yaml`文件中，我们需要将装载源从机密更改为配置映射:
```
volumes:
    - name: public-key
      configMap:
          name: shared-config
          items:
              - key: public_key.pub
                path: public_key.pub
```
请记住首先将这些更改应用于配置映射，以便在应用部署文件时可用。
Note that this method creates an environment variable called `public_key.pub`, along with the content of the file, since it is applied as part of the `shared-config` ConfigMap. An alternative is to create an independent ConfigMap.
机密可以在所有吊舱重启后删除。
# 第十二章
1.  **为什么领先的架构师对微服务架构系统很方便？**
在微服务架构中构建系统允许我们创建可以并行处理的独立服务。这些服务仍然需要相互沟通和合作。
独立团队通常不掌握全局，倾向于专注于自己的项目。为了帮助系统作为一个整体的协调和发展，独立团队需要一个对系统有高水平了解的领先架构师。
2.  **什么是康威定律？**
康威定律是一句格言，说软件结构复制了编写它的组织的通信结构。
这意味着，要改变软件的结构方式，组织需要改变，这是一项更加困难的任务。
为了成功地设计和发展大系统，需要将组织考虑在内并进行相应的规划。
3.  **技术债是如何引入的？**
有很多方法可以创造技术债务。
通常，技术债务分为以下四类之一或它们的混合:
*   发展太快而没有花时间分析其他选项
*   通过做出折衷以缩短开发时间，同时知道稍后需要修复组件
*   对当前的系统或工具没有足够好的理解，或者缺乏培训或专业知识
*   通过对外部问题做出不正确的假设，从而设计出不一定需要修复的东西
4.  **为什么创造一种文化很重要，这样我们就可以不断努力减少技术债务？**
重要的是要创造一种文化，这样我们就可以避免*软件腐烂*，这是由于增加现有软件的复杂性而导致的性能和可靠性的持续衰退。除非解决技术债务成为一个持续的过程，否则发布新版本的日常压力意味着我们将无法执行维护。
5.  **为什么记录发布中的问题并与团队的其他成员分享这些问题很重要？**
这很重要，因为每个团队都可以从他人的经验和解决方案中学习，并改进他们的流程。这也可以创造一种开放的文化，人们不怕为自己的错误负责。
6.  **验尸会议的主要目的是什么？**
事后分析会议的主要目的是创建后续任务，修复事故原因。为此，我们需要尽可能确信根本原因已经被成功检测到(这也是次要目标)。