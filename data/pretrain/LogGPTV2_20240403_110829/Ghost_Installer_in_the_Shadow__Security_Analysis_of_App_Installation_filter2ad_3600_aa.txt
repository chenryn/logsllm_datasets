title:Ghost Installer in the Shadow: Security Analysis of App Installation
on Android
author:Yeonjoon Lee and
Tongxin Li and
Nan Zhang and
Soteris Demetriou and
Mingming Zha and
XiaoFeng Wang and
Kai Chen and
Xiao-yong Zhou and
Xinhui Han and
Michael Grace
2017 47th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
Ghost Installer in the Shadow: Security Analysis of
App Installation on Android
Yeonjoon Lee1, Tongxin Li 2, Nan Zhang1, Soteris Demetriou3, Mingming Zha4
XiaoFeng Wang1, Kai Chen4, Xiaoyong Zhou5, Xinhui Han2, Michael Grace5
1Indiana University, Bloomington {yl52, nz3, xw7}@indiana.edu
2Peking University PI:EMAIL, PI:EMAIL
3University of Illinois at Urbana-Champaign PI:EMAIL
4Institute of Information Engineering, Chinese Academy of Sciences PI:EMAIL, PI:EMAIL
5Samsung Research America PI:EMAIL, PI:EMAIL
Abstract—Android allows developers to build apps with app
installation functionality themselves with minimal restriction and
support like any other functionalities. Given the critical impor-
tance of app installation, the security implications of the approach
can be signiﬁcant. This paper reports the ﬁrst systematic study on
this issue, focusing on the security guarantees of different steps
of the App Installation Transaction (AIT). We demonstrate the
serious consequences of leaving AIT development to individual
developers: most installers (e.g., Amazon AppStore, DTIgnite,
Baidu) are riddled with various security-critical loopholes, which
can be exploited by attackers to silently install any apps, ac-
quiring dangerous-level permissions or even unauthorized access
to system resources. Surprisingly, vulnerabilities were found in
all steps of AIT. The attacks we present, dubbed Ghost Installer
Attack (GIA), are found to pose a realistic threat to Android
ecosystem. Further, we developed both a user-app-level and a
system-level defense that are innovative and practical.
I.
INTRODUCTION
Android dominated the mobile operating system (OS)
market with an 87.6% share in the second quarter of 2016 [4].
The strength of Android is its open-source nature, which
enables convenient customizations and adaption to different
needs. However, with the blessing from its ﬂexibility and
decentralized management, comes the curse of fragmentation
and confusion, which can have signiﬁcant security impacts. No
standards are available to control the security qualities of the
system apps pre-installed by different device manufacturers
and carriers, and no guidelines are available to inform the
app developers precisely what the OS can protect and what
should be taken care of by the developers themselves. Even
for services as critical as app installation, all Android provides
are nothing more than nuts and bolts (i.e., AOSP Download
Manager, Package Manager) and on top of them, the develop-
ers and device manufacturers are supposed to build up their
own services. The security implications of this treatment can be
signiﬁcant, which however has never been investigated before.
Security risks in app installation. On Android, an app can be
installed or updated programmatically, with or without human
interventions. More speciﬁcally, consider app installation as
a transaction. At the center of it is an installer app (app
with installation capability: e.g., appstore app) either with or
without the INSTALL_PACKAGES permission. In the former
case, the installer app installs an apps silently (without user
interaction) by directly invoking the Package Manager Service
(PMS), whereas in the latter case the installer app presents a
consent dialog to get user’s approval by invoking the system’s
Package Installer Activity (PIA) before app installation. Either
way, the installer goes through four steps to complete the
transaction: (1) it gets an installation request; (2) it downloads
a new app itself or through the Download Manager (DM) to the
SD-Card or internal storage; (3) it invokes the PMS or PIA for
installation; (4) the PMS or PIA installs the new app. Note that
DM, PMS and PIA are the building blocks Android provides to
the app developers; all other design and implementation details
of the app installation transaction (AIT) are left in their hands.
This treatment is in line with Android’s design philoso-
phy, which fosters diversity with minimal restrictions from
the framework end. However, for critical functionalities like
app installation, one may question the decision to leave the
design and implementation to the 3rd party app developers.
If something goes wrong, the consequences could be serious,
impacting not only the app itself but the whole system. For
example, a vulnerable installer app could be exploited to install
a malicious app or even a problematic system app to access
sensitive user resources or even gain system privileges.
Ghost installer attacks. Our scrutiny of the app installation
transaction (AIT) and popular installers reveals that almost all
AITs are vulnerable and can be exploited, and every step of
the AIT contains security-critical weaknesses. At the ﬁrst step
of AIT, we found a vulnerability in Amazon AppStore (2nd
most popular Android appstore [18]) that allows a malicious
app in the same device to command the AppStore to install
or uninstall any apps. A more generic threat that affects all
appstore apps is the redirect Intent attack: when an appstore
app receives a request to display an app for installation, a
malicious app in the background can change the app being
displayed to a different app. Also, a vulnerability we found
in Android DM allows a malicious app to damage, redirect,
acquire the ﬁle or even deny an app installation.
Most
interestingly, we found that except Google Play,
most apps (including Amazon, Qihoo360, etc) utilized the
SD-Card to temporarily hold the APK ﬁle to be installed.
Although most installers have put effort to secure the SD-Card
based installation (e.g., integrity veriﬁcation of APK ﬁles),
by defeating them, we show that building such protection is
actually non-trivial: we demonstrate the Time of Check to Time
of Use (TOCTOU) vulnerability in all installers using the SD-
Card, in which the malicious app can effectively identify the
time window between the integrity check and the installation to
2158-3927/17 $31.00 © 2017 IEEE
DOI 10.1109/DSN.2017.33
403
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:04:31 UTC from IEEE Xplore.  Restrictions apply. 
replace the APK ﬁles. The impacts of the attack are signiﬁcant,
enabling the adversary to leverage the installer apps with to
silently install any third-party apps including system apps.
We successfully implemented all the exploits (demos [8]),
dubbed Ghost Installer Attack (GIA), and demonstrated their
signiﬁcant impacts. Particularly, by exploiting Digital Turbine
Ignite (DT Ignite), an app used by 30+ world’s leading carriers
(Verizon, AT&T, T-Mobile, Vodafone, Singtel, etc)
[12] to
push apps to their customers, GIA was shown to be capable
of affecting hundreds of millions of users world-wide.
Defense against GIAs. We propose two solutions that address
GIAs in SD-Card based installation without requiring the
developers to use the internal-storage. One approach modiﬁes
the FUSE daemon, a wrapper of raw storage devices, to set
the APK ﬁles to read-only but writable only by its owner
as they are downloaded. The other approach only requires an
unprivileged app, which detects an installation event, collects
the signature of an app’s certiﬁcate before it can be replaced
and later veriﬁes it against
the app installed. Further we
developed a set of system solutions to address the security risks
caused by the redirect Intents. All new protection mechanisms
have been evaluated, found to work effectively and efﬁciently
against GIAs, incurring negligible performance impact.
Contributions. The contributions are outlined as follows:
• Systematic study on App installation. We conducted the
ﬁrst systematic study on the app installation process on An-
droid and discovered signiﬁcant security risks never known
before. Our research demonstrates that every step of the
installation transaction contains security-critical ﬂaws that can
be exploited, opening the door to serious security breaches
(installing unwanted apps, privilege escalation, etc.) with
devastating consequences. The impacts of our ﬁndings are
signiﬁcant, affecting majority of installer apps, most Android
devices in the market and hundreds of millions of Android
users. Most importantly, our study points to the problem in
Android’s design philosophy, highlighting the need to identify
the functionality with system-wide impacts and ensure that
it is securely designed and released to the public as a fully-
developed service.
• New protection. With deep understanding of GIA threat, we
present a set of lightweight and effective defense strategies that
are non-trivial as we achieve it with minimal modiﬁcation on
Android. Our system-level protection can be built into systems
without undermining the strategic decisions (using SD-Card)
of appstore app developers. The user-level defense app can
protect users even when they are using insecure installer apps.
II. BACKGROUND
Nuts and bolts. Android apps can be installed in two ways:
either through an app with the INSTALL_PACKAGES permis-
sion or the PackageInstallerActivity class. In the
former case, an app granted with the permission can silently
install new apps by calling the installPackage method
of the PackageManager class. Such an app typically also
has the DELETE_PACKAGES permission to silently uninstall
apps. Due to the critical functionalities of the permissions,
their protection-level are signatureOrSystem, which is
the highest that can be assigned to a permission. The latter
approach, utilized by less privileged apps, prompts a consent
dialogue to users to get approval for installation.
(cid:34)(cid:1)(cid:2)(cid:5)(cid:12)(cid:1)(cid:33)(cid:1)(cid:2)(cid:28)(cid:28)(cid:1)(cid:5)(cid:26)(cid:30)(cid:31)(cid:14)(cid:24)(cid:24)(cid:14)(cid:31)(cid:22)(cid:27)(cid:26)(cid:1)(cid:12)(cid:29)(cid:14)(cid:26)(cid:30)(cid:14)(cid:16)(cid:31)(cid:22)(cid:27)(cid:26)
(cid:11)(cid:29)(cid:17)(cid:26)(cid:28)(cid:1)(cid:25)(cid:18)(cid:1)(cid:2)(cid:5)(cid:12)
(cid:11)(cid:29)(cid:17)(cid:26)(cid:1)(cid:35)(cid:37)(cid:1)(cid:2)(cid:6)(cid:13)(cid:1)(cid:6)(cid:26)(cid:33)(cid:27)(cid:16)(cid:14)(cid:31)(cid:22)(cid:27)(cid:26)
(cid:2) (cid:2)(cid:16)(cid:31)(cid:22)(cid:27)(cid:26)(cid:30)(cid:1)(cid:31)(cid:21)(cid:14)(cid:31)(cid:1)(cid:22)(cid:26)(cid:33)(cid:27)(cid:23)(cid:18)(cid:1)(cid:2)(cid:6)(cid:13)
(cid:11)(cid:29)(cid:17)(cid:26)(cid:1)(cid:36)(cid:37)(cid:1)(cid:2)(cid:10)(cid:7)(cid:1)(cid:5)(cid:27)(cid:34)(cid:26)(cid:24)(cid:27)(cid:14)(cid:17)
(cid:2) (cid:2)(cid:16)(cid:31)(cid:22)(cid:27)(cid:26)(cid:30)(cid:1)(cid:31)(cid:21)(cid:14)(cid:31)(cid:1)(cid:17)(cid:27)(cid:34)(cid:26)(cid:24)(cid:27)(cid:14)(cid:17)(cid:1) (cid:2)(cid:10)(cid:7)
(cid:11)(cid:29)(cid:17)(cid:26)(cid:1)(cid:37)(cid:37)(cid:1)(cid:6)(cid:26)(cid:30)(cid:31)(cid:14)(cid:24)(cid:24)(cid:14)(cid:31)(cid:22)(cid:27)(cid:26)(cid:1) (cid:13)(cid:29)(cid:22)(cid:20)(cid:20)(cid:18)(cid:29)
(cid:2) (cid:2)(cid:16)(cid:31)(cid:22)(cid:27)(cid:26)(cid:30)(cid:1)(cid:31)(cid:21)(cid:14)(cid:31)(cid:1)(cid:31)(cid:29)(cid:22)(cid:20)(cid:20)(cid:18)(cid:29)(cid:1)(cid:22)(cid:26)(cid:30)(cid:31)(cid:14)(cid:24)(cid:24)(cid:14)(cid:31)(cid:22)(cid:27)(cid:26)
(cid:11)(cid:29)(cid:17)(cid:26)(cid:1)(cid:38)(cid:37)(cid:1)(cid:2)(cid:10)(cid:7)(cid:1)(cid:6)(cid:26)(cid:30)(cid:31)(cid:14)(cid:24)(cid:24)
(cid:2) (cid:2)(cid:16)(cid:31)(cid:22)(cid:27)(cid:26)(cid:30)(cid:1)(cid:31)(cid:21)(cid:14)(cid:31)(cid:1)(cid:22)(cid:26)(cid:30)(cid:31)(cid:14)(cid:24)(cid:24)(cid:1)(cid:2)(cid:10)(cid:7)
(cid:3)(cid:22)(cid:25)(cid:30)(cid:16)(cid:1)
(cid:8)(cid:17)(cid:28)(cid:28)(cid:14)(cid:19)(cid:21)(cid:24)(cid:19)(cid:1)
(cid:11)(cid:17)(cid:27)(cid:31)(cid:21)(cid:15)(cid:17)
(cid:9)(cid:29)(cid:20)(cid:17)(cid:27)(cid:1)(cid:2)(cid:26)(cid:26)(cid:28)
(cid:13)(cid:28)(cid:17)(cid:27)(cid:1)(cid:5)(cid:24)(cid:29)(cid:17)(cid:27)(cid:14)(cid:15)(cid:29)(cid:21)(cid:25)(cid:24)
(cid:2)(cid:5)(cid:12)(cid:1)(cid:5)(cid:24)(cid:29)(cid:17)(cid:27)(cid:18)(cid:14)(cid:15)(cid:17)
(cid:2)(cid:16)(cid:31)(cid:22)(cid:33)(cid:22)(cid:31)(cid:35)(cid:36)(cid:1) (cid:12)(cid:18)(cid:29)(cid:33)(cid:22)(cid:16)(cid:18)(cid:36)(cid:1) (cid:3)(cid:29)(cid:27)(cid:14)(cid:17)(cid:16)(cid:14)(cid:30)(cid:31)(cid:11)(cid:18)(cid:16)(cid:18)(cid:22)(cid:33)(cid:18)(cid:29)(cid:36)(cid:1) (cid:5)(cid:14)(cid:31)(cid:14)(cid:15)(cid:14)(cid:30)(cid:18)(cid:1)(cid:14)(cid:26)(cid:17)(cid:1)(cid:18)(cid:31)(cid:16)(cid:38)
(cid:40)(cid:2)(cid:9)(cid:12)(cid:10)(cid:39)(cid:5)(cid:18)(cid:19)(cid:14)(cid:32)(cid:24)(cid:31) (cid:9)(cid:11)(cid:1)(cid:42)(cid:29)(cid:17) (cid:10)(cid:14)(cid:29)(cid:31)(cid:35)(cid:41)(cid:1)(cid:5)(cid:27)(cid:34)(cid:26)(cid:24)(cid:27)(cid:14)(cid:17)(cid:8)(cid:14)(cid:26)(cid:14)(cid:20)(cid:18)(cid:29)(cid:36)(cid:1) (cid:12)(cid:18)(cid:24)(cid:19)(cid:39)(cid:22)(cid:25)(cid:28)(cid:24)(cid:18)(cid:25)(cid:18)(cid:26)(cid:31)(cid:18)(cid:17)(cid:1) (cid:16)(cid:27)(cid:17)(cid:18)
(cid:4)(cid:25)(cid:32)(cid:24)(cid:22)(cid:25)(cid:14)(cid:16)(cid:1)(cid:3)(cid:25)(cid:23)(cid:26)(cid:25)(cid:24)(cid:17)(cid:24)(cid:29)
(cid:5)(cid:24)(cid:28)(cid:29)(cid:14)(cid:22)(cid:22)(cid:1)(cid:12)(cid:27)(cid:21)(cid:19)(cid:19)(cid:17)(cid:27)(cid:1)(cid:7)(cid:25)(cid:19)(cid:21)(cid:15)(cid:1)
(cid:4)(cid:14)(cid:24)(cid:24)(cid:1)(cid:10)(cid:14)(cid:16)(cid:23)(cid:14)(cid:20)(cid:18)(cid:8)(cid:14)(cid:26)(cid:14)(cid:20)(cid:18)(cid:29)(cid:36)(cid:1)(cid:6)(cid:26)(cid:31)(cid:18)(cid:26)(cid:31)(cid:1)(cid:31)(cid:27)(cid:1)(cid:10)(cid:14)(cid:16)(cid:23)(cid:14)(cid:20)(cid:18)(cid:6)(cid:26)(cid:30)(cid:31)(cid:14)(cid:24)(cid:24)(cid:18)(cid:29)(cid:2)(cid:16)(cid:31)(cid:22)(cid:33)(cid:22)(cid:31)(cid:35)
(cid:2)(cid:10)(cid:6)(cid:1)(cid:5)(cid:24)(cid:28)(cid:29)(cid:14)(cid:22)(cid:22)(cid:1)(cid:3)(cid:25)(cid:23)(cid:26)(cid:25)(cid:24)(cid:17)(cid:24)(cid:29)
Fig. 1: App Installation Transaction (AIT) steps
(cid:10)(cid:14)(cid:16)(cid:23)(cid:14)(cid:20)(cid:18)(cid:8)(cid:14)(cid:26)(cid:14)(cid:20)(cid:18)(cid:29)(cid:36)(cid:1)(cid:10)(cid:14)(cid:16)(cid:23)(cid:14)(cid:20)(cid:18)(cid:6)(cid:26)(cid:30)(cid:31)(cid:14)(cid:24)(cid:24)(cid:18)(cid:29)(cid:2)(cid:16)(cid:31)(cid:22)(cid:33)(cid:22)(cid:31)(cid:35)
Note that protection-level signatureOrSystem per-
missions such as INSTALL_PACKAGES and DELETE_PACK
AGES are only granted to apps that are part of the system
image or signed with the phone’s platform key. Hence, parties
capable of pre-installing apps to the system image or control-
ling the phone’s platform key are given the privilege to grant
those permissions with responsibility. Examples of the parties
here include phone manufacturers, carriers, etc. However as
shown in Section IV, surprisingly, 10% of the pre-installed
apps were granted with the INSTALL PACKAGES permis-
sion. Throughout the paper, we show the serious consequences
that can be caused by such permission abuse.
App Installation Transaction. As shown in Figure 1, a typical
transaction includes AIT Invocation, APK Download,
Installation trigger and APK Install. More
speciﬁcally, an AIT starts with an Intent delivered or a set
of user interactions that trigger the whole transaction, which
is followed by the download of the target apk (the APK ﬁle
to be installed) and its related meta-data, such as a hash of the
binary ﬁle for veriﬁcation. This step can be performed through
Android Download Manager or also be self-implemented.
Once the download is completed, an Intent or an API can
be used to launch the installation process, through the PIA or
PMS. Finally, the PMS or PIA installs the app, interacting with
the user (e.g., consent dialog) when necessary.
As mentioned earlier, AITs are implemented by different
app developers, based on the nuts and bolts (e.g., permission,
PMS, PIA, etc.) provided by Android. As a result, design
and components of each AIT can vary (see Figure 1). Also
the detailed execution of AITs are actually quite diverse: e.g.,
some apps are ﬁrst installed from appstores and then updated
from their developers’ sites; some pre-installed apps silently
install other apps and others are side-loaded by users. With
such diversity, it becomes less clear whether these AITs are
indeed implemented in a safe way.
Understanding SD-Card usage of 3rd party appstores.
Storage selection in Android is much subtler than it appears to
be. To install an app, developers need to temporarily save the
app ﬁle (.apk) either to the internal storage or the SD-Card.
An obvious option seems to be the internal storage since it is
more secure (by default, apps can only access its own folder)
while folders in the SD-Card are exposed to any app that has
the WRITE_EXTERNAL_STORAGE permission. Surprisingly,
however, besides Google Play, as shown in Section IV, most
3rd party appstore apps including Amazon appstore and Qi-
hoo360 (a renowned security company with a revenue of 1.8
Billion USD in 2015) choose the SD-Card even if the appstore
owners have to put additional protection in place to ensure
404
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:04:31 UTC from IEEE Xplore.  Restrictions apply. 
the integrity during the app install process. Examples of such
protection include: 1) elimination of the permission consent
dialog to ensure that the APK ﬁle cannot be modiﬁed when
the user is viewing the consent (e.g., the Amazon appstore app
installed on Galaxy S6 Verizon), 2) APK ﬁle name randomiza-
tion to prevent the attacker from locating the ﬁle and replacing
it, 3) hash veriﬁcation of APK ﬁle after download, 4) use of
the Android API installPackageWithVerification
for integrity check, 5) DRM in Amazon appstore apps (Sec-
tion III) and others. With such effort, the prevalence (97.1%
of pre-installed apps, 83.7% of Google Play apps) of these
potentially vulnerable installers (Section IV) still becomes a
serious concern. In our research, we investigated the rationale
behind this insecure storage choice. Apparently, the driving
force here is the need to be compatible with low-end phones.
Installing apps through internal storage takes twice the