# Title: Ghost Installer in the Shadow: Security Analysis of App Installation on Android

## Authors:
- Yeonjoon Lee
- Tongxin Li
- Nan Zhang
- Soteris Demetriou
- Mingming Zha
- XiaoFeng Wang
- Kai Chen
- Xiaoyong Zhou
- Xinhui Han
- Michael Grace

### Affiliations:
- **Indiana University, Bloomington**: Yeonjoon Lee, Nan Zhang, XiaoFeng Wang
  - {yl52, nz3, xw7}@indiana.edu
- **Peking University**: Tongxin Li, Xinhui Han
  - PI:EMAIL, PI:EMAIL
- **University of Illinois at Urbana-Champaign**: Soteris Demetriou
  - PI:EMAIL
- **Institute of Information Engineering, Chinese Academy of Sciences**: Mingming Zha, Kai Chen
  - PI:EMAIL, PI:EMAIL
- **Samsung Research America**: Xiaoyong Zhou, Michael Grace
  - PI:EMAIL, PI:EMAIL

### Abstract:
Android allows developers to implement app installation functionalities with minimal restrictions. Given the critical importance of app installation, the security implications of this approach can be significant. This paper presents the first systematic study on the security guarantees of different steps in the App Installation Transaction (AIT). We demonstrate that most installers, such as Amazon AppStore, DTIgnite, and Baidu, contain various security-critical loopholes. These vulnerabilities can be exploited by attackers to silently install any apps, acquire dangerous-level permissions, or gain unauthorized access to system resources. Surprisingly, vulnerabilities were found in all steps of AIT. The attacks we present, dubbed Ghost Installer Attack (GIA), pose a realistic threat to the Android ecosystem. Additionally, we developed both user-app-level and system-level defenses that are innovative and practical.

## I. Introduction
Android dominates the mobile operating system market with an 87.6% share as of the second quarter of 2016 [4]. Its open-source nature enables convenient customizations and adaptations to different needs. However, this flexibility and decentralized management also introduce fragmentation and confusion, which can have significant security impacts. There are no standards to control the security qualities of system apps pre-installed by different device manufacturers and carriers, and no guidelines for app developers on what the OS can protect and what they must handle themselves. Even for critical services like app installation, Android provides only basic components (e.g., AOSP Download Manager, Package Manager), leaving the rest to developers and device manufacturers. The security implications of this approach are significant but have not been thoroughly investigated before.

### Security Risks in App Installation
On Android, an app can be installed or updated programmatically, with or without human intervention. Consider app installation as a transaction involving four steps:
1. **Installation Request**: The installer app receives a request.
2. **APK Download**: The new app is downloaded to the SD-Card or internal storage.
3. **Installation Trigger**: The installer app invokes the Package Manager Service (PMS) or Package Installer Activity (PIA).
4. **APK Install**: The PMS or PIA installs the new app.

While Android provides basic components (DM, PMS, PIA), the design and implementation details of the AIT are left to the developers. This aligns with Android's philosophy of fostering diversity with minimal restrictions. However, for critical functionalities like app installation, this approach can lead to serious consequences if something goes wrong, affecting not only the app itself but the entire system. For example, a vulnerable installer app could be exploited to install malicious apps or even problematic system apps, potentially accessing sensitive user resources or gaining system privileges.

### Ghost Installer Attacks
Our analysis of AIT and popular installers reveals that almost all AITs are vulnerable and can be exploited, with each step containing security-critical weaknesses. For instance, a vulnerability in Amazon AppStore (the second most popular Android app store [18]) allows a malicious app on the same device to command the AppStore to install or uninstall any apps. A more generic threat is the redirect Intent attack, where a malicious app can change the app being displayed for installation. Additionally, a vulnerability in Android DM allows a malicious app to damage, redirect, acquire, or deny an app installation.

Most interestingly, except for Google Play, most apps (including Amazon, Qihoo360, etc.) use the SD-Card to temporarily hold the APK file. Although many installers have implemented protections (e.g., integrity verification of APK files), these protections can be defeated. We demonstrate the Time of Check to Time of Use (TOCTOU) vulnerability in all SD-Card-based installers, where a malicious app can identify the time window between the integrity check and the installation to replace the APK files. The impact of this attack is significant, enabling adversaries to leverage installer apps to silently install any third-party apps, including system apps.

We successfully implemented and demonstrated the Ghost Installer Attack (GIA) exploits, showing their significant impacts. By exploiting Digital Turbine Ignite (DT Ignite), an app used by 30+ leading carriers (Verizon, AT&T, T-Mobile, Vodafone, Singtel, etc.), GIA was shown to affect hundreds of millions of users worldwide.

### Defense Against GIAs
We propose two solutions to address GIAs in SD-Card-based installations without requiring developers to use internal storage. One approach modifies the FUSE daemon to set APK files to read-only but writable only by their owner during download. The other approach uses an unprivileged app to detect installation events, collect the signature of an appâ€™s certificate before it can be replaced, and verify it against the installed app. We also developed a set of system solutions to address the security risks caused by redirect Intents. All new protection mechanisms have been evaluated and found to be effective and efficient against GIAs, with negligible performance impact.

### Contributions
- **Systematic Study on App Installation**: We conducted the first systematic study on the app installation process on Android, discovering significant security risks previously unknown. Our research demonstrates that every step of the installation transaction contains security-critical flaws that can be exploited, leading to serious security breaches (installing unwanted apps, privilege escalation, etc.). The impacts of our findings are significant, affecting the majority of installer apps, most Android devices in the market, and hundreds of millions of Android users. Our study highlights the need to identify system-wide impactful functionalities and ensure they are securely designed and released as fully-developed services.
- **New Protection**: With a deep understanding of the GIA threat, we present a set of lightweight and effective defense strategies. Our system-level protection can be built into systems without undermining the strategic decisions (using SD-Card) of appstore app developers. The user-level defense app can protect users even when they are using insecure installer apps.

## II. Background
### Nuts and Bolts
Android apps can be installed in two ways:
1. **Through an app with the INSTALL_PACKAGES permission**: An app with this permission can silently install new apps by calling the `installPackage` method of the `PackageManager` class. Such an app typically also has the `DELETE_PACKAGES` permission to silently uninstall apps. Due to the critical nature of these permissions, their protection level is `signatureOrSystem`, the highest that can be assigned to a permission.
2. **Through the PackageInstallerActivity class**: Less privileged apps prompt a consent dialog to get user approval for installation.

### App Installation Transaction (AIT)
A typical AIT includes the following steps:
1. **AIT Invocation**: An Intent is delivered or user interactions trigger the transaction.
2. **APK Download**: The target APK file and related metadata (e.g., a hash of the binary file for verification) are downloaded. This can be done through the Android Download Manager or self-implemented.
3. **Installation Trigger**: An Intent or API is used to launch the installation process through the PIA or PMS.
4. **APK Install**: The PMS or PIA installs the app, interacting with the user (e.g., consent dialog) when necessary.

### Understanding SD-Card Usage by Third-Party Appstores
Storage selection in Android is subtle. To install an app, developers need to temporarily save the APK file either to the internal storage or the SD-Card. Internal storage is more secure (apps can only access their own folder by default), while folders on the SD-Card are exposed to any app with the `WRITE_EXTERNAL_STORAGE` permission. Surprisingly, most third-party appstore apps, including Amazon Appstore and Qihoo360, choose the SD-Card, even though they must implement additional protections to ensure integrity during the app install process. Examples of such protections include:
- Elimination of the permission consent dialog to prevent APK file modification.
- Randomization of APK file names to prevent attackers from locating and replacing the file.
- Hash verification of the APK file after download.
- Use of the `installPackageWithVerification` API for integrity checks.
- DRM in Amazon appstore apps.

Despite these efforts, the prevalence of potentially vulnerable installers (97.1% of pre-installed apps, 83.7% of Google Play apps) remains a serious concern. Our research investigates the rationale behind this insecure storage choice, revealing that the driving force is the need to be compatible with low-end phones, as installing apps through internal storage requires twice the storage space.

---

This optimized version of the text aims to be more clear, coherent, and professional, ensuring that the key points and contributions are effectively communicated.