title:Deobfuscation of virtualization-obfuscated software: a semantics-based
approach
author:Kevin Coogan and
Gen Lu and
Saumya K. Debray
Deobfuscation of Virtualization-Obfuscated Software
A Semantics-Based Approach
Kevin Coogan
Gen Lu
Department of Computer
Department of Computer
Science
University of Arizona
P.O. Box 210077
Science
University of Arizona
P.O. Box 210077
Saumya Debray
Department of Computer
Science
University of Arizona
P.O. Box 210077
Tucson, AZ 85721-0077
PI:EMAIL
Tucson, AZ 85721-0077
PI:EMAIL
Tucson, AZ 85721-0077
PI:EMAIL
ABSTRACT
When new malware are discovered, it is important for researchers
to analyze and understand them as quickly as possible. This task
has been made more difﬁcult in recent years as researchers have
seen an increasing use of virtualization-obfuscated malware code.
These programs are difﬁcult to comprehend and reverse engineer,
since they are resistant to both static and dynamic analysis tech-
niques. Current approaches to dealing with such code ﬁrst reverse-
engineer the byte code interpreter, then use this to work out the
logic of the byte code program. This outside-in approach produces
good results when the structure of the interpreter is known, but can-
not be applied to all cases. This paper proposes a different approach
to the problem that focuses on identifying instructions that affect
the observable behavior of the obfuscated code. This inside-out ap-
proach requires fewer assumptions, and aims to complement exist-
ing techniques by broadening the domain of obfuscated programs
eligible for automated analysis. Results from a prototype tool on
real-world malicious code are encouraging.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection—Invasive Soft-
ware
General Terms
Security
Keywords
virtualization, deobfuscation, dynamic analysis
1.
INTRODUCTION
Recent years have seen an increase in malware protected against
analysis and reverse engineering using virtualization obfuscators
such as VMProtect [16] and Code Virtualizer [11]. Such obfusca-
tors embed the original program’s logic within the byte code for a
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’11, October 17–21, 2011, Chicago, Illinois, USA.
Copyright 2011 ACM 978-1-4503-0948-6/11/10 ...$10.00.
(custom) virtual machine (VM) interpreter. It is difﬁcult to recover
the logic of the original program because an examination of the ex-
ecuted code reveals only the structure and logic of the byte-code in-
terpreter. Additionally, there may be an element of randomness in-
troduced into the construction of the custom VM, so that successful
reverse engineering of one instance of a virtualization-obfuscated
program does not help us deal with a different program obfuscated
using the same obfuscator. This makes the task of reverse engineer-
ing virtualization-obfuscated malware code a challenging one.
Existing techniques for reverse engineering of code protected by
virtualization-obfuscation [6, 12, 13] ﬁrst reverse engineer the VM
interpreter; use this information to work out individual byte code
instructions; and ﬁnally, recover the logic embedded in the byte
code program. This outside-in approach is very effective when the
structure of the interpreter meets certain requirements. However,
when the interpreter uses techniques that do not ﬁt these assump-
tions (e.g., direct-threading vs. byte-code interpretation), the deob-
fuscator may not work well. This approach may also not general-
ize easily to code that uses multiple layers of interpretation, since it
may be difﬁcult to distinguish between instruction fetches for vari-
ous interpreters.
This paper presents a prototype tool that uses a different ap-
proach to dealing with virtualization-obfuscated programs. We note
that for modern operating systems, programs interact with the sys-
tem through a predeﬁned interface, typically implemented as sys-
tem calls. We also note that malicious code must use this interface
if its behavior is to be meaningful or impactful in any way. We
identify instructions that interact with the system, then use various
analyses to determine which instructions affect this interaction, ei-
ther directly or indirectly. The resulting set of instructions is an ap-
proximation of the original code, while the remaining instructions
approximate the set of instructions that are semantically uninterest-
ing and can be discarded.
The previous work mentioned above produces excellent results
on those programs that match their assumptions. Because our ap-
proach does not attempt to recover the original instructions, but
rather attempts to capture the relevant behavior of the code, it will
not match those results for accuracy. However, our approach is
more general, and can be applied to a wider range of obfuscation
techniques. Thus, it should be seen as complementing existing ap-
proaches by providing information when others cannot.
The remainder of the paper is organized as follows: Section 2
describes the problem in detail and our approach to the analysis,
Section 3.1 describes our methodology for evaluation of our results,
Section 3.2 presents the results of our analysis, Section 5 discusses
related works and Section 6 presents our conclusions.
2752. DEOBFUSCATION
Static analysis of code that has been obfuscated using virtual-
ization reveals only the structure of the virtual machine interpreter.
Similarly, the dynamic trace of a virtualization-obfuscated executable
is a mix of virtual machine interpreter instructions and instructions
performing the work of the original program. It is often difﬁcult
to see the boundaries between these two sets of instructions when
looking at the trace. This task becomes even harder in the case that
multiple interpreters are used, or when the interpreter dispatch rou-
tine performs multiple operations (e.g., decrypting the address of
the next instruction).
Our approach is to try to identify instructions that are known
to be part of the original code, and eliminating those that are not,
while not assuming any information about the speciﬁc structure of
the interpreter or its dispatch routines.
In the remainder of this
section, we present an outline of our overall approach, then discuss
the parts of this approach that are original work in further detail.
2.1 Overall Approach
The analysis of an executable consists of the following steps:
1. Use a tracing tool such as qemu [3], OllyDbg, Ether [5], etc.
to obtain a low level execution trace that provides, at each ex-
ecution step, the address of the instruction executed, details
about this instruction (byte sequence, mnemonic, operands,
etc.), and the values of the machine registers.
2. Identify system calls and their arguments in this trace, using
a database that gives information about arguments and return
values of system calls.1 In general, not all system calls may
be of interest (e.g., those occurring in program start up or
exit code may not be interesting), so we allow the user to
optionally indicate which system calls to consider.
3. Use the available information to carry out analyses on the
instruction trace. These analyses ﬂag instructions that affect
the values of arguments, as well as conditional control ﬂow
and the ﬂow of control to system calls of interest. We refer
to these instructions as relevant instructions.
4. Build a subtrace from those instructions that have been marked
as relevant. This relevant subtrace approximates a dynamic
trace of the original, unobfuscated code.
2.2 Value-based Dependence Analysis
To motivate our approach to deobfuscation, we begin by con-
sidering the semantic intuition behind any deobfuscation process.
Obviously, when we simplify an obfuscated program, we cannot
hope to recover the code for the original program for two reasons.
First, in the case of malware we usually do not have access to the
source code. Second, even where source code is available, the pro-
gram may change during compilation, e.g., via compiler transfor-
mations such as in-lining or loop unrolling, so that the code for the
ﬁnal executable may be different from (though equivalent to) that
of the original program. All we can require, then, is that the pro-
cess of deobfuscation must be semantics-preserving: i.e., that the
1Our current implementation uses DLL calls as a proxy for system
calls, primarily because the Microsoft Windows API for DLLs is
better documented and also more consistent across different ver-
sions of the Windows operating system. This generally causes the
analysis to be sound but possibly conservative since not all DLL
calls lead to system calls. It is straightforward to modify this to han-
dle code that traps directly into the kernel without going through a
DLL: it simply requires examining the argument values of instruc-
tions that trap into the operating system kernel, e.g., sysenter, to
determine the syscall number and hence the system call itself.
code resulting from deobfuscation be semantically equivalent to the
original program.
In the context of malware analysis, a reasonable notion of se-
mantic equivalence seems to be that of observational equivalence,
where two programs are considered equivalent if they behave—i.e.,
interact with their execution environment—in the same way. Since
a program’s runtime interactions with the external environment are
carried out through system calls, this means that two programs are
observationally equivalent if they execute identical sequences of
system calls (together with the argument vectors to these calls).
This notion of program equivalence suggests a simple approach
to deobfuscation: identify all instructions that directly or indirectly
affect the values of the arguments to system calls; these instructions
are “semantically relevant.” Any remaining instructions, which are
by deﬁnition semantically irrelevant, may be discarded. The crucial
question then becomes that of identifying instructions that affect
the values of system call arguments: we discuss this issue in more
detail in the remainder of this section.
The goal of dependence analysis is to work back from system
call arguments to identify all instructions that directly or indirectly
affect the values of those arguments. At ﬁrst glance, this seems to
be a straightforward application of dynamic program slicing [14],
but this turns out to not be the case. The problem is that slicing
algorithms follow all control and data dependencies in the code (an
instruction I is control-dependent on an instruction J if the execu-
tion of J can affect whether or not control goes to I). Since the
instructions that implement a byte-code operation are all control-
dependent on the dispatch code in the interpreter, it follows that the
code that evaluates system call arguments and makes the system
calls will also be control dependent on the interpreter’s dispatch
code. The net result is that slicing algorithms end up including
most or all of the interpreter code in the computed slice and so
achieves little in the way of deobfuscation.
We use a different approach where we initially follow only data
dependencies, then consider control transfers separately. We use a
variation on the notion of use-deﬁnition (ud) chains [2]. Conven-
tional ud-chains link instructions that use a variable (register, mem-
ory location) to the instruction(s) that deﬁne it. While ud-chains are
usually considered in the context of static analysis of programs, it
is straightforward to adapt them to dynamic execution traces. In
this case, we must match each use of a variable with the instance of
the instruction in the trace that deﬁnes it.
Because they do not follow control dependencies, ud-chains avoid
the imprecision problem encountered with program slicing (control
ﬂow has to be identiﬁed separately in the deobfuscated code.) How-
ever, conventional ud-chains have precision problems of their own.
Consider the following instruction sequence:
/*I1*/ mov eax, [ecx+edx]
/*I2*/
/*I3*/
push eax
call print
The argument to the print call is loaded from memory by instruction
I1, then pushed onto the stack by instruction I2. A conventional
ud-chain calculation would show that instruction I1 uses ecx, edx,
and the memory address pointed to by adding these values together.
However, only the memory address is relevant to the value passed
to the system call. This results in a loss of precision. What we
should do, instead, is disregard the registers used for the address
computation and trace back to ﬁnd the (most recent) instruction
that wrote to the memory location being accessed.
To deal with this issue, we deﬁne a notion of value-based depen-
dence. The essential intuition here is that we focus on the ﬂow of
values rather than on details of the intermediate computations of
276the addresses of these values. This is done by redeﬁning the set of
locations used by an operand as follows:
use(op) =
if op is a register r then {r}
else if op speciﬁes a memory address a then {a}
else ∅;
We then identify the instructions that are relevant to the system
calls executed by the program as follows. For each system call in
the execution trace, we use ABI information to identify the argu-
ments that are being passed; we initialize a set S to the locations
holding these arguments. We then scan back in the trace, starting
at the the system call, and process each instruction I as follows: if
I deﬁnes a location ℓ ∈ S (which may be a register or a memory
location) then I is marked as relevant, ℓ is removed from S, and the
set of locations used by I according to our notion of value-based
dependencies (see use() above) is added to S. This backward scan
continues until S becomes empty or we reach the beginning of the
trace. The effect of the value-based dependence analysis described
above is that when an instruction I accesses a value from a memory
location a, the dependence analysis works back to ﬁnd the nearest
previous instruction that wrote to location a but ignores the details
of how the address a was computed by I.
Under certain conditions, the above algorithm may suffer from a
lack of precision. The problem arises when the parameter in ques-
tion is a pointer to a structure of some sort, and the function call
is using an element of that structure. The trace-back based on the
pointer itself only reveals the initialization of the structure. With-
out knowing the size of the structure, we will not recognize when
elements of the structure are being set. To solve this problem, prior
to performing our analysis, we must analyze the trace of the sys-
tem calls to identify what values are used, and if those values are
referenced using the pointer parameter.
For each system call, we create a set P, which holds all of the lo-
cations (register or memory locations) which might potentially be
pointers, and a set M, which holds all of the memory locations that
have been accessed through a pointer. Initially, P holds the stack
locations of the parameters to the call, and M is empty since we
have not encountered any uses yet. We scan forward through the
trace of the system call and look at each instruction I. Typically, I
will uses some number of locations (i.e., register and memory lo-
cations), which we will call ℓ1 , ℓ2 , . . . , to deﬁne some location,
which we will call ℓd. If I uses some location ℓi ∈ P to deﬁne ℓd,
then ℓd may potentially also be a pointer and is added to P. Fur-
thermore, if ℓi is known to access a memory location (e.g., eax in
the instruction “move ebx, [eax]), then the value v stored at ℓi is
also added to set M, since we know that it is a memory location
accessed through a suspected pointer. Finally, if instruction I de-
ﬁnes a location ℓd ∈ P, and I does not use any values from P, then
we can assume that I is redeﬁning ℓd as something other than a
pointer that we are tracking, and we remove ℓd from P. The algo-
rithm continues until P is empty, or until the end of the system call
trace is reached. At this point, the set M contains a set of memory
locations that we suspect are part of structures pointed to by one of
the system call parameters. These locations are added to the set S
above as part of the parameters passed to the call.
2.3 Relevant Conditional Control Flow
Value-based dependence analysis identiﬁes the instructions that
compute the values of system call arguments, but not the associ-
ated control ﬂow instructions. The problem with identifying rele-
vant control transfer instructions in virtualized code is that control
transfers may be handled by the same dispatch code that handles
other VM instructions.
In the popular IA-32 (x86) architecture
(the target of our analysis tool), conditional statements are typi-
cally implemented by setting the appropriate condition code ﬂags in
the designated eﬂags register, then executing a conditional branch
statement, e.g., jnz that reads this register. The target of the branch
statement is either the address given in the instruction or the address
of the next instruction in the code, depending on the value stored in
this eﬂags register. Hence, to recognize when conditional control
ﬂow is occurring, we can examine all control ﬂow statements (e.g.,
jumps, conditional jumps, calls) to see how their target addresses
are calculated. Any control ﬂow instruction whose target address
calculation is conditionally dependent on some previous value is an
implementation of a conditional branch statement.
It is possible that conditional logic will not be implemented ex-
actly as described above in virtualization-obfuscated code. For ex-
ample, VMProtect eliminates the branch statements and moves the
value of the ﬂags register to other general purpose registers for ma-
nipulation. However, while theoretically possible, we are not aware
of any obfuscation programs that implement conditional logic with-
out the use of the value of the eﬂags register at some point in the
code. Hence, we can examine target address calculations for any
dependence on the value of the eﬂags register as an indication of
conditional dependence. Even assuming that the ﬂags register is
used, there are still multiple ways to use this value to implement
conditional logic. Thus, our approach must be general enough to
handle any such implementation. We handle this problem through
the use of an equational reasoning system that was developed in-
house to handle x86 assembly code [4].
Our equational reasoning system translates each instruction in
the dynamic trace into an equivalent set of equations. We note that
in the dynamic trace, there may be multiple equations that deﬁne
the same register or memory location. To maintain the original
behavior of the trace, we number the variables as follows. A vari-
able appearing on the left hand side of an equation (i.e., a variable
that is being deﬁned) is numbered according to the order that its