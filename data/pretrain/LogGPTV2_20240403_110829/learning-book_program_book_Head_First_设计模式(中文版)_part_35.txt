有些人没有咖啡就活不下去；有些人则离不开
茶。两者共同的成分是什么？当然是咖啡因
了！
但还不只这样：茶和咖啡的冲泡方式非常相
似，不信你瞧瞧：
星巴兹咖啡师傅训练手册
各位师傅！准备星巴兹饮料时，请精确地遵循下面的冲泡
法：
星巴滋咖啡冲泡法
大致上一样，不是
（1）把水煮沸
吗？
（2）用沸水冲泡咖啡
（3）把咖啡倒进杯子
（4）加糖和牛奶
星巴滋茶冲泡法
（1）把水煮沸
（2）用沸水浸泡茶叶
（3）把茶倒进杯子
（4）加柠檬
所有的冲泡法都是星巴兹咖啡公司的商业机密，必须严格保密。
PDG
276
第8章
---
## Page 313
模板方法模式
快速搞定几个咖啡和茶的类
（用Java语言）
让我们扮演“代码师傅”，写一些代码来创建咖啡和茶。
下面是咖啡：
这是我们的如啡类，用来麦如啡。
这是我们的如啡冲泡法，直接取自
public class Coffee{
训练手册。
void prepareRecipe ()
每个步骤都被实现在分离的方法
boilWater () ;
brewCoffeeGrinds ();
中
pourInCup () ;
addSugarAndMi1k ();
public void boilWater()(
System.out.println ("Boiling water") ;
这里每个方法都实现了
算法中的一个步裸：素
public void brewCoffeeGrinds ()(
沸水、冲泡咖啡、把咖
System.out.println("Dripping Coffee through filter") ;
啡倒进杯子、加糖和
65。
public void pourInCup(){
System.out.println("Pouring into cup") ;
public void addSugarAndMilk() {
System.out.println ("Adding Sugar and Milk") ;
你现在的位置
277
---
## Page 314
茶的实现
接下来是茶
这看起来和前一页如唯的实现
public class Tea {
很像，其中第2和第4个步骤
void prepareRecipe(){
不一样，但基本上是相同的冲
boilWater ();
泡法。
steepTeaBag() ;
pourInCup() ;
addLemon () ;
public void boilWater() {
System.out.println("Boiling water");
/
请注意，这两个
public void steepTeaBag(){
这两个方法是
方法和如啡的方
System.out.println("Steeping the tea")
泡茶专有的。
法究全一样：也
就是说，在这里
public void addLemon (){
System.out.println("Adding Lemon") ;
出现了重复的代
码。
public void pourInCup()(
System.out.println("Pouring into cup");
我们发现了重复的代码，这
是好现象。这表示我们需要清
理一下设计了。在这里，既然茶和咖啡是
如此地相似，似乎我们应该将共同的部
分抽取出来，放进一个基类中。
PDG
278
8L
---
## Page 315
模板方法模式
设计谜题
你已经看到茶和咖啡的类存在着重复的代码。请研究茶和咖啡的类，然后绘制一个
类图，表达出你会如何重新设计这些类来删除重复代码：
PDG
你现在的位置，
279
---
## Page 316
第一版的抽象
先生，我能够抽取你的咖啡和茶吗？
看起来这个咖啡和茶类的设计练习相当直接。你的第
一版设计，可能看起来像这样：
6oliWater（）和pourCup（）方法被蕊个子
类所共享，所以被定义在这个超类中。
prepareRecipe(）方法在每个类
prepereRecipe()
中都不一样，所以定义成抽
boilWaterO
象方法。
pourinCup(
每个子类都覆盖了
每个子类都实现
Coffee
Tea
peepareRecipe()
prepareRecipe(
prepateRecipe(）方
自己的冲港法。
brewCofeeGrindso
stepTeaBag0
法，并实现自己的
Oewpuyefnsppe
addLemon)
冲滤法。
咖啡和茶特有的方法放在子
类中。
RAIN
POWER
我们的新设计你觉得怎样？嗯，再看一眼。我们是不是忽略了某些其他的共同点？咖啡和茶
之间还有什么是相似的？
280
第8章
---
## Page 317
模板方法模式
更进一步的设计···
所以，咖啡和茶还有什么其他的共同点呢？让我们先从冲泡法下手。
星巴滋咖啡冲泡法
（1）把水煮沸
（2）用沸水冲泡咖啡
（3）把咖啡倒进杯子
星巴就茶冲泡法
（4）加糖和牛奶
（1）把水煮沸
（2）用沸水浸泡茶叶
（3）把茶倒进杯子
（4）加柠檬
注意两份冲泡法都采用了相同的算法：
把水煮沸。
这两个并没有被
这两个已经被抽出
抽出来，但是他
②
用热水泡咖啡或茶。
来，放到基类中了。
们是一样的，只
是应用在不同的
③
把饮料倒进杯子。
饮科上。
4
在饮料内加入适当的调料。
PDG
那么，我们有办法将prepareRecipe（)也抽象化吗？是的，现在就来看看该怎么
做....
你现在的位置》
281
---
## Page 318
抽象算法
抽象prepareRecipe()
让我们从每一个子类（也就是咖啡和茶）中逐步抽象
prepareRecipe().....
1
我们所遇到的第一个问题，就是咖啡使用brewCoffeeGrinds（）和
addSugarAndMilkO方法，而茶使用steepTeaBagO和addLemon()
方法。
咖啡
茶
void prepareRecipe ()(
void prepareRecipe ()(
boilwater ();
boilWater();
brewCoffeeGrinds();
steepTeaBag();
pourInCup(）;
pourInCup();
addSugarAndMilk();
addLemon();
让我们来思考这一点：浸泡（steep）和冲泡（brew）差异其实不大。所以我们给它
一个新的方法名称，比方说brewO，然后不管是泡茶或冲泡咖啡我们都用这个名称。
类似地，加糖和牛奶也和加柠檬很相似：都是在饮料中加入调料。让我们也给它
一个新的方法名称来解决这个问题，就叫做addCondimentsO好了。这样一来，新的
prepareRecipeO方法看起来就像这样：
void prepareRecipe (){
boilWater () ;
brew():
pourInCup () ;
addCondiments();
2
现在我们有了新的prepareRecipeO方法，但是需要让它能够符合代码。要想
这么做，我们先从CaffeineBeverage（咖啡因饮料）超类开始：
282
第8章
---
## Page 319
模板方法模式
如啡因饮科是一个抽象类。
现在，用同一个prepareRecipe(）方法来处理茶和咖
啡。prepateRecipe（）被声9为linal，因为我们不最
public abstract class CaffeineBeverage{
望子类覆盖这个方法：我们将步裸2和步课4泛化
final void prepareRecipe()(
a
成为brew()oadiCondiments(),
boilWater ();
pourInCup ();
addCondiments();
因为咖啡和茶处理这些方法的做法不同，所
abstract void brew();
以这两个方法必须被声明为抽象，刺余的东
abstract void addCondiments();
西留给子类去摄心。
void boilWater(){
别忘了，我们将这些移到咖
1
啡因饮科类中（回到我们的类
void pourInCup(){
图）。
System.out.println("Pouring into cup");
3
最后，我们需要处理咖啡和茶类了。这两个类现在都是依赖超类（咖啡因饮料）来处理冲泡
法，所以只需要自行处理冲泡和添加调料部分：
茶和物明都是继承自咖啡因饮科。
public class Tea extends CaffeineBeverage(
public void brew()(
System.out.println("Steeping the tea");
1
茶需要定义btew（）和
publicvoid addCondiments（）(
System.out.println（*Adding Lemon"):
adCondiments）.这两个抽
象方法来自Beverage类。
咖啡也是一样，除了处理
对象是如啡，而调科是用
public class Coffee extends CaffeineBeverage
糖和件奶来取代茶包和
public void brew(){
柠檬。
System.out.println("Dripping Coffee through filter");
publicvoidaddCondiments）（
System.out.println("Adding Sugar and Milk");
-119
你现在的位置
283
---
## Page 320
咖啡因饮料的类图
rpenyourpencil
绘制出新类图。现在，我们已经将prepareRecipe()的实现放在
CaffeineBeverage类中了：
众
老
PDO
284
第8章
---
## Page 321
模板方法模式
我们做了什么？
我们已经明句了两种
冲泡法是基本相同的，
只是一些步需要不
同的实现。所以我们
泛化了冲泡法，把它
茶
放在基类。
①把水盘源
①把水煮溶
②围沸米冲泡咖啡粉
②围沸水浸泡茶叶
③把咖唯倒进杯子
③把茶倒进杯子
加糖和牛奶
加柠檬
咖啡因饮料
泛化
①把水煮沸
泛化
②冲泡
些步骤依赖
3把饮料倒进杯子
些步骤依赖
子类进行
④加调料
子类进行
咖啡子类
茶子类
②用沸水浸泡茶叶
④加柠檬
如啡因饮科了解和控制
②
用沸水冲泡咖啡
冲泡法的步骤，亲自执
行步骤（和步骤3，但依
4加糖和牛奶
赖茶和如啡来宠成步骤
2和步称4。
你现在的位置》
285
---
## Page 322
认识模板方法模式
认识模板方法
基本上，我们刚刚实现的就是模板方法模式。这是什么？让我们看看咖啡因饮料类
的结构，它包含了实际的“模板方法”：
prepareRecipe(）是我们的模板方法。
为什么：
public abstract class CaffeineBeverage(
因为
（1）毕竟它是一个方法。
void final prepareRecipe()(
（2）它用作一个算法的模板，在这
boilWater () ;
个例子中，算法是用来制作如啡
因饮科的。
brew () ;
在这个模板中，算法内的每
一个步骤都被一个方法代表
pourInCup () ;
了。
某些方法是由这个类（也就是超类）
addCondiments () ;
处理的….
·某些方法则是由子类处理的。
abstract void brew();
需要由子类提供的方法，必须
abstract void addCondiments();
在超类中声明为抽象。
void boilWater()(
//实现
)
void pourInCup(）(