title:BlueFi: bluetooth over WiFi
author:Hsun-Wei Cho and
Kang G. Shin
BlueFi: Bluetooth over WiFi
Hsun-Wei Cho and Kang G. Shin
The University of Michigan
ABSTRACT
Bluetooth and WiFi are the two dominant technologies enabling
the communication of mobile and IoT devices. Built with specific
design goals and principles, they are vastly different, each using its
own hardware and software. Thus, they are not interoperable and
require different hardware.
One may, therefore, ask a simple, yet seemingly impossible ques-
tion: “Can we transmit Bluetooth packets on commercial off-the-
shelf (COTS) WiFi hardware?” We answer this question positively
by designing, implementing and demonstrating a novel system
called BlueFi. It can readily run on existing, widely-deployed WiFi
devices without modifying NIC firmware/hardware. BlueFi works
by reversing the signal processing of WiFi hardware and finds spe-
cial 802.11n packets that are decodable by unmodified Bluetooth
devices. With BlueFi, every 802.11n device can be used simultane-
ously as a Bluetooth device, which instantly increases the coverage
of Bluetooth, thanks to the omnipresence of WiFi devices. BlueFi
is particularly useful for WiFi-only devices or environments.
We implement and evaluate BlueFi on devices with widely-
adopted WiFi chips. We also construct two prevalent end-to-end
apps — Bluetooth beacon and audio — to showcase the practical
use of BlueFi. The former allows ordinary APs to send location
beacons; the latter enables WiFi chips to stream Bluetooth audio in
real time.
CCS CONCEPTS
• Networks → Wireless access networks.
KEYWORDS
Cross-Technology Communication, Bluetooth, WiFi
1 INTRODUCTION
The future of wireless communication is nothing short of hetero-
geneous technologies, as each technology comes with its own set
of strengths and weaknesses. Tailored to its specific communica-
tion paradigm, each wireless standard/technology typically uses
vastly different bandwidth, modulation/coding, and medium access
control. This is bad news for supporting multiple heterogeneous
wireless standards as each technology requires dedicated hardware,
deployment and maintenance.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
SIGCOMM ’21, August 23–28, 2021, Virtual Event, USA
© 2021 Association for Computing Machinery.
ACM ISBN 978-1-4503-8383-7/21/08...$15.00
https://doi.org/10.1145/3452296.3472920
475
Bluetooth plays a key role in providing valuable functions such
as location and automation services in business, industrial or pub-
lic settings, such as retailers, buildings and airports. The number
of Bluetooth location-service devices is projected to grow at an
annual rate of 43% and reach 431M by 2023 [1]. Bluetooth is also
the dominant technology used for personal audio streaming. 1.1B
Bluetooth audio streaming devices were shipped in 2019 alone and
the figure is expected to grow 7% per year [2].
On the other hand, more than 30B WiFi devices have already
been shipped over the recent years, of which more than 13B de-
vices are in active use [3]. Many of these devices are Access Points
(APs) already deployed in the environments, providing pervasive
coverage of WiFi signals. Cisco estimates that the number of WiFi
hotspots in public alone will reach 628M by 2023 [4]. If WiFi hard-
ware can be concurrently re-purposed as Bluetooth hardware, it
will significantly increase the coverage of Bluetooth signals and
provide useful Bluetooth functions in environments where only
WiFi hardware is present. For example, to provide Internet con-
nectivity for billions of devices, WiFi APs have been ubiquitously
deployed, but almost none of them comes with Bluetooth hardware
or Bluetooth connectivity. Dedicated Bluetooth infrastructures are
also much less prevalent than WiFi infrastructures. Some desktops
or low-cost mobile devices are only equipped with WiFi chips. Most
USB WiFi NICs do not have Bluetooth functions. If WiFi–Bluetooth
communication is possible, every AP can also function as a Blue-
tooth device, such as a Bluetooth beacon. Alternatively, users can
use Bluetooth peripherals, such as Bluetooth headphones, with
WiFi-only devices. With WiFi-Bluetooth communication and by
leveraging the Broadcast Audio feature in the latest Bluetooth stan-
dard, it is even possible to use WiFi APs to broadcast audio streams
to nearby Bluetooth headphones and provide interactive and im-
mersive experiences in venues such as museums. Finally, thanks to
the connectivity of WiFi devices, these emulated BT functions can
be controlled remotely, even from cloud servers, which nicely fits
the IoT paradigm.
In this paper, we present BlueFi, a novel system that enables
the transmission of legitimate BT signals using 802.11n-compliant
hardware with simple driver updates. BlueFi requires no modi-
fication whatsoever to the hardware and firmware of Bluetooth
receivers and of WiFi chips. Since newer WiFi standards, such
as 802.11ac and 802.11ax, mandate the compliant hardware to be
backward-compatible with 802.11n, BlueFi can run on 802.11ac
and 802.11ax hardware as well. BlueFi carefully compensates and
reverses the operations of WiFi hardware, and crafts special WiFi
packets. These special packets, sent by our updated WiFi drivers,
result in 802.11n-compliant waveforms which are also decodable
by Bluetooth devices. Since it leverages the overall WiFi standard
and vendor-agnostic hardware functions, BlueFi can run on any
802.11n-compliant chips, instead of specific chips from particular
manufacturers.
SIGCOMM ’21, August 23–28, 2021, Virtual Event, USA
Hsun-Wei Cho and Kang G. Shin
However, transmitting BT signals using WiFi hardware is very
challenging since the two wireless standards are very different from
each other. At the highest level, Bluetooth encodes the information
in the time domain whereas WiFi (specifically, 802.11a/g/n/ac/ax)
uses OFDM and encodes the information in the frequency domain.
Furthermore, most of the bit manipulation and signal processing
will be automatically applied by WiFi hardware, and they cannot
be bypassed. These operations will appear as signal impairments
when a Bluetooth waveform is transmitted. We identify four major
sources of impairments introduced by WiFi hardware.
I1. Cyclic Prefix (CP) Insertion: OFDM systems use CP to
overcome inter-symbol interference (ISI). However, a small portion
of the Bluetooth waveform we want to transmit will be overridden
by this CP insertion, which is a copy of the tail of an OFDM sym-
bol. Specifically, one WiFi symbol corresponds to approximately
4 Bluetooth bits. Therefore, part of the IQ waveform in bit 3 will
overwrite the IQ waveform in bit 0. We find a Bluetooth receiver
unable to pick up the signal without carefully compensating for
the CP insertion process.
I2. QAM Modulation: OFDM encodes the information in the
frequency domain before applying IFFT to generate the time-domain
signal. Although we can use FFT to get the frequency-domain equiv-
alent of a Bluetooth waveform, we cannot perfectly reconstruct the
frequency-domain signal since a WiFi transmitter can only gener-
ate constellations with a very coarse resolution in the frequency
domain. For example, using 64 QAM, samples at each subcarrier
in the frequency domain must be selected from one of the 64 con-
stellations. The difference between the selected constellation and
the ideal value causes impairments in the frequency domain and
subsequently in the time domain. Selecting the optimal constel-
lations for the best Bluetooth performance can be formulated as
an integer-programming (IP) problem and hence is NP-Complete.
Solving the IP problem by exhaustive search is nearly impossible
for this problem size.
I3. Pilots and Nulls: Not all subcarriers in one OFDM symbol
are used for data transmission. Four of the subcarriers are for pi-
lot signals and they are, on average, of higher magnitudes than
those for data transmission. In contrast, some subcarriers, such
as subcarrier 0, must be 0. These pilots and nulls will corrupt the
transmission waveform if they are too close to the center frequency
of a Bluetooth channel.
I4. FEC Coder: WiFi uses forward error correction (FEC) to
combat communication errors. Since FEC encoders add redundancy
to the bit-stream, some bits are related at the encoder’s output.
So, the encoder cannot generate arbitrary sequences. BlueFi must
thus decide which bits are more important than others and find
an input sequence that minimizes the important bits’ hamming
distance between the target output sequence and the reconstructed
output sequence.
We have designed BlueFi to overcome the above impairments,
and tested it on real, widely-adopted WiFi chips to find the trans-
mitted signals are correctly decoded by conventional, unmodified
Bluetooth devices. Although these impairments degrade the signal
quality, the received signal strength is actually higher since WiFi
is allowed to transmit at high power. We have also evaluated the
effect of each impairment.
BlueFi enables tremendous opportunities for real-world appli-
cations. For example, BlueFi makes it possible to send Bluetooth
beacons using WiFi infrastructures that have already been deployed
almost everywhere. This will be very useful, especially in corporate,
business or public environments, to provide useful features, such as
way-finding, navigation, proximity marketing and more, all besides
WiFi connectivity, simultaneously. Because of such market needs,
various solutions have already been proposed. For example, the
Cisco Virtual Beacon [5] adds the Bluetooth beacon functionality
to existing Cisco APs. However, the Cisco solution requires a ded-
icated, purpose-built hardware to be installed on every AP and
hence incurs hardware and deployment costs. (The word virtual
refers to the fact that it is a networked solution and allows remote
management and updates.) In contrast, we can implement such
functionality readily on existing WiFi APs with BlueFi and no
additional hardware is needed. In a sense, BlueFi is a true virtual
solution that enables Bluetooth purely at the software level. To
demonstrate this, we have built an end-to-end example in which
an 802.11n-compliant AP is transformed into a Bluetooth beacon.
BlueFi can work with general and real-time Bluetooth apps
as well. In particular, we are able to stream real-time audio with
A2DP (Advanced Audio Distribution Profile) using WiFi chips. We
envision that BlueFi will help eliminate the need for dedicated
Bluetooth or combo chips in future devices, saving costs and the
precious board-space, which is very important for small devices
such as smart phones or watches. Alternatively, BlueFi can help
users use Bluetooth headphones with laptops or desktops with old
or no Bluetooth hardware.
2 SYSTEM DESIGN
2.1 Primers
We first review the PHY specifications of Bluetooth and 802.11n.
By comparing these technologies, we explore the opportunities of
leveraging the functionalities of existing WiFi hardware to transmit
Bluetooth signals. A list of acronyms is compiled and provided in
Appendix A.4.
2.1.1 Bluetooth. Bluetooth uses GFSK (Gaussian Frequency-Shift
Keying), which is frequency-shift keying with a Gaussian filter ap-
plied to the input bit-stream to reduce spectral leakage. For FSK, the
output has a positive frequency deviation for bit “1” and a negative
frequency deviation for bit “0”. Since phases can be obtained by
integrating frequencies, sending 1’s results in phases with a positive
slope and sending 0’s results in phases with a negative slope. In
addition, since no information is encoded in the amplitude of the
time-domain waveform, a Bluetooth packet can be fully charac-
terized by only the waveform’s phases. Bluetooth devices should
support the basic 1Mbps data rate, so the bit duration in Bluetooth
is 1000ns.
For Bluetooth beacons, advertisement packets are broadcast on
2402, 2426 or 2480 MHz and frequency hopping is not required for
beacon operation. In fact, it is the receiver’s responsibility to scan
all 3 advertisement channels and the transmitter can transmit at
1, 2 or 3 channels [6]. In contrast, frequency hopping is critical to
the operation of connected devices and packets are transmitted in
time slots. Each time slot is 625µs long and a device can only start
476
SIGCOMM ’21, August 23–28, 2021, Virtual Event, USA
Figure 1: Block diagram of 802.11n transmitters
transmission in every other time slot. Once the transmission starts,
a single packet can occupy multiple (3 or 5) slots and the frequency
stays the same during a multi-slot transmission.
802.11n. Officially known as High Throughput (HT) PHY in
2.1.2
the 802.11 standard [7], 802.11n inherited the same OFDM structure
as 802.11a and 802.11g. Fig. 1 shows the block diagram of a typical
802.11n transmitter. The bit-stream, sent from the MAC layer, is
fed to a scrambler to remove long-running 1’s or 0’s. The scrambler
XORs the input bit-stream with a pseudorandom sequence gen-
erated by shift registers. To enhance robustness, a forward error
correction (FEC) encoder then adds redundancy to the scrambled
bit-stream. Different code rates can be selected and are achieved
by skipping the transmission of some encoded bits (“puncturing”).
Instead of assigning adjacent bits to the same or nearby subcarriers,
an inter-leaver enhances robustness further by evenly spreading
nearby bits to subcarriers that are far apart. In the mandatory
20MHz mode, 52 out of 64 subcarriers are used for data transmis-
sion. Bits are grouped and placed on these subcarriers with BPSK,
QPSK, 16-QAM or 64-QAM mapping. Subcarriers are separated by
20/64=0.3125MHz, and subcarriers -21,-7,7 and 21 are used for pilot
tones. Subcarrier 0 is always 0. The samples on these 64 subcarriers
are converted to a 64-sample-long time-domain signal via IFFT. The
last 16 time-domain samples are copied and inserted into the front
of the 64 samples. The inserted portion of the waveform is known
as the cyclic prefix (CP). These 80 samples constitute one 802.11n
OFDM symbol. The data portion of an 802.11n waveform (normally)
consists of multiple OFDM symbols. To further reduce the spectral
leakage caused by the discontinuity between OFDM symbols, the
standard suggests application of windowing in the time domain.
For two consecutive symbols, windowing can be achieved by ap-
pending the first symbol with the first sample of the IFFT results
and then setting the first sample of the second symbol to the av-
erage between these two values. Sixteen 0’s are inserted into the
front of MAC layer bit-streams so that the receiver can determine
the scrambler seed the transmitter is using. The data portion is ap-
pended to an 802.11n preamble, which contains various parameters
used by the transmitter and signals for synchronization and CFO
(carrier frequency offset) correction. We used the “Mixed Format”
preamble since it is mandatory in 802.11n.
802.11n includes several key features. For BlueFi, the most im-