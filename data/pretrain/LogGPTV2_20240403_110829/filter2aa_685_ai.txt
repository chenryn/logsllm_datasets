Typically, a piece of information such as the server address would be passed to an
application through command-line parameters, because the server address needs to
be known when the application starts.
 In Nim, command-line parameters can be accessed via the paramStr procedure
defined in the os module. But before this procedure can be used, it must be
imported. Let’s extend client.nim so that it reads the first command-line parameter.
Code additions are shown in bold.
import os
echo("Chat application started")
if paramCount() == 0:
quit("Please specify the server address, e.g. ./client localhost")
let serverAddr = paramStr(1)
echo("Connecting to ", serverAddr)
Listing 3.3
Reading command-line parameters
This is required in order to use the paramCount and 
paramStr procedures defined in the os module.
Ensures that the 
user has specified a 
parameter on the 
command line
Stops the application
prematurely because it
can’t continue without
that parameter
Retrieves the first parameter 
that the user specified and 
assigns it to the new 
serverAddr variable
Displays the message “Connecting to ” to the
user, where  is the address the user specified
Licensed to   
64
CHAPTER 3
Writing a chat application
It’s always important to check the number of parameters supplied to your executable.
The paramCount procedure returns the number of parameters as an integer. The pre-
ceding example checks whether the number of parameters is 0, and if so, it calls the
quit procedure with a detailed message of why the application is exiting. If supplied
with a message, quit first displays that message and then quits with an exit code that
tells the OS that the application failed.
 When the user does supply the command-line parameter, the paramStr procedure
is used to retrieve the first parameter supplied. An index of 1 is used because the exe-
cutable name is stored at an index of 0. The first command-line parameter is then
bound to the serverAddr variable.
WARNING: EXECUTABLE NAME
Don’t retrieve the executable name via
paramStr(0), as it may give you OS-specific data that’s not portable. The
getAppFilename procedure defined in the os module should be used instead.
WARNING: ALWAYS USE PARAMCOUNT
When accessing a parameter with
paramStr that doesn’t exist (for example, paramStr(56) when paramCount()
== 1), an IndexError exception is raised. You should always use paramCount
ahead of time to check the number of parameters that have been supplied.
The last line in listing 3.3 uses the echo procedure to display the string "Connecting
to " appended to the contents of the serverAddr variable on the screen. The echo
procedure accepts a variable number of arguments and displays each of them on the
same line.
PARSING COMMAND-LINE PARAMETERS
Applications typically implement a spe-
cial syntax for command-line arguments. This syntax includes flags such as
--help. The parseopt module included in Nim’s standard library allows
these parameters to be parsed. There are also other, more intuitive packages
created by the Nim community for retrieving and parsing command-line
parameters.
Recompile your new client.nim module as you did in the previous section, and execute
it as you did previously. As you can see in figure 3.6, the application will exit immedi-
ately with the message “Please specify the server address, e.g. ./client localhost.”
 Now, execute it with a single parameter, as shown in the message: src/client
localhost. Figure 3.7 shows that the application now displays the message “Connect-
ing to localhost.”
 Now, try specifying different parameters and see what results you get. No matter
how many parameters you type, as long as there’s at least one, the message will always
consist of "Connecting to " followed by the first parameter that you specified.
 Figure 3.8 shows how the command-line parameters map to different paramStr
indexes.
 Now that the client successfully captures the server address, it knows which server
to connect to. You now need to think about asking the user for the messagethat they
want to send.
Licensed to   
65
Retrieving input in the client component
Figure 3.6
Starting the client without any parameters
Figure 3.7
Starting the client with one parameter
paramStr( 0 )  
paramStr( 2 )  
paramStr( n)  
paramStr(1)
paramStr( 3)  
Figure 3.8
The supplied command-line parameters and how to access them
Licensed to   
66
CHAPTER 3
Writing a chat application
3.3.2
Reading data from the standard input stream
Unlike the command-line parameters, which are passed to the application before it
starts, messages are provided by the user in real time, in response to messages they
receive from other users. This means that the application should ideally always be
ready to read data from the user.
 When an application is running inside of a terminal or command line, characters
can be typed in the terminal window. These characters can be retrieved by the applica-
tion through the standard input stream. Just like in Python, the standard input stream
can be accessed via the stdin variable. In Nim, this variable is defined in the implicitly
imported system module, and it’s of type File, so the standard input stream can be
read from just like any other File object. Many procedures are defined for reading
data from a File object. Typically, the most useful is readLine, which reads a single
line of data from the specified File.
 Add the following code to the bottom of client.nim, and then recompile and run it
(you can do so quickly with the following command: nim c -r src/client.nim
localhost).
let message = stdin.readLine()
echo("Sending \"", message, "\"")
CHARACTER ESCAPE SEQUENCES
The last line in listing 3.4 uses a character-
escape sequence to show the double quote (") character. This needs to be
escaped because the compiler would otherwise think that the string literal has
ended.
You’ll see that your application no longer exits immediately. Instead, it waits for you to
type something into the terminal window and press Enter. Once you do so, a message
is displayed with the text that you typed into the terminal window.
 Reading from the standard input stream will cause your application to stop execut-
ing—your application transitions into a blocked state. The execution will resume once
the requested data is fully read. In the case of stdin.readLine, the application
remains blocked until the user inputs some characters into the terminal and presses
Enter. When the user performs those actions, they’re essentially storing a line of text
into the stdin buffer.
 Blocking is an unfortunate side effect of most input/output (I/O) calls. It means
that, sadly, your application won’t be able to do any useful work while it’s waiting for
the user’s input. This is a problem, because this application will need to actively stay
connected to the chat server, something it won’t be able to do if it’s waiting for the user
to type text into the terminal window. Figure 3.9 shows the problem that this causes.
Listing 3.4
Reading from the standard input stream
Reads a single line of text from the 
standard input stream and assigns it 
to the message variable.
Displays the message “Sending 
"",” where  is the 
content of the message variable, which 
contains the line of text the user typed into 
their terminal window
Licensed to   
67
Retrieving input in the client component
Before we move on to solving that problem, there’s something missing from listing
3.4. The code only reads the message once, but the aim is to allow the user to send
multiple messages. Fixing this is relatively simple. You just need to introduce an
infinite loop using the while statement. Simply wrap the code in listing 3.4 in a while
statement as follows:
while true:
let message = stdin.readLine()
echo("Sending \"", message, "\"")
Now compile and run your code again to see for yourself what the result is. You should
be able to input as many lines of text as you wish into the terminal window, until you
terminate your application by pressing Ctrl-C.
 When you terminate your application, you should see a traceback similar to the
following:
Traceback (most recent call last)
client.nim(9)
client
sysio.nim(115)
readLine
sysio.nim(72)
raiseEIO
system.nim(2531)
sysFatal
SIGINT: Interrupted by Ctrl-C.
Terminating your application is a very good way to deter-
mine which line of code is currently being executed. In the
traceback, you can see that when the application was termi-
nated, line 9 in client.nim was being executed. This corre-
sponds to let message = stdin.readLine(), which is the
blocking readLine call that waits for input from the user.
 Figure 3.10 shows the current flow of execution in
client.nim. The main thread is blocked as it waits for
input from the user. As a result, the application will sit
"Hi"
Status: Waiting for stdin.readLine
Client
Message
"Sup"
Message
"You there?"
Message
Status: Sending messages to client
Server
Client is blocked waiting
for user input.
Messages are piling up
because the client isn’t
actively receiving them.
New messages are
arriving from server.
Server is still trying to
send more messages to
the client.
Figure 3.9
Problem caused by the client being blocked indefinitely
The while statement will repeat the statements in its 
body as long as its condition is true. In this case, it 
will repeat the following two statements until the 
application is closed manually by the user.
These two lines will be repeated an 
infinite number of times because they’re 
indented under the while statement.
Main thread  
readLine
echo message
Data fully read 
Thread
blocked
Figure 3.10
Blocking execution 
of client.nim
Licensed to   
68
CHAPTER 3
Writing a chat application
idle until the user wakes it up by typing some text into the terminal window and press-
ing Enter.
 This is an inherent issue with blocking I/O operations. You wouldn’t need to
worry about it if the client only needed to react to the user’s input, but, unfortu-
nately, the client must keep a persistent connection to the server in order to receive
messages from other clients. 
3.3.3
Using spawn to avoid blocking input/output
There are a number of ways to ensure that your application doesn’t block when it
reads data from the standard input stream.
 One is to use asynchronous input/output, which allows the application to continue
execution even if the result isn’t immediately available. Unfortunately, the standard
input stream can’t be read asynchronously in Nim, so asynchronous I/O can’t be used
here. It will be used later, when it’s time to transfer data over a network.
 The other solution is to create another thread that will read the standard input
stream, keeping the main thread unblocked and free to perform other tasks. Every pro-
cess consists of at least one thread known as the main thread—all of the code in client
.nim is currently executed in this main thread. The main thread becomes blocked when
the call to readLine is made, and it becomes unblocked when the user inputs a single
line into the terminal. But a separate thread can be created to make the call to read-
Line, in order to leave the main thread active. The newly created thread is the one that
becomes blocked. This approach of using two threads is called parallelism. We won’t
look at the full details of parallelism and how it works in Nim in this chapter, but we’ll
discuss it in chapter 6.
 A procedure can be executed in a new thread using the spawn procedure. Replace
the while statement that you created previously with the following one, but don’t
compile the code just yet:
while true:
let message = spawn stdin.readLine()
echo("Sending \"", ^message, "\"")
The readLine procedure returns a string value, but when this procedure is executed
in another thread, its return value isn’t immediately available. To deal with this, spawn
returns a special type called FlowVar[T], which holds the value that the procedure
you spawned returns.
 The ^ operator can be used to retrieve the value from a FlowVar[T] object, but
there’s no value until the spawned procedure returns one. When the FlowVar[T]
object is empty, the ^ operator will block the current thread until a value has been
stored. If it’s not empty in the first place, the ^ operator will return immediately with
the value. That’s why the preceding code will behave much like the code in listing 3.4.
The spawn keyword is used to call the 
readLine procedure. This will spawn a 
new thread and execute readLine there.
The value returned from the thread isn’t 
immediately available, so you must read 
it explicitly with the ^ operator.
Licensed to   
69
Retrieving input in the client component
 You can also check whether a FlowVar[T] type contains a value by using the
isReady procedure. You can use that procedure to avoid blocking behavior.
 See figure 3.11 to see how the two different threads interact with each other. Com-
pare it to figure 3.10 to see how the execution of the client changed after the intro-
duction of spawn.
 There’s now a secondary readLine thread, but the result is the same. Both the
main thread and the readLine thread become blocked, creating the same results.
Generics
Generics are a feature of Nim that you’ll be introduced to in full detail in chapter 9. For
now, all you need to know is that FlowVar[T] is a generic type that can store values
of any type. The type of the value that’s stored is specified in the square brackets.
For example, the spawn stdin.readLine() expression returns a FlowVar[string]
type because the return type of readLine is a string, and FlowVar wraps the return
value of the spawned procedure.
Applying the spawn call to any procedure that returns a string will return a Flow-
Var[string] value:
import threadpool
proc foo: string = "Dog"
var x: FlowVar[string] = spawn foo()
assert(^x == "Dog")
To successfully compile the preceding example, make sure you use the --threads
:on flag.
Data fully read 
readLine thread  
return message
Main thread  
spawn
^message
echo message
readInput returned 
Thread
blocked
Thread
blocked
Figure 3.11
Blocking 
execution of client.nim 
with spawn
Licensed to   
70
CHAPTER 3
Writing a chat application
 Listing 3.5 shows how you can modify client.nim to use spawn, with the changed
lines in bold. One key point to note is that the spawn procedure is defined in the
threadpool module, so you must remember to import it via import threadpool.
import os, threadpool
echo("Chat application started")
if paramCount() == 0:
quit("Please specify the server address, e.g. ./client localhost")
let serverAddr = paramStr(1)
echo("Connecting to ", serverAddr)
while true:
let message = spawn stdin.readLine()
echo("Sending \"", ^message, "\"")
Compilation now requires the --threads:on flag to enable Nim’s threading support.
Without it, spawn can’t function. To compile and run the client.nim file, you should
now be executing nim c -r --threads:on src/client.nim localhost.
NIM CONFIG FILES
Flags such as --threads:on can accumulate quickly, but
the Nim compiler supports config files, which save you from having to retype
all these flags on the command line. Simply create a client.nims file (beside
the client.nim file) and add --threads:on there. Each flag needs to be on its
own line, so you can add extra flags by separating them with newlines. To
learn more about this configuration system, see the NimScript page:
https://nim-lang.org/docs/nims.html.
The client application still functions the same way as before, but the changes to the
code that reads the standard input stream will be useful later on in this chapter.
 In the next section, I’ll show you how to add asynchronous networking code, allow-
ing the client application to connect to the server. The server itself will use the same
asynchronous I/O approach to communicate with more than one client at a time.
 You’ve now seen how to read input from the user in two different ways: from
command-line parameters and from the standard input stream while your application
is running. You also learned about the problem of blocking I/O, and I showed you one
way to solve it. Now let’s move on to writing the protocol for your chat application. 
3.4
Implementing the protocol
Every application that communicates over a network with another application needs to
define a protocol for that communication to ensure that the two applications can
understand each other. A protocol is similar to a language—it’s a standard that’s mostly
consistent and that can be understood by both of the communicating parties. Imagine
trying to communicate in English with somebody who can speak only Chinese. As in
figure 3.12, you won’t understand them, and they won’t understand you. Similarly, the
Listing 3.5
Spawning readLine in a new thread
Licensed to   
71
Implementing the protocol
different components in your application must use the same language to understand
each other.
 It’s important to remember that even if protocols are well defined, there’s still
plenty of room for error, such as if the message isn’t transmitted correctly. This is why
it’s vital that the code that parses messages can handle incorrectly formatted messages,
or messages that don’t contain the necessary data. The code that I’ll show you in this
section won’t go to great lengths to verify the validity of the messages it receives. But I
will encourage you later on to add exception-handling code to verify the validity of
messages and to provide the users of your code with better exception messages.
 Code that parses and generates a message is easy to test, so in this section, I’ll also
show you some basic ways to test your code.
 The chat application’s protocol will be a simple one. The information that it will
transfer between clients consists of two parts: the message that the user wants to send
to the other clients, and the user’s name. There are many ways that this information
could be encoded, but one of the simplest is to encode it as a JSON object. That’s what
I’ll show you how to do.
3.4.1
Modules
You’ve already seen many examples of modules, but I haven’t yet explained precisely
what a module is. Your client.nim file is itself a module, and you’ve also imported
modules from Nim’s standard library into your code using the import keyword. The
upcoming message parser should ideally be written in a separate module, so it’s a
good practical example to use as I teach you about modules.
 Many programming languages today utilize a module system. Nim’s module system
is rather simple: every file ending with a .nim extension is a module. As long as the
compiler can find the file, then it can be successfully imported.
 A module system allows you to separate the functionality of your application into
independent modules. One advantage of this is that modules are interchangeable. As
long as the interface of the module remains the same, the underlying implementation
can be changed. Later on, you can easily use something other than JSON to encode
the messages.
 By default, everything you define in a module is private, which means that it can
only be accessed inside that module. Private definitions ensure that the implementa-
tion details of modules are hidden, whereas public definitions are exposed to other
Hello
How are you? 
Good protocol 
Hi
你好
Bad protocol 
Figure 3.12
Good and bad protocols
Licensed to   
72
CHAPTER 3
Writing a chat application
modules. In some languages, the public and private keywords are used to specify the
visibility of a definition.1
 In Nim, each definition is private by default. You can make a definition public by
using the * operator. The * can be placed at the end of procedure names, variable
names, method names, and field names.
 The basics of the module system should be easy to grasp. There are some extra
things to be aware of, but this should be enough to get you started writing simple
modules. Chapter 4 looks at modules in more depth.
 To create a module for your new message parser, simply create a new file named
protocol.nim in the src directory beside the client.nim file.
 Listing 3.6 shows the definition of the Message type, which will store the two pieces
of information that a message from the server contains: the username of the client
and the actual message. Both of these definitions are exported using the * marker.
 At the end, the parseMessage procedure is defined. It takes in a data parameter
that contains the raw string received from a server. The parseMessage procedure
then returns a new Message object containing the parsed data. This procedure is also
exported, and together with the Message type it forms the public interface of the
protocol module.
type
Message* = object
username*: string
message*: string
proc parseMessage*(data: string): Message =
discard
Add the code in listing 3.6 to the protocol module you created, and make sure it
compiles with nim c src/protocol.
 Now, let’s move on to implementing the parseMessage procedure. 
3.4.2
Parsing JSON