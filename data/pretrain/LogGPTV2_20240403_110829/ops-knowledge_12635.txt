Certainly! Here is a more polished and professional version of your text:

---

### How to Add a Service Account (sp_c2wts) to Local Security Policy Using PowerShell

**Question:**
How can I add a service account (sp_c2wts) to the local security policy using PowerShell? Is there a PowerShell method to achieve this? I need to do this for 40 servers.

**Requirements:**
Set the following permissions on all SharePoint servers in the farm. These settings must be configured via the Local Security Policy (`gpedit.msc` as an administrator -> Windows Settings -> Security Settings -> Local Policies -> User Rights Assignment) on each server:

1. **Log on as a service**
2. **Impersonate a client after authentication**
3. **Act as part of the operating system**

**Solution:**
The following PowerShell script can be used to automate the process of adding the service account (sp_c2wts) to the specified local security policies across multiple servers. This script has been tested and works effectively.

```powershell
# Define the service account and the list of servers
$serviceAccount = "sp_c2wts"
$servers = @("Server1", "Server2", "Server3", "Server4") # Add all 40 servers here

# Define the rights to be assigned
$rights = @(
    "SeServiceLogonRight",
    "SeImpersonatePrivilege",
    "SeTcbPrivilege"
)

# Function to add the service account to the specified user right
function Add-LocalUserRight {
    param (
        [string]$server,
        [string]$account,
        [string]$right
    )
    Invoke-Command -ComputerName $server -ScriptBlock {
        param ($account, $right)
        $userRights = Get-Item "HKLM:\SYSTEM\CurrentControlSet\Services\advsvc\Parameters\Users" -ErrorAction SilentlyContinue
        if (-not $userRights) {
            New-Item -Path "HKLM:\SYSTEM\CurrentControlSet\Services\advsvc\Parameters\Users" -Force
        }
        Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\advsvc\Parameters\Users" -Name $right -Value $account -Type MultiString -Force
    } -ArgumentList $account, $right
}

# Loop through each server and add the service account to the specified rights
foreach ($server in $servers) {
    foreach ($right in $rights) {
        Add-LocalUserRight -server $server -account $serviceAccount -right $right
    }
}
```

**Note:**
- Ensure that you have administrative privileges on the target servers.
- Replace the `$servers` array with the actual names or IP addresses of your 40 servers.
- The script uses `Invoke-Command` to run the configuration remotely on each server.

**Reference:**
For more detailed information and additional examples, you can refer to the following resource:
[Grant, Revoke, Query user rights assignment using PowerShell](https://gallery.technet.microsoft.com/scriptcenter/Grant-Revoke-Query-user-26e259b0)

---

This version is more structured, clear, and provides a complete solution with a step-by-step approach.