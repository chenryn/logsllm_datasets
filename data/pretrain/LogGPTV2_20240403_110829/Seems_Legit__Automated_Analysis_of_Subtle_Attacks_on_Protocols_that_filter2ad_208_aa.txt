title:Seems Legit: Automated Analysis of Subtle Attacks on Protocols that
Use Signatures
author:Dennis Jackson and
Cas Cremers and
Katriel Cohn-Gordon and
Ralf Sasse
Seems Legit: Automated Analysis of
Subtle Attacks on Protocols that Use Signatures
Dennis Jackson
University of Oxford
UK
Katriel Cohn-Gordon
Independent Scholar
ABSTRACT
The standard definition of security for digital signatures—existential
unforgeability—does not ensure certain properties that protocol
designers might expect. For example, in many modern signature
schemes, one signature may verify against multiple distinct public
keys. It is left to protocol designers to ensure that the absence of
these properties does not lead to attacks.
Modern automated protocol analysis tools are able to provably
exclude large classes of attacks on complex real-world protocols
such as TLS 1.3 and 5G. However, their abstraction of signatures
(implicitly) assumes much more than existential unforgeability,
thereby missing several classes of practical attacks.
We give a hierarchy of new formal models for signature schemes
that captures these subtleties, and thereby allows us to analyse
(often unexpected) behaviours of real-world protocols that were
previously out of reach of symbolic analysis. We implement our
models in the Tamarin Prover, yielding the first way to perform
these analyses automatically, and validate them on several case
studies. In the process, we find new attacks on DRKey and SOAP’s
WS-Security, both protocols which were previously proven secure
in traditional symbolic models.
CCS CONCEPTS
• Security and privacy → Formal security models; Security
protocols; Network security; Web protocol security; • Networks
→ Protocol testing and verification; • Theory of computation →
Cryptographic protocols.
ACM Reference Format:
Dennis Jackson, Cas Cremers, Katriel Cohn-Gordon, and Ralf Sasse. 2019.
Seems Legit: Automated Analysis of Subtle Attacks on Protocols that Use Sig-
natures. In 2019 ACM SIGSAC Conference on Computer and Communications
Security (CCS ’19), November 11–15, 2019, London, United Kingdom. ACM,
New York, NY, USA, 16 pages. https://doi.org/10.1145/3319535.3339813
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ’19, November 11–15, 2019, London, United Kingdom
© 2019 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-6747-9/19/11...$15.00
https://doi.org/10.1145/3319535.3339813
CISPA Helmholtz Center for Information Security
Department of Computer Science, ETH Zurich
Cas Cremers
Germany
Ralf Sasse
Switzerland
1 INTRODUCTION
Digital signatures are a core cryptographic primitive, whose well-
known definition has hardly changed for over 30 years. This defini-
tion, Existential Unforgeability under an Adaptive Chosen Message
Attack (EUF-CMA), requires that no adversary can construct a valid
signature for a new message without knowing the corresponding
secret key. EUF-CMA is widely used and considered standard. How-
ever, it allows for some subtle and perhaps unexpected behaviours:
EUF-CMA-secure signature schemes can and do permit adversaries
to, for example,
(1) given a signature, generate a new key pair that can also be
used to verify the signature;
(2) change some bits of a signature without affecting its validity;
(3) given a signature but not its message, produce another signa-
ture on the message for an adversarial key pair; or
(4) compute weak keypairs for which a single signature can verify
against multiple messages.
•◦ [62]
▲
✓[71]
•◦ [71]
•◦ [71]
•◦ [31]
✓[61]
•◦ [59]
•◦ [66]
▲
▲
▲
✓[31]
✓[31]
Indeed, in Table 1 we give a number of widely-used concrete
signature schemes (with columns corresponding in order to the
properties above—we will expand on these later), and see for exam-
ple that RSA-PSS allows generating new public keys against which
existing signatures verify, and that ECDSA allows for signatures
which verify for two different messages. These behaviours are not
CEO/DEO No-Mall. No-ReSign No-Coll.
Signature scheme
•◦ [69]
•◦ [69]
•◦ [69]
•◦ [38]
✓[67]
✓[56]
✓[56]
RSA-PKCSv1.5
RSA-PSS
DSA
ECDSA-FreeBP
ECDSA-FixedBP
Ed25519
Ed25519-IETF
Table 1: Subtle behaviours of concrete EUF-CMA-secure signature
schemes. Columns refer to the security property, i.e., the absence
of some unexpected behaviour: Conservative Exclusive Owner-
ship (CEO)/Destructive Exclusive Ownership (DEO) (no DSKS), non-
malleability, non-resignability and non-collidability. We will ex-
pand on all these properties later in the paper.
✓ means that the security property holds, and therefore the corre-
sponding unexpected behaviour is not present.
•◦ means that the behaviour is present. For example, ECDSA-FreeBP
signatures are malleable and allow for DSKS attacks.
▲ means that we conjecture that the behaviour is absent, so the se-
curity property holds, but this has not been proven.
FreeBP (resp. FixedBP) means the signature scheme’s base point is
considered a parameter of the signature (resp. fixed in advance).
▲
▲
•◦ [73]
•◦ [71]
•◦ [71]
•◦ [31]
•◦ [31]
Session 9D: SignaturesCCS ’19, November 11–15, 2019, London, United Kingdom2165the result of implementation bugs or mistakes; rather, they are a
consequence of how each signature scheme has been designed.
The existence of these subtle behaviours has enabled concrete
attacks on protocols. For example, the Mt. Gox Bitcoin exchange
famously lost millions of dollars because the malleability of the
underlying signature scheme could be exploited [50], and an ear-
lier draft of the Automatic Certificate Management Environment
(ACME) certificate issuance protocol would have enabled adver-
saries to issue certificates for any Let’s Encrypt domain on the
Internet because of a signature key substitution vulnerability [6].
At the protocol level, there have been many advances in auto-
mated analysis tools. Indeed, automated analysis of security proto-
cols has made its way into mainstream security practice in recent
years: notable success in the analysis of widely deployed standards
such as TLS 1.3, 5G, and many more [29, 32, 34, 45–48, 51, 65] have
demonstrated its value in handling large scale, real world protocols
with complex substructure. Tools such as ProVerif and Tamarin are
given a protocol specification and its security requirements, and
provide either a proof that no attack exists within their model or a
concrete attack trace violating a security requirement, without re-
quiring users to consider all potential edge cases or decide whether
a primitive is being used correctly.
Symbolic verification tools do not directly operate on the cryp-
tographic definition of digital signatures but on an approximation,
which has also hardly changed for several decades: signing and
verifying are both considered as abstract function symbols, and an
equation is added to model that verification of a correctly-generated
signature must succeed. Unfortunately, this approximation does not
include the subtle behaviours we described above, and implicitly
assumes they are not possible. This means that the tools can miss
real attacks: for example, as we will show later, we find a number
of new attacks on protocols which had previously been formally
verified as secure with the traditional symbolic model of signatures.
In this paper, we remedy this shortcoming, by introducing new
models for automated verification of protocols using signature
schemes. Unlike previous work, our models capture these protocol
attacks while allowing for automated attack finding and verification.
We explore models capturing some specific attacks, generalise to a
multi-purpose verification model, and then apply our techniques
to a number of well-known protocols.
Contributions. Our main contributions include:
(1) We develop a new hierarchy of tool-agnostic symbolic models
for digital signatures, which captures attacks and behaviours
omitted from traditional models. Our models include several
falsification models, which capture subtle behaviours, and a
verification model, which is close to the computational defi-
nition. These models make it possible to analyse the impact
of concrete signature schemes on protocols, yielding more
accurate and meaningful protocol analysis. Our models are
tool-agnostic and can therefore be used to improve other sym-
bolic approaches.
(2) Using the Tamarin prover, we develop the first automated
method for finding, or proving the absence of, attacks on se-
curity protocols that exploit subtle behaviours of provably-
secure signature schemes. We evaluate the effectiveness of
our approach on a range of case studies, which show that the
approach is effective at both attack finding and verification.
(3) We use our models to find known and new attacks on protocols
which were previously proven secure in coarser models. Specif-
ically, we break correlation and secrecy for WS-Security X.509
Mutual Auth (once widely used to secure SOAP services), and
break authentication and collusion-resistance for the DRKey
key exchange protocol (used for routing). We also automati-
cally find, and verify the fix for, the known key substitution
attack on ACME draft 4. These protocols were all previously
verified using automated analyses under the traditional signa-
ture model, which does not capture our attacks.
Outline. We have three main sections after the background (§2).
First, in §3 we give symbolic models for improved attack finding,
identifying specific properties which are not captured by existing
models, and show how this enables us to find attacks on protocols.
However, there may exist further behaviours of signature schemes
that are not instances of the properties we identified. Therefore, in
§4 we move to verification instead of falsification, giving a general
model for signature schemes that makes minimal assumptions on
the signature scheme. In §5 we apply our techniques to further case
studies. We discuss further related work in §6 and conclude in §7.
2 BACKGROUND
2.1 Computational Model
We begin with the classical definition of signature schemes, stated
informally. (The formal definitions can be found in [55, 63].)
Definition. A digital signature scheme is composed of three
polynomial time algorithms:
(1) KGen, a probabilistic algorithm, takes in the security parameter
and produces a pair (sk, vk).
(2) Sig, a probabilistic algorithm, takes in a private key sk and a
message m and produces a signature s.
message m and signature s and outputs success or failure.
(3) Vf, a deterministic algorithm, takes in a verification key vk,
It is correct if Vf(vk, m, Sig(m, sk)) succeeds with high probability
for all messages m and any (sk, vk) output by KGen.
The essential security definition that nearly all signature schemes
are expected to meet is existential unforgeability against an adaptive
chosen message attack:
Definition. A signature scheme is existentially unforgeable un-
der an adaptive chosen message attack or EUF-CMA-secure if no
PPT adversary has a non-negligible advantage in this experiment:
(1) The challenger generates a keypair and gives the public key to
the adversary.
(2) The adversary may adaptively query a signing oracle polynomi-
ally often which returns a signature on the chosen message.
(3) The adversary wins if they can output a message and signature
pair which is verified and the message was not previously given
as input to the signing oracle.
This security definition captures forgery resistance: even an adver-
sary that can adaptively query for signatures on messages of their
choice cannot forge a signature for a different message.
Session 9D: SignaturesCCS ’19, November 11–15, 2019, London, United Kingdom21662.2 Existing Symbolic Models
In the unbounded setting, automated tools such as Tamarin [70],
ProVerif [39], Maude-NPA [54], and CPSA [53] have a long his-
tory and have seen many improvements over time. More recently,
Tamarin and ProVerif have supported real world protocol develop-
ment through analysis of protocols such as TLS 1.3, 5G, and Signal,
as mentioned in the introduction.
Such tools accept a description of a protocol and its security
properties and search for a trace demonstrating a security property
violation, or proof that no violation occurs within the tool’s frame-
work. Each tool is required to model the behaviour of cryptographic
functions, such as digital signatures.
These tools use a term algebra with an equational theory to
model cryptographic messages. The term signature contains the
function symbols with their arity, representing the applicable cryp-
tographic algorithms, such as signing or verification. The equational
theory can then be used to model the properties of the algorithms.
We continue by giving the equational theories for digital signa-
tures. We declare the function symbols after the keyword functions,
with their arity after a / and the equations after the keyword
equations, where all non-declared symbols are interpreted as vari-
ables. For brevity and readability, we use Tamarin’s notation.
Two typical models are given here:
functions : verify /3 , sign /2 , pk /1 , true /0
equations : verify ( sign (m , sk ) , m , pk ( sk )) = true
Standard Signature Model used by Tamarin and ProVerif
This removes the bijection between signatures and the messages
they correspond to, allowing for more behaviour to be expressed.
In this model it is possible to extract the message from a signa-
ture using the second equation, and to extract the public key from
a signature using the third equation. We were unable to find a
publication actually using it in practice.
2.3 Tamarin Model background
As explained previously, Tamarin uses a term algebra with an equa-
tional theory to model cryptographic primitives and their properties.
The execution of a protocol in an environment with an adversary is
then represented as a labeled transition system. The state consists
of messages on the network, the adversary knowledge, and the
internal states of the protocol participants. Protocol and adversary
interact by exchanging messages on the (adversary-controlled) net-
work. Both protocol rules and adversary capabilities are specified
as labeled multiset rewrite rules. These are used to define a transi-
tion system that specifies a set of traces, which model all possible
sequences of events. The security requirements are then specified
in a (guarded) fragment of first-order logic, expressed over a trace.
We will now detail the concepts that are required for our exposition
in the remainder of the paper.
The state of the transition system is given by a multiset of facts.