# Title: Seems Legit: Automated Analysis of Subtle Attacks on Protocols that Use Signatures

## Authors
- Dennis Jackson, University of Oxford, UK
- Cas Cremers, CISPA Helmholtz Center for Information Security, Germany
- Katriel Cohn-Gordon, Independent Scholar
- Ralf Sasse, Department of Computer Science, ETH Zurich, Switzerland

## Abstract
The standard definition of security for digital signatures—existential unforgeability—does not ensure certain properties that protocol designers might expect. For example, in many modern signature schemes, one signature may verify against multiple distinct public keys. It is the responsibility of protocol designers to ensure that the absence of these properties does not lead to attacks.

Modern automated protocol analysis tools can provably exclude large classes of attacks on complex real-world protocols such as TLS 1.3 and 5G. However, their abstraction of signatures (implicitly) assumes much more than existential unforgeability, thereby missing several classes of practical attacks.

We introduce a hierarchy of new formal models for signature schemes that capture these subtleties, allowing us to analyze (often unexpected) behaviors of real-world protocols that were previously out of reach of symbolic analysis. We implement our models in the Tamarin Prover, providing the first way to perform these analyses automatically, and validate them on several case studies. In the process, we discover new attacks on DRKey and SOAP’s WS-Security, both protocols which were previously proven secure in traditional symbolic models.

## CCS Concepts
- **Security and Privacy**: Formal security models, Security protocols, Network security, Web protocol security
- **Networks**: Protocol testing and verification
- **Theory of Computation**: Cryptographic protocols

## ACM Reference Format
Dennis Jackson, Cas Cremers, Katriel Cohn-Gordon, and Ralf Sasse. 2019. Seems Legit: Automated Analysis of Subtle Attacks on Protocols that Use Signatures. In 2019 ACM SIGSAC Conference on Computer and Communications Security (CCS ’19), November 11–15, 2019, London, United Kingdom. ACM, New York, NY, USA, 16 pages. https://doi.org/10.1145/3319535.3339813

## Permission Notice
Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than the author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from permissions@acm.org.

CCS ’19, November 11–15, 2019, London, United Kingdom
© 2019 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-6747-9/19/11...$15.00
https://doi.org/10.1145/3319535.3339813

## 1. Introduction
Digital signatures are a core cryptographic primitive, whose well-known definition has hardly changed for over 30 years. This definition, Existential Unforgeability under an Adaptive Chosen Message Attack (EUF-CMA), requires that no adversary can construct a valid signature for a new message without knowing the corresponding secret key. EUF-CMA is widely used and considered standard. However, it allows for some subtle and perhaps unexpected behaviors:

- Given a signature, generate a new key pair that can also be used to verify the signature.
- Change some bits of a signature without affecting its validity.
- Given a signature but not its message, produce another signature on the message for an adversarial key pair.
- Compute weak key pairs for which a single signature can verify against multiple messages.

In Table 1, we list several widely-used concrete signature schemes and their behaviors. For example, RSA-PSS allows generating new public keys against which existing signatures verify, and ECDSA allows for signatures that verify for two different messages. These behaviors are not the result of implementation bugs or mistakes; rather, they are a consequence of how each signature scheme has been designed.

| Signature Scheme | CEO/DEO No-Mall. | No-ReSign | No-Coll. |
|------------------|-------------------|------------|-----------|
| RSA-PKCSv1.5     | ✓                 | ✓          | ✓         |
| RSA-PSS          | •◦                | ✓          | ✓         |
| DSA              | ✓                 | ✓          | ✓         |
| ECDSA-FreeBP     | •◦                | ✓          | ✓         |
| ECDSA-FixedBP    | ✓                 | ✓          | ✓         |
| Ed25519          | ✓                 | ✓          | ✓         |
| Ed25519-IETF     | ✓                 | ✓          | ✓         |

**Table 1:** Subtle behaviors of concrete EUF-CMA-secure signature schemes. Columns refer to the security property, i.e., the absence of some unexpected behavior: Conservative Exclusive Ownership (CEO)/Destructive Exclusive Ownership (DEO) (no DSKS), non-malleability, non-resignability, and non-collidability. 
- ✓ means the security property holds.
- •◦ means the behavior is present.
- ▲ means the behavior is conjectured to be absent but not proven.

The existence of these subtle behaviors has enabled concrete attacks on protocols. For example, the Mt. Gox Bitcoin exchange lost millions of dollars due to the malleability of the underlying signature scheme [50], and an earlier draft of the Automatic Certificate Management Environment (ACME) certificate issuance protocol would have enabled adversaries to issue certificates for any Let's Encrypt domain on the Internet because of a signature key substitution vulnerability [6].

At the protocol level, there have been many advances in automated analysis tools. Tools such as ProVerif and Tamarin are given a protocol specification and its security requirements, and provide either a proof that no attack exists within their model or a concrete attack trace violating a security requirement, without requiring users to consider all potential edge cases or decide whether a primitive is being used correctly.

Symbolic verification tools do not directly operate on the cryptographic definition of digital signatures but on an approximation, which has also hardly changed for several decades. Signing and verifying are both considered as abstract function symbols, and an equation is added to model that verification of a correctly-generated signature must succeed. Unfortunately, this approximation does not include the subtle behaviors described above and implicitly assumes they are not possible. This means that the tools can miss real attacks. For example, as we will show later, we find a number of new attacks on protocols which had previously been formally verified as secure with the traditional symbolic model of signatures.

In this paper, we address this shortcoming by introducing new models for automated verification of protocols using signature schemes. Our models capture these protocol attacks while allowing for automated attack finding and verification. We explore models capturing specific attacks, generalize to a multi-purpose verification model, and then apply our techniques to a number of well-known protocols.

### Contributions
Our main contributions include:
1. **New Symbolic Models for Digital Signatures**: We develop a new hierarchy of tool-agnostic symbolic models for digital signatures, which captures attacks and behaviors omitted from traditional models. Our models include several falsification models, which capture subtle behaviors, and a verification model, which is close to the computational definition. These models make it possible to analyze the impact of concrete signature schemes on protocols, yielding more accurate and meaningful protocol analysis.
2. **Automated Method for Attack Finding and Verification**: Using the Tamarin prover, we develop the first automated method for finding, or proving the absence of, attacks on security protocols that exploit subtle behaviors of provably-secure signature schemes. We evaluate the effectiveness of our approach on a range of case studies, which show that the approach is effective at both attack finding and verification.
3. **Finding Known and New Attacks**: We use our models to find known and new attacks on protocols which were previously proven secure in coarser models. Specifically, we break correlation and secrecy for WS-Security X.509 Mutual Auth (once widely used to secure SOAP services) and break authentication and collusion-resistance for the DRKey key exchange protocol (used for routing). We also automatically find and verify the fix for the known key substitution attack on ACME draft 4. These protocols were all previously verified using automated analyses under the traditional signature model, which does not capture our attacks.

### Outline
We have three main sections after the background (§2):
1. **Symbolic Models for Improved Attack Finding (§3)**: We give symbolic models for improved attack finding, identifying specific properties not captured by existing models, and show how this enables us to find attacks on protocols.
2. **General Model for Verification (§4)**: We move to verification instead of falsification, giving a general model for signature schemes that makes minimal assumptions on the signature scheme.
3. **Case Studies (§5)**: We apply our techniques to further case studies. We discuss further related work in §6 and conclude in §7.

## 2. Background

### 2.1 Computational Model
We begin with the classical definition of signature schemes, stated informally. (Formal definitions can be found in [55, 63].)

**Definition**: A digital signature scheme is composed of three polynomial-time algorithms:
1. **KGen**: A probabilistic algorithm that takes in the security parameter and produces a pair (sk, vk).
2. **Sig**: A probabilistic algorithm that takes in a private key sk and a message m and produces a signature s.
3. **Vf**: A deterministic algorithm that takes in a verification key vk, a message m, and a signature s, and outputs success or failure.

It is correct if Vf(vk, m, Sig(m, sk)) succeeds with high probability for all messages m and any (sk, vk) output by KGen.

The essential security definition that nearly all signature schemes are expected to meet is existential unforgeability against an adaptive chosen message attack (EUF-CMA):

**Definition**: A signature scheme is existentially unforgeable under an adaptive chosen message attack (EUF-CMA-secure) if no PPT adversary has a non-negligible advantage in this experiment:
1. The challenger generates a keypair and gives the public key to the adversary.
2. The adversary may adaptively query a signing oracle polynomially often, which returns a signature on the chosen message.
3. The adversary wins if they can output a message and signature pair that is verified and the message was not previously given as input to the signing oracle.

This security definition captures forgery resistance: even an adversary that can adaptively query for signatures on messages of their choice cannot forge a signature for a different message.

### 2.2 Existing Symbolic Models
In the unbounded setting, automated tools such as Tamarin [70], ProVerif [39], Maude-NPA [54], and CPSA [53] have a long history and have seen many improvements over time. More recently, Tamarin and ProVerif have supported real-world protocol development through the analysis of protocols such as TLS 1.3, 5G, and Signal, as mentioned in the introduction.

Such tools accept a description of a protocol and its security properties and search for a trace demonstrating a security property violation, or a proof that no violation occurs within the tool’s framework. Each tool is required to model the behavior of cryptographic functions, such as digital signatures.

These tools use a term algebra with an equational theory to model cryptographic messages. The term signature contains the function symbols with their arity, representing the applicable cryptographic algorithms, such as signing or verification. The equational theory can then be used to model the properties of the algorithms.

We continue by giving the equational theories for digital signatures. We declare the function symbols after the keyword `functions`, with their arity after a `/` and the equations after the keyword `equations`, where all non-declared symbols are interpreted as variables. For brevity and readability, we use Tamarin’s notation.

**Standard Signature Model** (used by Tamarin and ProVerif):
```plaintext
functions : verify /3 , sign /2 , pk /1 , true /0
equations : verify ( sign (m , sk ) , m , pk ( sk )) = true
```

This removes the bijection between signatures and the messages they correspond to, allowing for more behavior to be expressed. In this model, it is possible to extract the message from a signature using the second equation and to extract the public key from a signature using the third equation. We were unable to find a publication actually using it in practice.

### 2.3 Tamarin Model Background
As explained previously, Tamarin uses a term algebra with an equational theory to model cryptographic primitives and their properties. The execution of a protocol in an environment with an adversary is represented as a labeled transition system. The state consists of messages on the network, the adversary knowledge, and the internal states of the protocol participants. Protocol and adversary interact by exchanging messages on the (adversary-controlled) network. Both protocol rules and adversary capabilities are specified as labeled multiset rewrite rules. These are used to define a transition system that specifies a set of traces, which model all possible sequences of events. The security requirements are then specified in a (guarded) fragment of first-order logic, expressed over a trace.

We will now detail the concepts that are required for our exposition in the remainder of the paper.

**State of the Transition System**: The state of the transition system is given by a multiset of facts.