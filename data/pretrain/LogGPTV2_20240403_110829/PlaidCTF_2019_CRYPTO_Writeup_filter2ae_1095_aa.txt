## PlaidCTF 2019 CRYPTO Writeup
​ 上周末参加了一下PlaidCTF 2019国际比赛，详情可见[CTF
TIME](https://ctftime.org/event/743)，下面主要总结分享一下两道密码题的解题思路。
### 1.R u SAd?
#### 1.1 分析
​
首先查看题目文件，共有三个文件`rusad(python加密程序)、flag.enc(加密后的数据)、key.sad.pub(提供的公钥信息)`。主要分析rusad加密代码，这是一个RSA加解密程序，首先定义了一个Key类，私钥参数为`P、Q、D、DmP1、Dmq1`，genkey函数生成RSA参数。`main函数`的功能是生成一个4096位的key，将key中的公钥信息输出到文件即`key.sad.pub`，其中包含`N、E、iQmP、iPmQ`，然后就是读入flag调用`encrypt函数`加密输出到文件`flag.enc`。
    class Key:
        PRIVATE_INFO = ['P', 'Q', 'D', 'DmP1', 'DmQ1']
        def __init__(self, **kwargs):
            for k, v in kwargs.items():
                setattr(self, k, v)
            assert self.bits % 8 == 0
        def ispub(self):
            return all(not hasattr(self, key) for key in self.PRIVATE_INFO)
        def ispriv(self):
            return all(hasattr(self, key) for key in self.PRIVATE_INFO)
        def pub(self):
            p = deepcopy(self)
            for key in self.PRIVATE_INFO:
                if hasattr(p, key):
                    delattr(p, key)
            return p
        def priv(self):
            raise NotImplementedError()
    def genkey(bits):
        assert bits % 2 == 0
        while True:
            p = genprime(bits // 2)
            q = genprime(bits // 2)
            e = 65537
            d, _, g = egcd(e, (p-1) * (q-1))
            if g != 1: continue
            iQmP, iPmQ, _ = egcd(q, p)
            return Key(
                N=p*q, P=p, Q=q, E=e, D=d%((p-1)*(q-1)), DmP1=d%(p-1), DmQ1=d%(q-1),
                iQmP=iQmP%p, iPmQ=iPmQ%q, bits=bits,
            )
    def encrypt(key, data):
        data = bytes2num(pad(data, key.bits))
        assert 0 <= data and data < key.N
        data = pow(data, key.E, key.N)
        return num2bytes(data, key.bits // 8)
    def decrypt(key, data):
        assert key.ispriv() and len(data) * 8 == key.bits
        data = bytes2num(data)
        assert 0 <= data and data < key.N
        v1 = pow(data, key.DmP1, key.P)
        v2 = pow(data, key.DmQ1, key.Q)
        data = (v2 * key.P * key.iPmQ + v1 * key.Q * key.iQmP) % key.N
        return unpad(num2bytes(data, key.bits // 8))
#### 1.2 思路
​ 注意到公钥文件`key.sad.pub`中包含的参数有`N，E,iQmP,iPmQ`，其中`iQmP, iPmQ, _ = egcd(q,
p);iQmP=iQmP%p, iPmQ=iPmQ%q`
    iQmP, iPmQ, _ = egcd(q, p)#即iQmp*q+iPmQ*p=1,其中一个为负数，一个为正数；
    iQmP = iQmP%p             #iQmP = iQmP + p * i(i=0或1)
    iPmQ = iPmQ%q             #iPmQ = iPmQ + Q * i(i=0或1)
最终得到`iQmp*q+iPmQ*p=p*q+1=N+1`，结合`p*q=N`可以得到两个方程，p、q两个未知数两个方程，直接求解即可：
    b = N+1
    a = gmpy2.iroot(b*b-4*iQmP*iPmQ*N, 2)[0]
    p1 = (b+a)/(2*iQmP)
    # p2 = (b-a)/(2*iQmP)
    # q1 = (b+a)/(2*iPmQ)
    q2 = (b-a)/(2*iPmQ)
    # if (p1*q2==N):
    #   print("success")
#### 1.3 EXP
​
求解得到P和Q之后，正常计算欧拉函数phi(N)，计算私钥D。由于加密进行了填充，直接用D解密存在问题，将参数代入到Key中，然后调用`decrypt函数`解密即可，将代码写在rusad后面。
    f = argparse.FileType('rb')("key.sad.pub")
    key = pickle.load(f)
    key.Q = 25004672227855409995386175663336188685177638541286666056441830847618100808198668167307814236224429885295241140194633625051478252429462828073782848889819460674774292004752724556602147320684206242726073358822655212944688523823150236245522627662371134165404316388528738697090763677910441487876514668914442018764569771021916503649822836288868439220382922721194436569302106969570041514638164319835688101248578648742016186666021527781591528560611986692317045407081396778512783312692838307769559661780971287324753785154074832628454871505400166651610503632212720604214996108967812794633118832616768643612648168060802523582631
    key.P = 31659077809885706699482361830477717572837081779677626435829903374921581240849180063108552019274021826092781287218568613206006085334956822705610578514426596962412655157776833178744403034727698399320215892200440936975683502329350531806920697009386909154114556681774784614085691096050135180228131842452179315216957730905902673882170120973148157907231188547167482558383495097819905373068326760590890291412820411304614611983343203819383860434964843931325658872603238498210722446318497674396725811567139923114789843056157733621133155720503541819498078610854651245426825738313809229403279974283490718799392611854934535622307
    if(key.P*key.Q==key.N):
        print("success")
    e = 65537
    d, _, g = egcd(e, (key.P-1) * (key.Q-1))
    key.DmP1=d%(key.P-1)
    key.DmQ1=d%(key.Q-1)
    key.bits=4096
    with open('flag.enc', 'rb') as f:
        cipher = f.read()
    # print(len(cipher)*8)
    m = decrypt(key,cipher)
    print(m)
### 2.Horst
#### 2.1 分析
​
题目给了一个python加密程序和一段密文，同样首先分析加密程序。程序首先定义了一个`Permutation类`，数据类型是列表list，主要关注的函数为`乘法运算mul`和`逆元运算inv`，其中`cycles函数`为输出时的转换函数，加解密过程中不涉及`cycles函数`，因此不需要考虑。可以看到程序随机生成一个密钥K，也就是flag，然后随机生成一组数据pt，使用K对其加密得到加密数据ct。题目提供了两组pt和ct数据，需要从中恢复K。
    import os
    import random
    from hashlib import sha1
    M = 3
    N = 64
    n = 2
    class Permutation:
        def __init__(self, L):
            self.n = len(L)
            self.L = L
            assert all(i in L for i in range(self.n))
        def __mul__(self, other):
            assert self.n == other.n
            return Permutation([other.L[self.L[i]] for i in range(self.n)])
        def __eq__(self, other):
            return self.L == other.L
        def inv(self):