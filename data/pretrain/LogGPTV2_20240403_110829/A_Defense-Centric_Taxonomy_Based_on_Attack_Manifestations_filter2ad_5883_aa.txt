title:A Defense-Centric Taxonomy Based on Attack Manifestations
author:Kevin S. Killourhy and
Roy A. Maxion and
Kymie M. C. Tan
A Defense-Centric Taxonomy Based on Attack Manifestations
Kevin S. Killourhy, Roy A. Maxion and Kymie M. C. Tan
PI:EMAIL, PI:EMAIL and PI:EMAIL
Dependable Systems Laboratory
Computer Science Department
Carnegie Mellon University
Pittsburgh, Pennsylvania 15213 / USA
Abstract
Many classiﬁcations of attacks have been tendered, often
in taxonomic form. A common basis of these taxonomies is
that they have been framed from the perspective of an at-
tacker – they organize attacks with respect to the attacker’s
goals, such as privilege elevation from user to root (from
the well known Lincoln taxonomy). Taxonomies based on
attacker goals are attack-centric; those based on defender
goals are defense-centric. Defenders need a way of deter-
mining whether or not their detectors will detect a given at-
tack. It is suggested that a defense-centric taxonomy would
suit this role more effectively than an attack-centric taxon-
omy. This paper presents a new, defense-centric attack tax-
onomy, based on the way that attacks manifest as anomalies
in monitored sensor data.
Unique manifestations, drawn from 25 attacks, were
used to organize the taxonomy, which was validated through
exposure to an intrusion-detection system, conﬁrming at-
tack detectability. The taxonomy’s predictive utility was
compared against that of a well-known extant attack-centric
taxonomy. The defense-centric taxonomy is shown to be a
more effective predictor of a detector’s ability to detect spe-
ciﬁc attacks, hence informing a defender that a given detec-
tor is competent against an entire class of attacks.
1. Introduction
There are many taxonomies of computer attacks (see, for
example, [1, 3, 8, 9, 10, 11, 12, 14, 16, 30], and others; sev-
eral are nicely surveyed in [17]). Although it was undoubt-
edly not their creators’ intention, these taxonomies tend to
serve the interests of attackers, as well as their original goals
of providing organizational structure for classifying attacks.
These and other similar taxonomies are attack-centric – they
represent and classify attacks from an attacker’s perspec-
tive. For example, the well-known MIT Lincoln Laboratory
taxonomy [16] groups a number of attacks into a category
called user-to-root. An attacker can choose attacks from this
group to achieve the goal of elevating himself from user to
root on the victim system. If the selected attack fails, an-
other can be chosen from the same user-to-root taxonomic
class, and then yet another, until the attacker’s objective is
achieved. In this sense, attack-centric taxonomies may con-
stitute as much or more of a boon for the attacker as for the
defender.
An important and sensible goal for an attack taxonomy,
however, should be to help the defender. Much more use-
ful to a defender than an attack-centric taxonomy would
be a taxonomy of attacks arranged to aid the defender –
a defense-centric taxonomy. Such a taxonomy would clas-
sify attacks in a way that groups together those attacks that
could be defended against similarly. For example, it would
be enormously useful to know that any attack in a given
class could be detected by the same detector; if one attack
in a class can be detected, they can all be detected. In such
a case, when a new attack emerges, and it falls into a given
class, it will be clear either that it can be detected with ex-
tant detectors, or that a new detector will need to be written.
This paper shows how a defense-centric attack taxonomy
was constructed, in accordance with taxonomic rules, using
attack manifestations – how attacks appear in sensor-stream
data – as classiﬁcation features. Categories from the well-
known MIT Lincoln Laboratory attack-centric taxonomy
[16] were used as a point of comparison to show that, for a
defender, the new defense-centric taxonomy offers greater
utility for defenders.
2 Objective and approach
The objective of the present work is to produce a new at-
tack taxonomy, termed a defense-centric taxonomy, that or-
ganizes attacks by virtue of the way they manifest as anoma-
lies in sensor data. An attack that can be detected in system-
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 05:36:00 UTC from IEEE Xplore.  Restrictions apply. 
call sensor data (monitored from the operating system) is
said to manifest in system-call data; the way it manifests
is central to the taxonomy.1 Anomaly-based detectors play
an important role in detecting not only extant attacks, but
also novel attacks; hence the present emphasis on anomaly-
based detection systems. Given an anomaly-based detec-
tion system, any attack that manifests as a particular kind
of anomaly would be classiﬁed according to that anomaly
type. Consequently, all attacks similarly classiﬁed would
manifest as the same kind of anomaly, and hence be de-
tectable by any detector that is capable of detecting that type
of anomaly (ergo steps 9 and 10 below).
The approach is straightforward, albeit laborious, con-
sisting of the following broad steps.
1. Develop an attacker-defender testbed.
2. Assemble a collection of system programs which are
known to be vulnerable to attack; develop attacks to
exploit the vulnerabilities of these system programs.
3. Run these system programs,
launching the attacks
against them, to observe their behavior under attack;
gather attack records from sensor data.
4. Run these system programs again, this time native, to
observe their normal behavior; gather normal records
from sensor data.
5. Extract attack manifestations from the program’s be-
havior as monitored by sensor data on the testbed.
6. Build a taxonomy that is defense-centric.
7. Check that it obeys classic taxonomic rules.
8. Validate the taxonomy by acquiring convergent evi-
dence from an intrusion-detection system.
9. Choose an attack-centric taxonomy against which to
compare the new defense-centric taxonomy.
10. Determine whether
the manifestations mirror
the
classes of the two taxonomy types, or not.
3 Related work – attack taxonomies
This section provides an overview, inevitably and regret-
tably brief due to space limitations, of some of the (surpris-
ingly voluminous) existing work that addresses the issue of
attack taxonomies. The selected references below are be-
lieved to be the best known and most representative of the
taxonomies in the open literature, but they are by no means
the only ones available; there are many that could not be
mentioned here. The taxonomies reviewed here have been
grouped into rough categories: ﬂaw classiﬁcations, signa-
ture classiﬁcations, and attack-effect classiﬁcations.
As a precursory note, Puketza and his colleagues were
implicit early promoters of the importance of taxonomy in
the ﬁeld of intrusion detection. Although they did not de-
sign a taxonomy, per se, they plainly stated a useful taxo-
nomic criterion: the classes should ideally “be selected such
1Note that some attacks may not manifest in sensor data; either by acci-
dent or by design, an attack may not manifest in a way that makes it visible
in a particular sensor stream.
that, within each class, either the IDS2 detects each intru-
sion, or the IDS does not detect any intrusions” [19, p.723].
They note that software testers term this distinction equiv-
alence partitioning, which bears a similarity to the present
work on defense-centric taxonomies; it doesn’t constitute a
taxonomy, but it’s suggestive of a mechanism that could be
used by a defender. In a defense-centric taxonomy, all at-
tacks in one class should be detectable by the same intrusion
detection mechanism.
Flaw classiﬁcation. Landwehr and his colleagues de-
vised a taxonomy of the types of program security ﬂaws
(e.g., buffer overﬂows) that facilitate attacks [12]. Their
taxonomy was meant to identify problematic aspects in the
system design process, a period during which security ﬂaws
are likely to be introduced into code. As such, this taxon-
omy was designed to help system designers and program-
mers create more secure systems. Matt Bishop took a sim-
ilar approach with his vulnerability taxonomy, designed to
elucidate those characteristics of a program that might al-
low it to be exploited in an attack [3]. By being aware of
such characteristics, design auditors can more easily detect
vulnerabilities before they are found and exploited by at-
tackers. In this regard, Bishop’s taxonomy of vulnerabil-
ities is similar to Landwehr’s taxonomy of security ﬂaws.
Aslam [2] proposed a taxonomy of ﬂaws that he referred to
as “security faults.” He broadly classiﬁed attacks into three
high-level taxonomic classes: coding faults introduced dur-
ing software development; operational faults which result
from improper software installation; and environment faults
when a program is used in an environment for which it was
not intended. Operational faults and coding faults are fur-
ther subdivided. The primary motivation of this taxonomy
was to make attack classes unambiguous. Lack of ambi-
guity was important for Aslam’s goal of organizing known
security ﬂaws into a vulnerability database. Krsul [10] built
upon Aslam’s work and constructed his own taxonomy of
software vulnerabilities in which the class to which a vul-
nerability belongs depends primarily on programmers’ as-
sumptions. For example, one common assumption is that
the length of an environment variable passed to a program
is of at most a certain length. This assumption sometimes
causes programmers to copy the environment variable to
a memory location of insufﬁcient length, thereby causing
a buffer overﬂow. Vulnerabilities are grouped based on
the similarity of the mistaken assumption that introduced
the vulnerability. By identifying and organizing the ﬂaws,
vulnerabilities, or faults which have security implications,
these taxonomies all aim to help system designers and pro-
grammers. Hence, designers and programmers, rather than
system administrators and defenders, are the target audience
of ﬂaw taxonomies.
2IDS: Intrusion Detection System
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 05:36:00 UTC from IEEE Xplore.  Restrictions apply. 
Signature classiﬁcation. Kumar proposed a taxonomy
of attacks based on the complexity of the signature by which
an attack is detected [11]. Attacks manifest in sensor data
by virtue of a detectable signature. The simplest class of
attacks is what Kumar called the existence class; the attack
manifests (in sensor data) as a single event which can be
detected by recognizing that particular event. Other attacks
may manifest as sequences of events that are detectable
only with regular expressions, i.e., by ﬁnite automata. It
takes less computational power to test each simple event
in a sequence for equality than it takes to determine that
that sequence of events matches a regular expression. Ku-
mar’s taxonomy expresses this “detection complexity” in
an ordering from computationally facile to computationally
demanding. Although Kumar classiﬁed attacks based on
their manifestations in sensor data, as is done in the present
work, his manifestations were brought to bear on the difﬁ-
culty of signature detection, not on the presence of partic-
ular kinds of manifestations. In addition to being quite ab-
stract, Kumar’s taxonomy was speciﬁcally tailored as an aid
in signature-based detection, not anomaly-based detection,
which is of present concern. Since his taxonomy mainly
rank orders signatures according to their complexity, it is
unclear how it can be useful to defenders or researchers try-
ing to anticipate new and novel attacks, for which signatures
do not already exist.
Attack-effect classiﬁcation. Many investigators have
proposed taxonomies that classify attacks based on the in-
tended effect of the attack, from the attacker’s perspec-
tive. An example of an attack effect is the elevation of
an attacker’s privileges from user to root. Often these tax-
onomies incorporate the technique by which the attacker
achieves this effect, such as automated password-guessing.
Lindqvist and Jonsson [14] presented such a taxonomy us-
ing these two dimensions of an attack. Marcus Ranum
[20] grouped attacks into eight intuitive categories based on
techniques used by the attacker: social engineering, imper-
sonation, exploits, transitive trust, data driven, infrastruc-
ture, denial of service, and magic. Howard and Longstaff
[9] incorporated classes of attack techniques used, and at-
tack effects desired, into their incident taxonomy, which
also includes classes of attackers and objectives. Daniel
Weber [30] proposed an attack taxonomy based on three el-
ements: the level of privilege required by the attacker (e.g.,
a local user account on the target machine), the means by
which the attack proceeded (e.g., exploitation of a software
bug), and the intended effect of an attack (e.g., temporary
denial of service) or the privilege level obtained in the attack
(e.g., administrative or ‘root’ access for the attacker). Lipp-
mann and his colleagues [15, 16] at MIT’s Lincoln Labora-
tory adapted Weber’s taxonomy, reducing it to fewer, more
intuitive classes, based solely on the effect of the attack.
In taking an attack-effect perspective, these taxonomies
User to Root
Remote to Local
Denial of Service
Surveillance / Probe
Figure 1: The four-class, attack-centric taxonomy used by
Lincoln Laboratory in the 1998 DARPA IDS evaluations.
are attack-centric in that they classify attacks based on fea-
tures potentially unknowable by a defender; for example,
a defender is not likely to be aware of vulnerabilities in
software, at least not in a way that can facilitate effec-
tive detection-level defenses against exploitations. Conse-
quently, the utility to a defender of these attack-centric tax-
onomies is questionable.
Possibly the best known of these taxonomies, due to its
extensive exposure during the DARPA 1998-99 intrusion
detection evaluation program, is the Lincoln Laboratory at-
tack taxonomy [16]. The Lincoln taxonomy was attack-
centric, and contained four classes: user-to-root, remote-to-
local, denial-of-service and surveillance/probe. These will
be discussed in greater depth in a subsequent section. The
MIT Lincoln Laboratory taxonomy is probably one of the
best known attack-centric attack taxonomies, and for that
reason it is used here as a basis of comparison to highlight
the differences and advantages of a defense-centric taxon-
omy. The Lincoln taxonomy is depicted in Figure 1.
What’s wrong with the aforementioned taxonomies? Es-
sentially, nothing is wrong with them; they simply serve
purposes different from the defense-centric taxonomy ad-
dressed in this paper (except Kumar’s taxonomy, whose
limitations were discussed above). We would like to see
if these taxonomies are as useful to a defender as one that is
explicitly designed for a defender’s use.
4 Criteria for an effective taxonomy
Before building a new taxonomy, it seems appropriate to
consider what might constitute sensible criteria for judging
its merits when ﬁnished. Although the heart of taxonomy
lies in the biological sciences (e.g., [22, 23]) in which there
is mild controversy regarding the correct way to construct a
taxonomic classiﬁcation scheme, many authors in computer
security have nevertheless proposed such criteria. Recom-
mendations tend to vary widely, with some unachievable,
some redundant, and some not clearly applicable. Lough
has done a rather thorough job of reviewing the various tax-
onomies offered by the computer security community, as
well as the criteria for evaluating them [17].
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 05:36:00 UTC from IEEE Xplore.  Restrictions apply. 
A decision was made in the present work to select min-
imal criteria which seemed sensible and, at the same time,
most consistent with guidelines in biology and systematics
(the classiﬁcation and study of entities with regard to their
natural relationships). The criteria used here for judging the
effectiveness of a taxonomy are:
• Mutual exclusivity: categories do not overlap, prevent-
• Exhaustivity: all objects or events are contained in the
• Replicability: repeated attempts at classiﬁcation of the
same objects or events, whether by the original or other
experimenters, replicates faithfully the assignment of
objects or events to taxonomic classes.
ing ambiguities from arising;
taxonomy;
5 Methodology
This section presents the procedures by which the study
was conducted, including a sketch of the hardware/software
suite used for launching and monitoring attacks.
5.1 Construct attacker-defender testbed
An attacker-defender testbed is a carefully controlled en-
vironment on which to launch attacks on or against a target
system, and to observe the effects of those attacks. It com-
prises, at minimum, an attacker machine and a victim (tar-
get) machine, plus a network joining the two. The testbed
is isolated from non-testbed machines and from the Inter-
net. The architecture for the attacker-defender testbed used