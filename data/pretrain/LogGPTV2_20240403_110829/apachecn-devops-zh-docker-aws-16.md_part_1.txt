# 十六、AWS 中的 Docker Swarm
Docker Swarm 代表 Docker 的原生容器管理平台，该平台直接内置于 Docker Engine 中，对于许多第一次使用 Docker 的人来说，Docker Swarm 是他们阅读和了解的第一个容器管理平台，因为它是 Docker Engine 的集成功能。Docker Swarm 自然是 AWS 支持的 ECS、Fargate、Elastic Beanstalk 和最近的 Elastic Kubernetes Service (EKS)产品的竞争对手，因此您可能会想知道为什么 AWS 中关于 Docker 的书会有一章专门介绍 Docker Swarm。许多组织更喜欢使用与云无关的容器管理平台，它们可以在 AWS、其他云提供商(如谷歌云和 Azure)以及内部运行，如果您和您的组织都是这样，那么 Docker Swarm 肯定是一个值得考虑的选项。
在本章中，您将学习如何使用 Docker for AWS 解决方案将 Docker Swarm 部署到 AWS，这使得在 AWS 中启动和运行 Docker Swarm 集群变得非常容易。您将学习如何管理和访问您的 Swarm 集群的基础知识，如何创建服务并将其部署到 Docker Swarm，以及如何在 Docker for AWS 解决方案中利用与 Swarm 集成的大量 AWS 服务。这将包括将 Docker Swarm 与弹性容器注册中心(ECR)集成，通过与 AWS 弹性负载平衡(ELB)集成向外界发布您的应用，使用 AWS 弹性文件系统创建共享卷(EFS)，以及使用 AWS 弹性块存储(EBS)创建持久卷。
最后，您将学习如何应对关键的运营挑战，包括运行一次性部署任务、使用 Docker 机密执行机密管理以及使用滚动更新部署应用。到本章结束时，您将知道如何将 Docker Swarm 集群部署到 AWS，如何将 Docker Swarm 与 AWS 服务集成，以及如何将您的生产应用部署到 Docker Swarm。
本章将涵盖以下主题:
*   Docker Swarm 简介
*   安装自动装卸系统的 Docker
*   访问 Docker Swarm
*   向 Docker Swarm 部署 Docker 服务
*   将 Docker 栈部署到 Docker Swarm
*   将 Docker Swarm 与 ECR 集成
*   使用 EFS 创建共享 Docker 卷
*   使用 EBS 创建持久 Docker 卷
*   支持一次性部署任务
*   执行滚动更新
# 技术要求
以下是本章的技术要求:
*   对 AWS 帐户的管理访问
*   按照第 1 章中的说明配置本地环境
*   根据第 3 章中的说明配置的本地 AWS 配置文件
*   AWS CLI 版本 1.15.71 或更高版本
*   Docker 18.06 CE 或更高版本
*   Docker 写作 1.22 或更高
*   GNU Make 3.82 或更高版本
本章假设您已经完成了本书前面的所有章节
以下 GitHub URL 包含本章使用的代码示例:[https://GitHub . com/docker-in-AWS/docker-in-AWS/tree/master/ch16](https://github.com/docker-in-aws/docker-in-aws/tree/master/ch16)。
查看以下视频，了解《行动守则》:
[http://bit.ly/2ogdBpp](http://bit.ly/2ogdBpp)
# Docker Swarm 游戏攻略
**Docker Swarm** 是 Docker Engine 的原生集成功能，提供集群管理和容器编排功能，允许您在生产中大规模运行 Docker 容器。运行版本 1.13 或更高版本的每个 Docker Engine 都能够以集群模式运行，这提供了以下功能:
*   **集群管理**:所有在集群模式下运行的节点都包含本机集群功能，允许您快速建立集群，以便将应用部署到其中。
*   **多主机联网** : Docker 支持覆盖联网，允许您创建虚拟网络，所有连接到网络的容器都可以通过该网络进行私有通信。该网络层完全独立于连接您的 Docker Engines 的物理网络拓扑，这意味着您通常不必担心传统的网络限制，如 IP 寻址和网络分段，Docker 会为您处理所有这些问题。
*   **服务发现和负载平衡** : Docker Swarm 支持基于 DNS 的简单服务发现模型，允许您的应用相互发现，而不需要复杂的服务发现协议或基础架构。Docker Swarm 还支持使用 DNS 循环对应用的流量进行自动负载平衡，并且可以与外部负载平衡器集成，如 AWS 弹性负载平衡器服务。
*   **服务扩展和滚动更新**:您可以轻松地上下扩展您的服务，当需要更新您的服务时，Docker 支持智能滚动更新功能，在部署失败时支持回滚。
*   **声明式服务模型** : Docker Swarm 使用流行的 Docker Compose 规范，以易于理解和维护的格式声明性地定义应用服务、网络、卷等。
*   **期望状态** : Docker Swarm 持续监控应用和运行时状态，确保您的服务按照您配置的期望状态运行。例如，如果您配置实例或副本计数为 2 的服务，Docker Swarm 将始终尝试并维护此计数，并在现有节点出现故障时自动将新副本部署到新节点。
*   **机密和配置管理等生产级操作功能**:Docker 机密和 Docker 配置等一些功能是 Docker Swarm 独有的，为现实世界的生产问题提供了解决方案，例如能够将机密和配置数据安全地分发到您的应用中。
说到在 AWS 上运行 Docker Swarm，Docker 提供了一个社区版产品，被称为 AWS CE 的 Docker，你可以在[https://store.docker.com/editions/community/docker-ce-aws](https://store.docker.com/editions/community/docker-ce-aws)找到关于它的更多信息。目前，用于 AWS CE 的 Docker 是通过预定义的云信息模板部署的，该模板将 Docker Swarm 与许多 AWS 服务集成在一起，包括 EC2 自动扩展、弹性负载平衡、弹性文件系统和弹性数据块存储。正如您将很快看到的，这使得在 AWS 中建立一个新的 Docker Swarm 集群变得非常容易。
# Swarm Docker 对 kubernetes(库比涅斯库比涅斯库比涅斯库比涅斯库比涅斯库比涅斯库比涅斯库比涅斯库比涅斯库比涅斯库比涅斯库比涅斯特)
首先，正如本书大部分内容所证明的那样，我是一个 ECS 人员，如果您专门在 AWS 上运行您的容器工作负载，我的建议，至少在撰写本书时，几乎总是 ECS。然而，许多组织不希望被局限在 AWS 中，而是希望采用云不可知的方法，这就是 Docker Swarm 是目前可用的领先解决方案之一的地方。
现在，Docker Swarm 与 Kubernetes 正面竞争，我们将在下一章讨论。可以公平地说，Kubernetes 看起来已经确立了自己作为领先的云不可知容器管理平台的选择，但这并不意味着您一定要忽略 Docker Swarm。
总的来说，我个人认为 Docker Swarm 更容易设置和使用，至少对我来说，一个关键的好处是它使用了熟悉的工具，如 Docker Compose，这意味着您可以非常快地启动和运行，尤其是如果您以前使用过这些工具。对于那些只想快速启动和运行，并确保事情以最小的麻烦工作的小型组织来说，Docker Swarm 是一个有吸引力的选择。AWS 的 Docker 解决方案使在 AWS 中建立 Docker Swarm 集群变得非常容易，尽管 AWS 最近推出了弹性 Kubernetes 服务(EKS)，使 AWS 上的 Kubernetes 变得容易得多——下一章将详细介绍这一点。
最后，我鼓励您以开放的心态进行尝试，并自行决定什么样的容器管理平台最适合您和您的组织目标。
# 安装自动装卸系统的 Docker
让 Docker Swarm 在 AWS 中启动并运行的推荐且最快的方法是将 Docker 用于 AWS，您可以在[https://docs.docker.com/docker-for-aws/](https://docs.docker.com/docker-for-aws/)了解更多。如果您浏览到此页面，在设置&先决条件部分，您将看到允许您为 AWS 安装 Docker 企业版(EE)和 Docker 社区版(CE)的链接。
我们将使用免费的 Docker CE for AWS(稳定)变体，请注意，您可以选择部署到全新的 VPC 或现有的 VPC:
![](img/b3c18990-a854-4275-925f-e86d1f0410e2.png)
Selecting a Docker CE for AWS option
假设我们已经有了一个现有的 VPC，如果您单击为 AWS(稳定)用户部署 Docker CE 您现有的 VPC 选项，您将被重定向到 AWS 云信息控制台，在那里您将被提示从 Docker 发布的模板创建一个新的栈:
![](img/5df1c0f5-b40b-442c-9b7b-2c67dea80f12.png)
Creating a Docker for AWS stack
单击“下一步”后，系统将提示您指定一些参数来控制 Docker Swarm Docker 安装的配置。我不会描述所有可用的选项，因此假设您应该保留这里没有提到的任何参数的默认配置:
*   **栈名称**:为您的栈指定一个合适的名称，例如 docker-swarm。
*   **群大小**:这里可以指定群管理器和工作者节点的数量。至少，您可以只指定一个管理器，但是我也建议配置一个工作节点，以便您可以测试将应用部署到多节点 Swarm 集群。
*   **Swarm Properties** :在这里，您应该配置 Swarm EC2 实例以使用您现有的管理 SSH 密钥(EC2 密钥对)，并且启用 Store 属性的创建 EFS 先决条件，因为我们将在本章稍后使用 EFS 来提供共享卷。
*   **群管理器属性**:将管理器临时存储卷类型更改为 gp2(固态硬盘)。
*   **群集工作程序属性**:将工作程序临时存储卷类型更改为 gp2(固态硬盘)。
*   **VPC/网络**:选择您现有的默认 VPC，然后确保您指定了当您选择 VPC 时显示的 VPC CIDR 范围(例如，`172.31.0.0/16`)，然后从公共子网 1 到 3 的默认 VPC 中选择适当的子网。
完成上述配置后，单击“下一步”按钮两次，最后在“查看”屏幕上，选择“我承认 AWS 云信息可能会创建 IAM 资源”选项，然后单击“创建”按钮。
此时，您的新云信息栈将被创建，并应在 10-15 分钟内完成。请注意，如果您想增加集群中管理器和/或工作器节点的数量，建议的方法是执行云信息栈更新，修改定义管理器和工作器数量的适当输入参数。此外，要升级 AWS Swarm 集群的 Docker，您应该应用最新的云信息模板，其中包括对 Docker Swarm 和各种其他资源的更新。
# Docker 为 AWS 云信息栈创建的资源
如果您在云信息控制台中查看新栈的“资源”选项卡，您会注意到创建了各种资源，其中最重要的如下所示:
*   **CloudWatch 日志组**:这将通过您的 Swarm 集群存储容器计划的所有日志。仅当您在栈创建期间启用“使用 Cloudwatch 进行容器日志记录”参数时，才会创建此资源(默认情况下，此参数处于启用状态)。
*   **外部负载平衡器**:创建了一个经典的弹性负载平衡器，用于发布对 Docker 应用的公共访问。
*   **弹性容器注册 IAM 策略**:创建一个 IAM 策略，并将其附加到所有允许对 ECR 进行读/拉访问的 Swarm 管理器和 worker EC2 实例角色。如果您将 Docker 映像存储在 ECR 中，这是必需的，这适用于我们的场景。
*   **其他资源**:还创建了多种资源，例如用于集群管理操作的 DynamoDB 表，以及在 Swarm manager 升级场景中用于 EC2 自动扩展生命周期挂钩的 Simple Queue Service (SQS)队列。
如果您单击“输出”选项卡，您会注意到一个名为 DefaultDNSTarget 的输出属性，它引用了外部负载平衡器的公共 URL。请记下此网址，因为在本章的后面部分，您将可以从这里访问示例应用:
![](img/0b5dd42f-03a6-4ac0-ae85-7e7b9d625a70.png)
Docker for AWS stack outputs
# 访问群集群
在云信息栈输出中，还有一个名为“管理器”的属性，它为每个 Swarm 管理器提供了到 EC2 实例的链接:
![](img/12a015a1-5fcc-4756-abf3-d7312af16cac.png)
Swarm Manager Auto Scaling group
您可以使用这些信息来获取您的一个 Swarm 管理员的公共 IP 地址或域名。一旦您有了这个 IP 地址，您就可以建立到管理器的 SSH 连接:
```
> ssh -i ~/.ssh/admin.pem PI:EMAIL
The authenticity of host '54.145.175.148 (54.145.175.148)' can't be established.
ECDSA key fingerprint is SHA256:Br/8IMAuEzPOV29B8zdbT6H+DjK9sSEEPSbXdn+v0YM.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '54.145.175.148' (ECDSA) to the list of known hosts.
Welcome to Docker!
~ $ docker ps --format "{{ .ID }}: {{ .Names }}"
a5a2dfe609e4: l4controller-aws
0d7f5d2ae4a0: meta-aws
d54308064314: guide-aws
58cb47dad3e1: shell-aws
```
请注意，在访问管理器时必须指定一个用户名`docker`，如果运行`docker ps`命令，可以看到管理器上默认运行着四个系统容器:
*   **shell-aws** :这提供了对管理器的 SSH 访问，这意味着您建立到 Swarm 管理器的 SSH 会话实际上正在这个容器内运行*。*
*   **元 aws** :提供一般的元数据服务，包括提供允许新成员加入集群的令牌。
*   **guide-aws** :执行集群状态管理操作，例如将每个管理器添加到 DynamoDB，以及其他内务处理任务，例如清理未使用的映像和卷以及停止的容器。
*   **l4 控制器-aws** :管理与 Swarm 集群的外部负载平衡器的集成。该组件负责发布新端口，并确保它们在弹性负载平衡器上是可访问的。请注意，您不应该直接修改集群的 ELB，而应该依靠`l4controller-aws`组件来管理 ELB。
要查看和访问集群中的其他节点，可以使用`docker node ls`命令:
```
> docker node ls
ID                         HOSTNAME                      STATUS   MANAGER STATUS   ENGINE VERSION
qna4v46afttl007jq0ec712dk  ip-172-31-27-91.ec2.internal  Ready                     18.03.0-ce
ym3jdy1ol17pfw7emwfen0b4e* ip-172-31-40-246.ec2.internal Ready    Leader           18.03.0-ce
> ssh docker@ip-172-31-27-91.ec2.internal Permission denied (publickey,keyboard-interactive).
```
请注意，工作节点不允许公共 SSH 访问，因此您只能从管理器通过 SSH 访问工作节点。但是有一个问题:您不能建立到工作节点的 SSH 会话，因为管理节点没有本地存储的管理员 EC2 密钥对的私钥。
# 设置对 Docker Swarm 的本地访问
虽然您可以通过 SSH 会话远程运行 Docker 命令到 Swarm 管理器，但是使用本地 Docker 客户端与远程 Swarm 管理器后台程序交互要容易得多，在本地 Docker 客户端中，您可以访问本地 Docker 服务定义和配置。我们还存在无法通过 SSH 访问工作节点的问题，我们可以通过使用 SSH 代理转发和 SSH 隧道技术来解决这两个问题。
# 配置 SSH 代理转发
要设置 SSH 代理转发，首先使用`ssh-add`命令将管理员 SSH 密钥添加到本地 SSH 代理中:
```
> ssh-add -K ~/.ssh/admin.pem
Identity added: /Users/jmenga/.ssh/admin.pem (/Users/jmenga/.ssh/admin.pem)
> ssh-add -L
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCkF7aAzIRayGHiiR81wcz/k9b+ZdmAEkdIBU0pOvAaFYjrDPf4JL4I0rJjdpFBjFZIqKXM9dLWg0skENYSUl9pfLT+CzValQat/XpBw/HfwzbzMy8wqcKehN0pB4V1bpzfOYe7lTLmTYIQ/21wW63QVlZnNyV1VZiVgN5DcLqgiG5CHHAooMIbiExAYvRrgo8XEXoqFRODLwIn4HZ7OAtojWzxElBx+EC4lmDekykgxnfGd30QgATIEF8/+UzM17j91JJohfxU7tA3GhXkScMBXnxBhdOftVvtB8/bGc+DHjJlkYSxL20792eBEv/ZsooMhNFxGLGhidrznmSeC8qL /Users/jmenga/.ssh/admin.pem
```
`-K`标志是特定于 macOS 的，它会将 SSH 密钥的密码添加到您的 OS X 钥匙串中，这意味着此配置将在重新启动后保持不变。如果不使用 macOS，可以直接省略`-K`标志。
您现在可以使用`-A`标志访问您的 Swarm 管理器，该标志配置 SSH 客户端使用您的 SSH 代理身份。使用 SSH 代理还可以启用 SSH 代理转发，这意味着用于与 Swarm 管理器建立 SSH 会话的 SSH 密钥可以自动用于或转发您可能在 SSH 会话中建立的其他 SSH 连接:
```
> ssh -A PI:EMAIL
Welcome to Docker!
~ $ ssh docker@ip-172-31-27-91.ec2.internal
Welcome to Docker!
```
如您所见，使用 SSH 代理转发解决了能够访问您的工作节点的问题。
# 配置 SSH 隧道
**SSH 隧道**是一种强大的技术，允许您通过加密的 SSH 会话将网络通信安全地隧道传输到远程主机。SSH 隧道的工作原理是公开一个连接到远程主机上的远程套接字或端口的本地套接字或端口。这可能会造成您正在与本地服务通信的错觉，这在使用 Docker 时尤其有用。
以下命令演示了如何使运行在 Swarm 管理器上的 Docker 套接字显示为运行在本地主机上的端口:
```
> ssh -i ~/.ssh/admin.pem -NL localhost:2374:/var/run/docker.sock PI:EMAIL &
[1] 7482
> docker -H localhost:2374 ps --format "{{ .ID }}: {{ .Names }}"
a5a2dfe609e4: l4controller-aws
0d7f5d2ae4a0: meta-aws
d54308064314: guide-aws
58cb47dad3e1: shell-aws
> export DOCKER_HOST=localhost:2374
> docker node ls --format "{{ .ID }}: {{ .Hostname }}" qna4v46afttl007jq0ec712dk: ip-172-31-27-91.ec2.internal
ym3jdy1ol17pfw7emwfen0b4e: ip-172-31-40-246.ec2.internal
```
传递给第一个 SSH 命令的`-N`标志指示客户端不要发送远程命令，而`-L`或本地转发标志配置将本地主机上的 TCP 端口`2374`映射到远程 Swarm 管理器上的`/var/run/docker.sock` Docker Engine 套接字。命令末尾的&符号(`&`)字符导致命令在后台运行，进程标识作为该命令的输出发布。
有了这个配置，您现在可以运行 Docker 客户端，本地引用`localhost:2374`作为连接到远程 Swarm 管理器的本地端点。请注意，您可以使用`-H`标志或通过导出环境变量`DOCKER_HOST`来指定主机。这将允许您在本地环境中引用本地文件的同时执行远程 Docker 操作，从而更容易管理和部署到您的 Swarm 集群。
Although Docker does include a client/server model that enables communications between a Docker client and remote Docker Engine, to do so securely requires mutual transport layer security (TLS) and public key infrastructure (PKI) technologies, which are complex to set up and maintain. Using SSH tunneling to expose the remote Docker socket is much easier to set up and maintain, and is considered as secure as any form of remote SSH access.
# 将应用部署到 Docker Swarm