作者：0x7F@知道创宇404区块链安全研究团队  
时间：2018年6月26日
### 0x00 前言
[Solidity](http://solidity.readthedocs.io/en/v0.4.24/ "Solidity")
是一种用与编写以太坊智能合约的高级语言，语法类似于 JavaScript。Solidity
编写的智能合约可被编译成为字节码在以太坊虚拟机上运行。Solidity
中的合约与面向对象编程语言中的类（Class）非常类似，在一个合约中同样可以声明：状态变量、函数、事件等。同时，一个合约可以调用/继承另外一个合约。
在 Solidity 中提供了 `call`、`delegatecall`、`callcode`
三个函数来实现合约之间相互调用及交互。正是因为这些灵活各种调用，也导致了这些函数被合约开发者“滥用”，甚至“肆无忌惮”提供任意调用“功能”，导致了各种安全漏洞及风险：
2017.7.20，Parity Multisig电子钱包版本 1.5+ 的漏洞被发现，使得攻击者从三个高安全的多重签名合约中[窃取到超过 15 万
ETH](https://blog.zeppelin.solutions/on-the-parity-wallet-multisig-hack-405a8c12e8f7 "窃取到超过 15 万 ETH") ，其事件原因是由于未做限制的 `delegatecall`
函数调用了合约初始化函数导致合约拥有者被修改。
2018.6.16，“隐形人真忙”在先知大会上演讲了[“智能合约消息调用攻防”](https://paper.seebug.org/625/
"“智能合约消息调用攻防”")的议题，其中提到了一种新的攻击场景—— `call` 注⼊，主要介绍了利用对 `call`
调用处理不当，配合一定的应用场景的一种攻击手段。接着于 2018.6.20，`ATN`
代币团队发布[“ATN抵御黑客攻击的报告”](https://paper.seebug.org/621/
"“ATN抵御黑客攻击的报告”")，报告指出黑客利用 `call` 注入攻击漏洞修改合约拥有者，然后给自己发行代币，从而造成 `ATN` 代币增发。
由此本文主要是针对 Solidity 合约调用函数`call`、`delegatecall`、`callcode`
三种调用方式的异同、滥用导致的漏洞模型并结合实际案例进行分析介绍。
### 0x01 Solidity 的三种调用函数
在 Solidity 中，`call` 函数簇可以实现跨合约的函数调用功能，其中包括 `call`、`delegatecall` 和 `callcode`
三种方式。
以下是 Solidity 中 `call` 函数簇的调用模型：
    .call(...) returns (bool)
    .callcode(...) returns (bool)
    .delegatecall(...) returns (bool)
这些函数提供了灵活的方式与合约进行交互，并且可以接受任何长度、任何类型的参数，其传入的参数会被填充至 32 字节最后拼接为一个字符串序列，由 EVM
解析执行。
在函数调用的过程中， Solidity 中的内置变量 `msg` 会随着调用的发起而改变，`msg`
保存了调用方的信息包括：调用发起的地址，交易金额，被调用函数字符序列等。
**三种调用方式的异同点**
  * call: 最常用的调用方式，调用后内置变量 `msg` 的值 **会修改** 为调用者，执行环境为 **被调用者** 的运行环境(合约的 storage)。
  * delegatecall: 调用后内置变量 `msg` 的值 **不会修改** 为调用者，但执行环境为 **调用者** 的运行环境。
  * callcode: 调用后内置变量 `msg` 的值 **会修改** 为调用者，但执行环境为 **调用者** 的运行环境。
通过下面的例子对比三种调用方式，在 `remix` 部署调试，部署地址为
`0xca35b7d915458ef540ade6068dfe2f44e8fa733c`：
    pragma solidity ^0.4.0;
    contract A {
        address public temp1;
        uint256 public temp2;
        function three_call(address addr) public {
            addr.call(bytes4(keccak256("test()")));                 // 1
            //addr.delegatecall(bytes4(keccak256("test()")));       // 2
            //addr.callcode(bytes4(keccak256("test()")));           // 3
        }
    }
    contract B {
        address public temp1;
        uint256 public temp2;
        function test() public  {
            temp1 = msg.sender;
            temp2 = 100;
        }
    }
在部署后可以看到合约 A 的变量值： `temp1 = 0x0, temp2 = 0x0`，同样合约 B 的变量值也是： `temp1 = 0x0,
temp2 = 0x0`。
现在调用语句1 `call` 方式，观察变量的值发现合约 A 中变量值为 `0x0`，而 **被调用者** 合约 B 中的 `temp1 =
address(A), temp2 = 100`：
现在调用语句2 `delegatecall` 方式，观察变量的值发现合约 B 中变量值为 `0x0`，而 **调用者** 合约 A 中的 `temp1 =
0xca35b7d915458ef540ade6068dfe2f44e8fa733c, temp2 = 100`：
现在调用语句3 `callcode` 方式，观察变量的值发现合约 B 中变量值为 `0x0`，而 **调用者** 合约 A 中的 `temp1 =
address(A), temp2 = 100`：
### 0x02 delegatecall “滥用”问题
> delegatecall: 调用后内置变量 `msg` 的值 **不会修改** 为调用者，但执行环境为 **调用者** 的运行环境。
#### 原理
在智能合约的开发过程中，合约的相互调用是经常发生的。开发者为了实现某些功能会调用另一个合约的函数。比如下面的例子，调用一个合约 A 的 `test()`
函数，这是一个正常安全的调用。
    function test(uint256 a) public {
        // codes
    }
    function callFunc() public {
        .delegatecall(bytes4(keccak256("test(uint256)")), 10);
    }
但是在实际开发过程中，开发者为了兼顾代码的灵活性，往往会有下面这种写法：
    function callFunc(address addr, bytes data) public {
        addr.delegatecall(data);
    }
这将引起任意 public 函数调用的问题：合约中的 `delegatecall` 的调用地址和调用的字符序列都由用户传入，那么完全可以调用任意地址的函数。
除此之外，由于 `delegatecall`
的执行环境为调用者环境，当调用者和被调用者有相同变量时，如果被调用的函数对变量值进行修改，那么修改的是调用者中的变量。
#### 利用模型
下面的例子中 B 合约是业务逻辑合约，其中存在一个任意地址的 `delegatecall` 调用。
    contract B {
        address owner;
        function callFunc(address addr, bytes data) public {
            addr.delegatecall(data);
            //address(Attack).delegatecall(bytes4(keccak256("foo()")));  //利用代码示意
        }
    }
攻击者对应这种合约可以编写一个 Attack 合约，然后精心构造字节序列(将注释部分的攻击代码转换为字节序列)，通过调用合约 B 的
`delegatecall`，最终调用 Attack 合约中的函数，下面是 Attack 合约的例子：
    contract Attack {
        address owner;
        function foo() public {
            // any codes
        }
    }
对于 `delegatecall` “滥用”的问题，实际的漏洞效果取决于 Attack 合约中的攻击代码，可能造成的安全问题包括：
  1. 攻击者编写一个转账的函数，窃取合约 B 的货币
  2. 攻击者编写设置合约拥有者的函数，修改合约 B 的拥有者
#### delegatecall 安全问题案例
**Parity MultiSig钱包事件**
2017.7.20，Parity Multisig电子钱包版本 1.5+ 的漏洞被发现，使得攻击者从三个高安全的多重签名合约中窃取到超过 15 万 ETH
，按照当时的 ETH 价格来算，大约为 3000 万美元。
其事件原因是由于未做限制的 `delegatecall` 可以调用 `WalletLibrary`
合约的任意函数，并且其钱包初始化函数未做校验，导致初始化函数可以重复调用。攻击者利用这两个条件，通过 `delegatecall` 调用
`initWallet()` 函数，最终修改了合约拥有者，并将合约中的以太币转到自己的账户下。
下面是存在安全问题的代码片段：  
(Github/parity:
)
a. delegatecall 调用代码：  
(`contract Wallet is WalletEvents`)
    // gets called when no other function matches
      function() payable {
        // just being sent some cash?
        if (msg.value > 0)
          Deposit(msg.sender, msg.value);
        else if (msg.data.length > 0)
          _walletLibrary.delegatecall(msg.data);
      }
b. initWallet() 与 initMultiowned() 代码片段：  
(`contract WalletLibrary is WalletEvents`)
    function initWallet(address[] _owners, uint _required, uint _daylimit) {
        initDaylimit(_daylimit);
        initMultiowned(_owners, _required);
    }
    ...
    function initMultiowned(address[] _owners, uint _required) {
        m_numOwners = _owners.length + 1;
        m_owners[1] = uint(msg.sender);
        m_ownerIndex[uint(msg.sender)] = 1;
        for (uint i = 0; i  call: 最常用的调用方式，调用后内置变量 `msg` 的值 **会修改** 为调用者，执行环境为 **被调用者** 的运行环境。
`call` 注入是一种新的攻击场景，由“隐形人真忙”在先知大会上演讲“智能合约消息调用攻防”议题上提出，原因是对 `call`
调用处理不当，配合一定的应用场景的一种攻击手段。
#### call 注入原理
**call 调用修改 msg.sender 值**  
通常情况下合约通过 `call` 来执行来相互调用执行，由于 `call` 在相互调用过程中内置变量 `msg`
会随着调用方的改变而改变，这就成为了一个安全隐患，在特定的应用场景下将引发安全问题。
外部用户通过 call 函数再调用合约函数：
**高度自由的 call 调用**
在某些应用场景下，调用函数可以由用户指定；下面是 `call` 函数的调用方式：
    .call(function_selector, arg1, arg2, ...)
    .call(bytes)
从上面可以看出，`call` 函数拥有极大的自由度：
  1. 对于一个指定合约地址的 `call` 调用，可以调用该合约下的任意函数
  2. 如果 `call` 调用的合约地址由用户指定，那么可以调用任意合约的任意函数
为了便于理解，可以将智能合约中的 `call` 函数类比为其他语言中的 `eval` 函数，`call`
函数相当于给用户提供了随意调用合约函数的入口，如果合约中有函数以 `msg.sender` 作为关键变量，那么就会引发安全问题。
**call 函数簇调用自动忽略多余参数**  
`call` 函数簇在调用函数的过程中，会自动忽略多余的参数，这又额外增加了 `call` 函数簇调用的自由度。下面的例子演示 `call`
自动忽略多余参数：
    pragma solidity ^0.4.0;
    contract A {
        uint256 public aa = 0;
        function test(uint256 a) public {
            aa = a;
        }
        function callFunc() public {
            this.call(bytes4(keccak256("test(uint256)")), 10, 11, 12);