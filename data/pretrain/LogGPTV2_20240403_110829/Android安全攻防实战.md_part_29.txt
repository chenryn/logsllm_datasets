反编译回Java代码呢？好吧，一个好消息是：这是可能的。当然，这有赖于你使用
的反编译器的质量以及DEX代码的复杂程度。因为，除非你理解了DEX代码的实
际运作方式，否则你就将一直是你的DEX反编译器的奴隶。能让常见反编译器不能
正常工作的方法有很多，包括使用反射机制和使用非标准的DEX变形指令等。所以，
如果你现在甚至还不能阅读DEX代码，就想通过这个实验变成一个Android逆向工
程师，这可是打错了算盘！
但是换句话说，Androidapp中的大多数DEX代码是以相当标准的形式存储的，
而反编译器，就像我们马上就要使用的那个，是能够处理一般的DEX文件的。
准备工作
开始之前，你先要去网上下载几个工具。
·Dex2Jar：这个工具能从APK文件中提取出 DEX文件，并输出一个含有相应
的.class 文件的JAR。你可以在 htp://code.google.com/p/dex2jar/下载到它。请
访间这个URL，并下载与你的操作系统对应的版本。
·JD-GUI：这是一个 Java .class 文件的反编译器。可以在http://jd.benow.ca/下载。
202
---
## Page 221
第6章逆向app
它支持Linux、Mac和Windows 系统。
怎么做
把一个样例DEX文件反编译回Java代码，你需要执行以下步骤。
1.我们假设一开始你只有一个APK或者DEX文件。在这一情况下，你需要先
把 DEX文件转成Java 的.class文件。下面是用Dex2jar完成这一任务的指令
格式：
dex2jar[Dex file] . dex
如果你做实验时，用的是我提供的样例文件，你要执行的就是下面这条命令
dex2jar Example.dex
执行结果的输出，如图6.24这张截图所示。
[e]k3170makan@Bl4ckwldew:~/AndroidSecurity/ReverseEngine
this cmd is deprecated,use the d2j-dex2jar if possible
dex2jar.sh Example.dex
dex2jar verston:translator-0.0.9.15
dex2jar Exanple.dex->Example_dex2jar.jar
Done.
图 6.24
如果一切顺利，在你的工作目录或当前目录下就应该已经有了一个名为
“Example_dex2jar.jar”的文件了，如图6.25所示。
[e]k317enakan@BL4ckHLd0w:-/AndroLdSecurLty/ReverseEngLneerLng/dexRev/Disa
ls-al
rw-rw-r-.
1
k317enakan
k3170makan
784A
Aug
24 21:46 Exanple.dex
图 6.25
2.这样你就有了.class 文件了。接下来我们要做的就是把它反编译回Java 代码。
JD-GUI就是接下来我们要使用的工具。要使用JD-GUI，我们要做的就是运
行JD-GUI目录里的JD-GUI这个可执行文件。下面是在Linux系统中在终端
中你需要输入的命令：
jd-gu1
马上会弹出一个如图6.26所示的窗口出来。
203
---
## Page 222
Android安全攻防实战
Oe@JavaDecompller
File Edit Na
archHelp
图 6.26
3.这个窗口弹出来之后，你可以单击文件夹图标，打开一个class 文件。图6.27
是单击后弹出的文件选择对话框。
B4 bydes Tutsfer.
77 bytes 21:43
图 6.27
这个对话框打开之后，我们只需在里面选中之前我们解析Example.dex得到
的.class文件即可。如果能找到它的话，JD-GUI会把其中的代码显示如图6.28
所示。
204
---
## Page 223
第6章逆向app
7 k3171
 k3171
图 6.28
4.你可以使用JD-GUI保存源文件。你所要做的不过是单击工具栏上的File菜
单，再选择“SaveAllSources”选项，并提供一个保存源码的目录即可，如
图6.29所示。
Open File...
Ctrl+O
Ciose
Ctri+w
Save Seurce
Ctrl+5
Ctrl+Alt+S
Recent: Files
Exit
AIt+X
图 6.29
6.6反编译app的原生库
Android的原生库反编译起来也相当简单，毕竞它们都是C/C++的object文件和
为ARM平台编译的二进制可执行文件。所以反编译它们的难度仅在于找一个类似
件的反编译器。结果输出之后，在AndroidNDK的帮助下，对我们来说，这个问题
也就解决了
在我们开始讲解操作细节之前，我们先要去下载相关的工具。
205
---
## Page 224
Android安全攻防实战
准备工作
这个实验的准备工作相当简单，你只要有一份最新版的AndroidNDK包就行了，
NDK 的 下载地是: http://developer.android.com/tools/sdk/ndk/index.html。
怎么做·.
反编译一个原生库，你只要使用Android NDK中 toolchain里提供的一个工具—
objdump就可以了。这个工具已经预编译好了，其中包含了所有使objdump能够处理
字节序和指定ARM二进制可执行文件格式的插件。
要反编译一个Android原生库，你要做的就是在你的终端或命令行下执行下面这
条命令即可。
arm1inux-androideabiobjdump D [native 1ibrary] . s0
比如图6.30所示的这个例子。
m/6./ /2.10
图 6.30
其中 arm-linux-androideabi-objdump 存放在 Android NDK 的 toolchains/armlinux-
androideabi-[version]/prebuilt/[arch]/bin/目录下。该路径中的[arch]对应的是你的机器的
体系结构或版本号。在这个例子里我使用的是一台Linuxx86_64机器。
要使用objdump输出的信息，你需要理解ARM处理器的指令和操作码格式，以
及一些关于ELF可执行文件格式的知识。在“拓展阅读”一节中，我已经列出了一
些很棒的参考资料，包括一个名为Sieve的Androidapp的链接，它可以用来演示这
个实验中使用的一些命令。
拓展阅读
• The ELF for the ARM Architecture document at http:/infocenter.arm.com/
help/topic/com.arm.doc.ihi0044e/IHI0044E_aaelf.pdf.
•The ARM7TDMI Technical Reference Manual  document at http://www,
atmel.com/Images/DD10029G_7TDMI_R3_trm.pdf.
。 The ARM Processor Architecture webpage at htp:/www.arm.com/products
206
---
## Page 225
第6章逆向app
processors/instruction-set-architectures/index.php.
。 The Tool Interface Standard (TIS) Exccutable and Linking Format (ELF)
Specification Version 1.2 document available at http:/refspecs.linuxbase.org/elf/
elf.pdf.
° Sieve—A password manager app, showcasing some common Android vulnera
bilitiesat https:/www.mwrinfosecurity.com/system/assets/380/original/ sieve.apk.
6.7使用GDBserver调试Android进程
通过GDB这类工具调试进程，是大多数内存破坏，缓冲区溢出以及恶意软件分
析人员每天要做的事。查看内存和对应用的进程做动态分析是任何一个逆向工程师
的基本功一不论你关心的是什么平台。这其中，当然也包括Android。下面这个实
验将向你展示如何使用GDB调试一个运行在Android设备上的进程。
准备工作
要完成这个实验，你需要下载下列工具：
°Android NDK 包 的 下 载 地 址http:/developer.android.com/tools/sdk/ndk/
index.html:
·Android SDK 包。
怎么做
使用gdbserver调试一个正在运行的Android进程，你需要执行以下步骤
1.首先要确保你的Android设备已经root 了，或者是一台Android模拟器。模
拟器的详细安装过程，我在这里就不赞述了，如果你还不清楚Android模拟
app 的证书和签名”一节中的相关内容。如果你已经知道怎么去创建一台
Android模拟设备了，你可以使用下面这条命令，把它运行起来，如图6.31
所示。
[SDK-path] /sdk/tools/emulator no-boot-anim -memory 128  paxrtition-si.ze 512
5-/enulator-avd debugger -no-boot-anin-no·skin -nenory 128-partitton-stze 512
19 ]
2.当模拟器或目标设备运行起来之后，你可以使用ADB shell去访问它。你应
207
---
## Page 226
Android安全攻防实战
该执行下面这条命令。
abd she11
你还必须确保你有root权限。在模拟器里，默认就有root权限，但如果你是
在一台真实的设备上做这个实验的话，你还必须在输入其他命令之前先执行
下su命令
3.然后，你需要以读-写权限mount 系统目录，因为我们要复制一个gdbserver
到系统目录中去。如图6.32所示是你应该怎样重新mount目录，在你的adb
shell中执行下面这条命令。
mount
root@androtd:/#nount
ootfs/rootfsroθ0
nosuld,node=75500
reθ
ouacct00
rofs
nnt/asec
de=70000
ouprw,cpu00
/dev/block/mtdblock2/cache yaffs2rw,nosuid,nodev0θ
图 6.32
这里会输出关于每个块设备都是怎么mount的一些信息，由于我们关心的是
/system目录。所以我们要关注的是：以/dev/开头的这一行里给出的，在/system
之前打印出来的路径。在这个例子里，mount 在/system 位置上的是名为
/dev/block/mtdblock0 的设备。
4.用下面这条命令，重新mount这个目录，如图6.33所示。
mount -o rw,remount[device]/system
6ev/block/ntdblocko/systenyaffs2rw60
/dev/block/ntdblock2 /cache yaffs2rw,nosutd,nodev0
图 6.33
5.现在你已经可以把gdbscrver复制到设备里去了。图6.34是在你的计算机里
应该输入的命令。
adb push [NDK-path]/prebui1t/android-arm/gdbserver/gdbserver /system/bin
208
---
## Page 227
第6章逆向app
gdbserver
n8l4ckwid
0w:~/And
rot.dev/android-ndk-r8e/prebut1t/androtd-arn/gdbse
2510KB/s（26812 bytes 1n0.104s)
°9 ]
6.目标设备上有了gdbserver之后，你就能运行它，并附加一个运行中的进程。
不过在这样做之前，你需要知道要附加进程的ID（Process ID，PID）。你可
以像下面这样，在目标设备上运行ps命令，获取PID。
P8
ps命令会列出当前正在运行的所有进程的概要信息。我们关心的是其中某个
进程的PID。图6.35是在我们运行的模拟器中运行ps命令的输出结果。
1]root@androtd:/#ps
root
PID
296
NAME
root
0942268
5 kthreadd
root
root
c004ce30
c004ce30
root
c004ce38
c094ce30
200000
5kblockd/θ
root
root
94ce38
c016f7c4
ksertod
00
oot
1011
c004ce39
c006f36c
Spdflush
root
12
c006f36c
1314
pdflush
00
10900000
5ato/0
apde
root
25
c016d0f8
00000000
root