title:BLOCKWATCH: Leveraging similarity in parallel programs for error
detection
author:Jiesheng Wei and
Karthik Pattabiraman
BLOCKWATCH: Leveraging Similarity in Parallel
Programs for Error Detection
Jiesheng Wei and Karthik Pattabiraman
Department of Electrical and Computer Engineering
The University of British Columbia (UBC), Canada.
{jwei, karthikp}@ece.ubc.ca
Abstract—The scaling of Silicon devices has exacerbated the
unreliability of modern computer systems, and power constraints
have necessitated the involvement of software in hardware error
detection. Simultaneously, the multi-core revolution has impelled
software to become parallel. Therefore, there is a compelling need
to protect parallel programs from hardware errors.
Parallel programs’ tasks have signiﬁcant similarity in control
data due to the use of high-level programming models. In this
study, we propose BLOCKWATCH to leverage the similarity in
parallel program’s control data for detecting hardware errors.
BLOCKWATCH statically extracts the similarity among differ-
ent threads of a parallel program and checks the similarity
at runtime. We evaluate BLOCKWATCH on seven SPLASH-2
benchmarks to measure its performance overhead and error
detection coverage. We ﬁnd that BLOCKWATCH incurs an
average overhead of 16% across all programs, and provides an
average SDC coverage of 97% for faults in the control data.
Keywords: Parallel programs, Control-data, SPMD, Static
Analysis, Runtime checks
I. INTRODUCTION
The continued scaling of Silicon devices has exacerbated
their unreliability and error-proneness. In the near future,
microprocessors will experience signiﬁcantly higher rates of
hardware faults [1]. Processor faults have hitherto been masked
from software through redundancy at the hardware level [2]
(e.g., dual modular redundancy). However, as power con-
sumption becomes a ﬁrst class concern in computer systems,
hardware-only solutions become infeasible due to their high
power costs. Therefore, software applications must be de-
signed to tolerate hardware faults.
On another front, the microprocessor industry has adopted
the multi-core paradigm, or the integration of multiple cores
on a single die. Already, eight-core processors are available
on the market, and the number of cores is expected to
increase in future generations [3]. The multi-core paradigm
has revolutionized software development, and industry experts
have predicted that parallel programs will become the de-facto
standard in the future [4]. Therefore, parallel programs that
run on future multi-core processors will need to be capable
of detecting and recovering from hardware errors. While
error recovery for parallel programs has received considerable
attention [5], efﬁcient error detection remains a challenge.
In this paper, we explore the use of similarity among
tasks (i.e.,
threads) of a parallel program for runtime er-
ror detection. The similarity arises as a result of high-level
programming models, such as Single Program Multiple Data
(SPMD) paradigm. Our approach statically extracts the sim-
ilarity through compiler-based analysis, and inserts runtime
checks in the program. The runtime checks compare the
behaviors of the tasks at runtime, and ﬂag any deviation from
the statically extracted similarity as an error. Because we
leverage similarity among a group of tasks for error detection,
we call our approach BLOCKWATCH1.
SPMD is the most commonly used style for parallel pro-
gramming [6], While there are many sources of similarity in an
SPMD program [7], we focus on the similarity of control-data
(i.e. the data that is used to make branch and loop decisions),
to detect faults that corrupt the control-data. We deﬁne two
threads as exhibiting control-data similarity at a branch if
the behavior of a thread for the branch is constrained by
the behavior of the other threads for the same branch. We
focus on control-data because: (1) control-data is critical for
the correctness of a program, and errors in this data lead
disproportionately to Silent Data Corruptions (SDCs)2 [8], (2)
SPMD programs exhibit substantial similarity in the control-
data (Section V), and (3) no software technique other than
duplication can protect this class of program data.
Duplication, or running two copies of a program and
comparing their outputs, has been used to detect errors in
sequential programs [9]. The main advantage of duplication
is that it is simple to apply and requires no knowledge of the
application. However, duplication has two main disadvantages
when applied to parallel programs. First, parallel programs are
often non-deterministic, and duplicated versions of a parallel
program may yield different results,
thus rendering them
ineffective for error detection. Second, duplication requires
twice the amount of hardware resources, and hence reduces
the resources available for the actual program, thus leading to
signiﬁcant slowdowns [10].
We are not the ﬁrst to observe that parallel programs exhibit
similarity among their tasks - other techniques have used
parallel programs’ similarity for error detection [11], [12].
BLOCKWATCH differs from these techniques in two ways.
First, the other techniques learn the similarity by observing
the program at runtime, and may consequently incur false-
positives because they cannot distinguish between an unex-
pected corner case and a deviation due to an error. In contrast,
BLOCKWATCH is based on the static characteristics of the
program, which by deﬁnition, incorporates a superset of the
dynamic runtime behaviors, and hence has no false positives.
This is especially important in production settings where a
false-positive can trigger wasteful recovery. Secondly, BLOCK-
WATCH operates at the granularity of individual branches in
the program while the other techniques operate at the function
1BLOCKWATCH is a program for crime prevention by residents watching
for suspicious activities in a neighbourhood and reporting them.
2An SDC is a deviation from the output in an error-free execution.
978-1-4673-1625-5/12/$31.00 ©2012 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:48:23 UTC from IEEE Xplore.  Restrictions apply. 
or region granularities. As a result, BLOCKWATCH can detect
errors that affect a single branch, even if the error does not
cause deviations at other granularities. To our knowledge,
BLOCKWATCH is the ﬁrst technique to statically extract the
similarity among a parallel programs’ tasks, and leverage it
for runtime error detection.
The main contributions we make in this paper are as follows:
1) Identify generic code patterns that characterize control-
data similarity in parallel programs.
3) Build a scalable,
2) Develop compiler techniques to statically extract the
control-data similarity patterns, and instrument the pro-
gram with runtime checks corresponding to the patterns.
lock-free monitor for dynamically
executing the runtime checks inserted by the compiler.
4) Evaluate BLOCKWATCH on seven SPLASH-2 bench-
mark programs [13]. The results of our empirical eval-
uation show that BLOCKWATCH, (1) ﬁnds considerable
control-data similarity in the programs (50% to 95%),
(2) incurs average performance overheads of about 16%
across the programs (for 32 threads on a 32-core ma-
chine), and (3) provides average coverage of 97% for
transient errors in the control-data3.
Although the current
implementation of BLOCKWATCH
focuses on control-data, it can be extended to detect faults
that propagate to regular instructions. Studies have shown that
around 80% of the runtime instructions in SPMD parallel
programs exhibit similarity [7], which means they can be
used for error detection.
BLOCKWATCH has three aspects that make it practical.
First, BLOCKWATCH does not require any modiﬁcations to
the hardware, and can work on today’s multi-core systems.
Secondly, it does not require any intervention from the pro-
grammer, and is fully automated. Finally, BLOCKWATCH
incurs no false positives (i.e., does not detect an error unless
one occurs in the program).
The rest of this paper is organized as follows: Section II
discusses the BLOCKWATCH approach with an example, while
Section III details its implementation. Section IV introduces
the experimental setup, and Section V presents the eval-
uation. Section VI quantitatively compares BLOCKWATCH
to software-based duplication. Finally, Section VII surveys
related work and Section VIII concludes the paper.
II. APPROACH
This section describes the high-level approach of BLOCK-
WATCH. Section II-A presents the fault model for BLOCK-
WATCH, while Section II-B lists the assumptions we make
about the parallel program. Section II-C uses an example
parallel program to illustrate the kinds of similarity considered
by BLOCKWATCH. Section II-D illustrates the runtime checks
introduced by BLOCKWATCH on the example program.
A. Fault Model
We consider transient or intermittent hardware faults that
affect at most one processor or core in a multi-processor or
multi-core processor. The fault can occur in the processor
datapath, control logic or memory elements in the core (e.g.,
caches). However, we assume that no more than one core or
processor is affected by a fault at any time. This is reasonable
3We measure coverage as fraction of errors that do not lead to SDCs.
as hardware faults are rare events (relative to the total time of
execution of a parallel program).
Our fault model also captures certain kinds of software
errors such as rare race conditions and memory corruption
errors that result in a thread deviating from its static semantics.
However, we do not consider software errors in this paper.
B. Assumptions on Parallel Program
We make three assumptions regarding the parallel program.
First, we assume that it is written using a shared memory
model, which is the common case with multi-core processors
today. We have implemented BLOCKWATCH for pthreads style
parallel programs, though it can be extended for other kinds
of shared memory parallel programs (e.g., CUDA programs).
Second, we assume that the parallel program is written in an
SPMD style. This ensures that the code to be executed by each
thread is identical, and hence it sufﬁces to analyze the common
code to identify the similarity of branch runtime behavior
among threads. Finally, we assume that the entire source code
of the program is available for analysis by BLOCKWATCH.
If this is not the case, BLOCKWATCH will not be able to
statically extract the program’s similarity characteristics.
C. Control-data Similarity in Parallel Programs
We use Figure 1 to illustrate the presence of similarity in the
control-data of a parallel program. In Figure 1, the program
starts from function main(), which spawns nprocs threads, all
of which execute the function slave() concurrently. The slave()
function ﬁrst assigns a unique thread ID procid to each thread
in line 17 - 20 in Figure 1. It then executes four branches
labeled 1 through 4 in the ﬁgure. The bold italic variables
in the slave() are either constants or global variables that are
shared among all threads. In this paper, we include loops in
our deﬁnition of branches.
We now illustrate the control-data similarity among the
program’s threads in Figure 1 for each of the four branches
in the slave() function. The generic code patterns that result
in the similarity are shown in Table I. The similarity of the
control-data in the four branches are as follows:
1) Branch 1: The branch condition tests equality of thread
ID and a constant 0. Because the constant is the same
for all threads, and the thread ID is different, at most one
thread will take the branch in a correct execution. This
would be classiﬁed as threadID according to Table I.
2) Branch 2: The variable i shares the same initial value,
increment value and end value among all threads. As-
suming there are no break statements in the loop, all
threads execute the same number of loop iterations. This
would be classiﬁed as shared according to Table I.
3) Branch 3: The variable gp[procid].num is thread local
and may be different for different threads. This would
be classiﬁed as none according to Table I.
4) Branch 4: The variable private is also thread local.
However, it’s value is either 1 or -1, depending on the
outcome of branch 3. Therefore, threads in which private
takes the same value will make the same decision in this
branch. This is classiﬁed as partial according to Table I.
Thus, the control-data for each of the four branches above
belongs to a different similarity category according to Table I.
The table also illustrates the type of similarity exhibited by
the branches belonging to each category. This similarity is
encoded as a runtime check in Section II-D.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:48:23 UTC from IEEE Xplore.  Restrictions apply. 
Note that
the similarity inference only relied on static
analysis of the program’s code, and did not require us to
execute it. In this example, we showed the analysis on the
program’s source code for simplicity. In reality, the analysis
is done on the program’s intermediate code generated by the
compiler (Section III-A).
for ( i = 0;
i  im - 1) {
private = 1;
} else {
}
...
// Branch 4: partial
if ( private > 0) {
}
private = -1;
...
...
...
}
}
i <= im - 1; i = i + 1) {
Fig. 1.
Sample pthreads parallel program to illustrate the static similarity
among all threads in the program. The comments indicate the similarity
categories for each branch according to the classiﬁcation in Table I.
D. Runtime Checking
In the previous section, we saw how to statically identify the
similarity of the control data used in the branches in Figure 1.