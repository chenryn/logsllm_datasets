R11 =Ox1802fe4e
rabec
r0,
R12=0x16ebfb3
0002FC40
rsbee
r0,
r12,
r9,
5p=0x1B02fe24
2PC44
rsbeg
r0.
r5r
Pe =00002fe38
0x00011044
0002FC48
rsbegs
r0,4
0002FC4C
0002PCS0
U^
nory 1
Address:
0x0002fc3x
DC342000
5600 6100 69 006e 0077 00 6500 73 00 74 00
A000EFC4C
00-23-00.00-00-00-00-00-60-11-11-02-00-00-00-00
.8.1.1.
OO02PCSC
5c0076.0075006c00200650078006500
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
1.
00002FC7C
0000 0010000000200000 0000000000 00
failwest字符串
300420000
20 03 0 00 00 00 00 00 00 00 00 00 00 00 00
0000 0000000000 0000000000 00000000
2420000
x0002PCAC
0020200000000020399900
74 FA T9 1R 9n Ae 04 Nn f4 fe TP 1R F7 N M An
.P6K
图7.5.5转入shellcoe执行
241
---
## Page 267
day安全：
0
当我们执行完0002FC38bxr4指令后模拟器中就会弹出failwest对话框了，如图7.5.6
所示。
软件漏洞分析技术（第2版）
failwest
Wednesday
June30,2010
12:43 AM
Phone off
ok
No ba
fahwest
Noupo
Device unlodked
Contacts
图7.5.6
弹出对话框
242
---
## Page 268
第8章其他类型的软件漏洞
8.1
格式化串漏洞
8.1.1
printf中的缺陷
格式化串漏洞产生于数据输出函数中对输出格式解析的缺陷。以最熟悉的printf函数为例，
其参数应该含有两部分：格式控制符和待输出的数据列表。
#include"stdio.h"
main()
inta=44,b=77;
printf("a=&d,b=8d\n",a,b);
printf（"a=&d,b=&d\n"）;
对于上述代码，第一个printf调用是正确的，第二个调用中则缺少了输出数据的变量列表。
那么第二个调用将引起编译错误还是照常输出数据？如果输出数据又将是什么类型的数据呢？
按照实验环境将上述代码编译运行，实验环境如表8-1-1所示。
表8-1-1实验环境
推荐使用的环境
备注
操作系统
Windows XP SP2
其他Win32操作系统也可进行本实验
编详器
Visual C++ 6.0
编详选项
默认编译选项
build版本
release版木
debug版本的实验过程将和本实验指导有所差异
说明：推荐使用VC加载程序，在程序关闭前自动暂停程序以观察输出结果。
其运行结果如图8.1.1所示。
-x
1
图8.1.1printf函数的缺陷
---
## Page 269
0
day
第二次调用没有引起编译错误，程序正常执行，只是输出的数据有点出乎预料。使用
安全：
OllyDbg调试一下，得到“a=4218928,b=44”的原因就真相大白了。
第一次调用printf的时候，参数按照从右向左的顺序入栈，栈中状态如图8.1.2所示。
软件漏洞分析技术
Printf(a=%d,b=%d\n,a.b):
格式控制符
a=%d,b=%d
变量1（a）
数据列表
变量2（b）
（第
**....
图8.1.2printf函数调用时的内存布局
2
版
当第二次调用发生时，由于参数中少了输入数据列表部分，故只压入格式控制符参数，这
时栈中状态如图8.1.3所示。
Printf(*a=%d,b=%d\n):
格式控制符
a=%d,b%d
格式控制符
先前调用的
变量1（a）
残留数据
变量2（b）
图8.1.3格式化串漏洞原理
式输出了栈中紧随其后的两个DWORD。现在应该明白输出“a=4218928.b=44”的原因了：
4218928的十六进制形式为0x00406030，是指向格式控制符“a=%d,b=%dn”的指针：44是残
留下来的变量a的值。
如果我们把第二个调用写成
printf（"a=8d,b=8d,c=ed\r");
聪明的读者朋友，您能预测出第三个变量输出的值吗？
8.1.2用printf读取内存数据
到此为止，这个问题还只是一个bug，算不上漏洞。但如果printf函数参数中的“格式控
制符”可以被外界输入影响，那就是所谓的格式化串漏洞了。对于如下代码：
244
---
## Page 270
第
#include"stdio.h"
8
int main(int argc,char*argv)
章
printf(argv[1]);
其
他
类
按照实验环境编译，实验环境如表8-1-2所示。
型
表8-1-2实验环境
的
软
推荐使用的环境
备注
件
操作系统
Windows XP SP2
其他Win32操作系统也可进行本实验
漏
编译器
Visual C++ 6.0
洞
编详选项
默认编译选项
build版本
release版本
debug版本的实验过程将和本实验指导有所差异
说明：请使用命令行方式加载，并传入适当的参数配合实验。
当我们向程序传入普通字符串（如“failwest"）时，将得到简单的反馈。但如果传入的字
符串中带有格式控制符时，printf就会打印出栈中“莫须有”的数据。
例如，输入“%p.%p.%p……”，实际上可以读出栈中的数据，如图8.1.4所示。
2ubnerbiiscv test
图8.1.4利用格式化串漏洞读内存
8.1.3用printf向内存写数据
只是允许读数据还不算很糟糕，但是如果配合上修改内存数据，就有可能引起进程劫持和
shellcode植入了。
在格式化控制符中，有一种鲜为人知的控制符%n。这个控制符用于把当前输出的所有数
据的长度写回一个变量中去，下面这段代码展示了这种用法。
#include"stdio.h"
int main（int argc,char**argv)
intlen_print=0;
printf(*before write:length=&d\n*,len_print);
printf("failwest:&d&n\n",len_print,&len_print);
printf("after write:length=&d\n",len_print);
245
---
## Page 271
day
0
安
第二次printf调用中使用了%n控制符，它会将这次调用最终输出的字符串长度写入变量
全
len_print中。“failwest:0”长度为10，所以这次调用后len_print将被修改为10。
：
软
按照实验环境编译代码，实验环境如表8-1-3所示。
件
表8-1-3实验环境
漏
洞
推荐使用的环境
分
操作系统
Windows XP SP2
其他Win32操作系统也可进行本实验
析
编译器
Visual C++ 6.0
技
编详选项
默认编详选项
术
build 版木
release版本
debug版本的实验过程将和本实验指导有所差异
（第
说明：推荐使用VC加载程序，在程序关闭前能自动暂停程序以观察输出结果。
2
运行结果如图8.1.5所示。
版
"C:Documents and SettingsVdministratorDeskx
befere urite:leoyth-8
ailuest:
Fterueite:
Length=1B
ressany key tutontinee
4
图8.1.5利用格式化串漏洞写内存
8.1.4格式化串漏洞的检测与防范
当输入输出函数的格式化控制符能够被外界影响时，攻击者可以综合利用前面介绍的读内
存和写内存的方法修改函数返回地址，劫持进程，从而使shellcode得到执行。
比起大量使用命令和脚本的UNIX系统，Windows操作系统中命令解析和文本解析的操作
并不是很多，再加上这种类型的漏洞发生的条件比较苛刻，使得格式化串漏洞的实际案例非常
罕见。
堆栈溢出漏洞往往被复杂的程序逻辑所掩盖，给漏洞检测造成一定困难。相对而言，格式
化串漏洞的起因非常简单，只要检测相关函数的参数配置是否恰当就行。通常能够引起这种漏
洞的函数包括：
int printf(const char*format[,argument]...);
int wprintf（const wchar_t*formatI,argument]...);
int fprintf（FILE*stream,const char*formatI,argument l...);
int fwprintf（FILE*stream,constwchar_t*formatI,argument ]...);
int sprintf（char *buffer,constchar*format[,argument]...）:
int swprintf(wchar_t*buffer,const wchar_t*format
[,argument]...）:
246
---
## Page 272
第
intvprintf（const char *format,va_list argptr）;
8
int vwprintf(const wchar_t*format,va_list argptr）;
章
intvfprintf（FILE *stream,const char *format,va_list argptr）;
int vfwprintf（ FILE *stream,const wchar_t*format,va_list argptr）;
其
int vsprintf（char*buffer，constchar*format,va_list argptr）;
他
类
型
所以，通过简单的静态代码扫描，一般可以比较容易地发现这类漏润。此外，VS2005中
的
在编译级别对参数做了更好的检查，而且默认情况下关闭了对“%n”控制符的使用。
软
件
8.2SQL注入攻击
漏
洞
8.2.1SQL注入原理
SQL命令注入的漏洞是Web系统特有的一类漏洞，它源于PHP、ASP等脚本语言对用户
输入数据和解析时的缺陷。
以PHP语言为例，如果用户的输入能够影响到脚本中SQL命令串的生成，那么很可能在
添加了单引号、#号等转义命令字符后，能够改变数据库最终执行的SQL命令。
如图8.2.1所示，如果程序员在编程时没有对用户输入的变量S和Sp进行合理的限制，那
么当攻击者把用户名输入为admin'#的时候，输入字串中的单引号将和脚本中的变量的单引号
形成配对，而输入字串中的“#”号对于MySQL的语言解释器来说是一行注释符，因此后边
的语句将被当做注释处理。在上述例子中，通过这样的输入，攻击者可以轻易绕过身份验证机
制，没有正确的密码也能着到管理员的信息。
SQL注入攻击的精髓在于构造巧妙的注入命令串，从服务器不同的反馈结果中，逐步分析
出数据库中各个表项之间的关系，直到彻底攻破数据库。遇到功能强大的数据库（如MSSQL
Server）时，如果数据库权限配置不合理，利用存储过程有时甚至可以做到远程控制服务器。
mysql_db_query(db',"select * from name where user&’ and psw=&g'");
WagminS122
个
mysq|_db_query(db，select*fromname where useradminand psw123)
“#”后的命令将被当作注释
11
最终执行的SQL命令：select*fromtable_name where user='admin
图8.2.1SQL注入原理
不像缓冲区溢出攻击那样需要掌握大量系统底层的知识，SQL注入攻击的技术门槛相对较
低，只要懂得基本的Web技术和数据库知识，就能够实施攻击。另外，一些自动化的攻击工具
（如NBSI2等）也使得这类攻击变得更加容易。目前，这类攻击技术已经发展成为一一套比较完
247
---
## Page 273
0
day
善的体系，并成为“黑”网站的主流技术。
安
全
悉这些脚本语言和数据库技术的前提下，简要总结这两种网站类型中常用的漏洞攻击与防范
软
技术。
件
脚本类攻击非常灵活，取决于WebServer配置参数、数据库类型、数据库权限配置、脚本
漏
逻辑等诸多因素，且自成体系。鉴于脚本类漏洞利用与软件的内存漏洞利用技术相差甚远，如
洞
分
有机会我将单独著书，系统地介绍这类技术。
析
技
8.2.2攻击PHP+MySQL网站
术
首先要介绍儿个PHP配置文件php.ini中与注入攻击相关的重要选项，如表8-2-1所示。
2
表8-2-1
版
选项
安全配量
说明
safe_mode
on
安全模式
display_errors
off
是否向客户端返回错误信息。错误信息能够帮助攻击者摸
清数据库的表结构和变量类型等重要信息
自动将提交变量中的单引号、双引号、反斜线等特殊符号