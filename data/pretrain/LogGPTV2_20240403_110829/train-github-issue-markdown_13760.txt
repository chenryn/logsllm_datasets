## ðŸš€ Feature
    class A(nn.Module):
        def forward(self, x):
            if torch.jit.is_scripting() or not torch.jit.is_tracing():
                return x + 1
            else:
                return x + 2
    a = A()
    script = torch.jit.script(a)
prints
    RuntimeError: 
    Python builtin  is currently not supported in Torchscript:
      File "/torch/jit/_trace.py", line 979
        code with ``torch.jit.trace``) and ``False`` otherwise.
        """
        return torch._C._is_tracing()
               ~~~~~~~~~~~~~~~~~~~~ <--- HERE
    'is_tracing' is being compiled since it was called from 'A.forward'
      File "a.py", line 20
        def forward(self, x): 
            if torch.jit.is_scripting() or not torch.jit.is_tracing():
               ~~~~~~~~~~~~~~~~~~~~~~ <--- HERE                                                       
                return x + 1
            else:   
## Motivation
we have some code that works in eager & scripting mode, but need a different
codepath in tracing mode to handle dynamic shapes.
Workaround: this works, at the cost of duplicating the eager/scripting
codeblock:
           if torch.jit.is_scripting():
                return x + 1
            else:
                if not torch.jit.is_tracing():
                    return x + 1
                else:
                    return x + 2
cc @gmagogsfm