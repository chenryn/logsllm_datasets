## 2. 流计算与批计算的区别是什么？有些同学在《[29 \| 流计算与消息（一）：通过 Flink理解流计算的原理](https://time.geekbang.org/column/article/143215)》的课后留言提问，对于"按照固定的时间窗口定时汇总"的场景，流计算和批计算是不是就是一样的呢？对于这个问题，我们通过一个例子来分析一下就明白了。比如，你要在一个学校门口开个网吧，到底能不能赚钱需要事先进行调研，看看学生的流量够不够撑起你这个网吧。然后，你就蹲在学校门口数人头，每过来一个学生你就数一下，数一下一天中每个小时会有多少个学生经过，这是流计算。你还可以放个摄像头，让它自动把路过的每个人都拍下来，然后晚上回家再慢慢数这些照片，这就是批计算。简单地说，流计算就是实时统计计算，批计算则是事后统计计算，这两种方式都可以统计出每小时的人流量。那这两种方式哪种更好呢？还是那句话，**看具体的使用场景和需求**。流计算的优势就是实时统计，每到整点的时候，上一个小时的人流量就已经数出来了。在T+0 的时刻就能第一时间得到统计结果，批计算相对就要慢一些，它最早在 T+0时刻才开始进行统计，什么时候出结果取决于统计的耗时。但是，流计算也有它的一些不足，比如说，你在数人头的时候突然来了个美女，你多看了几眼，漏数了一些人怎么办？没办法，明天再来重新数吧。也就是说，对于流计算的故障恢复还是一个比较难解决的问题。另外，你数了一整天人头，回去做分析的时候才发现，去网吧的大多数都是男生，所以你需要统计的是在校男生，而不是所有人的数量。这时候，如果你保存了这一天所有人的照片，那你重新数一遍照片就可以了，否则，你只能明天上街再数一次人头。这个时候批计算的优势就体现出来了，因为你有原始数据，当需求发生变化的时候，你可以随时改变算法重新计算。总结下来，大部分的统计分析类任务，使用流计算和批计算都可以实现。流计算具有更好的实时性，而批计算可靠性更好，并且更容易应对需求变化。所以，大部分针对海量数据的统计分析，只要是对实时性要求没有那么高的场景，大多采用的还是批计算的方式。
## 3. RPC 框架的 JDBC 注册中心上节课《[34 \| 动手实现一个简单的 RPC框架（四）：服务端](https://time.geekbang.org/column/article/148482)》的课后思考题，要求你基于JDBC协议实现一个注册中心，这样就可以支持跨服务器来访问注册中心。这个作业应该是我们这个系列课程中比较难的一个作业了，我在这里也给出一个实现供你参考。这个参考实现的代码同样在放在 GitHub上，你可以在[这里查看或者下载](https://github.com/liyue2008/simple-rpc-framework/tree/jdbc-nameservice)，它和之前的RPC 框架是同一个项目的不同分支，分支名称是jdbc-nameservice。同样，我把如何设置环境，编译代码，启动数据库，运行这个RPC 框架示例的方法都写在了 README 中，你可以参照运行。相比于原版的 RPC 框架，我们增加了一个单独的Module：jdbc-nameservice，也就是 JDBC版的注册中心的实现。这个实现中，只有一个类 JdbcNameService，和LocalFileNameService 一样，他们都实现了 NameService 接口。在JdbcNameService 这个注册中心实现中，它提供 JDBC协议的支持，注册中心的元数据都存放在数据库中。我们这个思考题，其中的一个要求就是，能兼容所有支持 JDBC协议的数据库。虽然 JDBC 的协议是通用的，但是每种数据库支持 SQL的语法都不一样，所以，我们这里把 SQL语句作为一种资源文件从源代码中独立出来，这样确保源代码能兼容所有的 JDBC数据库。不同类型的数据的 SQL 语句，可以和数据库的 JDBC驱动一样，在运行时来提供就可以了。这个数据库中，我们只需要一张表就够了，这里面我们的表名是rpc_name_service，表结构如下:![](Images/8267873755de1fe8cdd99b27fa7975d4.png){savepage-src="https://static001.geekbang.org/resource/image/a5/4c/a520c21a5ee1f1a12c13bb15eb9da34c.jpg"}为了能自动根据数据库类型去加载对应的 sql，我们规定 sql文件的名称为：\[SQL 名\] \[数据库类型\].sql。比如我们使用的 HSQLDB自动建表的 SQL 文件，它的文件名就是：ddl.hsqldb.sql。\JdbcNameService 这个类的实现就比较简单了，在 connect方法中去连接数据库，如果 rpc_name_service 不存在，就创建这个表。在registerService 中往数据库中插入或者更新一条数据，在 lookupService中去数据库查询对应服务名的 URI。在使用的时候，还需要在 CLASSPATH 中包含下面几个文件：1.  add-service.\[数据库类型\].sql2.  lookup-service.\[数据库类型\].sql3.  ddl.\[数据库类型\].sql4.  数据库的 JDBC 驱动 JAR 文件。在我们这个实现中，已经包含了 HSQLDB 这种数据库的 SQL文件和驱动，你也可以尝试提供 MySQL 的 SQL 文件和驱动，就可以使用 MySQL作为注册中心的数据库了。
## 4. 完成作业的最佳姿势我们案例篇的几个编码的作业，都是基于课程中讲解的代码进行一些修改和扩展，很多同学在留言区分享了代码。为了便于你修改和分享代码，建议你使用GitHub 的 Fork 功能，用法也很简单，在示例项目的 GitHub页面的右上角，有一个 Frok 按钮，点击之后，会在你自己的 GitHub账号下面创建一份这个项目的副本，你可以在这个副本上进行修改和扩展来完成你的作业，最后直接分享这个副本的项目就可以了。
## 总结以上就是我们这次热点问题答疑的全部内容了，同时我们这个系列课程的最后一篇：案例篇到这里也就结束了。这个案例篇模块不同于前两个模块，之前主要是讲解一些消息队列相关的实现原理、知识和方法技巧等等，案例篇的重点还是来通过实际的案例，来复习和练习前两篇中涉及到的一些知识。我们案例篇中每节课的作业，大多也都是需要你来写一些代码。希望你在学习案例篇的时候，不要只是听和看，更重要的就是动手来写代码，通过练习把学到的东西真正的消化掉。也欢迎你在评论区留言，分享你的代码。感谢阅读，如果你觉得这篇文章对你有一些启发，也欢迎把它分享给你的朋友。![](Images/4daea3d1a08e48460d8df87c2a766cef.png){savepage-src="https://static001.geekbang.org/resource/image/de/23/de0a489e6b4fa9a49450bf9197593423.jpg"}
# 期末测试 \| 消息队列100分试卷等你来挑战！你好，我是李玥。到这里，《消息队列高手课》这门课程已经全部结束了。照例，我给你准备了一个期末小测试，来帮助你检验自己的学习效果。之前的期中测试，检验的主要内容是消息队列实现原理相关的知识。这次的期末测试，我们要加大一点儿难度，考察更多的，是你对实现消息队列所需的这些知识技能的掌握情况，检验你"造轮子"的能力。当然，测试题中涉及到的知识都是我们课程中讲到过的。在期末测试题中，共有 5 道单选题，5 道多选题，满分 100分。你可以通过下面的答题系统来答题，检测自己的学习效果。![](Images/62aa5cbee007cffa0f936166e3a2d131.png){savepage-src="https://static001.geekbang.org/resource/image/28/a4/28d1be62669b4f3cc01c36466bf811a4.png"}](http://time.geekbang.org/quiz/intro?act_id=60&exam_id=68)在答完题之后，你也可以回顾试卷内容。对不太理解或答错的问题，进行深入思考和学习。在每道题的解析中，我为你标注了题目所对应的专栏内容。希望你可以针对自己的疑惑点，到专栏中找到相应的课程深入学习。好的，开始测试吧，祝你学有所成。![](Images/4daea3d1a08e48460d8df87c2a766cef.png){savepage-src="https://static001.geekbang.org/resource/image/de/23/de0a489e6b4fa9a49450bf9197593423.jpg"}``{=html}