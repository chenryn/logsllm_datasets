### Hash Generation and Data Querying

**Hash Generation:**

- **MD5 Hash Generator:**
  - Website: [https://passwordsgenerator.net/md5-hash-generator/](https://passwordsgenerator.net/md5-hash-generator/)
  - MD5 Hash: `9EFOEC63E2E52320CB20E345DCBA8112`

- **SHA1 Hash Generator:**
  - Website: [https://passwordsgenerator.net/sha1-hash-generator/](https://passwordsgenerator.net/sha1-hash-generator/)
  - SHA1 Hash: `D15FB15C1BC88F4B7932FD29918D1E9E9BBE7CA5`

- **SHA256 Hash Generator:**
  - Website: [https://passwordsgenerator.net/sha256-hash-generator/](https://passwordsgenerator.net/sha256-hash-generator/)
  - SHA256 Hash: `37A790A268B9FE62B424BABFC3BCAB0646BFB24B93EC1619AAE7289E0D7086DB`

**Data Query Performance:**

Your primary frustration may be the speed of each query. I store all my data on an internal solid-state drive (SSD) with excellent read speeds, yet it still takes a few minutes to parse through 2TB of data. If you are using an external spinning drive, expect the time to triple. If this technique proves valuable, consider a dedicated machine for this purpose. Personally, I avoid conducting these queries within a virtual machine due to speed issues. I use a dedicated MacBook Pro with a 4TB internal drive to store and query my content, which may be more than necessary for your needs.

**Address and Password Analysis:**

The addresses are likely controlled by our target since the passwords are the same and the addresses are similar. This provides new search options. However, this search only queries for the exact text password term. If you have a database that has not been dehashed, your target password could be present in MD5, SHA1, or other hash formats. Let's convert this password into the most commonly used hashes using the following websites, displaying the output below each:

- **Leak Information:**
  - File: `Leaks/1183_houstonastros_comf_ound_hash_algorithm_plain.txt.zip`
  - SHA1: `D15FB15C1BC88F4B7932FD29918D1E9E9BBE7CA5:H8teful0ne45`

This tells us that a user with the password "H8teful0ne45" was present in a breach related to the Houston Astros. It is possible this is the same person, but it could also be a coincidence. The more unique the password, the more confident I am that it is the same individual. Further investigation is warranted. Next, I would try to locate the original breach data, which would likely include any email addresses associated with that password hash.

**Further Investigation:**

These results give me more confidence that these accounts are owned by the same person. The variant of the "hateful" password and the presence of "johndoe" in the original email address and the new password convince me we are on the right track. I would now target this new email address and replicate the searches mentioned in previous chapters. We should also check our Pastes search tool and the online breach resources previously explained.

**Query Commands:**

- `rg -a -F -I -N 9EFOEC63E2E52320CB20E345DCBA8112`
- `rg -a -F -I -N D15FB15C1BC88F4B7932FD29918D1E9E9BBE7CA5`
- `rg -a -F -I -N 37A790A268B9FE62B424BABFC3BCAB0646BFB24B93EC1619AAE7289E0D7086DB`

**Data Leaks:**

- **Elasticsearch Database:**
  - Host: `34.80.1.1`
  - Port: `9200`
  - Indices:
    - `.monitoring-es-6-2019.09.24`
    - `.monitoring-es-6-2019.09.23`
    - `.monitoring-es-6-2019.09.22`
    - `.monitoring-es-6-2019.09.21`
    - `.monitoring-kibana-6-2019.09.21`

- **Query Examples:**
  - `http://34.80.1.1:9200/bank/_search?size=100`
  - `http://34.80.1.1:9200/bank/_search?size=10000`

- **Issues:**
  - The following URL queries the data based on the target IP address `34.80.1.1`. The result can be seen in Figure 28.03.
  - Figure 28.04 displays actual redacted results from this query, identifying the first name, last name, email address, gender, city, state, bank account number, and balance associated with a customer. The rest of the index contains the same information for additional customers.

- **Combining IP, Port, Index, and Query:**
  - The URL combines the IP address (`34.80.1.1`), necessary port (`9200`), name of the index (`bank`), and instructions to display the first 100 records (`/_search?size=100`). To view the maximum number of entries visible within the browser, we would query 10,000 records with the following URL.

- **Index List:**
  - The following URL queries this data based on the target IP address `34.80.1.1`. The result can be seen in Figure 28.03.

- **Redacted Results:**
  - Figure 28.04 displays actual redacted results from this query, identifying the first name, last name, email address, gender, city, state, bank account number, and balance associated with a customer. The rest of the index contains the same information for additional customers.

This structured approach will help in systematically analyzing and querying the data for further insights.