---
## Page 158
while条件的逻辑否定，是下面的表达式：
分析take方法
 notifyAlf
将 tail加1就可以了，不过如果超过buffer 的长度，就必须回到0。也就是下面这样：
行 notifyAll，把 wait 中的线程全部唤醒。
放置蛋糕的操作是以下面的语句表示的：
taif易count 静更新
的就是“可以摆放蛋糕的空间”，这个数字必须大于0。
空间”：
理解吧：
take方法也使用了Guarded Suspension Pattern（第3章）。而警戒条件，也就是
take 方法也会抛出Interrupted Exception。也就是可以取消的方法。
接着要分析的是 List 5-4的 take 方法。大致上是 put 方法的相反操作。
把蛋糕放上去了以后，需要将 tail前进到“下一次放置蛋糕的位置”。基本上只要
或许将警戒条件改写成下面的形式，
上面的程序代码已经将蛋糕放在桌予上了。因为桌子的状态变化了，所以要执
!(count  0
tail = (tail + l)  buffer.length;
if (tail >= buffer.length)
tail++;
tail = 0;
..警戒条件
...警戒条件
，更容易看出是“还有可以用米摆放蛋糕的
---
## Page 159
在这里与put方法一样，使用余数运算符：
 head 与 count 的更新 
算是作为拿蛋糕用的take方法的警戒条件，这也是大家都可以接受的。
head（头）字段则表示下一次拿取蛋糕的位置。拿走蛋糕以后，head 也要前进。
也就是说“现在桌上的蛋糕数人于0”，即“蛋糕至少有1个”，相信以这个运
另外，因为拿走了一个蛋糕，所以 count 的值减去1。顺序图如图5-2所示。
head = (head + l)  buffer,length;
count. >0
这与下面的表达式同义：
图 5-2
放了上去
范例程序的顺序图（MakerThread与EaterThread只画一个人）
--·-
.
put
put_
.put
----
.警戒条件
Producer-Consumer-
-1
Table
1T
take
take
take
:EaterThread
71
一我来做，你来用
错5
国
---
## Page 160
递 Data参与者中继站，通道的角色。
十涉，Channel 参与者也要进行共享互斥。
可以传送Data 参与者之前，保持等待状态。
与者没有Data 参与者可以给Consumer 参与者，
接受之前，保持等待状态。
者的状态无法接受Data 参号者，这时 Producer 参与者会在 Channel 的状态变成可以
Consumer 参与者的要求，将Data 参与者传送出去。为了确保安全性，Producer 参
Channel（通道）参乌者
EaterThread 拟任Consumer 参与者的角色，
Consumer
由 MakerThread担任 Producer 参与者的角色。
notifyAll，把 wait 中的线程全部唤醒。
 notifyAlf
E
与者与Consumer 参与者要对访问进行共享排斥。
像这样，Channel参与者介于Producer 参与者、Consumer参与者之间，担任传
Producer-Consumer Pattern 的所有参与者
当 Consumer 参与者从 Channel 参与者获取 Data 参与者的时候，若Channel 参
当 Producer 参与者将 Data 参与者传给 Channel参与者的时候，若 Channel 参与
Producer（生产者）参易者
Data 参与者
上面的程序代码已经将蛋糕拿走了。因为桌子的状态变化了，所以要执行
Channel 参与者会从 Producr 参与者处接收 Data 参与者，并保管起来。并应
Consumer 参与者会从 Channel 参与者获取 Data 参与者。在范例程序中，由
Producer 参与者会建立 Data 参与者，传递给Channel 参与者。在范例程序中，
在范例程序中，Data 参与者是 String类（蛋糕）。
Data 参与者ll Producer 参与者所建立，并由 Consumer 参与者所使用。
Producer-Consumer Pattern 的所有参与者如下：
（消费者）参乌者
：这时Consumer参与者在Channel
---
## Page 161
参与者的线程，而是Producer 参者的线程了。
理。若 Producer 参与者直接调用Consumer 参与者的话，进行处理的就不是Consumcr
接下来我们就比较直接调用方法，与通过Channel参与者传递有什么不同。
让Producer 参与者直接调用Consumer 参与者的方法”这样的疑问油然而生。所以
Consumer参与者，设计了一个Channel参与者放在中们。这里可能会“为仆么不能
不能直接传递吗
是只要会调用 take方法就可以了。使用 synchronized、wait、notifyAll 这些考虑到多
是说，MakerThrcad不必理会其他线程，只要调用 put 方法就好；而 EatcrThread 也
Patterm，但MakerThread 类与EaterThread 类都不想依于 Table 类的详细实现。也就
者送到Consumer参与者的于I：
Channel 参与者进行线程之刘的共享互斥，让Producer参与者能正确地将Data 参！
直接调用方法
线程操作的程序代码，全部隐藏在 Channel 参与者 Table 类里面。
保护安全性的Channel 参与者[复用性]
扩展思考方向的提示
Consumer 参与者想要获取Data参与者，通常是想要使用Data 参与者作某些处
Producer-Consumer Pattern中，Producer 参与者为了将Data 参与者传送给
范例程序中，Table 类的 put 方法与 take 方法都使州了Guarded Suspension
Producer-Consumer Pattern 中，肩负保护安今性的使命的是Channel 参与者，
Producer-Consumer Pattern 的类图如图5-3 所示。
在范例程序中，Table类就扮演Channel 参与j者的角色。
Produoar
图5-3
Producer-Consumer Pattern 的类图
...
 Producer-Consumer-
charnol
Data
sueuo
KTakes darta
4Lses
.chanmel_.
Contunor
一我来做，你来用
1
---
## Page 162
格A务线精设研模武
队到一
参与者呢？下面比较各种决定传递顺序的方式。
参与者。当 Channel参与者拥有多个Data参与者时，要以什么顺序传递给Consumer
要以什么顺序传递Data参与者
为内存不足，无法分配出存放蛋糕的实例。
EaterThread平均速度较慢的情况下，最后（虽然可能要等很长一段时间）还是会因
就可以实现出可存储的实例数没有上限的Channel 参与者了。但是即使这样做，在
素数），会直接影响到缓冲 MakerThread与EaterThread 间处理速度差的程度，
也可以不用等待，可以不断做出新蛋糕摆到桌上。桌上的蛋糕数（buffer 字段的元
吞地吃，那厨师就要等上很久。
3个蛋糕，如果要摆第4个以上，就必须等待到客人拿走蛋糕才行。如果客人慢吞
下的蛋糕会越来越多，··段时间后还是会达到buffer 字段的上限。
Channel参与者负荷派生的问题
就是我们下面要介绍的。
量限制，当Chanmel 参'者无法负荷时，就不能再增加 Data 参与者了。这个“负荷”,
参与者的影响：
参与者可以不断地制作新的Data 参与者。Producer参与者的操作不会受到Consumer
者后，不用等待Consumer参与者，而可以马上开始制作下一个Data参与者。Producer
通过 Channel 参易者传递
做下一个（或是比喻成厨师在自己吃掉自己做的蛋糕)。
个数据的操作也必须延迟。这样会使程序的响应性变差。
最常见的做法，是把最先收到的传出去。这种方法我们在Guarded Suspension
Chaanel 参与者会从 Producer 参与者中接受 Data 参与者，并传递给 Consumer
当然，如果客人吃蛋糕的平均速度比厨师做出的蛋糕的平均速度低，那桌上留
如果增加桌上可以摆放的蛋糕数量呢？这么一来，就算客人吃得慢一点，厨师
范例程序中，桌上可以摆放的蛋糕最多可以有3个。厨师最多可以在桌上摆出
当然，虽说可是不断地制作新的Data参与者，但也受到Channel 参与者的存储
而通过 Channerl参与者时呢？Producer 参与者将Data 参与者传给 Channel参与
直接调用对方的方法，就好像厨师制作蛋糕直接交给客人，等客人吃完才开始
这样一来，这个处理所花的时间，也得由 Producer 线程来负担，因此制作下
最先妆到鸭先传
---
## Page 163
诀，可说是多线程程序中，解决问题的重要线索。
程合作才进行的。也就是说，合作与互斥本来就具有深远的关系。因此，上述的口
以必须进行共享互斥，使共享的东西不会损坏。而线程的共享互斥，也是为了让线
的中介，才能实现线程的协调合作。
中间者———Channel参与者，具有重要的意义。因为Channel参与者的存在，Producer
[中间者的存在]隐含的意义
优先队列称为队列，而Data参与者收到时间较晚者优先性高的优先队列称为堆栈。
者。决定优先次序的方法就琳琅满目了。
者中对Data参与者以某些条件给予优先次序，而优先性高的先传给Consumer 参与
优先队别———
是从上面往下拿；最后放上去的盘子，会是第一个拿来用的。这就是堆栈。
想象家里厨房中盘了堆放的情况。洗好的盘子总是一个一个往上堆，而要使用时则
例程序则是使用数组来实现队列。无论是怎样实现的，只要是先进先出，就是队列。
RequestQueue 类（List 3-2）是使用java.io.LinkedList 类实现出队列的。而本章的范
先出或称为队列（queue）。
Pattern（第3章）里也碰过。我们将这种方法称为FIFO（First In First Out），先进
堆栈——
与者和Consumer 参与者这多条线程，才能保持协力、合作。因为Channel参与者
而您还记得在SingleThreaded Execution Pattern（第1章）中曾经说的
Producer-Consumer Pattern 中很少使用堆栈。不过日常生活倒经常使用。例如请
队列、堆栈可以说是优先队列的特例，Data参与者收到时问较早者优先性高的
比较常用的方法，还有优先队列（priority queue）可想。这是在 Channel 参与
与队列相反的，最后收到的东西先传出去。这称之为LIFO（Last In First Out)，
范例程序的 Table 类，也是使用队列。Guarded Suspension Pattern 的范例程序
Producer-Consumer Pattern 中，放在 Producer 参与者和 Consumer 参与者之间的
仔细地思考不难发现，合作与互斥其实是表里一体的。线程为了协调合作，所
上面所说的思维若整理成口诀，可以得到这两句：
线程的互斥要想“应该保护的东西”
线程的合作要想“放在中间的东西”
—最后收到的先传
“优先”的东西先烤
Producer-Consumer
我来做，你来用
5章
---
## Page 164
行共享互斥来做到的，
作，并不是调用Producer参与者和 Consumer参与者的方法，而是以对多条线程进
参与者和Consumer 参与者的操作。但Producer-Consumer Pattern 中控制、调解的操
是通过中介的ConcreteMediator 参与者控制、调解操作的进行。
Mediator Pattern（参考附录 E[GoF}[Yuki01])
相关Pattern
还会有更详细的解说。
这种设计方式，可以使事件处理的程序好写得多，而且处理的速度也很快。
队列取出事件来处理的Consumer 参与者，event-dispatching thread 的数量只有一个，
dispatching thread（事件分配处理线程）。这个线程相当于从Channel参与者里的事件
参与者和单--Consumer 参与者）。进行Swing 事件处理的线程，称为（the）event-
的处理简化成单一线程。
共享丘斥了。这样可以提升程序的性能。
只有一条。如果Consumer 参与者为复数时，就必须小心Consumer 参与者的线程之
的所有Dala 参与者，都会存放在Channel 参与者里。
又会是什么情况。也就是“多Producer 参与者和单一Consumer 参与者”。
之间的数据传递。在这里，我们想思考的是如果Consumer 参与者只有一个的时候，
只有一个Consumer参与者时会如何
与者的线程之间的十涉了"。
互相不能发生干涉。但如果Consumer参与者只有-条，就不需要烦恼Consumer
注1：当然，Consumer 参与j者和 Producer 参与者之间的干涉还是需要注意的。
而 Producer-Consumer Pattern 的Channel参与者也是在进行控制、调解Producer
Swing（JFC）framework中，事件处理的部分，就是使用这个方法（多Producer
Producer 参与者为复数，而Consumer 参与者为单数的状况，就是所谓将多线程
具体来说，也就是只有 Consumer 参与者的线程会访问的范围，就不需要考虑
Consumer 参与者为惟一时，处理Channel参与者里存放的Data 参与者的线程
有多个 Producer 参与者，也就是有多条线程可以产生出 Data 参与者。而产生
Produeer-Consumer Patterm 通常都考虑多 Producer 参与者和多Consumer 参与者
---
## Page 165
手，
后面接着throwsInterruptedException的方法
时间，但是可以取消的方法。
行法内（或是这个方法所调用的方法内），可能会抛出 InterruptedException异常。
throws InterruptedException。当方法接着 throws InterruptedException 时，表示这个
可能会花一些时间，但是可以取消掉
参与者的顺序时，可以使用 Strategy Pattem。
StrategyPattern（参考附录E[GoF] [Yuki01])
参与者，有时候会用到Command Pattem。
Command Pattern（参考附录 E[GoF] [Yuki01])
附所花费的时间。
过 Worker Thread Pattern 则把焦点放在共有处理数据的线程，与如l何降低线程启动
参与者的经过。
Worker Thread Pattern（第8章）
进阶说明：InterruptedException异常
习惯编写Java 多线程程序以后，就会很习惯去注意方法的后面有没有接着
中  
Producer-Consumer Pattern 中，Produicer 参与j者传递给 Consumer 参与者的 Data
而Worker Thread Pattern 中，Client 参!与j者也会把数据传给 Worker参与者。不
有下面这3位：
Java 的标准类链接库中，后面接者 throws InterruptedException的方法的代表选
下面就要解释这句话具体的意义;
Produeer-Consumer Pattern 的焦点集中在 Producer 参与者把数据传给 Consumet
用---句话来说，后面接着throws InterruptedException的方法，是可能会花·
·这是“需要花点时间”的方法
这通常告诉我们下面这两件事：
一
这是“司以取消”的方法
Producer-Consumer——我来做，你来用
5年
点
---
## Page 166
Hua多线程设调模式
程就称做Bobby吧）。
sleep 方法与 interrupt方法
并不需要获取 Thread 实例的锁定。任何线程在任何时刻，都可以调用其他线程的
或是通知用户取消的事实，也有可能放弃现在的处理而进入下一个操作。
以在中途放弃（取消）执行这个方法。
的线程结束”，的确都是“需要花点时间”的方法。
线程结束之前的这段时间。
方法。
线程不会活动。故需要花费等待被notify/notifyAll的时间。
需要花点时间的方法
g
像这样，上面3 个方法，分别要等待“被 notify/notifyAll、设置的时间、指定
执行 sleep 方法的线程，会暂停执行参数内所设置的时间。这也是花费时间的
可心取消韵方法
执行 join 方法的线程，
取消了以后要做什么事呢？这不同的程序就会有不同的规格了，可能结束线程
因为需要花时间的操作，会降低程序的响应性，所以我们会希望像下面这样可
执行wait 方法的线程，会进入等待区等待被 notify/notifyAll。在等待的期间，
在这里所使用的 interrput 方法，是 Thread 类的实例方法。执行 interrupt 方法时，
因为线程Alice 暂停着，所以取消的操作的必须由其他线程来执行的（这项线
以 sleep 方法为例，接下来我们要考虑的是如何取消。
·取消join方法等待其他线程结束的操作
·取消 sleep 方法等待设置长度时间的操作
●取消wait 方法等待notify/notifyAll的操作
● java.lang.Thread 类的 join 方法
在这里，变量 alice 是线程 Alice 对应到的 Thread 的实例。
alice.interrupt();
在这里，我们要取消线程Alice的等待状态（604800000ms 可是一个礼拜喔）。
Thread.sleep(6048c0000);
线程Alice像下面这样，使用sleep 线程暂停着。
· java.lang.Thread 类的 sleep 方法
●java.lang.Object 类的 wait 方法
，会等待到指定的线程结束为止。也就是会花费直到指定
---
## Page 167
异常”，但这其实是误解。事实上，interrupt 这个方法只会改变线程的中断状态而已。
interrupt方法只是改变中断状态而已
join方法与interrupt方法
异常。
InterruptedException 异常。
可以对wait 中r的线程传达“不用等notify／notifyAll了，从等待区出来吧”的意图。
wait方法与interrupt方法
块里：
补充说明：
除
lnterruptedException异常。丢出异常的，是Alice 线程。
interrupt 方法，
的线程正在 sleep 或 wait 时，会抛出 InterruptedException 异常。执行 interrupt
不是对线程直接调用。notify／ notifyAll 方法所唤醒的线程，会前进到 wait 的
但是仍有差异如下：
，再抛出 InterruptedException。获取锁定之前，并无法抛出 InterruptedException
（取消其他线程），不需要获取该线程的锁定
下一个语句，另外，执行 notify／notifyAll方法，获取类的实例。
notify 方法与interrupt 方法的操作：对 wait 中的线程调用时意义有点接近，
线程 Bobby 执行下面的语句后，与 sleep 时-·样，线程 Alice 会抛出
或许有些读者会认为“调用 interupt 后，目的线程就会自已抛出 InterruptedException
。因为调用join 方法不需要获取锁定，故与 sleep 时一样，会马上跳到catch
interrupt 是 java.jang.Thread 的方法，是对该线程直接调用的，
notify/notifyAll 是 java.lang.Object 类的方法，是该实例的等待区调用的。而
"对 wain中的线程调用 interupt 时（即等待被取消的线程），会先重新获取锁
当线程 Alice 以 wait 方法等待时，与 sleep 一样可以取消。使用 interrupt 方法
这么"-米，线程 Alice 的控制权，就交给捕捉这个异常的catch块了。
当 sleep 中的线程被调用 interupt 方法时，就会放弃暂停的状态，并抛出
当线程以join方法等待其他线程结束时，一样叮以使用 interrupt 方法取消
但是当线程wait时，要小心锁定的问题。线程在进入等待区时，会把锁定解
alice.intereuptIl;
notify方法与 interrupt 方法
Producer-Consumer-
—
一我来做，你来用
当被interrupt
一
5章
---
## Page 168
false。islnterrupted不会自己改变中断状态。
程为中断状态时，会返回 tue：而线程为不是中断状态（非中断状态）时，会返回