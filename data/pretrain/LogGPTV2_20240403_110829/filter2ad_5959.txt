# Jaca: A Software Fault Injection Tool

**Authors:**  
Regina Lúcia de Oliveira Moraes  
PI: [EMAIL]  
Eliane Martins  
PI: [EMAIL]  

**Affiliations:**  
Superior Center of Technology Education (CESET)  
Institute of Computing (IC)  
State University of Campinas (UNICAMP)

## Abstract
This paper introduces Jaca, a fault injection tool designed to validate Java applications. Jaca injects high-level software faults by altering attributes and methods of an object's bytecode during load-time, without requiring the source code. The tool's effectiveness is demonstrated through a case study involving the validation of a third-party component, specifically an OODBMS named Ozone, using the Wisconsin OO7 performance benchmark.

## 1. Introduction
Fault injection is a valuable technique for evaluating the behavior of computing systems in the presence of faults. Among the various methods, Software-Implemented Fault Injection (SIFI) has gained popularity, where faults are introduced at the software level by corrupting code or data. While many tools have been developed for SIFI, most focus on low-level software (assembly or machine code) and are not easily adaptable for high-level fault injection.

Jaca is a fault injection tool that addresses this gap by providing mechanisms for injecting high-level faults in object-oriented systems. It can be adapted to any Java application with minimal rewriting and does not require the application's source code. Instead, it uses reflective programming to introduce instrumentation at the bytecode level during system loading. This approach allows for introspection (useful for monitoring) and runtime modification (useful for fault injection) without altering the system's structure.

Developed in Java, Jaca leverages the Javassist reflection toolkit, ensuring high portability and compliance with standard JVMs. The tool monitors the system under test, generating a logfile that helps observe the system's behavior in the presence of faults. A detailed architecture of Jaca is available in [2].

## 2. Using Jaca
Jaca's current version features a graphical interface to facilitate the setup and execution of fault injection. The following steps outline the process:

1. **Select Directory:** Choose the directory containing both the target application and Jaca’s classes.
2. **Specify Logfile:** Enter the name and directory for the logfile.
3. **Invoke System Under Test:** Provide the command to invoke the system under test.
4. **Choose Fault Type:** Select the type of fault to inject (Attribute Fault, Method Return Fault, or Parameter Fault).
5. **Select Class for Injection:** Choose the class from a list of all classes in the selected directory.
6. **Select Elements for Injection:** Based on the fault type, select the attributes, methods' return values, or method parameters to inject.
7. **Define Mask:** Specify the type and value of the mask used to alter the current values of the selected elements.
8. **Choose Operation:** Select the operation to perform with the mask and the current value (currently supports integer and real types).
9. **Set Repetition Pattern:** Choose the repetition pattern (permanent, transient, or intermittent).
10. **Set Injection Start Time:** Specify the start time for the fault injection.
11. **Select Classes for Monitoring:** Choose the classes to be monitored, which will be recorded in the monitored file.
12. **Start Execution:** Press the execution button to begin the fault injection process.

A fault specification file (Fault Spec) is created, containing the information collected in steps 5 to 10. Jaca uses this file and the monitored file as input, and generates a logfile as output, detailing the system's behavior. The user can then view the logfile through Jaca’s interface.

For the demonstration, we plan to showcase the use of Jaca and present some results from the validation tests conducted.

## References
[1] Chiba, S. "Javassist – A Reflection-based Programming Wizard for Java". Proc. of the ACM OOPSLA’98, Oct/98.

[2] Leme, N. G. M.; Martins, E; Rubira, C. M. F. "A Software Fault Injection Pattern System". Proc. of the IX Brazilian Symposium on Fault-Tolerant Computing, Florianópolis, SC, Brasil, Mar/01, pp. 99-113.

---

**Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03)**  
0-7695-1959-8/03 $17.00 (c) 2003 IEEE  
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19, 2021, at 06:59:04 UTC from IEEE Xplore. Restrictions apply.