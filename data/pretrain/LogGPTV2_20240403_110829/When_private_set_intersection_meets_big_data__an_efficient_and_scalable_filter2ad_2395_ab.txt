sender’s input. Generally, an oblivious transfer protocol can be
denoted as OTm
l . The notation means the sender holds m pairs l-
bit strings (xj,0, xj,1) (0 ≤ j ≤ m − 1), while the receiver holds
an m-bit selection string r = (r0, ..., rm−1). At the end of the
protocol execution, the receiver outputs xj,rj for 0 ≤ j ≤ m − 1.
Oblivious transfer protocols are costly and often become the ef-
ﬁciency bottleneck in protocol design. However it has been shown
by Beaver that it is possible to obtain a large number oblivious
transfers given only a small number of actual oblivious transfer
calls [7]. In this direction, efﬁcient OT extensions were proposed
in [26]. The extensions rely on the Random Oracle Model [8] (or
the existence of correlation robust hash functions) and can reduce
OTm
λ where λ is a security parameter. The latter can be
l
further reduced to λ invocations of OT1
λ. In our implementation,
we use the above OT extension scheme to reduce the actual cost of
an OTm
λ invocation to λ calls to the Naor-Pinkas OT protocol [34].
For the detail of the reduction, please consult [26].
to OTλ
3.5 The Semi-honest Model
We prove the security of the basic protocol in the presence of
static semi-honest adversaries.
In the model, the adversary con-
trols one of the two parties and follows the protocol speciﬁcation
exactly. However, it may try to learn more information about the
other party’s input. The deﬁnitions and model are according to [22].
A two-party protocol π computes a function that maps a pair of
inputs to a pair of outputs f : {0, 1}∗ × {0, 1}∗ → {0, 1}∗ ×
{0, 1}∗, where f = (f1, f2). For every pair of inputs x, y ∈
{0, 1}∗, the output-pair is a random variable (f1(x, y), f2(x, y)).
The ﬁrst party obtains f1(x, y) and the second party obtains f2(x, y).
The function can be asymmetric such that only one party gets the
result. It is captured as f (x, y)
the empty string.
def
= (f1(x, y), Λ), where Λ denotes
In the semi-honest model, a protocol π is secure if whatever can
be computed by a party in the protocol can be obtained from its in-
put and output only. This is formalized by the simulation paradigm.
We require a party’s view in a protocol execution to be simulatable
given only its input and output. The view of the party i during
an execution of π on (x, y) is denoted by viewπ
i (x, y) and equals
t) where w ∈ (x, y) is the input of i, ri is the
(w, ri, mi
outcome of i’s internal random coin tosses and mi
j represents the
jth message that it received.
1, ..., mi
DEFINITION 1. Let f = (f1, f2) be a deterministic function.
We say that the protocol π securely computes f in the presence of
static semi-honest adversaries
there exists probabilistic
polynomial-time algorithms S1 and S2 such that
if
{S1(x, f1(x, y))}x,y
c
≡ {viewπ
1 (x, y)}x,y
{S2(y, f2(x, y))}x,y
c
≡ {viewπ
2 (x, y)}x,y
4. THE BASIC PROTOCOL
In this section we present the basic protocol that is secure in the
semi-honest model. Conceptually the protocol is very simple: the
client computes a Bloom ﬁlter that encodes its set C and the server
computes a garbled Bloom ﬁlter (see below) that encodes its set
S. Then they run an oblivious transfer protocol so that the client
obtains a garbled Bloom ﬁlter that represents the intersection and
the server learns nothing. Then the client queries the intersection
garbled Bloom ﬁlter and obtains the intersection.
4.1 Garbled Bloom Filters
We introduce a new variant of Bloom ﬁlters called garbled Bloom
ﬁlters (GBF). A garbled Bloom ﬁlter is the garbled version of a
standard Bloom ﬁlter. From a high level point of view, there is
no difference between a garbled Bloom ﬁlter and a Bloom ﬁlter:
it encodes a set of at most n elements in an array of length m, it
supports membership query with no false negative and negligible
false positive. To add an element, the element is mapped by k in-
dependent uniform hash functions into k index numbers and the
791corresponding array locations are set. To query an element, the ele-
ment is mapped by the same k hash functions into k index numbers
and the corresponding array locations are checked.
From a low level point of view, a garbled Bloom ﬁlter is backed
by a different data structure. Namely, instead of using an array of
bits, a garbled Bloom ﬁlter uses an array of λ-bit strings, where λ is
a security parameter. In the rest of the paper, we use (m, n, k, H, λ)-
garbled Bloom ﬁlter to denote a garbled Bloom ﬁlter parameterized
by (m, n, k, H, λ), we denote a garbled Bloom ﬁlter encoding a set
S by GBFS and denote the λ-bit string at index i by GBFS[i].
To add an element x ∈ S to a garbled Bloom ﬁlter, we split the
element into k λ-bit shares using the the XOR-based secret shar-
ing scheme as described in section 3.3. The element is also mapped
into k index numbers and we store one share in each location hi(x).
Note this is a very loose description, the actual process is more
complicated. To query an element y, we collect all bit strings at
hi(y) and XOR them together. If the result is y then y is in S,
otherwise y is not in S. The correctness is obvious: if y ∈ S, the
XOR operation will recover y from its k shares which are retriev-
able from the garbled Bloom ﬁlter by their indexes. If y 6∈ S, then
the probability of the XOR result is the same as y is negligible in
λ. The algorithm to encode a set into a garbled Bloom ﬁlter and the
algorithm to query an element are given in Algorithm 1 and 2.
Algorithm 1: BuildGBF (S, n, m, k, H, λ)
input : A set S, n, m, k, λ, H = {h0, ...hk−1}
output: An (m, n, k, H, λ)-garbled Bloom ﬁlter GBFS
1 GBFS = new m-element array of bit strings;
2 for i = 0 to m − 1 do
3
GBFS [i]=NULL; // NULL is the special symbol that means “no
value”
4 end
5 for each x ∈ S do
6
emptySlot = −1, ﬁnalShare= x;
for i=0 to k-1 do
7
8
9
10
11
12
13
14
15
16
17
18
19
j = hi(x);
if GBFS[j]==NULL then
if emptySlot ==−1 then
// get an index by hashing the element
emptySlot=j;
finalShare
// reserve this location for
GBFS[j] r← {0, 1}λ;
ﬁnalShare=ﬁnalShare⊕GBFS[j];
// generate a new share
else
end
ﬁnalShare=ﬁnalShare⊕GBFS[j]; // reuse a share
else
end
// store the last share
end
GBFS[emptySlot]=ﬁnalShare;
20
21 end
22 for i = 0 to m − 1 do
23
if GBFS[i]==NULL then
GBFS[i] r← {0, 1}λ;
24
25
26 end
end
In Algorithm 1, we ﬁrst create an empty garbled Bloom ﬁlter and
initialize each location to NULL (line 1-4). To add x ∈ S, we split
x into k shares on the ﬂy and store the shares in GBFS[hi(x)]
(line 5-21). Note that in this process, some location j = hi(x)
may have been occupied by a previously added element. In this
case we reuse the existing share stored at GBFS[j] (line 16-18).
For example, in Figure 1 we ﬁrst add x1 to GBFS and split it into
3 shares s1
1. Then when we add x2, GBFS[4] has already
been occupied by s2
1 as a share of x2,
1. So we reuse the string s2
1, s3
1, s2
 0    1    2   3   4    5   6    7   8   9   10  11
*
s1
1
*
*
s2
1
*
s1
2
*
s3
1
*
s2
2
*
x1
x2
2 ⊕ s2
1 ⊕ s1
Figure 1: Add elements into a garbled Bloom ﬁlter
2. This is because if we replace s2
i.e. x2 = s2
1 with an-
other string, x1 will not be recoverable in the query phase. Reusing
shares will not cause security problems as far as the protocol con-
cerns, we will show in Theorem 3 that the probability of getting all
shares of an element that is not in the intersection in our protocol
is negligible. After adding all elements in S, we generate and store
random λ-bit strings at all locations that are still NULL (line 22-
26). Algorithm 1 will succeed with an overwhelming probability,
as stated in Theorem 1. When m and k are optimal, the success
probability in Theorem 1 is approximately 1 − 2−k.
Algorithm 2: QueryGBF (GBFS, x, k, H)
input : A gabled Bloom ﬁlter GBFS , an element x, k,
H = {h0, ...hk−1}
output: True if x ∈ S, False otherwise
j = hi(x);
recovered = recovered ⊕ GBFS[j];
1 recovered = {0}λ;
2 for i = 0 to k − 1 do
3
4
5 end
6 if recovered == x then
7
8 else
9
10 end
return False;
return True;
THEOREM 1. Algorithm 1 will succeed with a probability at
least 1 − p′k × (1 + O( k
1/m)k(n−1).
p′q ln m−k ln p′
m
)) where p′ = 1 − (1 −
PROOF. Algorithm 1 fails when emptySlot remains −1 after the
inner loop (line 20). This happens when adding an element to the
GBF, all locations the element hashes to have been occupied by
previously added elements. Because in this case, at most n − 1
elements have been added to the GBF, the probability of a particular
position is occupied is at most p′ = 1 − (1 − 1/m)k(n−1). The
probability of all k locations have been occupied can be obtained in
the same way as the false positive probability of an (m, n, k, H)-
BF, which is at most p′k × (1 + O( k
probability is then 1 minus the probability of failure.
p′q ln m−k ln p′
)). The success
m
In a garbled Bloom ﬁlter, each location is a λ-bit string that
is either a share of certain elements or a random string. Analo-
gously, a share in a gabled Bloom ﬁlter is equivalent to a “1” bit
in a Bloom ﬁlter, and a random string is equivalent to a “0” bit.
Same as the Bloom ﬁlters, there is no false negative when using
a GBF because all shares of an encoded element are guaranteed
to be retrievable and the XOR-based secret sharing scheme always
produces the original element when all shares are available. When
using a GBF, we need to consider and differentiate the following
two probabilities:
• The collision probability of a GBF is the probability when y
is not in S, but it hashes to the same set of index numbers as
some x ∈ S. A collision does not cause false positive: the
recovered string (Algorithm 2) is x but not y so the query
792result is still false. However it reveals x. The collision proba-
bility is negligible in k. Loosely, we can use the upper bound
of the false positive probability of a Bloom ﬁlter as the upper
bound of the collision probability of a garbled Bloom ﬁlter.
Note that collisions do not affect the security of our protocol,
but may be a concern if a GBF is used in other protocols.
• The false positive probability of GBFS is the probability
when y is not in S but the recovered string equals y co-
incidentally. This probability is at most 2−λ.
More formally, we have the following theorem:
THEOREM 2. Let GBFS be an (m, n, k, H, λ)-garbled Bloom
i=0 GBFS[hi(y)]) = x] ≤ ǫ,
where ǫ is the maximum false positive probability in equation (1).
ﬁlter, (i) ∀y 6∈ S, x ∈ S : P r[(Lk−1
(ii) ∀y 6∈ S : P r[(Lk−1
i=0 GBFS[hi(y)]) = y] ≤ 2−λ.
PROOF. We start from the collision probability. Let BFS be the
(m, n, k, H)-Bloom ﬁlter that encodes the same set S as GBFS.
Now for any y 6∈ S, we query y against both GBFS and BFS.
Whenever the GBF query results in a collision, the Bloom ﬁlter
query must return a false positive. This is because by deﬁnition,
y hashes to the same set of index numbers as some x ∈ S, so all
locations are set to 1 in BFS by x, therefore the Bloom ﬁlter query
returns true, but y 6∈ S so this is a false positive. Since a GBF col-
lision implies a Bloom ﬁlter false positive, the collision probability
is bounded by the false positive probability of the Bloom ﬁlter.
Let’s consider the false positive probability of a GBF. A false
positive occurs when y is not in S but the recovered string equals
y. The recovered string is GBFS[h0(y)] ⊕ . . . ⊕ GBFS[hk−1(y)].
Each constitution string GBFS[hi(y)] is either a share of certain
elements or a random string. When y 6∈ S, there are three cases:
Case 1: All constitution strings are shares of the same element in
S. We denote the probability of this case as p1. In this case for sure
recovered 6= y because y 6∈ S.
Case 2: The constitution strings are shares of several elements in