### GSPR with Two Benchmarks: BS and BCNSW

We focus on three specific algorithms in the context of GSPR, BS, and BCNSW: 
1. **Sign** (signature generation algorithm),
2. **SignCheck** (signature correctness checking algorithm), and
3. **RevCheck** (revocation status checking algorithm).

These algorithms are crucial because they need to be executed in real-time and performed by the signer and verifier, who have limited computational capabilities compared to the group manager.

#### Computational Analysis

First, we consider only the most computationally expensive operations, namely:
- Exponentiation (Exp.) in \(G_1\), \(G_2\), or \(GT\),
- Bilinear mapping.

Since \(G_1 = G_2\), the application of isomorphism is not considered. Table 2 provides the number of operations required for each of the three algorithms in GSPR, BS, and BCNSW.

In GSPR, the operations in Step 1 of the Sign algorithm are independent of the message to be signed or the random parameters, allowing them to be pre-computed. Additionally, \(\psi(w_1)\) and \(e(g_1, g_2)\) can also be pre-computed. In the RevCheck algorithm, the computational cost of computing the cross-correlation between a revocation code and an alias code involves \(l\) integer additions, where \(l\) is the length of the revocation code, and the alias code is a vector of +1s and -1s.

#### Implementation and Performance Evaluation

Using the PBC library, we implemented the three algorithms for GSPR, BS, and BCNSW, and measured their running times on a PC platform with an Intel(R) Core(TM)2 Duo CPU E8400 @ 3GHz. The measurements were obtained by averaging over 1000 runs of each algorithm. Table 3 provides the running times on the PC platform, assuming the number of revoked private keys (\(n_r\)) is 1024.

From Table 3, we observe that there is no significant difference in the computation times of the three schemes when comparing their performance with respect to Sign and SignCheck. However, the difference in computational cost for RevCheck is significant. GSPR's RevCheck algorithm is more than two orders of magnitude more efficient than those of the other two schemes. Consequently, the total signature verification time, which includes the time needed to perform SignCheck and RevCheck, is significantly lower in GSPR compared to BS and BCNSW.

Figure 3 illustrates the computation time required to verify a signature versus the number of revoked private keys. With only a few thousand revoked private keys, the computation times for BS and BCNSW quickly grow to several seconds for verifying a single signature. In contrast, GSPR's computation time grows at a much lower rate, primarily due to the computational efficiency of its RevCheck algorithm.

### Communication Overhead

We consider three communication scenarios:
1. Between the group manager and the signer (manager-signer),
2. Between the signer and the verifier (signer-verifier),
3. Between the group manager and the verifier (manager-verifier).

- In the first scenario, the group manager sends a secret key to the signer.
- In the second scenario, the signer sends a signature to the verifier.
- In the third scenario, the group manager sends a revocation list/code to the verifier.

Table 4 provides the number of elements (Elem.) of \(Z_p^*\), \(G_1\), \(G_2\), or integers (Int.) communicated in each of the three scenarios for GSPR, BS, and BCNSW. Note that in GSPR, the alias tokens are generated by the signer using the secret key obtained from the group manager, and thus do not need to be communicated.

Table 5 shows the required communication overhead for the three schemes, assuming \(n_r = 1024\). Results indicate that GSPR's communication overhead is two orders of magnitude larger than that of the other two schemes in the manager-verifier scenario. This trade-off is advantageous because reducing computational overhead is more critical than reducing communication overhead for scalability. Verifying a signature, including checking the revocation status of the private key, is an inherently online task that needs to be performed in real-time, and it can be the primary performance bottleneck in large networks. The greater communication overhead incurred by GSPR in the manager-verifier scenario can be mitigated by pre-fetching the revocation code before the verifier needs to verify a given signature.

Figure 4 compares four schemes in terms of the communication overhead required to transmit the revocation list (for GSPR, it is the revocation code). The top-most curve represents a pseudonym-based signature (PS) with Elliptic Curve Digital Signature Algorithm (ECDSA) with a public key size of 192 bits to achieve the 80-bit security level. For PS, we assume that the number of pseudonyms allotted to each signer is 120, and the group manager publishes public-key certificates of all the revoked pseudonyms in the revocation list. Although the communication overhead of GSPR is higher compared to BS and BCNSW, it is still lower than PS.

### Use of GSPR in DSRC Applications

To illustrate the practical advantages of GSPR, we compare its signature verification performance with two benchmarks (BS and BCNSW) for vehicular network (VANET) safety applications. Since the allocation of the Dedicated Short-Range Communications (DSRC) spectrum in the 5.9 GHz band by the Federal Communications Commission (FCC), the automotive industry and other stakeholders have been actively developing DSRC technologies, particularly for vehicular safety applications.

In a typical safety application, each vehicle broadcasts beacon messages containing critical safety information such as speed, direction of movement, and acceleration. These messages need to be authenticated while protecting the privacy of the transmitting vehicle’s driver. Without such protection, adversaries can use the beacon messages to track the driver’s movement or for more nefarious purposes.

Beacon messages are typically broadcast every 100 ms. In high vehicular density scenarios, a vehicle may receive many beacon messages within a broadcast interval, each needing to be authenticated before the next message arrives. If authentication cannot be completed in time, the current message must be discarded as it contains "stale" information. To measure the impact of the computational cost of signature verification on the performance of safety applications, we use the average message loss ratio, defined as the ratio between the number of beacon messages discarded due to signature verification latency and the total number of beacon messages received by a particular vehicle in a 100 ms broadcast interval.

Assuming each vehicle is on the road for 2 hours per day and replaces its current alias token every minute (120 alias tokens per day), our simulation results (Figure 5, assuming \(n_r = 64\)) show that GSPR's signature verification procedure is efficient enough to ensure acceptable performance for safety applications under reasonably favorable conditions. In contrast, the computational burden of the verification procedures used by BS and BCNSW is too heavy for use in vehicular safety applications.

### Related Work

Recent group signature (GS) schemes can be divided into two categories based on their revocation check procedures:
1. **Revocation check at the signer**: Schemes like [8, 11, 15] achieve constant signing and verification time but at the cost of increased public key size or computational cost at the group manager.
2. **Verifier-local revocation (VLR)**: Schemes like [3, 6, 16] place the responsibility of revocation check on the verifier, increasing the computational cost linearly with the number of revoked private keys.

### Conclusion

In this paper, we proposed a novel privacy-preserving authentication scheme called Group Signatures with Probabilistic Revocation (GSPR). By using the concept of probabilistic revocation, GSPR significantly reduces the computational burden of the revocation check procedure at the cost of increased communication overhead. The negative impact of the increased communication overhead can be mitigated by pre-fetching the revocation code from the group manager before signature verification.

### Acknowledgments

This work was partially sponsored by NSF through grants 1228903, 1265886, 1314598, and 1431244; by NSFC through grant 61201245; and by the industry affiliates of the Broadband Wireless Access & Applications Center and the Wireless @ Virginia Tech group.

### References

[References remain unchanged]

---

This version of the text is more structured, clear, and professional, with improved readability and coherence.