time skew SAB of the legitimate ECU B, just as a CIDS’s ECU (say
C) that learns of SCB. After the learning phase where i legitimate
frames have been sent, A calculates the moment when the next
frame will be sent as
+ T · (1 + SAB),
t
= t
(5)
where T is the preset interval between two legitimate frames. Sim-
ilar results were derived by two previous works [10, 40]. The dif-
ference is that here the clock-skew imitation is used to block the
legitimate frames, rather than directly inject the attack frames. An
example of Eq. 5 is given in Fig. 4, in which A learns the time skew
of B as SAB = (10.03 − 10)/(10) = 0.003. Meanwhile, CIDS learns
it as SCB = (10.01 − 10)/10 = 0.001. According to Eq. 5, at the A’s
time 10.03 + 10 + 10 · 0.003 = 20.06 (or B’s time 10 + 10 = 20), A
blocks the legitimate frame.
The blocking is done by taking advantage of the arbitration phase.
In order to block a legitimate frame at t
, the attacker ECU A
simply sends a frame with a smaller identifier than the legitimate
ECU’s. An illustration of the contention is shown in Fig. 3b.
(i +1)
A
The contention will not trigger the “bit-error” because the CAN
bus standard [4] does not count the wrong bits in the identifier
field as bit-errors. Also, the feasibility of flipping a bit has been
demonstrated by the bus-off attack where the adversary is able to
disable a targeted ECU by letting the attacker ECU flip a bit in the
data field of the frames sent by the targeted ECU [7].
4.2.2 Defeating the clock-based scheme. In addition to defeating
the voltage-based fingerprinting scheme, now the adversary has to
defeat the clock-based scheme [8] at the same time in the complete
impersonation. This is because the periodicity of the frames still
exists when the legitimate frames are blocked, and such periodicity
can be used by CIDS to do identification. Since t
has been
(i +1)
A
ECU A
ECU B
CIDS
0
0
0
10
10.03
10
20
20.06
20
Arbitration
occurs
9.98
10 10.01
19.96
δ
20.02
20
t
Figure 4: Complete impersonation zoomed-in from Fig. 2c.
The three rows of numbers represent the time that different
ECUs report.
occupied for blocking, the adversary has to inject the attack frame
δ seconds later. The injection offset δ is illustrated in Fig. 4 and it
can be determined as follows.
Similar to Sec. 4.1, the attacker ECU A has been learning the
clock offset O as well as the clock skew S of the legitimate ECU B
for k − 1 steps. Given the maximum injection ratio r∗[k] derived
from Eq. 4, the maximum injection offset δ[k] can be obtained by
solving the following optimization problem:
(cid:12)(cid:12)(cid:12)(cid:12)SB[k] − 1
2
SA[k − 1] + SB[k − 1](cid:17)(cid:12)(cid:12)(cid:12)(cid:12)
(cid:16)
(6)
|SB[k] − SB[k − 1]| < |SB[k] − SA[k − 1]| .
minimize
subject to
,
t[k] − t[k − 1]
SB[k] = O[k − 1] + δ[k]r∗[k]n/(n − 1)
Similar to Eq. 1, the adversary tries to change SB[k] as much as
possible but not too far. In practice, because of the relativity of
clock skew, SA[k − 1] = 0 and SB[k − 1] is the clock skew from the
perspective of A. Eq. 6 yields the optimal desired clock skew SB[k]
that is similar to Eq. 2, which we will omit due to the page limit.
Then δ[k] can be derived from its relationship with SB[k], which is
(7)
where O[k − 1] is the clock offset of the previous step. Readers may
go to Appendix A.1 to see why Eq. 7 holds.
It should be noticed that we choose such δ[k] in order to evade
the identification of CIDS, not its detection. Of course, the adversary
can always evade detection by adding the detection thresholds
(Eq. 14) as constraints to Eq. 6. In Sec 7.2.2, however, we evaluate
only the identification evasion due to experimental data limitations.
4.3 Attack Evaluation
We use real-world data collected from vehicles to evaluate the at-
tacks against the voltage-based and the clock-based identification
schemes. Results show that the attacker ECU was able to imper-
sonate the legitimate ECU and was identified by neither of the
schemes. Meanwhile, the profiles of the legitimate ECU was shifted
to the attacker ECU profile gradually. Moreover, the number of
steps required to achieve dominant impersonation increases with
the difference between two profiles. Refer to Sec. 7.2.2 for the details
of the attack evaluation results.
4.4 Discussion
Intrusion Detection System. In Viden’s fingerprinting system [9]
there is an underlying IDS that detects the intrusion and submits
the suspicious frames to the fingerprinting schemes. However, Cho
et al. did not specify what (type of) IDS is used, thus we do not
specify the IDS in this work, either. Instead, we assume that as long
as the fingerprinting result is the legitimate ECU, the vehicle will
behave normally and no one gets suspicious. Note that if the IDS is
based on multiple frames, it is also vulnerable to Hill-climbing-style
attacks.
Arbitrary attack targets. In the previous example, we assumed
that ECU A and B’s profiles are adjacent. In general, there may
be another ECU C, whose profile is in between A’s and B’s, in
which case Viden would regard C as the source of intrusion and
an alarm may be triggered. To avoid so, the adversary can only
impersonate the legitimate ECU that has the nearest voltage profile
to the attacker ECU’s profile. Such limitation can be addressed
by enabling the adversary to imitate other ECU’s voltage profile,
e.g., changing the temperature. This can be achieved by extra code
executions or increasing the CPU’s clock speed.
Retransmission. Because the CAN bus protocol [4] did not
specify what an ECU would do if it loses a contention during the
arbitration phase, we assumed in Sec. 4.2 that it would simply give
up this frame. We argue that even if retransmission occurs once the
CAN bus becomes idle in some specifications/implementations, the
adversary can always choose to pursue the dominant impersonation,
which does not involve any contention.
Voltage/timing profile knowledge. When the compromised
ECU does not have an analog to digital converter (ADC), or a
precise clock embedded, the adversary cannot calculate the op-
timal/maximum injection rate r. It can, however, be conservative.
That is, it can find out the common minimum distance between
profiles in car ECUs and use that as an empirical value to get a min-
imum injection rate. The attack will then take more time to succeed
(or probabilistically). From our real-world experiment, however,
r can still be high even with a small distance. See Fig. 10 for an
example, where the distance is just 0.05 but r can still be as high as
8/28 at the first step.
5 SECURE PLI FOR CAN
In Sec. 4, we showed that existing fingerprinting schemes are vul-
nerable to the Hill-climbing-style attack due to their dependence
on multiple frames to make one detection or identification deci-
sion. In this section, we will describe our fingerprinting scheme,
SIMPLE. Since it only requires a single CAN frame to perform the
identification, it is immune to the Hill-climbing-style attack.
The overview of SIMPLE can be found in Fig. 5a, where the
samples collected from the entire frame (identifier as well as the
data frame) are used for generating features, dimension reduction
and eventually are fed into a Mahalanobis distance calculator. On
the CAN bus, the location of SIMPLE is shown in Fig. 1d where
it listens to all the traffic. Beyond securing against Hill-climbing-
style attacks, another benefit of SIMPLE is the ability to prevent
malicious frames from having their intended effect by intentionally
introducing errors that will cause ECUs to ignore the frames.
5.1 Feature Extraction
As an essential step of fingerprinting, feature extraction should
not be time consuming and should reduce or eliminate the domain
transformations as much as possible. We first, select proper features,
and then apply a dimension reduction transformation which even-
tually saves computational power. For the first step, we intend to
use the sample points after high-to-low or low-to-high transitions
in a CAN frame. After detecting such a transition in the line volt-
age, we use Alg. 3 to separate the high/low sample points, named
hereafter as bins. Next, we apply an intra-frame average on the
bins to increase the signal to noise ratio (SNR) given at Alg. 2.
In the state-of-the-art IDSs, usually inter-frame average of CAN
frames is used to achieve sufficiently high SNR features, which
requires multiple frames for finalizing the detection process; oth-
erwise, the identification performance will be degraded. Fig. 5b
illustrates the difference of inter-frame average of features with
intra-frame average of features. To be more specific about the intra-
frame averaging (our method for achieving a high SNR), sample
points from a CAN frame are shown in Fig. 5c, where the S1
1 and
S2
1 and any other first sample point after a high-to-low transition
throughout the frame will be averaged together and create the first
feature, denoted as F1 here. The same process will be repeated for
generating the second feature, F2, by averaging all the second sam-
ple points after all of the high-to-low transitions within a single
CAN frame. We extract eight features from the low bins and eight
from the high bins; and the reason behind not proceeding further
is that increasing the number of features does not enhance the
accuracy of our work based on the experiments. Choosing fewer
than eight features however increases false positive/negative rates.
We collect signals from high/low bins of CANH/CANL at the
same time which aggregates to 32 features overall. The feature
selection process is based on simple operations all in the time
domain, which eliminates the need for intricate operations. This
enables us to efficiently identify the source of a frame on a single-
frame basis analysis.
Next, we perform Fisher-Discriminant Analysis (FDA) [2] in
order to derive a transformation W to reduce the dimension of
the data. In fact, FDA captures the most discriminant information
in the features. It has been used with identification/classification
purposes for instance to discriminate human biometrics [54]. An
optimal transformation matrix, W , is the main output of the FDA
algorithm which focuses on maximizing the separability of known
categories in a classification problem. W is used for projecting the
features, F, to a new set of features, F,
F = W × F .
(8)
5.2 Mahalanobis distance calculation
Mahalanobis distance is a measure of calculating the distance of a
point from a distribution. If we associate a distribution to a set of
data during the training phase with mean and covariance of µ and
Σ, we can next calculate the distance of a new set of observations,
F during the test phase, from that distribution by the following
definition of Mahalanobis distance [2]:
(cid:113)(F − µ)T Σ−1 (F − µ).
d =
(9)
In this context, Mahalanobis distance can be used as a measure of
similarity between the features and used as a score to match and
compare the features generated from an uncertain origin to the
templates belonging to the legitimate devices.
(a)
(b)
(c)
(d)
Figure 5: (a) Defense mechanism in a chronological perspective. (b) Inter-frame average of features vs. intra-frame average of
features. (c) Generating features from a CAN frame. (d) The general diagram for building automotive grade ECUs using a CAN
transceiver and a TM4C123GXL (TI) controller (the necessary side circuitry for proper functionality of the ICs is omitted).
5.3 Training and Testing
There are two main steps for designing SIMPLE, first, training and
testing phase, which results in thresholds for identification of each
device, and next, real-time identification using these thresholds.
Training Here we generate an offline database of legitimate
features for each device. These templates are calculated as explained
in Sec. 5.1 using 200 frames from each device. Data alignment
(traditionally used to eliminate the effects of the lags in data) is not
necessary because the selected features in Sec. 5.1 inherently take
care of it by selecting the sample points after transitions which
leads to their alignment.
Testing For every single record, the Mahalanobis distance (Sec.
5.2) of its feature is calculated from template features of the device
that this frame normally should be emitted from. If the distance is
not close enough, it will be identified as a malicious frame trans-
mitted by a spoofed ECU. A binary search algorithm [51] is used to
find the threshold for these distances by looking for EERs. EER is
a common measure of performance of biometrics systems which
indicates a condition of the system where the number of false posi-
tives is equal to the number of false negatives [3]. The EER point,
corresponds to the thresholds that we need as a distance metric.
An ideal system would have an EER of 0 %.
Real-time Identification During the identification, every sin-
gle frame needs to be tested to establish the frames’ provenance.
To do so, the same feature extraction process is applied to the data
frames and the output is compared to the feature templates that are
already generated and logged in the training phase. If the features
of the frames under test, match as close as needed to the template of
the device that they are claiming to be transmitted from, they can
be marked as legitimate and mounted on the bus. This is measured
using the threshold values that are generated in the testing phase.
After the identification is over, the valid frames are used to securely
update the template of the device that they belong to, over time.
Here is a summary of SIMPLE, with its details given at Alg. 4.
(1) Feature extraction and FDA transformation, Alg. 3 and 2.
(2) Training feature templates for each ECU, Alg. 4.
(3) Associating a threshold to each ECU by comparing the fea-
ing validity of the origin of a message.
ture templates using Mahalanobis distance metric, Alg. 4.
(4) Identifying the origin of a single frame based on the prox-
imity of its distance from the template of the device, to the
device’s predefined threshold.
(5) Updating the feature templates of the devices after confirm-
5.4 Time Complexity Analysis
Referring to the algorithms in Sec. 5.3, the time complexity of
SIMPLE is limited to: generating the features which depends on
the number of sample points within each frame that grows with
time n as Θ(n), followed by calculating the Mahalanobis distance
of this feature from the template of the ECU that it claims to be
emitted from, Θ(1), and finally a comparison with the threshold
of that ECU (generated offline in the training phase), Θ(1). Hence,
the overall complexity of the real-time IDS SIMPLE is Θ(n).
5.5 Intrusion Prevention
Since SIMPLE is able to determine that a frame is malicious before
its transmission ends, it can effectively prevent the attack frame
from being received (acted upon) by other ECUs. There are two
possible ways to achieve this. First, upon detecting a malicious
frame SIMPLE can transmit an Error Frame (signified by an error
flag of six dominant “0” bits and then an error delimiter) which
will cause non-compromised ECUs to ignore the frame. Second,
SIMPLE could introduce errors in the frame that would cause the
intended recipient devices to ignore the frame. For example, it can
force the bus into the dominant state for consecutive and/or random
bit periods (equivalent to sending 0s) when the body of the frame
(including CRC) is being transmitted; this can fail the CRC check (all
ECUs are obligated to perform), which results in the transmission
of an Error Frame that will cause all ECUs to ignore the frame. For
CAN frames with extended identifiers, in the best case scenario
with only one byte of data, it will take 1.575 µs to prevent the attack,
while in the worst case of eight bytes, it will take 2.975 µs to prevent
the attack in a device with 80 MHz of processing power.
6 ORIGIN OF FINGERPRINT VARIATIONS
In the above section, we introduced the basics of our PLI system
when the fingerprints are stable over time; existing work in the
area indicates that fingerprints are stochastic. In this section, we
undertake experiments to identify the factors that cause fingerprint
variations and propose a method to compensate for their effects.
6.1 Voltage and Temperature Effects
Changes in temperature and supply voltage are the main potential
factors that could cause drift in the features that we extract for
fingerprinting in our IDS [9]. In practice, a vehicle experiences
different environmental conditions; e.g., it is hot when running and
Negative  or  Positive  ACK  Decision Making   Feature Extraction  FDA Dimension Reduction  Mahal Distance Calculation SOFIdentifier RTRIDEr0DLCCRCCRC  delimiterACK slotACK  delimiterEOFData 1 bit11 bits1 bit1 bit1 bit4 bits64 bits15 bits1 bit1 bit1 bit7 bitsSOFIdentifier RTRIDEr0DLCCRCCRC  delimiterACK slotACK  delimiterEOF Data 1 bit29 bits1 bit1 bit1 bit4 bits64 bits15 bits1 bit1 bit1 bit7 bitsTime [s]   . . . . Intra frame averageTime [s]Voltage [Volts]Inter frame average  . . . . CAN frame indexF=F1,F2,...,Fn{},F8=meanS81,S82,...,S88{}      S11S21S81high to lowtransition #1high to lowtransition #2S12S22S82Time [s] Voltage [Volts] CAN BusPower line  from  OBD-II port  of vehicle CAN TransceiverTxRxTivaC ControllerVoltage RegulatorsCAN-HCAN-LECU5.0 V5.0 V or 3.3 Vcolder when turned on after a cold night. Here we try to evaluate
the impact of these factors and compensate for them.
from any random voltage level within the operating range of our
device up to the target domain, later validated in Sec. 6.2.
Impact of Supply Voltage. We look for a relationship between
6.1.1
features and voltage supply so that we could scale the features taken
at a voltage different than the voltage level used in the training data,
and compensate for variations of Vcc in a realistic scenario. That is,
we want to discover the relationship between the features generated
from the new voltage levels, Vcc = Vsr, and the features generated
on Vcc = Vtg, which are to be called the source domain and target
domain, respectively. We use a linear regression model for all 32 fea-
tures coming from high/low sample points of CANH/CANL during
training phase and estimate the scaling parameters so as to trans-
form the features from each source domain up to the target domain.
These linear scaling parameters allow us to remove the effect of
change in the voltage level by transferring all the features to the tar-
get domain. Later in the testing phase, after the features get gener-
ated for each frame, they get scaled up to the target domain using the
scaling parameters that were estimated in training phase. Last, the
conventional FDA-followed-by-Mahalanobis-distance-calculation
is performed. Eq. 10 shows this linear regression.
f
0 ∗ Fsr + a
f
1 ,
Ftg = a
f
0 and a
(10)
where Ftg is the vector of features on the target domain, Fsr is the
f
vector of features on the source domain, and a
1 are the