# CANSPY: A Platform for Auditing CAN Devices

## Document Disclaimer
This document and its content are the property of Airbus Defence and Space. It shall not be communicated to any third party without the owner’s written consent. All rights reserved.

## Authors
- Arnaud Lebrun
- Jonathan-Christofer Demay

## Introduction
CANSPY is a platform designed for auditing CAN (Controller Area Network) devices, providing a robust framework for security assessments in automotive and other CAN-based systems.

## Auditing Conventional IT Systems
### Penetration Testing
- **Definition**: A form of security audit that assesses the risks of intrusion.
- **Approach**: Actual tests rather than a review process, adopting the perspective of a real attacker (the “black-box” approach).
- **Benefits**:
  - Relevant evaluation of impact and exploitability.
- **Limitations**:
  - Limited time and resources.
  - Ethical considerations.
- **Counter-measure**: The “grey-box” approach, which provides more context and information to the tester.

## The CISO's Dilemma
### Challenges
- **Scope of Responsibility**: Broad and continuously changing.
- **Major Security Threats**: High risk of substantial damages.
- **Limited Budget**: Constraints on available resources.

### Response
- **Penetration Testing**: Reliance on this method for identifying vulnerabilities.
- **Grey-Box Approach**: Welcoming this method for more comprehensive testing.
- **Risk Analysis**: Prioritizing this before implementing security measures.
- **Perimeter Division**: Dividing the network into manageable segments.

## Cybersecurity in the Automotive Industry
### Current Trends
- **Integration of Cybersecurity**: Car manufacturers are increasingly incorporating cybersecurity alongside conventional safety measures.
- **New Functionalities**: More complex software and features are being added.
- **Security Researchers**: Increased interest and involvement from the security community.

## Security Audit for Cars
### Approach
- **Risk Analysis**: Conducting a thorough analysis of potential risks.
- **Prioritize ECUs**: Focusing on the most critical Electronic Control Units (ECUs).
- **Penetration Tests**: Performing targeted tests based on the risk analysis.
- **Corrective Actions**: Implementing necessary fixes and improvements.
- **Iterative Process**: Continuously repeating the above steps to ensure ongoing security.

### Challenges
- **Common ECUs**: Some ECUs may be shared across multiple vehicles, complicating the implementation of corrective actions.

## Common Attack Vectors
### Initial Access
- **Consumer-Grade Connectivity**: Wi-Fi, Bluetooth, and USB.
- **CAN Sniffing**: Useful for initial analysis, particularly in infotainment and navigation systems.

### Mobile Broadband Connectivity
- **IMSI Catcher**: Setting up an IMSI catcher to intercept mobile communications.
- **Conventional Protocols**: Dealing with standard protocols like TCP and HTTP.

### CAN-Specific Attacks
- **Bypassing Segmentation**: Overcoming architectural segmentation.
- **Reverse-Engineering**: Analyzing higher-layer or custom protocols.
- **Security Access Challenge**: Breaking the ISO 14229 Security Access challenge.
- **Other ECUs**: Targeting critical systems like steering and braking.

## CAN Architectures
### Single Bus
- **One Serial Bus**: A single bus for all communication.
- **ID-Based Priority**: Messages are prioritized based on their ID.
- **Congestion Issues**: Potential for congestion and acknowledgment by any ECU.

### Multiple Buses
- **Separate Buses**: Multiple independent buses.
- **Interconnected Buses**: Buses connected via gateways, which can route frames and consider the vehicle's state.
- **Safety and Cybersecurity**: Both aspects can be addressed through gateway configurations.

## Crafting CAN Attacks
### Attack Vectors
- **Misuse of Capabilities**: Exploiting built-in features like remote diagnostic tools.
- **Vulnerabilities**: Exploiting parsing vulnerabilities at higher levels.
- **Security Access**: Breaking the Security Access challenge.
- **Reversing and Extraction**: Unsoldering EEPROM, identifying debug interfaces, extracting firmware, and reverse-engineering.

## Man-In-The-Middle (MITM) Attacks
### Theory
- **Client-Server Model**: Inserting oneself between the client and server.
- **Traffic Manipulation**: Dropping, altering, or replaying traffic as needed.
- **Targeted Reverse-Engineering**: Finalizing the attack with targeted reverse-engineering.

### Practical Implementation
- **Physical Insertion**: Physically cutting the CAN bus and inserting a MITM device.
- **Options**:
  - Emulating the car from the audited device's perspective.
  - Using an integration bench provided by the car manufacturer.

## Existing Tools and Limitations
### Open-Source Tools
- **Timing Constraints**: CAN is designed for low-latency communication, and bridging two devices can introduce high latencies.
- **Microcontroller Limitations**: Slow microcontrollers like Arduino can drop frames.
- **Bottlenecks**: UART over USB is a bottleneck, limiting data rates.
- **Lack of Framework**: Need for a mature framework for efficient testing and analysis.

## CANSPY Objectives
### Features
- **Dedicated CAN Interfaces**: Two independent CAN cores.
- **Acknowledgment Manipulation**: Ability to manipulate acknowledgments.
- **Frame Forwarding**: With or without filtering, ensuring low latencies.
- **Full Data Rate**: Support for the full data rate of the CAN standard.
- **Sniffing and Injection**: Capabilities for sniffing and injecting CAN frames.
- **Interface Compatibility**: CAN interfaces compatible with Ethernet and UART.
- **Autonomous Mode**: PCAP and settings read/write from SD card.
- **Configurable Settings**: Fully scriptable configuration via Ethernet.

## CANSPY Hardware
### Components
- **STM32F4DISCOVERY Board**: 168 MHz 32-bit ARM Cortex M4, COTS ($20).
- **STM32F4DIS-BB Extension Board**: RS232 interface, Ethernet port, SD card drive, COTS ($40).
- **DUAL-CAN Extension Board**: Configurable resistors, power supplies, and circuit grounds, 2 CAN interfaces, custom-made ($30 worth of PCB and components).

## CANSPY Firmware
### Architecture
- **Event-Driven Scheduler**: For asynchronous I/O operations.
- **Low Latency Processing**: Ensuring minimal delays.
- **Service-Oriented**: Each functionality is implemented as a service.
- **Mutual Exclusion**: Possible for concurrent operations.
- **Autonomous Mode**: Built-in filtering/altering engine, SD card support, and power supply from the car battery.
- **Open Source**: Licensed under an open-source license.
- **Built-In Services**: CAN, Ethernet, SDCard, and UART services.
- **CAN Devices**: Two independent handlers supporting all standard speeds and throttling mechanisms.

## Handling Congestion
### Throttling Mechanisms
- **Dummy Frame Injection**: Injecting dummy frames to manage bandwidth.
- **Delayed Acknowledgments**: Delaying acknowledgments to control traffic.

## CAN over Ethernet
### SocketCAN Format
- **Ethertype 0x88b5**: Standard format for CAN over Ethernet.
- **Different MAC Addresses**: Unique MAC addresses for different CAN nodes.
- **Acknowledgments**: Handling acknowledgments in the Ethernet environment.

### Code Example
```python
class SocketCAN(Packet):
    name = "SocketCAN"
    fields_desc = [
        BitEnumField("EFF", 0, 1, {0:"Disabled", 1:"Enabled"}),
        BitEnumField("RTR", 0, 1, {0:"Disabled", 1:"Enabled"}),
        BitEnumField("ERR", 0, 1, {0:"Disabled", 1:"Enabled"}),
        XBitField("id", 1, 29),
        FieldLenField("dlc", None, length_of="data", fmt="B"),
        ByteField("__pad", 0),
        ByteField("__res0", 0),
        ByteField("__res1", 0),
        StrLenField("data", "", length_from=lambda pkt: pkt.dlc),
    ]
    def extract_padding(self, p):
        return "", p

bind_layers(Ether, SocketCAN, type=0x88b5)

# Wireshark Lua Script
local sll_tab = DissectorTable.get("sll.ltype")
local can_hdl = sll_tab:get_dissector(0x000C)
local eth_tab = DissectorTable.get("ethertype")
eth_tab:add(0x88b5, can_hdl)
```

## OBD-II Use Case
### Setup
- **OBD-II Cable**: Using a Goodthopter-compatible OBDII-to-DB9 cable.
- **Female Counterpart**: Building a female counterpart with $10 worth of components.
- **DUAL-CAN Extension**: Properly setting up the DUAL-CAN extension.
- **Interesting Cases**: Professional/consumer car diagnostic tools, usage-based policies from insurance companies, and air-pollution control from law enforcement.

## Demonstration Bench
### Configuration
- **MITM Setup**: Man-in-the-middle setup with emulated ECUs and OBD2 diagnostics.
- **Buffer Overflows**: Identifying and exploiting buffer overflows using ISO-TP layer in Scapy.
- **Scapy Layers**: Developing more Scapy layers for documented and proprietary standards.

## Conclusion
Thank you for your attention. For more information, visit [https://bitbucket.org/jcdemay/canspy](https://bitbucket.org/jcdemay/canspy).