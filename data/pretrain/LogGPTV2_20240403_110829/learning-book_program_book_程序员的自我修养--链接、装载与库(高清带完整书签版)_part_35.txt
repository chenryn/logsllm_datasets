大小
有效字节
偏移
权限
SEG0
0x08048000
0x1000
127
34
可读可执行
SEG1
0x08049000
0x3000
9899
164
可读可写
SEG2
0x0804C000
0x1000
8861
只读
可以看到这种对齐方式在文件段的内部会有很多内部碎片，浪费磁盘空间，整个可执行
文件的三个段的总长度只有12014字节，却占据了5个页，即20480字节，空间使用率只
有58.6%。
为了解决这种问题，有些UNIX系统采用了一个很取巧的办法，就是让那些各个段接壤
部分共享一个物理页面，然后将该物理页面分别映射两次（见图6-10）。比如对于SEG0和
程序员的自我修养一链接、装载与库
---
## Page 193
170
第6章可执行文件的装载与进程
abed
MMU
SEG2 page
Page
0x0804C000
SEG1page
JMJ
MMU
Page
SEG1page
Page
SEG2
SEG1 page
MMU
SEG1
0x08049000
SEGO page
Page
SEGO
0x08048000
0x00000000
Process Virtual
Physical Memory
Executable
Space
图6-10可执行文件段未合并情况
SEG1的接壤部分的那个物理页，系统将它们映射两份到虚拟地址空间，一份为SEG0，另
外一份为SEGI，其他的页都按照正常的页粒度进行映射。而且UNIX系统将ELF的文件头
也看作是系统的一个段，将其映射到进程的地址空间，这样做的好处是进程中的某一段区域
就是整个ELF文件的映像，对于一些须访问ELF文件头的操作（比如动态链接器就须读取
ELF文件头）可以直接通过读写内存地址空间进行。从某种角度看，好像是整个ELF文件
从文件最开始到某个点结束，被逻辑上分成了以4096字节为单位的若干个块，每个块都被
装载到物理内存中，对于那些位于两个段中间的块，它们将会被映射两次。现在让我们来看
看在这种方法下，上面例子中ELF文件的映射方式如表6-5所示。
表6-5
段
起虚拟地址
大小
偏移
权限
SEG0
0x08048022
127
34
可读可执行
SEG1
0x080490A4
9899
164
可读可写
SEG2
0x0804C74F
1988
可读可写
在这种情况下，内存空间得到了充分的利用，我们可以看到，本来要用到5个物理页面，
也就是20480字节的内存，现在只有3个页面，即12288字节。这种映射方式下，对于
个物理页面来说，它可能同时包含了两个段的数据，甚至可能是多于两个段，比如文件头、
代码段、数据段和BSS段的长度加起来都没超过4096字节，那么一个物理页面可能包含文
件头、代码段、数据段和BSS段（见图6-11）。
因为段地址对齐的关系，各个段的虚拟地址就往往不是系统页面长度的整数倍了，有兴
程序员的自我修养一链接、装载与库
---
## Page 194
6.4进程虚存空间分布
171
趣的读者也可以结合前面的例子思考一一下，这些虚拟地址是怎么计算出来的。比如我们拿前
面的程序“SectionMapping.elr”做例子，看看各个段的虚拟地址是怎么计算出来的。为什么
VMA1的起始地址是0x080B99E8？而不是0x080B89E8或干脆是0x080B9000？
DxD804874F
SEG2
MMU.
MMU
oBed
4096
G..
SEG1
MMU.
ofed
4066
SEG1
0x080490A4
MMU
o6ed
4096
0035
SEG0
MMU
ELF He
0x0000000
Process Virtual
Physical Memory
Executable
Space
图6-11ELF文件段合并情况
VMA0的起始地址是0x08048000，长度是0x709E5，所以它的结束地址是0x080B89E5。
而VMA1因为跟VMA0的最后一个虚拟页面共享一个物理页面，并且映射两遍，所以它的
虚拟地址应该是0x080B99E5，又因为段必须是4字节的倍数，则向上取整至0x080B99E8。
根据上面的段对齐方案，由此我们可以推算出-个规律那就是，在ELF文件中，对于
任何一个可装载的“Segment”，它的p_vaddr除以对齐属性的余数等于p_offset除以对齐
属性的余数。比如前面例子中，第二个“Segrment”的p_vaddr为0x080b99e8，对齐属性为
0x1000字节，所以0x080b99e8%0x1000= 0x9e8:面p_offset为 0x0709e8,所以0x0709e8 %
0x1000=0x9e8。如何能推导出这条规律？请有兴趣的读者对照前面的对齐规则计算一下应
该很快能得出结论。
6.4.5进程栈初始化
我们知道进程刚开始启动的时候，须知道一些进程运行的环境，最基本的就是系统环境
变量和进程的运行参数。很常见的一种做法是操作系统在进程启动前将这些信息提前保存到
进程的虚拟空间的栈中（也就是VMA中的StackVMA）。让我们来看看Linux的进程初始
化后栈的结构，我们假设系统中有两个环境变量：
程序员的自我修养一链接、装载与库
---
## Page 195
172
第6章可执行文件的装载与进程
HOME=/home/user
PATH=/usr/bin
比如我们运行该程序的命令行是：
$ prog 123
并且我们假设堆栈段底部地址为0xBF802000，那么进程初始化后的堆栈就如图6-12所
示。
High Address
0xBF802000
0xBF801FFC
n
10
8
/
H
P
U
0xBF801FF0
10
A
T
U
。
5
e
m
E
，
h
0xBF801FE0
0
M
0xBF801FDC
0xBF801FD8
0
2
3
r
0xBF801FF1
0xBF801FE1
Environment Pointers
0xBF801FDE
0
0xBF801FD8
Argument Pointers
esp -> 0xBF801FBC
2
Argument Count
Low Address
Process Stack
图6-12Linux进程初始堆栈
栈项寄存器esp指向的位置是初始化以后堆栈的项部，最前面的4个字节表示命令行参
数的数量，我们的例子里面是两个，即“prog”和“123”，紧接的就是分布指向这两个参数
字符串的指针：后面跟了一个0：接着是两个指向环境变量字符串的指针，它们分别指向字
符串“HOME=/home/user”和“PATH=/usr/bin”：后面紧跟一个0表示结束。
进程在启动以后，程序的库部分会把堆栈里的初始化信息中的参数信息传递给mainO）
程序员的自我修养——链接、装载与库
---
## Page 196
6.5Linux内楼装载ELF过程简介
173
函数，也就是我们熟知的main(函数的两个argc和argv两个参数，这两个参数分别对应这
里的命令行参数数量和命令行参数字符串指针数组。
6.5
5Linux内核装载ELF过程简介
当我们在Linux系统的bash下输入一个命令执行某个ELF程序时，Linux系统是怎样
装载这个ELF文件并且执行它的呢？
首先在用户层面，bash进程会调用fork(系统调用创建一个新的进程，然后新的进程
调用execve(系统调用执行指定的ELF文件，原先的bash进程继续返回等待刚才启动的
新进程结束，然后继续等待用户输入命令。cxccveO系统调用被定义在unistd.h，它的原型
如下：
int execve(const char *filename, char *const argv[], char *const envp[1);
它的三个参数分别是被执行的程序文件名、执行参数和环境变量。Glibc对exccvpO系
统调用进行了包装，提供了execlO、cxeclpo、cxecle0、execv0和execvpO等5个不同形式
的exec系列API，它们只是在调用的参数形式上有所区别，但最终都会调用到execve0这个
系统中。下面是一个简单的使用fork和execlpO实现的minibash：
#include 
include 
#include 
int main()
char buf[1024] = {0}:
pid_t pid;
while (1)(
printf(*minibashs*):
scanf (*s*, buf);
pid = fork();
if(pid == 0) {
if(execlp(buf, 0 ) 0){
vaitpid (pid, &status, 0):
int status;
)else (
printf (*fork error &d\n*,pid);
return 0:
在进入exccveO系统调用之后，Linux内核就开始进行真正的装载工作。在内核中，
程序员的自我修养一链接、装载与库
---
## Page 197
174