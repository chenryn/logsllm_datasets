(4) ∀u /∈ {s, t} : (cid:80)
(5)(cid:80)
e∈in(u) fe =(cid:80)
e∈S×T ce = F .
e∈out(u) fe ;
 .
We note here that verifying the above maximum ﬂow relation
takes O(m) time, while there is no existing algorithm with linear
asymptotic complexity to solve maximum ﬂow problem.
4. VC FOR PLANAR GRAPHS
A planar graph is a graph that can be drawn in the plane without
any crossings [6]. Planar graphs have various applications, e.g.,
they can model vehicular and road networks. Due to their special
structure, more efﬁcient algorithms are known for planar graphs
and ALITHEIA takes advantage of such structure.
Speciﬁcally, in this section we construct a VC scheme for verify-
ing shortest path queries in (un)directed planar graphs. Contrary to
√
the case of general graphs, we show that for planar graphs we can
√
n log n) (which is equiva-
construct a prover that runs in time O(
m log m) since in planar connected graphs it always is
lent to O(
m = Θ(n)). As we will see in the experimental section, this trans-
lates into signiﬁcant practical savings as well, enabling us to scale
veriﬁable computation on 200,000-node graphs for the ﬁrst time.
4.1 The Planar Separator Data Structure
3 , |G2| ≤ 2n
√
3 and |G0| = O(
Our approach is based on a novel data structure that makes use
of the planar separator theorem [22]. The planar separator theo-
rem states the following: For every planar graph G = (V, E) of
n nodes, one can always partition the vertices V of G in three sets
G1, G0, G2 such that |G1| ≤ 2n
n)
and such that all the paths from G1 to G2 go through G0. Many
data structures have appeared in the literature (e.g., see [16]) that
use various versions of the above theorem to answer shortest path
queries in sublinear time—instead of quasilinear time that Dijk-
stra’s algorithm would require. We describe one simple such tech-
nique (and the one we are using in our approach) in the following.
Data structure setup. Let G = (V, E) be a planar undirected
graph of n nodes that has positive weights cuv, where (u, v) ∈ E.
We ﬁrst decompose G into the partition (G1, G0, G2) using the
planar separator theorem. Then we recursively apply the planar
√
separator theorem on G1 and G2 until we are left with partitions of
n) nodes. After the recursion terminates, the initial graph G
O(
will be represented with a binary tree T (called separator tree) of
√
n) nodes and O(log n) depth such that an internal tree node
O(
t contains the nodes of the separator of the graph which is induced
√
by the nodes contained in t’s subtree. See Figure 1.
n) graph nodes.
Let now u be a node of the original graph G. We deﬁne path(u)
to be a tree path from tree node u that contains u to the root r of T .
The separator tree data structure will contain, for all graph nodes
u ∈ G, the following precomputed distances (shortest paths):
Every internal separator tree node contains O(
{Sup : p ∈ path(u)} ,
√
√
n
where Sup is a vector of size |p| storing all the shortest paths suv
√
from u to all v ∈ p. Since tree T has O(
n) nodes and each
node requires O(
n log n) space, the total space of the data
structure is O(n3/2 log n). Note this is a signiﬁcant improvement
over the naive data structure that precomputes the shortest paths
and requires O(n2) space.
Data structure querying. Suppose now we want to query the
shortest path from u to v. First locate separator tree nodes u and v
that contain u and v respectively. We now distinguish the cases:
1. If tree node u is an ancestor of the tree node v or vice-versa,
then simply return suv (which was precomputed in setup and
is an element of the vector Suv);
Figure 1: A planar graph (left) along with its planar separator tree
(right). Nodes 1, 2, 3 comprise the main separator of the graph and
nodes 4, 5 and 6, 7 comprise the separators at the second level.
2. Otherwise, ﬁnd tree nodes t1, t2, . . . , tk that are common in
path(u) and path(v). Then return
suv = min
i=1,...,k
{Suti + Svti} ,
(4)
where + above denotes vector addition.
Therefore, by using the separator tree data structure, we have re-
duced the problem of computing shortest paths on planar graphs to
the problem of performing one minimum computation.
The above approach works because all the paths from one node
of the planar separator tree to another node of the planar separa-
tor tree go through nodes that are common ancestors in the tree.
√
Since the separator tree has O(log n) levels and each node of it
√
n) nodes, it follows that the output of Relation 4 can be
has O(
computed in O(
n log n) time.
4.2 VC Construction
We now present the VC construction for verifying shortest paths
in planar graphs using the above data structure.
Setup. At setup, we initialize an additively-homomorphic vec-
tor commitment scheme V (as in Section 2). We also initialize a
SNARK scheme G for the following language
 .
(5)
L =
(dig, min) : ∃ S and ind such that :
(1) V.digest(S) = dig ;
(2) S[ind] ≤ S[i] ∀ i = 0, . . . , M − 1 ;
(3) S[ind] = min .
Namely language L contains pairs consisting of a vector digest
dig and an element min such that element min is the minimum
among the elements contained in the vector represented with dig.
The SNARK is used for verifying a relation similar to Relation 4.
Then, working on graph G, we build the planar separator tree
T and compute the shortest path vectors Sup for all u ∈ G and
p ∈ path(u). Thereafter, we commit to the shortest path vectors
by computing the digests (using the vector commitment scheme V)
dup ← V.digest(Sup,V.pk) for all u ∈ G and p ∈ path(u).
For clarity of presentation, we are going to assume that the veriﬁca-
tion key of the ﬁnal VC scheme contains (i) The digests dup for all
u ∈ G and p ∈ path(u); (ii) the structure path(u) for all u ∈ G;
(iii) the graph G itself, along with the weights cuv on the edges
(u, v). Although storing all this information requires at least linear
space, it is easy to outsource it by computing a digital signature of
each object above. Actually, this is how our implementation works
(with the difference that an HMAC instead of a signature is used).
5123467dfgebca1354dfgebca276Proof computation and veriﬁcation.
In the proof computation
phase, a proof must be constructed showing that suv is the shortest
path from u to v. Let now v be the separator tree node containing
graph node v and let u be the separator tree node containing graph
node u. Then we need to distinguish two cases, depending on the
location of the nodes u and v on the separator tree. We have the
following cases:
Case 1. If v belongs on the separator tree path from u to the sep-
arator tree root r (or vice versa), then the shortest path suv has
been precomputed and is an element of the vector Suv. Therefore it
sufﬁces for the prover to return a proof for Suv’s element that cor-
responds to the shortest path suv. Then the veriﬁer can verify this
proof using the digest duv.
Case 2. Otherwise, the prover takes the following steps:
1. It computes the common ancestors t1, t2, . . . , tk of u and v in
the separator tree T . Recall, that, due to the planar separator
structure, all the shortest paths from u to v must pass through
one of these nodes.
2. Let now mini (for i = 1, . . . , k) be the minimum element
of the vector Suti + Svti, occurring at node wi ∈ ti, i.e.,
mini = suwi + svwi. For i = 1, . . . , k, the prover outputs
a SNARK proof πi for yi = (duti + dvti , mini) ∈ L by
calling G.compute(yi, ekL). This proof is used to prove that
mini is the minimum of vector Suti + Svti (and therefore a
potential length for the shortest path from u to v). After all
SNARK proofs for mini (i = 1, . . . , k) are veriﬁed by the
veriﬁer, then he can verify the length of the shortest path as
min{min1, min2, . . . , mink}.
The detailed description of our VC scheme is shown in Figure 2.
Asymptotic complexity and security. Let n = Θ(m) be the num-
ber of nodes in a planar graph. First, the most costly operation
of genkey is the computation of the planar separator data struc-
ture. By using standard results from the literature [16], this cost is
O(m3/2 log m). Note that this is an one-time cost.
As far as algorithm compute is concerned, the cost is dominated
by computing one proof using the vector commitment scheme, which
√
takes O(log m) time—see [27]) and O(log m) SNARK proofs.
m log m) time (since
Since computing a SNARK proof takes O(
m)),
the description of the language we are encoding has size O(
the total worst-case cost of computing the proof is O(
m log2 m).
Finally, the size of the proof is O(log m + |p|) since O(log m)
SNARK proofs must be returned as well as signatures on the edges
of the path, and the veriﬁcation time is O(log m+|p|). The security
of the ﬁnal VC scheme follows directly from the security of VCS
scheme and the security of the SNARK scheme. We summarize the
above in the following theorem:
√
√
√
THEOREM 2. Let G be a planar graph with m = Θ(n) edges.
√
Our VC scheme for shortest paths in G has (i) O(m
m log m)
m log2 m) prover time (iii) O(log m+
preprocessing time; (ii) O(
|p|) proof size and (iv) O(log m +|p|) veriﬁcation time, where p is
the output shortest path.
5.
IMPLEMENTATION
In this section we present the implementation of ALITHEIA. Re-
call that the main building blocks used by ALITHEIA are an ad-
ditively homomorphic vector commitment scheme (VCS) and a
SNARK. We give details about those in what follows.
Implementing VCS. A vector commitment scheme (VCS) can be
implemented with a Merkle hash tree using a collision-resistant
Algorithm {ekG, vkG} ← genkey(1k, G)
• V.pk ← V.genkey(1k, M ).
• {G.ekL,G.vkL} ← G.genkey(1k, L), where L is from (5).
• Compute planar separator tree T .
• Compute vectors Sup ∀u ∈ G and ∀p ∈ path(u).
• Set dup ← V.digest(Sup,V.pk) ∀u ∈ G and ∀p ∈ path(u).
Evaluation key ekG contains keys V.pk, G.ekL, the separator tree
T and the vectors Sup for all u ∈ G and p ∈ path(u). Veriﬁcation
key vkG contains V.pk, G.vkL, the digests dup for all u ∈ G and
p ∈ path(u) and the information path(u) for all u ∈ G.
Algorithm {π, p} ← compute((u, v), ekG)
• If path(u) ⊆ path(v) (or vice-versa), output
(suv, πuv) ← V.query(v, Suv,V.pk), where v ∈ v.
• Otherwise, let {t1, t2, . . . , tk} = path(u)(cid:84) path(v).
For i = 1, . . . , k, let mini be the minimum element of the
vector Suti + Svti occurring at graph node wi ∈ ti.
For i = 1, . . . , k, output πi ← G.compute(yi, ekL), where
yi = (duti + dvti , mini) ∈ L.
Output πuv or πi (i = 1, . . . , k) as π and p as the shortest path.
Algorithm {1, 0} ← verify(π, (u, v), p, vkG)
• If path(u) ⊆ path(v) (or vice-versa), check that
1 ← V.verify(v, suv, πuv, duv, pk) .
• Otherwise, let {t1, t2, . . . , tk} = path(u)(cid:84) path(v).
For i = 1, . . . , k check that
1 ← G.verify(πi, (duti + dvti , mini), vkL).
• Check that path p in G has length min{min1, . . . , mink}.
• If all checks succeed output 1, else output 0.
Figure 2: A VC scheme for shortest paths in a planar graph G.
hash function such as SHA-2, e.g., see [23]. However, such a sim-
ple scheme is not additively-homomorphic and our planar separator
scheme requires to use such a scheme. Luckily enough, additive
homomorphism is satisﬁed by various existing schemes, e.g., see
the vector commitment scheme of Catalano and Fiore [13] or the
veriﬁable data streaming scheme of Papamanthou et al. [27].
For practical efﬁciency reasons (e.g., lack of modular exponen-
tiations), our planar separator implementation uses the vector com-
mitment scheme of Papamanthou et al. [27], the security of which
is based on the difﬁculty of the small integer solution (SIS) problem
in lattices (see Assumption 1 in [27]). Also its query and veriﬁca-
tion complexity is O(log2 M ), where M is the size of the input
vector. The exact algorithms we implemented are in Figure 10 in
the Appendix.
Roughly speaking, this scheme is a Merkle hash tree [23] that,
instead of SHA-2, uses the lattice-based hash function h(x, y) =
Lx + Ry mod q, where L, R ∈ Zk×m
and x, y ∈ [N ]m [4]. Due
to additive properties of the lattice-based hash function, the digest
q
(cid:88)
i
d(S) of the produced Merkle hash tree can be expressed as