---
author: Sandeep.S
category: 软件开发
comments_data:
- date: '2016-08-16 17:47:41'
  message: 可以，看看
  postip: 121.34.99.3
  username: hello_linux [Chrome 46.0|Windows 7]
- date: '2016-08-17 00:26:16'
  message: 赞，了解了
  postip: 210.79.126.53
  username: zansy [Firefox 48.0|Windows 10]
- date: '2016-08-17 10:45:44'
  message: 这文章？baidu机器翻译的？
  postip: 123.117.60.247
  username: 来自北京的 Chrome 45.0|Windows 7 用户
- date: '2016-08-17 11:16:21'
  message: 哪里像百度翻译。。
  postip: 163.177.68.30
  username: 来自广东深圳的 Firefox 47.0|Windows 7 用户
- date: '2016-08-17 21:44:47'
  message: 你家百度翻译真厉害。
  postip: 111.197.255.86
  username: linux [Chrome 52.0|Mac 10.11]
- date: '2016-08-18 15:45:07'
  message: 昨天两遍，今天又看了一遍，还是没看明白。我是不是不适合做程序猿了？
  postip: 115.193.94.54
  username: chenjintao_ii [Firefox 47.0|Fedora]
- date: '2016-08-19 23:50:03'
  message: 我觉得用不到的人看不懂也没啥。。
  postip: 114.245.15.211
  username: linux [Chrome 52.0|Mac 10.11]
- date: '2021-06-06 00:31:03'
  message: "5.2节\r\n&quot;所以现在我们来关注一些示例。我们想要求一个数的5次方结果。为了计算该值，我们使用 lea 指令。&quot;\r\n应该是一个数的5倍"
  postip: 111.40.58.228
  username: 来自黑龙江的 Chrome 91.0|Windows 10 用户
count:
  commentnum: 8
  favtimes: 5
  likes: 0
  sharetimes: 0
  viewnum: 9781
date: '2016-08-16 17:43:00'
editorchoice: false
excerpt: 本 HOWTO 文档将讲解 GCC 提供的内联汇编特性的用途和用法。对于阅读这篇文章，这里只有两个前提要求，很明显，就是 x86 汇编语言和 C
  语言的基本认识。
fromurl: http://www.ibiblio.org/gferg/ldp/GCC-Inline-Assembly-HOWTO.html
id: 7688
islctt: true
largepic: /data/attachment/album/201608/16/174310jzjh4jjjqy8syjsj.jpg
permalink: /article-7688-1.html
pic: /data/attachment/album/201608/16/174310jzjh4jjjqy8syjsj.jpg.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: 本 HOWTO 文档将讲解 GCC 提供的内联汇编特性的用途和用法。对于阅读这篇文章，这里只有两个前提要求，很明显，就是 x86 汇编语言和 C
  语言的基本认识。
tags:
- 汇编
- GCC
thumb: false
title: GCC 内联汇编 HOWTO
titlepic: true
translator: cposture
updated: '2016-08-16 17:43:00'
---
![](/data/attachment/album/201608/16/174310jzjh4jjjqy8syjsj.jpg)
v0.1, 01 March 2003.
*本 HOWTO 文档将讲解 GCC 提供的内联汇编特性的用途和用法。对于阅读这篇文章，这里只有两个前提要求，很明显，就是 x86 汇编语言和 C 语言的基本认识。*
### 1. 简介
#### 1.1 版权许可
Copyright (C) 2003 Sandeep S.
本文档自由共享；你可以重新发布它，并且/或者在遵循自由软件基金会发布的 GNU 通用公共许可证下修改它；也可以是该许可证的版本 2 或者（按照你的需求）更晚的版本。
发布这篇文档是希望它能够帮助别人，但是没有任何担保；甚至不包括可售性和适用于任何特定目的的担保。关于更详细的信息，可以查看 GNU 通用许可证。
#### 1.2 反馈校正
请将反馈和批评一起提交给 [Sandeep.S](mailto:PI:EMAIL) 。我将感谢任何一个指出本文档中错误和不准确之处的人；一被告知，我会马上改正它们。
#### 1.3 致谢
我对提供如此棒的特性的 GNU 人们表示真诚的感谢。感谢 Mr.Pramode C E 所做的所有帮助。感谢在 Govt Engineering College 和 Trichur 的朋友们的精神支持和合作，尤其是 Nisha Kurur 和 Sakeeb S 。 感谢在 Gvot Engineering College 和 Trichur 的老师们的合作。
另外，感谢 Phillip , Brennan Underwood 和 [PI:EMAIL](mailto:PI:EMAIL) ；这里的许多东西都厚颜地直接取自他们的工作成果。
### 2. 概览
在这里，我们将学习 GCC 内联汇编。这里 内联   （    inline    ） 表示的是什么呢？
我们可以要求编译器将一个函数的代码插入到调用者代码中函数被实际调用的地方。这样的函数就是内联函数。这听起来和宏差不多？这两者确实有相似之处。
内联函数的优点是什么呢？
这种内联方法可以减少函数调用开销。同时如果所有实参的值为常量，它们的已知值可以在编译期允许简化，因此并非所有的内联函数代码都需要被包含进去。代码大小的影响是不可预测的，这取决于特定的情况。为了声明一个内联函数，我们必须在函数声明中使用 `inline` 关键字。
现在我们正处于一个猜测内联汇编到底是什么的点上。它只不过是一些写为内联函数的汇编程序。在系统编程上，它们方便、快速并且极其有用。我们主要集中学习（GCC）内联汇编函数的基本格式和用法。为了声明内联汇编函数，我们使用 `asm` 关键词。
内联汇编之所以重要，主要是因为它可以操作并且使其输出通过 C 变量显示出来。正是因为此能力， "asm" 可以用作汇编指令和包含它的 C 程序之间的接口。
### 3. GCC 汇编语法
Linux上的 GNU C 编译器 GCC ，使用 **AT&T** / **UNIX** 汇编语法。在这里，我们将使用 AT&T 语法 进行汇编编码。如果你对 AT&T 语法不熟悉的话，请不要紧张，我会教你的。AT&T 语法和 Intel 语法的差别很大。我会给出主要的区别。
1. 源操作数和目的操作数顺序
AT&T 语法的操作数方向和 Intel 语法的刚好相反。在Intel 语法中，第一操作数为目的操作数，第二操作数为源操作数，然而在 AT&T 语法中，第一操作数为源操作数，第二操作数为目的操作数。也就是说，
Intel 语法中的 `Op-code dst src` 变为 AT&T 语法中的 `Op-code src dst`。
2. 寄存器命名
寄存器名称有 `%` 前缀，即如果必须使用 `eax`，它应该用作 `%eax`。
3. 立即数
AT&T 立即数以 `$` 为前缀。静态 "C" 变量也使用 `$` 前缀。在 Intel 语法中，十六进制常量以 `h` 为后缀，然而 AT&T 不使用这种语法，这里我们给常量添加前缀 `0x`。所以，对于十六进制，我们首先看到一个 `$`，然后是 `0x`，最后才是常量。
4. 操作数大小
在 AT&T 语法中，存储器操作数的大小取决于操作码名字的最后一个字符。操作码后缀 ’b’ 、’w’、’l’ 分别指明了 字节   （    byte    ） （8位）、 字   （    word    ） （16位）、 长型   （    long    ） （32位）存储器引用。Intel 语法通过给存储器操作数添加 `byte ptr`、 `word ptr` 和 `dword ptr` 前缀来实现这一功能。
因此，Intel的 `mov al, byte ptr foo` 在 AT&T 语法中为 `movb foo, %al`。
5. 存储器操作数
在 Intel 语法中，基址寄存器包含在 `[` 和 `]` 中，然而在 AT&T 中，它们变为 `(` 和 `)`。另外，在 Intel 语法中， 间接内存引用为
`section:[base + index*scale + disp]`，在 AT&T中变为 `section:disp(base, index, scale)`。
需要牢记的一点是，当一个常量用于 disp 或 scale，不能添加 `$` 前缀。
现在我们看到了 Intel 语法和 AT&T 语法之间的一些主要差别。我仅仅写了它们差别的一部分而已。关于更完整的信息，请参考 GNU 汇编文档。现在为了更好地理解，我们可以看一些示例。
```
+------------------------------+------------------------------------+
|       Intel Code             |      AT&T Code                     |
+------------------------------+------------------------------------+
| mov     eax,1                |  movl    $1,%eax                   |   
| mov     ebx,0ffh             |  movl    $0xff,%ebx                |   
| int     80h                  |  int     $0x80                     |   
| mov     ebx, eax             |  movl    %eax, %ebx                |
| mov     eax,[ecx]            |  movl    (%ecx),%eax               |
| mov     eax,[ebx+3]          |  movl    3(%ebx),%eax              | 
| mov     eax,[ebx+20h]        |  movl    0x20(%ebx),%eax           |
| add     eax,[ebx+ecx*2h]     |  addl    (%ebx,%ecx,0x2),%eax      |
| lea     eax,[ebx+ecx]        |  leal    (%ebx,%ecx),%eax          |
| sub     eax,[ebx+ecx*4h-20h] |  subl    -0x20(%ebx,%ecx,0x4),%eax |
+------------------------------+------------------------------------+
```
### 4. 基本内联
基本内联汇编的格式非常直接了当。它的基本格式为
`asm("汇编代码");`
示例
```
asm("movl %ecx %eax"); /* 将 ecx 寄存器的内容移至 eax  */
__asm__("movb %bh (%eax)"); /* 将 bh 的一个字节数据 移至 eax 寄存器指向的内存 */
```
你可能注意到了这里我使用了 `asm` 和 `__asm__`。这两者都是有效的。如果关键词 `asm` 和我们程序的一些标识符冲突了，我们可以使用 `__asm__`。如果我们的指令多于一条，我们可以每个一行，并用双引号圈起，同时为每条指令添加 ’\n’ 和 ’\t’ 后缀。这是因为 gcc 将每一条当作字符串发送给 **as**（GAS）（LCTT 译注： GAS 即 GNU 汇编器），并且通过使用换行符/制表符发送正确格式化后的行给汇编器。
示例
```
__asm__ ("movl %eax, %ebx\n\t"
         "movl $56, %esi\n\t"
         "movl %ecx, $label(%edx,%ebx,$4)\n\t"
         "movb %ah, (%ebx)");
```
如果在代码中，我们涉及到一些寄存器（即改变其内容），但在没有恢复这些变化的情况下从汇编中返回，这将会导致一些意想不到的事情。这是因为 GCC 并不知道寄存器内容的变化，这会导致问题，特别是当编译器做了某些优化。在没有告知 GCC 的情况下，它将会假设一些寄存器存储了一些值——而我们可能已经改变却没有告知 GCC——它会像什么事都没发生一样继续运行（LCTT 译注：什么事都没发生一样是指GCC不会假设寄存器装入的值是有效的，当退出改变了寄存器值的内联汇编后，寄存器的值不会保存到相应的变量或内存空间）。我们所可以做的是使用那些没有副作用的指令，或者当我们退出时恢复这些寄存器，要不就等着程序崩溃吧。这是为什么我们需要一些扩展功能，扩展汇编给我们提供了那些功能。
### 5. 扩展汇编