a tiny fraction (≈0.003%) of domains exhibiting inconsis-
tent settings, largely (>65% of cases) caused by domains
setting HSTS or HPKP headers on one set of IP addresses,
but not on another. Many of the remaining cases set incon-
sistent HSTS max-age, or includeSubDomains values; one
domain pins different HPKP keys. The inconsistent domains
within individual scans are 6 for MUCv6, 25 for MUCv4, and
22 for SYDv4, a tiny fraction compared to the millions of
scanned domains per vantage point. This group of inconsis-
tent domains partially consists of services that are globally
distributed under shared administration, such as pooled NTP
and OpenPGP Key Servers. We limit the following analyses
to domains consistent within one scan.
We evaluate inter-scan consistency, i.e., whether head-
ers are consistent between scans. We find about 2% of
HSTS/HPKP-enabled domains to serve different headers
across at least two scans; the difference is nearly exclusively
caused by configurations serving HSTS in one scan, but not
the other. In detail, we find 15k domains inconsistent between
the MUCv4 and SYDv4 scan, and 754 domains inconsistent
between the MUCv4 and MUCv6 scan. From sample analysis,
we identify three potential reasons for this behavior: (a) tim-
ing differences between our scans (b) differently configured IP
anycast services, revealed using speed-of-light constraints [63]
(c) load-balancers with inconsistently configured servers. We
limit the following analyses to domains that serve consistent
headers across all scans.
6.2 Deployment
3.5% (984k) of the domains with consistent and HTTP-200
headers support HSTS. .2% of HSTS-enabled domains send
incorrect HSTS headers—typically due to typographical mis-
takes, such as includeSubDomains missing the plural s. 41k
domains do not use HSTS effectively, setting the max-age
attribute to 0, resulting in a ‘deregistration’ from HSTS use
(24k domains), to a non-numerical value (16k domains), or
to an empty value (1k domains). For HPKP, we find that
only 6181 of all 28M domains (0.02%) send the header. Of
these, 29 do not send a valid max-age directive and 12 do
not contain any pins.
Max-Age: The max-age attribute indicates the lifetime of
HSTS and HPKP headers, which browsers will update on ev-
ery domain visit. Figure 2 shows the distribution of max-age
across all HSTS domains, HPKP’s max-age for the subset
of domains that also support HSTS (HPKP|HSTS), as well
as HSTS’s max-age for the subset of domains that also sup-
port HPKP (HSTS|HPKP). The intersecting sets generally
have shorter durations with the majority of HPKP max-
age values being 10 minutes (33%), 30 days (22%), and 60
days (15%). HSTS domains that also send HPKP headers
choose 5 minutes (32%), 1 year (26%), and 2 years (14%).
The largest values are sent by the set of all HSTS domains
with 2 years (46%), 1 year (32%), and 6 months (10%). The
median max-age of HSTS is one year, but only one month for
HPKP. This suggests operators exercise caution when using
HPKP, which carries high availability risk through lock-out
(cf. the Cryptocat lock-out [69]). We also note an extreme
outlier setting an HSTS max-age of 49 million years (a likely
accidental duplication of the string for half a year).
includeSubDomains: 56% of HSTS and 38% of HPKP domains
use the attribute includeSubDomains. This attribute enables
HSTS for all subdomains of the domain setting this attribute.
This has many benefits, for example, helping to avoid insecure
cookies from subdomains. However, it may cause operational
difficulties when subdomains do not actually support HTTPS.
As some domains do not even use subdomains, it is difficult
to assess this percentage.
Preloading Lists: We investigate the HSTS preload list in-
cluded in Chrome [14], which also is the base for Mozilla’s
preloading list [48]. A domain can be added to the list by (a)
setting the HSTS directive, (b) including the non-RFC preload
parameter and (c) opting in through sites such as Chromium’s
hstspreload.org. Interestingly, we find a large fraction (379k,
38%) of scanned domains to include the preload directive, but
only 23k domains in the preload list of the current version
of Chrome (58), with the intersection consisting of just 6k
domains. Two possible explanations are that the inclusion
Figure 2: Distribution of the max-age attribute for HPKP
and HSTS headers: Domain owners typically set much higher
max-ages for HSTS than HPKP.
Mission Accomplished? HTTPS Security after DigiNotar
IMC ’17, November 1–3, 2017, London, United Kingdom
Figure 3: HSTS: Significant usage among top domains.
Preloading essentially absent in general population, but with
significant deployment among top domains.
Figure 4: HPKP: Low usage among general population, sig-
nificantly higher usage through preloading list among Alexa
top domains.
process is slow to catch up, or operators do not follow all
prescribed steps for inclusion, e.g., because they just copy
directives from tutorials.
Deployment Ranking: Figures 3 and 4 differentiate HSTS and
HPKP usage for both dynamic and preloaded deployment
across domain rank. Note that our 100% baseline is the
fraction of Top 1M, Top 10k, and Top 1k domains answering
with HTTP 200, amended by all preloaded domains. For both
technologies, we find that few domains of the base population
deploy them. The rising share of dynamic and preloaded
domains with domain popularity is encouraging. This is in line
with expectations that more popular domains also have more
resources to configure and maintain these security extensions.
The share of preloading among top domains, especially for
HPKP, also is encouraging.
Comparison to Related Work: We compare our results to
those by Kranch and Bonneau [42], who evaluated HSTS and
HPKP extensively in 2014. Both technologies have gained
much usage, in both dynamic and preloaded fashion: The
HSTS preload list has grown from 1258 domains in 2014 to
23.5k domains in 2017, and the number of dynamic HSTS
domains in the Alexa Top 1M list has grown from 12.5k
in 2014 to a lower bound of 18k in 2017. As HPKP was
still in the standardization process in 2015, Kranch and
Bonneau found only 18 domains supporting HPKP. This
number has risen to about 6k. We can confirm many of the
issues and oddities observed by Kranch and Bonneau, such
as mistyped directives, mismatches between preloaded and
dynamic HSTS domains, and redirections from top domains
not covered under HSTS. We agree with their conclusion
that forcing all operators to determine and configure a max-
age is prone to mistakes, and support their suggestion of a
reasonable default setting.
7 SCSV DOWNGRADE PREVENTION
We evaluate SCSV downgrade prevention support [50]. SCSV
is a pseudo ciphersuite value sent by the client when re-
trying to connect to a server with a lower TLS version after
a first attempt failed (see Section 2). We distinguish between
four outcomes. First, the server correctly aborts connections
sending the SCSV using an alert or some other message.
Second, the connection fails due to a transient error (e.g.,
timeout). Third, the server incorrectly continues with the
connection. Fourth, the server incorrectly tries to continue
the connection, but chooses parameters not supported by our
Our scans include 13k of the 23k domains in the preload
list (the remainder are domains without A/AAAA records,
from TLDs not in our list, or subdomains we do not scan).
We successfully connect to 6.6k of these 13k domains. 6026 of
them send the HSTS header and 5656 include the preload at-
tribute. The remaining domains do not satisfy the preloading
criteria anymore and will be removed from the preloading list
eventually. Further examination of HSTS-preloaded domains
reveals that some popular domains only preload subdomains,
but not their base domain: for the Alexa Top 1M list, 91 of the
2715 preloaded domains only preload a subdomain. One ex-
ample is theguardian.com, which sets dynamic and preloaded
HSTS for its www subdomain, but not for its main domain.
This exposes users of the base domain to HTTPS stripping
and redirect attacks. Another example is Google who en-
ables HSTS for select subdomains. We contacted Google who
stated that each service and its subdomain has to be verified
individually, making the HSTS roll-out a long process.
There is no publicly accessible preloading mechanism for
HPKP. Browser vendors, however, include important do-
mains in their internal HPKP preloading list. Mozilla’s HPKP
preloading list, which extends Chrome’s list [47, 48], includes
a total of 479 domains, mostly from Google, Facebook, Yahoo,
Twitter, Mozilla, and the Tor project.
Public Key Pinning: We analyze the validity of HPKP pins.
The majority (86.0%) of scanned HPKP domains use HPKP
correctly and provide at least one valid pin. Examining non-
matching cases reveals that for 8.5% of HPKP domains the
certificate is known to us, but missing from the handshake.
Exploring the top 5 cases reveals 4 intermediate CA certifi-
cates missing from the handshake (a TLS standard violation,
but accepted by browsers) and one certificate falsely copied
from an HPKP tutorial webpage.
The majority of the remaining 5.5% of HPKP domains with
pins where we find no matching public key in our certificate
set use bogus pins, many being syntactically invalid SHA256
hashes. The top 3 are the pins from the RFC example section,
the text , and
base64+primary==, base64+backup==. Pins that do not
have the correct format are ignored by browsers.
IMC ’17, November 1–3, 2017, London, United Kingdom
Amann, Gasser, Scheitle, Brent, Carle, Holz
Scan
MUCv4
SYDv4
MUCv6
Merged1
1: Merged dataset exclusively contains per-scan consistent domains.
Incons. Abort. Cont.
Conns. Fail. Domains
.1% 96.2% 3.8%
48.41M
55.68M 5.4%
.1% 96.1% 3.8%
48.75M
57.95M 4.7%
3.27M .0006% 99.5%
5.11M .6%
.5%
51.16M .008% 96.3% 3.7%
N/A N/A
Table 8: SCSV statistics from active scans: >96% of domains
correctly abort TLS connections.
SYD
3243 (100%)
CAA
signed
674 (21%)
TLSA 1697 (100%)
signed
1330 (78%)
MUC Intersection
3057 (100%)
621 (20%)
1246 (100%)
973 (78%)
3509 (100%)
899 (26%)
1364 (100%)
1042 (76%)
Top 1M
340 (100%)
53 (16%)
100 (100%)
89 (89%)
Table 9: Number of domains with CAA and TLSA records,
with and without validating DNSSEC signatures.
local TLS client. This last case affects only .03% of domains,
which we count as attempts to continue the connection.
Table 8 displays results for our active scan both per scan
and for merged scans. The results show that >96% of HTTPS-
responsive domains implement RFC 7507, despite it being
relatively recent (April 2015). The Alexa Top 1M, 10k, and
1k domains have equally high coverage.
This high percentage of support may stem from the inclu-
sion in cryptographic libraries. Server operators do not have
to change any settings, but just use a recent cryptographic
library, making deployment very easy. 5 of the 7 domains in
the Alexa Top 100 list that do not support SCSV are from
Microsoft and use IIS according to HTTP headers. While
there is no official statement from Microsoft regarding SCSV
support in IIS and SChannel, several blog posts [34, 45] indi-
cate that SCSV support has been missing for a while. Given
the 11% market share of IIS among HTTP servers [75], it
seems reasonable that a large fraction of the non-supporting
domains may be caused by the lack of SCSV support in
IIS/SChannel.
We also evaluate whether SCSV is used in user-initiated
connections by investigating our passive data. We count
source and destination IP address tuples that use the SCSV
pseudo-cipher at least once, and find 126k (0.2%) in Germany
and 198k (0.1%) in the USA. This indicates that SCSV
protection ciphers are used in the wild across many clients
and servers.
8 DNS-BASED SYSTEMS
We investigate the use of CAA and DANE-TLSA (for TCP
port 443) records for domains that yielded an A or AAAA
record in our DNS resolution. As described in Section 2, CAA
and DANE-TLSA are DNS records that help with certificate
issuance and verification, respectively. We perform scans from
Munich and Sydney roughly two weeks after our TLS scans.
Even with this time difference, the majority of lookups was
successful: less than 100 attempts at resolving records failed
where previous attempts (A, AAAA) had succeeded.
Table 9 presents an overview of domains with at least
one CAA/TLSA record and details if they are DNSSEC
verifiable. Note that domains may have multiple CAA and
TLSA records. TLSA mandates DNSSEC, CAA does not.
Given the low rate of DNSSEC deployment [73], it is a
good sign that 20-25% percent of CAA and around 75% of
TLSA records use DNSSEC. While CAA/TLSA records differ
slightly between Munich and Sydney, we do not encounter
any divergence in DNSSEC verification. Slight differences are
expected due to timing variation and nameservers using IP
anycast to redirect to closer endpoints.
CAA has a larger deployment (340) in the Top 1M com-
pared to TLSA (100). However, there are more signed TLSA
domains (89 compared to 53). The preference among the
higher ranked domains may indicate that the record is viewed
as beneficial.
CAA: A CAA record basically consists of one or more proper-
ties, which are key-value pairs. The issue property is used to
specify which CA may issue certificates; issuewild is the same,
but for wildcard domain certificates. The iodef property pro-
vides means to contact a domain owner in a standardized
(machine-readable) way, e.g., when a CA receives a request
to issue a certificate that violates the CAA policy.
We first analyze the top CAs for the issue property. It is
important to note there is currently no agreed mapping of
human-readable strings to CAs. The results are consistent
from both vantage points, hence we report values from our
Sydney scans.
From the vantage point in Sydney, we find a total of 3,834
records containing the issue property. Unsurprisingly, most
records are contributed by domains in the .com zone (1,742)—
however, the second most common zone is .de (682), well
ahead of the similarly-sized generic .org and .net (463 and
447, respectively). No other zone contributes more than 75
records.
The most common string is letsencrypt.org, in 2,270 records.
Let’s Encrypt launched in 2016, is free and fully automated.
Domain ownership is verified and certificates are issued using
the ACME protocol [9]. The next four strings, comodoca.com,
symantec.com, digicert.com, and the Google CA pki.goog all
appear with similar numbers (246, 233, 195, and 195 re-
spectively). However, Comodo also appears with the string
comodo.com, and brands owned by other CAs appear with
their own string (e.g., GeoTrust, owned by Symantec, or
RapidSSL, owned by Comodo). We find a total of 55 combi-
nations and spellings. In 63 cases, operators set a semicolon;
this signifies that no CA is allowed to issue certificates.
We find that the issuewild property is used less often
than issue: only 1,088 such records exist (for 1,064 domains).
They show an entirely different use pattern. 756 records are
set to a semicolon, meaning that no CA may issue wildcard
certificates. We find a few dozen domains that choose different
settings for issue and issuewild. In the vast majority of these
cases, issue is set to Let’s Encrypt (which does not yet issue
wildcard certificates) and issuewild to another mainstream
CA.
Mission Accomplished? HTTPS Security after DigiNotar
IMC ’17, November 1–3, 2017, London, United Kingdom
Finally, we find 1145 iodef records, across 1,141 domains.
The standard allows email and HTTP URLs for reporting.
About 220 records violate this requirement; manual inspec-
tion shows that all are meant to be email addresses (mostly
a missing mailto:). 908 domains use an email and just 13 an
HTTP(S) URL. We find a total of 380 unique email addresses
in the records. By attempting repeated SMTP dialogues and
testing for responses for RCPT TO:, we find that only 63%
of iodef email addresses actually exist.
We find only 9 unique HTTP(S) URLs. According to
RFC 5070, a web service should reply with a 204 response to
a POST with an empty key-value pair. In our tests, this was
only the case for 2 URLs; 5 returned an error and 2 served
normal websites.
In conclusion, it seems that domain owners are conscious
of security when choosing their CAA records. They mostly
disallow wildcarded certificates, and they show a very clear
preference for Let’s Encrypt.
TLSA: TLSA is a DNS-based form of certificate pinning.
TLSA has been well studied; the SecSpider dashboard even
tracks it for DNSSEC-secured zones [73, 82].
While SecSpider [73] and our domain sets are not con-
gruent, SecSpider’s authors report 2306 base domains with
TLSA enabled for HTTPS as of August 23, 2017. We find