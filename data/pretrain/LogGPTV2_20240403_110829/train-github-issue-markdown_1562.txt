##### Description of the problem
I think this implementation of Vector3.prototype.projectOnVector:
    projectOnVector = function ( vector ) {
        var length = vector.length();
        var scalar = this.dot(vector) / (length * length);
        return vector.multiplyScalar(scalar);
    };
would be significantly faster than the current implementation:
    projectOnVector: function () {
        var v1, dot;
        return function projectOnVector( vector ) {
            if ( v1 === undefined ) v1 = new THREE.Vector3();
            v1.copy( vector ).normalize();
            dot = this.dot( v1 );
            return this.copy( v1 ).multiplyScalar( dot );
        };
    }()
The allocation of a temporary Vector3 is stripped away, and it uses two
function calls less.
##### Three.js version
  * Dev
  * r77
  * r73
##### Browser
  * All of them
  * Chrome
  * Firefox
  * Internet Explorer
##### OS
  * All of them
  * Windows
  * Linux
  * Android
  * IOS
##### Hardware Requirements (graphics card, VR Device, ...)