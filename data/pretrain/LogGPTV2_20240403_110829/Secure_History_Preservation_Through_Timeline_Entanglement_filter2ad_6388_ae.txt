shot [6, 7]. Furthermore, the authenticated skip list
of those snapshot root labels is itself a one-way di-
gest of the sequence of snapshot roots. As a result,
the label of the last element of the snapshot root
skip list is a one-way digest of the entire history of
operations of the persistent RBB-Tree. The snap-
shot root skip list subsumes the functionality of the
Time Tree in our earlier persistent authenticated
red-black tree design [16].
In some cases the \freshness" of an authenticated
dictionary snapshot has to be provable. For ex-
ample,
in our description of secure timelines, we
have speci(cid:12)ed that the system state must depend
on the authenticator of the previous timeline time
step. When the system state is represented by an
authenticated dictionary, an existence proof within
that dictionary need not only show that a sought el-
ement is part of the dictionary given the dictionary
digest (root hash), but also that the sought element
was added into the dictionary after the authentica-
tor of the previous time step was known.
As with other authenticated dictionaries, we ac-
complish this by making the hash label of NIL point-
ers equal to the \freshness" authenticator, so that
all existence proofs of newly inserted elements|
equivalently, non-existence proofs of newly removed
elements|prove that they happened after the given
freshness authenticator was known. Note that sub-
trees of the RBB-Tree that do not change across
snapshots retain their old freshness authenticators.
This is acceptable, since freshness is only necessary
to prove to a client that a requested modi(cid:12)cation
was just performed (for example, when we produce
entanglement receipts in Section 4), and is required
only of newly removed or inserted dictionary ele-
ments.
In the (cid:12)gure, the label for key node 19 is
derived from the freshness authenticator for snap-
shot 3, since 19 is added into the tree in snapshot
3. This establishes that the tree changed to receive
key 19 after the value of the freshness authenticator
for snapshot 3 was known.
In standalone RBB-Trees, the freshness authenti-
cator is simply the last authenticator in the snap-
shot root list (i.e., the authenticator that resulted
from the insertion of the latest closed snapshot root
into the skip list). In the RBB-Trees that we use
for thread archives in Timeweave (Section 5.3), the
freshness authenticator for snapshot i is exactly the
authenticator of the previous timeline time step
Ti(cid:0)1.
5.3 Timeweave
Timeweave is an implementation of the timeline en-
tanglement mechanisms described in Section 4. It is
built using our authenticated append-only skip lists
(Section 5.1) and our on-disk persistent authenti-
cated search trees (Section 5.2).
A Timeweave machine maintains four compo-
nents: (cid:12)rst, a service state, which is application
speci(cid:12)c, and the one-way digest mechanism thereof;
second, its secure timeline; third, a persistent au-
thenticated archive of timeline threads received;
and, fourth, a simple archive of entanglement re-
ceipts received.
The timeline is stored as an append-only authen-
ticated skip list. The system digest used to derive
the timeline authenticator at every logical time step
is a hash of the concatenation of the service state
digest and the digest of the thread archive after any
incoming and outgoing threads have been recorded.
The thread archive contains threads sent by re-
mote peers and veri(cid:12)ed locally. Such threads are
contained both in thread messages initiated re-
motely and in entanglement receipts to outgoing
threads. The archived threads are ordered by the
identity of the remote peer in the entanglement op-
(cid:7)
(cid:8)
(cid:10)
(cid:11)
(cid:12)
(cid:9)
(cid:2)
(cid:3)
(cid:2)
(cid:3)
(cid:4)
(cid:2)
(cid:3)
(cid:2)
(cid:3)
(cid:3)
(cid:3)
eration, and then by the foreign logical time as-
sociated with the operation. The archive is im-
plemented as an RBB-Tree and has a well-de(cid:12)ned
mechanism for calculating its one-way digest, de-
scribed in Section 5.2.
The receipt archive is a simple (not authenti-
cated) repository of thread storage receipts for all
outgoing threads successfully acknowledged by re-
mote peers.
The main operational loop of a Timeweave ma-
chine is as follows:
)
s
d
n
o
c
e
s
o
r
c
i
m
(
e
m
T
i
38.0
37.5
37.0
36.5
36.0
60
)
s
m
(
e
m
T
i
40
20
0
0
0
1
Global Average
Last Average
0
0
2
0
4
0
6
0
8
Size (millions)
(a) Append
0
0
2
0
4
0
6
0
8
Distance (millions)
(b) Proof Extraction
0
0
1
1. Handle client requests and update system state
digest f (S).
2. Insert all valid, newly obtained timeline threads
into thread archive E and update thread
archive digest g(E).
3. Hash together the digests to produce system
digest d = h(f (S)kg(E)).
4. Append d into the timeline skip list, resulting
in a new timeline authenticator T , and sign the
authenticator.
5. Set the new timeline authenticator as the fresh-
ness authenticator in the next snapshot of
the thread archive and, potentially, of the
application-speci(cid:12)c system state.
6. For all incoming timeline threads just archived,
construct and return receipts to thread senders.
7. If it is time to send an outgoing timeline thread,
send one to all peers, and store the receipts in
the thread and receipt archives.
The Timeweave machine also allows clients to
request local temporal mappings of remote logi-
cal times and temporal precedences between local
times.
6 Evaluation
In this section, we evaluate the performance char-
acteristics of timeline entanglement. First, in Sec-
tion 6.1, we present measurements from a Java im-
plementation of the Timeweave infrastructure: au-
thenticated append-only skip lists and RBB-Trees.
Then, in Section 6.2, we explore the performance
characteristics of Timeweave as a function of its
basic Timeweave system parameter, entanglement
load.
In all measurements, we use a lightly loaded
dual Pentium III Xeon computer at 1 GHz, with
Figure 9: Skip list performance. (a) Append time vs.
skip list size. Note that the y axis does not start from
0. \Global average" shows average performance over all
operations; \last average" shows performance during the
last one million operations for a given size. (b) Proof
extraction time vs. proof distance. For each distance,
1,000 proofs from uniformly random starting elements
are averaged.
2 GBytes of main memory, running RedHat Linux
7.2, with the stock 2.4.9-31smp kernel and Sun Mi-
crosystemsâ€™ JVM 1.3.02. The three disks used in
the experiments are model MAJ3364MP made by
Fujitsu, which o(cid:11)er 10,000 RPMs and 5 ms average
seek time. We use a disk block size of 64 KBytes.
Finally, for signing we use DSA with SHA-1, with a
key size of 1024 bits.
6.1 Data Structure Performance
We measure the raw performance characteristics of
our disk-based authenticated data structures. Since
Timeweave relies heavily on these two data struc-
tures, understanding their performance can help
evaluate the performance limitations of Timeweave.
Figure 9(a) shows the performance of skip list ap-
pends, for skip list sizes ranging from one million to
100 million elements, in increments of one million el-
ements. The (cid:12)gure graphs the time taken by a single
append operation averaged over all operations for a
given size, and averaged over the last one million
operations for a given size. As expected, the time
taken by append operations grows logarithmically
with the size of the skip list, although for practi-
cal skip list sizes, the cost per append operation is
virtually constant.
We also measure the performance of skip list proof
extraction, in Figure 9(b). The (cid:12)gure graphs the
time it takes to extract a precedence proof from a
100-million element skip list for a given distance be-
tween the end-points of the proof (the distance be-
tween elements i and j is j (cid:0) i elements). We aver-
age over 1,000 uniformly random proof extractions
4
)
s
3
m
2
(
e
m
T
i
1
0
0
0
0
1
K
1
1 0 K
100K
1 M
1
2
Size (millions)
(a) Insertion
5
1
.
0
0
1
.
0
)
s
m
(
e
m
T
i
5
0
.
0
0
0
.
0
3
0
1
2
Size (millions)
(b) Proof Extraction
0
1
)
s
e
t
y
B
K
5
(
e
z
i
S
f
o
o
r
P
0
3
0
0
2
0
4
0
6
0
8
)
s
e
t
y
B
K
(
e
z
i
S
f
o
o
r
P
0
.
1
8
.
0
6
.
0
4
.
0
2
.
0
0
.
0
0
0
1