### 如何转到漏洞挖掘

#### 确定目标
- 选定目标后，建议在一年内不要轻易改变。
- 可选的目标包括：
  - iOS 沙盒逃逸
  - Android Binder 相关的漏洞
  - macOS XPC 漏洞
  - Linux 用户空间提权
  - 虚拟化产品的逃逸
  - 等等

#### 编程错误
1. **掌握通用的错误类型**：
   - 阅读《The Art of Software Security Assessment》（作者：Mark Dowd），重点关注其中的错误类型。
   - 也可以参考其他相关书籍和资料，重点仍然是关注错误类型。
   - 推荐资源：GP0（https://bugs.chromium.org/p/project-zero/issues/list?q=&can=1）

2. **积累与关注错误类型**：
   - 每天积累并关注安全动态中提及的漏洞错误类型，例如：
     - https://weibo.com/360adlab?is_all=1
     - https://weibo.com/xuanwulab?is_all=1
   - 关注 Twitter 上的相关信息，丰富自己所掌握的错误类型，强化对编程错误的识别能力。

3. **调试分析历史漏洞**：
   - 根据你选择的目标，寻找其历史漏洞，并选择一个有公开利用的历史漏洞进行重点调试分析。
   - 通过调试分析可以了解所涉及的领域知识、加深对目标漏洞的理解，并初步了解利用方法。
   - 第一次分析可能需要较长时间，这也有助于确认你是否真正喜欢漏洞挖掘。
   - 如果一个模块曾出现过漏洞，那么它可能存在更多漏洞。可以通过“变种分析”进一步探索，例如 macOS XPC 提权漏洞。
   - 参考资料：
     - 《盘古越狱工具在用户空间的行为》
     - 《iOS 8.1.2 越狱过程详解及相关漏洞分析》

4. **检验自己的能力**：
   - 当感觉自己掌握了大部分漏洞类型后，可以通过发现 N-Day 漏洞来检验自己的能力。
   - 方法可以是个人或团队合作。

5. **逆向及调试**：
   - 在学习错误类型和调试历史漏洞时，可能会涉及逆向工程。
   - 对于漏洞挖掘，逆向和调试只是技术手段，而不是最终目的。

#### 静态分析
1. **强化逆向能力**：
   - 选择一个缺乏文档且规模适中的功能进行逆向分析。
   - 建议初学者不要选择 C++ 程序。
   - 参考资料：
     - 《逆向 iOS SDK – +[UIImage imageNamed:] 的实现》
     - 《逆向 iOS SDK – “添加本地通知”的流程分析》

2. **汇编分析**：
   - 在逆向分析过程中，边看汇编代码边查手册，并对每一行汇编进行注释。
   - 汇编代码非常底层，间接反映了开发者的意图。不要被汇编淹没，要尝试理解开发者的意图。

#### 动态分析
1. **调试分析**：
   - 有些程序状态无法通过静态分析获得，因此需要调试分析。
   - 调试是对逆向的补充，可以帮助解决疑惑。
   - 掌握使用调试器解决问题的方法与思路，而不是死记硬背命令和参数。
   - 参考资料：
     - 《Advanced Apple Debugging & Reverse Engineering》

2. **调试方案**：
   - 在调试之前，应制定一个调试方案，明确希望通过调试了解什么，设置哪些断点，关注哪些寄存器值和跳转分支。
   - 练习方法：结合前面逆向分析的模块，使用调试器获取静态分析时难以确定的信息，并验证静态分析结果。

#### 漏洞挖掘方法
1. **审计**：
   - 工程人员主要使用两种方法来挖掘漏洞：审计和模糊测试。
   - 审计分为两种方式：
     - 以功能为主：一对多。功能是“一”，错误类型是“多”。需要熟练掌握各种错误类型。
     - 以错误类型为主：变种分析。错误类型为“一”，功能是“多”。这种方法相对轻松。

2. **模糊测试**：
   - 模糊测试是一种软件测试技术，通过将自动生成的随机数据输入程序，监视异常如崩溃、断言失败等，以发现潜在的程序错误。
   - 模糊测试非常适合开发人员，可以利用他们的现有经验。
   - 常用的模糊测试方法包括 Coverage Guided Fuzzing 和各种 Sanitizer（如 AddressSanitizer）。
   - 常用的模糊测试工具包括 AFL、AFL++、libFuzzer、Honggfuzz、Peach Fuzzer、libFuzzer + libprotobuf-mutator 和 syzkaller。
   - 体验方法：跟随网上的教程学习如何使用工具（如 AFL 或 libFuzzer），选择一个目标（建议选择老版本），应用 Fuzz 工具。
   - 应用方法：根据经验和兴趣选择一个目标，如果目标接口不适合模糊测试，则对其进行封装，使其适合模糊测试，最后进行模糊测试。分析哪些程序使用了目标库，并向 SRC 报告发现的问题。

#### 结语
- 漏洞挖掘研究的是可以用于突破安全边界的编程错误。
- 核心方法论是专注和实操。
- 分清楚技术手段和技术目的，要有技术方向感。
- 模糊测试比较适合开发人员。
- 当方向和方法正确时，剩下的交给时间。

#### 参考
1. Thomas Dullien, Fundamentals of security exploits
2. Thomas Dullien, Why I Love Offensive Work, Why I don't Love Offensive Work
3. http://www.winimage.com/zLibDll/unzip101e.zip
4. https://zh.wikipedia.org/wiki/%E6%A8%A1%E7%B3%8A%E6%B5%8B%E8%AF%95

如有任何意见及反馈，请联系：proteas[DOT]wang[AT]gmail[DOT]com