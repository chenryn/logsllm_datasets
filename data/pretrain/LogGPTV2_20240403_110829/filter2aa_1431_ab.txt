• 目标一旦选定，建议一年内不要改变。
如何转到漏洞挖掘 – 确定目标
• iOS 沙盒逃逸。
• Android Binder 相关的漏洞。
• macOS XPC 漏洞。
• Linux 用户空间提权。
• 虚拟化产品的逃逸。
• ……
如何转到漏洞挖掘 – 编程错误
• 首先要掌握通用的错误类型。
•
《 The Art of Software Security Assessment 》，by Mark Dowd
• 重点关注其中的错误类型。
• 也可以阅读其它书籍与资料，
• 重点仍然是关注错误类型。
• GP0：https://bugs.chromium.org/p/project-zero/issues/list?q=&can=1
如何转到漏洞挖掘 – 编程错误
• 每天积累、关注错误类型。
• 关注每天安全动态中提及的漏洞的错误类型：
– https://weibo.com/360adlab?is_all=1
– https://weibo.com/xuanwulab?is_all=1
• 关注 Twitter 上漏洞相关信息中的错误类型。
• 总之，丰富自己所掌握的错误类型，
• 强化自己对编程错误的识别能力。
如何转到漏洞挖掘 – 编程错误
• 根据你选择的目标，
• 寻找其历史漏洞。
• 可以选择一个有公开利用的历史漏洞，
• 重点调试分析。
如何转到漏洞挖掘 – 编程错误
• #调试分析历史漏洞#
• 可以让我们了解：
– 所涉及的领域知识，
– 对目标漏洞有更深的理解，
– 对利用有一定理解。
• 分析的第一个漏洞，需要的时间比较长。
• 也可以通过这个过程看看自己是否真的喜欢漏洞
挖掘。
如何转到漏洞挖掘 – 编程错误
• #调试分析历史漏洞#
• 如果一个模块出过漏洞，
• 那它里面存在其它漏洞的可能性更大。
• 另外，可以进行“变种分析”。
• 例子：macOS XPC 提权漏洞。
•
《盘古越狱工具在用户空间的行为 》
•
《iOS 8.1.2 越狱过程详解及相关漏洞分析》
如何转到漏洞挖掘 – 编程错误
• 感觉自己掌握了大部分漏洞类型后，
• 可以通过发现 N-Day 去检验下自己的能力。
• 方法：
– 个人。
– 团队。
如何转到漏洞挖掘 – 编程错误
• 在学习错误类型以及调试历史漏洞时，
• 可能会涉及逆向及调试。
• 对于漏洞挖掘，
• 逆向与调试只是技术手段，
• 不是技术目的。
如何转到漏洞挖掘 – 静态分析
• 强化逆向能力的一个方法：
– 选择一个缺少文档，
– 规模合适的功能，
– 对其进行逆向分析。
• 建议：初学者不要选择 C++ 程序。
如何转到漏洞挖掘 – 静态分析
• 在逆向分析的过程中，
• 边看汇编，边查手册，
• 对每一行汇编进行注释。
•
《逆向 iOS SDK – +[UIImage imageNamed:] 的实现》
•
《逆向 iOS SDK – “添加本地通知”的流程分析》
如何转到漏洞挖掘 – 静态分析
• 建议：
– 汇编是非常 Low Level 的，
– 汇编间接反应的是开发者的目的，
– 不要被汇编淹没，
– 只见树木不见森林，
– 要尝试去了解开发者的意图。
如何转到漏洞挖掘 – 动态分析
• 程序的有些状态无法静态获得，
• 因此需要调试分析，
• 调试是对逆向的补充、解惑。
如何转到漏洞挖掘 – 动态分析
• 调试器有大量的命令与参数，
• 不要去死记这些命令与参数。
如何转到漏洞挖掘 – 动态分析
• 大家可以先略读一本调试相关的书籍，
• 掌握使用调试器解决问题的方法与思路。
• 调试器是工具，
• 调试是技术手段，
• 不是技术目的。
如何转到漏洞挖掘 – 动态分析
•
《Advanced Apple Debugging & Reverse Engineering》
如何转到漏洞挖掘 – 动态分析
• 调试之前应该想一个调试“方案”：
– 想通过调试了解、确定什么？
– 在哪些地址设置断点？
– 断点命中后，关注哪些寄存器的值？
– 关注哪些跳转、分支？
如何转到漏洞挖掘 – 动态分析
• 练习方法：
• 可以结合前面逆向分析的模块，
– 使用调试器去获得在逆向时：
• 无法获得的信息，
• 或者不容易确定的信息。
– 在调试器的帮助下，去验证静态分析的结果。
如何转到漏洞挖掘 – 方法
• 工程人员主要使用两种方法来挖掘漏洞：
– 审计
– 模糊测试（Fuzzing）
• 前面我们不断强调错误类型，
• 因为这是进行审计的基础。
如何转到漏洞挖掘 – 审计
• 以功能为主：一对多
– 功能是“一”，
– 错误类型是“多”。
– 需要熟练掌握各种错误类型。
如何转到漏洞挖掘 – 审计
• 以错误类型为主：变种分析
– 错误类型为一，
– 功能是多。
• 使用这种方法，
• 审计过程相对比较轻松。
如何转到漏洞挖掘 – 模糊测试
模糊测试 （fuzz testing, fuzzing）是一种软件测试技术。
其核心思想是将自动或半自动生成的随机数据输入到一个程
序中，并监视程序异常，如崩溃，断言（assertion）失败，
以发现可能的程序错误，比如内存泄漏。模糊测试常常用于
检测软件或计算机系统的安全漏洞。
如何转到漏洞挖掘 – 模糊测试
• 模糊测试非常适合开发人员，
• 可以利用开发人员的现有经验，
• 发挥出开发人员的优势。
如何转到漏洞挖掘 – 模糊测试
• 目前效果比较好的模糊测试方法是：
– Coverage Guided Fuzzing。
– 各种 Sanitizer，如：AddressSanitizer。
如何转到漏洞挖掘 – 模糊测试
• 目前常用的模糊测试工具：
– AFL，AFL++
– libFuzzer
– Honggfuzz
– Peach Fuzzer
– libFuzzer + libprotobuf-mutator
– syzkaller
如何转到漏洞挖掘 – 模糊测试
• 体验：
– 先跟随网上的 Step-by-Step，
– 去学习如何使用工具（如：AFL 或者 libFuzzer），
– 然后选一个目标（建议选老版本），
– 应用 Fuzz 工具。
如何转到漏洞挖掘 – 模糊测试
• 应用：
– 根据自己的经验、兴趣选择一个目标，
– 目标的接口不一定适合做模糊测试，
– 对已有接口做封装，
– 使其适合模糊测试，
– 最后进行模糊测试。
• 分析哪些程序使用了目标库，
• 向其 SRC 报告发现的问题。
结语
• 漏洞挖掘研究的是：可以用于突破安全边界的编程错误。
• 核心方法论：专注 + 实操。
• 分清楚技术手段与技术目的，要有技术方向感。
• 模糊测试比较适合开发人员。
• 当方向与方法对了后，剩下的交给时间。
参考
1.
Thomas Dullien, Fundamentals of security exploits
2.
Thomas Dullien, Why I Love Offensive Work, Why I don't Love Offensive Work
3.
http://www.winimage.com/zLibDll/unzip101e.zip
4.
https://zh.wikipedia.org/wiki/%E6%A8%A1%E7%B3%8A%E6%B5%8B%E8%AF%95
谢谢！
意见及反馈：proteas[DOT]wang[AT]gmail[DOT]com