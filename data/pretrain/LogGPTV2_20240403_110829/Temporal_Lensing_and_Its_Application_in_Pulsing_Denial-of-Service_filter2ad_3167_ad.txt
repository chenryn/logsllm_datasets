shortly before the ﬁrst appearance of attack packets.
(a) Azure Instance
(b) AWS Instance
Figure 10: Proportion of unaccounted packets as a function of
attacker’s maximum bandwidth by instance.
Figure 11: Queries for performing King’s cache poisoning
technique (reprinted with permission). Dotted lines represent
queries to warm up caching of the NS record. Thick lines
reﬂect measurement of the attack path RTT.
do not react to the ICMP, and instead time out, leaving us with
no latency data. In short, we expect this reﬁnement of King to
allow better estimation of path latencies to many more types
of hosts than just DNS servers.
DNS co-location. Lastly, attackers can attempt to ﬁnd a
DNS server co-located with the actual victim. As noted in
[8], this occurs relatively commonly, but may introduce errors
in latency measurements. However, if the same error arises
for each attack path (as we would expect for a DNS server in
the same network as the victim), then it will not disrupt the
actual pulses. Each reﬂected packet will arrive at the victim
at a constant offset from when expected, but still at the same
time as the others.
B. Ampliﬁcation
A natural extension to concentrating a ﬂood in time is
to additionally make the ﬂood larger via ampliﬁcation. Both
ampliﬁcation and lensing can compatibly leverage open DNS
resolvers as reﬂectors—indeed, attackers already use resolvers
in ampliﬁcation attacks. Attackers could estimate attack path
latencies using the methods we adapted from King and during
their actual attack use the same reﬂectors for ampliﬁcation.
In such a scenario, the attacker would gain the best of
both worlds. For example, an ampliﬁcation factor of 15 and
a lensing bandwidth gain of 10 could, at its worst, allow an
attacker to create pulses at 150 times the attacker’s uplink
bandwidth!
Note that the form of lensing we have explored does not
need source address spooﬁng to enable reﬂection; instead it
relies upon recursive queries. However, DNS-based ampliﬁca-
tion does require spooﬁng. While spooﬁng should readily work
with lensing, we refrained from assessing it both for simplicity
and to avoid confusing analysts potentially investigating our
196
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:05:02 UTC from IEEE Xplore.  Restrictions apply. 
Time (ms)020040060080010001200Number of PacketsPackets Leaving Attacker05001000150020002500Time (ms)020040060080010001200Number of PacketsPackets Arriving at Victim01020304050Attacker Max Bandwidth (thousand pps)0.000.020.040.060.080.100.12Packet Loss Proportion01020304050Attacker Max Bandwidth (thousand pps)0.000.050.100.150.200.250.30Packet Loss Proportiontrafﬁc.
Forwarders (discussed in § II) introduce a potential dif-
ﬁculty for estimating attack path latencies in ampliﬁcation
attacks. If the resolver the attacker contacts is indeed a for-
warder rather than a full resolver, then the attack path latency
measurements will span two intermediary hops between the
attacker and the target
instead of just one. This problem
did not arise for our experiments, since our emulated attack
trafﬁc followed the same path as the latency measurements
(attacker ⇒ forwarder ⇒ resolver ⇒ victim). However, in an
ampliﬁcation attack we would expect the attacker to place a
large query response in each reﬂector’s cache. If cached at a
forwarder, then the path of the actual attack trafﬁc will skip the
forwarder ⇒ resolver hop, which may or may not introduce
a signiﬁcant latency discrepancy.
Turbo King [13] identiﬁed this issue and added the ability
to King to detect forwarders, essentially by positioning them-
selves at both ends of the DNS query (in our example, as
attacker and target). An attacker who sets up a personal DNS
server can do the same: identify potential forwarders, measure
the error they introduce, and weed them out as needed.
C. Distributed attacks
Another natural extension would be to employ a number
of geographically distributed machines to attempt to “add”
their pulses together at the victim. Doing so would require
relatively accurate time synchronization between the attack
seeders, depending on the desired pulse width. Our preliminary
experimentation with performing such synchronization with
NTP found that its precision sufﬁces to reliably create pulses
for 40 ms window sizes for attackers located across continents
(North America and Europe in our tests). For smaller windows,
such as 20 ms, NTP synchronization becomes less reliable.
Thus, an attacker can distribute lensing if they do not need
a particularly narrow window, but will lose some efﬁciency
squeezing distributed attacks into smaller window sizes.
D. Bolstering the bandwidth gain
Increasing the attack-path latency. Higher attack path
latencies give an attacker a longer period over which to send
and thus funnel bandwidth. In our measurements the longest
attack path latencies we ﬁnd were around 800 ms. However,
a way exists to extend the time a query takes while still
keeping the time predictable. If the attacker uses spooﬁng as
the reﬂection mechanism, then for each resolver the attacker
can send it a query that will cause it in turn to issue another
query that will take a long time (for example, by needing to
contact a distant8 name server), thus delaying the resolvers
ﬁnal “reply” to the victim by a considerable amount of time.
Similarly, the attacker might induce a query to a DNS server
that does not respond, causing the resolver to time out and
only then send a negative response to the victim. The attacker
8One can probably ﬁnd many misconﬁgured DNS entries to aid in this
regard. Also, an attacker can intentionally misconﬁgure a personal DNS server
to this end, for example by adding an NS entry to a server that will not
respond.
can likely measure the delay added by such timeouts with high
precision.
Retransmits. As shown in Figures 4b and 4c, resolver
retransmits can create secondary pulses of their own. The most
prevalent timeouts we observed were 800 msec and 2 sec.
An attacker can predetermine which timeouts predominate
among their set of resolvers and arrange to send pulses at a
period matching these timeouts. New pulses will coincide with
pulses generated from by retransmissions for previous pulses,
essentially superimposing the two and boosting the bandwidth
gain.
This attack however does not work when combined with
spooﬁng (for ampliﬁcation), since in that case trafﬁc reﬂected
off of the resolver consists of responses (rather than queries),
and resolvers will not retransmit responses.
VIII. DEFENSES
In this section we analyze possible defenses against lens-
ing attacks: preventing the initial reconnaissance phase, and
undermining the attack itself.
Detecting and thwarting reconnaissance. A potential
target could readily detect our King-style reconnaissance mea-
surements (for obtaining attack path latencies) due to their
noisy nature, as they exhibit a clear signature in terms of
repeated queries for non-existent subdomains. Attackers could
however potentially hide their presence by making queries for
legitimate subdomains, since our experiences show that 10 or
fewer queries per resolver sufﬁces, so the attacker would just
need to ﬁnd a few unique domain names.
The victim could possibly thwart reconnaissance by poi-
soning attack path RTT measurements, for example by intro-
ducing artiﬁcial jitter. Simply adding random delay to each
request will only slow the attacker down, since by gathering
more measurements they can likely employ robust statistics
to remove the noise. The victim might instead introduce an
amount of jitter ﬁxed as a function of the reﬂector’s address,
ideally using a function keyed so that knowing one jitter would
not reveal information of another.
However,
in response to either of these approaches the
attacker might instead make measurements to a nearby server
not under the victim’s control. In this case, the victim may
well lack any opportunity to detect reconnaissance or introduce
jitter.
Resisting attacks. Signiﬁcant work exists on defending
against pulsing DoS attacks, much of which has application
to lensing as well, including RTO randomization [5], [11],
[22], extensions to RED [23], and increasing buffer sizes [17].
Increased buffering would likely manifest similar to Azure’s
pulse spreading (illustrated in Figure 9) and consequent de-
creased packet loss compared to AWS (in Figure 10). This
defense is not complete, however, as (a) it requires signiﬁcant
buffer sizes, and (b) legitimate trafﬁc will still suffer a latency
hit.
Regarding defending speciﬁcally against the lensing side
of our attack, a potential defense again revolves around
introducing jitter. Routers might somehow add jitter during
197
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:05:02 UTC from IEEE Xplore.  Restrictions apply. 
Zayd Enam for fruitful discussions and generously allowing
use of his dedicated machine for bandwidth testing. Thanks too
to our shepherd, Vyas Sekar, and the anonymous reviewers for
their helpful comments. This work was supported by National
Science Foundation grant 1237265, for which we are grateful.
Opinions expressed in this work are those of the authors and
not the sponsor.
REFERENCES
[1] Public DNS
Server
List, May
2014.
Available
at
http://public-dns.tk/.
[2] AUGUSTIN, B., CUVELLIER, X., ORGOGOZO, B., VIGER, F., FRIED-
MAN, T., LATAPY, M., MAGNIEN, C., AND TEIXEIRA, R. Avoiding
In Proc. ACM Internet
traceroute anomalies with Paris traceroute.
Measurement Conference (2006).
[3] BRADEN, R. RFC 1122: Requirements for Internet Hosts.
[4] DABEK, F., COX, R., KAASHOEK, F., AND MORRIS, R. Vivaldi: A
Decentralized Network Coordinate System. In Proc. SIGCOMM (2004),
vol. 34.
[5] EFSTATHOPOULOS, P. Practical Study of a Defense Against Low-rate
TCP-targeted DoS Attack. In ICITST (2009), IEEE, pp. 1–6.
[6] FRANCIS, P., JAMIN, S., JIN, C., JIN, Y., RAZ, D., SHAVITT, Y.,
AND ZHANG, L. IDMaps: A Global Internet Host Distance Estimation
Service. IEEE/ACM Transactions on Networking 9, 5 (2001).
[7] GUIRGUIS, M., BESTAVROS, A., MATTA, I., AND ZHANG, Y. Reduc-
tion of Quality (RoQ) Attacks on Internet End-systems. In Proc. IEEE
INFOCOM (2005).
[8] GUMMADI, K. P., SAROIU, S., AND GRIBBLE, S. D. King: Estimating
Latency Between Arbitrary Internet End Hosts. In Proc. ACM Internet
Measurment Workshop (2002).
[9] KANG, M. S., LEE, S. B., AND GLIGOR, V. D. The Crossﬁre Attack. In
Security and Privacy (SP), 2013 IEEE Symposium on (2013), pp. 127–
141.
[10] KOGLER, T. M. Single Gun, Multiple Round, Time-on-Target Capability
for Advanced Towed Cannon Artillery. Tech. rep., US Army Research
Laboratory, Aberdeen Proving Ground, 1995.
[11] KUZMANOVIC, A., AND KNIGHTLY, E. W. Low-rate TCP-targeted
Denial of Service attacks: The Shrew vs. the Mice and Elephants. In
Proc. ACM SIGCOMM (2003).
[12] LE, H. B. Advanced Naval Surface Fire Support Weapon Employment
Against Mobile Targets. Tech. rep., Naval Postgraduate School, Mon-
terey, Calif., 1999.
[13] LEONARD, D., AND LOGUINOV, D. Turbo King: Framework for Large-
scale Internet Delay Measurements. In Proc. IEEE INFOCOM (2008).
[14] LUO, X., AND CHANG, R. K. On a New Class of Pulsing Denial-of-
Service Attacks and the Defense. In Proc. NDSS (2005).
[15] NG, T. E., AND ZHANG, H. Predicting Internet Network Distance with
Coordinates-Based Approaches. In Proc. IEEE INFOCOM (2002).
[16] PAXSON, V. An Analysis of Using Reﬂectors for Distributed Denial-
of-Service Attacks. ACM SIGCOMM CCR 31, 3 (2001).
[17] SARAT, S., AND TERZIS, A. On the Effect of Router Buffer Sizes on
Low-rate Denial of Service Attacks. In Proc. Computer Communications
and Networks (2005).
[18] SCHOMP, K., CALLAHAN, T., RABINOVICH, M., AND ALLMAN, M.
In Proc. ACM
On Measuring the Client-Side DNS Infrastructure.
Internet Measurement Conference (2013).
[19] SHARMA, P., XU, Z., BANERJEE, S., AND LEE, S.-J. Estimating
Network Proximity and Latency. ACM SIGCOMM CCR 36, 3 (2006),
39–50.
[20] WEIGLEY, R. Eisenhower’s Lieutenants: The Campaigns of France and
Germany, 1944–45. Indiana University Press, 1981.
[21] WONG, B., SLIVKINS, A., AND SIRER, E. G. Meridian: A Lightweight
Network Location Service without Virtual Coordinates. In Proc. SIG-
COMM (2005), vol. 35.
[22] YANG, G., GERLA, M., AND SANADIDI, M. Defense Against Low-rate
TCP-targeted Denial-of-Service Attacks. In ISCC (2004), vol. 1, IEEE,
pp. 345–350.
[23] ZHANG, C., YIN, J., CAI, Z., AND CHEN, W. RRED: Robust RED
Algorithm to Counter Low-rate Denial-of-Service Attacks. Communi-
cations Letters 14, 5 (2010), 489–491.
[24] ZHANG, Y., MAO, Z. M., AND WANG, J. Low-Rate TCP-Targeted DoS
Attack Disrupts Internet Routing. In NDSS (2007).
Figure 12: Pulse degradation upon the addition of artiﬁcial
jitter (pulse window = 20 ms, sending rate = 10K pps).
an attack, possibly keyed off of ﬂow 5-tuples to prevent intra-
ﬂow reordering of legitimate trafﬁc. Indeed, in principle such
an approach has effects similar to those of multipathing [2].
Figure 12 shows how this might play out. Here we added
uniformly distributed jitter to an emulated attack’s sending
schedule, essentially providing the same effect as routers
adding jitter would have. The graph indicates that cutting a
relatively small window pulse of 20 ms in half would require
adding jitter of 60 ms (i.e., uniformly distributed in the range
0–60 ms) to the attack path.
In short, it appears that attackers can readily hide their
reconnaissance from their targets. Mitigating actual lensing
attacks would require somehow changing attack path latencies
during the attack, but requires the addition of a signiﬁcant
amount of jitter (which would itself severely impair real-
time trafﬁc). These issues suggest that more general defenses
against pulsing attacks (such as improving TCP congestion
control robustness) might offer the most promise, rather than
speciﬁcally attempting to counter the timing-based nature of
lensing attacks.
IX. SUMMARY
We have introduced the concept of temporal lensing, which
lends itself quite naturally to conducting pulsing DoS attacks.
Using DNS recursion to both estimate attack path latencies
and to create pulses from relatively low-bandwidth ﬂoods,
we experimentally demonstrated its practicality and explored
its scaling properties. In addition to its direct application to
ﬂooding a victim’s DNS server, we sketch how attackers
can likely distribute attacks and employ lensing for non-
DNS targets. We also explored mechanisms for increasing the
bandwidth gain further. We ﬁnd that lensing by itself allows
attackers to concentrate the bandwidth of a ﬂood by an order of
magnitude. Given these results, lensing’s further compatibility
with ampliﬁcation, and the difﬁculties that arise in constructing
defenses, the attack appears to pose a signiﬁcant threat.
X. ACKNOWLEDGMENTS
We are grateful to Mark Allman for much helpful advice
especially on forwarders. We also thank Ethan Jackson for
valuable insight on pinpointing packet loss on VMs and S.
198
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:05:02 UTC from IEEE Xplore.  Restrictions apply. 
0100200300400500600Maximum Jitter Added (ms)020406080100120Peak Bandwidth (kpps)