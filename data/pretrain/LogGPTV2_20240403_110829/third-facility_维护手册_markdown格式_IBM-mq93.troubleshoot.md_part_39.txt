//
public void AddBindingParameters(ServiceDescription serviceDescription,
ServiceHostBase serviceHostBase, CollectionServiceEndpoint endpoints,
BindingParameterCollection bindingParameters)
{
}
public void ApplyDispatchBehavior(ServiceDescription serviceDescription,
ServiceHostBase serviceHostBase)
{
foreach (ChannelDispatcher channelDispatcher in serviceHostBase.ChannelDispatchers)
{
channelDispatcher.ErrorHandlers.Add(this);
}
IBM MQ troubleshooting and support 243
}
public void Validate(ServiceDescription serviceDescription, ServiceHostBase
serviceHostBase)
{
}
//
// IErrorHandler Interface
//
public bool HandleError(Exception e)
{
// Process the exception in the required way, in this case just outputting to the
console
Console.Out.WriteLine(e);
// Always return false to allow any other error handlers to run
return false;
}
public void ProvideFault(Exception error, MessageVersion version, ref Message fault)
{
}
}
Troubleshooting XMS .NET problems
Troubleshooting information to help you solve a problem with running XMS .NET applications.
Related tasks
“Tracing XMS .NET applications” on page 468
If you are using IBM MQ classes for XMS .NET Framework, you can configure trace from an application
configuration file as well as from the XMS environment variables. If you are using IBM MQ classes for
XMS .NET (.NET Standard and .NET 6 libraries), you must configure trace from the XMS environment
variables. You can select the components that you want to trace. Trace is normally used under the
guidance of IBM Support.
“Contacting IBM Support” on page 301
If you need help with a problem that you are having with IBM MQ, you can contact IBM Support through
the IBM Support Site. You can also subscribe to notifications about IBM MQ fixes, troubleshooting, and
other news.
“Troubleshooting IBM MQ .NET problems” on page 94
Troubleshooting information to help you solve a problem with running IBM MQ .NET applications.
Developing XMS .NET applications
Troubleshooting tips for XMS .NET problems
Use these tips to help you troubleshoot problems with using XMS .NET.
An XMS application cannot connect to a queue manager (MQRC_NOT_AUTHORIZED)
The XMS .NET client may have different behavior from the behavior of the IBM MQ JMS client. Therefore,
you may find that your XMS application cannot connect to your queue manager, although your JMS
application can.
• A simple solution to this problem is to try using a user ID that is no more than 12 characters long and is
authorized completely in the queue manager's authority list. If this solution is not ideal, a different but
more complex approach would be to use security exits. If you need further help on this issue, contact
IBM Support for assistance.
• If you set the XMSC_USERID property of the connection factory, it must match the user ID and
password of the logged on user. If you do not set this property, the queue manager uses the user
ID of the logged on user by default.
• User authentication for IBM MQ is performed by using the details of the user currently logged on
and not the information provided in the XMSC.USERID and XMSC.PASSWORD fields. This is designed
to maintain consistency with IBM MQ. For more information on authentication, see Connection
authentication.
244 Troubleshooting and Support for IBM MQ
Connection redirected to the messaging engine
When you connect to a WebSphere Application Server 6.0.2 service integration bus, all connections may
be redirected from the original provider endpoint to the messaging engine that the bus chooses for that
client connection. When doing so, it will always redirect the connection to a host server specified by the
host name, rather than by an IP address. Therefore, you may experience connection problems if the host
name cannot be resolved.
To successfully connect to WebSphere Application Server 6.0.2 service integration bus, you may need to
provide a mapping between the host names and IP addresses on your client host machine. For example
you can specify the mapping in a local hosts table on your client host machine.
Support for telnet-like password authentication
The XMS .NET Real Time Transport protocol supports only simple telnet-like password authentication.
The XMS .NET Real Time Transport protocol does not support Quality Of Protection.
Setting values for property type double
On a Windows 64-bit platform, the SetDoubleProperty() or GetDoubleProperty() methods may not work
correctly when setting or getting values for the property type double, if the values are smaller than
Double.Epsilon.
For example, if you try to set a value of 4.9E-324 for a property with type double, the Windows 64-bit
platforms treat it as 0.0. So, in a distributed messaging environment, if a JMS or another application sets
the value for a double property as 4.9E-324 on any AIX, Linux, and Windows, Linux, or Windows 32-bit
machine, and XMS .NET runs on a 64-bit machine, the value returned by GetDoubleProperty() is 0.0. This
is a known issue with Microsoft .NET Framework 2.0.
Related tasks
Developing XMS .NET applications
Resolving FileLoadException errors for
amqmxmsstd.dll
From IBM MQ 9.3.1, if you try to run a .NET Framework application using the .NET 6 based
amqmxmsstd.dll client library and the application was compiled using the amqmxmsstd.dll client
library from a version lower than IBM MQ 9.3.1, this causes .NET to throw a FileLoadException error.
About this task
From IBM MQ 9.3.1, the amqmxmsstd.dll client library installed in the default location is based on .NET
6. The amqmxmsstd.dll client library based on .NET Standard has been moved to a new location in the
IBM MQ client installation package and is now available in the following locations:
• On Windows: MQ_INSTALLATION_PATH\bin\netstandard2.0
• On Linux: MQ_INSTALLATION_PATH\lib64\netstandard2.0
From IBM MQ 9.3.1, a new warning CS0618 is thrown to an application during compile time
when IBM MQ .NET Standard libraries are referenced to the application. The IBM MQ .NET Standard
libraries are deprecated, and IBM intends to remove them in a future IBM MQ release.
If a .NET Framework application is compiled using amqmxmsstd.dll from a version lower than IBM MQ
9.3.1 and the same application is run using the .NET 6 based IBM MQ client library, then the following
FileLoadException type of exception is thrown by .NET:
Exception caught: System.IO.FileLoadException: Could not load file or assembly
'amqmdnetstd, Version=x.x.x.x, Culture=neutral, PublicKeyToken=23d6cb914eeaac0e' or
one of its dependencies. The located assembly's manifest definition does not match the
assembly reference. (Exception from HRESULT: 0x80131040)
IBM MQ troubleshooting and support 245
File name: 'amqmdnetstd, Version=x.x.x.x, Culture=neutral,
PublicKeyToken=23d6cb914eeaac0e'
Procedure
• To resolve the FileLoadException error, copy the amqmxmsstd.dll library present in
MQ_INSTALLATION_PATH/bin/netstandard2.0 to the directory from where the .NET Framework
application is running.
Related tasks
Using IBM MQ classes for XMS .NET
Common SSL error codes thrown by XMS .NET client libraries
From IBM MQ 9.3.3, improvements to the XMS .NET client (amqmxmsstd.dll) diagnostic messages
provide a more specific exception mechanism for SSL-related issues.
From IBM MQ 9.3.3, the XMS .NET client libraries provide meaningful and specific errors for SSL-related
errors. The MQRC reason codes are in line with the other .NET client libraries, such as C.
The following table shows some of the many scenarios where, from IBM MQ 9.3.3, XMS .NET client
libraries throw errors that are aligned with other client .NET libraries:
Table 7. Comparison of error messages
Scenario Error message before IBM MQ Error message from IBM MQ
9.3.3 9.3.3
When the parameter provided for 2059 – 2381 –
the SSL key repository, MQRC_Q_MGR_NOT_AVAILABLE MQRC_KEY_REPOSITORY_ERRO
MQC.MQCA_SSL_KEY_REPOSITO R
RY or
MQEnvironment.SSLKeyReposito
ry, is given incorrectly.
When an invalid cipher suite is 2538 – 2393 –
set on the client while connecting MQRC_HOST_NOT_AVAILABLE MQRC_KEY_REPOSITORY_ERRO
to the IBM MQ server using SSL. R
When an invalid peer name is set 2059 – 2399 –
on the client while connecting to MQRC_Q_MGR_NOT_AVAILABLE MQRC_SSL_PEER_NAME_ERROR
the IBM MQ server using SSL.
When peer names do not match 2059 – 2398 –
while connecting to the IBM MQ MQRC_Q_MGR_NOT_AVAILABLE MQRC_SSL_PEER_NAME_ERROR
server using SSL.
When an invalid certificate is set 2059 – 2393 –
on either the client or server MQRC_Q_MGR_NOT_AVAILABLE MQRC_KEY_REPOSITORY_ERRO
during the SSL handshake. R
When the channel that is used 2059 – 2393 –
to provide an SSL connectivity MQRC_Q_MGR_NOT_AVAILABLE MQRC_KEY_REPOSITORY_ERRO
between the client and server R
does not provide a cipher suite.
When there is a mismatch 2059 – 2393 –
between the cipher suite MQRC_Q_MGR_NOT_AVAILABLE MQRC_KEY_REPOSITORY_ERRO
algorithms set from the client R
and the IBM MQ server.
246 Troubleshooting and Support for IBM MQ
Table 7. Comparison of error messages (continued)
Scenario Error message before IBM MQ Error message from IBM MQ
9.3.3 9.3.3
When there is no permission to 2059 – 2393 –
the folder where IBM MQ key MQRC_Q_MGR_NOT_AVAILABLE MQRC_KEY_REPOSITORY_ERRO
repository is created. R
For a more detailed explanation of the errors, refer to the queue manager logs found in
MQ_DATA_DIRECTORY/qmgrs/errors/AMQERR*.log.
Related concepts
Installing IBM MQ classes for .NET
Troubleshooting IBM MQ for z/OS problems
IBM MQ for z/OS, CICS, Db2, and IMS produce diagnostic information which can be used for problem
determination.
About this task
This section contains information about the following topics:
• The recovery actions attempted by the queue manager when a problem is detected.
• IBM MQ for z/OS abends, and the information produced when an abend occurs.
• The diagnostic information produced by IBM MQ for z/OS, and additional sources of useful information.
The type of information provided to help with problem determination and application debugging depends
on the type of error encountered, and the way your subsystem is set up.
See the following subtopics for more information about problem determination and diagnostic
information on IBM MQ for z/OS.
• “IBM MQ for z/OS performance constraints” on page 248
• “IBM MQ for z/OS recovery actions” on page 250
• “IBM MQ for z/OS abends” on page 250
• “Diagnostic information produced on IBM MQ for z/OS” on page 253
• “Other sources of problem determination information for IBM MQ for z/OS” on page 256
• “Diagnostic aids for CICS” on page 257
• “Diagnostic aids for IMS” on page 267
• “Diagnostic aids for Db2” on page 267
• “IBM MQ for z/OS dumps” on page 267
• “Dealing with performance problems on z/OS” on page 288
• “Dealing with incorrect output on z/OS” on page 294
Related concepts
“Using error logs” on page 353
There are a variety of error logs that you can use to help with problem determination and troubleshooting.
“First Failure Support Technology (FFST)” on page 363
First Failure Support Technology (FFST) for IBM MQ provides information about events that, in the case of
an error, can help IBM support personnel to diagnose the problem.
Related tasks
“IBM MQ troubleshooting and support” on page 5
IBM MQ troubleshooting and support 247
If you are having problems with your queue manager network or IBM MQ applications, you can use the
techniques that are described in this information to help you diagnose and solve the problems. If you
need help with a problem, you can contact IBM Support through the IBM Support Site.
“Tracing” on page 375
You can use different types of trace to help you with problem determination and troubleshooting.
IBM MQ for z/OS performance constraints
Use this topic to investigate z/OS resources that can cause performance constraints.
There are a number of decisions to be made when customizing IBM MQ for z/OS that can affect the way
your systems perform. These decisions include:
• The size and placement of data sets
• The allocation of buffers
• The distribution of queues among page sets, and Coupling Facility structures
• The number of tasks that you allow to access the queue manager at any one time
Log buffer pools
Insufficient log buffers can cause applications to wait until a log buffer is available, which can affect IBM
MQ performance. RMF reports might show heavy I/O to volumes that hold log data sets.
There are three parameters you can use to tune log buffers. The most important is OUTBUFF. If the log
manager statistic QJSTWTB is greater than 0, increase the size of the log buffer. This parameter controls
the number of buffers to be filled before they are written to the active log data sets (in the range 1 -
256). Commits and out-of-syncpoint processing of persistent messages cause log buffers to be written
out to the log. As a result this parameter might have little effect except when processing large messages,
and the number of commits or out of sync point messages is low. These parameters are specified in the
CSQ6LOGP macro (see Using CSQ6LOGP for details), and the significant ones are:
OUTBUFF
This parameter controls the size of the output buffer (in the range 40 KB through 4000 KB).
WRTHRSH
This parameter controls the number of buffers to be filled before they are written to the active log
data sets (in the range 1 through 256).
You must also be aware of the LOGLOAD parameter of the CSQ6SYSP macro. This parameter specifies the
number of log records that are written between checkpoint records. The range is 200 through 16 000 000
but a typical value for a large system is 500 000. If a value is too small you receive frequent checkpoints,
which consume processor time and can cause additional disk I/O.
Buffer pool size
There is a buffer pool associated with each page set. You can specify the number of buffers in the buffer
pool using the DEFINE BUFFPOOL command.
Incorrect specification of buffer pool size can adversely affect IBM MQ performance. The smaller the
buffer pool, the more frequently physical I/O is required. RMF might show heavy I/O to volumes that
hold page sets. For buffer pools with only short-lived messages the buffer manager statistics QPSTSLA,
QPSTSOS, and QPSTRIO must typically be zero. For other buffer pools, QPSTSOS and QPSTSTLA must be
zero.
Distribution of data sets on available DASD
The distribution of page data sets on DASD can have a significant effect on the performance of IBM MQ.
248 Troubleshooting and Support for IBM MQ
Place log data sets on low usage volumes with log n and log n+1 on different volumes. Ensure that dual
logs are placed on DASD on different control units and that the volumes are not on the same physical disk.
Distribution of queues on page sets
The distribution of queues on page sets can affect performance. This change in performance can be
indicated by poor response times experienced by transactions using specific queues that reside on
heavily used page sets. RMF reports might show heavy I/O to volumes containing the affected page sets.
You can assign queues to specific page sets by defining storage class (STGCLASS) objects specifying a
particular page set, and then defining the STGCLASS parameter in the queue definition. It is a good idea to
define heavily used queues on different page sets in this way.
Distribution of queues on Coupling Facility structures
The distribution of queues on Coupling Facility structures can affect performance.
A queue sharing group can connect to up to 64 Coupling Facility structures, one of which must be the
administration structure. You can use the remaining 63 Coupling Facility structures for IBM MQ data with
each structure holding up to 512 queues. If you need more than one Coupling Facility structure, separate
the queues across several structures based on the function of the queue.
There are some steps you can take to maximize efficiency:
• Delete any Coupling Facility structures you no longer require.
• Place all the queues used by an application on the same Coupling Facility to make application
processing efficient.
• If work is particularly performance sensitive, choose a faster Coupling Facility structure.
Consider that if you lose a Coupling Facility structure, you lose any non-persistent messages stored in it.
The loss of these non-persistent messages can cause consistency problems if queues are spread across
various Coupling Facility structures. To use persistent messages, you must define the Coupling Facility
structures with at least CFLEVEL(3) and RECOVER(YES).
Limitation of concurrent threads
The number of tasks accessing the queue manager can also affect performance, particularly if there are
other constraints, such as storage, or there are many tasks accessing a few queues. The symptoms can be
heavy I/O against one or more page sets, or poor response times from tasks known to access the same
queues. The number of threads in IBM MQ is limited to 32767 for both TSO and Batch.
In a CICS environment, you can use CICS MAXTASK to limit concurrent access.
Using the IBM MQ trace for administration
Although you might have to use specific traces on occasion, using the trace facility has a negative effect
on the performance of your systems.
Consider what destination you want your trace information sent to. Using the internal trace table saves
I/O, but it is not large enough for traces that produce large volumes of data.
The statistics trace gathers information at intervals. The intervals are controlled by the STATIME
parameter of the CSQ6SYSP macro, described in Using CSQ6SYSP. An accounting trace record is
produced when the task or channel ends, which might be after many days.
You can limit traces by class, resource manager identifier (RMID), and instrumentation facility identifier
(IFCID) to reduce the volume of data collected. See START TRACE for more information.
IBM MQ troubleshooting and support 249
IBM MQ for z/OS recovery actions
Use this topic to understand some of the recovery actions for user detected and queue manager detected
errors.
IBM MQ for z/OS can recover from program checks caused by incorrect user data. A completion and
reason code are issued to the caller. These codes are documented in IBM MQ for z/OS messages,
completion, and reason codes.