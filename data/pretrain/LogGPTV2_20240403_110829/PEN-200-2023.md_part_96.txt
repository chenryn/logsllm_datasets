### Resource Scripts in Metasploit

The following list shows the resource scripts provided by Metasploit, along with their file sizes and last modification dates:

- `portscan.rc` (2419 bytes, July 14, 12:06)
- `run_all_post.rc` (1251 bytes, July 14, 12:06)
- `smb_checks.rc` (3084 bytes, July 14, 12:06)
- `smb_validate.rc` (3837 bytes, July 14, 12:06)
- `wmap_autotest.rc` (2592 bytes, July 14, 12:06)

These resource scripts are designed for various tasks such as port scanning, brute-forcing, and protocol enumeration. Before using these scripts, it is essential to thoroughly examine, understand, and modify them to fit your specific needs.

#### Global Datastore and Options

Some of these scripts utilize the global datastore of Metasploit to set options like `RHOSTS`. When you use the `set` or `unset` commands, you define options within the context of a running module. However, you can also set global options that apply across all modules using `setg` and `unsetg`.

#### Automating Penetration Tests

Resource scripts can be very useful for automating parts of a penetration test. You can create a set of resource scripts for repetitive tasks and operations, prepare them, and then modify them for each penetration test. For example, you can prepare resource scripts for setting up listeners, pivoting, post-exploitation, and more. Using these scripts across multiple tests can save a significant amount of time.

### Summary of Key Points

In this section, we covered the following:

1. **Introduction to Resource Scripts**: We familiarized ourselves with the resource scripts provided by Metasploit.
2. **Creating a Custom Resource Script**: We created our own resource script to automate the setup process of a `multi/handler` listener.
3. **Executing the Resource Script**: We executed the resource script and a corresponding executable file to receive an incoming Meterpreter reverse shell, which migrated itself to a newly spawned Notepad process.

### Wrapping Up

In this module, we explored various features, modules, and capabilities of Metasploit. We started by getting familiar with the framework and how to use auxiliary and exploit modules. We then discussed different types of payloads available in Metasploit and `msfvenom`. Next, we covered post-exploitation features and modules with Meterpreter and how to use pivoting in Metasploit. Finally, we created a resource script to automate the setup process of a `multi/handler` that migrates to a newly spawned process once Metasploit starts a session due to an incoming reverse shell.

Exploit frameworks like Metasploit are invaluable in penetration testing because they simplify the management of various shells and sessions, reduce errors, and allow for easy customization of modules. These frameworks often provide the ability to create executable files for client-side and web application attacks. By using Metasploit's Meterpreter payload, we gain access to a wide range of powerful post-exploitation and pivoting techniques.

---

### Introduction to Active Directory

In this learning module, we will cover the following topics:

- **Introduction to Active Directory**
- **Active Directory Enumeration Using Manual Tools**
- **Enumerating Active Directory Using Automated Tools**

**Active Directory Domain Services (AD)** is a service that allows system administrators to manage operating systems, applications, users, and data access on a large scale. AD is typically installed with a standard configuration, but administrators often customize it to meet organizational needs.

From a penetration tester's perspective, AD is a valuable target as it contains a wealth of information. Compromising certain objects within the domain can potentially lead to full control over the organization's infrastructure.

### Active Directory - Introduction

This learning unit will cover the following objectives:

- **Introduction to Active Directory**
- **Define Our Enumeration Goals**

Active Directory acts as a management layer, containing critical information about the environment, including users, groups, and computers, referred to as objects. Permissions set on each object dictate the privileges within the domain.

Configuring and maintaining an instance of AD can be challenging due to the extensive information it contains, which can create a large attack surface. The first step in configuring AD is to create a domain name, such as `corp.com`, and add various objects like computers, users, and group objects.

An AD environment relies heavily on the Domain Name System (DNS) service. A typical domain controller (DC) will also host a DNS server that is authoritative for the domain.

### Organizational Units (OUs)

System administrators often organize objects into Organizational Units (OUs) to ease management. OUs are similar to file system folders, used to store objects within the domain. Computer objects represent domain-joined servers and workstations, while user objects represent accounts that can log in to these machines. Each AD object has attributes, such as first name, last name, username, and phone number.

### Domain Controllers and Groups

When a user attempts to log in to the domain, a request is sent to a DC, which checks the user's permissions. One or more DCs act as the hub and core of the domain, storing all OUs, objects, and their attributes. Objects can be assigned to AD groups for easier management. High-privileged groups, such as `Domain Admins` and `Enterprise Admins`, are particularly valuable targets for attackers.

### Enumeration - Defining Our Goals

In this scenario, we will enumerate the `corp.com` domain. We have obtained user credentials for a domain user, `stephanie`, through a phishing attack. Our goal is to enumerate the full domain and find ways to achieve the highest privilege possible (domain administrator).

We will perform the enumeration from a client machine with the low-privileged `stephanie` domain user. As we gain access to additional users and computers, we may need to repeat parts of the enumeration process from the new standpoint. This persistent "rinse and repeat" process is key to successful enumeration, especially in large organizations.

### Active Directory - Manual Enumeration

This learning unit will cover the following objectives:

- **Enumerate Active Directory Using Legacy Windows Applications**
- **Use PowerShell and .NET to Perform Additional AD Enumeration**

There are many ways to enumerate AD, and a variety of tools can be used. We will start with tools already installed in Windows, such as `net.exe`, and then move on to more robust techniques like invoking .NET classes using PowerShell to communicate with AD via LDAP.

### Active Directory - Enumeration Using Legacy Windows Tools

Since we are starting with an assumed breach and have credentials for `stephanie`, we will use these credentials to authenticate to the domain via a Windows 11 machine (CLIENT75). We will connect to the client using the Remote Desktop Protocol (RDP) with `xfreerdp`.

```bash
kali@kali:~$ xfreerdp /u:stephanie /d:corp.com /v:192.168.50.75
```

### Enumerating Users and Groups

To start gathering user information, we will use `net.exe` with the `net user /domain` command to list users in the domain.

```cmd
C:\Users\stephanie>net user /domain
```

Based on the output, we should check out the `jeffadmin` user, as it might be an administrative account. We can inspect the user with `net.exe` and the `/domain` flag.

```cmd
C:\Users\stephanie>net user jeffadmin /domain
```

According to the output, `jeffadmin` is part of the `Domain Admins` group, which is a high-privilege target.

We can also use `net.exe` to enumerate groups in the domain with `net group /domain`.

```cmd
C:\Users\stephanie>net group /domain
```

The output includes a long list of groups in the domain, some of which are default, and others are custom groups created by the administrator. Letâ€™s enumerate a custom group, such as the `Sales Department` group.

```cmd
C:\Users\stephanie>net group "Sales Department" /domain
```

By following these steps, we can gather detailed information about the AD environment and identify potential targets for further exploitation.