ted by the ICD. We did not ﬁnd any header that is speciﬁc
for the ICD type or any ﬁeld that denotes the ICD type.
We veriﬁed that all messages sent from the ICD to the de-
vice programmer use the same LFSR sequence as the one
previously described. We noted that all the messages have
the ICD SN. In contrast, the ICD includes the device pro-
grammer’s SN only in replies to no telemetry messages. We
3The data and the LFSR sequence that are shown in Figure
6 are not the real ones.
Figure 7: ICD modes of operation.
Our experiments show that the ICD can operate in ﬁve
diﬀerent modes: “sleep”, “interrogation”, “reprogramming”,
“no-telemetry” or “standby”. In the rest of this paper, we
will not discuss the “no-telemetry” mode further since this
mode was not relevant for our experiments. Figure 7 gives
an overview of the modes. Initially, the ICD is in a “sleep”
mode in which it occasionally activates the wireless inter-
face to check whether there is an incoming message sent by
a device programmer over the short-range communication
230
channel. Once the ICD is activated, it remains in “interro-
gation” mode where it continuously sends telemetry data to
the device programmer over the long-range communication
channel. If no reprogramming operation is performed by the
doctor, the ICD is in the “interrogation” mode for two hours.
If the doctor modiﬁes the ICD settings within this two-hour
window, the ICD switches to “reprogramming” mode for a
few seconds and then goes back to the “interrogation” mode,
where is kept active for two hours. When the session expires
(after two hours), we observed that, instead of immediately
switching to “sleep” mode, the ICD goes ﬁrst to “standby”
mode. We will explain the “standby” mode more in detail
later in this section.
We will now describe four possible ways to send malicious
messages to the ICD, depending on whether the ICD is ac-
tive, in “standby” or in “sleep” mode.
Exploit an active session: Intuitively, adversaries could
attempt to hijack an ongoing session between the external
device and the ICD to send malicious commands to the ICD.
This is a challenging task since this requires the adversary
to be in close proximity to the patient (e.g. in the hospi-
tal). Furthermore, adversaries need to send the malicious
commands to the ICD while having to block the messages
sent by the genuine external device. To masquerade their
attacks, adversaries may also send fake telemetry data to
the genuine external device to avoid that the doctor/patient
notices that the ICD is no longer communicating with it.
Standby mode: We discovered that the ICDs do not im-
mediately switch to “sleep” mode after ﬁnishing an ongoing
session with the device programmer, but they all remain in
a “standby” mode for ﬁve minutes. This is a safety feature
but also has security consequences.
While being in “standby” mode, any device programmer
can activate the ICD again by sending a speciﬁc message
over the long-range communication channel. This message
turns out to be identical for all ICDs. We also found this
weakness in the case where the ICD is activated by means
of the base station. In that case, the ICD is active for ﬁve
minutes only if the session with the base station is not ter-
minated correctly.
We were able to impersonate the device programmer and
successfully send this message to the ICD to keep it alive.
For our experiments, we used the transmitter port of our
USRP to emulate the device programmer’s behaviour and
the receiver port of our USRP to capture this signal and
the response sent by the ICD. To distinguish between the
messages sent by our USRP and the responses sent by the
ICD, we placed the ICD close to the receiver port of our
USRP while keeping the transmitter port of our USRP fur-
ther away, thus getting more power from the ICD. This at-
tack is illustrated in Figure 8. Therefore, adversaries could
wait until the session between the device programmer and
the ICD ﬁnishes and then repeatedly send this message to
the ICD. This could be used to drain the ICD’s battery, or
even worse, to extend the time window as long as needed to
send as many malicious messages as required to compromise
the patient’s safety.
Wake up the ICD from “sleep” mode: We noted that
the device programmer’s programming head is magnetic. To
eliminate the possibility that a magnet is needed to boot-
strap the communication with the ICD, we conducted an
experiment where we placed a magnet near the ICD. The
result of this experiment showed that the magnet alone can-
e
d
u
t
i
l
p
m
A
,
,
,
- ,
- ,
- ,
Time
Figure 8: Messages sent to the ICD while the ICD
is in “standby” mode in order to activate it. From
left to right, two messages sent (with diﬀerent gain)
from our USRP to wake up the ICD, the response
of the ICD and two messages sent by the USRP.
not activate the ICD’s wireless interface. The next step was
to investigate which data is exchanged between the devices
before the long-range communication starts. For this we
studied the short-range communication between the device
programmer and the ICD, focusing on the messages sent by
the device programmer.
We used our DAQ and an antenna to capture the mes-
sages sent by the device programmer at 30-300 kHz. Every
time a new session is established, the device programmer
sends three messages to the ICD via the programming head.
Following the same steps as those described in the previous
section, we were able to unveil the wireless communication
parameters being used.
In particular, we found that the
messages sent by the device programmer are modulated us-
ing a FSK and encoded under Non-Return-to-Zero Inverted
(NRZI). In NRZI, a ‘1’ is represented by a transition of the
voltage level, whereas a ‘0’ has no voltage transition. We also
determined that the symbol rate is 12500 symbols/second.
We created a LabVIEW program to intercept and demod-
ulate the three messages transmitted by the device program-
mer’s programming head. We noted that the ﬁrst message is
always identical regardless of the ICD being used, whilst the
second and third message vary depending on the ICD’s SN.
The other headers and information bits within the second
and third message are kept constant, making the short-range
communication vulnerable to replay attacks. Thus, adver-
saries need to eavesdrop the wireless channel only once to
intercept the three messages sent by the device programmer.
Adversaries could then carry a backpack with all the neces-
sary equipment and re-send these messages to the ICD when
the patient is in a crowded place (e.g. the public transporta-
tion) where adversaries can be relatively close to the patient
and still go unnoticed.
Using legitimate external devices: Alternatively, ad-
versaries can also use any legitimate external device to con-
duct the attacks. Unlike device programmers, which are big,
heavy and cannot be hidden easily, base stations are inex-
pensive, portable and can be easily purchased. Therefore,
one possibility is to use a legitimate base station to carry out
these attacks. However, a base station by itself cannot send
commands to reprogram the ICD. In our experiments, we
show that adversaries can use any legitimate base station
to activate the ICD. Since the ICD remains in “standby”
mode if the session with the base station is not terminated
correctly, adversaries can simply carry the base station in a
backpack and turn it oﬀ before the communication with the
ICD ends in order to keep the ICD alive. Adversaries can
then use their own equipment to send malicious messages to
the ICD over the long-range communication.
231
message to extend the ﬁve minute window as many times
as needed to send malicious messages to the ICD without
requiring being close to the patient.
4.3 Spooﬁng and replay attacks
After fully reverse-engineering the proprietary commu-
nication protocol between the device programmer and the
ICD, we were able to fully document the message format in
use. Our results show that there is no mechanism to pre-
vent replay attacks; the counters found in the ﬁrst and ninth
message are reset every time a new session is established
or after a relatively small number of operations. Without
even knowing the protocol speciﬁcations, adversaries could
successfully perform replay attacks just by re-sending past
transmissions sent by the legitimate device programmer. In
addition, the protocol does not provide any means to check
the integrity and authenticity of the messages. Thus, it is
possible to perform spooﬁng attacks, which allow adversaries
to send arbitrary commands to the ICD.
5. COUNTERMEASURES
In this section, we present practical and eﬀective coun-
termeasures to mitigate/solve the vulnerabilities found in
the previous sections. We divide our countermeasures into
two groups: short-term measures and long-term measures.
The former group could be deployed immediately to miti-
gate some of the existing security issues in already-implanted
ICDs, whereas the latter group require minor modiﬁcations
on the devices and hence could be integrated into future
generations of ICDs.
5.1 Short-term measures
5.1.1 Jamming the wireless channel
As shown in the previous section, adversaries can take ad-
vantage of the time the ICD is in “standby” mode to carry
out a DoS attack, or even worse, to extend the time they can
send malicious messages to the ICD. Thus, our ﬁrst coun-
termeasure consists of adding a “shutdown” command in all
external devices so that they continuously jam the wireless
channel while the ICD is in “standby”mode. A more eﬃcient
solution is to jam the wireless channel only if an adversary is
detected. This is also known as reactive jamming. Several
articles have already used friendly-jamming as a defensive
mechanism.
One possible drawback of our countermeasure is that it
could interrupt the ongoing communications between other
legitimate devices. We leverage on the fact that the patient
typically has his ICD being reprogrammed/interrogated in
isolated controlled locations; either in the doctor’s oﬃce or in
the patient’s home. This clearly reduces the risks of jamming
other ongoing communications. Another downside of our
countermeasure is that it works only if the patient stays
close to the external device for ﬁve minutes while his ICD is
in “standby” mode. Due to that the ICD listens to all MICS
channels while being in “standby” mode, external devices
need to be equipped with several antennas to simultaneously
jam all MICS channels.
4. EXISTING VULNERABILITIES
In this section we will brieﬂy summarise the weaknesses
we found after fully reverse-engineering the proprietary pro-
tocol. These weaknesses can result in several types of active
and passive software radio-based attacks. We want to stress
that adversaries could use sophisticated equipment and di-
rectional antennas to extend the distance from which they
can carry out attacks by several orders of magnitude.
4.1 Privacy attacks
Our analysis of the proprietary protocol between the de-
vice programmer and one model of the latest generation of
ICDs reveals that the messages sent over the air are “obfus-
cated” using an LFSR sequence. This LFSR sequence is the
same for all models that we studied.
The messages exchanged between the devices include pa-
tient private sensitive information such as personal data (e.g.
his name or medical history) or telemetry data. Clearly, the
way they use the LFSR sequence to obfuscate the data can
result in serious patients’ privacy breaches. Passive adver-
saries can compromise the patient’s privacy just by eaves-
dropping the wireless channel while there is an ongoing com-
munication. However, this attack typically requires the ad-
versaries to wait until the devices exchange this data. This
limitation can be overcome by active adversaries who can
additionally send malicious messages to the ICD to request
this data.
By intercepting the messages sent by ICDs and looking
at their unique SN, adversaries could track, locate or iden-
tify patients. For example, adversaries could install beacons
in strategic locations (e.g. the train station or the hospital)
to infer the patients’ movement pattern based on the signals
transmitted by their ICDs. This could reveal their addresses,
the places they often go, and other potential sensitive infor-
mation. Furthermore, the messages sent between the devices
during a reprogramming session may allow adversaries to in-
fer the patient’s treatment or the therapy details. Telemetry
data, which is sent continuously by the ICD when it is active,
could reveal the patient’s health state. Overall, it is clear
that the consequences of all these attacks can be severe for
patients.
4.2 Denial-of-Service (DoS) attacks
As shown in the previous sections, ICDs can operate in
four distinct modes: “sleep”, “interrogation”, “reprogram-
ming” and “standby”.
Intuitively, the ICD should immediately switch to “sleep”
mode when the communication session with the device pro-
grammer ﬁnishes or when it expires after two hours with no
reprogramming operation. However, we discovered that, af-
ter the ICD has been activated, it remains in “standby”mode
for ﬁve minutes, where it can be put in the “interrogation”
mode again if it receives a speciﬁc message. This message
turns out to be identical for all ICDs and is sent over the
long-range communication channel.
In other words, there
is no need for being in close proximity with the patient to
activate his ICD. This is an important implementation ﬂaw
that makes these devices vulnerable to DoS attacks. The
purpose of these attacks is to keep the ICD alive by contin-
uously sending this message over the long-range communi-
cation, which could drastically reduce the ICD battery life.
Yet, this also opens up the door for adversaries to perform
other types of attacks more easily, as they can send this
232
5.2 Long-term measures
5.2.1 Adding a shutdown command in the ICDs
Instead of relying on friendly-jamming to prevent adver-
saries from sending malicious messages to the ICD, our sec-
ond countermeasure is based on modifying both external
devices and ICDs to include a “shutdown” message. This
way, the external device can send the “shutdown” message
to the ICD before they ﬁnish the communication to ensure
that the ICD goes directly to “sleep” mode. Even though
this countermeasure does not completely solve the existing
vulnerabilities, this makes it more diﬃcult for adversaries to
send malicious messages to the ICD.
5.2.2 Key agreement protocol
As a long term improvement, Halperin et al. proposed
adding standard symmetric key authentication and encryp-
tion between the ICD and the programmer. For this they
proposed to have the master key on every device program-
mer (stored in tamper-resistant hardware) and diversiﬁed
keys in the ICDs. This setup is clearly a signiﬁcant im-
provement over existing systems. Yet, having the master
key stored in every device programmer is latent risk. If the
tamper-resistant hardware of a single device programmer is
ever compromised, then there is no way to revoke the keys
and every patient with an implant will be exposed indeﬁ-
nitely, or until the IMD is replaced.
Another alternative is to store the master key in the cloud,
in order to limit its distribution to a single instance, and
have the device programmers online. But this is not a viable
option as the device programmers are required to operate (in
case of emergency) at all times, including during Internet or
cloud provider outages.
In this paper we propose a middle ground between these
two approaches: a semi-oﬄine protocol. We leverage on the
fact that both IMDs and device programmers have a precise
internal clock which is synchronised at every communica-
tion session. This clock allows the IMD to keep a log ﬁle
with all critical events and the time when they occurred.
Let G1 and G2 be two multiplicative groups of prime order
q. Furthermore, let e : G1 × G1 → G2 be a bilinear map
satisfying:
Bilinearity ∀g, h ∈ G1, ∀a, b ∈ Z∗
q , e(ga, hb) = e(g, h)ab.
Non-degeneracy ∀g ∈ G1, g ̸= 0 implies that e(g, g) is a
generator of G2.
Computability e can be computed in polynomial time.
Let H1, H2 : {0, 1}∗ → G1 be two diﬀerent cryptographic
hash functions satisfying standard security requirements.
When the system is initialised, the key generation centre
generates the system master secret key msk which is stored
securely at the back oﬃce, and is never shared with anyone.
Let ID be the IMD identities domain which is assumed to