retrieving data according to more complex predicates on the tags)
in a private way (without revealing to the servers his topics of
interest, or his curriculum vitae).
The trivial solution in this scenario would be to let the servers
send regular digests to the client, containing the list of all tags
attached to each newly arrived data, so as to let the client determine
which data interest him. But with the potentially large number of
tags associated to each data, and the large quantity of new data,
the client would have to receive a large volume of essentially non-
relevant information, which consumes bandwidth and power.
In this section, we show how homomorphic secret sharing can
be used to optimally compress such digest while maintaining the
privacy of the client. After a setup phase, in which the client en-
crypts a query that indicates his area of interests, he will receive
on average a two bits from each of two servers maintaining the
database, from which he can learn whether a new record is likely
to interest him.
Basic Setting. A database publicly maintained by two servers (S0, S1),
who hold respective evaluation keys (ek0, ek1) for a secret-key
Las Vegas HSS scheme, is regularly updated with new records
R. Each record comes with a size-n string of bits, indicating for
each possible tag whether it is relevant to this record. In the most
Session J1:  OutsourcingCCS’17, October 30-November 3, 2017, Dallas, TX, USA2116basic scenario, the client sends an encryption of the list of bits
indicating all tags that interest him in a setup phase. For each new
record, the client wants to know whether the record contains all
tags that interest him. The protocol is represented Figure 4. Each
string (ri )i ≤n associated to a record contains typically a very large
number of zeros, and the corresponding RMS program P[r1,· · · , rn]
is essentially a conjunction of n′ inputs, where n′ is close to n.
A nice feature of this private RSS feed protocol is that the servers
do not need to interact at all – they do not even need to know each
other, which strongly reduces the risk of collusions and can be used
in the setup phase to mitigate hacking, by secretly choosing the
two servers.
Enhanced Scenario. Once he finds out that a new record interests him,
the client will likely want to retrieve it privately. This can be done
very efficiently using the two-server PIR protocol of [30] that relies
on distributed point functions (which can be built from any one-
way function). The servers can also apply more complex permission
policy functions, such as a disjunction of conjunctions, which can
be easily translated to RMS programs. The group-based public-
key HSS scheme also easily supports inputs from multiple clients,
which allows to append for example an encrypted permission string,
coming from e.g. the news provider, to the encrypted query of the
client. The RMS program would then indicate to the client that a
record is likely to interest him only if his permission data indicates
that he is authorized to get this record.
Private RSS feed for two servers S0, S1 and one client C:
$← Gen(1λ ). S0 gets (pk, ek0),
Global Setup: Let (pk, ek0, ek1)
S1 gets (pk, ek1), and C gets pk.
Client Setup: For each of n possible tags, C computes cti ←
Enc(pk, wi ) where wi = 1 if the ith tag matches the interests
of C, and wi = 0 otherwise. C sends (cti )i ≤n to (S0, S1).
Digest Generation: For each new record Rj added to the
database, associated to a list of n bits (ri )i ≤n identi-
fying the tags of the record, each server Sb computes
j ) ← Eval(b, ekb , (ct1, . . . , ctn ), P[r1,· · · , rn], δ )
(xb
j , γ b
where P[r1,· · · , rn] is an RMS program with (ri )i ≤n hard-
coded that returns 1 iff it holds that ri = 1 for all j such that
wi = 1. Once N new records have been added, each server
Sb sends (I , (xb
j )j≤N ) to C, where I is a unique identifier
of the digest.
for each j such
Parsing the Digest: C computes xj ← x
j , γ b
j ⊕ x
0
1
j
that (γ
0
j , γ
j ) (cid:44) (⊥,⊥).
1
Figure 4: Private RSS Feed Protocol.
Efficiency Estimations. Using the algorithmic optimizations of Sec-
tion 4 together with our optimized implementation, an RMS pro-
gram with 50 non-terminal multiplicative gates (e.g. a conjunction
of 51 inputs, a majority of 13 inputs, or any branching program or
boolean formula with 51 gates) can be evaluated with a 1% failure
probability on an encrypted query in less than 0.1 second on a
single thread of an Intel Core i7 CPU, using B = 16 as the basis for
the ElGamal secret key. An encrypted bit amounts to about 10kB,
using the generic ciphertext compression method of section 4.3.
Comparison with Alternative Approaches. A number of alternative
approaches can be envisioned for the above application. An at-
tractive approach for small values of n is to use distributed point
functions [30] (DPF), which can be implemented very efficiently
using block ciphers such as AES [12], by letting the servers match
the private query with all 2n possible vectors of length n. This
solution becomes clearly impractical as soon as n becomes large,
while our HSS-based solution can handle values of n ranging from
a few dozens to a few hundreds.
5.2.3 Private Information Retrieval. Private Information Retrieval
(PIR) allows a client to query items in a database held by one or
more servers, while hiding his query from each server. This prob-
lem has been extensively studied in the cryptographic community,
see [19, 38]. In this section, we outline how homomorphic secret
sharing can be used to construct efficient 2-server PIR schemes
supporting rich queries that can be expressed by general formulas
or branching programs.
The setting is comparable to the setting of the private RSS feed
protocol described in Section 5.2.2: the client applies the HSS shar-
ing algorithm to split the query q between the servers. (Here the
more efficient secret-key variant of HSS suffices.) The servers use
the HSS evaluation algorithm to non-interactively compute, for
each attribute vector of database item, a secret-sharing of 0 (for no
match) or 1 (match). The main challenge is for the servers to send a
single succinct answer to the client, from which he can retrieve all
items that matched his query (possibly with some additional items).
We describe below a method to achieve this.
Retrieving a Bounded Number of Items. We start by assuming that
the client wishes to retrieve items matching his query, up to some
public bound n on the number of matching items. let N be the size of
i )i ≤N be the output shares of each server
the database, and let (mb
Sb obtained by matching the encrypted query with each vector
of attribute ai of the database. Let (mi )i ≤N be the corresponding
outputs. Each server Sb interprets his shares (mb
i )i ≤N as a vector
over (F2k )N , for some large enough k (e.g. k = 40). Both servers
replace each share for which they raised a flag, indicating a potential
failure, by a uniformly random value over F2k . This ensures that
the elements of (mi )i ≤N for which a failure occurred will not be
equal to 0, with very high probability.
Then, the servers can non-interactively reconstruct shares of
the database entries Di for with mi (cid:44) 0, up to the bound n of
the number of such entries, using a syndrome of a linear error-
correcting codes (interpreting the vector (mi )i ≤N with failures
as a noisy codeword), and send the resulting vectors (vb
i )i ≤n for
b ∈ {0, 1} to the client. Eventually, the requirement of a bound
n on the number of matches can be removed by repeating the
above procedure using successive powers of 2 as guesses for the
bound. Concretely, for n = 1, 2, 4, 8, ..., N , the servers use a common
(pseudo-)randomness to replace each entry in the vector by 0 except
with 1/n probability, repeating several times to reduce the failure
probability (see, e.g., [41]).
5.3 Generating Correlated Randomness
Special forms of correlated randomness serve as useful resources
for speeding up cryptographic protocols. HSS techniques provide a
Session J1:  OutsourcingCCS’17, October 30-November 3, 2017, Dallas, TX, USA2117promising means for generating large instances of certain correla-
tions while requiring only a small amount of communication. This
approach is particularly effective for correlations evaluable in low
depth, and with long output, by homomorphically “expanding” out
encoded input values into shares of the output.
In this section, we discuss a few sample correlation classes that
are HSS amenable. In each case, when generating the correlation,
we assume the parties have run a (one-time) distributed HSS key
generation (as in Section 4.2), yielding keys (pk, ek0, ek1).
5.3.1 Bilinear Form Correlations. Consider the following 2-party
“bilinear form” correlation, parameterized by abelian groups Gx , Gy , Gz
and a bilinear map M : Gx × Gy → Gz. In the correlation, Party A
holds a random x ∈ Gx , party B holds a random y ∈ Gy, and the par-
ties hold additive secret shares (over Gz) of the image M (x, y) ∈ Gz.
Generating Bilinear Form Correlations via HSS. Consider for
simplicity Gx = Gy = G (the protocol extends straightforwardly).
The parties will begin with random bit-strings a, b ∈ {0, 1}m, for m
somewhat larger than log |G|, and generate the correlation via two
primary steps.
First: Shares of pairwise the aibj products can be computed via
2 terminal RMS multiplications, using the procedure described in
m
Section 4.2.2 for “loading” the inputs bj as level 2 HSS shares via an
OT-based protocol (avoiding the need for an additional homomor-
phic multiplication to do so). As described in Section 4.5 (Terminal
Multiplication discussion), this means just a single pairing and con-
version is required per multiplication, and the HSS encoding of each
bit can be given by a single ElGamal ciphertext. More specifically,
it suffices to send ElGamal encryptions of Party A’s bits and to
perform the OT-based protocol for encoding the bits of Party B.
For correctness, after the first step, the parties exchange and
discard indices i, j ∈ [m] with error. However, this may leak infor-
mation on a subset of non-discarded values ai , bj.
Second: The (partly leaked) a, b ∈ {0, 1}m bits are converted
to random G elements x, y, while removing the effects of leakage,
by taking the corresponding subset sums of fixed public random
G elements. The output shares of M (x, y) can then be computed
locally from shares of the {aibj}, relying on bilinearity of M.
More explicitly, consider the following protocol, for m = ⌈log |G|⌉+
4σ + E + L, where σ = 40 is statistical security parameter, L, E are
chosen parameters, and (ri )i∈[m], (sj )j∈[m] ∈ G are randomly cho-
sen public parameters.
(1) Each party samples a respective vector, a, b ← {0, 1}m.
(2) Party A encodes his input a bitwise using HSS: i.e., ∀i ∈
i ← Enc(pk, ai ), and sends the resulting ciphertexts
)i∈[m] to Party B.
(3) The parties run the OT-based protocol described in Sec-
tion 4.2.2 (Figure 2) to load Party B’s input b bitwise into
HSS memory as level 2 encodings.
[m], cta
(ctai
i
(4) Locally, each party runs Las Vegas homomorphic evaluation
2 RMS multiplica-
of the RMS program Pbilin that computes m
tions between input value ai and memory value bj, for each
i, j ∈ [m], and outputs the value modulo β = q (DDH group
2.
modulus). The error for each multiplication is set to E/m
Each result is sharei, j ∈ Zq ∪ {⊥}.
(5) Party B: Let Err = {(i, j) : shareB
A sets ai = 0, shareA
i, j (shareA
i, j = shareB
j bjsj ) =(cid:80)
i airi and y =(cid:80)
combinations x =(cid:80)
i, j = ⊥}. Send Err to party A.
Let Erra, Errb be the respective projections of Err onto the
1st and 2nd coordinate.
(6) (Discard errs): Locally, for every i ∈ Erra and j ∈ Errb: Party
(7) Party A: Output x = (cid:80)
i, j = 0, Party B sets bj = 0, shareB
i, j = 0.
(cid:80)
i∈[m] airi ∈ G and (M (x, y))A =
Party B: Output y = (cid:80)
i, j ) ∈ Gz (in Gz as Z-module).
i, j∈[m] M (ri , sj )(shareA
j∈[m] bjsj ∈ G, and corresponding
(M (x, y))B ∈ Gz. Note each M (ri , sj ) is publicly computable.
Correctness: By Las Vegas correctness (Definition 2.1), with over-
whelming probability (1/q) the HSS shares of aibj for all kept posi-
we have M (x, y) = M ((cid:80)
i airi ,(cid:80)
tions i (cid:60) Erra, j (cid:60) Errb each satisfy shareA
i, j + aibj over
the integers Z (instead of just Zq). Suppose this is the case. Then
Gz) =(cid:80)
i, j aibj M (ri , sj ) (over
i, j − shareB
i, j )M (risj ) = (M (x, y))A − (M (x, y))B.
Secrecy: Entropy loss in a, b comes from (i) discarding erred
positions (Step 6), and (ii) leakage on non-discarded bj values from
learning Err. For (i): HSS correctness gives |Err| ≤ E + σ except
with probability ∼ 2−σ . For (ii): leaked values are restricted to bj
i, j = ⊥ for some i ∈ [m] (“danger zone”
for which j (cid:60) Errb but shareA
but no error), also bounded in number by L + σ (= E + σ) with
probability ∼ 2−σ . So, conditioned on Party A’s view, b maintains
min-entropy ⌈log |G|⌉ + 2σ (and vice versa for a). Thus, the linear
j bjsj are 2−σ -close to uniform
over G, conditioned on the public ri , sj values and view.
Communication: 640 × m bits for the input-encoding OTs for
Party B (see Section 4.2.2), plus m ElGamal ciphertexts for Party A,
which correspond to 2m group elements (each 1536 bits). In total,
640 × m + 1536 × 2m = 3712m bits. (Note that the random elements
ri , sj ∈ Gz can be generated pseudorandomly from a short shared
seed and need not be directly communicated.)
Computation: We focus on the required cryptographic opera-
tions (e.g., dominating the subset sums over G). The local HSS
2 terminal RMS multiplica-
evaluation runtime corresponds to m
2 total exponentiations and share conversions. Each
tions, i.e. m
2.
terminal multiplication is performed with failure probability E/m
Applications of Bilinear Form Correlations. This bilinear cor-
relation distribution can aid the following sample applications.
Generating Beaver triples over rings. Beaver triple correlations [5]
over a ring R are comprised of a pair of random elements x, y ∈ R
where each element is known by one party, as well as additive secret
shares of their product xy ∈ R (where addition and multiplication
are over the ring). Given such multiplication triples, one can obtain
secure computation protocols for computations over R with near-
optimal computational complexity (e.g., [4, 9, 22, 36]).
Beaver triples over R are exactly bilinear correlations with Gx =
Gy = Gz = R and bilinear map M multiplication over the ring,
thus generating a triple from HSS can be achieved with costs as
described above. Let n = ⌈log |R|⌉, and consider for instance L =
E = n/8 in the parameters above. Then the HSS approach requires
3712(5n/4 + 160) bits of communication.
2 terminal
2 = 2/(81n).
RMS multiplications, each with failure (n/8)/(9n/4)
In this regime, the RMS multiplications are dominated by conver-
sions. Estimating a baseline of 5 × 109 conversion steps per second
For n ≥ 128, required computation is less than (9n/4)
Session J1:  OutsourcingCCS’17, October 30-November 3, 2017, Dallas, TX, USA2118(see Section 6), together with effective ×8 speedup from the rele-
vant optimizations in Section 4 (×4 for expected payloads, ×2 for
10d−1 distinguished points),2 to generate an m-bit Beaver triple
∼ m