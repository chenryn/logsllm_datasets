John Menerick − August 2015
Backdooring Git
‹#›
Legal Disclaimer
‹#›
Thank you for coming
‹#›
What we are covering
‹#›
What we are not covering
‹#›
What we are not covering
‹#›
Software is like sex; it is better when it is free 
Linus Torvalds
Name the Quote
Setting the Stage
‹#›
Good luck!
‹#›
Revision control vs. Source Control
Source control == source code change management
‹#›
Wrong Tool for the Job
‹#›
Right Tool for the Job
‹#›
Distributed vs. Centralized
‹#›
Helfe!
‹#›
Trends
Git
‹#›
Definition
1
               While it works, angel sings and light shines from above - “Global information tracker”
‹#›
Definition
2
               When it dies, ﬁre erupts from under your feet - “Goddamn idiot truckload of sh*t”
‹#›
Hitler Uses Git
‹#›
Rings of Trust
‹#›
If you have ever done any security work - and 
it did not involve the concept of “network of 
trust” - it wasn’t security work, it was - .  I don’t know what you were doing.  
But trust me, it’s the only way you can do 
security.  it’s the only way you can do 
development.  
Linus Torvalds 
Name the Quote
‹#›
Typical Trust Relationships
‹#›
Morons
Since you do not want everybody to write to the central repository 
because most people are morons, you create this class of people 
who are ostensibly not morons. And most of the time what 
happens is that you make that class too small, because it is really 
hard to know if a person is smart or not, and even if you make it 
too small, you will have problems. So this whole commit access 
issue, which some companies are able to ignore by just giving 
everybody commit access, is a huge psychological barrier and 
causes endless hours of politics in most open source projects
Empircal Study
‹#›
SVN
‹#›
Git
‹#›
Not Scientific CVE Search 
‹#›
GitLab
‹#›
GitLab 0day
‹#›
Functionality or Backdoor?
‹#›
2003 Linux backdoor
‹#›
2003 Linux backdoor
‹#›
2003 Linux backdoor
‹#›
Old School Cloud Repository Hacks
‹#›
New School Cloud Repository Hacks
‹#›
New School Cloud Repository Hacks
‹#›
New School Cloud Repository Hacks
‹#›
New School Cloud Repository Hacks
‹#›
New School Cloud Repository Hacks
Story Time
‹#›
Sit back and relax
‹#›
Corruption
‹#›
It wasn’t me
‹#›
It wasn’t me
‹#›
It wasn’t me
‹#›
Feelings
‹#›
Trust
‹#›
Crypto to the rescue
‹#›
Crypto to the rescue
‹#›
My voice is my passport – Verify me
‹#›
GPG Trust Model
‹#›
GPG Trust Model
‹#›
Embedded Signatures
‹#›
No More Than One Signature Per Commit
‹#›
Backdooring
‹#›
Simple Scenario
* User "Alice" clones the canonical repo so they can work on a bugfix. They branch 
locally, and then push their local branch to a branch on a public repository somewhere. 
* User "Alice" does not have direct commit access to the canonical repository, so they 
contact a committer, "Bob". "Bob" adds a remote in his working copy pointing to Alice's 
remote; after review of the changes, Bob merges the branch to their development 
branch. 
* Later, Bob pushes his development branch to the canonical repository. 
The question that arises is: how do we know that Alice has signed a CLA? How does Bob 
know that Alice has signed a CLA?
‹#›
Danger Zone
‹#›
Ambiguity
‹#›
Transitive Policy Checks
‹#›
Transitive Policy Checks
‹#›
Trust your peer?
trusting the pushing client's assertions as to the signature status is meaningless from a 
security perspective.
Demo
Has this been seen in the wild?   
‹#›
No?
from hashlib import sha1 
def githash(data): 
    s = sha1() 
    s.update("blob %u\0" % len(data)) 
    s.update(data) 
    return s.hexdigest() 
‹#›
No?
“If all 6.5 billion humans on Earth were programming, and every second, each one was 
producing code that was the equivalent of the entire Linux kernel history (3.6 million Git 
objects) and pushing it into one enormous Git repository, it would take roughly 2 years 
until that repository contained enough objects to have a 50% probability of a single 
SHA-1 object collision..  A higher probability exists that every member of your 
programming team will be attacked and killed by wolves in unrelated incidents on the 
same night.”
‹#›
No?
‹#›
Yes?
https://github.com/bradfitz/gitbrute
‹#›
Yes?
‹#›
Yes?
‹#›
Yes?
‹#›
Signed commit metrics on the popular git services vs. not signed commits
Tools
‹#›
CLI
To a close
‹#›
One More Thing
‹#›
One More Thing
from RockStar import RockStar 
activity = RockStar(days=4061) 
activity.make_me_a_rockstar() 
‹#›
One More Thing
from RockStar import RockStar 
activity = RockStar(days=4061) 
activity.make_me_a_rockstar()