To account for latency inﬂations due to, e.g., congestion, we repeated those
measurements 100 times and collected the minimum RTT towards each interface
throughout all runs. Finally, we associate the shortest path of each preﬁx with
the minimum RTT we measured for its respective next-hop interface. Notably, if
there was more than one possible shortest path, we picked the one for which the
next-hop RTT was the lowest. Figure 7 shows for each preﬁx of a given minimum
path length the minimum latency to its next-hop.4 We observe that there is no
strict correlation between the distance of a peer and the length of the routes it
provides (Fig. 6).
Fig. 6. Distance to next-hop per preﬁx,
separated by length of shortest AS path
Fig. 7. peering LAN bytes per preﬁx, sepa-
rated by length of shortest AS path
Now that we know that even local peers forward lengthy routes to the route
server, the question becomes whether those routes see any traﬃc. For one of
our observed IXPs, we obtained IPFIX captures sampling 1 out of every 10K
packets traversing its peering LAN. While we can observe multilateral and bi-
lateral peering traﬃc in this data set, we have no insights into traﬃc exchanged
via private peering established via direct interconnects as it does not traverse
the public peering infrastructure. Based on the captured ﬂows between the 1st of
June and the 7th of June5, we calculate the aggregated number of Bytes destined
3 We neither had probing devices at other peering LANs, nor was our probing device
at L-IXP IPv6-enabled at the time of our study.
4 We explicitly avoid the classiﬁcation into remote and local peers based on RTT
estimates alone given the caveats presented in [57].
5 We provide details on how we choose this time window in the next section.
348
L. Prehn et al.
towards each preﬁx. Figure 7 groups Route Server preﬁx by their shortest path
and shows for each preﬁx (x-axis) the number of bytes (y-axis, logarithmic)
relative to the preﬁx with the most bytes (i.e., we show bytes normalized by
the preﬁx with the maximum byte count, ρ). We observe that 6% of preﬁxes
reachable via one hop carry at least 1% of ρ’s bytes while only less than 0.5% of
2 or more hop preﬁxes carry that much traﬃc. Apart from the top 6%, preﬁxes
reachable via two or more hops carry around an order of magnitude less traﬃc—
with only minor diﬀerences between two, three, and four or more hops. Finally,
we observe that 8, 19, 24, and 25% of IPv4 (60, 72, 73, and 77% of IPv6) preﬁxes
with a shortest path of 1, 2, 3, and 4+ hops carry no traﬃc at all, respectively.
Those observations are likely tied to how long-established IXP members
engage with a Route Server: In contrast to new members, long-established mem-
bers already acquired many bi-lateral peering sessions. It is common that mem-
bers attribute higher local preference values to such bi-lateral sessions as they
often come with Service Level Agreements (SLAs). Hence, long-established mem-
bers often peer with the Route Server to get an idea of which routes are available
at all but only hand-pick routes they actually use based on, e.g., how consis-
tently they are available or how much performance beneﬁt they may introduce.
As local preference values only de-prioritize (rather than ﬁltering them) multi-
lateral peering routes, Route Servers are also used as automatic fall-back in case
a bi-lateral peering session suﬀers from, e.g., an outage [32,68].
Fig. 8. Similarity of preﬁxes between
Route Servers
Fig. 9. Similarity of addresses between
Route Servers
How Route Server Speciﬁc are Multi-lateral Peering Routes? Until
now, we saw that most Route Servers have very similar characteristics; hence,
we now try to understand where the actual diﬀerence lies. As a similarity metric,
we use the Jaccard distance. The Jaccard distance between two sets of elements,
Peering Only?
349
Fig. 10. Similarity of addresses between
Route Servers without HE’s 2002::/16
route
Fig. 11. Similarity of preﬁxes between
Route Servers for common peers
|A∩B|
A and B, is calculated as JD(A, B) =
|A∪B|. In comparison to other common
min(|A|,|B|)), the
similarity metrics (e.g., the overlap coeﬃcient OC(A, B) =
Jaccard distance also produces small values when A is entirely contained in a
signiﬁcantly larger B, i.e., it not only considers the similarity of elements but
also the cardinalities of the sets. For each pair of Route Servers we now compute
the Jaccard Distance between preﬁxes (see, Fig. 8) and reachable IP addresses
(see, Fig. 9). As the Jaccard index is symmetric, we show results for IPv4 in the
top-right triangle and results for IPv6 in the bottom-left triangle.
|A∩B|
While we observe that certain Route Server combinations show more overlap
than others (e.g. AMS-IX and DE-CIX), the average similarity for IPv4 lies at
around 50% (77% for IPv6). As certain preﬁxes can be more-speciﬁcs of others, it
is also unsurprising that the similarity of reachable IP addresses lies roughly 13%
higher for IPv4. While we observe similar behaviour for many IPv6 combinations,
we observe that France-IX and DE-CIX are diﬀerent from the others but similar
to each other. We observe that this “clustering” is mainly the result of a single
route: 2002::/16 announced by AS6939 (Hurrican Electric). When ignoring this
route (see Fig. 10), the takeaways for IPv6 are roughly the same as for IPv4.
Finally, we want to know whether ASes with memberships at multiple IXPs
share the same routes with the respective Route Servers. Hence, we rerun the
same analysis but, this time, focus only on routes announced by the same member
ASes at both IXPs (see Fig. 11). While this comparison shows naturally higher
overlap compared to Fig. 8, we observe that certain Route Server combinations
still show a Jaccard distance of less than 70%; yet those routes barely make a
diﬀerence for the number of reachable IPs (Figure not shown).
Summary. We observe that the distribution of preﬁxes across Route Server
peers that was presented by Richter et al. [68] is also present in many other
350
L. Prehn et al.
Route Servers across the world. In general, we show that the characteristics of
routes at various Route Servers are very similar. We observe that the majority of
routes at Route Servers lead to out-of-continent destinations—likely a side-eﬀect
of the growing remote-peering trend. Surprisingly, we found that most routes at
Route Servers contain three or more ASes and that the distance of the peer is not
a factor for this phenomenon, i.e., even local peers provide many unattractive
routes to the Route Server. Nevertheless, the peering LAN traﬃc from one IXP
suggests that its members primarily use the routes to direct destinations, and
mostly rely on the Route Server for failover or analysis purposes.
5 Inferring Peering Relationships
After we analyzed the routes that are available to newly joined IXP members via
multi-lateral peering, we are now interested in the routes that can be obtained
by establishing bi-lateral and private peering sessions.
Similar to the work of Richter et al. [68], we infer bi-lateral peerings (and the
preﬁxes that are announced via them) by observing the traﬃc that ﬂows through
the IXP’s peering LAN. As shown by Ager et al., some ASes may “abuse” the
peering LAN for additional transit connections to their customers. Given that
our reachability analysis might be rather sensitive to the presence of transit
relationships6, we substantially extend the method used by Richter et al. to
account for them.
As the inference approach for bi-lateral peerings relies on traﬃc data, we now
limit the scope of our analysis to one large European IXP, L-IXP. While the
IXP’s peering LAN may cover most of the bi-lateral peering agreements, it oﬀers
no visibility into the private peerings that happen within the co-located data
centers; hence, we rely on carefully selected looking glasses within those data
centers to uncover routes that are available via private peering. Notably, this
approach does not allow us to accurately distinguish between dedicated private
peerings and connections to, e.g., cloud exchanges (as discussed in Sect. 2).
5.1 Bilateral Peering
We bootstrap our analysis in a similar way to Richter et al. [68]: Whenever
we observe traﬃc destined towards IP I ﬂowing from A to B, we deduct that
the respective covering /24 (or /48 for IPv6) for I must have been announced
from B to A. Notably, this approach relies on the assumption that an ASes
will eventually send traﬃc to most, if not all, of the preﬁxes it received from a
neighbor. Hence, we ﬁrst have to understand for how long we need to observe
peering LAN traﬃc before we arrive at a rather static “snapshot”.
Picking a Reasonable Window Size. On the one hand, a small window
size (e.g., an hour) may underestimate the available routes as not all of them
6 As customers can potentially send traﬃc destined for the entire Internet to their
transit providers, incorporating such connections would bloat up the set of reach-
ablepreﬁxes.
Peering Only?
351
necessarily continuously see traﬃc; on the other hand, a large time window (e.g.,
a year) is more likely to yield an extensive list, yet may provide an overestimate
as certain routes are withdrawn in the meantime. To get a better sense of what
might be a good window size, we test by how much a certain window size would
aﬀect the number of /24s and /48s for which we observe traﬃc. For various
window sizes between 4 hours and 14 days, we calculate the preﬁx counts and
then move the window forward by one hour. Using this method, we generate,
e.g., 739, 719, 575, and 407 data points for the window sizes 4 hours, 1 day, 7
days, and 14 days throughout the entire May 2021.
Figure 12 show the median preﬁxes
(y-axis) that we observed for a given win-
dow size (x-axis) as well as the Inter Quar-
tile Ranges (IQR) for IPv4 and IPv6.
While the knee of the curve (i.e., the
point at which further increases of the win-
dow size start to yield smaller improve-
ments) lies at around one and a half days,
we observe a continuous, almost linear,
increase after a window size of six days. We
decided to choose a window size of seven
days. While this choice might yield a small
number of already withdrawn preﬁxes, it
covers workdays as well as weekend days—
which are known to exhibit rather diﬀerent
traﬃc characteristics [29,41,43,72].
Fig. 12. Inﬂuence of window size on
visible preﬁxes
Removing Transit Sessions. Now that we have some understanding of the
routes that are announced between each member pair, we have to isolate and
ignore transit sessions as they might substantially inﬂate the set of reachable
preﬁxes. Perfectly identifying the business relationships of links has been an
academic goal for more than two decades. The current state of the art algorithm,
ASRank [47], is well-known for its high accuracy when it comes to identifying
transit relationships (even in narrow contexts [64]). CAIDA hosts two versions of
monthly-updated business relationship information: serial-1 and serial-2. While
serial-1 relies solely on routing information (i.e., AS paths), serial-2 contains
serial-1’s information but is further extended with topology information inferred
via additional sources, e.g., traceroute paths that were mapped to AS Paths. As
a result, serial-2 contains more relationships but also inherits inaccuracies from
its data extensions (e.g., from IP-to-AS mapping [7,51]). Surprisingly, neither
serial-1 nor serial-2 can cover more than 21.2% or 22.3% of the 220k+ IPv4 IXP
member pairs that exchanged traﬃc during that period.
Improving Relationship Coverage via Route Server Paths. Whether the
ASRank algorithm produces an inference for a given AS link mostly depends on
the set of AS paths that it is executed on. Hence, we can improve our inference
coverage by providing additional AS paths that ‘cross’ (i.e., contain two consec-
352
L. Prehn et al.
utive IXP members) the IXP’s peering fabric. To uncover such paths, we revisit
the Route Server of our IXP.
Our main idea is as follows: Our Route Server snapshot contains various
routes as well as their respective Route Server redistribution communities, i.e.,
Route Server speciﬁc communities to express the instructions: (1) announce to
all neighbor, (2) don’t announce to any neighbor, (3) announce to a speciﬁc
neighbor, and (4) do not announce to a speciﬁc neighbor. Notably, instruction
(1) and (2) are usually paired with instructions of type (3) and (4) but not with
one another. By simulating the redistribution, we can deduce the paths that
each IXP member received via its Route Server session(s).
More formally, we construct paths as follows: Let AS A announce some route
with AS path (A, p(cid:5)) to the Route Server where p(cid:5) refers to some (potentially
empty) sequence of ASes—we ignore the few routes that contain AS SETs. A also
attaches a set of (potentially large) BGP communities that we translate into the
previously explained instructions (1)–(4). To retrieve the set RP of Route Server
peers to which the route is redistributed, we ﬁrst sort the set of instructions in
the order we introduced them7. While we set RP to all Route Server neighbors
for instruction (1), we set RP to the empty set for instruction (2); if both
instruction (1) and (2) are present we ignored the route. Notably, if n either