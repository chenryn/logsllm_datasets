to this type of exploitation as return-to-user (ret2usr),
since it resembles the older return-to-libc [27] technique
that redirected control to existing code in the C library.
Interestingly, ret2usr attacks are yet another incarna-
tion of the confused deputy problem [39], where a user
“cheats” the kernel (deputy) to misuse its authority and
execute arbitrary, non-kernel code with elevated privi-
leges. Finally, while most of the attacks discussed here
target Linux, similar ﬂaws have been reported against
FreeBSD, OpenBSD, and Windows [19, 26, 59–61].
2.3 Limitations of Current Defenses
Restricting mmap The mitigation strategy adopted by
most Linux and BSD systems is to restrict the ability to
map the ﬁrst pages of the address space to users with
administrative privileges only. In Linux and FreeBSD,
this is achieved by modifying the mmap system call to
apply the respective restrictions, as well as preventing
binaries from requesting page zero mappings. OpenBSD
completely removed the ability to map page zero, while
NetBSD has not adopted any protective measures yet.
Unfortunately, this approach has several limitations.
First and foremost, it does not solve the actual problem,
which is the weak separation of spaces. Disallowing ac-
cess to lower logical addresses is merely a protection
scheme against exploits that rely on NULL pointer bugs.
If an attacker bypasses the restriction imposed by mmap,
he can still orchestrate a ret2usr attack. Second, it does
not protect against exploits where control is redirected to
memory pages above the forbidden mmap region (e.g.,
by nullifying one or two bytes of a pointer, or overwrit-
ing a branch target with an arbitrary value). Third, it
breaks compatibility with applications that rely on hav-
ing access to low logical addresses, such as QEMU [5],
Wine [70], and DOSEMU [28]. Similar problems have
been reported for the FreeBSD distribution [35].
In fact, shortly after these protection mechanisms were
set in place, many techniques were developed for circum-
venting them. The ﬁrst technique for bypassing mmap
restrictions used the brk system call for changing the
location of the program break (marked as brk offset
in Figure 5), which indicates where the heap segment
starts. By setting the break to a low logical address, it
was possible to dynamically allocate memory chunks in-
side page zero. Another technique used the mmap sys-
tem call to map pages starting from an address above the
forbidden region and extend the allocated region down-
wards, by supplying the MAP_GROWSDOWN parameter to
the call. A more elaborate mechanism utilized the differ-
ent execution domains supported by Linux, which can be
set with the personality system call, for executing
binaries compiled for different OSs. Speciﬁcally, an at-
tacker could set the personality of a binary to SRV4, thus
mapping page zero, since SRV4 utilizes the lower pages
of the address space [66]. Finally, the combination of
a NULL pointer with an integer overﬂow has also been
demonstrated, enabling attackers to completely bypass
the memory mapping restrictions [20, 21]. Despite the
fact that all the previous techniques were ﬁxed shortly
after they were discovered, it is possible that other ap-
proaches can (and probably will be) developed by persis-
tent attackers, since the root cause of this new manifes-
tation of control hijacking attacks is the weak separation
of spaces.
PaX UDEREF
[53]
In particular,
Hardening with
and
KERNEXEC are two patches included in PaX [52]
for hardening the Linux kernel.
they
provide protection against dereferencing, or branching
to, user space memory. In x86, PaX relies on memory
segmentation. It maps kernel space into an expand-down
segment that returns a memory fault whenever privileged
code tries to dereference pointers to other segments.4
In x86-64, where segmentation is not available, PaX
resorts in temporarily remapping user space memory
into a different area, using non-executable rights, when
execution enters the kernel, and restoring it when it exits.
PaX has limitations. First, it requires kernel patching
and is platform and architecture speciﬁc (i.e., x86/x86-64
Linux only). On the other hand, ret2usr attacks not only
have been demonstrated on many architectures, such as
ARM [30], DEC Alpha [31], and PowerPC [25], but also
on different OSs, like the BSDs [19, 26, 59, 61]. Sec-
ond, as we experimentally conﬁrmed, PaX incurs non-
negligible performance overhead (see Section 5). In x86,
it achieves strong isolation using the segmentation unit,
but the kernel still needs to interact with user-level pro-
cesses. Hence, PaX modiﬁes the stub that executes dur-
ing kernel entry for setting the respective segments, and
also patches code that copies data to/from user space, so
as to temporarily ﬂatten the privileged segment for the
duration of the copy. Evidently, this approach increases
system call latency. In x86-64, remapping user space re-
quires page table manipulation, which results in a TLB
ﬂush and exacerbates the problem [41].
3 Protection with kGuard
3.1 Overview
We propose a defensive mechanism that builds upon
inline monitoring and code diversiﬁcation. kGuard is
a cross-platform compiler plugin that enforces address
space segregation, without relying on special hardware
features [37, 53] or custom hypervisors [56, 62]. It pro-
tects the kernel from ret2usr attacks with low-overhead,
by augmenting exploitable control transfers with dy-
namic control-ﬂow assertions (CFAs) that, at runtime,
prevent the unconstrained transition of privileged execu-
tion paths to user space. The injected CFAs perform a
small runtime check before indirect branches to verify
that the target address is always in kernel space. If the
assertion is true, execution continues normally, while if
it fails because of a violation, execution is transferred to
a handler that was inserted during compilation. The de-
fault handler appends a warning message to the kernel
log and halts the system. We choose to coerce assertion
4In x86, UDEREF restricts only the SS, DS, and ES segments. CS
is taken care by the accompanying KERNEXEC patch.
failures into a kernel fail-stop to prevent unsafe condi-
tions, such as leaving the OS into an inconsistent state
(e.g., by aborting an in-ﬂight kernel thread that might
hold locks or other resources). In Section 6, we discuss
how we can implement custom handlers for facilitating
forensic analysis, error virtualization [63], selective con-
ﬁnement, and protection against persistent attacks.
After compiling a kernel with kGuard, its execution is
limited to the privileged address space segment (e.g., ad-
dresses higher than 0xC0000000 in x86 Linux and BSD).
kGuard does not rely on any mapping restriction, so the
previously restricted addresses can be dispensed to the
process, lifting the compatibility issues with various ap-
plications [5, 28, 35, 70]. Furthermore, the checks cannot
be bypassed using mmap hacks, like the ones described
in the previous section, nor can they be circumvented by
elaborate exploits that manage to jump to user space by
avoiding the forbidden low memory addresses. More im-
portantly, the kernel can still read and write user memory,
so its functionality remains unaffected.
3.2 Threat Model
In this work, we ascertain that an adversary is able to
completely overwrite, partially corrupt (e.g., zero out
only certain bytes), or nullify control data that are stored
inside the address space of the kernel. Notice that over-
writing certain data with arbitrary values, differs signif-
icantly from overwriting arbitrary kernel memory with
arbitrary values. kGuard does not deal with such an ad-
versary. In addition, we assume that the attacker can tam-
per with whole data structures (e.g., by mangling data
pointers), which in turn may contain control data.
Our technique is straightforward and guarantees that
kernel/user space boundary violations are prevented.
However, it is not a panacea that protects the kernel
from all types control-ﬂow hijacking attacks. For in-
stance, kGuard does not address direct code-injection
inside kernel space, nor it thwarts code-reuse attacks
that utilize return-oriented/jump-oriented programming
(ROP/JOP) [7, 40]. Nevertheless, note the following.
First and foremost, our approach is orthogonal to many
solutions that do protect against such threats [4, 14, 42,
45, 53, 62]. For instance, canaries injected by the com-
piler [34] can be used against ret2usr attacks performed
via kernel stack-smashing. Second, the unique nature of
address space sharing casts many protection schemes, for
the aforementioned problems, ineffective. As an exam-
ple, consider again the case of ROP/JOP in the kernel
setting. No matter what anti-ROP techniques have been
utilized [45, 51], the attacker can still execute arbitrary
code, as long as there is no strict process/kernel separa-
tion, by mapping his code to user space and transferring
control to it (after hijacking a privileged execution path).
Finally, in order to protect kGuard from being sub-
verted, we utilize a lightweight diversiﬁcation technique
for the kernel’s text, which can also mitigate kernel-level
attacks that use code “gadgets” in a ROP/JOP fashion
(see Section 3.5). Overall, the aim of kGuard is not to
provide strict control-ﬂow integrity for the kernel, but
rather to render a realistic threat ineffective.
3.3 Preventing ret2usr Attacks with CFAs
In the remainder of this section, we discuss the funda-
mental aspects of kGuard using examples based on x86-
based Linux systems. However, kGuard is by no means
restricted to 32-bit systems and Linux. It can be used
to compile any kernel that suffers from ret2usr attacks
for both 32- and 64-bit CPUs. kGuard “guards” indirect
control transfers from exploitation. In the x86 instruc-
tion set architecture (ISA), such control transfers are per-
formed using the call and jmp instructions with a reg-
ister or memory operand, and the ret instruction, which
takes an implicit memory operand from the stack (i.e.,
the saved return address). kGuard injects CFAs in both
cases to check that the branch target, speciﬁed by the re-
spective operand, is inside kernel space.
81 f b 00 00 00 c0 ; cmp
;
73 05
j a e
bb 00 00 00 00
; mov
f f d3
c a l l _ l b l :
;
c a l l ∗%ebx
$0xc0000000 ,% ebx
c a l l _ l b l
$ 0 x c 0 5 a f 8 f 1 ,% ebx
Snippet 3: CFAR guard applied on an indirect call in x86
Linux (drivers/cpufreq/cpufreq.c)
r e g i s t e r v o i d ∗ t a r g e t _ a d d r e s s ;
. . .
i f
( t a r g e t _ a d d r e s s  ;
c a l l ∗ t a r g e t _ a d d r e s s ;
Snippet 4: CFAR guard in C-like code (x86)
We use two different CFA guards, namely CFAR and
CFAM, depending on whether the control transfer that
we want to conﬁne uses a register or memory operand.
Snippet 3 shows an example of a CFAR guard. The code
is from the show() routine of the cpufreq driver.
kGuard instruments the indirect call (call *%ebx)
with 3 additional instructions. First, the cmp instruction
compares the ebx register with the lower kernel address
0xC0000000.5 If the assertion is true, the control transfer
is authorized by jumping to the call instruction. Oth-
erwise, the mov instruction loads the address of the vi-
olation handler (0xc05af8f1; panic()) into the branch
register and proceeds to execute call, which will result
into invoking the violation handler. In C-like code, this is
equivalent to injecting the statements shown in Snippet 4.
5The same is true for x86 FreeBSD/NetBSD, whereas for x86-64
the check should be with address 0xFFFFFFFF80000000. OpenBSD
maps the kernel to the upper 512MB of the virtual address space, and
hence, its base address in x86 CPUs is 0xD0000000.
0 x50 (% ebx ) ,% e d i
$0xc0000000 ,% e d i
kmem_lbl
; p u s h %e d i
;
l e a
; cmp
;
j a e
; pop %e d i
;
57
8 d 7b 50
81 f f 00 00 00 c0
73 06
5 f
e8 43 d6 2 d b8
5 f
81 7b 50 00 00 00 c0 ; cmpl $0xc0000000 , 0 x50 (% ebx )
73 05
c7 43 50 f 1 f 8 5 a c0 ; movl $ 0 x c 0 5 a f 8 f 1 , 0 x50 (% ebx )
f f 53 50
; kmem_lbl : pop %e d i
c a l l ∗0 x50(% ebx )
c a l l 0 x c 0 5 a f 8 f 1
c a l l _ l b l :
c a l l _ l b l
j a e
;
;
Snippet 5: CFAM guard applied on an indirect call in x86
Linux (net/socket.c)
r e g i s t e r v o i d ∗ t a r g e t _ a d d r e s s _ p t r ;
. . .
t a r g e t _ a d d r e s s _ p t r = &t a r g e t _ a d d r ;
i f
( t a r g e t _ a d d r e s s _ p t r  ;
i f
( t a r g e t _ a d d r e s s  ;
c a l l ∗ t a r g e t _ a d d r e s s ;
Snippet 6: CFAM guard in C-like code (x86)
Similarly, CFAM guards conﬁne indirect branches
that use memory operands.
Snippet 5 illustrates
how kGuard instruments the faulty control transfer of
sock_sendpage() (the original code is shown in
Snippet 1). The indirect call (call 0x50(%ebx);
Figure 5) is prepended by a sequence of 10 instructions
that perform two distinct assertions. CFAM not only
asserts that the branch target is within the kernel ad-
dress space, but also ensures that the memory address
where the branch target is loaded from is also in ker-
nel space. The latter is necessary for protecting against
cases where the attacker has managed to hijack a data
pointer to a structure that contains function pointers (see
Snippet 2 in Section 2.2). Snippet 6 illustrates how this
can be represented in C-like code. In order to perform
this dual check, we ﬁrst need to spill one of the reg-
isters in use, unless the basic block where the CFA is
injected has spare registers, so that we can use it as a
temporary variable (i.e., edi in our example). The ad-
dress of the memory location that stores the branch target
(ebx + 0x50 = 0xfa7c8538; Figure 5), is dynamically
resolved via an arithmetic expression entailing registers
and constant offsets. We load its effective address into
edi (lea 0x50(%ebx),%edi), and proceed to ver-
ify that it points in kernel space. If a violation is detected,
the spilled register is restored and control is transferred
to the runtime violation handler (call 0xc05af8f1).
Otherwise, we proceed with restoring the spilled register
and conﬁne the branch target similarly to the CFAR case.
81 7b 50 00 00 00 c0 ; cmpl $0xc0000000 , 0 x50 (% ebx )
73 05
c7 43 50 f 1 f 8 5 a c0 ; movl $ 0 x c 0 5 a f 8 f 1 , 0 x50 (% ebx
f f 53 50
c a l l ∗0 x50(% ebx )
c a l l _ l b l :
c a l l _ l b l
j a e
;
;
Snippet 7: Optimized CFAM guard
3.4 Optimizations
In certain cases, we can statically determine that the ad-
dress of the memory location that holds the branch target
is always mapped in kernel space. Examples include a
branch operand read from the stack (assuming that the
attacker has not seized control of the stack pointer), or
taken from a global data structure mapped at a ﬁxed ad-
dress inside the data segment of the kernel. In this case,
the ﬁrst assertion of a CFAM guard will always be true,
since the memory operand points within kernel space.
We optimize such scenarios by removing the redundant
assertion, effectively reducing the size of the inline guard
to 3 instructions. For instance, Snippet 7 depicts how we
can optimize the code shown in Snippet 5, assuming that
ebx is loaded with the address of a global symbol from
kernel’s data segment. ret instructions are always con-
ﬁned using the optimized CFAM variant.
3.5 Mechanism Protection
CFAR and CFAM guards, as presented thus far, provide
reliable protection against ret2usr attacks, only if the at-
tacker exploits a vulnerability that allows him to par-
tially control a computed branch target. Currently, all
the well known and published ret2usr exploits, which we
analyzed in Section 2 and further discuss in Section 5.1,
fall in this category. However, vulnerabilities where the
attacker can overwrite kernel memory with arbitrary val-
ues also exist [22]. When such ﬂaws are present, exploits
could attempt to bypass kGuard. This section discusses
how we protect against such attacks.
3.5.1 Bypass Trampolines
To subvert kGuard, an attacker has to be able to deter-
mine the address of a (indirect) control transfer instruc-
tion inside the text segment of the kernel. Moreover,
he should also be able to reliably control the value of
its operand (i.e., its branch target). We shall refer to