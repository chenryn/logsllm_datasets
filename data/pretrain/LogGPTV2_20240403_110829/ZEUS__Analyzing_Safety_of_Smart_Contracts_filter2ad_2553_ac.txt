deterministic value to the variable l. An assert statement
introduces a check of truth value of predicates in the symbolic
encoding. An assume statement blocks until the supplied
expression becomes true and speciﬁes a data state at a given
control location in a contract.
While a formal argument about the semantic equivalence
of Solidity and our abstract language is desirable and can
be established by deﬁning abstraction functions from Solidity
constructs to constructs in our abstract language, we omit
in the interest of space. Instead, we intuitively reason
it
about
the various Solidity constructs and their equivalent
modeling in our abstract language. Constructs such as class,
library and interfaces can be desugared as a collection
of global variables and functions in our abstract language.
Even compilers model them similarly when translating C/C++
code to LLVM bitcode. struct, mapping, arrays and bytes
are mapped to globals. Built-in methods such as sha256
that affect
the state of the same contract are modeled as
external functions. Functions that operate upon addresses such
as send, transfer, and call family of instructions are
modeled via the post statement. Special constructs like
selfdestruct are natively modeled in our abstract language.
All control structures including function modiﬁers in Solidity
can be desugared into if-then-else and goto. Solidity-style
exception handling using assert, require and throw also
maps directly to our abstract language using if-then and
throw. Note that assert and assume in our language are
used for veriﬁcation, and assert has semantics different from
those in Solidity. Other compiler directives such as constant
and storage are also desugared, and are thus not modeled
explicitly in our abstract language.
LANGUAGE SEMANTICS. The blockchain state is deﬁned by
the tuple: (cid:104)(cid:104)T , σ(cid:105), BC(cid:105) where (cid:104)T , σ(cid:105) is the block B being
currently mined. BC is the list of committed blocks, and T
denotes the multiset of completed transactions that are not yet
committed. Let Vals ⊆ N be the set of values that expressions
can take after evaluations. σ is the global state denoted by
the function σ : Id → g that maps contract identiﬁers to a
valuation of the global variables, where g ∈ Vals. Note that
σ is the state of the system reached after executing T in an
order as speciﬁed by the miner. Finally, each miner will add
B to their respective copies of blockchain once it is validated.
A transaction is deﬁned as a stack of frames represented
5We lose no generality with single local and global variables
6
f := (cid:104)(cid:96), id, M, pc, ν(cid:105),
by γ. Each frame is further deﬁned as:
where (cid:96) ∈ Vals is the valuation of the method-local variables
l, M is the code of the contract with the identiﬁer id, pc is
the program counter, and ν := (cid:104)i, o(cid:105) is an auxiliary memory
for storing input and output. The top frame of γ is the frame
under active execution and is relevant to the currently executing
transaction; it is not part of the persistent blockchain state. An
empty frame is denoted by . A conﬁguration c, deﬁned as
c := (cid:104)γ, σ(cid:105), captures the state of transaction execution and (cid:32)
denotes the small-step operational semantics.
Table 1 lists relevant semantic rules that govern changes
in the conﬁguration. Rules for remaining sequential statements
are standard. The symbol → is overloaded to illustrate a
transition relation for globals and blockchain states. The
symbol ← indicates an assignment to an lvar.
B. Formalizing the Policy Language
Assume PVars to be the set of program variables, Func
to be a set of function names in a contract (which is uniquely
identiﬁed by Id as deﬁned in § IV-A) and Expr to be the
set of conditional expressions speciﬁed as quantiﬁer-free ﬁrst
order logic (FOL) formulae. Policy speciﬁcation must use these
syntactic symbols to avoid any ambiguity during veriﬁcation.
ZEUS leverages user assistance to build a XACML-
styled ﬁve tuple policy speciﬁcation [51] consisting of
(cid:104)S ub, Ob j, Op, Cond, Res(cid:105). Subject S ub ∈ PVars is the set
of source variables (one or more) that need to be tracked.
Object Ob j ∈ PVars is the set of variables representing
interacts. Operation Op is
entities with which the subject
the set of side-affecting invocations that capture the effects
of interaction between the subject and the object. Op also
speciﬁes a trigger attribute, either ‘pre’ or ‘post’, indicating
whether the predicates should hold before or after the speciﬁed
operation. In other words, Op := (cid:104) f, trig(cid:105) where f ∈ Func
and trig ∈ {pre, post}. Condition Cond ∈ Expr is the set of
predicates that govern this interaction leading to the operation.
Finally, Res ∈ {T, F} indicates whether the interaction between
the subject and operation as governed by the predicates is
permitted or constitutes a violation.
TRANSLATION OF POLICY TO ASSERTIONS. Our abstract
language includes assertions for deﬁning state reachability
properties on the smart contract. ZEUS leverages the policy
tuple to extract: (a) predicate (i.e., Cond) to be asserted, and (b)
the correct control location for inserting the assert statements
in the program source.
Notice that Cond is an expression in our abstract language.
Thus, taking this expression predicate and wrapping it under
assert(exp)creates a statement in our abstract language.
Res indicates whether the condition will appear in its normal
or negated form in the assert statement. Op indicates the
function invocations where the predicates (as indicated by the
condition) must satisfy trig. This trig attribute along with
S ub and Ob j precisely discriminates which invocations of the
operation should be preﬁxed or sufﬁxed with the condition. In
other words, we precisely know the control locations in the
abstract program P where Cond must be asserted.
: S ub × Ob j × Op → Loc where Loc
is the set of program locations. Operationally, this function is
More formally,
f
Rule
Semantics
Description
LookupS tmt(M, pc) = (x := post f nc@Id(cid:48)(i(cid:48))),
f = (cid:104)(cid:96), Id, M, pc,(cid:104)i,∗(cid:105)(cid:105), c = (cid:104) f.A, σ(cid:105)
f (cid:48) ← (cid:104)(cid:96)(cid:48), Id(cid:48), M(cid:48), 0,(cid:104)i(cid:48),∗(cid:105)(cid:105)
c (cid:32) c[γ (cid:55)→ f (cid:48). f.A]
LookupS tmt(M(cid:48), pc(cid:48)) = return e,
f (cid:48) = (cid:104)(cid:96)(cid:48), Id(cid:48), M(cid:48), pc(cid:48),(cid:104)i(cid:48), 1(cid:105), c = (cid:104) f (cid:48). f.A, σ(cid:105)
c (cid:32) c[γ (cid:55)→ f [pc (cid:55)→ pc + 1, (cid:96) (cid:55)→ (cid:96)new].A]
f ← (cid:104)(cid:96), Id, M, pc,(cid:104)i,∗(cid:105)(cid:105)
LookupS tmt(M(cid:48), pc(cid:48)) = throw,
f (cid:48) ← (cid:104)(cid:96)(cid:48), Id(cid:48), M(cid:48), pc(cid:48),(cid:104)i(cid:48), 0(cid:105)(cid:105), c = (cid:104) f (cid:48). f.A, σ(cid:105)
f ← (cid:104)(cid:96), Id, M, pc,(cid:104)i,∗(cid:105)(cid:105)
f (cid:48) ← (cid:104)(cid:96)(cid:48), Id(cid:48), M(cid:48), pc(cid:48),(cid:104)i(cid:48),∗(cid:105)(cid:105), c = (cid:104) f (cid:48). f.A, σ(cid:105)
c (cid:32) c[ f [pc (cid:55)→ pc + 1, (cid:96) (cid:55)→ (cid:96)new].A]
LookupS tmt(M(cid:48), pc(cid:48)) = selfdestruct
del Id(cid:48), c (cid:32) c[ f [pc (cid:55)→ pc + 1].A]
LookupS tmt(M, pc) = assert e
f ← (cid:104)(cid:96), Id, M, pc,(cid:104)i,∗(cid:105)(cid:105), c = (cid:104) f.A, σ(cid:105)
c (cid:32) c[ f [pc (cid:55)→ pc + 1].A]
(cid:104)γ, σ(cid:105) (cid:32)∗ (cid:104), σ(cid:48)(cid:105),
T ← γ
B → B[T (cid:55)→ T ∪ {T}, σ (cid:55)→ σ(cid:48)]
LookupS tmt(M, pc) = throw,
f ← (cid:104)(cid:96), Id, M, pc,(cid:104)i,⊥(cid:105)(cid:105), c = (cid:104) f., σ(cid:105)
c (cid:32) c[ f. (cid:55)→ ]
(cid:104)(cid:104)T , σ(cid:105), BC(cid:105),(cid:104), σ(cid:105)
(cid:104)(cid:104)T , σ(cid:105), BC(cid:105) → (cid:104)(cid:104), σ(cid:105), BC.T(cid:105)
Post-Invoke
Post-Return-Succ
Post-Return-Fail
Self-destruct
Assert
Tx-Success
Tx-Failure
Add-block
This rule creates a new frame f (cid:48) and adds it to the top of the stack of frames f.A. Calling a function does not
lead to any change in the global state σ as illustrated by the sequent. Note that frames can only be created
when a client invokes a contract’s publicly visible methods or via the post instruction.
The rule updates the output of f (cid:48) to 1 and pops it from the stack of frames, updates the value of local variable
(from (cid:96) to (cid:96)new) in the calling frame f , and ﬁnally updates pc of the procedure corresponding to f .
The procedure for f (cid:48) throws an exception. This results in the output of f (cid:48) being updated to 0. In the calling
frame f , the pc is advanced by 1 and local variable valuation is updated with the output of f (cid:48). The frame f (cid:48)
itself is removed from the stack frame.
When a method in contract with identiﬁer Id(cid:48)
to
immediately pop off. The pc of the calling frame is advanced and the contract Id(cid:48) is registered for deletion.
issues a selfdestruct, it causes the associated frame f (cid:48)
Assert instruction only leads in advancement of the pc. The real use for assert is in generating veriﬁcation
conditions for the method.
If an execution of a transaction T proceeds to completion without exceptions, then the transaction is added to
the multiset of completed transactions.
Since an exception of a callee frame does not propagate upwards to the caller, a transaction can fail only when
the starting method frame throws an exception. In such an event, the list of completed transactions remains
the same while the stack frame is made empty.
The list of completed transactions is committed to the blockchain by this rule. We have explicitly ignored the
broadcast and veriﬁcation of proof-of-work as they have no affect on the global or blockchain state.
Table 1: Semantic rules for abstract assertion language. Note that M can be obtained by calling LookupCode(Id, σ) and the statement
about to be executed can be obtained by the function LookupStmt(M, pc) where pc is pointing to the next statement to be executed.
realized by performing a taint-analysis to determine the set
of locations where S ub and Ob j are conjunctively used. This
set is further reﬁned by choosing only those control locations
where the speciﬁed operation is invoked. The ﬁnal locations
are the ones where Cond must be asserted based on trig.
C. Soundness
The proof
for soundness of
to our abstract
the translation from a
Solidity contract
language with assertions
(corresponding to policy predicates), and ﬁnally into LLVM
bitcode entails the following steps. First, we discuss that
translation of Solidity code into our abstract language does not
affect semantic behavior. Second, we argue that a conservative
placement of asserts does not affect the soundness of the
approach. Third, we reduce the problem of policy conﬁrmation
to a state reachability problem. Fourth, we provide a deﬁnition
of state reachability in the context of a Solidity program. Fifth,
we demonstrate that by ensuring state reachability on an over-
approximate version of the program, we do not miss on any
program behaviors. Lastly, we argue that since our translation
from this over-approximate Solidity program to LLVM bitcode
is a faithful expression-to-expression translation, our overall
soundness modulo the decision procedure is preserved.
(I) TRANSFORMATION FROM SOLIDITY TO ABSTRACT
LANGUAGE. Since Solidity maps semantically to our abstract
language (per § IV-A), this translation preserves the semantic
behavior of the original program. While a formal argument
about the semantic equivalence of Solidity and our abstract
language is desirable, we omit it in the interest of space.
7
OF
are
SEMANTIC
the policies
INTERPRETATION
(II) EFFECT OF TAINT ANALYSIS ON SOUNDNESS. Note that
taint-analysis, which is required to determine the locations
at which to assert the predicates, is conservative. Thus, it
may potentially insert asserts at multiple locations. While such
extraneous asserts may introduce false positives, they do not
affect false negatives. Hence, the approach is sound.
POLICY
(III)
CONFIRMATION. Since
restricted to
quantiﬁer-free FOL, policy conﬁrmation can be reduced to
a state reachability problem,
i.e., does there exist a state
reachable from the start state at which the policy does not
hold? Formally, a policy φ holds on a program P when
N |= φ, where N is a formal representation of program P as a
state-transitioning ﬁnite automaton. Note that assert(exp)
in the abstract language has different semantics than the assert
statements in high-level languages such as C (per Table 1).
(IV) ASSERTION SAFETY IN A PROGRAM IMPLIES POLICY
CONFIRMATION. Consider a program ˆP (corresponding to a
Solidity program P) in our abstract language but without any
asserts or havocs. Let B ˆP be the set of behaviors of ˆP
described as B ˆP = {s | ∀ s0 ∈ I, s ∈ Reach(s, s0)} where I is the
set of initial states and the relation Reach(s, s(cid:48)) is true iff s →∗
s(cid:48). Consider the translation ˆP → ˆP(cid:48), where ˆP(cid:48) has asserts
inserted according to the rules governed by the compilation of
policies into asserts as described above.
Lemma 1: Assertion safety in ˆP(cid:48) ⇔ Assertion safety in ˆP.
Proof: The semantic rule for the assert statement indicates
no change in the data state of the program except the change
of the program counter. asserts are relevant only as tags
for the underlying veriﬁer to generate veriﬁcation conditions.
Thus, it follows that B ˆP = B ˆP(cid:48), which implies that assertion
safety in ˆP(cid:48) is equivalent to assertion safety in ˆP.
(V) SOUNDNESS VIA OVER-APPROXIMATION. Consider
now a translation of program ˆP(cid:48) to ˆP(cid:48)(cid:48), where deﬁnition of
global variables is replaced by havoc statements.
Lemma 2: Assertion safety in ˆP(cid:48)(cid:48) ⇒ Assertion safety in ˆP(cid:48).
Proof: It is clear that any havoc(x) statement in the program
expands the domain of legitimate values that the variable x
can take to the type-deﬁned domain of that variable. Thus,
B ˆP(cid:48) ⊆ B ˆP(cid:48)(cid:48). This relation implies our lemma statement.
Theorem 1: Assertion safety of P(cid:48)(cid:48) ⇒ Assertion safety of P.
Proof: The proof follows from Lemma 1 and 2.
(VI) SOUNDNESS OF METHODOLOGY. Let P(cid:48)(cid:48)(cid:48) be a faithful
translation of the over-approximate program P(cid:48)(cid:48) into LLVM
bitcode. Table 2 lists the details of our semantically equivalent
expression-to-expression translation strategy. In other words,
ˆP(cid:48)(cid:48) (cid:27) ˆP(cid:48)(cid:48)(cid:48). Like prior art [54], a formal proof for soundness of
the translation strategy is outside the scope of this work.
Thus, the overall soundness of our methodology logically
follows from Theorem 1 and ˆP(cid:48)(cid:48) (cid:27) ˆP(cid:48)(cid:48)(cid:48), and the established
soundness of ZEUS’ underlying decision procedure [61].
D. Symbolic Model Checking via CHCs
ZEUS uses prior art [61] to emit veriﬁcation conditions as
CHCs for the translated program ˆP(cid:48)(cid:48)(cid:48). The strength of the CHC
representation enables it to interface with a variety of SMT-
based solvers and off-the-shelf model checkers [56], [63].
E. End-to-end example
Fig. 12 presents an end-to-end example complete with
all program transformations. The Solidity snippet sends
msg.value to the address msg.sender and updates its local
balance by subtracting the same from bal[msg.sender]. The
example policy checks that the send invocation must satisfy
the condition that the balance for the user must be greater
than the value to be sent. ZEUS extracts the predicate from
the policy condition and places it as an assert in the Solidity
code. Subsequently, it transforms it into the abstract language.
Lastly, ZEUS translates this program into LLVM bitcode.
V.
IMPLEMENTATION
We implement a prototype of ZEUS as described in § IV.
We implement the policy builder and the Solidity to LLVM
bitcode translator in C++ using the AST of the smart contract
derived from the Solidity compiler solc [41]. The policy
builder and the translator (including the LLVM passes for bug
detection) required around 500 and 3000 LOC respectively.
For ease of implementation, we leverage Seahorn [61]
as our symbolic model checking backend for veriﬁcation of
policies. Instead of building the veriﬁer from scratch, we
determined that Seahorn provides us with an off-the-shelf
implementation of generating veriﬁcation conditions using
CHCs over LLVM bitcode. Furthermore, use of existing tools
8
function transfer() {
msg.sender.send(msg.value);
balance = balance - msg.value;
}
 msg.sender 
 msg.value 
 send 
 msg.value 
 True 
havoc balance
B@δ() {
(cid:48)
assert(value  msg.sender 
 a.seller 
 placeBid 
 a.seller != msg.sender 
 True 
Fig. 13: Fairness policy for example in Fig. 10.
that have been tested for bugs and ﬁne tuned for performance,
both of which are critical for veriﬁers, helps reduce ZEUS’s
false alarms and improve veriﬁcation times. However, as will
be shown later in § VI-D, ZEUS is not tied to Seahorn; it
can be used with any other veriﬁer that operates upon LLVM
bitcode, such as SMACK [72] or DIVINE [52].
A. Policy Builder
ZEUS extracts the identiﬁer information (for subjects and
objects) from the corresponding AST node in the solc parser