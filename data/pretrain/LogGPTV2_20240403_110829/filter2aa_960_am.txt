2020/12/21 11:53:51     agouser               agouser - Microsoft Office Outlook 2007
2: http://www.nytimes.com/packages/pdf/business/DOCXIndictment.docx
2020/12/21 11:53:51     AGO                   Gonder, Nanci - Microsoft Office Word 2007
3: http://www.nytimes.com/packages/pdf/business/BrownIndictment.docx
2020/12/21 11:53:51     AGO                   Gonder, Nanci - Microsoft Office Word 2007
4: http://graphics8.nytimes.com/packages/pdf/health/Introduction.docx
2020/12/21 11:53:51     Oberg, Amanda M       Karen Barrow - Microsoft Macintosh Word 2010
You can now search for and extract document metadata for all Open 
XML files while targeting a specific domain. I encourage you to expand on 
this example to include logic to navigate multipage Bing search results, to 
include other file types beyond Open XML, and to enhance the code to 
concurrently download the identified files.
Summary
This chapter introduced to you fundamental HTTP concepts in Go, which 
you used to create usable tools that interacted with remote APIs, as well as 
to scrape arbitrary HTML data. In the next chapter, you’ll continue with 
the HTTP theme by learning to create servers rather than clients.
前沿信安资讯阵地  公众号：i nf osrc
If you know how to write HTTP servers 
from scratch, you can create customized 
logic for social engineering, command-and-
control (C2) transports, or APIs and frontends 
for your own tools, among other things. Luckily, Go has 
a brilliant standard package—net/http—for building 
HTTP servers; it’s really all you need to effectively write not only simple 
servers, but also complex, full-featured web applications.
In addition to the standard package, you can leverage third-party pack-
ages to speed up development and remove some of the tedious processes, 
such as pattern matching. These packages will assist you with routing, 
building middleware, validating requests, and other tasks. 
In this chapter, you’ll first explore many of the techniques needed to 
build HTTP servers using simple applications. Then you’ll deploy these 
techniques to create two social engineering applications—a credential-
harvesting server and a keylogging server—and multiplex C2 channels. 
4
H T T P SE R V E R S,  
RO U T ING, A N D M IDDL E WA R E
前沿信安资讯阵地  公众号：i nf osrc
78   Chapter 4
HTTP Server Basics
In this section, you’ll explore the net/http package and useful third-party 
packages by building simple servers, routers, and middleware. We’ll expand 
on these basics to cover more nefarious examples later in the chapter.
Building a Simple Server
The code in Listing 4-1 starts a server that handles requests to a single path. 
(All the code listings at the root location of / exist under the provided github 
repo https://github.com/blackhat-go/bhg/.) The server should locate the name 
URL parameter containing a user’s name and respond with a customized 
greeting.
package main
import (
    "fmt"
    "net/http"
)
func hello(w http.ResponseWriter, r *http.Request) {
    fmt.Fprintf(w, "Hello %s\n", r.URL.Query().Get("name"))
}
func main() {
    u http.HandleFunc("/hello", hello)
    v http.ListenAndServe(":8000", nil)
}
Listing 4-1: A Hello World server (/ch-4/hello_world /main.go)
This simple example exposes a resource at /hello. The resource grabs 
the parameter and echoes its value back to the client. Within the main() func-
tion, http.HandleFunc() u takes two arguments: a string, which is a URL path 
pattern you’re instructing your server to look for, and a function, which will 
actually handle the request. You could provide the function definition as 
an anonymous inline function, if you want. In this example, you pass in the 
function named hello() that you defined earlier.
The hello() function handles requests and returns a hello message 
to the client. It takes two arguments itself. The first is http.ResponseWriter, 
which is used to write responses to the request. The second argument is a 
pointer to http.Request, which will allow you to read information from the 
incoming request. Note that you aren’t calling your hello() function from 
main(). You’re simply telling your HTTP server that any requests for /hello 
should be handled by a function named hello().
Under the covers, what does http.HandleFunc() actually do? The Go doc-
umentation will tell you that it places the handler on the DefaultServerMux. 
A ServerMux is short for a server multiplexer, which is just a fancy way to say that 
the underlying code can handle multiple HTTP requests for patterns and 
functions. It does this using goroutines, with one goroutine per incoming 
前沿信安资讯阵地  公众号：i nf osrc
HTTP Servers, Routing, and Middleware    79
request. Importing the net/http package creates a ServerMux and attaches it 
to that package’s namespace; this is the DefaultServerMux.
The next line is a call to http.ListenAndServe() v, which takes a string and 
an http.Handler as arguments. This starts an HTTP server by using the first 
argument as the address. In this case, that’s :8000, which means the server 
should listen on port 8000 across all interfaces. For the second argument, the 
http.Handler, you pass in nil. As a result, the package uses DefaultServerMux as 
the underlying handler. Soon, you’ll be implementing your own http.Handler 
and will pass that in, but for now you’ll just use the default. You could also use 
http.ListenAndServeTLS(), which will start a server using HTTPS and TLS, as 
the name describes, but requires additional parameters. 
Implementing the http.Handler interface requires a single method: 
ServeHTTP(http.ResponseWriter, *http.Request). This is great because it simpli-
fies the creation of your own custom HTTP servers. You’ll find numerous 
third-party implementations that extend the net/http functionality to add 
features such as middleware, authentication, response encoding, and more. 
You can test this server by using curl:
$ curl -i http://localhost:8000/hello?name=alice
HTTP/1.1 200 OK
Date: Sun, 12 Jan 2020 01:18:26 GMT
Content-Length: 12
Content-Type: text/plain; charset=utf-8
Hello alice
Excellent! The server you built reads the name URL parameter and 
replies with a greeting.
Building a Simple Router
Next you’ll build a simple router, shown in Listing 4-2, that demonstrates 
how to dynamically handle inbound requests by inspecting the URL path. 
Depending on whether the URL contains the path /a, /b, or /c, you’ll print 
either the message Executing /a, Executing /b, or Executing /c. You’ll print a 
404 Not Found error for everything else.
package main
import (
    "fmt"
    "net/http"
)
u type router struct {
}
v func (r *router) ServeHTTP(w http.ResponseWriter, req *http.Request) {
    w switch req.URL.Path {
    case "/a":
        fmt.Fprint(w, "Executing /a")
前沿信安资讯阵地  公众号：i nf osrc
80   Chapter 4
    case "/b":
        fmt.Fprint(w, "Executing /b")
    case "/c":
        fmt.Fprint(w, "Executing /c")
    default:
        http.Error(w, "404 Not Found", 404)
    }
}
func main() {
    var r router
    x http.ListenAndServe(":8000", &r)
}
Listing 4-2: A simple router (/ch-4/simple_router /main.go)
First, you define a new type named router without any fields u. You’ll 
use this to implement the http.Handler interface. To do this, you must define 
the ServeHTTP() method v. The method uses a switch statement on the 
request’s URL path w, executing different logic depending on the path. 
It uses a default 404 Not Found response action. In main(), you create a 
new router and pass its respective pointer to http.ListenAndServe() x. 
Let’s take this for a spin in the ole terminal:
$ curl http://localhost:8000/a
Executing /a
$ curl http://localhost:8000/d
404 Not Found
Everything works as expected; the program returns the message Executing 
/a for a URL that contains the /a path, and it returns a 404 response on a 
path that doesn’t exist. This is a trivial example. The third-party routers 
that you’ll use will have much more complex logic, but this should give you 
a basic idea of how they work.
Building Simple Middleware
Now let’s build middleware, which is a sort of wrapper that will execute on all 
incoming requests regardless of the destination function. In the example in 
Listing 4-3, you’ll create a logger that displays the request’s processing start 
and stop time.
Package main
import (
        "fmt"
        "log"
        "net/http"
        "time"
)
前沿信安资讯阵地  公众号：i nf osrc
HTTP Servers, Routing, and Middleware    81
u type logger struct {
        Inner http.Handler
}
v func (l *logger) ServeHTTP(w http.ResponseWriter, r *http.Request) {
        log.Println("start")
        w l.Inner.ServeHTTP(w, r)
        log.Println("finish")
}
func hello(w http.ResponseWriter, r *http.Request) {
        fmt.Fprint(w, "Hello\n")
}
func main() {
        x f := http.HandlerFunc(hello)
        y l := logger{Inner: f}
        z http.ListenAndServe(":8000", &l)
}
Listing 4-3: Simple middleware (/ch-4/simple _middleware /main.go)
What you’re essentially doing is creating an outer handler that, on 
every request, logs some information on the server and calls your hello() 
function. You wrap this logging logic around your function. 
As with the routing example, you define a new type named logger, but 
this time you have a field, Inner, which is an http.Handler itself u. In your 
ServeHTTP() definition v, you use log() to print the start and finish times of 
the request, calling the inner handler’s ServeHTTP() method in between w. 
To the client, the request will finish inside the inner handler. Inside main(), 
you use http.HandlerFunc() to create an http.Handler out of a function x. You 
create the logger, setting Inner to your newly created handler y. Finally, you 
start the server by using a pointer to a logger instance z. 
Running this and issuing a request outputs two messages containing 
the start and finish times of the request: 
$ go build -o simple_middleware
$ ./simple_middleware
2020/01/16 06:23:14 start
2020/01/16 06:23:14 finish
In the following sections, we’ll dig deeper into middleware and routing 
and use some of our favorite third-party packages, which let you create more 
dynamic routes and execute middleware inside a chain. We’ll also discuss 
some use cases for middleware that move into more complex scenarios.
Routing with the gorilla/mux Package
As shown in Listing 4-2, you can use routing to match a request’s path to 
a function. But you can also use it to match other properties—such as the 
HTTP verb or host header—to a function. Several third-party routers are 
前沿信安资讯阵地  公众号：i nf osrc
82   Chapter 4
available in the Go ecosystem. Here, we’ll introduce you to one of them: the 
gorilla/mux package. But just as with everything, we encourage you to expand 
your knowledge by researching additional packages as you encounter them.
The gorilla/mux package is a mature, third-party routing package that 
allows you to route based on both simple and complex patterns. It includes 
regular expressions, parameter matching, verb matching, and sub routing, 
among other features.
Let’s go over a few examples of how you might use the router. There is 
no need to run these, as you’ll be using them in a real program soon, but 
please feel free to play around and experiment. 
Before you can use gorilla/mux, you must go get it:
$ go get github.com/gorilla/mux
Now, you can start routing. Create your router by using mux.NewRouter():
r := mux.NewRouter()
The returned type implements http.Handler but has a host of other 
associated methods as well. The one you’ll use most often is HandleFunc(). 
For example, if you wanted to define a new route to handle GET requests 
to the pattern /foo, you could use this:
r.HandleFunc("/foo", func(w http.ResponseWriter, req *http.Request) {
    fmt.Fprint(w, "hi foo")
}).Methods("GET")u
Now, because of the call to Methods() u, only GET requests will match 
this route. All other methods will return a 404 response. You can chain 
other qualifiers on top of this, such as Host(string), which matches a partic-
ular host header value. For example, the following will match only requests 
whose host header is set to www.foo.com:
r.HandleFunc("/foo", func(w http.ResponseWriter, req *http.Request) {
    fmt.Fprint(w, "hi foo")
}).Methods("GET").Host("www.foo.com")
Sometimes it’s helpful to match and pass in parameters within the 
request path (for example, when implementing a RESTful API). This is 
simple with gorilla/mux. The following will print out anything following 
/users/ in the request’s path:
r.HandleFunc("/users/{user}", func(w http.ResponseWriter, req *http.Request) {
    user := mux.Vars(req)["user"]
    fmt.Fprintf(w, "hi %s\n", user)
}).Methods("GET")
前沿信安资讯阵地  公众号：i nf osrc
HTTP Servers, Routing, and Middleware    83
In the path definition, you use braces to define a request parameter. 
Think of this as a named placeholder. Then, inside the handler function, 
you call mux.Vars(), passing it the request object, which returns a map[string]
string—a map of request parameter names to their respective values. You 
provide the named placeholder user as the key. So, a request to /users/bob 
should produce a greeting for Bob: 
$ curl http://localhost:8000/users/bob
hi bob
You can take this a step further and use a regular expression to qualify 
the patterns passed. For example, you can specify that the user parameter 
must be lowercase letters:
r.HandleFunc("/users/{user:[a-z]+}", func(w http.ResponseWriter, req *http.Request) {
    user := mux.Vars(req)["user"]
    fmt.Fprintf(w, "hi %s\n", user)
}).Methods("GET")
Any requests that don’t match this pattern will now return a 404 response:
$ curl -i http://localhost:8000/users/bob1
HTTP/1.1 404 Not Found
In the next section, we’ll expand on routing to include some middle-
ware implementations using other libraries. This will give you increased 
flexibility with handling HTTP requests.
Building Middleware with Negroni
The simple middleware we showed earlier logged the start and end times of 
the handling of the request and returned the response. Middleware doesn’t 
have to operate on every incoming request, but most of the time that will 
be the case. There are many reasons to use middleware, including logging 
requests, authenticating and authorizing users, and mapping resources. 
For example, you could write middleware for performing basic authenti-
cation. It could parse an authorization header for each request, validate the 
username and password provided, and return a 401 response if the creden-
tials are invalid. You could also chain multiple middleware functions together 
in such a way that after one is executed, the next one defined is run.
For the logging middleware you created earlier in this chapter, you 
wrapped only a single function. In practice, this is not very useful, because 
you’ll want to use more than one, and to do this, you must have logic that 
can execute them in a chain, one after another. Writing this from scratch 
is not incredibly difficult, but let’s not re-create the wheel. Here, you’ll use 
a mature package that is already able to do this: negroni.
The negroni package, which you can find at https://github.com/urfave 
/negroni/, is great because it doesn’t tie you into a larger framework. You 
can easily bolt it onto other frameworks, and it provides a lot of flexibility. 
前沿信安资讯阵地  公众号：i nf osrc
84   Chapter 4
It also comes with default middleware that is useful for many applications. 
Before you hop in, you need to go get negroni:
$ go get github.com/urfave/negroni
While you technically could use negroni for all application logic, doing 
this is far from ideal because it’s purpose-built to act as middleware and 
doesn’t include a router. Instead, it’s best to use negroni in combination with 
another package, such as gorilla/mux or net/http. Let’s use gorilla/mux to 
build a program that will get you acquainted with negroni and allow you to 
visualize the order of operations as they traverse the middleware chain.
Start by creating a new file called main.go within a directory namespace, 
such as github.com/blackhat-go/bhg/ch-4/negroni _example/. (This namespace 
will already be created in the event you cloned the BHG Github repository.) 
Now modify your main.go file to include the following code.
package main
import (
    "net/http"
    "github.com/gorilla/mux"
    "github.com/urfave/negroni"
)
func main() {
    u r := mux.NewRouter()
    v n := negroni.Classic()
    w n.UseHandler(r)
    http.ListenAndServe(":8000", n)
}
Listing 4-4: Negroni example (/ch-4/negroni _example /main.go)
First, you create a router as you did earlier in this chapter by calling 
mux.NewRouter() u. Next comes your first interaction with the negroni pack-
age: you make a call to negroni.Classic() v. This creates a new pointer to a 
Negroni instance. 