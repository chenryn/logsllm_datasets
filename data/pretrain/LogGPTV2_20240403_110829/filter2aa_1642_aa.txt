Bypass AMSI的前世今生(6) - .net和wmi（完结）
0x00 前言
这是这个系列完结篇了，其实读完并跟随文章实际测试完前5篇，对抗AMSI应该手到擒来了。这一篇主
要分析下AMSI在.net和WMI中的应用，以分析调用流程为主，对抗方式为辅。明白了原理，在实际攻防
中灵活运用就行了。
0x01 .Net如何调用AMSI
通过第一篇文章我们知道.net调用amsi.dll的文件是clr.dll
我们通过IDA静态分析找到相应的调用函数,如下是F5后的伪代码：
C:\Windows\WinSxS\amd64_netfx4-
clr_dll_b03f5f7f11d50a3a_4.0.15805.360_none_395be0019a54e460\clr.dll
__int64 __fastcall sub_1805F7BE0(__int64 a1, unsigned int a2)
{
  __int64 result; // rax
  __int64 v5; // rsi
  int v6; // ebx
  __int64 v7; // rdi
  HMODULE v8; // r14
  __int64 v9; // [rsp+38h] [rbp-18h] BYREF
  int v10; // [rsp+40h] [rbp-10h]
  void *v11; // [rsp+48h] [rbp-8h]
  void *retaddr; // [rsp+78h] [rbp+28h] BYREF
  unsigned int v13; // [rsp+90h] [rbp+40h] BYREF
  __int64 v14; // [rsp+98h] [rbp+48h] BYREF
  result = (__int64)&retaddr;
  v5 = qword_180A19640;
  v9 = qword_180A19640;
  v6 = 0;
  v10 = 0;
  if ( qword_180A19640 )
  {
    result = sub_180033588(qword_180A19640);
    v6 = 1;
    v10 = 1;
  }
  v7 = qword_180A33D40;
  if ( !qword_180A33D40 && byte_180A34740 == (_BYTE)qword_180A33D40 )
  {
    result = sub_18015A744();
    if ( (_DWORD)result
      && (result = LoadLibraryEx(L"amsi.dll", 0i64, 0x800u), (v8 = 
(HMODULE)result) != 0i64)
      && (result = (__int64)GetProcAddress((HMODULE)result, "AmsiInitialize"), 
(qword_180A33D30 = result) != 0)
      && (v14 = 0i64,
          result = ((__int64 (__fastcall *)(const wchar_t *, __int64 *))result)
(L"DotNet", &v14),
Produced by AttackTeamFamily - Author: L.N. - Date: 2021-10-20
No. 1 / 9 - Welcome to www.red-team.cn
这个代码如果看着不太明白，我们，可以直接阅读被复原的C代码，来至：https://modexp.wordpress.
com/2019/06/03/disable-amsi-wldp-dotnet/，到这儿不由感慨，当我在阅读伪代码的时候，为了搜索
其中一些错误嘛，发现了这篇文章，真的是前任栽树后人乘凉：
          !(_DWORD)result) )
    {
      result = (__int64)GetProcAddress(v8, "AmsiScanBuffer");
      qword_180A33D28 = (__int64 (__fastcall *)(_QWORD, _QWORD, _QWORD, _QWORD, 
_QWORD, _QWORD, _QWORD, _QWORD, _DWORD))result;
      v7 = qword_180A33D40;
      if ( result )
        v7 = v14;
      qword_180A33D40 = v7;
    }
    else
    {
      v7 = qword_180A33D40;
    }
    byte_180A34740 = 1;
  }
  if ( v6 )
  {
    result = sub_1800335D0(v5);
    v10 = 0;
    v7 = qword_180A33D40;
  }
  if ( v7 )
  {
    result = qword_180A33D28(v7, a1, a2, 0i64, 0i64, &v13, -2i64, v9, v10);
    if ( !(_DWORD)result )
    {
      if ( v13 >= 0x8000 || (result = v13 - 0x4000, (unsigned int)result <= 
0xFFF) )
      {
        v9 = 0x200000002i64;
        v10 = 16;
        v11 = &unk_1807EB6E8;
        sub_18066E0E8(-2147024671);
        sub_18066FA4C(2147942411i64, &v9);
      }
    }
  }
  return result;
}
AmsiScanBuffer_t _AmsiScanBuffer;
AmsiInitialize_t _AmsiInitialize;
HAMSICONTEXT     *g_amsiContext;
VOID AmsiScan(PVOID buffer, ULONG length) {
    HMODULE          amsi;
    HAMSICONTEXT     *ctx;
    HAMSI_RESULT     amsiResult;
    HRESULT          hr;
    // if global context not initialized
    if(g_amsiContext == NULL) {
Produced by AttackTeamFamily - Author: L.N. - Date: 2021-10-20
No. 2 / 9 - Welcome to www.red-team.cn
阅读完这个代码，你会发现和第五篇中分析powershell调用amsi.dll大致逻辑差不多。但是对返回的结
果HRESULT的判断不一样，在powershell中返回如果出错，就判断为不被侦测，而.NET中并没有对错误
进行判断，只有 hr == S_OK的判断，也就是说默认返回错误，也就被判断为不被侦测了。因此我们第五
篇文章中的bypass方法也适用于.NET。
      // load AMSI.dll
      amsi = LoadLibraryEx(
        L"amsi.dll", 
        NULL, 
        LOAD_LIBRARY_SEARCH_SYSTEM32);
      if(amsi != NULL) {
        // resolve address of init function
        _AmsiInitialize = 
          (AmsiInitialize_t)GetProcAddress(amsi, "AmsiInitialize");
        // resolve address of scanning function
        _AmsiScanBuffer =
          (AmsiScanBuffer_t)GetProcAddress(amsi, "AmsiScanBuffer");
        // failed to resolve either? exit scan
        if(_AmsiInitialize == NULL ||
           _AmsiScanBuffer == NULL) return;