title:Hamsa: Fast Signature Generation for Zero-day PolymorphicWorms with
Provable Attack Resilience
author:Zhichun Li and
Manan Sanghi and
Yan Chen and
Ming-Yang Kao and
Brian Chavez
Hamsa∗: Fast Signature Generation for Zero-day Polymorphic Worms with
Provable Attack Resilience
Zhichun Li
Manan Sanghi
Yan Chen
Ming-Yang Kao
Brian Chavez
Northwestern University
Evanston, IL 60208, USA
{lizc,manan,ychen,kao,cowboy}@cs.northwestern.edu
Abstract
Zero-day polymorphic worms pose a serious threat to
the security of Internet infrastructures. Given their rapid
propagation, it is crucial to detect them at edge networks
and automatically generate signatures in the early stages
of infection. Most existing approaches for automatic sig-
nature generation need host information and are thus not
applicable for deployment on high-speed network links. In
this paper, we propose Hamsa, a network-based automated
signature generation system for polymorphic worms which
is fast, noise-tolerant and attack-resilient. Essentially, we
propose a realistic model to analyze the invariant content
of polymorphic worms which allows us to make analytical
attack-resilience guarantees for the signature generation
algorithm. Evaluation based on a range of polymorphic
worms and polymorphic engines demonstrates that Hamsa
signiﬁcantly outperforms Polygraph [16] in terms of efﬁ-
ciency, accuracy, and attack resilience.
1 Introduction
The networking and security community has proposed
intrusion detection systems (IDSes) [19, 22] to defend
against malicious activity by searching the network trafﬁc
for known patterns, or signatures. So far these signa-
tures for the IDSes are usually generated manually or
semi-manually, a process too slow for defending against
self-propagating malicious codes, or worms, which can
compromise all the vulnerable hosts in a matter of a few
hours, or even a few minutes [25]. Thus, it is critical
to automate the process of worm detection, signature
generation and signature dispersion.
∗Hamsa (pronounced ‘hum-sa’) is the sanskrit word for the swan bird
which has the mystical potency of separating out the milk from a mixture
of milk and water.
To evade detection by signatures, attackers could employ
polymorphic worms which change their byte sequence at
every successive infection. Our goal is to design an auto-
matic signature generation system for polymorphic worms
which could be deployed at the network level (gateways and
routers) and hence thwart a zero-day worm attack.
Such a signature generation system should satisfy the
following requirements.
Network-based. Most of the existing approaches [4,
14, 26, 31] work at the host level and usually have ac-
cess to information that is not available at the network
routers/gateways level (e.g., the system calls made after re-
ceiving the worm packets). According to [25], the propaga-
tion speed of worms in their early stage is close to exponen-
tial. So in the early stage of infection only a very limited
number of worm samples are active on the Internet and the
number of machines compromised is also limited. Hence,
it is unlikely that a host will see the early worm packets
and be able to respond in the critical early period of at-
tack. Therefore, the signature generation system should be
network-based and deployed at high-speed border routers
or gateways that sees the majority of trafﬁc. The require-
ment of network-based deployment severely limits the de-
sign space for detection and signature generation systems
and motivates the need for high-speed signature generation.
Noise-tolerant. Signature generation systems typically
need a ﬂow classiﬁer to separate potential worm trafﬁc from
normal trafﬁc. However, network-level ﬂow classiﬁcation
techniques [10, 18, 28–30] invariably suffer from false pos-
itives which lead to noise in the worm trafﬁc pool. Noise is
also an issue for honeynet sensors [12, 26, 31]. For exam-
ple, attackers may send some legitimate trafﬁc to a honeynet
sensor to pollute the worm trafﬁc pool and to evade noise-
intolerant signature generation.
Attack-resilient. Since the adversary for the algorithm
is a human hacker, he may readily adapt his attacks to evade
the system. Therefore, the system should not only work
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:47:34 UTC from IEEE Xplore.  Restrictions apply. 
for known attacks, but also be resilient against any possible
evasion tactics.
Efﬁcient Signature Matching. Since the signatures
generated are to be matched against every ﬂow encountered
by the NIDS/ﬁrewall, it is critical to have high-speed signa-
ture matching algorithms. Moreover, for the network-level
signature matching, the signatures must solely be based on
the network ﬂows. Though it is possible to incorporate host-
based information such as system calls in the signatures, it
is generally very difﬁcult to get efﬁcient matching for these
signatures on the network level.
Hamsa
system
Internet
Switch
Splitter
Router
Switch
LAN
LAN
Figure 1. Attaching Hamsa to high-speed
routers
Towards meeting these requirements, we propose
Hamsa, a network-based automatic signature generation
system designed to meet the aforementioned requirements.
Hamsa can be connected to routers via a span (mirror) port
or an optical splitter as shown in Figure 1. Most modern
switches are equipped with a span port to which copies of
the trafﬁc from a list of ports can be directed. Hamsa can
use such a span port for monitoring all the trafﬁc ﬂows.
Alternatively, we can use a splitter such as a Critical Tap [6]
to connect Hamsa to routers. Such splitters are fully passive
and used in various NIDS systems to avoid affecting the
trafﬁc ﬂow.
Hamsa is based on the assumption that a worm must ex-
ploit one or more server speciﬁc vulnerabilities. This con-
strains the worm author to include some invariant bytes that
are crucial for exploiting the vulnerabilities [16].
We formally capture this idea by means of an adversary
model Γ which allows the worm author to include any byte
strings for the worm ﬂows as long as each ﬂow contains
tokens present in the invariant set I in any arbitrary order.
Under certain uniqueness assumptions on the tokens in I
we can analytically guarantee signatures with bounded false
positives and false negatives.
Since the model allows the worm author to choose any
bytes whatsoever for the variant part of the worm, Hamsa is
provably robust to any polymorphism attack. Such analyt-
ical guarantees are especially critical when designing algo-
rithms against a human adversary who is expected to adapt
his attacks to evade our system. However, to the best of our
knowledge, we are the ﬁrst to provide such analytical guar-
antees for polymorphic worm signature generation systems.
To give a concrete example, we design an attack in Sec-
tion 3.2 which could be readily employed by an attacker to
evade state-of-the-art techniques like Polygraph [16] while
Hamsa successfully ﬁnds the correct signature.
The signature generation is achieved by simple greedy
algorithms driven by appropriately chosen values for the
model parameters that capture our uniqueness assumptions
and are fast in practice. Compared with Polygraph, Hamsa
is tens or even hundreds of times faster, as veriﬁed both an-
alytically and experimentally. Our C++ implementation can
generate signatures for a suspicious pool of 500 samples of
a single worm with 20% noise and a 100MB normal pool
within 6 seconds with 500MB of memory 1. Thus Hamsa
can respond to worm attacks in its crucial early stage. We
also provide techniques for a variety of memory and speed
trade-offs to further improve the memory requirements. For
instance, using MMAP we can reduce the memory usage
for the same setup to about 112MB and increase the runtime
only by around 5-10 seconds which is the time required to
page fault 100MB from disk to memory. All the experi-
ments were executed on a 3.2GHz Pentium IV machine.
In the absence of noise, the problem of generating con-
junction signatures, as discussed by Polygraph, is easily
solved in polynomial time. Presence of noise drastically
affects the computational complexity. We show that ﬁnding
multi-set signatures, which are similar to Polygraph’s con-
junction signatures, in the presence of noise is NP-Hard.
In terms of noise tolerance, can bound the false positive
by a small constant while the bound on false negative de-
pends on the noise in the suspicious trafﬁc pool. The more
accurate is the worm ﬂow classiﬁer in distinguishing worm
ﬂows from the normal ﬂows, the better is the bound on false
negatives that we achieve. We also provide a generalization
for measuring the goodness of signature using any reason-
able scoring function and extend our analytical guarantees
to that case.
We validate our model of worm ﬂows experimentally
and also propose values for parameters characterizing the
uniqueness condition using our experimental results. Eval-
uations on a range of polymorphic worms and polymorphic
engines demonstrate that Hamsa is highly efﬁcient, accu-
rate, and attack resilient, thereby signiﬁcantly outperform-
ing Polygraph [16].
Paper Layout We discuss the problem space and a high
level design of Hamsa in Section 2. We formulate the signa-
ture generation problem in Section 3 and present our algo-
rithm in Section 4. In Section 5 we generalize our problem
formulation to better capture the notion of a “good” signa-
ture. We discuss some implementation details in Section 6
1if the data is pre-loaded in memory
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:47:34 UTC from IEEE Xplore.  Restrictions apply. 
Network
Tap
Protocol
Classifier
TCP
25
TCP
53
TCP
80
.   .   .
TCP
137
UDP
1434
Known
Worm
Filter
Worm
Flow
Classifier
Normal traffic 
reservoir
Suspicious
Traffic Pool
Normal
Traffic Pool
Hamsa
Signature
Generator
Signatures
Real time
Policy driven
Normal
Traffic Pool
Suspicious
Traffic Pool
Token
Identification
Core
Signature
Refiner
Signature
Token
Extractor
Tokens
NO
Pool size
too small?
Filter
YES
Quit
Figure 2. Architecture of Hamsa Monitor
Figure 3. Hamsa Signature Generator
and evaluate Hamsa in Section 7. Finally we compare with
related work in Section 8 and conclude in Section 9.
2 Problem Space and Hamsa System Design
2.1 Two Classes for Polymorphic Signa-
tures
Signatures for polymorphic worms can be broadly classi-
ﬁed into two categories - content-based and behavior-based.
Content-based signatures aim to exploit the residual similar-
ity in the byte sequences of different instances of polymor-
phic worms. There are two sources of such residual similar-
ity. One is that some byte patterns may be unavoidable for
the successful execution of the worm. The other is due to
the limitations of the polymorphism inducing code. In con-
trast, behavior based signatures ignore the byte sequences
and instead focus on the actual dynamics of the worm exe-
cution to detect them.
Hamsa focuses on content-based signatures. An ad-
vantage of content-based signatures is that they allows us
to treat the worms as strings of bytes and does not depend
upon any protocol or server information. They also have
fast signature matching algorithms [27] and can easily be
incorporated into ﬁrewalls or NIDSes. Next we discuss the
likelihood for different parts of a worm (, γ, π) [5] to con-
tain invariant content.
•  is the protocol frame part, which makes a vulnerable
server branch down the code path to the part where a
software vulnerability exists.
• γ represents the control data leading to control ﬂow
hijacking, such as the value used to overwrite a jump
target or a function call.
• π represents the true worm payload, the executable
code for the worm.
The  part cannot be freely manipulated by the attackers
because the worm needs it to lead the server to a speciﬁc
vulnerability. For Codered II, the worm samples should
necessarily contain the tokens “ida” or “idq”, and “%u”.
Therefore,  is a prime source for invariant content. More-
over, since most vulnerabilities are discovered in code that
is not frequently used [5], it is arguable that the invariant in
 is usually sufﬁciently unique.
For the γ part, many buffer overﬂow vulnerabilities need
to hard code the return address into the worm, which is a
32-bit integer of which at least the ﬁrst 23-bit should ar-
guably be the same across all the worm samples. For in-
stance, the register springs can potentially have hundreds of
way to make the return address different, but use of regis-
ter springs increases the worm size as it needs to store all
the different address. It also requires considerable effort to
look for all the feasible instructions in libc address space for
register springing.
For the π part, a perfect worm using sophisticated en-
cryption/decryption (SED) may not contain any invariant
content. However, it is not trivial to implement such per-
fect worms.
As mentioned in [5], it is possible to have a perfect worm
which leverages a vulnerability by using advanced register
springs and SED techniques does not contain any invari-
ance. This kind of a worm can evade not only our system,
but any content-based systems. But in practice such worms
are not very likely to occur.
2.2 Hamsa System Design
Figure 2 depicts the architecture of Hamsa which is sim-
ilar to the basic frameworks of Autograph [10] and Poly-
graph [16]. We ﬁrst need to sniff the trafﬁc from networks,
assemble the packets to ﬂows, and classify the ﬂows based
on different protocols (TCP/UDP/ICMP) and port numbers.
Then for each protocol and port pair, we need to ﬁlter out
the known worm samples and then separate the ﬂows into
the suspicious pool (M) and the normal trafﬁc reservoir us-
ing a worm ﬂow classiﬁer. Then based on a normal traf-
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:47:34 UTC from IEEE Xplore.  Restrictions apply. 
ﬁc selection policy we select some part of the normal traf-
ﬁc reservoir to be the normal trafﬁc pool (N ). Since it is
usually easy to collect a large amount of normal trafﬁc and
we found experimentally that Hamsa is not sensitive to the
normal trafﬁc pool, we can selectively choose the amount
and the period of normal trafﬁc we use for the normal traf-
ﬁc pool. This strategy prevents attackers from controlling
which normal trafﬁc is used by Hamsa and also allows pre-
processing of the normal trafﬁc pool. The suspicious and
normal trafﬁc pools are given as input to the signature gen-
erator (Figure 3) which outputs signatures as described in
Sections 4 and 5.
Token Extractor For the token extraction we use a sufﬁx
array based algorithm [15] to ﬁnd all byte sequences that
occur in at least λ fraction of all the ﬂows in suspicious
pool. The idea is that the worm ﬂows will constitute at least
λ fraction of the pool and thus we can reduce the number of
tokens that we need to consider.
Core This part implements the algorithms described in
Sections 4 and 5.
Token Identiﬁcation The goal of token identiﬁcation is
to test the tokens’ speciﬁcity in the normal trafﬁc pool.
Signature Reﬁner This module ﬁnds all common tokens
from the ﬂows in the suspicious pool that match the signa-
ture outputted by the core. This way we can make our sig-
nature more speciﬁc (lower false positive) without affecting
its sensitivity (the coverage of the suspicious pool).
3 Problem Deﬁnition and Computational
Challenge
‘host’,
‘http://1.1’,
A token is a byte sequence that occurs in a signiﬁcant
number of ﬂows in the suspicious pool. In particular we