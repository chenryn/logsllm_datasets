# 如何利用Active Directory中的ACL提升权限
|
##### 译文声明
本文是翻译文章，文章来源：blog.fox-it.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 一、前言
在内部渗透测试中，我们经常可以在几个小时以内获取域管访问权限，原因在于相关系统并没有经过足够的安全加固，运维人员使用了默认的不安全的Active
Directory（活动目录）设置。在这种场景中，许多公开工具可以帮助我们查找并利用这些缺陷，最终获得域管理员访问权限。在本文中我们描述了一种渗透场景，其中我们无法使用标准的攻击方法，只能深入挖掘才能获得目标域中的高等级权限。我们介绍了如何使用访问控制列表（Acccess
Control Lists）来提升权限，也发布了[Invoke-Aclpwn](https://github.com/fox-it/Invoke-ACLPwn)这款新型工具，该工具是[ntlmrelayx](https://github.com/CoreSecurity/impacket/blob/master/examples/ntlmrelayx.py)的扩充，可以自动执行这种高级的攻击步骤。
## 二、AD、ACL以及ACE
随着大家对网络安全方面的理解变得更加成熟也更加深刻，我们不得不深入研究才能在Active
Directory（AD）中提升权限。在这类场景中，枚举是一项非常关键的技术。AD目录中的ACL（访问控制列表）经常容易被人忽视。ACL指的就是一组规则，定义了哪些实体在特定的AD对象上具备哪些权限。这些对象可以是用户账户、组、计算机账户、域本身等等。ACL可以在某个对象（比如用户账户）上进行配置，也可以在Organizational
Unit（OU，类似于AD内的一个目录）上配置。在OU上配置ACL的主要优点在于，如果配置得当，所有的后继对象都将继承ACL。对象所属的OU对应的ACL中包含一个ACE（Access
Control
Entry，访问控制项），定义了OU以及/或者子对象上对应的标识以及权限。ACE中的标识不一定是用户账户本身；将权限应用于AD的安全组（security
groups）是一种常见的做法。将用户账户添加为该安全组的成员后，该用户账户就可以被赋予ACE中配置的权限，因为用户账户与安全组为隶属关系。
AD中的组成员关系属于递归从属关系，举个例子，假设我们有3个组：
  * Group_A 
    * Group_B 
      * Group_C
Group_C为Group_B的成员，而Group_B自己又是Group_A的成员。当我们将Bob添加为Group_C的成员，Bob不仅是Group_C的成员，也是Group_B以及Group_A的间接成员。这意味着当Group_A具备某个对象或者资源的访问权限时，Bob也同样具备该资源的访问权限。被访问的资源可以是NTFS文件共享、打印机或者某个AD对象（比如用户、计算机、组或者域本身）。
为AD安全组提供权限以及访问控制权是维护和管理（访问）IT基础架构的好方法。然而，如果嵌套关系过于复杂，可能就会存在一些安全隐患。前面提到过，如果某个用户是某个组的直接或者间接成员，那么该用户就会继承该组对某个资源的所有权限。如果Group_A被赋予修改AD中域对象的权限，那么Bob自然就会继承这些权限。然而，如果某个用户仅属于某个组，是该组的直接成员，但这个组又是其他50个组的间接成员，那么想理清这种权限继承关系显然要花费不少精力。
## 三、利用Exchange在AD中提升权限
在最近的渗透测试中，我们成功获取了某个用户账户权限，该用户为`Organization
Management`组的成员。当安装Exhcange时会创建这个组，赋予其访问Exchange相关活动的访问权限。除了能访问这些Exchange设置选项以外，该组的成员还可以修改其他Exchange安全组的组成员关系，比如`Exchange
Trusted Subsystem`安全组。这个组是`Exchange Windows Permissions`安全组的成员之一。
默认情况下，如果某个域安装了Exchange，那么`Exchange Windows
Permissions`安全组就具备该域对象的`writeDACL`权限[1]。
`writeDACL`权限可以允许持有者修改特定对象的权限（换句话说就是修改ACL），这意味着只要成为`Organization
Management`组的成员，我们就可以提升成为域管理员权限。
为了利用这一点，我们将之前已获得的用户账户添加至`Exchange Trusted
Subsystem`组中。再次登录后（因为只有在登录时才会加载安全组成员关系），现在我们已成为`Exchange Trusted
Subsystem`以及`Exchange Windows Permission`组的成员，这样我们就可以修改域的ACL。
如果我们可以修改某个AD对象的ACL，我们就可以给某个账户分配权限，使其可以向某个属性（比如包含电话号码的属性）中写入数据。除了为这些属性分配读写权限之外，我们还可以进一步分配，使其具备更多的权限。这些权限为预定义的任务，包括修改密码的权限、往邮箱发送电子邮件等等[2]。我们还可以为任意账户添加如下扩展权限，使其成为当前域的复制（replication）同伴：
    Replicating Directory Changes
    Replicating Directory Changes All
当我们给这个用户账户设置这些权限后，我们就可以请求域中任何用户的密码散列，其中也包括域的`krbtgt`账户。大家可以参考[GitHub](https://github.com/gdedrouas/Exchange-AD-Privesc)深入了解这种权限提升技术。
当然，成功控制`Organization
Management`组下某个用户账户并不是经常出现的事情。尽管如此，我们还是可以在更广泛的层面上使用这种技术。`Organization
Management`组很有可能受另一个小组管理，而这个组又有可能被其他组管理，以此类推。这意味着域环境中存在一条难以发现的关系链，如果某一环出问题，整个域就可能沦陷。
为了帮助大家利用关系链存在的这种安全风险，Fox-IT编写了两款工具。第一款工具使用PowerShell编写，可以在AD环境内部或者外部运行。第二款工具是ntlmrelayx工具的扩展，这个扩展可以让攻击者将身份标识（用户账户以及计算机账户）转发至活动目录，修改域对象的ACL。
## 四、Invoke-ACLPwn
Invoke-ACLPwn是一个Powershell脚本，可以使用集成的凭据或者指定的凭据来运行。这款工具的工作原理是使用SharpHound导出域内所有ACL以及当前用户账户下的组成员关系。如果用户不具备域对象的`writeDACL`权限，该工具会枚举域内ACL的所有ACE。ACE中的每个标识都拥有自己的ACL，也会被添加到枚举队列中进行处理。为了枚举所有信息，整个过程需要一点时间，但最终很有可能理出一条关系链，获得域对象的`writeDACL`权限。
当算出关系链后，脚本就会开始处理链中可能被利用的每一环：
1、将用户加入必要的组中；
2、将两个ACE（`Replicating Directory Changes`、`Replicating Directory Changes
All`）添加到域对象的ACL中：
3、如果有必要，则使用Mimikatz的DCSync功能请求给定用户账户的哈希值。默认情况下会使用`krbtgt`账户。
利用过程结束后，该脚本会移除利用过程中添加的组成员关系，也会删掉域对象ACL中的ACE。
为了测试脚本是否能正常工作，我们创建了26个安全组。每个组都是另一个组的成员（即`testgroup_a`是`testgroup_b`，而`testgroup_b`又是`testgroup_c`的成员，以此类推，直到`testgroup_z`为止）。
`testgroup_z`安全组具备修改`Organization Management`安全组的成员关系权限。前面提到过，这个组有权修改`Exchange
Trusted Subsystem`安全组的组成员关系。只要我们成为该组的成员，就有权修改活动目录中域对象的ACL。
现在我们拥有包含31条链接的一条关系链：