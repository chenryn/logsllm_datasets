很高兴看到 Helm 如何跟踪所有版本，并允许通过一个`helm upgrade`命令轻松升级应用。
注意
Helm 版本包含图表中的所有 Kubernetes 模板，这使得将它们作为一个单元跟踪(从版本的角度来看)变得容易得多。
让我们学习如何进行发布回滚。我们会这样做，因为发行版有时会变坏，需要回滚。
# 回滚到以前的 Helm 版本
在本节中，让我们看看如何使用`helm rollback`命令将回滚到以前的版本。
`helm rollback`命令是 Helm 独有的，它允许我们回滚整个应用，因此您不必担心具体需要回滚哪些 Kubernetes 资源。
当然，在处理现实应用的发布标识时，数据库模式也会发生变化，因此要回滚前端应用，您也必须回滚数据库模式的变化。这意味着事情并不总是像这里看起来的那样简单，但是使用 Helm 仍然简化了应用发布回滚过程的某些部分。
要运行`helm rollback`命令，我们首先需要知道我们想要回滚到的发布版本，可以通过以下命令找到:
```
$ helm history postgresql
```
下面的屏幕截图显示了前面命令的输出:
![Figure 9.13 – Listing Helm release revisions ](img/B16411_09_013.jpg)
图 9.13–列出 Helm 版本修订
在前面的`helm history postgresql`命令中，我们得到了一个版本修订列表。
所以，我们想把`postgresql`回滚到修订`1`:
```
$ helm rollback postgresql 1
```
下面的屏幕截图显示了前面命令的输出:
![Figure 9.14 – Helm rollback release ](img/B16411_09_014.jpg)
图 9.14–舵回退释放
在前面的截图中，我们看到回滚是用`helm rollback postgresql 1`命令完成的，现在我们看到了三个修订，因为即使在回滚时，也会创建一个新版本。
如您所见，回滚到以前的版本非常容易。
# 使用 Helm 的模板命令
使用 Helm 的 helm `template`命令，您可以在完全渲染的 Kubernetes 资源模板中检查图表的输出。这是一个检查模板输出的非常方便的命令，尤其是当您正在开发一个新的图表、对图表进行更改、调试等等时。
因此，让我们通过运行以下命令来检查它:
```
$ helm template postgresql center/bitnami/postgresql --version=9.3.2 -f password-values.yaml
```
前面的命令将在屏幕上打印所有模板。当然，您也可以将其导出到文件中。
由于输出很长，我们不打算打印所有内容，而只打印 Kubernetes 清单的一部分:
```
---
# Source: postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: postgresql
...
---
# Source: postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: postgresql-headless
...
---
# Source: postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: postgresql
...
---
# Source: postgresql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgresql-postgresql
...
```
前面的输出显示了`postgresql`图表中的所有资源。资源以`---`划分。
`helm template`是一个强大的命令，用于检查图表的模板并打印输出，以便您通读。`helm template`没有连接到 Kubernetes 集群，它只是用值填充模板并打印输出。
您可以通过在`helm upgrade`命令中添加`--dry-run --debug`标志来实现同样的目的。有了这个，Helm 将根据 Kubernetes 集群验证模板。
完整命令的示例如下所示:
```
$ helm template postgresql center/bitnami/postgresql --version=9.3.2 -f password-values.yaml --dry-run --debug
```
在安装或升级我们的 Helm 版本之前，我们已经学习了一些方便的 Helm 命令。
使用`helm template`的另一个强大用例是将模板渲染到一个文件中，然后进行比较。这对于比较图表版本或定制参数对最终输出的影响非常有用。
# 创建掌舵图
我们已经学会了许多用 Helm 可以做的酷把戏！现在让我们学习如何创建一个 Helm 图表。
`helm create`命令为您创建了一个示例图表，因此您可以将其用作基础，并使用所需的 Kubernetes 资源、值等对其进行更新。它创建了一个完全工作的`nginx`图表，所以我们要用这个名字来命名这个图表。
现在让我们检查一下通过运行以下命令创建图表有多容易:
```
$ helm create nginx
```
下面的屏幕截图显示了前面命令的输出:
![Figure 9.15 – The helm create command ](img/B16411_09_015.jpg)
图 9.15–舵创建命令
在前面的截图中，我们运行了`helm create nginx`命令，其中`nginx`是我们的图表名称。该名称还用于创建存储图表内容的新文件夹。使用`tree nginx`命令显示文件夹结构。
在截图中可以看到，`deployment.yaml`文件、**水平 Pod 自动缩放器** ( **HPA** )、`ingress`、`service`、`serviceaccount`资源模板已经创建，所有的都提供了一个很好的起点。
前面的命令也创建了`test-connection.yaml`文件，所以我们可以用`helm test`对安装的`nginx`图表进行测试。
现在让我们通过运行以下命令来安装图表:
```
$ helm install nginx nginx
```
下面的屏幕截图显示了前面命令的输出:
![Figure 9.16 – Installing the nginx chart ](img/B16411_09_016.jpg)
图 9.16–安装 nginx 图表
在前面的截图中，我们运行了`helm install nginx nginx`。该命令使用以下基本语法:
```
helm install  
```
这里，``是本地文件夹，所以请注意，您可以从远程 Helm 存储库安装图表，也可以从本地文件夹安装图表，两者都使用相同的命令。
我们使用的下一个命令如下:
```
kubectl get all -l "app.kubernetes.io/name=nginx" 
```
该命令帮助我们在图表中显示默认情况下部署的资源。
正如我们已经提到的命令，让我们看看该命令是如何工作的:
```
$ helm test nginx
```
下面的屏幕截图显示了前面命令的输出:
![Figure 9.17 – Testing the nginx chart ](img/B16411_09_017.jpg)
图 9.17–测试 nginx 图表
前面的`helm test nginx`命令针对名为`nginx`的 Helm 版本运行测试。`kubectl get pods`命令的输出显示了用于运行图表测试然后被停止的`nginx-test-connection`Pod 。
接下来，我们来检查一下`test-connection.yaml`文件的内容:
```
$ cat nginx/templates/tests/test-connection.yaml
```
下面的屏幕截图显示了前面命令的输出:
![Figure 9.18 – test-connection.yaml content ](img/B16411_09_018.jpg)
图 9.18–测试连接. yaml 内容
在前面的截图中，您可以看到一个简单的 pod 模板，它针对`nginx`服务资源运行`curl`命令。
当实际的 Kubernetes 资源被创建时，这一行`args: ['{{ include "nginx.fullname" . }}:{{ .Values.service.port }}']`模板代码被转换为`nginx:80`。
简单易行，对吧？我们可以看到，`helm create`命令用示例资源模板，甚至用测试模板创建了一个工作图。
# 使用 Helm 的林挺功能
到目前为止，我们已经学习了如何创建一个 Helm 图表。然而，我们也需要知道如何检查图表中的可能出现的问题和错误。为此，我们可以使用`helm lint `命令，该命令将通过运行一系列测试来检查 Helm 图表内容，以验证图表的完整性。
让我们`lint`我们已经创建的`nginx`图表:
```
$ helm lint nginx
```
下面的屏幕截图显示了前面命令的输出:
![Figure 9.19 – Linting the nginx chart ](img/B16411_09_019.jpg)
图 9.19–林挺 nginx 图表
正如你在前面截图中看到的，我们的图表没有问题，可以安全安装。`[INFO]`消息只是图表图标丢失的警告，可以放心忽略。
如果你想在[中托管你的图表，例如在](https://chartcenter.io)中，它会显示在它的用户界面中，那么真的建议你拥有它。
# 用插件扩展头盔
头盔也可以用插件扩展。插件对于扩展不属于 Helm 命令行界面的 Helm 功能很有用，因为 Helm 可能没有您需要的一切。
目前还没有一个集中的 Helm 插件库，在那里你可以看到所有可用插件的列表，也没有一个 Helm 插件管理器。
由于大多数插件都存储在 GitHub 存储库中，建议使用 GitHub 主题`helm-plugin`来标记插件，您可以在那里轻松搜索可用的插件:
![Figure 9.20 – Helm plugins search on GitHub ](img/B16411_09_020.jpg)
图 9.20–GitHub 上的 Helm 插件搜索
在之前的截图[中，https://github.com/search?q=helm-plugin](https://github.com/search?q=helm-plugin)被用来在 GitHub 中搜索 Helm 插件。
让我们看看安装一个 Helm 插件有多容易:
```
$ helm plugin list
```
下面的屏幕截图显示了前面命令的输出:
![Figure 9.21 – Helm plugin helm-diff being installed ](img/B16411_09_021.jpg)
图 9.21–正在安装 Helm 插件 helm-diff
在前面的命令`helm plugin list`中，我们检查了安装的插件，然后我们使用`helm plugin`安装[https://github.com/databus23/helm-diff](https://github.com/databus23/helm-diff)来安装`helm-diff`插件。前面的插件安装输出被剪切，因为安装的插件打印了很多信息。
让我们检查插件列表:
```
$ helm plugin list
```
下面的屏幕截图显示了前面命令的输出:
![Figure 9.22 – Helm plugin list ](img/B16411_09_022.jpg)
图 9.22–Helm 插件列表
我们看到安装了`diff`插件，基本上是一个新的 Helm 命令:`helm diff`。
我们不会去检查`helm diff`是如何工作的，但是它是一个非常方便的版本，因为你可以检查安装的和新的图表版本之间的差异。
让我们再安装一个:
```
$ helm plugin install https://github.com/instrumenta/helm-kubeval
```
下面的屏幕截图显示了前面命令的输出:
![Figure 9.23 – Helm plugin install helm-kubeval ](img/B16411_09_023.jpg)
图 9.23–helm 插件安装 helm-ku eval
前面的命令，`helm plugin install` 安装了`kubeval`插件，该插件根据 Kubernetes 模式验证 Helm 图表。
让我们验证一下之前用`helm create`创建的`nginx`图表:
```
$ helm kubeval nginx
```
下面的屏幕截图显示了前面命令的输出:
![Figure 9.24 – Validating nginx chart with kubeval plugin ](img/B16411_09_024.jpg)
图 9.24–使用 kubeval 插件验证 nginx 图表
前面的`helm kubeval nginx`命令验证了`nginx`图表——正如我们所看到的，它是绿色的，所以没有问题。这个插件是对`helm lint`命令的一个很好的补充，两者的组合给你一个很好的工具来检查图表。
现在，我们知道如何用额外的功能扩展 Helm，因为一个工具不可能拥有一切。插件也很容易写，当然你可以在自己的时间里学习。
# 总结
在本章中，我们学习了如何使用 Helm 来安装、升级、回滚版本、检查图表模板的输出、创建图表、林挺图表以及使用插件扩展 Helm。
Helm 是一个强大的工具，您可以使用它来部署简单和复杂的 Kubernetes 应用。它将帮助您部署真实世界的应用，尤其是有这么多不同的图表可以从许多 Helm 存储库中使用。
在本书的最后一章，我们将为 Docker 用户学习`kubectl`最佳实践和`kubectl`命令。