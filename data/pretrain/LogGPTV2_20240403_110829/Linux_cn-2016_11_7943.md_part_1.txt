---
author: Dennis Turpitka
category: 软件开发
comments_data:
- date: '2016-11-17 23:02:09'
  message: 这篇文章的作者肯定是被Linux驱动弄疯了，但是还是很政治正确的拍Linux马屁。----win万岁！
  postip: 180.121.68.209
  username: 来自江苏南通的 Chrome 54.0|Mac 10.12 用户
- date: '2017-02-18 21:39:30'
  message: 终于知道为什么有些驱动linux的源码烂遍大街，windows版的却找死了都找不到
  postip: 60.255.139.97
  username: 来自四川的 UC Browser 9.7|Android 2.3 用户
count:
  commentnum: 2
  favtimes: 6
  likes: 0
  sharetimes: 0
  viewnum: 13154
date: '2016-11-09 13:06:00'
editorchoice: true
excerpt: 了解这些差异以及每个系统的具体情况是为您的设备提供有效的驱动程序开发和支持的关键的第一步。我们希望这篇文章对 Windows 和 Linux 设备驱动程序开发做的对比，有助于您理解它们，并在设备驱动程序开发过程的研究中，将此作为一个伟大的起点。
fromurl: http://xmodulo.com/linux-vs-windows-device-driver-model.html
id: 7943
islctt: true
largepic: /data/attachment/album/201611/09/130601brm3lwzy3vyphslp.jpg
permalink: /article-7943-1.html
pic: /data/attachment/album/201611/09/130601brm3lwzy3vyphslp.jpg.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: 了解这些差异以及每个系统的具体情况是为您的设备提供有效的驱动程序开发和支持的关键的第一步。我们希望这篇文章对 Windows 和 Linux 设备驱动程序开发做的对比，有助于您理解它们，并在设备驱动程序开发过程的研究中，将此作为一个伟大的起点。
tags:
- 设备
- 驱动
thumb: false
title: Linux 与 Windows 的设备驱动模型对比：架构、API 和开发环境比较
titlepic: true
translator: FrankXinqi
updated: '2016-11-09 13:06:00'
---
![](/data/attachment/album/201611/09/130601brm3lwzy3vyphslp.jpg)
> 
> 名词缩写：
> 
> 
> *  API 应用程序接口   （    Application Program Interface    ） 
> *  ABI 应用系统二进制接口   （    Application Binary Interface    ） 
> 
> 
> 
设备驱动是操作系统的一部分，它能够通过一些特定的编程接口便于硬件设备的使用，这样软件就可以控制并且运行那些设备了。因为每个驱动都对应不同的操作系统，所以你就需要不同的 Linux、Windows 或 Unix 设备驱动，以便能够在不同的计算机上使用你的设备。这就是为什么当你雇佣一个驱动开发者或者选择一个研发服务商提供者的时候，查看他们为各种操作系统平台开发驱动的经验是非常重要的。
![](/data/attachment/album/201611/09/130632sl88zs2lt080t272.jpg)
驱动开发的第一步是理解每个操作系统处理它的驱动的不同方式、底层驱动模型、它使用的架构、以及可用的开发工具。例如，Linux 驱动程序模型就与 Windows 非常不同。虽然 Windows 提倡驱动程序开发和操作系统开发分别进行，并通过一组 ABI 调用来结合驱动程序和操作系统，但是 Linux 设备驱动程序开发不依赖任何稳定的 ABI 或 API，所以它的驱动代码并没有被纳入内核中。每一种模型都有自己的优点和缺点，但是如果你想为你的设备提供全面支持，那么重要的是要全面的了解它们。
在本文中，我们将比较 Windows 和 Linux 设备驱动程序，探索不同的架构，API，构建开发和分发，希望让您比较深入的理解如何开始为每一个操作系统编写设备驱动程序。
### 1. 设备驱动架构
Windows 设备驱动程序的体系结构和 Linux 中使用的不同，它们各有优缺点。差异主要受以下原因的影响：Windows 是闭源操作系统，而 Linux 是开源操作系统。比较 Linux 和 Windows 设备驱动程序架构将帮助我们理解 Windows 和 Linux 驱动程序背后的核心差异。
#### 1.1. Windows 驱动架构
虽然 Linux 内核分发时带着 Linux 驱动，而 Windows 内核则不包括设备驱动程序。与之不同的是，现代 Windows 设备驱动程序编写使用 Windows 驱动模型（WDM），这是一种完全支持即插即用和电源管理的模型，所以可以根据需要加载和卸载驱动程序。
处理来自应用的请求，是由 Windows 内核的中被称为 I/O 管理器的部分来完成的。I/O 管理器的作用是是转换这些请求到 I/O 请求数据包   （    IO Request Packets    ） （IRP），IRP 可以被用来在驱动层识别请求并且传输数据。
Windows 驱动模型 WDM 提供三种驱动， 它们形成了三个层：
*  过滤   （    Filter    ） 驱动提供关于 IRP 的可选附加处理。
*  功能   （    Function    ） 驱动是实现接口和每个设备通信的主要驱动。
*  总线   （    Bus    ） 驱动服务不同的配适器和不同的总线控制器，来实现主机模式控制设备。
一个 IRP 通过这些层就像它们经过 I/O 管理器到达底层硬件那样。每个层能够独立的处理一个 IRP 并且把它们送回 I/O 管理器。在硬件底层中有硬件抽象层（HAL），它提供一个通用的接口到物理设备。
#### 1.2. Linux 驱动架构
相比于 Windows 设备驱动，Linux 设备驱动架构根本性的不同就是 Linux 没有一个标准的驱动模型也没有一个干净分隔的层。每一个设备驱动都被当做一个能够自动的从内核中加载和卸载的模块来实现。Linux 为即插即用设备和电源管理设备提供一些方式，以便那些驱动可以使用它们来正确地管理这些设备，但这并不是必须的。
模式输出那些它们提供的函数，并通过调用这些函数和传入随意定义的数据结构来沟通。请求来自文件系统或网络层的用户应用，并被转化为需要的数据结构。模块能够按层堆叠，在一个模块进行处理之后，另外一个再处理，有些模块提供了对一类设备的公共调用接口，例如 USB 设备。
Linux 设备驱动程序支持三种设备：