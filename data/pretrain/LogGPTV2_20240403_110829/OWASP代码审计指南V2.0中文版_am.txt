### Role-Based Access Control

- **Employee and Temp-Employee Roles:**
  - The `employee` and `temp-employee` roles have access to all methods of the `EmployeeService` bean.
  - **Beans:**
    - `EmployeeService`
    - **Methods:**
      - All methods (`*`)

- **Employee Role:**
  - The `employee` role has access to the `findByPrimaryKey`, `getEmployeeInfo`, and `updateEmployeeInfo(String)` methods of the `AardvarkPayroll` bean.
  - **Beans:**
    - `AardvarkPayroll`
  - **Methods:**
    - `findByPrimaryKey`
    - `getEmployeeInfo`
    - `updateEmployeeInfo(String)`

- **Admin Role:**
  - The `admin` role has access to all methods of the `EmployeeServiceAdmin` bean.
  - **Beans:**
    - `EmployeeServiceAdmin`
  - **Methods:**
    - All methods (`*`)

- **Authenticated Users:**
  - Any authenticated user may access all methods of the `EmployeeServiceHelp` bean.
  - **Beans:**
    - `EmployeeServiceHelp`
  - **Methods:**
    - All methods (`*`)

- **Restricted Methods:**
  - No `fireTheCTO` methods of the `EmployeeFiring` bean may be used in this deployment.
  - **Beans:**
    - `EmployeeFiring`
  - **Methods:**
    - `fireTheCTO` (not allowed)

### XML Deployment Descriptors

If using XML deployment descriptors to secure the application, code audits should include the `web.xml` and `ejb-jar.xml` files to ensure that access control is correctly applied to roles and that the methods are as expected.

### JEE Annotations for Security

The Java documentation [2] defines JEE annotations for security. Available annotations include:

- `@DeclareRoles`: Declares the roles that can be used in the application.
- `@DenyAll`: Denies access to the method for any role.
- `@PermitAll`: Allows access to the method for all roles.
- `@RolesAllowed`: Specifies the roles that are allowed to call the method.
- `@RunAs`: Runs the method with a specific role dynamically.

**Example:**

```java
public class Movies {
    private EntityManager entityManager;

    @RolesAllowed({"Employee", "Manager"})
    public void addMovie(Movie movie) throws Exception {
        entityManager.persist(movie);
    }

    @RolesAllowed({"Manager"})
    public void deleteMovie(Movie movie) throws Exception {
        entityManager.remove(movie);
    }

    @PermitAll
    public List<Movie> getMovies() throws Exception {
        Query query = entityManager.createQuery("SELECT m FROM Movie m");
        return query.getResultList();
    }
}
```

Code audits should look for these annotations and ensure they reflect the correct roles and permissions, consistent with those declared in the `ejb-jar.xml` file.

### Application Server-Specific Configurations

#### Apache Tomcat

- **Audit `server.xml`**: Ensure that security-related parameters are configured as expected.
- **Security-Related Parameters**:
  - **Server**: Port that accepts shutdown commands.
  - **Connectors**: `maxPostSize`, `maxParameterCount`, `SSLEnabled`, `secure`, `ciphers`.
  - **Host**: `autoDeploy`, `deployOnStartup`, `deployXML`.
  - **Context**: `crossContext`, `privileged`, `allowLinking`.
  - **Filter**: Tomcat provides several filters that can be configured for incoming requests. These filters are particularly powerful and should be verified during code audits unless there is a compelling reason not to use them.

#### Jetty

- **Security Enhancements**:
  - **Limit Form Content**: Configure the maximum form content size and number of form keys in the `jetty-web.xml` file.
  - **Obfuscate Passwords**: Support for obfuscated passwords in Jetty XML files where plain text passwords are typically required.

**Example:**

```xml
<Resource name="jdbc/DSTest" auth="Container" type="javax.sql.DataSource"
          driverClassName="com.mysql.jdbc.Driver"
          url="jdbc:mysql://localhost:3306/foo"
          username="dbuser"
          password="OBF:1ri71v1r1v2n1ri71shq1ri71shs1ri71v1r1v2n1ri7"
          maxActive="5"
          maxIdle="50"
          maxWait="5000"/>
```

#### JBoss

- **Password Masking**: JBoss allows password masking in its XML configuration files. After creating a password mask using the JBoss password utility, replace any masked passwords in the XML configuration file with the following annotation:

  ```java
  @org.jboss.security.integration.password.Password(securityDomain=MASK_NAME, methodName=setPROPERTY_NAME)
  ```

  Refer to the "Masking Passwords in XML Configuration" section in the JBoss Security Guide.

#### Oracle WebLogic

- **Additional Deployment Descriptors in `weblogic.xml`**:
  - **Parameters**:
    - `externally-defined`: Role-to-principal mapping is defined externally in the WebLogic admin console.
    - `run-as-principal-name`: Assigns a principal to the role when running as that role.
    - `run-as-role-assignment`: Contains the `run-as-principal-name` descriptor.
    - `security-permission`: Contains the security permission specification descriptor.

This structured and detailed approach ensures that the security configurations and role-based access controls are clearly defined and easily auditable.