the  asynchrony  in  the  data  path,  we  instead  associated  secure-
deletion  information  with  the  legacy  data  path  flow.    We  also 
decoupled  the  storage-specific  secure-deletion  action  from  the 
secure information propagation for ease of portability to different 
storage types. 
We also found it tricky to design the GUID scheme due to in-
transit versions and the placement of GUIDs.  To illustrate, using 
only  the  sector  number  was  insufficient  when  handling  multiple 
in-transit  updates  to  the  same  sector  with  conflicting  sensitive 
statuses.  Placing  a  GUID  in  transient  data  structures  such  as  a 
block  I/O  structures  led  to  complications  when  these  structures 
could  be  split,  concatenated,  copied,  and  even  destroyed  before 
reaching storage.  We solved this problem by associating a GUID 
with the specific memory pages that contain the data. 
Tracking-granularity  issues  exist  throughout  the  datapath.  
Data  is  stored  in  memory  pages.    File  systems  interact  with 
blocks, multiples of which may exist on one memory page.  The 
block  layer  may  concatenate  blocks  together  to  form  requests, 
which  may span  more than one memory page.  Finally, requests 
are  broken  up  into  storage-specific  granularities  (e.g.,  flash 
pages).  Metadata entries with mixed sensitive status can collocate 
within various access units as well.  Various granularities make it 
difficult  to  map  our  solution  to  existing  theoretical  verification 
frameworks [34]. 
Finally, our work would not have been possible without direct 
access to a flash FTL.  An unfortunate trend of FTLs is that they 
are mostly implemented in hardware, directly on the flash device 
controller.    An  implication  is  that  most  FTLs  (and  their  wear-
leveling/block-management  routines)  cannot be  seen  or  accessed 
by the OS.  To leave the door of software FTL research open, we 
need 
that  enables  and  eases 
experimentation,  to  demonstrate  the  benefits  of  software-level 
developments and controls. 
to  create  an  environment 
To summarize, we have presented the design, implementation, 
evaluation,  and  verification  of  TrueErase,  a  legacy-compatible, 
per-file, secure-deletion framework that can stand alone or serve 
as a building block for encryption- and taint-based secure deletion 
solutions.    We  have  identified  and  overcome  the  challenges  of 
specifying and propagating information across storage layers.  We 
show we can handle common system failures.  We have verified 
TrueErase  and  its  core  logic  via  cases  derived  from  file-system-
consistency  properties  and  state-space  enumeration.    Although  a 
secure-deletion solution that can withstand diverse threats remains 
elusive, TrueErase is a promising step toward this goal. 
11.  ACKNOWLEDGMENTS 
We 
thank  Peter  Reiher  and  anonymous  reviewers  for 
reviewing  this  paper.    This  work  is  sponsored  by  NSF  CNS-
0845672/CNS-1065127, DoE P200A060279, PEO, and FSU. Any 
opinions, findings, conclusions, or recommendations expressed in 
this material are those of the authors and do not necessarily reflect 
the views of the NSF, DoE, PEO, or FSU. 
12.  REFERENCES 
[1]  Bauer, S. and Priyantha, N.B. 2001. Secure data deletion for 
Linux file systems. Proceedings of the 10th Usenix Security 
Symposium (2001), 153–164. 
[2]  Boneh, D. and Lipton, R. 1996. A revocable backup system. 
USENIX Security Symposium (1996), 91–96. 
[3]  Cooke, J. 2007. Flash memory technology direction. Micron 
Applications Engineering Document. (2007). 
[4]  CWE - CWE-327: Use of a Broken or Risky Cryptographic 
(2.2): 
Accessed: 
Algorithm 
http://cwe.mitre.org/data/definitions/327.html. 
2012-09-05. 
[5]  Diesburg, S.M., Meyers, C.R., Lary, D.M. and Wang, A.I.A. 
2008. When cryptography meets storage. Proceedings of the 
4th  ACM  International  Workshop  on  Storage  Security  and 
Survivability (2008), 11–20. 
447
[6]  Ganger,  G.R.  2001.  Blurring  the  line  between  OSes  and 
storage  devices.  Technical  Report  CMU-CS-01-166, 
Carnegie Mellon University. 
[7]  Garfinkel,  S.L.  and  Shelat,  A.  2003.  Remembrance  of  data 
passed:  a  study  of  disk  sanitization  practices.  Security 
Privacy, IEEE. 1, 1 (Feb. 2003), 17 – 27. 
[8]  Geambasu, R., Kohno, T., Levy, A.A. and Levy, H.M. 2009. 
Vanish:  increasing  data  privacy  with  self-destructing  data. 
Proceedings  of  the  18th  USENIX  Security  Symposium 
(Berkeley, CA, USA, 2009), 299–316. 
[9]  Halderman, J.A., Schoen, S.D., Heninger, N., Clarkson, W., 
Paul,  W.,  Calandrino,  J.A.,  Feldman,  A.J.,  Appelbaum,  J. 
and Felten, E.W. 2009. Lest we remember: cold-boot attacks 
on encryption keys. Commun. ACM. 52, 5 (May. 2009), 91–
98. 
[10]  Health Insurance Portability and Accountability Act of 1996: 
http://www.hhs.gov/ocr/privacy/hipaa/administrative/statute/
hipaastatutepdf.pdf. Accessed: 2012-07-24. 
[11]  Hughes,  G.  2004.  CMRR  Protocols  for  disk  drive  secure 
erase.  Technical  report,  Center  for  Magnetic  Recording 
Research, University of California, San Diego. 
[12]  Hughes, G.F. 2002. Wise drives [hard disk drive]. Spectrum, 
IEEE. 39, 8 (Aug. 2002), 37 – 41. 
[13]  Ironkey: http://www.ironkey.com. Accessed: 2012-07-26. 
[14]  Joukov, N., Papaxenopoulos, H. and Zadok, E. 2006. Secure 
deletion  myths,  issues,  and  solutions.  Proceedings  of  the 
Second  ACM  Workshop  on  Storage  Security  and 
Survivability (New York, NY, USA, 2006), 61–66. 
[15]  Joukov,  N.  and  Zadok,  E.  2005.  Adding  secure  deletion  to 
your  favorite  file  system.  Security  in  Storage  Workshop, 
2005.  SISW   ’05.   Third  IEEE  International  (Dec.  2005),  8 
pp.–70. 
[16]  Katcher,  J.  1997.  Postmark:  A  new  file  system  benchmark. 
Technical Report TR3022, Network Appliance, 1997. www. 
netapp. com/tech_library/3022. html. 
[17]  King,  C.  and  Vidas,  T.  2011.  Empirical  analysis  of  solid 
state  disk  data  retention  when  used  with  contemporary 
operating  systems.  Digital  Investigation.  8,  (2011),  S111–
S117. 
[18]  Lee,  J.,  Heo,  J.,  Cho,  Y.,  Hong,  J.  and  Shin,  S.Y.  2008. 
Secure deletion for NAND flash file system. Proceedings of 
the  2008  ACM  Symposium  on  Applied  Computing  (New 
York, NY, USA, 2008), 1710–1714. 
[19]  Mac  OS  X  Security  Configuration  for  Mac  OS  X  Version 
10.6 
Leopard: 
http://images.apple.com/support/security/guides/docs/SnowL
eopard_Security_Config_v10.6.pdf. Accessed: 2012-07-25. 
Snow 
[20]  Marcel  Breeuwsma,  Martien  De  Jongh,  Coert  Klaver, 
Ronald  Van  Der  Knijff  and  Roeloffs,  M.  2009.  Forensic 
Data Recovery from Flash Memory. CiteSeerX. 
[21]  National  Industrial  Security  Program  Operating  Manual 
1995. 
5220.22-M: 
http://www.usaid.gov/policy/ads/500/d522022m.pdf. 
Accessed: 2012-07-26. 
[22]  Nightingale, E.B., Veeraraghavan, K., Chen, P.M. and Flinn, 
J. 2008. Rethink the sync. ACM  Trans. Comput. Syst. 26, 3 
(Sep. 2008), 6:1–6:26. 
[23]  OpenSSH: http://openssh.com/. Accessed: 2012-06-07. 
[24]  Perlman, R. 2005. The ephemerizer: making data disappear. 
Sun Microsystems, Inc. 
[25]  Peterson, Z.N.J., Burns, R., Herring, J., Stubblefield, A. and 
Rubin, A. 2005. Secure deletion for a versioning file system. 
Proceedings of the USENIX Conference on File And Storage 
Technologies (FAST) (2005), 143–154. 
[26]  Reardon,  J.,  Capkun,  S.  and  Basin,  D.  2012.  Data  Node 
Encrypted  File  System:  Efficient  Secure  Deletion  for  Flash 
Memory. 21st USENIX Security Symposium (Aug. 2012). 
[27]  Reardon,  J.,  Marforio,  C.,  Capkun,  S.  and  Basin,  D.  2011. 
Secure  Deletion  on  Log-structured  File  Systems.  Technical 
Report arXiv:1106.0917. 
[28]  Scrub utility: http://code.google.com/p/diskscrub/. Accessed: 
2012-07-26. 
[29]  Secure  rm:  http://sourceforge.net/projects/srm/.  Accessed: 
2012-07-26. 
[30]  Secure 
USB 
Flash 
Drives 
| 
Kingston: 
http://www.kingston.com/us/usb/encrypted_security. 
Accessed: 2012-07-26. 
[31]  shred(1) - Linux man page: http://linux.die.net/man/1/shred. 
Accessed: 2012-08-13. 
[32]  Shu, F. and Obr, N. 2007. Data set management commands 
proposal for ATA8-ACS2. 
[33]  Sivathanu, G., Sundararaman, S. and Zadok, E. 2006. Type-
safe disks. Proceedings of the 7th Symposium on Operating 
Systems  Design  and  Implementation  (Berkeley,  CA,  USA, 
2006), 15–28. 
[34]  Sivathanu, M., Arpaci-Dusseau, A.C., Arpaci-Dusseau, R.H. 
and Jha, S. 2005. A logic of file systems. Proceedings of the 
4th USENIX Conference on File and Storage Technologies - 
Volume 4 (Berkeley, CA, USA, 2005), 1–1. 
[35]  Sivathanu,  M.,  Bairavasundaram,  L.N.,  Arpaci-Dusseau, 
A.C. and Arpaci-Dusseau, R.H. 2004. Life or death at block-
level. Proceedings  of  the  6th  Conference  on  Symposium  on 
Opearting  Systems  Design  &  Implementation  -  Volume  6 
(Berkeley, CA, USA, 2004), 26–26. 
[36]  Sivathanu,  M.,  Prabhakaran,  V.,  Popovici,  F.I.,  Denehy, 
T.E., Arpaci-Dusseau, A.C. and Arpaci-Dusseau, R.H. 2003. 
Semantically-smart  disk  systems.  Proceedings  of  the  2nd 
USENIX  Conference  on  File  and  Storage  Technologies 
(2003), 73–88. 
[37]  Special  Publication  800-88:  Guidelines 
Sanitization: 
http://csrc.nist.gov/publications/nistpubs/800-
88/NISTSP800-88_with-errata.pdf. Accessed: 2012-07-26. 
for  Media 
2006. 
[38]  Sun, K., Choi, J., Lee, D. and Noh, S.H. 2008. Models and 
Design  of  an  Adaptive  Hybrid  Scheme  for  Secure  Deletion 
of  Data  in  Consumer  Electronics.  Consumer  Electronics, 
IEEE Transactions on. 54, 1 (Feb. 2008), 100 –104. 
[39]  The 
OpenSSD 
http://www.openssd-
project.org/wiki/The_OpenSSD_Project. Accessed: 2012-07-
29. 
Project: 
[40]  Thibadeau, R. 2006. Trusted Computing for Disk Drives and 
Other Peripherals. Security Privacy, IEEE. 4, 5 (Oct. 2006), 
26 –33. 
[41]  Wei,  M.,  Grupp,  L.M.,  Spada,  F.E.  and  Swanson,  S.  2011. 
Reliably  erasing  data  from  flash-based  solid  state  drives. 
Proceedings  of  the  9th  USENIX  Conference  on  File  and 
Stroage Technologies (Berkeley, CA, USA, 2011), 8–8. 
[42]  Wipe:  Secure  File  Deletion:  http://wipe.sourceforge.net/. 
Accessed: 2012-07-26. 
448