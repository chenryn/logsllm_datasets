          if (sscanf(CS smtp_cmd_data, "%u %n", &chunking_datasize, &n)  smtp_max_synprot_errors)
      {
      yield = 1;
      log_write(0, LOG_MAIN|LOG_REJECT, "SMTP call from %s dropped: too many "
        "syntax or protocol errors (last command was \"%s\")",
        host_and_ident(FALSE), string_printing(smtp_cmd_buffer));
      }
    if (code > 0)
      {
      smtp_printf("%d%c%s%s%s\r\n", FALSE, code, yield == 1 ? '-' : ' ',
        data ? data : US"", data ? US": " : US"", errmess);
      if (yield == 1)
        smtp_printf("%d Too many syntax or protocol errors\r\n", FALSE, code);
      }
    return yield;
    }
In
[src/string.c](https://github.com/Exim/exim/blob/9242a7e8cfa94bbc9dd7eca6bd651b569b871c4e/src/src/string.c
"src/string.c"), there is a `string_printing` function in the `synprot_error`
function :
    const uschar *
    string_printing2(const uschar *s, BOOL allow_tab)
    {
    int nonprintcount = 0;
    int length = 0;
    const uschar *t = s;
    uschar *ss, *tt;
    while (*t != 0)
      {
      int c = *t++;
      if (!mac_isprint(c) || (!allow_tab && c == '\t')) nonprintcount++;
      length++;
      }
    if (nonprintcount == 0) return s;
    /* Get a new block of store guaranteed big enough to hold the
    expanded string. */
    ss = store_get(length + nonprintcount * 3 + 1);
    /* Copy everything, escaping non printers. */
    t = s;
    tt = ss;
    while (*t != 0)
      {
      int c = *t;
      if (mac_isprint(c) && (allow_tab || c != '\t')) *tt++ = *t++; else
        {
        *tt++ = '\\';
        switch (*t)
          {
          case '\n': *tt++ = 'n'; break;
          case '\r': *tt++ = 'r'; break;
          case '\b': *tt++ = 'b'; break;
          case '\v': *tt++ = 'v'; break;
          case '\f': *tt++ = 'f'; break;
          case '\t': *tt++ = 't'; break;
          default: sprintf(CS tt, "%03o", *t); tt += 3; break;
          }
        t++;
        }
      }
    *tt = 0;
    return ss;
    }
We will use `store_get` in the `string_printing2` function. Its length is
`length + nonprintcount * 3 + 1`. For example, the length of `BDAT \x7F`
command is `6+1*3+1 => 0x0a`. And because `0xa  0x10
  * return next_yield = heap1+0x110
  * next_yield = heap1+0x120
  * yield_length = 0x1f00 - 0x10 = 0x1ef0
The final step is to send a large amount of data in the PoC to trigger the
UAF:
    s = 'a'*6 + p64(0xdeadbeef)*(0x1e00/8)
    R.send(s+ ':\r\n')
Back to the `receive.c` file. The 1788-line loop read the input. According to
meh, the following lines of code is the trigger of UAF:
    if (ptr >= header_size - 4)
        {
        int oldsize = header_size;
        /* header_size += 256; */
        header_size *= 2;
        if (!store_extend(next->text, oldsize, header_size))
          {
          uschar *newtext = store_get(header_size);
          memcpy(newtext, next->text, ptr);
          store_release(next->text);
          next->text = newtext;
          }
        }
When the input data is greater than or equal to `0x100-4`, the `store_extend`
function will be triggered. The value of `next->text` is `heap1+0x10`,
`oldsize=0x100, header_size = 0x100*2 = 0x200`.
Then in `store_extend`, there are several lines of judgments:
    if (CS ptr + rounded_oldsize != CS (next_yield[store_pool]) ||
        inc > yield_length[store_pool] + rounded_oldsize - oldsize)
      return FALSE;
Where `next_yield = heap1+0x120`, `ptr + 0x100 = heap1+0x110`
The result of the judgment is true, so `store_extend` returns False
This is because a memory is allocated in the `string_printing` function, so
the heap is unbalanced in `receive_msg`.
Subsequent entry into the branch will fix this imbalance and execute
`store_get(0x200)`
  * return next_yield = heap1+0x120
  * next_yield = heap1+0x320
  * yield_length = 0x1ef0 - 0x200 = 0x1cf0
Then it will copy the entered data into the new heap.
The problem is at the `store_release` function. The previously applied 0x2000
heap has 0x1cf0 left, but we perform glibc free operation on it. This is what
we know about UAF, reusing the vulnerability after release.
    for (b = chainbase[store_pool]; b != NULL; b = b->next)
      {
      storeblock *bb = b->next;
      if (bb != NULL && CS block == CS bb + ALIGNED_SIZEOF_STOREBLOCK)
        {
        b->next = bb->next;
        .......
        free(bb);
        return;
        }
Here `bb = chainbase->next = heap1`, and `next->text == bb + 0x10`, and we can
execute `free(bb)`.
Because a lot of data is entered, the below will also be excuted:
  * store_extend(next->text, 0x200, 0x400)
  * store_extend(next->text, 0x400, 0x800)
  * store_extend(next->text, 0x800, 0x1000)
But when it comes to the judment:
    if (CS ptr + rounded_oldsize != CS (next_yield[store_pool]) || inc > yield_length[store_pool] + rounded_oldsize - oldsize)
It will return true and will not enter the following branch.
However, when it comes to `store_extend(next->text, 0x1000, 0x2000)`, it
returns False again because the second judgment `0x2000-0x1000 >
yield_length[store_pool]` was satusfied.
So it will enter the branch again and call `store_get(0x2000)`
Because `0x2000 > yield_length` so the program will enter the branch:
    if (size > yield_length[store_pool])
      {
      int length = (size next)
         && newblock->length next = NULL;
        newblock->length = length;
        if (!chainbase[store_pool])
          chainbase[store_pool] = newblock;
        else
          current_block[store_pool]->next = newblock;
        }
      current_block[store_pool] = newblock;
      yield_length[store_pool] = newblock->length;
      next_yield[store_pool] =
        (void *)(CS current_block[store_pool] + ALIGNED_SIZEOF_STOREBLOCK);
      (void) VALGRIND_MAKE_MEM_NOACCESS(next_yield[store_pool], yield_length[store_pool]);
      }
Here is the key of exploiting this vulnerability.
First: `newblock = current_block = heap1`.
Second: `newblock = newblock->next`.
I guess the case of meh is the same as the case where I added `printf` to
test. In `printf`, we need to malloc a heap as a buffer, so there is another
heap under heap1. After heap1 is freed, it will be placed in unsortbin, and fd
and bk point to arena.
So at this time, `heap1->next = fd = arena_top`.
The following process is:
  * current_block = arena_top
  * next_yield = arena_top+0x10
  * return next_yield = arena_top+0x10
  * next_yield = arena_top+0x2010
After executing `store_get`, execute `memcpy`:
    Memcpy(newtext, next->text, ptr);
The `newtext` above is `arena_top+0x10` returned by `store_get` .
Copy the entered data into the arena, and finally we can control
`RIP=0xdeadbeef` to cause a crash.
But the actual situation is different. Because there is no printf, so heap1 is
the last heap, and it will be merged into top_chunk after it is freed. Fd and
bk fields will not be modified as they are used to store the `next` and
`length` of the storeblock structure.
#### Summary
CVE-2017-16943 is indeed a UAF vulnerability, but I can't use the PoC provided
by meh to cause a crash.
I have tried other methods, but did not find a suitable use chain.
Since Exim implements a heap management, it is not possible to use `store_get`
to malloc a heap after heap1, because current_block will be modified to point
to the latest heap. So only we malloc a heap without using `store_get`, can we
control RIP.
Besides this, exim also uses `store_get` to get memory, so we can only find
`printf` which has its own function using malloc. But these functions will
exit the loop of the `receive_msg` function after they are used, so I could
not construct a chain.
#### Reference
1.[Exim Source Code](https://github.com/Exim/exim.git)  
2.[Bugzilla-2199](https://bugs.exim.org/show_bug.cgi?id=2199)
* * *