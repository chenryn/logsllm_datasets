BOOL
[thread_nt.h]
[thread_nt.h]
RNRMUTEx AllocNonRecurgiveMutex(void)
EYPedef struct NRMUTEx
NRMUTEX,PNRMUTEX:
在pyEval_InitTrireads通过PyThread_allocate_lock成功地创建了GIL之后，当
到了这里，Pyhon中的线程互斥机制的真相渐渐浮出水面，看来Pyhon是通过Win32
success =alock && BnterNomReCursiveMutex((PNRMUWEx) aLock, (waitflag
一切真相大白了，原来，GIL（NRMUTEX）中的hevent就是Win32平台下的Event
在NRMUTEX中，所有的数据成员的类型都是Win32平台下的类型风格了，owned
mutex->hevent
mutex->thxeadid
return mutex
PNRMUTEX mUtex
HANDLE Hevent
在pyThread_a11ocate_1ock中，出现了一个关键的结构体PNRMUTEX，我们发现，
InitializeNonRecursiveMutex(PNRMUTEX mutex)
DWORD
LONG
owned
free(mutex);
thread_id:
CreateEvent (NULl)
(PNRMUTEX)maIloc（sizeof(NRMUTEX))
/No threade have entered NonRecursiveMutex*
Python源码剖析
FALSE,
15.3Python线程的创建
一深度探索动态语言核心技术
NULI)
1S
399
---
## Page 430
Python源码剖析
400
时，其owned就会被增加1。显然我们可以猜测，当一个线程最终释放GIL时，一定会将
操作，其功能是将mutex->owried的值增加1。从这里可以看到，当一个线程开始等待GIL
CompareExchange
获得GIL的使用权。
acquire_lock申请GIL，到这时，并没有第二个线程被创建，所以主线程会轻而易举地
DyEval_InitThread 的主线程而言，由于在初始化GIL
ownea为0后，表示该GIL已经被一个线程占用，不再可用。对于我们这里分析的调用
为-1，Python会检查这个值是否为-1，如果是，则意味着GIL可用，必须将其置为0，当
是否可用的变量，在前面的InitializeNonRecursiveMutex中我们看到这个值被初始化
通过WaitForSingleobject将自身挂起，直到别的线程释放GIL，然后由操作系统将自
已唤醒。
wa主tElag指示当GIL当前不可获得时，是否进行等待，更直接地说，就是当前线程是否
DWORD EnterNonRecursiveMutex(PNRMUTEX mutex,BOOL walt)
注意这里的检查和更新ownea的操作是通过一个Win32的系统API
如果waitflag为O，Python会检查当前GIL是否可用，GIL中的ownea是指示GIL
PyThread_acquire_lock有两种工作方式，通过函数参数waitrlag来区分。这个
returnret
mutex->thread_id=GetCurrentThreadra()/*We own it/
else
第15章Python多线程机制
DWORD ret;
/* Assume that the thread waits:successfuily /
return success;
Tet
12INPINTTE：0））
tet
(!wait)
深度探索动态语言核心技术
WaitForSingleobject(mutex->hevent,
InterlockedIncrement(&mutex->owmed)？
WATTLOBJECT_O:
(PVOID)
Some thread owns
一来完成的。这个API是一个原子操作，其函数原形和功能如下。
(PVOID)=1)
==WAIT_OBJECT_O
the
之后就调用PyThread
-Imterlocked-
(PVOID)0,
---
## Page 431
个静态全局变量，
Threadid，获得当前Pyhon主线程的id，并将其赋给main_thread，main_thread是一
作系统来实现的机制。
将被操作系统唤醒。这就是我们在前面介绍的Python将线程调度的第二个难题委托给操
Event内核对象的线程，结合前面的分析，如果这时候有线程在等待GIL的hevent，那么
用它以释放对GIL的占有。
PyThread_release_1ock每一个将从运行转态转为等待状态的线程都会在被挂起之前调
GIL的owned减1，这样当所有需要GIL的线程都最终释放了GIL之后，owned会再次变
线程。
为-1，意味着GIL再次变为可用。
BOOL
void pyThread_release_lock(PyThread_type_lock alock)
[thread_nt.h]
到了这时，调用pyEval_InitThread的线程（也就是Python主线程）已经成功获得
最后，
最终，
mutex->thread_1d=0:
we don'town the mutex*
LeaveNonRecursiveMutex((PNRMuTEx) aLock);
为了清晰地展示这一点，
retuzn
LeaveNonRecursiveMutex(PNRMUTEX mutex)
，我们在图15-4中给出整个PyEval_InitThread的函数调用关系。
一个线程在释放GIL时，会通过setEvent通知所有在等待GIL的hevent这个
专职存储Python主线程的线程id，用以判断一个线程是否是Python主
图15-4PyEval_InitThreads中的函数调用关系
PyEvalInitThreads
PyThread_allocate_lock
PyThread_acquire_lock
我们现在就来看看pyThread_aquire_lock的逆运算，
aAllocNonRecursiveMutex
Python源码剖析
15.3Python线程的创建
一深度探索动态语言核心技术
401
---
## Page 432
Python源码剖析
15.3.2.1
15.3.2
402
static size_t
代码清单15-2
现在我们来看看一个子线程是如何被创建的（见代码清单15-2）。
创建新的线程的线程称为主线程，而将与threadProc对应的原生thread称之为子线程。
描述的清晰性，我们将Pyhon主线程，也就是调用thread_pyThread_start_new_thread
threadl.py为例，这个原生thread将执行threadProc所定义的操作。从现在开始，为了
[thread nt.h]
stat icPyobject*thread_PyThread_start_new_thread(Pyobject*self,Pyobject
[thread.c]
[threadmodule.c]
OT
rv=beginthread(bootstrappythmead stacksize,&obj):/use default stacksize/
auoddns
fargs)
第15章Python多线程机制
obj.ia=
callobj obj:
return PyInt_Fromlong(ident);
PyEval_InitThreads();/* Start the interpreterte thread-awareness */
boot->keyw
PyArg_UnpackTuple(fargs,
Pyobject *func,
在完成了多线程环境的初始化之后，Pyton会开始创建底层平台的原生thread，以
obj
unsigned long zv;
7131：创建线程
//[2]：初始化多线程环境
boot->args
boot->func
struct
创建线程
ooot-
/[1]:
子线程的诞生
arg = arg:
.func
一深度探索动态语言核心技术
=PyThread_atart
PyMem_NEw(struct bootstate,l)
创建boctatate结构
bootstate boot:
for
pythread_stacksize0;
funci
runtime thread gtack aize tuning.
keyw;
args:
Eune;
PyThreadstate_GET()->interp;
/*guilty until proved innocent /
hew_thread(t_bootstrap.(void*) boot):
"start_new_thread,2.3,&func,&args,&keyw）;
IN=MO
THREAD_STACK_SIZE macro!
---
## Page 433
对象的用途我们马上就会看到。我们创建线程的工作需要fune和arg，但是Win32下创
的结构体obj中，我们来看看这个obj。
理解pyThread_start_new_threaa的工作，我们需要特别注意该函数的参数，从thread
typedef struet
[thread_nt.h]
stafic void t_bootstrap(voidboot raw)
[throadmodule.c]
值得注意的是，objaone是一个win32下的Semaphore内核对象，这个特殊的内核
callobj;
PyEv
PyThreadStatelrate
structboottateboot=(truct boottatebool_raw
Semaphore
图15-5显示了对应thread1.py所构造出的callobj对象的示意图。
HANDLE done;
void
void
主线程通过调用pyThread_start_new_threaa完成创建子线程的工作。为了清晰地
return obg.id;
CloseHandle((HANDLE)obj.done);
if(rv ==(unsigned 1ong)-1)
aaamboy
WaitForSingleobject (obj,done,
obj.id=1
//创建rawthread失败
id;
*argi
（pToA)（oung）
图15-5
void（fune）（void）
HANDLEdone
callobj
thread1.py对应的callobj对象的示意图
Python源码剖析
INFINI甲E)
def-threadProco
[threadLpy]
PyObjecpkevw
whileTnue
15.3
bootstate
Python线程的创建
一深度探索动态语言核心技术
403
---
## Page 434
Python源码剖析
404
候开始通知obj.done。
免死锁，
解释器，必须首先获得GL，这是Pyhon世界的游戏规则，谁也不能例外。所以，为了避
[thread nt.h]
解释器中执行pythonl.py中定义的theaaProc但是，我们知道，子线程为了访问Python
程过程是bootstrap，不过我们刚才已经猜测了，从bootstrap出发，最终将在Python
了GIL，但是目前已经被挂起，这是为了等待子线程中控制着的obj.done。子线程的线
我们通过threadl.py创建的子线程。主线程在执行PyEvalInitThread的过程中，获得
thread 构成，一个是执行python程序（python.exe）时操作系统创建的主线程，另一个是
bootstrap(void call)
Semaphore，并最终唤醒主线程。
内核对象。由于obj已经作为参数传递给了子线程，所以我们猜想，子线程会设置这个
主线程开始将自已挂起，等待obi.done我们前面看到，这是一个Win32的Semaphore
行是在哪个线程中执行的，这对于理解Pyhon的多线程机制相当重要。
通过_beginthread所创建的子线程中发生的。从这里开始，我们需要特别注意代码的执
着主线程的执行路径在剖析，而对bootstrap的调用并不是在主线程中发生的，而是在
threadl.py中定义的threadProc。
定的线程过程却是一个相当面生的bootstrapa实际上，在bootstrap中，会最终调用
外，
奇怪的是，我们期望的线程过程应该是threadl.py中定义的那个threadpoo呀，而这里指
建线程的API只允许用户指定一个自定义的参数，这就是需要用obj来打包的原因。
现在我们来理清一下Python当前的状态。Python当前实际上由两个Win32下的原生
_beginthread将最终成功地创建Win32下的原生线程，并顺利返回。在返回之后，
完成打包之后，调用Win32下创建thread的API：_beginthread来完成线程的创建。
obj->id=PyThread get_thread_ident()
第15章Python多线程机制
Eunc(arg):
ReleaseSemaphore(obj-sdone,
callobi *obj=
好了，花开两朵，各表一枝。我们继续沿着主线程的执行路径前进。如果不出什么意
但是，这里有一个至关重要的转折，还记得我们现在在哪里吗？没错，我们现在是沿
，子线程一定会在申请GL之前通知obj.done
一深度探索动态语言核心技术
obj->arg;
ob
(callobj*)cal1;
bootstrap
other thread mightfree it before we're done/
obj->func;
---
## Page 435
E_bootstrap，并最终进入等待GIL的状态。
执行后续的字节码，因为我们知道，这时候，
等的就是这个子线程id，一旦子线程设置了obj->id，就会设法唤醒主线程。
线程ia，然而子线程的线程id只有在子线程被激活后才能在子线程中获取，因此主线程
了了。原来，主线程所调用的pyThread_start_newthreaa需要返回所创建的子线程的
以唤醒主线程。那么，Python为什么需要让主线程等待子线程的通知呢，在这里一切都明
完成，才会通过PyThreadState_DeleteCurrert释放GIL。如此一来，那主线程岂非一
程的所有扫尾工作，到了这里，子线程就结束了。
就是Python的字节码执行引擎。传递进pyEval_CallobjecEWithkeywords的boot->func
后，子线程也就获得了GIL，并且做好了一切执行的准备。接下来子线程通过PyEval
boot->keyw);
V
statid vold t_bootstrap(void *boot_raw)
[threadmodule.a]
从这里开始，主线程和子线程开始分道扬，主线程在返回子线程a之后，会继续
在这里我们看到，子线程在申请GIL之前确实通知了前面提到的obj.done内核对象
在bootsrap中，子线程完成了三个动作：
从t_bootstrap的代码看上去，似乎子线程会一直执行，直到子线程的所有计算都
子线程从这里开始了与主线程对GI的竞争。在t_bootstrap中，所进行的第一个
res=PyEval_callobjectWithReywords(boot->func,boot->amgs)
调用t_bootstrap：
通知obj->done内核对象；
在PyEval_cal1objectWithKeywords结束之后，子线程将释放GIL，并完成销毁线
tstate
Pyobject*rest
获得线程id
PyThread_exit_thread():
PyThreadstate_DeleteCurrent();
PyEval
AcquireThread(tstate);
PyThreadstate_New(boot->interp);
Taw):
主线程手里握着GIL。而子线程则将进入