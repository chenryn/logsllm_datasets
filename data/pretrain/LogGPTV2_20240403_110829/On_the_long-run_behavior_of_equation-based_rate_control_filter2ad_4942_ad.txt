### 优化后的文本

#### 图8: 综合控制下的归一化吞吐量 E[X(0)]/f (¯p) 与 pgb 和 pbg 的关系
- **参数设置**: ng = 200, nb = 50
- **函数 f**: PFTK简化，r = 100 ms, q = 4r

**图9: 慢HMC极限下最大归一化吞吐量 E[X(0)]/f (¯p) 与 ng/nb 的关系**
- **粗线**: SQRT 函数
- **细线**: PFTK简化（r = 100 ms, q = 4r）
- **nb 设置**: 如图所示

#### 数学推导
\[ E[X(0)] \rightarrow \frac{p_{bg} n_g + p_{gb} n_b}{n_g + n_b} \]

因此，在慢HMC极限下，\( E[X(0)]/f (\bar{p}) \) 可以表示为：
\[ \frac{E[X(0)]}{f (\bar{p})} = \frac{n_g + n_b}{\int_0^1 u^{n_g} (1-u)^{n_b} f \left( \frac{u+1}{n_g + n_b} \right) du} \]

对于给定的函数 \( f \)，可以计算出 \( u \) 的值，使得 \( \bar{x}_0(u) \) 达到最大。对于SQRT函数，计算是可处理的，我们得到：
\[ u^* = \frac{n_b}{n_g} \]

注意，好状态和坏状态之间的差异越大（即 \( n_g/n_b \) 越大），从坏状态到好状态的转换次数就越少。这意味着HMC大部分时间处于坏状态，偶尔短暂地进入好状态。在这种HMC动力学中，我们可以预期显著的非保守行为（超调）。

对于SQRT函数 \( f \)，\( \bar{x}_0 \) 的最大值为：
\[ \bar{x}_0^* = \left( \sqrt{\frac{n_g}{n_b}} + \sqrt{\frac{n_b}{n_g}} \right)^2 \]
这随 \( n_g/n_b \) 单调增加。

在图9中，我们展示了公式 (13) 计算的 \( \bar{x}_0^* \) 与 \( n_g/n_b \) 的数值结果。我们也展示了PFTK简化的结果，通过数值计算公式 (12) 的最大值。我们观察到，当 \( n_g/nb \) 足够大时，可能会出现显著的非保守行为。

### 4. 仿真验证
我们进行了多次仿真实验来验证第3.3节中的结论。除非另有说明，我们考虑一个由TFRC和TCP Sack1连接共享的链路。该链路采用RED队列管理，速率为15 Mb/s；我们将缓冲区长度、min_thresh和max_thresh分别设置为带宽延迟积的2.5倍、0.25倍和1.25倍。往返时间为约50毫秒。我们参考了文献[2]中的设置。

#### 4.1 验证主张1
在图9中，我们展示了使用PFTK标准公式的归一化吞吐量。我们验证了损失事件比率越大，控制越保守。我们还注意到，损失事件间隔估计器的平滑度越大（即L越大），控制越不保守。接下来，对于PFTK简化（图10），我们观察到结果非常接近于PFTK标准。我们在图11中验证，使用SQRT公式时，保守性不那么明显，且对L的依赖较小。在所有情况下，瞬时值和损失事件间隔估计器之间的协方差都很小，表明损失事件间隔的自相关性较低。

#### 4.2 验证主张2
我们考虑一个以固定时间间隔（20毫秒）发送数据包但控制数据包大小的源。该源通过一个允许调整数据包丢弃率的损失模块建立连接。对于这种源，发送速率和两个损失事件之间的时间间隔的协方差为零。因此，根据主张2，我们期望当 \( f(1/x) \) 关于 \( x \) 是凹函数时，源是保守的；反之，当 \( f(1/x) \) 关于 \( x \) 是凸函数时，源是非保守的。我们在图12和图13中展示了损失事件间隔估计器长度分别为L=4和L=8的结果。我们验证了，使用SQRT控制始终是保守的。对于PFTK标准和PFTK简化，低损失率时同样成立，但在高损失率时，函数变为凸函数，因此控制表现出非保守行为。从图12和图13中可以看出，随着损失事件比率的增加，\( \hat{\theta}_n \) 的变异系数变小。损失事件估计器的较小变异性使得控制要么更不保守，要么更不非保守，具体取决于哪种行为在起作用。相反，较大的变异性会加剧保守或非保守行为。

### 5. 保守并不意味着TCP友好
到目前为止，我们主要关注的是保守性，即自适应源是否确实满足其长期方程。本节指出，这并不等同于TCP友好，原因有两个：
- TCP和我们的自适应源经历的损失事件比率可能不同。
- TCP可能不满足其自身的方程。

我们将详细讨论第一个问题，并通过一个例子说明第二个问题。

#### 5.1 不同源看到的损失事件比率
我们首先进行简单的分析。假设网络中的源由隐藏的拥塞过程 \( Z(t) \) 驱动，该过程在实时间 \( t \in R \) 中演化，并在可数状态空间 \( E \) 上取值。状态转移由点过程 \( (T_n)_n \) 控制；假设该过程是平稳的，具有有限强度 \( \lambda \)。这是一个近似，适用于对全局网络影响很小的源 [15]。

令 \( \pi_i := P(Z(0) = i) \) 表示拥塞过程处于状态 \( i \in E \) 的稳态概率。定义 \( \bar{x}_i = E[X(0)|Z(0) = i] \)。注意，\( \bar{p}_i \) 和 \( \bar{x}_i \) 分别是在拥塞过程处于状态 \( i \) 时的损失事件比率和平均发送速率。我们在附录中展示了：
\[ \bar{p} = \frac{\sum_{i \in E} b_i \bar{p}_i \bar{x}_i \pi_i}{\sum_{i \in E} b_i \bar{x}_i \pi_i} \]
其中
\[ b_i = \frac{E_0 \left[ \theta_0 | Z(0) = i \right]}{E_0 \left[ \theta_0 \right]} \]

当 \( \lambda \to 0 \) 时，\( b_i \to 1 \)，对于 \( i \in E \)（这里，按定义，\( \lambda_i = 1/E_0 \left[ S_0 | Z(0) = i \right] \)）。这个极限对应于分离的情况。

希望这些优化后的文本能更好地传达您的意图。如果有进一步的需求或修改，请随时告知。