k from Gk, we dis-
connect all nodes with color i by removing its edges but
we do not remove the nodes themselves from the graph.
The reason is that this allows a fair comparison between
the connectivity of Gk and Gi
k. Figure 1 illustrates an ex-
ample. There are two alternative ways to generate G1
2 from
G2, disconnecting the black node (case A) or removing it
(case B). Table 1 shows the connectivity metrics for both
cases. Note that the connectivity for case B is the same
as the connectivity for the original colored graph, which is
misleading. However, in case A the connectivity reﬂects
the node removal, and as a result, the normalized size of the
largest component is 0.66.
3.2 Robustness Metrics for a Colored Graph
2In graph theory, a component is a set of connected nodes, i.e., two
nodes belong to the same component if and only if there is a path between
them.
Intuitively, the robustness of a colored graph measures
the remaining connectivity of the colored graph when a
color is removed. Given a colored graph and a connectivity
G(cid:13)2(cid:13)
A(cid:13)
B(cid:13)
Figure 1. Two alternatives to generate G1
2
from G2: disconnecting the black node (A)
or removing it (B)
Metric
Pair Connectivity
Normalized Size of
Largest Component
G2
1
A
0.33
1
0.66
B
1
1
Table 1. Connectivity metrics for both pos(cid:173)
sible alternatives to generate G1
2 from G2
sates the poor connectivity when the gray color is removed.
Such an unbalanced coloring creates a situation where if the
grey color fails the graph becomes almost unusable. This
situation is clearly undesirable and we will favor coloring
algorithms that produce balanced colorings.
4 Coloring Algorithms
In this section, we propose coloring algorithms that as-
sign a color, from a set of k available colors, to each node in
the graph. Finding an optimal coloring of a graph is known
to be NP-complete. We have devised a total of 9 approx-
imation algorithms which can be classiﬁed into 4 different
families. Due to space constrains, we present only the re-
sults for the region coloring family because the two algo-
rithms from this family clearly outperform all others in our
evaluation. We refer the reader to our extended paper for
more information on the other algorithms [12].
This section is structured as follows. In Section 4.1 we
present the intuition behind region coloring and the two al-
gorithms that belong to this family. Then, in Section 4.2 we
extend the region coloring algorithms to handle two com-
mon cases found in ISP networks: 1) different node roles,
and 2) replicated nodes.
4.1 Region Coloring
Region coloring tries to divide the network into con-
tiguous regions and color each region with the same color.
This is somewhat similar to a geographic coloring but with
the difference that the regions are found automatically, i.e.,
no geographical information needs to be provided with the
graph. Thus, the intuition behind region coloring is to try to
isolate the failure to a contiguous region of the graph. Since
networks are designed with geography in mind, then remov-
ing a particular region of the graph has little additional ef-
fect on the rest of the graph, other than the disconnection of
the nodes themselves.
This problem is related to the graph clustering and graph
partitioning problems. Graph clustering algorithms try to
ﬁnd peninsulas of connectivity, i.e., regions with a high
density of intra-regional links and a few inter-regional links
connecting them with other regions. Graph partitioning al-
gorithms employ a similar approach, but the goal is to split
Figure 2. An unbalanced coloring of the Abi(cid:173)
lene backbone
metric, we deﬁne two robustness metrics: 1) the average of
the connectivity of the subgraphs created by disconnecting
all nodes of a speciﬁc color, and 2) the minimum connec-
tivity among all the subgraphs created by disconnecting all
nodes of a speciﬁc color. Thus, given the colored graph
Gk and a connectivity metric f (·), we ﬁrst obtain all color-
removed subgraphs Gi
k by removing each color ci in turn,
where i ∈ [1, k]. Then, we compute the robustness of G
according to the connectivity measure f as follows.
φavg
G,f =
1
k X1≤i≤k
f (Gi
k)
φmin
G,f = min
1≤i≤k
f (Gi
k)
The average robustness is the most straightforward measure
of robustness, representing the expected robustness under a
color failure. But, if taken alone, it can sometimes be mis-
leading because some colored graphs can present good aver-
age robustness but bad minimum robustness. Since, a priori
we do not know what the probability of failure is for each of
the implementations, we need to try to protect against fail-
ures of any of the implementations. That is precisely what
the minimum robustness gives us: the worst case.
One scenario in which we might get good average ro-
bustness and bad minimum robustness is when the coloring
is unbalanced, that is, most nodes in the graph use one color
and the rest split the remaining colors. Figure 2 shows that
scenario in the Abilene backbone network with two colors.
The average robustness is quite good, 0.5 for the normalized
size of the largest component, but the minimum robustness
is only 0.18. The average is good because the removal of
the black color gives a very high connectivity that compen-
the network into balanced partitions, i.e., partitions with a
similar number of nodes.
Thus, the region coloring family contains two different
types of algorithms: Cluster and Partition algorithms. Our
results, presented in Section 5, indicate that graph partition-
ing algorithms attain better robustness than graph cluster-
ing algorithms on the same graph, because clustering al-
gorithms may produce unbalanced partitions which result
in bad minimum robustness.
In addition, we learn that
the colored graph is most robust when the partitions are
all contiguous. When faced with the decision of provid-
ing either perfectly balanced but discontiguous partitions,
or slightly unbalanced but contiguous partitions, the lat-
ter usually achieves better robustness. Our results show
that a graph colored with a partitioning algorithm that pro-
vides contiguous and balanced partitions, achieves robust-
ness near the maximum provided by a fully connected
topology with the same number of nodes.
4.2 Extending Region Coloring to Handle Roles
and Replicated Nodes
In the previous section, we assumed that all nodes in the
network can use any of the k colors in Ck. However, the
role that a router plays in a network will further constrain
the implementation the router may use. For example, back-
bone routers and access routers might be built with different
design goals and using very different technologies. Thus,
a backbone router might not be able to use the implemen-
tation of an access router and vice versa. With roles, we
require that each node in the graph is appended with a role
tag. We consider two main roles: access routers and back-
bone routers. Each role has a different color set: access
color set C A
. and a node can
only be assigned a color from the color set corresponding to
its role.
ka and backbone color set C B
kb
Also, ISPs often replicate important nodes to increase the
robustness against node failures. The node and its replica
usually connect to the same neighbors so that the replica
can take the place of the replicated node in case of node
failure, or that the load can be split between both nodes.
Typically, backbone routers might be replicated in pairs.
Intuitively, to achieve best robustness the replicated node
and the replica should be colored differently. To identify
replicated nodes, we use a similarity metric employed in
social networks: Structural Equivalence [21]. Two nodes
are said to be structurally equivalent if they connect to the
exact same set of neighbor nodes. When we identify such
equivalent nodes, we color them differently. In our extended
paper we extend this metric to handle nodes that are similar
but not identical [12].
When taking into account roles and replicated nodes,
the region coloring algorithms work as follows: 1) color
all backbone routers, since they provide connectivity to the
access routers, and 2) color the access routers, which pro-
vide connectivity to the customers. These extensions can be
used with either clustering or partitioning algorithms. Next,
we present them in conjunction with the Partition algorithm
since our experiments have shown this to be the best com-
bination.
Coloring backbone routers: We create the backbone
graph by removing all access routers and their correspond-
ing links from the original graph. Then, we consider three
cases in coloring the backbone graph: 1) if every backbone
router has a structurally equivalent neighbor, then color
each router in a structurally equivalent pair differently, 2)
if no backbone router has a structurally equivalent neigh-
bor, then use region coloring, and 3) if only some back-
bone routers have structurally equivalent neighbors, then
color each node in a structurally equivalent pair differently
and use region coloring but imposing the constraint that two
nodes previously colored differently need to belong to dif-
ferent regions.
Coloring access routers: We create the access graph by
collapsing all the backbone nodes into a single node, that
connects to all access routers. We consider two cases: 1)
if the probability of a failure in C A
ka is independent from
the probability of a failure in C B
, for example because they
kb
come from different vendors or code bases, then we evenly
split the colors in C A
ka among all access routers to create
a balanced colored graph, and 2) if failures in access and
backbone colors cannot be assumed independent, then for
each access router, if all backbone routers connecting to it
have the same color, then the access router is assigned a dif-
ferent color, if available. Otherwise, there is no constraint
on the color assigned to the access router.
5 Evaluation
In this section, we evaluate our coloring algorithms on a
number of network topologies. The section is structured as
follows. In Section 5.1 we describe the network topologies
used in the evaluation. Then, in Section 5.2 we compare
the different coloring algorithms on a Tier-1 ISP topology.
Next, in Section 5.3 we compare the different topologies
when colored with the same algorithm. In Section 5.4 we
extend our results to node weights. Finally, in Section 5.5
we provide data on the available diversity in a Tier-1 ISP
network and show how our algorithms can be used to better
apply such diversity.
5.1 Experimental Setup
The network topologies used in the evaluation are pre-
sented in Table 2. All the topologies are router-level topolo-
gies, where each node represents a router and each edge
Topology
Tier-1 ISP
Date
Oct 2006
Nodes
A few
hundreds
Edges
A couple of
thousands
Cenic
Abilene
Exodus
Sprint
Verio
Mesh
Aug 2006
Sep 2006
Jan 2002
Jan 2002
Jan 2002
N/A
51
12
201
604
960
100
91
15
434
2268
2821
4950
Table 2. Network topologies used in the eval(cid:173)
uation.
represents a link between routers. The table is divided into
three parts. The top part shows real ISP topologies that we
have access to, including the topology of a Tier-1 ISP; the
middle shows Rocketfuel topologies [28] also used in our
experiments; and at the bottom, as a base case, we present
a synthetic topology which is a full mesh of 100 nodes. All
topologies have a single connected component. If there are
parallel edges between a pair of nodes, we collapse them
into a single edge.
The Rocketfuel topologies were obtained by the authors
through external probing. Though they are known to con-
tain some inaccuracies, we consider them a good approxi-
mation of a router-level ISP topology and accurate enough
to test our algorithms. We use the Mesh topology as a best
case since disconnecting a node in a full mesh topology has
no effect on the connectivity of the rest of the graph.
Implementation details: We implement the metrics and
coloring algorithms using the JUNG graph library [8]. We
use the graph clustering algorithm from Wu et al. [31] since
it scales linearly with the topology size (i.e., O(n + m))
and allows to predeﬁne the number of clusters. We use the
graph partition algorithms from Karypis et al. [19], which
employ multilevel recursive-bisection and scale well while
providing good ﬂexibility. Any other clustering or parti-
tioning algorithms could be used, though as we will show,
algorithms that generate balanced and contiguous partitions
work best.
5.2 Coloring Algorithms
In this section, we compare the robustness achieved by
the Partition and Cluster coloring algorithms without exten-
sions, that is, assuming no distinction between backbone
and router nodes, and no replicated nodes. These assump-
tions usually hold in medium size networks such as Abi-
lene or Cenic, but might not hold for large Tier-1 ISP net-
works. We present results for the extended algorithms in
Section 5.5. In addition to the Cluster and Partition algo-
rithms, we also present results for the Random algorithm
which randomly assigns a color from Ck to each node. The
Random algorithm is used as a baseline to compare the
other algorithms. The evaluation of the remaining algo-
rithms can be found in our extended paper [12] and their
performance is usually somewhere between the Random
and Partition algorithms.
Comparing to the optimal coloring: We can provide a
guideline on how close to optimal our algorithms work. The
idea is that no topology can be more robust than a fully con-
nected topology with the same number of nodes. Thus, in
Figure 3 the dotted line labeled Max shows the robustness
achieved in a full mesh topology with the same number of
nodes and balanced coloring. That is, for two colors, n
2
nodes are colored using one color and the other n
2 are col-
ored with the other color. Then, we can compare the ro-
bustness achieved by our approximation algorithms to this
guideline to know how well our algorithms are performing.
Figure 3 shows the robustness achieved on the Tier-1
topology by the different algorithms measured using the
Normalized Size of the Largest Component (NSLC). Simi-
lar results for the Pair Connectivity (PC) on the Sprint topol-
ogy are provided in Appendix A. We observe from Fig-
ure 3(a) that the Cluster and Partition algorithms clearly out-
perform the Random algorithm with respect to the average
robustness for any number of colors less than fourteen.
These results indicate that coloring nodes at random lo-
cations in the graph is not a good strategy, since region
coloring, which uses the opposite approach, exhibits bet-
ter performance. Recall that disconnecting all nodes from
one color creates two different impacts: the disconnection
of the nodes themselves, which cannot be avoided, and the
disconnection of any other node who relied on those nodes
to connect to the rest of the graph. The second factor can
be reduced and sometimes eliminated with a good coloring.
This is where region coloring seems to excel, i.e., the si-
multaneous removal of nodes that are located nearby, in the
same region of the graph, has little impact on other nodes
located further away in different regions.
Unbalanced partitions: Figures 3(a) and 3(b) show that
the Cluster algorithm performs close to the Partition algo-
rithm in terms of average robustness, but signiﬁcantly worse
in terms of minimum robustness. This is due to the un-
balanced coloring performed by the Cluster algorithm. For
example, when using two colors on the Tier-1 ISP topol-
ogy, the Cluster algorithm assigns one color to more than
3 of the nodes and the other color to less than 1
2
3 of the
nodes. On the other hand, the Partition algorithm assigns
each color to roughly half of the nodes. This is expected
since a graph partitioning algorithm tries to balance the
number of nodes in each partition. Using the Cluster al-
gorithm, when the least common color fails, the remaining
connectivity is quite good and on average compensates the
poor connectivity created by the opposite case. Appendix A
shows a more detailed example of the same effect.
Tier 1 ISP
Tier 1 ISP
Random
Cluster
Partition
Max
 1
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
)
n
M
i
(
t
n
e
n
o
p
m
o
C