5 end(cid:2) Keep one node per ‚Äúclose‚Äù shape
(cid:2) (cid:9)= s do
cands
if cands
6 foreach close shape s
(cid:2) ‚Üê {n(cid:2) ‚àà cand | n(cid:2).shape.id = s
7
(cid:2) (cid:9)= ‚àÖ then
8
n.Vremote[s
9
10
11 end
(cid:2)}
] ‚Üê 1 random node ‚àà cands
end
(cid:2)
(cid:2)
to trim each node‚Äôs remote view by keeping only descriptors
from shapes that are considered close to s. This closeness
metric is left to future work, but could be computed from
the overall target topology or the shape‚Äôs ID.
(cid:2), line 7 Ô¨Ålters candidate
(cid:2), and lines 8-9 take a random
] (that is,
(cid:2) into cands
(cid:2) (if not empty) to Ô¨Åll n.Vremote[s
nodes from shape s
node from cands
the remote view‚Äôs descriptor slot for shape s
In detail, for each ‚Äúclose‚Äù shape s
(cid:2)).
(cid:2)
4) Shape Building Protocol: We use a variant of Vicin-
ity [37] to organize the nodes that have joined a shape s into the
basic topology prescribed by the shape‚Äôs template tplate. (The
pseudo-code is not shown for space reasons.) Vicinity uses a
greedy push-pull procedure to populate each node n‚Äôs view
Vshape with close neighbors, according to the ranking function
dtplate(), and then connects n to its ktplate closest neighbors.
Note that Vshape‚Äôs size must be at least ktplate, but in practice
Vshape is usually larger, and we can bound its maximum size if
we want to limit memory consumption. Vicinity exploits the
transitivity of most ranking functions: if n is ranked close to
o, and o is ranked close to p, then n is likely to be ranked
close to p. However, whereas Vicinity uses a system-wide peer
sampling protocol to Ô¨Ånd potential new neighbors, we restrict
our Shape Building Protocol to the view Vlocal constructed
by the Same Shape Protocol. This restriction to Vlocal insures
the isolation and co-existence of multiple shapes in the same
system.
E. The Port Selection and Connection protocols
The Port Selection procedure is executed between nodes
within the same shape in order to determine which nodes are in
charge of shape s‚Äôs ports (these nodes are dubbed port nodes)
while the Port Connection procedure is executed by port nodes
to locate the remote port of the linked shape, and to establish
546
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:50:29 UTC from IEEE Xplore.  Restrictions apply. 
Algorithm 3: Port Selection on node n
Output: is_port[k] and towards_port[k] are greedily
1 foreach k ‚àà n.shape.ports do
resolved for each port k in the shape s.
(cid:2) Find closest node to port k among local nodes
cand ‚Üê n.Vlocal‚à™n.Vshape‚à™{n, n.towards_port[k]}
closest ‚Üê
GETCLOSEST(cand, k, n.shape.template)
n.is_port[k] ‚Üê (n = closest)
if n.is_port[k] then
n.towards_port[k] ‚Üê n
else(cid:2) If n is not port node, remote request to
2
3
4
5
6
7
8
closest
n.towards_port[k] ‚Üê
closest.towards_port[k]
end
9
10 end
Function getClosest(cand, k, tplate)
Output: Returns the closest node from port k, among
cand nodes belonging to shapeof template
tplate
1 closest ‚Üê arg minp‚ààcand (dtplate(p.id, k.id))
2 return closest
the link requested by the PLEIADES target speciÔ¨Åcation. The
variables used to maintain the state of the Port Selection and
Port Connection protocols are shown in Table III.
1) GETCLOSEST(cand,k, tplate): This function is used by
both the Port Selection and Port Connection routines to Ô¨Ånd
the closest node to a port. Given a set of nodes cand and a
port k, that all belong to the same shape s of template tplate,
GETCLOSEST uses the shape template‚Äôs rank function, dtplate
(see Section III-A), to measure the ‚Äúdistance‚Äù of each node
in cand to the port k. The function returns the node whose
distance to port k is minimal.
2) Port Selection: We want each node n to know the
port node of each of its shape‚Äôs ports. The Port Selection
routine maintains two variables for that purpose: for each port
k of shape s, towards_port[k] contains the address of the
presumed port node for k, and the is_port[k] Ô¨Çag is set when
n believes it is in charge of k (in that case, is_port[k] points
to n itself).
The variable shape.ports contains the whole set of shape
s‚Äôs ports, given by the conÔ¨Åguration. To Ô¨Åll is_port[k] and
towards_port[k], n iterates over each port k in shape.ports
(line 1). By calling GETCLOSEST, n then checks which node is
closest to the port k among all local nodes it knows of (lines 2-
3). Candidates are taken from the local view Vlocal computed
by SSP, from the Shape Building protocol‚Äôs view Vshape, in
addition to n itself and the previous towards_port[k]. n
Algorithm 4: Port Connection on node n
Output: n establishes a link with the node most likely
1 foreach k1 ‚àà n.shape.ports do
(cid:2) Only executed by presumed port node for k1
in charge of k2 within dist_shape
if n.is_port[k1] then
of
shape_id ‚Üê k1.remote_shape.id
shape_template ‚Üê
k1.remote_shape.template
k2 ‚Üê k1.remote_port
(cid:2) Closest remote node from k2 that n knows
cand ‚Üê {n.Vremote[k1], n.connected_to[k1]}
closest ‚Üê
(cid:2) Remote request: who is the port node for k2?
GETCLOSEST(cand, k2, shape_template)
n.connected_to[k1] ‚Üê
closest.towards_port[k2]
2
3
4
5
6
7
8
end
9
10 end
sets is_port[k] to true if it is the closest node to k, and to
false otherwise (line 4). towards_port[k] is set to n if n
seems to be the port node (line 6). Otherwise, n requests
the closest node‚Äôs own towards_port[k] (line 8), making
towards_port[k] greedily converge to the port node for k.
3) Port Connection: When a node n believes it is in charge
of a port k1, it needs to Ô¨Ånd the other end of the topological
link: the port node for k2 in the remote shape (called s2). The
goal of the Port Connection routine, when n is in charge of
a port k1, is to maintain the connected_to[k1] variable to the
address of k2‚Äôs port node.
From lines 1 to 5, we iterate over each port k1 in
shape.ports, check that n is in charge of k1, and create
several variables: shape_id contains the ID of the linked shape
s2, shape_template is s2‚Äôs shape template, k2 represents the
remote port of k1‚Äôs link. n then picks the closest node to
k2 among two potential candidates (line 6): Vremote[k1] (the
random node from s2 provided by RSP), and connected_to[k1]
(n‚Äôs previous estimation of k2‚Äôs port node). It then calls the
GETCLOSEST function on line 7, that will use the remote
shape‚Äôs ranking function to Ô¨Ånd the closest node to k2 among
the candidate set. Finally, on line 8, n requests closest for its
towards_port[k2] (leveraging the Port Selection procedure)
to Ô¨Åll n.connected_to[k1]. This implementation again allows
connected_to[k1] to converge towards k2‚Äôs real port node in
a greedy fashion.
IV. EVALUATION
In this section, we Ô¨Årst discuss our evaluation set-up
(Section IV-A) before brieÔ¨Çy illustrating how PLEIADES can
be used to create a range of advanced distributed struc-
tures (Section IV-B). We then evaluate the performance of
547
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:50:29 UTC from IEEE Xplore.  Restrictions apply. 






	



(a)
(b)
(c)
Figure 4: The PLEIADES conÔ¨Ågurations used to create the
systems shown in Figure 5.
PLEIADES without reconÔ¨Åguration or failures, in terms of
convergence speed, scalability, and communication overhead
(Section IV-C). Finally we test the reactions of PLEIADES
under important perturbations, such as when a large portion
of the system crashes, or an on-the-Ô¨Çy reconÔ¨Åguration occurs
(Section IV-D).
A. Evaluation set-up and methodology
We implemented the protocols that make up PLEIADES on
top of PeerSim [27], except for the Global RPS protocol,
which we emulated directly through PeerSim‚Äôs API. We set
the maximum size of Vlocal to 10, that of Vremote to the number
of shapes in the systems, and we did not bound Vshape, as in
the original Vicinity protocol [37]. In order to demonstrate the
capabilities of PLEIADES we created several shape templates
(ring, star, clique) to serve as building blocks for more
complex structural invariants. All experiments were averaged
over 25 runs, to smooth the noise due to the probabilistic
nature of gossip algorithms. We computed 90% conÔ¨Ådence
intervals but did not display them on the Ô¨Ågures because they
were too small to be readable.
B. Examples
Figure 4 graphically presents three conÔ¨Åguration Ô¨Åles used
by PLEIADES to construct the three distributed systems shown
in Figure 5. These three examples connect simpler shapes to-
gether (cliques and stars, shown symbolically in Figure 4 and
with different colors in Figure 5). The resulting toplogies can
be found in real-world applications, such as database sharding
(Figure 5a), distributed key value stores (Figure 5b) or partially
decentralized services using super-peers (Figure 5c).
These three examples illustrate PLEIADES‚Äôs simplicity of
use and expressiveness: a few basic shapes sufÔ¨Åce to create
an inÔ¨Ånite number of variations that can be tailored to an
application‚Äôs needs.
C. Performances
PLEIADES targets very large systems using decentralized
protocols. Decentralization, because it avoids any central point
of coordination, and carries the risk of a degraded perfor-
mance and/or high overhead. In the following we evaluate
PLEIADES‚Äôs performances in terms of convergence speed
(Section IV-C1), scalability (Section IV-C2), and communi-
cation overhead (Section IV-C3).
1) Convergence: We evaluate PLEIADES‚Äôs convergence on
a scenario comprising three rings connected into a ring of
rings, whose conÔ¨Åguration is represented in Figure 7. Figure 6
shows the execution of PLEIADES with this conÔ¨Åguration on
100 nodes at three stages of the execution: after initialization
(Fig. 6a), while the system is converging (Fig. 6b) and once
converged (Fig. 6c). The overall system converges to the
structure prescribed by its conÔ¨Åguration in only 6 rounds.
A round‚Äôs duration is highly dependent on an application‚Äôs
needs, but setting for instance a round to 5s (a realistic
assumption in light of PLEIADES‚Äôs low communication costs
as we will see in Section IV-C3), 6 rounds would correspond
to a convergence time of 30s to organize 100 nodes from an
arbitrary starting state. This time is comparable to the boot up
time of a virtual machine on a public cloud.
Figure 8 shows the progress of the various sub-protocols that
constitute PLEIADES on a ring of rings with a larger systems of
25,600 nodes, and a larger conÔ¨Åguration comprising 10 rings.
The Ô¨Ågure charts over time the proportion of nodes in the
correct state for a given protocol, from the point of view of a
global omniscient observer. Except for the Port Connection
Protocol, all protocols experience a rapid phase shift once
they start converging, as is common in decentralized greedy
protocols [17], [37]. The sequence of convergence roughly
follows the dependencies between the protocols illustrated in
Figure 2: the membership protocols Remote Shapes (RSP) and
Same Shape (SSP) are the Ô¨Årst to converge, followed by the
Shape Building protocol (which depends on SSP), and the Port
Selection protocol (which depends on Shape Building and on
SSP).
The Port Connection protocol shows a less regular pro-
gression. The peak around round 4 is due to a few nodes
that brieÔ¨Çy believe they are ports (because Port Selection
has not converged yet), and erroneously connect to remote
shapes, thus falsely increasing our metric. In other words,
Port Connection brieÔ¨Çy converges to a local maximum but
quickly escapes it when Port Selection starts to converge. Note
however how ports get successfully connected even though the
routing information provided by the Port Selection protocol is
not fully converged yet: after 10 rounds, both the individual
rings (Shape Building) and their connections (Port Connection)
are in place to about 90%.
2) Scalability: PLEIADES scales well when the number of
nodes and shapes in the system augments. We measured the
convergence time of the system in rounds for a large variety
of conÔ¨Ågurations, according to the following convergence
criteria:
‚Ä¢ Same Shape Protocol (SSP): at least 90% of the nodes
have found 10 neighbours in the same shape;
‚Ä¢ Remote Shapes Protocol (RSP): at least 90% of the nodes
have found a node in each shape;
‚Ä¢ Shape Building Protocol: at least 90% of the nodes have
found their 2 closest neighbours in the ring;
‚Ä¢ Port Selection Protocol: at least 90% of the ports are
assigned to the correct node (and only this one);
548
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:50:29 UTC from IEEE Xplore.  Restrictions apply. 
5
13
17
7
10
4
2
12
6
16
9
3
1
15
14
0
8
11
20
18
24
27
21
19
26
25
22
23
29
28
16
17
18
19
4
3
1
2
0
15
5
10
12
14
11
13
6
9
7
8
20
17
18
25
24
19
16
15
23
31
27
13
33
35
34
36
32
37
30
28
26
29
38
0
11
2
3
6
9
7
1
8
4
5
22
21
14
39
10
12
47
46
42
43
44
41
40
49
48
45
(a) A star of 5 Clique shapes, similar to topologies
used in database sharding.
(b) A ring of 4 Clique shapes, similar to topologies
used in distributed key-value stores.
(c) A clique of 4 Star shapes, similar to topologies
used in partially decentralized services with super-
peers.
Figure 5: The result topologies corresponding to the conÔ¨Ågurations of Figure 4 (after 10 rounds of simulation).
92
84
82
75
81
97
71
98
90
93
68
72
88
76
79
86
96
70
94
78
64
35
19
80
11
34
56
73
51
62
46
87
77
83
99
95
85
28
26
89
66
74
60
42
54
69
45
39
29
15
5
18
27
91
17
32
12
20
1
10
2
31
6
16
7
25
53
58
47
48
67
52
49
43
41
37
40
55
59
65
61
38
44
57
90
87
75
68
71
78
30
4
0
21
33
13
36
9
22
23
24
14
8
3
50
63
98
76
97
74
69
95
93
73
81
70
79
83
91
82
88
94
96
84
92
72
64
54
57
60
42
43
61
51
45
35
59