title:Secure and Efficient Key Derivation in Portfolio Authentication Schemes
Using Blakley Secret Sharing
author:Peter Mayer and
Melanie Volkamer
Secure and Efficient Key Derivation in 
Portfolio Authentication Schemes 
Using Blakley Secret Sharing
Peter Mayer, Melanie Volkamer
Usable Security  Lab
Crypto Lab
e1
e2
e3
e4
e1
e2
e3
e7
e1
e2
e4
e7
e1
e2
e6
e7
Peter Mayer, Melanie Volkamer
e1
e2
e3
e5
e1
P
a
s
s
w
o
r
d
e1
e2
e3
e4
e5
e6
e7
c1
c2
c3
c4
…
e1'
e2'
e3'
e4'
S
e
t
C
h
a
l
l
e
n
g
e
I
n
p
u
t
U
s
e
r
e2
e4
e5
e1
e2
e5
e6
e1
e3
e4
e5
.
.
.
.
.
.
.
.
.
.
.
.
e4
e5
e6
e7
e2
e4
e5
e6
e2
e5
e6
e7
e3
e4
e6
e7
Common  Secret
Stored  Information
(Hash)
Password
Verification
...
1 | Peter Mayer | ACSAC 2015 | 11.12.2015
Portfolio authentication
e1
e2
e3
e4
e5
e6
e7
P
a
s
s
w
o
r
d
c1
c2
c3
c4
e1'
e2'
e3'
e4'
S
e
t
C
h
a
l
l
e
n
g
e
I
n
p
u
t
U
s
e
r
Stored  Information
Password
Verification
...
2 | Peter Mayer | ACSAC 2015 | 11.12.2015
Why portfolio authentication?
3 | Peter Mayer | ACSAC 2015 | 11.12.2015
Graphical recognition-based 
portfolio authentication
e1
e2
e3
e4
e5
e6
e7
P
a
s
s
w
o
r
d
c1
c2
c3
c4
e1'
e2'
e3'
e4'
S
e
t
C
h
a
l
l
e
n
g
e
I
n
p
u
t
U
s
e
r
Stored  Information
Password
Verification
...
✓
4 | Peter Mayer | ACSAC 2015 | 11.12.2015
Graphical recognition-based 
portfolio authentication
e1
e2
e3
e4
e5
e6
e7
P
a
s
s
w
o
r
d
c1
c2
c3
c4
e1'
e2'
e3'
e4'
S
e
t
C
h
a
l
l
e
n
g
e
I
n
p
u
t
U
s
e
r
Stored  Information
Password
Verification
...
5 | Peter Mayer | ACSAC 2015 | 11.12.2015
Portfolio authentication
§Naïve approach
§ Generate & store the hashes for all authorized subsets
§ Check if user input matches one of the hashes
§ Easy to implement
§ Factorial growth of number of hashes
➔ inefficient
6 | Peter Mayer | ACSAC 2015 | 11.12.2015
(t,n)-threshold verification
e1
e2
e3
e4
e5
e6
e7
P
a
s
s
w
o
r
d
c1
c2
c3
c4
S
e
t
C
h
a
l
l
e
n
g
e
e1
e2
e3
e4
e1
e2
e3
e7
e1
e2
e4
e7
e1
e2
e6
e7
e1
e2
e3
e5
e1
e2
e4
e5
e1
e2
e5
e6
e1
e3
e4
e5
.
.
.
.
.
.
.
.
.
.
.
.
e4
e5
e6
e7
e2
e4
e5
e6
e2
e5
e6
e7
e3
e4
e6
e7
challenge response 
pairs correspond to 
parties
➔	
  𝑛= password
➔	
  𝑡=	
  authorized	
  subsets
7 | Peter Mayer | ACSAC 2015 | 11.12.2015
e1'
e2'
e3'
e4'
I
n
p
u
t
U
s
e
r
Common  Secret
Stored  Information
(Hash)
Password
Verification
...
Secret sharing
Usual Secret sharing
1. Choose construct
2. Choose common secret
3. Generate and distribute 
shares
4. Combine shares to 
reconstruct common 
secret
8 | Peter Mayer | ACSAC 2015 | 11.12.2015
Shamir secret sharing
1. Dealer chooses 
polynomial a of degree 
𝑡−1
2. the common secret is 𝑎6
3. Choose shares 𝑦8=𝑎𝑥8
4. Reconstruct 𝑎6 using 
Lagrange interpolation
Secret sharing
Usual Secret sharing
1. Choose construct
2. Choose common secret
3. Generate and distribute 
shares
4. Combine shares to 
reconstruct common 
secret
9 | Peter Mayer | ACSAC 2015 | 11.12.2015
Shamir secret sharing
polynomial a of degree 
common secret
1. Dealer chooses 
𝑡−12.𝑎6 is chosen as the 
3. Choose shares 𝑦8=𝑎𝑥8
4. Reconstruct 𝑎6 using 
Lagrange interpolation
Blakley secret sharing
in 𝑡-dimensional space
Blakley secret sharing
§Uses hyperplane geometry 
first coordinate of 
Shares
Common
Secret
10| Peter Mayer | ACSAC 2015 | 11.12.2015
1. Common secret is the 
random 𝑡-dimensional 
point 𝑥 in 𝐺𝐹(𝑝)
2. The dealer chooses 𝑡
values 𝑚8B at random 
shares 𝑦8 for all parties 
𝑚8C𝑥C+𝑚8E𝑥E+⋯+𝑚8G𝑥G=𝑦8
secret, 𝑡 parties 
solve 𝑀I𝑥=𝑦′
4. To reconstruct the 
for each party…
3. …and calculates the 
combine their shares to 
Blakley secret sharing
§As is, the problem persists
§but it is possible to adapt 
Blakley secret sharing 
allowing preselection of 
the shares
11| Peter Mayer | ACSAC 2015 | 11.12.2015
first coordinate of 
for each party…
3. …and calculates the 
1. Common secret is the 
random 𝑡-dimensional 
point 𝑥 in 𝐺𝐹(𝑝)
2. The dealer chooses 𝑡
values 𝑚8B at random 
shares 𝑦8 for all parties 
𝑚8C+𝑚8E+⋯+𝑚8G=𝑦8
secret, 𝑡 parties 
solve 𝑀I𝑥=𝑦
4. To reconstruct the 
combine their shares to 
(t,n)-threshold verification
Procedure
Enrollment
1. Choose prime 𝑝 and random 
𝑡	
  -dimensional point 𝑥 in 
𝐺𝐹(𝑝)
𝑦8=𝐾𝐷𝐹(𝑒8) from password 
elements 𝑒8
𝑚8C,…,𝑚8GPC
4. Solve 𝑚8C+𝑚8E+⋯+𝑚8G=𝑦8
for 𝑚8G
5. Store 𝑀 and 𝑠
2. Derive share 
3. Choose coefficients 
12| Peter Mayer | ACSAC 2015 | 11.12.2015
𝑥= 𝑥C⋮𝑥G
𝑠=𝐾𝐷𝐹(𝑥C)
𝑚CC ⋯ 𝑚CG
⋮
⋮
⋱
𝑚TC ⋯ 𝑚TG
𝐾𝐷𝐹(𝑒8)
𝑦= 𝑦C⋮𝑦T
𝑥C⋮𝑥G = 𝑦C⋮𝑦T
(t,n)-threshold verification
Procedure
Verification
1. Gather user input 𝑒′8
2. Derive shares 𝑦′8 from 
the user input 𝑒′8
3. Build 𝑀 from the 𝑚8B
4. Solve 𝑀′𝑥=𝑦′ for 𝑥
𝐾𝐷𝐹𝑥C ≟𝑠
corresponding to the 
challenges
5. Check whether 
13| Peter Mayer | ACSAC 2015 | 11.12.2015
c2
c3
c4
S
e
t
C
h
a
l
l
e
n
g
e
c1
I
e4'
e3'
n
p
u
t
e1'
e2'
U
s
e
r
𝐾𝐷𝐹(𝑒′8)
𝑦′= 𝑦′C⋮𝑦′G
𝑥C⋮𝑥G = 𝑦′C⋮𝑦′T
𝑚′CC ⋯ 𝑚′CG
⋮
⋮
𝑚′GC ⋯ 𝑚′GG
𝑠≟𝐾𝐷𝐹(𝑥C)
⋱
Security properties
Guessing Resistance
§All variables in 𝐺𝐹(𝑝)
§𝑝 distinct values
§ on average VE attempts
§To ensure strength 𝐻:
𝑝≥2YZC
Secure Storage
§Security of storage 
completely depends on 
used KDF
§If KDF is secure, 
(t,n)-threshold 
verification is secure
§Perfect secret sharing 
14| Peter Mayer | ACSAC 2015 | 11.12.2015
Efficiency properties
§Evaluation against naïve approach
§ Only alternative available
§Storage
§Computation time
15| Peter Mayer | ACSAC 2015 | 11.12.2015
Storage comparison
Two security levels
§PIN-level (password space of 10\ entries)
§Password-level (password space of ~2E^ entries)
§ Example: 4 out of 6, alphabet: 0-9
§ Example: 6 out of 9, alphabet: 95 keys on US standard 
keyboard
16| Peter Mayer | ACSAC 2015 | 11.12.2015
Storage comparison
)
s
e
t
y
b
(
9
t
n
e
m
e
r
i
u
q
e
r
9
9
e
g
a
r
o
t
S
6  times  higher  
storage  requirement  
in  naïve  approach
3000
2500
2000
1500
1000
500
0
2688
10  times  higher  
storage  requirement  
in  naïve  approach
480
80
248
PIN,level
Password,level
Naive9approach
(t,n),threshold9verification
17| Peter Mayer | ACSAC 2015 | 11.12.2015
Computation time
§Monte Carlo evaluation
§ 10.000 iterations
§Implementation in Mathematica
§ Salted SHA-256 as KDF
§ Code available on GitHub
§ https://github.com/SecUSo/t-­n-­threshold-­verification
18| Peter Mayer | ACSAC 2015 | 11.12.2015
Computation time comparison
)
s
(
n
o
i
t
a
r
e
p
o
r
o
f
e
m
i
t
n
a
e
M
27
24
21
18
15
12
9
6
3
0
Creation
Verification
10.000   iterations   of  SHA-­256
39,42
0,113
0,101
52,56
0,310
0,283
65,7
2,142
1,954
78,84
4,419
3,828
91,98
9,843
7,360
105,12
25,300
13,666
Strength of authentication mechanism H
All  timings  are  smaller  than  the  usual  10.000  iterations  of  
SHA-­256  recommended  for  password  storage  on  the  same  platform.
19| Peter Mayer | ACSAC 2015 | 11.12.2015
Summary
§(t,n)-threshold verification
§ Enabler for new authentication technologies
§ More efficient in terms of storage and time
§ Allows secure & efficient storage in portfolio authentication 
schemes for the first time
§ Allows additional operations to easily modify the password
20| Peter Mayer | ACSAC 2015 | 11.12.2015
What’s next?
§Portfolio authentication 
originally conceived for 
graphical recognition-
based schemes
§Applications go far 
beyond this limited 
scenario
21| Peter Mayer | ACSAC 2015 | 11.12.2015
Images  by  Andrew  Forrester,  Wilson  Joseph,  Ricardo  Moreira,  Laurent  Canivet,  Magicon,  Edward  Boatman  and  Evgeniy Kozachenko
(t,n)-threshold verification
Allows  arbitrary  choice  of  
passwords
e1
e2
e3
e4
e5
e6
e7
P
a
s
s
w
o
r
d
c1
c2
c3
c4
S
e
t
C
h
a
l
l
e
n
g
e
e1
e2
e3
e4
e1
e2
e3
e7
e1
e2
e4
e7
e1
e2
e6
e7
e1
e2
e3
e5
e1
e2
e4
e5
e1
e2
e5
e6
e1
e3
e4
e5
.
.
.
.
.
.
.
.
.
.
.
.
e4
e5
e6
e7
e2
e4
e5
e6
e2
e5
e6
e7
e3
e4
e6
e7
Creation  faster  
than  naïve  
approaches  in  
relevant  scenarios
Enables  use  of  graphical  
recognition-­based  
passwords  and  and  other  
more  diverse  setups
…
e1'
e2'
e3'
e4'
I
n
p
u
t
U
s
e
r
22| Peter Mayer | ACSAC 2015 | 11.12.2015
Supports  additional  
operations  in  comparison  
to  naïve  approach
Common  Secret
Stored  Information
(Hash)
6  to  10  times  
less  storage  
than  naïve  
approach
Password
Verification
...
Verification  faster  for  higher  
numbers  of  authorized  subsets