inspection of the reconstructed execution help unfold details of
the attack delivery process. More details about the deﬁnitions
and limitations of a reconstructed execution are in § IV-A.
2) Investigating the Attack Delivery Process: In advanced
attacks, simply reconstructing the execution of the attack is not
sufﬁcient to understand the attack. For example, in this moti-
vating example, the analyst already knows that it downloads a
malware binary. Reproducing the execution without allowing
more in-depth inspections is not helpful. Instead, how the
malicious code that downloads the malware binary is delivered
and executed is worth investigating. This requires using debug-
Fig. 1. Timeline of an execution of 10 browser tabs. The x-axis represents
the time for the execution (in seconds) and the y-axis represents 10 different
browser tabs. The abbreviated URLs (i.e., U1∼U11) are shown in the bottom.
Timeline and Tabs during the Attack. Fig. 1 shows a time-
line of Firefox during the incident. We visualize three different
regions that include the entire execution of the browser from
the beginning ( 1 ), the execution of all browser tabs during
the malicious ad ( 2 ), and the execution of the browser tab
containing malicious ad ( 3 ). Note that while the malicious ad
executes, other tabs in the background are also loading contents
(e.g.,
content updates) and, in our case, the executions of
background tabs are longer than the exploited tab 10.
B. Goals and Scope
To understand how the attack unfolded in detail, C2SR
aims to (1) reconstruct and reproduce the attack delivery
process (which occurs in tab 10),
is responsible for
loading the malicious advertisement on www.forbes.com and
delivering the malicious payload downloading the malware
(essentially the red shaded region 3 ).
that
Moreover,
for effective post-mortem forensic analysis,
C2SR aims to (2) allow live user interactions for introspecting
reconstructed executions so that security analysts can use
various forensic analysis tools to effectively investigate the
reconstructed incident. Speciﬁcally, to understand a website’s
execution (including the malvertising campaign) which in-
volves multiple software layers such as HTML, JavaScript,
and WebAssembly where each of them has a unique semantic
and runtime support, domain speciﬁc analysis tools for each
layer [30], [25], [2] are particularly effective.
Identifying the Exploited Tab to Reconstruct. The recorded
execution trace includes 10 browser tabs’ executions. Among
them, the forensic analyst identiﬁes Tab 10 that creates and
writes the malicious binary ﬁle. However, in our scenario, the
analyst does not know how the website delivers a malicious
payload that downloads the malware. Hence, she wants to
reconstruct the entire execution of the tab to investigate.
C. C2SR on the Motivating Example
1) Reconstructing the Attack: The forensic analyst uses
C2SR to reconstruct Tab 10 (www.forbes.com) to understand
3
*.youtube.com89*.cnn.com*.krxd.netU10docs.google.com7U9U9webchat.freenode.net6U7U8*.nyt.com5*.krxd.net*.nytimes.commail.google.com4*.google.com*.google.comU53U6*.moatads.com10U6*.forbes.comMalicious AdsU32U4U3U10*.krxd.netU11*.facebook.com1U1U2*.forbes.comTab 10 OpenedMalicious Ad LaunchedU8Tabs 1-9 OpenedTabTime (s)213Region:U1: *.fbcdn.com, U2: *.facebook.com, U3: *.redditstatic.com, U4: *.reddit.com, U5: *.gstatic.com, U6: *.google.com, U7: kiwi.freenode.net, U8: kiwiirc.com, U9: play.google.com, U10: *.googlevideo.com, U11: cdn.cnn.comAbbreviated URLs0…85909580Malware Downloaded100ging tools (that often did not exist during recording) on the
reconstructed execution. C2SR allows the analyst to interact
with the reconstructed execution so that the analyst can install
and use additional debugging tools [29], [30] for investigation.
In the following paragraphs, we show how analysis tools
(that require user interactions) are used for investigating the
motivating example.
Browser Extension to Find the Malicious Payload. Investi-
gating web attacks is challenging due to the sheer number of
loaded contents and executed code. In this motivation example,
the forensic analyst only knows that the malicious code that
downloads the malware is dynamically generated. Hence,
she uses a Firefox extension called Villain [29] to monitor
dynamically generated JavaScript code (e.g., via eval()).
Note that the extension did not exist during the recording. The
forensic analyst introduces the new extension for inspection.
The extension allows the analyst to focus on the executed code
that is already decoded and deobfuscated.
The analyst installs this extension and uses it to identify
malicious payload generated and executed via eval() ( B in
Fig. 2). Note that existing record-and-replay techniques do not
even allow installing a new extension that runs on top of a
replayed execution, because the installation causes a number
of new instructions and syscalls to be executed.
Fig. 2. Malicious Payload Delivery via WebAssembly and JavaScript.
Investigating the Attack Delivery Process. Fig. 2 shows
the identiﬁed eval() that delivers the malicious payload.
Then, the analyst leverages Firefox’s default debugger (i.e.,
DevTools [30]) to set a breakpoint at line 13 ( B ), which
executes the malicious payload (via eval()) returned from a
WebAssembly module through getpayload() method. Note
that the WebAssembly module is also dynamically instantiated.
At line 11 ( W ), the module is created from the code and
dummy objects, where the WebAssembly binary is encoded
as base64-encoding at line 1. Since all these processes happen
dynamically, leveraging DevTools to inspect the reconstructed
WebAssembly program’s code is particularly helpful. Further,
the analyst sets the breakpoint at line 11 to understand how the
WebAssembly module is created. By inspecting the arguments
(e.g., code and dummy) and the resulting WebAssembly object,
she ﬁnds out that it injects the code into the dummy object to
create the WebAssembly module. Without the interactability of
C2SR, monitoring the reconstructed execution provides limited
details regarding how the attack unfolds, particularly how the
malicious payloads are transferred and generated secretly.
4
Summary. Post-mortem forensic investigation often requires
the capability of reconstructing a partial execution from
a long-running application. More importantly, as attacks
become more sophisticated and stealthy (e.g., ﬁleless attacks
leveraging WebAssembly), detailed on-the-ﬂy inspection of
the reconstructed execution is highly desirable. In particular,
allowing to install and use new plug-ins and debugging tools
on the reconstructed execution signiﬁcantly enhances foren-
sic analysis capabilities. C2SR enables an interactable partial
execution reconstruction, providing a practical solution for
post mortem forensic analysis.
TABLE I.
LIMITATIONS OF EXISTING APPROACHES.
Technique
Partial
Record
Replay Inspection Overhead
Detail
Mod. not
Required
General
Approach
Partially
Partially
Partially
Fine-grain Rec/Rep
Rec/Rep by System mod.
Replay Acceleration
Log-based Forensics
Replay-based Forensics
Browser Replay
Browser Forensics
C2SR
* N/A: Not applicable.
D. Limitations of Existing Approaches
No
No
Yes
N/A
No
No
N/A
Yes
High
Low
N/A
Low
Low
Low
Low
Low
Partially
No
No
No
Yes
Not required
Required
N/A
Partially
Required
Required
Required
Not required
Yes
Yes
Yes
Yes
Yes
No
No
Yes
Table I summarizes the limitations of existing techniques
in investigating attacks similar to the motivating example.
Record-and-replay. Fine-grain record-and-replay techniques
record program instructions and/or shared memory access
information to enable deterministic replay [80], [5], [39], [70].
Also, there exist approaches [27], [87], [91], [21] that modify
applications, kernel, or hardware to enable a faithful replay.
[37], [45] can replay a program with additional debugging code
while they require recompilation/modiﬁcation of the target
program. Moreover, they do not allow additional debugging
tools running together with the target application such as
DevTools, limiting the applicability of the replayed execution.
In general, they suffer from signiﬁcant runtime and space
overhead. DoublePlay [96] greatly reduces logging overhead
by parallelizing the record-and-replay executions, however, it
requires additional resources for the parallelized replay. In
addition,
traditional record-and-replay techniques replay an
execution from the beginning of a recorded execution. In our
motivating example, the entire execution of 10 browser tabs
(the region 1 ) has to be replayed, leading to needless cost
and effort to investigate irrelevant executions.
Replay Acceleration. Checkpointing techniques [93], [52],
[91], [53] create checkpoints of the execution periodically or
on particular events (e.g., process creation) during recording. A
replay can be started from one of the checkpoints. However,
they still need to replay nonessential concurrent tasks (e.g.,
in Fig. 1, the yellow shaded region 2 will be replayed if
the checkpoint is created at 80 seconds, when the Tab 10 is
created). Replay reduction technique [56] can reduce a replay
log while retaining its ability to reproduce a failure. How-
ever, it requires source code annotation. Furthermore, replay
acceleration techniques and faithful replay tools typically do
not support interactable replay (e.g., debugger integration) as
additional instructions and system calls invoked by debuggers
are not seamlessly handled. REPT [22] is a reverse debugging
technique to reproduce software failures by recovering pro-
gram state (e.g., data values). It focuses on faithfully replaying
12345678910111213BWLegendWBWebAssemblymodule delivering payloadBreakpoint to Inspect Program States (e.g., Variables)varcode=atob('AGFzbQEAAAABBwFgAnx8...')constmem=newWebAssembly.Memory(...)constdummy={env:{...tableBase:0,memory:mem,memoryBase:1024,...}}WebAssembly.instantiate(code,dummy).then(({module,instance})=>{eval( instance.exports.getpayload() )})Requires user interactions for inspection (through DevTools)Inspecting values of variablesFig. 3. Workﬂow of C2SR. Shaded boxes represent components of C2SR.
short execution that is immediately before the program crashes
(e.g., less than 100K instructions in the paper’s evaluation). As
the authors mentioned in the paper, the data recovery accuracy
decreases if the execution trace increases. In our scenario, we
aim to reconstruct the entire attack delivery process that is
longer than REPT can usually handle.
Forensic Analysis. Log-based forensic analysis techniques
analyze system events (e.g., syscalls) and generate causal
graphs [49], [35], [54], [51], [65], [69], [10], [50], [92],
[62]. The main limitation of them is the lack of inspection
capability. They focus on identifying causal relations between
system subjects and objects but do not provide details of attack
behaviors. In our example, they can identify the origin of
the attack (e.g., IP addresses for www.forbes.com and the
malicious advertisement) while they cannot reconstruct the
execution of JavaScript and WebAssembly modules, failing
to provide the details of the attack delivery process. Replay-
based forensic analysis approaches [17], [67], [84], [28], [42],
[43], [44] generate causal graphs by replaying the recorded
execution log. However, they inherit the limitations of record-
and-replay techniques (e.g., lack of partial replay capability
and the requirement of system modiﬁcation).
Brower-speciﬁc Approaches. Browser-level
(or domain-
speciﬁc) recording and replay techniques [71], [13], [16],
[7], [66], [13] are effective in reproducing web- and web-
application related executions. They allow replaying com-
plicated web components such as JavaScript execution or
user interactions with web applications. Enhanced browser
logging [95], [11], [72], [57] can capture web-speciﬁc events
to enable the investigation of web-based attacks. However,
both of browser-speciﬁc techniques typically require browser
instrumentation or extensions. Furthermore,
they can only
handle web attacks that completely unfold inside the browser.
III. SYSTEM OVERVIEW
Fig. 3 shows a workﬂow of C2SR, which consists of three
phases: Recording in Production Run, Resource Reconstruc-
tion, and Cybercrime Scene Reconstruction.
Online Event Recording. C2SR recorder logs system calls
of a target process. Typically, one may log multiple pro-
cesses in production run, as any of them might be exploited.
C2SR hooks APIs that invoke syscalls (via shared library and
LD PRELOAD trick) on the target program. It does not require
modiﬁcations on target programs (e.g., instrumentation). The
recorder generates an execution trace which is a sequence of
executed system calls with arguments and timestamps.
Ofﬂine Trace Post-Processing. Given the execution trace,
C2SR resource reconstructor recovers states of resources (and
resource content for each state) accessed during the recording.
Then, it creates reconstructed resources from the recovered
states and contents.
Ofﬂine Cybercrime Scene Reconstruction. C2SR execution
reconstructor takes the target program and the reconstructed
resources as input. Then, it executes the target program and
monitors all resource accesses at runtime. When the program
tries to access resources that exist in the reconstructed re-
sources, C2SR redirects the accesses to them. C2SR allows
the reconstructed execution to be different at instruction and
syscall levels, as long as they have consistent resource accesses
with respect to the recorded execution. This design choice
provides forensic analysts with the ability to interact with the
reconstructed execution at replay time.
A. Concepts
IV. DESIGN
C2SR introduces a few concepts for partial and interactive
execution reconstruction. Fig. 4 illustrates the concepts and
differences between C2SR and the existing approaches. Each
box in Fig. 4 represents access to a particular resource where
the color of the box indicates which resource is accessed.