数据节。
Openresty中文编程网 User Guide Page 20
Running Tests PDF last generated: November 08, 2016
From this example, we can see that one test block can contain multiple tests and
the number of tests for any given test block can be determined or predicted by
looking at the data sections performing output checks. This is important when we
provide a “test plan” ourselves to the test file where a “test plan” is the exact
number of tests weexpectthe current test file to run. If a different number of tests
than the plan were actually run, then the test result would be considered malicious
even when all the tests are passed successfully. Thus, a test plan adds a strong
constraint on the total number of tests expected to be run. For our t/foo.t file here,
however, we intentionally avoid providing any test plans by passing the 'no_plan'
argument to the use statement that loads the Test::Nginx::Socket module. We will
revisit the “test plan” feature and explain how to provide one in a later section.
从上面的例子里，我们可以看到一个测试块可以包含多个测试， 而它的测试数则取
决于检查输出的数据节。 当我们需要给测试文件设定一个“测试计划”时，要记住，
“测试计划”的值等于我们期望运行的测试数。 如果实际运行的测试数不同于计划的
测试数，那么即使全部测试都通过了，测试结果也不会被接受。 所以，测试计划给
期望运行的测试总数添加了一个强约束。 不过在 t/foo.t 里面，当 use 加载
Test::Nginx::Socket 的时候，我们传递了 'no_plan' 参数，借此避免对测试计划的设
定。 我们会在后面继续讨论“测试计划”的概念，并展示如何设定它。
=== Running Multiple Files 运行多个文件
Running multiple test files are straightforward; just specify the file names on the
prove command line, as in
运行多个文件的方式跟单个文件的差不多，像这样在 prove 命令中指定它们的名字
即可：
[source,bash]
prove -v t/foo.t t/bar.t t/baz.t —-
If you want to run all the test files directly under the t/ directory, then using a shell
wildcard can be handy:
如果你打算一口气运行 t/ 文件夹下的所有测试文件，需要借助通配符的力量：
[source,bash]
prove -v t/*.t —-
In case that you have sub-directories under t/ , you can specify the -r option to
ask prove to recursively traverse the while directory tree rooted at t/ to find test
files:
如果在 /t 下有子目录，你可以指定 -r 选项，告诉 prove 从根目录 t/ 递归查找
测试文件：
Openresty中文编程网 User Guide Page 21
Running Tests PDF last generated: November 08, 2016
[source,bash]
prove -r t/ —-
This command is also the standard way to run the whole test suite of a project.
这个命令也是运行一个项目的所有测试用例的标准方法。
=== Running Individual Test Blocks 运行单个测试块
Test::Nginx makes it easy to run an individual test block in a given file. Just add the
special data section ONLY to that test block you want to run individually and prove
will skip all the other test blocks while running that test file. For example,
Test::Nginx 提供了运行给定文件的单个测试块的捷径。 仅需在要单独运行的测试块
中添加 ONLY 数据节，prove 就会在运行测试文件时跳过其他测试块。 举个例子：
[source,test-base]
=== TEST 1: hello, world This is just a simple demonstration of the echo directive
provided by ngx_http_echo_module. ngx_http_echo_module 提供的 echo 指令的一
个简单演示。 — config location = /t { echo “hello, world!”; } — request GET /t —
response_body hello, world! — ONLY —-
Now prove won’t run any other test blocks (if any) in the same test file.
现在 prove 不再会运行同一测试文件中的其他测试（如果有的话）。
This is very handy while debugging a particular test block. You can focus on one
test case at a time without worrying about other unrelated test cases stepping in
your way.
这一特性有助于你调试特定的测试块。你可以仅关注某一测试的运行结果，把其他
不相关的用例都抛到九宵云外。
When using the link:http://www.vim.org/[Vim] editor, we can quickly insert a
--- ONLY line to the test block we are viewing in the vim file buffer, and then type
:!prove % in the command mode of vim without leaving the editor window. This
works because vim automatically expands the special % placeholder with the path
of the current active file being edited. This workflow is great since you never leave
your editor window and you never have to type the title (or other IDs) of your test
block nor the path of the containing test file. You can quickly jump between test
blocks even across different files. Test-driven development usually demands very
frequent interactions and iterations, and Test::Nginx is particularly optimized to
speed up this process.
Openresty中文编程网 User Guide Page 22
Running Tests PDF last generated: November 08, 2016
在使用 link:http://www.vim.org/[Vim] 编辑器时，我们可以插入一行 --- ONLY 到位
于 vim 的当前文件缓冲区的测试块中， 然后在命令模式下输入 :!prove % ，就能在不
离开编辑器的同时运行测试。 这是因为 vim 会把 % 占位符展开成当前编辑的文件
的路径。 这是个很棒的工作流，因为你既不需要切换编辑器界面，也不需要输入测
试块标题（或其他ID）和测试文件的路径。你可以自如地在来自不同文件的测试块
间切换。 测试驱动开发通常要求非常频繁地进行交互和迭代，而 Test::Nginx 正是优
化了这一过程。
Sometimes you may forget to remove the --- ONLY line from some test files even
after debugging, this will incorrectly skip all the other tests in those files. To catch
such mistakes, Test::Nginx always reports a warning for files using the ONLY
special section, as in
有时候你可能忘记在调试后移除 --- ONLY ，导致文件中的其他测试没有被执行。 为
了避免这种疏忽，Test::Nginx 总会对使用了 ONLY 数据节的测试文件发出提醒，像
这样：
[source,console]
$ prove t/foo.t t/foo.t .. # I found ONLY: maybe you’re debugging? t/foo.t .. ok All
tests successful. Files=1, Tests=2, 0 wallclock secs (0.01 usr 0.00 sys + 0.09
cusr 0.03 csys = 0.13 CPU) Result: PASS —-
This way it is much easier to identify any leftover --- ONLY lines.
现在找出遗留的 --- ONLY 行变得简单多了。
Similar to ONLY , Test::Nginx also provides the LAST data section to make the
containing test block become the last test block being run in that test file.
类似于ONLY ，Test::Nginx 也提供了 LAST 数据节，可以让所在的测试块运行在测
试文件的最后。
NOTE: The special data sections ONLY and LAST are actually features inherited
from the Test::Base module.
NOTE: ONLY 和 LAST 这样的特殊的数据节实际上都是来自于 Test::Base 模块的特
性。
=== Skipping Tests 跳过测试
We can specify the special SKIP data section to skip running the containing test
block unconditionally. This is handy when we write a test case that is for a future
feature or a test case for a known bug that we haven’t had the time to fix right now.
For example,
我们可以使用 SKIP 数据节无条件跳过所在的测试块。 当我们为了一个尚未完成的
功能或 bug 修复写一个测试用例，就可以用上它。举个例子：
Openresty中文编程网 User Guide Page 23
Running Tests PDF last generated: November 08, 2016
[source,test-base]
=== TEST 1: test for the future — config location /t { some_fancy_directive; } —
request GET /t — response_body blah blah blah — SKIP —-
It is also possible to skip a whole test file in the prologue part. Just replace the
use statement with the following form.
在序言部分跳过整个测试文件也是可行的。仅需把 use 语句替换成下面的形式。
[source,Perl]
use Test::Nginx::Socket skip_all => “some reasons”; —-
Then running the test file gives something like follows.
然后运行这个测试文件会有如下的输出。
…. t/foo.t .. skipped: some reasons ….
NOTE: It is also possible to conditionally skip a whole test file but it requires a little
bit of Perl programming. Interested readers can try using a BEGIN {} before the use
statement to calculate the value of the skip_all option on the fly.
NOTE: 有选择地跳过整个测试文件也是可能的，不过这需要一点 Perl 编程的技巧。
感兴趣的读者可以尝试在 use 语句前使用一个 BEGIN {} 即时计算出 skip_all 选项
的值。
=== Test Running Order 测试运行的顺序
==== Test File Running Order 测试文件运行的顺序
Test files are usually run by the alphabetical order of their file names. Some people
prefer explicitly controlling the running order of their test files by prefixing the test
file names with number sequences like 001- , 002- , and etc.
测试文件通常按文件名的字母表顺序依序运行。 有些人会在测试名前面添加数字前
缀，比如 001- 、002- 等等，来控制测试文件运行顺序。
The test suite of the link:https://github.com/openresty/lua-nginx-
module#readme[ngx_http_lua] module follows this practice, for example, which has
test file names like below
link:https://github.com/openresty/lua-nginx-module#readme[ngx_http_lua] 的测试
套件就是这么做的，它的测试文件命名如下：
…. t/000-sanity.t t/001-set.t t/002-content.t t/003-errors.t … t/139-ssl-cert-by.t
….
Openresty中文编程网 User Guide Page 24
Running Tests PDF last generated: November 08, 2016
Although the prove utility supports running test files in multiple parallel jobs via the
-jN option, Test::Nginx does not really support this mode since all the test cases
share exactly the same test server directory, t/servroot/ , and the same listening
ports, as we have already seen, while parallel running requires strictly isolated
running environments for each individual thread of execution. One can still manually
split the test files into different groups and run each group on a different (virtual)
machine or an isolated environment like a Linux container.
尽管 prove 支持通过 -jN 选项并行运行多个测试，Test::Nginx 并不支持这种模式，
因为所有测试用例会用到同一个测试服务器目录 t/serroot/ ，监听同一个端口。 而
并行运行测试需要给每个线程隔离的运行环境。 当然你还是可以把测试文件分到不
同的组里，每个组在一个不同的虚拟／实体机或者隔离环境（如 Linux 容器）下运
行。
==== Test Block Running Order 测试块运行的顺序
By default, the Test::Nginx scaffoldshufflesthe test blocks in each file and run
them in arandomorder. This behavior encourages writing self-contained and
independent test cases and also increases the chance of hitting a bug by actively
mutating the relative running order of the test cases. This may, indeed, confuse
new comers, coming from a more traditional testing platform.
默认情况下，Test::Nginx 脚手架会乱序运行每个文件中的测试块。 这一行为鼓励
用户编写互不干扰、独立自主的测试用例，同时也通过变换用例的相对顺序提高找
出 bug 的概率。 对于熟悉传统测试框架的新用户来说，这确实有点奇怪。
We can always disable this test block shuffling behavior by calling the Perl function,
no_shuffle() , imported by the Test::Nginx::Socket module, before the run_tests() call
in the test file prologue. For example,
在调用 run_tests() 之前调用 Perl 函数 no_shuffle() ，我们可以关掉乱序运行测试的
行为。 这个函数来自于 Test::Nginx::Socket 模块。举个例子，
[source,Perl]
use Test::Nginx::Socket ‘no_plan’;
no_shuffle(); run_tests();
DDAATTAA… —-
With the no_shuffle() call in place, the test blocks are run in the exact same order
as their appearance in the test file.
由于 no_shuffle() 的调用，测试块将严格按照在测试文件中定义的顺序运行。
Openresty中文编程网 User Guide Page 25
测试前的准备 PDF last generated: November 08, 2016
测试前的准备
SSuummmmaarryy:: 正如我们上个章节里面看到的， `Test::Nginx` 提供了一个简
单规范的格式来表达测试用例。
== 测试前的准备
正如我们上个章节里面看到的， Test::Nginx 提供了一个简单规范的格式来表达测试
用例。 每个测试用例都用一个测试块来表示。一个测试块由一个标题、一个可选的
描述和几个数据节footnote:[data section 本书统一翻译为‘数据节’]， 用于指定输
入和期望的输出。在这一节我们将仔细看看对于不同的测试要求，如何准备这样的
测试案例。
设计测试用例在很多方面都是一门艺术。有时候可能设计测试案例花费的时间和精
力，多于实现要测试的功能， 这个和我们自己的经验有关。 Test::Nginx 努力尝试让
编写测试用例尽可能的简单， 但仍然做不到让整个测试用例设计的过程自动化。只
有你才确切的知道测试什么，以及如何去测试。 本节讲侧重于 Test::Nginx 提供的基
本原语，基于此你可以设计出巧妙和有效的测试用例。
=== 准备 NGINX 的配置
在一个测试块里面，我们可以用不同的数据节来指定我们自定义的代码片段， 放在
由 Test::Nginx 生成的最终的 nginx.conf 配置文件的不同位置中。
最常见的是 config 节，它用来在默认测试服务器的 server {} 配置块中插入自定义
代码片段。 我们也可以在 nginx.conf 的 http {} 配置块中，用 http_config 节来插入
自定义的内容。 main_config 节可以在 NGINX 配置的最上层范围中插入自定义内
容。 一起看看下面这个例子。
[source,test-base]
=== TEST 1: — main_config env MY_ENVIRONMENT;
— http_config init_worker_by_lua_block { print(“init”) }