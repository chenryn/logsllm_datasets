73
182
N/A
N/A
1
1,401
798
97
Table 3: Number of domains ﬂagged in each dataset, broken out by the type of activity that the use of the domain represents. The
INDLAB, UCB and CHINA analyses cover all information vectors: LBL and NERSC incorporate query names and types, but
not timing; SIE considers only query names; and SIEUNIQ only the contents of query names (not repetitions). SIE and SIEUNIQ
analyses includes additional considerations discussed in the Appendix.
while the timing-interval implementation used one name
and 16 distinct time intervals spaced 10 ms apart. The
query-type implementation used one name and 16 dis-
tinct query types.
In addition, these tunnels used ﬁve
distinct query names for command and control. We ex-
ﬁltrated a 10,000-byte compressed ﬁle and found that the
difference between the estimated exﬁltration volume and
the actual size ranged from 5–11 %.
These results conﬁrm that our procedure can readily
detect information that is encoded into query names, tim-
ing, or query record types, and that it can provide mean-
ingful upper bounds.
7.2 Evaluation on Operational Data
We now turn to evaluating our detection procedure as ap-
plied to the extensive datasets we gathered, comprising
230 billion lookups from the networks listed in Table 1.
A key question for whether our detector is opera-
tionally viable concerns the combination of (1) how
many domains it ﬂags for analysis, coupled with (2) how
quickly an analyst can identify the common case of a
ﬂagged domain not in fact posing a threat.
The ﬁltering steps in § 6 aim to address the ﬁrst issue.
Regarding the second issue, as we brieﬂy discussed in
§ 6.6 we ﬁnd that often analysts can rely on fate-sharing
to quickly determine they needn’t further investigate a
candidate domain. For example, a site’s analyst can rea-
son that a detection of google.com or mcafee.com is safe
to ignore, because if indeed an attacker has control over
those domains’ name servers, the site has (much) bigger
problems than simply the presence of surreptitious com-
munication to the sites.
Table 3 summarizes the ﬁndings across all of the
datasets. For each dataset, the row in bold gives the to-
tal number of different domains ﬂagged by our detector
(many appear in more than one day), and the bottom row
reﬂects the “steady state” burden on an analyst investi-
gating detections for the given environment. We parti-
tion the datasets into two groups. The logs for INDLAB,
LBL and NERSC include individual per-client lookups,
and thus these sites represent the sort of environments
for which we target our detection, using a threshold of
4 kB/day. The lookups recorded for UCB, CHINA and
SIE, on the other hand, are primarily aggregated across
many clients, and thus for these datasets we cannot per-
form per-client analysis. We do not aim to treat these
datasets as operational environments for our detection
procedure, but rather to assess what sort of surreptitious
communication the procedure can detect in real trafﬁc.
For them, we use a higher threshold of 10 kB/day to limit
our own analysis burden in assessing the resulting detec-
tions. Finally, the SIE dataset introduces some additional
complexities, as discussed in Appendix B.
We classiﬁed the detections based on manual analysis
to assign each to one of six general categories, as follows.
Conﬁrmed DNS channel reﬂects domains for which
we could amass strong evidence that indeed the detection
represents surreptitious communication over DNS. For
LBL, both ﬂagged domains correspond to tunnels that
staff members acknowledge having set up to obtain free
Internet access in WiFi hotspots that allow out DNS traf-
ﬁc without requiring payment. One used DNStunnel [8],
the other NSTX [13].
For SIE, we identiﬁed 3 types of tunnels. One type
(responsible for 42 domains) corresponds to a product of-
fered by Dynamic Internet Technology, a company that
builds tools to evade censorship [9]. These tunnels en-
code most requests in two 31-character labels, using only
USENIX Association  
11
22nd USENIX Security Symposium  27
alphanumerics, followed by an identiﬁer that appears to
identify the tunnel itself. Another 10 domains all have
whois information leading to MMC Networks Limited
(of Gibraltar), a company that provides a program of-
fering “Free WiFi” using tunneling [28]. The tunneling
technology used for these is a variant of Iodine, with the
main difference being use of only alphanumeric charac-
ters for the encoding. We also found 5 domains that use
Iodine, for reasons we have not been able to identify.
Finally, we examined an addition 150 billion DNS
records captured in a separate 259 days of monitoring
from SIE. Due to monitoring gaps, this expanded data is
unsuitable for analyzing long-term analyst burden. But
in it (using a somewhat higher detection threshold) we
detected 42 new tunnel instances, including a new tunnel
type belonging to vpnoverdns.com.
Benign use encompasses a number of different sce-
narios that we believe would lead an analyst to fairly
quickly decide that the corresponding activity does not
appear problematic. These scenarios include ﬂagging
of: (1) a well-known site (e.g., google.com), for which
a name server breach would reﬂect a catastrophe, so
very likely has not occurred (fate-sharing).
(2) A sis-
ter site (e.g., a partner institute), where a similar ar-
gument holds.
for which sometimes lo-
cal systems look up many hostnames corresponding
to end-user systems. For example,
in LBL we ob-
serve queries for numerous names such as 201-11-50-
242.mganm703.dsl.brasiltelecom.net.br.
(4) Directory-
style services offered over DNS, including blocklists,
user-generated content, and catalogs.
(5) Software li-
cense servers. (6) Cloud-based antivirus services.
(3) ISPs,
Malware indicates lookups associated with malware
activity or sites ﬂagged (for example, by McAfee’s
SiteAdvisor service) as malicious. For SIE these also
include lookups such as p9b-8-na-5w-2z3-djmu-...-njx-
2es.info, i.e., 62-character labels consisting of letters or
numbers separated by dashes. We concluded that these
lookups reﬂect malware activity because names follow-
ing the same pattern appeared in a trace generated by a
researcher running bots within a contained environment.
Misconﬁguration generally reﬂect clients making
large volumes of lookups due to conﬁguration prob-
lems that lead to repeated failures. For example, in one
LBL instance we observed more than 60,000 lookups
of 33 different names within a single domain, such as
ldap. tcp.standardname-...isi.fhg.de. Other problems we
observed include lookups apparently based on email ad-
dresses, such as PI:EMAIL; subdo-
mains appearing to be IP addresses; repeated failures
of names with narrow, rigid structures; and domains in
search paths that have lookups encapsulating a client’s
entire stream of queries sent to other domains.
IPv4 PTR and IPv6 PTR reﬂect lookups under the in-
addr.arpa and ip6.arpa zones, respectively. These zones
provide a decentralized mapping from numeric IP ad-
dresses to domain names. As discussed in § 6.2, we do
not ﬂag PTR lookup sufﬁxes that correspond to address
ranges that are local to the organization, or that are re-
served. As noted in § 6.3, for IPv4 PTR lookups we only
ﬂag sufﬁxes corresponding to /16 or /24 netblocks, and
for IPv6, /48 netblocks.
Unknown reﬂects domains for which we could not ar-
rive via manual analysis at a conﬁdent determination re-
garding how to classify the activity. For example, one
striking instance concerns a number of domains (primar-
ily seen in CHINA trafﬁc, but also SIE) that issue thou-
sands of lookups such as:
wojnlbefrhpfumrupmsn.0ule365.net
jnrlciinsszxahnfrvxe.0ule365.net
okgjeqckeqrxdigktkua.0ule365.net
Here, the domain (0ule365.net) is associated with a Chi-
nese gaming site. Other instances following the same
pattern appear to be associated with phishing sites related
to such gaming sites.
Domains ﬂagged in ﬁrst week and in typical week
reﬂect the two extreme behaviors of our Inspected Do-
main List approach (§ 6.6). In the ﬁrst week of operation
our detector reports a peak number of domains; once the
list is primed, it ﬂags domains at a much lower rate. (We
special-case the ﬁgure for CHINA because that entire
dataset spans less than a week.)
Finally, the main conclusion we highlight regarding
the Total row is the low number of events that analysts
would have to inspect. (Even for SIE, the average load
aggregated across the more than 100 participating sites
comes to about 50 detections per day, given I increased
from 4 kB to 10 kB.)
8 Real-Time Operation
As developed so far, our analysis procedure operates in
an ofﬂine fashion, processing full days as a single unit.
While this sufﬁces to enable analysts to detect DNS exﬁl-
tration on a daily basis, real-time detection would enable
immediate identiﬁcation of such activity and thus much
quicker response. In this section we explore the viability
of adapting our scheme for such detection.
Our real-time variant uses gzip and bzip2 as the com-
pression functions. We can adapt both the cached query
ﬁlter and the “uninteresting query” ﬁlter to streaming op-
eration, with the only consideration being that we modify
the cached query ﬁlter to actively ﬂush all cache entries
as their TTLs expire to minimize statekeeping.
Adapting the fast ﬁlter and the compression-based ﬁl-
ters takes more consideration, since they naturally pro-
cess entire sets of activity as a unit. In addition, if we
try to use a compressor in a stream fashion, we must deal
with the compressor’s destructive operation: if we add
28  22nd USENIX Security Symposium 
12
USENIX Association
data to a stream and call flush() to obtain the size of
the compressed result, the flush() operation changes
the compressor’s internal state—adding more data and
calling flush() again can produce a larger output than
simply compressing all of the data at once.
Our approach combines the fast ﬁlter and the com-
pression measurement for each (domain, client) pair as
follows.
Initially, for each pair we only track the un-
compressed input. Upon receiving new input, we check
whether the total message length plus maximum possi-
ble entropy contribution from the timing, and query, and
query type could possibly lead to the pair generating an
alert. If not, we simply append the new information to
the list of previously seen queries.
If the total could cross our threshold, we allocate com-
pressors, feed them all of the recorded input, and in-
voke flush(). If the resulting entropy lies below the
alert threshold, we simply update the uncompressed data
threshold that could possibly generate an alert, discard
the compressed data, and continue. Otherwise, we gen-
erate an alert, create new compressors, feed them all the
previous data, and pass all subsequent data to them as it
arrives. These new compressors allow us to compute a
full 24-hour entropy total for the (domain, client) pair to
aid the analyst. After 24 hours we generate a summary
for each pair and discard the associated state.
For good performance we parallelized this approach,
running the cached-query and uninteresting-query ﬁlters
in a single process that dispatches each (sufﬁx, client)
pair to one of 15 distinct child processes. We veriﬁed
that the implementation produces a consistent analysis
by processing the same day of INDLAB data using both
the original batch implementation (with only gzip and
bzip2) and the real-time variant (70M DNS queries, 36M
non-empty replies). They fully agreed, with the real-
time implementation requiring 28 minutes and 4.5GB
of RAM to process the day of trafﬁc. The execution
totaled 53 CPU-core-minutes on a dual processor Intel
Xeon X5570 system. Given these results, we conclude
that real-time operation is quite viable.
9 Discussion
This paper demonstrates how we can comprehensively
measure the information content of an outbound DNS
query stream. Our lossless compression-based procedure
measures all information that an attacker can effectively
send via names, types, and timing, regardless of the ac-
tual encoding used. This procedure also has only two
tuning parameters, the threshold of detection and the tim-
ing precision.
Some minor DNS features remain that we have not
included in our analysis procedure. We have omitted
these for simplicity, since in their usual (benign) use,
they appear almost always to have a single value for a
given client. These information vectors include request-
ing DNSSEC information (single bit) and the query’s
class (which for modern trafﬁc is almost always type IN,
“Internet”). Similarly, future EDNS0 extensions could
appear that recursive resolvers will forward intact, pro-
viding a new information vector. For all such features,
we can simply employ an additional compressor opti-
mized with the use of a very low-cost special case of
using a single bit to indicate that for a given client, the
feature never changes.
Attackers can tunnel information in DNS replies as
well as in queries, and indeed existing tunnels do so.
Since replies can include domain names (returned for
example in CNAME records) or unstructured byte strings
(e.g., TXT records), replies can potentially convey large
volumes of data.
(We remind the reader that in this
work we have focused on analyzing DNS queries rather
than responses since for the scenarios of particular
interest—exﬁltration or remote interactive access—the
query streams will generally carry the bulk of the data.)
Attackers who can successfully mimic the appear-
ance of benign data-rich query streams (such as block-
list lookup services) can trick analysts into deeming their
surreptitious communication as harmless. Similarly, an
attacker who compromises a previously benign domain
can encode their trafﬁc using the same style of lookups
as the domain originally used. These problems are or-
thogonal to the question of ﬂagging the activity.
Attackers aware of our detection procedure can in ad-
dition design their tunnels to keep the information con-
tent below the 4 kB per day threshold. Given that we ag-
gregate information content metrics per domain, a sim-
ple evasion strategy would be to spread the trafﬁc across
K > 1 domains, and then send < 4 kB per day to each,
but in aggregate communicate K times that volume. A
possible detection approach we envision pursuing con-
sists of analyzing each client’s lookups in their entirety,
rather than on a per-destination-domain basis. Coupled
with an expanded Inspected Domain List (§ 6.6) to re-
move the major contributors to DNS trafﬁc, we would
aim with this approach to compute a bound on the total
information content each client communicates via all of
its external DNS queries.
Finally, attackers could spread their exﬁltration across
multiple compromised clients, so that each client’s query
stream remains below the detection threshold. Our expe-
riences with external vantage points such as UCB indi-
cates that we still might be able to ﬁnd the activity of
groups of clients, since that vantage point already ag-
gregates multiple clients into a single apparent source.
However, a combination of using multiple compromised
clients and K external name servers might prove exceed-
ingly difﬁcult to detect for the sort of thresholds we have
employed in this work.
USENIX Association  
13
22nd USENIX Security Symposium  29
10 Related Work
Four areas of prior work have particular relevance to our
study: covert communication; designing ways of tunnel-
ing communication over DNS trafﬁc; detecting such tun-
neling; and establishing bounds on the volume of covert
communication.
We adopt Moskowitz and Kang’s classiﬁcation of
covert communication channels [19].
In particular, a
storage channel is a covert channel where the output al-
phabet consists of different responses all taking the same
time to be transmitted, and a timing channel is a covert
channel where the output alphabet is made up of differ-
ent time values corresponding to the same response. Ac-
cordingly, we treat covert communication via DNS query
content (name, type and other attributes) as a storage
channel, and covert communication via query timing as
a timing channel.
Conventional DNS tunnels are similar in construction:
they are bi-directional, directly embedding the outbound