title:Evaluating Network Security With Two-Layer Attack Graphs
author:Anmin Xie and
Zhuhua Cai and
Cong Tang and
Jian-bin Hu and
Zhong Chen
2009 Annual Computer Security Applications Conference
Evaluating Network Security With Two-layer Attack
Graphs
†
, Zhuhua Cai
, Cong Tang
∗
, Jianbin Hu
∗‡
, and Zhong Chen
∗
∗
Anming Xie
∗
∗
Key Laboratory of High Conﬁdence Software Technologies, Ministry of Education, China
Institute of Software, School of EECS, Peking University, China
∗
Email: {xieam, tangcong, hjbin, chen}@infosec.pku.edu.cn
†
†
Rice University, USA
Email: PI:EMAIL
Abstract—Attack graphs play important roles in analyzing
network security vulnerabilities, and previous works have pro-
vided meaningful conclusions on the generation and security
measurement of attack graphs. However, it is still hard for us to
understand attack graphs in a large network, and few suggestions
have been proposed to prevent inside malicious attackers from
attacking networks. To address these problems, we propose a
novel approach to generate and describe attack graphs. Firstly,
we construct a two-layer attack graph, where the upper layer
is a hosts access graph and the lower layer is composed of
some host-pair attack graphs. Compared with previous works,
our attack graph has simpler structures, and reaches the best
upper bound of computation cost in O(N 2). Furthermore, we
introduce the adjacency matrix to efﬁciently evaluate network
security, with overall evaluation results presented by gray scale
images vividly. Thirdly, by applying prospective damage and
important weight factors on key hosts with crucial resources,
we can create prioritized lists of potential threatening hosts and
stepping stones, both of which can help network administrators
to harden network security. Analysis on computation cost shows
that the upper bound computation cost of our measurement
methodology is O(N 3), which could also be completed in real
time. Finally, we give some examples to show how to put our
methods in practice.
Index Terms—network security; attack graphs; adjacency
matrix; prioritized list;
I. INTRODUCTION
Attack graphs, which describe attack scenarios, play impor-
tant roles in analyzing network vulnerabilities. Many previous
works on attack graphs [1] [2] have been leveraged to evaluate
network security, and some further models and examples on
network security metric [3][4][5][6][7] have been constructed.
Despite such meaningful results, there are still some problems
that need to be addressed. Firstly, previous works encounter the
scalability problem in the generation of the attack graphs, with
the size of the attack graphs increasing exponentially with that
of the network. Although some researchers try to address this
problem [8][9][10], their result graphs are still too large and
complicated to be analyzed efﬁciently [11]. Secondly, most of
previous attack graphs are designed for a single target, and
can not be used to evaluate overall security of networks with
several targets. While managing a typical network including
multiple critical resources, network administrators would like
‡
Corresponding author.
1063-9527/09 $26.00 © 2009 IEEE
DOI 10.1109/ACSAC.2009.22
127
to evaluate those resources as a whole rather than reporting
each one separately. Thirdly, it is easy to describe outside
attackers’ threat, but few suggestions have been described to
prevent inside malicious attackers from attacking networks.
To address these problems, we propose a new generation
model and a measurement methodology to evaluate network
in order to reduce computation cost, we
security. Firstly,
construct a general
two-layer attack graphs model, where
the lower layer describes all of the detailed attack scenar-
ios between each host-pair, and the upper layer shows the
direct network access relationships between each host-pair
by ignoring such detail information. Compared with previous
works [12][10], our result attack graphs have simpler struc-
tures. Analysis on computation cost shows that our generation
algorithm grows as O(N 2), reaching the best upper bound
reported to date [10], where N represents the number of hosts
in a network.
Then, we propose a measurement methodology to evaluate
network security based on adjacency matrixes. We apply
probability of success to our model, and compute user adja-
cency matrixes and root adjacency matrixes. After introducing
a power iteration function, we draw gray scale images to
show overall network security vividly, which can tell us the
probabilities of obtaining user or root privileges on one host
from another host directly or indirectly. Subsequently, by
applying damage and importance weight factors on those hosts
with crucial resources, we can evaluate network security quan-
titatively and create prioritized lists of the potential threatening
hosts and stepping stones, which help network administrators
on how to harden the network. Moreover, our measurement
methodology has time computation cost O(N 3) in the worst
case, which could also be completed in real time.
At research level, many network security metrics have
been discussed in [13][14]. Qualitative security evaluations are
mostly based on subjective methods, and get boolean results,
such as whether a network or resource is secure. Traditional
quantitative methods [15][16][17] evaluate individual vulner-
abilities, and then composite the results to a global metric
value. However, these methods consider the vulnerabilities’
threats as static values in different networks, ignoring how they
could be exploited by the attackers. In fact, network security
is not only determined by the number of vulnerabilities, but
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:06:04 UTC from IEEE Xplore.  Restrictions apply. 
also with how these vulnerabilities could be exploited. Less
vulnerabilities are not more secure necessarily [3], and a high-
risk vulnerability may means nothing when it could not be
accessed by any other hosts. On the other hand, a single path in
an attack graph represents an attack sequence that the attacker
may use to intrude the networks. So an attack graph describes
all the possible ways to break into a network, and also reveals
actual effect among vulnerabilities. As a result, attack graphs
can give some meaningful and quantitative conclusions in
analyzing network security.
The rest of the paper is organized as follows. Section II
reviews related works on attack graphs. Section III outlines our
new generation model and measurement methodology. Section
IV gives two examples, illustrating how to put our model in
practice. Finally, Section V concludes the paper.
II. RELATED WORK
Various kinds of approaches have been proposed to generate
attack graphs automatically. Early approaches use global net-
work states, which result in the graphs growing exponentially.
Phillips and Swiler [1] propose a model, which uses attack
templates to represent generic steps in known attacks. Ortalo
[18] illustrates how to use privilege graphs to describe the
security. However, the experiments show that the resulting
attack graphs are sometimes too large to be computed, even
with only 13 vulnerabilities. Sheyner et al. [2] use a modiﬁed
model checker, NuSMV, to produce attack graphs. Although
their model could generate all the attack paths, the scalability
problem is more serious. Then, P. Ammann et al. [8] introduce
the monotonicity assumption into generation process, and
reduce the computational cost to polynomial. Jajodia et al.
[9] develop a tool named TVA (the Topological Vulnerability
Analysis tool), whose generation algorithm is based on Am-
mann’s work [8]. As a result, TVA generates a dependencies
graph for vulnerability analysis.
Recent works [19][12][10] ﬁnd the network-centric attack
graphs do not scale well as the number of exploits grows with
the network size, and then they turn to generate attack graphs
based on host. R. Lippmann, K. Ingols et al. [19][20] construct
a security model, named NetSPA (Network Security Planning
Architecture). Their model shows how attackers can progress
by compromising hosts successively, and produce a prioritized
recommendation list to restore defense in depth. P. Ammann
et al. [12] generate host-based access graphs to decrease
algorithmic complexity. But their resulting graphs could only
represent the worst-case exploits between each host pair, and
discard those detailed attack sequences. In order to illustrate all
of the possible worst-case access paths in a network, we need
to complete their algorithm in N iterations, resulting the total
computational cost of host-based access graphs generation
to be O(N 4) actually. R. Hewett and P. Kijsanayothin [10]
also describe an attack graph model based on hosts. With the
monotonicity assumption, they construct a host-centric attack
graph with model checking, and successfully reduce the time
complexity of attack graphs generation to O(N 2). However,
their model focus its attention on generation method, and
lacks meaningful and efﬁcient suggestions to evaluate network
security.
Large scale attack graphs for enterprise networks are dif-
ﬁcult for us to utilize easily. To understand attack graphs
vividly, some works [21][22][23] discuss visualization meth-
ods. Steven Noel and Sushil Jajodia [21] use adjacency ma-
trixes to represent attack graphs, and then use a graphical
technique to analyze network reachability. They self-multiply
the clustered adjacency matrixes to show multiple-step attacks.
S. O’Hare et al. [22] describe a method to show the visualiza-
tion of large scale attack graphs, which are generated by TVA
[9]. Their method is constructed on a graphing tool, yWorks,
which provides customized capabilities for visual analysis of
attack graphs. J. Homer et al. [23] propose two techniques
to improve the visualization of attack graphs, trimming the
useless attack steps, and grouping similar ones. Their results
help us to identify the core security problems quickly.
Network administrators want
to understand the security
levels of their networks quantitatively, and harden them step
by step. Simple evaluation methods and automatic recom-
mendations are always welcomed. Attack graphs have much
information about attack scenarios, and provide practical at-
tack context and relationships among vulnerabilities. Some
researchers are also trying to evaluate network security quanti-
tatively based on attack graphs [1][4][6][3][5][7]. To evaluate
the security level of networks, Phillips and Swiler [1] suggest
assigning probabilities of success or costs on their attack
graphs. Noel et al. [4] represent
their exploit-dependency
graphs into symbolic equations, and compute the least cost
change to be done in order to guarantee the safety of critical
network resources. J. Pamula et al. [6] describe a method
to measure network security. Their method expresses the
targets as the minimal sets of required initial attributes, and
the security metric is the strength of the weakest adversary
who can successfully penetrate the network. Wang et al.
[3] make a further analysis on network metric with attack
graphs, and they propose a simple security metric framework,
which mainly describes the basic principles and the basic
requirements of operators. Then, Wang et al. [5] give a metric
example with probability of success, discussing the processing
methods on cycles in attack graphs. But unfortunately, their
method is suitable for single target, and is hard to describe a
network’s security as a whole. M. Frigault et al. [7] interpret
attack graphs as special Dynamic Bayesian networks, and
their outstanding contribution is considering the effect between
the vulnerabilities in a dynamic environment. For example,
exploiting one vulnerability may change the difﬁculty of
exploiting another vulnerability.
Standing on the shoulders of such meaningful
results
brought by previous works, our works will provide the follow-
ing advantages in following items; analyzing graphs vividly,
processing several targets at the same time, and ﬁnding inside
dangerous hosts.
128
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:06:04 UTC from IEEE Xplore.  Restrictions apply. 
III. MODEL
A. Generation model
Our model also needs explicit monotonicity assumption,
which means the preconditions of an exploit would never be
changed from satisﬁed to unsatisﬁed. Previous works [8][12]
show the reasonableness of this assumption, and illustrate how
some non-monotonic exploits could be modeled as monotonic
ones. Moreover, we also need an assumption of user access
privilege. In general, we think that attackers could exploit all
vulnerabilities they detect in target hosts. Here we ignore the
detailed exploitation, including how they download, install,
and execute exploit scripts [10]. So, user access level is enough
in source hosts when exploiting vulnerabilities of target hosts.
In other words, root access privilege in source hosts is not a
necessary request in our model.
In practice, attackers always compromise stepping stones at
a user or at a root level step by step [19]. Similarly, [12][10]
propose their methods based on host-central model, which
would decrease the computation cost
in generating attack
graphs. So, under the former two assumptions, we also take a
host-compromised model. We then research attack processes
between each pair of hosts in networks, recording access
privileges level obtained at target hosts. When all such host-
pairs attack process have been processed, the result is a simple
structure graph showing all direct access relationships between
each pair of hosts.
Formally, we establish a two-layer model, whose lower layer
describes all of the detailed attack scenarios between each
host-pair, and the upper layer skips such detail information
to show the direct network access relationships between each
host-pair. An apparent advantage of our model is that it does
not need to generate a global complete attack graph, and thus
saves the computation cost.
In the lower layer, we set up many host-pair attack graphs
to describe detailed attack scenarios. A host-pair attack graph
only describes attack sequences from one source host to one
target host directly, showing how attackers obtain user or root
access privileges at the target host. So, there are N ∗ N host-
pair attack graphs at most in lower tier for a network with N
hosts.
In the upper layer, we set up a hosts access graph, which
shows the direct access relationships among hosts. In the
hosts access graph, a node represents a host in networks,
and a directed edge between two nodes represents the access
relationship between the corresponding two hosts. Figure 1
shows a sample of our attack graphs. For simplicity, we draw
the hosts access graph with only one host-pair attack graph.
1) Generation of host-pair attack graphs
In fact, a host-pair attack graph is a traditional attack
graph from one source host to one target host directly.
When generating a host-pair attack graph, we just need
to deal with the target host’s conﬁgurations, vulnerabili-
ties and its network connection with the source host. So
the resulting graph would be generated very quickly, and
always be small in size. Intuitively, we can use existing
generation methods illustrated in [1][2][8].
In a network penetration process, before an attacker
continues to attack a new host from a compromised
host, he or she need to obtain user access privilege or
a higher privilege on the compromised host. like [12],
we also consider a limited, ordered set of access levels
as our targets. In our model, we set user or root access
privileges as our targets in generation of host-pair attack
graphs.
When processing the same host, i.e., attacking the same
host as the source host, we assume that the attackers
have user privilege ﬁrstly, and the corresponding host-
pair attack graph describes how they could obtain an
root privilege.
2) Generation of the hosts access graph
A Hosts access graph shows the attacker’s access priv-
ilege transition between hosts. A node in hosts access
graph represents a host in the network, so the number of
nodes is equal to the number of hosts in the network. A
directed edge in hosts access graph represents the access
relationship from one host to another, so there is only
one directed edge from one node to another at most.
The generation process of hosts access graph is built on
the results of host-pair attack graphs. After completing
generations of all host-pair attack graphs, we get the
privilege transitions from each pair of hosts. And then, if
a host-pair attack graph shows an attacker could obtain
user or root privilege from the source host to the target
host, we add a directed edge to the corresponding nodes
in hosts access graph, and the edge’s label shows the
corresponding privilege which could be obtained.
Figure 1 is the sample graph for a simple network,
which has ﬁve hosts, i.e., H0, H1, H2, H3, and H4,
where host H0 is the attacker’s host, and the others
compose a network he wants to penetrate. The labels of
the edges is a triplet, (HPAGID, USER, ROOT), while
HPAGID is the ID of corresponding host-pair attack
graph, USER and ROOT are the user and root privileges
the attacker would obtain. For example, the label of
edge between host H0 and H1 is (HPAG1, user, root),
which means an attacker could obtain user and root
privilege in H1 when he or she starts from H0, and
the detailed attack sequences could be found in host-
pair attack graph HPAG1. Another edge between host
H3 and H4 is labeled as (HPAG5, user, -), which means
an attacker may follow HPAG5 to attack host H4 from
H3, but he or she could not obtain the root privilege,
but the user privilege. There are two common technical
skills which could be use in practice to optimize the
hosts access graph.
• Provided different host-pairs have the same network
environments, they have the same host-pair attack
graph. For example, host-pair attack graphs be-
tween H2 → H4 and H3 → H4.
129
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:06:04 UTC from IEEE Xplore.  Restrictions apply. 
• We omit the rings around nodes in the hosts access
graph, which means elevating privilege from user to
root in the same host, because our aim is to show
attackers access privilege transitions among hosts.
H2
(
H
P
A
H0
(HPAG1,user,root)
H1
(HPAG2,user,root)
(
H
P
A
)
t
o
o
r
,
r
e
s
u
4
G
A