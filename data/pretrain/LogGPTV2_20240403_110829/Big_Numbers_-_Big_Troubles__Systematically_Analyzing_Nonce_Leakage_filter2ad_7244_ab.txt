been launched from one SGX enclave against another SGX
enclave in order to extract an RSA key from mbedTLS [48].
ECDSA Scalar Multiplication. Brumley et al. [16] targeted
constant-time double-and-add in OpenSSL ECDSA by mea-
suring the total number of iterations. Yarom et al. [60]
exploited conditional code during double-and-add via
Flush+Reload, bypassing the constant-time implementation.
Brumley et al. [15] attacked the windowed Non-Adjacent
Form (wNAF) multiplication of OpenSSL on the secp160
USENIX Association
29th USENIX Security Symposium    1769
curve via Flush+Reload. Similar attacks on the popular
secp256k1 curve leverage better side-channel observations
and better recovery methods [2, 6, 21, 51]. Dall et al. [20]
attacked a ﬁxed-window scatter-gather version of Intel EPID
by exploiting a leak in the number of iterations.
Modular Inversion. García and Brumley [23] attacked the
binary extended Euclidean algorithm (BEEA) of OpenSSL
via Flush+Reload, which was used for the modular inver-
sion of the nonce k during ECDSA signature computations.
Weiser et al. [54] mounted a controlled-channel attack against
RSA key generation in OpenSSL by exploiting conditional
branches in the binary Euclidean algorithm (BEA) used for
checking co-primality of RSA parameters. Concurrently, Al-
daya et al. [1] mounted a Flush+Reload attack on the vulnera-
ble BEA implementation with a success rate of 28%.
Modular Reduction. Ryan [46] discovered an early abort
condition in OpenSSL’s modular reduction and exploited it
with a Flush+Reload attack to recover ECDSA private keys.
3.2 Side-channel Analysis Tools
Due to the signiﬁcant number of side-channel attacks, side-
channel analysis frameworks have been developed. CacheAu-
dit [31] uses symbolic execution to compute upper bounds
on the possible leakage. However, these upper bounds could
become imprecise, and analyzing large code bases such as
OpenSSL with many potential leaks demands more practical
approaches with high precision and low overhead.
Reparaz et al. [45] identify timing leaks with a black-box
approach, which does not capture ﬁne-grained cache attacks.
ctgrind [32] tracks unsafe usage of secrets with the Valgrind
memory error detector on annotated secrets. CacheD [53]
taint-tracks instructions accessing secret data and evaluates
them symbolically to ﬁnd potential data leaks. CacheS [52]
improves CacheD by using abstract interpretation and by ﬁnd-
ing secret-dependent branches. Zankl et al. [63] base their
analysis on concrete instead of symbolic execution, which
gives more precise results and better performance. They use
binary instrumentation to build a histogram of all executed
instructions and correlate it against the Hamming weight of
the private key. Stacco [58] uses binary instrumentation to
record instruction traces rather than histograms only and re-
veals padding oracle vulnerabilities. DATA [55] introduces
the notion of more generic address traces, capturing instruc-
tion and data addresses. By matching address traces, it ﬁnds
potential control-ﬂow and data leaks. DATA also provides
methods for distinguishing secret-dependent leaks from unre-
lated ones due to non-determinism (e.g., blinding), and it sup-
ports dedicated leakage models. MicroWalk [56] also records
all accessed addresses but collapses the execution context,
losing, e.g., call stack information in favor of faster analysis.
None of these approaches was designed or used to detect
addresses leakage of (EC)DSA nonces. In this work, we adapt
the idea of leakage models [55, 63] to detect nonce leakage.
3.3 Research Gap
To sum up, nonce leakage can occur in several (EC)DSA steps
and can be exploited via efﬁcient lattice attacks and more
generic Bleichenbacher attacks. Despite extensive research, a
systematic study of nonce leakage is still missing, and side-
channel tools have not been tailored for nonce leakage.
We bridge this gap and provide the ﬁrst systematic analysis
of nonce leakage in popular crypto libraries. We extended the
automated side-channel analysis tool DATA to also identify
nonce leakage and visualize it in a GUI. By using this tool,
we identify vulnerabilities in several computations involving
the secret nonce, including Equations (3) to (6).
4 Automated Nonce Leakage Detection
Tool support is essential for effective and accurate side-
channel analysis. We ﬁrst discuss the open-source DATA
framework [55], and introduce our threat model. Next, we dis-
cuss our changes to DATA, deﬁne proper leakage models for
nonces and develop an intuitive GUI for visualizing results.
Original DATA Framework. DATA identiﬁes address-based
side-channel vulnerabilities through dynamic analysis in three
phases. In the ﬁrst phase, DATA collects address traces by in-
strumenting the target binary. By comparing those traces,
it identiﬁes address-based differences at byte granularity
that indicate potential leaks. However, analyzing randomized
(blinded) algorithms yields various address differences that
do not leak secret information. Also, many differences stem
from public input and are also uncritical. To ﬁlter these false
positives, DATA employs statistical tests. The second phase
tests if the differences depend on the private key by comparing
traces generated from a ﬁxed key with traces generated from
varying keys. This ﬁxed-vs-random testing requires control
over the secret variable. Since nonces are not controllable
from the outside but generated randomly (internally), this
phase cannot be used for detecting nonce leakage. The third
phase classiﬁes information leakage based on a leakage model
and detects linear and non-linear relations between address
traces and a secret.
Threat Model and Limitations. DATA operates on address
traces at byte granularity. This models a powerful side-
channel attacker probing memory pages [59], cache lines [61],
cache banks [62], or even single byte addresses which are
currently only partially exploitable in speciﬁc settings [17].
However, as with any dynamic analysis, DATA cannot guar-
antee absence of leakage (e.g., it cannot prove code secure).
Nevertheless, by increasing the number of traces and tested
conﬁgurations, coverage increases (cf. [55]).
Leakage models correlate the observed leakage (i.e., the
address traces) with the secret. However, a high correlation
does not necessarily imply actual leakage but could also stem
from public values (e.g., the modulus). This is a fundamental
issue of statistical testing and implies that an analyst should
1770    29th USENIX Security Symposium
USENIX Association
always carefully review potential leakage reported by DATA,
as we do in this work.
Speculative execution attacks are out of scope for this work,
as they leverage data leakage rather than address leakage only.
Detecting Nonce Leakage. To tailor DATA for detecting
nonce leakage, we bypass the second phase and make the third
phase run independently. The third phase correlates leakage
to a secret value via leakage models. However, secret nonces
are generated internally and are not exposed to the outside. To
overcome this limitation, we adapt DATA to recognize nonces
as an additional secret in a backward manner. That is, we
recover the nonce from the private key, the message, and the
signature using Equation (6). Furthermore, we signiﬁcantly
improve the performance of phase three via multiprocessing.
Finally, we introduce appropriate leakage models.
Leakage Models. Deﬁnition of proper leakage models is
essential for ﬁnding nonce leaks. This, however, demands
knowledge of potential leaks to search for. Based on initial
manual inspection of OpenSSL’s source code, we developed
leakage models tailored for detecting nonce leakage. This
was no straightforward process but involved extending the
leakage models the more issues we found. In particular, we
searched for Bignumber issues by testing the bit length of the
nonce k and its variants kinv, k + q and k + 2q. This leakage
model is denoted as num_bits and ﬁnds leakage, e.g., due
to lazy resizing of Bignumbers. Furthermore, we used the
Hamming weight model denoted as hw to search for leaks
in DSA modular exponentiation (square-and-multiply) and
ECDSA scalar multiplication (double-and-add), respectively.
With these models, we were able to greatly reduce the number
of unrelated differences. E.g., the leakage models typically
ﬁlter well above 90% of the differences.
Semi-automated Analysis with GUI. While tool support
does not make thorough side-channel analysis obsolete, we
found it to be essential. Especially constant-time code can be
reviewed much easier with tool assistance. Also, side-channel
patches can be easily tested for their efﬁcacy, preventing rein-
troduction of previously known leaks. In particular, a high
degree of automation and a proper representation of results
is imperative for productive analysis. Due to the nature of
statistical testing used in DATA, an analyst should always
carefully review leakage reports of DATA to rule out potential
false positives and assess actual exploitability.
Since analyzing DATA reports is cumbersome, we devel-
oped a graphical user interface called DATA GUI. DATA GUI
allows to quickly navigate leakage reports together with the
source code and disassembly, and rate or comment potential
leaks. For this to work, we extended DATA to generate an
accompanying ﬁle archive that contains all necessary object
ﬁles, disassemblies and source code ﬁles, alongside the reg-
ular leakage report. This also decouples the test phases of
DATA from GUI-aided analysis, which now may be done on
a completely different computer. Since we need to repeatedly
test different cryptographic libraries under different conﬁgu-
Table 1: Handling of secret nonces is either secure (cid:35) or
vulnerable(cid:32) to side channels, according to our analysis.
Invert Mod. mul.
Generate
.
p
e
r
l
a
m
i
n
i
m
g
n
i
l
p
m
a
s
.
j
e
r
y
e
k
e
t
a
v
i
r
p
+
n
o
i
t
a
c
n
u
r
t
.
Exp. S. mul.
w
o
d
n
i
w
d
e
x
ﬁ
w
o
d
n
i
w
d
e
x
ﬁ
d
n
i
l
b
+
d
a
p
-
k
g
n
i
d
d
a
p
-
k
t
a
m
r
e
F
e
l
t
t
i
L
d
e
t
c
e
t
o
r
p
n
U
d
i
l
c
u
E
.
t
x
E
e
m
i
t
-
t
s
n
o
C
g
n
i
d
n
i
l
B
OpenSSL (cid:32)
LibreSSL (cid:32) (cid:32)
(cid:35)
BoringSSL
(cid:32) (cid:35) (cid:32) (cid:35) (cid:32) (cid:32) (cid:32)
(cid:32)