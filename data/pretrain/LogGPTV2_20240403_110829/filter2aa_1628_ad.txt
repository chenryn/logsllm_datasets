3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
在 equalsImpl() ⽅法⾥，会⾸先判断传⼊的 Object 对象是否为 type 对象的实例，然后调
⽤ type class 的所有⽅法，再依次调⽤。
这样分析下来就清楚了，只要我们在实例化 AnnotationInvocationHandler 时传⼊ Templa
tes.class ，然后令 equals() 的参数为 type 的实现类就可以实现 getOutputProperties
⽅法的触发。
到这⾥我们的问题⼜来了。
接下来的后续链⼜如何寻找呢？
其实在这个类的开始，有⼀段话如下：
InvocationHandler for dynamic proxy implementation of Annotation.
InvocationHandler ⽤于 Annotation 的动态代理实现。
那么根据前⾯动态代理相关的知识我们知道，当为某个类或接⼝指定 InvocationHandler
InvocationHandler
对象时，在调⽤该类或接⼝⽅法时，就会去调⽤指定 handler
handler 的 invoke()
invoke() ⽅法。因此，
当我们使⽤ AnnotationInvocationHandler 创建 proxy object ，那么调⽤的所有⽅法都
会变成对 invoke ⽅法的调⽤。
            }
            if (!memberValueEquals(ourValue, hisValue))
                return false;
        }
        return true;
    }
21
22
23
24
25
26
也就是说，我们需要使⽤ AnnotationInvocationHandler  创建 Proxy Object  并让其代
理 Templates  接⼝，然后再调⽤ proxy object 的 equals ⽅法，将 Templates 当成参数
传⼊就完成了前部分链的组装。
现在，我们的⽬标实际上就变成了如何调⽤ Proxy.equals(EvilTemplates.class) 。
现在让我们总结⼀下能寻找到满⾜条件场景的条件：
要能够调⽤ proxy 的 equals ⽅法（这是我们刚才分析的）
要有反序列化接⼝——要能调⽤ readObject() ⽅法（这样才可以将我们的序列化数据传
进去开始反序列化）
不向下说，我们先来看看 ysoserial 中的反序列化载体有哪些：
AnnotationInvocationHandler  （CC1、CC3、 Groovy1）
PriorityQueue   （CC2、CC4）
BadAttributeValueExpException   （CC5、 MozillaRhino1 ）
HashSet   （CC6）
HashMap  （ Hibernate1 、 Hibernate2、 JSON1 、 Myfaces1 、 Myfaces2 、 ROME ）
org.jboss.interceptor.proxy.InterceptorMethodHandler   （ JBossInterceptors1 、 
JavassistWeld1 ）
org.springframework.core.SerializableTypeWrapper$MethodInvokeTypeProvider   
（ Spring1 、 Spring2 ）
这些反序列化载体中⼤多数是通过对元素进⾏⼀些操作，然后触发了后续链的调⽤。
实际上我猜测 jdk7u21 的作者 frohoff 可能也是通过这样的思考最终找到了 LinkedHashSe
t 类。
LinkedHashSet  位于 java.util  包内，是 HashSet 的⼦类，向其添加到 set 的元素会保
持有序状态，并且在 LinkedHashSet.readObject() 的⽅法中，当各元素被放进 HashMap
时，第⼆个元素会调⽤ equals() 与第⼀个元素进⾏⽐较——这样⼀来恰好就满⾜了我们上
⾯所说的两个条件。
所以在这⾥我们只要反序列化过程中让 Pproxy Object  先添加，然后再添加包含恶意代码
的实例，就会变成， Proxy.equals(EvilTemplates.class) ，它被代理给 AnnotationInv
ocationHandler 类，并且进⼊ equalsImpl() ⽅法，在 getMemberMethods() 遍历 Templa
tesImpl 的⽅法遇到 getOutputProperties 进⾏调⽤时，导致命令执⾏，从⽽完美的实现
了整个攻击链。
到这⾥其实整个漏洞就分析完了，但是在 LinkedHashSet 链中还有⼀个有意思的地⽅。
LinkedHashSet --> HashSet --> HashSet.readObject() --> HashMap.put()
在 put ⽅法⾥，有⼀个条件： if (e.hash == hash && ((k = e.key) == key || key.eq
uals(k)))
如果想要⾛到 key.equals(k) 就必须满⾜ e.hash == hash 并且 k!=e.key 。
对于 k == e.key 很好判断，因为 EvilTemplates newInstance != Proxy Object ，那 e.
hash == hash 应该如何判断呢？
实际上看源代码就知道，要让 127 * ((String)var3.getKey()).hashCode() 的结果等于0 
，也就是 (String)var3.getKey()).hashCode() 的值要为零，这样才可以满⾜那个 if 判
断。
这⾥利⽤的其实就是hash碰撞。
经过碰撞我们得到了碰撞的第⼀个结果 f5a5a608 ，也就是 payload 中的 map.put('f5a5a60
8', templates); 这样写的原因。
整个流程可以总结成如下的思维导图：
// 将指定值与此映射中的指定键相关联
  public V put(K key, V value) {
        if (key == null)
            return putForNullKey(value);
        int hash = hash(key.hashCode());
        int i = indexFor(hash, table.length);
        for (Entry e = table[i]; e != null; e = e.next) {
            Object k;
// 关键点
            if (e.hash == hash && ((k = e.key) == key || key.equals(k))) {
                V oldValue = e.value;
                e.value = value;
                e.recordAccess(this);
                return oldValue;
            }
        }
        modCount++;
        addEntry(hash, key, value, i);
        return null;
    }
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
0x06 漏洞修复
互联⽹上对于 jdk7u21 原⽣gadget链修复⽅式有两种讨论。
第⼀种：
第⼆种：
实际上经过我的测试发现，其实这两种说法都没有问题。
⾸先来看存在漏洞的最后⼀个版本（ 611bcd930ed1 ）：http://hg.openjdk.java.net/jdk7u/jd
k7u/jdk/file/611bcd930ed1/src/share/classes/sun/reflect/annotation/AnnotationInvocationH
andler.java
查看其 children 版本（ 0ca6cbe3f350 ）：http://hg.openjdk.java.net/jdk7u/jdk7u/jdk/file/0
ca6cbe3f350/src/share/classes/sun/reflect/annotation/AnnotationInvocationHandler.java
compare⼀下：
可以发现，在第⼀次的修复中，官⽅采⽤的⽅法是⽹上的第⼆种讨论，即将以前的 return 改
成了抛出异常。
继续查看 0ca6cbe3f350 的 children 版本（ 654a386b6c32 ）：http://hg.openjdk.java.net
/jdk7u/jdk7u/jdk/file/654a386b6c32/src/share/classes/sun/reflect/annotation/AnnotationInv
ocationHandler.java
可以发现在 AnnotationInvocationHandler 构造⽅法的⼀开始的位置，就对于 this.type
进⾏了校验。
// 改之前
        AnnotationType annotationType = null;
        try {
            annotationType = AnnotationType.getInstance(type);
        } catch(IllegalArgumentException e) {
            // Class is no longer an annotation type; all bets are off
           return;
        }
// 改之后
        AnnotationType annotationType = null;
        try {
            annotationType = AnnotationType.getInstance(type);
        } catch(IllegalArgumentException e) {
            // Class is no longer an annotation type; time to punch out
            throw new java.io.InvalidObjectException("Non-annotation type in annotation serial stream");
        }
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
此外，除了在构造⽅法处的验证，在其获取成员⽅法时，也做了验证：
验证内容如下：
// 改之前：
AnnotationInvocationHandler(Class type, Map memberValues) {
        this.type = type;
        this.memberValues = memberValues;
    }
// 改之后：
AnnotationInvocationHandler(Class type, Map memberValues) {
        Class[] superInterfaces = type.getInterfaces();
        if (!type.isAnnotation() ||
            superInterfaces.length != 1 ||
            superInterfaces[0] != java.lang.annotation.Annotation.class)
            throw new AnnotationFormatError("Attempt to create proxy for a non-annotation type.");
        this.type = type;
        this.memberValues = memberValues;
    }
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
private void validateAnnotationMethods(Method[] memberMethods) {
        boolean valid = true;
        for(Method method : memberMethods) {
            if (method.getModifiers() != (Modifier.PUBLIC | Modifier.ABSTRACT) ||
                method.getParameterTypes().length != 0 ||
                method.getExceptionTypes().length != 0) {
                valid = false;
1
2
3
4
5
6
7
validateAnnotationMethods 验证⽅法对注解类型中声明的⽅法进⾏了限制，禁⽌了包含
静态⽅法和声明的⽅法，要求注释类型必须采⽤零个参数并且对返回类型也做了限制。
所以，个⼈总结，⽹上讨论的两种修复⽅式其实都没有问题，只是因为不同的jdk版本导致了
修复⽅式不完全⼀样，也导致 payload 会在不同的地⽅被拦截，从⽽出现不⼀样的错误。
如下图时在 jdk1.8.151 中出现的错误。
                break;
            }
Class returnType = method.getReturnType();
            if (returnType.isArray()) {
                returnType = returnType.getComponentType();
                if (returnType.isArray()) { // Only single dimensional arrays
                    valid = false;
                    break;
                }
            }
            if (!((returnType.isPrimitive() && returnType != void.class) ||
                  returnType == java.lang.String.class ||
                  returnType == java.lang.Class.class ||
                  returnType.isEnum() ||
                  returnType.isAnnotation())) {
                valid = false;
                break;
            }
            String methodName = method.getName();
            if ((methodName.equals("toString") && returnType == java.lang.String.class) ||
                (methodName.equals("hashCode") && returnType == int.class) ||
                (methodName.equals("annotationType") && returnType == java.lang.Class.class)) {
                valid = false;
                break;
            }
        }
        if (valid)
            return;
        else
            throw new AnnotationFormatError("Malformed method on an annotation type");
    }
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
下图时在 jdk7u25 中出现的错误。
0x07 总结
整个jdk7u21反序列化gadget链的构建⾮常经典，链中融合了⼤量的基础知识以及⼩技巧，个
⼈认为是对于理解并学习反序列化漏洞的必学知识点，此⽂是本⼈学习记录，如存在问题欢
迎各位师傅斧正。
0x08 参考
https://lalajun.github.io/2019/11/30/JDK%E5%8F%8D%E5%BA%8F%E5%88%97%E5%
8C%96Gadgets%207u21/
https://p0rz9.github.io/2019/06/08/Ysoserial%E4%B9%8BJDK7u21%E5%88%86%E6%9E
%90/
https://gist.github.com/frohoff/24af7913611f8406eaf3#deserialization-call-tree-approximate
https://b1ngz.github.io/java-deserialization-jdk7u21-gadget-note/
https://mp.weixin.qq.com/s/Ekjbxv5glIXvpsw2Gh98vQ
https://xz.aliyun.com/t/6884#toc-12
https://paper.seebug.org/792/