collusion  of  ejected  members.    For  example,  two 
colluding  members  with  complimentary  identifiers 
cannot be ejected without simultaneously replacing the 
entire table.  It is likely therefore that the table would 
need  to  be  replaced  for  a  large  percentage  of  events 
going through the end-point broker. 
in 
linear 
A  number  of  key  agreement  protocols  (as 
opposed to key distribution approaches outlined above) 
have  been  suggested  in  which  group  keys  are  created 
from contributions of inputs (or key shares) of desired 
members  [ITW82,  SSD88,  BD94,  BW98,  STW00, 
KPT00].  The general approach taken in these protocols 
is  to  extend  the  2-party  Diffie-Helman  exchange 
protocol to N parties. Due to the contributory nature and 
perfect  key  independence,  most  of  these  protocols 
require  exponentiations 
the  number  of 
members [Steiner 2000] for most group updates. Kim et 
al  unify  the  notion  from  key  hierarchies  and  Diffie-
Helman  key  exchange  to  achieve  a  cost  of  O(log(N)) 
exponentiations  for  individual  joins;  however,  the 
number of exponentiations for k joins or leaves will still 
be usually at least linear in k (unless the nodes that are 
leaving happen to be all clustered in the same parts of 
the key tree). Since exponentiation is expensive, these 
protocols  are  primarily  suitable  for  establishing  small 
groups  at  present  and  not  suitable  when  group 
membership can change drastically from event to event. 
We thus exclude them for further consideration in this 
paper,  and  instead  focus  on  approaches  based  on  key 
distribution protocols. 
Since the secure end-point delivery problem is 
only  a  part  of  a  larger  publish-subscribe  system,  we 
briefly  describe  related  publish  subscribe  systems  as 
well. 
Relatively  few  event  distribution  systems 
[W98] allow subscriptions to be expressed as predicates 
over  the  entire  message  content.    A  few  noteworthy 
examples of this emerging category are SIENA [C98], 
READY  [GKP99],  Elvin  [SA97],  JEDI  [CDF],  Yeast 
[KR95], GEM [MS97], and Gryphon [BCM99].  All of 
these systems support rich subscription predicates, and 
thus  face  problems  of  scalability 
their  event 
distribution  algorithms.    None  of  the  above  systems 
offers any security features. 
in 
Other, 
traditionally  subject-based,  publish-
subscribe  systems  are  also  moving  towards  richer 
subscription  languages.    The  Java  Message  Service 
(JMS)  [SUN]  enables  the  use  of  message  selectors, 
which are predicates over a set of message properties.  
The  OMG  Notification  Service  [OMG]  describes 
structured events with a ‚Äúfilterable body‚Äù portion.  The 
TIB/Rendezvous  system  [TIBCO]  available  from  the 
TIBCO  Corporation  has  a  hierarchy  of  subjects  and 
permits  subscription  patterns  over 
resulting 
segmented  subject  field,  also  approximating  some  of 
the richness available with content-based subscription. 
A  new  version  of  the  Elvin  system,  Elvin  4 
[SAB00],  introduces  a  notion  of  keys  for  security 
[ABH00];  the  details  available  are  sketchy  but  it 
appears that the correct use and distribution of keys is 
up  to  the  clients  and  servers,  rather  than  being 
automatically managed by the underlying infrastructure 
based on subscriptions and event contents. 
the 
4  Group Key Caching 
Our  main  goal  is  to  reduce  the  number  of 
encryptions  required  to  ensure  confidentiality  when 
sending  events  from  end-point  brokers  to  subscribers.  
This  reduction  in  number  of  encryptions  in  turn 
increases  event  throughput  necessary  for  large  and 
scalable systems.  Due to the complexity of the problem 
‚Äì  there  are  2N  possible  subgroups  (where  N  is  the 
number of subscribers) and every event can potentially 
go  to  a  different  subgroup  ‚Äì  this  paper  explores  only 
dynamic caching algorithms.   
(described  below)  and 
Our  algorithms  are  compared  to  the  na√Øve 
the  number  of 
solution 
encryptions required by the na√Øve solution is our upper 
bound.  Our algorithms must use less encryptions than 
introducing  other 
the  na√Øve  algorithm  without 
performance  overheads. 
is 
described in figure 3: 
  The  na√Øve  approach 
1.  new event E arrives at a broker and is matched to a set of subscribers  
G = [S1, S2, ‚Ä¶, SL]  (where S1, ‚Ä¶, SL indicate interested and authorized subscribers) 
2.  generate a new key KG 
3.  create a message  [{E}KG, {KG}KS1, {KG}KS2, ‚Ä¶, {KG}KSL] and send it to 
subscribers S1 through SL 
Fig. 3: Na√Øve approach. 
For every event arriving at an end-point broker 
and  matching  to  K  subscribers,  the  na√Øve  approach 
needs K encryptions.  For a broker with N subscribers, 
and a random distribution of groups (sets of subscribers 
interested  in  an  event),  an  average  event  goes  to  N/2 
subscribers.  This means that with 1000 subscribers per 
broker,  a  broker  must  on  average  perform  500 
encryptions per event. 
Our approaches aim to improve on that number.  All of 
our dynamic caching algorithms require the broker and 
subscriber to keep a certain size cache.  In general, the 
cache  stores  keys  for  most  popular  groups.    Cache 
entries have the following format:  
G is a bit vector identifying which subscribers 
belong to the group and KG is the key associated with 
the  group.    KG  is  used  to  encrypt events going to this 
particular  set  of  subscribers.    We  assume  that  all 
subscribers  have  enough  resources 
to  cache  all 
necessary keys.  Subscriber S1 must cache every entry   cached  at  the  broker  such  that  S1  Àõ
  G.    In 
practice,  subscribers  with  limited  resources  may  have 
smaller  caches.    This means that such subscriber may 
not have all the appropriate keys cached at the broker.  
A  secure  protocol  for  key  request/exchange  has  to  be 
developed  to  in  order  for  our  caching  algorithms  to 
support subscribers with limited resources.  Currently, 
we assume every subscriber has all the cache entries { | S Àõ
 G} cached at the broker. 
The  next  few  sections  describe  each  of  our 
algorithms  in  detail.    We  present  theoretical  analysis 
and  simulation 
results  comparing  each  of  our 
approaches  and  the  na√Øve  solution.    We  also  present 
simulation 
for 
comparison.    We  derive  approximate  expressions  for 
the  average  number  of  encryptions  for  two  different 
distributions of groups: 
for  LKH-based 
solution 
results 
Random ‚Äì each arriving event goes to a random subset 
of subscribers.  Every one of the possible 2N groups has 
the same probability of occurrence. 
Popular  Set1  ‚Äì  there  is  a  set  of  groups  that  happen 
more  often  than  others.    An  event  has  a  higher 
probability of matching a group from the popular group 
set S.  The distribution has the following parameters: 
the size of set S (number of groups in the 
popular set) 
probability that an event matches a group 
from S 
|S|: 
p: 
Every  event  matches  a  random  group  from  S 
with probability p.  Every event matches a totally 
random group with probability (p ‚Äì 1). 
1  The  groups  are  based  on  subscriptions  and  therefore  it  is 
virtually impossible that every one of the 2N possible groups 
has  the  same  probability  of  occurrence.    The  popular  set 
distribution is meant to better approximate real distribution. 
To  enable  simpler  derivation,  we  assume  the 
cache  to  be  smart.    This  means  that  it  caches  only 
groups from set S (if cache size is less than or equal to 
|S|).    In  practice,  it  is  possible  to  closely  approximate 
this  behavior  by  using  a  frequency-based  cache.    By 
caching  groups 
this 
approach  would  cache  groups  from  set  S  after  long 
enough  time  (since  groups  from  S  happen  more 
frequently than other random groups). 
that  occur  more  frequently, 
We introduce a measure of average number of 
encryptions per message E.  Due to uniform distribution 
of  subscribers  in  a  group,  the  average  number  of 
subscribers in a group is N/2, so:  
=
naiveE
N
2
(1) 
4.1  Simple Caching 
The simplest solution to reducing the number 
of  encryptions  in  the  system  is  to  use  a plain caching 
scheme. 
  This  approach  assumes  that,  based  on 
customer  subscriptions,  many  events  will  go  to  the 
same  subset  of  subscribers.    Creating  and  caching  a 
separate key for those groups would take advantage of 
repeating  groups  and  it  would  reduce  the  number  of 
encryptions  performed  at  the  broker.    The  major 
parameters affecting the performance of this approach 
are 
the  number  of  clients,  cache  size,  and  the 
distribution  of  groups.    The  basic  algorithm  works  as 
follows: 
1.  new event E arrives at a broker and is matched to a 
2. 
set of subscribers G = [S1 ‚Ä¶ SN] 
search the current cache 
2.1.  if an entry  is found in cache 
send {E}KG to all subscribers in G 
2.2.  if entry  is not found in cache 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
generate a new key KG 
create  the  following  message  and  send 
it to subscribers: 
[{E}KG,  {KG}KS1,  ‚Ä¶,  {KG}KSN  ] 
and send it to the set of subscribers G   
add new entry  to cache 
This approach works well if many events need 
to be delivered to the exact same set of subscribers.  We 
present  approximate  formulas  for  average  numbers  of 
encryptions: 
Random  distribution:  we  know  that  if  there 
is a cache hit (incoming event matches a group stored in 
cache), the event only needs to be encrypted once with 
the stored key.  If there is a cache miss, then the number  

 
 










 
 
 
 
  




  









  
Fig. 4: Build-up cache. 
of  encryptions  is  the  same  as  in  the  na√Øve  case.    The 
probability of a cache hit is: 
=
P
ch
C
N
2
(2a) 
Where C is the cache size and N is the number 
N
N
=
C
of subscribers.  The probability of a cache miss is: 
P
cm
(2b) 
2 -
2
From  equations  2a  and  2b  we  can  get  the 
expression  for  the  average  number  of  encryptions  per 
message: 
C
N
2
We can see that as the number of subscribers 
gets larger, the simple cache will perform only slightly 
better than the na√Øve approach.  For 100 subscribers and 
a  cache  of  size  10,000,  this  approach  averages  50 
encryptions per message (just like the na√Øve solution). 
NC
2
=
+
C 2 is 
found in cache) 
‚Ä¢  send {E}KG to all subscribers in G 
2.2.  if  a  partial  match  is  found  ( 
 G and G1 ‚Äû
where G1 (cid:204)
‚Ä¢  store  in a temporary set S 
‚Ä¢ 
take the difference of Gnew = G ‚Äì G1  
 G) 
3.  Repeat  2  until  Gnew  =  Àò
entries in cache to search 
if a match for G is not found in cache 
4. 
  or  there  are  no  more 
‚Ä¢  save new entry in cache as in step 2.2 of 
the simple algorithm 
Due  to  complexity,  we  cannot  present  a 
derivation  of  a  formula  for  the  average  number  of 
 
 


 

 


 

 











-





!
!
"