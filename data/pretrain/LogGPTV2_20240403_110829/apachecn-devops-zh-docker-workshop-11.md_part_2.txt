    ```
12.  You have now drastically limited what can be done with the running container, but are files that are owned by the host root user still accessible by the `security-app` running container? Mount the file again and see whether you can output the information on the file:
    ```
    docker run -v /tmp/secret.txt:/tmp/secret.txt security-app sh -c 'cat /tmp/secret.txt'
    ```
    您应该在结果中看到`Permission denied`，确保容器不再能够访问`secret.txt`文件:
    ```
    cat: can't open '/tmp/secret.txt': Permission denied
    ```
正如我们在本练习中所演示的，删除运行容器对根用户的访问是减少攻击者获得对运行映像的访问权限的第一步。下一节将快速了解运行容器的权限和功能，以及如何使用`docker run`命令来操作它们。
## 运行时权限和 Linux 功能
当运行您的容器时，Docker 提供了一个覆盖所有安全和用户选项的标志。这是通过使用`––privileged`选项运行您的容器来完成的。虽然您已经看到了当容器作为根用户运行时用户可以实现什么，但是我们是在非特权状态下运行容器的。虽然提供了`––privileged`选项，但应该谨慎使用，如果有人请求在此模式下运行您的容器，我们应该谨慎。有一些特定的情况——例如，如果您需要在树莓 Pi 上运行 Docker 并需要访问底层架构——您可能希望向用户添加功能。
如果您需要为您的容器提供额外的特权来运行特定的命令和函数，Docker 提供了一种更简单的方法，使用`––cap–add`和`––cap–drop`选项。这意味着您可以使用`––cap–add`和`––cap–drop`来限制用户可以实现的功能，而不是通过`––privileged`选项提供完全控制。
运行容器时，`––cap–add`和`––cap–drop`可以同时使用。例如，您可能希望包括`––cap–add=all`和`––cap–drop=chown`。
以下是`––cap` `–add`和`––cap–drop`可用的一些功能的简短列表:
*   `setcap`:修改运行系统的进程能力。
*   `mknod`:使用`mknod`命令在运行的系统上创建特殊文件。
*   `chown`:对文件的 UID 和 GID 值进行文件所有权更改。
*   `kill`:绕过发送信号停止进程的权限。
*   `setgid/setuid`:更改进程的 UID 和 GID 值。
*   `net_bind_service`:将套接字绑定到域端口。
*   `sys_chroot`:更改运行系统上的`root`目录。
*   `setfcap`:设置文件的功能。
*   `sys_module`:在运行的系统上加载和卸载内核模块。
*   `sys_admin`:执行一系列管理操作。
*   `sys_time`:更改并设置系统时钟的时间。
*   `net_admin`:执行一系列与联网相关的管理操作。
*   `sys_boot`:重启系统，在系统上加载新的内核，以便以后执行。
要添加额外的功能，您只需包含功能，如果您在执行`docker run`命令时添加或删除功能，您的命令如下:
```
docker run –-cap-add|--cap-drop  
```
如您所见，语法使用`––cap–add`添加功能，使用`––cap–drop`移除功能。
注意
如果您有兴趣查看运行容器时可以添加和删除的功能的完整列表，请前往[http://man7.org/linux/man-pages/man7/capabilities.7.html](http://man7.org/linux/man-pages/man7/capabilities.7.html)。
我们已经简要介绍了权限和功能的使用。在本章的后面，我们将有机会在测试安全配置文件时使用该功能。不过，目前我们将考虑使用数字签名和 Docker 映像来验证它们的真实性。
# 签署和验证 Docker 映像
正如我们可以确保我们在系统上购买和安装的应用来自可信来源一样，我们也可以对我们使用的 Docker 映像进行同样的操作。运行不受信任的 Docker 映像可能会成为巨大的风险，并可能在我们的系统中造成重大问题。这就是为什么我们应该寻找我们正在使用的映像的具体证据。不受信任的来源可能会向运行的映像添加代码，这可能会使整个网络暴露给攻击者。
幸运的是，Docker 有一种对我们的映像进行数字签名的方法，以确保我们使用的映像来自经过验证的供应商或提供商。这也将确保映像在最初签名后没有被更改或损坏，从而确保一定的真实性。这不应该是我们信任自己形象的唯一方式。正如您将在本章后面看到的，一旦我们有了映像，我们就可以扫描它，以确保避免安装可能有安全问题的映像。
Docker 允许我们签名和验证映像的方式是使用 **Docker 内容信任** ( **DCT** )。DCT 作为 Docker Hub 的一部分提供，允许您对从注册表发送和接收的所有数据使用数字签名。离散余弦变换与映像标签相关联，因此并非所有映像都需要标记，因此，并非所有映像都有与之相关联的离散余弦变换。这将意味着任何想要发布映像的人都可以这样做，但是在需要签名之前能够确保映像正常工作。
离散余弦变换不仅止于 Docker Hub。如果用户在他们的环境中启用了 DCT，他们将只能提取、运行或构建受信任的映像，因为 DCT 确保用户只能看到签名的映像。离散余弦变换信任是通过使用签名密钥来管理的，签名密钥是在您第一次运行离散余弦变换时创建的。创建密钥集时，它由三种不同类型的密钥组成:
*   **离线键**:用于创建标记键。它们应该被小心地存储，并且归创建映像的用户所有。如果这些密钥丢失或泄露，可能会给发布者带来很多问题。
*   **存储库或标记键**:它们驻留在发布者处，并与映像存储库相关联。当您签署您的受信任映像准备好被推送到您的存储库时，将使用它们。
*   **Server managed keys**: These are also associated with the image repository and are stored on the server.
    注意
    请确保您的离线密钥安全，因为如果您丢失了离线密钥，将会导致许多问题，因为 Docker 支持很可能需要参与重置存储库状态。它还需要所有使用过存储库中签名映像的消费者的手动干预。
正如我们在前面几节中看到的，Docker 提供了易于使用的命令行选项来生成、加载和使用签名密钥。如果您启用了 DCT，Docker 将设置您的密钥，并直接用它们为您的映像签名。如果你想控制得更远一点，你可以使用`docker trust key generate`命令用你指定的名称创建你的离线键:
```
docker trust key generate 
```
您的密钥将存储在`.docker/trust`目录中的`home`目录中。如果您有一组脱机密钥，您可以使用`docker trust key load`命令和密钥以及创建它们的名称，如下所示:
```
docker trust key load  –name 
```
一旦你有了你的钥匙，或者你加载了你的原始钥匙，你就可以开始签署你的映像。您需要使用`docker trust sign`命令包括完整的注册表名称和映像标签:
```
docker trust sign /:
```
一旦您对您的映像进行了签名，或者您有一个需要验证是否已签名的映像，您可以使用`docker trust inspect`命令显示签名密钥和颁发者的详细信息:
```
docker trust inspect –pretty /:
```
使用离散余弦变换作为开发过程的一部分可以防止用户使用来自不可信和未知来源的容器映像。我们将使用我们在本章前面几节中开发的安全应用来创建和实现一个 DCT 签名密钥。
## 练习 11.02:签署 Docker 映像并在您的系统上使用 DCT
在下面的练习中，您将了解如何在您的环境中使用 DCT 和使用签名映像实现流程。您将从导出`DOCKER_CONTENT_TRUST`环境变量开始，以在您的系统上启用离散余弦变换。接下来，您将学习如何签署映像并验证已签署的映像:
1.  将`DOCKER_CONTENT_TRUST`环境变量导出到您的系统，以在您的系统上启用 DCT。另外，确保变量设置为`1` :
    ```
    export DOCKER_CONTENT_TRUST=1
    ```
2.  Now that DCT is enabled, you won't be able to pull or work with any Docker images that do not have a signed key associated with them. We can test this by pulling the `security-app` image from our Docker Hub repository:
    ```
    docker pull vincesestodocker/security-app
    ```
    正如您从错误消息中看到的，我们无法提取最新的映像，这是一个好消息，因为我们最初没有使用签名密钥推送它:
    ```
    Using default tag: latest
    Error: remote trust data does not exist for docker.io/vincesestodocker/security-app: notary.docker.io does 
    not have trust data for docker.io/vincesestodocker/security-app
    ```
3.  Push the image to your image repository:
    ```
    docker push vincesestodocker/security-app
    ```
    您应该无法执行此操作，因为没有与此本地映像相关联的签名密钥:
    ```
    The push refers to repository 
    [docker.io/vincesestodocker/security-app]
    No tag specified, skipping trust metadata push
    ```
4.  将新映像标记为`trust1` :
    ```
    docker tag security-app:latest vincesestodocker/security-app:trust1
    ```
    ，准备推送至 Docker Hub
5.  As mentioned earlier, a signing key will be associated automatically with the image when we push it to our repository for the first time. Make sure to tag your image, as this will stop DCT from recognizing that it needs to be signed. Push the image to the repository again:
    ```
    docker push vincesestodocker/security-app:trust1
    ```
    运行上述命令后，将打印以下行:
    ```
    The push refers to repository 
    [docker.io/vincesestodocker/security-app]
    eff6491f0d45: Layer already exists 
    307b7a157b2e: Layer already exists 
    03901b4a2ea8: Layer already exists 
    ver2: digest: sha256:7fab55c47c91d7e56f093314ff463b7f97968e
    e0f80f5ee927430fc39f525f66 size: 949
    Signing and pushing trust metadata
    You are about to create a new root signing key passphrase. 
    This passphrase will be used to protect the most sensitive key 
    in your signing system. Please choose a long, complex passphrase 
    and be careful to keep the password and the key file itself 
    secure and backed up. It is highly recommended that you use a 
    password manager to generate the passphrase and keep it safe. 
    There will be no way to recover this key. You can find the key 
    in your config directory.
    Enter passphrase for new root key with ID 66347fd: 
    Repeat passphrase for new root key with ID 66347fd: 
    Enter passphrase for new repository key with ID cf2042d: 
    Repeat passphrase for new repository key with ID cf2042d: 
    Finished initializing "docker.io/vincesestodocker/security-app"
    Successfully signed docker.io/vincesestodocker/security-app:
    trust1
    ```
    以下输出显示，当映像被推送到注册表时，作为该过程的一部分，会创建一个新的签名密钥，请求用户在该过程中创建新的根密钥和存储库密钥。
6.  It's a lot more secure now. What about running the image on your system, though? With DCT now enabled on our system, will there be any issues running on our container image? Use the `docker run` command to run the `security-app` image on your system:
    ```
    docker run -it vincesestodocker/security-app sh
    ```
    该命令应返回以下输出:
    ```
    docker: No valid trust data for latest.
    See 'docker run --help'.
    ```
    在前面的输出中，我们特意没有使用`trust1`标签。如前几章，Docker 将尝试运行带有`latest`标签的映像。因为它也没有与之关联的签名密钥，所以您无法运行它。
7.  您可以直接从工作系统中对映像进行签名，并且可以使用之前创建的密钥对后续标记的映像进行签名。用`trust2`标签标记您的映像:
    ```
    docker tag vincesestodocker/security-app:trust1 vincesestodocker/security-app:trust2
    ```
8.  Sign the newly tagged image with the signing key created earlier in this exercise. Use the `docker trust sign` command with the image name and tag to sign the image and layers of the image:
    ```
    docker trust sign vincesestodocker/security-app:trust2
    ```
    该命令还会自动将签名的映像推送到我们的 Docker Hub 存储库中:
    ```
    Signing and pushing trust data for local image 
    vincesestodocker/security-app:trust2, may overwrite remote 
    trust data
    The push refers to repository 
    [docker.io/vincesestodocker/security-app]
    015825f3a965: Layer already exists 
    2c32d3f8446b: Layer already exists 
    1bbb374ec935: Layer already exists 
    bcc0069f86e9: Layer already exists 
    e239574b2855: Layer already exists 
    f5e66f43d583: Layer already exists 
    77cae8ab23bf: Layer already exists 
    trust2: digest: sha256:a61f528324d8b63643f94465511132a38ff945083c
    3a2302fa5a9774ea366c49 size: 1779
    Signing and pushing trust metadataEnter passphrase for 
    vincesestodocker key with ID f4b834e: 
    Successfully signed docker.io/vincesestodocker/security-app:
    trust2
    ```
9.  View the signing information using the `docker trust` command with the `inspect` option:
    ```
    docker trust inspect --pretty vincesestodocker/security-app:trust2