to facilitate seamless recovery from backend server failures:
1. It parses all client requests and server responses into
transactions.
2. It assigns tags to these transactions. These tags clas(cid:173)
sify a transaction as deterministic/non-deterministic,
statefullnon-stateful, etc.
3. It determines the mapping of these transactions to the
TCP sequence numbers.
During normal (failure-free) operation, a client request
is spliced at one of the proxies and dispatched to a back(cid:173)
end server. This splice is also replicated at multiple proxies,
so that different client requests can pass through anyone of
these proxies. The failure of a proxy is simply tolerated by
detecting the proxy failure and not sending any subsequent
requests to that proxy. Tolerating proxy failures and the re(cid:173)
lated impact on performance has been discussed in detail in
[11]. The backend server processes the client request (may
involve zero or more aux requests) and sends the response
back. The response may be sent via a proxy (which performs
the splicing), or the backend server may itself perform the re(cid:173)
turn half of the splice (split TCP splice) and send it directly to
the client. In either case, the response is transparently logged
at the front-end logger (which is an IP hop on the packet's
return path). At the end of processing a request, the backend
server asynchronously pushes application session state infor(cid:173)
mation related to that request to an alternate backend server.
Note that the alternate server is not a dedicated backup server
and could be providing service to other clients at the same
time.
If a backend server fails in the middle of a transaction,
that transaction is re-started at an alternate backend server
1-4244-2398-9/08/$20.00 ©2008 IEEE
169
DSN 2008: Marwah et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:29:45 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 2008
where the server application is already running. In addition,
the original TCP connection is un-spliced at the proxies; any
in-flight bytes saved at the front-end logger but not received
by the client are re-transmitted; and finally the original client
connection is re-spliced with the "new" backend server.
For known non-deterministic transactions, a backend
server either saves the response at an alternate server before
responding to the client, or synchronizes session state such
that the alternate backend server can regenerate the same re(cid:173)
sponse to the request. Unforeseen non-deterministic condi(cid:173)
tions are rapidly detected by the system and the client is ap(cid:173)
propriately informed about them.
3.1 Logging, Transactionalization and Tagging
All client bytes destined for a backend server pass through
the front-end logger. This logger is just an additional IP hop.
It does not modify the packets in any way. In addition to sav(cid:173)
ing the client bytes, the logger groups them into transactions
that serves the following purpose:
• Transactionalization is used to give structure to a TCP
byte stream, so that during failure recovery, an appli(cid:173)
cation can be re-started on an alternate (new) backend
server at a transaction boundary.
The front-end logger uses an application-specific config(cid:173)
uration file to determine the start and end of requests and
responses. At present, we assume that each client request/re(cid:173)
sponse pair is a separate transaction. For example, if the ap(cid:173)
plication is an HTTP server, a simple approach is to treat each
client request (e.g., a GET or a POST request) as a sepa(cid:173)
rate transaction. If the server application is a command shell,
each request (commands separated by a newline or a semi(cid:173)
colon) could be considered a separate transaction. For many
applications, grouping of multiple requests/responses into a
transaction is useful. However, that is outside the scope of
this paper.
A mapping between transaction boundaries at the appli-
cation layer and the TCP sequence number-space is required
for seamless migration of the TCP connection to an alter(cid:173)
nate backend server in the event of a backend server failure.
This mapping (as sequence number offsets from the initial
sequence number (ISN) of the connection) is also saved at
the front-end logger.
When a client request is transactionalized, the transaction
is also tagged with attributes. These attributes are useful dur(cid:173)
ing recovery in determining quickly how a particular transac(cid:173)
tion is to be handled at the alternate backend server, e.g., does
it have to be replayed? Some common tags are described be(cid:173)
low:
• Deterministic/non-deterministic: This tag indicates
whether the transaction is deterministic or not. A deter(cid:173)
ministic transaction is one which would produce exactly
the same response and cause exactly the same side ef(cid:173)
fects when it is replayed on an alternate backend server.
In other words, given the current state of an application
and an input, only one output can be produced. An ex(cid:173)
ample of a deterministic transaction is the UNIX com(cid:173)
mand 1s. If the sequence of commands that are run on
a backend server are replayed on an alternate backend
server, 1s would produce the same result. An example
of a non-deterministic command is da t e.
• Read-only/update: This tag indicates whether a trans(cid:173)
action changes the state of a backend server application
in any way. Read requests usually do not have any side(cid:173)
effects. On the other hand, write requests change the
state of the server and hence have side-effects. The Unix
command date, for example, is read-only; however,
setenv DISPLAY remotemachine:O results ~
an update of the state. On failover, a read-only trans(cid:173)
action need not be replayed at an alternate backend if
the response has already been generated and has either
reached the client or is saved at the front-end logger.
However, this is not true for update transactions. Con(cid:173)
sider, for example, a deterministic update transaction. If
a backend server crashes after this transaction has been
processed (reply sent to client) but before the corre(cid:173)
sponding state information is sent to an alternate server,
then this transaction must be replayed at the alternate
server.
• Idempotent/non-idempotent: An idempotent transac(cid:173)
tion is one that produces the same output and the same
side effects whether it is processed once or multiple
times. For instance, setting an environment variable
(setenv EDITOR emacs) is an idempotent transac(cid:173)
tion. Non-idempotent transactions, on the other hand,
must be executed only once, e.g., appending a value
to an existing environment variable (setenv PATH
${PATH} : /usr / sbin). Care must be taken that non(cid:173)
idempotent transactions are not replayed on the alter(cid:173)
nate backend server if the corresponding state informa(cid:173)
tion has already been incorporated in the application
session state.
Assignment of tags is application specific. For each ap(cid:173)
plication the likely client requests and the corresponding tags
need to be specified in a configuration file. For each incom(cid:173)
ing request, the logger tries to match it with an internal table
(constructed from the user specification). If a match is found,
the corresponding information is used to tag the request. Oth(cid:173)
erwise, a default, conservative tag assignment is made to that
request.
Large files transferred by a backend server to a client are
not saved at a logger.
Instead, file location information is
saved. An alternate design could be to save a cryptographic
hash (e.g., MD5) of the file and then use a mapping service
to locate the file if needed.
3.2 Synchronization and Re-splicing
The front-end logger that saves requests and responses for
a backend server also monitors that backend server for fail(cid:173)
ures. Failure recovery consists of synchronizing the client
TCP connection state, re-splicing the TCP connection, and
synchronizing the application state on the alternate backend
server. Synchronization of the client TCP connection state
and application state is done using two key pieces of infor(cid:173)
mation: (1) the last client ack saved at the logger; and (2) the
last server byte saved at the logger.
The last client ack indicates the next server byte that the
it is guaranteed that all prior bytes have
client expects, Le.
been successfully received by the client. However, server
bytes between the last client ack and the last server byte
1-4244-2398-9/08/$20.00 ©2008 IEEE
170
DSN 2008: Marwah et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:29:45 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems &Networks: Anchorage, Alaska, June 24-27 2008
logged at the logger may not have been received at the client.
So, the logger starts re-sending bytes starting from the last
client ack. While it is possible that there are in-flight server
bytes or acks, re-sending these bytes is harmless.
Synchronization of the application at the alternate back(cid:173)
end server involves making sure that all the application ses(cid:173)
sion state information sent by the original backend server be(cid:173)
fore failing has been applied at the alternate backend server.
If the alternate backend server has lagged behind, some trans(cid:173)
actions may need to be replayed during recovery.
In fact,
only update transactions that change application state are re(cid:173)
played.
Once this synchronization is complete, the original client-
proxy connection is respliced to the proxy-alternate backend
server connection.
An issue during recovery is that if some transactions are
re-run, they may generate auxiliary requests that may not be
idempotent. Since, these requests have already run at the aux
servers before the backend server failed, it is important to
ensure that they are not re-sent to the aux servers during re(cid:173)
covery. To address this, a second logger (aux logger) saves
all auxiliary requests and corresponding responses. If a trans(cid:173)
action is replayed at the alternate backend server during re(cid:173)
covery and generates an auxiliary request, it is matched with
the stored requests at the logger. The corresponding logged
response is then returned without the participation of the cor(cid:173)
responding auxiliary server.
3.3 Application Support
Our architecture requires some (minimal) support from
the application to recover from server failures. In particular,
the backend server application needs to transfer per trans(cid:173)
action state information to an alternate backend server run(cid:173)
ning that application. Also, this state information must have
the granularity of a transaction and be applied to an already
running application on the alternate backend server. Further(cid:173)
more, for efficiency considerations, it is preferable that the
application maintains only session state and that long-term
persistent state is saved in auxiliary databases. Fortunately,
this is also the usual industry practice.
Another requirement for the application is the inclusion of
the transaction ID of a request within any auxiliary requests
generated. Such an ID allows auxiliary requests to be cor(cid:173)
related to the corresponding transactions. For example, for
auxiliary requests to an IMAP server, a transaction ID can be
part of the tag used with each IMAP command.
3.4 Non-determinism
Non-determinism implies that a request may produce a
different response each time it is processed. In the context
of synchronizing TCP connection state, non-determinism is
a problem since the backend server may crash when only a
partial response has been sent to the client. Unless the alter(cid:173)
nate backend server can regenerate an identical response, it
is not possible to provide the rest of the response to the client
and preserve the TCP connection state during recovery.
In our architecture, we address the issue of non(cid:173)
deterministic transactions in two ways. First, if it is known in
advance that a particular transaction is non-deterministic (via
non-deterministic tag), the application makes sure that before
it starts sending a response, one of the following is true: (1)
the entire response has been saved at the alternate backend
server, or (2) enough state information has been copied to
the alternate backend server so that it can produce a deter(cid:173)
ministic response to that request.
However, it may be hard to identify all instances of non-
determinism in an application in advance. This is because
there might be some error conditions, or some uncommon
user actions - not previously tested - that may produce non(cid:173)
deterministic responses. An important feature of our archi(cid:173)
tecture is that it can detect such conditions arising from un(cid:173)
foreseen sources of non determinism. This is done by com(cid:173)
paring the response bytes produced by the alternate backend
server with the partial response - saved at the logger - pro(cid:173)
duced by the original backend server before failing. If these
do not match, the transaction is clearly non-deterministic.
When such a situation is detected, the proxy sends a reset
on the client connection, terminating it immediately. This
would cause the client to reconnect and re-issue the request.
Note that although not ideal, this approach is still better than
a server simply failing, since the client is immediately noti(cid:173)
fied that it needs to re-establish its TCP connection. Without
this notification, it can take tens of seconds or more for a
client to detect a server crash failure.
3.5 Adaptive Failure Detection
A backend server failure detector resides on the logger
that is responsible for recording requests to and responses
from that server. A two-pronged, adaptive server failure de(cid:173)
tection mechanism, with different approaches for times of ac(cid:173)
tivity and inactivity, is used. When a server is processing re(cid:173)
quests, it is declared failed if it does not respond to a request
within a timeout. This timeout is dynamically computed by
the detector as it observes requests and responses. For each
kind of request, the detector maintains two timeouts based on
the moving average of the following two measurements: (1)
the time difference between receiving the entire request and
the start of the response; (2) the time difference between the
start and end of the response. Using two timeouts allows fail(cid:173)
ure detection to be more fine grained than using one timeout
value based on receipt of request to the end of response. Note
that no heartbeats are used in this mechanism and failure de(cid:173)
tection is fine grained. We feel this approach has three main
advantages over using a heartbeat mechanism: (1) there is no
network or processing overhead of heartbeats; (2) the mech(cid:173)
anism is adaptive and depends on the average responsiveness
of the system rather than a fixed heartbeat interval value; and
(3) the system designer does not have to pick a heartbeat in(cid:173)
terval value.
A low frequency heartbeat is used during idle periods.
This is useful since the system is likely to be repaired before
the next request comes in. Furthermore, the low frequency
(once every few seconds) ensures that it does not put any de(cid:173)
tectable load on the system.
4 Detailed Design
4.1 Normal Operation
Steps required for handling a client request are as shown
in Figure 2. Here it is assumed that the client has already
established a TCP connection spliced by a proxy to a back(cid:173)
end server. The proxy has also replicated the splicing state
1-4244-2398-9/08/$20.00 ©2008 IEEE
171
DSN 2008: Marwah et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:29:45 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems &Networks: Anchorage, Alaska, June 24-27 2008
information to other proxies so that any proxy can forward
subsequent client requests [11].
o
Auxilary Server
Alternate Back-end Server
p Number of response bytes (zero or more) of transaction
TL + 1 saved at the logger.
Ts Last transaction with state information applied to the ap(cid:173)
plication at the alternate backend server. Since the alter(cid:173)
nate backend server waits for the logger to completely
receive a response before applying the corresponding
state information, Ts :::; TL.
TA Last transaction whose state information is available at
the alternate backend server. Clearly, TA ~ Ts. State
associated with transactions (Ts, TA] is available at the
alternate backend server, but has not yet been applied to
the application.
TR First transaction that is run on the alternate backend
server during recovery.
Ts p First transaction that is sent over the re-spliced client
Clearly,
and alternate backend server connection.
Tsp 2: TR.
Figure 2: Sequence of steps required in handling a client request.
AckcL Last client ack saved at the logger.
1. A client request is received by the backend server.