contexts are the IDs and they are unique.
• “eq-range” speciﬁes that the queries corresponding to this
query pattern ﬁlter documents by range on the tuple (r f1, r f2,
. . .). A set of ﬁlter possibilities ﬁt in this pattern. For example,
if the IQP for “patient_measurements” contains “eq-range:
(patientID, timestamp)”, a query could have an equality match
by patientID and a range match on timestamp, or there can be
equality on both ﬁelds. Our current implementation supports
only one range ﬁlter, namely the last declared ﬁeld in the
tuple (r f1, r f2, . . .), with the rest of the ﬁelds being used as
equality ﬁlters. However, Verena can be extended to support
more complex ﬁlters (e.g., multidimensional range queries
and text search queries) by simply using ADSes that support
such operations [37].
• “ops” indicates the projections and aggregations performed
and on what ﬁelds. The operations supported are listed in
Table I.
Verena will protect the integrity of all ﬁelds speciﬁed in an
IQP, namely the ﬁelds projected, aggregated, in eq-range, or in
trustContext – these ﬁelds can be modiﬁed only by members
of the corresponding trust context. We call these ﬁelds the
protected ﬁelds of an IQP.
Let us walk through an example. In the medical application,
a physician can fetch the recorded heart rates of a patient over
a period of time to visualize how the heart rate ﬂuctuates in
that time period. Additionally, a physician can view the average
heart rate over a time period.
The ﬁrst read operation is a projection on the heart_rate
ﬁeld, and the second is an average computation on the same
ﬁeld. The trust context in both operations is designated by the
patientID ﬁeld; only the patient’s implant is allowed to provide
these measurements. In the medical application, this entity is
represented as a user with patientID. Moreover, the operations
use the timestamp ﬁeld as a range selector. Consequently, to
integrity protect these operations we can deﬁne the following
IQP:
iqp_measurements = patient_measurements.IQP ({
trustContext: patientID,
eq-range: timestamp,
ops: {project: [recordID, heart_rate], avg: [heart_rate]}})
D. Queries API
Once the developer speciﬁes the necessary IQPs, which
reﬂect the application’s integrity speciﬁcation, he can express
and issue queries in the same way as in a system without Verena,
by invoking “ﬁnd” and “aggregate” on the corresponding IQP
handlers This minimizes the amount of effort needed by the
developer to enable Verena in existing web applications.
An example query for listing the average heart rate of
patientID 121 over a period of one month is:
iqp_measurements.ﬁnd ({
patientID: 121,
timestamp: {“$gte": new Date(“2016-03-01"),
“$lte": new Date(“2016-04-01")}})
A read query must be a subset of the queries described by
the corresponding IQP. Moreover, if the trustContext of this
IQP is a ﬁeld, the query must specify its concrete value (for
example, “patientID: 121”).
The developer does not have to specify IQPs for write queries,
and simply invokes “insert”, “remove”, or “update” operations
on the desired collection. The access control for write queries
is derived from read queries. For write queries, Verena checks
against all IQPs declared whether the current user is allowed
to perform them. We elaborate on these checks in §V-C.
Supported Functionality. The read queries supported by
Verena are those that can be expressed using an IQP. The
write queries supported are in Table II: insert, delete, update.
Verena currently supports update and delete queries only by
id, but extending to eq-range style ﬁlters is straightforward.
E. Querying Across Trust Contexts
So far, each read query speciﬁes one trust context in which
it runs. We now discuss how Verena supports queries spanning
multiple trust contexts.
In the medical application example, recall that patient proﬁles
are categorized in groups according to their disease and
physicians may only modify proﬁles within certain groups. The
following IQP enables fetching the complete list of patients
within a group:
iqp = patients.IQP ({trustContext: groupID,
ops: {project:[all]}})
and the following IQP enables fetching all groupIDs from
“patient_groups” using the “admins” trust context:
iqp_groups = patient_groups.IQP ({ trustContext: “admins”,
ops: {project: [all]}})
In our running example, a physician may also view the list
of all patient proﬁles from all patient groups. Clearly, this
query spans multiple trust contexts. In a non-Verena system,
900900
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:13 UTC from IEEE Xplore.  Restrictions apply. 
the developer can simply run a read query fetching all entries
in “patients”. However, if the server is compromised, the list of
patients returned can be incomplete. To ensure completeness
using Verena, the developer would need to do more work. He
should fetch all the groups using “iqp_groups”, loop over the
groups returned, fetch all patients in each group using “iqp”
and merge the results. This results in a complete set of patients,
but requires more work from the developer.
To make the work of the developer easier, we extend slightly
Verena’s API with a mechanism called completeness chain; this
mechanism essentially does the above work automatically for
the developer. The completeness chain retrieves the involved
trust contexts of a query by querying a different IQP and
trust context, called the root trust context, which endorses the
relevant trust contexts. In other words, the root trust context
protects the list of trust context names of the query we want
to execute, and thus we leverage it to establish completeness
for that query. The developer simply runs the query:
iqp.ﬁnd ({ group: iqp_groups.ﬁnd({},{groupID:1}) },
{ . . . })
The inner query projects the “groupID” ﬁelds from all doc-
uments in “patient_groups”. Fig. 3 and §V-B describe how
Verena implements the completeness chain mechanism.
Alternative. It is worth mentioning an interesting alternative
to completeness chains, which demonstrates the expressivity
of Verena’s trust contexts. The developer can specify a new
trust context “all_physicians”, which contains the set of all
physicians, and an IQP “iqp_all_patients” that fetches all patient
proﬁles (across all patient groups) in the trust context of
“all_physicians”. Then, the developer can directly fetch all
patient proﬁles by running “ﬁnd” on “iqp_all_patients”. In
this way, any non-physician cannot affect the completeness
or integrity of the patient list. However, a physician who is
not authorized to modify a certain group can now affect the
completeness and integrity of patient proﬁles in that group. As
a result, the integrity guarantee provided by the above IQPs is
weaker than with completeness chains, and not sufﬁcient for
this application.
However, for applications with different access control
requirements or different threat models, a developer might ﬁnd
this alternative sufﬁcient. In this case, veriﬁcation of aggregates
is faster than with the completeness chain. Due to the layout
of Verena’s data structures described in §V, the Verena client
checks one aggregate value overall instead of one aggregate
value per trust context with the completeness chain.
F. Deriving Trust Contexts From User Input
In some applications, the trust context for running certain
queries is derived from user input. This requires special care
from the developer and the user. Such a situation arises in
applications where anyone can create units of data and give
write access to others. For example, in a chat application,
anyone can create a room and invite certain users to those
rooms. Only the invited users may modify the contents of a chat
room. This situation does not occur in the medical application
because access control is rooted in a ﬁxed entity, namely the
“admins” trust context, which endorses and manages access to
the trust contexts of patient groups.
In the chat application, a natural trust context for the
messages in each room is the room name. A user, say Alice,
reads the list of room names and clicks on the room she wants
to visit. She expects the messages in the room to come from
authorized users, and makes decisions based on them. However,
an attacker can also create a room with the same name or a
syntactically similar name (“business” vs. “busines”) tricking
Alice into clicking on the attacker’s room. The contents of the
attacker’s room are certiﬁed by the attacker, so Verena does
not trigger an integrity violation.
Hence, in such cases, the developer must display unambigu-
ous names to users. In order to do this, the developer can
choose human-friendly names for trust contexts (e.g., the name
of a room, as deﬁned by a user) and then, display directly the
trust context names in a prominent way to the user. Our hash
server prevents two trust contexts from having the same name,
and one can also expand this protection to prevent two trust
contexts from having syntactically similar names. Moreover, the
developer can display the owner of a trust context. Depending
on the use case, the developer can display both the trust context
name and its owner, or either of the two, in order to help the
user verify the authenticity of the displayed data. The user
needs to perform this check, for example in order to verify he
is entering the intended room. This requirement is similar to
phishing prevention where the user needs to check the URL
he is visiting.
G. Integrity Guarantees
The guarantee Verena gives to a developer, given the
assumptions in the threat model (§II), is, informally:
If Verena does not detect a corruption,
the result
of a read query (ﬁnd or aggregate) that corresponds
to an IQP with a trust context tc reﬂects a correct
computation on the complete and up-to-date data
(according to linearizability semantics), as long as all
clients running on behalf of the members of tc (or all
involved trust contexts in the case of a completeness
chain) follow Verena’s protocol.
In particular, the query result could not have been changed
by a malicious server or any user outside of the relevant
trust contexts. Moreover, a data item is “up-to-date”, or fresh,
if it reﬂects the contents of the latest committed write as
in linearizability semantics. In particular, the server cannot
perform fork attacks [32, 34] because every client can always
get the latest committed write of any protected data.
The resulting guarantee to the user is:
The webpage consists of: (1) the authentic developer’s
code; (2) correct and “up-to-date” information (data
or query computation results) generated only by
901901
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:13 UTC from IEEE Xplore.  Restrictions apply. 
Hash 
Server
A
A
B
B
B
C
C
hashA
hashA
hashA
hashB
hashB
h hB
hashC
hashC
h hC
Main Server
trust context A
trust context A
trust context B
trust context B
Example:
Example:
range field
timestamp
aggregations:
sum  count  avg
data fields
avg(heart_rate)
recordID,
heart_rate
trust context C
trust context C

Fig. 2: Verena maintains a forest of ADS trees, in order to protect the data associated with different trust contexts.
Write Queries
insert(d)
update(id, d)
remove(id)
Explanation
inserts a document d
updates the document with identiﬁer id with data
from the document d
deletes the document with identiﬁer id
TABLE II: Write operations in Verena.
authorized users.
Verena does not guarantee availability of the server.
V. INTEGRITY PROTECTION MECHANISM
We now describe how Verena enforces the integrity policy
the developer speciﬁed.
A. ADS Forest
Verena leverages authenticated data structures (ADS) [20,
23, 30, 31, 33, 37, 49] as its underlying integrity protection
building block. The ADS [31] we use consists of a search
tree sorted by the eq-range ﬁeld(s) and combined with Merkle
hashing. We refer the reader to appendix A, where we provide
needed background on ADSes.
Based on the IQPs declared by the developer and the write
operations that are issued throughout the application’s lifetime,
Verena creates and maintains a forest of ADSes, as illustrated
in Fig. 2. For each IQP, Verena creates one ADS per trust
context that is used in queries of that IQP.
For example, consider the IQP we discussed before:
iqp_measurements = patient_measurements.IQP ({
trustContext: patientID,
eq-range: timestamp,
ops: {project: [recordID, heart_rate], avg: [heart_rate]}})
Based on this IQP, every patientID constitutes a trust context,
and Verena will maintain one different ADS for every value
of patientID, in order to protect the data and aggregation
operations speciﬁed by the IQP (in this case, the projection
of recordID and heart_rate, and the average calculation on
heart_rate). Appendix A explains how the ADS organizes and
stores the protected data.
As shown in Fig. 2, the forest of trees is stored at the main
server. The hash sever stores only the Merkle hash roots (one
entry per tree, containing the root hash and additional necessary
information, as described in §VI).
B. Completeness Chain Implementation
ADS trees can be logically nested within other trees as shown
in Fig. 3. The completeness chain mechanism logically nests
ADSes within another ADS. In this example, a trusted entity,
such as the administration of the medical application, uses a
static, i.e., predeﬁned, trust context, named “admins”, owned
by the system administrator, to manage the patient groups. One
of the protected ﬁelds is used to store the trust context name of
each group. This ﬁeld can be used as a reference to identify all
the correct trust contexts that correspond to the patient groups,
which in turn protect the patient proﬁle data. Thus, we can use
the “admins” trust context as a root trust context to establish
completeness, for the query that reads patient proﬁle data from
all (unspeciﬁed) groups.
C. IQP Analyzer
The IQP analyzer checks whether a user can run a certain
query based on the IQPs deﬁned and the trust contexts to which