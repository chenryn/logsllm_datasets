 则使用ia的默认链接脚本，
(MAXPAGESIZE)
(CONSTANT
"elf32-i386")
,-2,combreloc: combine and sort reloc sections */
·
·
: ONLY_IF_RO { KEEP （*(.eh_frame))
:{ *(.interp)
{ *(.got.plt）}
{ KEEP（*(·jcr)）}
{*(.plt）}
{ *(.rel.plt） }
例如_
*（.got）}
*(.dynamic）}
(.gnu.version) }
( .dynsym)
.dynstr)
·gnu.hash)
*(.note.gnu.build-id) }
bss_start、
'elf32-i386",
，默认链接脚本可以用id--verbose命令查看（由于比
 DATA_SEGMENT_ALIGN (CONSTANT
d)
edata、
_end等。
 We want to adjust up
= 0x08048000 +
。如果用1a做链接时没有用-r选
*/
?
一
·
328
---
## Page 329
书不做深入讨论。
Data Segment的后面还有其它一些Segment，主要是调试信息。关于链接脚本就介绍这么多，本
右边表示所有目标文件的.plt段,
的描述格式都是“段名：{组成}”
Segment的起始地址,
PROVIDE（
其它函数做入口点的。
ENTRY(_start)说明_start是整个程序的入口点，因此_start是入口点并不是规定死的，是可以改用
第 20 章 链接详解
/* Stabs
_executable_start = 0x08048000);
debugging sections.
这个Segment包含后面列出的那些段，
意思是最终生成的文件的.pit段由各目标文件的.plt段组成。
 debugging sections are relative to the
全国嵌入式人才培训基地
 ((CONSTANTN(MAXPAGESIZE)E
起始页
*
要做一
= 0x08048000 + SIZEOF_HEADERS;是TeXt
一系列的对齐操作，
左边表示最终生成的文件的.plt段，
·plt、
.text、
1T
、·rodata等等。每个段
2.定义和声明
329
下一页
---
## Page 330
现在我们在main.c中声明这几个函数的原型:
现在你应该比学第2节“自定义函数"的时候更容易理解这条规则了。
这个问题我们在第2节“自定义函数"讨论过，
在上一节我们把两个程序文件放在一起编译链接，
2.1.extern和static关键字 请点评
2.定义和声明 请点评
果
往往会出错，
在stack.c里，
往不知道去哪里找函数定义，
不出来返回值应该是什么类型，
如printf）
形参类型可能跟函数调用代码传的实参类型并不一致，
令。为什么隐式声明靠不住呢？因为隐式声明是从函数调用代码推导而来的，
代码时需要
型
到：
王
上一页
，那编译器为什么不自己去找函数定义,
只好根据函数调用代码做隐式声明，把这三个函数声明为：
int main(void)
extern
extern void push(char);
#include 
int
5
int
main.c:12:
main.c:8:
main.c: In function.
$ gcc -c main.c -Wall
extern
........
t
，编译器又怎么会知道呢？所以编译器只能通过隐式声明来猜测函数原型，这种猜测
 那么从函数调用代码也看不出来这个函数带有可变参数，
pop(void)
 push(char)
...........
但在比较简单的情况下还算可用，
int is_empty(void);
 char
empty(void);
 warning:
warning:
 warning:
 pop(void);
像上面的例子，
 implicit declaration of function 
所以隐式声明只能规定返回值都是int型的。既然隐式声明靠不
 implicit declaration 
'main':
全国嵌入式人才培训基地
第 20 章 链接详解
2.定义和声明
而非要让我们在调用之前写函数原型呢？因为编译器往
，我让编译器编译main.c，
 由于编译器在处理函数调用代码时没有找到函数原
比如上-
一点小问题，我们用-wal1选项编译main.c可以看
，main.c用到的函
如果函数定义带有可变参数（例
一节的例子这么编译过去了也能得到正确结
 of function 
 function 
。为什么编译器在处理函数调用
，而这几个函数的定义却
另外，
‘push'
'pop'
从函数调用代码也看
而事实上函数定义的
empty'
---
## Page 331
用extern声明它：
用stack.c和main.c的例子，如果我想在main.c中直接访问stack.c中定义的变量top，则可以
以上讲了用static和extern修饰函数声明的情况。现在来看用它们修饰变量声明的情况。仍然
Linkage的foo函数，
是一个LOCAL的符号，
示同一个函数,
虽然在foo.c中定义了函数foo，,
编译链接在一起会出错：
序文件：
如果用static关键字修饰一个函数声明，则表示该标识符具有Intermal Linkage，例如有以下两个程
只好报错。
有External Linkage。
的声明同时也是定义)
Linkage的定义在上一章讲过,
个定义都没有，
int main(void)
void push(char);
#include 
collect2: ld returned 1 exit status
int
char
static
/* foo.c */
凡是被多次声明的变量或函数，
main.c
 is
 void
 链接器就无法完成链接。
return 0;
push(
链接器却找不到它的定义在哪儿，
，不参与链接过程，
*/
 foo(void）{}
那么这些声明指的是同一个函数，链接之后是同一个GLOBAL符号,
{ foo(); return O; }
In function 
但现在应该更容易理解了，
但这个函数只具有Internal Linkage，
必须有且只有一个声明是定义，
main':
只有在foo.c中多次声明才表
一个External 
如果有多个定义，或者
，也就无法做符号解析
代表同
---
## Page 332
问top和stack呢？答案就是用static关键字把它们声明为Internal Linkage的：
看，top这个变量是不希望被外界访问到的，
写extern意思就完全变了，如果上面的例子不写extern就表示在main函数中定义一
注意，
变量top具有External Linkage，
变量声明和函数声明有一点不同，
char pop(void)
void push(char c)
static int top =
static char stack[512];
*
int main(void)
 stack.c */
 return stack[top--];
 stack[++top] = c;
while(!is_empty())
extern int top;
return 0;
putchar(
while(!is_empty())
printf("%d\n", top);
return 0;
void push(char);
printf("%d\n"
push(
 使所声明的标识符具有块作用域：
ish(
.pop(void);
putchar(pop());
putchar(pop());
in
它的存储空间是在stack.c中分配的，
：
 top);
，top);
 因为它不分配存储空间。以上函数和变量声明也可以写
函数声明的extern可写可不写，
 变量top和stack都属于这个模块的内部状态，
 这样才能保证堆栈的LIFO特性，
，但是从实现stack.c这个模块的角度来
而main.c中的声明不能加lnitializer，
，所以main.c中的变量声
而变量声明如果不
一个局部变
如果外界可
，外界应
如
---
## Page 333
头文件目录。
首先说为什么#include用角括号，
这样在main.c中只需包含这个头文件就可以了，而不需要写三个函数声明：
要写三个函数声明。
我们继续前面关于stack.c和main.c的讨论。stack.c这个模块封装了top和stack两个变量，
2.2.头文件 请点评
函数只在模块内部使用而不希望被外界访问到，则声明为Internal Linkage的。
供给外界使用的，
用static关键字声明具有Internal Linkage的函数也是出于这个目的。在一个模块中，
块的内部状态，这也是一种封装（Encapsulation）的思想。
件都要写三个函数声明也是很麻烦的，
这样,
比如在第2节“数组应用实例：统计随机数"讲过用宏定义避免硬编码的问题，
，即使在main.c中用extern声明也访问不到stack.c的变量top和stack。从而保护了stack.c模
int main(void)
#include
#include
extern char 
extern void push(char);
int is_empty(void)
stack.h 
return 0; 
while(!is_empty())
push('
push(
也称为导出（Export）给外界使用，
 return top == -l;
 重复的代码总是应该尽量避免的，
/￥
pop(void);
：
，假设又有一个foo.c也使用这个模块，main.c和foo.c中各
已经设计得比较完善了。但是使用这个模块的每个程序文
而#include"stack.h"用引号。对于用角括号包含的
以前我们通过各种办法把重复的代码提取出
，这些函数声明为External Linkage的。有些
，这次有什么办法
有些函数是提
导出
333
自
---
## Page 334
中：
则第一次包含stack.h时并没有定义sTAcK_H这个宏，因此头文件的内容包含在预处理的输出结果
包含了一个空文件。这有什么用呢？假如main.c包含了两次stack.h：
于main.c所在目录的相对路径正是stack/stack.h。
则需要用gcc -c main.c-Istack编译。用-I选项告诉gcc头文件要到子目录stack里找。
假如三个代码文件都放在当前目录下：
个宏没有定义过,
一个子目录下：
，如果在包含这个头文件时sTACK_H这个宏已经定义过了，
int main(void)
extern void 
int main(void)
#include 
0 directories, 3 files
extern
S
 directory, 3 files
-- main.c
tree
1
--
 stack
main.c
 stack.h
 stack.c
...........
STACK H
int
 char 
那么从#ifndef到#endif之间的代码就包含在预处理的输出结果中，否则这一段
1S
 push(char);
stack.h
，则相当于这个头文件里什么都没有，
..
......................
意思是说，
如果STACK_H这
---
## Page 335
把main.c、stack.c、foo.c链接在一起。如下图所示：
一起了。如果采用包含头文件的办法，
"了。当然这样也能编译通过，但是在一个规模较大的项目中不能这么做,
还有一个问题，既然要#include头文件，
重复包含头文件有以下问题：
中声明两次也没有问题，
另外一个问题是，
录/usr/include中，
情况很常见，经常会包含四五层，
但有时候重复包含的错误并不是那么明显的。比如：
那为什么需要防止重复包含呢？谁会把一个头文件包含两次呢？像上面那么明显的错误没人会犯,
} asm/errno.h,
件都要加上Header Guard，宏定义名就用头文件名的大写形式，这是规范的做法。
了头文件的内容被重复包含。这种保护头文件的写法称为Header Guard，
其中已经定义了
3
2.
1．一是使预处理的速度变慢了，要处理很多本来不需要处理的头文件。
三是头文件里有些代码不允许重复出现，
译器都会规定一个包含层数的上限）。
二是如果有foo.h包含bar.h,
图 20.2.为什么要包含头文件而不是.c文件
就行）
#include 
个程序文件中只允许出现一次。
，后者又包含了asm-generic/errno.h。
，就算我是重复包含了头文件，那有什么危害么？像上面的三个函数声明，在程序
"stack.h"
 对于具有External Linkage的函数，声明任意多次也都代表同一个函数。
这个宏，
，因此第二次再包含
，这时候重复包含的问题就很难发现了。比如在我的系统头文件目
，bar.h又包含foo.h的情况，预处理器就陷入死循环了（其实编
相当于又回到最初的例 12.1“用堆栈实现倒序打 
虽然变量和函数允许多次声明（只要不是多次定义
，在规模较大的项目中头文件包含头文件的
 就相当于包含了一个空文件,
以后我们每写-
假如又有-
就相当
一个头文
这就避免
---
## Page 336
首先看关于函数声明的规则。
解这些规则。本节的两个表格出自[Standard C]
以上两节关于定义和声明只介绍了最基本的规则，
2.3.定义和声明的详细规则请点评
实C语言关于定义和声明还有很多复杂的规则，
头文件又被多个.c文件包含，那么这些.c文件就不能链接在一起了。
同样道理，
表 20.1.Storage Class关键字对函数声明的作用
"stack.h"
#include
"stack.c"
#include
头文件中的变量和函数声明一定不能是定义。
int main(void)
void push(char);
int main(void)
void push(char)
main.c
main.c
"stack.h"
#include
"stack.c"
#include
X
 在分析错误原因或者维护规模较大的项目时需要了
int foo(void)
void push(char);
int foo(void)
void push(char)
在写代码时掌握这些基本规则就够用了，
main
foo.c
foo.c
。如果头文件中出现变量或函数定义，这个
void push(char)
stack.c
但其
336
---
## Page 337
关于变量声明的规则要复杂一些：
则这里的extern修饰的标识符具有Interanl Linkage而
用static关键字声明函数。
许定义函数，
中找不到前一次声明（这次声明是第一次声明）
以前我们说"extern关键字表示这个标识符具有External Linkage"其实是不准确的，准确地说应该