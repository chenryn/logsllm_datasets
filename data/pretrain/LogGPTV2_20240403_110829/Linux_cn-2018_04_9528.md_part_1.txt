---
author: Gustavo Duarte
category: 技术
comments_data: []
count:
  commentnum: 0
  favtimes: 2
  likes: 0
  sharetimes: 0
  viewnum: 9406
date: '2018-04-08 19:17:00'
editorchoice: false
excerpt: 这一篇文章我们将专门去讲这个重要的主题 —— 页面缓存。文件和内存之间的关系常常很不好去理解，而它们对系统性能的影响却是非常大的。
fromurl: https://manybutfinite.com/post/page-cache-the-affair-between-memory-and-files/
id: 9528
islctt: true
largepic: /data/attachment/album/201804/08/191716biaoeie8ofpmpbgg.jpg
permalink: /article-9528-1.html
pic: /data/attachment/album/201804/08/191716biaoeie8ofpmpbgg.jpg.thumb.jpg
related:
- displayorder: 0
  raid: 9255
- displayorder: 1
  raid: 9393
reviewer: ''
selector: ''
summary: 这一篇文章我们将专门去讲这个重要的主题 —— 页面缓存。文件和内存之间的关系常常很不好去理解，而它们对系统性能的影响却是非常大的。
tags:
- 缓存
- 内存管理
thumb: false
title: 页面缓存：内存和文件之间的那些事
titlepic: true
translator: qhwdw
updated: '2018-04-08 19:17:00'
---
![](/data/attachment/album/201804/08/191716biaoeie8ofpmpbgg.jpg)
上一篇文章中我们学习了内核怎么为一个用户进程 [管理虚拟内存](/article-9393-1.html)，而没有提及文件和 I/O。这一篇文章我们将专门去讲这个重要的主题 —— 页面缓存。文件和内存之间的关系常常很不好去理解，而它们对系统性能的影响却是非常大的。
在面对文件时，有两个很重要的问题需要操作系统去解决。第一个是相对内存而言，慢的让人发狂的硬盘驱动器，[尤其是磁盘寻道](https://manybutfinite.com/post/what-your-computer-does-while-you-wait)。第二个是需要将文件内容一次性地加载到物理内存中，以便程序间*共享*文件内容。如果你在 Windows 中使用 [进程浏览器](http://technet.microsoft.com/en-us/sysinternals/bb896653.aspx) 去查看它的进程，你将会看到每个进程中加载了大约 ~15MB 的公共 DLL。我的 Windows 机器上现在大约运行着 100 个进程，因此，如果不共享的话，仅这些公共的 DLL 就要使用高达 ~1.5 GB 的物理内存。如果是那样的话，那就太糟糕了。同样的，几乎所有的 Linux 进程都需要 ld.so 和 libc，加上其它的公共库，它们占用的内存数量也不是一个小数目。
幸运的是，这两个问题都用一个办法解决了：页面缓存 —— 保存在内存中的页面大小的文件块。为了用图去说明页面缓存，我捏造出一个名为 `render` 的 Linux 程序，它打开了文件 `scene.dat`，并且一次读取 512 字节，并将文件内容存储到一个分配到堆中的块上。第一次读取的过程如下：
![Reading and the page cache](/data/attachment/album/201804/08/191729joerpy3zx55yz5p4.png)
1. `render` 请求 `scene.dat` 从位移 0 开始的 512 字节。
2. 内核搜寻页面缓存中 `scene.dat` 的 4kb 块，以满足该请求。假设该数据没有缓存。
3. 内核分配页面帧，初始化 I/O 请求，将 `scend.dat` 从位移 0 开始的 4kb 复制到分配的页面帧。
4. 内核从页面缓存复制请求的 512 字节到用户缓冲区，系统调用 `read()` 结束。
读取完 12KB 的文件内容以后，`render` 程序的堆和相关的页面帧如下图所示：