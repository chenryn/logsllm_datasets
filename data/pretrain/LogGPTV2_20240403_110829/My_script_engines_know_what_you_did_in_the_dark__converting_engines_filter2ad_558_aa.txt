title:My script engines know what you did in the dark: converting engines
into script API tracers
author:Toshinori Usui and
Yuto Otsuki and
Yuhei Kawakoya and
Makoto Iwamura and
Jun Miyoshi and
Kanta Matsuura
My Script Engines Know What You Did In the Dark:
Converting Engines into Script API Tracers
Toshinori Usui
NTT Secure Platform Laboratories
Institute of Industrial Science,
The University of Tokyo
PI:EMAIL
Yuto Otsuki
NTT Secure Platform Laboratories
PI:EMAIL
Yuhei Kawakoya
NTT Secure Platform Laboratories
PI:EMAIL
Makoto Iwamura
NTT Secure Platform Laboratories
PI:EMAIL
Jun Miyoshi
NTT Secure Platform Laboratories
PI:EMAIL
Kanta Matsuura
Institute of Industrial Science,
The University of Tokyo
PI:EMAIL
ABSTRACT
Malicious scripts have been crucial attack vectors in recent attacks
such as malware spam (malspam) and fileless malware. Since mali-
cious scripts are generally obfuscated, statically analyzing them is
difficult due to reflections. Therefore, dynamic analysis, which is not
affected by obfuscation, is used for malicious script analysis. How-
ever, despite its wide adoption, some problems remain unsolved.
Current designs of script analysis tools do not fulfill the follow-
ing three requirements important for malicious script analysis. (1)
Universally applicable to various script languages, (2) capable of
outputting analysis logs that can precisely recover the behavior of
malicious scripts, and (3) applicable to proprietary script engines.
In this paper, we propose a method for automatically generating
script API tracer by analyzing the target script engine binaries. The
method mine the knowledge of script engine internals that are
required to append behavior analysis capability. This enables the
addition of analysis functionalities to arbitrary script engines and
generation of script API tracers that can fulfill the above require-
ments. Experimental results showed that we can apply this method
for building malicious script analysis tools.
CCS CONCEPTS
• Security and privacy → Malware and its mitigation; Soft-
ware reverse engineering; • Software and its engineering →
Simulator / interpreter; • Computing methodologies → Op-
timization algorithms.
KEYWORDS
malicious script, dynamic analysis, reverse engineering, function
enhancement
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
© 2019 Association for Computing Machinery.
ACM ISBN 978-1-4503-7628-0/19/12...$15.00
https://doi.org/10.1145/3359789.3359849
ACM Reference Format:
Toshinori Usui, Yuto Otsuki, Yuhei Kawakoya, Makoto Iwamura, Jun Miyoshi,
and Kanta Matsuura. 2019. My Script Engines Know What You Did In the
Dark: Converting Engines into Script API Tracers . In 2019 Annual Com-
puter Security Applications Conference (ACSAC’19), December 9–13, 2019, San
Juan, PR, USA. ACM, New York, NY, USA, 12 pages. https://doi.org/10.1145/
3359789.3359849
1 INTRODUCTION
The diversity of script languages creates a blind spot for malicious
scripts to hide from analyses and detections. Attackers can flexibly
choose a script language to develop a module of their malicious
scripts and change scripts for developing another module of it.
However, we (security side) are not always well-prepared for any
script languages since the development of analysis tools for even
a single script language incurs a certain cost. We call this gap of
costs between attackers and defenders the asymmetry problem. This
asymmetry problem gives attackers an advantage in evading the
security of their target systems. That is, an attacker can choose
one script language for which a target organization may not be
well-prepared to develop malicious scripts for attacking the system
without detections.
One approach for solving this asymmetry problem is focusing on
system-level monitoring such as Windows APIs or system calls. We
can universally monitor the behavior of malicious scripts no matter
what script languages the malware is written in if we set hooks for
monitoring at the system-level. As long as malicious scripts run on
a Windows platform, it has to more or less depend on Windows
APIs or system calls to perform certain actions. If we set hooks
on each API and monitor the invocations of those APIs from a
malicious scripts, we can probably capture their behavior. However,
this system-level monitoring approach is not sufficient from the
viewpoint of analysis efficiency because some script API calls do
not reach any API code, such as string or object operations. That is,
we do not always capture the complete behavior of malicious scripts
running on the platform. This lack of captures results in partial
understanding of malicious scripts and leads to underestimating
the threat of such scripts.
Another approach for malicious script analysis is focusing on
a specific language and embedding monitoring mechanisms into
a runtime environment of the script. This approach resolves the
466semantic gap problem mentioned above but requires deep domain
knowledge to develop a monitoring tool. For example, we have to
know both the specifications of a script language and the internal
architecture of the script engine to develop a dynamic analysis
tool for the script. In addition, this approach supports only a target
script language. That is, we need to develop an analysis tool for
each script language separately.
In summary, we (security side) need an approach universally
applicable for any script language and fine-grained enough for
analyzing the detailed behavior of a malicious script. However,
previous studies satisfied both only one of these requirements not
both at the same time.
To mitigate the gap between attackers and defenders, we propose
a method of generating the script API tracers with a small amount
of human intervention. The basic idea of our method is to eliminate
the knowledge of script engine internals from the requirements for
developing of analysis tools for a script language. Instead, we com-
plement this knowledge with several test programs written in the
script language (test scripts) and run them on the script engine for
differential execution analysis [7][31] to clarify the local functions
corresponding to the script APIs which are usually acquired from
the deep analysis of the script engine. Bravely speaking, our method
allows us to replace the knowledge of script engine internals with
one of the specifications of the script for writing test scripts.
Our method is composed of four steps: execution trace logging,
hook point detection, tap point detection, and script API tracer
generation. The most important parts of our method are detecting
points called hook points in which the method inserts hooks to
append code to script engines for script analysis as well as points
called tap points, which are memory regions logged by the code
for analysis. Our method first acquires branch traces by executing
manually crafted scripts called test scripts, each of which only calls
a specific script API of the analysis target. Our method then obtains
hook and tap points that correspond to the target script API by
analyzing the obtained branch trace with the differential execution
analysis-based hook point detection method. By inserting hooks
into the hook points that dump the memory of the tap points to
logs, our method generates a script API tracer.
Note that we define a script API as a functionality provided by
a script engine. For example, each built-in function and statement
of Visual Basic for Applications (VBA) and VBScript, such as Cre-
ateObject and Eval, and commandlets (Cmdlets) of PowerShell, such
as Invoke-Expression, are script APIs.
A challenge in this research was efficiently finding the local func-
tion that corresponds to the target script API from the large number
of local functions of a script engine. We addressed this challenge by
emphasizing the local function corresponding to the target script
API as the difference in branch traces of two scripts that calls the
target script API different times. To achieve this differentiation,
we modified the Smith-Waterman algorithm [27] borrowed from
bioinformatics, which finds a similar common subsequence from
two or more sequences, to fit it to this problem.
Our method does not allow us to directly fulfill the first require-
ment, i.e., universal applicability. However, we believe that our
method allows us to reduce the cost of developing an analysis
tool for each script language. Therefore, we can lower the bar for
preparing analysis tools for any script language.
We implemented a prototype system that uses our method called
STAGER, a script analyzer generator based on engine reversing, for
evaluating the method. We conducted experiments using STAGER
to detect hook and tap points on VBA, VBScript, and PowerShell.
The experimental results showed that our method can precisely
detect hook and tap points and generate a script API tracer that
can output analysis logs containing script semantics. The hook
and tap points are detected in about a few tens of seconds. Using
the generated script API tracer, we analyzed real-world malicious
scripts obtained from VirusTotal [1], a malware sharing service for
research. The output logs showed that the generated script API
tracer can effectively analyze malicious scripts in a short time. Our
method enables the generation of a script API tracer for proprietary
script languages for which existing methods cannot construct anal-
ysis tools. It can therefore contribute to providing better protection
against malicious scripts.
Our contributions are as follows.
• We first proposed a method that appends a script API tracing
capability to a script engine by analyzing the script engine
binaries.
• We confirmed that our method can accurately detect hook
and tap points within realistic time through experiments. Our
method only requires tens of seconds of human intervention
for analyzing a script API.
• We showed that the script API tracers generated with our
method can provide information effective for analysts by
analyzing malicious scripts in the wild.
2 SCRIPT ANALYSIS TOOL
2.1 Requirements
We first clarify the three requirements that script analysis tools
should fulfill from the viewpoint of malicious script analysis.
(1) Universal applicability: Attackers use various script languages
to create their malicious scripts. Hence, methods for constructing
script analysis tools (hereafter, construction methods) should be ap-
plicable to various languages with diverse language specifications.
(2) Preservability of script semantics: When analyzing scripts,
the more output logs lose script semantics, the less information
analysts can obtain from the logs. Therefore, construction methods
should preserve script semantics to provide better information for
analysis.
(3) Binary applicability: When constructing script analysis tools
of script engines which are proprietary software (we call them pro-
prietary script engines), their source code is not available. Because
attackers often use such proprietary script languages, it is necessary
for construction methods to be applicable to binaries.
We also discuss what form of logs should be output by script
analysis tools. As mentioned in requirement (2), the logs should pre-
serve script semantics. That is, logs that can reconstruct the script
APIs and their arguments that the target script used are desirable.
For example, when a script executes CreateObject(WScript.Shell), the
corresponding analysis log should contain the script API CreateOb-
ject and its argument WScript.Shell. A script API tracer generated
by the proposed method outputs such logs.
4672.2 Design and Problem
Script-level Monitoring. Design: Script-level monitoring di-
2.2.1
rectly inserts hooks into the target script itself. Since malicious
scripts are generally obfuscated, it is difficult to find appropriate
hook points inside scripts that can output insightful information
for analysts. Therefore, hooks are inserted using a hook point-free
method, i.e., by overriding specific script APIs. Listing 1 shows a
code snippet that achieves a script-level monitoring of a script API
eval in JavaScript. In this code, a hook is inserted by overriding
the eval function (line 2), which inserts the code for analysis that
outputs its argument as a log (line 3).
Problem: There are two problems with script-level monitoring: ap-
plicability and stealthiness. Since this construction method requires
overriding of script APIs, it is only applicable to script languages
that allow overriding of the built-in functions. Therefore, it does
not fulfill the requirement of language independence mentioned in
Section 2.1. This construction method is not sufficiently practical
for malicious script analysis because few script languages support
such a language feature.
Listing 1: Example of script-level monitoring
1original_eval = eval;
2eval = function(input_code) {
3
4
console.log('[eval]␣code:␣' + input_code);
original_eval(input_code); }
System-level Monitoring. Design: System-level monitoring
2.2.2
inserts hooks into system APIs and/or system calls. It then analyzes
scripts by executing the target script while observing the script
engine process.
Problem: System-level monitoring causes a semantic gap due to
the distance between the hook points in a system and the target
scripts. There are two specific problems caused by a semantic gap:
avalanche effect and semantic loss. The avalanche effect is a problem
that makes an observation capture a large amount of noise. It occurs
when one or more layers exist between an observation target and
observation point. Ralf et al. [15] referred to the avalanche effect
caused by the component object model (COM) layer, and we found
that a script engine layer also causes the avalanche effect.
The main problem of semantics loss is that it decreases infor-
mation effective for analysts. For example, Document.Cookie.Set,
which has semantics of setting cookies in the script layer, loses the
semantics in the system API layer because it is just observed as
WriteFile. For these reasons, system-level monitoring does not ful-
fill the requirement of preservability of script semantics mentioned
in Section 2.1.
Script Engine-level Monitoring. Design: Script engine-level
2.2.3
monitoring inserts hooks into specific functionalities in script en-
gines. Because inserting hooks into script engines requires deep
understanding of its implementation, there are few methods that
can obtain such knowledge. One is analyzing script engines by read-
ing source code or reverse-engineering binaries. Another is building
an emulator to obtain a fully understood implementation of the
Table 1: Summary of requirements fulfillment with each
construction method
Construction method
Script-level
System-level
Script engine-level
Proposed
(1) Universal
(2) Semantics
(3) Binary
✗
✓
✓
✓
✓
✗
✓
✓
✓
✓
✗
✓
target script engine. Unlike script-level monitoring, script engine-
level monitoring is independent of language specifications. It also
does not cause a semantic gap, unlike system-level monitoring.
Problem: The problem with script engine-level monitoring is its
implementation difficulty. Although script engine-level monitoring
may be easily achieved if a script engine provides interfaces for
analysis such as Antimalware Scan Interface (AMSI) [22], this is
just a limited example. In general, one has to discover appropriate
hook and tap points for inserting hooks into the target program.
For open source script engines, we can insert hooks by analyzing
the source code. However, it is limited to specific script languages
whose source code is available. Even analyzing source code requires
certain workloads. Moreover, obtaining the hook and tap points for
proprietary script engines requires reverse-engineering and there is
no automatic method for this. In addition, manual analysis requires
skilled reverse-engineers and unrealistic human effort. Therefore,
script engine-level monitoring does not fulfill the requirement of
binary applicability mentioned in Section 2.1.