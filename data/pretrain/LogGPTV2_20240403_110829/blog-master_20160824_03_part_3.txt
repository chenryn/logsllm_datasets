digoal=#     
```
### 7. 测试load balance  
测试hint是否可用, replication表示发到主节点  
```
digoal=# /*REPLICATION*/ SELECT 1;    
 ?column?     
----------    
        1    
(1 row)    
digoal=# SELECT 1;    
 ?column?     
----------    
        1    
(1 row)    
```
查看日志  
```
May 13 14:00:24 db-172-16-3-150 pgpool[30046]: statement: /*REPLICATION*/ SELECT 1;    
May 13 14:00:24 db-172-16-3-150 pgpool[30046]: DB node id: 0 backend pid: 19371 statement: /*REPLICATION*/ SELECT 1;    
May 13 14:00:33 db-172-16-3-150 pgpool[30046]: statement: SELECT 1;    
May 13 14:00:33 db-172-16-3-150 pgpool[30046]: DB node id: 1 backend pid: 19372 statement: SELECT 1;    
```
do默认分发到master节点, 因为pgpool不能确认do里面是否有修改数据库的动作.  
```
digoal=# do language plpgsql $$    
digoal$# declare     
digoal$# begin    
digoal$#   raise notice 'test';    
digoal$# end;    
digoal$# $$;    
NOTICE:  test    
DO    
May 13 14:16:06 db-172-16-3-150 pgpool[30072]: statement: do language plpgsql $$#012declare #012begin#012  raise notice 'test';#012end;#012$$;    
May 13 14:16:06 db-172-16-3-150 pgpool[30072]: DB node id: 0 backend pid: 20575 statement: do language plpgsql $$#012declare #012begin#012  raise notice 'test';#012end;#012$$;    
May 13 14:16:06 db-172-16-3-150 pgpool[30072]: pool_send_and_wait: Error or notice message from backend: : DB node id: 0 backend pid: 20575 statement: do language plpgsql $$#012declare #012begin#012  raise notice 'test';#012end;#012$$; message: test    
```
在仅仅设置了黑名单的情况下, 所有状态的函数(volatile, stable, immutable)都分发到standby节点.  
```
May 13 14:18:07 db-172-16-3-150 pgpool[30072]: statement: select now();    
May 13 14:18:07 db-172-16-3-150 pgpool[30072]: DB node id: 1 backend pid: 20576 statement: select now();    
May 13 14:18:28 db-172-16-3-150 pgpool[30072]: statement: select pg_is_in_recovery();    
May 13 14:18:28 db-172-16-3-150 pgpool[30072]: DB node id: 1 backend pid: 20576 statement: select pg_is_in_recovery();    
May 13 14:22:46 db-172-16-3-150 pgpool[30072]: statement: select clock_timestamp();    
May 13 14:22:46 db-172-16-3-150 pgpool[30072]: DB node id: 1 backend pid: 20576 statement: select clock_timestamp();    
```
例子, 发到standby节点  
```
digoal=# create or replace function ft1(v_id int) returns int as    
$$    
declare             
begin    
  update t set info='new' where id=v_id;     
  return 0;    
end;    
$$ language plpgsql strict;    
CREATE FUNCTION    
digoal=# select ft1(1);    
ERROR:  cannot execute UPDATE in a read-only transaction    
CONTEXT:  SQL statement "update t set info='new' where id=v_id"    
PL/pgSQL function ft1(integer) line 4 at SQL statement    
```
使用replication hint强行在master节点执行 :  
```
digoal=# /*REPLICATION*/ select ft1(1);    
 ft1     
-----    
   0    
(1 row)    
```
如果同时配置了黑名单和白名单, 那么以白名单为准, 不在白名单的都会发到master节点.  
```
[root@db-172-16-3-150 etc]# vi pgpool.conf    
white_function_list = 'ft'    
[root@db-172-16-3-150 etc]# /opt/pgpool3.3.3/bin/pgpool -f /opt/pgpool3.3.3/etc/pgpool.conf reload    
May 13 14:36:08 db-172-16-3-150 pgpool[30056]: statement: select ft(1);    
May 13 14:36:08 db-172-16-3-150 pgpool[30056]: DB node id: 1 backend pid: 22331 statement: select ft(1);    
May 13 14:36:14 db-172-16-3-150 pgpool[30056]: statement: select ft1(1);    
May 13 14:36:14 db-172-16-3-150 pgpool[30056]: DB node id: 0 backend pid: 22330 statement: select ft1(1);    
May 13 14:36:18 db-172-16-3-150 pgpool[30056]: statement: select now();    
May 13 14:36:18 db-172-16-3-150 pgpool[30056]: DB node id: 0 backend pid: 22330 statement: select now();    
May 13 14:36:35 db-172-16-3-150 pgpool[30056]: statement: select clock_timestamp();    
May 13 14:36:35 db-172-16-3-150 pgpool[30056]: DB node id: 0 backend pid: 22330 statement: select clock_timestamp();    
```
update正常分发到master节点  
```
May 13 14:31:02 db-172-16-3-150 pgpool[30072]: statement: update t set info='new' where id=1;    
May 13 14:31:02 db-172-16-3-150 pgpool[30072]: DB node id: 0 backend pid: 20575 statement: update t set info='new' where id=1;    
```
事务中包含游标, 游标强制在master节点执行  
```
digoal=# begin;    
BEGIN    
digoal=# select 1;    
 ?column?     
----------    
        1    
(1 row)    
digoal=# declare cur cursor for select * from t;    
DECLARE CURSOR    
digoal=# fetch next from cur;    
 id |               info               |          crt_time              
----+----------------------------------+----------------------------    
  3 | 37c8aae0733801d116e1c83ab60f183c | 2013-10-12 17:33:14.654526    
(1 row)    
digoal=# update t set info='new' where current of cur;    
UPDATE 1    
digoal=# end;    
COMMIT    
```
这里我们看到, begin, end是在所有节点执行的, 但是事务中的select是在standby中执行的, 游标是在master执行的.  
```
May 13 14:38:24 db-172-16-3-150 pgpool[30056]: statement: begin;    
May 13 14:38:24 db-172-16-3-150 pgpool[30056]: DB node id: 0 backend pid: 22330 statement: begin;    
May 13 14:38:24 db-172-16-3-150 pgpool[30056]: DB node id: 1 backend pid: 22331 statement: begin;    
May 13 14:38:25 db-172-16-3-150 pgpool[30056]: statement: select 1;    
May 13 14:38:25 db-172-16-3-150 pgpool[30056]: DB node id: 1 backend pid: 22331 statement: select 1;    
May 13 14:38:32 db-172-16-3-150 pgpool[30056]: statement: declare cur cursor for select * from t;    
May 13 14:38:32 db-172-16-3-150 pgpool[30056]: DB node id: 0 backend pid: 22330 statement: declare cur cursor for select * from t;    
May 13 14:38:44 db-172-16-3-150 pgpool[30056]: statement: fetch next from cur;    
May 13 14:38:44 db-172-16-3-150 pgpool[30056]: DB node id: 0 backend pid: 22330 statement: fetch next from cur;    
May 13 14:38:46 db-172-16-3-150 pgpool[30079]: Replication of node:1 is behind 1840 bytes from the primary server (node:0)    
May 13 14:38:47 db-172-16-3-150 pgpool[30056]: statement: update t set info='new' where current of cur;    
May 13 14:38:47 db-172-16-3-150 pgpool[30056]: DB node id: 0 backend pid: 22330 statement: update t set info='new' where current of cur;    
May 13 14:38:48 db-172-16-3-150 pgpool[30079]: Replication of node:1 is behind 1840 bytes from the primary server (node:0)    
May 13 14:38:49 db-172-16-3-150 pgpool[30056]: statement: end;    
May 13 14:38:49 db-172-16-3-150 pgpool[30056]: DB node id: 1 backend pid: 22331 statement: end;    
May 13 14:38:49 db-172-16-3-150 pgpool[30056]: DB node id: 0 backend pid: 22330 statement: end;    
```
对于先执行更新的事务, 那么后期的查询都会在master节点执行.  
```
May 13 15:33:11 db-172-16-3-150 pgpool[30056]: statement: begin;    
May 13 15:33:11 db-172-16-3-150 pgpool[30056]: DB node id: 0 backend pid: 22330 statement: begin;    
May 13 15:33:11 db-172-16-3-150 pgpool[30056]: DB node id: 1 backend pid: 22331 statement: begin;    
May 13 15:33:13 db-172-16-3-150 pgpool[30056]: statement: declare cur cursor for select * from t;    
May 13 15:33:13 db-172-16-3-150 pgpool[30056]: DB node id: 0 backend pid: 22330 statement: declare cur cursor for select * from t;    
May 13 15:33:15 db-172-16-3-150 pgpool[30056]: statement: fetch next from cur;    
May 13 15:33:15 db-172-16-3-150 pgpool[30056]: DB node id: 0 backend pid: 22330 statement: fetch next from cur;    
May 13 15:33:16 db-172-16-3-150 pgpool[30056]: statement: update t set info='new' where current of cur;    
May 13 15:33:16 db-172-16-3-150 pgpool[30056]: DB node id: 0 backend pid: 22330 statement: update t set info='new' where current of cur;    
May 13 15:33:17 db-172-16-3-150 pgpool[30056]: statement: select * from t limit 1;    
May 13 15:33:17 db-172-16-3-150 pgpool[30056]: DB node id: 0 backend pid: 22330 statement: select * from t limit 1;    
May 13 15:33:19 db-172-16-3-150 pgpool[30056]: statement: select 1;    
May 13 15:33:19 db-172-16-3-150 pgpool[30056]: DB node id: 0 backend pid: 22330 statement: select 1;    
```
## 参考  
1\. http://www.pgpool.net/docs/latest/pgpool-en.html  
2\. http://blog.163.com/digoal@126/blog/static/1638770402014316448141/  
3\. http://www.continuent.com/  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")