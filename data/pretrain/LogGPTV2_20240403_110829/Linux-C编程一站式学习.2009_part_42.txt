一个程序文件中在文件作用域两次声明同一个函数：
表 20.2.Storage Class关键字对变量声明的作用
static
extern
none
static
extern
static 
extern
none
，在块作用域不允许定义函数，
tentative definition
static initializer
static duration 
internal linkage 
not a definition
previous linkage
tentative definition 
static initializer
external linkage
FileS
no initializer[*]
static duration
static duration
can define 
linternal linkage
can define 
previous linkage
can define 
previous linkage
Scope
/*
/*
 Declaration
internal 
，或者说函数定义不能嵌套。另外，
no linkage 
dynamic initializer
automatic duration
no linkage 
Block Scope Declaration
definition 
static initializer
static duration
not a definition
no initializer
static duration
previous linkage
definition
，而且必须是文件作用域的声明，如果在程序文件
N/A
cannot define 
previous linkage
cannot define 
previous linkage
e而不是External Linkage。
那么这个标识符具有External Linkage。例如在
*/
*一
从上表的前两行可
 在块作用域中不允许
3
---
## Page 338
Definition的完整定义在C99的6.9.2节条款2。
[32] 由于本书没有提及将不完全类型进行组合的问题，
写法。
带Initializer的，并且认为它是一
译器会报错。注意上表中标有[*]的单元格，
变量i2和i5第一次声明为Internal Linkage，
1.多目标文件的链接
的明确定义
它是变量定
义"呢？
Definition（不算变量定义）和Tentative Definition（暂定的变量定义）
饰
表达式的值可以在运行时计算。
Linkage四种情况，
上一页
表达式，
表的每个单元格里分成四行，
那么如果它有Initializer则编译器认为它就是一
extern
extern
5
t
int.
义，
定义，
tern
tern
xtern
t
t
tt
catic
nt i4;
tern
cati
，表达式的值必须在编记
七
，就用这个暂定的变量定义[32],
i5
il
：
`int
如果程序文件中有这个变量的明确定义就用明确定义，如果程序文件没有这个变量
int
int
int
int
int
int
int
=
1;
，生存期有Static Duration和Automatic Duration两种情况，
i5;
valid
2.3
！
==
 renders
 tentative definition,
 refers
refers
refers
是否算变量
 分别描述变量的链接属性、
个定义，
efers
译时就能确
definition,
definition,
全国嵌入式人才培训基地
to
undefined,
，但是gcc对于这种写法会报警台
 external
 previous,
 previous,
 previous,
previous,
第二次又声明为External Linkage，
，这种情况下变量以0初始化。在[C99]中有一个例子：
起始页
T
 external
一级
external
 internai
后者
linkage disagreement
个变量定义,
者表示Initializer中可以使用任意的右值表达式，
所以这条规则被我简化了
whose
 whose
whose
whose
whose
 refers to previous
 refers.
internal
 linkage
，生存期，
L
linkage
linkage
linkage
linkage
linkage
linkage
linkage
Definition
to
如是
前者表示Initializer中只能使用常
 previous
 linkage
果它没有Initializer则编译器暂
以及这种变量如何初始化，
告，为了兼容性应避免这种
is
 is external
.9
或者用static关键字修
什么叫"暂定的变量定
（算变量定义）、Nota
 internal
external
externa]
interna]
，请参考本章和上一
，这是不允许的，
Tentative
C99是允许
真正的规则还要
3.静态库
8
下一页
编
曹
定
是
---
## Page 339
必要），把main.c改得简单一些，
我们继续用stack.c的例子。
3.静态库 请点评
要讲到的environ变量）。本节介绍怎么创建这样一个库。
有时候需要把一组代码编译成一个库，
上一页
#define STACK
#ifndef STACK H
int is_empty(void)
char pop(void)
extern int top;
extern char stack[512];
void push(char c)
extern int top;
extern
int top 
char stack[512];
/* stack.c.
dif
int is_empty(void);
 char stack[512];
return top == -1;
 return stack[top--］;
stack[++top] = c;
：为了便于理解，我们把stack.c拆成四个程序文件（虽然实际上没太大
头文件stack.h不变，
这个库在很多项目中都要用到，
全国嵌入式人才培训基地
第 20 章 链接详解
 3.静态库 
本节用到的代码如下所示：
例如libc就是这样一个库,
---
## Page 340
看：
也不会去找的，
-L选项告诉编译器去哪里找需要的库文件，
然后我们把libstack.a和main.c编译链接在一起：
以为静态库创建索引，以上命令等价于：
的。s是专用于生成静态库的，
件列表添加到文件包，
打包的作用，
库文件名都是以lib开头的，
然后打包成一个静态库ibstack.a：
这些文件的目录结构是：
programs:
S
S
SS
ar:
S
$ gcc -c stack/stack.c stack/push.c stack/pop.c stack/is_empty.c
int main(void)
#include 
/* main.c */
 gcc main.c -L. -lstack -Istack -o main
[-- main.c
-....
 ranlib 
ar r.libstack.a stack.o push.o pop.o is_empty.o
directory;
tree
-...........
 但是把目标文件打包成静态库只能用ar命令而不能用tar命令。选项r表示将后面的文
creating 
 stack
...........
，所以-L.选项不能少。编译器默认会找的目录可以用-print-search-dirs选项查
1
1
push.c
pop.c
 is_empty.c
return 0;
push('a');
libstack.a
..........
如果文件包不存在就创建它，
6 files
.........
.........
，静态库以.a作为后缀，
，表示为静态库创建索引，这个索引被链接器使用。ranlib命令也可
-L.表示在当前目录找。
，表示Archive。ar命令类似于tar命令，
，如果文件包中已有同名文件就替换成新
........
，即使库文件就在当前目录，编译器默认
 -lstack告诉编译器要链
-----.-..-..-..----.-
1
---
## Page 341
写一长串目标文件名。
有意思的是，main.c只调用了push这-
件main:
库中的目标文件取出来和可执行文件真正链接在一起。我们通过反汇编看上一步生成的可执行文
用的1ibc库函数仍然是未定义符号，
那么链接共享库和链接静态库有什么区别呢？在第2节“main函数和启动例程"讲过，
编译器是优先考虑共享库的，如果希望编译器只链接静态库，
库1ibstack.so，
及-L选项指定的路径中查找用-1选项指定的库,
其中的libraries就是库文件的搜索路径列表,
2
.定义和声明
库时只是指定了动态链接器和该程序所需要的库文件，
，如果是直接把那些目标文件和main.c编译链接在一起：
一页
$ objdump -d main 
linux-gnu/4.3.2/:/usr/lib/gcc/i486-1inux-gnu/:/usr/lib/gcc/i486-
gnu/4.3.2/:/1ib/:
linux-gnu/4.
80483c3:
804839b:
8048398:
8048394:
iinux-gnu/4.
linux-gnu/4.3.2/:/usr/1ib/gcc/i486-1inux-gnu/4.3.2/
80483c0:
1i
linux-gnu/4.3.2/:/usr/lib/gcc/i486-linux-gnu/:/usr/libexec/gcc/i486-
 gcc main.c stack.o push.o pop.o is_empty.o -Istack -o main
如果有就链接它，
这是使用静态库的一
 :
 =/usr/lib/gcc/i486-1inux-gnu/4.3.2/:/usr/lib/gcc/i486-
8d
5
8
 4c
e5
:04
24
，如果没有就找有没有静态库libstack.a，如果有就链接它。所以
lib/
 要在运行时做动态链接。而在链接静态库时，
486
04
全国嵌入式人才培训基地
一个好处，
个函数，
linux
起始页
所以链接生成的可执行文件中也只有push而没
各路径之间用:号隔开。
 链接器可以从静态库中只取出需要的部分来做链
比如-lstack,
sub
push
pushl
and
lea
并没有真的做链接，
可以指定-static选项。
 编译器会首先找有没有共享 
$0x4,%esp
%esp,%ebp
%ebp
-0x4(%ecx)
，编译器会在这些搜索路径以
，链接器会把静态
在链接libc共
4.共享库
下一页
---
## Page 342
g选项。反汇编查看push.o：
由于接下来要用objdump_-ds把反汇编指令和源代码穿插起来分析，
位时需要修改指令。我们先不加-fPIc选项编译生成目标文件：
我们知道一般的目标文件称为Relocatable，
Code）。那么用-fPrc生成的目标文件和一般的目标文件有什么不同呢？下面分析这个问题。
组成共享库的目标文件和一般的目标文件有所不同，
4.共享库 请点评
-f后面跟一些编译选项，
4.1.编译、链接、运行请点评
上一页
void push(char c)
extern 
0000ooo0 :
Disassembly of section .text:
push.o:
$ objdump -dS push.o
extern
S
gcc
6
0：
 -c -g stack/stack.c stack/push.c stack/pop.c stack/is_empty.c
 int top;
......
80
68
8b 
83
55
empty.c
8
￥
9
15
file format elf32-i386
fc
0
01
80
0
PIC是其中一种，
品0 00
0０
000
00
c;
全国嵌入式人才培训基地
第 20 章 链接详解
．表示生成位置无关代码（Position Independent
，在链接时可以把目标文件中各段的地址做重定位，重定
4.共享库
mov
mov
mov
sub