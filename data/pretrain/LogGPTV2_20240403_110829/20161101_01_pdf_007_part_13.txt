 try {
 // 输出SQL语句
 printf("query: %s\n", user_string($arg1))
 // 非cache统计
 println("非cache输出")
 foreach([a,b,c,d] in io_stat1 @sum -) {
 if (c == "R" && a==pid() && b==execname()) {
 var1 = @count(io_stat1[a,b,c,d]) // 请求次数
 var2 = @sum(io_stat1[a,b,c,d]) / 1024 // 请求K字节数
 var3 = @sum(io_stat11[a,b,c,d]) // 请求时间, us
 spvar1 = ((var3!=0) ? ((1000000*var1)/var3) : 0) // 请求次数每秒
 spvar2 = ((var3!=0) ? ((1000000*var2)/var3) : 0) // 请求K字节数每秒
 printf("-%s-devname:%s, reqs:%d, reqKbytes:%d, reqs/s:%d, reqKbytes/s:%d\n", c, d, var1, var2, spvar1, spvar2)
 }
PostgreSQL trace和debug
 if (c == "W" && a==pid() && b==execname()) {
 var4 = @count(io_stat1[a,b,c,d]) // 请求次数
 var5 = @sum(io_stat1[a,b,c,d]) / 1024 // 请求K字节数
 var6 = @sum(io_stat11[a,b,c,d]) // 请求时间
 spvar4 = ((var6!=0) ? ((1000000*var4)/var6) : 0) // 请求次数每秒
 spvar5 = ((var6!=0) ? ((1000000*var5)/var6) : 0) // 请求K字节数每秒
 printf("-%s-devname:%s, reqs:%d, reqKbytes:%d, reqs/s:%d, reqKbytes/s:%d\n", c, d, var4, var5, spvar4, spvar5)
 }
 del[a,b,c,d]=1 // 使用a,b,c,d填充del数组, 用于清除io_stat1, io_stat11.
 }
 foreach([a,b,c,d] in del) {
 delete io_stat1[a,b,c,d]
 delete io_stat11[a,b,c,d]
 }
 delete del // 用完清除del
 // 清除非cache统计用过的本地变量, 后面的cache统计需要继续使用.
 delete var1
 delete var2
 delete var3
 delete var4
PostgreSQL trace和debug
 delete var5
 delete var6
 delete spvar1
 delete spvar2
 delete spvar4
 delete spvar5
 // cache统计
 println("cache输出")
 foreach([a,b,c,d] in io_stat2 @sum -) {
 if (c == "R" && a==pid() && b==execname()) {
 var1 = @count(io_stat2[a,b,c,d]) // 请求次数
 var2 = @sum(io_stat2[a,b,c,d]) / 1024 // 请求K字节数
 var3 = @sum(io_stat22[a,b,c,d]) // 请求时间
 spvar1 = ((var3!=0) ? ((1000000*var1)/var3) : 0) // 请求次数每秒
 spvar2 = ((var3!=0) ? ((1000000*var2)/var3) : 0) // 请求K字节数每秒
 printf("-%s-devname:%s, reqs:%d, reqKbytes:%d, reqs/s:%d, reqKbytes/s:%d\n", c, d, var1, var2, spvar1, spvar2)
 }
 if (c == "W" && a==pid() && b==execname()) {
 var4 = @count(io_stat2[a,b,c,d]) // 请求次数
 var5 = @sum(io_stat2[a,b,c,d]) / 1024 // 请求K字节数
PostgreSQL trace和debug
 var6 = @sum(io_stat22[a,b,c,d]) // 请求时间
 spvar4 = ((var6!=0) ? ((1000000*var4)/var6) : 0) // 请求次数每秒
 spvar5 = ((var6!=0) ? ((1000000*var5)/var6) : 0) // 请求K字节数每秒
 printf("-%s-devname:%s, reqs:%d, reqKbytes:%d, reqs/s:%d, reqKbytes/s:%d\n", c, d, var4, var5, spvar4, spvar5)
 }
 del[a,b,c,d]=1
 }
 foreach([a,b,c,d] in del) {
 delete io_stat1[a,b,c,d]
 delete io_stat11[a,b,c,d]
 }
 delete del
 }
 catch(msg) {
 printdln("---", pn(), msg)
 }
 }
PostgreSQL trace和debug
 probe end{
 try {
 println("----------END----------")
 // 非cache, 按设备的读写统计输出.
 println("非cache输出")
 foreach([c,d] in io_stat3 @sum -) {
 if (c == "R") {
 var1 = @count(io_stat3[c,d]) // 请求次数
 var2 = @sum(io_stat3[c,d]) / 1024 // 请求K字节数
 var3 = @sum(io_stat33[c,d]) // 请求时间
 spvar1 = ((var3!=0) ? ((1000000*var1)/var3) : 0) // 请求次数每秒
 spvar2 = ((var3!=0) ? ((1000000*var2)/var3) : 0) // 请求K字节数每秒
 printf("-%s-devname:%s, reqs:%d, reqKbytes:%d, reqs/s:%d, reqKbytes/s:%d\n", c, d, var1, var2, spvar1, spvar2)
 }
 if (c == "W") {
 var4 = @count(io_stat3[c,d]) // 请求次数
 var5 = @sum(io_stat3[c,d]) / 1024 // 请求K字节数
 var6 = @sum(io_stat33[c,d]) // 请求时间
 spvar4 = ((var6!=0) ? ((1000000*var4)/var6) : 0) // 请求次数每秒
 spvar5 = ((var6!=0) ? ((1000000*var5)/var6) : 0) // 请求K字节数每秒
 printf("-%s-devname:%s, reqs:%d, reqKbytes:%d, reqs/s:%d, reqKbytes/s:%d\n", c, d, var4, var5, spvar4, spvar5)
PostgreSQL trace和debug
 }
 }
 delete var1
 delete var2
 delete var3
 delete var4
 delete var5
 delete var6
 delete spvar1
 delete spvar2
 delete spvar4
 delete spvar5
 // cache, 按设备的读写统计输出.
 println("cache输出")
 foreach([c,d] in io_stat4 @sum -) {
 if (c == "R") {
 var1 = @count(io_stat4[c,d]) // 请求次数
 var2 = @sum(io_stat4[c,d]) / 1024 // 请求K字节数
 var3 = @sum(io_stat44[c,d]) // 请求时间
PostgreSQL trace和debug
 spvar1 = ((var3!=0) ? ((1000000*var1)/var3) : 0) // 请求次数每秒
 spvar2 = ((var3!=0) ? ((1000000*var2)/var3) : 0) // 请求K字节数每秒
 printf("-%s-devname:%s, reqs:%d, reqKbytes:%d, reqs/s:%d, reqKbytes/s:%d\n", c, d, var1, var2, spvar1, spvar2)
 }
 if (c == "W") {
 var4 = @count(io_stat4[c,d]) // 请求次数
 var5 = @sum(io_stat4[c,d]) / 1024 // 请求K字节数
 var6 = @sum(io_stat44[c,d]) // 请求时间
 spvar4 = ((var6!=0) ? ((1000000*var4)/var6) : 0) // 请求次数每秒
 spvar5 = ((var6!=0) ? ((1000000*var5)/var6) : 0) // 请求K字节数每秒
 printf("-%s-devname:%s, reqs:%d, reqKbytes:%d, reqs/s:%d, reqKbytes/s:%d\n", c, d, var4, var5, spvar4, spvar5)
 }
 }
 // 结束后清除所有的全局变量的值.
 delete io_stat1
 delete io_stat11
 delete io_stat2
 delete io_stat22
 delete io_stat3
 delete io_stat33
PostgreSQL trace和debug
 delete io_stat4
 delete io_stat44
 delete del
 }
 catch(msg) {
 printdln("---", pn(), msg)
 }
 }
PostgreSQL trace和debug
 输出示例
 [root@db-172-16-3-150 ~]# stap test.stp
 query: explain (analyze,verbose,costs,buffers,timing) select count(*) from generate_series(1,1000000);
 非cache输出
 -R-devname:sdb1, reqs:428, reqKbytes:13671, reqs/s:70568, reqKbytes/s:2254080
 -W-devname:sdb1, reqs:428, reqKbytes:13671, reqs/s:24126, reqKbytes/s:770631
 cache输出
 -W-devname:N/A, reqs:1, reqKbytes:0, reqs/s:71428, reqKbytes/s:0
 digoal=# explain (analyze,verbose,costs,buffers,timing) select count(*) from generate_series(1,1000000);
 QUERY PLAN
 Aggregate (cost=12.50..12.51 rows=1 width=0) (actual time=610.733..610.733 rows=1 loops=1)
 Output: count(*)
 Buffers: temp read=429 written=428
 -> Function Scan on pg_catalog.generate_series (cost=0.00..10.00 rows=1000 width=0) (actual time=230.287..458.922 rows=1000000
 loops=1)
 Output: generate_series
 Function Call: generate_series(1, 1000000)
 Buffers: temp read=429 written=428
 Total runtime: 615.404 ms
 (8 rows)
PostgreSQL trace和debug
 strace帮助
 pg93@db-172-16-3-150-> strace -h
 usage: strace [-dDffhiqrtttTvVxx] [-a column] [-e expr] ... [-o file]
 [-p pid] ... [-s strsize] [-u username] [-E var=val] ...
 [command [arg ...]]
 or: strace -c [-D] [-e expr] ... [-O overhead] [-S sortby] [-E var=val] ...
 [command [arg ...]]
 -c -- count time, calls, and errors for each syscall and report summary
 -f --follow forks, -ff -- with output into separate files
 -F --attempt to follow vforks, -h -- print help message
 -i -- print instruction pointer at time of syscall
 -q -- suppress messages about attaching, detaching, etc.
 -r --print relative timestamp, -t -- absolute timestamp, -tt --with usecs
 -T --print time spent in each syscall, -V -- print version
 -v -- verbose mode: print unabbreviated argv, stat, termio[s], etc. args
 -x -- print non-ascii strings in hex, -xx -- print all strings in hex
 -a column -- alignment COLUMN for printing syscall results (default 40)
 -e expr -- a qualifying expression: option=[!]all or option=[!]val1[,val2]...
 options: trace, abbrev, verbose, raw, signal, read, or write
PostgreSQL trace和debug
 -o file --send trace output to FILE instead of stderr
 -O overhead -- set overhead for tracing syscalls to OVERHEAD usecs
 -p pid -- trace process with process id PID, may be repeated
 -D -- run tracer process as a detached grandchild, not as parent
 -s strsize -- limit length of print strings to STRSIZE chars (default 32)
 -S sortby --sort syscall counts by: time, calls, name, nothing (default time)
 -u username --run command as username handling setuid and/or setgid
 -E var=val -- put var=val in the environment for command
 -E var -- remove var from the environment for command
PostgreSQL trace和debug
 strace举例
 digoal=# select pg_backend_pid();
 pg_backend_pid
 ----------------
 16752
 (1 row)
 pg93@db-172-16-3-150-> strace -p 16752
 -- 一个打开了跟踪排序的客户端 :
 digoal=# select count(*) from (select * from pg_class order by relpages) t;
 LOG: 00000: begin tuple sort: nkeys = 1, workMem = 1024, randomAccess = f
 LOCATION: tuplesort_begin_heap, tuplesort.c:617
 LOG: 00000: performsort starting: CPU 0.00s/0.00u sec elapsed 0.00 sec
 LOCATION: tuplesort_performsort, tuplesort.c:1319
 LOG: 00000: performsort done: CPU 0.00s/0.00u sec elapsed 0.00 sec
 LOCATION: tuplesort_performsort, tuplesort.c:1394
 LOG: 00000: internal sort ended, 105 KB used: CPU 0.00s/0.00u sec elapsed 0.00 sec
 LOCATION: tuplesort_end, tuplesort.c:932
 count
 -------
 296
 (1 row)
PostgreSQL trace和debug
 Process 16752 attached -interrupt to quit
 recvfrom(10, "Q\0\0\0Gselect count(*) from (selec"..., 8192, 0, NULL, NULL) = 72
 lseek(7, 0, SEEK_END) = 65536
 lseek(8, 0, SEEK_END) = 65536
 lseek(11, 0, SEEK_END) = 65536
 write(1, "RELOPTINFO (1): rows=292 width=2"..., 207) = 207
 write(1, "RELOPTINFO (1): rows=292 width=0"..., 211) = 211
 lseek(7, 0, SEEK_END) = 65536
 getrusage(RUSAGE_SELF, {ru_utime={0, 10998}, ru_stime={0, 1999}, ...}) = 0
 write(2, "\0\0\372\0pA\0\0T2014-04-01 19:12:51.299"..., 259) = 259
 sendto(10, "T\0\0\0\36\0\1count\0\0\0\0\0\0\0\0\0\0\24\0\10\377\377\377\377\0\0N"..., 152, 0, NULL, 0) = 152
 brk(0x10a2000) = 0x10a2000
 getrusage(RUSAGE_SELF, {ru_utime={0, 10998}, ru_stime={0, 1999}, ...}) = 0
 write(2, "\0\0\371\0pA\0\0T2014-04-01 19:12:51.299"..., 258) = 258