不能有任何实现代码；它是纯粹抽象的。因为接口的成员总是抽象的，所以接口不需要
abstract关键字。
类似于抽象类，永远不能实例化接口，它只能包含其成员的签名。此外，可以声明接
口类型的变量。
接口既不能有构造函数（如何构建不能实例化的对象？）也不能有字段（因为这隐含
了某些内部的实现方式）。接口定义也不允许包含运算符重载，但设计语言时总是会讨论
这个可能性，未来可能会改变。
在接口定义中还不允许声明成员的修饰符。接口成员总是隐式为public，不能声明为
virtual。如果需要，就应由实现的类来声明，因此最好实现类来声明访问修饰符，就像本
节的代码那样。
例如，IDisposable。如果类希望声明为公有类型，以便它实现方法Dispose（），该类
就必须实现IDisposable。在C#中，这表示该类派生自IDisposable类。
    class SomeClass: IDisposable
    {
      // This class MUST contain an implementation of the
      // IDisposable.Dispose() method, otherwise
      // you get a compilation error.
      public void Dispose()
      {
        // implementation of Dispose() method
      }
      // rest of class
    }
在这个例子中，如果SomeClass派生自IDisposable类，但不包含与IDisposable类中签名
相同的Dispose（）实现代码，就会得到一个编译错误，因为该类破坏了实现IDisposable的
一致协定。当然，编译器允许类有一个不派生自IDisposable类的Dispose（）方法。问题是
其他代码无法识别出SomeClass类，来支持IDisposable特性。
  注意： IDisposable是一个相当简单的接口，它只定义了一个方法。大多数接
口都包含许多成员。IDisposable的正确实现代码没有这么简单，参见第5章。
4.5.1 定义和实现接口
下面开发一个遵循接口继承规范的小例子来说明如何定义和使用接口。这个例子建立
在银行账户的基础上。假定编写代码，最终允许在银行账户之间进行计算机转账业务。许
多公司可以实现银行账户，但它们一致认为，表示银行账户的所有类都实现接口
IBankAccount。该接口包含一个用于存取款的方法和一个返回余额的属性。这个接口还允
许外部代码识别由不同银行账户实现的各种银行账户类。我们的目的是允许银行账户彼此
通信，以便在账户之间进行转账业务，但还没有介绍这个功能。
为了使例子简单一些，我们把本例子的所有代码都放在同一个源文件中，但实际上不
同的银行账户类不仅会编译到不同的程序集中，而且这些程序集位于不同银行的不同机器
上。但这些内容对于我们的目的过于复杂了。为了保留一定的真实性，我们为不同的公司
定义不同的名称空间。
首先，需要定义IBankAccount接口（代码文件UsingInterfaces/IBankAccount.cs）：
    namespace Wrox.ProCSharp
    {
      public interface IBankAccount
      {
        void PayIn(decimal amount);
        bool Withdraw(decimal amount);
        decimal Balance { get; }
      }
    }
注意，接口的名称为IBankAccount。接口名称通常以字母I开头，以便知道这是一个
接口。
  注意： 如第2章所述，在大多数情况下，.NET的用法规则不鼓励采用所谓的
Hungarian表示法，在名称的前面加一个字母，表示所定义对象的类型。接口是少数几
个推荐使用Hungarian表示法的例外之一。
现在可以编写表示银行账户的类了。这些类不必彼此相关，它们可以是完全不同的
类。但它们都表示银行账户，因为它们都实现了IBankAccount接口。
下面是第一个类，一个由Royal 
Bank 
of 
Venus运行的存款账户（代码文件
UsingInterfaces/VenusBank.cs）：
    namespace Wrox.ProCSharp.VenusBank
    {
      public class SaverAccount: IBankAccount
      {
        private decimal _balance;
        public void PayIn(decimal amount) => _balance += amount;
        public bool Withdraw(decimal amount)
        {
        if (_balance >= amount)
        {
          _balance -= amount;
          return true;
        }
        WriteLine("Withdrawal attempt failed.");
        return false;
        }
        public decimal Balance => _balance;
        public override string ToString() =>
          $"Venus Bank Saver: Balance = {_balance,6:C}";
      }
    }
实现这个类的代码的作用一目了然。其中包含一个私有字段balance，当存款或取款
时就调整这个字段。如果因为账户中的金额不足而取款失败，就会显示一条错误消息。还
要注意，因为我们要使代码尽可能简单，所以不实现额外的属性，如账户持有人的姓名。
在现实生活中，这是最基本的信息，但对于本例不必要这么复杂。
在这段代码中，唯一有趣的一行是类的声明：
    public class SaverAccount: IBankAccount
SaverAccount派生自一个接口IBankAccount，我们没有明确指出任何其他基类（当然
这表示SaverAccount直接派生自System.Object）。另外，从接口中派生完全独立于从类中
派生。
SaverAccount派生自IBankAccount，表示它获得了IBankAccount的所有成员，但接口
实际上并不实现其方法，所以SaverAccount必须提供这些方法的所有实现代码。如果缺少
实现代码，编译器就会产生错误。接口仅表示其成员的存在性，类负责确定这些成员是虚
拟还是抽象的（但只有在类本身是抽象的，这些函数才能是抽象的）。在本例中，接口的
任何函数不必是虚拟的。
为了说明不同的类如何实现相同的接口，下面假定Planetary Bank of Jupiter还实现一
个类GoldAccount来表示其银行账户中的一个（代码文件UsingInterfaces/JupiterBank.cs）：
    namespace Wrox.ProCSharp.JupiterBank
    {
      public class GoldAccount: IBankAccount
      {
        // etc
      }
    }
这里没有列出GoldAccount类的细节，因为在本例中它基本上与SaverAccount的实现
代码相同。GoldAccount与SaverAccount没有关系，它们只是碰巧实现相同的接口而已。
有了自己的类后，就可以测试它们了。首先需要一些using语句：
    using Wrox.ProCSharp;
    using Wrox.ProCSharp.VenusBank;
    using Wrox.ProCSharp.JupiterBank;
    using static System.Console;
然后需要一个Main（）方法（代码文件UsingInterfaces/Program.cs）：
    namespace Wrox.ProCSharp
    {
      class Program
      {
        static void Main()
        {
        IBankAccount venusAccount = new SaverAccount();
        IBankAccount jupiterAccount = new GoldAccount();
        venusAccount.PayIn(200);
        venusAccount.Withdraw(100);
        WriteLine(venusAccount.ToString());
        jupiterAccount.PayIn(500);
        jupiterAccount.Withdraw(600);
        jupiterAccount.Withdraw(100);
        WriteLine(jupiterAccount.ToString());
        }
      }
    }
这段代码的执行结果如下：
    > BankAccounts
    Venus Bank Saver: Balance = $100.00
    Withdrawal attempt failed.
    Jupiter Bank Saver: Balance = $400.00
在这段代码中，要点是把两个引用变量声明为IBankAccount引用的方式。这表示它们
可以指向实现这个接口的任何类的任何实例。但我们只能通过这些引用调用接口的一部分
方法——如果要调用由类实现的但不在接口中的方法，就需要把引用强制转换为合适的类
型。在这段代码中，我们调用了ToString（）（不是IBankAccount实现的），但没有进行
任何显式的强制转换，这只是因为ToString（）是一个System.Object（）方法，因此C#编
译器知道任何类都支持这个方法（换言之，从任何接口到System.Object的数据类型强制转
换是隐式的）。第8章将介绍强制转换的语法。
接口引用完全可以看成类引用——但接口引用的强大之处在于，它可以引用任何实现
该接口的类。例如，我们可以构造接口数组，其中数组的每个元素都是不同的类：
    IBankAccount[] accounts = new IBankAccount[2];
    accounts[0] = new SaverAccount();
    accounts[1] = new GoldAccount();
但注意，如果编写了如下代码，就会生成一个编译器错误：
    accounts[1] = new SomeOtherClass();   // SomeOtherClass does NOT implement
                                          // IBankAccount: WRONG! !
这会导致一个如下所示的编译错误：
    Cannot implicitly convert type 'Wrox.ProCSharp. SomeOtherClass' to
     'Wrox.ProCSharp.IBankAccount'
4.5.2 派生的接口
接口可以彼此继承，其方式与类的继承方式相同。下面通过定义一个新的
ITransferBankAccount接口来说明这个概念，该接口的功能与IBankAccount相同，只是又
定义了一个方法，把资金直接转到另一个账户上（代码文件UsingInterfaces/
ITransferBankAccount）：
    namespace Wrox.ProCSharp
    {
      public interface ITransferBankAccount: IBankAccount
      {
        bool TransferTo(IBankAccount destination, decimal amount);
      }
    }
因为ITransferBankAccount派生自IBankAccount，所以它拥有IBankAccount的所有成员
和它自己的成员。这表示实现（派生自）ITransferBankAccount的任何类都必须实现
IBankAccount的所有方法和在ITransferBankAccount中定义的新方法TransferTo（）。没有
实现所有这些方法就会产生一个编译错误。
注意，TransferTo（）方法对于目标账户使用了IBankAccount接口引用。这说明了接
口的用途：在实现并调用这个方法时，不必知道转账的对象类型，只需要知道该对象实现
IBankAccount即可。
下面说明ITransferBankAccount：假定Planetary Bank of Jupiter还提供了一个当前账
户。CurrentAccount类的大多数实现代码与SaverAccount和GoldAccount的实现代码相同
（这仅是为了使例子更简单，一般是不会这样的），所以在下面的代码中，我们仅突出显
示了不同的地方（代码文件UsingInterfaces/ JupiterBank.cs）：
    public class CurrentAccount: ITransferBankAccount
    {
      private decimal _balance;
      public void PayIn(decimal amount) => _balance += amount;
      public bool Withdraw(decimal amount)
      {
        if (_balance >= amount)
        {
    _balance -= amount;
    return true;
        }
        WriteLine("Withdrawal attempt failed.");
        return false;
      }
      public decimal Balance => _balance;
      public bool TransferTo(IBankAccount destination, decimal amount)
      {
        bool result = Withdraw(amount);
        if (result)
        {
    destination.PayIn(amount);
        }
        return result;
      }
      public override string ToString() =>
        $"Jupiter Bank Current Account: Balance = {_balance,6:C}";
    }
可以用下面的代码验证该类：
      static void Main()
      {
        IBankAccount venusAccount = new SaverAccount();
        ITransferBankAccount jupiterAccount = new CurrentAccount();
        venusAccount.PayIn(200);
        jupiterAccount.PayIn(500);
        jupiterAccount.TransferTo(venusAccount, 100);
        WriteLine(venusAccount.ToString());
        WriteLine(jupiterAccount.ToString());
      }
这段代码的结果如下所示，可以验证，其中说明了正确的转账金额：
    > CurrentAccount
    Venus Bank Saver: Balance = $300.00
    Jupiter Bank Current Account: Balance = $400.00
4.6 is和as运算符
在结束接口和类的继承之前，需要介绍两个与继承有关的重要运算符：is和as。
如前所述，可以把具体类型的对象直接分配给基类或接口——如果这些类型在层次结
构中有直接关系。例如，前面创建的SaverAccount可以直接分配给IBankAccount，因为
SaverAccount类型实现了IBankAccount接口：
    IBankAccount venusAccount = new SaverAccount();
如果一个方法接受一个对象类型，现在希望访问IBankAccount成员，该怎么办？该对
象类型没有IBankAccount接口的成员。此时可以进行类型转换。把对象（也可以使用任何
接口中任意类型的参数，把它转换为需要的类型）转换为IBankAccount，再处理它：
    public void WorkWithManyDifferentObjects(object o)
    {
      IBankAccount account = (IBankAccount)o;
      // work with the account
    }
只要总是给这个方法提供一个IBankAccount类型的对象，这就是有效的。当然，如果
接受一个object类型的对象，有时就会传递无效的对象。此时会得到InvalidCastException
异常。在正常情况下接受异常从来都不好。此时应使用is和as运算符。
不是直接进行类型转换，而应检查参数是否实现了接口IBankAccount。as运算符的工
作原理类似于类层次结构中的cast运算符——它返回对象的引用。然而，它从不抛出
InvalidCastException异常。相反，如果对象不是所要求的类型，这个运算符就返回null。
这里，最好在使用引用前验证它是否为空，否则以后使用以下引用，就会抛出
NullReferenceException异常：
    public void WorkWithManyDifferentObjects(object o)
    {
      IBankAccount account = o as
 IBankAccount;
      if (account ! = null)
      {
        // work with the account
      }
    }
除了使用as运算符之外，还可以使用is运算符。is运算符根据条件是否满足，对象是
否使用指定的类型，返回true或false。验证条件是true后，可以进行类型转换，因为现在，
类型转换总会成功：
    public void WorkWithManyDifferentObjects(object o)
    {
      if (o is
 IBankAccount)
      {
        IBankAccount account = (IBankAccount)o;
        // work with the account
      }
    }
在类层次结构内部的类型转换，不会抛出基于类型转换的异常，且使用is和as运算符
都是可行的。
4.7 小结
本章介绍了如何在C#中进行继承。C#支持多接口继承和单一实现继承，还提供了许
多有用的语法结构，以使代码更健壮，如override关键字，它表示函数应在何时重写基类
函数，new关键字表示函数在何时隐藏基类函数，构造函数初始化器的硬性规则可以确保
构造函数以健壮的方式进行交互操作。
第5章介绍了接口IDisposable的细节，解释了如何管理在本机代码中分配的资源。
第5章
托管和非托管的资源
本章要点
● 运行期间在栈和堆上分配空间
● 垃圾回收
● 使用析构函数和System.IDisposable接口来释放非托管的资源
● C#中使用指针的语法
● 使用指针实现基于栈的高性能数组
● 平台调用，访问本机API
本章源代码下载地址（wrox.com）：
打开网页www.wrox.com/go/professionalcsharp6，单击Download Code选项卡即可下载
本章源代码。本章代码分为以下几个主要的示例文件：
● PointerPlayground
● PointerPlayground2
● QuickArray
● PlatformInvokeSample