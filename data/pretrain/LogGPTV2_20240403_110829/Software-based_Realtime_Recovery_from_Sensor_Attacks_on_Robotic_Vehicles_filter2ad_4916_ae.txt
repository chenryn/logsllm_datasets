parameter values. Observe that, (1) for a given window, the
larger threshold raises less FPs and more FNs; (2) for a given
threshold, the larger window causes more FPs and less FNs.
Also note that the values chosen by our parameter selection
strategy (see Section 3.3) lead to zero FPs and FNs.
Compromised
GPS
Benign
Benign
Benign
Benign
Barometer 1 2
Gyroscope 1 2 3
Table 3: Attack combination and recovery result
Test#
Recovered
C1
C2
C3
C4
C5
C6
(cid:88): success, †Supplementary Compensation Applied
Compromised
Compromised
Compromised
Compromised
Compromised
Benign
Compromised
Benign
Compromised
Compromised
Benign
Benign
Compromised
(cid:88)
(cid:88)
(cid:88)†
(cid:88)
(cid:88)†
(cid:88)†
(a) Constant wind
(b) Dynamic wind
Figure 13: External force (wind) corrections for different winds
Figure 13 shows the external force estimation and correc-
tion for when there is wind. Here, a simulated APM quadrotor
is ﬂying north. We use a simulated RV as we need to create
different windy conditions. First, we generate an artiﬁcial
wind towards the south with a constant velocity 29mph (i.e.,
a strong breeze in Beaufort scale 6). As the wind pushes the
vehicle to the opposite direction, the real acceleration mea-
surement is lower than the software sensor which does not
model the wind. We correct this external error in software
sensor by subtracting the average error in a window from the
following window predictions (see Figure 13a). Similarly, we
present the error correction under a dynamic wind - composed
of randomly generated wind portions with a random selection
of speed ([10...30]mph), direction (N,S,E,W) and the portion
duration ([2..10]s) - in Figure 13b. Observe that software
(a) without compensation
Figure 15: all-gyroscopes attack recovery and compensation
(b) with compensation
Multiple Sensor Attacks and Results. We perform combi-
natorial attacks on heterogeneous sensors of 3DR. For the
same type of sensors, we attack the entire set of sensors at
the same time. Table 3 shows the results. In this experiment,
we observe that the sensors have different sensitivity and im-
portance. When GPS and Barometers are compromised, we
can recover the vehicle. However, when all gyros are attacked
(C3, C5, and C6), the recovery duration was short (3 sec).
To further investigate the gyroscope recovery case, we per-
form different attacks on the available gyroscope sensors.
Table 4 shows the results and the comparison with a tradi-
tional fail-safe mechanism (i.e., TMR). We can recover from
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    359
wnwn+1Dynamic windSelected ParameterSelected ParameterattackattackTable 4: Attack on attitude (gyro) sensors and recovery result
TMR
Test#
(cid:88)
(cid:88)
T1
(cid:88)
T2

(cid:88)1
T3

(cid:88): success, : fail to recover, 1: recovery with supplementary compensation
Gyroscope 1
Compromised
Compromised
Compromised
Compromised
Compromised
Benign
Benign
Compromised
Gyroscope 2
Gyroscope 3
Proposed
Benign
the attack on a single gyro (Test T1) and the attack on the ma-
jority gyros (more than half – Test T2) without supplementary
compensation. When all gyro sensors are compromised, we
can recover from the attack with the complementary approach,
leading to increased recovery duration. In comparison, the
traditional fail-safe mechanism fails to recover when the ma-
jority of gyro sensors are compromised. In general, some RV
systems are equipped with failsafe modes (e.g., emergency
landing or manual mode). However, those approaches still rely
on the remaining benign sensors, or otherwise they undergo
immediate crashes even with the failsafe mode.
To increase the recovery duration, we leverage our com-
pensation approach described in Section 3.3. Speciﬁcally, to
compensate for the accuracy loss, the gyroscope readings are
combined with readings from other types of sensors. Figure 15
shows that the internal state (i.e., roll rate) changes during
recovery without and with compensation. The red curve rep-
resents the actual physical state (ground truth roll rate) of the
vehicle in real-world. Under attack, the software sensor (blue
curve) replaces the real measurement (black curve). However,
without compensation, a small error in the software sensor pre-
diction accumulates over time and causes the actual roll rate
to oscillate signiﬁcantly after a few seconds (see Figure 15a).
Note that our recovery technique prevents an immediate crash
even without compensation applied. Our compensation ap-
proach increases the software sensor accuracy by adding the
supplementary measurements, leading to a more stable roll
rate and a longer recovery duration (see Figure 15b). The
video is available at [12]. More discussion of the recovery
cases can be found in Section 4.3.
(a) Wind Effects
(b) Attack Scale
Figure 16: Errors under different wind speeds and attack scale
Wind Effects and Attack Scale We evaluate the error (i.e.,
the difference between software and real sensors) under differ-
ent wind speeds and attack scales while the vehicle performs
missions including straight ﬂies and turns. We also measure
the duration of stable operation after recovery, called the re-
covery duration. Speciﬁcally, we artiﬁcially inject wind in the
simulation with different speeds from 0 to 35mph. For the
different attack scales, we change the maliciously injected roll
rate from 5 to 90deg/s. To measure the recovery duration, we
ﬁnd the value of k in Eq. (7) with ε = 3 and maximum t = 20.
Figure 16a shows that the error (brown area) is small with
small (0-7mph) and moderate (8-15mph) wind, and signiﬁ-
cantly increases with strong wind (above 20mph). Observe
that the errors are lower than our recovery threshold (=38)
with in most case. Only the very strong wind (above 27mph
- a gale in Beaufort scale) generates errors exceeding the
threshold. However, commodity drones are recommended
not to ﬂy in wind speed exceeding 22mph. And, Figure 16b
shows the error during the gyroscope attack. Observe that it
is signiﬁcantly larger than the recovery threshold (=38) for
all the attack scales. The magnitudes of errors in the two
ﬁgures demonstrate that the our selected threshold value can
distinguish between wind and attack. Lastly, as shown by the
blue curve in Figure 16a, the recovery duration is at least 10
seconds with small/moderate wind. When the wind is strong
(> 20mph), the duration is signiﬁcantly reduced.
4.3 Case Studies
We present case studies with the two real RVs with four dif-
ferent attacks under various movements: gyroscope and GPS
attacks on the 3DR Solo, two GPS attacks on the Erle-rover.
Gyroscope recovery on 3DR Solo. In this attack, 3DR Solo
takes off from home and maintains its position at a prede-
ﬁned altitude (i.e., hovering). Then, we launch an attack on
its available gyroscope sensors (3 in total). Speciﬁcally, we
insert constant values (under the attacker’s control) to disrupt
the gyroscope roll rate measurements. Without our recovery
framework, the vehicle instantly deviates from its hovering
condition and crashes. Figure 17a show the trajectory in red
(top) and roll rate changes (bottom) during the mission. The
green region indicates the normal operation without the attack
while the red region shows the roll rate changes under the
attack. When the attack is launched, the controller uses the
compromised roll rate (∼ 0.6rad/s2) and accordingly tries
to reduce the rate to match the target state (zero). This con-
versely decreases the roll rate leading to overturning and con-
sequently crashing the vehicle. With recovery, the software
sensor prevents the crash by providing the proper feedback
to the control loop under the attack. Figure 17b shows the
real trajectory (top) and roll rate changes (bottom) during the
attack and recovery. During the normal operation, the mea-
surement (blue curve) takes the real sensor readings whereas
under the recovery mode (after the attack), the measurement
takes the software sensor (red curve). Observe the software
sensor introduces a reasonable amount of oscillation that was
not seen under the real benign sensors because of inevitable
inherent errors. However, despite the errors, it still allows the
vehicle to maintain the hovering position under the attack,
preventing the crash. Videos are available at [9].
GPS recovery on 3DR Solo. We compromise the GPS sensor
reading with a more complex mission. The 3DR Solo per-
forms a waypoint navigation mission where it ﬂies through
360    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association
ThresholdThreshold(a) Gyro attack
(b) Gyro attack recovery
(c) GPS attack without recovery
Figure 17: Attack and recovery under the sensor attacks on 3dr Solo
(d) GPS attack recovery
ﬁve waypoints in a square shape trajectory after take-off. We
launch the attack by modifying the longitude positional in-
formation of the GPS measurement - set to 20 meters left
from the actual position. As shown in Figure 17c, the vehicle
deviates from the expected trajectory (black line) and ﬂies to
the right (red star), due to the compromised measurements.
With recovery, Figure 17d shows that the vehicle continues its
planned mission (with a marginal deviation) as the compro-
mised measurements were replaced by the software sensor.
Videos can be found at [10] and [15], respectively.
(a) Random Attack
(b) Controlled Attack
Figure 18: GPS attacks and recovery on Erle-rover
GPS recovery on Erle-rover. We conduct two different GPS
attacks on Erle-Rover: random and controlled GPS attacks.
In the random attack, we inject random signals to compro-
mise positional information (i.e., longitude and latitude) while
the vehicle is driving straight. Figure 18a shows the attack
(red star). As depicted, right after the attack, the compromised
measurements (red curve) is replaced with the software sen-
sor (blue curve), allowing the vehicle to continue its intended
trajectory (i.e., straight line). A video is available at [14].
In the controlled GPS attack, the attacker maliciously crafts
the injected signal based on her/his estimation of the rover’s
current physical states. In this case, the rover performs a more
complex mission in which it moves straight, makes a sharp
turn to the left and then drives straight again. During the ﬁrst
straight movement, the attacker injects a signal that closely
follows the estimated trajectory but has a small constant er-
ror, which misdirects the rover gradually. Speciﬁcally, we
inject the estimated longitude values with around 0.00001
degrees error, making the attack quite stealthy as it cannot be
directly detected. Under this scenario, the vehicle’s controller
thinks that the vehicle is deviating from the planned mission
as the sensed positional measurement are slightly incorrect.
To correct the error, the vehicle adjusts its behavior by slightly
moving right. To avoid detection, the attacker makes sure that
the error is less than our threshold by accurately estimating
the changing real states according to the planed move, and
also the effect of the attack. However, during the next maneu-
ver (sharp turn), which is unknown to the attacker, she fails to
precisely estimate the real states. Consequently, our recovery
monitoring successfully detects the attack and activates the
software sensor. Figure 18b shows the planed trajectory (black
dotted line), the actual trajectory (black line), the measure-
ments (red curve) used in the controller, the software sensor
measurements (blue curve), the attack (red star) and recovery
(green star). As shown, during the straight move, the attacker
maintains small error by estimating the planned states and
the vehicle moves right gradually. However, during the turn,
the attack is detected. In this case, the software sensor stops
the drift to the right, but it cannot compensate the error intro-
duced by the lengthy attack. In practice, additional emergency
steps can be taken, such as reboot or estimate GPS location
through external channel (e.g., surroundings and nearby RVs).
A video of this attack and recovery is available at [13].
5 Discussion
Recovery Duration. The drift during recovery is inevitable
since the software sensor is an approximation. Although our
recovery technique successfully prevents sensor attacks tem-
porarily, software sensors cannot replace physical sensors
permanently or for a prolonged duration due to the drift effect.
Our experiment in Section 4.2 shows that the operation time
of the recovery mode can be at least 10 seconds in most cases,
enough for launching emergency operations (e.g., emergency
landing, manual mode switch with an alert) to avoid devas-
tating incidents. The empirical studies in [17, 23] shows that
the takeover time to resume control from a highly automated
vehicle is around 3 to 7s. Our recovery duration is 10 seconds.
Advanced Attack. Our experiment in Section 4.3 shows that
a small-error attack (carry-off attack) can be detected and pre-
vented. The ﬁrst reason is that the attacker has no access to the
internal sensor readings. However, if the attacker can precisely
model such readings, she/he may be able to manipulate the
error in a way to evade our defense. For example, if the navi-
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    361
MeasurementSoftware sensor423150423150MeasurementSoftware sensorPlanned trajectorygation plan of an RV is extremely simple (e.g., straight-line),
the attacker can estimate the internal GPS reading even after
it is contaminated by the attack through observing the RV’s
velocity and considering the accumulated errors introduced so
far, and accordingly applies the attack continuously until the
goal is reached. One way to defend against this is to avoid any
predictable navigation plan, for example, by proactively ma-
neuvering the RV in a speciﬁc and secret way unknown to the
attacker. Second, our detection mechanism utilizes historical
error changes rather than an instant error. This approach can
limit the stealthy attack. Speciﬁcally, the error between real
and model states are calculated with accumulated deviation
during a certain time duration. This is distinct from a simple
bad-data detector or estimator.
6 Related Work
Our approach is inspired by both traditional hardware and soft-
ware fault-tolerant techniques. The traditional redundancy-
based approach [29] can recover a system when less than
half of the components have a failure. Moreover, hardware
replication requires additional hardware costs. There has been
a lot of work regarding physical attacks on RVs in recent
years. Many external attacks [8, 47, 49, 51, 52, 54] have been
proposedAt the same time, corresponding attack detection
techniques [5, 20, 22, 26, 28, 36, 37, 57] have been proposed.
However, they focus only on attack detection (i.e., signiﬁcant
anomalies) and do not provide a recovery mechanism for
continuous operations. As such, the RV may still crash even
though it detects the attack.
State estimation [39] has been well researched in control
engineering, aiming to improve the accuracy of noisy sensors.