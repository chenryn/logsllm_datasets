**（C3）** HPG通过提出事件注册，调度和依赖关系图（ERDDG）来捕获JavaScript的细微差别，例如基于事件的控制转移。
**（C4）** HPG通过Web环境的快照（例如DOM树）和JavaScript事件的痕迹捕获客户端JavaScript程序的Web执行环境的动态。
**（C5）** JAW可以生成外部库的可重用符号模型，这些模型将在HPG中用作代理。
JAW输入输入要测试的应用程序的种子URL。然后，它使用网络爬虫来访问目标。在访问期间，JAW存储JavaScript和HTML代码，并监视执行情况，以捕获DOM树，HTTP请求，注册的处理程序和触发事件的快照。通过使用用于公共库的已知签名的数据库，JAW可以识别外部库并为每个库生成一个符号模型。符号模型由库的元素（例如函数名称）和一组表征其行为的语义类型之间的映射组成。然后，JAW为每个存储的页面构建HPG，并将HPG与预先生成的语义模型链接。最后，JAW可以查询HPG，以检测或交互式探索客户端CSRF漏洞。
## 0x03 混合属性图
本节介绍混合属性图（HPG）。
HPG由代码表示形式和状态值组成。代码表示统一了JavaScript程序的多个表示，而状态值是在程序执行期间观察到的具体值的集合。使用标记的属性图对二者进行建模，其中节点和边可以具有标签和一组键值属性。以下示例显示了一个图形，其中li是节点标签，rj是关系标签。节点和边可以通过使用属性（键值映射）存储数据。
### A.代码表示
代码表示对JavaScript源代码进行建模，并建立在代码属性图（CPG）概念的基础上，该概念结合了C程序的三种表示形式，即抽象语法树，控制流图和程序依赖图。后来，同样的想法被改用于研究PHP程序，用调用图扩展了CPG。
HPG通过事件注册，分派和依赖关系图以及语义类型进一步扩展了CPG。
**抽象语法树（AST）：**
AST是对程序进行分层分解以对其句法构造进行编码的有序树。在AST中，终端节点代表发送的操作数（例如，标识符），并且非终端节点对应于运算符（例如，分配）。在下图中，AST节点用舍入框表示。终端节点以粗体斜体表示，而非终端节点全为大写字母。
AST边按照语言语法的产生规则将AST节点彼此连接，例如，在Lisitng
1的第10行中，i.addEventListener（'loadInvoice'，h）是具有三个子代的调用表达式（CALL_EXP），成员表达式（MMBR_EXP）i.addEventListener，文字'loadInvoice'和标识符h。
AST节点是代码表示的核心节点，为其余模型提供了构建块。
**控制流程图（CFG）：**
CFG描述了程序指令的执行顺序以及将控制流转移到特定执行路径所需的条件。在上图使用非终端AST节点之间的边（绿色）对CFG进行了建模。
CFG边有两种类型：有条件的（来自谓词，并用true或false标记）和无条件的（用ε标记）。函数的CFG以入口节点开始，以出口节点结束，标记了函数作用域的边界。这些分散的过程内流通过过程间调用边相互连接，如下所述。
**过程间调用图（IPCG）：**
IPCG允许对JavaScript程序进行过程间静态分析。它与程序中的每个调用站点关联可以从该站点调用的功能集。例如，Lisitng
1中第16行的表达式showInvoicePrice（'input'）要求执行第14行的函数showInvoicePrice。将IPCG集成到代码表示中，并带有定向调用边，例如，请参见上图C_EXP
AST节点和F_DECL AST节点。
**程序依赖图（PDG）：** 变量的值取决于一系列语句和谓词，PDG对这些依赖关系进行建模。
PDG的节点是非终端AST节点，边表示数据或控件相关性。数据相关性边指定在源节点上定义的变量x以后将在目标节点上使用，标记为Dx。例如，在上图变量uri在第3行中（由VAR_DECL声明），并在第4行中（在IF_STMT中）使用，因此PDG边（蓝色）将它们连接在一起。控制依赖项边反映了目标语句的执行取决于谓词，并由Ct或Cf标记，该条件对应于真或假条件，例如，第7行中CALL_EXP的执行取决于中的IF_STMT谓词第4行。
**事件注册、调度和依赖性图（ERDDG）：**
ERDDG打算对JavaScript程序的事件驱动执行范例以及事件处理程序之间的细微依赖关系进行建模。在ERDDG中，节点是非终端AST节点，使用三种类型的边对执行和依赖关系进行建模。第一个边对事件的注册进行建模，例如Lisitng
1中的第10行将h注册为自定义事件loadInvoice的处理程序。用节点C_EXP（即addEventListener的调用站点）和节点F_DECL（即定义函数h的语句）之间类型注册的边来表示事件的注册。第二个边模拟事件的分发。例如，Lisitng
1中的第15行调用浏览器API
dispatchEvent来调度loadInvoice事件类型的处理程序的执行。使用类型调度的边对控制转移进行建模。例如，参见上图15行的C_EXP节点与注册处理程序的C_EXP之间的边（红色）。最后一个边对语句和事件之间的依赖关系进行建模。通过处理程序声明的AST节点与处理程序声明的AST节点之间的边实现依赖关系。上图显示了第2行的F_DECL节点和函数主体的边。
**语义类型：** 客户端CSRF的检测需要标识语句，这些语句发送HTTP请求，并使用来自预定义源的数据值。
通过语义类型对语句的属性进行建模，语义类型是分配给程序元素的预定义字符串。
然后，在计算程序之后，将类型传播到整个代码中，例如，可以将类型WIN.LOC分配给window.location，然后将其传播到PDG，CFG，IPCG和ERDDG边之后的其他节点。
在上图中，对于WIN.LOC类型，使用了一个蓝色填充圆，该圆在Duri
PDG边之后传播，即第3、4和5行的uri。语义类型也可以分配给函数以指定其语义行为抽象。
例如，可以对所有允许JavaScript程序发送HTTP请求（例如fetch或XMLHttpRequest）的浏览器API使用字符串REQ。
HPG将语义类型建模为AST节点的属性。
**符号建模：**
在分析程序的源代码时，需要考虑第三方库的行为。从每个库中提取一个符号模型，并将其用作分析应用程序代码的代理。在这项工作中，符号模型是将语义类型分配给库的函数和对象属性。例如，在上图中，可以为asyncRequest术语使用语义类型REQ（用橙色实心圆表示），并提取其实际代码。同样，为了重构使用库函数的程序的数据流，定义了两种语义类型，它们对库函数的过程内输入输出依存关系进行建模。对于输入数据值流向返回值的函数，使用语义类型o←i;对于输出取决于输入值（例如，通过IF_STMT）的函数，使用o〜i类型。库的符号建模由JAW自动执行，JAW在库元素和语义类型列表之间创建映射。
### B.状态值
JavaScript程序具有动态行为，这些行为很难通过静态分析进行分析。因此增强了HPG，以包括在运行时收集的具体数据值，并将它们链接到对应的代码表示形式。
**事件跟踪：**
为了捕获由于静态分析或自动触发事件的局限性而无法建模的一组激发事件，使用事件的动态跟踪来扩充静态模型。事件跟踪是在执行网页期间观察到的一系列具体事件。例如，用于HTTP请求响应的负载事件或网络事件。在可能的情况下，使用在页面加载时触发的事件跟踪来激活ERDDG图中的其他注册边。如上图所示，事件跟踪图的节点表示在运行时观察到的具体事件，而边表示其顺序。
**环境属性：** 环境属性是全局窗口和文档对象的属性。
JavaScript程序的执行路径和变量的值可能会根据环境属性的值而有所不同。通过为动态观察到的特性创建具体值图来丰富HPG，还存储HTML
DOM树的快照。如果变量的值是从DOM API获得的，则可以从树中解析实际值。使用DOM树来定位DOM
API所引用的对象，例如，要确定事件分发是否以处理程序为目标，可以检查分发和注册是否在同一DOM对象上完成。为每个环境属性创建一个节点，并将具体值存储为该节点的属性。如上图所示，通过代表所有权或父子关系的边来连接这些节点。
### C.带有HPG的客户端CSRF分析
给定前文描述的HPG，现在使用它来检测和研究客户端CSRF。说当（i）从攻击者控制的输入到输出HTTP请求req的参数存在数据流，并且（ii）在页面加载时提交req时，JavaScript程序容易受到客户端CSRF的攻击。
使用图遍历对两个条件进行建模，即查询以从HPG中检索信息。在本研究工作中，使用声明性Cypher查询语言定义图遍历，但是在本文中，在保留声明性方法的同时，以集合符号和谓词逻辑来举例说明Cypher语法。查询Q包含HPG的所有节点n，其谓词p（图模式）为true，即Q
=
{n：p（n）}。使用谓词定义节点的属性。例如，使用谓词hasChild（n，c）来表示节点n具有AST子项c。谓词的另一个示例是hasSemType（n，t），它表示语义类型为t的节点n。可以例如通过逻辑运算符来组合谓词以定义更复杂的查询。
**检测客户端CSRF：**