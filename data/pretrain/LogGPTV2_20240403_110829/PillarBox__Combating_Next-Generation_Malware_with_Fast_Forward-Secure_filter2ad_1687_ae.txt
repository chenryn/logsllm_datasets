### Throughput vs. |PBB|, μ
The following graph (Figure 7) illustrates the relationship between throughput and buffer size, with different send periods in milliseconds.

```
Throughput (messages/ms)
120 
100 
80 
60 
40 
20 
0 
0   10   20   30   40   50   60   70   80   90  100 
Send Period (ms)
Fig. 7. Throughput vs. |PBB|, μ
```

### Asynchronous Logging
We tested PillarBox in an asynchronous setting using Snort as the alert generator to detect a remote SSH exploit. Once the attacker gains shell access, they escalate privileges and attempt to shut down PillarBox. Table 3 shows that, on average, all defensive actions (detecting the attack, securing the log in PillarBox, and deleting the stealthy rule) are completed one second before the attacker gains shell access. The high standard deviation (measured over 100 runs) indicates that while the attacker may occasionally learn detection rules, they cannot prevent the securing of the log messages.

**Table 3. Race condition timings (measured from the launch of the attack)**

| Defender Event            | Average (ms) | Std. Dev. (ms) |
|---------------------------|--------------|----------------|
| Attack detected           | 1,645.441    | 1,069.843      |
| Log secured               | 1,645.609    | 1,069.842      |
| Rule deleted              | 1,645.772    | 1,069.840      |

| Attacker Event            | Average (ms) | Std. Dev. (ms) |
|---------------------------|--------------|----------------|
| Remote shell               | 2,692.536    | 1,324.419      |
| Privilege escalation       | 2,696.524    | 1,324.919      |
| Rules copied               | 2,693.474    | 1,324.432      |
| Log file deleted           | 2,696.590    | 1,324.990      |

### Observed Alerting Frequencies
We analyzed a large enterprise dataset (>50,000 users) over a 7-hour period. This dataset includes logs from servers, laptops, network devices, security appliances, and more. The goal was to understand typical alert frequencies during a representative workday. It is important to note that only specific messages, such as indicators of compromise, are selected for inclusion in the PillarBox protected queue. Thus, the data represents an overloaded maximum: most networks will not generate such volumes of alerts, and many alerts will not be applicable to PillarBox.

**Figure 6** shows the distribution of alerts from hosts within the enterprise. The x-axis is in log scale, indicating that most machines send very few alert messages, while a small subset sends the majority. Over a 7-hour window, the busiest machine generated 8,603 alerts, but the average across all machines (59,034 in total) was only 18.3 alerts. Therefore, if we design the system to handle a throughput of one alert per second (3,600 alerts per hour), it will be able to handle even the busiest of alerters. The maximum observed rate in our dataset was 1,707 alerts per hour.

### Throughput Experiments
We demonstrate that PillarBox can process events at a practical rate. Given a constant stream of events, the host-based application was able to process nearly 100,000 messages per second, higher than any rate recorded in our dataset. The speed with which PillarBox encodes messages depends on several factors, including message size, the cost of computing FS-PRNGs, PBB’s size, and the frequency (μ) with which the buffer is re-encrypted and sent. Larger messages naturally take longer to encrypt. The standard log messages generated on our Linux system were typically a few hundred characters long. We note that our hash-chain FS-PRNG required one computation per produced number, minimizing key-generation overhead.

**Figure 7** explores trade-offs between buffer size and send frequency in terms of their impact on maximum throughput. Some combinations of buffer size and send rate led to buffer overflows and were removed. Performance generally increases as buffer size increases and send frequency decreases, as expected. A large buffer that is rarely re-encrypted for sending can process events more quickly than a small, frequently sent buffer. As shown in Figure 7, throughput peaks just below 100 messages per millisecond, further evidence of the minimal overhead of PillarBox.

### Related Work
PillarBox uses host-side buffering to secure alerts for transmission to a remote server. An alternative is a trusted receiver within a protected environment on the host itself, such as a hypervisor or virtual machine monitor (VMM). These have higher privilege than a guest OS, isolating them from OS-level exploits. Hypervisor-based messaging can be combined with stronger security functionality, such as protecting a SAS against corruption or being protected by trusted hardware, as in Terra [7]. Where available, a hypervisor-based approach is an excellent alternative or complement to PillarBox.

However, hypervisor-based approaches have notable limitations. Many hosts and devices today are not virtualized, and some, like embedded devices, may never be. Operating constraints often limit security administrators’ access to hypervisors. For instance, IT administrators may require personal devices in the workplace to contain an enterprise-specific VMM or application but are unlikely to obtain full privileges on such devices. Additionally, hypervisors themselves are vulnerable to compromise, as noted in some works [24, 11].

PillarBox builds on funkspiel schemes, introduced by Håstad et al. [9]. A funkspiel scheme creates a special host-to-server channel whose existence may be known to an adversary, but the adversary cannot tell if or when the channel has been used, similar to stealth in PillarBox. Funkspiel schemes resist adversaries that see all traffic on the channel and ultimately corrupt the sender. However, funkspiel schemes are designed for specific use cases, such as authentication tokens, and are not practical for the arbitrarily long messages on high-bandwidth channels in PillarBox.

Another related technique is forward-secure logging (also called tamper-evident logging), which protects the integrity of log messages on a host after compromise by an adversary. While these systems use forward-secure integrity protection like PillarBox, they are not designed for self-protecting settings. They aim for forensic protection, e.g., to protect against retroactive log modification by an administrator. Some schemes, e.g., [3, 19, 13, 20], create forward security for new events only periodically, not continuously. Additionally, existing forward-secure logging systems do not aim to achieve stealth, unlike PillarBox.

In a different context, the Adeona system [18] uses forward-secure host-side buffering for privacy-preserving location tracking of lost or stolen devices. Adeona caches and periodically uploads location information to a peer-to-peer network. However, Adeona does not offer integrity protection like PillarBox and does not address the complications of high throughput, buffer wraparound, and transmission failures.

### Conclusion
Today’s big data security analytics systems rely on untrustworthy data, collecting and analyzing messages from Security Analytics Sources (SASs) with inadequate integrity protection. By compromising a host and its SAS, a strong attacker can suppress key SAS messages and alerts and gather intelligence about sensitive SAS instrumentation and actions.

PillarBox provides key, missing protections for security analytics systems by securing the messages generated by SASs. Using host-side buffering, PillarBox provides integrity and stealth. PillarBox achieves integrity protection on alert messages even in hostile, self-protecting environments where a host records alerts about an attack in progress while an attacker tries to suppress them. Stealth ensures that SAS messages are invisible to even a strong adversary with network and eventually host control.

Our experiments validate PillarBox's practicality and protective value. We show that PillarBox can "win the race" against an adversary mounting a local privilege escalation attack and disabling PillarBox as fast as possible, securing alert messages about the attack before the attacker can intervene. Our study of alerting rates in a large (50,000+ host) environment and of local host performance confirms the low overhead and real-world deployability of PillarBox. We posit that PillarBox can offer practical, strong protection for many big data security analytics systems in a world of ever bigger data and more sophisticated adversaries.

### Acknowledgments
We thank the anonymous reviewers for their helpful comments and Alina Oprea, Ting-Fang Yen, and Todd S. Leetham for many useful discussions.

### References
[1] Ettercap, http://ettercap.sourceforge.net/
[2] Bellare, M., Namprempre, C.: Authenticated encryption: Relations among notions and analysis of the generic composition paradigm. J. Cryptol. 21, 469–491 (2008)
[3] Bellare, M., Yee, B.: Forward-security in private-key cryptography. In: Joye, M. (ed.) CT-RSA 2003. LNCS, vol. 2612, pp. 1–18. Springer, Heidelberg (2003)
[4] Bowers, K.D., Hart, C., Juels, A., Triandopoulos, N.: PillarBox: Combating next-generation malware with fast forward-secure logging. Cryptology ePrint Archive, Report 2013/625 (2013)
[5] Crosby, S.A., Wallach, D.S.: Efficient data structures for tamper-evident logging. In: USENIX Sec., pp. 317–334 (2009)
[6] Dolev, D., Yao, A.C.: On the security of public key protocols. IEEE Trans. on Inf. Theory 29(2), 198–207 (1983)
[7] Garfinkel, T., Pfaff, B., Chow, J., Rosenblum, M., Boneh, D.: Terra: A virtual machine-based platform for trusted computing. In: SOSP, pp. 193–206 (2003)
[8] Goldwasser, S., Micali, S., Rivest, R.L.: A digital signature scheme secure against adaptive chosen-message attacks. SIAM J. Comput. 17(2), 281–308 (1988)
[9] Håstad, J., Jonsson, J., Juels, A., Yung, M.: Funkspiel schemes: An alternative to conventional tamper resistance. In: CCS, pp. 125–133 (2000)
[10] Itkis, G.: Handbook of Inf. Security, Forward Security: Adaptive Cryptography—Time Evolution. John Wiley & Sons (2006)
[11] Karger, P.A.: Securing virtual machine monitors: what is needed? In: ASIACCS, pp. 1–2 (2009)
[12] Kelsey, J., Callas, J., Clemm, A.: RFC 5848: Signed syslog messages (2010)
[13] Kelsey, J., Schneier, B.: Minimizing bandwidth for remote access to cryptographically protected audit logs. In: RAID, p. 9 (1999)
[14] Ma, D., Tsudik, G.: A new approach to secure logging. Trans. Storage 5(1), 2:1–2:21 (2009)
[15] Mandiant. M-trends: The advanced persistent threat (2010), http://www.mandiant.com
[16] Marson, G.A., Poettering, B.: Practical secure logging: Seekable sequential key generators. In: Crampton, J., Jajodia, S., Mayes, K. (eds.) ESORICS 2013. LNCS, vol. 8134, pp. 111–128. Springer, Heidelberg (2013)
[17] Oltsik, J.: Defining big data security analytics. Networkworld, 1 (April 2013)
[18] Ristenpart, T., Maganis, G., Krishnamurthy, A., Kohno, T.: Privacy-preserving location tracking of lost or stolen devices: Cryptographic techniques and replacing trusted third parties with DHTs. In: USENIX Sec., pp. 275–290 (2008)
[19] Schneier, B., Kelsey, J.: Cryptographic support for secure logs on untrusted machines. In: USENIX Sec., p. 4 (1998)
[20] Schneier, B., Kelsey, J.: Tamperproof audit logs as a forensics tool for intrusion detection systems. Comp. Networks and ISDN Systems (1999)
[21] Shacham, H., Page, M., Pfaff, B., Goh, E.J., Modadugu, N., Boneh, D.: On the Effectiveness of Address-Space Randomization. In: CCS, pp. 298–307 (2004)
[22] Sharif, M.I., Lee, W., Cui, W., Lanzi, A.: Secure in-VM monitoring using hardware virtualization. In: CCS, pp. 477–487 (2009)
[23] Waters, B.R., Balfanz, D., Durfee, G., Smetters, D.K.: Building an encrypted and searchable audit log. In: NDSS (2004)
[24] Chen, Y., Chen, Y., Paxson, V., Katz, R.: What’s new about cloud computing security? Technical Report UCB/EECS-2010-5, UC Berkeley (2010)
[25] Yavuz, A.A., Ning, P.: BAF: An efficient publicly verifiable secure audit logging scheme for distributed systems. In: ACSAC, pp. 219–228 (2009)
[26] Yavuz, A.A., Ning, P., Reiter, M.K.: Efficient, compromise resilient and append-only cryptographic schemes for secure audit logging. In: Keromytis, A.D. (ed.) FC 2012. LNCS, vol. 7397, pp. 148–163. Springer, Heidelberg (2012)