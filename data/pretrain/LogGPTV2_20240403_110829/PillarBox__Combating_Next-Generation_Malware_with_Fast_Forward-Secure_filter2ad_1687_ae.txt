/
g
s
M
(
t
u
p
h
g
u
o
r
h
T
120 
100 
80 
60 
40 
20 
0 
0 
10 
20 
30 
40 
50 
60 
70 
80 
90  100 
Send Period (ms) 
Fig. 7. Throughput vs. |PBB|, μ
(the elevation of privilege giving the attacker full control) can itself often be detected
and secured in PillarBox before such privilege enables disruption of the PillarBox tool.
Asynchronous logging. We have also tested PillarBox in a more asynchronous setting
using Snort as our alert generator to detect a remote SSH exploit. Once the attacker has
shell access it escalates privilege and then shuts down PillarBox. Table 3 shows that in
the average case all of the defenders actions (detecting the attack, securing the log in
PillarBox and deleting the stealthy rule) complete a whole second before the attacker
even gains shell access. The high standard deviation (measured over 100 runs) indicates
that the attacker may be able to learn detection rules on rare occasion (this was never
observed in our experiments), but cannot prevent the securing of the log messages.
Table 3. Race condition timings (measured from the launch of the attack)
Defender Event Attack detected
1,645.441ms
Average
1,069.843ms
Std. Dev.
Attacker Event
Remote shell
2,692.536ms
Average
1,324.419ms
Std. Dev.
Log secured
1,645.609ms
1,069.842ms
Rule deleted
1,645.772ms
1,069.840ms
Privilege escalation Rules copied
2,696.524ms
1,324.919ms
2,693.474ms
1,324.432ms
Log ﬁle deleted
2,696.590ms
1,324.990ms
5.3 Observed Alerting Frequencies
We performed an analysis of a large enterprise (>50,000 users) dataset across a pe-
riod of 7 hours. This dataset contains all collectable logs from this network, including
servers, laptops, network devices, security appliances, and many more. The goal was to
derive information about the typical alert frequency across a representative work day.
It is critical to note that only certain messages pertaining to, e.g., indicators of com-
promise, will be selected for inclusion in the PillarBox protected queue. As such, the
data found here represents an overloaded maximum: It is unlikely that most networks
will generate such volumes of alerts, and most alerts will not be applicable to PillarBox.
Figure 6 shows the distribution of alerts coming from hosts within the enterprise.
The x-axis is in log scale, showing that the majority of machines send very few alert
messages, while a small subset send the majority. Over a 7-hour window, the busiest
machine generated 8603 alerts, but the average across all machines (59,034 in total)
was only 18.3 alerts. Clearly, therefore, if we design the system to handle a throughput
of one alert per second (3600 alerts an hour) our system will be able to handle even the
busiest of alerters. The maximum observed rate in our dataset was 1707 alerts / hour.
64
K.D. Bowers et al.
5.4 Throughput Experiments
We now show that PillarBox can process events at a practical rate. Given a constant
stream of events, the host-based application was able to process nearly 100,000 mes-
sages per second, higher than any rate recorded in our dataset. The speed with which
PillarBox can encode messages naturally depends on a number of factors, e.g., message
size, the cost of computing FS-PRNGs, PBB’s size, and the frequency μ with which the
buffer is re-encrypted and sent. Obviously the larger the messages, the longer they take
to encrypt. The standard log messages generated on our Linux system were typically
a few hundred characters long. We note that our hash-chain FS-PRNG required one
computation per produced number, thus minimizing key-generation overhead.
Figure 7 explores tradeoffs between buffer size and send frequency in terms of their
impact on maximum throughput. Some combinations of buffer size and send rate led
to buffer overﬂows, and were removed. Performance seems to increase as buffer size
increases and send frequency decreases, as expected. A large buffer that is rarely re-
encrypted for sending can process events more quickly that a small, frequently sent
buffer. As Figure 7 shows, throughput seems to top out just shy of 100 messages / ms,
further evidence of the minimal overhead of PillarBox.
6 Related Work
PillarBox uses host-side buffering to secure alerts for transmission to a remote server.
An alternative is a trusted receiver within a protected environment on the host itself. A
hypervisor, or virtual machine monitor (VMM), for instance, has higher privilege than
a guest OS, isolating it from OS-level exploits. Thus, as an alternative to PillarBox,
messages could be sent from a SAS to a same-host hypervisor. Hypervisor-based mes-
saging can be blended with even stronger security functionality in which the hypervi-
sor protects a SAS (or other monitoring software) itself against corruption as in, e.g.,
[22], and/or is itself protected by trusted hardware, as in Terra [7]. Where available, a
hypervisor-based approach is an excellent alternative or complement to PillarBox.
Hypervisor-based approaches, however, have several notable limitations. Many hosts
and devices today are not virtualized and some, e.g., embedded devices, probably will
not be for a long time. Operating constraints often limit security administrators’ access
to hypervisors. For instance, IT administrators may be able to require that personal
devices in the workplace (e.g., laptops, tablets, and smartphones) contain an enterprise-
speciﬁc VMM or application, but they are unlikely to obtain full privileges on such
devices. Finally, hypervisors themselves are vulnerable to compromise: Some works
have noted that the code sizes, privilege levels, and OS-independence of modern VMMs
belie common assertions of superior security over traditional OSes [24, 11].
PillarBox builds in part on funkspiel schemes, introduced by H˚astad et al. [9]. A
funkspiel scheme creates a special host-to-server channel whose existence may be known
to an adversary; but an adversary cannot tell if or when the channel has been used, a prop-
erty similar to stealth in PillarBox. (By implication, an adversary cannot recover message
information from the channel either.) As in our work, a funkspiel scheme resists adver-
saries that see all trafﬁc on the channel and ultimately corrupt the sender.
PillarBox: Combating Next-Generation Malware
65
Funkspiel schemes, though, are designed for a speciﬁc use case: Authentication to-
kens. The transmitter either uses its initialized authentication key or swaps in a new,
random one to indicate an alert condition. A funkspiel scheme thus transmits only a
single, one-bit message (“swap” or “no swap”), and is not practical for the arbitrarily
long messages on high-bandwidth channels in PillarBox.
Another closely related technique is forward-secure logging (also called tamper-
evident logging), which protects the integrity of log messages on a host after com-
promise by an adversary (see, e.g., [5, 3, 14, 23, 19, 25, 26, 13, 20, 16]). As already
discussed, while these systems use forward-secure integrity protection like PillarBox,
they are not designed for self-protecting settings like PillarBox. They aim instead for
forensic protection, e.g., to protect against retroactive log modiﬁcation by an admin-
istrator. Some schemes, e.g., [3, 19, 13, 20], are designed to “close” a log, i.e., create
forward security for new events, only periodically, not continuously. Additionally, ex-
isting forward-secure logging systems do not aim, like PillarBox, to achieve stealth.
Finally, in a different context than ours, the Adeona system [18] uses forward-secure
host-side buffering in order to achieve privacy-preserving location tracking of lost or
stolen devices. Adeona uses cryptographic techniques much like those in PillarBox to
cache and periodically upload location information to a peer-to-peer network. Adeona
does not offer integrity protection like PillarBox, nor does it address the complications
of high throughput, buffer wraparound, and transmission failures in our setting.
7 Conclusion
Today’s big data security analytics systems rely on untrustworthy data: They collect and
analyze messages from Security Analytics Sources (SASs) with inadequate integrity
protection and are vulnerable to adversarial corruption. By compromising a host and its
SAS, a strong attacker can suppress key SAS messages and alerts. An attacker can also
gather intelligence about sensitive SAS instrumentation and actions (potentially even
just via trafﬁc analysis).
We have introduced PillarBox, a new tool that provides key, missing protections for
security analytics systems by securing the messages generated by SASs. Using the ap-
proach of host-side buffering, PillarBox provides the two properties of integrity and
stealth. PillarBox achieves integrity protection on alert messages even in the worst
case: hostile, self-protecting environments where a host records alerts about an attack
in progress while an attacker tries to suppress them. Stealth, an optional property in
PillarBox, ensures that at rest or in transit, a SAS message is invisible to even a strong
adversary with network and eventually host control.
Our experiments with PillarBox validate its practicality and protective value. We
show, e.g., that PillarBox can “win the race” against an adversary mounting a local
privilege escalation attack and disabling PillarBox as fast as possible: PillarBox secures
alert messages about the attack before the attacker can intervene. Our study of alerting
rates in a large (50,000+ host) environment and of local host performance conﬁrms
the low overhead and real-world deployability of PillarBox. We posit that PillarBox
can offer practical, strong protection for many big data security analytics systems in a
world of ever bigger data and more sophisticated adversaries.
66
K.D. Bowers et al.
Acknowledgments. We thank the anonymous reviewers for their helpful comments,
and also Alina Oprea, Ting-Fang Yen and Todd S. Leetham for many useful discussions.
References
[1] Ettercap, http://ettercap.sourceforge.net/
[2] Bellare, M., Namprempre, C.: Authenticated encryption: Relations among notions and
analysis of the generic composition paradigm. J. Cryptol. 21, 469–491 (2008)
[3] Bellare, M., Yee, B.: Forward-security in private-key cryptography. In: Joye, M. (ed.) CT-
RSA 2003. LNCS, vol. 2612, pp. 1–18. Springer, Heidelberg (2003)
[4] Bowers, K.D., Hart, C., Juels, A., Triandopoulos, N.: PillarBox: Combating next-generation
malware with fast forward-secure logging. Cryptology ePrint Archive, Report 2013/625
(2013)
[5] Crosby, S.A., Wallach, D.S.: Efﬁcient data structures for tamper-evident logging. In:
USENIX Sec., pp. 317–334 (2009)
[6] Dolev, D., Yao, A.C.: On the security of public key protocols. IEEE Trans. on Inf. The-
ory 29(2), 198–207 (1983)
[7] Garﬁnkel, T., Pfaff, B., Chow, J., Rosenblum, M., Boneh, D.: Terra: A virtual machine-
based platform for trusted computing. In: SOSP, pp. 193–206 (2003)
[8] Goldwasser, S., Micali, S., Rivest, R.L.: A digital signature scheme secure against adaptive
chosen-message attacks. SIAM J. Comput. 17(2), 281–308 (1988)
[9] H˚astad, J., Jonsson, J., Juels, A., Yung, M.: Funkspiel schemes: An alternative to conven-
tional tamper resistance. In: CCS, pp. 125–133 (2000)
[10] Itkis, G.: Handbook of Inf. Security, Forward Security: Adaptive Cryptography—Time
Evolution. John Wiley & Sons (2006)
[11] Karger, P.A.: Securing virtual machine monitors: what is needed? In: ASIACCS, pp. 1–2
(2009)
[12] Kelsey, J., Callas, J., Clemm, A.: RFC 5848: Signed syslog messages (2010)
[13] Kelsey, J., Schneier, B.: Minimizing bandwidth for remote access to cryptographically pro-
tected audit logs. In: RAID, p. 9 (1999)
[14] Ma, D., Tsudik, G.: A new approach to secure logging. Trans. Storage 5(1), 2:1–2:21 (2009)
[15] Mandiant. M-trends: The advanced persistent threat (2010),
http://www.mandiant.com
[16] Marson, G.A., Poettering, B.: Practical secure logging: Seekable sequential key genera-
tors. In: Crampton, J., Jajodia, S., Mayes, K. (eds.) ESORICS 2013. LNCS, vol. 8134, pp.
111–128. Springer, Heidelberg (2013)
[17] Oltsik, J.: Deﬁning big data security analytics. Networkworld, 1 (April 2013)
[18] Ristenpart, T., Maganis, G., Krishnamurthy, A., Kohno, T.: Privacy-preserving location
tracking of lost or stolen devices: Cryptographic techniques and replacing trusted third
parties with DHTs. In: USENIX Sec., pp. 275–290 (2008)
[19] Schneier, B., Kelsey, J.: Cryptographic support for secure logs on untrusted machines. In:
USENIX Sec., p. 4 (1998)
[20] Schneier, B., Kelsey, J.: Tamperproof audit logs as a forensics tool for intrusion detection
systems. Comp. Networks and ISDN Systems (1999)
[21] Shacham, H., Page, M., Pfaff, B., Goh, E.J., Modadugu, N., Boneh, D.: On the Effectiveness
of Address-Space Randomization. In: CCS, pp. 298–307 (2004)
[22] Sharif, M.I., Lee, W., Cui, W., Lanzi, A.: Secure in-VM monitoring using hardware virtu-
alization. In: CCS, pp. 477–487 (2009)
PillarBox: Combating Next-Generation Malware
67
[23] Waters, B.R., Balfanz, D., Durfee, G., Smetters, D.K.: Building an encrypted and search-
able audit log. In: NDSS (2004)
[24] Chen, Y., Chen, Y., Paxson, V., Katz, R.: What’s new about cloud computing security?
Technical Report UCB/EECS-2010-5, UC Berkeley (2010)
[25] Yavuz, A.A., Ning, P.: BAF: An efﬁcient publicly veriﬁable secure audit logging scheme
for distributed systems. In: ACSAC, pp. 219–228 (2009)
[26] Yavuz, A.A., Ning, P., Reiter, M.K.: Efﬁcient, compromise resilient and append-only cryp-
tographic schemes for secure audit logging. In: Keromytis, A.D. (ed.) FC 2012. LNCS,
vol. 7397, pp. 148–163. Springer, Heidelberg (2012)