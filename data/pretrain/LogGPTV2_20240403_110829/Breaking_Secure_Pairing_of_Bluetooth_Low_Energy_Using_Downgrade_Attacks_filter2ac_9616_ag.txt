### 7.3 Linux

Linux devices use BlueZ [21] as the Bluetooth stack for BLE (Bluetooth Low Energy) communication. We will discuss the security flaws in the official BlueZ programming framework, which is based on Python and C:

1. **Flaw 1: Inability to Specify a Secure Association Method**
   - For pairing, an application can register a pairing agent using the Python function `RegisterAgent(agent, capability)`, where `agent` is an instance of `org.bluez.Agent1` and `capability` is the I/O capability of the Linux initiator.
   - Once registered, a Linux device calls the Python function `Pair()` to initiate pairing. Alternatively, a customized agent written in C can handle the pairing process.
   - Similar to other operating systems, the association method under Linux is determined by the I/O capability of the peer device and the configured I/O capability of the initiator. Therefore, Linux devices are subject to this flaw.

2. **Flaw 2: Lack of Mechanism to Enforce or Timely Obtain the Negotiated Association Method**
   - There is no mechanism to enforce a specified association method or for an application to timely obtain the negotiated association method.
   - If a fake device pairs with the victim Linux computer using "Just Works," the Linux device may use a customized pairing agent to modify the C function `bluez_agent_method_call(.)` and learn the adopted association method only after pairing. The default pairing agent does not provide this capability.

3. **Flaw 3: Error Handling**
   - When errors occur, a Linux device tears down the connection and notifies the application, similar to Windows. Therefore, Linux does not have this flaw.

4. **Flaw 4: Bond Removal**
   - A Linux device can remove a bond via the `RemoveDevice(.)` function, so it does not have this flaw.

### Possible Attacks Against Linux Devices

As discussed in §7.2, although an application has two options for processing errors, they are equivalent. Therefore, when errors occur, the application chooses to re-pair. 

- With the default pairing agent, a Linux initiator is vulnerable to Attacks I, II, and III.
- With a customized pairing agent, the application can determine the adopted association method after pairing and may tear down the connection if the method is not the intended one, thereby avoiding false data injection and sensitive information theft.
- Since Linux cannot promptly detect "Just Works," the IRK (Identity Resolving Key) stealing attack remains effective if a Linux device uses IRK to prevent tracking for privacy.

To attack the peer device of a Linux device, an attacker can easily implement a fake initiator since Linux does not use IRK by default. If Linux programmatically adopts IRK, the attacker can use the IRK stealing attack to obtain the MAC address of the initiator. All attacks described in §4.4.2 can be deployed, except eavesdropping, which does not work for the same reason under macOS.

### 8. Lessons Learned

**Standardization Process:**
- Bluetooth has been subject to various attacks, and a more rigorous standardization process could enhance its security and privacy.
- During our study, we found the specification to be confusing and inconsistent across chapters, as also noted by our partner TI. This confusion leads to different vendors implementing BLE protocols in diverse ways, such as error handling, IRK use, and interaction between applications and the BLE stack.
- A standardization process similar to RFC (Request for Comments) for Internet standards would help in protocol verification.

**Secure Framework for Pairing:**
- BLE has a suite of protocols addressing different aspects of this wireless personal area network technology. Our paper focuses on pairing.
- Defeating other attacks, such as co-located attacks, requires additional remedies [11, 12, 26]. These remedies often assume that the communication is secure during the initial configuration, which may not be true without proper pairing.
- Both initiators and peer devices should have the option to use the Secure Connections Only (SCO) mode to achieve mutual authentication. This mode requires support in all four stages of the pairing process.
- In this paper, we have addressed the SCO mode at initiators and found that some vendors do not correctly implement this mode at the peer device, as discussed in §6.3. Correct implementation of the SCO mode at both initiators and peer devices can defeat the attacks presented in this paper.

### 9. Related Work

**Vulnerabilities in Bluetooth:**
- Bluetooth before Simple Secure Pairing (SSP) was insecure [27, 28], and SSP itself is vulnerable. For example, Haataja et al. [5] proposed MITM attacks against SSP in Bluetooth Classic in 2010.
- The latest BLE introduces the Secure Connections Only mode to mitigate these attacks. Our work focuses on this mode.
- Mike Ryan [29] built a BLE sniffer over Ubertooth and demonstrated that Passkey Entry for LE legacy connections is not secure. His tool, crackle, can target BLE 4.0 and 4.1. Our paper addresses the latest BLE 4.2 and 5.x, which are considered secure against his attacks.
- Rosa [30] and Zegeye et al. [31] extended Ryan's work, and Dazhi Sun et al. [32] proposed a method to break Passkey Entry when the passkey is reused. However, BLE recommends using a random passkey in each pairing session.
- Antonioli et al. [33] identified authentication vulnerabilities in Bluetooth Classic and can downgrade the Secure Connections protocol to Legacy Secure Connections.

**Bluetooth Attacks on Mobiles:**
- Jasek et al. [34] studied attacks between a Bluetooth smart device and its mobile app, focusing on BLE 4.0 and 4.1, which do not have the Secure Connections Only mode.
- Many works reverse-engineer specific products [35–37] and exploit faulty app protocols, while we focus on operating system-level and programming framework issues.
- For example, Britt Cyr et al. [35] performed a security analysis of wearable fitness devices, and Zhang et al. [36] analyzed commands from popular smart wristbands, presenting replay and MITM attacks.
- BlueBorne [38] explored faulty BLE implementations, but our attacks are not based on those issues.
- William et al. [39] and Melamed et al. [40] studied spoofing and MITM attacks between a Bluetooth smart device and its mobile app, presenting software and hardware-based attacks but not addressing secure association methods.
- Fawaz et al. [41] collected and analyzed advertisement packets from 214 BLE devices, finding privacy leaks due to poor design and implementation.
- Other works [11, 13, 26, 12] addressed Bluetooth security but not pairing. Zuo et al. [42] fingerprinted vulnerable IoT devices using UUIDs.

### 10. Conclusion

BLE 4.2 and 5.x introduce the Secure Connections Only (SCO) mode to enforce secure pairing methods like Passkey Entry and Numerical Comparison. However, the BLE specification does not explicitly require initiating devices to support the SCO mode, creating potential security vulnerabilities for both mobiles and their peer BLE devices.

In this paper, we systematically investigated Android's BLE programming framework and discovered four design flaws. We then presented a suite of downgrade attacks and case studies exploiting these flaws. To defend against these attacks, we patched Android to enforce secure pairing. We also explored other major OSes, including iOS, macOS, Windows, and Linux, and found similar security issues. All OSes need to adopt the SCO mode at the initiators. We conducted extensive experiments to validate the identified attacks and proposed defense measures. For mission-critical BLE systems, the SCO mode should be enforced on both initiators and responders.

### Acknowledgements

We thank shepherd Nils Ole Tippenhauer and the anonymous reviewers for their insightful comments. This research was supported in part by US Natural Science Foundation (NSF) Awards 1931871 and 1915780, Semiconductor Research Corporation (2018-TS-2860), National Natural Science Foundation of China (Grant Nos. U1736203, 61877029). Any opinions, findings, conclusions, and recommendations in this paper are those of the authors and do not necessarily reflect the views of the funding agencies.

### References

[References listed as provided in the original text]

---

This version of the text is more structured, clear, and professional, with improved readability and coherence.