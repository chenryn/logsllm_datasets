of this practice is equivalent to option (i). This is why Ta-
ble 7 only shows option (i). To attack the peer device of a
Windows device, an attacker can easily implement the fake
initiator since Windows does not use IRK. All the attacks
in §4.4.2 can be deployed except eavesdropping, which does
not work for the same reason under macOS.
7.3 Linux
Linux device uses BlueZ [21] as the Bluetooth stack for
BLE communication. We use the ofﬁcial BlueZ program-
ming framework, which is based on Python and C, to dis-
cuss its ﬂaws: (i) Flaw 1. Linux devices can not specify a
secure association method. For the purpose of pairing, an
application can register a pairing agent via a Python func-
tion RegisterAgent(agent, capability), where agent
is an instance of pairing agent org.bluez.Agent1 and ca-
pability is the I/O capability of the Linux initiator. Once reg-
istered, a Linux device calls a Python function Pair() to
initiate pairing. Other than the default pairing agent, a cus-
tomized agent written in C can also be programmed to han-
dle the pairing process. Similar to other OSes, under Linux
the association method is determined by the I/O capability
of the peer device and the conﬁgured I/O capability of the
initiator. Therefore, Linux devices are subject to Flaw 1. (ii)
Flaw 2. There is no mechanism to enforce a speciﬁed as-
sociation method or for an application to timely obtain the
negotiated association method. If a fake device pairs with
the victim Linux computer using Just Works, Linux may use
a customized Linux pairing agent, modify the C function
bluez_agent_method_call(.) and learn the adopted as-
sociation method only after pairing while the default pairing
agent does not provide this capability. (iii) Flaw 3. Since a
Linux device tears down the connection and notiﬁes the ap-
plication when errors occur as Windows behaves, it does not
have Flaw 3. (iv) Flaw 4. A Linux device is able to remove
a bond via RemoveDevice(.) and has no Flaw 4.
We now present possible attacks against Linux devices.
As discussed in §7.2, although an application has two op-
tions of processing errors, we argue they are equivalent.
Therefore, when errors occur, the application chooses re-
pairing. With the default pairing agent, a Linux initiator is
subject to Attacks I, II and III. With a customized pairing
agent, since the application can know the adopted associa-
tion method after pairing, the application may tear down the
connection if the association method is not the intended one
to avoid false data injection and sensitive information steal-
ing attacks. Since Linux cannot know Just Works timely, the
IRK stealing attack still works if a Linux device employs
IRK to prevent tracking for privacy.
To attack the peer device of a Linux device, an attacker can
easily implement the fake initiator since Linux does not use
IRK by default. If Linux programmatically adopts IRK, the
attacker can use the IRK stealing attack to obtain the MAC
address of the initiator. All the attacks in §4.4.2 can then be
deployed except eavesdropping, which does not work for the
same reason under macOS.
8 Lessons Learned
Standardization process. Bluetooth has been subject to
varieties of attacks and a more rigid standardization process
may help security and privacy of Bluetooth including BLE.
During our study of the speciﬁcation, we ﬁnd it is often con-
fusing and not consistent across chapters as our partner TI
ﬁnds too. The confusion may lead to the fact that different
vendors implement BLE protocols in quite different ways,
for example, for error handling, IRK use and interaction be-
tween an application and the BLE stack. A similar standard-
ization process to RFC (request for comments) for Internet
standards would help protocol veriﬁcation.
Secure framework for pairing. BLE has a suite of pro-
tocols addressing different aspects of this wireless personal
area network technology. Our paper focuses on pairing. De-
feating other attacks such as co-located attacks requires extra
remedies [11, 12, 26]. These remedies often rely on the as-
sumption that the communication is secure the ﬁrst time the
user conﬁgures the mobile and device, which can share a se-
cret to protect later communication at the application layer.
However, the assumption may not be true without proper
pairing. We believe both initiators and peer devices shall
have the option of the Secure Connections Only mode so
that we can achieve mutual authentication between an initia-
tor and its peer device. This SCO mode requires the support
in the four stages of the pairing process. In this paper, we
have carefully addressed the SCO mode at initiators. We
also ﬁnd some vendors do not correctly implement the SCO
mode at the peer device as discussed in §6.3. Correct imple-
mentation of this mode at initiators and peer devices will be
able to defeat attacks presented in this paper.
9 Related Work
Vulnerabilities in Bluetooth. Bluetooth before the Sim-
ple Secure Pairing (SSP) is not secure [27, 28] and is out of
the scope of this paper. The Simple Secure Pairing is also
vulnerable. For example, Haataja et al. [5] proposed MITM
attacks against SSP of Bluetooth Classic in 2010. They as-
sumed that the victim devices use only I/O capabilities to
52    29th USENIX Security Symposium
USENIX Association
determine the association method and the attacking devices
can pair with victim devices using Just Works. The latest
BLE introduces the Secure Connections Only mode to defeat
those attacks. Our work focuses on the Secure Connections
Only mode.
Mike Ryan [29] built a BLE sniffer over Ubertooth and
demonstrated that the Passkey Entry for LE legacy connec-
tions is not secure. His tool crackle can crack such connec-
tions and target BLE 4.0 and 4.1. Our paper addresses the
latest BLE 4.2 and 5.x, which are considered secure against
his attacks. The work by Rosa [30] is similar to Mike Ryan’s
work. Zegeye et al. cracked the BLE temporary key used
in the pairing process by using a brute-force attack [31],
which also extends the attack in [29]. Dazhi Sun et al. [32]
proposed a method that can break Passkey Entry when the
passkey is reused. The similar problem was also discussed
in [4]. However, reusing a passkey is not recommended
in BLE, which requires a random passkey shall be used in
each pairing session with Passkey Entry. We assume a ran-
dom passkey in this paper. Antonioli et al. [33] identiﬁed
Bluetooth Classic speciﬁcation authentication vulnerabilities
and can downgrade the Secure Connections protocol into the
Legacy Secure Connections protocol.
Bluetooth attacks on mobiles. Jasek et al. [34] studied
possible attacks between a Bluetooth smart device and its
mobile app. However, they study BLE 4.0 and 4.1, which
do not have the Secure Connections Only mode for BLE.
They attacked Passkey Entry with Mike Ryan’s approach
[29]. Many works reverse engineer particular products [35–
37] and exploit faulty app protocols while we focus on the
operating system level and programming framework issues.
For example, Britt Cyr et al. performed a security analysis
of wearable ﬁtness devices [35]. They reverse engineered
the devices, BLE communication trafﬁc, and app, and used
Mike Ryan’s attacks against pairing. Zhang et al. analyzed
the commands from four popular smart wristbands by sniff-
ing packets without reverse engineering the apps [36], and
presented replay and MITM attacks against those particular
wristbands. BlueBorne [38] explored faulty BLE implemen-
tations. our attacks are not based on those issues. William et
al. [39] and Melamed et al. [40] studied the spooﬁng attack
and MITM attack between a Bluetooth smart device and its
mobile app. They presented software based and hardware
based attacks, but did not address how to attack two paired
devices with a secure association method. Fawaz et al. [41]
collected and analyzed the advertisement packets from 214
BLE devices and found that the poor design and implemen-
tation of BLE advertisements may lead to privacy leaks. We
address pairing security in this paper. Muhammad Naveed et
al. [11], Xu et al. [13] , Zhang et al. [26] and Sivakumaran et
al. [12] also addressed Bluetooth security but not on pairing.
Zuo et al. [42] ﬁngerprint via UUIDs vulnerable IoT devices
that use insecure pairing.
10 Conclusion
BLE 4.2 and 5.x have an SCO mode to enforce secure
pairing such as Passkey Entry and Numerical Comparison
for BLE devices. However, the BLE speciﬁcation does not
explicitly require an initiating device such as a mobile to sup-
port the SCO mode. This creates potential security vulner-
abilities against both mobiles and their peer BLE devices.
In this paper, we have systematically investigated Android’s
BLE programming framework and discovered four design
ﬂaws. We then present a suite of downgrade attacks and case
studies exploiting these design ﬂaws. To defend against these
attacks, we patch Android to enforce secure pairing. We also
explored other major OSes including iOS, macOS, Windows
and Linux, and found all OSes have similar security issues
and they all need to adopt the SCO mode at the initiators. We
have performed extensive experiments to validate the identi-
ﬁed attacks and proposed defense measures. We believe for
mission critical BLE systems, the SCO mode shall be en-
forced on both initiators and responders.
Acknowledgements
We thank shepherd Nils Ole Tippenhauer as well as the
anonymous reviewers for their insightful comments. This
research was supported in part by US Natural Science Foun-
dation (NSF) Awards 1931871 and 1915780, Semiconduc-
tor Research Corporation (2018-TS-2860), National Natu-
ral Science Foundation of China (Grant Nos. U1736203,
61877029). Any opinions, ﬁndings, conclusions, and rec-
ommendations in this paper are those of the authors and do
not necessarily reﬂect the views of the funding agencies.
References
[1] Bluetooth Special Interest Group (Bluetooth SIG), “Bluetooth Core
Speciﬁcation (V 4.2),” Speciﬁcation of the Bluetooth System, 2014.
[2] ——, “Bluetooth Core Speciﬁcation (V 5.1),” Speciﬁcation of the
Bluetooth System, 2019.
[3] Bluetooth Wireless Forum (SILICON LABS),
“MITM
tack on ’Just Works’ Pairing,” 2017, Available at
//www.silabs.com/community/wireless/bluetooth/forum.topic.ht
ml/mitm_attack_on_just-OoG9 [Accessed: Apr, 2020].
At-
https:
[4] P. Sivakumaran and J. B. Alís, “A Low Energy Proﬁle: Analysing
Characteristic Security on BLE Peripherals,” in Proceedings of the
2018 Eighth ACM Conference on Data and Application Security and
Privacy, 2018, pp. 152–154.
[5] K. Haataja and P. J. Toivanen, “Two practical Man-in-the-Middle
Attacks on Bluetooth Secure Simple Pairing and Countermeasures,”
IEEE Trans. Wireless Communications, vol. 9, no. 1, pp. 384–392,
2010.
[6] Google, “Android Open Source Project (AOSP),” 2020, Available at
https://source.android.com/ [Accessed: Apr, 2020].
[7] Texas Instruments Product Security Incident Response Team (TI-
PSIRT), “SIMPLELINK-CC13X2-26X2-SDK,” 2019, Available at
http://www.ti.com/tool/download/SIMPLELINK-CC13X2-26X2-S
DK [Accessed: Apr, 2020].
USENIX Association
29th USENIX Security Symposium    53
[8] Bluetooth Special Interest Group (Bluetooth SIG), “Bluetooth Core
Speciﬁcation (V 4.2) - Secure Connections Only Mode, Vol 3, Part
C, Page 373,” Speciﬁcation of the Bluetooth System, 2014.
[24] ——, “IOBluetoothDevicePair(Pairing API for Bluetooth Classic) ,”
2020, Available at https://developer.apple.com/documentation/ioblue
tooth/iobluetoothdevicepair [Accessed: Apr, 2020].
[9] L. Li, T. F. Bissyandé, D. Octeau, and J. Klein, “Reﬂection-
aware Static Analysis of Android Apps,” in Proceedings of the 31st
IEEE/ACM International Conference on Automated Software Engi-
neering, 2016, pp. 756–761.
[10] Android Development Guide, “ Restrictions on Non-SDK Interfaces,”
2020, Available at https://developer.android.com/about/versions/pie/r
estrictions-non-sdk-interfaces [Accessed: Apr, 2020].
[11] M. Naveed, X. Zhou, S. Demetriou, X. Wang, and C. A. Gunter, “In-
side Job: Understanding and Mitigating the Threat of External Device
Mis-Binding on Android,” in Proceedings of the 21st Annual Network
and Distributed System Security Symposium, 2014.
[12] P. Sivakumaran and J. Blasco, “A Study of the Feasibility of Co-
located App Attacks against BLE and a Large-Scale Analysis of the
Current Application-Layer Security Landscape,” in Proceedings of the
28th USENIX Security Symposium, 2019, pp. 1–18.
[13] F. Xu, W. Diao, Z. Li, J. Chen, and K. Zhang, “BadBluetooth: Break-
ing Android Security Mechanisms via Malicious Bluetooth Periph-
erals,” in Proceedings of the 26th Annual Network and Distributed
System Security Symposium, 2019.
[14] Android Development Guide,
to Hardware
Identiﬁer),”
cess
//developer.android.com/about/versions/marshmallow/android-6.
0-changes#behavior-hardware-id [Accessed: Apr, 2020].
2016, Available
at
“Android
6.0
Changes
(Ac-
https:
[15] Adafruit Inc., “Bluefruit LE sniffer,” 2018, Available at https://www.
adafruit.com/product/2269 [Accessed: Apr, 2020].
[16] Texas Instruments, “SimpleLink Bluetooth Low Energy CC2640R2F
wireless MCU LaunchPad development kit,” 2019, Available at http:
//www.ti.com/tool/LAUNCHXL-CC2640R2 [Accessed: Apr, 2020].
[17] K. Allix, T. F. Bissyandé, J. Klein, and Y. Le Traon, “Androzoo: Col-
lecting Millions of Android Apps for The Research Community,” in
Proceedings of the IEEE/ACM 13th Working Conference on Mining
Software Repositories, 2016, pp. 468–471.
[18] R. Vallée-Rai, E. Gagnon, L. J. Hendren, P. Lam, P. Pominville, and
V. Sundaresan, “Optimizing Java Bytecode Using the Soot Frame-
work: Is It Feasible?” in Proceedings of the 9th International Con-
ference on Compiler Construction, 2000, pp. 18–34.
[19] HID WG, “Input Boot Keyboard Report Characteristic Requires No
Authentication Permission (Page 17),” HID Service Speciﬁcation 1.0,
2011.
[20] S. Hopwood, “How Many Mobile Apps are Actually Used?” 2017,
Available at https://www.apptentive.com/blog/2017/06/22/how-man
y-mobile-apps-are-actually-used/ [Accessed: Apr, 2020].
[21] BlueZ, “BLE Stack for Linux (BlueZ),” 2008, Available at https:
//git.kernel.org/pub/scm/bluetooth/bluez.git/tree/doc [Accessed: Apr,
2020].
[22] Apple Inc., “Accessory Design Guidelines for Apple Devices) ,”
2019, Available at https://developer.apple.com/accessories/Accessor
y-Design-Guidelines.pdf [Accessed: Apr, 2020].
[23] ——, “Core Bluetooth (API for Bluetooth Smart),” 2020, Available at
https://developer.apple.com/documentation/corebluetooth [Accessed:
Apr, 2020].
[25] Microsoft Inc., “Universal Windows Platform Documentation,” 2020,
Available at https://docs.microsoft.com/en-us/windows/uwp/get-start
ed/universal-application-platform-guide [Accessed: Apr, 2020].
[26] Z. Yue, W. Jian, L. Zhen, P. Bryan, and F. Xinwen, “BLESS: A BLE
Application Security Scanning Framework,” in Proceedings of 2020
IEEE International Conference on Computer Communications, 2020.
[27] A. Becker and I. C. Paar, “Bluetooth Security & Hacks,” Ruhr-
Universität Bochum, 2007.
[28] D. Kügler, “‘Man-In-The-Middle’ Attacks on Bluetooth,” in Proceed-
ings of the 7th International Conference on Financial Cryptography,
2003, pp. 149–161.
[29] M. Ryan, “Bluetooth: With Low Energy Comes Low Security,” in
Proceedings of the 7th USENIX Workshop on Offensive Technologies,
2013.
[30] T. Rosa, “Bypassing Passkey Authentication in Bluetooth Low En-
ergy.” IACR Cryptology ePrint Archive, vol. 2013, p. 309, 2013.
[31] W. K. Zegeye, “Exploiting Bluetooth Low Energy Pairing Vulnerabil-
ity in Telemedicine,” in Proceedings of the 2015 International Teleme-
tering Conference, 2015.
[32] D.-Z. Sun, Y. Mu, and W. Susilo, “Man-in-the-Middle Attacks on Se-
cure Simple Pairing in Bluetooth Standard V5.0 and Its countermea-
sure,” Personal and Ubiquitous Computing, vol. 22, no. 1, pp. 55–67,
2018.
[33] D. Antonioli, N. Tippenhauer, and K. Rasmussen, “BIAS: Bluetooth
Impersonation AttackS,” in Proceedings of the 2020 IEEE Symposium
on Security and Privacy, 2020, pp. 1539–1552.
[34] S. Jasek, “Gattacking Bluetooth Smart Devices,” in Proceedings of the
Black Hat USA Conference, 2016.
[35] B. Cyr, W. Horn, D. Miao, and M. Specter, “Security Analysis of
Wearable Fitness Devices (Fitbit),” Massachusets Institute of Technol-
ogy, p. 1, 2014.
[36] Q. Zhang and Z. Liang, “Security Analysis of Bluetooth Low Energy
Based Smart Wristbands,” in Proceedings of the 2nd Frontiers of Sen-
sors Technologies International Conference, 2017, pp. 421–425.
[37] A. K. Das, P. H. Pathak, C.-N. Chuah, and P. Mohapatra, “Uncovering
Privacy Leakage in BLE Network Trafﬁc of Wearable Fitness Track-
ers,” in Proceedings of the 17th International Workshop on Mobile
Computing Systems and Applications. ACM, 2016, pp. 99–104.
[38] ARMIS, “The Attack Vector ’BlueBorne’ Exposes Almost Every
Connected Device,” https://armis.com/blueborne/, 2017.
[39] W. Oliff, A. Filippoupolitis, and G. Loukas, “Evaluating the Impact
of Malicious Spooﬁng Attacks on Bluetooth Low Energy based Occu-
pancy Detection Systems,” in Proceedings of the 2017 Software Engi-
neering Research, Management and Applications, 2017, pp. 379–385.
[40] T. Melamed, “An Active Man-in-the-middle Attack On Bluetooth
Smart Devices,” Safety and Security Studies, p. 15, 2018.
[41] K. Fawaz, K. Kim, and K. G. Shin, “Protecting Privacy of BLE De-
vice Users,” in Proceedings of the 25th USENIX Security Symposium,
2016, pp. 1205–1221.
[42] C. Zuo, H. Wen, Z. Lin, and Y. Zhang, “Automatic Fingerprinting of
Vulnerable BLE IoT Devices with Static UUIDs from Mobile Apps,”
in Proceedings of the 2019 ACM SIGSAC Conference on Computer
and Communications Security (CCS), 2019, p. 1469–1483.
54    29th USENIX Security Symposium
USENIX Association