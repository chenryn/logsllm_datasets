without affecting liveness tolerance.
Thus, in this paper, we set qlck = qulck = qr and qunq = qcmt =
qc. Since replicas use qr votes to lock, these votes can always be
used by the learners to commit qcmt quorums. Thus, qc ≥ qr .
The Flexible Byzantine Quorum requirements collapse into the
following two conditions.
Flexible quorum intersection. The fraction of faulty replicas is
Flexible quorum availability. The fraction of Byzantine replicas
 k). We say two blocks Bl and B′
l′ equivocate
one another if they are not equal and do not extend one another.
Certificates and certified blocks. In the protocol, replicas vote
v (Bk) to denote a set of
for blocks by signing them. We use Cqr
signatures on hk = H(Bk) by qr replicas in view v. qr is a parameter
v (Bk) a certificate for Bk
fixed for the protocol instance. We call Cqr
from view v. Certified blocks are ranked first by the views in which
they are certified and then by their heights. In other words, a block
Bk certified in view v is ranked higher than a block Bk′ certified in
view v′ if either (i) v > v′ or (ii) v = v′ and k > k′.
Locked blocks. At any time, a replica locks the highest certified
block to its knowledge. During the protocol execution, each replica
keeps track of all signatures for all blocks and keeps updating its
locked block. Looking ahead, the notion of locked block will be
used to guard the safety of a learner commit.
5.2 Replica Protocol
The replica protocol progresses in a view-by-view fashion. Each
view has a designated leader who is responsible for driving con-
sensus on a sequence of blocks. Leaders can be chosen statically,
e.g., round robin, or randomly using more sophisticated tech-
niques [10, 31]. In our description, we assume a round robin selec-
tion of leaders, i.e., (v mod n) is the leader of view v.
At a high level, the protocol does the following: The leader pro-
poses a block to all replicas. The replicas vote on it if safe to do
so. The block becomes certified once qr replicas vote on it. The
leader will then propose another block extending the previous one,
chaining blocks one after another at increasing heights. Unlike
regular consensus protocols where replicas determine when a block
is committed, in Flexible BFT, replicas only certify blocks while
committing is offloaded to the learners. If at any time replicas detect
malicious leader behavior or lack of progress in a view, they blame
the leader and engage in a view change protocol to replace the
leader and move to the next view. The new leader collects a status
from different replicas and continues to propose blocks based on
this status. We explain the steady state and view change protocols
in more detail below.
Steady state protocol. The steady state protocol is described in
Figure 2. In the steady state, there is a unique leader who, in an
iteration, proposes a block, waits for votes from qr replicas and
moves to the next iteration. In the steady state, an honest leader
always extends the previous block it proposed. Immediately after a
view change, since the previous leaders could have been Byzantine
and may have proposed equivocating blocks, the new leader needs
to determine a safe block to propose. It does so by collecting a status
of locked blocks from qr replicas denoted by S (described in the
view change protocol).
For a replica R in the steady state, on receiving a proposal for
block Bk, a replica votes for it if it extends the previous proposed
block in the view or if it extends the highest certified block in
S. Replica R can potentially receive blocks out of order and thus
receive Bk before its ancestor blocks. In this case, replica R waits
until it receives the ancestor blocks, verifies the validity of those
blocks and Bk before voting for Bk. In addition, replica R records
the following to aid a learner commit:
- Number of votes. It records the number of votes received
for Bk in view v as qBk ,v. Observe that votes are broadcast
Session 5B: ProtocolsCCS ’19, November 11–15, 2019, London, United Kingdom1046Let v be the current view number and replica L be the leader in this view. Perform the following steps in an iteration.
(1) Propose.
▷ Executed by the leader of view v
v′ (Bk−1),S⟩L. Here, Bk := (bk , hk−1) is the newly proposed block and it should extend the
The leader L broadcasts ⟨propose, Bk , v, Cqr
highest certified block known to L. In the steady state, an honest leader L would extend the previous block it proposed, in which case
v′ = v and S = ⊥. Immediately after a view change, L determines the highest certified block from the status S received during the
view change.
(2) Vote.
▷ Executed by all replicas
v′ (Bk−1),S⟩L from the leader L, R broadcasts the proposal and a vote
When a replica R receives a valid proposal ⟨propose, Bk , v, Cqr
⟨vote, Bk , v⟩R if (i) the proposal is the first one in view v, and it extends the highest certified block in S, or (ii) the proposal extends the
last proposed block in the view.
In addition, replica R records the following based on the messages it receives.
- R keeps track of the number of votes received for this block in this view as qBk ,v.
- If block Bk−1 has been proposed in view v, R marks Bk−1 as a locked block and records the locked time as t-lockk−1,v.
- If a block equivocating Bk−1 is proposed by L in view v (possibly received through a vote), R records the time t-equivk−1,v at which
the equivocating block is received.
The replica then enters the next iteration. If the replica observes no progress or equivocating blocks in the same view v, it stops voting
in view v and sends ⟨blame, v⟩r message to all replicas.
Figure 2: Flexible BFT steady state protocol.
by all replicas and the number of votes for a block can be
greater than qr . qBk ,v will be updated each time the replica
hears about a new vote in view v.
- Lock time. If Bk−1 was proposed in the same view v, it locks
Bk−1 and records the locked time as t-lockk−1,v.
- Equivocation time. If the replica ever observes an equiv-
ocating block at height k in view v through a proposal or
vote, it stores the time of equivocation as t-equivk ,v.
Looking ahead, the locked time t-lockk−1,v and equivocation time
t-equivk−1,v will be used by learners with synchrony assumptions
to commit, and the number of votes qBk ,v will be used by learners
with partial-synchrony assumptions to commit.
Leader monitoring. If a replica detects a lack of progress in view
v or observes malicious leader behavior such as more than one
height-k blocks in the same view, it blames the leader of view v by
broadcasting a ⟨blame, v⟩ message. It quits view v and stops voting
and broadcasting blocks in view v. To determine lack of progress,
the replicas may simply guess a time bound for message arrival or
use increasing timeouts for each view [11].
View change. The view change protocol is described in Figure 3.
If a replica gathers qr ⟨blame, v⟩ messages from distinct replicas,
it forwards them to all other replicas and enters a new view v + 1
(Step (i)). It records the time at which it received the blame certificate
as t-viewchangev. Upon entering a new view, a replica reports to
the leader of the new view L′ its locked block and transitions to the
steady state (Step (ii)). qr status messages form the status S. The
first block L′ proposes in the new view should extend the highest
certified block among these qr status messages.
5.3 Learner Commit Rules
As mentioned in the introduction, Flexible BFT supports learners
with different assumptions. Learners in Flexible BFT learn the state
of the protocol from the replicas and based on their own assump-
tions determine whether a block has been committed. Broadly, we
supports two types of learners: those who believe in synchrony and
those who believe in partial synchrony.
5.3.1 Learners with Partial-Synchrony Assumptions (CR1). A
learner with partial-synchrony assumptions deduces whether a
block has been committed by based on the number of votes received
by a block. A block Bl (together with its ancestors) is committed
with parameter qc iff Bl and its immediate successor both receive
≥ qc votes in the same view.
Safety of CR1. A CR1 commit based on qc votes is safe against
< qc + qr − 1 faulty replicas (Byzantine plus a-b-c). Observe that if
Bl gets qc votes in view v, due to flexible quorum intersection, a
conflicting block cannot be certified in view v, unless ≥ qc + qr − 1
replicas are faulty. Moreover, Bl +1 extending Bl has also received
qc votes in view v. Thus, qc replicas lock block Bl in view v. In
subsequent views, honest replicas that have locked Bl will only vote
for a block that equals or extends Bl unless they unlock. However,
due to flexible quorum intersection, they will not unlock unless
≥ qc + qr − 1 replicas are faulty. Proof of Lemma 1 formalizes this
argument.
5.3.2 Learners with Synchrony Assumptions (CR2). Intuitively, a
CR2 commit involves qr replicas collectively stating that no “bad
event” happens within “sufficient time” in a view. Here, a bad event
refers to either leader equivocation or view change (the latter indi-
cates sufficient replicas believe leader is faulty) and the “sufficient
time” is 2∆; where ∆ is a synchrony bound chosen by the learner.
Session 5B: ProtocolsCCS ’19, November 11–15, 2019, London, United Kingdom1047Let L and L′ be the leaders of views v and v + 1, respectively.
(i) New-view. Upon gathering qr ⟨blame, v⟩ messages, broadcast them and enter view v + 1. Record the time as t-viewchangev.
(ii) Status. Suppose Bj is the block locked by the replica. Send a status of its locked block to the leader L′ using ⟨status, v, Bj , Cqr
and transition to the steady state. Here, v′ is the view in which Bj was certified.
v′ (Bj)⟩
Figure 3: Flexible BFT view change protocol.
v (Bl +1) exist where Bl +1 extends Bl and Bk (if l = k, Bl = Bk).
(CR1) Partially-synchronous commit. A block Bk is committed under the partially synchronous rule with parameter qc iff there exist
l ≥ k and v such that
v (Bl) and Cqr
(a) Cqr
(b) qBl ,v ≥ qc and qBl +1,v ≥ qc.
(CR2) Synchronous commit. A block Bk is committed assuming ∆−synchrony iff the following holds for qr replicas. There exist l ≥ k
and v (possibly different across replicas) such that,
(a) Cqr
(b) An undisturbed-2∆ period is observed after Bl +1 is obtained, i.e., no equivocating block or view change of view v were observed before
v (Bl) exists where Bl extends Bk (if l = k, Bl = Bk).
2∆ time after Bl +1 was obtained, i.e.,
min(current-time, t-equivl ,v , t-viewchangev) − t-lockl ,v ≥ 2∆
Figure 4: Flexible BFT commit rules
More formally, a replica states that a synchronous commit for block
Bk for a given parameter ∆ (set by a learner) is satisfied iff the
following holds. There exists Bl +1 that extends Bl and Bk, and the
replica observes an undisturbed-2∆ period after obtaining Bl +1 dur-
ing which (i) no equivocating block is observed, and (ii) no blame
certificate/view change certificate for view v was obtained, i.e.,
min(current-time, t-equivl ,v , t-viewchangev) − t-lockl ,v ≥ 2∆
where t-equivl ,v denotes the time equivocation for Bl in view v
was observed (∞ if no equivocation), t-viewchangev denotes the
time at which view change happened from view v to v + 1 (∞ if no
view change has happened yet), and t-lockl ,v denotes the time at
which Bl was locked (or Bl +1 was proposed) in view v. Note that
the learner does not require the qr fraction of replicas to report the
same height l or view v.
Safety of CR2. A learner believing in synchrony assumes that all
messages between replicas arrive within ∆ time after they were sent.
If the learner’s chosen ∆ is a correct upper bound on message delay,
then a CR2 commit is safe against qr faulty replicas (Byzantine plus
a-b-c), as we explain below. If less than qr replicas are faulty, at least
one honest replica reported an undisturbed-2∆ period. Let us call
this honest replica h and analyze the situation from h’s perspective
to explain why an undisturbed 2∆ period ensures safety. Observe
that replicas in Flexible BFT forward the proposal when voting.