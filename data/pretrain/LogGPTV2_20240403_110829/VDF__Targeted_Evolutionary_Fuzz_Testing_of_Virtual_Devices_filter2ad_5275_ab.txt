from potentially exercising memory locations unrelated to the virtual device
under test. If a test case causes a crash or hang, the test case is logged to disk.
Finally, in the third step, each of the collected crash and hang test cases is
reduced to a minimal test case capable of reproducing the bug. Both a minimized
VDF: Targeted Evolutionary Fuzz Testing of Virtual Devices
11
test case and source code to reproduce the bug are generated. The minimization
of test cases is described further in Sect. 3.5.
3.3 Virtual Device Record and Replay
Fuzzing virtual devices is diﬃcult because they are stateful. It is necessary to
traverse an arbitrarily large number of states within both the virtual device
and the remainder of the hypervisor prior to reaching a desired state within the
virtual device. Because each virtual device must be initialized to a known good
start state prior to each test, VDF uses record and replay of previous virtual
device activity to prepare the device for test and then perform the test itself.
First, VDF records any guest reads or writes made to the virtual device’s
control registers when the device is initialized during guest OS boot4. This cap-
tures the setup performed by the BIOS (such as PCI BAR conﬁguration), device
driver initialization in the kernel, and any guest userspace process interaction
with the device’s kernel driver. Table 1 shows the diﬀerent sources of initializa-
tion activity used by VDF when recording device activity during our testing.
Table 1. QEMU virtual devices seed data sources.
Device class Device
Seed data source
Audio
Block
Char
IDE
Network
AC97
CS4231a
ES1370
Intel-HDA
SoundBlaster 16
Floppy
Parallel
Serial
Linux guest boot with ALSA [1] speaker-test
qtest test case
Linux guest boot with directed console output
IDE Core
qtest test case
EEPro100 (i82550) Linux guest boot with ping of IP address
E1000 (82544GC)
NE2000 (PCI)
PCNET (PCI)
RTL8139
qtest test case
SD Card
SD HCI
Linux guest boot with mounted SDHCI volume
TPM
TPM
Linux guest boot with TrouSerS test suite [16]
Watchdog
IB700
16300ESB
qtest test case
Linux guest boot
4 If only a minimal amount of recorded activity is required, VDF can capture initial-
ization activity via executing a QEMU qtest test case.
12
A. Henderson et al.
Second, the recorded startup activity is partitioned into two sets: an init set
and a seed set. The init set contains any seed input required to initialize the
device for testing, such as PCI BAR setup, and the activity in this set will never
be mutated by the fuzzer. VDF plays back the init set at the start of each test
to return the device to a known, repeatable state. The seed set contains the seed
input that will be mutated by the fuzzer. It can be any read/write sequence
that exercises the device, and it usually originates from user space activity that
exercises the device (playing an audio ﬁle, pinging an IP address, etc.).
Even with no guest OS booted or present, a replay of these two sets returns
the virtual device to the same state that it was in immediately after the reg-
ister activity was originally recorded. While the data in the sets could include
timestamps to ensure that the replay occurs at the correct time intervals, VDF
does not do this. Instead, VDF takes the simpler approach of advancing the vir-
tual clock one microsecond for each read or write performed. The diﬃculty with
including timestamps within the seed input is that the value of the timestamp is
too easily mutated into very long virtual delays between events. While it is true
that some virtual device branches may only be reachable when a larger virtual
time interval has passed (such as interrupts that are raised when a device has
completed performing some physical event), our observation is that performing
a ﬁxed increment of virtual time on each read or write is a reasonable approach.
Event Record Format. VDF event records contain three ﬁelds: a header
ﬁeld, base oﬀset ﬁeld, and data written ﬁeld. This format captures all data
needed to replay an MMIO event and represents this information in a compact
format requiring only 3–8 bytes per event. The compactness of each record is
an important factor because using a smaller record size decreases the number of
bits that can potentially be mutated.
The header is a single byte that captures whether the event is a read or write
event, the size of the event (1, 2, or 4 bytes), and which virtual device register
bank the event takes place in. The base oﬀset ﬁeld is one to three bytes in size
and holds the oﬀset from the base address. The size of this ﬁeld will vary from
device to device, as some devices have small register bank ranges (requiring only
one byte to represent an oﬀset into the register bank) and other devices map
much larger register banks and device RAM address ranges (requiring two or
three bytes to specify an oﬀset). The data ﬁeld is one or four bytes in size and
holds the data written to a memory location when the header ﬁeld speciﬁes a
write operation. Some devices, such as the ﬂoppy disk controller and the serial
port, only accept single byte writes. Most devices accept writes of 1, 2, or 4
bytes, requiring a 4 byte ﬁeld for those devices to represent the data. For read
operations, the data ﬁeld is ignored.
While VDF’s record and replay of MMIO activity captures the interaction
of the guest environment with virtual devices, some devices may make use of
interrupts and DMA. However, we argue that such hardware events are not
necessary to recreate the behavior of most devices for fuzz testing. Interrupts
are typically produced by a virtual device, rather than consumed, to alert the
guest environment that some hardware event has completed. Typically, another
VDF: Targeted Evolutionary Fuzz Testing of Virtual Devices
13
read or write event would be initiated by the guest in reaction to an interrupt, but
since we record all this read/write activity, the guest’s response to the interrupt
is captured without explicitly capturing the interrupt.
DMA events copy data between guest and device RAM. DMA copies typically
occur when buﬀers of data must be copied and the CPU isn’t needed to copy
this data byte-by-byte. Our observation is that if we are only copying data to
be processed, it is not actually necessary to place legitimate data at the correct
location within guest RAM and then copy it into the virtual device. It is enough
to say that the data has been copied and then move onto the next event. While
the size of data and alignment of the data may have some impact on the behavior
of the virtual device, such details are outside the scope of this paper.
Recording Virtual Device Activity. Almost every interaction between the
guest environment and virtual devices occurs via virtual device callback func-
tions. These functions are registered with QEMU’s MMU and are triggered by
MMIO activity from the guest. Such callback functions are an ideal location to
record the virtual device’s activity. Rather than attempt to capture the usage of
each device by reconstructing the semantics of the guest’s kernel and memory
space, we capture device activity at the point of the hardware interface that
is provided to software. In fact, we have no immediate need to understand the
details of the guest environment as the virtual devices execute at a level above
that of even the guest’s BIOS or kernel. By placing recording logic in these
callback functions, VDF is able to instrument each virtual device by manually
adding only 3–5 LOC of recording logic to each MMIO callback function.
Playback of Virtual Device Activity. Once VDF has recorded a stream of
read/write events for a virtual device, it must replay these events within the con-
text of a running QEMU. Because QEMU traverses a large number of branches
before all virtual devices are instantiated and testing can proceed, it isn’t possi-
ble to provide the event data to QEMU via the command line. The events must
originate from within the guest environment in the form of memory read/write
activity. Therefore, QEMU must be initialized before performing event replay.
QEMU provides qtest, which is a lightweight framework for testing virtual
devices. qtest is a QEMU accelerator, or type of execution engine. Common
accelerators for QEMU are TCG (for the usage of QEMU TCG IR) and KVM
(for using the host kernel’s KVM for hardware accelerated execution of guest
CPU instructions). The qtest framework works by using a test driver process
to spawn a separate QEMU process which uses the qtest accelerator. The qtest
accelerator within QEMU communicates with the test driver process via IPC.
The test driver remotely controls QEMU’s qtest accelerator to perform guest
memory read/write instructions to virtual devices exposed via MMIO. Once the
test is complete, the test driver terminates the QEMU process.
While the qtest accelerator is convenient, it is inadequate for fuzz testing for
two reasons. First, the throughput and timing of the test is slowed because of
QEMU start-up and the serialization, deserialization, and transfer time of the
14
A. Henderson et al.
IPC protocol. Commands are sent between the test driver and QEMU as plain-
text messages, requiring time to parse each string. While this is not a concern
for the virtual clock of QEMU, wall clock-related issues (such as thread race
conditions) are less likely to be exposed.
Second, qtest does not provide control over QEMU beyond spawning the new
QEMU instance and sending control messages. It is unable to determine exactly
where a hung QEMU process has become stuck. A hung QEMU also hangs the
qtest test driver process, as the test driver will continue to wait for input from the
non-responsive QEMU. If QEMU crashes, qtest will respond with the feedback
that the test failed. Reproducing the test which triggers the crash may repeat
the crash, but the analyst still has to attach a debugger to the spawned QEMU
instance prior to the crash to understand the crash.
VDF seeks to automate the discovery of any combination of virtual device
MMIO activity that triggers a hang or crash in either the virtual device or some
portion of the hypervisor. qtest excels at running known-good, hard-coded tests
on QEMU virtual devices for repeatable regression testing. But, it becomes less
useful when searching for unknown vulnerabilities, which requires automatically
generating new test cases that cover as many execution paths as possible.
To address these shortcomings, we have developed a new fuzzer QEMU accel-
erator, based upon qtest, for VDF’s event playback. This new accelerator adds
approximately 850 LOC to the QEMU codebase. It combines the functionality of
the qtest test driver process and the qtest accelerator within QEMU, eliminating
the need for a separate test driver process and the IPC between QEMU and the
test driver. More importantly, it allows VDF to directly replay read/write events
as if the event came directly from within a complete guest environment.
3.4 Selective Branch Instrumentation
Fuzz testing must explore as many branches of interest as possible, so determin-
ing the coverage of those branches during testing is a metric for measuring the
thoroughness of each testing session. While the code within any branch may host
a particular bug, execution of the branch must be performed to trigger the bug.
Thus, reaching more branches of interest increases the chances that a bug will be
discovered. However, if the fuzzer attempts to explore every branch it discovers,
it can potentially waste millions of tests exploring uninteresting branches.
To address this issue, VDF leverages the instrumentation capabilities of
AFL to selectively place instrumentation in only the branches of interest (those
belonging to a virtual device). By default, the compiler toolchain supplied with
AFL instruments programs built using it. VDF modiﬁes AFL to selectively
instrument only code of interest within the target program. A special compile-
time option has been added to AFL’s toolchain, and only branches in source ﬁles
compiled with this ﬂag are instrumented. Other ﬁles will have uninstrumented
branches that are ignored by the fuzzer as they are seen as (very long) basic
blocks of instructions that occur between instrumented branches.
Prior to the start of each testing session, VDF dumps and examines all func-
tion and label symbols found in the instrumented hypervisor. If a symbol is
VDF: Targeted Evolutionary Fuzz Testing of Virtual Devices
15
found that maps to an instrumented branch belonging to the current virtual
device under test, the name, address, and AFL branch ID (embedded in the
symbol name) of the symbol are stored and mapped to the symbol’s location
in the fuzz bitmap. At any point during testing, the AFL fuzz bitmap can be
dumped using VDF to provide ground truth of exactly which branches have been
covered.
static void voice_set_active (AC97LinkState *s, int bm_index, int on) {
switch (bm_index) {
case PI_INDEX:
AUD_set_active_in (s->voice_pi, on);
break;
case PO_INDEX:
AUD_set_active_out (s->voice_po, on);
break;
case MC_INDEX:
AUD_set_active_in (s->voice_mc, on);
break;
default:
AUD_log ("ac97",
"invalid bm_index(%d) in voice_set_active",
bm_index);
break;
}
}
ID: COVERED: ADDRESS: SYMBOL:
--- -------- -------- -------
00c COVER
00d COVER
00e COVER
00f UNCOVER
LINE:
-----
002e92e0 voice_set_active
296
002e9324 REF_LABEL__tmp_ccBGk9PX_s__27_39 296
002e9368 REF_LABEL__tmp_ccBGk9PX_s__28_40 296
002e93a4 REF_LABEL__tmp_ccBGk9PX_s__29_41 296
Fig. 4. A sample of the branch coverage data for the AC97 virtual device.
Figure 4 shows an example of the coverage information report that VDF
provides. This example shows both the original source code for a function in the
AC97 audio virtual device (top) and the generated branch coverage report for
that function (bottom). The report provides two pieces of important information.
The ﬁrst is the ground truth of which branches are instrumented, including their
address within the binary, the symbol associated with the branch (inserted by
the modiﬁed AFL), and the original source ﬁle line number where the branch’s
code is located. The second is whether a particular branch has been visited yet.
The four branches listed in the report are associated with the four cases in the
switch statement of the voice set active() function, which is located on line
296 in the source ﬁle. An analyst familiar with the internals of the AC97 virtual
device could review this report and then devise new seed inputs to trigger any
unexplored branches. Thus, such reports are useful for not only an understanding
of which branches have been reached, but they also providing insight into how
unexplored virtual device branches might be reached.
3.5 Creation of Minimal Test Cases
Once VDF detects either a crash or a hang in a virtual device, the test case that
produced the issue is saved for later examination. This test case may contain a
16
A. Henderson et al.
large amount of test data that is not needed to reproduce the discovered issue,
so it is desirable to reduce this test case to the absolute minimum number of
records needed to still trigger the bug. Such a minimal test case simpliﬁes the
job of the analyst when using the test case to debug the underlying cause.
AFL provides a test case minimization utility called afl-tmin. afl-tmin
seeks to make the test case input smaller while still following the same path of
execution through the binary. Unfortunately, this will not be useful for reducing
the test cases recorded by VDF, which is only interested in reaching the state
in which a crash/hang occurs. It has no interest in reaching every state in the
test case, but only the states necessary to reach the crash/hang state. Therefore,
VDF performs a three-step test case post-processing, seen in Fig. 5, to produce
a minimal test case which passes through a minimimal number of states from
any test case shown to reproduce an issue.
Fig. 5. The test case minimization process.
First, the test case ﬁle is read into memory and any valid test records in the
test case are placed into an ordered dataset in the order in which they appear
within the test case. Because the fuzzer lacks semantic understanding of the
ﬁelds within these records, it produces many records via mutation that contain
invalid garbage data. Such invalid records may contain an invalid header ﬁeld,
describe a base oﬀset to a register outside of the register bank for the device,
or simply be a truncated record at the end of the test case. After this ﬁltering
step, only valid test records remain.
VDF: Targeted Evolutionary Fuzz Testing of Virtual Devices
17
Second, VDF eliminates all records in the dataset that are located after the
point in the test case where the issue is triggered. To do this, it generates a
new test case using all but the last record of the dataset and then attempts to
trigger the issue using this truncated test case. If the issue is still triggered, the
last record is then removed from the dataset and another new truncated test
case is generated in the same fashion. This process is repeated until a truncated
test case is created that no longer triggers the issue, indicating that all dataset
records located after the issue being triggered are now removed.
Third, VDF eliminates any remaining records in the dataset that are not
necessary to trigger the issue. Beginning with the ﬁrst record in the dataset,
VDF iterates through each dataset record, generating a new test case using all
but the current record. It then attempts to trigger the issue using this generated
test case. If the issue is still triggered, the current record is not needed to trigger
the issue and is removed from the dataset. Once each dataset record has been
visited and the unnecessary records removed, the dataset is written out to disk
as the ﬁnal, minimized test case. In addition, source code is generated that is
suitable for reproducing the minimized dataset as a qtest testcase.
While simple, VDF’s test case minimization is very eﬀective. The 1014 crash
and hang test cases produced by the fuzzer during our testing have an average
size of 2563.5 bytes each. After reducing these test cases to a minimal state,
the average test case size becomes only 476 bytes, a mere 18.57% of the original
test case size. On average, each minimal test case is able to trigger an issue by
performing approximately 13 read/write operations. This average is misleadingly