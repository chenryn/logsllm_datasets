Altogether, this gives us total 10000 BCUBE nodes. Running
one BCUBE node on the ﬁrst PC allows us to directly measure
the total network trafﬁc on the Ethernet interface of that PC
in every second, using the Linux bandwidth monitoring tool
bmon. Our measurement results in Appendix IV conﬁrm that
a BCUBE node (even with the maximum degree of 42) indeed
never uses more than 20Mbps bandwidth.
We construct the overlay topology in a similar way as in
[11], [33]: Each node A keeps choosing random nodes to
establish (undirected) edges to, until it manages to establish
20 edges. To prevent A from forming edges to the other nodes
on the same machine as A and hence bypassing the network,
the random nodes are chosen from all the nodes on the other
machines. To avoid having too many neighbors, each node
stops accepting new edges after it has accepted 22 edges from
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:36:30 UTC from IEEE Xplore.  Restrictions apply. 
111273
Fig. 4: End-to-end performance of BCUBE.
other nodes. Hence the node degrees range from 20 to 42, with
the average being 40. We set δ1 = 10s, δ2 = 2s, and δ = 12s.
We assume that all edges are good in our experiments. While
we do not explicitly emulate wide-area message propagation
delay, we expect such delay to be typically well below our δ1
value of 10 seconds. (The messages in our experiments always
have size no larger than 10KB.) We observe that with the
above construction, the honest subgraph typically has diameter
of no more than 6 (even if we uniformly randomly choose 0.7
fraction of the nodes to be malicious). Hence we assume d = 6
in our experiments.
We consider f ranging from 0.4 to 0.7. Since BCUBE
focuses on malicious majority, we do not consider smaller f
values. Recall that larger s (i.e., number of fragments) gives
higher throughput but longer conﬁrmation latency. To strike
a balance, our experiments always use s = 800. To achieve
an error probability  ≤ 2−30, and following Theorem 3, we
use m = 35, 45, 55, and 80, for f = 0.4, 0.5, 0.6, and 0.7,
respectively. We use a block size of 2MB in BCUBE, and an
inter-block time of roughly 68, 74, 81, and 98 seconds for
f = 0.4, 0.5, 0.6, and 0.7, respectively. These parameters
are chosen such that based on the analysis in Appendix II,
each node consumes no more than about 90% of its 20Mbps
available bandwidth (even in the very worst-case). Note that
here we use the exact version of the analysis in Appendix II,
without applying any approximation such as Y ≈ wl
s .
End-to-end performance. Figure 4 plots BCUBE’s transac-
tion throughput and conﬁrmation latency. As expected, the
conﬁrmation latency increases with f, since larger f entails
a larger committee size (m) and in turn more rounds in
OVERLAYBB. Similarly, the transaction throughput decreases
with larger f since as each invocation of OVERLAYBB takes
longer to ﬁnish, we need to correspondingly increase the
inter-block time. This then decreases throughput. Nevertheless,
even when f = 0.7, BCUBE still achieves a throughput of
about 163Kbps and a conﬁrmation latency of less than 6
hours. As explained in Section I where we used Bitcoin as
a reference point, such performance is already “practically
usable”: Bitcoin entails a conﬁrmation latency of about 9.3
hours to achieve  ≤ 2−30 under f = 0.25, and Bitcoin’s
throughput is about 14Kbps.
Compare with state-of-the-art design. There has been rather
limited amount of prior work on designing blockchains for
tolerating f ≥ 0.5. The current state-of-the-art approach is via
Fig. 5: Comparison of our protocol BCUBE and the state-of-
the-art Chan et al.’s protocol [6].
Chan et al.’s protocol [6]. Strictly speaking, Chan et al.’s proto-
col is a byzantine broadcast protocol, instead of a blockchain.
But one could use Chan et al.’s protocol as the core to build
a blockchain, in the same way as we use OVERLAYBB to
build BCUBE. To enable a direct comparison, we take BCUBE,
and then replace OVERLAYBB with Chan et al.’s protocol (as
described in Section III), to obtain a blockchain based on their
protocol. We use our own implementation of their protocol,
since their work does not have implementation. Section IV-A
explained that when running on multi-hop topologies, Chan et
al.’s protocol would require inﬁnite bandwidth if a malicious
broadcaster keeps injecting conﬂicting messages. Our experi-
ments for their protocol explicitly assume away this particular
adversarial behavior — doing so only makes the results for
their protocol better.
Due to space constraints, we only present our results on
Chan et al.’s protocol for f = 0.7. Speciﬁcally, we measure the
throughput/latency of Chan et al.’s protocol (i.e., the resulting
blockchain), under the same setting as our BCUBE, such as
12-second round duration, same topology, around 98-second
inter-block time, and a committee size of 80. We also use
pipelined invocations for Chan et al.’s protocol, in the same
way as we do in our protocol. We set the block size to be
such that in all cases (including all adversarial strategies and
randomness), the bandwidth consumed by each node is no
more than 90% of the 20Mbps available bandwidth, which
is the same constraint we imposed in the experiments of our
BCUBE. Under such a constraint, the maximum block size we
can use in the experiments for Chan et al.’s protocol is about
5.5KB.
Figure 5 compares the performance of our protocol and
Chan et al.’s protocol, as observed in our experiments. Chan
et al.’s protocol achieves a throughput of about 0.45Kbps,
while BCUBE achieves about 163Kbps, which is over 350
times higher. Such large improvement primarily comes from
the fact that BCUBE/OVERLAYBB breaks each block into
s − 1 = 799 fragments and can delay the forwarding of
individual fragments whenever needed, to avoid congestion
in any given round. With some over-simpliﬁcation, Chan et
al.’s protocol can be viewed as having only a single fragment.
This is also why their protocol can only use 5.5KB block size,
while we can support 2MB block size.
Using many fragments in BCUBE does increase the latency:
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:36:30 UTC from IEEE Xplore.  Restrictions apply. 
121274
162.8Kbps5.87hours02468101214050100150200250300latency (hour)throughput (Kbps)throughput(Kbps)latency(hour)f = 0.4f = 0.5f = 0.6f = 0.7162.76Kbps40.6016.033.830.45Kbps5.87hours3.873.473.273.20hours024681012050100150200latency (hour)throughput (Kbps)throughput(Kbps)latency(hour)Chan et.al’sProtocols = 800BCUBEs = 200BCUBEs = 80BCUBEs = 20BCUBEChan et al.’s protocol has a latency of 3.20 hours, while ours
is 5.87 hours. To gain more insights, Figure 5 further presents
the performance of BCUBE when using fewer fragments, with
s = 200, s = 80, and s = 20. In particular, with s = 20
fragments, our latency is 3.27 hours, which is only 2.2% larger
than their latency. Yet with s = 20, we still achieve more than
850% of the throughput of their protocol, and can support
block size of about 47KB. Hence even if BCUBE is forced
to provide almost the same latency as Chan et al.’s protocol,
BCUBE still provides signiﬁcantly higher throughput.
IX. RELATED WORKS
Byzantine broadcast. Being a classic distributed computing
problem, byzantine broadcast has been extensively studied. We
will only focus on byzantine broadcast protocols [6], [8], [9],
[14], [25], [31], [32] that can tolerate f ≥ 1
2. Most of these are
actually theoretical designs without implementation. Section I
and III already discussed [6], [8], [31]. The protocols from [9],
[14], [25] all require direct point-to-point communication on
a clique, and hence does not work for multi-hop topologies.
Furthermore, these protocols are designed for a permissioned
setting with a ﬁxed set of n nodes. The following neverthe-
less still reviews the techniques used in [9], [14], [25], and
characterizes their TTB ratios.
takes total at
Hirt and Raykov’s protocol [14] breaks the object into n
fragments, each with l
n size, to optimize for communication
complexity. For each fragment and each node, they invoke
a smaller black-box byzantine broadcast protocol, resulting
in total n2 sequential
invocations. Doing so enables later
invocations to beneﬁt from information collected during earlier
invocations. The protocol
least n2 rounds.
In some rounds, a node needs to send one fragment (i.e.,
n bits). Hence the maximum l the protocol can support,
l
given B available bandwidth, is l0 = Bδn. We thus have
T ≤ l0
n. Ganesh and
Patra’s protocol [9] improves upon [14], and reduces the time
complexity to about n rounds. In [9], some rounds are used
for propagating the fragments. In each such round, a node may
need to send its fragment to up to n nodes, incurring n× l
n = l
bits of communication. Hence the maximum l the protocol can
support, given B available bandwidth, is l0 = Bδ. We thus
have T ≤ l0
n. In comparison to
[9], [14], OVERLAYBB also breaks an object into fragments,
but for a different purpose of improving throughput. Because
of this, most issues in OVERLAYBB such as delaying and
compensation are not relevant to [9], [14].
n and R = T/B ≤ 1
B
n and R = T/B ≤ 1
B
Bδn
n2δ =
n2δ =
nδ =
Nayak et al.’s protocol [25] further improves the communi-
cation complexity of [9]. In their protocol, instead of sending
the object to all other nodes directly, a node uses erasure
coding and sends one fragment to each of the n nodes. The
n nodes will then each forward its received fragment to all
n, and hence a
other nodes. Each fragment has size at least
node needs to send at least n· l
n = l bits in some rounds. The
maximum l the protocol can support is then l0 = Bδ. Their
protocol has total f n + 1 rounds. This leads to T ≤
l0
l
(f n+1)δ
dδ /B = Θ( 1
Bδ
w . In turn, R = T/B = l0
f n. Their idea of using erasure coding is
and R = T/B < 1
largely orthogonal to the techniques in OVERLAYBB.
Finally, Wan et al. [32] recently propose a constant-round
byzantine broadcast protocol for tolerating f ≥ 1
2. When
adapted to our multi-hop setting, their protocol takes at least
d rounds and in each round, a node may need to send the l-bit
object to its w neighbors. Hence the maximum l the protocol
dw ).
can support is l0 =
In comparison, our OVERLAYBB has R = Θ( 1
w ). More
importantly, their protocol further needs each node to send up
to n2 bits or more (for additional protocol information) to each
of its w neighbors. Hence their protocol achieves R = Θ( 1
dw )
only when l reaches the order of wn2, which translates to
about 500MB under our experimental parameters. The block
size in blockchains is typically much smaller than 500MB.
Blockchains. Most existing blockchains (e.g., [1], [3], [7],
2.
[11], [16], [19], [21], [33], [35]) today can only tolerate f < 1
By leveraging the “reputation” of the nodes, RepuCoin [34]
can tolerate temporary malicious majority — namely, tempo-
rary spikes in f (but not f ≥ 1
2 in general). While blockchains
can be built from byzantine broadcast, and hence tolerate
f ≥ 1
2, this fact has been largely neglected in the literature.
Pass and Shi [26] mention the design of a blockchain based
on the Dolev-Strong protocol [8] for byzantine broadcast.
As explained in Section I, using the Dolev-Strong protocol
will result in rather low throughput (e.g., 0.072Kbps). Our
contribution is exactly to overcome this central issue. Note
that the main focus of [26] is not on tolerating f ≥ 1
2, but on
providing fast transaction conﬁrmation when a super majority
of the users are honest. In addition, their work is mainly
theoretical, with no implementation.
X. CONCLUSIONS
We have presented BCUBE, the very ﬁrst blockchain that
can tolerate f ≥ 1
2, while achieving practically usable transac-
tion throughput and latency. At the core of BCUBE is our novel
byzantine broadcast protocol OVERLAYBB, which can achieve
signiﬁcantly better throughput than prior protocols. BCUBE
still leaves many questions unanswered. For example, can we
further improve its performance? Can we generalize beyond
Proof-of-Stake? Can we offer progressive conﬁrmation, as in
Bitcoin, so that a transaction’s likelihood of being conﬁrmed
grows with time, even before it is fully-conﬁrmed? All these
are interesting open questions for future research.
ACKNOWLEDGMENT
We thank the anonymous IEEE Security & Privacy review-
ers for their detailed and helpful comments on this paper.
DISCLOSURE BY AUTHORS
Haifeng Yu is an Associate Professor in School of Comput-
ing, National University of Singapore (NUS). Haifeng is also
a Co-PI of NUS CRYSTAL Centre, which is a blockchain-
related research centre. Prateek Saxena is an Associate Pro-
fessor in School of Computing, NUS. Prateek is also a Co-
Director of NUS CRYSTAL Centre, and a co-founder of
Zilliqa Research, which is related to blockchains.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:36:30 UTC from IEEE Xplore.  Restrictions apply. 
131275
REFERENCES
[1] I. Abraham, D. Malkhi, K. Nayak, L. Ren, and A. Spiegelman, “Solida:
A blockchain protocol based on reconﬁgurable byzantine consensus,” in
International Conference on Principles of Distributed Systems, 2017.
[2] M. Apostolaki, A. Zohar, and L. Vanbever, “Hijacking bitcoin: Routing
attacks on cryptocurrencies,” in IEEE Symposium on Security and
Privacy, 2017.
[3] V. Bagaria, S. Kannan, D. Tse, G. Fanti, and P. Viswanath, “Prism:
Deconstructing the Blockchain to Approach Physical Limits,” in CCS,
2019.
[4] S. Bojja Venkatakrishnan, G. Fanti, and P. Viswanath, “Dandelion:
Redesigning the bitcoin network for anonymity,” in Proceedings of the
ACM on Measurement and Analysis of Computing Systems, 2017.
[5] D. Boneh, M. Drijvers, and G. Neven, “Compact multi-signatures for
smaller blockchains,” in ASIACRYPT, 2018.
[6] T.-H. H. Chan, R. Pass, and E. Shi, “Sublinear-round byzantine agree-
ment under corrupt majority,” in IACR International Conference on
Public-Key Cryptography, 2020.
[7] P. Daian, R. Pass, and E. Shi, “Snow white: Robustly reconﬁgurable
consensus and applications to provably secure proof of stake,” in
International Conference on Financial Cryptography and Data Security,
2019.
[8] D. Dolev and H. R. Strong, “Authenticated algorithms for byzantine
agreement,” SIAM Journal on Computing, vol. 12, no. 4, pp. 656–666,
1983.
[9] C. Ganesh and A. Patra, “Broadcast extensions with optimal communi-
cation and round complexity,” in PODC, 2016.
[10] J. Garay and A. Kiayias, “Sok: A consensus taxonomy in the blockchain