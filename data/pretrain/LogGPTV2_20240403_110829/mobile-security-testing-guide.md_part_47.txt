Setting up a Testing Environment for iOS Apps
Can I Jailbreak?
The iPhone Wiki
Redmond Pie
Reddit Jailbreak
Note that any modification you make to your device is at your own risk. While jailbreaking is typically safe,
things can go wrong and you may end up bricking your device. No other party except yourself can be held
accountable for any damage.
Recommended Tools - iOS Device
Many tools on a jailbroken device can be installed by using Cydia, which is the unofficial AppStore for iOS devices
and allows you to manage repositories. In Cydia you should add (if not already done by default) the following
repositories by navigating to Sources -> Edit, then clicking "Add" in the top left:
http://apt.thebigboss.org/repofiles/cydia/: One of the most popular repositories is BigBoss, which contains various
packages, such as the BigBoss Recommended Tools package.
http://repo.hackyouriphone.org: Add the HackYouriPhone repository to get the AppSync package.
https://build.frida.re: Install Frida by adding the repository to Cydia.
http://mobiletools.mwrinfosecurity.com/cydia/: The Needle agent, has its own repository as well and should be
added.
https://repo.chariz.io: Useful when managing your jailbreak on iOS 11.
https://apt.bingner.com/: Another repository, with quiet a few good tools, is Elucubratus, which gets installed when
you install Cydia on iOS 12 using Unc0ver.
https://coolstar.org/publicrepo/: For Needle you should consider adding the Coolstar repo, to install Darwin CC
Tools.
In case you are using the Sileo App Store, please keep in mind that the Sileo Compatibility Layer shares your
sources between Cydia and Sileo, however, Cydia is unable to remove sources added in Sileo, and Sileo is
unable to remove sources added in Cydia. Keep this in mind when youâ€™re trying to remove sources.
After adding all the suggested repositories above you can install the following useful packages from Cydia to get
started:
adv-cmds: Advanced command line, which includes tools such as finger, fingerd, last, lsvfs, md, and ps.
AppList: Allows developers to query the list of installed apps and provides a preference pane based on the list.
Apt: Advanced Package Tool, which you can use to manage the installed packages similarly to DPKG, but in a
more friendly way. This allows you to install, uninstall, upgrade, and downgrade packages from your Cydia
repositories. Comes from Elucubratus.
AppSync Unified: Allows you to sync and install unsigned iOS applications.
BigBoss Recommended Tools: Installs many useful command line tools for security testing including standard
Unix utilities that are missing from iOS, including wget, unrar, less, and sqlite3 client.
Class-dump: A command line tool for examining the Objective-C runtime information stored in Mach-O files and
generates header files with class interfaces.
Class-dump-Z: A command line tool for examining the Swift runtime information stored in Mach-O files and
generates header files with class interfaces. This is not available via Cydia, therefore please refer to installation
steps in order to get class-dump-z running on your iOS device.
Clutch: Used to decrypt an app executable.
Cycript: Is an inlining, optimizing, Cycript-to-JavaScript compiler and immediate-mode console environment that
can be injected into running processes (associated to Substrate).
Cydia Substrate: A platform that makes developing third-party iOS add-ons easier via dynamic app manipulation
or introspection.
cURL: Is a well known http client which you can use to download packages faster to your device. This can be a
344
Setting up a Testing Environment for iOS Apps
great help when you need to install different versions of Frida-server on your device for instance.
Darwin CC Tools: Install the Darwin CC Tools from the Coolstar repo as a dependency for Needle.
IPA Installer Console: Tool for installing IPA application packages from the command line. After installing two
commands will be available installipa and ipainstaller which are both the same.
Frida: An app you can use for dynamic instrumentation. Please note that Frida has changed its implementation of
its APIs over time, which means that some scripts might only work with specific versions of the Frida-server
(which forces you to update/downgrade the version also on macOS). Running Frida Server installed via APT or
Cydia is recommended. Upgrading/downgrading afterwards can be done, by following the instructions of this
Github issue.
Grep: Handy tool to filter lines.
Gzip: A well known zip utility.
Needle-Agent: This agent is part of the Needle framework and need to be installed on the iOS device.
Open for iOS 11: Tool required to make Needle Agent function.
PreferenceLoader: A Substrate-based utility that allows developers to add entries to the Settings application,
similar to the SettingsBundles that App Store apps use.
SOcket CAT: a utility with which you can connect to sockets to read and write messages. This can come in handy
if you want to trace the syslog on iOS 12 devices.
Besides Cydia there are several other open source tools available and should be installed, such as Introspy.
Besides Cydia you can also ssh into your iOS device and you can install the packages directly via apt-get, like for
example adv-cmds.
$ apt-get update
$ apt-get install adv-cmds
Small note on USB of an iDevice
On an iOS device you cannot make data connections anymore after 1 hour of being in a locked state, unless you
unlock it again due to the USB Restricted Mode, which was introduced with iOS 11.4.1
Recommended Tools - Host Computer
In order to analyze iOS apps, you should install the following tools on your host computer. We'll be referring to them
throughout the guide. Please note that a great number of them will require macOS in order to run and therefore using
a macOS computer is normally the recommendation when dealing with iOS apps.
Burp Suite
Burp Suite is an interception proxy that can be used to analyze the traffic between the app and the API it's talking to.
Please refer to the section below "Setting up an Interception Proxy" for detailed instructions on how to set it up in an
iOS environment.
Frida
Frida is a runtime instrumentation framework that lets you inject JavaScript snippets or portions of your own library
into native Android and iOS apps. The installation instructions for Frida can be found on the official website. Frida is
used in several of the following sections and chapters. For a quick start you can go through the iOS examples.
Frida-ios-dump
Frida-ios-dump allows you to pull a decrypted IPA from a jailbroken device. Please refer to the section "Using Frida-
ios-dump" for detailed instructions on how to use it.
IDB
345
Setting up a Testing Environment for iOS Apps
IDB is an open source tool to simplify some common tasks for iOS app security assessments and research. The
installation instructions for IDB are available in the documentation.
Once you click on the button "Connect to USB/SSH device" in IDB and key in the SSH password in the terminal where
you started IDB is ready to go. You can now click on "Select App...", select the app you want to analyze and get initial
meta information of the app. Now you are able to do binary analysis, look at the local storage and investigate IPC.
Please keep in mind that IDB might be unstable and crash after selecting the app.
ios-deploy
With ios-deploy you can install and debug iOS apps from the command line, without using Xcode. It can be installed
via brew on macOS:
$ brew install ios-deploy
For the usage please refer to the section "ios-deploy" below which is part of "Installing Apps".
iFunBox
iFunBox is a file and app management tool that supports iOS. You can download it for Windows and macOS.
It has several features, like app installation, access the app sandbox without jailbreak and others.
Keychain-Dumper
Keychain-dumper is an iOS tool to check which keychain items are available to an attacker once an iOS device has
been jailbroken. Please refer to the section "Keychain-dumper (Jailbroken)" for detailed instructions on how to use it.
Mobile-Security-Framework - MobSF
MobSF is an automated, all-in-one mobile application pentesting framework that also supports iOS IPA files. The
easiest way of getting MobSF started is via Docker.
$ docker pull opensecurity/mobile-security-framework-mobsf
$ docker run -it -p 8000:8000 opensecurity/mobile-security-framework-mobsf:latest
Or install and start it locally on your host computer by running:
# Setup
git clone https://github.com/MobSF/Mobile-Security-Framework-MobSF.git
cd Mobile-Security-Framework-MobSF
./setup.sh # For Linux and Mac
setup.bat # For Windows
# Installation process
./run.sh # For Linux and Mac
run.bat # For Windows
By running it locally on a macOS host you'll benefit from a slightly better class-dump output.
Once you have MobSF up and running you can open it in your browser by navigating to http://127.0.0.1:8000. Simply
drag the IPA you want to analyze into the upload area and MobSF will start its job.
After MobSF is done with its analysis, you will receive a one-page overview of all the tests that were executed. The
page is split up into multiple sections giving some first hints on the attack surface of the application.
346
Setting up a Testing Environment for iOS Apps
The following is displayed:
Basic information about the app and its binary file.
Some options to:
View the Info.plist file.
View the strings contained in the app binary.
Download a class-dump, if the app was written in Objective-C; if it is written in Swift no class-dump can be
created.
List all Purpose Strings extracted from the Info.plist which give some hints on the app's permissions.
Exceptions in the App Transport Security (ATS) configuration will be listed.
A brief binary analysis showing if free binary security features are activated or e.g. if the binary makes use of
banned APIs.
List of libraries used by the app binary and list of all files inside the unzipped IPA.
In contrast to the Android use case, MobSF does not offer any dynamic analysis features for iOS apps.
Refer to MobSF documentation for more details.
Needle
Needle is an all-in-one iOS security assessment framework, which you can compare to as a "Metasploit" for iOS. The
installation guide in the Github wiki contains all the information needed on how to prepare your Kali Linux or macOS
and how to install the Needle Agent on your iOS device.
Please also ensure that you install the Darwin CC Tools from the Coolstar repository, to get Needle to work on iOS
12.
In order to configure Needle read the Quick Start Guide and go through the Command Reference of Needle to get
familiar with it.
Objection
Objection is a "runtime mobile exploration toolkit, powered by Frida". Its main goal is to allow security testing on non-
rooted or jailbroken devices through an intuitive interface.
Objection achieves this goal by providing you with the tools to easily inject the Frida gadget into an application by
repackaging it. This way, you can deploy the repackaged app to the non-jailbroken device by sideloading it and
interact with the application as explained in the previous section.
347
Setting up a Testing Environment for iOS Apps
However, Objection also provides a REPL that allows you to interact with the application, giving you the ability to
perform any action that the application can perform. A full list of the features of Objection can be found on the project's
homepage, but here are a few interesting ones:
Repackage applications to include the Frida gadget
Disable SSL pinning for popular methods
Access application storage to download or upload files
Execute custom Frida scripts
Dump the Keychain
Read plist files
All these tasks and more can be easily done by using the commands in objection's REPL. For example, you can
obtain the classes used in an app, functions of classes or information about the bundles of an app by running:
OWASP.iGoat-Swift on (iPhone: 12.0) [usb] # ios hooking list classes
OWASP.iGoat-Swift on (iPhone: 12.0) [usb] # ios hooking list class_methods 
OWASP.iGoat-Swift on (iPhone: 12.0) [usb] # ios bundles list_bundles
The ability to perform advanced dynamic analysis on non-jailbroken devices is one of the features that makes
Objection incredibly useful. It is not always possible to jailbreak the latest version of iOS, or you may have an
application with advanced jailbreak detection mechanisms. Furthermore, the included Frida scripts make it very easy
to quickly analyze an application, or get around basic security controls.
Finally, in case you do have access to a jailbroken device, Objection can connect directly to the running Frida server
to provide all its functionality without needing to repackage the application.
Installing Objection
Objection can be installed through pip as described on Objection's Wiki.
$ pip3 install objection
If your device is jailbroken, you are now ready to interact with any application running on the device and you can skip
to the "Using Objection" section below.
However, if you want to test on a non-jailbroken device, you will first need to include the Frida gadget in the
application. The Objection Wiki describes the needed steps in detail, but after making the right preparations, you'll be
able to patch an IPA by calling the objection command:
$ objection patchipa --source my-app.ipa --codesign-signature 0C2E8200Dxxxx
Finally, the application needs to be sideloaded and run with debugging communication enabled. Detailed steps can be
found on the Objection Wiki, but for macOS users it can easily be done by using ios-deploy:
$ ios-deploy --bundle Payload/my-app.app -W -d
Using Objection
Starting up Objection depends on whether you've patched the IPA or whether you are using a jailbroken device
running Frida-server. For running a patched IPA, objection will automatically find any attached devices and search for
a listening frida gadget. However, when using frida-server, you need to explicitly tell frida-server which application you
want to analyze.
# Connecting to a patched IPA
348
Setting up a Testing Environment for iOS Apps
$ objection explore
# Using frida-ps to get the correct application name
$ frida-ps -Ua | grep -i Telegram
983 Telegram
# Connecting to the Telegram app through Frida-server
$ objection --gadget="Telegram" explore
Once you are in the Objection REPL, you can execute any of the available commands. Below is an overview of some
of the most useful ones:
# Show the different storage locations belonging to the app
$ env
# Disable popular ssl pinning methods
$ ios sslpinning disable
# Dump the Keychain
$ ios keychain dump
# Dump the Keychain, including access modifiers. The result will be written to the host in myfile.json
$ ios keychain dump --json 
# Show the content of a plist file
$ ios plist cat 
More information on using the Objection REPL can be found on the Objection Wiki
Passionfruit
Passionfruit is an iOS app blackbox assessment tool that is using the Frida server on the iOS device and visualizes
many standard app data via Vue.js-based GUI. It can be installed with npm.
$ npm install -g passionfruit
$ passionfruit
listening on http://localhost:31337
When you execute the command passionfruit a local server will be started on port 31337. Connect your jailbroken
device with the Frida server running, or a non-jailbroken device with a repackaged app including Frida to your macOS
device via USB. Once you click on the "iPhone" icon you will get an overview of all installed apps:
With Passionfruit it's possible to explore different kinds of information concerning an iOS app. Once you selected the
iOS app you can perform many tasks such as:
Get information about the binary
View folders and files used by the application and download them
Inspect the Info.plist
Get a UI Dump of the app screen shown on the iOS device
List the modules that are loaded by the app
Dump class names
Dump keychain items
Access to NSLog traces
349
Setting up a Testing Environment for iOS Apps
Radare2
Radare2 is a complete framework for reverse-engineering and analyzing binaries. The installation instructions can be
found in the GitHub repository. To learn more on radare2 you may want to read the official radare2 book.
TablePlus
TablePlus is a tool for Windows and macOS to inspect database files, like Sqlite and others. This can be very useful
during iOS engagements when dumping the database files from the iOS device and analyzing the content of them
with a GUI tool.
Basic Testing Operations
Accessing the Device Shell
One of the most common things you do when testing an app is accessing the device shell. In this section we'll see
how to access the iOS shell both remotely from your host computer with/without a USB cable and locally from the
device itself.
Remote Shell
In contrast to Android where you can easily access the device shell using the adb tool, on iOS you only have the
option to access the remote shell via SSH. This also means that your iOS device must be jailbroken in order to
connect to its shell from your host computer. For this section we assume that you've properly jailbroken your device
and have either Cydia (see screenshot above) or Sileo installed as explained in "Getting Privileged Access". In the
rest of the guide we will reference to Cydia, but the same packages should be available in Sileo.
350
Setting up a Testing Environment for iOS Apps
In order to enable SSH access to your iOS device you can install the OpenSSH package. Once installed, be sure to
connect both devices to the same Wi-Fi network and take a note of the device IP address, which you can find in the
Settings -> Wi-Fi menu and tapping once on the info icon of the network you're connected to.
You can now access the remote device's shell by running ssh root@ , which will log you in as the
root user:
$ ssh PI:EMAIL
PI:EMAIL's password:
iPhone:~ root#
Press Control + D or type exit to quit.
When accessing your iOS device via SSH consider the following:
The default users are root and mobile .
The default password for both is alpine .
Remember to change the default password for both users root and mobile as anyone on the same network
can find the IP address of your device and connect via the well-known default password, which will give them
root access to your device.
If you forget your password and want to reset it to the default alpine :
1. Edit the file /private/etc/master.password on your jailbroken iOS device (using an on-device shell as shown
below)
2. Find the lines:
root:xxxxxxxxx:0:0::0:0:System Administrator:/var/root:/bin/sh
mobile:xxxxxxxxx:501:501::0:0:Mobile User:/var/mobile:/bin/sh
3. Change xxxxxxxxx to /smx7MYTQIi2M (which is the hashed password alpine )
4. Save and exit
Connect to a Device via SSH over USB
During a real black box test, a reliable Wi-Fi connection may not be available. In this situation, you can use usbmuxd
to connect to your device's SSH server via USB.