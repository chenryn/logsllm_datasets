         0.113  insert into tbl values (:r, :k);  
         0.129  insert into tbl values (:r, :k);  
         0.084  insert into tbl values (:r, :k);  
         0.079  insert into tbl values (:r, :k);  
         0.093  insert into tbl values (:r, :k);  
         0.107  insert into tbl values (:r, :k);  
         0.093  insert into tbl values (:r, :k);  
         0.151  insert into tbl values (:r, :k);  
         0.094  insert into tbl values (:r, :k);  
         0.089  insert into tbl values (:r, :k);  
         0.128  insert into tbl values (:r, :k);  
         0.079  insert into tbl values (:r, :k);  
         0.085  insert into tbl values (:r, :k);  
         0.101  insert into tbl values (:r, :k);  
         0.123  insert into tbl values (:r, :k);  
         0.097  insert into tbl values (:r, :k);  
         0.109  insert into tbl values (:r, :k);  
         0.093  insert into tbl values (:r, :k);  
         0.118  insert into tbl values (:r, :k);  
         0.118  insert into tbl values (:r, :k);  
         0.128  insert into tbl values (:r, :k);  
         0.112  insert into tbl values (:r, :k);  
         0.087  insert into tbl values (:r, :k);  
         0.103  insert into tbl values (:r, :k);  
         0.101  insert into tbl values (:r, :k);  
         0.097  insert into tbl values (:r, :k);  
         0.136  insert into tbl values (:r, :k);  
         0.103  insert into tbl values (:r, :k);  
         0.097  insert into tbl values (:r, :k);  
         0.142  insert into tbl values (:r, :k);  
         0.082  insert into tbl values (:r, :k);  
         0.127  insert into tbl values (:r, :k);  
         0.078  insert into tbl values (:r, :k);  
         0.105  insert into tbl values (:r, :k);  
         0.076  insert into tbl values (:r, :k);  
         0.116  insert into tbl values (:r, :k);  
         0.105  insert into tbl values (:r, :k);  
         0.113  insert into tbl values (:r, :k);  
         0.100  insert into tbl values (:r, :k);  
         0.107  insert into tbl values (:r, :k);  
         0.099  insert into tbl values (:r, :k);  
         0.106  insert into tbl values (:r, :k);  
         0.108  insert into tbl values (:r, :k);  
         0.103  insert into tbl values (:r, :k);  
         0.107  insert into tbl values (:r, :k);  
         0.120  end;  
```  
```  
pgbench -M prepared -n -r -P 1 -f ./t.sql -c 16 -j 16 -T 5  
progress: 1.0 s, 13276.8 tps, lat 1.170 ms stddev 4.170  
progress: 2.0 s, 13738.1 tps, lat 1.155 ms stddev 5.102  
progress: 3.0 s, 13290.7 tps, lat 1.224 ms stddev 5.711  
progress: 4.0 s, 13264.4 tps, lat 1.188 ms stddev 5.630  
progress: 5.0 s, 12139.2 tps, lat 1.310 ms stddev 6.359  
pgbench (PostgreSQL) 14.0  
transaction type: ./t.sql  
scaling factor: 1  
query mode: prepared  
number of clients: 16  
number of threads: 16  
duration: 5 s  
number of transactions actually processed: 65765  
latency average = 1.213 ms  
latency stddev = 5.459 ms  
initial connection time = 17.293 ms  
tps = 13174.110194 (without initial connection time)  
statement latencies in milliseconds:  
         0.000  \set size 10000000  
         0.001  \set r random_zipfian(1, :size, 2)  
         0.001  \set k permute(:r, :size)  
         0.000  \startpipeline  
         0.000  insert into tbl values (:r, :k);  
         0.000  insert into tbl values (:r, :k);  
         0.000  insert into tbl values (:r, :k);  
         0.000  insert into tbl values (:r, :k);  
         0.000  insert into tbl values (:r, :k);  
         0.000  insert into tbl values (:r, :k);  
         0.000  insert into tbl values (:r, :k);  
         0.000  insert into tbl values (:r, :k);  
         0.000  insert into tbl values (:r, :k);  
         0.000  insert into tbl values (:r, :k);  
         0.000  insert into tbl values (:r, :k);  
         0.000  insert into tbl values (:r, :k);  
         0.000  insert into tbl values (:r, :k);  
         0.000  insert into tbl values (:r, :k);  
         0.000  insert into tbl values (:r, :k);  
         0.000  insert into tbl values (:r, :k);  
         0.000  insert into tbl values (:r, :k);  
         0.000  insert into tbl values (:r, :k);  
         0.000  insert into tbl values (:r, :k);  
         0.000  insert into tbl values (:r, :k);  
         0.000  insert into tbl values (:r, :k);  
         0.000  insert into tbl values (:r, :k);  
         0.000  insert into tbl values (:r, :k);  
         0.000  insert into tbl values (:r, :k);  
         0.000  insert into tbl values (:r, :k);  
         0.000  insert into tbl values (:r, :k);  
         0.000  insert into tbl values (:r, :k);  
         0.000  insert into tbl values (:r, :k);  
         0.000  insert into tbl values (:r, :k);  
         0.000  insert into tbl values (:r, :k);  
         0.000  insert into tbl values (:r, :k);  
         0.000  insert into tbl values (:r, :k);  
         0.000  insert into tbl values (:r, :k);  
         0.000  insert into tbl values (:r, :k);  
         0.000  insert into tbl values (:r, :k);  
         0.000  insert into tbl values (:r, :k);  
         0.000  insert into tbl values (:r, :k);  
         0.000  insert into tbl values (:r, :k);  
         0.000  insert into tbl values (:r, :k);  
         0.000  insert into tbl values (:r, :k);  
         0.000  insert into tbl values (:r, :k);  
         0.000  insert into tbl values (:r, :k);  
         0.000  insert into tbl values (:r, :k);  
         0.000  insert into tbl values (:r, :k);  
         0.000  insert into tbl values (:r, :k);  
         0.000  insert into tbl values (:r, :k);  
         0.000  insert into tbl values (:r, :k);  
         0.000  insert into tbl values (:r, :k);  
         0.000  insert into tbl values (:r, :k);  
         1.214  \endpipeline  
```  
性能提升多少倍取决于每一次交互的延迟在整个请求中的时间占比.  
例如以上例子, 本地环境, 网络延迟只有0.1毫秒左右. 50条SQL, 采用pipeline模式比普通事务性能提升4倍. 如果网络延迟达到1毫秒, 性能将提升50倍.   
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")