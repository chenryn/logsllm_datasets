cannot be expelled. 
Trappe et al. [32] also observed that key updates should 
be distributed  with  the data.  In  fact, they  propose that the 
key updates be embedded within  the data, for example us- 
ing techniques similar to watermarking. The focus of their 
work, however,  is different.  While  the  ELK  key  updates 
encode the same key as was used to encrypt the data, [32] 
proposed embedding future keys in current data. 
Wong and Lam designed Keystone [38], which addresses 
the  reliable  delivery  for: key  update  messages,  which  is 
also the primary motivation  of this  work.  Since most reli- 
able multicast transport protocols do not scale well to large 
groups, they  propose that  the  key  server uses  forward er- 
ror correction (FEC) to encode the key update message. As 
long as the member receives a sufficient fraction of the key 
update packets,  it  can  reconstruct  the  information.  If  too 
many  packets are lost,  the member uses  a unicast  connec- 
tion  to  the  key  server  to  recover  the missing keys.  Since 
the  authors assume  independent packet  loss,  this  scheme 
is  quite effective.  In  practice,  however,  the  packet  loss  in 
the  Internet  is  correlated, which  means that  the  probabil- 
ity of  loss for a packet increases drastically  if  the previous 
packet was lost [3,41]. This means that even though the key 
update packets are replicated,  sending them  in  close suc- 
cession  introduces considerable vulnerability  against corre- 
lated packet loss. 
8.1  Comparison 
In  this  work  we focus on  broadcast overhead, since we 
consider it to be the most important quantity.  Unicast cost, 
memory overhead at the key. server, and computation over- 
head are of lesser concern. (If a broadcasting company has 
lo6 paying customers, it can also afford  a server with  suf- 
ficient memory to store the 2 . lo6 keys.)  By  reducing the 
size of the key updates, one can have a higher level of redun- 
dancy (assuming that a constant fraction  of the bandwidth 
is dedicated for key updates)  which  results in higher relia- 
bility. 
Table 1 shows a comparison of the standard key distribu- 
tion protocols. N  is the number of users in the group and d 
is the height  of the key tree.  Assuming that the tree is bal- 
anced, we have d  = [log,(N)1.  The location  information 
257 
SKDC 
LKH+ 
OFT 
Keystone 
(binary) 
Full 
ELK 
I  Hint (2-')  I  Hint (1 - 2-i) 
I 
Broadcast size  I  N n  
I 
Broadcastsize  1 
Broadcast size  I  ( N  - l ) n  1 
j N n  
d 
4 
(d - l ) n  I 
d n  
aj n 
d n  
I 
I 
I 
2dn 
2ajn 
2dn 
0 
1 
I 
I  (d - 1)(n1 +na)  I 
0 
0 
0 
n2 
0 
0 
in2 
of a node in the tree also takes d bits.  The quantity  aj de- 
termines the number of keys that change in the tree when j 
members join or leave. 
The SKDC protocol is the simplest protocol, but since it 
is not based  on  key  trees it clearly  does not  scale to  large 
groups.  The Keystone protocol  is based  on  key  trees,  but 
since it does not incorporate recent developments to reduce 
the  size of  the  key  update  messages  it  is  more  expensive 
than LKH+ or OFT. We can clearly see that ELK is the most 
efficient protocol, even in the case where ELK has the same 
security parameter as the other protocols (nl+na = n). Our 
new join protocol does not require any broadcast message, 
since the entire tree changes in  each interval.  In particular 
for the case of j leaving members,  ELK provides savings 
with a factor of  aj  - j  factor instead of the OFT'S aj  - 1 
factor. 
To display the overhead of the hint message, we list two 
cases:  One  where  the  hint  helps  half  the  members  to  re- 
construct the group key, and the other that helps a fraction 
of  1  - 2-i  members.  To  simplify  the  table,  we  marked 
the  size  of  the  hint  message as  n2' 
In  the  case  when  j 
members  leave  the  group,  the  size  of  the  hint  message 
is  more  difficult  to  give.  The  expected  number  of  keys 
that  allows half  the  members to  recover the  group key  is 
bj  = C ~ ~ i ' o 2 " ( l - ( 1 - 2 - " ) j )  withw = r- 
'1 
The formula for the case where a fraction of 1 - 2-'  mem- 
ber wish to recover the group key from the hint is 
cj = xtli 2"(1-  ( 1  - 2-")j)  with w  = 1- 
1 
I'J 
log(2) 
I o g ( 1 - 2 r " J )  
log( 1-2- 
log(3) 
'Ifthe  hint size is n2 - nl + n g ,   and n g  = nl + 1, the hint size would 
actually be 122 + 1. 
9  Implementation 
We implemented the ELK protocol.  In this section, we 
discuss our choice for the cryptographic primitives and re- 
port measured performance numbers. We have not yet mea- 
sureed the savings in a real multicast group communication 
environment. 
9.1  PRF 
As we pointed out in Section 7, the savings of the hint 
increases with  the speed of  the members.  The only  func- 
tion that is relevant for the hint computation is the speed of 
the PRF,  because the PRF is the only function that is used 
repeatedly to derive the lost key in the exhaustive search. 
We use a MAC function to construct the PRF. For all the 
PRFs needed, the required input size is less  or equal to n 
bits, and the output size is also always less or equal to n bits. 
In  our application, we chose  n  = 64 bits.  We  compared 
the  speed  of  a  variety  of  MAC functions,  HMAC  with  a 
hash function, and CBC-MAC based on a block cipher. We 
used  the  functions provided by  the OpenSSL library  [25], 
and the fast Rijndael  (Advanced Encryption Standard) im- 
plementation  provided  by  NIST  [24].  The HMAC  based 
on  hash functions are slower than the fastest CBC-MACS. 
Rijndael  performed  well  on  our 800 MHz Pentium  work- 
station with  1,200,000 MACs per second (the input, output, 
and key  sizes are  128 bits).  However, RC5  is  faster with 
5,000,000 MACs per second (with 64 bit  input and output 
size).  Since we do not need more than 64 bits input or out- 
put  size, RC5 is over four times  faster  than  Rijndael,  and 
hence, we use  one encryption  with  RC5 as our PRF func- 
tion. 
258 
Path length 
Reconstruction (ms) 
Candidates 
Member fraction 
1 
18 
1.41 
50% 
2 
42 
1.59 
25% 
5 
3 
5 1 
124 
1.63 
1.72 
12.5%  6.25%  3.125% 
4 
102 
1.63 
6 
153 
1.59 
1.5625% 
9.2  Encryption Function 
11  Acknowledgments 
To save space in our key updates and hints we cannot af- 
ford the data expansion caused by a block cipher. Therefore 
we used a stream cipher.  Since the speed of the encryption 
is not as important as that of the PRF function and since we 
already use RC5 for the PRF function, we use RC5 in OFB 
mode as our stream  cipher.  We  use  the  group key  for the 
IV. This is secure because  we never encrypt twice with the 
same key/IV pair.5 
9.3  Results 
We implemented  ELK with  the parameters of 711  = 16 
bits,  722  =  35  bits,  and  713  =  17 bits  to  prevent  an  in- 
crease of false positive candidate keys.  We report the per- 
formance results from the key reconstruction  algorithm.  Ta- 
ble  2 shows the average  number of  milliseconds to recon- 
struct a path of a certain length. 
10  Conclusion 
We summarize with some maior contributions of ELK. 
ELK features  smaller  key  updates than  previous pro- 
tocols.  Most notably, ELK member join events do not 
require  any data broadcast to current group members 
in the general case. 
ELK  generates  small  hint  messages  that  trades  off 
communication overhead with  member  computation. 
These small hints enable legitimate receivers to derive 
a group key through computation in case they  missed 
a key update message. 
ELK  is  one of  the  first  protocols  to  provide reliabil- 
ity of key update messages without relying on reliable 
multicast  protocols.  Instead, ELK uses  small key  up- 
date footprints composed of hints carried in data pack- 
ets. This approach allows the majority of the members 
to recover the new group key when the key update mes- 
sage is lost. 
5An exception is the encryption of part of the hint message and part of 
the key update  message.  In this case, however.  not only the key/lV  pair is 
the same for both encryptions, but also the plaintext data. 
We would like to thank David Wagner for his helpful fee- 
back and fruitful discussions. We would  also like to thank 
Nikita Borisov, Ran Canetti, Yongdae Kim, Radha Pooven- 
dran, and Gene Tsudik and for helpful  discussions. We are 
also indebted to  the anonymous referees for their  detailed 
and insightful comments. 
References 
[l] Martin Abadi, T. Mark A. Lomas, and Roger Need- 
ham. Strengthening passwords, September 1997. SRC 
Technical Note  1997-033. 
[2]  D. Balenson, D. McGrew, and A. Sherman. Key man- 
agement for large dynamic groups: One-way function 
trees  and  amortized initialization.  Internet  Draft, In- 
ternet Engineering Task Force, March  1999. Work in 
progress. 
[3]  M.  Borella, D.  Swider, S. Uludag,  and  G. Brewster. 
Internet packet  loss:  Measurement  and  implications 
for end-to-end QoS.  In  International Conference  on 
Parallel Processing, August 1998. 
[4]  Bob Briscoe. MARKS: Zero side-effect multicast key 
management using arbitrarily revealed key sequences. 
In First International Workshop on Networked  Group 
Communication, November 1999. 
[5] John  W.  Byers,  Michael  Luby,  Michael  Mitzen- 
macher, and  Ashutosh Rege.  A  Digital  Fountain  ap- 
proach to reliable  distribution  of  bulk  data.  In  Pro- 
ceedings of  the ACM  SIGCOMM  '98 Conference  on 
Applications, Technologies, Architectures,  and P roto- 
cols for Computer Communication, 1998. 
[6]  R. Canetti, J. Garay, G. Itkis, D. Micciancio, M. Naor, 
and B. Pinkas.  Multicast security:  A  taxonomy and 
In  INFOCOMM'99, 
some  efficient  constructions. 
March  1999. 
i7]  Ran  C a n e t t i t  
Nissim.  Effi- 
cient  communication-storage  tradeoffs  for  multicast 
and 
259 
In  Jacques  Stern,  editor,  Advances  in 
encryption. 
Cryptology - EUROCRYPT '99, number  1599 in Lec- 
ture  Notes  in  Computer  Science.  International  As- 
sociation  for  Cryptologic Research, Springer-Verlag, 
Berlin Germany, 1999. 