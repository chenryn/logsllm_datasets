i (xR
i )]
F.2 Formal Corollary for Key Conﬁrmations
The Theorem for those key exchanges is very similar to Corollary 2. The main diﬀerence is
that now, instead of working on a key exchange KE := I(lsidI , idI )|R(lsidR, idR)[, we further
split I and R, in I = I 0; I 1 and R := R0; R1, where I 0 and R0 will corresponds to the key
exchange up to but not including the ﬁrst use of the secret key, and I 1 and R1 as the remainder
of the protocol.
79
Corollary 3. Let OKE, Or,OP,Q be oracles and
KEi[_1, _2] := Ii(lsidI
i , idI ); _1|Ri(lsidRi, idR); _2
i , idR); R1
i , idI ) := I 0
i , idR) :=
i (xR) such that I 0 binds xI , xid, xlsid, R0 binds xR, xid, xlsid and Nl(KE) is
i (x, y),Q(x, y, z) =
i (x, y, z), Ci(z) and Di(z) be protocols, such that Nl(P, Q, C, D) is disjoint of
a key exchange protocol with Ii(lsidI
i , idI ); I 1
R0
i (lsidR
disjoint of the oracles support. Let p = {idI , idR}, Pi(x, y) = P I
i (x, y, z)(cid:107)QR
QI
the oracles support.
Let idI , idR be names, sI = {lsidI
i (xI ) and Ri(lsidR
i (x, y)(cid:107)P R
i }i∈N and s = sI ∩ sR sets of names.
i }i∈N,sR = {lsidR
i (lsidI
A-1 ∀i ∈ N, (νlsidI
simulatable)).
i , idI , lsidR
i , idR.Ci(p)(cid:107)I 0
i (lsidI
i , idI ); out(xI )(cid:107)R0
i (lsidR
i , idR); out(xR) is OKE
A-2 s is disjoint of the support of Op.
Ci(p)(cid:107)I 0
0 (lsidI
0, idI );
(cid:107)R0(lsidR
0 , idR);
∼=OKE ,Op
Ci(p)(cid:107)I 0(lsidI
0, idI );
A-3
(cid:107)R0(lsidR
0 , idR);
if xI
0, xI
lsid /∈ sR ∧ xI
id = idR then
if xI
I 1(xI ); out(xI )
id(cid:105))
else out((cid:104)xI , lsidI
lsid, xI
lsid /∈ sI ∧ xid = idI then
if xR
R1(xR); out(xR)
else out((cid:104)xR, lsidR, xR
id(cid:105))
lsid, xR
lsid = lsidR ∧ xid = idR then
out((cid:104)k, lsidI
0, xI
lsid /∈ sR ∧ xI
else if xI
I 1(xR);⊥
else out((cid:104)xI , lsidI , xI
lsid = lsidI ∧ xR
if xR
out((cid:104)k, lsidR
0 , xR
lsid /∈ sI ∧ xR
else if xR
I 1(xR);⊥
else out((cid:104)xR, lsidR
id(cid:105))
lsid, xI
id = idI then
id(cid:105))
lsid, xR
lsid, xI
id(cid:105))
id = idR then
id = idI then
id(cid:105))
lsid, xR
and for any N which may depend on the security parameter:
B-1 (cid:107)i≤N 2Di(p)(cid:107)I 1
and
i (p, ki)(cid:107)B1
i (ki); P R
i (ki); P I
0 , xR
i (p, ki) ∼=Or,Ok (cid:107)i≤n2Di(p)(cid:107)I 1
i (ki); QI
i (p, ki)(cid:107)B1
i (ki); QR
i (p, ki)
C-1 νp, lsidI
(cid:107)in(x).I 1
i , lsidR
i (x); QI
i .Di(p)(cid:107)in(x).Pi(x) (cid:107)in(x).Qi(x)(cid:107)in(x).I 1
i (x)(cid:107)in(x).R1
i (x) is Op simulatable.
i (x); QR
i (x); P I
i (x)(cid:107)in(x).R1
i (x); P R
i (x)
80
(cid:107)i≤N Ci(p)(cid:107)I 0
i (lsidI
i , idI );
C-2 νp.
(cid:107)R0
i (lsidR
i , idR)[
is Ok simulatable.
Then, for any n:
xI
lsid = lsidR
j ∧ xI
id = idR then
lsid /∈ sR ∧ xI
id = idR then
i (xI ); P I
i (xI )
xR
lsid = lsidI
j ∧ xR
id = idI then
lsid /∈ sI ∧ xR
id = idI then
1≤j≤N
if
out((cid:104)i, j(cid:105))
else if xI
i (xI );⊥
I 1
else I 1
1≤j≤N
if
out((cid:104)i, j(cid:105))
else if (xR
i (xR);⊥
R1
else R1
i (xR); P R
i (xR)
(cid:107)i≤N Ci(p)(cid:107)Di(p)(cid:107)KEi[if xI
(cid:107)i≤N Ci(p)(cid:107)Di(p)(cid:107)KEi[P I
id = idR then QI
i (xI ) else P I
i (xI ), P R
i (xR)] ∼=
i (xI ), if xR
id = idI then QR
i (xR) else P R
i (xR)]
F.3 Oracle Simulation
We ﬁrst show that O-simulation, whose deﬁnition implies the identical distributions of two
messages produced either by the simulator of by the oracle, implies the equality of distributions
of message sequences produced by either the oracle or the simulator.
Lemma 9. Given a cryptographic library Mf , a sequence of names n, an oracle O with support
n and a protocol P , that is O-simulatable with AO, we have, for every x, y, c, r2, rB ∈ {0, 1}(cid:63),
every v ∈ Dη
n, for every m ≥ 1, for every PTOM BO (using tags preﬁxed by 1):
Pρs,ρr1 ,ρr2 ,ρO{θ1
m = y| [[n]]η
m = x, φ2
ρs = v, ρB
m = y| [[n]]η
O = rB, ρr2 = r2}
ρs = v, ρB
m = x, φ1
= Pρs,ρr1 ,ρr2 ,ρO{θ2
O = rB, ρr2 = r2}
where we split ρO into ρA
O (cid:93) ρB
O such that O called by B only accesses ρB
O and O called by
A only accesses ρA
Proof. We proceed by induction on m. Let us ﬁx x, y, c, r2, rB ∈ {0, 1}(cid:63) and v ∈ Dη
assume that:
O (which is possible thanks to the distinct preﬁxes).
n
. We
Pρs,ρr1 ,ρr2 ,ρO{θ1
m = y| [[n]]η
m = x, φ1
= Pρs,ρr1 ,ρr2 ,ρO{θ2
m = x, φ2
m+1 = BO(ρs,ρO)(Mf , ρr2, η, φi
ρs = v, ρB
m = y| [[n]]η
m).
We deﬁne vi
As the support of O is n, we have that O(ρs, ρO) = O(πk(ρs, η), ρO) .
O = rB, ρr2 = r2}
ρs = v, ρB
O = rB, ρr2 = r2}
Using conditional probabilities, we have that:
Pρs,ρr1 ,ρr2 ,ρO{θ1
ρs = v, ρB
m = y| [[n]]η
m+1 = x, φ1
= Pρs,ρr1 ,ρr2 ,ρO{v1
×Pρs,ρr1 ,ρr2 ,ρO{θ1
m = y| [[n]]η
m+1 = xm+1| θ1
m = x, φ1
m = x, φ2
O = rB, ρr2 = r2}
ρs = v, ρB
m = y, [[n]]η
O = rB, ρr2 = r2}
ρs = v, ρB
O = rB, ρr2 = r2}
81
Now, if we deﬁne Ov,rB such that Ov,rB = O(πn(ρs, η), ρB
O) when [[n]]η
ρs = v and ρB
O = rB ,
we have that
Pρs,,ρr1 ,ρr2 ,ρO{v1
=1
=2
=3
=4
=5
O = rB, ρr2 = r2}
m) = xm+1
ρs = v, ρB
O = rB, ρr2 = r2}
O = rB, ρr2 = r2}
m+1 = xm+1| θ1
m = x, φ1
| θ1
| θ1
m = y, [[n]]η
m = y, [[n]]η
ρs = v, ρB
ρs = v, ρB
m = x, φ1
O)(Mf , ρr2, η, φ1
Pρs,ρr1 ,ρr2 ,ρO{BO(πn(ρs,η),ρB
Pρs,ρr1 ,ρr2 ,ρO{BOv,rB (Mf , r2, η, y) = xm+1
Pρs,ρr1 ,ρr2 ,ρO{BOv,rB (Mf , r2, η, y) = xm+1}
Pρs,ρr1 ,ρr2 ,ρO{BOv,rB (Mf , r2, η, y) = xm+1
O)(Mf , ρr2, η, φ2
Pρs,ρr1 ,ρr2 ,ρO{BO(πn(ρs,η),ρB
m = y, [[n]]η
m = y, [[n]]η
m = x, φ1
m = x, φ2
| θ2
| θ2
m = x, φ2
m = y, [[n]]η
ρs = v, ρB
ρs = v, ρB
O = rB, ρr2 = r2}
O = rB, ρr2 = r2}
m) = xm+1
Justiﬁed with:
1. because O(ρs, ρO) = O(πn(ρs, η), ρBO);
2. O(πn(ρs, η), ρBO) = Ov,rB, and φ1
m = y;
3. the considered event does not depends on any of the conditional events removed;
4. the considered event does not depends on any of the conditional events added;
5. reversing the previous steps.
So we conclude that, as we also have the induction hypothesis:
Pρs,ρr1 ,ρr2 ,ρO{θ1
m+1 = x, φ1
= Pρs,ρr1 ,ρr2 ,ρO{θ2
m = y| [[n]]η
m+1 = x, φ2
ρs = v, ρB
m = y| [[n]]η
O = rB, ρr2 = r2}
ρs = v, ρB
O = rB, ρr2 = r2} (i)
We now deﬁne:
m+1 = AO(πn(ρs,η),ρA
u1
O)(Mf , ρr1, θ1
m (cid:93) v1
m+1, η)
m+1 = OP (ρs, θ2
u2
m (cid:93) v2
m+1)
We deﬁne the Turing machine B, such that:
BO(ρs,ρO)(Mf , ρr2, η, φi
m) :=
j) = xj
m = y
if ∀j ≤ m + 1,BO(v,rB)(Mf , r2, η, φi
∧φi
then BO(v,rB)(Mf , r2, η, φi
m)
else ⊥
for B similarly as vm for B.