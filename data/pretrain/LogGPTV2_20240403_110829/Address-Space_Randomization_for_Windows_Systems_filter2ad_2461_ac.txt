heap, speciﬁcally, RtlAllocateHeap, RtlReAllocate,
and RtlFreeHeap, and increase allocations by 8 or 16
bytes, providing one more bit of randomness for a total
of 20 bits.
The above approach is not applicable for rebasing
the main heap, since its address is determined before
the randomization DLL is loaded. Speciﬁcally, the
main heap is created using a call to RtlCreateHeap
within the LdrpInitializeProcess function. Our
kernel driver patches this call and transfers control to
a wrapper function. This wrapper function modiﬁes
a parameter to the RtlCreateHeap so that the main
heap is rebased at a random address aligned on a 4K
page boundary.
In addition, we add a 32-bit “magic number” to the
headers used in heap blocks to provide additional pro-
tection against heap overﬂow attacks. Heap overﬂow
attacks operate by overwriting control data used by
heap management routines. This data resides next to
the user data stored in a heap-allocated buﬀer, and
hence could be overwritten using a buﬀer overﬂow vul-
nerability. Typically, the attack takes eﬀect when the
overwritten block is freed. By checking the magic-
number at this point, we make it virtually impossible
to carry out this type of attack.
8It isn’t possible to simply analyze the binary to reconstruct
relocation information. This is because there is no way to dis-
tinguish pointers (that need to be relocated) from integer values
(which should not be relocated) in binary code: both would typ-
ically appear as constants in binary code.
4.5 PEB and TEB
PEB and TEB are created in kernel mode, speciﬁcally,
in the MiCreatePebOrTeb function of ntoskrnl.exe.
The function itself is complicated, but the algorithm
for PEB/TEB location is simple:
it searches the ﬁrst
available address space from an address speciﬁed in a
variable MmHighestUserAddress. Our approach is to
patch the memory image of ntoskernel.exe in our
boot driver so that it uses the contents of an another
variable RandomizedUserAddress that is initialized by
our boot driver. By initializing this variable with dif-
ferent values, PEB and TEB can be located at any of
219 possible 4K-aligned addresses within the ﬁrst 2GB
of memory.
4.6 Environment/Command-line parameters
On Windows, environment variables and process pa-
rameters reside in separate memory areas. In normal
programs, they are accessed using a pointer stored in
the PEB, but if their locations are predictable, then an
attacker can use them directly in attacks. To relocate
them, our approach is to allocate randomly-located
memory and copy over the contents of the original en-
vironment block and process parameters to the new lo-
cation. Following this, the original regions are marked
as inaccessible, and the PEB ﬁeld is updated to point
to the new locations.
4.7 VAD Regions
There are two types of VAD regions [22]. The ﬁrst
type is normally at the top of user address space (on
SP2 it is0x7ffe0000-0x7ffef000 ). These pages are
updated from kernel and read by user code, thus pro-
viding processes with a faster way to obtain informa-
tion that would otherwise be obtained using system
calls. This type of pages are created in the kernel mode
and are marked read-only, and hence we don’t ran-
domize their locations. A second type of VAD region
represents actual virtual memory allocated to a pro-
cess using VirtualAlloc. For these regions, we wrap
the VirtualAlloc function and modify its parameter
lpAddress to a random multiple of 64K.
4.8 Discussion
Attacks on DAWSON Implementation. In addi-
tion to attacks on randomization, which have previ-
ously been discussed, there could be attacks on DAW-
SON implementation and the runtime infrastructure
used by it. It is important to note that DAWSON is
targeted at protecting benign applications from remote
exploits. Malicious applications could try to subvert
the API-hooking mechanism used in DAWSON imple-
mentation, but benign applications won’t exhibit such
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:29:28 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006behavior until such time malicious code is injected into
its memory and starts execution. However, DAWSON
will prevent execution of such code, and hence subver-
sion of API-hooking is not a real threat to DAWSON.
Local attacks, such as those launched by malicious
code that may already be resident on the victim sys-
tem, aren’t our focus. Local attacks can indeed sub-
vert or disable the entire DAWSON system. As men-
tioned before, previous AAR techniques such as those
of [16, 3, 23] are also defeated by local attacks since
they don’t provide mechanisms to protect randomiza-
tion keys from local processes.
Memory Fragmentation One commonly cited prob-
lem of ASR is that of possible memory fragmentation,
which may signiﬁcantly reduce usable memory space
for applications. We point out, however, that there is
a simple way to avoid memory fragmentation: generate
a random key k, and add this to the default location
at which each memory object would have been allo-
cated in the absence of ASR. Addresses are “wrapped”
around as needed to stay within user-addressable mem-
ory, and the lower-order bits zeroed out to meet align-
ment requirements. The value of k can be diﬀerent for
diﬀerent processes in UNIX, but has to be shared across
all processes in Windows due to its use of DLLs as op-
posed to shared libraries. Naturally, the technique can
be extended to use diﬀerent keys for diﬀerent memory
regions such as DLLs, stacks and heaps, but this will
introduce some amount of fragmentation. In general,
the trade-oﬀ is between the number of diﬀerent random
keys used and the degree of fragmentation.
Portability across Windows versions. DAWSON
is primarily based on hooking several Win32 API func-
tions and very few native API functions. Both these
APIs are quite stable (with respect to the functional-
ities relevant to our implementation) across Windows
2000, XP, and 2003, thereby easing porting. In terms of
porting eﬀorts, the main eﬀort has been in PEB/TEB
porting, since it relies on kernel patching. It took us
several hours to port the patch from Windows SP1 to
SP2, and Windows 2003. Other parts of implementa-
tion, which were based on user level DLLs and kernel
mode drivers, did not require any change.
5 Analytical Evaluation
In this section, we estimate the eﬀort needed to defeat
attack classes that speciﬁcally target our approach.
5.1 Brute-Force Attacks
Figure 3 summarizes the expected number of attempts
required for diﬀerent attack types. Note that the ex-
pected number of attacks is given by 1/2p, where p
is the success probability for an attack. The numbers
Attack type
Attack target
Stack/Heap
Static data/code
Injected code
Existing code
Injected data
Existing data
262K*
N/A
262K*
> 524K
16.4K
16.4K
16.4K
16.4K
Figure 3. Expected attack attempts.
marked with an asterisk depend on the size of the at-
tack buﬀer, and a value of 4KB has been assumed to
compute the numbers in the table.
Note that an increase in number of attack attempts
translates to a proportionate increase is the total
amount of network traﬃc to be sent to a victim host
before expecting to succeed. For instance, the expected
amount of data to be sent for injected code attacks on
stack is 262K ∗ 4K, or about 1GB. For injected code
attacks involving buﬀers in the static area, assuming a
minimum size of 128 bytes for each attack request, is
16.4K ∗ 128 = 2.1M B.
Injected code attacks. For such attacks, note that
the attacker has to ﬁrst send malicious data that gets
stored in a victim program’s buﬀer, and then overwrite
a code pointer with the absolute memory location of
this buﬀer. Our approach does not disrupt the ﬁrst
step, but foils the second step with a high probability.
The probability of a correct guess can be estimated
from the randomness in the base address of diﬀerent
memory regions:
• Stack: Figure 2 shows that there is 29 bits of random-
ness on stack addresses, thus yielding a probability
of 1/229. To increase the odds of success, the at-
tacker can prepend a long sequence of NOPs to the
attack code. A NOP-padding of size 2n would enable
a successful attack as long as the guessed address falls
anywhere within the padding. Since there are 2n−2
possible 4-byte aligned addresses within a padding of
2n-bytes, the success probability becomes 1/231−n.
• Heap: Figure 2 shows that there is 20 bits of random-
ness in heap addresses. Speciﬁcally, bits 3 and bits
13–31 have random values. Since a NOP padding
of 4K bytes will only aﬀect bits 1 through 12 of ad-
dresses, bits 13–31 will continue to be random. As
a result, the probability of successful attack remains
1/219 for a 4K padding.
It can be shown that for
larger NOP padding of 2n bytes, the probability of
successful attack remains 1/231−n.
• Static data: According to Figure 2, there are 15-bits
of randomness in static data addresses: speciﬁcally,
the MSbit and the 16 LSbits aren’t random. Since
the use of NOP padding can only address randomness
in the lower order bits of address that are already pre-
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:29:28 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006CVE Id
Target
Attack Type
Stack smash/code injection
CVE-2003-0533 Microsoft LSASS
CVE-2003-0818 Microsoft ASN.1 Library Heap overﬂow/code injection
CVE-2002-0649 MSSQL 2000/MSDE
CVE-2002-1123 MSSQL 2000/MSDE
CVE-2003-0352 Microsoft RPC DCOM
Stack smash/code injection
Stack smash/code injection
Stack-smash/jump to EXE code
Eﬀective?
Yes
Yes
Yes
Yes
No
Figure 4. Effectiveness in stopping real-world attacks.
dictable, the probability of successful attacks remains
1/215. (This assumes a NOP padding < 64K.)
Existing code attacks. An existing code attack may
target code in DLLs or in the executable. In either case,
Figure 2 shows that there are 15-bits of randomness in
these addresses. Thus, the probability of guessing the
desired code address is 1/215.
Note that exploitable code sequences may occur at
multiple locations within a DLL or executable, and
this may increase the probability of successful attacks.
However, note that the randomness in code addresses
arise from all but the MSbit and the 16 LSbits.
It
is quite likely that diﬀerent exploitable code sequences
will diﬀer in the 16 LSbits, which means that exploiting
each one of them will require a diﬀerent attack attempt.
Thus, the probability of 1/215 will likely hold.
Injected data attacks involving pointer corrup-
tion. The calculations and the results here are similar
to that for injected code attacks9.
Existing Data Attacks involving pointer corrup-
tion. The main diﬀerence between injected data and
existing data attacks is that the idea of repeating the
attack data isn’t useful here. Thus, the probability of
a successful attack on the stack is 2−29, on the heap is
2−20 and on static data is 2−15.
5.2 Double-pointer attacks
From an attacker’s perspective, a double-pointer at-
tack has the drawback that it requires two distinct
vulnerabilities: an absolute address vulnerability and
a relative address vulnerability. Its beneﬁt is that the
attacker need only guess a writable memory location,
which requires far fewer attempts. For instance, if a
program uses 200MB of data (10% of the roughly 2GB
virtual memory available), then the likelihood of a cor-
rect guess for A is 0.1. For processes that use much
smaller amount of data, say, 10MB, the success proba-
bility falls to 0.005.
9Note that the idea of NOP padding is applicable at a higher
level for data attacks: replicate the attack data several times
in order to account for some uncertainty in the location of the
target object.
6 Experimental Evaluation
6.1 Functionality
We have
implemented DAWSON on Windows
2003 and Windows XP platforms,
including SP1
(build 2600, xpsp1.020828-1920) and SP2 (build
2600.xpsp2 rtm.040803-2158). Most tests have been
done on XP versions with default conﬁgurations, and
Microsoft Oﬃce 2003 and SQLServer 8.00.194.
Over the past year, we have been using a DAWSON-
protected system as one of our development machines.
We have routinely used applications such as the Inter-
net Explorer, SQLServer, Windbg, Windows Explorer,
Word, WordPad, Notepad, Regedit, and so on. We
used Windbg to print the memory map of these appli-
cations and veriﬁed that all regions have been rebased