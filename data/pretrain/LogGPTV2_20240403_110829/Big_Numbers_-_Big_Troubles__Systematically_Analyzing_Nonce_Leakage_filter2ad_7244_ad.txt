bn_mul_fixed_top and bn_from_montgomery_word. By
probing any of those functions, e.g., with Flush+Reload, an
attacker can distinguish small nonces from larger ones.
Unfortunately, this vulnerability is not only easy to exploit,
but patching is hard as small nonces leak in several places.
On June 25, 2019, we reported this issue to OpenSSL, who
decided to target a ﬁx in OpenSSL version 3.0, as it requires
a major redesign of OpenSSL’s Bignumber implementation.
6.2 Nonce Generation
In the following, we analyze nonce generation for different
libraries under the default conﬁguration. DSA and ECDSA
nonces are generated both in the same way.
Rejection Sampling. To generate a nonce k uniformly at
random in the interval [1,q− 1], LibreSSL and BoringSSL
implement rejection sampling. They sample k in the interval
[1,2qbits − 1], where qbits = (cid:98)log2 q(cid:99) + 1. If k exceeds q− 1,
it is rejected, and the procedure is repeated. The ﬁnal k is
uniformly distributed, assuming an unbiased random number
generator. Although rejection sampling is inherently non-
constant time, it only leaks information about rejected nonces.
While we did not ﬁnd issues for BoringSSL, small nonces
leak for LibreSSL, as detailed in Appendix C.
Truncation. OpenSSL ﬁrst generates a large number k(cid:48) in
the interval [0,2qbits+64 − 1], as seen in Algorithm 1 lines 2–
6. To compute the ﬁnal nonce, k(cid:48) is truncated to the target
interval [0,q − 1] via modular reduction (line 8). As with
LibreSSL, small nonces leak during truncation, as detailed in
1 if (a->top == num && b->top == num) {
2
if (bn_wexpand(r, num) == NULL)
3
4
return 0;
if (bn_mul_mont(...))
return 1;
5
6 }
7 ...
8 if (!bn_mul_fixed_top(tmp, a, b, ctx))
9
10 if (!bn_from_montgomery_word(r, tmp, mont))
11
goto err;
goto err;
Listing 1: Simpliﬁed OpenSSL Little Fermat inversion
leaking small nonces (V1) via conditional branching.
USENIX Association
29th USENIX Security Symposium    1773
:x,q // Private key and modulus
:m // Message digest
Algorithm 1: OpenSSL nonce generation by truncation
input
input
output :k // Nonce
1 k(cid:48) ← []
2 while num_bits(k(cid:48)) q);
1
2 -if (!BN_set_bit(k, q_bits)
|| !BN_set_bit(l, q_bits)
3 -
|| !BN_set_bit(m, q_bits))
4 -
5 + q_words = bn_get_top(dsa->q);
6 +if (!bn_wexpand(k, q_words + 2)
7 +
8
|| !bn_wexpand(l, q_words + 2))
goto err;
9
...
BN_set_flags(k, BN_FLG_CONSTTIME);
10
11 +BN_set_flags(l, BN_FLG_CONSTTIME);
12
...
if (!BN_add(l, k, dsa->q)
13
14 -
15 -
16 +
17
18 +BN_consttime_swap(BN_is_bit_set(l, q_bits), k, l,...);
|| !BN_add(m, l, dsa->q)
|| !BN_copy(k, BN_num_bits(l) > q_bits ? l : m))
|| !BN_add(k, l, dsa->q)
goto err;
Listing 2: Vulnerable k-padding in OpenSSL, with code
added (+) and removed (-) during patching.
lines 1–3. The initial k-padding5 executed the second addition
in line 3 conditionally. To prevent attacking this conditional
execution, it was made constant-time.6 As shown in Listing 2,
lines 13–14 unconditionally compute both additions inside
BIGNUMs l and m, while line 15 copies the correct result to k.
By analyzing OpenSSL, we found that k-padding leaks in
several ways. First, we discovered an easy-to-exploit vulnera-
bility leaking the size of the nonce via dmax inside the second
BN_add (Listing 2 line 14). This leakage denoted as (V2) al-
lows full key recovery. Second, our tool also reported data
leakage in line 15, already known before and denoted (V3).
By distinguishing whether buffer k or l is copied, one learns
the same information as before. Third, we found the same in-
formation leaking via the nonce’s top variable, denoted (V5).
This leakage exists in all patched versions and occurs when k
is processed in lines 16 and 18. Although harder to exploit, we
show an end-to-end attack in an SGX setting in Appendix B.
K-padding Resize Vulnerability (V2). As mentioned before,
OpenSSL lazily resizes Bignumbers whenever their space is
exhausted. E.g., when adding two BIGNUMs with BN_add, the
result BIGNUM is expanded to the largest top value of the
summands plus one limb for a potential carry. Unfortunately,
lazy resizing happens during nonce padding in lines 13 and
3This change was introduced in OpenSSL commit 8a99cb2 in 2013.
4It leaks several intermediate values via lookup tables Te0 - Te3.
5Nonce padding was introduced in OpenSSL commit 0ebfcc8 in 2005.
6Constant-time padding was introduced in OpenSSL commit c0caa94.
1774    29th USENIX Security Symposium
USENIX Association
FFDB41C5
041C26F4
q
k
resize
resize
resize
00000001
03F768B9
k + q
FFDB41C5
001C26F4
FFF768B9
00000002
03D2AA7E
k + 2q
00000001
FFD2AA7E
top
dmax
Figure 2: OpenSSL/LibreSSL k-padding causes Bignum-
ber resize, depending on the topmost nonce bits (V2).
14 of Listing 2. Consider the example in Figure 2, where the
BIGNUMs k and q contain one limb each. On the left side, the
ﬁrst addition k + q resizes the result buffer to two limbs in
order to hold the additional carry exceeding the ﬁrst limb. The
second addition k + 2q resizes to three limbs, although only
two limbs are actually used since the carry is zero. In contrast,
on the right-hand side, the ﬁrst addition does not overﬂow, and
the second addition only requests two limbs. Since the result
BIGNUM already has two limbs, no actual resize happens.
By distinguishing whether one or two resize operations
happen, a side-channel attacker can learn information about k.
The second resize only happens if the ﬁrst addition over-
ﬂows into the carry limb. In practice, such an overﬂow
can only happen if q is close to a word boundary, that is,
the topmost bits are set. Again, consider w as word size.
Then, Q = (cid:98)log2w (q)(cid:99) + 1 is the number of words needed
to represent q, and qbound = (2w)Q > q is the upper bound
(exclusive) of q representable with Q words. No resize
happens if k + q top via the number of limb-wise additions carried out.
Also, BN_is_bit_set (line 18) leaks via an early abort, as de-
tailed in Appendix B. This has the same implications as (V2).
Naturally, exploitation is harder than (V2), as the leaky
code is only a few instructions. Nevertheless, we reported
this residual leakage already back in October 2018. Since
we could not observe any progress, we developed an end-
to-end SGX attack, as outlined in Appendix B. Reporting
our attack on May 8, 2019 triggered a pull request with our
proposed patch [19]. However, the pull request was closed,
since the OpenSSL team decided for a long-term mitigation
7See OpenSSL commit a9cfb8c.
8See OpenSSL commit 00496b6.
USENIX Association
29th USENIX Security Symposium    1775
Table 4: OpenSSL/LibreSSL curves leaking L nonce bits
via k-padding (V2)–(V5) on 32-bit and 64-bit systems.
L32 L64 Curve
L32 L64
Curve
brainpoolP160 3.4
brainpoolP320 2.2 2.2
brainpoolP192 1.7 1.7 brainpoolP384 0.3 0.3
brainpoolP224 2.4
brainpoolP512 1.0 1.0
–
brainpoolP256 1.0 1.0
–
abandoning the minimal representation invariant similar to
BoringSSL [7]. While the decision for a complete ﬁx is en-
couraging, this vulnerability remains unpatched until then.
6.4 ECDSA Scalar Multiplication
K-padding Resize Vulnerability (V2). Similar to DSA, our
investigations revealed the same Bignumber resize vulnerabil-
ity also in ECDSA, leading to CVE-2018-0735. Only curves
with a word-aligned modulus (i.e., the curve cardinality) are
vulnerable. We found that all Brainpool curves are exploitable
and leak up to 3.4 bits, as listed in Table 4. Luckily, other
curves have a word-aligned modulus but are not practically