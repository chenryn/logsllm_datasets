niques also cannot differentiate between reduction in SNR due to
channel fading and interference. Still, SNR-based bit rate adapta-
tion works well in these systems because they do not experience
signiﬁcant interference from other transmitters by design; these
techniques may fail in wireless LANs that experience non-trivial
co-channel interference.
We conclude this section with the observation that SoftRate, in
spite of being a physical-layer metric-based scheme itself, does
not suffer from the pitfalls of SNR-based schemes. Because Soft-
PHY hints directly estimate packet BER, they do not require any
environment-speciﬁc or hardware-speciﬁc calibration. Moreover,
SoftPHY hints along with an interference-detection heuristic can
track the variation in the interference-free channel BER across the
entire packet without the additional overhead of pilots.
3. DESIGN
This section presents the design of SoftRate. We start by dis-
cussing our design goals and giving an overview of the system.
Like other link-layer bit rate adaptation protocols, SoftRate aims
to maximize throughput. The link-layer throughput achieved at a
certain channel BER and bit rate depends on the error recovery
mechanism used (e.g., does the link layer retransmit entire frames,
or only the bits in error?). Therefore, SoftRate’s use of BER as the
bit rate adaptation signal has two beneﬁts:
1. BER is an accurate predictor of performance. It is a sufﬁcient
statistic that predicts the throughput of various error recovery
protocols; as a result, SoftRate cleanly integrates with many
error recovery schemes, as we show later.
2. BER is responsive. It can be calculated over short timescales
on the order of individual frame transmissions, which allows
SoftRate to respond to rapid changes in channel conditions.
The SoftRate protocol works as follows. The SoftRate receiver
uses SoftPHY hints exported by the PHY to compute the average
BER for each received frame (§3.1), employing a heuristic to detect
and excise those portions of the frame subject to strong interfer-
ence (§3.2). The SoftRate receiver then sends the interference-free
BER estimate to the sender in a link-layer feedback frame. At the
sender’s link layer, the SoftRate algorithm (§3.3) uses the per-frame
BER feedback to pick the best transmit bit rate for the next frame.
To ensure reliable delivery of feedback, SoftRate always sends
its link-layer feedback frame at the lowest available bit rate in a
“reserved” time slot, much like 802.11 link-layer ACKs. Feedback
is sent whether or not the frame was in error, as long as the frame’s
preamble and header were decoded correctly. To correctly deter-
mine the identities of the sender and receiver even when the frame
has an error, link-layer headers are protected with a separate CRC.
If the frame has no errors, then the BER feedback is one compo-
nent of the link-layer ACK. Thus the SoftRate protocol incurs very
little extra overhead compared to existing protocols—a CRC in the
link-layer header, and a BER measurement in the link-layer ACK.
If the sender does not receive any feedback for a frame, the most
likely cause is a noisy channel preventing the receiver from even
detecting the frame. Therefore SoftRate moves to a lower bit rate
if it does not receive feedback for a few consecutive frames (§3.2).
Figure 2 shows how SoftRate ﬁts in the layered network architec-
ture. SoftRate operates using only information provided via the lay-
ered SoftPHY interface and can inter-operate with any PHY that is
capable of estimating bit-conﬁdences. Our particular design works
for any PHY that uses a linear convolutional or block code, which
essentially covers all practical wireless systems of interest.
3.1 Estimating BER with SoftPHY
We ﬁrst show how to compute SoftPHY hints for any PHY using
a linear convolutional or block code, examples of which include
WiFi, WiMax, and Zigbee. Our approach uses extra information
that can be easily obtained and exported from existing decoders.
Suppose xk, k = 1 . . . N are the input bits to the encoder at
the sender. At the receiver, let r denote the received signal input
to the corresponding decoder. We propose the use of a maximum
likelihood (ML) or a maximum aposteriori probability (MAP) de-
coder with soft outputs (e.g., Viterbi [6] with soft outputs [8], or
BCJR [2]) at the receiver. The output of such a decoder is not bits,
but rather log likelihood ratios (LLRs) for each received bit, where
LLR(k) = log
P (xk = 1|r)
P (xk = 0|r)
.
(1)
Let yk, k = 1 . . . N denote the output from the decoder at the
receiver. Given the LLRs, the receiver simply “slices” LLR(k) to
determine the decoded output bit yk:
 1 : LLR(k) ≥ 0
0 : LLR(k)  βi, the throughput at rate Ri−1 will exceed that at rate Ri.
Therefore, the sender increases bit rate if bi  βi, and does nothing if bi ∈ (αi, βi).
If bi is far from the range (αi, βi), then we can do better by
jumping multiple levels to a better bit rate. In the example above,
if the BER at 18 Mbps is above 10−2, then one can jump two rates
lower to ﬁnd a bit rate that has a BER under 10−5, as per Fig-