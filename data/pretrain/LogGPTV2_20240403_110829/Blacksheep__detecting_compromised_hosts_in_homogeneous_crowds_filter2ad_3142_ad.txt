non-infected
non-infected
non-infected
non-infected
non-infected
non-infected
non-infected
non-infected
non-infected
r2d2
r2d2
r2d2
r2d2
stuxnet
stuxnet
stuxnet
stuxnet
tdss
tdss
tdss
tdss
tld3
tld3
tld3
tld3
zeroaccess
zeroaccess
zeroaccess
zeroaccess
Table 1: Cluster results for the Windows 7 dataset with a clus-
tering threshold of 1.8.
The second set of memory dumps was acquired using our mem-
ory acquisition driver from Windows XP machines (running on
VirtualBox) to test the performance of Blacksheep on non-perfect
dumps. The driver was used to acquire the memory dumps, and
these dumps were transferred over the network to a central server.
This method of acquisition produces many inconsistencies, and
thus, introduces noise into Blacksheep’s analysis.
In addition, we have performed different, common tasks on the
different machines (such as web browsing, working on Ofﬁce doc-
uments, watching media ﬁles, ...) to ensure that the memory dumps
are diverse.
We tested these conﬁgurations against a range of publicly avail-
able rootkits. In particular, we used the well-known Mebroot, Stuxnet,
Rustock, and Blackenergy rootkits, two rootkits in the TDSS family
(tdss and tdl3), and the r2d2 Trojan developed by the German gov-
ernment. Unfortunately, several existing rootkits do not function
properly on Windows 7, so the range of tested rootkits is smaller
for the ﬁrst data set (the Windows 7 - QEMU data).
6.1 Windows 7 - QEMU Introspection
We tested Blacksheep against a set of 40 memory dumps taken
through QEMU VM introspection. Within the set, 20 of the dumps
were clean, and 20 were infected with rootkits, with 4 machines in-
fected with each of 5 rootkits. After analyzing these dumps, Black-
sheep generated a hierarchical clustering, shown as dendrogram in
Figure 2. Based on the selected cluster distance threshold, two pos-
sible sets of clusters are shown in Table 1.
The detection rate of Blacksheep depends on the threshold cho-
sen in the clustering step. After producing clusters, all clusters of
size 4 or less were tagged as malicious. This is because we expect
that benign dumps group together, while infected dumps form out-
liers, and that infected dumps will not account for more than 10%
of the installed machines in an organization. With a threshold of
1.8, Blacksheep achieves a true positive rate of 100%, and a false
positive rate of 0%. As expected, all rootkits cluster together with
other rootkits in their families. This is because of the similar dif-
ferences that these rootkits introduce into the kernel code and data.
6.2 Windows XP - Driver-acquired Memory
Blacksheep was also tested in detecting rootkits on Windows XP.
Again, 10 clean dumps were clustered, this time together with 8
rootkits. The hierarchical clustering results are shown in Figure 3,
and resulting clusters are shown in Table 2. Again, all clusters of
size one were tagged as malicious.
With a clustering threshold of 0.6, Blacksheep produced 62.5%
true positives and 0% false positives, and with a clustering thresh-
old of 0.4, Blacksheep produced 75% true positives and 5.5% false
positives.
Figure 2: Hierarchical cluster dendrogram for the Windows 7
dataset.
349These results demonstrate how critical consistent memory dumps
are to Blacksheep’s operation. Speciﬁcally, while conﬁguration
analysis, code analysis, and entry point analysis performed as well
as for the QEMU images, data comparison suffered. This is due to
kernel data continuing to change while the dump is being acquired,
creating inconsistencies in the ﬁnal image. In contrast, the code
and entry point sections of kernel memory are considerably more
stable.
6.3 Performance
The runtime performance of Blacksheep depends on several fac-
tors, including the size of the memory dumps, the size (or absence)
of the swap ﬁle, and the hardware involved. For memory dumps
of one gigabyte of RAM, we were able to compute the differences
between a pair of memory dumps in 10 minutes. The hierarchical
clustering requires O(n2) comparisons, but the results are cached
so that after the initial clustering, every new dump will require
O(n) comparisons to recompute the clusters. The comparisons
themselves are trivial to parallelize, and the clustering step is com-
puted very quickly, so Blacksheep can be horizontally scaled to
linearly increase performance.
7. DISCUSSION
In this section, we discuss the limitations of our approach. Black-
sheep relies on two main assumptions: i) it is possible to collect
comparable memory dumps, and ii) rootkit infections modify mem-
ory dumps in a detectable way. When either of these assumptions
is violated, the approach implemented by Blacksheep fails.
The ﬁrst issue is related to how and when the dumps are col-
lected. To maximize the homogeneity among memory dumps, it
would be best to collect memory snapshot in similar states (and at
similar times) across all hosts. Unfortunately, it is not always easy
to determine “checkpoints” that are comparable across machines,
and, therefore, it can often be the case that memory dumps are col-
lected at very different times, and in very different states, resulting
in unwanted differences in memory layout and contents.
Furthermore, it is extremely important to minimize the number
of inconsistencies in the analyzed memory dumps. This is an espe-
cially challenging problem when acquiring memory from physical
hardware, as the various acquisition methods detailed in 5 all have
various drawbacks.
Virtualization and cloud-based systems offer an ideal setting for
the collection of memory dumps, as many virtualization environ-
ments offer the ability to take snapshots of the guest operating sys-
tem at well-deﬁned times, which improves the chances of collect-
ing homogeneous images.
In addition, virtualized hardware can
offer a level of homogeneity that real hardware would not be able
to achieve, as real hardware can fail and might be substituted with
different lines of products, which, in turn, might require different
drivers.
The second issue is related to the way in which rootkits affect the
layout and contents of memory. Rootkits could attempt to evade
detection by modifying parts of the kernel memory that, by design,
change frequently across machines. These high-entropy areas can-
not be used as a basis to determine the crowd invariants, and, there-
fore, represent an opportunity for evasion. Our technique cannot
detect this type of rootkits. However, the implementation of such
system would be very challenging (and, in fact, there are no known
instances of such malware), because the same unpredictability that
makes deriving invariant difﬁcult, would likely make a rootkit un-
stable.
Another problem is the process of updating a crowd of similar
computers, which might introduce changes that are mis-detected as
Figure 3: Hierarchical cluster dendrogram for the Windows
XP dataset.
rustock
r2d2
non-infected
non-infected
non-infected
non-infected
non-infected
non-infected
non-infected
non-infected
stuxnet
non-infected
non-infected
tdss
mebroot
zeroaccess
tdl3
blackenergy
rustock
r2d2
non-infected
non-infected
non-infected
non-infected
non-infected
non-infected
non-infected
non-infected
stuxnet
non-infected
non-infected
tdss
mebroot
zeroaccess
tdl3
blackenergy
Table 2: Cluster results for the Windows XP dataset with a
clustering threshold of 0.5 (left) and 0.4 (right).
350an infection. In this case, Blacksheep would need to be disabled
until a sizable amount of machines are updated, and a sufﬁcient
baseline re-established.
Finally, it is important to note that Blacksheep’s approach is ag-
nostic to memory location randomization techniques such as ASLR.
This is due to the fact that Blacksheep compensates for relocation
in its code analysis, and uses relative memory locations for its data
and entry point analyses.
8. CONCLUSIONS
In this paper, we have described Blacksheep, a novel system
designed to detect kernel-level rootkit infestations in a crowd of
similarly-conﬁgured machines. We have discussed the current state
of the art in the ﬁeld, argued why Blacksheep extends it, and pre-
sented the results of our analyses. We feel that Blacksheep would
be an useful tool for organizations with the right population of ma-
chines, as such organizations can greatly beneﬁt from Blacksheep’s
ability to recognize existing infections and 0-days and its ease of
administration compared to present security offerings.
Furthermore, we have offered the insight into some internal work-
ings of the Windows kernel in the hopes that it would be useful to
the scientiﬁc community.
Acknowledgments: This work was supported by the Ofﬁce of
Naval Research (ONR) under Grant N000140911042 and the Na-
tional Science Foundation (NSF) under grants CNS-0845559 and
CNS-0905537.
9. REFERENCES
[1] Gmer. http://www.gmer.net/, May 2012.
[2] Hbgary responder pro.
http://www.hbgary.com/responder-pro-2, May 2012.
[3] Qemu website. http://qemu.org, May 2012.
[4] Windows academic program.
http://www.microsoft.com/education/facultyconnection/
articles/articledetails.aspx?cid=2416, Apr. 2012.
[5] A. Baliga, V. Ganapathy, and L. Iftode. Detecting
kernel-level rootkits using data structure invariants. IEEE
Transactions on Dependable and Secure Computing, Vol. 8,
No. 5, Sept. 2010.
[6] B. Blunden. The Rootkit Arsenal. Wordware Publishing,
2009. Chapter 7.9.
[7] M. Burdach. Finding digital evidence in physical memory. In
Black Hat Federal Conference, 2006.
[8] M. Carbone, W. Lee, W. Cui, M. Peinado, L. Lu, and
X. Jiang. Mapping kernel objects to enable systematic
integrity checking. In ACM Conf. on Computer and
Communications Security, 2009.
[9] B. Cogswell and M. Russinovich. Rootkitrevealer.
http://technet.microsoft.com/en-us/sysinternals/bb897445,
Nov. 2008.
[10] M. D. Ernst, J. H. Perkins, P. J. Guo, S. McCamant,
C. Pacheco, M. S. Tschantz, and C. Xiao. The daikon system
for dynamic detection of likely invariants. Science of
Computer Programming, 69, Dec. 2007.
[11] F. Gadaleta, N. Nikiforakis, J. Mühlberg, and W. Joosen.
Hyperforce: Hypervisor-enforced execution of
security-critical code. Information Security and Privacy
Research, pages 126–137, 2012.
[12] F. Gadaleta, N. Nikiforakis, Y. Younan, and W. Joosen. Hello
rootkitty: a lightweight invariance-enforcing framework.
Information Security, pages 213–228, 2011.
[13] G. L. Garcia. Forensic physical memory analysis: an
overview of tools and techniques. In TKK T- 110.5290
Seminar on Network Security, 2007.
[14] K. Grifﬁn, S. Schneider, X. Hu, and T. cker Chiueh.
Automatic generation of string signatures for malware
detection.
[15] G. Hoglund. Rootkits: Subverting the Windows Kernel.
Addison-Wesley, 2005.
[16] G. Jacob, H. Debar, and E. Filiol. Behavioral detection of
malware: from a survey towards an established taxonomy.
Journal in Computer Virology, 4:251–266, 2008.
10.1007/s11416-008-0086-0.
[17] A. Kapoor and R. Mathur. Predicting the future of stealth
attacks. Virus Bulletin conference, Oct. 2011.
[18] J. D. Kornblum. Exploiting the rootkit paradox with
windows memory analysis. International Journal of Digital
Evidence, 2006.
[19] J. D. Kornblum. Using every part of the buffalo in windows
memory analysis. Digital Investigation, Mar. 2007.
[20] Z. Li, M. Sanghi, Y. Chen, M. yang Kao, and B. Chavez.
Hamsa: fast signature generation for zero-day polymorphic
worms with provable attack resilience. In SP ’06:
Proceedings of the 2006 IEEE Symposium on Security and
Privacy, pages 32–47. IEEE Computer Society, 2006.
[21] M. H. Ligh. Volatility malware plugins.
http://code.google.com/p/malwarecookbook.
[22] Z. Lin, J. Rhee, X. Zhang, D. Xu, and X. Jiang. Siggraph:
Brute force scanning of kernel data structure instances using
graph-based signatures. In the 17th Network and Distributed
System Security Symposium, 2011.
[23] McAfee. Mcafee deepsafe.
http://www.mcafee.com/us/solutions/mcafee-deepsafe.aspx,
2011.
[24] Microsoft. Kernel patch protection: Faq.
http://msdn.microsoft.com/en-us/
windows/hardware/gg487353, Sept. 2007.
[25] N. L. Petroni, J. Timothy, F. Aaron, W. William, and
A. Arbaugh. An architecture for speciﬁcation-based
detection of semantic integrity violations in kernel dynamic
data. In Proceedings of the USENIX Security Symposium,
pages 289–304, 2006.
[26] M. E. Russinovich and D. A. Solomon. Windows Internals.
Microsoft, 5th edition, June 2009.
[27] J. Rutkowska. Rootkits vs. stealth by design malware.
https://www.blackhat.com/presentations/bh-europe-06/
bh-eu-06-Rutkowska.pdf, 2006.
[28] J. Rutkowska. Beyond the cpu: Defeating hardware based
ram acquisition (part i: Amd case). In Black Hat DC, 2007.
[29] A. Schuster. Pool allocations as an information source in
windows memory forensics. In Pool Allocations as an
Information Source in Windows Memory Forensics, 2006.
[30] A. Schuster. Searching for processes and threads in microsoft
windows memory dumps. In Digital Investigation, 2006.
[31] A. Seshadri, M. Luk, N. Qu, and A. Perrig. Secvisor: A tiny
hypervisor to provide lifetime kernel code integrity for
commodity oses, 2007.
[32] R. Treit. Some observations on rootkits.
http://blogs.technet.com/b/mmpc/archive/2010/01/07/
some-observations-on-rootkits.aspx, Jan. 2010.
351[33] D. Wagner. Mimicry attacks on host-based intrusion
[36] Y. Xie, H. Kim, D. O’Hallaron, M. Reiter, and H. Zhang.
detection systems. Proceedings of the 9th ACM conference
on computer and communications security, 2002.
[34] A. Walters. The volatility framework: Volatile memory
artifact extraction utility framework.
https://www. volatilesystems.com/default/volatility.
[35] Z. Wang, X. Jiang, W. Cui, and P. Ning. Countering kernel
rootkits with lightweight hook protection. In ACM Conf. on
Computer and Communications Security, Nov. 2009.
Seurat: A pointillist approach to anomaly detection. In
Recent Advances in Intrusion Detection, pages 238–257.
Springer, 2004.
[37] H. Yin, P. Poosankam, S. Hanna, and D. Song. Hookscout:
Proactive binary-centric hook detection. In Proceedings of
the 7th Conference on Detection of Intrusions and Malware
& Vulnerability Assessment, Bonn, Germany, July 2010.
352