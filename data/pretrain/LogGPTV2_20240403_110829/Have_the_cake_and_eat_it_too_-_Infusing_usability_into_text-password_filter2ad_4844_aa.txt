title:Have the cake and eat it too - Infusing usability into text-password
based authentication systems
author:Sundararaman Jeyaraman and
Umut Topkara
Have the cake and eat it too – Infusing usability into text-password based
authentication systems ∗
Sundararaman Jeyaraman and Umut Topkara
CERIAS and Department of Computer Sciences
Purdue University
jsr,PI:EMAIL
Abstract
Text-password based authentication schemes are a pop-
ular means of authenticating users in computer systems.
Standard security practices that were intended to make
passwords more difﬁcult to crack, such as requiring users
to have passwords that “look random” (high entropy), have
made password systems less usable and paradoxically, less
secure. In this work, we address the need for enhancing the
usability of existing text-password systems without necessi-
tating any modiﬁcations to the existing password authenti-
cation infrastructure. We propose, develop and evaluate a
system that automatically generates memorable mnemonics
for a given password based on a text-corpus. Initial experi-
mental results suggest that automatic mnemonic generation
is a promising technique for making text-password systems
more usable. Our system was able to generate mnemonics
for 80.5% of six-character passwords and 62.7% of seven-
character passwords containing lower-case characters (a-
z), even when the text-corpus size is extremely small (1000
sentences).
1. Introduction
Text-password based authentication schemes are a pop-
ular means of authenticating users in computer systems.
The security of password based authentication systems is
directly proportional to the difﬁculty with which an adver-
sary can crack the passwords. A password that is difﬁcult
to crack could be intuitively thought of as a string that is
not based on a dictionary word and has maximum entropy
(“looks” totally random) [29, 13, 17, 38]. However, the abil-
ity to remember completely unrelated sequence of items is
∗
Portions of this work were supported by Grants IIS-0325345, IIS-
0219560, IIS-0312357, and IIS-0242421 from the National Science Foun-
dation, Contract N00014-02-1-0364 from the Ofﬁce of Naval Research, by
sponsors of the Center for Education and Research in Information Assur-
ance and Security, and by Purdue Discovery Park’s e-enterprise Center.
very limited in human beings. Hence, the more secure the
password is (the greater the randomness), the more difﬁ-
cult it is for users to remember it. This limited ability is
further taxed by the fact that a typical user has access to
multiple computer systems and is advised to use a unique
password for each system. The very requirements that make
text-password systems secure seem to make them less user-
friendly and paradoxically, less secure. Addams et al. [1] in
their survey of users from various organizations, found that
standard practices adopted to ensure the security of pass-
word authentication systems e.g. expiry mechanisms that
force users to periodically change passwords, actually re-
sulted in the lowering of security. For example, 50% of the
interviewed users wrote down their passwords in some form
– making the passwords susceptible to social engineering
attacks. Also, it was found that password expiry mecha-
nisms resulted in the users frequently making “poor” pass-
word choices.
Many alternate schemes have been proposed to achieve
both security and usability in authentication systems. For
example, Graphical Password schemes [10, 12, 4, 11],
leverage the fact that it is easier for the users to remem-
ber pictures. However, we believe that text-password based
systems will still remain prevalent in the near future for rea-
sons such as user resistance to change and cost of modifying
the existing systems. In this work, we address the need for
enhancing the usability of text-password systems without
necessitating any modiﬁcations. We have developed a sys-
tem which could help users memorize several random pass-
words with ease using mnemonics. Our system is comple-
mentary to the existing text-password systems and could be
used as an add-on or a helper utility. Our work is a promis-
ing ﬁrst step towards reconciling, the seemingly conﬂicting
requirements of text-password systems: security and usabil-
ity.
Our system increases the memorability of random look-
ing passwords by supplying the users with mnemonics that
serve as “reminders” of the passwords. Mnemonics have
been widely-used as effective memory enhancement tools
to help people remember lists of words [36]. In fact, many
security-conscious users generate their passwords based on
phrases that they can remember easily. For example, the
sentence “The quick brown fox jumped over the lazy dog”
could be used as a mnemonic to remember the password
“Tqbfj01d”. A recent study by Yan et al.
[38] conﬁrms
the intuition that mnemonic-based passwords are memo-
rable. But, the security of passwords generated using such
an approach depends heavily on the ability of an user to
come up with memorable mnemonics.
It is conceivable
that, as the number of passwords each user has to remem-
ber increases, the user’s capability to generate memorable
mnemonics becomes increasingly taxed. This could lead to
insecure practices such as reusing passwords (or their minor
variants) across different systems. Our system removes this
dependency by relieving the user from the task of generat-
ing memorable mnemonics.
Currently, our system takes an existing text corpus and
pre-computes a database of syntactic and semantic vari-
ations of its sentences, where each variation encodes a
different password. Later, for any given random text-
password, our system searches through the pre-computed
sentence space and automatically generates a list of easier-
to-remember natural language sentences that could serve as
memory-aids for remembering the password.
The rest of the paper is organized as follows. In Section
2, we describe the architecture and implementation of the
automatic mnemonic generation system. In Section 3, we
discuss some of the issues that arose while developing our
mnemonic generation system. We evaluate our system and
report our results in Section 4. In Section 5, we discuss re-
lated work that address the challenge of making authentica-
tion systems more user-friendly. Finally, we discuss future
work in Section 6 and conclude in Section 7.
2. Automatic mnemonic generation
The ability of human beings to remember a sequence of
unrelated items is very limited [16, 2]. Hence, remembering
a randomly generated password that consists of a sequence
of unrelated characters is an onerous task that frequently re-
sults in users resorting to unsafe practices such as writing
down their passwords [38]. However, research in cognitive
psychology [7, 5] has shown that the ability to memorize
and then recollect information is positively inﬂuenced by
associating additional semantic content with that informa-
tion. The key idea is to automatically generate and associate
additional semantic content for any given password so that
the additional semantic content then acts as a mnemonic de-
vice that assists the user in recalling the password. We use
natural language sentences that convey some news or a story
to provide the semantic content. We refer to the association
between a password string and a mnemonic as encoding the
password into the mnemonic. One possible way to encode a
password in a mnemonic could be to represent every charac-
ter in the password string by the ﬁrst letter of a word in the
mnemonic. For example, “The quick brown fox jumped”
can be used to encode the password “qbfj”. We do not use
stop-words to encode characters (in the previous example,
the word ‘The’ was not used to encode any character). For
expository purposes, in the rest of this section, we assume
that the passwords consist entirely of lower-case Latin char-
acters (a-z). Later in Section 3.1, we explain schemes to
encode upper-case, digits and special characters.
The goal of automatic mnemonic generation is to au-
tomatically generate natural language sentences containing
some news or a story to encode a given password. Instead
of generating the sentences from scratch, we use a manually
created corpus of natural language sentences each of which
contain some news or story. For a password of a given
length, if we have a large enough corpus, then it should be
trivially possible to encode all possible passwords using the
sentences in that corpus. However, it is difﬁcult to obtain a
large manually created corpus of sentences. Though there
is a lot of text available electronically (web pages, project
Gutenberg [26]), most of the sentences do not contain mem-
orable information. For example, the sentences found in
literary works obtained from project Gutenberg are mostly
descriptive in nature, with very little “interesting” informa-
tion to make them memorable. Moreover, even if such a
corpus is available, the space requirements of such a corpus
is beyond the reach of most modern day computers. For
example, to support a password space of 268 passwords (8
character passwords with characters from a-z), we need a
corpus of the size in the order of 268 sentences. Even if
each sentence were to take only 10 bytes, such a corpus
would occupy more than a terabyte of space.
We address these concerns by using a small core-corpus
of highly memorable natural language sentences. To offset
the lack of variability in a small corpus, we generate and
store the semantic variants of each sentence in a compact
fashion. Given a password, we check if the sentences in
the core-corpus are sufﬁcient to encode it. If not, we per-
form a dynamic search through the space of semantic vari-
ants to identify a variant that can encode the password. Fig-
ure 2 provides a schematic representation of the automatic
mnemonic generation process. In the following sections, we
describe the major components involved in the automatic
generation of mnemonics.
2.1. Reuters Corpus
We use the Reuters Corpus Volume 1 (RCV1) to obtain
our core-corpus. The RCV1 has over 800,000 news stories
— typical of the annual English language news output of
Reuters. Speciﬁcally, we use the headlines from each news
2
Password
WordNet
Core Corpus
+
Semantic Variants
Search & Rank
Core Corpus
POS Tagger
W
ord sense
Morphological
Analysis
m  for m
S te
Syntactic Analysis   
Semantic Analysis
Mnemonics list
Figure 1. Schematic diagram of the automatic mnemonic generation process. The part-of-speech
(POS) and stem information of each word in the core-corpus sentences is input to WordNet to produce
semantic variants. For any given password, the semantic variants can then be searched for a match.
story to form our core-corpus. The headlines are particu-
larly attractive candidates as mnemonics because:
2. We then use WordNet [37] and the part-of-speech in-
formation to generate semantic variants of each word.
1. They are simple in structure and hence easy to under-
stand by even the average user.
2. They provide summaries of events and hence contain
more semantic information than sentences found else-
where.
3. They are written with the intention of catching the at-
tention of the reader and hence are bound to be very
memorable.
An example of a headline that contains memorable infor-
mation is: “Egyptian plane, overshoots runway, hits Turkish
taxi.”
2.2. Generating semantic variants
We generate semantic variants of each sentence in the
core-corpus as follows:
1. We use a sophisticated part-of-speech (POS) tagger to
morphologically analyze every word in each sentence
and tag it with the appropriate part-of-speech. We use
the part-of-speech as a ﬁrst-degree approximation of
the real sense of the word.
Part of speech tagging: A vital piece of information
that is necessary for generating semantic variants of a sen-
tence is the sense information about each word in the sen-
tence. Many words have different meanings or senses in
different contexts. For example, the word bank can have the
following senses: ‘the river bank’ or ‘the Chase-Manhattan
bank’. The correct sense of words is necessary to main-
tain semantic coherence of the generated variants. Without
the knowledge of the appropriate sense, semantic variation
techniques such as synonym substitution do not work very
well. Currently, we do not distinguish between all the dif-
ferent senses of a word. We detect only those senses that
manifest themselves as differences in parts of speech. For
example, the word butter can be used both as a noun and a
verb. We use the Stanford Log Linear Part-of-speech Tagger
[30] to obtain the part-of-speech information of the words
in each sentence. The part-of-speech information serves as
a ﬁrst-degree approximation of word sense. In addition to
the part-of-speech information, we perform morphological
analysis using PC-KIMMO [23] to obtain the “root” forms,
tense and number information about verbs and plural nouns.
WordNet and Semantic variant space: WordNet is a
lexical reference system developed by researchers at Prince-
3
ton University [37]. It organizes English nouns, verbs, ad-
jectives and adverbs into synonym sets, each representing
one underlying lexical concept. Different syntactic and se-
mantic relations link the synonym sets. WordNet can be
logically thought of as a labeled graph where synonym sets
are the nodes and the edges represent semantic relation-
ships. For a given word and its sense, it is possible to obtain
semantically related words such as synonyms (taxi → cab)
, antonyms (hit → miss), hyponyms (taxi → minicab)
and hypernyms (taxi → car). It is possible to traverse fur-
ther along the links to obtain a “transitive closure” of hyper-
nyms and hyponyms (hypernyms of hypernyms, hyponyms
of hyponyms, synonyms of hypernyms and so on). Let sen-
tence Si be a sequence of words wi,1, wi,2,··· , wi,j. Then
the semantic variant space of Si is represented in the corpus
as Wi,1, Wi,2,··· , Wi,j where Wi,k is the set of words that
are semantically related to wi,k. Figure 2 contains an exam-
ple of semantically related words obtained through Word-
Net. By traversing through the semantic variant space, spe-
ciﬁc variants can be obtained. For example, “Zulu balloon,
misses dock, kills Kirghiz ambulance” is a semantic variant
of “Egyptian plane, overshoots runway, hits Turkish taxi”.
2.3. Dynamic search of semantic variants
For a given password, if none of the sentences in the cor-
pus can be used as a mnemonic, then the space of semantic
variants of each sentence is searched for a possible match.
Informally, a match is found if there exists at least one se-
mantic variant that is capable of encoding the password.
Formally, a match is found for a password with k characters
c1, c2,··· , ck, if and only if ∃i such that there is a mapping
{w1, w2,··· , wk} −→ {Wi,x× Wi,x+1×···× Wi,x+k−1},
where 1 ≤ x, x + k − 1 ≤ |Si| and wy encodes cy for
1 ≤ y ≤ k. For each match found, we use the tense and
number information obtained using morphological analysis
to regenerate the surface form of the words in the mnemonic
( e.g. {f lip, presenttense, thirdperson, singular} →
f lips ). Finally, the user chooses one mnemonic from all
the listed matches.
3. Discussion
3.1. Encoding passwords in mnemonics
Apart from the ﬁrst letter encoding technique used to
describe the automatic mnemonic generation process, the
other possible encoding schemes are:
1. nth letter encoding: This is a generalized version of the
ﬁrst letter technique where every character in the pass-
word string is represented by the nth letter of a word in
the mnemonic. For example, the same mnemonic “The
quick brown fox” can be used to encode the password
“huro” using a second letter encoding. The obvious
limitation for this technique is the fact that words are
of limited size. For example, we cannot use a 10th
letter encoding in the previously mentioned mnemonic
since none of the words are that long. Another limita-
tion might be the fact that the nth letter encoding might
not be as user-friendly as the ﬁrst letter encoding.