stands for a list of names, which are restricted via ν to σ.
The domain dom(ϕ) of ϕ is the domain of σ. A frame can
also be considered as a speciﬁc extended process where the
only plain process is 0. Every extended process A induces
a frame ϕ(A) which is obtained from A by replacing every
plain process and substitution of restricted variables embed-
ded in A by 0. Intuitively, a frame captures the knowledge of
the attacker (who has access to the variables xi), where the
restricted names n are a priori not known to the attacker.
The domain dom(A) of A is dom(ϕ(A)).
By fn(A) and fv(A) we denote the sets of free names
and free variables, respectively, in the process A, i.e., the
variables and names not bound by a ν or an input com-
mand c(x). Note that, for example, x is free in the process
{x (cid:55)→ s}, while it is bound in (νx){x (cid:55)→ s}. We call names
that occur free in a process, excluding channel names, global
constants. An extended process A is closed if the set fv(A)
excluding variables assigned in active substitutions in A is
empty. Renaming a bound name or variable into a fresh
name or variable, respectively, is called α-conversion. The
process A{x (cid:55)→ s} is the process A in which free occurrences
of x have been replaced by s.
An evaluation context C is an extended process with a
hole, i.e., it is of the form (να)([·](cid:107) A), where A is an ex-
tended process. We write C[B] for (να)(B (cid:107) A). A context
C closes a process B if C[B] is closed.
2.2 Operational Semantics
To deﬁne the semantics of processes it is convenient to
ﬁrst deﬁne a structural equivalence relation ≡ of processes,
which captures basic properties of the operators, such as
commutativity and associativity of (cid:107) (see [27]).
Internal computation steps of a process, i.e., internal com-
munication and evaluation of if-then-else statements, is de-
ﬁned by the internal reduction relation → which is the small-
est relation on closed extended processes closed under struc-
tural equivalence ≡ and closed under application of evalua-
tion contexts such that the following is true, where φ con-
tains only ground terms:
c(x).P (cid:107) c(cid:104)s(cid:105).Q → P{x (cid:55)→ s}(cid:107) Q
if φ then P else Q → P
if φ then P else Q → Q
if |= φ
if (cid:54)|= φ
By →∗ we denote the reﬂexive and transitive closure of →.
To describe communication of a process with its environ-
ment, we use the labeled operational semantics of a process in
order to make the interaction with the environment, which
typically represents the adversary, visible through labels and
frames. The labeled operational semantics is deﬁned by the
relation a−→ over closed extended processes, where a is a label
of the form a = c(s), a = c(cid:104)α(cid:105), or a = (να)c(cid:104)α(cid:105). For exam-
c(s)−−→ P{x (cid:55)→ s} describes an input action. We
ple, c(x).P
(νx)c(cid:104)x(cid:105)
−−−−−→ {x (cid:55)→ s}, for a ground
also have, for instance, c(cid:104)s(cid:105).0
(νx)c(cid:104)x(cid:105)
term s, since c(cid:104)s(cid:105).0 ≡ (νx)(c(cid:104)x(cid:105).0(cid:107){x (cid:55)→ s})
−−−−−→ {x (cid:55)→
In fact, since labels of the form c(cid:104)t(cid:105) for a term t are
s}.
not allowed, one is forced to store terms to be output into a
frame, hence, make them accessible to the adversary.
Definition 1. A (symbolic) trace t (from A0 to An) is
a1−→ A1 ··· an−−→ An where each Ai
a ﬁnite derivation t = A0
is a closed extended process and each ai is either ε (empty
label representing an internal action →) or a label as above,
with fv(ai) ⊆ dom(Ai−1), for all i ≤ n.
We call B a successor of A if there is a trace from A to B.
2.3 Deduction and Static Equivalence
We deﬁne terms that an adversary can derive from a frame
and the view an adversary has on frames, extended pro-
cesses, and traces.
then σ (cid:96) s.
Definition 2. We say that a ground term s is deducible
from a frame ϕ = (νn)σ (written ϕ (cid:96) s) if σ (cid:96) s can be
inferred by the following rules:
1. If there exists x ∈ dom(σ) such that xσ = s or s ∈ N \n,
2. If σ (cid:96) si for i ≤ l and f ∈ Σ, then σ (cid:96) f (s1, . . . , sl).
3. If σ (cid:96) s and s =E s(cid:48), then σ (cid:96) s(cid:48).
Let ϕ be a frame, p be a predicate (i.e., M , EQ, Ppair, Penc,
or Pkey), and s1, . . . , sl be terms. We write ϕ |= p(s1, . . . , sl)
if there exists n and σ such that ϕ ≡ (νn)σ, fn(si) ∩ n = ∅
for all i ≤ l, and |= p(s1, . . . , sl)σ. For example, consider the
frame ϕex = (νn){x1 (cid:55)→ b, x2 (cid:55)→ tex, x3 (cid:55)→ n}, with tex as
above, then ϕex |= EQ(x1, x2), but ϕex (cid:54)|= EQ(x1, x3). Now,
as in [15], static equivalence is deﬁned as follows.
Definition 3. Two frames ϕ and ϕ(cid:48), are statically equiv-
alent, denoted ϕ ∼s ϕ(cid:48), if their domains are equal and for all
predicates p and terms s1, . . . , sl it holds ϕ |= p(s1, . . . , sl)
iﬀ ϕ(cid:48) |= p(s1, . . . , sl).
sk(n2)} ∼s
For example, (νn1, n2, n3){x1 (cid:55)→ b, x2 (cid:55)→ {n1}n3
(νn1, n2){x1 (cid:55)→ b, x2 (cid:55)→ {b}n2
sk(n1)}.
We now recall the deﬁnition of labeled bisimulation, which
as shown in [1], is equivalent to observational equivalence.
Intuitively, two process are labeled bisimilar, if an adversary
cannot distinguish between them.
Definition 4. Labeled bisimilarity ∼l is the largest sym-
metric relation R on closed extended processes such that
(A, B) ∈ R implies:
1. ϕ(A) ∼s ϕ(B),
2. if A → A(cid:48), then B →∗ B(cid:48) and (A(cid:48), B(cid:48)) ∈ R for some
B(cid:48), and
3. if A a−→ A(cid:48) and fv(a) ⊆ dom(A) and bn(a) ∩ fn(B) = ∅,
then B →∗ a−→→∗ B(cid:48) and (A(cid:48), B(cid:48)) ∈ R for some B(cid:48).
933. SYMBOLIC PROTOCOLS
We now deﬁne the class of key exchange protocols that
we consider, called symbolic protocols. In Section 6, these
protocols are given a computational interpretation.
We ﬁx the following names for channels: cin
net, and
cout
(Later we also consider certain decorations of these
io .
names.) Processes receive input from the network (the ad-
versary) via cin
net, and
output session keys on cout
io .
net, write output on the network via cout
net, cout
Symbolic protocols describe key exchange protocols and
will essentially be a parallel composition of certain processes,
called symbolic roles. A symbolic role ﬁrst waits for input,
then after performing some checks, by a sequence of if-then-
else statements, produces output. The role may then termi-
nate or wait for new input, and so on. Symbolic roles are
deﬁned by the following grammar:
R ::= cin
(cid:48)(cid:48)
(cid:48)
R
, R
(cid:48)
net(x).R
net(cid:104)true(cid:105).R
::= if φ then cout
| c[s].cin
(cid:48)
| c[s].0
net(x).R
(cid:48)
else cout
net(cid:104)false(cid:105).R
(cid:48)(cid:48)
net, cout
io }, and φ may con-
where x ∈ X , s ∈ T (N ,X ), c ∈ {cout
tain only the predicates M and EQ. The expression “c[s].B”
net(cid:104)true(cid:105).c(cid:104)s(cid:105).B else
is an abbreviation for “if M (s) then cout
net(cid:104)⊥(cid:105).0”, where ⊥, true, false are special globally
net(cid:104)false(cid:105).cout
cout
known names (or constants). Note that the predicates Ppair,
Penc, and Pkey may not be used by principles. However, they
may be used by the adversary to enhance his power to distin-
guish processes. The reason for writing true and false on the
network in if-then-else statements is that for our computa-
tional soundness result to hold, a symbolic adversary should
be able to tell whether conditions in if-then-else statements
are evaluated to true or to false. In other words, we force ob-
servationally diﬀerent behavior for then- and else-branches
of if-then-else statements.
In protocol speciﬁcations then-
and else-branches would in most cases exhibit observation-
ally diﬀerent behavior anyway: For example, if in the else-
branch the protocol terminates but in the if-branch the pro-
tocol is continued, then this is typically observable by the
adversary.
Now, a symbolic protocol is essentially a parallel com-
position of symbolic roles, specifying one session of a key
exchange protocol. For example, in a key exchange proto-
col with an initiator, responder, and key distribution server,
symbolic roles R1, R2, and R3 would describe the behav-
ior of these three entities, respectively. Initially, a symbolic
protocol expects to receive the names of the parties involved
in the protocol session. In the example, these names would
be stored in the variables x1, x2, and x3, respectively.
Π = (P,R,Nlt,Nst,Nrand,Nnonce), with
Formally, a symbolic (key exchange) protocol Π is a tuple
P = (νn)(cin
net(x1). . . . .cin
net(xl).(R1 (cid:107) . . . (cid:107) Rl))
where R ⊆ {x1, . . . , xl}, n is the disjoint union of the sets
of names Nlt (long-term keys), Nst (short-term keys), Nrand
(randomness for encryption), and Nnonce (nonces). As men-
tioned, Ri, i ≤ l, are symbolic roles. We require that P is
closed, i.e., the variables x1, . . . , xl are the only free vari-
ables in Ri, and Ri uses the channel names cin,i
, and
cout,i
io , respectively, so that the
io
adversary can easily interact with every single role. Other
, instead of cin
net, and cout
net, cout
net , cout,i
net
.
io
channel names are not used by Ri and the set n may not con-
tain channel names or the special names ⊥, true, false. For
simplicity, we assume that all bound names and variables in
P that occur in diﬀerent contexts have diﬀerent names (by
α-conversion, this is w.l.o.g.). We often do not distinguish
between Π and P.
The set R contains the (names of the) “main roles” of a
protocol session, i.e., those roles that want to exchange a
session key. We require |R| = 2 because we consider two
party key exchange; however, this restriction could easily
be lifted. For example, R would contain the initiator and
responder, but not the key distribution server. Only the
roles corresponding to some xi ∈ R may output a session
key on channel cout,i
We assume further syntactic restrictions on P in order for
P to have a reasonable computational interpretation: Names
in Nst, Nrand, and Nnonce should only occur in at most one
symbolic role, and names in Nlt in at most two symbolic
roles, as we assume that a long-term key is shared between
two parties; however, again, this restriction could easily be
lifted. Since fresh randomness should be used for new en-
cryptions, names r in Nrand should only occur in at most
one subterm and this subterm should be of the form {s}r
k.
However, this subterm may occur in several places within a
symbolic role. The function symbol sk(·) (“symmetric key”)
is meant to be used as a tag for (short- and long-term) keys.
Therefore every n ∈ Nlt ∪ Nst should only occur in P in the
form sk(n), and sk(·) should not occur in any other form.
(Clearly, the adversary will not and cannot be forced to fol-
low this tagging policy.) Long-term keys sk(n), n ∈ Nlt, are
not meant to travel. These keys should therefore only occur
as keys for encryption and decryption in P. For example,
a subterm of the form {sk(n)}r
k, for n ∈ Nlt, is not allowed
in P. We note that instead of using sk(·) we could have
assumed types for symmetric keys. However, since types
are not supported by the tool ProVerif yet, we decided to
emulate such types by sk(·).
4. THE IITM MODEL
In this section, we brieﬂy recall the IITM model for sim-
ulation-based security (see [23] for details). In this model,
security notions and composition theorems are formalized
based on a relatively simple, but expressive general com-
putational model in which IITMs (inexhaustible interactive
Turing machines) and systems of IITMs are deﬁned. While
being in the spirit of Canetti’s UC model [13], the IITM
model has several advantages over the UC model, as demon-
strated and discussed in [23, 25]. In particular, as pointed
out in [25], there are problems with joint state theorems in
the UC model. Since we employ joint state theorems here,
we choose the IITM model as the basis of our work.
4.1 The General Computational Model
Our general computational model is deﬁned in terms of
systems of IITMs.
An inexhaustible interactive Turing machine (IITM) M is