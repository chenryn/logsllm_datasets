       NEXT: PUT(rip) = t14; Ijk_Call
    }
​ 我们首先关注到第一行
     t0:Ity_I32 t1:Ity_I32 t2:Ity_I32 t3:Ity_I64 t4:Ity_I64 t5:Ity_I64 t6:Ity_I64 t7:Ity_I64 t8:Ity_I64 t9:Ity_I64 t10:Ity_I64 t11:Ity_I64 t12:Ity_I32 t13:Ity_I64 t14:Ity_I64 t15:Ity_I64 t16:Ity_I64 t17:Ity_I32 t18:Ity_I64 t19:Ity_I32 t20:Ity_I64 t21:Ity_I64 t22:Ity_I64 t23:Ity_I64 t24:Ity_I64 t25:Ity_I64 t26:Ity_I64 t27:Ity_I64 t28:Ity_I64 t29:Ity_I64 t30:Ity_I64 t31:Ity_I64 t32:Ity_I64 t33:Ity_I64
​ 这一行表示该IRSB中临时变量的信息，可以看到一共有34个临时变量，变量名从t0到t33
​ IRSB中，每个CPU指令中间表示的开始位置都是一个IMark的标记。IMark是Instruction Mark的缩写
​ IMark的格式是`IMark(, , )`
  * addr：表示该CPU指令在内存中的地址
  * len：表示该CPU指令在内存中占几个字节
  * delta：表示该指令是否为Thumb Instruction。通常x86、amd64平台上的CPU指令，delta值都是0，只有Thumb指令的delta值是1
​ 例如我们来看看一下这个例子，上面的是x86架构的汇编指令，下面的是它抽象成的VEX IR中间语言
    0x401024:       xor     ebp, ebp
    01 | ------ IMark(0x401024, 2, 0) ------    02 | PUT(rbp) = 0x0000000000000000
​ 指令`xor ebp, ebp`的内存地址是0x401024，指令长度是2字节（0x401026-0x401024），该指令不是Thumb
Instruction，所以对应的IMark是`IMark(0x401024,2,0)`
​ `xor ebp，ebp`把ebp寄存器的值清零，对应的中间表示就是PUT(rbp)=0x0000000000000000，把数值0写入rbp寄存器
​ 我们再往下看一行
    0x401026:       mov     r9, rdx
    03 | ------ IMark(0x401026, 3, 0) ------    04 | t23 = GET:I64(rdx)
    05 | PUT(r9) = t23
    06 | PUT(rip) = 0x0000000000401029
​ 指令`mov r9, rdx`把寄存器rdx的值存储到寄存器r9上面，对应了3条VEX中间表示语句：
  * `t23 = GET:I64(rdx)`：将rdx寄存器的值存储到t23临时变量中
  * `PUT(r9) = t23`：将临时变量t23的值存储到r9寄存器中
  * `PUT(rip) = 0x0000000000401029`：更新指令指针寄存器rip的值，指向下一条CPU指令
> 更新rip的值是CPU指令mov r9,
> rdx的副作用，在二进制代码中不能直接看到，而VEX将CPU指令的副作用显示的表示了出来。其它的CPU指令副作用还有对EFlags状态寄存器的修改、栈寄存器RSP的修改等等
​ 然后接下来我们来看看对栈的操作的VEX IR
    0x401029:       pop     rsi
    07 | ------ IMark(0x401029, 1, 0) ------    08 | t4 = GET:I64(rsp)
    09 | t3 = LDle:I64(t4)
    10 | t24 = Add64(t4,0x0000000000000008)
    11 | PUT(rsi) = t3
​ 指令`pop rsi`，将栈顶指针rsp所指的内存位置的数据存储到rsi寄存器中，对应了4条VEX中间表示语句：
  * `t4 = GET:I64(rsp)`：将rsp寄存器的值存储到t4临时变量中
  * `t3 = LDle:I64(t4)`：以64位小端序的形式读取变量t4存储的内存地址中的数据保存到t3临时变量中
  * `t24 = Add64(t4,0x0000000000000008)`：将临时变量t4的值增加0x8，因为是64位的栈所以相当于降栈（栈是从高地址往低地址增长）
  * `PUT(rsi) = t3`：将临时变量t3的值存储到rsi寄存器中
​ 最后我们来看看call指令
    0x401048:       call    qword ptr [rip + 0x2fa2]
    37 | ------ IMark(0x401048, 6, 0) ------    38 | t14 = LDle:I64(0x0000000000403ff0)
    39 | t30 = Sub64(t28,0x0000000000000008)
    40 | PUT(rsp) = t30
    41 | STle(t30) = 0x000000000040104e
    42 | t32 = Sub64(t30,0x0000000000000080)
    43 | ====== AbiHint(0xt32, 128, t14) ======
    NEXT: PUT(rip) = t14; Ijk_Call
​ `call qword ptr [rip +
0x2fa2]`，调用指定的函数。对应的VEX中间表示可以看到，将call指令的副作用（将返回地址写入栈中）也显示的表示出来：
  * `t14 = LDle:I64(0x0000000000403ff0)`：以64位小端序的形式读取0x0403ff0内存地址中的数据保存到t14临时变量中
  * `t30 = Sub64(t28,0x0000000000000008)`：在栈顶增长8个字节（栈顶是向低地址方向增长）
  * `PUT(rsp) = t30`：更新栈顶指针rsp的值
  * `STle(t30) = 0x000000000040104e`：将call指令的返回地址0x000000000040104e写入栈顶
  * `t32 = Sub64(t30,0x0000000000000080)`：在栈顶增长8个字节
​ ABI（Application Binary
Interface）应用二进制接口，表示两个二进制底层对象的接口信息，类似于源代码层使用的API接口。VEX的AbiHint用来指定一个未定义（undefined）的内存区间（a
given chunk of address space）
​ AbiHint的格式是`AbiHint(, , )` ：
  * base：表示未定义内存区间的起始地址（Start of undefined chunk ）
  * len：表示该未定义内存区间的长度（Length of undefined chunk），128是一个默认值
  * nia：是下一条指令的内存地址（Address of next (guest) insn）
​ IRSB的最后是修改指令指针寄存器rip的值，将CPU控制权转交给被调用函数，并标记该跳转的类型是Ijk_Call，表示是一个call指令跳转
###  2.3 IRSB的源码
​ IRSB基本块是在Block构造函数中创建的
​ `angr/angr/factory.py`中，`block()`函数：
    @overload
    def block(self, addr: int, size=None, max_size=None, byte_string=None, vex=None, thumb=False, backup_state=None,
              extra_stop_points=None, opt_level=None, num_inst=None, traceflags=0,
              insn_bytes=None, insn_text=None,  # backward compatibility
              strict_block_end=None, collect_data_refs=False, cross_insn_opt=True,
              ) -> 'Block': ...
    ......
        # 调用了Block类的构造函数
        return Block(addr, project=self.project, size=size, byte_string=byte_string, vex=vex,
                     extra_stop_points=extra_stop_points, thumb=thumb, backup_state=backup_state,
                     opt_level=opt_level, num_inst=num_inst, traceflags=traceflags,
                     strict_block_end=strict_block_end, collect_data_refs=collect_data_refs,
                     cross_insn_opt=cross_insn_opt,
        )
    # Block类的定义在angr/angr/block.py文件中
    from .block import Block, SootBlock
​
`angr/angr/block.py`中，Block的`__init__()`调用了`_vex_engine.lift_vex()`获得了IRSB基本块对象，并将IRSB对象保存在Block对象的vex属性中
     def __init__(self, addr, project=None, arch=None, size=None, byte_string=None, vex=None, thumb=False, backup_state=None,
                     extra_stop_points=None, opt_level=None, num_inst=None, traceflags=0, strict_block_end=None,
                     collect_data_refs=False, cross_insn_opt=True):
            ......# 省略了一些语句
            if size is None:
                if byte_string is not None:
                    size = len(byte_string)
                elif vex is not None:
                    size = vex.size
                else:
                    # 调用_vex_engine.lift_vex()获得IRSB基本块对象，并将IRSB对象保存在vex属性中
                    vex = self._vex_engine.lift_vex(
                            clemory=project.loader.memory,
                            state=backup_state,
                            insn_bytes=byte_string,
                            addr=addr, # 0x400580
                            thumb=thumb, # False
                            extra_stop_points=extra_stop_points,
                            opt_level=opt_level,
                            num_inst=num_inst,
                            traceflags=traceflags,
                            strict_block_end=strict_block_end,
                            collect_data_refs=collect_data_refs,
                            cross_insn_opt=cross_insn_opt,
                    )
                    size = vex.size
​
vex_engine的`lift_vex()`定义在`angr/angr/engines/vex/lifter.py`中，调用`pyvex.lift()`获得IRSB对象
    import pyvex
    ......
           # phase 5: call into pyvex
            l.debug("Creating IRSB of %s at %#x", arch, addr)
            try:
                for subphase in range(2):
                    irsb = pyvex.lift(buff, addr + thumb, arch,
                                      max_bytes=size,
                                      max_inst=num_inst,
                                      bytes_offset=thumb,
                                      traceflags=traceflags,
                                      opt_level=opt_level,
                                      strict_block_end=strict_block_end,
                                      skip_stmts=skip_stmts,
                                      collect_data_refs=collect_data_refs,
                                      cross_insn_opt=cross_insn_opt
                                      )
​ 在PyVEX的Github仓库中的README中介绍了更多的用法
    import pyvex
    import archinfo
    # translate an AMD64 basic block (of nops) at 0x400400 into VEX
    # 将一个AMD64格式得二进制数据（nops指令）转换为IRSB的基本块类型
    irsb = pyvex.lift(b"\x90\x90\x90\x90\x90", 0x400400, archinfo.ArchAMD64())
    # pretty-print the basic block
    # 打印基本块的汇编代码
    irsb.pp()
    # this is the IR Expression of the jump target of the unconditional exit at the end of the basic block
    print(irsb.next)
    # this is the type of the unconditional exit (i.e., a call, ret, syscall, etc)
    print(irsb.jumpkind)
    # you can also pretty-print it
    irsb.next.pp()
    # iterate through each statement and print all the statements
    for stmt in irsb.statements:
        stmt.pp()
    # pretty-print the IR expression representing the data, and the *type* of that IR expression written by every store statement
    import pyvex
    for stmt in irsb.statements:
        if isinstance(stmt, pyvex.IRStmt.Store):
            print("Data:", end="")
            stmt.data.pp()
            print("")
            print("Type:", end="")
            print(stmt.data.result_type)
            print("")
    # pretty-print the condition and jump target of every conditional exit from the basic block
    for stmt in irsb.statements:
        if isinstance(stmt, pyvex.IRStmt.Exit):
            print("Condition:", end="")
            stmt.guard.pp()
            print("")
            print("Target:", end="")
            stmt.dst.pp()
            print("")
    # these are the types of every temp in the IRSB
    print(irsb.tyenv.types)
    # here is one way to get the type of temp 0
    print(irsb.tyenv.types[0])
​ 执行完毕的效果：
    IRSB {
       t0:Ity_I64
       00 | ------ IMark(0x400400, 1, 0) ------       01 | ------ IMark(0x400401, 1, 0) ------       02 | ------ IMark(0x400402, 1, 0) ------       03 | ------ IMark(0x400403, 1, 0) ------       04 | ------ IMark(0x400404, 1, 0) ------       NEXT: PUT(rip) = 0x0000000000400405; Ijk_Boring
    }
    0x0000000000400405
    Ijk_Boring
    0x0000000000400405
    ------ IMark(0x400400, 1, 0) ------    ------ IMark(0x400401, 1, 0) ------    ------ IMark(0x400402, 1, 0) ------    ------ IMark(0x400403, 1, 0) ------    ------ IMark(0x400404, 1, 0) ------    ['Ity_I64']
    Ity_I64
## 三、参考资料
在此感谢各位作者或者译者的辛苦付出，特此感谢
  * [angr官方文档](https://docs.angr.io/)
  * [angr入门之CLE](https://blog.csdn.net/baizhi2361/article/details/101084429)
  * [angr源码分析——cle.Loader类](https://blog.csdn.net/doudoudouzoule/article/details/79354436?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-3.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-3.control)
  * [angr中的中间语言表示VEX](https://zhuanlan.zhihu.com/p/349182248)
  * [LLVM IR入门指南](https://github.com/Evian-Zhang/llvm-ir-tutorial)
  * [Clang/LLVM 从入门到实践](https://lvchenqiang.github.io/2019/02/01/Clang-LLVM/)
  * [Valgrind官网](https://valgrind.org/)
  * [angr中定义的VEX-IR](https://github.com/angr/vex/blob/master/pub/libvex_ir.h)
  * [angr中的pyvex文档](https://angr.io/api-doc/pyvex.html)
  * [angr的IR官方文档](https://docs.angr.io/advanced-topics/ir)