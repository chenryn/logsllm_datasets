原文：
**摘要**
* * *
在NagiosXI中，我们发现了四个漏洞，这本不足为奇，然而，如果将它们链接在一起的话，却可以构造出一个root级别RCE漏洞，具体利用代码可在[此处](https://www.exploit-db.com/exploits/44560/
"此处")找到。换句话说，漏洞链接技术可以提升单个漏洞的战斗力，从而“培育出”像root级别的RCE这样极其危险的漏洞。如果读者当前运行的NagiosXI的版本号小于等于5.4.12的话，请马上进行升级。
在对应用程序的漏洞进行安全评估的过程中，有时候需要在安全报告中评估漏洞的严重程度，比如“由于只能通过y漏洞进行x操作，所以该漏洞很可能无需进行修复”。实际上，这种说法很可能会低估漏洞的危害性，部分原因是它忽视了漏洞链接技术的影响。
漏洞链接就是将多个漏洞组合使用，从而实现一个超越链中任何单个漏洞的危害程度的高危漏洞的过程。[这里](https://foxglovesecurity.com/2016/01/16/hot-potato/ "这里")提供了一个关于漏洞链接技术的优秀示例。此外，[Offensive
Security提供的AWAE培训](https://www.offensive-security.com/information-security-training/advanced-web-attack-and-exploitation/ "Offensive
Security提供的AWAE培训")基本上就是一个漏洞链接方面的课程。另一个漏洞链方面的例子，就是下文将要详细讲解的NagiosXI
root级别RCE漏洞。
这里的Nagios XI漏洞是通过链接四个漏洞来实现的：
  * CVE-2018-8734 —— [SQL注入漏洞](https://nvd.nist.gov/vuln/detail/CVE-2018-8734 "SQL注入漏洞")
  * CVE-2018-8733 —— [认证绕过漏洞](https://nvd.nist.gov/vuln/detail/CVE-2018-8734 "认证绕过漏洞")
  * CVE-2018-8735 —— [命令注入漏洞](https://nvd.nist.gov/vuln/detail/CVE-2018-8734 "命令注入漏洞")
  * CVE-2018-8736 —— [特权提升漏洞](https://nvd.nist.gov/vuln/detail/CVE-2018-8734 "特权提升漏洞")
首先需要说明的是，这里涉及的各个漏洞都是相互独立的，接下来，我们将为读者介绍如何将这些Web应用程序的漏洞链接起来，从而在NagiosXI应用程序服务器上实现一个root级别的RCE。如果读者希望在自己的机器上面复现这个漏洞的话，可以从以下地址下载含有这些漏洞的NagiosXI版本：
相应的漏洞利用代码，参见下列地址：
**CVE-2018-8734 —— SQL注入(未认证)**
* * *
当发送未认证的`html GET
/nagiosql/admin/helpedit.php`请求时，会返回一个含有302响应码的应答，该代码会将其重定向回/nagiosql/index.php。在浏览器中，Web应用程序可以将未认证的会话重定向回来，通过HTTP
Auth方式进行认证，这没有什么不正常的，但是通过拦截Web代理并查看响应内容，我们发现其中含有一个适合用于做突破口的表单。快速浏览该表单后，我们发现如下所示的表单提交POST，它是提交给helpit.php的，其中包含一个易受攻击的selInfoKey1参数。
    POST /nagiosql/admin/helpedit.php HTTP/1.1
    Host: 
    Content-Type: application/x-www-form-urlencoded
    selInfoKey1=SQLI_PAYLOAD&hidKey1=common&selInfoKey2=&hidKey2=free_variables_name&selInfoVersion=&hidVersion=&taContent=&modus=0
由于我们对该应用程序进行的是白盒测试，因此，可以检查数据库日志来找出注入漏洞的准确位置（对于这类白盒SQLi技术感兴趣的读者，可进一步参阅[这篇文章](http://blog.redactedsec.net/exploits/2018/01/29/UEB9.html
"这篇文章")）。在对数据库日志进行分析后，我们发现，参数selInfoKey1存在SQLi漏洞。除此之外，我们还发现，执行这个可注入查询的数据库用户（nagiosql）没有足够的权限，所以无法完成一些重要的攻击任务，例如添加用户、转储密码哈希值或枚举会话。
[+] 这是一个未认证的SQL注入漏洞！
[-] 数据库用户没有足够的权限来执行我们感兴趣的操作。
**CVE-2018-8733 —— 认证绕过漏洞**
* * *
这个漏洞的CVE描述可能是误导性的，因为我们无法利用这个漏洞全面绕过身份验证。相反，与前面讨论的CVE的情况类似，即对```html
 /nagiosql/admin/settings.php
    ```html
    POST /nagiosql/admin/settings.php HTTP/1.1
    Host: 
    Content-Type: application/x-www-form-urlencoded
    txtRootPath=nagiosql%2F&txtBasePath=%2Fvar%2Fwww%2Fhtml%2Fnagiosql%2F&selProtocol=http&txtTempdir=%2Ftmp&selLanguage=en_GB&txtEncoding=utf-8&txtDBserver=localhost&txtDBport=3306&txtDBname=nagiosql&txtDBuser=nagiosql&txtDBpass=n%40gweb&txtLogoff=3600&txtLines=15&selSeldisable=1
在这里，我们关注的不是注入漏洞，相反，对我们来说重要的是能够设置数据库用户帐户。如果我们可以使用该表单为nagiosql
db用户获取更多权限，那么就意味着以前的SQLi攻击所无权访问的数据库内容，现在就有可能访问了。事实证明，我们的确可以做到这一点；设备的ssh凭证默认设置为root：nagiosxi，并且这些凭证也适用于具有root权限的数据库用户。
[+]我们可以修改数据库用户帐户！
[+]我们可以破坏应用程序配置从而导致拒绝服务（DoS）攻击！
[-]如果单独利用这个漏洞的话，最多只能发动DoS攻击。
**CVE-2018-8735 —— 命令注入（已认证）**
* * *
这个命令注入漏洞主要是通过分析应用程序.php文件源代码而发现的。这对我们很有用，一则受它影响的NagiosXI版本范围广，二则它是以用户'nagiosxi'（而不是'apache'）的身份来运行的。经过一番折腾之后，我们终于找到了一个含有安全漏洞的POST请求，准确来说，它容易受到已经通过身份验证的命令注入攻击的影响：
    POST /nagiosxi/backend/index.php HTTP/1.1
    Host: 10.20.1.179
    Content-Type: application/x-www-form-urlencoded
    Cookie: nagiosxi=eb8pa9098grmgummu2pnofq3f5
    Content-Length: 66
    cmd=submitcommand&command=1111&command_data=$(your_command_here)
这些POST请求会收到一些应答，因此，不建议直接进行命令注入：
    0