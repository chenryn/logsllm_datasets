#!/usr/bin/env python
例8-7：高级ssh分发器
for
import ConfigParser
注意：
我们可以一个一个进行选代。参见例8-7。
接下来需要写一个函数来阅读config文件，并将MACHINES与COMMANDS分离，这样
FINGERPRINT: python /src/fingerprint.py
REDHAT: 10.0.1.51
UBUNTU: 10.0.1.50
CENT0S: 10.0.1.40
例8-6：分发配置文件
COMMANDS]
FREEBSD: 10.0.1.80
SUN: 10.0.1.60
[MACHINES]
for cmd in cmds:
for ip in machines:
commands = Config.items("cOMMANDs")
machines = Config.items("MACHINES")
Config = ConfigParser.ConfigParser()
subprocess.call("ssh root@%s %s" % (ip, cmd), shell=True)
cmds =[]
ips.append(ip[1])
点，因为仅写一个Python文件，就可以将其作为配置文件来使用。
有一件事情需要注意：我们的命令会从config文件被随机加载。在许多情况下，这是一个优
第8章
www.TopSage.com
PDG
---
## Page 251
#Determine Number of threads to use, but max out at 25
ips,cmds =readConfig()
#grab ips and cmds from config
def
queue = Queue()
start = time.time()
A threaded ssh-based command dispatch system
from Queue import Queue
import ConfigParser
import subprocess
#!/usr/bin/env python
例8-8：多线程命令分发工具
建线程池。例8-8演示了添加线程可以做些什么。
程池中运行分发命令。幸运的是，可以使用进程一章中的一些技巧来为分发器方便地创
尽管已经有了一个非常高级的工具，但仍不能满足我们最初的需求，即在一个独立的线
num_threads = len(ips)
while True:
return ips,cmds
machines = Config.items("MACHINES")
cmds=
ips=
FreeBSD
Sunos
ubuntu
redhat
[ngift@Macintosh-6][H:11285][J:0]# python advanced _dispatch1.py
or
q.task_done()
cmds.append(cmd[1])
cmd in commands:
ips.append(ip[1])
www.TopSage.com
操作系统什锦丨237
---
## Page 252
通过在原来的分发器中添加一些简单的计时代码，可以得到如下所示的新结果：
如果希望查看速度差异，应该在原来的分发器中添加一个计时器，并且对结果进行比
如果我们查看新的线程化的分发引擎，可以看到命令被分发，并且大约在1.2秒内返回。
print "Dispatch Completed in %s seconds" % end - start 
#Start thread pool
较：
end =time.time()
queue.join()
else:
238
另一个目标，使用它来创建一个跨平台的网络。
大的差别。到目前为止，我们的跨平台系统管理工具运行得非常好，接下来我们将开始
来监测一个布满计算机的网络，例如500台计算机，而不是5台，它会在性能上显示出巨
从这个最简单的测试中可以看到，线程化的版本大约快三倍。如果使用我们的分发工具
queue.put(ip)
num_threads = 25
Dispatch. Completed in 3 seconds
redhat
redhat
Dispatch Completed in 1 seconds
FreeBSD
Sunos
ubuntu
redhat
Thread
Thread o:Running python/src/fingerprint.py
Thread 2:Running python/src/fingerprint.py
Thread 1: Running python /src/fingerprint.py to 10.0.1.51
[ngift@Macintosh-6][H:11296][]:0]# python threaded_dispatch.py
FreeBSD
Sunos
ubuntu
redhat
worker.start()
worker.setDaemon(True)
worker
第8章
= Thread(target=launcher, args=(i, queue,cmd))
www.TopSage.com
to10.0.1.50
to 10.0.1.80
to 10.0.1.40
---
## Page 253
现在，编辑config.ini文件，修改它并运行我们的新脚本。
已经完成了。好的，让我们编写代码来进行实现之。以下示例展示了创建脚本的过程：
的说明或是文件列表，并且我们已经创建了“fingerprint”脚本，所有比较困难的工作就
创建服务器软件包子树，该子树是一个加载了NFS的目录。因为EPM允许创建一个简单
软件包树，并且赋予所有服务器访问这一挂载点的权限。然后，使用之前创建的工具来
那么，又是如何工作的呢？自动化程度最高的有效方法是创建一个通用的加载了NFS的
供商包。
个“build farm”
个需要的工具并想共享给其他人（例如你公司的同事）使用时，可以十分方便地创建一
CentOS、FreeBSD和Solaris）创建一个虚拟主机都变得非常容易。现在，当你创建了一
随着虚拟机技术的出现，为任何非专有*nix操作系统（Debian/Ubuntu、RedHat/
跨平台网络。
些技术合并在一起使用不是会更有意义吗？接下来就使用这三种技术来快速方便地创建
并最终创建一个带有EMP（EMP可以创建指定提供商的包）的统一说明，那么将所有这
我们已经知道如何并行地将作业发布到多台主机上，识别这些主机上运行的操作系统：
创建一个跨平台网络
注意：应该注意的是，使用并行IPython或许是一个更好的解决方案。参见：http:/lipython.scipy.
FREEBSD: 10.0.1.80
SUN: 10.0.1.60
REDHAT:10.0.1.51
CENT0S: 10.0.1.40
except Exception,err:
epm_keyword = {"ubuntu":"dpkg", "redhat":"rpm", "Sunos":"pkg", "osx":"osx"} 
#Gets epm keyword correct
os = fingerprint()
from subprocess import call
from fingerprint import fingerprint
#!/usr/bin/env python
[MACHINES]
try:
print err
epm_keyword[os]
org/moin/Parallel_Computing.
（或许就在你运行脚本的笔记本上创建），然后再为其快速创建一个提
www.TopSage.com
操作系统什锦丨239
PDG
---
## Page 254
class Controller(object):
class PClose(ProcessEvent):
from pyinotify import WatchManager, Notifier, ProcessEvent, EventsCodes
import sys
import os
例8-9：事件监测的Pyinotify脚本
主页http:/lpyinotify.sourceforge.net。例8-9演示了PyInotify是如何工作的。
PyInotify是“一个查看文件系统变化的Python模块”。
如果有GNU/Linux平台的工作经验，那么你会喜欢PyInotify的。根据文档说明，
Pylnotify
可以完成处理。
品代码，但是这的确是一个非常不错的示例。可以看到，Python在几分钟或几小时内就
Hat、FreeBSD和 Solaris创建包。由于有的地方需要有错误处理，这一示例还不应视为产
现在，运行线程化的版本分发工具，我们可以在很短的时间里为CentOS、Ubuntu、Red
240
def run(self):
def_init_
defp
111
[COMMANDS]
def
self.pclose = PClose(self.path)
time.sleep(2)
path =.self.path
process 'IN_CLOSE_*' events
self.file=file
self.path
第8章
import time
else:
init
self.file = "%s" % event.path
self.file = "%s" % os.path.join(event.path, event.name)
_(self，path='/tmp'）:
(self,path):
path
www.TopSage.com
。可以在以下网址看到：官方项目
---
## Page 255
的OSX包括Python2.5.1，Twisted和许多其他的Python工具。
现这两个目标，但都失败了，而OS X却取得了成功：它将Unix带人主流。具有Leopard
一方面，它完全兼容POSIX的Unix操作系统。每一个Unix操作系统提供商都曾努力去实
OSX的出现可以说非常令人惊喜。
OS X
达式的文档进行打包。总之，在Linux下运行Python模块非常有意义且非常实用。
节中的一些代码可以帮助完成自动查找并删除重复，或是执行TAR命令对匹配fnmatch表
去考虑如何利用其完成一些更有价值的工作，例如添加一个执行动作的回调。在数据一
如果运行这个脚本，当在/tmp目录下存入任何文档时，它都会做一些处理。这会启示你
if_
def main():
monitor.run()
monitor = Controller()
added_flag = False
print 'monitoring of %s started' % self.path
while True:
#read and process events
notifier = Notifier(wm,PC)
# watch manager instance
mask = EventsCodes.IN_CLOSE_WRITE | EventsCodes.IN_CLOSE_NOWRITE
pC = self.pclose
=WatchManager()
except Exception, err:
except KeyboardInterrupt:
try:
# otherwise keep on watching
break
notifier.stop()
if not added_flag:
print err
notifier.process_events()
wm.add_watch(self.path,mask)
# on first iteration, add a watch on path:
，一方面，在Cocoa中它有世界上最好的用户界面，另
www.TopSage.com
操作系统什锦丨241
1
---
## Page 256
In [41]: p = subprocess.Popen("dscl . read /Users/ngift", shell=True,stdout=subprocess.PIPE)
In [42]:import subprocess
例8-10：使用DSCL和IPython交互获取用户记录
注意：在示例中我们仅读取属性，如果需要执行其他类似操作也可以使用相同的技术，只须对示
IPython来脚本化DSCL，以读取OpenDirectory的属性及值。
许读取、创建、删除记录，因此Python很自然地胜任此工作。例8-10演示了如何使用
DSCL表示目录服务命令行，它可以方便地提供对OS X目录服务API的连接。DSCL允
脚本DSCL或目录服务工具
工具，例如，可以访问NetBoot主机，运行LDAP目录服务器等。
系统的服务器版本提供给管理员一些更好用的命令行工具，以及一些面向Apple的专用
成的事情，使用OSX或许需要换个思路重新考虑，我们且将这一点放在以后讨论。操作
OS X也遵从某些奇怪的标准，提供服务器版本和普通版本。对于所有Apple可以正常完
如Open Directory），如果这样做，之前的代码也会给你一些启发。
来使dsc1脚本化非常简单，可以方便地实现自动管理本地数据库或是LDAP数据库（例
到dsc1带来的耳目一新的感觉。我们没有时间进一步讲述其中的细节，但是使用Python
Out[46]:
Out[46]
Out[46]
Out[46]
Out[46]:
Out[46]:
Out[46]
Out[46]:
line.strip().split()
In [43]: for line in out:
In [42]:out =p.stdout.readlines()
242
了中心化。当与其他的LDAP管理工具进行比较，甚至如果将Python取出，你都会感受
Out[46]
例代码进行简单的修改即可。
第8章
['NFSHomeDirectory:',
['PrimaryGroupID:'
['/Library/User',
['Picture:']
['Password:',
'RecordType:'
'RecordName:'
'RealName:',
'ngift']
L：********：
'/bin/zsh']
501
'dsRecTypeStandard :Users']
'ngift']
'Pictures/Flowers/Sunflower.tif']
'20']
'/Users/ngift']
www.TopSage.com
---
## Page 257
行进程：
这个示例的一个交互版本，包括appscript源代码，它会按字母顺序显示输出所有的运
appscript在Python中访问相同的API，但是这次是在IPython中交互地完成操作。下面是
乎有点笨，但是这就是OSX，希望你也能像这样完成其他的操作。现在进一步使用
如果从命令行运行该脚本，会出现一个陌生的声音对我们说“Hello”
say "Hello, Bastard Operator From Hell" using “Zarvox"
#!/usr/bin/osascript
例8-11：osascript脚本
为可执行的。参见例8-11。
Bash或Python脚本那样执行。接下来就创建这个脚本，且取名为bofh.osa，然后将其设
演示脚本化的API是如何工作的。可以使用Leopard编写osascript命令行工具，并且像
行交互的能力。在进一步学习之前，让我们构建一个简单的osascript命令行工具，来
义的，因为py-appscript的功能非常强大的，且赋予了Python与非常丰富的OSA构架进
看到项目主页：http://sourceforge.net/projects/appscript。使用py-appscript是非常有意
一个访问OSA或Open Scripting Architecture的方法是使用py-appscript，在以下链接可以
Cocoa/Conceptual/Ruby/PythonCocoa/Introduction/Introduction.html.
参考以下链接中的文档可以获得更多的帮助：http://developer.apple.com/documentation/
是必要的。使用OS X Leopard、Python和Ruby，我们可以获得最佳的Scripting Bridge。