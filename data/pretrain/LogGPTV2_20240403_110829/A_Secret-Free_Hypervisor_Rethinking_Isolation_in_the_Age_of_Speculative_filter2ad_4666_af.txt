in Proceedings of the 14th International Conference on Recent
Advances in Intrusion Detection, ser. RAID’11. Berlin, Hei-
delberg: Springer-Verlag, 2011, p. 121–141.
[6] E. Zannoni, “Improving Application Security with Undeﬁned-
BehaviorSanitizer (UBSan) and GCC,” May 2021.
[7] H. Shacham, M. Page, B. Pfaff, E.-J. Goh, N. Modadugu,
and D. Boneh, “On the Effectiveness of Address-Space
Randomization,” in Proceedings of the 11th ACM Conference
on Computer and Communications Security, ser. CCS ’04.
New York, NY, USA: Association for Computing Machinery,
2004, p. 298–307. [Online]. Available: https://doi.org/10.1145/
1030083.1030124
[8] N. Nethercote and J. Seward, “Valgrind: A Framework for
Heavyweight Dynamic Binary Instrumentation,” SIGPLAN
Not., vol. 42, no. 6, p. 89–100, Jun. 2007. [Online]. Available:
https://doi.org/10.1145/1273442.1250746
[9] B. Anderson, L. Bergstrom, D. Herman, J. Matthews, K. McAl-
lister, M. Goregaokar, J. Mofﬁtt, and S. Sapin, “Experience
Report: Developing the Servo Web Browser Engine using Rust,”
2015.
[10] T. Anderson, “Linux in 2020: 27.8 million lines of code
in the kernel, 1.3 million in systemd,” Jan 2020. [Online].
Available: https://www.theregister.com/2020/01/06/linux 2020
kernel systemd code
[11] “Vulnerability details : CVE-2017-11176,” Jul 2017. [Online].
Available: https://www.cvedetails.com/cve/CVE-2017-11176/
[12] “Vulnerability details : CVE-2021-43267,” Nov 2021. [Online].
Available: https://www.cvedetails.com/cve/CVE-2021-43267/
[13] “Vulnerability details : CVE-2021-43057,” Oct 2021. [Online].
Available: https://www.cvedetails.com/cve/CVE-2021-43057/
[14] “Vulnerability details : CVE-2021-41073,” Sept 2021. [Online].
Available: https://www.cvedetails.com/cve/CVE-2021-41073/
[15] P. Kocher, D. Genkin, D. Gruss, W. Haas, M. Hamburg,
M. Lipp, S. Mangard, T. Prescher, M. Schwarz, and Y. Yarom,
“Spectre Attacks: Exploiting Speculative Execution,” 2018.
[16] M. Lipp, M. Schwarz, D. Gruss, T. Prescher, W. Haas, A. Fogh,
J. Horn, S. Mangard, P. Kocher, D. Genkin, Y. Yarom, and
M. Hamburg, “Meltdown: Reading Kernel Memory from User
Space,” in Proceedings of the 27th USENIX Conference on
Security Symposium, ser. SEC’18. USA: USENIX Association,
2018, p. 973–990.
[17] “Page Table Isolation (PTI).” [Online]. Available: https:
//www.kernel.org/doc/html/latest/x86/pti.html
[18] Intel Corporation, Intel® 64 and IA-32 architectures software
developer’s manual combined volumes: 1, 2A, 2B, 2C, 2D, 3A,
3B, 3C, 3D, and 4, June 2021.
[19] L. Kurth, “What’s new in xen 4.13,” Dec 2019. [Online]. Avail-
able: https://xenproject.org/2019/12/18/whats-new-in-xen-4-13/
[20] N. Nethercote and J. Seward, “Retpoline: A Branch Target
Injection Mitigation,” no. 3, Jun. 2018.
[21] M. Yan, J. Choi, D. Skarlatos, A. Morrison, C. Fletcher, and
J. Torrellas, “InvisiSpec: Making Speculative Execution Invis-
ible in the Cache Hierarchy,” in 2018 51st Annual IEEE/ACM
International Symposium on Microarchitecture (MICRO), 2018,
pp. 428–441.
[22] K. N. Khasawneh, E. M. Koruyeh, C. Song, D. Evtyushkin,
D. Ponomarev, and N. Abu-Ghazaleh, “SafeSpec: Banishing the
Spectre of a Meltdown with Leakage-Free Speculation,” in 2019
56th ACM/IEEE Design Automation Conference (DAC), 2019,
pp. 1–6.
[23] E. M. Koruyeh, S. H. A. Shirazi, K. N. Khasawneh,
C. Song, and N. B. Abu-Ghazaleh, “SPECCFI: Mitigating
Spectre Attacks using CFI Informed Speculation,” CoRR, vol.
abs/1906.01345, 2019. [Online]. Available: http://arxiv.org/abs/
1906.01345
[24] V. P. Kemerlis, G. Portokalidis, and A. D. Keromytis, “kGuard:
Lightweight Kernel Protection against Return-to-User Attacks,”
in 21st USENIX Security Symposium (USENIX Security 12).
Bellevue, WA: USENIX Association, Aug. 2012, pp. 459–
474.
[Online]. Available: https://www.usenix.org/conference/
usenixsecurity12/technical-sessions/presentation/kemerlis
[25] V. P. Kemerlis, M. Polychronakis, and A. D. Keromytis,
Isolation,” in 23rd USENIX
“ret2dir: Rethinking Kernel
Security Symposium (USENIX Security 14). San Diego, CA:
USENIX Association, Aug. 2014, pp. 957–972.
[Online].
Available: https://www.usenix.org/conference/usenixsecurity14/
technical-sessions/presentation/kemerlis
[26] D. Seal, ARM Architecture Reference Manual, 2nd ed. USA:
Addison-Wesley Longman Publishing Co., Inc., 2000.
[27] J. V. Bulck, M. Minkin, O. Weisse, D. Genkin, B. Kasikci,
F. Piessens, M. Silberstein, T. F. Wenisch, Y. Yarom,
and R. Strackx, “Foreshadow: Extracting the Keys to the
Intel SGX Kingdom with Transient Out-of-Order Execution,”
in 27th USENIX Security Symposium (USENIX Security
18).
Baltimore, MD: USENIX Association, Aug. 2018,
p. 991–1008.
[Online]. Available: https://www.usenix.org/
conference/usenixsecurity18/presentation/bulck
[28] S. van Schaik, A. Milburn, S.
¨Osterlund, P. Frigo,
G. Maisuradze, K. Razavi, H. Bos, and C. Giuffrida, “RIDL:
Rogue In-ﬂight Data Load,” in S&P, May 2019.
[29] H. Ragab, A. Milburn, K. Razavi, H. Bos, and C. Giuffrida,
CrossTalk: Speculative Data Leaks Across Cores Are Real.
United States: Institute of Electrical and Electronics Engineers
Inc., Jun. 2021, pp. 1–16.
hyperclear
Fault,” Mar
[30] “Hyper-V
Terminal
https://techcommunity.microsoft.com/t5/virtualization/
hyper-v-hyperclear-mitigation-for-l1-terminal-fault/ba-p/
382429
L1
Available:
mitigation
[Online].
2019.
for
[31] G. Marsden, “Improve Security with Address Space Isolation
(ASI),” Jul 2019. [Online]. Available: https://blogs.oracle.com/
linux/post/improve-security-with-address-space-isolation-asi
[32] X. J. Ren, K. Rodrigues, L. Chen, C. Vega, M. Stumm,
and D. Yuan, “An Analysis of Performance Evolution of
Linux’s Core Operations,” in Proceedings of the 27th ACM
Symposium on Operating Systems Principles,
ser. SOSP
’19. New York, NY, USA: Association for Computing
Machinery, 2019, p. 554–569.
[Online]. Available: https:
//doi.org/10.1145/3341301.3359640
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:11:47 UTC from IEEE Xplore.  Restrictions apply. 
383
[33] “Dom0,” Mar 2015. [Online]. Available: https://wiki.xenproject.
org/wiki/Dom0
[34] J. Corbet, “Virtually mapped kernel stacks,” Jun 2016. [Online].
Available: https://lwn.net/Articles/692208/
[35] B. Armstrong,
“Plan
in
Windows
[Online]. Available:
https://docs.microsoft.com/en-us/windows-server/virtualization/
hyper-v/plan/plan-hyper-v-scalability-in-windows-server
for Hyper-V scalability
Server,” Nov
2021.
[36] “VMware vSphere ESX and vCenter Conﬁguration Max-
imums.” [Online]. Available: https://www.virten.net/vmware/
vmware-vsphere-esx-and-vcenter-conﬁguration-maximums/
[37] “Conﬁguration
line]. Available:
system-requirements/conﬁguration-limits.html
limits,”
[On-
https://docs.citrix.com/en-us/xenserver/7-1/
2020.
Dec
[38] AMD, AMD64 Architecture Programmer’s Manual Volume 2:
System Programming, March 2021.
[39] S.-W. Li,
J. S. Koh, and J. Nieh, “Protecting Cloud
Virtual Machines from Hypervisor and Host Operating System
Exploits,” in 28th USENIX Security Symposium (USENIX
Security 19). Santa Clara, CA: USENIX Association, Aug.
2019, pp. 1357–1374. [Online]. Available: https://www.usenix.
org/conference/usenixsecurity19/presentation/li-shih-wei
APPENDIX
We ﬁrst list examples of how SF blocks various categories
of speculative vulnerabilities and how it compares to state-of-
the-art mitigations. Then, we demonstrate how the self-map
technique allows accessing Page Table Entries (PTEs) without
manual page table walking.
A. Guest-to-hypervisor attacks
This category reveals secrets by entering a speculatively-
manipulated hypervisor context.
1) Spectre: Consider the following hypervisor code gadget.
if (x > (BITS_PER_LONG - 1);
}
The above function generates a ∼0 mask when index > 12 << 3;
// Insert SELF_OFFSET into L4 bits.
ret[47:39] = L4_SELF_OFFSET;
return ret;
}
returns a pointer to the L1 PTE (denoted by VA to L1 PTE in
Fig. 12) of a given VA (denoted by VA to page). This works by
asking the hardware page table walker to walk L4 twice, thus
the ﬁnal access will terminate at the L1 PTE inside the page
table page instead of the actual physical memory. Note that
this can be changed to access the L2 PTE as well, by shifting
the given VA further right and insert SELF_OFFSET to L3
offset bits, effectively asking the hardware walker to walk the
L4 table three times before terminating at the L2 PTE.
Self-map is used to enable ephemeral mapping infrastruc-
ture. When a new mapping request to a physical address
comes, an ephemeral VA is allocated and its L1 PTE is located
via L1_PTE_from_VA(). The PTE is modiﬁed to point to
the requested physical address and the VA is now usable. The
motivation of using this technique for ephemeral mappings
under a secret-free hypervisor is not just efﬁciency. It is also
simply because the direct map is no longer present and we
cannot manipulate PTEs in the ephemeral mapping region by
a normal manual page table walk.
2) Guest-to-guest Spectre and L1TF: This category is not
mitigated by an SF address space. Two vCPUs from different
domains may be scheduled on the same host CPU, sharing
µarch structures including branch predictors and caches. An
attacker may manipulate µarch state to affect the speculation
path of the sibling victim, allowing secrets to be placed on
covert channels. It is impossible to prevent this direct guest-to-
guest attack without isolating the underlying hardware. There-
fore, this work reuses several physical isolation techniques,
mostly Core Scheduling, to prohibit different domains from
sharing physical CPUs to mitigate attacks in this category.
As stated in the guest-to-hypervisor L1TF example, physical
isolation is less complex under the SF design, since its
implementation no longer needs to guard against leakage from
the hypervisor.
C. Page table self mapping
Hypervisors and OS kernels often perform manual page
table walks to locate and manipulate page table entries for
modiﬁcations of an address space. This can be done efﬁciently
when the direct map is present because there exists a direct
map alias of any arbitrary physical address, allowing us to
quickly access the L(n − 1) page table page after decoding
the physical address pointing to it in the PTE of the Ln
level. However, kernel code often employs self mapping to
avoid manual page table walking entirely, by reserving a top
level PTE pointing to the top level table itself. Then, bitwise
transformations allow direct access to PTEs.
An example is given in Fig. 12. Here, we assume four-level
paging under a virtual address space of 48 bits with 4KiB
pages. A pointer is comprised of four 9-bit page table page
offsets and a ﬁnal 12-bit page offset. By reserving a PTE in
the top level and pointing it to the top level itself, a ﬁxed
transformation
uintptr_t L1_PTE_from_VA(uintptr_t va) {
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:11:47 UTC from IEEE Xplore.  Restrictions apply. 
385
L4oﬀsetL3 oﬀsetL2 oﬀsetL1 oﬀsetpageoﬀset…PTbaseSelf slotL4 PTE…L3 PTE……L2 PTE……L1 PTE…pageSelf slot oﬀsetL4 oﬀsetL3 oﬀsetL2 oﬀsetL1 oﬀset<<3…PTbaseSelf slotL4PTE…L3 PTE……L2PTE……L1PTE…pageVA to pageVAtoL1PTE