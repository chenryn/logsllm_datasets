gadget by initializing the register operands of all pop instructions
in the gadget with the same value, and then reliably using any one of
the initialized registers. Consequently, it is also desirable to increase
the entropy of randomization, so that guessing or inferring the state
of a randomized gadget becomes much harder.
In this work, we aim to improve both the coverage and entropy of
binary-level code diversiﬁcation, so that the percentage of any reli-
ably usable (i.e., non-randomized) gadgets is reduced even further.
Threat Model
Code diversiﬁcation techniques rely on the assumption that an at-
tacker cannot read or leak a diversiﬁed instance of the protected code.
Experience though has shown that under certain conditions this is
possible by reading [52], leaking [13], or inferring [48] the code
of a vulnerable process. Although instruction displacement makes
the gadgets “disappear” from their original locations, they are still
available in some other random location. Consequently, as any code
diversiﬁcation technique, it cannot defend against JIT-ROP [52] and
other code leakage attacks.
These can be tackled by recent execute-only memory protec-
tions [8, 14, 19, 27, 54, 57], which operate under the assumption that
protected code has been properly diversiﬁed. For binary-compatible
approaches [8, 54, 57], instruction displacement can be crucial in
ensuring that adequate randomization coverage has been achieved.
When execute-only memory enforcement is implemented using the
concept of “destructive reads” [54, 57], however, an attacker may
be able to infer the structure of a randomized gadget by (destruc-
tively) reading a few preceding bytes [53]. As is also the case
with previous in-place code transformations [41], in such a setting
where an attacker can disclose arbitrary bytes of the randomized
code, instruction displacement can be undermined. For instance, by
(destructively) reading the bytes of the inserted jump instructions,
a JIT-ROP exploit can pinpoint at runtime the actual address of
the displaced gadgets and then use them as part of a dynamically
constructed ROP payload. [53]
3.
INSTRUCTION DISPLACEMENT
The goal of instruction displacement is to randomize the locations
of gadgets so that their starting addresses become unknown to an
attacker. In contrast to in-place code randomization, which leaves
the randomized instructions in their original locations, instruction
displacement relocates sequences of instructions that contain gad-
gets from their original locations to a newly allocated code segment.
Due to ASLR and additional random padding, the base address of
this separate segment in the address space of a process is completely
random, and thus the locations of all displaced gadgets become
unpredictable.
In the rest of this section, we ﬁrst provide an overview of the
overall displacement approach and various constraints that must be
satisﬁed, and then describe in detail the displacement strategy that
we follow.
3.1 Overall Approach
Any code diversiﬁcation approach must maintain the semantics
of the original program. In addition, given our assumption that parts
of the original code may not have been extracted or disassembled
properly, an additional constraint that must be followed is that the
location and size of any correctly identiﬁed basic blocks must not
be altered.
Changing the location of a basic block requires adjusting all
instructions in the rest of the code that transfer control to that basic
block—including computed jumps—to point to the new location.
In our case, given that a complete view of the control ﬂow graph is
not available, moving a basic block may break the semantics of the
code, since any control transfer from non-extracted code to that basic
block will become stale, as it will still point to the original location.
Similarly, changing the size of a basic block, e.g., in order to add
more instructions for diversiﬁcation purposes, requires shifting any
code that immediately follows the expanded basic block. In essence,
this means that all basic blocks following the modiﬁed one must be
moved, which again is not possible.
Given the above constraints, we observe that although we cannot
change the boundaries of a basic block, we can still perform arbitrary
modiﬁcations within a basic block, as long as the semantics of the
code remain the same (e.g., as is the case with the intra basic block
instruction reordering transformation of in-place code randomiza-
tion [41]). Furthermore, although patching an arbitrary location of a
binary executable is not possible, we can safely patch any location
within a basic block (assuming there is enough space), as long as
the basic block’s boundaries have been properly identiﬁed.
Based on these two observations, instruction displacement uses
code patching to selectively relocate (some of) the instructions of a
basic block to a random location. The overall approach is illustrated
in Figure 1. The upper part of the ﬁgure shows the original code
of a basic block (rectangles represent variable-length instructions),
and the lower part shows the modiﬁed version of the code, with
some of its instructions displaced into a new code region. In this
example, the basic block contains two ROP gadgets, G1 and G2,
located at addresses addr1 and addr2, respectively. The ﬁrst (G1)
is an unintended gadget that begins from the middle of an existing
instruction and ends with a ret instruction (opcode 0xC3) located
again within an existing instruction. The second (G2) is an intended
gadget that ends with a call eax instruction that is part of the
program’s code.
In the modiﬁed version of the code, the instructions at the be-
ginning of the basic block have been overwritten by a relative jmp
instruction that points to the overwritten instructions, which have
now been copied into a random location, along with some of their
following instructions. Note that the jmp instruction takes ﬁve bytes
(one-byte opcode plus four bytes for its immediate operand), and
thus instructions contained in basic blocks shorter than ﬁve bytes
cannot be displaced in the general case. Although a smaller 2-byte
relative jmp instruction could be used, its 8-bit displacement usually
25Figure 1: High-level view of instruction displacement. By moving part of the original basic block’s code in a random location, the
starting addresses of the two gadgets become unpredictable. To maintain the original semantics of the code, the displaced instructions
are linked with the rest of the code using relative jumps.
cannot “reach” far enough for transferring control to the area that
contains the displaced instructions. For such cases, an alternative
approach would be to insert a smaller trap instruction and achieve
indirection through an appropriate handler routine. Unfortunately,
the associated runtime overhead of such a solution would be pro-
hibitively high. As we discuss in Section 5.1.2, the percentage of
gadgets in such small basic blocks is very low, in the order of 0.83%,
and thus we have chosen to ignore them.
Recall that a basic block is deﬁned as a straight-line sequence
of instructions with only one entry point and only one exit. Con-
sequently, we can safely patch with a jmp instruction any location
within a basic block that corresponds to the address of an existing
instruction. To preserve the semantics of the basic block’s code, all
that remains to be done is to transfer control back to the original
location after the execution of the displaced instructions. This can
be achieved again with a relative jmp placed right after the ﬁnal
displaced instruction.
By moving the instructions that contain the two gadgets in a
randomly chosen location, an attacker cannot rely on them anymore
based on their original addresses. The original code right after the
patched location is overwritten with instructions that will crash the
program or trap execution (e.g., privileged or interrupt instructions),
and thus any transfer to the original locations of the gadgets (addr1
and addr2) is ruled out. At the same time, the starting addresses
of the displaced gadgets are now random, so an attacker cannot
guess them (proper ASLR implementations, e.g., the one used in the
latest versions of Windows, and additional random padding at the
beginning of the segment that contains the displaced code fragments
achieve enough entropy for that purpose).
3.2 Displacement Strategy
Although the address of a displaced gadget is not known to an
attacker, the location of the inserted jmp can be easier to predict, and
thus an attacker can still use it as the starting address for reaching a
gadget. Depending on whether a gadget is intended or unintended,
we can follow a different displacement strategy while trying to
minimize the number of displaced instructions.
Intended Gadgets
3.2.1
Due to the inserted jmp, among all intended gadgets in a dis-
placed code region, the one that (in the original code) begins with
the patched instruction is still usable—the attacker can still rely
on its original address, and the inserted jmp at that location will
unconditionally transfer control to it. Depending on the location
of the gadget within the basic block, however, this means that the
attacker now must use a longer gadget, which is likely to have many
more side effects in terms of register and memory state changes (a
given indirect branch instruction is generally the “end” of several
nested gadgets extending backwards from it). Although the use of
longer-than-usual gadgets is possible [16, 21, 28, 47], it complicates
signiﬁcantly the construction of ROP payloads due to the additional
side effects of the extra non-essential instructions.
To increase the complexity of any remaining usable gadgets, a
displaced sequence of instructions begins as “far” as possible from
any contained gadgets—in most cases, this means the beginning of
the respective basic block. Given that it is desirable to minimize the
number of displaced instructions, for very large basic blocks, we
have set a limit of displacing up to 20 instructions from the end of a
target gadget. In the example of Figure 1, the jmp is inserted at the
beginning of the basic block, and the three instructions of gadget G2
can now be used only if seven additional instructions are executed
before them.
Given that the percentage of the remaining usable gadgets by
following the “entry point” of a displaced region is very low (0.6%
in our experiments, as discussed in Section 5.1.2), we have chosen
to not take any further action about them. We should note, however,
that instruction displacement opens up more possibilities for ran-
domizing or eliminating altogether the displaced gadgets. Indeed,
once a sequence of instructions has been displaced, further transfor-
mations on the displaced gadgets can be applied. Fortunately though,
in contrast to the general case, we can now fully disassemble the dis-
placed instructions, and there is no space constraint due to previous
or following basic blocks, as we have full control over the region
where the displaced instructions are copied, and the placement of
individual code fragments within that region. This means that we
retcall eaxD0FFG1jmp jmp C3G2addr1addr2D0FFG1C3G2????????basic blockboundarybasic blockboundaryOriginalDisplaced.text.text.ropf26can apply more aggressive code transformations, beyond what is
possible using in-place code randomization, such as splitting an
existing instruction into two or more instructions. As an alternative
example, we can apply transformations similar to the ones used by
G-Free [40] to completely eliminate the displaced gadgets.
3.2.2 Unintended Gadgets
Unintended gadgets begin only from unaligned instructions, and
may end with an either aligned or unaligned instruction (if the ﬁrst
instruction is an aligned one, then there is no way to “escape” from
the intended instruction stream due to the unambiguous nature of
instruction decoding). Consequently, the “predictable entry point”
issue discussed above does not apply when a displaced instruction
sequence contains solely unintended gadgets—by following the in-
serted jmp, an attacker still cannot reach the unintended gadget (as
is the case with gadget G1 in Figure 1). This makes the decision
on which location to patch much simpler: it is enough to patch the
intended instruction that contains the opcode byte of the ﬁrst unin-
tended instruction of the gadget. The location of that opcode byte
in the displaced instruction will be random, and by following the
jmp the attacker will be forced to execute the intended instruction
stream, without being able to reach the unintended gadget.
Especially for unintended gadgets, this approach is quite effective
even when a gadget spans two consecutive basic blocks. In such
cases, although we cannot displace the whole gadget (due to our
restriction in maintaining basic block boundaries intact), it is enough
to displace even just the ﬁrst instruction of the gadget to make the
whole gadget unusable. This is possible when the ﬁrst overlapping
instruction is located towards the end of the ﬁrst basic block, in
which case it can be safely displaced.
In essence, instruction displacement enforces a coarse-grained
control ﬂow integrity constraint in a probabilistic and selective way.
For intended gadgets, control ﬂow is allowed to reach only the entry
point of the basic block that contains a gadget (or, for very large
basic blocks, the ﬁrst of a sufﬁciently large number of instructions
preceding the gadget). For unintended gadgets, control ﬂow cannot
“escape” from the intended instruction stream and reach any of the
unaligned instructions of the gadget.
3.2.3 Combining Instruction Displacement with In-
Place Code Randomization
Each displaced code region results in a slight increase in memory
space and CPU overhead, due to the copied code, the extra indirec-
tion, and the disruption of code locality (although the latter some
times has a positive impact, as discussed in Section 5.4). It is thus
desirable to minimize the number of displaced regions whenever
possible. Given that the end goal of the proposed technique is to
improve the coverage and entropy achieved by existing code diversi-
ﬁcation techniques, we can combine instruction displacement with
in-place code randomization, and apply the former only for gadgets
that cannot be randomized by any of the existing code transforma-
tions of IPR (and optionally, also for gadgets that are randomized
with insufﬁcient entropy).
To that end, each binary is ﬁrst analyzed to pinpoint all exist-
ing gadgets, and IPR is applied to randomize or eliminate as many
gadgets as possible. Then, a second instruction displacement pass
considers all remaining unmodiﬁable gadgets, and attempts to dis-
place them whenever possible. In many cases, a basic block might
contain several gadgets, some of which might be affected by IPR,
and some not. To increase randomization coverage as much as possi-
ble, we follow a conservative approach and apply displacement even
if only a single out of several gadgets within the same instruction
sequence cannot be randomized by IPR.
3.3 Putting It All Together
We discuss a few remaining issues and optimizations by looking
at a real example of applying instruction displacement. Figure 2
shows a basic block from Adobe Reader’s BIB.dll that contains
several (nested) gadgets ending with a ret instruction. In partic-
ular, “pop; pop; ret;” gadgets are quite useful in assembling
ROP payloads, while the call-preceded gadget starting with the
lea instruction can be used to bypass coarse-grained CFI protec-
tions [16, 21, 28, 47]. After instruction displacement, the push
instruction at address 0x7002806 has been replaced by a direct jmp
to the displaced instructions, which now reside at a random location