# Android OLLVM反混淆实战
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
小弟我最近在研究ollvm平坦化的反混淆，但网上的参考资料大多是x86的反混淆，关于arm的少之又少，现正好手头有个app样本中运用了这种混淆技术，所以拿来练一练手。
app样本：douyin9.9.0  
so样本：libcms.so  
逆向工具：ida,jadx
## 观察函数控制流程图(CFG)
所要获取的签名算法位于leviathan方法中，该方法是个native方法，在libcms.so中没有静态关联函数，所以我们需要找到其动态注册的位置。
首先，分析Jni_OnLoad函数，Jni函数的动态注册一般都在这里进行：
关于ollvm的基本原理，大家可以在 
上进行详细了解，在这里不做过多说明。
可以看到
JNI_OnLoad已经被彻底地混淆，通过流程图结构，我们可以初步推断是ollvm的指令平坦，进一步观察发现大部分流程块都会跳转至0x46FE，从而可以得出0x46FE是主分发器所在块，r0寄存器作为保存索引值的寄存器(在这里我将混淆里用于索引到相关块的常量值称为索引值)。
## 去除一般混淆
仔细观察函数内容，发现其中还包含另外一种混淆结构，如下图所示：
从0x478c的位置PUSH {R0-R3}开始是另一个混淆结构的开始，功能比较简单，分析之后其作用是直接跳转到另一个地址，跳转的位置是到POP
{R0-R3}指令的下一个地址，即0x47E4的位置。  
去除这中混淆的方式也比较简单，直接把0x478c处修改成到0x47E4的跳转即可，中间的混淆代码可以用nop填充掉，鉴于整个函数有多处这样的混淆，可以写个ida脚本批量处理，通过搜索特征字节码来定位混淆代码的起始与结束位置，例如混淆开始处的opcode为0F
B4 78 46 79 46(为了避免错误识别可以多判断几个字节码)，结束处的opcode为0F BC。
脚本内容如下：
    from idc import *
    from idautils import *
    from idaapi import *
    from keystone import *
    ks=Ks(KS_ARCH_ARM,KS_MODE_THUMB)
    def ks_disasm(dis_str):
        global ks
        encoding,count=ks.asm(dis_str)
        return encoding
    func_start=0x44c8
    func_end=0x498c
    patch_start = None
    patch_end = None
    for i in range(func_start, func_end):
        #PUSH{R0-R3} or PUSH{R0-R3,R7}
        #MOV R0,PC
        #MOV R1,PC
        if get_bytes(i,6,0) == b'x0fxb4x78x46x79x46' or get_bytes(i,6,0) == b'x8fxb4x78x46x79x46':
            patch_start = i
        #POP{R0-R3}
        if get_bytes(i,2,0) == b'x0fxbc':
            if patch_start != None:
                patch_end = i + 2
        #POP{R7},POP{R0-R3}
        if get_bytes(i,4,0) == b'x07xbcx88xbc':
            if patch_start != None:
                patch_end = i + 4
        if nop_start != None and nop_end != None:
            for i in range(0, patch_end - patch_start, 2):
                patch_byte(nop_start+i,0x00)
                patch_byte(nop_start+i+1,0xbf)
            dis_str = 'b #{}-{}'.format(patch_end, patch_start)
            jmp_addr.append(patch_start)
            encoding = ks_disasm(dis_str)
            for item in encoding:
                print('{}'.format(hex(item)))
            for j in range(len(encoding)):
                patch_byte(patch_start+j,encoding[j])
            patch_start = None
            patch_end = None
####  寻找相关块
准备工作已完成，正式进入我们的主题，还原ollvm的混淆代码——关于如何还原流程平坦化，有三个问题需要解决：
一、找出流程里所有的相关块
二、找出各个相关块之间执行的先后顺序
三、使用跳转指令将各个相关块连接起来
第一个问题，通过以下规律找到差不多所有的相关块：
1、后继是分发器块的，一般是相关块(注意是一般，因为有的次分发器也会跳转至主分发器
2、相关块的前继块中，有且只有当前相关块一个后继块的，也是相关块
Github上有许多二进制分析框架(angr，barg，miasm等等)，可以对函数生成CFG(控制流程图)，由于barg和miasm对arm-v7a指令的支持不是很完全，有些代码无法反汇编，最终我选用了angr。(github地址：[https://github.com/angr/angr）](https://github.com/angr/angr%EF%BC%89)
这里我参考了github上的一个x86 ollvm反混淆脚本():
    filename = 'your sopath/libcms.so'
    #start of JNI_Onload
    start_addr=0x44c8
    end_addr=0x498c
    project = angr.Project(filename, load_options={'auto_load_libs': False})
    cfg = project.analyses.CFGFast(regions=[(startaddr,endaddr)],normalize='True')
    #函数为Thumb-2指令，所以寻找functions时的函数地址应该加上1
    target_function = cfg.functions.get(start_addr+1)
    #将angr的cfg转化为转化为类似ida的cfg
    supergraph = am_graph.to_supergraph(target_function.transition_graph)
    #手动寻找主分发器，返回块，序言块
    main_dispatcher_node=get_node(supergraph,0x46ff)
    retn_node=get_node(supergraph,0x4967)
    prologue_node=get_node(supergraph,0x44c9)
    #手动填入保存索引值的寄存器
    regStr='r1'
project.analyses.CFGFast方法可以快速生成一个二进制代码的控制流程图，但这种流程图和ida的流程有一些不同(比如会将BL函数调用前后的代码分割成两个基本块)，而am_graph.to_supergraph方法，则可将其进一步转化为类似ida流程图的结构。
生成cfg后我们通过之前提到的规律来寻找所有的相关块，先找出所有跳转至主分发器的基本块，再筛选其中的相关块。
还有一些如上图红框所示1其实是一个次分发器，但最后跳转到了主分发器，对于这种情况，我们需要通过匹配特征反汇编指令来过滤掉这些分发器。而红框所示2包含了栈指针操作，但可以发现其并未使栈平衡，观察整个函数也并未发现其他平衡栈的操作，所以可以初步判定此类型的块也可能是混淆块，也应该过滤掉。
在这里我把直接跳转到主分发器的相关块称作一级相关块，对于没有跳转到主分发器而是跳转到另一个相关块的相关块称为次级相关块，则可以通过递归的方块由一级相关快逐层向上寻找，直到找出所有相关块。
由于编译器的优化导致某些相关块在改变了后并未跳转至主分发器，而是跳到了另一个共用代码段。如下图所示，0x14f44处是主分发器，因为编译优化的原因上面三处相关块都会引用同一个代码块，这样在后面的符号执行时，需要将0x14ac8处的相关块看做是上面三个相关块的一部分，符号执行时应该跳过这个共用的相关块。最后在patch指令时，将共用的相关块添加至每个引用它的相关块的末尾，然后再进行跳转。
寻找所有相关块的代码：
    def get_relevant_nodes(supergraph):
        global pre_dispatcher_node, prologue_node, retn_node,special_relevant_nodes,regstr
        relevants = {}
        #寻找那些没有直接跳转到主分发器的相关块
        def find_other_releventnodes(node,isSecondLevel):
            prenodes = list(supergraph.predecessors(node))
            for prenode in prenodes:
                if len(list(supergraph.successors(prenode)))==1:
                    relevants[prenode.addr] = prenode
                    if isSecondLevel and not(is_has_disasmes_in_node(node, [['mov', regstr]]) or is_has_disasmes_in_node(node, [['ldr', regstr]])):
                        #由于编译器的优化导致某些相关块在改变了索引值后并未跳转至主分发器，而是跳到了另一个共用代码段。
                        special_relevant_nodes[prenode.addr]=node.addr
                    find_other_releventnodes(prenode,False)
        nodes = list(supergraph.predecessors(main_dispatcher_node))
        for node in nodes:
            #获取基本块的反汇编代码
            insns = project.factory.block(node.addr).capstone.insns
            if node in relevant_nodes:
                continue
            #过滤跳转到主分发器的子分发器
            elif len(insns)==4 and insns[0].insn.mnemonic.startswith('mov') and 
                    insns[1].insn.mnemonic.startswith('mov') and 
                    insns[2].insn.mnemonic.startswith('cmp') and 
                    is_jmp_code(insns[3].insn.mnemonic):
                continue
            elif len(insns)==1 and is_jmp_code(insns[0].insn.mnemonic):
                continue
            elif len(insns)==2 and insns[0].insn.mnemonic.startswith('cmp') and 
                is_jmp_code(insns[1].insn.mnemonic):
                continue
            elif len(insns)==5 and (is_has_disasmes_in_node(node,[['mov',''],['mov',''],    ['cmp',''],['ldr',regstr]]) or 
                is_has_disasmes_in_node(node,[['mov',''],['mov',''],['cmp',''],                ['mov',regstr]]) )and 
                is_jmp_code(insns[4].insn.mnemonic):
                continue
            #过滤有add sp操作但没有sub sp操作的块
            elif is_has_disasmes_in_node(node,[['add','sp']]) and 
                    is_has_disasmes_in_node(node,[['nop','']]):
                continue
            #将认定为相关块的基本块保存
            relevants[node.addr]=node
            #寻找其他没有跳转到主分发器的相关块
            find_other_releventnodes(node,True)
        return relevants
    def is_startwith(str1,str2):
        if str2=='':
            return True
        return str1.startswith(str2)
    #是否是跳转指令
    def is_jmp_code(str):
        if not str.startswith('b'):
            return False
        if str.startswith('bl'):
            if str.startswith('ble') and not str.startswith('bleq'):
                return True
            else: return False
        return True
    #是否是函数调用指令
    def is_call_code(str):
        if not str.startswith('bl'):
            return False
        if str.startswith('ble') and not str.startswith('bleq'):
            return False
        return True
    def is_has_disasmes_in_insns(insns,disinfolist):
        size = len(disinfolist)
        for i in range(len(insns) - (size-1)):
            is_has = True
            for j in range(size):