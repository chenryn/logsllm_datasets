### Optimized Text

#### 4.2 System Reduction

1. **Equation and Variable Definitions:**
   - Equations are given by \( Q_{2k, \beta_i, i} = p_k \).
   - Variables are the \( i \)-th column of \( T \), denoted as \( t_{1i}, \ldots, t_{vi} \).

2. **Reduction with Known Elements:**
   - Suppose \( x \) elements of the \( i \)-th column of \( T \) are known or recovered.
   - Define \( A_i(x) \) as a reduced system of \( A_i \) by inserting the \( x \) recovered bits into \( A_i \).
   - Inserting \( x \) variables into \( A_i \) reduces the system from \( MQ(v, m) \) to \( MQ(v - x, m) \).

3. **Bivariate System Definition:**
   - Define \( B_{i,j} \) as the set of \( m \) equations of \( 2v \) variables, \( MQ(2v, m) \).
   - The equations are \( Q_{2(k, \beta_i, j)} = p_k \) for \( k \) from 1 to \( m \).
   - Variables are the \( i \)-th and \( j \)-th columns of \( T \), denoted as \( t_{1i}, \ldots, t_{vi}, t_{1j}, \ldots, t_{vj} \).

4. **Reduction to Linear System:**
   - Suppose the \( i \)-th column of \( T \), \( t_{1i}, \ldots, t_{vi} \), is known.
   - Inserting these variables into \( B_{i,j} \) reduces the quadratic \( MQ(2v, m) \) system to a linear \( ML(v, m) \) system, where the unknowns are \( t_{1j}, \ldots, t_{vj} \).
   - Denote the insertion of the \( i \)-th column of \( T \) into \( B_{i,j} \) by \( B_{i,j}(t_i, 0) \).
   - This reduction transforms the hard problem \( MQ(2v, m) \) into an underdetermined linear \( ML(v, m) \) system.

5. **Further Reduction with Partially Known Columns:**
   - Suppose \( x \) elements of the \( j \)-th column of \( T \) and the entire \( i \)-th column of \( T \) are known.
   - Inserting these known variables into \( B_{i,j} \) reduces the system from \( MQ(2v, m) \) to \( ML(v - x, m) \).
   - The new system is denoted by \( B_{i,j}(t_i, x) \).
   - If \( x \geq v - m \), the system reduces to an overdetermined linear system from an underdetermined one, making it efficiently solvable with a unique solution.

#### 4.3 Practical Divide and Conquer Attack

We will use a bit-tracing attack as an oracle to recover some bits of some column in matrix \( T \). Informally, QuantumHammer proceeds as follows:

##### 4.3.1 Bit-tracing (Section 3)

- **Bit-tracing Recovery:**
  - Suppose \( x \) bits in some column of \( T \) are enough to reduce the \( MQ(v, m) \) system into a solvable \( MQ(v - x, m) \) system.
  - When \( x \) bits are recovered via bit-tracing in some column, stop the bit-tracing and recover the bits as explained in Section 3.
  - Apply the bit-tracing attack to recover bits of \( T \) until the highest number of recovered bits from a column is \( v - m \).
  - Pick the highest \( x_1, x_2, x_3, \) and \( x_4 \) bits in the \( \alpha_1, \alpha_2, \alpha_3, \) and \( \alpha_4 \)-th columns of \( T \), respectively.
  - Note that having \( \lceil \frac{v}{m} \rceil \) columns of \( T \) is enough to reduce the MQ systems into ML systems and can efficiently solve them.
  - Therefore, we do not need to use the remaining bits recovered by bit-tracing in different columns of \( T \).

##### 4.3.2 Quadratic Steps (Algorithm 3)

- **Step-by-Step Reduction:**
  1. **Consider \( A_{\alpha_1} \):**
     - Specifically, consider the elements of the \( \beta_{\alpha_1, \alpha_1} = (\alpha_1 - 1)m + \alpha_1(\alpha_1 + 1) \)-th column of \( Q_2 \), which are the \( P_k^3 \) terms for \( k \) from 1 to \( m \) and \( \alpha_1 \) is the highest column of \( T \).
     - Inserting \( x_1 \) recovered bits into the system \( A_{\alpha_1} \) reduces the \( MQ(v, m) \) system into \( MQ(v - x_1, m) \).
     - Recover the remaining \( v - x_1 \) elements of the \( \alpha_1 \)-th column of \( T \), which are \( t_{1\alpha_1}, \ldots, t_{v\alpha_1} \).

  2. **Insert Recovered Columns:**
     - Insert the recovered \( \alpha_1 \)-th column of \( T \) into \( B_{\alpha_1, \alpha_2} \) and \( x_2 \) recovered bits of the \( \alpha_2 \)-th column of \( T \) into the systems \( B_{\alpha_1, \alpha_2} \) and \( A_{\alpha_2} \).
     - This reduces the systems into \( B_{\alpha_1, \alpha_2}(t_{\alpha_1}, x_2) \) and \( A_{\alpha_2}(x_2) \), respectively.
     - The system reduces to a practically solvable \( ML(v - x_2, m) \) system, giving the full \( \alpha_2 \)-nd column of \( T \), which are \( t_{1\alpha_2}, \ldots, t_{v\alpha_2} \).
     - Even though solving \( MQ(v - x_2, m) \) is harder than solving \( MQ(v - x_1, m) \), there are \( m \) additional linear equations from \( ML(v - x_2, m) \) which decrease the number of unknowns from \( v - x_2 \) to \( v - x_2 - m \). Therefore, \( MQ(v - x_2, m) \) is easier to solve than \( MQ(v - x_1, m) \).

  3. **Apply Strategy to \( \alpha_3 \)-th Column:**
     - Insert the \( \alpha_1 \) and \( \alpha_2 \)-th columns of \( T \) (recovered in the first two steps) into the systems \( B_{\alpha_1, \alpha_3}, B_{\alpha_2, \alpha_3} \), and \( A_{\alpha_3} \).
     - The complexity reduces to \( B_{\alpha_1, \alpha_3}(t_1, x_3) \), \( B_{\alpha_2, \alpha_3}(t_2, x_3) \), and \( A_{\alpha_3}(x_3) \).
     - The system reduces to \( ML(v - x_3, 2m) \) and \( MQ(v - x_3, m) \), which has the solution of \( x_3 \) unknowns from the \( \alpha_3 \)-rd column, which are \( t_{1\alpha_3}, \ldots, t_{v\alpha_3} \).
     - The solution of the system is equivalent to the solution of \( MQ(v - x_3 - 2m, m) \), which is much easier than the previous steps.

  4. **Recover \( \alpha_4 \)-th Column:**
     - Apply the same strategy to recover the \( \alpha_4 \)-th column of \( T \) by using previously recovered columns of \( T \) in addition to recovered \( x_4 \) bits of the \( \alpha_4 \)-th column in the bit-tracing attack.
     - Inserting the known elements will reduce the complexity to \( ML(v - x_4, 3m) \) and \( MQ(v - x_4, m) \).
     - This is a solvable system, and the solution gives us the \( \alpha_4 \)-th column elements \( t_{1\alpha_4}, \ldots, t_{v\alpha_4} \).

After \( \lceil \frac{v}{m} \rceil \) steps, \( \lceil \frac{v}{m} \rceil \) columns are enough to reduce any small MQ system to an ML if \( \lceil \frac{v}{m} \rceil \) recovered columns of \( T \) are available.

##### 4.3.3 Linear Steps (Algorithm 4)

- **Linear System Reduction:**
  - Suppose there are \( \lceil \frac{v}{m} \rceil \) recovered columns of \( T \) from the quadratic steps.
  - Inserting the bits of the recovered columns into the related systems will give the following reduced ML system:
    \[
    \sum_{i=1}^{\lceil \frac{v}{m} \rceil} B_{\alpha_i, \beta}(t_i, 0)
    \]
    where \( \alpha_i \)'s are the column numbers of the recovered columns of \( T \) and \( \beta \) is the column number of the attacked column of \( T \).
  - This gives us an overdetermined \( ML(v, \lceil \frac{v}{m} \rceil \cdot m) \) system, which can be solved efficiently.

Note that by the linear steps, we can recover the rest of the \( T \) columns one by one in \( m - \lceil \frac{v}{m} \rceil \) steps.

#### Algorithms

**Algorithm 3: Quadratic_Steps**

- **Input:** \((\alpha_1, x_1), \ldots, (\alpha_\kappa, x_\kappa)\)
- **Output:** \((t_{\alpha_1}, \ldots, t_{\alpha_\kappa})\) - entire columns of input vectors

1. \( A_{\alpha_1}(x_1) \leftarrow MQ\_Gen(\alpha_1, x_1) \)
2. \( t_{\alpha_1} \leftarrow Eqn\_Solver(A_{\alpha_1}(x_1), \emptyset) \)
3. For \( i \) from 2 to \( \kappa = \lceil \frac{v}{m} \rceil \):
   - \( A_{\alpha_i}(x_i) \leftarrow MQ\_Gen(\alpha_i, x_i) \)
   - For \( j \) from 1 to \( i-1 \):
     - \( B_{\alpha_i, \alpha_j}(x_i, t_j) \leftarrow ML\_Gen((\alpha_i, x_i), (\alpha_j, t_j)) \)
   - \( t_i \leftarrow Eqn\_Solver(A_{\alpha_i}(x_i), \bigcup_{j=1}^{i-1} B_{\alpha_i, \alpha_j}(x_i, t_j)) \)

**Algorithm 4: Linear_Steps**

- **Input:** \((\alpha_1, t_{\alpha_1}), \ldots, (\alpha_\kappa, t_{\alpha_\kappa})\)
- **Output:** \((t_1, \ldots, t_m)\)

1. For \( i \) from 1 to \( m \):
   - For \( j \) from 1 to \( \kappa \):
     - \( B_{i, \alpha_j}(\emptyset, t_{\alpha_j}) \leftarrow ML\_Gen((i, \emptyset), (\alpha_j, t_{\alpha_j})) \)
   - \( t_i \leftarrow Eqn\_Solver(\emptyset, \bigcup_{j=1}^\kappa B_{i, \alpha_j}(0, t_{\alpha_j})) \)
   - Return \( t_i \)

**Algorithm 5: MQ_Gen**

- **Input:** \( i, x \)
- **Output:** \( A_i(x) \)

1. \( A_i \leftarrow GenMQ(i) \)
2. \( A_i(x) \leftarrow InsertVec(A_i, x) \)
3. Return \( A_i(x) \)

**Algorithm 6: ML_Gen**

- **Input:** \((i, x), (j, y)\)
- **Output:** \( B_{i,j}(x, y) \)

1. \( B_{i,j} \leftarrow EqnGen(i, j) \)
2. \( B_{i,j}(x, y) \leftarrow InsertVec(B_{i,j}, x, y) \)
3. Return \( B_{i,j}(x, y) \)

**Algorithm 7: Eqn_Solver**

- **Input:** \( A_i(x), \bigcup_{j=1}^{i-1} B_{i,j}(x, y_j) \)
- **Output:** \( t_j \) or No Result

1. If \( v - x \leq m \), solve \( A_i(x) \).
2. If \( v - x - (i-1)m \leq 0 \), solve \( \bigcup_{j=1}^{i-1} B_{i,j}(x, y_j) \).
3. If \( 0 \leq v - x - (i-1)m \leq m \), solve \( A_i(x) \cup \bigcup_{j=1}^{i-1} B_{i,j}(x, y_j) \).
4. Otherwise, break.
5. Return \( t_j \).

**Algorithm 8: Matrix_Gen**

- **Input:** \( Q_1, Q_2 \)
- **Output:** \( P_3 \)

1. \( P_{k1} \leftarrow findP_{k1}(Q_1, k) \)
2. \( P_{k2} \leftarrow findP_{k2}(Q_1, k) \)
3. \( P_{k3} \leftarrow GenP_{k3}(P_{k1}, P_{k2}, k) \)
4. \( Q_2 \leftarrow GenQ_2(P_{k3}) \)
5. Return \( P_3 \)

#### 5. Experimental Results

**Bit-tracing:**

- We have attacked the constant-time AVX2 reference implementation of LUOV-7-57-197 [44] on a Haswell system equipped with an Intel Core i7-4770 CPU @ 3.40GHz, 2 GBytes DDR3 DRAM, model Samsung (M378B5773DH0-CH9).
- Pre-processing (templating) step was performed in 5.7 hours to find 17,129 physical addresses vulnerable to the bit-tracing attack.
- After that, 16 hours of online phase were carried out, during which the victim was running and performing signing operations.

**Time Results:**

- For \( n = m \):
  - \( n = 40 \): 2.7 seconds
  - \( n = 43 \): 12 seconds
  - \( n = 49 \): 11 minutes 33 seconds
  - \( n = 52 \): 1 hour 32 minutes
  - \( n = 53 \): 3 hours 3 minutes
  - \( n = 54 \): 3 hours 6 minutes
  - \( n = 55 \): 
  - \( n = 56 \): 
  - \( n = 57 \): 

This optimized text provides a clear, coherent, and professional presentation of the original content.