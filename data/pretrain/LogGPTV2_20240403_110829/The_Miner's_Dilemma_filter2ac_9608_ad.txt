choosing a strictly positive inﬁltration rate, that is, x1,2 =
x2,1 = 0 is not a solution to Equations 14–15.
Nash equilibrium therefore exists with x1,2, x2,1 values
where
∂r1(x1,2, x2,1)
∂x1,2
∂r2(x2,1, x1,2)
∂x2,1
= 0
= 0
.
(16)
⎧⎪⎪⎨
⎪⎪⎩
Using symbolic computation tools, we see that there is a
single pair of values for which Equation 16 holds for any
feasible choice of m1 and m2.
A. Numerical Analysis
A numerical analysis conﬁrms these observations. We
simulate the pool game for a range of pool sizes. For each
choice of pool sizes, we start the simulation when both pools
do not inﬁltrate each other, x1,2 = x2,1 = 0, and the revenue
densities are r1 = r2 = 1. At each round one pool chooses
its optimal inﬁltration rate based on the pool sizes and the
rate with which it is inﬁltrated, and we calculate the revenue
after convergence with Equation 11. Recall the players in the
pool game are chosen with the Round Robin policy, so the
pools take turns, and we let the game run until convergence.
The results are illustrated in Figure 7.
Each run with some m1, m2 values results in a single
point in each graph in Figure 7. We depict the inﬁltration
rates of both pools x1,2, x2,1 in Figures 7a–7b and the pools’
revenue densities r1, r2 in Figures 7c–7d. So, for each choice
of m1 and m2, the values of x1,2, x2,1, m1 and m2 are the
points in each of the graphs with the respective coordinates.
For the xi,j graphs we draw a border around the region
where there is no-attack by i in equilibrium. For the ri
graphs we draw a line around the region where the revenue
is the same as in the no-attack scenario, namely 1.
We ﬁrst observe that only in extreme cases a pool does
not attack its counterpart. Speciﬁcally, at equilibrium a pool
will refrain from attacking only if the other pool is larger
than about 80% of the total mining power.
But, more importantly, we observe that a pool improves
its revenue compared to the no-pool-attacks scenario only
when it controls a strict majority of the total mining power.
These are the small triangular regions in Figures 7c and 7d.
In the rest of the space, the trapezoids in the ﬁgures, the
revenue of the pool is inferior compared to the no-pool-
attacks scenario.
B. The Prisoner’s Dilemma
In a healthy Bitcoin environment, where neither pool
controls a strict majority of the mining power, both pools
will earn less at equilibrium than if both pools ran without
attacking. We can analyze in this case a game where each
pool chooses either to attack and optimize its revenue, or to
refrain from attacking.
Consider pool 1 without loss of generality. As we have
seen in Section V, if pool 2 does not attack, pool 1 can
increase its revenue above 1 by attacking. If pool 2 does
attack but pool 1 does not, we denote the revenue of pool 1
by ˜r1. The exact value of ˜r1 depends on the values of m1
and m2, but it is always smaller than one. As we have
seen above, if pool 1 does choose to attack, its revenue
increases, but does not surpass one. The game is summarized
in Figure 9.
is
this
When played once,
the classical prisoner’s
dilemma. Attack is the dominant strategy: Whether pool 2
chooses to attack or not, the revenue of pool 1 is larger when
attacking than when refraining from attack, and the same for
pool 2. At equilibrium of this attack-or-don’t game, when
both pools attack, the revenue of each pool is smaller than
its revenue if neither pool attacked.
However, the game is not played once, but rather continu-
ously, forming a super-game, where each pool can change its
strategy between attack and no-attack. The pools can agree
(even implicitly) to refrain from attacking, and in each round
9898
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:05:40 UTC from IEEE Xplore.  Restrictions apply. 
XXXXXXXXXX
Pool 1
Pool 2
no attack
attack
no attack
attack
(r1 = 1, r2 = 1)
(r1 = ˜r1  1)
(r1 > 1, r2 = ˜r2 < 1)
(˜r1 < r1 < 1, ˜r2 < r2 < 1)
Figure 9. Prisoner’s Dilemma for two pools. The revenue density of each pool is determined by the decision of both pools whether to attack or not. The
dominant strategy of each player is to attack, however the payoff of both would be larger if they both refrain from attacking.
a pool can detect whether it is being attacked and deduce
that the other pool is violating the agreement. In this super-
game, cooperation where neither pool attacks is a possible
stable state [25], [26] despite the fact that the single Nash
equilibrium in every round is to attack.
C. Test-case
As an example we take again the pool sizes shown in
Figure 6, and study the case where the two largest pools,
DiscusFish and AntPool, attack one another. The optimal
inﬁltration rates (out of the total system mining power) are
8% and 12%, respectively, and the pools would lose 4%
and 10% of their revenues, respectively, compared to the
no-attack scenario.
VII. q IDENTICAL POOLS
Let there be q pools of identical size that engage in block
withholding against one another. Other miners neither attack
nor are being attacked. In this case there exists a symmetric
equilibrium. Consider, without loss of generality, a step of
pool 1. It controls its attack rates each of the other pools,
and due to symmetry they are all the same. Denote by x1,¬1
the attack rate of pool 1 against any other pool. Each of the
other pools can attack its peers as well. Due to symmetry, all
attack rates by all attackers are identical. Denote by x¬1,∗
the attack rate of any pool other than 1 against any other
pool, including pool 1.
Denote by R1 the direct revenue (from mining) of pool 1
and by R¬1 the direct revenue of each of the other pools.
Similarly denote by r1 and r¬1 the revenue densities of
pool 1 and other pools, respectively.
The generic equations 3 and 4 are instantiated to
R1 =
R¬1 =
mi − (q − 1)x1,¬1
mi − (q − 1)x¬1,∗
m − (q − 1)(q − 1)x¬1,∗ − (q − 1)x1,¬1
m − (q − 1)(q − 1)x¬1,∗ − (q − 1)x1,¬1
(17)
and
r1 =
R1 + (q − 1)x1,¬1r¬1
mi + (q − 1)x¬1,1
R¬1 + (q − 2)x¬1,∗r¬1 + x¬1,∗r1
mi + (q − 2)x¬1,∗ + x1,¬1
r¬1 =
.
(18)
Substituting Equations 17 in Equation 18 and solving
we obtain a single expression for any ri, since in the
9999
symmetric case we have r1 = r¬1. The expression is shown
in Equation 18 (Figure 10).
Given any value of q and mi (where qmi < 1), the feasi-
ble range of the inﬁltration rates is 0 ≤ xi,j ≤ mi/q. Within
this range ri is continuous, differentiable, and concave in
x1,¬1. Therefore, the optimal point for pool 1 is where
∂r1/∂x1,¬1 = 0. Since the function is concave the equation
yields a single feasible solution, which is a function of the
attack rates of the other pools, namely x¬1,1 and x¬1,∗.
To ﬁnd a symmetric equilibrium, we equate x1,¬1 =
x¬1,1 = x¬1,∗ and obtain a single feasible solution. The
equilibrium inﬁltration rate and the matching revenues are
shown in Equation 20 (Figure 11).
As in the two-pool scenario, the revenue at the symmetric
equilibrium is inferior to the no-one-attacks non-equilibrium
strategy.
VIII. PRACTICALITIES
A. Ramp-up
Our analysis addresses the eventual revenue of the pools,
assuming the mining difﬁculty is set based on the effective
mining power, not including mining power used for with-
holding. However, difﬁculty is updated only periodically —
every 2016 blocks in Bitcoin. When mining power in the
system is regularly increasing, which has been true for the
majority of Bitcoin’s history [27], no adjustment may be
necessary. Speciﬁcally, if an attacker purchases new mining
hardware and employs it directly for block withholding,
this mining power is never included in the difﬁculty cal-
culation — the system is never aware of it. The difﬁculty
is therefore already correctly calculated and the attack is
proﬁtable immediately.
However, if the mining power is static, the attack becomes
proﬁtable only after the Bitcoin system has normalized the
revenues by adjusting difﬁculty. Before the adjustment, the
revenue of an attacking pool is reduced due to the reduction
in block generation of both the attacking and attacked pools.
B. Pool Knowledge
In order to choose its optimal inﬁltration rate, a pool has to
know the rate at which it is attacked, and the revenue density
of potential victim pools. A pool can estimate the rate with
which it is attacked by comparing the rates of partial and full
proofs of work it receives from its miners, as explained in
Section II-C. In order to estimate the revenue densities of the
other pools, a pool can use one of two methods. First, pools
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:05:40 UTC from IEEE Xplore.  Restrictions apply. 
ri = −
i + mix1,¬1 − (q − 1)x1,¬1((q − 1)x¬1,∗ + x1,¬1)
m2
((q − 1)x1,¬1 + (q − 1)2x¬1,∗ − 1) ((mi + x1,¬1)(mi + (q − 1)x¬1,1) − (q − 1)x1,¬1x¬1,∗)
Figure 10. Expression for ri in a system with pools of equal size.
q − mi −(cid:8)
(cid:8)
2q
¯x1,¬1 = ¯x¬1,1 = ¯x¬1,∗ =
(mi − q)2 − 4(mi)2(q − 1)2q
2(q − 1)2q)
¯r1 = ¯r¬1 =
q − mi + 2miq +
(mi − q)2 − 4(mi)2(q − 1)2q
(19)
(20)
Figure 11. Symmetric equilibrium values for a system of q pools of equal sizes.
often publish this data to demonstrate their honesty to their
miners [28], [29], [30]. Second, a pool can inﬁltrate each of
the other pools with some nominal probing mining power
and measure the revenue density directly by monitoring the
probe’s rewards from the pool.
C. Block Withholding Recycling
We assume that the inﬁltrating miners are loyal to the
attacker. However, some of the pool’s members may be
disloyal inﬁltrators. When sending disloyal miners to per-
form block withholding at other pools, an attacker takes a
signiﬁcant risk.
For example, pool 1 can use a loyal miner w to inﬁltrate
pool 2, and pool 2, thinking the miner is loyal to it, might
use it to attack pool 1. The miner m can perform honest
mining for pool 1, rather than withhold its blocks, and not
return any revenue to pool 2. Moreover, it will take its share
of pool 2’s revenues (which thinks the miner is loyal to it)
and deliver it back to pool 1.
To avoid such a risk, a pool needs a sufﬁcient number
of veriﬁed miners — miners that it knows to be loyal. In
general, the optimal inﬁltration rate may be as high as 60%
of the pool size, but this is only in extreme cases when
pools are large. For practical pool sizes, as we saw, a pool
may need up to 25% of its mining power for inﬁltration. In
Bitcoin, pools typically have loyal mining power — either
run directly by the pool owners or sold as a service but run
on the pool owners’ hardware [31], [32]. However the size
of this mining power is considered a trade secret and is not
published.
D. Countermeasures
As in the case of classical block withholding explained in
Section II-C, a pool might detect that it is being attacked, but
cannot detect which of its miners is the attacker. Therefore
a pool cannot block or punish withholding miners.
Nevertheless, various techniques can be used to encourage
miners to submit full blocks. A pool can pay a bonus for sub-
mitting a full proof of work. This would increase the revenue
of the miner that found a block while reducing the revenue of
100100
the other miners from this block. While the average revenue
of each miner would stay the same, small miners will suffer
from higher variance in revenue. Another approach is to
introduce a joining fee by paying new miners less for their
work until they have established a reputation with the pool.
Miners that seek ﬂexibility may not accept this policy and
choose another pool. Finally, the pool can use a honeypot
trap by sending the miners tasks which it knows will result
in a full proof of work [10]. If a miner fails to submit the
full proof of work it is tagged as an attacker. To prevent
the attacker from learning them, the honeypot tasks have to
be regularly refreshed, consuming considerable resources.
Pools can also incorporate out of band mechanisms to deter
attacks, such as verifying the identity of miners or using
trusted computing technologies [33] that assure no block
withholding is taking place. This would require miners to
use specialized hardware and software, an overhead miners
may not accept.
In summary, there is no known silver bullet; all these
techniques reduce the pool’s attractiveness and deter miners.
E. Block Withholding in Practice
Long term block withholding attacks are difﬁcult to hide,
since miners using an attacked pool would notice the re-
duced revenue density. Nevertheless, such attacks are rarely
reported, and we can therefore conclude that they are indeed
rare. A recent exception is an attack on the Eligius pool
performed in May and June 2014 [34]. The pool lost 300
Bitcoin before detecting the attack, at which point payouts
to the attackers were blocked. The attackers continued the
attack, accumulating 200 more Bitcoin before realizing they
were not receiving their payout.
The reasons the attack was so easily subverted is the
limited efforts of the attackers to hide themselves. They have
only used two payout addresses to collect their payouts, and
so it was possible for the alert pool manager to cluster the
attacking miners and obtain a statistically signiﬁcant proof
of their wrongdoing.
It is unknown whether this was a classical block withhold-
ing attack, with the goal of sabotage, or a more elaborate
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:05:40 UTC from IEEE Xplore.  Restrictions apply. 
scheme. To verify the effectiveness of block withholding for
proﬁt, Luu et al. [35] implemented an experimental Bitcoin
test network and demonstrated the practicality of the attack.
IX. DISCUSSION
A. Bitcoin’s Health
Large pools hinder Bitcoin’s distributed nature as they put
a lot of mining power in the hands of a few pool managers.
This has been mostly addressed by community pressure on
miners to avoid forming large pools [21]. However such
recommendations had only had limited success, and mining
is still dominated by a small number of large pools. As a
characteristic example, in the period of November 2–8, 2014,
three pools generated over 50% of the proofs of work [36].
The fact that block withholding attacks are rarely observed
may indicate that the active pools have reached an implicit
or explicit agreement not to attack one another. However, an
attacked pool cannot detect which of its miners are attacking
it, let alone which pool controls the miners. At some point
a pool might miscalculate and decide to try and increase its
revenue. One pool might be enough to break the agreement,
possibly leading to a constant rate of attacks among pools
and a reduced revenue.
If open pools reach a state where their revenue density is
reduced due to attacks, miners will leave them in favor of
other available options: Miners of sufﬁcient size can mine
solo; smaller miners can form private pools with closed
access, limited to trusted participants.
Such a change may be in favor of Bitcoin as a whole.
Since they require such intimate trust, private pools are likely
to be smaller, and form a ﬁne grained distribution of mining
power with many small pools and solo miners.
B. Miners and Pools
1) Direct Pool Competition: A pool may engage in an
attack against another pool not to increase its absolute rev-
enue, but rather to attract miners by temporarily increasing
its revenue relative to a competing pool.
Recent work has investigated the motivation of pools
to utilize part of their resources towards sabotage attacks
against each other [37], [38]. The model of those works is
different from the pool game model in two major ways —
a sabotage attack does not transfer revenue from victim to
attacker, and migrating miners switch to less attacked pools,
changing pool sizes and hence revenues until convergence.
The model is parametrized by the cost of the attack and by
the mobility of the miners, and the analysis demonstrates