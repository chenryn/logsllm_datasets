catdoc
clamav
cﬂow
gif2png+libpng
openssl
Total
Error sequence
Useful
Gen
772
9,199
221
1,450
311
591
65
5,316
34
339
159
9
626
2,536
84
482
1,623
781
73,200
92,726
Input
Gen
504,736
1,995,831
139,543
2,571,182
4,721,501
98,352
4,551,244
15,019,720
369,613
29,971,722
With ASan
Useful
338
1,168
758
2,748
158
26
724
320
13
6,253
Null
27
11
13
8
1
7
0
0
59
126
Reported alert
MemErr
Assert
5
0
13
0
1
106
0
1
0
126
0
0
3
0
0
0
0
0
0
3
All
32
11
29
8
2
113
0
1
59
255
Error sequence
Useful
Gen
1,664
44,322
289
8,692
516
3,060
78
38,667
38
325
217
6
671
3,804
12,209
1,498
82,214
191,942
798
482
Table 5: Fuzzing results.
Type
Unique alert
Found bug
Conﬁrmed bug
Null
182
36
26
MemErr
Assert
All / Error handling
132
13
6
3
1
0
317 / 313
50 / 46
32 / 32
Table 6: Summary of reported alerts and found bugs.
Without ASan
Input
Gen
2,355,965
14,602,760
4,817,284
17,326,673
40,357,609
331,930
29,909,026
29,717,956
428,447
139,847,650
Useful
451
1,207
1,766
4,203
234
34
1,235
409
15
9,554
Null
55
11
14
8
2
7
1
0
80
178
Reported alert
MemErr
Assert
3
0
18
0
0
96
0
0
0
117
0
0
3
0
0
0
0
0
0
3
All
58
11
35
8
2
103
1
0
80
298
Reported alerts. With ASan, FIFUZZ reports 255 alerts,
including 126 null-pointer dereferences, 126 memory errors
(such as use-after-free and buffer-overﬂow alerts) and 3 asser-
tion failures. Among these alerts, 114 are reported by ASan,
and 82 are found due to causing crashes. Without ASan,
FIFUZZ reports 298 alerts, including 178 null-pointer deref-
erences, 117 memory errors and 3 assertion failures. All these
alerts are found due to causing crashes. Indeed, ASan can ﬁnd
memory errors that do not cause crashes. Thus, with ASan,
FIFUZZ ﬁnds more memory errors. However, due to monitor-
ing memory accesses, ASan often introduces over 2x runtime
overhead [5]. Thus, with ASan, FIFUZZ executes less test
cases within given time and some null-pointer dereferences
causing crashes are missed.
Alert summary. In Table 6, we summarize the alerts found
by FIFUZZ with and without ASan, and identify 317 unique
alerts, including 182 null-pointer dereferences, 132 memory
errors and 3 assertion failures. 313 of them are related to
incorrect error handling caused by occasional errors, and only
4 alerts are caused by program inputs. Section Appendix
shows 50 randomly-selected alerts.
Found bugs. In Table 6, we check the root causes of the
317 reported alerts, and identify 50 new and unique bugs in
terms of their root causes. Speciﬁcally, 313 alerts are related
to incorrect error handling, which are caused by 46 bugs. The
remaining 4 alerts are caused by four bugs that are not in error
handling code. We have reported all these bugs to related
developers. 32 of them have been conﬁrmed, and we are still
waiting for the response of remaining ones.
Error handling bugs. The 46 found bugs related to incor-
rect error handling are caused by only 18 error sites but in
different calling contexts. Most of the error sites are related
to occasional errors of memory allocation. Figure 11 shows
such examples of four bugs found in bison, and these bugs
have different root causes according to our manual check-
ing. Additionally, the developer ﬁxes each of these bugs by
Figure 11: Example bugs caused by the same error site.
adding separate error handling code. The text in each line
presents the call stack of error site, including the function
name and code line number of function call. The four bugs
are all caused by the failures of the function call to calloc in
hash_initialize, but the failures occur in different calling
contexts. Besides, the call stacks of Bug 3 and Bug 4 are the
same except for the different calls to hash_initialize in
symbols_new. If a fault is injected into the call to calloc
without considering calling context, Bug 3 can be found, but
Bug 4 will be missed. The results conﬁrm the advantages of
context-sensitive SFI over traditional context-insensitive one.
Bug features. Reviewing the bugs found by FIFUZZ, we
ﬁnd two interesting features. Firstly, among the 46 found bugs
related to incorrect error handling, only 4 are triggered by two
or more error points’ failures, and the remaining 42 bugs are
triggered by only one error point’s failure. The results indicate
that error-handling bugs are often triggered by just one error.
Secondly, most of found bugs are caused by the case that an
error is correctly handled in the function containing related er-
ror site but incorrectly handled in this function’s ancestors in
the call stack. For example in Figure 11, the failure of the func-
tion call to calloc is correctly handled in hash_initialize,
and hash_initialize returns a null pointer. In this case,
the functions calling hash_initialize make some global
variables become NULL, but these global variables are still
dereferenced in subsequent execution. Indeed, developers can
often implement correct error handling code in current func-
tions, but often make mistakes in error propagation due to
complex calling contexts of error sites.
USENIX Association
29th USENIX Security Symposium    2603
FILE: bison/src/reader.c711. void reader(void) {  ......714. symbols_new();  ......745. }FILE: bison/src/uniqstr.c159. void uniqstrs_new(void) {160.   uniqstrs_table = hash_initialize(...);  ......165. }FILE: bison/src/muscle-tab.c125. void muscle_init(void) {  ......129. muscle_table = hash_initialize(...);  ......134. }FILE: bison/src/main.c61. int main(...) {  ......86. uniqstrs_new();87. muscle_init();  ......104. reader();  ......254. }Bug2Bug1Bug3 + Bug4Bug3Bug1Bug2Bug4Bug3Bug3: main -> reader(104) -> symbols_new(714) -> hash_initialize(776) -> calloc(626)Bug4: main -> reader(104) -> symbols_new(714) -> hash_initialize(781) -> calloc(626)Bug2: main -> muscle_init(87) -> hash_initialize(129) -> calloc(626)Bug1: main -> uniqstrs_new(86) -> hash_initialize(160) -> calloc(626)Bug4FILE: bison/lib/hash.c597. Hash_table *hash_initialize(...) {  ......626. table->bucket = calloc(...);627. if (table->bucket == NULL)628. goto fail;  ......646. }FILE: bison/src/symtab.c775. void symbol_new(void) {776.   symbol_table = hash_initialize(...);  ......781. type_table = hash_initialize(...);  ......786. }Bug type
Null pointer dereference
Double free
Use after free
Buffer overﬂow
Free invalid pointer
Assertion failure
Total
Crash/DoS