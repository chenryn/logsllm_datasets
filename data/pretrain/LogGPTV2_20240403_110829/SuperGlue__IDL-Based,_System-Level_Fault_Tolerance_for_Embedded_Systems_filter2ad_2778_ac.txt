


%	


$










	#"

	#
	#



"
"
	


	

	



"

#$
	


#
#"

#$
#"

	#
#	

#
(a) Scheduler
(b) RamFS
(c) Event
Fig. 2: Top diagram shows recovery mechanisms and the timeline between a fault and recovery via micro-reboot in the (a)
Scheduler component. (b) RamFS component. (c) Event component. The oval shadowed area in (c) indicates that the same
descriptor can be accessed from multiple client components (a.k.a, the global descriptor). Bottom diagram shows the transition
from the fault state to a descriptor‚Äôs ‚Äúexpected‚Äù state in each service during the recovery. The edge is the interface function
and the node is the descriptor state. The dashed line is the normal state transition and the solid line is the recovery transition.
creating component to recreate the descriptor via R0. After
recreation, the server stub replays the previous invocation
using the recovered descriptor.
This mechanism is a case where SuperGlue not only orches-
trates recovery through interfaces, but also uses additional
logic in those interfaces that is cognizant of erroneous return
values to interact with the storage component. In C3, explicit
code to interact with storage components was required. With
SuperGlue, such code is not required.
‚Ä¢ G1: Recovery with Resource Data. When there is resource
data (Dr (cid:4)= ‚àÖ) it is redundantly stored within a storage
component that needs to be introspected to restore the data
for the resource. For example, a Ô¨Åle‚Äôs data (shared buffer
references) can be stored in a storage component, and retrieved
when the Ô¨Åle is accessed and not found.
Though the same trick as for G0 can be used to recreate
the Ô¨Åle using an erroneous return value-aware server stub,
thus completely automating the interactions with the storage
component, a race condition exists: when writing to a Ô¨Åle it
is non-atomically added to the data-structures in the RamFS
and the storage component. Another thread could thus see
the RamFS‚Äôs Ô¨Åle data, and the system could crash before the
data is saved in the storage component. Though that thread
saw the Ô¨Åle data, upon recovery, it would be gone. Thus,
we manually add storage component interactions within the
critical region that modiÔ¨Åes the RamFS data-structures. Future
work may integrate locking into the stubs to thus make storage
component interactions automated.
Recovery with Upcalls
‚Ä¢ U0: Recovery using Upcalls. When a descriptor is global
(Gdr), recovery uses upcalls into client components to set up
the initial state of descriptors as detailed in G0.
D. Server Recovery
Given the above taxonomy of interfaces, component model,
to the underlying system
and the mapping of the model
mechanisms, the steps for SuperGlue-assisted recovery of a
server component cr follow. They are also depicted in the top
of Figure 2 for the scheduler, Ô¨Åle system (RamFS) and event
manager components.
1 A transient fault corrupts and crashes the component cr.
2 The hardware exception handler is vectored to the booter
component.
3 The booter micro-reboots [19] the faulty component to
memcpy a good image and bring cr into a safe state.
4 An upcall is made into the newly rebooted cr for compo-
nent re-initialization.
5 Blocked threads are woken up in the component cr eagerly
(T0) by calling the interface function I wakeup
for each
thread while inheriting the highest priority of those threads.
6 When the system switches to a thread (according to its
priority), and it attempts to execute in cr, or utilize a de-
dr
232
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:19:10 UTC from IEEE Xplore.  Restrictions apply. 
scriptor, the client stub is activated. Here R0 conducts the
state machine-directed recovery at the executing thread‚Äôs
priority using on-demand recovery (T1). Any depended-on
descriptors are recovered (D1) Ô¨Årst. Dependent descriptors
are recovered (D0) when the current descriptor is termi-
nated through a function ‚àà I terminate
If the executing thread Ô¨Ånds that
is
accessing is not yet available in the server, the thread
queries the storage component to retrieve the resource data
(G1). Furthermore, if the server relies on global descriptors
that are missing, they will also be recovered (G0) from
storage components.
.
the descriptor it
dr
7
8 An upcall is made into the client component that originally
created the descriptor (G0) to rebuild the descriptor in the
expected state (U0).
9 The recovering component cr receives component invo-
cations from the client (R0) on-demand at correct thread
priorities calling I create
to transit the descriptor into its
initial state s0 and then calling other interface functions to
transit to the expected state.
dr
IV. SUPERGLUE IDL AND COMPILER
In this section, we discuss SuperGlue IDL and compiler for
producing interface-driven recovery code from the declarative
interface speciÔ¨Åcations to bridge the gap between the high-
level model of a component-based OS and the low-level
interface recovery code.
A. SuperGlue IDL
The model-based syntax for the SuperGlue IDL is intro-
duced in Table I. Syntax derived from the descriptor-resource
model uses a Boolean expression for the corresponding spec-
iÔ¨Åcation. For the speciÔ¨Åcations based on the descriptor state
machine, syntax is deÔ¨Åned using an interface function for
transitioning the descriptor state.
Syntax for the descriptor state tracking is applied directly
to the function prototypes in the header Ô¨Åle for each server
component to enable SuperGlue to derive the tracking data
structure. This syntax indicates how to track descriptors
including what information to track, which descriptor is the
parent descriptor, and how to look up the descriptor.
Figure 3 depicts a complete example of a SuperGlue IDL
Ô¨Åle that describes the event notiÔ¨Åcation component‚Äôs interface.
A few important notes about the language: The state machines
in the current language are implicit. Pairs of functions are used
to describe the different possible routes execution can take.
Though states could be made explicit, we leaned toward the
side of simplicity in the current SuperGlue implementation.
The descriptor and resource data are not speciÔ¨Åed in a single
location. Instead arguments and return values from interface
functions are annotated as being tracked either in the descrip-
tor, or for the resource. In each case, the compiler internally
constructs the states, and the tracking structures.
B. SuperGlue compiler
The SuperGlue IDL compiler is factored into a pipeline.
To leverage existing, well-tested code-bases, the Ô¨Årst stage
uses the C preprocessor. First, a normal C header (.h) Ô¨Åle
233
service_global_info = {
desc_has_parent
desc_close_remove = true ,
= true ,
desc_is_global
= true ,
desc_block
desc_has_data
= true
= parent ,
};
evt_wait );
evt_trigger );
sm_transition ( evt_split ,
sm_transition ( evt_wait ,
sm_transition ( evt_trigger , evt_wait );
sm_transition ( evt_trigger , evt_free );
sm_transition ( evt_split ,
evt_free );
sm_creation ( evt_split );
sm_terminal ( evt_free );
sm_block ( evt_wait );
sm_wakeup ( evt_trigger );
desc_data_retval (long , evtid )
evt_split ( desc_data ( componentid_t compid ),
desc_data ( parent_desc ( long parent_evtid )),
desc_data ( int grp ));
long evt_wait ( componentid_t compid , desc ( long evtid ));
int evt_trigger ( componentid_t compid , desc ( long evtid ));
int evt_free ( componentid_t compid , desc ( long evtid ));
Fig. 3: Example SuperGlue interface speciÔ¨Åcation for the event notiÔ¨Åcation
component.
/* predicate : true */
CSTUB_FN ( IDL_fntype , IDL_fname ) ( IDL_parsdecl ) {
long fault = 0;
int
= 0;
redo :
ret
cli_if_desc_update_IDL_fname ( IDL_params );
ret = cli_if_invoke_IDL_fname ( IDL_params );
if ( fault ){
CSTUB_FAULT_UPDATE ();
if ( cli_if_desc_update_post_fault_IDL_fname ()) goto
redo ;
}
ret = cli_if_track_IDL_fname (ret , IDL_params );
return ret ;
}
Fig. 4: Code generation template example for each invocation stub.
is generated by deÔ¨Åning many of the SuperGlue language
syntactic features as nil. Second, the preprocessor is used to
tokenize each aspect of the SuperGlue Ô¨Åle, adding attributes
to variables and functions. A front end parser1 parses the
resulting Ô¨Åle, then extracts the speciÔ¨Åcations from the abstract
syntax tree into an intermediate representation that encodes
the resource-descriptor and state machine models. With this
representation, the shortest path through the state machine is
found to each state. The back end is implemented as a network
of templates associated with predicates. The templates imple-
ment the logic of the recovery mechanisms, and include calls
to other templates. The predicates encode those aspects of the
model that map to the recovery mechanisms as discussed in
Section III-C. Templates are only included in the generated
code if the predicate evaluates to true given the intermediate
representation of the models. The SuperGlue compiler uses
code templates to keep the back end easy to understand and
maintain. The back-end is executed twice with two different
sets of template inputs, once to generate the client stub, and
one to generate the server. In total, the SuperGlue compiler
includes 72 template-predicate pairs.
1We use pycparser, a C parser at https://github.com/eliben/pycparser.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:19:10 UTC from IEEE Xplore.  Restrictions apply. 
descriptor-resource
model
descriptor
state machine
descriptor
state tracking
Model
Br
Dr
Gdr
Pdr
Cdr
Ydr
Ddr
I create
dr
I terminate
dr
I block
dr
I wakeup
dr
track returned value
update descriptor state
look up descriptor
track parent descriptor
if the thread gets blocked when accessing cr
Note
if the resource has data
if the descriptor is global
when there are dependencies,
if dependencies can span components
when close descriptor, if closes children
when close descriptor, if removes dependency
if the descriptor has data
fn creates a new descriptor
fn terminates the descriptor
thread can get blocked when call fn
fn unblocks the thread
usually this tracks new descriptor
track a parameter
look up the descriptor using its id
track the descriptor‚Äôs parent descriptor
Syntax
desc block = true|false
resc has data = true|false
desc is global = true|false
desc has parent =
Solo | P arent | XCP arent
desc close children = true|false
desc close remove = true|false
desc has data = true|false
sm creation(fn)
sm terminal(fn)
sm block(fn)
sm wakeup(fn)
desc data retval(type, value)fn
desc data(type, value)
desc(descriptor id)
parent desc(parent descriptor id)
TABLE I: Syntax DeÔ¨Ånition in SuperGlue
/* predicate : f ‚àà I create
dr
‚àß ¬¨Gdr */
static inline int cli_if_track_IDL_fname ( int ret ,
if ( ret == -EINVAL ) return ret ;
IDL_parsdecl ) {
struct desc_track * desc = call_desc_alloc ();
if (! desc ) return -ENOMEM ;
call_desc_track (desc , ret , IDL_params );
return desc -> IDL_id ;
}
Fig. 5: Code generation template example for descriptor state tracking.
a
code
an example of
Two predicate-template pairs are depicted in Figures 4
and 5. Fig 4 shows
tem-
plate for generating the stub invocation code. The code
cli if desc update IDL fname(IDL params) per-
forms the invocation to the server component. SuperGlue up-
dates IDL fname and IDL params with the name of the in-
terface function being called and its parameters. Before and af-
ter this function call, cli if desc update IDL fname
(IDL params) corresponds to the template for checking
descriptor state, and ret = cli if track IDL fname