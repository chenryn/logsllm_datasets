and returning the assigned role in the response.
public JSONObject addMember(Request request, Response response) {
  var json = new JSONObject(request.body());
Listing 8.6
Mapping static roles
Listing 8.7
Adding new members with roles
Map users to
roles within
a space.
Natter restricts
each user to have
only one role.
Grant permissions to the Natter database user.
279
Role-based access control
  var spaceId = Long.parseLong(request.params(":spaceId"));
  var userToAdd = json.getString("username");
  var role = json.optString("role", "member");            
  if (!DEFINED_ROLES.contains(role)) {                    
    throw new IllegalArgumentException("invalid role");   
  }
  database.updateUnique(
          "INSERT INTO user_roles(space_id, user_id, role_id)" +   
                  " VALUES(?, ?, ?)", spaceId, userToAdd, role);   
  response.status(200);
  return new JSONObject()
          .put("username", userToAdd)
          .put("role", role);         
}
8.2.3
Determining user roles
The final step of the puzzle is to determine which roles a user has when they make a
request to the API and the permissions that each role allows. This can be found by look-
ing up the user in the user_roles table to discover their role for a given space, and then
looking up the permissions assigned to that role in the role_permissions table. In con-
trast to the situation with groups in section 8.1, roles are usually specific to an API, so it
is less likely that you would be told a user’s roles as part of authentication. For this rea-
son, you can combine the lookup of roles and the mapping of roles into permissions
into a single database query, joining the two tables together, as follows:
SELECT rp.perms
  FROM role_permissions rp
  JOIN user_roles ur
    ON ur.role_id = rp.role_id
 WHERE ur.space_id = ? AND ur.user_id = ?
Searching the database for roles and permissions can be expensive, but the current
implementation will repeat this work every time the requirePermission filter is
called, which could be several times while processing a request. To avoid this issue and
simplify the logic, you can extract the permission look up into a separate filter that
runs before any permission checks and stores the permissions in a request attribute.
Listing 8.8 shows the new lookupPermissions filter that performs the mapping from
user to role to permissions, and then updated requirePermission method. By reus-
ing the existing permissions checks, you can add RBAC on top without having to
change the access control rules. Open UserController.java in your editor and update
the requirePermission method to match the listing.
public void lookupPermissions(Request request, Response response) {
    requireAuthentication(request, response);
Listing 8.8
Determining permissions based on roles
Extract the role 
from the input 
and validate it.
Insert the
new role
assignment
for this
space.
Return the role in 
the response.
280
CHAPTER 8
Identity-based access control
    var spaceId = Long.parseLong(request.params(":spaceId"));
    var username = (String) request.attribute("subject");
    var perms = database.findOptional(String.class,             
            "SELECT rp.perms " +                                
            "  FROM role_permissions rp JOIN user_roles ur" +   
            "    ON rp.role_id = ur.role_id" +                  
            " WHERE ur.space_id = ? AND ur.user_id = ?",        
            spaceId, username).orElse("");                      
    request.attribute("perms", perms);    
}
public Filter requirePermission(String method, String permission) {
    return (request, response) -> {
        if (!method.equals(request.requestMethod())) {
            return;
        }
        var perms = request.attribute("perms");    
        if (!perms.contains(permission)) {
            halt(403);
        }
    };
}
You now need to add calls to the new filter to ensure permissions are looked up. Open
the Main.java file and add the following lines to the main method, before the defini-
tion of the postMessage operation:
before("/spaces/:spaceId/messages", 
    userController::lookupPermissions);
before("/spaces/:spaceId/messages/*", 
    userController::lookupPermissions);
before("/spaces/:spaceId/members", 
    userController::lookupPermissions);
If you restart the API server you can now add users, create spaces, and add members
using the new RBAC approach. All the existing permission checks on API operations
are still enforced, only now they are managed using roles instead of explicit permis-
sion assignments.
8.2.4
Dynamic roles
Though static role assignments are the most common, some RBAC systems allow
more dynamic queries to determine which roles a user should have. For example, a
call center worker might be granted a role that allows them access to customer
records so that they can respond to customer support queries. To reduce the risk of
misuse, the system could be configured to grant the worker this role only during their
contracted working hours, perhaps based on their shift times. Outside of these times
the user would not be granted the role, and so would be denied access to customer
records if they tried to access them.
Determine user 
permissions by 
mapping user 
to role to 
permissions.
Store
permissions
in a request
attribute.
Retrieve 
permissions 
from the 
request before 
checking.
281
Role-based access control
 Although dynamic role assignments have been implemented in several systems,
there is no clear standard for how to build dynamic roles. Approaches are usually
based on database queries or perhaps based on rules specified in a logical form
such as Prolog or the Web Ontology Language (OWL). When more flexible access
control rules are required, attribute-based access control (ABAC) has largely replaced
RBAC, as discussed in section 8.3. NIST has attempted to integrate ABAC with RBAC
to gain the best of both worlds (http://mng.bz/4BMa), but this approach is not widely
adopted.
 Other RBAC systems implement constraints, such as making two roles mutually
exclusive; a user can’t have both roles at the same time. This can be useful for enforc-
ing separation of duties, such as preventing a system administrator from also manag-
ing audit logs for a sensitive system.
Pop quiz
4
Which of the following are more likely to apply to roles than to groups?
a
Roles are usually bigger than groups.
b
Roles are usually smaller than groups.
c
All permissions are assigned using roles.
d
Roles better support separation of duties.
e
Roles are more likely to be application specific.
f
Roles allow permissions to be assigned to individual users.
5
What is a session used for in the NIST RBAC model? Pick one answer.
a
To allow users to share roles.
b
To allow a user to leave their computer unlocked.
c
To allow a user to activate only a subset of their roles.
d
To remember the users name and other identity attributes.
e
To allow a user to keep track of how long they have worked.
6
Given the following method definition
    @
    public Response adminOnlyMethod(String arg);
what annotation value can be used in the Java EE and JAX-RS role system to
restrict the method to only be called by users with the ADMIN role?
a
@DenyAll
b
@PermitAll
c
@RunAs("ADMIN")
d
@RolesAllowed("ADMIN")
e
@DeclareRoles("ADMIN")
The answers are at the end of the chapter.
282
CHAPTER 8
Identity-based access control
8.3
Attribute-based access control
Although RBAC is a very successful access control model that has been widely deployed,
in many cases the desired access control policies cannot be expressed through simple
role assignments. Consider the call center agent example from section 8.2.4. As well as
preventing the agent from accessing customer records outside of their contracted
working hours, you might also want to prevent them accessing those records if they
are not actually on a call with that customer. Allowing each agent to access all cus-
tomer records during their working hours is still more authority than they really need
to get their job done, violating the principle of least privilege. It may be that you can
determine which customer the call agent is talking to from their phone number
(caller ID), or perhaps the customer enters an account number using the keypad
before they are connected to an agent. You’d like to only allow the agent access to just
that customer’s file for the duration of the call, perhaps allowing five minutes after-
ward for them to finishing writing any notes.
 To handle these kinds of dynamic access control decisions, an alternative to RBAC
has been developed known as ABAC: attribute-based access control. In ABAC, access con-
trol decisions are made dynamically for each API request using collections of attri-
butes grouped into four categories:
 Attributes about the subject; that is, the user making the request. This could include
their username, any groups they belong to, how they were authenticated, when
they last authenticated, and so on.
 Attributes about the resource or object being accessed, such as the URI of the
resource or a security label (TOP SECRET, for example).
 Attributes about the action the user is trying to perform, such as the HTTP method.
 Attributes about the environment or context in which the operation is taking place.
This might include the local time of day, or the location of the user performing
the action.
The output of ABAC is then an allow or deny decision, as shown in figure 8.3.
ABAC
Subject attributes
Resource attributes
Action attributes
Environment attributes
Permit/Deny
Attributes related to an API request
are fed into the ABAC system.
A decision is made based on the
attributes and conﬁgured security policy.
Figure 8.3
In an ABAC system, access control decisions are made dynamically based 
on attributes describing the subject, resource, action, and environment or context of the 
API request.
283
Attribute-based access control
Listing 8.9 shows example code for gathering attribute values to feed into an ABAC
decision process in the Natter API. The code implements a Spark filter that can be
included before any API route definition in place of the existing requirePermission
filters. The actual implementation of the ABAC permission check is left abstract for
now; you will develop implementations in the next sections. The code collects attri-
butes into the four attribute categories described above by examining the Spark
Request object and extracting the username and any groups populated during
authentication. You can include other attributes, such as the current time, in the envi-
ronment properties. Extracting these kind of environmental attributes makes it easier
to test the access control rules because you can easily pass in different times of day in
your tests. If you’re using JWTs (chapter 6), then you might want to include claims
from the JWT Claims Set in the subject attributes, such as the issuer or the issued-at
time. Rather than using a simple boolean value to indicate the decision, you should
use a custom Decision class. This is used to combine decisions from different policy
rules, as you’ll see in section 8.3.1.
package com.manning.apisecurityinaction.controller;
import java.time.LocalTime;
import java.util.Map;
import spark.*;
import static spark.Spark.halt;
public abstract class ABACAccessController {
    public void enforcePolicy(Request request, Response response) {
        var subjectAttrs = new HashMap();         
        subjectAttrs.put("user", request.attribute("subject"));   
        subjectAttrs.put("groups", request.attribute("groups"));  
        var resourceAttrs = new HashMap();        
        resourceAttrs.put("path", request.pathInfo());            
        resourceAttrs.put("space", request.params(":spaceId"));   
        var actionAttrs = new HashMap();          
        actionAttrs.put("method", request.requestMethod());       
        var envAttrs = new HashMap();             
        envAttrs.put("timeOfDay", LocalTime.now());               
        envAttrs.put("ip", request.ip());                         
        var decision = checkPermitted(subjectAttrs, resourceAttrs,    
                actionAttrs, envAttrs);                               
        if (!decision.isPermitted()) {     
            halt(403);                     
Listing 8.9
Gathering attribute values
Gather relevant 
attributes and 
group them into 
categories.
Check whether
the request is
permitted.
If not, halt with a 403 
Forbidden error.
284
CHAPTER 8
Identity-based access control
        }
    }
    abstract Decision checkPermitted(
            Map subject,
            Map resource,
            Map action,
            Map env);
    public static class Decision {     
    }
}
8.3.1
Combining decisions
When implementing ABAC, typically access control decisions are structured as a set
of independent rules describing whether a request should be permitted or denied.
If more than one rule matches a request, and they have different outcomes, then
the question is which one should be preferred. This boils down to the two following
questions:
 What should the default decision be if no access control rules match the request?
 How should conflicting decisions be resolved?
The safest option is to default to denying requests unless explicitly permitted by some
access rule, and to give deny decisions priority over permit decisions. This requires at
least one rule to match and decide to permit the action and no rules to decide to deny
the action for the request to be allowed. When adding ABAC on top of an existing
access control system to enforce additional constraints that cannot be expressed in
the existing system, it can be simpler to instead opt for a default permit strategy where
requests are permitted to proceed if no ABAC rules match at all. This is the approach
you’ll take with the Natter API, adding additional ABAC rules that deny some requests
and let all others through. In this case, the other requests may still be rejected by the
existing RBAC permissions enforced earlier in the chapter.
 The logic for implementing this default permit with deny overrides strategy is
shown in the Decision class in listing 8.10. The permit variable is initially set to true
but any call to the deny() method will set it to false. Calls to the permit() method are
ignored because this is the default unless another rule has called deny() already, in
which case the deny should take precedence. Open ABACAccessController.java in
your editor and add the Decision class as an inner class.
    public static class Decision {
        private boolean permit = true;    
        public void deny() {    
            permit = false;     
        }
Listing 8.10
Implementing decision combining
The Decision class will 
be described next.
Default to 
permit
An explicit deny decision 
overrides the default.
285
Attribute-based access control
        public void permit() {   
        }
        boolean isPermitted() {
            return permit;
        }
    }
8.3.2
Implementing ABAC decisions
Although you could implement ABAC access control decisions directly in Java or
another programming language, it’s often clearer if the policy is expressed in the
form of rules or domain-specific language (DSL) explicitly designed to express access
control decisions. In this section you’ll implement a simple ABAC decision engine
using the Drools (https://drools.org) business rules engine from Red Hat. Drools can
be used to write all kinds of business rules and provides a convenient syntax for
authoring access control rules. 
TIP
Drools is part of a larger suite of tools marketed under the banner
“Knowledge is Everything,” so many classes and packages used in Drools
include the kie abbreviation in their names.
To add the Drools rule engine to the Natter API project, open the pom.xml file in
your editor and add the following dependencies to the  section:
      org.kie
      kie-api
      7.26.0.Final
      org.drools
      drools-core
      7.26.0.Final
      org.drools
      drools-compiler
      7.26.0.Final
When it starts up, Drools will look for a file called kmodule.xml on the classpath that
defines the configuration. You can use the default configuration, so navigate to the
folder src/main/resources and create a new folder named META-INF under resources.
Then create a new file called kmodule.xml inside the src/main/resource/META-INF
folder with the following contents:
Explicit permit 
decisions are 
ignored.
286
CHAPTER 8
Identity-based access control
You can now implement a version of the ABACAccessController class that evaluates
decisions using Drools. Listing 8.11 shows code that implements the checkPermitted