Download from finelybook PI:EMAIL
1088
AND operators
AND (&), 365
logical AND (&&), 97
associativity, 99
precedence, 99
short-circuiting, 97–98
syntax, 97
angle brackets (<>)
greater than (>) operator, 96, 99, 112
greater than or equal to (>=) operator, 96, 99, 112
left-shift (452
adding methods to, 455
in automated factory scenario, 453–456
declaring, 454, 456–464, 475
defined, 450
examples of, 451–452
Func, 451–452
Func452
function pointers compared to, 451
instantiating, 475
invoking, 454–455, 475
Download from finelybook PI:EMAIL
1089
lambda expressions and, 464
method adapters, 464–465
overview, 450–451
performCalculationDelegate, 450–451
removing methods from, 455
events
declaring, 465–466, 475
event sources, 465
overview, 465
raising, 467, 469–475, 477
subscribing to, 466–467, 476
unsubscribing from, 467, 476
user interface, 468–469
applications. See also projects
console
creating in Visual Studio 2017, 3–14, 34
defined, 3
namespaces, 14–17
graphical, 18–27, 34
adding code to, 30–32
App.xaml.cs file, 28–30
building and running, 25–26, 34
Button control, 24–25
MainPage.xaml.cs file, 27–28
pages in, 21
TextBlock control, 21–24
views of, 18
WPF App template, 33
indexers in, 372–378
AppStyles.xaml file, 646
App.xaml.cs file file, 28–30
Area method, 164, 190–191
Download from finelybook PI:EMAIL
1090
areYouReady variable, 96
ArgumentException, 246, 257, 261–262, 285
ArgumentOutOfRangeException, 149, 237
arguments, 256–257. See also parameters (method)
in arrays, 256–257
EventArgs, 469
arithmetic operators
applying to int values, 49–54
associativity, 54–56, 98
checked versus unchecked integer arithmetic, 144–145
data types and, 47–49
overview of, 47
precedence, 54, 98
prefix and postfix forms, 56–57
Array class. See arrays
arrays. See also indexers
accessing elements of
single elements, 233, 252
value types, 249–251
arguments, 256–257
Cards project, 240–248
AddCardToHand method, 246
DealCardFromPack method, 243
dealClick method, 246
IsCardAlreadyDealt method, 244
IsSuitEmpty method, 243–244
for loop, 247–248
Pack class, 242–243
PlayingCard class, 241–242
randomCardSelector variable, 242
ToString method, 245
Value enumeration, 241
Download from finelybook PI:EMAIL
1091
collections compared to, 427
copying, 236–238
declaring, 229–230, 252
defined, 229
empty, 231
finding number of elements in, 233, 252
implicitly typed, 232–233
indexers compared to, 369
initializing, 231–232, 252
instantiating, 230–231, 252
iterating through, 233–235, 252
jagged, 239–240, 253
Main method and, 236
multidimensional, 238, 253, 258
parameter
advantages of, 255
declaring, 257–259, 266
int data type in, 257–258
optional parameters compared to, 263–265
params object[]259–260
priority of, 259
quick reference, 266
Sum method used with, 260–263
passing as parameters, 235–236
populating, 231–232
quick reference, 252–253
returning from methods, 235–236
The Art of Computer Programming, Volume 3 (Knuth), 388
as operator, 202–203, 207
AsParallel method, 585–590, 608
ASP.NET Web API template, 722
assemblies
Download from finelybook PI:EMAIL
1092
core, 17
defined, 7–8
namespaces and, 17
references for, 17
assignment operator, simple (=)
associativity, 54–56, 99
overview, 39
precedence, 99
assignment operators
compound
associativity, 116
examples of, 132
overview, 115–116
precedence, 116
table of, 116
simple assignment (=)
associativity, 54–56, 99
overview, 39
precedence, 99
associativity of operators, 503
arithmetic operators, 54–56
Boolean operators, 98–99
compound assignment operators, 116
table of, 98–99
asterisk (*)
compound multiplication (*=) operator, 116
multiplication (*) operator, 47
async keyword, 571–572, 608
asynchronous methods
common errors with, 579–580
defining, 608
async keyword, 571–572
Download from finelybook PI:EMAIL
1093
await operator, 572–574
GraphDemo project, 575–577
return values, 578–579
IAsyncResult design pattern, 584–585
Main method and, 573
overview, 567, 568
problem solved by, 568–571
scalability and, 568
tasks and memory allocation, 582–583
Windows Runtime APIs and, 580–582
AuditingCompleteDelegate, 470
audit-nnnnnn.xml file, 458
Auditor class, 460, 470–475
AuditOrder method, 463, 471
AuditProcessingComplete event, 470–471
AuditService project, 459
automated factory scenario, delegates in, 453–456
automatic properties, 353–355, 358–359, 361
AutomaticProperties project, 358–359
await operator, 555, 564, 572–574, 608
Azure API app security, 729–730
B
Barrier class, 596
base keyword, 270, 275, 288
base16 notation, 364
base-class constructors, 270–271, 288
baseToConvertTo method, 285
BasicCollection class, 443–444
BeginOperationName method, 584
BeginWrite method, 584
Download from finelybook PI:EMAIL
1094
binary notation, 364
binary operators, 504
binary trees
binary tree class, 391–399
System.IComparable interface, 391–393
System.IComparable interface, 391–393
Tree class, 392–399
InsertIntoTree method, 400–402
nodes, 388
subtrees, 388
theory of, 388–390
binary values
binary notation, 364
displaying, 365
hexadecimal notation, 364
manipulating, 365–366
obo prefix, 364
operators for, 365–366
storing, 364
BinarySearch method, 407
BinaryTree project, 392–396, 445–447
BinaryTreeTest project, 396–399
binding. See data binding
BitArray class, 412
bitwise operators, 365–366
Black.Hole method, 259–260
Blank App template, 615–617, 655
blocks
do statements, 124
if statements, 100–101
while statements, 118, 122
bool data type, 40
Download from finelybook PI:EMAIL
1095
bool keyword, 215
bool variables, 95–96
Boolean expressions
creating, 112
in if statements, 99–100
overview, 95–96
Boolean operators
associativity, 98–99
conditional logical operators, 97
defined, 96
equality operators, 96
precedence, 98–99
relational operators, 96
short-circuiting, 97–98
Boolean variables, 95–96, 112
bottlenecks (CPU), identifying, 533–545
boxing, 199–200, 207
braces ({ }), 54, 62, 64, 179, 231, 252
brackets ([ ]), 54, 229, 252
Brake method, 280
break statement, 109, 124
Build Solution command (Build menu), 11, 34
BuildTree project, 400–402
Button class, 468
Button control, 24–25
byte keyword, 215
C
calculateClick method, 67, 69, 71, 143, 150, 152
calculateData method, 547–548
CalculateFactorial method, 83–84
Download from finelybook PI:EMAIL
1096
calculateFee method, 76–77, 81, 89–92
CalculatePI project, 600–603
calculateValue method, 578
calculateValueAsync method, 578
Calculator class, 327–333
calling methods, 93
base-class constructors, 270–271, 288
constructors, 181
delegates, 454–455, 475
destructors, 335
generics, 409
multiple return values, 68–70, 93
from other objects, 68
syntax, 65–68
camelCase notation, 38, 163
CanBrowse property (ViewModel), 735
Canceled task status, 557
cancellation
PLINQ (Parallel LINQ) queries, 587–590
synchronization, 596–597
tasks, 551–561, 566
tokens, 551–552, 590
CancellationToken object, 551–552, 590
CancellationTokenSource object, 590, 610
CanExecute method, 675, 676–677
CanExecuteChanged event, 677–678
CanExecuteChanged method, 675
canExecuteChangedEventTimer_Tick method, 678
CanSaveOrDiscardChanges property (ViewModel), 735
canvases, 296
Car class, 280–281
Cards project, 240–248
Download from finelybook PI:EMAIL
1097
AddCardToHand method, 246
collection classes, 427–431
DealCardFromPack method, 243
dealClick method, 246
IsCardAlreadyDealt method, 244
IsSuitEmpty method, 243–244
for loop, 247–248
Pack class, 242–243
PlayingCard class, 241–242
randomCardSelector variable, 242
ToString method, 245
Value enumeration, 241
cardsInSuit object, 428
caret (^), XOR operator, 366
cascading if statements, 101–106
case keyword, 107
case labels, 107–108
case sensitivity, 36
casting, 202
InvalidCastException, 201
is operator, 202
as operator, 202–203
quick reference, 207
switch statement, 203–204
catch statement
example of, 156
throw/catch blocks, 151–153
try/catch blocks
multiple catch handlers, 136–137
multiple exceptions, catching, 137–138
syntax, 134–135
when keyword, 138–142
Download from finelybook PI:EMAIL
1098
catching exceptions, 156
multiple catch handlers, 136–137
multiple exceptions, 137–138
try/catch blocks, 134–135
when keyword, 138–142
char data type, 40
checked integer arithmetic, 144–145
expressions, 145
statements, 145
checked keyword, 144–145
checked expressions, 146–148
checked statements, 145
example of, 156
CheckoutButtonClicked method, 460, 462, 463, 469–470, 473
CheckoutController class, 460–463
CheckoutDelegate, 461
CheckoutProcessing delegate, 461
CheckoutService project, 461–463
CIL (Common Intermediate Language), 226
Circle class, 301–302
accessibility, 162
Area method, 190–191
automatic properties, 354–355
comparable, 391–393
constructors, 164–165
copying, 185–186
defining, 160–161
initializing, 189
NumCircles field, 174–175
partial class, 166
class keyword, 160–161
class methods. See static methods
Download from finelybook PI:EMAIL
1099
classes. See also methods; objects; individual class names
abstract
abstract methods, 306
declaring, 314
defining, 305–306
implementing, 307–311
quick reference, 314
sealed classes, 306–307
sealed methods, 307
accessibility, 162–163
anonymous, 179–180
assigning, 271–273
class libraries, 391
Classes project, 166–172
collection classes
card game application, 427–431
defined, 411
Dictionary412, 418–420
HashSet412, 421–422
LinkedList412, 415–416
List412, 413–416
Queue412, 416–417
SortedDictionary420
SortedList412, 420–421
Stack412, 417–418
table of, 411–412
comparing operators in, 509–510
concurrent collection
ConcurrentBag597
ConcurrentDictionary597
ConcurrentQueue597
ConcurrentStack597
Download from finelybook PI:EMAIL
1100
thread-safe data access, 598–607
constructors, overloading, 164–165
copying, 185–186, 206
declaring, 180
defining, 160–161
encapsulation
implementing, 339–341
purpose of, 160
fields, 162
generalized
creating with generics, 384–387
creating with object type, 381–384
vs. generics, 387
generic
binary tree class, 391–399
binary tree theory, 388–390
System.IComparable interface, 391–393
System.IComparable interface, 391–393
indexers in, 379
inheritance, 268
naming guidelines, 163