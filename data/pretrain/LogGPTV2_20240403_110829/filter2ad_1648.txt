# POSTER: Evaluating Reflective Deception as a Malware Mitigation Strategy

**Authors:**
- Thomas Shaw, The University of Tulsa
- James Arrowood, Haystack Security, LLC
- Michael Kvasnicka, The University of Tulsa
- Shay Taylor, The University of Tulsa
- Kyle Cook, The University of Tulsa
- John Hale, The University of Tulsa

**Corresponding Author:**
John Hale, The University of Tulsa, PI:EMAIL

## CCS CONCEPTS
- Security and privacy → Malware and its mitigation

## KEYWORDS
- Deception Technology, Reflective Deception, Malware

## ACM Reference Format:
Thomas Shaw, James Arrowood, Michael Kvasnicka, Shay Taylor, Kyle Cook, and John Hale. 2017. POSTER: Evaluating Reflective Deception as a Malware Mitigation Strategy. In Proceedings of CCS '17, Dallas, TX, USA, October 30-November 3, 2017, 3 pages. https://doi.org/10.1145/3133956.3138833

## 1. Introduction
Deception is a defensive technique that influences attacker behavior through misinformation or concealment of information [5, 8, 11, 13]. It can be used to delay an attack, divert attackers from their targets, and gather intelligence about their motives and capabilities.

This poster introduces Reflective Deception, a novel defensive deception technique, and an experimentation platform to evaluate its effectiveness in mitigating malware. Such techniques have the potential to enhance the role of deception in integrated cyber defense strategies. The proposed platform provides a blueprint for the safe and systematic assessment of deception-based malware mitigation strategies.

## 2. Reflective Deception
Reflective Deception combines elements of two established deception techniques: honeypots and interdiction. Honeypots present vulnerable systems to attract and study attackers, requiring an "operational cover story" that blends with the surrounding environment [3, 10, 12]. Interdiction, on the other hand, uses file spoofing to flood networks with decoy media, increasing the attacker's workload and concealing authentic content [4, 7].

Unlike traditional deception techniques that require detecting an intruder before deployment, Reflective Deception manufactures and amplifies decoy responses to malware before detection. This overwhelms the attacker with spurious feedback, making it difficult to identify genuine infections. For example, when combating malware distributed via attachments and links, Reflective Deception executes the malware in a secure sandbox multiple times, creating the illusion of numerous infected systems (Figure 1). This buries the actual callback traffic within the decoy callbacks, protecting the infected user (Figure 2).

## 3. Experimentation Platform
The experimentation platform consists of four main components: physical infrastructure, virtual infrastructure, victim domain, and attacker domain (Figure 3). This platform provides a secure, agile, and highly automated solution for evaluating deception and related malware mitigation strategies. It can be deployed and operated independently of the internet or with limited, controlled access.

### 3.1. Physical Infrastructure
The physical infrastructure includes hardware that hosts the virtual infrastructure. A minimal configuration requires one attacker machine, two infrastructure machines, and three victim machines. The physical infrastructure should support a hypervisor to manage multiple internal networks and machines with multiple network interface cards (NICs). A reference solution has been implemented using a VMware Cluster at the University of Tulsa, consisting of 18 physical machines with 128 cores, 464 GB of RAM, and 8.7 TB of storage.

### 3.2. Virtual Infrastructure
The virtual infrastructure comprises support systems not directly involved in the attack or defense. These include a router, firewall, DNS server, DHCP server, and provisioning and deployment servers.

#### 3.2.1. Router and Firewall
The router connects the victim and attacker domains, facilitating the monitoring of all traffic between them. The firewall logs connections and blocks certain traffic, enhancing realism. Our solution uses a FreeBSD VM with two NICs to bridge the attacker and victim domains. The router also serves as the firewall, ensuring no external connections to prevent malware escape.

#### 3.2.2. Provisioning and Deployment Server
The provisioning and deployment server is the most complex part of the infrastructure due to scalability requirements. It distributes malware to all victim machines, which must be destroyed or re-imaged after each experiment. A PowerShell/PowerCLI script connected to vCenter configures the experiment, creates snapshots, and executes the malware across all decoys. The script then removes the VMs and erases their DNS records.

#### 3.2.3. DHCP and DNS Servers
The DHCP server dynamically assigns IP addresses to victim machines, while the DNS server supports internal email and attachment scanning. The DNS server also hosts an intranet for the victim domain and should not be publicly accessible. Attacker domain machines use manually set static IP addresses.

### 3.3. Victim Domain
The victim domain includes systems that are directly attacked or used in the Reflective Deception response. These systems are provisioned by the deployment server, with a few static machines acting as legitimate targets. Decoy clones are deployed as needed, incorporating diversity to improve the efficacy of the response. Techniques such as synthetic web browsing, mouse movement, and forged credentials increase the time it takes for attackers to discern viable targets.

### 3.4. Attacker Domain
The attacker domain requires a few machines, including systems to launch attacks, monitor traffic, and house command and control operations. A separate host distributes malware, preventing leaks. The attacker domain may include a malicious web server and other functions to simulate a realistic malware ecosystem.

#### 3.4.1. Packet Capture Server
A packet capture server logs traffic from both the victim and attacker domains to evaluate the effectiveness of Reflective Deception. The server captures traffic using port mirroring and stores it in PCap files for analysis.

#### 3.4.2. Malware Distribution Server
An air-gapped malware distribution server (MDS) runs an SSH and HTTP server. A PowerCLI script switches the MDS between domains, ensuring no direct connection except through the router/firewall. Malware is uploaded to the SSH server and downloaded from the HTTP server, preventing leaks and providing better access control.

#### 3.4.3. Command and Control Center
The command and control center hosts remote administration tools (RATs) to take control of victims. Under standard firewall rules, victims can connect to attackers, but not vice versa. RATs allow simultaneous control and manipulation of multiple machines, forming a botnet.

## 4. Ongoing Work
Ongoing work focuses on developing metrics for Reflective Deception, refining the experimentation platform, and evolving Reflective Deception tactics. Initial tests using Dark Comet as a representative malware specimen have generated 836 MB of PCap files. Plans are in place to upgrade the infrastructure to support larger decoy volumes. Defining performance and efficiency metrics remains a challenge, and insights from the platform's development and operation are informing future improvements. As the experimenter's understanding of the attacker's viewpoint grows, new tactics for Reflective Deception are being developed.

## References
[1] M. H. Almeshekah, E. H. Spafford, and M. J. Atallah. Improving security using deception. Technical Report CERIAS Tech Report, 13, Center for Education and Research Information Assurance and Security, Purdue University, 2013.
[2] J. Arrowood. Cyber attack disruption through multiple detonations of received payloads. Technical Report U.S. Patent No. 8,943,594, USPTO, January 27, 2015.
[3] B. Cheswick. An evening with berferd in which a cracker is lured, endured, and studied. In Proc. Winter USENIX Conference, 1992.
[4] N. Christin, A. Weigend, and J. Chuang. Content availability, pollution and poisoning in file sharing peer-to-peer networks. In Proceedings of the 6th ACM conference on Electronic commerce, pages 68–77, 2005.
[5] F. Cohen. A note on the role of deception in information protection. Computers & Security, 17(6):483–506, 1998.
[6] F. Cohen, D. Rogers, and V. Neagoe. Method and apparatus providing deception and/or altered execution of logic in an information system. Technical Report U.S. Patent No. 7,296,274, USPTO, November 13, 2007.
[7] J. Hale and G. Manes. Method to inhibit the identification and retrieval of proprietary media via automated search engines utilized in association with computer compatible communications network. Technical Report U.S. Patent No. 6,732,180, USPTO, May 4, 2004.
[8] K. Heckman. et al. Denial and deception in cyber defense. Computer, 48(4):36–44, 2015.
[9] Hutchins, M. E. Cloppert, and R. Amin. Intelligence-driven computer network defense informed by analysis of adversary campaigns and intrusion kill chains. In Proceedings of the 6th International Conference on Information Warfare and Security, pages 113–125, March 17-18, 2011.
[10] C. Kreibich and J. Crowcroft. Honeycomb: creating intrusion detection signatures using honeypots. ACM SIGCOMM Computer Communication Review, 34(1):51–56, 2004.
[11] L. Pingree. Emerging technology analysis: Deception techniques and technologies create security technology business opportunities. Technical report, Gartner Inc., July 16, 2015.
[12] A. Yasinsac and Y. Manzano. Honeytraps, a network forensic tool. In Sixth Multi-Conference on Systemics, Cybernetics and Informatics, 2002.
[13] J. Yuill, D. Denning, and F. F. Using deception to hide things from hackers: Processes, principles, and techniques. Technical report, North Carolina State University, 2006.