background, before the associated pages are requested by
a client. For example, blinding servers can store a pool of
mutated versions for a single object, such that, when a client
fetches HTML that refers to the object, the blinding server
can late-bind the mutated version that the page references.
Using this approach, mutation costs need not be synchronous
overheads that are paid when a client requests a page.
JavaScript: To mutate JavaScript ﬁles,
the blinding ser-
vice uses techniques that are adapted from metamorphic
viruses [72]. Metamorphic viruses attempt to elude malware
scanners by ensuring that each instantiation of the virus has
syntactically different code that preserves the behavior of the
base implementation. For example, functions can be deﬁned
in different places, and implemented using different sequences
of assembler instructions that result in the same output.
Our prototype blinding service mutates JavaScript code
using straightforward analogues of the transformations de-
scribed above. JavaScript code also has a powerful advantage
that assembly code lacks—the eval() statement provides a
JavaScript program with the ability to emit new mutated code
at runtime. Such “eval()-folding” is difﬁcult to analyze [14],
particularly if the attacker can only recover a partial set of
RAM artifacts for a page.2
Note that
if a faulty blinding server forgets to mutate
invocations of veilFetch(hashName), then unscrambled
object hash names may be paged out to disk in JavaScript
source code! If an attacker recovered such artifacts, he could
directly replay the object fetches that were made by the private
session. Thus, JavaScript mutation is a core responsibility for
the blinding service.
HTML and CSS: The grammars for HTML and CSS are
extremely complex and expressive. Thus,
there are many
ways to represent a canonical piece of HTML or CSS [24].
For example, HTML allows a character to be encoded as a
raw binary symbol in a character encoding like UTF-8 or
Unicode-16. HTML also allows characters to be expressed
as escape sequences known as HTML entities. An HTML
entity consists of the token “&#” followed by the Unicode
code point for a character and then a semicolon. For instance,
the HTML entity for “a” is “&#97;”. The HTML speciﬁcation
allows an HTML entity to have leading zeroes which the
browser ignores; the speciﬁcation also allows for code points
to be expressed in hexadecimal. Thus, to defeat simple exact-
match greps of HTML artifacts,
the blinding service can
randomly replace native characters with random HTML entity
equivalents.
There are a variety of more sophisticated techniques to
obfuscate HTML and CSS. For a fuller exploration of these
topics, we defer the reader to other work [24]. Our blinding
service prototype uses random HTML entity mutation. It also
obscures the HTML structure of the page using randomly
inserted tags which do not affect the user-perceived visual
layout of the page.
Images: The blinding service can automatically mutate
images in several ways. For example, the blinding service
can select one of several formats for a returned image (e.g.,
JPEG, PNG, GIF, etc.). Each instantiation of the image can
have a different resolution, as well as different ﬁlters that
are applied to different parts of the visual spectrum. Web
developers can also use application-speciﬁc knowledge to
generate more aggressive mutations, such as splitting a single
base image into two semi-transparent images that are stacked
atop each other by client-side JavaScript. As explained in
our threat model (§III), Veil does not protect against leaks of
the raw display bitmap that resides in GPU memory; thus,
the mutation techniques from above are sufﬁcient to thwart
grep-based forensics on memory artifacts from the DOM tree.
For a more thorough discussion of image mutation techniques
that
thwart classiﬁcation algorithms, we defer to literature
from the computer vision community [7].
G. Dynamic Content
At ﬁrst glance, Veil’s compile-time binding of URLs to
objects seems to prevent a publisher from dynamically gen-
erating personalized user content. However, Veil can support
2Some .NET viruses already leverage access to the runtime’s reﬂection
interface to dynamically emit code [65].
dynamic content generation by using the blinding service as a
proxy that sits between the end-user and the publisher. More
speciﬁcally, a Veil page can issue an HTTP request with a
msg-type of “forward”. The body of the request contains
two things: user information like a site-speciﬁc Veil cookie
(§IV-C), and a publisher name (e.g., foo.com). The page
gives the request a random hash name, since the page will not
cache the response. When the blinding service receives the
request, it forwards the message to the publisher’s dynamic
content server. The publisher generates the dynamic content
from the provided user information, and then sends the content
to the blinding service, who forwards it to the client as the
HTTP response to the client’s “forward” request. The client
and the publisher can encrypt the user information and the
personalized content if the blinding service is not trusted with
user-speciﬁc data; in this scenario, the content provider’s web
server is responsible for mutating objects before returning them
to the client. Regardless, the content provider must compile
dynamically-generated content (§IV-A and §V). Fortunately,
the compilation cost for a single dynamic object is typically
small. For example, compiling a 100 KB image requires
Base64-encoding it and generating a few metadata ﬁelds,
taking roughly 75 ms. Content providers can compile multiple
dynamic objects in parallel.
H. DOM Hiding
Heap walking reduces the likelihood that
in-memory
browser state will swap to disk. Content mutation ensures
that, if state does swap out, then the state will not contain
greppable artifacts from a canonical version of the associated
page. However, some Veil sites will be uncomfortable with
sending any site-speciﬁc HTML, CSS, or JavaScript to a client,
even if that content is mutated. For example, a site might be
concerned that a determined sysadmin can inspect swapped-
out fragments of mutated HTML, and try to reverse-engineer
the mutation by hand.
To support
these kinds of sites, Veil provides a mode
of operation called DOM hiding. In DOM hiding mode, the
user’s browser essentially acts as a thin client, with the full
version of the page loaded on a remote server that belongs to
the content provider. The user’s browser employs a generic,
page-agnostic JavaScript
library to forward GUI events to
the content provider through the blinding service; the content
provider’s machine applies each GUI event to the server-side
page, and then returns an image that represents the new state
of the page.
The advantage of DOM hiding is that site-speciﬁc HTML,
CSS, and JavaScript is never pushed to the user’s browser.
The disadvantage is that each GUI interaction now suffers
from a synchronous wide-area latency. For some Veil sites,
this trade-off will be acceptable. We characterize the additional
interactive latency in Section VII-D.
Figure 4 provides more details about how Veil implements
DOM hiding. The Veil bootstrap page receives the URL to
load from the user, as described in Section IV-D. The bootstrap
page then issues an initial HTTP request through the blinding
servers to the content provider. The content provider returns
a page-agnostic remoting stub; this stub merely implements
the client-side of the remote GUI architecture. As the content
7
can easily do this by inlining objects into HTML [39]; for
example, the compiler can directly embed CSS content that
the original HTML incorporated via a link to an external ﬁle.
The blinding service can also inject noise into the distribution
of object sizes and counts. For example, when the service
returns objects to clients, it can pad data sizes to ﬁxed offsets,
e.g., 2KB boundaries or power-of-2 boundaries. Alternatively,
the blinding service can map object sizes for page X to
the distribution for object sizes in a different page Y [73].
All of these defensive approaches hurt performance in some
way—inlining and merging reduce object cacheability, and
padding increases the amount of data which must be encrypted
and transmitted over the network. Note that publishers must
explicitly enable client-side caching, so paranoid sites can
simply disable this feature.
V. PORTING LEGACY APPLICATIONS
In this section, we describe how Veil helps developers to
port legacy web pages to the Veil framework. In particular, we
provide case studies which demonstrate how Veil’s compiler
and runtime library can identify unblinded fetches and, in
some cases, automatically transform those fetches into blinded
ones.
Raw XMLHttpRequests: Veil’s compiler traverses a stat-
ically deﬁned HTML tree, converting raw URLs into Veil
hash pointers. However, a page’s JavaScript code can use
XMLHttpRequests to dynamically fetch new content. Veil’s
static HTML compiler does not interpose on such fetches, so
they will generate unblinded transfers that pollute the client’s
DNS cache and browser cache.
In
runtime
[40]
and
on
client
library
JavaScript
debugging mode, Veil’s
shims
the
the
interposes
XMLHttpRequest interface. This allows Veil
to inspect
the URLs in XMLHttpRequests before the associated
HTTP fetches are sent over the network. Veil drops unblinded
requests and writes the associated URLs to a log. A web
developer can then examine this log and determine how to
port the URLs.
For static content, one porting solution is to leverage Veil’s
AJAX maps. Once the debugging client library has identiﬁed a
page’s raw XMLHttpRequest URLs, the library sends those
URLs to Veil’s HTML compiler. The compiler automatically
fetches the associated objects and uploads them to the object
servers. Additionally, when the compiler rewrites the HTML,
it injects JavaScript code at the beginning of the HTML which
maps the raw XMLHttpRequest URLs to the hash names
of the associated objects. Later, when the page is executed
by real users, Veil’s shimmed XMLHttpRequests use the
AJAX map to convert raw URLs to blinded references. Veil
will drop requests that are not mentioned in the translation
map. This approach is complete from the security perspective,
since all unblinded XMLHttpRequests will be dropped.
However, for this approach to please users (who do not want
any requests to drop), Veil developers should use testing tools
with good coverage [42], [45], [60] to ensure that all of a
page’s XMLHttpRequest URLs are mapped.
AJAX maps are unnecessary for native Veil pages which
always generate blinded XMLHttpRequests. However,
8
Fig. 4. With DOM hiding, the client-side remoting stub sends GUI events to
the content provider, and receives bitmaps representing new page states. The
page’s raw HTML, CSS, and JavaScript are never exposed to the client.
provider returns the stub to the user, the provider also launches
a headless browser3 like PhantomJS [1] to load the normal
(i.e., non-rewritten) version of the page. The content provider
associates the headless browser with a Veil GUI proxy. The
proxy uses native functionality in the headless browser to take
an initial screenshot of the page. The GUI proxy then sends
the initial screenshot via the blinding servers to the user’s
remoting stub. The stub renders the image, and uses page-
agnostic JavaScript event handlers to detect GUI interactions
like mouse clicks, keyboard presses, and scrolling activity.
The stub forwards those events to the GUI proxy. The proxy
replays those events in the headless browser, and ships the
resulting screen images back to the client. Note that a page
which uses DOM hiding will not use encrypted client-side
browser caching (§IV-A) or DOM storage (§IV-C)—there will
be no page-speciﬁc client-side state to store.
I. Discussion
Veil
tries to eliminate cleartext client-side evidence of
browsing activity. However, Veil does not prevent the server-
side of a web page from tracking user information. Thus, Veil
is compatible with preexisting workﬂows for ad generation
and accounting (although advertising infrastructure must be
modiﬁed to use blinded URLs and “forward” messages).
If a Veil page wants to use the browser cache, Veil employs
encryption to prevent attackers from inspecting or modifying
cache objects. However, an attacker may be able to ﬁngerprint
the site by observing the size and number of its cached objects.
Sun et al. [63] provide a survey of techniques which prevent
such ﬁngerprinting attacks; their discussion is in the context
of protecting HTTPS sessions, but their defensive techniques
are equally applicable to Veil. The strongest defense is to
reduce the number of objects in a page. Veil’s compiler
3A headless browser is one that does not have a GUI. However, a headless
browser does maintain the rest of the browser state; for example, DOM
state can be queried using normal DOM methods, and modiﬁed through the
generation of synthetic DOM events like mouse clicks.
Veil remoting stubRegular browserVeil blindingserversVeil GUI proxyHeadless browserNormal version of pageBitmap display areaGUI event handlers + image rendering logicUserContent providerRemoting protocolURL validation via XMLHttpRequest shimming is useful
when developers must deal with complex legacy libraries.
changes. In the previous  example, Veil rewrites the tag
as follows:
Dynamic tag generation: A legacy page can generate un-
blinded fetches by dynamically creating new DOM nodes
that contain raw URLs in src attributes. For example, using
document.createElement(), a page can inject a new
 tag into its HTML. A page can also write to the
innerHTML property of a preexisting DOM node, creat-
ing a new HTML subtree that is attached to the preexist-
ing node. Neither type of tag creation will be captured by
XMLHttpRequest shimming.
XMLHttpRequest shimming is a speciﬁc example of a
more general technique called DOM virtualization. If desired,
the entire DOM interface can be virtualized [3], [27], [41],
allowing Veil to interpose on all mechanisms for dynamic tag
creation. However, full DOM virtualization adds non-trivial
performance overhead—the native DOM implementation is
provided by the browser in fast C++ code, but a virtualized
DOM is implemented by the application in comparatively slow
JavaScript code. Furthermore, the full DOM interface is much
more complex than the narrow XMLHttpRequest interface.
supports
full DOM
XMLHttpRequest
virtualization. We leave the integration of Veil with a
full virtualization system [26] as future work.
implementation
shimming,
but
not
Our
current
of
Veil
links
in CSS: CSS ﬁles
Unblinded
can
directly
reference image objects using the url() statement, e.g.,
body{background: url(‘x.jpg’)}. After
the Veil
compiler processes HTML ﬁles, it examines the associated
CSS ﬁles and replaces raw image links with inline data URLs.
Thus, when the Veil page loads a post-processed CSS ﬁle,
the image data will be contained within the CSS itself, and
will not require network fetches.
Angular.js: Angular [4] is a popular JavaScript framework
that provides model-view-controller semantics for web ap-
plications. Angular uses a declarative model to express data
bindings. For example, the {{}} operator is used to embed live
views of the controller into HTML. The HTML snippet  instructs Angular to dynami-
cally update the content of the  whenever the JavaScript
value controller.x changes. Many other popular frame-
works deﬁne a similar templating mechanism [6], [55], [67].
The {{}} operator is not part of the ofﬁcial HTML
grammar. To implement {{}} and other kinds of data binding,
Angular uses a dynamic DOM node compiler. This compiler
is a JavaScript ﬁle that runs at the end of the page load, when
the initial DOM tree has been assembled. The compiler locates
special Angular directives like {{}}, and replaces them with
new JavaScript code and new DOM nodes that implement the
data binding protocol.
Angular allows URLs to contain embedded {{}} ex-
pressions. Since these URLs are not resolved until runtime,
Veil’s static compiler cannot directly replace those URLs with
blinded ones. However, Veil can rewrite Angular directives in
a way that passes control to Veil code whenever a data binding
9
The src attribute of the image is set to a network path which