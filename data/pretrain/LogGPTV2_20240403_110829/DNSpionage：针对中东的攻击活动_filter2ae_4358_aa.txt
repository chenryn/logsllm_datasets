# DNSpionage：针对中东的攻击活动
##### 译文声明
本文是翻译文章，文章原作者 Talosintelligence，文章来源：talosintelligence.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 一、前言
思科Talos团队最近发现了针对黎巴嫩和阿拉伯联合酋长国（阿联酋，UAE）的新一波攻击活动，此次攻击活动波及`.gov`域名以及一家私营的黎巴嫩航空公司。
根据我们的研究，这个攻击组织显然精心研究了受害者的网络基础设施，尽力保持隐蔽性，使攻击过程尽可能不引起他人注意。
根据攻击者的基础设施及TTP（战术、技术和过程）特征，我们无法将该攻击组织与最近观察到的其他攻击活动或攻击者关联在一起。该攻击组织使用了两个虚假的恶意网站，其中托管了伪装成招聘文书的Microsoft
Office恶意文档，文档中嵌入用来入侵目标用户的恶意宏。我们将攻击者所使用的恶意软件标识为DNSpionage，该恶意软件能够以HTTP和DNS协议与攻击者通信。
在另一次攻击活动中，攻击者使用相同的IP来重定向合法的`.gov`域名以及私有公司域名DNS请求。在每次DNS重定向攻击中，攻击者都会精心准备，为重定向域名生成Let’s
Encrypt证书。这些证书能够为用户免费提供X.509 TLS证书。到目前为止，我们尚不清楚之前的DNS重定向攻击是否已成功实施。
在本文中，我们会详细介绍攻击者所使用的方法，分析攻击者如何使用恶意文档诱导用户，使用户打开伪装成服务求职者的恶意网站。此外，我们也会介绍恶意DNS重定向攻击及攻击事件时间线。
## 二、攻击方法
###  伪装的求职网站
攻击者首先使用两个恶意网站来尝试攻击目标用户，这两个网站伪装成提供各种工作职位的合法站点：
    hr-wipro[.]com (重定向至wipro.com)
    hr-suncor[.]com (重定向至suncor.com)
这些网站托管了一个Microsoft Office恶意文档：`hxxp://hr-suncor[.]com/Suncor_employment_form[.]doc`。
该文档实际上是Suncor Energy（加拿大一家可持续能源公司）官网上一份合法文件的拷贝，其中包含恶意宏组件。
此时我们尚未澄清目标用户通过何种方式看到这些链接。攻击者很有可能通过电子邮件钓鱼攻击来发送恶意文档，但也有可能通过社交平台（如LinkedIn）来传播恶意链接，使这种求职攻击更加真实。
###  恶意Office文档
打开第一个Office文档后，用户会看到一个提示消息，声称文档的“内容模式可用”。
###  恶意宏
恶意样本中包含的宏主要执行如下两个步骤：
1、当文档打开时，使用base64解码经过编码的一个PE文件，然后将其释放到当前系统中，具体路径为`%UserProfile%\.oracleServices\svchost_serv.doc`。
2、当文档关闭时，将`svchost_serv.doc`重命名为`svchost_serv.exe`，然后创建名为`chromium updater v
37.5.0`的计划任务，以便执行该程序。计划任务会立即执行，并且每分钟都会重复执行。
恶意样本通过这两个步骤来规避沙盒检测。
只有当Microsoft
Office被关闭时才会执行攻击载荷，意味着载荷部署过程中需要用户交互。样本中包含的宏同样使用密码保护，避免用户通过Microsoft
Office查看宏代码。
此外，宏还用到了经典的字符串混淆技术来规避基于字符串的检测机制：
宏使用拼接方式生成`schedule.service`字符串。最终攻击载荷是一款远程管理工具，我们将其标识为`DNSpionage`。
## 三、DNSpionage恶意软件
###  恶意软件分析
恶意文档所释放的恶意软件是之前未公开的一款远程管理工具。由于该工具使用了DNS隧道技术来与攻击者的基础设施通信，因此我们将其标识为`DNSpionage`。
DNSpionage会在当前运行目录中生成相关数据：
    %UserProfile%.oracleServices/
    %UserProfile%.oracleServices/Apps/
    %UserProfile%.oracleServices/Configure.txt
    %UserProfile%.oracleServices/Downloads/
    %UserProfile%.oracleServices/log.txt
    %UserProfile%.oracleServices/svshost_serv.exe
    %UserProfile%.oracleServices/Uploads/
攻击者使用`Downloads`目录来保存从C2服务器下载的其他脚本及工具。
将文件上传至C2服务器之前，攻击者会使用`Uploads`目录来临时存放这些文件。
攻击者以明文格式将相关日志保存到`log.txt`文件中，所执行的命令及结果也会记录该文件中。
`Configure.txt`文件中包含恶意软件配置信息。攻击者可以指定命令及控制（C2）服务器URL、URI以及充当DNS掩护隧道的域名。此外，攻击者可以指定混淆过程中使用的自定义base64字符表。我们发现攻击者会为每个目标定制字母表。
传输的所有数据都使用JSON格式，因此恶意软件的大部分代码都与JSON库有关。
###  通信渠道
恶意软件使用HTTP及DNS协议来与C2服务器通信。
**HTTP模式**
恶意软件会向`0ffice36o[.]com`发起DNS请求，请求中携带使用base64编码过的随机数据。恶意软件利用该请求在服务器上注册当前被感染的系统，接收HTTP服务器的IP地址（分析过程中该IP为`185.20.184.138`）。典型的DNS请求如下：
    yyqagfzvwmd4j5ddiscdgjbe6uccgjaq[.]0ffice36o[.]com
恶意软件也可以构造DNS请求，为攻击者提供更多信息。典型的请求如下：
    oGjBGFDHSMRQGQ4HY000[.]0ffice36o[.]com
在如上域名中，前4个字符由恶意软件使用`rand()`随机生成。剩下的域名使用base32编码生成，解码后的值为`1Fy2048`。其中`Fy`为目标ID，`2048`（`0x800`）代表`Config
file not found`（“未找到配置文件”）。如果恶意软件未能在被感染主机上找到配置文件，则会发起该请求，将消息发送给攻击者。
随后，恶意软件首先会发起一次HTTP请求（`hxxp://IP/Client/Login?id=Fy`），接收配置文件。
该请求可以用来创建配置文件，设置自定义的base64字母表。
第二个请求会发往`hxxp://IP/index.html?id=XX`（其中`XX`为被感染系统的ID值）。
该请求的目的是接收攻击者发送的命令。这是伪装成维基百科的一个网站：
攻击者将命令嵌入到网页的源码中：
在这个攻击案例中，由于我们没有收到自定义的字母表，因此攻击者使用的是标准的base64算法。还有其他案例在配置文件中使用了自定义的字母表，如下所示：
自动发送到被感染系统的3条命令如下所示：
    {"c": "echo %username%", "i": "-4000", "t": -1, "k": 0}
    {"c": "hostname", "i": "-5000", "t": -1, "k": 0}
    {"c": "systeminfo | findstr /B /C:"Domain"", "i": "-6000", "t": -1, "k": 0}
执行这些命令后，恶意软件会生成如下信息：
攻击者请求当前系统的用户名及主机名来获取受影响的用户域环境信息。很明显这是一个侦察踩点过程，所收集到的数据最终会发往`hxxp://IP/Client/Upload`。
最后，恶意软件使用`CreateProcess()`来执行这些命令，所生成的结果被重定向到恶意软件使用`CreatePipe()`创建的一个管道。
**DNS模式**
恶意软件也可以只使用DNS模式。在该模式中，命令及响应数据都通过DNS协议来处理。攻击者可以在被感染主机的`configure.txt`文件中指定使用该模式。某些情况下，攻击者可以使用DNS协议来返回收集到的信息，避免通信数据被代理或者Web过滤器拦截。
首先，恶意软件会发起DNS请求获取命令，如下所示：
    RoyNGBDVIAA0[.]0ffice36o[.]com
前4个字符可以直接忽略（如前文所示，这是随机生成的字符），有价值的信息为`GBDVIAA0`，解码（base32）后的值为`0GTx00`，其中`GT`为目标ID，`\x00`为请求号。在响应数据中，C2服务器会返回一个IP地址。虽然这个地址并不总是有效的IP地址（如`0.1.0.3`），但DNS协议支持使用这些地址。我们认为第一个值（`0x0001`）为下一次DNS请求的命令ID，而`0x0003`为命令的大小。
随后，恶意软件使用该命令ID来发起DNS查询请求：
    t0qIGBDVIAI0[.]0ffice36o[.]com (GBDVIAI0 => "0GTx01")
C2服务器会返回一个新的IP地址：`100.105.114.0`。如果我们将该值转换为ASCII格式，则可以得到`dirx00`结果，也就是待执行的下一条命令。
接下来，恶意软件会将命令执行结果通过多个DNS请求发送给服务器：
    gLtAGJDVIAJAKZXWY000.0ffice36o[.]com -> GJDVIAJAKZXWY000 -> "2GTx01 Vol"
    TwGHGJDVIATVNVSSA000.0ffice36o[.]com -> GJDVIATVNVSSA000 -> "2GTx02ume"