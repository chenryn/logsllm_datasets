### 版权声明
版权所有 (c) 1995, 1997 Paul Gortmaker 和 Andries Brouwer  
中文版版权所有 (c) 2000 Bill Pan, Laser 和 www.linuxforum.net

本文件是自由文档；您可以根据自由软件基金会发布的 GNU 通用公共许可证的条款重新分发和/或修改它；许可证的版本为第 2 版，或者（您选择）任何后续版本。

GNU 通用公共许可证中提到的“目标代码”和“可执行文件”应被解释为包括任何文档格式化或排版系统的输出，包括中间和打印输出。

此手册按原样分发，没有任何明示或暗示的担保。有关更多信息，请参阅 GNU 通用公共许可证。

您应该随此手册一起收到 GNU 通用公共许可证的副本；如果没有，请写信至：美国马萨诸塞州波士顿市坦普尔广场59号330室，邮编02111，自由软件基金会。

此手册由 aeb 编写于 1995 年 8 月 14 日，基于 Paul Gortmaker 的 HOWTO（版本 v1.0.1，1995 年 8 月 15 日）。主要更新于 1997 年 1 月 14 日。

### 名称
bootparam - 介绍 Linux 内核的启动参数

### 描述
Linux 内核在启动时可以接受特定的“命令行参数”或“启动参数”。这些参数主要用于提供正确的硬件配置信息，特别是在内核无法正确识别某些硬件的情况下。当 Linux 内核直接由 BIOS 启动时（例如从使用 `cp zImage /dev/fd0` 命令制作的 Linux 启动软盘启动），无法指定启动参数。因此，必须使用能够传递启动参数的软件，如 LILO 或 Loadlin。

为了改变内核配置，可以使用 rdev 工具。更多细节请参见 `rdev(8)`。

LILO（LInux LOader）是由 Werner Almesberger 开发的最常用的启动配置工具。它可以启动多种不同的系统内核，并将启动配置信息存储在一个简单的文本文件中（请参见 `lilo(8)` 和 `lilo.conf(5)`）。LILO 可以启动诸如 DOS、OS/2、Linux、FreeBSD 和 UnixWare 等操作系统，并且具有很高的灵活性。

另一个常用的启动工具是 LoadLin，这是一个基于 DOS 的程序。LoadLin 可以从 DOS 提示符下启动 Linux 内核（并传递启动参数），前提是某些必需的资源可用。这对于希望从 DOS 系统启动 Linux 的用户非常有用。如果您的硬件可以通过 DOS 驱动程序启用，LoadLin 也非常有用。一个常见的例子是设置与 SoundBlaster 兼容的声卡。通过在 DOS 下运行声卡的启动程序，然后使用 LoadLin 启动 Linux，可以避免因重新启动 Linux 而导致声卡重新设置的问题。

### 参数列表
内核参数行被解析为一个由空格分隔的字符串列表（即启动参数表）。大多数启动参数的格式如下：

```
名字[=值1][,值2]...[,值10]
```

其中“名字”是一个唯一的关键字，用于区分内核接受的值（如果有）。请注意，目前的代码只能处理每个关键字最多 10 个逗号分隔的参数。在一些复杂的应用中，可以通过重复使用相同的关键字来传递超过 10 个的参数，只要配置程序支持该方法。

大部分排序工作在 `linux/init/main.c` 中进行。首先，内核检查参数是否为 "root="、"nfsroot="、"nfsaddrs="、"ro"、"rw"、"debug" 和 "init" 这些特殊参数之一。然后，内核会搜索“配置队列”（bootsetups 队列）以查看指定的参数字符串（如 "foo"）是否已注册。如果是，则内核将运行与 "foo" 关联的配置程序（如 `foo_setup()`），并将参数 3, 4, 5, 6 传递给内核命令行。任何像 "foo=bar" 这样的参数不会被当作配置程序的关联接受，而是被解释为环境变量的设置。例如，"TERM=vt100" 可以作为内核的启动参数。

任何既不被内核接受也不被解释为环境变量的参数将传递给第一个系统进程，通常是 init 进程。最常见的传递给 init 进程的参数是 "single"，它告诉 init 以单用户模式启动计算机，并且不要执行任何守护进程。请查阅您所安装版本的 init 程序的帮助文档，了解其支持的参数。

### 一般、与设备无关的启动参数

#### `init=...`
这个启动参数提供了内核执行时的初始化命令。如果没有设置或找不到，内核会依次尝试调用 `/etc/init`、`/bin/init`、`/sbin/init` 和 `/bin/sh`。如果都失败了，会显示一个错误消息。

#### `nfsaddrs=...`
该启动参数设置 NFS（网络文件系统）启动地址为指定的字符串值。该启动地址用于网络启动。

#### `nfsroot=...`
该启动参数设置 NFS 根目录名为指定的字符串。如果该字符串不是以 '/'、',' 或数字开头，则会在其前加上 "/tftpboot/" 前缀。

#### `no387`
（仅在定义了 CONFIG_BUGi386 时有效）
某些 i387 协处理器在 32 位保护模式下会出现错误。例如，一些早期的 ULSI-387 芯片在处理浮点运算时可能会死锁。使用 "no387" 启动参数可以让 Linux 忽略算术协处理器的存在。这时，您必须将内核编译为支持数学仿真模式。

#### `no-hlt`
（仅在定义了 CONFIG_BUGi386 时有效）
某些早期的 i486DX-100 处理器芯片在使用 "halt" 指令时会出现问题，无法正常返回操作模式。使用 "no-hlt" 指令告诉 Linux 在没有任务时执行无限循环指令，而不是让 CPU 进入 "halt" 模式。这样可以允许这些有缺陷的芯片运行 Linux。

#### `root=...`
这个参数告诉内核在启动时使用哪个设备作为根文件系统。默认值是在编译内核时确定的根设备。如果您想更改该值（例如，将第二个软盘驱动器作为根设备），可以使用 "root=/dev/fd1"。根设备可以以符号形式或数字形式指定。符号形式为 `/dev/XXYN`，其中 XX 表示设备类型（"hd" 表示普通 IDE 硬盘，Y 的范围是 "a" 到 "d"；"sd" 表示 SCSI 硬盘，Y 的范围是 "a" 到 "e"；"ad" 表示 Atari ACSI 磁盘，Y 的范围是 "a" 到 "e"；"ez" 表示 Syquest EZ135 兼容的并口可移动硬盘，Y 的值只能是 "a"；"xd" 表示 XT 兼容磁盘，Y 的值是 "a" 或 "b"；"fd" 表示软驱，Y 表示软驱的编号 - fd0 对应 DOS 的 "A:"，fd1 对应 DOS 的 "B:"），N 表示分区号（以十进制表示，软驱没有该信息）。

当前内核支持更多的设备，如 nfs、ram、scd、mcd、cdu535、aztcd、cm206cd、gscd、sbpcd、sonycd、bpcd，其中大部分是 CD-ROM 设备。（nfs 指示网络启动位置；ram 表示 RAM 虚拟磁盘。）需要注意的是，这些指定对文件系统上的设备名称没有实际改变，"/dev/" 部分的描述只是出于传统习惯。

您也可以通过使用数字形式的主/次设备号指定根设备，但这是笨拙和不方便的方法。例如，/dev/sda3 的主设备号是 8，次设备号是 3，所以您可以使用 "root=0x0803" 来指定根设备。

#### `ro` 和 `rw`
"ro" 选项告诉内核以只读方式挂载文件系统。这使得文件一致性检查程序（如 fsck，类似于 DOS 的 scandisk）可以在所谓的“静止”文件系统中运行（即没有写操作）。需要写操作的进程必须等到文件系统以读/写方式重新挂载后才能进行，例如使用 "mount -w -n -o remount /" 命令（请参见 `mount(8)`）。

"rw" 选项告诉内核以读/写方式挂载文件系统。这是默认值。只读和读/写的选择可以使用 `rdev(8)` 设置。

#### `reserve=...`
该参数用于设置保留区域，使该区域的 I/O 端口不被检测。格式如下：

```
reserve=iobase,extent[,iobase,extent]...
```

在某些情况下，您的机器可能需要避免设备驱动程序检测某些指定区域的设备。这可能是由于检测会导致硬件错误，或者硬件会被错误地识别，或者您只是不想让内核对该硬件进行初始化。`reserve` 启动参数指定了一个不被检测的 I/O 端口保留区。设备驱动程序不会检测保留区域的 I/O 端口，除非其他启动参数明确指定需要检测。例如，命令行：

```
reserve=0x300,32  blah=0x300
```

表示设置保留 I/O 区域 0x300 到 0x31f（共 32 个端口）不被 `blah` 程序以外的驱动程序检测。

#### `mem=...`
PC 规范定义的 BIOS 调用返回的内存数最大为 64MB。Linux 使用这个 BIOS 调用来检测机器上安装了多少内存。如果您拥有超过 64MB 的内存，可以使用这个参数告诉 Linux 您的内存大小。该值可以是十进制或十六进制（加前缀 0x），后缀可以加上 "k"（乘以 1024）或 "M"（乘以 1048576）。

以下是 Linux 初始人 Linus 对 "mem=" 参数使用的声明：“内核可以接受任何 'mem=xx' 参数，但如果您欺骗它，迟早会让您后悔莫及。参数用于指定最高 RAM 地址，因此 'mem=0x1000000' 表示您拥有 16MB 内存。对于 96MB 内存的机器，应设置为 'mem=0x6000000'。注意：有些机器可能将高端内存用于 BIOS，因此您可能不能完全拥有 96MB 地址空间。反之，有些芯片可以将包括 BIOS 在内的物理内存映射到高端内存，因此实际可用空间可能为 96MB + 384kB。但是，如果您告诉 Linux 您拥有的内存超出实际内存，将会发生糟糕的事情。”

#### `panic=N`
默认情况下，内核在异常后不会重新启动系统，但这个参数可以指定内核在异常后 N 秒后重新启动（如果 N > 0）。异常时限也可以使用 "echo N>/proc/sys/kernel/panic" 设置。

#### `reboot=[warm|cold][,[bios|hard]]`
（仅在定义了 CONFIG_BUGi386 时有效）
从 2.0.22 版本开始，reboot 命令默认使用冷启动。您可以使用 "reboot=warm" 来进行旧版本的热启动。冷启动意味着对所有硬件设备进行重新设置，但也可能导致磁盘缓冲区中尚未写入磁盘的数据丢失。热启动的优点是速度快。

默认情况下，要求键盘控制器向机器发出重启信号的低电平脉冲很困难，但至少有一种类型的主板不会这样工作。选项 "reboot=bios" 将用 BIOS 设置代替跳线。

#### `nosmp` 和 `maxcpus=N`
（仅在定义了 __SMP__ 时有效）
命令行选项 "nosmp" 或 "maxcpus=0" 将禁用 SMP（对称多处理）功能。选项 "maxcpus=N" 限制在 SMP 模式下工作的 CPU 数量为 N。

### 核心开发者使用的启动参数

#### `debug`
核心信息被传递给日志守护进程 klogd，以便记录在磁盘上。优先级高于 `console_loglevel` 的信息也会在控制台上显示（要了解信息优先级，请参见相关文件）。默认情况下，所有高于调试级别的信息都会写入日志。但这个启动参数的设置可以使内核将 DEBUG 级别的信息写入日志。`console loglevel` 也可以在系统运行时通过使用 klogd 设置。请参见相关文档。