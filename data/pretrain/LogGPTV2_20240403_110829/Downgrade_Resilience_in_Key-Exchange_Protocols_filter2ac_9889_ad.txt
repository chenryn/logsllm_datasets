M ∪ {m} before returning sign(sk, p, m).
s, p(cid:2), P (A) of A in forging a signature
The advantage AdvEUF-CMA
for s is the probability that the forgery game returns true.
Since we proved that SSH-sub soundly abstracts negotiation
in the full protocol, any downgrade attack on the full protocol
can be turned into a downgrade attack on SSH-sub. By virtue
of Theorem 2 it sufﬁces to prove that SSH-sub is downgrade
secure. The same reasoning applies to partnering security.
Partnering security
Deﬁne Nego(cfgI , cfgR)
(cid:2)
= (a, cfgI .u, cfgI .PKI (a, u), pk R) ,
where a = nego(F (cfgI ), F (cfgR)) if pk R = cfgR.P KR(a),
and ⊥ otherwise. Let M be the set of all supported modes
and H be the set of all supported hash algorithms. We deﬁne
M(cid:3) (cid:2)
H(cid:3) (cid:2)
Ps
(cfg, cfg
(cid:2))|PS(cfg)}
= {Negocfg.role
= {mode.hash | mode ∈ M(cid:3)}
= {p | s, p = mode.sig ∧ mode ∈ M}
(cid:2)
That is, M(cid:3) are the modes negotiated by pairs of conﬁg-
urations where the ﬁrst conﬁguration guarantees partnering
security, H are the hash algorithms used in partnering secure
modes, and Ps are the agility parameters for the peer signature
scheme s.
Theorem 4 (Partnering security of SSH-sub): Let PS be
such that PS(cfg) implies that all public keys in the range
of cfg.PKscfg.role are honest. Given an adversary A against
the partnering security of SSH-sub, we construct adversaries
Bs,p and Bh running in about the same time as A such that
(cid:4)
Advpartnering
SSH-sub, PS
(cid:4)
(A) is at most
h, H(Bh) +
ns AdvEUF-CMA
(Bs,p) ,
AdvCR
s, p, Ps
h∈H(cid:2)
(s,p)∈sig(M(cid:2))
where ns is the number of keys generated for scheme s.
Downgrade security
To prove downgrade security, we deﬁne Nego, M, Ps, and
H as before, but re-deﬁne M(cid:3), H(cid:3) to use DP instead of PS,
i.e. M(cid:3) (cid:2)
(cid:2)) | DS(cfg, cfg
= {Negocfg.role
(cfg, cfg
(cid:2))}.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:10:46 UTC from IEEE Xplore.  Restrictions apply. 
Theorem 5 (Downgrade security of SSH sub-protocol): Let
DP be such that DP(cfg,·) implies that all public keys in
the range of cfg.PKcfg.role are honest. Given an adversary
A against the downgrade security of the sub-protocol, we
construct adversaries Bs,p and Bh running in about the same
(cid:4)
(A) is at most
time as A such that Advdowngrade
n2
(cid:4)
SSH-sub, DP
AdvCR
h, H(Bh) +
ns AdvEUF-CMA
s, p, Ps
(Bs,p) ,
2|uid|/2
+
h∈H(cid:2)
(s,p)∈sig(M(cid:2))
where n is the number of sessions, ns the number of keys
generated for scheme s, and |uid| the size of unique identiﬁers.
V. INTERNET KEY EXCHANGE
The Internet Key Exchange (IKE) protocol
is the key
exchange component of the IPsec suite of protocols. Two
versions of the protocol are commonly deployed: IKEv1 [24]
and IKEv2 [27]. Both variants are inspired by the SIGMA
protocol [30] recalled in the introduction, and are believed to
inherit its authentication and key-indistinguishability guaran-
tees. Next, we study their downgrade protection sub-protocols.
A. IKEv1 does not prevent downgrade attacks
We ﬁrst consider the DHE-PSK modes of IKEv1, whose
ﬁrst three messages are depicted in Figure 4a. The corre-
sponding downgrade protection sub-protocol is depicted in
Figure 4b.
The protocol presumes that both parties can select the pre-
shared key (psk) to use from the negotiated security association
SAR and identiﬁers IDI and IDR; it then conﬁrms that the two
parties agree, using a MAC based on psk. The two parties also
exchange Difﬁe-Hellman shares and use them to derive session
keys and protect application data but, in ‘aggressive’ modes,
their authentication and downgrade-protection relies solely on
the pre-shared key.
The initiator begins by extracting a list of supported security
associations [SA1, . . . , SAn] from its conﬁguration, presum-
ably ordered by preference, formats them (using the function
F ), and sends them along with a nonce (nI) to the responder.
Each security association speciﬁes a Difﬁe-Hellman group (for
the key exchange); an encryption scheme and a hash algorithm
(for protecting messages); and a peer authentication method.
The responder chooses one of these associations (SAR), based
on its own conﬁguration, and responds with its own nonce.
The initiator checks that this choice is compatible with its
proposals, which completes the negotiation. To authenticate
one another, to provide key conﬁrmation, and to prevent down-
grade attacks, the initiator and responder exchange MACs,
optionally signed when using certiﬁcates for authentication.
For simplicity, Figures 4a and 4b depict the use of just a pre-
shared key for authentication. The MACs are computed with a
key derived from the pre-shared key and the nonces, over some
important parts of the protocol transcript: the key shares, the
8 byte ISAKMP cookies taken from the headers, the client’s
offered security associations and the sender’s identity.
Surprisingly, the MAC does not cover the negotiated secu-
rity association (SAR), and this omission leads to a downgrade
(cid:2)
R compatible with the initiator’s proposals. If this new SA
attack. A man-in-the-middle can simply modify the second
message to replace the server’s chosen SAR with a different
(cid:2)
SA
R
uses an encryption algorithm that the attacker can break (e.g.
DES or NULL), then the attacker can break the conﬁdentiality
of the ﬁrst messages sent by the initiator. (Similarly, the ﬁrst
MAC includes IDR but not IDI, so an attacker can modify
IDI in the ﬁrst message, and yet the initiator will complete
the sub-protocol without detecting the modiﬁcation; this is less
problematic in the full protocol because IKEv1 continues with
a conﬁrmation message from the responder.)
We instantiate our main deﬁnitions to IKEv1 to better un-
derstand this downgrade-protection failure and propose ﬁxes.
Clearly, the protocol offers no authentication guarantees unless
the PSKs used by both parties are honest, so we always
make that assumption in the following, which enables us to
omit the choice of PSKs from the negotiation predicates. In
IKEv1,
the mac and kdf functions are negotiated as part
of SAR. In practice,
they are effectively HMAC-MD5 or
HMAC-SHA1. For simplicity, in the following we assume that
conﬁgurations specify ﬁxed kdf and mac algorithms. (See §IV
for an explicit handling of cryptographic agility.) We use the
following notations for the sub-protocol:
• the goal is to agree on a mode (SAR, IDI , IDR);
• cfgI = (IDI , [SA1, . . . , SAn]).
• cfgR includes IDR and is otherwise unspeciﬁed; it would
typically also include a list of SAs.
• F is a formatting function from cfgI to the payload of
the ﬁrst message that encodes the list of proposals above.
• nego is a partial function, used by the responder to map
F (cfgI ) and cfgR to some SAR.
• check is used by the initiator to conﬁrm that the mode is
acceptable, checking for instance that SAR matches one
of the initiator’s proposals [SA1, . . . , SAn].
• Nego(cfgI , cfgR), our speciﬁcation for negotiation, is de-
ﬁned as (nego(F (cfgI ), cfgR), cfgI .IDI , cfgR.IDR) when
check succeeds, and is otherwise undeﬁned.
Our statements and proofs only rely on the properties of
F , nego, and check as stated above, we hence omit a full
description.
We also assume that the protocol rejects runs in which
IDI = IDR. This is referred to in the literature as the self-
communication scenario, and in such settings there are well
known reﬂection attacks on IKEv1 [19, 36]. Positive results
in this setting would require an extension of our sub-protocol
and assumptions about the DH groups or the ISAKMP cookies
employed in the protocol.
We ﬁrst prove partnering security (Deﬁnition 2) relying
on the security of both kdf (modeled as a PRF keyed with
psk) and mac (modeled as a MAC, relying e.g. on existential
unforgeability under chosen-message attacks).
Theorem 6 (Partnering security of IKEv1 sub-protocol): Let
PS be such that all PSKs referenced by handles in cfg are
honest. Given an adversary A against the partnering security
of IKEv1-sub, we construct adversaries B and B(cid:2) running in
514514
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:10:46 UTC from IEEE Xplore.  Restrictions apply. 
Init. I
Resp. R
HDR1(nI , [SA1, . . . , SAn], gx, IDI )
km = kdf(psk , nI | nR)
HDR2(nR, SAR, gy, IDR, mac(km, m1))
km = kdf(psk , nI | nR)
Init. I
Resp. R
nI , F (cfg I ), IDI
uid = (nI , nR)
SAR = nego(F (cfg I ), cfg R)
mode = (SAR, IDI , IDR)
km = kdf(psk , nI | nR)
nR, SAR, IDR, mac(km,− | F (cfg I ) | IDR)
uid = (nI , nR)
mode = (SAR, IDI , IDR)
check (cfg I , mode)
km = kdf(psk , nI | nR)
mac(km,− | F (cfg I ) | IDI )
HDR3(mac(km, m2))
complete = true
complete = true
(a) m1 = g
m2 = g
y | g
x | g
x | CKYR | CKYI | [SA1, . . . , SAn] | IDR,
y | CKYI | CKYR | [SA1, . . . , SAn] | IDI .
(b) F is a formatting function from cfg I to the payload of the ﬁrst
message that encodes the list of proposals.
Fig. 4: IKEv1 aggressive DHE-PSK protocol (a) ﬁrst messages (b) downgrade protection sub-protocol.
about the same time as A such that Advpartnering
most
IKEv1-sub, PS
(A) is at
n2
2|uid|/2
+ np · AdvPRF(B) + n · AdvEUF-CMA(B(cid:2)) ,
where n is the number of sessions and np is the number
different psks employed by sessions.
While partnering security can be shown to hold for a very
general partnering security predicate, because of the SAR
spooﬁng attack the protocol offers provable downgrade pro-
tection only for very restrictive conﬁgurations. For example,
relying on the unambiguous formatting of IDI and IDR in the
MACed payloads, we have downgrade protection when
1) the client (or the server) uses each PSK only for a ﬁxed
saR, IDI , IDR; or
2) the client proposes only one SA at a time and checks that
the server echoes this proposal in SAR, and moreover SA
determines IDI.
Our analysis of
suggests
the IKEv1 downgrade-protection sub-
protocol
an obvious ﬁx:
the mode
(SAR, IDI , IDR) in both MACs. We then obtain downgrade
protection under the same conditions as for partnering: that
PSKs be honest and both kdf and mac be secure.
include
We also considered other modes of IKEv1, based on signa-
tures instead of PSKs (much as in our introductory SIGMA
example), and also when the MACs are protected using the
keys derived from the Difﬁe-Hellman exchange. In those cases,
the downgrade-protection sub-protocol is almost the same:
SAR is similarly left unauthenticated and, even if the messages
are protected, there is still an attack when the client proposes
a weak group, as explained in the introduction.
B. IKEv2 does not prevent downgrade attacks
IKEv2 [27] is a revision of the IKEv1 protocol intended
to simplify the speciﬁcation and extend it to cover popular
authentication methods such as EAP [1].
515515
IKEv2 with signatures: We ﬁrst consider
the plain,
signature-based protocol and sub-protocol in Figures 5a and
5b.
We ignore signature agility issues, since in IKEv2 the hash
algorithm for signing is not negotiated; it is chosen by the
sender, who almost always picks SHA1.
As in IKEv1, the initiator begins by offering a sequence of
security associations (extracted from cfg I) and the responder
chooses one of these. In the full protocol, the initiator and
responder also exchange Difﬁe-Hellman public values and use
them to derive session keys, used (in particular) to encrypt and
MAC all messages after m2.
The client and the server then exchange signatures over
MACs of their own views of the protocol (presumably to pro-
vide some deniability): their full ﬁrst message, their identity,
and the nonce of their peer. In particular, and in contrast with
IKEv1, the server’s signature covers its chosen SAR but not
the initiator’s offered security associations.
The sub-protocol
leaves important payloads unauthenti-
cated: the peers do not sign or MAC each other’s DH public
keys, and not even each other’s identities. It also ignores
the fact that, in the full protocol, all messages after m2 are
encrypted and MACed using a derived key. Thus, some attacks
against the sub-protocol may not occur in the full protocol.
Still, there is a downgrade attack against the full protocol as
soon as the client tolerates a weak group. The attack proceeds
as follows (see Fig. 6). Suppose an initiator offers two security
associations, one using the 1024-bit Difﬁe-Hellman group 14
and another using the 768-bit group 1. The attacker tampers
with the ﬁrst message to delete the ﬁrst association, so that
the responder thinks that the initiator only supports group 1.
The attacker forwards the responder’s messages to the initiator,
who thinks that the responder only supports group 1. If the
attacker has performed enough pre-computation so as to be
able to compute discrete logs in group 1, then he can compute
the session and MAC keys and impersonate the responder.
In practice, executing this attack requires the MitM to send
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:10:46 UTC from IEEE Xplore.  Restrictions apply. 
Init. I
Resp. R
m1 = (nI , F (cfg I ))
Init. I
Resp. R
m1 = SA_INIT(nI , [SA1, . . . , SAn], gx, infoI )
m2 = SA_INIT(nR, SAR, gy, infoR)
uid = (nI , nR)
Check (cfg I , SAR)
uid = (nI , nR)
SAR = nego
(cid:2)(F (cfg I ), cfg R)
m2 = (nR, SAR)
(km, k
(cid:2)
m, ke, k
e) = kdf(gxy, nI | nR)
(cid:2)
(cid:2)
m, ke, k