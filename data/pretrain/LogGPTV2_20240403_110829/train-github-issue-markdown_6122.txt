 **I'm submitting a ...**
    [X] feature request
### Problem statement:
An app with NgModule structure `AppModule` -> `LabsFormsModule` ->
`TemplateModule`, `ModelFormControlsModule`, `ModelFormBuilderModule` (3
children)
Each child module has defined routes `RouterModule.forChild(ROUTES)`
**Current behavior**
Now if these modules are imported in `LabsFormsModule` then the routes are
flattened and they are loaded in `router-outlet` of `AppModule`. Whereas the
intented behavior is that they be loaded in `LabsFormsModule`.  
Upon discussion on Gitter, @brandonroberts pointed that this is by design
because ParentModule and imported modules shares same context.  
Also, Only one injector is created for the ParentModule and imports.
To achive composition, we need to lazy load each of the three modules, then
the hierarchy will be maintained.  
But these 3 modules are small and are not fit to be loaded lazily, but
hierarchy of modules is needed.
Another alternative is, we define Routes on `LabsFormsModule` to load them in
`router-outlet` of `LabsFormsModule` but then we need to import component from
inside child modules in `forms.routes.ts` file and add them to the routes.
This breaks the module concepts.  
Components inside child modules are not public and should not be accessed
outside of Module. also to be addressable outside of module, components needs
to be added to `exports`, In short we are forcing internal implementations to
be made public just to support Routing defined in Parent module  
See: https://github.com/sirajc/angular2-labs/tree/master/src/app/forms
**Expected/desired behavior**
### Proposal: Support Hierarchy of modules
  1. While defining child module routes
    RouterModule.forChild(ROUTES, asChildren /*boolean*/)
But this has conflicts with context and injector
  1. Enable NgModules as children
    { path: 'forms',
      component: 'FormsComponent',
      childModules: [ TemplateModule, ModelFormControlsModule, ModelFormBuilderModule ]
    }
  1. Child imports in Parent Module
    @NgModule({
      imports: [CommonModule],
      children: [TemplateModule, ModelFormControlsModule, ModelFormBuilderModule],
      declarations: [FormsComponent]
    })
Any of the above 3 approach, which seems fit or any other way Angular can
provide, that helps creating NgModule hierarchy and routes composition.
**What is the motivation / use case for changing the behavior?**  
By enabling NgModule as children, we can compose application with NgModule
hierarchy without the need for lazy loading each and every module.
  * **Language:** [all | TypeScript X.X | ES6/7 | ES5]