### Feature Request: Support for Hierarchical NgModule Structure with Routing

#### Problem Statement
In an Angular application, the current module structure is as follows:
- `AppModule` (root module)
  - `LabsFormsModule`
    - `TemplateModule`
    - `ModelFormControlsModule`
    - `ModelFormBuilderModule`

Each of the child modules (`TemplateModule`, `ModelFormControlsModule`, and `ModelFormBuilderModule`) defines its own routes using `RouterModule.forChild(ROUTES)`.

#### Current Behavior
When these child modules are imported into `LabsFormsModule`, their routes are flattened and loaded into the `router-outlet` of `AppModule`. The intended behavior is for these routes to be loaded within the `router-outlet` of `LabsFormsModule`.

Upon discussion on Gitter, @brandonroberts mentioned that this behavior is by design because the parent module and its imported modules share the same context. Additionally, only one injector is created for the parent module and its imports. To achieve the desired composition, each of the three modules would need to be lazy-loaded, which would maintain the hierarchy. However, these modules are small and not suitable for lazy loading, but a hierarchical structure is still needed.

Another alternative is to define routes in `LabsFormsModule` to load the components from the child modules in the `router-outlet` of `LabsFormsModule`. This approach, however, requires importing the components from the child modules into the `forms.routes.ts` file and adding them to the routes. This breaks the encapsulation and modularity principles, as components inside child modules should not be accessed outside of their respective modules. To make these components addressable, they would need to be added to the `exports` array, effectively making internal implementations public.

For reference, see: [GitHub Repository](https://github.com/sirajc/angular2-labs/tree/master/src/app/forms)

#### Expected/Desired Behavior
To support a hierarchical structure of NgModules and maintain proper routing, we propose the following approaches:

1. **Define Child Module Routes with a Hierarchy Flag**
   ```typescript
   RouterModule.forChild(ROUTES, { asChildren: true });
   ```
   This approach has conflicts with the context and injector.

2. **Enable NgModules as Children in Routes Configuration**
   ```typescript
   {
     path: 'forms',
     component: FormsComponent,
     childModules: [TemplateModule, ModelFormControlsModule, ModelFormBuilderModule]
   }
   ```

3. **Child Imports in Parent Module**
   ```typescript
   @NgModule({
     imports: [CommonModule],
     children: [TemplateModule, ModelFormControlsModule, ModelFormBuilderModule],
     declarations: [FormsComponent]
   })
   export class LabsFormsModule {}
   ```

Any of the above approaches, or any other solution provided by Angular, that supports creating a hierarchical structure of NgModules and route composition would be beneficial.

#### Motivation/Use Case
By enabling NgModules as children, we can compose applications with a hierarchical NgModule structure without the need for lazy loading each and every module. This will allow for better organization and maintainability of the codebase.

**Language:** TypeScript X.X

Thank you for considering this feature request.