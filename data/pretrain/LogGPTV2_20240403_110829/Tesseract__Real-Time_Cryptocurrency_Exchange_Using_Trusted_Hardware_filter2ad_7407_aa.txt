title:Tesseract: Real-Time Cryptocurrency Exchange Using Trusted Hardware
author:Iddo Bentov and
Yan Ji and
Fan Zhang and
Lorenz Breidenbach and
Philip Daian and
Ari Juels
Tesseract: Real-Time Cryptocurrency Exchange Using Trusted Hardware
Iddo Bentov
Cornell University
Yan Ji
Fan Zhang
Cornell University
Cornell University
Yunqi Li
SJTU
Xueyuan Zhao
SJTU
Lorenz Breidenbach
ETH Z¨urich and Cornell Tech
Philip Daian
Cornell Tech
Ari Juels
Cornell Tech
Abstract
We propose Tesseract, a secure real-time cryptocurrency
Existing centralized exchange
exchange service.
designs are vulnerable to theft of
funds, while
decentralized exchanges cannot offer real-time cross-
chain trades. All currently deployed exchanges are
also vulnerable to frontrunning attacks.
Tesseract
overcomes these ﬂaws and achieves a best-of-both-
worlds design by using Intel SGX as a trusted
execution environment.
Furthermore, by running
a consensus protocol among SGX-enabled servers,
Tesseract mitigates denial-of-service attacks. Tesseract
supports not only real-time cross-chain cryptocurrency
trades, but also secure tokenization of assets pegged
to cryptocurrencies. For instance, Tesseract-tokenized
bitcoins can circulate on the Ethereum blockchain
for use in smart contracts. We provide a reference
implementation of Tesseract
that supports Bitcoin,
Ethereum, and similar cryptocurrencies.
1
Introduction
The rise of Bitcoin [54] has spawned many hundreds
of other cryptocurrencies as well as application-speciﬁc
units of value known as crypto “tokens.” This diverse
ecosystem of assets has in turn led to a large and dynamic
array of cryptocurrency exchanges, platforms that allow
users to trade different cryptocurrencies against one
another and/or for ﬁat currencies. At the time of writing,
the aggregate daily trading volume of cryptocurrency
exchanges exceeds $25 billion.
security problems.
Unfortunately, cryptocurrency exchanges suffer from
a variety of
the
most popular exchanges are centralized, meaning that
they hold traders’ assets while trades are executed.
Such exchanges support real-time trading and often
automatically match buy and sell orders. They are
to theft of traders’ funds (cf.
vulnerable, however,
Currently,
Section 3.1). In a number of high-proﬁle incidents, funds
have been stolen when exchanges were breached or other
forms of malfeasance took place, e.g., [25, 6, 38, 52].
Permissionless blockchains, however, are designed
speciﬁcally to eliminate trust assumptions between
transacting parties by avoiding centralization.
A
trust-free cryptocurrency exchange can be realized for
transactions across such blockchains in the form of
atomic intra-chain or cross-chain swaps (ACCSs) [16],
transactions that exchange cryptocurrencies between
pairs (or among sets) of users in a fair, all-or-nothing
manner. ACCSs, though, require users to wait many
minutes (in fact, often hours) for a trade to execute.
Additionally, atomic swaps in general aren’t sufﬁcient
to realize an exchange: A mechanism for matching
orders or otherwise performing price discovery is also
necessary.
(Since ACCSs serve as a useful reference
point, we elaborate on the concept and its limitations in
Section 2.)
The systemic risk of theft in centralized exchanges has
led to the rising popularity of decentralized exchanges
such as EtherDelta [64] and the soon-to-be-implemented
0x [81], AirSwap [57], and Kyber Network [46].
These systems hold traders’ funds and settle transactions
in smart contracts, eliminating the risk of theft
in
centralized exchanges. Unfortunately, they have other
drawbacks. Their on-chain settlement means that they
cannot support real-time trading. Additionally, while
their use of smart contracts conveys an appearance
of
they are vulnerable to various
frontrunning attacks by exchanges and other users.
trustworthiness,
Achieving the best of both worlds has been a standing
challenge, but a seemingly elusive one. An ideal
cryptocurrency exchange would be real-time like a
centralized exchange, meaning that participants can
respond to price ﬂuctuations and alter their positions with
low latency. It would support even traders that choose to
utilize automated programs for high frequency trading
and arbitrage (cf. [7]), who may wish to modify their
1
positions in milliseconds. At the same time, such an
exchange would be trust-free, protecting against theft
in the way that decentralized exchanges do, but also
eliminating frontrunning attacks that exploit blockchain
latencies.
In this work, we present Tesseract, a cryptocurrency
exchange that achieves this ideal set of properties.
Tesseract is real time. Traders can rapidly observe the
alterations in the buy (a.k.a.
“bid”) and sell (a.k.a.
“ask”) orders on the exchange, as well as external
events (e.g., [85]), then modify their trading positions
in milliseconds. By performing fast price discovery,
they can drive price convergence so that the gap (a.k.a.
“spread”) between the bids and asks is small, leading to
efﬁcient markets like those in major ﬁnancial systems.
Tesseract also prevents theft of users’ funds by exchange
operators and hackers as well as a variety of frontrunning
attacks present in existing cryptocurrency exchanges.
a
to
Tesseract
applications
execute within
relies on SGX,
trusted execution
environment supported by an instruction-set architecture
extension in recent-model Intel CPUs [1, 34, 51].
SGX allows
a
protected environment called an enclave that ensures
conﬁdentiality and software integrity.
It enables
Tesseract to behave like a trusted third party, controlling
funds without exposing them to theft while preventing
frontrunning by the exchange operator. Additionally,
Tesseract provides mitigation against denial-of-service
(DoS) attacks via a consensus protocol among SGX-
enabled nodes.
Tesseract supports cross-chain trading in which assets
are exchanged across distinct blockchains. Trades within
a single blockchain, e.g., exchange of tokens and Ether
within Ethereum, can also be important (cf. [67, 18, 60,
19, 15]). While this use case can be achieved at least
in part using smart contracts, a signiﬁcantly simpliﬁed
variant of Tesseract can offer the added beneﬁt of real-
time trading, which smart contracts cannot support.
Tesseract also supports a tokenization scheme that allows
pegged tokens to ciculate across blockchains, without
relying on a human element for security (see Section 7).
The main challenge in the design of Tesseract is
dealing with powerful network adversaries.
Such
adversaries can perform an eclipse attack in which an
exchange is presented with fake blockchain data. We
show how to address this problem by checkpointing
trustworthy blocks within the Tesseract application and
having it monitor the cumulative difﬁculty of newly
furnished blocks. A network adversary can also suppress
messages / transactions issued by the exchange in an
attempt to interfere in on-chain settlement of trades, e.g.,
permitting partial settlement in which cryptocurrency
ﬂows to the adversary from a counterparty but not
from the adversary, resulting in the adversary stealing
funds. We express a theoretical solution to these
functionality
network attacks in terms of an ideal
called a refundable multi-input
transaction (RMIT).
RMIT provides a conceptual springboard for securely
architecting a secure cross-chain exchange. We present
a highly efﬁcient realization of RMIT in Tesseract, in a
protocol involving a network of multiple SGX-backed
nodes running Paxos. While only one node handles
assets directly, others can execute or cancel transactions
should the main node fail. This protocol enforces a
key fairness property we deﬁne called all-or-nothing
settlement.
Our security assumptions around Tesseract are quite
conservative. We assume that an adversary (potentially
the exchange operator) can gain complete physical
access to the host in which the funds are stored and
complete control of its network connections. We do
assume that the code that we run inside the SGX enclave
is secure against side-channel attacks [84], but this code
is constant-time and constant-memory.
In a sense, the
Tesseract exchange still relies on a trusted party in the
form of the hardware manufacturer, because the private
key that resides inside CPU (and generates signatures for
remote attestation) is provisioned by the manufacturer. It
can be argued that a weaker yet similar form of trust is
required in a practical instantiation of any cryptographic
protocol, since the manufacturer may be able to attack
the protocol by embedding malicious logic into the
hardware. We also, however, incorporate a scheme of
double attestation (Section 4.3) that provides an extra
layer of defense against a corrupt manufacturer. Thus,
Tesseract still requires trust, but to a signiﬁcantly lesser
degree than centralized exchanges and other possible
real-time exchange schemes (cf. Section 3).
In summary, our contributions in this paper are as
follows:
• We
introduce
Tesseract,
SGX-backed
cryptocurrency exchange
a
wide variety of transaction types, with cross-chain
trading as its primary application.
can support
that
an
• We
by
attacks
consider
powerful
network
adversaries
that may seek to mount eclipse
attacks or suppress transactions to achieve unfair
settlement and thus theft of funds. We deﬁne a key
fairness property called all-or-nothing settlement
and show how to realize an exchange that achieves
this property using as a conceptual building block
an ideal functionality called RMIT.
• We present practical techniques to achieve all-or-
nothing settlement in Tesseract. These techniques
include within-enclave blockchain monitoring to
prevent eclipse attacks and use of a consensus
2
group of SGX-backed nodes that can enforce and/or
cancel transactions in the case that the main (asset-
holding) exchange node becomes unavailable.
• We implement proof-of-concept of Tesseract,
describing our parameter and design choices.
2 Atomic cross-chain swaps
A secure protocol
for ACCSs was given in [16].
We specify an intuitive description of the protocol
in Figure 1, demonstrating a swap of bitcoins for
litecoins as an example. The main thrust of the protocol
Πaccs is that Alice can redeem Bob’s coins only by
publicly revealing her decommitment x on a blockchain,
thereby allowing Bob to use x to redeem Alice’s coins on
the other blockchain. To avoid a race condition, Alice’s
coins remain locked for s0 more time than Bob’s coins,
which should give Bob enough time to learn x and claim
Alice’s coins. The reason behind the time limits is that
an honest party should be able to gain back possession
of her money in the case that the other party aborted. We
provide a proof of security for Πaccs in Appendix A.
The ﬁrst two steps of Πaccs terminate after c0 and f (c0)
conﬁrmations on the Bitcoin and Litecoin blockchains,
so that the transactions will become irreversible with a
high enough probability. The function f (·) estimates a
level of conﬁdence for TXB’s irreversibility that is on
par with that of TXA. Per Section 3.1, a reasonable
choice for f (·) can be, e.g.,
f (n) = 3n. Combined
with a sensible choice for the parameters t0,s0 (see
Appendix A), Alice and Bob will need to wait for hours
(or perhaps minutes with faster cryptocurrency systems)
until the Πaccs protocol completes.
In the accompanying illustration (Figure 2), Alice
trades n1 = 2 BTC for Bob’s n2 = 600 LTC. The last
block of the Bitcoin blockchain is T1, and the last block
of the Litecoin blockchain is T2. The time limit t0 is
set to about two weeks into the future (i.e., 2000 more
blocks in Bitcoin, and 8000 more blocks in Litecoin, as
the block creation rate is 4 times faster in Litecoin than
in Bitcoin). The extra safety time s0 is set to 100 Bitcoin
blocks, which is ≈ 16 hours on average. Note that both
Bitcoin and Litecoin allow speciﬁcation of the time limit
in seconds rather than blocks (since valid blocks need
to specify a timestamp that is within certain leniency
bounds), which adds convenience but not security.
Since the long conﬁrmation time in decentralized
networks makes Πaccs slow, it is likely that the agreed
upon price (in the example,
n2/n1 = 300 LTC per
BTC) was decided by observing the prices in real-time
exchanges. This implies that the parties cannot respond
to price ﬂuctuations in a fair manner: if Bob is rational
then he may cancel the trade after the ﬁrst step (if the
3
Protocol Πaccs
1. Alice samples a random x ∈ {0,1}λ , computes a
hash commitment Y = hash(x), and broadcasts
a transaction TXA that spends n1 BTC into an
output script that dictates:
• Alice can gain back possession of her n1 BTC
after c0 +t0 + s0 blocks.
• Bob can redeem the n1 BTC by supplying a
preimage of Y and signing with his secret key.
2. After TXA is buried under c0 extra blocks
and therefore becomes irreversible w.h.p., Bob
broadcasts a transaction TXB that spends his n2
LTC into an output script that dictates:
• Bob can gain back possession of his n2 LTC
after 4t0 blocks.
• Alice can redeem the n2 LTC by supplying a
preimage of Y and signing with her secret key.
3. After TXB is buried under f (c0) extra blocks
and therefore becomes irreversible w.h.p., Alice
redeems the n2 LTC of Bob by revealing x.
4. Bob redeems the n1 BTC of Alice by supplying x.
Figure 1: Protocol for an atomic cross-chain swap.
Figure 2: Illustration of an atomic cross-chain swap.
market price of LTC went up), and if Alice is rational
then she may cancel the trade after the second step (if
the market price of BTC went up). Another implication
is that Πaccs by itself is not a complete trading solution,
because real-time exchanges are still needed for price
discovery.
A matching service for ACCSs was established in
2015, though it became defunct due to lack of usage [47].
Alice:  if block# > T1+2100     sigverify PKA  else     (sigverify PKB) AND (x: hash(x)=Y)---------------------------------------  amount: 2  sigverify PKA--------------------  amount: 2TXABitcoin:T1GenesisLitecoin:T2Genesis Bob:  if block# > T2+8000     sigverify PKB  else     (sigverify PKA) AND (x: hash(x)=Y)---------------------------------------  amount: 600  sigverify PKB--------------------  amount: 600TXB3 Cryptocurrency Exchanges
We describe several alternative designs for a real-time
cryptocurrency exchange, and also survey non-real-time
designs. See Table 1 for a summary comparison between
Tesseract and the alternatives.
3.1 Centralized Exchange
In a centralized cryptocurrency exchange, users transfer
ownership of their funds to the sole control of the
exchange administrator.
This transfer of ownership
(a.k.a. deposit) is done via an on-chain transaction that
may take a long time to be conﬁrmed, according to
a conﬁdence parameter that the exchange administrator
set. Most exchanges accept a Bitcoin transfer by waiting
1 hour on average (6 PoW conﬁrmations).
The business model of a centralized exchange can be
described as a “goose that lays golden eggs”. That is to
say, the exchange administrator may run away with all
the funds that the users deposited (usually by claiming
“I was hacked”), and the disincentive to doing so is that