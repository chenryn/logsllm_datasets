# DisplayLink USB显卡软件任意文件写入导致本地权限提升漏洞分析
|
##### 译文声明
本文是翻译文章，文章原作者 almond，文章来源：offsec.almond.consulting
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 一、概述
在DisplayLink
USB显卡软件7.9.296.0版本中，我们发现了一个本地特权提升漏洞，该漏洞是由于对日志文件夹的访问权限过大，导致可以滥用DisplayLink
USB显卡软件执行特权文件操作，例如创建任意文件。这一漏洞可以被攻击者利用，例如通过对特权DisplayLink进程进行DLL劫持，以获得本地计算机上的SYSTEM特权。
该漏洞已经在最新版本中实现修复，因此建议用户应更新到最新版本。
此外，根据DisplayLink官方说明，7.9版本与Windows 10存在不兼容现象，可能会导致出现稳定性问题。
## 二、漏洞概述
在使用Windows笔记本进行配置审查时，我通常会使用Clément Labro（[@itm4n](https://github.com/itm4n
"@itm4n")）的PrivescCheck工具检查其中是否存在普通的权限提升技术。
在PrivescCheck中，列出了一些可修改的路径，其中包括`C:Program FilesDisplayLink Core
SoftwareDebug`这一路径。该路径允许Everybody进行写入、删除、写入属性、调试等权限。因此，对于所有用户来说，似乎对于`C:Program
FilesDisplayLink Core SoftwareDebug`文件夹都具有非常大的权限。
那么，这个程序到底是什么呢？我们可以查看`services.msc`，以获得更多信息：  
最终我们得知，这个服务是显卡软件的一部分，可以自动运行，并且会以SYSTEM权限运行。
如果DisplayLink软件利用这个Debug文件夹中的文件执行特权操作，那么这将可能会成为一个本地权限提升的漏洞利用路径。  
在我同事Clément Lavoillotte的帮助下，我成功发现并利用了这个漏洞，感谢他提供的关于Windows特权文件操作滥用的介绍文章。
## 三、漏洞利用探索过程
我使用Windows 10 1909虚拟机环境进行测试，在上面安装了相同版本的DisplayLink。
在进行配置审查时，那台Windows笔记本电脑上面使用的是DisplayLink 7.9.296.0版本。这是一个旧版本，目前已经不在官网下载页面上列出了。
通过查找页面历史镜像，可以找到这个旧版本的下载链接。
###  3.1 过度的访问权限
在安装软件之后，我们来查看一下Debug文件夹的权限：
值得关注的是，`Everybody`对这个文件夹具有完全控制权。
如果在这个文件夹中包含了敏感文件（例如：DLL文件），我们便可以对其进行修改，从而将恶意代码以SYSTEM身份运行。接下来，我们来查看这个文件夹中的内容：
其中只有日志文件，因此，没有直接的方法来实现特权提升。但是，我们观察到其中包含`.log`和`.old.log`文件，这表明日志可能会进行轮换。而正如Clément在他的文章中所解释的那样，我们可以利用日志轮换来实现任意文件创建。
###  3.2 日志轮换
我们使用Procmon来观察日志轮换：
在启动时，`DisplayLinkManager.exe`似乎会进行以下操作：
1、打开`DisplayLinkManager.log`日志文件；  
2、检查该日志文件（可能是日志内容，或者文件大小）是否满足条件；  
3、如果符合条件，则进行日志轮换：
（1）删除`DisplayLinkManager.old.log`文件（如果存在）；  
（2）将`DisplayLinkManager.log`重命名为`DisplayLinkManager.old.log`；  
（3）创建一个新的`DisplayLinkManager.log`。
如我们所见，上述操作都是以SYSTEM用户身份执行的。我们查看了事件的详细信息，确认在这里并不是模拟用户进行的操作。
由于DisplayLink Manager在访问这些文件时并没有模拟用户，因此我们就可以利用这一点，实现任意文件的写入或删除。
###  3.3 任意文件创建
接下来，我们尝试欺骗DisplayLink Manager，将我们控制的文件移动到特权位置。我们可以使用Google Project
Zero开发的SymbolicLink测试工具中的`CreateSymlink.exe`来实现这一目标。
可以按照如下方式创建符号链接：
1、从`C:Program FilesDisplayLink Core
SoftwareDebugDisplayLinkManager.log`到我们要移动的文件；
2、从`C:Program FilesDisplayLink Core
SoftwareDebugDisplayLinkManager.old.log`到我们要放置文件的位置。
但是，为了成功创建，Debug文件夹必须为空，因为`CreateSymlink.exe`程序会将其替换为`RPC
Control`的挂载点。如果我们尝试删除Debug文件夹中存在的日志文件，会产生以下错误：
尽管我们可以完全控制文件夹及内容，但是由于日志文件是由DisplayLink
Manager进程打开的，因此无法删除这些内容。并且，我们无法停止DisplayLink
Manager进程，因为它们是以SYSTEM身份运行，而我们仅仅是普通用户的权限。
那么，应该如何绕过呢？由于我们可以完全控制Debug文件夹，因此也可以对其ACL进行修改。例如，我们可以将其修改为SYSTEM对该文件夹及内容没有修改权限：
现在，在重启计算机后，DisplayLink
Manager将无法在该文件夹中打开日志文件，随即我们就可以将其删除。我们还可以删除`DisplayLinkUserAgent.log`。该文件由DisplayLink用户代理应用程序打开，而这个应用程序也是以SYSTEM身份运行。
由于DisplayLink UI
Systray应用程序打开了`DisplayLinkUI.log`和`DisplayLinkUIAddOnApi.log`，该应用程序以当前用户的权限运行，因此我们可以在任务管理器中将其关闭，然后删除日志文件。
之后，我们将获得一个干净的并且完全为空的Debug文件夹：
现在，我们就可以尝试漏洞利用过程。我们尝试将我们控制的文件移动到`C:WindowsSystem32`。通过观察日志文件的大小，我们注意到，当日志文件超过101KB时将会发生日志轮换，因此我们需要确保自定义文件超过这个大小。
    PS C:Temp> ls
        Directory: C:Temp
    Mode                LastWriteTime         Length Name
    ----                -------------         ------ ----    -a----        4/24/2020   6:58 PM         192302 arbitrary_file.txt
    PS C:Temp> Get-Content -TotalCount 8 .arbitrary_file.txt
    "Disposable Heroes"
    Bodies fill the fields I see, hungry heroes end
    No one to play soldier now, no one to pretend
    Running blind through killing fields, bred to kill them all
    Victim of what said should be
    A servant 'til I fall
    PS C:Temp> Get-FileHash -Algorithm SHA256 -Path .arbitrary_file.txt
    Algorithm       Hash                                                                   Path
    ---------       ----                                                                   ----    SHA256          B3C1196F2E9A45C71C31BC2B73A216025793A31FED1B0FBE6FD14106FC637C1D       C:Temparbitrary_file.txt
创建符号链接：
    PS C:SymlinkTestTools> .CreateSymlink.exe -p "C:Program FilesDisplayLink Core SoftwareDebugDisplayLinkManager.log" "C:Temparbitrary_file.txt"
    PS C:SymlinkTestTools> .CreateSymlink.exe -p "C:Program FilesDisplayLink Core SoftwareDebugDisplayLinkManager.old.log" "C:WindowsSystem32target_arbitrary_file.dll"
我们的目标文件扩展名为.dll，这是为了证明我们完全可以控制名称。
注意：在创建符号链接时，需确保当前没有其他进程正在访问Debug文件夹。其中包括打开文件夹的explorer.exe窗口，或者带有指向该文件夹的快速访问标签。如果存在上述情况，可能会出现问题。
我们查看在`RPC Control`中创建的对象，可以看到我们的“日志文件”。为此，我们使用Sysinternals
Suite中的`WinObj.exe`。
现在，我们可以注销帐户并重新登录，然后：
    PS C:> Get-FileHash -Algorithm SHA256 -Path "C:WindowsSystem32target_arbitary_file.dll"
    Algorithm       Hash                                                                   Path