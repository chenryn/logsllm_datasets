 1200
 800
 400
)
s
(
e
m
i
t
n
o
i
t
i
s
o
p
m
o
C
composition time
Memory
composition time
Memory
 50
 40
 30
 20
 10
)
B
G
(
y
r
o
m
e
M
 2000
 1600
 1200
 800
 400
)
s
(
e
m
i
t
n
o
i
t
i
s
o
p
m
o
C
 50
 40
 30
 20
 10
)
B
G
(
y
r
o
m
e
M
 0
 0
 1
 2
 3
 4
 0
 5
 0
 0
 2
 4
 6
 8
 10
 0
 12
 0
 0
 200
 400
 600
 0
 800  1000
# of EPGs (x1000) in input graphs
# of edges (x1000) in input graphs
# of edges (x1000) in composed graph
Figure 11: Scalability of PGA with D3 (D2 + function boxes).
Instead, policy intents can be suitably captured using log-
ical labels similar to PGA. Logical labels have been advo-
cated or supported in both networking [6, 23, 14] and non-
networking [40, 9, 1] contexts. For example, SELinux [9]
assigns arbitrary labels per ﬁle in extended attributes and
allows users to deﬁne access control policies based on the
label values. Among network policy frameworks, GBP [6]
deﬁnes an application-centric policy model that has a notion
of EPGs whose membership is determined by logical labels,
similar to PGA, although it does not model the relationships
between labels or provide a graph model. Flow-based Man-
agement Language (FML) [23] is a DATALOG-based query
language that speciﬁes access control and forwarding poli-
cies on logical entities (e.g., user names queried from ex-
ternal authentication services) and conditions (wireless vs.
wired). FML has evolved to Nlog [29] for network virtual-
ization and to OpenStack Congress policy language [7] that
expresses policies across multiple cloud services of com-
pute, storage, networking, etc. Despite the expressiveness,
it is a generic language, non-trivial to map to graph mod-
els which are better suited for networking policies. Fur-
ther, these abstractions do not model middlebox behavior
required for service chain analysis and they do not support
automated, eager composition.
Composition. Many frameworks support manual composi-
tion of network policies, e.g., [20, 34, 12, 21, 15, 19, 38].
Merlin [38] assumes a hierarchy of users like network ad-
mins and tenants and allows tenants to only restrictively re-
ﬁne policies that are explicitly delegated to them by the ad-
min, manually composing both their intents in the process.
It is thus not suitable for composing modular policies that
can arbitrarily constrain each other where conﬂict resolution
is required. Some frameworks [20, 34, 24, 12, 21] allow
network operators to write modular programs and manually
compose them into one complex program. These are without
conﬂict resolution support as well. Further, their composi-
tion is too coarse-grained and cannot automatically decom-
pose and re-compose complex user policies that often mix
different types of intents – ACLs, service chains etc. – in
each policy. Others have introduced composition operators
to resolve conﬂicts between independently speciﬁed access
control policies [15, 19] and bandwidth requirements [19].
They map the set of all input policies onto the leaf nodes of a
single hierarchical tree and assign a composition operator to
each intermediate node of the tree. Such assignments either
require a human oracle [15] or are rigidly pre-determined for
each conﬂict type, making it hard to automatically handle ar-
bitrary conﬂicts between diverse policy writers.
In GBP [6], users are required to manually write a com-
posite policy connecting multiple EPG pairs. Its users write
conditions, prioritized rules etc. such that a unique and cor-
rect policy will be chosen for any trafﬁc between endpoints
that may have varying statuses (security level, location etc).
In contrast, PGA not only supports automated, eager com-
position of modular policies, it is also to our knowledge,
the ﬁrst to explore the model of individual policies indepen-
dently constraining each other for composition.
Extensions. Specifying dynamic temporal behavior of the
network as a ﬁnite state machine has been studied in [28,
42]. Kinetic [28] can coexist with PGA; different SDN con-
trol apps programmed in Kinetic can generate access con-
trol and service chain policies in PGA graph model, which
the PGA framework can then compose while handling con-
ﬂicts.
I.e., Kinetic controls dynamic label assignments of
endpoints while PGA captures and composes the network
policy associated with each label (EPG).
Refs. [25, 17, 18] have explored ways to effectively model
middleboxes. In comparison, PGA’s modeling is more ab-
stract but has been sufﬁcient for the composition scenarios
we targeted. Our ongoing work is exploring the utility of the
richer modeling capability provided by some of these frame-
works for service chain analysis and runtime veriﬁcation of
service chain policies.
Corybantic, Athens and Statesman [33, 13, 39] propose
solutions to resolve conﬂicts on underlying network resources
or states between different SDN control modules. NEMO [3]
and ONOS [5] provide APIs to model a virtual network topol-
ogy (of switches and routers) and to specify requirements on
the topology links and paths. These systems deal with prob-
lems that are orthogonal to PGA which handles end-to-end
policies that are agnostic to network speciﬁcs. PGA can be
extended to incorporate some of these solutions. TAG [30]
provides a graph abstraction capturing only bandwidth re-
quirements across application components; extending PGA
to incorporate TAG is our future work.
CoVisor [24] composes OpenFlow rule tables, separately
compiled from individual SDN controllers, and efﬁciently
updates the composed rule table for a change in an input ta-
ble. However, composing high-level SDN policies in priori-
tized OpenFlow rules is inherently inefﬁcient; e.g., adding/re-
41moving an SDN app/controller would require re-computation
of the entire composed table in [24].
In PGA, incremen-
tal update of a composed graph per input graph join/leave/
change events is an easy extension. In addition, PGA can
use CoVisor to proactively compile OpenFlow rules for the
composed graph and to incrementally update the rule table.
10. CONCLUSION
PGA provides an intuitive graph abstraction to express
and compose policies. Users (or a policy authoring tool)
can simply walk through a composed graph to verify con-
nectivity and service chain requirements. PGA expresses
policies and resolves conﬂicts while minimizing operator in-
terventions. To our knowledge, PGA is the ﬁrst to model the
behavior of closed middleboxes and ensure their correct be-
havior in a service chain. Automatically combining multiple
service chains is another unique feature of PGA. As future
work, we plan to enhance PGA in a number of ways: e.g.,
when a large number of endpoints change their labels at the
same time, the PGA runtime should be able to update the
network in a scalable, responsive and consistent way. Sup-
porting HW/VM middleboxes, verifying their runtime be-
haviors and chaining them in more ﬂexible ways (e.g., asym-
metric forward/reverse) is additional future work.
11. ACKNOWLEDGEMENTS
We greatly appreciate Nate Foster (our shepherd) and the
anonymous reviewers for their insightful feedback. This
work is supported in part by National Science Foundation
(grants CNS-1302041, CNS-1330308 and CNS-1345249)
and the Wisconsin Institute on Software-Deﬁned Datacen-
ters of Madison.
12. REFERENCES
[1] Docker. https://github.com/docker/docker/issues/11187.
[2] Mininet. http://mininet.org/.
[3] NEMO (NEtwork MOdeling) Language.
http://www.hickoryhill-consulting.com/nemo/.
[4] Network Service Header.
https://tools.ietf.org/html/draft-quinn-sfc-nsh-07.
[5] Open Network Operating System (ONOS) Intent Framework.
https://wiki.onosproject.org/display/ONOS/The+Intent+Framework.
[6] OpenDaylight Group Policy.
https://wiki.opendaylight.org/view/Group_Policy:Main.
[7] Openstack Congress. https://wiki.openstack.org/wiki/Congress.
[8] Openstack Networking – Neutron.
https://wiki.openstack.org/wiki/Neutron.
[9] SELinux. http://selinuxproject.org/page/Main_Page.
[10] Service Function Chaining Architecture.
https://tools.ietf.org/html/draft-merged-sfc-architecture-02.
[11] Service Function Chaining General Use Cases.
https://tools.ietf.org/html/draft-liu-sfc-use-cases-08.
[12] C. J. Anderson, N. Foster, A. Guha, J.-B. Jeannin, D. Kozen,
C. Schlesinger, and D. Walker. NetKAT: Semantic Foundations for
Networks. In POPL, 2014.
[13] A. AuYoung, Y. Ma, S. Banerjee, J. Lee, P. Sharma, Y. Turner,
C. Liang, and J. C. Mogul. Democratic Resolution of Resource
Conﬂicts Between SDN Control Programs. In CoNEXT, 2014.
[14] M. Banikazemi et al. Meridian: an SDN platform for cloud network
services. Communications Magazine, IEEE, 51(2):120–127,
February 2013.
[15] P. Bonatti, S. de Capitani di Vimercati, and P. Samarati. A Modular
Approach to Composing Access Control Policies. In CCS, 2000.
[16] H. Edelsbrunner et al. Optimal Point Location in a Monotone
Subdivision. SIAM J. Comput., 15(2):317–340, May 1986.
[17] S. K. Fayaz and V. Sekar. Testing Stateful and Dynamic Data Planes
with FlowTest. In HotSDN, 2014.
[18] S. K. Fayazbakhsh, L. Chiang, V. Sekar, M. Yu, and J. C. Mogul.
Enforcing Network-wide Policies in the Presence of Dynamic
Middlebox Actions Using Flowtags. In NSDI, 2014.
[19] A. D. Ferguson, A. Guha, C. Liang, R. Fonseca, and
S. Krishnamurthi. Participatory Networking: An API for Application
Control of SDNs. In SIGCOMM, 2013.
[20] N. Foster, R. Harrison, M. J. Freedman, C. Monsanto, J. Rexford,
A. Story, and D. Walker. Frenetic: A Network Programming
Language. In ICFP, 2011.
[21] N. Foster, D. Kozen, M. Milano, A. Silva, and L. Thompson. A
Coalgebraic Decision Procedure for NetKAT. In POPL, 2015.
[22] A. Gember-Jacobson, R. Viswanathan, C. Prakash, R. Grandl,
J. Khalid, S. Das, and A. Akella. OpenNF: Enabling Innovation in
Network Function Control. In SIGCOMM, 2014.
[23] T. L. Hinrichs, N. S. Gude, M. Casado, J. C. Mitchell, and S. Shenker.
Practical Declarative Network Management. In WREN, 2009.
[24] X. Jin, J. Gossels, and D. Walker. CoVisor: A Compositional
Hypervisor for Software-Deﬁned Networks. In NSDI, 2015.
[25] D. Joseph and I. Stoica. Modeling Middleboxes. Netwrk. Mag. of
Global Internetwkg., 22(5):20–25, Sept. 2008.
[26] N. Kang, Z. Liu, J. Rexford, and D. Walker. Optimizing the "One Big
Switch" Abstraction in Software-deﬁned Networks. In CoNEXT,
2013.
[27] A. Khurshid, X. Zou, W. Zhou, M. Caesar, and P. B. Godfrey.
VeriFlow: Verifying Network-wide Invariants in Real Time. In NSDI,
2013.
[28] H. Kim, J. Reich, A. Gupta, M. Shahbaz, N. Feamster, and R. Clark.
Kinetic: Veriﬁable Dynamic Network Control. In NSDI, 2015.
[29] T. Koponen et al. Network Virtualization in Multi-tenant Datacenters.
In NSDI, 2014.
[30] J. Lee, Y. Turner, M. Lee, L. Popa, S. Banerjee, J.-M. Kang, and
P. Sharma. Application-driven Bandwidth Guarantees in Datacenters.
In SIGCOMM, 2014.
[31] L. Li et al. PACE: Policy-Aware Application Cloud Embedding. In
INFOCOM, 2013.
[32] H. H. Liu, S. Kandula, R. Mahajan, M. Zhang, and D. Gelernter.
Trafﬁc Engineering with Forward Fault Correction. In SIGCOMM,
2014.
[33] J. C. Mogul, A. AuYoung, S. Banerjee, L. Popa, J. Lee,
J. Mudigonda, P. Sharma, and Y. Turner. Corybantic: Towards the
Modular Composition of SDN Control Programs. In HotNets, 2013.
[34] C. Monsanto, J. Reich, N. Foster, J. Rexford, and D. Walker.
Composing Software Deﬁned Networks. In NSDI, 2013.
[35] T. Nelson, A. D. Ferguson, M. J. G. Scheer, and S. Krishnamurthi.
Tierless Programming and Reasoning for Software-deﬁned
Networks. In NSDI, 2014.
[36] C. Schlesinger, M. Greenberg, and D. Walker. Concurrent NetCore:
From Policies to Pipelines. In ICFP, 2014.
[37] J. Sherry et al. Making Middleboxes Someone else’s Problem:
Network Processing As a Cloud Service. SIGCOMM CCR,
42(4):13–24, Aug. 2012.
[38] R. Soulé, S. Basu, P. J. Marandi, F. Pedone, R. Kleinberg, E. G. Sirer,
and N. Foster. Merlin: A Language for Provisioning Network
Resources. In CoNEXT, 2014.
[39] P. Sun, R. Mahajan, J. Rexford, L. Yuan, M. Zhang, and A. Areﬁn. A
Network-state Management Service. In SIGCOMM, 2014.
[40] A. Verma, L. Pedrosa, M. Korupolu, D. Oppenheimer, E. Tune, and
J. Wilkes. Large-scale cluster management at Google with Borg. In
EuroSys, 2015.
[41] A. Voellmy, J. Wang, Y. R. Yang, B. Ford, and P. Hudak. Maple:
Simplifying SDN Programming Using Algorithmic Policies. In
SIGCOMM, 2013.
[42] D. M. Volpano, X. Sun, and G. G. Xie. Towards Systematic Detection
and Resolution of Network Control Conﬂicts. In HotSDN, 2014.
42