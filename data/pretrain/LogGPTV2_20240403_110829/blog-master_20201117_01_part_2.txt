```  
SELECT astext(atperiodset(trip, getTime(atValue(tdwithin(a.trip, b.geom, 30), TRUE))))  
FROM busTrip a, billboard b  
WHERE dwithin(a.trip, b.geom, 30)  
--{[POINT(651063.737915354 667183.840879818)@2020-04-21 08:38:12.507515+02,  
    POINT(651052.741845233 667213.026797244)@2020-04-21 08:38:31+02,  
    POINT(651042.581085347 667231.762425657)@2020-04-21 08:38:38.929465+02]}  
```  
您需要了解有关上面的MobilityDB查询的什么：  
该表busTrip具有类型为的属性行tgeompoint。这是用于存储完整轨迹的MobilityDB类型。  
的嵌套tdwithin->atValue->getTime将返回公交车距广告牌30米以内的时间段。  
该功能atperiodset将仅将总线行程限制在这些时间段内。  
该函数astext将输出中的坐标转换为文本格式。  
因此，结果显示了公交旅行的一部分，该部分始于```2020-04-21 08：38：12.507515 + 02```，结束于```08：38：38.929465 + 02```。  
该MobilityDB文档描述了所有MobilityDB的操作。  
现在我们退后一步，并显示busTrip表的创建。  
```  
CREATE EXTENSION MobilityDB CASCADE;  
CREATE TABLE busTrip(tripID, trip) AS  
  SELECT tripID,tgeompointseq(array_agg(tgeompointinst(geom, t) ORDER BY t))  
FROM gpsPoint  
GROUP BY tripID;  
--SELECT 2  
--Query returned successfully in 78 msec.  
SELECT tripID, astext(trip) FROM busTrip;  
1    "[POINT(651096.993815166 667028.114604598)@2020-04-21 08:37:27+02,  
       POINT(651080.424535144 667123.352304597)@2020-04-21 08:37:39+02,  
       POINT(651067.607438095 667173.570340437)@2020-04-21 08:38:06+02,  
       POINT(651052.741845233 667213.026797244)@2020-04-21 08:38:31+02,  
       POINT(651029.676773636 667255.556944161)@2020-04-21 08:38:49+02,  
       POINT(651018.401101238 667271.441380755)@2020-04-21 08:39:08+02]"  
2    "[POINT(651201.431447782 667089.682115196)@2020-04-21 08:38:36+02,  
       POINT(651186.853162155 667091.138189286)@2020-04-21 08:38:43+02,  
       POINT(651181.995412783 667077.531372716)@2020-04-21 08:38:49+02,  
       POINT(651101.820139904 667041.076539663)@2020-04-21 08:38:56+02,  
       POINT(651262.17004873  667119.331513367)@2020-04-21 08:39:29+02]"  
```  
上面的第一步是在数据库中创建MobilityDB扩展。在Postgres中，该CASCADE选项导致对所有依赖项执行相同的语句。在上面的查询中（因为PostGIS是MobilityDB的依赖项）CASCADE，如果尚未创建PostGIS扩展，还将创建PostGIS扩展。  
上面的第二个查询创建busTrip具有两个属性的表(tripID int, trip tgeompoint)。tgeompoint是表示运动轨迹的MobilityDB类型。该tgeompoint属性是根据时间排序的瞬时数组构造的，每个瞬时实例都是一对空间点和一个时间戳。在上面的查询中，通过嵌套来表达这种构造tgeompointinst -> array_agg -> tgeompointseq。  
SELECT上面的最后一个查询显示该busTrip表包含两个元组，分别对应于两个行程。每次旅行都有格式[point1@time1, point2@time2, ...]。  
比大象大：当单个Postgres节点无法执行时，如何按比例查询运动轨迹  
由于我们现在有两种可行的解决方案来衡量广告牌的可见性：一种是在PostGIS中，另一种是在MobilityDB中，下一步自然是将这些解决方案应用到一个大型数据库中，该数据库包含去年布鲁塞尔所有公交车次以及布鲁塞尔 总计约有500万次公交旅行（约50亿个GPS点）和数千个广告牌。这个大小超出了单个Postgres节点可以处理的大小。因此，我们需要分发Postgres数据库。  
这是Citus的工作，Citus是Postgres的扩展，它将Postgres转换为分布式数据库。有效地与许多CTE一起分发复杂的PostGIS查询是我们要交给Citus工程团队的挑战。  
我要在这里讨论的是MobilityDB查询的分布。Citus不知道MobilityDB的类型和操作。因此，分发受到Citus通常对自定义类型和功能的限制。我的同事Mohamed Bakli进行了此评估，并在ACM BigSpatial研讨会（预印本）的题为“ MobilityDB中的分布式移动对象数据管理”的论文中以及在题为“ MobilityDB中的Distributed Mobility Data Management”的演示论文中发表了此评估。 IEEE MDM会议（预印本）。  
论文提出了使用Citus分发MobilityDB的解决方案。Citus数据库集群中的所有节点都安装了PostgreSQL，PostGIS，MobilityDB和Citus。目的是评估MobilityDB中的时空功能可以分布到什么程度。  
为了进行此评估，使用了BerlinMOD基准（一种用于比较运动对象数据库的工具）。BerlinMOD由轨迹数据生成器和17个基准测试查询组成，这些查询评估运动对象数据库系统的功能。无需特殊定制，就可以在由Citus管理的MobilityDB数据库集群上执行17个BerlinMOD基准查询中的13个。  
另请参阅Nils Dijk撰写的有关在Citus和Postgres中使用自定义类型的精彩博客文章。  
返回我们的MobilityDB广告牌可见性查询，我们的任务是计算布鲁塞尔一年中所有广告牌和所有普通运输车辆的广告牌可见性。  
我们已经建立了一个Citus数据库集群，并在其所有节点中创建了MobilityDB扩展。然后，我们使用Cituscreate_distributed_table函数将busTrip表分布在Citus数据库集群中的所有工作节点上。接下来，我们将布告栏表制作为Citus参考表，然后将参考表复制到所有工作节点。  
这是生成的分布式查询计划：  
```  
EXPLAIN  
SELECT atperiodset(trip, getTime(atValue(tdwithin(a.trip, b.geom, 30), TRUE)))  
FROM busTrip a, billboard b  
WHERE dwithin(a.trip, b.geom, 30);  
Query plan  
----------------------------------------------------------------------------------------  
Custom Scan (Citus Adaptive)  (cost=0.00..0.00 rows=100000 width=32)  
  Task Count: 32  
  Tasks Shown: One of 32  
  ->  Task  
      Node: host=10.140.135.15 port=5432 dbname=roma  
      ->  Nested Loop  (cost=0.14..41.75 rows=1 width=32)  
          ->  Seq Scan on provinces_dist_102840 b (cost=0.00..7.15 rows=15 width=32)  
          ->  Index Scan using spgist_bustrip_idx_102808 on bustrip_hash_tripid_102808 a  
              (cost=0.14..2.30 rows=1 width=32)  
              Index Cond: (trip && st_expand(b.geom, '30'::double precision))  
              Filter: _dwithin(trip, b.geom, '30'::double precision)  
```  
该西特斯分布式查询执行并行化在西特斯集群中的所有工作人员查询。每个节点还具有MobilityDB扩展名，这意味着我们可以dwithin在查询和索引中使用MobilityDB函数。例如，在这里，我们看到Citus worker上的SP-GiST索引用于有效评估该WHERE dwithin(...)子句。  
这样，我们到了这篇文章的结尾。总结起来，这篇文章有两个主要内容：  
如果您想分析运动轨迹以了解事物在空间和时间上的时空相互作用，那么您现在在Postgres和PostGIS工具箱中有一些新的（开源！）选项：  
MobilityDB可以帮助您管理和分析PostgreSQL中的地理空间（例如GPS，雷达）运动轨迹。  
MobilityDB + Citus开源可立即使用，因此您也可以大规模分析地理空间运动轨迹。只需将两个Postgres扩展名（连同PostGIS）一起添加到Postgres数据库中，就可以管理大型地理空间轨迹数据集了。  
脚注  
对这些数据的来源感到好奇吗？轨迹是在布鲁塞尔的71号线驶入我的大学校园ULB Solbosch时的轨迹。布鲁塞尔的公共交通公司发布了一个开放的API，可以在https://opendata.stib-mivb.be中探测其车辆的所有轨迹。广告牌位置是我发明的，背景图来自Openstreetmap。↩  
它仍然需要计算可见性持续时间，即两个时间戳之间的秒数差，这可以由另一个CTE和窗口函数来完成。为了不进一步使查询复杂化，我们在此跳过此细节。  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")