---
author: Julia Evans
category: 观点
comments_data:
- date: '2023-05-30 19:31:14'
  message: Great!
  postip: 211.83.126.210
  username: 来自四川成都四川大学的 Firefox 31.0|GNU/Linux 用户
- date: '2023-06-01 16:48:46'
  message: Great!
  postip: 219.217.246.58
  username: 来自黑龙江哈尔滨哈尔滨工业大学的 Firefox 114.0|GNU/Linux 用户
count:
  commentnum: 2
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 3276
date: '2023-05-30 11:54:13'
editorchoice: false
excerpt: 为什么 x86 架构使用 8 位字节？为什么不能是其他大小呢？
fromurl: https://jvns.ca/blog/2023/03/06/possible-reasons-8-bit-bytes/
id: 15861
islctt: true
largepic: /data/attachment/album/202305/30/115011gak5kqzsx3gfi2ud.jpg
permalink: /article-15861-1.html
pic: /data/attachment/album/202305/30/115011gak5kqzsx3gfi2ud.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lkxed
summary: 为什么 x86 架构使用 8 位字节？为什么不能是其他大小呢？
tags:
- 字节
- 架构
thumb: false
title: 为什么计算机采用 8 位字节
titlepic: true
translator: ChatGPT
updated: '2023-05-30 11:54:13'
---
![](/data/attachment/album/202305/30/115011gak5kqzsx3gfi2ud.jpg)
我正在制作一份有关计算机以二进制表示事物的小册子，有人问我一个问题 - 为什么 x86 架构使用 8 位字节？为什么不能是其他大小呢？
对于类似这样的问题，我认为有两种可能性：
* 这是历史原因造成的，其他尺寸（如 4、6 或 16 位）同样有效。
* 8 位是客观上的最佳选择，即使历史发展不同，我们仍然会使用 8 位字节。
* 一些混合 1 和 2 的因素。
我对计算机历史并不是非常着迷（与阅读计算机文献相比，我更喜欢使用计算机），但我总是很好奇计算机事物今天的方式是否存在本质原因，或者它们大多是历史偶然的结果。因此，我们将谈论一些计算机历史。
作为历史偶然性的一个例子：DNS 有一个 `class` 字段，它有 5 种可能的值（`internet`、`chaos`、`hesiod`、`none` 和 `any`）。 对我来说，这是一个明显的历史意外的例子 - 如果我们今天重新设计 DNS 而不必担心向后兼容性，我无法想象我们会以相同的方式定义类字段。我不确定我们是否会使用 `class` 字段！
这篇文章没有明确的答案，但我在 [Mastodon](https://social.jvns.ca/@b0rk/109976810279702728) 上提问，并找到了一些潜在的 8 位字节原因。我认为答案是这些原因的某种组合。
#### 字节和字有什么区别？
首先，本文中经常提到 “ 字节   byte ” 和 “ 字   word ”。它们有什么区别？我的理解是：
* **字节的大小** 是你可以寻址的最小单元。例如，在我的计算机上，程序中的 `0x20aa87c68` 可能是一个字节的地址，然后 `0x20aa87c69` 是下一个字节的地址。
* **字的大小** 是字节大小的某个倍数。我对此困惑了多年，维基百科的定义非常模糊（“字是特定处理器设计使用的自然数据单元”）。我最初认为字大小与寄存器大小相同（在 x86-64 上为 64 位）。但是根据 [英特尔架构手册](https://www.intel.com/content/www/us/en/developer/articles/technical/intel-sdm.html) 的第 4.1 节（“基本数据类型”），在 x86 上，虽然寄存器是 64 位的，但一个字是 16 位的。因此我困惑了 —— 在 x86 上，一个字是 16 位还是 64 位？它可以根据上下文而有不同的含义吗？这是怎么回事？
现在让我们来讨论一些使用 8 位字节的可能原因！
#### 原因 1：将英文字母适配到 1 字节中
[维基百科文章](https://en.wikipedia.org/wiki/IBM_System/360) 表示 IBM System/360 于 1964 年引入了 8 位字节。
在管理该项目的 Fred Brooks 的一段 [视频采访](https://www.youtube.com/watch?v=9oOCrAePJMs&t=140s) 中，他讲述了原因。以下是我转录的一些内容：
> 
> …… 6 位字节在科学计算中确实更好，而 8 位字节则更适合商业计算，每个字节都可以针对另一个字节进行调整，以使两种字节互相使用。
> 
> 
> 因此，这变成了一个高管决策，我决定根据 Jerry 的建议采用 8 位字节。
> 
> 
> ……
> 
> 
> 我在我的 IBM 职业生涯中做出的最重要的技术决策是为 360 选择 8 位字节。
> 
> 
> 我相信字符处理将变得重要，而不是十进制数字。
> 
> 
> 
使用 8 位字节处理文本很有道理：2 6 为 64，因此 6 位不足以表示小写字母、大写字母和符号。
为了使用 8 位字节，System/360 还引入了 [EBCDIC 编码](https://en.wikipedia.org/wiki/EBCDIC)，这是一种 8 位字符编码。
接下来在 8 位字节历史上重要的机器似乎是 [英特尔 8008](https://en.wikipedia.org/wiki/Intel_8008)，它设计用于计算机终端（Datapoint 2200）。终端需要能够表示字母以及终端控制代码，因此使用 8 位字节对其来说很有意义。[计算机历史博物馆上的 Datapoint 2200 手册](https://archive.computerhistory.org/resources/text/2009/102683240.05.02.acc.pdf) 在第 7 页上说 Datapoint 2200 支持 ASCII（7 位）和 EBCDIC（8 位）。
#### 为什么 6 位字节在科学计算中更好？
我对这条 “6 位字节在科学计算中更好” 的评论很好奇。以下是 [Gene Amdahl 的一段采访摘录](https://archive.computerhistory.org/resources/access/text/2013/05/102702492-05-01-acc.pdf)：
> 
> 我原本希望采用 24 和 48 而非 32 和 64，因为这将为我提供一个更合理的浮点系统。因为在浮点运算中，使用 32 位字大小时，你必须将指数保持在 8 位中用于指数符号，并且要使其在数字范围上合理，你必须每次调整 4 个位而不是单个位。因此，这将导致你比使用二进制移位更快地失去一些信息。
> 
> 
> 
我完全不理解这条评论 - 如果你使用 32 位字大小，为什么指数必须是 8 位？如果你想要，为什么不能使用 9 位或 10 位？但这是我在快速搜索中找到的全部内容。
#### 为什么大型机使用 36 位？
与 6 位字节相关的问题是：许多大型机使用 36 位字大小。为什么？在维基百科的 [36 位计算](https://en.wikipedia.org/wiki/36-bit_computing) 文章中有一个很好的解释：
> 
> 在计算机问世之前，即需要高精度科学和工程运算的领域，使用的是十位数码电动机械计算器……这些计算器每位数码均有一个专用按键，操作人员在输入数字时需要用到所有手指，因此，虽然有些专业计算器有更多位数码，但这种情况是个实际的限制。
> 
> 
> 因此，早期针对相同市场的二进制计算机通常使用 36 位字长度。这足以表示正负整数最高精度到十位数字（最小应为 35 位）。
> 
> 
> 
因此，这种 36 位大小似乎是基于
![](/data/attachment/album/202305/30/115207f4m55ct36z7knz4k.png)
的，它等于 34.2。嗯。
我猜这个原因是在 50 年代，计算机非常昂贵。因此，如果您想要你的计算机支持十位十进制数字，你将设计它恰好具有足够的位来执行此操作，而不会更多。
现在计算机更快更便宜，因此，如果您想要出于某种原因表示十位十进制数字，你只需使用 64 位即可 - 浪费一点空间通常并不会有太大问题。