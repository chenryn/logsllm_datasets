# Title: On the Selection of Error Model(s) for OS Robustness Evaluation

## Authors
Andréas Johansson, Neeraj Suri, and Brendan Murphy

## Abstract
The choice of error model used for robustness evaluation of Operating Systems (OSs) significantly influences the evaluation runtime, implementation complexity, and precision. This paper systematically compares the effectiveness of three prominent error models—bit-flips, data type errors, and fuzzing errors—using fault injection at the interface between device drivers and the OS. Bit-flips, while more time-consuming, provide detailed results. Fuzzing is easier to implement but less precise. A composite error model is introduced, combining the low cost of fuzzing with the high detail of bit-flips, resulting in high precision with moderate setup and execution costs.

## 1. Introduction
This paper focuses on evaluating the robustness of OSs to errors in device drivers. While several studies have used fault injection for OS robustness, their results are often specific to the underlying error model. The choice of error model and the location of injection directly influence the accuracy and usefulness of the results.

We compare the relative effectiveness of three distinct error models at the OS-Driver interface, chosen for its universality, documentation, and accessibility. The error models are evaluated based on efficiency (cost and coverage), implementation complexity, and execution time. We also propose a new composite error model that combines the benefits of the individual models. The results of this evaluation are useful for system design, identifying hot-spots, and component evaluation, without requiring access to source code. Experimental quantitative approaches, like this one, complement analytical methods and provide a means to quantify the dynamic behavior of the system under study.

The chosen error models include:
- **Bit-Flips (BF)**: Flipping a bit in a data word from 0 to 1 or vice versa.
- **Data Type-Based Corruption (DT)**: Changing the value of a parameter in a function call according to its data type, often to boundary values.
- **Fuzzing (FZ)**: Assigning a randomly chosen value to a parameter in a function call.

### Paper Contributions & Structure
Selecting an effective error model for a particular setting is not straightforward, and guidelines are valuable for both OS designers and evaluators. Building on previous experiences, this paper provides a step towards such guidelines. Using a case study based on Windows CE .NET and three different drivers (serial, network, and storage card drivers), the paper makes two key contributions:
1. A comparative study of error model effectiveness in terms of coverage and cost.
2. Establishing the effectiveness of using a composite error model for OS robustness evaluation.

The paper is structured as follows:
- **Prerequisites**: System model [Section 2], background on error models [Section 3], and evaluation criteria [Section 4].
- **Implementation**: Target system and experimental technique [Section 5].
- **Results**: Results from fault-injection experiments [Section 6] with interpretations [Section 7].
- **Composite Model**: Definition and results for the composite error model [Section 8], and discussion and summary of findings [Section 9].

## 2. System Model
We use a four-layered model of the OS: Application, OS, Driver, and Hardware layers. This model applies to most common monolithic OSs, such as Windows, UNIX, and Linux. The OS-Driver interface (Figure 1) is our target of study.

### 3. Error Models
#### 3.1. Bit-Flip Error Model
A system with N drivers (D1, ..., DN) is considered. Each driver exports and imports a set of services. Errors are observed at the OS-Application interface by instrumenting benchmark applications with assertions. Only the interface specifications (OS-Driver and OS-Application) are required, but no source code is needed for the drivers or the OS itself. Access to the source code of the benchmark applications is necessary for instrumentation.

#### 3.2. Data Type Error Model
Data type errors are chosen based on the data type of the targeted parameter. For C-language interfaces, we consider C-style data types. Test values, offset values, and boundary values are predefined for each type. This model belongs to the Assignment class of ODC, though it can also be a Checking defect.

#### 3.3. Fuzzing Error Model
Fuzzing assigns a pseudo-random value from the set of legal values for the type. The pseudo-random values are generated using the `rand()` C-runtime function, with the last value stored for the next round to ensure different random values are used each time.

### 4. Comparative Evaluation Criteria
The error models are evaluated based on:
- **Error Propagation (Diffusion)**: The degree to which a driver can spread errors in the system.
- **Error Impact (Failure Class)**: The severity of the impact of a propagated error.
- **Implementation Complexity**.
- **Execution Time**.

#### 4.1. Error Propagation Criteria (Diffusion)
Diffusion is defined as the sum of conditional probabilities for an error to propagate, given that an error exists. It allows drivers to be compared and ranked, helping system evaluators/designers decide where to allocate testing and quality improvement resources.

#### 4.2. Error Impact Criteria (Failure Class)
Failure mode analysis is used to determine the impact of a propagated error. Four failure classes are defined, ranging from no discernible violation to the OS becoming unresponsive.

## 5. Implementation
### 5.1. Target System and Experimental Technique
The target system is Windows CE .NET, and the experimental technique involves fault injection at the OS-Driver interface. Detailed descriptions of the setup and techniques are provided in Section 5.

## 6. Results
### 6.1. Fault-Injection Experiments
Results from fault-injection experiments are presented, including the number of injections, error propagation, and failure modes. Interpretations of these results are discussed in Section 7.

## 7. Composite Model
### 7.1. Definition and Results
A composite error model is defined, combining the low cost of fuzzing with the high detail of bit-flips. The results show that this model achieves high precision with moderate setup and execution costs. A summary of the main findings is provided in Section 9.

## 8. Discussion and Summary
The paper concludes with a discussion of the main findings and their implications for OS robustness evaluation. The composite error model is shown to be effective, providing a balanced approach to robustness evaluation.

---

This optimized version of the text is more coherent, professional, and clearly structured, making it easier to understand and follow.