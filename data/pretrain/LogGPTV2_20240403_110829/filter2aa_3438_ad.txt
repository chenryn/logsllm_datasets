a031
...
0a97
0005
a031
...
c145
0001
a031
...
9a05
0001
a031
...
3a85
0005
a031
...
ba86
0005
a031
...
4041
0001
a031
...
a287
0005
a031
...
9183
0001
a031
...
0905
0001
a031
...
3d8c
005e
a031
...
00c3
0001
a031
...
0507
0005
a031
...
f915
0001
a031
...
c1f1
02f2
a031
...
0f10 0000
a031
...
8296
0003
a031
...
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
32 / 42
0f10 0000
a031
...
7d77
0005
a031
...
0a97
0005
a031
...
c145
0001
a031
...
9a05
0001
a031
...
3a85
0005
a031
...
ba86
0005
a031
...
4041
0001
a031
...
...
c1f1
02f2
a031
...
0f10 0000
a031
...
8296
0003
a031
...
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
32 / 42
The stage 2
0f10 0000
a031
...
7d77
0005
a031
...
0a97
0005
a031
...
c145
0001
a031
...
9a05
0001
a031
...
3a85
0005
a031
...
ba86
0005
a031
...
4041
0001
a031
...
...
c1f1
02f2
a031
...
0f10 0000
a031
...
8296
0003
a031
...
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
32 / 42
The stage 2
0f10 0000
jmp 12
...
7d77
0005
jmp 12
...
0a97
0005
jmp 12
...
c145
0001
jmp 12
...
9a05
0001
jmp 12
...
3a85
0005
jmp 12
...
ba86
0005
jmp 12
...
4041
0001
jmp 12
...
...
c1f1
02f2
jmp 12
...
0f10 0000
jmp 12
...
8296
0003
jmp 12
...
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
32 / 42
The stage 2
0f10 0000
jmp 12
...
7d77
c.nop 1
jmp 12
...
0a97
c.nop 1
jmp 12
...
c145
nop
jmp 12
...
9a05
nop
jmp 12
...
3a85
c.nop 1
jmp 12
...
ba86
c.nop 1
jmp 12
...
4041
nop
jmp 12
...
...
c1f1
slli t0,t0,0x1c
jmp 12
...
0f10 0000
jmp 12
...
8296
n/a
jmp 12
...
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
32 / 42
The stage 2
fence.i
jmp 12
...
lui a4,0xfffff
c.nop 1
jmp 12
...
add a4,a4,sp
c.nop 1
jmp 12
...
li a1,16
nop
jmp 12
...
slli a1,a1,0x6
nop
jmp 12
...
mv a0,a4
c.nop 1
jmp 12
...
mv a3,a4
c.nop 1
jmp 12
...
lw s0,4(a0)
nop
jmp 12
...
...
bnez a1,-256
slli t0,t0,0x1c
jmp 12
...
fence.i
jmp 12
...
jalr a3
n/a
jmp 12
...
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
32 / 42
http://givemerootaccess/: /Demo
/demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo
/demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo
/demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo
/demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo
/demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo
/demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo
/demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo
/demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo
/demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo
/demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo
/demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo
/demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo
/demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo
/demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo
/demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
33 / 42
Fish’n’chips: Floating points for a ticking bomb
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
34 / 42
Fish’n’chips: Floating points for a ticking bomb
´ (tick) gives us ﬂoating point stores!
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
34 / 42
Fish’n’chips: Adapt our architecture
Stage 1
init
forward jump
encoded payload
Penc
Unpacker U
Stage 2
(unpacked by U)
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
35 / 42
Fish’n’chips: Adapt our architecture
63
52
0
Sign
Exponent
Mantissa
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
36 / 42
Fish’n’chips: Adapt our architecture
63
52
0
Sign
Exponent
Mantissa
F = ±mantissa ◊ 2exponent
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
36 / 42
Fish’n’chips: Adapt our architecture
63
52
0
Sign
Exponent
Mantissa
F = ±mantissa ◊ 2exponent
⌅ Load some ﬂoating point value from memory into a register
(alphanumeric binary representation)
⌅ Do some computation
⌅ Register now contains a chunk of our Stage 2,
store it to memory
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
36 / 42
Fish’n’chips: Adapt our architecture
63
52
0
Sign
Exponent
Mantissa
F = ±mantissa ◊ 2exponent
⌅ Load some ﬂoating point value from memory into a register
(alphanumeric binary representation)
⌅ Do some computation
⌅ Register now contains a chunk of our Stage 2,
store it to memory
Some?
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
36 / 42
Fish’n’chips: What are our tools?
⌅ Floating point loads
fld
⌅ Floating point stores
fsw, fsd, fsq
⌅ Quad to double conversion
fcvt.d.q
⌅ Sign manipulation
fabs.q, fsgnjx.q
⌅ Fused multiply-add variants
fmadd, fmsub, fmnadd, fmnsub
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
37 / 42
Fish’n’chips: What are our tools?
⌅ Floating point loads
fld
⌅ Floating point stores
fsw, fsd, fsq
⌅ Quad to double conversion
fcvt.d.q
⌅ Sign manipulation
fabs.q, fsgnjx.q
⌅ Fused multiply-add variants
fmadd, fmsub, fmnadd, fmnsub
Fused multiply add
R := ±A ◊ B ± C
fmsub.d ft6, fs2, ft4, fa0
ft6 := fs2 ◊ ft4 ≠ fa0
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
37 / 42
Fish’n’chips: Arbitrary binary values
We want to store 0xABCD
FMA
A
B
C
R
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
38 / 42
Fish’n’chips: Arbitrary binary values
We want to store 0xABCD
1. Fix A
(for whole Stage 1)
FMA
A1UUUUUU
A
0x4131555555555555
B
C
R
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
38 / 42
Fish’n’chips: Arbitrary binary values
We want to store 0xABCD
1. Fix A
(for whole Stage 1)
2. Bruteforce on multiplication
(Draw randomized B’s)
FMA
A1UUUUUU
A
0x4131555555555555
A1QOZ9p1
B
0x4131514f5a397031
C
R
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
38 / 42
Fish’n’chips: Arbitrary binary values
We want to store 0xABCD
1. Fix A
(for whole Stage 1)
2. Bruteforce on multiplication
(Draw randomized B’s)
3. Solve on addition
(÷ an alnum C?)
FMA
A1UUUUUU
A
0x4131555555555555
A1QOZ9p1
B
0x4131514f5a397031
Bbz
C
0x42627a7ebc84e484
R
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
38 / 42
Fish’n’chips: Arbitrary binary values
We want to store 0xABCD
1. Fix A
(for whole Stage 1)
2. Bruteforce on multiplication
(Draw randomized B’s)
3. Solve on addition
(÷ an alnum C?)
FMA
A1UUUUUU
A
0x4131555555555555
A1ViCkaB
B
0x41315669436b6142
C
R
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
38 / 42
Fish’n’chips: Arbitrary binary values
We want to store 0xABCD
1. Fix A
(for whole Stage 1)
2. Bruteforce on multiplication
(Draw randomized B’s)
3. Solve on addition
(÷ an alnum C?)
FMA
A1UUUUUU
A
0x4131555555555555
A1ViCkaB
B
0x41315669436b6142
BboqCCZ6
C
0x42626f7143435a36
R
0x427c00000000abcd
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
38 / 42
Fish’n’chips: Arbitrary binary values
We want to store 0xABCD
1. Fix A
(for whole Stage 1)
2. Bruteforce on multiplication
(Draw randomized B’s)
3. Solve on addition
(÷ an alnum C?)
Great news
We get all 16 bit values!
FMA
A1UUUUUU
A
0x4131555555555555
A1ViCkaB
B
0x41315669436b6142
BboqCCZ6
C
0x42626f7143435a36
R
0x427c00000000abcd
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
38 / 42
Fish’n’chips: Arbitrary binary values
We want to store 0xABCD
1. Fix A
(for whole Stage 1)
2. Bruteforce on multiplication
(Draw randomized B’s)
3. Solve on addition
(÷ an alnum C?)
Great news
We get all 16 bit values!
Greater news
We get all 48 bit values!
FMA
A1UUUUUU
A
0x4131555555555555
A1ViCkaB
B
0x41315669436b6142
BboqCCZ6
C
0x42626f7143435a36
R
0x427c00000000abcd
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
38 / 42
Fish’n’chips: ’Demo
’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo
’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo
’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo
’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo
’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo
’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo
’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo
’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo
’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo
’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo
’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo
’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo
’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo
’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo
’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo ’demo
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
39 / 42
666. Conclusion
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
40 / 42
Conclusion
a. The yoga of writing constrained shellcodes
I Avoid ﬁlters, fool IDS and humans, target speciﬁc apps
I x86/x86 64 has a mature tooling environment, but it’s mostly laptops/servers
b. RISC-V is gaining momentum and we need to keep up
I We show that it is possible to write alphanumeric (with #, /, or ’) shellcodes
even on very constrained instruction sets
I Automatically. For arbitrary shellcodes.
c. More than tricks and techniques
I The methods can be transported to other architectures, everything is detailed
in the paper “RISC-V: #AlphanumericShellcoding”, all the code is open source
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
41 / 42
That’s all folks
Now get hashing and slashing and ticking for fun and proﬁt!
Code and documentation on:
https://xn--fda.fr/riscv-alphanumeric-shellcoding/
Short link: bit.do/riscv
Your friendly neighbourhood hackers
PI:EMAIL
PI:EMAIL
PI:EMAIL
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
42 / 42