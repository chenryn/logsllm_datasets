### The ABC of Next-Gen Shellcoding @ DEF CON 27
**Date:** 11 Aug 2019  
**Slide Number:** 32 / 42

---

#### Stage 2

```
0f10 0000
a031
...
7d77
0005
a031
...
0a97
0005
a031
...
c145
0001
a031
...
9a05
0001
a031
...
3a85
0005
a031
...
ba86
0005
a031
...
4041
0001
a031
...
...
c1f1
02f2
a031
...
0f10 0000
a031
...
8296
0003
a031
...
```

---

### The ABC of Next-Gen Shellcoding @ DEF CON 27
**Date:** 11 Aug 2019  
**Slide Number:** 32 / 42

#### Stage 2

```
jmp 12
...
7d77
0005
jmp 12
...
0a97
0005
jmp 12
...
c145
0001
jmp 12
...
9a05
0001
jmp 12
...
3a85
0005
jmp 12
...
ba86
0005
jmp 12
...
4041
0001
jmp 12
...
...
c1f1
02f2
jmp 12
...
0f10 0000
jmp 12
...
8296
0003
jmp 12
...
```

---

### The ABC of Next-Gen Shellcoding @ DEF CON 27
**Date:** 11 Aug 2019  
**Slide Number:** 32 / 42

#### Stage 2

```
jmp 12
...
7d77
c.nop 1
jmp 12
...
0a97
c.nop 1
jmp 12
...
c145
nop
jmp 12
...
9a05
nop
jmp 12
...
3a85
c.nop 1
jmp 12
...
ba86
c.nop 1
jmp 12
...
4041
nop
jmp 12
...
...
c1f1
slli t0,t0,0x1c
jmp 12
...
0f10 0000
jmp 12
...
8296
n/a
jmp 12
...
```

---

### The ABC of Next-Gen Shellcoding @ DEF CON 27
**Date:** 11 Aug 2019  
**Slide Number:** 32 / 42

#### Stage 2

```
fence.i
jmp 12
...
lui a4,0xfffff
c.nop 1
jmp 12
...
add a4,a4,sp
c.nop 1
jmp 12
...
li a1,16
nop
jmp 12
...
slli a1,a1,0x6
nop
jmp 12
...
mv a0,a4
c.nop 1
jmp 12
...
mv a3,a4
c.nop 1
jmp 12
...
lw s0,4(a0)
nop
jmp 12
...
...
bnez a1,-256
slli t0,t0,0x1c
jmp 12
...
fence.i
jmp 12
...
jalr a3
n/a
jmp 12
...
```

---

### The ABC of Next-Gen Shellcoding @ DEF CON 27
**Date:** 11 Aug 2019  
**Slide Number:** 32 / 42

#### Demo

```
http://givemerootaccess/: /Demo
/demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo
/demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo
/demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo
/demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo
/demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo
/demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo
/demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo
/demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo
/demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo
/demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo
/demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo
/demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo
/demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo
/demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo /demo
```

---

### The ABC of Next-Gen Shellcoding @ DEF CON 27
**Date:** 11 Aug 2019  
**Slide Number:** 33 / 42

#### Fish’n’chips: Floating points for a ticking bomb

---

### The ABC of Next-Gen Shellcoding @ DEF CON 27
**Date:** 11 Aug 2019  
**Slide Number:** 34 / 42

#### Fish’n’chips: Floating points for a ticking bomb

- **(tick)** gives us floating point stores!

---

### The ABC of Next-Gen Shellcoding @ DEF CON 27
**Date:** 11 Aug 2019  
**Slide Number:** 35 / 42

#### Fish’n’chips: Adapt our architecture

- **Stage 1:**
  - Init
  - Forward jump
  - Encoded payload (Penc)
  - Unpacker (U)
- **Stage 2:**
  - (Unpacked by U)

---

### The ABC of Next-Gen Shellcoding @ DEF CON 27
**Date:** 11 Aug 2019  
**Slide Number:** 36 / 42

#### Fish’n’chips: Adapt our architecture

- **Floating Point Representation:**
  - Sign (Bit 63)
  - Exponent (Bits 52-62)
  - Mantissa (Bits 0-51)
  - Formula: \( F = \pm \text{mantissa} \times 2^{\text{exponent}} \)

- **Steps:**
  - Load a floating-point value from memory into a register.
  - Perform some computation.
  - Store the result in memory, which now contains a chunk of Stage 2.

---

### The ABC of Next-Gen Shellcoding @ DEF CON 27
**Date:** 11 Aug 2019  
**Slide Number:** 37 / 42

#### Fish’n’chips: What are our tools?

- **Floating Point Loads:**
  - `fld`
- **Floating Point Stores:**
  - `fsw`, `fsd`, `fsq`
- **Quad to Double Conversion:**
  - `fcvt.d.q`
- **Sign Manipulation:**
  - `fabs.q`, `fsgnjx.q`
- **Fused Multiply-Add Variants:**
  - `fmadd`, `fmsub`, `fmnadd`, `fmnsub`

- **Example: Fused Multiply-Add (FMA)**
  - \( R := \pm A \times B \pm C \)
  - Example: `fmsub.d ft6, fs2, ft4, fa0` results in \( ft6 := fs2 \times ft4 - fa0 \)

---

### The ABC of Next-Gen Shellcoding @ DEF CON 27
**Date:** 11 Aug 2019  
**Slide Number:** 38 / 42

#### Fish’n’chips: Arbitrary binary values

- **Objective:** Store `0xABCD`
- **Steps:**
  1. Fix `A` (for the entire Stage 1).
  2. Bruteforce on multiplication (randomized `B`).
  3. Solve on addition (find an alphanumeric `C`).

- **Example:**
  - `A`: `0x4131555555555555`
  - `B`: `0x41315669436b6142`
  - `C`: `0x42626f7143435a36`
  - Result: `R = 0x427c00000000abcd`

- **Great News:**
  - We can get all 16-bit and 48-bit values using this method.

---

### The ABC of Next-Gen Shellcoding @ DEF CON 27
**Date:** 11 Aug 2019  
**Slide Number:** 39 / 42

#### Fish’n’chips: 'Demo

```
'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo
'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo
'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo
'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo
'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo
'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo
'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo
'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo
'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo
'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo
'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo
'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo
'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo
'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo
'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo 'demo
```

---

### The ABC of Next-Gen Shellcoding @ DEF CON 27
**Date:** 11 Aug 2019  
**Slide Number:** 40 / 42

#### Conclusion

- **The Yoga of Writing Constrained Shellcodes:**
  - Avoid filters, fool IDS, and target specific applications.
  - x86/x86_64 has mature tooling, but it's mostly used for laptops and servers.

- **RISC-V is Gaining Momentum:**
  - It is possible to write alphanumeric shellcodes (with `#`, `/`, or `'`) even on very constrained instruction sets.
  - Automatically generate arbitrary shellcodes.

- **More Than Tricks and Techniques:**
  - These methods can be applied to other architectures.
  - Detailed in the paper "RISC-V: #AlphanumericShellcoding."
  - All code is open source.

---

### The ABC of Next-Gen Shellcoding @ DEF CON 27
**Date:** 11 Aug 2019  
**Slide Number:** 41 / 42

#### That’s All Folks

- **Get hashing and slashing and ticking for fun and profit!**
- **Code and documentation available at:**
  - [https://xn--fda.fr/riscv-alphanumeric-shellcoding/](https://xn--fda.fr/riscv-alphanumeric-shellcoding/)
  - Short link: [bit.do/riscv](http://bit.do/riscv)

- **Your Friendly Neighbourhood Hackers:**
  - PI:EMAIL
  - PI:EMAIL
  - PI:EMAIL

---

### The ABC of Next-Gen Shellcoding @ DEF CON 27
**Date:** 11 Aug 2019  
**Slide Number:** 42 / 42

---

This optimized version provides a clearer and more structured presentation of the content, making it easier to follow and understand.