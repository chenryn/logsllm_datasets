contains  a  sequence  number  that  allows  the  recipient  to 
play back voice packets in the proper order.  However, an 
attacker  can  easily  inject  artificial  packets  with  higher 
sequence numbers that will cause the injected packets to 
be played in place of the real packets.  An attack can also 
fake  the  SSRC  field,  which  designates  the  source  of  a 
stream of RTP packets, to impersonate another participant 
in a call. 
3
SCIDIVE Architecture 
3.1
SCIDIVE Components: Footprints, Trails, 
Events, Rules 
Figure  2  presents  an  overview  of  the  SCIDIVE
architecture.  In  SCIDIVE,  incoming  network  flows  first 
pass  through  the  Distiller,  which  translates  packets  into 
protocol  dependent  information  units  called  Footprints.
The  Distiller  is  responsible  for  doing  IP  fragmentation, 
reassembly,  decoding  protocols,  and  finally  generating 
the  corresponding  Footprints.  A  Footprint  is  a  protocol 
dependent information unit, which, for example, could be 
composed of a SIP message or an RTP packet. Footprints 
that belong to the same session are typically grouped into 
a Trail. In general, related Footprints are grouped into a 
Trail and therefore, Footprints from the same session may 
be split into and stored in multiple Trails. In Figure 2 we 
have three Trails that correspond to two SIP sessions and 
one RTP session. 
The Event  Generator  maps  footprints  into  a  single 
event.  For  example, we  can  map  two  out  of  order  RTP 
Footprints into an event called RtpJitter. Event Generator 
is  hard-coded  and  seamlessly  coupled  with  internal 
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:30:44 UTC from IEEE Xplore.  Restrictions apply. 
layer  of  abstraction,  which  correlates 
structures for best possible performance. In general, it is 
just  a 
the 
information in footprints and concentrates the information 
into a single event. It helps performance by hiding some 
computationally  expensive  matching,  e.g.,  by  triggering 
the ruleset at the moment of interest instead of triggering 
it upon each incoming RTP Footprint.  
is  based  on  Events 
Ruleset is triggered by a sequence of Events, e.g., we 
can define a rule for detecting RTP flow [event 1] after a 
session  is  torn  down  [event  2].  The  matching  in  the 
Ruleset 
that  can  potentially 
encapsulate  information  from  multiple  packets  and  can 
bear  state  information.  Besides  the  information  that 
Events  provide, 
the  Ruleset  can  also  perform  the 
matching  based  on  crude  information  directly  from  the 
Trails in case no suitable Event is available. For example, 
we might be interested in knowing who prematurely tears 
down  the  session.  To  achieve  this,  we  probably  need  to 
have a look at the corresponding SIP Footprint to identify 
the  ID  and  IP  address  of  the  originator.  However,  this 
direct access is inefficient compared to the rule matching 
using  Events  since  it  involves  searching  for  specific 
Footprints, possibly in multiple Trails. 
Time
Time
Footprint
Footprint
Network 
Network 
flows
flows
Distiller
Distiller
SIP Trail 1
SIP Trail 1
SIP Trail 2
SIP Trail 2
RTP Trail 3
RTP Trail 3
Event 
Event 
Generator
Generator
Events
Events
Ruleset
Ruleset
Rule Matching Engine
Rule Matching Engine
Figure 2. Overview of SCIDIVE components 
3.2 Cross-protocol Methodology for Detection 
We  propose  a  powerful  abstraction  for  intrusion 
detection systems in general, and VoIP IDSs in particular, 
namely, cross-protocol detection. An IDS that uses cross-
protocol  detection  accesses  packets 
from  multiple 
protocols  in  a  system  to  perform  its  detection.  This 
methodology  is  suitable  to  systems  that  use  multiple 
protocols  and  where  attacks  spanning  these  multiple 
protocols  are  possible.  There  is  the  important  design 
consideration  that  such  access  to  information  across 
protocols must be made efficiently.  
A  VoIP  system  incorporates  multiple  protocols.  A 
typical example is the use of SIP to establish a connection, 
followed  by  use  of  RTP  to  transfer  voice  data.  Also, 
RTCP  and  ICMP  are  used  to  monitor  the  health  of  the 
connection. VoIP systems typically have application level 
software  for  billing  purposes  and  therefore  may  have 
accounting software and a database. 
To motivate the need for cross-protocol detection, we 
introduce  a  synthetic  example  of  a  billing  fraud  attack. 
Since VoIP systems have been gaining in popularity only 
of  late,  there  are  very  few  instances  of  actual  attacks  in 
databases  such  as  CERT  [12].  In  our  synthetic  scenario, 
the  attack  is  launched  by  the  attacker  exploiting  a 
vulnerability  in  the  SIP  proxy.  She  sends  a  carefully 
crafted SIP  message  to  fool  the  proxy  into  believing  the 
call  is  initiated  by  someone  else.  The  proxy  initiates  the 
accounting  software  with  the  information  about  the 
incorrect  source  for  the  call.  This  allows  the  attacker  to 
make calls without being charged. 
the 
transaction  messages  between 
Using  the  cross-protocol  methodology  for  detection, 
one  can  create  a  cross-protocol  rule  to  look  at  the  SIP 
messages, 
the 
accounting software and the database, and the RTP flows 
later  on.  Specifically,  each  of  the  following  three 
conditions must hold. 
1. The SIP message should follow the correct format.  
2. When 
the  accounting  software  sends  out  a 
transaction  to  denote  a  call  from  user  A  to  user  B, 
check  if  user  A  has  sent  a  SIP  Call  Initialization 
message to user B. If user  A  has  not  set  up  the  call 
with a legitimate SIP Call Initialization message, then 
this condition will be violated. 
3. Check  the  source/destination  IP  addresses  of  the 
subsequent  RTP  flows.  Together  with  information 
from  DNS  and  SIP  Location  Servers,  we  can 
reconfirm  that  each  RTP  flow  has  a  corresponding 
legitimate call setup.  
In  SCIDIVE,  cross-protocol  detection 
is  achieved 
through  keeping  multiple  trails  for  each  session,  one  for 
each  protocol.  In  our  example,  we  can  have  (i)  a  ‘SIP 
trail’  which  tracks  all  the  SIP  messages  in  the  session 
between  user  A  and  user  B;  (ii)  an  ‘RTP  trail’  which 
tracks all the RTP packets in the session between A and B; 
and  (iii)  an  ‘Accounting  trail’  which  tracks  relevant 
accounting transactions in this session between A and B. 
Then, we can define three events based on the three trails 
corresponding  to  the  three  conditions  above.  The  first 
event is “an incorrectly formatted SIP message in the SIP 
trail”,  which  could  be  an  indication  of  an  attempt  to 
exploit  the  vulnerability  in  the  SIP  proxy.  The  second 
event is “a transaction in the Accounting trail that has no 
matching call initialization message in the SIP trail”. The 
third  event  is  “either  the  source  or  destination  IP 
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:30:44 UTC from IEEE Xplore.  Restrictions apply. 
addresses of the RTP packet without a matching address 
in the SIP packet”. The third event is specialized to take 
mobility  into  account,  which  will  be  indicated  by  a  SIP 
REINVITE  message  with  an  update  of  state  at  the  SIP 
Registrar  that  maintains  location  information.  In  the 
Ruleset, we can put a rule called Billing Fraud Detection,
which is triggered by a combination of these three events. 
An  advantage  of  creating  a  rule  based  on  a  sequence  of 
three  events  is  improving  the  accuracy  of  the  alarm 
because the rule is based on three facets of the attack. It is 
perceivable  that  relying  solely  on  Event  1  or  Event  3  to 
signal  ‘Billing  Fraud’  alarm  will  result  in  false  alarms. 
Also,  bugs  or  temporary  system  failures  might  cause 
Event  2.  Therefore,  relying  solely  on  Event  2  will 
possibly  give  us  false  alarms.  By  looking  at  all  three 
events,  these  false  alarms  could  be  avoided.  Since  these 
three events span multiple protocols (SIP, RTP, DNS, and 
protocols used by the accounting software), the advantage 
of the cross-protocol detection methodology is underlined. 
3.3
Stateful Methodology for Detection 
A  second  abstraction  useful  for  VoIP  systems  in 
particular  is  stateful  detection.  Stateful  detection  implies 
building  up  relevant  state  within  a  session  and  across
sessions  and  using  the  state  in  matching  for  possible 
attacks. It is important that the state aggregation be done 
efficiently  so  that  the  technique  is  applicable  in  high 
throughput systems, such as VoIP systems.  
A  VoIP  system  maintains  considerable  amount  of 
system state. The client side maintains state about all the 
active  connections  –  when  the  connection  was  initiated, 
when it can be torn down, and what the properties of the 
connection  are.  The  server  side  also  maintains  state 
relevant to billing, such as the duration of the call. 
ignores 
the  SIP  proxy  and 
To  motivate  the  need  for  stateful  detection,  we 
introduce  a  synthetic  example  of  a  DoS  attack  and  a 
password  guessing  attack.  An  unauthorized  user  client 
keeps  sending  unauthenticated  REGISTER requests  to 
bombard 
the  401 
UNAUTHORIZED reply error message from the SIP proxy. 
If  the  user  client  keeps  sending  the  same  request  to  the 
server, it can be seen as a type of DoS attack on the SIP 
proxy. Along with the UNAUTHORIZED reply message, the 
proxy sends a challenge phrase to the client. If the client 
keeps  sending  requests  with  different  values  in  the 
challenge  response  field,  this  could  be  seen  as  a  type  of 
attack  that  is  trying  to  break  the  authentication  key  by 
brute  force.  In  either  case,  it  would  be  helpful  for 
detection if the system can look at the series of user client 
requests and the subsequent server responses. Since 4XX 
responses  are  not  uncommon  in  a  normal  session,  a 
traditional  IDS  like  Snort  with  a  rule  to  detect  multiple 
4XX responses may flag a large number of false alarms. 
For  example,  most  user  clients  send  an  unauthenticated 
REGISTER  request  to  the  server,  presuming  that  the  SIP 
Proxy  does  not  require  authentication.  Later,  the  server 
sends a 401 response along with a challenge phrase to the 
client  to  indicate  that  authentication  is  required.  The 
client should then send a new REGISTER request to the 
server along with the correct response phrase to continue 
the registration process. If the IDS does not isolate 4XX 
error  messages  from  different  sessions  and  doesn’t 
correlate 4XX error messages with requests, it is likely it 
will  make  false  verdicts  based  on  unrelated  4XX  error 
messages. 
In  SCIDIVE,  Footprints  that  belong  to  a  session  are 
structured and kept in a single trail. Therefore, the history 
of  all  the  state  transitions  of  each  session  can  be  easily 
tracked.  An  effort  to  overwhelm  the  system  by  causing 
too  frequent  state  changes  may  itself  be  detected  by  an 
appropriate  rule.  To  handle  the  two  attack  scenarios 
above,  we  can  set  up  the  following  two  events  –  (i)  an 
event “DoS via repeated SIP requests”, which represents 
continuous,  alternating  SIP  requests  and  4XX  error 
messages in a particular session; (ii) an event “Password 
guessing”  which  represents  continuous,  alternating  SIP 
requests  with  different  challenge  responses  and  401 
Unauthorized reply error messages in a particular session. 
Flagging  of  the  two  events  indicates  two  different  kinds 
of attacks that may have different responses.  
The SCIDIVE architecture has flexibility in terms of the 
placement of its components. For example, it is possible 
to deploy the SCIDIVE IDS only on the SIP client side for 
detecting anomalies in the traffic in and out of the client. 
Also,  we  have  shown  in  previous  work  [9]  that  doing 
correlation  on  alerts  from  multiple  detectors  could 
increase the detection accuracy. We can use a similar idea 
by deploying SCIDIVE-enabled IDS on both end-points of 
the  VoIP  system.  In  such  an  installation,  the  two  IDSs 
could  exchange  event  objects  and  portions  of  trails  to 
enhance the overall detection accuracy and efficiency. A 
more  aggressive  approach  would  be  to  deploy  the 
SCIDIVE IDS on all the components – Clients, SIP Proxy, 
and Registrar server. 
4
Prototype and Experiments
An  IDS  prototype  is  built  to  instantiate  the  SCIDIVE
architecture for VoIP systems. For simplicity, the IDS is 
placed at the client end for the experiments in this paper. 
This configuration is shown in Figure 3 and is referred 
to  as  an  End-point  based  IDS  architecture.  In  this 
architecture,  an  IDS  instance  is  associated  with  each 
client. 
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:30:44 UTC from IEEE Xplore.  Restrictions apply. 
Cross-protocol or not ? 
If yes, how ? 
Stateful or not? If 
yes, how ? 
Rule snippet 
Yes. Detect no RTP 
traffic once SIP BYE has 
been seen. 
Yes. Monitor the 
session to determine 
when a session has 
been torn down. 
No RTP traffic should be 
seen after a SIP BYE 
from a particular user 
agent.
Yes. Check the source IP 
addresses of incoming 
IM messages (SIP 
Message). 
No. 
Yes. Detect no RTP 
traffic once SIP 
REINVITE has been 