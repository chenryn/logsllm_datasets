} else if (edx == 22) {
（中略）
}
这里不用讲解应该也能明白了吧。这样一来，我们就对字库、应用程序，以及应用程序所打
开的数据文件等等所有涉及文件操作的部分，都实现了对tek压缩的支持，如果觉得哪些文件比
较大的话，压缩一下就可以了。
■■■■■
作为测试，我们将应用程序压缩一下看看。
本次的app_make.txt节选
%.org : %.bim Makefile ../app_make.txt
$(BIM2HRB) $*.bim $*.org $(MALLOC)
%.hrb : %.org Makefile ../app_make.txt
$(BIM2BIN) -osacmp in:$*.org out:$*.hrb
我们运行一下“make full”，结果如下图所示。
应用程序名 压 缩 前 压 缩 后 差 异
a.hrb 84字节 84字节 0字节
hello3.hrb 112字节 101字节 11字节
hello4.hrb 102字节 105字节 +3字节
hello5.hrb 78字节 86字节 +8字节
winhelo.hrb 174字节 175字节 +1字节
winhelo2.hrb 315字节 249字节 66字节
winhelo3.hrb 359字节 268字节 91字节
star1.hrb 330字节 257字节 73字节
stars.hrb 416字节 322字节 94字节
stars2.hrb 476字节 352字节 124字节
lines.hrb 406字节 310字节 96字节
图灵社区会员 metorm 专享 尊重版权
2 文件压缩（harib26b） …… 643
（续） 1
应用程序名 压 缩 前 压 缩 后 差 异
walk.hrb 487字节 354字节 133字节
18
noodle.hrb 1773字节 1250字节 523字节
Beepdown.hrb 224字节 184字节 40字节
color.hrb 386字节 312字节 74字节 3
color2.hrb 512字节 399字节 113字节
sosu.hrb 1472字节 1082 390字节
20
sosu2.hrb 1484字节 1095字节 389字节
Sosu3.hrb 1524字节 1103字节 421字节
typeipl.hrb 174字节 165字节 9字节 21
type.hrb 265字节 226字节 39字节
iroha.hrb 97字节 101字节 +4字节
22
chklang.hrb 208字节 199字节 9字节
7
于是应用程序也变得更小了。当然，变小之后应用程序还是可以正常运行的。真不错，
noodle.hrb这种程序居然小到只有523字节了呢。
不过我们也发现，有一些原本就很小的应用程序，压缩了之后反倒稍微变大了一点①。虽然 8
这点差异我们完全可以忽略，不过文件总归还是越小越好，我们就不对这些文件进行压缩了（这
样还能节省解压缩的时间，虽然也只有一点点而已）。 9
本次的hello4.hrb的Makefile
26
APP = hello4
STACK = 1k
MALLOC = 0k
27
include ../app_make.txt
$(APP).hrb : $(APP).org Makefile 28
$(COPY) $(APP).org $(APP).hrb
这样一来，文件本身的生成规则会优先于一般规则，于是.hrb文件变成copy.org文件。 29
hello5.hrb和winhelo.hrb也进行了同样的修改。
29
■■■■■
15
——————————
① 可能大家会觉得压缩之后居然比原来还大这一点很奇怪，其实这也很正常。压缩说白了就是对数据的一种转换，
大多数情况下这种转换会让文件变得更小，但偶然的情况下转换之后反而变大也是有可能的。这一性质并非是tek 16
压缩所独有的，而是所有压缩方法所共有的。
图灵社区会员 metorm 专享 尊重版权
644 …… 第29天：压缩与简单的应用程序
通过这次的修改，毫无疑问，操作系统本身肯定变大了，不过到底大了多少呢？haribote.sys
的大小由34782字节变为40000字节，增加了5218字节，也就是5.10KB。而字库文件通过压缩减小
了85.4KB，减去操作系统增大的部分，我们还赚了80多KB，而且应用程序也变小了，效果还是
相当显著的。
到这里为止，我们的“纸娃娃系统”总算是正式完工了。撒花！放鞭炮！这29天一路走来，
现在好想庆祝一番。笔者实在是太开心了，要不出去吃顿大餐吧！
忽然想起typeipl.hrb，这个程序相当于一个只能显示“ipl10.nas”的type命令，而且现在
“ipl10.nas”这个文件已经不存在了（被替换成了“ipl20.nas”），这个程序也就没有任何意义了，
从下一节开始我们就将它删掉。
33 标准函数
在C语言中，有一些函数被称为“标准函数”，这些函数对于C语言来说是非常常用的函数，
大多数情况下，C语言编译器的作者或者是操作系统的作者都会提供这样的库。
其中有代表性的函数包括printf、putchar、strcmp以及malloc等。如果一个程序只调用了标准
函数，那么无论在Windows中还是在Linux中都可以生成相同的应用程序（这里的相同指的是源
代码可以完全通用，而并不是说完全相同的可执行文件能同时在不同的系统上运行）。
如果“纸娃娃系统”中也包含这些标准函数的话，那么上述这样的应用程序就同样可以用于
“纸娃娃系统”了。听起来很不错，我们来试试看吧。
要凑齐所有的标准函数，笔者实在是吃不消，于是我们只挑其中一部分来做。如果有必要的
话，剩下的可以由大家来完成。如果不清楚有哪些标准函数，可以参考一些C语言的教材，或者
到“纸娃娃系统”的支持页面来提问。
■■■■■
我们先来做putchar吧。这个函数的功能是在屏幕上显示一个指定的字符，只要include了
就可以使用。用api_putchar可以很容易地实现这个函数的功能。
putchar.c
#include "apilib.h"
int putchar(int c)
{
api_putchar(c);
return c;
}
图灵社区会员 metorm 专享 尊重版权
3 标准函数 …… 645
代码很简单，用不着讲解了吧。最后的return命令指定了c，这是putchar的参考手册①上面规
1
定的。
18
■■■■■
接下来是strcmp，不过这个已经由编译器附带了，因此不需要我们再特地编写了。
3
那么我们就来做exit吧。exit是用来结束应用程序的函数，只要include的就可以使用②。
本来exit函数有很多功能，比如实现用atexit函数对一些函数进行注册，在程序结束时可以自动调
20
用这些注册过的函数。要实现这些功能代码就会变得很长，我们在这里就只调用api_end，做一个
简单的exit函数吧。
21
exit.c
#include "apilib.h" 22
void exit(int status)
{
7
api_end();
}
8
这个也用不着讲解了吧。status参数是用来向操作系统报告程序结束状态的，由于在现在的
“纸娃娃系统”中完全没有用到，因此这里就直接忽略了。
9
■■■■■
下面我们来做printf，这个函数连C语言的初学者都应该很熟悉了。它的功能很简单，就是将 26
sprintf的结果输出到画面上，只要include了就可以使用了③。
不过printf还真是一个比较难写的函数，因为它的调用方式不是固定的，例如： 27
printf("hello, world\n");
printf("a = %d (%x) ", a, a); 28
像上面这样，通过使用%d和%x之类的转义符，会导致参数的数量发生变化。这样的函数到
底应当如何声明呢？ 29
只要完成了函数的声明，接下来只要调用sprintf，然后再调用api_putstr0就搞定了。可问题是
—————————— 29
① 笔者参考的是这个网页：http://www.linux.or . jp/JM/html /LDP_man_pages/man3/putchar.3.html（译者注：由于时间
久远，原链接已失效，各位读者请参考这里：http://www.linux.com/learn/docs/man/3838-putchar3）。
15
② 笔者参考的是这个网页：http://www.linux.or.jp/JM/html/LDP_man-pages/man3/exit.3.html（译者注：由于时间久远，
原链接已失效，各位读者请参考这里：http://www.linux.com/learn/docs/man/2912-exit3）。
③ 笔者参考的是这个网页：http://www.linux.or.jp/JM/html/LDP_man-pages/man3/printf.3.htm（l 译者注：由于时间久远， 16
原链接已失效，各位读者请参考这里：http://www.linux.com/learn/docs/man/4138-sprintf3）。
图灵社区会员 metorm 专享 尊重版权
646 …… 第29天：压缩与简单的应用程序
sprintf应该怎样调用呢？参数的数量是不固定的呀……
说那么多好像有点吓唬大家了，实际上程序并不长哦。
printf.c
#include 
#include 
#include "apilib.h"
int printf(char *format, ...)
{
va_list ap;
char s[1000];
int i;
va_start(ap, format);
i = vsprintf(s, format, ap);
api_putstr0(s);
va_end(ap);
return i;
}
先来看声明部分，直接写了一个省略号“…”，看上去很奇怪吧，其实这是C语言的语法，并
不是笔者的错哦（笑）。
这个“…”的部分中传递的参数，可以使用va_list来获取，只要include了就可以使
用了。使用时先通过va_start进行初始化，最后再用va_end来扫尾。
同时，有一个版本的sprintf是可以接受va_list作为参数的，名字叫vsprintf，使用这个函数就
可以完成处理了。vsprintf也是编译器附带的，可以直接使用。
虽然上面对“…”形式的参数做了讲解，不过这种形式并不常用，大家随便看看就可以了。
■■■■■
最后我们来做malloc和free，这两个函数只要include了就可以使用了①。
可能大家会觉得，用api_malloc和api_free不就可以轻松实现了吗？事实上可没有那么简单。
标准函数的free无需指定size，因此我们需要将malloc时指定的size找个地方存放起来。
malloc.c
void *malloc(int size)
{
char *p = api_malloc(size + 16);
——————————
① 笔者参考的是这个网页：http://www.linux.or.jp/JM/html/LDP_man-pages/man3/ malloc.3.html（译者注：由于时间久远，
原链接已失效，各位读者请参考这里：http://www.linux.com/learn/docs/ man/2634-calloc3）。
图灵社区会员 metorm 专享 尊重版权
4 非矩形窗口（harib26c） …… 647
if (p != 0) {
1
*((int *) p) = size;
p += 16;
}
return p; 18
}
3
free.c
void free(void *p)
{ 20
char *q = p;
int size;
if (q != 0) {
21
q -= 16;
size = *((int *) q);
api_free(q, size + 16);
} 22
return;
}
7
size的值到底应该存放在哪里呢？我们在api_malloc的时候特地多分配了16字节的空间出来，
然后将size存放在那里，在free的时候则执行相反的操作。size是int型，其实只需要占用4字节的
8
内存空间，不过内存地址为16字节的倍数时，CPU的处理速度有时候可以更快，因此在这里就用
了16字节（这样从api_malloc返回的内存地址就一定是16字节的倍数）。
9
■■■■■
26
到这里，标准函数就编写完成了。由于这部分内容只是顺带提及，因此上述程序代码并未包
含在本书附送的光盘中，有需要的读者请自己输入代码吧。像printf这样的函数，如果可以使用
的话应该还是很方便的呢。 27
44 非矩形窗口（harib26c）
28
好啦，现在开始我们可以编写应用程序玩玩了！
29
这里“非矩形”表示“非方块形状”，也就是说我们现在要让窗口的形状为方形以外的其他
形状，这通过使用透明色就可以实现。这个例子说明“纸娃娃系统”也能实现这种高级功能哟。
29
notrec.c
#include "apilib.h" 15
void HariMain(void)
{
16
int win;
图灵社区会员 metorm 专享 尊重版权
648 …… 第29天：压缩与简单的应用程序
char buf[150 * 70];
win = api_openwin(buf, 150, 70, 255, "notrec");
api_boxfilwin(win, 0, 50, 34, 69, 255);
api_boxfilwin(win, 115, 50, 149, 69, 255);
api_boxfilwin(win, 50, 30, 99, 49, 255);
for (;;) {
if (api_getkey(1) == 0x0a) {
break; /*按下回车键则break; */
}
}
api_end();
}
我们将透明色指定为255号，然后用这个透明色在窗口中绘制3个方块。于是我们绘制方块的
部分就变成了透明的，从结果上说也就画出非矩形的窗口了。
应用程序名称“notrec”是“not rectangle”（非矩形）的缩写。
“make run”的结果如图①，是不是很有意思呢？
非矩形的窗口？
虽然现在这样还不行，但只要对操作系统方面进行一些修改并支持隐藏窗口标题栏的话，我