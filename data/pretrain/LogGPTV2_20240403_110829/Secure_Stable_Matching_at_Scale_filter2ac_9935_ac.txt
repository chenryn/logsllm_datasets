mit their preferences sorted by counterparty ID. This means that
deﬁne CmpSortOnIndices((cid:104)a(cid:105),(cid:104)b(cid:105)):
(cid:104)result(cid:105) ← Cmp((cid:104)a(cid:105).(cid:104)si(cid:105),(cid:104)b(cid:105).(cid:104)si(cid:105))
(cid:104)if(cid:105) (cid:104)result(cid:105) = 0: (cid:104)result(cid:105) ← Cmp((cid:104)a(cid:105).(cid:104)ri(cid:105),(cid:104)b(cid:105).(cid:104)ri(cid:105))
(cid:104)if(cid:105) (cid:104)result(cid:105) = 0: (cid:104)result(cid:105) ← Cmp((cid:104)a(cid:105).(cid:104)is_reviewer(cid:105),(cid:104)b(cid:105).(cid:104)is_reviewer(cid:105))
return (cid:104)result(cid:105)
deﬁne SecureRothPeranson((cid:104)ProposerPrefs(cid:105),(cid:104)ReviewerPrefs(cid:105),(cid:104)RPositionBounds(cid:105),n,m,q,r,s):
(cid:104)CollationQueue(cid:105) ← new oblivious queue of n∗ q elements
(cid:104)MergedPrefs(cid:105) ← BatcherMerge((cid:104)ProposerPrefs(cid:105),(cid:104)ReviewerPrefs(cid:105), CmpSortOnIndices)
for i from 0 to n∗ q + m∗ r− 2:
(cid:27)
(cid:104)if(cid:105) (cid:104)MergedPrefs(cid:105)i.(cid:104)si(cid:105) = (cid:104)MergedPrefs(cid:105)i+1.(cid:104)si(cid:105)∧(cid:104)MergedPrefs(cid:105)i.(cid:104)ri(cid:105) = (cid:104)MergedPrefs(cid:105)i+1.(cid:104)ri(cid:105):
(cid:26) (cid:104)si(cid:105) ← (cid:104)MergedPrefs(cid:105)i.(cid:104)si(cid:105),(cid:104)ri(cid:105) ← (cid:104)MergedPrefs(cid:105)i.(cid:104)ri(cid:105),
(cid:104)CombinedPref(cid:105) ←
(cid:104)CollationQueue(cid:105) ← QueuePush((cid:104)CollationQueue(cid:105),(cid:104)CombinedPref(cid:105))
(cid:104)sr(cid:105) ← (cid:104)MergedPrefs(cid:105)i.(cid:104)rank(cid:105),(cid:104)rr(cid:105) ← (cid:104)MergedPrefs(cid:105)i+1.(cid:104)rank(cid:105)
(cid:104)Prefs(cid:105) ← ∅
for i from 0 to n− 1:
for j from 0 to q− 1:
(cid:104)Prefs(cid:105)i∗q+ j ← QueuePop((cid:104)CollationQueue(cid:105))
(cid:104)if(cid:105) QueuePeek((cid:104)CollationQueue(cid:105)).(cid:104)si(cid:105) = i:
(cid:104)else(cid:105):(cid:104)Prefs(cid:105)i∗q+ j ← {(cid:104)si(cid:105) ← i,(cid:104)ri(cid:105) ← ∅,(cid:104)sr(cid:105) ← ∞,(cid:104)rr(cid:105) ← ∅}
UnmatchedProposers ← QueuePush(UnmatchedProposers,(cid:104)entryPointers(cid:105)i)
(cid:104)Prefs(cid:105)i∗q:(i+1)∗q−1 ← BatcherSort((cid:104)Prefs(cid:105)i∗q:(i+1)∗q−1, CmpSortOnRanks)
{(cid:104)multilist(cid:105),(cid:104)entryPointers(cid:105)} ← InitializeMultilist((cid:104)Prefs(cid:105),{0,q,2q, ...,n∗ q})
UnmatchedProposers ← new oblivious queue of n elements
for i from 0 to n− 1:
(cid:104)dummy(cid:105) ← (cid:104)entryPointers(cid:105)n
(cid:104)done(cid:105) ← false
RMatches ← new ORAM of m elements
for i from 0 to m− 1:
(cid:104)p(cid:105) ← QueuePop(UnmatchedProposers)
for i from 0 to n∗ q− 1:
{(cid:104)ProposedPair(cid:105),(cid:104)p(cid:48)(cid:105)} ← TraverseMultilist((cid:104)multilist(cid:105),(cid:104)p(cid:105))
(cid:104)if(cid:105) (cid:104)done(cid:105) = true:
(cid:104)else(cid:105):(cid:104)if(cid:105) (cid:104)ProposedPair(cid:105).(cid:104)ri(cid:105) (cid:54)= ∅:
RMatches ← OramWrite(RMatches,{(cid:104)s(cid:105) ← (cid:104)RPositionBounds(cid:105)i,(cid:104)matches(cid:105) ← ∅},i)
(cid:104)p(cid:105) ← (cid:104)p(cid:48)(cid:105)
(cid:104)ProposedReviewer(cid:105) ← OramRead(RMatches,(cid:104)ProposedPair(cid:105).(cid:104)ri(cid:105))
for j from 0 to s− 1:
(cid:104)if(cid:105) j ≤ (cid:104)ProposedReviewer(cid:105).(cid:104)s(cid:105):
{(cid:104)tentativeMatch(cid:105),(cid:104)p(cid:48)(cid:48)(cid:105)} ← (cid:104)ProposedReviewer(cid:105).(cid:104)matches(cid:105) j
(cid:104)if(cid:105) (cid:104)tentativeMatch(cid:105) = ∅∨(cid:104)tentativeMatch(cid:105).(cid:104)rr(cid:105) > (cid:104)ProposedPair(cid:105).(cid:104)rr(cid:105):
(cid:104)ProposedReviewer(cid:105).(cid:104)matches(cid:105) j ← {(cid:104)ProposedPair(cid:105),(cid:104)p(cid:48)(cid:105)}
{(cid:104)ProposedPair(cid:105),(cid:104)p(cid:48)(cid:105)} ← {(cid:104)tentativeMatch(cid:105),(cid:104)p(cid:48)(cid:48)(cid:105)}
(cid:104)if(cid:105) (cid:104)ProposedPair(cid:105).(cid:104)ri(cid:105) = ∅:
(cid:104)if(cid:105) QueueEmpty(UnmatchedProposers):
(cid:104)p(cid:105) ← (cid:104)dummy(cid:105)
(cid:104)done(cid:105) ← true
(cid:104)else(cid:105):(cid:104)p(cid:105) ← QueuePop(UnmatchedProposers)
(cid:104)else(cid:105):(cid:104)p(cid:105) ← (cid:104)p(cid:48)(cid:105)
(cid:104)Result(cid:105) ← ∅
for i from 0 to n− 1:
return (cid:104)Result(cid:105)
(cid:104)Result(cid:105)i ← OramRead(RMatches,i).(cid:104)matches(cid:105)
Figure 5: Secure Roth-Peranson Algorithm. SecureRothPeranson expects to ingest preferences ordered ﬁrst by proposer index, then by
reviewer index. It returns an array of sets of proposer indices, ordered by the reviewer indices to which the proposers have been paired.
setup , permutation , and proposal/rejection .
Highlighting indicates each of the phases of the main algorithm as laid out in Section 4.4:
the proposers will submit preference lists sorted by reviewer ID,
and the master proposer preference list can be created by concate-
nation. The reviewer master preference list, however, must also
be sorted ﬁrst by proposer ID, then reviewer ID. Because indi-
vidual reviewer preference lists will be sparse, this ordering can-
not be achieved by blind interleaving, and because the counter-
party IDs will be hidden, it cannot be achieved outside of the pro-
tocol. Therefore, we must create the master reviewer preference
list inside of the protocol by way of repeated Batcher merges: we
merge pairs of individual preference lists, yielding half as many
lists, each of twice the original length. We repeat the process until
a single, correctly ordered master reviewer preference list remains.
The cost for this process is Θ(∑logm
i=1 mr log2ir), which reduces to
Θ(mr log2 m +mr logmlogr). This is better than the Θ(mr log2 mr)
cost that would be incurred by re-sorting all of the elements.
4.2
Improving ORAM Access
Although most ORAM schemes are compatible with our con-
struction, we use Square-Root ORAM [63], and take advantage of
function application to reduce the number of ORAM accesses re-
quired. An ordinary ORAM access will perform some number of
conditional oblivious copies between its data and an external lo-
cation, after which the desired element will have been retrieved.
To store the element back after modiﬁcation, another sequence of
copies must be performed. Instead, we apply a conditional obliv-
ious function to each element that would have been copied, obvi-
ating the second set of copies. This works well when the function
to be applied is simple, but the design of Zahur et al. [63] requires
Θ(T ) copies per access, and therefore Θ(T ) function applications,
where T is the ORAM refresh period. For a function such as the
one we use, which has a complexity in Θ(s) (incurred by linearly
scanning the tentative matches stored within each ORAM element),
the number of extra gates is signiﬁcant. To avoid this inefﬁciency,
we modify the ORAM access protocol to allow function application
with only a single execution of the function circuit.
ORAM Background and Notation. Square-Root ORAM stores
its data in Oram.(cid:104)Shuﬄe(cid:105), shufﬂed according to some secret per-
mutation. Each data element retains a copy of its logical index;
the logical index of the element with physical index i can be ac-
cessed via Oram.(cid:104)Shuﬄe(cid:105)i.(cid:104)index(cid:105). The ORAM uses a recursive
position map structure, Oram.Posmap, to relate physical indices in
Oram.(cid:104)Shuﬄe(cid:105) to logical indices, so that elements can be accessed
without scanning. As each element is accessed, the ORAM moves
it from Oram.(cid:104)Shuﬄe(cid:105) to Oram.(cid:104)Stash(cid:105), where it will be linearly
scanned on subsequent accesses. The ORAM tracks which physical
indices in Oram.(cid:104)Shuﬄe(cid:105) have been accessed using a set of pub-
lic Booleans, Oram.Used. After Oram.T accesses, the ORAM is
refreshed and the process starts again from the beginning; progress
toward the refresh period is tracked via Oram.t. Φ indicates the
function to be applied.
Construction. We designate Oram.(cid:104)Stash(cid:105)0 to be the active ele-
ment location: whichever ORAM element will be accessed must
be moved into this slot, and the function Φ is applied to it at the
end. The last active element remains in this slot between accesses.
On the next access it must be mixed back into the (cid:104)Stash(cid:105). This ar-
rangement has the additional advantage, unused by our algorithm,
of allowing the most-recently accessed block to be accessed repeat-
edly at no additional expense (so long as it can be publicly revealed
that accesses are repeated).
An access proceeds as follows. If Oram.t is zero, then we know
that the element we need cannot be in Oram.(cid:104)Stash(cid:105). Otherwise,
we scan the stash and use a conditional oblivious swap circuit [29]
to exchange each element with the element in Oram.(cid:104)Stash(cid:105)0, con-
ditioned on the currently-scanned element having the target logical
index. If the target element was not found during the stash scan,
it will be retrieved from Oram.(cid:104)Shuﬄe(cid:105), but before that can hap-
pen we must provide a blank space for it by moving the element in
Oram.(cid:104)Stash(cid:105)0 to an empty slot at the end of the (cid:104)Stash(cid:105).
Next, regardless of whether the target element has been found
thus far, we query Oram.Posmap for its position in Oram.(cid:104)Shuﬄe(cid:105).
If the target element has already been found, the position map will
return the physical index of a random unvisited element, which is
moved to an empty slot at the end of Oram.(cid:104)Stash(cid:105). If the target
element has not been found so far, then the index returned from the
position map will locate it, and we can move it to Oram.(cid:104)Stash(cid:105)0.
Finally, we apply Φ to the element located in Oram.(cid:104)Stash(cid:105)0, which
will be the target element. Pseudocode for our access function is
shown in Figure 7, with Zahur et al.’s original access function in
Figure 6 for comparison.
4.3 Security
With the exception of the modiﬁed ORAM access method de-
scribed in Section 4.2, our Secure Roth-Peranson protocol uses the
same oblivious data structures and underlying protocols as our Se-
deﬁne Access (Oram,(cid:104)i(cid:105),Φ)
(cid:104) f ound(cid:105) ← false
for j from 0 to Oram.t:
(cid:104)if(cid:105) Oram.(cid:104)Stash(cid:105) j.(cid:104)index(cid:105) = (cid:104)i(cid:105):
(cid:104) f ound(cid:105) ← true
Φ(Oram.(cid:104)Stash(cid:105) j)
Φ(Oram.(cid:104)Shuﬄe(cid:105)p)
p ← GetPos(Oram.Posmap,(cid:104)i(cid:105),(cid:104) f ound(cid:105))
(cid:104)if(cid:105) not (cid:104) f ound(cid:105):
Oram.(cid:104)Stash(cid:105)t ← Oram.(cid:104)Shuﬄe(cid:105)p
Oram.Used ← Oram.Used∪{p}
Oram.t ← Oram.t + 1
if Oram.t = Oram.T :
for j from 0 to Oram.T − 1:
p(cid:48) ← Oram.Used j
Oram.(cid:104)Shuﬄe(cid:105)p(cid:48) ← Oram.(cid:104)Stash(cid:105) j
Oram ← Initialize(Oram.(cid:104)Shuﬄe(cid:105))
Figure 6: Zahur et al.’s ORAM access method [63].
deﬁne Access (Oram,(cid:104)i(cid:105),Φ)
(cid:104) f ound(cid:105) ← false
if Oram.t > 0:
(cid:104)if(cid:105) Oram.(cid:104)Stash(cid:105)0.(cid:104)index(cid:105) = (cid:104)i(cid:105):
for j from 1 to Oram.t:
(cid:104) f ound(cid:105) ← true
(cid:104)if(cid:105) Oram.(cid:104)Stash(cid:105) j.(cid:104)index(cid:105) = (cid:104)i(cid:105):
(cid:104) f ound(cid:105) ← true
Swap(Oram.(cid:104)Stash(cid:105) j, Oram.(cid:104)Stash(cid:105)0)
(cid:104)if(cid:105) not (cid:104) f ound(cid:105):
Oram.(cid:104)Stash(cid:105)t ← Oram.(cid:104)Stash(cid:105)0
p ← GetPos(Oram.Posmap,(cid:104)i(cid:105),(cid:104) f ound(cid:105))
(cid:104)if(cid:105) not (cid:104) f ound(cid:105):
Oram.(cid:104)Stash(cid:105)0 ← Oram.(cid:104)Shuﬄe(cid:105)p
(cid:104)else(cid:105):
Oram.(cid:104)Stash(cid:105)t ← Oram.(cid:104)Shuﬄe(cid:105)p
Oram.Used ← Oram.Used∪{p}
Oram.t ← Oram.t + 1
Φ(Oram.(cid:104)Stash(cid:105)0)
if Oram.t = Oram.T :
for j from 0 to Oram.T − 1:
p(cid:48) ← Oram.Used j
Oram.(cid:104)Shuﬄe(cid:105)p(cid:48) ← Oram.(cid:104)Stash(cid:105) j
Oram ← Initialize(Oram.(cid:104)Shuﬄe(cid:105))
Figure 7: Our improved ORAM access method.
cure Gale-Shapley protocol. The assumptions and security argu-
ment from Section 3.3 apply to these elements.
The security property an ORAM access method must establish
is that any two same-length access sequences exhibit observable
memory patterns that are indistinguishable. This property holds
for our new access method, as it does for the original.
In the
ﬁrst stage of an access, the original algorithm scans Oram.(cid:104)Stash(cid:105)
and applies a function to any element matching the desired in-
dex. Our access method performs a similar process, applying a
swap circuit with Oram.(cid:104)Stash(cid:105)0 as its second input in place of
an arbitrary function. After the stash scan, it either moves an el-
ement from Oram.(cid:104)Stash(cid:105)0 to Oram.(cid:104)Stash(cid:105)t and copies an el-
ement from Oram.(cid:104)Shuﬄe(cid:105)p to Oram.(cid:104)Stash(cid:105)0, or copies an el-
ement from Oram.(cid:104)Stash(cid:105)p to Oram.(cid:104)Stash(cid:105)t. These operations
are performed within an oblivious conditional, so both code paths
appear to execute regardless of which takes effect. Finally, the
function Φ is applied to a single block at a ﬁxed physical index.
The observable memory behavior of this algorithm depends only
on public values (i.e., Oram.t); thus it retains the necessary trace
indistinguishability ORAM property.
4.4 Complexity Analysis
Unlike Secure Gale-Shapley, the execution time of Secure Roth-
Peranson is not obviously dominated by a single stage of the algo-
rithm. Instead, there are multiple phases, and the cost incurred by
each depends on the bounds of the input:
1. Sharing. This stage is necessary only if reviewer preferences
are XOR-shared between the two computation parties. The
preference lists for the individual reviewers are combined
into a master preference list by repeated Batcher merging.
The cost of this process is Θ(mr log2 m + mr logmlogr).
2. Setup. The master preference lists for the proposers and
reviewers are combined into a single array using a Batcher
merge and an oblivious queue, such that pairings that are not
ranked by both a proposer and a reviewer are omitted. The
asymptotic cost of this process is Θ((nq+mr)log (nq + mr)).
The combined master preference array is then sorted accord-
ing to the proposers’ indices and rankings using n Batcher
sorts over lists of length q, at a total cost of Θ(nqlog2 q).
3. Permutation. The preference array is shufﬂed using a Waks-
man network, incurring a cost of Θ(nqlognq).
4. Proposal/rejection. The algorithm adds proposers one by
one and iterates through the proposers’ preference lists in a
manner similar to Gale-Shapley. It must iterate exactly as
many times as there are potential proposer-rankings (i.e. nq).
For each iteration, the algorithm performs one access to an
ORAM containing the reviewers’ tentative matches (m ele-
√
ments of size s). Using Square-Root ORAM, the cost of the
mlog3 m).
proposal-rejection phase is in Θ(nqs
√
Thus, the total cost of our Secure Roth-Peranson algorithm is
mlog3 m).
Θ((nq +mr)log (nq + mr) +nqlog2 q +nqlognq +nqs
XOR-sharing incurs an added cost of Θ(mr log2 m+mr logmlogr).
Reducing bounds by distributing positions. For many applica-
tions, including the medical residency match, the number of avail-
able positions is not constant among reviewers. In such cases, the
cost of the proposal/rejection phase can be reduced by setting the
parameter s to be smaller than the maximum, and distributing the
positions of reviewers who exceed the bound among sub-reviewers.
A potentially signiﬁcant decrease in s may lead to only a small in-
crease in m and q. The optimum balance depends upon the input
parameters and implementation details, but this splitting should re-
duce overall cost signiﬁcantly in some cases.
In order for both parties to split the reviewers in an identical way,
it must be publicly known which reviewers are to be split, and how
many sub-reviewers they are to be split into, which leaks informa-
tion about the number of positions offered by each reviewer. This is
acceptable in many applications (such as resident-hospital match-
ing), as the position quotas are already public knowledge. If such a
leak is unacceptable, the bound s cannot be lowered.
All that remains is to specify that the splitting of reviewers be
done in such a way that the result of the algorithm is unchanged.
This will be the case if we require that all sub-reviewers share iden-
tical preference lists, that proposers rank all sub-reviewers for each
reviewer they would have originally ranked, and that those sub-
reviewers be ranked contiguously. These properties will ensure that
any proposer who is rejected by one sub-reviewer will immediately
propose to and be considered by the next sub-reviewer. At any iter-
ation, all tentative matches should be equivalent to those that would