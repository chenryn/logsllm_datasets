1,531 lines of C
2,978 lines of C
1,532 lines of C
2,199 lines of C
5,087 lines of C
19,281 lines of code
TABLE VI: The modified lines of code for each component in
OpenSGX.
data structure, called an enclave descriptor, that stores the
fields such as TCS and usage statistics. In particular, it counts
the number of context switches, the entries/exits of the OS
emulation layer; the number of ENCLU/ENCLS leaf instructions
that can indicate the behavior of an enclave; the number of
TLB flushes, as it is reported as the main overhead in enclave
transition [5]; and the number of dynamically allocated EPC
pages, which is a good indicator to the enclave memory usage.
Then, the host program later can query its statistics through
the sys_stat_enclave() system call.
As OpenSGX is built on top of the software stack, it
can be easily extended to measure other behaviors, such as
Last Level Cache Misses [42]. However, the current prototype
neither provides nor guarantees any precision of direct and time-
oriented performance characteristics of enclaves running on
Intel SGX, because OpenSGX never reflects the actual cost of
memory isolation or encryption provided by the SGX hardware
during the emulation.
V. OPENSGX IMPLEMENTATION
Table VI shows the number of lines of code (LoC) of
OpenSGX’s components. OpenSGX and its applications consist
of approximately 19K lines of C code with QEMU SGX being
the largest component.
To implement QEMU SGX, we extensively modify several
components of QEMU. In particular, QEMU holds all x86
CPU register values, such as EIP, in a data structure called
CPUX86State that represents the CPU state of the guest machine.
We extend the CPU state by adding the CREGS data structure [21,
22], to support additional CPU states introduced by OpenSGX.
The CREGS structure maintains registers related to the enclave
context, such as the on/off state of enclave mode and the current
instruction pointer.
To control a program’s next executing point upon enclave
entries/exits, we execute our mode checking routines before
generating a new translation block (TB). For example, if a TB
executes an ENCLU instruction (except EEXIT) and enclave mode
is on, the CR_CURR_EIP value in CREGS overwrites the EIP in
CPUX86State. Since CR_CURR_EIP is supplied while emulating
the ENCLU instruction, it directs QEMU to generate/execute the
next TB from the supplied EIP instead of the one determined
from executing the current TB without ENCLU.
To emulate ENCLU/ENCLS instruction families and mem-
ory protection, we utilize the QEMU helper routine. The
QEMU helper routine, which consists of gen_helper_*()
and helper_*(), was originally designed to interpose an
event such as an interrupt while emulating guest instructions.
We add gen_helper_enclu/encls() functions at the point
where the opcode for ENCLU/ENCLS instruction is found, while
translating a guest instruction. This ensures that QEMU calls
Attacks
Target node
Description
Compromising keys
Constructing
bad consensus
Spoiled Onion [52]
Bad Apple [6]
Directory
Directory
Exit node
Exit node
TABLE VII: Attacks on Tor
Tampering with voting/consensus creation
Tie-breaking, Include compromised ORs
HTTPS man-in-the-middle attack, sslstrip
De-anoymize, plaintext tampering/snooping
Node type
Data structure
Description
Directory node
Exit node
Identity key
Signing key
Identity key
Onion key
Certify signing key
Sign vote and consensus
Sign router descriptor/TLS certificate
Encrypt/decrypt cells
TABLE VIII: Key data structures of Tor that are protected inside the
enclave
helper_enclu/encls() when the ENCLU/ENCLS instruction is
invoked. Then, we implement the ENCLU/ENCLS leaf instructions
inside helper_enclu/encls(). For memory protection, we
insert gen_helper_mem_access() at all points where an instruc-
tion causes memory load/store, and gen_helper_mem_execute()
before jmp/call/ret instructions. The former enforces mem-
ory access control according to enclave mode state and
EPCM’s read/write permissions, whereas the latter performs
Data Execution Prevention (DEP) within the EPC according
to EPCM’s execute permission. If the enclave mode is on,
helper_mem_access() generates an exception when an enclave
code is trying to access EPC outside its enclave or EPCM’s
read/write/execute permissions are violated. If the enclave mode
is off, all accesses to the EPC region are simply blocked.
VI. APPLICATION CASE STUDIES
To evaluate OpenSGX, we develop a number of applications
utilizing SGX. Our experience demonstrates that OpenSGX
supports non-trivial applications and is a suitable platform for
testing new ideas and developing SGX applications. We focus
on two applications, namely Tor and secure I/O paths.
A. Shielding Tor Nodes
Motivation. The Tor network relies on a network of world-
wide volunteers to achieve anonymous communication. While
the software is open source and publicly available for verifi-
cation, its hardware is donated by volunteers who run pieces
of Tor software (e.g., onion routers [15]). Thus, the current
model is that users (semi-) trust the execution environment that
volunteers provide using the hardware and operating system
of their choice. When a security breach actually occurs to a
server that hosts Tor’s directory service, identity keys of the
server need to be replaced. This causes users to update their
software, which is very cumbersome [14].
Applying trusted execution on the core components of Tor
will strengthen the security of the Tor network and enhance its
trust model. Instead of trusting the hardware and the system
software that hosts Tor relays, users can simply trust the
underlying TEE. Using TEEs also allows us to secure the
interactions between Tor nodes, allowing Tor to deliver its
anonymity service on top of a distributed TEE.
To demonstrate the benefits, we first look at the known
attacks on Tor and examine how trusted execution may
strengthen the security of the Tor network. Finally, we present
a design and implementation of Tor that utilizes the TEE.
10
Node type
Enclave Operations
Non-enclave Operations
Both
Directory node
Exit node
Create key pairs, offer key information
Create certificates, sign and verify vote/consensus
Create TLS certificates, encrypt/decrypt packets
Transfer control/relay cells, initialize data structures, ...
Transfer votes, broadcast consensus, TLS connection, ...
Get connection with destination, send/receive packets, ...
TABLE IX: Separation of Tor operations in a directory server and an exit node. Operations which accesses to sensitive data are located inside
the enclave. Rest of Tor operations are executed in untrusted region for saving EPC pages.
Previously known attacks on Tor
Threat model.
that
deanonymize Tor users can be divided into two categories
in terms of the target of manipulation [47]: manipulating Tor
components [30, 53] and manipulating routing [26, 47]. We
assume the attack model that manipulates the Tor components,
including Tor nodes and directory servers, by gaining control
over the nodes. The consideration of network-level adversaries,
such as a man-in-the-middle and AS-level adversaries, is out
of scope in this paper.
Tor consists of a small number of directory servers. Attacks
mainly target the directory server, entry, and exit node because
subverting the middle relay nodes is not sufficient to break
Tor’s anonymity. There are several known attacks and reported
security incidents to Tor [14]. Table VII summarizes several
known attacks against Tor. The first two target the directory
server to either compromise the directory server’s key or force
them to sign an arbitrary consensus that an attacker specifies.
Attackers then can leverage this power to admit malicious Tor
nodes that themselves control and influence Tor nodes that users
choose from. Once attackers have control over Tor nodes, they
can launch attacks to break the anonymity or eavesdrop an on-
going communication [1, 17, 30]. For example, a malicious exit
node can inject or modify HTMLs, conduct man-in-the-middle
attacks, and modify DNS responses [53]. These techniques, in
turn, can be used to identify the source address of Tor users
or obtain other private information.
Benefits of applying TEE. Utilizing TEEs can enhance the
security of Tor in two ways.
• Attestation of software components: Users can perform
remote attestation to ensure that Tor nodes are running the
unmodified code by verifying the integrity of software. We
believe that this will help users to select Tor nodes, and the
Tor network can benefit from the new trust model.
• Protection against tampered OS: One can also protect Tor
from the malicious operating systems or subverted system
software. In particular, the memory region that Tor is using
can be protected against a malicious OS by running the
critical components of Tor inside an enclave. Even if the OS
is tampered with, the private keys are not exposed to the
attackers. This is especially helpful in protecting directory
servers, as revoking their keys often requires reinstallation
of all Tor nodes [14].
We demonstrate the benefit of our OpenSGX implementa-
tion by porting Tor to OpenSGX. We adopt the second approach
to protect Tor against tampered system software. In particular,
we separate critical parts of Tor that use cryptographic oper-
ations and store all private and session keys inside EPC. For
directory servers, we also store the consensus (i.e., the list of
Tor nodes).
OpenSGX-based Tor design. We take a minimalistic ap-
proach in which we define a narrow interface between generic
Tor code that runs outside the enclave, interacting with the
OS, and Tor-enclave that runs inside OpenSGX. Tor-enclave
contains sensitive data structures to be protected and related
functions that utilize the data structure. Generic Tor code and
Tor-enclave run as separate processes. The generic Tor process
(Tor-non-enclave) invokes RPC to request services that Tor-
enclave provides. In our implementation, we port Tor’s directory
server and exit nodes. Table VIII shows the core data structures
of the directory server and Tor exit node that we protect inside
the enclave. For the case of a directory server, it has two private
keys: an authority identity key and an authority signing key.
Directory authority uses the authority identity key to certify
the authority signing key. The authority signing key is used for
signing and verifying votes and consensus documents, which
are important information for a Tor circuit creation. For an exit
node, a secret identity key is used for signing a router descriptor
and TLS certificate while constructing a 3-hop circuit. Finally,
an exit node uses a secret onion key to decrypt a relay cell
received from the previous onion router.
Table IX summarizes the operation that Tor-enclave and
Tor-non-enclave support. We contain all critical operations
that use private data structures in Tor-enclave and expose an
RPC interface to Tor-non-enclave. Tor-enclave only receives
requests from Tor-non-enclave. We summarize some of the
operations supported by Tor-enclave. First, it supports secure
key generation and stores the keys inside EPC. Also, since
operations such as creating certificates and signatures require
a private key, these modules should be run inside the enclave.
Information related to the private key (e.g fingerprint, digest
and public key string) is also offered by Tor-enclave.
B. Secure I/O path
OpenSGX allows us to extend the platform and develop new
ideas in conjunction with TEE. To demonstrate its flexibility,
we implement a simple secure I/O path that allows secure
communication between the CPU/memory and devices. The
idea has been explored by Intel with its Identity Protection
Technology (IPT) [10], which supports protected transaction
display and audio I/O. However, the development platform is
not widely available to the research community.
While many applications require secure I/O paths [10], to
focus our discussion, we explore this in conjunction with our
main application of the paper, Tor. In particular, Tor’s exit node
can benefit from having a secure network I/O path between Tor-
enclave and the NIC. Tor exit nodes decrypt the packets and can
observe plain-text unless end-to-end encryption is used between
the client using Tor and the server it is communicating with.
This has led to a number of security vulnerabilities in which Tor
exit nodes modify or eavesdrop on the message [53]. A secure
I/O path can protect users from these attacks. In particular, if
the communication channel between the Tor-enclave and the
NIC is secured, (subverted) system software cannot eavesdrop
on or modify the message. Only an attacker that has access
to the network between the Tor exit node and the server can
mount the attacks, but the Tor network has protection against
attacks from inside the Tor network.
11
Type
Number of pages
Directory node
Exit node
Note
Enclave pages
Code/Data pages
SSA pages
Stack pages
Heap pages
TABLE X: The number of EPC pages for Tor-enclave process.
SECS and TCS
Including library
Configurable
Configurable
Configurable
4
366
2
50
50
4
369
2
50
50
Type
OpenSSL
SGX libs
Tor-enclave
Total
Code
270
3
3
276
Directory node
Data
88
1
1
90
Total
358
4
4
366
Exit node
Data
89
1
1
91
Code
271
3
4
278
Total
360
4
5
369
TABLE XI: The number of EPC pages for code/data section of