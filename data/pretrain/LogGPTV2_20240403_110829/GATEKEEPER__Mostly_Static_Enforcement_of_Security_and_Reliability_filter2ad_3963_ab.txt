following code snippet
it
var fieldName = ’f’;
a[fieldName] = 3;
the second line will be correctly converted into a.f = 3.
2.3 Analysis Stages
The analysis process is summarized in Figure 2.
If the
program is outside of JavaScriptGK, we reject it right away.
Otherwise, we ﬁrst traverse the program representation
and output a database of facts, expressed in Datalog nota-
tion. This is basically a declarative database representing
what we need to know about the input JavaScript pro-
gram. We next combine these facts with a representa-
tion of the native environment of the browser discussed
in Section 3.4 and the points-to analysis rules. All three
are represented in Datalog and can be easily combined.
We pass the result to bddbddb, an off-the-shelf declara-
tive solver [33], to produce policy violations. This pro-
vides for a very agile experience, as changing the policy
usually only involves editing several lines of Datalog.
2.4 Analyzing the JavaScriptSAFE Subset
For a JavaScriptSAFE program, we normalize each function
to a set of statements shown in Figure 5. Note that the
JavaScriptSAFE language, which we shall extend in Sec-
tion 3 is very much Java-like and is therefore amenable to
inclusion-based points-to analysis [33]. What is not made
explicit by the syntax is that JavaScriptSAFE is a prototype-
based language, not a class-based one. This means that
objects do not belong to explicitly declared classes. In-
stead, a object creation can be based on a function, which
becomes that object’s prototype. Furthermore, we support
a restricted form of reﬂection including Function.call,
Program ASTyesPoints-to analysis rulesnoyesJavaScriptSAFE ?Instrument unresolved array accesses and .innerHtml storesnoPolicy #1Policy #2Policy #3JAVASCRIPTGK?+=Policy violationsPolicy violationsFeature
JavaScriptSAFE
JavaScriptGK
UNCONTROLLED CODE INJECTION
Unrestricted eval
Function constructor
setTimeout, setInterval
with
document.write
Stores
innerHTML, onclick, etc.
code-injecting
to






ﬁelds
Function.call
Function.apply
arguments array
CONTROLLED REFLECTION
X
X
X
Non-static ﬁeld stores
innerHTML assignments
INSTRUMENTATION POINTS








X
X
X
X
X
Figure 4: Support for different dynamic EcmaScript-262 language features in JavaScriptSAFE and JavaScriptGK language subsets.
s ::=

s; s
v1 = v2
v = ⊥
return v;
v = new v0(v1, ..., vn);
v = v0(vthis , v1, v2, . . . , vn);
|
|
|
|
|
|
|
|
v1 = v2.f ;
|
v1.f = v2;
v = function(v1, ..., vn) {s;};
[EMPTY]
[SEQUENCE]
[ASSIGNMENT]
[PRIMASSIGNMENT]
[RETURN]
[CONSTRUCTOR]
[CALL]
[LOAD]
[STORE]
[FUNCTIONDECL]
Figure 5: JavaScriptSAFE statement syntax in BNF.
Function.apply, and the arguments array. The details
of pointer analysis are shown in the Datalog rules Figure 8
and discussed in detail in Section 3.
One key distinction of our approach with Java is that
there is basically no distinction of heap-allocation objects
and function closures in the way the analysis treats them.
In other words, at a call site, if the base of a call “points
to” an allocation site that corresponds to a function decla-
ration, we statically conclude that that function might be
called. While it may be possible to recover portions of the
call graph through local analysis, we interleave call graph
and points-to analysis in our approach.
We are primarily concerned with analyzing objects or
references to them in the JavaScript heap and not primi-
tive values such as integers and strings. We therefore do
not attempt to faithfully model primitive value manipu-
CALLS(i : I, h : H)
FORMAL(h : H, z : Z, v : V )
METHODRET(h : H, v : V )
ACTUAL(i : I, z : Z, v : V )
CALLRET(i : I, v : V )
ASSIGN(v1 : V, v2 : V )
LOAD(v1 : V, v2 : V, f : F )
STORE(v1 : V, f : F, v2 : V )
PTSTO(v : V, h : H)
indicates when call site i in-
vokes method h
records formal arguments of a
function
records the return value of a
method
records actual arguments of a
function call
records the return value for a
call site
records variable assignments
represents ﬁeld loads
represents ﬁeld stores
represents a points-to relation
for variables
HEAPPTSTO(h1 : H, f : F, h2 : H) represents a points-to relations
PROTOTYPE(h1 : H, h2 : H)
for heap objects
records object prototypes
Figure 6: Datalog relations used for program representation.
lation, lumping primitive values into PRIMASSIGNMENT
statements.
2.5 Analysis Soundness
The core static analysis implemented by GATEKEEPER is
sound, meaning that we statically provide a conservative
approximation of the runtime program behavior. Achiev-
ing this for JavaScript with all its dynamic features is far
from easy. As a consequence, we extend our soundness
guarantees to programs utilizing a smaller subset of the
language. For programs within JavaScriptSAFE, our analy-
v1 = v2
v = ⊥
return v
ASSIGN(v1, v2).
CALLRET(v).
v = new v0(v1, v2, ..., vn)
v = v0(vthis , v1, v2, . . . , vn)
PTSTO(v, dfresh).
PROTOTYPE(dfresh , h) : – PTSTO(v0, m),
HEAPPTSTO(m, "prototype", h).
for z ∈ {1..n}, generate ACTUAL(i, z, vz).
CALLRET(i, v).
for z ∈ {1..n, this}, generate ACTUAL(i, z, vz).
CALLRET(i, v).
v1 = v2.f
v1.f = v2
LOAD(v1, v2, f).
STORE(v1, f, v2).
v = function(v1, ..., vn) {s}
PTSTO(v, dfresh).
HEAPPTSTO(dfresh , "prototype", pfresh).
FUNCDECL(dfresh). PROTOTYPE(pfresh , hFP).
for z ∈ {1..n}, generate FORMAL(dfresh , z, vz).
METHODRET(dfresh , v).
Figure 7: Datalog facts generated for each JavaScriptSAFE statement.
[ASSIGNMENT]
[BOTASSIGNMENT]
[RETURN]
[CONSTRUCTOR]
[CALL]
[LOAD]
[STORE]
[FUNCTIONDECL]
sis is sound. For programs within GATEKEEPER, our
analysis is sound as long as no code introduction is de-
tected with the runtime instrumentation we inject. This is
very similar to saying that, for instance, a Java program
is not going to access outside the boundaries of an array
as long as no ArrayOutOfBoundsException is thrown.
Details of runtime instrumentation are presented in Sec-
tion 3.2. The implications of soundness is that GATE-
KEEPER is guaranteed to ﬂag all policy violations, at the
cost of potential false positives.
We should also point out that the GATEKEEPER analy-
sis is inherently a whole-program analysis, not a modu-
lar one. The need to statically have access to the entire
program is why we work so hard to limit language fea-
tures that allow dynamic code loading or injection. We
also generally model the runtime — or native — envi-
ronment in which the JavaScript code executes. Our ap-
proach is sound, assuming that our native environment
model is conservative. This last claim is similar to as-
serting that a static analysis for Java is sound, as long
as native functions and libraries are modeled conserv-
atively, a commonly used assumption. We also assume
that the runtime instrumentation we insert is able to han-
dle the relevant corner cases a deliberately malicious wid-
get might try to exploit, admittedly a challenging task, as
further explained in Section 3.2.
3 Analysis Details
This section is organized as follows. Section 3.1 talks
about pointer analysis in detail2. Section 3.2 discusses the
runtime instrumentation inserted by GATEKEEPER. Sec-
tion 3.3 talks about how we normalize JavaScript AST to
ﬁt into our intermediate representation. Section 3.4 talks
about how we model the native JavaScript environment.
3.1 Pointer Analysis
In this paper, we describe how to implement a form
of inclusion-based Andersen-style ﬂow- and context-
sensitive analysis [3] for JavaScript.
It remains to be
seen whether ﬂow and context sensitivity signiﬁcantly im-
prove analysis precision; our experience with the policies
in Section 4 has not shown that to be the case. We use al-
location sites to approximate runtime heap objects. A key
distinction of our approach in the lack of a call graph to
start with: our technique allows call graph inference and
points-to analysis to be interleaved. As advocated else-
where [21], the analysis itself is expressed declaratively:
we convert the program into a set of facts, to which we
2We refer the interested reader to a companion technical report [22]
reﬂective constructs Function.call,
that discusses handling of
Function.apply, and arguments.
% Basic rules
PTSTO(v, h)
PTSTO(v, h)
PTSTO(v1, h)
DIRECTHEAPSTORESTO(h1, f, h2)
DIRECTHEAPPOINTSTO(h1, f, h2)
PTSTO(v2, h2)
HEAPPTSTO(h1, f, h2)
% Call graph
CALLS(i, m)
% Interprocedural assignments
ASSIGN(v1, v2)
ASSIGN(v2, v1)
% Prototype handling
HEAPPTSTO(h1, f, h2)
: – ALLOC(v, h).
: –
: –
FUNCDECL(v, h).
PTSTO(v2, h), ASSIGN(v1, v2).
STORE(v1, f, v2), PTSTO(v1, h1), PTSTO(v2, h2).
: –
: – DIRECTHEAPSTORESTO(h1, f, h2).
: –
: – DIRECTHEAPPOINTSTO(h1, f, h2).
LOAD(v2, v1, f ), PTSTO(v1, h1), HEAPPTSTO(h1, f, h2).
: – ACTUAL(i, 0, c), PTSTO(c, m).
: – CALLS(i, m), FORMAL(m, z, v1), ACTUAL(i, z, v2), z > 0.
: – CALLS(i, m), METHODRET(m, v1), CALLRET(i, v2).
: –
PROTOTYPE(h1, h), HEAPPTSTO(h, f, h2).
Figure 8: Pointer analysis inference rules for JavaScriptSAFE expressed in Datalog.
apply inference rules to arrive at the ﬁnal call graph and
points-to information.
Program representation. We deﬁne the following do-
mains for the points-to analysis GATEKEEPER performs:
heap-allocated objects and functions H, program vari-
ables V , call sites I, ﬁelds F , and integers Z. The analysis
operates on a number of relations of ﬁxed arity and type,
as summarized in Figure 6.
Analysis stages. Starting with a set of initial input re-
lation, the analysis follows inference rules, updating in-
termediate relation values until a ﬁxed point is reached.
Details of the declarative analysis and BDD-based repre-
sentation can be found in [32]. The analysis proceeds in
stages.
In the ﬁrst analysis stage, we traverse the nor-
malized representation for JavaScriptSAFE shown in Fig-
ure 5. The basic facts that are produced for every state-
ment in the JavaScriptSAFE program are summarized in
Figure 7. As part of this traversal, we ﬁll in relations
ASSIGN, FORMAL, ACTUAL, METHODRET, CALLRET, etc. This
is a relatively standard way to represent information about
the program in the form of a database of facts. The sec-
ond stage applies Datalog inference rules to the initial set
of facts. The analysis rules are summarized in Figure 8.
In the rest of this section, we discuss different aspects of
the pointer analysis.
3.1.1 Call Graph Construction
As we mentioned earlier, call graph construction in
JavaScript presents a number of challenges. First, unlike
a language with function pointers like C, or a language
with a ﬁxed class hierarchy like Java, JavaScript does not
have any initial call graph to start with. Aside from lo-
cal analysis, the only conservative default we have to fall
back to when doing static analysis is “any call site calls
every declared function,” which is too imprecise.
Instead, we chose to combine points-to and call graph
constraints into a single Datalog constraint system and re-
solve them at once. Informally, intraprocedural data ﬂow
constraints lead to new edges in the call graph. These in
turn lead to new data ﬂow edges when we introduce con-
straints between newly discovered arguments and return
values. In a sense, function declarations and object allo-
cation sites are treated very much the same in our analysis.
If a variable v ∈ V may point to function declaration f,
this implies that call v() may invoke function f. Alloca-
tion sites and function declarations ﬂow into the points-to
relation PTSTO through relations ALLOC and FUNCDECL.
3.1.2 Prototype Treatment
The JavaScript language deﬁnes two lookup chains. The
ﬁrst is the lexical (or static) lookup chain common to
all closure-based languages. The second is the prototype
chain. To resolve o.f, we follow o’s prototype, o’s proto-
type’s prototype, etc. to locate the ﬁrst object associated
with ﬁeld f.
Note that the object prototype (sometimes denoted as
[[Prototype]] in the ECMA standard) is different from
the prototype ﬁeld available on any object. We model
[[Prototype]] through the PROTOTYPE relation in our sta-
tic analysis. When PROTOTYPE(h1, h2) holds, h1’s internal
[[Prototype]] may be h2
3.
3We
follow the EcmaScript-262 standard;
Firefox makes
Two rules in Figure 7 are particularly relevant for proto-
type handling: [CONSTRUCTOR] and [FUNCTIONDECL]. In
the case of a constructor call, we allocate a new heap vari-
able dfresh and make the return result of the call v point to
it. For (every) function m the constructor call invokes,
we make sure that m’s prototype ﬁeld is connected
with dfresh through the PROTOTYPE relation. We also set up
ACTUAL and CALLRET values appropriately, for z ∈ {1..n}.
In the regular [CALL] case, we also treat the this para-
meter as an extra actual parameter.
In the case of a [FUNCTIONDECL], we create two
fresh allocation site, dfresh for the function and pfresh
for the newly create prototype ﬁeld for that func-
tion. We use shorthand notion hFP to denote object
Function.prototype and create a PROTOTYPE relation
between pfresh and hFP. We also set up HEAPPTSTO re-
lation between dfresh and pfresh objects. Finally, we set
up relations FORMAL and METHODRET, for z ∈ {1..n}.
Example 1. The example in Figure 9 illustrates the in-
tricacies of prototype manipulation. Allocation site a1 is
created on line 2. Every declaration creates a declaration
object and a prototype object, such as dT and pT . Rules
in Figure 10 are output as this code is processed, anno-
tated with the line number they come from. To resolve the
call on line 4, we need to determine what t.bar points to.
Given PTSTO(t, a1) on line 2, this resolves to the following
Datalog query:
HEAPPTSTO(a1, "bar", X)?
Since there is nothing dT points to directly by follow-
ing the bar ﬁeld, the PROTOTYPE relation is consulted.
PROTOTYPE(a1, pT ) comes from line 2. Because we have
HEAPPTSTO(pT , "bar", dbar) on line 3, we resolve X to
be dbar. As a result, the call on line 4 may correctly in-
voke function bar. Note that our rules do not try to keep
track of the order of objects in the prototype chain. (cid:3)
3.2 Programs Outside JavaScriptSAFE
The focus of this section is on runtime instrumenta-
tion for programs outside JavaScriptSAFE, but within the
JavaScriptGK JavaScript subset that is designed to prevent
runtime code introduction.
3.2.1 Rewriting .innerHTML Assignments
innerHTML assignments are a common dangerous lan-
guage feature that may prevent GATEKEEPER from stati-
cally seeing all the code. We disallow it in JavaScriptSAFE,
but because it is so common, we still allow it in the
JavaScriptGK language subset. While in many cases the
right-hand side of .innerHTML assignments is a constant,
[[Prototype]] accessible through a non-standard ﬁeld proto .