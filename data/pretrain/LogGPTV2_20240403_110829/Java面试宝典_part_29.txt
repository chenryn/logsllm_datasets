### MongoDB 常见操作

#### 1. 插入文档
在 MongoDB 中，可以使用 `insert()` 或 `save()` 方法将文档插入集合中。
```javascript
> db.collectionName.insert({"key": "value"})
> db.collectionName.save({"key": "value"})
```

#### 2. 删除数据库
要删除一个数据库，可以使用 `dropDatabase()` 命令。
```javascript
> db.dropDatabase()
```

#### 3. 创建集合
使用 `db.createCollection(name, options)` 方法创建集合。`options` 是一个可选参数，用于指定集合的配置。
```javascript
> db.createCollection("collectionName")
```

#### 4. 查看集合
使用 `show collections` 命令查看当前数据库中的所有集合。
```javascript
> show collections
```

#### 5. 删除集合
使用 `db.collection.drop()` 方法删除集合。
```javascript
> db.collectionName.drop()
```

#### 6. 使用分析器
数据库分析器（Profiler）收集正在运行的 `mongod` 实例的相关信息，包括增删改查命令及配置和管理命令。这些数据会被写入 `system.profile` 集合，该集合是一个管理员数据库中的有上限集合。默认情况下，分析器是关闭的，可以通过按数据库或实例开启。

#### 7. 主键与外键支持
默认情况下，MongoDB 不支持主键和外键关系。实现外键关联需要硬编码，不够直观且难度较大。

#### 8. 支持的数据类型
- String
- Integer
- Double
- Boolean
- Object
- Object ID
- Arrays
- Min/Max Keys
- Datetime
- Code
- Regular Expression 等

#### 9. Code 数据类型
`Code` 类型用于在文档中存储 JavaScript 代码。

#### 10. Regular Expression 数据类型
`Regular Expression` 类型用于在文档中存储正则表达式。

#### 11. Object ID 数据类型
`ObjectID` 用于存储文档的唯一标识符。它由四部分组成：时间戳、客户端 ID、客户进程 ID 和三个字节的增量计数器。

#### 12. 插入文档
使用 `insert()` 或 `save()` 方法将文档插入集合中。
```javascript
> db.collectionName.insert({"key": "value"})
> db.collectionName.save({"key": "value"})
```

#### 13. ObjectID 组成
`_id` 是一个 12 字节长的十六进制数，保证每个文档的唯一性。如果没有提供 `_id`，MongoDB 会自动生成一个唯一的 ID。

#### 14. 索引
索引用于高效执行查询。没有索引时，MongoDB 将扫描整个集合，效率低下。索引是一种特殊的数据结构，将一小块数据集保存为容易遍历的形式。

#### 15. 添加索引
使用 `db.collection.createIndex()` 方法创建索引。
```javascript
> db.collectionName.createIndex({columnName: 1})
```

#### 16. 格式化输出结果
使用 `pretty()` 方法格式化显示结果。
```javascript
> db.collectionName.find().pretty()
```

#### 17. 条件查询
- `AND` 条件：在 `find()` 方法中传入多个键并用逗号分隔。
```javascript
> db.mycol.find({key1: value1, key2: value2}).pretty()
```
- `OR` 条件：使用 `$or` 关键字。
```javascript
> db.mycol.find(
    {
        $or: [
            {key1: value1}, 
            {key2: value2}
        ]
    }
).pretty()
```

#### 18. 更新数据
使用 `update()` 或 `save()` 方法更新文档。
```javascript
> db.collectionName.update({key: value}, {$set: {newkey: newValue}})
```

#### 19. 删除文档
使用 `remove()` 方法删除文档。
```javascript
> db.collectionName.remove({key: value})
```

#### 20. 排序
使用 `sort()` 方法对文档进行排序。
```javascript
> db.collectionName.find({key: value}).sort({columnName: 1})
```

#### 21. 聚合
聚合操作处理数据记录并返回计算结果。使用 `aggregate()` 方法执行聚合操作。
```javascript
> db.COLLECTION_NAME.aggregate(AGGREGATE_OPERATION)
```

#### 22. 副本集
副本集由一组 MongoDB 实例组成，包括一个主节点和多个次节点。客户端的所有数据都写入主节点，副节点从主节点同步数据，以提高数据可用性。

### Spring Framework

#### 1. 不同版本的主要功能
- **Spring 2.0** (2007): 第一个支持注解的版本。
- **Spring 2.5** (2009): 完全利用了 Java 5 的改进，并为 JEE6 提供了支持。
- **Spring 3.0** (2013): 第一个完全支持 Java 8 的版本。
- **Spring 4.0** (2013): 引入了响应式编程的支持。

#### 2. Spring Framework 是什么？
Spring 是一个开源应用框架，旨在降低应用程序开发的复杂度。它是轻量级、松散耦合的，具有分层体系结构，允许用户选择组件。它可以集成其他框架，如 Struts、Hibernate、EJB 等，因此被称为“框架的框架”。

#### 3. Spring Framework 的优点
- 分层架构，用户可以自由选择组件。
- 支持 POJO 编程，具备持续集成和可测试性。
- 依赖注入和控制反转简化了 JDBC 操作。
- 开源免费。

#### 4. Spring Framework 的不同功能
- **轻量级**: 代码量少且透明。
- **IOC (控制反转)**: 管理对象的创建和生命周期。
- **AOP (面向切面编程)**: 将应用业务逻辑和系统服务分离。
- **容器**: 管理对象的生命周期和配置。
- **MVC**: 对 Web 应用提供了高度可配置性。
- **事务管理**: 提供通用抽象层。
- **JDBC 异常**: 提供异常层次结构，简化错误处理策略。

#### 5. Spring Framework 的模块
- **核心容器**: 包含 Spring Core、Spring Bean、SpEL、Spring Context。
- **数据访问/集成**: 包含 JDBC、ORM、OXM、JMS、Transaction。
- **Web**: 包含 Web、Servlet、WebSocket、Portlet。
- **AOP**: 支持面向切面编程。
- **Instrumentation**: 支持类检测和类加载器实现。
- **Test**: 支持使用 JUnit 和 TestNG 进行测试。
- **杂项模块**: 包括 Messaging、Aspects 等。

#### 6. Spring 配置文件
Spring 配置文件是 XML 文件，主要包含类信息及其配置方式。XML 配置文件可能冗长且难以管理，特别是在大型项目中。

#### 7. Spring 应用程序的组件
- **接口**: 定义功能。
- **Bean 类**: 包含属性、setter 和 getter 方法等。
- **AOP**: 提供面向切面编程的功能。
- **Bean 配置文件**: 包含类的信息及其配置方式。
- **用户程序**: 使用接口。

#### 8. 使用 Spring 的方式
- 作为成熟的 Spring Web 应用程序。
- 作为第三方 Web 框架，使用 Spring Framework 中间层。
- 用于远程调用。
- 作为企业级 Java Bean，包装现有的 POJO。

#### 9. Spring IOC 容器
Spring 容器负责创建、装配、配置和管理对象的完整生命周期。容器使用依赖注入来管理对象之间的依赖关系。