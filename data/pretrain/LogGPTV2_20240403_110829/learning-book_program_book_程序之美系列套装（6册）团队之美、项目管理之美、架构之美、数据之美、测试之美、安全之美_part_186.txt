## Page 1050
从高层次看来，操作系统虚拟化用于把几个虚拟机复合到单台物理
机器上。虚拟机可以运行操作系统；物理机器也可以运行操作系
统。那么，在虚拟机和物理机器之间有什么区别呢？
硬件是最显而易见的区别。在一台物理机器上，操作系统直接控制
所有相连的硬件：网卡、硬盘驱动器、显卡、鼠标和键盘。然而，
虚拟机不能直接访问这些硬件，否则它们将破坏每个虚拟机之间的
隔离性。例如，某个虚拟机可能不想让其他的虚拟机查看它在二级
存储器中存储的内容，或去读取它的网络信息包。此外，确保调度
中的公平使用也会很困滩。你可以为每个虚拟机配置某种类型的设
备，但是这会给虚拟化的并销和能力带来负面影响。解决办法是给
每个虚拟机一组虚拟硬件，这组虚拟硬件提供和真实硬件一样的功
能，但是，这组虚拟硬件会复用物理设备。
当操作系统在虚拟机中运行时，一个更微妙的区别出现了。一般来
说，操作系统内核是运行在计算机上的最有特权的软件，这允许它
执行用户程序不能执行的某些指令。在虚拟化的情况下，系统管理
程序是最有特权的，而操作系统内核在相对较低的权限下运行。如
果操作系统现在试图执行这些指令，那它们就会失败，但是它们失
败的方式是至关重要的。如果它们引起系统管理程序会捕获的一个
错误，系统管理程序可以恰当地模拟这个指令并继续控制虚拟机。
然而，在x86上存在一些在较低权限下表现不同的指令一例如，默
默地失败而不触发系统管理程序。对于虚拟化来说这是环消息，因
为这妨碍了操作系统在虚拟机上适当地工作。显然，必须改变这些
指令，普遍的技术（至少在Xen之前）是在运行时扫描操作系统代
码，寻找特定的指令并用直接调用系统管理程序的代码替换它们。
实际上，在Xen之前，大多数虚拟化软件打算使虚拟硬件看起来完
全像物理硬件。所以，虚拟设备就像物理设备一样运转，模拟相同
的协议，当重写代码时确保操作系统不做修改就能运行。虽然这具
有理想的兼容性，但在性能上有很大的并销。当发布Xen时，它表
明，通过放弃理想的兼容性，性能会显著地提高。
7.4半虚拟化
半虚拟化的观点是移除一个架构（例如x86）中难以虚拟化或如果
进行虚拟化开销很大的所有特性，用与虚拟化层直接通信的半虚拟
化操作替换它们。Denali中第一次使用了这种技术，Denali是移植了
1049
---
## Page 1051
专门编写的Ⅱlwaco客户操作系统的虚拟机监视器。Xen通过运行商业
操作系统的半虚拟化版本而更进了一步。!1
一个操作系统的半虚拟化包括重写与半虚拟化架构不兼容的所有代
码。性能改进了，因为开发人员已经预先进行了转换，而不是在运
行时。为了展示半虚拟化的能力，Xen团队需要一个他们可以改变
的操作系统。幸运的是，可以使用Limux，它是并源的，而且广泛使
用。对Linux内核只修改或增加2995行代码，就可以使它能够在Xen
上运行：这连x86Linux代码的2%都不到。通过半虚拟化（就像通过
虚拟化一样），所有现有的用户应用程序都可以继续使用而不作任
何修改，所以，总的修改不是非常扩散的。
为了实现半虚拟化，你必须自己写操作系统（Denali的方式），或
修改一个现有的开源操作系统（例如Linux或BSD），或使得操作系
统开发人员确信半虚拟化代码是值得的。最初的Xen研究版本在修
改过的Limux上运行时在许多方面获得了令人印象非常深刻的接近本
地的性能。性能，还有Xen作为开源软件进行发布的事实，使得操
作系统并发人员开始半虚拟化部分的代码，以便他们的操作系统可
以在Xen的系统管理软件上更高效地运行。更鼓舞人心的是，为Xen
和其他系统管理软件开发的半虚拟化操作已经标准化到最新版的
Limux内核中。通过在标准内核中支持Xen（和其他系统管理软
件），虚拟化的推进变得容易得多。
半虚拟化是如何工作的呢？全部的细节太过复杂以致不能在这里进
行阐述，但本章末尾的7.8节列出了深入讨论这一技术的论文。这
里，我们将探究两个半虚拟化的例子：虚拟内存和虚拟设备。
半虚拟化一个操作系统的第一步是意识到它不是运行在这台计算机
上最有权限的软件；那个级别的权限给予了系统管理软件。大部分
的处理器至少拥有两个模式：超级用户（supervisor）和用户
（user）模式。通常，操作系统内核会以超级用户的模式运行，但
这已经留给了Xen，所以它必须修改为以用户模式运行。[2l然而，
当以用户模式运行时，有几个操作是不合法的。在一个常规的操作
系统中，进程之间必须相互保护，这至关重要。因此，内核必须使
用一种名为超级调用（hypercall）的机制来要求系统管理程序代表
它执行这些操作。超级调用类似于系统调用（从用户进程调用内
核），只不过它用于在内核和系统管理程序之间通信，而且它通常
实现较低级别的操作。
1050
---
## Page 1052
虚拟内存用来确保进程不能和其他进程的数据或代码进行交互。每
个进程都给定虚拟地址空间，这确保那个进程只能存取分配给它的
内存。内核通过维护页表（页表把虚拟地址映射到确定内存芯片中
数据的实际位置的物理地址）来负责创建虚拟地址空间。当它在
个虚拟机中运行时，内核不能自由地管理这些表，因为它可以映射
到属于另一个虚拟机的内存。因此，Xen必须验证页表的所有更
新，而当内核想要修改任何页表时必须通知系统管理程序。如果系
统管理程序涉及每个页表更新，那么效率会非常低（例如，当启动
一个新的进程并最初构建它的页表时）。然而，结果表明这种情况
相对较少，而且，Xen可以通过批处理这些更新请求或在页表更新
时“松开"页表来分摊转给系统管理程序的开销。
请看图7-2。所有的虚拟机分享了整个物理内存。[L然而，这些内
存可能不是相邻的，而且，在大多数情况下也不会从物理地址0并
始。因此，每个虚拟机内核都处理两种类型的地址：物理地址（或
机器地址）和伪物理地址。物理地址相应于内存芯片中数据的实际
位置，而伪物理地址向虚拟机提供了从0开始的连续物理地址空间
的假象。伪物理地址对于依赖这个假定的、否则必须半虚拟化的某
些算法或子系统是有用的。
物理内存
Xen
虚拟机
2
虚拟机
1
虚拟机
0
图7-2：虚拟机内存配置
在任何实际的使用中，都必须能够和虚拟机进行交互。虚拟机至少
需要一个磁盘（严格来说，称之为块设备）和一块网卡。±1因为大
1051
---
## Page 1053
多数操作系统至少支持一个块设备和一块网卡，让系统管理程序模
拟这些设备以便可以使用最初的驱动程序，这似乎很诱人。然而，
软件的实现会努力模拟实际设备的性能，模拟设备的模式可能不得
不绕弯路（例如实现硬件协议），用软件实现硬件的功能是不必要
和低效的。
还有其他实现方式吗？
虚拟化虚拟内存（当你不能改变操作系统时）的标准方式是使用影
子页表。通过它们，访客会处理伪物理地址（例如，相邻的和从0
开始的地址）而不是物理地址。
访客靠着这个地址空间维护他自己的页表。然而，它们不能由硬件
使用，因为它们并不对应真实的物理地址。因此，系统管理程序更
新这些访客页表，并用它们构建一张会把虚拟地址转化为物理地址
的影子页表。
这个方法无疑会有一些开销，但是，当你不能修改操作系统时这是
必需的。
Xen对硬件虚拟化的访客使用了这个方法的一个变体，正如本章后
面所述。
因为Xen不必一定支持未修改的操作系统，所以它可以自由地引入
虚拟块和网卡驱动。两者以相似的方式运作：它们包含访客虚拟机
中的前端驱动和虚拟软件中的后端驱动。这两个设备利用环形缓冲
进行通信，环形缓冲是用来在虚拟机之间传输大容量数据的一种高
性能机制。这产生一个柔性层架构（如图7-3所示）：前端实现了操
作系统的网络或块设备接口以便它对于操作系统就像是一个常规的
硬件设备，后端把这个虚拟设备和真实的硬件连接起来。虚拟块设
备可能会连接到一个包含磁盘映像的文件或一个实际的磁盘分区；
虚拟网卡设备可能会连在一个软件网桥上，而它本身连在一块真实
的网卡上。环形缓冲这个抽象概念确保前端和后端完全分离。一个
后端可以支持来自Linux、BSD或Windows的前端，反之，相同的前
端可以和各种后端一起使用，所以，像写时复制（copy-on-
write）、加密和压缩这样的特性可以显而易见地加给访客。就像互
联网协议，Xen的分设备模式可以操作大批硬件，而且它支持多数
较高级别的客户端，如图7-3所示。
1052
---
## Page 1054
半虚拟化包括的内容远远超过这些例子。例如，当一个操作系统可
以从CPU换出时，时间的意义就改变了，而Xen引入了虚拟时间的
概念来确保操作系统仍然像预期的那样运行。还有许多其他的虚拟
设备，内存的半虚拟化利用其他的优化来确保高效的性能。如果想
要了解更多关于这方面的资料，请阅读本章末尾的7.8节。
FAT32
NTFS
ext2ex13XFS
UFS
ZFS
Windows
Linux
Solaris
前端
前端
前端
环形缓冲
后端
加密
写时复制
检查点
压缩
SATA
IDE
图7-3：分块设备的沙漏型架构
[L].当然，关于VM/370（20世纪60年代IBM的操作系统，虚拟化的
起源）是第一个半虚拟化操作系统的说法可能存在争议。然而，自
从IBM设计了指令集、操作系统和虚拟机监视器，这种方式应对了
不同的挑战，直到现代的半虚拟化。
[2]x86架构有四个权限级别（或称为ring），0表示最大权限，3表
示最小权限。在它的32位版本中，Xen以ring0运行，半虚拟化内核
以ring1运行，用户应用程序和往常一样，以ring3运行。然而，在
64位版本中，由于内存分段硬件的差异，半虚拟化内核以ring3运
行。
1053
---
## Page 1055
[3]请注意，Xen不支持过量使用物理内存，所以没有虚拟机的交换
技术。然而，可以利用一个名为ballooning的进程改变虚拟机的内存
覆盖区。
[4]你可能认为对于交互来说鼠标、键盘和视频输出是必需的，但
是，这些可以由像VNC这样的远程桌面客户端提供。不过，最新版
本的Xen已经包括了对这些虚拟设备的支持。
7.5Xen的变换形式
一个以Xen为基础的系统的传统描述表明几个虚拟机（Xen中称为域