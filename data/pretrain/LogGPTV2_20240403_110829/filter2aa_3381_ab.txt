# Symbolic Execution with Triton and GDB

## Introduction
This document outlines the process of using Triton, a dynamic binary analysis framework, in conjunction with GDB to perform symbolic execution. The goal is to symbolize program states and solve for constraints to find inputs that satisfy certain conditions.

## Initial Approach
### Attempted Method
- **Objective**: Use Triton callbacks to get memory and register values.
- **Callbacks Registered**:
  - `needConcreteMemoryValue`
  - `needConcreteRegisterValue`
- **Code Sequence**:
  ```assembly
  mov eax, 5
  mov ebx, eax  ; Triggers needConcreteRegisterValue
  ```
- **Context Setup**: Set Triton context for `eax`.

### Problems Encountered
- **Outdated Values**: Values from GDB were not up-to-date.
- **Example**:
  ```assembly
  mov eax, 5
  ; Set breakpoint here and call Triton's processing()
  mov ebx, eax  ; Callback triggers, gets eax = 5
  mov eax, 10
  mov ecx, eax  ; Callback triggers again, gets eax = 5 (outdated)
  ```

### Solutions Tried
- **Check Context**: Before deriving values from GDB, check if they are already in Triton's context.
- **Issue**: This led to an infinite loop.

### Successful Method
- **Copy GDB Context to Triton**: Load all segments into Triton's context.
- **Benefits**:
  - Symbolic execution does not affect the original GDB state.
  - Users can restart symbolic execution from a breakpoint.

## Workflow
1. **Get Debugged Program State**: Call GDB Python API.
2. **Yield to Triton**: Pass the current program state to Triton.
3. **Set Symbolic Variable**: Define the target address.
4. **Run Symbolic Execution**: Execute and get the output.
5. **Inject Back**: Inject the results back into the debugged program state.

## SymGDB System Structure
### Implementation of System Internals
- **Classes in symGDB**:
  - `Arch()`: Provides different pointer sizes and register names.
  - `GdbUtil()`: Manages read/write memory, read/write registers, memory mapping, architecture detection, and argument list.
  - `Symbolic()`: Sets constraints on the PC register and runs symbolic execution.

### Relationship Between SymGDB Classes
- `Arch()` provides necessary architectural details.
- `GdbUtil()` handles interactions with GDB.
- `Symbolic()` manages symbolic execution and constraints.

### Supported Commands
- **Command**: `symbolize argv memory [address][size]`  
  **Functionality**: Make memory symbolic.
- **Command**: `target address`  
  **Functionality**: Set target address.
- **Command**: `triton`  
  **Functionality**: Run symbolic execution.
- **Command**: `answer`  
  **Functionality**: Print symbolic variables.
- **Command**: `debug symbolic gdb`  
  **Functionality**: Show debug messages.

## Symbolic Execution Process in GDB
- **Get Registers**: `gdb.execute("info registers", to_string=True)`
- **Read Memory**: `gdb.selected_inferior().read_memory(address, length)`
- **Set Triton State**: `setConcreteMemoryAreaValue` and `setConcreteRegisterValue`
- **Check Symbolization**: `isRegisterSymbolized` for each instruction.
- **Set Target Address as Constraint**
- **Get Model**: `getModel`
- **Inject Back**: `gdb.selected_inferior().write_memory(address, buf, length)`

## Symbolic Environment: Symbolic `argv`
- **Stack Start Address**: Use `info proc all` to get the stack start address.
- **Memory Content**:
  - `argc`: Argument counter (integer).
  - `argv[0]`: Program name (pointer).
  - `argv[1]`: Program arguments (pointers).
  - `argv[argc-1]`: Null (end of args, integer).
  - `env[0]`: Environment variables (pointers).
  - `env[n]`: Null (end of environment, integer).

## Debug Tips
- **Simplify**: [Triton Simplification Example](https://github.com/JonathanSalwan/Triton/blob/master/src/examples/python/simplification.py)

## Demos
### Crackme Hash
- **Source**: [GitHub](https://github.com/illera88/Ponce/blob/master/examples/crackme_hash.cpp)
- **Behavior**:
  - Passes `argv[1]` to a check function.
  - XORs `argv[1]` with a fixed string.
  - If the sum of the XOR result equals `0xABCD`, prints "Win"; otherwise, prints "Fail".

### Crackme Xor
- **Source**: [GitHub](https://github.com/illera88/Ponce/blob/master/examples/crackme_xor.cpp)
- **Behavior**:
  - Passes `argv[1]` to a check function.
  - XORs `argv[1]` with `0x55`.
  - If the XOR result does not equal a fixed string, returns 1 and prints "Fail".
  - If the program goes through all loops, returns 0 and prints "Win".

### Combined with Peda
- **Demo Video**: Same as crackme hash.
- **Commands**:
  - `find` (Peda command) to find `argv[1]` address.
  - `symbolize memory [argv[1]_address] [argv[1]_length]` to make `argv[1]` memory symbolic.

## Drawbacks
- **GNU C Library Support**: Triton does not support GNU C library.
- **Reason**: SMT semantics supported by Triton do not include system call interfaces like `int 0x80`.

## Comparison with Angr
| Feature          | Triton  | Angr    |
|------------------|---------|---------|
| Architecture     | x86, amd64 | x86, amd64, arm, ... |
| GNU C Library    | No      | Yes     |
| Path Exploration | No      | Yes     |

## References
- **Wikipedia**: [Symbolic Execution](https://en.wikipedia.org/wiki/Symbolic_execution)
- **Triton**: [Official Website](https://triton.quarkslab.com/)
- **GDB Python API**: [Documentation](https://sourceware.org/gdb/onlinedocs/gdb/Python-API.html)
- **Peda**: [GitHub](https://github.com/longld/peda)
- **Ponce**: [GitHub](https://github.com/illera88/Ponce)
- **Angr**: [Official Website](http://angr.io/)

## Q&A
Thank you for your attention. Feel free to ask any questions.