  output
Read memory
Write	
  memory
Failed	
  method
• At	
  first,	
  I	
  try	
  to	
  use	
  Triton	
  callback	
  to	
  get	
  memory	
  and	
  register	
  values
• Register	
  callbacks:
• needConcreteMemoryValue
• needConcreteRegisterValue
• Process	
  the	
  following	
  sequence	
  of	
  code
• mov eax,	
  5
• mov ebx,eax (Trigger	
  needConcreteRegisterValue)
• We	
  need	
  to	
  set	
  Triton	
  context	
  of	
  eax
Triton	
  callbacks
Problems
• Values	
  from	
  GDB	
  are	
  out	
  of	
  date
• Consider	
  the	
  following	
  sequence	
  of	
  code
• mov eax,	
  5
• We	
  set	
  breakpoint	
  here,	
  and	
  call	
  Triton's	
  processing()	
• mov ebx,eax (trigger	
  callback	
  to	
  get	
  eax value,	
  eax =	
  5)
• mov eax,	
  10
• mov ecx,	
  eax (Trigger	
  again,	
  get	
  eax =	
  5)
• Because	
  context	
  state	
  not	
  up	
  to	
  date
Tried	
  solutions
• Before	
  needed	
  value	
  derived	
  from	
  GDB,	
  check	
  if	
  it	
  is	
  not	
  in	
  the	
Triton's	
  context	
  yet
Not	
  working!
Triton	
  will	
  fall	
  into	
  infinite	
  loop
Successful	
  method
• Copy	
  GDB	
  context	
  into	
  Triton
• Load	
  all	
  the	
  segments	
  into	
  Triton	
  context
• Symbolic	
  execution	
  won't	
  affect	
  original	
  GDB	
  state
• User	
  could	
  restart	
  symbolic	
  execution	
  from	
  breakpoint
Flow
• Get	
  debugged	
  program	
  state	
  by	
  calling	
  GDB	
  Python	
  API
• Get	
  the	
  current	
  program	
  state	
  and	
  yield	
  to	
  triton
• Set	
  symbolic	
  variable
• Set	
  the	
  target	
  address
• Run	
  symbolic	
  execution	
  and	
  get	
  output
• Inject	
  back	
  to	
  debugged	
  program	
  state
SymGDB System	
  Structure
Implementation	
  of	
  System	
  Internals
• Three	
  classes	
  in	
  the	
  symGDB
• Arch(),	
  GdbUtil(),	
  Symbolic()
• Arch()
• Provide	
  different	
  pointer	
  size、register	
  name
• GdbUtil()
• Read	
  write	
  memory、read	
  write	
  register
• Get	
  memory	
  mapping	
  of	
  program
• Get	
  filename	
  and	
  detect	
  architecture
• Get	
  argument	
  list
• Symbolic()
• Set	
  constraint	
  on	
  pc	
  register
• Run	
  symbolic	
  execution
Relationship	
  between	
  SymGDB classes
Supported	
  Commands
Command
Option	
Functionality	
symbolize
argv
memory	
  [address][size]
Make	
  symbolic
target
address
Set	
  target	
  address
triton	
None
Run	
  symbolic	
  execution	
answer
None
Print	
  symbolic	
  variables
debug
symbolic
gdb
Show	
  debug	
  messages
Symbolic	
  Execution	
  Process	
  in	
  GDB
• gdb.execute("info	
  registers",	
  to_string=True)	
  to	
  get	
  registers
• gdb.selected_inferior().read_memory(address,	
  length)	
  to	
  get	
  memory
• setConcreteMemoryAreaValue and	
  setConcreteRegisterValue to	
  set	
triton	
  state
• In	
  each	
  instruction,	
  use	
  isRegisterSymbolized to	
  check	
  if	
  pc	
  register	
  is	
symbolized	
  or	
  not
• Set	
  target	
  address	
  as	
  constraint
• Call	
  getModel to	
  get	
  answer
• gdb.selected_inferior().write_memory(address,	
  buf,	
  length)	
  to	
  inject	
back	
  to	
  debugged	
  program	
  state
Symbolic	
  Environment:	
  symbolic	
  argv
• Using	
  "info	
  proc	
  all"	
  to	
  get	
  stack	
start	
  address
• Examining	
  memory	
  content	
  from	
stack	
  start	
  address
• argc
• argv[0]
• argv[1]
• ……
• null
• env[0]
• env[1]
• ……
• null
argc
argument	
  counter(integer)
argv[0]
program	
  name	
  (pointer)
argv[1]
program	
  args (pointers)
…
argv[argc-­‐1]
null
end	
  of	
  args (integer)
env[0]
environment	
  variables	
  (pointers)
env[1]
…
env[n]
null
end	
  of	
  environment	
   (integer)
Debug	
  tips
• Simplify:	
https://github.com/JonathanSalwan/Triton/blob/master/src/example
s/python/simplification.py
Demo
• Examples
• crackme hash
• crackme xor
• GDB	
  commands
• Combined	
  with	
  Peda
crackme hash
• Source:	
https://github.com/illera88/Ponce/blob/master/examples/crackme_h
ash.cpp
• Program	
  will	
  pass	
  argv[1]	
  to	
  check	
  function
• In	
  check	
  function,	
  argv[1]	
  xor with	
  serial(fixed	
  string)
• If	
  sum	
  of	
  xored result	
  equals	
  to	
  0xABCD
• print	
  "Win"
• else
• print	
  "fail"
crackme hash
crackme hash
crackme hash
crackme xor
• Source:	
https://github.com/illera88/Ponce/blob/master/examples/crackme_xor.cpp
• Program	
  will	
  pass	
  argv[1]	
  to	
  check	
  function
• In	
  check	
  function,	
  argv[1]	
  xor with	
  0x55
• If	
  xored result	
  not	
  equals	
  to	
  serial(fixed	
  string)	
• return	
  1
• print	
  "fail"
• else
• go	
  to	
  next	
  loop
• If	
  program	
  go	
  through	
  all	
  the	
  loop	
• return	
  0
• print	
  "Win"
crackme xor
crackme xor
crackme xor
GDB	
  commands
GDB	
  commands
Combined	
  with	
  Peda
• Same	
  demo	
  video	
  of	
  crackme hash
• Using	
  find(peda command)	
  to	
  find	
  argv[1]	
  address
• Using	
  symbolize	
  memory	
  argv[1]_address	
  argv[1]_length	
  to	
  symbolic	
argv[1]	
  memory
Combined	
  with	
  Peda
Drawbacks
• Triton	
  doesn't	
  support	
  GNU	
  c	
  library
• Why?
• SMT	
  Semantics	
  Supported:	
https://triton.quarkslab.com/documentation/doxygen/SMT_Semanti
cs_Supported_page.html
• Triton	
  has	
  to	
  implement	
  system	
  call	
  interface	
  to	
  support	
  GNU	
  c	
  library
a.k.a.	
  support	
  "int 0x80"
Triton	
  versus	
  Angr
Difference
Triton
Angr
Architecture
support
x86	
amd64
x86	
  amd64	
  arm	
  ……
GNU	
  c	
  library
support
No
Yes
Path	
  explore
No
Yes
References
• Wiki:	
  https://en.wikipedia.org/wiki/Symbolic_execution
• Triton:	
  https://triton.quarkslab.com/
• GDB	
  Python	
  API:	
https://sourceware.org/gdb/onlinedocs/gdb/Python-­‐API.html
• Peda:	
  https://github.com/longld/peda
• Ponce:	
  https://github.com/illera88/Ponce
• Angr:	
  http://angr.io/
Bamboofox
Q	
  &	
  A
Thank	
  you