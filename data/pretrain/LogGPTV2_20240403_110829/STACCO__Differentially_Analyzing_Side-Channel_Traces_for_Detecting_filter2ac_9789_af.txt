an Untrusted Operating System on Trusted Hardware. In 19th ACM Symposium
on Operating Systems Principles. ACM.
[46] Chi-Keung Luk, Robert Cohn, Robert Muth, Harish Patil, Artur Klauser, Geoff
Lowney, Steven Wallace, Vijay Janapa Reddi, and Kim Hazelwood. 2005. Pin:
building customized program analysis tools with dynamic instrumentation. In
Acm sigplan notices, Vol. 40. ACM, 190–200.
James Manger. 2001. A chosen ciphertext attack on RSA optimal asymmet-
ric encryption padding (OAEP) as standardized in PKCS# 1 v2. 0. In Annual
International Cryptology Conference. Springer, 230–238.
[48] Sinisa Matetic, Mansoor Ahmed, Kari Kostiainen, Aritra Dhar, David Sommer,
Arthur Gervais, Ari Juels, and Srdjan Capkun. 2017. ROTE: Rollback Protection
for Trusted Execution. IACR Cryptology ePrint Archive 2017 (2017), 48.
Jonathan McCune, Bryan Parno, Adrian Perrig, Michael Reiter, and Hiroshi
Isozaki. 2008. Flicker: An execution infrastructure for TCB minimization. In
ACM SIGOPS Operating Systems Review, Vol. 42. ACM, 315–328.
[50] Frank McKeen, Ilya Alexandrovich, Alex Berenzon, Carlos Rozas, Hisham Shafi,
Vedvyas Shanbhogue, and Uday Savagaonkar. 2013. Innovative instructions and
software model for isolated execution. HASP@ ISCA 10 (2013).
[51] Christopher Meyer, Juraj Somorovsky, Eugen Weiss, Jörg Schwenk, Sebastian
Schinzel, and Erik Tews. 2014. Revisiting SSL/TLS implementations: New Ble-
ichenbacher side channels and attacks. In 23rd USENIX Security Symposium
[47]
[49]
(USENIX Security 14). 733–748.
[52] Bodo Möller, Thai Duong, and Krzysztof Kotowicz. 2014. This POODLE bites:
exploiting the SSL 3.0 fallback. (2014). https://www.openssl.org/~bodo/ssl-poodle.
pdf.
[53] Nicholas Nethercote and Julian Seward. 2007. Valgrind: a framework for heavy-
weight dynamic binary instrumentation. In ACM Sigplan notices, Vol. 42. ACM,
89–100.
[54] Olga Ohrimenko, Felix Schuster, Cédric Fournet, Aastha Mehta, Sebastian
Nowozin, Kapil Vaswani, and Manuel Costa. 2016. Oblivious Multi-Party Machine
Learning on Trusted Processors. In USENIX Security Symposium. 619–636.
[55] Harish Patil, Cristiano Pereira, Mack Stallcup, Gregory Lueck, and James Cownie.
2010. Pinplay: a framework for deterministic replay and reproducible analysis
of parallel programs. In 8th annual IEEE/ACM international symposium on Code
generation and optimization. ACM, 2–11.
[56] Dan R. K. Ports and Tal Garfinkel. 2008. Towards Application Security on
Untrusted Operating Systems. In 3rd Conference on Hot Topics in Security.
[57] Ashay Rane, Calvin Lin, and Mohit Tiwari. 2015. Raccoon: Closing Digital
Side-Channels through Obfuscated Execution. In USENIX Security Symposium.
431–446.
[58] Eric Rescorla. 2006. The transport layer security (TLS) protocol version 1.1.
Transport (2006).
[67]
[61]
[59] Felix Schuster, Manuel Costa, Cédric Fournet, Christos Gkantsidis, Marcus
Peinado, Gloria Mainar-Ruiz, and Mark Russinovich. 2015. VC3: Trustwor-
thy data analytics in the cloud using SGX. In 2015 IEEE Symposium on Security
and Privacy. IEEE, 38–54.
[60] Michael Schwarz, Samuel Weiser, Daniel Gruss, Clémentine Maurice, and Ste-
fan Mangard. 2017. Malware Guard Extension: Using SGX to Conceal Cache
Attacks. Springer International Publishing, Cham, 3–24. https://doi.org/10.1007/
978-3-319-60876-1_1
Jaebaek Seo, Byounyoung Lee, Seongmin Kim, Ming-Wei Shih, Insik Shin, Dongsu
Han, and Taesoo Kim. 2017. SGX-Shield: Enabling address space layout ran-
domization for SGX programs. In 2017 Annual Network and Distributed System
Security Symposium (NDSS), San Diego, CA.
[62] Ming-Wei Shih, Sangho Lee, Taesoo Kim, and Marcus Peinado. 2017. T-SGX:
Eradicating controlled-channel attacks against enclave programs. In 2017 Annual
Network and Distributed System Security Symposium (NDSS), San Diego, CA.
[63] Shweta Shinde, Zheng Leong Chua, Viswesh Narayanan, and Prateek Saxena.
2016. Preventing Page Faults from Telling Your Secrets. In 11th ACM Symposium
on Information, Computer and Communications Security.
[64] Shweta Shinde, Dat Le Tien, Shruti Tople, and Prateek Saxena. 2017. PANOPLY:
Low-TCB Linux Applications With SGX Enclaves. In 2017 Annual Network and
Distributed System Security Symposium(NDSS), San Diego, CA.
[65] Rohit Sinha, Manuel Costa, Akash Lal, Nuno Lopes, Sriram Rajamani, Sanjit
Seshia, and Kapil Vaswani. 2016. A Design and Verification Methodology for
Secure Isolated Regions. In 37th ACM SIGPLAN Conference on Programming
Language Design and Implementation. ACM.
Juraj Somorovsky. 2016. Systematic Fuzzing and Testing of TLS Libraries. In
ACM SIGSAC Conference on Computer and Communications Security. ACM.
Juraj Somorovsky. 2016. Systematic Fuzzing and Testing of TLS Libraries. In
2016 ACM SIGSAC Conference on Computer and Communications Security. ACM,
1492–1504.
[68] Richard Ta-Min, Lionel Litty, and David Lie. 2006. Splitting Interfaces: Making
Trust Between Applications and Operating Systems Configurable. In 7th USENIX
Symposium on Operating Systems Design and Implementation.
[69] Florian Tramer, Fan Zhang, Huang Lin, Jean-Pierre Hubaux, Ari Juels, and Elaine
Shi. 2017. Sealed-glass proofs: Using transparent enclaves to prove and sell
knowledge. In 2017 IEEE European Symposium on Security and Privacy. IEEE,
19–34.
[70] Chia-Che Tsai, Kumar Saurabh Arora, Nehal Bandi, Bhushan Jain, William
Jannen, Jitin John, Harry Kalodner, Vrushali Kulkarni, Daniela Oliveira, and
Donald Porter. 2014. Cooperation and security isolation of library OSes for
multi-process applications. In Ninth European Conference on Computer Systems.
ACM.
[66]
[72]
[71] Serge Vaudenay. 2002. Security Flaws Induced by CBC Padding-Applications to
SSL, IPSEC, WTLS.... In International Conference on the Theory and Applications
of Cryptographic Techniques. Springer, 534–545.
Josef Weidendorfer, Markus Kowarschik, and Carsten Trinitis. 2004. A tool
suite for simulation based analysis of memory access behavior. In International
Conference on Computational Science. Springer, 440–447.
[73] Yuanzhong Xu, Weidong Cui, and Marcus Peinado. 2015. Controlled-channel
attacks: Deterministic side channels for untrusted operating systems. In 2015
IEEE Symposium on Security and Privacy. IEEE, 640–656.
Jisoo Yang and Kang Shin. 2008. Using Hypervisor to Provide Data Secrecy for
User Applications on a Per-page Basis. In 4th ACM SIGPLAN/SIGOPS International
Conference on Virtual Execution Environments (VEE). ACM.
[75] Charles Yount, Harish Patil, Mohammad Islam, and Aditya Srikanth. 2015. Graph-
matching-based simulation-region selection for multiple binaries. In Performance
[74]
Analysis of Systems and Software (ISPASS), 2015 IEEE International Symposium on.
IEEE, 52–61.
[76] Fan Zhang, Ethan Cecchetti, Kyle Croman, Ari Juels, and Elaine Shi. 2016. Town
crier: An authenticated data feed for smart contracts. In 2016 ACM SIGSAC
Conference on Computer and Communications Security. ACM, 270–282.
[77] Fengzhe Zhang, Jin Chen, Haibo Chen, and Binyu Zang. 2011. CloudVisor:
Retrofitting Protection of Virtual Machines in Multi-tenant Cloud with Nested
Virtualization. In 23rd ACM Symposium on Operating Systems Principles. ACM.
[78] Xiaokuan Zhang, Yuan Xiao, and Yinqian Zhang. 2016. Return-Oriented Flush-
Reload Side Channels on ARM and Their Implications for Android Devices. In
2016 ACM SIGSAC Conference on Computer and Communications Security. ACM,
858–870.
[79] Yinqian Zhang, Ari Juels, Michael Reiter, and Thomas Ristenpart. 2014. Cross-
tenant side-channel attacks in PaaS clouds. In 2014 ACM SIGSAC Conference on
Computer and Communications Security. ACM, 990–1003.
A EXAMPLES OF SENSITIVE
CONTROL-FLOW VULNERABILITIES
A.1 Padding Oracles in mbedTLS(-SGX)
In mbedTLS v2.4.1 and mbedTLS-SGX, the decryption oracle can
be constructed by monitoring the function sha1_process_wrap()
and mbedtls_sha1_process(). Particularly, as shown in Listing 3,
the function ssl_decrypt_buf() calls mbedtls_md_process(),
which is a wrapper function that calls both sha1_process_wrap()
and mbedtls_sha1_process(), to conceal the timing difference
caused by removing the paddings before calculating the MAC.
However, the number of times mbedtls_md_process() is called
depends on the value of extra_run, which is calculated from the
length of the padding, padlen. Particularly, when the padding is
incorrect, padlen will be 0, and mbedtls_md_process() is called
only once. Therefore, the number of calls to sha1_process_wrap()
and mbedtls_sha1_process(), which are located on different pages,
has been exploited as the oracle in our demonstrated attacks. We
note that the padding oracle is created due to the improper constant-
time implementation of defenses to existing attacks.
A.2 Bleichenbacher Attack Oracles in OpenSSL
The oracle in OpenSSL 1.0.2j is created by function RSAerr().
As shown in Listing 5, in RSA_padding_check_PKCS1_type_2(),
when any error is detected during the PKCS decoding procedure,
mlen will be set to -1. Thus RSAerr() will be called to report the
error before the function returns. After returning to the caller func-
tion RSA_eay_private_decrypt() (shown in Listing 4), RSAerr()
is called one more time. These two calls to the RSAerr() reveals a
non-PKCS-conformant formatting, which can be exploited as an
oracle for Bleichenbacher attacks. The vulnerabilities in OpenSSL
is not because of a failed constant-time implementation, but the
redundant error reporting and logging mechanisms. One possi-
ble suggestion is to avoid repeated error reporting that are due to
different reasons.
A.3 Bleichenbacher Oracles in GnuTLS
Similar to OpenSSL, the RSA decryption oracle in GnuTLS is also
due to error logging and reporting. As shown in Listing 6, the
function _gnutls_debug_log() is called for either an incorrect
PKCS format or incorrect version numbers. Although GnuTLS ap-
plies the countermeasure against Bleichenbacher attack by using
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
Listing 3: Snippet of ssl_decrypt_buf()
...
padlen &= correct * 0x1FF;
...
size_t j, extra_run = 0;
extra_run = ( 13 + ssl->in_msglen + padlen + 8 ) / 64
- ( 13 + ssl->in_msglen + 8 ) / 64;
extra_run &= correct * 0xFF;
mbedtls_md_hmac_update(
&ssl->transform_in->md_ctx_dec, ssl->in_ctr, 8 );
mbedtls_md_hmac_update(
&ssl->transform_in->md_ctx_dec, ssl->in_hdr, 3 );
mbedtls_md_hmac_update(
&ssl->transform_in->md_ctx_dec, ssl->in_len, 2 );
mbedtls_md_hmac_update(
&ssl->transform_in->md_ctx_dec, ssl->in_msg,
ssl->in_msglen );
mbedtls_md_hmac_finish(
&ssl->transform_in->md_ctx_dec,
/* Call mbedtls_md_process at least once due to cache
ssl->in_msg + ssl->in_msglen );
attacks */
for( j = 0; j transform_in->md_ctx_dec, ssl->in_msg
);
22
...
Listing 4: RSA_eay_private_decrypt()
...
switch (padding) {
case RSA_PKCS1_PADDING:
r = RSA_padding_check_PKCS1_type_2(to, num,
buf, j, num);
break;
...
}
if (r  num)
goto err;
if (num internals.priorities.allow_wrong_pms == 0
&& _gnutls_get_adv_version_minor(session) !=
plaintext.data[1])) {
_gnutls_debug_log("auth_rsa: Possible PKCS
#1 version check format attack\n");
}
}
...
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15