channel, and may deliver either an automated message
or interact directly with the targeted user. Lastly, the
adversary may use advanced telephony features such as
three-way calling to connect and disconnect parties arbi-
trarily. This model describes the majority of adversaries
committing Caller ID fraud at the time of this work.
Our scenario contains two classes of participants, a
Veriﬁer (i.e., the user) and Prover (i.e., either the attacker
of the legitimate identity owner). The adversary is ac-
tive and will attempt to assert an arbitrary identity. As is
common on the Web, we assume that Provers have cer-
tiﬁcates issued by their service provider4 containing their
public key and that Veriﬁers may have weak credentials
(e.g., account numbers, PINs, etc) but do not have cer-
tiﬁcates. We seek to achieve the following security goals
in the presence of this adversary:
1. (G1) Authentication of Prover: The Veriﬁer
should be able to explicitly determine the validity of
an asserted Caller ID and the identity of the Prover
without access to a secondary data channel.
4See Section 7 for details.
USENIX Association  
25th USENIX Security Symposium  969
7
Mobile
(Veriﬁer)
(0) Initiate Call
(1) V, NV
(2) P, NP , CP , D(KP
-, P, NP)
(3) E(KP
+,S), H(k,'VRFY', #1, #2)
(4) H(k,'PROV', #1, #2) 
.
.
.
(n-1) H(k, V, NV+n-1)
(n) H(k, P, NP+n) 
Call Center
(Prover)
C:
E:
H:
D:
K+,-:
k:
N:
P:
S:
V:
Certiﬁcate
Encryption
HMAC
Digital Signature
Public/Private Key
Symmetric Key
Nonce
Prover
Pre-Master Secret
Veriﬁer
Figure 5: The AuthLoop authentication protocol. Solid arrows indicate the initial handshake message ﬂows, and dotted
arrows indicate subsequent authenticated “keep alive” messages. Note that #1 and #2 in messages 2 and 3 indicate that
that contents of messages 1 and 2 are included in the calculation of the HMAC, as is done in TLS 1.2.
2. (G2) Proof of Liveness: The Prover and Veriﬁer
will be asked to demonstrate that they remain on
the call throughout its duration.
Note that we do not aim to achieve voice conﬁdential-
ity. As discussed in Section 2, the path between two tele-
phony participants is likely to include a range of codec
transformations, making the bitwise representation of
voice vary signiﬁcantly between source and destination.
Accordingly, end-to-end encryption of voice content is
not currently possible given the relatively low channel
bitrate and large impact of transcoding. Solutions such
as Silent Circle [7] and RedPhone [1] are able to achieve
this guarantee strictly because they are VoIP clients that
traverse only data networks and therefore do not experi-
ence transcoding. However, as we discuss in Section 7,
our techniques enable the creation of a low-bandwidth
channel that can be used to protect the conﬁdentiality and
integrity of weak client authentication credentials.
5 AuthLoop Protocol
This section describes the design and implementation of
the AuthLoop protocol.
5.1 Design Considerations
Before describing the full protocol, this section brieﬂy
discusses the design considerations that
led to the
AuthLoop authentication protocol. As previously men-
tioned, we are constrained in that there is no fully-ﬂedged
Public Key Infrastructure, meaning that Veriﬁers (i.e.,
end users) do not universally possess a strong creden-
tial. Moreover, because we are limited to transmission
over the audio channel, the AuthLoop protocol must be
highly bandwidth efﬁcient.
The most natural choice for AuthLoop would be
to reuse an authentication protocol such as Needham-
Schroeder [50]. Reusing well-understood security pro-
tocols has great value. However, Needham-Schroeder
is inappropriate because it assumes that both sides have
public/private key pairs or can communicate with a third
party for session key establishment. Goal G1 is there-
fore not practically achievable in real telephony systems
if Needham-Schroeder is used. This protocol is also un-
suitable as it does not establish session keys, meaning
that achieving G2 would require frequent re-execution of
the entire authentication protocol, which is likely to be
highly inefﬁcient.
TLS can achieve goals G1 and G2, and already does so
for a wide range of traditional applications on the Web.
Unfortunately, the handshaking and negotiation phases
of TLS 1.2 require signiﬁcant bandwidth. As we demon-
strate in Section 3, unmodiﬁed use of this protocol can
require an average of 97 seconds before authentication
can be completed. However, because it can achieve goals
G1 and G2, TLS 1.2 is useful as a template for our pro-
tocol, and we discuss what could be considered a highly-
optimized version below. We note that while TLS 1.3
provides great promise for reducing handshaking costs,
the current draft version requires more bandwidth than
the AuthLoop protocol.
5.2 Protocol Deﬁnition
Figure 5 provides a formal deﬁnition for our authenti-
cation protocol. We describe this protocol below, and
provide details about its implementation and parameteri-
zation (e.g., algorithm selection) in Section 5.4.
The AuthLoop protocol begins immediately after a
970  25th USENIX Security Symposium 
USENIX Association
8
call is terminated.5 Either party, the Prover P (e.g., a call
center) or the Veriﬁer V (e.g., the end user) can initiate
the call. V then transmits its identity (i.e., phone num-
ber) and a nonce NV to P. Upon receiving this message,
P transmits a nonce NP, its certiﬁcate CP, and signs the
contents of the message to bind the nonce to its identity.
Its identity, P, is transmitted via Caller ID and is also
present in the certiﬁcate.
V then generates a pre-master secret S, and uses
S to generate a session key k, which is the result
of HMAC(S,NP,NV ). V then extracts P’s public key
from the certiﬁcate, encrypts S using that key and then
computes HMAC(k,‘V RFY ’,#1,#2), where ‘VRFY’ is
a literal string, and #1 and #2 represent
the con-
tents of messages 1 and 2. V then sends S and the
HMAC to P. P decrypts the pre-master secret and
uses it to similarly calculate k, after which is calculates
HMAC(k,‘PROV ’,#1,#2), which it then returns to V .
At this time, P has demonstrated knowledge of the pri-
vate key associated with the public key included in its
certiﬁcate, thereby authenticating the asserted identity.
If the Prover does not provide the correct response, its
claim of the Caller ID as its identity is rejected. Security
goal G1 is therefore achieved. Moreover, P and V now
share a session key k, which can be subsequently used
to provide continued and efﬁcient proofs (i.e., HMACs
over incrementing nonces) that they remain on the call,
thereby achieving Goal G2.
We note that the session key generation step between
messages 2 and 3 can be extended to provide keys for
protecting conﬁdentiality and integrity (as is done in
most TLS sessions). While these keys are not of value
for voice communications (given the narrow bitrate of
our channel), they can be used to protect client authen-
tication credentials. We discuss this in greater detail in
Section 7.
5.3 Formal Veriﬁcation
We believe that our protocol is secure via inspection.
However, to provide stronger guarantees, we use the
Proverif v1.93 [22] automatic cryptographic protocol
veriﬁer to reason about the security of the AuthLoop
handshake. Proverif requires that protocols be rewritten
as Horn clauses and modeled in Pi Calculus, from which
it can then reason about secrecy and authentication in the
Dolev-Yao setting. AuthLoop was represented by a to-
tal of 60 lines of code, and Proverif veriﬁed the secrecy
of the session key k. Further details about conﬁguration
will be available in our technical report.
5This is the telephony term for “delivered to its intended destina-
tion,” and signiﬁes the beginning of a call, not its end.
Table 2: Authloop Message Sizes
Message Field
Veriﬁer Hello
Nonce
Cert Ident Number
Protocol Command
Prover Hello
Nonce
Certiﬁcate (optional)
Protocol Command
Veriﬁer Challenge
Encrypted Premaster Secret
HMAC
Protocol Command
Prover Response
HMAC
Protocol Command
Total With Certiﬁcate
Total Without Certiﬁcate
Size(Bits)
144
96
40
8
1692
96
1592
8
1312
1224
80
8
88
80
8
3236
1648
Implementation Parameters
5.4
Table 2 provides accounting of every bit used in the
AuthLoop protocol for each message. Given the tight
constraints on the channel, we use the following param-
eters and considerations to implement our protocol as ef-
ﬁciently as possible while still providing strong security
guarantees.
We use elliptic curve cryptography for public key
primitives. We used the Pyelliptic library for Python [9],
which is a Python wrapper around OpenSSL. Keys were
generated on curve sect283r1, and keys on this curve
provide security equivalent to RSA 3456 [56]. For keyed
hashes, we use SHA-256 as the underlying hash function
for HMACs. To reduce transmission time, we compute
the full 256-bit HMAC and truncate the result to 80 bits.
Because the security factor of HMAC is dependent al-
most entirely on the length of the hash, this truncation
maintains a security factor of 2−80 [21]. This security
factor is a commonly accepted safe value [49] for the
near future, and as our data transmission improves, the
security factor can increase as well.
While similar to TLS 1.2, we have made a few im-
portant changes to reduce overhead. For instance, we
do not perform cipher suite negotiation in every session
and instead assume the default use of AES256 GCM and
SHA256. Our link layer header contains a bit ﬁeld indi-
cating whether negotiation is necessary; however, it is
our belief that starting with strong defaults and negotiat-
ing in the rare scenario where negotiation is necessary is
critical to saving bandwidth for AuthLoop. Similarly, we
are able to exclude additional optional information (e.g.,
USENIX Association  
25th USENIX Security Symposium  971
9
compression types supported) and the rigid TLS Record
format to ensure that our overhead is minimized.
We also limit the contents of certiﬁcates. Our certiﬁ-
cates consist of a protocol version, the prover’s phone
number, claimed identiﬁcation (i.e., a name), validity pe-
riod, unique certiﬁcate identiﬁcation number, the certiﬁ-
cate owner’s ECC public key and a signature. Because
certiﬁcate transmission comprises nearly half of the to-
tal transmission time, we implemented two variants of
AuthLoop: the standard handshake and a version with
a veriﬁer-cached certiﬁcate. Certiﬁcate caching enables
a signiﬁcantly abbreviated handshake. For certiﬁcate
caching, we include a 16-bit certiﬁcate identiﬁer that the
veriﬁer sends to the prover to identify which certiﬁcate is
cached. We discuss how we limit transmitted certiﬁcate
chain size to a single certiﬁcate in Section 7.
Finally, we keep the most security-sensitive parame-
ters as deﬁned in the TLS speciﬁcation, including rec-
ommended sizes for nonces (96 bits).
While our protocol implementation signiﬁcantly re-
duces the overhead compared to TLS 1.2 for this appli-
cation, there is still room for improvement.
In partic-
ular, the encrypted pre-master secret requires 1224 bits
for the 256-bit premaster secret. This expansion is due
to the fact that while RSA has a simple primitive for
direct encryption of a small value, with ECC one must
use a hybrid encryption model called the Integrated En-
cryption Scheme (IEC), so a key must be shared sepa-
rately from the encrypted data. Pyelliptic also includes
a SHA-256 HMAC of the ECC keyshare and encrypted
data to ensure integrity of the message (which is standard
practice in IEC). Because the message already includes
an HMAC, in future work we plan to save 256 bits (or
15% of the cached certiﬁcate handshake) by including
the HMAC of the ECC share into the message HMAC.
6 Evaluation
Previous sections established the need for a custom au-
thentication protocol using a voice channel modem to
provide end-to-end authentication for telephone calls. In
this section, we describe and evaluate our prototype im-
plementation.
In particular, we characterize the error
performance of the modem across several audio codecs,
compute the resulting actual throughput after layer 2 ef-
fects are taken into account, and ﬁnally measure the end
to end timing of complete handshakes.
6.1 Prototype Implementation
Our prototype implementation consists of software im-
plementing the protocol, link layer, and modem running
on commodity PCs. While we envision that AuthLoop
Table 3: Bit Error Rates
Codec
G.711
AMR-NB
Speex
Average Bit Error
Std. Dev
0.0%
0.3%
0.5%
0.0%
0.2%
5%
will eventually be a stand-alone embedded device or im-
plemented in telephone hardware/software, a PC served
as an ideal prototyping platform to evaluate the system.
We implemented the AuthLoop protocol in Python us-
ing the Pyelliptic library for cryptography. We also im-
plemented the link layer in Python. Our modem was
written in Matlab, and that code is responsible for mod-
ulating data, demodulating data, and sending and re-
ceiving samples over the voice channel. We used the
Python Engine for Matlab to integrate our modem with
Python. Our choice of Matlab facilitated rapid prototyp-
ing and development of the modem, but the Matlab run-