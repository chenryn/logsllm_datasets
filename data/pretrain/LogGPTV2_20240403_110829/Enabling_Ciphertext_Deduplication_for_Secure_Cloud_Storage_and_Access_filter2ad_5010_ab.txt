of block-level deduplication, the requirement to memorize and
retrieve CE keys for each block in a secure way, calls for
a fully-ﬂedged key management solution. We thus suggest
to include a new component, the metadata manager (MM),
in the new ClouDedup system in order to implement
the
key management for each block together with the actual
deduplication operation.
C. Threat Model
The goal of the system is to guarantee data conﬁdentiality
without losing the advantage of deduplication. Conﬁdentiality
must be guaranteed for all ﬁles,
including the predictable
ones. The security of the whole system should not rely on
the security of a single component (single point of failure),
and the security level should not collapse when a single
component
is compromised. We consider the server as a
trusted component with respect to user authentication, access
control and additional encryption. The server is not trusted with
respect to the conﬁdentiality of data stored at the cloud storage
provider. Therefore, the server is not able to perform ofﬂine
dictionary attacks. Anyone who has access to the storage is
considered as a potential attacker,
including employees at
the cloud storage provider and the cloud storage provider
itself. In our threat model,
the cloud storage provider is
honest but curious, meaning that it carries out its tasks but
might attempt to decrypt data stored by users. We do not
take into account cloud storage providers that can choose to
delete or modify ﬁles. Our scheme might be extended with
additional features such as data integrity [16] and proofs of
retrievability [20]. Among the potential threats, we identify
also external attackers. An external attacker does not have
access to the storage and operates outside the system. This type
of attacker attempts to compromise the system by intercepting
messages between different components or compromising a
user’s account. External attackers have a limited access to the
system and can be effectively neutralized by putting in place
strong authentication mechanisms and secure communication
channels.
D. Security
In the proposed scheme, only one component, that is the
server, is trusted with respect to a limited set of operations,
therefore we call it semi-trusted. Once the server has applied
the additional encryption, data are no longer vulnerable to CE
weaknesses. Indeed, without possessing the keying material
used for the additional encryption, no component can perform
dictionary attacks on data stored at the cloud storage provider.
The server is a simple semi-trusted component that is deployed
on the user’s premises and is in charge of performing user
authentication, access control and additional symmetric en-
cryption. The primary role of the server is to securely retain
the secret key used for the additional encryption. In a real
scenario, this goal can be effectively accomplished by using a
hardware security module (HSM) [10]. When data are retrieved
by a user, the server plays another important role. Before
sending data to a given recipient, the server must verify if block
signatures correspond to the public key of that recipient. The
metadata manager (MM) and the cloud storage provider are not
trusted with respect to data conﬁdentiality, indeed, they are not
able to decrypt data stored at the cloud storage provider. We
do not take into account components that can spontaneously
misbehave and do not accomplish the tasks they have been
assigned.
V. COMPONENTS
In this section we describe the role of each component.
A. User
The role of the user is limited to splitting ﬁles into blocks,
encrypting them with the convergent encryption technique,
signing the resulting encrypted blocks and creating the storage
request. In addition, the user also encrypts each key derived
from the corresponding block with the previous one and his
secret key in order to outsource the keying material as well
and thus only store the key derived from the ﬁrst block and the
ﬁle identiﬁer. For each ﬁle, this key will be used to decrypt
and re-build the ﬁle when it will be retrieved. Instead, the
ﬁle identiﬁer is necessary to univocally identify a ﬁle over
the whole system. Finally, the user also signs each block
with a special signature scheme. During the storage phase,
the user computes the signature of the hash of the ﬁrst block:
S0 = σP Ku (H(B0)). In order not to apply costly signature
operations for all blocks of the ﬁle, for all the following blocks,
a hash is computed over the hash of the previous block and
the block itself: Si = H(Bi|Si−1). The main architecture is
illustrated in Fig. 1.
B. Server
The server has three main roles: authenticating users during
the storage/retrieval request, performing access control by
verifying block signatures embedded in the data, encrypt-
ing/decrypting data traveling from users to the cloud and
viceversa. The server takes care of adding an additional
layer of encryption to the data (blocks, keys and signatures)
uploaded by users. Before being forwarded to MM, data are
further encrypted in order to prevent MM and any other
component from performing dictionary attacks and exploiting
the well-known weaknesses of convergent encryption. During
ﬁle retrieval, blocks are decrypted and the server veriﬁes
the signature of each block with the user’s public key. If
the veriﬁcation process fails, blocks are not delivered to the
requesting user.
C. Metadata Manager (MM)
MM is the component responsible for storing metadata,
which include encrypted keys and block signatures, and han-
dling deduplication. Indeed, MM maintains a linked list and a
small database in order to keep track of ﬁle ownerships, ﬁle
composition and avoid the storage of multiple copies of the
same data segments. The tables used for this purpose are ﬁle,
pointer and signature tables. The linked list is structured as
follows:
•
•
Each node in the linked list represents a data block.
The identiﬁer of each node is obtained by hashing the
encrypted data block received from the server.
If there is a link between two nodes X and Y, it means
that X is the predecessor of Y in a given ﬁle. A link
between two nodes X and Y corresponds to the ﬁle
identiﬁer and the encryption of the key to decrypt the
data block Y.
The tables used by MM are structured as follows:
•
•
•
File table. The ﬁle table contains the ﬁle id, ﬁle name,
user id and the id of the ﬁrst data block.
Pointer table. The pointer table contains the block
id and the id of the block stored at the cloud storage
provider.
Signature table. The signature table contains the
block id, the ﬁle id and the signature.
In addition to the access control mechanism performed by the
server, when users ask to retrieve a ﬁle, MM further checks if
the requesting user is authorized to retrieve that ﬁle. This way,
MM makes sure that the user is not trying to access someone
else’s data. This operation can be considered as an additional
access control mechanism, since an access control mechanism
already takes place at the server. Another important role of
MM is to communicate with cloud storage provider (SP) in
order to actually store and retrieve the data blocks and get a
pointer to the actual location of each data block.
D. Cloud Storage Provider (SP)
SP is the most simple component of the system. The only
role of SP is to physically store data blocks. SP is not aware
of the deduplication and ignores any existing relation between
two or more blocks. Indeed, SP does not know which ﬁle(s) a
block is part of or if two blocks are part of the same ﬁle. This
means that even if SP is curious, it has no way to infer the
original content of a data block to rebuild the ﬁles uploaded
by the users. It is worth pointing out that any cloud storage
provider would be able to operate as SP. Indeed, ClouDedup
is completely transparent from SP’s perspective, which does
not collaborate with MM for deduplication. The only role
of SP is to store data blocks coming from MM, which can
be considered as ﬁles of small size. Therefore, it is possible
to make use of well-known cloud storage providers such as
Google Drive [7], Amazon S3 [3] and Dropbox [6].
E. A realistic example of ClouDedup
Notation
encryption function with key K
hash function
ith block of a ﬁle
ith block of a ﬁle after convergent encryption
ith block of a ﬁle after encryption
at the server
key generated from the ith block of a ﬁle
Ki after encryption at the server
secret key of server
secret key of user j
private key of the certiﬁcate of user j
signature of ith block of a ﬁle with P KUj
EK
H
Bi
B(cid:48)
B(cid:48)(cid:48)
i
i
Ki
K(cid:48)
i
KA
KUj
P KUj
Si
A. Storage
During the storage procedure, a user uploads a ﬁle to the
system. As an example, we describe a scenario in which a user
Uj wants to upload the ﬁle F1.
Fig. 2. A realistic example of ClouDedup
in the case the main HSM crashes,
In this section we show that our proposed solution can
be easily deployed with existing and widespread technologies.
In the scenario we analyze, a group of users belonging to
the same organization want to store their data, save as much
storage space as possible and keep their data conﬁdential.
As shown in Fig. 2, the Server can be implemented using
a Luna SA HSM [10] deployed on the users’ premises.
As documented in [8],
in order to make the system re-
silient against single-point-of-failure issues, it is possible to
build a high availability array by using multiple Luna SA
HSMs. This way,
it
can be immediately replaced by an equivalent HSM with-
out
losing the secret key or getting worse performance.
In order to guarantee data conﬁdentiality even in the case the
server is compromised, an additional HSM can be deployed
between MM and SP. Deploying MM and the additional HSM
in the same location, such as AWS [4], helps to minimize net-
work latency and increase performance. This solution achieves
higher security (it is very unlikely to compromise both HSMs
at the same time) without signiﬁcantly increasing the costs.
MM can be hosted in a virtual machine on Amazon EC2 [1]
and make use of a database to store metadata and encrypted
keys. The additional HSM can be implemented by taking
advantage of Amazon CloudHSM [5] which provides secure,
durable, reliable, replicable and tamper-resistant key storage.
Finally, very popular cloud storage solutions such as Dropbox
[6], Amazon S3 [3], Amazon Glacier [2] and Google Drive
[7] could be used as storage providers.
VI. PROTOCOL
In this section we describe the two main operations of
ClouDedup: storage and retrieval. The description of other
operations such as removal, modiﬁcation and search are out
of the scope of this paper.
Fig. 3. Storage Protocol
USER User Uj splits F1 into several blocks. For each block
Bi, Uj generates a key by hashing the block and uses this key
to encrypt the block itself. Therefore B(cid:48)
i = EKi(Bi) where
Ki = H(Bi). Uj stores K1 and encrypts each following key
with the key corresponding to the previous block: EKi−1 (Ki).
further encrypts each key (except K1) with his own
Uj
secret key KUj : EKUj
(EKi−1 (Ki)). Uj computes the block
signatures as described in V-A. Uj sends a request to the server
in order to upload ﬁle F1. The request is composed by:
•
•
•
•
•
Uj’s id : IDUj ;
the encrypted ﬁle name;
ﬁle identiﬁer : Fid1;
ﬁrst data block : EK1 (B1);
for each following data block Bi (i ≥ 2): key to
decrypt block Bi, that is EKUj
(EKi−1(Ki)); signature
of block Bi, that is Si; data block B(cid:48)
i : EKi(Bi);
In order to improve the level of privacy and reveal as little
information as possible, Uj encrypts the ﬁle name with his own
secret key. File identiﬁers are generated by hashing the con-
catenation of user ID and ﬁle name H(user ID | f ile name).
SERVER The server receives a request from user Uj and
runs SSL in order to authenticate Uj and securely commu-
nicate. Each key, signature and block are encrypted under
KA (server’s secret key): B(cid:48)(cid:48)
i = EKA (EKi(Bi)), K(cid:48)
i =
(EKi−1(Ki))), S(cid:48)
i = EKA (Si). The only parts of
EKA (EKUj
the request which are not encrypted are user’s id, the ﬁle name
and the ﬁle identiﬁer. The server forwards the new encrypted
request to MM.
i−1 to block B(cid:48)(cid:48)
MM MM receives the request from the server and for each
block B(cid:48)(cid:48)
i contained in the request, MM checks if that block has
already been stored by computing its hash value and comparing
it to the ones already stored. If the block has not been stored
in the past, MM creates a new node in the linked list, the
identiﬁer of the node is equal to H(B(cid:48)(cid:48)
i ). MM updates the
data structure by linking each node (block) of ﬁle F1 to its
successor. A link from block B(cid:48)(cid:48)
i contains the
following information: {Fid1, EKA (EKUj
(EKi−1 (Ki)))}. It is
worth pointing out that each key is encrypted with the key of
the previous block and users retain the key of the ﬁrst block,
which is required to start the decryption process. This way, a
chaining mechanism is put in place and the key retained by
the user is the starting point to decrypt all the keys. Moreover,
MM stores the signature of each block in the signature table,
which associates each block of each user to one signature. For
each block B(cid:48)(cid:48)
i not already stored, MM sends a storage request
to SP which will store the block and return a pointer. Pointers
are stored in the pointer table, which associates one pointer to
each block identiﬁer.
SP SP receives a request to store a block. After storing it,
SP returns the pointer to the block.
MM MM receives the pointer from SP and stores it in the
pointer table.
B. Retrieval
During the retrieval procedure, a user asks to download a
ﬁle from the system. As an example, we describe a scenario
in which a user Uj wants to download the ﬁle F1.
Fig. 4. Retrieval Protocol
USER User Uj sends a retrieval request to the server in
order to retrieve ﬁle F1. The request is composed by the user’s
id IDUj , the ﬁle identiﬁer Fid1 and his certiﬁcate.
SERVER The server receives the request, authenticates Uj
and if the authentication does not fail, the server forwards the
request to MM without performing any encryption.
MM MM receives the request from the server and analyzes
it in order to check if Uj is authorized to access Fid1 (Uj is the