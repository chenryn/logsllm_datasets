Shell 的 echo 指令与 PHP 的 echo 指令类似，都是用于字符串的输出。命令格式：
```sh
echo string
```
**显示普通字符串**
```sh
echo "It is a test"
# 这里的双引号完全可以省略，以下命令与上面实例效果一致：
echo It is a test
```
**显示转义字符**
```sh
echo "\"It is a test\""
```
```
"It is a test"
```
**显示变量**
read 命令从标准输入中读取一行,并把输入行的每个字段的值指定给 shell 变量
```sh
#!/bin/sh
read name
echo "$name It is a test"
```
以上代码保存为 test.sh，name 接收标准输入的变量，结果将是:
```
./test.sh
OK                     #标准输入
OK It is a test        #输出
```
**显示换行**
```sh
echo -e "OK! \n" # -e 开启转义
echo "It is a test"
```
```
OK!
It is a test
```
**显示不换行**
```sh
#!/bin/sh
echo -e "OK! \c" # -e 开启转义 \c 不换行
echo "It is a test"
```
```
OK! It is a test
```
**显示结果定向至文件**
```
echo "It is a test" > myfile
```
**原样输出字符串，不进行转义或取变量(用单引号)**
```
echo '$name\"'
```
```
$name\"
```
**显示命令执行结果**
```
echo `date`
```
注意： 这里使用的是反引号 `, 而不是单引号 '。
结果将显示当前日期
---
### printf命令
- printf 命令模仿 C 程序库（library）里的 printf() 程序。
- printf 由 POSIX 标准所定义，因此使用 printf 的脚本比使用 echo 移植性好。
- printf 使用引用文本或空格分隔的参数，外面可以在 printf 中使用格式化字符串，还可以制定字符串的宽度、左右对齐方式等。默认 printf 不会像 echo 自动添加换行符，我们可以手动添加 \n。
```sh
printf  format-string  [arguments...]
# format-string: 为格式控制字符串
# arguments: 为参数列表。
```
```sh
$ echo "Hello, Shell"
Hello, Shell
$ printf "Hello, Shell\n"
Hello, Shell
$
```
```sh
#!/bin/bash
printf "%-10s %-8s %-4s\n" 姓名 性别 体重kg
printf "%-10s %-8s %-4.2f\n" 郭靖 男 66.1234
printf "%-10s %-8s %-4.2f\n" 杨过 男 48.6543
printf "%-10s %-8s %-4.2f\n" 郭芙 女 47.9876
```
```
姓名     性别   体重kg
郭靖     男      66.12
杨过     男      48.65
郭芙     女      47.99
```
- %s %c %d %f 都是格式替代符
- %-10s 指一个宽度为10个字符（-表示左对齐，没有则表示右对齐），任何字符都会被显示在10个字符宽的字符内，如果不足则自动以空格填充，超过也会将内容全部显示出来。
- %-4.2f 指格式化为小数，其中.2指保留2位小数。
```sh
#!/bin/bash
# format-string 为双引号
printf "%d %s\n" 1 "abc"
# 单引号与双引号效果一样
printf '%d %s\n' 1 "abc"
# 没有引号也可以输出
printf %s abcdef
# 格式只指定了一个参数，但多出的参数仍然会按照该格式输出，format-string 被重用
printf %s abc def
printf "%s\n" abc def
printf "%s %s %s\n" a b c d e f g h i j
# 如果没有 arguments，那么 %s 用NULL代替，%d 用 0 代替
printf "%s and %d \n"
```
```
1 abc
1 abc
abcdefabcdefabc
def
a b c
d e f
g h i
j
 and 0
```
---
### test命令
test 命令用于检查某个条件是否成立，它可以进行数值、字符和文件三个方面的测试。
**数值测试**
- `-eq` 等于则为真
- `-ne` 不等于则为真
- `-gt` 大于则为真
- `-ge` 大于等于则为真
- `-lt` 小于则为真
- `-le` 小于等于则为真
```sh
num1=100
num2=100
if test $[num1] -eq $[num2]
then
    echo '两个数相等！'
else
    echo '两个数不相等！'
fi
```
```
两个数相等！
```
代码中的 [] 执行基本的算数运算
```sh
#!/bin/bash
a=5
b=6
result=$[a+b] # 注意等号两边不能有空格
echo "result 为： $result"
```
```
result 为： 11
```
**字符串测试**
- `=` 等于则为真
- `!=` 不相等则为真
- `-z 字符串` 字符串的长度为零则为真
- `-n 字符串` 字符串的长度不为零则为真
```sh
#!/bin/bash
num1="test"
num2="te5t"
if test $num1 = $num2
then
    echo '两个字符串相等!'
else
    echo '两个字符串不相等!'
fi
```
```
两个字符串不相等!
```
**文件测试**
- `-e 文件名` 如果文件存在则为真
- `-r 文件名` 如果文件存在且可读则为真
- `-w 文件名` 如果文件存在且可写则为真
- `-x 文件名` 如果文件存在且可执行则为真
- `-s 文件名` 如果文件存在且至少有一个字符则为真
- `-d 文件名` 如果文件存在且为目录则为真
- `-f 文件名` 如果文件存在且为普通文件则为真
- `-c 文件名` 如果文件存在且为字符型特殊文件则为真
- `-b 文件名` 如果文件存在且为块特殊文件则为真
```sh
cd /bin
if test -e ./bash
then
    echo '文件已存在!'
else
    echo '文件不存在!'
fi
```
```
文件已存在!
```
另外，Shell还提供了与( -a )、或( -o )、非( ! )三个逻辑操作符用于将测试条件连接起来，其优先级为："!"最高，"-a"次之，"-o"最低。例如：
```
cd /bin
if test -e ./notFile -o -e ./bash
then
    echo '至少有一个文件存在!'
else
    echo '两个文件都不存在'
fi
```
```
至少有一个文件存在!
```
---
## 流程控制
和 Java、PHP 等语言不一样，sh 的流程控制不可为空，如(以下为 PHP 流程控制写法)：
```php
 以下部分来自 : https://zorrozou.github.io/docs/books/shellbian-cheng-zhi-yu-fa-ji-chu.html
```bash
#!/bin/bash
DIR="/etc"
＃第一种写法
ls -l $DIR &> /dev/null
ret=$?
if [ $ret -eq 0 ]
then
		echo "$DIR is exist!"
else
    	echo "$DIR is not exist!"
fi
#第二种写法
if ls -l $DIR &> /dev/null
then
        echo "$DIR is exist!"
else
        echo "$DIR is not exist!"
fi
```