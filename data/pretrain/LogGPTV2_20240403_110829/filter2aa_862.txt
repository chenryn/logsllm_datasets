# Bypassing Secure Boot and Related Security Features on NXP SoCs

## Authors
- Yuwei ZHENG
- Shaokun CAO
- Yunding JIAN
- Mingchuang QIN

## Affiliation
- UnicornTeam, 360 Technology
- Defcon 26

## About Us
- **360 Technology** is a leading Internet security company in China, known for its anti-virus security software for PCs and cellphones.
- **UnicornTeam** (https://unicorn.360.com/), established in 2014, focuses on security issues in various wireless telecommunication systems.
- **Highlighted Works of UnicornTeam:**
  - Low-cost GPS spoofing research (DEFCON 23)
  - LTE redirection attack (DEFCON 24)
  - Attack on power line communication (Black Hat USA 2016)

## Agenda
- Motivation
- About Secure Boot
- Different Implementations of Secure Boot
- Secure Boot and Anti-Cloning
- Details of the Vulnerability
- Exploitation
- Countermeasures

## Motivation
- Investigate Secure Boot implementations in cost-constrained systems.
- Assess the anti-cloning strength of embedded SoCs.
- Attempt to modify peripherals as hardware Trojans.

## About Secure Boot
### Overview
- **Public Key-Based Binary Signing and Verification:**
  - **Signing:**
    1. Generate a key pair (K-priv and K-pub).
    2. Calculate the binary image’s hash.
    3. Encrypt the hash with K-priv to create the Signature.
    4. Attach the Certificate (K-pub) and Signature to the binary image.
  - **Verification:**
    1. Calculate the binary image’s hash.
    2. Decrypt the Signature with K-pub (Certificate) to get the original Hash.
    3. If the two hashes match, the Signature is valid, indicating the binary has not been tampered with.

### Principle of Secure Boot
- **Boot ROM and Root PuK:**
  - The Boot ROM is masked into the SoC during manufacturing, and the Root PuK (public key) is permanently programmed into the OPT memory.
  - The physical characteristics of the chip ensure that the Root PuK and Boot ROM cannot be replaced or bypassed.
- **Signature Generation and Verification:**
  - The product vendor uses the Root PrK (private key) to sign the Boot image and App PuK, and the Application image with the App PrK.
  - At system startup, the Boot ROM verifies the Boot image using the Root PuK. If valid, the Boot image loads the Application image and checks its signature with the App PuK. The application is executed only if the signature is valid.

### What Can Secure Boot Do?
- **Prevent Firmware Tampering:**
  - Example: Injecting malicious features into 4G LTE modems or modifying femtocell firmware to eavesdrop on 4G users.
  - Secure Boot mitigates such attacks by ensuring the integrity of the firmware.
- **Protect Intellectual Property:**
  - Secure Boot helps protect the intellectual property of product manufacturers.

## Different Implementations of Secure Boot
### UEFI and Secure Boot
- **PCs with UEFI Firmware and TPM:**
  - Configured to load only trusted operating system bootloaders.

### Secure Boot in Embedded Systems
- **SoCs with TrustZone:**
  - Full-featured Secure Boot can be implemented on high-performance ARM cores (Cortex A7 and later versions).
  - The Root PuK is burned into the OPT area, and the physical characteristics of the chip prevent it from being replaced.
- **Non-TrustZone SoCs:**
  - Lite version of Secure Boot is often implemented by product manufacturers in cost-constrained IoT systems.
  - For Cortex-M class processors (M0, M1, M3, M4), which do not support TrustZone, Secure Boot is typically implemented through custom bootloader designs.

### Example: Secure Boot Implementation on NXP Cortex-M4
- **Unique ID:**
  - A feature solidified in the chip during production and cannot be replaced.
  - Binding the signature with the Unique ID:
    - **Signing:**
      1. Get the Chip’s Unique ID.
      2. Calculate `hash = Hash(application + Unique ID)`.
      3. `signature = encrypt(hash, App_PrK)`.
    - **Verification:**
      1. Get the Chip’s Unique ID.
      2. Calculate `hash = Hash(application + Unique ID)` and `hash' = decrypt(signature, App_PuK)`.
      3. Verify if `hash == hash'`.

## The Underground Piracy Industry
- **One-Time Costs:**
  - Reverse PCB: $20 - $200
  - Crack Fuse: $200 - $5,000
  - Reverse Firmware and Patch: $5,000 - $50,000 (recurring cost with firmware updates)

### Unique ID Makes Cloning Difficult
- **Binding License to Unique ID:**
  - Even if pirates purchase the same chips, the different IDs will cause Secure Boot verification to fail, preventing the normal function of the product.

## Bypassing Secure Boot Verification
### Methods
- **Patch:**
  - Heavy reverse analysis work; firmware code is strongly position-dependent and patches are replaced after firmware upgrades.
- **Hook:**
  - Easier in high-level OS; changes the behavior of firmware without modifying it.
  - **Cortex M3/M4 FPB:**
    - **Functions:**
      1. Generate hardware breakpoints.
      2. Remap literal data or instructions to specified memory.
    - **Registers:**
      - FP_CTRL: Flash Patch Control Register
      - FP_REMAP: Flash Patch Remap Register
      - FP_COMP0-5: Flash Patch Comparator Registers 0-5
      - FP_COMP6-7: Flash Patch Comparator Registers 6-7

### Exploitation
- **Change Unique ID to Arbitrary Value:**
  - Patch the `__FPB_FUNC` and `FakeIAP` code to the blank area of the flash.
  - Patch the Reset Handler to trigger the `__FPB_FUNC` function.
  - Ensure no changes to the Application area to keep the signature valid.

### Code Example
- **Original Vector Table:**
  ```c
  __vector_table
  DCD     sfe(CSTACK)
  DCD     Reset_Handler
  DCD     NMI_Handler
  DCD     HardFault_Handler
  DCD     MemManage_Handler
  DCD     BusFault_Handler
  DCD     UsageFault_Handler
  ...
  ```
- **Patched Vector Table:**
  ```c
  __vector_table
  DCD     sfe(CSTACK)
  DCD     __FPB_func
  DCD     NMI_Handler
  DCD     HardFault_Handler
  DCD     MemManage_Handler
  DCD     BusFault_Handler
  DCD     UsageFault_Handler
  ...
  ```

### Adding Hardware Trojan
- **J-Link as a Carrier:**
  - Use J-Link, a powerful debug tool for ARM developers, to inject a hardware Trojan before selling to end-users.
  - **J-Link-v10:**
    - Uses an NXP LPC4322 chip based on the Cortex-M4 core.
    - 512K internal flash, with 256K available for injecting the Trojan.
- **Triggering the Trojan:**
  - Hook the timer interrupt entry to execute the BadUSB Trojan firmware after a certain number of vector function executions.

## Mitigation Strategies
- **Firmware Security:**
  - Be cautious with firmware storage and avoid leaks.
  - Disable FPB before calling ROM API.
  - Prevent CPU from running patches by filling blank flash areas with specific values.
  - Always verify the signature for the entire flash area.

## Affected Chips
- **NXP Cortex-M3 and Cortex-M4:**
  - Other manufacturers’ CM3-4 chips that obtain UID from a function rather than an address space may also be affected.

## Advice from PSIRT of NXP
- **Code Read Protection (CRP) Setting:**
  - Set CRP level to CRP3 to disable JTAG and ISP.
  - Consider designing an IAP for firmware updates if needed, ensuring it cannot be reversed.

## References
- [1] Andreas Lindh, "Attacking Mobile Broadband Modems Like A Criminal Would." https://www.blackhat.com/docs/us-14/materials/us-14-Lindh-Attacking-Mobile-Broadband-Modems-Like-A-Criminal-Would.pdf
- [2] Yuwei Zheng, Haoqi Shan, "Build a Cellular Traffic Sniffer with Femto Cell." https://media.defcon.org/DEF%20CON%2023/DEF%20CON%2023%20presentations/DEFCON-23-Yuwei-Zheng-Haoqi-Shan-Build-a-Free-Cellular-Traffic-Capture-Tool-with-a-VxWorks-Based-Femto.pdf
- [3] LPC4300/LPC43S00 User Manual. https://www.nxp.com/docs/en/user-guide/UM10503.pdf
- [4] Cortex M3 Technical Reference Manual. http://infocenter.arm.com/help/topic/com.arm.doc.ddi0337h/DDI0337H_cortex_m3_r2p0_trm.pdf