Assume that there is a uni-path solution, then there are ﬁve
cases:
(1) T2R2 = θv1 :
⇒ R2 = θv2 ⇒ R3 (cid:5)= θv3
⇒ T1T (cid:3)
2 = θv3 or T1T (cid:3)
⇒ T (cid:3)
2T (cid:3)
3R(cid:3)
2R(cid:3)
This is a contradiction.
2R(cid:3)
2 = θv1 or T (cid:3)
3R(cid:3)
2T (cid:3)
3 = θv1 .
3 = θv3
(2) T (cid:3)
2R(cid:3)
2 = θv1 :
2 = θv4 ⇒ R(cid:3)
3 (cid:5)= θv5
1T2R2 = θv5 or T (cid:3)
⇒ R(cid:3)
⇒ T (cid:3)
⇒ T2R2 = θv1 or T2T3R3 = θv1 .
1T2T3R3 = θv5
This is a contradiction.
(3) T2T3R3 = θv1 :
(4) T (cid:3)
2T (cid:3)
2 = θv1
2 = θv4 ⇒ T (cid:3)
1T2T3R3 = θv5 ⇒ R(cid:3)
⇒ T (cid:3)
2R(cid:3)
⇒ T2T3R3 (cid:5)= θv1 . This is a contradiction.
3R(cid:3)
⇒ T1T (cid:3)
⇒ T (cid:3)
2T (cid:3)
3 = θv1 :
3R(cid:3)
2T (cid:3)
3 (cid:5)= θv1 . This is a contradiction.
3R(cid:3)
3 = θv3 ⇒ R2 = θv2 ⇒ T2R2 = θv1
(5) T2R2 (cid:5)= θv1 and T (cid:3)
2R(cid:3)
2 (cid:5)= θv1 and T2T3R3 (cid:5)= θv1 and
T (cid:3)
2T (cid:3)
3R(cid:3)
3 (cid:5)= θv1 :
and ⇒ R(cid:3)
⇒ R3 = θv3 ⇒ T3R3 = θv2
3 = θv4
⇒ T2T3R3 = θv1 or T (cid:3)
2T (cid:3)
3R(cid:3)
3 = θv5 ⇒ T (cid:3)
3R(cid:3)
3 = θv1 .
(Because no other path is available.)
This is a contradiction.
Therefore, there is no uni-path solution.
2.5 Network Failure and Resilience
2R(cid:3)
At last, we remark that the examples also have an impli-
cation to network failure. In Example 3, if we change v1 to
have the following preference:
3 < etc.
v1 : T2R2 ≈ T (cid:3)
2 < T2T3R3 ≈ T (cid:3)
2T (cid:3)
3R(cid:3)
Then either the disconnection of T2 or T (cid:3)
2 in Figure 3 will
create a bad triangle, giving no solution from a previous
multi-path solution.
It is similar for the disconnection of
T5 in Example 2. The consequence is that partial network
failure may have adverse eﬀect on the whole network, desta-
bilising other routing systems. Hence, it is desirable to have
resilience on policy-based routing, immune to partial net-
work failure. A formal deﬁnition and a suﬃcient condition
for resilience are given in Section 4.
3. BASIC IDEA OF POLICY RELATION
In the last section, we have seen various examples of the
absence of (uni-path/multi-path) solutions. In this section,
we study the existence of (uni-path/multi-path) solutions,
using a slightly more general version of policy relation than
in [4].
The notion of policy relation is introduced by [4] as a uni-
fying framework for a number of routing algebras. Since this
work focuses on non-strict preferences rather than routing
algebras, there are some slight diﬀerences in notations. In
particular, we consider preferences as a preorder rather than
a partial order, to incorporate both notions of incomparable
and equally preferred paths.
We ﬁrst present the basic idea of policy relation. Based on
policy relation, we give suﬃcient conditions for the existence
of (uni-path/multi-path) solutions, as well as the optimality
and asynchronous convergence of stable routings. An ad-
vanced study will be presented in Section 6 for higher order
routing solutions.
3.1 Notations of Relation
In brief, the policy relation is the relational structure on
routing policies in routing systems. This relational struc-
ture can characterise the interaction of routing systems.
The standard notations and formulation of relations are em-
ployed throughout this work, deﬁned as follows.
Given a set X, a relation over X is any subset of X × X.
If R is a relation, then we write (x, y) ∈ R (resp. (x, y) /∈ R)
as xRy (resp. xR/y). Pictorially, xRy can be represented by
an arrow between x and y. A relation R is said be:
• reﬂexive, if xRx for all x ∈ X,
• anti-reﬂexive, if xR/x for all x ∈ X,
• complete, if xRy or yRx for all x, y ∈ X,
• transitive, if (xRy and yRz ⇒ xRz) for all x, y, z ∈ X,
• anti-symmetric,
x, y ∈ X.
if (xRy and yRx ⇒ x = y) for all
There are some useful relations that have various combina-
tions of these properties:
• A preorder is a reﬂexive and transitive relation.
• A partial order is an anti-symmetric preorder.
• A preference order is a complete preorder.
• A total order is a complete partial order.
We can view strict preferences as a total order over the
set of paths, P(v, v0), for each v (cid:5)= v0. Both partial orders
and preference orders can capture non-strict preferences, but
they are interpreted diﬀerently.
Given a preference order (cid:2), for x (cid:5)= y, we write a non-
strict preference as (x (cid:2) y and y (cid:2) x). This is interpreted
that x and y are equally preferred. Given a partial order (cid:4),
for x (cid:5)= y, we write a non-strict preference as (x (cid:5)(cid:4) y and
y (cid:5)(cid:4) x). This is interpreted that x and y are incomparable.
Preference order may capture non-strict preferences aris-
ing in selecting equally preferred alternatives, such as load
balancing, while partial order may capture non-strict prefer-
ences arising in incomparable objectives optimisation, such
as QoS routing.
In the following, we shall employ preorders for modelling
non-strict preferences, subsuming both preference order and
partial order (see an example in Figure 5).
P
1
P
2
P
3
P
1
P
2
P
4
P
3
P
1
P
4
P
2
P
3
(a)
(b)
(c)
Figure 5: Figure (a) is a preference order, Figure (b)
is partial order, and Figure (c) is a preorder (sub-
suming Figure (a) and Figure (b)). Reﬂexive rela-
tions are suppressed.
For a preorder (cid:5), its strict relation (cid:5)
(cid:2) is deﬁned as:
x (cid:5)
(cid:2)
y, if x (cid:5) y and y (cid:5)(cid:5) x.
We write x ≈ y, if x (cid:5)(cid:5)
y and y (cid:5)(cid:5)
x.
(cid:2)
Given subset A ⊆ X and a preorder (cid:5) over X, deﬁne
min(cid:3) A (cid:3) {x ∈ A | there exists no y ∈ A such that y (cid:5)
(cid:2)
x}.
(cid:2)
To be more general, we can easily redeﬁne the uni-path and
multi-path solutions in Section 2.1, using a preorder (cid:5) by
replacing min(cid:2) by min(cid:3) .
3.2 Policy Structure
Given a rooted graph G, let P(v0) (cid:3)
v∈V P(v, v0) as
the set of paths with destination as v0. For a collection
of routing systems, we consider that the essential structure
of a policy-based routing problem is captured by the policy
structure deﬁned as a triple:
S
S (cid:3) (cid:2)P(v0), (cid:5), (cid:6)(cid:3),
where (cid:5) is a preorder for preference and (cid:6) is the subpath
relation over P(v0). For every pair P, Q ∈ P(v0), we write
• P (cid:5) Q, if P is at least as good as Q, subject to P, Q ∈
P(v, v0) for some v ∈ V,
• P (cid:6) Q, if P ∈ P(u, v0), Q ∈ P(v, v0), and there exists
T ∈ P(v, u) such that Q = T P .
One can easily check that (cid:6) is in fact a partial order. Note
that in [4], S is called an induced policy structure, given
an routing algebra. Here for brevity, we just call S policy
structure.
The only requirement of preferences is that it can be rep-
resented as a preorder (cid:5) on paths. This loose requirement
allows any high-level preferences such as business relations
(or a routing algebra as in [4]) to be translated into the
lowest-level type of preferences on paths.
3.3 Policy Relation
We have seen that the presence of bad triangles gives no
(uni-path/multi-path) solution. Thus, we are motivated to
formalise the presence of bad triangles, and more generally,
dispute wheels, to reason about the existence of solutions.
As introduced in [6] and depicted in Figure 6, a directed
cycle T1T2T3 ··· Tk in G is called a dispute wheel, if there
exist sequences of paths (P1, ..., Pk) and (R1, ..., Rk) such
that for all i ∈ {1, ..., k} and j = (i mod k) + 1, we have:
• Pi (cid:5)
• Rj (cid:6)
(cid:2)
(cid:2)
Ri,
Pi,
where Ri, Pi ∈ P(vi, v0), Tj ∈ P(vi, vj ), Pi = TjRj .
P
2
T R=
3
3
P
1
T R=
2
2
T
3
R
3
v
3
P
3
T R=
4
4
T
4
v
2
R
2
v
0
T
2
R
1
v
1
T
1
P
k
T R=
1
1
v
4
R
4
R
k
v
k
(cid:2)(cid:2)
(cid:2)(cid:2)
Figure 6: A dispute wheel.
Formally, we deﬁne the absence of a dispute wheel in terms
of the policy structure. This deﬁnition enables a generalisa-
tion to higher order routing solutions in Section 6.
Given two relations R1 and R2 over the same set X, we
deﬁne the join of R1 with R2 as:
R1 1 R2 (cid:3) {(x, z) ∈ X × X | xR1yR2z for some y ∈ X}.
Deﬁne the transitive closure of R, (R)tc, as the intersection
of all the transitive relations (i.e.
the smallest transitive
relation) containing R. Finally, we deﬁne the policy relation
R[S] over policy structure S as:
R[S] (cid:3) ((cid:5)
tc.
1(cid:6)
(cid:2) )
(cid:2)
It is straightforward to see that the anti-reﬂexivity of R[S]
is equivalent to the absence of a dispute wheel in S. And
the presence of dispute wheels can be easily visualised by
policy relations. Figures 7 and 8 show the policy relations
from Example 1-3, violating anti-reﬂexivity.
T R
2
2
R
2
R
1
R
1
T R
1
1
T R
2
2
T T R
1
4 1
R
3
R
2
R
3
T R
3
3
T R
3
3
(cid:2)
∼

∼
Figure 7: Policy relations violate anti-reﬂexivity:
the left ﬁgure from Example 1 and the right ﬁgure
from Example 2.
R
2
T R
3
3
T T R′
2
 1
2
T T T R
3
2 3
′
 1
R
3
TT T R′
′
3
1 2
′
3
R ′
3
(cid:2)
∼

∼
TT R′
′
2
1 1
T R′
′
3
3
R ′
2
Figure 8: The policy relation from Example 3 vio-
lates anti-reﬂexivity.
The anti-reﬂexivity of the policy relation gives a clue that
no cyclic dependence can be formed between the preferences
on paths and structural dependence among paths. Not sur-
prisingly, it has been proved in SPP [6] that the absence
of a dispute wheel implies the existence of a solution, when
considering only strict preferences. But the generalisation
to non-strict preferences requires a further proof as shown
in Section 4.
4. MAIN RESULTS
While we demonstrated the causes of no routing solutions
in Examples 1-3, in this section we study how to avoid the
absence of routing solutions through a suﬃcient condition.
The implication of our results is that the simple notion of no
dispute wheels is still applicable to the cases with non-strict
preferences.
Recall P(v0) (cid:3)
The results presented in this section directly generalise
the results from [5] that consider the SPP under a total or-
der preference. But our proof is not a direct adoption of
the one in [5] because: 1) we consider a more general pre-
order preference (hence, uni-path, multi-path, k-best-path
solutions), and 2) our proof facilitates the later proof in the
asynchronous convergence of Bellman-Ford mapping, which
was not considered by [5].
S
4.1 An Upper Bound Assumption
v∈V P(v, v0). We assume that the set
of reachable paths, P(v0), is bounded in size, in order to
place an upper bound on the size of a multi-path solution.
That is, we assume that |P(v0)| < h(|V|) for some a priori
function h. We argue that this is reasonable because prac-
tical routing systems often have an implicit memory bound
in enumerating the paths in a network. Also, this rules out
uninteresting solutions for a routing problem. For example
in minimum-weight routing, there is always a (uninterest-
ing) solution with path weights equal to −∞ for all vertices.
An inﬁnite path around a negative cycle has weight −∞.
Therefore, by requiring |P(v0)| to be bounded, we can rule
out −∞ from the set of feasible weights of a solution. Thus,
”
there is no solution when a negative cycle is present.
4.2 Bellman-Ford Mapping
“
We call a multi-path vector Θ (cid:3)
v∈V
an assignment. Deﬁne the (multi-path) Bellman-Ford map-
ping be:
Fv(Θ) (cid:3) min(cid:3){eP ∈ P(v, v0) | e = (v, u) ∈ E , P ∈ Θu}.
A multi-path solution is a ﬁxed-point (i.e. Θv = Fv(Θ)
for all v ∈ V). The Bellman-Ford mapping models a greedy
routing protocol, as the one implemented as path-vector pro-