### 优化后的文本

#### `memcpy` 函数分析
```c
memcpy(&dest, (char *)global_buf[idx] + (signed __int16)addr, size);
return dest;
```
在上述代码中，`addr` 的高 20 位（即 `(addr & 0xF00000u) >> 20`）被用作 `idx`，而低 16 位则作为 `offset`。当 `idx` 不等于 15 时，从 `global_buf[idx] + offset` 处拷贝 `size` 字节的数据到 `dest`；否则，将 `dest` 设置为 `0x42069` 并返回。

#### `ooo_mmio_write` 函数分析
```c
void __fastcall ooo_mmio_write(struct_a1 *opaque, __int64 addr, __int64 value, unsigned int size)
{
    unsigned int cmd; // eax MAPDST
    int n[3]; // [rsp+4h] [rbp-3Ch]
    __int16 v8; // [rsp+22h] [rbp-1Eh]
    int i; // [rsp+24h] [rbp-1Ch]
    unsigned int idx; // [rsp+2Ch] [rbp-14h] MAPDST
    *(_QWORD *)n = value;
    cmd = ((unsigned int)addr & 0xF00000) >> 20;

    switch (cmd)
    {
        case 1:
            free(global_buf[((unsigned int)addr & 0xF0000) >> 16]);
            break;
        case 2:
            idx = ((unsigned int)addr & 0xF0000) >> 16;
            v8 = addr;
            memcpy((char *)global_buf[idx] + (signed __int16)addr, &n[1], size);
            break;
        case 0:
            idx = ((unsigned int)addr & 0xF0000) >> 16;
            if (idx == 15)
            {
                for (i = 0; i < size; ++i)
                {
                    // 访存错误：mov BYTE PTR [rdx], al
                }
            }
            break;
    }
}
```

#### 问题与解决方案
最初的问题是由于 `mmap` 文件 `/sys/devices/pci0000:00/0000:00:04.0/resource0` 的大小设置过小，导致 `mmio_write` 时出现访存越界。解决方法是增加 `mmap` 的大小至 `0x1000000`，即 MMIO 空间的大小。

#### 利用方法
题目环境是 Ubuntu 16，没有 tcache 机制，因此利用起来较为复杂。根据已有的 write-up，有两种解法：

1. **基于 DefconQuals 2018 - EC3 的解法**：
   - 申请一个大小为 `0x70` 的堆块。
   - 使用 fastbin attack 将 `fd` 改到 `global_buf` 地址处，绕过 size 检查。
   - 覆盖 `global_buf` 实现任意读写，修改 GOT 表以劫持控制流。

2. **基于 EC3 write-up (DEF CON CTF 2018 Quals) 的解法**：
   - 利用堆溢出覆盖堆中的内容为后门地址。
   - 使用命令 `echo mem > /sys/power/state` 将虚拟机休眠，唤醒时劫持控制流获取 flag。

如果没有后门且启用了 PIE，可以考虑先通过 `mmio_read` 泄露 libc 和堆的地址，再进行利用。

#### 传递 Exploit 到虚拟机
- 将编译好的 exploit 进行 base64 编码，粘贴到虚拟机中再解码。
- 解压 `initramfs-busybox-x86_64.cpio.gz` 文件并添加 exploit，重新打包压缩。

#### 总结
这是第一次处理没有符号的题目，修复运行环境和逆向分析具有一定的挑战性。最终找到了题目的源码，并尽量修复了反编译代码。

#### 相关资源
- [DefconQuals 2018 - EC3](https://uaf.io/exploitation/2018/05/13/DefconQuals-2018-EC3.html)
- [EC3 write-up (DEF CON CTF 2018 Quals)](https://blog.bushwhackers.ru/defconquals2018-ec3/)
- [oooverflow.c](https://github.com/o-o-overflow/chall-ec-3/blob/de0e64563fc9890ce81bfe5fe107afb107d719b7/src/oooverflow.c)
- [Linux 系统的休眠与唤醒简介](https://www.cnblogs.com/sky-heaven/p/4561374.html)

相关脚本和文件可以在 [GitHub](https://github.com/ray-cp/vm-escape/tree/master/qemu-escape/DefconQuals-2018-EC3) 中找到。