The core of an SBOM is a consistent, uniform structure that captures and presents information 
used to understand the components that make up software. Data fields contain baseline 
information about each component that should be tracked and maintained. The goal of these 
fields is to enable sufficient identification of these components to track them across the 
software supply chain and map them to other beneficial sources of data, such as vulnerability 
databases or license databases. This baseline component information includes: 
Department of Commerce 
The Minimum Elements for an SBOM 
9 
Data Field 
Description 
Supplier Name 
The name of an entity that creates, defines, and identifies 
components. 
Component Name 
Designation assigned to a unit of software defined by the 
original supplier. 
Version of the Component 
Identifier used by the supplier to specify a change in software 
from a previously identified version. 
Other Unique Identifiers  
Other identifiers that are used to identify a component, or 
serve as a look-up key for relevant databases. 
Dependency Relationship 
Characterizing the relationship that an upstream component 
X is included in software Y. 
Author of SBOM Data 
The name of the entity that creates the SBOM data for this 
component. 
Timestamp  
Record of the date and time of the SBOM data assembly. 
The majority of these fields assist with the identification of the component to expressly enable 
mapping to other sources of data. Supplier refers to the originator or manufacturer of the 
software component. Component Name is determined by the supplier. The capability to note 
multiple names or aliases for both supplier and component name should be supported if possible. 
The challenges created by the lack of a single, well-understood and widely used name space for 
software are well documented.6 The best practice is to use an existing identifier when possible. 
When none exists, use an existing component identification system. Supplier name and 
component name are human-readable strings to support identification, although some features of 
the software ecosystem such as corporate mergers and open source forking will make ubiquitous 
and permanent solutions on this basis unlikely.  
Complexity around versions of software is another example of how the diversity in the software 
ecosystem requires building some flexibility into component identification approaches. Different 
types of software or suppliers of software track versions and distributions differently. Resolving 
6 A single, centralized model that can cover the vast, diverse, and rapidly growing software ecosystem presents very 
real challenges, notably scaling. A decentralized model where suppliers identify and manage their own software 
namespace seems the optimal path forward. For more information, see Framing Software Component Transparency, 
supra note 3, at page 24.  
Department of Commerce 
The Minimum Elements for an SBOM 
10 
this is outside the scope of the initial SBOM discussion.7 For these minimum elements, the 
version is that offered by the supplier since that party has the ultimate responsibility for tracking 
and maintaining the software in question, similar to the component name. The desired function 
of a version string is to identify a specific code delivery. While there are versioning best 
practices (e.g. semantic versioning8), they are by no means ubiquitous today.  
Other unique identifiers support automated efforts to map data across data uses and ecosystems 
and can reinforce certainty in instances of uncertainty. Examples of commonly used unique 
identifiers are Common Platform Enumeration (CPE),9 Software Identification (SWID) tags,10 
and Package Uniform Resource Locators (PURL).11 These other identifiers may not be available 
for every piece of software, but should be used if they exist. 
Dependency relationship reflects the directional aspect of software inclusion, and it enables the 
representation of transitivity from a piece of software to its component and a potential sub-
component. Lastly, the SBOM-specific metadata help with the tracking of the SBOM itself. 
Author reflects the source of the metadata, which could come from the creator of the software 
being described in the SBOM, the upstream component supplier, or some third party analysis 
tool. Note that this is not the author of the software itself, just the source of the descriptive data. 
Timestamp records when the data is assembled -- the point of the SBOM creation. These further 
support the origin of the data, and help identify updated versions of the SBOM. These data fields 
provide context to the SBOM data source, and can potentially be used to make trust 
determinations.  
Automation Support 
Support for automation, including automatic generation and machine-readability, allows the 
ability to scale across the software ecosystem, particularly across organizational boundaries. 
Taking advantage of SBOM data will require tooling, which necessitates predictable 
implementation and data formats. For example, some agencies may want to integrate this 
capability into their existing vulnerability management practices; others might desire real-time 
7 As more visibility emerges through SBOM use and consumption, we can expect further discussions, and 
potentially greater convergence of diverse models, approaches, and schemas. 
8 Semantic Versioning 2.0.0, https://semver.org/ (last visited July 1, 2021). 
9 See Framing Working Group, Nat’l Telecomms. & Info. Admin., Software Identification Challenges and Guidance 
(2021), https://www.ntia.gov/files/ntia/publications/ntia_sbom_software_identity-2021mar30.pdf; Official Common 
Platform Enumeration (CPE) Dictionary, Nat’l Inst. Standards & Tech., https://nvd.nist.gov/products/cpe (last 
visited July 2, 2021). 
10 See Software Identification Challenges and Guidance, supra note 9; ISO/IET 19770-2:2015 Information 
Technology–IT Asset Management—Part 2: Software Identification Tag, Int’l Standards Org., 
https://www.iso.org/standard/65666.html (last visited July 2, 2021). 
11 See Software Identification Challenges and Guidance, supra note 9; Package-url/purl-spec, GitHub, 
https://github.com/package-url/purl-spec (last visited July 2, 2021). 
Department of Commerce 
The Minimum Elements for an SBOM 
11 
auditing of compliance against security policies. Automation will be key for both, which in turn 
requires common, machine-readable data formats. 
While a single standard may offer simplicity and efficiency, multiple data formats exist in the 
ecosystem and are being used to generate and consume SBOMs. These specifications have been 
developed through open processes, with international participation. In addition to being machine-
readable, these data formats are also human-readable, better supporting trouble-shooting and 
innovation. More importantly, these standards have been deemed interoperable for the core data 
fields and use common data syntax representations.  
The data formats that are being used to generate and consume SBOMs are: 
• Software Package Data eXchange (SPDX)12 
• CycloneDX13 
• Software Identification (SWID) tags14 
The SBOM must be conveyed across organizational boundaries in one of these interoperable 
formats.15 If a new specification should emerge that is compatible with the other data formats, 
then it should be included for automation support in the context of minimum elements for 
SBOM. Similarly, if a broad-based determination is made that a data format is no longer cross 
compatible, or is not under active maintenance and supporting the SBOM use cases, that data 
format should be removed from the automation requirement as part of the SBOM minimum 
elements. Standards utilizing proprietary data formats should not be included. This accomplishes 
the goal of building on existing tools for ease of adoption, supporting future evolution, and 
extensibility. 
Practices and Processes 
An SBOM is more than a structured set of data; to integrate it into the operations of the secure 
development life cycle an organization should follow certain practices and processes that focus 
on the mechanics of SBOM use. A number of elements should be explicitly addressed in any 
policy, contract, or arrangement to ask for or provide SBOMs. Some of these (e.g., frequency) 
have straightforward requirements. In other cases (e.g., access), multiple practices exist and 
more are being developed, so the minimum element is a requirement that some arrangement is 
specified. 
12 SPDX, https://spdx.dev/ (last visited May 18, 2021).  
13 CycloneDX, https://cyclonedx.org/ (last visited May 18, 2021). 
14 See David Waltermire et al., Guidelines for the Creation of Interoperable Software Identification (SWID) Tags 
(2016) (Nat’l Inst. of Standards & Tech. Internal Rep. 8060), http://dx.doi.org/10.6028/NIST.IR.8060 (SWID tags 
are defined by ISO/IEC 19770–2:2015). 
15 Some commenters have emphasized the value of a single format. However, these data formats are actively used 
and supported today, and many SBOM experts have noted that the government may not be in the best position to 
pick the winner among competing standards. The SBOM community has emphasized maintaining interoperability 
and automated translation tools, noting that computers are good at format conversions. 
Department of Commerce 
The Minimum Elements for an SBOM 
12 
Frequency. If the software component is updated with a new build or release, a new SBOM 
must be created to reflect the new version of the software. This includes software builds to 
integrate an updated component or dependency. Similarly, if the supplier learns new details 
about the underlying components or wishes to correct an error in the existing SBOM data, the 
supplier should issue a new, revised SBOM. 
Depth. An SBOM should contain all primary (top level) components, with all their transitive 
dependencies listed. At a minimum, all top-level dependencies must be listed with enough 
detail to seek out the transitive dependencies recursively.  
Going further into the graph will provide more information. As organizations begin SBOM, 
depth beyond the primary components may not be easily available due to existing 
requirements with subcomponent suppliers. Eventual adoption of SBOM processes will 
enable access to additional depth through deeper levels of transparency at the subcomponent 
level. It should be noted that some use cases require complete or mostly complete graphs, 
such as the ability to “prove the negative” that a given component is not on an organization’s 
network. 
 An SBOM consumer can specify depth by number of transitive steps. Alternatively, they 
could specify depth in operational terms. This could include software attributes, such as “all 
non-open source software,” or all components of a certain function or complexity. 
Organizations can also incentivize greater reporting depth and completeness by offering 
different requirements on reporting and remediation of vulnerabilities in components 
enumerated in the SBOM versus those that are not. Such specifications are outside the scope 
of these minimum elements. 
Known Unknowns. For instances in which the full dependency graph is not enumerated in 
the SBOM, the SBOM author must explicitly identify “known unknowns.” That is, the 
dependency data draws a clear distinction between a component that has no further 
dependencies, and a component for which the presence of dependencies is unknown and 
incomplete. This must be integrated into the automated data. To avoid erroneous assumptions, 
the default interpretation of the data should be that the data is incomplete; the author of the 
data should affirmatively state when the direct dependencies of a component have been fully 
enumerated, or when a component has no further dependencies. Today, this is implemented in 
the dependency relationship data field. 
Distribution and Delivery. SBOMs should be available in a timely fashion to those who 
need them and must have appropriate access permissions and roles in place. The SBOM data 
can accompany each instance of the software, or merely be accessible and directly mappable 
to the specific version of the software in question (e.g. through a version-specific URL). 
Sharing SBOM data down the software supply chain can be thought of as comprising two 
parts: how the existence and availability of the SBOM is made known (advertisement or 
discovery) and how the SBOM is retrieved by, or transmitted to, those who have the 
appropriate permissions (access). Similar to other areas of software assurance, there will not 
be a one-size-fits-all approach. Anyone offering SBOMs must have some means to make 
them available and support ingestion, but this can ride on existing mechanisms. SBOM 
delivery can reflect the nature of the software as well: executables that live on endpoints can 
Department of Commerce 
The Minimum Elements for an SBOM 
13 
store the SBOM data on disk with the compiled code, whereas embedded systems or online 
services can have pointers to SBOM data stored online.  
Access Control. Many suppliers, including open source maintainers and those with widely 
available software, may feel their interests are best served by making SBOM data public. 
Other organizations, especially at first, may wish to keep this data confidential, and limit 
access to specific customers or users. If access control is desired, the terms must be specified, 
including specific allowances and accommodations for integrating SBOM data into the user’s 
security tools. Such specification can be determined through licensing, contracts, or other 
existing mechanism used to circumscribe the use and rights around the software itself. Given 
the variation in software licensing and contracts, the nature of this specification is outside the 
scope of this document. 
Accommodation of Mistakes. A final practice area, accommodation of mistakes, should be built 
into the initial implementation phase of SBOM, allowing for omissions and errors. As many 
commentators have observed, while internal management of supply chain data may be a best 
practice, it is still evolving. The Administration has identified SBOM as a priority to drive 
software assurance and supply chain risk management, and starting today is better than waiting 
for perfection. In light of the absence of perfection, consumers of SBOMs should be explicitly 
tolerant of the occasional incidental error. This will facilitate constant improvement of tools: 
suppliers should offer updated data as they come across issues with past SBOMs, and consumers 
should encourage these updates by welcoming supplements and corrections without penalty 
when offered in good faith. As stated above regarding frequency, when new data is known an 
updated SBOM should be issued. Notably, this tolerance should not apply to intentional 
obfuscation or willful ignorance.  
V. 
Beyond Minimum Elements: Enabling Broader SBOM 
Use Cases  
The above characterize the “minimum elements” that comprise SBOM creation, maintenance, 
and use across the software supply chain. As noted, these are the initial steps and requirements 
needed to support the basic use cases. There is more work to be done to expand transparency in 
the software supply chain and to support visibility for securing software. This section describes 
further additions and inclusions that can support broader SBOM use cases.  
The fact that they are not part of the minimum set does not mean that these areas can be ignored; 
indeed, some will ultimately be critical to successful and efficient implementation of SBOM use 
cases. Many of these are in production today, or will be shortly with some small further 
refinements or testing. Organizations seeking SBOMs should feel comfortable working with 
their suppliers to ask for them. In many of the elements below, specific recommendations are 
proposed. 
Department of Commerce 
The Minimum Elements for an SBOM 
14 
Recommended Data Fields 
In addition to the data fields described in the minimum elements above, the following data fields 
are recommended for consideration, especially for efforts that are planned over several years or 
that require higher levels of security. In many cases and contexts these fields are well-defined 
and already implemented; others may require greater details for specification and clarity. As 
these are added to the minimum elements, any data formats that do not already include the below 
must add them or risk getting relegated. 
Hash of the Component. When referring to a piece of software, robust identifiers are important 
for mapping the existence of a component to relevant sources of data, such as vulnerability data 
sources. A cryptographic hash would provide a foundational element to assist in this mapping, as 
well as helping in instances of renaming and whitelisting.  
Hashes also offer confidence that a specific component was used. The consumer could compare 
the hash of the component with a known, trusted version. This could help verify that an 