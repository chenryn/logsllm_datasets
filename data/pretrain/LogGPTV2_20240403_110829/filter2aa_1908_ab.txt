The core of a Software Bill of Materials (SBOM) is a consistent, uniform structure designed to capture and present information about the components that make up software. This structured format ensures that each component is adequately tracked and maintained throughout the software supply chain. The primary goal is to enable the identification and tracking of these components, allowing them to be mapped to other valuable data sources, such as vulnerability and license databases.

### Baseline Component Information

The following data fields are essential for the identification and tracking of software components:

- **Supplier Name**: The name of the entity that creates, defines, and identifies the components.
- **Component Name**: The designation assigned to a unit of software by the original supplier.
- **Version of the Component**: An identifier used by the supplier to specify changes from a previously identified version.
- **Other Unique Identifiers**: Additional identifiers used to reference the component or serve as look-up keys in relevant databases.
- **Dependency Relationship**: A characterization of the relationship where an upstream component X is included in software Y.
- **Author of SBOM Data**: The name of the entity that creates the SBOM data for this component.
- **Timestamp**: The date and time when the SBOM data was assembled.

These fields are crucial for mapping the component to other data sources. The **Supplier** refers to the originator or manufacturer of the software component, and the **Component Name** is determined by the supplier. It is best practice to use existing identifiers and naming conventions whenever possible. However, due to the complexity and diversity of the software ecosystem, multiple names or aliases for both suppliers and components should be supported if feasible.

### Challenges and Best Practices

- **Versioning Complexity**: Different types of software and suppliers track versions and distributions differently. While there are best practices (e.g., semantic versioning), they are not universally adopted. The version string provided by the supplier is typically used to identify specific code deliveries.
- **Unique Identifiers**: Commonly used unique identifiers include Common Platform Enumeration (CPE), Software Identification (SWID) tags, and Package Uniform Resource Locators (PURL). These identifiers support automated efforts to map data across ecosystems and reinforce certainty in uncertain situations.
- **Dependency Relationships**: These reflect the directional inclusion of software components and enable the representation of transitivity from a piece of software to its sub-components.
- **SBOM Metadata**: The author and timestamp fields provide context for the SBOM data source, which can be used to determine the origin and track updates.

### Automation Support

Automation, including automatic generation and machine-readability, is essential for scaling SBOMs across the software ecosystem, particularly across organizational boundaries. Tooling and predictable implementation and data formats are necessary for effective use. Common, machine-readable data formats include:

- **Software Package Data eXchange (SPDX)**
- **CycloneDX**
- **Software Identification (SWID) tags**

These formats are interoperable and support both machine and human readability, facilitating troubleshooting and innovation. New specifications that are compatible with existing formats should be included, while those no longer cross-compatible or under active maintenance should be removed.

### Practices and Processes

To integrate SBOMs into the secure development lifecycle, organizations should follow specific practices and processes:

- **Frequency**: A new SBOM must be created whenever a software component is updated, including builds to integrate new dependencies or correct errors.
- **Depth**: SBOMs should list all top-level components and their transitive dependencies. Organizations can specify depth in terms of the number of transitive steps or operational attributes.
- **Known Unknowns**: If the full dependency graph is not enumerated, the SBOM author must explicitly identify "known unknowns" to avoid erroneous assumptions.
- **Distribution and Delivery**: SBOMs should be available in a timely manner with appropriate access controls. They can be stored with the software or made accessible via version-specific URLs.
- **Access Control**: Suppliers may choose to make SBOM data public or limit access to specific users. Access control terms should be specified through licensing, contracts, or other mechanisms.
- **Accommodation of Mistakes**: Tolerance for incidental errors should be built into the initial implementation phase, allowing for continuous improvement and updates.

### Beyond Minimum Elements: Enabling Broader SBOM Use Cases

While the above elements are the minimum requirements, additional data fields and practices can further enhance SBOMs:

- **Hash of the Component**: A cryptographic hash provides a robust identifier for mapping components to relevant data sources and verifying the integrity of the component.

By implementing these recommendations, organizations can achieve higher levels of security and transparency in their software supply chains.