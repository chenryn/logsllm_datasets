compatible version of their pointer hiding. Our PHR implementation
protects all the pointers protected by Readactor, but unlike Readac-
tor, we do not require source code. Their performance overhead
of 4.6% (which includes 0.5% for code-data separation and 4.1% for
pointer hiding reported [14]) is a bit higher than our overhead of
3.86% for PHR, but a direct comparison is not possible because they
use SPEC 2006 vs our SPEC 2017. Their design can also offer higher
entropy (as the trampolines can be located far from the rest of pro-
gram code) at the expense of breaking C++ exceptions and stack
tracing. Our design maintains compatibility with these features,
while still achieving a high average function entropy of 147 bits.
kR(cid:98)X [40] is a compiler-based defense that combines code di-
versification with execute-only memory and other techniques in
order to thwart JIT-ROP in kernel code. Their phantom blocks idea,
discussed in Sec. 2.3, can provide an additional improvement to the
entropy of our LLR(k). However, we have not considered it in our
implementation because phantom blocks do not directly address
indirect disclosures, and moreover, have a significant memory cost.
CCR is a hybrid approach to achieve fine-grained randomization
at a low performance overhead. It includes (a) a compiler plugin
to extract metadata, and (b) a static binary rewriter. This hybrid
approach maintains compatibility with prevalent software distribu-
tion models, while avoiding the high overhead associated with most
previous techniques that offered a similar level of compatibility.
SBR is able to achieve its performance without compiler help.
We make several new contributions over all the above works.
Ours is the first work to systematically study how EH-metadata
can undermine code randomization, and to propose a secure code
randomization defense that is compatible with exceptions and stack-
tracing. Our technique offers low performance overheads while
operating on COTS binaries. Moreover, they can be tuned to achieve
a range of security and performance goals.
11 CONCLUSIONS
In this paper, we presented SBR, a new approach for fine-grained
code randomization. By operating on COTS binaries, our technique
maintains full compatibility with today’s software distribution and
patching mechanisms. Unlike previous works, our approach is com-
patible with C++ exceptions and stack tracing, two features that are
crucial for deployment. We show that the metadata needed by these
features can be abused by attackers. We presented several new tech-
niques that, together, achieve fine-grained code randomization that
is robust in this threat model, and achieves excellent performance.
We expect to open-source SBR in the coming months. Our experi-
mental results show that SBR offers a compelling combination of
features, making it suitable for deployment.
412Practical Fine-Grained Binary Code Randomization
ACSAC 2020, December 7–11, 2020, Austin, USA
REFERENCES
[1] Martın Abadi, Mihai Budiu, Ulfar Erlingsson, and Jay Ligatti. 2005. CFI: Principles,
[2] Martín Abadi, Mihai Budiu, Úlfar Erlingsson, and Jay Ligatti. 2009. Control-flow
[11] Xi Chen, Herbert Bos, and Cristiano Giuffrida. 2017. CodeArmor: Virtualizing
implementations, and applications. In ACM CCS.
integrity principles, implementations, and applications. ACM TISSEC (2009).
[3] Dennis Andriesse, Xi Chen, Victor Van Der Veen, Asia Slowinska, and Herbert
Bos. 2016. An in-depth analysis of disassembly on full-scale x86/x64 binaries. In
USENIX Security Symposium.
[4] Dennis Andriesse, Asia Slowinska, and Herbert Bos. 2017. Compiler-agnostic
function detection in binaries. In IEEE European Symposium on Security and
Privacy.
[5] T. Bao, J. Burket, M. Woo, R. Turner, and D. Brumley. 2014. BYTEWEIGHT:
Learning to Recognize Functions in Binary Code. In USENIX Security.
[6] Sandeep Bhatkar, R. Sekar, and Daniel C. DuVarney. 2005. Efficient techniques
for comprehensive protection from memory error exploits. In USENIX Security
Symposium.
[7] Tyler Bletsch, Xuxian Jiang, Vince W. Freeh, and Zhenkai Liang. 2011. Jump-
oriented programming: a new class of code-reuse attack. In ASIACCS.
[8] Derek Bruening, Timothy Garnett, and Saman Amarasinghe. 2003. An infrastruc-
ture for adaptive dynamic optimization. In Code Generation and Optimization.
[9] Nathan Burow, Xinping Zhang, and Mathias Payer. 2019. SoK: Shining light
on shadow stacks. In 2019 IEEE Symposium on Security and Privacy (SP). IEEE,
985–999.
[10] Nicholas Carlini, Antonio Barresi, Mathias Payer, David Wagner, and Thomas R
Gross. 2015. Control-flow bending: On the effectiveness of control-flow integrity.
In USENIX Security Symposium.
the code space to counter disclosure attacks. In Euro S&P.
[12] Yaohui Chen, Dongli Zhang, Ruowen Wang, Rui Qiao, Ahmed Azab, Long Lu,
Hayawardh Vijayakumar, and Wenbo Shen. 2017. NORAX: Enabling Execute-
Only Memory for COTS Binaries on AArch64. In IEEE Security and Privacy.
[13] Mauro Conti, Stephen Crane, Tommaso Frassetto, Andrei Homescu, Georg Kop-
pen, Per Larsen, Christopher Liebchen, Mike Perry, and Ahmad-Reza Sadeghi.
2016. Selfrando: Securing the tor browser against de-anonymization exploits.
Proceedings on Privacy Enhancing Technologies (2016).
[14] Stephen Crane, Christopher Liebchen, Andrei Homescu, Lucas Davi, Per Larsen,
Ahmad-Reza Sadeghi, Stefan Brunthaler, and Michael Franz. 2015. Readactor:
Practical code randomization resilient to memory disclosure. In IEEE Security
and Privacy.
[15] Lucas Davi, Ra Dmitrienko, Manuel Egele, Thomas Fischer, Thorsten Holz, Ralf
Hund, Stefan Nürnberger, and Ahmad reza Sadeghi. 2012. MoCFI: a framework
to mitigate control-flow attacks on smartphones. In NDSS.
[16] Lucas Davi, Christopher Liebchen, Ahmad-Reza Sadeghi, Kevin Z Snow, and
Fabian Monrose. 2015. Isomeron: Code randomization resilient to (just-in-time)
return-oriented programming. In NDSS.
[17] Lucas Davi, Ahmad-Reza Sadeghi, and Marcel Winandy. 2011. ROPdefender: a
detection tool to defend against return-oriented programming attacks. In ASI-
ACCS.
[18] Lucas Vincenzo Davi, Alexandra Dmitrienko, Stefan Nürnberger, and Ahmad-
Reza Sadeghi. 2013. Gadge me if you can: secure and efficient ad-hoc instruction-
level randomization for x86 and ARM. In ACM CCS.
[19] Sushant Dinesh, Nathan Burow, Dongyan Xu, and Mathias Payer. 2020.
RetroWrite: Statically Instrumenting COTS Binaries for Fuzzing and Sanitization.
In IEEE Symposium on Security and Privacy.
[20] Ren Ding, Chenxiong Qian, Chengyu Song, Bill Harris, Taesoo Kim, and Wenke
Lee. 2017. Efficient protection of path-sensitive control security. In USENIX
Security Symposium.
[21] Úlfar Erlingsson, Martín Abadi, Michael Vrable, Mihai Budiu, and George C
Necula. 2006. XFI: Software guards for system address spaces. In Operating
systems design and implementation.
[22] Jason Gionta, William Enck, and Peng Ning. 2015. HideM: Protecting the Contents
of Userspace Memory in the Face of Disclosure Vulnerabilities. In Data and
Application Security and Privacy (CODASPY).
[23] Istvan Haller, Enes Göktaş, Elias Athanasopoulos, Georgios Portokalidis, and
Herbert Bos. 2015. Shrinkwrap: Vtable protection without loose ends. In ACSAC.
[24] Niranjan Hasabnis and R Sekar. 2016. Extracting Instruction Semantics Via Sym-
bolic Execution of Code Generators. In ACM Foundations of Software Engineering.
[25] Niranjan Hasabnis and R Sekar. 2016. Lifting assembly to intermediate repre-
sentation: A novel approach leveraging compilers. In Architectural Support for
Programming Languages and Operating Systems.
[26] Jason Hiser, Anh Nguyen-Tuong, Michele Co, Matthew Hall, and Jack W Davidson.
2012. ILR: Where’d my gadgets go?. In IEEE Security and Privacy.
Franz. 2013. Profile-guided automated software diversity. In CGO.
[28] Hong Hu, Chenxiong Qian, Carter Yagemann, Simon Pak Ho Chung, William R
Harris, Taesoo Kim, and Wenke Lee. 2018. Enforcing unique code target property
for control-flow integrity. In Proceedings of the 2018 ACM SIGSAC Conference on
[27] Andrei Homescu, Steven Neisius, Per Larsen, Stefan Brunthaler, and Michael
Computer and Communications Security.
[29] Mustakimur Rahman Khandaker, Wenqing Liu, Abu Naser, Zhi Wang, and Jie
Yang. 2019. Origin-sensitive control flow integrity. In USENIX Security Sympo-
sium.
[30] Chongkyung Kil, Jinsuk Jun, Christopher Bookholt, Jun Xu, and Peng Ning. 2006.
Address space layout permutation (ASLP): Towards fine-grained randomization
of commodity software. In Annual Computer Security Applications Conference.
[31] Hyungjoon Koo, Yaohui Chen, Long Lu, Vasileios P Kemerlis, and Michalis
Polychronakis. 2018. Compiler-assisted code randomization. In Security and
Privacy.
[32] Hyungjoon Koo and Michalis Polychronakis. 2016. Juggling the gadgets: Binary-
level code randomization using instruction displacement. In Asia CCS.
systems. In Annual Computer Security Applications Conference.
[34] Chi-Keung Luk, Robert Cohn, Robert Muth, Harish Patil, Artur Klauser, Geoff
Lowney, Steven Wallace, Vijay Janapa Reddi, and Kim Hazelwood. 2005. Pin:
building customized program analysis tools with dynamic instrumentation. In
Programming language design and implementation.
[35] Huan Nguyen, Niranjan Hasabnis, and R Sekar. 2019. LISC v2: Learning Instruc-
tion Semantics from Code Generators. http://www.seclab.cs.sunysb.edu/seclab/
liscV2/. Accessed: 2019-06-03.
[33] Lixin Li, Jim Just, and R. Sekar. 2006. Address-space randomization for windows
[36] Ben Niu and Gang Tan. 2014. RockJIT: Securing just-in-time compilation using
[44] Rui Qiao, Mingwei Zhang, and R Sekar. 2015. A Principled Approach for ROP
[37] James Oakley and Sergey Bratus. 2011. Exploiting the Hard-Working DWARF:
modular control-flow integrity. In ACM CCS.
Trojan and Exploit Techniques with No Native Executable Code. In WOOT.
[38] Vasilis Pappas, Michalis Polychronakis, and Angelos D Keromytis. 2012. Smash-
ing the gadgets: Hindering return-oriented programming using in-place code
randomization. In Security and Privacy.
[39] Vasilis Pappas, Michalis Polychronakis, and Angelos D Keromytis. 2013. Transpar-
ent ROP Exploit Mitigation Using Indirect Branch Tracing. In USENIX Security.
[40] Marios Pomonis, Theofilos Petsios, Angelos D Keromytis, Michalis Polychronakis,
and Vasileios P Kemerlis. 2017. kRˆ X: Comprehensive kernel protection against
just-in-time code reuse. In EuroSys.
[41] Soumyakant Priyadarshan. [n.d.]. A Study of Binary Instrumentation Techniques.
Research Proficiency Report, Secure Systems Lab, Stony Brook University, http:
//seclab.cs.sunysb.edu/seclab/pubs/soumyakant_rpe.pdf. Accessed: 2020-08-30.
[42] Soumyakant Priyadarshan, Huan Nguyen, and R. Sekar. 2020. On the Impact of
Exception Handling Compatibility on Binary Instrumentation. In ACM FEAST.
[43] Rui Qiao and R Sekar. 2017. A Principled Approach for Function Recognition in
COTS Binaries. In Dependable Systems and Networks (DSN).
Defense. In Annual Computer Security Applications Conference.
[45] Robert Rudd, Richard Skowyra, David Bigelow, Veer Dedhia, Thomas Hobson,
Stephen Crane, Christopher Liebchen, Per Larsen, Lucas Davi, Michael Franz,
et al. 2017. Address Oblivious Code Reuse: On the Effectiveness of Leakage
Resilient Diversity. In NDSS.
[46] Felix Schuster, Thomas Tendyck, Christopher Liebchen, Lucas Davi, Ahmad-Reza
Sadeghi, and Thorsten Holz. 2015. Counterfeit object-oriented programming:
On the difficulty of preventing code reuse attacks in C++ applications. In IEEE
Security and Privacy.
[47] Hovav Shacham et al. 2007. The geometry of innocent flesh on the bone: return-
into-libc without function calls (on the x86). In ACM CCS.
functions in binaries with neural networks. In USENIX Security Symposium.
[49] Matthew Smithson, Khaled ElWazeer, Kapil Anand, Aparna Kotha, and Rajeev
Barua. 2013. Static binary rewriting without supplemental information: Over-
coming the tradeoff between coverage and correctness. In Working Conference
on Reverse Engineering (WCRE).
[50] Kevin Z. Snow, Fabian Monrose, Lucas Davi, Alexandra Dmitrienko, Christopher
Liebchen, and Ahmad-Reza Sadeghi. 2013. Just-In-Time Code Reuse: On the
Effectiveness of Fine-Grained Address Space Layout Randomization. In IEEE
Security and Privacy.
[51] Adrian Tang, Simha Sethumadhavan, and Salvatore Stolfo. 2015. Heisenbyte:
Thwarting memory disclosure attacks using destructive code reads. In ACM CCS.
[52] Caroline Tice, Tom Roeder, Peter Collingbourne, Stephen Checkoway, Úlfar
Erlingsson, Luis Lozano, and Geoff Pike. 2014. Enforcing Forward-Edge Control-
Flow Integrity in GCC and LLVM. In USENIX Security.
[53] Victor Van der Veen, Dennis Andriesse, Enes Göktaş, Ben Gras, Lionel Sambuc,
Asia Slowinska, Herbert Bos, and Cristiano Giuffrida. 2015. Practical context-
sensitive CFI. In Proceedings of the 22nd ACM SIGSAC Conference on Computer
and Communications Security. 927–940.
[54] Robert Wahbe, Steven Lucco, Thomas E. Anderson, and Susan L. Graham. 1993.
Efficient software-based fault isolation. In SOSP.
[55] Richard Wartell, Vishwath Mohan, Kevin W Hamlen, and Zhiqiang Lin. 2012.
Binary stirring: Self-randomizing instruction addresses of legacy x86 binary code.
In ACM CCS.
[48] Eui Chul Richard Shin, Dawn Song, and Reza Moazzezi. 2015. Recognizing
413ACSAC 2020, December 7–11, 2020, Austin, USA
Soumyakant Priyadarshan, Huan Nguyen, and R. Sekar
[56] Jan Werner, George Baltas, Rob Dallara, Nathan Otterness, Kevin Z Snow, Fabian
Monrose, and Michalis Polychronakis. 2016. No-execute-after-read: Preventing
code disclosure in commodity software. In ASIACCS.
[57] David Williams-King, Graham Gobieski, Kent Williams-King, James P Blake,
Xinhao Yuan, Patrick Colp, Michelle Zheng, Vasileios P Kemerlis, Junfeng Yang,
and William Aiello. 2016. Shuffler: Fast and deployable continuous code re-
randomization. In OSDI.
[58] David Williams-King, Hidenori Kobayashi, Kent Williams-King, Graham Pat-
terson, Frank Spano, Yu Jian Wu, Junfeng Yang, and Vasileios P Kemerlis. 2020.
Egalito: Layout-Agnostic Binary Recompilation. In ASPLOS.
[59] Bennet Yee, David Sehr, Gregory Dardyk, J. Bradley Chen, Robert Muth, Tavis
Ormandy, Shiki Okasaka, Neha Narula, and Nicholas Fullagar. 2009. Native
Client: A Sandbox for Portable, Untrusted x86 Native Code. In IEEE Symposium
on Security and Privacy.
[60] Chao Zhang, Chengyu Song, Z. Kevin Chen, Zhaofeng Chen, and Dawn Song.
2015. VTint: Protecting Virtual Function Tables’ Integrity. In NDSS.
[61] Chao Zhang, Tao Wei, Zhaofeng Chen, Lei Duan, Laszlo Szekeres, Stephen Mc-
Camant, Dawn Song, and Wei Zou. 2013. Practical control flow integrity and
randomization for binary executables. In IEEE Security and Privacy.
[62] Mingwei Zhang, Michalis Polychronakis, and R Sekar. 2017. Protecting COTS Bi-
naries from Disclosure-guided Code Reuse Attacks. In Annual Computer Security
Applications Conference.
[63] Mingwei Zhang, Rui Qiao, Niranjan Hasabnis, and R Sekar. 2014. A platform for
secure static binary instrumentation. ACM VEE (2014).
USENIX Security.
binaries: An effective defense against real-world ROP attacks. In ACSAC.
[64] Mingwei Zhang and R Sekar. 2013. Control flow integrity for COTS binaries. In
[65] Mingwei Zhang and R Sekar. 2015. Control flow and code integrity for COTS
6
6
ZJR
BBR
PHR
LLR(k)
PHR +LLR(k)
9
9
16
5
10
15
Runtime Overhead (%)
200
)
s
t
i
b
(
y
p
o
r
t
n
E
100
16
0
Figure 8: Reduced Unwinding Block Entropy vs Runtime
Overhead (SPECspeed 2017)
Module name
libwireshark.so.11.1.10
libicudata.so.60.2
libgtk-3.so.0.2200.30
libQt5Core.so.5.9.5
libpython3.6m.so.1.0
libgtk-x11-2.0.so.0.2400.32
libicui18n.so.60.2
libpoppler.so.73.0.0
libc-2.27.so
libxml2.so.2.9.4
libapt-pkg.so.5.0.2
libicuuc.so.60.2
libm-2.27.so
libgio-2.0.so.0.5600.4
libQt5Network.so.5.9.5
libstdc++.so.6.0.25
libunistring.so.2.1.0
libnss3.so
libgstreamer-1.0.so.0.1405.0
libX11.so.6.3.0
libp11-kit.so.0.3.0
libcairo.so.2.11510.0
libQt5Multimedia.so.5.9.5
libglib-2.0.so.0.5600.4
libvlccore.so.9.0.0
libepoxy.so.0.0.0
libgdk-3.so.0.2200.30
libgedit.so
libkrb5.so.3.3
libspandsp.so.2.0.0
libgdk-x11-2.0.so.0.2400.32
libfreetype.so.6.15.0
libvorbisenc.so.2.0.11
libaspell.so.15.2.0
libpixman-1.so.0.34.0
libgegl-0.3.so.0.330.0
libgtksourceview-3.0.so.1.8.0
libharfbuzz.so.0.10702.0
libGLdispatch.so.0.0.0
libsystemd.so.0.21.0
libgmp.so.10.3.2
libpulsecommon-11.1.so
liborc-0.4.so.0.28.0
libzstd.so.1.3.3
libsndfile.so.1.0.28
libtiff.so.5.3.0
libFLAC.so.8.3.0
libgstbase-1.0.so.0.1405.0
libnl-route-3.so.200.24.0
Other libraries
Total
Size
77.95MB
25.66MB
7.01MB
5.28MB
4.47MB
4.25MB
2.63MB
2.58MB
1.94MB
1.75MB
1.74MB
1.71MB
1.62MB
1.61MB
1.54MB
1.52MB
1.49MB
1.26MB
1.23MB
1.22MB
1.18MB
1.11MB
1.09MB
1.09MB
1.05MB
1MB
0.96MB
0.87MB
0.84MB
0.77MB
0.71MB
0.7MB
0.66MB
0.65MB
0.64MB
0.63MB
0.63MB
0.62MB
0.58MB
0.51MB
0.5MB
0.49MB
0.49MB
0.48MB
0.46MB
0.46MB
0.46MB
0.46MB
0.45MB
27.56MB
197MB
Table 9: 50 largest Low-level Libraries transformed by SBR
414