Certainly! Here is the optimized and refined version of your text:

---

### Pointer Hiding and Performance Comparison

Our Pointer Hiding and Randomization (PHR) implementation protects all pointers that are protected by Readactor, but unlike Readactor, it does not require source code. The performance overhead of Readactor is 4.6% (which includes 0.5% for code-data separation and 4.1% for pointer hiding, as reported in [14]), which is slightly higher than our PHR overhead of 3.86%. However, a direct comparison is not feasible because Readactor uses SPEC 2006, while we use SPEC 2017. Readactor's design can offer higher entropy (since trampolines can be located far from the rest of the program code), but at the cost of breaking C++ exceptions and stack tracing. Our design maintains compatibility with these features while still achieving an average function entropy of 147 bits.

kR^X [40] is a compiler-based defense that combines code diversification with execute-only memory and other techniques to thwart Just-In-Time Return-Oriented Programming (JIT-ROP) in kernel code. Their concept of phantom blocks, discussed in Section 2.3, could enhance the entropy of our Low-Level Randomization (LLR(k)). However, we did not include this in our implementation because phantom blocks do not directly address indirect disclosures and have a significant memory cost.

### Hybrid Approach for Fine-Grained Randomization

Code Control Randomization (CCR) is a hybrid approach that achieves fine-grained randomization with low performance overhead. It consists of:
1. A compiler plugin to extract metadata.
2. A static binary rewriter.

This hybrid approach maintains compatibility with prevalent software distribution models while avoiding the high overhead associated with most previous techniques that offered similar compatibility. Static Binary Rewriting (SBR) achieves its performance without requiring compiler assistance.

### Contributions and Conclusions

We make several new contributions over the existing works:
- Ours is the first work to systematically study how Exception Handling (EH) metadata can undermine code randomization and to propose a secure code randomization defense that is compatible with exceptions and stack tracing.
- Our technique offers low performance overheads while operating on Commercial Off-The-Shelf (COTS) binaries.
- It can be tuned to achieve a range of security and performance goals.

### Conclusions

In this paper, we presented SBR, a new approach for fine-grained code randomization. By operating on COTS binaries, our technique maintains full compatibility with today’s software distribution and patching mechanisms. Unlike previous works, our approach is compatible with C++ exceptions and stack tracing, two features that are crucial for deployment. We show that the metadata needed by these features can be abused by attackers. We introduced several new techniques that, together, achieve fine-grained code randomization that is robust in this threat model and achieves excellent performance. We plan to open-source SBR in the coming months. Our experimental results demonstrate that SBR offers a compelling combination of features, making it suitable for deployment.

### References

[1] Martín Abadi, Mihai Budiu, Úlfar Erlingsson, and Jay Ligatti. 2005. CFI: Principles, implementations, and applications. In ACM CCS.

[2] Martín Abadi, Mihai Budiu, Úlfar Erlingsson, and Jay Ligatti. 2009. Control-flow integrity principles, implementations, and applications. ACM TISSEC (2009).

[3] Dennis Andriesse, Xi Chen, Victor Van Der Veen, Asia Slowinska, and Herbert Bos. 2016. An in-depth analysis of disassembly on full-scale x86/x64 binaries. In USENIX Security Symposium.

[4] Dennis Andriesse, Asia Slowinska, and Herbert Bos. 2017. Compiler-agnostic function detection in binaries. In IEEE European Symposium on Security and Privacy.

[5] T. Bao, J. Burket, M. Woo, R. Turner, and D. Brumley. 2014. BYTEWEIGHT: Learning to Recognize Functions in Binary Code. In USENIX Security.

[6] Sandeep Bhatkar, R. Sekar, and Daniel C. DuVarney. 2005. Efficient techniques for comprehensive protection from memory error exploits. In USENIX Security Symposium.

[7] Tyler Bletsch, Xuxian Jiang, Vince W. Freeh, and Zhenkai Liang. 2011. Jump-oriented programming: a new class of code-reuse attack. In ASIACCS.

[8] Derek Bruening, Timothy Garnett, and Saman Amarasinghe. 2003. An infrastructure for adaptive dynamic optimization. In Code Generation and Optimization.

[9] Nathan Burow, Xinping Zhang, and Mathias Payer. 2019. SoK: Shining light on shadow stacks. In 2019 IEEE Symposium on Security and Privacy (SP). IEEE, 985–999.

[10] Nicholas Carlini, Antonio Barresi, Mathias Payer, David Wagner, and Thomas R Gross. 2015. Control-flow bending: On the effectiveness of control-flow integrity. In USENIX Security Symposium.

[11] Yaohui Chen, Dongli Zhang, Ruowen Wang, Rui Qiao, Ahmed Azab, Long Lu, Hayawardh Vijayakumar, and Wenbo Shen. 2017. NORAX: Enabling Execute-Only Memory for COTS Binaries on AArch64. In IEEE Security and Privacy.

[12] Mauro Conti, Stephen Crane, Tommaso Frassetto, Andrei Homescu, Georg Kopp, Per Larsen, Christopher Liebchen, Mike Perry, and Ahmad-Reza Sadeghi. 2016. Selfrando: Securing the tor browser against de-anonymization exploits. Proceedings on Privacy Enhancing Technologies (2016).

[13] Stephen Crane, Christopher Liebchen, Andrei Homescu, Lucas Davi, Per Larsen, Ahmad-Reza Sadeghi, Stefan Brunthaler, and Michael Franz. 2015. Readactor: Practical code randomization resilient to memory disclosure. In IEEE Security and Privacy.

[14] Lucas Davi, Ra Dmitrienko, Manuel Egele, Thomas Fischer, Thorsten Holz, Ralf Hund, Stefan Nürnberger, and Ahmad Reza Sadeghi. 2012. MoCFI: a framework to mitigate control-flow attacks on smartphones. In NDSS.

[15] Lucas Davi, Christopher Liebchen, Ahmad-Reza Sadeghi, Kevin Z Snow, and Fabian Monrose. 2015. Isomeron: Code randomization resilient to (just-in-time) return-oriented programming. In NDSS.

[16] Lucas Davi, Ahmad-Reza Sadeghi, and Marcel Winandy. 2011. ROPdefender: a detection tool to defend against return-oriented programming attacks. In ASIACCS.

[17] Lucas Vincenzo Davi, Alexandra Dmitrienko, Stefan Nürnberger, and Ahmad-Reza Sadeghi. 2013. Gadge me if you can: secure and efficient ad-hoc instruction-level randomization for x86 and ARM. In ACM CCS.

[18] Sushant Dinesh, Nathan Burow, Dongyan Xu, and Mathias Payer. 2020. RetroWrite: Statically Instrumenting COTS Binaries for Fuzzing and Sanitization. In IEEE Symposium on Security and Privacy.

[19] Ren Ding, Chenxiong Qian, Chengyu Song, Bill Harris, Taesoo Kim, and Wenke Lee. 2017. Efficient protection of path-sensitive control security. In USENIX Security Symposium.

[20] Úlfar Erlingsson, Martín Abadi, Michael Vrable, Mihai Budiu, and George C Necula. 2006. XFI: Software guards for system address spaces. In Operating systems design and implementation.

[21] Jason Gionta, William Enck, and Peng Ning. 2015. HideM: Protecting the Contents of Userspace Memory in the Face of Disclosure Vulnerabilities. In Data and Application Security and Privacy (CODASPY).

[22] Istvan Haller, Enes Göktaş, Elias Athanasopoulos, Georgios Portokalidis, and Herbert Bos. 2015. Shrinkwrap: Vtable protection without loose ends. In ACSAC.

[23] Niranjan Hasabnis and R Sekar. 2016. Extracting Instruction Semantics Via Symbolic Execution of Code Generators. In ACM Foundations of Software Engineering.

[24] Niranjan Hasabnis and R Sekar. 2016. Lifting assembly to intermediate representation: A novel approach leveraging compilers. In Architectural Support for Programming Languages and Operating Systems.

[25] Jason Hiser, Anh Nguyen-Tuong, Michele Co, Matthew Hall, and Jack W Davidson. 2012. ILR: Where’d my gadgets go?. In IEEE Security and Privacy.

[26] Andrei Homescu, Steven Neisius, Per Larsen, Stefan Brunthaler, and Michael Franz. 2013. Profile-guided automated software diversity. In CGO.

[27] Hong Hu, Chenxiong Qian, Carter Yagemann, Simon Pak Ho Chung, William R Harris, Taesoo Kim, and Wenke Lee. 2018. Enforcing unique code target property for control-flow integrity. In Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security.

[28] Mustakimur Rahman Khandaker, Wenqing Liu, Abu Naser, Zhi Wang, and Jie Yang. 2019. Origin-sensitive control flow integrity. In USENIX Security Symposium.

[29] Chongkyung Kil, Jinsuk Jun, Christopher Bookholt, Jun Xu, and Peng Ning. 2006. Address space layout permutation (ASLP): Towards fine-grained randomization of commodity software. In Annual Computer Security Applications Conference.

[30] Hyungjoon Koo, Yaohui Chen, Long Lu, Vasileios P Kemerlis, and Michalis Polychronakis. 2018. Compiler-assisted code randomization. In Security and Privacy.

[31] Hyungjoon Koo and Michalis Polychronakis. 2016. Juggling the gadgets: Binary-level code randomization using instruction displacement. In Asia CCS.

[32] Lixin Li, Jim Just, and R. Sekar. 2006. Address-space randomization for Windows systems. In Annual Computer Security Applications Conference.

[33] Chi-Keung Luk, Robert Cohn, Robert Muth, Harish Patil, Artur Klauser, Geoff Lowney, Steven Wallace, Vijay Janapa Reddi, and Kim Hazelwood. 2005. Pin: building customized program analysis tools with dynamic instrumentation. In Programming language design and implementation.

[34] Huan Nguyen, Niranjan Hasabnis, and R Sekar. 2019. LISC v2: Learning Instruction Semantics from Code Generators. http://www.seclab.cs.sunysb.edu/seclab/liscV2/. Accessed: 2019-06-03.

[35] Ben Niu and Gang Tan. 2014. RockJIT: Securing just-in-time compilation using modular control-flow integrity. In ACM CCS.

[36] James Oakley and Sergey Bratus. 2011. Exploiting the Hard-Working DWARF: Trojan and Exploit Techniques with No Native Executable Code. In WOOT.

[37] Vasilis Pappas, Michalis Polychronakis, and Angelos D Keromytis. 2012. Smashing the gadgets: Hindering return-oriented programming using in-place code randomization. In Security and Privacy.

[38] Vasilis Pappas, Michalis Polychronakis, and Angelos D Keromytis. 2013. Transparent ROP Exploit Mitigation Using Indirect Branch Tracing. In USENIX Security.

[39] Marios Pomonis, Theofilos Petsios, Angelos D Keromytis, Michalis Polychronakis, and Vasileios P Kemerlis. 2017. kR^X: Comprehensive kernel protection against just-in-time code reuse. In EuroSys.

[40] Soumyakant Priyadarshan. [n.d.]. A Study of Binary Instrumentation Techniques. Research Proficiency Report, Secure Systems Lab, Stony Brook University, http://seclab.cs.sunysb.edu/seclab/pubs/soumyakant_rpe.pdf. Accessed: 2020-08-30.

[41] Soumyakant Priyadarshan, Huan Nguyen, and R. Sekar. 2020. On the Impact of Exception Handling Compatibility on Binary Instrumentation. In ACM FEAST.

[42] Rui Qiao and R Sekar. 2017. A Principled Approach for Function Recognition in COTS Binaries. In Dependable Systems and Networks (DSN).

[43] Robert Rudd, Richard Skowyra, David Bigelow, Veer Dedhia, Thomas Hobson, Stephen Crane, Christopher Liebchen, Per Larsen, Lucas Davi, Michael Franz, et al. 2017. Address Oblivious Code Reuse: On the Effectiveness of Leakage Resilient Diversity. In NDSS.

[44] Felix Schuster, Thomas Tendyck, Christopher Liebchen, Lucas Davi, Ahmad-Reza Sadeghi, and Thorsten Holz. 2015. Counterfeit object-oriented programming: On the difficulty of preventing code reuse attacks in C++ applications. In IEEE Security and Privacy.

[45] Hovav Shacham et al. 2007. The geometry of innocent flesh on the bone: return-into-libc without function calls (on the x86). In ACM CCS.

[46] Eui Chul Richard Shin, Dawn Song, and Reza Moazzezi. 2015. Recognizing functions in binaries with neural networks. In USENIX Security Symposium.

[47] Matthew Smithson, Khaled ElWazeer, Kapil Anand, Aparna Kotha, and Rajeev Barua. 2013. Static binary rewriting without supplemental information: Overcoming the tradeoff between coverage and correctness. In Working Conference on Reverse Engineering (WCRE).

[48] Kevin Z. Snow, Fabian Monrose, Lucas Davi, Alexandra Dmitrienko, Christopher Liebchen, and Ahmad-Reza Sadeghi. 2013. Just-In-Time Code Reuse: On the Effectiveness of Fine-Grained Address Space Layout Randomization. In IEEE Security and Privacy.

[49] Adrian Tang, Simha Sethumadhavan, and Salvatore Stolfo. 2015. Heisenbyte: Thwarting memory disclosure attacks using destructive code reads. In ACM CCS.

[50] Caroline Tice, Tom Roeder, Peter Collingbourne, Stephen Checkoway, Úlfar Erlingsson, Luis Lozano, and Geoff Pike. 2014. Enforcing Forward-Edge Control-Flow Integrity in GCC and LLVM. In USENIX Security.

[51] Victor Van der Veen, Dennis Andriesse, Enes Göktaş, Ben Gras, Lionel Sambuc, Asia Slowinska, Herbert Bos, and Cristiano Giuffrida. 2015. Practical context-sensitive CFI. In Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security. 927–940.

[52] Robert Wahbe, Steven Lucco, Thomas E. Anderson, and Susan L. Graham. 1993. Efficient software-based fault isolation. In SOSP.

[53] Richard Wartell, Vishwath Mohan, Kevin W Hamlen, and Zhiqiang Lin. 2012. Binary stirring: Self-randomizing instruction addresses of legacy x86 binary code. In ACM CCS.

[54] Jan Werner, George Baltas, Rob Dallara, Nathan Otterness, Kevin Z Snow, Fabian Monrose, and Michalis Polychronakis. 2016. No-execute-after-read: Preventing code disclosure in commodity software. In ASIACCS.

[55] David Williams-King, Graham Gobieski, Kent Williams-King, James P Blake, Xinhao Yuan, Patrick Colp, Michelle Zheng, Vasileios P Kemerlis, Junfeng Yang, and William Aiello. 2016. Shuffler: Fast and deployable continuous code re-randomization. In OSDI.

[56] David Williams-King, Hidenori Kobayashi, Kent Williams-King, Graham Patterson, Frank Spano, Yu Jian Wu, Junfeng Yang, and Vasileios P Kemerlis. 2020. Egalito: Layout-Agnostic Binary Recompilation. In ASPLOS.

[57] Bennet Yee, David Sehr, Gregory Dardyk, J. Bradley Chen, Robert Muth, Tavis Ormandy, Shiki Okasaka, Neha Narula, and Nicholas Fullagar. 2009. Native Client: A Sandbox for Portable, Untrusted x86 Native Code. In IEEE Symposium on Security and Privacy.

[58] Chao Zhang, Chengyu Song, Z. Kevin Chen, Zhaofeng Chen, and Dawn Song. 2015. VTint: Protecting Virtual Function Tables’ Integrity. In NDSS.

[59] Chao Zhang, Tao Wei, Zhaofeng Chen, Lei Duan, Laszlo Szekeres, Stephen McCamant, Dawn Song, and Wei Zou. 2013. Practical control flow integrity and randomization for binary executables. In IEEE Security and Privacy.

[60] Mingwei Zhang, Michalis Polychronakis, and R Sekar. 2017. Protecting COTS Binaries from Disclosure-guided Code Reuse Attacks. In Annual Computer Security Applications Conference.

[61] Mingwei Zhang, Rui Qiao, Niranjan Hasabnis, and R Sekar. 2014. A platform for secure static binary instrumentation. ACM VEE (2014).

[62] Mingwei Zhang and R Sekar. 2013. Control flow integrity for COTS binaries. In USENIX Security.

[63] Mingwei Zhang and R Sekar. 2015. Control flow and code integrity for COTS binaries: An effective defense against real-world ROP attacks. In ACSAC.

### Table 9: 50 Largest Low-Level Libraries Transformed by SBR

| Module Name | Size (MB) |
|-------------|-----------|
| libwireshark.so.11.1.10 | 77.95 |
| libicudata.so.60.2 | 25.66 |
| libgtk-3.so.0.2200.30 | 7.01 |
| libQt5Core.so.5.9.5 | 5.28 |
| libpython3.6m.so.1.0 | 4.47 |
| libgtk-x11-2.0.so.0.2400.32 | 4.25 |
| libicui18n.so.60.2 | 2.63 |
| libpoppler.so.73.0.0 | 2.58 |
| libc-2.27.so | 1.94 |
| libxml2.so.2.9.4 | 1.75 |
| libapt-pkg.so.5.0.2 | 1.74 |
| libicuuc.so.60.2 | 1.71 |
| libm-2.27.so | 1.62 |
| libgio-2.0.so.0.5600.4 | 1.61 |
| libQt5Network.so.5.9.5 | 1.54 |
| libstdc++.so.6.0.25 | 1.52 |
| libunistring.so.2.1.0 | 1.49 |
| libnss3.so | 1.26 |
| libgstreamer-1.0.so.0.1405.0 | 1.23 |
| libX11.so.6.3.0 | 1.22 |
| libp11-kit.so.0.3.0 | 1.18 |
| libcairo.so.2.11510.0 | 1.11 |
| libQt5Multimedia.so.5.9.5 | 1.09 |
| libglib-2.0.so.0.5600.4 | 1.09 |
| libvlccore.so.9.0.0 | 1.05 |
| libepoxy.so.0.0.0 | 1.00 |
| libgdk-3.so.0.2200.30 | 0.96 |
| libgedit.so | 0.87 |
| libkrb5.so.3.3 | 0.84 |
| libspandsp.so.2.0.0 | 0.77 |
| libgdk-x11-2.0.so.0.2400.32 | 0.71 |
| libfreetype.so.6.15.0 | 0.70 |
| libvorbisenc.so.2.0.11 | 0.66 |
| libaspell.so.15.2.0 | 0.65 |
| libpixman-1.so.0.34.0 | 0.64 |
| libgegl-0.3.so.0.330.0 | 0.63 |
| libgtksourceview-3.0.so.1.8.0 | 0.63 |
| libharfbuzz.so.0.10702.0 | 0.62 |
| libGLdispatch.so.0.0.0 | 0.58 |
| libsystemd.so.0.21.0 | 0.51 |
| libgmp.so.10.3.2 | 0.50 |
| libpulsecommon-11.1.so | 0.49 |
| liborc-0.4.so.0.28.0 | 0.49 |
| libzstd.so.1.3.3 | 0.48 |
| libsndfile.so.1.0.28 | 0.46 |
| libtiff.so.5.3.0 | 0.46 |
| libFLAC.so.8.3.0 | 0.46 |
| libgstbase-1.0.so.0.1405.0 | 0.46 |
| libnl-route-3.so.200.24.0 | 0.45 |
| Other libraries | 27.56 |
| **Total** | **197** |

---

This version is more structured, clear, and professional, with improved readability and coherence.