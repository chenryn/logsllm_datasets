title:A Framework for Node-Level Fault Tolerance in Distributed Real-Time
Systems
author:Joakim Aidemark and
Peter Folkesson and
Johan Karlsson
A Framework for Node-Level Fault Tolerance  
in Distributed Real-time Systems 
Joakim Aidemark1 
Volvo Car Corporation 
Department of Safety Electronics 
SE-405 31 Gothenburg, Sweden 
PI:EMAIL 
Abstract 
and 
thereby 
failures 
improve 
This  paper  describes  a  framework  for  achieving 
node-level  fault  tolerance  (NLFT)  in  distributed  real-
time systems. The objective of NLFT is to mask errors 
at  the  node  level  in  order  to  reduce  the  probability  of 
node 
system 
dependability.  We  describe  an  approach  called  light-
weight NLFT where transient faults are masked locally 
in 
time-redundant  execution  of 
application  tasks.  The  advantages  of  light-weight 
NLFT  is  demonstrated  by  a  reliability  analysis  of  an 
example  brake-by-wire  architecture.  The  results  show 
that  the  use  of  light-weight  NLFT  may  provide  55% 
higher  reliability  after  one  year  and  almost  60% 
higher MTTF, compared to using fail-silent nodes. 
the  nodes  by 
1. Introduction  
An 
examples 
applications.  Classical 
important  class  of  fault-tolerant  computer 
systems  is  those  used  for  real-time  control  of  safety-
critical 
are 
computerized flight control systems,  known as  fly-by-
wire systems, which have been in use for more than a 
decade  in  commercial  airplanes  and  even  longer  in 
military aircraft. The automotive industry  has recently 
started  development  of  sophisticated  active  safety 
systems and brake-by-wire systems. These systems are 
expected to reach the market within a few years. 
The design principles of existing fault tolerant space 
and aviation systems have proven very successful, but 
are  often  too  costly  for  emerging  applications  such  as 
micro-satellites,  unmanned  air  vehicles,  and  active 
safety systems for road vehicles. Thus, a current trend 
is  to  use  distributed  systems  that  are  implemented 
using  generic  platforms,  which  allow  development  of 
different 
dependability 
requirements.  Examples  of  generic  platforms  are  the 
Time-Triggered-Architecture  [1]  and  GUARDS  [2]. 
1 This work was conducted while J. Aidemark was 
  with Chalmers University of Technology 
systems  with 
varying 
Peter Folkesson and Johan Karlsson 
Chalmers University of Technology 
Department of Computer Engineering 
SE-412 96 Gothenburg, Sweden 
{peterf, johan}@ce.chalmers.se 
A distributed  system consists of several computers, 
or  nodes,  that  interact  via  a  communication  network. 
Fault-tolerance 
is  achieved  by  executing  critical 
programs  redundantly  on  two  or  more  nodes.  The 
number  of  redundant  nodes  required  depends  on  the 
failure  modes  of  the  nodes.  If  we  use  nodes  that  may 
deliver erroneous outputs without any error indication, 
we  need  majority  voting  to  mask  errors  requiring  at 
least  2f+1  nodes  to  tolerate  f  node  failures.  Another 
approach  is  to  use  fail-silent  nodes  [1,3].  A  fail-silent 
node  produces  either  correct  outputs,  no  outputs,  or 
outputs  that  can  be  identified  as  erroneous  by  the 
receiver.  This  property  makes  it  possible  to  use  f+1 
nodes  to  tolerate  f  node  failures,  which  minimizes  the 
number of the nodes in the system [4]. 
The use of fail-silent nodes is therefore an attractive 
solution  for  reducing  the  number  of  nodes  in  the 
system.  However,  the  fail-silent  property  requires  that 
the  nodes  are  equipped  with  adequate  internal  error 
detection  mechanisms.  This  increases  the  complexity 
and thereby the cost of the nodes. Optimizing the cost 
of  fault-tolerant  distributed  systems  therefore  involves 
a  trade-off  between  the  complexity  of  the  nodes  and 
the number of redundant nodes required. 
Systems that rely on fail-silent nodes generally shut 
down their operation for both transient and permanent 
faults. Thus, all faults regardless of their duration lead 
to  node  failures  that  must  be  handled  at  the  system 
level  by  means  of  a  distributed 
redundancy 
management protocol. 
In this paper, we propose the use of node-level fault 
tolerance  (NLFT)  as  a  complement  to  system-level 
fault  tolerance.  The  objective  of  NLFT  is  to  mask 
errors  at  the  node  level  in  order  to  reduce  the 
probability  of  node  failures  and  thereby  improve 
system  dependability.  To  keep  the  cost  of  NLFT  low, 
we  propose  an  approach  to  node-level  fault  tolerance 
called light-weight NLFT in which only transient faults 
are  masked  at  the  node  level.  More  precisely,  light-
weight NLFT corresponds to using nodes that (i) mask 
the  effects  of  most  transient  faults  locally  in  the  node 
and  (ii)  exhibit  omission  or  fail-silent  failures  for  all 
permanent  faults  and  all  those  transient  faults  that 
cannot  be  masked  by  the  node  itself.  Thus,  the  term 
light-weight refers to the fact that only a subset of the 
faults is tolerated at the node level. The main purpose 
of  light-weight  NLFT  is  to  make  systems  more 
resilient  to  transient  faults.  Transient  faults  are  much 
more common than permanent faults in digital systems 
and,  because  of  technology  scaling,  the  frequency  of 
transient  faults  is  expected  to  increase  in  future 
systems [5]. 
Tolerating transient faults at the node level is clearly 
an advantage in systems that use two fail-silent nodes, 
as  it  allows  the  system  to  survive  transient  faults  also 
when one of the nodes have failed permanently. It also 
improves  the  robustness  of  the  system  when  both 
nodes  are  affected  by  correlated  or  near-coincident 
transient  faults.  Tolerating  transient  faults  at  the  node 
level  may  also  reduce  hardware  costs,  as  fewer 
redundant  (active  or  spare)  nodes  may  be  required  to 
achieve a given level of system dependability. 
The framework presented in this paper describes the 
principles for light-weight NLFT and proposes a set of 
error  handling  mechanisms  suitable  for  a  low-cost 
implementation.  In  addition,  the  advantages  of  light-
weight NLFT are demonstrated by a reliability analysis 
of an example brake-by-wire architecture.  
on 
commercial 
off-the-shelf 
Our  approach  is  based  on  a  real-time  kernel  that 
operates 
(COTS) 
processors.  The  key  element  for  tolerating  transient 
faults  is  a  time  redundancy  approach  called  temporal 
error  masking, or TEM [7]. In TEM, a critical task is 
executed  twice  and  the  two  results  are  compared;  if 
they  do  not  match  or  if  errors  are  detected  by  other 
mechanisms,  an  additional  execution  of  the  task  is 
started  to  allow  a  majority  vote  on  three  results.  To 
cope  with  the  dynamic  nature  of  TEM,  the  real-time 
kernel  uses  fixed-priority  preemptive  scheduling  [6]. 
Technology  trends  in  microprocessor  technology  have 
shown  a  tremendous  increase  in  processing  power  in 
recent  years.  The  resulting  decline  in  the  price  of 
processing  power  has  made  time  redundancy  an 
attractive  approach  for  achieving  fault  tolerance  in 
real-time systems.  
fault 
The  real-time  kernel  and  parts  of  the  mechanisms 
proposed  have  previously  been  implemented  and 
evaluated  using 
includes 
temporal  error 
implementation  and  evaluation  of 
masking  (TEM)  for  the  Thor  microprocessor  [7],  and 
an implementation and evaluation of a real-time kernel 
with extensive internal error detection and the support 
of TEM for the Motorola 68340 microcontroller [8]. 
injection.  This 
The next section describes the design principles for 
light-weight  NLFT  and  Section  3  demonstrates  the 
the  approach  by  calculating  and 
usefulness  of 
comparing  the  reliability  for  two  versions  of  a  brake-
by-wire  systems,  one  with  and  one  without  light-
weight NLFT. The conclusions of this study and future 
work are given in Section 4. 
2. Light-weight NLFT 
In  this  section,  we  first  discuss  the  distributed 
architecture  considered  and  the  redundancy  concepts 
that may most favor the use of NLFT. The light-weight 
NLFT approach is then described. 
2.1 Hardware architectures considered 
For cost-effective implementation, we consider only 
distributed systems that employ single computer nodes 
(simplex  configuration)  or  double  computer  nodes 
(duplex configuration), see Figure 1. A computer node 
in  such  a  system  conceptually  consists  of  a  host 
processor with memory (Host) and a network interface 
(NI).  The  duplex  configuration  execute  in  active 
replication to allow permanent faults to be tolerated. 
Simplex 
Host 
NI 
Duplex 
Host 
NI 
Host 
NI 
Communication Network 
Figure 1. Distributed architecture 
The network and the network interface are treated as 
a  separate  entity  that  we  assume  provides  reliable 
transmission  of  messages.  We  assume 
the 
communication  protocol  is  time-triggered,  or  even 
more  preferable,  offers  a  mix  of  event-  and  time-
triggered  communication  (such  as  provided  by  the 
FlexRay  protocol  [9]).  Time-triggered  scheduling  is 
used for all critical messages, while support for event-
triggered scheduling may be advantageous as it allows 
for fast handling of sporadic activities. 
that 
2.2 Objective and basic approach 
Our  light-weight  NLFT  approach  is  intended  for 
improving the dependability of nodes by tolerating the 
majority of the errors caused  by transient  faults in the 
host.  We  consider  a  host  processor  based  on  a  single 
COTS  microprocessor,  where  a  real-time  kernel 
controls  the  execution  of  tasks.  In  our  approach,  we 
implement  support  for  light-weight  NLFT  in  the  real-
time kernel, thus allowing the programmer to focus on 
the application. 
the 
the  objective  of 
Implementing mechanisms for masking the effect of 
all transient faults may lead to unacceptable overheads. 
Hence, 
light-weight  NLFT 
approach is to mask the majority of the transient faults 
in  critical  tasks.  Permanent  faults  and  transient  faults 
that cannot be tolerated must be handled at the system 
level.  The  following  strategies  are  chosen  for  faults 
affecting  critical  tasks,  non-critical  tasks  or  the  real-
time kernel: 
1.  Critical  tasks  -  The  objective  is  to  tolerate  all 
transient  faults  occurring  in  critical  tasks.  If  there 
is  not  enough  time  to  recover  from  an  error  and 
meet the deadline, an omission failure is enforced, 
which must be handled at the system level 
to  allow  continued  operation  of 
2.  Non-critical  tasks  -  If  an  error  is  detected  during 
execution  of  a  non-critical  task,  the  task  is  shut 
down 
the 
remaining  tasks.  Hence,  any  interaction  between 
critical  tasks  and  non-critical  tasks  must  be 
avoided so that a critical task is not affected by the 
failure of a non-critical task. 
3.  Real-time  kernel 
-  Errors  detected  during 
execution  of  the  real-time  kernel  should  result  in 
the node becoming silent. Thus, recovery must be 
level.  This  may  be 
handled  at 
acceptable  since 
time 
typically represents only about 5% of a processor's 
total execution time [10]. 
the  kernel's  execution 
the  system 
Omission  failures  may  be  allowed  in  a  duplex 
configuration  since  the  partner  node  can  provide  the 
service.  Omission  failures  may  also  be  allowed  in  a 
simplex  configuration  if  the  system  is  able  to  use  a 
previous  value,  a  default  value,  or,  as  is  the  case  for 
some control systems, withstand a certain delay in the 
delivery  of 
losing  
stability [11]. 
signal  without 
the  control 
2.3 Error handling 
The  error  detection  mechanisms  provided  by 
modern  microprocessors  will  detect  many  errors. 
However,  the  effects  of  certain  faults  may  pass 
undetected.  Therefore,  additional  error  handling  must 
be provided at the node-level. 
systematic 
specific  or 
Node-level  fault  tolerance  may  be  realized  using 
techniques,  which  may  be 
software-implemented 
(application 