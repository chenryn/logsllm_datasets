    ├── index.php
    ├── install.sql
    └── robots.txt
代码写的很简单很容易看出逻辑  
全局过滤函数 safe.php waf  
注入点: member.php -> cookie 注入 //其他的点用了addalshes做了单引号过滤,这里就没有
这里的`member.php` 文件 明显是个后门文件代码 跟进代码看看  
`if (!defined('IN_CRONLITE')) exit();` // login.php 包含common.php 这个可以绕过
    $login_data = json_decode($_COOKIE['login_data'], true);
            $admin_user = $login_data['admin_user'];
            $udata = $DB->get_row("SELECT * FROM fish_admin WHERE username='$admin_user' limit 1");
这个代码把cookie的`login_data`参数进行了json_decode 然后拼接进去了sql语句 所以存在注入,但是需要绕过全局过滤函数 waf
(定义在safe.php)
但是经过赛后问了下三叶草师傅 原来还有个弱类型绕过后台漏洞(*我真的是菜鸡,代码审计经常忽略这些点 )
    $admin_pass = sha1($udata['password'] . LOGIN_KEY);
            if ($admin_pass == $login_data['admin_pass']) {
                $islogin = 1;
            } else {
                setcookie("islogin", "", time() - 604800);
                setcookie("login_data", "", time() - 604800);
            }
快速通读下admin文件夹就会知道$is_login是来判断是否有权限来访问后台的全局变量  
这里做了个与cookie的可控数据admin_pass进行==判断 然后赋值为1  
**看到==比较以后一定要注意 字符串和数字弱类型比较的问题(再骂自己一句垃圾)**  
弱类型原理可以参考: [php 弱类型总结](https://www.cnblogs.com/Mrsm1th/p/6745532.html)
> 当一个字符串当作一个数值来取值，其结果和类型如下:如果该字符串没有包含'.','e','E'并且其数值值在整形的范围之内  
>
> 该字符串被当作int来取值，其他所有情况下都被作为float来取值，该字符串的开始部分决定了它的值，如果该字符串以合法的数值开始，则使用该数值，否则其值为0。
字符串和数字比较的时候 规则是字符串转换为数字类型比较  
回到当前题目:  
`sha1($udata['password'] . LOGIN_KEY)`  
`LOGIN_KEY` 在`common.php` => `define('LOGIN_KEY', 'abchdbb768526');`  
`3aa526bed244d14a09ddcc49ba36684866ec7661`  
`var_dump(sha1('abchdbb768526') == 3); => true`
所以这个可以考虑从0到1000进行爆破(LOGIN_KEY 非默认值的时候) 然后进入后台
后台没有flag,回到注入的点上来
**(1) 第一种解法: 正面硬肝**
    function waf($string)
    {
        $blacklist = '/union|ascii|mid|left|greatest|least|substr|sleep|or|benchmark|like|regexp|if|=|-||\#|\s/i';
        return preg_replace_callback($blacklist, function ($match) {
            return '@' . $match[0] . '@';
        }, $string);
    }
考虑布尔盲注:
> 绕过= 从上面总结 可以考虑用 in  
>  绕过substr -> 考虑用rpad  
>  绕过\s -> /**/
所以说很容易就凑出来payload了  
但是这里过滤了`or -> password过滤 information_schema过滤`  
当时我以为考点是 突破字段名过滤绕过呢 但是上面总结可以知道  
只有一种方法 通过联合查询 但是union被过滤了 当时我就觉得这个考点是这个了
可能是黑魔法啥的,心怀期待,不过结果令我有点遗憾，竟然是`json_decode`这个单一考点。
既然没办法通过information_schema获取表名,权限足够的话可以访问mysql表 来获取表名  
我写了个mysql表结构分析 [MySQL.mysql db
分析](https://github.com/mstxq17/ctf_web/blob/master/MySQL.mysql%20db%20%E5%88%86%E6%9E%90.md)  
里面写到了`innodb_table_stats` => `table_name,n_rows` 记录了innodb引擎的表 和列的数目  
这个题目恰好只有一列 所以利用 通配符 可以跑出来  
判断header头的 set-cookie 个数 => 布尔盲注
**(2)json_decode 函数绕过**  
这个可以参考文章:  
[(转)浅谈json参数解析对waf绕过的影响
](http://blog.sina.com.cn/s/blog_1574497330102wruv.html)  
[用sqlmap解题2018HCTF-Kzone](https://wiki.ioin.in/url/oJLj)
这个点其实按照解题的思路  
我也想到过,但是当时去谷歌: `json_decode 漏洞 函数缺陷`  
没有找到 当时如果是 `json_decode 绕waf` 或许就看到这个点了(还是太菜)
\u+4个十六进制数字 => unicode编码
    $c = array('name' => '' );
    $c['name'] = $_POST['name'];
    var_dump($c);
    $a = json_decode($c['name'],true);
    var_dump($a['name']);
    if (1) {
        if ($_COOKIE["login_data"]) {
            var_dump($_COOKIE);
            $login_data = json_decode($_COOKIE['login_data'], true);
            echo $login_data['admin_user'];
        }
       }
    ?>
**寻找下解码原因(待解决)**  
(1) 看下官方文档的函数说明:
> json  
>  待解码的 json string 格式的字符串。  
>  这个函数仅能处理 UTF-8 编码的数据。  
>  Note:  
>  PHP implements a superset of JSON as specified in the original » RFC 7159.
读一下:[RFC 7159](http://www.faqs.org/rfcs/rfc7159.html)  
可以知道json类型可以存在unicode编码 (unicode压缩 ->utf-8)  
那么decode解码就是php的问题了:  
尝试看下源代码文件:  
[php-src](https://github.com/openparallel/php-src/blob/6025d2973786ac5be80bcd7d276274d46fab3add/ext/json/json.c)
    693行//
        php_json_decode_ex(return_value, str, str_len, options, depth TSRMLS_CC);
    601//  php_json_decode_ex
感觉问题应该是出在  
`parse_JSON_ex` 这个解析函数
写的有点长了  
到时候我调试好php环境研究清楚在另写篇文章细分析下  
(大佬别期待我,我只是个菜鸡。。。)
### 0x8.2 安恒11月赛 好黑的黑名单
​
这道题,当时我是写了这个总结的雏形,然后去做的题目,当时可能时间有限,没A出来,但同时让我们明白了个道理,想运用好这些知识去解题,还是需要一定的技巧,去探测规则。
由于缺乏环境,这个主要参考一叶飘零大佬的wp来编写解题思路:
[2018安恒杯11月赛-Web&Crypto题解](https://www.anquanke.com/post/id/166492#h2-4)
首先一开始判断是不是注入,常见几种方法(很多种情况,还有like那种,这个意会)
`1' and '1'='2`
`1" and "1"="2`
`2-1`
这里简单看看过滤规则:
考虑下联合注入发现`union`被过滤了,无果,
那么就是SQL盲注了,回想上文,SQL盲注需要的条件:
`查询结果 + 比较运算符 + 猜测值`
这里假设要读取的是: flag表的flag字段
查询结果对应的语句是:
`(select flag from flag)` 空格很明显被拦,/**/也被拦,看看还有其他的分隔符不,这里用`%0a`
`(select%0aflag%0afrom%0aflag)` 然后就是考虑截取一个一个比较,对比上面发现全被过滤,但是可以考虑下罕见函数,是没有过滤的。
这个时候继续走,在第一步基础上
考虑第二步比较运算符了:
这里一叶飘零师傅用了regexp试了一次,也用了between试了一次,然后又使用了hex编码绕过'a'过滤的单引号
最终构造出SQL盲注语句:
`if(((select%0af1agg%0afrom%0aflaggg)between%0a0x'+tmp1+'%0aand%0a0x'+tmp2+'),1,2)`
这个过程,主要是分析,该如何利用知识点,但是我觉得这个题目难点,还是在黑盒测试上,判断那些字符可用,是ctfer解出题目的关键。
### 0x8.3 安恒11月赛 ezsql(*)
​ 不得不说,这道题目让我震撼到了,因为mysql注入点高权限,真的很少见,这里主要是刺激到了我一个盲点。
因为一般注入点,想读取表信息,没有`select` 是根本不可能的,但是这里文件操作函数,却是可以的。
​ 首先谈下我的解题思路:
​ 通过异或判断出是注入点,之后fuzz,发现过滤`select` 然后放弃(0rz)
​ 然后就是wp的解题思路:
​ `if((hex(load_file(0x2f6574632f706173737764))like(0x25)),1,2)`
​ 不用`select`就文件操作函数可以加载出内容,并且进行运算,0rz
这个点真的让我脑瓜一热,感觉特别开心,学到了新姿势。
## 0x9 End
​ 最后,希望这篇水文能对你有所帮助。
# 0x10 reference linking
[胖哈勃杯第十三届CUIT校赛官方Writeup](https://www.codercto.com/a/3957.html)  
[Mysql注入基础知识汇总](http://vinc.top/2017/04/05/%E3%80%90sql%E6%B3%A8%E5%85%A5%E3%80%91mysql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/)  
[SQL注入绕过过滤字符](http://www.lengbaikai.net/?p=121)  
[报错注入姿势总结](http://vinc.top/2017/03/23/%E3%80%90sql%E6%B3%A8%E5%85%A5%E3%80%91%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF%E6%80%BB%E7%BB%93/)  
[MYSQL报错注入的一点总结](https://xz.aliyun.com/t/253)  
[mysql注入绕过的一些技巧](https://www.cnblogs.com/icez/p/4730869.html)  
[在《WAF攻防之SQL注入篇》中几个有意思的发现](https://xz.aliyun.com/t/2069)  
[ 三个白帽子之我是李雷雷，我在寻找韩梅梅系列 1–writeup](http://wonderkun.cc/index.html/?p=476)  
[SQL注入之报错注入的一些随笔](https://blog.csdn.net/like98k/article/details/79646512)  
[使用exp进行SQL报错注入](http://drops.xmd5.com/static/drops/tips-8166.html)  
[SQL注入防御与绕过的几种姿势](https://www.anquanke.com/post/id/86005)  
[高级SQL注入：混淆和绕过](http://www.cnblogs.com/croot/p/3450262.html)  
[【PHP代码审计】入门之路——第二篇-宽字节注入](https://xz.aliyun.com/t/1719)  
[HCTF2018 Writeup -- Eur3kA](https://xz.aliyun.com/t/3253#toc-7)