First, to explore the possibility of manual identiﬁcation
for refcount ﬁelds, we write a simple LLVM-based analyzer
to collect all ﬁelds that are deﬁned in the 5 refcount data
types from the whole Linux kernel. As shown in Table 2,
the total number of potential refcount ﬁelds is 3,220. Since
77.6% of the ﬁelds in Table 2 (i.e., 2,498 = 2,010+154+334)
belong to atomic_t, atomic_long_t or atomic64_t which
may be used for other purposes, we can not simply ﬂag them
as refcount ﬁelds.
Second, to understand how many of these general types
actually act as refcounts, we perform a further investigation.
Speciﬁcally, we randomly select 300 ﬁelds from Table 2,
covering all the 5 refcount types. Since atomic_t dominates
the distribution among the 5 types in Table 2, we select 100
ﬁelds in this type. For the remaining 4 types, we select 50
ﬁelds in each.
In order to have a clear understanding of the real purposes
for the selected 300 ﬁelds, we manually dig them out. During
the investigation, two authors carefully examined their usage,
with the help of the commit messages, code comments, and
the code that manipulates these ﬁelds. Among all the ﬁelds, 71
of them can be directly labelled with commit messages; 110
of them are labelled with the help of code comments, while
the usage of the remaining ones has to be inferred from code
Table 3: The usage for the selected 300 ﬁelds.
Lock/
Status
atomic_t
atomic_long_t
atomic64_t
refcount_t
kref
Total
16
2
0
0
0
18
Token/
ID
2
1
13
0
0
16
Normal
Counter Refcount
45
42
34
0
0
121
37
5
3
50
50
145
behaviors. Overall, the process cost about 100 man-hours.
During the manual analysis, we mainly observe four us-
ages for these ﬁelds, and the detailed results are presented
in Table 3. From this table, we ﬁnd that normal counter and
refcount contribute for the most cases of usage. Not surpris-
ingly, all cases with refcount_t and kref types are recog-
nized as refcounts, consistent with their speciﬁc purposes in
reference counting. Nevertheless, we observe that the three
general atomic types are used for more than one purposes.
Take atomic_t type as an example, 16 cases act as lock/re-
source status, 2 cases are used as token/ID, 45 cases are used
as normal counters, while actually only 37 cases of them are
used as refcounts.
The above results clearly indicate that it is unacceptable
to simply recognize refcount ﬁelds through their data types.
Meanwhile, it would be impractical to manually identify ref-
count ﬁelds from such a large quantity.
3 Two-Dimensional Consistency Checking
This section uses several real-world refcount bugs (reported
by CID) to illustrate the motivation and the approach of our
two-dimensional consistency checking.
Dimension 1: INC-DEC Consistency Checking. The most
intuitive approach to detecting refcount bugs is to statically
trace all paths to check if a DEC operation is paired to an INC
operation. This does not work well in practice because compli-
cated conditions and data ﬂows are involved along the paths.
We observe that INC operations and DEC operations enforce a
strict mutual relation with conditions. This observation moti-
vates us to examine the consistency between conditional INC
operations and the corresponding conditional DEC operations.
Our insight is that the INC operations, which are often in a
callee function, and the DEC operations, which are often in
a caller function, should follow the same refcounting con-
ventions. Based on how the caller conditionally performs the
DEC operations, we can infer a set of condition-aware refcount
rules for the callee, and violating cases are refcount bugs. Like-
wise, we can also infer the condition-aware refcount rules for
the caller based on the callee. Such a design focuses on the
two ends of refcount operations, and the rules always apply
2474    30th USENIX Security Symposium
USENIX Association
Figure 1: An Example to Illustrate INC-DEC Consistency Checking.
Figure 2: An Example to Illustrate DEC-DEC Consistency Checking.
no matter how complicated the refcounting paths (between
the two refcount operations) are.
To illustrate the rationale behind the checking, we give an
example in Figure 1. Figure 1(a) presents an INC function
batadv_hardif_get_by_netdev(). This function ﬁnds the
hard_iface object that owns the given net_dev object, and
if the object is found it returns the hard_iface object with its
refcount increased (line 9); otherwise, it returns NULL without
changing refcout. Therefore, we infer the rules. Rule 1: if
batadv_hardif_get_by_netdev() succeeds, i.e., returns a
non-error, its caller should decrement the refcount. Rule 2:
if batadv_hardif_get_by_netdev() fails, i.e., returns an
error, its caller should not decrement the refcount;
Figure 1(b) presents a caller function that invokes the INC
function, and the DEC operation for the hard_iface object
uses function batadv_hardif_put(). Now we apply the
aforementioned two inferred rules to check if the caller func-
tion correctly operates the refcount. Speciﬁcally, rule 2 is
honored—when the callee fails, the caller directly returns in
line 7 without decreasing the refcount. However, rule 1 is not
honored. All the code paths from line 8 correspond to the case
in which the callee succeeds. Therefore, the refcount should
be decreased in all these paths based on rule 1. A missing de-
crease refcount bug however occurs because the path ending
in line 12 does not decrease the refcount.
Dimension 2: DEC-DEC Consistency Checking. The
DEC-DEC consistency checking is based on an observation
that INC and DEC functions for the same object are often in-
voked multiple times, following the same usage, and the us-
age is bug-free in most cases. Therefore, we can leverage
statistical analysis on the multiple DEC operations paired with
the sameINC operation, and perform consistency checking to
identify the deviating DEC operations from the majority DEC
operations as potential refcount bugs.
shows
an
to
Figure
2
explain
example
how
DEC-DEC consistency checking works. In this example,
usb_get_urb()/usb_put_urb() are INC/DEC functions for
the refcount of an urb object. There are three caller functions
in Figure 2 which all invoke the INC function to increase
the refcount of an urb object. Among the three callers, both
Figure 2(a) and Figure 2(b) invokes the DEC function before
return, while only Figure 2(c) does not perform DEC operation
when return. Since the majority of callers has consistent DEC
behaviors, we recognize Figure 2(a)/(b) as correct callers,
while reporting Figure 2(c) as a buggy caller.
Relation of the Two Dimensions. Note that the two di-
mensions of consistency checking are applied under dif-
ferent scenarios, thus are complementary. For example,
INC-DEC consistency checking can not apply to Figure 2,
because there is no return value from its INC function
(usb_get_urb()). Similarly, the bug in Figure 1 can
not be detected with DEC-DEC consistency checking, since
there are not enough callers for the same INC function
(batadv_hardif_get_by_netdev()) for statistical analysis.
Therefore, the two dimensions exploit the consistencies be-
tween the INC and the DEC operations, and they further com-
plement each other to detect more bugs than either.
USENIX Association
30th USENIX Security Symposium    2475
1 /* File: net/batman-adv/hard-interface.c */2 struct batadv_hard_iface* batadv_hardif_get_by_netdev(...)3 {4    struct batadv_hard_iface *hard_iface;5    ...6    list_for_each_entry_rcu(hard_iface, ...) {7       if (hard_iface->net_dev == net_dev && ...8           // increase refcount if find the hard_iface9           kref_get_unless_zero(&hard_iface->refcount))10          goto out;11   }12   hard_iface = NULL;13   out:14   ...15   // return the hard_inface if found16   return hard_iface;17 }(a) INC Function1 /* File: net/batman-adv/sysfs.c */2 static ssize_t batadv_store_throughput_override(...){3    ...4    //call INC function5    hard_iface = batadv_hardif_get_by_netdev(net_dev);6    if (!hard_iface)7        return -EINVAL;8    ...9    ret = batadv_parse_throughput(...);10   if (!ret)11       //missing refcount decrease here12       return count;13   ...14   //decrease refcount before return15   batadv_hardif_put(hard_iface);16   return count;17 }(b) Caller with Buggy DEC Operations1 /* /drivers/usb/core/urb.c */2 void usb_kill_anchored_urbs(struct usb_anchor *anchor)3 {4    ...5    while (!list_empty(&anchor->urb_list)) {6        victim = list_entry(anchor->urb_list.prev, ...);7        //increase the refcount8        usb_get_urb(victim);9        ...10       //decrease the refcount11       usb_put_urb(victim);12   }13   ...14 }1 /* /drivers/usb/host/ehci-hub.c */2 static int ehset_single_step_set_feature(...)3 {4    ...5    urb = request_single_step_set_feature_urb(...);6    ...7    //increase the refcount8    usb_get_urb(urb);9    ...10   //decrease the refcount11   usb_put_urb(urb);12   ...13   return retval;14 }1 /* /drivers/net/wimax/i2400m/usb-fw.c */2 ssize_t i2400mu_bus_bm_wait_for_ack(...)3 {4    ...5    usb_init_urb(&notif_urb);6    //increase the refcount7    usb_get_urb(&notif_urb);8    ...9    //miss refcount decrease before return10   return result;11 }(a) Caller with Correct DEC Operations(b) Caller with Correct DEC Operations(c) Caller with Buggy DEC Operations1 /* File: net/batman-adv/hard-interface.c */2 struct batadv_hard_iface* batadv_hardif_get_by_netdev(...)3 {4    struct batadv_hard_iface *hard_iface;5    ...6    list_for_each_entry_rcu(hard_iface, ...) {7       if (hard_iface->net_dev == net_dev && ...8           // increase refcount if find the hard_iface9           kref_get_unless_zero(&hard_iface->refcount))10          goto out;11   }12   hard_iface = NULL;13   out:14   ...15   // return the hard_inface if found16   return hard_iface;17 }(a) INC Function1 /* File: net/batman-adv/sysfs.c */2 static ssize_t batadv_store_throughput_override(...){3    ...4    //call INC function5    hard_iface = batadv_hardif_get_by_netdev(net_dev);6    if (!hard_iface)7        return -EINVAL;8    ...9    ret = batadv_parse_throughput(...);10   if (!ret)11       //missing refcount decrease here12       return count;13   ...14   //decrease refcount before return15   batadv_hardif_put(hard_iface);16   return count;17 }(b) Caller with Buggy DEC Operations1 /* /drivers/usb/core/urb.c */2 void usb_kill_anchored_urbs(struct usb_anchor *anchor)3 {4    ...5    while (!list_empty(&anchor->urb_list)) {6        victim = list_entry(anchor->urb_list.prev, ...);7        //increase the refcount8        usb_get_urb(victim);9        ...10       //decrease the refcount11       usb_put_urb(victim);12   }13   ...14 }1 /* /drivers/usb/host/ehci-hub.c */2 static int ehset_single_step_set_feature(...)3 {4    ...5    urb = request_single_step_set_feature_urb(...);6    ...7    //increase the refcount8    usb_get_urb(urb);9    ...10   //decrease the refcount11   usb_put_urb(urb);12   ...13   return retval;14 }1 /* /drivers/net/wimax/i2400m/usb-fw.c */2 ssize_t i2400mu_bus_bm_wait_for_ack(...)3 {4    ...5    usb_init_urb(&notif_urb);6    //increase the refcount7    usb_get_urb(&notif_urb);8    ...9    //miss refcount decrease before return10   return result;11 }(a) Caller with Correct DEC Operations(b) Caller with Correct DEC Operations(c) Caller with Buggy DEC Operations4 Design
This section presents the workﬂow of CID and describes the
design of its major components.
4.1 Workﬂow Overview
Figure 3 presents the workﬂow of CID. It takes LLVM bitcode
ﬁles as input and automatically reports refcount bugs. There
are mainly three phases in the bug detection.
Phase 1: Behavior-based Refcount Field Identiﬁcation.
CID identiﬁes refcount ﬁelds from all candidate ﬁelds which
are deﬁned in the 5 refcount data types as described in Ta-
ble 2. The identiﬁcation employs the novel behavior-based
inference which is presented in §4.2.
Phase 2: Path-sensitive Refcount Operation Analysis. As
explained in §3, the two-dimensional consistency checking
relies on path condition analysis on both INC operations and
DEC operations. In order to realize the two-dimensional check-
ing, CID performs a precise path-sensitive refcount operation
analysis against both INC functions and their callers. CID also
performs reference escape analysis on the object to exclude
the reference-escaped paths in callers from the analysis scope,
which reduces false positives.
Phase 3: Bug Detection with Two-Dimensional Consis-
tency Checking. Based on the results of refcount opera-
tion analysis, CID detects refcount bugs from two dimen-
sions: INC-DEC consistency checking and DEC-DEC consis-
tency checking.
4.2 Refcount Field Identiﬁcation
There are in total 5 atomic data types (atomic_t,
atomic_long_t, atomic64_t, refcount_t and kref) that
can be used to deﬁne refcount ﬁelds. CID ﬁrst uses static anal-
ysis to collect all the ﬁelds of the kernel data structures that
contain any ﬁelds of these types and marks them as candidate
refcount ﬁelds. As described in Table 2, CID identiﬁes 3,220
candidate ﬁelds. However, as shown in §2.2, many of the can-
didate ﬁelds are not true refcount ﬁelds, thus requiring further
analysis. Manually analyzing them is tedious and impractical.
Unique Behaviors of Refcount Fields. In order to identify
true refcount ﬁelds from the candidate ﬁelds, we aim to ana-
lyze and proﬁle unique behaviors of refcount ﬁelds. Therefore,
we manually analyzed 300 candidate ﬁelds (as introduced
in §2.2) to proﬁle inherent behaviors of them. Fortunately,
we indeed observe three unique behaviors that signiﬁcantly
differ refcount ﬁelds from others. First, refcount ﬁelds are
usually initialized with SET operations and thereafter incre-
mented/decremented with INC/DEC operations, while other-
purpose ﬁelds may not be manipulated by all three kinds
of operations (e.g., lock/status ﬁelds may not be operated by
INC/DEC). Second, refcount ﬁelds are SET to 1 at initialization,
while other-purpose ﬁelds may be set to other values (e.g., to-
ken/ID ﬁelds, normal counter ﬁelds). Third, we ﬁnd refcount
ﬁelds are more-likely incremented/decremented by 1 than
other ﬁelds, while are less-likely incremented/decremented
by other numbers (though sometimes exists). We summarize
these observed behaviors as follows.
• Rule 1 (R1): The operations on the ﬁeld should cover all
• Rule 2 (R2): For each SET operation, it must set the ref-
• Rule 3 (R3): For the INC and DEC operations, it should in-
clude at least one increase and one decrease of the refcount
by 1.
three categories of primitive APIs: SET, INC, and DEC.
count to 1.
Behavior-based Inference for Refcount Fields. Based on
our observation of the unique refcount behaviors, we pro-
pose behavior-based inference to identify the refcount ﬁelds.
Our approach abstracts the behavior of a primitive ref-
count API as , where op_type repre-
sents the type of the operation (including SET, INC and
DEC), and op_value represents the value that the opera-
tion manipulated on this ﬁeld. For example, the function
call refcount_set(obj->candidate_field, 1) is sum-
marized as . Given the 62 manually-collected primi-
tive refcount APIs (as introduced in §2.1) and the 5 atomic
data types in Table 2, CID ﬁrst identiﬁes all the primitive API
calls that manipulate the candidate ﬁelds, and then summa-
rizes the behaviors of these callsites. At last, with the behav-
iors of the candidate ﬁelds, CID employs the three rules to
determine the real refcount ﬁelds.
Following the above way, CID automatically and system-
atically identiﬁes all possible refcount ﬁelds from the large
candidate ﬁeld set. Though the approach is quite intuitive, to
the best of our knowledge, CID is the ﬁrst to identify refcount
ﬁelds in an automated and systematical way. As evaluated in
§6.6, it achieves promising performance in both precision and
recall. This technique is not limited to detecting refcount bugs,
but can also facilitate other works on refcount (e.g., refcount
type conversion [36]).
4.3 Refcount Operation Analysis
Identify INC/DEC Operations (Functions). CID detects re-
fcount bugs by checking the consistencies between the INC
operations and the DEC operations. Therefore, CID needs to
collect all the paired INC and DEC operations. This process
consists of the following steps. (1) CID locates the INC func-
tions which perform INC operations on the identiﬁed refcount
ﬁelds with primitive APIs; (2) For each INC function, CID
collects its callers through call graph analysis; (3) In each
caller, CID recognizes DEC functions that operate on the same
refcount to the corresponding INC function with alias anal-
ysis; (4) We ﬁnd all the paired DEC operations for each INC
operation.
2476    30th USENIX Security Symposium
USENIX Association
Figure 3: The overview of CID. It ﬁrst identiﬁes refcount ﬁelds (see §4.2), then performs refcount behavior analysis (see §4.3),
and ﬁnally detects refcount bugs with two-dimensional consistency checking (see §4.4).
Collect INC/DEC Conditions. To be more precise, our two-
dimensional consistency checking is condition-aware. That
is, we check corresponding refcount operations based on con-
ditions. Therefore, CID needs to collect the conditions for INC
operations and the conditions for DEC operations. However,
it is non-trivial to perform such analysis, since the kernel is
quite complicated, and there are a lot of conditions in kernel
functions while only a small of them affect the refcount oper-
ations. We observe that developers usually correlate the INC
operations and the DEC operations through the return value
of the INC functions. For example, in Figure 1, the condi-
tion is the return value of batadv_hardif_get_by_netdev,
based on which its caller performs the corresponding refcount
decrease. Therefore, CID preforms an intra-procedure path-
sensitive analysis to collect the return value for each path in
the INC function and the pre-condition for each path through
the call to the DEC function in the caller. Since the analysis
is only performed in a single function, CID could afford a
path-sensitive analysis in the kernel. This way, we model the
INC behaviors inside an INC function, and the DEC behaviors
inside its callers.
Model INC Behaviors in an INC Function. After we col-
lect the conditions, we model the INC operations and their
conditions to facilitate the consistency checking. We deﬁne
the tuple  to model the INC behaviors for
a path in the INC function. In this tuple, Action can be INC
or EMPTY, which depicts the refcount of the object is incre-
mented or not. The RetVal represents the return value for this
path, and it is marked as VOID if no return value. CID per-
forms a path-sensitive data ﬂow analysis in the INC function
to collect the Action and RetVal for each path. During the anal-
ysis, infeasible paths are identiﬁed by checking contradictory
path constraints (explained in §5) and eliminated from the
modeling.
Model DEC Behaviors in Each Caller. CID also models the
DEC behaviors in each caller of an INC function. Similarly,
CID uses a tuple  to represent the DEC
behaviors in this caller. The Action have three possible values:
(1) DEC which means a paired DEC operation is performed on
the same object; (2) ESCAPE which means there is no DEC oper-
ation, but the object escapes from the caller; (3) EMPTY which
means neither the DEC operation nor the reference escape hap-
pens in the caller. CID again performs a path-sensitive data
ﬂow analysis in the caller to collect these Actions. The paths
that have reference escapes are excluded from the consistency
checking in §4.4, because the DEC behaviors of the escaped
object is out of the analysis scope. During the analysis, CID
also collects the constraints (i.e., if statements) against the
return value of the INC function as Conditions.
4.4 Consistency Checking
Based on the modeling of INC behaviors in the INC functions
and the DEC behaviors in the corresponding caller functions,
CID checks consistencies to detect refcount bugs in two di-
mensions.
INC-DEC Consistency Checking. The INC-DEC consis-
tency checker examines whether the INC function and the
DEC function respect each other’s refcount operations under
the same conditions. The checker is mutual—from the INC
function, it infers the context-aware refcount rules for the DEC
function, and vice versa. For simplicity, we choose the infer-
ence based on the INC function to illustrate how the checker
works.
Given an INC function and its modeled behaviors, the
checker looks into each path and summarizes: (1) under what
conditions (e.g., returning an error code or success code), it
performs INC; (2) under what conditions, it also performs
DEC; for the paths that have the same refcount behaviors, the
checker uniﬁes their conditions as RetVal1|RetVal2. After
that, the checker infers the condition-aware rules based on
the refcount convention, i.e., the caller should perform the
opposite DEC operation under the consistent conditions. The
condition-aware rules are expressed in the form of , specifying under what conditions, the caller of the