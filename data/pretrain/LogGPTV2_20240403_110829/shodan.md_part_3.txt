ExternalTools 35
stream
The stream command provides access to the real-time stream of data that the Shodan crawlers
collect.
Thecommandsupportsmanydifferentflags,howeverthereare2thatareimportanttomention:
–datadir
The–datadirflagletsyouspecifyadirectoryinwhichthestreameddatashouldbestored.Thefiles
generatedinthe–datadirdirectoryhavethefollowingnamingconvention:
YYYY-MM-DD.json.gz
Asamplefilenamewouldbe“2016-01-15.json.gz”.Eachdayanewfileisautomaticallygeneratedas
long as you keep the stream running. For example, the following command downloads all the data
fromthereal-timestreamandsavesitinadirectorycalled/var/lib/shodan/:
shodan stream --datadir /var/lib/shodan/
–limit
The –limit flag specifies how many results that should be downloaded. By default, the stream
command runs forever until you exit the tool. However, if you’re only interested in collecting a
sampleofdatathenthe–limitflagensuresyougatherasmallamountofrecords.Forexample:
ExternalTools 36
shodan stream --limit 100
The above command would connect to the Shodan real-time stream, print out the first 100 records
thatarereceivedandthenexit.
–ports
The –ports flag accepts a comma-separated list of ports to let you stream only records gathered
from those ports. The following command prints out a stream of banners that were collected from
servicesrunningonport80or8080:
shodan stream --ports 80,8080
Example: Network Analysis
Themostcommonuse-caseforShodanisusingittogetabetterpictureofwhat’srunningonyour
publicnetworkrange.Theshodan command-linetoolcanhelpyougetaquickideaofwhatyou’re
dealing with. For the purpose of this examplewe will takea look at the range of 78.13.0.0/16. Toget
startedletsseehowmanyservicesareexposedtotheInternet:
$ shodan count net:78.13/16
4363
The count command will provide us the total number of banners that Shodan has gathered for the
78.13/16 subnet. At the moment of writing this turns out to be 4,363 results. The count gives us an
idea of how big the public network surface is for the organization but it doesn’t give much insight
intowhethertheexposedservicesareintendedtobethatwayornot.Assuch,thenextstepistoget
abreakdownoftheopenportsonthenetwork:
$ shodan stats --facets port net:78.13/16
Top 10 Results for Facet: port
7547 1,192
80 543
443 264
8080 191
1900 147
53 122
49152 83
81 64
22 61
21 38
The top 10 most commonly seen ports is a good starting point but ideally we want to get a full
distribution.Todosowespecifythemaximumnumberoffacetvaluesthatshouldbereturned:
ExternalTools 37
$ shodan stats --facets port:100000 net:78.13/16
Top 1060 Results for Facet: port
7547 1,192
80 543
443 264
8080 191
1900 147
53 122
49152 83
81 70
22 70
21 59
5060 55
1723 49
554 40
3128 36
5555 33
8443 31
8000 28
8081 25
5000 23
82 21
6881 19
8089 17
500 16
83 16
37777 14
88 13
5353 12
4500 12
5001 10
...
There are a total of 1060 unique ports that were discovered open on the network. We asked for a
large maximum number of facets (10,000) since it’s much larger than the (cid:24)300 ports that Shodan
crawls.Atthispointwehaveafewareasthatcanbefurtherexplored.Firstly,themostcommonport
is7547whichisusedbymodemstoupdatetheirsettingsandhasbeeninthenews5 duetosecurity
issues.Therearealsomanywebserversrunningonnon-standardports(8080,81,82,8443etc.)which
could be worth looking into. For example, these are the web servers that power the services on the
non-standardports:
5http://www.computerworld.com/article/3145003/internet/blame-the-isps-rather-than-the-routers.html
ExternalTools 38
$ shodan stats --facets product "HTTP net:78.13/16 -port:80,443"
Top 10 Results for Facet: product
Apache httpd 39
micro_httpd 22
GoAhead-Webs httpd 21
nginx 18
Netwave IP camera http config 16
Boa HTTPd 13
uc-httpd 5
Allegro RomPager 4
uhttpd 3
mt-daapd DAAP 2
Note: the search query is wrapped in quotes to prevent Bash from thinking that-port
isaflagfortheshodancommand.
Another common interest is understanding the SSL usage across a network. For this, we can take
advantage of Shodan’s SSL testing that is performed automatically on all SSL-capable services
(HTTPS, POP3, IMAP etc.). To get started lets see which SSL/ TLS versions are most common for
webservers:
$ shodan stats --facets ssl.version HTTP net:78.13/16
Top 5 Results for Facet: ssl.version
tlsv1 283
tlsv1.2 190
tlsv1.1 187
sslv3 80
sslv2 34
The good news is that the majority are running on TLS1.0 and above, however there are still a few
devicesthatsupporttheancient,deprecatedSSLv2.
ExternalTools 39
ItappearsthatNetgeardevicesaccountforthebulkofSSLv2-capableservicesonthisnetwork.
Example: Telnet Research
LetsassumewewanttoperformresearchintodevicesontheInternetrunningTelnet.Asastarting
pointwecancombinealloftheaforementionedcommandsintothefollowing:
mkdir telnet-data
shodan stream --ports 23,1023,2323 --datadir telnet-data/ --limit 10000
First,wecreateadirectorycalledtelnet-datatostoretheTelnetdata.Thenwerequest10,000records
(–limit10000)fromthestreamoncommonTelnetports(–ports23,1023,2323)andstoretheresults
inthepreviouslycreateddirectory(–datadirtelnet-data/).
ExternalTools 40
Maltego Add-On
Maltego is an open source intelligence and forensics application; it lets you visually explore and
correlatedatafromavarietyofsources.
TheShodanadd-onforMaltegoprovides2newentities(ServiceandExploit)and5transforms:
• searchShodan
• searchShodanByDomain
• searchShodanByNetblock
• toShodanHost
• searchExploits
Browser Plug-Ins
There are plugins available for both Chrome6 and Firefox7 that let you see what services a website
exposes.
6https://chrome.google.com/webstore/detail/shodan/jjalcfnidlmpjhdfepjhjbhnhkbgleap
7https://addons.mozilla.org/en-us/firefox/addon/shodan-firefox-addon/
ExternalTools 41
Exercises: Command-Line Interface
Exercise1
DownloadtheIPsvulnerabletoHeartbleedinSwedenandNorwayusingtheShodanCLI.
FilterouttheresultsforSwedenandstoretheminaseparatefile.
Note: Uncompress the file and look at the raw data to see the raw response from the
Heartbleedtest.
Exercise2
Download1,000recentbannersusingthereal-timestreamandthenmapthemusingGoogleMaps.
Tip:shodanconvert
Exercise3
WriteascripttodownloadalistofknownmalwareIPsandblockanyoutgoingtraffictothem.
Tip:iptables-AOUTPUT-dx.x.x.x-jDROP
Developer API
Shodan provides a developer API (https://developer.shdan.io/api) for programmatic access to the
information that is collected. All of the websites and tools, including the main Shodan website, are
powered by the API. Everything that can be done via the website can be accomplished from your
owncode.
The API is divided into 2 parts: REST API and Streaming API. The REST API provides methods to
searchShodan,lookuphosts,getsummaryinformationonqueriesandavarietyofutilitymethodsto
makedevelopingeasier.TheStreamingAPIprovidesaraw,real-timefeedofthedatathatShodanis
currentlycollecting.Thereareseveralfeedsthatcanbesubscribedto,butthedatacan’tbesearched
orotherwiseinteractedwith;it’salivefeedofdatameantforlarge-scaleconsumptionofShodan’s
information.
Note:OnlyuserswithanAPIsubscriptionareabletoaccesstheStreamingAPI.
Usage Limits
Thereare3methodsoftheAPIthatgetlimiteddependingonyourAPIplan:
1. Searching To limit the number of searches that can be performed per month Shodan uses
query credits. 1 query credits is used when you perform a search containing filters or go
pastthe1stpage.Forexample,ifyousearchfor“apache”thatdoesn’tuseanyquerycredits.
Ifyousearchfor“apachecountry:US”thatwoulduse1querycredit.Likewise,ifyousearched
forthe2ndpageofresultsfor“apache”thatwoulduse1querycredit.Finally,asearchquery
forthe2ndpageof“apachecountry:US”wouldalsouseup1querycredit.
2. Scanning The on-demand scanning API uses scan credits to limit the number of hosts that
youcanrequestShodantoscaneverymonth.ForeveryhostthatyourequestascanofShodan
deducts1scancredit.
3. Network Alerts The number of IPs that can be monitored using alerts is limited based on
yourAPIsubscription.Onlypaidcustomershaveaccesstothisfeature.Andyoucan’tcreate
morethan100alertsonyouraccount.
Important:Queryandscancreditsareresetatthestartofeverymonth.
DeveloperAPI 43
Introducing Facets
Facetsprovideaggregateinformationaboutaspecificfieldofthebanneryou’reinterestedin.Filters
let you narrow down search results while facets let you get a big picture view of the results. For
example, the main Shodan website uses facets to provide the statistics information on the left side
ofthesearchresults:
A long list of facets are available (see Appendix C) and using the API you are in control of which
facets you care about. For example, searching for port:22 and faceting on the ssh.fingerprint
facetwillgiveyouabreakdownofwhichSSHfingerprintsaremostcommonlyseenontheInternet.
FacetsareoftenthestartingpointforresearchintoInternet-wideissuessuchasduplicateSSHkeys,
negligenthostingprovidersorcountry-widesecurityholes.
Atthemoment,facetsareonlyavailablefromtheAPIandtheShodancommand-lineinterface.
DeveloperAPI 44
Getting Started
All the examples will be provided in Python and assume you have access to the command-line,
thoughthereareShodanlibraries/clientsavailableinotherlanguages8 aswell.
ToinstalltheShodanlibraryforPythonrunthefollowingcommand:
easy_install shodan
Ifyoualreadyhaveitinstalledandwanttoupgradetothelatestversion:
easy_install -U shodan
Initialization
ThefirstthingthatalwayshastobedoneisinitializingtheShodanAPIobject:
import shodan
api = shodan.Shodan('YOUR API KEY')
WhereYOURAPIKEYistheAPIkeyforyouaccountwhichyoucanobtainfrom:
https://account.shodan.io
Search
NowthatwehaveourAPIobjectallgoodtogo,we’rereadytoperformasearch:
# Wrap the request in a try/ except block to catch errors
try:
# Search Shodan
results = api.search('apache')
# Show the results
print 'Results found: %s' % results['total']
for result in results['matches']:
print 'IP: %s' % result['ip_str']
print result['data']
print ''
except shodan.APIError, e:
print 'Error: %s' % e
8https://developer.shodan.io/api/clients
DeveloperAPI 45
Steppingthroughthecode,wefirstcalltheShodan.search()methodontheapiobjectwhichreturns
adictionaryofresultinformation.Wethenprinthowmanyresultswerefoundintotal,andfinally
loopthroughthereturnedmatchesandprinttheirIPandbanner.Eachpageofsearchresultscontains
upto100results.
There’salotmoreinformationthatgetsreturnedbythefunction.Seebelowforashortenedexample
dictionarythatShodan.searchreturns:
{
'total': 8669969,
'matches': [
{
'data': 'HTTP/1.0 200 OK\r\nDate: Mon, 08 Nov 2010 05:09:59 GMT\r\nSer...',
'hostnames': ['pl4t1n.de'],
'ip': 3579573318,
'ip_str': '89.110.147.239',
'os': 'FreeBSD 4.4',
'port': 80,
'timestamp': '2014-01-15T05:49:56.283713'
},
...
]
}
SeeAppendixAforacompletelistofpropertiesthatthebannermaycontain.
Important: By default, a few of the large fields in the banner such as “html” get truncated to
reduce bandwidth usage. If you want to retrieve all the information simply disable minification
using minify=False. For example, the following search query for anonymous VNC services would
ensureallinformationisreturned:
results = api.search('has_screenshot:true', minify=False)
It’s also good practice to wrap all API requests in a try/ except clause, since any error will raise an
exception.Butforsimplicity’ssake,Iwillleavethatpartoutfromnowon.
Theabovescriptonlyoutputstheresultsfromthe1stpageofresults.Togetthe2ndpageofresults
ormoresimplyusethepageparameterwhendoingthesearchrequest:
results = api.search('apache', page=2)
Or if you want to simply loop over all possible results there’s a method to make your life easier
calledsearch_cursor()
DeveloperAPI 46
for banner in api.search_cursor('apache'):
print(banner['ip_str']) # Print out the IP address for each banner
Important:Thesearch_cursor()methodonlyreturnsthebannersanddoesn’tletyou
usefacets.Onlyuseittoloopoverresults.
Host Lookup
ToseewhatShodanhasavailableonaspecificIPwecanusetheShodan.host()function:
# Lookup the host
host = api.host('217.140.75.46')
# Print general info
print """
IP: %s
Organization: %s
Operating System: %s
""" % (host['ip_str'], host.get('org', 'n/a'), host.get('os', 'n/a'))
# Print all banners
for item in host['data']:
print """
Port: %s
Banner: %s
""" % (item['port'], item['data'])
By default, Shodan only returns information on the host that was recently collected. If you would
liketogetafullhistoryofanIPaddress,includethehistoryparameter.Forexample:
host = api.host('217.140.75.46', history=True)
Theabovewouldreturnallbanners,includingforservicesthatmaynolongerbeactiveonthehost.
Scanning
Shodan crawls the Internet at least once a month, but if you want to request Shodan to scan a
networkimmediatelyyoucandosousingtheon-demandscanningcapabilitiesoftheAPI.
DeveloperAPI 47
Unlike scanning via a tool such as Nmap, the scanning with Shodan is done asynchronously. This
means that after you submit a request to Shodan you don’t get back the results immediately. It is
up to the developer to decide how the results of the scan should be gathered: by looking up the IP
information, searching Shodan or subscribing to the real-time stream. The Shodan command-line
interface creates a temporary network alert after a scan was initiated and then waits for results to
comethroughthereal-timestream.
scan = api.scan('198.20.69.0/24')
It’salsopossibletosubmitalistofnetworksatoncebyprovidingalistofaddressesinCIDRnotation:
scan = api.scan(['198.20.49.30', '198.20.74.0/24'])
AftersubmittingascanrequesttheAPIwillreturnthefollowinginformation:
{
'id': 'R2XRT5HH6X67PFAB',
'count': 1,
'credits_left': 5119
}
The object provides a unique id that you can use for tracking purposes, the total count of IPs that
weresubmittedforscanningandfinallyhowmanyscancreditsareleft(credits_left).
Real-Time Stream
The Streaming API is an HTTP-based service that returns a real-time stream of data collected by