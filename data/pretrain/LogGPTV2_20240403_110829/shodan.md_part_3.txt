### External Tools 35
The `stream` command provides access to the real-time stream of data that Shodan's crawlers collect. This command supports many different flags, but two are particularly important to mention:

- **--datadir**
  - The `--datadir` flag allows you to specify a directory where the streamed data should be stored. The files generated in the `--datadir` directory follow the naming convention `YYYY-MM-DD.json.gz`. For example, a sample filename would be `2016-01-15.json.gz`. A new file is automatically generated each day as long as the stream is running.
  - Example: 
    ```sh
    shodan stream --datadir /var/lib/shodan/
    ```
    This command downloads all the data from the real-time stream and saves it in the `/var/lib/shodan/` directory.

- **--limit**
  - The `--limit` flag specifies the number of results to download. By default, the `stream` command runs indefinitely until you exit the tool. If you only need a sample of the data, the `--limit` flag ensures you gather a smaller amount of records.
  - Example:
    ```sh
    shodan stream --limit 100
    ```
    This command connects to the Shodan real-time stream, prints out the first 100 records received, and then exits.

- **--ports**
  - The `--ports` flag accepts a comma-separated list of ports, allowing you to stream only records gathered from those specific ports.
  - Example:
    ```sh
    shodan stream --ports 80,8080
    ```
    This command prints out a stream of banners collected from services running on port 80 or 8080.

### Example: Network Analysis
Shodan is commonly used to get a better picture of what's running on your public network range. The `shodan` command-line tool can help you quickly assess the situation. For this example, we will analyze the IP range `78.13.0.0/16`.

First, let's see how many services are exposed to the Internet:
```sh
$ shodan count net:78.13/16
4363
```
The `count` command provides the total number of banners that Shodan has gathered for the `78.13/16` subnet. At the time of writing, there were 4,363 results. This count gives us an idea of the size of the public network surface, but it doesn't provide much insight into whether the exposed services are intended to be public. Therefore, the next step is to get a breakdown of the open ports on the network:
```sh
$ shodan stats --facets port net:78.13/16
Top 10 Results for Facet: port
7547 1,192
80 543
443 264
8080 191
1900 147
53 122
49152 83
81 64
22 61
21 38
```
The top 10 most commonly seen ports is a good starting point, but ideally, we want to get a full distribution. To do this, we specify the maximum number of facet values to be returned:
```sh
$ shodan stats --facets port:100000 net:78.13/16
Top 1060 Results for Facet: port
7547 1,192
80 543
443 264
8080 191
1900 147
53 122
49152 83
81 70
22 70
21 59
5060 55
1723 49
554 40
3128 36
5555 33
8443 31
8000 28
8081 25
5000 23
82 21
6881 19
8089 17
500 16
83 16
37777 14
88 13
5353 12
4500 12
5001 10
...
```
There are a total of 1060 unique ports discovered to be open on the network. We asked for a large maximum number of facets (100,000) because it is much larger than the approximately 300 ports that Shodan typically crawls. At this point, we have a few areas that can be further explored. For instance, the most common port is 7547, which is used by modems to update their settings and has been in the news due to security issues. There are also many web servers running on non-standard ports (8080, 81, 82, 8443, etc.), which could be worth investigating. For example, these are the web servers that power the services on the non-standard ports:
```sh
$ shodan stats --facets product "HTTP net:78.13/16 -port:80,443"
Top 10 Results for Facet: product
Apache httpd 39
micro_httpd 22
GoAhead-Webs httpd 21
nginx 18
Netwave IP camera http config 16
Boa HTTPd 13
uc-httpd 5
Allegro RomPager 4
uhttpd 3
mt-daapd DAAP 2
```
Note: The search query is wrapped in quotes to prevent Bash from interpreting `-port` as a flag for the `shodan` command.

Another common interest is understanding SSL usage across a network. Shodan performs SSL testing automatically on all SSL-capable services (HTTPS, POP3, IMAP, etc.). To start, let's see which SSL/TLS versions are most common for web servers:
```sh
$ shodan stats --facets ssl.version HTTP net:78.13/16
Top 5 Results for Facet: ssl.version
tlsv1 283
tlsv1.2 190
tlsv1.1 187
sslv3 80
sslv2 34
```
The good news is that the majority are running on TLS 1.0 and above, but there are still a few devices supporting the ancient, deprecated SSLv2. It appears that Netgear devices account for the bulk of SSLv2-capable services on this network.

### Example: Telnet Research
Let's assume we want to perform research on devices on the Internet running Telnet. As a starting point, we can combine the aforementioned commands as follows:
```sh
mkdir telnet-data
shodan stream --ports 23,1023,2323 --datadir telnet-data/ --limit 10000
```
First, we create a directory called `telnet-data` to store the Telnet data. Then, we request 10,000 records (`--limit 10000`) from the stream on common Telnet ports (`--ports 23,1023,2323`) and store the results in the previously created directory (`--datadir telnet-data/`).

### Maltego Add-On
Maltego is an open-source intelligence and forensics application that lets you visually explore and correlate data from various sources. The Shodan add-on for Maltego provides two new entities (Service and Exploit) and five transforms:
- `searchShodan`
- `searchShodanByDomain`
- `searchShodanByNetblock`
- `toShodanHost`
- `searchExploits`

### Browser Plug-Ins
There are plugins available for both Chrome and Firefox that allow you to see what services a website exposes:
- [Chrome Plugin](https://chrome.google.com/webstore/detail/shodan/jjalcfnidlmpjhdfepjhjbhnhkbgleap)
- [Firefox Plugin](https://addons.mozilla.org/en-us/firefox/addon/shodan-firefox-addon/)

### Exercises: Command-Line Interface

**Exercise 1**
Download the IPs vulnerable to Heartbleed in Sweden and Norway using the Shodan CLI. Filter out the results for Sweden and store them in a separate file.
- Note: Uncompress the file and look at the raw data to see the raw response from the Heartbleed test.

**Exercise 2**
Download 1,000 recent banners using the real-time stream and then map them using Google Maps.
- Tip: `shodan convert`

**Exercise 3**
Write a script to download a list of known malware IPs and block any outgoing traffic to them.
- Tip: `iptables -A OUTPUT -d x.x.x.x -j DROP`

### Developer API
Shodan provides a developer API (https://developer.shodan.io/api) for programmatic access to the information collected. All websites and tools, including the main Shodan website, are powered by the API. Everything that can be done via the website can be accomplished from your own code.

The API is divided into two parts: REST API and Streaming API. The REST API provides methods to search Shodan, look up hosts, get summary information on queries, and various utility methods to make development easier. The Streaming API provides a raw, real-time feed of the data that Shodan is currently collecting. There are several feeds that can be subscribed to, but the data cannot be searched or otherwise interacted with; it is a live feed of data meant for large-scale consumption of Shodan's information.
- Note: Only users with an API subscription can access the Streaming API.

### Usage Limits
There are three methods of the API that are limited depending on your API plan:
1. **Searching**: To limit the number of searches per month, Shodan uses query credits. One query credit is used when you perform a search containing filters or go past the first page. For example, searching for "apache" doesn't use any query credits, but searching for "apache country:US" would use one query credit. Similarly, searching for the second page of results for "apache" would use one query credit. Finally, a search query for the second page of "apache country:US" would also use one query credit.
2. **Scanning**: The on-demand scanning API uses scan credits to limit the number of hosts you can request Shodan to scan every month. For every host that you request a scan of, Shodan deducts one scan credit.
3. **Network Alerts**: The number of IPs that can be monitored using alerts is limited based on your API subscription. Only paid customers have access to this feature, and you can't create more than 100 alerts on your account.
- Important: Query and scan credits are reset at the start of every month.

### Introducing Facets
Facets provide aggregate information about a specific field of the banner you're interested in. Filters let you narrow down search results, while facets give you a big-picture view of the results. For example, the main Shodan website uses facets to provide statistics information on the left side of the search results.

A long list of facets is available (see Appendix C), and using the API, you control which facets you care about. For example, searching for `port:22` and faceting on the `ssh.fingerprint` facet will give you a breakdown of which SSH fingerprints are most commonly seen on the Internet. Facets are often the starting point for research into Internet-wide issues such as duplicate SSH keys, negligent hosting providers, or country-wide security holes.

At the moment, facets are only available from the API and the Shodan command-line interface.

### Getting Started
All examples will be provided in Python and assume you have access to the command line, though Shodan libraries/clients are available in other languages as well.

To install the Shodan library for Python, run the following command:
```sh
easy_install shodan
```
If you already have it installed and want to upgrade to the latest version:
```sh
easy_install -U shodan
```

### Initialization
The first thing that always needs to be done is initializing the Shodan API object:
```python
import shodan
api = shodan.Shodan('YOUR_API_KEY')
```
Where `YOUR_API_KEY` is the API key for your account, which you can obtain from:
- https://account.shodan.io

### Search
Now that we have our API object, we're ready to perform a search:
```python
# Wrap the request in a try/except block to catch errors
try:
    # Search Shodan
    results = api.search('apache')
    # Show the results
    print(f'Results found: {results["total"]}')
    for result in results['matches']:
        print(f'IP: {result["ip_str"]}')
        print(result['data'])
        print('')
except shodan.APIError as e:
    print(f'Error: {e}')
```
Stepping through the code, we first call the `Shodan.search()` method on the `api` object, which returns a dictionary of result information. We then print how many results were found in total and loop through the returned matches, printing their IP and banner. Each page of search results contains up to 100 results.

There's a lot more information that gets returned by the function. See below for a shortened example dictionary that `Shodan.search` returns:
```python
{
    'total': 8669969,
    'matches': [
        {
            'data': 'HTTP/1.0 200 OK\r\nDate: Mon, 08 Nov 2010 05:09:59 GMT\r\nSer...',
            'hostnames': ['pl4t1n.de'],
            'ip': 3579573318,
            'ip_str': '89.110.147.239',
            'os': 'FreeBSD 4.4',
            'port': 80,
            'timestamp': '2014-01-15T05:49:56.283713'
        },
        ...
    ]
}
```
See Appendix A for a complete list of properties that the banner may contain.

- Important: By default, a few of the large fields in the banner, such as "html," get truncated to reduce bandwidth usage. If you want to retrieve all the information, simply disable minification using `minify=False`. For example, the following search query for anonymous VNC services would ensure all information is returned:
```python
results = api.search('has_screenshot:true', minify=False)
```
It's also good practice to wrap all API requests in a try/except clause, as any error will raise an exception. But for simplicity's sake, I will leave that part out from now on.

The above script only outputs the results from the first page of results. To get the second page of results or more, simply use the `page` parameter when doing the search request:
```python
results = api.search('apache', page=2)
```
Or if you want to simply loop over all possible results, there's a method to make your life easier called `search_cursor()`:
```python
for banner in api.search_cursor('apache'):
    print(banner['ip_str'])  # Print out the IP address for each banner
```
- Important: The `search_cursor()` method only returns the banners and doesn't let you use facets. Only use it to loop over results.

### Host Lookup
To see what Shodan has available on a specific IP, we can use the `Shodan.host()` function:
```python
# Lookup the host
host = api.host('217.140.75.46')
# Print general info
print(f"""
IP: {host['ip_str']}
Organization: {host.get('org', 'n/a')}
Operating System: {host.get('os', 'n/a')}
""")
# Print all banners
for item in host['data']:
    print(f"""
Port: {item['port']}
Banner: {item['data']}
""")
```
By default, Shodan only returns information on the host that was recently collected. If you would like to get a full history of an IP address, include the `history` parameter. For example:
```python
host = api.host('217.140.75.46', history=True)
```
The above would return all banners, including for services that may no longer be active on the host.

### Scanning
Shodan crawls the Internet at least once a month, but if you want to request Shodan to scan a network immediately, you can do so using the on-demand scanning capabilities of the API.

Unlike scanning via a tool such as Nmap, scanning with Shodan is done asynchronously. This means that after you submit a request to Shodan, you don't get back the results immediately. It is up to the developer to decide how the results of the scan should be gathered: by looking up the IP information, searching Shodan, or subscribing to the real-time stream. The Shodan command-line interface creates a temporary network alert after a scan is initiated and then waits for results to come through the real-time stream.
```python
scan = api.scan('198.20.69.0/24')
```
It's also possible to submit a list of networks at once by providing a list of addresses in CIDR notation:
```python
scan = api.scan(['198.20.49.30', '198.20.74.0/24'])
```
After submitting a scan request, the API will return the following information:
```python
{
    'id': 'R2XRT5HH6X67PFAB',
    'count': 1,
    'credits_left': 5119
}
```
The object provides a unique ID that you can use for tracking purposes, the total count of IPs submitted for scanning, and finally, how many scan credits are left (`credits_left`).

### Real-Time Stream
The Streaming API is an HTTP-based service that returns a real-time stream of data collected by Shodan's crawlers.