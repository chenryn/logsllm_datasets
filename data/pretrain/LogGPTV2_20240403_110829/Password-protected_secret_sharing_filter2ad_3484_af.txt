j for j ≤ i and follows G2 on calls to Server(cid:5)
Server(cid:5)
j for j > i.
2 = Pr[1 ← (A (cid:10)
Note that G0
2)]. For each i ∈ [1, nqS] we show reduction Ri
2,3 which re-
Gi
duces breaking DDH assumption to distinguishing between Gi−1
and Gi
2. Let the DDH challenge be (A, B, C) = (ga, gb, gc). The
reduction follows the Init(cid:5) procedure as in game G3 except that it
sets (h, ˆh, ¯g) ← (B, C r0 , gr1 ) where r0, r1
r← Zq. Also, Ri
computes (aj, bj, ¯aj) for all j ∈ [nqS] as in the protocol, except
for j = i where it sets (ai, bi, ¯ai) ← (A, Arp , Ar1 ). The re-
duction responds to Server(cid:5) queries for sessions j  i as in G2, while on the i-th session it computes
dβ,i ← (bi/ei)x · C p · ( ˆd ˜p/(ˆc ˜p)ˆx)−1/r0. If (A, B, C) is a DDH
tuple, and the oracle inputs are formed correctly, i.e. proof π2i
holds on the correct statement (ai, ei, c ˜p, d ˜p, ˆc ˜p, ˆd ˜p), then dβ,i =
y(rp−r ˜p)ti h(p− ˜p)ti as in Gi−1
, where ti = a, because in that case
C = hti. Otherwise, if (A, B, C) is a random tuple, then dβ,j
is random as in Gi
2. Since the views are correct except for proba-
2,3
2
2
bility SS, we get that |pi
follows.
2
2 − pi−1
3 (s) = p¬F
| ≤ ddh + SS, and the claim
CLAIM 8. For any s, p¬F
4 (s) and Pr[F3,s] = Pr[F4,s].
PROOF. We argue that under condition that event F does not
happen the adversarial views in games G3 and G4 are identical.
This immediately implies that (1) Pr[F3,s] = Pr[F4,s], and (2)
that the conditional probabilities Pr[1 ← (A (cid:10) G3(s))|¬F3,s]
and Pr[1 ← (A (cid:10) G4(s))|¬F4,s] are the same, and hence the
i (s) = Pr[1 ← (A (cid:10) Gi(s))|¬Fi,s] ∗
claim follows, because p¬F
Pr[Fi,s] To argue this, note that the only difference between G3
and G4 is that in G3, xi’s are (n, t)-secret-sharing of a random
value whereas in G4 xi’s are (n, t)-secret-sharing of zero. There-
fore unless adversary knows t + 1 shares of xi’s, the view of the
adversary in G3 is identical to its view in G4. Now, adversary gets
to know t(cid:48)  i. Note that G0
5 =
Pr[1 ← (A (cid:10) Gi
5. For each
i ∈ [1, nqS] we show a DDH reduction Ri
2,3 which on input a tuple
(A, B, C) = (ga, gb, gc) follows the Init(cid:5) procedure as in game
G5 except that it sets (y, h, ˆg, ˆh, barg) ← (B, gr0 , C r3 , Ar1 , gr2 )
where r0, r1, r2, r3
2,3 computes all (aj, bj, ¯aj) as in the
protocol except for j = i where it sets (ai, bi, ¯ai) ← (A, Arp , Ar2 ).
The reduction responds to Server(cid:5) queries for sessions j  i as in G5, while on the i-th session it
computes dβ,i ← C rp · Ap·r0 · ( ˆd ˜p/(ˆc ˜p)ˆx)−r0/r1 · (ˆc ˜p)−1/r3 If
(A, B, C) is a DDH tuple, and proof π2i holds on the correct state-
ment (ai, ei, c ˜p, d ˜p, ˆc ˜p, ˆd ˜p), then dβ,i = gx(rp−r ˜p)ti h(p− ˜p)ti as in
Gi−1
, where ti = a and x = b, because in that case C = gx·ti.
Otherwise dβ,j is random, as in Gi
5. Since the views are correct
except for probability SS, we get both |pi
| ≤ ddh + SS
and | Pr[Fi
| ≤ ddh + SS, and the claim follows.
5]− Pr[ Fi−1
r← Zq. Ri
5 − pi−1
5
5
5
CLAIM 11. Games G6 and G7 are indistinguishable under DDH,
i.e. | Pr[F6,s] − Pr[F7,s]| ≤ qU (ddh + SS).
PROOF. The proof goes via a hybrid reduction from DDH over
the User(cid:5) oracle sessions, for i = 1, .., qU , and it is very similar to
the reduction in the proof of Claim 5. The reduction picks (ˆg, ¯g) ←
(gr0 , gr1 ) for random r0, r1 and ˆy = (ˆg)ˆx for random ˆx, and em-
beds the DDH challenge (A, B, C) by setting y ← B, and then in
the i-th User(cid:5) session it assigns c ˜p ← A, d ˜p ← C · hp, ˆc ˜p ← Ar0,
ˆd ˜p ← (ˆc ˜p)ˆx(ˆh)p, and sets each ej as ej ← (¯aj)1/r0.
442Init(p) (on public parameters κ, n, t)
(pk, sk) ← EKg, {(sski, vki) ← SKg}n
( ˜st0, ˜st0, ..., ˜stn) ← PPSS.Init(p, sk)
st0 ← ( ˜st0, pk,{vki}n
Client(st0, ˜p, uId) (cid:10) (Server(st0, st1),··· , Server(st0, stn))
C1 (Client) Pick sId r← {0, 1}κ;
i=0), {sti ← ( ˜sti, sski)}n
i=1,
i=1
Send (uId, sId) to each Server;
Run PPSS.User( ˜st0, ˜p) with the Servers.
S1 (Serverj) Run PPSS.Serverj( ˜st0, ˜stj) with the Client;
On abort, assign kj ←⊥ on session sId and stop.
Otherwise pick kj
Compute σj ← Sign(sskIdj , (uId, sId, kj))
Compute ej ← Enc(pk, (kj, σj));
Send ej to Client.
r← {0, 1}κ;
C2 (Client) Let ˆsk be the output of the PPSS instance.
If ˆsk =⊥ then set kj ←⊥ for all j and stop.
Let (ˆkj, ˆσj) ← Dec( ˆsk, ej) for all Serverj;
For each j, if Vrfy(vkIdj , ˆσj, (uId, sId, ˆkj)) = 1
then set kj ← ˆkj on session sId with Serverj;
o/w set kj ← ⊥ on this session.
Figure 5: TPAKE from PPSS
CLAIM 12. Games G7 and G8 are indistinguishable under DDH,
e.g. | Pr[F7,s] − Pr[F8,s]| ≤ ddh.
PROOF. The proof goes via an easy reduction from DDH which
embeds the DDH challenge (A, B, C) by setting (y, cp, dp) ←
(A, B, C · hp). Note that neither game G7 nor G8 needs to know
values x and rp corresponding to (y, cp, dp).
4. EFFICIENT T-PAKE FROM PPSS
A password protected secret sharing (PPSS) scheme can be used
as a black box to achieve a threshold password authenticated key
exchange (T-PAKE) protocol (in the public key model) at very little
additional cost. In particular, the round complexity of the resulting
T-PAKE is the same as the PPSS because all the T-PAKE messages
can be piggybacked onto the PPSS protocol ﬂows. Figure 5 shows
a secure T-PAKE protocol assuming that E = (EKg, Enc, Dec)
is a chosen ciphertext attack secure public key encryption, S =
(SKg, Sign, Vrfy) is a signature scheme which is existentially un-
forgeable under chosen message attack, and PPSS is a strongly se-
cure password protected secret sharing protocol. For lack of space
we omit the formal proof that this construction satisﬁes T-PAKE se-
curity, but, very brieﬂy, the signatures and CCA encryption scheme
ensure that the network adversary cannot re-route messages from
a session in which honest players are involved, or modify them in
any way, and hence in particular all User sessions are independent
of each other. Then by the security of the PPSS scheme, except for
(cid:98)qS/(t − t(cid:48) + 1)(cid:99) · (1/|D|) probability, the view of the PPSS pro-
tocol initialized with the real decryption key sk is indistinguishable
from a view where sk is replaced by an independent key, in which
case CCA security of encryption ensures that A gets no informa-
tion about any unrevealed session keys even given a capability to
reveal any other session keys (handled by decryption queries in a
reduction to CCA encryption security).
5. REFERENCES
[1] M. Abdalla, M. Bellare, and P. Rogaway. The oracle difﬁe-hellman
assumptions and an analysis of DHIES. In D. Naccache, editor,
CT-RSA, volume 2020 of Lecture Notes in Computer Science, pages
143–158. Springer, 2001.
[2] M. Bellare, J. A. Garay, and T. Rabin. Fast batch veriﬁcation for
modular exponentiation and digital signatures. In EUROCRYPT,
pages 236–255, 1998.
[3] J. Brainard, A. Juels, B. Kaliski, and M. Szydlo. Nightingale: A new
two-server approach for authentication with short secrets. In 12th
USENIX Security Symp, pages 201–213. IEEE Comp. Soc. 2003.
[4] J. Camenisch and M. Michels. Proving in Zero-Knowledge that a
Number Is the Product of Two Safe Primes. In EUROCRYPT’99,
volume 1592 of LNCS, pages 107–122, 1999.
[5] R. Canetti, R. Gennaro, S. Jarecki, H. Krawczyk, and T. Rabin.
Adaptive security for threshold cryptosystems. In CRYPTO’99,
volume 1666 of LNCS, pages 98–115, 1999.
[6] Y. Desmedt and Y. Frankel. Threshold Cryptosystems. In CRYPTO
’89, volume 435 of LNCS, pages 307–315, 1990.
[7] M. Di Raimondo and R. Gennaro. Provably secure threshold
password-authenticated key exchange. J. Comput. Syst. Sci.,
72(6):978–1001, 2006.
[8] Y. Dodis, M. K. Franklin, J. Katz, A. Miyaji, and M. Yung.
Intrusion-resilient public-key encryption. In CT-RSA, pages 19–32,
2003.
[9] Y. Dodis, J. Katz, S. Xu, and M. Yung. Key-insulated public key
cryptosystems. In L. R. Knudsen, editor, EUROCRYPT, volume 2332
of Lecture Notes in Computer Science, pages 65–82. Springer, 2002.
[10] M. Fischlin. Communication-efﬁcient non-interactive proofs of
knowledge with online extractors. In Crypto’05, 2005.
[11] W. Ford and B. S. K. Jr. Server-assisted generation of a strong secret
from a password. In WETICE, pages 176–180, 2000.
[12] J. A. Garay, P. D. MacKenzie, and K. Yang. Strengthening
zero-knowledge protocols using signatures. In E. Biham, editor,
EUROCRYPT, volume 2656 of Lecture Notes in Computer Science,
pages 177–194. Springer, 2003.
[13] S. Goldwasser, S. Micali, and R. L. Rivest. A “paradoxical” solution
to the signature problem. In IEEE Annual Symposium of Foundations
of Computer Science (FOCS’84), pages 441–448, 1984.
[14] D. Jablon. Password authentication using multiple servers. In
CT-RSA’01: RSA Cryptographers’ Track, pages 344–360.
Springer-Verlag, 2001.
[15] J. Katz, P. Mackenzie, G. Taban, and V. Gligor. Two-server
password-only authenticated key exchange. In Proc. Applied
Cryptography and Network Security ACNS ˛AÂŠ05, 2005.
[16] J. Katz, R. Ostrovsky, and M. Yung. Efﬁcient password-authenticated
key exchange using human-memorable passwords. In Advances in
Cryptology - EUROCRYPT 2001, International Conference on the
Theory and Application of Cryptographic Techniques, 2001.
[17] LastPass. Lastpass password manager, 2009. Available at
https://lastpass.com.
[18] P. D. MacKenzie and M. K. Reiter. Networked cryptographic devices
resilient to capture. Int. J. Inf. Sec., 2(1):1–20, 2003.
[19] P. D. MacKenzie, T. Shrimpton, and M. Jakobsson. Threshold
password-authenticated key exchange. J. Cryptology, 19(1):27–66,
2006.
[20] Mozilla Labs. Weave sync, 2009. Available at
http://labs.mozilla.com/projects/weave.
[21] M. Naor and M. Yung. Public-key cryptosystems provably secure
against chosen ciph. attacks. In STOC, pages 427–437. ACM, 1990.
[22] A. Sahai. Non-malleable non-interactive zero knowledge and
adaptive chosen-ciphertext security. In FOCS, pages 543–553, 1999.
[23] A. Shamir. How to Share a Secret. Commun. ACM, 22(11):612–613,
Nov. 1979.
[24] V. Shoup. Practical Threshold Signatures. In EUROCRYPT’00,
volume 1807 of LNCS, pages 207–220, 2000.
[25] V. Shoup and R. Gennaro. Securing threshold cryptosystems against
chosen ciphertext attack. J. Cryptology, 15(2):75–96, 2002.
[26] S. Xu and R. S. Sandhu. Two efﬁcient and provably secure schemes
for server-assisted threshold signatures. In CT-RSA, 2003.
443