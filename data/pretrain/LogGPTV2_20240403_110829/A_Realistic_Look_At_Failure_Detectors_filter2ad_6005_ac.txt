### Algorithm Tv,*p

The algorithm, denoted as Tv,*p, is composed of the following steps:

1. **Message Attachment:**
   - Whenever a process \( P_i \) sends a message \( m \), it attaches the information \([P_i \text{ is alive}]\) to \( m \).

2. **Message Reception and Information Propagation:**
   - When a process \( P_i \) receives a message \( m \) from another process \( P_j \), \( P_i \) extracts any information \([P_k \text{ is alive}]\) from \( m \).
   - \( P_i \) then attaches this information to every event executed as a consequence of receiving \( m \).

3. **Decision Event Execution:**
   - When a process \( P_i \) executes a decision event \( e \) (i.e., \( P_i \) decides on some value), it adds to its output set \( \text{output}(P_i) \) all processes \( P_j \) for which \([P_j \text{ is alive}]\) is not attached to \( e \).

### Properties of the Algorithm

- **R1:**
  - R1 is similar to R0, but with a delay in the reception of all messages by \( P_j \) until time \( t \).
  - No process \( P_k \) (where \( k \neq i, j \)) takes any step after its last step in the causal past of \( e \) until time \( t \).
  - Since \( P_j \) does not participate in the decision event \( e \) in R0, \( P_i \) executes event \( e \) in R1 and also decides on the same value at some time \( t \) (as in R0).

- **R2:**
  - In R2, the failure pattern is the same as in R1 until time \( t \), and all processes crash at time \( t \), except \( P_j \), which remains correct.
  - By the termination property of consensus, \( P_j \) decides on a value at some time \( t' \). By the validity property of consensus, \( P_j \) actually decides on the value 1 at \( t' \).

### Lemma 4.2: Emulation of a Perfect Failure Detector

**Statement:**
The algorithm Tv,*p emulates the behavior of a perfect failure detector, ensuring strong completeness and strong accuracy.

**Proof:**
- **Strong Completeness:**
  - Consider a process \( P_i \) that crashes and a correct process \( P_j \).
  - There is a time after which \( P_i \) does not send any messages.
  - By the termination property of consensus, \( P_j \) eventually decides in that execution, executing some decision event \( e \).
  - Given that the information \([P_i \text{ is alive}]\) is not attached to \( e \), \( P_j \) adds \( P_i \) to its output set \( \text{output}(P_j) \) and never removes it, i.e., \( P_j \) permanently suspects \( P_i \).

- **Strong Accuracy:**
  - Assume \( P_j \) suspects \( P_i \), i.e., \( P_j \) adds \( P_i \) to \( \text{output}(P_j) \).
  - This can only happen if \( P_j \) executes a decision event \( e \) in some execution of the algorithm, and the information \([P_i \text{ is alive}]\) is not attached to \( e \).
  - Given that the algorithm is total, this can only happen if \( P_i \) has crashed. Therefore, strong accuracy is ensured.

### Proposition 4.3: Weakest Failure Detector for Consensus

**Statement:**
In an environment where the number of processes that can crash is not bounded, among realistic failure detectors, the weakest class for consensus is P.

**Proof:**
- **Sufficient Condition:**
  - Chandra and Toueg presented an S-based algorithm that solves consensus using any failure detector in both R and P, even if the number of faulty processes is not bounded.
- **Necessary Condition:**
  - By Lemmas 4.1 and 4.2, any failure detector in R that solves consensus can be transformed into a failure detector in P.

### The Weakest Failure Detector for Terminating Reliable Broadcast

**Statement:**
In an environment where the number of processes that can crash is not bounded, among realistic failure detectors, the weakest class for terminating reliable broadcast is P.

**Proof:**
- **Sufficient Condition:**
  - It is easy to see that any perfect failure detector can solve the terminating reliable broadcast problem.
- **Necessary Condition:**
  - When executing a terminating reliable broadcast algorithm using V, it is possible to emulate the output of V as a failure detector of class P in a distributed system.
  - If a process \( P_j \) delivers nil for an instance \((i, *)\) of the problem, \( P_i \) adds \( P_j \) to \( \text{output}(P_i) \).
  - Any process that crashes will eventually be permanently added to \( \text{output}(P_i) \), ensuring strong completeness.

### Concluding Remarks

- **Impact of Realism:**
  - Our lower bound results do not hold if we consider failure detectors that can guess the future.
  - The class M of Mambout, introduced in [9], provides an example where a straightforward algorithm A can solve consensus without restricting the number of faulty processes.
  - Uniform consensus is strictly harder than consensus because a process must satisfy strong completeness.

- **Strength vs. Perfection:**
  - The classes S and P are weaker than the class of perfect failure detectors.
  - It was shown in [11] that the class S of Strong failure detectors solves (uniform) consensus even if the number of faulty processes is not restricted.
  - The observation that S is strictly weaker than P in the original model has been made by Halpern and Ricciardi in [12].

### References

1. T. Chandra and S. Toueg. Unreliable Failure Detectors for Reliable Distributed Systems. Journal of the ACM, 43(2), March 1996.
2. T. Chandra, V. Hadzilacos, and S. Toueg. The Weakest Failure Detector for Solving Consensus. Journal of the ACM, 43(4), July 1996.
3. C. Dwork, N. Lynch, and L. Stockmeyer. Consensus in the Presence of Partial Synchrony. Journal of the ACM, 35(2), 1988.
4. C. Fetzer and F. Cristiano. Fail-aware failure detectors. Proceedings of the 15th IEEE Symposium on Reliable Distributed Systems, Niagara-on-the-Lake, Canada, Oct 1996.
5. M. Fischer, N. Lynch, and M. Paterson. Impossibility of Consensus with One Faulty Process. Journal of the ACM, 32(2), 1985.
6. F. Greve, M. Hurfin, M. Raynal, and F. Tronel. Primary Component Asynchronous Group Membership as an Instance of a Generic Agreement Framework. Proceedings of the IEEE International Symposium on Autonomous Decentralized Systems (ISADS), 2001.
7. E. Fromentin, M. Raynal, and F. Tronel. About Classes of Problems in Asynchronous Distributed Systems with Process Crashes. Proceedings of the IEEE International Conference on Distributed Computing Systems (ICDCS), 1999.
8. R. Guerraoui. Revisiting the Relationship between Atomic Commitment and Consensus. Proceedings of the Workshop on Distributed Algorithms, Springer Verlag (LNCS 972), 1995.
9. R. Guerraoui. On the Hardness of Failure Sensitive Agreement Problems. Information Processing Letters, 79, 2001.
10. V. Hadzilacos. On the Relationship between the Atomic Commitment and Consensus Problems. Proceedings of the Workshop on Fault-Tolerant Distributed Computing, Springer Verlag (LNCS 448), 1986.
11. V. Hadzilacos and S. Toueg. Fault-Tolerant Broadcasts and Related Problems. Cornell University, 1994. Also in Distributed Systems, S. Mullender (ed), Addison-Wesley, 1993.
12. J. Halpern and A. Ricciardi. A Knowledge-Theoretic Analysis of Uniform Distributed Coordination and Failure Detectors. Proceedings of the ACM Symposium on Principles of Distributed Computing, 1999.
13. L. Lamport, M. Pease, and R. Shostak. The Byzantine Generals Problem. ACM Transactions on Programming Languages and Systems, 4(3), July 1982.
14. D. Powell (editor). Special Issue on Group Communications. Communications of the ACM, 39(4), 1996.
15. G. Tel. Topics in Distributed Algorithms. Cambridge International Series, 1991.
16. P. Verissimo, A. Casimiro, and C. Fetzer. The Timely Computing Base: Timely Actions in the Presence of Uncertain Timeliness. Proceedings of the IEEE International Symposium on Dependable Systems and Networks (DSN), 2000.