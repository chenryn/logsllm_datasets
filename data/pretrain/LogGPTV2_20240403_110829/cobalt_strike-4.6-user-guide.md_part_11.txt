beacon.hcontainsdefinitionsforseveralinternalBeaconAPIs.Thefunctiongoissimilartomain
inanyotherCprogram.It'sthefunctionthat'scalledbyinline-executeandargumentsare
passedtoit.BeaconOutputisaninternalBeaconAPItosendoutputtotheoperator.Notmuch
toit.
Dynamic Function Resolution
GetProcAddress,LoadLibraryA,GetModuleHandle,andFreeLibraryareavailablewithinBOF
files.YouhavetheoptiontousethesetoresolveWin32APIsyouwishtocall.Anotheroptionis
touseDynamicFunctionResolution(DFR).
DynamicFunctionResolutionisaconventiontodeclareandcallWin32APIsas
LIBRARY$Function.ThisconventionprovidesBeacontheinformationitneedstoexplicitly
resolvethespecificfunctionandmakeitavailabletoyourBOFfilebeforeitruns.Whenthis
processfails,CobaltStrikewillrefusetoexecutetheBOFandtellyouwhichfunctionitcouldn't
resolve.
Here'sanexampleBOFthatusesDFRandlooksupthecurrentdomain:
#include 
#include 
#include 
#include "beacon.h"
DECLSPEC_IMPORT DWORD WINAPI NETAPI32$DsGetDcNameA(LPVOID, LPVOID,
LPVOID, LPVOID, ULONG, LPVOID);
DECLSPEC_IMPORT DWORD WINAPI NETAPI32$NetApiBufferFree(LPVOID);
void go(char * args, int alen) {
DWORD dwRet;
PDOMAIN_CONTROLLER_INFO pdcInfo;
dwRet = NETAPI32$DsGetDcNameA(NULL, NULL, NULL, NULL, 0, &pdcInfo);
if (ERROR_SUCCESS == dwRet) {
BeaconPrintf(CALLBACK_OUTPUT, "%s", pdcInfo->DomainName);
}
NETAPI32$NetApiBufferFree(pdcInfo);
}
UserGuide www.helpsystems.com page:126
BeaconObjectFiles/AggressorScriptandBOFs
TheabovecodemakesDFRcallstoDsGetDcNameAandNetApiBufferFreefromNETAPI32.
WhenyoudeclarefunctionprototypesforDynamicFunctionResolution,paycloseattentionto
thedecoratorsattachedtothefunctiondeclaration.Keywords,suchasWINAPIandDECLSPEC_
IMPORTareimportant.Thesedecorationsprovidethecompilerwiththeneededhintstopass
argumentsandgeneratetherightcallinstruction.
Aggressor Script and BOFs
You'lllikelywanttouseAggressorScripttorunyourfinalizedBOFimplementationswithin
CobaltStrike.ABOFisagoodplacetoimplementalateralmovementtechnique,anescalation
ofprivilegetool,oranewreconaissancecapability.
The&beacon_inline_executefunctionisAggressorScript'sentrypointtorunaBOFfile.Hereis
ascripttorunasimpleHelloWorldprogram:
alias hello {
local('$barch $handle $data $args');
# figure out the arch of this session
$barch = barch($1);
# read in the right BOF file
$handle = openf(script_resource("hello. $+ $barch $+ .o"));
$data = readb($handle, -1);
closef($handle);
# pack our arguments
$args = bof_pack($1, "zi", "Hello World", 1234);
# announce what we're doing
btask($1, "Running Hello BOF");
# execute it.
beacon_inline_execute($1, $data, "demo", $args);
}
Thescriptfirstdeterminesthearchitectureofthesession.Anx86BOFwillonlyruninanx86
Beaconsession.Conversely,anx64BOFwillonlyruninanx64Beaconsession.Thisscriptthen
readstargetBOFintoanAggressorScriptvariable.Thenextstepistopackourarguments.The
&bof_packfunctionpacksargumentsinawaythatiscompatiblewithBeacon'sinternaldata
parserAPI.Thisscriptusesthecustomary&btasktologtheactiontheuseraskedBeaconto
perform.And,&beacon_inline_executerunstheBOFwithitsarguments.
The&beacon_inline_executefunctionacceptstheBeaconIDasthefirstargument,astring
containingtheBOFcontentasasecondargument,theentrypointasitsthirdargument,andthe
packedargumentsasitsfourthargument.Theoptiontochooseanentrypointexistsincaseyou
choosetocombinelike-functionalityintoasingleBOF.
HereistheCprogramthatcorrespondstotheabovescript:
UserGuide www.helpsystems.com page:127
BeaconObjectFiles/BOFCAPI
/*
* Compile with:
* x86_64-w64-mingw32-gcc -c hello.c -o hello.x64.o
* i686-w64-mingw32-gcc -c hello.c -o hello.x86.o
*/
#include 
#include 
#include 
#include "beacon.h"
void demo(char * args, int length) {
datap parser;
char * str_arg;
int num_arg;
BeaconDataParse(&parser, args, length);
str_arg = BeaconDataExtract(&parser, NULL);
num_arg = BeaconDataInt(&parser);
BeaconPrintf(CALLBACK_OUTPUT, "Message is %s with %d arg", str_arg,
num_arg);
}
Thedemofunctionisourentrypoint.Wedeclarethedatapstructureonthestack.Thisisan
emptyandunintializedstructurewithstateinformationforextractingargumentspreparedwith
&bof_pack.BeaconDataParseinitializesourparser.BeaconDataExtractextractsalength-
prefixedbinaryblobfromourarguments.Ourpackfunctionhasoptionstopackbinaryblobsas
zero-terminatedstringsencodedtothesession'sdefaultcharacterset,azero-terminatedwide-
characterstring,orabinaryblobwithouttransformation.TheBeaconDataIntextractsaninteger
thatwaspackedintoourarguments.BeaconPrintfisonewaytoformatoutputandmakeit
availabletotheoperator.
BOF C API
Data Parser API
TheDataParserAPIextractsargumentspackedwithAggressorScript's&bof_packfunction.
char*BeaconDataExtract(datap*parser,int*size)
Extractalength-prefixedbinaryblob.ThesizeargumentmaybeNULL.Ifanaddressis
provided,sizeispopulatedwiththenumber-of-bytesextracted.
intBeaconDataInt(datap*parser)
Extracta4binteger
UserGuide www.helpsystems.com page:128
BeaconObjectFiles/BOFCAPI
intBeaconDataLength(datap*parser)
Gettheamountofdatalefttoparse
voidBeaconDataParse(datap*parser,char*buffer,intsize)
Prepareadataparsertoextractargumentsfromthespecifiedbuffer
shortBeaconDataShort(datap*parser)
Extracta2binteger
Output API
TheOutputAPIreturnsoutputtoCobaltStrike.
voidBeaconPrintf(inttype,char*fmt,...)
FormatandpresentoutputtotheBeaconoperator
voidBeaconOutput(inttype,char*data,intlen)
SendoutputtotheBeaconoperator
Eachofthesefunctionsacceptsatypeargument.ThistypedetermineshowCobaltStrikewill
processtheoutputandwhatitwillpresenttheoutputas.Thetypesare:
CALLBACK_OUTPUTisgenericoutput.CobaltStrikewillconvertthisoutputtoUTF-16
(internally)usingthetarget'sdefaultcharacterset.
CALLBACK_OUTPUT_OEMisgenericoutput.CobaltStrikewillconvertthisoutputtoUTF-16
(internally)usingthetarget'sOEMcharacterset.Youprobablywon'tneedthis,unlessyou're
dealingwithoutputfromcmd.exe.
CALLBACK_ERRORisagenericerrormessage.
CALLBACK_OUTPUT_UTF8isgenericoutput.CobaltStrikewillconvertthisoutputtoUTF-16
(internally)fromUTF-8.
Format API
TheformatAPIisusedtobuildlargeorrepeatingoutput.
voidBeaconFormatAlloc(formatp*obj,intmaxsz)
Allocatememorytoformatcomplexorlargeoutput
UserGuide www.helpsystems.com page:129
BeaconObjectFiles/BOFCAPI
voidBeaconFormatAppend(formatp*obj,char*data,intlen)
Appenddatatothisformatobject
voidBeaconFormatFree(formatp*obj)
Freetheformatobject
voidBeaconFormatInt(formatp*obj,intval)
Appenda4binteger(bigendian)tothisobject
voidBeaconFormatPrintf(formatp*obj,char*fmt,...)
Appendaformattedstringtothisobject
voidBeaconFormatReset(formatp*obj)
Resetstheformatobjecttoitsdefaultstate(priortore-use)
char*BeaconFormatToString(formatp*obj,int*size)
Extractformatteddataintoasinglestring.Populatethepassedinsizevariablewiththe
lengthofthisstring.TheseparametersaresuitableforusewiththeBeaconOutputfunction.
Internal APIs
ThefollowingfunctionsmanipulatethetokenusedinthecurrentBeaconcontext:
BOOLBeaconUseToken(HANDLEtoken)
ApplythespecifiedtokenasBeacon'scurrentthreadtoken.Thiswillreportthenewtoken
totheusertoo.ReturnsTRUEifsuccessful.FALSEisnot.
voidBeaconRevertToken()
Dropthecurrentthreadtoken.UsethisoverdirectcallstoRevertToSelf.Thisfunction
cleansupotherstateinformationaboutthetoken.
BOOLBeaconIsAdmIn()
ReturnsTRUEifBeaconisinahigh-integritycontext
ThefollowingfunctionsprovidesomeaccesstoBeacon'sprocessinjectioncapability:
UserGuide www.helpsystems.com page:130
AggressorScript/WhatisAggressorScript?
voidBeaconGetSpawnTo(BOOLx86,char*buffer,intlength)
Populatethespecifiedbufferwiththex86orx64spawntovalueconfiguredforthis
Beaconsession.
BOOLBeaconSpawnTemporaryProcess(BOOLx86,BOOLignoreToken,STARTUPINFO*
sInfo,PROCESS_INFORMATION*pInfo)
Thisfunctionspawnsatemporaryprocessaccountingforppid,spawnto,andblockdlls
options.GrabthehandlefromPROCESS_INFORMATIONtoinjectintoormanipulatethis
process.ReturnsTRUEifsuccessful.
voidBeaconInjectProcess(HANDLEhProc,intpid,char*payload,intpayload_len,int
payload_offset,char*arg,intarg_len)
Thisfunctionwillinjectthespecifiedpayloadintoanexistingprocess.Usepayload_offset
tospecifytheoffsetwithinthepayloadtobeginexecution.Theargvalueisforarguments.
argmaybeNULL.
voidBeaconInjectTemporaryProcess(PROCESS_INFORMATION*pInfo,char*payload,int
payload_len,intpayload_offset,char*arg,intarg_len)
ThisfunctionwillinjectthespecifiedpayloadintoatemporaryprocessthatyourBOF
optedtolaunch.Usepayload_offsettospecifytheoffsetwithinthepayloadtobegin
execution.Theargvalueisforarguments.argmaybeNULL.
voidBeaconCleanupProcess(PROCESS_INFORMATION*pInfo)
Thisfunctioncleansupsomehandlesthatareoftenforgottenabout.Callthiswhenyou're
doneinteractingwiththehandlesforaprocess.Youdon'tneedtowaitfortheprocessto
exitorfinish.
Thefollowingfunctionisautilityfunction:
BOOLtoWideChar(char*src,wchar_t*dst,intmax)
ConvertthesrcstringtoaUTF16-LEwide-characterstring,usingthetarget'sdefault
encoding.maxisthesize(inbytes!)ofthedestinationbuffer.
Aggressor Script
What is Aggressor Script?
AggressorScriptisthescriptinglanguagebuiltintoCobaltStrike,version3.0,andlater.
AggressorScriptallowsyoutomodifyandextendtheCobaltStrikeclient.
UserGuide www.helpsystems.com page:131
AggressorScript/HowtoLoadScripts
History
AggressorScriptisthespiritualsuccessortoCortana,theopensourcescriptingenginein
Armitage.CortanawasmadepossiblebyacontractthroughDARPA'sCyberFastTrack
program.CortanaallowsitsuserstoextendArmitageandcontroltheMetasploitFramework
anditsfeaturesthroughArmitage'steamserver.CobaltStrike3.0isaground-uprewriteof
CobaltStrikewithoutArmitageasafoundation.Thischangeaffordedanopportunitytorevisit
CobaltStrike'sscriptingandbuildsomethingaroundCobaltStrike'sfeatures.Theresultofthis
workisAggressorScript.
AggressorScriptisascriptinglanguageforredteamoperationsandadversarysimulations
inspiredbyscriptableIRCclientsandbots.Itspurposeistwo-fold.Youmaycreatelongrunning
botsthatsimulatevirtualredteammembers,hackingside-by-sidewithyou.Youmayalsouseit
toextendandmodifytheCobaltStrikeclienttoyourneeds.
Status
AggressorScriptispartofCobaltStrike3.0'sfoundation.Mostpopupmenusandthe
presentationofeventsinCobaltStrike3.0aremanagedbytheAggressorScriptengine.That
said,AggressorScriptisstillinitsinfancy.StrategicCyberLLChasyettobuildAPIsformostof
CobaltStrike'sfeatures.ExpecttoseeAggressorScriptevolveovertime.Thisdocumentationis
alsoaworkinprogress.
How to Load Scripts
AggressorScriptisbuiltintotheCobaltStrikeclient.Topermanentloadascript,gotoCobalt
Strike->ScriptManagerandpressLoad.
CobaltStrikeScriptLoader
The Script Console
CobaltStrikeprovidesaconsoletocontrolandinteractwithyourscripts.Throughtheconsole
youmaytrace,profile,debug,andmanageyourscripts.TheAggressorScriptconsoleisavailable
viaView->ScriptConsole.
Thefollowingcommandsareavailableintheconsole:
UserGuide www.helpsystems.com page:132
AggressorScript/HeadlessCobaltStrike
Command Arguments What it does
? "*foo*" iswm "foobar" evaluate a sleep predicate and print result
e println("foo"); evaluate a sleep statement
help list all of the commands available
load /path/to/script.cna load an Aggressor Script script
ls list all of the scripts loaded
proff script.cna disable the Sleep profiler for the script
profile script.cna dumps performance statistics for the script.
pron script.cna enables the Sleep profiler for the script
reload script.cna reloads the script
troff script.cna disable function trace for the script
tron script.cna enable function trace for the script
unload script.cna unload the script
x 2 + 2 evaluate a sleep expression and print result
Interactingwiththescriptconsole
Headless Cobalt Strike
YoumayuseAggressorScriptswithouttheCobaltStrikeGUI.Theagscriptprogram(included
withtheCobaltStrikeLinuxpackage)runstheheadlessCobaltStrikeclient.Theagscript
programrequiresfourarguments:
./agscript [host] [port] [user] [password]
UserGuide www.helpsystems.com page:133
AggressorScript/AQuickSleepIntroduction
TheseargumentsconnecttheheadlessCobaltStrikeclienttotheteamserveryouspecify.The
headlessCobaltStrikeclientpresentstheAggressorScriptconsole.
Youmayuseagscripttoimmediatelyconnecttoateamserverandrunascriptofyourchoosing.
Use:
./agscript [host] [port] [user] [password] [/path/to/script.cna]
ThiscommandwillconnecttheheadlessCobaltStrikeclienttoateamserver,loadyourscript,
andrunit.TheheadlessCobaltStrikeclientwillrunyourscriptbeforeitsynchronizeswiththe
teamserver.UseonreadytowaitfortheheadlessCobaltStrikeclienttofinishthedata
synchronizationstep.
on ready {
println("Hello World! I am synchronized!");
closeClient();
}
A Quick Sleep Introduction
AggressorScriptbuildsonRaphaelMudge'sSleepScriptingLanguage.TheSleepmanualis
availableathttp://sleep.dashnine.org/manual
AggressorScriptwilldoanythingthatSleepdoessuchas:
l Sleep'ssyntax,operators,andidiomsaresimilartothePerlscriptinglanguage.Thereis
onemajordifferencethatcatchesnewprogrammers.Sleeprequireswhitespacebetween
operatorsandtheirterms.Thefollowingcodeisnotvalid:
$x=1+2; # this will not parse!!
Thisstatementisvalidthough:
$x = 1 + 2;
l Sleepvariablesarecalledscalarsandscalarsholdstrings,numbersinvariousformats,Java
objectreferences,functions,arrays,anddictionaries.Hereareseveralassignmentsin
Sleep:
$x = "Hello World";
$y = 3;
$z = @(1, 2, 3, "four");
$a = %(a => "apple", b => "bat", c => "awesome language", d => 4);
l Arraysanddictionariesarecreatedwiththe@and%functions.Arraysanddictionaries
mayreferenceotherarraysanddictionaries.Arraysanddictionariesmayevenreference
themselves.
l Commentsbeginwitha#andgountiltheendoftheline.
l Sleepinterpolatesdouble-quotedstrings.Thismeansthatanywhite-spaceseparated
tokenbeginningwitha$ signisreplacedwithitsvalue.Thespecialvariable$+
concatenatesaninterpolatedstringwithanothervalue.
UserGuide www.helpsystems.com page:134
AggressorScript/AQuickSleepIntroduction
println("\$a is: $a and \n\$x joined with \$y is: $x $+ $y");
Thiswillprintout:
$a is: %(d => 4, b => 'bat', c => 'awesome language', a => 'apple')
and
$x joined with $y is: Hello World3
l There'safunctioncalled&warn.Itworkslike&println,exceptitincludesthecurrentscript
nameandalinenumbertoo.Thisisagreatfunctiontodebugcodewith.
l Sleepfunctionsaredeclaredwiththesubkeyword.Argumentstofunctionsarelabeled$1,
$2,allthewayupto$n.Functionswillacceptanynumberofarguments.Thevariable@_
isanarraycontainingalloftheargumentstoo.Changesto$1,$2,etc.willalterthe
contentsof@_.
sub addTwoValues {
println($1 + $2);
}
addTwoValues("3", 55.0);
Thisscriptprintsout:
58.0
l InSleep,afunctionisafirst-classtypelikeanyotherobject.Hereareafewthingsthat
youmaysee:
$addf = &addTwoValues;
l The$addfvariablenowreferencesthe&addTwoValuesfunction.Tocallafunction
enclosedinavariable,use:
[$addf : "3", 55.0];
l ThisbracketnotationisalsousedtomanipulateJavaobjects.Irecommendreadingthe
Sleepmanualifyou'reinterestedinlearningmoreaboutthis.Thefollowingstatements
areequivalentandtheydothesamething:
[$addf : "3", 55.0];
[&addTwoValues : "3", 55.0];
[{ println($1 + $2); } : "3", 55.0];
addTwoValues("3", 55.0);
l Sleephasthreevariablescopes:global,closure-specific,andlocal.TheSleepmanual
coversthisinmoredetail.Ifyouseelocal('$x$y$z')inanexample,itmeansthat$x,$y,
and$zarelocaltothecurrentfunctionandtheirvalueswilldisappearwhenthefunction
returns.Sleepuseslexicalscopingforitsvariables.
Sleephasalloftheotherbasicconstructsyou'dexpectinascriptinglanguage.Youshouldread
themanualtolearnmoreaboutit.
UserGuide www.helpsystems.com page:135
AggressorScript/InteractingwiththeUser
Interacting with the User
AggressorScriptdisplaysoutputusingSleep's&println,&printAll,&writeb,and&warnfunctions.
Thesefunctionsdisplayoutputtothescriptconsole.
Scriptsmayregistercommandsaswell.Thesecommandsallowscriptstoreceiveatriggerfrom
theuserthroughtheconsole.Usethecommandkeywordtoregisteracommand:
command foo{
println("Hello $1");
}
Thiscodesnippetregistersthecommandfoo.Thescriptconsoleautomaticallyparsesthe
argumentstoacommandandsplitsthembywhitespaceintotokensforyou.$1isthefirst
token,$2isthesecondtoken,andsoon.Typically,tokensareseparatedbyspacesbutusers
mayuse"doublequotes"tocreateatokenwithspaces.Ifthisparsingisdisruptivetowhatyou'd
liketodowiththeinput,use$0toaccesstherawtextpassedtothecommand.
CommandOutput
Colors
YoumayaddcolorandstylestotextthatisoutputinCobaltStrike'sconsoles.The\c,\U,and
\oescapestellCobaltStrilehowtoformattext.Theseescapesareparsedinsideofdouble-
quotedstringsonly.
The\cXescapecolorsthetextthatcomesafterit.Xspecifiesthecolor.Yourcolorchoicesare:
ColorOptions
The\Uescapeunderlinesthetextthatcomesafterit.Asecond\Ustopstheunderlineformat.
The\oescaperesetstheformatofthetextthatcomesafterit.Anewlineresetstextformatting
aswell.
UserGuide www.helpsystems.com page:136
AggressorScript/CobaltStrike
Cobalt Strike
The Cobalt Strike Client
TheAggressorScriptengineisthegluefeatureinCobaltStrike.MostCobaltStrikedialogsand
featuresarewrittenasstand-alonemodulesthatexposesomeinterfacetotheAggressorScript
engine.
Aninternalscript,default.cna,definesthedefaultCobaltStrikeexperience.Thisscriptdefines
CobaltStrike'stoolbarbuttons,popupmenus,anditalsoformatstheoutputformostCobalt
Strikeevents.
ThischapterwillshowyouhowthesefeaturesworkandempoweryoutoshapetheCobalt
Strikeclienttoyourneeds.
Thedefault.cnascript
Keyboard Shortcuts
Scriptsmaycreatekeyboardshortcuts.Usethebindkeywordtobindakeyboardshortcut.This
exampleshowsHelloWorld!inadialogboxwhenCtrlandHarepressedtogether.
UserGuide www.helpsystems.com page:137
AggressorScript/CobaltStrike
bind Ctrl+H {
show_message("Hello World!");
}
KeyboardshortcutsmaybeanyASCIIcharactersoraspecialkey.Shortcutsmayhaveoneor
moremodifiersappliedtothem.Amodifierisoneof:Ctrl,Shift,Alt,orMeta.Scriptsmayspecify
themodifier+key.
Popup Menus
ScriptsmayalsoaddtoCobaltStrike'smenustructureorre-defineit.Thepopupkeywordbuilds
amenuhierarchyforapopuphook.
Here'sthecodethatdefinesCobaltStrike'shelpmenu:
popup help {