V
能是新生代分配不了内存的大对象会直接进入老年代。
使用到的Native方法服务。
其区别不过是虚拟机栈为虚拟机执行Java方法服务，而本地方法栈则是为虚拟机
Local Method Statck：本地方法栈，与Java虚拟机栈所发挥的作用是非常相似的，
机栈是以帧为单位来保存线程的运行状态。
型，每当一个新的线程被创建时，Java 虚拟机都会分配一个虚拟机栈，Java 虚拟
JVMStack：Java虚拟机栈，当Java虚拟机运行程序时是Java方法执行的内存模
译器，是为了提高指令的执行效率，把字节码文件编译成本地机器代码。
CodeCache：代码缓存区，它主要用于存放JIT所编译的本地代码。JIT是即时编
机中，而是使用本地内存，并且它属于non-heap（非堆内存）。
小可以固定，也可以扩大和缩小。方法区的内存不需要是连续空间。还有一点需
堆，但Java虚拟机实现可以选择不对其进行回收或压缩。与堆类似，方法区的大
部分数据就已经转移到了Java Heap 或者是Native Heap 中。方法区在逻辑上属于
已被元空间（Metaspace）替代，虽然JDK1.7仍然保留永久带，但存储在永久代的
加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。JDK8永久代
---
## Page 480
器平台下，理论上可以使用的内存空间为4GB，但是操作系统本身会有一个限制，这个限
统的物理内存，所以JVM内存大小的设置跟操作系统有很大关系。简单来说，32位处理
Metadata space，而在在 JDK1.7中抛出的异常是 java.lang.OutOfMemoryError:PermGen
序无法启动，可能是以下几种原因导致的。
推荐采用64位处理器平台来运行JVM应用，可以充分发挥内存性能的优势。
制一般是2～3GB，因此无法达到理论的4GB大小，而64位处理器没有这个限制。所以
节永久代的大小。
因此要结合JDK版本，去设置不同的参数，在JDK1.7以及之前，可以使用如下参数来调
成类）的话，就很可能出现PermGen Space错误。
主程序运行期对PermGenSpace进行清理，所以如果应用中有很多Class（特别是动态生
易看出，PermGen的使用量和 JVM加载到内存中的Class 数量、大小有关，而GC不会在
存放已被虚拟机加载的类信息、常量、静态变量和即时编译器编译后的代码等数据。很容
错误，其实就是内存溢出。
的1/4。
值，默认是物理内存的1/64：使用-XX:MaxPermSize设置最大非堆内存，默认是物理内存
和To Survivor各占新生代的1/12。注意，两个 Survivor区大小永远是一样的。
大小的10倍（也是FromSurvivor的10倍），所以，Eden占新生代大小的10/12，FromSurvivor
指定Eden与Survivor大小的比例。例如，-XX:SurvivorRatio=10，表示Eden是Survivor
代占1/4。如果针对新生代，同时定义绝对值和相对值，绝对值将起作用。
在JDK8以及之后，去除了PermGen space 这个区，替代它的是Metaspace（元空间），
如果-XX:MaxPermSize 设置过小会导致 java.lang.OutOfMemoryError:PermGen space
·对于Eden与Survivor的内存大小，也可以设置比例，可通过参数-XX:SurvivorRatio
因此，JVM最大内存取决于实际的物理内存和操作系统。如果设置VM参数导致程
5.JVM内存限制
如果超过这个值将会抛出OutOfMemoryError 异常java.lang.OutOfMemoryError:
》-XX:MaxPermSize：永久代区最大大小。
非堆内存分配主要针对永久代设置内存，JVM使用-XX:PermSize设置非堆内存初始
4.非堆内存分配
了解了如何设置JVM的内存参数，那么如何设置内存限制呢？JVM使用的是操作系
注意不同版本OutOfMemoryError异常的区别。
在JDK1.8中，可以使用如下参数来调节元空间的大小。
》-XX:PermSize：永久代区初始大小。
例如-XX:NewRatio=3表示老年代/新生代比例为3:1，即老年代占堆大小的3/4，新生
-XX:MaxMetaspaceSize：元空间最大大小。
-XX:MetaspaceSize：元空间初始大小。
线上业务服务器优化案例第11章
469
---
## Page 481
470
这些工具对JVM的调优可以达到事半功倍的效果。
里，配置不同的参数，然后进行比较。此外，有很多命令行工具或者图形工具可以使用，
的时间短（大部情况应该要在1s内）。
生代里，显然加重了YGC的负担，多次YGC之后仍然存活的对象显然应该放到老年代里。
更重量级的GC算法。
存活到适当的年龄，会被移动到老年代。当对象在老年代死亡时，就需要更高级别的GC，
GC的次数。
GC收集的时间较长，频繁的FullGC会严重影响应用系统性能，因此，要尽量减少Full
触发运行Full GC，此时JVMGC会停止所有在堆中运行的线程并执行清除动作。Full
的、快速的GC回收，如果这种小幅度地调整收集仍不能腾出足够的内存空间，就会
此时这些对象将被复制到PermGenSpace（永久代）。
对象被第1个SurvivorSpace或EdenSpace中的对象引用，那么这些对象就是长期存在的，
能回收对象复制到第2个 Survivor Space。如果填充到第2个Survivor Space中的不能回收
中不能回收的对象复制到第2个SurvivorSpace，同时，也将第1个SurvivorSpace中的不
对象所占用的空间释放。当Eden Space再次变满了的时候，就启动移动程序把Eden Space
中的对象扫描一次，把所有不能回收的对象复制到第1个SurvivorSpace，同时把无效的
11.3.4JVM内存回收过程与优化
序肯定无法启动。
PermSize，这都是不允许的。
Linux高效运维实战
是
理想的GC、内存使用情况应该是这样的：老年代增长缓慢，FullGC次数少，FullGC
那么，是不是要尽全力防止对象进入老年代？显然不是，因为对象如果长久存在在新
JVM采用分代回收的策略，用较高的频率对新生的对象进行YGC。YGC是小幅度
2）如果-Xmx和-XX:MaxPermSize的总和超过了当前操作系统最大内存限制，那么程
。1）JVM参数设置中，-Xms的值大于-Xmx，或者-XX:PermSize的值大于-XX:Max
2.新生代非常重要
对象首先在Eden Space 创建，当Eden Space 满了的时候，GC就把所有在Eden Space
因此，GC调优就是一个取舍权衡的过程，有得必有失，最好可以在多个不同的实例
要想获得一个合适的大小，只能通过不断地测试调优。这就需要JVM参数了。
如果新生代过大，会发生过多的复制过程。所以，需要找到一个合适的大小，不幸的
如果新生代过小，会导致新生对象很快就晋升到老年代中，在老年代中对象很难被回
对象一般出生在伊甸区，新生代GC过程中，对象在两个幸存区之间移动，如果对象
1.合理减少对象进入老年代
至此，来总结一下JVM参数设置的一些原则。
上面介绍了JVM的参数和组成，那么接下来介绍JVM的内存回收过程。
---
## Page 482
共享处理器资源，并且应用中存在比较多的长生命周期对象的应用。
合场景是对响应时间重要性需求大于对吞吐量的要求，能够承受垃圾回收线程和应用线程
Collector。UseConcMarkSweepGC表示启用CMS 收集器，主要用于老年代，它的主要适
Size=128M-XX:MaxPermSize=256m -XX:NewSize=192m -Xx:MaxNewSize=256m
11.3.5JVM内存参数设置与优化
11.3.6OutOfMemoryError系列错误解析
上默认是Parallel Collector算法，其他平台要加 java-server参数才会默认选用Parallel
Java heap space 错误很明确，就是堆内存不足了。JVM 堆内存由-Xms 和-Xmx共同来
1. Java heap space 错误产生的原因
其中，大部分平台或者Java客户端默认会使用Serial Collector这种算法；在Linuxx64
》-XX:+UseSerialGC：设置串行收集器。
2.内存回收算法
每个参数的含义如下所述。
要设置JVM内存参数，可以通过JAVA_OPTS来实现，看下面这个例子：
1.JVM内存参数设置方法
》-XX:+UseConcMarkSweepGC：设置并发收集器。
Java中有4种不同的内存回收算法，对应的启动参数为以下几个。
V
V
-XX:+UseParalledlOldGC：设置并行永久代收集器。
-XX:+UseParallelGC：设置并行收集器。
代内存大小；MaxNewSize为最大的新生代内存大小。
-XX:NewSize/-XX:MaxNewSize：定义新生代的大小，NewSize为JVM启动时新生
-XX:MaxPermSize=256M：表示JVM最大允许分配的永久代内存。
下版本有效。
-XX:PermSize=128M：表示JVM初始分配的永久代内存，此参数在JDK7以及以
意SurvivorSpace有两个。这里的3表示Eden:Survivor=3:2，即一个SurvivorSpace
多个CPU时可大幅度提升性能。
-server：指定JVM 的运行模式为服务器模式，
占整个新生代的1/5，Eden Space占3/5。
-XX:SurvivorRatio=3：设置新生代中Eden Space与两个Survivor Space的比值。注
-Xmx2048m：表示JVM最大允许分配的堆内存大小为2048MB。
小尺寸。
-Xms2048m：表示JVM初始分配的堆内存大小为2048MB，也就是堆内存的最
JAVA_OPTS=-server-Xms2048m -Xmx2048m-XxSurvivorRatio=3-XX:Perm
一定要作为第1个参数，此参数在
线上业务服务器优化案例第11章
471
---
## Page 483
Generation）内存区域已满。如果出现此错误，表示加载到内存中的Class 数量太多或体积
exceeded错误，那么会发生什么情况呢？那就是GC清理的少量内存很快会再次被填满，
集的时间比例太大，有效的运算量太小。默认情况下，如果GC花费的时间超过98%，并
MemoryError:GCoverhead limit exceeded错误可以理解为发出了这样的信号：执行垃圾收
推迟 java.lang.OutOfMemoryError: Java heap space 错误的触发时间。因此，需要排查分配
java.lang.OutOfMemoryError: Java heap space 错误。
据和业务。如果访问量突然飙升，超过预期的阈值，那么程序很可能就会卡死、并触发
耗光堆中的所有内存，那么 java.lang.OutOfMemoryError:Java heap space 错误就爆发了。
存，也会很快用完。因此，如果增加内存后还不能解决问题，那么就要检查代码了，找到
误替换为java.lang.OutOfMemoryEror:Java heap space。所以，要解决这个问题，必须要增
任何成果，同时，业务系统也会卡死，以前只需要几毫秒的操作，现在需要好几分钟才能
内存的代码才能彻底解决这个问题。
内存泄露，那么每执行一次，就会占用更多的内存。随着运行时间的持续，泄露的对象会
杂的情况，主要是由代码问题导致的。
指定。要解决这个问题，只要增加堆内存的大小，程序就能正常运行，但还有一些比较复
472
太大。
代码中占用内存大的地方，将代码优化，
大堆内存，但是，这个方法也不是万能的。因为程序里如果有内存泄露，即使再增大堆内
参数：
完成。
迫使GC再次执行。这样就形成了恶性循环，CPU使用率会一直100%，而GC却没有
且GC回收的内存少于2%，JVM就会抛出这个错误。假如不抛出GCoverheadlimit
Linux高效运维实战
那么要如何解决这个问题呢？方法分为两步，第1步是关闭这个错误提示，添加如下
。如果程序存在内存泄露，那么增加堆内存空间并不能彻底解决问题。增加堆内存只会
此错误如果在程序启动时发生，那么表示永久代内存不够，只需增加永久代内存大小
Permgen space 错误仅出现在JDK1.7以及以下版本中，它表示永久代（Permanent
3.Permgen space 错误解决方法
但是注意，这个参数并不能解决内存不足的问题，只是将错误发生时间延后，并且错
GC overhead limit exceeded就是本节案例中出现的错误，JVM抛出 java.lang.OutOf
2.GCoverhead limit exceeded 错误解决方法
应用系统设计时，一般是有“容量”定义，部署一定量的机器，用来处理一定量的数
（2）业务量、数据库猛增
由于代码中的某些错误导致系统占用的内存越来越多。如果某个方法或某段代码存在
（1）内存泄露（Memory leak）
-XX:-UseGCOverheadLimit
这个问题也就随之解决了。
---
## Page 484
配置，在Tomcat 的 bin目录下 catalina.sh文件中添加如下内容：
启 JMX，例如，要监控某个Tomcat的JVM运行状态，首先需要进行Tomcat 的JMX远程
这个命令，然后打开，就能进入JavaVisualVM的图形界面了。
它支持全中文界面。要使用JavaVisualVM，可以在下载的JDK的bin目录中找到jvisualvm
https://visualvm.github.io/下载最新版本，当然也可以使用JDK工具中的JavaVisualVM，
GitHub上的VisualVM是一个具有最新功能的前沿发行版。要获得稳定的工具，可以从
CPU分析，同时它还支持在MBeans上进行浏览和操作。
相关信息。它不仅能生成和分析海量数据、跟踪内存泄露、监控垃圾回收器、执行内存和
的详细信息。在VisualVM的图形用户界面中可以方便、快捷地查看多个Java应用程序的
方网站为https://visualvm.github.io/。VisualVM提供在Java虚拟机上运行的Java应用程序
11.3.7JVM内存监控工具
才可以使用。
时（CMS收集器）生效。如果使用了ParallelGC，或者Serial GC，那么需要切换为CMS
将会清理永久代内存，卸载无用的Class，当然，这个选项只有在设置UseConcMarkSweepGC
题。那么就需要允许JVM卸载Class。增加下面的启动参数：
中，即使这个类不再被使用），但是现代的应用程序在运行过程中，会动态创建大量的
卸载Class。官方的JVM在这方面相当保守（在加载Class之后，就一直让其驻留在内存
即可，让程序拥有更多的内存来加载Class，就能解决问题。类似下面这样：
authenticate=false-Dcom.sun.management.jmxremote.ssl=false-Djava.rmi.server
VisualVM可以通过JMX和Jstatd两种方式远程监控JVM运行状态。下面介绍如何开
VisualVM有两个发行版，GitHub上的VisualVM和JDK工具中的JavaVisualVM。
JDK1.6中Java引入了一个新的可视化的JVM监控工具JavaVisualVM。VisualVM官
默认情况下CMSClassUnloadingEnabled的值为false，所以需要明确指定。启用以后，GC
但有时候此错误发生在程序运行过程中，此时，首先需要确认GC是否能从永久代中
添加一个JMX连接如图11-14所示。
》-Dcom.sun.management.jmxremote.port=12345，是jmxremote使用的端口号，可修改。
其中：
号即可监控。
JAVA_OPTS='-XX:MaxPermSize=512m
CATALINA OPTS="-server -Xms2048m -Xmx2048m-XX:PermSize=64M-XX:Max
-XX:+CMSClassUnloadingEnabled
线上业务服务器优化案例第11章
473
---
## Page 485
VisualVM来协助解决问题。
Linux高效运维实战
474
VisualVM对于排查JVM问题非常有帮助，如果JVM需要调优和监控，就可以使用
》“本地”列表下列出在本机运行的Java程序的资源占用情况。如果本地有Java程
图11-15中的详细信息如下所述。
添加成功后，就可以查看JVM运行状态了，如图11-15所示。
资源的运行状态。
所占用的CPU、Heap、PermGen、类、线程的统计信息。可以很清晰地看到各个
“远程”列表下列出远程主机上的Java程序的资源占用情况。图中已经添加了一
个远程JVM监控，单击程序名打开相应的资源监控菜单，以图形的形式列出程序
的统计信息。
源监控菜单，
序在运行的话，启动VisualVM即可看到相应的程序名，单击程序名打开相应的资
：以图形的形式列出程序所占用的CPU、Heap、PermGen、类、线程
不要求SSL连接（N)
使用安全凭证（E）
显示名称（D）：
图11-15VisualVM下查看JVM运行状态
保存安全凭证（S）
口令(P）：
用户名（U）：
连接（C）：172.16.213.239:12345
已部入的总数：3.34
CPU使用情况：31.2%
正常运行时间：125小时49分：24秒
图11-14添加一个JMX连接
172.16.213.239:12345
下年：20
用法：
《主机名>：：<snr
添加JMX连接
Java VisualVM
共事的已部义数：0
垃圾回收活动：0.0%
新动机：119
线程
确定取消
500
下午5:20
下年5：28
中护的数：200
内存类线程
执行垃援收增Dimp
堆大小《使用的
口
---
## Page 486
封面设计MXESNSUO
策划编辑李培培
为中华崛起传播智慧
机机工业出方社信
读者都能从本书受益。
习，也可以帮助有一定基础的中高级Linux运维管理人员进阶，使不同层次的
企业实战能力。
习，可以使读者深入地掌握Linux运维技术的各种经验和技巧，从而真正提高
真实的生产环境从多个方面介绍运维工作中的方方面面。通过真实案例的学
个方面展开介绍。
方面，主要从系统基础运维、系统性能调优、智能运维监控、运维实战案例4
高性能Linux服务器运维实战
本书贯穿实战、实用、通俗、易懂的特点，在内容上注重实战化，通过
■全书贯穿了由点及线、由线及面的学习方法，既可以供初学者参考学
shell编程、监控告警、性能优化与实战案例
本书以Linux运维平台下的开源应用软件为中心，涉及Linux运维的各个
即可获取本书配套资源下载链接，并可获得更多增值服务和最新资讯。
扫描关注机械工业出版社计算机分社官方微信订阅号—T有得聊，回复65549
微信公众
ISBN 978-7-111-
上架指导计算0
定价：
（附程序源码）
145.00元
---
## Page 487
SS号=14794870
[Gener al  Inf or mut i on] 
---