transaction.commit()
root['jeremy’] = jeremy
print jeremy
jeremy = custom_class_zodb.Account('jeremy', 1000)
print noah
conn = db.open()
db = ZODB.DB(filestorage)
filestorage = ZODB.FileStorage.FileStorage(' zodb_filestorage.db')
conn = db.open()
importcustom_class_zodb
import
noah
root =conn.root()
tZODB.FileStorage
:custom_class_zodb.Account('noah', 1000)
transaction
www.TopSage.com
"ZODB.FileStorage"
数据持久性丨369
X
DG
---
## Page 384
370
是银行账户。如果需要确保资金能够成功的从一个账户转到另一个账户而不会出现资金
我们偏离MyClas s自定义类示例的原因是因为要对事务做些介绍。其中一个典型的例子
可以看到，noah账户由1000变为了700，而jeremy账户由1000变为了1300。
之后我们运行ZODB数据库打印脚本，查看数据是否被保留：
以下是脚本运行后的输出：
下例子在循环中使用了事务处理：
丢失或赠加的情况，采用事务进行处理是一种可行的方式。为了确保资金不会丢失，以
import ZODB.FileStorage
#!/usr/bin/env python
Account noah, balance 700
BEFORE WITHDRAWAL
jmjones@dinkgutsy:~/code$ python zodb_withdraw_1.py
conn.close()
print "AFTER WITHDRAWAL'
transaction.commit()
noah.withdraw(300)
transaction.begin()
jeremy = root['jeremy']
print "BEFORE WITHDRAWAL"
import ZODB
Accountjeremy，balance 1300
AFTER WITHDRAWAL
Account jeremy,balance 1000
Accountnoah,balance 1000
print
orint
print
jeremy.deposit(300)
print
printnoah
print
第12章
jeremy
tnoah
-------------
www.TopSage.com
---
## Page 385
以下是运行该脚本的结果：
从1000开始的。
信息。如果交易成功，之前和之后的账户详细信息应该总计2000，因为这两个账户都是
然后使用about()放弃事务，从循环中退出。该脚本在交易循环之前和之后也打印账户
的资金进行转账的情况下，它将打印一个通知，告诉有异常发生以及当前的账户信息。
noah账户转移300到jeremy账户，直到不存在足够的资金进行转账为止。在不存在足够
这是对之前的转账脚本略微修改之后的版本。与之前仅进行的转账不同，它不断地从
Account jeremy,balance 1300
Accountnoah,balance7o0
jmjones@dinkgutsy:~/code$ python zodb_withdraw_2.py
conn.close()
print
print noah
print
print "AFTER TRANSFER"
while True:
print
print jeremy
jeremy = root['jeremy']
print "BEFORE TRANSFER"
root = conn.root()
conn = db.open()
db = ZODB.DB(filestorage)
filestorage = ZODB.FileStorage.FileStorage('zodb_filestorage.db')
BEFORE TRANSFER
print noah
import custom_class_zodb
import transaction
except custom_class_zodb.outofFunds:
try:
break
transaction.abort()
print
print
transaction.commit()
noah.withdraw(300)
jeremy.deposit(300)
transaction.begin()
printnoah
jeremy
“OutofFunds Error"
www.TopSage.com
数据持久性丨371
---
## Page 386
372丨第12章
的进程上。数据保存在一个文件中而不是分散到多个文件系统的多个目录中。除了必须
在独立服务器进程上的数据库，数据库引擎运行在与你的代码和作为库进行访问的相同
置、事务型SQL数据库引擎”。那么所有这些描述又意味着什么？不同于你代码中运行
根据SQLite网站的描述，SQLite是“一个软件库，可以实现自包含、零服务器、零配
什么问题。
数据库，例如MySQL、PostgreSQL或是以前的Oracle。如果是这样，你应该对本节没有
就是信息存储之类的问题，涉及关系数据库、RDBMS等。我们假设你曾经使用过关系
以一种更结构化和关系化的方法来保存和处理数据是非常有用的。这里我们将要讨论的
SQLite
及提供一个Python对象类的数据接口。
对象、与其他Python对象的相对连接，保存关系数据（例如，一个关系型数据库），以
有时简单序列化是不够的，需要具有关系分析的能力。关系序列化包括：序列化Python
关系序列化
个最适合你和你的项目。
案都是非常不错的。每一个都有它的长处和弱点。如果你需要某一功能，必须调查哪一
总之，简单地保存Python对象以备将来使用，这就是简单持久。我们给出的所有选择方
值得考虑的选择，但是你或许需要进一步深入了解其高级特征。
些类似事务处理这样的高级特征。如果你希望简单对象的映射更为直接，ZODB是一个
到磁盘的对象对应于内存中的一个对象，不管是在序列化之前或是之后。ZODB还有一
ZODB的处理方法很直接，看起来像一个在简化与关系序列化之间的解决方案。序列化
但是放弃交易修复了这个问题。
有2000。那么在异常过程中，在transaction.abort()之前，有额外300是无法解释的。
100，jeremy有2200，总共有2300。在程序执行完毕之后，noash有100，有1900，总共
之前，noah有700，jeremy有1300，总共2000。当Out0fFunds异常发生时，noah有
Account noah, balance 100
AFTER TRANSFER
Accountjeremy,balance2200
Accountnoah,balance100
Current account information:
OutofFundsError
www.TopSage.com
---
## Page 387
含以下的数据：
的Django示例中提取以下的表定义。假设我们有一个名为inventory.sql的文件，该文件包
现在，你知道了为什么应该考虑使用它，接下来让我们看一下如何使用。我们从第11章
的操作系统和程序语言都提供对SQLite的支持。
是一个“真正”的数据库将必须具备的；另一个好处是它是无处不在的。绝大多数主流
简言之，使用SQLite主要有两个好处：它很容易使用并且能够完成大量相同的工作，这
码，该数据库文件由SQLite库创建。这也意味着，SQLite是一个非常有特点的数据库。
配置主机名、端口号、用户名、密码等来进行连接外，你需要在数据库文件中指定代
CREATETABLE"inventory_hardwarecomponent"
BEGIN;
UNIQUE ("server_id",
"description"
"description" text NULL
"server_id" integer NOT NULL
"name"
"address"
"os_id"
"description"
"name"
'id"
model" varchar(50) NULL,
manufacturer"
 varchar(50) NOT NULL,
varchar(5o) NOT NULL,
text NULL,
text NULL
text NULL
varchar(50) NOT NULL,
varchar(5o) NULL
"service_id")
LPRIMARY KEY,
PRIMARY KEY,
PRIMARY KEY,
www.TopSage.com
数据持久性丨373
PDG
---
## Page 388
正如我们所期望的，什么也没有输出。现在我们执行提交并继续：
374
仅查看指针并取回处理的任何结果：
主关键字。由于这是一个插入而不是选择，我们不希望从查询中获得结果集，因此我们
意的是，我们仅提供了name和description字段的值，留下一个字段作为id值，该值是
execute()方法返回一个数据库指针对象，我们决定使用cursor对其进行引用。值得注
象上执行一个查询操作，插入数据到数据库中：
一个连接对象，该对象称为conn，这也是之后在示例中将要使用的。接下来，在连接对
我们必须做的是加载SQLite库，然后在sqlite3模块上调用connect()。connect()返回
数据。以下是连接到一个SQLite数据库的示例：
假设你已经安装了SQLite并且创建了一个数据库，继续连接到这个数据库，并处理一些
编码（http://www.sqlite.org/download.html）。
没有安装SQLite的Linux版本，UNIX或是Windows，你可以下载源码或预编译成二进制
在Ubuntu和Debian系统中，SQLite的安装非常简单，类似“apt-getinstall1
sqlite3”。
我们可以使用以下的命令行参数创建一个SQLite数据库：
In [6]:
In [5]: conn.commit()
In [2]: conn = sqlite3.connect('inventory.db')
In [1]:import sqlite3
 jmjones@dinkgutsy:~/code$ sqlite3 inventory.db < inventory.sql
COMMIT;
CREATE: TABLE "inventory_server_hardware_component"(
第12章
UNIQUE ("server_id",
"server_id"
。在Red Hat系统中，需要你去做的仅是“yum install sqlite”。
www.TopSage.com
。对于其他可能
---
## Page 389
义。第一件我们必须去做的事情是创建一个表的映射。由于已经访问了inventory.
Ubuntu发布版。对于Python数据库，Storm相对较新，但是它已经有了一个引起关注的
到一单行。具有外键关系的被连接的表，可以作为一个对象属性访问。
Storm ORM
这是在上面插入的数据。name和description字段都是unicode。id字段为整型数据。典
最后，我们通过指针取回结果：
现在，我们执行一个select查询，获得返回结果的指针：
我们现在使用Storm来访问数据库中的数据，该数据库在SQLite一节中被首先定
版本，我们希望它成为一流的PythonORM之一。
Storm是一个ORM，它最近被作为开放源码由Canonical发布，该公司负责创建Linux的
对象的数据库接口。在ORM中，程序语言中的对象对于一个简单的数据库表，可以对应
势被称为Object-RelationalMapping（或ORM）。一个ORM不同于简单地提供一个面向
据库访问方面的一个趋势是创建一个面向对象的数据表示，且保存在数据库中。这一趋
正需要的，通常这可以方便地访问数据，不需要背离Python的简单原则。这些年来，数
为了获取数据，更新，插入及删除数据库中的数据，一个简单的SQL数据库接口是你真
少量用户是非常友好的。
一次被一个脚本访问，或是一次仅有几个用户可以访问的情况。换句话说，该格式对于
的事情几乎成为一种练习。SQLite在数据存储方面非常出色，其格式尤其适于数据仅能
现在我们熟悉了处理SQLite数据库的基本方法。执行插入数据、升级数据，以及更复杂
置为自动增加，会为这个字段使用独一无二的值。
型的，当你插入数据到数据库中的时候，不要为主键定义一个值，数据库将帮你将它设
IPyton提示，加载sqlite3并创建一个连接到数据库文件：
接下来创建数据库并使用SQLite对数据库进行操作。让我们取回数据。首先，打开一个
实际上不必提交这个插入操作。当关闭数据库连接时，我们希望这一修改被清除。
(sueadorous wi * itas,axau = ros :] u 
In [2]: conn = sqlite3.connect('inventory.db')
In [1]:import sqlite3
www.TopSage.com
数据持久性丨375
---
## Page 390
类型，没有子类。有一些类属性被定义。一个略显陌生的是类的_storm_table_
这是一个非常普通的类定义。没有什么神奇、怪异的事情发生。除了内建的object
operatingsystem表，并添加一个记录，我们将继续访问这个表。以下是Storm中映射的
OperationSystem对象并对name和description属性进行赋值（需要注意的是，为这些
在这个示例中，加载storm.locals，storm_model和os模块。然后，实例化一个
用已经的具有2.0.34内核的Linux发布版本，我们添加Windows3.1.1到操作系统表中：
现在，有一个Python类到数据库表的映射，让我们添加另一行到数据库中。为了继续使
description进行引用，你将使用mapped_object.dsc对其进行引用。
storm.locals.Unicode(name='description')
参数给你正在使用的storm.locals.Type。例如，修改description属性为“this：dsc=
如果你不希望对象的description属性映射到description列?很简单。传递name关键字
的任何属性都会自动映射到列，该列共享它的名称，且与_storm_table_属性指定的
operatingsystem表的description列。这是怎么回事呢？奇怪。你指定到Storm映射类
inventory_operationgsytem表的name列，description属性被映射到inventory_
直接，没什么神秘的，但混合起来有一点神奇之处。例如，name属性被映射到
示例：
376
表共享。
属性。该属性让Storm知道哪一个表是该类应该访问的。这看起来非常简单，
class OperatingSystem(object):
import storm.locals
store.commit()
store.add(operating_system)
store = storm.locals.Store(db)
db = storm.locals.create_ database('sqlite://%s' % os.path.join(os.getcwd(),
operating_system.description = u'3.1.1'
operating_system.name = u'windows'
operating_system = storm_model.operatingSystem()
import os
import
import storm.locals
'inventory.db'))
description=storm.locals.Unicode()
第12章
storm_model
'inventory_operatingsystem'
www.TopSage.com
，连接OperationSystem对象到相
PDG
---
## Page 391
这实际上是我们期望发生的。现在当我们运行add脚本然后再运行retrieve脚本，那么会
当我们运行提取脚本时会发生什么。我们应该期望它显示一个记录，哪怕这个记录没有
查看所有在inventory_operatingsystem表中的相关记录，从中创建OperationSystem
象到store中，还调用store对象的find()方法。这个特别的调用find（）（例如，store.
相同的加载语句。我们有一个db对象，该对象从create_datebase()函数返回。我们有
粘贴将代码从一个文件复制到另一个文件（但是这是无关紧要的因素）。主要原因是两
录并打印输出（尽管方式非常笨拙的）：
可以使用sqlite3命令行工具。如果这样做，那么使用Storm从数据库中获得数据将无须
我们也希望看到插入的数据实际上是如何放入数据库的。由于这是一个SQLite数据库，
store对象中。最后，在store上调用commit()将operation_system添加到数据库。
数据库到它的构造器来创建一个store对象。在这之后，添加operation_system对象到
用的添加数据到数据库中的对象。事实上它不是的，至少不直接是。首先必须通过传递