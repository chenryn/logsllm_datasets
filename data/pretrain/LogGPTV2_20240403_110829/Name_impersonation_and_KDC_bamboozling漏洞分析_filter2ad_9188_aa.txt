# Name impersonation and KDC bamboozling漏洞分析
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
作者：lzz
## 0x00 漏洞背景
今年十一月Cliff Fisher
在推特披露了CVE-2021-42278和CVE-2021-42287两个关于AD域漏洞相关信息，该漏洞影响巨大，在默认情况下只需一个域用户即可拿到域内最高权限。
## 0x01 披露时间线
11月10日Cliff Fisher在推特发布了相关的漏洞信息。
12月10日Charlie Clark在博客发布漏洞原理及利用手段。
12月11日cube0x0在github发布了noPac，实现了真正的武器化。
## 0x02 漏洞概述
漏洞的产生本质是windows机器账户和kerbeors之间协调沟通所产生的逻辑问题。
###  [CVE-2021-42278](https://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2021-42278) –
[KB5008102](https://support.microsoft.com/en-us/topic/kb5008102-active-directory-security-accounts-manager-hardening-changes-cve-2021-42278-5975b463-4c95-45e1-831a-d120004e258e)
> 允许攻击者任意修改计算机帐户sAMAccountName字段，进而模拟域控申请票据。
加入域的机器账户默认由$结尾，samAccountName默认和域机器名一致。但DC没有对sAMAccountName属性进行合法性判断，`导致删除sAMAccountName结尾的$照样可以以机器用户身份申请TGT票据。`
**什么是sAMAccountName**
sAMAccountName 属性是一个登录名，用于支持以前版本的 Windows 中的客户端和服务器，例如 Windows NT 4.0、Windows
95、Windows 98 和 LAN Manager。 登录名必须少于 20 个字符，在域中的所有安全主体对象中必须唯一，并且不能包含以下任何字符：
  * “/ \ [ ] : ; | = , + * ? 
userPrincipalName是基于Internet标准RFC
822的用户样式登录名，UPN是可选并在域林中的安全主体对象名中保持唯一。在创建用户时可以指定也可不单独指定，用户格式为：[PI:EMAIL](mailto:PI:EMAIL)。
    域名：redteam.lab
    SamAccountName：marry
    NetBIOS登录名：reedteam\marry
    UserPrincipalName：PI:EMAIL
在 Active Directory中，存储帐户登录名或用户对象实际上是命名符号“Domain\LogonName
”中使用NetBIOS名称组合，该属性是域用户对象的必需属性；而SAMAccountName应始终与UPN主体名称保持一致，即SAMAccountName必须等于属性“UserPrincipalName”
的前缀部分。
**更改sAMAccountName**
漏洞凭借修改计算机帐户sAMAccountName字段来模拟域控申请票据，但直接将域内机器Evilsystem的sAMAccountName改为与域控相同(不加$)，结果显示异常。
原因如所说：
> 修改 samAccountName、DnsHostname 或 msDS-AdditionalDnsHostName 属性时SPN 列表会自动更新。
添加机器帐户默认会创建4个SPN,包括以下内容：
    1. HOST/MachineAccountName
    2. HOST/MachineAccountName.domain.name
    3. RestrictedKrbHost/MachineAccountName
    4. RestrictedKrbhost/MachineAccountName.domain.name
意味着Evilsystem
将要改成与域控相同的SPN，但是SPN是网络控制器服务实例的唯一标识符，`Kerberos身份验证使用它来将服务实例与服务登录帐户相关联，这时会产生冲突`；但servicePrincipalName在设置以上属性之前已被删除，那么SPN列表将不会更新，除非再次给该字段赋值。所以在修改samAccountName前删除其SPN属性。
**sAMAccountType属性**
sAMAccountType表示在Active Directory 中安全主体对象的帐户类型。`在LDAP查询中，常常用其筛选域机器和域用户等其他对象。`
    sAMAccountType=268435456（安全组）
    sAMAccountType=268435457（非安全组）
    sAMAccountType=536870912（别名对象）
    sAMAccountType=536870913（非安全别名对象）
    sAMAccountType=805306369（机器对象）
[**sAMAccountType**](https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-ada3/7879be50-7109-41e4-9a44-02f5a007b950)[属性可能存在的值：](https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-ada3/7879be50-7109-41e4-9a44-02f5a007b950)
Name | Value  
---|---  
SAM_DOMAIN_OBJECT | 0x0  
SAM_GROUP_OBJECT | 0x10000000  
SAM_NON_SECURITY_GROUP_OBJECT | 0x10000001  
SAM_ALIAS_OBJECT | 0x20000000  
SAM_NON_SECURITY_ALIAS_OBJECT | 0x20000001  
SAM_USER_OBJECT | 0x30000000  
SAM_MACHINE_ACCOUNT | 0x30000001  
SAM_TRUST_ACCOUNT | 0x30000002  
SAM_APP_BASIC_GROUP | 0x40000000  
SAM_APP_QUERY_GROUP | 0x40000001  
SAM_ACCOUNT_TYPE_MAX | 0x7ffffff  
     cn: SAM-Account-Type
     ldapDisplayName: sAMAccountType
     attributeId: 1.2.840.113556.1.4.302
     attributeSyntax: 2.5.5.9
     omSyntax: 2
     isSingleValued: TRUE
     schemaIdGuid: 6e7b626c-64f2-11d0-afd2-00c04fd930c9
     systemOnly: FALSE
     searchFlags: fATTINDEX
     attributeSecurityGuid: 59ba2f42-79a2-11d0-9020-00c04fc2d3cf
     isMemberOfPartialAttributeSet: TRUE
     systemFlags: FLAG_SCHEMA_BASE_OBJECT | 
      FLAG_ATTR_REQ_PARTIAL_SET_MEMBER 
     schemaFlagsEx: FLAG_ATTR_IS_CRITICAL
**UserAccountControl**
UserAccountControl包含一系列标志，这些标志定义了用户对象的一些重要基本属性，可以通过分配给该属性的值通知 Windows
每个主体启用了哪些选项。
`该属性标志是累积性的，比如要禁用用户的帐户，UserAccountControl 属性被设置为 514 (2 + 512)。`
[LEX官网对这个属性进行了整理](http://www.selfadsi.org/ads-attributes/user-userAccountControl.htm)，以下为常见类型：
UF_NORMAL_ACCOUNT ( 512 ) | 这是一个普通域用户。  
---|---  
UF_WORKSTATION_TRUST_ACCOUNT ( 4096 ) | 这是一个普通域机器。  
UF_INTERDOMAIN_TRUST_ACCOUNT ( 2048 ) | 这是一个代表与外部域的信任连接的帐户。通常，帐户名称是域的 NetBIOS
名称，末尾带有“$”。  
UF_SERVER_TRUST_ACCOUNT ( 8192 ) | 这是一个域控帐户。  
UF_DONT_EXPIRE_PASSWD (65536) | 这个用户不受有关域内密码策略相关的影响，且密码永不过期。  
UF_ENCRYPTED_TEXT_PASSWORD_ALLOWED (128) | 代表可逆加密存储用户密码 ,如果用户更改密码就能解密获得其明文密码。  
UF_ACCOUNT_DISABLE ( 2 ) | 代表帐户被禁用，并且无法再向域进行身份验证。  
也对UserAccountControl进行了详细解释。
* * *
UserAccountControl定义了用户对象的重要基本属性，微软以sAMAccountName的值是否以$结尾来区别windows域内的普通域用户和机器账户。`但UserAccountControl并没有规定计算机帐户的sAMAccountName必须以$结尾，域机器sAMAccountName去掉最后的$照样可以以机器账户的身份申请TGT票据，为后面的CVE-2021-42287触发提供了先行条件。`
###  [CVE-2021-42287](https://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2021-42287) [KB5008380](https://support.microsoft.com/en-us/topic/kb5008380-authentication-updates-cve-2021-42287-9dafac11-e0d0-4cb8-959a-143bd0201041)
> 影响 Kerberos 特权属性证书 (PAC) 并允许攻击者通过S4U2Self冒充域控申请ST的安全绕过漏洞。
微软依照是否以$结尾来区别windows域内的普通域用户和机器账户，所以按照惯例默认给机器账户加$，而kerberos认证时并不会区别对待；`为了兼容这种情况，如果kerberos认证票据时没有找到对应的域用户，会采用在用户名称后添加$进行重试认证的fallback。`
在有PAC 的情况下请求 TGT，并且为与DC具有相同的sAMAccountName(不带$)的机器帐户请求 S4U2self
票据，`当初始帐户不存在时自动进行重试认证fallback，KDC没有验证请求TGT的帐户是否与服务票证中引用的帐户相同，结果在ST中使用DC的密钥进行加密。`
在默认设置的 Active Directory 环境中可以通过一个域用户凭证拿到域内最高权限。
## 0x03 漏洞原理
微软以是否以$结尾来区别windows域内的普通域用户和机器账户，而kerberos认证时并不会区别对待；为了兼容这种情况，如果kerberos认证票据时没有找到对应的域用户，会采用在用户名称后添加$进行重试认证的fallback。
kerberos认证的CName String/SName
String从sAMAccountName提取，如果域控是DC2$，一台域机器的sAMAccountName被改为DC2。那么当域用户申请TGT后将sAMAccountName更改为其他值，进而在申请ST票据时，kerberos找不到DC2这个机器用户，于是会触发fallback变为DC2$。在S4U阶段生成了新的用于访问自身的高权限PAC，KDC没有识别高权限ST作用于哪个机器账户、PAC也没有原始请求者的信息，于是在ST中使用域控的密钥进行加密，这样就拿到了域控的ST票据，从而模拟域控上任意服务的任意用户进行访问登陆。
###  XP源码分析
这篇文章写的很清楚，有兴趣可以看看。
**KdcGetTicketInfo**
首先判断是否是krbtgt账户，如果是则直接调用GetKrbtgt函数获取TicketInfo
判断是否是本域的用户，并进行三次查找:
  * 首先直接查找传入的用户
  * 然后查找传入的 `username+$`
  * 仍未找到则查找其 altSecurityIdentities 属性的value
`这就是第一个漏洞产生的原因，sAMAccountName没有$的机器账号如果没有找到会加$进行callback重试。`
**KdcInsertAuthorizationData**
KdcInsertAuthorizationData中可以找到KDC Server获取PAC的处理逻辑:
1.如果不是S4U的请求，则直接从TGT的AuthData中提取PAC(沿用最初的PAC)。
`说明了S4U的重要性，如果没有S4U2self，将会沿用最初的PAC；最初的PAC在AS-REP阶段凭请求用户身份生成，没有权限访问域控相关服务。`
2.如果是S4U请求，首先调用KdcGetS4UTicketInfo请求获取S4UUserInfo，再调用kdcGetPacAuthData函数来构造PAC
data。
kdcGetPacAuthData：若原票据不存在PAC，则会构造一个新的PAC；若无法构造，则直接复制PAC。