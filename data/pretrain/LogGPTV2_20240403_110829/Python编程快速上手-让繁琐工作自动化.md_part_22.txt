电话号码。如果其中任意一项检查失败，函数就返回False。代码首先检查该字符串
是否刚好有12个字符。然后它检查区号（就是text中的前3个字符）是否只包含
数字。函数剩下的部分检查该字符串是否符合电话号码的模式：号码必须在区号
后出现第一个短横线，3个数字，然后是另一个短横线，最后是4个数字。
如果程序执行通过了所有的检查，它就返回True。
Python编程快速上手——让繁琐工作自动化
用参数'415-555-4242'调用isPhoneNumber()将返回真。用参数'Moshi moshi'调用
isPhoneNumber()将返回假，第一项测试失败了，因为不是12个字符。
必须添加更多代码，才能在更长的字符串中寻找这种文本模式。用下面的代码，
替代isPhoneNumber.py中最后4个print()函数调用：
message = 'Call me at 415-555-1011 tomorrow. 415-555-9999 is my office.'
for i in range(len(message)):
 chunk = message[i:i+12]
 if isPhoneNumber(chunk):
print('Phone number found: ' + chunk)
p rint('Done')
该程序运行时，输出看起来像这样：
Phone number found: 415-555-1011
Phone number found: 415-555-9999
Done
在 for 循环的每一次迭代中，取自 message 的一段新的 12 个字符被赋给变量
chunk。例如，在第一次迭代，i是0，chunk被赋值为message[0:12]（即字符串'Call
me at 4'）。在下一次迭代，i是1，chunk被赋值为message[1:13]（字符串'all me at 41'）。
将chunk传递给isPhoneNumber()，看看它是否符合电话号码的模式。如果符
合，就打印出这段文本。
继续遍历message，最终chunk中的12个字符会是一个电话号码。该循环遍历
了整个字符串，测试了每一段12个字符，打印出所有满足isPhoneNumber()的chunk。
当我们遍历完message，就打印出Done。
在这个例子中，虽然message中的字符串很短，但它也可能包含上百万个字符，
程序运行仍然不需要一秒钟。使用正则表达式查找电话号码的类似程序，运行也不
会超过一秒钟，但用正则表达式编写这类程序会快得多。
7.2 用正则表达式查找文本模式
前面的电话号码查找程序能工作，但它使用了很多代码，做的事却有限：
isPhoneNumber()函数有 17 行，但只能查找一种电话号码模式。像 415.555.4242 或
(415) 555-4242 这样的电话号码格式，该怎么办呢？如果电话号码有分机，例如
415-555-4242 x99，该怎么办呢？isPhoneNumber()函数在验证它们时会失败。你可
以添加更多的代码来处理额外的模式，但还有更简单的方法。
正则表达式，简称为 regex，是文本模式的描述方法。例如，\d 是一个正则表
达式，表示一位数字字符，即任何一位 0 到 9 的数字。Python 使用正则表达式
\d\d\d-\d\d\d-\d\d\d\d，来匹配前面isPhoneNumber()函数匹配的同样文本：3 个数字、
一个短横线、3 个数字、一个短横线、4 个数字。所有其他字符串都不能匹配
\d\d\d-\d\d\d-\d\d\d\d正则表达式。
第7章 模式匹配与正则表达式
但正则表达式可以复杂得多。例如，在一个模式后加上花括号包围的3（{3}），
就是说，“匹配这个模式3次”。所以较短的正则表达式\d{3}-\d{3}-\d{4}，也匹配正
确的电话号码格式。
7.2.1 创建正则表达式对象
Python 中所有正则表达式的函数都在 re 模块中。在交互式环境中输入以下代
码，导入该模块：
>>> import re
注意 本章后面的大多数例子都需要re模块，所以要记得在你写的每个脚本开始处导入
它，或重新启动IDLE时。否则，就会遇到错误消息NameError: name 're' is not defined。
向re.compile()传入一个字符串值，表示正则表达式，它将返回一个Regex模式
对象（或者就简称为Regex对象）。
要创建一个Regex对象来匹配电话号码模式，就在交互式环境中输入以下代码
（回忆一下，\d 表示“一个数字字符”，\d\d\d-\d\d\d-\d\d\d\d 是正确电话号码模式的
正则表达式）。
>>> phoneNumRegex = re.compile(r'\d\d\d-\d\d\d-\d\d\d\d')
现在phoneNumRegex变量包含了一个Regex对象。
7.2.2 匹配Regex对象
Regex对象的search()方法查找传入的字符串，寻找该正则表达式的所有匹配。如
果字符串中没有找到该正则表达式模式，search()方法将返回None。如果找到了该模式，
search()方法将返回一个Match对象。Match对象有一个group()方法，它返回被查找字
符串中实际匹配的文本（稍后我会解释分组）。例如，在交互式环境中输入以下代码：
>>> phoneNumRegex = re.compile(r'\d\d\d-\d\d\d-\d\d\d\d')
>>> mo = phoneNumRegex.search('My number is 415-555-4242.')
>>> print('Phone number found: ' + mo.group())
Phone number found: 415-555-4242
变量名mo是一个通用的名称，用于Match对象。这个例子可能初看起来有点
复杂，但它比前面的isPhoneNumber.py程序要短很多，并且做的事情一样。
这里，我们将期待的模式传递给 re.compile()，并将得到的 Regex 对象保存在
phoneNumRegex中。然后我们在phoneNumRegex上调用search()，向它传入想查找
的字符串。查找的结果保存在变量 mo 中。在这个例子里，我们知道模式会在这个
字符串中找到，所以我们知道会返回一个Match对象。知道mo包含一个Match对
象，而不是空值 None，我们就可以在 mo 变量上调用 group()，返回匹配的结果。
将mo.group()写在打印语句中，显示出完整的匹配，即415-555-4242。
Python编程快速上手——让繁琐工作自动化
向re.compile()传递原始字符串
回忆一下，Python中转义字符使用倒斜杠（\）。字符串'\n'表示一个换行字符，
而不是倒斜杠加上一个小写的n。你需要输入转义字符\\，才能打印出一个倒斜杠。
所以'\\n'表示一个倒斜杠加上一个小写的n。但是，通过在字符串的第一个引号之
前加上r，可以将该字符串标记为原始字符串，它不包括转义字符。
因为正则表达式常常使用倒斜杠，向re.compile()函数传入原始字符串就很方
便，而不是输入额外得到斜杠。输入 r'\d\d\d-\d\d\d-\d\d\d\d'，比输入
'\\d\\d\\d-\\d\\d\\d-\\d\\d\\d\\d'要容易得多。
7.2.3 正则表达式匹配复习
虽然在Python中使用正则表达式有几个步骤，但每一步都相当简单。
1．用import re导入正则表达式模块。
2．用re.compile()函数创建一个Regex对象（记得使用原始字符串）。
3．向Regex对象的search()方法传入想查找的字符串。它返回一个Match对象。
4．调用Match对象的group()方法，返回实际匹配文本的字符串。
注意 虽然我鼓励你在交互式环境中输入示例代码,但你也应该利用基于网页的正
则表达式测试程序。它可以向你清楚地展示，一个正则表达式如何匹配输入的
一段文本。我推荐的测试程序位于http://regexpal.com/。
7.3 用正则表达式匹配更多模式
既然你已知道用Python创建和查找正则表达式对象的基本步骤，就可以尝试一
些更强大的模式匹配功能了。
7.3.1 利用括号分组
假定想要将区号从电话号码中分离。添加括号将在正则表达式中创建“分组”：
(\d\d\d)-(\d\d\d-\d\d\d\d)。然后可以使用group()匹配对象方法，从一个分组中获取匹
配的文本。
正则表达式字符串中的第一对括号是第1组。第二对括号是第2组。向group()
匹配对象方法传入整数1或2，就可以取得匹配文本的不同部分。向group()方法传
入 0或不传入参数，将返回整个匹配的文本。在交互式环境中输入以下代码：
>>> phoneNumRegex = re.compile(r'(\d\d\d)-(\d\d\d-\d\d\d\d)')
>>> mo = phoneNumRegex.search('My number is 415-555-4242.')
>>> mo.group(1)
'415'
第7章 模式匹配与正则表达式
>>> mo.group(2)
'555-4242'
>>> mo.group(0)
'415-555-4242'
>>> mo.group()
'415-555-4242'
如果想要一次就获取所有的分组，请使用groups()方法，注意函数名的复数形式。
>>> mo.groups()
('415', '555-4242')
>>> areaCode, mainNumber = mo.groups()
>>> print(areaCode)
415
>>> print(mainNumber)
555-4242
因为mo.groups()返回多个值的元组，所以你可以使用多重复制的技巧，每个值
赋给一个独立的变量，就像前面的代码行：areaCode, mainNumber = mo.groups()。
括号在正则表达式中有特殊的含义，但是如果你需要在文本中匹配括号，怎么
办？例如，你要匹配的电话号码，可能将区号放在一对括号中。在这种情况下，就
需要用倒斜杠对(和)进行字符转义。在交互式环境中输入以下代码：
>>> phoneNumRegex = re.compile(r'(\(\d\d\d\)) (\d\d\d-\d\d\d\d)')
>>> mo = phoneNumRegex.search('My phone number is (415) 555-4242.')
>>> mo.group(1)
'(415)'
>>> mo.group(2)
'555-4242'
传递给re.compile()的原始字符串中，\(和\)转义字符将匹配实际的括号字符。
7.3.2 用管道匹配多个分组
字符|称为“管道”。希望匹配许多表达式中的一个时，就可以使用它。例如，
正则表达式r'Batman|Tina Fey'将匹配'Batman'或'Tina Fey'。
如果Batman和Tina Fey都出现在被查找的字符串中，第一次出现的匹配文本，
将作为Match对象返回。在交互式环境中输入以下代码：
>>> heroRegex = re.compile (r'Batman|Tina Fey')
>>> mo1 = heroRegex.search('Batman and Tina Fey.')
>>> mo1.group()
'Batman'
>>> mo2 = heroRegex.search('Tina Fey and Batman.')
>>> mo2.group()
'Tina Fey'
注意 利用findall()方法，可以找到“所有”匹配的地方。这在7.5节“findall()方法”
中讨论。
也可以使用管道来匹配多个模式中的一个，作为正则表达式的一部分。例如，
Python编程快速上手——让繁琐工作自动化
假设你希望匹配'Batman'、'Batmobile'、'Batcopter'和'Batbat'中任意一个。因为所有这
些字符串都以Bat开始，所以如果能够只指定一次前缀，就很方便。这可以通过括
号实现。在交互式环境中输入以下代码：
>>> batRegex = re.compile(r'Bat(man|mobile|copter|bat)')
>>> mo = batRegex.search('Batmobile lost a wheel')
>>> mo.group()
'Batmobile'
>>> mo.group(1)
'mobile'
方法调用 mo.group()返回了完全匹配的文本'Batmobile'，而 mo.group(1)只是返
回第一个括号分组内匹配的文本'mobile'。通过使用管道字符和分组括号，可以指定
几种可选的模式，让正则表达式去匹配。
如果需要匹配真正的管道字符，就用倒斜杠转义，即\|。
7.3.3 用问号实现可选匹配
有时候，想匹配的模式是可选的。就是说，不论这段文本在不在，正则表达式
都会认为匹配。字符?表明它前面的分组在这个模式中是可选的。例如，在交互式
环境中输入以下代码：
>>> batRegex = re.compile(r'Bat(wo)?man')
>>> mo1 = batRegex.search('The Adventures of Batman')
>>> mo1.group()
'Batman'
>>> mo2 = batRegex.search('The Adventures of Batwoman')
>>> mo2.group()
'Batwoman'
正则表达式中的(wo)?部分表明，模式wo是可选的分组。该正则表达式匹配的文本
中，wo将出现零次或一次。这就是为什幺正则表达式既匹配'Batwoman'，又匹配'Batman'。
利用前面电话号码的例子，你可以让正则表达式寻找包含区号或不包含区号的
电话号码。在交互式环境中输入以下代码：
>>> phoneRegex = re.compile(r'(\d\d\d-)?\d\d\d-\d\d\d\d')
>>> mo1 = phoneRegex.search('My number is 415-555-4242')
>>> mo1.group()
'415-555-4242'
>>> mo2 = phoneRegex.search('My number is 555-4242')
>>> mo2.group()
'555-4242'
你可以认为?是在说，“匹配这个问号之前的分组零次或一次”。
如果需要匹配真正的问号字符，就使用转义字符\?。
7.3.4 用星号匹配零次或多次
*（称为星号）意味着“匹配零次或多次”，即星号之前的分组，可以在文本中出
第7章 模式匹配与正则表达式
现任意次。它可以完全不存在，或一次又一次地重复。让我们再来看看Batman的例子。
>>> batRegex = re.compile(r'Bat(wo)*man')
>>> mo1 = batRegex.search('The Adventures of Batman')
>>> mo1.group()
'Batman'
>>> mo2 = batRegex.search('The Adventures of Batwoman')
>>> mo2.group()
'Batwoman'
>>> mo3 = batRegex.search('The Adventures of Batwowowowoman')
>>> mo3.group()
'Batwowowowoman'
对于'Batman'，正则表达式的(wo)*部分匹配wo的零个实例。对于'Batwoman'，
(wo)*匹配wo的一个实例。对于'Batwowowowoman'，(wo)*匹配wo的4个实例。
如果需要匹配真正的星号字符，就在正则表达式的星号字符前加上倒斜杠，即\*。
7.3.5 用加号匹配一次或多次
*意味着“匹配零次或多次”，+（加号）则意味着“匹配一次或多次”。星号不要求
分组出现在匹配的字符串中，但加号不同，加号前面的分组必须“至少出现一次”。这不
是可选的。在交互式环境中输入以下代码，把它和前一节的星号正则表达式进行比较：
>>> batRegex = re.compile(r'Bat(wo)+man')
>>> mo1 = batRegex.search('The Adventures of Batwoman')