print getmembers(A)
print getmembers(B)
print getmembers(IOError)
['_ _doc_ _', '_ _module_ _', 'a', 'b']
['_ _doc_ _', '_ _module_ _', 'a', 'b', 'c', 'd']
['_ _doc_ _', '_ _getitem_ _', '_ _init_ _', '_ _module_ _', '_ _str_
_']
getmembers 函数返回了一个有序列表. 成员在列表中名称出现的越早, 它所处
的类层次就越高. 如果无所谓顺序的话, 你可以使用字典代替列表.
[!Feather 注: 字典是无序的, 而列表和元组是有序的, 网上有关于有序字典
的讨论]
vars 函数与此相似, 它返回的是包含每个成员当前值的字典. 如果你使用不带
参数的 vars , 它将返回当前局部名称空间的可见元素(同 locals() 函数 ).
如 Example 1-11 所表示.
1.2.3.3. Example 1-11. 使用 vars 函数
File: builtin-vars-example-1.py
book = "library2"
pages = 250
scripts = 350
print "the %(book)s book contains more than %(scripts)s scripts" % vars()
the library book contains more than 350 scripts
1.2.4. 检查对象类型
Python 是一种动态类型语言, 这意味着给一个定变量名可以在不同的场合绑定
到不同的类型上. 在接下面例子中, 同样的函数分别被整数, 浮点数, 以及一
个字符串调用:
def function(value):
print value
function(1)
function(1.0)
function("one")
type 函数 (如 Example 1-12 所示) 允许你检查一个变量的类型. 这个函数会
返回一个 type descriptor (类型描述符) , 它对于 Python 解释器提供的每个
类型都是不同的.
1.2.4.1. Example 1-12. 使用 type 函数
File: builtin-type-example-1.py
def dump(value):
print type(value), value
dump(1)
dump(1.0)
dump("one")
 1
 1.0
 one
每个类型都有一个对应的类型对象, 所以你可以使用 is 操作符 (对象身份?)
来检查类型. (如 Example 1-13 所示).
1.2.4.2. Example 1-13. 对文件名和文件对象使用 type 函数
File: builtin-type-example-2.py
def load(file):
if isinstance(file, type("")):
file = open(file, "rb")
return file.read()
print len(load("samples/sample.jpg")), "bytes"
print len(load(open("samples/sample.jpg", "rb"))), "bytes"
4672 bytes
4672 bytes
callable 函数, 如 Example 1-14 所示, 可以检查一个对象是否是可调用的
(无论是直接调用或是通过 apply ). 对于函数, 方法, lambda 函式, 类, 以及
实现了 _ _call_ _ 方法的类实例, 它都返回 True.
1.2.4.3. Example 1-14. 使用 callable 函数
File: builtin-callable-example-1.py
def dump(function):
if callable(function):
print function, "is callable"
else:
print function, "is *not* callable"
class A:
def method(self, value):
return value
class B(A):
def _ _call_ _(self, value):
return value
a = A()
b = B()
dump(0) # simple objects
dump("string")
dump(callable)
dump(dump) # function
dump(A) # classes
dump(B)
dump(B.method)
dump(a) # instances
dump(b)
dump(b.method)
0 is *not* callable
string is *not* callable
 is callable
 is callable
A is callable
B is callable
 is callable
 is *not* callable
 is callable
 is callable
注意类对象 (A 和 B) 都是可调用的; 如果调用它们, 就产生新的对象(类实
例). 但是 A 类的实例不可调用, 因为它的类没有实现 _ _call_ _ 方法.
你可以在 operator 模块中找到检查对象是否为某一内建类型(数字, 序列, 或
者字典等) 的函数. 但是, 因为创建一个类很简单(比如实现基本序列方法的
类), 所以对这些类型使用显式的类型判断并不是好主意.
在处理类和实例的时候会复杂些. Python 不会把类作为本质上的类型对待; 相
反地, 所有的类都属于一个特殊的类类型(special class type), 所有的类实例
属于一个特殊的实例类型(special instance type).
这意味着你不能使用 type 函数来测试一个实例是否属于一个给定的类; 所有
的实例都是同样的类型! 为了解决这个问题, 你可以使用 isinstance 函数,它
会检查一个对象是不是给定类(或其子类)的实例. Example 1-15 展示了
isinstance 函数的使用.
1.2.4.4. Example 1-15. 使用 isinstance 函数
File: builtin-isinstance-example-1.py
class A:
pass
class B:
pass
class C(A):
pass
class D(A, B):
pass
def dump(object):
print object, "=>",
if isinstance(object, A):
print "A",
if isinstance(object, B):
print "B",
if isinstance(object, C):
print "C",
if isinstance(object, D):
print "D",
print
a = A()
b =
B() c=
C()
d =
D()
dump(a) dump(b)
dump(c)
dump(d)
dump(0)
dump("string") 
 => A
 => B
 =
> A C
 = >
A B D 0 = >
string =
>
issubclass 函数与此相似, 它用于检查一个类对象是否与给定类相同, 或者是
给定类的子类. 如 Example 1-16 所示.
注意, isinstance 可以接受任何对象作为参数, 而 issubclass 函数在接受非
类对象参数时会引发 TypeError 异常.
1.2.4.5. Example 1-16. 使用 issubclass 函数
File: builtin-issubclass-example-1.py
class A:
pass
class B:
pass
class C(A):
pass
class D(A, B):
pass
def dump(object):
print object, "=>",
if issubclass(object, A):
print "A",
if issubclass(object, B):
print "B",
if issubclass(object, C):
print "C",
if issubclass(object, D):
print "D",
print
dump(A)
dump(B)
dump(C)
dump(D)
dump(0)
dump("string")
A => A
B => B
C => A C
D = >
A B D
0 =
>
Traceback (innermost last):
File "builtin-issubclass-example-1.py", line 29, in ?
File "builtin-issubclass-example-1.py", line 15, in dump
TypeError: arguments must be classes
1.2.5. 计算 Python 表达式
Python 提供了在程序中与解释器交互的多种方法. 例如 eval 函数将一个字符
串作为 Python 表达式求值. 你可以传递一串文本, 简单的表达式, 或者使用
内建 Python 函数. 如 Example 1-17 所示.
1.2.5.1. Example 1-17. 使用 eval 函数
File: builtin-eval-example-1.py
def dump(expression):
result = eval(expression)
print expression, "=>", result, type(result)
dump("1")
dump("1.0")
dump("'string'")
dump("1.0 + 2.0")
dump("'*' * 10")
dump("len('world')")
1 => 1 
1.0 => 1.0 
'string' = > string
 1.0 +
2.0 = >
3.0  '*' * 10=
> **********  len('world')=
> 5 
如果你不确定字符串来源的安全性, 那么你在使用 eval 的时候会遇到些麻烦.
例如, 某个用户可能会使用 _ _import_ _ 函数加载 os 模块, 然后从硬盘删除
文件 (如 Example 1-18 所示).
1.2.5.2. Example 1-18. 使用 eval 函数执行任意命令
File: builtin-eval-example-2.py
print eval("_ _import_ _('os').getcwd()")
print eval("_ _import_ _('os').remove('file')")
/home/fredrik/librarybook Traceback (innermost
last): File "builtin-eval-example-2", line 2, in
? File"", line 0, in ?
os.error: (2, 'No such file or directory')
这里我们得到了一个 os.error 异常, 这说明 Python 事实上在尝试删除文件!
幸运地是, 这个问题很容易解决. 你可以给 eval 函数传递第 2 个参数, 一个
定义了该表达式求值时名称空间的字典. 我们测试下, 给函数传递个空字典:
>>> print eval("_ _import_
_('os').remove('file')", {}) Traceback
(innermost last):File "", line 1, in
? File"", line 0, in ?
os.error: (2, 'No such file or directory')
呃.... 我们还是得到了个 os.error 异常.
这是因为 Python 在求值前会检查这个字典, 如果没有发现名称为 _
_builtins_ _ 的变量(复数形式), 它就会添加一个:
>>> namespace = {} >>>
print eval("_ _import_ _('os').remove('file')", namespace)
Traceback (innermost last):
File "",line 1, in ? File
"", line0, in ? os.error: (2,
'No such file or directory') >>> namespace.keys()
['_
_builtins_ _'] 
如果你打印这个 namespace 的内容, 你会发现里边有所有的内建函数.
[!Feather 注: 如果我RP不错的话, 添加的这个_ _builtins_ _就是当前的_
_builtins_ _]
我们注意到了如果这个变量存在, Python 就不会去添加默认的, 那么我们的解
决方法也来了, 为传递的字典参数加入一个 _ _builtins_ _ 项即可. 如
Example 1-19 所示.
1.2.5.3. Example 1-19. 安全地使用 eval 函数求值
File: builtin-eval-example-3.py
print eval("_ _import_ _('os').getcwd()", {})
print eval("_ _import_ _('os').remove('file')", {"_ _builtins_ _": {}})
/home/fredrik/librarybook Traceback (innermost
last): File "builtin-eval-example-3.py", line 2, in
? File"", line 0, in ?
NameError: _ _import_ _
即使这样, 你仍然无法避免针对 CPU 和内存资源的攻击. (比如, 形如
eval("'*'*1000000*2*2*2*2*2*2*2*2*2") 的语句在执行后会使你的程序耗尽
系统资源).
1.2.6. 编译和执行代码
eval 函数只针对简单的表达式. 如果要处理大块的代码, 你应该使用 compile
和 exec 函数 (如 Example 1-20 所示).
1.2.6.1. Example 1-20. 使用 compile 函数检查语法
File: builtin-compile-example-1.py
NAME = "script.py"
BODY =
""" prnt
'owl-stretching time' """
try:
compile(BODY,
NAME, "exec") except
SyntaxError, v: print
"syntax error:", v, "in", NAME #
syntax error: invalid syntax in script.py
成功执行后, compile 函数会返回一个代码对象, 你可以使用 exec 语句执行
它, 参见 Example 1-21 .
1.2.6.2. Example 1-21. 执行已编译的代码
File: builtin-compile-example-2.py
BODY = """
print 'the ant, an introduction'
"""
code = compile(BODY,"", "exec")
print code
exec code
", line 0>
the ant, an introduction
使用 Example 1-22 中的类可以在程序执行时实时地生成代码. write 方法用于
添加代码, indent 和 dedent 方法用于控制缩进结构. 其他部分交给类来处
理.
1.2.6.3. Example 1-22. 简单的代码生成工具
File: builtin-compile-example-3.py
import sys, string
class CodeGeneratorBackend:
"Simple code generator for Python"
def begin(self, tab="\t"):
self.code = []
self.tab = tab
self.level = 0
def end(self):
self.code.append("") # make sure there's a newline at the end
return compile(string.join(self.code, "\n"), "", "exec")
def write(self, string):
self.code.append(self.tab * self.level + string)
def indent(self):
self.level = self.level +
1 # in
2.0 and
later, this can be written
as: self.level +=
1 def
dedent(self): if
self.level =
=
0:
raise SyntaxError, "internal error in
code generator"
self.level =
self.level- 1
# or:
self.level - =
1