和1匹配上了，最后一个〇一定是第一类字符。如果在len(bit）的位置（超出数组下标）停
len（bits）－1 的地方（数组最后一个元素）停下，那么对应的是情况一或者情况二，前面的〇都
组，如果遇到"1"，就跳 2 步，因为1 后面出现什么数字(0 或者1)并不需要关心。如果 能在
最后一个元素，数组中前面所有的1都"结对子"。所以利用第二类字符的特征，"1X"，遍历整个数
但是〇和1配对形成了第二类字符。第二种情况，前面没有出现0。这两种情况的共同点是除去
出自第二类字符。最后一个0当前仅当为第一类字符的情况有2种，第一种情况，前面出现有0
if bits[i] == l {
1++
，数组里面的元素只有0和1，并且数组的最后一个元素一定是0。有 2种特殊的字
---
## Page 697
代码
解题思路
给两个整数数组A和B，返回两个数组中公共的、长度最长的子数组的长度。
题目大意
Note:
Example 1: 
both arrays.
Given two integer arrays A and B, return the maximum length of an subarray that appears in 
·给出两个数组，求这两个数组中最长相同子串的长度。
2. 0 = length-1 {
h = h*primeRK + v 
}else{ 
if hasRepeated(A, B, mid) {
mid := (low + high + 1) >> 
return false
 low = mid 
h -= pl * arr[i-length+1]
hash[i-length+l] = h 
high = mid - 1
了
---
## Page 699
Example 1: 
pair (A, B) is defined as the absolute difference between A and B.
Given an integer array, return the k-th smallest distance among all the pairs. The distance of a 
题目
719. Find K-th Smallest Pair Distance
func findLengthi(A []int, B []int) int {
//解法二 DP动态规划
return res
for i := len(A) - l; i >= O; i-- {
for i := range dp { 
res, dp := O， make([][]int, len(A)+l)
return false
for i, h := range hashslice(B, length) {
 dp[i] = make([]int,len(B)+l)
 if offsets, ok := hashTooffset[h]; ok {
if A[i] == B[j] {
for 
if dp[i][j]>res{
 dp[i][j] = dp[i+l][j+l] + 1
if hassamePrefix(A[offset:], B[i:], length) {
res = dp[i][j]
return true 
---
## Page 700
代码
解题思路
提示：
对差值。
给定一个整数数组，返回所有数对之间的第k个最小距离。一对 (A,B)的距离被定义为 A 和 B 之间的绝
题目大意
Note:
package leetcode 
·给出一个数组，要求找出第k小两两元素之差的值。两两元素之差可能重复，
2. 0 
(1,1) ->
(1,3) ->
Here are all the pairs:
Explanation:
output: 0 
k=1 
nums = [1,3,1]
Input:
这一题可以用二分搜索来解答。先把原数组排序，那么最大的差值就是 nums[1en(nums)-1]-
. 1  num && i>1
if nums[j]-nums[i]  len(res) {
 res = word 
---
## Page 704
解题思路
注意：
素是按顺序排列的邮箱地址。accounts 本身可以以任意顺序返回。
有帐户都具有相同的名称。合并帐户后，按以下格式返回帐户：每个帐户的第一个元素是名称，其余元
们也可能属于不同的人，因为人们可能具有相同的名称。
都有一些共同的邮件地址，则两个帐户必定属于同一个人。请注意，即使两个帐户具有相同的名称，它
名称(name)，其余元素是 emails 表示该帐户的邮箱地址。现在，我们想合并这些帐户。如果两个帐户
给定一个列表 accounts，每个元素 accounts[i] 是一个字符串列表，其中第一个元素 accounts[ij[o] 是
题目大意
Note:
·给出一堆账户和对应的邮箱。要求合并同一个人的多个邮箱账户。如果判断是同一个人呢？如果这
·accounts 的长度将在[1，100o] 的范围内。
● The length of accounts[i][j] will be in the range [1, 30] .
● The length of accounts will be in the range [1, 1000].
would still be accepted.
['john','PI:EMAIL',
we could return these lists in any order, for example the answer [['Mary',
are used by other accounts.
"PI:EMAIL".
The first and third John's are the same person as they have the common email
Explanation: 
"PI:EMAIL"]]
'PI:EMAIL'], ["john", "PI:EMAIL"], ["Mary""
Output: [["john", 
"PI:EMAIL"], ["Mary",
"PI:EMAIL"], ["john", 
accounts = [["john", "PI:EMAIL", "PI:EMAIL"], ["john",
'PI:EMAIL'], ['john',
Input:
这一题有2处比较"坑"的是，不需要合并的用户的邮箱列表也是需要排序和去重的，同一个人的所
这题的解题思路是并查集。不过如果用暴力合并的方法，时间复杂度非常差。优化方法是先把每组
accounts[i]j] 的长度将在[1，30] 的范围内。
有邮箱集合都要合并到一起。具体见测试用例。不过题目中也提到了这些点，也不能算题目坑，只
集的union（）操作，把这些编号都进行合并。最后把人的编号和对应邮箱的编号拼接起来。
数据都进行编号，人编号，每个邮箱都进行编号。这个映射关系用 map 记录起来。如果利用并查
个人名和所属的其中之一的邮箱是相同的，就判定这是同一个人的邮箱，那么就合并这些邮箱。
 accounts[ij] 的长度将在[1，10] 的范围内。
The length of accounts [i] will be in the range [1, 10] .
'PI:EMAIL',
'PI:EMAIL'］,
'PI:EMAIL', 
"PI:EMAIL",
"PI:EMAIL"]]
'PI:EMAIL',
。一个人最初可以拥有任意数量的帐户，但其所
'PI:EMAIL']]
---
## Page 705
代码
//解法二并查集暴力解法
make(map[int]string), make(map[int][]string), [][]string{} 
func accountsMergel(accounts [][]string) [][]string {
func accountsMerge(accounts [][]string) (r [][]string) 
//解法一并查集优化搜索解法
import （
package leetcode
if len(accounts) == O { 
for id, emails := range idToEmails {
for email, id := range emailToID {
for id, acc := range accounts { 
//idToEmails 将id(数组下标）与整理好去重以后的email 组对应 
//emailToID 将所有的emai］ 邮箱都拆开，拆开与id(数组下标）对应
uf := template.UnionFind{}
"github.com/halfrost/LeetCode-Go/template"
"sort"
3
return res 
emailToID, idToName, idToEmails, res := make(map[string]int)
//idToName 将id(数组下标）与name对应
uf.Init(len(accounts)) 
能归自己没注意这些边界情况。
 return [][]string{}
res = append(res, append([]string[name}, emails...))
name 
idToEmails[pid] = append(idToEmails[pid], email)
pid := uf.Find(id) 
for i := l; i 2->3->4, k= 5 // 5 equal parts [[1],[2],[3],[4], null ] 
 Return a List of ListNode's representing the linked list parts that are formed.
  s a   a ai e  s
The parts should be in order of occurrence in the input list, and parts occurring earlier should
by more than 1. This may lead to some parts being null.
The length of each part should be as equal as possible: no two parts should have a size differing 
consecutive linked list "parts".
Given a (singly) linked list with head node root, write a function to split the linked list into k
题目