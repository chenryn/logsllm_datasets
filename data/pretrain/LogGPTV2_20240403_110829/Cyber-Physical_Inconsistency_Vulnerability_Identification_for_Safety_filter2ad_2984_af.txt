cided. If it is detected, the position controller turns off the thrust
setpoint in body x and y (preventing movement that is not vertical)
Figure 19a shows that the check correctly detects the case. Specif-
ically, the vehicle performs a planned (triangular trajectory) mission
and contacts the ground during the flight (the left). The check de-
tects it and lets the controller stop moving along x and y directions
to avoid additional physical damage (the middle). In the trajectory
view (the right), the vehicle stops on the trajectory safely. The
complete simulation video is available at [33].
Figure 19b shows the CP-inconsistency case, where the vehicle
hits the ground, but the check fails to detect it. The vehicle performs
the same waypoint mission. This is exploited by a wind gust with
direction  for 1.4 seconds and force 31N. The
vehicle hits the ground and then completely deviates from the
planed trajectory, while it is supposed to detect the ground contact
event and the position controller holds its horizontal position. The
instant impact of the hit causes a vertical bounce of the vehicle,
which causes the z velocity to exceed a threshold and hence fails
the detection. The video is available at [34].
(a) True positive case (ground contact and safe holding)
(b) False negative case (ground contact and fly away)
Figure 19: Ground contact detection cases (simulation snapshot)
B Discussion
Countermeasures. The root cause of Cyber-Physical inconsisten-
cies is the incapability of range checks implemented in general-
purpose programming languages in describing the physical world,
which is continuous and complex. We foresee that a continuous
model of the RV expected behavior, like our VRV, shall be a first-
order object in the RV runtime that can be queried and compared
during safety checks. As such, the runtime system with the pro-
posed solution replaces the incomplete range checks to improve
the robustness of future RV systems. This requires enhancing the
programming support and the runtime support of RV control soft-
ware.
External Attacks. The attacker exploits CP-inconsistency vulner-
abilities by only manipulating external physical conditions. Our
attack vector is realistic and aligned with recently reported CPS
attacks on various sensors such as gyroscope, accelerometer, op-
tical flow, wheel speed sensor [13, 24, 48, 51, 56, 71, 77, 79]. These
can create adversarial conditions artificially through special de-
vices and setup. In this paper, we demonstrate the feasibility of
leveraging small-scale devices (such as wind blowers and weighted
boxes) to realistically exploit the reported cp-inconsistencies. Note
that more sophisticated devices (e.g., large-scale gust generator and
long-range sonic weapons) can be leveraged to generate realistic
adversarial conditions. For the cases where we used obstacles, the
scenarios are more reasonable if the vehicles are running in an
urban area. An attacker can carefully place physical obstacles (e.g.,
cars) in an RV’s trajectory to trigger potential vulnerabilities.
False Negative/Positives. The search space is enormous due to
the inter-play of various conditions. Since exploring the search
space requires simulation, much more expensive than running a
program (like in fuzzing), it is very difficult to establish the ground-
truth (and measure FNs). Besides, due to the nature of the genetic
algorithm, it is hard to guarantee that we can find all the potentially
existing vulnerable cases (i.e., no false negative). Regarding false-
positives, our technique is based on high-fidelity simulation. A
vulnerability is only reported after it is confirmed. Hence, we don’t
have false-positives.
On trajectoryUneven groundGround contactdetectedPosition HoldGroundcontactbut no detection Bounce and Fly awayDeviationSession 1E: Cyberphysical Systems CCS '20, November 9–13, 2020, Virtual Event, USA277Table 5: Comparing search techniques
# (Goal)
Cost
Functions
Evolutionary
Cost Change
V1 (C↓ P↑)
V2 (C↓ P↑)
V3 (C↑ P↓)
V4 (C↑ P↓)
V5 (C↑ P↓)
V6 (C↑ P↓)
V7 (C↓ P↑)
V8 (C↑ P↓)
V9 (C↓ P↑)
V10 (C↓ P↑)
B
0.27
23.04
0
0.98
0.69
0.23
30.3
0
0.87
0.5
-0.2
-5.5
-499
0.08
-0.08
202.63
0.02
0.67
28.3
-400
0.1
0.6
5.2
-8.3
0
-400
0.25
-0.44
-2.0
7.0
-4.8
0.07
-0.82
12.5
4.8
-0.28
0.92
0.41
0.349
0.349
0.349
-49.2
-8
0.08
0.22
-38
0.04
0.06
45.0
0
0.81
-0.82
-42
0.05
0.08
45.0
0
0.8
-1.13
A
0.07
17.46
-708
1.53
1.62
0.16
27.3
-687
1.04
1.0
0.23
0.2
0
0.06
0.16
213.6
0.03
0.68
29.1
0
0.08
0.85
5.3
1.5
-2.3
0
0.23
-0.14
-2.0
7.0
4.9
0.08
-0.19
8.3
0.1
0.02
0.93
0.69
0.348
0.351
0.349
0.01
0
0.13
0.47
-39.9
-2.14
-1.58
45.0
-8
0.79
-0.5
-42
0.02
0.07
45.0
-20
0.76
-0.87
D
-0.2 (↓)
-5.58 (↓)
-708 (↓)
0.55 (↑)
0.93
-0.07 (↓)
-3 (↓)
-687 (↓)
0.17 (↑)
0.49
0.43 (↑)
5.7 (↑)
499 (↑)
-0.02 (↓)
0.25
10.97 (↑)
0.01 (↑)
0.01 (↑)
0.8 (↑)
400 (↑)
-0.02 (↓)
0.25
0.1 (↑)
9.8 (↑)
-2.3 (↓)
400 (↑)
-0.02 (↓)
0.29
0 (-)
0 (-)
9.7 (↑)
0.01 (↑)
0.63
-4.2 (↓)
-4.7 (↓)
0.3 (↑)
0.01 (↑)
0.27
-0.001 (↓)
0.002 (↑)
0 (-)
49.21 (↑)
8 (↑)
0.05 (↑)
0.25
-1.9 (↓)
-2.18 (↓)
-1.64 (↓)
0 (-)
-8 (↓)
-0.02 (↓)
0.32
0 (-)
-0.03 (↓)
-0.01 (↓)
0 (-)
-20 (↓)
-0.04 (↓)
0.26
C1
C2
C3
P
IL
C1
C2
C3
P
IL
C1
C2
C3
P
IL
C1
C2
C3
C4
C5
P
IL
C1
C2
C3
C4
P
IL
C1
C2
C3
P
IL
C1
C2
C3
P
IL
C1
C2
C3
C4
C5
P
IL
C1
C2
C3
C4
C5
P
IL
C1
C2
C3
C4
C5
P
IL
Time
(hr)
S/F
2.3
1.8
3.3
S
S
S
2.7
S
3.1
S
2.9
4.6
S
S
2.7
S
1.6
S
2.5
S
Gradient Descent
Cost Change
B
0.27
23.03
0
0.97
0.68
0.24
30.3
0
0.87
0.5
-0.2
-5.4
-499
0.07
-0.06
202.6
0.02
0.67
28.3
-400
0.1
0.6
5.2
-8.3
0
-400
0.25
-0.44
-2
7.0
-4.8
0.07
-0.82
12.5
4.8
-0.28