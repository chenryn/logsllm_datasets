title:Efficient and Robust TCP Stream Normalization
author:Mythili Vutukuru and
Hari Balakrishnan and
Vern Paxson
2008 IEEE Symposium on Security and Privacy
Ef(cid:2)cient and Robust TCP Stream Normalization
Mythili Vutukuru and Hari Balakrishnan
MIT CSAIL
fmythili,PI:EMAIL
Vern Paxson
ICSI & UC Berkeley
PI:EMAIL
Abstract
Network intrusion detection and prevention systems are
vulnerable to evasion by attackers who craft ambiguous
traf(cid:2)c to breach the defense of such systems. A normalizer
is an inline network element that thwarts evasion attempts
by removing ambiguities in network traf(cid:2)c. A particularly
challenging step in normalization is the sound detection
of inconsistent TCP retransmissions, wherein an attacker
sends TCP segments with different payloads for the same
sequence number space to present a network monitor with
ambiguous analysis. Normalizers that buffer all unacknowl-
edged data to verify the consistency of subsequent retrans-
missions consume inordinate amounts of memory on high-
speed links. On the other hand, normalizers that buffer only
the hashes of unacknowledged segments cannot verify the
consistency of 20(cid:150)30% of retransmissions that, according
to our traces, do not align with the original transmissions.
This paper presents the design of RoboNorm, a normalizer
that buffers only the hashes of unacknowledged segments,
and yet can detect all inconsistent retransmissions in any
TCP byte stream. RoboNorm consumes 1(cid:150)2 orders of mag-
nitude less memory than normalizers that buffers all unac-
knowledged data, and is amenable to a high-speed imple-
mentation. RoboNorm is also robust to attacks that attempt
to compromise its operation or exhaust its resources.
1. Introduction
Network intrusion detection and prevention systems
(IDS/IPS) are now widely used to improve the security
of networks run by providers, enterprises, and even home
users. Such monitors usually operate on the path between
the protected network and the rest of the Internet, observ-
ing all traf(cid:2)c coming in and out of the network and (cid:3)ag-
ging (IDS) or blocking (IPS) activity deemed likely mali-
cious. While historically some of these systems operated
in a stateless, per-packet fashion [1], modern systems em-
ploy detailed protocol parsing in order to analyze the traf-
(cid:2)c at higher semantic levels [2] and require in-order re-
Sender
junk
seq=4, TTL=5
X
loit
seq=4,TTL=25
Receiver
expjunk?
exploit?
exp
seq=1
Monitor
Figure 1. Evading a network monitor using in-
consistent TCP retransmissions.
construction of TCP byte streams as the receivers would
see them. However, these reconstructed byte streams have
inherent ambiguities largely because the monitor does not
know what traf(cid:2)c the receiver actually receives and accepts.
Starting with the work of Ptacek and Newsham [3], the pos-
sibility of a wily adversary exploiting these ambiguities to
mount an evasion attack and confound a monitor has been
recognized in the research literature [2(cid:150)6]. Moreover, tools
that facilitate the automatic generation of evasive traf(cid:2)c are
readily available for use by attackers today [7(cid:150)9], making
evasion attacks a real threat to intrusion detection systems.
One important class of evasion attacks is attacks that em-
ploy inconsistent TCP retransmissions (i.e., TCP segments
that contain different data for the same sequence number
space) to confuse a network monitor’s parsing. In such at-
tacks, attackers send inconsistent TCP segments that all
make it past the monitor, but which don’t all reach the re-
ceiver, say, by having insuf(cid:2)cient TTL hop-counts in their
IP headers. Absent information about which segments the
receiver will eventually receive and accept, the monitor can-
not accurately infer if an attack is in progress. Figure 1
shows an example where the attacker sends two different
TCP segments starting at sequence number 4, one of which
completes a malicious string (cid:147)exploit(cid:148) at the receiver.
The monitor, however, cannot unambiguously reconstruct
the string that the receiver sees. The monitor cannot sim-
ply analyze all possible interpretations of such ambiguous
traf(cid:2)c, since the combinations grow exponentially large [5].
Note that in this example, the receiver never sees the seg-
978-0-7695-3168-7 /08 $25.00 © 2008 IEEE
DOI 10.1109/SP.2008.27
96
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:11:31 UTC from IEEE Xplore.  Restrictions apply. 
ment carrying (cid:147)junk(cid:148) because it lacks suf(cid:2)cient hop-count
(TTL) to make it all the way to its purported address. Alter-
natively, the attacker can also rely on knowledge of whether
the receiver’s particular operating system accepts only the
(cid:2)rst instance of a segment, or overwrites the contents of the
segment with any later transmission; network stacks differ
in their treatment of this corner case [3].
Previous work by Malan et al. [4] and Handley et al. [5]
developed the notion of traf(cid:2)c normalization, by which an
in-line network element removes such ambiguities from a
traf(cid:2)c stream prior to presenting it to a monitor for security
analysis, thus thwarting evasion attacks. Detecting inconsis-
tent retransmissions is one of the hardest steps in normal-
ization because it cannot be performed in a simple state-
less fashion, unlike most other steps [5]. In recent work,
Varghese and colleagues pursued a more restricted problem
of detecting inconsistent retransmissions in the context of
byte-level signature detection alone [6]. Our goal in this
work is to design an in-line network element that detects
and blocks inconsistent retransmissions in any TCP byte
stream, in a manner that is both memory-ef(cid:2)cient and re-
sistant to attacker-induced stress.
The brute-force approach to detecting inconsistent re-
transmissions, used by some existing intrusion detection
systems (e.g., Bro [2]) and normalizers [4,5], is to buffer all
the unacknowledged bytes for each active connection and
to compare any retransmission against the stored bytes for
consistency. However, the brute-force ((cid:147)full-content(cid:148)) nor-
malizer needs to be provisioned with a signi(cid:2)cant amount
of memory(cid:151)almost a bandwidth-delay product’s worth(cid:151)
rendering such normalizers impractical and expensive on
high-speed links.
An alternative approach, potentially requiring signi(cid:2)-
cantly less memory, is to instead store hashes over the con-
tent of unacknowledged segments rather than a full copy
of the contents, and compare the hashes of retransmissions
to stored hashes. Such an approach cannot verify the con-
sistency of retransmissions that are packetized differently
from the original segments. In practice, however, retrans-
missions not infrequently occur misaligned with the origi-
nal segment boundaries, overlapping in unexpected ways(cid:151)
from our analysis of (cid:2)ve real-world TCP packet traces, we
(cid:2)nd that 20(cid:150)30% of all retransmissions were not aligned
along original segment boundaries (x2). While we know
from discussions with implementors that some commercial
systems also use the approach of storing hashes, the liter-
ature does not provide any analysis of how well such an
approach actually works in practice.
Thus, existing normalizer designs fail to meet the full set
of goals important for a practical normalizer:
1. Memory-ef(cid:2)ciency. The normalizer must use memory
frugally to store most of the data on fast (but scarce and
expensive) on-chip memory in order to process pack-
ets at line speed. Memory ef(cid:2)ciency becomes increas-
ingly signi(cid:2)cant as link speeds improve and connec-
tions have greater amounts of data in-(cid:3)ight, and has
major implications for cost and power consumption.
2. Correctness. The normalizer must always identify and
block inconsistent TCP byte streams, irrespective of
how the bytes are packetized into segments by the
senders. Existing hash-based approaches do not pro-
vide actual protection from adversaries, since in prac-
tice such normalizers will fairly frequently encounter
retransmissions for which they cannot verify payload
consistency.
3. Adversarial-resistance. The normalizer must be ro-
bust to an adversary mounting attacks to degrade the
normalizer’s operation. Such attacks might seek to ex-
haust the memory or processing resources of the nor-
malizer, preventing it either from functioning correctly
or causing it to deny service to other, benign TCP con-
nections. For example, an adversary can easily exhaust
the memory of the full-content normalizer by having
large windows of unacknowledged data over multiple
connections.
In this paper we describe RoboNorm, a robust normal-
izer design that aims to meet all of these design goals.
RoboNorm maintains a content hash for every unacknowl-
edged segment of every connection, and (with careful de-
sign, per x3) veri(cid:2)es the consistency of all retransmissions
including those that are misaligned with original segment
boundaries. RoboNorm requires around 2.5 MB of memory
on a typical Gbps access link, 1(cid:150)2 orders of magnitude less
than that required by the full-content approach (x4), making
it amenable to an inexpensive yet high-speed implementa-
tion (x5). In addition, RoboNorm thwarts a variety of state-
exhaustion attacks by using robust policies to evict connec-
tions when under stress; the policies require the adversary
to summon major resources to impair the system’s opera-
tion, and rarely in(cid:3)ict collateral damage on benign connec-
tions (x6). While sound and robust operation of RoboNorm
necessitates occasional alteration of traf(cid:2)c and end-to-end
semantics (e.g., ACK rewriting), we demonstrate that such
alteration occurs exceedingly rarely in practice.
2. Assumptions and Challenges
This section investigates the challenges to designing an
ef(cid:2)cient and robust normalizer using a number of real-world
packet traces. We begin with the assumptions and terminol-
ogy used in this paper.
Assumptions. The normalizer is an in-line network ele-
ment deployed at the access link of a network one wishes to
protect, most likely in conjunction with an IDS/IPS. We as-
sume that the normalizer always sees packets in both direc-
97
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:11:31 UTC from IEEE Xplore.  Restrictions apply. 
# Trace Characteristics
1 Total # half-connections with data
2 % of above with retransmits
3 Total # TCP packets
4 % of above that are retransmits
5 % retransmits not aligned with originals
Lab2
4.83
5.16
Lab1
Univ1 Univ2
Super
648K 15.3M 1.21M 601K 32.5K
5.6
2.39
31M 435M 127M 40.5M 30.3M
0.58
0.04
18.1
29.0
0.19
20.6
0.32
25.2
4.07
0.06
31.5
Table 1. Basic statistics of the traces used in the paper.
tions (i.e., data and acknowledgments) of any TCP connec-
tion it processes.1 We also assume that the normalizer can
actively alter the traf(cid:2)c passing through it, say by holding
onto some packets without forwarding or rewriting some
(cid:2)elds of the packet headers. It can terminate connections
that it suspects of conducting malicious activity. When un-
der stress, the normalizer fails on the safe side by terminat-
ing suspicious connections to relieve stress instead of letting
traf(cid:2)c through without inspection.
Terminology. TCP is a byte stream protocol for which a
TCP segment is the unit of transmission. In our discussions,
we represent segments by the sequence number ranges of
the bytes they contain.2 We term a TCP segment as new if
none of its sequence numbers have previously appeared at
the normalizer. Otherwise, we term the segment retransmit-
ted. New segments that we later compare retransmissions
against are at that point termed original segments. Note that
a retransmitted segment can contain both sequence numbers
previously seen and new sequence numbers. We also de(cid:2)ne
a hole as a range of sequence numbers for which the nor-
malizer has not seen the corresponding bytes.
Traces. We use (cid:2)ve packet traces to understand the chal-
lenges in designing a normalizer, and to validate our de-
sign in the rest of the paper. These traces, referred to as
Univ1, Univ2, Lab1, Lab2, and Super, were collected at the
Gbps access links of four large sites: two large university
environments, with about 45,000 hosts (Univ1) and 30,000
hosts (Univ2), respectively; a research laboratory with about
6,000 hosts (Lab1 and Lab2); and a supercomputer center
with 3,000 hosts (Super). All traces were captured during
afternoon working hours. Although we cannot claim that
these traces are broadly representative, they do span a spec-
trum from many hosts making small connections (the pri-
mary (cid:3)avor of university sites, Univ1 and Univ2) to a few
1If the normalizer can only see one side of a connection, then it cannot
safely reclaim state associated with acknowledged data, nor can it correctly
execute the mechanisms we develop to handle retransmissions that are not
aligned with original segment boundaries (x3).
2When not ambiguous, we will sometimes refer to (cid:147)bytes(cid:148) as a shorter
term for (cid:147)sequence numbers.(cid:148)
hosts making large, fast connections (the supercomputing
site, Super). Appendix A details the trace collection method.
Table 1 presents some aggregate statistics of the traces.
Row 1 gives the number of TCP data-transfer paths ((cid:147)half-
connections(cid:148)) we analyzed. Each TCP connection poten-
tially gives rise to two of these, one in each direction that
actually transfers data; we analyze each direction indepen-
dently. We see in row 2 that a signi(cid:2)cant fraction (2.4(cid:150)
5.6%) of half-connections undergo retransmission at some
point, even though the next two rows show that a far lower
fraction (0.5%) of the total packets are themselves retrans-
mitted. The last row of the table shows that 20(cid:150)30% of re-
transmitted segments are not aligned with the correspond-
ing original segments.
Challenges. The design of a TCP normalizer must over-
come three challenges, as mentioned in x1: memory-
ef(cid:2)ciency, correctness in the face of complex TCP re-
transmission behavior, and attack-resilience. The normal-
izer must use memory sparingly: storing all unacknowl-
edged bytes consumes an excessive amount of memory,
especially on high link speeds. To reduce memory con-
sumption, some systems store content-hashes of TCP seg-
ments, simply comparing retransmissions against the stored
hashes. Unfortunately, as we noted above, a signi(cid:2)cant frac-
tion of normal TCP connections today do not retransmit
along the same segment boundaries as the original transmis-
sions. In response, such designs must either terminate the
connection, with signi(cid:2)cant collateral damage, or let mis-
aligned data through, which allows an attacker who crafts
such traf(cid:2)c to evade detection.
Thus, the second challenge is to guarantee correctness
in the face of TCP retransmission vagaries. TCP’s complex
retransmission behavior arises because the TCP speci(cid:2)ca-
tion allows latitude in terms of how retransmitted segments
correspond to original segments(cid:151)a sender can repacketize
the data during retransmission, with the result that the re-
transmitted segments may not match the original segments
in size or sequence range. Moreover, while the speci(cid:2)cation
states that a newly received segment that overlaps with an
existing segment should be trimmed to only the new data
(p. 53 of [10]), in reality different TCP implementations be-
98
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:11:31 UTC from IEEE Xplore.  Restrictions apply. 
Connection table
 Tuple
Ptr
Ptr
Hash store
Segment hash list
Held retransmits
Retransmission buffer
Figure 2. Architecture of RoboNorm.
have differently in this regard [3]. As a result, a network
monitor might not be able to tell whether a given segment
ultimately makes it all the way to the receiver(cid:151)or, if it does,
whether the receiver will use its contents(cid:151)and thus whether
the receiver will treat a subsequent retransmission as (cid:147)new(cid:148)
or (cid:147)overlapping.(cid:148)
The third challenge for a normalizer is to resist malicious
adversaries. In general, malicious nodes can send arbitrary
streams of packets to attempt to exhaust the computational
capacity and memory of the normalizer, or to undermine its
correct operation. Hosts inside the protected network can
collude with adversaries outside the network. Attackers not
on the path between communicating TCP hosts can spoof
source IP addresses to disrupt TCP connections. Irrespec-
tive of the attacker’s strategy, we must ensure that all incon-
sistent retransmissions are detected, and that no additional