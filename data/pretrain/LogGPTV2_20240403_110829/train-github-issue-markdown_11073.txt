### Proposed new feature or change:
All single-argument `np.FUNC` functions can be implemented as
`np.ndarray.FUNC`.
**Example usage:**
    # Currently invalid. :(
    x.ceil()
**Rationale:**
  * `np.ndarray` already implements some methods:
    all
    any
    argmax
    argmin
    argpartition
    argsort
    astype
    byteswap
    choose
    clip
    compress
    conj
    conjugate
    copy
    cumprod
    cumsum
    diagonal
    dump
    dumps
    fill
    flatten
    getfield
    item
    itemset
    max
    mean
    min
    newbyteorder
    nonzero
    partition
    prod
    ptp
    put
    ravel
    repeat
    reshape
    resize
    round
    searchsorted
    setfield
    setflags
    sort
    squeeze
    std
    sum
    swapaxes
    take
    tobytes
    tofile
    tolist
    tostring
    trace
    transpose
    var
    view
  * It is unclear to a user which ones have been implemented and which ones haven't unless they try one and see if their code works/fails. (Or google the docs for each one they want to use.) For instance, `np.ndarray.ceil` does not exist, but `np.ndarray.round` does.
  * Fully implementing this API style improves interchangeability with libraries such as PyTorch. With this change, there is less need to implement different methods (e.g. `torch.sin` or `np.sin`) for functions that just want to think about numerical computations on tensors of any type (`np.ndarray` or `torch.Tensor`), e.g.:
    def sin2(x: np.ndarray | torch.Tensor):
        return (x ** 2).sin()
Instead of:
    def sin2(x: np.ndarray | torch.Tensor):
        if isinstance(x, np.ndarray):
            return np.sin(x ** 2)
        else:
            return (x ** 2).sin()
  * Fluent API styles are very natural for chained computations.
    ((x ** 2).mean(axis=-1).sqrt() > x.mean(axis=-1).sqrt()).nonzero()
versus:
    np.nonzero(np.sqrt(np.mean(x ** 2, axis=-1)) > np.sqrt(np.mean(x, axis=1)))
  * More consistent API for numpy-based libraries (e.g. `pandas`) that frequently use chained methods in other parts of their API.
    df.groupby("column").agg(...)
    df["column"].ceil()  # looks much more natural with pandas than np.ceil(df["column"])
* * *
A (not necessarily exhaustive) list of possible single-argument FUNCs:
    negative
    positive
    absolute
    fabs
    rint
    sign
    conj
    conjugate
    exp
    exp2
    log
    log2
    log10
    expm1
    log1p
    sqrt
    square
    cbrt
    reciprocal
    sin
    cos
    tan
    arcsin
    arccos
    arctan
    sinh
    cosh
    tanh
    arcsinh
    arccosh
    arctanh
    degrees
    radians
    deg2rad
    rad2deg
    invert
    logical_not
    isfinite
    isinf
    isnan
    isnat
    fabs
    signbit
    spacing
    modf
    frexp
    floor
    ceil
    trunc