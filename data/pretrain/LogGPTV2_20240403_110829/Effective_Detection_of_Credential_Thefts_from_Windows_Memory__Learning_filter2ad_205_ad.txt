addresses, as they always perform the same tasks.
We could also try to identify the portions of LSASS mem-
ory that are read. As legitimate processes read speciﬁc por-
tions of memory, we could expect a malicious process to read
some portions that are usually unread. Although the address
space is not ﬁxed, we could e.g. set some random points in
the LSASS memory and receive ﬂags for whether or not a
process has read at this address. This would add an interest-
ing dimension to our detector since malicious software would
likely raise more ﬂags than legitimate software, or unusual
combinations of ﬂags, since they are more likely to browse a
large – and maybe contiguous – part of LSASS.
Breaking the 5min window. Our model aggregates read
events over a 5-minute window. An attacker could therefore
wait 5 minutes in the middle of an attack in order to bypass
our detection mechanism. This would split the corresponding
data point into several points that would fall outside the detec-
tion interval. In order to remedy this, it would be interesting
to study the aggregation of events over an adjustable period
of time, e.g. by aggregating sessions by process.
190    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association
5.45.65.86·106246·103BytesreadReadattempts10−10+0246·1060246·104BytesreadReadattemptsLegitimatereadsMaliciousreadsAdversarialreadsAnticipating OS updates. In the online machine learning
solution described in Section 9, when a new OS version is
released, defensive tools would need a source of new labelled
data points in order to re-calibrate the detector as depicted
in Figure 6. During this learning phase, an attacker could
steal credentials without being detected, provided there is not
enough data for this new OS version yet. A possible solution
for this problem would be to use a set of training machines,
say virtual machines set up with that new OS version, in order
to run a couple of credential theft techniques on them and
gather the data required to train our model.
11 Future Work
This work focused on detecting credential theft from LSASS
memory. We introduced a novel method for characterising
memory read behaviour and demonstrated that we can indeed
build effective detectors based on this model. A natural and
interesting question to pursue is whether or not we can gener-
alise our method. In particular, we would like to study if we
could adapt our model to study other parts of the memory of a
Windows machine. We would also like to understand whether
or not our method could generalise to other operating systems.
For example, we could study system ﬁles on Linux that play
a similar role in Linux to that of LSASS on Windows.
Another avenue would be to study the memory read be-
haviour of processes accessing a particular area in memory,
in particular the memory of web browsers. This memory
often contains a wide variety of sensitive information stored
in different ways. This would be a particularly fascinating
line of inquiry since a detection mechanism that would target
a particular browser may potentially be independent of the
used operating system, opening up the possibility of building
cross-platform detectors. In that context, it would be of inter-
est to study the attacker tool Lazagne, which is designed to
steal passwords from web browsers.
12 Discussion
One key contribution of the work reported here is to introduce
a model for analysing memory reads and to highlight two im-
portant features of such a model that enable us to characterise
read sessions precisely. This precision then allowed us to
build an effective detector that was not in production already.
These two features have been selected following a detailed
analysis of security experts, as explained in Section 4. Those
analyses were guided by the thorough examination of creden-
tial theft tools and analytical expertise of the Windows secu-
rity architecture. Experimental data then naturally suggested
linear models for classiﬁcation. In contrast, modelling and
selecting features for characterising read sessions using gen-
eral machine learning techniques might not have given such
successful detection results. In particular, this work demon-
strates that the application of machine learning techniques
can beneﬁt from input given by speciﬁc domain experts.
In addition, MDATP has access to a large variety of teleme-
try from its customers and has therefore the potential to con-
sider read events in a much wider context where read be-
haviours would depend on a richer dataset such as historical
data or network data. In such a case, one could use more
advanced machine-learning techniques such as k-means clus-
tering or convolutional neural networks in order to build a
model for read sessions, extract sensible features, and train a
classiﬁcation algorithm.
Finally, we discussed in Section 10 some reﬁnements that
could improve our method. However, when building a robust
detector, we believe that another important aspect to consider
is to combine low level signals coming from different sources
to produce more reliable – and more meaningful – alerts.
13 Conclusion
In the assumed breach scenario where an attacker has already
inﬁltrated a system, credential theft is a common attack be-
haviour that allows an attacker to successfully prepare lateral
network movement or privilege escalation in preparation of
more advanced attacks. A particularly sensitive process tar-
geted by credential thieves on Windows is LSASS, a process
that enforces the Windows security policy. Credential theft
from LSASS is currently detected based on static methods
that recognise the presence of particular binary executable
ﬁles that are known to perform such actions.
In this work, we introduce a model of memory read be-
haviour that enables us to study the read accesses of processes
to LSASS memory in order to judge whether such processes
are malicious or benign. Based on that model and extensive
data collected from real Windows networks, we trained and
tuned a linear classiﬁer that identiﬁes the actual act of stealing
credentials from LSASS memory, rather than detecting the
presence of particular malicious executable ﬁles. This enables
us to detect malicious actors that were previously undetected
by currently used tools. In particular, we were able to detect
attacks by custom tools or malicious programs invoked re-
motely by PowerShell. The detection tool that contains our
classiﬁer is now running in production and we demonstrated
on real customer data that it provides excellent TP and FP
rates. We also established that our classiﬁer and therefore
our detection tool can cope well with operating system up-
grades. Moreover, we highlighted how applying unsupervised
machine learning techniques and reﬁning the telemetry that
we receive from customers could help us to protect against
attackers who would try to evade our detection mechanism.
Acknowledgements. We thank anonymous reviewers and our
shepherd William Robertson for their insightful advice.
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    191
References
[1] Benjamin Delpy. Mimikatz, 2014.
[2] Dorothy E Denning. An intrusion-detection model.
IEEE Transactions on software engineering, 13(2):222–
232, 1987.
[3] Dinei Florencio and Cormac Herley. Is everything we
know about password stealing wrong? IEEE Security &
Privacy, 10(6):63–69, 2012.
[4] Thorsten Holz, Markus Engelberth, and Felix Freiling.
Learning more about the underground economy: A case-
study of keyloggers and dropzones. In European Sym-
posium on Research in Computer Security, pages 1–18.
Springer, 2009.
[5] Chun-Ying Huang, Shang-Pin Ma, and Kuan-Ta Chen.
Using one-time passwords to prevent password phishing
attacks. Journal of Network and Computer Applications,
34(4):1292–1301, 2011.
[6] Markus Jakobsson and Steven Myers. Phishing and
countermeasures: understanding the increasing prob-
lem of electronic identity theft.
John Wiley & Sons,
2006.
[7] Parisa Kaghazgaran and Hassan Takabi. Toward an
insider threat detection framework using honey permis-
sions. J. Internet Serv. Inf. Secur., 5(3):19–36, 2015.
[8] Abhishek Kumar. Discovering passwords in the mem-
ory. White Paper, Paladion Networks (November 2003),
2004.
[9] Wenke Lee and Salvatore J. Stolfo. Data mining ap-
proaches for intrusion detection.
In Aviel D. Rubin,
editor, Proceedings of the 7th USENIX Security Sym-
posium, San Antonio, TX, USA, January 26-29, 1998.
USENIX Association, 1998.
[10] Wenke Lee, Salvatore J Stolfo, and Philip K Chan.
Learning patterns from unix process execution traces
for intrusion detection. In AAAI Workshop on AI Ap-
proaches to Fraud Detection and Risk Management,
pages 50–56. New York;, 1997.
[11] Hung-Jen Liao, Chun-Hung Richard Lin, Ying-Chih
Lin, and Kuang-Yuan Tung.
Intrusion detection sys-
tem: A comprehensive review. Journal of Network and
Computer Applications, 36(1):16–24, 2013.
[12] Michael Hale Ligh, Andrew Case, Jamie Levy, and
Aaron Walters. The art of memory forensics: detect-
ing malware and threats in windows, linux, and Mac
memory. John Wiley & Sons, 2014.
[13] Mike McQuade. The untold story of NotPetya, the most
devastating cyberattack in history, 2018.
[14] William Melicher, Blase Ur, Sean M Segreti, Saranga
Komanduri, Lujo Bauer, Nicolas Christin, and Lor-
rie Faith Cranor. Fast, lean, and accurate: Modeling
password guessability using neural networks. In 25th
USENIX Security Symposium (USENIX Security 16),
pages 175–191, 2016.
[15] J Mulder. Mimikatz overview, defenses and detection,
2016.
[16] David Patten. The evolution to ﬁleless malware. Re-
trieved from, 2017.
[17] David Silver, Suman Jana, Dan Boneh, Eric Chen, and
Collin Jackson. Password managers: Attacks and de-
fenses. In 23rd USENIX Security Symposium (USENIX
Security 14), pages 449–464, 2014.
[18] Hung-Min Sun, Yao-Hsin Chen, and Yue-Hsun Lin.
opass: A user authentication protocol resistant to pass-
word stealing and password reuse attacks. IEEE Trans-
actions on Information Forensics and Security, 7(2):651–
663, 2011.
[19] Kurt Thomas, Frank Li, Ali Zand, Jacob Barrett, Juri
Ranieri, Luca Invernizzi, Yarik Markov, Oxana Co-
manescu, Vijay Eranti, Angelika Moscicki, et al. Data
breaches, phishing, or malware?: Understanding the
risks of stolen credentials. In Proceedings of the 2017
ACM SIGSAC conference on computer and communica-
tions security, pages 1421–1434. ACM, 2017.
[20] Christina Warrender, Stephanie Forrest, and Barak Pearl-
mutter. Detecting intrusions using system calls: Alterna-
tive data models. In Proceedings of the 1999 IEEE sym-
posium on security and privacy (Cat. No. 99CB36344),
pages 133–145. IEEE, 1999.
[21] Songyang Wu, Pan Wang, Xun Li, and Yong Zhang. Ef-
fective detection of android malware based on the usage
Information
of data ﬂow apis and machine learning.
and software technology, 75:17–25, 2016.
[22] Jing Zhang, Robin Berthier, Will Rhee, Michael Bailey,
Partha Pal, Farnam Jahanian, and William H Sanders.
Safeguarding academic accounts and resources with
the university credential abuse auditing system.
In
IEEE/IFIP International Conference on Dependable
Systems and Networks (DSN 2012), pages 1–8. IEEE,
2012.
192    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association
Appendices
A Comparing Benign and Malicious Reads
This section contains Figure 8 which compares the read be-
haviour of legitimate and malicious software.
Figure 8: Comparison between benign (i.e. legitimate) and
malicious memory read behaviours collected from Experi-
ments 1 and 2.
B Modelling Malicious Read Behaviour
This section contains Figures 9 and 10 which illustrate our
regression model for the memory read behaviour of Kerberos
ticket thefts and pass-the-hash technique respectively.
Figure 10: Memory read behaviour of passing the hash.
C Calibrating our Detector
This section contains Figure 11 which describes the inﬂuence
of the length of the detection interval on the true positive and
false positive rates.
Figure 11: ROC curve: relationship between the true positive
and false positive rates as the detector interval width varies.
Figure 9: Memory read behaviour of Kerberos ticket thefts.
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    193
0246·1060246·104BytesreadReadattemptsLegitimatereadsMaliciousreads4.64.85·10602468·103BytesreadReadattemptsTicketsRegressionlineAlertintervalI34.44.424.444.46·106468·102BytesreadReadattemptsPasstheHashRegressionlineAlertintervalI30123·10−6013σ2σ1σFPrateTPrateD Detecting Malicious Memory Reads
This section contains three interesting instances of malicious
memory read sessions that our mechanisms detected, includ-
ing two instances that other detection tools used at present
cannot identify. Figure 12 depicts a renamed instance of
Mimikatz. Figure 13 describes a custom process named
lolz.exe that we suspect is a bespoke and recompiled ver-
sion of Mimikatz. Finally, Figure 14 shows an instance of
Mimikatz being invoked remotely via PowerShell.
"E : \ \ " ,
" t u r t l e . exe " ,
" t u r t l e . exe " ,
" FileName " :
" CommandLine " :
" F i l e P a t h " :
" Sha1 " :
" cb58316a65f7fe954adf864b678c694fadceb759 " ,
" g e n t i l k i w i ( Benjamin DELPY) " ,
"CompanyName " :
" ProductName " :
" mimikatz " ,
" OriginalFileName " :
" InternalFileName " :
" F i l e D e s c r i p t i o n " :
" ParentProcessName " :
" mimikatz . exe " ,
" mimikatz " ,
" mimikatz f o r Windows " ,
"cmd . exe "
Figure 12: Credential theft tool that was renamed in order to
avoid static detection but whose executable ﬁle can still be
identiﬁed as malicious via its metadata.
IEX
{
. . . " ,
" FileName " : " powershell . exe " ,
" CommandLine " : " \ " powershell . exe \ "
. . .
$mimi ;
Invoke−Mimikatz −DumpCreds }
" F i l e P a t h " : " C : \ \ Windows \ \ System32 \ \
WindowsPowerShell \ \ v1 . 0 " ,
" Sha1 " :
"6 cbce4a295c163791b60fc23d285e6d84f28ee4c "
"CompanyName " : " M i c r o s o f t Corporation " ,
" ProductName " : " M i c r o s o f t Windows Operating
System " ,
" OriginalFileName " : " PowerShell .EXE" ,
" InternalFileName " : "POWERSHELL" ,
" F i l e D e s c r i p t i o n " : " Windows PowerShell "
" ParentProcessName " : " ai_python . exe "
Figure 14: Credential theft tool invoked remotely via Power-
Shell. The malicious executable ﬁle is not physically on the
machine, so its presence is not detected by current detectors.
But our detector triggers an alert when PowerShell performs
this action, as its memory read behaviour becomes malicious.
"E : \ \ " ,
" l o l z . exe " ,
" l o l z . exe " ,
" FileName " :
" CommandLine " :
" F i l e P a t h " :
" Sha1 " :
" fc03697be2ed32f844aa153460ef5c82f58b06a0 " ,
"CompanyName " :
" ProductName " :
" OriginalFileName " :
" InternalFileName " :
" F i l e D e s c r i p t i o n " :
" ParentProcessName " :
" M i c r o s o f t Windows " ,
" M i c r o s o f t Windows " ,
" M i c r o s o f t Windows "
" M i c r o s o f t Windows " ,
" M i c r o s o f t Windows " ,
"cmd . exe "
Figure 13: Process performing credential theft that has been
customised and recompiled so that its executable ﬁle bypasses
static detection mechanisms. Our detector does detect this
process as malicious by looking at its memory read behaviour.
194    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association