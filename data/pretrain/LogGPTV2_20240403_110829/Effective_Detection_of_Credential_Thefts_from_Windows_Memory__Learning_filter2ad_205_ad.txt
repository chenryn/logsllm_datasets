### Optimized Text

#### Identifying Malicious Processes
We can also attempt to identify the specific portions of LSASS memory that are accessed. Legitimate processes typically read specific segments of memory, so a malicious process may access areas that are usually not read. Although the address space is not fixed, we could set some random points in the LSASS memory and flag whether a process has read from these addresses. This would add an interesting dimension to our detection mechanism, as malicious software is likely to raise more flags or unusual combinations of flags due to its broader and possibly contiguous memory access patterns.

#### Breaking the 5-Minute Window
Our model aggregates read events over a 5-minute window. An attacker could potentially wait 5 minutes during an attack to bypass our detection mechanism, splitting the data into multiple points outside the detection interval. To address this, it would be beneficial to study the aggregation of events over an adjustable period, such as by aggregating sessions by process.

#### Anticipating OS Updates
In the online machine learning solution described in Section 9, when a new OS version is released, defensive tools need new labeled data points to recalibrate the detector. During this learning phase, an attacker could steal credentials undetected if there is insufficient data for the new OS version. A possible solution is to use a set of training machines, such as virtual machines with the new OS version, to run credential theft techniques and gather the required training data.

### Future Work
This work focused on detecting credential theft from LSASS memory. We introduced a novel method for characterizing memory read behavior and demonstrated the effectiveness of our detectors. A natural next step is to explore whether our method can be generalized to other parts of Windows memory or to other operating systems. For example, we could study system files on Linux that serve similar roles to LSASS on Windows.

Another avenue is to investigate the memory read behavior of processes accessing web browser memory, which often contains various types of sensitive information. This line of inquiry is particularly fascinating because a detection mechanism targeting a specific browser could potentially be cross-platform. In this context, it would be valuable to study the attacker tool Lazagne, designed to steal passwords from web browsers.

### Discussion
A key contribution of this work is the introduction of a model for analyzing memory reads, highlighting two important features that enable precise characterization of read sessions. These features were selected based on detailed analysis and input from security experts, as explained in Section 4. The experimental data suggested linear models for classification, demonstrating that domain-specific expertise can significantly enhance the application of machine learning techniques.

MDATP has access to a wide variety of telemetry data from its customers, allowing for a broader context in which read behaviors can be analyzed. Advanced machine learning techniques, such as k-means clustering or convolutional neural networks, could be used to build more sophisticated models for read sessions, extract meaningful features, and train classification algorithms.

In Section 10, we discussed some refinements that could improve our method. However, building a robust detector also involves combining low-level signals from different sources to produce more reliable and meaningful alerts.

### Conclusion
In the assumed breach scenario where an attacker has already infiltrated a system, credential theft is a common attack behavior that enables lateral movement and privilege escalation. On Windows, LSASS is a particularly sensitive process targeted by credential thieves. Current detection methods rely on static recognition of known malicious binaries.

In this work, we introduced a model of memory read behavior to study read accesses to LSASS memory and determine whether processes are malicious or benign. Based on this model and extensive data from real Windows networks, we trained and tuned a linear classifier to detect the act of stealing credentials from LSASS memory, rather than just identifying malicious executables. This allows us to detect previously undetected malicious actors, including custom tools and remotely invoked PowerShell scripts. Our detection tool, now in production, provides excellent true positive and false positive rates and can handle operating system upgrades. Additionally, we highlighted how unsupervised machine learning techniques and refined telemetry can help protect against evasion attempts.

### Acknowledgements
We thank anonymous reviewers and our shepherd, William Robertson, for their insightful advice.

### References
[References section remains unchanged]

### Appendices
#### A. Comparing Benign and Malicious Reads
Figure 8 compares the read behavior of legitimate and malicious software.

#### B. Modelling Malicious Read Behavior
Figures 9 and 10 illustrate our regression model for the memory read behavior of Kerberos ticket thefts and pass-the-hash techniques, respectively.

#### C. Calibrating Our Detector
Figure 11 describes the influence of the detection interval length on the true positive and false positive rates.

#### D. Detecting Malicious Memory Reads
This section includes three instances of detected malicious memory read sessions, including cases that current detection tools cannot identify. Figure 12 shows a renamed instance of Mimikatz, Figure 13 describes a custom process (lolz.exe) suspected to be a recompiled version of Mimikatz, and Figure 14 depicts Mimikatz being invoked remotely via PowerShell.