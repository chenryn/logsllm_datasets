E · C
where E = e(g, g).
(cid:2)
2, V
(cid:2)
2 ) for this simpler language pro-
2 Prover picks random b1, b2 ∈ Zq and
(cid:2)
The Σ-protocol (P
ceeds as follows:
1) P
J1, J2 ∈ G and computes
2 → V
(cid:2)
⎧⎪⎪⎨
⎪⎪⎩
⎫⎪⎪⎬
⎪⎪⎭
−1
b2 , s2)
−1
b1 v
b2
v , s4)
E1 ← e(J1, g) · e(u
E2 ← e(J2, g) · e(v
E3 ← C
2 Veriﬁer picks a random c ∈ Zq.
(cid:2)
(cid:2)
2 Prover computes a response
b2
z1 ← b1 + c · id
z3 ← s
1 · J1
c
z2 ← b2 + c · sid
z4 ← s
3 · J2
c
2 ← V
(cid:2)
2 → V
(cid:2)
2) P
3) P
4) Veriﬁer checks the following:
E2 · e(g, g)
E1 · e(g, g)
xc · e(h, s2)
sid
c
v hv, s4)
c · C
−c(sid)
yc · e(v
E3 · e(g, g)
c
−1
z2 , s2)
−1
= e(z3, g) · e(u
z1 v
= e(z4, g) · e(v
z1
v , s4)
= C
(cid:2)
(cid:2)
2 ) is an honest-veriﬁer
2, V
z2
Theorem 7: The above (P
special-sound zero-knowledge protocol for L2.
Proof: (sketch) The completeness of the protocol is
standard. First we show honest-veriﬁer zero-knowledge.
On input an instance and a random challenge c, the
simulator ﬁrst chooses a random z1, z2 ∈ Zq and
random z3, z4 ∈ G and computes
−1
e(z3, g) · e(uz1 vz2 , s2)
e(g, g)cx · e(h, s2)c
e(z4, g) · e(vz1
−1
v , s4)
e(g, g)cy · e(vsid
v hv, s4)c
C z2
e(g, g)c · C
−c(sid)
E1 =
E2 =
E3 =
and outputs (E1, E2, E3), c, (z1, z2, z3, z4) as the tran-
script. By inspection, it follows that the distribution of
transcripts is perfectly identical to a transcript from a
successful protocol execution.
the protocol
We now show that
is special-sound.
Consider two transcripts (E1, E2, E3), c, (z1, z2, z3, z4)
(cid:2) that
and (E1, E2, E3), c
both pass the veriﬁcation test. It follows that
4) where c (cid:5)= c
(cid:2)
(cid:2)
1, z
(cid:2)
2, z
(cid:2)
3, z
, (z
(cid:2)
z1 − z
(cid:2)
1
c − c
(cid:2)
z2 − z
(cid:2)
2
c − c
(cid:18)
(cid:2)
z3
(cid:2)
(cid:18)
z
3
(cid:19)c−c(cid:4)
(cid:19)c−c(cid:4)
z4
(cid:2)
z
4
id =
sid =
s1 =
s3 =
since both transcript tuples satisfy the three equations
in Step 4) of the Σ-protocol.
Corollary 8: In the random oracle model, there exists
a BB cse NIZK for languages L1 and L2 for the sig-
nature schemes (Gen, Sign, Ver), commitment scheme
Com and PRF {Fs} describe above.
Proof: Follows from Thm. 1.
D. GenRA and GenSA protocols
The GenRA and GenSA methods are the key genera-
tion methods for the BB signature scheme. More specif-
ically, the RA picks random group elements u, v, h ∈ G
and a secret element x ∈ Zq. The RA’s public key
RAvk = (u, v, h, e(g, g)x) and RAsk = x. (RA will be
signing m1 as the id with u and m2 as the user’s secret
seed with v.)
The SA picks random group elements uv, vv, hv ∈
G and a secret element y ∈ Zq. The SA’s public key
SAvk = (uv, vv, hv, e(g, g)y) and SAsk = y. (m1 will
be the sid and m2 will be the user id of a participant
authorized to submit in the survey.)
385
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:56 UTC from IEEE Xplore.  Restrictions apply. 
E. The Reg protocol
Common: Group (G, e, g), RAvk = (u, v, h, e(g, g)x)
RA Secret Key: x
User identity: id
User and RA establish a mutually authenticated secure
communication channel.
U → RA The user chooses a random PRF seed sid ∈
Zq and a random d ∈ Zq, computes α = vsid gd,
and sends (id, α) to RA.
The user also gives a (NI)zero-knowledge proof of
knowledge for (sid, d) ∈ L1 using the Σ-protocol
for L1 described above:
(cid:9)
(cid:10)
P oK
(sid, d) : α = v
d
sid g
to RA.
U → RA User picks a random b1, b2 and sends γ = vb1 gb2
U → RA User generates a random challenge c ∈ Zq by
using the random-oracle H and the tag 0n as
c = H(g, RAvk, id, α, γ, 0n)
U → RA User computes z1 = b1 + csid, z2 = b2 + cd and
sends (z1, z2) to RA.
?
RA veriﬁes vz1 gz2
= αcγ.
U ←− RA RA checks that
the identity id has not
been registered before. RA chooses r ∈ Zq
randomly, computes the signature tuple σ1 ←
gx(uidαh)r, σ2 ← gr and sends R the signature
σid = (σ1, σ2).
U User veriﬁes the signature by checking that
e(σ1, g) = e(g, g)
x · e(u
id
sid g
v
d
h, σ2).
If this veriﬁes, the user removes the commitment
randomness by computing σ
2 and stores
the secret credential (id, sid, σid = (σ1, σ2)).
(cid:2)
1 = σ1/σd
Note that at the end of this protocol, the user stores
a signature on s||id under the veriﬁcation key RAvk
(instead of a signature on c||id where c is a commitment
as per the abstract protocol). As mentioned earlier in
section III-C, this choice of implementation preserves
security as long as the signature scheme remains un-
forgeable even if the adversary has oracle access to
RA function. In this case, it is easy to show
the Reg
that unforgeability holds by showing how to simulate
RA function given access to a signing oracle.
the Reg
At a high level, the simulation works by (a) using the
simulator-extractor to extract (sid, id) from the NIZK
proof that
the user provides, and then submitting a
query for a signature (σ1, σ2) on s||id to the signature
oracle, and ﬁnally, multiplying an extra gdr term into
the σ1 term to produce messages for the adversary
that are indistinguishable from ones received in the
given interaction. The fact that the user must provide
a cse-NIZK with a tag 0n that is different from all
other tags used in all other protocol instances allows
simulation-extraction to function and thus enables a
proper simulation.
F. Survey Registration
SA Input: SAvk = (uv, vv, hv, e(g, g)y), SAsk = y,
sid ∈ Zq
List of identies: L
SA For each id ∈ L, the SA computes the following:
Pick a random r ∈ Zq and compute
, g
sidid = (g
id
v h)
sid
v v
(u
σ
y
r
r
)
Publish the list Lsid = (sid,{idi, σsidid}i∈L)
Authorized: Anyone can verify that a user with identity
id is authorized to submit in survey sid by ﬁnding
the corresponding signature σsidid = (σ1, σ2) in
Lsid and then checking that
?
= e(g, g)
y · e(u
sid
v v
idi
v h, σ2).
e(σ1, g)
G. Submission
The Submit protocol
is instantiated using the Σ-
protocol implementation for the L2 language.
Common Input: (G, e, g),
the public
keys SAvk = (uv, vv, hv, e(g, g)y), and RAvk =
(u, v, h, e(g, g)x)
the list Lsid,
User Secrets: id, submission m, credential (σid, sid)
The user aborts if the user has already participated
in an survey with sid or sid = sid. The user and
SA establish a secure connection in which SA is
authenticated, but the user is anonymous.
U The user identiﬁes the tuple (sid, idi, σ(i)) in Lsid in
which idi = id. The user computes Fsid (sid) =
C ← e(g, g)1/(sid+sid).
sends
(sid, C, m, s2, s4)
an
NIZKPOK of the statement (id, sid, s1, s3) in L2
with tag 1||sid||m to the SA:
replacing any prior occurrence of (C,·).
Theorem 9 (Security of the Survey System):
SA : If the proof veriﬁes, record the submission (C, m)
and
Assuming the security of the Pedersen commitment
∗
q,
scheme, the Dodis-Yampolskiy PRF for input space Z
the adaptive security of the Boneh-Boyen signatures,
and a collision-resistant hash function,
the above
concrete instantiation is a correct
(Def. 2) ad-hoc
survey scheme
(multi-survey) unlinkable
(Def. 3) and secure against malicious users (Def. 4) in
the random oracle model.
that
is
U → SA User
Proof: Security of the each of the primitives fol-
lows from Thm. 5, Thm. 4, Thm. 3, Thm. 6, Thm 7,
and Cor 8. The rest then follows from Thm. 2.
386
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:56 UTC from IEEE Xplore.  Restrictions apply. 
V. IMPLEMENTATION OF CONCRETE SCHEME
Because practicality and efﬁciency were major goals,
the concrete instantiation of the system was imple-
mented in C++11 using the MIRACL big number
library [36], which provides support for pairing based
cryptography and is free for educational purposes. We
implemented with curves that MIRACL equates to 128
AES security, using a Barreto-Naehrig pairing friendly
curve, with embedding degree k=12, and the Ate pair-
ing. The implementation uses an asymmetric pairing,
which follows immediately from our protocol.11
We analyzed performance for both types of curves be-
cause large groups are necessary for the survey system
to be provably-secure based on “standard” bilinear as-
sumptions (e.g. DBDH). In particular, for the reduction
to standard assumptions to work, the Dodis-Yampolskiy
PRF needs a group much larger than its input size and
the Boneh-Boyen signature reduction uses a complexity
leveraging argument that also requires a large group
size. However, one can also analyze these building
blocks, and thus the larger system, in the generic group
model [37], which provides evidence that the scheme is
secure against generic attacks and is then traditionally
implemented with smaller groups.
Our implementations, which are not particularly op-