Oursnapshotseesonlyonetuple:
=> SELECT ctid, * FROM accounts;
ctid | id | client | amount
−−−−−−−+−−−−+−−−−−−−−+−−−−−−−−
(0,2) | 2 | bob | 100.00
(1 row)
93
Chapter4 Snapshots
Butthetablecontainsthreeofthem:
=> SELECT * FROM heap_page('accounts',0);
ctid | state | xmin | xmax
−−−−−−−+−−−−−−−−+−−−−−−−+−−−−−−−
(0,1) | normal | 790 c | 0 a
(0,2) | normal | 791 c | 792 c
(0,3) | normal | 792 c | 0 a
(3 rows)
So how does Postgre choose which versions to show? By the above rules,
changes are included into a snapshot only if they are made by committed trans-
actionsthatsatisfythefollowingcriteria:
• Ifxid COMMIT;
4.4 Visibility of Transactions’Own Changes
Things get a bit more complicated when it comes to defining visibility rules for
transactions’ownchanges: insomecases,onlypartofsuchchangesmustbevis-
ible. Forexample,acursorthatwasopenedataparticularpointintimemustnot
seeanychangesthathappenedlater,regardlessoftheisolationlevel.
94
4.4 VisibilityofTransactions’OwnChanges
To address such situations, tuple headers provide a special field (displayed as
cminandcmaxpseudocolumns)thatshowsthesequencenumberoftheoperation
withinthetransaction. Thecmincolumnidentifiesinsertion,whilecmaxisused
fordeletionoperations. Tosavespace,thesevaluesarestoredinasinglefieldof
thetupleheaderratherthanintwodifferentones. Itisassumedthatoneandthe
samerowalmostnevergetsbothinsertedanddeletedwithinasingletransaction.
(Ifitdoeshappen,Postgrewritesaspecialcomboidentifierintothisfield,and
theactualcminandcmaxvaluesarestoredbythebackendinthiscase.1)
Asanillustration,let’sstartatransactionandinsertarowintothetable:
=> BEGIN;
=> INSERT INTO accounts VALUES (3, 'charlie', 100.00);
=> SELECT pg_current_xact_id();
pg_current_xact_id
−−−−−−−−−−−−−−−−−−−−
793
(1 row)
Openacursortorunthequerythatreturnsthenumberofrowsinthistable:
=> DECLARE c CURSOR FOR SELECT count(*) FROM accounts;
Insertonemorerow:
=> INSERT INTO accounts VALUES (4, 'charlie', 200.00);
Nowextendtheoutputbyanothercolumntodisplaythecminvaluefortherows
insertedbyourtransaction(itmakesnosenseforotherrows):
=> SELECT xmin, CASE WHEN xmin = 793 THEN cmin END cmin, *
FROM accounts;
xmin | cmin | id | client | amount
−−−−−−+−−−−−−+−−−−+−−−−−−−−−+−−−−−−−−−
790 | | 1 | alice | 1000.00
792 | | 2 | bob | 200.00
793 | 0 | 3 | charlie | 100.00
793 | 1 | 4 | charlie | 200.00
(4 rows)
1 backend/utils/time/combocid.c
95
Chapter4 Snapshots
The cursor query gets only three rows; the row inserted when the cursor was al-
readyopendoesnotmakeitintothesnapshotbecausethecmin  FETCH c;
count
−−−−−−−
3
(1 row)
Naturally,thiscminnumberisalsostoredinthesnapshot,butitisimpossibleto
displayitusinganymeans.
4.5 Transaction Horizon
Asmentionedearlier,thelowerboundaryofthesnapshotisrepresentedbyxmin,
whichistheoftheoldesttransactionthatwasactiveatthemomentofthesnap-
shot creation. This value is very important because it defines the horizon of the
transactionthatusesthissnapshot.
Ifatransactionhasnoactivesnapshot(forexample,attheReadCommittedisola-
tionlevelbetweenstatementexecution),itshorizonisdefinedbyitsownifitis
assigned.
All the transactions that are beyond the horizon (those with xid  BEGIN;
=> SELECT backend_xmin FROM pg_stat_activity
WHERE pid = pg_backend_pid();
backend_xmin
−−−−−−−−−−−−−−
793
(1 row)
96
4.5 TransactionHorizon
Virtualtransactionshavenoreals,buttheystillusesnapshotsjustlikeregular
transactions,sotheyhavetheirownhorizons.Theonlyexceptionisvirtualtrans-
actionswithoutanactivesnapshot: theconceptofthehorizonmakesnosensefor
them,andtheyarefully“transparent”tothesystemwhenitcomestosnapshots
andvisibility(eventhoughpg_stat_activity.backend_xminmaystillcontainanxmin
ofanoldsnapshot).
We can also define the database horizon in a similar manner. For this purpose,
weshouldtakethehorizonsofallthetransactionsinthisdatabaseandselectthe
mostremoteone,whichhastheoldestxmin.1 Beyondthishorizon,outdatedheap
tupleswillneverbevisibletoanytransactioninthisdatabase. Suchtuplescanbe
safely cleaned up by vacuum—this is exactly why the concept of the horizon is so
importantfromapracticalstandpoint.
database
horizon
outdatedtuples
thatcanbevacuumed
xid
1 2 3 4 5 6 7 8 9 10
Let’sdrawsomeconclusions:
• Ifatransaction(nomatterwhetheritisrealorvirtual)attheRepeatableRead
or Serializable isolation level is running for a long time,it thereby holds the
databasehorizonanddefersvacuuming.
1 backend/storage/ipc/procarray.c,ComputeXidHorizonsfunction
97
Chapter4 Snapshots
• A real transaction at the Read Committed isolation level holds the database
horizoninthesameway,evenifitisnotexecutinganyoperators(beinginthe
“idleintransaction”state).
• AvirtualtransactionattheReadCommittedisolationlevelholdsthehorizon
onlywhileexecutingoperators.
Thereisonlyonehorizonforthewholedatabase,soifitisbeingheldbyatrans-
action,itisimpossibletovacuumanydatawithinthishorizon—evenifthisdata
hasnotbeenaccessedbythistransaction.
Cluster-widetablesofthesystemcataloghaveaseparatehorizonthattakesintoaccount
all transactions in all databases. Temporarytables,on the contrary,do not have to pay
attentiontoanytransactionsexceptthosethatarebeingexecutedbythecurrentprocess.
Let’sgetbacktoourcurrentexperiment.Theactivetransactionofthefirstsession
still holds the database horizon; we can see it by incrementing the transaction
counter:
=> SELECT pg_current_xact_id();
pg_current_xact_id
−−−−−−−−−−−−−−−−−−−−
794
(1 row)
=> SELECT backend_xmin FROM pg_stat_activity
WHERE pid = pg_backend_pid();
backend_xmin
−−−−−−−−−−−−−−
793
(1 row)
Andonlywhenthistransactioniscomplete,thehorizonmovesforward,andout-
datedtuplescanbevacuumed:
=> COMMIT;
=> SELECT backend_xmin FROM pg_stat_activity
WHERE pid = pg_backend_pid();
backend_xmin
−−−−−−−−−−−−−−
795
(1 row)
98
4.6 SystemCatalogSnapshots
In a perfect world, you should avoid combining long transactions with frequent p.
updates(thatspawnnewrowversions),asitwillleadtotableandindexbloating.
4.6 System Catalog Snapshots
Although the system catalog consists of regular tables, they cannot be accessed
viaasnapshotusedbyatransactionoranoperator.Thesnapshotmustbe“fresh”
enoughtoincludeallthelatestchanges,otherwisetransactionscouldseeoutdated
definitionsoftablecolumnsormissnewlyaddedintegrityconstraints.
Hereisasimpleexample:
=> BEGIN TRANSACTION ISOLATION LEVEL REPEATABLE READ;
=> SELECT 1; -- a snapshot for the transaction is taken
=> ALTER TABLE accounts
ALTER amount SET NOT NULL;
=> INSERT INTO accounts(client, amount)
VALUES ('alice', NULL);
ERROR: null value in column "amount" of relation "accounts"
violates not−null constraint
DETAIL: Failing row contains (1, alice, null).
=> ROLLBACK;
The integrity constraint that appeared after the snapshot creation was visible to
thecommand. Itmayseemthatsuchbehaviorbreaksisolation,butifthe
inserting transaction had accessed the accounts table, the   command
wouldhavebeenblockeduntilthistransactioncompletion. p.
Ingeneral,theserverbehavesasifaseparatesnapshotiscreatedforeachsystem
catalog query. But the implementation is,of course,much more complex1 since
frequent snapshot creation would negatively affect performance; besides, many
systemcatalogobjectsgetcached,anditmustalsobetakenintoaccount.
1 backend/utils/time/snapmgr.c,GetCatalogSnapshotfunction
99
Chapter4 Snapshots
4.7 Exporting Snapshots
Insomesituations,concurrenttransactionsmustseeoneandthesamesnapshot
byallmeans.Forexample,ifthepg_dumputilityisrunintheparallelmode,allits
processesmustseethesamedatabasestatetoproduceaconsistentbackup.
We cannot assume that snapshots will be identical simply because transactions
were started“simultaneously.” To ensure that all the transactions see the same
data,wemustemploythesnapshotexportmechanism.
The pg_export_snapshot function returns a snapshot , which can be passed to
anothertransaction(outsideofthedatabasesystem):
=> BEGIN ISOLATION LEVEL REPEATABLE READ;
=> SELECT count(*) FROM accounts;
count
−−−−−−−
4
(1 row)
=> SELECT pg_export_snapshot();
pg_export_snapshot
−−−−−−−−−−−−−−−−−−−−−
00000004−0000006E−1
(1 row)
Beforeexecutingthefirststatement,theothertransactioncanimportthesnapshot
byrunningthecommand.Theisolationlevelmustbeset
toRepeatableReadorSerializablebecauseoperatorsusetheirownsnapshotsatthe
ReadCommittedlevel:
=> DELETE FROM accounts;
=> BEGIN ISOLATION LEVEL REPEATABLE READ;
=> SET TRANSACTION SNAPSHOT '00000004-0000006E-1';
Now the second transaction is going to use the snapshot of the first transaction,
andconsequently,itwillseefourrows(insteadofzero):
100
4.7 ExportingSnapshots
=> SELECT count(*) FROM accounts;
count
−−−−−−−
4
(1 row)
Clearly,thesecondtransactionwillnotseeanychangesmadebythefirsttransac-
tionafterthesnapshotexport(andviceversa): regularvisibilityrulesstillapply.
Theexportedsnapshot’slifetimeisthesameasthatoftheexportingtransaction.
=> COMMIT;
=> COMMIT;
101
5
Page Pruning and HOT Updates
5.1 Page Pruning
While a heap page is being read or updated,Postgre can perform some quick
pagecleanup,orpruning.1 Ithappensinthefollowingcases:
• Thepreviousoperationdidnotfindenoughspacetoplaceanewtuple
intothesamepage.Thiseventisreflectedinthepageheader.
100 • The heap page contains more data than allowed by the fillfactor storage pa-
rameter.
Anoperationcanaddanewrowintothepageonlyifthispageisfilled
forlessthanfillfactor percent. Therestofthespaceiskeptforopera-
tions(nosuchspaceisreservedbydefault).
Pagepruningremovesthetuplesthatcannotbevisibleinanysnapshotanymore
p. (thatis,thatarebeyondthedatabasehorizon).Itnevergoesbeyondasingleheap
page, but in return it is performed very fast. Pointers to pruned tuples remain
inplacesincetheymaybereferencedfromanindex—whichisalreadyadifferent
page.
Forthesamereason,neitherthevisibilitymapnorthefreespacemapisrefreshed
(sotherecoveredspaceissetasideforupdates,notforinsertions).
Since a page can be pruned during reads, any  statement can cause page
modifications. Thisisyetanothersuchcaseinadditiontodeferredsettingofin-
p. formationbits.
1 backend/access/heap/pruneheap.c,heap_page_prune_optfunction
102
5.1 PagePruning
Let’s take a look at how page pruning actually works. We are going to create a
two-columntableandbuildanindexoneachofthecolumns:
=> CREATE TABLE hot(id integer, s char(2000)) WITH (fillfactor = 75);
=> CREATE INDEX hot_id ON hot(id);
=> CREATE INDEX hot_s ON hot(s);
IfthescolumncontainsonlyLatinletters,eachheaptuplewillhaveafixedsize
ofbytes,plusbytesoftheheader. Thefillfactor storageparameterisset
to%. Itmeansthatthepagehasenoughfreespaceforfourtuples,butwecan
insertonlythree.
Let’sinsertanewrowandupdateitseveraltimes:
=> INSERT INTO hot VALUES (1, 'A');
=> UPDATE hot SET s = 'B';
=> UPDATE hot SET s = 'C';
=> UPDATE hot SET s = 'D';
Nowthepagecontainsfourtuples:
=> SELECT * FROM heap_page('hot',0);
ctid | state | xmin | xmax
−−−−−−−+−−−−−−−−+−−−−−−−+−−−−−−−
(0,1) | normal | 801 c | 802 c
(0,2) | normal | 802 c | 803 c
(0,3) | normal | 803 c | 804
(0,4) | normal | 804 | 0 a
(4 rows)
Expectedly, we have just exceeded the fillfactor threshold. You can tell it by the
difference between the pagesize and upper values—it is bigger than % of the p.
pagesize,whichisbytes:
=> SELECT upper, pagesize FROM page_header(get_raw_page('hot',0));
upper | pagesize
−−−−−−−+−−−−−−−−−−
64 | 8192
(1 row)
Thenextpage accesstriggers page pruningthat removesallthe outdated tuples.