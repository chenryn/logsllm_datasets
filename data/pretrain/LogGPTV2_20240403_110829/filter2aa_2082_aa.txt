10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
Vulnerable Out of the Box:  
An Evaluation of Android Carrier Devices  
Abstract 
Pre-installed apps and firmware pose a risk due to vulnerabilities that can be pre-positioned on a device, 
rendering the device vulnerable on purchase. To quantify the exposure of the Android end-users to 
vulnerabilities residing within pre-installed apps and firmware, we analyzed a wide range of Android 
vendors and carriers using devices spanning from low-end to flagship. Our primary focus was exposing 
pre-positioned threats on Android devices sold by United States (US) carriers, although our results affect 
devices worldwide. We will provide details of vulnerabilities in devices from all four major US carriers, 
as well two smaller US carriers, among others. The vulnerabilities we discovered on devices offered by 
the major US carriers are the following: arbitrary command execution as the system user, obtaining the 
modem logs and logcat logs, wiping all user data from a device (i.e., factory reset), reading and modifying 
a user’s text messages, sending arbitrary text messages, getting the phone numbers of the user’s contacts, 
and more. All of the aforementioned capabilities are obtained outside of the normal Android permission 
model. Including both locked and unlocked devices, we provide details for 38 unique vulnerabilities 
affecting 25 Android devices with 11 of them being sold by US carriers.  
1. Introduction 
Android devices contain pre-installed apps ranging from a vendor’s custom Settings app to “bloatware.” 
Bloatware can frustrate users due to the difficulty in removing or disabling these potentially unwanted apps. 
In some cases, a user needs to “root” their device to remove the offending software (assuming there is a 
viable root strategy available), potentially voiding their warranty. Pre-installed apps may contain 
vulnerabilities, exposing the end-user to risks that they cannot easily remove. Furthermore, pre-installed 
apps can obtain permissions and capabilities that are unavailable to third-party apps (i.e., those the user 
downloads or sideloads). Apps that signed with the platform key (i.e., platform apps) can execute as the 
same user (i.e., system) as the Android Operating System (OS) framework. A vulnerability within a pre-
installed platform app user can be used to obtain Personally Identifiable Information (PII) and engage in 
aggressive surveillance of the user. We discovered numerous vulnerabilities that allow any app co-located 
on the device to obtain intimate details about the user and their actions on the device. 
Pre-installed apps and firmware provide a baseline for vulnerabilities present on a device even before the 
user enables wireless communications and starts installing third-party apps. To gauge the exposure of 
Android end-users to vulnerabilities residing within pre-installed apps, we examined a range of Android 
devices spanning from low-end devices to flagship devices. Our primary focus was examining Android 
devices sold by United States (US) carriers. We found vulnerabilities in devices from all four major US 
carriers, as well as two smaller US carriers. A complete listing of all the vulnerabilities we found is provided 
in Section 3. The vulnerabilities we found on devices sold by major US carriers are the following: arbitrary 
command execution as the system user, obtaining the modem logs and logcat logs, wiping all user data 
from a device (i.e., factory reset), reading and modifying a user’s text messages, sending arbitrary text 
messages, and getting the phone numbers of the user’s contacts. All of the aforementioned capabilities are 
obtained outside of the normal Android permission model. The vulnerabilities found in pre-installed apps 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
can be leveraged by a third-party app to have the vulnerable app perform some behavior on its behalf due 
to insecure access control mechanisms.  
In addition to US carrier devices, we also examined unlocked Android smartphones. We purchased three 
Android devices while on a recent trip to Southeast Asia. Specifically, we examined the Oppo F5, Vivo V7, 
and the Leagoo P1 devices. According to IDC, Oppo and Vivo respectively had 7.4% and 5.2% global 
market share for smartphones shipped in the first quarter of 20171. These devices contained significant 
vulnerabilities that can be used to perform surveillance of the user. Oppo’s F5 flagship device contains a 
vulnerability that allows any app on co-located on the device to execute arbitrary commands as the system 
user. The capabilities available to apps that can execute commands as the system user is provided in Section 
4. The device also has an open interface that allows the recording of audio, although the command execution 
as system user vulnerability is needed to copy the recorded audio file. The Vivo V7 device contains 
vulnerabilities that allow any third-party app on the device to record the screen, obtain the logcat and kernel 
logs, and change system properties. For example, changing the persist.sys.input.log property to a 
value of yes makes the coordinates of the user’s screen touches and gestures get written to the logcat log. 
The Leagoo P1 device allows any app on the device to programmatically perform a factory reset and to take 
a screenshot that gets written to external storage (i.e., SD card). Furthermore, the Leagoo P1 device has a 
local root privilege escalation via Android Debug Bridge2 (ADB). 
When vendors leave in development and debugging functionality, this can result in a vulnerability that can 
be leveraged by an attacker. These apps should be removed prior to launching a production build available 
to the end user. If these apps are unable to be removed, then these functionalities should not be available to 
the all apps co-located on the device. Ideally, they should be restricted to requiring some sort of human 
involvement prior to obtaining or logging PII. A concerted effort is placed on searching for vulnerabilities 
and threats arising from apps that the downloads from app distribution channels. In addition to looking at 
external apps, an effort should be undertaken to examine the apps already present on the device. 
2. Background 
This section provides additional context for understanding Android concepts relevant to the 
vulnerabilities presented in later sections.   
2.1 Threat Model 
We assume that the user has a generally unprivileged third-party app installed on the target device so that 
it can interact with pre-installed apps on the device through open interfaces. This can be accomplished via 
repackaging apps and listing them on third-party app marketplaces, trojanized app, phishing, social 
engineering, or remote exploit. An interesting attack vector recently employed is that attackers were posing 
as beautiful women, befriending targets, and enticing them to install trojanized apps 3. Most of the 
vulnerabilities we discovered require a local app be installed on the device to exploit the vulnerabilities 
resident in pre-installed apps with the exception being two root privilege escalation vulnerabilities that 
1 https://www.idc.com/getdoc.jsp?containerId=prUS42507917 
2 https://developer.android.com/studio/command-line/adb 
3 https://arstechnica.com/information-technology/2018/04/malicious-apps-in-google-play-gave-attackers-considerable-control-
of-phones/ 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
require the use of ADB. A majority of the vulnerabilities were exploitable due to improper access control 
where an app exposes an interface to all other apps co-located on the device. This open interface can 
potentially be abused wherein a lesser-privileged app uses the capabilities of the vulnerable app as shown 
in Figure 1. All of the vulnerabilities we found do not require any user intervention except the two root 
privilege escalation vulnerabilities. Many of the vulnerabilities do not require any access permissions to 
exploit (e.g., performing a factory reset, sending a text message, command execution as the system user, 
etc.). Other vulnerabilities require the READ_EXTERNAL_STORAGE since external storage is a common 
location for pre-installed apps to dump data. If any app was truly be malicious, the INTERNET permission 
would be needed to exfiltrate the obtained data to a remote location. 
Figure 1. Indirect Access to Protected Resources. 
2.2 Pre-Installed Apps 
We consider a pre-installed app to be an app that is present on the device the first time the user removes the 
phone from the box and boots the phone. Specifically, any app that is installed on the system partition is a 
pre-installed app. These apps were chosen to be on the device by the vendor, carrier, hardware manufacturer, 
etc. The most privileged pre-installed apps are those executing as the system user (i.e., platform apps). For 
an app to execute as the system user, it needs to have the android:sharedUserId attribute set to a value 
of android.uid.system in its AndroidManifest.xml file and be signed with the device platform key. 
Each Android app must contain a valid AndroidManifest.xml file serving as a specification for the app. 
In terms of the core AndroidManifest.xml file that declares the platform’s permissions4, apps executing 
as the system user can obtain permissions with an android:protectionLevel of signature and all pre-
installed apps can obtain permissions with an android:protectionLevel of signatureOrSystem. Neither 
signature nor signatureOrSystem permissions can be obtained by third-party apps, which are limited to 
requesting permissions with an android:protectionLevel of normal and dangerous5.  
2.3 Intents  
An Intent6 is like a message that can contain embedded data that is sent within/between apps. Intents are a 
fundamental communication mechanism in Android. In this paper, most of the vulnerabilities are 
exploited by sending an Intent message from the attacking app to a vulnerable app that has an open 
4 https://android.googlesource.com/platform/frameworks/base/+/master/core/res/AndroidManifest.xml 
5 Some permissions have an android:protectionLevel of development that allows a user to grant them to an app via ADB. 
6 https://developer.android.com/guide/components/intents-filters 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
interface where the Intent will be delivered. Some Intents need to be crafted to exactly what the receiving 
app is expecting with regards to an action string or specific key-value pairs to perform certain behavior.  
2.4 External Storage  
Some of the vulnerabilities in pre-installed apps will dump PII to external storage (i.e., emulated SD card). 
External storage can be accessed by any app that has been granted the READ_EXTERNAL_STORAGE 
permission. Due to it being a shared resource, it is not recommended to write sensitive data to the SD card7. 
Nonetheless, the SD card appears to be a common location where pre-installed apps write sensitive data. 
Pre-installed debugging and development apps may write data to the SD card since it is accessible to the 
ADB user (i.e., shell). In this paper, the terms external storage and SD card will be used synonymously. 
2.5 Bound Services 
Services are one of the four Android application component types from which a user can create an Android 
app. A bound service8 allows a client app to interact with a service using a pre-defined interface. The 
interface between the client and service is generally defined in an Android Interface Definition Language 
(AIDL) file. If the client app contains the corresponding AIDL file from the service at compile time, then 
the communication with the service is straightforward and Remote Procedure Calls (RPCs) can occur 
normally. If the client app lacks the corresponding AIDL file, then this communication is still possible, but 
it is more involved process to explicitly interact with the service. Some vendors may be unaware that 
successful communication between a bound service and client app that lacks the corresponding AIDL file 
is still possible. 
3. Vulnerabilities Discovered 
Table 1 provides a comprehensive list of the vulnerabilities we discovered in pre-installed apps or the 
Android framework in a range of carrier and unlocked Android devices. 
Table 1. Complete Listing of Vulnerabilities. 
Device 
Vulnerability 
Asus ZenFone V Live / 
Asus ZenFone Max 3 
Arbitrary command execution as system user 
Asus ZenFone V Live / 
Asus ZenFone Max 3 
Take screenshot 
Asus ZenFone 3 Max 
Dump bugreport and Wi-Fi passwords to 
external storage 
Asus ZenFone 3 Max 
Arbitrary app installation over the internet 
Essential Phone 
Programmatic factory reset 
ZTE Blade Spark / 
ZTE Blade Vantage / 
ZTE Zmax Champ / 
ZTE Zmax Pro 
Write modem and logcat logs to external storage 
7 https://developer.android.com/training/articles/security-tips#ExternalStorage 
8 https://developer.android.com/guide/components/bound-services  
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
LG G6 / LG Q6 / LG X 
Power / LG Phoenix 2 
Write logcat log to attacking app’s private 
directory 
LG G6 / LG Q6 / LG X 
Power / LG Phoenix 2 
Lock the user out of their device (requiring a 
factory reset to recover in the most cases) 
LG G6 / LG Q6 
Dump logcat log and kernel log to external storage 
Coolpad Defiant / 
Tmobile Revvl Plus / 
ZTE Zmax Pro 
Obtain and modify user’s text messages 
Send arbitrary text messages 
Obtain phone numbers of user’s contacts 
Coolpad Defiant / 
Tmobile Revvl Plus 
Programmatic factory reset 
Coolpad Canvas 
Change system properties as the 
com.android.phone user 
Coolpad Canvas 
Write logcat log, kernel log, and tcpdump capture 
to external storage 
ZTE Zmax Champ 
Programmatic factory reset 
ZTE Zmax Champ 
Brick device with a recovery with consistent 
crashing in recovery mode 
Orbic Wonder 
Programmatic factory reset 
Orbic Wonder 
Write logcat log to external storage 
Orbic Wonder 
Writes content of text messages and phone 
numbers for placed/received calls 
Alcatel A30 
Take screenshot 
Alcatel A30 
Local root privilege escalation via ADB 
Doogee X5 
Video record the screen and write to external 
storage 
Nokia 6 TA-1025 
Take screenshot 
Sony Xperia L1 
Take screenshot 
Leagoo Z5C 
Send arbitrary text message 
Leagoo Z5C 
Programmatic factory reset 
Leagoo Z5C 
Obtain the most recent text message from each 
conversation 
MXQ 4.4.2 TV Box 
Programmatic factory reset 
MXQ 4.4.2 TV Box 
Make device inoperable 
Plum Compass 
Programmatic factory reset 
SKY Elite 6.0L+ 
Arbitrary command execution as system user 
Oppo F5 
Arbitrary command execution as system user 
Oppo F5 
Record audio (requires vulnerability above to 
transfer file to attacking app’s private directory) 
Leagoo P1 
Take screenshot 
Leagoo P1 
Local root privilege escalation via ADB 
Leagoo P1 
Programmatic factory reset 
Vivo V7 
Video record the screen and write it to the 
attacking app’s private directory 
Vivo V7 
Write the logcat and kernel logs to SD card 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
Vivo V7 
Change system properties as the 
com.android.phone user allowing the 
coordinates of touch and gesture data to the logcat 
log 
3.1 Vulnerable US Carrier Android Devices 
Each US carrier has a stable of Android devices that it makes available to consumers. These devices are 
generally locked on the carrier’s network, although they may become unlocked after a certain period of 
time has elapsed. Moreover, devices sold by a carrier tend to come pre-loaded with carrier apps. Table 2 
contains the vulnerabilities we discovered on Android devices sold by US carriers.  