title:Precise enforcement of progress-sensitive security
author:Scott Moore and
Aslan Askarov and
Stephen Chong
Precise Enforcement of Progress-Sensitive Security
Scott Moore
Harvard University
Aslan Askarov
Harvard University
Stephen Chong
Harvard University
ABSTRACT
Program progress (or termination) is a covert channel that may leak
sensitive information. To control information leakage on this chan-
nel, semantic deﬁnitions of security should be progress sensitive
and enforcement mechanisms should restrict the channel’s capac-
ity. However, most state-of-the-art language-based information-
ﬂow mechanisms are progress insensitive—allowing arbitrary in-
formation leakage through this channel—and current progress-sen-
sitive enforcement techniques are overly restrictive.
We propose a type system and instrumented semantics that to-
gether enforce progress-sensitive security more precisely than ex-
isting approaches. Our system is permissive in that it is able to
accept programs in which the termination behavior depends only
on low-security (e.g., public or trusted) information. Our system
is parameterized on a termination oracle, and controls the progress
channel precisely, modulo the ability of the oracle to determine the
termination behavior of a program based on low-security informa-
tion. We have instantiated the oracle for a simple imperative lan-
guage with a logical abstract interpretation that uses an SMT solver
to synthesize linear rank functions.
In addition, we extend the system to permit controlled leakage
through the progress channel, with the leakage bound by an ex-
plicit budget. We empirically analyze progress channels in existing
Jif code. Our evaluation suggests that security-critical programs
appear to satisfy progress-sensitive security.
Categories and Subject Descriptors
D.4.6 [Security and protection]: Information Flow Controls
General Terms
Security, Languages
Keywords
Termination channels, progress channels, information ﬂow
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’12, October 16–18, 2012, Raleigh, North Carolina, USA.
Copyright 2012 ACM 978-1-4503-1651-4/12/10 ...$15.00.
1.
INTRODUCTION
The security of a system can depend upon the termination be-
havior of a program. For conﬁdentiality, program termination is a
covert channel: if conﬁdential information can inﬂuence whether a
program terminates or diverges, then an adversary observing pro-
gram execution may learn this conﬁdential information [4]. For
integrity, if untrusted input inﬂuences the termination behavior of
a program, then an attacker may be able to make a system unavail-
able, by causing a server loop to exit (e.g., “inputs of death” [12])
or by causing a program to diverge (e.g., “inputs of coma” [13]).
Termination channels have traditionally been considered benign
since they were assumed to leak only one bit of information. How-
ever, the situation is worse for interactive systems, where an adver-
sarial observer can observe intermediate output [4]. In such sys-
tems, it is the progress of the computation that leaks secret infor-
mation. Progress channels may leak an arbitrary amount of infor-
mation, as illustrated in the program in Listing 1, in which secret
is a variable that contains a conﬁdential positive integer. The pro-
gram prints out to channel L a number of zeroes equal to the value
of secret, and then diverges. The program thus leaks the value of
secret to an observer of channel L.
i  0) do
:= secret − stride ;
secret
outputL(1) ;
Listing 2: Progress-sensitive secure if stride > 0
are progress insensitive in order to accept useful programs, at the
cost of also accepting programs that leak information via progress
channels.
We propose a type system and a runtime mechanism that together
precisely enforce progress-sensitive security in a simple interactive
imperative language. Our system is parameterized on an oracle
that reasons about the termination behavior of loops. If the ora-
cle determines that the termination or divergence of a loop depends
only on public information, then the termination behavior of the
loop does not reveal any conﬁdential information, and execution
of the loop may proceed. Otherwise, program execution is termi-
nated, thus preventing leakage of conﬁdential information through
the loop’s termination behavior. Our system controls the progress
channel precisely, modulo the ability of the oracle to determine the
termination behavior of loops. As analyses for program termination
improve, so will the precision of our enforcement.
The oracle reasons at run time about termination behavior. This
allows the oracle to be more precise, as it may use public infor-
mation speciﬁc to a particular execution of the program. It would
of course be possible for the oracle to reason statically, providing
run-time performance beneﬁts, perhaps at the cost of precision.
Our system soundly enforces progress-sensitive security, reject-
ing programs that leak information via progress channels. (Such
programs would be accepted by existing progress-insensitive type
systems.) We have implemented a prototype of the oracle using
logical abstract interpretation for termination analysis. This oracle
is sufﬁciently precise to allow us to accept as secure some programs
that progress-sensitive type systems reject.
Example. The program in Listing 2 contains a loop with a guard
that depends on conﬁdential information: the contents of variable
secret. An observer of channel L will see a zero output, and, de-
pending on whether the loop terminates, an output of one. Does this
program reveal conﬁdential information to the observer of chan-
nel L? Provided the public variable stride is positive, the loop is
guaranteed to terminate, as the value in secret will eventually be
negative. If stride is non-positive, then the termination behavior
depends on conﬁdential information:
the initial value of secret.
Since the value of stride cannot be determined statically, a purely
static enforcement technique would not be able to accept this pro-
gram as secure. Provided the oracle is sufﬁciently sophisticated, in
an execution where stride is positive, our system would be able to
accept the execution as secure, and allow execution to continue.1
outputL(0) ;
while ( secret > 0) do
:= secret + 1;
secret
outputL(1) ;
Listing 3: Progress-sensitive insecure
1Our system actually requires a cast annotation on the loop, which
indicates that the oracle must examine the loop at run time. The
cast annotation is described in Section 2.
Example. By contrast, the program in Listing 3 always reveals
conﬁdential information: a value of one is output on channel L if
and only if the initial value of secret is non-positive. Most existing
information-ﬂow security type systems would accept this program
as secure, despite the information leak through the progress chan-
nel. Our system rejects this program, since the oracle is unable to
prove that the termination behavior of this program depends only
on public information.
Budgeted semantics For some programs, it may be acceptable
to have some information leaked through progress channels. We
extend our system with an explicit budget for information leakage
through the progress channel. The amount of information leaked
via progress channels is tracked at runtime: for each loop that is
encountered where the termination behavior may leak high-security
information, the budget is reduced. Once the budget limit is reached,
the program is terminated, preventing additional conﬁdential infor-
mation from being leaked. The budget allows us to establish an
information theoretic bound on the information leaked via progress
channels, and provides a continuum of security between progress
sensitive and progress insensitive security conditions.
The rest of the paper is structured as follows. In Section 2 we
present a simple interactive imperative language with an annota-
tion that indicates that the termination oracle should be consulted
at run time. We present a type system in Section 3. The type system
and runtime semantics enforce a progress sensitive security condi-
tion, which we discuss in Section 4. Section 5 extends our system
and our security guarantees with a budget for leaking information
through the progress channel. We extend our results from a simple
two-point lattice of security levels to arbitrary security lattices in
Section 6.
We have implemented the type system and runtime system, in-
cluding a termination oracle that uses logical abstract interpretation
to reason about program termination and an SMT solver to synthe-
size linear rank functions to help prove termination. Section 7 de-
scribes our implementation. In addition, we have modiﬁed the Jif
compiler [35] to track progress channels, and applied the modiﬁed
compiler to a large Jif program, which we also describe in Sec-
tion 7. By manual inspection we determined that all loops detected
by the modiﬁed compiler are guaranteed to terminate, and more-
over, it is straightforward to reason that they terminate. We thus
believe that it is practical and feasible to enforce progress sensitive
security.
Section 8 discusses applications and extensions of our system
together with a survey of related work. We conclude in Section 9.
2. LANGUAGE AND SEMANTICS
We present a simple imperative language in which to explore
enforcement of progress-sensitive security guarantees. We assume
a lattice (L,(cid:118)), such that L is a set of security levels, and (cid:118) is a
relation over L that indicates permitted information ﬂow between
security levels: for l1, l2 ∈ L, if l1 (cid:118) l2, then information at
security level l1 may ﬂow to security level l2. We write l1 (cid:116) l2
for the join of l1 and l2. For clarity, we initially assume that L =
{L, H}, and L (cid:118) H but H (cid:54)(cid:118) L. Security levels can describe the
conﬁdentiality or integrity of information. Intuitively, L represents
low security (public or trusted) information, and H represents high
security (secret or untrusted) information. In this paper, we focus
on reasoning about the conﬁdentiality of information, although our
results also apply to integrity. In Section 6 we generalize our results
to arbitrary lattices.
Language syntax is presented in Figure 1. Commands are mostly
standard, with the exception of an explicit output command, and a
882Values
Expressions
Commands
v
e
c
::= n
::=
::=
v | x | e1 ⊕ e2
skip | stop | x := e | c1; c2 |
outputl(e) | if e then c1 else c2 |
while e do c | castp[c]
Figure 1: Language syntax
“cast” command, described below. Expressions consist of values v,
program variables x, and total binary operations over expressions.
For simplicity, we restrict values to integers. Output command
outputl(e) evaluates expression e to a value, and outputs the value
on channel l. Without loss of generality, we assume that there is
one channel for each security level.
We also assume a security environment Γ that maps variables to
security levels. Intuitively, if Γ(x) = l, then only information at se-
curity level l or below will ever be stored in variable x. The security
environment is used both in the runtime semantics of the language
(speciﬁcally, by the cast command), and in the type system.
Cast command castp[c] dynamically checks whether the termi-
nation behavior of c is determined by the current values of low-
security variables (i.e., variables x such that Γ(x) = L). Every
command castp[c] has a unique label p, which is used to identify
the program point of the command. Whenever this label is clear
from the context or is unimportant (as in most of the examples) we
omit it for clarity.
Intuitively, we are concerned with protecting the initial values
of high-security variables (i.e., variables x such that Γ(x) = H).
We assume that there is an attacker that knows the initial values
of low-security variables and observes outputs on the channel for
security level L. An execution of a program is regarded as secure
if the attacker is unable to learn anything about the initial values of
high-security variables. This will be deﬁned formally in Section 4.
Semantics A memory is a function from variables to values. We
say that two memories m1 and m2 are low equivalent, written
m1 ≈L m2, when they agree on the values of low-security vari-
ables: m1 ≈L m2 (cid:44) ∀x. Γ(x) (cid:118) L. m1(x) = m2(x).
An output trace is a ﬁnite list of the form (v1, l1) :: (v2, l2) ::
··· :: (vn, ln), where each (vi, li) corresponds to an output of value
vi on channel li, and (vn, ln) is the most recent output. An empty
output trace is denoted by . The projection of output trace o, de-
noted o(cid:22)L, contains all and only values of o that were output to
channel L:
(cid:40)
(cid:22)L = 
o :: (v, l)(cid:22)L =
(o(cid:22)L) :: v
o(cid:22)L