Obviously in such an assignment of variables in φ there
may be some clauses which are satisﬁed in φ′, but not in φ.
Let Sx be Nx, if∣Px∣>∣Nx∣, and Px otherwise (so Sx is the set
and let Qx be Px∪Nx∖Sx. Let us assume w.l.o.g. that Qx = Px
and Sx = Nx. Each of the literals in Sx appears in exactly one
clause of φ, so there are at most ∣Sx∣ clauses in φ which were
in Qx there is a clause ¬ti
satisﬁed by literals in Sx in φ′. But for each xj in Sx and xi
i . Therefore there are three
j ∨¬tj
possibilities:
1)
2)
3)
j is
unsatisﬁed.
unsatisﬁed.
j ∨¬tj
Some implication in xi (cid:14)⇒ ti
Some implication in xj (cid:14)⇒ tj
Clause ¬ti
1 (cid:14)⇒ . . . (cid:14)⇒ ti
1 (cid:14)⇒ . . . (cid:14)⇒ tj
If for all literals in Qx, Case 1 holds, then there are ∣Qx∣>
∣Sx∣ unsatisﬁed clauses. Similarly if Case 2 holds for all literals
in Sx, then there are ∣Sx∣ unsatisﬁed clauses. Otherwise let l =
max{j ∣ xj ∈ Sx}. Then let xi ∈ Qi be such that xi = ti
be number of literals in S(x) for which Case 2 holds. Then
for other ∣S(x)∣− k literals in S(x) and xi, Case 3 must hold.
Therefore there are at least k+∣S(x)∣− k =∣S(x)∣ unsatisﬁed
i is unsatisﬁed.
l. Let k
i is
clauses.
None of these clauses is in φ and the sets of these clauses
for different variables are disjoint, and hence, there are at
least ∑x∣S(x)∣ clauses which are unsatisﬁed in φ′, but do not
based on majority voting we unsatisfy at most S(x) clauses,
so in total there are at most ∑x∣S(x)∣ clauses which are
appear in φ. On the other hand by assigning the value of x
unsatisﬁed in φ, but are satisﬁed in φ′. Therefore the number
of unsatisﬁed clauses in φ is at most k.
7) Splitting clauses into policies: Recall
that for each
variable in one gadget there may be at most two clause nodes,
one containing the positive literal and one containing the
negative literal. Also nodes for a clause must be in different
policies, so that we are able to construct the clause gadget. In
this section we will show how to split nodes for clauses into
two policies to satisfy those requirements.
We will assume that the Max-2SAT formula was created
using the reduction described in Section III-B6. To split the
implication x (cid:14)⇒ ti
clauses we consider the variables of φ in any order. Then,
each variable xi is in two clauses, once as a positive literal in
the clause from φ, which we may be forced to put in one of
the policies, if the other variable from this clause has already
been processed. The other occurence is as a negative literal in
1, which we put in any of the policies.
j appears in 3 clauses (except for j = px). As a
j−1 (cid:14)⇒ ti
Then each ti
positive literal it appears only in the implication ti
which we assign to the other policy than ti
j,
j. As a negative
k has
already been processed, we may be forced to put it in one of
the policies, and then to the other policy to which we assign
clause ti
j+1 has not
been processed yet.
literal, it appears in the clause ¬ti
j+1: this is always possible, as ti
j (cid:14)⇒ ti
k, for some l, k; if tl
j∨ tl
8) Proof of reduction: We will start by proving that if the
multiple policies instance can be updated using n+ k touches
then at least m− k clauses of the Max-2SAT formula can be
satisﬁed. In what follows variable gadget nodes will be all
nodes in the gadget except for those that are in the clause
gadget (in terms of Figure 9 these are all nodes except those
with an outgoing loosely dashed grey edge). Then let X1 be
the set of those variables, such that all nodes in their variable
gadgets are updated using one touch. Also, let X2 be the set
of those variables for which there is a node in their variable
gadgets which were updated twice. Also let D be the set of
those clauses, such that there is some node in their gadgets,
which used two touches. Because clause gadget nodes and
variable gadget nodes are disjoint, ∣D∣+∣X2∣≤ k.
Then, we set each variable in X1 to be 1, if its node is
updated in the ﬁrst round, or to 0, if its node is updated in
the third round. Each variable x in X2 appears in at most 3
clauses, therefore we can choose the assignment which does
not satisfy at most one of these clauses. In such an assignment
a clause C can be unsatisﬁed if:
C ∈ D
1)
2)
One of the nodes of C was updated using the clause
gadget, and the other using an extra touch in some
variable gadget.
Now suppose that there is an unsatisﬁed clause C for which
none of those cases hold. Then, both variables of C are in X1.
One of the nodes of C can be updated in the second round
using the clause gadget. Then the other node, as we have seen
in Section III-B2, cannot be updated using the clause gadget.
139
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:17:41 UTC from IEEE Xplore.  Restrictions apply. 
And because of our case assumption, it can also not be updated
using a variable node. Since all of the other edges are updated
in the same or a later round, such an update schedule would
violate loop-freedom.
Therefore in the Max-2SAT formula, there are at most ∣D∣
clauses for Case 1 and ∣X2∣ clauses for Case 2, so together
there are at most ∣D∣+∣X2∣≤ k unsatisﬁed clauses.
Now we will prove that if m − k clauses of the Max-
that uses n+ k touches. For each variable we will update its
2SAT formula can be satisﬁed, then there exists a schedule
node in the ﬁrst round, if it is set to 1, or in the third round,
if it set to 0. For each clause we will update one of its clause
gadget nodes, which will allow us to update a clause node
corresponding to the false literal (in case of satisﬁed clauses
there is at most one such node, and in case of unsatisﬁed
clauses we arbitrarily choose one of two nodes). Then, both
nodes of the satisﬁed clauses and one node of the unsatisﬁed
clauses can be updated in the second round. The nodes of
the unsatisﬁed clauses, which cannot be updated in the second
round, will be updated in the third round; we will need two
touches to achieve this. The remaining nodes will be updated
according to their type, using one touch.
All nodes of type F BBF in the variable gadget can be
updated in the second round, as the packets that traverse them
would be forwarded to the end of the variable gadget, and all
the other nodes can always be updated in the ﬁrst or third
round respectively; therefore,the schedule is correct. Since we
use extra touches only for unsatisﬁed clauses (one extra touch
for each clause), we have n+ k touches in our schedule.
IV. EFFICIENT SCHEDULE COMPOSITION
We now present an efﬁcient algorithm which allows to
efﬁciently merge (or compose) correct update schedules of in-
dividual policies, into a global schedule with minimal touches.
Indeed, over the last years, a number of algorithms have been
proposed to update a single policy in a consistent manner [22],
[25], and the algorithm presented in the following, could serve
as a generic post-processor, combining the outputs of these
existing algorithms into an optimal global schedule.
In the following, we ﬁrst present the algorithm and prove
that it is optimal and runs in polynomial time, for a constant
number of policies. However, we then also show that if the
number of policies can be non-constant, the problem of how
to optimally merge schedules is computationally hard as well.
Let us ﬁrst assume that we are given the order of to be
updated nodes in their respective policies, and without loss of
generality, we assume that in each policy only one node is
updated per round. Therefore we will assume that in the joint
schedule also only one node is updated in each round. Our
goal is to construct a joint schedule that minimizes the number
of touches without any constraints on number of rounds. For
instance, a simple way to compute these individual correct
update schedules, is to update switches one by one, from the
destination to the source. This creates a total order of the
switches and guarantees loop-freedom.
The problem of how to optimally merge correct schedules
is a special case of shortest common supersequence problem.
Here, each node corresponds to a letter in the alphabet, and
each policy order corresponds to an input sequence. Then
the requirement that in the joint schedule there is an update
of node v before an update of node u, is equivalent to the
requirement that in supersequence w there is an occurence
of character v before some occurence of character u. In
comparison to the general SCS problem, in our problem, in
each policy order, each node appears at most once: in the SCS
input sequences each character is unique.
SCS is known to have a polynomial time algorithm if
hard if the number of input sequences is not constant [26],
the number of input sequences is constant, and to be NP-
[40]. Jiang and Li proved that unless P = NP, SCS cannot
of length OP T +O(OP T 0.707) [15]. In the remainder of this
with a constant number of input sequences and a proof ofNP-
be approximated with a constant factor, and provided an
algorithm that on average returns a common supersequence
section we will present the polynomial time algorithm for SCS
hardness of our problem.
of
where each vi
The algorithm for solving SCS is dynamic. The idea
of the algorithm is to compute the shortest common su-
persequence for all preﬁxes of input sequences. Let T be
the m-dimensional matrix, one dimension per policy, and
where each dimension lists different preﬁx lengths. The
matrix stores the lengths of the shortest common superse-
the shortest common supersequence of v1, v2, . . . , vm,
two sets of se-
quences of preﬁxes, i.e., T[v1, v2, . . . , vm] stores the length
quences A = {v1, . . . , vm} and B = {u1, . . . , uk}, we will
also use T[A] to denote T[v1, . . . , vm] and T[A, B] to de-
note T[v1, . . . , vm, u1, . . . , uk]. Let Sc(v1, . . . , vm) be a set
and let Qc(v1, . . . , vm) be a set of those sequences that end
with a character other than c. For a sequence v, let v[−1]
let ˜S ={˜v ∣ v ∈ S}.
denote its last element, let ˜v be v without its last element, and
of those sequences from v1, . . . , vm that end with character c
is a preﬁx of wi. For
To
compute
the
shortest
common
supersequence
of v1, . . . , vm, we have to decide on the last
in
the supersequence. Possible candidates are the last
letters
of any v1, . . . , vm, hence, for each of them we compute
the set of sequences that end with the same letter and
remove it. All
remain the same.
Therefore the formula to compute the length of the shortest
common supersequence is as
follows: T[v1, . . . , vm] =
1+ mini∈{1,...,m} T[ ˜Svi[−1](v1, . . . , vm), Qvi[−1](v1, . . . , vm)]
the other
sequences
letter
Each sequence has a length of at most n, so we have
to compute nm values in the array and to compute each of
them, we need O(m) time. Therefore the space complexity
is O(nm) and the time complexity is O(mnm), which, as
long as number of sequences (i.e., policies) is constant, is
polynomial.
To clarify the algorithm, we provide a simple example on
its procedure. Assume v1 = ab, v2 = bc. Obviously the shortest
140
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:17:41 UTC from IEEE Xplore.  Restrictions apply. 
common supersequence is abc and has length 3.
T[ab, bc]= 1+ min{T[ ˜Sb, Qb]= T[a, bc]
T[ ˜Sc, Qc]= T[b, ab]
T[b, ab]= 1+ min{T[ ˜Sb, Qb]= T[a]
T[ ˜Sb, Qb]= T[a]
T[a]= 1
(1)
(2)
(3)
In Eq. (1), we look for the minimum value of remaining
vs after ﬁxing the last character (b and c). We omit the details
for T[a, bc] (ﬁxing b) which has a length of 4, and only show
the path to the minimum solution. In Eq. (2) both sequences
end with b, hence we do only have one character remaining.
This leads to the correct solution of abc with length 3.
In summary, ordered update schedules can be merged
optimally in polynomial time. To achieve a global order (as
an input to our algorithm), we could for example deﬁne a
canonic order on the nodes updated in the same round. As a
heuristic, one could also generate a small number of random
(but correct) schedules, and test with our algorithm, which
one provides the overall best performance, before issuing the
update requests to the nodes. Moreover, in order to minimize
the number of rounds, the result of the optimal algorithm can in
turn be post-processed by greedily grouping individual switch
updates into rounds.
While the merging scheme is interesting, we can only
achieve a polynomial runtime for a constant number of nodes:
the computational tractability does not extend to scenarios with
arbitrarily many policies, even in settings where one node is
updated per round. We will adapt the proof by Timkovskii [40]
and present a polynomial-time reduction from the Directed
Feedback Vertex Set Problem (DFVS). The DFVS problem is
deﬁned over a directed graph G = (V, E), and asks for a
minimum size set of vertices whose removal leaves a graph