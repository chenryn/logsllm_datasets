# Title: Fast and Automated Generation of Attack Signatures: A Basis for Building Self-Protecting Servers

## Authors: Zhenkai Liang and R. Sekar
### Department of Computer Science, Stony Brook University, Stony Brook, NY, USA
#### Email: {zliang, sekar}@cs.stonybrook.edu

---

## Abstract

Large-scale attacks, such as those launched by worms and botnets, pose a significant threat to our network-centric society. Traditional approaches like software patches are often insufficient due to the rapid discovery of new vulnerabilities. In this paper, we introduce a novel approach, called COVERS (Context-based, Vulnerability-oriented Signature), which provides effective protection against a wide range of attacks that exploit memory errors in C/C++ programs.

COVERS uses forensic analysis of a victim server's memory to correlate attacks with network inputs and automatically generates signatures that characterize malicious inputs. These signatures capture the underlying vulnerability rather than specific attack characteristics, making them effective against attack variants. Our approach introduces low overheads (under 10%), does not require access to the source code of the protected server, and has successfully generated signatures without false positives in our experiments. The signatures can be generated in tens of milliseconds, enabling quick distribution over the Internet to filter out fast-spreading worms. Additionally, COVERS can defeat guessing attacks on address-space and instruction set randomization techniques, and it increases the server's capacity to withstand repeated attacks by a factor of 10 or more.

**Categories and Subject Descriptors:**
K.6.5 [Security and Protection]: Unauthorized access, Invasive software

**General Terms:**
Security, Management

**Keywords:**
Memory error, Buffer overflow, Signature generation, Denial-of-service protection, Worm defense

**Support:**
This research is supported in part by an ONR grant N000140110967 and an NSF grant CCR-0208877.

**Copyright Notice:**
Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. To copy otherwise, to republish, to post on servers, or to redistribute to lists, requires prior specific permission and/or a fee. CCS'05, November 7â€“11, 2005, Alexandria, Virginia, USA. Copyright 2005 ACM 1-59593-226-7/05/0011 ...$5.00.

---

## 1. Introduction

In recent years, there has been a significant increase in large-scale, automated attacks carried out by numerous hosts on the Internet. These attacks, often perpetrated by worms, botnets, or large groups of hackers, share several common characteristics: they originate from multiple sources, target a substantial fraction of vulnerable hosts, and are repetitive. Buffer overflow attacks, which exploit memory errors in C/C++ programs, are particularly popular due to the control they provide over victim hosts.

The current best defense against such attacks is the deployment of software patches. While patches effectively filter out attacks without impacting legitimate requests, they have limitations. Patches are not available for zero-day vulnerabilities, and even for known vulnerabilities, there is often a delay between identification and patch availability. This makes patches inadequate against large-scale, repetitive attacks.

Another line of defense includes memory-error exploitation detection techniques such as StackGuard, address-space randomization, and complete memory-error protection. Although these techniques can detect attacks before system resources are compromised, they do not protect the integrity of the victim process. Consequently, the safest recovery method is to terminate the victim process, which can lead to repeated server restarts and service unavailability during attacks. Furthermore, studies have shown that repetitive attacks can defeat probabilistic protection techniques like address-space and instruction set randomization.

In contrast, our approach, COVERS, provides effective protection against large-scale, repetitive attacks by automatically generating attack signatures. These signatures are used to filter out future occurrences of similar attacks, preserving both the integrity and availability of the service. The filters can be deployed within the server's address space or as inline network filters. Since the signatures capture the underlying vulnerability, they are effective against polymorphic worms.

### 1.1 Overview of Approach and Key Contributions

Our approach consists of four main steps:

1. **Attack Detection:**
   We use existing techniques such as StackGuard, address-space randomization (ASR), and instruction-set randomization (ISR) to detect buffer overflow attacks.

2. **Correlation to Input:**
   This step identifies the specific network packet involved in an attack and the bytes within the packet that caused the attack. This enables focused signature generation. Previous work using taint analysis has high runtime overheads, but our approach is more efficient. We perform a forensic analysis of the victim process memory to identify the corrupted pointer value and match it with recent inputs. This step is only performed when an attack is detected, ensuring no performance impact during normal operation.

3. **Identifying Input Context:**
   This step determines the logical input context within which an attack appears, such as a specific field in a message. This information helps restrict signature matching to relevant fields, reducing false positives. We use simple message format specifications to guide this step, which are readily available from network protocol specifications like IETF RFCs.

4. **Signature Generation:**
   This step generates signatures based on the characteristics of the underlying vulnerability, such as excessively long message fields or the presence of binary data in text fields.

### 1.2 Benefits of the Approach

We evaluated our approach experimentally, and the results demonstrate the following benefits:

- **Effectiveness Against Attacks:**
  COVERS generated effective signatures to stop all the attacks in our experiments.

- **Fast Signature Generation:**
  Our approach typically generates signatures with just a single sample, and the overall time for signature generation is around ten milliseconds.

- **Low Overheads:**
  COVERS introduces low overheads of under 10% during normal operation.

- **No False Positives:**
  For all evaluated attacks, our approach did not produce any false positives.

- **Applicable to COTS Software:**
  COVERS does not require modifications to the protected server software or access to its source code.

These features enable the following objectives:

- **Effective Protection Against Denial-of-Service:**
  Servers protected by COVERS can withstand repetitive attacks at a rate at least 10 times higher than unprotected servers.

- **Protection from Attacks on Randomization:**
  COVERS can defend against guessing attacks on address-space and instruction set randomization techniques.

- **Protection from Polymorphic Attacks:**
  COVERS generates signatures that characterize the underlying vulnerability, making them effective against attack variants.

- **Network-Wide Signature Deployment:**
  The speed of signature generation allows for quick distribution and deployment over the Internet to stop fast-spreading worms. Receivers can verify signatures before deployment by comparing them against recent inputs.

### 1.3 Organization of the Paper

The rest of the paper is organized as follows:
- Sections 2-5 describe the four steps of our approach.
- Section 6 details the implementation.
- Section 7 presents the evaluation.
- Section 8 discusses related work.
- Section 9 provides concluding remarks.

---

## 2. Attack Detection

For attack detection, we can utilize existing techniques for memory-error exploit protection, such as StackGuard, address-space randomization (ASR), instruction set randomization (ISR), and complete memory-error protection. In this paper, we use ASR because it offers broad coverage against memory error exploits, has low overheads, and does not pose backward compatibility issues.

---

[The rest of the sections (3-9) would follow a similar structure, detailing each step, the implementation, evaluation, related work, and concluding remarks.]