  while (!feof (stream) 
         && !ferror (stream) 
         && fgets (buffer, sizeof (buffer), stream) != NULL) 
    fputs (buffer, stdout); 
} 
int main () 
{ 
  int fds[2]; 
  pid_t pid; 
  /* 创建一个管道。代表管道两端的文件描述符将被放置在 fds 中。*/ 
  pipe (fds); 
  /* 创建子进程。*/ 
  pid = fork (); 
  if (pid == (pid_t) 0) { 
    FILE* stream; 
    /* 这里是子进程。关闭我们得到的写入端文件描述符副本。*/ 
    close (fds[1]); 
    /* 将读取端文件描述符转换为一个 FILE 对象然后从中读取消息 */ 
    stream = fdopen (fds[0], "r"); 
    reader (stream); 
    close (fds[0]); 
  } 
  clse { 
    /* 这是父进程。*/ 
    FILE* stream; 
    /* 关闭我们的读取端文件描述符副本。*/ 
    close (fds[0]); 
    /* 将写入端文件描述符转换为一个 FILE 对象然后写入数据。*/ 
    stream = fdopen (fds[1], "w"); 
    writer ("Hello, world.", 5, stream); 
    close (fds[1]); 
  } 
  return 0; 
www.AdvancedLinuxProgramming.com 
94
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
} 
在 main 函数开始的时候，fds 被声明为一个包含两个整型变量的数组。对 pipe 的调
用创建了一个管道，并将读写两个文件描述符存放在这个数组中。程序随后创建一个子进程。
在关闭了管道的读取端之后，父进程开始向管道写入字符串。而在关闭了管道的写入端之后，
子进程开始从管道读取字符串。 
注意，在 writer 函数中，父进程在每次写入操作之后通过调用 fflush 刷新管道内容。
否则，字符串可能不会立刻被通过管道发送出去。 
当你调用 ls | less 这个命令的时候会出现两次 fork 过程：一次为 ls 创建子进程，
一次为 less 创建子进程。两个进程都继承了这些指向管道的文件描述符，因此它们可以通
过管道进行通信。如果希望不相关的进程互相通信，应该用 FIFO 代替管道。FIFO 将在 5.4.5
节“FIFO”中进行介绍。 
5.4.3 重定向标准输入、输出和错误流 
你可能经常希望创建一个子进程，并将一个管道的一端设置为它的标准输入或输出。利
用 dup2 系统调用你可以使一个文件描述符等效于另外一个。例如，下面的命令可以将一个
进程的标准输入重定向到文件描述符 fd： 
dup2 (fd, STDIN_FILENO); 
符号常量 STDIN_FILENO 代表指向标准输入的文件描述符。它的值为 0。这个函数会
关闭标准输入，然后将它作为 fd 的副本重新打开，从而使两个标识符可以互换使用。               
相互等效的文件描述符之间共享文件访问位置和相同的一组文件状态标志。因此，从
fd 中读取的字符不会再次从标志输入中被读取。 
列表 5.8 中的程序利用dup2 系统调用将一个管道的输出发送到sort命令。
２当创建了
一个管道之后，程序生成了子进程。父进程向管道中写入一些字符串，而子进程利用dup2
将管道的读取端描述符复制到自己的标准输入，然后执行sort程序。 
代码列表 5.8 （dup2.c）用 dup2 重定向管道输出 
#include  
#include  
#include  
#include  
int main () 
{ 
  int fds[2]; 
  pid_t pid; 
  /* 创建管道。标识管道两端的文件描述符会被放置在 fds 中。*/ 
  pipe (fds); 
  /* 产生子进程。*/ 
www.AdvancedLinuxProgramming.com 
95
２ sort 程序从标志输入按行读取文本信息，按照字母序进行排列，然后输出到标准输出。 
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
  pid = fork (); 
  if (pid == (pid_t) 0) { 
    /* 这里是子进程。关闭我们的写入端描述符。*/ 
    close (fds[1]); 
    /* 将读取端连接到标准输入*/ 
    dup2 (fds[0], STDIN_FILENO); 
    /* 用 sort 替换子进程。*/ 
    execlp ("sort", "sort", 0); 
  } 
  else { 
    /* 这是父进程。*/ 
    FILE* stream; 
    /* 关闭我们的读取端描述符。*/ 
    close (fds[0]); 
    /* 将写入端描述符转换为一个 FILE 对象，然后将信息写入。*/ 
    stream = fdopen (fds[1], "w"); 
    fprintf (stream, "This is a test.\n"); 
    fprintf (stream, "Hello, world.\n"); 
    fprintf (stream, "My dog has fleas.\n"); 
    fprintf (stream, "This program is great.\n"); 
    fprintf (stream, "One fish, two fish.\n"); 
    fflush (stream); 
    close (fds[1]); 
    /* 等待子进程结束。*/ 
    waitpid (pid, NULL, 0); 
  } 
  return 0; 
} 
5.4.4 popen 和 pclose 
管道的一个常见用途是与一个在子进程中运行的程序发送和接受数据。而 popen 和
pclose 函数简化了这个过程。它取代了对 pipe、fork、dup2、exec 和 fdopen 的一系
列调用。 
下面将使用了 popen 和 pclose 的列表 5.9 与之前一个例子（列表 5.8）进行比较。 
代码列表 5.9 （popen.c）使用 popen 的示例 
#include  
#include  
int main () 
{ 
www.AdvancedLinuxProgramming.com 
96
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
  FILE* stream = popen ("sort", "w"); 
  fprintf (stream, "This is a test.\n"); 
  fprintf (stream, "Hello, world.\n"); 
  fprintf (stream, "My dog has fleas.\n"); 
  fprintf (stream, "This program is great.\n"); 
  fprintf (stream, "One fish, two fish.\n"); 
  return pclose (stream); 
} 
通过调用 popen 取代 pipe、fork、dup2 和 execlp 等，一个子进程被创建以执行了
sort 命令，。第二个参数，”w”，指示出这个进程希望对子进程输出信息。Popen 的返回值
是管道的一端；另外一端连接到了子进程的标准输入。在数据输出结束后，pclose 关闭了
子进程的流，等待子进程结束，然后将子进程的返回值作为函数的返回值返回给调用进程。 
传递给 popen 的第一个参数会作为一条 shell 命令在一个运行/bin/sh 的子进程中执
行。Shell 会照常搜索 PATH 环境变量以寻找应执行的程序。如果第二个参数是"r"，函数会
返回子进程的标准输出流以便父进程读取子进程的输出。如果第二个参数是"w"，函数返回
子进程的标准输入流一边父进程发送数据。如果出现错误，popen 返回空指针。 
调用 pclose 会关闭一个由 popen 返回的流。在关闭指定的流之后，pclose 将等待子
进程退出。 
5.4.5 FIFO 
先入先出（first-in, first-out, FIFO）文件是一个在文件系统中有一个名字的管道。任何
进程均可以打开或关闭 FIFO；通过 FIFO 连接的进程不需要是彼此关联的。FIFO 也被称为
命名管道。 
可以用 mkfifo 命令创建 FIFO；通过命令行参数指定 FIFO 的路径。例如，运行这个
命令将在/tmp/fifo 创建一个 FIFO： 
% mkfifo /tmp/fifo 
% ls -l /tmp/fifo 
prw-rw-rw-  1 samuel users   0 Jan 16 14:04 /tmp/fifo 
ls 输出的第一个字符是 p，表示这个文件实际是一个 FIFO（命名管道）。在一个窗口
中这样从 FIFO 中读取内容： 
% cat  /tmp/fifo 
然后输入几行文字。每次你按下回车后，当前一行文字都会经由 FIFO 发送到第一个窗
口。通过在第二个窗口中按 Ctrl+D 关闭这个 FIFO。运行下面的命令删除这个 FIFO： 
% rm /tmp/fifo 
创建 FIFO 
通过编程方法创建一个 FIFO 需要调用 mkfifo 函数。第一个参数是要创建 FIFO 的路
径，第二个参数是被创建的 FIFO 的属主、属组和其它用户权限。关于权限，第十章“安全”
的 10.3 节“文件系统权限”中进行了介绍。因为管道必然有程序读取信息、有程序写入信
息，因此权限中必须包含读写两种权限。如果无法成功创建管道（如当同名文件已经存在的
时 候 ）， mkfifo 返 回 -1 。 当 你 调 用 mkfifo 的 时 候 需 要 包 含  和
www.AdvancedLinuxProgramming.com 
97
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
。 
访问 FIFO 
访问 FIFO与访问普通文件完全相同。要通过 FIFO通信，必须有一个程序打开这个 FIFO
写入信息，而另一个程序打开这个 FIFO 读取信息。底层 I/O 函数（open、write、read、
close 等，列举在附录 B“底层 I/O”中）或 C 库 I/O 函数（fopen、fprintf、fscanf、
fclose 等）均适用于访问 FIFO。 
例如，要利用底层 I/O 将一块缓存区的数据写入 FIFO 可以这样完成： 
int fd = open (fifo_path, O_WRONLY); 
write (fd, data, data_length); 
close (fd); 
利用 C 库 I/O 从 FIFO 读取一个字符串可以这样做： 
FILE* fifo = fopen (fifo_path, "r"); 
fscanf (fifo, "%s", buffer"); 
fclose (fifo); 
FIFO 可以有多个读取进程和多个写入进程。来自每个写入进程的数据当到达 
PIPE_BUF（Linux 系统中为 4KB）的时候会自动写入 FIFO。并发写入可能导致数据块的互
相穿插。同步读取也会出现相似的问题。 
与 Windows 命名管道的区别 
Win32 操作系统的管道与Linux系统中提供的相当类似。（相关技术细节可以从Win32 库
文档中获得印证。）主要的区别在于，Win32 系统上的命名管道的功能更接近套接字。Win32
命名管道可以用于连接处于同一个网络中不同主机上的不同进程之间相互通信。Linux系统
中，套接字被用于这种情况。同时，Win32 保证同一个命名管道上的多个读——写连接不出
现数据交叉情况，而且管道可以用于双向交流。
３
5.5 套接字 
套接字是一个双向通信设备，可用于同一台主机上不同进程之间的通信，也可用于沟通
位于不同主机的进程。套接字是本章中介绍的所有进程间通信方法中唯一允许跨主机通信的
方式。Internet 程序，如 Telnet、rlogin、FTP、talk 和万维网都是基于套接字的。 
例如，你可以用一个Telnet程序从一台网页服务器获取一个万维网网页，因为它们都使
用套接字作为网络通信方式
４。可以通过执行telnet www.codesourcery.com 80 连接到