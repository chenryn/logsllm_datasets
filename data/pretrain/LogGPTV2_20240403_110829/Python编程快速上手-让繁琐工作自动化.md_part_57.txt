浮点值，而resize()要求的尺寸是整数，所以要记得将结果用 int()函数转换成整数。
最后，新的width值就设置为SQUARE_FIT_SIZE。
如果height大于或等于width（这两种情况都在else子句中处理），那么进行同
样的计算，只是交换height和width变量的位置。
在width和height包含新图像尺寸后，将它们传入resize()方法，并返回的Image
对象保存在im中。
第4步：添加徽标，并保存更改
不论图像是否调整大小，徽标仍应粘贴到右下角。徽标粘贴的确切位置取决于
图像的大小和徽标的大小。图 17-12 展示了如何计算粘贴的位置。粘贴徽标的左坐
标将是图像宽度减去徽标宽度，顶坐标将是图像高度减去徽标高度。
图17-12 在右下角放置徽标的左坐标和顶坐标，应该是图像的宽度/高度减去徽标宽度/高度
代码将徽标粘贴到图像中后，应保存修改后的Image对象。将以下代码添加到
程序中：
#! python3
# resizeAndAddLogo.py - Resizes all images in current working directory to fit
342 Python编程快速上手——让繁琐工作自动化
# in a 300x300 square, and adds catlogo.png to the lower-right corner.
import os
from PIL import Image
--snip--
# Check if image needs to be resized.
--snip--
# Add the logo.
 print('Adding logo to %s...' % (filename))
 im.paste(logoIm, (width - logoWidth, height - logoHeight), logoIm)
# Save changes.
 im.save(os.path.join('withLogo', filename))
新的代码输出一条消息，告诉用户徽标已被加入，将logoIm粘贴到im中计
算的坐标处，并将变更保存到withLogo目录的filename中。如果运行这个程序，
zophie.png文件是工作目录中唯一的图像，输出会是这样：
Resizing zophie.png...
Adding logo to zophie.png...
图像zophie.png将变成225×300像素的图像，如图17-13所示。请记住，如果
没有传入logoIm作为第三个参数，paste()方法不会粘贴透明的像素。这个程序可以
在短短几分钟内自动调整几百幅图像，并“加上徽标”。
图17-13 图像zophie.png调整了大小并加上了徽标（左）。如果忘记了第三个参数，
徽标中透明的像素将被复制为不透明的白色像素（右）
第5步：类似程序的想法
能够批量合成图像或修改图像大小，在许多应用中都有用。可以编写类似的程
序，完成以下任务：
• 为图像添加文字或网站URL。
• 为图像添加时间戳。
第17章 操作图像 343
• 根据图像的大小，将图像复制或移动到不同的文件夹中。
• 为图像添加一个几乎透明的水印，防止他人复制。
17.4 在图像上绘画
如果需要在图像上画线、矩形、圆形或其他简单形状，就用Pillow的ImageDraw模
块。在交互式环境中输入以下代码：
>>> from PIL import Image, ImageDraw
>>> im = Image.new('RGBA', (200, 200), 'white')
>>> draw = ImageDraw.Draw(im)
首先，我们导入Image和ImageDraw。然后，创建一个新的图像，在这个例子
中，是200×200的白色图像，将这个Image对象保存在Im中。我们将该Image对
象传入ImageDraw.Draw()函数，得到一个ImageDraw对象。这个对象有一些方法，
可以在Image 对象上绘制形状和文字。将ImageDraw对象保存在变量draw中，这
样就能在接下来的例子中方便地使用它。
17.4.1 绘制形状
下面的ImageDraw方法在图像上绘制各种形状。这些方法的fill和outline参数
是可选的，如果未指定，默认为白色。
点
point(xy, fill)方法绘制单个像素。xy参数表示要画的点的列表。该列表可以是x
和y坐标的元组的列表，例如[(x, y), (x, y), ...]，或是没有元组的x和y坐标的列表，
例如[x1, y1, x2, y2, ...]。fill参数是点的颜色，要么是一个RGBA元组，要么是颜色
名称的字符串，如'red'。fill参数是可选的。
线
line(xy, fill, width)方法绘制一条线或一系列的线。xy要么是一个元组的列表，
例如[(x, y), (x, y), ...]，要么是一个整数列表，例如[x1, y1, x2, y2, ...]。每个点都是正
在绘制的线上的一个连接点。可选的fill 参数是线的颜色，是一个RGBA 元组或颜色
名称。可选的width参数是线的宽度，如果未指定，缺省值为1。
矩形
rectangle(xy, fill, outline)方法绘制一个矩形。xy参数是一个矩形元组，形式为(left,
top, right, bottom)。left和top值指定了矩形左上角的x和y坐标，right和bottom指定
了矩形的右下角。可选的fill参数是颜色，将填充该矩形的内部。可选的outline参
数是矩形轮廓的颜色。
344 Python编程快速上手——让繁琐工作自动化
椭圆
ellipse(xy, fill, outline)方法绘制一个椭圆。如果椭圆的宽度和高度一样，该方法将绘
制一个圆。xy参数是一个矩形元组(left, top, right, bottom)，它表示正好包含该椭圆的
矩形。可选的fill参数是椭圆内的颜色，可选的outline参数是椭圆轮廓的颜色。
多边形
polygon(xy, fill, outline)方法绘制任意的多边形。xy参数是一个元组列表，例如
[(x, y), (x, y), ...]，或者是一个整数列表，例如[x1, y1, x2, y2, ...]，表示多边形边的连
接点。最后一对坐标将自动连接到第一对坐标。可选的 fill 参数是多边形内部的颜
色，可选的outline参数是多边形轮廓的颜色。
绘制示例
在交互式环境中输入以下代码：
>>> from PIL import Image, ImageDraw
>>> im = Image.new('RGBA', (200, 200), 'white')
>>> draw = ImageDraw.Draw(im)
 >>> draw.line([(0, 0), (199, 0), (199, 199), (0, 199), (0, 0)], fill='black')
 >>> draw.rectangle((20, 30, 60, 60), fill='blue')
 >>> draw.ellipse((120, 30, 160, 60), fill='red')
 >>> draw.polygon(((57, 87), (79, 62), (94, 85), (120, 90), (103, 113)),
fill='brown')
 >>> for i in range(100, 200, 10):
draw.line([(i, 0), (200, i - 100)], fill='green')
> >> im.save('drawing.png')
为 200×200 的白色图像生成 Image 对象后，将它传入 ImageDraw.Draw()，获
得ImageDraw对象，将它保存在draw中，可以对draw调用绘图方法。这里，我们
在图像边缘画上窄的黑色轮廓；一个蓝色的矩形，左上角在（20, 30），右下角在
（60, 60）；一个红色的椭圆，由（120, 30）到（160, 60）的矩形来定义；一个
棕色的多边形，有五个顶点，以及一些绿线的图案，用 for 循环绘制。得到的
drawing.png文件如图17-14所示。
图17-14 得到的图像drawing.png
第17章 操作图像 345
ImageDraw 对象还有另外几个绘制形状的方法。完整的文档在 http://pillow.
readthedocs.org/en/latest/reference/ImageDraw.html。
17.4.2 绘制文本
ImageDraw 对象还有 text()方法，用于在图像上绘制文本。text()方法有 4 个参
数：xy、text、fill和font。
• xy参数是两个整数的元组，指定文本区域的左上角。
• text参数是想写入的文本字符串。
• 可选参数fill是文本的颜色。
• 可选参数font是一个ImageFont对象，用于设置文本的字体和大小。下一节中
更详细地介绍了这个参数。
因为通常很难预先知道一块文本在给定的字体下的大小，所以ImageDraw模块
也提供了textsize()方法。它的第一个参数是要测量的文本字符串，第二个参数是可
选的 ImageFont 对象。textsize()方法返回一个两整数元组，表示如果以指定的字体
写入图像，文本的宽度和高度。可以利用这个宽度和高度，帮助你精确计算文本放
在图像上的位置。
text()的前三个参数非常简单。在用 text()向图像绘制文本之前，让我们来看看
可选的第四个参数，即ImageFont对象。
text()和textsize()都接受可选的ImageFont对象，作为最后一个参数。要创建这
种对象，先执行以下命令：
>>> from PIL import ImageFont
既然已经导入Pillow的ImageFont模块，就可以调用ImageFont.truetype()函数，它
有两个参数。第一个参数是字符串，表示字体的TrueType文件，这是硬盘上实际的字
体文件。TrueType字体文件具有.TTF文件扩展名，通常可以在以下文件夹中找到：
• 在Windows上：C:\Windows\Fonts。
• 在OS X上：/Library/Fonts and /System/Library/Fonts。
• 在Linux上：/usr/share/fonts/truetype。
实际上并不需要输入这些路径作为 TrueType 字体文件的字符串的一部分，因为
Python知道自动在这些目录中搜索字体。如果无法找到指定的字体，Python会显示错误。
ImageFont.truetype()的第二个参数是一个整数，表示字体大小的点数（而不是像
素）。请记住，Pillow创建的PNG图像默认是每英寸72像素，一点是1/72英寸。
在交互式环境中输入以下代码，用你的操作系统中实际的文件夹名称替换
FONT_FOLDER：
>>> from PIL import Image, ImageDraw, ImageFont
>>> import os
 >>> im = Image.new('RGBA', (200, 200), 'white')
346 Python编程快速上手——让繁琐工作自动化
 >>> draw = ImageDraw.Draw(im)
 >>> draw.text((20, 150), 'Hello', fill='purple')
>>> fontsFolder = 'FONT_FOLDER' # e.g. ‘/Library/Fonts’
 >>> arialFont = ImageFont.truetype(os.path.join(fontsFolder, 'arial.ttf'), 32)
 >>> draw.text((100, 150), 'Howdy', fill='gray', font=arialFont)
>>> im.save('text.png')
导入 Image、ImageDraw、ImageFont 和 os 后，我们生成一个 Image 对象，是
新的 200×200 白色图像，并通过这个 Image 对象得到一个 ImageDraw 对象。
我们使用text()在（20, 150）以紫色绘制Hello。在这次 text()调用中，我们没有传
入可选的第四个参数，所以这段文本的字体和大小没有定制。
要设置字体和大小，我们首先将文件夹名称（如/Library/Fonts）保存在 fontsFolder
中。然后调用ImageFont.truetype()，传入我们想要的字体的.TTF文件，之后是表示
字体大小的整数。将ImageFont.truetype()返回的Font对象保存在arialFont这样的
变量中，然后将该变量传入 text()，作为最后的关键字参数。行的 text()调用绘制
了Howdy，采用灰色、32点Arial字体。
得到的text.png文件如图17-15所示。
图17-15 得到的图像text.png
17.5 小结
图像由像素的集合构成，每个像素具有表示颜色的RGBA值，可以通过x和y
坐标的定位。两种常见的图像格式是JPEG和PNG。Pillow模块可以处理这两种图
像格式和其他格式。
当图像被加载为 Image 对象时，它的宽度和高度作为两整数元组，保存在 size
属性中。Image数据类型的对象也有一些方法，实现常见的图像处理：crop()、copy()、
paste()、resize()、rotate()和 transpose()。要将 Image 对象保存为图像文件，就调用
save()方法。
第17章 操作图像 347
如果希望程序在图像上绘制形状，就使用 ImageDraw的方法绘制点、线、
矩形、椭圆和多边形。该模块也提供了一些方法，用你选择的字体和大小绘制
文本。
虽然像 Photoshop 这样高级（且昂贵）的应用程序提供了自动批量处理功能，但
你可以用Python脚本，免费完成许多相同的修改。在前面的章节中，你编写Python
程序来处理纯文本文件、电子表格、PDF和其他格式。利用Pillow模块，你已将编
程能力扩展到处理图像！
17.6 习题
1．什么是RGBA值？
2．如何利用Pillow模块得到'CornflowerBlue'的RGBA值？
3．什么是矩形元组？
4．哪个函数针对名为sophie.png图像文件返回一个Image对象？
5．如何得到一个Image对象的图像的宽度和高度？
6．调用什么方法会得到一个100×100的图像的Image对象，但不包括它左下
角的四分之一？
7．对Image对象修改后，如何将它保存为图像文件？
8．什么模块包含Pillow的形状绘制代码？
9．Image对象没有绘制方法。哪种对象有？如何获得这种类型的对象？
17.7 实践项目
作为实践，编程完成以下任务。
17.7.1 扩展和修正本章项目的程序
本章的resizeAndAddLogo.py程序使用PNG和JPEG文件，但Pillow还支持许
多格式，不仅仅是这两个。扩展resizeAndAddLogo.py，让它也能处理GIF和BMP
图像。
另一个小问题是，只有文件扩展名小写时，程序才修改PNG和JPEG文件。例
如，它会处理zophie.png，但不处理zophie.PNG。修改代码，让文件扩展名检查不
区分大小写。
最后，添加到右下角的徽标本来只是一个小标记，但如果该图像与徽标本身差
不多大，结果将类似于图 17-16。修改 resizeAndAddLogo.py，使得图像必须至少是徽
标的两倍的宽度和高度，然后才粘贴徽标。否则，它应该跳过添加徽标。
348 Python编程快速上手——让繁琐工作自动化
图17-16 如果图像不比徽标大很多，结果很难看。
17.7.2 在硬盘上识别照片文件夹
我有一个坏习惯，从数码相机将文件传输到硬盘的临时文件夹后，会忘记这些
文件夹。编程扫描整个硬盘，找到这些遗忘的“照片文件夹”，就太好了。
编写一个程序，遍历硬盘上的每个文件夹，找到可能的照片文件夹。当然，首
先你必须定义什么是“照片文件夹”。假定就是超过半数文件是照片的任何文件夹。
你如何定义什么文件是照片？
首先，照片文件必须具有文件扩展名.png 或.jpg。此外，照片是很大的图像。
照片文件的宽度和高度都必须大于500像素。这是安全的假定，因为大多数数码相
机照片，宽度和高度都是几千像素。
作为提示，下面是这个程序的粗略框架：
#! python3