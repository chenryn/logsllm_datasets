### 优化后的文本

#### 调整图像尺寸并添加徽标

在调整图像大小时，`resize()` 方法要求的尺寸必须是整数。因此，如果计算得到的尺寸是浮点数，请使用 `int()` 函数将其转换为整数。新的宽度值应设置为 `SQUARE_FIT_SIZE`。

如果高度大于或等于宽度（这两种情况都在 `else` 子句中处理），则进行相同的计算，但需要交换 `height` 和 `width` 变量的位置。当 `width` 和 `height` 包含新图像尺寸后，将它们传入 `resize()` 方法，并将返回的 `Image` 对象保存在 `im` 中。

#### 第四步：添加徽标并保存更改

无论图像是否调整大小，徽标都应粘贴到右下角。徽标的精确位置取决于图像和徽标的大小。图 17-12 展示了如何计算粘贴位置。徽标的左坐标将是图像宽度减去徽标宽度，顶坐标将是图像高度减去徽标高度。

**图 17-12** 在右下角放置徽标的左坐标和顶坐标应该是图像的宽度/高度减去徽标宽度/高度。

代码将徽标粘贴到图像中后，应保存修改后的 `Image` 对象。请将以下代码添加到程序中：

```python
#! python3
# resizeAndAddLogo.py - Resizes all images in current working directory to fit
# in a 300x300 square, and adds catlogo.png to the lower-right corner.
import os
from PIL import Image

# Check if image needs to be resized.
# --snip--

# Add the logo.
print('Adding logo to %s...' % (filename))
im.paste(logoIm, (width - logoWidth, height - logoHeight), logoIm)

# Save changes.
im.save(os.path.join('withLogo', filename))
```

这段代码会输出一条消息，告知用户徽标已加入，并将 `logoIm` 粘贴到 `im` 中计算出的坐标处，然后将变更保存到 `withLogo` 目录下的 `filename` 文件中。如果运行此程序且工作目录中唯一的图像是 `zophie.png`，输出如下：

```
Resizing zophie.png...
Adding logo to zophie.png...
```

图像 `zophie.png` 将被调整为 225×300 像素，如图 17-13 所示。请注意，如果没有传入 `logoIm` 作为第三个参数，`paste()` 方法不会粘贴透明像素。这个程序可以在几分钟内自动调整数百张图像的大小并加上徽标。

**图 17-13** 图像 `zophie.png` 调整了大小并加上了徽标（左）。如果忘记了第三个参数，徽标中的透明像素将被复制为不透明的白色像素（右）。

#### 第五步：类似程序的想法

批量合成图像或调整图像大小在许多应用中都很有用。可以编写类似的程序来完成以下任务：
- 为图像添加文字或网站 URL。
- 为图像添加时间戳。
- 根据图像的大小，将图像复制或移动到不同的文件夹中。
- 为图像添加几乎透明的水印以防止他人复制。

### 17.4 在图像上绘制

如果需要在图像上绘制线条、矩形、圆形或其他简单形状，可以使用 Pillow 的 `ImageDraw` 模块。在交互式环境中输入以下代码：

```python
>>> from PIL import Image, ImageDraw
>>> im = Image.new('RGBA', (200, 200), 'white')
>>> draw = ImageDraw.Draw(im)
```

首先，我们导入 `Image` 和 `ImageDraw`。然后，创建一个新的 200×200 的白色图像，并将该 `Image` 对象保存在 `im` 中。我们将 `Image` 对象传入 `ImageDraw.Draw()` 函数，得到一个 `ImageDraw` 对象。这个对象有一些方法，可以在 `Image` 对象上绘制形状和文字。将 `ImageDraw` 对象保存在变量 `draw` 中，以便在接下来的例子中方便地使用它。

#### 17.4.1 绘制形状

以下 `ImageDraw` 方法用于在图像上绘制各种形状。这些方法的 `fill` 和 `outline` 参数是可选的，默认为白色。

- **点**：`point(xy, fill)` 方法绘制单个像素。`xy` 参数表示要绘制的点的列表。该列表可以是 x 和 y 坐标的元组列表，例如 `[(x, y), (x, y), ...]`，或者是没有元组的 x 和 y 坐标的列表，例如 `[x1, y1, x2, y2, ...]`。`fill` 参数是点的颜色，可以是一个 RGBA 元组或颜色名称字符串，如 `'red'`。`fill` 参数是可选的。
- **线**：`line(xy, fill, width)` 方法绘制一条或多条线。`xy` 参数可以是元组列表，例如 `[(x, y), (x, y), ...]`，或者是一个整数列表，例如 `[x1, y1, x2, y2, ...]`。每个点都是正在绘制的线上的一个连接点。可选的 `fill` 参数是线的颜色，是一个 RGBA 元组或颜色名称。可选的 `width` 参数是线的宽度，默认值为 1。
- **矩形**：`rectangle(xy, fill, outline)` 方法绘制一个矩形。`xy` 参数是一个矩形元组 `(left, top, right, bottom)`。`left` 和 `top` 值指定了矩形左上角的 x 和 y 坐标，`right` 和 `bottom` 指定了矩形的右下角。可选的 `fill` 参数是填充矩形内部的颜色，可选的 `outline` 参数是矩形轮廓的颜色。
- **椭圆**：`ellipse(xy, fill, outline)` 方法绘制一个椭圆。如果椭圆的宽度和高度相同，则该方法将绘制一个圆。`xy` 参数是一个矩形元组 `(left, top, right, bottom)`，表示恰好包含该椭圆的矩形。可选的 `fill` 参数是椭圆内部的颜色，可选的 `outline` 参数是椭圆轮廓的颜色。
- **多边形**：`polygon(xy, fill, outline)` 方法绘制任意多边形。`xy` 参数是一个元组列表，例如 `[(x, y), (x, y), ...]`，或者是一个整数列表，例如 `[x1, y1, x2, y2, ...]`，表示多边形边的连接点。最后一对坐标将自动连接到第一对坐标。可选的 `fill` 参数是多边形内部的颜色，可选的 `outline` 参数是多边形轮廓的颜色。

**绘制示例**

在交互式环境中输入以下代码：

```python
>>> from PIL import Image, ImageDraw
>>> im = Image.new('RGBA', (200, 200), 'white')
>>> draw = ImageDraw.Draw(im)
>>> draw.line([(0, 0), (199, 0), (199, 199), (0, 199), (0, 0)], fill='black')
>>> draw.rectangle((20, 30, 60, 60), fill='blue')
>>> draw.ellipse((120, 30, 160, 60), fill='red')
>>> draw.polygon(((57, 87), (79, 62), (94, 85), (120, 90), (103, 113)), fill='brown')
>>> for i in range(100, 200, 10):
...     draw.line([(i, 0), (200, i - 100)], fill='green')
>>> im.save('drawing.png')
```

生成 200×200 的白色图像后，将其传入 `ImageDraw.Draw()`，获得 `ImageDraw` 对象，并保存在 `draw` 中。我们可以调用 `draw` 的绘图方法。这里，我们在图像边缘绘制黑色轮廓；一个蓝色矩形，左上角在 (20, 30)，右下角在 (60, 60)；一个红色椭圆，由 (120, 30) 到 (160, 60) 的矩形定义；一个棕色多边形，有五个顶点，以及一些绿线图案，使用 `for` 循环绘制。最终得到的 `drawing.png` 文件如图 17-14 所示。

**图 17-14** 得到的图像 `drawing.png`

`ImageDraw` 对象还有其他几个绘制形状的方法。完整的文档可在 [Pillow 文档](http://pillow.readthedocs.org/en/latest/reference/ImageDraw.html) 中找到。

#### 17.4.2 绘制文本

`ImageDraw` 对象还提供了 `text()` 方法，用于在图像上绘制文本。`text()` 方法有四个参数：`xy`、`text`、`fill` 和 `font`。

- `xy` 参数是两个整数的元组，指定文本区域的左上角。
- `text` 参数是要写入的文本字符串。
- 可选参数 `fill` 是文本的颜色。
- 可选参数 `font` 是一个 `ImageFont` 对象，用于设置文本的字体和大小。

由于通常很难预先知道一段文本在给定字体下的大小，`ImageDraw` 模块还提供了 `textsize()` 方法。其第一个参数是要测量的文本字符串，第二个参数是可选的 `ImageFont` 对象。`textsize()` 方法返回一个两整数元组，表示如果以指定字体写入图像，文本的宽度和高度。可以利用这些宽度和高度，帮助你精确计算文本在图像上的位置。

`text()` 的前三个参数非常简单。在用 `text()` 向图像绘制文本之前，让我们来看看可选的第四个参数，即 `ImageFont` 对象。

`text()` 和 `textsize()` 都接受可选的 `ImageFont` 对象作为最后一个参数。要创建这种对象，先执行以下命令：

```python
>>> from PIL import ImageFont
```

导入 Pillow 的 `ImageFont` 模块后，可以调用 `ImageFont.truetype()` 函数。该函数有两个参数。第一个参数是表示字体 TrueType 文件的字符串，这是硬盘上的实际字体文件。TrueType 字体文件具有 `.TTF` 扩展名，通常可以在以下文件夹中找到：

- 在 Windows 上：`C:\Windows\Fonts`。
- 在 macOS 上：`/Library/Fonts` 和 `/System/Library/Fonts`。
- 在 Linux 上：`/usr/share/fonts/truetype`。

实际上并不需要输入这些路径作为 TrueType 字体文件字符串的一部分，因为 Python 会自动在这些目录中搜索字体。如果无法找到指定的字体，Python 会显示错误。

`ImageFont.truetype()` 的第二个参数是一个整数，表示字体大小的点数（而不是像素）。请记住，Pillow 创建的 PNG 图像默认是每英寸 72 像素，一点是 1/72 英寸。

在交互式环境中输入以下代码，用你的操作系统中实际的文件夹名称替换 `FONT_FOLDER`：

```python
>>> from PIL import Image, ImageDraw, ImageFont
>>> import os
>>> im = Image.new('RGBA', (200, 200), 'white')
>>> draw = ImageDraw.Draw(im)
>>> draw.text((20, 150), 'Hello', fill='purple')
>>> fontsFolder = 'FONT_FOLDER'  # 例如 '/Library/Fonts'
>>> arialFont = ImageFont.truetype(os.path.join(fontsFolder, 'arial.ttf'), 32)
>>> draw.text((100, 150), 'Howdy', fill='gray', font=arialFont)
>>> im.save('text.png')
```

导入 `Image`、`ImageDraw`、`ImageFont` 和 `os` 后，我们生成一个新的 200×200 白色图像，并通过该 `Image` 对象获取一个 `ImageDraw` 对象。我们使用 `text()` 在 (20, 150) 位置以紫色绘制 "Hello"。在这次 `text()` 调用中，我们没有传入可选的第四个参数，所以这段文本的字体和大小没有定制。

要设置字体和大小，我们首先将文件夹名称（如 `/Library/Fonts`）保存在 `fontsFolder` 中。然后调用 `ImageFont.truetype()`，传入所需的 `.TTF` 文件，之后是表示字体大小的整数。将 `ImageFont.truetype()` 返回的 `Font` 对象保存在 `arialFont` 这样的变量中，然后将该变量作为关键字参数传递给 `text()`。第二次 `text()` 调用绘制了 "Howdy"，采用灰色、32 点 Arial 字体。

最终得到的 `text.png` 文件如图 17-15 所示。

**图 17-15** 得到的图像 `text.png`

### 17.5 小结

图像由像素的集合构成，每个像素具有表示颜色的 RGBA 值，可以通过 x 和 y 坐标定位。两种常见的图像格式是 JPEG 和 PNG。Pillow 模块可以处理这两种图像格式及其他格式。

当图像被加载为 `Image` 对象时，其宽度和高度作为两整数元组保存在 `size` 属性中。`Image` 数据类型的对象还有一些方法，实现常见的图像处理：`crop()`、`copy()`、`paste()`、`resize()`、`rotate()` 和 `transpose()`。要将 `Image` 对象保存为图像文件，调用 `save()` 方法。

如果希望程序在图像上绘制形状，可以使用 `ImageDraw` 的方法绘制点、线、矩形、椭圆和多边形。该模块还提供了一些方法，用你选择的字体和大小绘制文本。

虽然像 Photoshop 这样高级且昂贵的应用程序提供了自动批量处理功能，但你可以用 Python 脚本免费完成许多相同的修改。在前面的章节中，你编写了处理纯文本文件、电子表格、PDF 和其他格式的 Python 程序。利用 Pillow 模块，你已将编程能力扩展到处理图像！

### 17.6 习题

1. 什么是 RGBA 值？
2. 如何利用 Pillow 模块获取 `'CornflowerBlue'` 的 RGBA 值？
3. 什么是矩形元组？
4. 哪个函数针对名为 `sophie.png` 的图像文件返回一个 `Image` 对象？
5. 如何获取 `Image` 对象的图像的宽度和高度？
6. 调用什么方法会得到一个 100×100 的图像的 `Image` 对象，但不包括其左下角的四分之一？
7. 对 `Image` 对象进行修改后，如何将其保存为图像文件？
8. 什么模块包含 Pillow 的形状绘制代码？
9. `Image` 对象没有绘制方法。哪种对象有？如何获得这种类型的对象？

### 17.7 实践项目

作为实践，编程完成以下任务。

#### 17.7.1 扩展和修正本章项目的程序

本章的 `resizeAndAddLogo.py` 程序使用 PNG 和 JPEG 文件，但 Pillow 还支持许多其他格式。扩展 `resizeAndAddLogo.py`，使其也能处理 GIF 和 BMP 图像。

另一个小问题是，只有文件扩展名小写时，程序才修改 PNG 和 JPEG 文件。例如，它会处理 `zophie.png`，但不处理 `zophie.PNG`。修改代码，使文件扩展名检查不区分大小写。

最后，添加到右下角的徽标本来只是一个小标记，但如果该图像与徽标本身差不多大，结果将类似于图 17-16。修改 `resizeAndAddLogo.py`，使得图像必须至少是徽标的两倍宽和高，然后才粘贴徽标。否则，跳过添加徽标。

**图 17-16** 如果图像不比徽标大很多，结果很难看。

#### 17.7.2 在硬盘上识别照片文件夹

我有一个坏习惯，从数码相机将文件传输到硬盘的临时文件夹后，会忘记这些文件夹。编程扫描整个硬盘，找到这些遗忘的“照片文件夹”，就太好了。

编写一个程序，遍历硬盘上的每个文件夹，找到可能的照片文件夹。当然，首先你必须定义什么是“照片文件夹”。假定就是超过半数文件是照片的任何文件夹。你如何定义什么文件是照片？

首先，照片文件必须具有文件扩展名 `.png` 或 `.jpg`。此外，照片是很大的图像。照片文件的宽度和高度都必须大于 500 像素。这是安全的假设，因为大多数数码相机照片的宽度和高度都是几千像素。

作为提示，下面是这个程序的粗略框架：

```python
#! python3
```