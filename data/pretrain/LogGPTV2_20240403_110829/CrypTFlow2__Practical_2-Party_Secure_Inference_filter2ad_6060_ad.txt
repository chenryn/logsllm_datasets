0 and ⟨DReLU(𝑎)⟩𝐵
1 .
Algorithm 2 ℓ-bit integer DReLU, Πint,ℓ
Input: 𝑃0, 𝑃1 hold ⟨𝑎⟩𝐿
0 and ⟨𝑎⟩𝐿
Output: 𝑃0, 𝑃1 get ⟨DReLU(𝑎)⟩𝐵
1: 𝑃0 parses its input as ⟨𝑎⟩𝐿
2: 𝑃0 & 𝑃1 invoke an instance of F ℓ−1
3: For 𝑏 ∈ {0, 1}, 𝑃𝑏 sets ⟨DReLU⟩𝐵
0 = msb0||𝑥0 and 𝑃1 parses its input as
1 = msb1||𝑥1, s.t. 𝑏 ∈ {0, 1}, msb𝑏 ∈ {0, 1}, 𝑥𝑏 ∈ {0, 1}ℓ−1.
⟨𝑎⟩𝐿
MILL, where 𝑃0’s input is 2ℓ−1 −
1 − 𝑥0 and 𝑃1’s input is 𝑥1. For 𝑏 ∈ {0, 1}, 𝑃𝑏 learns ⟨carry⟩𝐵
𝑏 .
𝑏 = msb𝑏 ⊕ ⟨carry⟩𝐵
𝑏 ⊕ 𝑏.
Algorithm 3 Simple Integer ring DReLU, Πring,𝑛
0 and ⟨𝑎⟩𝑛
Input: 𝑃0, 𝑃1 hold ⟨𝑎⟩𝑛
Output: 𝑃0, 𝑃1 get ⟨DReLU(𝑎)⟩𝐵
1: 𝑃0 & 𝑃1 invoke an instance of F 𝜂
1 , respectively, where 𝑎 ∈ Z𝑛.
0 and ⟨DReLU(𝑎)⟩𝐵
1 .
DReLUsimple:
MILL with 𝜂 = ⌈log 𝑛⌉, where
1 . For 𝑏 ∈ {0, 1},
and 𝑃1’s input is ⟨𝑎⟩𝑛
(cid:16)(𝑛 − 1)/2 + ⟨𝑎⟩𝑛
MILL, where 𝑃0’s input is
. For 𝑏 ∈
(cid:17)
1
and 𝑃1’s input is ⟨𝑎⟩𝑛
MILL, where 𝑃0’s input is
1 . For 𝑏 ∈ {0, 1},
(cid:17)
(cid:16)𝑛 − 1 − ⟨𝑎⟩𝑛
(cid:17)
0
𝑃0’s input is
𝑃𝑏 learns ⟨wrap⟩𝐵
2: 𝑃0 & 𝑃1 invoke an instance of F 𝜂+1
𝑏 as output.
and 𝑃1’s input is
𝑏 as output.
{0, 1}, 𝑃𝑏 learns ⟨lt⟩𝐵
3: 𝑃0 & 𝑃1 invoke an instance of F 𝜂+1
(cid:16)𝑛 − 1 − ⟨𝑎⟩𝑛
(cid:16)𝑛 + (𝑛 − 1)/2 − ⟨𝑎⟩𝑛
0
0
𝑃𝑏 learns ⟨rt⟩𝐵
(cid:17)
𝑏 as output.
4: For 𝑏 ∈ {0, 1}, 𝑃𝑏 invokes F 2
MUX with input
𝑏 to learn ⟨𝑧⟩𝐵
𝑏 .
5: For 𝑏 ∈ {0, 1}, 𝑃𝑏 outputs ⟨𝑧⟩𝐵
𝑏 ⊕ ⟨lt⟩𝐵
𝑏 ⊕ 𝑏.
choice ⟨wrap⟩𝐵
(cid:16)⟨lt⟩𝐵
𝑏 ⊕ ⟨rt⟩𝐵
𝑏
and
(cid:17)
3.3 Protocol for DReLU for general Z𝑛
We describe a protocol for F ring,𝑛
0 + ⟨𝑎⟩𝑛
0 + ⟨𝑎⟩𝑛
0 and ⟨𝑎⟩𝑛
1 . Define wrap = 1{⟨𝑎⟩𝑛
1 > (𝑛 − 1)/2} and rt = 1{⟨𝑎⟩𝑛
DReLU that takes arithmetic shares
of 𝑎 over Z𝑛 as input and returns boolean shares of DReLU(𝑎). For
integer rings Z𝑛, DReLU(𝑎) = 1 if 𝑎  𝑛 − 1}, lt = 1{⟨𝑎⟩𝑛
0 +
⟨𝑎⟩𝑛
1 > 𝑛 + (𝑛 − 1)/2}. Then,
DReLU(𝑎) is (1 ⊕ lt) if wrap = 0, else it is (1 ⊕ rt). In Algorithm 3,
steps 1,2,3, compute these three comparisons using FMILL. Final
output can be computed using an invocation of F 2
Optimizations. We describe an optimized protocol for F ring,𝑛
DReLU in
Algorithm 4 that reduces the number of calls to FMILL to 2. First,
we observe that if the input of 𝑃1 is identical in all three invo-
cations, then the invocations of OT in Algorithm 1 (steps 9&10)
can be done together for the three comparisons. This reduces the
communication for each leaf OT invocation in steps 9&10 by an
additive factor of 4𝜆. To enable this, 𝑃0, 𝑃1 add (𝑛 − 1)/2 to their
inputs to F 𝜂+1
MILL in steps 1,3 (𝜂 = ⌈log 𝑛⌉). Hence, 𝑃1’s input to
MUX.
1 , respectively, where 𝑎 ∈ Z𝑛. Let
0 and ⟨DReLU(𝑎)⟩𝐵
1 .
𝜂 = ⌈log 𝑛⌉.
Algorithm 4 Optimized Integer ring DReLU, Πring,𝑛
DReLU:
Input: 𝑃0, 𝑃1 hold ⟨𝑎⟩𝑛
0 and ⟨𝑎⟩𝑛
Output: 𝑃0, 𝑃1 get ⟨DReLU(𝑎)⟩𝐵
(cid:16)
1: 𝑃0 & 𝑃1 invoke an instance of F 𝜂+1
(cid:16)𝑛 − 1 − ⟨𝑎⟩𝑛
3(𝑛 − 1)/2 − ⟨𝑎⟩𝑛
0
𝑏 ∈ {0, 1}, 𝑃𝑏 learns ⟨wrap⟩𝐵
𝑏 as output.
2𝑛 − 1 − ⟨𝑎⟩𝑛
0
.
2: 𝑃0 sets 𝑥 =
if ⟨𝑎⟩𝑛
(cid:17)
and 𝑃1’s input is (𝑛 − 1)/2 + ⟨𝑎⟩𝑛
MILL, where 𝑃0’s input is
1 . For
0 > (𝑛 − 1)/2, else 𝑥 =
(cid:16)
(cid:17)
(cid:17)
(cid:16)(𝑛 − 1)/2 + ⟨𝑎⟩𝑛
0
(cid:17)
3: 𝑃0 & 𝑃1 invoke an instance of F 𝜂+1
𝑃1’s input is
as output.
1
MILL, where 𝑃0’s input is 𝑥 and
. For 𝑏 ∈ {0, 1}, 𝑃𝑏 learns ⟨xt⟩𝐵
𝑏
𝑃0 parses 𝑗 as 𝑗0|| 𝑗1 and sets 𝑡 𝑗 = 1 ⊕ ⟨xt⟩𝐵
if ⟨𝑎⟩𝑛
4: 𝑃0 samples ⟨𝑧⟩𝐵
$← {0, 1}.
0
5: for 𝑗 = {00, 01, 10, 11} do
6:
7:
8:
9:
10:
11:
12:
13: end for
0 > (𝑛 − 1)/2 then
𝑃0 sets 𝑠′
𝑃0 sets 𝑠′
end if
𝑃0 sets 𝑠 𝑗 = 𝑠′
14: 𝑃0 & 𝑃1 invoke an instance of (cid:0)4
𝑗 = 𝑡 𝑗 ∧ (⟨wrap⟩𝐵
𝑗 = 𝑡 𝑗 ⊕ ((1 ⊕ 𝑡 𝑗) ∧ (⟨wrap⟩𝐵
𝑗 ⊕ ⟨𝑧⟩𝐵
0
0 ⊕ 𝑗1).
else
1
0 ⊕ 𝑗0.
0 ⊕ 𝑗1))
(cid:1)-OT1 where 𝑃0 is the
sender with inputs {𝑠 𝑗} 𝑗 and 𝑃1 is the receiver with input
⟨xt⟩𝐵
1 . 𝑃1 sets its output as ⟨𝑧⟩𝐵
1 .
1 ||⟨wrap⟩𝐵
15: For 𝑏 ∈ {0, 1}, 𝑃𝑏 outputs ⟨𝑧⟩𝐵
𝑏 .
(cid:17)
(cid:16)
(cid:16)
(cid:17)
(cid:16)𝑛 − 1 − ⟨𝑎⟩𝑛
(cid:17)
,
,
0
2𝑛 − 1 − ⟨𝑎⟩𝑛
0
1 in all invocations and 𝑃0’s inputs are
in steps 1,2,3,
F 𝜂+1
MILL is (𝑛 − 1)/2 + ⟨𝑎⟩𝑛
3(𝑛 − 1)/2 − ⟨𝑎⟩𝑛
0
respectively.
Next, we observe that one of the comparisons in step 2 or step 3
0 > (𝑛 − 1)/2, then the result
is redundant. For instance, if ⟨𝑎⟩𝑛
of the comparison lt = ⟨𝑎⟩𝑛
0 + ⟨𝑎⟩𝑛
1 > (𝑛 − 1)/2 done in step 2
is always 1. Similarly, if ⟨𝑎⟩𝑛
0 ≤ (𝑛 − 1)/2, then the result of the
comparison rt = 1{⟨𝑎⟩𝑛
0 + ⟨𝑎⟩𝑛
1 > 𝑛 + (𝑛 − 1)/2} done in step 3 is
always 0. Moreover, 𝑃0 knows based on her input ⟨𝑎⟩𝑛
0 which of the
two comparisons is redundant. Hence, in the optimized protocol,
𝑃0 and 𝑃1 always run the comparison to compute shares of wrap
and one of the other two comparisons. Note that the choice of
which comparison is omitted by 𝑃0 need not be communicated to
𝑃1, since 𝑃1’s input is same in all invocations of FMILL. Moreover,
this omission does not reveal any additional information to 𝑃1 by
shares of DReLU(𝑎). Here, 𝑃1 is the receiver and her choice bits
are the shares learnt in the two comparisons. 𝑃0 is the sender who
sets the 4 OT messages based on her input share, and two shares
learnt from the comparison protocol. We elaborate on this in the
correctness proof below.
security of FMILL. Finally, 𝑃0 and 𝑃1 can run a(cid:0)4
(cid:1)-OT1 to learn the
1
1
0 ⊕ 𝑗∗
1 ) = 1{⟨𝑎⟩𝐿
(cid:1)-OT1, 𝑧 =
MILL (step 3), xt = Reconst𝐵(⟨xt⟩𝐵
1) = (1 ⊕ rt) ∧ wrap.
𝑗∗ = DReLU(𝑎), and hence, by correctness of(cid:0)4
Correctness and Security. First, by correctness of F 𝜂+1
MILL (step 1),
wrap = Reconst𝐵(⟨wrap⟩𝐵
0 , ⟨wrap⟩𝐵
1 > 𝑛 −
0 + ⟨𝑎⟩𝐿
1}. Let 𝑗∗ = ⟨xt⟩𝐵
1 . Then, 𝑡 𝑗∗ = 1 ⊕ xt. We will show
1 ||⟨wrap⟩𝐵
that 𝑠′
0 , ⟨𝑧⟩𝐵
Reconst𝐵(⟨𝑧⟩𝐵
1 ) = DReLU(𝑎). We have the following two
cases.
0 > (𝑛 − 1)/2, lt = 1, and DReLU(𝑎) = wrap∧ (1 ⊕ rt).
When ⟨𝑎⟩𝐿
Here, by correctness of F 𝜂+1
0 , ⟨xt⟩𝐵
1 ) =
rt. Hence, 𝑠′
𝑗∗ = 𝑡 𝑗∗ ∧ (⟨wrap⟩𝐵
0 ≤ (𝑛 − 1)/2, rt = 0, DReLU(𝑎) is 1 ⊕ lt if wrap = 0,
When ⟨𝑎⟩𝐿
else 1. It can be written as (1 ⊕ lt) ⊕ (lt∧ wrap). In this case, by cor-
rectness of F 𝜂+1
MILL (step 3), xt = Reconst𝐵(⟨xt⟩𝐵
1 ) = lt. Hence,
𝑠′
𝑗∗ = 𝑡 𝑗∗ ⊕((1⊕𝑡 𝑗∗)∧(⟨wrap⟩𝐵
1)) = (1⊕ lt)⊕(lt∧wrap). Since
0 is uniform, security follows in the (F 𝜂+1
⟨𝑧⟩𝐵
2𝜆 + 4 (for protocol for(cid:0)4
Communication complexity. With the above optimization, the over-
all communication complexity of our protocol for DReLU in Z𝑛
is equivalent to 2 calls to Π𝜂+1
MILL where 𝑃1 has same input plus
MILL in this case
2 𝜆(𝜂 + 1) + 28(𝜂 + 1) bits. Hence, total com-
(using 𝑚 = 4) cost < 3
2 𝜆(𝜂 + 1) + 28(𝜂 + 1) + 2𝜆 + 4. We note that the
munication is < 3
communication complexity of simplified protocol in Algorithm 3 is
MILL, which cost 3(𝜆𝜂+14𝜂)
approximately 3 independent calls to Π𝜂
bits, plus 2𝜆 + 4 bits for F 2
MUX. Thus, our optimization gives almost