## Page 442
428
问题9-1的解答
第9章
X
X
O
O
O
（5）如果request 方法被从数个线积调用的话，request 方法必须设为
（4）执行RealData类的getContent方法的，是主线程。
）（1）调旧出 request方法斤，
synchronized，request 的参数（count,c）或是局部变量（future），只有调川
request 方法不会对数个线程所共有的字段进行任何处理，因此不需要设为
会调用 SetRcalDala方法的是在 request 方法中启动的线程.
（3）会调用SctRealData方法的是主线程。
request 方法中，对FulureDala 类的实例执行 new:
（2）request 方法的返回伯类型虽是Data 接11，实际的返同值是 FutureData
H这个request 的线程才会读取得到。
synchronized.
的实例、
Chris
Bobhy is
Alice is
Workex-4
Worier-3
Worker-2
Worker-l
Worker-0
Mcrker-3
Worker-1
norker-g
Worker-4
Worker-3
Wnrker-7
norker-c
worker-4
Norker-1
Worker-0 executes
Worker-4 execules
（前略）
 terminatca.
terminatec
terrinated.
exccutes
is texiniraled
executes
is termznated.
cxecllea
executes
seinooxe
executcs
is terminated.
ls tcrmiaales
:. lerminatea.
execu-es
exenutes
图A8-11执行范例
【Roques'
-个新的线程就会启动：
Request
 Request
Requesl
Request frcm Alice 
Regrest
Request
1serhoy
Request
Reqtcst
Hequesl
一
rom Alice No.14
.fron Chris No.l0
frem Alice
fror!
from
frcm Bobby
fxom
from Aiice
: Bebby No.11
1Chris
Chri5
No.91
Fo.10
Ko.8
No.9
No.12
No.11
No.10
-
---
## Page 443
SyncContentlmpl 类是 RealData 参与者
之后，如I List A9-2 建立 AsyncContentlmpl 类,AsyneContentlmpl 类是Future 参与者，
问题9-3的解答
问题9-2的解答
首先，我们修收 Retriever 类，使能返国AsynContentImpl类的实例（List A9-1)。
plhlic C-aas ketriever l
packaqe content;
则范例程序的执行范例（图9-3）会各目出图A9-1中的线程来进行显示
●进行 new RealData(20,'B)的线程是 B线程
在此定义如下，
除1上线程之外，又建立出了3个线种，各自进行建立RealData的实例的工作。
主线程
线程
进行newRealData(30.C)的线程是C线程
进行 new RealData(10,'A')的线程是A线程
主线程
线程们
主线程
主线程
线程日
主线程
线
主线程
主线程
线程
主线程
主线程
主线程
主线程
主线程
主线程
线程的主类
一
图A9-1
会返回 AsyncContentlmpl 的实例的 Retriever 类(Retriever.java)
范例程序的输旧‘图9-3）兄哪个线程在执行的呢？
ra-r. END
data3 - ccccccccccccccCccccCcccccccccC
maxing RealData(30, C) FM[
diata7 - PBBRRBERBSRBBBBBBRBB
main ctherJcb EN
mak-ng Real)aiai70,
me+ing RealLaLa(l0,
rak'ng Realvala(30,
msin othorJob BEGIN
requcsl(30, C) END
nakng
making Rea-Je-dflc.
request(U,
reguestiio,
request (20,
reguest(2,
rogres.(lc,
mair BRGIK
显示属性
Realata(70,
CF BEGIN
18
B1
2
A1
FND
3EGIN
EKD
BFGIN
A}
A1
C1
EKD
BEGIN
TE.iIT:
BEGIN
练习问题的解答
429
---
## Page 444
430
synccontent) 
class AsyrcContentimpl implements Content
package content:
List A9-2
public 
private bcolean ready = false;
public 
return synccontent.getBytes();
while (!ready)
notifyAll(};
this.ready = true;
this.synccontent = synccontent;
return future;
.start();
new Thread{)
final AsyncCcntentImpl future = new AsyrcContentImpl();
try←
catch (InterruptedException e) {
AsyncContentimpl 类(AsyncContentlmpi.java)
pubic void run()
rati
wait(})
 synchronized
future.setcontent(new SyncContentImpl(urlstr));
Content retrieve(final String urlstr) {
void
setContent (SyncContentimpi
，
---
## Page 445
wraping）：具体的步骤如下：
问题9-4的解答
●修改 Host 类，让 ReaiData 的实例在制作时如果发生异常，会将该异常设置
其实方法有很多，在此我们使用在附录E的[Lea]中所介绍的方法（异常的
public class Host ↑
saveToFile
List A9-3
还要让 getContent 方法抛出 InvocationTargetException(List A9-4, List A9-5)。
Exception (List A9-5)。
为了将发生的异常“包起来”，我们使用异常 java.lang.reflect.InvocationTarget
将设置（set）异常的方法 setException 新增到FutureData 类中（List A9-5）：
到FutureData 类。
train
Mlain
Uses
修改后的 Host 类(Hostjava)
content
main: Saving to hyuki.ht.ml
Mair: Saving to yanoo.htmi
Thread-l: Getting hrtp://www.google.com/
Rettieves
main: Saving f
Thread-2: Gettirg hztp://www.hyuki.com/
图A9-2问题9-3的类图（多线程版）
Retriever
retrieve
content
图A9-3执行范例
to google.html
AsyncContentlmpl
Crcates 
synecontent
getBytes
1
getBytes
Cortent
练习问题的解答
syneContentlmpl
contentbytes
getBytes
一
---
## Page 446
InvocationTargetException 的实例
但要指定到的地方并非 realdata 字段，而是exception字段，要指定到exception 的是
432
public ciass FutureData implements Data {
import. java.lang.reflect.InvocationTargetException;
FutureData 类（List A9-5）的 setExccption 方法与 sctRcalData 方法人致相同，
9-64 157
puplic interface Data i
Lis1 A9.4
END");
BEGIN"};
 private Realnata realdata = null;
return future;
//（3）将FucureData的实例当成退回值返回
System.out.println("
”.start();
new rhreaail f
fral FutureDara frture = new FutureData();
System.out.printinI"
修改后的 FutureData 类(FutureData.java)
修改后的 Data 类(Data.java)
（2）启动用以建立RealLata 的新线程
pubiic void run() {
}calch (Exception e){
t.ry l 
future.setException(e);
fu:ure.setRealData(reaidata);
RealData realdata = new RealData(count, c);
request" + count + ", 
‘ + uno + ")sanba1
U+=
门
+"}
---
## Page 447
java.lang.NegativeArraySizeException
java.lang.reflece. InvocationTargetException:
main BEGIN
 public synchronized String getContent () throws InvocationTargetExceptiont
public synchrorized void setException (Throwable throwable) {
 public synchronized void setReaiData(RealData realdata) 1
private booiean ready = false;
 private InvocazionTargetException exception = null;
 return realdata.getConten:i);
if
while (!ready) {
notifyAll();
this.ready = true;
: (etqemoxun)uoridaoxanabieluotaeoaui mau = uotideoxa'stua
if
notifyAll();
this.ready = true;
this.realdata = realdata;
if
request{-l,
throw exception:
(exception (= null)
request(-l, N) END 
try〔
return;
(ready)
catch (InterruptedException e) {
(ready){
return;
at RealData. (RealData.java:5)
making RealData(-l, N) BEGIN
at Host$l,run (Host.java:12) -
wait(};
图A9-4
执行范例
在这里程序就会结束
练习问题的解答
433
---
## Page 448
对应的对象，因此，在 shutdownRequest 方法中，如果撰写成 Thread.currentThread().
说，在范例程序中，主线程就加上了中断。
变成如何呢？在语句Thread.currentThread的值会等于这项方法所调用出的线程所
调用出 shutdownRequest，对CountupThread的线程都进行中断。
问题10-1的解答
糕是一样的意思，
像傍晚拿着蛋糕提货单到蛋糕店去，蛋糕店却由于烤箱故障而告诉你今天无法做蛋
第10章
这个InvocationTargetException，但是其实也可以不用。
java.lang.reflect.Constructor 类的 newInstance 方法所抛出的异常.
shutdowaRequest 方法内的 interrupt()与 this.interrupt()是一样的。不管哪个线程
由于用 InvocationTargetException包住了，因此与实际发生的异常的类型不会
lnvocationTargetException 是 java.lang.reflect.Method类的 invoke 方法与
○（3）doWork 方法将异常InterruptedException 抛出时，doShutdown 方法会被
○（1）调川出 shutdownRequest 方法的是主线程。
×（2）doWork方法只会被调用一次。
● Chanined Exception Facility
关于如何包住异常，请参考如下的网页。
换句话说，会让异常延迟发生，直到要从Future 参与者获待必要的值。这有点
doWork 方法是在while语句的地方被调用的，因此通常会被调用很多次。
异常InterruptedException被抛出时，finally就会被执行。
 ht tp: //java.sun.com/j2se/2.4/docs/quide/lang/chained-exceptions.html
intcrrupt()，意思样。
调用出来。
---
## Page 449
InterruptedException.
问题10-2的解答
如ListAi0-1。在此我们将 sleep方法的调用月 try.catch包住，不管异常
publie class CountupThread extends Thread f
List A10-1
private void dosrutdowni)i
/！终止处理
private vvid doworki) throws lnterrupteaException 1
//操作
plblic void ruri) ！
！/操作
publio vcid shutdcwnReqlest() l