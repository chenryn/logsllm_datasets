delete this edge from ACG to avoid in(cid:12)nite loop. If the path
doesn’t exist, which means there is no way from current
activity to target activity, we return to system or roll back
to the previous activity. Once jumped to the next Activity,
we do the same thing, calculating paths, triggering events
and deleting edges until jump to the target Activity. For
the condition that some view is visible on some conditions
(i.e. click other button (cid:12)rst), we directly jump to the target
Activity. Once we have jumped to the target Activity with
the WebView, To trigger the potential vulnerable code we
have built an attack environment that could redirect to our
illegal page when the app tries to load an HTTPS page. But
there are some apps which load a static local page or HTTP
page (cid:12)rst with several links on it. Here we adopt a strategy
like a crawler to (cid:12)nd the HTTPS link and load it. We (cid:12)rst
extract all the links from the initial page and load every link
and extract links again until we have found an HTTPS link
or the craw layer depth is up to 3. It’s worthy to note that
we don’t need to (cid:12)nd all HTTPS links because all HTTPS
links share the same error handling process.
Con(cid:12)rm vulnerability. While the WebView loads an
HTTPS page, it will show a blank page if the WebView
rejects the illegal certi(cid:12)cate, otherwise it will show the illegal
web page. So we check the WebView if it’s a blank page or
not which determines if this app is vulnerability or not.
With all detailed running information it’s easy for us to
(cid:12)gure out why this app is vulnerable and what is the function
of the HTTPS web page. More over this information helps
us analyze the result statistically and more general.
4. EVALUATION
We run experiments on two machines with Ubuntu OS,
one for test and another for attack environment. We have
downloaded 13,820 apps by its download rank from 360 mar-
ket as dataset in July 2014.
Static analysis takes 13.5 hours to (cid:12)nish, 3.5 seconds per
app which is fast enough to deal with large scale analysis.
For decompilation, there are 257 apps can’t be decompiled.
The result of static analysis is shown in Table 1. From this
table, there are 1,360 apps are potential vulnerable from a
total number of 13,820. The apps that have its own SS-
5
Table 4: Vulnerable Apps in Ranking Interval
Ranking interval Count Percentage
1-1000
1001-2000
2001-3000
3001-4000
4001-5000
136
94
70
50
37
21.1%
14.6%
10.9%
7.7%
5.7%
L/TLS certi(cid:12)cate veri(cid:12)cation error handling account for 9.8
percent which are potential vulnerable and need to be fur-
ther detected in dynamic analysis to con(cid:12)rm if they are truly
vulnerable or not. For the rest 12,203 apps checked as free
of this vulnerability during static analysis, they either don’t
have their own WebViewClient or the code unreachable or
the code reject the page with illegal certi(cid:12)cate.
In dynamic analyzing process, we have been employing
4 emulators with Android 4.2 to run the test apps and it
takes 23 hours to run all 1,360 potential vulnerable apps
and the average time for each app is 60.8 seconds. The
result of dynamic analysis is listed in Table 2 from which we
can see that nearly half (645) of the 1360 tested apps are
con(cid:12)rmed vulnerable accounted 47.4 percent, which means
nearly half of the certi(cid:12)cate veri(cid:12)cation error handlings are
not well designed or implemented. Also there are 715 apps
are detected potential vulnerable in static analyzing process
and con(cid:12)rmed not vulnerable in dynamic analysis because
of the e(cid:11)ectiveness of their own error handling.
Top 5 categories of vulnerable apps are shown in table 5.
According to this table (cid:12)nance and social contain more vul-
nerable app than other categories and many of these apps
employed third party SDK like Tecent Weibo, Sina Weibo
and Alipay to ful(cid:12)ll some of their purpose. However, these
three SDK are vulnerable themselves which makes all the
apps employed these SDKs vulnerable. According vulner-
able apps’s download rank from the market in table 4, we
found that the most popular apps (ranking interval from
1 to 1,000) have the highest vulnerable rate. Besides, the
vulnerable rate decreased along with the popularity of the
apps, which demonstrates the severity of this vulnerability.
However, with the decline in ranking the vulnerable rate al-
so fell, does not mean the apps with lower ranks are more
secure. With further study we found that the apps with low
rank are less likely to use HTTPS, which means they are
more easily to be attacked.
Table 5: Top 5 Categories of Vulnerable Apps
Categories
Count Percentage
Finance
Social
Lifestyle
Entertainment
Travel & Local
56
56
51
44
38
8.7%
8.7%
7.9%
6.8%
5.9%
595We also de(cid:12)ned category for each vulnerable activity by
their name and function. We show those vulnerable activi-
ties in Table 3. The top two kinds are Payment and Authen-
ticate Activity which weighted more than half of the total
vulnerable Activities. The reason why so many Activities
are these two categories is that, many apps are integrated
with Tecent Weibo, Sina Weibo and Alipay SDKs and Ten-
cent Weibo and Sina Weibo SDKs are social SSO SDKs and
related to authentication and Alipay is a payment SDK. It’s
noteworthy that many vulnerable apps share a same vulner-
able Activity. We have found a same vulnerable Activity in
128 di(cid:11)erent apps because of the integration of Alipay SDK.
5. RELATED WORK
Zheng et al. in [4] presented a system called SmartDroid
which could lead native Android UI to the exposure of sen-
sitive behaviors. But SmartDroid can’t deal with web UI.
Bhoraskar et al.
in [8] presented an app automation tool
called Brahmastra to test thirdparty components in mobile
apps. Brahmastra is powerful enough to do that, but it can’t
test WebView UI which is necessary in our work.
Recently, a number of e(cid:11)orts have been made to reveal and
mitigate SSL security problems. Fahl et al. [9] found An-
droid SSL MITM vulnerability and developed a tool called
Mallodroid to detect it. But they couldn’t con(cid:12)rm the vul-
nerability automatically for large dataset. Sounthiraraj et
al. in [1] developed a tool called SMV-Hunter to detect the
SSL MITM vulnerability which is able to detect automati-
cally for large scale dataset. Our work is directly inspired by
SMV-Hunter. However, our system is very di(cid:11)erent from it,
which is designed for di(cid:11)erent vulnerabilities with di(cid:11)erent
techniques. SMV-Hunter focuses on app built-in SSL veri-
(cid:12)cation weakness, whereas our system focuses on the weak-
ness in HTTPS veri(cid:12)cation error handling process. Mean-
while, the SSL usage is also di(cid:11)erent.
In SMV-Hunter, it
aims to (cid:12)nd the apps that use SSL for the backend net-
work communication.
In our work, the use of the SSL is
UI-based, namely, the web page will show up until that the
WebView is show up. This means we have to manage to do
more to jump to the target activity and open the HTTP-
S web page. Tendulkar et al. discussed the same problem
(onReceivedSslError) in [10], and we almost work on it at
the same time. They just showed the problem without fur-
ther study in [10], and we systematically studied on it and
developed this tool to detect this problem automatically.
6. FUTURE WORK
There are several limitations of our approach. In static
analysis, because of the object-oriented programming dia-
gram there are some virtual method call which is only de-
termined at run time. In dynamic analysis, some activities
are reachable on speci(cid:12)c conditions. For example, if we want
to jump to checkout activity on some shopping apps we have
to login and put some goods in the shopping cart. We would
get an error if we jump to the activity directly. And some UI
elements are visible on particular conditions. For example,
a logout button is not visible until you have logged in.
7. CONCLUSION
In this paper, we discovered a new type vulnerability for
hybrid Android apps, which could a(cid:11)ect Android WebView
HTTPS connection making secure connection vulnerable.
We have designed a new detection system that uses both
static analysis and dynamic analysis to detect this type of
vulnerability automatically on a large dataset of apps. Our
static analysis discerns potential vulnerable apps and gen-
erates essential information to guide the dynamic analysis,
which is used to con(cid:12)rm whether the app is vulnerable or
not by automatically triggering the vulnerability facilitated
for both native Android UI and WebView UI . We have ap-
plied our system to test 13,820 apps, and in total we found
645 of them truly vulnerable.
Acknowledgements
This work is partially supported by National Natural Science
Foundation of China (61173068, 61173139), Program for
New Century Excellent Talents in University of the Ministry
of Education, the Key Science Technology Project of Shan-
dong Province (2014GGD01063), the Independent Innova-
tion Foundation of Shandong Province (2014CGZH1106) and
the Shandong Provincial Natural Science Foundation (ZR20-
14FM020).
8. REFERENCES
[1] D. Sounthiraraj, J. Sahs, G. Greenwood, Z. Lin, and
L. Khan, \Smv-hunter: Large scale, automated
detection of ssl/tls man-in-the-middle vulnerabilities
in android apps," in Proceedings of the 19th Network
and Distributed System Security Symposium. San
Diego, California, USA, 2014.
[2] J. Clark and P. C. van Oorschot, \Sok: Ssl and https:
Revisiting past challenges and evaluating certi(cid:12)cate
trust model enhancements," in Proceedings of the
Security and Privacy.
IEEE, 2013.
[3] https://code.google.com/p/androguard/.
[4] C. Zheng, S. Zhu, S. Dai, G. Gu, X. Gong, X. Han,
and W. Zou, \Smartdroid: an automatic system for
revealing ui-based trigger conditions in android
applications," in Proceedings of the second ACM
workshop on Security and privacy in smartphones and
mobile devices. ACM, 2012, pp. 93{104.
[5] https://code.google.com/p/android apktool/.
[6] M. C. Grace, Y. Zhou, Z. Wang, and X. Jiang,
\Systematic detection of capability leaks in stock
android smartphones." in Proceedings of the 19th
Annual Symposium on Network and Distributed
System Security, 2012.
[7] https://developer.android.com/reference/android/
app/Instrumentation.html.
[8] R. Bhoraskar, S. Han, J. Jeon, T. Azim, S. Chen,
J. Jung, S. Nath, R. Wang, D. Wetherall,
D. Langenegger et al., \Brahmastra: Driving apps to
test the security of third-party components." in
Proceedings of the 23rd USENIX conference on
Security Symposium, 2014.
[9] S. Fahl, M. Harbach, T. Muders, L. Baumg(cid:127)artner,
B. Freisleben, and M. Smith, \Why eve and mallory
love android: An analysis of android ssl (in) security,"
in Proceedings of the 2012 ACM conference on
Computer and communications security. ACM, 2012.
[10] V. Tendulkar and W. Enck, \An application package
con(cid:12)guration approach to mitigating android ssl
vulnerabilities," in Proceedings of the 2014 Mobile
Security Technologies Conference, 2014.
6
596