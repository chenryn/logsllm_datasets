(Numpy Version 1.8)
See the following example for the precision where it happens:
  1. 
` In [68]: numpy.histogramdd([0.9999995], bins=[[0, 0.5, 1]]) Out[68]:
(array([ 1., 0.]), [array([ 0. , 0.5, 1. ])]) `
As you can see the entry lands in the wrong bin.  
Lowering the value by 10^-7 suddenly makes the jump to the last bin (which is
correct):  
2)  
`  
In [69]: numpy.histogramdd([0.9999994], bins=[[0, 0.5, 1]])  
Out[69]: (array([ 0., 1.]), [array([ 0. , 0.5, 1. ])])  
`
Interestingly, increasing the 2nd to last edge value to a high precision also
helps:  
3)  
`  
In [88]: numpy.histogramdd([0.9999999997], bins=[[0, 0.99999, 1]])  
Out[88]: (array([ 0., 1.]), [array([ 0. , 0.99999, 1. ])]  
`
Standard numpy.histogram behaves as expected to arbitrary high values close to
1:  
4)  
`  
In [71]: numpy.histogram(0.99999999999, bins=[0, 0.5, 1])  
Out[71]: (array([0, 1]), array([ 0. , 0.5, 1. ]))  
`
The whole issue is only there for the rightmost boundary, not for intermediate
ones. But as you can see in snippet 3), it has to do with the 2nd to last
edge-value aswell.  
I hope it gets fixed soon. The precision is not that high (cosine of small
angles can easily be in this regime - actually for my work it is) and a wrong
bin is populated... if unnoticed wrong results are the outcome.