### 一、前言
上回文章中我们提到了简单函数的漏洞利用情况。我们对`Fallback()`这个回调函数进行了安全漏洞的分析，也针对竞赛题目复现了一些漏洞利用过程。
在本篇文章中，我们继续对 **简单函数**
进行安全机制分析。本文我们将要对构造函数以及`tx.orgin`、`msg.sender`进行安全分析。在真实的合约开发中，上述这几个函数的使用频率是十分高的，而对于合约来讲，由于其面向对象的特性所迫，所以在编写合约的过程中构造函数是必须要进行使用的。对于`tx.orgin以及msg.sender`函数来讲，这些语法会在函数内部进行条件判断的时候使用，而条件判断往往是安全保障的最重要的一道门。倘若这些地方出现了问题而导致条件被绕过，那么系统的安全性就可能受到巨大的挑战。
倘若这些基础点存在了攻击漏洞，那么带来的危害是不可估量的。下面就看这些地方的漏洞点是如何产生的。
### 二、函数解析
#### 1 构造函数
Solidity编写合约和面向对象编程语言非常相似，我们可以通过构造函数（constructor）来初始化合约对象。
`构造函数`就是方法名和合约名字相同的函数，创建合约时会调用构造函数对状态变量进行数据初始化操作。
    pragma solidity ^0.4.20;
    contract CpTest {
        uint value;
        /* 合约初始化时会调用构造函数 */
        function  CpTest  (uint number, uint p) { 
          value = number * p;
        }
        function getPower() view returns (uint) {
           return value;
        }
    }
在我们部署合约的时候，我们需要传入参数以便初始化合约中的成员变量。
我们在构造函数中为成员变量赋初值为：2*5 = 10。
那同学就会提问，倘若我不小心忘记书写构造函数，对于Solidity来说的话会不会报错呢？
我们进行相关实验：
我们能够看到，虽然我们将构造函数注释掉了，但是我们的合约仍然可以正常的部署。而我们能够查看到我们的成员变量value的值为初始值0。
现在我们做一些实验来验证一个合约中是否可以拥有两个构造函数。
所以我们得到，一个合约中只能有允许一个构造函数存在。
#### 2 tx.orgin函数
下面我们来详细的讲述一下`tx.orgin`以及`msg.sender`的用法以及区别之处。
下面我们来看测试合约：
    pragma solidity ^0.4.20;
    contract CpTest {
        uint value;
        function  CpTest  (uint number, uint p) { 
          value = number * p;
        }
        function getPower() view returns (uint) {
           return value;
        }
        function getOrigin() view returns (address) {
            return tx.origin;
        }
         function getSender() view returns (address) {
            return msg.sender;
        }
    }
在当前地址`0xca35b7d915458ef540ade6068dfe2f44e8fa733c`下我们调用合约，看看sender的内容与orgin的内容分别是什么：
之后，我们通过合约远程调用（A-->B 用A合约调用B合约），来测试其sender的内容与orgin的内容的对应。
    pragma solidity ^0.4.20;
    contract CpTest {
        uint value;
        function  CpTest  (uint number, uint p) { 
          value = number * p;
        }
        function getPower() view returns (uint) {
           return value;
        }
        function getOrigin() view returns (address) {
            return tx.origin;
        }
         function getSender() view returns (address) {
            return msg.sender;
        }
    }
        contract testCal {
            CpTest test = CpTest(0x5e72914535f202659083db3a02c984188fa26e9f);
            function getOrigin() view returns (address) {
                return test.getOrigin();
            }
            function getSender() view returns (address) {
                return test.getSender();
            }
    }
此时我们第二个合约的地址为`0x14723a09acff6d2a60dcdf7aa4aff308fddc160c`。
调用后得到：
即`testCal`合约远程调用了`CpTest`合约，其`tx.orgin`的值为`testCal`合约的钱包地址。而`msg.sender`的地址为`testCal`合约部署的地址。
下面我们进行更复杂的测试。现在我们部署第三个合约，而此合约将调用第二个合约中的两个函数，并查看第三个合约中的相对应的`orgin与sender`的值。
    pragma solidity ^0.4.20;
    contract CpTest {
        uint value;
        function  CpTest  (uint number, uint p) { 
          value = number * p;
        }
        function getPower() view returns (uint) {
           return value;
        }
        function getOrigin() view returns (address) {
            return tx.origin;
        }
         function getSender() view returns (address) {
            return msg.sender;
        }
    }
        contract testCal {
            CpTest test = CpTest(0x5e72914535f202659083db3a02c984188fa26e9f);
            function getOrigin() view returns (address) {
                return test.getOrigin();
            }
            function getSender() view returns (address) {
                return test.getSender();
            }
    }
     contract testCal3 {
            testCal test = testCal(0x0fdf4894a3b7c5a101686829063be52ad45bcfb7);
            function getOrigin() view returns (address) {
                return test.getOrigin();
            }
            function getSender() view returns (address) {
                return test.getSender();
            }
    }
`testCal3`合约的地址为：`0x4b0897b0513fdc7c541b6d9d7e929c4e5364d2db`。
我们运行函数得到：
即第三个函数的`origin`地址为自己的钱包地址。而`sender`的地址为第二个合约（`testCal`）的部署地址。
所以我们可以大胆的分析：我们的`tx.origin`为所最起始调用者的地址（A-->B-->C则为A的地址），然而我们`msg.sender`为最终函数的前一个调用合约地址（A-->B-->C中，由于函数在C中，所以sender为B的合约地址）。
这也相对应的存在了许多安全隐患，我们在下面进行分析。
### 三、漏洞分析
#### 1 tx.origin漏洞分析
`tx.origin`是Solidity 中的一个全局变量
，它遍历整个调用栈并返回最初发送调用（或交易）的帐户的地址。然而在智能合约中使用此变量时，我们通常会看到它被用于身份验证。这也就存在了很严重的漏洞问题，所以我们针对这个问题来进行相关的安全分析。
此类合约容易受到类似网络钓鱼的攻击。
下面我们来看一段钓鱼代码：
我们假设场景：现在有用户A与攻击者C两个身份。在A用户的地址下，我们部署了：
    contract Phishable {
        address public owner;
        constructor (address _owner) {
            owner = _owner; 
        }
        function () public payable {} // collect ether
        function withdrawAll(address _recipient) public {
            require(tx.origin == owner);
            _recipient.transfer(this.balance); 
        }