### 优化后的文本

#### 构建时间和日志文件命名
构建时间通常比远程复制时间长很多，因此连续复制不会显著增加总执行时间。我们的日志文件以包名、远程主机和秒级时间戳命名。如果在同一远程主机上执行多个构建任务，则可能会出现文件名冲突的风险。使用进程编号变量 `$S` 并不是一个好的解决方案，因为它在 `build-all` 的单一调用中是固定的常量。虽然可以使用 `SS` 初始化计数器并在每次构建时递增，但这只会使文件名变得混乱。一个更好的方法是在生成两个连续日志文件之间至少保持一秒的间隔，例如通过 `sleep 1` 命令实现。GNU 的 `date` 命令提供了 `%N`（纳秒）格式项，可以生成唯一的文件名，但 POSIX 和旧版本的 `date` 实现不支持此选项。为了确保最大的可移植性，我们选择基于秒数来处理：

```bash
sleep 1
logfile="$package.$host.$now.log"
```

#### 远程主机上的构建命令
用于在远程主机上执行构建的长命令前缀了 `nice` 命令，以降低其优先级，避免与系统上的交互式工作竞争资源。即使大部分工作都在远程系统上完成，构建日志有时也会很大，导致 `SSH` 需要处理更多的数据。

请注意，`SSH` 的第二个参数是一个由双引号界定的长字符串。该字符串中的命令语法取决于远程主机上用户的登录 Shell。我们非常小心地限制了该语法，使其能够在所有常见的 UNIX Shell 中正常运行，从而确保所有用户，无论他们使用何种登录 Shell，都能使用 `build-all`。由于许多系统不允许用户选择自己的 Shell，因此我们无法要求所有地方都使用相同的登录 Shell。替代方案是将命令传递给每个主机上的 Bourne Shell，但这会为每个构建启动另一个进程，进一步增加复杂性。

```bash
nice ssh $SSHFLAGS $userhost "..."
```

#### 登录 Shell 和初始化脚本
在命令序列中，如果存在 `SBUILDBEGIN` 脚本，则会在远程系统上执行。这提供了登录定制功能，例如当 Shell 启动文件无法增加 `PATH` 变量时。它还会将一些额外信息写入标准错误输出或标准输出，这些信息也可以记录到构建日志文件中。Bourne Shell 家族的 Shell 使用点号命令来执行当前目录中的命令，而 C Shell 家族的 Shell 则使用 `source` 命令。bash 和 zsh 支持这两种命令。

如果点号命令指定的文件不存在，某些 Shell（包括 POSIX Shell）会终止执行。为了避免这种情况，我们需要检查文件是否存在，并且还要处理 `source` 命令。由于两个 Shell 都认得点号命令和 `source` 命令，我们可以使用以下复杂的命令：

```bash
test -f SBUILDBEGIN && . SBUILDBEGIN || (test -f SBUILDBEGIN && source SBUILDBEGIN) || true
```

尽管这个语句很复杂，但为了确保 `build-all` 在所有登录 Shell 中都能运行，这是必要的。我们也假设在使用 `build-all` 之前已经调试过启动脚本，否则如果 `SBUILDBEGIN` 脚本在错误状态下终止，可能会被尝试执行两次。

#### 记录额外信息
长时间的经验告诉我们，在构建日志中记录额外信息非常有用。以下是一系列 `echo` 命令，用于记录相关信息并使日志文件更易于阅读：

```bash
echo "Package: $package"
echo "Archive: $PARFILE"
echo "Date: $now"
echo "Local host: $USER"
echo "Local log directory: $LOGDIR"
echo "Local log file: $logfile"
echo "Remote user: $user"
echo "Remote directory: $builddir"
```

有时了解构建所需的时间也很有用（例如，在较老的系统上构建 GCC 编译器可能需要一天）。因此，我们的脚本会报告开始和结束日期。这些信息取自远程主机，因为每台主机的时区可能不同，且稍后匹配已安装文件的时间戳也很重要。由于 `echo` 没有适用于所有系统的可移植用法，我们使用 `printf`：

```bash
printf "Remote date: "
date $DATEFLAGS
```

同样，我们也记录系统和 GNU 编译器的版本信息，以便在未来的错误报告中使用：

```bash
printf "Remote uname: "
uname -a || true
printf "Remote gcc version: "
gcc --version | head -n 1 || echo
printf "Remote g++ version: "
g++ --version | head -n 1 || echo
```

由于其他编译器没有一致的方式来获取版本信息，我们在 `SBUILDBEGIN` 脚本中通过适当的命令生成所需的报告。接下来，脚本提供其他信息如下：

```bash
echo "Configure environment: $STRIPCONFIGS $envfile $EXTRAMINES"
echo "Extra environment: $EXTRAENVIRONMENT"
echo "Configure directory: $CONFIGUREDIR"
echo "Make all targets: $ALLTARGETS"
echo "Check targets: $CHECKTARGETS"
```

磁盘空间耗尽是常见的错误原因之一，因此我们在构建前后使用 `df` 报告可用空间：

```bash
df $builddir | $INDENT
```

`configure` 和 `make` 可能受环境变量影响，因此我们最后的工作是排序日志文件标头：

```bash
echo "Environment:"
env | env LC_ALL=C sort | $INDENT
```

中间的 `env` 命令确保脚本在所有 Shell 下都能正常运行，包括 C Shell 家族成员。

#### 权限设置和清理
与本地设置相同，我们在远程系统上设置权限掩码，允许组成员完整访问，并且除此之外的其他人都有读取权限：

```bash
umask $UMASK
```

包存档文件已经存在于构建目录内，所以我们切换到该目录，如果 `cd` 失败，则以错误状态退出：

```bash
cd $builddir || exit 1
```

下一步是删除所有旧的存档文件树。这里使用 `rm` 的绝对路径，因为这些命令在 Shell 交互模式下执行，有些站点可能将 `rm` 设置为具有 `-i` 交互式选项的别名：

```bash
/bin/rm -rf $builddir/$package
```

有时我们会因为改变了编译器或编译选项而再次执行构建操作，因此递归删除是必要的，以确保从干净的分发开始。`rm` 中的 `-f` 选项要求静默处理对不存在目录的任何报错。

递归文件树删除是危险的操作，也可能成为攻击的目标。由于 `package` 是从可信的 `basename` 命令中获取的，我们可以确信它不包含斜杠，因此只能引用当前目录。将 `$builddir/` 加入 `rm` 的参数中，提供了起码的安全性，但仍不够安全，因为 `builddir` 或 `package` 可能被设置为一个点号（即当前目录）。这种情况下确实会成为安全漏洞，我们只能通过警告标语来提醒用户。显然，这个程序不应该以 root 身份执行。我们在脚本启动时使用以下语句阻止用户这么做：

```bash
test "$(id -u)" -eq 0 && \
    error "For security reasons, this program must not be run by root."
```

在我们的所有系统中，只有 Sun Solaris 的 `id` 不支持 `-u` 选项，但我们设置了 `PATH`，让程序先找到 GNU coreutils 版本的 `id`。

**注意**：包安装命令可能告诉你要以 root 账号构建和安装软件，但实际上你应该忽略这一指示，因为只有少数包需要这样的权限，而且即便需要，也只在安装步骤中需要。

接下来，解开存档文件：

```bash
$SPAR sparbaselocal
```

重要的是要理解，`SPAR` 在初始化主机上展开，但在远程主机上执行。特别是我们假设 `tar` 是支持 `-j` 和 `-z` 选项的 GNU 版本，并且 `unzip` 和 `jar` 都可用。对于每个脚本用户，我们都期望他们在每个远程主机上做好适当的 Shell 启动文件设置，确保这些程序都能被找到。我们不能为这些程序提供固定的路径，因为这些路径在每个远程主机上可能不同。

如果存档文件已复制到远程主机上，则 `sparbaselocal` 和 `sparbase` 会是一致的值，并且因为远程主机不再需要包存档文件，所以我们将它删除。

我们已准备好切换到包目录开始构建。对于遵循广泛使用的 GNU Project 惯例的软件包来说，该目录是包目录的最顶层。遗憾的是，有些包会将构建目录放在文件树的较深处，如用于编写脚本和加速构建窗口系统界面的 Tcl 和 Tk 工具。命令行的 `--cd` 选项提供了存储在 `CONFIGUREDIR` 中的构建目录的相对路径，覆盖默认值 `.`。我们接下来需要 `package` 和 `CONFIGUREDIR` 两个变量以切换至构建目录，如果切换失败，会以错误码退出：

```bash
cd $package/$CONFIGUREDIR || exit 1
```

许多包现在包含 `configure` 脚本，因此我们可以尝试执行它。如果找到，则使用 `envfile` 提供的任何额外环境变量执行它。我们还会传递任何由 `--configure` 选项提供的额外标志，尽管大多数包不需要这类标志，但有些复杂的包需要：

```bash
test -f configure && \
chmod a+x configure && \
$EXTRAENVIRONMENT \
nice time ./configure $CONFIGUREFLAGS
```

`chmod` 命令用于添加执行权限，有两个原因：首先，我们偶尔会遇到缺乏该权限的包存档文件；其次，现行 Java 的 `jar` 存档文件格式会忽略记录该权限。前置 `nice` 命令可降低工作优先级，最小化对远程系统的影响。前置 `time` 命令则报告 `configure` 的执行时间，有助于记录大型配置脚本的执行时间，作为下一版构建时间的估计。

我们现在进入实际的构建和包验证阶段。同样前置 `nice` 和 `time`，并使用 `--all` 和 `--check` 选项（或它们的默认值）提供的 `make` 参数：

```bash
nice time make $ALLTARGETS && nice time make $CHECKTARGETS
```

`make` 命令背后隐藏了很多工作，但这些规则已由开发人员写在 `Makefile` 中，我们终端安装人员通常不必理会具体内容。

我们希望成功构建完成后，在日志文件中看到类似 "All tests passed" 的报告或其他容易理解的信息，表明一切正常。验证测试非常重要，绝不应该跳过，即使包在开发站点上运行无误，也没有理由相信它在我们的站点上也能顺利运行，因为有许多因素可能导致错误：不同的系统架构、编译器、环境变量、文件系统、本地定制设置与调校、操作系统版本、查找路径、共享函数库、系统头文件、X Windows System 默认值等。

我们现已包装好远程命令，并在日志文件中添加了几行最后的报告：

```bash
echo "Disk free report for $builddir/$package:"
df $builddir | $INDENT
printf "Remote date: "
date $DATEFLAGS
```

`SBUILDEND` 脚本类似于 `SBUILDBEGIN` 脚本，在根目录下提供任何最后的额外日志文件报告，但 `true` 确保成功完成：

```bash
test -f SBUILDEND && source $BUILDEND || true
```

`build_one` 函数的最后两行是关闭远程命令列表和函数体，重定向标准输出和标准错误输出到日志文件。最重要的是，在后台执行远程命令，使该执行可以在主体内部循环中继续。远程 Shell 的输入被重定向到 null 设备，因此它不会悬在那里等待用户输入：

```bash
...
```

如此规模的程序及其功能必定需要在线帮助。由于篇幅所限，我们在此无法展示 `build-all` 的手册页，但该脚本及其手册页文件都在本书网站上提供。

完整的脚本包含注释，并在开始处按字母顺序重新排序函数，整理在例 8-2 中。虽然有 320 行之多（省略注释和空行），但花时间了解我们编写程序的方式是非常有益的。一旦新的分发包被取到本地系统上，一个单行命令便能以并行处理的方式在所有构建主机上启动构建和验证。经过一段时间的等待后，安装程序会检查构建日志以确定它们的成功或失败，并决定在哪些主机上可以安全地执行 `make install`。将软件安装在系统上之后，构建目录可以从远程系统上删除。

**注意**：如果构建失败不是由于本地错误引起的，则应报告给包开发人员。很少有开发人员会广泛使用各种平台，因此只有来自安装者的反馈才能使他们创建更具可移植性和健壮性的包。在执行之前，你应该查看包的发行注意事项（通常在名为 `BUGS`、`FAQ`、`INSTALL`、`PROBLEMS` 或 `README` 的文件中），看看你发现的问题是否已经被提出但尚未修正。在这种软件模式下，开发人员可以很快收到安装者的反馈，最终结果是高生产力，Eric Raymond 在他的书中对此进行了详细描述。

**参考文献**：
- *The Cathedral and the Bazaar: Musings on Linux and Open Source by an Accidental Revolutionary* (O'Reilly)