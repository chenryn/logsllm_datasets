title:Decomposition of MAC address structure for granular device inference
author:Jeremy Martin and
Erik C. Rye and
Robert Beverly
Decomposition of MAC Address Structure for Granular
Device Inference
Jeremy Martin
United States Naval Academy
PI:EMAIL
Erik Rye
United States Naval Academy
PI:EMAIL
Robert Beverly
Naval Postgraduate School
PI:EMAIL
ABSTRACT
Common among the wide variety of ubiquitous networked
devices in modern use is wireless 802.11 connectivity. The
MAC addresses of these devices are visible to a passive ad-
versary, thereby presenting security and privacy threats –
even when link or application-layer encryption is employed.
While it is well-known that the most signiﬁcant three bytes
of a MAC address, the OUI, coarsely identify a device’s
manufacturer, we seek to better understand the ways in
which the remaining low-order bytes are allocated in prac-
tice. From a collection of more than two billion 802.11
frames observed in the wild, we extract device and model
information details for over 285K devices, as leaked by vari-
ous management frames and discovery protocols. From this
rich dataset, we characterize overall device populations and
densities, vendor address allocation policies and utilization,
OUI sharing among manufacturers, discover unique mod-
els occurring in multiple OUIs, and map contiguous address
blocks to speciﬁc devices. Our mapping thus permits ﬁne-
grained device type and model predictions for unknown de-
vices solely on the basis of their MAC address. We validate
our inferences on both ground-truth data and a third-party
dataset, where we obtain high accuracy. Our results em-
pirically demonstrate the extant structure of the low-order
MAC bytes due to manufacturer’s sequential allocation poli-
cies, and the security and privacy concerns therein.
1.
INTRODUCTION
802.11 wireless protocols are used in almost all commodity
network devices, including a variety of appliances, sensors,
and embedded systems. This Internet of Things (IoT) in-
cludes mobile phones, media players, access points, printers,
cameras, thermostats, and automobiles, and is predicted to
number 50 billion devices by 2020 [10].
Securing this vast footprint of wireless devices has thus
taken on increased importance [28].
In this paper, we re-
examine a speciﬁc weakness stemming from the use of 802.11:
exposure of link-layer Media Access Control (MAC) addresses.
This paper is authored by an employee(s) of the United States Government and is in the
public domain. Non-exclusive copying or redistribution is allowed, provided that the
article citation is given and the authors and agency are clearly identiﬁed as its source.
ACSAC ’16, December 05 - 09, 2016, Los Angeles, CA, USA
ACM ISBN 978-1-4503-4771-6/16/12. . . $15.00
DOI: http://dx.doi.org/10.1145/2991079.2991098
A passive adversary within radio range can capture MAC ad-
dresses – a persistent globally unique identiﬁer – even when
link and application-layer encryption is employed. In addi-
tion to tracking and threats to user privacy, MAC addresses
advertise coarse information about device manufacturers via
the three most signiﬁcant MAC bytes (the Organizationally
Unique Identiﬁer (OUI)) [13].
In this work, we seek to better understand the extent to
which the remaining three low-order bytes can reveal infor-
mation about an observed device. Our intuition is simple:
if manufacturers allocate MAC addresses for a given OUI in
a predictable way, i.e. sequentially from a subpreﬁx range of
the 224 space, this information can more ﬁnely ﬁngerprint
the device. As a concrete example, within the 24:A2:E1
OUI block assigned to Apple, we ﬁnd that approximately
half of the space is allocated to iPhone 5c (GSM) models,
while ∼20% is dedicated to the iPad Mini 2 (Cellular), and
another ∼20% is for the iPad Mini 2 (WiFi). Crucially, the
allocations are contiguous blocks. Thus, this vendor policy
permits inference of speciﬁc device type and model informa-
tion solely from the observed MAC address.
Associating MAC addresses with speciﬁc device models
presents a dilemma: given only public capture data, how
can we determine device model information? We build this
mapping from a collection of over two billion frames ob-
served in the wild, where we extract information leaked
by 802.11 management frames (probe requests, probe re-
sponses, and beacons) and multicast Domain Name Sys-
tem (mDNS) packets. Our collection is entirely passive and
we follow a strict IRB policy (detailed in §3.1).
While allocation practices vary across vendors, with sev-
eral exhibiting signiﬁcant complexity, we show that they
are generally non-random. This determinism illustrates two
concerns: i) management protocols allow signiﬁcant privacy
and security leaks; and ii) the structure and allocation of
MAC addresses lends itself to device ﬁngerprinting. Gran-
ular ﬁngerprinting of wireless devices is valuable for sup-
porting policy-based security and research eﬀorts including
crowd density [16] and population diversity [19]. Device ﬁn-
gerprinting permits proﬁling of user activity, habits, and
movements – an activity currently performed in the retail
sector [26, 25]. Commercial products such as [18] are de-
signed for vehicle and pedestrian traﬃc monitoring, and rely
on identifying device manufacturers.
More nefariously, ﬁngerprinting can be employed to per-
form targeted attacks against a device [17, 7]. Recent work
creates denial of service attacks against Google Glass [22],
while commercial products can deauthenticate particular IoT
78
Nexus 7
Table 1: Example Management Frame (WPS) Fields
Device Name
razor
ASUS WPS Router
Peer Device
Linksys E2500
HP-DeskJet 3630
cingular us
U8686 TMO
w7 tmo us
amazing3gcri
Manufact Model Name
Asus
ASUSTeK WPS Router
Casio
Cisco
HP
HTC
Huawei
LGE
Samsung
Model Num
Nexus 7
RT-N65R
C811 4G
v1.0.05
3632
HTC One X
Prism II
LG-D415
SCH-R740C
C811 4G
Linksys E2500
DeskJet 3630
HTC One X
Prism II
LG-D415
SCH-R740C
OS
iOS
iOS
iOS
iOS
BlkBry
BlkBry
Android
Android
Table 2: Example mDNS Fields
key
model
model
model
model
hwid
hwid
n
n
value
n27aap
k93ap
n71map
k66ap
0x9600240a
0x04002607
SAMSUNG-SM-N910A Galaxy Note 4
A0001 a1f0 (OnePlus)
Derived Model
Apple Watch (38mm)
iPad 2 (WiFi)
iPhone 6s (TSMC A9)
Apple TV 2G
BlackBerry Cafe
BlackBerry Z10
OnePlus One
devices (cameras, drones, etc.) [23]. Fine-grained ﬁnger-
printing allows a criminal to easily and cheaply perform re-
connaissance, identifying e.g., 802.11-enabled security cam-
eras, thermostats, and home security systems. Even auto-
mobiles have been targeted via 802.11 radios using ﬁnger-
printing techniques to isolate Uconnect devices [9]. More
generally, the ability to systematically ﬁngerprint and iden-
tify public works infrastructure such as water sensors, bio-
metric and medical monitors, and industrial control systems,
may expose these devices to targeted attacks.
We take a ﬁrst step in decomposing MAC address struc-
ture to both provide a more granular MAC-based ﬁnger-
printing technique, as well as highlight security and privacy
concerns from these ubiquitous wireless device identiﬁers.
This paper thus makes the following primary contributions:
• Curation of a large corpus of 802.11 wireless data that
captures a non-trivial cross-section of devices. From this
data, we develop a technique to predict the speciﬁc model
of a device from its MAC address, enabling ﬁner-grained
ﬁngerprinting than previously possible.
• Analysis of the various MAC address allocation strate-
gies employed by diﬀerent vendors. We ﬁnd that MAC ad-
dresses are assigned to devices in a nonrandom manner,
with contiguous ranges of the OUI dedicated to distinct
models. The structured allocation of MAC addresses lends
itself to the development of a model ﬁngerprinting strategy.
including multiple
manufacturers using a single OUI (particularly IoT devices
with third-party chipsets). Conversely, models commonly
span multiple OUIs.
• Observation of OUI complexity,
• Validation of our model ﬁngerprinting against a third-
party dataset with > 80% accuracy, and a practical appli-
cation of locally assigned MAC address derandomization
introduced in [6, 27]. Additionally, we achieve high preci-
sion and recall validating against a known set of 279 devices.
Finally, we submit our corpus to a 5-fold cross-validation
and observe ∼90% accuracy rate in predicting device mod-
els based solely on MAC addresses alone.
The remainder of this paper is organized as follows. We ﬁrst
present background in §2. Section §3 details our methodol-
ogy, while §4 provides our analysis and results. We conclude
in §5 with suggestions for future work.
2. BACKGROUND
2.1 MAC Addresses
Every network interface on an 802.11 capable device has
a MAC address layer-2 hardware identiﬁer. MAC addresses
are designed to be persistent and globally unique. OUIs
are purchased and registered with the Institute of Electrical
and Electronics Engineers (IEEE) [13]; the manufacturer is
then free to assign the remaining low-order three bytes (224
distinct addresses) to devices. To the best of our knowledge,
our work is the ﬁrst to shed light on the allocation policies
employed by manufacturers for assigning addresses within
and across OUI blocks.
In addition to the public, globally unique manufacturer as-
signed MAC address, modern devices frequently use “locally
assigned” addresses [5] which are distinguished by a Univer-
sal/Local bit in the most signiﬁcant byte. Locally assigned
addresses are used in a variety of contexts including access
point (AP) Virtual Local Area Networks (VLANs), teth-
ered hotspots, and peer-to-peer (P2P). For example, smart
televisions connect to a wireless AP using a public MAC ad-
dress, but also oﬀer P2P connectivity, e.g., “WiFi-Direct” or
“WiFi-Display.” For these P2P connections and other types
of hotspots, a locally assigned MAC is typically derived from
the device’s global MAC address at manufacturer-standardized
interval oﬀsets from the device’s global MAC address.
Locally assigned addresses are also used to create random-
ized addresses as an additional measure of privacy. By using
randomized, locally assigned MAC addresses that change
over time, tracking a wireless device is no longer trivial. For
this reason, we frequently observe 802.11 probe requests that
use locally assigned addresses if the device is not associated
with a known AP. However, as shown in [27] and §4.3, a
device’s WPS UUID-E can often be used to derive its global
MAC from the randomized MAC address.
802.11 Management Frames
2.2
802.11 management frames are unencrypted and gener-
ated by devices automatically to discover networks and ca-
pabilities, associate or authenticate, and disconnect. 802.11
management data provide the crux of our device ﬁngerprint-
ing capability; we collect the following subtypes: probe re-
quests:
frames sent by a client to discover available APs
and capabilities; probe responses: frames sent by an AP in
response to a probe request; and beacons: periodic frames
sent by APs to advertise presence and capabilities.
These frames are extensible, and many modern devices use
them to support WPS. In addition to its intended purpose
of wireless authentication, WPS often reveals model-speciﬁc
information about a device, e.g. “Asus Nexus 7.”
A recent study found up to 8.6% of client devices broad-
cast WPS ﬁelds [27]. We also consider WPS ﬁeld data from
AP devices, through probe responses and beacons. WiFi Al-
liance P2P standards such as WiFi-Direct and WiFi-Display
are derivatives of WPS and mandate its use. Table 1 shows
example WPS data from a small subset of devices.
2.3 Multicast DNS
A signiﬁcant subset of 802.11 devices do not utilize WPS.
When WPS is not available, we attempt to leverage the
mDNS protocol. Wireless devices use mDNS for Domain
Name System-Based Service Discovery (DNS-SD) as part of
79
a suite of zero conﬁguration network protocols to advertise
network services and capabilities [24] (e.g. Apple’s AirPlay,
AirPrint, and AirDrop services).
Many mDNS messages contain DNS-SD key-value pairs
[24] that uniquely identify the device model of the source.
For instance, as of iOS 8.0, Apple devices send mDNS mes-
sages that contain the dns.txt key of model= and a corre-
sponding model identiﬁcation value, e.g. model=N61AP cor-
responds to an iPhone 6. Blackberry devices encode model
information using key hwid=, while several Android manu-
facturers use key n=. To resolve these model identiﬁcation
strings to common names, we utilize a variety of public on-
line resources [14, 21]. Table 2 gives examples of observed
manufacturer-speciﬁc implementations.
2.4 Related Work
It is well known that hardware identiﬁers reveal basic
manufacturer details valuable to device ﬁngerprinting [13,
20]; however, based solely on the MAC address structure it
has not been possible to resolve beyond a device’s manu-
facturer. To date, resolution of MAC addresses to device
model granularity has required analysis of higher level pro-
tocols [20] or resource intensive analysis [11, 8].
In [20, 15] methodologies using higher layer application
protocols for device ﬁngerprinting in support of 802.11 and
Global System for Mobile Communications (GSM) cross-
correlation analysis are evaluated. The authors of [20] high-
light several important issues counter to our goals:
i) ap-
plication layer protocols can be encrypted; ii) often require
the device’s user to perform some action in order to initi-
ate the protocol transmission, reducing probability of pas-
sive detection; and iii) model granularity is rarely possible,
speciﬁcally with iOS devices. Additionally, the techniques
that rely on HTTP User-Agent strings or hostnames are
prone to inaccuracy, due to the ease with which a user can
obfuscate the ﬁngerprint of the device [1, 3, 4]. Finger-
bank [2], a community-sourced project, attempts to uncover
the manufacturer and model of networked devices based on
a combination of HTTP User-Agents, the order of DHCP
option ﬁelds, and the OUI vendor registered with the IEEE.
Altering the ﬁelds of interest for our primary methods, ﬁn-
gerprinting WPS and mDNS, would require extensive re-
engineering of the kernel.
The authors of [11] and [8] illustrate the ability to ﬁnger-
print a mobile device’s 802.11 device driver and Operating
System (OS) using a timing-based analysis of 802.11 man-
agement frame probe requests. This ﬁngerprinting method
requires a steady stream of packet data from each device.
Relying on a consistent stream of data can be problematic
– in the case of vehicle and pedestrian congestion analysis
a single packet can be the sole source of information. Our
work improves on existing methods by introducing ﬁnger-
printing techniques that rely on a single transmitted frame,
regardless of type or encryption method.
Hupperich et al. highlighted the growing need and inher-
ent diﬃculties in creating a mobile device ﬁngerprinting ca-
pability, and provided a solution involving a set of browser,
OS, hardware, and user behavioral attributes [12]. These
identiﬁers require the ability to collect the desired attributes
as part of user web activity. Our work requires no such active
process, relying solely on passive techniques. Furthermore,
as previously mentioned, it is diﬃcult to modify the data
ﬁelds used by our ﬁngerprinting methods.
Algorithm 1 Frame Processing Strategy
if frame = mgmt && mgmt ext = wps then
src mac ← lookup(wps.uuid e)
if src mac ̸= universal then
src mac, wps.* → database
if frame = WiFi-Direct || WiFi-Display then
else if frame = mdns then
src mac, p2p.* → database
model ← lookup(mdns.boardid)
src mac, mdns.*, model → database
src mac, ssid → database
if mgt tag = apple && apple type = 6 then
if frame = beacon then
src mac, apple.*, ssid → database
3. METHODOLOGY