培训
PostgreSQL 9.3
Day 4
digoal.zhou
2013/12/11
课程内容
 Day - 4
 数据库安全
 目标:
 PostgreSQL安全简介, 认证体系, 基于角色的权限管理, 事件触发器;
 如何防范SQL注入
 高可用,负载均衡
 目标:
 了解高可用架构, PostgreSQL高可用的实现方法, 挑选几种演示讲解
 了解负载均衡的应用场景, PG的实现方法, 挑选几种演示讲解
 数据库规划
 目标:
 根据业务形态, 合理规划PostgreSQL数据库硬件和操作系统.
 如何建模以及压力测试.
数据库安全
 PostgreSQL安全简介, 认证, 基于角色的权限管理, 事件触发器
 数据传输加密
 审计日志
 安全标签, se-postgres
 约束
 对象触发器: 权限限制, 数据追踪审计
 视图
 物化视图
 如何防范SQL注入
 给数据库打补丁
数据库认证
 密码存储的安全注意事项
 CREATE ROLE name [ [ WITH ] option [ ... ] ]
 | [ ENCRYPTED | UNENCRYPTED ] PASSWORD 'password'
 ENCRYPTED 存储为MD5
 UNENCRYPTED 存储为明文
 postgres=# alter role rep encrypted password '123';
 ALTER ROLE
 postgres=# select usename,passwd,md5('123rep') from pg_shadow where usename='rep';
 usename | passwd | md5
 ---------+-------------------------------------+----------------------------------
 rep | md5a6f8e01c46849ed88d55e3c347ec318a | a6f8e01c46849ed88d55e3c347ec318a
 (1 row)
 明文
 postgres=# alter role rep unencrypted password '123';
 ALTER ROLE
 postgres=# select usename,passwd,md5('123rep') from pg_shadow where usename='rep';
 usename | passwd | md5
 ---------+--------+----------------------------------
 rep | 123 | a6f8e01c46849ed88d55e3c347ec318a
 (1 row)
数据库认证
 密码复杂度注意事项
 确保已编译passwordcheck, 未编译的话到源码的contrib目录中编译一下
 pg93@db-172-16-3-150-> ll $PGHOME/lib/passwordcheck*
 -rwxr-xr-x 1 root root 14K Oct 13 09:00 /home/pg93/pgsql/lib/passwordcheck.so
 修改数据库配置文件
 vi $PGDATA/postgresql.conf
 shared_preload_libraries = 'passwordcheck,pg_stat_statements,auto_explain'
 重启数据库
 pg93@db-172-16-3-150-> pg_ctl restart -m fast
 再次修改密码时, 如果密码太简单会报错
 digoal=# alter role rep unencrypted password '123';
 ERROR: password is too short
 digoal=# alter role rep unencrypted password 'rep1234567RER';
 ERROR: password must not contain user name
 digoal=# alter role rep unencrypted password 're1234567RER';
 ALTER ROLE
数据库认证
 密码更换周期注意事项
 postgres=# alter role rep VALID UNTIL '2013-12-18 00:09:07.549152';
 digoal=> \du+ rep
 List of roles
 Role name | Attributes | Member of | Description
 -----------+----------------------------------------------------+-----------+-------------
 rep | Replication +| {} |
 | 32 connections +| |
 | Password valid until 2013-12-18 00:09:07.549152+08 | |
 密码到期后, 将无法认证通过
 pg93@db-172-16-3-150-> psql -h 172.16.3.150 -U rep digoal
 Password for user rep:
 psql: FATAL: password authentication failed for user "rep"
数据库认证
 http://www.postgresql.org/docs/9.3/static/auth-pg-hba-conf.html
 TYPE DATABASE USER ADDRESS METHOD
 认证类型(pg_hba.conf - TYPE)
 local 本地unix socket, host, hostssl, hostnossl ; (host支持hostssl和hostnossl两种模式), ssl表示网络传输的数据使用加密方式传输,
包括认证过程也加密.
 认证方法(pg_hba.conf - METHOD) 逐条匹配, 如果匹配到了则不需要往下匹配了.
 trust -- 无需密码
 reject -- 拒绝认证
 md5 -- 校验过程密码加密传输, 但是其他数据是否加密传输要看配置的认证类型是否为SSL.
 password -- 校验过度密码明文传输, 如果认证类型为SSL, 则同样会被加密.
 gss -- 使用GSSAPI认证方法, 仅支持TCP/IP连接
 sspi -- 使用SSPI认证方法, 仅支持windows
 krb5 -- 使用Kerberos V5 认证方法,仅支持TCP/IP连接
 ident -- 客户端操作系统用户和数据库用户映射关系认证, 仅支持tcp/ip连接
 peer -- 客户端操作系统用户和数据库用户映射关系认证, 仅支持unix socket连接
 ldap -- 使用LDAP服务认证
 radius -- 使用radius服务认证
 cert -- 使用客户端的ssl身份认证.
 pam -- 使用操作系统的PAM认证模块进行认证.
数据库认证
 密码方式认证过程的安全注意事项
 在没有使用ssl连接类型的情况下, 不要使用password认证方法, 因为这种方法会传输明文密码, 可能被截获.
 密码认证的方式请使用md5
 密码方式认证如何防范暴力破解和类DDOS攻击
 对于输错密码的情况, 延迟反馈给用户密码错误的消息. 这样可以防止暴力破解和类DDoS攻击.
 http://www.postgresql.org/docs/9.3/static/auth-delay.html
 # postgresql.conf
 shared_preload_libraries = 'auth_delay'
 auth_delay.milliseconds = '500'
 pg_hba.conf的鉴权.
 使用最小权限范围鉴权, 尽量避免使用all, 0.0.0.0/0 这种大范围授权
基于角色的权限管理
 表级别权限控制
 GRANT { { SELECT | INSERT | UPDATE | DELETE | TRUNCATE | REFERENCES | TRIGGER }
 [, ...] | ALL [ PRIVILEGES ] }
 ON { [ TABLE ] table_name [, ...]
 | ALL TABLES IN SCHEMA schema_name [, ...] }
 TO { [ GROUP ] role_name | PUBLIC } [, ...] [ WITH GRANT OPTION ]
 列级别权限控制
 GRANT { { SELECT | INSERT | UPDATE | REFERENCES } ( column_name [, ...] )
 [, ...] | ALL [ PRIVILEGES ] ( column_name [, ...] ) }
 ON [ TABLE ] table_name [, ...]
 TO { [ GROUP ] role_name | PUBLIC } [, ...] [ WITH GRANT OPTION ]
 序列权限控制
 GRANT { { USAGE | SELECT | UPDATE }
 [, ...] | ALL [ PRIVILEGES ] }
 ON { SEQUENCE sequence_name [, ...]
 | ALL SEQUENCES IN SCHEMA schema_name [, ...] }
 TO { [ GROUP ] role_name | PUBLIC } [, ...] [ WITH GRANT OPTION ]
基于角色的权限管理
 数据库权限控制
 GRANT { { CREATE | CONNECT | TEMPORARY | TEMP } [, ...] | ALL [ PRIVILEGES ] }
 ON DATABASE database_name [, ...]
 TO { [ GROUP ] role_name | PUBLIC } [, ...] [ WITH GRANT OPTION ]
 类型域的权限控制(域简单来说就是自定义的带约束的数据类型)
 GRANT { USAGE | ALL [ PRIVILEGES ] }
 ON DOMAIN domain_name [, ...]
 TO { [ GROUP ] role_name | PUBLIC } [, ...] [ WITH GRANT OPTION ]
 FDW权限控制
 GRANT { USAGE | ALL [ PRIVILEGES ] }
 ON FOREIGN DATA WRAPPER fdw_name [, ...]
 TO { [ GROUP ] role_name | PUBLIC } [, ...] [ WITH GRANT OPTION ]
 FS权限控制
 GRANT { USAGE | ALL [ PRIVILEGES ] }
 ON FOREIGN SERVER server_name [, ...]
 TO { [ GROUP ] role_name | PUBLIC } [, ...] [ WITH GRANT OPTION ]
基于角色的权限管理
 函数权限控制
 GRANT { EXECUTE | ALL [ PRIVILEGES ] }
 ON { FUNCTION function_name ( [ [ argmode ] [ arg_name ] arg_type [, ...] ] ) [, ...]
 | ALL FUNCTIONS IN SCHEMA schema_name [, ...] }
 TO { [ GROUP ] role_name | PUBLIC } [, ...] [ WITH GRANT OPTION ]
 语言的权限控制, 如C语言默认只有超级用户可以使用.
 GRANT { USAGE | ALL [ PRIVILEGES ] }
 ON LANGUAGE lang_name [, ...]
 TO { [ GROUP ] role_name | PUBLIC } [, ...] [ WITH GRANT OPTION ]
 大对象的权限控制
 GRANT { { SELECT | UPDATE } [, ...] | ALL [ PRIVILEGES ] }
 ON LARGE OBJECT loid [, ...]
 TO { [ GROUP ] role_name | PUBLIC } [, ...] [ WITH GRANT OPTION ]
 SCHEMA的权限控制
 GRANT { { CREATE | USAGE } [, ...] | ALL [ PRIVILEGES ] }
 ON SCHEMA schema_name [, ...]
 TO { [ GROUP ] role_name | PUBLIC } [, ...] [ WITH GRANT OPTION ]
基于角色的权限管理
 表空间的权限控制
 GRANT { CREATE | ALL [ PRIVILEGES ] }
 ON TABLESPACE tablespace_name [, ...]
 TO { [ GROUP ] role_name | PUBLIC } [, ...] [ WITH GRANT OPTION ]
 数据类型的权限控制
 GRANT { USAGE | ALL [ PRIVILEGES ] }
 ON TYPE type_name [, ...]
 TO { [ GROUP ] role_name | PUBLIC } [, ...] [ WITH GRANT OPTION ]
 角色的权限控制
 GRANT role_name [, ...] TO role_name [, ...] [ WITH ADMIN OPTION ]
基于角色的权限管理
 例子 :
 pg93@db-172-16-3-150-> pwd
 /ssd2/pg93/pg_root
 pg93@db-172-16-3-150-> mkdir tbs_test
 digoal=# create tablespace tbs_test location '/ssd2/pg93/pg_root/tbs_test';
 CREATE TABLESPACE
 digoal=# create database test with template template0 owner postgres encoding 'UTF8' tablespace tbs_test;
 CREATE DATABASE
 digoal=# \c digoal digoal
 You are now connected to database "digoal" as user "digoal".
 digoal=> drop tablespace tbs_test;
 ERROR: must be owner of tablespace tbs_test
 digoal=> drop database test;
 ERROR: must be owner of database test
 digoal=> \c test digoal
 You are now connected to database "test" as user "digoal".
基于角色的权限管理
 test=> create schema digoal;
 ERROR: permission denied for database test
 test=> create table public.test (id int);
 CREATE TABLE
 -- 默认只有connect和public SCHEMA权限. 回收后就无法连接了
 test=> \c test postgres
 You are now connected to database "test" as user "postgres".
 test=# revoke all on database test from public;
 REVOKE
 test=# revoke all on schema public from public;
 REVOKE
 test=# \c test digoal
 FATAL: permission denied for database "test"
 DETAIL: User does not have CONNECT privilege.
 Previous connection kept
基于角色的权限管理
 -- 赋权
 test=# grant all on database test to digoal;
 GRANT
 test=# \c test digoal
 You are now connected to database "test" as user "digoal".
 test=> create schema digoal;
 CREATE SCHEMA
事件触发器
 Command: CREATE EVENT TRIGGER
 Description: define a new event trigger
 Syntax:
 CREATE EVENT TRIGGER name
 ON event
 [ WHEN filter_variable IN (filter_value [, ... ]) [ AND ... ] ]
 EXECUTE PROCEDURE function_name()
 http://blog.163.com/digoal@126/blog/static/16387704020132131361949/
 语法解释 :
 -- name : 触发器名称
 -- event : 事件名称, 现在支持的事件为ddl_command_start 和 ddl_command_end.
 支持触发事件触发器的DDL如下(包括select into) :
 http://www.postgresql.org/docs/devel/static/event-trigger-matrix.html
 但是触发事件中不包括对系统共享对象的CREATE, ALTER, DROP操作, 如 :
 databases, roles, and tablespaces
 同样对事件触发器本身的DDL操作也不会触发事件触发器.