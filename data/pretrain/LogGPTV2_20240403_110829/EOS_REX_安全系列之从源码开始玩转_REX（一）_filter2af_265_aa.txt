# EOS REX 安全系列之从源码开始玩转 REX（一）
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
伴随着 REX 提案终于被 BP 们投票通过，炒了半年概念的 REX
终于上线了，这个号称稳赚不亏的投资项目吸引了众多人的目光，同时也霸占了各大区块链媒体的头条，其火热程度不亚于平台币，一上线便涌入了大量的资金。但是 REX
究竟是什么呢？REX 又有什么用？本系列基于 rex1.6.0-rc2 源码进行分析，给出相关的细节及答案。
## 什么是 REX
REX，全称 Resource Exchange，即资源交易所，是为了提供一个更好的资源租赁平台，缓解 EOS 高昂的资源使用成本，以更少的 EOS
换取更多的资源。同时也可以增加用户投票，促进 EOS 系统的良性运转。现在市面上有许多资源租赁 DApp，目的也是为了用于缓解 CPU 紧缺的问题。REX
与这些平台一样，都是充当租赁平台的角色，不同的是资源出租方不再是 DApp，而是每一个 EOS
持有者都能成为资源出租方，并享受收益。这里需要重点声明的是，REX 不是一种代币，而是一个资源租赁平台！用户购买的 REX 只是流转于 REX
租赁平台内的一种通证，用于证明用户出租了资源，这种通证本身不可流转，无法交易。类似于国债，REX 就是手中的债券。为了区分这两个概念，下文统一将 REX
资源租赁平台称为 REX。而用户购买得到的通证称为 rex。
更详细的资料可以参看 BM 自己的[文章](https://medium.com/@bytemaster/proposal-for-eos-resource-renting-rent-distribution-9afe8fb3883a)
## REX 攻略
对于一般用户而言，买卖 rex 只需要接触到以下几个接口，分别是：
1、depodit：用于充值，将 EOS 变成 SEOS，也叫预备金。
2、withdraw：用与提现，将 SEOS 换回 EOS。
3、buyrex：用于从用户的预备金中扣除相应的份额，并用于 rex 的购买。
4、sellrex：用于卖出已经结束锁定的 REX，并将本金连带收益一起放进用户的预备金账户中。
5、unstaketorex：将用于抵押中的资源用于 rex 的购买。
下面，我们一起来看下这几个函数的实现，了解资金的流向。
## deposit 函数
deposit 函数是用户参与 REX 的第一个接口，顾名思义，用户充值以备后来购买
rex。就像去游戏厅充值游戏币一样，先把人民币换成游戏厅的点数冲进卡里，然后用这张卡进行后续的游戏，后续的所有花费都是基于这张卡的。REX
也是相同的道理，后续所有的买卖操作都基于这个储备金账户。deposit 函数的具体实现如下：
     void system_contract::deposit( const name& owner, const asset& amount )
       {
          require_auth( owner );
          check( amount.symbol == core_symbol(), "must deposit core token" );
          check( 0 < amount.amount, "must deposit a positive amount" );
          INLINE_ACTION_SENDER(eosio::token, transfer)( token_account, { owner, active_permission },
                                                        { owner, rex_account, amount, "deposit to REX fund" } );///充值进rex账户
          transfer_to_fund( owner, amount );///初始化用户余额，不存在用户则新增用户，存在则累加金额
          update_rex_account( owner, asset( 0, core_symbol() ), asset( 0, core_symbol() ) );
       }
我们不需要了解每一行的具体实现，但是大概的道理是需要明白的。deposit 函数做了以下事情：
1、首先在第三行校验了用户权限，总不能平白无故的让别人给自己买了 rex，绕过自己的意志。
2、在第五行和第六行对购买金额和代币的信息进行校验，不能拿假的 EOS 来买，也不能买个负数的，保证 REX 的安全性。
3、把用户的 EOS 打进 eosio.rex 账户，你的钱就从你的口袋，转到了 eosio.rex 系统账户上了。
4、调用 transfer_to_fund 接口，把用户的充值金额用小本本记起来，这相当我们的储备金钱包，在数据体现上是一个表，后续将根据这个表进行 rex
的购买。
5、调用 update_rex_account 接口，这个接口在输入不同的参数的时候有不同的功能，这里是用于处理用户的卖单，把用户卖 rex
得到的收益一并整理进储备金账户中。
## withdraw 函数
withdraw 函数是 deposit 函数的反向接口，用于将储备金账户中的余额转移到用户的 EOS
账户中，就像你在游戏厅玩够了，卡里还有点数，或玩游戏赢到点数放进卡里，就可以用卡里的点数换回人民币，下次再来，withdraw
函数的道理也是一样的。withdraw 函数的具体实现如下：
    void system_contract::withdraw( const name& owner, const asset& amount )
       {
          require_auth( owner );
          check( amount.symbol == core_symbol(), "must withdraw core token" ); ///EOS符号校验
          check( 0 < amount.amount, "must withdraw a positive amount" );
          update_rex_account( owner, asset( 0, core_symbol() ), asset( 0, core_symbol() ) );
          transfer_from_fund( owner, amount );
          INLINE_ACTION_SENDER(eosio::token, transfer)( token_account, { rex_account, active_permission },
                                                        { rex_account, owner, amount, "withdraw from REX fund" } );
       }
与 deposit 函数大致一样，withdraw 函数同样对 EOS 代币的信息进行了相关的校验，与 deposit 函数不一样的是，withdraw
函数调用 update_rex_account 接口和 transfer_from_fund 接口的顺序与 deposit
函数不一样。但目的都是为了处理用户的 rex 卖单，将收益归结进储备金账户中。分别用于提现或购买 rex。这里详细的细节分析将放到后续文章之中。
## buyrex 函数
折腾了那么久，怎么充值看完了，怎么提现也看完了，下面就到了我们最关心的问题，就是该怎么买的问题了。买 rex 调用的接口为 buyrex
函数，函数的具体实现如下：
    void system_contract::buyrex( const name& from, const asset& amount )
       {
          require_auth( from );
          check( amount.symbol == core_symbol(), "asset must be core token" );
          check( 0 < amount.amount, "must use positive amount" );
          check_voting_requirement( from );//检查用户是否投票
          transfer_from_fund( from, amount ); //从用户的基金中扣除，需要先通过despoit函数进行充值之后才能进行rex的购买
          const asset rex_received    = add_to_rex_pool( amount ); //计算能获得的rex的数量
          const asset delta_rex_stake = add_to_rex_balance( from, amount, rex_received ); ///更改用户账户中的rex的数量
          runrex(2);
          update_rex_account( from, asset( 0, core_symbol() ), delta_rex_stake );
          // dummy action added so that amount of REX tokens purchased shows up in action trace 
          dispatch_inline( null_account, "buyresult"_n, { }, std::make_tuple( rex_received ) );      
       }
和前面两个函数一样，buyrex 函数同样也校验了代币的相关信息，然后使用 transfer_from_fund
函数从用户的储备金中扣除相应的金额。除此之外，我们还应该关注另外三个函数，分别是
check_voting_requirement，add_to_rex_pool 和
add_to_rex_balance。这三个函数分别用于检查用户是否投票、计算能购买到的 rex 的数量并把相应增加的 rex 数量加到 rexpool
中、记录用户购买的 rex 信息并计算用户购买的 rex 的解锁时间。那么，我们能获取到的 rex 的数量是怎么计算出来的呢？从源码上我们可以看到，计算
rex 的数量调用了 add_to_rex_pool 函数。所以，下面将着重分析 add_to_rex_pool 函数。
## add_to_rex_pool 函数
add_to_rex_pool 函数用于将用户购买的 rex 放进 rex_pool 中，并根据 rex_pool 中的相关信息计算出用户能够购买的 rex
的数量。首先我们先看下 rex_pool 表的定义：
    struct [[eosio::table,eosio::contract("eosio.system")]] rex_pool {
          uint8_t    version = 0;
          asset      total_lent; /// total amount of CORE_SYMBOL in open rex_loans
          asset      total_unlent; /// total amount of CORE_SYMBOL available to be lent (connector) 
          asset      total_rent; /// fees received in exchange for lent  (connector)  
          asset      total_lendable; /// total amount of CORE_SYMBOL that have been lent (total_unlent + total_lent) 
          asset      total_rex; /// total number of REX shares allocated to contributors to total_lendable
          asset      namebid_proceeds; /// the amount of CORE_SYMBOL to be transferred from namebids to REX pool
          uint64_t   loan_num = 0; /// increments with each new loan
          uint64_t primary_key()const { return 0; }
       };
以上是 rex_pool 表的定义，其中定义了 8 个字段，除去 version 参数，我们分别一个一个解释每个参数的意思
1、total_lent：用于记录总共被借出了多少的 cpu 资源和 net 资源，这个资源是以 EOS 为单位的。
2、total_unlent：记录 rex_pool 中未用于出借的 EOS 资源。包括用户因为购买 rex
所产生的可用于出租的金额，租用资源的用户的租金。 这其中有一部会因为出租资源而锁定的金额(30 天后自动解锁)，是一个 connector，用于
bancor 操作，计算一定数量的 EOS 可租借的资源。
3、total_rent：用于记录用户在租用资源的时候支付的租金，是一个
connector，其反应了租借资源的用户的多少。用于bancor操作，计算一定数量的 EOS 可租借的资源。
4、total_lenable:可以说是整个 rex_pool 的所有资金，计算公式为 total_unlent +
total_lent。这里的资金来源还包括 name bid 的竞拍费用以及 ram fee。这个参数同时和用户的收益息息相关。
5、total_rex：rex_pool 中 rex 的总量，其来源于用户购买 rex。
6、namebid_proceeds：记录竞拍账户产生的费用。
7、loan_num：记录出租资源的总次数。
明白了以上字段的定义，我们现在正式看看 add_to_rex_pool 函数，以下是函数的具体实现。
    asset system_contract::add_to_rex_pool( const asset& payment )
       {
          /**
           * If CORE_SYMBOL is (EOS,4), maximum supply is 10^10 tokens (10 billion tokens), i.e., maximum amount
           * of indivisible units is 10^14. rex_ratio = 10^4 sets the upper bound on (REX,4) indivisible units to
           * 10^18 and that is within the maximum allowable amount field of asset type which is set to 2^62
           * (approximately 4.6 * 10^18). For a different CORE_SYMBOL, and in order for maximum (REX,4) amount not
           * to exceed that limit, maximum amount of indivisible units cannot be set to a value larger than 4 * 10^14.
           * If precision of CORE_SYMBOL is 4, that corresponds to a maximum supply of 40 billion tokens.
           */
          const int64_t rex_ratio       = 10000;
          const int64_t init_total_rent = 20'000'0000; /// base amount prevents renting profitably until at least a minimum number of core_symbol() is made available
          asset rex_received( 0, rex_symbol );
          auto itr = _rexpool.begin();
          if ( !rex_system_initialized() ) {
             /// initialize REX pool
             _rexpool.emplace( _self, [&]( auto& rp ) {
                rex_received.amount = payment.amount * rex_ratio; ///计算能获得的rex的数量
                rp.total_lendable   = payment;///由于用户 buy rex，使得 rex pool 中有可出租的 EOS，所以 rex_lendable 为首位用户的购买资金
                rp.total_lent       = asset( 0, core_symbol() );///初始化rex pool，暂时还没有人借资源
                rp.total_unlent     = rp.total_lendable - rp.total_lent; ///计算还能借的
                rp.total_rent       = asset( init_total_rent, core_symbol() );
                rp.total_rex        = rex_received;
                rp.namebid_proceeds = asset( 0, core_symbol() );
             });
          } else if ( !rex_available() ) { /// should be a rare corner case, REX pool is initialized but empty
             _rexpool.modify( itr, same_payer, [&]( auto& rp ) {
                rex_received.amount      = payment.amount * rex_ratio;
                rp.total_lendable.amount = payment.amount;
                rp.total_lent.amount     = 0;
                rp.total_unlent.amount   = rp.total_lendable.amount - rp.total_lent.amount;
                rp.total_rent.amount     = init_total_rent;
                rp.total_rex.amount      = rex_received.amount;