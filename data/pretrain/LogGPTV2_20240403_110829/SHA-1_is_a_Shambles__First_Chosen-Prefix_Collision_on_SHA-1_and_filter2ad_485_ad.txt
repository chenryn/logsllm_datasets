responding to a cost up to 8 Cblock). However, there
are many other output diﬀerences that can be useful
in our attack, even if they have a lower probability: we
can use a block as long as the new state diﬀerence gets
closer to a collision. Therefore, during the near-collision
phase, instead of keeping only blocks with an output
2Given by mask 0x7f000000, 0xfff80001, 0x7ffff000,
0x7fffffc0, 0x7fffffff
diﬀerence corresponding to an explicit edge of the graph,
we keep all blocks that follow the trail up to step 61
and we look up the new state diﬀerence in the graph
(using the bi-directional strategy above). With a larger
number of usable output diﬀerences, the cost of each
block decreases (Figure 7).
Again, we can’t compute explicitly the complexity of
this attack strategy, but we can run simulations. Ac-
cording to our experiments with the graph described
above, the average cost of the near-collision phase is only
2 Cblock, even though most of the nodes in the graph
correspond to a cost of 6 Cblock when following edges
that have been explicitly considered.
Finally, we can use this strategy to reduce the number
of near-collision blocks used in the attack. In practice, we
observed that most of the nodes in our graph can actually
be reached with fewer than 11 blocks. In particular, when
using output diﬀerences that do not correspond to edges
of the graph, we often reach an output diﬀerence that can
be erased with fewer blocks than expected, in particular
for the ﬁrst near-collision blocks.
5 Chosen-Preﬁx Collision Computation
Even though we managed to reduce the cost of the chosen-
preﬁx collision for SHA-1 to only 263.7 SHA-1 evaluations,
performing such a large-scale computation remains very
expensive. We show that it can be computed with an aca-
demic budget, for a total cost much lower than US$ 100k.
5.1 Attack Parameters
Using the idea described in the previous section, we have
the following parameters for the attack:
computed explicitly;
• We use a limit of at most 11 blocks, but we aim for
10 blocks at most for the attack (to ﬁt in a 6144-bit
key, see next section);
• The graph G has size roughly 238, but it is not
• The birthday stage is a parallel collision search
algorithm (using the distinguished points technique
of [28]) with a mask of 96 bits, and we need about
226.4 partial collisions on those 96 bits. Therefore
the expected complexity of the birthday phase is
√
π296226.4 ≈ 262;
• We use chains (consecutive iterations of the func-
tion from a starting point during the distinguished
points technique) of length 228, resulting in a data
complexity of 1/2 TB to store 234 chains;
• We expect a cost of 2 Cblock for the near-collision
phase.
USENIX Association
29th USENIX Security Symposium    1847
Max Cost
1 Cblock
2 Cblock
3 Cblock
4 Cblock
5 Cblock
6 Cblock
7 Cblock
8 Cblock
6 bl.
8.17
7 bl.
8.17
8 bl.
8.17
3 bl.
8.17
5 bl.
8.17
2 bl.
8.17
4 bl.
8.17
9 bl. 10 bl.
1 bl.
8.17
8.17
8.17
9.17 16.30 19.92 22.05 23.13 23.95 24.44 24.55 24.62 24.65
10.17 17.10 21.76 24.66 26.58 27.95 28.96 29.71 30.31 30.76
12.53 18.60 22.97 26.34 28.68 30.35 31.56 32.54 33.29 33.88
12.53 19.65 24.18 27.44 29.83 31.65 33.04 34.14 34.90 35.42
12.53 19.79 24.81 28.26 30.74 32.62 34.05 35.08 35.67 36.03
13.09 20.37 25.30 28.82 31.35 33.24 34.59 35.43 35.86 36.15
13.09 20.62 25.72 29.27 31.81 33.65 34.81 35.54 35.92 36.19
Table 5: Size of the set S with various limits on the maximum cost and on the number of near-collision blocks (log2).
Complexity estimate. Overall, for the attack param-
eters chosen, the birthday part costs about 262.05 SHA-1
computations, while the near-collision part is expected
to require 1 Cblock for the last block, and 1 Cblock in
total for the previous blocks.
As explained in ??, we use the boomerang on M6[8]
for the last block, so that the expected time to ﬁnd a
conforming block can be estimated directly from the
ﬁgures of Table 4 as Cblock = 248.5/r. For the intermedi-
ate blocks, we don’t use this boomerang, so the rate is
reduced to r/1.9 but we only require 248.08 A33-solutions
for one Cblock. Our simulations show that the total cost
for all intermediate blocks is roughly one Cblock, there-
fore it will take time Cblock = 1.9·248.08/r. Finally, we
can estimate the total attack time as
262.05 · h+ 248.5 +1.9·248.08
r
,
with r the A33-solution rate (from Table 4), and h the
hash-rate for the birthday phase (from Section 5.3). We
give concrete complexity estimates on several GPUs in
Table 2. Our chosen-preﬁx collision attack is roughly
four time as expensive as an identical-preﬁx attack.
5.2 A GPU Cluster
We originally estimated that our attack would cost
around US$ 160k by renting GPUs from a cloud provider
such as Amazon or Google (using spot or preemptible
prices). However, since our computations do not need
much communication between the GPUs, nor fancy inter-
GPU task scheduling, we can consider renting cheaper
GPUs from providers that use gaming or mining cards in
consumer-grade PCs, rather that the datacenter-grade
hardware used by big cloud providers. Services like
gpuserversrental.com rent GTX 1060 or GTX 1080
GPUs for a price below 5 cents per month per CUDA
core; which would give a total cost around US$ 75k to
compute a chosen-preﬁx collision.
Our cluster was made of 150 machines with 6 GPU
each (with a mix of GTX 1060 3G, and GTX 1060 6G),
and one master node with two 2TB hard drives in a RAID
conﬁguration. The master node had a Core i7 CPU, but
the GPU nodes had low-end Pentium or Celeron CPU
with two cores. Each machine ran Ubuntu Linux, but
there was no cluster management software installed (we
used clush to run commands on all the nodes). We
negotiated a price of US$ 37.8k per month (higher than
current prices), and used the cluster for two months.
Cost analysis. We paid US$ 75.6k for our computa-
tion, but the cost could be as low as US$ 50k with cur-
rently lower GPU prices and less idle time. With the
same methods, computing an identical-preﬁx SHA-1 col-
lision would cost only about US$ 11k. This is clearly
within reach of reasonable attackers.
Of course the underlying weakness of SHA-1 has al-
ways been present, even if it was not public (and maybe
not discovered). We estimate that a PS3 cluster (as
used by Stevens et al. [27], and as deployed by the US
army3) could have implemented this attack for a cost
of a few million dollars in 2010, when SHA-1 was still
the most widely used hash function. This underlines
that the deprection process of SHA-1 should have been
much faster after the publication of the ﬁrst theoretical
collision attack in 2004.
Looking at the future, this attack will get even cheaper
as computation costs decrease. Following Moore’s law
(that seems to be still valid for GPU4), we estimate that
it should cost less than US$ 10k to generate a SHA-1
chosen-preﬁx collision by 2025.
5.3 Birthday Phase
In order to simplify the implementation, we implemented
the birthday phase with two distinct steps: in the ﬁrst
step, each GPU computes independently a series of
3https://phys.org/news/2010-12-air-playstation-3s-
supercomputer.html
4https://blogs.nvidia.com/blog/2017/05/10/nvidia-
accelerates-ai-launches-volta-dgx-workstation-robot-
simulator-more/
1848    29th USENIX Security Symposium
USENIX Association
Complexity # collisions
Event
Starting cluster setup
Computation started
Date
July 25
July 27
August 14 Step 2 unsuccessful
August 20 Step 2 unsuccessful
August 24 Step 2 unsuccessful
August 30 Step 2 successful!
261.9
262.4
262.6
262.9
225.8
226.6
227.1
227.7
Table 6: Timeline of the birthday phase.
Event
Date
#A61-sol Complexity
September 07 Block 1 founda 216
0.11 Cblock
September 09 Block 2 found
213.5 0.02 Cblock
September 13 Block 3 found
216.9 0.21 Cblock
September 14 Block 4 found
210.8 0.003 Cblock
September 16 Block 5 found
215.5 0.08 Cblock
September 18 Block 6 found
215.5 0.08 Cblock
September 20 Block 7 found
216
0.11 Cblock
September 21 Block 8 found
214.5 0.04 Cblock
September 27 Block 9 foundb 218.2 0.38 Cblock
Table 7: Timeline of the near-collision phase. Cblock
corresponds to 219.17 A61-solutions, excepted for the last
block where the use of an extra boomerang increases it
to 219.58
aTwo solutions found
bUsing the M6[8] boomerang
chains, and in the second step we gather all the results,
sort them to ﬁnd collisions in the end-points, and re-run
the chain to locate the collisions. Our implementation
runs at a speed of h = 3.5GH/s on GTX 1060 GPUs
(respectively 3.2 GH/s on GTX 970 and 11 GH/s on
GTX 1080 Ti). This is somewhat lower than the hashcat
benchmarks reported in Table 2 because hashcat can
skip some parts of SHA-1, and we have to keep two SHA-1
states in the registers to implement the birthday phase.
Every time we run the second step, we then search the
collisions in the graph, to determine whether we have
reached a useful starting point (this is run on a sepa-
rate machine with at least 1TB or RAM, and we let the
cluster restart the ﬁrst step in the meantime).
As shown in Table 6, we ran step 2 four times, and
we have been quite unlucky in the birthday phase, only
succeeded after ﬁnding 227.7 collisions, rather than the
estimated 226.4. It took us 34 days to compute those
chains, which corresponds to a hashrate 2.9 TH/s for
our cluster (including downtime).
5.4 Near-collision Phase
The near-collision phase is very technical and very com-
plex. Every time a block is found, we have to prepare the
search for the next block. This ﬁrst requires to traverse
the graph G to ﬁnd the parameters for the next block:
we have diﬀerent constraints in the last steps depending
on which output diﬀerences are desired. Then, we had
to generate a new non-linear part for the early steps, as
explained in Section 3.4. We used tools similar to [7],
which take a lot of parametrization and trial-and-error
to have a proper non-linear part that ﬁts nicely with the
core diﬀerential path.
This was automated to some extent, but still took
between a few hours and a few days of manual work to
prepare for each block (it took more time for the ﬁrst
blocks because there are more constraints to build the
path, and we were more experienced for the later blocks).
Unfortunately, this means that the GPU cluster was not
doing useful work during this time. We remark that our
attack could have cost less if we had fully automated the
entire cryptanalysis process, or if we had improved the
search algorithm for the non-linear part of the diﬀerential
path. This is deﬁnitely not impossible to achieve, but it
would require a lot of tedious work.
For the last block, we started the computation without
the boomerang on M6[8], and modiﬁed the path and
the code after one day to include it. As explained in
Section 3, this extra boomerang reduces the quality of
A61-solutions, so that we need 4/3 times the number of
solutions (219.58 instead of 219.17), but it almost doubles
the production rate of these solutions. In total, this
reduces the computation time by a factor 1.9/4/3 ≈ 1.4.
As expected, intermediate blocks cost much less than
Cblock (the cost of a block with a pre-determined output
diﬀerence) because we can target a large number of
output diﬀerences. Only the last block is expected to
cost Cblock. However, we were quite lucky in this phase
of attack, because we found all the blocks after only 0.9
Cblock, rather than the estimated 2 Cblock. In particular,
the last block was found after only 218.2 A61-solutions
(0.38 Cblock), instead of the expected 219.58.
A timeline of the near-collision phase is given in Ta-
ble 7, and the chosen-preﬁx collision is given in the full
version of the paper [13].
5.5 Resources Used
A quick overview of the resources used for each part is
given in Table 8. If we evaluate the total useful GPU
time spent for the attack, we have roughly 78 years for
the birthday phase, 25 years for blocks 1 to 9, and 10
years for the last block. This means that roughly 75% of
our GPU time was useful. If we convert the attack time
USENIX Association
29th USENIX Security Symposium    1849
to SHA-1 evaluations, we arrive at a total of 263.6, which
is quite close to the estimate of 263.5 given in Table 2.
6 Application to PGP Web of Trust
Our demonstration of a chosen-preﬁx collision targets
the PGP/GnuPG Web of Trust. More precisely, our goal
is to create two PGP keys with diﬀerent UserIDs, so
that key B is a legitimate key for Bob (to be signed
by the Web of Trust), but the signature can be trans-
ferred to key A which is a forged key with Alice’s ID.
This will succeed if the hash values of the identity cer-
tiﬁcates collide, as in previous attacks against X.509
MD5-based certiﬁcates [25,27]. Moreover, due to details
of the PGP/GnuPG certiﬁcate structure, our attack can
reuse a single collision to target arbitrary users Alice
and Bob: for each victim, the attacker only needs to
create a new key embedding the collision, and to collect
a SHA-1 signature. This is arguably the ﬁrst practical
attack against a real world security application using
weaknesses of SHA-1.
6.1 Exploiting a Chosen-preﬁx Collision
We now focus on the identity certiﬁcates that will be
hashed and signed. Following RFC 4880 [5], the hash
computation done during certiﬁcate signing receives the
public key packet, then a UserID or user attribute packet,
and ﬁnally a signature packet and a trailer. The idea of