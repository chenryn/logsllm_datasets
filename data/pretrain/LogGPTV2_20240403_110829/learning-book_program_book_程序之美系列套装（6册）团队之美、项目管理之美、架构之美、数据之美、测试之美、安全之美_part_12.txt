一过程（RUP）进行过程改进。近来，他参加了很多分布式团队和
分布式平台的工作。我们与他的交谈就是从分布式团队并始的。
Andrew：你在过去做的哪些事情让你了解了团队的工作方式？介绍
一点这方面的情况吧。
Grady：啊，问得好。在职业生涯刚并始的时候，我参加过一些分
布式团队。在参与第一个项目的时候，我还在空军工作。我在范登
堡空军基地领到第一个任务，开始是一名遥测系统的项目工程师，
后来当上了安全范围控制系统的项目经理。在那两个项目中，我们
要处理的都是真正的分布式系统。那还是20世纪70年代末80年代初
的时候。我们做的事情是把从全球各地的雷达站点收集到的传感器
数据合并在一起。从业务的角度来看，我们的工作已经领先于那个
时代了。这样，我从那两个项目得到了一些如何处理分布式系统架
构的经验。此外，在构建那些系统的人中，大部分都在范登堡空军
基地区域一起工作，但因为系统本身的特征就是分布式的，所以也
有一些小组是分散在其他各地的。实际上，在我担任项目经理的那
个安全范围控制系统中，我们最后是与肯尼迪中心的几个小组一起
合作的，所以项目是跨越了美国的。于是在很早很早以前，我就已
经习惯了跨地理时区的开发工作了。
60
---
## Page 62
后来，在Rational成立后，我的工作重点放到了架构方面的问题上。
我帮助我们的大多数客户从瀑布方法转向了更为敏捷的方法，也帮
助他们把大型架构转换为松散的架构。在10～15年前，我开始看到
和我一起工作的客户发生了巨大变化。他们的很多项目不再适合于
放在同一座楼或同一个公司中并发。出于经济因素的考虑，外包或
近岸外包将团队分割并了。另外，他们还设立了系统助手的职位，
这就意味着他们的团队不仅仅包括一个团队，也不仅仅是从事系统
某一部分的工作，而是要处理遍布美国或世界的团队。甚至，当我
开始与跨国公司一起工作时，需要处理的系统还会涉及不同的公
司。这样，技术（也就是我们构建的系统类型）和经济的自然演变
也就自然给我们带来了压力，意味着不同的组织在时间和空间上都
是分布式的。那些经历对我世界观的形成起到了很大的促进作用。
Andrew：那么，与分布式团队一起工作时最困难的事情是什么：地
理位置不同、个性有差异还是采用技术不一样？
Grady：你指出了技术因素，很有意思，因为现在仍旧存在一些极
为困难的技术问题，是跨时区协调管理所产生的问题。但我认为最
艰滩的问题与技术无关，而与社会问题密切相关。我把问题分为两
类：一类是信任的问题，一类是文化差异的问题。
对于信任这个问题，如果小组在地理上是分布式的，我可能无法和
他们面对面地工作，会很难衡量他们的能力，不知道他们会有什么
反应，也不知道该如何和他们一起工作。这和在同一个房间工作、
关关见面的团队情况完全不同。这称为“饮水机问题11”，因为如果
你们的团队是分布式的，就无法产生那种偶然出现的联系，而那种
非常松散的、因为偶然机会产生的联系对于彼此建立信任却是非常
重要的。
如果我们的系统分布在各个国家，从文化的角度看，美国西海岸和
东海岸在开发文化上的差别并不大，但与印度、中国和日本的差别
却很大，有一些细微的东西增加了并发过程的摩擦。
所以我认为信任和文化错位是最难克服的。
Jenny：如果分布式团队彼此不信任，那么会出现什么情况？这与在
同一个地方的工作的人出现不信任有什么不同？
61
---
## Page 63
Grady：如果团队之间彼此缺乏信任，不论他们是否在一个地方工
作，结果都差不多。如果他们在一起工作但彼此不信任，办公室政
治就会变得非常糟糕了，因为它带来的影响马上会显现出来。如果
团队是分布式的，产生的结果更多是这种被动攻击型②的行为，在
一定程度上你会忽略其他小组的存在，只要把事情做完就可以了，
到了最后某些小组会分化，进而失去参与项目的权利。
如果彼此缺乏信任，你是能够感觉到的。我能够感觉到在一起工作
的团队中是否缺乏信任，只要加人到他们的团队中就能感到彼此关
系紧张、相互憎恶。什么事情也做不好。以前有一篇非常好的文
章，是对AndyHertzfeld的采访，讲的是他在开发Mac产品时的经
历。他观察到一个情况，我在这里把他的意思复述一下：常规的过
程带来的是常规的产品。因为有很多常规的产品需要生产，所以这
不一定是坏事，但如果你所在的地方做的是一些极富创新的产品，
而你们缺乏相互信任的文化，那么创新肯定会受到很大影响。
那么，应当如何建立那种信任呢？我来介绍几个新奇的想法。有新
奇的想法，也有简单的想法。简单的想法是：偶尔地，你非常有必
要把人们聚在一起。在分布式团队中，如果有办法安排至少一次时
间把团队聚到一起，或者定期把人们来回调动，将会起到很大作
用。至于新奇的想法，在IBM的虚拟世界中有一些有趣的工作，人
们在虚拟世界中进行了类似户外拓展训练的活动。这样团队虽然是
分布式的，他们仍旧可以一起完成一个普通任务，尽管这个任务与
软件开发无关，但是通过这种方式他们仍旧可以相互了解。
正是这类东西能够带来相互信任的机会。但它并不能解决饮水机问
题，因为对于饮水机问题，你需要创建一个人们能够偶尔见面的环
境。这也就是为什么在视频会议或电话会议中，在会前或会后简单
聊儿句是一件不错的事情：“嗨，今大怎么样？孩子好吗？你的爱
开发是一种关于人的体验。如果能够尽可能地考虑人的体验，那么
信任自然也就产生了。
Andrew：如果开发人员只是埋头工作，不喜欢别人和他们说话，只
愿意处理代码，遇到这种情况怎么办？对于不同类型的人，似乎必
须采取不同方法来建立信任。
Grady：对，就是这样。你一定要有一些那样的代码战士，能够完
全投入到代码中。但是必须关心他们：需要引导他们，需要激发他
62
---
## Page 64
们的兴趣，需要让他们对自己的工作保持兴奋。实际上，在那些环
境中最好是不要打扰他们。但也不能完全袖手旁观，因为他们可能
偏离正轨，构建一些非常有趣但对业务发展毫无意义的东西。这里
有一个平衡点，既要尊重个人的工作风格，又要满足业务的需要。
任何一位好的经理都会认识到不同个人之间的差异。
Andrew：假设你是团队中的并发人员，在不清楚应当如何和那样的
人一起工作时，你会怎么办？
Grady：在那些场合中，你要找到大家的共同之处。如果和我一起
工作的人是一个理头苦干的代码战士类型的人，不擅长交往，甚至
严重到一定程度，我就必须找出我们可以一起工作的共同之处。比
如说我去找他解决一些很难缠的代码段。另外，在那种环境中，作
为并发人员，我也会常常把他们从理头苦干中拉出来：“嗨，你看
到过这个东西吗？”因为这样的人是我们乐于拥有的，但是如果想
让他们成为组织中持续的精英，你就必须要常常满足他们。这种满
足有助于建立信任。
Andrew：你说的很多内容都有点类似“对软件团队的关心与满足"的
基本原则。
Grady：有一段日子我发誓要成为菲尔医生L。这更像是一个社会
问题而不是技术问题一—不是说没有技术问题，而是说随着团队规
模的增长，社会问题会越来越突出。
Andrew：我和Jenny都遇到这样的情况，在团队达到3个、4个或5个
人的时候就会遇到困难—我们试图穿越这个障碍，打造一个10
人、20人、30人、50人或80人的团队。你是如何处理的？事情一直
很顺利吗？
Grady：并不总是很顺利。我无法给出具体的百分比，但是有些团
队根本无法相互适应一—不仅仅技术团队如此，任何一个组织中都
存在这种情况。有些团队能够融合为一个整体，有些团队则做不
到。关键是要提供一个机制，让团队找到自己的方法。如果你们的
流程太过笨重繁杂，人们就连一点自我组织的余地都没有了。但是
如果流程太松散，就没有组织结构了，事情也不可预测了。我们所
有人都必须意识到有些人确实非常喜欢条理清晰。条理清晰也是人
们被大型组织吸引而不愿意加入初创企业的原因。同时，初创企业
没有历史遗产的困扰，这与你需要维护遗产所需要的思考方式差别
63
---
## Page 65
非常大。经常构建新东西的人很快就会感到厌倦，他们不愿意年复
一年地维护同一段代码，而业务的发展也超出了这种方式。
这又给组织带来另外一个问题，我把它称为部落记忆。每个系统都
有一个架构：大多数架构是偶然产生的，只有少数几个是有意形成
的。我说这些话的意思是，最后的架构实际上是从日常所做的成干
上万个细小的决定中得到的。早晨醒来的时候你会说：“我所具备
的就是这些。"Google也不例外，他们也处于同样的情形。他们说：
“我们在创办企业的时候没有历史遗产，但是现在我们有了这套令
人称奇的系统，在市场上占据绝对优势。”他们为自已的云所做的
某些架构上的决策与Amazon的云差别很大，与IBM的云差别也很
大，但是他们仍旧做了那些投资，得到了现在的架构。现在随着人
们不断地前进，你就遇到有关那个架构、那些细节有趣的问题。那
些问题很少会记录在文档中，常常是没有文档的。虽然代码最重
要，但代码并不能代表一切，因为代码中没有把原理、权衡结果等
内容保存下来，在代码中难以识别的内容也没有保存下来。这些东
西都是超越代码本身的一种模式。这类东西是保留在部落记忆中
的。在组织内部你会看到那些已经待了一段时间的部落资深人士，
他们理解原理和与之关联的代码。但问题是，随着组织不断地成长
壮大，这些人也会流动，那些知识产权也常常会走出门外。
所以，面临的挑战是，除了在时间和地理上是分布式外，你还必须
高了一—实际上，它一点儿都不贵，但是把这些知识产权抽取出来
却很昂贵，而如果这些内容离你而去，成本就特别高了。
Andrew：是否可以把它们抽取出来呢？我们是否可以找到那些大忙
人，跟他们说：“嗨，我们把这个软件的原理写下来吧”？
Grady：当然可以。当我和东海岸的一个政府办公室的人员一起工
作时，我遇到这样一个情况。他们说：“统计数字太奇怪了。我们
找到的是刚出校门的年轻人，也有年龄很大的人，但是中间年龄段
却没有人，因为他们受到了曼哈顿的诱惑，都跑到华尔街了。"现
在年龄大的人都退休了，活不了多长时间了一—也有可能还没有退
休就去世了，所以我的建议是记录口述的历史，制作录像，对他们
进行访谈，看看架构是什么样的。即使这些细小的举动也会带来很
大帮助。
64
---
## Page 66
Jenny：我想再问问刚才那个问题，有关代码中的原理以及人们在团
队中是怎样做决定的？你如何看待团队中的批评，如何处理分布式
团队中出现的批评？另外，很多过程都是关于帮助人们理解如何相
互适应、相互了解的。你认为这些过程对于分布式团队怎么样？
Grady：这个问题问得好，我认为在这种情况中，你非常有必要形
成一套机制，让团队找到他们自己的道路。我非常喜欢你使用的这
些话，我想把它换个说法，大意是理想的并发环境是一个能够不产
生摩擦的环境，意味着在收集信息时只需要并发人员最少量的介
入，只要能够让变更管理系统为我做事就可以了，只要能够让我的
测试完成日构建和类似的东西就可以了。这是一种需要出现在工具
中的东西，因为允许任务自动化，所以在某种程度上不再需要每个
开发人员的干预。但是，正如你所指出的那样，会出现一些紧张的
局面，有时候人们必须做出一些艰滩的决定。在一个没有明显的领
导者的团队中，这可能会非常痛苦，因为大家都有高度的自尊心，
会出现很多紧张局面。但是最终，在大多数健康的团队中，你肯定
会发现引力和知识的中心。他们会因为自己的经验而成为自已任命
的领导人。一个很好的例子是LinusTorvalds和整个Linux项目。他之
所以成为那个领域的知识领导人，并不是因为他是Limus，而是因为
他启动了那个项目。另外一些人也在推动着核心元素的并发，他们
凭借自己的经验，在赢得权力的同时也赢得了尊重。在任何一个合
作的团队中都会发生同样的事情。
随着团队越来越大，这些角色必须以制度的形式制定下来。这就是
为什么有些人得到“高级设计师"或“架构师"等职位的原因。在大型
系统中，你会看到某些人是整个组或整个公司的架构师。实际上，
当转向一种不是很快速的开发过程中的时候采取的更多是这种控制
中心的方式，在开发过程中有很多创新，但是也会废弃很多代码，