With the release of universal Webpack (#3578), there is now a significant opportunity to streamline custom server implementations in Next.js. The ability to use a consistent syntax, whether ES6+ or TypeScript, across both client and server code would greatly enhance the developer experience. It currently feels cumbersome that a custom server entry point must remain compatible with the specific Node.js version being used.

I have developed a workaround as a Next.js plugin, but it feels like an inelegant solution. I believe that creating a separate server bundle, distinct from the client bundle, would not be overly complex. I am interested in contributing to this effort and would appreciate guidance on how to proceed.

### Expected Behavior
When running `next dev` or `next start`, the custom server should be bundled via Webpack, allowing for a consistent syntax across both the client and server code.

### Current Behavior
The custom server is initiated using `node ./path/to/server.js`, which means that Webpack does not process the server code.

### Context
I primarily write in TypeScript, and bundling the Next.js custom server code through Webpack would ensure a consistent syntax throughout my codebase. This would also eliminate the need to rely on ESLint or Babel for compatibility.

### Environment
- **Next.js Version:** ^5.0.0
- **Node.js Version:** 8.7.0
- **Operating System:** macOS 10.13.3
- **Browser:** Firefox 58.0.2

I have searched the repository's issues and believe this is not a duplicate. How can I assist in moving this forward?