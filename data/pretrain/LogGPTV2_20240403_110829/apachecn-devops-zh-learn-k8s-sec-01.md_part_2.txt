### 容器运行时接口
在 Kubernetes 的最低级别，容器运行时确保容器启动、工作和停止。最流行的容器运行时是 Docker。容器运行时界面使集群管理员能够使用其他容器运行时，如`frakti`、`rktlet`和`cri-o`。
# 非立方体物体
系统的存储和计算资源被分类到不同的对象中，这些对象反映了集群的当前状态。对象是使用`.yaml`规范定义的，Kubernetes 应用编程接口用于创建和管理对象。我们将详细介绍一些常见的 Kubernetes 对象。
## PODS
荚果是 Kubernetes 星团的基本组成部分。它是由一个或多个容器组成的组，这些容器预计将共存于单个主机上。一个容器内的容器可以使用本地主机或**进程间通信** ( **IPCs** )相互引用。
## 部署
Kubernetes 部署有助于根据标签和选择器向上或向下扩展 Pod 。部署的 YAML 规范由`replicas`和`template`组成，前者是所需的 Pod 实例数，后者与 Pod 规范相同。
## 服务
Kubernetes 服务是应用的抽象。一项服务支持 Pod 的网络接入。服务和部署协同工作，以简化应用不同单元之间的管理和通信。
## 副本集
副本集确保在任何给定时间系统中运行给定数量的 pod。最好在副本集上使用部署。部署封装了副本集和荚。此外，部署还提供了执行滚动更新的能力。
## 卷
容器储存是短暂的。如果容器崩溃或重新启动，它将从启动时的原始状态开始。Kubernetes 卷有助于解决这个问题。一个容器可以使用卷来存储一个状态。Kubernetes 体积有一个荚的寿命；一旦 PODS 腐烂，体积也会被清理。一些支持的卷包括`awsElasticBlockStore`、`azureDisk`、`flocker`、`nfs`和`gitRepo`。
## 命名空间
名称空间有助于将一个物理集群划分为多个虚拟集群。多个对象可以被隔离在不同的名称空间中。默认 Kubernetes 附带三个名称空间:`default`、`kube-system`和`kube-public`。
## 服务账户
需要与`kube-apiserver`交互的 Pods 使用服务帐户来标识自己。默认情况下，Kubernetes 为提供了一个默认服务帐户列表:`kube-proxy`、`kube-dns`、`node-controller`等等。可以创建额外的服务帐户来实施自定义访问控制。
## 网络策略
网络策略定义了一组规则，这些规则规定了如何允许一组 Pod 与其他网络端点相互通信。任何传入和传出的网络连接都受网络策略的控制。默认情况下，一个 Pod 能够与所有 Pod 通信。
## Pod 安全策略
pod 安全策略是一个集群级别的资源，它定义了 pod 在系统上运行必须满足的一组条件。Pod 安全策略定义了 pod 的安全敏感配置。这些策略必须可供请求用户或目标 pod 的服务帐户访问才能工作。
# 不变变变
在 Kubernetes 生态系统中，Kubernetes 是所有变体中的旗舰。然而，还有一些其他的船只扮演着非常重要的角色。接下来，我们将介绍一些类似 Kubernetes 的平台，它们在生态系统中服务于不同的目的。
## 迷你裙
Minikube 是 Kubernetes 的单节点集群版本，可以在 Linux、macOS 和 Windows 平台上运行。Minikube 支持标准的 Kubernetes 特性，如`LoadBalancer`、服务、`PersistentVolume`、`Ingress`、容器运行时，以及开发者友好的特性，如插件和 GPU 支持。
Minikube 是获得 Kubernetes 实际操作体验的绝佳起点。这也是一个在本地运行测试的好地方，尤其是集群依赖或者概念验证。
## K3s
K3s 是一个轻量级 Kubernetes 平台。其总大小小于 40MB。它是伟大的边缘、**物联网** ( **物联网**)和 **ARM** ，以前的**高级 RISC 机**，原来的 **Acorn RISC 机**，一个为计算机处理器配置的**精简指令集计算** ( **RISC** )架构家族。它应该完全符合 Kubernetes。与 Kubernetes 的一个显著区别是它使用`sqlite`作为默认存储机制，而 Kubernetes 使用`etcd`作为其默认存储服务器。
## 开瓶器
OpenShift 版本 3 采用 Docker 作为其容器技术，采用 Kubernetes 作为其容器编排技术。在版本 4 中，OpenShift 切换到 CRI-O 作为默认的容器运行时。似乎 OpenShift 应该与 Kubernetes 相同；然而，也有不少不同之处。
### open hift vs kublantes
Linux 和红帽 Linux 之间的连接可能首先看起来和 OpenShift 和 Kubernetes 之间的连接一样。现在，让我们看看他们的一些主要区别。
#### 命名
Kubernetes 中名为的对象在 OpenShift 中可能有不同的名称，尽管有时它们的功能是相似的。例如，Kubernetes 中的一个命名空间在 OpenShift 中被称为一个项目，项目创建附带默认对象。Kubernetes 中的入口称为 OpenShift 中的路由。路由的引入实际上早于入口对象。下面，OpenShift 中的路由由 HAProxy 实现，而 Kubernetes 中有很多入口控制器选项。在 Kubernetes 的部署称为`deploymentConfig`。然而，下面的实现是完全不同的。
#### 安全
默认情况下，Kubernetes 是开放的，安全性较低。OpenShift 相对封闭，提供了一些很好的安全机制来保护集群。例如，在创建 OpenShift 集群时，DevOps 可以启用内部映像注册表，它不会暴露给外部映像注册表。同时，内部映像注册表充当受信任的注册表，映像将在其中被提取和部署。还有一点是 OpenShift 项目比`kubernetes`命名空间做得更好的——在 OpenShift 中创建项目时，可以修改项目模板，并在项目中添加额外的对象，如`NetworkPolicy`和默认配额，这些对象符合贵公司的政策。默认情况下，它也有助于硬化。
#### 费用
OpenShift 是红帽提供的产品，虽然有一个社区版本项目叫 OpenShift Origin。当人们谈论 OpenShift 时，他们通常指的是在红帽支持下的 OpenShift 产品的付费选项。Kubernetes 是一个完全免费的开源项目。
# Kubernetes 和云提供商
很多人相信 Kubernetes 是基础设施的未来，也有一些人相信一切都会以云告终。然而，这并不意味着您必须在云上运行 Kubernetes，但是它确实在云上运行得很好。
## 库柏作为服务
容器化使应用更加便携，因此锁定特定的云提供商变得不太可能。虽然有一些很棒的开源工具，比如`kubeadm`和`kops`，可以帮助 DevOps 创建 Kubernetes 集群，但是 Kubernetes 作为云提供商提供的服务听起来还是很有吸引力的。作为 Kubernetes 的最初创造者，谷歌从 2014 年开始向 Kubernetes 提供“T4”服务。叫做**谷歌 Kubernetes 引擎** ( **GKE** )。2017 年，微软提供了自己的 Kubernetes 服务，名为**Azure Kubernetes Service**(**AKS**)。AWS 在 2018 年提供**弹性 Kubernetes 服务** ( **EKS** )。
kube dex([https://kube dex . com/Google-gke-vs-Microsoft-aks-vs-Amazon-eks/](https://kubedex.com/google-gke-vs-microsoft-aks-vs-amazon-eks/))对云 Kubernetes 服务进行了一次很棒的对比。下表列出了三者之间的一些差异:
![](img/02_a.jpg)