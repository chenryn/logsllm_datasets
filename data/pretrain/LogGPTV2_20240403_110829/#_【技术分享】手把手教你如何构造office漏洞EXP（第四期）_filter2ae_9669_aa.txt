# 【技术分享】手把手教你如何构造office漏洞EXP（第四期）
##### 译文声明
本文是翻译文章，文章来源：安全客
译文仅供参考，具体内容表达以及含义原文为准。
****
**作者：**[ **维一零** ****](http://bobao.360.cn/member/contribute?uid=32687245)
**稿费：700RMB（不服你也来投稿啊！）** ****
****投稿方式：发送邮件至**[ **linwei#360.cn** ****](mailto:PI:EMAIL) **，或登陆**[
**网页版**](http://bobao.360.cn/contribute/index) **在线投稿****
**传送门**
[**【技术分享】手把手教你如何构造office漏洞EXP（第一期）**
****](http://bobao.360.cn/learning/detail/3003.html)
[**【技术分享】手把手教你如何构造office漏洞EXP（第二期）**
****](http://bobao.360.cn/learning/detail/3009.html)
[**【技术分享】手把手教你如何构造office漏洞EXP（第三期）**
****](http://bobao.360.cn/learning/detail/3049.html)
**  
**
**前言**
这一期的漏洞分享给大家带来的是CVE-2015-1641的学习总结，这个漏洞因其较好的通用性和稳定性号称有取代CVE-2012-0158的趋势。该漏洞是个类型混淆类漏洞，通过它可以实现任意地址写内存数据，然后根据漏洞的特点，再结合一些典型的利用手法可以达到任意代码执行。
**漏洞原理**
这个漏洞的常见样本是rtf文档格式的文件，这点和下文的漏洞利用有关，主要原因是rtf方便构造利用组件（当然这并不绝对）。然而，漏洞的原理其实和rtf文档格式无关，而是与office的open
xml文档格式的实现有关。这种文档格式常见的word文档拓展名就是docx，实际上是一个使用open
xml组织文档内部资源后的zip压缩包。实际上，该漏洞的rtf样本中，一般包含3个docx格式的文件组件，其中第2个文件用作触发漏洞组件，其他用作exp组件（依然并不绝对）。
上面3个zip包就是从rtf文件sample里提取出来的，至于如何提取这里简单说一下，word文档里有个插入对象的功能，可以插入另外的word文档文件，这个样本就是插入了3个docx文档进去然后主文档保存为rtf文档格式，此时这3个插入的docx文件对象在主文件中是一段16进制数据，对应3个文件的16进制编码，所以可以通过一个正则表达式使用Notepad++之类编辑器从主文件中提取16进制编码：“\objdata
[0-9a-frn]+”，然后再借助一些十六进制编辑器如010edit保存为如上的3个docx/zip文件。之后就可以开始分析漏洞原理了，先将第二个目标文件去掉zip后缀使用office打开，此时word程序会直接崩溃，并且在调试器里可以看到崩溃点是一个赋值语句且ecx为一个稳定的内存地址值，其指向的范围是漏洞利用使用到的一个为了绕过aslr的模块msvcr71.dll：
然后从文件角度来看，加上zip后缀解压如下：
其中，word目录下的document.xml为组织文档资源的首要文件，一般文档的文本内容也在里面，而从这个文件里我们就能找到触发这个漏洞的主要内容：
可以看出调试器里出现的崩溃点ecx值被直接unicode编码在了smartTag标签的element属性值里头了，并且条件满足的情况下（msvcr71模块事先已加载），后续将会进行内存拷贝，且拷贝的目标地址为根据ecx计算出来的一个值，而拷贝的数据为0xffffe696（即子标签moveFromRange*的ID值4294960790）：
从而，通过文件里那样构造的内容，主要控制两个变量值便可简单实现任意内存地址写数据的功能。当然，我们也比较关心的一个重点是，这段构造内容的原理是什么？可以看到这段内容是一组open
xml闭合标签，最外层是smartTag标签，最里层是moveFromRange*标签。分别查阅msdn文档的相关信息，可以了解到这些标签的详细说明，这里关注到moveFromRange*标签的displaceByCustomXml属性说明：
从上图可以看出，该属性指定被替换的一个custom
xml标签元素，换句话理解就是说moveFromRange*标签的该属性指定了其上级标签的一个customXml对象要被替换。然而，从样本内容上我们并没有看到customXml标签，仔细观察了一下customXml标签和smartTag标签的相关说明后才发现，这两个标签元素不仅功能作用具有一定的相似性，其内部属性的结构也比较有意思地保持一致：
可以想象这对同一模板出来的双胞胎标签，被他的缔造者微软分配到了不同的岗位，以至于有时候微软自己都没认清他们谁是谁。实际上，类型混淆漏洞正是由此而发，上文看到的调试器崩溃位置，便是word程序解析到moveFromRange*标签时，准备将其内部id移送到其上级元素smartTag（/customXml）的对象“空间”里头。通过回溯跟踪这一过程并进行对比，如果是正常情况下（上级标签为customXml），移送前会进行一次内存分配再将其拷贝至新的内存空间；而如果是混淆的情况下，由于两者对象本质的差异性，此时直接将id值移送到smartTag对象已有的内部空间里，以下为两种情况的代码跟踪序列对比图：
由于两种标签的内部属性成员具备一定的相似性导致可以类型混淆，语法上通过了内部检查，但是实际解析过程中，对象的内部缺乏严格的校验，导致混淆成smartTag对象后，解析moveFromRange*标签时认为接替需要的内存空间已存在，就直接使用错误的位置进行拷贝过程，造成了这个可被利用的安全性漏洞。
**构造触发漏洞的POC**
根据上述原理，漏洞发生的场景是word程序在解析内部自定义xml（customXml）标签存在替换标记的情况下，原本moveFromRange*标签是要将标记id传递给上级customXml对象，然而由于customXml和其兄弟标签smartTag存在一定的相似性，导致在customXml标签被替换成smartTag的时候发生类型混淆，造成内存拷贝漏洞。下面介绍如何构造触发这个漏洞的POC样本，首先我们明确一点，为了实现任意内存地址写，我们需要控制的两个变量分别是混淆后smartTag标签的element属性值和moveFromRange*标签的id值，它们分别控制了将要覆写的内存地址和内存数据，逆向跟踪一下上述的崩溃点函数：
该函数原本在解析moveFromRange*标签时被调用，此时类型混淆后ppObj指向smartTag的element成员的内存，进一步跟踪内部copy_func函数：
可见内部对ppObj指向的内存对象进行了一次检查（必要条件），然后就计算要拷贝的真正目标地址，最后才调用call_memcpy进行拷贝，整个拷贝过程可简化成以下公式：
根据此公式，我们只需要事先准备一块编排计算好目标地址的16字节内存，并将其起始地址pObj编码给smartTag的element，便能实现任意地址写内存的功能。这里，为了方便，直接将pObj赋一个不存在的内存地址，如0x0c0c0c0c，这样就会因为内存读取异常而像上面一样崩溃在同一个位置，只不过ecx的值将为0x0c0c0c0c:
    static void Main(string[] args)
    {
        string fileName = @"poc.docx";
        if (File.Exists(fileName) == true)
        {
           File.Delete(fileName);
        }
        using (WordprocessingDocument myDocument =
           WordprocessingDocument.Create(fileName, WordprocessingDocumentType.Document))
        {
           //创建文档并插入一行文字
           MainDocumentPart mainPart = myDocument.AddMainDocumentPart();
           mainPart.Document = new Document();
           Body body = mainPart.Document.AppendChild(new Body());
           Paragraph para = body.AppendChild(new Paragraph());
           Run run = para.AppendChild(new Run());
           run.AppendChild(new Text("Hello, World!"));
           //插入混淆对象
           //CustomXmlRun cxr = body.AppendChild(new CustomXmlRun()); //正常对象