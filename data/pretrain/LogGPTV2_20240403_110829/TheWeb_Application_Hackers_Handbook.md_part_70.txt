are permitted.
In addition to the possibility of allowing two-way interaction from external
domains, the new features in XMLHttpRequest may lead to new kinds of attacks
exploiting particular features of web applications, or new attacks in general.
As described in Chapter 12, some applications use XMLHttpRequest to make
asynchronous requests for fi les that are specifi ed within a URL parameter, or
after the fragment identifi er. The retrieved fi le is dynamically loaded into a 
on the current page. Since cross-domain requests were previously not possible
using XMLHttpRequest, it was not necessary to validate that the requested item
was on the application’s own domain. With the new version of XMLHttpRequest,
an attacker may be able to specify a URL on a domain he controls, thereby
performing client-side remote fi le inclusion attacks against application users.
More generally, the new features of XMLHttpRequest provide new ways for a
malicious or compromised website to deliver attacks via the browsers of visiting
users, even where cross-domain access is denied. Cross-domain port scanning
has been demonstrated, using XMLHttpRequest to make attempted requests
for arbitrary hosts and ports, and observing timing differences in responses
to infer whether the requested port is open, closed, or fi ltered. Furthermore,
XMLHttpRequest may be used to deliver distributed denial-of-service attacks
at a much faster rate than is possible using older methods of generating cross-
domain requests. If cross-domain access is denied by the targeted application,
it is necessary to increment a value in a URL parameter to ensure that each
request is for a different URL and therefore is actually issued by the browser.
Crossing Domains with Proxy Service Applications
Some publicly available web applications effectively function as proxy services,
allowing content to be retrieved from a different domain but served to the
cc1133..iinndddd 552299 88//1199//22001111 1122::1133::5599 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 530
530 Chapter 13 n Attacking Users: Other Techniques
user from within the proxying web application. An example of this is Google
Translate (GT), which requests a specifi ed external URL and returns its contents,
as shown in Figure 13-2. (Although the translation engine may modify text
within the retrieved response, the underlying HTML markup and any script
code are unmodifi ed).
Figure 13-2: Google Translate can be used to request an external URL, and return its
contents, with text in the response translated into a specified language
Where this gets interesting is if two different external domains are both
accessed via the GT application. When this happens, as far as the browser is
concerned, the content from each external domain now resides within the GT
domain, since this is the domain from which it was retrieved. Since the two
sets of content reside on the same domain, two-way interaction between them
is possible if this is also carried out via the GT domain.
Of course, if a user is logged in to an external application and then accesses
the application via GT, her browser correctly treats GT as a different domain.
Therefore, the user’s cookies for the external application are not sent in the
requests via GT, nor is any other interaction possible. Hence, a malicious website
cannot easily leverage GT to compromise users’ sessions on other applications.
However, the behavior of proxy services such as GT can enable one web-
site to perform two-way interaction with the public, unauthenticated areas
of an application on a different domain. One example of this attack is Jikto, a
cc1133..iinndddd 553300 88//1199//22001111 1122::1144::0000 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 531
Chapter 13 n Attacking Users: Other Techniques 531
proof-of-concept worm that can spread between web applications by fi nding
and exploiting persistent XSS vulnerabilities in them. In essence, Jikto’s code
works in the following way:
n When it fi rst runs, the script checks whether it is running in the GT domain.
If not, it reloads the current URL via the GT domain, effectively to transfer
itself into that domain.
n The script requests content from an external domain via GT. Since the
script itself is running in the GT domain, it can perform two-way interac-
tion with public content on any other domain via GT.
n The script implements a basic web scanner in JavaScript to probe the
external domain for persistent XSS fl aws. Such vulnerabilities may arise
within publicly accessible functions such as message boards.
n When a suitable vulnerability is identifi ed, the script exploits this to upload
a copy of itself into the external domain.
n When another user visits the compromised external domain, the script is
executed, and the process repeats itself.
The Jikto worm seeks to exploit XSS fl aws to self-propagate. However, the
basic attack technique of merging domains via proxy services does not depend
on any vulnerability in the individual external applications that are targeted,
and cannot realistically be defended against. Nevertheless, it is of interest as an
attack technique in its own right. It is also a useful topic to test your understand-
ing of how the same-origin policy applies in unusual situations.
Other Client-Side Injection Attacks
Many of the attacks we have examined so far involve leveraging some applica-
tion function to inject crafted content into application responses. The prime
example of this is XSS attacks. We have also seen the technique used to capture
data cross-domain via injected HTML and CSS. This section examines a range
of other attacks involving injection into client-side contexts.
HTTP Header Injection
HTTP header injection vulnerabilities arise when user-controllable data is
inserted in an unsafe manner into an HTTP header returned by the applica-
tion. If an attacker can inject newline characters into the header he controls, he
can insert additional HTTP headers into the response and can write arbitrary
content into the body of the response.
This vulnerability arises most commonly in relation to the Location and
Set-Cookie headers, but it may conceivably occur for any HTTP header. You
saw previously how an application may take user-supplied input and insert it
cc1133..iinndddd 553311 88//1199//22001111 1122::1144::0000 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 532
532 Chapter 13 n Attacking Users: Other Techniques
into the Location header of a 3xx response. In a similar way, some applications
take user-supplied input and insert it into the value of a cookie. For example:
GET /settings/12/Default.aspx?Language=English HTTP/1.1
Host: mdsec.net
HTTP/1.1 200 OK
Set-Cookie: PreferredLanguage=English
...
In either of these cases, it may be possible for an attacker to construct a crafted
request using the carriage-return (0x0d) and/or line-feed (0x0a) characters to
inject a newline into the header he controls and therefore insert further data
on the following line:
GET /settings/12/Default.aspx?Language=English%0d%0aFoo:+bar HTTP/1.1
Host: mdsec.net
HTTP/1.1 200 OK
Set-Cookie: PreferredLanguage=English
Foo: bar
...
Exploiting Header Injection Vulnerabilities
Potential header injection vulnerabilities can be detected in a similar way to
XSS vulnerabilities, since you are looking for cases where user-controllable
input reappears anywhere within the HTTP headers returned by the applica-
tion. Hence, in the course of probing the application for XSS vulnerabilities, you
should also identify any locations where the application may be vulnerable to
header injection.
HACK STEPS
1. For each potentially vulnerable instance in which user-controllable input
is copied into an HTTP header, verify whether the application accepts data
containing URL-encoded carriage-return (%0d) and line-feed (%0a) charac-
ters, and whether these are returned unsanitized in its response.
2. Note that you are looking for the actual newline characters themselves to
appear in the server’s response, not their URL-encoded equivalents. If you
view the response in an intercepting proxy, you should see an additional
line in the HTTP headers if the attack was successful.
3. If only one of the two newline characters is returned in the server’s
responses, it may still be possible to craft a working exploit, depending on
the context.
cc1133..iinndddd 553322 88//1199//22001111 1122::1144::0000 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 533
Chapter 13 n Attacking Users: Other Techniques 533
4. If you find that the application is blocking or sanitizing newline charac-
ters, attempt the following bypasses:
foo%00%0d%0abar
foo%250d%250abar
foo%%0d0d%%0a0abar
WARNING Issues such as these are sometimes missed through overreliance
on HTML source code and/or browser plug-ins for information, which do not
show the response headers. Ensure that you are reading the HTTP response
headers using an intercepting proxy tool.
If it is possible to inject arbitrary headers and message body content into the
response, this behavior can be used to attack other users of the application in
various ways.
TRY IT!
http://mdsec.net/settings/12/
http://mdsec.net/settings/31/
Injecting Cookies
A URL can be constructed that sets arbitrary cookies within the browser of any
user who requests it:
GET /settings/12/Default.aspx?Language=English%0d%0aSet-
Cookie:+SessId%3d120a12f98e8; HTTP/1.1
Host: mdsec.net
HTTP/1.1 200 OK
Set-Cookie: PreferredLanguage=English
Set-Cookie: SessId=120a12f98e8;
...
If suitably confi gured, these cookies may persist across different browser
sessions. Target users can be induced to access the malicious URL via the same
delivery mechanisms that were described for refl ected XSS vulnerabilities
(e-mail, third-party website, and so on).
Delivering Other Attacks
Because HTTP header injection enables an attacker to control the entire body
of a response, it can be used as a delivery mechanism for practically any attack
against other users, including virtual website defacement, script injection, arbi-
trary redirection, attacks against ActiveX controls, and so on.
cc1133..iinndddd 553333 88//1199//22001111 1122::1144::0000 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 534
534 Chapter 13 n Attacking Users: Other Techniques
HTTP Response Splitting
This attack technique seeks to poison a proxy server’s cache with malicious
content to compromise other users who access the application via the proxy. For
example, if all users on a corporate network access an application via a cach-
ing proxy, the attacker can target them by injecting malicious content into the
proxy’s cache, which is displayed to any users who request the affected page.
An attacker can exploit a header injection vulnerability to deliver a response
splitting attack by following these steps:
1. The attacker chooses a page of the application that he wants to poison
within the proxy cache. For example, he might replace the page at /admin/
with a Trojan login form that submits the user’s credentials to the attacker’s
server.
2. The attacker locates a header injection vulnerability and formulates a
request that injects an entire HTTP body into the response, plus a second
set of response headers and a second response body. The second response
body contains the HTML source code for the attacker’s Trojan login form.
The effect is that the server’s response looks exactly like two separate
HTTP responses chained together. This is where the attack technique gets
its name, because the attacker has effectively “split” the server’s response
into two separate responses. For example:
GET /settings/12/Default.aspx?Language=English%0d%0aContent-Length:+22
%0d%0a%0d%0a%0d%0afoo%0d%0a%0d%0aHTTP/1.1+200+OK%0d%0a
Content-Length:+2307%0d%0a%0d%0a%0d%0a%0d%0a
Administrator+login0d%0a[...long URL...] HTTP/1.1
Host: mdsec.net
HTTP/1.1 200 OK
Set-Cookie: PreferredLanguage=English
Content-Length: 22
foo
HTTP/1.1 200 OK
Content-Length: 2307
Administrator login
...
3. The attacker opens a TCP connection to the proxy server and sends his
crafted request, followed immediately by a request for the page to be
poisoned. Pipelining requests in this way is legal in the HTTP protocol:
cc1133..iinndddd 553344 88//1199//22001111 1122::1144::0000 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 535
Chapter 13 n Attacking Users: Other Techniques 535
GET http://mdsec.net/settings/12/Default.aspx?Language=English%0d%0a
Content-Length:+22%0d%0a%0d%0a%0d%0afoo%0d%0a%0d%0aHTTP/
1.1+200+OK%0d%0aContent-Length:+2307%0d%0a%0d%0a%0d%0a%0d%0a
Administrator+login0d%0a[...long URL...] HTTP/1.1
Host: mdsec.net
Proxy-Connection: Keep-alive
GET http://mdsec.net/admin/ HTTP/1.1
Host: mdsec.net
Proxy-Connection: Close
4. The proxy server opens a TCP connection to the application and sends
the two requests pipelined in the same way.
5. The application responds to the fi rst request with the attacker’s injected
HTTP content, which looks exactly like two separate HTTP responses.
6. The proxy server receives these two apparent responses and interprets the
second as being the response to the attacker’s second pipelined request,
which was for the URL http://mdsec.net/admin/. The proxy caches this
second response as the contents of this URL. (If the proxy has already stored
a cached copy of the page, the attacker can cause it to rerequest the URL
and update its cache with the new version by inserting an appropriate
If-Modified-Since header into his second request and a Last-Modified
header into the injected response.)
7. The application issues its actual response to the attacker’s second request,
containing the authentic contents of the URL http://mdsec.net/admin/.
The proxy server does not recognize this as being a response to a request
that it actually issued and therefore discards it.
8. A user accesses http://mdsec.net/admin/ via the proxy server and receives
the content of this URL that was stored in the proxy’s cache. This content
is in fact the attacker’s Trojan login form, so the user’s credentials are
compromised.
The steps involved in this attack are illustrated in Figure 13-3.
GET/home.php?uid=123 causes split
Request 1 HTTP/1.1 OK
%0d%0aContent-Length... response
Response to request 1
cached
Request 2 GET/admin HTTP/1.1 OK
ignored HTTP/1.1 OK Response to request 2
Figure 13-3: The steps involved in an HTTP response splitting attack that poisons a
proxy server cache
cc1133..iinndddd 553355 88//1199//22001111 1122::1144::0000 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 536
536 Chapter 13 n Attacking Users: Other Techniques
Preventing Header Injection Vulnerabilities
The most effective way to prevent HTTP header injection vulnerabilities is to
not insert user-controllable input into the HTTP headers that the application
returns. As you saw with arbitrary redirection vulnerabilities, safer alternatives
to this behavior usually are available.
If it is considered unavoidable to insert user-controllable data into HTTP
headers, the application should employ a twofold defense-in-depth approach
to prevent any vulnerabilities from arising:
n Input validation—The application should perform context-dependent
validation of the data being inserted in as strict a manner as possible.
For example, if a cookie value is being set based on user input, it may be
appropriate to restrict this to alphabetical characters only and a maximum
length of 6 bytes.
n Output validation—Every piece of data being inserted into headers should
be fi ltered to detect potentially malicious characters. In practice, any char-
acter with an ASCII code below 0x20 should be regarded as suspicious,
and the request should be rejected.
Applications can prevent any remaining header injection vulnerabilities from
being used to poison proxy server caches by using HTTPS for all application
content, provided that the application does not employ a caching reverse-proxy
server behind its SSL terminator.
Cookie Injection
In cookie injection attacks, the attacker leverages some feature of an applica-
tion’s functionality, or browser behavior, to set or modify a cookie within the
browser of a victim user.
An attacker may be able to deliver a cookie injection attack in various ways:
n Some applications contain functionality that takes a name and value in
request parameters and sets these within a cookie in the response. A
common example where this occurs is in functions for persisting user
preferences.
n As already described, if an HTTP header injection vulnerability exists,
this can be exploited to inject arbitrary Set-Cookie headers.
n XSS vulnerabilities in related domains can be leveraged to set a cookie on
a targeted domain. Any subdomains of the targeted domain itself, and
of its parent domains and their subdomains, can all be used in this way.
n An active man-in-the-middle attack (for example, against users on a public
wireless network) can be used to set cookies for arbitrary domains, even
cc1133..iinndddd 553366 88//1199//22001111 1122::1144::0000 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 537
Chapter 13 n Attacking Users: Other Techniques 537
if the targeted application uses only HTTPS and its cookies are fl agged as
secure. This kind of attack is described in more detail later in this chapter.
If an attacker can set an arbitrary cookie, this can be leveraged in various