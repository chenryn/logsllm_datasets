（5）自动扩展
支持横向扩展，动态分配额外的基础设施为调度程序提供支持。有两种类型的自动扩展，分别是主机池自动扩展以及容器自动扩展。主要考虑因素包括基于计划和基于触发器的自动扩展功能、部署和取消部署的速度、以及配置和调优的简便性。
（6）网络和负载均衡
容器技术（尤其是容器编排）为网络和负载均衡带来了前所未有的挑战。大多数容器服务支持 4 层负载均衡，但越来越多的组织机构正在使用 7
层负载均衡器（网关）、Kubernetes 入口服务等来实现负载均衡。这部分重点考虑因素是网络集成的深度、配置灵活性和实施的简易性。
（7）支持有状态的应用程序
支持无状态应用程序是容器相关技术的固有特性。由于镜像格式设计为不可变，流程短暂，以及将容器体积映射为存储空间的技术发展尚不成熟，因此，容器对有状态的应用程序提出了独特的挑战。一个关键考虑因素是服务是否支持数据持久性以及与第三方容器存储解决方案集成的能力。另一个考虑因素是数据库服务的集成和支持。
（8）监控和日志管理
必须监控和管理在服务上运行的应用程序。Telemetry
服务包括监控、报警、日志和诊断。除了功能的广度和深度之外，关键考虑因素是定义和使用的简便性。另一个关键考虑因素是兼容性、与现有使用的工具的集成度等。
（9）安全与治理
除了一般的 IaaS 安全功能，如资源级安全性和 IAM 之外，还应该有容器特有的安全功能。例如，通过扫描私有注册表镜像来查找漏洞、安全加密等。
（10）DevOps 工作流程
DevOps 工具、CI/CD
工具链、应用程序发布编排（ARO）工具和容器镜像生成器等工具都是与容器管理系统集成在一起。需要重点考虑因素是这些工具与容器服务集成的深度和广度。
（11）容器运行时
容器运行时，可以让集群节点在注册表中获取容器镜像，还可生成正确的文件结构在主机上运行容器，也可与网络和存储插件交互，也能创建、启停容器。因此，功能的深度和广度也是一个关键考虑因素。
## 3.容器的安全防护
正如上文所说，越来越多的企业利用容器来快速构建和维护新服务和新应用。但是，容器本身也存在重大的安全风险，例如不安全的容器镜像、运行环境的安全问题、架构缺陷与安全机制等，这都意味着保护容器安全将是一项持续的挑战。
容器的安全防护应该覆盖整个容器的生命周期，即容器的构建、分发、运行三个阶段，这样才能确保持续的安全性。
（1）容器构建安全性
由于开源软件在容器中广泛使用，增加了将漏洞引入企业应用程序的风险。作为构建阶段的一部分，应该扫描软件和Docker容器镜像，以发现漏洞，并在生产之前解决问题。因此需要定期扫描镜像注册中心，以检测生产就绪的容器镜像中是否存在新发现的漏洞。
此外，容器构建通常都是单一功能，因此应该删除任何不必要的包、库和其他组件，对镜像进行精简、加固，以容器减少攻击面。
（2）容器分发安全性
DevOps团队需要确保没有在生产中使用未经授权的镜像。为了保护管道的这一阶段，需要经过安全认证，比如镜像签名和访问控制。对Registry、编排工具等其他开发工具的应设置统一的访问控制策略，集成到类似LDAP这类的平台中。
编排和容器管理工具，如Kubernetes、Docker Enterprise Edition、Rancher和Red Hat
OpenShift容器平台，提供了此阶段所需的许多安全特性。
（3）容器运行安全性
运行时安全性是最重要的方面，因为应用的整个生命周期内将不断受到扫描和攻击。即使容器不断地启动、停止和更新，它们所运行的主机也很容易受到新的攻击和零日攻击。
生产环境中运行容器的安全性分为运行时准备阶段和生产环境阶段两个步骤。
运行时准备阶段
当容器正式运行在生产环境中之前，应确保容器的运行时环境是安全的。这包括容器运行时的配置、宿主机的安全、容器应用本身的安全配置、负载均衡等等其他网络或系统服务。
例如，容器运行时，需配置容器的运行用户，若不配置容器的运行用户，容器将会以ROOT权限运行。黑客一旦入侵到以ROOT权限运行的容器中，则拥有了主机内核的所有功能，黑客几乎可以做主机可以做的一切。
生产环境阶段
容器的引入带来了新的入侵方式，同时使东西向流量的安全问题更加突出，因此，对生产环境进行持续性的安全防护和检测必不可少。例如检测容器内的隐藏的WebShell、监控容器内的恶意进程、提权行为等等。
虽然在容器使用镜像运行之前，会对镜像进行一次全方位的漏洞扫描。但一方面，容器运行起来后，可能会被黑客安装上有漏洞的应用加以利用；同时随着时间的推移，软件应用中更多的漏洞被发现了，这些有可能在正在运行的容器中被使用。因此需定期扫描运行中的容器，以确保运行态的容器中不存在新的漏洞。
此外，容器的使用带来更频繁的东西向流量，因此，企业需重视容器带来的网络安全问题。首先可视化容器之间的访问关系，然后监控网络行为，检测基于网络的攻击事件如DDoS攻击、DNS攻击等。同时，需注意对容器之间的网络连接进行加密。
（4）容器安全解决方案
目前，国际市场上涌现了一批容器安全产品安全厂商，如Neuvector、Twistlock、StackRox、Aqua等等，国内自研容器安全产品的则有青藤云安全。从容器安全产品的技术方案上来看，目前大部分的容器安全厂商均使用了平行容器的方式对宿主机上的容器进行安全防护，而青藤云安全则采取了基于宿主机Agent的方式。这两种技术方式有何不同，会产生怎样不同的安全防护效果呢？
平行容器技术方案：利用容器的隔离性和良好的资源控制能力，在容器的宿主机中启动一个容器，该容器通过挂载宿主机的所有文件系统，而后在容器内部对这些文件系统进行实时监控和处理响应，以实现对容器进行防护的作用。
基于宿主机Agent的技术方案：即基于Agent的主机防护能力，监控宿主机上容器相关的文件、进程、系统调用等等信息，增加其Agent中对于容器的清点、监控、防护能力，通过一个Agent，实现宿主机安全、容器安全两种防护的效果。国内新一代主机安全厂商青藤云安全是此类方案的践行者。
以上两种方案示意图如下：
两种技术方案对比如下：
## 写在最后
以容器、微服务、Serverless 为代表的云原生技术，带来一种全新的方式来构建应用。企业 IT 架构也随之发生巨大变化，而业务又深度依赖 IT
能力。这带来了一定程度的复杂性和挑战性，尤其是其安全挑战不可忽视。企业在享受新技术带来便捷与利益的同时，其安全性也需要引起足够的重视。