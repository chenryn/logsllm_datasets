为了使您的日志配置更加清晰、连贯和专业，您可以考虑采用如下格式进行调整。这里假设您正在使用Logback或类似的日志框架，并且想要将日志发送到Logstash服务上。此外，我还加入了更详细的JSON结构来丰富日志内容，比如增加了时间戳字段等。

### 优化后的日志模式示例

```plaintext
%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36}.%M - %msg%n
```

### Logstash TCP/UDP输出配置（如果直接在应用程序中配置）

如果您希望直接从应用程序通过网络协议（如TCP）向Logstash发送日志，则可以这样设置：

1. **确保Logstash已正确安装并运行**。
2. **在Logstash端配置输入插件**以接收来自指定端口的数据。
3. **应用程序端配置**：根据使用的日志库不同，配置方式也会有所区别。以下是基于Logback的一个例子：

   ```xml
   <configuration>
       <appender name="LOGSTASH" class="net.logstash.logback.appender.LogstashTcpSocketAppender">
           <destination>${logstash.host}:5000</destination>
           <encoder charset="UTF-8" class="net.logstash.logback.encoder.LogstashEncoder">
               <customFields>{"application":"hello-app","service":"formatter-1"}</customFields>
               <!-- 添加更多自定义字段 -->
           </encoder>
       </appender>

       <root level="info">
           <appender-ref ref="LOGSTASH" />
       </root>
   </configuration>
   ```

### JSON Payload 示例

当上述配置被应用后，每条日志条目将以JSON格式发送给Logstash服务器，其中包含但不限于以下信息：

- `@timestamp` - 日志生成的确切时间。
- `message` - 实际的日志消息。
- `thread_name` - 执行该日志语句的线程名。
- `level` - 日志级别 (INFO, ERROR 等)。
- `logger_name` - 记录此日志的类名或包名。
- `application` - 应用程序标识符。
- `service` - 服务名称或其他相关元数据。

这样的设置不仅提高了日志的可读性和维护性，还便于后续使用ELK Stack (Elasticsearch, Logstash, Kibana) 进行复杂的日志分析与监控。希望这些建议对您有所帮助！