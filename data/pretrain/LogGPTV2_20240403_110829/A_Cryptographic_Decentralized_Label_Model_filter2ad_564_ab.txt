o, a set of readers r, and a set of writers w. When attached
to a piece of data, such a policy means that owner o certiﬁes
that the data can be read only with the authority of o or of
some principal in r. Similarly, p can only write such data
when p is o or in w.
Formally, a DLM label is function of type P → 2P ×2P.
Notation ‘ = {o1 : r1 ! w1; o2 : r2 ! w2} abbreviates
(r1, w1)
(r2, w2)
(P,∅)
‘(o) =
o = o1
o = o2
otherwise.
The projections ‘(o1).C and ‘(o2).I give r1 and w2. Be-
cause principals are totally ordered, functions (predicates)
may be deﬁned by recursion (induction) as if labels were
lists of policies.
The inequality ‘1 ≤ ‘2 holds when
∀o. ‘2(o).C ⊆ ‘1(o).C ∧ ‘1(o).I ⊆ ‘2(o).I.
The conﬁdentiality of the policy deﬁned by C(o : r ! w) =
o : r !∅; integrity is deﬁned by I(o : r ! w) = o : P ! w.
These deﬁnitions generalize to labels in the natural way. If
‘ = ‘1 t ‘2 then
‘(o) = (‘1(o).C ∩ ‘2(o).C, ‘1(o).I ∪ ‘2(o).I).
Predicates for reading and writing hold when princi-
pals can cooperate to read or write labeled data. Predicate
p reads ‘ is deﬁned to be true iff ∀o. ∃p ∈ p. p ∈ {o} ∪
‘(o).I, and p writes ‘ when ∀o. ∃p ∈ p. p ∈ {o} ∪ ‘(o).C.
Intuitively, p can read (write) when every owner permits at
least one member of p to read (write).
convenience, we will write
{p1, p2 : r ! w} for {p1 : r ! w; p2 : r ! w}.
It’s clear
that the most restrictive label, {>}, is {P : ∅ !P}, and the
least restrictive label, {⊥}, is {P : P !∅}.
Lemma 1. The DLM is an instance of a security lattice.
notational
As
a
2.3 SImp Syntax
SImp is based on Winskel’s IMP language [34] and
the simple security language by Volpano, Smith, and
4
Irvine [33]. SImp is stratiﬁed into pure expressions and im-
perative commands. We examine the language starting with
syntax, then work from dynamic to static semantics.
The following grammar gives the syntax of SImp:
Types
Integers
Values
Expressions
Commands
τ
i
v
e
c
::= int | τ1 + τ2 | pkg
::= . . . − 1 | 0 | 1 . . .
::= i | inl v | inr v | hvi‘
::= i | a | x | inl e | inr e | e1 + e2
|
|
::= skip | x := e | c1; c2
|
|
hvi‘ | pack e at ‘
unpack e as τ{‘} | . . .
while e do c
case e of a1 ⇒ c1 | a2 ⇒ c2
Expressions may of course be augmented with additional
operations on ints as necessary. Pairs of types and labels,
written τ{‘}, describe the shape of an expression and its
security policy. Such pairs are called labeled types. We
distinguish variables from locations. Variables, ranged over
by a, are bound in case commands and replaced by substi-
tution. Locations, ranged over by x, are never substituted
away and are used to read from and write to memory.
The new constructs for abstract encryption include pack-
ages hvi‘, pack, and unpack. The package hvi‘ is intended
to have several properties:
1. v must only be read by programs with sufﬁcient au-
thority to read ‘.
2. v must be kept conﬁdential in accordance with C(‘).
3. v must only be written to by programs with authority
to write ‘.
4. v must have only been inﬂuence by data with integrity
greater than I(‘).
The third property restricts package creation in SImp; it
would be a more powerful statement if SImp supported ﬁrst-
class pointers and structures.
Expression pack v at ‘ constructs package hvi‘. Ex-
pression unpack v as τ{‘} attempts to interpret v as a pack-
age hv0i‘0 where v0 has shape τ and where ‘0 ≤ ‘. Logi-
cally, pack and unpack serve as introduction and elimina-
tion rules for pkg. Expression forms pack e at ‘ and hvi‘
are not redundant—pack is an expression that may fail at
runtime; hvi‘ is the result of a successful pack.
No primitive type describes booleans or errors, but we
encode them with the following abbreviations:
bool = int + int
truei = inl i
falsei = inr i
error = int
illegalFlow = 1
insufficientAuth = 0
typeMismatch = 2
Typically the index of true or false is unimportant and
will be omitted. Additionally, if e then c1 else c2 is
shorthand for case e of a1 ⇒ c1 | a2 ⇒ c2 where
a1 and a2 do not appear in c1 or c2.
2.4 Dynamic Semantics
SImp programs are run with the authority of some set
Intuitively, a program run with Alice’s au-
of principals.
thority can sign and decrypt with her private key. Author-
ity is represented by a set of principals and appears in the p
component of the command and expression evaluation rules
(Figures 2 and 3).
Expressions do not have side effects but can read mem-
ory. Thus expressions must be evaluated in contexts con-
taining a memory, M. Memories are ﬁnite maps from
locations to values. Most expressions, but not pack and
unpack, are standard.
As show by rules EE-PACK-OK and EE-PACK-FAIL, ex-
pression pack v at ‘ may evaluate in two ways. If dynamic
check p writes ‘ succeeds, then the program is running with
sufﬁcient authority to write at ‘. In this case, pack evalu-
ates to inl hvi‘. However, if the program cannot write at
‘, an error results instead. While the dynamic behavior of
pack is inﬂuenced by the writes relation, it is not a covert
channel. The authority set p, label ‘ in the text of pack, and
the deﬁnition of writes do not vary at run time. Therefore
an attacker cannot gain information by observing whether a
pack succeeds.
Unpacks can fail in more ways than packs; this is re-
ﬂected in the three premises of EE-UNPACK-OK. Analo-
gously to packing, unpack hv0i‘0 as τ{‘} requires that
p reads ‘. However, the contents and label of hv0i‘0 are stat-
ically unknown, and we must make two additional runtime
checks. First, checking ‘0 ≤ ‘ ensures that the static infor-
mation ﬂow properties of SImp continue to protect v0 after
unpacking. Second, checking ‘ v0 : τ (which typechecks
v0 to ensure it has type τ) is required to avoid dynamic type
errors. This check must be delayed until runtime; check-
ing sooner is incompatible with the cryptographic semantics
given in Section 3.2.
The only unusual command is case. Tagged unions,
such as inl 0 are consumed by case, which branches on
the tag (i.e. inl) and substitutes the value (i.e. 0) for a
bound variable in the taken branch. Evaluation rules EC-
CASEL and EC-CASER deﬁne this behavior.
2.5 Static Semantics
SImp’s type system performs two roles. First, it provides
type safety; this means that the behavior of well typed pro-
grams is always deﬁned. Second, the type system prevents
high-to-low information ﬂows except where permitted by
p; M ‘ e → e0
EE-LOC
M(x) = v
p; M ‘ x → v
p; M ‘ e → e0
EE-INL
p; M ‘ inl e → inl e0
p; M ‘ e → e0
p; M ‘ inr e → inr e0 EE-INR
p; M ‘ e1 → e0
p; M ‘ e1 + e2 → e0
p; M ‘ e → e0
1 + e2
1
EE-PLUS-STRUCT1
p; M ‘ v + e → v + e0 EE-PLUS-STRUCT2
p; M ‘ i1 + i2 → i3
EE-PLUS
where [[i3 = i1 + i2]]
p; M ‘ e → e0
p; M ‘ pack e at ‘ → pack e0 at ‘
EE-PACK-STRUCT
p writes ‘
p; M ‘ pack v at ‘ → inl hvi‘
EE-PACK-OK
EE-PACK-FAIL
p; M ‘ pack v at ‘ → inr insufficientAuth
¬(p writes ‘)
p; M ‘ e → e0
EE-UNPACK-STRUCT
p; M ‘ unpack e as τ{‘} → unpack e0 as τ{‘}
EE-UNPACK-FAIL1¬(p reads ‘)
p; M ‘ unpack hv0i‘0 as τ{‘} →
inr insufficientAuth
‘0 (cid:2) ‘
p reads ‘
EE-UNPACK-FAIL2
p; M ‘ unpack hv0i‘0 as τ{‘} → inr illegalFlow
EE-UNPACK-FAIL3
p; M ‘ unpack hv0i‘0 as τ{‘} → inr typeMismatch
‘0 ≤ ‘
6‘ v : τ
p reads ‘
p reads ‘
EE-UNPACK-OK
p; M ‘ unpack hv0i‘0 as τ{‘} → inl v0
‘ v0 : τ
‘0 ≤ ‘
Figure 2. Expression Evaluation Relation
5
p ‘ hM, ci → hM0, c0i
Θ; Γ ‘ e : τ{‘}
p; M ‘ e →∗ v
p ‘ hM, x := ei → hM[x 7→ v], skipi EC-ASSIGN
p ‘ hM, skip; ci → hM, ci EC-SEQ-SKIP
p ‘ hM, c1i → hM0, c0
1i
1; c2i EC-SEQ-STRUCT
p ‘ hM, c1; c2i → hM0, c0
EC-WHILE-FALSE
p ‘ hM, while e do ci → hM, skipi
p; M ‘ e →∗ falsei
EC-WHILE-TRUE
p ‘ hM, while e do ci → hM, c; while e do ci
p; M ‘ e →∗ truei
EC-CASEL
p ‘ hM, case e of a1 ⇒ c1 | a2 ⇒ c2i →
p; M ‘ e →∗ inl v
hM, [v/a1]c1i
EC-CASER
p ‘ hM, case e of a1 ⇒ c1 | a2 ⇒ c2i →
p; M ‘ e →∗ inr v
hM, [v/a2]c2i
Figure 3. Command Evaluation Relation
pack and unpack operations. Expressions and commands
are both typed using contexts. Location contexts, written
Θ, map locations to labeled types. Variable contexts, Γ,
map variables to labeled types.
The expression typing judgment Θ; Γ ‘ e : τ{‘} means
that with contexts Θ and Γ expression e has shape τ and can
be given label ‘. Expressions relate to at most one shape,
but may be assigned many different labels. This is made
explicit by TE-SUB, which allows an expression’s label to
be raised arbitrarily. In contrast, no rule lowers labels. Rule
TE-VAR looks up locations in Θ and assigns corresponding
labels to locations; this standard rule prevents read up.
The typing of pack and unpack is novel. Expression
pack e at ‘ can be assigned a label only when e has label ‘.
Rule TE-PACK gives pack e at ‘ label ‘, subject to the con-
straint I(‘) = I(‘e) where ‘e classiﬁes e. This is because a
successful pack will yield a package that can only be deci-
phered by code with authority sufﬁcient to read ‘. Therefore
it is safe to assign the resulting package an arbitrary conﬁ-
dentiality policy. Because packing does not attempt endorse
e, integrity is preserved unchanged.
Θ; Γ ‘ i : int{‘} TE-INT
Θ; Γ ‘ hvi‘0 : pkg{‘} TE-PACKAGE
Θ; Γ ‘ e2 : int{‘}
Θ; Γ ‘ e1 : int{‘}
Θ; Γ ‘ e1 + e2 : int{‘}
TE-PLUS
Θ; Γ ‘ e : τ1{‘}
Θ; Γ ‘ inl e : (τ1 + τ2){‘} TE-SUML
Θ; Γ ‘ e : τ2{‘}
Θ; Γ ‘ inr e : (τ1 + τ2){‘} TE-SUMR
Θ; Γ ‘ e : τ{‘e}
I(‘e) = I(‘)
Θ; Γ ‘ pack e at ‘ : (pkg + error){‘} TE-PACK
Θ; Γ ‘ e : pkg{‘e}
C(‘e) = C(‘)
Θ; Γ ‘ unpack e as τ{‘} : (τ + error){‘} TE-UNPACK
Γ(a) = τ{‘}
Θ; Γ ‘ a : τ{‘} TE-VAR
Θ; Γ ‘ e : τ{‘0}
Θ; Γ ‘ e : τ{‘}
Θ(x) = τ{‘}
Θ; Γ ‘ x : τ{‘} TE-LOC
‘0 ≤ ‘
TE-SUB
Figure 4. Expression Typing
to pack.
Typing unpack is dual
The expression
unpack e as τ{‘} is classiﬁed by ‘ when e is labeled
by ‘e and C(‘e) = C(‘). That is, unpack maintains e’s
conﬁdentiality but evaluates to a (potentially) lower—more
trusted—integrity level. During execution e evaluates to a
package of form hv0i‘0 and conditions ‘0 ≤ ‘ and ‘ v0 : τ
are checked. These conditions ensure that labeled type τ{‘}
can classify v0 without introducing illegal ﬂows or stuck
evaluation states. Thus the unpack can safely be given la-
beled type τ{‘}.
Command typing is basically standard.
Intuitively, if
judgment pc; Θ; Γ ‘ c holds then command c does not leak
information. The pc component indicates the highest la-
bel assigned to locations or variables which may have in-
ﬂuenced control ﬂow at command c. First consider rule
TC-ASSIGN; it only types x := e when the label of x is
greater than the pc joined with the label of e. This prevents
write down. Now consider while x do c. Rule TC-WHILE
accepts this command only when c0 can be checked with
6
pc; Θ; Γ ‘ c
∼=‘ v2
v1
pc; Θ; Γ ‘ skip
Θ; Γ ‘ e : τ{‘e}
pc; Θ; Γ ‘ x := e
Θ(x) = τ{‘}
‘e t pc ≤ ‘
pc; Θ; Γ ‘ c1
pc; Θ; Γ ‘ c2
pc; Θ; Γ ‘ c1; c2
Θ; Γ ‘ e : bool{‘}
pc t ‘; Θ; Γ ‘ c
pc; Θ; Γ ‘ while e do c
Θ; Γ ‘ e : (τ1 + τ2){‘}
pc t ‘; Θ; Γ[a1 7→ τ1{‘}] ‘ c1
pc t ‘; Θ; Γ[a2 7→ τ2{‘}] ‘ c2
pc; Θ; Γ ‘ case e of a1 ⇒ c1 | a2 ⇒ c2
TC-SKIP
i ∼=‘ i
VE-INT
v1
inl v1
∼=‘ v2
∼=‘ inl v2
VE-INL
TC-ASSIGN
TC-SEQ
v1
hv1i‘1
v1
inr v1
∼=‘ v2
∼=‘ inr v2
∼=‘ v2
∼=‘ hv2i‘1
VE-INR
VE-PACK-IN
TC-WHILE
‘1 (cid:2) ‘
∼=‘ hv2i‘1
hv1i‘1
VE-PACK-LAB
Figure 6. Equivalent Values
‘0 = ⊥ and C(‘0) = C({>}), the program is rejected.
TC-CASE
2.6 Noninterference
pc0; Θ; Γ ‘ c
pc ≤ pc0