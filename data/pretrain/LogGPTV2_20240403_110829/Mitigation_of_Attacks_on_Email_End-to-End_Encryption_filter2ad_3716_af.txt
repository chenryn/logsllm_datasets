12https://datatracker.ietf.org/doc/draft-autocrypt-lamps-protected-headers/
Session 5E: Infrastructure Security CCS '20, November 9–13, 2020, Virtual Event, USA1658REFERENCES
[1] P. Arntz. 2014. The RTLO method. https://blog.malwarebytes.com/cybercrime/
[2] A. Barth. 2011. The Web Origin Concept. http://tools.ietf.org/rfc/rfc6454.txt
2014/01/the-rtlo-method/
RFC6454.
[3] Adam Barth and Dan Boneth. 2005. Correcting Privacy Violations in Blind-
Carbon-Copy (BCC) Encrypted Email. https://crypto.stanford.edu/portia/papers/
bb-bcc.pdf
[4] Mihir Bellare and Chanathip Namprempre. 2008. Authenticated Encryption:
Relations among Notions and Analysis of the Generic Composition Paradigm.
Journal of Cryptology 21, 4 (Oct. 2008), 469–491. https://doi.org/10.1007/s00145-
008-9026-x
[5] H. Böck. 2018. Efail: HTML Mails have no Security Concept and are to
https://blog.hboeck.de/archives/894-Efail-HTML-Mails-have-no-
blame.
Security-Concept-and-are-to-blame.html
[6] L. Cailleux and C. Bonatti. 2015. Securing Header Fields with S/MIME. http:
//tools.ietf.org/rfc/rfc7508.txt RFC7508.
[7] J. Callas, L. Donnerhacke, H. Finney, D. Shaw, and R. Thayer. 2007. OpenPGP
Message Format. http://tools.ietf.org/rfc/rfc4880.txt RFC4880.
[8] D. Crocker. 1982. STANDARD FOR THE FORMAT OF ARPA INTERNET TEXT
MESSAGES. http://tools.ietf.org/rfc/rfc0822.txt RFC0822.
[9] D. Crocker, T. Hansen, and M. Kucherawy. 2011. DomainKeys Identified Mail
(DKIM) Signatures. http://tools.ietf.org/rfc/rfc6376.txt RFC6376.
[10] Don Davis. 2001. Defective Sign & Encrypt in S/MIME, PKCS#7, MOSS, PEM,
PGP, and XML. In Proceedings of the General Track: 2001 USENIX Annual Technical
Conference. USENIX Association, Berkeley, CA, USA, 65–78. http://dl.acm.org/
citation.cfm?id=647055.715781
[11] Donald Eastlake, Joseph Reagle, Frederick Hirsch, Thomas Roessler, Takeshi
Imamura, Blair Dillaway, Ed Simon, Kelvin Yiu, and Magnus Nyström. 2012. XML
Encryption Syntax and Processing 1.1. W3C Candidate Recommendation (2012).
http://www.w3.org/TR/2012/WD-xmlenc-core1-20121018.
[12] M. Elkins, D. Del Torto, R. Levien, and T. Roessler. 2001. MIME Security with
OpenPGP. http://tools.ietf.org/rfc/rfc3156.txt RFC3156.
[13] N. Freed and N. Borenstein. 1996. Multipurpose Internet Mail Extensions (MIME)
Part One: Format of Internet Message Bodies. http://tools.ietf.org/rfc/rfc2045.txt
RFC2045.
[14] N. Freed and N. Borenstein. 1996. Multipurpose Internet Mail Extensions (MIME)
Part Two: Media Types. http://tools.ietf.org/rfc/rfc2046.txt RFC2046.
[15] Ann Fry, Sonia Chiasson, and Anil Somayaji. 2012. Not sealed but delivered:
The (un) usability of S/MIME today. In Proceedings of the Annual Symposium on
Information Assurance and Secure Knowledge Management.
[16] Simson L Garfinkel and Robert C Miller. 2005.
Johnny 2: a user test of key
continuity management with S/MIME and Outlook Express. In Proceedings of the
2005 symposium on Usable privacy and security. ACM, 13–24.
[17] Mario Heiderich, N. Krein, D. Weißer, F. Fäßler, N. Kobeissi, A. Inführ, Hong,
https:
and J. Magazinius. 2017. Pentest-Report Thunderbird & Enigmail.
//cure53.de/pentest-report_thunderbird-enigmail.pdf.
[18] R. Housley. 2009. Cryptographic Message Syntax (CMS). http://tools.ietf.org/
rfc/rfc5652.txt RFC5652.
[19] International Organization for Standardization ISO. 2008.
ISO 32000-1:2008,
Document Management – Portable Document Format – Part 1: PDF 1.7.
[20] Tibor Jager, Kenneth G. Paterson, and Juraj Somorovsky. 2013. One Bad Apple:
Backwards Compatibility Attacks on State-of-the-Art Cryptography. In Network
and Distributed System Security Symposium (NDSS).
[21] Tibor Jager and Juraj Somorovsky. 2011. How To Break XML Encryption. In The
18th ACM Conference on Computer and Communications Security (CCS).
[22] Jonathan Katz and Bruce Schneier. 2000. A Chosen Ciphertext Attack Against Sev-
eral e-Mail Encryption Protocols. In Proceedings of the 9th Conference on USENIX
Security Symposium - Volume 9 (Denver, Colorado) (SSYM’00). USENIX Asso-
ciation, Berkeley, CA, USA, 18–18. http://dl.acm.org/citation.cfm?id=1251306.
1251324
[23] S. Kent and R. Atkinson. 1998. IP Encapsulating Security Payload (ESP). http:
//tools.ietf.org/rfc/rfc2406.txt RFC2406.
[24] Vlastimil Klíma and Tomás Rosa. 2002. Attack on Private Signature Keys of
the OpenPGP format, PGP programs and other applications compatible with
OpenPGP.
[25] W. Koch, B. Carlson, R. Tse, D. Atkins, and D. Gillmor. 2019. OpenPGP Message
Format draft-ietf-openpgp-rfc4880bis-08. https://tools.ietf.org/html/draft-ietf-
openpgp-rfc4880bis-08.
[26] D. Levi and J. Schoenwaelder. 2001. Definitions of Managed Objects for the
Delegation of Management Scripts. http://tools.ietf.org/rfc/rfc3165.txt RFC3165.
http://www.
[27] Jonas Magazinius. 2015. OpenPGP SEIP downgrade attack.
metzdowd.com/pipermail/cryptography/2015-October/026685.html.
[28] Serge Mister and Robert Zuccherato. 2005. An Attack on CFB Mode Encryption
As Used By OpenPGP. Cryptology ePrint Archive, Report 2005/033. https:
//eprint.iacr.org/2005/033.
[29] Jens Müller, Marcus Brinkmann, Damian Poddebniak, Hanno Böck, Sebastian
Schinzel, Juraj Somorovsky, and Jörg Schwenk. 2019. “Johnny, you are fired!” –
Spoofing OpenPGP and S/MIME Signatures in Emails. In 28th USENIX Security
Symposium, USENIX Security 2019.
[30] Jens Müller, Fabian Ising, Vladislav Mladenov, Christian Mainka, Sebastian
Schinzel, and Jörg Schwenk. 2019. Practical Decryption exFiltration: Breaking
PDF Encryption. In Proceedings of the 2019 ACM SIGSAC Conference on Computer
and Communications Security (London, United Kingdom) (CCS ’19). ACM, New
York, NY, USA, 15–29. https://doi.org/10.1145/3319535.3354214
[31] Jens Müller, Marcus Brinkmann, Damian Poddebniak, Sebastian Schinzel, and
Jörg Schwenk. 2019. Re: What’s Up Johnny? – Covert Content Attacks on Email
End-to-End Encryption. https://arxiv.org/ftp/arxiv/papers/1904/1904.07550.pdf.
[32] Trevor Perrin. 2002. OpenPGP security analysis. https://www.ietf.org/mail-
archive/web/openpgp/current/msg02909.html.
[33] Damian Poddebniak, Christian Dresen, Jens Müller, Fabian Ising, Sebastian
Schinzel, Simon Friedberger, Juraj Somorovsky, and Jörg Schwenk. 2018. Efail:
Breaking S/MIME and OpenPGP Email Encryption using Exfiltration Chan-
nels. In 27th USENIX Security Symposium, USENIX Security 2018, Baltimore, MD,
USA, August 15-17, 2018., William Enck and Adrienne Porter Felt (Eds.). USENIX
Association, 549–566. https://www.usenix.org/conference/usenixsecurity18/
presentation/poddebniak
[34] J. Postel. 1980. DoD standard Transmission Control Protocol. http://tools.ietf.
org/rfc/rfc0761.txt RFC0761.
[35] B. Ramsdell and S. Turner. 2010. Secure/Multipurpose Internet Mail Extensions
(S/MIME) Version 3.2 Message Specification. http://tools.ietf.org/rfc/rfc5751.txt
RFC5751.
[36] P. Resnick. 2001. Internet Message Format. http://tools.ietf.org/rfc/rfc2822.txt
[37] P. Resnick. 2008. Internet Message Format. http://tools.ietf.org/rfc/rfc5322.txt
RFC2822.
RFC5322.
[38] Phillip Rogaway. 2002. Authenticated-Encryption With Associated-Data. In
ACM CCS 2002: 9th Conference on Computer and Communications Security, Vi-
jayalakshmi Atluri (Ed.). ACM Press, Washington, DC, USA, 98–107. https:
//doi.org/10.1145/586110.586125
[39] Scott Ruoti, Jeff Andersen, Luke Dickinson, Scott Heidbrink, Tyler Monson, Mark
O’neill, Ken Reese, Brad Spendlove, Elham Vaziripour, Justin Wu, et al. 2019.
A usability study of four secure email tools using paired participants. ACM
Transactions on Privacy and Security (TOPS) 22, 2 (2019), 1–33.
[40] Scott Ruoti, Jeff Andersen, Scott Heidbrink, Mark O’Neill, Elham Vaziripour,
Justin Wu, Daniel Zappala, and Kent E. Seamons. 2015. Johnny and Jane: An-
alyzing Secure Email Using Two Novice Users. CoRR abs/1510.08554 (2015).
arXiv:1510.08554 http://arxiv.org/abs/1510.08554
[41] J. Schaad, B. Ramsdell, and S. Turner. 2019. Secure/Multipurpose Internet Mail
Extensions (S/MIME) Version 4.0 Message Specification. https://tools.ietf.org/
html/rfc8551 RFC8551.
[42] S. Sheng, L. Broderick, J. Hyland, and C. Koranda. 2006. Why Johnny Still Cant
Encrypt: Evaluating the Usability of Email Encryption Software. In Proceedings
of the 6th Symposium on Usable Privacy and Security (SOUPS ’06).
[43] Juraj Somorovsky and Jörg Schwenk. 2012. Technical Analysis of Counter-
measures against Attack on XML Encryption – or – Just Another Motivation
for Authenticated Encryption. In SERVICES Workshop on Security and Privacy
Engineering.
[44] United Nations Educational Scientific and Cultural Organization and Reporters
Without Borders. 2016. Safety Guide for Journalists – a Handbook for Reporters in
High-Risk Environments. CreateSpace Independent Publishing Platform.
[45] Alma Whitten and J Doug Tygar. [n.d.]. Why Johnny Can’t Encrypt: A Usability
Evaluation of PGP 5.0.
[46] Alma Whitten and J. D. Tygar. 1999. Why Johnny Can’t Encrypt: A Usability
Evaluation of PGP 5.0. In Proceedings of the 8th Conference on USENIX Secu-
rity Symposium - Volume 8 (Washington, D.C.) (SSYM’99). USENIX Association,
Berkeley, CA, USA, 14–14. http://dl.acm.org/citation.cfm?id=1251421.1251435
Session 5E: Infrastructure Security CCS '20, November 9–13, 2020, Virtual Event, USA1659A BACKGROUND ON MIME, S/MIME AND
PGP/MIME
Multipurpose Internet Mail Extensions (MIME). In 1996, the
original ASCII based email data format from RFC 822 [8] was ex-
tended by a series of five RFCs, to improve support for non-ASCII
and binary data in an email, and to allow to define complex data
structures within each RFC 822 email body. The two most impor-
tant novelties were: (1) The development of a classification scheme
for internet data formats – the so-called MIME types which are
used beyond email, for example, in the HTTP protocol. (2) The
introduction of standardized encoding schemes for non-ASCII data.
The MIME types introduced in [23] can roughly be classified
in two groups: MIME types defining existing data formats (like
image/jpg or text/html) and MIME types for structuring data
(multipart/*). With the help of the latter, the body of an email
can have a tree-based data structure, where the leaves have MIME
types of exiting data formats, and the intermediate nodes are of
MIME type multipart/*. MIME does not completely respect the
RFC 822 empty-line-boundary between mail header and body, since
the newly defined MIME headers in the RFC 822 header (e.g.,
Content-Type) belong to the root of the MIME tree (cf. Figure 6).
MIME trees may be embedded as subtrees in another tree (e.g.,
when forwarding a message), and leaves may be truncated (e.g.,
when removing an attachment). MIME processing tries to preserve
at least the partial structure of a tree, and this is also reflected in
the crypto related standards S/MIME [41] and PGP/MIME [26].
S/MIME In S/MIME, all cryptographic data formats are enveloped
in CMS/PKCS#7 [18]. CMS itself is an ASN.1 based structured data
format, which may contain arbitrarily nested data formats. In prac-
tical applications like email this nesting must be limited, so typ-
ical combinations are encrypted or signed-then-encrypted data
(wrapped into an EnvelopedData CMS object) or encrypted-then-
signed data (wrapped into a SignedData object). Additionally, a
SignedData object may not contain the signed data itself; instead the
signed data is wrapped into the first subtree of a multipart/signed
data element, where the second leave is the SignedData object. All
CMS objects have MIME type application/pkcs7-mime, and are
distinguished by different values of the smime-type attribute.
When a signed email is forwarded, the MUA may preserve the
structure of the original MIME tree by including also the signature
in this forwarded message. Although this may pose some display
problems in the receiving MUA [29], this behaviour does make
sense since the signature still can be verified.
The same behaviour for encrypted emails, on the other hand, is
never used and only leads to problems: If an EnvelopedData CMS
object would be forwarded to a new recipient, he will not be able
to decrypt it if his email certificate is not included in a SignerInfo
object within. The only reasonable way to forward encrypted text
is to first decrypt it, and then to re-encrypt it for the new recipients.
The same holds for reply actions, where typically some new text or
file is added to the reply mail. Since this new content needs to be
encrypted, too, again the only reasonable procedure is to decrypt
the original email, paste the cleartext into the reply as a citation,
and re-encrypt the whole mail body. So in practice, an email like
the one given in Figure 6 on the left side, where only the middle
leave of the MIME tree is encrypted, will never be produced in a
real-world email scenario.
Nevertheless, the S/MIME standard specifies decryption to be
structure-preserving. So the email in Figure 6, although highly suspi-
cious, will be decrypted in a structure-preserving way: The middle
leave of the MIME tree, of content type application/pkcs7-mime,
will be extracted and decrypted, and will be replaced by the cleartext
MIME element of type text/html (Figure 6, right).
PGP/MIME In PGP/MIME, all cryptographic data formats are en-
veloped in OpenPGP [7]. For digital signatures PGP/MIME reuses
the binary multipart/signed MIME type from S/MIME, but now
the second leave is of type application/pgp-signature.
In contrast to S/MIME, the PGP/MIME element for encrypted
data is also binary. It has type multipart/encrypted and has two
leaves: The first leave has type application/pgp-encrypted and
contains a static string Version: 1 which indicates the PGP/MIME
version. The second leave contains the OpenPGP encrypted data
object and has MIME type application/octet-stream.
Since PGP/MIME is also an embedding into the MIME standard,
the same structure-preserving processing of signed and encrypted
data formats is enforced by the MUA, or by OpenPGP plugins
to the MUA (e.g., Enigmail) which are called whenever the MUA
encounters a PGP/MIME type element.
Session 5E: Infrastructure Security CCS '20, November 9–13, 2020, Virtual Event, USA1660Figure 6: Structure-preserving decryption of an encrypted MIME object.
EnvelopedDataMIMEObjectContent-Type: text/htmlContent-Transfer-Encoding: quoted-printableWewill mergewithcompanyD!!!Content-Type: application/pkcs7-mime; smime-type=“enveloped-data“Content-Transfer-Encoding: base64OID: AESOID: text/htmlEncryptedContentInfoRecipientInfosRecipientInfo: X.509 carol@f.frRecipientInfo: X.509 alice@a.comRecipientInfo: X.509 bob@b.orgBase64MIMEObjectFrom: PI:EMAIL: PI:EMAIL; carol@c.frSubject: Top SecretContent-Type: multipart/related; boundary=BOUNDARYContent-Type: text/plainContent-Transfer-Encoding: quoted-printableContent-Type: text/plainContent-Transfer-Encoding: quoted-printableHelloCarol, helloBob,Cheers, Alice--BOUNDARY--BOUNDARY--BOUNDARY--BOUNDARY--MIMEObjectMIMEObjectMIMEObjectFrom: PI:EMAIL: PI:EMAIL; carol@c.frSubject: Top SecretContent-Type: multipart/related; boundary=BOUNDARYContent-Type: text/plainContent-Transfer-Encoding: quoted-printableHelloCarol, helloBob,--BOUNDARY--BOUNDARYMIMEObjectMIMEObjectContent-Type: text/htmlContent-Transfer-Encoding: quoted-printableWewill mergewithcompanyD!!!Content-Type: text/plainContent-Transfer-Encoding: quoted-printableCheers, Alice--BOUNDARY--BOUNDARY--MIMEObjectMIMEObjectSession 5E: Infrastructure Security CCS '20, November 9–13, 2020, Virtual Event, USA16611
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
1
2
3
4
1
From: Alice 
To: Bob 
Subject: URGENT: Time for a meeting?
Content-type: multipart/mixed; boundary="BOUNDARY"
--BOUNDARY
Content-type: text/html
--BOUNDARY--
(a) Attacker-prepared email received by email client.
(b) HTML code after decryption as interpreted by the client.
http://efail.de/Secret%20MeetingTomorrow%209pm
(c) HTTP request sent by the client.
Figure 8: EFAIL-DE attack from [33]. Malicious email struc-
ture and missing context boundaries force the client to de-
crypt the ciphertext and leak the plaintext (marked red) us-
ing the  element (marked blue).
B.2 EFAIL-DE Attacks
EFAIL-DE attacks are independent of the chosen encryption mode,
and can not be mitigated by using AEAD ciphers. Although public
discussion centered around the idea that “HTML should not be
used in emails”, the main cause for EFAIL-DE attacks is that the
S/MIME standard mandates that an email client must be able to
process encrypted data regardless of its position in the MIME tree:
"An S/MIME implementation MUST be able to receive
and process arbitrarily nested S/MIME within reason-
able resource limits of the recipient computer." [41,
Section 3.7]
This mandatory behaviour is illustrated in Figure 6. Some currently
implemented countermeasures clearly violate the standard, for ex-