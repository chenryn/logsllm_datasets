### Table 6: Running Times of AES and SHA-1 in WAN Configuration

Using the parameters from Table 3 (in ms) for \( s = 80 \). The round-trip time between the parties was 75 ms.

| Number of Buckets | Offline Total (ms) | Offline per Bucket (ms) | Online Time per Bucket (ms) |
|-------------------|--------------------|------------------------|----------------------------|
| 32                | 6915               | 216                    | 1 thread: 17, 5 threads: 12, 9 threads: 8 |
| 128               | 18367              | 143                    | 1 thread: 12, 5 threads: 10, 9 threads: 6 |
| 1024              | 93613              | 91                     | 1 thread: 12, 5 threads: 10, 9 threads: 6 |

### Table 7: Running Times of AES in LAN Configuration

Using the parameters from Table 2 on c4.2xlarge instances. (The costs for \( s = 80 \) are about 2-3 times larger.)

| Number of Buckets | Offline Total (ms) | Offline per Bucket (ms) | Online Time per Bucket (ms) |
|-------------------|--------------------|------------------------|----------------------------|
| 32                | 6915               | 216                    | 1 thread: 17, 5 threads: 12, 9 threads: 8 |
| 128               | 18367              | 143                    | 1 thread: 12, 5 threads: 10, 9 threads: 6 |
| 1024              | 93613              | 91                     | 1 thread: 12, 5 threads: 10, 9 threads: 6 |

### References

[15] Y. Huang, J. Katz, V. Kolesnikov, R. Kumaresan, and A. J. Malozemoff. Amortizing garbled circuits. In CRYPTO 2014, Springer (LNCS 8617), pages 458–475, 2014.

[16] V. Kolesnikov and T. Schneider. Improved garbled circuit: Free XOR gates and applications. In ICALP 2008, Springer (LNCS 5126), pages 486–498, 2008.

[17] B. Kreuter, A. Shelat, and C.-H. Shen. Billion-gate secure computation with malicious adversaries. In USENIX Security, pages 14–14, 2012.

[18] Y. Lindell. Highly-efficient universally-composable commitments based on the DDH assumption. In EUROCRYPT 2011, Springer (LNCS 6632), pages 446–466, 2011.

[19] Y. Lindell. Fast cut-and-choose based protocols for malicious and covert adversaries. In CRYPTO 2013, Springer (LNCS 8043), pages 1–17, 2013.

[20] Y. Lindell and B. Pinkas. An efficient protocol for secure two-party computation in the presence of malicious adversaries. In EUROCRYPT 2007, Springer (LNCS 4515), pages 52–78, 2007.

[21] Y. Lindell and B. Pinkas. A proof of security of Yao’s protocol for two-party computation. Journal of Cryptology, 22(2):161–188, 2009.

[22] Y. Lindell and B. Pinkas. Secure two-party computation via cut-and-choose oblivious transfer. In the 8th TCC, Springer (LNCS 6597), pages 329–346, 2011.

[23] Y. Lindell and B. Riva. Cut-and-choose Yao-based secure computation in the online/offline and batch settings. In CRYPTO 2014, Springer (LNCS 8617), pages 476–494, 2014.

[24] P. Mohassel and M. K. Franklin. Efficiency tradeoffs for malicious two-party computation. In PKC 2006, Springer (LNCS 3958), pages 458–473, 2006.

[25] P. Mohassel and B. Riva. Garbled circuits checking garbled circuits: More efficient and secure two-party computation. In CRYPTO 2013, Springer (LNCS 8043), pages 36–53, 2013.

[26] J. B. Nielsen, P. S. Nordholt, C. Orlandi, and S. S. Burra. A new approach to practical active-secure two-party computation. In CRYPTO 2012, Springer (LNCS 7417), pages 681–700, 2012.

[27] B. Pinkas, T. Schneider, N. P. Smart, and S. C. Williams. Secure two-party computation is practical. In ASIACRYPT 2009, Springer (LNCS 5912), pages 250–267, 2009.

[28] M. O. Rabin, Y. Mansour, S. Muthukrishnan, and M. Yung. Strictly-black-box zero-knowledge and efficient validation of financial transactions. In ICALP 2012, Springer (LNCS 7391), pages 738–749, 2012.

[29] A. Shelat and C.-H. Shen. Two-output secure computation with malicious adversaries. In EUROCRYPT 2011, Springer (LNCS 6632), pages 386–405, 2011.

[30] A. Shelat and C.-h. Shen. Fast two-party secure computation with minimal assumptions. In ACM CCS, pages 523–534, 2013.

[31] N. Smart. Personal communication, February 2015.

[32] A. C.-C. Yao. How to generate and exchange secrets. In FOCS, pages 162–167, 1986.

### Appendix

#### A. Full Protocol Specification

**Figure A.1: The Offline Stage**

**Setup:**
- \( s \) is a statistical security parameter.
- \( N \) is the number of online 2PC executions that P2 wishes to run.
- \( p \) and \( p' \) are probabilities.
- \( B \) and \( B' \) are chosen according to Lemmas 2.2 and 2.3.

**Circuits:**
1. A circuit \( C(x, y^{(1)}, y^{(2)}) \) with \( y^{(2)} \) being public-input wires.
2. A cheating-recovery circuit \( C'(x, D, d^{(1)}, d^{(2)}) \) that computes \( D = ((E'd^{(1)}) \oplus d^{(2)}) ? x | 0 \), with \( d^{(2)} \) and \( D \) being public-input wires. \( E \) and \( E' \) are chosen at random by P2 as discussed in Section 2.3.

**Running the cut-and-choose for \( C \) and \( C' \):**
- The parties run the cut-and-choose sub-protocol with the circuit \( C \) and parameters \( p, N, \) and \( B \).
- The parties run the cut-and-choose sub-protocol with the circuit \( C' \) and parameters \( p', N, \) and \( B' \).

**Figure A.2: The Offline Stage (Continued) and Sub-Protocols**

**The Offline Stage – Continued:**
- The calls to \( FExCom^{\Delta}ZK \) for the masks of \( C \) and \( C' \) must be done together since P2 should learn the XORs of the masks for the circuits placed in the same bucket.
- The steps of the two cut-and-choose sub-protocols are done in parallel, allowing the calls to \( FExCom^{\Delta}ZK \) to be done together.

**Running OTs for \( C \) and \( C' \):**
- P2 chooses \( y^{(1)}_1, \ldots, y^{(1)}_N \in_R \{0, 1\}^{|y^{(1)}|} \) and \( d^{(1)}_1, \ldots, d^{(1)}_N \in_R \{0, 1\}^{|d^{(1)}|} \).
- P1 acts as the sender in \( Fot \) and P2 as the receiver. For bucket \( j = 1, \ldots, N \), the parties execute \( |y^{(1)}| \) OTs, where P2 inputs the bits of \( y^{(1)}_j \) and P1 inputs the set of labels corresponding to 0 and 1, both concatenated with their decommitments related to \( lc \)-s.
- The players do the same for circuit \( C' \), where P2 inputs the bits of \( d^{(1)}_j \).

**Storing buckets for the online stage:**
- P1 stores \( (seed_{j,i}, m_{j,i}, lc_{j,i}, ld_{j,i}, \lambda_{j,i}) \) for \( i = 1, \ldots, B \), and similarly for all the bundles of \( C' \).
- P2 stores \( y^{(1)}_j, lc_{j,i} \) and \( gc_{j,i} \) for \( i = 1, \ldots, B \). In addition, it stores the labels received for its input \( y^{(1)}_j \) from the OTs, the values of \( \Delta_j \), and similarly for all the bundles of \( C' \).

**Creating a Garbled-Circuit Bundle:**
- **Public Parameters:**
  - Pick a seed \( seed \in_R \{0, 1\}^k \). All randomness needed in the next steps is derived from \( PRF_{seed}(·) \). Pick \( m \in_R \{0, 1\}^{|x|} \).
  - Construct a garbled circuit \( gc \) in which the output-wire labels are the actual output bits concatenated with random labels.
  - Commit to \( x \)'s input-wire labels, permuted according to \( m \).
  - Commit to all input-wire labels of \( y^{(1)} \) and \( y^{(2)} \).
  - If \( D \) is an input to the circuit, commit to all input-wire labels of \( D \).
  - Commit to all output-wire labels.
  - Let \( lc \) be the union of the above sets of label commitments, and let \( ld \) be the set of all the corresponding decommitments.
  - Output \( (gc, lc; seed, ld, m, \lambda) \).

**Cut-and-Choose Mechanism:**
- **Public Parameters:**
  - Let \( s, N, B \in \mathbb{N} \) and \( p \in (0, 1) \) be parameters. Let \( M = \frac{NB}{p} \). Denote the circuit by \( C \).
- **Picking the cut, the buckets, and the offline inputs:**
  - The cut: P2 sets \( \sigma \) to be a random string of length \( M \) that has exactly \( NB \) ones.
  - The mapping: P2 picks a PRF seed \( seed_{\pi} \) and uses \( PRF_{seed_{\pi}}(·) \) to compute a mapping function \( \pi: [N \cdot B] \rightarrow [N] \) that maps exactly \( B \) elements to each bucket.
  - Define \( \pi_{\sigma}: [M] \rightarrow [N] \) to be the function that maps an index \( j \) that is the \( i \)-th non-zero bit in \( \sigma \) to \( \pi(i) \). Let \( B_i \) be the set \( \{ j | \pi_{\sigma}(j) = i \} \) for \( i = 1, \ldots, N \).
  - P2 commits on \( \sigma \) and \( seed_{\pi} \) using \( ExtractCom(·) \).

**The cut-and-choose:**
- P1 runs the garbled-circuit bundle procedure with the circuit \( C \), and receives \( (gc_j, lc_j; seed_j, ld_j, m_j, \lambda_j) \) for \( j = 1, \ldots, M \).
- P1 sends \( gc_1, \ldots, gc_M \) and \( lc_1, \ldots, lc_M \), and commits on their seeds and \( \lambda \)s using \( ExtractCom(seed_1), \ldots, ExtractCom(seed_M) \) and \( ExtractCom(\lambda_1), \ldots, ExtractCom(\lambda_M) \).
- P2 inputs to \( FExCom^{\Delta}ZK \) the sets \( B_i \) for \( i = 1, \ldots, N \), while P1 inputs the values \( m_1, \ldots, m_M \). P2 learns the sets \( \Delta_i \) for each bucket, whereas P1 learns sets \( B_i \)-s.
- P2 decommits \( \sigma \) and \( seed_{\pi} \). P1 verifies that they are consistent with \( J \) and the \( B_i \)-s received in the last step.
- Let \( J \) be the indexes that did not appear in any \( B_i \). For \( j \in J \), P1 asks \( FExCom^{\Delta}ZK \) to reveal \( m_j \), and in addition decommits \( seed_j \) and \( \lambda_j \).
- P2 computes the set \( \{gci, lci\}_{j \in J} \) using the seeds it received and verifies that everything is correct.

**Figure A.3: The Online Stage**

**Private Inputs:**
- P1’s input is \( x \).
- P2’s input is \( y \).

**Evaluating \( C \):**
- P2 sends \( y^{(2)} = y \oplus y^{(1)} \).
- P1 sends \( x_1 = x \oplus m_1 \).
- For \( i = 1, \ldots, B \):
  - P1 decommits \( \lambda_i \).
  - P1 sends the input-wire labels for \( y^{(2)} \) and for \( x_i = x_1 \oplus m_1 \oplus m_i \) in \( gc_i \), and the decommitments of those labels for the corresponding commitments in \( lc_i \).
- P1 picks \( D \in_R \{0, 1\}^k \).
- For \( v \in Out(C) \):
  - P1 chooses \( R_v \in_R \{0, 1\}^k \).
  - Let \( W_b^{i,v} \) be the \( b \)-th label of output wire \( v \) of \( gc_i \), where \( v \in Out(C) \). P1 sends \( W_0^{i,v} \oplus R_v \oplus D \) for \( i = 1, \ldots, B \).
- P1 sends \( H(D) \).
- P2 evaluates \( gc_i \) for \( i = 1, \ldots, B \), and then uses the output wire labels to "decrypt" the associated \( R_v \) and \( R_v \oplus D \) values. In case it learns both \( R_v \) and \( R_v \oplus D \) for some output wire, it checks if the XOR of them is indeed \( D \) (by applying \( H(·) \) and comparing with the value that P1 has sent). If so, it sets \( d \) to \( D \). Otherwise, it sets \( d \in \{0, 1\}^s \).

**Evaluating \( C' \):**
- Let \( d^{(1)} \) be the input that P2 used in the OTs for circuit \( C' \) in bucket \( j \). P2 sends \( d^{(2)} = d \oplus d^{(1)} E' \).
- P1 sends \( D \), and for \( i = 1, \ldots, B' \):
  - P1 decommits \( \lambda'_i \).
  - Sends the labels that correspond to \( D \) and \( d^{(2)} \) in \( gc'_i \).
  - Sends the input-wire labels for \( x'_i = x_1 \oplus m_1 \oplus m'_i \) in \( gc'_i \), and decommits the corresponding commitments from \( lc'_i \).

**P2’s Output:**
- If all evaluation circuits of \( C \) returned the same output \( z \), then P2 outputs \( z \).
- Else, if P2 has learned earlier \( d \) such that \( H(d) = H(D) \), then it outputs \( f(\hat{x}, y) \).
- Else, let \( gc_i \) be a circuit for which all the output labels that P2 received from its evaluation were also the labels that were decommitted earlier from \( lc_i \). P2 outputs the output of \( gc_i \).