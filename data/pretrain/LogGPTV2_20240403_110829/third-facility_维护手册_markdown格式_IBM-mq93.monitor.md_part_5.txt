### Configuration Events and Related Concepts

#### When Configuration Events Are Generated
Configuration events are generated in the following scenarios:

- **DEFINE/ALTER TOPIC**
- **DEFINE MAXSMSGS**
- **SET CHLAUTH**
- **ALTER QMGR**, unless the `CONFIGEV` attribute is `DISABLED` and not changed to `ENABLED`.
- Any of the following commands, or their PCF equivalent, for a local queue that is not temporary dynamic:
  - **DELETE QLOCAL**
  - **DEFINE/ALTER QLOCAL**
- **MQSET** call, other than for a temporary dynamic queue, even if there is no change to the object.

#### When Configuration Events Are Not Generated
Configuration event messages are not generated in the following circumstances:

- When a command or an **MQSET** call fails.
- When a queue manager encounters an error trying to put a configuration event on the event queue. The command or **MQSET** call completes, but no event message is generated.
- For a temporary dynamic queue.
- When internal changes are made to the `TRIGGER` queue attribute.
- For the configuration event queue `SYSTEM.ADMIN.CONFIG.EVENT`, except by the **REFRESH QMGR** command.
- For **REFRESH/RESET CLUSTER** and **RESUME/SUSPEND QMGR** commands that cause clustering changes.
- When creating or deleting a queue manager.

#### Related Concepts
- **Introduction to Programmable Command Formats**
- **Configuration events**: Notifications generated when an object is created, changed, or deleted, and can also be generated by explicit requests.

#### Related Reference
- **The MQSC commands**
- **MQSET - Set object attributes**

### Configuration Event Usage
Use configuration events to obtain information about your system and understand factors like `CMDSCOPE` that affect their use. Configuration events can be used for:

1. **Central Configuration Repository**: Produce and maintain a central repository from which reports and system structure information can be generated.
2. **Audit Trail**: Generate an audit trail. For example, if an object is changed unexpectedly, information regarding who made the alteration and when it was done can be stored. This is particularly useful when command events are also enabled. If an MQSC or PCF command causes both a configuration event and a command event, both event messages will share the same correlation identifier in their message descriptor.

#### Effects of CMDSCOPE
- For commands using `CMDSCOPE`, configuration event messages are generated on the queue manager or queue managers where the command is executed, not where the command is entered. However, all origin and context information in the event data will relate to the original command as entered.
- In a queue sharing group, events are generated for any command executed via `CMDSCOPE` on a queue manager at the current version, but not on those at a previous version. No context information is included in the event data if the command is entered on a queue manager at a previous version.

### Refresh Object Configuration Event
The **Refresh Object** configuration event occurs only when explicitly requested by the **REFRESH QMGR** command or its PCF equivalent. This command can produce many configuration event messages, potentially representing every object definition stored by a queue manager. One event message is generated for each selected object.

#### Selection Criteria
- **Object Name**
- **Object Type**
- **Refresh Interval**

If no selection criteria are specified, default values are used, and a refresh configuration event message is generated for every object definition stored by the queue manager. This might cause unacceptable processing times and event message generation. Consider specifying some selection criteria.

### Command Events
Command events are notifications that an MQSC or PCF command has run successfully. The event data contains:

- **Origin Information**: Queue manager, user ID, and how the command was issued.
- **Context Information**: Context information from the command message (if the command was entered as a message on the `SYSTEM.COMMAND.INPUT` queue).
- **Command Information**: Type of command issued.
- **Command Data**: Replication of the command data (in PCF format for PCF commands, and command text for MQSC commands).

Every command event message is placed on the command event queue `SYSTEM.ADMIN.COMMAND.EVENT`.

#### When Command Events Are Generated
- When the `CMDEV` queue manager attribute is `ENABLED` and an MQSC or PCF command runs successfully.
- When the `CMDEV` queue manager attribute is `NODISPLAY` and any command runs successfully, with the exception of `DISPLAY` commands (MQSC) and `Inquire` commands (PCF).
- When running the **ALTER QMGR** or **Change Queue Manager** command, and the `CMDEV` attribute is not `DISABLED` after the change.

#### When Command Events Are Not Generated
- When a command fails.
- When a queue manager encounters an error trying to put a command event on the event queue.
- For specific commands like **REFRESH QMGR TYPE (EARLY)**, **START QMGR MQSC**, **SUSPEND QMGR** (if `LOG` is specified), and **RESUME QMGR** (if `LOG` is specified).

### Logger Events
Logger events notify that a queue manager has started writing to a new log extent or, on IBM i, a journal receiver. These events are not available with IBM MQ for z/OS.

#### Event Data
- **Current Log Extent Name**
- **Earliest Log Extent Needed for Restart Recovery**
- **Earliest Log Extent Needed for Media Recovery**
- **Log Directory**
- **Earliest Log Extent for Archive Notification**

From IBM MQ 9.1.0, a logger event is generated for archive log management, including the `ARCHLOG` value in the logger event message.

#### When Logger Events Are Generated
- When the `LOGGEREV` queue manager attribute is `ENABLED` and the queue manager starts writing to a new log extent or, on IBM i, a journal receiver.
- When the `LOGGEREV` queue manager attribute is `ENABLED` and the queue manager starts.
- When the `LOGGEREV` queue manager attribute is changed from `DISABLED` to `ENABLED`.
- When the `LOGGEREV` queue manager attribute is notified that the oldest log extent for which the queue manager is waiting for archive notification (`ARCHLOG`) has been archived.

#### When Logger Events Are Not Generated
- When a queue manager is configured to use circular logging.
- When a queue manager encounters an error trying to put a logger event on the event queue.

### Logger Event Usage
Use logger events to determine the log extents that are no longer required for queue manager restart or media recovery. You can archive superfluous log extents to a medium such as tape for disaster recovery before removing them from the active log directory. Regular removal of superfluous log extents keeps disk space usage to a minimum.

#### Sample C Program to Monitor the Logger Event Queue
A sample C program, `AMQSLOG0.C`, monitors the logger event queue for new event messages, reads those messages, and puts the contents of the message to `stdout`.

```c
/******************************************************************************/
/* */
/* Program name: AMQSLOG0.C */
/* */
/* Description: Sample C program to monitor the logger event queue and */
/* display formatted message content to stdout when a logger */
/* event occurs */
/*  */
/* Licensed Materials - Property of IBM */
/* */
/* 5724-H72, */
/* */
/* (C) Copyright IBM Corp. 2005, 2023. All Rights Reserved. */
/* */
/* US Government Users Restricted Rights - Use, duplication or */
/* disclosure restricted by GSA ADP Schedule Contract with */
/* IBM Corp. */
/*  */
/******************************************************************************/
/* */
/* Function: AMQSLOG is a sample program which monitors the logger event */
/* queue for new event messages, reads those messages, and displays the */
/* formatted contents of the message to stdout. */
/* */
/******************************************************************************/
/* */
/* AMQSLOG has 1 parameter - the queue manager name (optional, if not */
/* specified then the default queue manager is implied) */
/* */
/******************************************************************************/
/******************************************************************************/
/* Includes */
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <cmqc.h> /* MQI constants*/
#include <cmqxc.h> /* PCF constants*/
/******************************************************************************/
/* Constants */
/******************************************************************************/
#define MAX_MESSAGE_LENGTH 8000
typedef struct _ParmTableEntry
{
    MQLONG ConstVal;
    PMQCHAR Desc;
} ParmTableEntry;

ParmTableEntry ParmTable[] =
{
    {0 ,""},
    {MQCA_Q_MGR_NAME ,"Queue Manager Name"},
    {MQCMD_LOGGER_EVENT ,"Logger Event Command"},
    {MQRC_LOGGER_STATUS ,"Logger Status"},
    {MQCACF_ARCHIVE_LOG_EXTENT_NAME,"Archive Log Extent"},
    {MQCACF_CURRENT_LOG_EXTENT_NAME,"Current Log Extent"},
    {MQCACF_RESTART_LOG_EXTENT_NAME,"Restart Log Extent"},
    {MQCACF_MEDIA_LOG_EXTENT_NAME ,"Media Log Extent"},
    {MQCACF_LOG_PATH ,"Log Path"}
};

#if defined(MQ_64_BIT)
#define Int32
#else
#define Int32 "l"
#endif
/******************************************************************************/
/* Function prototypes */
/******************************************************************************/
static void ProcessPCF(MQHCONN hConn,
                       MQHOBJ hEventQueue,
                       PMQCHAR pBuffer);
static PMQCHAR ParmToString(MQLONG Parameter);
/******************************************************************************/
/* Function: main */
/******************************************************************************/
int main(int argc, char * argv[])
{
    MQLONG CompCode;
    MQLONG Reason;
    MQHCONN hConn = MQHC_UNUSABLE_HCONN;
    MQOD ObjDesc = { MQOD_DEFAULT };
    // ... (rest of the program)
}
```

This program includes necessary headers, defines constants, and provides function prototypes for monitoring and processing PCF messages.