– DEFINE/ALTER TOPIC
– DEFINE MAXSMSGS
– SET CHLAUTH
– ALTER QMGR, unless the CONFIGEV attribute is DISABLED and is not changed to ENABLED
• any of the following commands, or their PCF equivalent, are issued for a local queue that is not
temporary dynamic, even if there is no change to the queue.
– DELETE QLOCAL
– DEFINE/ALTER QLOCAL
• an MQSET call is issued, other than for a temporary dynamic queue, even if there is no change to the
object.
When configuration events are not generated
Configuration events messages are not generated in the following circumstances:
• When a command or an MQSET call fails
• When a queue manager encounters an error trying to put a configuration event on the event queue, in
which case the command or MQSET call completes, but no event message is generated
• For a temporary dynamic queue
• When internal changes are made to the TRIGGER queue attribute
• For the configuration event queue SYSTEM.ADMIN.CONFIG.EVENT, except by the REFRESH QMGR
command
• For REFRESH/RESET CLUSTER and RESUME/SUSPEND QMGR commands that cause clustering changes
• When Creating or deleting a queue manager
Related concepts
Introduction to Programmable Command Formats
“Configuration events” on page 41
Configuration events are notifications that are generated when an object is created, changed, or deleted,
and can also be generated by explicit requests.
Related reference
The MQSC commands
MQSET - Set object attributes
MQSET - Set object attributes
IBM MQ Monitoring and performance 43
Configuration event usage
Use this page to view how you can use configuration events to obtain information about your system, and
to understand the factors, such as CMDSCOPE, that can affect your use of configuration events.
You can use configuration events for the following purposes:
1.To produce and maintain a central configuration repository, from which reports can be produced and
information about the structure of the system can be generated.
2.To generate an audit trail. For example, if an object is changed unexpectedly, information regarding
who made the alteration and when it was done can be stored.
This can be particularly useful when command events are also enabled. If an MQSC or PCF command
causes a configuration event and a command event to be generated, both event messages will share
the same correlation identifier in their message descriptor.
For an MQSET call or any of the following commands:
• DEFINE object
• ALTER object
• DELETE object
if the queue manager attribute CONFIGEV is enabled, but the configuration event message cannot be put
on the configuration event queue, for example the event queue has not been defined, the command or
MQSET call is executed regardless.
Effects of CMDSCOPE
For commands where CMDSCOPE is used, the configuration event message or messages will be
generated on the queue manager or queue managers where the command is executed, not where the
command is entered. However, all the origin and context information in the event data will relate to the
original command as entered, even where the command using CMDSCOPE is one that has been generated
by the source queue manager.
Where a queue sharing group includes queue managers that are not at the current version, events will be
generated for any command that is executed by means of CMDSCOPE on a queue manager that is at the
current version, but not on those that are at a previous version. This happens even if the queue manager
where the command is entered is at the previous version, although in such a case no context information
is included in the event data.
Related concepts
Introduction to Programmable Command Formats
“Configuration events” on page 41
Configuration events are notifications that are generated when an object is created, changed, or deleted,
and can also be generated by explicit requests.
Related reference
MQSET - Set object attributes
MQSET - Set object attributes
Refresh Object configuration event
The Refresh Object configuration event is different from the other configuration events, because it occurs
only when explicitly requested.
The create, change, and delete events are generated by an MQSET call or by a command to change
an object but the refresh object event occurs only when explicitly requested by the MQSC command,
REFRESH QMGR, or its PCF equivalent.
The REFRESH QMGR command is different from all the other commands that generate configuration
events. All the other commands apply to a particular object and generate a single configuration event for
that object. The REFRESH QMGR command can produce many configuration event messages potentially
44 Monitoring and Performance for IBM MQ
representing every object definition stored by a queue manager. One event message is generated for each
object that is selected.
The REFRESH QMGR command uses a combination of three selection criteria to filter the number of
objects involved:
• Object Name
• Object Type
• Refresh Interval
If you specify none of the selection criteria on the REFRESH QMGR command, the default values are
used for each selection criteria and a refresh configuration event message is generated for every object
definition stored by the queue manager. This might cause unacceptable processing times and event
message generation. Consider specifying some selection criteria.
The REFRESH QMGR command that generates the refresh events can be used in the following situations:
• When configuration data is wanted about all or some of the objects in a system regardless of whether
the objects have been recently manipulated, for example, when configuration events are first enabled.
Consider using several commands, each with a different selection of objects, but such that all are
included.
• If there has been an error in the SYSTEM.ADMIN.CONFIG.EVENT queue. In this circumstance, no
configuration event messages are generated for Create, Change, or Delete events. When the error on
the queue has been corrected, the Refresh Queue Manager command can be used to request the
generation of event messages, which were lost while there was an error in the queue. In this situation
consider setting the refresh interval to the time for which the queue was unavailable.
Related concepts
“Configuration events” on page 41
Configuration events are notifications that are generated when an object is created, changed, or deleted,
and can also be generated by explicit requests.
Related reference
REFRESH QMGR
Refresh Queue Manager
Command events
Command events are notifications that an MQSC, or PCF command has run successfully.
The event data contains the following information:
Origin information
comprises the queue manager from where the command was issued, the ID of the user that issued
the command, and how the command was issued, for example by a console command.
Context information
a replica of the context information in the message data from the command message. If a command is
not entered using a message, context information is omitted.
Context information is included in the event data only when the command was entered as a message
on the SYSTEM.COMMAND.INPUT queue.
Command information
the type of command that was issued.
Command data
• for PCF commands, a replica of the command data
• for MQSC commands, the command text
IBM MQ Monitoring and performance 45
The command data format does not necessarily match the format of the original command. For
example, on Multiplatforms the command data format is always in PCF format, even if the original
request was an MQSC command.
Every command event message that is generated is placed on the command event queue,
SYSTEM.ADMIN.COMMAND.EVENT.
Related reference
Command
“Event types” on page 11
Use this page to view the types of instrumentation event that a queue manager or channel instance can
report
Command event generation
Use this page to view the situations that cause command events to be generated and to understand the
circumstances in which command events are not generated
A command event message is generated in the following situations:
• When the CMDEV queue manager attribute is specified as ENABLED and an MQSC or PCF command
runs successfully.
• When the CMDEV queue manager attribute is specified as NODISPLAY and any command runs
successfully, with the exception of DISPLAY commands (MQSC), and Inquire commands (PCF).
• When you run the MQSC command, ALTER QMGR, or the PCF command, Change Queue Manager, and
the CMDEV queue manager attribute meets either of the following conditions:
– CMDEV is not specified as DISABLED after the change
– CMDEV was not specified as DISABLED before the change
If a command runs against the command event queue, SYSTEM.ADMIN.COMMAND.EVENT, a command
event is generated if the queue still exists and it is not put-inhibited.
When command events are not generated
A command event message is not generated in the following circumstances:
• When a command fails
• When a queue manager encounters an error trying to put a command event on the event queue, in
which case the command runs regardless, but no event message is generated
• For the MQSC command REFRESH QMGR TYPE (EARLY)
• For the MQSC command START QMGR MQSC
• For the MQSC command SUSPEND QMGR, if the parameter LOG is specified
• For the MQSC command RESUME QMGR, if the parameter LOG is specified
Related concepts
“Command events” on page 45
Command events are notifications that an MQSC, or PCF command has run successfully.
Related reference
REFRESH QMGR
START QMGR
SUSPEND QMGR
RESUME QMGR
SUSPEND QMGR, RESUME QMGR and clusters
46 Monitoring and Performance for IBM MQ
Command event usage
Use this page to view how you can use command events to generate an audit trail of the commands that
have run
For example, if an object is changed unexpectedly, information regarding who made the alteration
and when it was done can be stored. This can be particularly useful when configuration events are
also enabled. If an MQSC or PCF command causes a command event and a configuration event to be
generated, both event messages will share the same correlation identifier in their message descriptor.
If a command event message is generated, but cannot be put on the command event queue, for example
if the command event queue has not been defined, the command for which the command event was
generated still runs regardless.
Effects of CMDSCOPE
For commands where CMDSCOPE is used, the command event message or messages will be generated
on the queue manager or queue managers where the command runs, not where the command is entered.
However, all the origin and context information in the event data will relate to the original command as
entered, even where the command using CMDSCOPE is one that has been generated by the source queue
manager.
Related concepts
“Command events” on page 45
Command events are notifications that an MQSC, or PCF command has run successfully.
“Command event generation” on page 46
Use this page to view the situations that cause command events to be generated and to understand the
circumstances in which command events are not generated
Related reference
The MQSC commands
PCF commands and responses in groups
Logger events
Logger events are notifications that a queue manager has started writing to a new log extent
or, on IBM i, a journal receiver. Logger event messages are not available with IBM MQ for
z/OS.
The event data contains the following information:
• The name of the current log extent.
• The name of the earliest log extent needed for restart recovery.
• The name of the earliest log extent needed for media recovery.
• The directory in which the log extents are located.
• The name of the earliest log extent for which archive notification is required.
From IBM MQ 9.1.0, a logger event is generated for archive log management, that is, when ARCHLOG
changes, and the ARCHLOG value will be included the logger event message.
See DISPLAY QMSTATUS for more information on all these parameters.
You can use the CURRLOG and ARCHLOG values to determine what should be archived. Whenever
CURRLOG changes, files with numbers less than CURRLOG can be sent for archive and, once archiving
has been completed for the extent, you should call SET LOG to notify the queue manager.
ARCHLOG is the oldest extent that needs archiving. When you have archived that extent and called SET
LOG to notify the queue manager that it has been archived, the queue manager moves ARCHLOG to the
next extent in sequence. The queue manager schedules extents that are older than ARCHLOG, to be
deleted or reused.
IBM MQ Monitoring and performance 47
Once SET LOG has been called for this extent a new event is issued, as ARCHLOG will have changed,
and you need to know what needs to be archived after the new event.
If for some reason your archiving process fails, and a big build up of notifications happens, your
administrator can manually issue the command RESET QMGR TYPE(ARCHLOG). This notifies the queue
manager that it can reuse or delete all extents older than, and including, the extent you specified.
Every logger event message that is generated is placed on the logger event queue,
SYSTEM.ADMIN.LOGGER.EVENT.
Related reference
Logger
“Event types” on page 11
Use this page to view the types of instrumentation event that a queue manager or channel instance can
report
Logger event generation
Use this page to view the situations that cause logger events to be generated and to understand the
circumstances in which logger events are not generated
A logger event message is generated in the following situations:
• When the LOGGEREV queue manager attribute is specified as ENABLED and the queue manager starts
writing to a new log extent or, on IBM i, a journal receiver.
• When the LOGGEREV queue manager attribute is specified as ENABLED and the queue manager starts.
• When the LOGGEREV queue manager attribute is changed from DISABLED to ENABLED.
• When the LOGGEREV queue manager attribute is notified that the name of the oldest log extent, for
which the queue manager is waiting for archive notification (ARCHLOG) has been archived.
Tip: You can use the RESET QMGR MQSC command to request a queue manager to start writing to a new
log extent.
When logger events are not generated
A logger event message is not generated in the following circumstances:
• When a queue manager is configured to use circular logging.
In this case, the LOGGEREV queue manager attribute is set as DISABLED and cannot be altered.
• When a queue manager encounters an error trying to put a logger event on the event queue, in which
case the action that caused the event completes, but no event message is generated.
Related concepts
“Logger events” on page 47
Logger events are notifications that a queue manager has started writing to a new log extent
or, on IBM i, a journal receiver. Logger event messages are not available with IBM MQ for
z/OS.
Related reference
LoggerEvent (MQLONG)
LoggerEvent (10-digit signed integer)
RESET QMGR
48 Monitoring and Performance for IBM MQ
Logger event usage
Use this page to view how you can use logger events to determine the log extents that are no longer
required for queue manager restart, or media recovery.
You can archive superfluous log extents to a medium such as tape for disaster recovery before removing
them from the active log directory. Regular removal of superfluous log extents keeps disk space usage to
a minimum.
If the LOGGEREV queue manager attribute is enabled, but a logger event message cannot be put on the
logger event queue, for example because the event queue has not been defined, the action that caused
the event continues regardless.
Related concepts
“Logger events” on page 47
Logger events are notifications that a queue manager has started writing to a new log extent
or, on IBM i, a journal receiver. Logger event messages are not available with IBM MQ for
z/OS.
Related reference
LoggerEvent (MQLONG)
LoggerEvent (10-digit signed integer)
“Logger event generation” on page 48
Use this page to view the situations that cause logger events to be generated and to understand the
circumstances in which logger events are not generated
Sample C program to monitor the logger event queue
Use this page to view a sample C program that monitors the logger event queue for new event messages,
reads those messages, and puts the contents of the message to stdout.
/******************************************************************************/
/* */
/* Program name: AMQSLOG0.C */
/* */
/* Description: Sample C program to monitor the logger event queue and */
/* display formatted messsage content to stdout when a logger */
/* event occurs */
/*  */
/* Licensed Materials - Property of IBM */
/* */
/* 5724-H72, */
/* */
/* (C) Copyright IBM Corp. 2005, 2023. All Rights Reserved. */
/* */
/* US Government Users Restricted Rights - Use, duplication or */
/* disclosure restricted by GSA ADP Schedule Contract with */
/* IBM Corp. */
/*  */
/******************************************************************************/
/* */
/* Function: AMQSLOG is a sample program which monitors the logger event */
/* queue for new event messages, reads those messages, and displays the */
/* formatted contents of the message to stdout. */
/* */
/******************************************************************************/
/* */
/* AMQSLOG has 1 parameter - the queue manager name (optional, if not */
/* specified then the default queue manager is implied) */
/* */
/******************************************************************************/
/******************************************************************************/
/* Includes */
/******************************************************************************/
#include 
IBM MQ Monitoring and performance 49
#include 
#include 
#include  /* MQI constants*/
#include  /* PCF constants*/
/******************************************************************************/
/* Constants */
/******************************************************************************/
#define MAX_MESSAGE_LENGTH 8000
typedef struct _ParmTableEntry
{
MQLONG ConstVal;
PMQCHAR Desc;
} ParmTableEntry;
ParmTableEntry ParmTable[] =
{
{0 ,""},
{MQCA_Q_MGR_NAME ,"Queue Manager Name"},
{MQCMD_LOGGER_EVENT ,"Logger Event Command"},
{MQRC_LOGGER_STATUS ,"Logger Status"},
{MQCACF_ARCHIVE_LOG_EXTENT_NAME,"Archive Log Extent"},
{MQCACF_CURRENT_LOG_EXTENT_NAME,"Current Log Extent"},
{MQCACF_RESTART_LOG_EXTENT_NAME,"Restart Log Extent"},
{MQCACF_MEDIA_LOG_EXTENT_NAME ,"Media Log Extent"},
{MQCACF_LOG_PATH ,"Log Path"}
};
#if defined(MQ_64_BIT)
#define Int32
#else
#define Int32 "l"
#endif
/******************************************************************************/
/* Function prototypes */
/******************************************************************************/
static void ProcessPCF(MQHCONN hConn,
MQHOBJ hEventQueue,
PMQCHAR pBuffer);
static PMQCHAR ParmToString(MQLONG Parameter);
/******************************************************************************/
/* Function: main */
/******************************************************************************/
int main(int argc, char * argv[])
{
MQLONG CompCode;
MQLONG Reason;
MQHCONN hConn = MQHC_UNUSABLE_HCONN;
MQOD ObjDesc = { MQOD_DEFAULT };