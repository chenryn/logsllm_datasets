o b f u s c a t e d v e r s i o n o f O
c o d e O
return ( ∗ input >= 1 0 0 ) ;
}
Figure 6: Split obfuscation
i  100∧x ≤ 10).
Intuitively, we would like the forking points to be independent from
each other, in the sense that their efficiency combine perfectly
Definition 6 (Independence) Let us consider a program P and
σ a path of P. We obfuscate this program alternatively with two fork-
ing points F1 and F2 such that σ encounters both forking points. This
results in three obfuscated programs: P1, P2 and P1,2. We note #σ1
(resp. #σ2) the set of feasible paths created from σ when encountering
only F1 in P1 (resp. F2 in P2) and #σ1,2 the set of feasible paths
created from σ when encountering both F1 and F2 in P1,2. F1 and F2
are independent over a program P if for all path σ passing through
F1 and F2: #σ1,2 = #σ1 × #σ2
An easy way to obtain forking point independence is to consider
forking points built on independent variables – variables are in-
dependent if their values are not computed from the same input
values. Actually, if independent forking points are well placed in the
program, path-oriented protections ensure an exponential increase
in the number of paths (cf. Theorem 1, proof in Appendix A).
Theorem 1 (Optimal Composition) Suppose that P′ is ob-
tained by obfuscating the program P. If every original path of P goes
through at least k independent forking points of P′ inserting at least
θ feasible paths, then #ΠP′ ≥ #ΠP · θk
By choosing enough independent SVP forking points (one for
each input variable), we can even ensure that DSE will have to
enumerate over all possible input values of the program under
analysis, hence performing as bad as mere brute forcing.
Implementation. Ensuring that each path will go through at least
k forking points can be achieved by carefully selecting the points
in the code where the forking points are inserted: a control flow
graph analysis provides information about where and how many
forking points are needed to cover all paths. The easiest way to
impact all paths at once is to select points in the code that are not
influenced by any conditional statement. Dataflow analysis can be
used further in order to ensure that the selected variables do not
share dependencies with the same input (independent variables).
6.2 Resistance-by-design to taint and slice
Taint analysis [40] and (backward) slicing [44] are two advanced
code simplification methods built on the notion of data flow relations
through a program. These data flow relations can be defined as
Definition-Use (Def-Use) chains – as used in compilers. Data are
defined when variables are assigned values or declared, and used
in expressions. Taint (resp. Slice) uses Def-Use chains to replace
input-independent by its constant effect (resp. remove code not
impacting the output). If there exists a Def-Use chain linking data
x to data y, we write: x
Definition 7 (Relevant Variable) x is relevant if there exists
y.
at least two Def-Use chains such that input
x and x
output.
(x, a) (resp. (x, a)
A sound taint analysis (resp. slice analysis) marks at least all
variables (x,a) such that input
output). Un-
marked variables are then safely removed (slicing) or set to their
constant value (tainting). Thus, in order to resist by design such
attacks, protections must rely on code that will be marked by both
slicing and tainting.
Here, we refine the definition of a forking point F : it can be
viewed as two parts, a guard G — the condition — and an action
A — the code in the statement. We denote by V ar(F) the set of
variables in G and A. We say that F is built upon relevant variables
if all variables in V ar(F) are relevant.
Theorem 2 (Resistance by design) Let us consider a program
P and a forking point F . Assuming F is built upon relevant variables,
then F is slice and taint resistant.
Note. Our method protects against sound analyses (i.e., overap-
proximations). The proposed technique does not aim to defend
against an underapproximated analysis, which may provide rele-
vant analysis results by chance (with a low probability). However,
an underapproximated analysis may yield undue code simplifica-
tions.
Implementation. Relevant variables can be identified by modi-
fying standard compiler algorithms computing possible Def-Use
chains in order to compute real Def-Use chains – technically, going
from a may analysis to a must analysis. A more original solution
observes at runtime a set of real Def-Use chains and deduces ac-
cordingly a set of relevant variables. This method does not require
any advanced static analysis, only basic dynamic tracing features.
7 THREATS
In this section we discuss possible threats to path-oriented pro-
tections and propose adequate mitigations. Indeed, when weaving
the forking points within the code of a program, we need to en-
sure that they are hard to discover or remove. Three main attacks
seem effective against path-oriented protections: (1) taint analysis,
(2) backward slicing, (3) and pattern attacks. We showed how path-
oriented protections can be made resistant by-design to Taint and
Slice in Sec. 6.2. We now discuss pattern attacks, as well as stealth
issues and the unfriendly case of programs with small input space.
How to Kill Symbolic Deobfuscation for Free
(or: Unleashing the Potential of Path-Oriented Protections)
7.1 Pattern attacks
Pattern attacks search for specific patterns in the code of a program
to identify, and remove, known obfuscations. This kind of analysis
assumes more or less similar constructions across all implementa-
tions of an obfuscation scheme. A general defense against pattern
attacks is diversity. It works well in the case of path-oriented protec-
tions: on the one hand the schemes we provide can be implemented
in many ways, and on the other hand our framework provides
guidelines to design new schemes – altogether, it should be enough
to defeat pattern attacks. Regarding diversity of implementations,
the standard For forking point can be for example replaced by a
while loop, (mutually) recursive function(s), the loop body can be
masked through MBAs, etc. These variants can be combined as in
Fig. 8, and we can imagine many other variations.
The other schemes as well can be implemented in many ways,
and we could also think of ROP-based encoding [41] or other di-
versification techniques. Altogether, it should provide a powerful
enough mitigation against pattern attacks.
1○ for
2○ for
3○ int
4○ int
( int
( int
i ++;
i ++;
a = ( a ^ 1 ) + 2 ∗
i = 0 ;
i = 0 ;
i < input ) a ++;
i < input )
( a & 1 ) ;
i = 0 ;
while ( i < input )
{
i ++; a ++;
}
f ( int x )
{
return ( x <= 0 ? 0 :
f ( x − 1 ) + 1 ) ; }
a = f ( input ) ;
5○ # define A / /
f ( int x )
int
a r b i t r a r y v a l u e
return x <= 0 ? 0 : A + g ( x − 1 ) ; }
int g ( int x )
return ! x ? 1 − A : 2 − A + f (−−x ) ; }
{
{
a = f ( input ) ;
Figure 8: Several encodings of protection For
7.2 Stealth
In general, code protections are better when hard to identify, in
order to prevent human-level attacks like stubbing parts of the code
or designing targeted methods. Let us evaluate the stealthiness of
path-oriented protections (summary in Table 2). Split and For do
not use rare operators or exotic control-flow structures, only some
additional conditions and loops scattered through the program.
Hence Split and For are considered hard to detect on binary code,
though For especially may be visible at source level. Range Divider
is easy to spot at source level: switch statements with hundreds of
branches are indeed distinctive. Compilation makes it harder to
find but the height of the produced binary search trees or the size
of the generated jump table are easily perceptible. Write stands
somewhere in between. It cannot be easily discovered statically, but
is trivial to detect dynamically. However, since self-modification
and unpacking are common in obfuscated codes, Write could well
be mistaken for one of these more standard (and less damaging)
protections.
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
7.3 Beware: programs with small input space
Resistance by design (Sec. 6.2) relies on relevant variables, so we
only have limited room for forking points. In practice it should
not be problematic as Sec. 8 shows that we already get very strong
protection with only 3 input bytes – assuming a SVP scheme. Yet,
for programs with very limited input space, we may need to add
(fake) crafted inputs for the input space to become (apparently)
larger – see Split example in Fig. 2. In this case, our technique
still ensures resistance against tainting attacks, but slicing attacks
may now succeed. The defender must then rely on well-known (but
imperfect) anti-slicing protections to blur code analysis through
hard-to-reason-about constructs, such as pointer aliasing, arith-
metic and bit-level identities, etc.
8 EXPERIMENTAL EVALUATION
The experiments below seek to answer four Research Questions2:
RQ1 What is the impact of path-oriented protections on semantic
attackers? Especially, we consider DSE attack and two dif-
ferent attacker goals: Path Exploration (Goal 1) and Secret
Finding (Goal 2).
RQ2 What is the cost of path-oriented protections for the defender
in runtime overhead and code size increase?
RQ3 What is the effectiveness of our resistance-by-design mecha-
nism against taint and slice attacks?
RQ4 What is the difference between standard protections, path-
oriented protections and SVP protections?
8.1 Experimental setup
Tools. Our attacker mainly comprises the state-of-the-art source-
level DSE tool KLEE (version 1.4.0.0 with LLVM 3.4, POSIX runtime
and STP solver). KLEE is highly optimized [17] and works from
source code, so it is arguably the worst case off-the-shelf DSE-attacker
we can face [5]. We used all standard search heuristics (DFS, BFS,
Non-Uniform Random Search) but report only about DFS, the best
performer (see Appendix). We also used three binary-level DSE tools
(Binsec [26], Triton [38], Angr [43]), with similar results.
Regarding standard defense, we use Tigress [23], a freely avail-
able state-of-the-art obfuscator featuring many standard obfus-
cations and allowing to precisely control which ones are used –