n receivers d1, . . . , dn with node d1 being closest to the
sender, the hash tree is constructed with leaf vertices, from
left to right, (v1, . . . , vn), with vi = PRFKi (M ) where Ki
is the key shared between the sender and di. We deﬁne the
left off-path vertices Li for a hash tree leaf vi as the set of
all sibling vertices that are to the left of the path from i to
the root vertex r; similarly the right off-path vertices Ri of
vi is the set of all sibling vertices that are to the right of
the path. For example, in Figure 3, the left off-path vertices
of vertex 4 are vertices 3 and 9; similarly, there is one right
off-path vertex, 14. Given vi, Li and Ri, the authentication
path from vi to the root can be computed.
We show that Li+1 can be easily computed from Li and
vi. Intuitively, we can simply insert vi to Li and repeatedly
compute hash tree vertices as far up the authentication path
of vi as possible. This yields the deepest left-child in the
authentication path of vi. For example, in Figure 4, given
L4 (vertices 3,9) and vertex 4, we can ﬁrst compute vertex
10 and then vertex 13, which is the ﬁrst left-child in the
authentication path (4, 10, 13, 15). Vertex 13 is exactly the
left off-path vertex of vertex 5. More generally, let h be the
height of the hash tree. If Li has no vertex at maximum
depth h, then we can just add vi to Li and obtain Li+1.
Otherwise, let k be the deepest level of the hash tree which
has no vertices in Li. Then Li has vertices at all depths from
k+1 to h. Let them be uk+1, uk+2, . . . , uh respectively. Now
Li+1 has a vertex uk at level k: this vertex is root of the
largest subtree that contains vi as the right-most child, i.e., it
is the deepest left-child in the authentication path of vi. The
path from vi up to uk has each of the uk+1, uk+2, . . . , uh
as left-children; hence we can compute uk:
uk = H(uk+1(cid:4)H(uk+2(cid:4)··· H(uh−1(cid:4)H(uh(cid:4)vi))··· ))
All vertices of Li+1 at depths less than k are the same as
those at the same depth in Li. A symmetrical reasoning
applies to computing Ri−1 from Ri and vi. The algo-
rithm thus completes in two passes: in the outgoing pass,
nodes compute left off-path vertices for their downstream
neighbors; in the incoming pass, nodes compute right off-
path vertices for their upstream neighbors. The message
and authenticator (M, r) are piggybacked onto the outgoing
pass. The algorithm is shown in Algorithm 2; an example is
illustrated in Figure 3.
The communication congestion of this protocol remains
(cid:2)log n(cid:3) + 2 hash tree vertices. The round complexity of the
protocol is exactly 2n−1 rounds since the protocol proceeds
in two passes of the linear topology and the second pass does
not need to reach the sender. Total communications remains
unchanged (n(cid:2)log n(cid:3) hash values) since this algorithm is
essentially a re-ordering of the messages in the original
Algorithm 2 2-pass Hash Tree Protocol
Sender s sends (M, r) to d1
for i = 1 to n do
Node di checks freshness of M (e.g. inspect seq. num),
otherwise abort.
Node di computes Li+1 from Li and vi = PRFKi (M )
Node di sends (M, r), Li+1 downstream to Node di+1
end for
for i = n down to 1 do
Node di computes Ri−1 from Ri and vi = PRFKi (M )
Node di sends Ri−1 upstream to Node di−1
end for
Figure 3.
transmitted hash tree vertices.
Example of Algorithm 2 with 8 nodes. Numbers indicate
protocol. The maximum per-round data transfer increases
by one to (cid:2)log n(cid:3) + 1 due to the piggy-backing of r on the
outgoing pass.
2) Optimization for n round complexity: The optimiza-
tion of Section V-A1 reduced the number of passes of the
broadcast authentication protocol from three passes down
to two. We now present an additional optimization which
reduces the round complexity of the algorithm to the equiv-
alent of a single pass, i.e., n rounds. This optimization makes
the protocol optimally fast in terms of round complexity,
since all broadcast protocols on the linear topology require
at least n rounds.
The optimization is parameterizable to trade off round
complexity and congestion, and is applicable to all 2-
pass authentication protocols. The intuition is that we can
perform a variant of divide-and-conquer on the receiver set.
We observe that a 2-pass protocol takes 2n − 1 rounds
due to the round-trip time from the sender to the farthest
receiver and back. To reduce the size of this round-trip,
we can partition the set of n receivers into two contiguous
subsets R1 and R2. The ﬁrst subset R1 contains the ﬁrst
m receivers {d1, . . . , dm} (for some selected value of m)
and R2 contains the rest of the receivers {dm+1, . . . , dn}.
We then run the protocol separately for each subset. The
sender computes different authenticators T1, T2 for each
receiver subset R1, R2. Recall that for the hash-tree scheme,
the authenticators are the roots of the hash trees com-
263
Figure 4. Partitioning the receiver set
puted over the PRF values of the receiver set, so in
this case T1 is the root of the hash tree computed over
PRFK1(M ), . . . PRFKm(M ), while T2 is the root of the hash
tree computed over PRFKm+1(M ), . . . PRFKn(M ). Receiver
subset R1 performs the protocol using T1, and forwards T2
to R2 as part of its own outgoing pass; once the last node
dm receives T2, it is forwarded to dm+1 in the next round to
allow R2 to perform the protocol. Receiver subset R1 will
take 2m rounds: 2(m−1) rounds to pass messages within the
receiver set and an extra round to receive the ﬁrst message
from s and another for rm to forward T2 to R2. Receiver
subset R2 will take no more than 2(n − m) + m = 2n − m
rounds since it has n − m receivers and needs m rounds
before it receives T2 forwarded across the m nodes of set
R1. Setting m = 2
n causes both subsets to complete at the
3
n rounds) and minimizes the worst case round
same time ( 4
3
complexity.
Figure 4 shows how partitioning the receiver set yields
lower overall round complexity. The more subsets we use,
the lower the round complexity, at the cost of greater conges-
tion due to the larger number of authenticators that have to
be forwarded to the respective receiver groups. For k subsets
R1, R2, . . . , Rk, worst case round complexity is minimized
by having each successive receiver subset be half the size of
the previous subset, i.e., |Ri+1| = 1
|Ri| for i = 1, . . . , n−1,
with the smallest subset having n/(2k − 1) receivers. This
results in an overall round complexity of n + n/(2k − 1)− 1
rounds. For values of n which are not divisible by 2k−1, we
2
need to round down the subset boundaries to the next largest
integer value. This may introduce up to one extra round
in each subset. Hence the round complexity is bounded by
n + n/(2k − 1) rounds.
Each receiver subset Ri must receive a separate authenti-
cator Ti to execute its respective authentication protocol;
these authenticators must be forwarded through the ﬁrst
group R1, adding to its congestion. For k groups, we
thus have a worst-case of (cid:2)log n(cid:3) + k + 1 hash values
of communication congestion at R1. Due to the additional
overhead of carrying the extra k authenticators across up to
n hops each, the total communication overhead increases
by up to nk cryptographic values, thus an upper bound
on total communications is n((cid:2)log n(cid:3) + k) hash values.
Figure 5.
3 groups of values forwarded separately for an extra 4 rounds
The maximum per-round data transfer also increases by k
cryptographic values to (cid:2)log n(cid:3) + k + 1.
Since the optimization achieves n + n/(2k − 1) round
complexity for k subsets, setting k = log n sufﬁces to
achieve a round complexity of at most n + 1. To achieve
optimal n round complexity, we can use a slightly different
way of partitioning the receiver subsets as follows. Let
|Rk| = |Rk−1| = 1, and each preceding subset double in
size, e.g., |Rk−2| = 2,|Rk−3| = 4, and so on until R1
contains the remaining receivers. For example, a receiver
set of size n = 35 can be divided into 7 subsets of size
3, 16, 8, 4, 2, 1, 1 respectively. It can be seen that, except
possibly for R1 (which may complete early if n is not a
power of 2), all subsets complete their respective protocols
at the same time: after n rounds. This method of partitioning
yields k = (cid:2)log n(cid:3) + 1 subsets and involves a total of
2(cid:2)log n(cid:3) + 2 congestion in the hash tree protocol. Total
congestion is 2n((cid:2)log n(cid:3) + 1) hash values.
maximum per-round data by (cid:2)log n(cid:3) + 1 hash values. This
expression grows only slowly with n (e.g., 176 bytes for a
network with 1000 nodes). Furthermore, none of the values
contributing to this data transfer are mutually dependent
in terms of processing or forwarding. Hence, in the few
applications for which per-round overhead is a factor, these
values can be independently scheduled with only a small
additive effect on the number of rounds (as shown in
Figure 5).
Application of this family of optimizations increases the
Another possible concern with this optimization is that, in-
stead of a single message front outgoing from the sender and
then returning from the farthest node, we now have multiple
message fronts traversing the network simultaneously. Since
the applications that drive the linear topology are primarily
wireless, interference and medium contention between may
prevent nodes that are close together from transmitting
simultaneously. However, we can show that for a ﬁxed
interference radius δ, this implies at most an additional δ
rounds. We perform the following adaptations: instead of
splitting the receiver set into log n subsets, we stop halving
the sets when the smallest subset still has size at least δ; this
means that the receiver sets are of size n/2, n/4, . . . and so
on until the smallest set has size between 2δ − 1 and δ. We
then run the algorithm as normal, except that the returning
passes do not start until the outgoing pass has proceeded
out of interference range, i.e., we delay each returning pass
by δ rounds. It is not hard to see that this modiﬁcation
completes within n + δ rounds and the communication
congestions remains bounded by O(log n). Hence, limited-
264
radius interference only contributes a ﬁxed additive effect to
the number of rounds and does not fundamentally affect the
round complexity of the protocol.
B. Hash Chain Based Schemes
The operation of hash-chain based broadcast authenti-
cation schemes is described in Section IV-B. Within the
family of hash chain schemes, TESLA [9] uses time syn-
chronization to ensure all receivers have received the MAC
before releasing the hash chain key. Not only is secure time
synchronization an additional complication, but furthermore,
to ensure that a legitimate message is not rejected sim-
ply because it was delayed in transit, the delay between
broadcasting the MAC and releasing the key must be at
least the worst-case estimate of the round complexity from
the sender to the furthest node, which may be many times
the average case round complexity. In contrast, Guy-Fawkes
schemes like CSA [7] use explicit acknowledgments sent
from the receivers to the sender; only when the sender has
received acknowledgments from all nodes does it release
the hash chain key. This results in a three-phase protocol
with a round complexity of 3n rounds. We now describe
two optimizations that combine to reduce the number of
passes of the protocol from 3 to 2 passes, allowing us to use
the technique in Section V-A2 to improve this to optimal n
round complexity.
1) Optimization 1: Use Aggregated Acknowledgments:
In CSA, each receiver transmits a separate hash-chain based
ACK message back to the sender. This causes n messages in
total to be received by the sender, thus the communication
congestion of the scheme is n cryptographic values. Yao
et al. improve this for tree-based networks by proposing
the construction of an authenticated aggregate acknowledg-
ment via construction of a hash tree over the acknowledg-
ments [5], which reduces the congestion to a single hash
value; however the sender must know the exact topology of
the tree to verify the aggregated acknowledgment (instead
of just the receiver set).
We propose using XOR-based aggregate acknowledg-
ments [28], [2], [29] which can provide equivalent function-
ality without these drawbacks. The construction can be sum-
marized as follows: to acknowledge receipt of a message Mj
with MAC Tj , receiver di releases the value PRFKi (Tj(cid:4)Mj)
to the network where Ki is the secret key shared between
receiver di and the sender, and PRF is a cryptographic hash
function. Since Ki is secret, no other node except receiver
i can produce this value. These values are aggregated using
XOR as they traverse the return-path to the sender until
i=1 PRFKi(Tj(cid:4)Mj).
ultimately the sender receives Aj =
Since the sender knows all the Ki, it can then check the
received aggregate value to see if it is correctly the XOR
of all the PRF values computed by each receiver; if any
of the receivers did not supply the correct PRF value then
the received aggregate value will be incorrect. Katz and
(cid:2)n
Lindell formally proved that the aggregate MAC is secure
against existential forgery if each individual PRF component
is also secure against existential forgery [29]. By using this
aggregated acknowledgment in the acknowledgment phase
of Guy Fawkes, we can achieve a 3-pass protocol with
constant congestion.
it
the Hash Chain Key:
2) Optimization 2: Encrypt
is safe for receiver di
In
Guy Fawkes, the third pass where the hash chain key hj
is disseminated starts only after the sender has conﬁrmed
that all receivers have received the MAC. When using
XOR-aggregated acknowledgments, this involves checking
the received aggregate acknowledgment against
the cor-
rect value Aj that is the XOR of all the expected PRF
values. We make two observations. First, computation of
the aggregate acknowledgment can be performed on the
initial outgoing pass; this is because, similarly to the case
to
for the hash-tree schemes,
release its value PRFKi (Tj(cid:4)Mj) as soon as it has received
message Mj . This allows each node to compute the running
XOR of its own PRF value with the values of all
the
preceding receivers, until the ﬁnal receiver dn computes
i=1 PRFKi(Tj(cid:4)Mj). Second, we note that (1) Aj
Aj =
can be precomputed by the sender and (2) Aj remains
computationally indistinguishable from a random value to
the adversary as long as it contains a PRF value from at
least one legitimate receiver. Hence, Aj can be used as a key
to encrypt the value of hj; since Aj is only revealed once
all legitimate receivers have received Mj , this is precisely
the time to expose hj . In particular, in a linear topology,
this sender can include Ej = EAj(hj) in the broadcast,
where EK(X) denotes the encryption of string X with key
K. When the broadcast reaches the last node dn, it then
decrypts Ej to reveal hj which is then sent back upstream
to allow the rest of the receivers to authenticate the message.
The result is a protocol with only two passes.
(cid:2)n
In general E can be any encryption function (e.g., AES),
but since each Aj is used as a key to encrypt only one