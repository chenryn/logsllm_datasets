edged and ﬁxed the issues. nasdaq.com also provided
us a reward ($100 gift card).
9 Related Work
CORS is a relatively new web security mechanism. Al-
though a few researchers have found some CORS secu-
rity issues [44, 30, 18, 21, 20], none provides systematic
treatment of CORS security. Our work ﬁlls in this gap by
providing a comprehensive security analysis of CORS in
design, implementation and deployment.
9.1 Cross-Origin Sending Problems
Several researchers noticed some cases about CORS-
related security issues [44, 30], but they only brieﬂy dis-
cussed individual cases without systematic study. Wilan-
der opened an issue on Github [44], suggesting that Fetch
standard should restrict Accept, Accept-Language, and
Content-Language value according to RFC 7231, as an
attacker may abuse these three headers to delivery ma-
licious payloads. We found that even though Safari
adopted his advice to limit the three headers from using
some insecure values, this problem was still not com-
pletely solved. Revay found POST body format was re-
laxed in XMLHttpRequest API, which could lead to ﬁle
upload CSRF [30], and we further provided a real world
case to demonstrate this threat.
In the past, there have been some security studies
on exploiting and mitigating cross origin sending at-
tacks [4, 9, 14]. Alcorn et al. developed the BeEF
framework which could exploit CSRF and HFPA vulner-
abilities [4]. Barth et al. presented login CSRF attack
and proposed to mitigate CSRF attacks by using Origin
header [9]. Ryck et al. presented a client-side counter-
measure against CSRF attacks [14].
9.2 CORS Misconﬁguration Problems
There are also some known CORS misconﬁgurations and
studies [18, 21, 20, 26]. Gurt found a CORS conﬁg-
uration mistake in one of Facebook Message domains,
resulting in reading of victim’s chat information by any
malicious web site [18]. Kettle discovered and summa-
rized various CORS misconﬁgurations which he encoun-
tered in his penetration testing experience [21]. Inspired
by his work, we comprehensively studied and measured
CORS misconﬁguration, and further analyzed their root
causes. Johnson measured the reﬂecting origin miscon-
ﬁguration in the Alexa top 1M sites [20], and Mller [26]
measured different misconﬁgurations mentioned in Ket-
tle’s work. With the help of passive DNS database, we
further performed an in-depth evaluation on their unique
subdomains. We also analyzed different CORS frame-
works to understand those misconﬁgurations.
9.3 Other Cross-Origin Problems
From a broad perspective, our work can also be viewed as
an analysis of access control policies in the Web. Singh
et al. studied inconsistent access control policies for dif-
ferent resources in web browsers, but without including
CORS [32]. Akhawe et al. proposed a formal model
of web security and discovered some new vulnerabilities
by using the model [3]. Schwenk et al. tested the SOP
for DOM between different browsers and found many
inconsistencies [31]. Zheng et al. studied the SOP for
cookies and found that various cookie-related security is-
sues [45]. Son et al. studied the usage of PostMessage,
a client-side cross-origin communication mechanism, on
the Alexa top 10,000 websites and found many are vul-
nerable [33].
10 Conclusion
We conducted an empirical security study on CORS. We
examined CORS speciﬁcations and implementations in
both browsers and Web frameworks, and discovered a
number of new security issues. By conducting an large
scale measurement on CORS deployment in real-world
websites, we found that CORS was not well-understood
USENIX Association
27th USENIX Security Symposium    1091
by developers, 27.5% of all the CORS conﬁgured do-
mains had insecure misconﬁgurations. We further an-
alyzed the underlying reasons behind these issues and
found that while some are developer’s negligence, many
security issues are rooted in the CORS protocol design
and implementations. Finally, we proposed some im-
provements and clariﬁcations to address these problems.
Some of our proposals have been standardized in the
lastest CORS speciﬁcation and adopt by major browsers.
To aid in identifying CORS misconﬁguration issues, we
also provide an open-source tool6, to help web develop-
ers and security-practitioners to automatically evaluate
whether a website is vulnerable to the misconﬁguration
problems we found.
The reality of CORS security is an unfortunate epit-
ome of web security. As the Web keeps adding new, in
many cases, premature features, unexpected interactions
cause new security threats. Mitigation of new threats fur-
ther require new features, which if not designed properly
will again introduce new risks. Backward compatibility
further complicate the problem. We hope that web com-
munity can take more principled approach to security in
future web protocol design and implementation.
11 Acknowledgments
We would like to thank our shepherd Devdatta Akhawe
and the anonymous reviewers for their insightful com-
ments. We especially thank Yiming Gong and Man
Hou from 360 Network Security Research Lab for their
generous help on PassiveDNS data. We also gratefully
thank Anne van Kesteren, Boris Zbarsky and others from
Firefox, Eric Lawrence, Yutaka Hirano, Mike West and
others from Google Chrome, Bernardo Stein from Mi-
crosoft, Deven from Apple, and Michael Ficarra from
Shape Security for their valuable discussions and helpful
comments. We also thank Brent Peckham from Nasdaq,
Alexander Makarov from Yii framework, Mark Thomas
from Tomcat for their helpful feedback. This work was
partially supported by the Joint Research Center of Ts-
inghua University and 360 Enterprise Security Group,
and was also funded by National Natural Science Foun-
dation of China (grant #U1636204 and #61472215), the
National Key Research and Development Program of
China (#2017YFB0803202), the US National Science
Foundation(grant #CNS-1237265), and by generous sup-
port from Google and IBM. The Fudan author is sup-
ported in part by the NSFC U1636204, the National
Program on Key Basic Research (NO. 2015CB358800).
Any opinions, ﬁndings, and conclusions or recommenda-
tions expressed in this material are those of the authors
and do not necessarily reﬂect the views of their employ-
6https://github.com/chenjj/CORScanner
ers or the funding agencies.
References
[1] 360, Q. Network security research lab at 360. http://netlab.
360.com/, 2017. [accessed Feb-2018].
[2] 360, Q. Qihoo 360 technology co. ltd. http://www.360.cn/,
2017. [accessed Feb-2018].
[3] AKHAWE, D., BARTH, A., LAM, P. E., MITCHELL, J., AND
SONG, D. Towards a formal foundation of web security. In Com-
puter Security Foundations Symposium (CSF), 2010 23rd IEEE
(2010), IEEE, pp. 290–304.
[4] ALCORN, W., FRICHOT, C., AND ORRU, M. The Browser
Hacker’s Handbook. John Wiley & Sons, 2014.
[5] AYREY, D.
Json api’s are automatically protected against
csrf, and google almost took it away. https://github.com/
dxa4481/CORS, 2017. [accessed Feb-2018].
[6] BARON, D.
W3c proposed recommendation: Html5.
https://groups.google.com/forum/#!msg/mozilla.
dev.platform/BnY1261cNJo/MdkaT_EX6M0J, 2014.
cessed Feb-2018].
[ac-
[7] BARON, D.
Transition request:
Proposed obsolete for
https://lists.w3.org/Archives/Public/
[accessed
cors.
public-webappsec/2017Aug/0010.html, 2017.
Feb-2018].
[8] BARTH, A. Rfc 7231-the web origin concept. december 2011,
2011.
[9] BARTH, A., JACKSON, C., AND MITCHELL, J. C. Robust
In Proceedings of the
defenses for cross-site request forgery.
15th ACM conference on Computer and communications secu-
rity (2008), ACM, pp. 75–88.
[10] BATEMAN, A.
Access-control-allow-origin:
* and ascii-
origin in ie8. https://lists.w3.org/Archives/Public/
public-webapps/2009JanMar/0090.html, 2009. [accessed
Feb-2018].
[11] CHEN, J. Cors security:
reﬂecting any origin header value
when conﬁgured to * is dangerous. "https://bz.apache.
org/bugzilla/show_bug.cgi?id=62343", 2018. [accessed
Jun-2018].
[12] CHROME.
"https://
Block
afp
ports.
chromium.googlesource.com/chromium/src/+/
b8a8373b9d399a7fa84bd5732a3498c748dc7ac3",
[accessed Jun-2018].
2018.
[13] CHROME. Block sub-resource loads from the web to pri-
vate networks and localhost. "https://bugs.chromium.org/
p/chromium/issues/detail?id=378566", 2018. [accessed
Jun-2018].
[14] DE RYCK, P., DESMET, L., JOOSEN, W., AND PIESSENS,
F. Automatic and precise client-side protection against csrf at-
tacks. In European Symposium on Research in Computer Security
(2011), Springer, pp. 100–116.
[15] FIREFOX.
Block
afp
ports.
"https://
github.com/mozilla/gecko-dev/commit/
8005b74540bea45f0266dc809c7274ab63e07d6a",
[accessed Jun-2018].
2018.
[16] GROSSMAN,
J.
Advanced web attack techniques using
http://blog.jeremiahgrossman.com/2006/01/
2006.
gmail.
advanced-web-attack-techniques-using.html,
[accessed Feb-2018].
[17] GRGOIRE, N. Trying to hack redis via http requests. http:
//www.agarri.fr/kom/archives/2014/09/11/trying_
to_hack_redis_via_http_requests/index.html,
[accessed Feb-2018].
2014.
1092    27th USENIX Security Symposium
USENIX Association
[18] GURT, Y. Critical issue opened private chats of facebook messen-
ger users up to attackers. https://www.bugsec.com/news/
facebook-originull/, 2013. [accessed Feb-2018].
[19] IPPOLITO, B. Remote json - jsonp. http://bob.ippoli.to/
[ac-
archives/2005/12/05/remote-json-jsonp/, 2005.
cessed Feb-2018].
[20] JOHNSON, E. Misconﬁgured cors, stealing user data from the
alexa 1m. https://ejj.io/misconfigured-cors/, 2016.
[accessed Feb-2018].
[21] KETTLE, J.
Exploiting cors misconﬁgurations for bitcoins
and bounties.
http://blog.portswigger.net/2016/10/
exploiting-cors-misconfigurations-for.html, 2016.
[accessed Feb-2018].
LISTS, W.
PI:EMAIL mail
"https://lists.w3.org/Archives/Public/
archives.
public-webapps/", 2018. [accessed Feb-2018].
[22] MAIL
[23] MIKE WEST, M. G. Same site. https://tools.ietf.org/
[ac-
html/draft-west-first-party-cookies-07, 2016.
cessed Feb-2018].
[24] MITRE.
Cve-2014-6271.
cgi-bin/cvename.cgi?name=CVE-2014-6271, 2014.
cessed Feb-2018].
https://cve.mitre.org/
[ac-
[25] MITRE.
Cve-2017-5638.
cgi-bin/cvename.cgi?name=CVE-2017-5638, 2017.
cessed Feb-2018].
https://cve.mitre.org/
[ac-
[37] VAN KESTEREN, A., ET AL. Fetch. https://fetch.spec.
whatwg.org/, 2011. [accessed Feb-2018].
[38] VAN KESTEREN, A., ET AL. Cross-origin resource sharing.
W3C Recommendation 16 January 2014 (2014).
[39] VELA, E. sendbeacon let’s you send post requests with arbitrary
content type. https://bugs.chromium.org/p/chromium/
issues/detail?id=490015, 2015. [accessed Feb-2018].
[40] WHATWG. Web hypertext application technology working
group. "https://whatwg.org/", 2018. [accessed Feb-2018].
the free
encyclopedia. "https://en.wikipedia.org/wiki/Apple_
Filing_Protocol", 2018. [accessed Feb-2018].
[41] WIKIPEDIA. Apple ﬁling protocol — Wikipedia,
[42] WIKIPEDIA.
Cross-site request forgery — Wikipedia,
the
free encyclopedia.
"https://en.wikipedia.org/wiki/
Cross-site_request_forgery", 2018. [accessed Feb-2018].
[43] WIKIPEDIA. Cross-site scripting — Wikipedia, the free encyclo-
"https://en.wikipedia.org/wiki/Cross-site_
pedia.
scripting", 2018. [accessed Feb-2018].
[44] WILANDER, J. Cors-safelisted request headers should be re-
stricted according to rfc 7231. https://github.com/whatwg/
fetch/issues/382, 2016. [accessed Feb-2018].
[45] ZHENG, X., JIANG, J., LIANG, J., DUAN, H.-X., CHEN, S.,
WAN, T., AND WEAVER, N. Cookies lack integrity: Real-world
implications. In USENIX Security Symposium (2015), pp. 707–
721.
[26] MLLER,
J.
Cors misconﬁgurations on a large scale.
https://web-in-security.blogspot.com/2017/07/
cors-misconfigurations-on-large-scale.html, 2017.
[accessed Feb-2018].
[27] OWASP. Owasp top 10 secuirty issues. https://www.owasp.
org/index.php/Top_10_2007, 2007. [accessed Feb-2018].
[28] POPESCU,
P.
Practical
jsonp
injection.
https://securitycafe.ro/2017/01/18/
practical-jsonp-injection/, 2017. [accessed Feb-2018].
[29] RESCHKE, J., AND FIELDING, R. Rfc 7231-hypertext transfer
protocol (http/1.1): Semantics and content. june 2014, 2014.
[30] REVAY,
G.
Here
csrf.
here-it-is-the-file-upload-csrf/, 2013.
Feb-2018].
upload
http://gerionsecurity.com/2013/04/
[accessed
ﬁle
it
is,
the
[31] SCHWENK, J., NIEMIETZ, M., AND MAINKA, C. Same-origin
In USENIX Security
policy: Evaluation in modern browsers.
Symposium (2017).
[32] SINGH, K., MOSHCHUK, A., WANG, H. J., AND LEE, W. On
the incoherencies in web browser access control policies. In Se-
curity and Privacy (SP), 2010 IEEE Symposium on (2010), IEEE,
pp. 463–478.
[33] SON, S., AND SHMATIKOV, V. The postman always rings
twice: Attacking and defending postmessage in html5 websites.
In Network and Distributed System Security Symposium (NDSS)
(2013).
[34] STAMM, S., STERNE, B., AND MARKHAM, G. Reining in the
web with content security policy. In Proceedings of the 19th inter-
national conference on World wide web (2010), ACM, pp. 921–
930.
[35] TOPF, J.
The html form protocol attack.
http://www.
remote.org/jochen/sec/hfpa/hfpa.pdf, 2001. [accessed
Feb-2018].
[36] VAN KESTEREN, A., ET AL. Cross-origin resource sharing.
W3C Working Draft 27 July 2010 (2010).
USENIX Association
27th USENIX Security Symposium    1093