### Port Mapping and BEEP Requirements

"Port mapping" documents will be developed to define the use of specific transport protocols to meet BEEP (Blocks Extensible Exchange Protocol) requirements. BEEP can be easily mapped to any connection-oriented transport protocol that offers ordered, reliable delivery. This strongly suggests the use of TCP as the underlying transport. Efforts to map BEEP onto a connection-less, best-effort delivery protocol, such as UDP, are discouraged, as they would likely require duplicating much of the effort that went into developing TCP.

A transport mapping for TCP has been developed, defining how a BEEP session is mapped onto a single TCP connection. In March 2001, this document was designated RFC 3081 [23] and is on the IETF standards track. There have also been discussions about mapping BEEP onto the Stream Control Transmission Protocol (SCTP) [19]. SCTP is a reliable, connection-oriented protocol that provides multi-streaming functionality, allowing data to be broken into multiple independently sequenced streams.

**BEEP's Position in the TCP/IP Protocol Stack:**

- **BEEP**
- **TCP**
- **IP**
- **Ethernet, ATM, etc.**

### Intrusion Detection Exchange Protocol (IDXP)

IDXP is an implementation of the IDWG (Intrusion Detection Working Group) application-level transport protocol described in the IDWG requirements document as IDP [9]. IDXP is implemented as a BEEP profile, with BEEP providing the actual protocol and the IDXP profile specifying the necessary BEEP channel characteristics to meet the IDP requirements. IDXP can be broken down into four main phases: connection provisioning, security setup, BEEP channel creation, and data transfer.

#### 7.1 Connection Provisioning

Connections between ID entities may be established using zero or more intermediate hops. A simple BEEP connection is used for direct connections. For connections requiring one or more intermediate hops, the protocol needs to set up an application-layer tunnel across those hops.

The IDXP BEEP profile requires users to choose a BEEP tuning profile (6.7) designed to create such a tunnel and mandates support for the TUNNEL profile [15]. This preserves the orthogonality between this phase and later phases, as later phases only need to know that a connection exists from one ID entity to another. Requiring support for TUNNEL ensures interoperability between implementations for this phase.

It is important to note that no security-related requirements are placed on the creation of application-layer tunnels. This stems from IDXPâ€™s trust model, which states that only endpoints are trusted after mutual authentication. Intermediate hops are not trusted and do not participate in end-to-end security measures except in their basic function as links in the application-layer tunnel.

The IDXP profile does require that some authentication mechanism be supported by the chosen tunneling profile, particularly supporting the use of SASL [14] for tunnel creation. Security measures in tunnel creation are encouraged if the cost of security during connection provisioning is acceptable, and support for an authentication mechanism is required to provide an option for safe tunnel buildup across security perimeters. In scenarios where ID entities outside a firewall connect to other ID entities within the firewall, it is highly desirable to authenticate any host attempting to connect through the firewall (Figure 1).

#### 7.2 Security Setup

Once a connection has been provisioned, end-to-end security measures must be initiated. The IDXP profile requires the use of a BEEP tuning profile (6.7) to establish security properties that meet the IDWG requirements on transport security. Implementors are required to support the TLS profile [8], using the TLS DHE DSS WITH 3DES EDE CBC SHA ciphersuite, to ensure interoperability for this phase of the protocol.

Utilizing a tuning profile to establish end-to-end security preserves the orthogonality of this phase with other phases, as other phases assume that sufficient security measures are in place. The TLS profile is the only known profile to meet all the transport requirements of the IDWG [9] for IDP.

#### 7.3 BEEP Channel Provisioning

After establishing and securing a BEEP session, the next phase is to open one or more BEEP channels over which ID data can be exchanged. Each channel opened for use with IDXP must establish a client (source of ID data) and server (sink for ID data). The first message exchanged across a channel running IDXP contains a URI [2] for the peer and a requested role (server or client). A fully qualified domain name and/or IP address may also be supplied. Once a peer receives this message, it must decide whether the role requested by the ID entity with the given identification is acceptable and reply with an affirmative or negative answer.

Messages identifying a peer and requesting a role on a channel running IDXP may be sent at any point in the channel's lifetime, and the current role choices at any given time are determined by the last affirmatively acknowledged greeting message. The per-channel role selection allows BEEP sessions to be created between ID entities in a fully peer-to-peer fashion, permitting different concurrent exchanges within a BEEP session. Additionally, using multiple channels under a single BEEP session reduces per-exchange overhead because the costs of connection provisioning and security are only paid once at session creation.

**BEEP in Action:**

- **IDXP Profile**
- **Syslog Profile**
- **Other Profiles**
- **BEEP**
- **TCP**
- **IP**
- **Ethernet, ATM, etc.**

#### 7.4 Data Transfer

ID data is sent from clients to servers in one of three MIME types [12]: `text/xml`, `text/plain`, or `application/octet-stream`. XML data must conform to the DTD for IDMEF messages, and the remaining two types are provided to avoid restricting the present and future formatting of ID data being sent using IDXP.

Transfer categorization can be achieved by appropriating different channels to different categories of ID data, and transfer prioritization can be achieved by establishing an order in which channels are serviced (messages sent or received).

### Future Work

Future work on IDXP can be grouped into four areas: improving the IDXP specification and preparing it for the standards process, completing and testing our implementation of IDXP, developing applications that use IDXP, and extending IDXP to do more than deliver alerts.

#### 8.1 The IDXP Specification

Although there are no obvious problems with the IDXP profile, it is important to scrutinize it before the standards process to ensure its security and usability. Any ambiguities in the definition of IDXP must be resolved to avoid interoperability issues that have affected other protocols due to unclear specifications.

This process will involve testing our implementation of IDXP with others' implementations. In addition to finding any ambiguities or errors in the text, this step is crucial for identifying design problems that may hinder operation under various conditions.

After appropriate testing and refinements to the document, the working group will submit IDXP for consideration as an RFC. At that point, vendors will implement support for IDXP in their intrusion detection products.

Currently, the IDXP specification is undergoing 'final call' within the IDWG. After 'final call', the IDWG will request that IDXP become a Proposed RFC.

#### 8.2 The Implementation

There are several major problems with the current implementation:
1. The TLS profile is incomplete, so the implementation cannot verify that the correct algorithm is being used.
2. The implementation has a problem servicing multiple channels, which should include the ability to prioritize channels.
3. The configuration interface needs improvement.

Despite these issues, our IDXP implementation demonstrates the ability to fulfill the IDWG requirements for a transport protocol using the BEEP framework.

#### 8.3 IDXP Applications

To demonstrate the usefulness of IDXP, applications that make use of it must be created. The most useful demonstration would consist of a complete system of analyzers, managers, and proxies for distributing alert data across the network.

Implementing analyzers could be done by creating IDXP interfaces for existing intrusion detection products, such as a plug-in for the popular Snort tool. For applications without easily extensible architectures, a small program could convert and transmit proprietary output.

A simple manager application could collect information from analyzers and store it in a database. A user interface for collating, summarizing, and searching the alert database would provide powerful administrative capabilities.

We have created a small environment of analyzers and managers with IDXP as the transport protocol. Our goal is to expand this environment with commercial and public domain tools over the next year.

#### 8.4 Extending IDXP

Although the IDWG is currently focused on exchanging alert data, it may examine other issues in the future. One idea is to standardize methods for remote configuration of IDS. IDS that use IDXP to communicate with managers across the network might be physically located far away from those responsible for their configuration. Even if they are physically accessible, remote configuration might be preferred, especially for large-scale systems.

To allow managers to configure analyzers, standard messages need to be defined, possibly as an extension of IDMEF [7], and sent to the analyzers over the network. The natural mechanism for sending such messages is IDXP. Since managers and analyzers already connect to each other through IDXP, configuration messages could be carried on the same connection. BEEP's ability to open multiple channels over the same connection allows for a separate channel to carry configuration information, even assigning higher priority to the configuration channel to avoid delays in delivering configuration changes.

### Summary

In this paper, we describe the goals of the IDWG and the requirements for a transport protocol to communicate among intrusion detection systems. Our focus has been on specifying and implementing the Intrusion Detection Exchange Protocol (IDXP), a transport protocol designed and implemented within the BEEP framework. While there are still open issues in IDXP implementation, IDXP appears to fulfill all the IDWG requirements for a transport protocol.