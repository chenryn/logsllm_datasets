# 内存
> 注 : 笔记中拓扑图 drawio 源文件在其图片目录下
---
## 简介
计算机的物理内存一般我们指的就是随机存取存储器(Random Access Memory, 简称 RAM)。内存是一种易失性存储载体，它保存处理器主动访问和存储的代码和数据，是一个临时的数据交换空间。大多数的 PC 的内存属于一种动态 RAM(DRAM)。 它是动态变化的，因其利用了电容器在充电和放电状态间的差异来存储数据的比特位。为了维持电容器的状态，动态内存必须周期性刷新 - 这也是内存控制器最典型的任务。
由于计算机的内存 (DRAM) 需要持续供电才能保持数据可持续访问，因此也称为易失性存储。美国普林斯顿大学曾做过关于计算机冷启动攻击的研究，计算机在断电后，在很短的时间内内存的数据就会消失，然而通过液态氮冷却，可以将内存中的数据进行冻结，再通过一些技术方法来解冻并获取原来的内存数据。
RAM 随机存取存储器，也叫主存，与 CPU 直接交换数据的内部存储器，可以随时读写 (刷新时除外)，速度很快，作为操作系统或其他正在运行中的程序的临时数据存储介质。
内存是与 CPU 进行沟通的桥梁，计算机内所有程序的运行都是再内存中的，只要计算机运行，CPU 就会把需要运算的数据调到主存中进行运算，当运算完成后 CPU 将结果传送出来。
主存通过控制芯片与 CPU 进行相连，由可读写的元素构成，每个字节都带有一个地址编号，CPU 通过地址从主存中读取数据和指令，也可以根据地址写入数据。
内存内部由各种 IC 电路组成，可分为三种存储器
- 随机存储器 (RAM) : 内存中最重要的一种，表示既可以从中读取数据，也可以写入数据。当机器关闭时，内存中的信息会丢失。
- 只读存储器 (ROM) : ROM 一般只能用于数据的读取，不能写入数据，但是当机器停电时，这些数据不会丢失。
- 高速缓存 (Cache) : Cache 也是我们经常见到的，它分为一级缓存 (L1 Cache)、二级缓存 (L2 Cache)、三级缓存 (L3 Cache) 这些数据，它位于内存和 CPU 之间，是一个读写速度比内存更快的存储器。当 CPU 向内存写入数据时，这些数据也会被写入高速缓存中。当 CPU 需要读取数据时，会直接从高速缓存中直接读取，当前，如需要的数据在 Cache 中没有，CPU 会再去读取内存中的数据。
内存 IC 是一个完整的结构，它内部也有电源、地址信号、数据信号、控制信号和用于寻址的 IC 引脚来进行数据的读写。
IC 元件的两侧是引脚，IC 的所有引脚，只有两种电压: 0V 和 5V，IC 的这种特性，也就决定了计算机的信息处理只能用 0 和 1 表示。一个引脚可以表示 0 和 1，所以二进制表示方式变成 0101 等。
![](../../../assets/img/Develop/计算机基础/内存/10.png)
图中 VCC 和 GND 表示电源，A0~A9 是地址信号的引脚，D0~D7 表示的是控制信号、RD 和 WR 都是控制信号，将电源连接到 VCC 和 GND 后，就可以对其他引脚传递 0 和 1 的信号，大多数情况下，+5V 表示 1，0V 表示 0.
内存用来存储数据，图中的内存 IC，D0~D7 表示数据信号，那么一次可以输入输出 8bit=1byte 的数据。A0~A9 是地址信号共 10 个，表示可以指定 0000000000-1111111111 共 2 的 10 次方 = 1024 个地址。每个地址都会存放 1byte 的数据，因此得出内存 IC 的容量为 1KB。
如果我们使用 512MB 的内存，这相当于是 512000(512*1000) 个内存 IC，但正常时不可能有这么多个内存 IC 的。通常情况下，一个内存 IC 会由更多的引脚。
**为什么 32 位计算机内存最多是 4G**
32 位计算机的编号最大是 32 位，也就是 32 个 1 换成 16 进制为 FFFFFFFF，也就是说，32 位计算机内存寻址的最大范围是 FFFFFFFF+1
内存的单位是字节，那内存中能存储的信息最多为：FFFFFFFF+1 字节  即 4G，这也是为什么我们在一个 XP 的系统上面如果物理内存超过 4G 是没有意义的原因。
---
## 内存的读写过程
![](../../../assets/img/Develop/计算机基础/内存/11.png)
假设我们要向内存 IC 中写入 1byte 的数据的话，它的过程是这样的：
- 首先给 VCC 接通 +5V 的电源，给 GND 接通 0V 的电源，使用 A0~A9 来指定数据的存储场所，然后再把数据的值输入给 D0~D7 的数据信号，并把 WR(write) 的值置为 1，执行完这些操作后，即可以向内存 IC 写入数据。
- 读出数据时，只需要向 A0~A9 的地址信号指定数据的存储场所，然后再将 RD 的值置为 1 即可。
- RD 和 WR 又被称为控制信号。其中当 WR 和 RD 都为 0 时，无法进行写入和读取操作。
程序中的数据不仅只有数值，还有数据类型的概念，从内存上看，就是占用内存大小的意思。即使物理上强制以 1 个字节为单位来逐一读写数据的内存，在程序中，通过指定其数据类型，也能实现以特定字节数为单位进行读写。
例如,下列程序
```c
//定义变量
char a;
short b;
long c;
//变量赋值
a=123;
b=123;
c=123;
```
我们分别声明了三个变量 a,b,c，并给每个变量赋上了相同的 123，这 3 个变量表示内存的特定区域。通过变量，即使不指定物理地址，也可以直接完成读写操作，操作系统会自动为变量分配内存地址。
这 3 个变量分别表示 1 个字节长度的 char，2 个字节长度的 short，表示 4 个字节长度的 long，因此，虽然数据都表示的是 123，但是其存储时所占的内存大小是不一样的，如图。
![](../../../assets/img/Develop/计算机基础/内存/12.png)
这里的 123 都没有超过每个类型的最大长度，所以 short 和 long 类型所占用的其他内存空间分配的数值是 0。这里我们采用的是低字节序列的方式存储。
- 低字节序列 : 将数据低位存储在内存低位地址。
- 高字节序列 : 将数据的高位存储在内存低位的方式称为高字节序列。
---
## 内存的使用
### 指针
指针是 C 语言中的重要特征，也是一种变量，它表示的不是数据的值，而是内存的地址，通过指针可以读任意内存地址的数据进行读写。
在定义指针时，变量名前面要加一个 `*` 号，例如:
```c
char *d; // char类型的指针 d 定义
short *e; // short类型的指针 e 定义
long *f; // long类型的指针 f 定义
```
以 32 位计算机为例，32 位计算机的内存地址是 4 字节，在这种情况下，指针的长度也是 32 位。但变量 d、e、f 却代表了不同的字节长度。
因为这些数据表示的是从内存中一次读取的字节数，比如 d e f 的值都为 100，那么使用 char 类型时就能够从内存中读写 1byte 的数据，使用 short 类型就能够从内存中读写 2 字节的数据，使用 long 就能够读写 4 字节的数据，如下表
| 类型 | 32位 | 64位 |
| - | - | - |
| char | 1 | 1 |
| short int | 2 | 2 |
| int | 4 | 4 |
| unsigned int | 4 | 4 |
| float | 4 | 4 |
| double | 8 | 8 |
| long | 4 | 8 |
| long long | 8 | 8 |
| unsigned long | 4 | 8 |
![](../../../assets/img/Develop/计算机基础/内存/13.png)
### 数组
数组是指多个相同的数据类型在内存中连续排列的一种形式。作为数组元素的各个数据会通过下标编号来区分，这个编号也叫做索引，如此一来，就可以对指定索引的元素进行读写操作。
这里用 char、short、long 三种元素定义数组，数组的元素用 \[value] 扩起来，里面的值代表的是数组的长度，如下:
```c
char g[100];
short h[100];
long i[100];
```
数组定义的数据类型，也表示一次能够读写的内存大小，char、short、long 分别以 1、2、4 个字节为例进行内存的读写。
数组是内存的实现，数组和内存的物理结构是完全一致的，尤其是在读写 1 个字节的时候，当字节数超过 1 时，只能通过逐个字节来读取，内存的读写过程如下图