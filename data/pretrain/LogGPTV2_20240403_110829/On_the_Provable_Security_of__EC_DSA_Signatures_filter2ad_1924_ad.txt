schemes based on the Fiat-Shamir transform, are processed
by simulation, which particularly includes programming the
Π bijection. More tricky is answering queries to the bijective
random oracle: Would F0 simulate the bijective random or-
acle all by itself, then also the forgery output by F would
be valid with respect to this instantiation of Π; however,
the challenger of F0 would consider the provided signature
invalid, as its own Π implementation would likely disagree.
On the other hand, if F0 would relay all bijective random
oracle queries to its own challenger, simulating signatures
for F (i.e., programming the bijective random oracle) would
not be possible any more. The solution is to let F0 combine
the two approaches: The bijective random oracle queries
that are related to simulated signatures are answered using
a local mechanism, all other queries are relayed to the own
challenger.
(G2)
Procedure Init
00 (ΠO, ΠS) ← (∅,∅)
01 x ←$ Z∗
q ; X ← gx
02 Return X
Procedure BRO(α)
03 If (α,·) ∈ Π: Return Π(α)
04 β ←$ B \ Rng(ΠO)
05 If (·, β) ∈ ΠS: Abort
06 ΠO ← ΠO ∪ {(α, β)}
07 Return β
Procedure Sign(mi)
08 ri ←$ Zq; Ri ← gri
09 If Ri = 1: Return ⊥
10 αi ← ϕ(Ri)
11 If (αi,·) ∈ Π: Abort
12 βi ←$ B
13 If (·, βi) ∈ Π: Abort
14 ΠS ← ΠS ∪ {(αi, βi)}
15 ti ← ψ(βi)
16 If ti = 0: Return ⊥
17 hi ← H(mi)
18 ui ← hi + xti
19 If ui = 0: Return ⊥
20 si ← ui/ri
21 L ← L ∪ {(mi,(cid:104)si, ti(cid:105))}
22 Return (cid:104)si, ti(cid:105)
(G3)
Procedure BRO−1(β)
23 If (·, β) ∈ Π: Return Π−1(β)
24 α ←$ A \ Dom(ΠO)
25 If (α,·) ∈ ΠS: Abort
26 ΠO ← ΠO ∪ {(α, β)}
27 Return α
Procedure Sign(mi)
28 βi ←$ B
29 If (·, βi) ∈ Π: Abort
30 ti ← ψ(βi)
31 If ti = 0: Return ⊥
32 hi ← H(mi)
33 Ui ← ghi X ti
34 If Ui = 1: Return ⊥
35 si ←$ Zq
36 If si = 0: Return ⊥
37 Ri ← Ui
38 αi ← ϕ(Ri)
39 If (αi,·) ∈ Π: Abort
40 ΠS ← ΠS ∪ {(αi, βi)}
41 L ← L ∪ {(mi,(cid:104)si, ti(cid:105))}
42 Return (cid:104)si, ti(cid:105)
1/si
Figure 5: Games G2 and G3. We use writing con-
vention Π := ΠO ∪ ΠS. Procedure Fin is as in G1 (in
Figure 4).
Game G2 in Figure 5 is a preparation towards the re-
duction step just described. The major diﬀerence to G1 is
that bijection Π is now implemented using lazy sampling.
In particular, in G2 we represent Π as a subset of A × B.
More precisely, the input-output pairs (α, β) that later shall
result from relayed bijective random oracle queries are man-
aged in a list ΠO, the ones originating from programming
the bijective random oracle are managed in a list ΠS, and
by convention we always have Π := ΠO ∪ ΠS.
In most
cases joint list Π will indeed represent a bijection. However,
with small probability the ΠO and ΠS parts may become
contradictory; whenever this happens, the game aborts (in
lines 05, 11, 13, 25). The task of lines 05 and 25 is to guard
that β ∈ B \ Rng(Π) and α ∈ A \ Dom(Π), respectively, and
lines 11 and 13 ensure that the independently sampled pairs
(αi, βi) can be added to Π without causing a conﬂict. As
1657F by assumption does not output a forgery without having
posed the corresponding bijective random oracle query ﬁrst,
Procedure Fin is not aﬀected by the switch to lazy sampling
and remains unmodiﬁed.
We assess the probability that G2 aborts in lines 05 or 25
as follows: In each case, a uniformly distributed value of a
set of cardinality at least 2L − Q is sampled and checked for
containedness in a set of at most Qs elements (elements are
added to ΠS only in Procedure Sign, and at most one ele-
ment is added per query). That is, per execution of lines 05
and 25 the probability of a hit is at most Qs/(2L − Q).
As these lines are executed at most QΠ times in total, the
overall probability of abort is bounded by QΠQs/(2L − Q).
Similarly, the probability of a hit in line 13 is at most Q/2L
and thus there the overall probability of abort is bounded
by QsQ/2L. Consider next the abort condition in line 11.
The value αi is uniformly distributed in a set of cardinality
at least (q − 1)/2 (as Ri is uniform in G∗ and ϕ is a semi-
injective function), and the abort condition is met if this
value hits one of the at most Q elements contained in Π.
Thus, the overall abort probability for line 11 is bounded
by 2QsQ/(q − 1). From the fact that ϕ is semi-injective
we can further deduce that (q − 1)/2 ≤ 2L. As G1 and
G2 are identical if no abort happens, all in all we obtain
2 ⇒ 1] + 3QQs/((q − 1)/2− Q) (see full
Pr[GF
version for the calculation).
1 ⇒ 1] ≤ Pr[GF
2 ⇒ 1].
3 ⇒ 1] = Pr[GF
Observe that G2 uses the signing key in line 18 to im-
plement the signature oracle. We deﬁne Game G3 (also
in Figure 5) like G2 but with a signature oracle that gets
along with only public information. We argue that the forg-
ing probability of F in G2 and G3 is identical. To see this,
observe that lines 28–34 correspond with lines 12–19 (except
for line 14) and induce the same distribution on βi, ti, and
ui = log Ui, and that lines 08, 09, 20 and lines 35, 36, 37
correspond and induce the same distribution on ri = log Ri
and si (as in both cases ui (cid:54)= 0, and the distribution of
ui is independent of the distribution of ri and si). Thus
Pr[GF
The code of Figure 6 constructs a forger F0 from forger F.
Importantly, F0 does not pose signature queries. Assume
that F0 is executed within the KO experiment (cf. Fig-
ure 1). Note that F0 acquires the public key X from its
challenger in line 01 and hands it on to F in line 02. The
signature queries posed by F are processed by F0 using the
code from the simulation in G3 (which in particular does
not require the signing key). There is, though, a diﬀerence
between how bijective random oracle queries are processed
in G3 and by F0: While list ΠO in both cases keeps track of
input-output pairs that do not originate from programming
the bijective random oracle, the sampling steps from lines 04
and 24 of Figure 5 are replaced by queries to the external or-
acles BRO∗ and (BRO∗)−1 in Figure 6, i.e., to the bijective
random oracle that is controlled by F0’s challenger. Clearly,
these changes are pure rewriting and not noticeable by F, so
the probabilities of reaching the last line of Procedure Fin
of G3 (annotated as line 29 in Figure 4) and reaching line 27
of F0 in Figure 6 are identical. In the following we argue that
this allows concluding that Pr[KOF0 ⇒ 1] = Pr[GF
3 ⇒ 1].
Assume that F delivers a valid forgery (m∗,(cid:104)s∗, t∗(cid:105)), i.e.,
that line 27 of F0 is reached. Let h∗, R∗, α∗, β∗ be the
corresponding values from lines 19, 22, 23, 24. We have
R∗ = (gh∗
and thus r∗s∗ = h∗ + xt∗ for implicit
values r∗ = log R∗ and x = log X. By assumption either
)1/s∗
X t∗
Procedure Fin(m∗,(cid:104)s∗, t∗(cid:105))
15 For all (m,·) ∈ L, m (cid:54)= m∗:
If H(m) = H(m∗): Abort
16
17 If (m∗,·) ∈ L: Abort
18 If s∗ = 0 ∨ t∗ = 0: Abort
19 h∗ ← H(m∗)
20 U∗ ← gh∗
X t∗
21 If U∗ = 1: Abort
22 R∗ ← (U∗)1/s∗
23 α∗ ← ϕ(R∗)
24 β∗ ← Π(α∗)
25
26 If ψ(β∗) (cid:54)= t∗: Abort
27 If (α∗,·) ∈ ΠS:
Find x = log X
28
as described in text
29
(cid:104)s∗, t∗(cid:105) ←$ SignBRO∗
30
31 Invoke Fin∗(m∗,(cid:104)s∗, t∗(cid:105))
Procedure Init
00 (ΠO, ΠS) ← (∅,∅)
01 X ←$ Init∗
02 Return X
Procedure BRO(α)
03 If (α,·) ∈ Π:
Return Π(α)
04
05 β ← BRO∗(α)
06 If (·, β) ∈ ΠS: Abort
07 ΠO ← ΠO ∪ {(α, β)}
08 Return β
Procedure BRO−1(β)
09 If (·, β) ∈ Π:
Return Π−1(β)
10
11 α ← (BRO∗)−1(β)
12 If (α,·) ∈ ΠS: Abort
13 ΠO ← ΠO ∪ {(α, β)}
14 Return α
Figure 6: Construction of key-only forger F0 from F.
Procedures Init∗, BRO∗, (BRO∗)−1, and Fin∗ are the
oracles of the KO game in which F0 is executed. The
invocation of the GenDSA signing algorithm in line 30
is relative to bijective random oracle BRO∗. We
write ‘Abort’ as a shortcut for ‘Invoke Fin∗(⊥,⊥)’.
Procedure Sign is as in G3 (cf. Figure 5).
// was queried before
(x, m∗)
(cid:18) ηs∗ −ti
(cid:19)(cid:18) ri
(cid:19)
(cid:18) h∗
(cid:19)
(α∗, β∗) ∈ ΠS or (α∗, β∗) ∈ ΠO. Consider ﬁrst the case
that pair (α∗, β∗) was established in a signature simulation,
i.e., (α∗, β∗) ∈ ΠS. In this case F0 knows αi, βi, Ri, hi, ti, si
such that (α∗, β∗) = (αi, βi) and Ri = (ghi X ti )1/si , i.e.,
risi = hi + xti for implicit ri = log Ri and x = log X. We
further have ϕ(R∗) = α∗ = αi = ϕ(Ri) and thus r∗ = ηri
with η ∈ {±1} (by the semi-injectiveness of ϕ, cf. Deﬁni-
tion 2), and t∗ = ψ(β∗) = ψ(βi) = ti. Taken together the
above observations result in the linear equation system
x
=
hi
si −ti
(3)
which, as ti (cid:54)= 0, has a unique solution whenever ηs∗ (cid:54)= si.
Observe that, as ri (cid:54)= 0, case ηs∗ = si would imply h∗ =
hi and thus H(m∗) = H(mi), which is excluded by lines
15, 16, 17. Thus F0 can always recover signing key x, and
the signature (cid:104)s∗, t∗(cid:105) freshly generated in line 30 is valid
with respect to oracle BRO∗, i.e., the bijective random or-
acle managed by the challenger of F0. That is, if F forges
successfully then so does F0. Assume next that pair (α∗, β∗)
was established by a relayed bijective random oracle query,
i.e., (α∗, β∗) ∈ ΠO. In this case, F’s forgery (m∗,(cid:104)s∗, t∗(cid:105))
is consistent with oracle BRO∗. Again, if F forges success-
fully then so does F0. We thus obtain Pr[KOF0 ⇒ 1] =
3 ⇒ 1], with a forger F0 that has a running time of at
Pr[GF
most τ0 = τ +O(Qs). All in all we proved Pr[CMAF ⇒ 1] ≤
Pr[KOF0 ⇒ 1] + εcr + 3QQs/((q− 1)/2− Q), as required.
4.2 DLP-hardness implies KO-unforgeability
We next show that if the DLP is hard in G and if H is
ψ-relative division resistant, then GenDSA is key-only un-
forgeable in the bijective random oracle model for Π.
Theorem 2. Let ϕ be semi-injective. Let F (τ, Q, ε)-
break the key-only security of GenDSA. Then if Π is mod-
eled as a bijective random oracle, there exist an adversary
B that (τψdr, εψdr)-breaks the ψ-relative division resistance
1658of H, and inverters that (τ(cid:48), ε(cid:48))-break and (τ(cid:48)(cid:48), ε(cid:48)(cid:48))-break, re-
spectively, the DLP in G, such that
ε ≤(cid:112)2Q2εψdr + 2Qε(cid:48) + ε
(cid:48)(cid:48)
+ Q2/2L
and τψdr = τ(cid:48) = 2τ + O(Q), τ(cid:48)(cid:48) = τ + O(Q). Here, Q denotes
a bound on the bijective random oracle queries.
Proof. We write A := {0, 1}L and B := [0 .. 2L − 1] as
in the proof of Theorem 1.
In the bijective random ora-
cle model for Π, ﬁx a forger F against the key-only secu-
rity of GenDSA that runs in time at most τ and poses at
most Q bijective random oracle queries. Following Deﬁni-
tion 4 we assume that F does not output a forgery attempt
(m∗,(cid:104)s∗, t∗(cid:105)) without having posed the corresponding bi-
jective random oracle query ﬁrst. The concrete version of
the KO game from Figure 1 with the GenDSA algorithms
plugged in is given as Game G0 in Figure 4 (for the cur-
rent proof, Procedure Sign and line 20 are redundant and
can be ignored). Our goal is to upper-bound forging proba-
bility ε = Pr[KOF ⇒ 1] = Pr[GF
0 ⇒ 1].
Game G1 (in Figure 7) is the modiﬁcation of G0 in which
bijective random oracle Π is implemented via lazy sam-
pling. Depending on whether they originate from a BRO
or a BRO−1 query, new input-output pairs (α, β) are stored
either in list Π(cid:1) or in list Π(cid:0) (lines 21 and 30). Taken
together, Π(cid:1) and Π(cid:0) make up list Π, i.e., we assume writ-