# 【技术分享】如何使用Nmap远程开启AppleTV

##### 译文声明
本文为翻译文章，原文来源：安全客
原文地址：[链接]
译文仅供参考，具体内容及含义以原文为准。
**作者：** [secist](http://bobao.360.cn/member/contribute?uid=1427345510)
**稿费：** 150 RMB（欢迎投稿！）
**投稿方式：** 发送邮件至 linwei#360.cn 或访问 [网页版](http://bobao.360.cn/contribute/index) 在线投稿。

## 前言
有一天，我在工作时，妻子走过来问我为什么电视是开着的。然而，我并没有特意去开过它。当时我正在本地网络中运行 Nmap 进行一系列扫描任务。你可能听说过，使用 Nmap 扫描时要格外小心，因为有时它们会无意中触发打印机打印大量页面。于是我想，我的 AppleTV 是否也遇到了类似的问题？这个想法激发了我对这个问题进行深入研究的兴趣。我相信，通过独立思考和实践解决问题，比单纯阅读书籍更能学到知识。

## 信息收集
如果你有一台 AppleTV，可以通过以下步骤找到它的 IP 地址：
- 设置 > 通用 > 关于本机 > IP 地址
例如，我的 IP 地址是 192.168.10.110。此外，还可以查看到其他信息如型号 A1625 和系统版本 tvOS 9.2.2。

接着，在同一局域网内打开 Nmap 并执行版本扫描命令：
```bash
nmap -sV 192.168.10.110
```
经过几分钟后，可以看到有 6 个端口处于开放状态。为了确保准确性，我又重复了一次同样的扫描，结果一致。现在我很好奇，是什么原因导致了我的 AppleTV 自动开启？是否存在某些服务端口可以被利用来控制 AppleTV？我能否关闭或播放音乐？甚至操控邻居的 AppleTV？

## 网络流量分析
为了更好地理解 Nmap 扫描过程中发生了什么，我决定同时打开两个终端窗口，一个运行 tcpdump 监听网络流量，另一个运行 Nmap。这有助于我们跟踪 Nmap 的行为，并避免不必要的错误操作。

### 使用 tcpdump 过滤数据
如果直接运行 `tcpdump` 而不加任何参数，它将捕获所有网络数据包。为了简化分析过程，我们可以添加过滤规则，比如排除 ARP 数据包 (`not arp`) 并禁用域名解析 (`-n`)。这样能够更专注于感兴趣的流量。
```bash
tcpdump -n not arp -w appletv.pcap
```

在初步分析了近三千个数据包后，我发现其中确实存在一些可能导致 AppleTV 开启的数据包。但是，逐一排查显然效率低下。因此，我决定只关注之前通过 Nmap 检测到的开放端口（3689, 5000, 7000, 7100, 49152, 62078）重新抓包。

### 定位关键请求
这次抓取的数据包数量大大减少到了一百多条。使用 Wireshark 查看这些文件时，从最新的记录开始查找，我发现了一个看起来像是 RTSP 协议的连接对话。虽然不是常见的 HTTP 请求，但其语法相似，意味着我可以尝试手动发送相同格式的数据包给目标 IP 地址和端口号 5000。
```bash
echo -en "RTSP/1.0 OPTIONS rtsp://192.168.10.110:5000/ RTSP/1.0\nCSeq: 1\nUser-Agent: Nmap Security Scanner\n\n" | nc 192.168.10.110 5000
```
尽管得到了响应，但 AppleTV 仍未启动。进一步检查发现了一些奇怪的 HTTP 请求，例如对特定路径 `/nice%20ports%2C/Tri%6Eity.txt%2ebak` 的 GET 请求。再次尝试发送该请求也没有成功唤醒设备。

最终，在继续向上追溯时，发现了两条针对不同端口的 GET 请求：
```bash
echo -en "GET / HTTP/1.0\n\n" | nc 192.168.10.110 3689
```
令人惊讶的是，这条简单的命令竟然成功开启了我的 AppleTV！这一现象揭示了 AppleTV 存在一个未经认证即可远程激活的安全漏洞。关于此问题的更多细节，可参考非官方 AirPlay 协议文档 [此处](https://nto.github.io/AirPlay.html)。

希望这篇文章对你有所帮助！