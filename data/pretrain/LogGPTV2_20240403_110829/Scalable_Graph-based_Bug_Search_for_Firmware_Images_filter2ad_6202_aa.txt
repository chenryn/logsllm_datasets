title:Scalable Graph-based Bug Search for Firmware Images
author:Qian Feng and
Rundong Zhou and
Chengcheng Xu and
Yao Cheng and
Brian Testa and
Heng Yin
Scalable Graph-based Bug Search for Firmware Images
Qian Feng†, Rundong Zhou†, Chengcheng Xu†, Yao Cheng†, Brian Testa†♦, and Heng Yin†∗
†Department of EECS, Syracuse University, USA
†{qifeng,rzhou02,cxu100,ycheng,heyin}@syr.edu ♦PI:EMAIL ∗PI:EMAIL
♦Air Force Research Lab
∗University of California, Riverside
ABSTRACT
Because of rampant security breaches in IoT devices, searching
vulnerabilities in massive IoT ecosystems is more crucial than ever.
Recent studies have demonstrated that control-ﬂow graph (CFG)
based bug search techniques can be effective and accurate in IoT
devices across different architectures. However, these CFG-based
bug search approaches are far from being scalable to handle an
enormous amount of IoT devices in the wild, due to their expen-
sive graph matching overhead. Inspired by rich experience in im-
age and video search, we propose a new bug search scheme which
addresses the scalability challenge in existing cross-platform bug
search techniques and further improves search accuracy. Unlike
existing techniques that directly conduct searches based upon raw
features (CFGs) from the binary code, we convert the CFGs into
high-level numeric feature vectors. Compared with the CFG fea-
ture, high-level numeric feature vectors are more robust to code
variation across different architectures, and can easily achieve real-
time search by using state-of-the-art hashing techniques.
We have implemented a bug search engine, Genius, and com-
pared it with state-of-art bug search approaches. Experimental re-
sults show that Genius outperforms baseline approaches for vari-
ous query loads in terms of speed and accuracy. We also evaluated
Genius on a real-world dataset of 33,045 devices which was col-
lected from public sources and our system. The experiment showed
that Genius can ﬁnish a search within 1 second on average when
performed over 8,126 ﬁrmware images of 420,558,702 functions.
By only looking at the top 50 candidates in the search result, we
found 38 potentially vulnerable ﬁrmware images across 5 vendors,
and conﬁrmed 23 of them by our manual analysis. We also found
that it took only 0.1 seconds on average to ﬁnish searching for all
154 vulnerabilities in two latest commercial ﬁrmware images from
D-LINK. 103 of them are potentially vulnerable in these images,
and 16 of them were conﬁrmed.
Keywords
Firmware Security; Machine Learning; Graph Encoding
ACM acknowledges that this contribution was authored or co-authored by an em-
ployee, or contractor of the national government. As such, the Government retains
a nonexclusive, royalty-free right to publish or reproduce this article, or to allow oth-
ers to do so, for Government purposes only. Permission to make digital or hard copies
for personal or classroom use is granted. Copies must bear this notice and the full ci-
tation on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. To copy otherwise, distribute, republish, or post, requires prior
speciﬁc permission and/or a fee. Request permissions from permissions@acm.org.
CCS’16, October 24-28, 2016, Vienna, Austria
c(cid:13) 2016 ACM. ISBN 978-1-4503-4139-4/16/10. . . $15.00
DOI: http://dx.doi.org/10.1145/2976749.2978370
1.
INTRODUCTION
Finding vulnerabilities in devices from the Internet of Things
(IoT) ecosystem is more crucial than ever. Unlike in PCs or mobile
phones, a security breach in one IoT device could cause unprece-
dented damage to our daily life, involving massive breakdowns
of public systems [4] or quality of life issues. Even worse, we
cannot rely on traditional protection mechanisms like commercial
AntiVirus software on PCs and mobile devices to prevent attacks,
since these traditional defenses are not feasible on IoT devices due
to their relatively low CPU and memory proﬁles [3]. Gartner, Inc.
forecasts that 6.4 billion connected things will be in use worldwide
in 2016, up 30 percent from 2015, and will reach 20.8 billion by
2020. The vast diffusion of devices will increase the potential for
the introduction of vulnerabilities to the IoT ecosystem. As a result,
the need for third-party evaluators (e.g. consumer product evalua-
tors, penetration testers) to quickly and accurately identify vulner-
abilities in IoT ecosystem devices on behalf of customers and the
need to support periodic security evaluations on existing devices is
increasing dramatically [1].
However, discovering vulnerabilities in an IoT ecosystem is like
ﬁnding a needle in a haystack, even when we are dealing with
known vulnerabilities. For many IoT products, security is an af-
terthought. Between copy-paste coding practices and outsourcing
of functionality to untrusted third-party libraries, the development
process of IoT devices is a fertile environment for bug generation
and persistence. As several integration vendors may rely upon the
same subcontractors, tools, or SDKs provided by third-party ven-
dors [19], bugs generated during the development process can be
spread across hundreds or even thousands of IoT devices with sim-
ilar ﬁrmware. Without detailed knowledge of the internal relation-
ships between these vendors, it is impossible to track the same vul-
nerability across the IoT ecosystem [19, 27]. It is even worse when
these devices are built on different architectures [45].
To address this critical problem, security researchers have been
actively developing techniques to automatically analyze and detect
vulnerabilities in IoT products [17,52,61]. Advancing our ability to
perform bug searches in a general, lightweight manner is becoming
increasingly important. Such a bug search technique would allow
security professionals to reduce the time and resources required to
locate a problem. Having done so, security professionals could
scan all IoT devices in the ecosystem for a new vulnerability, and
quickly generate a security evaluation. They would also be able
to scan a new device for all known vulnerabilities, thus allowing
us to learn from past mistakes before the possibly bug-infested IoT
devices are widely deployed.
Bug search at scale. Researchers have already made primitive at-
tempts at bug searching in the ﬁrmware images of IoT devices [19,
48023, 45]. One common approach is to scan the ﬁrmware images us-
ing superﬁcial patterns such as constant numbers or speciﬁc strings
[19]. When a vulnerability is tied to a unique constant or string,
this approach can be very effective and can easily scale to a large
number of ﬁrmware images. However, this approach lacks the gen-
erality to deal with more complex vulnerabilities that lack these
distinct constant or string patterns.
To address cross-platform bug search in general, two recent ef-
forts [23, 45] proposed extraction of various robust features from
binary code and then performed searches against the extracted con-
trol ﬂow graphs (CFGs). However, these approaches are far from
being scalable. The approach by Pewny et al. [45] can take up to
one CPU month to prepare and conduct a search in a stock Android
image with 1.4 million basic blocks [23]. Eschweiler et al. [23]
attempted to address this issue by leveraging a more lightweight
feature extraction and using a pre-ﬁltering technique. However, the
efﬁcacy of pre-ﬁltering was only evaluated on a small number of
ﬁrmware images, for a small set of vulnerabilities. According to
our large-scale evaluation in Section 5.3, pre-ﬁltering seems unre-
liable and can cause signiﬁcant degradation in search accuracy.
Bug search as a search problem. Fundamentally, the bottleneck
for the CFG-based bug search techniques is not about the graph
matching algorithm, but rather the search scheme. These tech-
niques conduct pairwise graph matching for search, the complexity
of which makes them unusable in large-scale datasets.
A similar problem has been extensively studied in the computer
vision community where they are interested in efﬁciently search-
ing for similar images from large volume of image [30, 32, 60].
Instead of conducting pair-wise matching on raw images directly,
they learn higher-level numeric feature representations from raw
images. In this paper, we leverage the successful techniques from
the computer vision community and propose a novel search method
called Genius1 for bug search in IoT devices. Although images
appear to be quite different from binary functions, we found in
this paper that scalable image search methodologies can be applied
for graph-based bug search. As opposed to directly matching two
control-ﬂow graphs, the proposed method learns higher-level nu-
meric feature representations from control-ﬂow graphs, and then
conducts search based on the learned higher-level features.
Compared with existing bug search methods, Genius has the
following two beneﬁts: First, the learned features tend to be more
invariant to cross-architecture changes than the raw CFG features.
This is because Genius learns a feature representation using rep-
resentative CFGs, which tends to be more invariant than the pair-
wise match. This invariance property has been veriﬁed in a number
of image retrieval system [53,59] such as the Google image search.
The experimental results in Section 5 substantiate this hypothesis in
the bug search problem. Second, Genius signiﬁcantly improves
the state-of-the-art bug search efﬁciency. The graph is a complex
structure, and thus directly indexing or hashing graphs at scale is
still a challenging problem [36]. However, the proposed method
circumvents the difﬁculty by transforming a graph as a higher-level
feature representation, which can be indexed by Locality Sensitive
Hashing [54]. This transformation enables a bug search method
that could be orders of magnitude faster than existing methods.
Our interdisciplinary study focuses on leveraging existing im-
age retrieval techniques to address the scalability issue in the ex-
isting graph-based bug search methods. Furthermore, our empir-
ical studies provide compelling insights how to ﬁnd appropriate
settings for the bug search problem. Our empirical observations
1Genius stands for Graph Encoding for Bug Search.
may beneﬁt not only the bug search methods but also other related
approaches [24, 62, 63].
We have implemented a proof-of-concept Genius, and com-
pared it with existing state-of-the-art bug search approaches; our
experiments demonstrate that Genius outperforms existing meth-
ods over various query loads in terms of accuracy and efﬁciency
and scalability. We further demonstrate the efﬁcacy of IoT bug
search on 8,126 ﬁrmware images of 420,558,702 functions. The
performance testing on 10,000 queries showed that Genius can
ﬁnish a query in less than 1 second on average.
Contributions. In summary, our contributions are as follows:
• New insights. We leverage techniques widely used in the
computer vision community and develop a control ﬂow graph
based method to address the scalability issue in existing bug
search techniques. We systematically study different schemes
in the existing image search techniques, and discover an ap-
propriate scheme for the bug search in IoT ecosystem.
• Signiﬁcant scalability improvement. We demonstrate the
efﬁcacy of Genius on ﬁrmware images from 8,126 devices
across three architectures and 26 vendors. The performance
testing on 10,000 queries shows that Genius can process
a query in less than 1 seconds on average. We also demon-
strate that Genius can achieve comparable or even better
accuracy and efﬁciency than the baseline techniques.
• New Discoveries. We demonstrate two use scenarios for
Genius. The results show that Genius takes less than 3
seconds on average to ﬁnish a vulnerability search across
8,126 devices. As a result of the efﬁcient method, by only
looking at top 50 candidates in the search result, we found
38 potentially vulnerable ﬁrmware images across 5 vendors,
and conﬁrmed 23 of them via manual analysis. We also
found that Genius takes only 0.1 second on average for
all 154 vulnerabilities in two latest commercial ﬁrmware im-
ages from D-LINK. 103 potential vulnerabilities were found
in these images, and 16 of them were conﬁrmed.
2. APPROACH OVERVIEW
Inspired by image retrieval techniques, the proposed method in-
cludes the following main steps, as shown in Figure 1: 1) raw fea-
ture extraction, 2) codebook generation, 3) feature encoding, and
4) online search. The ﬁrst step aims at extracting the attributed
control ﬂow graph, which is referred to as the raw feature, from a
binary function (Section 3). Codebook generation utilizes unsuper-
vised learning methods to learn higher-level categorizations from
raw attributed control ﬂow graphs (Section 4.1). Feature encoding
encodes the attributed control ﬂow graph by learned categorizations
into higher-level feature vector residing in the high-dimensional
space (Section 4.2). Finally, given a function, online search aims
at efﬁciently ﬁnding its most similar functions by Locality Sensi-
tive Hashing (LSH) [9]. Since each function is transformed into
a higher-level numeric feature in the feature encoding step, we can
directly apply LSH to conduct efﬁcient searches in terms of the ap-
proximated cosine and Euclidean distance between the higher-level
features (Section 4.3). The details of each step will be discussed in
the following sections.
Generally, there are two stages in the proposed method: ofﬂine
indexing and online search. Ofﬂine indexing, which includes raw
feature extraction, codebook generation and feature encoding, is
applied to existing functions before we can perform searches. Sim-
ilar to text and image search methods, this step is a one-time effort
and can be trivially paralleled across multiple CPU cores. The on-
line search phase, which includes feature encoding and search, is
481Figure 1: The approach overview
applied against a few unseen functions. Due to the limited number
of online operations, online search is typically sufﬁciently fast for
large-scale search engines. We elaborate on the two stages and the
main steps in the following two use scenarios.
Deﬁnition 1. (Attributed Control Flow Graph) The attributed con-
trol ﬂow graph, or ACFG in short, is a directed graph G = (cid:104)V, E, φ(cid:105),
where V is a set of basic blocks; E ⊆ V ×V is a set of edges repre-
senting the connections between these basic blocks, and φ : V →
Σ is the labeling function which maps a basic block in V to a set of
attributes in Σ.
The attribute set Σ in Deﬁnition 1 can be tailored depending
upon the level of detail required to accurately characterize a ba-
sic block. For efﬁciency, instead of using expensive semantic fea-
tures like I/O pairs [45], we focus on two types of features in this
paper: statistical and structural. The statistical features describe lo-
cal statistics within a basic block, whereas the structural features
capture the position characteristics of a basic block within a CFG.
Inspired by [23], in Σ we extract six types of statistical features
and two types of structural features, listed in Table 1.
Inspired by the work on complex network analysis, we propose
two types of structural features: no. of offspring and betweenness
centrality. The no. of offspring is the number of children nodes in
the control ﬂow graph. This information helps locate the layer of
a node in the graph. The betweenness centrality measures a node’s
centrality in a graph [42]. Nodes in the same layer in the CFG
could have different betweenness centrality. The results in Sec-
tion 5.4 demonstrate the efﬁcacy of the proposed structural features.
In summary, the proposed features consider not only the statistical
similarity but also the structural similarity between two ACFGs.
To generate the attributed graph for a binary function, we ﬁrst
extract its control ﬂow graph, along with attributes in Σ for each
basic block in the graph, and store them as the features associated
with the basic block. We utilize IDA Pro [28], a commercial disas-
sembler tool, for attributed graph construction.
Table 1: Basic-block level features used in Genius.
Type
Statistical Features
Feature Name
String Constants
Numeric Constants
No. of Transfer Instructions
No. of Calls
No. of Instructions
No. of Arithmetic Instructions