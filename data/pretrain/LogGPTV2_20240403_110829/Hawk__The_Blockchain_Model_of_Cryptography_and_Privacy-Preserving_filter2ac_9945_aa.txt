title:Hawk: The Blockchain Model of Cryptography and Privacy-Preserving
Smart Contracts
author:Ahmed E. Kosba and
Andrew Miller and
Elaine Shi and
Zikai Wen and
Charalampos Papamanthou
2016 IEEE Symposium on Security and Privacy
2016 IEEE Symposium on Security and Privacy
Hawk: The Blockchain Model of Cryptography and
Privacy-Preserving Smart Contracts
Ahmed Kosba∗, Andrew Miller∗, Elaine Shi†, Zikai Wen†, Charalampos Papamanthou∗
∗University of Maryland and †Cornell University
{akosba, amiller}@cs.umd.edu, {rs2358, zw385}@cornell.edu, PI:EMAIL
Abstract—Emerging smart contract systems over decentralized
cryptocurrencies allow mutually distrustful parties to transact
safely without trusted third parties. In the event of contrac-
tual breaches or aborts, the decentralized blockchain ensures
that honest parties obtain commensurate compensation. Existing
systems, however, lack transactional privacy. All transactions,
including ﬂow of money between pseudonyms and amount
transacted, are exposed on the blockchain.
We present Hawk, a decentralized smart contract system that
does not store ﬁnancial transactions in the clear on the block-
chain, thus retaining transactional privacy from the public’s view.
A Hawk programmer can write a private smart contract in an
intuitive manner without having to implement cryptography, and
our compiler automatically generates an efﬁcient cryptographic
protocol where contractual parties interact with the blockchain,
using cryptographic primitives such as zero-knowledge proofs.
To formally deﬁne and reason about the security of our
protocols, we are the ﬁrst to formalize the blockchain model
of cryptography. The formal modeling is of independent interest.
We advocate the community to adopt such a formal model when
designing applications atop decentralized blockchains.
I. INTRODUCTION
Decentralized cryptocurrencies such as Bitcoin [48] and alt-
coins [20] have rapidly gained popularity, and are often quoted
as a glimpse into our future [5]. These emerging cryptocur-
rency systems build atop a novel blockchain technology where
miners run distributed consensus whose security is ensured if
no adversary wields a large fraction of the computational (or
other forms of) resource. The terms “blockchain” and “miners”
are therefore often used interchangeably.
Blockchains like Bitcoin reach consensus not only on a
stream of data but also on computations involving this data. In
Bitcoin, speciﬁcally, the data include money transfer transac-
tion proposed by users, and the computation involves transac-
tion validation and updating a data structure called the unspent
transaction output set which, imprecisely speaking, keeps track
of users’ account balances. Newly emerging cryptocurrency
systems such as Ethereum [57] embrace the idea of running
arbitrary user-deﬁned programs on the blockchain, thus creat-
ing an expressive decentralized smart contract system.
In this paper, we consider smart contract protocols where
parties interact with such a blockchain. Assuming that the
decentralized concensus protocol is secure, the blockchain can
be thought of as a conceptual party (in reality decentralized)
that can be trusted for correctness and availability but not for
privacy. Such a blockchain provides a powerful abstraction for
the design of distributed protocols.
The blockchain’s expressive power is further enhanced by
the fact that blockchains naturally embody a discrete notion
of time, i.e., a clock that increments whenever a new block
is mined. The existence of such a trusted clock is crucial
for attaining ﬁnancial
fairness in protocols. In particular,
malicious contractual parties may prematurely abort from a
protocol to avoid ﬁnancial payment. However, with a trusted
clock, timeouts can be employed to make such aborts evident,
such that
the blockchain can ﬁnancially penalize aborting
parties by redistributing their collateral deposits to honest,
non-aborting parties. This makes the blockchain model of
cryptography more powerful than the traditional model without
a blockchain where fairness is long known to be impossible
in general when the majority of parties can be corrupt [8],
[17], [24].
In summary, blockchains allow parties mutually
unbeknownst to transact securely without a centrally trusted
intermediary, and avoiding high legal and transactional cost.
Despite the expressiveness and power of the blockchain
and smart contracts, the present form of these technologies
lacks transactional privacy. The entire sequence of actions
taken in a smart contract are propagated across the network
and/or recorded on the blockchain, and therefore are publicly
visible. Even though parties can create new pseudonymous
public keys to increase their anonymity, the values of all trans-
actions and balances for each (pseudonymous) public key are
publicly visible. Further, recent works have also demonstrated
deanonymization attacks by analyzing the transactional graph
structures of cryptocurrencies [42], [52].
We stress that lack of privacy is a major hindrance towards
the broad adoption of decentralized smart contracts, since ﬁ-
nancial transactions (e.g., insurance contracts or stock trading)
are considered by many individuals and organizations as being
highly secret. Although there has been progress in designing
privacy-preserving cryptocurrencies such as Zerocash [11] and
several others [26], [43], [54], these systems forgo programma-
bility, and it is unclear a priori how to enable programmability
without exposing transactions and data in cleartext to miners.
A. Hawk Overview
We propose Hawk, a framework for building privacy-
preserving smart contracts. With Hawk, a non-specialist pro-
grammer can easily write a Hawk program without having to
2375-1207/16 $31.00 © 2016 IEEE
© 2016, Ahmed Kosba. Under license to IEEE.
DOI 10.1109/SP.2016.55
DOI 10.1109/SP.2016.55
839
839
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:41 UTC from IEEE Xplore.  Restrictions apply. 
implement any cryptography. Our Hawk compiler is in charge
of compiling the program to a cryptographic protocol between
the blockchain and the users. As shown in Figure 1, a Hawk
program contains two parts:
1) A private portion denoted φpriv which takes in parties’ input
data (e.g., choices in a “rock, paper, scissors” game) as well
as currency units (e.g., bids in an auction). φpriv performs
computation to determine the payout distribution amongst
the parties. For example, in an auction, winner’s bid goes to
the seller, and others’ bids are refunded. The private Hawk
program φpriv is meant to protect the participants’ data and
the exchange of money.
Manager
Blockchain
Protocol
Users
Coins
Data
Hawk Contract
Compile
Public Фpub    Private Фpriv
Programmer
Fig. 1. Hawk overview.
2) A public portion denoted φpub that does not touch private
data or money.
Our compiler will compile the Hawk program into the
following pieces which jointly deﬁne a cryptographic protocol
between users, the manager, and the blockchain:
• the blockchain’s program which will be executed by all
consensus nodes;
• a program to be executed by the users; and
• a program to be executed by a special facilitating party
called the manager which will be explained shortly.
Security guarantees. Hawk’s security guarantees encompass
two aspects:
• On-chain privacy. On-chain privacy stipulates that transac-
tional privacy be provided against the public (i.e., against
any party not involved in the contract) – unless the con-
tractual parties themselves voluntarily disclose information.
Although in Hawk protocols, users exchange data with
the blockchain, and rely on it to ensure fairness against
aborts, the ﬂow of money and amount transacted in the
private Hawk program φpriv is cryptographically hidden
from the public’s view. Informally,
this is achieved by
sending “encrypted” information to the blockchain, and
relying on zero-knowledge proofs to enforce the correctness
of contract execution and money conservation.
• Contractual security. While on-chain privacy protects con-
tractual parties’ privacy against
the public (i.e., parties
not involved in the ﬁnancial contract), contractual secu-
rity protects parties in the same contractual agreement
from each other. Hawk assumes that contractual parties
act selﬁshly to maximize their own ﬁnancial interest. In
particular, they can arbitrarily deviate from the prescribed
protocol or even abort prematurely. Therefore, contractual
security is a multi-faceted notion that encompasses not only
cryptographic notions of conﬁdentiality and authenticity,
but also ﬁnancial fairness in the presence of cheating and
aborting behavior. The best way to understand contractual
security is through a concrete example, and we refer the
reader to Section I-B for a more detailed explanation.
Minimally trusted manager. The execution of Hawk con-
tracts are facilitated by a special party called the manager.
The manager can see the users’ inputs and is trusted not to
disclose users’ private data. However, the manager is NOT to
840840
be equated with a trusted third party — even when the manager
can deviate arbitrarily from the protocol or collude with the
parties, the manager cannot affect the correct execution of
the contract. In the event that a manager aborts the protocol,
it can be ﬁnancially penalized, and users obtain compensation
accordingly.
The manager also need not be trusted to maintain the
security or privacy of the underlying currency (e.g., it cannot
double-spend,
inﬂate the currency, or deanonymize users).
Furthermore, if multiple contract instances run concurrently,
each contract may specify a different manager and the effects
of a corrupt manager are conﬁned to that instance. Finally,
the manager role may be instantiated with trusted comput-
ing hardware like Intel SGX, or replaced with a multiparty
computation among the users themselves, as we describe in
Section IV-C and Appendix A.
Terminology. In Ethereum [57], the blockchain’s portion of
the protocol is called an Ethereum contract. However, this
paper refers to the entire protocol deﬁned by the Hawk
program as a contract; and the blockchain’s program is a
constituent of the bigger protocol. In the event that a manager
aborts the protocol, it can be ﬁnancially penalized, and users
obtain compensation accordingly.
B. Example: Sealed Auction
Example program. Figure 2 shows a Hawk program for
implementing a sealed, second-price auction where the highest
bidder wins, but pays the second highest price. Second-
price auctions are known to incentivize truthful bidding under
certain assumptions, [55] and it
that bidders
submit bids without knowing the bid of the other people. Our
example auction program contains a private portion φpriv that
determines the winning bidder and the price to be paid; and
a public portion φpub that relies on public deposits to protect
bidders from an aborting manager.
is important
For the time being, we assume that the set of bidders are
known a priori.
Contractual security requirements. Hawk will compile this
auction program to a cryptographic protocol. As mentioned
earlier, as long as the bidders and the manager do not volun-
tarily disclose information, transaction privacy is maintained
against the public. Hawk also guarantees the following con-
tractual security requirements for parties in the contract:
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:41 UTC from IEEE Xplore.  Restrictions apply. 
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
HawkDeclareParties(Seller,/* N parties */);
HawkDeclareTimeouts(/* hardcoded timeouts */);
// Private portion φpriv
private contract auction(Inp &in, Outp &out) {
int winner = -1;
int bestprice = -1;
int secondprice = -1;
for (int i = 0; i  bestprice) {
secondprice = bestprice;
bestprice = in.party[i].$val;
winner = i;
} else if (in.party[i].$val > secondprice) {
secondprice = in.party[i].$val;
}
}
// Winner pays secondprice to seller
// Everyone else is refunded
out.Seller.$val = secondprice;
out.party[winner].$val = bestprice-secondprice;
out.winner = winner;
for (int i = 0; i < N; i++) {
if (i != winner)
out.party[i].$val = in.party[i].$val;
}
}
// Public portion φpub
public contract deposit {
// Manager deposited $N earlier
def check():
// invoked on contract completion
send $N to Manager
def managerTimeOut():
for (i in range($N)):
send $1 to party[i]
}
// refund manager
Fig. 2. Hawk program for a second-price sealed auction. Code described
in this paper is an approximation of our real implementation. In the public
contract, the syntax “send $N to P ” corresponds to the following semantics
:= ledger[P ] + $N – see
in our cryptographic formalism:
Section II-B.
ledger[P ]
• Input independent privacy. Each user does not see others’
bids before committing to their own (even when they collude
with a potentially malicious manager). This way, users bids
are independent of others’ bids.
• Posterior privacy. As long as the manager does not disclose
information, users’ bids are kept private from each other
(and from the public) even after the auction.
• Financial fairness. Parties may attempt to prematurely abort
from the protocol to avoid payment or affect the redistribu-
tion of wealth. If a party aborts or the auction manager