    文件或驱动程序更新 RPM 软件包。
4.  可选：选择驱动程序更新 ISO 文件。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    如果选择的设备或者分区包含驱动程序更新 RPM 软件包而不是 ISO
    镜像文件（例如：包含驱动程序更新 CD 或者 DVD
    的光驱），则不需要这一步。
    :::
5.  选择所需驱动程序。
    ::: orderedlist
    1.  使用键盘上的数字键切换驱动器选择。
    2.  按 [**c**]{.strong}
        键安装所选驱动程序。载入所选驱动程序并开始安装过程。
    :::
:::
:::
::: section
::: titlepage
# []{#updating-drivers-during-installation_installing-rhel-as-an-experienced-user.html#performing-a-manual-driver-update_updating-drivers-during-installation}执行手动驱动程序更新 {.title}
:::
这个步骤描述了如何在安装过程中手动驱动程序更新。
::: itemizedlist
**先决条件**
-   将驱动程序更新 ISO 镜像文件放在 USB
    闪存驱动器或者网页服务器中，并将其连接到您的计算机。
:::
::: orderedlist
**流程**
1.  在引导菜单窗口中按键盘中的 [**Tab**]{.strong} 键显示引导命令行。
2.  在命令行中附加 `inst.dd=location`{.literal} 引导选项，其中 location
    是驱动程序更新的路径。镜像文件通常位于 web 服务器中，如
    [http://server.example.com/dd.iso](http://server.example.com/dd.iso){.link}
    或 USB 闪存驱动器中，如
    `/dev/sdb1`{.literal}。您还可以指定包含驱动程序更新的 RPM
    软件包，例如
    [http://server.example.com/dd.rpm](http://server.example.com/dd.rpm){.link}。
3.  按 [**Enter**]{.strong}
    执行引导过程。指定位置中的可用驱动程序会自动载入并启动安装过程。
:::
::: itemizedlist
**其他资源**
-   [`inst.dd`{.literal}
    引导选项](https://github.com/rhinstaller/anaconda/blob/rhel-8.0/docs/boot-options.rst/#instdd){.link}
:::
:::
::: section
::: titlepage
# []{#updating-drivers-during-installation_installing-rhel-as-an-experienced-user.html#disabling-a-driver_updating-drivers-during-installation}禁用驱动程序 {.title}
:::
这个步骤描述了如何禁用发生故障的驱动程序。
::: itemizedlist
**先决条件**
-   您已引导安装程序引导菜单。
:::
::: orderedlist
**流程**
1.  在引导菜单中，按键盘中的 [**Tab**]{.strong} 键显示引导命令行。
2.  将 `modprobe.blacklist=driver_name`{.literal} 引导选项附加到命令行。
3.  使用您要禁用的驱动程序或驱动程序名称替换
    [*driver_name*]{.emphasis}，例如：
    ``` screen
    modprobe.blacklist=ahci
    ```
    使用 `modprobe.blacklist=`{.literal}
    引导选项禁用的驱动程序在安装的系统中保持禁用状态，并出现在
    `/etc/modprobe.d/anaconda-blacklist.conf`{.literal} 文件中。
4.  按 [**Enter**]{.strong} 执行引导过程。
:::
:::
:::
[]{#booting-a-beta-system-with-uefi-secure-boot_installing-rhel-as-an-experienced-user.html}
::: chapter
::: titlepage
# []{#booting-a-beta-system-with-uefi-secure-boot_installing-rhel-as-an-experienced-user.html#booting-a-beta-system-with-uefi-secure-boot_installing-rhel-as-an-experienced-user}第 14 章 引导带有 UEFI 安全引导的 beta 系统 {.title}
:::
要增强操作系统的安全性，在启用了 UEFI 安全引导的系统上引导 Red Hat
Enterprise Linux Beta 版本时，对签名验证使用 UEFI 安全引导特性。
::: section
::: titlepage
# []{#booting-a-beta-system-with-uefi-secure-boot_installing-rhel-as-an-experienced-user.html#uefi-secure-boot_booting-a-beta-system-with-uefi-secure-boot}UEFI 安全引导和 RHEL Beta 版本 {.title}
:::
UEFI 安全引导要求操作系统内核使用可识别的私钥进行签名。UEFI
安全引导然后使用对应的公钥验证签名。
对于Red Hat Enterprise Linux Beta 版，内核使用特定于红帽 Beta
的私钥进行签名。UEFI
安全引导尝试使用对应的公钥验证签名，但由于硬件无法识别 Beta 私钥，因此
Red Hat Enterprise Linux Beta 版本系统无法引导。因此，要将 UEFI
安全引导与 Beta 版本一起使用 ，请使用机器所有者密钥(MOK)设备将红帽 Beta
公钥添加到您的系统中。
:::
::: section
::: titlepage
# []{#booting-a-beta-system-with-uefi-secure-boot_installing-rhel-as-an-experienced-user.html#adding-a-beta-public-key-for-uefi-secure-boot_booting-a-beta-system-with-uefi-secure-boot}为 UEFI 安全引导添加 Beta 公钥 {.title}
:::
本节包含关于如何为 UEFI 安全引导添加 Red Hat Enterprise Linux Beta
公钥的信息。
::: itemizedlist
**先决条件**
-   系统上禁用 UEFI 安全引导。
-   已安装 Red Hat Enterprise Linux Beta
    版本，系统重启后仍然禁用了安全引导。
-   您已登录到系统，[**Initial Setup**]{.strong} 窗口中的任务已完成。
:::
::: orderedlist
**步骤**
1.  开始在系统的机器所有者密钥(MOK)列表中注册红帽 Beta 公钥：
    ``` literallayout
    # mokutil --import /usr/share/doc/kernel-keys/$(uname -r)/kernel-signing-ca.cer
    ```
    `$(uname -r)`{.literal} 替换为内核版本 -
    例如：[**4.18.0-80.el8.x86_64**]{.strong}。
2.  出现提示时输入密码。
3.  重新启动系统，并按任意键继续启动。Shim UEFI
    密钥管理工具在系统启动期间启动。
4.  选择 [**Enroll MOK**]{.strong} 。
5.  选择 [**Continue**]{.strong}。
6.  选择 [**Yes**]{.strong} ，并输入密码。密钥导入到系统的固件中。
7.  选择 [**Reboot**]{.strong}。
8.  在系统上启用安全引导。
:::
:::
::: section
::: titlepage
# []{#booting-a-beta-system-with-uefi-secure-boot_installing-rhel-as-an-experienced-user.html#removing-a-beta-public-key_booting-a-beta-system-with-uefi-secure-boot}删除 Beta 公钥 {.title}
:::
如果您计划删除Red Hat Enterprise Linux Beta 版本，并安装Red Hat
Enterprise Linux 正式发行(GA)版本或不同的操作系统，请删除 Beta 公钥。
这流程骤描述了如何删除 Beta 公钥。
::: orderedlist
**步骤**
1.  开始从系统的机器所有者密钥(MOK)列表中删除 Red Hat Beta 公钥：
    ``` literallayout
    # mokutil --reset
    ```
2.  出现提示时输入密码。
3.  重新启动系统，并按任意键继续启动。Shim UEFI
    密钥管理工具在系统启动期间启动。
4.  选择 [**Reset MOK**]{.strong}。
5.  选择 [**Continue**]{.strong}。
6.  选择 [**Yes**]{.strong}，并输入在第 2
    步中指定的密码。密钥从系统的固件中删除。
7.  选择 [**Reboot**]{.strong}。
:::
:::
:::
[]{#_kickstart_references.html}
::: part
::: titlepage
# []{#_kickstart_references.html#_kickstart_references}部分 IV. Kickstart 参考 {.title}
:::
:::
[]{#kickstart-script-file-format-reference_installing-rhel-as-an-experienced-user.html}
::: appendix
::: titlepage
# []{#kickstart-script-file-format-reference_installing-rhel-as-an-experienced-user.html#kickstart-script-file-format-reference_installing-rhel-as-an-experienced-user}附录 A. kickstart 脚本文件格式参考 {.title}
:::
这个参考详细描述了 kickstart 文件格式。
::: section
::: titlepage
# []{#kickstart-script-file-format-reference_installing-rhel-as-an-experienced-user.html#kickstart-file-format_kickstart-script-file-format-reference}kickstart 文件格式 {.title}
:::
Kickstart
脚本是包含安装程序识别的关键字的纯文本文件，它们是安装指令。任何可将文件保存为
ASCII 文本的文本编辑，,比如 `Gedit`{.literal} 或 `vim`{.literal}（Linux
系统），或 `Notepad`{.literal}（Windows 系统），都可以用来创建和编辑
Kickstart 文件。Kickstart
配置的文件名无关紧要，但建议使用简单名称，因为您需要在其他配置文件或对话框中指定这个名称。
::: variablelist
[命令]{.term}
:   命令是作为安装指令的关键字。每个命令都必须位于一行。命令可以选择。指定命令和选项和在
    shell 中使用 Linux 命令类似。
[部分]{.term}
:   某些以 `%`{.literal}
    字符开头的特殊命令可启动某个部分。部分中的命令解释与其它部分的命令不同。每个部分都必须使用
    `%end`{.literal} 命令结束。
[部分类型]{.term}
:   可用的部分有：
    ::: informalexample
    ::: itemizedlist
    -   [**Add-on 部分**]{.strong}。这些部分使用
        `%addon addon_name`{.literal} 命令。
    -   [**软件包选择部分**]{.strong}。以 `%packages`{.literal}
        开始。使用它列出安装的软件包，包括间接方法，比如软件包组或者模块。
    -   [**Script 部分**]{.strong}。它们以
        `%pre`{.literal}、`%pre-install`{.literal}、`%post`{.literal} 和
        `%onerror`{.literal} 开头。这些部分不是必需的。
    :::
    :::
[command 部分]{.term}
:   command 部分是那些不属于任何 script 部分或 `%packages`{.literal}
    部分的 Kickstart 文件中的命令的术语。
[脚本部分计数和排序]{.term}
:   除 command
    部分外的所有部分都是可选的，并可以多次出现。当要评估特定类型的脚本部分时，Kickstart
    中存在的所有部分都会按照外观顺序进行评估：两个 `%post`{.literal}
    部分会按照出现的顺序进行评估。但是，您不必按任何顺序指定各种脚本部分类型：
    `%pre`{.literal} 部分前是否有 `%post`{.literal} 部分无关紧要。
:::
::: variablelist
[注释]{.term}
:   Kickstart 注释是以 hash `#`{.literal}
    字符开头的行。安装程序会忽略这些行。
:::
不必需的项目可以被省略。省略安装程序中所有需要的项目，这样用户就可以象常规互动安装一样，提供对相关项目的回答。也可以将
kickstart 脚本声明为非交互式，通过 `cmdline`{.literal}
命令。在非互动模式中，任何缺少的回答都会中止安装过程。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
如果在文本或图形模式下 kickstart
安装过程中需要用户互动，只在位完成安装过程必须进行更新的窗口中输入。输入
spoke 可能会导致重置 kickstart 配置。重置配置将特别适用于输入
Installation Destination 窗口后与存储相关的 kickstart 命令。
:::
:::
::: section
::: titlepage