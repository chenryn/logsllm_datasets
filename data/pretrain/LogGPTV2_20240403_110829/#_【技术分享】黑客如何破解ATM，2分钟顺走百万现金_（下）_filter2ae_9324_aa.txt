# 【技术分享】黑客如何破解ATM，2分钟顺走百万现金 （下）
|
##### 译文声明
本文是翻译文章，文章来源：embedi.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
译者：[shan66](http://bobao.360.cn/member/contribute?uid=2522399780)
预估稿费：200RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**传送门**
[**【技术分享】黑客如何破解ATM，2分钟顺走百万现金
（上）**](http://bobao.360.cn/learning/detail/4559.html)
**操纵KESS：提升权限**
****
**漏洞**
在调查KESS的KLAM.SYS驱动程序时，我们发现一段有趣的代码：
    void *__thiscall create_module_list(PEB_LDR_DATA *peb_ldr, unsigned int *out_buf_ptr,
    unsigned int *out_buf_sz_ptr)
    {
    void *result; // eax@1
    PVOID buf; // ebx@1
    char *module_list; // edi@2
    int i; // eax@3
    int module_list_entry; // esi@9
    size_t strlen; // ecx@11
    void *v9; // [sp+10h] [bp-30h]@1
    int buf_1; // [sp+1Ch] [bp-24h]@9
    unsigned int offs; // [sp+20h] [bp-20h]@9
    unsigned int sz; // [sp+24h] [bp-1Ch]@1
    CPPEH_RECORD ms_exc; // [sp+28h] [bp-18h]@2
    result = 0xC000000D;
    v9 = 0xC000000D;
    buf = 0;
    sz = 0;
    *out_buf_sz_ptr = 0;
    *out_buf_ptr = 0;
    if ( peb_ldr10
    {
    ms_exc.registration.TryLevel = 0;
    module_list = &peb_ldr->InMemoryOrderModuleList;
    if ( *module_list != module_list )
    {
    for ( i = *module_list; i != module_list; i = *i )
    sz += 0x24 + *(i + 0x1C) + 0xA;
    if ( sz )
    {
    sz += 0x1008;
    buf = ExAllocatePoolWithTag(PagedPool, sz + 0x1000, ‘imLK’);
    }
    if ( buf )
    {
    buf_1 = buf;
    offs = 0;
    for ( module_list_entry = *module_list; module_list_entry != module_list;
    module_list_entry = *module_list_entry )
    {
    offs += 12;
    offs += 12;
    offs += 12;
    strlen = *(module_list_entry + 28);
    offs += strlen + 10;
    if ( offs > sz )
    break;
    memcpy_special_0(strlen, 3, &buf_1, *(module_list_entry + 0x20));// see at src
    buf!
    memcpy_special(4u, 7, &buf_1, (module_list_entry + 16));
    memcpy_special(4u, 8, &buf_1, (module_list_entry + 24));
    memcpy_special(4u, 9, &buf_1, (module_list_entry + 20));
    }
    offs += 8;
    memcpy_special(0, 0, &buf_1, 0);
    sz = offs;
    }
    }
    ms_exc.registration.TryLevel = -2;
    if ( buf )
    {
    *out_buf_ptr = buf;
    *out_buf_sz_ptr = sz;
    v9 = 0;
    }
    result = v9;
    }
    return result;
    }
接下来，会调用 **ExAllocatePoolWithTag** ，并请求分配大小为sz + 0x1000的内存空间。
之后，会再次从头到尾处理该列表，并且对于每个模块，都将存放列表数据的结构添加到已分配的缓冲区中。然后，将缓冲区中的偏移量与sz值（而不是sz +
0x1000 – 参见（3））进行比较，以防止发生溢出。
最后，为缓冲区添加8个以上的零，并返回其指针和大小。
实际上，这个缓冲区大小的计算过程有可能发生一个整数溢出。为此，可以：
1.构造一个InMemoryOrderModuleList_fake链接列表，使得第一次循环中，字符串与剩余其他内容的长度之和等于0xffffdff8；
2.将其放在PEB中；
3.通过这个函数触发列表审核;
4.在步骤（2）的操作算法中，该函数将被分配一个值sz + = 0x1008（Sz = 0xFFFFDFF + 0x1008 = =
0xFFFFF000）；
5.调用ExAllocatePoolWithTag，表示大小的参数Sz_arg = sz + 0x1000（sz_arg = 0xFFFFF000 +
0x1000 = = 0）——将分配一个长度为零的缓冲区；
6.然后，InMemoryOrderModuleList_fake的数据将被复制到这个缓冲区，直到偏移值 offs > sz（sz ==
0xFFFFF000），这远大于前面分配的缓冲区长度，即零字节:)
对于sz的任何取值，我们都可以为其构建一个InMemoryOrderModuleList_fake。在0xFFFFDFF8 <= sz
<0xFFFFEFF8的范围内，我们可以分配大小为0到0x1000字节的缓冲区，然后再设法溢出。