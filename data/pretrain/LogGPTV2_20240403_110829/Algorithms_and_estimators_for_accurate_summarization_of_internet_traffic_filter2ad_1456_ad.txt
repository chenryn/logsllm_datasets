function #L
p(n). Adjusted counts can also be obtained from the
unbiased ﬂow size distribution (FSD) estimators, that have a form
of a linear combination over observed counts, with coefﬁcients that
correspond to adjusted counts. (NF variants have ill-behaved FSD
estimators [12, 6] and SH variants [2] have well-behaved estima-
tors.)
p (1) = 1/p; for n > 1, #L
• L ∈ {SH, ASH}: #L
p (n) = 1.
• SSH: If |n| = 1 (there is one packet counted) then #SSH
(n) =
1/pr. Otherwise (|n| > 1), if n has at least one packet in
the last step, then #SSH
(n) = 1. Otherwise, let (cid:2) < r
be the last step with a positive packet count. #SSH
(n) =
p
p
p
c(cid:2)+1,r
q[n|n] . (If we eliminate steps with zero count except
1 +
the last step, (cid:2) + 1 ≡ r.) The adjusted counts need to be
computed when the adjusted weights are computed, before
discarding the per-step counts.
• NF variants: Adjusted counts are deﬁned by applying meth-
ods developed for adjusted weights derivation (see Section 8).
L ∈ {NF, ANF}: the solution of the triangular system of lin-
ear equations obtained from the the unbiasedness constraints:
For a ﬂow with count |f|,
!
(1 − p)
|f|−i
L
p (i) = 1 .
#
pi
|f|X
i=0
|f|
i
p
SNF: Solution of a system of linear equations with variables
(s) for all s ≤ n. (The vector notation s ≤ n means
#SNF
that the relation holds per coordinate) using the unbiasedness
constraints. Alternatively, they can be deﬁned using domi-
nance of SNF over ANF. As is the case for FSD estimators,
these systems are ill-behaved for low sampling rates.
6.2 Packet-level properties
P
Packet-level properties have numeric h()-values that are associ-
ated with each packet. For a ﬂow f we deﬁne the h()-value of f as
c∈f h(c). If h(c) is the number of bytes in the packet
h(f ) =
c then h(f ) is the number of bytes in the ﬂow. If h(c) is unity,
then h(f ) = w(f ) is the number of packets of the ﬂow. h(f ) is
available only if all packets of f are processed and therefore is not
provided for ﬂows included in NF and SH variants sketches.
P
P
f∈J h(f ).
The algorithms are adapted to collect information needed to fa-
cilitate unbiased estimators. For any desired packet-level property
h(), we produce adjusted h()-values H L
p (f ). For any f, H(f ) is
an unbiased estimator of h(f ) and H(f ) = 0 for ﬂows that are not
included in the sketch. For any subpopulation J,
f∈J H(f ) =
P
f∈J∩s H(f ) is an unbiased estimator for
• L ∈ {NF, ANF}: Let N (f ) be the set of counted pack-
ets and let n(f ) be the packet count maintained by L for a
cached ﬂow f. To facilitate h()-values estimation, the al-
gorithm maintains the h() counts n(h)(f ) = h(N ). The
adjusted h()-value is H L
p (f ) = n(h)(f )/p. A subtle point is
correctly updating n(h) for ANF when performing rate adap-
tation. The updated value should include the sum of the h()
values of resampled packets which if strictly done, requires
us to store the h() value of all packets in N (f ), which is
prohibitive. We argue, however, that it is sufﬁcient to store
the total n(h)(f ) and update it proportionally to the reduc-
tion in the packet count n(f ). That is, if resampling re-
duces the packet count to n(cid:2)
(f ), we update the h()-count
n(h)(f ) ← n(h)(f )n(cid:2)
The updated n(h)(f ) is the expectation of the updated h()
count that would have been obtained if we explicitly main-
tained N and per-packet h() values and sampled from N
a subset of size n(cid:2)
(f ). (all subsets of N (f ) that are of the
same size have the same probability of being in the resample,
regardless of the packet position or its h() value.)
This consideration extends to a sequence of rate adaptations:
The ﬁnal n(h)(f ) has the expectation of the h() count over
all resamples that resulted in the same sequence of packet
count reductions. Interestingly, done this way, we obtain a
lower variance estimator than if we had maintained and used
(f )/n(f ).
per-packet h() values for N (f ), as the h() count we use is
the expectation of the latter in each part of a partition of the
sample space.
• L ∈ {SH, ASH}: we obtain the unbiased estimator H ASH(f ) =
h(c0(f )) 1−p
p + h(N (f )), where N (f ) is the set of counted
packets of f and c0(f ) ∈ N (f ) is the ﬁrst counted packet of
f. To facilitate this estimator, the algorithm needs to record
the h() value of the ﬁrst packet and the sum of h() values
of all subsequent packets. For ASH, the resampling makes
a direct implementation infeasible, as we need to record per-
packet h() values for all packets in N. We can not use aver-
aging as we did for ANF, since later packets are more likely
to be counted than earlier packets. Fortunately, there is efﬁ-
cient implementation for SSH.
• L ∈ {SNF, SSH}: To facilitate estimators, the algorithms
need to maintain per-step h() counts,
h(N1), h(N2), . . . , h(Nr) ,
where Ni is the set of packets counted in step i. For SSH,
we also need to maintain the h() value of the ﬁrst packet c0
when the ﬂow enters the cache. The expressions for adjusted
h() values are provided in Eq. (7) (for SSH) and Eq. (15) (for
SNF).
• Hybrid SH variants: We obtain adjusted h() values for the
sampled stream and scale them by p−1
base.
6.3 Flow size distribution
We derive unbiased estimators for subpopulations ﬂow size dis-
tribution queries using hybrid sketches. We use existing ﬂow size
distribution estimators as components, applicable to ASH and SSH
sketches [2] and NF sketches [12, 6].
For hybrid-ASH (or hybrid-SSH) we apply the respective (ASH
or SSH) estimators in [2] to the counts obtained on the pbase-
sampled stream. We obtain unbiased estimates Mj (j ≥ 1) for the
number of ﬂows of size j in the pbase-sampled stream. We then
“treat” these Mj values as observed counts with NF with sampling
rate pbase, and “plug them” in a corresponding estimator. Since
the NF estimators are ill behaved for low sampling rates, these es-
timators are ill behaved for low values of pbase.
LEMMA 6.1. The resulting estimates ˆC(cid:2)
i (i ≥ 1) are unbiased
estimates of the number of ﬂows of size i in the original stream.
PROOF. We review the derivation of ﬂow size distribution esti-
mators. These estimators are derived by expressing Oj (j ≥ 1),
the expected number of ﬂows with a certain observed counts (for
step-counting algorithms we use observed count vectors) as a lin-
ear combination of Ci (i ≥ 1), the number of ﬂows of size i. The
matrix is then inverted, and we express each Ci as a linear com-
bination of the expectations of the observed counts. The estimates
ˆCi are linear combinations of the observed counts. Since this is a
linear combination, we can replace the observed counts with any
other random variables with the same expectation and still obtain
unbiased estimators ˆC(cid:2)
i.
7. SIMULATIONS
We use simulations in order to understand several performance
parameters: The accuracy of the estimates derived and its depen-
dence on the algorithms, parameter settings, and the consistency
of the subpopulation, the tradeoffs of the hybrid approach, and the
effectiveness of the parameters controlling the number of rate adap-
tations. The simulations were performed using the discretized vari-
ants of the algorithms, with parameters k (maximum number of
counters), 0 < pbase ≤ 1 that determines the fraction of processed
packets (hybrid approach), and μ and pstart, that control a tradeoff
between accuracy/utilization and the number of rate adaptations.
7.1 Data
We used both synthetic and IP ﬂows datasets. The IP ﬂows data
was collected using unsampled NetFlow (ﬂow-level summary of
each 10 minute time period that includes a complete packet count
for each ﬂow) deployed at a gateway router. A typical period has
about 5000 distinct ﬂows and 100K packets. The synthetic datasets
were produced using Pareto distributions with parameters α = 1.1
and α = 1.5. We generated distributions of ﬂow sizes by drawing
5000 ﬂow sizes. We simulated a packet stream from each distribu-
tion of ﬂow sizes by randomly permuting the packets of all ﬂows.
The cumulative distributions of the weight of the top i ﬂow sizes
for each distribution is provided in Figure 2.
1
n
o
i
t
c
a
r
f
0.1
0.01
1
10
gateway
Pareto 1.1
Pareto 1.4
100
flows
1000
10000
Figure 2: Fraction of packets belonging to the i heaviest ﬂows.
The subsets (subpopulations) we considered for the synthetic
datasets were the 2i largest ﬂows and the 50%, 30%, and 10%
smallest ﬂows. This selection enables us to understand how per-
formance depends on the consistency of the subpopulation (many
smaller ﬂows or fewer larger ﬂows) and the skew of the data. The
subpopulations we used for the IP ﬂows (gateway) data were a par-
tition of the ﬂows according to destination port.
7.2 Quality of sketches
We compare the accuracy of subpopulation-size estimates ob-
tained using ANF, SNF, ASH, and SSH. We evaluate performance
as a function of the size k of the sketch (and the size of the ﬂow
cache). We also include weighted sampling without replacement.
Results that show the average absolute value of the relative error
as a function of the cache size k are provided in Figures 3 and 4.
The averaging for each data point was performed over 200 runs.
The ﬁgures reﬂect the relation established theoretically: SSH dom-
inating ASH which in turn dominates ANF and that SNF dominates
ANF. They also show that ASH dominates SNF on our data. For
subpopulations consisting of large ﬂows, such as top-i ﬂows and
applications with medium to large ﬂows, the performance gaps are
more pronounced. This is because on these ﬂows, the more domi-
nant methods count more packets and obtain adjusted weights with
smaller variance. Our adjusted weight assignments have minimum
variance with respect to the information they use (the counts col-
lected for the ﬂow). This “optimality” enables us to translate the
larger counts to smaller errors.
On subpopulations of very small ﬂows, such as bottom-50% of
ﬂows or DNS (port 53) trafﬁc (only the latter is shown), all meth-
ods have similar performance. In particular, there is no advantage
for WS (the strongest method) over ANF (the weakest) on subpop-
ulations consisting of 1-packet ﬂows.
The results strongly support the use of step-counting as an al-
ternative to the adaptive variants: On subpopulations consisting of
many medium to large size ﬂows, the relative error obtained using
SNF and SSH is signiﬁcantly smaller than what is obtained using
ANF or ASH, respectively.
7.3 Evaluation of the hybrid algorithms
We decrease the parameter pbase while maintaining the same
ﬂow cache size k = 400. Figure 5 shows that the estimate quality
gracefully degrades and a smooth performance curve is obtained.
Even for pbase = 0.1, the hybrid-ASH and hybrid-SSH outper-
form ANF and SNF, respectively.
Figure 6 shows the number of packets counted as a function of
pbase as a fraction of the number of packets in the pbase-sampled
stream and as a fraction of the total number of packets. The hybrids
provide a desirable smooth tradeoff that provides high counting rate
of processed packets, while enabling us to fully control the fraction
of total packets that are processed.
r
o
r
r
e
l
e
r
0.055
0.05
0.045
0.04
0.035
0.03
0.025
0.02
0.015
0.01
0.005
0.1
aNF
aSH
sNF
sSH
ws
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1
pbase
pareto 1.1, top-64
r
o
r
r
e
l
e
r
0.1
0.09
0.08
0.07
0.06
0.05
0.04
0.03
0.1
aNF
aSH
sNF
sSH
ws
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1
pbase
pareto 1.4, top-64
Figure 5: Sweeping pbase to evaluate hybrid algorithm. Esti-
mating subpopulations of top-64 ﬂows in Pareto 1.1 and Pareto
1.4, k = 400, pstart = pbase, μ = 0.9.
0.6
0.5
0.4
0.3
0.2
0.1
d
e
t
n
u
o
c
s
t
e
k
c
a
p
.
c
a
r
f
aNF
aSH
sNF
sSH
aNF
aSH
sNF
sSH
0.5
0.45
0.4
0.35
0.3