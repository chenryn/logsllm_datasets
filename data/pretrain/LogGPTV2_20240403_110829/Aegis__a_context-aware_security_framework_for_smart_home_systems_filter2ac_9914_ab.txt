user can set a security camera to take pictures whenever a motion is
Version Accepted by ACSAC'19: A. K. Sikder, L. Babun, H. Aksu, A. Selcuk Uluagac
FOR EDUCATIONAL PURPOSES ONLY
Figure 3: The architecture of Aegis.
Threat
Attack Method
Attack Example
Threat-1
Threat-2
Threat-3
Impersonation
attack
False data
injection
Side channel
attack
Threat-4
Denial-of-service
Threat-5
Triggering a malicious
app
An unauthorized user steals the unlock
code of a smart lock and try to unlock the
door.
A malicious smart home app can exist in
the SHS and inject forged data to perform
malicious activities.
A malicious smart home app can exist in
the SHS and perform legitimate, yet vul-
nerable side-channel activities (switch-
ing on when no one is around in vacation
mode) which can be harnessed by other
apps (considered malicious) in the system
or the attacker himself.
A malicious smart home app installed in
the SHS and impede normal behavior of
the smart home devices.
A malicious smart home app can exist in
the system which can be triggered by a
specific activity pattern or device action
(e.g., switching a smart light in a specific
on/off pattern) in a smart home environ-
ment.
Table 1: Summary of the threat model considered for Aegis.
The information leakage caused by a compromised device or
untrusted communication channel in the SHS are considered out
of scope of Aegis. We also assume that the data collected from the
devices and central management system (e.g., Hub, cloud, etc.) is
not compromised. In Table 1, we summarize the threat model used
later in Aegis’s performance evaluation (Section 5).
4 AEGIS FRAMEWORK
Aegis has four main modules: (1) data collector, (2) context genera-
tor, (3) data analysis, and (4) action management (Figure 3). First,
Aegis collects data from smart home entities (sensors and devices)
for day-to-day user activities. The data collector module uses an
app to collect all the device states (active/inactive) from the hub.
Additionally, this module collects rules generated by different smart
apps using the app rule extractor.
The device state data is used to understand the context of the
user activities and feeds the context generation module. This mod-
ule creates context arrays depending on usage patterns and the
predetermined user policies in the smart apps. Each context array
contains overall information of the user activities and device states
in the SHS.
The context arrays generated in the context generation module
are used by the anomaly detector module to implement machine
learning-based analysis and build the context-aware model of the
SHS. Additionally, anomaly detector module decides whether or not
malicious activities occur in the SHS.
Finally, the malicious activities detected by the anomaly detector
module are forwarded to the action management module. This mod-
ule notifies the users regarding the unauthorized activities. Also, it
offers adaptive training mode where users can validate any false
positive or false negative occurrence and re-train the detection
model to improve the performance of Aegis.
4.1 Data Collector Module
The data collector module has two sub-modules: device data collec-
tor and app data collector.
4.1.1 Device Data Collector. Aegis collects data from smart home
devices and sensors using the data collector module. In a SHS, there
can be multiple devices and sensors connected through a hub and
operating in a co-dependent manner. Data collector of Aegis collects
the state of these devices (active or inactive) autonomously and
forwards these data to the context generation module. Based on
the type of data, the collected data is governed by:
Data array, E = {S, D, M},
(1)
where S is the set of features extracted from the sensors, D is the
set of features extracted from the devices, and M is the features
extracted from the associated controller devices (e.g., smartphone,
smart tablet) in a SHS. We describe the characteristics of these
features below.
• Features extracted from sensors (S): An SHS can comprise several
sensors such as motion and light sensors. They sense changes in the
vicinity of the devices and work as input to multiple devices. Sensor
data can be both logical states (e.g., motion sensor) and numerical
values (light sensor). For Aegis, we consider both logical states and
numerical values of sensors to create the context of user activities.
• Features extracted from devices (D): In a SHS, several devices
can be connected with each other and also with different sensors.
These devices remain active based on user activities in a smart
home environment. Aegis observes the daily activities of users and
collects the device state data (active/inactive state) to build the
context of the associated activity.
• Features extracted from controller devices (M): In a SHS, Smart-
phone or tablet works as a control device to the SHS and users
can control any device using the associated smart app of the smart
home. Aegis considers any control command given from the con-
troller device as a feature to understand the context of user activity.
Version Accepted by ACSAC'19: A. K. Sikder, L. Babun, H. Aksu, A. Selcuk Uluagac
FOR EDUCATIONAL PURPOSES ONLY
Additionally, the location of the connected controller device can
also work as an input to control multiple devices. For example, a
thermostat can be configured to the desired temperature whenever
the smartphone of the user is connected to the smart home network.
Aegis considers the location of the controller device as a feature to
build the context of user activities.
As user activities on a SHS can vary based on the number of
users, Aegis considers multi-user settings to understand the user
activity contexts correctly. Moreover, user activities also change
based on the daily routine of users. For this, in the data collection
process, Aegis also offers time-based activity settings (weekday and
weekend settings).
4.1.2 App Rule Extractor. Modern SHSs offer an app-centric model
where users can install different apps to automate the functions
of smart home devices. These apps mostly define a trigger-action
scenario for specific devices. For instance, an app can automate a
smart light by configuring it with a motion sensor or light sensor.
Here, the sensors work as a trigger and the state of the smart light
(on/off) refers to the action. These trigger-action scenarios can
represent the app context which can be used to validate the user
activity context in a SHS. Additionally, the app context is also used
to train the analytical model for new devices in SHS. Aegis uses a
static analysis tool, logic extractor, to extract the app logic which is
used to determine the app context in a SHS. Logic extractor takes
the source code of an app as the input and extracts the trigger-
action scenarios enforced in the app as the output. For example, if
a smart light is configured with a contact sensor, Aegis extracts the
following logic from the app (sample app is given in Appendix B.
Listing 1: trigger-action Scenario of a sample app
1 Trigger: Contact1
2 Action: Switch1
3 Logic 1: contact1 = on, light1 = on
4 Logic 2: contact1 = off, light1 = off
4.2 Context Generation Module
The data collector module forwards the collected data to the context
generation module to build the context of different user activities.
Then, the context generation module maps and aggregates the data
to build context arrays. Each context array consists of information
on the usage patterns in the SHS for different activities, which can
be used for further analysis and to determine malicious activities in
the system. The context array modeling process has the following
steps:
• Context of sensors: Sensor features collected in the data collector
consists of both logic state (on/off) and numerical values. Aegis ob-
serves the sensor data and generates the conditions of the sensors.
These conditions represent the changing pattern of the sensor. If the
current sensor value is different than the previous one, Aegis con-
siders this as an active condition that is represented as 1. Similarly,
conditions labeled as inactive are represented as 0.
• Context of devices: Data collector of Aegis collects device state
(active/inactive) data for every connected device. These device state
data are converted to logical states (1 represents active and 0 repre-
sents inactive) to build the context of user activities in a SHS.
• Context of controller devices: There are two features of the con-
troller device (e.g., smartphone, tablet, etc.) that are collected by
Aegis: Control command for the devices and the location of the
controller device. For any command from the smartphone/tablet,
Aegis considers the active condition of smartphone/tablet which is
represented as 1 in context array or 0 otherwise. An SHS allows two
different states to represent the location of the controller device -
home and away. Home location indicates that the controller device
is connected to the home network and away represents otherwise.
Aegis represents the "home" location of the smartphone as 1 and
the "away" location as 0 in the context array.
The final context array can be represented as follows:
Context Arr ay, C = [{S1, S2, ..., SX }, {D1, D2, ..., DY }, {M1, M2}],
(2)
where S1, S2, ..., SX captures the conditions of X number of sensors
in the SHS, D1, D2, ..., DY the conditions of Y number of sensors
in the SHS, and M1, M2 the conditions of smartphone/tablet in the
SHS.
Context generation module also generates the app’s context. As
most of the app’s logic represents a trigger-action scenario, the
context generation module converts the logic in a binary represen-
tation. For example, the logic extracted from the app presented in
Listing 1 is given below:
Listing 2: Generated app context of a sample app
1 App Context 1: contact1 = 1 , Light1 = 1
2 App context 2: contact1 = 0, Light1 = 0
Here, for the contact sensor, 1 and 0 represent the contact state
from "open" or "close" respectively. Similarly, for the smart light, 1
and 0 represent the light state from "on" or "off", respectively. These
app contexts are used to validate the sensor-device co-dependence
captured in the context array. Additionally, these app contexts are
used to update the training dataset whenever a new device is added
to the SHS.
4.3 Anomaly Detector Module
In the third module, Aegis takes context arrays generated in the
context generation module as input and trains a Markov Chain-
based machine learning model which is used to detect malicious
activities in SHS.
The Markov Chain model is based on two main assumptions: (1)
the probability of occurring a state at time t +1 only depends on the
state at time t only and (2) the transition between two consecutive
states is independent of time. Aegis uses this Markov Chain model to
illustrate a series of events in a SHS. Here, a series of events denotes
user activity and usage pattern and the state represents the context
array at a specific time t generated in the context generation module.
The probabilistic condition of Markov Chain model is shown in
Equation 3, where Xt denotes the state at time t for a user activity
in the SHS [19].
P(Xt +1 = x |X1 = x1, X2 = x2 ..., Xt = xt) = P(Xt +1 = x |Xt = xt),
when, P(X1 = x1, X2 = x2 ..., Xt = xt) > 0
(3)
Aegis considers the context array given in Equation 2 as an array of
variables and observes its changes over time. For every user activity
on a SHS, several context arrays are created. These arrays follow
a different but specific pattern for different user activities. Each
element of the context array represents the condition of a smart
home entity (active/inactive states of sensor, device, or smartphone).
For a distinct time, t, we consider the combination of all the smart
home devices’ and sensors’ condition as binary output (1 for the
active state of an entity and 0 for the inactive state). Thus, the
Version Accepted by ACSAC'19: A. K. Sikder, L. Babun, H. Aksu, A. Selcuk Uluagac
FOR EDUCATIONAL PURPOSES ONLY
adaptive training mode, a user feedback process to improve the
performance. In the adaptive training mode, whenever a malicious
activity is detected, Aegis sends a notification to the controller de-
vice (smartphone, smart tablet, etc.) for user confirmation. Users
can either confirm the malicious activity from the controller device
or mark the activity as benign. If the user confirms the activity as
benign, Aegis label that activity context and train the framework
automatically. Hence, Aegis can correctly and automatically im-
prove the training dataset by adding irregular or new user activity
pattern.
5 PERFORMANCE EVALUATION
In the evaluation of Aegis, we consider several research questions:
RQ1 What is the performance of Aegis in different smart home
layouts and devices? (Sec 5.2)
RQ2 What is the impact of different apps, policies, and configura-
tions on the performance of Aegis? (Sec. 5.3)
RQ3 What is the impact of different user behavior on the perfor-
mance of Aegis? (Sec. 5.4)
RQ4 What are the performance overhead introduced by Aegis in a
SHS? (Sec. 5.5)
5.1 Evaluation Setup and Methodology
We obtained appropriate Institutional Review Board (IRB) approval
to collect daily usage data of a SHS with multiple users. We imple-
mented a test setting where the users had the freedom to design
their own smart home environment and perform regular daily ac-
tivities in a timely order. While collecting the user activity data, we
considered five features to enrich our dataset: Anonymous User ID,
User Role, Smart Home Layout, Activity Day-time, and User Policy.
For each user, we assigned an anonymous ID to ensure privacy. We
also assigned a specific user role to each participant to understand
the context of the user activities in a multi-user scenario. As there
exist different home layouts in real scenarios, we considered three
different home layouts (single bedroom apartment, two-bedroom
home, and duplex home) and let the users choose their layout and
smart home devices. Moreover, user activities in a SHS depend
on the user’s daily routine which may change for different days
of the week. We considered this and collected the user activities
performed in both weekdays and weekends, separately. Finally, as
current smart home platforms let users define multiple policies to
control devices, we allowed the users to define their own policies
in the SHS during the data collection process.
We chose Samsung SmartThings platform to create the smart
home environment because of its large app market and compatibil-
ity with other smart devices [15]. We considered the most common
devices in our SHS. A detailed list of devices that were used in our
experiments is given in Appendix C. We collected data from 15
different individuals with different user roles, user policies, and
smart home layouts. Our dataset consisted of over 55000 events
collected in a 10-day period. We implemented a custom app as part
of Aegis’s data acquisition module that uses the ListEvent command
from SmartThings API to collect the device logs. For collecting
app context data from installed apps, we used a static analysis tool
available online [6]. We created an app context database which
consists of 150 official Samsung SmartThings apps. Whenever users
Figure 4: Markov Chain model for Aegis.
number of total states (A) will be the exponent of 2 and can be
represented as a n-bit binary number, where n is the total number of
entities in the SHS. Let assume Pij denotes the transition probability
of the system from state i at time t to state j at time t + 1. If the
SHS has n number of entities and m = 2n states in the system, the
transition matrix of the Markov Chain model can be illustrated by
Figure 4. Here, each transition probability from one state to another
state represents an element of the transition matrix.
If the SHS has X0, X1, . . . , XT states at a given time t = 0, 1, . . . ,T ,
the elements of the transition matrix can be shown as Pij = Ni j
Ni
where Nij denotes the number of transition from Xt to Xt +1, Xt is
the state at time t, and Xt +1 is the state at time t + 1 [37]. Instead
of predicting the next state using the Markov Chain model, Aegis
determines the probability of transition between two states in the
SHS at a given time. We train the Markov Chain model with the
generated context arrays from the context generation module and
construct the transition matrix. Using this transition matrix, Aegis
determines the probability of transition from one state (i.e., context
array) to another state over time. For example, in Figure 2, the tran-
sition between sub-context 1 and sub-context 2 is valid as the user
can perform this activity. However, the transition from sub-context
1 to sub-context 4 is invalid as the user cannot go from the bedroom
to the hallway without going through sub-context 2 and 3. Thus,
Aegis defines benign or malicious device behavior based on user
activities.
4.4 Action Management Module
Finally, the action management module notifies the users in the
event of malicious activity in the SHS. Action management module
has two operation modes - detection mode and adaptive training
mode.
• Detection mode: In the detection mode, Aegis pushes a notification
in the controller device (smartphone, smart tablet) to notify the
users if malicious activity is detected. Aegis provides the device ID
and the installed app names to the user for further action.
• Adaptive training mode: As Aegis builds a contextual model from
user activities, it is important to verify the correct context of an
ongoing user activity [24]. In a SHS, users can perform different
activities in an irregular pattern. For example, a guest may come to
the house which will introduce some new activity patterns in the
SHS. These abrupt data patterns may cause a higher false positive
rate in the contextual model. To address this issue, Aegis offers the
Version Accepted by ACSAC'19: A. K. Sikder, L. Babun, H. Aksu, A. Selcuk Uluagac
FOR EDUCATIONAL PURPOSES ONLY
Smart Home Layout
Single Bedroom Home
Double Bedroom Home
Duplex Home
Accuracy
Normal Training
TN
1
1
1
FP
0