Application AApplicationBTemperaturesensorCommunicationinterfaceChecktemperaturesensor every secondSend out alertsAccess sameresourcesSession 5A: Control System Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1359Considering the last guarantee, we note that equivalent guarantees
can only be given to competing applications up to an upper limit
depending on the nature of the resource. Intuitively, no realistic
guarantee can be given if the requirements exceed the available
schedulability of the resource. This restriction spans across all
shared resources such as time (managed and guaranteed by the
scheduler), and attached peripherals (such as the temperature sen-
sor and communication interface drivers). We see it as a software
responsibility of each (trusted) resource driver to only provide a
guarantee if this guarantee can realistically be given.
In summary, these guarantees make it possible to ensure for
our example applications A and B that temperature alerts will be
sent out within a hard real-time bound in the presence of buggy or
malicious code on the platform. More specifically, the protected A
is capable of achieving its goals even if B is malicious and attempts
to monopolize resources, and vice versa. In Section 5 we will show
how this simple application can be realized on our platform with
the above availability guarantees. To the best of our knowledge,
no other TEE is capable of providing these combined security and
availability guarantees.
2.4 Related Work
Most closely related to our approach are existing hardware/soft-
ware co-designs for light-weight embedded systems with a strong
emphasis on security. The key publications here are Masti et al. [25],
TrustLite [20], TyTAN [7], and Sancus [30]. We explicitly focus on
light-weight embedded systems and on related work that can be
used as a base platform for our design. Thus, we focus on related
work that at least provides spatial isolation to its software com-
ponents and that enables the deployment of mutually distrusting
enclaves. This leaves literature such as SMART [13] or VRASED [31]
out of scope. We also explicitly omit research from this list that
either focuses on higher-level embedded systems such as Cure [5]
or CHASE [10], or that targets the problem domain of real-time and
mixed-criticality systems without discussing their security. While
Masti et al. also lacks certain spatial isolation properties that would
be necessary to use it as a base platform, their solution does already
provide some availability features.
There is a wide body of work on mixed-criticality systems in
the real-time community, but for most of this literature, important
differences with our approach are (i) priorities and (ii) not aiming
for the same strong confidentiality and integrity guarantees that
enclaves offer. In mixed-criticality systems, a clear priority order is
applied to all running applications. As such, the operating system
can prioritize a closed, known set of applications and ensure the
progress of important code [8]. On an open platform, however, such
clear priority order does not exist and all dynamically deployed
applications that share a resource need to be assumed to have the
same priority. A number of designs have been proposed that do
focus on security, but for more heavy-weight processors than the
ones we consider in this paper. We will discuss all such additional
related work further in Section 2.4.2.
Light-weight embedded systems. We summarize the temporal
2.4.1
isolation guarantees given by closely related work and Aion in
Table 1. Masti et al. [25] investigate the topic of trusted scheduling
on embedded systems and present a hardware/software co-design
that, based on crafted hardware components plus an omnipotent
trusted domain software layer, can securely schedule applications
even under attack from a software adversary. In their approach,
the authors assume a conventional priority-based system and can
provide availability guarantees to the highest-priority thread. Their
approach can, furthermore, allow for guaranteed peripheral access
through a hardware-level peripheral manager that is responsible
for all peripherals on the device.
TrustLite [20] and TyTAN [7] are two security architectures
based on the Intel Siskiyou Peak platform. TrustLite utilizes an
execution-aware memory protection unit that links the program
and data sections of applications together and shields them as a
unified trustlet against interference from untrusted parties. While
TrustLite does provide secure peripherals and the ability to preempt
enclaves, it neither implements sharing of resources, a bounded
limit on atomic periods, nor guaranteed progress for any other
application than the one with the highest priority. TyTAN is an
improvement over the TrustLite platform in terms of a dynamic
deployment of applications, but it does not extend the guarantees
that are the concern of this work. Although TyTAN does provide a
version of trusted scheduling, this does not entail a strict bounded
activation latency since attackers can still trigger infinite atomic
sections. Furthermore, peripherals can be secured, but not securely
and safely shared with other applications without losing avail-
ability guarantees. Both the design of Masti et al. and TrustLite
require a static deployment of software and a platform reset is
needed to load additional applications. Sancus [30] is a program
counter-based TEE for the 16-bit MSP430 processor that can uti-
lizes its memory isolation capabilities for enclaves to also support
secure memory mapped peripherals. We introduce Sancus more
thoroughly in Section 4.1 but note that the original Sancus does not
allow the preemption of enclaves and faces the same limitations as
TrustLite and TyTAN in regards to our availability guarantees.
In contrast with earlier approaches, Aion provides applications
with a complete set of the discussed temporal isolation guarantees.
While Masti et al. can give the largest subset of the desired guar-
antees, their solution enforces strict priorities among applications
using a static, hardware-level scheduler. This means that progress
can only be actually guaranteed for a single application with the
highest priority instead of multiple applications at once. Their so-
lution also requires applications to trust each peripheral since a
single peripheral manager manages all platform peripherals. Aion,
however, only requires applications to trust the peripherals they uti-
lize, does not require applications to depend on any higher-priority
application outside of their TCB, and can provide progress guar-
antees to multiple applications simultaneously through a flexible,
software-defined scheduling policy.
2.4.2 Beyond light-weight embedded platforms. Outside of the scope
of what we refer to as light-weight embedded TEE processors, re-
lated approaches have been presented. In [8], Burns and Davis
provide a comprehensive review of approaches to implement mixed-
criticality systems, albeit with little consideration for security.
System designs with a focus on security that provide at least
a subset of the guarantees provided by Aion are CURE and seL4.
CURE [5] is a multicore RISC-based TEE that provides exclusive
assignment of system resources, e.g. peripherals, to single enclaves.
Session 5A: Control System Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1360Table 1: Comparison of Aion to earlier work on light-weight
embedded hardware/software co-designs in regards to tem-
poral isolation guarantees. (cid:71)(cid:35) denotes that this guarantee
can only be fulfilled for a single enclave.
T r u st L ite
T
y
T
N
n
A
M
S a n c u s
a sti
A i o
– ¸
Bounded activation latency ¸
Guaranteed progress
(cid:71)(cid:35) ¸
(cid:71)(cid:35)
Guaranteed device access ¸
(cid:71)(cid:35) ¸
Safety independence
– ¸
–
– ¸
–
No trust hierarchy
Architecture
AVR | Siskiyou Peak | MSP430 |
–
(cid:71)(cid:35)
(cid:71)(cid:35)
–
–
–
(cid:71)(cid:35)
(cid:71)(cid:35)
–
–
This exclusive access allows for secure I/O operations similar to
Sancus [30] (which we extend in this paper). In addition, CURE
features novel enclave types which can, e.g., span multiple privi-
lege levels and might be interesting for mixed-criticality use cases.
However, CURE is not designed around real-time guarantees and
does not provide a notion of availability for enclaves.
Notably, the seL4 microkernel [19] enforces strong security prop-
erties with formally proven access control mechanisms. Kernel op-
erations also have verified safe upper bounds on their worst-case
execution times [6, 36] and interrupt latencies. Based on these fea-
tures, mixed-criticality support has been implemented in seL4 [23],
with similar guarantees for isolation and availability as in Aion.
However, our approach is unique in that we do not rely on a trusted
kernel for security but instead build upon a security-centric ap-
proach to hardware/software co-design. Therefore, seL4 comes
with a larger software TCB than Aion and does not provide TEE
features such as sealing and attestation.
A number of approaches aim to build real-time systems on top
of ARM’s TrustZone TEE[2, 12, 22, 27, 33, 34]. In difference to our
work, TrustZone [1] TEEs do not implement a hardware-only TCB
as they rely on a trusted operating system to isolate processes in
the secure world; they further do not natively provide enclave at-
testation and sealing. Most importantly, these works all investigate
the impact of TEEs on real-time behavior and demonstrate the
feasibility of using TEEs in these systems. However, none provide
availability guarantees in the presence of a strong software attacker.
Azab et al. [2] proposed a TrustZone-based implementation of
a protected security monitor that is capable of securing the oper-
ating system that runs in the insecure world. While this system
monitor cannot be bypassed and operates deterministically, it does
not provide dependable scheduling of guest tasks.
Pinto et al. [33, 34] presented a virtualization solution that demon-
strated how multiple guests efficiently co-exist in isolation, and with
deterministic execution. The approach does consider an attacker
with the ability to trigger interrupts to harm system availability,
and proposes a solution based on privileged and unprivileged inter-
rupts. In difference to Aion, Pinto’s work provides integrity only at
boot time, by means of TrustZone’s secure boot process, and does
not consider dynamic updates to code or scheduling policy.
Figure 2: System overview with trusted components high-
lighted in green. The scheduler has exclusive control over
interrupts and can enforce a periodic scheduling, but can-
not access protected application enclaves directly.
With a specific focus on mixed-criticality, Dong et al. [12] pro-
posed and evaluated a dual-criticality approach to kernel virtualiza-
tion, which enables a real-time kernel to share the same platform
with a general-purpose operating system. No provisions are made
to address the security impact of software-level attackers.
Finally, Mukherjee et al. [27] presented a technique to enforce
the correct timing requirement of a task, along with a sufficient
test for schedulability. The paper focuses on reducing the overall
number of transitions between the insecure and secure worlds in
applications by fusing together secure sections of that application.
This allows to minimize the associated I/O traffic and improves the
temporal predictability of the system, but dissolves spatial isolation
between the secure sections.
3 DESIGN
In the following we present the design of Aion that, based on
conventional light-weight embedded TEE architectures, can bring
strong temporal isolation guarantees to multiple, mutually distrust-
ing applications. We base our prototype implementation on Sancus,
but stress that the general design of Aion is independent of the un-
derlying platform. Figure 2 shows an overview of the Aion system
and its core components.
The first core component is the underlying hardware-based TEE
architecture that provides the core guarantees of confidentiality
and integrity. In the following, we focus only on TEE character-
istics that are necessary in addition to the established protection
mechanisms, e.g., how interrupts or violations of the TEE’s security
policy are handled. We are confident that these additions could be
implemented on top of all discussed light-weight embedded TEE
architectures. The second component of our design is a hardware-
based exception engine that is triggered whenever an interrupt or
violation occurs. This exception engine cannot only interrupt unpro-
tected but also protected, i.e., enclaved, applications. Furthermore,
the exception engine is triggered on any violation of a platform
policy such as reading from protected memory or jumping into the
middle of a protected code region. The third and fourth elements
of Aion are an atomicity monitor and an enclaved scheduler.
The hardware-based atomicity monitor ensures that the enclaved
CPUAtomicitymonitorExceptionengineHWSWTEEarchitectureOSApplicationApplicationEnclaved schedulerScheduler maintainscontrol overinterruptsScheduler ensuresfairnessAttackerapplicationSharedresourceResourcesApps accessshared resourcesDirect data accessSharedresourceRelationSession 5A: Control System Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1361scheduler is the only entity that has full control over handling any
system events, e.g. interrupts or violations. For this, the atomicity
monitor implements a notion of bounded atomicity and carefully
controls interrupt behavior during context switches, e.g., when
entering an enclave. The sofware-level enclaved scheduler is the
handler of all events on the system, and orchestrates the execution
flow of the system when events occur. All four components play
together to enable the scheduler to issue fair scheduling decisions.
We will now detail these four core pillars of our design.
3.1 TEE Architecture
We build Aion around TEEs that provide memory isolation for
dynamic enclaves. From the investigated TEEs, TyTAN [7] and
Sancus [30], support these requirements natively.
In addition, Aion requires two additional features that need to
exist to design our security architecture. First, violations of the
TEE security policy should not result in a reset or in blocking the
system. A system reset is a common solution to violations since
illegal writes or reads from protected memory regions may only
be detected after the offending instructions has completed. If an
architecture detects a security violation after it occurred, a system
reset prevents any malicious code to use the result or side effect of
this access. In Aion, however, the platform must not be impacted
by any offending instruction but instead proceed with an exception
and hand control over to a handler of this violation. It is crucial
that offending instructions do not complete but are instead either
stopped or their effects rolled back before control is handed over
to a violation handler in constant time. As such, the handler of the
violation must not necessarily be privileged or trusted by any party.
Second, TEE-internal hardware operations must be interruptible.
While we discuss preempting enclaves in Section 3.2, some opera-
tions of the TEE architecture may need a large amount of cycles to
complete. Common examples of such operations are cryptographic
operations or the enabling or disabling of enclaves. Adversaries in
Aion are capable of arbitrary code execution and may attempt to
stall the system by issuing long-running cryptographic operations.
To prevent this, the TEE architecture must support the preemp-
tion of these operations. A successful or unsuccessful completion
must be notified by the hardware to the issuer of the operation
when control is resumed so that benign applications can restart
the operation in case of an interrupt; the policy for this must be
part of the hardware-software contract to enable developers to de-
sign enclaves that can make progress. Additionally, the hardware
must ensure that any cryptographic state is cleared and removed
from memory before interrupts are handled to prevent information
leakage. We implement our prototype of Aion on Sancus which
builds on MSP430 and has no cache or advanced microarchitecture.
Therefore, execution time is fully deterministic and only depends
on the instruction type and memory accesses. This simplifies our
approach but does not limit generality: Aion can be implemented
on any TEE-platform for which a WCET-analysis is possible. De-
termining upper bounds for the execution of scheduler operations
is the only strict requirement for Aion.
Also note, that while remote attestation may on first glance
not seem essential to Aion, attestation in Aion provides remote
stakeholders with the guarantee that (i) the right code is loaded
Figure 3: High-level flow of the exception engine. Two main
paths are distinguished: interrupts and violations. On inter-
rupts, context state is saved in the enclave. On violations, a
marker is first set in the CPU state.
untampered in a protected application enclave; (ii) the scheduler
enclave was loaded correctly, ensuring a fair availability policy; and
(iii) expected implementations of shared drivers are used. We thus
see attestation as an integral part of how Aion would be used in
practice.
3.2 Exception Engine
Whenever an interrupt or a policy violation occurs, the exception
engine in Aion is responsible for switching from the current job to
the enclaved scheduler. This ensures that the scheduler can always
fairly schedule the next application and ensure that all applications
maintain a fair share of the resource CPU time. In its operation, the
exception engine distinguishes between two types of exceptions:
interrupts due to periodic or aperiodic events and violations of
platform policies. Figure 3 shows a high-level flow of the exception
engine. Note, that violations are always handled immediately after
the offending instruction completes but the handling of interrupts
is delayed by the platform-specific global interrupt-enable flag.
An immediate handling of violations ensures that even in atomic
sections, dangerous violations are immediately handled and the