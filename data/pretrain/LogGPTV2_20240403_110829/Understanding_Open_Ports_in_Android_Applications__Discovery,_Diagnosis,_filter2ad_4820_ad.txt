### IP Address and Security Concerns

When the `addr` parameter is set to `null`, the default behavior is to use the ANY IP address. This legacy design in the original Java SDK might be suitable for open ports on PCs, but it is not ideal for mobile devices. As seen in Table I, many Android open ports are intended for local use. We consider this type of "convenient" usage potentially insecure because it can inadvertently increase the attack surface.

Given the potential security risks associated with such API usage, our second objective is to identify the precise parameter values used in all open-port constructions. This will allow us to evaluate the extent to which Android developers adopt these convenient but potentially insecure Java APIs. Note that these parameters can evolve across different objects, fields, arrays, and involve arithmetic operators and other Android APIs. We need to understand all these semantics and calculate a complete representation of the parameters, rather than just capturing isolated constants as in SAAF [51]. Additionally, it is crucial for our analysis to be efficient and scalable when dealing with a large number of Android apps.

### ServerSocket Constructor APIs

The following are the relevant ServerSocket constructor APIs:

```java
// API #1-#3
ServerSocket(int port);
ServerSocket(int port, int backlog);
ServerSocket(int port, int backlog, InetAddress addr);

// API #4-#6
SSLServerSocket(int port);
SSLServerSocket(int port, int backlog);
SSLServerSocket(int port, int backlog, InetAddress addr);

// API #7-#9
//class ServerSocketFactory:
createServerSocket(int port);
createServerSocket(int port, int backlog);
createServerSocket(int port, int backlog, InetAddress addr);

// API #10-#11
//ServerSocket socket = new ServerSocket();
socket.bind(SocketAddress addr);
socket.bind(SocketAddress addr, int backlog);
```

### OPTool’s Design and Implementation

We designed and implemented a new static analysis tool called **OPTool** to address these challenges. Instead of generating traditional slicing paths, OPTool uses a structure called **backward slicing graph (BSG)** to simultaneously track multiple parameters (e.g., `port` and `addr`) and capture a complete representation of the parameters. On the generated BSGs, OPTool performs graph traversal and conducts semantic-aware constant propagation. We also included a preprocessing step in OPTool to quickly search for open-port constructions, enhancing its scalability.

#### Locating Open-Port Constructions

This can be achieved by searching for the `accept()` API of `ServerSocket` and `ServerSocketChannel` classes, which are the only Android APIs to open TCP ports in Java. To enable fast searching and handle the multidex issue (where Android apps split their bytecodes into multiple DEX files to overcome the limit of 65,536 methods [12]), we use `dexdump` [15] to dump app bytecodes into a combined plaintext file and then perform the search. For native code, OPTool searches each `.so` file for the four socket system calls.

#### Backward Parameter Slicing via BSG

After locating the open-port constructions, we apply backward slicing on their parameters to generate BSGs. Each BSG corresponds to one target open-port call site and records the slicing information of all its parameters and paths. The BSG enables OPTool to track multiple parameters in a single backward run and makes our analysis flow- and context-sensitive. For example, the process of constructing the BSG naturally records the calling context when analyzing the target of a function call, allowing it to always jump back to the original call site. OPTool is also sensitive to arrays and fields. With the help of forward constant propagation, our backtracking just needs to taint both the instance field (or the array index) and its class object. Handling static fields does not require extra help but requires adding their statically uninvoked methods (where static fields get initialized) into the BSG.

#### Semantic-Aware Constant Propagation

After performing inter-procedural backward slicing, we calculate the complete parameter representation in a forward manner. Besides the instruction semantics in typical forward propagation [48], we handle the following semantics:

- **Maintaining Object Semantics**: To determine the correct object for each instance field, we perform points-to analysis [54] for all new statements in the BSG. Specifically, we define an `InstanceObj` structure and initialize a unique `InstanceObj` object for each new statement. We then propagate the `InstanceObj` objects along the path and update their member fields if necessary. As a result, whenever a target instance field is to be resolved, we can retrieve its corresponding `InstanceObj` and extract its value. Arrays and ICC objects can be treated similarly with our modeling of the Intent APIs for updating/retrieving the ICC object fields.
- **Modeling Arithmetic and API Semantics**: We model not only the five major arithmetic operators (`+`, `-`, `*`, `/`, and `%`) but also mathematical APIs like `Math.abs(int)` and `Math.random()` (via a special constant “RANDOM”). We also model all other encountered Android framework APIs, including IP address APIs, Integer and String APIs, and SharedPreferences APIs. There are a few APIs that are statically unresolvable, such as retrieving values from user interfaces via `EditText.getText()` and from databases via `Cursor.getInt(int)`. We save these cases to the final results without resolving their parameters.

#### Removing Dead Ports and Resolving SDK Names

An important feature in OPTool is the removal of "dead ports" that are never executed. We analyze port liveness in three steps: during backward slicing, we perform reachability analysis to exclude slices that cannot trace back to the app entry functions. In the forward propagation, we consider ports with unresolvable parameters as dead ports. In the post-processing step, we exclude dead ports with illegal parameters, such as those with a port parameter of -1.

Resolving non-trivial SDK names is challenging due to obfuscation. However, we have had success with:
1. Extracting the name of each "sink" class that calls the `ServerSocket` constructor directly, e.g., non-obfuscated APIs.
2. Extracting Android Logcat tags [6] of the sink classes, which may embed plaintext class names, as demonstrated in Google's official document [6].
3. Correlating different apps' open-port parameters and tags, e.g., most Alibaba AMap SDK [4] classes are obfuscated, but we can still find non-obfuscated instances like `com.amap.api.location.core.SocketService`.

### Static Analysis Experiments

As explained in Section III-C3, we analyzed two sets of apps:
1. The top 9,900 apps across 33 Google Play categories.
2. 1,027 apps from AndroZoo confirmed with TCP open ports.

Using the first set, we identified 1,061 apps and their corresponding 1,453 TCP open ports. Figure 5 shows the percentage of open-port apps in each Google Play category, ranging from 2.67% in "Libraries & Demo" to 26.67% in "Tools". After excluding Facebook SDKs, the percentage drops to between 0.33% in "Art & Design" and 12.0% in "Video Players & Editors".

For the second set, OPTool flagged 671 apps with potential Java open-port constructions and 98 apps with native open-port constructions. Among the remaining 258 (25.1%) apps, 110 implement open ports via dynamic code loading, and the rest (148 apps) are likely equipped with advanced code obfuscation. For the 671 apps analyzed by OPTool, it successfully recovered the parameters of 459 apps and identified 48 statically unresolvable cases. Other cases are mainly due to complex implicit flows that OPTool currently cannot address, even with state-of-the-art methods [40], [42], [44].

### Detection of Open-Port SDKs

Out of the 1,520 apps with open ports, we detected 13 open-port SDKs affecting at least three apps each. Table III lists their details, including class patterns, Android Logcat tags, raw open-port parameters, and the number of affected apps. These SDKs are invoked in 1,018 apps, and only 581 open-port apps are not affected at all. Thus, 61.8% of the 1,520 open-port apps are solely due to SDKs, with Facebook SDK being the major contributor. Even after excluding the impact of Facebook SDK, 117 (16.8%) open-port apps are solely due to SDKs. These results indicate that SDK-introduced open ports are significant and should be considered seriously in terms of their necessity.

### Identification of Insecure API Usages

We further analyzed the 581 apps whose open ports are not introduced by SDKs, and their corresponding 869 open ports. We found that 515 port constructions did not set the IP `addr` parameter, and 96 ports set it as `null`. Hence, the default setting of `addr`, i.e., the ANY IP address, is automatically used for these ports. In total, these convenient API usages account for 611 open ports from 390 apps (67.1%). Furthermore, 164 of these ports (from 120 apps) have their port parameter set as random, which has nearly no chance of accepting external connections. Thus, binding to the ANY IP address clearly increases their attack surfaces. This translates to a (lower bound) estimation of 26.8% of the 611 convenient API usages being insecure, and correspondingly 20.7% (120/581) of open-port apps adopting convenient but insecure API usages.

Such insecure coding practices are not limited to app developers but also SDK producers. In Table III, six SDKs make a random port yet use the default `addr` parameter, binding the port to ANY IP addresses. Hence, Google may reconsider the design of `ServerSocket` APIs to enhance their security at the API level.

### Security Assessment

In the last phase of our pipeline (Figure 1), we perform comprehensive security assessment of open ports in three directions: vulnerability analysis, denial-of-service attack evaluation, and inter-device connectivity measurement.

#### Vulnerability Analysis of Open Ports

Based on our experience analyzing open-port vulnerabilities over more than two years, it is easy for open-port apps to become vulnerable, especially for TCP open ports that do not provide system networking services like UDP open ports (as explained in Section III-C1). Instead of developing tools to detect individual vulnerable open ports, we uncover vulnerability patterns in popular apps that are more representative and difficult to detect. Our vulnerability analysis is different from previous work [52] that uses pre-defined patterns. We explore all possible ways in which an open port could become vulnerable, as long as they fit our threat model discussed in Section II, by performing in-depth reverse engineering via the state-of-the-art JEB Android decompiler [21] and extensive dynamic testing.

Table IV summarizes the five vulnerability patterns we have identified. The first two have been reported in [52], while the third is a new variant of the crash vulnerability mentioned in traditional Android app security research [49]. The last two have not been reported and are specific to open ports.