# Cisco Confidential
© 2013-2014 Cisco and/or its affiliates. All rights reserved.

## Stitching Numbers

### Finding Large Numbers in Memory
- **Challenge:** It is not easy to find "big" numbers in memory.
- **Context:** Shellcode chunks are essentially large numbers.
- **Example:** Searching for `0x01020304` in the `.text` section using GDB and PEDA:
  ```bash
  someone@something:~/somewhere$ gdb hw
  (gdb) peda searchmem 0x01020304 .text
  Searching for '0x01020304' in: .text ranges
  Not found
  ```

### Scanning Memory Regions in ELF
- **RO Segment (Read-Only):** A good candidate as it contains sections like `.text` and `.rodata`.
  - **Advantages:**
    - Read-only, so it should not change at runtime.
    - If not Position Independent Executable (PIE), addresses are constant.
- **Approach:**
  - Track all numbers found and their addresses.
  - Find the best combination of numbers that add up to a chunk.

### The Coin Change Problem
- **Definition:** This problem involves finding the most efficient way to return change.
- **Example:**
  - **Euro Currency:**
    - 0.75€ change:
      - 1 x 50 cent coin
      - 1 x 20 cent coin
      - 1 x 5 cent coin
  - **Dollar Currency:**
    - 0.75$ change:
      - 1 x half-dollar coin
      - 1 x quarter
- **Application:**
  - Our set of "coins" are the numbers found in memory.

### Solving the Problem
- **Ideal Solution:**
  - **Dynamic Programming:** Finds the most efficient solution but can be memory-intensive for large numbers.
  - **Sub-Optimal Solution:**
    - **Greedy Approach:**
      - No memory footprint.
      - Can miss the optimal solution.
      - Look for the largest number that fits, then proceed with smaller numbers.
- **Example:**
  - 75 cents change:
    - Try 2 euros: ✖
    - Try 1 euro: ✖
    - Try 50 cents: ✔
    - Try 20 cents: ✔
    - Try 10 cents: ✖
    - Try 5 cents: ✔
    - **Solution Found:**
      - 50 cents + 20 cents + 5 cents = 75 cents

### Introducing Ropnum
- **Tool Description:**
  - Finds a solution to the coin change problem by providing the address of numbers that solve it.
  - Features:
    - Ignore addresses with null-bytes.
    - Exclude numbers from the coin change solver.
    - Print all addresses pointing to a number.
- **Usage Example:**
  ```bash
  someone@something:~/somewhere$ ropnum.py -n 0x01020304 -S -s .text hw > /dev/null
  Using segments instead of sections to perform number lookups.
  Using sections [.text] for segment lookup.
  Found loadable segment starting at [address 0x08048000, offset 0x00000000].
  Found a solution using 5 operations: [16860748, 47811, 392, 104, 5]
  0x08048002 => 0x0101464c 16860748
  0x0804804c => 0x00000005 5
  0x080482f6 => 0x00000068 104
  0x08048399 => 0x0000bac3 47811
  0x08048500 => 0x00000188 392
  ```

### Putting It Together
- **Steps:**
  - Cut and order 4-byte shellcode chunks.
  - Add numbers found in memory until you reach a chunk.
  - Dump the chunk to a stack frame.
  - Repeat until the shellcode is complete.
  - Transfer control to the shellcode.
- **Tool:** Available at https://github.com/alexmgr/numstitch

### Summary
- **Ropstitch:**
  - **Functionality:**
    - Takes an input shellcode and a frame address.
    - Handles details like endianness, 2's complement, and padding.
    - Generates Python code to create the payload.
  - **Additional Features:**
    - Adds an mprotect RWE stub frame before the stack.
    - Starts with an arbitrary accumulator register value.
    - Looks up numbers in sections or segments.
- **Example Usage:**
  ```bash
  someone@something:~/somewhere$ ropstitch.py -x "\x6a\x31\x58\x99\xcd\x80\x89\xc3\x89\xc1\x6a\x46\x58\xcd\x80\xb0\x0b\x52\x68\x6e\x2f\x73\x68\x68\x2f\x2f\x62\x69\x89\xe3\x89\xd1\xcd\x80" -f 0x08049110 -S -s .text -p abinary > /dev/null
  ```

### Pros and Cons
- **Pros:**
  - Can encode any shellcode (no null-byte problem).
  - All numbers are co-located in a particular address range.
  - Lower 2 bytes can be controlled by excluding certain values.
  - Not affected by RELRO, ASLR, or X^W.
- **Cons:**
  - Payloads can be large, depending on the availability of numbers.
  - Requires a big stage-0.

### Future Work
- **Search for Numbers Not Subject to ASLR:**
  - Check binaries with PIE enabled.
- **Gadget Search in New Versions of libc:**
  - May yield a new approach.
- **Dynamic Programming for Large Numbers:**
  - Challenging but worth pursuing.
- **64-bit Support:**
  - Easy, numbers are just bigger.
- **Mixed Approach:**
  - String copying for available bytes.
  - Number stitching for others.
- **Contribution to ROPgadget:**
  - If they are interested.

### Contact Details
- **Email:** PI:EMAIL
- **GitHub:** https://github.com/alexmgr/numstitch
- **Author:** Alex Moneger

### Questions?
Thank you.