Subject: Seeking Advice on Optimizing a Python Script for 3D Point Cloud Processing

Hello Everyone,

I hope this is an appropriate platform to seek guidance, as it's the one I'm most familiar with. I am currently working on improving the efficiency of a Python script that processes a 3D point cloud. The current implementation relies heavily on "for loop" operations, and I aim to leverage Numpy to expedite the process.

### Overview
- **Objective:** Enhance the performance of a Python script that operates on a 3D point cloud.
- **Data Structure:** The 3D model is represented as a set of 3D points (x, y, z coordinates) stored in a NumPy array of shape (188706, 3).

### Current Implementation
The script involves computing Euclidean distances between points, but only for those points where the z-coordinates are equal. This requires splitting the array based on changes in the z-coordinate.

### Challenges
1. **Splitting the Array:**
   - **Current Approach:** 
     ```python
     PtCloud = np.split(PtCloud, np.where(np.diff(PtCloud[:,2]) != 0)[0] + 1)
     ```
     This results in a list of arrays, each containing points with the same z-coordinate.
   - **Issue:** The resulting list of arrays necessitates the use of a for loop to process each sub-array, which I would like to avoid if possible.

2. **Recursive Check and Discretization:**
   - **Objective:** Implement a recursive check and discretization step without using for loops.
   - **Example Behavior:** [Link to Excel representation](https://user-images.githubusercontent.com/60317740/74780334-ab927000-529f-11ea-9f3c-021187a205a1.JPG)

### Example Code Snippet
```python
def AddEquidistantPoints(currentRow, previousRow, subdivisions):
    # Example function to add equidistant points
    dist = np.linalg.norm(currentRow - previousRow)
    return dist
```

### Request for Help
I would greatly appreciate any advice or suggestions on how to:
1. Efficiently split the array and process points with the same z-coordinate without resorting to for loops.
2. Implement the recursive check and discretization step in a more efficient manner.

Thank you in advance for your help!

Best regards,
Herv√©