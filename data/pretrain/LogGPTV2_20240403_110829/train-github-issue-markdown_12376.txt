Hi all,  
Maybe this is not the right place to ask for hints but is the place that I
know ;)
In order to improve the efficiency of a python script, I am trying to convert
a script based on a lot of "for loop" operations on a points cloud thanks to
Numpy to speed up the process.
![PointCloud2](https://user-
images.githubusercontent.com/60317740/74780354-b77e3200-529f-11ea-922d-dcec62d36955.JPG)
In a nutshell, I have a 3d model represented as a set of 3d points (x,y,z
coordinates) contained in a np.array (dimension : (188706, 3))
    [[168.998 167.681   0.]     0.5mm:
        dist = AddEquidistantPoints(currentRow, previousRow, 10) #10 --> nb subdivisions
But my first issue is those euclidean distances have only to be computed on
points where z coordinates are equals. Have I to split my array when z
coordinate are not equals ?  
With :
    PtCloud = np.split(PtCloud, np.where(np.diff(PtCloud[:,2])!=0)[0]+1)
Which gives me a list of arrays so I suppose I will have unfortunately to use
a for loop...
Here is the proper behavior represented with Excel:  
![exemple](https://user-
images.githubusercontent.com/60317740/74780334-ab927000-529f-11ea-9f3c-021187a205a1.JPG)
And my second problem is related to the recurcive check and discretization
step since I don't know how to implement it with this particular case. I
wonder if there is a way to do it without any for loops.
So I would be very delighted if anyone could help me solve this challenge as I
am currently "stuck".  
It starts to be very challenging for me.
Thanks in advance,  
Herv√©