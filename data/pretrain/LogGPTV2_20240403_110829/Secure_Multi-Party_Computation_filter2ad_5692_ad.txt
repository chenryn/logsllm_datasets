### 4.6 Efficient and Practical MPC

The first two decades of research in Multi-Party Computation (MPC) primarily focused on feasibility: defining and proving security for various adversarial and network models, and determining the cryptographic and setup assumptions required to achieve MPC. The subsequent decade saw a significant body of research aimed at making MPC more efficient. Initial efforts were algorithmic, focusing on reducing the overhead of cryptographic primitives. Subsequently, other critical issues were addressed, such as memory and communication optimization, and the utilization of hardware instructions like AES-NI.

Since most general MPC protocols require the circuit representation of the function being computed, and manually constructing circuits is challenging, specialized MPC compilers from code to circuits were developed. These compilers are designed to be sensitive to the unique properties of MPC. For instance, in many protocols, XOR gates can be computed almost for free [24], whereas AND/OR gates are more costly. Therefore, these compilers aim to minimize the number of AND gates, even if it means using more XOR gates. Additionally, some protocols' computational cost is dominated by the circuit size, while others are dominated by the circuit depth. Consequently, some compilers focus on generating the smallest possible circuit, while others aim for the lowest depth. A comprehensive survey of general-purpose compilers for MPC and their usability can be found in [19].

These advancements collectively led to performance improvements of several orders of magnitude over just a few years, making MPC fast enough for practical use in a wide range of applications. For a detailed description of some of the most significant advancements, see [15, Chapter 4].

### 5. MPC Use Cases

There are numerous theoretical examples where MPC can be beneficial, such as comparing no-fly lists in a privacy-preserving manner, enabling private DNA comparisons for medical and other purposes, and gathering statistics without revealing individual data. Until recently, these theoretical examples were the primary evidence of MPC's potential benefits. However, the current situation is different, with MPC now being used in multiple real-world applications, and its usage is rapidly growing.

We will conclude this review with some examples of MPC applications that have been deployed:

#### Boston Wage Gap [25]

In 2017, the Boston Women’s Workforce Council used MPC to compute statistics on the compensation of 166,705 employees across 114 companies, representing approximately 16% of the Greater Boston area workforce. The use of MPC was essential because companies were unwilling to share their raw data due to privacy concerns. The results revealed that the gender wage gap in the Boston area is even larger than previously estimated by the U.S. Bureau of Labor Statistics. This example demonstrates the potential of MPC for social good.

#### Advertising Conversion [20]

Google uses MPC to compute accurate conversion rates from advertisements to actual purchases. To do this, Google calculates the intersection between the list of people shown an advertisement and the list of people who actually purchased the advertised goods. When the purchase cannot be tracked online, Google and the advertiser must share their respective lists to compute the intersection size. To ensure privacy, Google utilizes a protocol for privacy-preserving set intersection. Although this protocol is not the most efficient available today, it is simple and meets their computational requirements.

#### MPC for Cryptographic Key Protection [38]

As described in Section 4.4, threshold cryptography allows cryptographic operations (such as decryption and signing) to be performed without the private key being held in any single place. Several companies are using threshold cryptography as an alternative to legacy hardware for protecting cryptographic keys. In this application, MPC is not run between different parties holding private information. Instead, a single organization uses MPC to generate keys and perform cryptographic operations without the key ever being in a single location where it can be stolen. By distributing key shares across different environments, it becomes very difficult for an adversary to steal all shares and obtain the key. In this context, the proactive model described in Section 2.2 is the most suitable. Another use of MPC in this context is for protecting the signing keys used for cryptocurrencies and other digital assets. Here, the ability to define general quorums enables the cryptographic enforcement of strict policies for approving financial transactions or sharing keys between custody providers and clients.

#### Government Collaboration [39]

Different governmental departments hold information about citizens, and significant benefits can be gained by correlating this information. However, privacy risks often prevent governments from pooling private information. For example, in 2000, Canada scrapped a program to pool citizen information due to criticism that they were building a "big brother database." Using MPC, Estonia collected encrypted income tax records and higher education records to analyze whether students who work during their degree are more likely to fail than those who focus solely on their studies. By using MPC, the government ensured that all data protection and tax secrecy regulations were followed without losing data utility.

#### Privacy-Preserving Analytics [40]

The use of machine learning is increasing rapidly in many domains. MPC can be used to run machine learning models on data without revealing the model (which contains valuable intellectual property) to the data owner, and without revealing the data to the model owner. Additionally, statistical analyses can be conducted between organizations for purposes such as anti-money laundering, risk score calculations, and more.

### 6. Discussion

Secure multi-party computation (MPC) is a prime example of the long-term success of research [36]. For the first 20 years of MPC research, there were no practical applications, and it was uncertain whether MPC would ever be used. In the past decade, the usability of MPC has undergone a radical transformation. MPC has not only become fast enough for practical use but has also received industry recognition and transitioned into a technology that is deployed in practice. Despite this progress, MPC still requires significant expertise to deploy, and further research breakthroughs are needed to make secure computation practical for large datasets and complex problems, and to make it easy to use for non-experts. The recent progress and the substantial amount of applied research being generated paint a positive future for MPC in practice. Alongside this, deep theoretical work in MPC continues, ensuring that applied MPC solutions stand on strong scientific foundations.

### References

1. Y. Aumann and Y. Lindell. Security Against Covert Adversaries: Efficient Protocols for Realistic Adversaries. In the Journal of Cryptology, 23(2):281-343, 2010 (extended abstract at TCC 2007).
2. D. Beaver, S. Micali, and P. Rogaway. The Round Complexity of Secure Protocols. In 22nd STOC, pages 503–513, 1990.
3. M. Ben-Or, S. Goldwasser, and A. Wigderson. Completeness Theorems for Non-Cryptographic Fault-Tolerant Distributed Computation. 20th STOC, 1988.
4. Z. Beerliová-Trubíniová and M. Hirt. Perfectly-Secure MPC with Linear Communication Complexity. TCC 2008, Springer (LNCS 4948), pages 213–230, 2008.
5. R. Canetti. Security and Composition of Multiparty Cryptographic Protocols. Journal of Cryptology, 13(1):143–202, 2000.
6. R. Canetti. Universally Composable Security: A New Paradigm for Cryptographic Protocols. In the 42nd FOCS, pages 136–145, 2001.
7. R. Canetti and A. Herzberg. Maintaining Security in the Presence of Transient Faults. In CRYPTO’94, Springer-Verlag (LNCS 839), pages 425–438, 1994.
8. R. Canetti, Y. Lindell, R. Ostrovsky, and A. Sahai. Universally Composable Two-Party and Multi-Party Computation. In the 34th STOC, pages 494–503, 2002. Full version available at http://eprint.iacr.org/2002/140.
9. D. Chaum, C. Crépeau, and I. Damgård. Multi-Party Unconditionally Secure Protocols. In the 20th STOC, pages 11–19, 1988.
10. K. Chida, D. Genkin, K. Hamada, D. Ikarashi, R. Kikuchi, Y. Lindell, and A. Nof. Fast Large-Scale Honest-Majority MPC for Malicious Adversaries. In CRYPTO 2018, Springer (LNCS 10993), pages 34–64, 2018.
11. R. Cleve. Limits on the Security of Coin Flips when Half the Processors are Faulty. In the 18th STOC, pages 364–369, 1986.
12. I. Damgård and J. Nielsen. Scalable and Unconditionally Secure Multiparty Computation. In CRYPTO 2007, Springer (LNCS 4622), pages 572–590, 2007.
13. I. Damgård, V. Pastro, N.P. Smart, and S. Zakarias. Multiparty Computation from Somewhat Homomorphic Encryption. In CRYPTO 2012, Springer (LNCS 7417), pages 643–662, 2012.
14. J. Doerner, Y. Kondi, E. Lee, and A. Shelat. Threshold ECDSA from ECDSA Assumptions: The Multiparty Case. In IEEE Symposium on Security and Privacy 2019, pages 1051–1066, 2019.
15. D. Evans, V. Kolesnikov, and M. Rosulek. A Pragmatic Introduction to Secure Multi-Party Computation. NOW Publishers, 2018.
16. J. Furukawa and Y. Lindell. Two-Thirds Honest-Majority MPC for Malicious Adversaries at Almost the Cost of Semi-Honest. In the 26th ACM CCS, pages 1557–1571, 2019.
17. R. Gennaro and S. Goldfeder. Fast Multiparty Threshold ECDSA with Fast Trustless Setup. In the 25th ACM CCS 2018, pages 1179–1194, 2018.
18. O. Goldreich, S. Micali, and A. Wigderson. How to Play any Mental Game – A Completeness Theorem for Protocols with Honest Majority. In the 19th STOC, pages 218–229, 1987. Details in Foundations of Cryptography: Volume 2 – Basic Applications (Cambridge University Press 2004), by Oded Goldreich.
19. M. Hastings, B. Hemenway, D. Noble, and S. Zdancewic. SoK: General Purpose Compilers for Secure Multi-Party Computation. In IEEE Symposium on Security and Privacy 2019, pages 1220–1237, 2019.
20. M. Ion, B. Kreuter, E. Nergiz, S. Patel, S. Saxena, K. Seth, D. Shanahan, and M. Yung. Private Intersection-Sum Protocol with Applications to Attributing Aggregate Ad Conversions. IACR Cryptology ePrint Archive, report 2017:738, 2017.
21. Y. Ishai, J. Kilian, K. Nissim, and E. Petrank. Extending Oblivious Transfers Efficiently. In CRYPTO 2003, Springer (LNCS 2729), pages 145–161, 2003.
22. Y. Ishai, M. Prabhakaran, and A. Sahai. Founding Cryptography on Oblivious Transfer – Efficiently. In CRYPTO 2008, Springer (LNCS 5157), pages 572–591, 2008.
23. V. Kolesnikov, R. Kumaresan, M. Rosulek, and N. Trieu. Efficient Batched Oblivious PRF with Applications to Private Set Intersection. In the 23rd ACM CCS, pages 818–829, 2016.
24. V. Kolesnikov and T. Schneider. Improved Garbled Circuit: Free XOR Gates and Applications. In ICALP 2008, Springer (LNCS 5126), pages 486–498, 2008.
25. A. Lapets, F. Jansen, K.D. Albab, R. Issa, L. Qin, M. Varia, and A. Bestavros. Accessible Privacy-Preserving Web-Based Data Analysis for Assessing and Addressing Economic Inequalities. In COMPASS 2018, 48:1–48:5, 2018.
26. Y. Lindell. Fast Secure Two-Party ECDSA Signing. In CRYPTO 2017, Springer (LNCS 10402), pages 613–644, 2017.
27. Y. Lindell and A. Nof. Fast Secure Multiparty ECDSA with Practical Distributed Key Generation and Applications to Cryptocurrency Custody. In the 25th ACM CCS, pages 1837–1854, 2018.
28. Y. Lindell and B. Pinkas. An Efficient Protocol for Secure Two-Party Computation in the Presence of Malicious Adversaries. In EUROCRYPT, pages 52–78. Springer, 2007.
29. J.B. Nielsen, P.S. Nordholt, C. Orlandi, and S.S. Burra. A New Approach to Practical Active-Secure Two-Party Computation. In CRYPTO 2012, Springer (LNCS 7417), pages 681–700, 2012.
30. R. Ostrovsky and M. Yung. How to Withstand Mobile Virus Attacks. In 10th PODC, pages 51–59, 1991.
31. B. Pinkas, M. Rosulek, N. Trieu, and A. Yanai. SpOT-Light: Lightweight Private Set Intersection from Sparse OT Extension. In CRYPTO 2019, Springer (LNCS 11694), pages 401–431, 2019.
32. B. Pinkas, T. Schneider, and M. Zohner. Scalable Private Set Intersection Based on OT Extension. In ACM Transactions on Privacy and Security, 21(2):7:1–35, 2018.
33. T. Rabin and M. Ben-Or. Verifiable Secret Sharing and Multi-Party Protocols with Honest Majority. In the 21st STOC, pages 73–85, 1989.
34. A. Shamir. How to Share a Secret. CACM, 22(11):612–613, 1979.
35. V. Shoup. Practical Threshold Signatures. In EUROCRYPT 2000, Springer (LNCS 1807), pages 207–220, 2000.
36. M. Vardi. The Long Game of Research. CACM, 62(9):7, 2019.
37. A. Yao. How to Generate and Exchange Secrets. 27th FOCS, pages 162–167, 1986.
38. Unbound Tech. (www.unboundtech.com), Sepior (sepior.com), and Curv (www.curv.co).
39. Sharemind, https://sharemind.cyber.ee.
40. Duality, https://duality.cloud.