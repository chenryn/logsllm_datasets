4.6 Eﬃcient and Practical MPC
The ﬁrst twenty years of MPC research focused primarily on feasibility: how to deﬁne and prove
security for multiple adversarial and network models, under what cryptographic and setup assump-
tions it is possible to achieve MPC, and more. The following decade saw a large body of research
around making MPC more and more eﬃcient. The ﬁrst steps of this process were purely algorith-
mic and focused on reducing the overhead of the cryptographic primitives. Following this, other
issues were considered that had signiﬁcant impact: the memory and communication, utilisation of
hardware instructions like AES-NI, and more. In addition, since most general protocols require the
circuit representation of the function being computed, and circuits are hard to manually construct,
special-purpose MPC compilers from code to circuits were also constructed. These compilers are
tailored to be sensitive to the special properties of MPC. For example, in many protocols XOR
gates are computed almost for free [24], in contrast to AND/OR gates that cost. These compilers
therefore minimise the number of AND gates, even at the expense of considerably more XOR gates.
In addition, the computational cost of some protocols is dominated by the circuit size, while in
others it is dominated by the circuit depth. Thus, some compilers aim to generate the smallest
circuit possible, while others aim to generate a circuit with the lowest depth. See [19] for a survey
on general-purpose compilers for MPC and their usability. The combination of these advancements
led to performance improvements of many orders of magnitude in just a few years, paving the way
for MPC to be fast enough to be used in practice for a wide variety of problems. See [15, Chapter
4] for a description of a few of the most signiﬁcant of these advancements.
5 MPC Use Cases
There are many great theoretical examples of where MPC can be helpful. It can be used to compare
no-ﬂy lists in a privacy-preserving manner, to enable private DNA comparisons for medical and other
purposes, to gather statistics without revealing anything but the aggregate results, and much more.
Up until very recently, these theoretical examples of usage were almost all we had to say about the
potential beneﬁts of MPC. However, the situation today is very diﬀerent. MPC is now being used
in multiple real-world use cases, and usage is growing fast.
We will conclude this review paper with some examples of MPC applications that have been
actually deployed.
Boston wage gap [25]. The Boston Women’s Workforce Council used MPC in 2017 in order
to compute statistics on the compensation of 166,705 employees across 114 companies, comprising
roughly 16% of the Greater Boston area workforce. The use of MPC was crucial, since companies
would not provide their raw data due to privacy concerns. The results showed that the gender gap
in the Boston area is even larger than previously estimated by the U.S. Bureau of Labor Statistics.
This is a powerful example demonstrating that MPC can be used for social good.
Advertising conversion [20]. In order to compute accurate conversion rates from advertisements
to actual purchases, Google computes the size of the intersection between the list of people shown
an advertisement to the list of people actually purchasing the advertised goods. When the goods
are not purchased online and so the purchase connection to the shown advertisement cannot be
tracked, Google and the company paying for the advertisement have to share their respective lists
in order to compute the intersection size. In order to compute this without revealing anything but
the size of the intersection, Google utilises a protocol for privacy-preserving set intersection. The
protocol used by Google is described in [20]. Although this protocol is far from the most eﬃcient
known today, it is simple and meets their computational requirements.
MPC for cryptographic key protection [38]. As described in Section 4.4, threshold cryp-
tography provides the ability to carry out cryptographic operations (like decryption and signing)
without the private key being held in any single place. A number of companies are using threshold
cryptography as an alternative to legacy hardware for protecting cryptographic keys. In this ap-
plication, MPC is not run between diﬀerent parties holding private information. Rather, a single
organisation uses MPC to generate keys and compute cryptographic operations, without the key
ever being in a single place where it can be stolen. By placing the key shares in diﬀerent environ-
ments, it is very hard for an adversary to steal all shares and obtain the key. In this setting, the
proactive model described in Section 2.2 is the most suitable. Another use of MPC in this context is
for protecting the signing keys used for protecting cryptocurrencies and other digital assets. Here,
the ability to deﬁne general quorums enables the cryptographic enforcement of strict policies for
approving ﬁnancial transactions, or to share keys between custody providers and clients.
Government collaboration [39]. Diﬀerent governmental departments hold information about
citizens, and signiﬁcant beneﬁt can be obtained by correlating that information. However, the
privacy risks involved in pooling private information can prevent governments from doing this.
For example, in 2000, Canada scrapped a program to pool citizen information, under criticism
that they were building a “big brother database”. Utilising MPC, Estonia collected encrypted
income tax records and higher education records to analyse if students who work during their
degree are more likely to fail than those focusing solely on their studies. By using MPC, the
government was guaranteed that all data protection and tax secrecy regulations were followed
without losing data utility.
Privacy-preserving analytics [40]. Machine learning usage is increasing rapidly in many do-
mains. MPC can be used to run machine learning models on data without revealing the model
(which contains precious intellectual property) to the data owner, and without revealing the data
to the model owner. In addition, statistical analyses can be carried out between organisations for
the purpose of anti money laundering, risk score calculations, and more.
6 Discussion
Secure multiparty computation is a fantastic example of success in the long game of research [36].
For the ﬁrst 20 years of MPC research, no applications were in sight, and it was questionable whether
or not MPC would ever be used. In the past decade, the state of MPC usability has undergone a
radical transformation. In this time, MPC has not only become fast enough to be used in practice,
but it has received industry recognition and has made the transition to a technology that is deployed
in practice. MPC still requires great expertise to deploy, and additional research breakthroughs are
needed to make secure computation practical on large data sets and for complex problems, and to
make it easy to use for non-experts. The progress from the past few years, and the large amount of
applied research now being generated paints a positive future for MPC in practice. Together with
this, deep theoretical work in MPC continues, ensuring that applied MPC solutions stand on strong
scientiﬁc foundations.
References
1. Y. Aumann and Y. Lindell. Security Against Covert Adversaries: Eﬃcient Protocols for Realistic
Adversaries. In the Journal of Cryptology, 23(2):281-343, 2010 (extended abstract at TCC 2007 ).
2. D. Beaver, S. Micali and P. Rogaway. The Round Complexity of Secure Protocols. In 22nd STOC,
pages 503–513, 1990.
3. M. Ben-Or, S. Goldwasser and A. Wigderson. Completeness Theorems for Non-Cryptographic Fault-
Tolerant Distributed Computation. 20th STOC, 1988.
4. Z. Beerliov´a-Trub´ıniov´a and M. Hirt. Perfectly-Secure MPC with Linear Communication Complexity.
TCC 2008, Springer (LNCS 4948), pages 213–230, 2008.
5. R. Canetti. Security and Composition of Multiparty Cryptographic Protocols. Journal of Cryptology,
13(1):143–202, 2000.
6. R. Canetti. Universally Composable Security: A New Paradigm for Cryptographic Protocols. In the
42nd FOCS, pages 136–145, 2001.
7. R. Canetti and A. Herzberg. Maintaining Security in the Presences of Transient Faults.
In
CRYPTO’94, Springer-Verlag (LNCS 839), pages 425–438, 1994.
8. R. Canetti, Y. Lindell, R. Ostrovsky and A. Sahai. Universally Composable Two-Party and
In the 34th STOC, pages 494–503, 2002. Full version available at
Multi-Party Computation.
http://eprint.iacr.org/2002/140.
9. D. Chaum, C. Cr´epeau and I. Damg˚ard. Multi-party Unconditionally Secure Protocols. In the 20th
STOC, pages 11–19, 1988.
10. K. Chida, D. Genkin, K. Hamada, D. Ikarashi, R. Kikuchi, Y. Lindell and A. Nof. Fast Large-Scale
Honest-Majority MPC for Malicious Adversaries. In CRYPTO 2018, Springer (LNCS 10993), pages
34–64, 2018.
11. R. Cleve. Limits on the Security of Coin Flips when Half the Processors are Faulty. In the 18th STOC,
pages 364–369, 1986.
12. I. Damg˚ard and J. Nielsen. Scalable and Unconditionally Secure Multiparty Computation. In CRYPTO
2007, Springer (LNCS 4622), pages 572–590, 2007.
13. I. Damg˚ard, V. Pastro, N.P. Smart and S. Zakarias. Multiparty Computation from Somewhat Homo-
morphic Encryption. In CRYPTO 2012, Springer (LNCS 7417), pages 643–662, 2012.
14. J. Doerner, Y. Kondi, E. Lee and a. shelat. Threshold ECDSA from ECDSA Assumptions: The
Multiparty Case. In IEEE Symposium on Security and Privacy 2019, pages 1051–1066, 2019.
15. D. Evans, V. Kolesnikov and M. Rosulek. A Pragmatic Introduction to Secure Multi-Party Computa-
tion. NOW Publishers, 2018.
16. J. Furukawa and Y. Lindell. Two-Thirds Honest-Majority MPC for Malicious Adversaries at Almost
the Cost of Semi-Honest. In the 26th ACM CCS, pages 1557–1571, 2019.
17. R. Gennaro and S. Goldfeder. Fast Multiparty Threshold ECDSA with Fast Trustless Setup. In the
25th ACM CCS 2018, pages 1179–1194, 2018.
18. O. Goldreich, S. Micali and A. Wigderson. How to Play any Mental Game – A Completeness Theorem
for Protocols with Honest Majority. In the 19th STOC, pages 218–229, 1987. Details in Foundations of
Cryptography: Volume 2 – Basic Applications (Cambridge University Press 2004), by Oded Goldreich.
19. M. Hastings, B. Hemenway, D. Noble and S. Zdancewic. SoK: General Purpose Compilers for Secure
Multi-Party Computation. In IEEE Symposium on Security and Privacy 2019, pages 1220–1237, 2019.
20. M. Ion, B. Kreuter, E. Nergiz, S. Patel, S. Saxena, K. Seth, D. Shanahan and M. Yung. Private
Intersection-Sum Protocol with Applications to Attributing Aggregate Ad Conversions. IACR Cryp-
tology ePrint Archive, report 2017:738, 2017.
21. Y. Ishai, J. Kilian, K. Nissim and E. Petrank. Extending Oblivious Transfers Eﬃciently. In CRYPTO
2003, Springer (LNCS 2729), pages 145–161, 2003.
22. Y. Ishai, M. Prabhakaran, A. Sahai. Founding Cryptography on Oblivious Transfer – Eﬃciently. In
CRYPTO 2008, Springer (LNCS 5157), pages 572–591, 2008.
23. V. Kolesnikov, R. Kumaresan, M. Rosulek and N. Trieu. Eﬃcient Batched Oblivious PRF with Ap-
plications to Private Set Intersection. In the 23rd ACM CCS, pages 818–829, 2016.
24. V. Kolesnikov and T. Schneider. Improved Garbled Circuit: Free XOR Gates and Applications. In
ICALP 2008, Springer (LNCS 5126), pages 486–498, 2008.
25. A. Lapets, F. Jansen, K.D. Albab, R. Issa, L. Qin, M. Varia and A. Bestavros. Accessible Privacy-
Preserving Web-Based Data Analysis for Assessing and Addressing Economic Inequalities. In COM-
PASS 2018, 48:1–48:5, 2018.
26. Y. Lindell. Fast Secure Two-Party ECDSA Signing. In CRYPTO 2017, Springer (LNCS 10402), pages
613–644, 2017.
27. Y. Lindell and A. Nof. Fast Secure Multiparty ECDSA with Practical Distributed Key Generation
and Applications to Cryptocurrency Custody. In the 25th ACM CCS, pages 1837–1854, 2018.
28. Yehuda Lindell and Benny Pinkas. An Eﬃcient Protocol for Secure Two-Party Computation in the
Presence of Malicious Adversaries. In EUROCRYPT, pages 52–78. Springer, 2007.
29. J.B. Nielsen, P.S. Nordholt, C. Orlandi and S.S. Burra. A New Approach to Practical Active-Secure
Two-Party Computation. In CRYPTO 2012, Springer (LNCS 7417), pages 681–700, 2012.
30. R. Ostrovsky and M. Yung. How to Withstand Mobile Virus Attacks. In 10th PODC, pages 51–59,
1991.
31. B. Pinkas, M. Rosulek, N. Trieu and A. Yanai. SpOT-Light: Lightweight Private Set Intersection from
Sparse OT Extension. In CRYPTO 2019, Springer (LNCS 11694), pages 401–431, 2019.
32. B. Pinkas, T. Schneider and M. Zohner. Scalable Private Set Intersection Based on OT Extension. In
ACM Transactions on Privacy and Security, 21(2):7:1–35, 2018.
33. T. Rabin and M. Ben-Or. Veriﬁable Secret Sharing and Multi-party Protocols with Honest Majority.
In the 21st STOC, pages 73–85, 1989.
34. A. Shamir. How to Share a Secret. CACM, 22(11):612–613, 1979.
35. V. Shoup. Practical Threshold Signatures. In EUROCRYPT 2000, Springer (LNCS 1807), pages 207–
220, 2000.
36. M. Vardi. The Long Game of Research. CACM, 62(9):7, 2019.
37. A. Yao. How to Generate and Exchange Secrets. 27th FOCS, pages 162–167, 1986.
38. Unbound Tech. (www.unboundtech.com), Sepior (sepior.com), and Curv (www.curv.co).
39. Sharemind, https://sharemind.cyber.ee.
40. Duality, https://duality.cloud.