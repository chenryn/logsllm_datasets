The above syntax will always build a 2D-index. To get the an n-dimensional index supported in PostGIS 2.0+ for the geometry type, you can create one using this syntax  
```  
CREATE INDEX [indexname] ON [tablename] USING GIST ([geometryfield] gist_geometry_ops_nd);  
```  
2、BRIN  
The syntax for building a BRIN index on a "geometry" column is as follows:  
```  
CREATE INDEX [indexname] ON [tablename] USING BRIN ( [geometryfield] );   
```  
The above syntax will always build a 2D-index. To get a 3d-dimensional index, you can create one using this syntax  
```  
CREATE INDEX [indexname] ON [tablename] USING BRIN ([geometryfield] brin_geometry_inclusion_ops_3d);  
```  
You can also get a 4d-dimensional index using the 4d operator class  
```  
CREATE INDEX [indexname] ON [tablename] USING BRIN ([geometryfield] brin_geometry_inclusion_ops_4d);  
```  
These above syntaxes will use the default number or block in a range, which is 128. To specify the number of blocks you want to summarise in a range, you can create one using this syntax  
```  
CREATE INDEX [indexname] ON [tablename] USING BRIN ( [geometryfield] ) WITH (pages_per_range = [number]);   
```  
Also, keep in mind that a BRIN index will only store one index value for a large number of rows. If your table stores geometries with a mixed number of dimensions, it's likely that the resulting index will have poor performance. You can avoid this drop of performance by choosing the operator class whith the least number of dimensions of the stored geometries  
Also the "geography" datatype is supported for BRIN indexing. The syntax for building a BRIN index on a "geography" column is as follows:  
```  
CREATE INDEX [indexname] ON [tablename] USING BRIN ( [geographyfield] );   
```  
## 如何选择GiST和BRIN索引  
从搜索需求、搜索速度两个方面来考虑。  
1、如果有kNN或者距离排序的查询需求。你只能使用 GiST索引。  
2、如果有几何特性（包含、在左边、右边、上、下等查询）可以使用GiST也可以使用BRIN。  
但是请注意BRIN要得到好的过滤效果，请对数据按BOX进行重排。这样得到的效果比GIST还要好。  
3、如果你很在意空间，或者在意数据写入的OVERHEAD，建议BRIN（考虑到空间相关性的前提下）。  
## 阿里云相关数据库产品  
[阿里云 RDS PostgreSQL](https://www.aliyun.com/product/rds/postgresql)          
[阿里云 HybridDB for PostgreSQL](https://www.aliyun.com/product/gpdb)          
## 小结  
PostgreSQL 1000万空间数据的GiST, BRIN索引对比：  
1、空间对比，BRIN存储的是块级BOX边界，非常节省空间。    
![pic](20170820_01_pic_003.jpg)   
2、写入时延对比，BRIN对写入几乎没有影响。    
![pic](20170820_01_pic_004.jpg)  
3、创建索引时延对比，创建BRIN索引特别快。    
![pic](20170820_01_pic_005.jpg)  
4、包含查询响应时间对比，BRIN索引，在数据物理存储空间线性的情况下，包含查询、KNN检索性能都特别好。    
![pic](20170820_01_pic_006.jpg)  
5、KNN检索性能对比，BRIN的KNN检索，通过包含以及SORT来实现。比GIST略差。      
![pic](20170820_01_pic_007.jpg)  
总之BRIN特别适合空间数据连续分布的数据，适合高速范围搜索（即使点查也至少返回一个数据块）。建议用户的GIS轨迹数据（历史静态数据），可以按时间分区，按GEOHASH重排，使用BRIN索引。      
而GIST适合任意分布的数据，支持更多的空间检索需求，并且在点查方面效果很好，但是空间占用大，给写入带来的overhead更大。适合更新频繁的当前状态数据的高效率检索。       
## 参考  
http://postgis.net/docs/manual-dev/using_postgis_dbmanagement.html#brin_indexes  
http://postgis.net/docs/manual-dev/ST_ClusterKMeans.html  
http://postgis.net/docs/manual-dev/ST_ClusterDBSCAN.html  
https://en.wikipedia.org/wiki/K-means_clustering  
https://blog.crunchydata.com/blog/the-many-spatial-indexes-of-postgis  
[《蜂巢的艺术与技术价值 - PostgreSQL PostGIS's hex-grid》](../201701/20170124_01.md)    
[《PostgreSQL 物联网黑科技 - 瘦身几百倍的索引(BRIN index)》](../201604/20160414_01.md)    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")