# Oscar: A Practical Page-Permissions-Based Scheme for Thwarting Dangling Pointers

**Authors:**
- Thurston H.Y. Dang, University of California, Berkeley
- Petros Maniatis, Google Brain
- David Wagner, University of California, Berkeley

**Publication:**
- Proceedings of the 26th USENIX Security Symposium, August 16–18, 2017, Vancouver, BC, Canada
- ISBN 978-1-931971-40-9
- [Link to the paper](https://www.usenix.org/conference/usenixsecurity17/technical-sessions/presentation/dang)

## Abstract

Accessing memory after it has been freed can lead to both data and control-flow exploits. Recent research on temporal memory safety has focused on explicit lock-and-key mechanisms or corrupting pointer values upon deallocation. Placing objects on separate pages and using page permissions to enforce safety is an older, well-known technique that has often been dismissed as too slow without thorough analysis. We show that both old and new techniques are conceptually instances of lock-and-key, and argue that, in principle, page permissions should be the most desirable approach. We validate this insight experimentally by designing, implementing, and evaluating Oscar, a new protection scheme based on page permissions. Unlike previous attempts, Oscar does not require source code, is compatible with standard and custom memory allocators, and works correctly with programs that fork. Additionally, Oscar performs favorably—often by more than an order of magnitude—compared to recent proposals, offering similar or lower runtime overhead and lower memory overhead than competing systems.

## 1. Introduction

A temporal memory error occurs when a program accesses memory that was allocated but has since been freed, potentially leading to access to another object. For example, consider a function pointer stored on the heap that points to `Elmo()` at address `0x05CADA`. If the pointer is used, deallocated, and then accessed again due to a bug, it creates a control-flow vulnerability. Between the deallocation (line 7) and the faulty reuse (line 10), some other code could allocate the same memory and fill it from an untrusted source, such as a network socket. When the deallocated pointer is invoked, the program will jump to whatever address is stored there, potentially hijacking control flow.

Heap temporal memory safety errors are increasingly important. Stack-allocated variables are easier to protect via static analysis, and stack use-after-free vulnerabilities are rare or difficult to exploit. Therefore, we focus on temporal memory safety for heap-allocated objects.

Various defenses have been proposed. A decade ago, Dhurjati and Adve suggested using page permissions and aliased virtual pages for protection. In their scheme, each allocated object is placed on a distinct virtual page, and when an object is deallocated, the corresponding virtual page is made inaccessible. Although combining this technique with static analysis led to reasonable performance, critics dismissed the general approach as impractical. Since then, researchers have proposed more elaborate techniques, such as CETS, DangSan, Dangling Pointer Nullification (DangNull), and FreeSentry, which rely on deeper static analysis and comprehensive instrumentation of heap operations. However, these schemes have yielded mixed results, including poor performance, partial protection, and incompatibility.

In this work, we first study past solutions, casting them as realizations of a lock-and-key protection scheme (Section 2). We argue that using page permissions to protect against dangling pointers, an implicit lock-and-key scheme with lock changes, is less brittle and complex, and has the potential for superior performance. We then develop Oscar, a new protection mechanism using page permissions, inspired by Dhurjati and Adve’s seminal work. Our contributions include:

- A detailed study of the overhead contributed by shared memory mappings, memory-protection system calls, and increased page table entries and virtual memory areas, using the standard SPEC CPU 2006 benchmarks (Section 3).
- Reducing the impact of system calls through careful amortization of virtual-memory operations and management of the virtual address space (Section 4).
- Extending Oscar to handle server workloads by supporting programs that fork children and custom memory allocators (Section 5).
- Experimental evaluation of Oscar using both SPEC CPU 2006 and the popular memcached service, showing that Oscar achieves superior performance while providing more comprehensive protection than prior approaches.

Our work demonstrates, both in principle and experimentally, that protection based on page permissions, previously thought impractical, may be the most promising solution for temporal memory safety. The simplicity of the scheme leads to excellent compatibility, deployability, and the lowest overhead. For example, on SPEC CPU, CETS and FreeSentry have 48% and 30% runtime overhead on hmmer, respectively, compared to our 0.7% overhead. On povray, DangNull has 280% overhead, while ours is <5%. While DangSan has similar runtime overhead, its memory overhead (140%) is higher than Oscar’s (61.5%). Our study of memcached shows that both standard and custom allocators can be addressed effectively with reasonable performance.

## 2. Lock-and-Key Schemes

Using memory after it has been freed can be seen as an authorization problem: pointers grant access to an allocated memory area, and once that area is no longer allocated, the pointers should no longer grant access. This can be described using a lock-and-key metaphor. In this section, we show how different published schemes map to this metaphor, explicitly and sometimes implicitly, and argue that page-permission-based protection may be the most promising approach for many workloads (see Table 1 for a summary).

### 2.1 Explicit Lock-and-Key: Change the Lock

In this scheme, each memory allocation is assigned a lock, and each valid pointer to that allocation is assigned the matching key. In Figure 1, the code is modified so that in line 1, the allocated object gets a new lock (e.g., 42), and the matching key is linked to the pointer (Figure 2). Similarly, in line 5, the key linked to `someFuncPtr` is copied to `callback`. The code is instrumented so that pointer dereferencing (lines 3 and 10) is preceded by a check that the pointer’s key matches the object’s lock. When the space is deallocated and reallocated to a new object, the new object is given a new lock (e.g., 43), and `userName` receives the appropriate key in line 8. The keys for `someFuncPtr` and `callback` no longer match the lock past line 7, avoiding use after free (Figure 3).

Since this scheme creates explicit keys (one per pointer), the memory overhead is proportional to the number of pointers. The scheme also creates one lock per object, but the number of objects is dominated by the number of pointers.

**Example Systems:**
- Compiler-Enforced Temporal Safety for C (CETS) [31] is an example of this scheme. CETS uses a disjoint metadata space with a separate entry for each pointer that stores the key and the lock location, avoiding changes to the program's memory layout.

### 2.2 Explicit Lock-and-Key: Revoke the Keys

Instead of changing the lock, one could revoke all keys upon reallocation. This requires tracking keys throughout memory. For example, freeing either `someFuncPtr` or `callback` should revoke the keys for both pointers (Figure 4). Instrumentation must maintain global metadata tracking all pointers to a given object, and this index must be updated at every relevant assignment (line 5). Deallocation (line 7) must be followed by looking up all pointers to that object, revoking (nullifying or otherwise invalidating) their keys. Revoking keys is harder than changing the lock, as it requires tracking key propagation.

**Example Systems:**
- To our knowledge, this has not been used for any published explicit lock-and-key scheme, but it segues to the next idea: revoking keys with implicit lock-and-key.

### 2.3 Implicit Lock-and-Key: Revoke the Keys

We can view a pointer as the key and the object as the lock. Instead of revoking a key from a separate explicit namespace, we can change the pointer’s value [27]. The relevant code instrumentation is similar to the explicit case. Upon allocation or pointer assignment, we update a global index tracking all pointers to each object. Upon deallocation, we find and corrupt the value of all pointers to the deallocated object (Figure 5), setting them to NULL. Pointer dereferences need not be instrumented, as the MMU performs the null check in hardware.

Although this scheme does not need to allocate memory for explicit lock or key fields, it does need to track the location of each pointer, meaning the physical memory overhead is at least proportional to the number of pointers.

**Example Systems:**
- DangNull’s dangling pointer nullification [27] is an example of this scheme.
- FreeSentry [42] is similar but flips the top bits instead of nullifying the address for compatibility reasons.
- DangSan [41] uses append-only per-thread logs for pointer tracking to improve runtime performance for multi-threaded applications.

### 2.4 Implicit Lock-and-Key: Change the Lock

Implicit lock-and-key requires less instrumentation than explicit lock-and-key, and changing locks is simpler than tracking and revoking keys. The ideal scheme would therefore be implicit lock-and-key in which locks are changed. One option is to view the object as a lock, but this lacks a mechanism to “change the lock.” Instead, it is more helpful to view the virtual address as the lock.