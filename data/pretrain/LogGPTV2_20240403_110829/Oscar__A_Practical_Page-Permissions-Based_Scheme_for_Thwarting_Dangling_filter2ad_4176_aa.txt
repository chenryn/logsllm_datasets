title:Oscar: A Practical Page-Permissions-Based Scheme for Thwarting Dangling
Pointers
author:Thurston H. Y. Dang and
Petros Maniatis and
David A. Wagner
Oscar: A Practical Page-Permissions-Based Scheme 
for Thwarting Dangling Pointers
Thurston H.Y. Dang, University of California, Berkeley; Petros Maniatis, Google Brain;  
David Wagner, University of California, Berkeley
https://www.usenix.org/conference/usenixsecurity17/technical-sessions/presentation/dang
This paper is included in the Proceedings of the 26th USENIX Security SymposiumAugust 16–18, 2017 • Vancouver, BC, CanadaISBN 978-1-931971-40-9Open access to the Proceedings of the 26th USENIX Security Symposium is sponsored by USENIXOscar: A Practical Page-Permissions-Based Scheme for Thwarting Dangling
Pointers
Thurston H.Y. Dang
University of California, Berkeley
Petros Maniatis
Google Brain
David Wagner
University of California, Berkeley
Abstract
Using memory after it has been freed opens programs up
to both data and control-ﬂow exploits. Recent work on
temporal memory safety has focused on using explicit
lock-and-key mechanisms (objects are assigned a new
lock upon allocation, and pointers must have the correct
key to be dereferenced) or corrupting the pointer values
upon free(). Placing objects on separate pages and us-
ing page permissions to enforce safety is an older, well-
known technique that has been maligned as too slow,
without comprehensive analysis. We show that both old
and new techniques are conceptually instances of lock-
and-key, and argue that, in principle, page permissions
should be the most desirable approach. We then validate
this insight experimentally by designing, implementing,
and evaluating Oscar, a new protection scheme based on
page permissions. Unlike prior attempts, Oscar does not
require source code, is compatible with standard and cus-
tom memory allocators, and works correctly with pro-
grams that fork. Also, Oscar performs favorably – often
by more than an order of magnitude – compared to re-
cent proposals: overall, it has similar or lower runtime
overhead, and lower memory overhead than competing
systems.
1
Introduction
A temporal memory error occurs when code uses mem-
ory that was allocated, but since freed (and therefore pos-
sibly in use for another object), i.e., when an object is ac-
cessed outside of the time during which it was allocated.
Suppose we have a function pointer stored on the heap
that points to function Elmo() (see Figure 1) at address
0x05CADA. The pointer is used for a bit and then de-
allocated. However, because of a bug, the program ac-
cesses that pointer again after its deallocation.
This bug creates a control-ﬂow vulnerability. For ex-
ample, between the de-allocation (line 7) and faulty re-
3
(∗ someFuncPtr ) ( ) ;
1 v o i d (∗∗ someFuncPtr ) ( ) = m a l l o c ( s i z e o f ( v o i d ∗) ) ;
2 ∗ someFuncPtr = &Elmo ;
4 v o i d (∗∗ c a l l b a c k ) ( ) ;
5 c a l l b a c k = someFuncPtr ;
6
/ / At 0x05CADA
/ / C o r r e c t use .
/ / F r e e s p a c e .
/ / R e a l l o c a t e
s p a c e .
. . .
f r e e ( someFuncPtr ) ;
7
8 userName = m a l l o c ( . . . ) ;
9
. . .
(∗ c a l l b a c k ) ( ) ;
/ / O v e r w r i t e w i t h &Grouch a t 0x05DEAD .
f r e e !
/ / Use a f t e r
10
Figure 1: Top: someFuncPtr and callback refer
to the function pointer, stored on the heap.
Bot-
tom: userName reuses the freed memory, formerly of
someFuncPtr/callback.
use of the pointer (line 10), some other code could allo-
cate the same memory and ﬁll it from an untrusted source
– say a network socket. When the de-allocated pointer is
faultily invoked, the program will jump to whatever ad-
dress is stored there, say the address of the ROP gadget
Grouch() at address 0x05DEAD, hijacking control ﬂow.
Heap temporal memory safety errors are becoming in-
creasingly important [27, 42]. Stack-allocated variables
are easier to protect, e.g., via escape analysis, which stat-
ically checks that pointers to a stack variable do not out-
live the enclosing stack frame, or can be reduced to the
heap problem, by converting stack allocations to heap
allocations [33]. Stack use-after-free is considered rare
[42] or difﬁcult to exploit [27]; a 2012 study did not
ﬁnd any such vulnerabilities in the CVE database [15].
We therefore focus on temporal memory safety for heap-
USENIX Association
26th USENIX Security Symposium    815
05CADA0005DEAD00someFuncPtrcallbacksomeFuncPtruserNamecallbackallocated objects in the rest of this paper.
Various defenses have been tried. A decade ago, Dhur-
jati and Adve [23] proposed using page permissions and
aliased virtual pages for protection. In their scheme, the
allocator places each allocated object on a distinct virtual
page, even though different objects may share the same
physical page; when an object is deallocated, the cor-
responding virtual page is rendered inaccessible, caus-
ing pointer accesses after deallocation to fail. Although
a combination of the technique with static analysis led
to reasonable memory economy and performance, critics
found faults with evaluation and generality, and – with-
out quantitative comparison – summarily dismissed the
general approach as impractical [31, 42], or without even
mentioning it [41]. Since then, researchers have pro-
posed more elaborate techniques (CETS [31], DangSan
[41], Dangling Pointer Nulliﬁcation [27] (“DangNull”)
and FreeSentry [42]), relying on combinations of deeper
static analysis and comprehensive instrumentation of
heap operations such as object allocation, access, and
pointer arithmetic. However, these schemes have yielded
mixed results, including poor performance, partial pro-
tection, and incompatibility.
In this work, we ﬁrst study past solutions, which we
cast as realizations of a lock-and-key protection scheme
(Section 2). We argue that using page permissions to
protect from dangling pointers, an implicit lock-and-key
scheme with lock changes, is less brittle and complex,
and has the potential for superior performance. We then
develop Oscar, a new protection mechanism using page
permissions, inspired by Dhurjati and Adve’s seminal
work [23]. We make the following contributions:
• We study in detail the overhead contributed by the
distinct factors of the scheme – shared memory
mappings, memory-protection system calls invoked
during allocation and deallocation, and more page
table entries and virtual memory areas – using the
standard SPEC CPU 2006 benchmarks (Section 3).
• We reduce the impact of system calls by care-
ful amortization of virtual-memory operations, and
management of the virtul address space (Section 4).
• We extend Oscar to handle server workloads, by
supporting programs that fork children and the
common case of custom memory allocators other
than those in the standard C library (Section 5).
• We evaluate Oscar experimentally using both SPEC
CPU 2006 and the popular memcached service,
showing that Oscar achieves superior performance,
while providing more comprehensive protection
than prior approaches.
Our work shows,
in principle and experimentally,
that protection based on page permissions – previously
thought to be an impractical solution – may be the most
promising for temporal memory safety. The simplicity
of the scheme leads to excellent compatibility, deploya-
bility, and the lowest overhead: for example, on SPEC
CPU, CETS and FreeSentry have 48% and 30% runtime
overhead on hmmer respectively, vs. our 0.7% overhead;
on povray, DangNull has 280% overhead while ours is
< 5%. While DangSan has runtime overhead similar to
Oscar, DangSan’s memory overhead (140%) is higher
than Oscar’s (61.5%). Also, our study of memcached
shows that both standard and custom allocators can be
addressed effectively and with reasonable performance.
2 Lock-and-Key Schemes
Use of memory after it has been freed can be seen as an
authorization problem: pointers grant access to an allo-
cated memory area and once that area is no longer al-
located, the pointers should no longer grant access to it.
Some have therefore used a lock-and-key metaphor to
describe the problem of temporal memory safety [31]. In
this section, we show how different published schemes
map to this metaphor, explicitly and sometimes implic-
itly, and we argue that page-permission-based protection
may be the most promising approach for many work-
loads (see Table 1 for a summary).
2.1 Explicit Lock-and-Key: Change the
Lock
In this scheme, each memory allocation is assigned a
lock, and each valid pointer to that allocation is assigned
the matching key. In Figure 1, the code is modiﬁed so
in line 1, the allocated object gets a new lock (say 42),
and the matching key is linked to the pointer (see Figure
2). Similarly, in line 5, the key linked to someFuncPtr
is copied to callback. The code is instrumented so that
pointer dereferencing (lines 3 and 10) is preceded by a
check that the pointer’s key matches the object’s lock.
When the space is deallocated and reallocated to a new
object, the new object is given a new lock (say, 43), and
userName receives the appropriate key in line 8. The
keys for someFuncPtr and callback no longer match
the lock past line 7, avoiding use after free (Figure 3).
Since this scheme creates explicit keys (one per
pointer), the memory overhead is proportional to the
number of pointers. The scheme also creates one lock
per object, but the number of objects is dominated by the
number of pointers.
Example Systems:
Compiler-Enforced Temporal
Safety for C (CETS) [31] is an example of this scheme.
Although in our ﬁgure we have placed the key next to the
pointer (similar to bounds-checking schemes that store
816    26th USENIX Security Symposium
USENIX Association
Figure 2: Each pointer has a key, each object has a lock.
Figure 3: Lock change (see Figure 2 for the ’Before’).
Figure 4: Key revocation (see Figure 2 for the ’Before’).
Figure 5: After pointer nulliﬁcation (see Figure 1 for the
’Before’), object space can be reused safely.
both the pointer plus the size [25], called plus-size point-
ers) and lock next to the object, this need not be the case
in implementations. Indeed, one of the key advances of
CETS over prior lock-and-key schemes is that it uses a
disjoint metadata space, with a separate entry for each
pointer that stores the key and the lock location; this
avoids changing the memory layout of the program.
2.2 Explicit Lock-and-Key: Revoke the
Keys
Instead of changing the lock, one could revoke all
keys upon reallocation.
This requires tracking of
keys throughout memory; for example, freeing either
someFuncPtr or callback should revoke the keys for
both pointers (Figure 4).
To enable this, upon allocation (line 1) instrumenta-
tion must maintain global metadata tracking all pointers
to a given object, and this index must be updated at every
relevant assignment (line 5). Deallocation (line 7) must
be followed by looking up all pointers to that object, re-
voking (nullifying or otherwise invalidating) their keys.
Revoking keys is harder than changing the lock, since it
requires tracking of key propagation.
Example Systems: To our knowledge, this has not been
used for any published explicit lock-and-key scheme;
but, it segues to the next idea that has been used in prior
work: revoking the keys with implicit lock-and-key.
2.3
Implicit Lock-and-Key: Revoke the
Keys
We can view a pointer as the key, and the object as the
lock. Thus, instead of revoking a key from a separate ex-
plicit namespace, we can change the pointer’s value [27].
The relevant code instrumentation is similar to the ex-
plicit case. Upon allocation or pointer assignment, we
update a global index tracking all pointers to each object.
Upon deallocation, we ﬁnd and corrupt the value of all
pointers to the deallocated object (Figure 5), say by set-
ting them to NULL. Pointer dereferences need not be in-
strumented, since the memory management unit (MMU)
performs the null check in hardware.
Although this scheme does not need to allocate mem-
ory for explicit lock or key ﬁelds, it does need to track
the location of each pointer, which means the physical
memory overhead is at least proportional to the number
of pointers.1
this
is an example of
Example Systems: DangNull’s dangling pointer
nulliﬁcation [27]
scheme.
FreeSentry [42] is similar, but instead of nullifying the
address, it ﬂips the top bits, for compatibility reasons (see
Section 6.3). DangSan [41] is the latest embodiment of
this technique; its main innovation is the use of append-
only per-thread logs for pointer tracking, to improve run-
time performance for multi-threaded applications.
2.4
Implicit Lock-and-Key: Change the
Lock
Implicit lock-and-key requires less instrumentation than
explicit lock-and-key, and changing locks is simpler than
tracking and revoking keys. The ideal scheme would
therefore be implicit lock-and-key in which locks are
changed.
One option is to view the object as a lock, but this
lacks a mechanism to “change the lock”. Instead, it is
more helpful to view the virtual address as the lock.
1DangSan can use substantially more memory in some cases due to