complex Trojans because they do not need to make any as-
sumption about the mode of operation of an inserted Trojan.
However, the main challenges associated with side-channel
analysis are large process variation and design marginality
induced eﬀects in modern nanometer technologies [1], and
measurement noise, which can mask the eﬀect of an inserted
Trojan circuit, especially for small Trojans.
3. RELATED WORK
The underlying assumption for Trojan insertion is that
an adversary is fully aware of the design functionality and
therefore can hide the Trojan in a hard-to-ﬁnd place. The
adversary may use very rare internal transitions to trigger
the Trojan, and it may be impossible to detect (due to ex-
ponential state space) during traditional testing and valida-
tion. One way to address this issue is to obfuscate [3] or
encrypt [14] the design such that the adversary cannot ﬁg-
ure out the actual functionality and therefore cannot insert
the Trojan in a covert manner. Unfortunately, smart at-
tacker can eﬀectively bypass both obfuscation [15] and en-
cryption [16] methods. A promising direction is to develop
eﬃcient techniques for hardware Trojan detection. Prior re-
search on Trojan detection can be classiﬁed into two broad
categories: side-channel analysis and functional test gener-
ation. A vast majority of the Trojan detection approaches
are based on analysis of side-channel signatures such as de-
lay, transient and leakage power [8][9][10][11][12][13]. The
basic idea is to ﬁnd a side-channel signature (if the Trojan
activated) that is diﬀerent from the normal signature. Un-
fortunately, these approaches are susceptible to thermal and
process variations. Therefore, it would be diﬃcult to detect
small combinational Trojans.
One promising direction to overcome process variation is
to generate functional test patterns that are likely to acti-
vate the Trojans. These approaches rely on the fact that
an adversary will choose a trigger condition for the Trojan
using a set of rare nodes. Various approaches tried to max-
imize the rare node activation to increase the likelihood of
activating Trojans. Some approaches [18][19] use the design-
for-test (DFT) infrastructure (such as additional scan ﬂip-
ﬂop) to increase the transition probability of low-transition
nets. MERO [5] takes the advantage of N-detect test [20] to
maximize the trigger coverage by activating the rare nodes.
The test generation ensures that each of the nodes gets ac-
tivated to their rare values for at least N times. They have
shown that if N is suﬃciently large, a Trojan with trigger
conditions from these rare nodes, will be highly likely to be
activated by the generated test set. Saha et al. [6] improves
the test pattern generation of MERO by using genetic algo-
rithm and boolean satisﬁability, which could more eﬀectively
propagate the payload of possible Trojan candidates. How-
ever, these functional test generation approaches are not de-
signed for side-channel analysis. Direct application of these
test generation approaches for side-channel analysis would
not be best for improving side-channel sensitivity for Trojan
detection. The objective of increasing side-channel sensitiv-
ity is very diﬀerent from the ones in both MERO as well
as its enhanced version by Saha et al. Unlike these existing
approaches, a side-channel aware test generation approach,
as proposed in our paper, requires maximizing switching ac-
tivity in an unknown Trojan circuit while minimizing the
background switching.
Instead of aiming on ﬁnding a vector to activate a set
of rare nodes, we focus on creating a set of vector pairs to
maximize switching in rare nodes. Our algorithm creates
multiple excitation of rare switching which is important in
making side-channel based Trojan detection eﬀective. More-
over, we also try to simultaneously minimize the background
switching to maximize the relative switching.
4. MERS METHODOLOGY
In this section, we present the proposed methodology for
side-channel aware test generation in detail. The methodol-
ogy is based on the concept of statistically maximizing the
switching activity in all the rarely triggered circuit nodes.
The eﬀectiveness of a test pattern for side channel analy-
sis is measured in two ways: (1) the ability to create most
switching inside a Trojan or to activate a Trojan; (2) the
ability to create high Trojan-to-circuit switching. We mea-
sure DeltaSwitch as the switching introduced by the Tro-
jan, which is the diﬀerence of number of switches between
the golden circuit and the Trojan-infected circuit. We mea-
sure RelativeSwitch as the ratio of DeltaSwitch to the to-
tal number of switches (TotalSwitch) in the golden circuit.
Algorithm 1: Multiple Excitation of Rare
Switching (MERS)
Input: Circuit netlist, rare switching requirement (N ),
list of rare nodes (R = {r1, r2, ..., rm}),
list of random patterns (V = {v1, v2, ..., vn})
Output: MERS test patterns (T )
// simulate and sort random vectors
1: for each random vector v in V do
2:
Simulate the circuit with the input vector v
Count the number of nodes (RV ) in R with their
rare values satisﬁed
4: end
5: Sort vectors in V in descending order of RV
6: for each node ri in R do
7:
8: end
Set its rare switching counter (Si) to 0
3:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:
27:
(a) A 4-trigger Trojan
(b) An 8-trigger Trojan
Figure 2: Trojans with rare nodes as trigger conditions. The
4-trigger Trojan will only be activated by the rare combina-
tion 1011 and the 8-trigger Trojan will only be activated by
the rare combination 10110011.
An eﬀective test vector should be capable of creating large
DeltaSwitch, and more importantly it should create large
RelativeSwitch, as it is directly related to the sensitivity for
side channel analysis.
RelativeSwitch = DeltaSwitch/T otalSwitch
(1)
The major challenges for generating high-quality test vectors
are as follows: (1) we are not sure of the location where the
Trojan is inserted in the circuit; (2) the Trojan is stealthy
and has very low activity when it is not triggered. These
characteristics have made random tests not eﬀective in mag-
nifying the side channel signal for Trojan detection. Fig. 2
shows two example Trojan instances. The 4-trigger Trojan
will only be activated by the rare combination 1011 and the
8-trigger Trojan will only be activated by the rare combina-
tion 10110011. If the possibility of each rare node to take its
rare value is 0.1, the probability to have these two Trojans
fully triggered is 10−4 and 10−8, respectively.
Our test generation approach (MERS) is based on creat-
ing a set of test vectors for each candidate rare node indi-
vidually to have rare switching multiple (at least N ) times.
Our approach utilizes the principle of N -detect [20] tests to
increase the likelihood of partially or fully activating a Tro-
jan. MERS can generate a high-quality testset for these rare
nodes individually to have rare switching for N times. If N
is suﬃciently large, a Trojan with triggering conditions from
these rare nodes is likely to have high switching activity even
though it might not be fully activated.
4.1 Multiple Excitation of Rare Switching
The basic idea of MERS is that if we can make a rare node
switch N times where N is suﬃciently large, it signiﬁcantly
// mutate vector to find improved vector pairs
9: Initialize previous vector tp as a vector of all 0’s
10: for each vector vj in V do
11:
Simulate the circuit with vector pair (tp, vj)
Count the number of rare switches (RS)
Set v(cid:48)
for each bit in v(cid:48)
j = vj
j do
Mutate the bit and re-simulate the circuit with
vector pair (tp, v(cid:48)
j)
Count the number of rare switches (R(cid:48)
S)
if R(cid:48)
S > RS then
Accept the mutation to v(cid:48)
j
end
end
Update Si for all nodes in R due to vector v(cid:48)
if v(cid:48)
j increases Si for at least one rare node then
Add the mutated vector v(cid:48)
Set tp = v(cid:48)
j to T
j
j
end
if Si ≥ N for all nodes in R then
Break
end
28:
29: end
30: return MERS test patterns T
improves the chance of switching in a Trojan associated with
that rare node. The rare switching in our algorithm spe-
cially refers to a rare node switching from its non-rare value
to its rare value. The reason to choose this criteria is two-
fold: (1) it is more diﬃcult to switch from non-rare to rare
value than from rare to non-rare value; (2) it deﬁnes the
switching between the previous vector and the current vec-
tor, and it usually helps to create an extra switching between
the current vector and the next vector. This will increase the
probability of switching of a Trojan which has rare nodes as
its trigger conditions. Our approach is also applicable to se-
quential Trojans, which requires the rare condition to occur
a certain number of times to be fully triggered.
Algorithm 1 shows the steps of MERS to generate high
quality tests for creating switching in rare nodes, so as to
assist side channel analysis for hardware Trojan detection.
The algorithm is fed with the golden circuit netlist, the list
of random test patterns (V ) and a list of rare nodes (R)
(which is obtained by random vector based circuit simulation
Algorithm 2: Tests Reordering by Hamming Dis-
tance (MERS-h)
Input: List of Test Patterns (Torig = {t1, t2, ..., tn})
produced by Algorithm 1
Output: Improved Test Patterns (Thamm)
1: Initialize Thamm = {}
2: Initialize previous test tp as a vector of all 0’s
3: while Torig is not empty do
4:
mindist = int max
bestidx = −1
for all remaining tests tj in Torig do
if mindist > hamming dist(tp, tj) then
mindist = hamming dist(tp, tj)
bestidx = j
end
end
Add tbestidx to the end of Thamm
Remove tbestidx from Torig
Update tp = tbestidx
14:
15: end
16: return Thamm
Algorithm 3: Tests Reordering by Simulation
(MERS-s)
Input: List of Test Patterns (Torig = {t1, t2, ..., tn})
produced by Algorithm 1
Output: Improved Test Patterns (Tsim)
1: Initialize Tsim = {}
2: Initialize previous test tp as a vector of all 0’s
3: while Torig is not empty do
4:
maxp = int min
bestidx = −1
for all remaining tests tj in Torig do
Simulate the circuit with vector pair (tp, tj)
Count the number of RareSwitch and
TotalSwitch
prof it = C ∗ RareSwitch − T otalSwitch
if maxp < prof it then
maxp = prof it
bestidx = j
end
end
Add tbestidx to the end of Tsim
Remove tbestidx from Torig
Update tp = tbestidx
17:
18: end
19: return Tsim
beforehand). First, we simulate each random pattern and
count the number of rare nodes (RV ) that take their rare
values. We sort the random patterns in descending order
of RV , which means that the vector with ability to activate
the most number of rare nodes goes ﬁrst. Next, we initialize
the rare switching counter Si for each rare node to 0.
In
the next step, we mutate vectors from the random pattern
set to generate high quality tests. We mutate the current
vector one bit at a time and we accept the mutated bit only
if the mutated vector can increase the number of nodes to
have rare switching. In this step, only those rare nodes with
RS < N are considered. The mutation process repeats until
each rare node has achieved at least N rare switches. The
output of the test generation process is a compact set that
improves the switching capability in rare nodes, compared
to random patterns. The complexity of the algorithm is
O(n∗m), where n is the total number of test vectors mutated
during the process, and m is the number of bits in primary
inputs. The runtime to generate MERS tests can be found
in Table 1.
The testset generated by MERS is expected to be very
eﬀective in increasing the likelihood of rare nodes to switch
and thus increasing the activities in Trojans. In other words,
MERS testset is capable of maximizing the DeltaSwitch (the
numerator in Equation 1). MERS testset is already a very
high quality testset in terms of criteria for DeltaSwitch.
However, MERS testset also creates more switching in other
parts of the circuit, when it is making eﬀorts to switch rare
nodes. This characteristic of increased TotalSwitch would
be further illustrated in the Section 5. In order to maximize
relative switching, we need to have TotalSwitch in control
as well. In the following subsections, we propose two meth-
ods to tune the MERS testset, so that it can: (1) still be
eﬀective for DeltaSwitch, (2) reduce TotalSwitch and im-
prove the eﬀectiveness for RelativeSwitch. The ﬁrst method
is a heuristic approach based on hamming distance of test
vectors, which can reduce the total switching. The second
one is simulation based, in which we try to balance the rare
switching and the total switching while we explore all the
candidate vectors.
4.2 Hamming Distance based Reordering
If two consecutive input vectors have the same values in
most bits, it is very possible that the internal nodes will
also have a lot of values in common. A simple heuristic to
reduce total switching in circuit is to have similar input vec-
tors. We use the Hamming distance between two vectors to
represent the similarity. Algorithm 2 shows our approach to
reorder the testset by Hamming distance. The algorithm is
a greedy approach to explore all candidate vectors and take
the best one in terms of Hamming distance. We ﬁrst check
the Hamming distances between the previous vector and all
the remaining vectors, then we select the vector which has
the minimum Hamming distance as the next vector. The
time complexity of Algorithm 2 is O(n2), where n is the
testset size. Fortunately, it is of low cost to calculate the
Hamming distance between two input vectors. The actual
run-time is very short because n (number of test patterns
produced by MERS) is small, in the order of tens of thou-
sands.
5:
6:
7:
8:
9:
10:
11:
12:
13:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
4.3 Simulation based Reordering
The reordering problem to improve the relative switching
is actually a multi-objective optimization problem: maxi-
mize the DeltaSwitch and minimize the T otalSwitch as in
Equation 1. We do not know the DeltaSwitch, because
the location and type of the Trojan is unknown. However,
rare switching between two vectors is a good indicator for
DeltaSwitch, which means a large number of rare switching
would imply a large DeltaSwitch in Trojan. We redeﬁne
the optimization goal as to maximize the rare switching and
minimize the total switching at the same time between vec-
tor pairs. We formalize the problem as shown in Equation
2. We need to explore the best weights to balance between
the two objectives:
maximize
(w1 ∗ RareSwitch − w2 ∗ T otalSwitch)
(2)
We propose an approach as shown in Algorithm 3 based
on real simulation of the test vectors to maximize the com-
bined objective. We introduce a concept of prof it to indi-
cate the ﬁtness of a test vector to follow the previous test
vector. prof it is deﬁned as (C∗RareSwitch−T otalSwitch),
where C is the ratio of two weights w1 and w2. It is meant
to maximize the rare switching (activity in Trojan circuits)
and minimize the total switching of the whole circuit.
In
the experiment section, we will explore diﬀerent weight ra-
tios and check the inﬂuence of weight ratios on side channel
sensitivity.
Algorithm 3 shows our approach to tune the testset by
simulation with prof it as a reordering criterion. By ex-
haustively checking the prof it between the previous vector
and all the remaining vectors, we select the vector which
has the maximum prof it as the next following vector. The
time complexity of Algorithm 3 is O(n2), where n is the
test length. However, it is much slower than Algorithm 2,
because it is time-consuming to simulate input vector pairs
and calculate prof it.
Figure 3: Test generation framework for side-channel anal-
ysis based Trojan detection.
5. EXPERIMENTS
5.1 Experimental setup
The test generation framework, including the MERS core
algorithms and the evaluation framework, is implemented
using C. As shown in Fig. 3, the test generation framework