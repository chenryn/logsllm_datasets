## Feature Request

### Description
Implement support for Node.js v12+ internal `package.json` imports, which are only applicable to import specifiers within the package itself. This feature is documented in the Node.js documentation: [Node.js Packages - Subpath Imports](https://nodejs.org/api/packages.html#packages_subpath_imports).

### Expected Behavior
- Entries in the `imports` field must always start with `#` to ensure they are disambiguated from external package specifiers.
- The `imports` field can be used to gain the benefits of conditional exports for internal modules. For example:

  ```json
  // package.json
  {
    "imports": {
      "#dep": {
        "node": "dep-node-native",
        "default": "./dep-polyfill.js"
      }
    },
    "dependencies": {
      "dep-node-native": "^1.0.0"
    }
  }
  ```

  In this example, `import '#dep'` will not resolve to the external package `dep-node-native` (including its exports). Instead, it will resolve to the local file `./dep-polyfill.js` relative to the package in other environments.

- Unlike the `exports` field, the `imports` field permits mapping to external packages.
- The resolution rules for the `imports` field are otherwise analogous to the `exports` field.

### Motivation and Use Case
1. **Maintain Interoperability**: Align with Node.js `package.json` specifications to ensure compatibility and interoperability.
2. **Cleaner Internal Access**: Discourage the use of subpath exports and self-referencing packages for internal access. This feature provides a cleaner way to replace paths like `import { X } from "../../../lib"` with `import { X } from "#lib"`.

### Implementation Suggestions
- It appears that Webpack's subpath exports already implement most of the required functionality. Further investigation and adaptation may be needed to fully support this feature.

### Willingness to Contribute
I am not willing to work on this myself, but I am available to provide further feedback and testing if needed.

---

This version of the text is more structured and professional, with clear headings and a logical flow. It also includes a more detailed and precise description of the expected behavior and the motivation behind the feature request.