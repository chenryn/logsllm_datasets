ssaooud Aq (euado Sursn pauado sapg motuS
bpftrace -e *tracepointiayscallsiays_enter_openst l printf(*ls lsn*, comm,
ste (args->fllenane)): 1*
Count syscalls by program:
---
## Page 175
138
3 Chapter 5 bpftrace
Count syscallst by syscall probe name:
Count syscalls by process:
Show the total read bytes by process:
[moo]8 1/aexret) :|*
Show the read size distribution by process:
bpftrace -e *tracepointiayscallsiays_exit_read / e[comm] - hist (args->ret) : ]
Show the trace disk I/O size by proces:
uooptd u\p @) P)gauad ]onsstbxootqipotqiaorodaoexa, aaoeangdqg
[sq 100 ss pld esu - [p]xesgg
kretprobe:vfs_read
/[p]e=g/
000t / I[pT]4xeqeg -soasu) - snuoTqexnps
Bus = hlst (Sduration_us)
delete (estart[tid]) 
1
This times the duration of the vfs_read() kernel function by instrumenting its start using a kprobe
and storing a timestamp in a @start hash keyed on thread ID, and then instrumenting its end by
using a kretprobe and calculating the delta as: now start. A filter is used to ensure that the start
time was recordedl; otherwise, the delta calculation becomes bogus: now - 0.
Sample output:
+ bpftrace vfsread.bt
Attach.ing 2 probes...
---
## Page 183
146
Chapter 5 bpftrace
9u81
[0]
2318
[1]
138 188988e889
[2, 4)
538 1eeeeeeeeee e８eeeeeeeeeee８eeeeeeeeee
[4, 8]
744 1889889889888 8889889889889889889889888 8889889889869881
[8, 16}
641  eeeeeeeeeeee
[16, 32)
122 188988088
[32, 64)
131
[64, 128]
17 18
(95z 8z1]
2 1
[256,512}
10
[512, 1K)
11
The program ran until Ctrl-C was entered, then it printed this output and terminated. This
histogram map was named *us" as a way to include units with the output, since the map name is
printed out. By giving maps meaningful names like *bytes* and *latency_ns" you can annotate
the output and make it self-explanatory.
This script can be customized as needed. Consider changing the hist() assignment line toc
Pus [pld, corn] = hlst (5duration_us) 
That stores one histogram per process ID and process name pair. The output becomes:
 bpftrace vfsread.bt
Attach.ing 2 probes...
C
us[1847, gdbus] :
[1]
1 leeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1
808808808812
[2, 4]
[4, 8]
us [1630, ibus-daenon] :
[2, 4]
08688088088688808808808868816
[4, 8]
17 1869889889886 888e889889889869889889886 888988988986986 1
eus[29588, device po11] :
[1]
13 1eeee8eeeee8ee8eeeeeeeeeeeeeeeeeeeee8ee8eeeeeα
[2, 4)
15 1889889889886 8889889889869869889889886 8889889889869881
[4, B] 
418ee88e88e8888
[8, 16}
80886886886e81 b
[.--]
This illustrates one of the most useful capabilities of bpftrace. With traditional system tools, like
iostat(1) and vmstat(1), the output is fixed and cannot be easily customized. But with bpftrace,
---
## Page 184
5.8 bpftrace Usage
147
the metrics you see can be further broken down into parts and enhanced with metrics from other
probes until you have the answers you need.
5.8
bpftraceUsage
With no arguments (or h), the bpftrace USAGE message is printed, which summarizes important
options and environment variables and lists some example one-liners:
+ bpftrace
USAGE :
bpftrace [options]  filename
wexboad,a-[suotado]eoexagdq
OPTIONS:
B MODE
output buffering node (′line*, *full′, or *none*)
d
debug info dry run
=o file
redirect progran output to file
-dd
verbose debug info dxy run
-e *progran*
execute this program
-h,
-=be1p
shou this help nessage
-I DIR
adid the directory to the include sesrch path
--Include FILE add an Lnclude f1le before pzepzocessing
-1 [sesrch]
list probes
Ia d-
enable USDT pzobes on PID
C
CMD′
run CHD and enable US0T probes on resulting process
=unsafe
a11ox unsafe builtin functions
-=verslon
uotsxea eoezagdg
ENVIROXENT :
BPFTRACE_STRLEN
[default: 64] bytes on BPF stack per str (]
BPFTRACE_NO_CPP_DENANGLE
[default: 0]  disable C++ syabol denangling
BPFTRACE_MAF_KEYS_MAX
[default: 4096] nax keys in a map
BPFTRACE_CAT_BYTES_KAX
[default: 10x] naxinus bytea read by cat bui1tin
BPFTRACE_MAX_PROBES
[default: S12] nax nusber of probes
EXAMPLES :
bpftzace -1 **sleep**
list probes containing *sleep*
bpftzace =e *kprobe:do_nanosleep [ pxlntf (*PID 与d sleeplng.-.\n", pld) : 1*
trace processes calling sleep
(I)unoo = [smuoo]ea }xequess:steossxexiqutodeoex。 8 8oexagdag
count syscalls by process name
---
## Page 185