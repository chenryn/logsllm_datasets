post that have not yet been run. Upon
activation, I (cid:3)
post equals the inactive state. If the
currently running process is missing then the step of Si consists of
post (if it is
taking the ﬁrst input process (!)receivec(xp; x):P of I (cid:3)
empty then Si is deactivated with I (cid:3)
pre as its state) and comparing c
to cv. If c = cv then Px m;xp u becomes the currently running
process, otherwise this input process is moved to the end of I (cid:3)
pre. If
the currently running process P is present and active then a step of
Si is just a step of P . If P is II then it is discarded and the ﬁrst
input process in I (cid:3)
pre. If P is I (cid:3) then Si
is deactivated and its new state is the concatenation of (1) I (cid:3)
pre, (2)
post).
I (cid:3), (3) if head (I (cid:3)
post is moved to the end of I (cid:3)
post) is replicated then I (cid:3)
pre is empty and I (cid:3)
post else tail (I (cid:3)
c
The state C of C 0
n may evolve in the following ways. If the state
Si of a Pi is active then a step of C is just a step of Si. If Si is deac-
tivated then the sent message is delivered to the adversary (if it was
on an authentic or insecure channel), put to the right buffer Li!j
(if it was on a secure or authentic channel) or sent to the user (if it
was on an abstract channel from Chanu). If the states of all Pi are
n is expecting a message from outside, there are two
inactive then C 0
kinds of such messages. First are the basic or local adversary com-
mands [12] executed by the adversary, these cause the contents O
of the database of THn to be changed and a handle and the control
to be returned to the adversary; no participant is activated. Second
are the incoming messages to protocol participants, initiated either
by the adversary (who also schedules secure and authentic chan-
nels [12]) or the users. This causes one of the participants Pi to
be activated with the incoming message, and the message removed
from the right buffer Li!j
(if it arrived over a secure or authentic
channel).
c
The precise deﬁnition of the evolution of the states of C 0
n is given
in the full paper [34]. There we deﬁne a relation O i(cid:0)!O0 for pro-
cesses and for participant states, meaning that a process [participant
state] at the left hand side, when executed by Pi with the contents of
the database of THn as O, becomes the process [participant state]
at the right hand side and the contents of the database of THn be-
comes O0. We also deﬁne a relation ! for the states of C 0
n.
Security
We now deﬁne our notion of secrecy. We consider as secret all
data that the protocol user(s) pass to the protocol over the channels
pinui. The actual secrecy deﬁnition has to be stated for the real
system, i.e. we cannot refer to the internal state of TH in that
deﬁnition.
/!, pinui !, pinui
We use the deﬁnition of payload secrecy given by Backes and
Pﬁtzmann [10]. To state that deﬁnition we ﬁrst rename the ports
/! of the machine Pi; let the renamed
pinui ?, poutui ! and poutui
ports be pinui ?, poutui ! and poutui
/!. Let the machines R and
F both have ports pinui ?, poutui !, poutui
/! and
poutui ? for all i 2 f1; : : : ; ng, i.e. either R or F can be placed
between the user(s) H of the protocol and the machines Pi (with
renamed ports). The machine F operates by just forwarding ev-
ery message it receives on pinui ? [resp. poutui ?] to pinui ! [resp.
poutui !] and clocking the output channel. Hence the operation of
the original system (with unrenamed ports of Pi) is identical to the
operation of the modiﬁed system (with renamed ports of Pi) when
F is placed between the user(s) and the machines Pi. The machine
R also forwards the messages between the user(s) and the machines
Pi, but it additionally scrambles them. It keeps a dictionary T —
an initially empty set of pairs of bit-strings — for that reason. On
input x on pinui ?, the machine R checks whether (x; y) 2 T for
some y. If not, then it generates a random y of the same length as
x and not yet occurring as the second component of the pairs in T ;
the pair (x; y) is then added to T . The bit-string y is then output
on pinui !. On input y on poutui ?, the machine R checks whether
(x; y) 2 T for some x. If yes, x is output on poutui !, otherwise y
is output.
Backes and Pﬁtzmann [10] deﬁne the payload to be secure if
for all possible adversaries the view of the user, where R is placed
between the user and the machines Pi, is computationally indistin-
guishable from its view, where F is placed between the user and
the machines Pi. I.e. the user and the adversary jointly are unable
to determine whether the communication between the user and the
machines Pi is scrambled or not.
It is also shown that payload
security is preserved under simulatability.
Backes and Pﬁtzmann [10] have shown that the following condi-
tions sufﬁce for payload secrecy for the conﬁguration C 0
n.
(I) the bit-strings that the machines Pi receive from the ports
pinui ? do not affect the control ﬂow of Pi, i.e. this data is
not used in the if -statements;
(II) the machines Pi may pass the bit-strings received from the
user to the cryptographic library only in store-commands;
(III) the terms resulting from these store-commands will not be-
come available to the adversary, i.e. the adversary does not
get handles for these terms.
So our type system must ensure these three properties. As we men-
tioned before, it must also ensure that
(IV) symmetric keys of order i only encrypt terms of order less
than i (note that symmetric keys created by the adversary
have no order and are thereby not restricted by this condi-
tion);
(V) if a symmetric key unknown to the adversary (i.e. the adver-
sary does not have a handle to it) is used for encryption then
this key will never become known to the adversary.
Example
We revisit the example of Needham-Schroeder-Lowe public-key
protocol by Abadi and Blanchet [2]. In informal syntax, the proto-
col is the following:
A (cid:0)! B : fsA; AgkB
B (cid:0)! A : fsA; sB; BgkA
A (cid:0)! B : fsBgkB :
Here kA and kB are the public keys of A and B; and sA and sB
are fresh nonces that become shared secrets as the result of the
protocol. To demonstrate that sB does not become known to the
adversary, we add the fourth message B (cid:0)! A : fsgsB where B
sends to A a secret message s (received from the user of the proto-
col) symmetrically encrypted with sB and let A return the received
message to the user.
The protocol starts by A and B generating new asymmetric key
pairs and sending the public part to each other over an authen-
tic channel. The attack found by Lowe [38] against the original
Needham-Schroeder protocol [43] is a man-in-the-middle attack
where A is ﬁrst tricked to execute the protocol with adversarially
controlled C who then impersonates A in a run with B. To model
that A can execute the protocol not only with B we let A also re-
ceive public keys other than kB. As these keys come from the
adversary they arrive over insecure channels but we do not let A
differentiate between kB and other keys.
Let c1; c2 2 Chana, ci 2 Chani and cu 2 Chanu. We
use the channel c1 to communicate the public key of A to B and
the channel c2 to communicate the public key of B to A. The
need for two authentic channels is caused by our type-system’s
need to distinguish between these two keys. The processes for
A and B are given in Fig. 4. Here we let letP 0
e in P denote
the process let e in P else P 0 and let if P 0
b then P denote
if b then P else P 0.
In Fig. 4, A starts by generating a new asymmetric key pair and
sending the public part to B. It then expects public keys of other
parties to be sent to it over authentic (the key of B) or insecure
channels. The process A0 handles all sessions with a ﬁxed other
party X. First it expects the public key of X as the sign to start
a new session with it. The rest of A0 should be clear. At the end
of the protocol run, A0 returns the received message s to the user.
The process B starts by receiving the secret message s from the
user and storing it in the database of THn. It then generates a new
asymmetric key pair, sends the public part to A and gets the public
key of A. Afterwards it can participate in any number of protocol
sessions. The process B assumes that its partner in these sessions
is A as it encrypts the outgoing messages with kA.
All public keys are sent to A in a similar way — both new pub-
lic keys (of principals that A did not know before; these keys are
received outside of the process A0) and the public keys of parties
with whom to start a new protocol run (received inside A0). The
order of considering threads and inserting new threads to the list
of threads in the state of PA ensures that the ﬁrst time when A re-
ceives a public key this is interpreted as the public key of a new
party (and a new process A0 is spawned) and when the same public
key is received again then A attempts to start a new protocol run
with this party.
5. THE TYPE SYSTEM
A typing (cid:0) assigns types to the free variables of the processes and
to the abstract channels used by the protocol. The types of channels
reﬂect the types of messages passed over them. In the following
we deﬁne the set of types and also state, when a process (or input
process) types with respect to a typing. We say that a protocol types
if there exists a typing such that all the input processes in the initial
states of the machines Pi type with respect to it.
A0(X; kX ) is
!receiveci [fc1 ](mc):if II mc = kX then
let0 sA := gen nonce in
sendci (X; pubenc(kX ; list(sA; kA))):
receiveci (yX2; m2):letII l2 := pubdec(k(cid:0)1
A ; m2) in
letII sA2 := list proj(l2; 1) in letII k0
letII kX2 := list proj(l2; 3) in if II kX = kX2 then
if II sA2 = sA then sendci (X; pubenc(kX2; k0
AX )):
AX := list proj(l2; 2) in
receiveci (yX4; m4):letII s0 := privdec(k0
AX ; m4) in
sendcu ( ; retrieve(s0)):0
A is
A := keypair in sendc1 (“B”; pubkey(k(cid:0)1
A )):
let0 k(cid:0)1
(cid:0)receivec2 (yB; kB):
if II yB = “B” then A0(yB; kB) j
!receiveci [yX1](kX ):A0(yX1; kX )(cid:1)
B is
receivecu (fc2 ; sI ):let0 s := store(sI ) in
let0 k(cid:0)1
B := keypair in let0 kB := pubkey(k(cid:0)1
B ) in
sendc2 (“A”; kB):
receivec1 (yA; kA):if II yA = “A” then
!receiveci [y1](m1):letII l1 := pubdec(k(cid:0)1
B ; m1) in
A := list proj(l1; 1) in letII kA2 := list proj(l1; 2) in
letII s0
if II kA = kA2 then let0 kAB := gen symenc key(1) in
sendci (“A”; pubenc(kA; list(s0
A; kAB ; kB))):
receiveci (y3; m3):letII kAB2 := pubdec(k(cid:0)1
B ; m3) in
if II kAB = kAB2 then sendci (“A”; privenc(kAB2; s)):0
Figure 4: Example protocol
T ::= T (I) j T (H)
T (I) ::= PubRD j SecRD j AllRD
T (H) ::= T (A) j DK(T (A))
T (A)
::= Public
SNonce
EK(T (A))
List(T (A)
j
j
j
1
; : : : ; T (A)
n )
j PubData
j SecData
j SKi(T (A))
j T (A)
1 + T (A)
2
Figure 5: The types for variables and channels
The types T are deﬁned in Fig. 5. The type system contains two
main kinds of types — the types T (I) are intended for “raw data”,
i.e.
the data received from the protocol users, as well as for the
identities of participants. The types T (H) are intended for the terms
in the database of THn (both for variables containing handles, and
for abstract channels). The subtyping and sameness relations are
given in Fig. 6. If two types are subtypes of each other then we
count them as being the same.
The meaning of types T (I) should be clear — the data received
from the user of the protocol gets the type SecRD and the data rep-
resenting names of the parties gets the type PubRD. As terms in
the database these have types SecData and PubData, respectively.
The types DK(T ), EK(T ) and SKi(T ) are respectively for asym-
metric decryption, asymmetric encryption and symmetric keys (of
order i) where T is the type of plaintexts. The types DK(T ) are
PubRD (cid:20) AllRD
SecRD (cid:20) AllRD
T (cid:20) T
PubData (cid:20) Public