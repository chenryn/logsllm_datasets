### Race Conditions and Other Issues

As outlined in Chapter 14, the race conditions discussed are also lacking in other respects, as illustrated in Figure 17-1.

**Figure 17-1: A Confusing Prompt in Firefox**
The prompt displayed at the top of the browser window is generated by the `registerProtocolHandler(...)` API. In this example, the protocol name is set to "doing really awesome stuff," and the application name is set to "Firefox (mozilla.org)." While this specific example is harmless, it highlights the potential for more malicious abuse.

### Address Bar Manipulation

The newly introduced HTML5 `history.pushState(...)` API, supported by Firefox, WebKit, and Opera, allows the currently displayed document to change the address bar content to any same-origin URL without triggering a page transition. This API provides a better alternative to the common misuse of `location.hash` for storing application state. Despite its simplicity, it has already led to several security issues. For instance, some implementations initially allowed not only the top-level document but also untrusted third-party frames to modify the address bar, and they permitted origins like `about:blank` to insert arbitrary text into the URL field.

### Binary HTTP

SPDY ("Speedy") is a simple, encrypted replacement for HTTP that maintains key design principles while minimizing overhead associated with concurrent requests and text-based data parsing. Currently, SPDY is only supported in Chrome and is used primarily by select Google services. However, it may soon be available in Firefox as well.

### HTTP-less Networking

WebSocket is an evolving API designed for establishing bidirectional TCP streams, particularly useful for low-latency applications like chat. The protocol uses a keyed challenge-response handshake that is resistant to header-splitting attacks. Once the handshake is successful, raw data can be exchanged within the long-lived TCP connection, with each message encapsulated in a simple protocol frame. WebSocket is supported in WebKit and is expected to be available in Firefox soon.

### P2P Networking

WebRTC is a set of APIs and network protocols designed to facilitate peer-to-peer communication between browsers without the need for a centralized server. Its primary use case is for implementing IP telephony and video-conferencing features in web applications. As of now, no stable browser support is available.

### Offline Applications

Cache manifests allow a web server to instruct the browser to store certain documents indefinitely and reuse them when the client lacks network connectivity. Combined with client-side storage mechanisms like `localStorage`, this enables self-sufficient JavaScript applications to function offline. Offline operation is supported in Firefox, WebKit, and Opera. However, the persistent nature of this mechanism can exacerbate the risks of visiting untrusted sites.

### Better Cookies

Cake is an expired proposal by Adam Barth aimed at creating a more lightweight and secure alternative to HTTP cookies, using origin-bound, browser-generated nonces. A more recent but incomplete proposal explores the use of normal, origin-based cookies. Neither approach is currently available in any browser.

### Content-Level Features

The following proposals aim to enable new classes of web applications built on HTML and JavaScript.

#### Client-Side Databases

Several APIs for creating and managing locally stored databases have been proposed, including the controversial WebSQL API, which brought SQL syntax to client-side JavaScript. The WebSQL proposal was abandoned in favor of IndexedDB, which offers a cleaner API and a security model similar to `localStorage`. IndexedDB is available in Chrome and is expected in Firefox.

#### Background Processes

The Worker API, available in Firefox, WebKit, and Opera, allows the creation of background JavaScript processes to handle computationally intensive tasks without blocking the browser UI. Each worker runs in an isolated environment and communicates asynchronously with its creator via the `postMessage(...)` API. Dedicated workers are accessible only by their creator, while shared workers can be attached to multiple sites. Persistent workers, which would run independently, were proposed but later dropped. While worker threads raise some DoS concerns, they do not pose significant security risks.

#### Geolocation Discovery

The `navigator.geolocation.getCurrentPosition(...)` API allows websites to request the physical location of the client device, subject to user consent. Location data can be derived from GPS or nearby wireless access points and cell towers. This API is supported in all major browsers except Internet Explorer.

#### Device Orientation

The DeviceOrientation API, available in Firefox, WebKit, and Opera, allows websites to read the device's orientation based on accelerometer data. This API, intended for mobile gaming, has a critical flaw: on smartphones, subtle movements can be used to reconstruct on-screen keyboard input, including passwords entered on unrelated sites.

#### Page Prerendering

This experimental feature in Chrome allows pages to be prefetched and prerendered in a hidden tab, revealed once the user navigates to the predicted link. If the prerendered page is malicious, it could have interesting security implications. Chrome defers disruptive actions until the tab is revealed, but implementation errors are possible.

#### Navigation Timing

Several APIs in Chrome allow for precise benchmarking of navigation, including cross-domain page loads. This helps site owners identify performance bottlenecks. While the API can collect privacy-related information, the same attack is possible through other means, making it less concerning.

### I/O Interfaces

These features offer new input and output capabilities to web-based scripts.

#### UI Notifications

The Notification and `window.notifications` APIs allow the creation of text-only or HTML-based pop-ups, enabling web applications to notify users of important events. User consent is required, limiting the risk of abuse. The API is currently available only in WebKit.

#### Full-Screen Mode

Proposals have been made to allow JavaScript to maximize the browser window and hide the chrome, essential for tasks like presentations or watching movies. However, this functionality is risky, as a malicious page could draw a fake browser window. No specific implementation is available yet, but an early-stage proposal for mouse cursor locking is being discussed.

#### Media Capture

A suite of `navigator.device.capture` APIs has been proposed to give websites access to webcam and microphone data. Security and privacy concerns are significant, especially regarding the resilience of associated security prompts to race condition attacks. No stable browser support is available yet.

### Common Web Vulnerabilities

While we have focused on the underlying mechanics of web applications, it is useful to recap the terminology commonly used by security researchers.

#### Cross-Site Request Forgery (XSRF, CSRF)

A vulnerability caused by failing to verify that a state-changing HTTP request was initiated from the expected client-side origin, allowing any third-party website to perform actions on behalf of the victim.

#### Cross-Site Script Inclusion (XSSI)

A flaw where sensitive JSON-like responses are not secured against being loaded on third-party sites, potentially leaking user-specific information to attackers.

#### Cross-Site Scripting (XSS)

Insufficient input validation or output escaping can allow an attacker to inject HTML or scripts into a vulnerable site, giving them access to the targeted web application and, often, HTTP cookies.

- **Reflected XSS**: The injected string is a result of incorrectly echoing back a portion of the request.
- **Stored or Persistent XSS**: The payload takes a more complex route.
- **DOM-based XSS**: The vulnerability is triggered by the behavior of the client-side JavaScript.

#### Header Injection (Response Splitting)

Insufficient escaping of newlines in HTTP responses can lead to XSS, browser, or proxy cache poisoning.

#### Mixed Content

Loading non-HTTPS subresources on HTTPS pages, making the application vulnerable to active attackers, especially on open wireless networks.

#### Open Redirection

Applications that perform requests to user-supplied URLs without meaningful constraints, which can be exploitable in some scenarios.

#### Referer Leakage

Accidental disclosure of a sensitive URL in the `Referer` header when embedding off-site sub-resources or providing off-site links.

### Problems to Keep in Mind in Web Application Design

These issues must be considered when designing or implementing new web applications.

#### Cache Poisoning

The possibility of polluting the browser cache or interim proxies with a fabricated, malicious version of a web application.

#### Clickjacking

The possibility of framing or obscuring a portion of another web application, leading to unintended actions by the user.

#### Content and Character Set Sniffing

The browser ignoring authoritative content type or character set information, interpreting the returned document incorrectly.

#### Cookie Forcing (or Cookie Injection)

Blindly injecting HTTP cookies into an otherwise secure web application due to browser design and implementation issues.

#### Denial-of-Service (DoS) Attacks

Any opportunities for an attacker to bring down a browser or server or make the use of a particular application significantly more difficult.

#### Framebusting

A framed page navigating the top-level document to a new URL without satisfying same-origin checks, potentially leading to phishing or mischief.

#### HTTP Downgrade

Active attackers preventing the user from reaching an HTTPS version of a site or downgrading an existing HTTPS session to HTTP.

#### Network Fenceposts

Websites leveraging the browser to interact with destinations not directly accessible to the attacker, such as systems on a victim’s internal network.

### Note
Beware of non-buzzword bugs! Not all vulnerabilities have catchy names. Web developers should be wary of many other implementation and design issues that can still cause significant harm.