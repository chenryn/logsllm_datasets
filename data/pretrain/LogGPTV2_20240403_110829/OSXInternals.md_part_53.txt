### The Active Console User
The active console user feature allows a remotely logged-in user to launch graphical applications, for example, using the `open` command-line program.

### Mac OS X Login Mechanism
Mac OS X's login mechanism supports running a custom script with superuser privileges when a user logs in. This script, known as a "login hook," is executed by the `loginwindow` process. The login hook is enabled on a system-wide basis and receives the short name of the logging-in user as its first argument. 

A login hook can be registered in two ways:
1. **Editing the `/etc/ttys` file:**
   - Modify the line containing the path to `loginwindow` in `/etc/ttys` to include the `-LoginHook` argument, followed by the path to the login hook script.
   - Example:
     ```plaintext
     # Before login hook:
     console "/System/Library/CoreServices/loginwindow.app/Contents/MacOS/loginwindow" vt100 on secure onoption="/usr/libexec/getty std.9600"
     
     # After login hook:
     console "/System/Library/CoreServices/loginwindow.app/Contents/MacOS/loginwindow -LoginHook /path/to/login/hook/script" vt100 on secure onoption="/usr/libexec/getty std.9600"
     ```

2. **Using the `defaults` command:**
   - Use the `defaults` command to set the `LoginHook` property for `loginwindow`.
   - Example:
     ```bash
     $ sudo defaults write com.apple.loginwindow LoginHook /path/to/login/hook/script
     ```

### User Logout, System Restart, and System Shutdown
Figure 534 illustrates how `loginwindow` handles the procedures for logging out, restarting, or shutting down the system. When an action is selected from the Apple menu, the foreground process sends the appropriate Apple Event to `loginwindow`. Applications can also send these events programmatically. For example, the following AppleScript code sends the `kAELogOut` event to `loginwindow`:

```applescript
tell application "loginwindow"
    «event aevtlogo»
end tell
```

When `loginwindow` sends a `kAEQuitApplication` event to a Cocoa application, the Application Kit framework calls the `applicationShouldTerminate:` delegate method of the application. If the application wishes to cancel the termination sequence, it must implement this delegate and return `NSTerminateCancel`.

In a graceful termination sequence, `loginwindow` displays a dialog requesting confirmation from the user, typically with a two-minute countdown timer. If system shutdown is initiated, `launchd` will stop each job by sending it a `SIGTERM` signal and sets the `SE_SHUTDOWN` bit in each session's "flags" variable, preventing the session from being restarted and further user logins.

### Single-User Startup
Figure 535 shows the sequence of events during single-user startup. `launchd` skips running `/etc/rc` and creating any sessions, and simply runs the shell defined by the `_PATH_BSHELL` macro. A single-user boot implies verbose mode. It is also possible to boot the system and stay in single-user mode by manually executing `/etc/rc` from the single-user shell prompt.

### Installation Startup
An installation boot is triggered when `/etc/rc` detects the presence of both the `/etc/rc.cdrom` file and the `/System/Installation/` directory. The contents of `/System/Installation/` on an installation CD-ROM include:

- **CDIS/Installation Log.app:** An installation log viewer that can show detailed installation progress.
- **CDIS/LCA.app:** The Language Chooser Application, which includes support for Bluetooth device discovery and setup.
- **CDIS/instlogd:** A daemon that maintains an external log buffer shared with the installation log viewer.
- **CDIS/preheat.sh:** A script that, if present, can be run to reduce CD-ROM booting time.
- **Packages/:** Contains various software packages (pkg files).

Important operations performed by `/etc/rc.cdrom` include:

- Disabling on-the-fly prebinding by setting the `DYLD_NO_FIX_PREBINDING` environment variable to 1.
- Sanity-checking the system date and time, setting it to April 1, 1976, if it is found to be earlier.
- Setting the value of the `kern.maxvnodes` sysctl variable to 2500.
- Running the `/System/Installation/CDIS/preheat.sh` script if it exists.
- Running `kextd` with the `-j` option to improve startup time.
- Bringing up the loopback interface with an address of 127.0.0.1 and a netmask of 255.0.0.0.
- Creating a 512KB RAM disk for `/Volumes/` and a 128KB RAM disk for use by `securityd` and `/var/run/`.
- Starting the external log buffer daemon (`instlogd`), the system log daemon (`syslogd`), and the NetInfo binder daemon (`nibindd`).
- Logging the system boot time to the system log.
- Registering Mach bootstrap servers.
- Disabling sleep modes and starting the Crash Reporter daemon.
- Preparing to launch the installer application with the appropriate arguments.

### Deprecated Ways to Bootstrap Servers
In Mac OS X 10.4, not all boot-time daemons have been migrated to `launchd`. The system continues to support multiple boot-time daemon startup mechanisms, including:

- **Property list files in `/etc/mach_init.d/` and `/etc/mach_init_per_user.d/`:** These directories contain property list files for system-wide and per-user daemons, respectively.
- **SystemStarter program (`/sbin/SystemStarter`):** Handles daemons whose property list files are located in `/System/Library/StartupItems/` and `/Library/StartupItems/`.

### xnu Kernel Source
The xnu kernel source contains several directories and files, as listed in Table 61. The `bsd/` directory contains the BSD kernel, while the `iokit/` directory contains the I/O Kit kernel runtime. The `libkern/` directory contains the kernel library, and the `osfmk/` directory contains the Mach kernel. The `pexpert/` directory contains the Platform Expert.

Table 62 lists some contents of the `bsd/` directory, including various subsystems such as BSM, cryptography, drivers, and networking. Table 63 lists some contents of the `iokit/` directory, including I/O Kit classes and utility functions. Table 64 lists some contents of the `libkern/` directory, including C++ classes and routines for atomic operations and debugging.

### libkern Classes and Routines
Table 65 shows the important classes contained in the `libkern` library, including base and abstract classes, collection classes, and iterator classes. These classes provide essential functionality for the Mac OS X kernel, such as reference counting, type-safe object casting, and collection management.

This structured and professional approach should help in understanding the various components and mechanisms involved in the Mac OS X startup and kernel environment.