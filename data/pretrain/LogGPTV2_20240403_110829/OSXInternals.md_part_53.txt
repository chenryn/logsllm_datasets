the active console user. This enables a remotely logged-in user to launch graphical applicationsfor example, using the open
command-line program.
The Mac OS X login mechanism supports running a custom script with superuser privileges when a user logs in. This scripta login hookis
executed by loginwindow. It is enabled on a system-wide basis, but it receives the short name of the logging-in user as its first argument. A
login hook can be registered either by editing the /etc/ttys file or by setting a property for loginwindow in the Mac OS X defaults system. In
the former case, the line containing the path to loginwindow in /etc/ttys is modified to include the -LoginHook argument, whose value is the
login hook's path.
# /etc/ttys
...
# Before login hook:
#
# console "/System/Library/CoreServices/loginwindow.app/Contents/MacOS/loginwindow"
vt100 on secure onoption="/usr/libexec/getty std.9600"
#
# After login hook:
console "/System/Library/CoreServices/loginwindow.app/Contents/MacOS/loginwindow
-LoginHook /path/to/login/hook/script" vt100 on secure onoption="/usr/libexec/getty
std.9600"
...
Alternatively, the defaults command can be used to set the LoginHook property for loginwindow.
$ sudo defaults write com.apple.loginwindow LoginHook /path/to/login/hook/script
5.10.2.2. User Logout, System Restart, and System Shutdown
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh90B0.htm 20.08.2007
Chapter 5. Kernel and User-Level Startup Page 56 of 59
Figure 534 shows how loginwindow handles the procedures for logging out, restarting, or shutting down the system. Selecting an action from
the Apple menu causes the foreground process to send the appropriate Apple Event to loginwindow. An application can also send these events
programmatically. For example, the following AppleScript code fragment sends the kAELogOut event to loginwindow:
tell application "loginwindow"
«event aevtlogo»
end tell
Figure 534. The handling of user logout, system restart, and system shutdown by loginwindow
[View full size image]
With reference to Figure 534, when loginwindow sends a kAEQuitApplication to a Cocoa application, the event is not seen as is by the
application. Instead, the Application Kit framework calls the applicationShouldTerminate: delegate method of the application. If the
application wishes to cancel the termination sequence, it must implement this delegate and return NSTerminateCancel from it.
In a graceful termination sequence, loginwindow displays a dialog requesting confirmation from the user. Typically, the dialog has a two-
minute countdown timer, after which loginwindow proceeds with the termination sequence.
Note that when system shutdown is initiated, launchd will stop each job by sending it a SIGTERM signal. Moreover, launchd sets the
SE_SHUTDOWN bit in each session's "flags" variable, which prevents the session from being restarted. Further user logins are also disabled.
5.10.3. Single-User Startup
Figure 535 shows the sequence of events that occurs during single-user startup. launchd skips running /etc/rc and creating any sessions, and
simply runs the shell defined by the _PATH_BSHELL macro in . Note that a single-user boot implies verbose mode. It is also possible
to boot the system and stay in single-user mode by manually executing /etc/rc from the single-user shell prompt.
Figure 535. Single-user bootstrap through launchd
[View full size image]
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh90B0.htm 20.08.2007
Chapter 5. Kernel and User-Level Startup Page 57 of 59
5.10.4. Installation Startup
An installation boot is triggered when /etc/rc detects the presence of both the /etc/rc.cdrom file and the /System/Installation/
directory. Neither of these two exists on an installed Mac OS X system. The contents of /System/Installation/ on an installation CD-ROM
include the following.
 CDIS/Installation Log.app is an installation log viewer that can show detailed installation progress. It provides options such as Show
Errors Only, Show Errors and Progress, and Show Everything.
 CDIS/LCA.app is the Language Chooser Application. It also contains support for Bluetooth device discovery and setup, along with
instructions for setting up Bluetooth peripherals before commencing installation.
 CDIS/instlogd is a daemon that maintains an external log buffer, which is shared with the installation log viewer. It listens on a local
socket on the 127.0.0.1 address.
 CDIS/preheat.sh is a script thatif presentcan be run to reduce CD-ROM booting time.
 Packages/ contains various software packagesthat is, "pkg" files.
Important operations performed by /etc/rc.cdrom include the following.
 It disables on-the-fly prebinding for the duration of the CD-ROM boot by setting the DYLD_NO_FIX_PREBINDING environment variable to
1. This prevents dyld from notifying the prebinding agent if an executable could not be launched using its prebinding information for
some reason.
 It sanity-checks the system date and time. The date is explicitly set to April 1, 1976, if it is found to be "less" than that date.
 It sets the value of the kern.maxvnodes sysctl variable to 2500.
 It runs the /System/Installation/CDIS/preheat.sh preheat script if it exists.
 It runs kextd with the -j option, which causes kextd not to jettison the kernel linker. Consequently, kextd loads native drivers in the
kernel and exits, allowing the kernel to continue handling all load requests. Using this option along with an appropriate mkext cache
improves startup time from a CD-ROM.
 It brings the loopback interface up with an address of 127.0.0.1 and a netmask of 255.0.0.0. This allows local NetInfo communication.
 It creates a 512KB RAM disk using the hdik program for in-kernel disk image mounting. This RAM disk is used for /Volumes/.
dev=`hdik -drivekey system-image=yes -nomount ram://1024` # 512KB
if [ $? -eq 0 ] ; then
newfs $dev
mount -o union -o nobrowse $dev /Volumes
fi
 It checks for the presence of the Installation Log application. If present, the application is used as a graphical crash catcher, and the
CatchExit environment variable is set to GUI. If the application is absent, the variable is set to CLI.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh90B0.htm 20.08.2007
Chapter 5. Kernel and User-Level Startup Page 58 of 59
 It creates a 128KB RAM disk for use by securityd.
dev=`hdik -drivekey system-image=yes -nomount ram://256` # 128KB
newfs $dev
mount -o union -o nobrowse $dev /var/tmp
mkdir -m 1777 /var/tmp/mds
 It creates a 128KB RAM disk that is mounted on /var/run/. The system log daemon (syslogd) needs it to create the /var/run/syslog
pipe.
 It starts the external log buffer daemon (instlogd), the system log daemon (syslogd), and the NetInfo binder daemon (nibindd).
 It logs the system boot time to the system log for potential debugging or profiling of the installation process.
/usr/sbin/sysctl kern.boottime | head -1 | /usr/bin/logger -p install.debug -t ""
 It calls /usr/libexec/register_mach_bootstrap_servers to start services whose configuration files are located
in /etc/mach_init.d/.
 It calls /usr/bin/pmset to disable sleeping of the display, the disk, and the system. It also prevents the machine from sleeping upon
pressing of the power button. Moreover, it tells the power management subsystem to reduce processor speed if necessary.
 It starts the Crash Reporter daemon (/usr/libexec/crashreporterd). If the CatchExit environment variable is set to CLI, it creates a
1MB RAM disk, creates a file system on it, and mounts it on /Library/Logs/.
 It runs /etc/rc.cdrom.local if it exists.
Deprecated Ways to Bootstrap Servers
In Mac OS X 10.4, not all boot-time daemons have been migrated to launchd. Therefore, the system continues to support
multiple boot-time daemon startup mechanisms.
The /etc/mach_init.d/ and /etc/mach_init_per_user.d/ directories contain property list files for system-wide and per-
user daemons, respectively. These daemons can be launched using a bootstrapping mechanism similar to launchd. The
mechanism is deprecated beginning with Mac OS X 10.4. In this mechanism,
the /usr/libexec/register_mach_bootstrap_servers program parses the daemons' property list files and makes RPC calls
to either launchd or mach_init (on Mac OS X 10.3) to create the corresponding services. In particular, the mechanism
supports on-demand launching of daemons.
The SystemStarter program (/sbin/SystemStarter) handles daemons whose property list files are located
in /System/Library/StartupItems/ (system-provided startup items) and /Library/StartupItems/ (user-installed startup
items).
As we saw in Figure 530, launchd executes the /etc/rc startup script, which calls upon all supported daemon startup
mechanisms.
 It starts Apple Type Services by running StartATSServer, which resides in the Support/ subdirectory of the ATS subframework within
the Application Services umbrella framework.
 It starts the pasteboard server (/System/Library/CoreServices/pbs).
Finally, /etc/rc.cdrom prepares to launch the installer application (/Application/Utilities/Installer.app) with the appropriate
arguments, depending on whether it is an automated installation (the /etc/minstallconfig.xml file exists), a custom installationsay, of an
application (the /etc/rc.cdrom.packagePath file exists)or a typical operating system installation. In the latter case, installation begins with
the /System/Installation/Packages/OSInstall.mpkg metapackage, which includes BaseSystem.pkg, Essentials.pkg, BSD.pkg, and
others as its contents. It also contains the configuration migratory program (ConfMigrator) as a resource.
Unless it is an automated installation, the installer program is run through LCA, which displays the installation progress bar.
# /etc/rc.cdrom
...
LAUNCH=/System/Installation/CDIS/LCA.app/Contents/MacOS/LCA
if [ ! -x ${LAUNCH} ]; then
LAUNCH=/System/Installation/CDIS/splash
fi
INSTALLER=/Applications/Utilities/Installer.app/Contents/MacOS/Installer
STDARGS="-ExternalLog YES -NSDisabledCharacterPaletteMenuItem YES"
EXTRAARGS=`cat /System/Installation/CDIS/AdditionalInstallerArgs 2>/dev/null`
...
${LAUNCH} ${INSTALLER} \
-ReadVerifyMedia YES \
${STDARGS} \
${EXTRAARGS} \
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh90B0.htm 20.08.2007
Chapter 5. Kernel and User-Level Startup Page 59 of 59
/System/Installation/Packages/OSInstall.mpkg \
2>&1 | /usr/bin/logger -t "" -p install.warn
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh90B0.htm 20.08.2007
Chapter 6. The xnu Kernel Page 1 of 137
Chapter 6. The xnu Kernel
We saw in previous chapters that the Mac OS X kernel environment consists of Mach and BSD
derivatives, the I/O Kit driver framework, in-kernel libraries, loadable I/O Kit drivers, and other
loadable extensions. Although the Darwin xnu package contains only about half the code that
potentially runs in the kernel environment, we will consider xnu to be the kernel. In this chapter, we
will look at several abstractions and mechanisms in xnu, while deferring subsystem-specific details to
later chapters.
6.1. xnu Source
In Chapter 5, we visited various parts of the kernel as we traced the execution of kernel code during
system startup. Let us now take a brief tour of the xnu kernel source to better understand how the
source is organized. Since the xnu package contains close to 3000 files, it is impractical to visit each
file. We will only look at major directories in the xnu source tree to enumerate the components
implemented within.
In this section, file and directory names are listed relative to the top-level directory in the xnu source
archive. For example, given that the xnu-.tar.gz Darwin package will unpack into a top-
level directory called xnu-, we refer to a file xnu-/foo/bar as foo/bar.
At the topmost level, xnu contains the directories listed in Table 61. Besides these, there exist a few
other miscellaneous files and directories that are not important in the current discussion. We will look
at some of them later in this chapter in the context of kernel compilation (Section 6.10).
Table 61. Primary Components of the xnu Kernel Source
Directory Component
bsd/ The BSD kernel
config/ Lists of per-subsystem exported functions, property list files for pseudo-
extensions
iokit/ The I/O Kit kernel runtime
libkern/ The kernel library
libsa/ The stand-alone library
osfmk/ The Mach kernel
pexpert/ The Platform Expert
Table 62 lists some contents of the bsd/ directory. Section 2.4.2 provides an overview of the
functionality implemented in the kernel's BSD portion.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 2 of 137
Table 62. Primary Contents of the bsd/ Directory
Directory Description
bsd/bsm/ Basic Security Module (BSM) headers used by the kernel's
auditing mechanism. BSM is both a security audit format and an
API used to track security-related events in the operating system.
bsd/crypto/ Various cipher and hash implementations: AES (Rijndael),
Blowfish, CAST-128, DES, MD5, RC4, SHA-1, and SHA-2.
bsd/dev/memdev.c A RAM disk driver (for /dev/mdX devices).
bsd/dev/ppc/ BSD drivers for entities such
as /dev/console, /dev/mem, /dev/kmem, /dev/null, /dev/zero,
and a BSD driver wrapper for the NVRAM. The latter calls
Platform Expert functions to perform the actual work. The BSD
device switch tables for block and character devices are also
initialized here. Also present are some machine-dependent
functions used in the BSD subsystem, such as unix_syscall(),
unix_syscall_return(), ppc_gettimeofday(), and signal-
handling functions.
bsd/dev/random/ An implementation of the Yarrow[a] pseudorandom number
generator (PRNG) and the /dev/random device.
bsd/dev/unix_startup.c Functions that initialize various BSD-related data structures during
system startup.
bsd/dev/vn/ The vnode disk driver, which provides block and character
interfaces to a vnode, allowing files to be treated as disks.
The /usr/libexec/vndevice utility is used to control the driver.
bsd/hfs/ The HFS and HFS Plus file systems.
bsd/isofs/ The ISO 9660 file system for read-only optical discs.
bsd/kern/ The core of xnu's BSD component. It contains implementations of
asynchronous I/O calls, the kauth mechanism, the audit
mechanism, process-related system calls, sysctl calls, POSIX IPC,
System V IPC, the unified buffer cache, sockets, mbufs, and
various other system calls.
bsd/libkern/ Utility routines such as bcd(), bcmp(), inet_ntoa(), rindex(),
and strtol().
bsd/miscfs/ Miscellaneous file systems: the dead file system for vnodes whose
underlying file system has been dissociated (deadfs), the device
file system (devfs), the file descriptor file system (fdesc), the fifo
file system (fifofs), the null mount file system (nullfs), the file
system for device-special files (specfs), the in-memory synthfs
used for synthesizing mount points, the union mount file system
(union), and the volume ID file system (volfs).
bsd/net/ Networking: the Berkeley packet filter (BPF), bridging, data link
interface layer (DLIL), Ethernet, ARP, PPP, routing, IEEE 802.1q
(VLAN), IEEE 802.3ad (Link Aggregation), etc.
bsd/netat/ AppleTalk Networking.
bsd/netinet/ IPv4 Networking: BOOTP, DHCP, ICMP, TCP, UDP, IP, the
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 3 of 137
"dummynet" bandwidth limiter, and divert sockets.
bsd/netinet6/ IPv6 Networking.
bsd/netkey/ PF_KEY Key Management API (RFC 2367).
bsd/nfs/ NFS client and the kernel portion of the NFS server.
bsd/ufs/ An implementation of UFS based on the fast file system (ffs).
bsd/uxkern/ A Mach exception handler that translates Mach exceptions into
Unix signals.
bsd/vfs/ The BSD virtual file system layer.
bsd/vm/ Vnode pager (swap to/from vnodes, demand paging from files),
shared memory server calls.
[a] Yarrow gets its name from a flowering plant with distinctive flat flower heads and
lacy leaves. In China, its stalks have been used as a randomizer in divination since the
second millennium B.C.
Table 63 lists some contents of the iokit/ directory. Section 2.4.3 provides an overview of the I/O
Kit's functionality.
Table 63. Primary Contents of the iokit/ Directory
Directory Description
iokit/Drivers/platform/ Implementations of I/O Kit classes listed in the
KernelConfigTables arraye.g., AppleCPU, AppleNMI,
and AppleNVRAM. As we will see in Chapter 10, the I/O
Catalog is initialized with the contents of this array.
iokit/Families/IONVRAM/ Subclass of the NVRAM controller classsimply calls
the Platform Expert to register the NVRAM controller,
which publishes the "IONVRAM" resource in the I/O
Kit.
iokit/Families/IOSystemManagement/ Watchdog timer.
iokit/IOKit/ I/O Kit header files.
iokit/Kernel/ Implementations of core I/O Kit classes and utility
functions.
iokit/KernelConfigTables.cpp Declarations of the list of "fake" kernel extensions and
the KernelConfigTables array.
iokit/bsddev/ Support functions for BSDe.g., the di_root_image()
netboot hook called by BSD to mount a disk image as
the root device, and several other functions used by
BSD while searching for a root device.
Table 64 lists some contents of the libkern/ directory. Section 2.4.4 provides an overview of
libkern's functionality.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 4 of 137
Table 64. Primary Contents of the libkern/ Directory
Directory Description
libkern/c++/ Implementations of various libkern classes (see Table 65).
libkern/gen/ High-level-language wrappers around assembly functions for atomic
operations, miscellaneous debugging functions.
libkern/kmod/ Start and stop routines for the kernel's C++ and C language runtime
environments.
libkern/libkern/ libkern header files.
libkern/mach-o/ A header describing the format of Mach-O files (loader.h), and
another header containing definitions for accessing Mach-O headers
(mach_header.h).
libkern/ppc/ Implementations of PowerPC-specific bcmp(), memcmp(), strlen(),
and atomic increment/decrement functions.
libkern/stdio/ An implementation of scanf().
libkern/uuid/ Routines for parsing and generating universally unique identifiers
(UUIDs) based on the first Ethernet device's hardware address and the
current time.
libkern is part of the Kernel framework (Kernel.framework), which is exposed to the developer. Its
headers are located in /System/Library/Frameworks/Kernel.framework/Headers/libkern/.
Table 65 shows the important classes contained in this library.
Table 65. libkern Classes and Routines
Base and Abstract Classes
OSObject The abstract base class for the Mac OS X kernel. It derives from the
true root class OSMetaClassBase. It implements basic functionality
such as allocation primitives, reference counting, and type-safe object
casting.
OSMetaClass A peer class to OSObject. It derives from the true root class
OSMetaClassBase. An instance of this class represents one class that
is known by the I/O Kit's RTTI system.
OSCollection The abstract superclass for all collections.
OSIterator The abstract superclass for iterator classes.
Collection Classes
OSArray A class for maintaining lists of object references.
OSDictionary A class for maintaining dictionaries of object references.
OSOrderedSet A class for maintaining and sorting sets of OSMetaClassBase-derived
objects.
OSSet A class for storing OSMetaClassBase-derived objects.
OSCollectionIterator A class that provides a mechanism to iterate over OSCollection-
derived collections.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007