this, we first unwind the relationship between the configuration
parameters (InputP) and the RV physical states by (1) obtaining the
data-flow graph of the vehicle through static analysis (if the RV’s
source code is available) and (2) analyzing the developer guide
manuals [12], [53] ( 3 ). However, using the static analysis and
manuals makes it difficult to analyze the impacts of user commands
(InputC) and environmental factors (InputE) on the states since
(1) InputC and InputE indirectly impact many physical states
through dependencies (e.g., wind affects almost all physical states)
that cannot be captured in the source code via the static analysis,
3
Fig. 2: Overview of PGFUZZ’s workflow and architecture which consists of three components: Pre-Processing, Policy-Guided Fuzzing,
and Bug Post-Processing. Inputset includes user commands, configuration parameters, and environmental factors.
and (2) the manuals usually do not mention the impacts of InputC
and InputE on the RV’s states. Therefore, we conduct a dynamic
analysis with an RV simulator for InputC and InputE to extract the
relationships between these inputs and the RV physical states ( 4 ).
This process also enables PGFUZZ to estimate the time required
for each input in the Inputset to cause a physical effect on the RV.
This information is later leveraged by PGFUZZ’s mutation engine.
Policy-Guided Fuzzing. This step mutates inputs based on the
computed distance metrics and uses them to fuzz the analyzed
program to find policy violations. The mutation engine first selects
one input among those returned by the profiling engine of the
Pre-Processing component, Inputmin ( 4 - 5 ). These test inputs are
sent to the simulator that runs the system and reports the physical
states (e.g., sensors and actuator values) of the RV ( 6 - 7 ). During
this step, we eliminate the environmental noise (e.g., vibration and
wind effect) by measuring the deviation between the reference and
current system states ( 7 ). We then compute two separate “distance
metrics” that formally define how close a system is to a policy
violation ( 8 ): (i) a global distance that checks whether the current
system states violate a policy, and (ii) a propositional distance
that intelligently mutates the inputs to lead the system closer to
violations. Lastly, the mutation engine determines the particular
inputs to minimize the distance. If none of the inputs decrease the
distance metric, new inputs from Inputmin are selected from the
input-policy maps ( 5 ). The inputs that lead to policy violations are
reported to PGFUZZ’s Bug Post-Processing component ( 9 10 ).
Bug Post-Processing. This step minimizes the sequence of inputs
triggering the detected policy violation by excluding inputs
irrelevant to the policy violation. This information is for identifying
the root cause of the violated policy.
V. PGFUZZ: POLICY-GUIDED FUZZING
In this section, we detail the components of PGFUZZ, Pre-
Processing (Section V-A), Policy-Guided Fuzzing (Section V-B),
and Bug Post-Processing (Section V-C).
A. Pre-Processing
The Pre-Processing component aims at (1) deriving MTL
formulas to express policies, and (2) building a profiling engine
to narrow the fuzzing space based on MTL formulas. This allows
us to obtain the minimal fuzzing space (Inputmin) required for the
Policy-Guided Fuzzing component (Section V-B).
1) Extracting MTL Policies: We refer to policies as the
requirements that a system must satisfy for a vehicle to be
considered safe. We identify the policies for RVs through
requirements engineering [20] and represent the policies with
formal logic that enables formal reasoning about them. The policies
are expressed with Metric Temporal Logic (MTL) [1], [42]. In
contrast to Linear Temporal Logic (LTL) [50] and Computation
Tree Logic (CTL) [26] that enable reasoning over occurrence
and event ordering, MTL extends LTL’s modalities with timing
constraints, which is more amenable to represent semantically rich
temporal and causal relations among system states of RVs.
MTL formulas are composed of a set of atomic propositions
(AP), propositional logic operators and temporal operators [42].
First, p ∈ AP is a logical statement consisting of “terms”. A
term can be a physical state of RVs, configuration parameter,
or environmental factor. Turning back to the A.CHUTE1 policy
example in Section III, (ALTt >CHUTE_ALT_MIN) is an AP, and the
ALTt and CHUTE_ALT_MIN are terms. Second, MTL supports the
propositional logic operators such as conjunction (∧), disjunction
(∨), and negation (¬). Third, the temporal operators include next
((cid:13)I), always ((cid:3)I), eventually (♦I), and until (UI) where I denotes
any non-empty positive interval. Formally, MTL formulas can
be defined as follows: ϕ ::=(cid:62) | p | ¬ϕ | ϕ1∨ϕ2 | ϕ1UIϕ2 | (cid:13)Iϕ,
where p∈AP and (cid:62)=true.
We manually identify the policies through requirements defined
in documentation and comments in the source code of popular RVs,
ArduPilot, PX4, and Paparazzi. The policies are extracted in natural
language and then expressed with MTL formulas. To make the pol-
icy identification process easier, PGFUZZ provides users with MTL
templates to express policies as shown in Table I, similar to previous
works [29], [66]. For instance, PX4’s documentation that states “If
time exceeds COM_POS_FS_DELAY seconds after GPS loss is de-
tected, the GPS fail-safe must be triggered” is expressed with MTL
as (cid:3) {(GPSloss = on) → (♦[0,COM_POS_FS_DELAY+k]GPSfail = on)}
(the time constraint k is detailed in Section VII-C4).
Through this process, we identified 56 policies for our target
RVs, 30 for ArduPilot, 21 for PX4, and 5 for Paparazzi (See
Table XII in Appendix E). We measured the time required by a
knowledgeable user to identify the policies and express them as
MTL formulas. Particularly, two authors spent a total of 7.5 hours
identifying ArduPilot policies, 3.5 hours for PX4, and 2.4 hours
for Paparazzi. The time includes studying the target RV’s official
documentation/source code, writing policies in natural language,
4
DocumentsSource code(optional)Inputset1b1a1c2)Policy-Guided FuzzingMutation engine5Input-policy mapsSimulator6Send an inputCheck policy violation8Calculate distance metrics3)Bug Post-ProcessingPolicy and MTL formulasIdentify which inputs are related to each policyInputminimization10Bug pool9Extract policies denoted by MTL formulas2Profiling engine4Static analysisto get DFG3Noise elimination7A set of inputs which cause a policy violationEliminate environmental noiseCorrelating each policy and inputsDynamic analysis(command2, policy1)(parameter7, policy2)(environment3, policy2)…1)Pre-processingStates measured from sensorsSend each propositional distanceFiltered statesID
T1
T2
T3
Policy Template Description
MTL Notation
termj should be true within time k after termi is satisfied.
If termi is true, termj, ... , termn are also true and termk, ... , termm are false.
If termi, ... , termn are true, termj is also true.
termi→♦[0,k]termj
termi→[(cid:3)(termj∧...∧termn)]∧[¬(termk∧...∧termm)]
(cid:3)(termi∧...∧termn→termj)
TABLE I: Policy templates that we use to express policies as MTL formulas for fuzzing.
translating them from natural language to MTL, and detecting the
policy conflicts and reconciling them.
2) Profiling Engine: RVs have a large input space. For
instance, ArduPilot v.4.0.3 supports 1,140 configuration parameters
(InputP), 58 user commands (InputC), and 168 environment
factors (InputE). The profiling engine aims to exclude inputs
unrelated to the fuzzed policies to reduce this large input space.
Figure 3 shows the six steps of the profiling engine. In the first
step ( 1 ), we map each policy into a list of terms, where each term
represents a physical state of the RV, configuration parameter, or en-
vironmental factor. For example, A.CHUTE1 policy2 is decomposed
into five terms: (1) parachute, armed, mode, and altitude are phys-
ical states of the RV and (2) CHUTE_ALT_MIN is a configuration
parameter. We refer to this mapping as policy-term ( 1a ).
Second, we map InputP to terms through static analysis to
identify which policy terms related to InputP ( 2 ). We refer to
this mapping as parameter-term ( 2a ). To illustrate, ABS_PRESS
configuration parameter is an offset value for computing barometric
altitude. PGFUZZ includes the ABS_PRESS parameter into its
fuzzing input space to test A.CHUTE1 policy because this parameter
value is used to compute the altitude state.
Third, we derive dependencies among InputP, InputC,
InputE via dependency analysis to infer relationships among these
inputs ( 3 ). For instance, a user desiring to deploy a parachute
via Parachute command needs to change CHUTE_ENABLED
configuration parameter ( 3a ). Therefore, a dependency between
Parachute user
parameter
command
CHUTE_ENABLED is identified.
configuration
and
Fourth, we perform dynamic analysis with RV simulators
to exclude the read-only and unsupported InputP from the
constructed parameter-term map ( 2a ). This step is crucial to reduce
the parameter-term map size. We then map InputC and InputE
into policy terms through dynamic analysis ( 4 ). For example,
A.CHUTE1 policy includes altitude term. PGFUZZ includes the
WIND_SPEED environmental parameter in its fuzzing space (See
InputE-term map ( 4b ) because it changes the altitude of the
vehicle. Here, we exclude ABS_PRESS configuration parameter.
Though it is related to the altitude term of the policy, ABS_PRESS
is a read-only parameter (See InputP-term map ( 4a ).
Fifth ( 5 ), the profiling engine first extracts the inputs related to
each policy from input-term mappings, 4a , 4b , and 4c , then, it con-
structs input-policy map ( 5a ). For instance, the A.CHUTE1 policy in-
cludes the altitude term. The profiling engine finds inputs related to
the altitude including Wind_speed and Parachute in Figure 3.
Lastly, it analyzes the unknown time constraints of MTL
formulas ( 6 ). For instance, A.BRAKE1 policy3 is represented as
(cid:3){(Modet = BRAKE) → (♦[0,k]Post = Post−1)}. To detect true
(cid:54)=
2(cid:3){(Parachute=on)} → {(Armed = true) ∧ (Modet
FLIP/ACRO)∧(ALTt≤ALTt−1)∧(ALTt >CHUTE_ALT_MIN)}
3When the vehicle is in BRAKE mode, it must stop within k seconds.
positive policy violations, we obtain unknown time constraints k
by conducting dynamic analysis with the input-policy map ( 5a ).
Mapping Each Policy onto Terms ( 1 ). A policy is composed
of the RV’s physical states, configuration parameters, and
environmental factors. In this step, we decompose each policy
into terms, where each term is further analyzed to find the related
inputs to be fuzzed (detailed below). First, we manually construct
a list of physical states of the studied RVs (e.g., altitude, roll angle)
through their manuals (the complete list of states is presented
in Table XI Appendix A). If a policy includes one of those states,
it is marked as a physical state and added to the policy-term map.
Turning to A.CHUTE1 policy, parachute, armed, mode, and altitude
are all physical states and added to the policy-term map ( 1a ).
Second, a policy may contain configuration parameters (InputP)
and environmental factors (InputE) because a vehicle’s operation
depends on their values. We search each term that includes InputP
and InputE terms to find out whether a policy includes them. If
there is a match, we similarly add these terms to the policy-term
map. For instance, A.CHUTE1 policy includes CHUTE_ALT_MIN
configuration parameter, and no environmental factor as a term;
thus, the CHUTE_ALT_MIN is added to the policy-term map.
Static Analysis for Narrowing Fuzzing Space ( 2 ). The
static analysis is used for identifying the terms related to each
configuration parameter (InputP, 2 and 2a in Figure 3). We use
two complementary approaches to identify the related terms: (1)
conducting static analysis at the LLVM intermediate representation
(IR) level, and (2) parsing vehicle manuals.
First, we map each configuration parameter on the vehicle
manuals to a variable in the source code. This allows us to know
how the control program imports the parameters to the source code.
For instance, our target control programs (i.e., ArduPilot, PX4, and
Paparazzi) parses XML files containing a list of parameter names
and valid ranges, then convert them to variables in the source code.
Figure 4 shows how each control program accesses the imported
configuration parameters. ArduPilot and PX4 store the parameters
as data members of classes and access the parameters via a function
call or directly access the data member. Paparazzi loads the param-
eters’ values to the data section of memory via global variables.
Second, we build def-use chains of the identified parameter
variables to map each parameter to related terms in the MTL
formulas ( 3 in Figure 2). We use LLVM to obtain the def-use
chains defining these terms in the code. The code to load the
imported parameters, which we previously identified, serves as the
starting point to build these def-use chains. For scalars, we follow
load and store operations recursively. For pointers, to identify
data flow via pointer reference/dereference operators, we perform
an inter-procedural, path-insensitive, and flow-sensitive points-to
analysis [62]. More precisely, the profiling engine operates in three
steps: (1) performs Andersen’s pointer analysis [8] to identify
aliases of the parameter variables, (2) transforms the code to its
single static assignment form [59] and builds the data-flow graph
(DFG), and (3) collects the def-use chain of the identified parameter
variable from the built DFG.
5
Fig. 3: Profiling engine ( 4 in Figure 2) steps to reduce the large input space of RVs. It outputs an input set related to each policy (the
input-policy map 5a ) using input-term maps ( 4a , 4b , and 4c ) via static and dynamic analysis.
Fig. 4: A code block that illustrates how the control programs
access parameters after they import the parameters to their source
code. The blue-colored variables represent the parameters.
Third, we manually construct a synonym table (as shown
in Figure 5). This table maps source code variable names to the
names used as terms by the MTL formulas. Using this table and
the previously generated def-use chains, the profiling step can
determine which source code variable corresponds to which term in
the considered MTL formulas and, in turn, which inputs influence
which internal variable (Figure 5). In this way, PGFUZZ knows
which inputs should be mutated to affect specific terms in the
identified MTL formulas. For example, this step finds that TEMP
configuration parameter is used for the altitude state because
altitude at line 320 reads temp, which comes from the TEMP
parameter value. By using this knowledge, PGFUZZ mutates the
TEMP parameter when, for instance, it tests the A.CHUTE1 policy,
since this policy includes the altitude state ( 1a in Figure 3). We
manually build a synonym table for ArduPilot, PX4, and Paparazzi.
Lastly, the profiling engine parses official documentation,
provided by RVs’ control software developers in XML file format.
This documentation describes each configuration parameter’s role.
It has been designed to help developers and/or users. The profiling
engine first extracts all words from each parameter’s description
in this documentation, and then it matches the extracted words with
the synonym table. For instance, ArduPilot’s manual states that “it
is an angle limit (to maintain altitude) time constant” to explain the
ATC_ANG_LIM_TC parameter’s role. Our profiling step matches the
ATC_ANG_LIM_TC parameter with the altitude term.
Dependency among Inputs ( 3 ).
Some inputs need to
be preceded by other inputs to be executed. For instance,
the Parachute command can only be triggered if
the
CHUTE_ENABLED parameter is true. In this step, we first find such
inputs, which cannot be effective unless another input precedes.
Fig. 5: An example code block and def-use chain for illustrating the
profiling engine’s static analysis logic, which recursively searches
the read access of the def-use chain and compares the variable
name in the read access with synonyms.
Then, we identify which input should be executed first to execute
the target input. Further, we narrow down the fuzzing inputs by
eliminating user commands (InputC) and configuration parameters
(InputP) that RV simulators do not support ( 4 in Figure 3).
First, we find those InputC and InputP which cannot be
effective unless another input precedes. To this end, we conduct the
following steps. (1) We log all state values (e.g., altitude and roll
angle) for one minute per each operation mode (e.g., FLIP flight
mode) without any input. Then, we calculate a standard deviation
of each vehicle state (SD{State(i)}). (2) We assign a random value
(randj) to inputj where inputj∈ InputC∪InputP, and execute
it in the simulator. Specifically, we randomly assign true or false
when an input requires a Boolean value, and a value within a valid
range specified in the vehicle documentation when the input takes a
continuous value. If the documentation does not explicitly mention
the valid range, we assign a random number within -232 − 232.
(3) We then log all state values for one minute per each operation
mode. We repeat these three steps 10 times and compute a standard
deviation per each vehicle state (SD{State(i,j)}). After these steps
are completed, we obtain two types of states: states without any
input and states with the inputj. If the inputj does not affect any
state values (|SD{State(i)}−SD{State(i,j)}|) _param_nav_dll_act;// Paparazzistatic float phi_pgain[] = STABILIZATION_ATTITUDE_PHI_PGAIN;staticfloat psi_pgain[] = STABILIZATION_ATTITUDE_PSI_PGAIN;ifMode_c== ALT_HOLD:P1 = 1else:P1 = -1if Throttle_c== 1500:P2 = 1else:P2 = -1ifALT_c!= ALT_p:P3 = 1else:P3 = -1if(-1 * MIN (P1, P2, P3)) SD{State(i)}), we
(i.e.,
conclude that the inputj requires the inputk to be executed.
However, if none of the inputk can enable inputj, we conclude
that the simulators do not support that inputj.
( 3
in Figure 3)).
For example, when inputj is the Parachute command and
inputk is the CAM_TRIGG_TYPE parameter, which defines how to
trigger a camera to take a picture, the altitude state values remain un-
changed. This is because the CAM_TRIGG_TYPE parameter cannot
trigger the execution of the Parachute command. On the other
hand, if inputj is the Parachute command and inputk is the
CHUTE_ENABLED parameter, altitude values change significantly
|SD{State(i)}−SD{State(i,kj)}|>SD{State(i)}. Particularly,
the CHUTE_ENABLED parameter enables deploying the parachute
with the Parachute command, which impacts the altitude.
Hence, the profiling engine identifies that the Parachute com-
mand is dependent on the CHUTE_ENABLED parameter. Therefore,
for PGFUZZ to deploy the parachute, first the CHUTE_ENABLED