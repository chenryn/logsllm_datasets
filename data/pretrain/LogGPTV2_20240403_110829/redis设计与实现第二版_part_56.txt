制位的汉明重量。
二进制位，然后调用四次 32 位 variable-precision SWAR 算法来计算这128个二进
至于variable-precision SWAR算法方面，BITCOUNT命令在每次循环中载人128个
0x10
二进制位统计算法（4）：Redis 的实现
表 22-50x3A70F21B的汉明重量聚集在 0x100c0904的最高八位
24 位至 31位
表 22-6进行移位之后，0x3A70F21B的汉明重量
24位至31位
00000000
00001000
9
16至23位
16至23位
00000000
00001100
无用值
8至15位
8至15位
00000000
无用值
00001001
00010000
0至7位
00000100
0至7位
无用值
---
## Page 379
输人时，命令中的两个循环需要执行的次数：
以 100 MB= 800 000 000 bit 来计算，BITCOUNT命令处理—个100 MB 长的位数组
第二个循环的执行次数可以用公式loop2=n mod 128计算得出。
第一个循环的执行次数可以用公式loop;=Ln÷128”计算得出。
更具体一点，我们可以用以下公式来计算 BITCOUNT命令在处理长度为n的二进制位
这个 BITCOUNT实现的算法复杂度为 O(n)，其中 n 为输人二进制位的数量。
def BITCOUNT (bits):
weight_in_byte = [0,1,1,2,1,2,2,/*...*/.7,7,8]
2 就是00000011的汉明重量
然后取出 weight_in_byte[3]的值2
例如，对于输入.00000011，程序将二进制转换为无符号整数3
程序将8位长的位数组转换成无符号整数，并在表中进行索引
一个表，记录了所有八位长位数组的汉明重量
return weight
#计算完毕，返回输入二进制位的汉明重量
while count:
while
weight=0
#初始化汉明重量为零
#计算位数组包含了多少个二进制位
bits = bits[8:]
移动指针，略过已处理的位，指向未处理的位
weight += weight_in_byte[index] 
index = bits_to_unsigned_int(bits[0:8])
#将8个位转换成无符号整数，
count -= 128
weight
weight
四个 swar 调用，每个调用计算32个二进制位的汉明重士
count >= 128:
减少未处理位的长度
减少未处理位白
ts
移动指针，略过已处理的位，
=
1+
+
swar(bits[96:128])
swar (bits[32:641)
swar(bits
的
长
[64:96]]
作为查表的索引（键）
指向未处理的位
的
第22章二进制位数组·375
---
## Page 380
376·第四部分独立功能的实现
value[2]字节。
value［l]字节。
value[0]字节。
BITOP命令将执行以下操作：
实现的：
（～）操作，所以 BITOP命令的 AND、OR、XOR 和 NOT 四个操作都是直接基于这些逻辑操作
22.5
从最开始使用遍历算法时的数亿甚至数十亿次减少到了数百万次和数千万次。
次，第二个循环零次。
来计算，BITCOUNT命令处理一个 500MB长的位数组共需要执行第一个循环三千一百二十五万
共需要执行第一个循环六百二十五万次，第二个循环零次。以 500 MB=4 000000000 bit
4）对两个位数组的第三个字节执行buf[2”&buf[2］操作，并将结果保存到
3）对两个位数组的第二个字节执行buf[1”&buf[1］操作，并将结果保存到
通过使用更好的算法，我们将计算 100MB 和 500MB长的二进制位所需的循环次数
2）对两个位数组的第一个字节执行buf[O”&buf[0］操作，并将结果保存到
其中，键×保存的位数组如图 22-18所示，而键y保存的位数组如图 22-19所示,
举个例子，假设客户端执行命令：
口在执行BITOP AND 命令时，程序用＆ 操作计算出所有输人二进制位的逻辑与结果
因为C语言直接支持对字节执行逻辑与（＆）、逻辑或（I）、逻辑异或（）和逻辑非
1）创建一个空白的位数组value，用于保存 AND 操作的结果。
BITOP AND result X Y
口
口7
口
buf[3]|
buf[2]]0
buf[1]}1
buf[0]10]10010
后保存在指定的键上面。
在执行 BITOP NOT命令时，程序用～操作计算出输人二进制位的逻辑非结果，然
然后保存在指定的键上面。
在执行BITOPXOR命令时，
然后保存在指定的键上面。
在执行BITOPOR命令时，
然后保存在指定的键上面。
BITOP命令的实现
图22-18
键x所保存的位数组
。
。
。
。
。
。
0
1
程序用~操作计算出所有输人二进制位的逻辑异或结果
程序用！操作计算出所有输人二进制位的逻辑或结果
buf[3]
buf[2]] 1 |
buf[1]]o|o] o
buf[0111111
图 22-19键y所保存的位数组
0
1
D
1
0
1
。
o
---
## Page 381
22.7
22.6
与此相反，因为 BITOP NOT 命令只接受一个位数组输人，所以它的复杂度为 O(n)。
程序需要遍历输人的每个位数组的每个字节来进行计算，所以这些命令的复杂度为0(n);
执行过程类似。
键result上面。
因为 BITOPAND、BITOPOR、BITOPXOR三个命令可以接受多个位数组作为输人
口 StackOverflow网站上的一个帖子对 Hamming Weight 主题进行了讨论，并给出了有
BITOP OR、BITOP XOR、BITOP NOT 命令的执行过程和这里列出的 BITOP AND 的
 博客文章《Counting The Number Of Set Bits In An Integer 》给出了 variable-precision
口 SDS 使用逆序来保存位数组，这种保存顺序简化了 SETBIT命令的实现，使得
5）经过前面的三次逻辑与操作，程序得到了图 22-20所示的计算结果，并将它保存在
口 BITOP命令的所有操作都使用C语言内置的位操作来实现。
BITCOUNT命令使用了查表算法和variable-precision SWAR算法来优化命令的执行
口Redis使用SDS来保存位数组。
效率。
SETBIT命令可以在不移动现有二进制位的情况下，对位数组进行空间扩展。
set-bits-in-an-integer/.
of-set-bits-in-a-32-bit-integer 。
用的参考信息：http://stackoverflow.com/questions/109023/how-to-count-the-number-
参考资料
重点回顾
图22-20键x和键y执行BITOPAND 命令产生的结果
0o0oool oo[ε]nq
buf[1]0
buf[0]1]01
。
。
1
第22章二进制位数组·377
---
## Page 382
日志：
slower-than 选项的值设为O 微秒，这样Redis服务器执行的任何命令都会被记录到慢查
最旧的那条日志，然后再添加新日志。
100条慢查询日志，那么如果服务器打算添加一条新日志的话，它就必须先删除目前保存的
一条慢查询日志删除。
slowlog-max-len 选项的值时，服务器在添加一条新的慢查询日志之前，会先将最旧的
到慢查询日志。
到慢查询日志；如果这个选项的值为500，那么执行时间超过500微秒的命令就会被记录
个功能产生的日志来监视和优化查询速度。
举个例子，如果服务器slowlog-max-len的值为100，并且假设服务器已经储存了
我们来看一个慢查询日志功能的例子，首先用CONFIG SET命令将slowlog-log-
redis> SET msg "hello worid"
接着，我们用客户端发送几条命令请求：
服务器使用先进先出的方式保存多条慢查询日志，当服务器存储的慢查询日志数量等于
口 slowlog-max-len选项指定服务器最多保存多少条慢查询日志。
举个例子，如果这个选项的值为100，那么执行时间超过100微秒的命令就会被记录
 slowlog-log-slower-than 选项指定执行时间超过多少微秒（1 秒等于1 000 000
服务器配置有两个和慢查询日志相关的选项：
Redis 的慢查询日志功能用于记录执行时间超过给定时长的命令请求，用户可以通过这
微秒）的命令请求会被记录到日志上。
慢查询日志
第23章
---
## Page 383
务器的慢查询日志数量仍然为5条：
redis> SLOWLOG GET
如果这时再执行一条SLOWLOGGET命令，那么我们将看到，
5)
3）
2)
redis> SLOWLOG GET
然后使用SLOWLOGGET命令查看服务器所保存的慢查询日志：
1）
redis> SET
2
1）
亿
1）
亿
(integer)
(integer) 5
亿
(integer)
(integer)
$
31
(integer)
(integer)
(integer)
(integer)
(integer)
3)"10086n
(integer)
(integer)
(integer)
(integer) 3
2
(intege
(integer)
"GET"
"slowlog-log-slower-than
"SET"
"CONFIG"
"CONFIG"
"hello
"msg"
"SET"
"Redis"
"0#
"SET"
"number"
"SET"
"LaS"
database "Redis'
er)
61
1378781521
53
1378781415
11
1378781425
world"
18
1378781436
2
1378781439
1378781447
P
命令以及命令参费
命令执行
行的日
津
以微秒计算
上一次执行的 SLOWLOG
第23章
慢查询日志·379
---
## Page 384
380
的值就会用作新日志的id值，之后程序会对这个属性的值增一。
◆第四部分独立功能的实现
23.1
slowlog_entry_id属性的初始值为0，每当创建一条新的慢查询日志时，这个属性
struct redisServer
服务器状态中包含了几个和慢查询日志功能有关的属性：
5)
3）
2）
慢查询记录的保存
L
1)
?
4）
unsigned long slowlog_max_len;
// 服务器配置 slowlog-max-len 选项的值
long long slowlog_log_slower_than;
// 服务器配置 slowlog-log-slower-than 选项的值
list *slowlog;
//保存了所有慢查询日志的链表
long long slowlog_entry_id;
// 下一条慢查询日志的 ID 
亿
1
(integer)
(integer)
(integer)
3) "hello 
(integer)
(integer)
E
1）
(integer)
(integer)
(integer)
N