### 25号包：
**服务器**：“你可以连接到IP=10.32.106.112，端口号为240×256+217=61657（公式中的256为约定好的常数）。”

### 29号包：
**客户端**：“我想下载linpeiman.txt。”

### 30号包：
**服务器**：“文件已发送。”

以上这些包并未真正传输文件内容。接下来我们继续查看图9。

### 图9
- **26、27、28号包**：这是数据连接的三次握手过程，由客户端主动发起（对服务器来说是被动的），连接的服务器端口为之前协商好的61557。
- **31、32、33、34、35号包**：完成了文件内容的传输，并关闭了数据连接。从图9底部可以看到文件的内容：“Life is tough. Wireshark makes it easy.”

最后，我在FTP命令行中输入了“bye”命令（见图10）。

### 图10
显示了Goodbye过程的网络包（见图11）。

### 图11
- **39号包**：客户端：“我要退出。”
- **40号包**：服务器：“好的，再见！”（FTP协议非常注重礼仪。）
- **41、42、43、44号包**：四次挥手过程，断开控制连接，完成了一次FTP的生命周期。

你可能想知道如何指定客户端采用主动还是被动模式。许多FTP客户端软件都提供了这个选项。例如，图12展示了WinSCP上的截图，选中Passive mode即表示使用被动模式。

### 图12
理论上所有FTP客户端都应该支持这两种模式，但Windows自带的ftp命令似乎只支持主动模式。图13是我试图采用被动模式的命令。

### 图13
当我输入“quote pasv”命令时，确实显示进入被动模式（Entering Passive Mode）。然而，从图14的网络包来看，12号和13号包也显示进入了被动模式，但后续的网络包却完全是主动模式的样子。

### 图14
结果表明，12号和13号包完全没有起作用。这很可能是Windows的一个bug，我在Windows 7和Windows 2003上都看到了相同的结果。如果没有用Wireshark来抓包检查，测试人员很难发现这个问题。这个不经意的发现，展示了Wireshark的价值。

## HTTP协议
2012年7月27日，在伦敦奥运会开幕式上，一位长者带着上世纪的老式电脑出现并发布了一条推特—“This is for everyone”，随即显示在体育馆的大屏幕上，传遍世界（见图1）。

### 图1
他就是57岁的Tim Berners-Lee爵士——万维网的发起者，也是第一位实现HTTP协议的工程师。英国人借此传播了开放和分享的互联网精神，展示了其在IT历史上的地位。如果北京奥运会上也要推出我们的IT界代表人物，我想大家心中已有合适的人选。

Tim所实现的HTTP协议是我们今天浏览网页的基础。他当年建立的网站至今还能访问，域名为http://info.cern.ch/。虽然这个页面已经更新过，但我们可以在http://www.w3.org/History/19921103-hypertext/hypertext/WWW/News/9201.html看到当年的内容。

HTTP的工作方式并不复杂，客户端向服务器发起请求，服务器回复响应。根据不同的需求，客户端可以使用GET、POST、PUT和HEAD等方法。例如，在网站上登录账号时可能会用到POST方法。

我在打开网页http://www.rfc-editor.org/info/rfc2616时抓了包，以此为例，来看看HTTP是如何工作的（见图2）。

### 图2
1. **三次握手**：由于HTTP基于TCP，所以首先是三次握手。从图2底部可以看到，服务器的端口号为80。
2. **图3**：4号包是客户端向服务器发送的“GET /info/rfc2616 HTTP1.1”请求，即通过1.1版的HTTP协议获取/info目录里的rfc2616文件。
3. **图3**：7号包是服务器对该请求的响应，将/info/rfc2616的内容发给客户端。
4. **图3**：9号包是客户端向服务器请求“GET /style/rfc-editor.css”。该CSS文件定义了页面的格式。
5. **图3**：11号包是服务器对该请求的响应，将/style/rfc-editor.css的内容发给客户端。

这样，客户端通过两个GET方法得到了页面内容和格式，从而打开了网页。如果点开每个HTTP包前的+号，还可以看到其协议头和详细信息。以4号包为例，它的HTTP协议头在Wireshark中如图4所示。

### 图4
包含的信息大致为：通过1.1版的HTTP协议，从服务器www.rfc-editor.org的/info目录里获取rfc2616的内容。

HTTP协议并不复杂，出问题时浏览器也会显示错误信息，所以我们很少需要使用Wireshark。不过，随着技术的进步，HTTP越来越多地应用到不需要浏览器的场景中，比如云存储技术。

云存储通常使用对象存储的方式，客户端访问文件时不使用路径和文件名，而是使用对象ID。身份验证也通过HTTP协议实现。工程师们处理此类问题时可以用Wireshark进行调试。图5是Wireshark解析后的HTTP读文件过程。

### 图5
从中可以看到文件的对象ID“59J5T5KV78EP0e7AJIV55UO93DVG4140QGQQ000ED7PR8EJH3OGUV”，以及身份验证时用到的用户名“paddy”和加密后的密码。甚至可以看到服务器回复的文件内容“I am Paddy Lin…”在这个过程中一旦发生问题，比如身份验证出错，都能从Wireshark中看到。

上面两个例子都用到了GET方法，因为它是最常用的。事实上，最早的HTTP版本只支持GET。这在今天的开发者看来很简单，但在当时却是重要的一步。现代技术都是从简单发展而来的，例如云存储，底层技术并不新颖，但组合起来的概念却是前沿的。

使用Wireshark解决HTTP问题很方便，因为整个通信过程一览无遗。但这也让人担忧—如果连传输的文件内容都可以清楚地看到，那么上网时的聊天记录，甚至密码是否也会被发现？答案是肯定的。如果没有使用加密软件，黑客或领导可以从网络包中看到你的聊天记录、搜索关键词，甚至登录论坛的用户名和密码。

### 图6
我在Google上搜索时抓的包。从4号包可以看到我使用的关键词“Max is the best boss in the world”（Max是我老板的名字，希望他此时正在监控我的网络）。如果IT部门收集这类包，就能统计员工上班时搜索的内容，通过IP地址还能查到具体是谁搜的。

### 更敏感的信息
这里有一个血淋淋的例子。我在登录www.mshua.net（一个园艺论坛）时抓了包。当客户端用POST方法把用户名和密码传给服务器时，已经在网络上暴露了身份。请看图7底部的用户名“username=wiresharktest”和密码“password=P@ssw0rd”，明文账号和密码随时可能落入坏人手中。事实也是如此，上个月我发现几位平时一本正经的网友在发成人图片，显然他们的密码已经被盗了。为了防止好奇的读者用这个账号浏览不健康信息，我已经改掉了密码。

### 图7

### 如何保护自己的信息
HTTPS是一个不错的选择。例如，使用https://www.google.com.hk/进行搜索，就不用担心老板知道你在搜些什么。图8显示了使用HTTPS搜索时抓的包，注意服务器端口是443，关键词也被加密到了“Encrypted Application Data”里。

### 图8
大多数人不需要理解HTTPS的加密算法，但管理员需要知道如何解码加密包。图9是4个HTTPS包，除了能看到“Application Data Protocol”是HTTP之外，其他信息都被加密了。

### 图9
要解码这些加密包，只需以下步骤（本例所用的网络包和密钥来自http://wiki.wireshark.org/SSL 上的snakeoil2_070531.tgz文件，建议你也下载来试试）。

1. 解压snakeoil2_070531.tgz并记住key文件的位置，例如C:\tmp\rsasnakeoil2.key。
2. 用Wireshark打开rsasnakeoil2.cap。
3. 单击Wireshark的Edit-->Preferences-->Protocols-->SSL-->RSA keys list。然后按照IP Address, Port, Protocol, Private Key 的格式填好，如图10所示。

### 图10

4. 单击OK，这些包就成功解码了。图11显示了解码后的样子，两个GET方法都可以看到。

### 图11
尽管HTTPS包能被解码，但这并不意味着它不安全，因为解码所需的密钥只能在服务器端导出。不同的服务器操作步骤有所不同，例如IIS服务器可以参考这篇文章：http://www.packetech.com/showthread.php?1585-Use-Wireshark-to-Decrypt-HTTPS。

你的老板有可能潜入Google导出密钥吗？我相信我老板做不到。

## 无懈可击的Kerberos
在古希腊神话中，冥界的大门由一头烈犬看守。此犬长有三个头，兢兢业业地守在冥河边，没有灵魂能在它醒着的时候逃离。这头烈犬就是Kerberos，安全守卫的象征。古希腊人下葬时会放好蜜饼，讨好它。现代游戏里也有它的英姿，例如《英雄无敌》里以一敌多的地狱烈犬。