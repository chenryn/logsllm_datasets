 **Migrated issue, originally created by chrismacklin (@chrismacklin)**
When using the association object pattern with a table with columns besides
the two bridging foreign keys, the docs only gently state that
association_proxy is needed. I think this needs to be called out much more
loudly and clearly in the docs, as using the secondary kwarg with an
association table with extra mapped columns can cause silent corruption of the
result set. As it stands, there's just one sentence in the docs that mentions
in an almost offhand fashion that if there are extra columns, you need to use
association_proxy:
http://docs.sqlalchemy.org/en/latest/orm/basic_relationships.html#association-
object  
"The association object pattern is a variant on many-to-many: itâ€™s used when
your association table contains additional columns beyond those which are
foreign keys to the left and right tables."
This makes it sounds like it provides something like a nice convenience,
rather than being strictly required.
It would be even better if the secondary kwarg could perform some validation
and refuse to map an association table that doesn't meet the requirement that
the only columns on the table should be the FKs participating in the
association.
In my case, I had an association table with an integer primary key ID and a
pair of FKs forming the association (I'll call them foo_id and bar_id),
associating zero-to-many instances of Bar with a single Foo, allowing
duplicate association of the same Bar multiple times to a single Foo. Suppose
I have a single instance of Foo (my_foo), with two rows in the association
table to a single instance of Bar (my_bar).
If my_foo.bars is declared with association_proxy, this holds:
assert my_foo.bars == [my_bar, my_bar]
If my_foo.bars is declared using relationship with secondary, I end up with
the corrupt result set:
assert my_foo.bars == [my_bar]
No warning or error is emitted when creating this mapping.
This seems like a pretty big footgun to me, and I think the docs need to be
MUCH more clear on this.
This was tested on Postgres 9.3
I can produce a minimal example of this issue if it is needed.