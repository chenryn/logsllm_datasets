语言底层系统调用API。在多个平台上，它定义一个实现error接口的数字类型Errno，并且在
Unix平台上，Errno的Error方法会从一个字符串表中查找错误消息，如下面展示的这样：
error接口 260
gopl
package syscall
type Errno uintptr // operating system error code
var errors = [...]string{
1: "operation not permitted", // EPERM
2: "no such file or directory", // ENOENT
3: "no such process", // ESRCH
// ...
}
func (e Errno) Error() string {
if 0  %s\n", test.env, got)
if got != test.want {
t.Errorf("%s.Eval() in %v = %q, want %q\n",
test.expr, test.env, got, test.want)
}
}
}
示例: 表达式求值 265
gopl
对于表格中的每一条记录，这个测试会解析它的表达式然后在环境变量中计算它，输出结
果。这里我们没有空间来展示Parse函数，但是如果你使用go get下载这个包你就可以看到这
个函数。
go test(§11.1) 命令会运行一个包的测试用例：
$ go test -v gopl.io/ch7/eval
这个-v标识可以让我们看到测试用例打印的输出；正常情况下像这个一样成功的测试用例会阻
止打印结果的输出。这里是测试用例里fmt.Printf语句的输出：
sqrt(A / pi)
map[A:87616 pi:3.141592653589793] => 167
pow(x, 3) + pow(y, 3)
map[x:12 y:1] => 1729
map[x:9 y:10] => 1729
5 / 9 * (F - 32)
map[F:-40] => -40
map[F:32] => 0
map[F:212] => 100
幸运的是目前为止所有的输入都是适合的格式，但是我们的运气不可能一直都有。甚至在解
释型语言中，为了静态错误检查语法是非常常见的；静态错误就是不用运行程序就可以检测
出来的错误。通过将静态检查和动态的部分分开，我们可以快速的检查错误并且对于多次检
查只执行一次而不是每次表达式计算的时候都进行检查。
让我们往Expr接口中增加另一个方法。Check方法在一个表达式语义树检查出静态错误。我们
马上会说明它的vars参数。
type Expr interface {
Eval(env Env) float64
// Check reports errors in this Expr and adds its Vars to the set.
Check(vars map[Var]bool) error
}
具体的Check方法展示在下面。literal和Var类型的计算不可能失败，所以这些类型的Check方
法会返回一个nil值。对于unary和binary的Check方法会首先检查操作符是否有效，然后递归
的检查运算单元。相似地对于call的这个方法首先检查调用的函数是否已知并且有没有正确个
数的参数，然后递归的检查每一个参数。
示例: 表达式求值 266
gopl
func (v Var) Check(vars map[Var]bool) error {
vars[v] = true
return nil
}
func (literal) Check(vars map[Var]bool) error {
return nil
}
func (u unary) Check(vars map[Var]bool) error {
if !strings.ContainsRune("+-", u.op) {
return fmt.Errorf("unexpected unary op %q", u.op)
}
return u.x.Check(vars)
}
func (b binary) Check(vars map[Var]bool) error {
if !strings.ContainsRune("+-*/", b.op) {
return fmt.Errorf("unexpected binary op %q", b.op)
}
if err := b.x.Check(vars); err != nil {
return err
}
return b.y.Check(vars)
}
func (c call) Check(vars map[Var]bool) error {
arity, ok := numParams[c.fn]
if !ok {
return fmt.Errorf("unknown function %q", c.fn)
}
if len(c.args) != arity {
return fmt.Errorf("call to %s has %d args, want %d",
c.fn, len(c.args), arity)
}
for _, arg := range c.args {
if err := arg.Check(vars); err != nil {
return err