is sent out on the network. The timing of the network
packet corresponds to the time when the key is pressed
and the sum of all these additional delays.
In the above example, the ﬂow of timing information
(when the key is pressed) goes through several iterations
of these added delays while the data moves through vari-
ous system layers at different abstractions. Each of these
layers adds noise to the timing information by imposing a
non-deterministic delay due to their internal scheduling,
buffering and processing mechanisms. Loosely coupled
timing channels are based on the idea that the timing in-
formation can be inﬂuenced at any one of these several
layers.
As long as the sender of the covert timing channel is
positioned somewhere before or within any of these lay-
ers, it can modulate event timing to transmit data. The
encoding applied by the sender is dependent on the prop-
erties of this channel that exists between itself and the
receiver. The more the number of layers between the
sender and receiver, the weaker is their coupling on the
timing channel. A loosely coupled network timing chan-
nel is one where the source and the receiver of the timing
channel are separated by many such delay inducing lay-
ers.
4.1
JitterBugs
JitterBugs are a class of mechanisms that can be used to
covertly exploit a loosely coupled network timing chan-
nel. They have two deﬁning properties. First, they have
access to (and can recognize) sensitive information. Sec-
ond, they have the ability to modulate event timing over
a loosely-coupled network timing channel.
The covert transmission need not performed at the
same time the sensitive information is captured. A Jit-
terBug can collect and store sensitive information and
replay it later over the loosely coupled network timing
channel. A JitterBug is semi-passive in nature, i.e.
it
does not generate any new events. All modulation is
done by piggybacking onto pre-existing events. This also
makes a JitterBug much harder to detect in comparison
to a more active covert timing channel source. Figure 1
shows the general architecture of a JitterBug.
62
Security ’06: 15th USENIX Security Symposium
USENIX Association
Figure 1: High-level overview of JitterBug
4.2 Example Channels
The keyboard is not the only channel susceptible to ex-
ploitation by a JitterBug. Other input peripherals can
also provide a suitable environment for a covert network
timing channel to exist. Various network computing ap-
plications allow users to remotely access hosts on the In-
ternet as if they were being used locally. Some exam-
ples of such applications include NXClient, VNC (Vir-
tual Network Computing) and Microsoft Remote Desk-
top. To minimize lag and keep the response time low,
user input is typically transmitted over the network as
soon as it is received on the sender’s side. This timing
channel can be exploited by placing a JitterBug between
the communication path of the input device and the com-
puter. Any digital input device – the mouse, digital mi-
crophone, web camera, etc. – is potentially exploitable
in this way.
Many VoIP implementations support optimizations
based on “silent intervals”, periods of speech where
nothing is being said. Network communication while us-
ing VoIP is typically regular. Packets with voice data
are sent out at regular intervals over the network. If the
silent interval feature is supported, then during periods
of silence, packets are no longer sent to conserve band-
width and system resources. By adding extraneous noise
that inﬂuences the times at which these silent intervals
are generated, a covert network timing channel can ex-
ist. In this case, a JitterBug can be placed in the audio
interface or behind a digital microphone.
5 Keyboard JitterBug
does not generate any new network packets.
It piggy-
backs its output atop existing network trafﬁc by modu-
lating timing.
The Keyboard JitterBug makes it possible to leak se-
crets over the network simply by compromising a key-
board input channel. It is, in effect, an advanced key-
logger that solves the data exﬁltration problem in a novel
way.
5.1 Architecture
Our Keyboard JitterBug is implemented as a hardware
interception device that sits between the keyboard and
the computer. It is also possible to implement a Jitter-
Bug by modifying the keyboard ﬁrmware or the internal
keyboard circuits, but the bump-in-the-wire implementa-
tion lends itself to easy installation on existing keyboards
without the need for any major modiﬁcation. Figure 2
shows the high-level architecture of the Keyboard Jitter-
Bug.
The Keyboard JitterBug adds timing information to
keypresses in the form of small jitters that are unnotice-
able to a human operator. If the user is typing in an inter-
active network application, then each keystroke will be
sent in its own network packet. Ignoring the effects of
buffering and network delays (the ideal case), the timing
of the network packets will mirror closely the times at
which the keystroke were received by the keyboard con-
troller on the host. By observing these packet timings,
an eavesdropper can reconstruct the original information
that was encoded by the Keyboard JitterBug.
In most interactive network applications (e.g. SSH,
XServer, Telnet, etc.), each keypress corresponds to a
packet (possibly encrypted) being sent out on the net-
work. The timing of these packets is closely correlated
with the times at which the keys were pressed. The Key-
board JitterBug adds small delays to keypresses that en-
code the data to be covertly exﬁltrated. By observing
the precise times packets arrive on the network, a remote
receiver can recover this data. The Keyboard JitterBug
5.2 Symbol Encoding
The Keyboard JitterBug implements a covert timing
channel by encoding information within inter-keystroke
timings. By modifying the timing of keyboard events
received by the keyboard controller, the inter-keystroke
timings are manipulated such that they satisfy certain
properties depending on the information it is trying to
send.
USENIX Association
Security ’06: 15th USENIX Security Symposium
63
Receiver(Eavesdropper)Has access to sensitive informationFlow of timinginformationTrustedUntrustedSender(JitterBug)Input DeviceInternetDestinationHost(OS/Network Stack)Figure 2: Keyboard JitterBug architecture
The sender and the receiver do not require synchro-
nized clocks but they do need clocks with sufﬁcient ac-
curacy. Our prototype Keyboard JitterBug uses its own
crystal controlled clock to govern timing.
Below we describe a simple binary encoding scheme
where each timing interval corresponding to adjacent
keystrokes encodes a single bit of information.
To encode a binary sequence {bi} using the Keyboard
JitterBug, we manipulate the sequence {ti} of times
when the keystrokes are pressed by adding a delay de-
noted by τi to each element of this original sequence.
The new sequence of events {t0
i = ti+τi,
are the times at which the keystrokes are released by the
Keyboard JitterBug to the keyboard controller. The re-
sulting sequence encodes information in the differences
δi = t0
i}, where each t0
i − t0
i−1, such that:
δi mod w =(cid:26) 0
bw/2c
if bi = 0;
if bi = 1;
where w is a real-time parameter called the timing win-
dow.
Therefore, to encode a ‘0’ the delay added is such that
δi mod w is 0 and to encode a ‘1’, the delay added is
such that δi mod w is bw/2c. In this symbol encoding
scheme, within the timing window of length w, bw/2c is
the antipode of 0.
Observe that each τi < w. Hence, w deﬁnes the max-
imum delay added to each keystroke by the Keyboard
JitterBug.
It
to transmit
is easy to understand the encoding algorithm
with the help of a simple example. Assuming a
window size w of 20 ms,
the bit se-
quence {0, 1, 0, 1, 1},
the JitterBug would add delay
such that the modiﬁed inter-keystroke timings (mod-
ulo 20) would be {0, 10, 0, 10, 10}. So if the (orig-
inal) observed inter-keystroke timings were (in ms)
{123, 145, 333, 813, 140},
the delay added would be
the modiﬁed inter-keystroke timings are
such that
{140, 150, 340, 830, 150}. Hence, the JitterBug would
use the delay sequence {17, 5, 7, 17, 10} where each of
these individual delays is less than 20 ms.
5.3 Symbol Decoding
For the Keyboard JitterBug network timing channel,
the receiver is a passive eavesdropper that needs only
the ability to measure the times at which each network
packet arrives on the network. There are two ways a re-
ceiver might extract this timing information: TCP Times-
tamps and sniffer timestamps.
The TCP Timestamp option, described in RFC 1323
[19], allows each TCP packet to contain a 32-bit times-
tamp. This 32-bit TCP timestamp is a monotonically
increasing counter and acts as a virtual-clock. In most
modern operating systems, the TCP timestamp is directly
derived from the system clock. The granularity of this
clock depends on the operating system in use. Some
commonly used values are 10 ms (some Linux distribu-
tions and FreeBSD), 500 ms (OpenBSD), and 100 ms
(Microsoft Windows). As TCP timestamps correspond
to the time at which the network packet was sent accord-
ing to the source clock, they are unaffected by network
jitter. The chief disadvantage of using TCP timestamps
is their much coarser granularity on many operating sys-
tems, requiring the use of large timing windows for sym-
bol encoding and decoding. Also, TCP timestamps are
only used for a ﬂow if both ends support the option and in
addition, the initial SYN packet for the connection con-
tained this option.
Sniffer timestamps, in contrast, represent the times at
which packets are seen by a remote network sniffer. Due
to network delays, these timestamps are offset from the
actual time the packet was sent at the source. In addi-
tion, these timing offsets are affected by any network jit-
ter present.
Based on the above discussion, it is clear that the
choice of the particular timestamp to use depends on the
exact network conditions, timing window size and the
placement of the receiver on the network relative to the
64
Security ’06: 15th USENIX Security Symposium
USENIX Association
0100100010010Add JittersJitterBug ReceiverInteractive Network Application TrafﬁcLook at timing information of packetsJitterBug SenderInternetcovert channel sender. However, we use sniffer times-
tamps exclusively for our experiments as they provide
sufﬁcient granularity for a much wider range of window
sizes and operating systems. Also, since the Keyboard
JitterBug has no control over the host or its OS, assuming
only sniffer timestamps is a more conservative assump-
tion for the attacker.
the receiver on the timing channel
records the sequence of times {bti} of network packets
differences {bδi = bti − dti−1}, encodes the bits of infor-
corresponding to each keystroke. Then the sequence of
For decoding,
mation being transmitted. To allow the receiver to handle
small variations in network transit times due to network
jitter, the decoding algorithm allows some tolerance. The
tolerance parameter ε is used by the decoder to handle
these small ﬂuctuations. The decoding algorithm is as
follows:
if
−ε < bδi ≤ ε
if w/2 − ε ≤ bδi < w/2 + ε
( mod w)
( mod w)
then bi = 0;
then bi = 1;
Figure 3: Timing Window for binary symbol decoding
The tolerance ε is an important parameter that decides
the length of guard bands that compensate for the vari-
ability in the network and other delays. Figure 3 shows
how the receiver decodes bits based on the inter-packet
delays modulo the length of the timing window. The
bands used for the decoding are calculated based on the
value of ε. From the ﬁgure it is easy to see that maximum
value of ε is w/4. Note that for a particular choice of w
and ε, the proportion of timing window allocated for ‘1’
and a ‘0’ may not be equal.
For applications where the total added jitter is an im-
portant consideration, the tolerance ε can be used during
symbol encoding to reduce the average jitter added at the
cost of some channel performance.
The length of the timing window is an important pa-
rameter. We want it to be small so as to minimize the
keyboard lag experienced by the user. At the same time,
we want to make sure the guard bands are large enough
to handle channel noise.
Because the receiver uses inter-packet delay and not
absolute packet times, there is no need for synchroniza-
tion between the source and receiver clocks. The clocks,
however, need to run at the same rate.
The above scheme allows one bit of information to be
transmitted per keypress. However, it is also possible
to use a more efﬁcient symbol alphabet with cardinality
greater than two by subdividing the window further (in-
stead of just two regions) corresponding to each possi-
ble symbol that can be transmitted. This choice however
impacts the required granularity of the timing window.
More speciﬁcally, for an encoding scheme with alphabet
A, cardinality k, and a tolerance of ε for each symbol, the
timing window w needs to be atleast 2kε units in length.
We experimentally evaluate one such scheme in Section
6.3.6.
5.4 Framing and Error Correction
Our Keyboard JitterBug assumes that there will be bursts
of contiguous keyboard activity in the interactive net-
work application generating network packets,
though
these bursts themselves might be interrupted and infre-
quent.
In our model, the only information sent over
the covert timing channel is ASCII text corresponding to
short user passphrases. Consequently, we do not perform
any detailed analysis of the performance of the channel
using different framing mechanisms. However, we tested
the Keyboard JitterBug using two very simple framing
schemes.
One approach is based on bit-stufﬁng [28], which uses
a special sequence of bits known as the Frame Sync
Sequence (FSS) that acts as frame delimiter. This se-
quence is prevented from occurring in the actual data be-
ing transmitted by “stufﬁng” additional bits when it is
encountered in the data stream. Conversely, these extra
bits are “destuffed” by the decoder at the receiver to re-
cover the original bits of information. The advantage of
using bit-stufﬁng is that it does not require any change to
the underlying low-level symbol encoding scheme. For
example, the symbol alphabet can still be binary.
An alternative framing mechanism adds a third symbol
to the low-level encoding scheme. This special symbol
in the underlying transmission alphabet acts as a frame
delimiter. Note that if the length of the timing window is
kept constant, this reduces the maximum possible length
of the guard bands used for decoding the information
symbols (0 and 1) compared to a purely binary scheme.
So this might lead to lower channel performance if net-
work noise is present. It is also useful to give more toler-
ance to the frame delimiter symbol encoding as framing
errors cause the whole frame to be discarded at the re-
ceiver. Thus, delimiter corruption causes a much higher
commensurate effect on the overall bit error rate than the
corruption of a single bit. This issue is discussed further
in Section 6.3.
USENIX Association
Security ’06: 15th USENIX Security Symposium
65
0w/2wee2eDecode as 0Decode as 1Nicodemo “Little Nicky” Scarfo, the FBI surreptitiously
installed some sort of keylogger device in the suspect’s
computer to gain access to his PGP passphrases.
In-
stalling the device apparently required physical access to
the suspect’s ofﬁce, a high-risk and expensive operation.
Once installed, the device recorded keypresses under cer-
tain conditions. This introduced a new problem: retrieval
of the captured information. A conventional keylogger
must either compromise the host software (to allow re-
mote access and ofﬂoading of captured data) or require
physical access to recover the device itself. Neither op-
tion is entirely satisfactory from the FBI’s perspective.
Compromise of the host software creates an ongoing risk
of discovery or data loss (if the host software is updated
or replaced), and physical recovery requires additional
(risky) physical access. The Keyboard JitterBug adds a
third option: leaking the targeted information atop nor-
mal network trafﬁc through the timing channel, obviat-
ing the need for subsequent retrieval or compromise of
the host.1
As the Keyboard JitterBug lies in the communica-
tion path between the keyboard and the computer sys-
tem, it has access to the keystrokes typed in by the user.
The covert network timing channel is relatively low-
bandwidth and thus the JitterBug needs the capability to
recognize and store the speciﬁc information of interest
with high conﬁdence. JitterBug’s programmable triggers
do just that by acting as recognizers of sensitive informa-
tion (like passphrases) and storing this information for
sending out later over the covert network timing chan-
nel. Programmable triggers allow a Keyboard JitterBug
to wait for particular strings to be typed. When such a
condition is detected, it stores whatever string is typed
next into its internal EEPROM for subsequent transmis-
sion.
For example, a Keyboard JitterBug might be pro-
grammed with the user name of the target as the trig-
ger, on the assumption that the following keystrokes
are likely to include a password. It might also be pro-
grammed to detect certain typing patterns that tend to in-
dicate that the user is initiating an SSH connection (e.g.
“ssh username@host”). By storing whatever is subse-
quently typed by the user, the Keyboard JitterBug effec-
tively gets hold of the user’s SSH password. The covert
channel transmits the password back to the attacker with-