title:The most dangerous code in the world: validating SSL certificates
in non-browser software
author:Martin Georgiev and
Subodh Iyengar and
Suman Jana and
Rishita Anubhai and
Dan Boneh and
Vitaly Shmatikov
The Most Dangerous Code in the World:
Validating SSL Certiﬁcates in Non-Browser Software
Martin Georgiev
The University of Texas
at Austin
Rishita Anubhai
Stanford University
Subodh Iyengar
Stanford University
Dan Boneh
Stanford University
Suman Jana
The University of Texas
at Austin
Vitaly Shmatikov
The University of Texas
at Austin
ABSTRACT
SSL (Secure Sockets Layer) is the de facto standard for secure In-
ternet communications. Security of SSL connections against an
active network attacker depends on correctly validating public-key
certiﬁcates presented when the connection is established.
We demonstrate that SSL certiﬁcate validation is completely bro-
ken in many security-critical applications and libraries. Vulnerable
software includes Amazon’s EC2 Java library and all cloud clients
based on it; Amazon’s and PayPal’s merchant SDKs responsible
for transmitting payment details from e-commerce sites to payment
gateways; integrated shopping carts such as osCommerce, ZenCart,
Ubercart, and PrestaShop; AdMob code used by mobile websites;
Chase mobile banking and several other Android apps and libraries;
Java Web-services middleware—including Apache Axis, Axis 2,
Codehaus XFire, and Pusher library for Android—and all applica-
tions employing this middleware. Any SSL connection from any of
these programs is insecure against a man-in-the-middle attack.
The root causes of these vulnerabilities are badly designed APIs
of SSL implementations (such as JSSE, OpenSSL, and GnuTLS)
and data-transport libraries (such as cURL) which present devel-
opers with a confusing array of settings and options. We analyze
perils and pitfalls of SSL certiﬁcate validation in software based on
these APIs and present our recommendations.
Categories and Subject Descriptors
C.2.0 [Computer-Communication Networks]: General—Secu-
rity and protection; K.4.4 [Computers and Society]: Electronic
Commerce—Security
Keywords
SSL, TLS, HTTPS, public-key infrastructure, public-key certiﬁ-
cates, security vulnerabilities
1.
INTRODUCTION
Originally deployed in Web browsers, SSL (Secure Sockets Lay-
er) has become the de facto standard for secure Internet communi-
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’12, October 16–18, 2012, Raleigh, North Carolina, USA.
Copyright 2012 ACM 978-1-4503-1651-4/12/10 ...$15.00.
cations. The main purpose of SSL is to provide end-to-end security
against an active, man-in-the-middle attacker. Even if the network
is completely compromised—DNS is poisoned, access points and
routers are controlled by the adversary, etc.—SSL is intended to
guarantee conﬁdentiality, authenticity, and integrity for communi-
cations between the client and the server.
Authenticating the server is a critical part of SSL connection es-
tablishment.1 This authentication takes place during the SSL hand-
shake, when the server presents its public-key certiﬁcate. In order
for the SSL connection to be secure, the client must carefully verify
that the certiﬁcate has been issued by a valid certiﬁcate authority,
has not expired (or been revoked), the name(s) listed in the certiﬁ-
cate match(es) the name of the domain that the client is connecting
to, and perform several other checks [14, 15].
SSL implementations in Web browsers are constantly evolving
through “penetrate-and-patch” testing, and many SSL-related vul-
nerabilities in browsers have been repaired over the years. SSL,
however, is also widely used in non-browser software whenever
secure Internet connections are needed. For example, SSL is used
for (1) remotely administering cloud-based virtual infrastructure
and sending local data to cloud-based storage, (2) transmitting cus-
tomers’ payment details from e-commerce servers to payment pro-
cessors such as PayPal and Amazon, (3) logging instant messenger
clients into online services, and (4) authenticating servers to mobile
applications on Android and iOS.
These programs usually do not implement SSL themselves. In-
stead, they rely on SSL libraries such as OpenSSL, GnuTLS, JSSE,
CryptoAPI, etc., as well as higher-level data-transport libraries,
such as cURL, Apache HttpClient, and urllib, that act as wrappers
around SSL libraries. In software based on Web services, there is
an additional layer of abstraction introduced by Web-services mid-
dleware such as Apache Axis, Axis 2, or Codehaus XFire.
Our contributions. We present an in-depth study of SSL connec-
tion authentication in non-browser software, focusing on how di-
verse applications and libraries on Linux, Windows, Android, and
iOS validate SSL server certiﬁcates. We use both white- and black-
box techniques to discover vulnerabilities in validation logic. Our
main conclusion is that SSL certiﬁcate validation is completely bro-
ken in many critical software applications and libraries. When
presented with self-signed and third-party certiﬁcates—including
a certiﬁcate issued by a legitimate authority to a domain called
AllYourSSLAreBelongTo.us —they establish SSL connec-
tions and send their secrets to a man-in-the-middle attacker.
1SSL also supports client authentication, but we do not analyze it
in this paper.
38This is exactly the attack that SSL is intended to protect against.
It does not involve compromised or malicious certiﬁcate authori-
ties, nor forged certiﬁcates, nor compromised private keys of legit-
imate servers. The only class of vulnerabilities we exploit are logic
errors in client-side SSL certiﬁcate validation.
The root cause of most of these vulnerabilities is the terrible de-
sign of the APIs to the underlying SSL libraries.
Instead of ex-
pressing high-level security properties of network tunnels such as
conﬁdentiality and authentication, these APIs expose low-level de-
tails of the SSL protocol to application developers. As a conse-
quence, developers often use SSL APIs incorrectly, misinterpreting
and misunderstanding their manifold parameters, options, side ef-
fects, and return values. In several cases, we observed developers
introducing new vulnerabilities when attempting to “ﬁx” certiﬁcate
validation bugs. Furthermore, deveopers often do not understand
which security properties are or are not provided by a given SSL
implementation: for example, they use SSL libraries that do not
validate certiﬁcates even when security is essential (e.g., connect-
ing to a payment processor). More prosaic, yet deadly causes in-
clude intermediate layers of the software stack silently disabling
certiﬁcate validation and developers turning off certiﬁcate valida-
tion accidentally (e.g., for testing) or intentionally.
2. OVERVIEW OF OUR RESULTS
Our study uncovered a wide variety of SSL certiﬁcate valida-
tion bugs. Affected programs include those responsible for manag-
ing cloud-based storage and computation, such as Amazon’s EC2
Java client library and Elastic Load Balancing API Tools, Apache
Libcloud, Rackspace iOS client, and Windows-based cloud storage
clients such as ElephantDrive and FilesAnywhere.
Java-based Web-services middleware, such as Apache Axis, Axis
2, and Codehaus XFire, is broken, too. So is the Android library
for Pusher notiﬁcation API and Apache ActiveMQ implementation
of Java Message Service. All programs employing this middleware
are generically insecure.
Certiﬁcate validation bugs are pervasive in “merchant SDKs,”
which typically run on e-commerce servers (e.g., online stores) and
are responsible for transmitting customers’ ﬁnancial details to pay-
ment processing gateways. Broken libraries include Amazon Flex-
ible Payments Service (both Java and PHP), as well as PayPal Pay-
ments Standard and PayPal Invoicing (both in PHP), PayPal Pay-
ments Pro, Mass Pay, and Transactional Information SOAP (all in
Java). Most payment modules for integrated shopping carts, such
as ZenCart, Ubercart, PrestaShop, and osCommerce, do not val-
idate certiﬁcates, either. A man-in-the-middle attack enables the
attacker to harvest credit card numbers, names, addresses, etc. of
the customers of any merchant who uses one of these programs for
payment processing. Mobile app providers who use AdMob’s sam-
ple code to link app instances to their AdMob accounts are vulner-
able, too, enabling the attacker to capture the developer’s account
credentials and gain access to all of her Google services.
Instant messenger clients such as Trillian and AIM do not val-
idate certiﬁcates correctly, either. A man-in-the-middle attack on
Trillian yields login credentials for all Google (including Gmail),
Yahoo!, and Windows Live services (including SkyDrive).
Not the most interesting technically, but perhaps the most devas-
tating (because of the ease of exploitation) bug is the broken certiﬁ-
cate validation in the Chase mobile banking app on Android. Even
a primitive network attacker—for example, someone in control of
a malicious Wi-Fi access point—can exploit this vulnerability to
harvest the login credentials of Chase mobile banking customers.
Other insecure Android software includes Breezy, a “secure” print-
ing app, and the ACRA library for application crash reporting.
In summary, SSL connections established by any of the above
programs are insecure against a man-in-the-middle attack. All
vulnerabilities have been empirically conﬁrmed.
Causes. For the most part, the actual SSL libraries used in these
programs are correct. Yet, regardless of which well-known library
the software relies on—whether JSSE, OpenSSL, GnuTLS, or Cryp-
toAPI, used directly or wrapped into a data-transport library such
as Apache HttpClient or cURL—it often ﬁnds a way to end up with
broken or disabled SSL certiﬁcate validation.
The primary cause of these vulnerabilities is the developers’ mis-
understanding of the numerous options, parameters, and return val-
ues of SSL libraries. For example, Amazon’s Flexible Payments
Service PHP library attempts to enable hostname veriﬁcation by
setting cURL’s CURLOPT_SSL_VERIFYHOST parameter to true. Un-
fortunately, the correct, default value of this parameter is 2; setting
it to true silently changes it to 1 and disables certiﬁcate validation.
PayPal Payments Standard PHP library introduced the same bug
when updating a previous, broken implementation. Another ex-
ample is Lynx, a text-based browser which is often used program-
matically and thus included in our study. It checks for self-signed
certiﬁcates—but only if GnuTLS’s certiﬁcate validation function
returns a negative value. Unfortunately, this function returns 0 for
certain errors, including certiﬁcates signed by an untrusted author-
ity. Chain-of-trust veriﬁcation in Lynx is thus broken.
Developers often misunderstand security guarantees provided by
SSL libraries. For example, JSSE (Java Secure Socket Extension)
has multiple interfaces for managing SSL connections. The “ad-
vanced” SSLSocketFactory API silently skips hostname veriﬁca-
tion if the algorithm ﬁeld in the SSL client is NULL or an empty
string rather than HTTPS. This is mentioned in passing in the JSSE
reference guide, yet many Java implementations of SSL-based pro-
tocols use SSLSocketFactory without performing their own host-
name veriﬁcation. Vulnerable libraries include Apache HttpClient
version 3.* and the Weberknecht implementation of WebSockets.
Any Java program based on these libraries is generically insecure
against a man-in-the-middle attack. Vulnerable programs include
SOAP Web-services middleware such as Apache Axis and Code-
haus XFire, as well as any software built on top of it (for ex-
ample, Amazon’s EC2 client library), any Android app that uses
Pusher API to manage real-time messaging (for example, GitHub’s
Gaug.es), clients of Apache ActiveMQ servers, etc.
Other bugs include using incorrect regular expressions for host-
name matching, not checking the results of certiﬁcate validation
correctly, accidentally or deliberately disabling validation, etc.
Lessons. First, the state of adversarial testing appears to be excep-
tionally poor even for critical software such as mobile banking apps
and merchant SDKs responsible for managing secure connections
to payment processors. Most of the vulnerabilities we found should
have been discovered during development with proper unit testing.
Second, many SSL libraries are unsafe by default, requiring high-
er-level software to correctly set their options, provide hostname
veriﬁcation functions, and interpret return values. As we show,
software that relies on these libraries is often not up to the task.
Third, even safe-by-default libraries, such as cURL’s wrapper
around OpenSSL, are misused by developers that misinterpret the
meaning of various options. This calls for better documentation and
more rigorous formalization of API semantics. In particular, APIs
should present high-level abstractions to developers, such as “con-
ﬁdential and authenticated tunnel,” as opposed to requiring them to
explicitly deal with low-level details such as hostname veriﬁcation.
Fourth, SSL bugs are often hidden deep inside layers of middle-
ware, above the actual SSL implementation but below the applica-
39tion, making the problem hard to locate and repair, and effectively
taking it out of application developers’ hands.
cates have not expired and that the certiﬁcates of the intermediate
CAs have the CA bit set in the “Basic Constraints” ﬁeld.
Fifth, least interesting technically but still critically important,
we observed many cases of developers deliberately disabling cer-
tiﬁcate validation, while assuring both users and higher-level pro-
grams that SSL is being supported but not informing them that pro-
tection against active attacks has been turned off.
3. OVERVIEW OF SSL
3.1 Threat model
We assume an active, man-in-the-middle network attacker who
may control network routers or switches, Wi-Fi access points, and/or
DNS. She may also control one or more servers and possess valid
SSL certiﬁcates for these servers. When an SSL client attempts to
connect to a legitimate server, the attacker can mislead it about the
server’s network address (e.g., through DNS poisoning) and trick it
into connecting to an attacker-controlled server instead.
Our attacker (1) does not have access to the private keys of le-
gitimate servers, (2) does not control any certiﬁcate authorities, (3)
cannot forge certiﬁcates. Even if she succeeds in spooﬁng the ad-
dress of a legitimate server, a correctly implemented SSL client
should refuse to accept the malicious server’s certiﬁcate because of
a mismatch between the name(s) on the certiﬁcate and the domain
to which the client is connecting.
target of our attacks
SSL Client
SSL Server
validate
server cert.
client hello
server
server
hello
cert.
client cert. request
(optional)
client key exchange
client cert.
(optional)
change cipher spec
encrypted data
validate
client cert.
(optional)
Figure 1: Simpliﬁed overview of SSL handshake.
3.2 SSL certiﬁcate validation
An SSL connection starts with a handshake between the client
and the server. The handshake protocol is summarized in Figure 1;
see RFC 6101 [16] for a complete description.
We focus on the client’s validation of the server certiﬁcate. All
SSL implementations we tested use X.509 certiﬁcates. The com-
plete algorithm for validating X.509 certiﬁcates can be found in
RFC 5280 [15] and RFC 2818 [14]. In this paper, we consider two
of the checks; both are critical for security against active attacks.
Chain-of-trust veriﬁcation. Each X.509 certiﬁcate has an “issuer”
ﬁeld that contains the name of the certiﬁcate authority (CA) that
issued the certiﬁcate. Every SSL client is conﬁgured with a list of
certiﬁcates for trusted root CAs.
In addition to its own certiﬁcate, the server sends the certiﬁcate
of the issuing CA. If the issuing CA is not a root CA, the server
also sends a list of certiﬁcates of higher-level CAs all the way to
a root CA. The client attempts to build a chain starting from the
server’s certiﬁcate at the bottom. Each certiﬁcate in the chain must
be signed by the CA immediately above it; the root CA must be one
of the client’s trusted CAs. The client also veriﬁes that the certiﬁ-