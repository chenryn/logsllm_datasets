architecture level. Y-axis shows IPC decrease for SPEC CPU2006 applications.
The value of IPC is reduced to 66% of the baseline IPC which has no ILR.
B. Approach Overview
Implementing ILR with hardware support can either re-
move the emulation layer and therefore, can reduce its over-
head signiﬁcantly. However, a negative consequence is that
a naive and straightforward implementation of ILR at archi-
tectural level destroys instruction fetch locality and renders
many micro-architecture components optimized for efﬁcient
instruction fetch useless. Instruction fetch plays a critical
role for feeding the pipelines of a high performance micro-
architecture with instructions. If ILR is to be integrated with
native execution support, a new design different from the naive
ILR implementation needs to be adopted.
Our solution is to satisfy the seemingly contradicting
requirements of native support for ILR and instruction fetch
locality (maintaining temporal and spatial localities in instruc-
tion fetch). For that purpose, we introduce an address space
randomization/de-randomization interface before the instruc-
tion fetch requests are handled by the on-chip L1 instruction
cache.
Analogous to the difference between physical memory
space and virtual memory space, we separate randomized
instruction space and de-randomized instruction space (the
original virtual memory space for storing instructions). The in-
struction execution pipelines handle instructions in randomized
instruction space and directly execute control ﬂow randomized
binary program. For efﬁcient and high throughput instruction
fetches, on-chip caches and memory hierarchy store instruc-
tions in the original layout. The instruction fetch unit and
memory hierarchy create an illusion to the processor pipeline
that instructions are fetched and program control transfers in
randomized instruction address space. Such a design can meet
both the needs of native support for executing randomized
binary and efﬁcient instruction fetch.
We name this approach virtual control ﬂow randomization
(VCFR), which means that the processor executes instructions
253253
050010001500bzip2h264refhmmermemcpypythonxalanPerformance decrement ratioApplication0501001500.010.020.030.0Increased percentage Ratio of L1 miss rateApplicationL1 miss rate increament (ratio)L1 pre-fetch miss rate increament (%)L2 pressure increament (%)558 0.00.20.40.60.81.01.2Normalized IPCApplicationTABLE I.
DIFFERENCES BETWEEN STRAIGHTFORWARD ILR AND
VCFR
No
Randomization
no control ﬂow
randomization
preserved
Hardware
Naive
Support for ILR
randomized control
ﬂow
destroyed
Approach
Our
(VCFR)
randomized control
ﬂow
preserved
effective
not effective
no diversity
diversiﬁed
effective
diversiﬁed
Execution
Instruction lo-
cality
Instruction
prefetch
Control
diversity
ﬂow
formed binary with direct hardware execution support, and
our virtual control ﬂow randomization approach. As shown
in the ﬁgure, in both ILR and VCFR, control ﬂow of the
binary is randomized. However, in VCFR, instruction layout
is preserved. A virtual instruction space layout (randomized)
is presented to the processor execution pipeline. The processor
pipeline uses randomized control ﬂow for fetching instructions
from the memory hierarchy. Some main differences between
straightforward ILR implementations and VCFR are high-
lighted in Table I. Details of the architecture design will be
presented in the next section.
IV. ARCHITECTURE AND DESIGN
A. Control Flow Randomization
Figure 6 shows the processes and steps performed by
instruction level address space randomization. The randomiza-
tion software, a binary rewriter, takes a third-party program as
input and generates a new binary output that with randomized
instruction layout. The new binary is semantically identical
to the original one but using randomized control ﬂows and
instruction layouts. For ROP based exploits, the consequence
of instruction space and instruction level control ﬂow ran-
domization is that the existing gadgets cannot be found any
more. The large randomization space prevents an attacker from
mounting a gadget based attacks [9].
The ﬁrst step is to disassemble the binary image and
perform ofﬂine static analysis. For such purpose, we use IDA
Pro, a recursive descent disassembler [18]. For complete scan
of disassembled code, we also use objdump. The control ﬂow
randomization software constructs CFG (control ﬂow graph)
from the disassembled program binary. Basic blocks are the
nodes in the CFG. They consist of a sequence of instructions.
Once the code is disassembled, basic blocks are easily detected
with the leader algorithm. Relocation information can also
be obtained. Entry points of basic blocks include all targets
Fig. 6.
binary executable.
ILR and architectural support for efﬁcient execution of the randomized
254254
Fig. 5.
Comparison of instruction fetches and memory layout in three
settings: no randomization applied, ILR with straightforward architectural
support, and hardware enabled virtual control ﬂow randomization (a control
ﬂow randomization mediation layer creates randomized view of instruction
address space to the processor execution pipeline and the instructions are
stored in the memory hierarchy with preserved locality).
in virtually randomized instruction address space. From the
perspective of randomizing instruction space and control ﬂow,
virtual control ﬂow randomization achieves the same random-
ization effect as the original ILR [9], which uses a software vir-
tual machine and rewrite rules to execute an ILR randomized
binary or a straightforward hardware implementation of ILR. A
main difference between our virtual control ﬂow randomization
(VCFR) and ILR is that in our approach, instruction locality is
preserved. In VCFR, the control ﬂow of a binary executable is
randomized similar to ILR. This randomized view of control
ﬂow is presented to the processor execution pipeline. However,
the binary instructions are still stored in the memory hierarchy
(both on-chip caches and off-chip memory) in the original
layout, which effectively preserves the instruction locality.
A control ﬂow randomization layer is situated between the
processor pipeline and the memory hierarchy. The control ﬂow
randomization layer is light-weight as it is implemented as
lookup tables that convert instruction address in randomized
control ﬂow address space to the original instruction address
space or vice versa.
Figure 5 illustrates instruction space layouts in the mem-
ory hierarchy and instruction fetch sequences (assuming that
instructions are fetched in program order) under three different
scenarios, original unmodiﬁed binary executable, ILR trans-
 cmp  %eax, #10 0100  jeq  0114 0104  call 012c 0108  movl -4(%ebp), %eax 010c  add  %eax, #1 0110  ret 0114  ...  ... Linear memory space  cmp  %eax, #10  jeq  0114  ...  ...  ...  ret  ...  ... On-chip cache (a) Conventional execution  movl -4(%ebp), %eax 0100   0104  ret 0108   010c  add  %eax, #1  0110   0114  ... Linear memory space  ...  ...  ret  ...  ...  ...  jeq  0108  ... On-chip cache (b) Straight-forward implementation of ILR with architectural support  jeq  0108 0118   011c  cmp  %eax, #10 0120  call 02c8 0124  ... 0128  ...  cmp  %eax, #10  ...  ... 0124 011c 0128 0104 0114 0118 0124 0100 0110 0108 Address mapping  cmp  %eax, #10 0100  jeq  0108 0104  call 02c8 0108  movl -4(%ebp), %eax 010c  add  %eax, #1 0110  ret 0114  ...  ... Linear memory space  cmp  %eax, #10  jeq  0108  ...  ...  ...  ret  ...  ... On-chip cache RDR Table Fetch Sequence 0100 0104 0114 0100 010c derand 0c82 0108 010c 0120 0fc8 0114 0100 0100 derand derand rand derand Fetch Sequence 0120 0118 0108 Fetch Sequence 0100 0104 0118 (c) Hardware supported Virtual Control Flow Randomization opcode= ADDprocessor = CPU and arrows makers= r1rt= r2rd= r2Arbitrary Code ImageDisassembleEngine(IDA Pro)Control Flow Analyses(constant propagation, call return analysis, and indirect branch targets)Instruction 8:Create basic blocks and edgesLinearizeInternal representationControl Flow Graph (CFG)Randomization SoftwareRandomized code imageProcessor with native support for efficient execution of randomized codeAssembleinstructionsof direct control ﬂow transfers, and all instructions directly
following direct or indirect transfers.
Detecting the edges for the CFG is straightforward. One
can get them directly from the disassembled codes for direct
control ﬂow transfers that encode their targets in the binary
instruction itself. For indirect control
transfers, we use a
conservative approach at the beginning and assume that all the
instructions at relocatable addresses can be the targets. This
means to connect all indirect control ﬂow transfer instructions
with all possible (relocatable) targets when CFG is initially
constructed. Then edges are analyzed and pruned using the
established techniques described in [19], [20], [21], which
apply an array of analyses. Fall-through edges are added to
all basic blocks ending with an instruction that does not
unconditionally transfer control.
Indirect control transfer using constant code address can
be analyzed with constant propagation [19], [21]. Constant
code address propagates over the CFG with instructions as
producers of the code addresses (e.g., fetched from constant
data segment) and indirect control transfers as the consumers.
A simple but effective heuristic used in Hiser et al.’s work
is to perform a byte-by-byte scan of the program’s data, and
disassembled code to determine any pointer-sized constant
which could be an indirect branch target [9]. As shown in
their work, this easy to implement approach is often sufﬁcient.
In our approach, we use both the same heuristic and a simple
constant propagation analysis to recover relocation information
for indirect control transfers that use constant code addresses.
The analysis is performed on registers over the CFG. Our
analysis does not modify any instructions that compute code
addresses. The assumption is that the code addresses in the
original program are relocatable. At the stage when the CFG
is re-assembled into a binary image, the relocation information
provides sufﬁcient details on how code address computations
need to be adapted. Analyses from us and others show that
code address computations are rare in real world applications.
To be conservative, we don’t directly modify the code address
computation.
After analyzing all the control transfer instructions, the
ILR software will traverse the instructions and assign differ-
ent addresses in the code space. To ensure that the control
transfer instructions still branch to the correct locations, the
randomization software will modify the direct control transfer
instructions with the new target addresses. Jump tables and
code addresses stored in the data sections are modiﬁed accord-
ingly as well based on both reallocation information and results
of indirect control transfer analysis. However, it is not feasible
to completely resolve target addresses of all the indirect control
transfers. Table II shows static number of indirect control
transfers compared with the static number of direct control
transfers in some SPEC CPU2006 benchmark applications.
In this table, indirect control transfers include both control
transfers from registers and computed control transfers. Also,
indirect function calls include calls from registers and calls
using computed function addresses. To provide a failover
solution for indirect control transfer instructions, we use an
approach similar to the work of Hiser et al. [9], which allows
certain indirect control instructions to use the original target
addresses. This means that for safe execution, some indirect
branches may jump to the un-randomized address space. This
can be supported by adding entries to the randomization/de-
randomization table. The tables also contain address mapping
entries to redirect program execution back to the randomized
TABLE II.
STATIC ANALYSIS OF CONTROL FLOW FOR SPEC CPU2006
BENCHMARK APPLICATIONS.
Applications
Direct con-
trol transfers
Indirect con-
trol transfers
Function
calls
bzip2
gcc
h264ref
hmmer
lbm
libquantum
mcf
namd
sjeng
soplex
xalan
27277
149512
38650
35438
26074
27129
25607
33497
30021
49577
126790
654
1464
884
556
620
546
512
618
585
1271
2915
4474
51933
6986
7783
4300
4686
4214
5958
5280
15673
63965
Indirect
function
calls
654
1605
1409
751
622
636
582
906
709
2587
15465
control ﬂow space for continued execution after jumping to
un-randomized addresses. To reduce attacking surfaces and
prevent frequent jumps to the un-randomized addresses, we
mark each safely randomized instruction address with a single
bit tag in the randomization/de-randomization table (named
randomized tag). For an un-randomized address, when its tag
is set, execution control is prohibited from jumping to that
location. As a result, ROP attacks can only be mounted by
exploiting gadgets in the un-randomized addresses.