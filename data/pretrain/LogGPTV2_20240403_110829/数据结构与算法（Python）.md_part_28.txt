树中时，我们创建了另一个BinaryTree的实例，并修改了根节点的self.leftChild使之指向新的树。
注意到代码6.10中，构造函数需要得到一些类型的对象存储在根中。就像你可以在列表中储存
class BinaryTree:
def __init__(self,rootObj):
self.key = rootObj
self.leftChild = None
self.rightChild = None
代码6. 10
任何一种你喜欢的类型，树的根对象可以指向任何一种类型。在前面的例子中，我们存储节点的名
称作为根值。使用节点和引用来实现树，在图6.8中，我们创建了二叉树类的六个实例。
接下来让我们看一下除根节点外需要构建的功能。为了添加左子节点，我们将创建一个新的二
叉树对象，并设置根的left属性指向这个新对象。insertLeft的代码如代码6.11所示。
def insertLeft(self,newNode):
if self.leftChild == None:
self.leftChild = BinaryTree(newNode)
else:
t = BinaryTree(newNode)
t.leftChild = self.leftChild
self.leftChild = t
代码6. 11
我们必须考虑两种情况进行插入。第一种情况的特征是，没有现有左子节点。当没有左子节点
时，简单地将新节点添加到树中即可。第二种情况的特征是，当前存在左子节点。在第二种情况
下，我们插入一个节点并将已存在的子节点降级。第二种情况是由代码6.11第4行的else语句所处
理的。
insertRight的代码必须考虑一个对称组的情况。或者没有现有的右子节点，或者我们必须将新节
点插入根和现有的右子节点之间。插入的代码如代码6.12所示。
def insertRight(self,newNode):
if self.rightChild == None:
self.rightChild = BinaryTree(newNode)
else:
t = BinaryTree(newNode)
t.rightChild = self.rightChild
self.rightChild = t
为了完善树简单二叉树的定义，我们将编写几个用于访问左右子节点和根值得方法（参见代码
代码6. 12
6.13）
def getRightChild(self):
return self.rightChild
def getLeftChild(self):
return self.leftChild
def setRootVal(self,obj):
self.key = obj
def getRootVal(self):
return self.key
代码6.13
既然我们已经有了所有创建和操作二叉树的方法，让我们再进一步检查它的结构。让我们生成
一个简单的树，以节点a为根节点，并添加节点B和C作为子节点。代码6.14创建了树， 并存储一
些值在key，left，right中。注意，根节点的左右子节点本身就是BinaryTree类的不同实例。 正如我
们在树的原始递归定义中所说的，这使我们能够把一个二叉树的任何子节点当成二叉树本身。
def insertRight(self,newNode):
if self.rightChild == None:
self.rightChild = BinaryTree(newNode)
else:
t = BinaryTree(newNode)
t.rightChild = self.rightChild
self.rightChild = t
def getRightChild(self):
return self.rightChild
def getLeftChild(self):
return self.leftChild
def setRootVal(self,obj):
self.key = obj
def getRootVal(self):
class BinaryTree:
return self.key
def __init__(self,rootObj):
r = BinaryTree('a')
self.key = rootObj
print(r.getRootVal())
self.leftChild = None
print(r.getLeftChild())
self.rightChild = None
r.insertLeft('b')
print(r.getLeftChild())
def insertLeft(self,newNode):
print(r.getLeftChild().getRootVal())
if self.leftChild == None:
r.insertRight('c')
self.leftChild = BinaryTree(newNode)
print(r.getRightChild())
else:
print(r.getRightChild().getRootVal())
t = BinaryTree(newNode)
r.getRightChild().setRootVal('hello')
t.leftChild = self.leftChild
print(r.getRightChild().getRootVal())
self.leftChild = t
自我测试
代码6. 13 练习使用节点和引用的实现方式（bintree）
3. 写一个buildTree函数，使用节点和引用方法，生成如图6.9所示的二叉树
图6. 9
6.6 解析树
在实现了树(Tree)数据结构之后，现在我们来看一个例子，它将告诉你怎么样利用树(Tree)去解决
一些实际的问题。在这个章节，我们将关注一些解析树。解析树可以用来呈现例如句子或者数学达
式等真实世界中的结构。
图 6.10 一个简单句子的解析树
图 6.10 显示了一个简单句子的层次结构。将一个句子表征为一个树(Tree)的结构,能使我们通过
利用子树来处理句子中的每个独立成分。
图6.11 ((7+3)*(5-2)的解析树
如图 6.11 所示，我们能将(7+3)*(5-2)这样一个数学表达式表示成一个解析树。我们在见了这个
全括号表达式之后,会怎样理解这个表达式呢？我们知道乘法比加法和减法有着更高的优先级。而因
为表达式中的括号，我们知道在做乘法运算之前,需要先计算括号内的加法和减法表达式。树的层次
结构就能帮助我们理解整个表达式的运算顺序。在计算最上层的乘法运算前，我们先要计算子树中
的加法和减法。左子树的加法运算结果为10,右子树的减法运算结果为 3。利用树的层次结构，一旦
我们计算出了子节点中表达式的结果，我们就能够将整个子树用一个节点来替换。运用这个替换步
骤，我们将会得到一个简化的树，如图 6.12 所示。
图 6.12 化简后的((7+3)*(5−2))的解析树
在本节的剩余部分，我们将更加详细地讨论解析树。尤其是：
怎样根据一个全括号数学表达式来建立其对应的解析树
怎样计算存在解析树中的数学表达式的值
怎样根据一个解析树恢复出原先的数学表达式
建立解析树的第一步需要将表达式字符串(string)分解成单个字符列表。一共有四种类型的字
符：左括号，右括号，操作符和操作数。每当读到一个左括号时,就代表着有一个新的表达式，我们
就需要创建一个与之相对应的新的树。相反,每当读到一个右括号时，就代表这一个表达式的结束。
另外，操作数将成为叶节点(leaf node)和他们所属的操作符的子节点(children)。最后，每个操作符都
应该有一个左子节点和一个右子节点。通过上面的分析我们定义以下四条规则：
如果当前读入的字符是 '(' ,添加一个新的节点(node)作为当前节点的左子节点，当前节点下降。
如果当前读入的字符在列表 ['+','-','/','*'] 中，将当前节点的根值设置为当前读入的字符。添加
一个新的节点(node)作为当前节点的右子节点，当前节点下降。
如果当前读入的字符是一个数字，将当前节点的根值设置为该数字，当前节点变为它的父节点
(parent)。
如果当前读入的字符是 ')' ，当前节点变为其父节点(parent)。
在我们编写 Python 代码之前,让我们一起先来看一个具体的例子。我们将使用(3+(4*5))这个表
达式。我们将表达式分列为如下字符的列表：['(', '3', '+', '(', '4', '*', '5' ,')',')'] 。一开始，我们将从一个
仅包括一个空的根节点的解析树开始。图 6.13 为我们展示了该解析树的内容和结构随着每个新的字
符被读入是怎样变化的。
图 6.13 解析树结构的演变图
根据图 6.13 我们可以得知解析树是如何一步步建立起来的：
a.创建一个空的树。
b.读入'('为第一个字符，根据规则1，创建一个新的节点作为当前节点的左子结点,并将当前 节
点变为这个新的子节点。
c.读入'3'为下一个字符。根据规则 3，将当前节点的根值赋值为 3，然后返回当前节点的父 节
点。
d.读入'+'为下一个字符。根据规则 2,将当前节点的根值赋值为 +，然后添加一个新的节点 作
为其右子节点，并且将当前节点变为这个新的子节点。
e.读入')'为下一个字符。根据规则 1，创建一个新的节点作为当前节点的左子结点，并将当 前
节点变为这个新的子节点。
f.读入'4'为下一个字符。根据规则 3，将当前节点的根值赋值为 4，然后返回到当前节点的 父
节点。
g.读入'*'为下一个字符。根据规则 2，将当前节点的根值赋值为 *，然后添加一个新的节点 作
为其右子节点,并且将当前节点变为这个新的子节点。
h.读入'5'为下一个字符。根据规则 3，将当前节点的根值赋值为 5，然后返回到当前节点的 父
节点。
i.读入')'作为下一个字符。根据规则 4，我们将当前节点变为当前节点'*'的父节点。
j.读入')'作为下一个字符。根据规则 4，我们将当前节点变为当前节点'+'的父节点,然而当前 节
点没有父节点，所以我们完成了解析树的构建。
从上面的例子可以看出,在构建解析树的过程中我们需要保持对当前节点和其父节点的追踪。而
树的连接方式就提供给我们了获得一个节点的子节点的方法—— getLeftChild 和 getRightChild,但是
我们怎么样来追踪一个节点的父节点呢？一个简单的方法就是利用堆栈在遍历整个树的过程中保持
对父节点的跟踪。每当我们要下降到当前节点的子节点时，我们先将当前节点压入栈中。而当我们
想要返回当前节点的父节点时，我们就能从堆栈中弹出该父节点。
通过上述的规则，使用堆栈(Stack)和二叉树(BinaryTree)操作,我们现在就能编写构建解析树的
Python 函数了。解析树生成函数的代码如下所示。
from pythonds.basic.stack import Stack
from pythonds.trees.binaryTree import BinaryTree
def buildParseTree(fpexp):
fplist = fpexp.split()
pStack = Stack()
eTree = BinaryTree('')
pStack.push(eTree)
currentTree = eTree
for i in fplist:
if i == '(':
currentTree.insertLeft('')
pStack.push(currentTree)
currentTree = currentTree.getLeftChild()
elif i not in ['+', '-', '*', '/', ')']:
currentTree.setRootVal(int(i))
parent = pStack.pop()
currentTree = parent
elif i in ['+', '-', '*', '/']:
currentTree.setRootVal(i)
currentTree.insertRight('')
pStack.push(currentTree)
currentTree = currentTree.getRightChild()
elif i == ')':
currentTree = pStack.pop()
else:
raise ValueError
return eTree
pt = buildParseTree("( ( 10 + 5 ) * 3 )")
pt.postorder() #defined and explained in the next section
代码 6.15 解析树的生成函数
四条解析树建立的规则被编写为了四个 if 从句，分别在第11,15,19,24 行。在这几处你能看到
通过调用一些 BinaryTree 和 Stack 的方法而实现这些规则的代码。在这个函数中唯一的差错检查是
在 else 语句中，如果我们不能辨认出从列表中读入的字符,那么我们就会报一个 ValueError 的错