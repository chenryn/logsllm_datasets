.L4: 
          lea  
rax, 0[0+r11*4] 
          lea  
r10, [rcx+rax] 
          lea  
r14, [rdx+rax] 
          lea  
rsi, [r8+rax] 
          add  
rax, r9 
          mov  
r15d, DWORD PTR [r10] 
          add  
r15d, DWORD PTR [r14] 
          mov  
DWORD PTR [rsi], r15d  
; store to sum[] 
          mov  
r10d, DWORD PTR [r10] 
          imul  
r10d, DWORD PTR [r14] 
          mov  
DWORD PTR [rax], r10d  
; store to product[] 
          mov  
DWORD PTR [r12+r11*4], ebx  
; store to update_me[] 
          add  
ebx, 123 
          mov  
r10d, DWORD PTR [rsi]  
; reload sum[i] 
          add  
r10d, DWORD PTR [rax]  
; reload product[i] 
          lea  
rax, 1[rdi] 
          cmp  
rax, r13 
          mov  
DWORD PTR 0[rbp+r11*4], r10d  ; store to sum_product[] 
          jne  
.L6 
.L1: 
          pop  
rbx rsi rdi rbp r12 r13 r14 r15 
          ret 
指令清单 44.2  x64 下的 GCC 函数 f2() 
f2: 
          push  
r13 r12 rbp rdi rsi rbx 
          mov  
r13, QWORD PTR 104[rsp] 
          mov  
rbp, QWORD PTR 88[rsp] 
          mov  
r12, QWORD PTR 96[rsp] 
          test  
r13, r13 
          je  
.L7 
          add  
r13, 1 
          xor  
r10d, r10d 
          mov  
edi, 1 
          xor  
eax, eax 
          jmp  
.L10 
.L11: 
          mov  
rax, rdi 
          mov  
rdi, r11 
.L10: 
          mov  
esi, DWORD PTR [rcx+rax*4] 
          mov  
r11d, DWORD PTR [rdx+rax*4] 
          mov  
DWORD PTR [r12+rax*4], r10d ; store to update_me[] 
          add  
r10d, 123 
          lea  
ebx, [rsi+r11] 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 44 章  C99 标准的受限指针 
477 
          imul  
r11d, esi 
          mov  
DWORD PTR [r8+rax*4], ebx ; store to sum[] 
          mov  
DWORD PTR [r9+rax*4], r11d ; store to product[] 
          add  
r11d, ebx 
          mov  
DWORD PTR 0[rbp+rax*4], r11d ; store to sum_product[] 
          lea  
r11, 1[rdi] 
          cmp  
r11, r13 
          jne  
.L11 
.L7: 
          pop  
rbx rsi rdi rbp r12 r13 
          ret 
f1()函数和 f2()函数的不同之处在于：在 f1()函数中，sum[i]和 product[i]数组在循环中会再次加载；而
函数 f2()则没有这种重新加载内存数值的操作。在改动后的程序里，因为我们向编译器“承诺”sum[i]和
product[i]的值不会被其他指针复写，所以计算机会重复利用前几个阶段制备好的各项数据，不再从内存加
载它们的值了。很明显，改进后的程序运行速度更快一些。 
如果我们声明了某个指针是受限指针，而实际的程序又有其他指针操作这个受限指针操作的内存区域，
将会发生什么情况？这真的就是程序员的事了，不过程序运行的结果肯定是错误的。 
FORTRAN 语言的编译器把所有指针都视为受限指针。因此，在 C 语言不支持 C99 标准的 restrict 修饰
符而实际指针属于受限指针的时候，用 FORTRAN 语言编译出来的应用程序会比用 C 语言编译出来的程序
运行得更快。 
受限指针主要用于哪些领域？它主要用于操作多个大尺寸内存块的应用方面。例如，在超级计算机/HPC
平台上经常进行的线性方程组求解就属于这种类型的应用。或许，这正是这种平台普遍采用 FORTRAN 语
言的原因之一吧。 
另一方面，在循环语句的迭代次数不是非常高的情况下，受限指针带来的性能提升就不会十分明显。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 4455 章
章    打
打造
造无
无分
分支
支的
的 aabbss(())函
函数
数  
请回顾前文第 12 章第 2 节的那个函数。请设想一下，能否用 x86 的汇编指令打造一个无分支的版本？ 
int my_abs (int i) 
{ 
          if (i>63) (shift is arithmetical) 
          sub  
x0, x1, x0, asr 63 
; X0=X1-(X0>>63)=X0^(X0>>63)-(X0>>63) (all shifts are arithmetical) 
          ret 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 4466 章
章    变
变长
长参
参数
数函
函数
数  
像 printf()和 scanf()一类的函数可以处理不同数量的输入参数。这种函数又是如何访问参数的呢？ 
46.1  计算算术平均值 
如果要编写一个计算算术平均值的函数，那么就需要在函数的参数声明部分指定所有的外来参数。但
是 C/C++的变长参数函数却无法事先知道外来参数的数量。为了方便起见，我们用“-1”作为最后一个参
数兼其他参数的终止符。 
C 语言标准函数库的头文件 stdarg.h 定义了变长参数的处理方法（宏）。刚才提到的 printf()函数和 scanf()
函数都使用了这个文件提供的宏。 
#include  
#include  
int arith_mean(int v, ...) 
{ 
          va_list args; 
          int sum=v, count=1, i; 
          va_start(args, v); 
          while(1) 
          { 
                    i=va_arg(args, int); 
                    if (i==-1) // terminator 
                              break; 
                    sum=sum+i; 
                    count++; 
          } 
          va_end(args); 
          return sum/count; 
}; 
int main() 
{ 
          printf ("%d\n", arith_mean (1, 2, 7, 10, 15, -1 /* terminator */)); 
}; 
变长参数函数按照常规函数参数的方法访问外部传来的第一个参数。而后，程序借助 stdarg.h 提供的
宏 var_arg 调用其余参数，依次求得各参数之和，最终计算其平均值。 
46.1.1  cdecl 调用规范 
指令清单 46.1  MSVC 6.0 优化 
_v$ = 8 
_arith_mean PROC NEAR 
          mov  
eax, DWORD PTR _v$[esp-4] ; load 1st argument into sum 
          push  
esi 
          mov  
esi, 1  
; count=1 
          lea  
edx, DWORD PTR _v$[esp]  ; address of the 1st argument 
$L838: 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 46 章  变长参数函数 
481 
          mov  
ecx, DWORD PTR [edx+4]  
; load next argument 
          add  
edx, 4  
; shift pointer to the next argument 
          cmp  
ecx, -1  
; is it -1? 
          je   
SHORT $L856  
; exit if so 
          add  
eax, ecx   
; sum = sum + loaded argument 
          inc  
esi   
; count++ 
          jmp  
SHORT $L838 
$L856: 
; calculate quotient 
          cdq 
          idiv  
esi 
          pop  
esi 
          ret  
0 
_arith_mean ENDP 
$SG851   DB   
'%d', 0aH, 00H 
_main    PROC NEAR 
          push  
-1 
          push  
15 
          push  
10 
          push  
7 
          push  
2 
          push  
1 
          call  
_arith_mean 
          push  
eax 
          push  
OFFSET FLAT:$SG851 ; '%d' 
          call  
_printf 
          add  
esp, 32 
          ret  
0 
_main    ENDP 
在 main()函数里，各项参数从右向左依次逆序传递入栈。第一个入栈的是最后一项参数“-1”，而最后
入栈的是第一项参数——格式化字符串。 
函数 arith_mean()取出第一个参数的值，并将其保存在变量 sum 中。接着，将第二个参数的地址保存
在寄存器 EDX 中，并取出其值，与前面的 sum 相加。如此循环往复，直到参数的终止符−1。 
当找到了参数串的结尾后，程序再将所有数的算术和 sum 除以参数的个数（当然不包括终止符−1）。