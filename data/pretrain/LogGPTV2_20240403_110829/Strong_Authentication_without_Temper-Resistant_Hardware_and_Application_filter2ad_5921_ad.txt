(t(cid:48),
qs, qv)), t(cid:48) = t + O((qs + qv)texp), t(cid:48)(cid:48) = O(t(cid:48) + n2texp), and
texp denotes the time for one exponentiation.
SPK
Proof: This proof will proceed via a sequence of games.
We will bound the decrease of A’s advantages between
two successive games, and denote A’s advantage in Gi by
Advi(A).
Game 0. This is the real game. The adversary A is given
pp, isp and a set of usernames {uid i}n
i=1, and has accesses
to four oracles SIGN, VERIFY, REVEALPW, REVEALCRED.
Finally, A outputs a valid forgery (uid
, m∗, σ∗). Let
{(uid i, Ai)}n
i=1 be a set including the username and credential
pairs of n users created in this game. Without loss of generality,
, m∗, σ∗) has
we assume that the output of the adversary (uid
been queried to the VERIFY oracle. We have
∗
∗
AdvSEUF-CMVA
ΠPBC,case-i
(A) = Adv0(A) for ∀i ∈ {1, 2}.
Game 1. This game is the same as Game 0, except
the
following differences:
• Use a zero-knowledge simulator Sim to generate the proofs
• In every VERIFY(uid , m, σ) query such that σ = (T, πT ),
of SPK for the answers of the SIGN oracle.
execute as follows:
◦ If (m, σ) is from the SIGN oracle, return 1.
◦ If T = 1 or πT is not the correct form, return 0.
◦ Otherwise, use a knowledge extractor Ext for SPK to
extract a witness a from proof πT . If Ext fails, return
0. Otherwise, compute A ← T 1/a and return 1 if
and only if Aγ+uid = g. Note that a (cid:54)= 0 unless
uid + γ = 0 mod p which clearly breaks the discrete-
logarithm assumption implied by the assumptions in
Theorem 1.
$← Z∗
SPK(t(cid:48), qs) + Advss-ext
Game 1 behaves exactly like Game 0, except for the
simulation of SPK and failing for the extraction of SPK.
From the unbounded zero-knowledge and simulation-sound
extractability of SPK, we have
Adv0(A) ≤Adv1(A) + O(Advuzk
SPK (t(cid:48), qs, qv)).
Game 2. This game is the same as Game 1, except that for
p, compute T ← gu. Then,
every SIGN((cid:63), (cid:63)) query, pick u
compute V ← wu · T uid, use Sim to generate a proof πT on
a statement (g, T, V ), and respond with σ ← (T, πT ).
The element T in Game 2 has the same distribution as the one
in Game 1. So, we have Adv1(A) = Adv2(A).
Game 3. This game is the same as Game 2, except that for
= uid ∈ U, when
each VERIFY(uid
an element A is computed with either a witness a extracted
by Ext for uid
= uid, changing the veriﬁcation manner of σ
as: Return 0 if (uid , A) /∈ {(uid i, Ai)}n
i=1 and 1 otherwise.
We can bound the difference between Game 3 and Game
2 using a reduction B from the q-SDH assumption. For the
reduction, we use the following lemma.
Lemma 1: For all adversaries B running in time t(cid:48), B aims
to win in the experiment as described in Fig. 4 (i.e., Exp1(B)
outputs 1). Then, B’s advantage Adv1(t(cid:48), n) is bounded by
(qv +1)AdvSDHG (O(t(cid:48) +n2texp), n+1), where qv is the number
of queries to the Check(γ,·,·) oracle.
Proof for Lemma 1. If there exists an adversary B that makes
qv queries to Check and makes Exp1 output 1 with probability
, then we can construct an algorithm BSDH that breaks the
, m, σ) query with uid
(cid:48)
(cid:48)
(cid:48)
8
p, w ← gγ; For each i ∈ [n], Ai ← g1/(γ+mi).
Experiment Exp1(B)
(m1, . . . , mn, state) ← B(1λ).
$← Z∗
γ
(m∗, A∗) ← BCheck(γ,·,·)(state, g, w,{Ai}n
If A∗ = g1/(γ+m∗) and (m∗, A∗) /∈ {(mi, Ai)}n
then return 1. Otherwise, return 0.
Check(γ, m, A): return 1 if A = g1/(γ+m) and 0 otherwise.
i=1,
i=1)
Fig. 4: Experiment for Lemma 1
j=1(x+mj) = Σn
i=1, we deﬁne f (x) = Πn
that a fresh and valid (m∗, A∗) pair appears for Check.
and valid pair appears in the output of B.
q-SDH assumption with probability /(qv + 1) by interacting
with B as follows:
) ∈ (G∗)n+1 for some
Given a q-SDH instance (g, gγ, ..., gγn
unknown γ ∈ Z∗
p, BSDH aims to output a (m∗, g1/(γ+m∗))
for some m∗ ∈ Zp\{−γ}. First, BSDH picks i∗ from [qv + 1]
uniformly at random, and:
• If 1 ≤ i∗ ≤ qv, BSDH takes i∗ as the guess for the ﬁrst time
• Otherwise (i.e., i∗ = qv + 1), BSDH considers the ﬁrst fresh
Given {mi}n
j=0αjxj
and fi(x) = f (x)/(x + mi) = Πn
j=1,j(cid:54)=i(x + mj) =
j=0 βi,jxj for each i ∈ [n]. Then, using techniques by [16],
Πn−1
BSDH can compute g(cid:48) = Πn
)αj = gf (γ), w =
j=1 (gγj
j=0 (gγj
Πn+1
)βi,j =
gfi(γ) = gf (γ)/(γ+mi) = (g(cid:48))1/(γ+mi) for each i ∈ [n].
i=1 to B and responds the
Next, BSDH returns g(cid:48), w and {Ai}n
i-th Check(γ, m(cid:48)
• If i = i∗, BSDH sets (m, A) = (m(cid:48)
i, A(cid:48)
• Otherwise, BSDH returns 1 if (m(cid:48)
i , A(cid:48)
i ) = (mj, Aj) for some
If BSDH does not abort, B outputs (m∗, A∗) and BSDH sets
(m, A) = (m∗, A∗).
If BSDH guesses correctly with probability 1/(qv + 1), its
simulation is perfect, and the tuple (m, A) is fresh and
valid. Thus, we have m /∈ {mi}n
i=1 since for any valid pair
( ˆm, ˆA) under g(cid:48) and γ, ˆA is uniquely determined by ˆm. Let
f (x) = f(cid:48)(x)(x + m) + θ for some θ ∈ Z∗
p, which is also
written as f(cid:48)(x) = Σn−1
)αj−1 = gγf (γ) = (g(cid:48))γ and Ai = Πn−1
i) query for B as follows:
1 ≤ j ≤ n and 0 otherwise.
i) and aborts.
j=0 δjxj, we have:
j=0(gγj
i, A(cid:48)
A = (g(cid:48))1/(γ+m) = gf (γ)/(γ+m) = gf(cid:48)(γ)+θ/(γ+m)
j=0 (gγj
Finally, BSDH computes g1/(γ+m) = (A/gf(cid:48)(γ))1/θ with
gf(cid:48)(γ) = Πn−1
)δj , and outputs (m, g1/(γ+m)) as a solu-
tion for the q-SDH problem.
By Lemma 1, we can straightforwardly bound the difference
between Game 3 and Game 2 using a reduction B1 against the
experiment in Fig. 4. Speciﬁcally, B1 executes just as in Game
2 and interacts with A, with the following exceptions:
• B1 outputs (uid 1, . . . , uid n) in the experiment in Fig. 4, and
i=1. B1 sets w as isp and
= uid, when A
is computed with a witness a extracted by Ext, algorithm
B1 returns 1 if Check(γ, uid , A) = 1.
, A∗)
/∈
then receives w and {(uid i, Ai)}n
sets Ai as the credential of user i.
• When B1 ﬁnds a username-credential pair (uid
• For each VERIFY(uid
, A∗) = 1 but (uid
such that Check(γ, uid
, m, σ) query, if uid
∗
, A∗)
∗
∗
(cid:48)
(cid:48)
∗
{(uid i, Ai)}n
i=1, B1 outputs (uid
, A∗) as its forgery.
If the difference between Game 3 and Game 2 is not negli-
gible, B1 can output a forgery (uid
∗
, A∗) with non-negligible
probability. Thus, we have
Adv2(A) = Adv3(A)+(qv +1)AdvSDHG (O(t(cid:48) +n2texp), n+1).
Complete the proof for Case 1. If A did not reveal the
password-wrapped credential of the target user with username
∗ ∈ U, we can bound the advantage of A in Game 3 using
uid
a reduction B2 against the experiment in Fig. 4. Speciﬁcally,
B2 executes just as in Game 3 and interacts with A, with the
following exceptions:
• B2 picks i∗
= uidi∗ where
uid
• B2 outputs {uid i}i∈[n],i(cid:54)=i∗ in the experiment in Fig. 4,
and then receives {(uid i, Ai)}i∈[n],i(cid:54)=i∗ and sets Ai as the
credential of user i for each i ∈ [n] ∧ i (cid:54)= i∗.
, m, σ) query, when an element A is
= uid,
, A∗) such
= uid i∗ in some
If B2 guesses correctly with probability 1/n, B2 needs not to
simulate the password-wrapped credential of user i∗, and the
simulation of B2 is perfect. Thus, we have:
computed with a witness a extracted by Ext for uid
B2 returns 1 if and only if Check(γ, uid , A) = 1.
• When B2 ﬁnds a username-credential pair (uid
∗
that Check(γ, uid
VERIFY query, B2 outputs (uid
∗ is output by A in its forgery.
$← [n] as the guess that uid
• For each VERIFY(uid
, A∗) = 1 and uid
∗
∗
, A∗) as its forgery.
(cid:48)
∗
∗
(cid:48)
Adv3(A) ≤ n(qv + 1)AdvSDHG (O(t(cid:48) + n2texp), n).
∗ ∈ U, we continue the proof as follows:
Continue the proof for Case 2. If A has revealed the
password-wrapped credential of the target user i∗ with user-
name uid
Game 4. This game is the same as Game 3, except for
replacing the credential Ai of user i with a random element
in G∗ for each i ∈ [n]; setting [Ri]pwi as the user
Ri
i’s password-wrapped credential instead of [Ai]pwi ; and for
each VERIFY(uid i, m, σ) query, when A is computed with a
witness a extracted by Ext, return 1 if and only if A = Ri.
We can bound the difference between Game 4 and Game 3
using a reduction from the q-DDHI assumption. The reduction
is done by a standard hybrid argument. For every j ∈ [n],
let Game (3, j) be the same as Game 3 except that setting
a random Ri in G∗ as the credential of user i for each i ∈
[j] and using Ri to validate the authentication tokens in all
VERIFY(uid i, (cid:63), (cid:63)) queries with uid i ∈ U. It is easy to see
that Game (3, 0) is the same as Game 3 and Game (3, n) is the
same as Game 4. If adversary A behaves differently between
Game (3, j − 1) and Game (3, j) for some j ∈ [n], we can
construct an algorithm B3 breaking the q-DDHI assumption.
For the reduction, we use the following lemma.
Lemma 2: For all adversaries B running in time t(cid:48), B aims
to win in the experiment as described in Fig. 5 (i.e., Exp2(B)
outputs 1). Then, the B’s advantage Adv2(t(cid:48), n) is bounded by
AdvDDHIG
Proof for Lemma 2. If there exists an adversary B that makes
Exp2 return 1 with probability , we can construct an algorithm
BDDHI that breaks the q-DDHI assumption with probability
 − n/p by interacting with B as follows:
, T ) ∈ (G∗)n+2 for
Given a q-DDHI instance (g, gα, ..., gαn
p, BDDHI aims to distinguish T = g1/α
some unknown α ∈ Z∗
(O(t(cid:48) + n2texp), n + 1).
p, w ← gγ; For each i ∈ [n], Ai ← g1/(γ+mi).
Experiment Exp2(B)
(m1, . . . , mn, m∗, state) ← B(1λ).
$← Z∗
γ
$← G∗; A∗
1 ← g1/(γ+m∗).
A∗
b(cid:48) ← B(state, g, w,{Ai}n
If b = b(cid:48) and m∗ /∈ {mi}n
Otherwise, return 0.
0
i=1, A∗
b ).
i=1, then return 1.
Fig. 5: Experiment for Lemma 2