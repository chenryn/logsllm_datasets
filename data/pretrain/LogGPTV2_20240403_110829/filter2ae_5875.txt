## 0x01 用户评论处XSS漏洞

在对该框架进行检查后，可以确认没有直接的注入漏洞。整个站点主要基于缓存机制进行数据交互。考虑到这一点，我们决定尝试通过XSS（跨站脚本攻击）来寻找潜在的安全问题。该CMS使用的是ThinkPHP5框架。

### 漏洞定位
- **文件路径**：`application\config.php`
- **配置项**：`default_filter`

进一步调查发现，在以下位置存在一处未被有效过滤的地方：
- **文件路径**：`application/index/controller/Index.php`
- **方法**：`pinglun()`

过滤函数如下所示：
- **文件路径**：`application\index\controller\Common.php`
- **方法**：`filterJs()`

这个过滤函数实现较为简单，容易被绕过。

### 测试过程
1. 注册一个账号并登录。
2. 随意选择一篇文章，并在其评论区插入恶意JavaScript代码。
3. 观察到后台评论管理页面中显示了未经充分过滤的用户输入内容，从而验证了XSS漏洞的存在。

由于此网站大量功能依赖于缓存操作，结合之前发布的关于ThinkPHP5缓存设计缺陷的文章，我们推测可以通过XSS配合CSRF攻击获取服务器权限。

## 0x02 获取Shell

为便于理解后续步骤，请先阅读我发布在先知社区的文章：
- **标题**：《ThinkPHP5.0.10-3.2.3 缓存函数设计缺陷可导致getshell》
- **链接**：[文章链接]

根据上述文档，我们知道目标系统并未启用CSRF防护措施。因此，我们可以采用如下策略实施攻击：

### 攻击思路
1. 在前端评论区嵌入XSS载荷。
2. 引导管理员访问特定页面触发XSS执行。
3. 利用CSRF请求向系统添加新文章。
4. 再次利用CSRF调用清除缓存接口。
5. 最后通过JavaScript脚本访问任意前端页面以重新生成缓存文件，进而植入Web Shell。

#### 相关代码片段
- **创建文章**
  - **文件路径**：`application\admin\controller\Index.php`
  - **方法名**：`write()`

- **清理缓存**
  - **文件路径**：`application\admin\controller\Index.php`
  - **方法名**：`clearcache()`

#### 实施步骤
1. 准备好包含恶意代码的HTML/JS文件。
2. 将这些脚本与已知的XSS漏洞结合起来，构造出完整的攻击链路。
3. 模拟管理员身份登录后台管理系统。
4. 按照预定计划依次触发各个阶段的漏洞利用逻辑。

### 漏洞原理与流程详解
1. **新建文章**：
   - 从前端接收参数并通过`write()`方法写入数据库。
   
2. **刷新缓存**：
   - 调用`clearcache()`删除现有缓存记录。
   
3. **重建缓存文件**：
   - 当用户访问首页时，会自动创建新的缓存条目。具体而言，缓存键值由模块名称、控制器名及方法签名共同决定。例如，对于默认视图，其对应的缓存标识符可能是`MD5('hunhe_index1') = 9040ab6906a15768edcd9e5b1d57fcda`。

## 0x03 后记
如果想要测试是否能够成功利用该漏洞，可以在URL栏中依次输入以下地址：
- 如果前两个请求返回403错误而最后一个请求却正常响应，则表明目标服务器的缓存目录对外部可见。此时便可以着手准备XSS+CSRF组合攻击以获取远程控制权限。