In this section, we present the main contribution of our paper: our
ideal functionality Fledger for distributed ledgers, which includes
“common” blockchains as a special case. At a high level, Fledger is
designed around a read and write operation offered to higher-level
protocols. This captures the two common operations of distributed
ledgers, which allow parties from higher-level protocols to submit
data to the ledger and get access to data from other parties. In what
follows, we firstly explain Fledger in detail. Afterwards, we elabo-
rate on Fledger’s capabilities to capture different distributed ledger
technologies and established distributed ledger security properties.
2.1 Description of Fledger:
Our functionality Fledger is defined in the iUC framework [11],
which is a recently proposed, expressive, and convenient general
framework for universal composability similar in spirit to Canetti’s
UC model [12]. We explain our functionality in such a way that
readers familiar with the UC model are able to understand it even
without knowing the iUC framework.
The functionality Fledger is a single machine containing the core
logic for handling incoming read and write requests. In addition
to this main machine, there are also several subroutine machines
Figure 1: Overview of Fledger and its subroutines. The open
headed arrow indicates that A also connects to all of Fledger’s
subroutines
that serve as parameters which must be instantiated by a protocol
designer to customize the exact security guarantees provided by
Fledger. Figure 1 illustrates the structure of the functionality.1 Intu-
itively, Fledger’s subroutines have the following purposes: Fsubmit
handles write requests and, e. g., ensures the validity of submitted
transactions, Fread processes read requests and, e. g., models situa-
tions that not all clients are up-to-date or ensures privacy properties,
Fupdate handles updates to Fledger’s global state, FupdRnd controls
updates to Fledger’s built-in clock, Finit determines the initial state
of Fledger, and Fleak defines the information that leaks upon cor-
ruption of a party in Fledger. As we exemplify in our Corda analysis
in Section 4, these subroutines can, in principle, also specify and
even share their own additional subroutines. For example, all of
the parameterized subroutines could share and access an additional
(potentially global) random oracle subroutine in order to obtain con-
sistent hashes for transactions throughout all operations. We note,
however, that only the fixed parameterized subroutines can directly
access, influence, and change the state of Fledger. Any additional
subroutines are transparent to Fledger and only serve to further
structure, modularize, and/or synchronize the fixed parameterized
subroutines. The rest of this section describes and discusses the
static subroutines in more detail.
During a run of Fledger, there can be multiple instances of the
ideal functionality, each of which models a single session of a dis-
tributed ledger that can be uniquely addressed by a session ID (SID).
Each of these instances/sessions handles an unbounded number of
parties that can read from and write to the ledger, where a party
ID identifies each party (PID). A party (in a session) can either be
honest or corrupted, where only honest parties obtain any form of
security guarantees. In what follows, we explain – from the point of
view of honest parties – the process of submitting new transactions,
adding those transactions to the global state, and then reading from
that state (cf. Figure 2 for a formal definition of these operations).
Dishonest parties and further details are discussed afterwards.
Submitting transactions. During the run of Fledger, a higher-
level protocol can instruct an honest party pid in session sid of the
distributed ledger to submit a transaction tx. Upon receiving such
a request, Fledger forwards the request to the subroutine Fsubmit,2
which then decides whether the transaction is accepted, i.e., is
“valid”, and which exact information of tx should leak to the adver-
sary. As a result, Fledger expects to receive a boolean value from
Fsubmit indicating whether the transaction is accepted as well as
1We choose machines, instead of just algorithms, as parameters since they are more
flexible in terms of storing and sharing state, and since they can interact with the
adversary. For example, they could all have access to a global random oracle.
2Requests forwarded to subroutines always also contain a copy of the full internal
state of Fledger to allow subroutines to make decisions based on, e.g., the current list
of corrupted parties. In what follows, we keep this implicit for better readability.
Session 4A: Modeling Blockchains and Distributed Ledgers CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1045be the full transaction tx. We provide example instantiations of
Fsubmit as well as of all other subroutines in Sections 3 and 4.
Adding transactions to the global transaction list. At the
core of Fledger is a global list of transactions msglist, representing
the global state of the ledger. These transactions are ordered, i.e.,
they are numbered without gaps starting from 0, and form the basis
for reading requests of honest parties. Furthermore, they are stored
along with some additional information: the ID of the party which
submitted the transaction and two time stamps indicating when
the transaction was submitted, and when it was added to the global
state (we discuss the modeling of time further below). In addition
to transactions submitted by parties, we also allow the ledger to
contain ordered meta-information represented as a special type of
transaction without a submitting party and without a submitting
a time stamp. This meta transaction can be useful, e.g., to store
block boundaries of a blockchain in those cases where this should
be captured as an explicit property of a realization. Similar to ideal
functionalities for blockchains, the global transaction list of Fledger
is determined and updated by the adversary, subject to restrictions
that ensure expected security properties.
More specifically, at any point in time, the adversary on the
network can send an update request to Fledger. This request, which
contains an arbitrary bit string, is then forwarded to the subroutine
Fupdate. The exact format of the bit string provided by the adversary
is not a priori fixed and can be freely interpreted by Fupdate. This
subroutine then computes and returns to Fledger an extension of
the current global state, an update to the list requestQueue of
submitted transactions that specify transactions which should be
removed (as those have now become part of the global state, or they
became invalid concerning the updated global state), and leakage for
the network adversary. Upon receiving the response from Fupdate,
Fledger ensures that appending the proposed extension to msglist
still results in an ordered list of transactions. If this is the case,
then Fledger applies the proposed changes to both lists. In any
case, Fledger sends the leakage from Fupdate as well as a boolean
indicating whether any changes have been applied to the adversary.
The functionality Fledger, by default, guarantees only that there
exists a unique and ordered global list of transactions. Further
security properties which should be enforced for the global state
can be specified by appropriately instantiating Fupdate. For example,
Fupdate can be used to enforce the security properties of double
spending protection and no creation.
We note that the default guarantee provided by Fledger (existence
of a unique and ordered global list of transactions) is somewhat
weaker than the security notion of consistency for blockchains,
which additionally requires that all honest parties also obtain the
same (prefix of) that global state. Indeed, many distributed ledgers,
such as Corda, are not designed to and do not meet this notion of
consistency in its traditional sense (cf. our case study in Section 4). If
desired, the property of consistency can, of course, also be captured
in Fledger, namely via a suitable instantiation of Fread (see below).
Reading from the global state. A higher-level protocol can
instruct a party of Fledger to read from the global state. There are
two types of reading requests that we distinguish, namely, local and
non-local read requests: a local read request generates an immedi-
ate output based on the current global state, whereas a non-local
Figure 2: Excerpt of Fledger’s handling of submit, read, and
update operations. See Figure 5 to 6 in Appendix B for the
full specification. pidcur is the current party and sidcur the
ledger’s current session . round is the current time.
an arbitrary leakage. If the transaction tx is accepted, Fledger adds
tx together with the submitting party pid and a time stamp (see
below) to a buffer list requestQueue that keeps track of transactions
from honest parties which have not yet been added to the global
transaction list. In any case, both the acceptance result as well as
the leakage are then forwarded to the adversary.
As mentioned above, the specification of Fsubmit is a parameter
that is left to the protocol designer to instantiate. This allows for
customizing how the format of a “valid transaction” looks like and
whether submitted transactions are supposed to remain (partially)
private or fully leak to the adversary on the network. For example,
most blockchains do not provide any privacy for transactions, and
hence, for those blockchains the leakage generated by Fsubmit would
Session 4A: Modeling Blockchains and Distributed Ledgers CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1046read request might result in a delayed output, potentially based
on an updated global transaction list, or even no output at all (as
determined by the adversary on the network). Local reads capture
cases where a client already has a copy of the ledger stored within
a local buffer and reads from that buffer. To the best of our knowl-
edge local reads offered by realizations have not been formalized
in idealizations before in the blockchain literature. This is a very
useful feature for higher-level protocols since when local reads are
possible they do not have to deal with arbitrarily delayed responses,
dropped responses, or intermediate state changes. In contrast, a
non-local read instead models a thin client that first has to retrieve
the data contained in the ledger via the network, and hence, cannot
guarantee when (and if at all) the read request finishes.
More specifically, when Fledger receives a read request, the sub-
routine Fread is used to decide whether the read request is per-
formed locally or non-locally (this decision might depend on, e.g.,
party names or certain prefixes contained in the read-request) and
which exact information leaks to the adversary by the read opera-
tion. Fledger provides the adversary with the responses of Fread. The
adversary is then supposed to provide a bit string used to determine
the output for the read request. This response is forwarded back to
Fread, which uses the bit string to generate the read request’s final
output. The exact format of the bit string provided by the adversary
is not a priori fixed and can be freely interpreted by Fread. Finally,
the output is forwarded by Fledger to the higher-level protocol.
On a technical level, for properly modeling local read requests,
we use a feature of the iUC framework that allows for forcing the
adversary to provide an immediate response to certain network
messages (in Figure 2 the operation “send responsively” indicates
such network messages with immediate responses). That is, if the
adversary receives such a network message and wants to continue
the protocol run at all, then in the next interaction with the protocol
he has to provide the requested response; he cannot interact with
any part of the overall protocol before providing the response. As
shown in [10], this mechanism can, in principle, also be added
to Canetti’s UC model. Non-local read requests are split into two
separate activations of Fread, with the adversary being activated
in-between: the adversary has to be able to delay a response to such
requests and potentially also update the global state.
Besides local and non-local reads, any further security properties
regarding reading requests can be specified by instantiating Fread
appropriately. Fread can also be used to model access and privacy
properties of the global state where, e.g., parties may read only those
transactions from the global state where they have been involved
in. We use the latter in our analysis of Corda (cf. Section 4).
Having explained the basic operations of submitting transactions,
we now explain several further details and features of Fledger.
Initialization of Fledger. Distributed ledgers often rely on some
initial setup information – in blockchains often encoded in a so-
called genesis block – that is shared between all participants. To
allow for capturing such initially shared state Fledger includes an
ideal initialization subroutine Finit that can be defined by a protocol
designer and is used to initialize the starting values of all internal
variables of Fledger, including transactions that are already part
of the global transaction list (say, due to a genesis block that is
assumed to be shared by all parties).
Built-in clock. Our functionality Fledger includes a clock for
capturing security properties that rely on time. More specifically,
Fledger maintains a counter starting at 0 used as a timer. One can in-
terpret this counter as an arbitrary atomic time unit or the number
of communication rounds determined by an ideal network func-
tionality. As mentioned above, both the transactions submitted to
the buffer requestQueue and transactions included in the global
ordered transaction list msglist are stored with timestamps repre-
senting the time they were submitted respectively added to the
global state. This allows for defining security properties, which can
depend on this information.
Higher-level protocols/the environment can request the current
value of the timer, which not only allows for checking that passed
time was simulated correctly but also allows for building higher-
level protocols that use the same (potentially global) timer for their
protocol logic. The adversary on the network is responsible for
increasing the timer. More specifically, he can send a request to
Fledger to increase the timer by 1. This request is forwarded to and
processed by a subroutine FupdRnd, which gets to decide whether
the request is accepted and whether potentially some information
is to be leaked to the adversary. If the request is accepted, then
Fledger increments the timer by 1. In any case, both the decision
and the (potentially empty) leakage are returned to the adversary.
The subroutine FupdRnd can be instantiated to model various
time-dependent security properties, such as various forms of live-
ness [20, 21, 38] (see below). Note that the timer in Fledger is optional
and can be ignored entirely if no security properties that rely on
time should be modeled. In this case, FupdRnd can reject (or accept)
all requests from the adversary without performing any checks.
Corrupted parties. At any point in time, the adversary can
corrupt an honest party in a certain session of a distributed ledger.
This is done by sending a special corrupt request to the correspond-
ing instance of Fledger. Upon receiving such a request, the ideal
functionality uses a subroutine Fleak to determine the leakage upon
a party’s corruption. In the case of ledgers without private data
where the adversary already knows all transactions’ content, this
leakage can be empty. However, in cases where privacy should
be modeled and hence the adversary does not already know all
transactions, this leakage typically includes those transactions that
the corrupted party has access to.
As is standard for ideal functionalities, we give the adversary
full control over corrupted parties. More specifically, Fledger acts
as a pure message forwarder between higher-level protocols/the
environment and the network adversary for all corrupted parties.
Also, the adversary may send a special request to Fledger to perform
a read operation in the name of a corrupted party; this request is
then forwarded to and processed by the subroutine Fread, and the
response is returned to the adversary. Just as for Fleak, this operation
is mainly included for instantiations of Fledger that include some
form of privacy for transactions, as in all other cases, the adversary
already knows the full contents of all transactions.
Novel interpretation of corruption in realizations. Typi-
cally, realizations of ideal functionalities use the same corruption
model as explained above. That is, a party in a realization considers
itself to be corrupted if it (or one of its subroutines) is under direct
control of the adversary. While realizations with this corruption
Session 4A: Modeling Blockchains and Distributed Ledgers CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1047model are supported by Fledger, we also propose to use a more
general interpretation of corruption in realizations (cf., e.g., [33]):
parties in a realization of Fledger should consider themselves to be
corrupted – essentially by setting a corruption flag – not just if the
adversary directly controls them, but also if an underlying security
assumption, such as honest majority or bounded network delay, is