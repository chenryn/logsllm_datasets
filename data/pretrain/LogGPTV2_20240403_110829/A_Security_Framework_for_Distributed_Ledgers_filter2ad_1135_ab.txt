### Main Contribution: Fledger for Distributed Ledgers

In this section, we introduce the primary contribution of our paper: Fledger, an ideal functionality for distributed ledgers that encompasses common blockchains as a special case. At a high level, Fledger is designed to support read and write operations, which are essential for higher-level protocols to submit data to the ledger and access data from other parties. We will first provide a detailed explanation of Fledger, followed by a discussion of its capabilities in capturing various distributed ledger technologies and established security properties.

#### 2.1 Description of Fledger

Fledger is defined within the iUC framework [11], a recently proposed, expressive, and convenient general framework for universal composability, similar in spirit to Canetti’s UC model [12]. Our explanation of Fledger is structured to be accessible to readers familiar with the UC model, even if they are not acquainted with the iUC framework.

**Core Structure:**
- **Main Machine:** Fledger is a single machine that handles incoming read and write requests.
- **Subroutine Machines:** In addition to the main machine, there are several subroutine machines that serve as parameters. These subroutines must be instantiated by the protocol designer to customize the security guarantees provided by Fledger.

**Figure 1: Overview of Fledger and its Subroutines**
- The open-headed arrow indicates that the adversary (A) also connects to all of Fledger's subroutines.

**Subroutines:**
- **Fsubmit:** Handles write requests and ensures the validity of submitted transactions.
- **Fread:** Processes read requests, models situations where not all clients are up-to-date, and ensures privacy properties.
- **Fupdate:** Manages updates to Fledger’s global state.
- **FupdRnd:** Controls updates to Fledger’s built-in clock.
- **Finit:** Determines the initial state of Fledger.
- **Fleak:** Defines the information that leaks upon corruption of a party in Fledger.

These subroutines can specify and share additional subroutines, such as a global random oracle, to ensure consistent hashes across all operations. However, only the fixed parameterized subroutines can directly access, influence, and change the state of Fledger. Additional subroutines are transparent to Fledger and serve to further structure, modularize, and synchronize the fixed subroutines.

**Session Management:**
- During a run of Fledger, multiple instances of the ideal functionality can exist, each modeling a single session of a distributed ledger uniquely identified by a session ID (SID).
- Each session handles an unbounded number of parties, identified by a party ID (PID), which can either be honest or corrupted. Only honest parties receive security guarantees.

**Transaction Submission:**
- A higher-level protocol can instruct an honest party (pid) in a session (sid) to submit a transaction (tx).
- Fledger forwards the request to the Fsubmit subroutine, which decides whether the transaction is valid and what information should leak to the adversary.
- If the transaction is accepted, it is added to a buffer list (requestQueue) along with the submitting party's ID and a timestamp.

**Adding Transactions to the Global List:**
- Fledger maintains a global list of transactions (msglist) representing the global state of the ledger.
- Transactions are ordered and stored with additional information: the submitting party's ID and two timestamps (submission and addition to the global state).
- The adversary can send update requests to Fledger, which are processed by the Fupdate subroutine. This subroutine computes and returns an extension to the current global state, updates to the requestQueue, and leakage for the adversary.
- Fledger ensures the updated list remains ordered and applies the changes if valid.

**Reading from the Global State:**
- Higher-level protocols can instruct a party to read from the global state, with two types of read requests:
  - **Local Reads:** Generate immediate output based on the current global state.
  - **Non-local Reads:** May result in delayed output or no output, depending on the adversary.
- The Fread subroutine determines whether a read request is local or non-local and what information leaks to the adversary.
- For local reads, the iUC framework forces the adversary to provide an immediate response, ensuring timely and reliable access to the global state.

**Initialization:**
- Fledger includes an initialization subroutine (Finit) to set up the starting values of internal variables, including any pre-existing transactions (e.g., from a genesis block).

**Built-in Clock:**
- Fledger includes a built-in clock (timer) to capture time-dependent security properties.
- The timer can be incremented by the adversary via the FupdRnd subroutine, which decides whether to accept the request and what information to leak.

**Corrupted Parties:**
- The adversary can corrupt an honest party by sending a special corrupt request to Fledger.
- The Fleak subroutine determines the leakage upon corruption, which can include transactions accessible to the corrupted party.
- Fledger acts as a message forwarder for corrupted parties, and the adversary can perform read operations on their behalf.

**Novel Interpretation of Corruption:**
- Fledger supports a more general interpretation of corruption in realizations, where parties consider themselves corrupted not only if directly controlled by the adversary but also if underlying security assumptions (e.g., honest majority or bounded network delay) are violated.

This comprehensive design allows Fledger to capture a wide range of distributed ledger technologies and security properties, providing a flexible and robust foundation for higher-level protocol development.