However, there is a problem with this number system. Namely, we may use large integers to depict small
real numbers. This, however, means that when multiplying several small real numbers, the representands
may grow exponentially and may overﬂow very fast. We would like to keep the absolute value of the
representands to be smaller than some reasonable constant.
The solution for this comes from the fact that there may be several diﬀerent (k, ε)-approximations of a
number. Thus we want a method for replacing a (k1, ε1)-approximation with a (k2, ε2)-approximation where
ε2 may be slightly greater than ε1, but where k2  i ≥ k, we will deduce xi from a and yi
We are given a golden section number(cid:74)a(cid:75)−ϕ(cid:74)b(cid:75). We perform bit decomposition on(cid:74)a(cid:75) and obtain its bits
(cid:74)a0(cid:75), . . . ,(cid:74)an−1(cid:75). Out of these, we are interested in bits with large indices as the less signiﬁcant bits will not
from b. This is done by multiplying xi with(cid:74)ai(cid:75) and deducing(cid:74)xiai(cid:75) from(cid:74)a(cid:75), and likewise, multiplying yi
with(cid:74)ai(cid:75) and deducing(cid:74)yiai(cid:75) from(cid:74)b(cid:75). Note that these protocols are local and thus practically free.
Data: (cid:74)a(cid:75),(cid:74)b(cid:75),{xi}n
i=k,{yi}n
1 {(cid:74)ai(cid:75)}n−1
i=0 ← BitExtract((cid:74)a(cid:75));
2 {(cid:74)zi(cid:75)}n−2
i=k ← {(cid:74)ai(cid:75)}n−2
i=k · {xi}n−2
3 {(cid:74)wi(cid:75)}n−2
i=k ← {(cid:74)ai(cid:75)}n−2
i=k ;
i=k · {yi}n−2
i(cid:75)}n−2
4 {(cid:74)z(cid:48)
i=k ← {(cid:74)1 − ai)(cid:75)}n−2
i=k ;
5 {(cid:74)w(cid:48)
i(cid:75)}n−2
i=k ← {(cid:74)(1 − ai)(cid:75)}n−2
(cid:74)a(cid:48)(cid:75) ←(cid:74)a(cid:75) −(cid:74)zi(cid:75);
(cid:74)b(cid:48)(cid:75) ←(cid:74)b(cid:75) −(cid:74)wi(cid:75);
(cid:74)a(cid:48)(cid:48)(cid:75) ←(cid:74)a(cid:75) +(cid:74)z(cid:48)
i(cid:75);
(cid:74)b(cid:48)(cid:48)(cid:75) ←(cid:74)b(cid:75) +(cid:74)w(cid:48)
i(cid:75);
Likewise, in the negative case, if ai = 0 and n − 1 > i ≥ k, we will add xi to a and yi to b.
Result: Given a golden section number and a normalization set, returns the number normalized
i=k · {xi}n−2
i=k ;
i=k · {yi}n−2
i=k ;
6 for i ← k to n − 2 do
Algorithm 1: GoldenNorm
according to the set.
Now we shall see what properties the pairs (xi, yi) must satisfy so that the ﬁnal result would have an
absolute value no greater than (cid:96) and that its diﬀerence from the original golden number would be no greater
than .
i=k (1 − ai)xi in the
negative case, to be in the interval (−(cid:96), (cid:96)). We note that in the positive case the following equality holds.
12 (cid:74)a(cid:75) ← ObliviousChoice((cid:74)an−1(cid:75),(cid:74)a(cid:48)(cid:75),(cid:74)a(cid:48)(cid:48)(cid:75));
13 (cid:74)b(cid:75) ← ObliviousChoice((cid:74)an−1(cid:75),(cid:74)b(cid:48)(cid:75),(cid:74)b(cid:48)(cid:48)(cid:75));
14 return(cid:74)a(cid:75),(cid:74)b(cid:75)
i=k aixi in the positive case and a +(cid:80)n−2
We want the end result, which is a −(cid:80)n−2
k−1(cid:88)
k−1(cid:88)
i=k
Likewise, in the negative case this holds.
a − n−2(cid:88)
ai(2i − xi).
n−2(cid:88)
n−2(cid:88)
n−2(cid:88)
ai2i +
aixi =
i=k
i=0
10