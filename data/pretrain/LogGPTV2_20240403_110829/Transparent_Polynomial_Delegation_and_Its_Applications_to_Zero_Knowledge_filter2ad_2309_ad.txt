evaluations of q|L and outputs the elements q(ai) for i ∈ I
(see Figure 3 in appendix). If any of the checks in GKR fails,
V aborts and outputs 0.
8) For each i ∈ I, V computes l(ai)· q(ai). Together with h(ai),
V completes the low degree test. If all checks above pass, V
outputs 1.
i) ← MT.Open(i, l|L) and (h(ai), πh
i )
MT.Verify(rootl, i, l(ai), πl
i)
|H|·l(x)·q(x)−μ−|H|·ZH(x)h(x)
complete
6) V
the test
7) To
(cid:3)
|H|·x
the
N
N
(cid:8)
number of possible monomials in an (cid:2)-variate polynomial with
variable degree d, and let c = (c1, . . . , cN ) be the coefﬁcients
of f in the order deﬁned by W(cid:3),d such that f (x1, . . . , x(cid:3)) =
(cid:8)
i=1 ciWi(x), where Wi(x) is the i-th monomial in W(cid:3),d.
Deﬁne the vector T = (W1(t), . . . , WN (t)), then naturally
i=1 ci · Ti, the inner product
the evaluation equals f (t) =
of the two vectors. We then select a multiplicative coset
H such that |H| = N, 5 and interpolate vectors c and T
to ﬁnd the unique univariate polynomials that evaluate to c
and T on H. We denote the polynomials as l(x) and q(x)
such that l|H = c and q|H = T . With these deﬁnitions,
a∈H l(a) · q(a), which is the sum
f (t) =
of the polynomial l(x) · q(x) on H. The veriﬁer can check
the evaluation through a univariate sumcheck protocol with
the prover. The detailed protocol is presented in step 1-4 of
Protocol 2.
i=1 ci · Ti =
(cid:8)
(cid:8)
N
5If such coset does not exist, we can pad N to the nearest number with a
coset of that size, and pad vector T with 0s at the end.
Up to this point, the construction for validating the inner
product between a vector committed by P and a public vector
is similar to and simpler than the protocols to check linear
constraints proposed in [5], [14]. However, naively applying
the univariate sumcheck protocol incurs a linear overhead for
the veriﬁer. This is because as described in Section II-D, at
the end of the univariate sumcheck, due to the low degree test,
the veriﬁer needs oracle access to the evaluations of l(x)·q(x)
at κ points on L, a superset of H. As l(x) is deﬁned by c,
i.e. the coefﬁcients of f, the prover can commit to l|L at the
beginning of the protocol, and opens to points the veriﬁer
queries with their Merkle tree proofs. q(x), however, is deﬁned
by the public vector T , and the veriﬁer has to evaluate it
locally, which takes linear time. This is the major reason why
the veriﬁcation time in the zero knowledge proof schemes for
generic arithmetic circuits in [5], [14] is linear in the size of
the circuits.
Reducing the veriﬁcation time. In this paper, we propose an
approach to reduce the cost of the veriﬁer to poly-logarithmic
for VPD. We observe that in our construction, though the
size of T and q(x) is linear in N, it is deﬁned by only
(cid:2) = O(log N ) values of the evaluation point t. This means
that the oracle access of κ points of q(x) can be modeled as
a function that: (1) Takes t as input, evaluates all monomials
Wi(t) for all Wi ∈ W(cid:3),d as a vector T ; (2) Extrapolates the
vector T to ﬁnd polynomial q(x), and evaluates q(x) on L; (3)
Outputs κ points of q|L chosen by the veriﬁer. Although the
size of the function modeled as an arithmetic circuit is Ω(N )
with O(log N ) depth, and the size of its input and output
is only O(log N + κ). Therefore, instead of evaluating the
function locally, the veriﬁer can delegate this computation to
the prover, and validate the result using the GKR protocol,
as presented in Section II-C. In this way, we eliminate the
linear overhead to evaluate these points locally, making the
veriﬁcation time of the overall VPD protocol poly-logarithmic.
The formal protocol is presented in Protocol 2.
in the ﬁrst part, each value ti
To avoid any asymptotic overhead for the prover, we also
design an efﬁcient layered arithmetic circuit for the function
mentioned above. The details of the circuit are presented in
Figure 3. In particular,
in
the input t is raised to powers of 0, 1, . . . , d. Then they are
expanded to T , the evaluations of all monomials in W(cid:3),d,
by multiplying one ti at a time through a (d + 1)-ary tree.
The size of this part is O(N ) = O((d + 1)(cid:3)) and the depth
is O(log d + (cid:2)). In the second part,
the polynomial q(x)
and the vector q|L is computed from T directly using FFTs.
We ﬁrst construct a circuit for an inverse FFT to compute
the coefﬁcients of polynomial q(x) from its evaluations T .
Then we run an FFT to evaluate q|L from the coefﬁcients
of q(x). We implement FFT and IFFT using the Butterﬂy
circuit [33]. The size of the circuit is O(N log N ) and the
depth is O(log N ). Finally, κ points are selected from q|L. As
the whole delegation of the GKR protocol is executed at the
end in Protocol 2 after these points being ﬁxed by the veriﬁer,
the points to output are directly hard-coded into the circuit
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:59:28 UTC from IEEE Xplore.  Restrictions apply. 
865
with size O(κ) and depth 1. No heavy techniques for random
accesses in the circuit is needed. Therefore, the whole circuit
is of size O(N log N ) and depth O(log N ), with (cid:2) inputs and
κ outputs.
Theorem 1. Protocol 2 is a veriﬁable polynomial delegation
protocol that is complete and sound under Deﬁnition 3.
We give the proof in Appendix C.
Efﬁciency. The running time of Commit is O(N log N ). C in
step 7 is a regular circuit with size O(N log N ), depth O((cid:2) +
log d) and size of input and output O((cid:2) + κ). By Lemma 1
and 5, the prover time is O(N log N ), the proof size and the
veriﬁcation time are (log2 N ).
Extending to other ZKP schemes. We notice that our
technique can be potentially applied to generic zero knowledge
proof schemes in [5], [14] to improve the veriﬁcation time
for circuits/constraint systems with succinct representation. As
mentioned previously, the key step that introduces linear ver-
iﬁcation time in these schemes is to check a linear constraint
system, i.e., y = Aw, where w is a vector of all values on
the wires of the circuit committed by the prover, and A is a
public matrix derived from the circuit such that Aw gives a
vector of left inputs to all multiplication gates in the circuit.
(This check is executed 2 more times to also give right inputs
and outputs.) To check the relationship, it is turned into a
vector inner product μ = ry = rA · w by multiplying both
sides by a random vector r. Similar to our naive protocol to
check inner product, the veriﬁcation time is linear in order
to evaluate the polynomial deﬁned by rA at κ points. With
our new protocol, if the circuit can be represented succinctly
in sublinear or logarithmic space, A can be computed by a
function with sublinear or logarithmic number of inputs. We
can use the GKR protocol to delegate the computation of
rA and the subsequent evaluations to the prover in a similar
way as in our construction, and the veriﬁcation time will only
depend on the space to represent the circuit, but not on the
total size of the circuit. This is left as a future work.
A. Achieving Zero Knowledge
Our VPD protocol in Protocol 2 is not zero knowledge.
Intuitively, there are two places that leak information about the
polynomial f: (1) In step 6 of Protocol 2, P opens evaluations
of l(x), which is deﬁned by the coefﬁcients of f; (2) In step 4,
P and V execute low degree tests on (l(x) · q(x), h(x)), p(x)
and the proofs of LDT reveal information about the polyno-
mials, which are related to f.
To make the protocol zero knowledge, we take the standard
approaches proposed in [5], [14]. To eliminate the former
leakage of queries on l(x), the prover picks a random degree
(x) = l(x)+ZH(x)·r(x),
κ polynomial r(x) and masks it as l
a∈H(x − a). Note here that
where as before, ZH(x) =
(a) = l(a) for a ∈ H, yet any κ evaluations of l
(cid:4)
(x) outside
l
H do not reveal any information about l(x) because of the
(x) is |H| + κ, and
masking polynomial r(x). The degree of l
we denote domain U = L − H.
(cid:11)
(cid:4)
(cid:4)
(cid:4)
(cid:2)N
(cid:3)
(cid:2)
MT.Commit(l
(cid:3)|U and runs rootl(cid:3)
Protocol 3 (Zero Knowledge Veriﬁable Polynomial Delegation). Let
F be a family of (cid:8)-variate polynomial over F with variable-degree d
and N = (d + 1)(cid:4).We use W(cid:4),d = {Wi(x1, . . . , x(cid:4))}N
i=1 to denote
the collection of all monomials in F.
• pp ← zkVPD.KeyGen(1λ): Same as KeyGen in Procotol 2.
Deﬁne U = L − H.
• com ← Commit(f, rf , pp): For a polynomial f ∈ F of
the form f (x) =
i=1 ciWi(x), ﬁnd the unique univariate
polynomial l(x) : F → F such that l|H = (c1, . . . , cN ). P
samples a polynomial r(x) with degree κ randomly and sets
(x) = l(x) + ZH(x) · r(x), where ZH(x) =
a∈H(x − a).
(cid:3)
l
(cid:3)|U). Output
P evaluates l
com = rootl(cid:3).
• ((μ, π);{0, 1}) ← (cid:3)Open(f, rf ), Verify(com)(cid:4)(t, pp): This is an
interactive protocol between P and V. It replaces the univariate
(x) · q(x) + αs(x) and L by U in
sumscheck on l(x) · q(x) by l
Protocol 2.
1) P computes μ = f (t) and sends it to V.
2) P evaluates T = (W1(t), . . . , WN (t)). P ﬁnds the unique
univariate polynomial q(x) : F → F such that q|H = T .
3) P samples randomly a degree 2|H| + κ − 1 polynomial s(x).
a∈H s(a) and roots ← MT.Commit(s|U).
P sends V S =
4) V picks α ∈ F randomly and sends it to P.
(x) · q(x) + s(x). P uniquely decomposes it
5) P computes αl
(cid:3)
as g(x) + ZH(x) · h(x), where the degrees of g and h are
strictly less than |H| and |H| + κ. P evaluates h|U and sends
rooth MT.Commit((h|U) to V.
|H|·(αl(cid:3)(x)·q(x)+s(x))−(αμ+S)−|H|·ZH(x)h(x)
.
P and V invoke
(cid:3)LDT.P((l
·
(cid:3)
q, h, s), p), LDT.V((2|H| + κ,|H| + κ, 2|H| + κ),|H|− 1)(cid:4)(U).
If the test fails, V aborts and output 0. Otherwise, at the
the test, V needs oracle access to κ points of
end of
(x) · q(x), h(x), s(x) and p(x) at indices I.
(cid:3)
l
7) For each index i ∈ I, let ai be the corresponding point in
U. P opens (l
MT.Open(i, h|U) and (s(ai), πs
(cid:3)|U), (h(ai), πh
i )
i ) ← MT.Open(i, s|U).
(ai), πl(cid:3)
MT.Verify(rootl(cid:3) , i, l
i ),
MT.Verify(rooth, i, h(ai), πh
and
i )
MT.Verify(roots, i, s(ai), πs
for all points opened by
i )
P. If any veriﬁcation fails, abort and output 0.
test, P and V runs
low degree
(cid:3)GKR.P, GKR.V(cid:4)(C, t), where
the
circuit C computes
evaluations of q|U and outputs the elements q(ai) for i ∈ I. If
any of the checks in GKR fails, V aborts and outputs 0.
(ai)· q(ai). Together with h(ai)
and s(ai), V completes the low degree test. If all checks above
pass, V outputs 1.
10) For each i ∈ I, V computes l
i ) MT.Open(i, l
6) Let p(x) =
(ai), πl(cid:3)
complete
executes
the
low degree
test:
9) To
the
(cid:3)
8) V
|H|·x
(cid:3)
(cid:3)
(cid:3)
(cid:4)
(cid:8)
a∈H(αl
To eliminate the latter
leakage, P samples a random
(x) · q(x), sends
polynomial s(x) of the same degree as l
a∈H s(a) to V and runs the univariate sumcheck
S =
(cid:8)
protocol on their random linear combination: αμ + S =
(x) · q(x) + s(x)) for a random α ∈ F chosen by
(cid:4)
V. This ensures that both μ and S are correctly computed
because of the random linear combination and the linearity of
the univariate sumcheck, while leaking no information about
(x) · q(x) during the protocol, as it is masked by s(x).
(cid:4)
l
One advantage of our construction is that the GKR protocol
used to compute evaluations of q(x) in step 7 of Protocol 2
remains unchanged in the zero knowledge version of the VPD.
This is because q(x) and its evaluations are independent of the
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:59:28 UTC from IEEE Xplore.  Restrictions apply. 
866
polynomial f or any prover’s secret input. Therefore, it sufﬁces
to apply the plain version of GKR without zero knowledge,
avoiding any expensive cryptographic primitives.