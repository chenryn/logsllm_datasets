### 4. Methodology Realization: Fault Injection

#### Types of Fault Injection
Two types of fault injection were applied to the target system:

1. **Processor-based Fault Injection:**
   - This method utilized a commercial device known as an In-Circuit Emulator (ICE) for fault injection. The ICE is typically used in embedded systems development and was configured to carry out fault injection. For more details, see reference [6].

2. **Inter-channel Fault Injection:**
   - For inter-channel fault injection, a Field-Programmable Gate Array (FPGA) was employed. The FPGA was configured to snoop on the network, detect various fields in the network token and message packets, and then corrupt them according to a predefined fault mask in real time. For complete details of the apparatus, see reference [7].

#### Experimental Setup
To simulate realistic operational conditions, we used representative software from a Reactor Protection System (RPS) executing on the target Instrumentation and Control (I&C) system. To provide realistic inputs to the RPS software, we interfaced the target I&C system with a plant simulator that accurately represented the thermal-hydraulic and nucleonic behavior of a reactor under various conditions. See reference [8] for more details.

#### Fault Injection Environment
The main purpose of the fault injection environment is to provide a repeatable, controllable, and automated platform for fault injection, as defined by the methodology. Due to the complex nature of fault injection and the need for tight coordination among various processes (e.g., data acquisition, fault injection, and data logging), a cross-platform tool was found to be effective. Our fault injection environment uses National Instruments LabVIEWTM, an industry-standard platform for integrating the necessary components of the fault injection methodology. See reference [9] for complete details.

### 5. Experiments and Results

#### Assessment of Dependability
In this effort, we chose two fault models: bit flip and stuck at faults. The bit flip model is well-known for transient faults such as single event upsets (SEUs), voltage deviations, and electromagnetic interference (EMI). Operational and environmental profiles must be representative of the different system configurations and workloads that may occur in nuclear facilities.

#### Experimental Campaigns
Once the fault injection environment, workload, and RPS code activities were completed over several months, we initiated the fault injection campaigns. These experiments included, but were not limited to:
- Error detection coverage for an injected fault
- Fault/error detection latency
- Consistency of error detection reporting across all channels
- Inter-channel message corruption
- Inter-channel communication token corruptions

##### 5.1 Processor-Based Experiments
We conducted approximately 500 fault locations in the target system, each repeated multiple times to expose the system to different fault activation intervals. The main experiment involved simulating a loss of coolant accident in a reactor to determine whether the target I&C system with one faulty channel would correctly detect the fault and initiate a trip in a timely manner. Summary results are shown in Table 1. Since no uncovered faults were found, we applied the method of variance estimation to provide a conservative bound on the coverage estimate [10].

| Location | Point | Mean | Total # of No | % |
|----------|-------|------|---------------|---|
| During Loss of Coolant | Memory | .999697 | Bimodal | 5274 | 1975 | 100% |
| Response | Correct | 600ms, 10.3 sees |  |  |
| Registers | .9998 | 1003 | 1470 | 622 | 100% |
| ms |  |  |  |  |

##### 5.2 Inter-Channel Injections
The inter-channel communication network used in the target system is standardized by the International Electrotechnical Commission (IEC) for industrial applications. We felt it important to inject both data corruption and token corruption faults to determine the robustness of the target system. For both token and data corruptions, we varied the fault duration from 1 ms to 50 ms. Table 2 summarizes the results.

| Token | # FI = 900 | Sync Time | Re-Insertion | Percentage Data | Detected | #FI=700 | detected. | Percentage |
|-------|-------------|-----------|--------------|-----------------|----------|----------|------------|------------|
| Tokens | 4 ms | 15.3 | N/A |  |  |  |  |
| Corrupt | 2.2us | 82% |  |  |  |  |
| Lost | Multiple | 2.2us | same |  |  |  |
| Message | 97% | average corruption | Length | 75% |  |

While the main fault tolerance mechanisms (e.g., 2 out of 4 voter) performed satisfactorily, some secondary fault tolerance mechanisms (e.g., background diagnostics) exhibited unusual behavior. Specifically, the re-insertion time of a processor (master) after multiple tokens were lost was significant, and the detection of the data message length field was poor.

### 6. Challenges, Issues, and Lessons Learned

One of the significant challenges faced in this assessment was the proprietary nature of the system, which meant that design documents, source code, and test documents could not be made available to us. This is a common issue in industrial systems. We overcame these challenges by using methods that did not require significant modifications to the system hardware or software, such as ICE-based fault injection and Software Implemented Fault Injection (SWIFI).

### 7. References
[1] NRC/DOE Workshop U.S. Nuclear Power Plant Life Extension Research and Development, "Life Beyond 60 Workshop Summary Report", U.S. Nuclear Regulatory Commission and U.S. Department of Energy, Prepared by Energetics Inc., Feb. 19-21, 2008.
[2] CETS Committee, "Digital Instrumentation and Control Systems in Nuclear Power Plants: Safety and Reliability Issues", National Academic Press, 1997.
[3] Arlat, J., Costes, A., Crouzet, Y., Laprie, J.-C., and Powell, D., "Fault Injection for Dependability Evaluation of Fault-Tolerant Systems", IEEE Transactions on Computers, Vol. 42, No. 8, August 1993, pp. 913-923.
[4] C. Elks, B. Johnson, and M. Reynolds, "A Perspective on Fault Injection Methods for Digital I&C Systems", 6th International Meeting on Nuclear Plant Instrumentation, Control and Human-Machine Interface Technologies (NPlC&HMIT 2009), April 5 - 9, 2009, Knoxville, TN.
[5] David Powell, Eliane Martins, Jean Arlat, Yves Crouzet, "Estimators for Fault Tolerance Coverage Evaluation", IEEE Transactions on Computers, vol. 44, no. 2, February 1995, pp. 261-274.
[6] N. I. George, "ICE-Based Fault Injection," MS Thesis, School of Applied Science and Engineering, Electrical and Computer Engineering, University of Virginia, Charlottesville, August, 2007.
[7] R. D. Williams, M. Miklo, and C. R. Elks. "Token Fault Injection in Profibus dp". In 6th American Nuclear Society International Topical Meeting on Nuclear Plant Instrumentation, Control and Human-Machine Interface Technologies, April 2009.
[8] NRC codes division. "TRACE Reactor Modeling tool". http://www.nrccodes.com.
[9] M. Reynolds, C. Elks, et al. "A Lab-view Based Fault Injection Framework for Dependability Evaluation". Sixth American Nuclear Society International Topical Meeting on Nuclear Plant Instrumentation, Control, and Human-Machine Interface Technologies NPIC&HMIT 2009, Knoxville, Tennessee, April 5-9, 2009.
[10] D. T Smith, B. W Johnson, N. Andrianos, A., Profeta III, "A Variance Reduction Technique Using Fault Expansion for Fault Coverage Estimation", IEEE Transactions on Reliability, Vol. 46, No.3, September 1997, pp. 366-374.

978-1-4244-7501-8/10/$26.00 Â©2010 IEEE  
DSN 2010: Elks et al.  
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18, 2021, at 14:04:43 UTC from IEEE Xplore. Restrictions apply.