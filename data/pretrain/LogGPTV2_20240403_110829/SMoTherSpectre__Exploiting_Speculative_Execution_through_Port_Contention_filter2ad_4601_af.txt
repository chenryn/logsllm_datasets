Lipp, Stefan Mangard, Thomas Prescher, Michael Schwarz, and Yuval Yarom.
2018. Spectre Attacks: Exploiting Speculative Execution. In IEEE Symposium on
Security and Privacy.
[24] Esmaeil Mohammadian Koruyeh, Khaled N. Khasawneh, Chengyu Song, and
Nael Abu-Ghazaleh. 2018. Spectre Returns! Speculation Attacks using the Return
Stack Buffer. In USENIX Workshop On Offensive Technologies.
[25] Jan Laukemann, Julian Hammer, Johannes Hofmann, Georg Hager, and Gerhard
Wellein. 2018. Automated Instruction Stream Throughput Prediction for Intel
and AMD Microarchitectures. https://arxiv.org/abs/1809.00912.
[26] Moritz Lipp, Michael Schwarz, Daniel Gruss, Thomas Prescher, Werner Haas,
Anders Fogh, Jann Horn, Stefan Mangard, Paul Kocher, Daniel Genkin, Yuval
Yarom, and Mike Hamburg. 2018. Meltdown: Reading Kernel Memory from User
Space. In USENIX Security Symposium.
[27] Giorgi Maisuradze and Christian Rossow. 2018. Ret2Spec: Speculative Execution
Using Return Stack Buffers. In Conference on Computer and Communications
Security.
[28] Dag Arne Osvik, Adi Shamir, and Eran Tromer. 2006. Cache Attacks and Coun-
termeasures: The Case of AES. In Topics in Cryptology.
[29] Michael Schwarz, Martin Schwarzl, Moritz Lipp, and Daniel Gruss. 2018. NetSpec-
tre: Read Arbitrary Memory over Network. https://arxiv.org/abs/1807.10535.
[30] Alexander Sotirov. 2009. Bypassing memory protections: The future of exploita-
tion. In USENIX Security.
lkml/2018/1/21/192.
[31] Linus Torvalds. 2018. Linus on Spectre/Meltdown mitigations. https://lkml.org/
[32] Eran Tromer, Dag Arne Osvik, and Adi Shamir. 2010. Efficient Cache Attacks on
AES, and Countermeasures. Journal of Cryptology (2010).
[33] Paul Turner. 2018. Retpoline: a software construct for preventing branch-target-
injection. https://support.google.com/faqs/answer/7625886.
[34] Jo Van Bulck, Marina Minkin, Ofir Weisse, Daniel Genkin, Baris Kasikci, Frank
Piessens, Mark Silberstein, Thomas F. Wenisch, Yuval Yarom, and Raoul Strackx.
2018. Foreshadow: Extracting the Keys to the Intel SGX Kingdom with Transient
Out-of-Order Execution. In USENIX Security Symposium.
[35] Zhenghong Wang and Ruby B. Lee. 2006. Covert and Side Channels Due to
Processor Architecture. In Proceedings of the 22Nd Annual Computer Security
Applications Conference (ACSAC ’06). IEEE Computer Society, Washington, DC,
USA, 473–482. https://doi.org/10.1109/ACSAC.2006.20
[36] Yuval Yarom and Katrina Falkner. 2014. FLUSH+RELOAD: A High Resolution,
Low Noise, L3 Cache Side-channel Attack. In USENIX Security Symposium.
[37] Yinqian Zhang, Ari Juels, Michael K. Reiter, and Thomas Ristenpart. 2012. Cross-
VM side channels and their use to extract private keys. In the ACM Conference
on Computer and Communications Security, CCS’12, Raleigh, NC, USA, October
16-18, 2012, Ting Yu, George Danezis, and Virgil D. Gligor (Eds.). ACM, 305–316.
https://doi.org/10.1145/2382196.2382230
A GADGETS LEAKING 21 BITS OF RAX
The following table lists parts of SMoTher-gadgets which can be
used to leak 21 bits of information from rax. We also show which
library the gadget was found in.
Address
0xd3900
0x1101cb
0x12f779
0x29709
0x126500
0x7e83
0xc378e
0xd7e50
0x12cad9
0xf1794
0x5f661
0x11c7f6
0x10ca11
0x17bcd4
0x268de
0xbe656
0x26f20
0xb3ba0
0xb7db
0x50e7b
0xa6133
Comparison instruction
test 0x1, al
test 0x2, al
and 0x4, al
and 0x8, al
and 0x10, al
and 0x20, al
and 0x40, al
and 0x80, eax
test 0x2, ah
test 0x307, ax
and 0x2100, eax
and 0x2abd, eax
and 0x8000, eax
test 0x100000, eax
test 0x200000, eax
and 0x3084a5, eax
test 0x800000, eax
test 0x1000000, eax
test 0x40000000, eax
test 0x80000000, eax
test 0x83000002, eax
Library
glibc
glibc
glibc
glibc
glibc
ld
glibc
glibc
stdc++
libcrypto
glibc
glibc
glibc
libcrypto
ssl
glibc
ssl
glibc
pthread
ssl
libcrypto
add
add
cmp
0x1, rax
0x20, rdx
rax, -0x100(rbp)
0x400, (rdx)
f5382
-0xb0(rbp), rdi
-0xf0(rbp), edx
(rdi, rax, 8), rax
edx, edx
rax, 0x50(rbx)
B OPENSSL ATTACK GADGETS
B.1 SMoTher gadget
The following gadget leaks the 3rd LSB from the byte at offset 1
from the pointer in rdx.
f5393:
f539a:
f539c:
f53a3:
f53a9:
f53ad:
f53af:
...
f5382:
f5386:
f538a:
...
C OPENSSH ATTACK GADGETS
C.1 SMoTher gadget with rdi pointer
The following gadget leaks the LSB from the byte at offset 1 from
the pointer in rdi.
...
6f8dc:
6f8e2:
6f8e4:
6f8e8:
6f8ec:
6f8ef:
6f8f2:
6f8f6:
6f8fa:
0x100, (rdi)
6f8ef
0x10(rbx), rax
0x8(rbx), rax
rax, rsi
rbx, rdi
ecx, 0xc(rsp)
edx, 0x8(rsp)
rsi, (rsp)
testq
je
mov
mov
mov
test
mov
testl
je
mov
sub
sub
mov
mov
mov
mov
...
C.2 SMoTher gadgets with r12 pointer
The following gadget leaks the 5th LSB from the byte at offset 56
from the pointer in r12.
e8577:
e857d:
e8583:
e8587:
e8588:
e858a:
e858c:
e858f:
e8592:
e8595:
e8598:
e859b:
...
e8608:
e860c:
e860d:
e860f:
...
testb
je
sub
push
pushq
pushq
mov
mov
mov
sub
mov
mov
sub
push
push
push
0x10, 0x38(r12)
e8608
0x8, rsp
rbx
0x0
0x0
edx, r8d
edx, r9d
r10d, ecx
r10d, r8d
r13, rsi
r12, rdi
0x8,rsp
rbx
r14
r15
The following gadget leaks the 4th LSB from the byte at offset
12 from the pointer in r12.
5220e:
52214:
52216:
52218:
5221a:
...
52221:
52224:
52228:
5222c:
...
testb
je
xor
xor
xor
0x8, 0xd(r12)
52221
edx, edx
esi, esi
edi, edi
mov
add
sar
cmp
r13, rcx
0x3, r13
0x2, rcx
0x6, r13
The following gadget leaks the 4th LSB from the byte at offset
13 from the pointer in r12.
529a2:
529a8:
529ae:
529b5:
529b9:
...
523da:
523e1:
523e3:
...
testb
je
mov
lea
cmp
0x8, 0xc(r12)
523da
-0x100(rbp), rcx
0xc(rcx), rdx
rax, rdx
mov
mov
add
-0xf8(rbp), r13d
(rax), edx
-0xe8(rbp), r13d
D RESPONSIBLE DISCLOSURE
The attacks presented in this paper were disclosed to Intel, OpenSSL
and AMD in late 2018.
©Copyright International Business Machines Corporation and EPFL 2019
All Rights Reserved
Printed in the United States of America (09/19/2019)
The following are trademarks of International Business Machines Corporation in the
United States, or other countries, or both.
IBM
IBM Research
IBM Z
POWER
Other company, product, and service names may be trademarks or service marks of
others. All information contained in this document is subject to change without notice.
The products described in this document are NOT intended for use in implantation,
life support, space, nuclear, or military applications where malfunction may result in
injury or death to persons. The information contained in this document does not affect
or change IBM product specifications or warranties. Nothing in this document shall
operate as an express or implied license or indemnity under the intellectual property
rights of IBM or third parties. All information contained in this document was obtained
in specific environments, and is presented as an illustration. The results obtained in
other operating environments may vary. THE INFORMATION CONTAINED IN THIS
DOCUMENT IS PROVIDED ON AN "AS IS" BASIS. In no event will IBM be liable for
damages arising directly or indirectly from any use of the information contained in
this document.
IBM Corporation
New Orchard Road
Armonk, NY 10504