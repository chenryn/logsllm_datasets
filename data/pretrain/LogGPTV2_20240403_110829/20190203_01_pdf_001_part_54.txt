### Configuration and Usage of Data Validator

#### Database Connection Details
- **Target Database**: `edb`
- **Target User**: `enterprisedb`
- **Target Password**: `password`

The following example compares all tables in the Oracle EDB schema against the Advanced Server public schema. The Data Validator log files are created in the directory `/home/user/datavalidator_logs`, as specified with the `-ld` option. The operating system account used to invoke the `runValidation.sh` script must have write access to the `/home/user` directory so that the Data Validator can create the `datavalidator_logs` subdirectory.

#### Running the Data Validator Script
1. Change to the bin directory:
   ```sh
   $ cd /opt/PostgreSQL/EnterpriseDB-xDBReplicationServer/bin
   $ pwd
   /opt/PostgreSQL/EnterpriseDB-xDBReplicationServer/bin
   ```

2. Execute the `runValidation.sh` script with the required options:
   ```sh
   $ ./runValidation.sh -ss edb -ts public -ld /home/user/datavalidator_logs
   ```

3. Output from the script:
   ```
   EnterpriseDB DataValidator Build 3
   -------------------------------------------------------------------------------
   Source and target databases connection information
   -------------------------------------------------------------------------------
   Source database:
   DBMS: ORACLE
   Host: 192.168.2.23
   Port: 1521
   Database: xe
   User: edb
   Target database:
   DBMS: ENTERPRISEDB
   Host: localhost
   Port: 5444
   Database: edb
   User: enterprisedb
   -------------------------------------------------------------------------------
   Databases data validation process started...
   -------------------------------------------------------------------------------
   Validating Table DEPT
   Rows validated: 5
   Finished validating table DEPT with 1 error.
   Logging errors details in the diff file...
   Validating Table EMP
   Rows validated: 16
   Finished validating table EMP with 2 errors.
   Logging errors details in the diff file...
   Validating Table JOBHIST
   Rows validated: 17
   Finished validating table JOBHIST with 0 errors.
   Validating Table ORATAB
   Table not validated as it does not exist on the target database.
   DataValidator found 3 errors across source and target databases.
   For detailed error report see datavalidator_20150713-144417.diff file.
   -------------------------------------------------------------------------------
   Data validation process has completed.
   -------------------------------------------------------------------------------
   *****************************************************************************
   DataValidator Summary
   *****************************************************************************
   All tables count: 4
   Validated tables count: 3
   Rows count: 38
   Errors count: 3
   Missing tables on the target database count: 1
   Tables list:
   - EDB.ORATAB
   Tables having only unsupported datatypes count: 0
   Tables having primary key limitation count: 0
   Total time(s): 0.678
   Rows per second: 56
   *****************************************************************************
   ```

#### Log Files
The Data Validator creates log files in the specified directory. The log file contains the same content as displayed when the Data Validator is invoked, while the diff file highlights the differences where errors were detected.

```sh
$ pwd
/home/user/datavalidator_logs
$ ls -l
total 24
-rw-rw-r-- 1 user user 18999 Aug 13 15:44 datavalidator_20150713-144417.diff
-rw-rw-r-- 1 user user 2133 Aug 13 15:44 datavalidator_20150713-144417.log
```

#### Example with Specific Tables
To include only specific tables (e.g., `dept` and `emp`) in the comparison, use the `-it` option:

```sh
$ ./runValidation.sh -ss edb -ts public -ld /home/user/datavalidator_logs -it dept,emp
```

#### Example with Excluded Tables
To exclude specific tables (e.g., `ORATAB` and `jobhist`) and display only the Data Validator summary, use the `-et` and `-ds true` options:

```sh
$ ./runValidation.sh -ss edb -ts public -ld /home/user/datavalidator_logs -et ORATAB,jobhist -ds true
```

### Appendix

#### 10. Certified and Supported Database Servers and Configurations

##### 10.1.1 Certified and Supported Product Versions
- **PostgreSQL versions**: 9.2, 9.3, 9.4, 9.5, 9.6, 10, and 11
- **Advanced Server versions**: 9.2, 9.3, 9.4, 9.5, 9.6, 10, and 11
- **Oracle**:
  - 10g Release 2 version 10.2.0.1.0 (newer minor versions in the 10.2 line supported)
  - 11g Release 2 version 11.2.0.2.0 (newer minor versions in the 11.2 line supported)
  - 12c version 12.1.0.2.0 (newer minor versions in the 12.1 line supported)
- **SQL Server**:
  - 2008 version 10.50.1617.0 (newer minor versions in the 10.50 line supported)
  - 2012 version 11.0.6020.0 (newer minor versions in the 11.0 line supported)
  - 2014 version 12.0.5000.0 (newer minor versions in the 12.0 line supported)

##### 10.1.2 A Note Regarding Oracle RAC and Oracle Exadata
- **Oracle Real Application Clusters (RAC)** and **Oracle Exadata** are not supported by xDB Replication Server.

##### 10.1.3 Permitted Configurations and Combinations
- **Single-Master Replication System**:
  - **Source**: Publication database server.
  - **Target**: Subscription database server.
- **Multi-Master Replication System**:
  - All participating database servers act as both a source and a target for all other participating database servers.

###### 10.1.3.1 Advanced Server Compatibility Configuration Modes
- **Oracle compatible configuration mode**: Uses Oracle syntax and semantics.
- **PostgreSQL compatible configuration mode**: Uses native PostgreSQL syntax and semantics.

###### 10.1.3.2 Permitted SMR Source and Target Configurations
| Source \ Target | Oracle | PostgreSQL | Microsoft SQL Server | Advanced Server (Oracle compatible) | Advanced Server (PostgreSQL compatible) |
|-----------------|--------|------------|----------------------|-------------------------------------|-----------------------------------------|
| Oracle          | No     | No         | Yes                  | Yes                                 | Yes                                     |
| Microsoft SQL Server | No | No | Yes | Yes | Yes |
| PostgreSQL      | No     | Yes        | Yes                  | Yes                                 | Yes                                     |
| Advanced Server (Oracle compatible) | Yes | Yes | No | Yes | No |
| Advanced Server (PostgreSQL compatible) | No | Yes | Yes | Yes | Yes |

###### 10.1.3.3 Permitted MMR Database Server Configurations
- **PostgreSQL compatible cluster**: All master nodes must consist of PostgreSQL database servers or Advanced Servers installed in PostgreSQL compatible configuration mode.
- **Advanced Server Oracle compatible cluster**: All master nodes must consist of Advanced Servers installed in Oracle compatible configuration mode.

#### 10.2 Upgrading to xDB Replication Server 6.2
- **Direct Upgrade**: Supported from versions 6.1.x or 6.0.x.
- **Upgrade from 5.1.x**: First upgrade to 6.0, then to 6.2.

For more information on upgrading from 5.1.x to 6.0, refer to the EDB Replication Server 6.0 User’s Guide:
- [EDB Replication Server 6.0 User’s Guide](https://www.enterprisedb.com/resources/product-documentation)

The upgrade process from xDB Replication Server 6.1 to 6.2 involves similar steps but with different version numbers in the file and directory names.