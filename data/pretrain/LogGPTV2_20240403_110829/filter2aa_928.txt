HACKSTUFF @ OSCAR
WEB前端攻击与防御
前言
★
不讲FLASH
★
不讲Moblie
★
WEB基础
大纲
★
攻击原理介绍
★
衍生攻击
★
防御方式
★
实际案例
我是谁
★
奥斯卡
★
PHP后端工程师
★
hackstuff member
★
PI:EMAIL
前端
什么是前端
★ 前端就是软体中与用户交互的部分
★ 这里软体指的是浏览器
HTML + CSS + JS
前端攻击
★ 利用软体中与用户交互的弱点
进行非法操作
什么是前端攻击
攻击点
★浏览器
★网站
★使用者
WEB前端攻击主要类型
★XSS
★CSRF
★操作挟持
XSS
OWASP OPEN WEB APPLICATION SECURITY PROJECT TOP 10
A1 Injection
A2 Broken Authentication and Session Management (was formerly 
2010-A3)
A3 Cross-Site Scripting (XSS) (was formerly 2010-A2)
A4 Insecure Direct Object References
A5 Security Misconfiguration (was formerly 2010-A6)
A6 Sensitive Data Exposure (2010-A7 Insecure Cryptographic 
Storage and 2010-A9 Insufficient Transport Layer Protection were 
merged to form 2013-A6)
A7 Missing Function Level Access Control (renamed/broadened from 
2010-A8 Failure to Restrict URL Access)
A8 Cross-Site Request Forgery (CSRF) (was formerly 2010-A5)
A9 Using Components with Known Vulnerabilities (new but was part 
of 2010-A6 – Security Misconfiguration)
A10 Unvalidated Redirects and Forwards
GOOGLE VULNERABILITY REWARD
什么是XSS
不就 ALERT(‘XSS’)
什么是XSS
★跨网站指令码（Cross-site scripting，
通常简称为XSS或跨站指令码或跨站指令码攻
击）
★避免跟CSS搞混，所以简称XSS
★XSS攻击是攻击者注入恶意代码到网页，用户
载入并执行恶意代码后的过程
XSS怎么发生
/x.php?a=abc&b=123
hello, abc123
/x.php?a=
什么是CSRF
★ 跨站请求伪造（英语：Cross-site request 
forgery），也被称为 one-click attack 
或者 session riding，通常缩写为 CSRF 
或者 XSRF
★ 是一种挟制用户在当前已登录的Web应用程式上
执行非本意的操作的攻击方法
★ XSS 利用的是用户对指定网站的信任，CSRF 利
用的是网站对用户网页浏览器的信任
CSRF怎么发生
CSRF怎么防御
★HTTP ONLY (Apache httpOnly 
Cookie Disclosure)
★TOKEN
★Referer
什么是操作挟持
★ 对某些操作进行狭持，让使用者产生非预期结果
★ClickJacking
★Drag & Drop ClickJacking
★TabJacking
★RFD (Reflected File 
Download Attack)
★XPS
★…等
CLICKJACKING
DROPJACKING
TABJACKING
★ https://www.youtube.com/watch?v=4fY8GIi2sl4
JS + CSS
RFD (REFLECTED FILE DOWNLOAD ATTACK)
★利用server返回未知content-type
使browser产生下载
★ http://drops.wooyun.org/papers/3771
XPS (COPY PASTE)
★copy & pest
★cross application XSS
★ http://www.slideshare.net/x00mario/copypest
前端攻击
 PHISHING
★рhp.net
★php.net
KEY LOGGER
 XSS BLIND
★ WebRTC => get lan IP
★ port scan
★ 
★ CSS => fake login
★ http://www.wooyun.org/bugs/wooyun-2014-076685
XSSI
如何防御XSSI
★X-Content-Type-Options: 
nosniff
CHROME EXIF VIEWER 2.4.2 CROSS SITE SCRIPTING
★ exiftool -artist==""
MICROSOFT INTERNET EXPLORER 6-10 MOUSE TRACKING
记住密码
记住密码是省去登陆需要输入密码的麻烦
提升用户体验
在这之前是通过本地cookie实现
也许并不是所有网站都采用持久化cookie
浏览器开始使用这样的方式
同 Domain 同 Port
表单 
栏位 
setTimeout 时间竞争
DEMO
如何防御 密码窃取攻击
★网站：使用独立DOMAIN
★用户：不要记住密码
该怎么防御XSS
你该知道
XSS类型
★反射 Reflected XSS
★储存 Stored XSS
★DOM XSS
XSS衍生类型
★ mXSS (mutation Cross-site Scripting)
★ UXSS (Universal Cross-site Scripting)
★ Blind XSS
★ XSSI (Cross Site Script Inclusion)
★ …等
你该知道
编码类型
★HTML编码
★JavaScript编码
★URL编码
★字元编码 (8,10,16)进位, ASCII, 
Unicode
★…等
你该知道
浏览器解析
无法辨识标签 
SVG 
IE {text-size:"expression(alert('1'))";}
…等
浏览器解析 - SAFARI
浏览器解析 - SAFARI
你该知道
HTML5隐患
新的标签和属性
TAG
★         
EVENT
★ onload onunload onchange onsubmit onreset onselect 
onblur onfocus onabort onkeydown onkeypress onkeyup 
onclick ondbclick onmouseover onmousemove onmouseout 
onmouseup onforminput onformchange ondrag ondrop
WEBRTC
★WebRTC，名称源自网页即时通讯（英语：Web 
Real-Time Communication）的缩写，是一个
支援网页浏览器进行即时语音对话或视讯对话的
API。它于2011年6月1日开源并在Google、
Mozilla、Opera支援下被纳入全球资讯网协会的
W3C推荐标准。
★
https://dl.dropboxusercontent.com/u/1878671/enumhosts.html
CANVAS FINGERPRINTING
★Secure Web Fingerprint Transmission
★原理是利用不同机器对字型 render 不一样的原
理再对产生出来的图片 hash 后当作 cookie 
替代品。
★
https://blog.gslin.org/archives/2014/08/05/4927/%E7%94%A8-canvas-
fingerprint-%E5%8F%96%E4%BB%A3%E9%83%A8%E4%BB%BD-cookie/
你该知道
ES6
★alert`1`
★eval.call`${‘alert\x281)’}`
★[].every.call`alert\x281)$
{eval}`
★…等
该怎么防御XSS
★浏览器
★网站
★使用者
三个方向
★XSS FILTER
★support CSP
浏览器
★CSP (Content-Security-Policy)
★X-Frame-Options
★Hook JS Function
★PhantomJs
★WAF
网站
★ Content-Security-Policy
★ Content-Security-Policy-Report-Only
★ X-Content-Security-Policy
★ X-Content-Security-Policy-Report-Only
★ X-WebKit-CSP
★ X-WebKit-CSP-Report-Only
CSP (CONTENT-SECURITY-POLICY)
★
devco.re/blog/2014/04/08/security-issues-of-http-headers-2-content-security-
policy/
★NoScript
使用者
实际案例
实际案例-1
实际案例-2
实际案例-3
如何防御
★ content-type = application/
json;charset=utf-8
最后
BYPASS CSP
★ https://html5sec.org/cspbypass/
★ http://zone.wooyun.org/content/10596
BYPASS NOSCRIPT
★Using Google Cloud to Bypass 
NoScript
★http://labs.detectify.com/post/
122837757551/using-google-cloud-
to-bypass-noscript
BYPASS XSSFILTER
★/?a=
BYPASS XSSFILTER
★/?a=/alert(1)
未来
Q&A