以下是经过优化的文本，使其更加清晰、连贯和专业：

---

### 轻量级页面堆用于 FixedMalloc

#### 1. 将 FixedMalloc 中的所有堆分配器替换为 ProcessHeap 中的 HeapAlloc
- **目标**：更改 FixedMalloc 中所有堆分配器以使用 `HeapAlloc`。
- **步骤**：
  - 启用 Windows 进程堆上的页面堆。

#### 2. FixedMalloc/FixedAlloc 中的堆分配器
- **文件位置**：`Avmplus/MMgc/AllocationMacros.h`
- **描述**：这些宏用于在 MMgc 的固定分配器中分配/释放内存。当 MMgc 因不可恢复的内存不足情况而中止时，使用这些宏分配的内存将被释放。

```cpp
#define mmfx_new(new_data) new (MMgc::kUseFixedMalloc) new_data
#define mmfx_new0(new_data) new (MMgc::kUseFixedMalloc, MMgc::kZero) new_data
#define mmfx_new_array(type, n) ::MMgcConstructTaggedArray((type*)NULL, n, MMgc::kNone)
#define mmfx_new_opt(new_data, opts) new (MMgc::kUseFixedMalloc, opts) new_data
#define mmfx_new_array_opt(type, n, opts) ::MMgcConstructTaggedArray((type*)NULL, n, opts)
#define mmfx_delete(p) ::MMgcDestructTaggedScalarChecked(p)
#define mmfx_delete_array(p) ::MMgcDestructTaggedArrayChecked(p)
#define mmfx_alloc(_siz) MMgc::AllocCall(_siz)
#define mmfx_alloc_opt(_siz, opts) MMgc::AllocCall(_siz, opts)
#define mmfx_free(_ptr) MMgc::DeleteCall(_ptr)
```

#### 3. 示例：`mmfx_new_array_opt` 的调用流程
- **调用顺序**：
  1. `mmfx_new_array_opt(type, n, opts)`
  2. `MMgcConstructTaggedArray`
  3. `MMgc::NewTaggedArray`
  4. `MMgc::TaggedAlloc`
  5. `MMgc::AllocCallInline`
  6. `MMgc::FixedMalloc::OutOfLineAlloc`
  7. `FixedMalloc::Alloc()`

```cpp
REALLY_INLINE void* FixedMalloc::Alloc(size_t size, FixedMallocOpts flags) {
    if (size < LARGE_ALLOC_THRESHOLD) {
        return Alloc(size, flags);
    } else {
        return LargeAlloc(size, flags);
    }
}

REALLY_INLINE FixedAllocSafe* FixedMalloc::FindAllocatorForSize(size_t size) {
    unsigned const index = (size > MAX_SMALL_ALLOC_SIZE) ? NUM_SMALL_ALLOCS : (size >> FIXED_MALLOC_SHIFT) + 1;
    GCAssert(size <= m_allocs[index-1].GetItemSize());
    return &m_allocs[index];
}
```

#### 4. 检测利用
- **目标**：检测并防止利用向量长度进行攻击。
- **方法**：
  1. **检查 Flash 模块中的向量操作**：在向量长度读写操作时检查向量长度。
  2. **监控 JIT 函数参数**：在 JIT 代码中向量长度读写操作时监控参数。
  3. **全局监控**：在解析 DoABC2 标签时监控所有向量长度。

#### 5. 利用过程
- **步骤**：
  1. 堆喷射和风水布局。
  2. 触发漏洞并破坏向量长度。
  3. 找到这个“坏”向量并用它进行任意读写，构建 ROP 并覆盖虚表。
  4. 触发受控的 EIP。
  5. 恢复并清理。

#### 6. 钩子设置
- **非 JIT 编译的长度/写/读**：
  - **示例**：`vector.length`
  - **钩子点**：`Vector::get_length`

- **JIT 编译的长度/写/读**：
  - **示例**：`vector.length`
  - **汇编代码**：
    ```assembly
    03d6042c mov edx, dword ptr [ebp-90h] ; edx 是 arg3 的地址
    03d60432 mov eax, dword ptr [ebp-94h] ; eax 是 VectorObject 的地址
    03d60438 and eax, 0FFFFFFF8h ; atom 类型地址
    03d6043b mov dword ptr [ebp-94h], eax
    03d60441 je +0x3d60671 (03d60672)
    03d60447 mov ecx, dword ptr [eax+18h] ; [eax+0x18] 是 VectorBuffer
    03d6044a mov eax, dword ptr [ecx] ; ecx 是 VectorBuffer，[ecx] 是向量长度
    03d6044c mov dword ptr [ebp-98h], eax
    03d60452 lea esp, [esp]
    03d60455 mov ecx, dword ptr +0xa7 (000000a8)[edx] ds:0023:03d44158=00000072 ; +0x1d3 (000001d4)[eax] <- 这里
    03d60351 mov dword ptr [ebp-94h], esi
    03d60370 mov eax, dword ptr [ebp-94h]
    03d60376 test eax, eax
    03d6037e lea eax, [eax+1]
    03d60387 push eax <- 从 arg3
    03d60399 mov dword ptr [ebp-98h], eax <- eax 是 VectorObject 的地址
    03d603f7 mov eax, dword ptr [ebp-98h]
    03d6040d mov dword ptr [ebp-94h], eax
    03d6042c mov edx, dword ptr [ebp-90h]
    03d60432 mov eax, dword ptr [ebp-94h] <- eax 是 VectorObject 的地址
    ```

通过以上步骤和方法，可以有效地检测和防止利用向量长度进行的攻击。

---