The ﬁrst ﬁve can be used to load any of the registers we wish to
use as long as we load register eax after registers ebp and esi. The
sixth allows for a simple jump by changing the stack pointer, see
below. Instruction popad pops all seven general purpose registers
off of the stack (it does not pop register esp, but it require 4 bytes
that are ignored for a total of 32 bytes popped off of the stack).
Without a pop %edx; jmp ∗x instruction in the target binary or its
libraries, popad is the only way to load register edx. This is only
an issue for our function call gadget described below.
The gadgets need to be able to move data between memory and
registers as well as between multiple registers. Moving a word from
memory into a register is accomplished by means of a mov n(x), y
instruction where n is some immediate offset. The analogous in-
struction mov x, n(y) allows for the reverse operation. Movement
between registers is less straight-forward because while such an
x86 instruction exists, we ﬁnd none in sequences ending in jmp ∗x.
Instead, the contents of two registers can be exchanged with the
xchg instruction, or by arranging for the destination register to be
0x00000000 or 0xffffffff, the source register can be ored
or anded with the destination, effecting the move.
One difﬁculty we will frequently encounter is the need to use a
register for holding data in one instruction sequence and for being
the x in the jmp ∗x in another sequence within a single gadget.
Handling this requires careful structuring of the gadget to ensure
that the register has been loaded with the address of the pointer to
the pop x; jmp ∗x sequence before it is needed.
By now, the gadget-construction procedure is well-described in
the literature [41, 3, 15, 20, 19, 26]. As such, we only brieﬂy de-
scribe each of our standard gadgets and focus more on the gadgets
that require extra ﬁnesse.
Data Movement.
The ﬁrst thing we wish to do is to load immediate values into
memory at a ﬁxed address. This is easily accomplished by loading
esi with the immediate value and eax with the ﬁxed address plus
0xb. This takes two pops. Then we use mov %esi, -0xb(%eax)
to write the immediate value to memory.
Since we want a collection of memory-memory gadgets, we need
to load a word from one (constant) location in memory and store it
into another (constant) location in memory. This is accomplished
by loading the source address into eax, loading the destination ad-
dress into ebp, loading from eax into edi, and ﬁnally storing edi
into memory at the address in ebp. This is the move gadget.
A simple modiﬁcation to the move gadget yields the load gad-
get. Rather than storing the word in memory at the source address
into the destination address, that word is used as a pointer to an-
other word in memory which is loaded into another register and
then stored at the destination address. In pseudo code, the opera-
tion is the following.
Arithmetic Operations.
The add, add immediate, and subtract gadgets are straight for-
ward. They work by loading the source operands into registers,
performing the appropriate operation, and then storing the result
back to memory. The x86 ISA allows one of the operands to be a
location in memory which would obviate the need to load one of
the operands. This could potentially simplify the gadgets.
The negate gadget loads the word from the source address, takes
the two’s complement of the word, and stores it back to mem-
ory. The neg instruction, which performs the two’s complement
of a register does not appear near a jmp ∗x instruction; we in-
stead load esi with zero using xor %esi, %esi, then use the se-
quence subl -0x7D(%ebp,%ecx), %esi; jmp ∗(%ecx) to subtract
the value from zero. The subl instruction performs the operation
esi ← esi− (ebp + ecx− 0x7D).8 Since our jmp ∗x uses ecx, we
have to load it with the address of a pointer to the pop x; jmp ∗x se-
quence. This means that ebp must have the value of the source ad-
dress plus 0x7D minus the address of the pointer to pop x; jmp ∗x.
Logical Operations.
The and, and immediate, or, and or immediate gadgets are con-
structed in an analogous manner to the add gadget. Namely, the
operands are loaded into registers, the operation is performed, and
the result is stored back to memory. The only tricky part is the
movement of data between registers as described above.
The xor and xor immediate gadgets are similar, but instead of
xoring the value of two registers and then storing the results back
to memory, they write the ﬁrst source word to the destination and
then xor that location with the second source word.
The complement gadget computes the one’s complement of the
source value and stores it into the destination address. Similar to
the situation with the negate gadget, there is an x86 instruction not
which performs the one’s complement, but it does not appear in the
useful instructions sequences in libc. Instead, we proceed exactly
as for the negate gadget except instead of loading esi with zero, we
load it with 0xffffffff =−1. This works because −1−x =¬x.
Branching.
In a normal program, a branch can either be to an absolute ad-
dress or to an address relative to the current instruction. In return-
oriented programming, a branch is performed by changing the stack
pointer rather than the instruction pointer. An absolute branch can
be effected by popping a value off the stack into esp. Alternatively,
a negative offset from the end of the gadget can be popped into edi
which is then subtracted from the stack pointer using the sequence
sub %edi, %esp; ljmp ∗(%eax) This allows stack-pointer-relative
branching. This is the basis for our branch unconditional gadget.
8The parentheses denote dereference, not grouping.
563In order to have Turing-complete behavior, we must have a way
to perform a conditional branch. The x86 has a number of condi-
tional branch operations; however, these are unsuitable for our pur-
pose since they affect the instruction pointer rather than the stack
pointer. Instead, we need a way to change the stack pointer con-
ditioned on the word stored in memory at a known address.
If
the word is zero, then we do not change the stack pointer. If the
word is 0xffffffff, then we subtract an offset from the stack
pointer as in the unconditional case. The way we do this is by
loading the word into a register and anding with the offset. The
result is subtracted from the stack pointer. The implementation is
a straight-forward combination of the and gadget and the branch
unconditional gadget and is our branch conditional gadget.
In any gadget set, the most difﬁcult gadget to construct is the
one that compares two values and performs an operation based on
the relative magnitude of the values. Taking a cue from the MIPS
architecture, we implement a set less than gadget that sets the word
at the destination address equal to 0xffffffff if the ﬁrst source
word is less than the second source word.
The implementation of the set less than gadget is given in Fig-
ure 2. The string compare instruction cmpsl compares the two
words pointed to by %ds:%esi and %es:%edi and sets the carry
ﬂag if the latter is greater than the former. As a side effect, it in-
crements or decrements registers esi and edi based on the direction
ﬂag; however, this is of no concern since we are only comparing a
single word. The sbb instruction subtracts esi plus the value of the
carry ﬂag from esi. In essence, if the ﬁrst source value is less than
the second source value, then the carry ﬂag will be set and esi is set
to 0xffffffff, otherwise, the carry ﬂag will not be set and so
esi will be set to zero, exactly as required for the branch conditional
gadget. The one thing we have to be careful of is register cl cannot
be zero otherwise a divide by zero exception will occur.
With the set less than and logical gadgets, a conditional branch
based on comparing any two values for any of the six relations
 can be formed. At this point our set of
gadgets is Turing-complete.
Function Calls.
Now that we have a Turing-complete set of gadgets, we extend
their functionality by adding a gadget to perform function calls.
This gives us two new abilities: we can call normal return-oriented
instruction sequences — i.e., those ending in return — or we can
call legitimate functions. Since we use an actual call instruction,
any return-oriented programming defense relying on the LIFO na-
ture of the call stack will be thwarted since this invariant is main-
tained. Any defense relying on the frequency of return instructions
will be thwarted as long as the number of other instructions exe-
cuted between these calls is sufﬁciently high.
Since calling legitimate functions is the more complicated of the
two operations, we focus on it here. Calling a sequence ending in
return is roughly the same except for moving the stack pointer and
handling the return value.
Before a function call is made, the stack pointer must be moved
to a new location to keep from overwriting our previous gadgets on
the stack. If n is the address where the stack pointer should be when
the function begins to execute — i.e., the location where the return
address will be stored — then the k arguments should be stored at
addresses n + 4, n + 8, . . . , n + 4k. This can be done using the load
immediate or move gadgets. The function call gadget is then used
to perform the computation A ← fun(arg1,arg2, . . . ,argk) with the
stack pointer set to n.
Since the Linux application binary interface (ABI) for x86 spec-
iﬁes that registers eax, ecx, and edx are caller-saved, we must take
care that return-oriented code is not confused if a called function
overwrites these registers. One particularly tricky point is that since
edx is caller-saved, once we return from the call we need to restore
it to the address of the pointer to the pop x; jmp ∗x. We cannot
do this using only the instruction sequences in libc if we care about
the return value which is in eax. Continuing our BYOPJ paradigm,
if the target program has either a pop %edx; jmp ∗(%edx) or a
pop %edx; jmp ∗(%esi), then we can restore edx without overwrit-
ing the return value in eax. Mozilla’s libxul has such a sequence.
Without such a sequence, the function call gadget has to be tailored
for each application rather than being generic.
The implementation of the function call gadget is given in Fig-
ure 3. Some parts of the implementation are rather subtle. The ﬁrst
thing it does is to load registers esi, ebp, and eax. Register esi is
loaded with the address of the sequence catalog entry for the call-
jump sequence, ebp is loaded with the actual address of the leave-
jump sequence, and eax is loaded with the literal value n (plus the
offset for our store sequence). Next, the address of the sequence
catalog entry for the call-jump is stored at address n. Register esi is
then loaded with 0x38 and the value of the stack pointer is added
to it. At this point, esi holds the address we will set the stack pointer
to after the the function call returns.
Now that we know the location on the stack we wish to return to
after our function call, we need to move it into ebp. The easiest way
to do this is to store it to memory (where we will eventually store
the function’s return value), load it back from memory into edi, then
exchange it with ebp. After the exchange, edi holds the address of
the leave-jump sequence and ebp holds the value we will set the
stack pointer to after the function call. Next, we load esi with the
address of the sequence catalog entry for pop x; jmp ∗x; load ecx
with the address where the pointer to the function is stored (plus an
offset); and load eax with the value n. Registers esp and eax are
exchanged causing the stack pointer to be set to n.
Recall that the ﬁrst thing the function call gadget did was to store
the address of the catalog entry for the call-jump sequence to n.
At this point, the indirect call of the function fun happens. After
fun returns, we cannot rely on the values in registers ecx or edx
while eax holds the return value. However, edi holds the address
of the leave-jump sequence, thus the jmp ∗%edi instruction causes
a leave instruction to be executed which sets the stack pointer to
ebp — which is still holding the address we placed into it with the
ﬁrst xchg instruction — and then pops the value off of the top of the
stack into ebp. This causes the address of the sequence catalog en-
try for pop x; jmp ∗x (plus an offset) to be loaded into ebp causing
the subsequent jmp ∗-0x7d(%ebp) instruction to chain the next
instruction sequence.
In the ab-
sence of a pop %edx; jmp ∗(%edx) sequence, we use a popad;
jmp ∗(%edx), losing the return value. In this case, the function call
gadget is complete. If we do have a pop %edx; jmp ∗(%edx) se-
quence, we execute that, and then store the return value in eax into
memory. The latter form of the gadget is shown in Figure 3.
We now have two choices for the implementation.
4.
INSTANTIATION ON ARM
In this section we introduce our attack method and gadget set for
ARM. We also provide some background information on ARM’s
RISC architecture.
4.1 ARM/THUMB Instruction Set
ARM is a 32-bit processor and features 16 general-purpose reg-
isters r0 to r15 as depicted in Table 1. All these registers can be
accessed/changed directly. In contrast to the Intel x86 architecture,
even the program counter pc can be accessed directly. Additionally,
564Figure 2: Set less than gadget. If the word at address B is less than the word at address C, set the word at address A to 0xffffffff;
otherwise set it to 0x00000000. The gadget begins executing with the stack pointer (esp) pointing to the bottom-most (smallest
address) cell of the gadget. As execution proceeds, the stack pointer moves to higher cells (higher addresses). Each cell is either a
pointer to an entry in the sequence catalog — which is itself a pointer to the instruction sequence that is actually executed — or data.
After the ﬁnal instruction sequence in the gadget has executed, the stack pointer points to the next gadget to be executed.
Figure 3: Function call gadget. This convoluted gadget makes the function call result ←←← f(((arg1,,,arg2,,,. . . ,,,argk))) where the arguments
have already been placed at n +++ 4,,,n +++ 8,,,. . . ,,,n +++ 4k. The return value is stored into memory at address result.
ARM processors feature a current program status register (cpsr),
which holds the current state of the system. It contains condition
ﬂags, interrupt enable ﬂags, and the current mode.
Although ARM has a 32-bit RISC architecture, it also provides
a 16-bit instruction set, called THUMB. The THUMB instruction
set is a subset of the ARM instruction set and is in particular suit-
A0x55555555BCpop %esi; or $0xf3, %al; jmp *(%edx)pop %eax; sub %dh, %bl; jmp *(%edx)mov %esi, -0xB(%eax); jmp *(%edx)pop %ecx; cmp %dh, %dh; jmp *(%edx)pop %edi; cmp %bl, %dh; jmp *(%edx)sbb %esi, %esi; sub %dh, %bl; jmp *(%edx)SequenceCatalogSet Less ThanGadgetespcmpsl %es:(%edi), %ds:(%esi);div %cl; ljmp *(%edx)0xb + result0x7d +n0x56000A00+f0xd + result0xb + result0x380xb + nleavesar %cl, %bljmp *-0x7d(%ebp)pop %esi; or $0xf3, %al; jmp *(%edx)pop %ebp; or $0xf3, %al; jmp *(%edx)call *-0x56000A00(%ecx); add %bh, %bl;inc %ebx; add %bh, %dh; jmp *%edipop %eax; sub %dh, %bl; jmp *(%edx)mov %esi, -0xB(%eax); jmp *(%edx)add %esp, %esi; jmp *(%edx)mov -0xD(%eax), %edi; jmp *(%edx)xchg %ebp, %edi; jmp *(%edx)pop %ecx; cmp %dh, %dh; jmp *(%edx)xchg %esp, %eax; dec %ebx;std; jmp *0(%esi)pop %edx; jmp *(%edx)pop %ebx; jmp *(%ebx)xchg %esi, %eax; and %dh, %dh;jmp *(%edx)SequenceCatalogFunction CallGadgetesp565Table 1: ARM Registers
Register Purpose
r0–r3
r4–r11
r12
r13 (sp)
r14 (lr)
r15 (pc)
cpsr
Function arguments; function results
Register variables (callee saved)
Scratch register
Stack Pointer
Link Register (subroutine return address)
Program Counter
Control Program Status Register
able for embedded systems which often suffer from greater mem-
ory restrictions as PCs. In particular, the libraries libc and libweb-