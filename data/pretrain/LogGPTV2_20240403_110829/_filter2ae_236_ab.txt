###  4）密码管理器更新
自从进行研究以来，几个密码管理器进行了一些较小的更改：（1）KeePassXC已过渡到使用Argon2D作为其默认密钥派生功能，（2）LastPass更新了其密码生成界面，删除了选择，（3）RoboForm更新了他们的密码生成界面，删除了选择数字位数的选项，并将默认密码长度增加到16。本研究也意识到了即将出现的一些重要变化：Firefox将过渡到使用Firefox
Lockbox作为其默认密码管理器，andEdge将过渡到在Chromium项目之上构建。
## 0x04 Password Generation
密码生成是密码管理器生命周期中的第一步。在评估的13个密码管理器中，有七个完全支持密码生成（KeePassX，KeePassXC，1Password
X，Bitwarden，Dashlane，LastPass和Roboform），另外两个则部分支持Chrome和Safari。为了提供比较密码管理器的基准们编写了一个python脚本，该脚本使用/dev/random和在线SecurePassword
Generator（SPG）生成密码，这是在Google上搜索“密码生成器”时的第一个搜索结果。
###  1）设置和功能
上表总结了每个测试工具的配置选项，默认设置和功能。尽管可以在KeePassX，KeePassXC和LastPass中将其关闭，但所有密码管理器都支持确保每个选定字符集中至少包含一个字符。除基于浏览器的密码管理器外，所有密码管理器还具有避免生成包含用户难以阅读和/或记忆的字符（例如，难以发音，看起来与另一个字符相似）的密码的选项。删除的字符在密码管理器之间不一致。
虽然所有密码管理器都支持相同的字母和数字集（[A-Za-z0-9]），但是它们各自具有不同的符号集。KeePassXC具有最大的符号集，支持所有标准ASCII符号（空格除外）并支持扩展的ASCII符号集。
KeePassX和Dashlane还支持标准ASCII符号（空格除外），但不支持扩展的ASCII符号集。
1Password支持刚好超过一半的ASCII符号（19个符号），而其他系统则支持8个或更少的符号。不出所料，限制符号集对生成密码的强度有很大影响，本文稍后将讨论其含义。
在大多数密码管理器中，常见的一个问题是它们将上次使用的设置保存为新的默认设置。虽然这似乎是针对可用性的功能，但它可能会导致用户在生成密码时使用的设置少于最佳设置。通常，用户更改密码生成设置有两个原因：（1）建立安全的默认设置，（2）生成符合弱于默认设置的策略的密码。
在后一种情况下，较新的，较弱的设置将替换较旧的，较强的设置作为新的默认设置。尽管用户可以手动恢复其更安全的设置，但不能保证他们会这样做。
Dashlane采取了一种最佳方法，即不自动保存最新设置，而是为用户提供覆盖当前默认设置的选项。
KeePassX采用了一种中间方法，将新设置保存为以后生成的密码，直到应用程序关闭并再次打开。
###  2）密码收集与分析
为了评估由密码管理器生成的密码的质量，首先从每个密码管理器收集了大量生成的密码。使用多种方法来生成密码：现有的命令行界面（Bitwarden，本文的python工具），修改源代码以添加命令行界面（Chrome，KeePassX，KeyyPassXC）或使用Selenium（1Password
X，Dashlane，LastPass）
，RoboForm）。无法分析Safari的密码，因为它没有任何脚本来生成密码脚本，尽管确实手动生成并分析了100个密码以检查是否有明显的问题并且没有检测到任何问题。
生成由字符类（字母（l），字母和数字（ld），字母和符号（ls），符号和数字（sd））以及所有四个类（全部）和密码长度（8、12，和20个字符长-为了确定这些选项是否对生成的密码的随机性有影响。默认情况下，大多数工具都要求生成的密码在每个字符集中都包含一个字符，只有Chrome，KeePassX，KeePassXC和本研究的python工具未启用此选项。对于每个密码管理器，字符类和密码长度，生成了100万个密码，但1Password
X除外，后者不允许生成仅包含符号和数字的密码。这产生了1.47亿个密码的语料库（10×5×3—3）。
收集此数据集后，分析了其随机性和可猜测性的质量项。没有已知的方法可以证明伪随机生成器与随机生成是无法区分的，因此采用了多种分析技术，每种技术都试图找到非随机行为的证据：Shannon熵，χ2随机性检验，zxcbvn密码分析工具，以及基于递归神经网络的密码猜测器。
Shannon熵用于检查每个产生的字符（不是密码）的频率是否异常。集合的Shannon熵是对根据符号出现频率对一串符号进行编码所需的平均最小位数的度量。计算为∑i
pi
logb（pi）。虽然Shannon熵是衡量用户选择密码的一种不好方法，但它对于评估随机密码的相对强度很有用。Shannon熵不受密码长度的影响，仅受密码中可以出现的不同字符数的影响。字符串及其在语料库中的相对频率。
随机性的χ2检验是一种简单的统计检验，用于确定两个分布之间的差异是否可以通过随机机会来解释。使用χ2检验来独立评估每个密码集，并使用Bonferonni
correction修正了p值，以说明同一家族的多项统计检验。
zxcbvn工具用于检测可能存在于密码中的字典单词和简单模式，这两种都是非随机性的潜在示例。
zxcbvn还估计了密码破解者破解密码所需的猜测次数，使用它来了解密码是否可以抵抗在线和离线猜测。
为了检测生成的密码是否比zxcvbn可以检测到的密码更微妙，使用了构建的神经网络密码猜测器。该猜测器使用长短期记忆（LSTM）递归神经网络（RNN）架构，根据训练集构建密码猜测器。作为输出，它将产生经过蒙特卡洛估计的经过训练的密码猜测器猜测测试集中的密码所花费的时间。对于每个密码语料库，使用80％的密码来训练神经网络，并针对20％的密码进行了测试。由于猜测器的问题，只能测试长度为8和12的密码，因为无论使用什么设置，长度为20的密码都会因内存不足异常而崩溃。
尽管zxbcvn和递归神经网络都用于评估生成的密码中的随机性质量，但它们也可以用来估算在线或离线猜测攻击尝试使用该密码所需的猜测次数。需要超过10^6个猜测的密码被认为具有抵御在线攻击的能力，并且需要超过10^14个猜测的密码被认为具有抗离线猜测的能力。使用此猜测计数，能够分析密码管理器是否正在生成容易受到这些攻击的密码。
###  3）结果
密码强度：对生成的密码的分析发现，几乎所有长度为12及更长的密码都足够强大，可以抵御在线和离线猜测攻击（见上图c和上图d）。尽管如此，并不是所有的密码管理者都可以创建强度相同的密码，这些微小的扰动会对长度8的密码百分比产生重大影响，这些百分比可以安全地防止离线猜测攻击（几乎所有人都可以防止在线猜测攻击）（见上图a和上图b）。这些强度上的差异在很大程度上可以由每个密码管理器使用的字符集类的不同组成来解释。尽管在考虑符号时差异最为明显，但多个密码管理器还限制了可用的字母和数字（例如，由于相似性而删除了“
0”和“ O”）。查看字符频率，还发现Dashlane使用一组不同的字母，具体取决于密码的长度。目前尚不清楚Dashlane为何表现出这种行为。
随机性：χ2测试在生成的密码中发现了一些非随机行为的实例（上表）。除一个非随机字符频率分布外，所有特征都可以用一个功能来解释-要求密码每个字符集中至少有一个字符。如果未启用此功能，则任何给定字符将出现在密码中的可能性与密码的长度以及所有启用的字符集中的字符数成正比（参见公式1）。启用此功能后，概率也与该字符集中的字符数成正比（参见公式2），从而导致来自较小字符集（例如，数字，符号）的字符的字符频率更高，这说明了通过χ2检验检测均匀性。注意到，有可能对此偏斜进行调整并保持均匀分布，尽管不进行校正不会产生明显的安全影响。
尽管Bitwarden（sd）和Dashlane（l）的结果最初似乎并不遵循这种模式，但实际上它们确实遵循这种模式。
Bitwarden（sd）具有相等数量的符号和数字（见下表），使它们以相同的频率被选择。相反，Dashlane（l）具有非随机分布，因为它使用不同数量的大写和小写字母。
RoboForm（l）是唯一不能由此功能至少部分解释的非随机结果，它具有相等数量的大写和小写字符。查看RoboForm的所有字符频率，发现选择的大写字母（“
Z”除外）比小写字母更频繁。此外，字符“ Z”，“ z”，“
9”始终是最不常用的字符。虽然尚不清楚是什么原因导致了此问题，但假设这可能与使用模块化算术（例如rand（）％（maxxmin）+
min）选择字符有关，这可能会对较低值的结果产生轻微的偏差。
随机但较弱的密码：在对zxcbvn结果的分析中，发现偶尔所有密码管理器都会生成异常弱的密码，示例如下表所示。虽然这是真正随机生成器的预期行为，但仍然导致密码不佳。
即使随机生成的长度为8个字符的密码具有抵抗脱机攻击的潜力（例如log10（968/2）=
15.56），密码管理器仍会向用户提供此长度的密码，这些密码容易受到在线和离线攻击。在长度为12时，最弱的密码不再容易受到在线攻击，但仍然容易受到离线攻击。最终，最短的20位密码能够承受离线攻击。尽管这些弱密码的发生相对罕见（少于200个中的1个），但还是最好选择足够长的密码，以使随机的弱密码很可能能够抵抗在线和离线攻击。根据对这些结果的分析，长度为10可以抵抗在线攻击，长度18可以抵抗离线攻击。
## 0x05 Password Storage
密码存储是密码管理器生命周期的第二阶段。为了评估密码存储的安全性，手动检查了每个密码管理器创建的本地密码数据库，以查看哪些信息已加密和未加密，以及检查主密码的更改如何影响数据加密。结合了密码管理器维护人员的声明，客户端可用的选项以及密文格式，确定了如何进行加密。由于无法使用云数据库进行直接评估，因此专注于在本地系统上存储密码库。下表提供了此信息的概述。
###  1）密码库加密
基于应用程序和基于扩展的密码管理器均使用AES-256加密其数据库。这些系统都使用密钥派生功能（KDF）将主密码（MP）转换为可用于加密的加密密钥。
KeePassX和KeePassXC使用100,000轮的AES-KDF。除Dashlane之外，所有基于扩展的密码管理器都使用PBKDF2，只有RoboForm使用少于100,000轮。
Dashlane是唯一的密码管理器，它使用具有记忆力的KDF，Argon2D，进行了3个回合。虽然默认情况下未使用，但KeePassXC确实支持使用Argon2D代替PBKDF2的选项。