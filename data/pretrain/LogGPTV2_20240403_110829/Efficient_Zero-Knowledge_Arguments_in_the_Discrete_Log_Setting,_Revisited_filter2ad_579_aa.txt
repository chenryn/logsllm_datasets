title:Efficient Zero-Knowledge Arguments in the Discrete Log Setting, Revisited
author:Max Hoffmann and
Michael Klooß and
Andy Rupp
Efficient Zero-Knowledge Arguments in the Discrete Log
Setting, Revisited
Max Hoffmann
PI:EMAIL
Ruhr-University Bochum
Horst Görtz Institute for IT-Security
Bochum, Germany
Michael Klooß
PI:EMAIL
Karlsruhe Institute of Technology
Department of Informatics
Karlsruhe, Germany
Andy Rupp
PI:EMAIL
Karlsruhe Institute of Technology
Department of Informatics
Karlsruhe, Germany
ABSTRACT
Zero-knowledge arguments have become practical, and widely used,
especially in the world of Blockchain, for example in Zcash.
This work revisits zero-knowledge proofs in the discrete log-
arithm setting. First, we identify and carve out basic techniques
(partly being used implicitly before) to optimise proofs in this set-
ting. In particular, the linear combination of protocols is a useful tool
to obtain zero-knowledge and/or reduce communication. With these
techniques, we are able to devise zero-knowledge variants of the
logarithmic communication arguments by Bootle et al. (EUROCRYPT
’16) and Bünz et al. (S&P ’18) thereby introducing almost no over-
head. We then construct a conceptually simple commit-and-prove
argument for satisfiability of a set of quadratic equations. Unlike
previous work, we are not restricted to rank 1 constraint systems
(R1CS). This is, to the best of our knowledge, the first work demon-
strating that general quadratic constraints, not just R1CS, are a nat-
ural relation in the dlog (or ideal linear commitment) setting. This
enables new possibilities for optimisation, as, e.g., any degree n2
polynomial f (X ) can now be “evaluated” with at most 2n quadratic
constraints.
Our protocols are modular. We easily construct an efficient, log-
arithmic size shuffle proof, which can be used in electronic voting.
Additionally, we take a closer look at quantitative security mea-
sures, e.g. the efficiency of an extractor. We formalise short-circuit
extraction, which allows us to give tighter bounds on the efficiency
of an extractor.
CCS CONCEPTS
• Theory of computation → Communication complexity; In-
teractive proof systems; Cryptographic protocols.
KEYWORDS
zero-knowledge, argument system, quadratic equations, arithmetic
circuit satisfiability, discrete logarithm assumption,
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full cita-
tion on the first page. Copyrights for components of this work owned by others than
the author(s) must be honored. Abstracting with credit is permitted. To copy other-
wise, or republish, to post on servers or to redistribute to lists, requires prior specific
permission and/or a fee. Request permissions from permissions@acm.org.
CCS ’19, November 11–15, 2019, London, United Kingdom
© 2019 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-6747-9/19/11…$15.00
https://doi.org/10.1145/3319535.3354251
ACM Reference Format:
Max Hoffmann, Michael Klooß, and Andy Rupp. 2019. Efficient Zero-Knowledge
Arguments in the Discrete Log Setting, Revisited. In 2019 ACM SIGSAC
Conference on Computer and Communications Security (CCS ’19), November
11–15, 2019, London, United Kingdom. ACM, New York, NY, USA, 18 pages.
https://doi.org/10.1145/3319535.3354251
1 INTRODUCTION
Zero-knowledge arguments (of knowledge) (ZKAoK) allow a party
P, the prover, to convince another party V, the verifier, of the truth
of a statement (and knowledge of a witness) without revealing any
other information. For example, one may prove knowledge of a
valid signature on some message, without revealing the signature.
The ability to ensure correctness without compromising privacy
makes zero-knowledge arguments a powerful tool, which is ubiqui-
tous in theory and application of cryptography. Since the first prac-
tical construction of succinct non-interactive arguments of knowl-
edge (SNARK) [21], and their application to Blockchain and related
areas, research in theory and applications of efficient ZKAoKs has
progressed significantly, see the works [3, 7, 10, 14, 18, 21–23, 39] to
name a few. Arguably, zero-knowledge proofs have become practi-
cal for many applications. As efficiency improved and demand for
privacy increased, possible use cases and applications have grown
explosively.
In this paper, we revisit a line of works [10, 13, 25] in the dis-
crete logarithms setting. From an abstract point of view, in terms
of [29], one part of our work is in the world of ideal linear commit-
ments (ILC). That is, our verifier can do “matrix-vector queries” on
a committed value w, e.g. request an opening for a matrix-vector
product (cid:0)w. A priori, this is more powerful than other settings
like PCP or IOP, where the verifier’s queries are restricted to point
or inner-product queries [29]. Nonetheless, the ILC-arguments in
[10, 13, 25] only work for the language R1CS “natively”, which is
also covered by more restricted verifiers. We show that with ILC,
one can directly handle systems of quadratic equations, of which
R1CS is a special case. This broadens possible optimisation from
(already used [1]) R1CS-friendly to quadratics-friendly cryptogra-
phy. Yet, even for R1CS, our performance improves upon Bullet-
proofs [13].
Another part of this work treats proofs of knowledge of preim-
ages of group homomorphisms. For example, proving knowledge
of the decryption of an ElGamal ciphertext. This does not fit into
the ILC setting. Hence we do not use the ILC abstractions in this
work. Combining this with our proofs for quadratic equations is ef-
ficient. Thus one can generically construct primitives such as shuf-
fle proofs, which are important for electronic voting.
Session 9C: Zero-Knowledge ProofsCCS ’19, November 11–15, 2019, London, United Kingdom20931.1 Basic techniques
We identify and present basic design principles underlying most
efficient zero-knowledge arguments in the group setting.
In the following, we use implicit representation for group ele-
ments, see Section 2. Let us recall (a slight variant of) the stan-
dard (cid:6)-Protocol ((cid:6)std) for proving knowledge of a preimage w
for [A]w = [t] for [A] 2 Gm(cid:2)n. This proof covers a large class
of statements, including dlog relations, knowing the opening of a
commitment, etc. The protocol works as follows:
(cid:15) Prover: Pick r   Fn
(cid:15) Verifier: Pick and send x = (x1; x2)   F2
(cid:15) Prover: Send z B x1w + x2r.
(cid:15) Verifier: Accept iff [A]z = x1[t] + x2[a].
p , let [a] B [A]r, send [a].
p (with x2 , 0).
Intuitively, this is zero-knowledge since r completely masks w in
z = x1w + x2r (since x2 , 0), and finding r from [a] is hard. It is
extractable, since two linearly independent challenges x1; x2 with
answers z1; z2 (for fixed [a]) allow to reconstruct w; r. But Proto-
col (cid:6)std is not particularly communication-efficient, as it sends the
p as well as [a] 2 Gm. Using probabilistic
full masked witness z 2 Fn
verification, one can often improve this.
1.1.1 Probabilistic verification. The underpinning of efficient argu-
ments of knowledge (without zero-knowledge) is probabilistic ver-
ification of the claim. For instance, instead of verifying [A]w = [t]
directly, the verifier could send a random y   Fp. Both parties
[A] 2
compute y = (yi )i 2 Fm
[t] 2 G instead. This would result in a commu-
G1(cid:2)n and [bt] = y
nication complexity which is independent of m as [ba] = [bA]r 2 G.
p and verify [bA]w = [bt] for [bA] = y
Not all probabilistic verifications are alike. To work well with
zero-knowledge, we need “suitable” verification procedures, so that
techniques to attain zero-knowledge can be applied. This essen-
tially means that the verification should be linear, i.e. all tested
equations should be linear. (Abstract groups only allow linear op-
erations anyway.)
⊤
⊤
P
[a]
V
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)!
x1 (cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
x1w(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)!
P
(cid:8)
[a]
V
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)!
x2 (cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)!
x2r
P
V
[a]
x1; x2
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)!
 (cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)!
x1w + x2r
=
Figure 1: Linear Combination of Protocols. Left: The trivial
proof of knowledge: Send the witness. Middle: Send a ran-
dom statement. Then send the witness. Grayed out: Terms
for linear combination. Right: The linear combination with
verifier’s randomness.
1.1.2 Linear combinations of protocols. A core insight for achiev-
ing zero-knowledge (and reducing communication) in our setting
efficiently is that protocols can often be linearly combined, see
Fig. 1 for an illustration. This exploits the linearity of the computa-
tions and checks of verifier and prover in each round. By running
an “umasked non-zero-knowledge argument” (Fig. 1, left) and lin-
early combining it with an argument for a “masking randomness”
(middle), one can achieve zero-knowledge (right). All of our zero-
knowledge compilations rely on this strategy. We typically con-
sider random linear combinations of protocols, where the verifier
picks the randomness (x1; x2 in Fig. 1), as this often achieves ex-
tractability. In fact, this kind of linear combination recovers the
batch proofs of [38], see Appendix C. Non-randomised linear com-
binations are also used, e.g. Protocol B.1, or [13].
1.1.3 Uniform(-or-unique) responses. In our setting, for simulation
it is typically enough to ensure that the prover’s messages are
distributed uniformly at random. More concretely, the responses
should be either uniformly distributed (conditioned on all later
messages, not previous messages), such as z in Protocol (cid:6)std. Or
they should be uniquely determined and efficiently computable
from the challenges and all later messages, such as [a] in Proto-
col (cid:6)std. This allows to construct a trivial simulator, which con-
structs the transcript in reverse: Starting with the final messages,
and working its way towards the beginning, the simulator picks
the uniformly distributed messages itself, and computes the uniquely
determined ones. All simulators in this paper work like this.
1.1.4 Kernels and redundancy. Many interesting statements are
non-linear. For example, for polynomial commitments [12], we want
to show that [c] 2 Gm is a commitment to a polynomial f 2 Fp [X ]
(of degree at most d (cid:0) 1) and f (x) = t, where x 2 Fp is a random
challenge. Naively, one commits to the coefficients of the polyno-
mial with monomial basis X i for i = 0; : : : ; n(cid:0)1. Suppose we have
a (linear) protocol which proves f (x) = t. We could hope that
running a random linear combination as in Fig. 1 should give us
uniform-or-unique responses (and hence zero-knowledge). How-
ever, we are in a predicament: For random д 2 Fp [X ], we have
(f +д)(x) , f (x) and thus we have to let V know y = д(x) some-
how. To ensure the prover does not send arbitrary y, we have to
rely on a proof again! But if this proof leaks information we can-
not use it to randomise the response. We can escape by having a
way to randomise without changing the statement. In other words,
we need some д with д(x) = 0 for all x 2 Fp. Clearly, that means
д = 0, and there’s nothing random anymore! Another dead end.
One solution is to add redundancy, which does not “influence”
soundness: Here, we artificially create a non-trivial kernel of the
“evaluate at x”-map. We can do so by representing f (X ) as
i (αi +
βi )X i and commit to all αi and βi. Now we can mask with д(X )
where αi   Fp and βi = (cid:0)αi. Thus, we successfully injected
randomness into the response. Generally, adding just enough re-
dundancy to achieve uniformly random responses is our goal.
∑
1.1.5 Composition of arguments systems. By committing to and
then sharing intermediate results in multiple argument systems,
one can combine the most efficient arguments for each task.
Example 1.1. In our logarithmic communication zero-knowledge
inner product argument IPAalmZK for 9x; y : ⟨x; y⟩ = t, we ran-
domise as ⟨x + r ; y + s⟩ = t so that ⟨r ; y⟩ = ⟨r ; s⟩ = ⟨x; s⟩ = 0
with only logarithmically many (specially chosen) random compo-
nents in r ; s. This is an application of the “redundancy/kernel” tech-
nique. The “uniform-or-unique” guideline ensures that it is enough
that each response is random. Hence a logarithmic number of (well-
chosen) random components in r, s does suffice.
Session 9C: Zero-Knowledge ProofsCCS ’19, November 11–15, 2019, London, United Kingdom2094On the other hand, our logarithmic communication linear map
preimage argument LMPAZK for9w : [A]w = [t] uses a linear com-
bination of a non-zero-knowledge argument for [A], plus a similar
argument for a different [A] and [t] (of the same size). Finally, for
our logarithmic communication shuffle argument (cid:5)shuffle (Appen-
dix D), we compose QESAZK (our quadratic equation argument)
and LMPAZK by sharing a commitment to the witness.
1.2 Contribution
To the best of our knowledge, there is no work which presents
these techniques, in particular linear combination of protocols, as
unifying guidelines. Implicitly, these techniques are used in many
works [10, 12, 13, 25, 38]. We follow the above guidelines for con-
structing and explaining our zero-knowledge arguments.
See the full version [31] for protocol diagrams.
⊤
p from the left to obtain [bA] = y
1.2.1 Linear map preimage argument (LMPA). We give in two steps
an argument for 9w : [A]w = [t] for [A] 2 Gm(cid:2)n with commu-
nication O(log(n)). The idea is to first use batch verification. Es-
sentially, LMPAbatch multiplies the equation with a random vector
y 2 Fm
⊤
[t] 2 G. Thus, communication is independent of m. Now, we
y
[A] 2 G1(cid:2)n and [bt] =
prove 9w : [bA]w = [bt] using LMPAZK, which is derived from [10].
It is enhanced with zero-knowledge for overhead which is constant
w.r.t. communication and logarithmic w.r.t. computation (in n).
1.2.2 Quadratic equation commit-and-prove. First of all, we derive
a(n almost) zero-knowledge inner product argument IPAalmZK from
[10, 13], again with constant communication and logarithmic com-
∑
putational overhead compared to [10, 13]. From IPAalmZK we ob-
tain an argument for proving 9w : 8i : ⟨w; (cid:0)iw⟩ = 0, where (cid:0)i 2
Fn(cid:2)n
and w is committed to. For efficiency, we carry out a batch
p
proof, i.e. we prove ⟨w; (cid:0)w⟩ with (cid:0) B
i ri (cid:0)i for random ri 2 Fp.
The resulting argument, QESAZK, is “adaptive commit-and-prove”,
i.e. the statement (cid:0)i may be chosen after the commitment to w.
The commit-and-prove system QESAZK is conceptually simple
and can be efficiently combined with other arguments. We leave as
an open question whether its strategies can be adapted by linear
IOPs or whether they are unique to ILC.
∑
∑
∑
n = t (cid:0)∑
ai xi )(
bi xi ) +
∑
Sets of quadratic equations. Being able to prove arbitrary
1.2.3
quadratic equations instead of R1CS equations, i.e. equations of the
ci xi = 0, gives much flexibility. To the
form (
best of our knowledge, expressing the quadratic equation ⟨x; x⟩ =
i (i = 1; : : : ; n (cid:0) 1)
i = t as R1CS requires n equations: yi = x 2
x 2
i yi, where yi are additionally introduced variables.
and x 2
Requiring n equations is surprising for [10, 13] which build on an
inner product argument. Obviously, QESAZK needs one (quadratic)
equation to express ⟨x; x⟩ = t.
∑
Using general quadratic equations, one can evaluate any (uni-
d 2(cid:0)1
i=0 ai X i of degree d2 (cid:0) 1 with 2d
variate) polynomial f (X ) =
equations and intermediate variables. Concretely, let yi = xi =
yi(cid:0)1x, zi = xdi = z1zi(cid:0)1, for i = 2; : : : d (cid:0) 1 and z1 = yd(cid:0)1x and