### 第四部分 基础 Shell 编程

#### 22.2 删除记录
要从文件中删除记录，首先需要将记录展示给用户以确认是否是正确的记录。在获得用户的确认后，可以执行以下步骤：
1. 查询记录。
2. 显示记录。
3. 确认删除。
4. 修改文件。

使用姓氏字段查询记录。一旦从用户那里获取了所需的姓氏，就可以使用 `grep` 或 `awk` 进行处理。由于此文件的记录数不会超过100条，可以直接从文件中读取数据并进行匹配测试。如果文件包含数百条记录，则建议使用 `awk`，因为 `awk` 比直接从文件中读取数据更快，也比用 `grep` 将各个字段分离到变量中更高效。

使用 `awk` 或 `grep` 查询文件 `DBFILE` 时，请注意：在 `awk` 中，变量需要用单引号括起来，否则可能不会返回任何数据。将各字段分开，并设置对应的变量（记住这里使用冒号作为分隔符）。必须将 `IFS` 设置为冒号；如果不这样做，就无法正确读取记录。更改 `IFS` 设置时，最好先保存其原始值，以便脚本完成后恢复。

```bash
SAVEIFS=$IFS
IFS=:
# 在 IFS 完成操作后，恢复它
IFS=$SAVEIFS
```

#### 22.3 修改记录
实际上，在记录删除操作中已经编写了大部分修改记录的脚本。找到正确的记录后，将所有该记录的字段变量设置到一个临时工作文件中，然后使用默认设置变量：

```bash
default_variable=variable
```

对于不想修改的字段，只需按回车键即可，这样缺省值会被放入临时工作变量中。在相关字段内输入新值即可修改该字段。

使用 `grep -v` 执行文件的实际修改操作。除了正在被修改的记录外，所有记录都会重定向到一个临时工作文件中，其中雇员编号用作 `grep` 命令的字符串参数：

```bash
grep -v $CODE $DBFILE >$HOLD1
```

然后提示用户是否保存记录。如果保存，重新修改的记录也会写入临时工作文件，再将此临时工作文件移回原文件 `DBFILE` 中。

输出被重定向到一个临时工作文件，然后对该文件进行排序，最后将其移回原文件 `DBFILE`。使用 `last status` 命令来测试文件移动操作。如果存在问题，通知用户。实际脚本中，在增加记录时执行的有效性测试同样适用于修改记录。

#### 22.4 查看记录
用户可能希望查看所有记录或其中的一部分。如果查看所有记录，可以使用 `cat` 命令和 `awk`。如果记录包含多个字段，定量显示输出结果会更加实用。

在删除和修改记录的过程中，已经介绍了如何显示单一记录。用户可以选择查看特定记录，并且可以通过以下脚本段将记录发送到打印机：

```bash
# 脚本段示例
```

查看记录时的输出结果如下：

```bash
# 输出结果示例
```

#### 22.5 小结
验证用户输入的有效性非常重要，也是一种高级技巧。虽然你可能知道记录应该接受的内容，但用户通常并不清楚。计算机工业中有一句老话：“垃圾进，垃圾出”。这意味着如果没有在脚本中测试无效数据，就会输出错误信息。

### 第23章 调试脚本
调试脚本是 shell 编程中最烦人的任务之一。有一些方法可以借鉴，但最好的做法是在问题出现前防止大多数错误。为此，应遵循以下规则：

- 将脚本设计分成几个任务或过程，然后在继续下一步之前分别测试每个部分。

本章内容包括：
- 一般错误
- `set` 命令介绍

没有比在脚本中发现难以察觉的错误更令人头疼的事情了。随着编程经验的积累，查找问题的方法也会相应增加。

#### 23.1 一般错误
##### 23.1.1 循环错误
`for`、`while`、`until` 和 `case` 语句中的错误通常是实际语句段不正确。可能漏写了固定结构中的一个保留字。例如，如果看到错误信息 `done`，这表明正在处理一个 `while` 语句。检查 `while` 语句，确保没有漏写或错写关键字，如 `do` 或条件语句。

##### 23.1.2 典型的漏写引号
另一个常见的错误是漏写引号。解决这类错误的唯一方法是在脚本中确保所有引号成对出现。当 shell 打印出错误行后，可以在 vi 编辑器中查看文件。使用 `vi` 的 `set nu` 选项来调试错误，进入 `vi` 后，键入 `:set nu` 以显示文本行号，然后进入 shell 打印错误行。

##### 23.1.3 测试错误
在使用 `-eq` 语句时忘记在测试条件的一边使用数字取值也是一个常见错误。如果遇到以下错误提示，通常是因为在变量和方括号之间缺少空格，或者在方括号中漏写了操作符：

```bash
[: missing ']'
```

##### 23.1.4 字符大小写
大多数错误是由于在使用变量时大小写不一致造成的。例如，经常在定义时使用大写，而在调用变量时使用小写字母，这样会导致变量未赋值。

##### 23.1.5 for 循环
使用 `for` 循环时，有时会忘记在循环的列表部分使用 `$` 符号，特别是在读取字符串时。

##### 23.1.6 echo
最有用的调试脚本工具是 `echo` 命令。通常在可能出现问题的脚本重要部分前后加入 `echo` 命令，例如在变量读取或修改操作前后。使用 `last status` 命令判断命令是否成功，但不要在 `echo` 命令后直接使用 `last status` 命令，因为它总是返回真。

#### 23.2 set 命令
`set` 命令可以帮助调试脚本。以下是 `set` 命令常用的调试选项：
- `set -n`：读取命令但不执行。
- `set -v`：显示读取的所有行。
- `set -x`：显示所有命令及其参数。

关闭 `set` 选项只需用 `+` 替换 `-`。可以在脚本开始时打开 `set` 选项，然后在结束时关闭它，或者在认为有问题的特殊语句段前后打开和关闭它。

下面是一个例子。以下脚本将名字保存在变量列表中。用户输入名字，`for` 循环遍历变量列表查看是否有匹配模式。注意这里在脚本开始时使用了 `set -x`，并在结尾部分关闭它。

运行此脚本，给出一个不在列表中的名字，输出如下：

```bash
# 输出结果示例
```

输出显示了对变量列表进行循环时所有的比较操作。当读取文件或进行字符串或取值的比较发现问题时，使用 `set` 命令是非常有帮助的。

#### 23.3 小结
跟踪错误的最佳方式是亲自查阅脚本，并使用 `set` 命令和大量的 `echo` 语句。

### 第24章 Shell 嵌入命令
实际上已经使用了许多 shell 嵌入命令。这些命令是在实际的 Bourne shell 中创建的，而不是存在于 `/bin` 或 `/usr/bin` 目录中。嵌入命令比系统中的相同命令更快。