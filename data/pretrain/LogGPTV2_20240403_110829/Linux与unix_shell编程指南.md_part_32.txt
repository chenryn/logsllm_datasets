262
第四部分 基础s h e l l编程
下载
22.2 删除记录
要从文件中删除记录，首先要将记录传给用户以确保该记录是正确删除的记录。得到确
认后才执行下列任务：
1) 查询记录。
2) 显示记录。
3) 确认删除。
4) 修改文件。
首先使用姓域查询记录，一旦从用户处得到需查询的姓，则使用 g r e p或a w k进行处理，但
是因为此文件不会有超过1 0 0个记录，将直接从文件中执行读取操作，进行匹配测试。
如果文件包括超过几百个记录，建议使用a w k，因为使用a w k比直接从文件中读取数据
快得多，同样也比用g r e p将各域分开存入变量要快一些。
可以使用a w k或g r e p查询文件D B F I L E：
注意使用a w k时，变量用单引号括起来，如果不这样做，就不会返回任何数据。
将各域分开，并设置与其对应的变量（记住这里用冒号作分隔符）。必须改变I F S设置为
冒号。如果不这样，就不能读取记录。改变 I F S设置时，最好先保存其设置，以便于脚本完成
时再恢复它。
要保存I F S，使用：
S A V E D I F S = $ I F S
将其改为冒号：
I F S = :
当用I F S完成操作后，简单的恢复它：
I F S = $ S A V E D I F S
加入java编程群：524621833
263
第22章 创建屏幕输入
下载
查询记录函数为g e t _ r e c，此函数不带参数。
用户可以输入姓或q退出任务。一旦输入姓，执行测试以确保输入存在。比较好的测试方
法是：
if ["$STR"!=""；]t h e n
然后是：
[-2 $STR]
第一个测试捕获只键入回车符的用户。第二个测试 0长度字符串。
使用有意义的变量名从文件中读取各域，读取记录时使用计数，通过计数变化告之用户
查询记录时发生某种动作。如果发现匹配模式，调用另一过程显示此域，用户然后使用 b r e a k
命令跳出循环。如果未找到匹配模式，脚本进入下一循环步。找到匹配记录后，询问用户是
否删除记录，缺省回答是n o。
加入java编程群：524621833
264
第四部分 基础s h e l l编程
下载
使用grep -v执行记录删除，并使用字符串S T R（S T R保存用户删除的雇员姓）显示所有未
匹配记录。
g r e p命令输出重定向到一临时工作文件中。然后文件移入初始 D B F I L E中，删除后执行文
件分类，输出重定向到一临时工作文件，然后再移回初始文件 D B F I L E。临时工作文件可能首
先被分类，然后再移回初始文件，而不是先移后分类。
使用最后状态命令执行测试所有文件移动操作。以下是删除一个记录的输出结果：
删除记录的完整脚本如下：
加入java编程群：524621833
265
第22章 创建屏幕输入
下载
加入java编程群：524621833
266
第四部分 基础s h e l l编程
下载
22.3 修改记录
实际上已经编写了修改记录的大部分脚本，这些脚本在记录删除操作中。
找到正确记录后，设置所有该记录域变量到一临时工作文件，然后使用缺省设置变量：
：{ d e f a u l t _ v a r i a b l e = v a r i a b l e }
加入java编程群：524621833
267
第22章 创建屏幕输入
下载
对于不想修改的域，简单输入回车键即可，然后缺省值放入临时工作变量中。在相关域
内键入新值即可修改此域。
使用grep -v执行文件的实际修改操作。除了正在被修改的记录，所有记录重定向到一临
时工作文件，这里雇员编号用作g r e p命令字符串参数：
grep -v $CODE $DBFILE >$HOLD1
然后提示用户是否保存记录。如果保存，重新修改的记录也写入临时工作文件，然后此
临时工作文件移入原文件D B F I L E中。
输出被重定向到一临时工作文件，然后将此文件分类，再移回原文件 D B F I L E。最后状态
命令测试文件移动操作。如果存在问题，告之用户。实际脚本中，在增加记录时执行的有效
性测试也同样用于修改记录中。修改一个记录的输出结果如下：
完整脚本如下：
加入java编程群：524621833
268
第四部分 基础s h e l l编程
下载
加入java编程群：524621833
269
第22章 创建屏幕输入
下载
加入java编程群：524621833
270
第四部分 基础s h e l l编程
下载
22.4 查看记录
用户可能要查看所有记录或其中一部分。如果查看所有记录，使用 c a t命令和a w k，如果
记录包含很多域，那么很有必要定量显示输出结果，使其对用户更加实用。
在删除和修改记录中，已经讲过了怎样显示单一记录，用户有选择的查看记录选项时唯
一增加的功能就是打印一个记录。以下脚本段将记录发往打印机：
加入java编程群：524621833
271
第22章 创建屏幕输入
下载
查看记录时输出结果如下：
查看记录的完整脚本如下：
加入java编程群：524621833
272
第四部分 基础s h e l l编程
下载
加入java编程群：524621833
273
第22章 创建屏幕输入
下载
22.5 小结
验证用户输入的有效性很重要，也是一种高级技巧。虽然你可能有时知道记录接受输入
的内容，但用户通常并不知道。
在计算机工业发展史上有一句老话：送进的是垃圾，出来的肯定是垃圾，但知道这一点
时已经太晚了，意即如果没有在脚本中测试垃圾数据，就会输出垃圾信息。
加入java编程群：524621833
下载
第23章 调 试 脚 本
s h e l l编程最烦人的一项工作是调试问题。有一些方法可以借鉴，但是最好能在问题出现
前防止大部分错误，为此应遵循以下规则。
将设计脚本分成几个任务或过程，然后在继续下一步前分别予以测试。
本章内容有：
• 一般错误。
• set命令介绍。
没有比在脚本中发现一个难以察觉的错误更令人头疼的了，然而，随着编程经验不断丰
富，查询手段也相应增加。
经常碰到的问题是忘了使用引号或在i f语句末尾未加f i。
需要牢记的一点是当s h e l l打印出一个脚本错误后，不要只看那些疑问行。而是要观察整
个相关代码段。s h e l l不会对错误进行精确定位，而是在试图结束一个语句时进行错误统计。
23.1 一般错误
23.1.1 循环错误
f o r、w h i l e、u n t i l和c a s e语句中的错误是指实际语句段不正确。也许漏写了固定结构中的
一个保留字。
下面错误打印信息d o n e，这是一个很好的线索。因为这时知道正在处理一个 w h i l e语句。
回溯脚本段，检查w h i l e语句，是否漏写或错写了关键字，如d o或者正在使用的条件语句。
23.1.2 典型的漏写引号
第二个典型错误是漏写引号错误。经常要注意这个问题，因为此错误经常出现。这里给
出解决这类错误的唯一方案是在脚本中确保所有引号成对出现。
当s h e l l打印出错误行后，通常在v i编辑器中查看文件。使用v i的set nu选项调试错误，先
进入v i，然后点击键，后跟一冒号，再键入set nu ，这时给出文本行号，然后
进入s h e l l打印错误行。
23.1.3 测试错误
另一个常见错误是在使用- e q语句时忘记在测试条件一边使用数字取值。
如果得到下列错误提示，通常是由于两件事情：需要在变量和方括号间加空格；在方括
号里漏写操作符。
加入java编程群：524621833
275
第23章 调试脚本
下载
[: missing ']'
23.1.4 字符大小写
经验上讲大多数错误是由于使用变量时大小写保持不一致。例如经常在开始定义时用大
写，然后在变量调用时用了小写字符，这样难免变量会没有赋值。
23.1.5 for循环
使用f o r循环时，有时会忘了在循环的列表部分用$符号，特别是在读取字符串时。
23.1.6 echo
最有用的调试脚本工具是e c h o命令。一般在可能出现问题的脚本重要部分加入 e c h o命令，
例如在变量读取或修改操作其前后加入e c h o命令。
使用最后状态命令判断命令是否成功，这里需要注意的是，不要使用 e c h o命令后直接加
最后状态命令，因为此命令永远为真。
23.2 set命令
s e t命令可辅助脚本调试。以下是s e t命令常用的调试选项：
set -n 读命令但并不执行。
set -v 显示读取的所有行。
set -x 显示所有命令及其参数。
将s e t选项关闭，只需用+替代-。有人总认为+应该为开，而-应为关闭，但实际刚好相反。
可以在脚本开始时将s e t选项打开，然后在结束时关闭它。或在认为有问题的特殊语句段
前后打开及关闭它。
下面看一个例子。以下脚本将名字保存在变量列表中。用户输入名字， f o r循环循环变量
列表查看是否有匹配模式。注意这里在脚本开始时使用了 set -x，并在结尾部分关闭它。
运行此脚本，给出一个不在列表中的名字，输出如下：
加入java编程群：524621833
276
第四部分 基础s h e l l编程
下载
输出显示对变量列表进行循环时所有的比较操作。当读取文件或进行字符串或取值的比
较发现问题时，使用s e t命令是很有必要的。
23.3 小结
跟踪错误的最好方式是亲自查阅脚本，并使用s e t命令并加大量的e c h o语句。
加入java编程群：524621833
下载
第24章 shell嵌入命令
实际上已经用过了许多s h e l l嵌入命令。可能要想什么是 s h e l l嵌入，这些命令是在实际的
Bourne shell里创建而不是存在于/ b i n或u s r / b i n目录里。嵌入命令比系统里的相同命令要快。