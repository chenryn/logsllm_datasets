tr=⇒T (P(cid:2)
(P(cid:2)
By hypothesis,
({{P2}},C∅), n0
(cid:2) s.t. (Σ, σ
σ
Therefore, we obtain by theorem 6, ({{P2}},∅)
(P(cid:2)
, Φ(C(cid:2))σ
we have that trcΦ(C(cid:2))σ
conclude that ({{P2}},∅) trc=⇒c (P(cid:2)
,C(cid:2)) ∈ Γ(n)
s.t.
,C(cid:2)), n.By deﬁnition 12, there is
(cid:2)↓.
(cid:2)) ∈ Sol (C(cid:2)) and Φ = Φ(C)σ↓ ∼ Φ(C(cid:2))σ
trΣ==⇒c
(cid:2)↓). As trcΦ↓ = trΣΦ↓ and Φ ∼ Φ(C(cid:2))σ
(cid:2)↓
(cid:2)↓. Hence, we
(cid:2)↓).
(cid:2)↓ = trΣΦ(C(cid:2))σ
, Φ(C(cid:2))σ
σ
σ
(cid:2)
(cid:2)
538
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:38:36 UTC from IEEE Xplore.  Restrictions apply. 
0}}, C∅), ({{Q}}, C∅)
Γ (cid:2) ({{P
(cid:2) (cid:2) ε
π (cid:2) (cid:16)
0}}, C∅), ({{Q}}, C∅)
Γ (cid:2) ({{P
(cid:2) (cid:2) ε
π (cid:2) (cid:16)
Q
Q
3 , E 0
Y (X)
2 , E 0
Y (X)
Γ (cid:2) E 0
1 , E 0
(cid:2) (cid:2) Y (X)
π (cid:2) ∀X1. X (cid:15)=?(cid:4)X1, 0(cid:5)
Γ (cid:2) E 0
1 , E 0
(cid:2) (cid:2) Y (X)
π (cid:2) X =?(cid:4)X1, 0(cid:5)
Z(cid:4)ax1(cid:5)
Γ (cid:2) E 0
4 , E f
(cid:2) (cid:2) Z(cid:4)ax1(cid:5)
π (cid:2) X =?(cid:4)X1, 0(cid:5)
(a) Partition tree T0 ∈ PTree(P 0, Q)
Γ (cid:2) E 0
5 , E f
(cid:2) (cid:2) Z(cid:4)ax1(cid:5)
π (cid:2) ∀X1. X (cid:15)=?(cid:4)X1, 0(cid:5)
Z(cid:4)ax1(cid:5)
Q
Q
Y (X)
2 , E 0
Γ (cid:2) E 0
1 , E 0
(cid:2) (cid:2) Y (X)
π (cid:2) X =?(cid:4)X1, 0(cid:5)
Q
Y (X)
Γ (cid:2) E 0
1 , E 0
(cid:2) (cid:2) Y (X)
π (cid:2) ∀X1. X (cid:15)=?(cid:4)X1, 0(cid:5)
3 , E 0
Q
Z(cid:4)ax1(cid:5)
Z(cid:4)ax1(cid:5)
Z(cid:4)ax1(cid:5)
4
Γ (cid:2) E 0
(cid:2) (cid:2) Z(cid:4)ax1(cid:5)
π (cid:2) X =?(cid:4)X1, 0(cid:5)
Q
Γ (cid:2) E f
(cid:2) (cid:2) Z(cid:4)ax1(cid:5)
π (cid:2) X =?(cid:4)X1, 0(cid:5)
Γ (cid:2) E 0
5 , E f
(cid:2) (cid:2) Z(cid:4)ax1(cid:5)
π (cid:2) ∀X1. X (cid:15)=?(cid:4)X1, 0(cid:5)
Q
(b) Partition tree T1 ∈ PTree(P 1, Q)
Figure 6: Example of partition trees
This lemma justiﬁes decidability of trace equivalence
given a partition tree—whose construction is outlined in the
next paragraph. We investigate complexity afterwards.
Remark 5.1. A similar result can be stated for labelled
bisimilarity, omitted here due to lack of space. In spirit,
we cope with the more complex notion of equivalence
by considering subtrees of T rather than simple nodes.
The procedure is outlined in the appendix and described
extensively in the technical report [2].
Generation of a partition tree. Let us describe, in broad
lines, the ingredients to compute T ∈ PTree(P1, P2).
1) First, constraint systems are extended with additional
components, e.g.
logical constraints on second-order
terms or deduction facts modelling the attacker knowl-
edge, and symbolic semantics are lifted to extended con-
straint systems. The goal is to carry additional informa-
tion through the procedure to help with the generation of
the predicates π. Typically, initial processes Pi = {{Pi}},
i ∈ {1, 2}, are put under the form (Pi,C∅,Ce∅) with Ce∅
the empty extended constraint system.
2) We deﬁne simpliﬁcation rules putting extended constraint
systems in a form where their satisﬁability is trivial to
decide. Typically, the set Sroot of symbolic processes at
the root of the partition tree is obtained by saturating
{(P1,C∅,Ce∅), (P2,C∅,Ce∅)} under ε-transitions and using
simpliﬁcation rules to get rid of unsatisﬁable constraint
systems.
3) From the processes of the root, two sets of children
processes are then deﬁned: Sin (processes ε-reachable
after an input transition) and Sout (processes ε-reachable
after an output transition). Sin and Sout may need to be
partitioned to satisfy the requirement that processes of
a same conﬁguration are statically equivalent. This is
achieved by case-distinction rules, resulting into
(cid:7) . . . (cid:7) S q
(cid:7) . . . (cid:7) S p
Sout = S 1
Sin = S 1
out
out
in
in
This gives p + q children in the partition tree. For
example, the ﬁrst child node is deﬁned by
• Γ = {(P,C) | (P,C,Ce) ∈ S 1
}
in
• (cid:3) = Y (X)
iff ∃σ. (Σ, σ) ∈ Sol (Ce) (where Ce is an
• π(Σ)
arbitrary extended constraint system appearing in S 1
in)
4) The construction is then kept up top-down: for all current
leaves of the partition tree for which visible actions are
still reachable, we generate the sets Sin and Sout and
partition them using case-distinction rules, giving birth
to new leaves. This process naturally terminates as the
transition relation a−→s is strongly terminating.
We prove in the technical report [2] that this procedure
indeed generates a partition tree T ∈ PTree(P1, P2).
Final result. Using the procedure above to generate a
partition tree and lemma 7, we obtain a decision procedure
for trace equivalence. This procedure is actually the one im-
plemented in our automated tool, DEEPSEC. As mentionned
earlier, we also have a decision procedure for labelled bisim-
ilarity based on partition trees, outlined in the appendix.
However, in the end, we use a different argument to
obtain the theoretical complexity upper bound expected
(coNEXP). By careful analysis of the sizes of the extended
constraint systems carried out during the procedure and
by bounding the number of applications of case-distinction
rules, we can prove that the partition tree we generate has
solutions of exponential size. Hence:
Theorem 8. There exists p ∈ N such that for all conver-
gent subterm destructor rewriting system R, closed plain
processes P1 and P2 there exists a partition tree T ∈
PTree(P1, P2) such that
for all
Σ ∈ mgs(n), |Σ|dag < 2(|P1,P2,R|dag+|F|)p.
The combination of this theorem and lemma 7 straight-
forwardly justiﬁes the existence, whenever P1 (cid:15)≈t P2, of a
concrete trace of exponential size in P1 or P2 which is not
matched in the other process. This easily leads to a coNEXP
decision procedure for trace equivalence, using the fact that
static equivalence is NP—this result is easily obtained from
existing procedures, e.g. [3], [27], [29]. As we explained,
the procedure can be adapted for labelled bisimilarity. We
refer to appendix for an outline or the technical report [2]
for all nodes n in T ,
539
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:38:36 UTC from IEEE Xplore.  Restrictions apply. 
for details. Hence:
Theorem 9. Equiv
convergent destructor rewriting systems.
6. Implementation
≈t and Equiv
≈(cid:2) are coNEXP for subterm
Building on the previous section we have implemented
a prototype for verifying trace equivalence in OCaml, called
DEEPSEC (DEciding Equivalence Properties in SECurity
protocols), publicly available at [1]. The tool’s speciﬁcation
language extends the grammar presented in section 2.2: in
particular, we deﬁne a non-deterministic choice operator
P + Q, a let operator for variable assignment let x =
u in P else Q, as well as bounded replication !nP deﬁning n
copies of P in parallel. These additional primitives are only
here for modelling convinience—and the native integration
allowed speciﬁc optimisations compared to encoding within
the initial calculus. The syntax and structure of DEEPSEC’s
input ﬁles are similar to the ones of the widely used
ProVerif [17] tool. We hope this will make it easier for new
users to discover and handle our tool.
Partial order reductions. The tool also implements partial
order reductions (POR), an optimisation technique for pro-
tocol analysis developed by Baelde et al. [12]. The basic idea
is to discard part of the state space that is redundant. This
optimisation is sound when processes are action determi-
nate, as deﬁned in [12]. Assigning a different channel name
to each parallel process is a simple, syntactic way to ensure
this property although this is not always possible—typically
when looking at anonymity or unlinkability properties. In
practice, DEEPSEC automatically detects action-determinate
processes and activates the POR, which drastically reduces
the number of symbolic executions that need be considered.
Distributing the computation. Following the outline of
section 5, the main task of DEEPSEC is to generate a par-
tition tree. This task can be distributed: computing a given
node of the tree can be done independently of its sibling
nodes. However, some engineering is needed to avoid heavy
communication overhead due to task scheduling. Indeed,
the partition tree is indeed not a balanced tree and it is
impossible to know which branches will be larger than
others. Hence, in practice we do not directly compute and
return the children of each node in the most straightforward
manner, but proceed in two steps:
1) We start with a breadth-ﬁrst generation of the partition
tree. The number of pending nodes will gradually grow
until, potentially, exceeding a threshold parameter n.
2) Each available core focuses on one of these nodes,
computes the whole subtree rooted by this node (depth-
ﬁrst manner), and is then assigned a new node. If
at some point cores become idle—because all nodes
generated at step 1 are either completed or currently
assigned to an active core—we restart this two-step
procedure on incomplete nodes.
While parallelisation is also supported by the AKISS
tool, DEEPSEC goes one step further as it is also able to
distribute the computation through clusters of computers.
Benchmarks. We performed extensive benchmarks to com-
pare our tool against other tools that verify equivalence
properties for a bounded number of sessions: AKISS [19],
APTE [20], SAT-EQUIV [30] and SPEC [47]. Experiments
are carried out on Intel Xeon 3.10GHz cores, with 50Go
of memory. AKISS and DEEPSEC use 35 cores as they
support parallelisation—unlike the others which therefore
use a single core. The results are summarised in ﬁg. 7.
We analysed strong secrecy, an equivalence based ver-
sion of secrecy, for several classical authentication protocols.
These benchmarks are mainly used for measuring scalability
when increasing the number of sessions (ﬁg. 7 indicates
the number of roles in parallel, as depending on the exact
scenario a session may require more or less roles). The
DEEPSEC tool clearly outperforms AKISS, APTE, and SPEC.
The SAT-EQUIV tool becomes more efﬁcient, when the
number of sessions signiﬁcantly increases. However, the
Otway-Rees protocol cannot be analysed by SAT-EQUIV
as it does not satisfy their type compliance condition and
the Needham-Schroeder-Lowe protocol is out of its scope,
as SAT-EQUIV does not support asymmetric encryption.
DEEPSEC is even able to verify a higher number of roles
than those reported in ﬁg. 7. Setting a timout of 12 hours,
e.g., the Denning-Sacco and Yahalom-Lowe protocols can
be veriﬁed for 52 roles in 11h09m, resp. 25 roles in 10h04m.
To illustrate the broad scope of the tool we analyse
unlinkability and anonymity properties for a number of other
protocols: Abadi and Fournet’s anonymous authentication
protocol [5], the AKA protocol deployed in 3G telephony
networks [10], the Passive Authentication and Basic Access
Control (BAC) protocols implemented in the European pass-
port [37], as well as the Prˆet-`a-Voter (PaV) [43] and several
variants of the mixnet based Helios [7] voting protocols.
We comment a bit more on the voting protocol examples.
Relying on the reduction result of Arapinis et al. [9], we
know that it is sufﬁcient to consider three voters, two honest
and one dishonest one, to conclude vote privacy for an
arbitrary number of voters. Moreover, when revoting is
allowed, which is the case for Helios, but not for PaV,
we only need to consider a server which accepts seven
ballots that may come from any of the three voters. For the
Helios protocol we consider several versions. The vanilla
Helios version, which does not allow revoting, is known
to be vulnerable to a ballot-copy attack [32]—the attacker
simply copies the ballot of a honest voter in order to bias
the outcome. Two countermeasures have been proposed to
thwart this attack: one applies a ballot weeding procedure
(W), while the other is based on a zero-knowledge proof
(ZKP) that links the identity of the voter to the ballot. When
no revote (NR) is allowed these two versions are indeed
shown to be secure. When allowing revoting we consider
the case where seven ballots can be accepted [9], under two
different scenarios. When only the dishonest voter revotes
(dR) we can show the security of the weeding mechanism.
When however one honest voter re-votes twice (the same
vote), a variant of the ballot-copy, pointed out to us by
Rønne [41], is possible in the weeding version. The attacker
intercepts or delays the ﬁrst honest vote, and casts this
540
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:38:36 UTC from IEEE Xplore.  Restrictions apply. 
Protocol (# of roles)
OM
OM
OM


OM
OM
OM
OM
OM
OM





BUG
Akiss
APTE
 41s
58m9s