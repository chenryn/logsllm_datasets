             'D': {'D', '6'},
             'E': {'E', '3'},
             'F': {'F'},
             'G': {'9'},
             'H': {'H'},
             'I': {'1', 'i', 'l'},
             'L': {'1', 'L'},
             'M': {'M', '8'},
             'N': {'n', '2'},
             'O': {'*', '0'},
             'P': {'9'},
             'R': {'R', 'r'},
             'S': {'S', '5'},
             'T': {'T', 't'},
             'V': {'v'},
             'W': {'3', 'w'},
             'Y': {'Y'},
             'Z': {'Z'},
             'a': {'@', '4', 'A'},
             'b': {'8', 'b'},
             'c': {'C', 'c', '©'},
             'd': {'D', '6'},
             'e': {'E', '3'},
             'f': {'7', 'F'},
             'g': {'g', '9'},
             'h': {'h', 'H'},
             'i': {'i', '1', 'l'},
             'j': {'J', '7'},
             'k': {'k', 'K'},
             'l': {'1', 'L'},
             'm': {'8', 'M'},
             'n': {'n', '2'},
             'o': {'*', '0'},
             'p': {'p', '9'},
             'q': {'Q'},
             'r': {'R', 'r'},
             's': {'S', '5'},
             't': {'T', 't'},
             'u': {'[', 'u'},
             'v': {'V', 'v'},
             'w': {'3', 'w'},
             'x': {'*'},
             'y': {'Y', 'y'}})
```
Now let's use backtracking to iterate over all possible options:
```python
import solution_checker
with open("key_checker_data", "rb") as f:
    key_checker_data = f.read()
flag = "{hey_that_is_the_great_puzzle}"
def recurse(index, candidate):
    if index == len(flag):
        str_candidate = "".join(candidate)
        if solution_checker.check_key(str_candidate, key_checker_data):
            return str_candidate
        return None
    for c in leet_map.get(flag[index], flag[index]):
        candidate[index] = c
        result = recurse(index + 1, candidate)
        if result is not None:
            return result
print(f"[*] Searching for flag...")
result = recurse(0, list(flag))
if result:
    print(f"[*] Found flag: CSA{result}" )
else:
    print(f"[-] Can't find flag!" )
```
After running for a while, the script returns with an empty result. Notice however that the original flag includes a `z`, but the `leet_map` we've constructed does not. So, it looks like we need to manually add a mapping for `z`:
```python
leet_map['z'].add('Z')
leet_map['z'].add('z')
```
We can obviously add even more mapping, such as:
```python
for k, v in leet_map.items():
    v.add(k.lower())
    v.add(k.upper())
```
However each such entry multiples the amount of candidates and lengthens the runtime, so we need to be careful about adding too many options.
After adding a mapping for `z`, we run the script again and get the flag:
```console
┌──(user@kali)-[/media/sf_CTFs/checkpoint/README]
└─$ python3 solve.py
[*] Searching for flag...
[*] Found flag: CSA{hEY_th@T_l5_thE_9RE4T_p[ZZL3}
```