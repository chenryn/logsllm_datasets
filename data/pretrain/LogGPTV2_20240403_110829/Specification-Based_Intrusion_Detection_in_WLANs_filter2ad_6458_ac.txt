ing raised if port-based access control is required
by the policy.
• AES link layer encryption: As with the re-
quirement for RSN, the monitor evaluates the RSN
IE and checks that AES is the only supported pair-
wise cipher suite advertised for use. Again, the list
of permitted and prohibited encryption algorithms
are provided to the sensor via runtime conﬁgura-
tion directives.
• EAP-TLS for authentication: For stations in
state 6, the monitor checks that any EAP Re-
quest frames destined for the monitored STA con-
tain an EAP-Type of EAP-TLS. A more sophisti-
cated monitoring capability could be implemented
by adding EAP method speciﬁc states to the state
transition model, to ensure that the EAP method
was executing as expected. Such an approach
would be of limited use when tunnelled EAP meth-
ods2 are employed.
For each STA, the sensor checks the security con-
straints whenever it transitions between states. Any
violation of these security constraints is raised as an
alarm as a violation of the site security policy.
5. Experimentation
A number of experiments were carried out with the
following goals: 1) to establish the feasibility and relia-
bility of the proposed speciﬁcation based intrusion de-
tection technique; 2) to perform a comparative analysis
to demonstrate the eﬀectiveness of the proposed tech-
nique against other wireless intrusion detection tech-
niques; 3) to establish the impact of the sensor location
on reliability and eﬀectiveness of the proposed tech-
nique; and 4) to demonstrate the policy compliance
monitoring capabilities of the technique.
5.1. Methodology and Setup
The experimental setup involved six nodes: an STA,
an AP, an attacker and three sensors. For the purposes
of the experiments, a Robust Secure Network (RSN)
was set up using hostapd software running on a Linux
laptop as the AP. A Windows XP PC was used as the
STA. Three Linux laptops were used as passive sensors
and a laptop running Linux was used as the attacking
station. An open source wireless IDS, Snort-Wireless 3
was used for comparative analysis with its default set-
tings. A custom Snort-Wireless preprocessor (State-
Transition-Processor) was used on the sensors to pro-
cess all WLAN events passively observed by the sensor
and use the intrusion detection techniques presented in
Section 4 to detect violations of the site security pol-
icy. A custom tool zaildar that supports injection of
arbitrary frames into a WLAN was developed for these
experiments.
To satisfy the goals of the experiments, as identi-
ﬁed earlier, the experiments were divided into three
sets: Set1, Set2 and Set3. In Set1 experiments a num-
ber of DoS attacks were launched against established
2Tunnelled EAP methods are executed over encrypted links
and are not passively observable.
3http://snort-wireless.org
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:34:02 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006associations by spooﬁng the MAC addresses of the le-
gitimate AP or STA. A data exchange was established
between the legitimate STA and AP, after establish-
ment of a SA, so that eﬀects of the DoS attacks were
obvious.
In Set2, MAC spooﬁng based attacks were
launched against the WLAN infrastructure by random
STAs where no SA existed between the random STAs
and the AP. All attacks involving masquerading the
STA source MAC that were launched in Set1 were also
launched in the Set2 experiments. Set3 experiments
were carried out to establish the false positive rate of
the proposed technique in the absence of any attack
traﬃc and to demonstrate the ability of the proposed
technique to provide policy compliance monitoring. In
these experiments, after establishment of SA, a data ex-
change was started between the STA and the AP and
the sensors were used to monitor this normal WLAN
activity. Then for policy compliance testing, the AP
was reconﬁgured to implement an Open Network in-
stead of a RSN and the sensors were used to monitor
another data exchange between the STA and the AP.
The Open Network does not require any authentication
and merely requires the STA to be in state 4 to be able
to perform data exchange with the AP.
In order to assess the proposed technique’s ability
to deal with varying levels of frame loss, three sen-
sors were located at increasingly greater distance from
the AP and the STA. It was expected that as the dis-
tance between the sensor and the monitored entities
increases, the rate of false positives would increase for
that sensor due to frame loss. To test this theory, the
AP, the STA, the attacker and a sensor (Sensor1) were
placed in one lab room, in close proximity to each other.
The second sensor (Sensor2) was placed in another lab
room about 20 meters away from the position of the
AP and the third sensor (Sensor3) was placed further
away about 50 meters away from it in yet another room.
The sensors were used to obtain traﬃc captures, dur-
ing the running of the attacks, from their respective
locations. The traﬃc capture (on all three sensors)
was terminated after every attack and saved in a sep-
arate ﬁle. This ensured that each traﬃc capture ﬁle
contained only one attack, eﬀectively labeling the at-
tack captures. Traﬃc captures from each sensor were
then processed by the State-Transition-Processor on
the sensor in oﬄine mode. The experiments were car-
ried out in a busy RF environment where numerous
actively used WLANS were known to operate. Hence,
the sensors captured noise as well as relevant attack
traﬃc.
In the interest of comparative analysis, Snort-
Wireless was used with its default settings with the
macspoof, the authﬂood and the deauthﬂood preproces-
sors enabled. In the remainder of the paper this set-
ting of Snort-Wireless is referred to as Snort-Wireless-
Default. A comparative study was performed on detec-
tion capabilities of Snort-Wireless-Default and our cus-
tom Snort-Wireless preprocessor i.e. State-Transition-
Processor.
5.2. Choosing Thresholds
Due to legitimate use of various management frames
in WLANs and the existence of unexpected state
transitions and frames (for benign reasons such as
frame loss and restransmissions) thresholds were imple-
mented in order to eﬀectively manage the rate of false
negatives and false positives for the State-Transition-
Processor. In this paper, we refer to these as indices of
suspicion and their values were determined by a combi-
nation of empirical analysis of WLAN traﬃc and what
was considered to be most reasonable for that particu-
lar threshold. A threshold value of 5 was used for each
of the negative state shift, the zero state shift and the
unexpected frame tolerance thresholds. While positive
state shift tolerance threshold was set to 2. Post-hoc
analysis of the experiment captures also conﬁrmed the
eﬀectiveness of these thresholds in keeping false nega-
tives and false positives to a minimum.
5.3. Results and Observations
This section presents the results and observations
of executing State-Transition-Processor and Snort-
Wireless-Default on captures obtained from Set1, Set2
and Set3 experiments. The macspoof preprocessor of
Snort-Wireless-Default uses the ﬂawed technique of us-
ing the patterns of sequence number changes to detect
intrusions. As expected, it generated numerous false
alerts for every MAC address in every capture ﬁle, ir-
respective of the attack. This indicated that this pre-
processor was too noisy to provide any real results for
our experiments and was ignored in the evaluation of
the results for all our experiments.
Tables 2 and 3 show the results of executing State-
Transition-Processor and Snort-Wireless-Default over
captures obtained from the three sensors for each at-
tack launched in Set1. The ﬁrst column describes
the attack type and the target state transition for the
STA. The Alarms column describes the type of alarm
generated and the state transition sequence that trig-
gered it. The following keys are used to describe the
type of attacks: Zero = zero state transition toler-
ance threshold exceeded, Pos = positive state transi-
tion tolerance threshold exceeded, Neg = negative state
transition tolerance threshold exceeded, noSA = Data
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:34:02 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006frame detected from a MAC without SA, nonCompli-
antNetwork= RSN IE does not match the required IE,
Spooﬁng = Positive state shift detected immediately
proceeding a negative state shift or a -ve frame (see
Section 4.2), unexpected frame = unexpected frame re-
ceived for current state, unexpected frame ﬂood = unex-
pected frame tolerance threshold exceeded. noSA is a
specialized case of an unexpected frame. In the remain-
der of the paper, these alarm keys are used to refer to
the alarms. The middle column represents success or
failure in detecting the attack for the capture obtained
from that sensor. The
symbol is used to represent
successful detection, the × symbol is used to represent
detection failure. All the attacks in Set1 were correctly
classiﬁed by the State-Transition-Processor. However,
Snort-Wireless-Default only detected and classiﬁed the
deauthentication ﬂooding attacks and the Authentica-
tion Flood attack. It has no capability of detecting the
other attacks in Table 2.
√
Attack
Deauthentication
Broadcast Flood DoS (9→0)
Targeted Deauthentication
DoS (9→0)
Client Initiated Targeted
Deauthentication DoS (9→0)
Disassociation Broadcast
Flood DoS Attack (9→2)
Targeted Disassociation
DoS (9→2)
Client Initiated Targeted
Disassociation DoS (9→2)
Association Flood
Authentication Flood
EAP-Success Flood
EAPoL-Start Flood
DoS (9→5)
DoS (9→5)
EAP-Failure Flood
EAPoL-Logoﬀ Flood
DoS (9→5)
EAP-Request
Identity Flood DoS
Sensor1
√
√
√
√
√
√
√
√
√
√
√
Sensor2
√
√
√
√
√
√
√
√
√
√
√
Sensor3
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
Zero (2→2),
Neg (2,3,4...→2)
Zero (2→2),
Neg (2,3,4...→2)
Zero (2→2),
Spooﬁng , noSA (2→9)
unexpected frame ﬂood,
unexpected frame
unexpected frame ﬂood,
unexpected frame
unexpected frame ﬂood,
Alarms
Zero (0→0), Neg (0,1,2...→0)
Spooﬁng , noSA (0→9)
Zero (0→0)
Zero (0→0), Neg (0,1,2...→0)
Spooﬁng , noSA (0→9)
unexpected frame
Zero (5→5),
Spooﬁng , noSA (5→9)
Zero (0→0), Neg (0,1,2...→0)
unexpected frame ﬂood,
unexpected frame
Zero (5→5), Neg (5,6,7...→5)
Spooﬁng , noSA (5→9)
unexpected frame ﬂood,
unexpected frame
Table 2. State-Transition-Processor attack de-
tection and alarms for Set1 experiments
For all the attacks launched in Set2, the State-
Transition-Processor raised type Zero alarms on pro-
cessing captures obtained from all the sensors. An
exception was the Authentication Flood attack, which
generated unexpected frame and unexpected frame ﬂood
alarms. Other exceptions were Association Flood and
EAP-Failure Flood attacks which resulted in unex-