让我们先通过调试器验证他. 验证的截图如下.
需要注意的是, 0x18是`GDICELL64`的大小. 聪明的你看了前面的PPT一定可以算出来的:)
依据前面的原理代码实现如下:
#### 验证
需要注意的是, 那个地方我打印是赋值粘贴的, 实在不想改了 :)
#### 总结数据关系
现在我们可以使用光明正大的开始观察我们的`BITMAP`了. 于是我整理了下面的几张截图. 和您分享一起总结数据关系:
##### 传入参数为0x10:
##### 传入参数为0x70:
##### 传入参数为0x80:
##### 传入参数为0x90:
##### 传入参数为0xA0:
基于此. 写出下表.
    [+] 0x10 ==> 0x370
    [+] 0x20 ==> 0x370
    [+] 0x70 ==> 0x370
    [+] 0x80 ==> 0x370
    [+] 0x90 ==> 0x390
    [+] 0xA0 ==> 0x3B0
之后随着我二把刀的数学水平, 我总结出了如下的关系式(她可能不太准确, 但应付风水布局应该足够了. :)
    if(nWidth >= 0x80)
        nSize = (nWidth - 0x80) * 2 + 0x370(这一部分还有内存对齐之类的我就不做计算了, 你可以由上面的自己实验)
    else
        nSize = 0x370
#### 验证
再来随便找个数值验证一下.
BinGo, 我们找到了能帮我们分配`nSize>=0x370`的`paged pool session`对象. 让我们开始下一小节.
## lpszMenuName
我们可以清楚的看到. 大于等于0x370的对象我们很愉快的找到了相应的分配. 但是小于0x370的呢. 比如上面的0x200和0xc0.
于是我们想到了`lpszMenuName`.
按照惯例. 我们先用调试器找到lpszMenuName.
首先我们得知道lpszMenuName(menu是菜单的意思)关联一个window的`windows窗口对象`,
其在内核当中对应结构体对象为`tagWND`, 于是我们来看下面的图(需要注意的是, 下面的截图我都是在windows 7 x64的环境下截的图,
因为从8开始微软去掉了很多的导出符号, 不过大多数时候windows 7的数据在后续的操作系统上还是成立的, 这算是一个自己调试内核的一个小技巧...)
    kd> dt win32k!tagWND 
    [...]
    +0x098 pcls             : Ptr64 tagCLS  
    [...]
其中`tagCLS`对应的是`windows窗口`对应的类, 在`tagCLS`当中我们能够记录找到`lpszManuName`.
记录一下我们等下写代码需要的数据.
    [+] 0x98 ==> tagCLS相对于tagWND的偏移.
    [+] 0x88 ==> lpszMenuName相对于tagCLS的偏移.
聪明的你一定猜到了, 如果我们能够泄露窗口的地址. 那么我们就能根据前面的思路泄露出`lpszMenuName`的地址,
从而通过传给wndclass.lpszMenuName不同大小的字符串(我的实验使用UNICODE做的).来观察出其大小关系.
### 泄露tagWND
泄露tagWND可以利用`HMValidateHandle`函数. 此函数我测试过支持到`windows RS3`版本.
在`samb`的[github](https://github.com/sam-b/windows_kernel_address_leaks/blob/master/HMValidateHandle/HMValidateHandle/HMValidateHandle.cpp)上面你可以找到对应的源码:
而另外一个方面小刀师傅的[博客](https://xiaodaozhi.com/exploit/71.html)这里也给出了相应的介绍.
所以我只给出粗糙的介绍. 详细的可以在[这里](https://xiaodaozhi.com/exploit/71.html)找到介绍.
先来看一张图.
`tagWND`对应一个`桌面堆`. 内核的桌面堆会映射到用户态去. `HMValidateHandle`能够获取这个映射的地址.
在这个映射(head.pSelf)当中存储着当前`tagWND`对象的内核地址. 而`HMValidateHandle`函数的地址未导出,
不过在导出的`IsMenu`函数有使用, 所以可以通过硬编码的形式找到它.
再次感谢小刀师傅的[博客](https://xiaodaozhi.com/). 小刀师傅拥有着我所有想要的优点.
借助于此, 我创建了如下的代码来帮我观察`lpszMenuName`的大小关系.
而实验的验证结果如下(需要注意的是, 这里我们的A系列函数会扩充为W系列函数, 这一部分在windows核心编程当中有提到).
##### 总结数据关系
anyway, 你也知道, 截图十分的痛苦. 所以我直接给出数据的表, 具体的你可以自己依据上面的思路来观察. :)
    [+] 0x01 ==> 0x20
    [+] 0x03 ==> 0x20
    [+] 0x05 ==> 0x20
    [+] 0x06 ==> 0x20
    [+] 0x10 ==> 0x40
    [+] 0x20 ==> 0x60
    [+] 0x30 ==> 0x80
    [+] 0x40 ==> 0xa0
关系式:
    if(nMalloc >= 0x10)
        nSize = nMalloc * 2 + 0x20(这一部分还有内存对齐之类的我就不做计算了, 你可以由上面的自己实验)
    else
        nSize = 0x20
BingGO!
##### 验证数学关系:
## 释放内存块
我们已经有了合适的用于分配内存块的函数, 接着就是其对应的释放了.
释放BitMap:
    DeleteObject(hBitmap)
释放lpszMenuName:
    UnregisterClass(&wns, NULL);
#### 实验验证
依赖于此, 我们很轻松的实现了`blackhat`演讲上面提到的布局. 验证如下(由于内存对齐, 我更改了一点点布局):
而`MS-16-098`的风水部分我会在爬完坑之后放到我的github上(据我的推测, 它的0x60分配出了错).
## 后记
这个漏洞我还没有调试完成, 还有个比较大的坑没有爬完. 后续爬完之后,
我会把这个漏洞的修改的exp放到我的[github](https://github.com/redogwu)上面, 同时更新此博客.
其实我更希望您能在此文当中看到的不只是`pool fengshui`的技巧, 而是在内核当中`调试器下见真章`的那种感觉,
这一个思想帮助我(我是一个很笨很笨的人)解决了很多的困惑.
Anyway, 谢谢您阅读这篇又丑又长的博客 :)
最后, wjllz是人间大笨蛋.
## 相关链接
    [+] sakura师父的博客: http://eternalsakura13.com/
    [+] 小刀师父的博客: https://xiaodaozhi.com/
    [+] MS 16-098的分析: https://sensepost.com/blog/2017/exploiting-ms16-098-rgnobj-integer-overflow-on-windows-8.1-x64-bit-by-abusing-gdi-objects/
    [+] 写完文章之后发现的一篇很好的博客: http://trackwatch.com/windows-kernel-pool-spraying/
    [+] 本文的样例代码地址: https://github.com/redogwu/blog_exp_win_kernel/tree/master/pool-fengshui/pool-fengshui
    [+] 自己维护的一个库: https://github.com/redogwu/windows_kernel_exploit
    [+] 我的github地址: https://github.com/redogwu/
    [+] 我的个人博客地址: http://www.redog.me