then switch it to a background process by simulating pressing
the HOME button.
We record the JGR number of system server process as
well as the number of running processes in Android. Figure 4
shows that the number of JGR changes between 1000 and
3000, which is small compared to the JGR threshold 51,200.
Also, the number of running processes is between 382 and 421.
There are 382 processes running on stock Android that has
not installed any third-party apps. Because the Android low
memory killer will automatically terminate processes, after
running all 100 top popular apps, we can see at most 39 apps
running in the system simultaneously. When one process is
terminated, its corresponding JGR entries will be released.
Observation 2. For all vulnerable IPC interfaces, the dura-
tion from an IPC call being invoked to the creation of a JGR
entry varies within a small value.
The duration can be expressed as Delay + Δ, where Delay
is a constant, which indicates the minimum latency between
IPC call request and JGR creation, and Δ is a variable where
Δ ≥ 0, which indicates the deviation of Delay. Since it
is difﬁcult to accurately measure Delay, we instead measure
the duration from execution of a vulnerable IPC method
to the creation of a JGR entry triggered by the method,
which does not impact the accuracy of measuring Δ values.
Figure 5 shows that the distribution of execution duration of
telephony.registry.listenForSubscriber() under a JGRE attack.
The entire attack process invokes the vulnerable interface
50,236 times. The execution time increases along with the
increasing number of the interface invoked, since more lookup
time is required to search the stored data. When the total
number of the invoked interfaces is smaller, the duration for
each execution is stable.
We measure the execution duration of all 54 vulnerable
interfaces, which are invoked 1,000 times individually. Since
different services have various process to generate a JGR
entry, instead of measuring the duration from the interface
being invoked to the creation of a new JGR entry, we only
measure execution duration of the interfaces. Figure 6 shows
cumulative distribution function (CDF) of execution for each
5.
Fig.
telephony.registry.listenForSubscriber() during an attack.
distribution
The
the
execution
of
duration
of
y
t
i
l
i
b
a
b
o
r
p
e
v
i
t
a
u
m
u
C
l
1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0
0
1000
2000
3000
4000
execute time in microseconds
5000
6000
7000
8000
Fig. 6. The cumulative probability of all the 55 vulnerable IPC methods’
execution time during 1000 IPC calls.
interface. We can see that the Δ of execution durations from
various interfaces are close.
A. JGRE Defense Mechanism
Our countermeasure includes three phases to defend against
JGRE attacks. First, we capture a victim process when the
number of its JGR entries exceeds an alarm threshold, which
is set according to our ﬁrst observation. When a process is
under attack, the number of new JGR keeps increasing and
the number of deleted JGR lags behind the newly created one.
Second, we record the time when the corresponding IPC
method is invoked and the time of JGR entry creation and dele-
tion. Based on our second observation, we can use recorded
data to infer each app’s impacts on the victim process’s
JGR creation. We calculate the maximum value of Δ of all
vulnerable services. Then, based on the time of IPC calls and
creation of JGR entries for each IPC interface, we can compute
all possible Delay values.
By iteratively choosing a value between 0 and the maximum
delay and evaluating which IPC call’s execution delay is
equal to the value, we can obtain different sets of IPC calls
consuming the same Delay. It counts the number of each
suspicious IPC interface’s calls and computes the total number
of IPC calls triggered by an app, and computes jgre score for
each app according to the number of IPC calls invoked by
it. A higher jgre score of an app indicates that it has more
impacts on victim process’s JGR creation. Algorithm 1 shows
the pseudo-code of JGR scoring algorithm. When there are
434
more than one app colluding to construct JGRE attacks, we
can still identify them since these apps must trigger much more
JGR entry creation than other apps to successfully launch the
attacks.
Algorithm 1 JGR Scoring Algorithm
Input: Δ, time of IPC calls, time of creation of JGR entries
Output:
jgre score of an App
IP CT ypes = type of IPC interfaces triggered by an App;
IP CCalls = time of IPC calls triggered by an App;
JGRAdds = time of JGR entry creation in victim process;
T imeLen = time interval of data collection;
JgreScore = 0 (cid:2) jgre score: number of max suspicious IPC calls
for each IPCType in IPCTypes do:
IP CCallOf T ype = IP CCalls.get(IP CT ype)
T hisT ypemax = 0
Delay[T imeLen] = 0
for each IPCTime in IPCCallOfType do:
for each JGRTime in JGRAdds do:
M inDelay = JGRT ime − IP CT ime
M axDelay = JGRT ime − IP CT ime + Δ
for each delay in [M inDelay, M axDelay] do:
Delay[delay]++;
end for
end for
end for
T hisT ypemax = maxOf (Delay[T imeLen])
JgreScore = JgreScore + T hisT ypemax
end for
return JgreScore
Note we cannot identify malicious apps by simply ﬁnding
the highest number of IPC calls since IPC calls may not trigger
the creation of new JGR entries. Instead, our countermeasure
accurately detects JGR consumption by inferring the execution
duration of each IPC call, which cannot be faked by adver-
saries.
Finally, we will continue to kill the top ranking apps until
the number of victim process’s JGR back to a normal value,
which is consistent with the Android system speciﬁcation [13].
In other words, if system resources are exhausted, we can kill
any apps to release the resources used by the apps. Our defense
mechanism is triggered when the processes or the system run
short of resources, similar to Android’s low memory killer
(LMK) [19]. However, it is more difﬁcult to track IPC calls
triggering JGR operations than to monitoring normal system
resources in Android LMK. Detailed comparison can be found
in Section VII.
B. Implementation
We present a prototype of our defense on an Nexus 5X
phone installed Android 6.0.1. Figure 7 shows the architecture
of our defense, which extends Android Runtime to collect JGR
creation information of each app and extends Binder driver to
collect IPC call information. We build a JGRE Defender as a
system service that analyzes the data collected from Android
Runtime and binder driver to identify malicious apps.
We extend Android Runtime to monitor the creation and
deletion of JGR entries triggered by each app. Once the
number of created JGR entries exceeds 4,000, it starts to record
the time of the events. It delivers the information to JGRE
defender when the number of new JGR entries exceeds 12,000.
The extended Android binder driver records the related data
435
(cid:21)(cid:20)(cid:22)(cid:22)(cid:1)(cid:28)(cid:30)(cid:28)(cid:26)(cid:20)(cid:16)(cid:20)(cid:25)(cid:30)(cid:28)(cid:1)(cid:15)(cid:26)(cid:26)
(cid:3)(cid:7)(cid:11)(cid:10)(cid:8)(cid:10)(cid:14)(cid:19)(cid:17)
(cid:2)(cid:15)(cid:15)
(cid:4)(cid:16)(cid:14)(cid:8)(cid:9)(cid:17)(cid:17)
(cid:2)(cid:29)(cid:29)(cid:15)(cid:16)(cid:21)
(cid:6)(cid:21)(cid:17)(cid:18)(cid:9)(cid:12)(cid:1)
(cid:6)(cid:9)(cid:16)(cid:20)(cid:10)(cid:8)(cid:9)(cid:1)
(cid:4)(cid:16)(cid:14)(cid:8)(cid:9)(cid:17)(cid:17)
(cid:4)(cid:25)(cid:22)(cid:22)(cid:18)(cid:16)(cid:29)
(cid:9)(cid:7)(cid:13)(cid:1)(cid:5)(cid:15)(cid:29)(cid:15)
(cid:9)(cid:7)(cid:13)(cid:6)
(cid:5)(cid:18)(cid:19)(cid:18)(cid:24)(cid:17)(cid:18)(cid:27)
(cid:1)(cid:5)(cid:19)(cid:13)(cid:18)(cid:10)(cid:12)(cid:9)
(cid:1)(cid:1)(cid:5)(cid:19)(cid:13)(cid:18)(cid:10)(cid:12)(cid:9)
(cid:3)(cid:9)(cid:11)(cid:15)(cid:16)(cid:1)(cid:5)(cid:14)(cid:8)(cid:13)(cid:1)(cid:4)(cid:12)(cid:6)(cid:7)(cid:8)
(cid:3)(cid:9)(cid:11)(cid:15)(cid:16)(cid:1)(cid:2)(cid:8)(cid:13)(cid:11)(cid:8)(cid:10)(cid:1)(cid:4)(cid:12)(cid:6)(cid:7)(cid:8)
(cid:3)(cid:20)(cid:24)(cid:17)(cid:18)(cid:27)(cid:1)(cid:5)(cid:27)(cid:20)(cid:31)(cid:18)(cid:27)
(cid:4)(cid:25)(cid:22)(cid:22)(cid:18)(cid:16)(cid:29)(cid:1)(cid:8)(cid:12)(cid:4)(cid:1)
(cid:4)(cid:15)(cid:22)(cid:22)(cid:1)(cid:5)(cid:15)(cid:29)(cid:15)
(cid:2)(cid:29)(cid:29)(cid:15)(cid:16)(cid:21)
(cid:14)(cid:24)(cid:23)(cid:25)(cid:17)(cid:20)(cid:33)(cid:18)(cid:17)
(cid:4)(cid:25)(cid:22)(cid:22)(cid:18)(cid:16)(cid:29)(cid:1)(cid:5)(cid:15)(cid:29)(cid:15)
(cid:10)(cid:25)(cid:17)(cid:20)(cid:33)(cid:18)(cid:17)
(cid:13)(cid:18)(cid:15)(cid:16)(cid:29)
(cid:11)(cid:18)(cid:32)(cid:1)(cid:10)(cid:25)(cid:17)(cid:30)(cid:22)(cid:18)
Fig. 7. JGRE defense architecture.
of IPC calls on from pid, to pid, target handle, to node and
timestamp. It creates a ﬁle /proc/jgre ipc log in memory to
store the data. Via the proc ﬁlesystem (procfs) [14], it can
quickly write and read the data between the Linux kernel
space and the user space. Also, we set the permission of the
ﬁle so that it can be only accessed by system service but not
third-party apps. JGRE Defender runs as a standalone service.
Android Runtime of a process notiﬁes JGRE Defender by
sending the JGR data if it is under attack. The defender reads
the IPC call data from /proc/jgre ipc log for further analysis.
The JGRE Defender uses Algorithm 1 to compute
jgre score for all apps. Then it issues a command of “am
force-stop” to kill
the number
of victim process’s JGR back to a normal value. Note that
although JGR data delivered from untrusted apps can be faked,
a malicious app cannot
trick JGRE Defender into killing
benign apps since the IPC data is reported by the kernel.
the top ranking apps until
C. Effectiveness Analysis
To validate the effectiveness of our scheme, we perform
two experiments. First, we verify if our scheme can effectively
defend against all the identiﬁed 54 vulnerabilities in system
services and 3 vulnerabilities in the prebuilt apps. Second, we
verify if our scheme can detect the JGRE attacks constructed
by multiple colluding malicious apps, when four colluding
malicious apps target on accessing different vulnerable system
services and one benign app generates a large number of
invulnerable IPC calls.
Detect Single Malicious App. We install top 100 apps
downloaded from Google Play marketplace. The malicious
app runs in the background. In the meanwhile, we use Mon-
keyRunner [12] to launch the benign apps. In this experiment,
we set Δ to the average value of all system services, i.e.,
1.8 ms. The experimental results are shown in Figure 8. Our
scheme can accurately detect this attack since the number
of suspicious IPC calls triggered by the malicious app is
signiﬁcantly larger than the number triggered by the benign
app.
Detecting Multiple Colluding Attacks. We construct an
attack with four colluding apps, each one leveraging one
vulnerable interface. In the meanwhile, a benign app launches
a large number of benign IPC calls. During the attacks, the
t
n
u
o
C
l
l
a
C
C
P
i
I
s
u
o
c
p
s
u
S
i
 10000
 8000
 6000
 4000
 2000
 0
Malicious APP
Top 1 Benign App
With defense framework
Stock Android
 5000
 4000
 3000
 2000
 1000
)
d
n
o
c
e
s
o
r
c
m
i
(
e
m
T
i
 10
 20
 30
 40
 50
Index of All Known Vulnerabilities
 0
 0
 100
 200
 300
IPC Payload (Kb)
 400
 500
Fig. 8. The number of IPC calls: malicious vs. benign Apps.
Fig. 10. The delays incurred by IPC call executions.
s
l
l
a
C
C
P
i
I
s
u
o
c
p
s
u
S
i
f
o
r
e
b