140第6章使用模糊测试来挖振漏洞
918212890625种可能值。测试如此庞大的输入集合，使用现在的技术是完全不可能的。最后，
有漏润的代码有时候即便被执行了，也可能检测不到，如发生在一个不重要的缓冲区中的内存损
坏。尽管有以上这些问题，模捌测试仍然十分有用。
相比整个信息安全社区，模糊测试在Android生态圈中并没有受到太多的关注。尽管有人公
开表示过对模糊测试Android系统有兴趣，但很少有人公开谈论他们具体做了哪些相关的工作，
屈指可数的几个公开演讲也仅仅关注单一且有限的攻击面。除此之外，截止到写作本书之时，还
没有直接针对Android的模糊测试框架。整体上来讲，Android设备上暴露的大量攻击面还远远
没有被测试
对目标应用做一次成功的模糊测试，需要完成以下4个步骤：
口选定目标；
口生成输入；
传递测试用例；
口监控前资。
模测试的首要步骤是确定一个目标，剩下的3个步骤很大程度上取决于第一个。选定目标
后，可以有多种不同的方式来生成输人，如通过对合法的输入进行变异处理，或者完全重新构造
整个输人。然后，这些构造的输人必须按照选定的攻击向量和攻击面传递给目标软件。最后，采
用监控崩溃的方式来识别异常行为。接下来儿节将深人讨论这4个步骤。
6.1.1选定目标
构造有效的模棚测试工其的首要步骤是选定一个目标。如来时间紧道，随使选择一个也未尝
不可，面用心的选择则需要考虑很多因素，如分析程序的复杂度、实现的难度、研究人员的经验，
攻击向量和攻击面等。一个熟悉、复杂且攻击面易于到达的对象是理想的测试目标。然面，多花
些精力去测试那些攻击面难以到达的对象能找到一般情况下发现不了的bug。在目标选择上所付
出精力的多少最终取决于研究人员，但是需要考虑最小的攻击向量和攻击面。由于Android的攻
击面非常大（第5章讨论过），其中有许多适合用来进行模棚测试的潜在目标。
6.1.2构造畸形输入
构造输人是模期测试过程中变化最多的一步。回忆前面介绍的内容，要遍历所有的输人集合，
即便对于16字节也是不可能的。为此，研究人员使用了几种不同类型的模棚测试方法在广阔的
输人空间中找到bug。对模测试工具的分类很大程度上取决于用来生成输入的方法。每种模棚
测试方法都各有优缺点，并且会产生不同的结果。除了模期测试方法有不同的类型，生成输入也
有两种不同的方法。
最流行的模翻测试类型叫做非智能模糊测试（dumb-fuzzing），在这种方式下，输入的生成并
不考虑输入的语义信息，耗费的开发时间很短，因为不要求研究人员深人理解输人数据。然面，
这也意味着在分析发现的bug时，需要更多的努力才能理解其根本原因。从本质上来说，节省的
---
## Page 157
6.1模溯测试的背景141
研究成本很多只是被延迟到了发现潜在安全问题之后。采用非智能模糊测试的方式生成输入，安
全研究人员将各种不同的变异（mutation）技术用在有效的输人上。最常见的变异手段包括将输
入数据中的一个随机字节改为一个随机值等。令人惊讶的是，基于变异的非智能模棚测试发现了
非常多的bug，无怪乎它会成为最流行的模棚测试类型。
智能模糊测试（smar-fuzzing）是另一种流行的模棚测试技术。从名字就可以看出，智能模
期测试在输人生成上需要更加智能一些。虽然不同的情形下智能的程度不一，但理解输入的数据
格式都是最重要的。智能模糊测试尽管初期需要更多的投人，但会在很大程度上受益于研究人员
的直觉和分析结果。例如，在消除不必要地遍历不感兴趣的代码路径时，学习解析器的代码结构
可以极大地提高代码的覆盖率。虽然智能模期测试也可以用变异的方式来生成输人，但是它主要
依赖生成式方法（generativemethod），这种方法通常使用基于输人数据格式的自定义程序或语法，
从零开始生成整个输入。可以说，智能模测试比非智能模翻测试更有可能发现安全漏洞，尤其
是对于那些经受住智能模棚测试的比较成熟的目标。
两种模糊测试方法可以混合起来使用，这样可以生成任何一种单一方法不可能生成的输入。
将输人解析成不同的数据结构，然后在不同的逻辑层面进行变异，会是一种强大的技术。一个很
好的例子是，用一个生成的子树来替换DOM树的一个或几个HTML节点。一个使用解析器的混
合方法能够将模测试限定在输人中的一些选定字段或区域。
无论采用哪种模期测试方法，研究人员都会使用各种各样的技术来提高输人生成的有效性。
一个小的技巧是，测试整数输入时优先使用更容易造成问题的输人，如使用较大的2的乘方。另
外一个技术是，尽可能去做那些容易产生问题的变异，面避免那些不容易产生问题的变异。值得
注意的是，不要修改消息完整性的数据或一些幻数（MagicNumber），否则会降低代码覆盖率。
此外，需要对一些上下文相关的长度值进行调整，以绕过目标软件中的健全性检查。如果发现的
缺陷无法解释，就意味着测试失去意义，只能造成资源的浪费。以上这些都是模糊测试工具开发
者在生成输人的时候需要考虑的问题。
6.1.3处理输入
畸形输人构造完成后，下一步就是把这些输入交给目标软件去处理。如果目标软件不处理这
些输人，就意味着目标代码没有被测试，也就不可能找到bug。处理输人是模测试的最大优
势—自动化的基础。目标是能够自动地、反复地把构造的输人传递给目标软件。
输入的传递方式取决于目标软件的攻击向量。模糊测试一个基于socket的服务需要发送数据
包，还可能需要建立和关闭会话。测试一个文件格式需要写出并打开构造的输人文件。寻找客户
端软件的漏洞则需要自动进行复杂的用户交互，如打开一封电子邮件。这仅仅是一些例子。几乎
所有依赖于网络的通信都有暴露潜在漏洞的可能。当然有更多的攻击方式存在，每种都有自身的
输人处理考量。
类似于生成输入，也有提高处理输人效率的方法。一些模糊测试工具会通过像攻击者一样传
递输人来完全模拟一次攻击，另一些则会让目标软件在调用栈的底层处理输人来提高性能，还有
---
## Page 158
142第6章使用模糊测试来挖报漏洞
的会避免往很慢的水久存储设备写入，面将数据留在内存中。这些技术都能大幅提高测试速度，
但也都有代价。在底层做模棚测试得到的结果可能在真实的攻击环境中无法重现，这样就产生了
误报。遗憾的是，有些发现并不是安全间题，处理起来非常枯燥繁项。
6.1.4监控结果
模测试的第四步是监控测试结果。如果不去观测那些非预期行为，就不可能知道你是否
发现了一个安全问题。一个测试可以得到很多可能的结果，如成功的处理、中止、程序或系统
崩溃，以及测试系统的永久破坏等。如果不考虑那些异常情况，则会导致你的模期测试工具停
止运行，这样就无法做到无需人为参与。记录和报告统计数据有助于快速了解模糊测试工具的
运行状况。
就像构造输入和处理输人那样，也可以使用很多监控结果的选项。一种快速且粗略的方式是
只去监控那些系统日志里的非预期事件。测试过程中发生崩溃时，服务会停止响应或者关闭连接，
观测这些事件是另一种监控测试的方式。可以使用调试器来获取崩溃时更为细粒度的信息（如寄
存器的值），也可以使用插桩工具（如valgrind）来观测非正常行为。函数截获（APIhooking）
也是一种有用的技术，尤其是使用模棚测试来寻找非内存破坏漏洞时。如果这些方法全部失效，
你可以构建自定义的软硬件来克服几乎所有在监控上遇到的问题。
6.2Android上的模糊测试
Android系统上的模棚测试与其他Linux系统上的非常相似。如果你熟悉UNIX工具，如
ptrace、管道、信号，以及其他POSIX标准概念，将会非常有帮助。得益于操作系统的进程隔
离特性，对一个程序做模测试时，对整个系统产生副作用的风险是相对较小的。使用这些工具
可能会开发出带有集成调试器等的高级模翻测试工具。尽管有这些便利，对Android设备进行模
关测试依然存在一些挑战
模概测试，或者更广泛的软件测试，是一项复杂的课题。很多不确定的因素会使测试产生错
误。对于Android，那些非Linmux的组件使这一复杂度又提高了。软硬件的看门狗还可能会让设
备重启。为了实现最小权限原则，Android系统中的程序通常会互相依赖，如果去测试那些有依
赖关系的程序，则可能导致多个进程前溃。在底层硬件中实现的功能性依赖（如视频解码），会
导致系统锁定或程序发生敌障。上述问题的发生都将导致模棚测试终止。因此，要想开发一个健
壮的模棚测试工具，就必须解决好这些问题都：
Android设备还面临着另外一个问题：性能。大多数Android设备要明显慢于传统的x86机
器。即便使用顶级配置的宿主机，AndroidSDK中提供的仿真器通常比物理设备更慢。尽管充分
健壮和自动化的模测试工具可以在无人监管的情况下很好地运行，但是较低的性能依然会影响
测试效率。
少数设备还会有串口，但申口速度更慢。这些通信方式在传输文件或频紧发送命令的时候性能都
---
## Page 159
6.3对BroadcastReceiver进行模糊测试143
不是很好。在ARM设备的节能模式下，如屏幕关闭时，Wi-Fi的表现将变得非常精糕。鉴于这
些问题，如果能将传入和传出设备的数据量减到最小，那将会是非常有好处的。
尽管有这些性能问题，直接在Android真机上进行模拟测试还是要比使用仿真器好得多。就
像前面提到的，物理设备通常运行的是OEM定制的Android系统。如果模糊测试的目标代码被
厂商修改过，那么测试结果将会不同。即便厂商没有修改代码，物理设备依然会有一些仿真器所
没有的代码，如外设的驱动和专有软件等。模糊测试的结果可能会跟设备或设备系列相关，因此
在仿真器上进行模拟测试是不够的。
6.3对BroadcastReceiver进行模糊测试
第4章讲过，BroadcastReceiver和其他进程间通信（IPC）端点均为应用中有效的输入点，
它们的安全性和健壮性往往被忽视。无论第三方应用还是官方Android组件都可能存在这样的问
题。这一节将会介绍一个针对BroadcastReceiver的非常初级和简单的模糊测试方法：空Intent
fuzzing。这一技术最早是iSEC Partners 公司于 2010 年在 IntentFuzzer 中实现的。尽管除了
IntentFuzzer的最初发布，这一方法没有做得到什么宣传推广，但是它可以帮你快速找到目标，
并且引导你开发更专注、更智能的模棚测试工具。
6
6.3.1选定目标
首先，你需要找到某款应用或整个系统中哪些BroadcastReceiver已经被注册。你可以使用
PackageManager类来查找系统中已经安装的应用，以及它们导出的接收者.下面是IntentFuzzer
中的一个代码片段（有少量修改）：
protected ArrayList getExportedComponents ()(
PackageManager pm = getPackageManager () /
for (PackageInfo pi : pm
[ Packagelanager , GET_RECEIVERS)(
-getInstalledPackages (PackageManager , GET_DISABLED_COMPONENTS
PackageItemInfo items[1 = nu11:
if (items := nu11)
for (PackageItemInfo pii : items)
found. add(nev Componentrame (pi paekagetiame, pi.1 mame)) :
return found;
getPackageManager 方法返回—个 Packageanager 对象 pm。然后调用 getInstalled
Packages 方法，在过滤选项中只选择Broadcast Receiver，得到的返回数组found 中包含了包
名和组件名。
还可以使用Drozer来列举目标应用或整个目标设备中的BroadcastReceiver，类似于第4章
的介绍。下面的代码片段分别列举了系统中的所有 Broadcast Receiver和应用com.yougetitback.
androidapplication, virgin.mobile 中8的9 Broadcast Receiver:
---
## Page 160
144第6章使用模糊测试来挖振漏洞
dz> run app .broadcast.info
Package: android
Receiver: con.android.server.BootReceiver
Permission: nul1
Receiver: com.android.server.MasterClearReceiver
Permission: android.permission.MASTER_CLEAR
Package: com,anazon.kindle
Receiver: com.amazon.kcp.redding.MarketReferralTracker
Receivez: com,amazon .lkcp recommendat.ion, CampaignlfebView
Permission: nu11
Receiver: com,amazon .kindle.StandaloneAccountAddTraciker
Permission: nul1
Permission: nul1
Receiver: com,amazon.kcp.reader.ui .StandaloneDefinitionContainerModule
Permission: nul1
 + *
dz> run app.broadcast.info -a \
Package: com,yougetitback.androidagplication,virgin.mobile
com.yougetitback,androidapplicatlon.virgin.moblle
Receiver: com-yougetItback,androidapplication,eettings .main Entranc...
Permission: android.permission.BIND_DEVICE_ADMIN
Receiver: com.yougetitback.androidapplication.MyStartupIntentReceiver
Receiver: com.yougetitback.androidapplication.SmsIntentReceiver
Permission: nul1
Receiver: com-yougetitback.androidapplication. IdleTineout
Permission: nul1
Receiver: com-yougetitback.androidapplication. PingTimeout
Permission: nul1
6.3.2生成输入
想要理解给定输入（比如一个Intent接收者）期望或者能够处理什么，通常需要拿到一个基
本的测试样例，或者去分析接收者本身。第4章逐步分析了一个目标应用，包含一个特别的
BroadcastReceiver在内。只要知道进程间通信的本质，无须花费很多时间就可以实现目标。你只
需要构造一个不包含其他任何属性（extras、flag和URI等）的显式Intent对象。参照IntentFuzzer
中的以下代码片段：
protected int fuzzBR(List comps){
int count = 0;
for
(int 1 = 0: i < comps.size(): i++) (
in.setComponent (comp8-get (1)) ;
Intent In = new Intent();
在上述代码片段中，fuzzBR方法接收一个组件名列表作为参数并依次选代每一个组件名，
每次选代都会创建一个Intent对象并调用setComponent将相应组件设置为发送目标。
---
## Page 161