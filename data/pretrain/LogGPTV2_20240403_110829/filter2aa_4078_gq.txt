系统还原至正常操作状态 。
• 应急开放状态允许用户 绕开失败的安全控制 ， 此时用 户 获得的特权过高 。
在大多数环境中 ， 因为能够防止对信息和资源的未授权访问， 所以故障防护是'恰当的故障状态。
软件应当恢复故障防妒状况 ， 这意味着只关闭应用程序或停止整个主机系统的操作。 Windows
操作系统中 出现的蓝屏死机但SOD)就是这种故障响应方式的一个示例， 不过它实际上被称为 STOP
错误。 尽管操作系统努力防止 STOP 错误， 但是在出现不安全的和非法的活动时仍然会发生 STOP
错误。 不安全的和非法的活动可能包括: 应用程序直接访问硬件， 企图绕开安全控制检查， 或者一
第 20 章 软件开发安全
个进程擅 自 使用其他进程的 内存空间。 一旦出现非法操作， 系统环境就不再可信。 因此， 此时 OS
不会继续支持不可靠和不安全的操作环境 ， 而是启 动作为安全防护响应的 STOP 错误。
一旦出现安全防护操作， 编程人员就应当考虑、接下来发生的活动。 此时， 可能的选项是: 停 留
在安全防护状态， 或者 自 动重启系统。 前一个选项要求管理员人工重启系统并监督这个过程， 通过
使用启动密码就可以实施这个动作 。 后一个选项并不要求人工干预， 系统能够 自 己还原至正常运作
状态， 但仍存在 自 身特有的 问题。 例如， 必须约束系统重启至非特权状态。 换句话说， 系统的重启
应当不执行 自动的登录操作， 而是提示用户提供授权的访 问 凭证 。
警告 :
在有限的一些环境中 ， 实现应急开放的故障状态可能史为合适。 这种方式有时适用 于多 层安全
系统中较低层的组件。 应急开放系 统的使用应当极为谨慎。 部署使用 这种故障模式的系统之前， 必
须 明确验证用 于该模式的业务要求。 如果验证通过， 那 么在系统故障时需要确保能够采用 其他适当
的控制 来保护组织 的资源。 希望所有安全控制 都利用 应 急开放方式的情况是极为 罕见的.
即使正确设计了 安全性并将之嵌入软件， 但是为了支持更简单的安装， 所设计的安全性往往会
被禁用 。 因此， IT 管理员 负责打开和配置与特定环境需求匹配的安全性是非常普遍的。 如图 20. 1
所示， 维护安全性常常需要权衡用户友好性与功能性。 此外 ， 如果添加或增加安全性， 那么也会增
加成本、 增加行政管理开销和 降低生产率/吞吐量。
安全性
功能性 用户 友好性
图 20.1 安全性、 用户友好性和功能性之间的关系
20. 1 .2 系统开发生命周期
如果在系统或应用程序的整个生命周期 内都进行计划和管理， 那么安全性是最有效的 。 管理员
利用项 目 管理使项 目 的开发遵循 目 标， 并且逐步实现整个产品 的 目 的。 通常， 项 目 管理使用生命周
期模型进行组织， 以便指导开发过程。 使用正规化的生命周期模型有助于确保良好的编程实践以及
在产品开发的每个阶段都嵌入安全性。
所有系统开发过程都应当具有几个共用的活动。 虽然可能没有必要共享相同的名字， 但是这些
核 心的动作对于开发健全的、 安全的系统来说都是必不可少的。 下 面列出了这些动作 :
• 概念定义
• 功能需求确定
• 控制规范的开发
• 设计审查
• 代码审查走查
• 用户验收测试
593
594
CISSP 官方学习指南(第 7 版)
• 维护和变更管理
本章稍后的 " 生命周期模型" 部分将分析两个生命周期模型， 并且说明如何在实际的软件工程
环境中应用这些活动 。
注意 :
注意到下面这一点十分重要: 系统开发生命周期中使用 的术语在不 同 的模型 、 不 同 的发行产品
之间是有区别的。 不必花费太多 的 时间担心本书或可能遇到 的其他文献中使用 的术语是否有 区别。
参加 CISSP 考试时 ， 深入理解处理过程如何工作以及支样安全系统开发的基本原理是极其重要的。
也就是说， 与 任何规则 一样， 都可能存在 一些例外。
1 概念定义
系统开发的概念定义阶段涉及为系统创建基本的概念声明 。 简而言之， 是由所有利益相关方(开
发人员 、 客户和管理人员)协商的简单声明， 规定了项 目 用途 以及系统大体需求。 概念定义是一份非
常高级的用途声明， 仅包括寥寥一两段话。 如果阅读项 目 的详细总结， 那么会看到概念声明是一个
摘要或简介 ， 它使得外行可 以在短时间内对项 目 具有高度概括性的理解。
在系统开发过程的所有阶段参考概念声明是很有帮助的。 开发过程错综复杂的细节常常使项 目
的最高 目 标变得模糊 不清 。 简 单地定期阅读概念声 明 能够帮助开发团 队重新瞄准 自 己的 目 标。
2. 功 能需求确定
一旦所有的利益相关方都同意概念声明， 那么开发团队就该着于开始功能需求确定过程。 在这
个阶段， 具体的系统功能会被列出来， 并且开发人员开始考虑系统的这些部分应当如何互相协作，
以便满足功能需求。 从这个阶段得出 的是功能需求文档 ， 它们列出了 具体的系统需求。
与概念声明一样， 在工作进入下一阶段之前， 确保所有利益相关方都同意功能需求文档是十分
重要的 。 当功能需求确定过程最终完成时， 功能需求文档不应当被简单地束之高阁而且落满尘土，
整个开发团队都应该在全部阶段不断地参考这份文档， 以确保项 目 正常进行。 在最后的测试和评估
阶段， 项 目 管理者应当使用这份文档作为核对清单 ， 确保所有功能需求得到满足。
3. 控制规范的开发
树立起安全意识的组织还会确保从最早的开发阶段开始就将恰当 的控制设计到所有系统中。 在
生命周期模型中 ， 具有控制规范的开发阶段常常是非常有用 的 。 这个阶段在功能需求开发阶段后不
久开始， 并且往往在设计和审核阶段继续进行 。
在控制规范的开发过程中 ， 从许多安全角度对系统进行分析是很重要的。 首先， 恰当的访问控
制必须被设计到所有的系统中 ， 从而确保只有授权的用户被准许访问系统， 井且不允许他们超出授
权级别 。 其次， 系统必须通过使用正确的加密和数据保护技术来维护关键数据的机密性。 再次， 系
统不仅应当提供审计跟踪来强制实施个人的可问 责性， 而且应当提供对非法活动的检测机制。 最后 ，
根据系统的危险程度 ， 必须解决可用性和容锚 问题。
需要记住的是， 将安全性设计到系统中不是一次性过程， 并且必须主动进行。 系统经常在设计
时缺乏安全性计划， 并且随后开发人员试图利用正确的安全机制更新系统。 遗憾的是， 这些机制慢
了一拍， 并且没有完全与系统设计集成在一起， 这就造成了裂口性的安全漏洞。 此外， 在每次对设
计规范进行重大改动时应当再次参考安全需求。 如果系统的主要组件发生了变化， 那么很可能也要
第 20 章 软件开发安全
对安全性需求进行改动 。
4 设计评审
一旦完成功能需求确定和控制规范开发过程， 那么系统设计人员就可以开始工作了 ! 在这个漫
长的过程中， 设计人员要正确地确定系统的不同部分将如何相互操作以及如何布置模块化的系统结
构。 此外， 在这个阶段， 设计管理团 队通常为不同的团队设置具体的任务， 并且布置编码里程碑的
初步完成时间 。
设计团队完成正式的设计文档后应当与利益相关方召开评审会议， 确保每个人都同意此过程在
按部就班地进行， 在 向 着成功开发具有所期望功能的系统的方向迈进 。
5. 代码审查走查
一旦利益相关方为软件设计提供了支持， 那么软件开发人员就可以开始编写代码。 在编码过程
的不同里程碑， 项 目 经理应该安排几次代码审查走查会议。 这些技术性会议通常只 涉及开发人员 ，
他们根据特定模块的代码副本进行走查， 寻找逻辑流中的问题或其他设计/安全性缺陷。 这些会议有
助于确保不同开发团 队开发的代码依据规范执行 。
6. 用 户验收测试
在经过多次代码审查和漫长时间之后， 就会到达开发人员写下最后一个分号并表示系统完成的
结束点。 很多经验丰富的软件工程师都知道， 系统永远不可能完成。 现在要进入的是系统测试复审
阶段。 最初， 大多数组织 由开发人员执行系统的初始测试 ， 从而找出一些明显的错误。
一旦这个阶段完成， 代码可能会转移到部署。 与任何关键的开发过程一样， 保存-份书面的测
试计划和测试结果是非常重要的， 可供将来审查。
7. 维护和变更管理
一旦系统可以操作 ， 面对操作、 数据处理、 存储和环境需求的改变， 为 了确保持续运作 ， 有必
要进行多样的维护工作。 拥有一支有经验的、 能够处理常规或意外维护任务的支持队伍是必不可少
的 。 同样重要的是， 任何代码的变更都要通过正式的变更管理流程来进行， 如第 l 章所述的 " 通过
原则和策略来进行安全治理"。
20. 1 .3 生命周期模型
你会从许多较为成熟的工程学科(例如， 土木工程、 机械工程和 电子工程)从业者那里听到很多
意见， 其中一种说法就是软件工程根本不是工程学科。 事实上， 他们坚持认为， 软件工程仅仅是一
些混沌过程的组合， 有时由于某种原因经过管理成为可工作的解决方案 。 实际上， 在 目 前的开发环
境 中 出现的一些软件工程只 是依靠 " 胶带和鸡 肉丝" 组合在一起的引 导编码。
然而， 可以从采用更正式的生命周期管理过程中看到主流软件工程行业的成长。 毕竟， 把一门
古老的学科， 如土木工程的过程 ， 和一门只有几十年历史的产业学科进行比较是不公平的 。 在 20
世纪 70 年代和 80 年代， 先驱者(如 认1inston Royce 和 Barry Boehm)提出软件开发生命周期(SDLC)
模型来帮助指导软件开发实践走向形式化的过程。 在 1 99 1 年 ， 软件工程研究所介绍的能力成熟度模
型 ， 描述了过程的组织保证， 因 为他们朝着将固体工程原则纳入软件开发的过程。 在下面的章节中，
595
CISSP 官方学 习指南(第 7 版)
我们将看看这些研究产生的成果。 合适的管理模型应该能够改善最终的产品。 然而， 仅仅有 SDLC
方法论是不够的 ， 项 目 可能无法满足企业和用户的需求。 所以， 验证软件开发生命周期模型是否正
确实施以及是否适合环境是非常重要的。 此外， 实施 SDLC 模型的初始步骤之一包括获得管理层的
批准。
1 瀑布模型
瀑布模型最初是由 Winston Royce 在 1970 年开发的， 它试图将系统开发的生命周期看作一系列
反复活动。 如图 20.2 所示， 传统的瀑布模型有 7 个开发阶段。 在每个阶段完成时， 项目会进入下一
个阶段。 正如相反箭头所示， 现代的瀑布模型准许开发返回到先前的阶段， 从而纠正在后续阶段发
现的错误。 这通常被称为瀑布模型的 反馈循环特征(feedback loop characteristic) 。
596
图 20.2 瀑布生命周期模型
瀑布模型是在考虑返回先前阶段以纠正系统错误的必要性的情况下， 建立软件开发过程的模型