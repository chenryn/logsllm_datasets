(cold start), and will not aﬀect the following launching of the app (warm start)
if the app is not killed due to low memory. Moreover, unlike Morula [32], this
delay only applies to apps with our protection, and does not aﬀect other apps.
Runtime Overheads. Blender provides self-randomization capability to
apps and the randomization process happens at the app’s startup time, it will
not aﬀect the runtime performance. We use the Quadrant Standard Edition
v2.1.1 to measure the general purpose benchmark for CPU, memory, I/O, 2D,
and 3D graphics. Because we cannot get the source code of the benchmark tool,
we use apktools [52] to repackage the app and add the Blender protection
for our evaluation. Table 4 illustrates the benchmark results. Because of startup
time randomization, the benchmark results are nearly same.
Memory Overheads. We also evaluate the memory usage at runtime for
the original app, app with re-delegation, app with BlenderLRM only, and
app with BlenderLRM and BlenderART. We create a script to monitor the
476
M. Sun et al.
/proc/[pid]/status ﬁle which contains all memory information at runtime.
Figure 9 shows the VmRSS sizes during the start time to 2000 ms. VmRSS (vir-
tual memory resident set size) represents the portion of memory occupied by
a process in memory. At the ﬁrst 250 ms, the VmRSS value increases from a
low level and then becomes stable. The VmRSS values of BlenderLRM only
and BlenderLRM/ART together are nearly same at runtime, and introduces
about 5513 kB (11.5 %) overhead. Blender incurs less memory overhead com-
pared to previous mitigation solution Morula [32] by patching the Android which
introduces 13 MB for each app.
Battery Overheads. Battery consumption is important for mobile devices.
Because Blender conducts randomization at the startup time of an app,
Blender will consume more battery than original settings. We conduct the
following experiments to measure the battery overhead of the Blender system.
Firstly, we use a fully charged device (Nexus 5) and set screen as “always on”.
Then, we launch and close the experiment app (the same app in the performance
evaluation experiments) for 500 times with 10 s interval. For each execution, we
record the current time and the current battery capacity. For the Blender evalu-
ation, we use a fully charged device to execute the experiment app with Blender
installed and record the battery capacity. For both experiments, we obtain the
battery capacity by reading the /sys/class/power supply/battery/capacity
ﬁle. Figure 10 illustrates the remaining battery capacities after multiple num-
ber of executions for two apps, and we plot their linear ﬁt as two dashed lines.
There is only 1 % more power consumption after 500 executions for about 6400 s
which is comparable with the Morula system. Therefore, the battery overhead
is negligible for normal users.
6 Discussion
Limitations of Caching Patched ART Code. To balance security gain and
performance overheads, our design caches patched ART code (i.e., boot.oat) in
a pool. Although attackers can try multiple times to guess the oﬀsets of the
boot.oat ﬁle in the pool, they still cannot obtain the current oﬀset by previ-
ous executions or by other side channels. However, this technique decreases the
entropy of the randomization. To achieve high entropy randomization, devel-
opers can disable utilizing cached code and conduct randomization at runtime.
Although this may introduce more startup overhead (less than two seconds), this
is still acceptable for apps with high security requirements. Also we may random-
ize the boot.oat ﬁle at runtime, such as when the app is idle in the background,
to reduce the startup time delay. However, this may need deep understanding of
the app’s logic and more involvement from the app developer’s side.
Blender on Other Architectures. Because most mobile devices are based
on the ARM architecture (99 % according to report [3]), our ret2art attack and
Blender system are implemented on an ARM-based device. In fact, the lat-
est Android version support other architectures including x86 and MIPS. The
Blender: Self-randomizing Address Space Layout for Android Apps
477
only diﬀerences are architecture speciﬁc source code. Therefore, the weakness
of ASLR introduced by zygote process creation model still exists. And one can
easily write code to initiate ret2art attack on those platforms. For the Blender
system, one can port to other architectures by translating architecture speciﬁc
ARM assembly code to the corresponding architecture.
Another limitation of current
Randomization within Shared Library.
system is that Blender does not randomize the functions inside a library. This
means that if there is a memory leak vulnerability, attackers could know the
base address and compute oﬀsets of ROP gadgets to launch an ROP attack.
To overcome this potential security problem, we can use method proposed as
binary stirring [51] to randomly rewrite the binary code blocks of loaded libraries.
However, this method requires disassembling, rewriting and assembling all loaded
libraries at launch time of an app. This will introduces considerable overheads.
Therefore, we leave it as our future work.
7 Related Work
Security problem in memory is one of the oldest issues in computer security. Pre-
vious studies [28,46,49] summarize the attack and defense solutions on memory
security. Our work focuses on attacking and protecting weakened ASLR mecha-
nism on Android.
Attacks and Defenses of ASLR Mechanism. Because modern operat-
ing systems have implemented/deployed ASLR and DEP defense mechanisms
by default [24,30,47], attackers try many bypassing techniques from diﬀerent
perspectives. Several works [34,42] focus on bypassing by brute-forcing method.
Moreover, leaked pointers, type confusion and use-after-free bugs can be also
exploited [40,41]. Furthermore, by repeatedly abuse a memory disclosure, attack-
ers can map an application’s memory layout on-the-ﬂy with dynamically dis-
covered gadgets [43]. There are many return oriented programming techniques
described in several papers [34,53]. Moreover, some researchers [22,51] proposed
to protect memory by introducing high randomization entropy.
Attacks and Defenses on Android. Compared to traditional desktop oper-
ating system, mobile OS have their domain-speciﬁc architecture design which
introduces new attack surfaces. For Android, many researches discuss about
security issues on permission mechanism [19,29,31] of Android. In addition, some
work exploit underlying system components on Android [15,21,27,35,37,38,48,
50,57]. Because there are a number of malware on Android, Zhou et al. [59] pro-
vide the characterization and evolution of Android malware. In addition, some
systems propose to prevent [45] or detect malware [44]. Moreover, researchers
also propose both static analysis systems [26,33,56,58] and dynamic analysis
systems [25,55] to assist malware researchers to understand the malicious logic.
Mitigating ASLR on Android. Because of the limitations of mobile system,
the design and implementation of ASLR mechanism is rather weak. Retouch-
ing [17], Morula [32] and LR2 [18] are three systems which discuss attacking
478
M. Sun et al.
techniques and provide mitigation solutions. Retouching can randomize pre-
linked code when deploying Android applications. However, Retouching does not
resolve the issue of uniform memory layout introduced by the zygote process cre-
ation model. Morula proposes a patch for Android source code to randomize all
layout of apps after forking from zygote and also introduces low overheads. LR2
proposes a leakage-resilient layout randomization method by introducing trans-
formations as passes on compiler. However, they all have a major deployment
issue. Current systems needs to modify Android source code to achieve random-
ization functionality. Users should replace original ﬁrmware with the customized
system. Moreover, the system should keep up with the latest Android version
with new features and bug ﬁxes. Hence, because of the deployment issues, both
users and developers cannot easily adopt this mitigation solution. Our work
provides a non-invasive methodology for both developers and users.
8 Conclusion
In this paper, we show that the ASLR protection on Android is weakened due to
the zygote app creation model. Moreover, we demonstrate a newly discovered
attack surface introduced by the ART runtime, and present a novel way to
exploit the weakness of the ASLR protection and this new attack surface. Then
we propose a non-invasive user-level solution called Blender which does not
need framework modiﬁcation. Blender self-randomizes address space layout
for apps, hence raising the bar for successfully bypassing the weakened ASLR
protection on Android. We discuss the design, implementation, and present the
eﬀectiveness and performance overhead of our system.
References
1. Adobe Flash Use-after-free Vulnerability. http://cve.mitre.org/cgi-bin/cvename.
cgi?name=CVE-2015-3108
2. Android plugin for gradle. https://developer.android.com/intl/ru/tools/building/
plugin-for-gradle.html
3. Arm designs
one
of
http://www.
bloomberg.com/bw/articles/2014-02-04/arm-chips-are-the-most-used-consumer-
product-dot-where-s-the-money
the world’s most-used
products.
4. CVE-2013-0912.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-
0912
5. CVE-2015-1233.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-
1233
6. Distribution of android platform versions. https://developer.android.com/about/
dashboards/index.html
7. Ropgadget
- gadgets ﬁnder and auto-roper. http://shell-storm.org/project/
ROPgadget/
8. Samsung galaxy KNOX android browser RCE. https://www.exploit-db.com/
exploits/35282/
9. Stagefright (bug). https://en.wikipedia.org/wiki/Stagefright (bug)
Blender: Self-randomizing Address Space Layout for Android Apps
479
10. codegen util.ccﬁle in AOSP. https://android.googlesource.com/platform/art/+/
android-6.0.0 r26/compiler/dex/quick/codegen util.cc
11. dex preopt libart.mk ﬁle in AOSP. https://android.googlesource.com/platform/
build/+/android-6.0.0 r26/core/dex preopt libart.mk#36
12. quick entrypoints arm.S ﬁle
in AOSP. https://android.googlesource.com/
platform/art/+/android-6.0.0 r26/runtime/arch/arm/quick entrypoints arm.S
13. VLC media player 2.0.4 suﬀers from buﬀer overﬂow. https://trac.videolan.org/vlc/
ticket/7860
14. Afonso, V., Bianchi, A., Fratantonio, Y., Doup´e, A., Polino, M., de Geus, P.,
Kruegel, C., Vigna, G.: Going native: using a large-scale analysis of android apps
to create a practical native-code sandboxing policy. In: NDSS (2016)
15. Bianchi, A., Corbetta, J., Invernizzi, L., Fratantonio, Y., Kruegel, C., Vigna, G.:
What the app. is that? deception and countermeasures in the Android user inter-
face. In: SP (2015)
16. Blazakis, D.: Interpreter exploitation. In: WOOT (2010)
17. Bojinov, H., Boneh, D., Cannings, R., Malchev, I.: Address space randomization
for mobile devices. In: WiSec (2011)
18. Braden, K., Crane, S., Davi, L., Franz, M., Larsen, P., Liebchen, C., Sadeghi, A.-R.:
Leakage-resilient layout randomization for mobile devices. In: NDSS (2016)
19. Bugiel, S., Davi, L., Dmitrienko, A., Fischer, T., Sadeghi, A.-R., Shastry, B.:
Towards taming privilege-escalation attacks on android. In: NDSS (2012)
20. Chamberlain, S., Taylor, I.L.: The GNU linker (1991)
21. Chen, Q.A., Qian, Z., Mao, Z.M.: Peeking into your App without actually seeing
it: UI state inference and novel android attacks. In: USENIX Security (2014)
22. Chen, Y., Wang, Z., Whalley, D., Lu, L.: Remix: on-demand live randomization.
In: CODASPY (2016)
23. Solar Designer: return-to-libc attack. Bugtraq, August 1997
24. Durden, T.: Bypassing PaX ASLR protection. Phrack Mag. 59, 9 (2002)
25. Enck, W., Gilbert, P., Han, S., Tendulkar, V., Chun, B.-G., Cox, L.P., Jung, J.,
McDaniel, P., Sheth, A.N.: Taintdroid: an information-ﬂow tracking system for
realtime privacy monitoring on smartphones. In: TOCS. ACM (2014)
26. Enck, W., Octeau, D., McDaniel, P., Chaudhuri, S.: A study of android application
security. In: USENIX Security (2011)
27. Enck, W., Ongtang, M., McDaniel, P.: Understanding Android security. IEEE
Secur. Priv. 7(1), 50–57 (2009)
28. Erlingsson, U.: Low-level software security: attacks and defenses. In: Aldini, A.,
Gorrieri, R. (eds.) FOSAD 2007. LNCS, vol. 4677, pp. 92–134. Springer, Heidelberg
(2007)
29. Felt, A.P., Wang, H.J., Moshchuk, A., Hanna, S., Chin, E.: Permission re-
delegation: attacks and defenses. In: USENIX Security (2011)
30. Giuﬀrida, C., Kuijsten, A., Tanenbaum, A.S.: Enhanced operating system secu-
rity through eﬃcient and ﬁne-grained address space randomization. In: USENIX
Security (2012)
31. Grace, M.C., Zhou, Y., Wang, Z., Jiang, X.: Systematic detection of capability
leaks in stock android smartphones. In: NDSS (2012)
32. Lee, B., Lu, L., Wang, T., Kim, T., Lee, W.: From Zygote to Morula: Fortifying
weakened ASLR on android. In: SP (2014)
33. Lu, L., Li, Z., Wu, Z., Lee, W., Jiang, G.: CHEX: statically vetting Android apps
for component hijacking vulnerabilities. In: CCS (2012)
34. M¨uller, T.: ASLR smack & laugh reference. In: Advanced Exploitation Techniques
(2008)
480
M. Sun et al.
35. Mulliner, C., Oberheide, J., Robertson, W., Kirda, E.: Patchdroid: scalable third-
party security patches for android devices. In: ACSAC (2013)
36. Peles, O., Hay, R.: One class to rule them all: 0-day deserialization vulnerabilities
in Android. In: WOOT (2015)
37. Razeen, A., Wu, B., Cheemalapati, S.: Spandex: Secure password tracking for
Android. In: USENIX Security (2014)
38. Ren, C., Zhang, Y., Xue, H., Wei, T., Liu, P.: Towards discovering and under-
standing task hijacking in Android. In: USENIX Security (2015)
39. Roemer, R., Buchanan, E., Shacham, H., Savage, S.: Return-oriented programming:
systems, languages, and applications. In: TISSEC. ACM (2012)
40. Roglia, G.F., Martignoni, L., Paleari, R., Bruschi, D.: Surgically returning to ran-
domized lib(c). In: ACSAC (2009)
41. Serna, F.J.: The info leak era on software exploitation. Black Hat USA (2012)
42. Shacham, H., Page, M., Pfaﬀ, B., Goh, E.-J., Modadugu, N., Boneh, D.: On the
eﬀectiveness of address-space randomization. In: CCS (2014)
43. Snow, K.Z., Monrose, F., Davi, L., Dmitrienko, A., Liebchen, C., Sadeghi, A.-R.:
Just-in-time code reuse: on the eﬀectiveness of ﬁne-grained address space layout
randomization. In: SP (2013)
44. Sun, M., Li, M., Lui, J.C.S.: Droideagle: seamless detection of visually similar
Android Apps. In: WiSec (2015)
45. Sun, M., Zheng, M., Lui, J.C.S., Jiang, X.: Design and implementation of an
Android host-based intrusion prevention system. In: ACSAC (2014)
46. Szekeres, L., Payer, M., Wei, T., Song, D.: Sok: Eternal war in memory. In: SP
(2013)
47. Team, P.: Pax address space layout randomization (ASLR) (2003)
48. Thomas, D.R., Beresford, A.R., Rice, A.: Security metrics for the Android ecosys-
tem. In: SPSM (2015)
49. van der Veen, V., dutt-Sharma, N., Cavallaro, L., Bos, H.: Memory errors: the
past, the present, and the future. In: Balzarotti, D., Stolfo, S.J., Cova, M. (eds.)
RAID 2012. LNCS, vol. 7462, pp. 86–106. Springer, Heidelberg (2012)
50. Vidas, T., Votipka, D., Christin, N.: All your droid are belong to us: a survey of
current android attacks. In: WOOT (2011)
51. Wartell, R., Mohan, V., Hamlen, K.W., Lin, Z.: Binary stirring: self-randomizing
instruction addresses of legacy x86 binary code. In: ASIACCS (2012)
52. Winsniewski, R.: Android-apktool: a tool for reverse engineering Android apk ﬁles
(2012)
53. Wojtczuk, R.N.: The advanced return-into-lib(c) exploits: PaX case study. Mag.
0x0b(0x3a) (2001)
54. Xu, R., Saidi, H., Anderson, R.: Aurasium: practical policy enforcement for
Android applications. In: USENIX Security (2012)
55. Yan, L.-K., Yin, H.: Droidscope: seamlessly reconstructing the OS and Dalvik
semantic views for dynamic Android malware analysis. In: USENIX Security (2012)
56. Zhang, M., Duan, Y., Yin, H., Zhao, Z.: Semantics-aware Android malware classi-
ﬁcation using weighted contextual API dependency graphs. In: CCS (2014)
57. Zheng, M., Sun, M., Lui, J.: Droidray: a security evaluation system for customized
Android ﬁrmwares. In: ASIACCS (2014)
58. Zheng, M., Sun, M., Lui, J.C.: Droidanalytics: a signature based analytic system
to collect, extract, analyze and associate Android malware. In: TrustCom (2013)
59. Zhou, Y., Jiang, X.: Dissecting Android malware: characterization and evolution.
In: SP (2012)
60. Zhou, Y., Patel, K., Wu, L., Wang, Z., Jiang, X.: Hybrid user-level sandboxing of
third-party Android Apps. In: ASIACCS (2015)