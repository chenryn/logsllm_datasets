Count of Long-lived Flows
(proportion)
(proportion)
31614(99.8%)
7937(93.5%)
63(0.2%)
549(6.5%)
31677 (74.4%)
8486 (93.8%)
10898 (25.6%)
560 (6.2%)
Figure 8: Y1 TCP short-lived flow duration analysis
duration of TCP flows, we found out that 99.8% of the TCP flows
in Y1 and 93.5% of the flows in Y2 lasted less than one second. We
summarize our findings in Table 3.
This was very counterintuitive for us, so we further divided TCP
flows into those where we found a matching SYN and RST/FIN pair
in the capture (we call these short-lived flows), and those that either
started before our capture or ended after our capture (we call these
long-lived flows). The summary of these flows can be seen in the
third and fourth rows of Table 3. Fig. 8 shows the duration (seconds
in logscale) of the TCP flows. We can see how several of them have
very short duration.
Trying to explain the reason for these short lived flows, we found
that a small subset of outstations reject backup TCP connections
from the server with FIN or RST packets. This behavior is illustrated
in Fig. 9. For comparison, the “normal” behavior should be the one
in Fig. 4, where the backup server establishes a second connection
with the outstation and exchanges U (keep alive) messages to keep
the backup connection active.
When we told the power company about these abnormal com-
munications they were not aware of them. For them, the SCADA
system still works seamlessly. While the RTU might reject TCP
connection attempts for backup IEC 104 channels, when the main
connection is teared down, they readily accept the backup connec-
tion to the other control server to send I messages. So functionally
the system still works as expected from the point of view of the
SCADA system.
We then asked if they could reconfigure the misbehaving outsta-
tions so that they would accept this backup connection, but their
answer that was that they do not own or manage the configuration
Figure 9: Outlier behavior in clustering analysis.
of the RTUs/outstations. Furthermore we found out that they do
not have regulatory power to demand these changes; as long as
the application-level behavior is satisfied, all parties are complying
with the reliability standards, even if the network behavior under-
neath has problems. Moreover, we also found evidence that this
problem is not only happening at the power system operator we
studied. In our analysis of SCADA systems, we got access to the
network alerts for IEC 104 networks from Forecout’s Silent Defense
system [8], and found that one of their hard-coded alerts is this reg-
ular connection resets from outstations to servers. This connection
reset problem appears to be pervasive in IEC 104 networks, but we
do not know the cause for this.
6.3 Traffic Analysis
We now turn to our attention to Hypothesis 4, and look at the types
of patterns and profiles that can give us insights into the operation
of the network.
Figure 10: PCA of clustered IEC 104 sessions in Year 1
We define as a session, all the packets that are sent in one di-
rection between the same end points. Originally we considered in
total of 10 statistical features to investigate, including the transmis-
sion direction (is the message coming from the control center or
207
C1C2O30UTCP RSTU, S, I−2−101234561st Principal Component−2−1012342nd Principal ComponentCluster 0Cluster 1Cluster 2Cluster 3Cluster 4IMC’20, October 27-29, 2020, Virtual Event, USA
Kelvin Mai, Xi Qin et al.
Figure 11: Communication patterns between outstations
and control stations in each cluster
from the outstations?), average inter-arrival times, total bytes, total
number of packets, and even some features that looked into the
APDU information such as the count of IOAs or the distribution of
APDUs by type (U/S/I). Using the Silhouette score for each individ-
ual feature[22], we pick the features that generate relatively high
Silhouette scores and reduce the feature space dimensionality from
ten to the following five features:
• ∆ti: average inter-arrival time between two consecutive
packets
• numi: total number of packets sent in the same direction by
two end points.
• percentaдeI : the percentage of I-format data units.
• percentaдeS : the percentage of S-format data units.
• percentaдeU : the percentage of U-format data units.
We use K-means++ clustering [16] on these features. To select
the number of clusters K we use the Elbow method on the sum
of squared error [24], the explained variance[12], and Silhouette
scores[22]. These methods suggest that a good number of clusters is
K=5. In addition, we use Principle Component Analysis (PCA) [11]
to project and visualize our results to a the lower dimension (2D
plane). Our clustering results can be seen in Fig. 10.
Inspecting the characteristics of each cluster, we find the fol-
lowing five representative behaviors: (1) Cluster 0 represents (ex-
tremely) long inter-arrival arrival times between packets; (2) Cluster
1 contains the largest amount of I-format packets, characterized
also by being spontaneous transmissions (as opposed to periodic),
(3) Cluster 2 represents the “average” case representing most out-
stations sending a regular amount of I-format packets, (4) Cluster 3
captures all the acknowledgements (S-format packets) sent from
control servers to outstations, and (5) Cluster 4 represents the keep
alive messages of the backup IEC 104 connection. Figure 11 sum-
marizes these clusters and their percentages.
We now study in more detail cluster 0, which is an outlier. Clus-
ter 0 contains just two connections characterized by their long
inter-arrival times between two consecutive packets (they have the
largest ∆ti in our datasets). The sessions in cluster 0 are the packets
control server C2 sends to Outstation O30 and the traffic (back and
forth) between C4 and O22 in Y1.
Overall, we found that the outlier connection C4, O22 was be-
cause of testing procedures (these end points only exchanged four
packets in our capture, and the operator confirmed that the RTU
was not operational, but being tested), however, the connection C2,
O30 is a clear outlier: this connection is a secondary connection
as described in Fig. 9, so this abnormal behavior did not affect the
operation of the system, however, the interval between U messages
was 430s, an interval an order of magnitude higher than the rest of
the secondary connections, which had a 30s average time between
U messages. We believe this is a misconfiguration of the T3 timer.
6.3.1 Deep Packet Inspection: Message Sequences. We now focus
on deep-packet inspection tools to look in more detail at the nature
of communications in the network. Our first goal is to understand
what types of sequences are being exchanged between different end
points, and in particular, to find if there are sequences of APDUs that
can succinctly summarize an end-to-end communication between
every pair of devices in SCADA networks.
P(wn
To model the sequence of APDUs observed in the network, we
utilized N-gram models, which were originally proposed for statis-
tical analysis of natural language. Formally, given a finite set Σ, a
given language L(Σ) is composed of sequences of alphabets over
Σ such that L(Σ) ⊆ Σ*. Let a sequence of words W = {w1...wn} of
’n’ words, then the Language Model (LM) probability of this entire
word sequence, using chain rule, is:
1)...P(wn|wn−1
1
1 ) =P(w1)P(w2|w1)P(w3|w2
(1)
To create a language model of our dataset, we tokenize each
IEC 104 APDU with the elements in Table 4. For example, an S-
format APDU followed by an I-format APDU of typeID 36 (i.e.,
an I-format APDU carrying a measured value in floating point
format with time tag) will be represented as a bigram (S, I36), and
an I-format APDU of typeID 13 (i.e., an I-format APDU carrying
a measured value in a short floating point format without a time
tag) immediately followed by another I-format APDU of typeID 13
will be represented as (I13, I13). To compute probability of a given
bigram, we use maximum likelihood estimation (MLE), let t be a
token, then:
)
P(tn|tn−1) = C(tn−1tn)/C(tn−1)
(2)
Table 4: APDU Token Description
Token
S
U1
U2
U4
U8
U16
U32
Icode (for code={1,3,5,...,127})*
APDU
S
STARTDT act
STARTDT con
STOPDT act
STOPDT con
TESTFR act
TESTFR con
Variable type
Description
Ack of I APDUs
Start sending I APDUs
Ack of STARTDT
Stop sending I APDUs
Ack of STOPDT
Test status of connection
Ack of TESTFR
Sensor and Control Values
* A description of all Type IDs can be found in Table 5.
We start our analysis by creating Markov-chain models of mes-
sage sequences, where each node represents a unique APDU token
and tokens are connected by transitional probabilities. Fig. 12 shows
two of the simplest expected communication patterns observed in
our datasets. The figure on the left shows the expected pattern of a
primary connection, where the outstation sends I36 APDUs which
are periodically acknowledged via S-format APDUs. The image on
the right represents the ideal behavior of a secondary (redundant)
connection, where the connection keep-alive APDU pairs U16 and
U32 were all that observed repeatedly between control server and
outstation. Also seen from the right image is a very low probability
of sending repeated U16 or U32 APDUs (which is an anomaly), but
208
C1Outstation	in	Cluster	1(4.6%)IC1Outstation	in	Cluster	2(18.4%)IC1Outstation	in	Cluster	3(22.1%)SC2Outstation	in	Cluster	4(53.9%)U16 /U32C2Outstation	in	Cluster	0(1.0%)U16TCP RSTUncharted Networks: A First Measurement Study of the Bulk Power System
IMC’20, October 27-29, 2020, Virtual Event, USA
Type ID Code
1
3
5
7
9
11
13
15
20
21
30
31
32
33
34
35
36
37
38
39
40
45
46
47
48
49
50
51
58
59
60
61
62
63
64
70
100
101
102
103
105
107
110
111
112
113
120
121
122
123
124
125
126
127
Acronym
M_SP_NA_1
M_DP_NA_1
M_ST_NA_1
M_BO_NA_1
M_ME_NA_1
M_ME_NB_1
M_ME_NC_1
M_IT_NA_1
M_PS_NA_1
M_ME_ND_1
M_SP_TB_1
M_DP_TB_1
M_ST_TB_1
M_BO_TB_1
M_ME_TD_1
M_ME_TE_1
M_ME_TF_1
M_IT_TB_1
M_EP_TD_1
M_EP_TE_1
M_EP_TF_1
C_SC_NA_1
C_DC_NA_1
C_RC_NA_1
C_SE_NA_1
C_SE_NB_1