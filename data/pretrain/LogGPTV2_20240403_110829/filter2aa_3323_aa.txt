# Porosity: A Decompiler for Blockchain-Based Smart Contract Bytecode

**Author:** Matt Suiche  
**Affiliation:** Comae Technologies  
**Email:** [PI:EMAIL]  
**Date:** July 7, 2017

## Abstract

Ethereum has gained significant popularity in the blockchain community, primarily due to its design that enables developers to write decentralized applications (DApps) and smart contracts using blockchain technology. This new paradigm of applications opens the door to many possibilities and opportunities. While blockchains are often referred to as secure by design, the ability to embed applications within them raises multiple questions regarding architecture, design, attack vectors, and patch deployments. In this paper, I will discuss the architecture of the core component of Ethereum (the Ethereum Virtual Machine), its vulnerabilities, and my open-source tool "Porosity." Porosity is a decompiler for EVM bytecode that generates readable Solidity syntax contracts, enabling both static and dynamic analysis of compiled contracts.

## Table of Contents

1. **Ethereum Virtual Machine (EVM)**
2. **Memory Management**
   - 2.1 Stack
   - 2.2 Storage (Persistent)
   - 2.3 Memory (Volatile)
3. **Addresses**
4. **Call Types**
   - 4.1 EVM
     - 4.1.1 Basic Blocks
     - 4.1.2 EVM Functions
     - 4.1.3 EVM Call
   - 4.2 User-Defined Functions (Solidity)
5. **Type Discovery**
   - 5.1 Address
     - 5.1.1 Non-Optimized Address Mask
     - 5.1.2 Optimized Address Mask
     - 5.1.3 Parameter Address Mask
6. **Smart Contracts**
   - 6.1 Pre-Loader
   - 6.2 Runtime Dispatcher
     - 6.2.1 Function Hashes
     - 6.2.2 Dispatcher
7. **Code Analysis**
   - 7.1 Vulnerable Contract
     - 7.1.1 Solidity Source Code
     - 7.1.2 Runtime Bytecode
     - 7.1.3 ABI Definition
     - 7.1.4 Decompiled Version
8. **Bugs**
   - 8.1 Reentrancy Vulnerability / Race Condition
   - 8.2 Call Stack Vulnerability
   - 8.3 Time Dependence Vulnerability
9. **Future Work**
10. **Acknowledgments**

## 1. Ethereum Virtual Machine (EVM)

The Ethereum Virtual Machine (EVM) is the runtime environment for smart contracts in Ethereum. The EVM executes smart contracts, which are built from bytecodes. Each bytecode is identified by a 160-bit address and stored in the blockchain, also known as "accounts." The EVM operates on 256-bit pseudo-registers, meaning it does not use traditional registers but instead uses an expandable stack for passing parameters to functions, memory, and other algorithmic operations.

From the Solidity documentation, it is worth noting that there are two types of accounts in Ethereum:

- **External Accounts:** Controlled by public-private key pairs (i.e., humans).
- **Contract Accounts:** Controlled by the code stored with the account.

The address of an external account is derived from the public key, while the address of a contract is determined at the time of contract creation (derived from the creator's address and the nonce).

Both types of accounts are treated equally by the EVM, regardless of whether they store code.

## 2. Memory Management

### 2.1 Stack

The EVM does not have the concept of registers; instead, it uses a virtual stack for operations such as passing parameters to opcodes. The EVM stack uses 256-bit values and has a maximum size of 1024 elements.

### 2.2 Storage (Persistent)

Storage is a persistent key-value store mapping 256-bit words to 256-bit words. Every account has a balance that can be modified by sending transactions. Storage is costly to read and even more so to modify. A contract can only read or write to its own storage.

In Listing 1, `userBalances` and `withdrawn` are stored in the persistent storage.

```solidity
contract SendBalance {
    mapping (address => uint) userBalances;
    bool withdrawn = false;
    // ...
}
```

### 2.3 Memory (Volatile)

Memory is used for calling functions and regular memory operations. The EVM does not have traditional registers, so the virtual stack is used to push arguments to instructions. Memory is linear and can be addressed at the byte level, but reads are limited to 256 bits, and writes can be either 8 bits or 256 bits wide. Memory expansion is costly and scales quadratically.

Instructions like `MSTORE` and `MLOAD` are used to add data to and retrieve data from memory, respectively.

## 3. Addresses

The EVM uses 160-bit addresses. Understanding this is crucial for type discovery, as the mask `0xffffffffffffffffffffffffffffffffffffffff` is often applied for optimization purposes.

## 4. Call Types

There are two types of functions in the EVM: EVM functions (or instructions) and user-defined functions in smart contracts.

### 4.1 EVM

#### 4.1.1 Basic Blocks

Basic blocks usually start with the `JUMPDEST` instruction, with a few exceptions. Conditional and unconditional jumps typically have a `PUSH` instruction preceding them to push the destination offset into the stack. In some cases, the `PUSH` instruction containing the offset can be executed well before the actual `JUMP` instruction, requiring dynamic execution to record the stack for each `JUMP`.

#### 4.1.2 EVM Functions

EVM functions include arithmetic operations, comparison and bitwise logic operations, SHA3, environmental information, block information, stack, memory, storage, and flow operations, push/duplication/pop/exchange operations, logging operations, and system operations.

Since the EVM does not have registers, all instructions are invoked through the EVM stack. For example, an addition or subtraction instruction would use the stack entries at index 0 and 1, and the return value would be stored at index 0.

```assembly
PUSH1 0x1
PUSH2 0x2
ADD
```

This assembly snippet translates to `add(0x2, 0x1)` and returns `0x3` in the stack entry 0.

#### 4.1.3 EVM Call

External EVM function calls can be identified with the `CALL` instruction. Some mathematical and cryptographic functions, such as `sha256` or `ripemd160`, must be called through external contracts. Despite having a defined `sha3` instruction, it is frequently used with mapping arrays.

The `call` function prototype is shown in Listing 3.

```c
call(
    gasLimit,
    to,
    value,
    inputOffset,
    inputSize,
    outputOffset,
    outputSize
)
```

There are four pre-compiled contracts in addresses 1, 2, 3, and 4, which execute elliptic curve public key recovery, SHA2 256-bit hash, RIPEMD 160-bit hash, and the identity function, respectively.

### 4.2 User-Defined Functions (Solidity)

To call user-defined functions, the `CALLDATALOAD` instruction is used. The first parameter is the offset in the current environment block. The first 4 bytes indicate the 32-bit hash of the called function, followed by the input parameters.

In Listing 5, the function `foo` is defined as follows:

```solidity
function foo(int a, int b) {
    return a + b;
}
```

The EVM pseudo-code for this function would be:

```assembly
return(add(calldataload(0x4), calldataload(0x24)))
```

## 5. Type Discovery

### 5.1 Address

Addresses can be identified by specific instructions, but better results are often achieved by identifying masks applied to these values.

#### 5.1.1 Non-Optimized Address Mask

Listing 7 shows 0x16 bytes of EVM assembly code that translates to `reg256` and `0xffffffffffffffffffffffffffffffffffffffff`.

```assembly
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
```

#### 5.1.2 Optimized Address Mask

Listing 8 shows the optimized 0x9 bytes of EVM assembly code, which performs the same operation as in Listing 7.

```assembly
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
```

## 6. Smart Contracts

### 6.1 Pre-Loader

### 6.2 Runtime Dispatcher

#### 6.2.1 Function Hashes

#### 6.2.2 Dispatcher

## 7. Code Analysis

### 7.1 Vulnerable Contract

#### 7.1.1 Solidity Source Code

#### 7.1.2 Runtime Bytecode

#### 7.1.3 ABI Definition

#### 7.1.4 Decompiled Version

## 8. Bugs

### 8.1 Reentrancy Vulnerability / Race Condition

### 8.2 Call Stack Vulnerability

### 8.3 Time Dependence Vulnerability

## 9. Future Work

## 10. Acknowledgments

---

This version of the text is more structured, coherent, and professional, with improved clarity and readability.