them. Once purchased, the buyer will get the credential data
such as username, password, linked phone number, email, IP
used for registration, etc. for using the account.
E-commerce frauds. Order scalping is among the most
prominent e-commerce rackets, aiming to inﬂate the sales
volume of products through fake purchases [1], [19]. Such
tasks can be fulﬁlled on the underground order scalping
platforms where hired workers perform fake transactions for
the merchants [49]. Another common racket is bonus hunting,
in which a group of workers is tasked to buy certain products
to earn promotional bonuses, on behalf of the bonus hunters,
who are not eligible to buy the products in such a great amount.
This not only harms other users’ beneﬁts but also violates the
e-commerce platform’s purchase policy. Taking an online store
providing deeply discounted iPhones as an example, bonus
hunters will hire workers through a platform to place as many
orders as possible and later resell them for proﬁt.
Speciﬁcally, these e-commerce rackets have already been
industrialized on the deep web. For order scalping, a dishon-
est merchant ﬁrst makes an escrow deposit on the scalping
platform to create tasks. Then the afﬁliates (i.e. workers) for
3
Architecture. Figure 2 illustrates the system architecture,
including Target Finder, Strategy Generator, and
Dialog Manager. Target Finder identiﬁes the mis-
creants from underground IM group chats (Section III-B).
Strategy Generator constructs the FSMs and dialogue
sources for the retrieval model (Section III-C). Dialog
Manager runs the FSM and retrieval model to guide the
interaction with a speciﬁc miscreant role and outputs the dialog
traces and threat intelligence (Section III-D).
B. Target Finding
Before the conversation can even begin, we ﬁrst need to
discover the targets, individuals with a speciﬁc criminal role,
from underground IM groups. Serving this purpose is our
Target Finder, which takes two steps to uncover Aubrey’s
targets: ﬁrst, it runs two binary classiﬁers to determine whether
a role is an upstream actor (SIM farmer and account mer-
chant, whose group messages have similar keywords) or a
downstream actor (fraud order operator), and secondly from
the identiﬁed upstream players, it further ﬁnds out if the role
is a SIM farmer or account merchant (for which the target
intelligence is different).
Upstream and downstream role classiﬁcation. To distin-
guish between the upstream and downstream roles in IM
group messages, an important observation is that, due to
the distinctive intentions of these roles (e.g., selling phone
numbers/accounts or recruiting workers), their messages tend
to contain speciﬁc keywords, which allow us to utilize these
words as features for separating upstream and downstream
players from unrelated actors. To be speciﬁc, given the group
chat logs of an individual, we use the occurrence of each
keyword to construct the feature vector.
To ﬁnd the keywords, we compared the occurrence of each
word across four datasets (Section IV) on SIM farmers, fraud
account merchants, fraud order operators, and background set,
which is out of the three roles, respectively. Formally, given
a word w in the traces of a target role i, we calculate its log
odds ratio δi
w with regards to other roles −i:
y−i
w + yw
yi
w + yw
δi
w = log
ni + n − yw − yi
n−i + n − yw − y−i
where ni is the total number of words for the role i, yi
w is
the frequency of w in the corpus on i, n−i is the size of the
corpora except the one for i, y−i
w is the frequency of w across
the corpora except corpora for i, n is the size of all corpora,
including the background corpus and yw is the word frequency
w and the
in all corpora. Further we compute the variance of δi
z-score for each word w as:
− log
w
(1)
w
σ2(δi
w) ≈
1
yi
w + yw
+
1
y−i
w + yw
, Z =
w(cid:112)σ2(δi
δi
w)
(2)
The z-score is the number of standard deviations away from
the mean the log odds ratio, which intuitively describes how
unique the word w is for the role i. Therefore, by ranking
all the words based on z-scores, we can ﬁnd those with a
signiﬁcantly higher frequency for role i than for the other
roles. After ﬁltering out the stop words, all the keywords
form pairs of binary vectors - one for upstream and one for
downstream. Each vector is used by its corresponding classiﬁer
for determining the role of the members.
4
Fig. 2: Overview of the methodology.
meaning of sentences and paragraphs. Such a representation
can be achieved with word vector operations [30], unweighted
vector averaging [42], skip-thought sentence reconstruction
[38], etc. After the sentence is embedded, more sophisticated
processing of textual data such as sentence similarity compar-
ison can be done with computation on the sentence vectors. In
our research, we compare the semantic meanings of continuous
dialog messages to determine whether they belong to the
same topic. We leveraged the state-of-the-art word embedding
model, word2vec [23], and sentence-embedding technique [29]
for generating comparable vectors. The implementation details
of the two models are described in Section IV-A.
III. CHATTING WITH E-COMMERCE MISCREANTS
In this section, we present the techniques we developed
to proactively gather e-commerce threat intelligence. Starting
with an overview of the idea behind our system, we then
elaborate on the design and implementation of Aubrey.
A. Overview
To proactively collect threat intelligence from e-commerce
fraudsters, Aubrey simulates a small-time worker to chat with
upstream resource providers and downstream fraud operators.
To identify these miscreants, Aubrey automatically inspects
underground IM group messages to discover the role of in-
terest and then approaches each of them through the target’s
IM ID to initiate the conversation. The chat is guided by
Aubrey’s FSM for a given miscreant role, which automatically
generates questions to solicit answers from the role which
in turn drives state transition. Unexpected questions queried
by the role are handled by the retrieval model by analyzing
a knowledge dataset. Both the FSM and the retrieval model
are constructed in a semi-automatic way, based upon various
knowledge sources related to the role, such as traces of human-
role conversations, multicast messages in IM groups and
underground forum discussions. More speciﬁcally, the states
and relations of the FSM are automatically identiﬁed from the
traces of human chats, and domain-speciﬁc dialogue pairs for
the retrieval model are extracted from underground messages
(i.e., underground IM group chat logs and forum corpora) after
message content segmentation and topic identiﬁcation. These
pairs are searched by the model to ﬁnd the best answers to
the questions that FSM can not manage during a talk with
the criminal role. The output of the interactions is a set of
communication traces, which are then processed by our system
to help human analysts extract threat intelligence. We also
apply several optimization techniques to make the conversation
smoother and more ﬂowing, as elaborated in Appendix C.
In addition to the binary vectors, we collect other fea-
tures including the average length and frequency of a role’s
messages. These salient features are based on the observation
that key players tend to talk more frequently and longer
while promoting their services or recruiting workers. Unrelated
actors tend to make short comments with occasionally long
discussions. On top of the aforementioned features, we trained
two binary classiﬁers for identifying upstream and downstream
actors. In our implementation, we employed the SVM classiﬁer
and trained them over balanced labeled set (Section IV).
Upstream actor identiﬁcation. From upstream actors, we
further need to separate SIM farmers from account merchants.
The main behavioral difference between them is that the latter
often purchase SIM cards from the former (Section II). This
observation helps us separate them by analyzing their actions.
Speciﬁcally, our Target Finder inspects an upstream
actor’s messages for the indicators that he is actively seeking
phone numbers and also promoting account trading websites.
Such indicators are manually summarized from the labeled set
(Section IV-B) in the form of verb-and-noun phrases together
with the aforementioned keywords in account merchant corpus
with high z-scores (see Figure 13). The verb-and-noun phrases
describe the relation between account merchant and SIM
farmer (e.g., “seek + SIM cards”, “welcome + SIM gateway
sites”). Since the account merchants can sometimes act as
SIM farmers, we use the ratio of verb-and-noun phrases to
distinguish selling from purchasing behavior, as an indicator.
Once an indicator exceeds a threshold (see Section IV-A),
he is classiﬁed as a SIM farmer. Otherwise, he will be
labeled as account merchant if the messages include account
keywords (e.g., “account selling”). Our experiments show that
this simple classiﬁcation and indicator-based approach perform
well on real data (see Section IV-B). Further running Target
Finder, we discovered 1,044 SIM farmers, 700 account
merchants and 2,648 fraud order operators from 150 IM
groups with 1 million communication messages. The results
and ﬁndings are elaborated in Section IV and Section V.
C. Strategy Generation
To guide Aubrey’s conversation with a miscreant role,
our system ﬁrst semi-automatically generates an FSM for the
role. Such an FSM can be formally modeled as a 5-tuple,
(S, R, δ, s0, E), where S is a set of states, with each of them
si=1,··· ,n consisting of the messages (mostly questions) Aubrey
can send to the role; R is a set of responses the role may
provide, including the threat intelligence Aubrey targets to
collect; δ : S × R → S is a state-transition function that
evaluates the response received at a given state to decide the
next state to move into; s0 is the start state and E is end
states, including ones targeted intelligence is gathered and
ones no useful information is collected. Note that in this FSM,
the retrieval model can be described by the states the system
enters when the role’s responses contain questions, and where
the message Aubrey sends to the role contains answers to his
question instead of the question for the role to answer.
To construct such an FSM, we ﬁrst utilized seeds – 20
communication samples between security analysts at Company
A (a leading Chinese e-commerce retailer) and people acting
in criminal roles, and further extended the seeds with relevant
traces from 150 IM groups and two forums. We elaborate on
how to discover the states and their relations from the seeds,
and how to enrich each state’s question set while supporting
the retrieval model using the extended dataset.
FSM generation. To identify states and their relations, our
approach automatically segments the seeds and then clusters
the dialog pieces together based upon the topics discovered.
A dialogue trace is a sequence of messages (a short
text
piece often containing one but sometimes more sentences).
Segmentation of a trace is to break it into dialogue blocks,
with consecutive messages. Given the question-driven nature
of the FSM, this can be done by searching for the questions
in security analysts’ messages. In reality, questions could be
implicit and therefore cannot be easily identiﬁed, e.g., “Please
send me your quote for 10 accounts.” To address this issue,
we utilize a single-pass clustering algorithm [45] to segment
the traces. The algorithm automatically builds a topic To
from continuous messages with similar semantics. Once a
message M is semantically inconsistent with its prior ones
(i.e., sim(M, To) is larger than a threshold th), the algorithm
starts a new topic Tn based upon the semantics of M. Here, the
similarity of two messages is calculated as the cosine similarity
of two vectors cosSim(SVM , SVMi), where SVM is the vector
of M, which includes a weighted average of the vectors for
the words in the message [29].
We further determine the topic for each dialog block using
a topic model [8]. It
identiﬁes the block topic using the
keywords related to a given role (Section III-B). All the dialog
blocks with the same topic are clustered together. The topic,
together with the questions extracted from the blocks and
additional ones from the extended set (explained later), forms
an FSM state. The transitions between the states are found
from the relations between different blocks. For example, once
the question “What
types of accounts are you selling” is
answered, human analysts tend to ask another question “How
to buy? Any self-service website?” More complicated to handle
are the responses from the role that drive state transitions,
which we explain in Section III-D.
FSM Examples. In Figure 3, we present as examples the
simpliﬁed versions of three FSMs.
In Figure 3(a), we show
the FSM for talking with the SIM farmers. The targeted
intelligence is the SIM farm storefront on the deep web, as
well as the sources (e.g., corrupted carriers) of the SIM cards.
Aubrey starts the conversation by asking whether the role has
SIM cards (Simcard state). If the role responses positively, the
following question is which gateway (Section II-A) should be
used to access them (Gateway state). After that, Aubrey further
asks how the farmer obtains these cards (SimSource state).
Once the conversation ﬁnishes,
the chatbot shows interest
about other ecosystems, e.g., “Do you know any website
selling fake accounts” (Cross-role state), intending to ﬁnd out
the correlation between the SIM farm and fake account trading.
This will help us better understand the whole ecosystem. The
dialog will end (END state) after all the questions are asked.
Figure 3(b) illustrates the FSM for account trading in which
account types, storefront and payment is the target intelligence.
Aubrey ﬁrst asks whether the role is selling accounts (Account
state). If conﬁrmed, she further queries the account types for
sell (Type state). With this information, Aubrey asks about
5
R
Snext
Scur
Simcard
Gateway
SimSource
Cross-role
R
Snext
Scur
Account
Types
StoreLink
Payment
Cross-role
R
Snext
Scur
FraudTasks
Items
ShippingAddr
ReportLink
Cross-role
w/o Account intel. w/ Account intel. w/ Types intel.
w/ Types intel.
w/o link intel.
w/o Types intel.
-
-
-
-
-
-
-
-
-
negation w/ link intel.
ﬁnish query
negation
negation
-
interrogation
interrogation
interrogation
interrogation
interrogation
wrong role
-
-