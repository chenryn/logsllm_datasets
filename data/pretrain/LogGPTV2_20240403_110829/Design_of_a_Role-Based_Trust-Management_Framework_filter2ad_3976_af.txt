ever, there are several drawbacks of this approach. First,
most Datalog or Prolog engines do not suit our needs. To
work with a large number of credentials stored in a dis-
tributed way, we require a goal-oriented (top down) infer-
ence engine. This rules out many deductive database imple-
mentations that use bottom-up evaluation algorithms. We
also require the inference engine to guarantee termination.
This rules out many Prolog engines, which run into inﬁ-
nite loops with recursive rules. Second, the size of a full-
blown Datalog inference engine might be unacceptable for
some applications. For instance, XSB [14] is a system that
satisﬁes our goal-orientation and termination requirements.
In fact, one of the authors has used XSB previously while
working on Delegation Logic [17]. Unfortunately, even the
stripped down version of the XSB is several megabytes,
while the jar ﬁle of the current RT0 engine is less than
40KB. Third, based on our experience, it is often hard to
integrate with a Datalog engine closely; and one has less
control than needed during the inference process. For exam-
ple, it might be hard to interleave credential collection with
inferencing steps, as needed for some applications. Last but
not least, we require support for functions and predicates
for application-deﬁned data types. For these reasons, we are
developing direct algorithms, which can be implemented in
general programming languages.
We use XML to represent both ADSDs and credentials.
Credentials are digitally signed. We plan to address the re-
vocation issue by requiring that each credential have an is-
sue time and a validity period, similar to the approach sug-
gested in [18]. Delegation credentials should have short life
time and be renewed when needed. Deﬁnition credentials
can have veriﬁcation mechanism descriptions. For exam-
ple, a veriﬁcation mechanism might include an address for
ﬁnding a credential revocation list (CRL), or the address and
public key of an online certiﬁcate status veriﬁcation server.
7.2 Future Work
In this paper, we have restricted our design to features
that can be implemented in safe Datalog. Several further
features that cannot be implemented in Datalog would also
be desirable, however. While non-monotonicity is typically
inappropriate for a de-centralized environment, certain non-
monotonic constraints may be useful and appropriate. For
example, mutual exclusion among roles that can be acti-
vated at the same time (also known as dynamic separation
of duty) may be important to some organizations. Enforc-
ing this policy requires complete information only about
which roles are being activated, which can be expected to
be available when processing access requests. A second
desirable feature would enable authorization to depend on
state information, such as history or environment data. For
instance, history information is needed to implement the
Chinese Wall policy [6]. Policies representing such poli-
cies often result in unsafe Datalog rules. We plan to ad-
dress this by distinguishing a class of request-processing
rules that are used only in connection with a speciﬁc re-
quest. When the request is made, it supplies values for all
variables in the request-processing rule that might otherwise
be unsafe. Yet another desirable feature is to be able to rep-
resent unbounded, structured resources, such as directory
hierarchies. Handling these requires going beyond Datalog.
We plan to address this by using Datalog with constraints
to replace Datalog as the underlying foundation. Ongoing
work on such extensions will be reported in near future.
7.3 Related Work
In section 1, we discussed the limitations of capability-
style systems such as KeyNote and SPKI 1.0 and argued
that
the trust-management systems SPKI/SDSI [8, 10],
KeyNote [2], and TPL [15] cannot express the ﬁve require-
ments for attribute-based access control. Here, we give ad-
ditional comparisons of RT with related work.
RT uniﬁes RBAC and trust-management concepts; it
thus differs from previous TM systems in that it uses roles
as a central notion. One advantage of this is the ability to
allow selective role activation and delegation of these acti-
vations. This supports using partial authority in a request,
which no previous TM systems support.
In addition, the
two role product operators in RT D are more expressive than
threshold structures in existing trust management systems.
The SDSI part of SPKI/SDSI is equivalent to RT0 mi-
nus type-4 credentials (intersection). The SPKI part of
SPKI/SDSI is a capability-style system. SPKI/SDSI is
15
roughly equivalent to RT1 with no variables, but it has one
compound data type for tags.
is similar
[2]
is
a
the form:
capability-style
KeyNote
to SPKI. A KeyNote credential
system simi-
to an
lar
“A.r(h1, . . . , hn) ←−
RT credential of
B.r(h1, . . . , hn), conditions”, where
are
boolean expressions on h1, . . . , hn. However, KeyNote
allows conditions to contain operators like regular ex-
pression matching. This is fairly expressive, but has the
disadvantage of being nondeclarative.
conditions
As we discussed in section 1, DL does not have the ab-
straction of subjects. On the other hand, DL has integer
delegation depth and allows query of delegations; these are
not allowed in RT. RT0,1,2 can be viewed as syntactically
sugared version of a subset of DL.
Our
treatment of RT D uses role activations like
“D as A.R” and atoms like forRole(B, D, A.R). The
ABLP logic [1] also has “as”, which it uses for restrict-
ing privileges. There, “D as R” has less privilege than
D; furthermore, “D1 as R” and “D2 as R” may have dif-
ferent privileges.
In RT , the use of roles follows that in
RBAC, and “as” is interpreted as activating roles. In RT ,
“D1 as A.R” has the same privilege as “D2 as A.R”. The
difference between D1 and D2 becomes signiﬁcant only
when the role product operator ⊗ is involved and/or au-
diting is desired. The ABLP logic also has an operator
“for”, which can be encoded using a quoting operator |,
and there is also a conjunction operator ∧. The logic al-
lows one to write arbitrarily long and complex principal
expressions using these operators. The combination of ∧
and | makes the ABLP logic intractable, even though it
does not support localized name space for roles or param-
In RT , ∧ is implicitly achieved by hav-
eterized roles.
ing multiple credentials and manifold roles. The statement
forRole(B, D, A.R) in RT D can be roughly read as “B for
(D as A.R)”; and this is the only form of statement RT D
allows. Note that “B for B1 for D as A.R” can be achieved
by two delegation credentials from D to B1 and then to B.
We do not distinguish between “B for B1 for D as A.R”
and “B for B2 for D as A.R”. They are achieved by differ-
ent credential chains; but B would have the same privilege
in both cases. This reduces computational complexity of
RT , makes it easier to understand, and still seems sufﬁcient
to capture policy concepts motivating the ABLP logic.
8 Conclusions
We introduce the RT framework, a family of Role-
based Trust-management languages for representing poli-
cies and credentials in distributed authorization. RT com-
bines the strengths of role-based access control and trust-
management systems and is especially suitable for attribute-
based access control. We present four components of the
RT framework: RT1, RT2, RT T , and RT D. Together,
they have seven forms of credentials and support localized
authority of roles, delegation in role deﬁnition, linked roles,
parameterized roles, manifold roles, and delegation of role
activations. We also presented a translation from RT cre-
dentials to Datalog rules, which both serves as a logic-based
semantics for RT and shows that the semantics is algorith-
mically tractable.
Acknowledgements
This work is supported by DARPA through SPAWAR
contracts N66001-01-C-8005 and N66001-00-C-8015 and
MURI grant N00014-97-1-0505 administrated by ONR.
Raghuram Sri Sivalanka made some helpful comments on
an earlier version of this paper. We also thank anonymous
reviewers for their helpful reports.
References
[1] Mart´ın Abadi, Michael Burrows, Butler Lampson, and
Gordon Plotkin. A calculus for access control in dis-
tributed systems. Transactions on Programming Lan-
guages and Systems, 15(4):706–734, October 1993.
[2] Matt Blaze,
Joan Feigenbaum,
and Angelos D. Keromytis.
management system, version 2.
September 1999.
John Ioannidis,
The KeyNote trust-
IETF RFC 2704,
[3] Matt Blaze, Joan Feigenbaum, and Jack Lacy. Decen-
tralized trust management. In Proceedings of the 1996
IEEE Symposium on Security and Privacy, pages 164–
173. IEEE Computer Society Press, May 1996.
[4] Piero Bonatti and Pierangela Samarati. Regulating ser-
vice access and information release on the web.
In
Proceedings of the 7th ACM Conference on Computer
and Communications Security (CCS-7), pages 134–
143. ACM Press, November 2000.
[5] Tim Bray, Dave Hollander, and Andrew Layman.
Namespaces in XML. W3C Recommendation, Jan-
uary 1999.
[6] David F.C. Brewer and Michael J. Nash. The chi-
nese wall security policy. In Proceedings of the 1989
IEEE Symposium on Security and Privacy, pages 206–
218, Los Alamitos, May 1989. IEEE Computer Soci-
ety Press.
[7] David D. Clark and David R. Wilson. A comparision
of commercial and military computer security poli-
cies. In Proceedings of the 1987 IEEE Symposium on
Security and Privacy, pages 184–194. IEEE Computer
Society Press, May 1987.
16
[20] Ninghui Li, William H. Winsborough, and John C.
Mitchell. Distributed credential chain discovery in
trust management (extended abstract). In Proceedings
of the Eighth ACM Conference on Computer and Com-
munications Security (CCS-8), pages 156–165. ACM
Press, November 2001.
[21] Emil Lupu and Morris Sloman. Reconciling role based
management and role based access control.
In Pro-
ceedings of the Second ACM Workshop on Role-Based
Access Control (RBAC’97), pages 135–141, Novem-
ber 1997.
[22] I. V. Ramakrishnan, Prasad Rao, Konstantinos Sago-
nas, Terrance Swift, and David S. Warren. Efﬁcient
access mechanisms for tabled logic programs. Journal
of Logic Programming, 38(1):31–55, January 1999.
[23] Ravi S. Sandhu, Edward J. Coyne, Hal L. Feinstein,
and Charles E. Youman. Role-based access con-
trol models. IEEE Computer, 29(2):38–47, February
1996.
[24] Tichard T. Simon and Mary Ellen Zurko. Separation
of duty in role-based environments.
In Proceedings
of The 10th Computer Security Foundations Workshop
(CSFW-10), pages 183–194. IEEE Computer Society
Press, June 1997.
[25] Jefferey D. Ullman. Principles of Databases and
Knowledge-Base System, volume 2. Computer Sci-
ence Press, 1989.
[26] William H. Winsborough and Ninghui Li. Towards
practical automated trust negotiation. In IEEE 3rd Intl.
Workshop on Policies for Distributed Systems and Net-
works (Policy 2002). IEEE Press, June 2002.
[27] William H. Winsborough, Kent E. Seamons, and
Vicki E. Jones. Automated trust negotiation.
In
DARPA Information Survivability Conference and Ex-
position. IEEE Press, January 2000.
[8] Dwaine Clarke, Jean-Emile Elien, Carl Ellison, Matt
Fredette, Alexander Morcos, and Ronald L. Rivest.
Certiﬁcate chain discovery in SPKI/SDSI. Journal of
Computer Security, 9(4):285–322, 2001.
[9] William F. Dowling and Jean H. Gallier. Linear-
time algorithms for testing the satisﬁability of proposi-
tional horn formulae. Journal of Logic Programming,
1(3):267–284, 1984.
[10] Carl Ellison, Bill Frantz, Butler Lampson, Ron Rivest,
Brian Thomas, and Tatu Ylonen. SPKI certiﬁcate the-
ory. IETF RFC 2693, September 1999.
[11] Stephen Farrell and Russell Housley. An Internet at-
tribute certiﬁcate proﬁle for authorization, 2001.
[12] Luigi Giuri and Pietro Iglio. Role templates for
content-based access control.
In Proceedings of the
Second ACM Workshop on Role-Based Access Control
(RBAC’97), pages 153–159, November 1997.
[13] Martin Groher, Thomas Schwentick,
and Luc
Segouﬁn. When is the evaluation of conjunctive
queries tractable?
In Proceedings of the 33rd An-
nual Symposium on Theory of Computing (STOC’01),
pages 657–666, July 2001.
[14] The XSB Research Group. The XSB programming
system. http://xsb.sourceforge.net/.
[15] Amir Herzberg, Yosi Mass, Joris Mihaeli, Dalit Naor,
and Yiftach Ravid. Access control meets public key
infrastructure, or: Assigning roles to strangers. In Pro-
ceedings of the 2000 IEEE Symposium on Security and
Privacy, pages 2–14. IEEE Computer Society Press,
May 2000.
[16] Trevor Jim. SD3: a trust management system with cer-
tiﬁcate evaluation. In Proceedings of the 2001 IEEE
Symposium on Security and Privacy, pages 106–115.
IEEE Computer Society Press, May 2001.
[17] Ninghui Li. Delegation Logic: A Logic-based Ap-
proach to Distributed Authorization. PhD thesis, New
York University, September 2000.
[18] Ninghui Li and Joan Feigenbaum. Nonmonotonic-
ity, user interfaces, and risk assessment in certiﬁ-
cate revocation (position paper).
In Proceedings of
the 5th Internation Conference on Financial Cryp-
tography (FC’01). To be published by Springer.
http://crypto.stanford.edu/˜ninghui/papers/fc01.pdf.
[19] Ninghui Li, Benjamin N. Grosof, and Joan Feigen-
baum. A practically implementable and tractable del-
egation logic. In Proceedings of the 2000 IEEE Sym-
posium on Security and Privacy, pages 27–42. IEEE
Computer Society Press, May 2000.
17