### Negative Rate of Sketch-Based Detection

The negative rate of the sketch-based detection is limited to below 0.001. Figure 12 illustrates the results, indicating that a sketch size of fewer than 500 bytes can achieve a desirable accuracy.

### Cache Size and Per-Neighbor Storage Overhead

We now examine the cache size required for temporarily storing packet hashes during live epochs, which, along with the sketch size analyzed above, constitutes the per-neighbor storage overhead of a DynaFL router. We denote the upper bound of one-way network latency as \( D \), epoch length as \( L \), and the number of packets per second as \( \eta \). Using 20-byte packet hashes, the cache size is given by:

\[
\text{Cache Size} = \left\lceil \frac{\eta \cdot 20 \cdot L}{D} \right\rceil + 1
\]

where the additional 1-bit indicator is used to specify which packet stream the packet belongs to (see Figure 6). Assuming the per-neighbor sketch size is 500 bytes, one-way latency \( D = 20 \) ms, and the average packet size is 300 bytes for an OC-192 link, we derive the per-neighbor storage overhead. Figure 13 shows the per-neighbor state for an OC-192 link with the average packet size of 300 bytes and one-way network latency of 20 ms. With an epoch length of 20 ms, only around 4 MB is required per neighbor. The "humps" in the curve are due to the use of the ceiling function in the equation.

### Key Management Overhead

One of the distinct advantages of DynaFL is that each router shares only one secret key with the AC, whereas in path-based FL protocols, each router must share a secret key with each source node in the worst case [14]. This significantly complicates key management and broadens the vulnerability surface. To quantify this advantage, we leverage the measured ISP topologies from the Rocketfuel dataset [31] and the topology from Internet2 [4]. Figure 14 shows the maximum number of keys each router needs to manage in path-based FL protocols, compared to just one secret key in DynaFL. The number of keys a router needs to manage in path-based FL protocols is 100 to 10,000 times higher than in DynaFL.

### Bandwidth Overhead

We analyze the bandwidth consumption on each link by the reporting traffic summaries based on the measured ISP topologies from the RocketFuel dataset [31]. The reporting messages are transmitted along a spanning tree rooted at the AC. Hence, the bandwidth consumption on a link is determined by the number of children below that link and the degrees of the children. For each ISP topology, we first select a "central" node as the AC, which is the node with the highest fraction of all shortest paths passing through it. Then, we create a minimum spanning tree rooted at the central node (or the AC) for transmitting reporting messages to the AC. We consider an epoch length \( L = 20 \) ms, a per-neighbor traffic summary of 500 bytes, and an epoch sampling rate of 1%. On average, each node sends one reporting packet every two seconds. Figure 15 plots the results for ISPs with AS numbers 1221, 1239, 1755, 3257, 3967, and 6461. The fraction of bandwidth used for reporting traffic summaries on a link is small for all topologies (e.g., between 0.002% and 0.012% for an OC-192 link).

### Detection Delay

As stated in Section VI, the AC performs consistency checks and detects anomalies only when the total number of packets over multiple epochs exceeds a certain threshold \( N \) to maintain a low false positive and negative rate. For example, with 5000 packets, the false positive rate is under 1%. Figure 17 shows the false negative rates with a malicious router that drops packets with a probability of 0.005. Figure 18 plots the false negative rates with a malicious router that both drops and modifies packets with a probability of 0.005. The sketch-based approach is effective in detecting packet modification attacks, as the malicious router is detected faster in Figure 18 than in Figure 17.

### Related Work and Discussion

Recent research has highlighted the importance of network fault localization. Known secure FL protocols are all path-based, failing to support dynamic routing paths, requiring per-path state at routers, and incurring per-source key sharing and management. These fundamental limitations, along with security vulnerabilities and high protocol overhead, are significant drawbacks. For instance, WATCHERS [16], [22], AudIt [8], and Fatih [29] use counters or Bloom Filters [15] without secret keys, making them vulnerable to packet modification attacks. ODSBR [12], [13] and Secure Traceroute [30] activate FL only when the end-to-end packet loss rate exceeds a certain threshold, allowing malicious nodes to drop packets when FL is not active. Liu et al. [26] propose enabling two-hop-away routers to monitor each other, but this is vulnerable to colluding neighboring routers. Watchdog [28] and Catch [27] can identify and isolate malicious routers in wireless ad hoc networks but are also vulnerable to collusion attacks. Avramopoulos et al. [11] propose a protocol with high computational and communication overhead, while PAAI-1 [34], Statistical FL [14], and ShortMAC [36] require stable routing paths and per-path state at routers. TrueNet [35] uses trusted computing to achieve FL with constant small router state but requires special hardware support such as a TPM.

### Conclusion and Future Work

In this paper, we raise awareness of the need for a practical and scalable network fault localization protocol that can handle dynamic traffic patterns and routing paths with constant, small router state. After identifying the fundamental limitations of previous FL protocols, we explore a neighborhood-based FL approach and propose DynaFL, which utilizes delayed key disclosure for secure and efficient checking of packet content conservation. While existing path-based FL protocols aim to identify specific faulty links, DynaFL localizes data-plane faults to a coarser-grained 1-hop neighborhood, offering four distinct advantages: no minimum duration time for flows, no need for exact outgoing paths, minimal per-neighbor state, and single secret key management. Future work will address multicast and broadcast scenarios to prevent the detection of "packet injection."

### Acknowledgments

The authors thank Hsu-Chun Hsiao and Patrick Tague for constructive discussions and insightful suggestions, and the anonymous reviewers for their valuable feedback. This research was supported by CyLab at Carnegie Mellon under grants DAAD19-02-1-0389, W911NF-09-1-0273, and MURI W 911 NF 0710287 from the Army Research Office, and by support from NSF under award CNS-1040801. The views and conclusions contained here are those of the authors and should not be interpreted as necessarily representing the official policies or endorsements of ARO, CMU, NSF, or the U.S. Government or any of its agencies.