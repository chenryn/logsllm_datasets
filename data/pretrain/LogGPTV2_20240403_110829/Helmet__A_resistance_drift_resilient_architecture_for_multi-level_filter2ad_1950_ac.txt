power-law relation with the write current (i.e. 
). Note 
that fma3d is less sensitive to the margin size due to the very few 
writes. Across all simulated benchmarks, we found that the power 
consumption of the MLC design with a wider margin (i.e. 2uA) is 
2.3X as high as that of the design with a very small margin (i.e. 
0uA).  
I Rt
2
Joule
q
=
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:27:46 UTC from IEEE Xplore.  Restrictions apply. 
200Increasing  the  margin  not  only  consumes  more  power  but 
also  exposes  all  PCM  cells  to  a  much  higher  programming 
current.  Such  high  programming  power  can  physically  degrade 
the  endurance  of  phase  change  material,  leading  to  a  reduced 
lifetime. The endurance test performed in [17] shows a power law 
relation between cycle lifetime and programming energy: higher 
programming energy results in degraded endurance. Assuming an 
endurance of 1E08, as projected by ITRS 2007 [18], compared to 
PCM cells with a 0uA margin, the energy increases in write can 
result in an approximate 100X reduction in the endurance when a 
larger  margin  (i.e.  2uA)  is  required.  As  estimated  in  [19],  an 
endurance of 1E08 allows an 8-10 years lifetime for PCM and the 
estimated lifetime can be significantly reduced to as little as 1-2 
months  (8-10  years  /  100  ≈  1-2  months)  in  order  to  tolerate 
resistance drift. Alternatively, resistance drift can be mitigated by 
performing  refreshing  as  that  in  DRAM.  However,  this  method 
incurs  a  significant  power  overhead,  especially  for  MLC-PCM 
due  to  its  high  power  consumption  caused  by  the  iterative 
programming-and-verify  mechanism  [5].  Moreover,  refreshing 
will lead to more writes and further exacerbate the lifespan issue 
of PCM.  
n
o
i
t
p
m
u
s
n
o
C
r
e
w
o
P
l
a
t
o
T
d
e
z
i
l
a
m
r
o
N
2.5
2.0
1.5
1.0
0.5
0.0
0uA	
  margin
0.5uA	
  margin
1uA	
  margin
1.5uA	
  margin
2.0uA	
  margin
1E10
1E09
1E08
1E07
1E06
1E05
1E04
1E03
1E02
e
c
n
a
r
u
d
n
E
RESET current 
energy [ A. U. ]
(a)
0.1
1
The energy of programming 
current used for margin 0uA
2.3
The energy of programming 
current used for margin 2.0uA
10
(b)
Figure 4. The dependence of (a) power consumption and (b) endurance on resistance margin 
IV. HELMET: HARDENING RESISTANCE DRIFT WITH MINIMIZED 
POWER AND ENDURANCE IMPACT 
In this Section, we propose cross-layer techniques that span 
microarchitecture- and system- levels to cost-effectively enhance 
MLC-PCM resilience to resistance drift. 
A. 
Data
MLCs
Data
MLCs
Data
MLCs
Data Inversion and Rotation 
0101
1010
Invert
0110
(a)
Rotate
0011
Drift-insensitive state “11”
Less drift-sensitive state “10”
Highly drift-sensitive state “01”
Drift-insensitive state “00” 
01
10
(b)
1010
00
110101
Rotate
Invert
1100
1010
(c)
Figure 5. Using bit- inversion, rotation or the combination of both to convert 
the original data to drift-tolerant one 
As drift shows a strong correlation with the data pattern, this 
motivates  the  development  of  an  adaptive  data  inversion  and 
rotation scheme to convert the original pattern to a drift-tolerant 
one. The key idea is to store the majority of values in their drift-
insensitive formats (e.g. “00” or “11”) rather than drift-sensitive 
format (e.g. “01” or “10”) by selectively applying bit- inversion, 
rotation,  or  a  combination  of  both.  Among  those,  bit  inversion 
changes the states of all bits to the opposite states. For example, 
given  the  data  “0101”  stored  in  two  MLCs  in  Figure  5-a,  both 
cells  are  programmed  to  the  intermediate  state  “01”.  This  high-
resistance state “01” is more likely to drift to a wrong state than 
its  inverted  state  “10”,  which  is  of  relatively  lower  resistance 
level. Therefore, storing the inverted data “1010”, rather than the 
original one, can decrease the probability of drift-induced readout 
errors. Note that data inversion doesn’t change the total number 
of  drift-  insensitive  or  sensitive  states  before  and  after  the 
inversion.  This  is  because  the  bit  inversion  of  “00”  and  “01”  is 
“11”  and  “10”  respectively,  and  vice  versa.  Nevertheless,  data 
inversion may reduce the number of highly drift-sensitive states 
by converting them to less drift-sensitive states when the former 
dominates  the  latter  in  terms  of  occurrence  frequency.  Data 
inversion  performs  well  in  this  case,  whereas  its  benefit 
diminishes  as  these  two  states  become  balanced,  such  as  data 
“0110”  and  “1001”.  In  such  cases,  rotation  can  be  used  as  an 
alternative to alter the pattern to make it drift friendly. Note that a 
rotation  of  an  odd  number  of  bit  positions  can  change  the  bit-
pattern stored in a 2-bit-per cell PCM, while rotating by an even 
number of bit positions cannot. Taking the “0110” in Figure 5-b 
as an example, right rotation by one bit position changes the data 
to  “0011”.  Consequently, 
two  multi-level  cells  are 
programmed  to  the  RESET  and  SET  states  respectively,  which 
are  drift-insensitive.  The  same  applies  to  another  data  pattern 
“1001”. Moreover, similar to data inversion, rotation is also able 
to reduce the number of highly drift-sensitive states. For instance, 
the  rotation  of  “0101”  produces  “1010”.  Thus,  different  than 
inverting, rotating can not only convert highly drift-sensitive state 
to less drift-sensitive state but also change the states from drift-
sensitive  to  drift-insensitive.  By  applying  both  inversion  and 
rotation  simultaneously,  further  benefits  can  be  achieved  as  is 
shown  in  Figure  5-c.  Although  both  data  inversion  and  rotation 
are  able  to  change  the  bit-pattern  to  improve  tolerance  to  drift, 
they  can  also  degrade  the  read  reliability  when  applied  blindly. 
For instance, data inversion may cause increased vulnerability to 
drift  in  the  case  when  the  less  drift-sensitive  state  occurs  more 
frequently than the highly drift-sensitive states. Data rotation may 
change  the  state  from  drift-insensitive  to  drift-sensitive,  such  as 
from “0011” to “0110”. Therefore, both bitwise operations need 
to  be  applied  selectively,  depending  on  the  pattern  presented  in 
the original data.  
the 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:27:46 UTC from IEEE Xplore.  Restrictions apply. 
201In  this  study,  we  propose  an  adaptive  data  inversion  and 
rotation  scheme  which  selectively  applies  inversion,  rotation  or 
the combination of both on the original data and update the PCM 
memory array with the resulting data, referred to as coded data. 
To achieve this, we augment the MLC-PCM memory controller 
with a Data Manipulation Unit (DMU) shown in Figure 6, which 
performs the pattern inspection and alteration of the original data. 
When a page is evicted from DRAM buffer and to be written into 
the PCM storage, it is divided into data blocks. Each data block is 
of  the  same  size  as  a  write  queue  entry  and  is  inserted  into  the 
write  queue  in  the  PCM  memory  controller.  We  assume  each 
write  queue  entry  is  of  the  same  size  as  a  cache  line. 
Subsequently,  DMU  takes  the  original  data  in  an  entry  of  the 
write queue as input and produces encoded data, which is used to 
replace  the  original  data  in  the  write  queue  to  be  written  to 
memory. Inside the DMU, by applying inversion, rotation or both 
on the data segment separately, we track the distribution of logic 
levels in each resulting coded data segment as well as the original 
data segment and attribute a high weight to drift-insensitive state 
and  a  low  weight  to  drift-sensitive  states.  Then  the  coded  data 
segment  or  the  original  data  that  has  the  highest  total  weight  is 
chosen  as  the  final  coded  data.  Note  that  [1]  proposed  a  partial 
write scheme for optimizing PCM power and endurance and we 
assume a similar scheme is applied on the PCM storage. We track 
the data blocks that are modified in DRAM buffer and only write 
back  dirty  data  blocks  to  PCM  storage  when  a  page  is  evicted 
from the DRAM.  
DRAM Buffer
Rotate
Invert
t
i
b
_
e
t
a
t
o
R
t
i
b
_
t
r
e
v
n
I
l
o
r
t
n
o
C
_
e
t
a
t
o
R
_
t
r
e
v
n
I
Invert_Rotate_Table
Invert_bit
Rotate_bit
d
a
o
L
t
e
a
d
p
U
t
i
b
_
e
t
a
t
o
R
t
i
b
_
t
r
e
v
n
I
Original 
Data
Coded 
Data
Original 
Data
Coded 
Data
Coded 
Data
Coded 
Data
e
u
e
u
Q
e
t
i
r
W
)
U
M
D
(
t
i
n
U
n
o
i
t
l
i
a
u
p
n
a
M
a
a
D
t
MLC-PCM Memory Controller
MLC-Phase Change Memory
Figure 6. An overview of microarchitectural support for  
data inversion and rotation 
In order to restore the coded data back to the original value 
upon a memory access from the DRAM or write-back to disk, we 
use a table, Invert_Rotate_Table, which tracks the status of each 
coded data block aligned on cache line boundaries, as is shown in 
Figure 6. There are two bits in each entry of the table: Invert_bit 
and  Rotate_bit.  The  Invert_bit  indicates  whether  the  associated 
coded  data  segment  has  been  inverted  or  not  (e.g.  “1”:  inverted 
and  “0”:  non-inverted)  and  Rotate_bit  records  whether  the 
rotation is performed on it or not (e.g. “1”: rotated by one bit and 
“0”:  non-rotated).  The  entry  of  the  Invert_Rotate_Table  is 
updated by DMU, which determines the bit operations performed 
on the original data. Note that [4] proposed a simple line shifting 
mechanism, which performs a rotation on a per-byte basis to even 
out  the  write  within  a  PCM  block,  whereas  the  rotation  in  our 
study is on a per-bit basis with the aim of altering the bit-pattern 
stored in multi-level cells. By using a rotation granularity of 9bits 
(1byte+1bit=9bits),  both  wear-out  leveling  and  pattern  change 
can be achieved simultaneously. Upon a memory reference from 
the  DRAM,  a  lookup  in  Invert_Rotate_Table  is  performed  and 
the result is loaded into the register Invert_Rotate_Control, which 
invokes the necessary operations to restore the coded data back to 
its original format. A similar procedure applies for writing back 
data from the PCM storage to the disk and then the entry in the 
Invert_Rotate_Table is reset to zero. 
storage 
controller 
inside  memory 
 To  implement  the  proposed  scheme,  we  use  dedicated 
DRAM-based 
for 
Invert_Rotate_Table. For a MLC-PCM with an effective capacity 
of  2GB  and  a  cache  design  with  64-byte  cache  line  size, 
Invert_Rotate_Table  requires  an  8MB  storage  capacity  with  an 
area overhead of 3%1† of total memory die area and an additional 
less  than  3%  of  PCM  power  consumption.  Note  that  this  8MB 
Invert_Rotate_Table  is  designed  in  the  same  way  as  the 
conventional DRAM. An entire row of DRAM cells is read out 
from  the  memory  array  to  a  buffer  and  then  the  desired  pair  of 
inversion  and  rotation  bits  is  selected.  The  open-page  policy  is 
employed on this DRAM so that we can benefit from the access 
locality,  since  inversion  and  rotation  bits  for  adjacent  memory 
blocks  are  retrieved  in  a  single  table  access.  Alternatively,  the 
Invert_Rotate_Table  can  be  implemented  using  a  software 
approach by extending the page table data structure inside the OS. 
As  each  page  frame  contains  64  (4KBper  page  ÷  64B  per  data 
block= 64) data blocks, the page table entry can be extended by 
16Byte  (2bits-per-data-block  ×  64  data-block-per-page  ÷  8bits-
per-byte = 16Byte) to store the Invert_bit and Rotate_bit bits. In 
addition,  the  TLB  entry  is  also  extended  by  16Byte  so  that 
Invert_bit and Rotate_bit bits can be loaded into TLB to avoid the 
long latency of table lookup in the memory. To support the data 
inversion  and  rotation  operations,  we  adopt  a  hardware-assisted 
design with an estimated less than 1% area overhead of memory 
die  area,  a  latency  of  45ns  and  a  212mW  power  consumption. 
Note 
is  performed 
simultaneously  with  the  memory  access  and  its  latency  (i.e. 
conservatively estimated to be 25ns) is smaller than that of PCM 
access 
the 
Invert_Rotate_Table lookup doesn’t increase the latency of each 
memory access, whereas we assume a 5ns additional latency for 
each PCM access due to the delay in restoring the coded data to 
the original one. This extra latency in bit flipping and rotating can 
cause  performance  degradation  and  its  power  overhead  can 
further  exacerbate  PCM  high  power  issue.  Nevertheless,  we 
observed a noticeable power and performance improvement (see 
Section VI.A for details). This is because of two reasons: 1) the 
drift-insensitive  states 
in 
programming  since  the  SCU  sequence  is  only  required  for 
intermediate  states;  2)  the  lower  readout  error  rate  incurs  less 
performance penalty in correcting errors.  
B. 
in  Section  VI).  Thus 
less  power  and  delay 
(i.e.  48ns  detailed 
Invert_Rotate_Table 
Hybrid SLC/MLC 
require 
that 
the 
lookup 
Although  MLC  provides  more  capacity,  it  is  susceptible  to 
resistance drift. On the contrary, drift is not critical for SLC and it 
can even improve the read reliability by enlarging the resistance 
margin  between  RESET  and  SET  states.  In  this  paper,  we 
propose a hybrid SLC/MLC PCM design that allows (1) MLCs to 
operate in the SLC mode, and (2) the operating mode to switch 
from the MLC mode to the SLC mode on a per-page basis. In this 
study, we assume a page frame size of 4KB and storing the data 
of a page frame requires 32K SLCs or 16K 2-bit-per-cell MLCs. 