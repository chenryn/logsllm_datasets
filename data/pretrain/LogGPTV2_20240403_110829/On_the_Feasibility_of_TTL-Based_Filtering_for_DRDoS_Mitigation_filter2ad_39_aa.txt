title:On the Feasibility of TTL-Based Filtering for DRDoS Mitigation
author:Michael Backes and
Thorsten Holz and
Christian Rossow and
Teemu Rytilahti and
Milivoj Simeonovski and
Ben Stock
On the Feasibility of TTL-Based Filtering
for DRDoS Mitigation
Michael Backes1, Thorsten Holz2, Christian Rossow3, Teemu Rytilahti2(B),
Milivoj Simeonovski3(B), and Ben Stock3(B)
1 CISPA, MPI-SWS, Saarland University, Saarland Informatics Campus,
2 Horst G¨ortz Institute for IT-Security, Ruhr University Bochum, Bochum, Germany
Saarbr¨ucken, Germany
PI:EMAIL
3 CISPA, Saarland University, Saarland Informatics Campus, Saarbr¨ucken, Germany
PI:EMAIL, PI:EMAIL
Abstract. A major disturbance for network providers in recent years
have been Distributed Reﬂective Denial-of-Service (DRDoS) attacks. In
such an attack, the adversary spoofs the IP address of a victim and sends
a ﬂood of tiny packets to vulnerable services. The services then respond
to spoofed the IP, ﬂooding the victim with large replies. Led by the idea
that an attacker cannot fabricate the number of hops a packet travels
between ampliﬁer and victim, Hop Count Filtering (HCF) mechanisms
that analyze the Time-to-Live (TTL) of incoming packets have been pro-
posed as a solution.
In this paper, we evaluate the feasibility of using HCF to mitigate
DRDoS attacks. To that end, we detail how a server can use active prob-
ing to learn TTLs of alleged packet senders. Based on data sets of benign
and spoofed NTP requests, we ﬁnd that a TTL-based defense could block
over 75 % of spoofed traﬃc, while allowing 85 % of benign traﬃc to pass.
To achieve this performance, however, such an approach must allow for
a tolerance of ±2 hops.
Motivated by this, we investigate the tacit assumption that an
attacker cannot learn the correct TTL value. By using a combination
of tracerouting and BGP data, we build statistical models which allow
to estimate the TTL within that tolerance level. We observe that by
wisely choosing the used ampliﬁers, the attacker is able to circumvent
such TTL-based defenses. Finally, we argue that any (current or future)
defensive system based on TTL values can be bypassed in a similar fash-
ion, and ﬁnd that future research must be steered towards more funda-
mental solutions to thwart any kind of IP spooﬁng attacks.
Keywords: IP spooﬁng · Hop count ﬁltering · Reﬂective Denial-
of-Service
1 Introduction
One of the major hassles for network provides in recent years have been so-called
Distributed Reﬂective Denial-of-Service (DRDoS) attacks [5]. In these attacks,
c(cid:2) Springer International Publishing Switzerland 2016
F. Monrose et al. (Eds.): RAID 2016, LNCS 9854, pp. 303–322, 2016.
DOI: 10.1007/978-3-319-45719-2 14
304
M. Backes et al.
an attacker poses as its victim and sends a ﬂood of tiny packets to vulnerable
services which then respond with much larger replies to the victim. This is
possible because the Internet Protocol (IP) does not have means to protect
against forgery of source addresses in its packets, so-called IP spooﬁng. A variety
of diﬀerent UDP-based protocols have been known to be vulnerable for this
category of attacks for long [22], but despite the eﬀorts to locate and shut down
vulnerable services, they remain a problem even today.
To ensure that a server does not become unwilling participant in a DRDoS
attack, an appealing defense is to detect spoofed packets at the recipient. One
such technique is to validate certain IP header ﬁelds and drop packets that seem
unsound. Most promising, Cheng et al. [10] propose a technique called Hop
Count Filtering (HCF) to leverage the Time-to-Live (TTL) ﬁeld encoded in the
IP header. The intuition behind a TTL-based ﬁltering approach is that the route
of the actual source of the traﬃc and the claimed source is likely diﬀerent, i.e.,
the spooﬁng source is in a diﬀerent network than the spoofed IP address. This
is then also reﬂected in the TTL value, as the attacker’s route to the server
diﬀers from the one of the spoofed system, and hence the number of hops is
diﬀerent. Thus, it is seemingly possible to ﬁlter most spoofed traﬃc by dropping
any traﬃc which does not correspond to the expected TTL.
In this paper, we evaluate the feasibility of using HCF to defend against
DRDoS attacks. To do so, we analyze several means of probing for the TTL of
an alleged sender, using diﬀerent types of probes towards a host in question as
well as horizontal probing of its neighbors. We show that this process is prone to
errors and frequently tedious in practice, raising the need for a certain tolerance
in TTL-based defenses. More precisely, we show that an error margin of ±2 must
be allowed to enable 85 % of benign traﬃc to pass, while dropping more than
75 % of spoofed traﬃc.
Any TTL-based defense relies on the tacit assumption that an attacker can-
not learn the correct TTL when spooﬁng a packet. We, however, show that a
spooﬁng attacker can subvert TTL-based ﬁlters by predicting the TTL value—
without having access to the system or network of either server or impersonated
victim. Our idea is to leverage publicly available traceroute data to learn sub-
paths that an IP packet from IPA to IPB will take. We follow the intuition that
subpaths from IPA to any other host on the Internet are quite constant and
can be learned by the attacker. Similarly, we show that the attacker can observe
that any packet to IPB traverses a certain subpath. We augment such subpath
information with an approximation of how the packet is routed on the higher-
tier Internet layers. Given the tolerance required in TTL-based defenses, we can
estimate the initial TTL value that the attacker has to set to enable bypassing
of such defenses.
These “negative” results prove that TTL-based spooﬁng ﬁlters are unreli-
able and (if at all) a short-sighted solution only. Rather than attacking existing
defense systems, our ﬁndings conceptually show that TTL-based defenses can-
not work to thwart the outlined attacks. Hence, we see this paper as a valuable
contribution to steer future research towards more fundamental solutions, be it
On the Feasibility of TTL-Based Filtering for DRDoS Mitigation
305
alternative defenses against spooﬁng, or conceptual redesigns of the Internet and
its protocols.
To summarize, we make the following contributions:
– We discuss how a server can use active probing to measure the hops to hosts
which connect to its services (Sect. 3).
– We re-evaluate the concept of HCF to determine the necessary level of toler-
ance required for it to work in practice (Sect. 4).
– We describe a methodology which leverages previous knowledge about routing
and statistical models to estimate the number of hops between an arbitrary
victim and an ampliﬁer of the attacker’s choosing (Sect. 5).
– In doing so, we show that TTL-based defenses can be circumvented by an
attacker with as little as 40 globally distributed probes (Sect. 6).
2 Background
In this section, we discuss the background information on routing on the Internet,
Distributed Denial of Service attacks, and Hop Count Filtering as a countermea-
sure against such attacks.
2.1 Relevant Internet Technologies
The Internet is a network of interconnected sub-networks, which route packets
between them based on the established routes. These smaller networks are also
referred to as Autonomous Systems (AS). For a host in network A to connect to
a host in network B, a route must be found through potentially several diﬀerent
ASes. Traﬃc between diﬀerent autonomous systems is routed based on the Bor-
der Gateway Protocol, in which routers exchange information about accessible
IP ranges and the corresponding AS paths, i.e., routes to these ranges.
To ensure that a packet is not stuck in a routing loop, the Internet Proto-
col (IP) header contains a ﬁeld dubbed Time-to-Live (TTL). When handling a
packet, “[...] every module that processes a datagram must decrease the TTL”
and whenever a packet’s TTL value reached zero, the packet must be discarded
by the routing device [19]. In practice, the TTL is implemented as a decreas-
ing hop count. The value is initially set by the sending host and depends on
the operating system, e.g., Mac OS X uses 64, Windows 128, and while Linux
distributions nowadays mostly use 64, some even use 255 [1]. When receiving a
packet, analysis of the TTL values therefore allows to approximate the number
of routing devices the packet has passed.
The concept of TTLs can also be used to learn the exact route of a packet
(tracerouting). To that end, the initiator of the tracerouting sends an IP packet
towards the intended destination, initially setting the TTL value to 1. When this
packet reaches the ﬁrst hop, the TTL is decreased. According to the RFC, the
router must now drop the packet. In such a case, most routers will also send an
Internet Control Message Protocol (ICMP) error message to the original sender,
306
M. Backes et al.
indicating that the timeout of the packet has been exceeded. This response can
be used by the tracerouting machine to learn the IP address of the ﬁrst hop. By
repeating this process with increasing TTL values, this method can be used to
learn all IP addresses of routers on the packet’s way to its destination.
2.2 Source Spooﬁng and DRDoS
In its original design, the Internet Protocol does not feature a means of verifying
the source of a packet. Since IP packets are only directed based on the desti-
nation, an attacker may generate an IP packet with a fabricated (or spoofed)
source address. This design ﬂaw can be abused by an adversary towards several
ends. One example are Denial of Service (DoS) attacks, where an attacker tries
to either saturate the network link to a server or exhaust resources on the target
machine by, e.g., initiating a large number of TCP handshakes. To defend against
this, a network administrator may conﬁgure a ﬁrewall to drop packets from the
attacker. The attacker, however, can spoof IP packets from other machines to
bypass this defense mechanism.
Moreover, recent years have seen an increase in Distributed Reﬂective Denial
of Service (DRDoS) attacks. These attacks rely on spooﬁng packets in conjunc-
tion with services which respond to requests with signiﬁcantly larger responses.
There are a variety of vulnerable protocols (described in [22,23]), but recently,
the most nefarious attacks have been misusing protocols such as DNS, NTP,
SSDP, or chargen. As an example, the Network Time Protocol’s (NTP) monlist
feature may generate a response that is more than 4,500 times larger than the
request. To abuse this, an attacker generates a ﬂood of monlist requests to vul-
nerable servers while spooﬁng the source IP address to be that of the victim.
Subsequently, a vulnerable NTP server will send the response to the victim’s IP.
In doing so, the attacker can massively amplify his own bandwidth, while also
not revealing his real IP address in the process.
Although this kind of attack has been well-known for long [14,24] and
attempts have been made to shut down vulnerable systems used in such attacks
(e.g., [12]), they still pose a threat to online services. In order to ﬁght such
attacks, several countermeasures dating back to 2001 [17] have been proposed.
One obvious defense strategy would be to limit the number of requests a client
may issue. However, while such mechanisms may help to protect against exces-
sive abuse of a single ampliﬁer, Rossow’s [22] analysis shows that even with rate
limiting the aggregated attack bandwidth of some protocols is still an issue. This
and many other countermeasures have been evaluated and analyzed by Beitollahi
and Deconinck [7], hence we omit to discuss them further and refer the reader
to their paper. Instead, we discuss the hop count ﬁltering mechanisms relevant
for our work in the following.
2.3 Hop Count Filtering
When a packet is received, its TTL depends on (i) the initial TTL value and
(ii) the number of hops the packet has traversed. While it is easy to forge an
On the Feasibility of TTL-Based Filtering for DRDoS Mitigation
307
IP header as such, Cheng et al. [10] propose to use the TTL to detect nefarious
packets. More precisely, they assume that an attacker trying to impersonate
a speciﬁc host cannot ascertain the hop count between the spoofed host and
the recipient of the packet. Based on this assumption, they present a reactive
defense against DDoS attacks. To detect an attack in which the sender spoofs IP
addresses to conceal his true location, they ﬁrst require a period of observing the
legitimate upcoming traﬃc (learning state), where the victim builds a mapping
between the legitimate clients (IP addresses) and their respective hop count.
Once an attack is detected, the victim rejects all packets where the TTL values
do not match the recorded hop count. This way, the victim does not have to
allocate resources for handling incoming spoofed traﬃc.
To increase the accuracy of the hop count ﬁltering (HCF), Mukaddam
et al. [15] proposed a modiﬁed version of HCF that aims to improve the learning
phase. Instead of recording only one hop count value per IP, they record a list
of all possible hop count values seen in the past. They justify the need for such
an extension by arguing that the hop count may change due to the use of diﬀer-
ent routes. Indeed, such a system decreases the collateral damage by correctly
classifying legitimate traﬃc. On the other hand, however, this mechanism allows
an attacker more guesses in evasion attempts by ascertaining the correct TTL
value.
3 Re-evaluating the Feasibility of Hop-Count Filtering
As the previous work by Mukaddam et al. has shown, the original HCF approach