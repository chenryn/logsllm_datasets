B. NDisassembler: Static Binary Analyzer
NDisassembler ﬁrst converts an input binary from machine
code to assembly code and then performs analysis needed
for converting the binary into an XOM-compatible form. It
disassembles the binary in a linear sweep fashion, which
yields a larger code coverage than recursive disassembling
[21]. However,
the larger code coverage comes at a cost
of potentially mis-detecting embedded data as code (e.g.,
when such data happen to appear as syntactically correct
instructions).
NDisassembler addresses this problem via an iterative data
recognition technique. Along with this process, it also ﬁnds in-
structions that reference embedded data. The data recognition
technique is inspired by the following observations:
• Although it is difﬁcult to ﬁnd all instructions referencing
in the running
is relatively easy to locate the code that
some embedded data at a later point
program,
computes these references in the ﬁrst place.
it
• To generate position-independent binaries, compilers can
only use PC-relative addressing when emitting instruc-
tions that need to reference data inside binaries.
• AArch64 ISA only provides two classes of instruc-
tions for obtaining PC-relative values, namely the ldr
(literal) instructions and adr(p) instructions.
NDisassembler uses Algorithm 1 to construct an initial set
of embedded data (IS) and a set of reference sites (RS).
For embedded data whose size cannot be precisely bounded,
NDisassembler collects their seed addresses (AS) for further
processing. As shown in Line 5–9 in Algorithm 1, since
the load size for ldr-literal instructions is known, the
identiﬁed embedded data are added to IS. On the other hand,
the handling for adr instructions is more involved, as shown
in Line 10–27. NDisassembler ﬁrst performs forward slicing
on xn — the register which holds the embedded data address.
All instructions that have data dependencies on xn are sliced,
and xn is considered escaped if any of its data-dependent
registers is either (i) stored to memory or (ii) passed to another
function before being killed. In either case, the slicing also
stops. If not all memory dereferences based on xn can be
identiﬁed due to reference escaping, the size of the embedded
data cannot be determined. Therefore, NDisassembler only
adds the initial value of xn to AS, as a seed address (Line
24–26).
Line 10–23 of Algorithm 1 deal with the sliced instructions.
If a memory load based on xn is found, RS is updated with the
location of the original address-taking instruction. Moreover,
NDisassembler analyzes the address range for each memory
load. Note that oftentimes the address range is bounded
because embedded data are mostly integer/ﬂoating point con-
stants, or jump tables. In the former case, the start address of
308
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:26:33 UTC from IEEE Xplore.  Restrictions apply. 
Algorithm 1 Initial embedded data and references collection
INPUT:
Algorithm 2 embedded data set expansion
INPUT:
code[] - An array of disassembly output
OUTPUT:
IS - Initial set of embedded data
AS - The set of seed addresses for embedded data
RS - The set of reference sites to embedded data
IS = {}
AS = {}
RS = {}
for each (ldr-literal addr) ∈ code[] at curr do
size = M emLoadSize(ldr)
IS = IS ∪ {addr, addr+1, ..., addr+size-1}
RS = RS ∪ {curr}
end for
for each (adr xn, addr) ∈ code[] at curr do
escaped, depInsts = ForwardSlicing (xn)
unbounded = False
for each inst ∈ depInsts do
if inst is MemoryLoad then
RS = RS ∪ {curr}
addr expr = M emLoadAddrExpr(inst)
if IsBounded(addr expr) then
IS = IS ∪ {AddrRange(addr expr)}
1: procedure INITIALSETCOLLECTION
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:
27:
28: end procedure
AS = AS ∪ {addr}
end for
if escaped or unbounded then
unbounded = True
end if
end for
end if
end if
else
memory load is typically xn plus some constant offset, while
the load size is explicit from the memory load instruction. In
the latter, well-known techniques for determining jump table
size [22] are utilized. In both cases, the identiﬁed embedded
data are added into IS. However, if there is a single memory
load whose address range cannot be bounded, NDisassembler
adds the seed address to AS.
If Algorithm 1 is not able to determine the sizes of all
embedded data, the initial set (IS) is not complete. In this
case, the seed addresses in AS are expanded using Algo-
rithm 2 to construct an over-approximated set of embedded
data (DS). The core functions are BackwardExpand (line
4) and F orwardExpand (line 5). The backward expansion
starts from a seed address and walks backward from that
309
AS - The set of seed addresses for embedded data
IS - Initial set of embedded data
OUTPUT:
DS - conservative set of embedded data
DS = IS
for addr in AS do
1: procedure SETEXPANSION
2:
3:
4:
5:
6:
7:
8: end procedure
end for
c1 = BackwardExpand (addr, DS)
c2 = ForwardExpand (addr, DS)
DS = DS ∪ c1 ∪ c2
address until it encounters a valid control-ﬂow transfer in-
struction: i.e., the instruction is either a direct control-ﬂow
transfer to a 4-byte aligned address in the address space, or
an indirect control-ﬂow transfer. All bytes walked through
are marked as data and added to DS. On the other hand,
the forward expansion walks forward from the seed address.
It proceeds aggressively for a conservative inclusion of all
embedded data. It only stops when it has strong indication
that it has identiﬁed a valid code instruction. These indicators
are one of the following: (i) a valid control-ﬂow transfer
instruction is encountered, (ii) a direct control-ﬂow transfer
target (originating from other locations) is reached, and (iii)
an instruction is conﬁrmed as the start of a function [23]. In the
last case, comprehensive control-ﬂow and data-ﬂow properties
such as parameter passing and callee saves are checked before
validating an instruction as the start of a function.
Finally, DS contains nearly all embedded data that exists in
the binary. Although we could further leverage heuristics to
include undecodable instructions as embedded data, it is not
necessary because our conservative algorithms already cover
the vast majority (if not all) of them, and the rest are mostly
padding bytes which are never referenced. Theoretically, fail-
ure to include certain referenced embedded data could still
happen if a chunk of data can be coincidentally decoded as
a sequence of instructions that satisﬁes many code properties,
but in our evaluation of over 300 stripped Android system
binaries (V-A), we never encountered such a case.
RS contains a large subset of reference sites to the embed-
ded data. Since statically identifying all indirect or dynamic
data references may not always be possible, NDisassembler
leaves such cases to be handled by NMonitor.
C. NPatcher: XOM Binary Patcher
With the input from NDisassembler, NPatcher transforms
the binary in two steps. First, it relocates data out of the code
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:26:33 UTC from IEEE Xplore.  Restrictions apply. 
segment so that the code segment can be loaded to XOM
and protected against leaks and abuses. Next, it collects and
prepares the references from code (.text) to the embedded data
(.text) and to .rodata section.
Data Relocation: An intuitive design choice is to move the
executable data out of the code segment. But doing so violates
the design principle P 1 as the layout of the ELF and the offsets
of its sections will change signiﬁcantly. Another approach is
to duplicate the executable data, but this would increase binary
sizes and memory footprint signiﬁcantly, violating P 4.
Instead, NPatcher uses two different strategies to relocate
those executable data without modifying code sections or
duplicating all read-only data sections. For data located in
code segment but are separated from code text (i.e., read-
only data), NPatcher does not duplicate them in binaries but
only records their offsets as metadata, which will be used by
NLoader to map such data into read-only memory pages. For
data mixed with code (i.e., embedded data), NPatcher copies
them into a newly created data section at the end of the binary.
The rationale behind the two strategies is that read-only data
usually accounts for a large portion of the binary size and
duplicating it in binary is wasteful and unnecessary. On the
other hand, embedded data is usually of a small size, and
duplicating it in binaries does not cost much space. More
importantly, this is necessary for security reasons. Without
duplication, code surrounding data would have to be made
readable, which reduces the effectiveness of XOM.
Data Reference Collections: NPatcher only collects the ref-
erences from .text to .text (embedded data) and to .rodata
because they can be statically recognized and resolved. Other
types of references listed in Table V are either from outside
the module or statically unavailable, which are handled by
NLoader.
it
For references to embedded data, NPatcher can directly
include them based on NDisassembler’s analysis results. But
there is one caveat – the instructions used to reference em-
bedded data (i.e., adr and ldr-literal) have a short addressing
range. Therefore, when we map their target data to different
memory pages,
the instructions cannot
address or reach the relocated data. To solve this issue without
breaking P 1 (i.e., maintaining binary backward-compatibility),
NPatcher generates stub code to facilitate access to out-of-
range data. The instructions of short addressing range are
replaced with an unconditional branch instruction2, which
points to the corresponding stub entry. The stub code only
contains unconditional load and branch instructions pointing
is possible that
2ADR can address +/- 1MB, while B(ranch) can access +/- 128MB, which
is far enough for regular binaries.
310
to ﬁxed immediate offsets. This design ensures that these stub
entries cannot be used as ROP gadgets.
For references to the .rodata, there is no addressing capa-
bility problem, because adrp is used instead of adr. However,
a different issue arises. There are multiple sources from which
such references could come. We identify 5 sources in our
empirical study covering all Android system executables and
libraries. NPatcher can only prepare the locations of the ﬁrst
three ofﬂine while leaving the last two to be handled by
NLoader after relocations and symbol resolving are done.
• References from code (.text): these are usually caused
by access to constant values and strings.
• References from symbol table (.dynsym): when a sym-
bol is located in .rodata, there will be an entry in the