● An earlier project, Armitage, is a free tool by Raphael Mudge. It is often confused with the
free version of Cobalt Strike but has a very different code base
● Described as “Cobalt Strike is software for Adversary Simulations and Red Team
Operations.”
● Supports both asynchronous and synchronous C2 communication
Empire[19]
● Open source software
● Command and Control payload is known as an agent
● Described as “Empire is a pure PowerShell post-exploitation agent built on
cryptologically-secure communications and a flexible architecture.”
● Supports both asynchronous and synchronous C2 communication
● Officially retired as a project in 2019
Tweet announcing the
retirement of Empire
Metasploit
● Open source and commercial software is maintained by Rapid7
● Highly capable penetration testing and exploitation framework with some Red Team post-
exploitation support
● Command and Control payload is known as Meterpreter
● Communication is generally synchronous
Other C2
Cobalt Strike, Empire, and Metasploit are simply three C2 examples selected due to being commonly
known and widely used. In 2018 and 2019 numerous tools and frameworks for command and control
were announced and released. This trend will likely continue for future years. If building a C2
framework isn’t possible given the team’s time or budget, the authors recommend a simple search for
potential frameworks, testing of each, and selecting the framework(s) that best meet the need for the
current effort.
C2 Redirectors
C2 redirectors are pivots designed to separate communications between a target and C2 servers.
They are designed to protect the C2 servers' IP addresses from identification. Redirectors are what
the target will see as malicious. The target may observe any IP address or domain name associated
with a redirector. If a defender identifies malicious activity, they may block a redirector IP address.
Redirectors should be treated as burnable. If burned, a Red Team Operator can simply switch to an
alternate redirector for pivoting C2 traffic from the target to the C2 server.
Redirectors and C2 servers must be protected. Command and Control servers must communicate with
the target over the C2 channel, such as HTTPS on port 443. Efforts to limit (or drop) C2 connections
from unexpected networks should be made; however, this is not the only communication to a C2
server. An operator must use the C2 interface to control the server and issue commands. This must
also be protected. ACLs or other protections should be put in place only to allow access from Red
Team Operators. A responsible Red Team should not allow C2 control outside designated Red Team
IPs/Segments. Even "hacker" software is not safe.
Given that thought, proper security and access controls effectively limit the risk of new
vulnerabilities or unknown access methods in Red Team tools. For example, in September 2016, a
remote code execution flaw was found in Cobalt Strike 3.5. This flaw allowed remote code execution
on the C2 server via a malicious beacon. Effective access controls, if employed, significantly limit
the likelihood of compromise from any network other than Red Team, redirector, or target.
Virtual Private Services such as Amazon EC2, Digital Ocean, and Linode are great solutions to create
internet-accessible redirectors. Redirector servers can be easily deployed or torn down. Most
service providers offer an API that allows the deployment and destruction of redirectors to be
scripted and automated. Redirectors can be made to be highly resistant to removal or to be even more
obfuscated. Techniques such as Domain Fronting[20] take advantage of the trust in highly trusted CDNs.
A reverse HTTP proxy, such as Apache mod_rewrite, can be used to tune HTTP traffic to obfuscate
better or hide malicious traffic.
Deploying Redirectors
There are several ways to redirect traffic. Here are a couple of quick examples for Linux and
Windows ‘dumb pipe’ redirectors. A dumb pipe redirctors is the process of redircting traffic from on
TCP port to another.
Linux:
Create a cron job to start a socat script that redirects TCP 443 from the redirector to 10.10.10.10:
crontab -e
@reboot /usr/bin/socat TCP-LISTEN:443,fork / TCP:10.10.10.10:443 &
Windows:
Use the netsh command to create a persistent port redirection rule that redirects TCP 443 from the
redirector to 10.10.10.10:
netsh interface portproxy add v4tov4 listenport=443 listenaddress=10.20.20.20
connectport=443 connectaddress=10.10.10.10
There are several methods and techniques for redirection. The examples in this book focus on
exposing the need that redirectors are critical to an engagement. Red Team operators must include a
set of processes and technical approaches in the Red Team toolbox.
C2 Tiers
Designing a robust C2 infrastructure involves creating multiple layers of Command and Control.
These can be described as tiers. Each tier offers a level of capability and covertness. The idea of
using multiple tiers is the same as not putting all your eggs in one basket. If C2 is detected and
blocked, having a backup will allow operations to continue. C2 tiers generally fall into three
categories: Interactive, Short Haul, and Long Haul. These are sometimes labeled as Tier 1, 2, or 3.
There is nothing unique to each tier other than how they are used, and the deployment of redirectors is
independent of the C2 tier.
The general rules to maintain multiple tiers are:
● Maintain discipline in each tier, and use it only for its intended purpose
● Only pass or establish new sessions down
Long Haul can pass only to Short Haul or Interactive
Short can pass to Interactive
Interactive can pass only to other interactive sessions
● For each tier, use a different profile—communication type, ports, protocols, callback times,
etc.
Slow down callback time when not in use
Of course, there are exceptions to these rules. A Red Team must be flexible to achieve goals. If a rule
is violated, be aware of the exposure risks before performing an action. For example, say that a Long
Haul server dies after it is initially established. A Short or Interactive tier may be needed to
reestablish the Long Haul.
Tiers and Their Uses
Interactive (Tier 3)
● Used for general commands, enumeration, scanning, data exfiltration, etc.
● This tier has the most interaction and is at the greatest risk of exposure
● Plan to lose access from communication failure, agent failure, or Blue Team actions
● Run enough interactive sessions to maintain access (Although interactive, this doesn’t mean
blasting the client with packets). Use good judgment to minimize interaction to just enough to
perform an action
Short Haul (Tier 2)
● Used as a backup to reestablish interactive sessions.
● Use covert communications that blend in with the target.
● Slow callback times. Callback times in the 12–24 hr. range are common.
Long Haul (Tier 1)
● Used to reestablish short haul C2
● Slow callback times. Callback times of 24+ hours (often a few days) are common.
C2 Infrastructure Rules
● C2 servers do not directly communicate with targets
● Targets and C2 servers communicate through a redirector
● Tiers should be used for their intended purposes
Tier 1 – Low and slow, intended for long-term persistence
Tier 2 – Mid-speed communications, designed to reestablish interactive C2
Tier 3 – An Interactive tier designed to perform everyday commands near real
time or as operationally required
New C2 must remain at the same tier or lower (never higher):
Tier 1 – Tier1 or Tier 2
Tier 2 – Tier 2 or Tier 3
Tier 3 – Tier 3
When can you violate a rule?
The only time C2 is passed is when C2 is initially established. An Interactive tier may be used to
establish higher levels of access but is highly discouraged. There is a risk of exposing higher tiers.
Caution must be used when setting up initial access.
This diagram can help illustrate the tiers and the relationships of how to share information between
each.
C2 Multi-tier Design
Designing a C2 infrastructure is one of the most critical tasks when planning a Red Team engagement.
C2 infrastructure planning involves choosing the number and type of C2 servers, whether to use IP
addresses or domain names, the C2 protocols, and how or if to use redirectors. The decision of each
is directly related to a Red Team’s goals. If a team is engaging a target in a full-scale Red Team
operation, stealth and covert channels will be good choices.
Typical C2 Design for a Full-Scale Red Team Operation
● Three C2 servers with an Interactive tier, Short Haul server, and Long Haul server
● Multiple redirectors
● One or two carefully chosen domain names for each IP address (preferably with history and
categorization)
● Direct communication between the target and C2 does not occur. All traffic pivots through a
redirection server
● The use of common protocols on standard ports to blend (HTTP, HTTPS, SSH, DNS)
● Communications are encrypted
If a team is emulating a specific threat or trying to stimulate a Blue Team’s response, stealth may not
be as important.
Typical C2 Design for Emulating a Threat Designed to Stimulate Blue (Exercises)
● One or two C2 servers. All tiers are used for interaction with the target
● Redirectors are not in use
● IP addresses are used instead of domain names
● The target and C2 directly communicate
● The use of common protocols on standard or nonstandard ports (HTTP, HTTPS)
● Communications may or may not be encrypted
Domain Fronting
Domain Fronting is a technique developed to support the bypass of censorship by routing traffic
through legitimate and highly trusted domains. There are many services that support Domain Fronting,
including Google App Engine, Amazon CloudFront, and Microsoft Azure. How does this work?
When the traffic is received by a provider’s server, such as gmail.com, it is sent to an origin server,
such as myapp.appspot.com. This is controlled based on a specified host header in the HTTP request.
Either the origin server directly forwards traffic to a specified domain, which points to a threat-
controlled C2 server, or a custom application proxies the request to complete the forwarding.
Note: Using domain fronting has been severely limited as organizations have actively been reducing
the ability to use it. As of the writing of this book it is still an option, but like many techniques, will
change over time.
References
1. Red Team Infrastructure Wiki, https://github.com/bluscreenofjeff/Red-Team-Infrastructure-Wiki#domain-fronting.
2. Domain Fronting Via Cloudfront Alternate Domains, https://www.mdsec.co.uk/2017/02/domain-fronting-via-
cloudfront-alternate-domains/.
3. High-reputation Redirectors and Domain Fronting, https://blog.cobaltstrike.com/2017/02/06/high-reputation-
redirectors-and-domain-fronting/.
4. Finding Frontable Domains, https://github.com/rvrsh3ll/FindFrontableDomains
Key Chapter Takeaways
Engagement execution involves all efforts from the end of planning to the start of culmination and
reporting, including the build-out of infrastructure. The execution phase is simply the practical
application of the "why" and "how" from planning.
Also remember:
● Good tradecraft is more valuable than any individual capability
● Sometimes the best way to exploit a system is to avoid using exploits
● A detailed C2 plan and defined infrastructure can be the difference between a successful
and unsuccessful engagement
● Tools are enablers, nothing more
○ Know your tools and when to (or when not to) execute them
○ Ensure you understand why a tool is executed, what it does, and what indicators
(or artifacts) it provides!
● Log, log, log!
Homework
1. Expand the data handling guide to include data repository and storage guidelines
2. Develop a data collection process and workflow for operators. Consider manual and
automated collection options
3. Develop a tradecraft guidance guide
4. Develop a standard toolbox. Note: this is recommended but optional
5. Develop a command and control architecture and c2 deployment plan
Engagement Culmination
Following the execution phase, each engagement includes a series of activities required for a
successful close-out, clean-up, and final reporting. This section walks through the steps needed to
close out an engagement successfully.
Sanitization and Cleanup
All evidence of an engagement must be sanitized before Red Team departure. Any evidence
describing the nature of the attacks, vulnerabilities, results, or other information must be entirely
removed and destroyed. This clean-up includes tools and artifacts as well as reversing any
modifications to security controls that could leave an environment less secure when an engagement
ends.
In addition to system modifications, Red Teams may have the opportunity to modify or bypass security
controls. If target system security controls were disabled or modified, they must be restored as soon
as possible. These should be tracked with all other changes.
ROE is Law
The sanitization process must be documented in the ROE
prior to engagement execution. This is the best way to
ensure the clean up process is documented and, if
followed, executed appropriately.
It is desired to have all exploits, toolkits, and persistence mechanisms have self-destruct code baked
in as both time-based, to prevent execution outside the engagement window, and target-based to
prevent exploitation outside the target environment. For items that do not have built-in self-destruct
code, the Red Team should remove each individually and document the removal. When cleanup is not
possible (communications lost, system taken offline, permission, etc.), the Red Team will alert the TA
with the system name, IP address, directories, filenames, modification date, modifications made, tools
left behind, or files modified. A change tracking log should be part of every engagement's required
toolset (Note: if using the logging recommendations made earlier in the text, this tracking is captured
in the log). Systems modifications should always be expected and planned as part of an engagement.
These modifications are not only permanent changes such as dropped files or Windows registry
modifications but also in memory processes. The following quick checklist will help an engagement
lead remove all changes.
Engagement modification removal checklist
● Revert file system modifications
● Remove access mechanisms and backdoors
● Remove files dropped by an operator or operator’s tools
● Ensure file artifacts generated by the mechanism are removed.
● Examine the entire system to confirm that the mechanism was not inadvertently copied or
moved.
● Remove or restore Registry keys if used.
● Restore modified files.
● Remove or replace launch files with the originals.
● Examine startup scripts if used. Note that startup content may have changed.
● Remove execution mechanisms.
● Remove the installation mechanism.
● Copy log files generated by the mechanism to the Red Team repository and remove them
from the target system.
● Remove C2 persistence mechanisms
● Terminate C2 channels
● Continue connection monitoring for stray or missed mechanisms.
● Repeat the process for strays.
● Provide a list of all artifacts, names, hashes, locations, and their cleanup status to the TA.
Consider This
Sometimes the target organization may want specific
artifacts (perhaps all) left on the network for training or
tool and processing tuning purposes.
This must be approved and documented prior to
engagement closure. A list of all artifacts and
modifications must still be provided to the target’s
designated TA.
Operator Log Verification
Each operator must verify the completion of his or her operator logs prior to the end of an
engagement. Each must also check that all operator logs, data collected via automation, target data,
and screenshots have been appropriately named and stored in the engagement data folder.
Consider This
It’s best to perform operator log completion throughout the
engagement. An engagement lead who has operators
ensure logs are complete before the end of each day will
significantly reduce missing logs or critical screenshots.
Upon the notification of completion by the operators, the Red Team lead must review the
consolidation. If the lead is satisfied that the data is complete, they should create a hashed
compressed archive of all data. Copies made of the archive should be stored in an approved location.
This archive is can be an encrypted removable media device that maintains controlled access or any
approved location for storage of this sensitive data.
The Red Team Lead is ultimately responsible for the acceptance, review, and consolidation of
operator logs and all data. It is highly recommended that the Red Team Lead periodically check the
team's repository during engagement execution to ensure that records are being completed, data is
being appropriately named and stored, and logs reflect adherence to the ROE.
Log Completion Checklist
● Ensure completion of all operator logs
● Ensure consolidation of all logs
● Ensure consolidation of data collected automatically
● Ensure consolidation of target data
● Red Team Lead review and acceptance
● Archive (Tar/Zip) and hash all data
Pre-Report Briefings
It is recommended to perform a closeout brief following the final day of the engagement. This brief
will likely not include much of the detail in the final report; however, it should allow the Red Team to
provide the target with a high-level overview of the access gained correlated to the significant
observations of the engagement, general feedback, and general recommendations.
Executive Outbrief
At the end of an engagement's execution, a target organization typically needs (and often warrants) a
summary of the event. Waiting for a final report can keep the target out of the loop for too long. If
logging and data collection were performed correctly (as it should have been), this would not be a
difficult task.