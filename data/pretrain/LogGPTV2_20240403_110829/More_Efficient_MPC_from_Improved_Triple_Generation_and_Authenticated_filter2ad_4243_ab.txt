2.31
40.55
6.37
48
75
Table 1: Comparison of the best prior implementation and ours for generating an authenticated AND
triple. All reported numbers are the running time, in microseconds (µs), to generate one authenticated AND
triple. All experiments are performed with machines with 10 Gbps network bandwidth and 36 vCPUs. Both
implementations are applied with the same level of code optimizations.
These computation and communication overheads become increasingly prominent as the need of malicious
security emerges in real life. However, as numerous prior works have extensively studied approaches to op-
timize this paradigm recently [WRK17a, WRK17b, HSS17, HIV17, KRRW18, ZCSH18], any improvement
requires novel insights and careful analysis of the protocol.
1.1 Our Contributions
In this paper, we present a set of improvements to the distributed garbling paradigm for constant-round MPC
protocols tolerating an arbitrary number of malicious corruptions. Our implementation shows signiﬁcant
performance boost compared to the best prior work. See Table 1 for a selected set of comparison points and
Section 5 for more details. Below we summarize our results and provide intuitions of our ideas in Section 2.
First, we design a new authenticated AND triple (aAND) protocol from scratch with improved efﬁciency.
To exploit every possible improvement, we start our analysis from the most basic building blocks, within
the KOS protocol [KOS15] for maliciously secure OT extension. Our improvements can be directly applied
right out of the box to many MPC protocols that need authenticated AND triples [WRK17a, WRK17b,
HSS17, KRRW18, ZCSH18, AOR+19, RW19, DEF+19]. In detail, we improve three key components in
the protocol.
– Improved multi-party authenticated bit. The state-of-the-art protocol [NST17] for each authenticated
bit (aBit) requires (κ + ρ)-bit communication and a high computational cost due to the use of bit-matrix
multiplication and multiple checks for correlation and consistency. As an evidence, two-party authenti-
cated bit is about 3× slower than the ordinary maliciously secure OT extension even when running over
a local host [Rin].
We propose a new multi-party authenticated bit protocol directly based on the bare IKNP OT exten-
sion [IKNP03, ALSZ13] with a small harmless leakage. Our new protocol reduces the communication
per aBit from (κ + ρ) bits to κ bits and eliminates all sources of slowdown mentioned above. See Sec-
tion 2.2 for more elaboration.
– Improved multi-party authenticated share. Multi-party authenticated share (aShare) is another key
building block towards aAND (See Section 2.3). The previous protocol [WRK17b] for multi-party au-
thenticated shares needs to repeat a checking procedure ρ times, to boost the soundness error from 2−1
to 2−ρ. We propose an improved checking procedure based on the re-randomization idea by Hazay et
al. [HSS17] where a single check is sufﬁcient.
– Improved multi-party leaky AND triple. Leaky authenticated AND triple (LaAND) is yet another
important building block towards fully secure AND triples. We reduce the number of hash function calls
by a factor of 2× when computing leaky AND triples and show that the security preserves even given the
leakage introduced in aBit as above. See Section 2.4 for more details.
4
By applying the above optimizations, we can reduce the communication cost of authenticated AND triple
generation by ≈ 24%. Our implementation shows that in most settings, it leads to an improvement of
running time by 4× to 5× in both the two-party and the multi-party settings. See Table 1 for a performance
summary.
Our next bundle of optimizations are speciﬁc to the WRK multi-party authenticated garbling [WRK17b]
with an emphasize on the function-dependent phase.
– Towards multi-party half-gates. Although it is known how to distributively compute the half-gates
scheme [ZRE15] in the two-party setting [KRRW18], the multi-party setting is completely open. Here
we partially enables half-gates in the multi-party setting and reduce the size of a distributed garbled
circuit from each garbler by 2κ bits per gate. Our technique here is also applicable in the semi-honest
setting [BLO16]. See Section 2.5 for a high-level description.
– Improved circuit authentication. Katz et al. [KRRW18] proposed an efﬁcient way to authenticate dis-
tributed garbled circuits using the amortized MAC check in the two-party setting. However, it does not
directly apply to settings with more than two parties. To obtain similar efﬁciency in the multi-party
setting, we design a new batched circuit authentication based on almost universal linear hash func-
tions [CDD+16]. The resulting solution improves the communication from 4ρ bits to 1 bit per gate.
See Section 2.6 for more discussion.
As a result, for example in the three-party setting, our optimizations result in an about 35% reduction in
communication for function-dependent phase.
1.2 Discussion of Some Related Works
Recently, Boyle et al. [BCG+19] presented a maliciously secure protocol that can be used to realize cor-
related OT with sublinear communication. In the two-party setting, their protocol can be used to further
reduce the communication of our protocol. Based on their performance benchmark, it would be faster
than the KOS OT extension [KOS15] when the network bandwidth is below 500 Mbps. In the same se-
curity setting, Hazay, Venkitasubramaniam, and Weiss [HVW20] recently proposed a maliciously secure
MPC protocol with constant communication overhead over the semi-honest GMW protocol, which implies
constant-round MPC based on BMR distributed garbling, while our protocol has a communication overhead
of O (ρ/log |C|). However, their result remains mostly theoretical and here we are mainly interested in the
practical efﬁciency.
1.3 Organization
In Section 2, we introduce important concepts and building blocks needed for our constructions. We also
present the intuitions about how our improvements work. Then in Section 3 and Section 4, we describe
in detail the improved protocol for authenticated AND triples and the improved multi-party authenticated
garbling protocol, respectively. Finally, in Section 5, we discuss the concrete efﬁciency gain of the protocol.
We defer some basic concepts and protocols/proofs to Appendix and our full version [YWZ19].
2 Background and Technical Overview
In this section, we introduce some background information on the state-of-the-art protocols for authenticated
AND triples and authenticated garbling. Alongside, we also provide high-level ideas on how our work
improves these protocols. In Appendix A, we describe more commonly known preliminaries, including
two useful functionalities FCom and FRand for commitments and coin-tossing respectively, almost universal
linear hash functions, and the amortized opening procedure of authenticated bits/shares.
5
2 and F2κ interchangeably, and thus addition in Fk
2.1 Notation
We use κ and ρ to denote the computational and statistical security parameters respectively. We use a ← S
to denote sampling a uniformly at random from a ﬁnite set S. We will use [n] to denote the set {1, . . . , n}.
For a bit-string x, we use lsb(x) to denote the least signiﬁcant bit of x, and x[k] to denote the k-th bit of
x. Depending on the context, we use {0, 1}k, Fk
2 and F2κ
corresponds to XOR in {0, 1}κ. We use bold lower-case letters such as x ∈ Fk
2 to denote a vector, and x[k]
to denote the k-th component of x. We will use a hash function H : {0, 1}∗ → {0, 1}κ modeled as a random
oracle. We use negl(·) to denote some unspeciﬁc negligible function such that negl(κ) = o(κ−c) for every
constant c. We write F2κ ∼= F2[X]/f (X) for some monic, irreducible polynomial f (X) of degree κ. We
denote by P1, . . . , Pn the parties.
A boolean circuit C is represented as a list of gates of the form (α, β, γ, T ), which denotes a gate with
input-wire indices α and β, output-wire index γ and gate type T ∈ {⊕,∧}. By |C|, we denote the number of
AND gates in a circuit C. We use Ii to denote the set of circuit-input wire indices with the input from party
Pi, W to denote the set of output wire indices for all AND gates, and Oi to denote the set of circuit-output
wire indices associated with the output of Pi. Without loss of generality, we assume that the input and output
of all parties have the same length, i.e., |I1| = ··· = |In| and |O1| = ··· = |On|. We use |I| and |O| to
denote the length of all circuit-input wires and circuit-output wires respectively. Our MPC protocol will use
H({Zw}w∈W ) to denote H(Zw1, . . . , Zw|C|) for Zw ∈ {0, 1}κ, where here w1, . . . , w|C| are the sorted output
wire indices of all AND gates in an increasing order.
In this paper, we consider a static, malicious adversary who can corrupt up to n − 1 out of n parties. We
use A ⊂ [n] to denote the set of all corrupt parties. All our protocols allow abort, and are provably secure in
the standard simulation-based security model [Gol04]. Our protocols need a broadcast channel, which can
be efﬁciently implemented using a standard 2-round echo-broadcast protocol [GL05] as we allow abort. The
communication of this broadcast protocol can be optimized in a batch [DPSZ12] by using either an almost
universal linear hash function or a collision-resistant hash function.
2.2 Multi-Party Authenticated Bits
Authenticated bits (or equivalently information-theoretic MACs) were ﬁrstly proposed for maliciously se-
cure two-party computation by Nielsen et al. [NNOB12], and can also be extended to the multi-party set-
ting [BDOZ11, LOS14]. Every party Pi holds a uniform global key ∆i ∈ {0, 1}κ. We say that a party Pi
holds a bit x ∈ {0, 1} authenticated by Pj, if Pj holds a random local key Kj[x] ∈ {0, 1}κ and Pi holds
the MAC Mj[x] = Kj[x] ⊕ x∆j. We write [x]j
i = (x, Mj[x], Kj[x]) to represent a two-party authenti-
cated bit where x is known to Pi and authenticated to only one party Pj. In the multi-party setting, we let
[x]i = (x,{Mj[x]}j(cid:54)=i,{Kj[x]}j(cid:54)=i) denote a multi-party authenticated bit, where the bit x is known by Pi
and authenticated to all other parties. In more detail, Pi holds (x,{Mj[x]}j(cid:54)=i), and Pj holds Kj[x] for j (cid:54)= i.
We note that [x]i is XOR-homomorphic. That is, for two authenticated bits [x]i and [y]i held by Pi, it
is possible to locally compute an authenticated bit [z]i with z = x ⊕ y by each party locally XOR their
respective values. That is, Pi computes z := x ⊕ y and {Mj[z] := Mj[x] ⊕ Mj[y]}j(cid:54)=i; Pj computes
Kj[z] := Kj[x] ⊕ Kj[y] for each j (cid:54)= i. We use [z]i := [x]i ⊕ [y]i to denote the above operation. As such,
[x]j
i is also XOR-homomorphic.
With a slight abuse of the notation, we can also authenticate a constant bit b: Pi sets {Mj[b] := 0}j(cid:54)=i;
Pj sets Kj[b] := b∆j for each j (cid:54)= i. Similarly, let [b]i = (b,{Mj[b]}j(cid:54)=i,{Kj[b]}j(cid:54)=i). Now we can write
[x]i ⊕ b = [x]i ⊕ [b]i, and let b[x]i be equal to [0]i if b = 0 and [x]i otherwise.
Prior solution. Prior solution for multi-party authenticated bits is very complicated, involving the following
steps to generate a bit known by Pi and authenticated to all other parties:
1. First, using the maliciously secure KOS OT extension [KOS15], Pi computes random correlated strings
with Pj, e.g., Mj[x] and Kj[x] such that Mj[x] ⊕ Kj[x] = x∆j. This includes an IKNP OT exten-
6
sion [IKNP03, ALSZ13] followed by a KOS correlation check [KOS15] for the consistency of the
choice-bit vector. The correlation check is leaky in which it allows the adversary to guess a few bits
of Pj’s global key ∆j.
2. To establish two-party authenticated bits, Nielsen et al. [NST17] proposed a way to eliminate the above
leakage. We can execute the ﬁrst step to obtain random correlated strings of length (κ + ρ) bits. Then,
we can use a random bit matrix to compress the bit string to κ bits and at the same time eliminate the
leakage.
3. To generate multi-party authenticated bits for Pi, we can execute the above two steps between Pi and each
other party, where the KOS correlation check and bit-matrix multiplication compression are executed
n − 1 times for each authenticated bit.
4. The above procedure for multi-party authenticated bits is not fully secure, as a malicious Pi may use
inconsistent bits when executing the two-party authenticated bit protocol with different parties. Wang et
al. [WRK17a] designed an extra consistency check that allows honest parties to catch such inconsistent
behavior with probability 1/2. The check needs to be repeated by ρ times to ensure a cheating probability
of 1/2ρ.
In practice, the above steps are very costly in computation. Different layers of consistency checks and com-
pression cause heavy computation and require the data to ﬂow through the CPU cache back and forth. The
computation of bit-matrix multiplication is particularly expensive, even after carefully optimized. For ex-
ample, libOTe [Rin] shows that two-party authenticated bit is about 3× slower than the ordinary maliciously
secure OT extension even when running on the same machine.
Our solution. Towards improving the efﬁciency of the above protocol, we make the following crucial
observations:
1. The leakage caused by the KOS correlation check is harmless in our setting because, intuitively, the
resulting correlated strings will be used either for authentication or for constructing distributed garbled
circuits, where learning all bits of a global key is required to break the security. In particular, an adversary
can guess a few bits of honest parties’ global keys but get caught if any guess is incorrect. Therefore, the
probability that the protocol does not abort and the adversary learns the whole global key is bounded by
2−c × 2−(κ−c) = 2−κ for the leakage of c bits, which is the same as the case without such leakage.
2. The two consistency checks are of similar goals and thus one may already achieve the goal of the other.
In detail, both checks aim to ensure that a malicious receiver uses consistent choice bits: the ﬁrst KOS
consistency check is to ensure that a unique choice-bit vector is used among all columns of the extension
matrix within one execution between two parties such that the unique choice-bit vector can be extracted
by the simulator; while the second multi-party check is to ensure that a consistent choice-bit vector is
used across two or more executions between multiple parties.
As a result, we propose an improved multi-party authenticated bit protocol that allows the adversary to
guess a small number of bits of the global keys of honest parties with the risk of being caught if any guess is
incorrect. The protocol consists of only two steps: 1) Pi executes the IKNP OT extension protocol [ALSZ13]
with every party Pj for j (cid:54)= i; 2) All parties jointly execute a single check that serves both purposes
of correlation check and consistency check in the prior work. The check works similarly with the KOS
correlation check, except that it is done jointly by all parties in a batch.
Compared with prior solutions, we improve the communication overhead and computation cost per
authenticated bit as follows: 1) reduce the communication from κ + ρ bits to κ bits; 2) reduce the number
of base OTs between each pair of parties from κ + ρ to κ; 3) eliminate the need of bit-matrix multiplication,
7
as well as the multi-party consistency check. The detailed protocol and proof of security can be found in
Section 3.1.
2.3 Multi-Party Authenticated Shares
In most cases, authenticating a bit known to one party is not sufﬁcient. We would like a way to authenticate
a bit unknown to all parties, which can be done by secret sharing together with authenticating each share. In
detail, to generate an authenticated secret bit x, we can generate XOR shares of x (i.e., shares {xi}n
i=1 such
i=1 xi = x), and then ask every party to authenticate to every other parties about their shares. We use
that(cid:76)n
(cid:104)x(cid:105) =(cid:0)[x1]1, . . . [xn]n
(cid:0)xi,{Mj[xi], Ki[xj]}j(cid:54)=i
For a constant bit b ∈ {0, 1}, we let (cid:104)x(cid:105) ⊕ b =(cid:0)[x1]1 ⊕ b, [x2]2, . . . , [xn]n
(cid:1) to denote an authenticated share of bit x, i.e., (cid:104)x(cid:105) means that every party Pi holds
(cid:1). It is straightforward to see that authenticated shares are also XOR-homomorphic.
(cid:1), and deﬁne b(cid:104)x(cid:105) to be equal to
(cid:104)0(cid:105) = ([0]1, . . . , [0]n) if b = 0 and (cid:104)x(cid:105) otherwise.
Prior solution. In prior works, authenticated shares are constructed by letting each party execute the au-
thenticated bit protocol with their only shares of the secret bit. However, since every party participates in
multiple authentication processes, it is possible that a malicious party uses different global keys in multiple
executions of the authenticated bit protocol with different parties, and thus causes the inconsistency. In
WRK [WRK17b], they proposed a protocol to check the consistency of global keys by making use of the
XOR-homomorphic property of authenticated bits. Their checking protocol requires each party to compute
2ρ + 1 commitments.
Our solution. Based on the re-randomization technique by Hazay et al. [HSS17], we improve the WRK
consistency check for authenticated shares by reducing the number of commitments from 2ρ + 1 to 1. In
particular, we use a linear map that maps κ random shares of a party Pi to a random element yi in F2κ. Then
we use a random zero-share to re-randomize each element yi. To prevent the collusion, each party needs
to make only a single commitment. Note that the inconsistency may occur only when there are at least two
honest parties. In this case, yi is kept secret from the re-randomization based on zero-share, which assures
the consistency of global keys.
The checking procedure can also be efﬁciently implemented given hardware support for ﬁnite ﬁeld
Improved Authenticated AND triples
multiplications. See Section 3.2 for the detailed protocol and proof of security.
2.4
The protocol for leaky authenticated AND triples is to generate a random authenticated AND triple(cid:0)(cid:104)x(cid:105),(cid:104)y(cid:105),
(cid:104)z(cid:105)(cid:1) with one caveat that the adversary can choose to guess the share xi of an honest party Pi. A correct
guess remains undetected, while an incorrect guess will be caught.
Prior solution. The multi-party leaky AND triple protocol by Wang et al. [WRK17b] consists of two steps:
1) the parties execute a protocol to generate AND triples without correctness guarantee; 2) all parties run a
checking procedure to ensure correctness, which also introduce some potential leakage to the adversary. Re-
cently, Katz et al. [KRRW18] proposed an efﬁcient checking protocol reducing the number of hash function
calls by half in the two-party setting. The key idea is to apply the point-and-permute technique [BMR90]
for garbled circuits to the context of AND triple generation. They integrated the above two steps into one as
the least signiﬁcant bit can represent the underlying share.
Our solution. We extend their idea from two-party setting to the multi-party setting. The extension of the
protocol is fairly straightforward; nevertheless, we believe it is an important task to ﬁgure out all details of
the security proof. We give the protocol description and a full proof that the protocol is still provably secure
given the leakage of global keys introduced as above in Appendix D.1.
2.5
Improved Distributed Garbling with Partial Half-Gates
Classical and half-gates garbling. The classical garbling with point-and-permute [BMR90] and free-
8
XOR [KS08] requires 4 garbled rows per AND gate. Let P2 and P1 be the garbler and evaluator respectively.
Each wire w is associated with a random garbled label Lw,0 ∈ {0, 1}κ and a wire mask λw ∈ {0, 1} both
known only to the garbler. The garbled label for a bit b is deﬁned as Lα,b = Lα,0 ⊕ b∆2, where ∆2 is a
random global offset only known to P2. The garbled table computed by P2, namely {Guv}u,v∈{0,1}, for an
AND gate (α, β, γ,∧) consists of four garbled rows in the following form
Guv := H(Lα,u, Lβ,v) ⊕ Lγ,0 ⊕ ruv∆2,
where ruv = (u ⊕ λα) ∧ (v ⊕ λβ) ⊕ λγ, and we omit γ in H for simplicity. Half-gates by Zahur et
al. [ZRE15] is the state-of-the-art garbling scheme that only requires 2 garbled rows per AND gate. In this
case, the garbled table can be written as:
G0 :=H(Lα,0) ⊕ H(Lα,1) ⊕ λβ∆2,
G1 :=H(Lβ,0) ⊕ H(Lβ,1) ⊕ Lα,0 ⊕ λα∆2.
Garbler P2 can compute the 0-label for the output wire as:
Lγ,0 := H(Lα,0) ⊕ H(Lβ,0) ⊕ (λαλβ ⊕ λγ)∆2.
Classical and half-gates two-party distributed garbling. Following the previous observation by Katz et