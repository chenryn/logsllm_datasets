Signature
Signature
Signature
Signature
VRF
VRF
VRF
VRF
VRF
VRF
CP-ABE
CP-ABE
Custom
Custom
Testable
Testable
Testable
Testable
Testable
see Section 5.6
see Section 5.6
Testable
Testable
Testable
Testable
Testable
Testable
Testable
Not Testable
Testable
Testable
Testable
Testable
Testable
Testable
Testable
Testable
Testable
Unknown
Unknown
Testable
Testable
Testable
Testable
Testable
Unknown
Unknown
Testable
Testable
Testable
Testable
Testable
Testable
Testable
Unknown
1.90s
2.94s
5.55s
9.23s
6.91s
3.87s
1.69s
1.66s
10.96s
0.0008s
1.57s
1.69s
3.12s
6.21s
6.53s
25.81s
0.18s
0.12s
8.78s
9.10s
9.11s
9.98s
222.75s
222.43s
1.77s
0.16s
Table 1: The output of AutoPPE on various PPE testability problems. Here, l represents the number of
delegation levels in a HIBE scheme, |H(id)| denotes the length of the hash of identity id, B(H(id)) denotes
the number of blocks in the hash of identity id, B(msg) denotes the number of blocks in message msg, |C(x)|
denotes the length of encoding of input x, |H(x)| denotes the length of encoding of input x and a denotes the
number of attributes. ”*” indicates that an optimized encoding mechanism is used to account for elements
in Zp. The execution time is mentioned in seconds.
16
F8 = r in G1
F0 = 1 in GT
F6 = u3 in G1
F11 = v2 in G1
F15 = v2 in GT
F1 = alpha in G1
F7 = u4 in G1
F0 = 1 in G1
F5 = u2 in G1
F9 = alpha*beta + r*u + r*u1*v1 + r*u2*v2 + r*u3*v3 + r*u4*v4 in G1
F10 = v1 in G1
F14 = v1 in GT
F18 = alpha*v1 in G1
F22 = beta*v1 in G1
F26 = u*v1 in G1
F30 = u1*v1 in G1
F34 = u2*v1 in G1
F38 = u3*v1 in G1
F42 = u4*v1 in G1
F32 = u1*v3 in G1
F36 = u2*v3 in G1
F40 = u3*v3 in G1
F44 = u4*v3 in G1
F31 = u1*v2 in G1
F35 = u2*v2 in G1
F39 = u3*v2 in G1
F43 = u4*v2 in G1
F12 = v3 in G1
F16 = v3 in GT
F19 = alpha*v2 in G1
F24 = beta*v3 in G1
F23 = beta*v2 in G1
F13 = v4 in G1
F17 = v4 in GT
F20 = alpha*v3 in G1
F27 = u*v2 in G1
F28 = u*v3 in G1
F29 = u*v4 in G1
Output of the Tool
F2 = beta in G1
F3 = u in G1
F4 = u1 in G1
F21 = alpha*v4 in G1
F25 = beta*v4 in G1
F33 = u1*v4 in G1
F37 = u2*v4 in G1
F41 = u3*v4 in G1
F45 = u4*v4 in G1
Processing untrusted polynomial F8 = r by rule2
F8 moved to trusted set and r moved to ﬁxed set by rule 2
Processing untrusted polynomial F9 by rule1
Naive PPE e(F9,F0) = e(F1,F2) * e(F3,F8) * e(F8,F30) * e(F8,F35) * e(F8,F40) * e(F8,F45)
Optimized PPE e(F9,F0) = e(F1,F2)*e(F3*F30*F35*F40*F45,F8)
F9 moved to trusted set by rule 1
Execution time : 2.578486s
PPEs : e(F9,F0) = e(F1,F2)*e(F3*F30*F35*F40*F45,F8)
Ouptut : PPE Testable
Figure 7: Output of AutoPPE for Waters05 IBE scheme with Nacacche Optimization
In the [26, 40, 37] VRF schemes, the input is encoded as a bit string, which is treated as a vector of Zp
variables by our tool. We observe that the size of the polynomials in these schemes grow exponentially in
size with respect to the length of encoding of the input. Consequently, we tested these schemes only with
a short length encoding. However, for these schemes, we observe that the PPEs have a clear pattern which
can be extrapolated to input encodings of arbitrary length.
In Section 5.2, we described a method to encode schemes which output elements in Zp as part of their
trusted or untrusted parameters as a PPE Testability problem. The na¨ıve method of reformulating such
schemes blows up the size of the trusted set and is ineﬃcient when there are large number of elements in
Zp. However, for a few problems we can improve the run time by including only a subset of these additional
polynomials in the trusted set; one can always try a smaller set ﬁrst and then expand the input iteratively. We
demonstrate this using the Waters05 [45] example, which hashes identities to 160 bit strings and as a result
would blow up the size of the trusted set to O(1602) polynomials when encoded na¨ıvely. We improve upon
the na¨ıve method by including only 480 polynomials in the trusted set and thereby achieving signiﬁcantly
faster run times.
We also tested our tool on a few custom examples with 100+ elements in them. In the 100-DDH example
with Type I pairings, the trusted set contains polynomials {a1, a2,··· , a50} in group G1, the untrusted set
contains polynomials {a51, a52,··· ,a100, b} in group G1 and the polynomial (a1 + a2+··· + a100)∗ b in group
GT . Clearly, this problem can be tested using the PPE gT
b). In the 100-
DBDH example with Type I pairings, the trusted set contains {a1, a2,··· , a50} in group G1, the untrusted
set contains polynomials {a51, a52,··· , a100, b, c} in group G1 and the polynomial (a1 + a2+··· + a100) ∗ b ∗ c
in group GT . This problem is not PPE Testable under the Decisional Bilinear Diﬃe-Hellman (DBDH)
assumption as it involves deciding a DBDH instance.
(a1+a2+···+a100)∗b= e(
100(cid:81)
ai, g1
g1
i=1
17
5.5 Optimizations
The QSearch algorithm discussed in Figure 4 has a high time complexity. It is particularly unacceptable
for problems which include lot of elements in the Zp domain due to the blowup of the size of the trusted
set and thereby the size of completion list. We therefore implemented a few optimizations which drastically
improve the run time. We ﬁrst observe that the completion lists get updated only by a few elements every
time a polynomial is added to the trusted set. Consequently, the algorithm computes the completion list in
an incremental manner instead of computing it from scratch each it checks for Rule 1. The completion list
is updated each time a polynomial is added to the trusted set.
We further optimized the algorithm to ﬁnd coeﬃcients in Rule 1 by removing a subset of the polynomials
that trivially have zero coeﬃcient. When applying Rule 1, suppose a polynomial g in sT∪{fk} has a monomial
which is not present in any other polynomial, then trivially the coeﬃcient g is zero when expressing 0 as a
span of polynomials in sT ∪ {fk}.
5.6 Limitations and Open Problems
This work represents a meaningful ﬁrst step in deﬁning, understanding and automating the PPE testability
of many well-known pairing cryptosystems. We now remark on some limitations of the tool that are exciting
areas for future research.
(1) Beyond Prime Order Pairings. First, we restrict ourselves to pairing-based constructions with prime
order groups. It would be interesting to extend the tool to composite-order pairings, e.g., [38, 39], and even
RSA-based constructions. In constructions based on composite-order pairings, elements are sampled from
various subgroups. Verifying the validity of untrusted terms involves testing whether the terms are in their
designated subgroups. Our current model of representing a term with a polynomial may not be enough to
verify such relationships.
(2) Rational Polynomials and More. Second, the tool doesn’t work on schemes, such as Gentry’s IBE [28]
p(·) ) or
or Boneh-Boyen [19], which have group elements with exponents as rational polynomials (e.g., g
schemes, such as Hohenberger-Waters [36], with polynomials with variable degree (e.g., gxy
). While the
GGA tool on which we built AutoPPE also does not handle rational polynomials, emerging new work by
Ambrona et al. [9] does. While inspirational, it does not directly apply here. They work in the average case
p(·) where p(·)
setting, and thus can ignore the negligible probability that an element is “undeﬁned” (e.g., g
evaluates to zero on a randomly chosen input). Here we focus on the worst case setting – where a powerful
adversary such as an IBE Master Authority might try to pass oﬀ an ill-formed private key to a user using
any such loophole – and we need a set of PPEs that can catch any ill-formed key.
1
1
(3) Dependent Variables. Third, the algorithm works only on schemes which sample all the variables
independently. For example, the framework doesn’t capture schemes which use hard-core predicate bits,
schemes which use hash functions in complex ways (such as having gx with x = H(m||S), where S is another