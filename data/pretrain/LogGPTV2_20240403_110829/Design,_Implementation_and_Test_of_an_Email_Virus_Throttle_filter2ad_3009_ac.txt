### Optimized Text

#### Throttle Placement and Implementation

Installing a throttle on the client to prevent any network traffic from a virus is appealing, as it would block mail sent through the client. However, this approach only guards against emails sent via the client itself. Many viruses, such as LoveLetter [3], have exploited weaknesses in Outlook. Increasingly, viruses are using their own SMTP engines, such as Klez and Yaha [16, 18]. In non-Microsoft environments that use SMTP, placing the throttle at the server is more effective. The SMTP routing infrastructure is flexible, allowing intermediate email relays to be inserted into the mail flow. The throttle can be implemented as an additional server between the mail client and its outgoing mail server, with each user sending mail through that server having their own throttle instance.

#### Virus Behavior and SMTP Engines

As mentioned, viruses are increasingly using their own SMTP engines rather than the client's mailer. This raises the question of how these viruses find SMTP servers to send mail. They typically employ three strategies: using the servers configured for existing mail clients, using pre-configured "known" servers on the Internet, or attempting to send mail to `smtp.domain` for each domain found on the user's machine. This suggests that an IP-based throttle [23] could be effective in preventing such behavior.

#### User Identification and Authentication

Identifying the user is another critical issue. Unfortunately, the sender's address can be easily spoofed (as seen with the Klez virus [16]), making it unreliable for verifying the origin of the email. An alternative is to use the IP address of the sender's machine. While IP addresses can be dynamically assigned and change, the throttle does not require much state (working set and slack parameters) and can work effectively with transient addresses. However, contacting the user remains a challenge. Other than using the potentially incorrect sender's address, an extra protocol and software on the client could inform the user that the throttle has stopped their mail.

The best solution is to use a mechanism that ensures the sender is registered with the mail server. One such mechanism is authenticated SMTP (SMTP AUTH [9]), where the client provides a username and password when sending mail. Although the protocol is not particularly secure (e.g., the password is sent unencrypted), it addresses the threat of a virus sending mail while masquerading as another user to evade the throttle. Sniffing passwords is possible but difficult to automate reliably in a virus.

The advantage of SMTP AUTH is that users must register with the server, providing contact details. The disadvantage is the added complexity at both the client (one more configuration step) and the server (managing usernames and passwords).

#### Implementation and Architecture

An email throttle was implemented as an SMTP relay using SMTP AUTH, built on top of the JAMES (Java Mail Server) project [5]. The architecture of the modified throttle server is shown in Figure 10. Incoming mail is handled by an SMTP server that authenticates the sender using the UsersRepository and places incoming mail in the Spool. A flexible processing pipeline then processes the mail, implementing the throttle logic of Figure 4. The delay queue is managed by a DelayQueueManager object, which handles all interactions with the queue and processes it regularly. The user state (working set, slack, mSlack, etc.) is stored in the UsersRepository. The program is configurable using an XML configuration file, allowing for parameter setting, pipeline configuration, and the choice of using the file system or a relational database for storing emails and user information.

The server uses the email address in the message and does not differentiate between single recipients and mailing lists. Expanding mailing lists would improve the throttle but add significant complexity. If the delay queue length exceeds the stop threshold for any user, the server refuses new mails from that user, and the delay queue processing is suspended. The throttle server sends an email to the user's configured address, containing details of the waiting mails. Users can delete or send these messages by sending a specially crafted email to the server or visiting a web interface (Figure 11). The web interface also supports other administrative tasks, such as changing passwords and user details.

#### Testing and Performance

The implementation is currently being beta-tested in a small-scale trial and was used to test the performance of the throttling algorithm with real viruses. The isolated testbed (Figure 12) consists of four Linux machines: one running a vulnerable Windows 2000 image, the throttle box, another SMTP server, and a DNS server. The test involved launching the virus on the Windows machine and measuring how quickly the throttle could stop the virus and how many emails were forwarded. Table 1 shows the results for two real viruses, Yaha.E [18] and Lovgate.A [17], and a test virus. The throttle parameters were maxSlack 1, maxMSlack 15, working set size 4, and the stop limit was 20.

#### Server Performance

An SMTP server implementing a virus throttle performs more work than a standard SMTP server, requiring state updates and storage of emails in the delay queue. During the virus experiments, the server handled 450 mails per second without overload. To test the storage requirements, the effects of a large number of users were simulated. Figure 13 shows typical examples of the delay queue length over a 24-hour period, indicating that the queue seldom grows large.

#### Conclusions

This paper presents an approach to limiting the damage caused by email worms and viruses by targeting their propagation behavior. The throttle allows normal email traffic to pass with minimal delay while slowing and stopping viral propagation. The implementation has been tested against real viruses and has proven effective, stopping them in under a minute. The throttle is also likely to scale to handle a large number of users. Additionally, it could be effective in limiting spam if implemented by ISPs.

The technique is altruistic, as the machine still becomes infected but does not spread the infection further. Widespread deployment is necessary for maximum effectiveness. Partial deployment can still reduce traffic and improve the overall response to viruses. If widely deployed, it would force viruses to spread more slowly, making them easier to combat with signature-based methods. However, this may lead to more malicious payloads, necessitating the use of behavior-blocking techniques [7, 13].

The general approach focuses on limiting the damage a machine can cause to others, rather than protecting the machine itself. It mitigates the problem quickly and automatically, buying time for a slower human response. This approach can increase the resilience of computing systems to attacks, misconfigurations, and other issues.

#### Acknowledgements

This work was supported by colleagues at HP Labs, including Jonathan Grifﬁn, Andy Norman, and Jamie Twycross.

#### References

[1] D. Bruschi and E. Rosti. Disarming offense to facilitate defense. In Proceedings of the New Security Paradigms Workshop, Cork, Ireland, Sept. 2000.
[2] CERT. CERT Advisory CA-2001-26 Nimda Worm, Sept. 2001. Available at http://www.cert.org/advisories/CA-2001-26.html.
[3] CERT. CERT Advisory CA-2000-04 Love Letter Worm, May 2002. Available at http://www.cert.org/advisories/CA-2000-04.html.
[4] J. Cleaver. Jackpot mailswerver, 2003. http://jackpot.uk.net/.
[5] JAMES. Java mail server, 2003. http://james.apache.org.
[6] McAfee. VirusScan Home Edition 7.0, 2003. http://www.mcafee.com/myapps/vs7/default.asp.
[7] E. Messmer. Behavior blocking repels new viruses. Network World Fusion News, Jan. 2002. Available from http://www.nwfusion.com/news/2002/0128antivirus.html.
[8] Microsoft Exchange Server, 2003. http://www.microsoft.com/exchange/default.asp.
[9] J. Myers. SMTP service extension for authentication, 1999. http://www.ietf.org/rfc/rfc2554.txt.
[10] MySQL, 2003. http://www.mysql.com/.
[11] Okena. Stormwatch, 2002. http://www.okena.com/areas/products/products_stormwatch.html.
[12] J. B. Postel. Simple mail transfer protocol, 1982. http://www.ietf.org/rfc/rfc0821.txt.
[13] M. Schmid, F. Hill, and A. K. Ghosh. Protecting data from malicious software. In Proceedings of ACSAC Conference, pages 199–208, Las Vegas, Nevada, Dec. 2002.
[14] A. Shipp. Desktop AV and Internet level anti-virus - a comparison. Information Security Bulletin, pages 33–38, Sept. 2002.
[15] A. Somayaji and S. Forrest. Automated response using system-call delays. In Proceedings of the 9th USENIX Security Symposium, pages 185–197, Denver, CO, Aug. 2000.
[16] Sophos. W32/Klez-E, 2003. http://www.sophos.com/virusinfo/analyses/w32kleze.html.
[17] Sophos. W32/Lovegate-A, 2003. http://www.sophos.com/virusinfo/analyses/w32lovgatea.html.
[18] Sophos. W32/Yaha-E, 2003. http://www.sophos.com/virusinfo/analyses/w32yahae.html.
[19] Symantec. Symantec Corporation, 2003. http://www.symantec.com/.
[20] Teergrube. Teergrubing FAQ, 2003. http://www.iks-jena.de/mitarb/lutz/usenet/teergrube.en.html.
[21] J. R. Tyler and J. C. Tang. When can I expect an email response: A study of rhythms in email usage. In Proceedings of the European Conference on Computer-Supported Cooperative Work, Helsinki, Finland, Sept. 2003.
[22] VMware. VMware Workstation, 2003. http://www.vmware.com/.
[23] M. M. Williamson. Throttling viruses: Restricting propagation to defeat malicious mobile code. In Proceedings of ACSAC Security Conference, pages 61–68, Las Vegas, Nevada, Dec. 2002. Available from http://www.hpl.hp.com/techreports/2002/HPL-2002-172.html.
[24] M. M. Williamson. Resilient infrastructure for network security. Complexity, 2003. Under review. Available from http://www.hpl.hp.com/techreports/2002/HPL-2002-273.html.
[25] M. M. Williamson and J. Léveillé. An epidemiological model of virus spreading and cleanup. In Proceedings Virus Bulletin Conference, Toronto, Canada, Sept. 2003. Virus Bulletin.