server. While installing the throttle on the client is appeal-
ing because it would prevent any network trafﬁc from the
virus, it would only guard against mail sent through the
client itself. While many viruses have exploited weaknesses
in Outlook (e.g. LoveLetter [3]), increasingly viruses are us-
ing their own SMTP engines e.g. Klez and Yaha [16, 18].
The non-Microsoft world uses SMTP, in which case the
throttle is best placed at the server. The SMTP routing in-
frastructure is ﬂexible, allowing intermediate email relays
to be inserted in the ﬂow of mail. The throttle can be eas-
ily implemented as an extra server that sits between the
mail client and its normal outgoing mail server. This server
would then implement a copy of the throttle for each user
sending mail through that server.
As mentioned above, increasingly viruses are provid-
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:40:02 UTC from IEEE Xplore.  Restrictions apply. 
Outlook
Client
T
Proprietary
Protocol
Exchange
Server
T
IMAP/POP3
Client
SMTP
T
SMTP
Server
Virus SMTP
Engine
Figure 9. Schematic of an email system for
outgoing mail, with suitable positions for an
email throttle marked with a “T”. With Mi-
crosoft Exchange, the best position for the
throttle is at the server, although it would also
be possible to implement it at the client. For
SMTP the logical place for a throttle is at the
server, and it could easily be implemented as
an extra mail relay. This has the advantage
that email viruses with their own SMTP en-
gines would be throttled.
ing their own SMTP engines, and not using the mailer
on the client. This begs the question of how they ﬁnd
SMTP servers to send the mail. They have three strate-
gies at present, to use the servers conﬁgured for any ex-
isting mail clients, to use “known” servers on the Internet
pre-conﬁgured in the virus, or to attempt to send mail to
smtp.domain for each domain of each email address
found on the users machine. This actually suggests that an
IP based throttle [23] could be quite effective at preventing
this behaviour!
The second issue is how to identify the user. Unfortu-
nately the sender’s address can be easily spoofed (Klez [16]
was one of the ﬁrst viruses to do this) and so cannot be
relied on to verify the origin of the email. A second can-
didate is the IP address of the sender’s machine. While IP
addresses are often dynamically assigned and do change,
the throttle does not need much state (working set and slack
parameters) and so could work effectively on transient ad-
dresses. However there is the difﬁculty of contacting the
user2. Other than using the sender’s address, which may
or not be correct, the alternative is an extra protocol and
2It is also possible that a virus could use unused IP addresses to mas-
querade as many machines. This is more complicated than just spooﬁng
the sender’s IP. SMTP works over TCP, so the virus would have to really
“adopt” the false IP addresses in order to receive the TCP acks, and be able
to send messages.
Mail
in
SMTP
Server
Processing Pipeline
Mail
out
User
Manager
Spool
Manager
Delay Queue
Manager
Clock
User
Repository
Spool
Delay
Queue
Figure 10. Figure showing the architecture of
the email throttle.
Incoming mail is placed
in the Spool, and then processed by the
pipeline, which implements the throttle logic.
A DelayQueueManager object is responsible
for all requests to the queue itself (simply a
store of emails), as well as processing the
queue regularly.
software on the client to inform them that the throttle has
stopped their mail.
The best solution is to use another mechanism to guar-
antee that the sender of the mail is registered with the mail
server. One such mechanism is authenticated SMTP (SMTP
AUTH [9]), where the client provides a username/password
pair when sending mail. While the protocol is not partic-
ularly secure (e.g. the password is sent unencrypted) the
threat being addressed is a virus sending mail masquerad-
ing as another user in order to evade the throttle. Snifﬁng
the passwords of other users is possible but would be difﬁ-
cult to automate reliably in a virus.
The advantage of SMTP AUTH is that users of the server
need to register with it, and so can provide contact details
etc.. The disadvantage is the extra complexity required both
at the client (one more conﬁguration step) and at the server
(usernames and passwords to manage).
An email throttle was implemented as an SMTP relay
using SMTP AUTH, building on top of the JAMES (Java
Mail Server) project [5]. This is a production quality open
source mail server. The architecture of the modiﬁed throttle
server is shown in Figure 10.
Incoming mail is handled by an SMTP server that uses
details of users stored in the UsersRepository to to authen-
ticate the sender, and places incoming mail in the Spool. A
ﬂexible processing pipeline is then used to process the mail.
This consists of a variety of components to select mail mes-
sages and perform operations on them. The throttle logic of
Figure 4 is implemented in this pipeline. The delay queue
is implemented in similar way to the Spool as a store of
emails, with a DelayQueueManager object responsible for
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:40:02 UTC from IEEE Xplore.  Restrictions apply. 
Switch
Win2k
Virtual
Machine
Linux
Throttle
SMTP
Server
Linux
EmailRelay
DNS
Linux
Linux
host.virus.net
smtp.virus.net
blackhole.virus.net
dns.virus.net
Figure 12. Figure showing the testbed for
virus tests.
This consists of four Linux
machines, one running a machine vulnera-
ble to viruses (host.virus.net), the throttle
server (smtp.virus.net), another email re-
lay that captures any forwarded mail from the
throttle (blackhole.virus.net), and a DNS
server (dns.virus.net).
Figure 11. Screen-shot of the user interface
for the virus throttle. The interface allows the
user to see the contents of their delay queue,
and specify which mails will be deleted and
which sent immediately.
all interactions with the delay queue as well as processing
the queue (Figure 3) regularly. The user state (working set,
slack, mSlack, etc.) is stored in the UsersRepository. The
program is easily conﬁgurable using an XML conﬁguration
ﬁle that allows, for example, the setting of parameters, the
conﬁguration of the pipeline, and the choice of using the ﬁle
system or a relational database to store the emails and user
information.
The server uses the email address in the message and so
does not differentiate between addresses that map to single
recipients and those that map to mailing lists that may be ex-
panded downstream. Expanding mailing lists would make
the throttle better, but would add signiﬁcant extra complex-
ity.
If the delay queue length is larger than the stop thresh-
old for any particular user, the server refuses any new mails
from that user (the authentication fails). In addition the de-
lay queue processing is suspended for that user. To contact
them, the throttle server sends an email to an address con-
ﬁgured when the user registers with the server, the message
containing details of the mails waiting in the mail queue.
To delete or send these messages the user can either send
an especially crafted email to the server, or can visit a web
interface (screen-shot in Figure 11). The web interface can
be used for other administration tasks, e.g. changing pass-
words, user details, etc.
The implementation is currently being beta tested in a
small scale trial, and was used to test the performance of
the throttling algorithm with real viruses, as described in
the following section.
6 Tests on real viruses
In order to test the efﬁcacy of the throttle on real viruses,
the isolated testbed shown in Figure 12 was constructed. It
consists of four Linux machines. The ﬁrst (host.virus.
net) runs VMware [22] with a vulnerable Windows 2000
image. The outgoing mail server on the Windows 2000 ma-
chine is set to be the throttle box (smtp.virus.net),
and the address book and inbox were populated with email
addresses. The throttle server is conﬁgured to pass all mail
on to another SMTP server (blackhole.virus.net)
that simply saves mail to disk. To deal with the fact that
some viruses ﬁnd the mail server by prepending “smtp” to
email domains found on the infected machine, a DNS server
was set up on the last machine to provide the virus.net
domain.
The test consisted of launching the virus on the Win-
dows machine and detecting how quickly the throttle could
stop the virus, as well as how many emails were forwarded.
None of the viruses tested used SMTP AUTH, so the throt-
tle was altered to use the IP address of the sending machine
as the origin of the mail.
Table 1 shows the results for two real viruses Yaha.E [18]
that sends mail to addresses found in the address book, and
Lovgate.A [17] that uses the inbox. Also included are re-
sults from a test virus (a program that sends emails to dif-
ferent addresses at a pre-determined rate). The parameters
of the throttle were maxSlack 1, maxMSlack 15, working
set size 4 and the stop limit was 20.
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:40:02 UTC from IEEE Xplore.  Restrictions apply. 
Table 1. Stopping times for real viruses. The
table gives the number of passed mails and
the stopping time for two real viruses and a
test virus. The results are the averages of 3
runs of each real virus, and a single run of
the test virus. The throttle stops viruses very
quickly, and even stops quite slow spread-
ing viruses fairly quickly (20 minutes for one
spreading at 2 emails per minute).
Virus
Lovgate.A
Yaha.E
Test
Test
Test
Test
Approx Number
passed
rate/min
109
3
0
455
2
60
6
10
6
5
21
2
Stopping time
(min:sec)
0:12
0:03
0:24
2:33
5:01
20:04
The table shows that the throttle is very effective at stop-
ping real viruses, stopping them in under 15 seconds, with
few emails forwarded. Yaha.E sends no messages because
it appears to need the user to send a message to “start” it.
That ﬁrst message uses up any “slack”, so that all the mes-
sages from the virus go straight onto the delay queue. This
quickly reaches the threshold and the virus is stopped.
The table also shows that even if the virus attempts to
spread slowly (e.g. 2 emails/minute) the throttle will even-
tually stop it, and still fairly quickly. The delay queue mech-
anism effectively integrates the difference between the virus
spreading rate and the allowed rate, so that any virus with
a spreading rate that is slightly above the allowed rate will
eventually be stopped.
7 Server Performance
An SMTP server implementing a virus throttle has to
perform more work than an ordinary SMTP server: it needs
to read and update state for each user, as well as store emails
in the delay queue.
Reading and writing state occurs for each processed mail
and required interactions with the user database. While no
ﬁrm performance ﬁgures are currently available, during the
virus experiments described in the previous section were be-
ing run, the server did not appear to be overloaded handling
450 mails per second3.
SMTP servers often store mails while waiting to deliver
them, but it is important that the extra storage required for
the delay queue does not cause problems. To test this, the
3Run on a 1.7GHz Pentium III, Redhat Linux 7.3, with the throttle
server and MySQL database [10]
150
100
50
h
t
g
n
e
l
e
u
e
u
q
y
a
e
D
l
0
0
150
100
50
t
h
g
n
e
l
e
u
e
u
q
y
a
e
D
l
5
10
15
20
0
0
5
10
Time in hours
15
20
Figure 13. Cumulative delay queue lengths for
a throttle server with 500 users. The plots
give two examples of typical activity. The de-
lay queue does not grow large, in spite of the
large numbers of users.
effects of a large number of users using the throttle server
was simulated by taking the data originally collected, divid-
ing the time history into 24 hour chunks, and choosing 500
days at random across the users. The throttle was then sim-
ulated for these 500 “users” in parallel, so approximating
normal usage of a mail server.
Figure 13 shows two typical examples of the length of
the delay queue across a 24 hour period. As one might ex-
pect the length of the queue varies with the time of day but
seldom grows large, because few of the emails are delayed.
This result suggests that the extra loading of an email
server implementing a throttle is likely to be minimal.
8 Conclusions
This paper has presented an approach to limiting the
damage caused by email worms and viruses. The technique
targets the fundamental behaviour of a virus, to propagate
by sending messages to many different addresses. The pa-
per has shown that normal email trafﬁc does not have this
property, and that a throttle or rate-limiter can be designed
that both lets through normal trafﬁc without much delay,
and slows and stops viral propagation. A working imple-
mentation has been described and tested against real email
viruses. The implementation has proved effective at pre-
venting further spread, stopping real viruses in well under
a minute. The paper has also presented evidence that the
throttle is likely to scale to handling a large number of users.
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:40:02 UTC from IEEE Xplore.  Restrictions apply. 
A further beneﬁt of the approach is that it would be effec-
tive at limiting spam. If an ISP ran the throttle, spammers
would not be able to send mail at high rates.
The technique is an altruistic one—the machine still be-
comes infected, just does not spread the infection further. A
consequence of this is that it needs to be widely deployed
in order to have a large effect. There are two immediate
effects even with partial deployment: the trafﬁc created by
a spreading virus is greatly reduced, so those servers that
implement the throttle will not be affected by overloading
during an attack; and if the virus is only slowed slightly, it
will improve the effectiveness of the overall response (throt-
tling plus signature based methods) signiﬁcantly [25].
Were throttling to be widely deployed, it would change
how viruses were written: they would not be able to cause
damage by spreading quickly. This is good because slow
spreading viruses are easier to combat with slow responses
such as signature based scanning. A consequence of this
may be that payloads become more malicious, in which case
the techniques of behaviour blocking [7, 13] would be good
mechanisms to prevent damage on the host machine.
The general approach taken here can be thought of in two
ways. Firstly it concentrates on limiting the damage that a
machine can cause to others, rather than limiting the dam-
age that can be done to it (also suggested by [1]). Secondly
its effect is to mitigate the effects of the problem quickly and
automatically, so buying time for a slower response [24].
There are many problems in security and more broadly in
IT where problems occur at machine speeds and do large
amounts of damage before a (slower) human response can
be mounted. Throttling and other technologies (e.g. [15])
that attempt to limit that damage and hold off the attack un-
til a human can respond should increase the resilience of our
computing systems to attacks, misconﬁgurations and other
problems.
Acknowledgements
This work would not have been possible without the sup-
port of my colleagues at HP Labs, Jonathan Grifﬁn, Andy
Norman and Jamie Twycross.
References
[1] D. Bruschi and E. Rosti. Disarming offense to facilitate
defense. In Proceedings of the New Security Paradigms
Workshop, Cork, Ireland, Sept. 2000.
[2] CERT. CERT Advisory CA-2001-26 Nimda Worm, Sept.
2001. Available at http://www.cert.org/
advisories/CA-2001-26.html.
[3] CERT. CERT Advisory CA-2000-04 Love Letter Worm,
May 2002. Available at http://www.cert.org/
advisories/CA-2000-04.html.
[4] J. Cleaver. Jackpot mailswerver, 2003.
http://jackpot.uk.net/.
[5] JAMES. Java mail server, 2003.
http://james.apache.org.
[6] McAfee. VirusScan Home Edition 7.0, 2003. http:
//www.mcafee.com/myapps/vs7/default.asp.
[7] E. Messmer. Behavior blocking repels new viruses.
Network World Fusion News, Jan. 2002. Available from
http://www.nwfusion.com/news/2002/
0128antivirus.html.
[8] Microsoft exchange server, 2003. http:
//www.microsoft.com/exchange/default.asp.
[9] J. Myers. SMTP service extension for authentication, 1999.
http://www.ietf.org/rfc/rfc2554.txt.
[10] MySQL, 2003. http://www.mysql.com/.
[11] Okena. Stormwatch, 2002. http://www.okena.com/
areas/products/products_stormwatch.html.
[12] J. B. Postel. Simple mail transfer protocol, 1982.
http://www.ietf.org/rfc/rfc0821.txt.
[13] M. Schmid, F. Hill, and A. K. Ghosh. Protecting data from
malicious software. In Proceedings of ACSAC Conference,
pages 199–208, Las Vegas, Nevada, Dec. 2002.
[14] A. Shipp. Desktop AV and Internet level anti-virus - a
comparison. Information Security Bulletin, pages 33–38,
Sept. 2002.
[15] A. Somayaji and S. Forrest. Automated response using
system-call delays. In Proceedings of the 9th USENIX
Security Symposium, pages 185–197, Denver, CO, Aug.
2000.
[16] Sophos. W32/Klez-E, 2003. http://www.sophos.
com/virusinfo/analyses/w32kleze.html.
[17] Sophos. W32/Lovegate-A, 2003.
http://www.sophos.com/virusinfo/
analyses/w32lovgatea.html.
[18] Sophos. W32/Yaha-E, 2003. http://www.sophos.
com/virusinfo/analyses/w32yahae.html.
[19] Symantec. Symantec corporation, 2003.
http://www.symantec.com/.
[20] Teergrube. Teergrubing faq, 2003.
http://www.iks-jena.de/mitarb/lutz/
usenet/teergrube.en.html.
[21] J. R. Tyler and J. C. Tang. When can I expect an email
response: A study of rhythms in email usage. In Proceedings
of the European Conference on Computer-Supported
Cooperative Work, Helsinki, Finland, Sept. 2003.
[22] VMware. VMware Workstation, 2003.
http://www.vmware.com/.
[23] M. M. Williamson. Throttling viruses: Restricting
propagation to defeat malicious mobile code. In
Proceedings of ACSAC Security Conference, pages 61–68,
Las Vegas, Nevada, Dec. 2002. Available from
http://www.hpl.hp.com/techreports/2002/
HPL-2002-172.html.
[24] M. M. Williamson. Resilient infrastructure for network
security. Complexity, 2003. Under review. Available from
http://www.hpl.hp.com/techreports/2002/
HPL-2002-273.html.
[25] M. M. Williamson and J. L´eveill´e. An epidemiological
model of virus spreading and cleanup. In Proceedings Virus
Bulletin Conference, Toronto, Canada, Sept. 2003. Virus
Bulletin.
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:40:02 UTC from IEEE Xplore.  Restrictions apply.