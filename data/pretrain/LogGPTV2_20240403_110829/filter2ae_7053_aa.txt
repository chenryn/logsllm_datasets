**作者：时钟@RainSec  
本文为作者投稿，Seebug Paper 期待你的分享，凡经采用即有礼品相送！ 投稿邮箱：PI:EMAIL**
## Fuzzing input
Fuzzing的一大核心思想其实就是通过大量的Input去触发程序的各个分支逻辑，因此Fuzzing的成功与否和Input的生成关系密切。Input的格式多种多样，可以是文件，代码，json数据等等。但是各种各样的数据都有自己的格式，程序的输入也是如此，那么在生成Input的过程中，格式化非常关键，程序无法接受的输入对于Fuzzing来说是毫无意义的。
为了很好的描述一个程序的输入，一个很有必要的事情是为输入制定一些语法规范。比如编译器的输入：python解释器规定了符合python语法的程序才能得以执行，gcc规定了符合C语言语法的程序才能被完成编译进而生成二进制文件。Fuzzing也是如此，为了很好的达到Fuzzing的效果，为程序定义一种输入的语法规范往往是一种不错的选择。
一般而言，对于Fuzzing简单的程序来说，正则表达式往往是一个不错的选择，它所具备的有限状态机属性使得它易于推理进而获得一个满意的Input。但是如果面临的Fuzzing目标需要非常复杂的输入，那么它就会表现的捉襟见肘。
我曾见过为了更好的实现某些功能而专门设计一些语言，从计算机理论的角度这显然是非常有用的，一些特殊功能在特殊语言的加持之下表现出超高的质量，但是对于Fuzzing而言这确实是成本过高了，Grammars其实就是正则表达式和专业语言之间的一个中间地带。它易于理解，并且能很好的完成Fuzzing对它的期望
--生成大量合法输入，因为通过Grammars可以规定Inputs的大量属性，完美的表达一个复杂输入的语法结构。
## Grammars初探
Grammar一般由符号和一组表达式组成，例如`A = 10 | 9 | 0 |1`，符号化使得递归成为可能，假设`B = A |
AB`，这无疑就使得符号所代表的范围倍增。根据这种思想我们可以制作一个算数表达式：
       ::= 
        ::=  +  |  -  | 
        ::=  *  |  /  | 
      ::= + | - | () |  | .
     ::=  | 
       ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
那么通过对``的内部的符号进行逐一扩展，并对过程进行随机化处理，最终就可以得到大量的合法算数表达式。和大多数语法一样，Grammar也应该有自己的Type，以便对其合法性进行校验，以Python
为例子可以对上述的Grammar进行定义：
        Option = Dict[str, Any]
        Expansion = Union[str, Tuple[str, Option]]
        Grammar = Dict[str, List[Expansion]]
        EXPR_GRAMMAR: Grammar = {
            "":
                [""],
            "":
                [" + ", " - ", ""],
            "":
                [" * ", " / ", ""],
            "":
                ["+",
                "-",
                "()",
                ".",
                ""],
            "":
                ["", ""],
            "":
                ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]
        }
前三行代码定义了一个Grammar应该如何在Python中构成。通过代码中的`EXPR_GRAMMAR[""]`可以访问当前Grammar的各个组成部分并对其进行操作。
### Sample Grammar Fuzz
那么该如何对Grammar语法进行解析呢？一种最简单的方式就是通过字符串替换，因为在Grammar中`:`的左右两侧本身就是一种映射关系，因此利用字符串替换不断迭代是一种最为直观的选择。
实例代码：
    START_SYMBOL = ""
    # 一个简单的gramar fuzzer
    def simple_grammar_fuzzer(grammar: Grammar, 
                              start_symbol: str = START_SYMBOL,
                              max_nonterminals: int = 10,
                              max_expansion_trials: int = 100,
                              log: bool = False) -> str:
        """Produce a string from `grammar`.
           `start_symbol`: use a start symbol other than `` (default).
           `max_nonterminals`: the maximum number of nonterminals 
             still left for expansion
           `max_expansion_trials`: maximum # of attempts to produce a string
           `log`: print expansion progress if True"""
        term = start_symbol
        expansion_trials = 0
        while len(nonterminals(term)) > 0: # 判断字符串中是否存在<>，并返回所有被<>包裹的项，注意如果是>则返回
            symbol_to_expand = random.choice(nonterminals(term))
            expansions = grammar[symbol_to_expand]
            expansion = random.choice(expansions)
            # In later chapters, we allow expansions to be tuples,
            # with the expansion being the first element
            if isinstance(expansion, tuple):
                expansion = expansion[0]
            new_term = term.replace(symbol_to_expand, expansion, 1) # 解析下一个符号
            if len(nonterminals(new_term))  " + expansion), term)
                expansion_trials = 0
            else:
                expansion_trials += 1
                if expansion_trials >= max_expansion_trials: # 总的解析次数也存在限制
                    raise ExpansionError("Cannot expand " + repr(term))
        return term
利用上面的表达式Grammar可以制作一个简单的grammar
fuzz，Fuzz的编写过程其实面临着很多的取舍，便利和速度或者各种各样的可行性之间的考虑，以上面的Grammar为例子，我们肯定不希望其陷入类似无限递归或者大量符号解析的情况，而是会限制对字段的提取次数和对符号的解析次数。
但是此类Grammar
Fuzz都面临几个问题就是大量的字符串搜索和替换操作导致效率低下，而且可以看出存在Input生成失败的情况（ExpansionError），而且这是一个典型的上下文无关的Fuzz。不过，依赖于上述功能，我们只要编写Grammar就可以很好的对一些Inputs进行大量生成。
比如URL生成：
    URL_GRAMMAR: Grammar = {
        "":
            [""],
        "":
            ["://"],
        "":
            ["http", "https", "ftp", "ftps"],
        "":
            ["", ":", "@", "@:"],
        "":  # 大部分情况下其实可以指定一个URL
            ["cispa.saarland", "www.google.com", "fuzzingbook.com"],
        "":
            ["80", "8080", ""],
        "":
            ["", ""],
        "":
            ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"],
        "":  # Just one
            ["user:password"],
        "":  # Just a few
            ["", "/", "/"],
        "":  # Just a few
            ["abc", "def", "x"],
        "":
            ["", "?"],
        "":
            ["", "&"],
        "":  # Just a few
            ["=", "="],
    }
或者类似HTTP协议的（但是这个不是为上述Fuzz准备的，只是拿来做个参考）：
    {
        "": [["", "\r\n", "", "", "\r\n\r\n"]],
        "": [["", " ", "", " ", ""]],
        "": [["GET"], ["HEAD"], ["POST"], ["PUT"], ["DELETE"], ["CONNECT"], ["OPTIONS"], ["TRACE"], ["PATCH"], ["ACL"], ["BASELINE-CONTROL"], ["BIND"], ["CHECKIN"], ["CHECKOUT"], ["COPY"], ["LABEL"], ["LINK"], ["LOCK"], ["MERGE"], ["MKACTIVITY"], ["MKCALENDAR"], ["MKCOL"], ["MKREDIRECTREF"], ["MKWORKSPACE"], ["MOVE"], ["ORDERPATCH"], ["PRI"], ["PROPFIND"], ["PROPPATCH"], ["REBIND"], ["REPORT"], ["SEARCH"], ["UNBIND"], ["UNCHECKOUT"], ["UNLINK"], ["UNLOCK"], ["UPDATE"], ["UPDATEREDIRECTREF"], ["VERSION-CONTROL"]],
        "": [["" , ":", "", "", ""]],
        "": [["http"], ["https"], ["shttp"], ["dav"], ["about"], ["attachment"], ["cid"], ["data"], ["file"], ["ftp"], ["ssh"], ["sip"]],
        "": [["//", "", ""]],
        "": [["", ""]],
        "": [["/", ""]],
        "": [[], ["", "/", ""]],
        "": [[], ["", ":", "", "@"]],
        "": [["127.0.0.1:8080"]],
        "": [[], ["?", "" , "=", ""]],
        "": [[], ["#", ""]],
        "": [["HTTP/0.9"], ["HTTP/1.0"], ["HTTP/1.1"], ["HTTP/2.0"], ["HTTP/3.0"]],
        "": [[], ["", "\r\n", ""]],
        "": [["", ": ", ""]],
        "": [["A-IM"], ["Accept"], ["Accept-Charset"], ["Accept-Datetime"], ["Accept-Encoding"], ["Accept-Language"], ["Access-Control-Request-Method"], ["Access-Control-Request-Headers"], ["Authorization"], ["Cache-Control"], ["Connection"], ["Content-Encoding"], ["Content-Length"], ["Content-MD5"], ["Content-Type"], ["Cookie"], ["Date"], ["Expect"], ["Forwarded"], ["From"], ["Host"], ["HTTP2-Settings"], ["If-Match"], ["If-Modified-Since"], ["If-None-Match"], ["If-Range"], ["If-Unmodified-Since"], ["Max-Forwards"], ["Origin"], ["Pragma"], ["Proxy-Authorization"], ["Range"], ["Referer"], ["TE"], ["Trailer"], ["Transfer-Encoding"], ["User-Agent"], ["Upgrade"], ["Via"], ["Warning"]],
        "": [[], [""]],
        "": [[], [""], [""], [""], [""]],
        "": [["Sat, 29 Oct 1994 19:43:31 GMT"]],
        "": [["0"], ["1"], ["2"], ["3"], ["4"], ["5"], ["6"], ["7"], ["8"], ["9"], ["a"], ["b"], ["c"], ["d"], ["e"], ["f"], ["g"], ["h"], ["i"], ["j"], ["k"], ["l"], ["m"], ["n"], ["o"], ["p"], ["q"], ["r"], ["s"], ["t"], ["u"], ["v"], ["w"], ["x"], ["y"], ["z"], ["A"], ["B"], ["C"], ["D"], ["E"], ["F"], ["G"], ["H"], ["I"], ["J"], ["K"], ["L"], ["M"], ["N"], ["O"], ["P"], ["Q"], ["R"], ["S"], ["T"], ["U"], ["V"], ["W"], ["X"], ["Y"], ["Z"]]
    }
到此，我们理解了Grammar对于Fuzzing的重要性，一个杰出的Grammar能够有效的生成大量合法输入，不过这只是从输入组成（句法）来看，这毕竟是一个庞大的范围，虽然有时候满足程序的输入格式，但是未必真的对Fuzzing起作用，这种情况非常常见。再一次以编译器为例子，你的程序在满足语言语法的同时更应该具备正确的语义。但是语义很难再以Grammar的形式表达。以URL生成Grammar为例，简单通过Grammar很难定义端口的范围。面对这样的问题，最简单的解决办法其实就是在Fuzz里面而不是在Grammar里面进行限制。以URL
Grammar为例，通过Grammar生成的URL在真正的被作为Input给予目标之前，应该在Fuzz系统里面经过URL“合法性”判断，这里的判断可以由作者根据自己的需求来进行限制。
### Grammar Toolbox
在Fuzzing项目中对于Grammar的需求并不是一成不变的，因此Grammar的一大需求就是具备可扩展性。以一个简单的Gramar为例：
    simple_nonterminal_grammar: Grammar = {
        "": [""],
        "": [""],
        "": ["": [">"],
        "": ["id"]  # for now
    }
有时候我们希望拓展其功能，但是不希望原来的Grammar受到影响（类比编程中的继承）,就是一个很简单的如下操作。
    nonterminal_grammar = copy.deepcopy(simple_nonterminal_grammar)
    nonterminal_grammar[""] = ["", ""]
    nonterminal_grammar[""] = ['a', 'b', 'c', 'd']  # for now
总结为一个函数如下，非常简单就不多解释：
    def set_opts(grammar: Grammar, symbol: str, expansion: Expansion, 
                 opts: Option = {}) -> None:
        """Set the options of the given expansion of grammar[symbol] to opts"""
        expansions = grammar[symbol]
        for i, exp in enumerate(expansions):
            if exp_string(exp) != exp_string(expansion):
                continue
            new_opts = exp_opts(exp)
            if opts == {} or new_opts == {}:
                new_opts = opts
            else:
                for key in opts:
                    new_opts[key] = opts[key]
            if new_opts == {}: