title:PeerPress: utilizing enemies' P2P strength against them
author:Zhaoyan Xu and
Lingfeng Chen and
Guofei Gu and
Christopher Kruegel
PeerPress: Utilizing Enemies’ P2P Strength against Them
Zhaoyan Xu
SUCCESS Lab
Lingfeng Chen
SUCCESS Lab
Texas A&M University
Texas A&M University
PI:EMAIL
PI:EMAIL
Guofei Gu
SUCCESS Lab
Texas A&M University
PI:EMAIL
Christopher Kruegel
Dept. of Computer Science
UC Santa Barbara
PI:EMAIL
ABSTRACT
We propose a new, active scheme for fast and reliable de-
tection of P2P malware by exploiting the enemies’ strength
against them. Our new scheme works in two phases: host-
level dynamic binary analysis to automatically extract built-
in remotely-accessible/controllable mechanisms (referred to
as Malware Control Birthmarks or MCB) in P2P malware,
followed by network-level informed probing for detection.
Our new design demonstrates a novel combination of the
strengths from host-based and network-based approaches.
Compared with existing detection solutions, it is fast, reli-
able, and scalable in its detection scope. Furthermore, it can
be applicable to more than just P2P malware, more broadly
any malware that opens a service port for network com-
munications (e.g., many Trojans/backdoors). We develop a
prototype system, PeerPress, and evaluate it on many rep-
resentative real-world P2P malware (including Storm, Con-
ﬁcker, and more recent Sality). The results show that it
can eﬀectively detect the existence of malware when MCBs
are extracted, and the detection occurs in an early stage
during which other tools (e.g., BotHunter) typically do not
have suﬃcient information to detect. We further discuss its
limitations and implications, and we believe it is a great
complement to existing passive detection solutions.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection
General Terms
Security
Keywords
P2P, Malware analysis, Malware detection
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’12, October 16–18, 2012, Raleigh, North Carolina, USA.
Copyright 2012 ACM 978-1-4503-1651-4/12/10 ...$15.00.
1.
INTRODUCTION
Malicious software (malware) is a serious threat to Inter-
net security. While many early botnets use centralized C&C
architecture, botmasters have realized its limitations and be-
gun to use more advanced and robust peer-to-peer (P2P)
architectures for C&C [27]. For example, several contempo-
rary successful botnets such as Storm/Peacomm and Con-
ﬁcker have infected millions of computers and adopted P2P
techniques in their C&C coordination [2, 48]. As stated in a
recent report [26], the Kaspersky Security Network detected
more than 2.5 million P2P malware incidents per month in
March 2010, a high water mark reached for the ﬁrst time
in its monitoring history. A recent P2P botnet, Sality, is
still alive as of the writing of this paper and becoming more
complex [12]. In short, P2P malware is widely believed to
be a promising direction for future malware [27, 43, 50].
Unfortunately, to date, there is relatively little research
available on detecting this important threat. Network-level
detection techniques have been proposed to perform clus-
tering/correlation analysis to identify suspicious botnet in-
fection/behavior patterns [29, 31, 32, 41] or to analyze the
network traﬃc graph/structure to detect possible P2P bot-
nets [33, 34, 43]. However, suspicious pattern identiﬁcation
may fail in front of traﬃc encryption, traﬃc randomiza-
tion and timing pattern manipulation [49]. Structure/graph
analysis can only detect P2P structure regardless whether
the traﬃc is actually malicious or not, and it typically re-
quires tremendous resources (e.g., global ISP-level view) for
acceptable results (a conclusion also mentioned in [34]), mak-
ing it a less attractive solution to Enterprise networks. In an-
other direction, host-based detection techniques such as tra-
ditional signature-based approaches (e.g., anti-virus tools)
and more recent behavior-based approaches (e.g., [35, 36])
have also been proposed. However, due to the widely used
advanced obfuscation/polymorphism [46] and the require-
ment of client-side installation, the solutions are not attrac-
tive for large scale P2P malware detection. Finally, it is
worth noting that both host-based techniques and the above-
mentioned network-based approaches have one common lim-
itation because of their passive monitoring mechanism: they
tend to be slow in terms of detection, e.g., they need to wait
until some (or many) actual (suspicious/malicious) activi-
ties/communications occur to be able to detect the malware
existence.
In this paper, we focus on answering the following ques-
is it possible to combine both the robustness of host-
tion:
581based approaches and the eﬃciency of network-based ap-
proaches to provide fast, reliable, and scalable detection of
P2P malware? We believe that while P2P provides more
ﬂexible and robust coordination for the enemy, we can utilize
the enemy’s strength against him. A key insight is that P2P
malware has to have built-in remotely-accessible/controllable
mechanisms. That is, P2P malware has to open some port(s)
for peer-to-peer communication, which is required for pro-
viding binary downloading services to new infected machines
(i.e., egg downloading [31]), or for easier later access/control
by remote attackers. If we can determine the port number(s)
in use and further know the access/control conversation logic
through that port (we refer to this information as Malware
Control Birthmarks, or MCBs, as deﬁned in detail later), we
could uniquely identify that P2P malware.
Our key insight motivates us to design a novel two-phase
detection framework: (i) ﬁrst, we automatically extract MCB
through host-level dynamic malware analysis; (ii) then, with
the MCB information, we perform network-level, active, in-
formed probing to identify infected machines. Thus, a P2P
malware sample will expose itself if it opens speciﬁc port(s)
or/and it responds in a predicted way to a speciﬁc probing
packet. It is worth noting that our new detection scheme ap-
plies in general to any malware that has MCBs, not just to
P2P malware. For example, Trojan/backdoors also belong
to the detection scope of this scheme and they are among
the current most popular malware in the wild as shown in a
recent Symantec Internet security threat report [8].
Our new design naturally bridges host-based dynamic bi-
nary analysis and network-based informed probing. Com-
pared with existing solutions, it has several unique advan-
tages. First, it is fast and active compared to existing passive
detection mechanisms. Instead of waiting for actual attack-
s/control to happen, we can proactively detect the existence
of malware. Second, it is very reliable in detecting the mal-
ware. While attackers can generate very diﬀerent binaries
for samples in a malware family, the underlying MCBs are
still the same and they are typically unique for diﬀerent
malware families. This is because the attackers still want
to control all the malware (in the same family) in the same
way to make them easily manageable. The accuracy and ro-
bustness of using MCB in detection are comparable to tra-
ditional host-based approaches (they both use ﬁne-grained
binary analysis techniques), and it avoids a lot of network
evasions. Finally, our approach is scalable to large network
deployments. Since we only need one scanner for the whole
network instead of installing detectors on every machine,
the deployment, management, and MCB updating are rela-
tively easy. It even provides the possibility of Internet-scale
scanning/detection when necessary.
Speciﬁcally, our paper makes the following contributions:
• We propose a new detection strategy combining host-
level dynamic malware binary analysis and network-
level informed probing techniques. To the best of our
knowledge, it is the ﬁrst work to discuss (P2P) mal-
ware detection based on automated MCB (Malware
Control Birthmark) extraction and informed network
probing.
It shows a novel combination of strengths
(fast, reliable and scalable) from host- and network-
based detection approaches.
niques to determine if given malware opens a speciﬁc
port and automatically extract the port generation al-
gorithm/logic. Furthermore, we design new techniques
to craft a speciﬁc/special MCB probing packet that
can let MCB-enabled malware expose itself (from net-
work observation perspective), much more eﬃcient and
eﬀective than existing network software fuzzing tech-
niques [7].
In particular, we develop ICE (Informed
forCed Executing), a new technique to quickly identify
possible MCB execution paths that can be used later
in stitched dynamic symbolic execution to derive sat-
isﬁable packet contents to trigger MCB logic. In eval-
uation, ICE can save up to 80% overhead compared to
traditional multi-path exploration schemes.
• We evaluate PeerPress with multiple representative
and complex real-world malware families (including
Storm/Peacomm, Conﬁcker and more recently Sality).
PeerPress successfully extracts their MCBs and demon-
strates that using MCB-informed active probing, we
can detect those malware infected machines with 100%
accuracy and 0 false positive (in three /24 networks).
It is able to detect these malware in an early stage
when other tools (e.g., BotHunter) can not.
• We extensively discuss the limitations and implica-
tions of our approach (Section 7). While not perfect,
PeerPress works great when MCBs are successfully ex-
tracted. Furthermore, even in the worst case (not able
to penetrate into some malware binary), PeerPress can
still use several special types of MCBs (e.g., “no re-
sponse”) to help recognize suspicious malware infec-
tions. We consider PeerPress as an important further
step toward proactive malware detection and a great
complement to existing passive detection techniques.
2. APPROACH OVERVIEW
2.1 Problem Deﬁnition
Assumption. We assume that a captured malware binary
P is available, and we analyze it in our host-based analysis
phase without source code access. With the wide deploy-
ment of honeypots to collect malware samples, this is a very
basic assumption for most malware analysis and defense re-
search [16, 36, 37, 42, 54]. Furthermore, since most malware
binaries are now protected against static analysis (e.g., us-
ing obfuscation/polymorphic techniques), we mainly employ
dynamic analysis techniques in this work.1
Since we target P2P malware, without loss of generality,
we assume the malware sample P contains two independent
program logics:
• P1, which opens a network service port ψ.
• P2, which parses certain network request(s) ρ and gen-
erates response(s) η through the network port ψ.
We assume all binary samples within the same malware
family/version share the same and unique P1 and P2. These
two program logics provide a remotely accessible/control-
lable mechanism that we capture as the birthmark of the
• We develop PeerPress, a prototype system that imple-
ments the proposed framework. We design new tech-
1Note that combining static analysis will deﬁnitely improve
our approach.
582malware family, which we call Malware Control Birthmark
(MCB) in this paper.
More formally, a MCB can be deﬁned as a pair:
Here Portprint denotes the service port(s) ψ used by the
malware and the corresponding algorithm/logic P1 to gen-
erate such port number(s). MCB probing denotes some well-
constructed probing packet(s) ρ that trigger(s) the execution
of malware control logic P2 to reply with some (network ob-
servable) unique response(s) η.
2.2 Approach Overview
We illustrate the overview of PeerPress in Figure 1.
Dynamic(cid:13)
Malware(cid:13)
Analysis(cid:13)
Informed(cid:13)
Malware(cid:13)
Probe(cid:13)
Malware(cid:13)
Control(cid:13)
Birthmarks(cid:13)
Automated MCB Extraction(cid:13)
Active MCB 
Probing/Detection(cid:13)
Figure 1: Our Two-phase Approach: PeerPress
The ﬁrst phase is automated MCB extraction through dy-
namic malware analysis. In this phase, we analyze the mal-
ware sample and extract its MCBs (including both Portprint
{P1, ψ} and MCB Probing ρ, η) if possible.
• Portprint extraction. To identify a portprint, we ﬁrst
run the malware P in a test environment and collect
the trace from the malware starting up to opening a
socket and binding this socket to a port. We capture
the network service port ψ and further reason about
the generation of such port. If the port number is envi-
ronment dependent and/or algorithmically generated,
we need to further extract its generation logic P1.
• MCB probing extraction. Using the same analysis
environment, we begin with sending random fuzzing
packets to trigger the execution of logic P2. Lever-
aging the basic execution trace, we perform directed,
informed multi-path exploration to identify interest-
ing MCB execution paths. We further employ concrete
and symbolic execution techniques to derive MCB prob-
ing packets (input) ρ and the corresponding response
η. To verify the uniqueness of MCBs, we examine ρ
and η to ensure it is not the similar benign traﬃc tar-
geting port ψ.
The second phase is MCB-assisted network probing. We
will use our extracted MCBs to guide probing of networked
computers to quickly and reliably identify malware infected
victims. More speciﬁcally, targeting the P1-generated port
ψ, we employ a network scanner S to probe each host. If we
observe the desired ρ and η pair from probing, we report the
machine as compromised (by the speciﬁc P2P malware).
As we can see, the MCB-assisted network probing is rela-
tively straightforward once MCBs are generated. In the rest
of the paper, we will focus on the automated extraction of
MCBs.
2.3 Key Challenges and Basic Ideas
Challenge 1: Extracting and reasoning about the
dynamic portprint {P1, ψ}. It is worth noting that the
port number ψ that we might observe in the analysis envi-
ronment may not represent the actual port number that will
be opened on compromised machines. This is because the
malware instance P interacts with diﬀerent environments on
diﬀerent machines, which could inﬂuence the generation of
ψ. One real-world example is the Conﬁcker worm [45], which
binds to diﬀerent ports based on diﬀerent IP addresses. Al-
though we know that P generates ψ in the analysis environ-
ment Et, we still need to derive the corresponding port ψi
in the probing environment Ei when infected by the same
malware. The dynamic attribution of the listening port on