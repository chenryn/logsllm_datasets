pending on V being Vr or Vw. We omit the details. For
example, V (A∪ B,u) = A∪ B∪ p(u) = (A∪ p(u))∪ (B∪
p(u)) = V (A,u)∪V (B,u).
Also, these results apply for NV ∈ {NVr,NVw}, since
NV (A,u) = A\ pu(u) = A∪ pc(u), where pc(u) = S\ p(u)
and S represents the tuple space for the database.
Lemma 2. Given a policy pw, a user u ∈ U, a write set
Vw, a table update operation W , and any table T ⊆ S ,
the following conditions are equivalent:
(1) NVw(A,u) = NVw(D,u) = ∅,
(2) NVw(T,u) = NVw(W (T ),u)
where A and D are the set of tuples added and removed
from T.
Proof. Suppose that condition (1) holds. Then we ﬁnd
that
NVw(W (T ),u) = NVw((T ∪ A)\ D,u) def of W
= (NVw(T,u)∪ NVw(A,u))\ NVw(D,u) Lemma 1
= NVw(T,u) by condition (1)
Conversely, suppose that condition (2) holds. Then
NVw(A,u) = NVw(W (T )\ T,u)
= NVw(W (T ),u)\ NVw(T,u)
= NVw(T,u)\ NVw(T,u)
= ∅
def of A
Lemma 1
condition (2)
The same approach also reveals that NVw(D,u) = ∅.
If we deﬁne Av = W (Vw(T,u)) \ Vw(T,u) and Dv =
then from the deﬁnition of
Vw(T,u) \ W (Vw(T,u)),
(cid:104)W (T )(cid:105), we have
(cid:104)W (Vw(T,u))(cid:105) = |Av| +|Dv|
However, we also see that from making use of condition
(1) we have
Vw(A,u) = Vw(W (T )\ T,u)
= Vw(W (T ))\Vw(T,u)
= W (Vw(T,u))\Vw(T,u)
= Av
def of A
Lemma 1
condition (1)
def of Av.
Likewise, the same procedure reveals that Vw(D,u) = Dv.
Applying these two results, along with condition (2),
we ﬁnd that
|Av| +|Dv| = (cid:104)W (Vw(T,u))(cid:105)
= (cid:104)W (T )(cid:105)
= |Vw(A,u)| +|NVw(A,u)|+
|Vw(D,u)| +|NVw(D,u)|
= |Av| +|NVw(A,u)| +|Dv| +|NVw(D,u)|
Removing |Av| and |Dv| from both sides, we are left with
|NVw(A,u)| +|NVw(D,u)| = 0.
But clearly, since both values are non-negative,
means that we must have
this
NVw(A,u) = NVw(D,u) = ∅
Hence by Lemma 2, we also have
NVw(T,u) = NVw(W (T ),u).
Theorem 1. (Same statement as in Section 5)
Proof. Part 1 — First, we show that the two conditions
imply
NVw(T,u) = NVw(W (T ),u)
. We can partition the sets A and D into the disjoint por-
tions consisting of those entries accessible to user u, and
those that are not, giving
(cid:104)W (T )(cid:105) =|Vw(A,u)∪NVw(A,u)|+|Vw(D,u)∪NVw(D,u)|.
We have shown that conditions (1) and (2) imply this
condition.
Part 2 — Now we will show that NVw(T,u) =
NVw(W (T ),u), implies both condition (1) and condition
(2). Suppose that for an arbitrary update operation f,
NVw(T,u) = NVw(W (T ),u)
is true. We partition the set A into its disjoint portions
consisting of the entries accessible to user u and those
that are not, giving
From their deﬁnitions, these are each clearly disjoint so
that they may be separated into
(cid:104)W (T )(cid:105) =|Vw(A,u)|+|NVw(A,u)|+|Vw(D,u)|+|NVw(D,u)|.
A = Vw(A,u)∪ NVw(A,u)
= Vw(A,u)∪ ∅
= Vw(A,u)
by Lemma 2
USENIX Association
26th USENIX Security Symposium    1459
The same procedure shows that Vw(D,u) = D. With these
results, we ﬁnd that
Vw(W (T ),u) = Vw((T ∪ A)\ D,u)
def of W (T )
= (Vw(T,u)∪Vw(A,u))
\Vw(D,u)
= (Vw(T,u)∪ A)\Vw(D,u)
= (Vw(T,u)∪ A)\ D
= W (Vw(T,u))
Lemma 1
Vw(A,u) = A
Vw(D,u) = D
def of W (Vw(T,u))
This shows that condition (1) is true. For condition (2),
We again partition the sets A and D into the disjoint por-
tions consisting of those entries accessible to user u, and
those that are not, giving
(cid:104)W (T )(cid:105) =|Vw(A,u)|+|NVw(A,u)|+|Vw(D,u)|+|NVw(D,u)|.
Using Lemma 2,
|Vw(D,u)|. Focusing on Vw(A,u), we ﬁnd
this simpliﬁes to |Vw(A,u)| +
Vw(A,u) = Vw(W (T )\ T,u)
= Vw(W (T ),u)\Vw(T,u)
= W (Vw(T,u))\Vw(T,u)
def of A
Lemma 1
condition (1)
With a similar procedure, we can show that Vw(D,u) =
Vw(T,u)\W (Vw(T,u)). If we deﬁne Av = W (Vw(T,u))\
Vw(T,u) and Dv = Vw(T,u)\ W (Vw(T,u)), then from the
deﬁnition of (cid:104)W (T )(cid:105), we have
(cid:104)W (Vw(T,u))(cid:105) = |Av| +|Dv|
With this, we ﬁnd
(cid:104)W ,T(cid:105) = |Vw(A,u)| +|Vw(D,u)|
= |W (Vw(T,u))\Vw(T,u)| +|Vw(T,u)\ W (Vw(T,u))|
= |Av| +|Dv|
= (cid:104)W (Vw(T,u))(cid:105)
Since conditions (1) and (2) imply NVw(T,u) =
NVw(W (T ),u) and vice versa, the conditions are neces-
sary and sufﬁcient.
1460    26th USENIX Security Symposium
USENIX Association
B Query Transformation Examples
To better understand the transformation described in Sec-
tion 6, we describe the steps of the No-Copy Strategy,
which is comprised of Algorithms 1 and 3, using three
example queries. In these examples, we use the osCom-
merce database schema and focus on queries that read or
modify the reviews table. In osCommerce, a customer
can read a reviews for any product but can only write re-
views for products that the customer has purchased. Af-
ter writing a review, the customer can also edit it. These
policies can be expressed in SafeD as the read and write
sets shown in Listings 4 and 5.
DEFINE READSET FOR ROLE c u s t o m e r USER $i
ON TABLE reviews
AS SELECT * FROM reviews
Listing 4: Customer’s read set for the reviews table.
DEFINE WRITESET FOR
ROLE c u s t o m e r USER $i
ON TABLE reviews
AS SELECT R .* FROM reviews
R ,
o r d e r s _ p r o d u c t s OP , orders O
WHERE
O . c u s t o m e r s _ i d = c u r r e n t _ i d
AND
O . o r d e r s _ i d = OP . o r d e r s _ i d
AND
OP . p r o d u c t s _ i d = R .
p r o d u c t s _ i d AND
R . c u s t o m e r s _ i d = c u r r e n t _ i d
Listing 5: Customer’s write set for the reviews table.
B.1 Select Query Example
Suppose a customer with current id=2 manages to (e.g.,
by exploiting a bug in the application) cause the web ap-
plication to issue the following query:
SELECT * FROM reviews
WHERE p r o d u c t s _ i d IN (
SELECT p r o d u c t s _ i d
FROM o r d e r s _ p r o d u c t s OP , orders
O
WHERE O . c u s t o m e r s _ i d = 1 AND
O . o r d e r s _ i d = OP . o r d e r s _ i d )
Listing 6: Original SELECT query issued by the
application
First, SafeD must obtain the current customer’s read
policy and intersect it with the customer’s query. The
only tables appearing in this query are reviews, orders,
and orders products. Hence, SafeD only needs to obtain
the read sets of these three tables (Alg. 1 line 2). The read
set for orders, and orders products are given in Listing 7
and Listing 8. For orders, a customer is only permitted to
view their own order information. For orders products,
a customer is only permitted to view order product infor-
mation for their own orders.
DEFINE READSET FOR ROLE c u s t o m e r USER $i
ON TABLE orders
AS SELECT * FROM orders O
WHERE O . c u s t o m e r s _ i d =
c u r r e n t _ i d
Listing 7: Customer’s read set for the orders table.
DEFINE READSET FOR ROLE c u s t o m e r USER $i
ON TABLE o r d e r s _ p r o d u c t s
AS SELECT OP .*
FROM o r d e r s _ p r o d u c t s OP ,
orders O
WHERE O . c u s t o m e r s _ i d =
c u r r e n t _ i d
AND O . o r d e r s _ i d = OP .
o r d e r s _ i d
Listing 8: Customer’s write set for the orders products
table.
Since the query in Listing 6 is a nested query, SafeD
performs read set intersections recursively, starting with
the deepest sub-query (Alg. 1 line 3). As stated in Sec-
tion 5.2, SafeD appends additional tables and conditions
in accordance with the read set deﬁnition, thus trans-
forming each SELECT query into a read-safe one. The
original query is thus transformed into the following
read-safe query and then executed (using Alg. 1 lines 4-
5):
SELECT * FROM reviews
WHERE p r o d u c t s _ i d IN (
SELECT p r o d u c t s _ i d
FROM o r d e r s _ p r o d u c t s OP , orders
O
WHERE ( O . c u s t o m e r s _ i d = 1 AND
O . o r d e r s _ i d = OP . o r d e r s _ i d ) AND
O . c u s t o m e r s _ i d = 2 AND
O . c u s t o m e r s _ i d = 2 AND
O . o r d e r s _ i d = OP . o r d e r s _ i d ) ;
Listing 9: write-safe SELECT query created by SafeD
Note that,
in the original query,
the customer at-
tempted to see reviews for products purchased by another
customer with customers id=1. Although the customer
has full read access to reviews, it is a breach of policy for
a customer to read another customer’s information in the
orders products table.
USENIX Association
26th USENIX Security Symposium    1461
5 , 1 -1 -2016 , 1 -1 -2016 , 50)
Listing 12: Original INSERT query issued by the
application
Similar to the DELETE query example, the original
INSERT query is read-safe by deﬁnition. SafeD identi-
ﬁes the table modiﬁed by the query, reviews, obtains the
customer’s write set deﬁnition for that table, and passes
the user context, the write-safe INSERT query, and the
write set deﬁnition to PhantomExtract (Alg. 1 lines 6-8).
Given that the current write-safe query is an INSERT,
SafeD does not perform write set intersection (Alg. 3
lines 5-6) . Since the query is not a DELETE and the write
set contains a join, Algorithm 2 is invoked (from Alg.
3 lines 9-10). SafeD creates an empty copy of reviews,
which we will call temp (Alg. 2 lines 3-5). Then, it ex-
tracts the phantom of the INSERT query, by copying the
write-safe query and executing it on temp (Alg 2. lines 8-
9). After execution, SafeD determines if the rows added
to and removed from temp both belong to the write set
(Alg. 2 lines 10-12). Based on the query in Listing 12,
we see that the original query adds a single row with cus-
tomers id=1. Therefore, the phantom adds a single row
with customers id=1 to temp, which is not in write set,
thus the phantom is not write-safe. No modiﬁcation is
made to the reviews table (Alg. 2 line 17) and temp is
dropped.
B.2 Delete Query Example
Suppose a customer with current id=2 causes the appli-
cation to issue the following query:
DELETE FROM reviews
Listing 10: Original DELETE query issued by the
application
First, SafeD obtains the customer’s read policy for ta-
bles used in any SELECT’s in the query, but there are no
SELECT queries. This means, by deﬁnition, the current
query is write-safe. SafeD then identiﬁes the table mod-
iﬁed by the query, reviews, and obtains the customer’s
write set deﬁnition for this table (Alg. 1 lines 6-7). SafeD
passes the user context, the write-safe DELETE query, and
the write set deﬁnition to PhantomExtract (Alg. 1 line 8).
Given that the current write-safe query is a DELETE,
SafeD performs write set intersection by appending ad-
ditional conditions to the outer query’s WHERE clause
(Alg. 3 lines 3-4). This results in the following query:
DELETE FROM reviews
WHERE c u s t o m e r s _ i d = 2 AND
p r o d u c t s _ i d IN (
SELECT p r o d u c t s _ i d
FROM o r d e r s _ p r o d u c t s OP ,
orders O
WHERE O . c u s t o m e r s _ i d = 2
AND
O . o r d e r s _ i d = OP . o r d e r s _ i d )
Listing 11: Transformed write-safe DELETE query
created by SafeD 2
Since the write set includes a join (see Listing 5, an ad-
ditional nested query is added to obtain a list of products
purchased by the current customer. This list represents
the set of products the customer is allowed to reviews.
Since the transformed query is a DELETE, it is deemed
safe and executed by SafeD (Alg. 3 lines 7-8). Note that
the original query (Listing 10) attempted to remove all of
the reviews in the database, but SafeD transformed it into
a safe form, i.e., a query that only deletes the reviews of
the customer with current id=2.
B.3
As a last example, suppose a customer with current id=2
causes the application to issue the following query.
Insert Query Example
INSERT INTO reviews
( reviews_id , products_id ,
customers_id , customers_name
,
reviews_rating , date_added ,
last_modified , r e v i e w s _ r e a d )
VALUES ( -1 , 1 , 1 , ’John’,
1462    26th USENIX Security Symposium
USENIX Association