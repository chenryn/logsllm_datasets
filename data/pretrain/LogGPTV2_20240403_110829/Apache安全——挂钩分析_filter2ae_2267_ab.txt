  * 编写挂钩处理函数
  * 通过register_hooks 注册函数
  * 添加 AP_DECLARE_MODULE
    static void some_hook(request_rec *r){
        ap_rputs("some hook");
        return;
    }
    static void register_hooks(apr_pool_t *p)
    {
        ap_hook_check_authn(some_hook, NULL, NULL, APR_HOOK_MIDDLE,
                            AP_AUTH_INTERNAL_PER_CONF);
        ap_hook_fixups(authenticate_basic_fake, NULL, NULL, APR_HOOK_LAST);
        ap_hook_note_auth_failure(hook_note_basic_auth_failure, NULL, NULL,
                                  APR_HOOK_MIDDLE);
    }
    AP_DECLARE_MODULE(auth_basic) =
    {
        STANDARD20_MODULE_STUFF,
        create_auth_basic_dir_config,  /* dir config creater */
        merge_auth_basic_dir_config,   /* dir merger --- default is to override */
        NULL,                          /* server config */
        NULL,                          /* merge server config */
        auth_basic_cmds,               /* command apr_table_t */
        register_hooks                 /* register hooks */
    };
​  
查遍APACHE的所有文件，也不能找到ap_hook_header_parser和ap_hook_post_read_request等函数声明和实现，这是因为挂钩注册函数是通过宏AP_IMPLEMENT_HOOK_VOID/AP_IMPLEMENT_HOOK_RUN_ALL/AP_IMPLEMENT_HOOK_RUN_FIRST来实现的。
###  0x6 小结
通过对挂钩操作流程的了解，想必大家都想整出来个自己的hook链，为了增强动手实践能力，在接下来的两节内容里带着大家编写自己的挂钩处理函数以及一起调试Basic挂钩处理函数的相关流程。
## 0x04 编写自己的挂钩
    # 下载http源码
    wget http://archive.apache.org/dist/httpd/httpd-2.4.41.tar.gz
### **1\. 声明挂钩**
在http_request.h中声明自己设计的挂钩
    AP_DECLARE_HOOK(int,monkey_boy,(request_rec *r))
###  2\. 声明挂钩数组和结构
在request.c 中进行声明
    APR_HOOK_LINK(monkey_boy)
###  3\. 注册挂钩
在request.c 中注册挂钩
    AP_IMPLEMENT_HOOK_RUN_FIRST(int,monkey_boy,
                                (request_rec *r), (r), DECLINED)
###  4\. 编写挂钩处理函数
在mod_auth_basic.c模块中的register_hooks函数中添加
    ap_hook_monkey_boy(monkey_boy_founction,NULL, NULL, APR_HOOK_MIDDLE);
###  5\. 注册挂钩处理函数
    static void monkey_boy_founction(request_rec *r){
        ap_rputs("Hello Monkey!!",r);
        return;
    }
后续直接进行编译即可使用
###  6\. 编译使用
>
> 使用apache扩展工具apxs可以为apache编译和安装扩展模块。新安装的模块将作为动态共享对象提供给apache，因此，apache运行的平台必须支持DSO特性，并且httpd必须内建mod_so模块。这样才能使用mod_so提供的LoadModule指令在运行时将模块加载到apache服务器中。
主要介绍为已运行的apache添加mod_proxy模块，先定位到apache源码中modules/proxy目录。然后使用apxs进行编译安装，编译指令为
    /usr/local/apache2/bin/apxs -i -c -a  mod_proxy.c proxy_util.c
    #-c表示进行编译
    #-i表示将生成的模块安装到apache的modules目录下
    #-a选项在httpd.conf中增加一条LoadModule指令以载入刚安装的模块，或者如果此指令已存在，则启用之
    #-n选项显式地指定模块名称
模块查询指令
    #查看apache支持的模块：
    httpd -l
    #查看apache载入的模块：
    httpd -t -D DUMP_MODULES
安装成功以后将在apache的modules目录下生成mod_proxy.so文件，并且在httpd.conf中加入了一行
    LoadModule proxy_module modules/mod_proxy.so
proxy只是核心模块，具体使用时还需要其它模块的支持，安装方法类似。
    /usr/local/apache2/bin/apxs -i -c -a mod_proxy_http.c
    /usr/local/apache2/bin/apxs -i -c -a mod_proxy_ftp.c
    /usr/local/apache2/bin/apxs -i -c -a mod_proxy_connect.c
同样，安装后在apache的modules目录中生成了mod_proxy_http.so, mod_proxy_ftp.so,
mod_proxy_connect.so文件。并且在httpd.conf中添加了如下行：
    LoadModule proxy_http_module  modules/mod_proxy_http.so
    LoadModule proxy_ftp_module   modules/mod_proxy_ftp.so
    LoadModule proxy_connect_module modules/mod_proxy_connect.so
这样，mod_proxy模块就安装好了，进行具体的应用配置，重启apache就可以了。
## 0x05 调试Basic挂钩处理函数
为了更好的理解钩子以及钩子处理函数在Apache运行过程的影响，打算调试下Basic挂钩处理函数在Apache程序中扮演的角色。
我们在mod_auth_basic.c 中注册了自己的hook处理函数，从Apache的Hook 执行函数作为调试的起点
###  0x1 调试准备工作
在调试机上安装了gdb、pwndbg等调试工具，查看httpd进程pid号（因为负载均衡的原因会有多个子进程），选择其中一个子进程进行attach
    gdb --pid 84370
因为在编译过程中添加了-g选项，所以可以对Apache及其模块进行源码调试。
###  0x2 调试hook执行函数
在Apache中hook执行函数在ap_process_request_internal函数中被调用，为了处理自己的钩子函数，我们在代码的开始部分添加自己的hook执行函数，如下图所示  
​  
在第296行，ap_run_check_user_id中进行了basic校验，结合basic的注册函数可能很多人产生了疑问，命名注册的是ap_hook_check_authn
为什么在执行的时候跑到了ap_run_check_user_id链中。
这是因为在ap_hook_check_authn 函数实现中调用了ap_hook_check_user_id 注册函数
* * *
在gdb调试过程中有个比较有意思的现象，ap_run_check_user_id 找不到函数定义，在调试时一直显示下面状态
通过汇编代码可以看出其调用逻辑，其实这个就是在挂钩声明时声明的挂钩执行函数，他的方法实现是在挂钩注册函数中进行的
call qword ptr [rbx] 在动态调用链式函数地址，当前函数地址是 authenticate_basic_user
正好是Basic处理函数，其实这里可以通过ida查看 ap_run_check_user_id 函数反编译代码来进行分析
从ap_process_request_internal函数出来后的相关逻辑，因为access_status
返回值为-1所以没有执行ap_invoke_handler函数，从而报了401 Unauthorized 的错误
​
## 0x06 总结
通过阅读Apache源码的方式解决了一开始的很多疑问，在最后的总结部分我也打算换种方式去做，把我之前存在的问题和分析过源码后获得到的答案以问答的方式总结出来。
###  0x1 能否简单描述挂钩是如何构造的？
在Apache中构造个挂钩要经历， **声明** 、 **注册** 两个大阶段，声明主要是定义一些挂钩 **变量** 和 **函数，**
而注册可以理解为声明阶段注册的 **变量** 和 **函数** 进行 **赋值** 和 **实现** ，那么整体来讲声明和注册函数分为以下几种
**1\. 声明阶段**
宏定义
    AP_DECLARE_HOOK  //声明挂钩
    APR_HOOK_LINK    //声明挂钩数组
    ARP_HOOK_STRUCT  //声明挂钩结构
声明的变量和函数
    ap_hook_xxxx
    ap_run_xxxx
    ap_LINK_xxxx
**​2\. 注册阶段**
宏定义
    AP_IMPLEMENT_HOOK_RUN_(FIRST|ALL) //注册挂钩
### ​0x2 能否简单描述挂钩是如何使用的？
关于挂钩的使用就相对来说比较简单了，在 **声明** 和 **注册** 阶段之后预留了两个主要的功能函数 **ap_hook_xxxx** 和
**ap_run_xxxx，** 一个负责注册一个负责使用  
​  
在模块注册钩子的时候使用的ap_hook_xxxx函数
在request.c 中有调用钩子的执行函数
###  0x3 从逆向分析的角度讲，哪些方面更容易存在问题？
我们关注的是request.c
主程序的调用逻辑以及每个钩子的注册类型，重点关注在钩子处理函数中的代码逻辑，并综合判断它在主程序中对整个钩子执行链的影响，关于这一点可以参考对于CVE-2021-22986
漏洞的分析。其次本文也为分析Apache httpd mod_proxy SSRF漏洞CVE-2021-40438做了铺垫。下篇文章将详细分析httpd
mod_proxy中出现的漏洞。
## 参考文献