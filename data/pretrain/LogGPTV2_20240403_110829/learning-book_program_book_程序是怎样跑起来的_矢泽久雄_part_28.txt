调用API
用功能就可以实现对硬件的控
制。在Windows中，系统调用
Winows（操作系统）
称为API（图11-1）各API就
OUT指令
N指令
是应用调用的函数。这些函数
硬件
的实体被存储在DLL文件中。
图11-1应用通过操作系统间接拉制硬件
下面让我们来看一个利用
系统调用来间接控制硬件的示例。例如，假设要在窗口中显示字符串，
更多资料请关注裁的新浪薄客http：//blo
---
## Page 226
第11章硬件控制方法
就可以使用WindowsAPI中的TextOut函数。TextOut的语法如代码清
单11-1所示。在这段代码中，确实没有能让大家意识到硬件的参数。
带有“设备描述表的句柄”这一注释的参数hdc，是用来指定字符串及
图形等绘制对象的识别值，表示的也不是直接硬件设备
代码清单11-1TexOut函数的语法（C语言）
BOOL TextOut(
HDC hde.
//设备描述表的句码
int nKStart,
//显示字符串的y坐标
//显示字特串的x坐标
int nYstart,
int ebString
LPCTSTR 1pString,
//指向字打串的指针
//字符串的文字数
那么，在处理TextOut函数的内容时，Windows做了什么呢？从结
果来看，Windows直接控制了作为硬件的显示器。但Windows本身也
是软件，由此可见，Windows应该向CPU传递了某些指令，从而通过
软件控制了硬件
11.2支撑硬件输入输出的IN指令和OUT指令
Window控制硬件时借助的是输人输出指令。其中具有代表性的
两个输人输出指令就是IN和OUT。这些指令也是汇编语言的助
记符。
IN指令和OUT指令的语法如图11-2所示。这是Pentium等x86
系列CPU用的IN指令和OUT指令的语法。IN指令通过指定端口号的
端口输人数据，并将其存储在CPU内部的寄存器中。OUT指令则是把
①在向窗口和打印机输出字符事时，可以使用Windows 提供的TexOut品数
作为API。C语言提供的printf品数，是用未在命令提示符中显示字符串的
品数。使用printf品数，是无法向窗口和打印机输出字符事的。
---
## Page 227
11.2支排硬件输入输出的IN指令和OUT指令
CPU寄存器中存储的数据，输出到指定端口号的端口。
IN
寄存器名，口号
输入数据
口号，寄存器名
输出数据
图11-2IN指令和OUT指令的语法
下面让我们来看一下端口号和端口到底是什么。计算机主机中。
附带了用来连接显示器及键盘等外围设备的连接器。而各连接器的内
部，都连接有用来交换计算机主机同外围设备之间电流特性的IC。这
些IC，统称为VO控制器。由于电压不同，数字信号及模拟信号的电
流特性也不同，计算机主机和外围设备是无法直接连接的。为了解决
这个问题，1/O控制器就很有必要了。
I/O是Input/Output的缩写。显示器、键盘等外围设备都有各自专
用的I/O控制器。IO控制器中有用于临时保存输入输出数据的内存。
这个内存就是端口。端口（port）的字面意思是“港口”。由于端口就
像是在计算机主机和外围设备之间进行货物（数据）装卸的港口，所
以因此得名。I/O控制器内部的内存，也称为寄存器。虽然都是寄存
器，但它和CPU内部的寄存器在功能上是不同的。CPU内部的寄存
器是用来进行数据运算处理的，而I/O寄存器则主要是用来临时存储
数据的。
在实现IO控制器功能的IC中，会有多个端口。由于计算机中连
接着很多外围设备，所以就会有多个1/O控制器，当然也会有多个端
更多资料请关注裁的新浪薄客http：//blop
---
## Page 228
第11章硬件控制方法
口。一个IO控制器既可以控制一个外围设备，也可以控制多个外围
设备。各端口之间通过端口号进行区分。端口号也称为VO地址。
IN指令和OUT指令在端口号指定的端口和CPU之间进行数据的
输人输出。这和通过内存地址来进行主内存的读写是一样的道理
（图11-3）。
CPU
用于健盘的VO（端口号xxX、）
寄存器
端口
电流特性的转换
盘
寄存器
娱口
电流特性的转换
用于显示器的I/O（端口号2zz2）
星示器
端口
电流特性的转膜
图11-3以端口为桥梁来实现CPU和外国设备之间的数据传递
通过Windows的控制面板，我们可以查看外围设备所连接的I/O
控制器的端口号。图11-4是通过Windows控制面板来查看软盘驱动控
制器的属性时的情况。“I/O的范围”右侧的数值就是端口号。通过指
定该端口号，并利用IN/OUT命令，就可以直接控制软驱这个硬件设
备，实现输入输出处理了。
①1/O装置，有的直接附带在计算机主机的主板（用来放置CPU的基板）上，
有的则是各自独立的扩张板卡。健盘、鼠标、打印机等常用的IO，一般都
在主板上，而显示高速图形的显示器及同卡等特殊的1/0，通常是独业的扩
张板卡。
②近年来款期已经不是标配了，Win7后的版本中，可以通过控制面板一系统
安全→系统一设备管理查看。—译者注
---
## Page 229
11.3编写测试同的输入输出序
常规细动序|详期温息资通
资源设置）：
资源类型设量
/0-
端口号
I/0 6国 032T - 0377
设置基于）：[当置
使用自幼设置)
更改设置）
没有
中央设备列表
图11-4通过控制面板查看软盘驱动器的端口号
11.3编写测试用的输入输出程序
首先让我们利用IN指令和OUT指令，来进行一个直接控制硬件
的试验。假设该试验的目的是让计算机内配置的蜂鸣器（小喇叭）发
音。虽然蜂鸣器内置在计算机内部，但其本身也是外围设备的一种。
因为就算是把蜂鸣器取出，对计算机主机也不会有什么影响。
由于用汇编语言编写程序比较麻烦，因此这里我们采取在C语言
源代码中插入助记符的方式来实现。在大部分C语言的处理（编译器
的种类）中，只要使用_asm{和}括起来，就可以在其中记述助记符。
也就是说，这样就可以编写C语言和汇编语言混合的源代码。这里，
更多资料请关注裁的新浪薄客http：//blop
---
## Page 230
第11章硬件控制方法
我们使用微软的VisualC++来作成应用。
在AT兼容机中，蜂鸣器的默认端口号是61H（末尾的H，表示的
是十六进制数（Hexadecimal）的意思）。用IN指令通过该端口号输人
数据，并将数据的低2位设定为ON，然后再通过该端口号用OUT指
令输出数据，这时蜂鸣器就会响起来。采用同样的操作方法，将数据
的低2位设定为OFF并输出后，蜂鸣器就停止了。
位设定为ON指的是将该位设定为1.位设定为OFF指的是将该
位设定为0。把位设定为ON，只需把想要设定为ON的位设定为1，
其他位设定为0后进行OR运算即可。由于这里需要把低2位置为1，
因此就是和03H进行OR运算。03H用8位二进制数来表示的话是
00000011。由于即便高6位存在着具体意义，和0进行OR运算后也不
会发生变化，因面就和03H进行OR运算。把位设定为OFF，只需把
想要置OFF的位设定为0，其他位设定为1后进行AND运算即可。由
于这里需要把低2位设定为0，因此就要和FCH进行AND运算。在源
代码中，FCH是用OFCH来记述的。在前面加0是汇编语言的规定，
表示的是以A~F这些字符开头的十六进制数是数值的意思。0FCH用
8位二进制数来表示的话是11111100。由于即便高6位存在着具体意
义，和1进行AND运算后也不会产生变化，因而就是同OFCH进行
OR运算（代码清单11-2）。
代码清单11-2利用IN/OUT指令来控制蜂鸣器的程序示例
void main()(
//计数器
int i:
//蜂鸣器发声
①可以免费下载的BorlandC++5.5，不支持加入了汇编语言的源代码的编译。
使用该版本时需要购买特定的汇编器。因此这里我们用的是VisualC++6.0。
---
## Page 231
11.3编写测试用的输入纳出程序
_asn
IN EAX,61H
OREAX,03H
OUT 61H, BAX
//等待一段时间
for（1=0;1<1000000:1++）
2
//蜂鸣器停止发声
asm（
IN EAX,61H
OUT 611,EAX
接下来就让我们对代码清单11-2进行详细说明。main是位于C语言
程序运行起始位置的函数。在该函数中，有两个用_asm和}围起来的
部分，它们中间有一个使用for语法的空循环（不做任何处理的循环）。
（1）部分是控制蜂鸣器发音的部分。首先，通过INEAX,61H（助
记符不区分大小写）指令，把端口61H的数据存储到CPU的EAX寄
存器中。接下来，通过OREAX，03H指令，把EAX寄存器的低2位设
定成ON。最后，通过OUT6IH,EAX指令，把EAX寄存器的内容输
出到61号端口，使蜂鸣器开始发音。虽然EAX寄存器的长度是32
位，不过由于蜂鸣器端口是8位，所以只需对下8位进行OR运算和
AND运算就可以正常运行了。
（2）部分是一个重复100万次的空循环，主要是为了在蜂鸣器开
始发音和停止发音之间稍微加上一些时间间隔。因为现在计算机的
CPU运行速度非常快，哪怕是100万次的循环，也几乎是瞬间完成的。
（3）部分是用来控制蜂鸣器发音停止的部分。首先，通过IN
EAX,6IH指令，把端口61H的数据存储到CPU的EAX寄存器中。接
---
## Page 232
第11章硬件控制方法
下来，通过ANDEAX，0FCH指令，把EAX寄存器的低2位设定成
OFF。最后，通过OUT61H,EAX指令，把寄存器EAX的内容输出到
61号端口，使蜂鸣器停止发音。大家可以把61H端口的低2位认为是
蜂鸣器的开关。
最后，让我们对代码清单11-2进行编译，并尝试运行一下。这时，
蜂鸣器应该会发出“嘀！”的短促声音。此外，有一点需要注意的是，
该程序虽然在旧版本Windows（95、98）中可以正常运行，但在这以后
的Windows（XP、Vista等）版本中是无法正常运行的。这是因为，为
了保护系统安全，现在的Windows禁止了应用直接控制硬件的方式。
如果将该程序在最近的Windows版本上运行的话，就会出现如图11-5
所示的错误信息，而且蜂鸣器也不会发出声音。
Semples.me
Sample5.exe B停L止工作
出现了一个间题，导欧程序停止证常工作，如果有可用的解决
方富，Windows将关闻规序井通知思
调试]关闭理序
图11-5由于现在的Windows禁止应用直接控制硬件，因而出现了错误信息
11.4外围设备的中断请求
目，对应的值是0x00000006（06）。IRQ（Interrupt Request）是中断请
求的意思。那么，IRQ主要是用来做什么的呢？
IRQ是用来暂停当前正在运行的程序，并跳转到其他程序运行的
---
## Page 233
11.4外国设备的中断请求
必要机制。该机制称为中断处理。中断处理在硬件控制中担当着重要角
色。因为如果没有中断处理，就有可能出现处理无法顺畅进行的情况。
从中断处理开始到请求中断的程序（中断处理程序）运行结束之
前，被中断的程序（主程序）的处理是停止的。这种情况就类似于在处
理文档的过程中有电话打进来，电话就相当于中断处理。假如没有中
断功能的话，就必须等到文档处理完毕才可以接听电话。这样就太不
方便了。由此可见，中断处理有着很大的价值。就像接听完电话后返
回到原来的文档作业一样，中断处理程序运行结束后，处理也会返回
到主程序中继续（图11-6）
处理文档-主程序
接电话=中断处理
程序
图11-6中断处理就类似于在处理文档时接电话
实施中断请求的是连接外围设备的1/O控制器，负责实施中断处理
程序的是CPU。为了进行区分，外围设备的中断请求会使用不同于1/O
端口的其他编号，该编号称为中断编号。在控制面板中查看软盘驱动
器的属性时，IRQ处显示的数值06，表示的就是用06号来识别软盘驱
更多资料请关注裁的新浪薄客http：//blo
215
---
## Page 234
第11章硬件控制方法
动器发出的中断请求。另一方面，操作系统及BIOS则会提供响应中
断编号的中断处理程序。
假如同时有多个外围设备进行中断请求的话，CPU也会为难。为
此，我们可以在IO控制器和CPU中间加入名为中断控制器的IC来进
行缓冲。中断控制器会把从多个外围设备发出的中断请求有序地传递