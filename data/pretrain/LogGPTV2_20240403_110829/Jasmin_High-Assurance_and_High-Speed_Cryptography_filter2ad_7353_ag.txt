⟨peop2⟩
|
::= ⟨var⟩
|
|
|
|
|
|
|
|
INT
FALSE
⟨var⟩ ⟨brackets⟨pexpr⟩⟩
|
TRUE
[⟨parens⟨ptype⟩⟩] ⟨brackets(⟨var⟩ + ⟨pexpr⟩)⟩
⟨peop1⟩ ⟨pexpr⟩
⟨pexpr⟩ ⟨peop2⟩ ⟨pexpr⟩
⟨parens⟨pexpr⟩⟩
⟨var⟩ ⟨parens_tuple⟨pexpr⟩⟩
⟨prim⟩ ⟨parens_tuple⟨pexpr⟩⟩
::= NID
::= ⟨ident⟩
::= # ⟨ident⟩
|
|
::= !
-
-
*
::= +
|
|
|
|
|
&& | PIPEPIPE
|
& | PIPE
^
|
| s
>
| >
| >>s
| >=
| =s
Instructions. A Jasmin instruction is either an array initializa-
tion, a parallel assignment (maybe conditional), a function call, a
conditional branch, a for loop with explicit direction, or a while
loop.
The while loop is slightly non-standard as its body is split in two
parts: the first part is executed on every iteration before the con-
dition is evaluated; the second part is executed on every iteration
after the condition is evaluated (unless the condition evaluates to
false, in which case the execution of the loop terminates). This en-
ables to handle, with a single syntactic construct, usual while loops,
do-while loops, and while loops whose conditions are instructions
(the first part of the body) rather than simple expressions.
A sequence of instructions surrounded by braces makes a block.
⟨pinstr⟩
::= ARRAYINIT ⟨parens⟨var⟩⟩ ;
⟨tuple1⟨plvalue⟩⟩ ⟨peqop⟩ ⟨pexpr⟩ [IF ⟨pexpr⟩] ;
|
⟨var⟩ ⟨parens_tuple⟨pexpr⟩⟩ ;
|
IF ⟨pexpr⟩ ⟨pblock⟩
|
IF ⟨pexpr⟩ ⟨pblock⟩ ELSE ⟨pblock⟩
|
|
FOR ⟨var⟩ = ⟨pexpr⟩ TO ⟨pexpr⟩ ⟨pblock⟩
FOR ⟨var⟩ = ⟨pexpr⟩ DOWNTO ⟨pexpr⟩ ⟨pblock⟩
|
| WHILE [⟨pblock⟩] ⟨parens⟨pexpr⟩⟩ [⟨pblock⟩]
::= ⟨braces⟨pinstr⟩∗⟩
⟨pblock⟩
The assignment operators are either raw or compound with a
binary (arithmetic or bit-wise) operator.
⟨peqop⟩
::= =
|
+=
|
>>=
|
&=
|
|
-=
| >>s=
^=
|
*=
| 
⟨tuple⟨stor_type⟩⟩] ⟨pfunbody⟩
⟨pparam⟩
⟨pglobal⟩
::= PARAM ⟨ptype⟩ ⟨ident⟩ = ⟨pexpr⟩ ;
::= ⟨ident⟩ = ⟨pexpr⟩ ;
B JASMIN X25519-4LIMB IMPLEMENTATION
This section provides more detailed information regarding our op-
timized X25519-4limb-jasmin implementation in Jasmin. Figures 6
and 7 show the complete source code for the iterated_square and
mladder procedures – that exemplify the use of high-level control
flow structures in Jasmin – including the respective programmer
annotations needed for automatic verification. The remaining proce-
dures consist of simple straight-line code and only require top-level
procedure contract annotations. Our full X25519-4limb-jasmin im-
plementation comprises a total of 16 procedures and 798 lines of
code. These include 24 lines of programmer annotations split into
procedure contracts (13 lines) and loop invariants (11 lines).
Figure 6: Complete iterated_square procedure from our
X25519-4limb-jasmin implementation.
fn iterated_square(stack b64[4] xa, stack b64 n) −→ stack b64[4]
//@ requires n >=s 3 && n =s 0);
//@ invariant n =s 0) ==> valid(sp,8∗i,8∗i + 7);
//@ security invariant public(i);
{
tmp1 = [sp + 8∗i];
is = i;
s = tmp1;
while
//@ decreases j;
//@ invariant j > j;
js = j;
bit = bit & 1;
swap = prevbit;
swap ^= bit;
prevbit = bit;
x2r,z2,x3,z3 = cswap(x2,z2,x3,z3,swap);
x2r,z2,x3,z3 = ladderstep(x1,x2r,z2,x3,z3);
x2 = x2r;
j = js;
j -= 1;
} (j >=s 0)
j = 63;
i = is;
i -= 1;
} (i >=s 0)
return x2, z2;
}
Session H4:  Formal VerificationCCS’17, October 30-November 3, 2017, Dallas, TX, USA1823