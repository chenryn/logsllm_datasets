title:Certified computer-aided cryptography: efficient provably secure machine
code from high-level implementations
author:Jos&apos;e Bacelar Almeida and
Manuel Barbosa and
Gilles Barthe and
François Dupressoir
Certiﬁed Computer-Aided Cryptography: Efﬁcient Provably
Secure Machine Code from High-Level Implementations
José Bacelar Almeida
HasLab – INESC TEC and
Universidade do Minho
Braga, Portugal
Gilles Barthe
IMDEA Software Institute
Madrid, Spain
ABSTRACT
We present a computer-aided framework for proving con-
crete security bounds for cryptographic machine code imple-
mentations. The front-end of the framework is an interac-
tive veriﬁcation tool that extends the EasyCrypt framework
to reason about relational properties of C-like programs ex-
tended with idealised probabilistic operations in the style
of code-based security proofs. The framework also incor-
porates an extension of the CompCert certiﬁed compiler to
support trusted libraries providing complex arithmetic cal-
culations or instantiating idealized components such as sam-
pling operations. This certiﬁed compiler allows us to carry
to executable code the security guarantees established at the
high-level, and is also instrumented to detect when compi-
lation may interfere with side-channel countermeasures de-
ployed in source code.
We demonstrate the applicability of the framework by ap-
plying it to the RSA-OAEP encryption scheme, as standard-
ized in PKCS#1 v2.1. The outcome is a rigorous analysis
of the advantage of an adversary to break the security of as-
sembly implementations of the algorithms speciﬁed by the
standard. The example also provides two contributions of
independent interest: it bridges the gap between computer-
assisted security proofs and real-world cryptographic imple-
mentations as described by standards such as PKCS,and
demonstrates the use of the CompCert certiﬁed compiler in
the context of cryptographic software development.
Categories and Subject Descriptors
D.2.4 [Software Engineering]: Software/Program veriﬁ-
cation—formal methods; E.3 [Data]: Data Encryption—
public key cryptosystems, standards, PKCS#1
Keywords
formal proof; PKCS#1; side-channels; certiﬁed compilation
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’13, November 4–8, 2013, Berlin, Germany.
Copyright is held by the owner/author(s). Publication rights licensed to ACM.
ACM 978-1-4503-2477-9/13/11 ...$15.00.
http://dx.doi.org/10.1145/2508859.2516652.
Manuel Barbosa
HasLab – INESC TEC and
Universidade do Minho
Braga, Portugal
François Dupressoir
IMDEA Software Institute
Madrid, Spain
1.
INTRODUCTION
The security of computer and communication infrastruc-
tures critically relies on software implementations of cryp-
tographic standards. Practitioners implementing such stan-
dards face signiﬁcant challenges. First, they must resolve
all cases of underspeciﬁcation and address operational con-
siderations that are often ignored by standards. Then, they
must ensure that the generated code is, not only correct and
eﬃcient, but also respects a programming discipline that
minimizes the possibility of side-channel attacks. Such dis-
ciplines, or countermeasures, may be enforced directly over
assembly code, or they may be speciﬁed and validated over
source code in a language such as C [11]; in this latter case
the developer will either trust the compiler to preserve the
countermeasures in generated code, or further validation is
performed. Unfortunately, there is limited tool support to
help practitioners address these issues (see § 6), which makes
the development process error-prone. As a consequence of
subtle errors, software implementations may provide little
or no security [15].
Another problematic technological gap for practitioners
lies between the security claimed by cryptographic standards
and the concrete security bounds derived using provable se-
curity [22]. Indeed, provable security typically relies on an
idealized model of computation and elides security-relevant
aspects of runtime environments (e.g. memory manage-
ment) and implementation details (e.g. error management).
Although this abstraction gap was identiﬁed very early in
the development of provable security, principled approaches
narrowing this gap are only starting to emerge. Prominent
examples include real-world provable cryptography [17, 30],
which analyzes realistic descriptions of cryptographic algo-
rithms. However, realism comes at a signiﬁcant cost: se-
curity analyses in these extended models are vastly more
complex, and therefore more error-prone and more diﬃcult
to check. Moreover, the additional realism achieved by real-
world cryptography does not primarily address the afore-
mentioned issues faced by implementers.
In short, there are two signiﬁcant gaps, with cumulative
eﬀects on the real-world security of cryptographic software
implementations. This paper addresses the challenge of nar-
rowing these gaps.
Technical overview. To achieve this goal, we build on two
recent and independent developments: computer-aided cryp-
1217tography, which provides tool support for provable security,
and veriﬁed compilation, which delivers machine-checkable
evidence of semantic preservation between source and target
programs.
To address the gap between cryptographic proofs and stan-
dards, we extend the EasyCrypt framework [10] to reason
about C-like programs extended with idealised probabilis-
tic operations in an enhanced security model in which the
adversary is given access to execution traces meant to cap-
ture side-channel leakage. The approach is general, but
we focus on the well-known Program Counter Model [28].
The advantage of this approach is twofold. Firstly, one can
make explicit in the security proof various aspects of crypto-
graphic scheme speciﬁcations that address side-channel at-
tacks. For example, we are able to check that a speciﬁ-
cation of a decryption algorithm does not reveal informa-
tion about the secret key by returning a failure value at an
early point in its execution. Secondly, this computational
model serves as a reference for the deployment of counter-
measures against side-channel attacks throughout the com-
pilation process. For example, even though modular ex-
ponentiation is treated as a native operation in our high-
level computational model, we can make it explicit in its
formalization that, in order to ensure security in the Pro-
gram Counter Model, the trace produced by its execution
must be independent of its input values.
To address the second issue, of relating cryptographic
standards and their low-level implementations, we leverage
the annotation mechanism and semantic correctness proof of
the CompCert compiler [25] to prove that security of the C
implementation implies security of the assembly implemen-
tation and, particularly, that countermeasures against side-
channel attacks are correctly deployed in the generated as-
sembly code. In addition, we extend CompCert with the no-
tion of a trusted library providing multi-precision arithmetic
functionality and instantiations of idealised operations. This
allows practitioners to develop and compile their implemen-
tations according to common practices, by providing a clean
interface that speciﬁes the guarantees required from an ex-
ternal library in order to obtain assembly code that is correct
and secure.
The EasyCrypt libraries, formal proofs and the correspond-
ing C code are publicly available. Details can be found in
the full version of this paper.1
Contributions. We introduce a software development frame-
work that allows practitioners to obtain rigorous mathemati-
cal guarantees for low-level (PowerPC, ARM and x86) imple-
mentations of cryptographic software. More precisely, our
framework enables practitioners to:
1. formally verify that a C implementation of a crypto-
graphic algorithm is secure in a security model that
captures both theoretical security and side-channel leak-
age.
2. automatically generate an optimised assembly imple-
mentation that is proven to retain the security prop-
erties of the C implementation, namely by correctly
deploying side-channel countermeasures suitable for a
rigorously deﬁned leakage model.
We illustrate the eﬀectiveness of our framework by proving
security and generating a secure assembly implementation
1Available at http://eprint.iacr.org/2013/316.
of the RSA-OAEP encryption scheme, as standardized in
PKCS#1 v2.1. The main challenges in the security proof
were the following:
• Formalizing and verifying a security proof taking into
account the exact padding scheme adopted in the stan-
dard.
• Carrying out this proof in a computational model that
incorporates Program Counter Model traces, taking
into account the implementations of all the algorithms
speciﬁed in the standard, including encoding and de-
coding routines, as well as the recommended and man-
dated side-channel countermeasures.
The process of generating an assembly implementation of
RSA-OAEP that inherits the security guarantees established
at the C level with EasyCrypt is a fully automatic process us-
ing our extended version of CompCert. We thus believe that
our extensions are of independent interest to cryptographic
software developers deploying side-channel countermeasures
at the C level. Intuitively, they permit validating that as-
sembly code leaks no more information than the source code
via its control ﬂow. This is a non-functional property that
is not known to be oﬀered by CompCert in general (nor,
to the best of our knowledge, by any other C compiler),
and our extension provides this guarantee in the style of
translation validation [25]. For example, we have used this
feature to check the assembly code generated by compil-
ing various components in the NaCl cryptographic library,
which includes relevant side-channel countermeasures at C-
level [11].
2. SYNTAX AND SECURITY OF PKE IM-
PLEMENTATIONS
Although the techniques we discuss in this paper are gen-
erally applicable to implementations of arbitrary crypto-
graphic primitives, we will deal only with public-key encryp-
tion (PKE) schemes.
We will be concentrating on real-world implementations
of this primitive. This means that, throughout the paper,
a PKE scheme will provide descriptions of the encryption
and decryption algorithms as implementations in either C
or assembly code. Our notion of a PKE implementation
does not include the key generation algorithm, which will
be seen as an abstract algorithm that produces key pairs,
and that is modelled as a family of (eﬃciently samplable)
distributions Gλ, indexed by the security parameter. We
adopt this simpliﬁcation for ease of presentation and note
that, from a theoretical point of view, this is without loss of
generality. From a practical point of view, this is also not a
major limitation, as in many applications key generation is
performed in a trusted environment, using implementations
developed independently of the encryption and decryption
algorithms. Nevertheless, we also emphasise that all our
techniques and results can be easily extended to cover the
implementation of the key generation algorithm.
Deﬁnition 1. (PKE syntax) A public-key encryption scheme
implementation Π is a tuple (lang, Enc, Dec, (cid:96)(·)) where:
• lang ∈ {C, asm} indicates the implementation language.
• For each value of λ, EncRand,RO
(m, pk) implements a de-
terministic polynomial-time encryption algorithm. On
λ
1218input a message m and a public key pk, this algorithm
outputs a return code rc and a ciphertext c, possibly
after making a series of calls to external functions (or-
acles) Rand and RO.
• For each value of λ, DecRO
λ (c, sk) implements a deter-
ministic polynomial-time decryption algorithm. On in-
put a ciphertext c and a secret key sk, this algorithm
outputs a return code rc and a message m, possibly af-
ter making series of calls to external function (oracle)
RO.
• (cid:96)pk(·) and (cid:96)sk(·) are polynomials denoting the length of
the octet strings representing public keys and secret
keys, respectively.
• (cid:96)m(·) and (cid:96)c(·) are polynomials denoting the (maxi-
mum) length of the octet strings representing messages
and ciphertexts output by the decryption and encryp-
tion algorithms, respectively.2
Here, Rand((cid:96)) returns a random octet string of length (cid:96),
and RO(i, (cid:96)i, (cid:96)o) gives access to a family of random functions
indexed by ((cid:96)i, (cid:96)o), where each function takes an octet string
i of length (cid:96)i and returns an octet string of length (cid:96)o. The
return codes rc are chosen from a ﬁnite set, and they indicate
the success (T) of the operation or its justiﬁed failure (F(·)).
We treat implementations as families of algorithms in-
dexed by the security parameter, which should be inter-
preted for practical purposes as admitting that the secu-
rity parameter must be known at compile-time. We deviate
slightly from the standard approach of adopting bit-strings
as the representation of inputs and outputs to cryptographic
algorithms, and adopt octet strings instead. This is without
loss of generality. We also restrict our attention to PKEs
for which the (maximum) lengths of the inhabitants of the
message, randomness and ciphertext spaces are ﬁxed in the
description of the scheme (as polynomials in λ) for each
value of the security parameter. This is not without loss of
generality, but is a necessary constraint when dealing with
implementations operating in computational platforms with
limited memory, and a natural one to make when consider-
ing cryptographic standards such as RSA-OAEP.
Correctness. The correctness of a PKE scheme implemen-
tation requires that the decryption operation inverts the en-
cryption procedure. We present this deﬁnition using a code-
based approach, and again emphasise that a scheme Π may
be given as a C implementation or as an assembly imple-
mentation. The notion of correctness is the same in either
case.
Deﬁnition 2. (PKE correctness) Let game CorrΠ,A be as
shown in Figure 1. The correctness of a PKE scheme Π
relative to G requires that, for all adversaries A and for all
λ, we have that
Pr[ CorrΠ,G,A(1λ) ⇒ T ] = 1 .
We note that security games are presented here at a level
of abstraction that omits certain details of the implementa-
tions, e.g., how parameter passing is handled. Such details
are made explicit in the formalization of the model, as de-
scribed in the next section.
2We do not restrict the size of the message and ciphertext
inputs to these algorithms, and require implementations to
check the validity of their lengths.
Game CorrΠ,G,A(1λ):
(pk, sk) ←$ Gλ
m ←$ A(pk, sk)
If |m| > (cid:96)m(λ) Return T
(rc, c) ←$ EncRand,RO
(rc(cid:48), m(cid:48)) ← DecRO
Return rc = T ∧ rc(cid:48) = T ∧ m(cid:48) = m
λ
λ (c, sk)
(m, pk)
Figure 1: Game deﬁning the correctness of a PKE.
Security. For security, we consider the standard notion of
indistinguishability under adaptive chosen-ciphertext attacks
(IND-CCA), adapted to ﬁt in our syntactic conventions and
with an extension to capture side channel leakage.
Deﬁnition 3. (IND-CCA security of PKE implementations)
Let game IND-CCAΠ,G,A be as deﬁned in Figure 2. The
IND-CCA security of a PKE scheme Π relative to G requires
that, for all adversaries A, the following advantage deﬁnition
is negligible:
Advind-cca
Π,G,A(λ) := 2 · Pr [IND-CCAΠ,G,A(λ) ⇒ T] − 1 .
Game IND-CCAΠ,G,A(1λ):
b ←$ {0, 1}
(pk, sk) ←$ Gλ
(m0, m1, st) ←$ ADecrypt,RO