SQL> insert into test values (6.6);  
SQL>  insert into test values (null);  
SQL> select median(id) from test;  
MEDIAN(ID)  
----------  
       3.85  
```  
这个结果怎么得到的?  
```  
N=6(忽略id is null的行), 因为未使用partition by, 也为使用group by, 所有记录为1个分组. 所以分组共6行.  
RN=(1+0.5*(N-1))=3.5  
FRN=floor(3.5)=3  
CRN=ceiling(3.5)=4  
if (CRN = FRN = RN) then  
      (value of expression from row at RN)  
   else  
      (CRN - RN) * (value of expression for row at FRN) +  
      (RN - FRN) * (value of expression for row at CRN)  
value of expression for row at FRN, CRN. (按照id排序, 然后取对应行号上的值.)  
```  
最终结果median(id)等于  
```  
(4-3.5)*3.3+(3.5-3)*4.4=3.85  
```  
等同于如下PERCENTILE_CONT用法 :   
```  
SQL> select PERCENTILE_CONT(0.5) within group (order by id) from test;  
PERCENTILE_CONT(0.5)WITHINGROUP(ORDERBYID)  
------------------------------------------  
                                      3.85  
```  
PERCENTILE_DISC用法 :   
```  
SQL> select row_number() over(order by id),test.* from test order by id;  
ROW_NUMBER()OVER(ORDERBYID)         ID  
--------------------------- ----------  
                          1        1.1  
                          2        2.2  
                          3        3.3  
                          4        4.4  
                          5        5.5  
                          6        6.6  
                          7        6.6  
                          8        6.6  
                          9        6.6  
                         10        6.6  
                         11        6.6  
                         12        6.6  
                         13        6.6  
                         14        6.6  
                         15 NULL  
15 rows selected.  
```  
id有效的行数为14, 第四行的连续性位置值为.285714286  
```  
SQL> select 4/14.0 from dual;  
    4/14.0  
----------  
.285714286  
```  
PERCENTILE_disc的参数为numeric类型, 结果为该分组内按id排序的大于或等于该连续性位置的id值.  
因此取0.286则为4.4的下一个值.  
```  
SQL> select PERCENTILE_disc(0.286) within group (order by id) from test;  
PERCENTILE_DISC(0.286)WITHINGROUP(ORDERBYID)  
--------------------------------------------  
                                         5.5  
```  
取0.285则为第四行的id值.  
```  
SQL> select PERCENTILE_disc(0.285) within group (order by id) from test;  
PERCENTILE_DISC(0.285)WITHINGROUP(ORDERBYID)  
--------------------------------------------  
                                         4.4  
```  
下面的更加精确的说明这个结果 :   
```  
SQL> select PERCENTILE_disc(.285714286) within group (order by id) from test;  
PERCENTILE_DISC(.285714286)WITHINGROUP(ORDERBYID)  
-------------------------------------------------  
                                              5.5  
SQL> select PERCENTILE_disc(.285714285) within group (order by id) from test;  
PERCENTILE_DISC(.285714285)WITHINGROUP(ORDERBYID)  
-------------------------------------------------  
                                              4.4  
```  
PERCENTILE_DISC函数解释 :   
```  
The first expr must evaluate to a numeric value between 0 and 1, because it is a percentile value.   
This expression must be constant within each aggregate group.   
The ORDER BY clause takes a single expression that can be of any type that can be sorted.  
For a given percentile value P,   
PERCENTILE_DISC sorts the values of the expression in the ORDER BY clause   
and returns the value with the smallest CUME_DIST value   
(with respect to the same sort specification) that is greater than or equal to P.  
```  
PERCENTILE_CONT函数解释 :   
```  
The result of PERCENTILE_CONT is computed by linear interpolation between values after ordering them. Using the percentile value (P) and the number of rows (N) in the aggregation group, you can compute the row number you are interested in after ordering the rows with respect to the sort specification. This row number (RN) is computed according to the formula RN = (1+(P*(N-1)). The final result of the aggregate function is computed by linear interpolation between the values from rows at row numbers CRN = CEILING(RN) and FRN = FLOOR(RN).  
The final result will be:  
  If (CRN = FRN = RN) then the result is  
    (value of expression from row at RN)  
  Otherwise the result is  
    (CRN - RN) * (value of expression for row at FRN) +  
    (RN - FRN) * (value of expression for row at CRN)  
```  
MEDIAN函数详解 :   
```  
MEDIAN is an inverse distribution function that assumes a continuous distribution model.   
It takes a numeric or datetime value and returns the middle value or an interpolated   
value that would be the middle value once the values are sorted. Nulls are ignored in the calculation.  
This function takes as arguments any numeric data type or any nonnumeric data type that can be implicitly converted to a numeric data type.   
If you specify only expr, then the function returns the same data type as the numeric data type of the argument.   
If you specify the OVER clause, then Oracle Database determines the argument with the highest numeric precedence,   
implicitly converts the remaining arguments to that data type, and returns that data type.  
The result of MEDIAN is computed by first ordering the rows. Using N as the number of rows in the group,   
Oracle calculates the row number (RN) of interest with the formula RN = (1 + (0.5*(N-1)).   
The final result of the aggregate function is computed by linear interpolation between the values from rows   
at row numbers CRN = CEILING(RN) and FRN = FLOOR(RN).  
The final result will be:  
if (CRN = FRN = RN) then  
      (value of expression from row at RN)  
   else  
      (CRN - RN) * (value of expression for row at FRN) +  
      (RN - FRN) * (value of expression for row at CRN)  
```  
摘录oracle一个rank的within group 用法.  
```  
select rank(1500) within group (order by salary desc) "rank of 1500" from employees;  
```  
实际得到的结果就是：  
如果存在一条记录，这条记录的salary字段值为1500。  
那么将该条记录插入employees表中后，按照salary字段降序排列后，该条记录的序号为多少？  
比如原表employees内容如下  
```  
SQL> select * from employees;  
EMP_ID     EMP_NAME         SALARY  
---------- -------------------- ----------  
10001      ZhangSan              500  
10002      LiSi                        1000  
10003      WangWu               1500  
10004      MaLiu                     2000  
10005      NiuQi                      2500  
```  
则如果一个员工的薪水为1500，那么该员工在员工表中的薪水排名应与WangWu相同，并列排名第三。  
通过聚合函数RANK() WITHIN GROUP验证一下：  
```  
SQL> select rank(1500) within group (order by salary) as "rank number" from employees;  
rank number  
-----------  
          3  
```  
若原表内容如下  
```  
SQL> select * from employees;  
EMP_ID     EMP_NAME         SALARY  
---------- -------------------- --------------  
10001      ZhangSan             500  
10004      MaLiu                    2000  
10005      NiuQi                    2500  
```  
则排名应为第2，验证如下  
```  
SQL> select rank(1500) within group (order by salary) as "rank number" from employees;  
rank number  
-----------  
          2  
```  
Oracle RANK聚合用法语法 :   
```  
RANK(expr [, expr ]...) WITHIN GROUP  
   (ORDER BY  
    expr [ DESC | ASC ]  
         [ NULLS { FIRST | LAST } ]  
    [, expr [ DESC | ASC ]  
            [ NULLS { FIRST | LAST } ]  
    ]...  
   )  
```  
Oracle RANK分析函数用法语法 :   
```  
RANK( )  
   OVER ([ query_partition_clause ] order_by_clause)  
Oracle PERCENTILE_CONT 用法 :   
PERCENTILE_CONT(expr) WITHIN GROUP  
   (ORDER BY expr [ DESC | ASC ])  
   [ OVER (query_partition_clause) ]  
```  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")