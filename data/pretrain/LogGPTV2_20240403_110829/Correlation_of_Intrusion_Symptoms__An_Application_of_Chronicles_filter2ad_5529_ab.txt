Notice that a chronicle instance can also be invalidated because only innocu-
ous events are observed, but no alarms. In this case, the innocuous events shall
not be shown to the operator. Examples of innocuous events are provided in
Section 3.2.
Malicious Phenomena. Some attacks are characterized by several suspicious
events. In this case, sensors trigger one alarm per event. Chronicles can be used
to model these phenomena. Such a chronicle recognition contributes to alarm
reduction because only one alarm (the recognized chronicle) is provided to the
operator instead of each individual alarm. It also contributes to the semantic
improvement because the recognized phenomena is more signiﬁcant than each
individual alarm. If partial chronicle are invalidated, their constitutive alarms
are provided to the operator individually and may be used in other correlation
mechanisms.
Innocuous events used in this kind of chronicles shall not be provided to
the operator if the chronicle is invalidated. If a chronicle is recognized, then the
involved innocuous events are available to the operator for investigation.
In the intrusion detection literature, alarm correlation often refers to attack
scenarios. An attack scenario is a sequence of explicit attack steps which are
logically linked and lead to an objective. A portscan followed by a buﬀer overﬂow
against a given service is an example of attack scenario.
An attack scenario can be modeled by a chronicle. However, we do not in-
tend to use chronicles to model attack scenarios. There are two reasons for this.
Correlation of Intrusion Symptoms: An Application of Chronicles
101
Firstly, the relevance of an attack scenario is questionable because many (un-
predictable) paths may lead to a given attack objective. Secondly, it is hard to
specify quantitative time constraints in chronicles because the time gaps between
each step may vary a lot, depending on how hurried the attacker is. The attacker
may even work on time gaps to evade detection.
As a result, malicious phenomena modeled with chronicles are phenomena
whose occurrences are deterministic. Examples of such phenomena are given in
sections 3.4 and 3.3.
3.2 Alarm Semantics Improvement
Description of the Phenomenon. False alarms are the main cause of alarm
overload; Julisch reports that they represent up to 99% of the overall number of
alarms [19].
We believe that the diagnosis provided by intrusion detection systems can be
strengthened by taking into account contextual events to discriminate true from
false positives. Contextual events can be benign events whose occurrence can
reinforce or mitigate the conﬁdence an operator has in an alarm. In that sense,
chronicles can both represent known false positive cases and true positives.
To illustrate this, we propose a chronicle which is used identify a recurrent
false positive triggered by a network IDS in our network, pretending that buﬀer
overﬂow attacks occur. The shellcodes used in some buﬀer overﬂow attacks con-
tain long 0x90 bytes strings. Many misuse network IDSes signatures are based
on this property to detect buﬀer overﬂow attacks in a generic way. However,
this kind of signature can provoke false positives because legitimate binary data
going on the wire can match the signature. This is the case with ftp ﬁle transfers:
binary ﬁle transfers can trigger alarms because the probability for a binary ﬁle
to contain 0x90 bytes strings is potentially high4. Deactivating the signature is
not a solution because true attacks against ftp servers would not be detected
anymore.
One solution can consist in mitigating the alarm severity when it is triggered
during a ﬁle transfer, i.e between a request from a client and the end of the ﬁle
transfer. This implies that sensors generate events for each ﬁle retrieval request
and the corresponding acknowledgement message. As a result, every ﬁle transfer
provokes two innocuous events. Notice that the frequency of ﬁle transfer requests
is moderate with regard to the events throughput managed by chronicles, so these
innocuous events do not burden the recognition process. However, a security
operator should keep this consideration in mind when writing chronicles.
Description of the Chronicle. The corresponding chronicle is in Figure 4.
The goal of this chronicle is to generate a report informing the operator that a
buﬀer overﬂow alarm was raised, but it occurred during a ﬁle transfer, so it is
probably a false alarm. As a result, any buﬀer overﬂow alarm that is not inside
a chronicle is really suspect.
4 http://www.whitehats.com/info/IDS181
102
B. Morin and H. Debar
1
2
3
4
5
6
7
8
9
10
11
12
13
14 }
chronicle shellcode_mitigation[?source, ?target]
{
event(alarm[ftp_retr_request,?source,?target], t1)
event(alarm[shellcode,?source,?target], t2)
noevent(alarm[ftp_transfer_complete,?target,?source],
event(alarm[ftp_transfer_complete,?target,?source], t3)
(t1+1,t3-1))
t1<t2<t3
when recognized {
emit event(alarm[shellcode_mitigation, ?source, ?target], t2);
}
Fig. 4. A Chronicle Example: Alarm Mitigation
In this chronicle, ftp_retr_request and ftp_transfer_complete are the
innocuous events which respectively indicate a FTP ﬁle transfer request made
by the client and the end of ﬁle transfer. The shellcode alarm is the actual
buﬀer overﬂow attempt. A sensor is required to trigger the ﬁrst two events.
Snort can be used for that purpose, with the adequate signatures to monitor
control commands of the FTP protocol.
The order in which the reifying predicates are speciﬁed does not matter
because the system relies on the temporal constraints.
The temporal symbols t1,t2 and t3 are variables which are instantiated by
the system. Note that contrary to the domain attributes parameters, temporal
symbols do not need to be preﬁxed by a “?”, since temporal symbols only de-
note variables (absolute dates cannot be used as time symbols). The chronicle
recognition system instantiates t1 (resp. t2 and t3) with the ftp_retr_request
(resp. shellcode and ftp_transfer_complete) event timestamp.
The use of identical variable names as parameters of the domain attributes
implicitly imposes the source and target involved in the chronicle to be identical.
The noevent predicate in line 5 is necessary to prevent chronicles to live
forever in the system (see section 2.2). No quantitative temporal constraint is
speciﬁed in this chronicle (we do not know how long a ﬁle transfer may last)
and since the CRS recognition is exhaustive, the ftp_transfer_complete event
could be used as the end of an earlier chronicle instance being recognized; as a
result, we need to add a constraint saying that ftp_transfer_complete alarms
should not occur twice within a chronicle.
When faced with a “normal” ftp transaction, (i.e. a ftp_retr_request fol-
lowed by a ftp_transfer_complete event), the chronicle recognition system
discards a chronicle instance when receiving the ftp_transfer_complete event,
because the chronicle constraints (t2<t3) cannot be satisﬁed anymore.
Correlation of Intrusion Symptoms: An Application of Chronicles
103
1
2
3
4
5
6
7
8
9
10
11
12 }
chronicle portscan[?source, ?target]
{
event(alarm[sid_1,?source,?target], t1)
occurs((1,+oo),alarm[sid_2,?source,?target], (t1+1,t2))
noevent(alarm[sid_3,?source,?target], (t1,t2))
event(alarm[sid_3,?source,?target], t2+1)
t1<t2
when recognized {
emit event(alarm[portscan, ?source, ?target], t2);
}
Fig. 5. A Chronicle Example: portscan detected by Snort
3.3 Alarm Reduction
Description of the Phenomenon. Intrusion detection systems tend to spread
their diagnosis over many alarms, mainly because the analysis is performed on
single events; as a result, alarms are too ﬁne-grained: a single phenomenon in-
volving many events –be it benign or not– provokes many alarms. Let us take
the example of portscan detection by Snort to illustrate this.
When detecting portscans, Snort generates three kinds of alarms: a portscan
_begin alarm, several portscan_status during the scan, and ﬁnally a portscan
_end when the portscan is supposedly ﬁnished.
Description of the Chronicle. A simple yet eﬀective chronicle model to
synthesize portscan alarms is provided in Figure 5. The sid_1, sid_2 and sid_3
alarms respectively correspond to the portscan_begin, portscan_status and
portscan_end alarms. These alarms should have the same source and the same
target. The ﬁrst event (line 1) initiates the chronicle and instantiates t1; t2 is
instantiated by the last event (line 6); between t1 and t2+1, an inﬁnite number
of portscan_status alarms may occur.
Portscans are recurrent phenomena. For the same reason as the previous
chronicle example, we need to add a constraint saying that portscan end alarms
should not occur twice within a chronicle.
3.4 Alarm Semantics Improvement and Alarm Reduction
Description of the Phenomenon. Recognizing known phenomena in which
many events are involved both enables reduction of the number of alarms (we
only have to consider the alarm set) and semantic enhancement (the identiﬁed
phenomenon). More and more attacks are automated processes, making it pos-
sible to write interesting chronicles because the intrusion steps are always the
same.
104
B. Morin and H. Debar
chronicle nimda[?source, ?target]
{
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18 }
occurs((1,2),alarm[iis_code_red_ii_root_exe,?source,?target],
(t,t+2000))
occurs((1,4),alarm[iis_decode_bug,?source,?target],(t,t+2000))
occurs((1,14),alarm[iis_cmd_exe,?source,?target],(t, t+2000))
occurs((1,3),alarm[web_dot_dot,?source,?target],(t,t+2000))
occurs((1,2),alarm[iis_unicode,?source,?target],(t,t+2000))
occurs((1,1),alarm[iis_unicode2,?source,?target],(t,t+2000))
occurs((1,1),alarm[iis_unicode3,?source,?target],(t,t+2000))
occurs((1,1),alarm[iis_decode_bug3,?source,?target],(t,t+2000))
occurs((1,1),alarm[iis_decode_bug2,?source,?target],(t,t+2000))
occurs((1,1),alarm[iis_decode_bug4,?source,?target],(t,t+2000))
when recognized {
emit event(alarm[nimda, ?source, ?target], t);
}
Fig. 6. A Chronicle Example: a Nimda worm attempt detected by Dragon
Example of such phenomena are worms. Worms attacks involve many events,
each of which can trigger one or more alarm. As worms are recurrent attacks,
reducing the number of alarms for each attempt has a strong impact on the
overall alarm excess.
The Nimda worm attacks vulnerable IIS web servers. During each infection
attempt, many suspect or malicious HTTP requests are sent to the target. Thus,
each Nimda attempt triggers many alarms by conventional IDSes: Snort5 gener-
ates about 20 alarms; Dragon6 generates about 30 alarms.
Description of the Chronicle. In Figure 6 we show a chronicle suited for
Dragon alarms. A Nimda attempt is characterized by a burst of 10 distinct
alarms. Each alarm can occur several times (for instance, the iis_cmd_exe
occurs 1 to 14 times at each attempt). All the alarms should have the same
source and the same target, and they all occur within a 2s time window (the
resolution here is 1 ms). When such an alarm burst occurs, a synthetic alarm
nimda_worm_attempt is reported. Only one synthetic alarm represents the 30
original ones.
We provide an complementary chronicle example called new_infection in
Figure 7. This example illustrate two important things: the chronicles looping
functionality and the use of domain attributes which are not alarms. The goal
of this chronicle is to recognize every new server infection by the Nimda worm.
The ﬁrst parameter of the new_infection chronicle is the newly infected server
and the second parameter is the host causing the infection.
5 http://www.snort.org
6 http://dragon.enterasys.com
Correlation of Intrusion Symptoms: An Application of Chronicles
105
1
2
3
4
5
6
7
8
9
10
11
12
13 }
chronicle new_infection[?victim, ?attacker]
{
event(infected[?victim, somebody]:(true, false), t0)
noevent(infected[?victim, ?]:(false, true), (t0,t1))
event(alarm[nimda, ?attacker, ?victim], t1)
event(alarm[nimda, ?victim, ?], t2)
t2 - t1 in [1000,10000]
when recognized {
emit event(infected[?victim, ?attacker]:(false,true), t1)
}
Fig. 7. Identifying new Nimda infections
We can say that a host b is infected by a if a Nimda attempt from a to b is
detected (line 6), followed by Nimda attempts from b to any host (line 7) 1 to
10 seconds later (line 8).
The problem is that a host still receives attack attempts although it is already
infected. As a result, if we only use the previous two patterns to detect newly
infected hosts, the chronicle would be recognized every time b is attacked. We
want the chronicle to be recognized only once, so we need to tag infected hosts:
b is newly infected only if it was not infected before the attack from a.
We use a infected(?victim, ?attacker) ∈ {true, f alse} domain attribute. Note
that infected is not an alarm. It is rather a topology-like relation. Note also that
contrary to alarms which are messages, infected is a valued domain attribute.
Line 3 of the chronicle is the initialization of the state of the hosts: the
chronicle recognition system should receive events saying that by default, no
host is infected (“victim is infected by somebody” is false).
Line 4 should be read as “[For the chronicle to be recognized], victim must
not have been previously infected by any host”. When used solely, the “?” symbol
represents a variable whose value should not be instantiated (any).
Line 6 and 7 are the manifestations of a successful infection. When the
chronicle is recognized, the status of victim is updated (infected[?victim,
?attacker] becomes true when the attempt occurs – see line 11).
3.5 Sensor Cooperation
Description of the Phenomenon. The chronicle language is a high level
declarative language. It does not presume the nature of the underlying input
event stream. As a result, cooperation (i.e. correlation of alarms from heteroge-
nous sources) is naturally modeled with chronicles. Of course, the input format
must be compliant with the one expected by the chronicle recognition system
(the domain attributes properties –arity, parameters domain values– have to be
deﬁned).
106
B. Morin and H. Debar
chronicle successful_codeExec[?source, ?target]
{
1
2
3
4
5
6
7
8
9
10
11
12
13
14 }
event(alarm[?bufov_snort_alarm, ?source, ?target], t1);