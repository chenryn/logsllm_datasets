通常来说，MSVC 编译成的可执行程序的基地址都是 0x400000，而代码段则从 0x401000 开始。由此可知，
这种程序代码段的相对虚拟地址 RVA 的首地址都是 0x1000。而 MSVC 通常把 DLL 的基地址设定为 0x10000000。 
操纵系统可能会把模块加载到不同的基地址中，还可能是因为程序自身的要求。当程序“点名”启用
地址空间分布的随机化（Address Space Layout Randomization，ASLR）技术的时候，操作系统会把其各个
模块加载到随机的基地址上。 
ASLR 是 shellcode 的应对策略。shellcode 都会调用系统函数。 
在 Windows Vista 之前早期系统里，系统的 DLL（如 kernel32.dll，user32.dll 的加载地址是已知的固定
地址。在同一个版本的操作系统里，系统 DLL 里的系统函数地址也几乎一尘不变。也就是说，shellcode
可以根据版本信息直接调用系统函数。 
为了避免这个问题，地址空间分布的随机化 ASLR 技术应运而生。它能够将程序以及程序所需模
块加载到无法事先确定的随机地址。 
在PE 文件中，我们通过设置一个标识来实现ASLR。这个标识的名称是：IMAGE_DLL_CHARACTERISTICS_ 
DYNAMIC_BASE。 
68.2.3  子系统 
PE 文件有一个子系统字段。这个字段的值通常是下列之一： 
 NATIVE（系统驱动程序）。 
 console 控制台程序。 
 GUI（非控制台程序，也就是最常见的图文界面程序）。 
68.2.4  操作系统版本 
PE 文件还指定了可加载它的 Windows 操作系统最低版本号。如需查阅版本号码和 Windows 发行名称
的完整列表，请参阅：https://en.wikipedia.org/wiki/Windows_NT#Releases。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 68 章  Windows NT 
671 
举个例子，MSVC 2005 编译的.exe 文件只能运行在 Windows NT4（版本号为 4.00）及以后的操作系统
上。但是 MSVC 2008 编译调应用程序（版本号是 5.00）不兼容 NT4 系统，只能运行于 Windows 2000 及以
后的操作系统。 
在 MSVC 2012 生成的.exe 文件里，操作系统版本号的默认值是 6.00。这种程序仅面向 Windows Vista 及后
期推出的操作系统。但我们可以编译选项强制编译器生成支持 Windows XP 的应用程序。详情请参阅 
https://blogs.msdn.microsoft.com/vcblog/2012/10/08/windows-xp-targeting-with-c-in-visual-studio-2012/。 
68.2.5  段 
所有的可执行文件都可分解为若干段（sections）。段是代码和数据、以及常量和其他数据的组织形式。 
 带有 IMAGE_SCN_CNT_CODE 或 IMAGE_SCN_MEM_EXECUTE 标识的段，封装的是可执行代码。 
 数据段的标识为 IMAGE_SCN_CNT_INITIALIZED_DATA、IMAGE_SCN_MEM_READ 或 IMAGE_ 
SCN_MEM_WRITE 标记。 
 未初始化的数据的空段的标识为 IMAGE_SCN_CNT_UNINITIALIZED_DATA、IMAGE_SCN_ 
MEM_READ 或 IMAGE_SCN_MEM_WRITE。 
 常数数据段（其中的数据不可被重新赋值）的标识是 IMAGE_SCN_CNT_ INITIALIZED_DATA 以
及 IMAGE_SCN_MEM_READ，但是不包括标识 IMAGE_SCN_MEM_WRITE。如果进程试图往这个
数据段写入数据，那么整个进程就会崩溃。 
PE 可执行文件的每个段都可以拥有一个段名称。然而，名称不是段的重要特征。通常来说，代码段的
段名称是.text，数据段的段名称是.data，常数段的段名称.rdata（只读数据）。其他类型的常见段名称还有： 
 .idata：导入段。IDA 可能会给这个段分配一个伪名称；详情请参考本书 68.2.1 节。 
 .edata：导出段。这个段十分罕见。 
 .pdata：这个段存储的是用于异常处理的函数表项。它包含了 Windors NT For MIPS、IA64 以及 x64
所需的全部异常处理信息。详情请参考本书的 68.3.3 节。 
 .reloc：（加载）重定向段。 
 .bss：未初始化的数据段（BSS）。 
 .tls：线程本地存储段（TLS）。 
 .rsrc：资源。 
 .CRT：在早期版本的 MSVC 编译出的可执行文件里，可能出现这个这个段。 
经过加密或者压缩处理之后，PE 文件 section 段的段名称通常会被替换或混淆。 
此外，开发人员还可以控制 MSVC 编译器、设定任意段的段名称。有关详情请参阅：https://msdn.microsoft. 
com/en-us/library/windows/desktop/cc307397.aspx。 
部分编译器（例如 MinGW）和链接器可以在生成的可执行文件中加入带有调试符号、或者其他的调
试信息的独立段。然而新近版本的 MSVC 不再支持这项功能。为了便于专业人员分析和调试应用程序，
MSVC 推出了全称为“程序数据库”的 PDB 文件格式。 
PE 格式的 section 段的数据结构大体如下： 
typedef struct _IMAGE_SECTION_HEADER { 
  BYTE Name[IMAGE_SIZEOF_SHORT_NAME]; 
  union { 
    DWORD PhysicalAddress; 
    DWORD VirtualSize; 
  } Misc; 
  DWORD VirtualAddress; 
  DWORD SizeOfRawData; 
  DWORD PointerToRawData; 
  DWORD PointerToRelocations; 
  DWORD PointerToLinenumbers; 
  WORD NumberOfRelocations; 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
672 
逆向工程权威指南（下册） 
  WORD NumberOfLinenumbers; 
  DWORD Characteristics; 
} IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER; 
上述代码摘自于：https://msdn.microsoft.com/en-us/library/windows/desktop/ms680341(v=vs.85).aspx。 
简单的说，上述 PointerToRawData（指向原始数据）就是段实体的偏移量 Offset，而虚拟地址
VirtualAddress 就是 Hiew 里的 RVA。 
68.2.6  重定向段 Relocations(relocs) 
至少在 Hiew 中，它也可以表示为 FIXUP-s。 
重定位段是自 MS-DOS 时代起一直存在于可执行文件的实体段，几乎所有的可执行文件都有这个段。 
前文介绍过，程序模块可能会被加载到不同的基地址。但是如何处理全局变量等局部共享数据呢？程序
必须通过地址指针才能访问这类数据，然而程序又不可能事先知道共享数据的存储地址。为解决这个问题，
人们推出了“位置无关代码/PIC”（详情请参阅 67.1 节）的解决方案。不过 PIC 用起来并不方便。 
于是，人们又推出了基于“重定向表”的地址修正技术。重定向表记录了该文件被加载到不同基地址时
需要修正的所有指针。 
如果 PE 文件声明了一个地址为 0x410000 的全局变量，那么这个变量的寻址指令大致会是： 
A1 00 00 41 00   
mov   
eax,[000410000] 
此时，模块的基地址是 0x400000（编译器默认值），全局变量的相对虚拟地址 RVA 是 0x10000。 
如果这个模块被加载到首地址为 0x500000 的基地址上，那么这个全局变量的真实地址应当被调整为
0x510000。 
在上述 opcode 中，变量地址应当是 0xA1（“MOV EAX”指令）之后的那几个字节。为了通知操作系统
在重定向时正确处理该地址，PE 文件的重定向表必须收录这四个字节的相对地址。 
当操作系统的加载器需要把这个模块加载到不同的基地址时，它会逐一枚举重定位表中所有地址，把
这些地址所指向的数据当作 32 位的地址指针，然后减去初始基地址（这样就能获得 RVA，也就是相对虚
拟地址），并加上新的基地址。 
如果模块被加载于其原始的基地址，那么操作系统就不会进行重定向处理。 
所有全局变量的处理过程都是如此。  
重定向段的数据结构并不唯一。Windows for x86 程序的重定向段一般采用IMAGE_REL_BASED_HIGHLOW
的数据结构。 
另外，Hiew 用暗色区域显示重定向段，如图 7.12 所示。 
而 OllyDbg 会在内存中用下画线的方式标记重定向段，如图 13.11 所示。 
68.2.7  导出段和导入段 
我们都知道，任何可执行文件都必须或多或少地调用由操作系统提供的服务或者 DLL 动态链接库。 
广义地说，由某个模块（一般来说是 DLL）声明的所有函数，最终都会被其他模块（.exe 文件或者其
他 DLL）中的某条指令调用，只是调用方式不同而已。 
为此，每一个 DLL 动态链接库文件都有一个“导出/exports“表。导出表声明了该模块定义的函数名
称和函数的地址。 
同时每个 exe 文件和 DLL 文件另有一个“导入”表。这个表声明了执行该模块所需的函数名称、以及
相应 DLL 文件的文件名。 
在加载完可执行文件主体的.exe 文件之后，操作系统加载器开始处理导入表：它会加载记录在案
的 DLL 文件，接着在 DLL 的导出表里查找所需函数的函数地址，最后把这些地址写到.exe 模块的 IAT
导入表。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 68 章  Windows NT 
673 
由此可见，操作系统的加载器在进程的加载过程中要比对大量的函数名称。但是检索字符串的效率不
会很高。后来人们引入了基于“排行榜”或者“命中率”（对应相关数据结构里的 Hints 或 Ordinal 字段）
的序号表示办法、把函数名称编排为数字，以此摆脱字符串操作的低效率问题。 
因此，DLL 文件只需在导出表里标注内部函数的函数“序号”。这显著提升了 DLL 文件的加载速度 。 
举例来说，调用 MFC 的程序就能够通过函数“序号”调用 mfc*.dll 动态链接库。而这种程序不再需要
导入段的数据表（Import Name Table，INT）中使用字符串存储 MFC 的函数名称。 
当我们在 IDA 中加载这样的程序后，IDA 会询问 mfc*.dll 文件的路径以获取外部函数的函数名称。如
果我们没有指定 MFC 文件的存储路径，那么函数名称会是 mfc80_123 之类的字符串。 
导入段 
编译器通常会给导入表及其相关内容分配一个单独的 section 段（例如.idata），但这不是一个强制规定。 
导入段涉及大量的技术术语，因此理解起来特别困难。本节将通过一个典型的例子进行集中演示。 
导入段的主体是数组 IMAGE_IMPORT_DESCRIPTOR。它记录着 PE 文件要导入哪些库文件。 
在其元素的数据结构中： 
 Name 字段存储着库名称字符串的 RVA 地址； 
 OriginalFirstThink 字段是 INT 表的 RVA 地址。逐一读取这个字段对应的 INT 数组的值，可获取相应
IMAGE_IMPORT_BY_NAME 地址（RVA）、进而得到全部函数名称。IMAGE_IMPORT_BY_NAME 表
（没有收录在图 68.1 里）里定义了一个 16 位整数的“hint”字段，它正是前文所说函数“序号”。 
在加载模块时，如果可以通过序号检索所需函数名，那么操作系统加载器就不必进行费时的字符
串比对操作。 
图 68.1  在 PE 范畴内与导入段相关的全部数据结构 
 FirstThunk 字段存储的是 IAT 表的表指针。IAT 表的每个成员元素都是由操作系统加载器解析出
异步社区会员 dearfuture(15918834820) 专享 尊重版权
674 
逆向工程权威指南（下册） 
来的函数地址（RVA）。IDA 会给这些元素添加“:_imp_CreateFileA”一类的名称标注。 
由加载器解析出来的外部函数地址，至少有两种调用方法： 
① 代码可通过 call_imp_CreateFileA 形式的指令直接调用外部函数。从某种意义上讲，导入函数的函数
地址存储到全局变量的存储空间了。考虑到当前模块可能会被加载于与初始值不同的基地址上，那么只要
把 call 指令引用的外部函数目标地址直接追加到 reclos 重定向表里就好了。 
但是要把导入函数的函数地址全部追加到重定向段 relocs 里，会显著增加重定向表的数据容量。进一
步来说，重定向表越大、程序的加载效率就越低。 
② 另一种办法就是对每个调用点进行处理。在调用外部函数的时候，只要 JMP 到“重定向值+外部函数
RVA”就可以调用外部函数了。这种调用方式也叫做“形实转换/thunks”。调用外部函数时，程序可以直接
CALL 相应的 thunk 地址。这种调用方式无需进行重定位运算，因为 CALL 指令本身就能进行相对寻址，因
此不必修正 RVA 地址。 
编译器能够分派上述两种调用方法。如果外部函数的调用频率很高，那么链接器 Linker 很可能会通过
thunk 调用外部函数。但是在默认情况下，链接器并不创建 thunk。 
另外，FirstThunk 字段里的函数指针数组不必在 PE 文件的导入地址段（Input Address Table，IAT section）
中。笔者曾经编写过一个令.exe 文件添加外部函数信息的 PE_add_import 工具（https://yurichev.com/PE_add_ 
imports.html）。它就曾经成功的将 PE 文件引用的外部函数替换为另外一个 DLL 文件的其他函数。此时生成
的指令是： 
MOV EAX, [yourdll.dll!function] 
JMP EAX 
FirstThunk 字段存储的是外部函数第一条指令的地址。换而言之，在调用 youdll.dll 这类自定义动态链
接库的时候，加载器把程序代码的相应位置直接替换为外部函数 function 的函数地址。 
需要注意的是代码段一般都是只读的。因此，我们的应用程序将在代码段上增加一个标志
IMAGE_SCN_MEM_WRITE。否则的话，调用期间会出现 5 号错误（禁止访问）。 
可能有读者会问，如果程序只调用一套 DLL 文件，而且这些 DLL 文件里所有的函数名称和函数地址
保持不变，那么还能否进一步提高进程的加载速度？  
答案是：可能的。实现在程序的 FirstThunk 数组里写入外部函数的函数地址即可。另外需要注意的是
IMAGE_IMPORT_DESCRIPTOR 结构体里的 Timestamp 字段。若这个字段有值，则加载器会判断 DLL 文
件的时间戳是否与这个值相等。如果它们相等，那么加载器不做进一步处理，加载速度可能会快些。这就
是所谓的“old-style binding（古板的绑定）”。Windows 的 SDK 中有一个名为 BIND.EXE 的工具可以专门进
行这项绑定设置。Matt Pietrek 在其发布的《An In-Depth Look into the Win32 Portable Executable File Format》
建议，终端用户应当在安装程序之后尽快进行这种时间戳绑定。 
PE 文件的打包/加密工具也可能会压缩/加密导入表。在这种情况下，Windows 的加载器无法加载
全部所需的 DLL。这时，应由打包程序/加密程序负责加载外部函数。后者一般通过 LoadLibrary()和
GetProcAddress()来完成这项任务。 
在 Windows 的安装程序的标准动态链接库 DLL 中，多数文件的导入地址表（Input Address Table，IAT）
都位于 PE 文件的头部。这大概是出于优化的考虑而刻意设计成这样的。当运行一个 exe 可执行文件时，
exe 文件并不会被一次性地全部装载进内存（否则大型安装程序的加载速度就快得太离谱了），而是在访
问过程中被分部映射到内存里。其目的就是加快 exe 文件的加载速度。 
68.2.8  资源段 
位于 PE 文件资源段里的数据无非就是图表、图形、字符串以及对话框描述等界面信息。这些资源与
主程序指令分开存储，大概是为了方便实现多语言的支持：操作系统只需要根据系统的语言设置就可以选
取相应的文本或图片。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 68 章  Windows NT 
675 
而这其实也带来了一个副作用：因为 PE 可执行文件比较容易编辑，不具备 PE 文件专业知识的人也可
以借助工具（ResHack 等）直接修改程序资源。相关的介绍可以参见本书 68.2.11 节。 
68.2.9  .NET 
.NET 的源程序并不会被编译成机器码，而会被编译成一种特殊的字节码。严格地说，这种.exe 文件由字节
码构成，并不是常规意义上的 x86 指令代码。但是这种程序的入口点（OEP）确实是一小段 x86 指令： 
jmp           mscoree.dll!_CorExeMain 
.NET 格式的 PE 文件由 mscoree.dll 处理，它同时是.NET 程序的装载器。在 Windows XP 操作系统之
前，.net 程序都是通过上述 jmp 指令交由 mscoree.dll 处理的。自 Windows XP 系统起，操作系统的加载器
能自动识别.NET 格式的文件，即使没有上述 JMP 指令也可以正常加载.NET 程序。有关详情请参阅： 
https://msdn.microsoft.com/en-us/library/xh0859k0(v=vs.110).aspx 
68.2.10  TLS 段 
这个段里存储了 TLS 数据（第 65 章）的初始化数据（如果需要的话）。当启动一个新的线程时，TLS
的数据就是通过本段的数据来初始化的。 
除此之外，PE 文件规范还约定了“TLS！”的初始化规范，即 TLS callbacks/TLS 回调函数。如果程序
声明了 TLS 回调函数，那么 TLS 回调函数会先于 OEP 执行。这项技术广泛应用于 PE 文件的压缩和加密
程序。 
68.2.11  工具 
 Objdump（cygwin 版），可转储所有的 PE 文件结构。 
 Hiew（可以参考本书第 73 章）。这是一个编辑器。 
 Prefile。这是一个用来处理 PE 文件的 Python 库。 
 ResHack。它是 Resource Hacker 的简称，是一个资源编辑器。 
 PE_add_import。这是一个小工具，利用它可以将符号加入到 PE 可执行文件的导入表中。 
 PE_patcher。一个小工具，可以用来给 PE 文件打补丁。 
 PE_search_str_refs。一个小工具，可以用来在 PE 可执行文件中寻找函数，这些函数可能有些字符串。 
68.2.12  更进一步 
 Daniel Pistelli:《.NET 文件格式》：https://www.codeproject.com/articles/12585/the-net-file-format。 
68.3  Windows SEH 
68.3.1  让我们暂时把 MSVC 放在一边 
Windows 操作系统中，结构性例外程序处理机制（Structured Exception Handling，SEH）是用来处理异
常情况的响应机制。然而，它是与语言无关的，与 C++或者面向对象的编程语言（Oriented Object 
Programming，OOP）无任何关联。本节将脱离 C++以及 MSVC 的相关特效，单独分析 SEH 的特性。 
每个运行的进程都有一条 SEH 句柄链，线程信息块（Thread Information Block，TIB）有 SHE 的最后一个
句柄。当出现异外时（比如出现了被零除、地址访问不正确或者程序主动调用 RaiseException()函数等情况），
操作系统会在线程信息块 TIB 里寻找 SEH 的最后一个句柄。并且把出现异常情况时与 CPU 有关的所有状
态（包括寄存器的值等数据）传递给那个 SEH 句柄。此时异常处理函数开始判断自己能否应对这种异常情
异步社区会员 dearfuture(15918834820) 专享 尊重版权
676 
逆向工程权威指南（下册） 
况。如果答案是肯定的，那么异常处理函数就会着手接管。如
果异常处理函数无法处理这种情况，它就会通知操作系统无法
处理它，此后操作系统会逐一尝试异常处理链中的其他处理程
序，直到找到能够应对这种情况的异常处理程序为止。 
在异常处理链的结尾处有一个大家都接触过的异常处理程
序：它显示一个标准的对话框，通知用户进程已经崩溃，崩溃
时 CPU 的状态信息是什么情况，用户是否愿意把这些信息发送
给微软的开发人员。 
             图 68.3  Windows XP 下的崩溃细节                          图 68.4  Windows 7 下的崩溃细节 
早些时候，这个异常处理程序叫做 Dr. Watson。 
另外，一些开发人员会在程序里设计自己的异常处理程序，以便收
集程序的崩溃信息。这些都是通过系统函数 SetUnhandledExceptionFilter()
注册的异常处理函数。当操作系统遇到无法应对的异常情况时，它就
会调用应用程序自己注册的异常处理函数。Oracle 的 RDBMS 就是
十分典型的一个例子：它会在程序崩溃时尽可能地转储 CPU 以及内存
数据。 
接下来，我们研究一个初级的异常处理程序。它摘自于 https://www.microsoft.com/msj/0197/Exception/ 
Exception.aspx： 
#include  
#include  
DWORD new_value=1234; 
EXCEPTION_DISPOSITION __cdecl except_handler( 
                struct _EXCEPTION_RECORD *ExceptionRecord, 
                void * EstablisherFrame, 
                struct _CONTEXT *ContextRecord, 
                void * DispatcherContext ) 
{ 
        unsigned i; 
        printf ("%s\n", __FUNCTION__); 
        printf ("ExceptionRecord->ExceptionCode=0x%p\n", ExceptionRecord->ExceptionCode); 
        printf ("ExceptionRecord->ExceptionFlags=0x%p\n", ExceptionRecord->ExceptionFlags); 
        printf ("ExceptionRecord->ExceptionAddress=0x%p\n", ExceptionRecord->ExceptionAddress); 
        if (ExceptionRecord->ExceptionCode==0xE1223344) 
        { 
图 68.5  Windows 8.1 下的崩溃截图 
图 68.2  Windows XP 下的崩溃截图 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 68 章  Windows NT 
677 
                printf ("That's for us\n"); 
                // yes, we "handled" the exception 
                return ExceptionContinueExecution; 
        } 
        else if (ExceptionRecord->ExceptionCode==EXCEPTION_ACCESS_VIOLATION) 
        { 
                printf ("ContextRecord->Eax=0x%08X\n", ContextRecord->Eax); 
                // will it be possible to 'fix' it? 
                printf ("Trying to fix wrong pointer address\n"); 
                ContextRecord->Eax=(DWORD)&new_value; 
                // yes, we "handled" the exception 
                return ExceptionContinueExecution; 
        } 
        else 
        { 
                printf ("We do not handle this\n"); 
                // someone else's problem 
                return ExceptionContinueSearch; 
        }; 
} 
int main() 
{ 
        DWORD handler = (DWORD)except_handler; // take a pointer to our handler 
        // install exception handler 
        __asm 
        {   
   // make EXCEPTION_REGISTRATION record: 
push    handler   
   // address of handler function 
push    FS:[0]   
   // address of previous handler 
mov      FS:[0],ESP  
   // add new EXECEPTION_REGISTRATION 
        } 
        RaiseException (0xE1223344, 0, 0, NULL); 
        // now do something very bad 
        int* ptr=NULL; 
        int val=0; 
        val=*ptr; 
        printf ("val=%d\n", val); 
        // deinstall exception handler 
        __asm 
        {   
   // remove our EXECEPTION_REGISTRATION record 
mov     eax,[ESP]  
   // get pointer to previous record 
mov     FS:[0], EAX     // install previous record 
add     esp, 8   
   // clean our EXECEPTION_REGISTRATION off stack 
        } 
        return 0; 
}  
在 Win32 环境下，FS：段寄存器里的数据就是线程信息块（Thread Information Block，TIB）的指针。
而 TIB 中的第一个元素正是异常处理指针链里最后一个处理程序的地址。所谓“注册”异常处理程序就是