(cid:104)
(cid:104)
Pr
ExptMR-PKE-IND,0
E,A,k,n
(1λ) = 1
1 (pp, (cid:126)pk)
∗| = n
j ∈ (cid:126)pk ⇒ |m0
j /∈ (cid:126)pk ⇒ m0
j| = |m1
j|
j = m1
j
∗
∗
(1λ):
E,A,k,n
ExptMR-PKE-IND
(a) pp ←R PGen(1λ)
(b)
, (cid:126)mb)
( (cid:126)sk, (cid:126)pk) k←R KGen( )
( (cid:126)m0, (cid:126)m1, (cid:126)pk
(cid:0)(cid:126)c, st(cid:1)
, st) ←R AD1
(c)
(d) Require | (cid:126)m0| = | (cid:126)m1| = | (cid:126)pk
(e) Require ∀j ∈ [n] : pk∗
(f) Require ∀j ∈ [n] : pk∗
(g) (cid:126)c ←R Enc( (cid:126)pk
(h) d ←R AD2
2
(i)
Return d
Oracle D1 (i, c):
(a) Require i ∈ [k]
(b) m ← Dec (ski, c)
(c) Return m
Oracle D2 (i, c):
(a) Require i ∈ [k]
(b) Require (cid:64)j ∈ [n] : pk∗
(c) m ← Dec (ski, c)
(d) Return m
j = pki ∧ cj = c
Figure 3: Our strengthened security experiment for
MR-MM-PKE
E,A,k,n
In experiment ExptMR-PKE-IND
the adversary ﬁrst receives
the public keys of k honest users and has access to corre-
sponding decryption oracles. She then outputs two vectors
of messages, (cid:126)m0 and (cid:126)m1, on which she wants to be chal-
lenged. She also outputs a vector (cid:126)pk
of public keys which
may contain honest and malicious keys in any conﬁguration.
The only (and natural) condition on (cid:126)m0, (cid:126)m1, (cid:126)pk
is that the
messages in (cid:126)m0 and (cid:126)m1 have the same length when targeting
honest public keys, and that the messages are equal when
targeting malicious keys (see lines (e) and (f), respectively).
Note that the rules for the second-phase decryption oracle
are also as liberal as they can possibly be.
∗
∗
4. MULTI-RECIPIENT MULTI-KEY
KEY ENCAPSULATION
A natural building block for the construction of a multi-
recipient encryption scheme seems to be a multi-recipient
multi-key key encapsulation mechanism (MR-MK-KEM). In
this section we formalize this primitive and specify its secu-
rity properties. In addition, by showing that MR-MK-KEMs
can be combined with appropriate DEMs to obtain secure
MR-MM-PKE we provide evidence that our formalizations
are indeed helpful and accurate.
4.1 Syntax and security of MR-MK-KEM
In an MR-MK-KEM, the encapsulation algorithm takes
a number of public keys and creates vectors of ciphertexts
and corresponding (symmetric) keys. Using the decapsula-
tion algorithm, each such key can individually be recovered
from the corresponding ciphertext component. Similarly to
the MR-MM-PKE case, the functionality of multi-recipient
KEMs is readily emulated by running appropriately-many
instantiations of a regular KEM in parallel. Correspond-
ingly, regular KEMs are obtained from MR-MK-KEMs by
restricting the input of the encapsulation algorithm to a sin-
gle element. We formalize the primitive as follows:
Definition 7
(MR-MK-KEM). A multi-recipient multi-
key key encapsulation mechanism (MR-MK-KEM) M =
(PGen, KGen, Encap, Decap) consists of four algorithms as
follows:
• PGen(1λ). On input security parameter 1λ, this algo-
rithm outputs public parameters pp and the description
of a keyspace K.
We will assume implicitly that the following algorithms
are deﬁned in respect to a single distinguished copy
of (pp,K).
• KGen( ). This probabilistic algorithm outputs a key pair
(sk, pk).
• Encap( (cid:126)pk). On input a vector (cid:126)pk = (pk1, . . . , pkn) of
public keys, this probabilistic algorithm outputs vectors
(cid:126)c = (c1, . . . , cn) of ciphertexts and (cid:126)K = (K1, . . . , Kn)
of keys from keyspace K.
• Decap(sk, c). On input a secret key sk and a cipher-
text c, this algorithm outputs either a key in K or ⊥.
KGen( ) for all j ∈ [n]. The MR-MK-KEM is correct if for
all encapsulations
For ﬁxed parameters pp and any n ∈ N let (cid:0)skj, pkj
(cid:1) ←R
(cid:0)(c1, . . . , cn) , (K1, . . . , Kn)(cid:1) ←R Encap (pk1, . . . , pkn)
we have Decap(cid:0)skj, cj
(cid:1) = Kj for all j ∈ [n].
We proceed with our security deﬁnition for MR-MK-KEMs.
Similarly to Section 3 we assume particularly strong adver-
saries: the availability of decapsulation oracles ensures CCA
security, arbitrary conﬁgurations are allowed for the chal-
lenge public key vector, and, importantly, we do not require
the premises of the KOSK assumption.
Definition 8. (Indistinguishability of MR-MK-KEM)
An MR-MK-KEM scheme M = (PGen, KGen, Encap, Decap)
is indistinguishable (MR-KEM-IND-secure) if for all k and n
polynomially dependent on the security parameter and all ef-
ﬁcient adversaries A = (A1,A2) interacting in experiments
ExptMR-KEM-IND,b
from Figure 4 the following advantage func-
tion is negligible in λ, where the probabilities are taken over
the random coins of the experiment (including over A’s ran-
domness):
M,A,k,n
234(cid:12)(cid:12)(cid:12)(cid:12)Pr
(cid:104)
(cid:104)
Pr
AdvMR-KEM-IND
M,A,k,n
(λ) =
ExptMR-KEM-IND,1
M,A,k,n
(1λ) = 1
ExptMR-KEM-IND,0
M,A,k,n
(1λ) = 1
(cid:105)−
(cid:105)(cid:12)(cid:12)(cid:12)(cid:12)
.
1 (pp,K, (cid:126)pk)
j ∈ (cid:126)pk then K 0
j /∈ (cid:126)pk then K 0
2 ((cid:126)c, (cid:126)K b, st)
j ←R K
j ← K 1
j
∗
)
∗
(1λ):
(a)
(b)
ExptMR-KEM-IND,b
M,A,k,n
(pp,K) ←R PGen(1λ)
( (cid:126)sk, (cid:126)pk) k←R KGen( )
( (cid:126)pk
, st) ←R AD1
∗| = n
((cid:126)c, (cid:126)K 1) ←R Encap( (cid:126)pk
(c)
(d) Require | (cid:126)pk
(e)
(f) ∀j ∈ [n] :
- if pk∗
- if pk∗
(g) d ←R AD2
(h) Return d
Oracle D1 (i, c):
(a) Require i ∈ [k]
(b) K ← Decap (ski, c)
(c) Return K
Oracle D2 (i, c):
(a) Require i ∈ [k]
(b) Require (cid:64)j ∈ [n] : pk∗
(c) K ← Decap (ski, c)
(d) Return K
j = pki ∧ cj = c
Figure 4: Our security experiment for MR-MK-
KEMs
4.2 Constructing MR-MM-PKE from
MR-MK-KEMs
We formally verify that the composition of an MR-MK-
KEM and a DEM yields a secure MR-MM-PKE scheme.
Construction 1. (MR-MM-PKE from MR-MK-KEM)
Let M = (PGen, KGen, Encap, Decap) be an MR-MK-KEM
and D = (K, DEM, DEM−1) be a DEM such that the KEM’s
and DEM’s keyspaces coincide. We build an MR-MM-PKE
E = (PGen, KGen, Enc, Dec) by implementing its algorithms
in the following way:
• E.PGen(1λ) = M.PGen(1λ)
• E.KGen( ) = M.KGen( )
• E.Enc( (cid:126)pk, (cid:126)m). Run ( (cid:126)c1, (cid:126)K) ←R M.Encap( (cid:126)pk) and ∀j ∈
j ←R D.DEM(cid:0)Kj, mj
j ))j∈[n].
• E.Dec (sk, c). Parse (c1, c2) ← c and compute K ←R
M.Decap(sk, c1). Return ⊥ if K = ⊥; otherwise, re-
turn D.DEM−1(K, c2).
(cid:1). Return ((c1
[n] : c2
j , c2
Theorem 1. If M is an MR-KEM-IND-secure MR-MK-
KEM and D is an IND-OT-CCA-secure DEM, then E de-
ﬁned according to Construction 1 is an MR-PKE-IND-secure
MR-MM-PKE. Speciﬁcally, given k, n ∈ N and any eﬃcient
adversary A against E, we can build eﬃcient adversaries B
and C against M and D, respectively, such that
(λ) ≤ 2 · AdvMR-KEM-IND
n · AdvIND-OT-CCA
AdvMR-PKE-IND
M,B,k,n
E,A,k,n
(λ) .
(λ) +
D,C
We leave the proof for the appendix.
Remark 1. While Theorem 1 establishes that the secu-
rity notions from Deﬁnitions 4 and 8 are suﬃciently strong
to obtain MR-PKE-IND-secure MR-MM-PKE schemes, con-
ceivably also other combinations of KEM/DEM security no-
tions will imply a secure hybrid. Indeed, if the requirements
in Deﬁnition 8 are relaxed such that (some of ) the keys K
established for diﬀerent occurrences of the same public key
in an Encap invocation may coincide, security of the hybrid
scheme is still provided if the requirements on the DEM are
simultaneously strengthened from IND-OT-CCA to IND-CCA
[9] (observe how, in this setting, the stronger DEM thwarts
the second attack described in Section 3.2.2).
5. CONSTRUCTING MULTI-RECIPIENT
MULTI-KEY KEY ENCAPSULATION
Taking into account the results from Section 4.2, the miss-
ing building block on our way towards MR-MM-PKE is an
MR-MK-KEM. We propose a construction that is indistin-
guishable in the sense of Deﬁnition 8 and in particular does
not rely on the KOSK assumption.
Construction 2
(Hashed ElGamal KEM). Let G
be a group generator as in Deﬁnition 1 and let l be a polyno-
mial. The algorithms of our MR-MK-KEM HEK are speci-
ﬁed as follows:
• PGen(1λ). Let (G, p, g) ←R G(1λ). Fix keyspace K =
{0, 1}l(λ) and choose a hash function H : G× G× N →
K. Return public parameters pp = (G, p, g, H).
• KGen( ). Sample x ←R Zp and return (sk, pk) = (x, gx).
• Encap( (cid:126)pk). Let (cid:126)pk = (pk1, . . . , pkn). Sample r ←R Zp
and compute ˆc ← gr. For all j ∈ [n] let cj ← (ˆc, j)
and Kj ← H(cid:0)(pkj)r, pkj, j(cid:1). Return ((cid:126)c, (cid:126)K).
• Decap(cid:0)sk, (ˆc, j)(cid:1). Return K = H(ˆcsk, pk, j), where
pk = gsk.
Theorem 2. Our MR-MK-KEM HEK from Construc-
tion 2 is MR-KEM-IND-secure under the static Diﬃe-Hellman
assumption, in the random oracle model. Speciﬁcally, given
k, n ∈ N and any eﬃcient adversary A against HEK, we can
build an eﬃcient adversary B solving the SDH problem in G
such that
AdvMR-KEM-IND
HEK,A,k,n (λ) ≤ AdvSDHG,B (λ) +
qd1
p
+
qh1
p
,
where qd1 and qh1 represent the number of queries A1 issues
to the decapsulation and the hash oracles, respectively.
235BOu,Ov (G, p, g, U, V ):
(a) HL ← [ ], DL ← [ ]
(b) Bad1 ← 0, Bad2 ← 0
(c) Fix keyspace K = {0, 1}l(λ)
(d) pp ← (G, p, g)
(e) ∀i ∈ [k]: wi ←R Zp
(f) ∀i ∈ [k]: pki ← V wi
, st) ←R AD1,H
(g)
∗| = n
(h) Require | (cid:126)pk
(i) ∀j ∈ [n]
( (cid:126)pk
∗
1
- cj ← (U, j)
j ←R K
- K∗
- if ∃i ∈ [k] : pk∗
DL[i, U, j] ← K∗
((cid:126)c, (cid:126)K∗, st)
(j)
(k) Halt with output ⊥
d ←R AD2,H
2
j
j = pki:
(pp,K, (cid:126)pk)
Simulation of Dphase(i, ˆc, j) oracle:
(a) Require i ∈ [k]
(b) if phase = 1 ∧ ˆc = U :
j (cid:54)= pki ∨ ˆc (cid:54)= U
Bad1 ← 1
(c) if phase = 2:
Require pk∗
(d) if ∃Z ∈ G, t ∈ K :
HL[Z, pki, j] = t∧
Ov(ˆcwi , Z) = 1:
Return t
(e) if DL[i, ˆc, j] (cid:54)= ε:
Return DL[i, ˆc, j]
t ←R K
(f)
(g) DL[i, ˆc, j] ← t
(h) Return t
Simulation of H(Z, W, j) oracle:
(a) if ∃i ∈ [k] : W = pki∧
Ov(U wi , Z) = 1:
Halt with output Z 1/wi
(b) if phase = 1 ∧ Ou(W, Z) = 1
Bad2 ← 1
W = pk∗
Return K∗
j
(c) if phase = 2 ∧ j ∈ [n]∧
j ∧Ou(W, Z) = 1:
(d) if ∃i ∈ [k], ˆc ∈ G, t ∈ K :
W = pki ∧ DL[i, ˆc, j] = t∧
Ov(ˆcwi , Z) = 1: