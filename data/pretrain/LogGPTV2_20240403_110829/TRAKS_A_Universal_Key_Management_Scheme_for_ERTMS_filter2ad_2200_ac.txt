to compute the key it requires using the key it has installed by
applying the train ID to the RBC key installed. As an example,
for Train1, with ID oid1, which operates in NID Cs 1 and 2, it will
receive all the necessary keys to communicate with the RBCs in that
area, i.e. kmrid1,oid1, kmrid2,oid1 and kmrid3,oid1 will be installed
on the train.
In the rest of this paper, we formalise the de(cid:128)nition of this scheme
and prove its correctness, and discuss how it can be implemented
and used. In Section 5, we consider the security requirements and
a(cid:138)acker model that TRAKS must work with, before de(cid:128)ning the key
lifecycle. We formally de(cid:128)ne the current ERTMS key management
scheme in Section 4, presenting the TRAKS scheme in Section 5.
We apply these formal de(cid:128)nitions in Section 6 to prove that the
current ERTMS Key Management scheme and proposed TRAKS
scheme are secure.
4 OFFLINE ERTMS KEY GENERATION
In this section, the O(cid:132)ine ERTMS key generation scheme that is
currently in use is presented in more detail.
(cid:140)e key provisioning process begins with the vendor (e.g. Siemens,
Alstom and Bombardier) of an entity (e.g. OBU) making a formal
request for an identity (ETCS ID), followed by a request for keys.
Figure 3: TRAKS Key Hierarchy for ERTMS. TRAKS is com-
posed of four layers: (1) the national infrastructure for the
‘home domain’, which is responsible for liaising with for-
eign KMCs. (2) Geographic regions within a country, known
as NID C. (3) RBCs, responsible for command and control
messages to trains. (4) Trains, which operate across one or
more NID C regions.
(cid:140)e KMC then responds by issuing the two transport keys, kt1 and
kt2, used for authentication and encryption respectively. (cid:140)e two
keys are sent in the clear on portable media devices [19], to be
installed.
On successful installation of kt1 and kt2, the KMC will generate
unique keys for each train and RBC pair with identi(cid:128)ed through
their IDs oid and rid respectively. In order to authenticate messages
exchanged between them, each entity receives a collection of these
keys. We will denote the set of keys with which OBUs and RBCs
are provisioned as KM. KM may be initially empty (in the case
of a new train or RBC), but it keys will be added as the train is
authorised to communicate with relevant RBCs.
We provide an algorithm for the GEN.KMAC(id, id(cid:48),knid c) func-
tion from De(cid:128)nition 3.1 in Algorithm 1. (cid:140)is algorithm takes as
input two IDs, id and id(cid:48) corresponding to the two entities which
are authorised to communicate with one-another and returns a ran-
domly generated 3DES key to be used for message authentication
in the EuroRadio protocol. For example, the key between a train
with oid and an RBC with rid is: kmrid,oid ← SGen(1λ ).
Algorithm 1: O(cid:132)ine ERTMS key generation
Input: id, id(cid:48)
Output: kmid,id(cid:48)
1 function GEN.KMAC(id, id(cid:48), null )
2
3
kmid,id(cid:48) ← SGen(1λ )
return kmid,id(cid:48)
5 TRAKS - A UNIFIED ERTMS KEY
MANAGEMENT SCHEME
In this section we propose TRAKS, our e(cid:129)cient key generation
scheme for ERTMS. Our scheme uses the existing partitioning of
the rail network into individual zones of control, denoted by a
national identi(cid:128)er, which is announced to the train by EuroBalises.
Using this partitioning, we enforce a permissions model which
ensures that trains are not able to operate outside their agreed areas
National KMC (KMC-GB)Foreign KMC (KMC-FR)Foreign KMC (KMC-DE)RBC1NID_C1RBC2RBC3RBC4RBC5RBC6NID_C2NID_C3NID_C4Train1Train2ACSAC 2017, December 4–8, 2017, San Juan, PR, USA
Richard J. Thomas, Mihai Ordean, Tom Chothia, and Joeri de Ruiter
of operation. TRAKS improves on the o(cid:132)ine ERTMS scheme by
allowing the key generation to be dynamic for RBCs thus improving
the interoperability and reducing operational complexity for cross-
border operations, while maintaining static key provisioning to
trains. (cid:140)is provides maximum backwards compatibility with the
current standards and practices.
In addition to the reduced management overheads, our scheme
also provides authentication to messages both between OBUs and
RBCs, and between OBUs and EuroBalises (EBs) making it univer-
sally applicable to any rail entity.
5.1 Secret Generation
In the rail network for a given country, there will be one or more
regions. Each is identi(cid:128)ed through a public value, NID Ci for the
region with NID C value i. For each NID Ci, the KMC will generate
a random knid ci secret. As such, multiple secrets can be produced
by the KMC to partition the rail network into geographic zones,
and/or to establish trust between entity types, e.g. keys between
OBUs and RBCs are generated using knid c1 and keys between
OBUs and RBCs are generated using knid c2 for zone NID C1 and
NID C2 respectively’.
Similarly to the o(cid:132)ine ERTMS scheme the TRACKS shared secret
is generated using:
knid ci ← SGen(1λ )
where SGen(1λ ) is a pseudo-random number generator (PRNG)
with the security parameter λ. Unlike the o(cid:132)ine ERTMS scheme,
however, this secret is never given directly to OBUs or RBCs. It is
instead used together with IDs to generate the message authenti-
cation keys. (cid:140)is approach greatly enhances the usability of the
scheme by reducing the overall management overhead (i.e. secret
key material storage, distribution and disposal). In the following,
we will detail how we use this secret to generate the authentication
keys for each ERTMS entity.
5.2 Key Generation
Algorithm 2: TRAKS key generation
Input: id, id(cid:48), s
Output: kmid,id(cid:48)
1 function GEN.KMAC(id, id(cid:48), s)
*/
*/
/* for computing keys using s = knid c
if id (cid:44) null then
kmid,id(cid:48) ← PRF (id, s);
if id(cid:48) (cid:44) null then
kmid,id(cid:48) ← PRF (id(cid:48), kmid,id(cid:48) );
/* for computing OBU-RBC keys using
else if id = null then
s = kmrid,null
kmid,id(cid:48) ← PRF (id(cid:48), s);
return kmid,id(cid:48)
2
3
4
5
6
7
8
Keys in TRAKS are generated using Algorithm 2, using knid c
and the IDs of the communicating ERTMS entities. Algorithm 2 can
be used to generate both (1) static keys which can be used to directly
authenticate messages between two entities with identities id, and
id(cid:48) and (2) dynamic keys which can be combined by the holder
with any id(cid:48) to derive a static key. We continue with concrete
descriptions of how keys are generated for OBUs, RBCs and EBs
using TRAKS.
OBU Key Generation. OBU keys are static keys which are entirely
computed by the KMC. Similarly to the o(cid:132)ine ERTMS scheme,
when a train identi(cid:128)ed by ID oid is authorised to operate on a
speci(cid:128)c line it is provisioned with a set of keys KM = {kmrid1,oid ,
kmrid2,oid , . . . , kmridn,oid} where rid1, . . . , ridn are the IDs of the
RBCs which control the line.
Each key kmridi,oid is computed using GEN.KMAC(ridi, oid,
knid c) detailed in Algorithm 2. First the secret knid c is combined
with the RBC’s ID ridi using a PRF to generate an intermediate
pseudo-random value (line 3). (cid:140)is intermediate value is subse-
quently combined using the same PRF function with the oid to
create the (cid:128)nal kmridi,oid key (line 5).
(cid:140)e PRF can be any secure, non-malleable function, which is
proven secure against length-extension a(cid:138)acks, such as HMAC-
SHA-256 or AES-CMAC. It is easy to see that until now, our scheme
is fully backwards-compatible, as there are no changes to how the
keys are managed by the train.
RBC Key Generation. In TRAKS, keys that are provisioned to
RBCs are dynamic. (cid:140)is means that RBCs are able to produce
keys and communicate with any train for which they have an
OBU ID. Under the current ERTMS implementation, trains are
required to broadcast their oid in plaintext as part of the EuroRadio
handshake when communicating with a RBC. (cid:140)is enables TRAKS
to seamlessly replace the existing ERTMS scheme with only minor
modi(cid:128)cations to the RBCs internal programming.
Algorithm 2 is also used to generate RBC keys. Unlike in the
case of the trains where OBUs are provisioned with a set of keys,
the RBCs only have one key, kmrid,null , computed by running
GEN.KMAC(rid, null, knid c), where rid is the RBC’s own ID. (cid:140)e
value returned is the intermediate value computed in line 3.
RBCs can use kmrid,null by running GEN.KMAC(null, oid,
kmrid,null ) for any broadcasted oid to compute the message au-
thentication key kmrid,oid.
It is easy to observe that generating key kmrid,oid based on
the knid c secret can be used to enforce the permissions model
explicitly. Any OBU and any RBC which are able to complete the
EuroRadio handshake protocol must have been explicitly approved
to operate in a given NID C, as opposed to the current scheme,
where this is implicit and therefore could be violated.
EuroBalise Key Generation. Another signi(cid:128)cant bene(cid:128)t of TRAKS
is that it can be used without modi(cid:128)cations to generate authenti-
cation keys for any pair of ERTMS entities. Here, we will try to
exemplify this using EuroBalises (EB), however the scheme should
work with other, possibly not yet developed, rail entities. Currently,
EuroBalises o(cid:130)er no cryptographic protection of their payloads,
and are implicitly trusted by the train for accuracy and validity.
(cid:140)e process of generating the unique authentication keys for
balises is similar to the one used to generate the keys for the OBU-
RBC pairs.
TRAKS: A Universal Key Management Scheme for ERTMS
ACSAC 2017, December 4–8, 2017, San Juan, PR, USA
(cid:140)e KMC generates a balise speci(cid:128)c shared secret as kbls ←
SGen(1λ ) which ensures that the shared keys between EBs and
OBUs are completely separate from the ones shared between OBUs
and RBCs and are generated by each the KMC responsible for
each country. However, unlike messages sent by trains or RBCs,
messages sent by EBs are (cid:128)xed. Furthermore EuroBalises are unable
to perform any cryptographic operations. As such, when using
TRAKS between OBUs and EBs, the balises will be provisioned
with their (cid:128)xed messages concatenated with the corresponding
MAC. (cid:140)e MAC will be computed using a static authentication
key generated by running GEN.KMAC(NID C, b❕idi, kbls) for each
balise group b❕idi under the control of NID C. A balise group is a
collection of balises concentrated in a common geographical area,
for example, deployed along a rail line. We recommend the use
of groups of balises instead of single balises to ease deployment.
However, we note that the scheme would work similarly if balise
group IDs would be replaced with balise IDs. More details are
provided in Section 9.2.
Following key provisioning to a balise, the corresponding keys
for NID C, which are used for provisioning OBUs, can be computed
as follows:
kmNID C,null = GEN.KMAC(NID C, null, kbls).
(cid:140)is allows trains to use kmNID C,null to generate keys correspond-
ing to any balise group created using the key kbls and NID C by
computing kmNID C,b❕id as:
kmNID C,b❕id = GEN.KMAC(null, b❕id, kmNID C,null ).
6 SECURITY ANALYSIS
In this section, we formally discuss the security of ERTMS key
generation using a game-based approach.
We begin by stating that the a(cid:138)acker is given access to all IDs
that can be generated from EDB. (cid:140)e a(cid:138)acker wins if it is able to
generate a valid key kmid,id(cid:48) for any pair (id, id(cid:48)) for the types
t and t(cid:48), where id ∈ INIT.ID(EDB, t ) and id(cid:48) ∈ INIT.ID(EDB, t(cid:48)).
We de(cid:128)ne the ERTMS KMAC security with a game played between
a challenger C and an adversary A as follows.
De(cid:128)nition 6.1 (Key indistinguishably from random). Let KMAC =
(SGen, INIT.ID, GEN.KMAC) be a scheme over a database EDB
with security parameter λ, t and t(cid:48) are entity types with t (cid:44) t(cid:48), and
b ∈ {0, 1}. We consider ExpbA (KMAC) (see Fig. 4), a probabilistic
experiment played between an adversary A and a challenger C
consisting of:
(1) Get IDs. C runs INIT.ID for types t and t(cid:48) to generate the sets
ID and ID(cid:48).
(2) Generate keys. C generates a new random secret s and uses it
to generate unique keys by running GEN.KMAC(id, id(cid:48), s) for
all pairs (id, id(cid:48)) ∈ ID × ID(cid:48) except for (last (ID), last (ID(cid:48))).
(cid:140)e function last (X ) returns the last element from a set X.
kmlast (I D ),last (I D(cid:48)) ← GEN.KMAC(last (ID), last (ID(cid:48)), s).
If b = 1 then kmlast (I D ),last (I D(cid:48)) is sampled randomly from
the keyspace K .
(4) Guess. A is given access to all the identi(cid:128)ers in ID and ID(cid:48)
and to all the generated keys kmid,id(cid:48), where (id, id(cid:48)) ∈ ID ×
(3) Challenge. If b = 0 then the last key is generated as
ExpbA (KMAC)
ID ← {i|i ∈ INIT.ID(EDB, t )}
ID(cid:48) ← {i|i ∈ INIT.ID(EDB, t(cid:48))}
R←− SGen(1λ )
s
for id ∈ ID, id(cid:48) ∈ ID(cid:48) do :
if (id, id(cid:48)) (cid:44) (last (ID), last (ID(cid:48))) :
kmid,id(cid:48) ← GEN.KMAC(id, id(cid:48), s)
endif
endfor
if b = 0 :
kmlast (I D ),last (I D(cid:48)) ← GEN.KMAC(last (ID), last (ID(cid:48)), s)
else :
kmlast (I D ),last (I D(cid:48))
R←− K