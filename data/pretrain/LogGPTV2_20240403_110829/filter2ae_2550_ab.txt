     *  -1 error
     *  0  cgi (either gunzip or auto-generated)
     *  >0  file descriptor of file
     */
    int get_dir(request * req, struct stat *statbuf)
    {
        char pathname_with_index[MAX_PATH_LENGTH];
        int data_fd;
        if (directory_index) {      /* look for index.html first?? */
        [...]
这个函数首先检查请求目录中的index.html文件，因为这将是false（在请求目录中没有名为index.html的文件存在），执行将跳过下面的代码段。
注意：'dirmaker'是一个指向char数组的指针，它使用在boa.conf中配置的DirectoryMaker值进行初始化。在通过telnet检查路由器上设置了什么之后，我看到它被配置为使用'/
usr / lib / boa / boa_indexer'，这在路由器上是不存在的文件。这可能是也可能不是导致漏洞的原因，我将在下一部分中解释。
        /* only here if index.html, index.html.gz don't exist */
        if (dirmaker != NULL) {     /* don't look for index.html... maybe automake? */
            req->response_status = R_REQUEST_OK;
            SQUASH_KA(req);
            /* the indexer should take care of all headers */
            if (req->http_version != HTTP09) {
                req_write(req, http_ver_string(req->http_version));
                req_write(req, " 200 OK" CRLF);
                print_http_headers(req);
                print_last_modified(req);
                req_write(req, "Content-Type: text/html" CRLF CRLF);
                req_flush(req);
            }
            if (req->method == M_HEAD)
                return 0;
            return init_cgi(req);
            /* in this case, 0 means success */
        } else if (cachedir) {
            return get_cachedir_file(req, statbuf);
        } else {                    /* neither index.html nor autogenerate are allowed */
            send_r_forbidden(req);
            return -1;              /* nothing worked */
        }
    }
在这一块中，有一个写入服务器回复HTTP
200响应的内部块，在这一块最后有一个检查来看是否请求方法是HEAD，如果是的，函数返回为0.当我们发送HEAD请求时，这里就是函数停止的位置，并且不会发生崩溃。如果该请求方法不是HEAD，那么这个块返回为`init_cgi()`。
###### process_requests() -> read_header() -> process_header_end() ->
init_get() -> get_dir() -> init_cgi()
如下面代码段所示，`init_cgi()`首先声明几个变量将为以后所用，这里有一个检查看是否已经设置了req->
cgi_type，因为它还没有设置，所以被跳过了。下一部分的代码包含了一个检查，来看是否req->pathname的最后一个字符等于“/”，以及req->cgi_type还没有设置。这个评估是true，它将use_pipes设置为1，打开一个未命名的管道，它读取和写入fd的存储在管道[]中。
    int init_cgi(request * req)
    {
        int child_pid;
        int pipes[2];
        int use_pipes = 0;
        SQUASH_KA(req);
        if (req->cgi_type) {
            if (complete_env(req) == 0) {
                return 0;
            }
        }
        DEBUG(DEBUG_CGI_ENV) {
            int i;
            for (i = 0; i cgi_env_index; ++i)
                log_error_time();
                fprintf(stderr, "%s - environment variable for cgi: \"%s\"\n",
                        __FILE__, req->cgi_env[i]);
        }
        /* we want to use pipes whenever it's a CGI or directory */
        /* otherwise (NPH, gunzip) we want no pipes */
        if (req->cgi_type == CGI ||
            (!req->cgi_type &&
             (req->pathname[strlen(req->pathname) - 1] == '/'))) {
            use_pipes = 1;
            if (pipe(pipes) == -1) {
                log_error_doc(req);
                perror("pipe");
                return 0;
            }
如果打开管道时没有错误，fork()会被调用，它的返回值会被储存。然后switch语句检查fork()的返回值，如果fork成功，那么case
0是true，并且接下来执行的代码（在子进程中）会是检查‘use_pipes’的if语句中的代码块，因为这会返回true。
    child_pid = fork();
    switch (child_pid) {
    case -1:
        /* fork unsuccessful */
        /* FIXME: There is a problem here. send_r_error (called by
            * boa_perror) would work for NPH and CGI, but not for GUNZIP.  
            * Fix that. 
            */
        boa_perror(req, "fork failed");
        if (use_pipes) {
            close(pipes[0]);
            close(pipes[1]);
        }
        return 0;
        break;
    case 0:
        /* child */
        reset_signals();
        if (req->cgi_type == CGI || req->cgi_type == NPH) {
            /* SKIPPED */
        }
        if (use_pipes) {
            /* close the 'read' end of the pipes[] */
            close(pipes[0]);
            /* tie CGI's STDOUT to our write end of pipe */
            if (dup2(pipes[1], STDOUT_FILENO) == -1) {
                log_error_doc(req);
                perror("dup2 - pipes");
                _exit(EXIT_FAILURE);
            }
            close(pipes[1]);
        }
正如代码注释中描述的，之前打开的管道的‘read’端被关闭了，STDOUT使用dup2（）绑定到管道的‘write’端。最后，如果所有成功完成，下一个相关的代码段将是如下所示。
            /*
             * tie STDERR to cgi_log_fd
             * cgi_log_fd will automatically close, close-on-exec rocks!
             * if we don't tie STDERR (current log_error) to cgi_log_fd,
             *  then we ought to tie it to /dev/null
             *  FIXME: we currently don't tie it to /dev/null, we leave it
             *  tied to whatever 'error_log' points to.  This means CGIs can
             *  scribble on the error_log, probably a bad thing.
             */
            if (cgi_log_fd) {
                dup2(cgi_log_fd, STDERR_FILENO);
            }
            if (req->cgi_type) {
                char *aargv[CGI_ARGC_MAX + 1];
                create_argv(req, aargv);
                execve(req->pathname, aargv, req->cgi_env);
            } else {
                if (req->pathname[strlen(req->pathname) - 1] == '/')
                    execl(dirmaker, dirmaker, req->pathname, req->request_uri,
                          (void *) NULL);
因为req->cgi_type还没有设置，所以检查它的值的if语句之后的代码块被跳过了，而是执行else语句后面的块，这将检查是否req->pathname最后的字符是‘/’。如果是路径名导致了崩溃的情况下，这个评估将是true。`execl()`被这样调用：
    execl(dirmaker, dirmaker, req->pathname, req->request_uri, (void *) NULL);
#### 潜在的根本原因
##### execl()的错误使用
前面提到过，'dirmaker'是一个指向char数组的指针，它使用在boa.conf中配置的DirectoryMaker值进行初始化（在路由器的情况下，这是‘/usr/lib/boa/boa_indexer’，一个不在系统中存在的文件）。这有可能是导致崩溃的潜在原因。
来自：
>
> 如果过程映像文件不是有效的可执行对象，execlp()和execvp()使用该文件内容作为符合system()的命令解释器的标准输入。在这种情况下，命令解释器成为新的过程映像。
另一个可能是传递给函数的最后一个参数。
来自手册`exec()`：
> execl(), execlp(), 和 execle()函数中的const char * arg和后续的省略号可以被认为是arg0, arg1, …,
> argn. 参数列表必须被一个空指针终止，并且因为这些是可变参数函数，指针必须强制转换（char *）NULL。
看一下调用`execl()`的方法，表明了最后参数强制转换`(void *) NULL`，而不是`(char *)
NULL`，我一直没找到任何文件表明这是绝对必须的，以及如果使用不同类型的指针，会发生什么情况。
##### 在2.6.x内核中对管道的不安全使用
最后，这个漏洞也可能是管道和文件描述符的不安全使用的结果，如`init_cgi()`所示。Linux内核版本2.6.x已知有关管道的漏洞，可用于获取权限升级。下面的代码段来自[这个漏洞](https://www.exploit-db.com/exploits/33322/)，将漏洞来源与在Boa中的潜在漏洞函数相比较，我们可以看到在调用fork()的上下文中，有非常类似的管道使用。
        {
            pid = fork();
            if (pid == -1)
            {
                perror("fork");
                return (-1);
            }
            if (pid)
            {
                char path[1024];
                char c;
                /* I assume next opened fd will be 4 */
                sprintf(path, "/proc/%d/fd/4", pid);
                    printf("Parent: %d\nChild: %d\n", parent_pid, pid); 
                while (!is_done(0))
                {
                    fd[0] = open(path, O_RDWR);
                    if (fd[0] != -1)
                    {
                        close(fd[0]);
                    }
                }
                //system("/bin/sh");
                execl("/bin/sh", "/bin/sh", "-i", NULL);
                return (0);
            }
来自[安全编码，CERT](https://wiki.sei.cmu.edu/confluence/display/c/POS38-C.+Beware+of+race+conditions+when+using+fork+and+file+descriptors)：
>
> 当fork子进程时，文件描述符会被复制到子进程中，这可能会导致文件的并发操作。对同一个文件进行并发操作会导致数据以不确定的顺序下被读写，造成竞争条件和不可预知的行为。
#### 结论
到这里我的分析就结束了，除了我对C语言和MIPS的有限知识外，二进制文件模拟环境的难度降低了对我测试理论的能力要求，并得出了一个明确的结论。接下来，我将对Boa的补丁版本进行逆向并确定修复。
#### 参考
  * [Mitre: CVE-2017-9675](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-9675)
  * [DIR-605L Firmware Downloads](http://support.dlink.com/productinfo.aspx?m=DIR-605L)
  * [D-Link DIR-605L Security Advisory](ftp://ftp2.dlink.com/SECURITY_ADVISEMENTS/DIR-605L/REVB/DIR-605L_REVB_RELEASE_NOTES_v2.08UIBETAB01_EN.pdf)
  * [Boa 0.94.14rc21 Source](http://www.boa.org/boa-0.94.14rc21.tar.gz)
  * [Linux Kernel 2.6.x ‘pipe.c’ Privilege Escalation](https://www.exploit-db.com/exploits/33322/)
  * [POS38-C. Beware of race conditions when using fork and file descriptors](https://www.securecoding.cert.org/confluence/display/c/POS38-C.+Beware+of+race+conditions+when+using+fork+and+file+descriptors)
* * *