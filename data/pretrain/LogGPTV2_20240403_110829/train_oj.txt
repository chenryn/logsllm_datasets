                         nlmsg_align(req.nh.nlmsg_len));
rta\->rta_type = ifla_mtu;
rta\->rta_len = rta_length(sizeof(mtu));
req.nh.nlmsg_len = nlmsg_align(req.nh.nlmsg_len) +
                              rta_length(sizeof(mtu));
memcpy(rta_data(rta), &mtu, sizeof(mtu));
send(rtnetlink_sk, &req, req.nh.nlmsg_len, 0);
.ee
.in
.sh see also
.br netlink (3),
.br netlink (7),
.br rtnetlink (7)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/ccos.3
.\" copyright (c) 2017 michael kerrisk 
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.th bzero 3  2021-03-22 "linux" "linux programmer's manual"
.sh name
bzero, explicit_bzero \- zero a byte string
.sh synopsis
.nf
.b #include 
.pp
.bi "void bzero(void *" s ", size_t " n );
.pp
.b #include 
.pp
.bi "void explicit_bzero(void *" s ", size_t " n );
.fi
.sh description
the
.br bzero ()
function erases the data in the
.i n
bytes of the memory starting at the location pointed to by
.ir s ,
by writing zeros (bytes containing \(aq\e0\(aq) to that area.
.pp
the
.br explicit_bzero ()
function performs the same task as
.br bzero ().
it differs from
.br bzero ()
in that it guarantees that compiler optimizations will not remove the
erase operation if the compiler deduces that the operation is "unnecessary".
.sh return value
none.
.sh versions
.br explicit_bzero ()
first appeared in glibc 2.25.
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br bzero (),
.br explicit_bzero ()
t}	thread safety	mt-safe
.te
.hy
.ad
.sp 1
.sh conforming to
the
.br bzero ()
function is deprecated (marked as legacy in posix.1-2001); use
.br memset (3)
in new programs.
posix.1-2008 removes the specification of
.br bzero ().
the
.br bzero ()
function first appeared in 4.3bsd.
.pp
the
.br explicit_bzero ()
function is a nonstandard extension that is also present on some of the bsds.
some other implementations have a similar function, such as
.br memset_explicit ()
or
.br memset_s ().
.sh notes
the
.br explicit_bzero ()
function addresses a problem that security-conscious applications
may run into when using
.br bzero ():
if the compiler can deduce that the location to be zeroed will
never again be touched by a
.i correct
program, then it may remove the
.br bzero ()
call altogether.
this is a problem if the intent of the
.br bzero ()
call was to erase sensitive data (e.g., passwords)
to prevent the possibility that the data was leaked
by an incorrect or compromised program.
calls to
.br explicit_bzero ()
are never optimized away by the compiler.
.pp
the
.br explicit_bzero ()
function does not solve all problems associated with erasing sensitive data:
.ip 1. 3
the
.br explicit_bzero ()
function does
.i not
guarantee that sensitive data is completely erased from memory.
(the same is true of
.br bzero ().)
for example, there may be copies of the sensitive data in
a register and in "scratch" stack areas.
the
.br explicit_bzero ()
function is not aware of these copies, and can't erase them.
.ip 2.
in some circumstances,
.br explicit_bzero ()
can
.i decrease
security.
if the compiler determined that the variable containing the
sensitive data could be optimized to be stored in a register
(because it is small enough to fit in a register,
and no operation other than the
.br explicit_bzero ()
call would need to take the address of the variable), then the
.br explicit_bzero ()
call will force the data to be copied from the register
to a location in ram that is then immediately erased
(while the copy in the register remains unaffected).
the problem here is that data in ram is more likely to be exposed
by a bug than data in a register, and thus the
.br explicit_bzero ()
call creates a brief time window where the sensitive data is more
vulnerable than it would otherwise have been
if no attempt had been made to erase the data.
.pp
note that declaring the sensitive variable with the
.b volatile
qualifier does
.i not
eliminate the above problems.
indeed, it will make them worse, since, for example,
it may force a variable that would otherwise have been optimized
into a register to instead be maintained in (more vulnerable)
ram for its entire lifetime.
.pp
notwithstanding the above details, for security-conscious applications, using
.br explicit_bzero ()
is generally preferable to not using it.
the developers of
.br explicit_bzero ()
anticipate that future compilers will recognize calls to
.br explicit_bzero ()
and take steps to ensure that all copies of the sensitive data are erased,
including copies in registers or in "scratch" stack areas.
.sh see also
.br bstring (3),
.br memset (3),
.br swab (3)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" this manpage is copyright (c) 1995 james r. van zandt 
.\" and copyright (c) 2006, 2014 michael kerrisk
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.\" changed section from 2 to 3, aeb, 950919
.\"
.th mkfifo 3 2021-08-27 "gnu" "linux programmer's manual"
.sh name
mkfifo, mkfifoat \- make a fifo special file (a named pipe)
.sh synopsis
.nf
.b #include 
.b #include 
.pp
.bi "int mkfifo(const char *" pathname ", mode_t " mode );
.pp
.br "#include            " "/* definition of at_* constants */"
.b #include 
.pp
.bi "int mkfifoat(int " dirfd ", const char *" pathname ", mode_t " mode );
.fi
.pp
.rs -4
feature test macro requirements for glibc (see
.br feature_test_macros (7)):
.re
.pp
.br mkfifoat ():
.nf
    since glibc 2.10:
        _posix_c_source >= 200809l
    before glibc 2.10:
        _atfile_source
.fi
.sh description
.br mkfifo ()
makes a fifo special file with name \fipathname\fp.
\fimode\fp specifies the fifo's permissions.
it is modified by the
process's \fbumask\fp in the usual way: the permissions of the created
file are \fb(\fp\fimode\fp\fb & \(tiumask)\fp.
.pp
a fifo special file is similar to a pipe, except that it is created
in a different way.
instead of being an anonymous communications
channel, a fifo special file is entered into the filesystem by
calling
.br mkfifo ().
.pp
once you have created a fifo special file in this way, any process can
open it for reading or writing, in the same way as an ordinary file.
however, it has to be open at both ends simultaneously before you can
proceed to do any input or output operations on it.
opening a fifo for reading normally blocks until some
other process opens the same fifo for writing, and vice versa.
see
.br fifo (7)
for nonblocking handling of fifo special files.
.ss mkfifoat()
the
.br mkfifoat ()
function operates in exactly the same way as
.br mkfifo (),
except for the differences described here.
.pp
if the pathname given in
.i pathname
is relative, then it is interpreted relative to the directory
referred to by the file descriptor
.i dirfd
(rather than relative to the current working directory of
the calling process, as is done by
.br mkfifo ()
for a relative pathname).
.pp
if
.i pathname
is relative and
.i dirfd
is the special value
.br at_fdcwd ,
then
.i pathname
is interpreted relative to the current working
directory of the calling process (like
.br mkfifo ()).
.pp
if
.i pathname
is absolute, then
.i dirfd
is ignored.
.pp
see
.br openat (2)
for an explanation of the need for
.br mkfifoat ().
.sh return value
on success
.br mkfifo ()
and
.br mkfifoat ()
return 0.
on error, \-1 is returned and
.i errno
is set to indicate the error.
.sh errors
.tp
.b eacces
one of the directories in \fipathname\fp did not allow search
(execute) permission.
.tp
.b ebadf
.rb ( mkfifoat ())
.i pathname
is relative but
.i dirfd
is neither
.b at_fdcwd
nor a valid file descriptor.
.tp
.b edquot
the user's quota of disk blocks or inodes on the filesystem has been
exhausted.
.tp
.b eexist
\fipathname\fp already exists.
this includes the case where
.i pathname
is a symbolic link, dangling or not.
.tp
.b enametoolong
either the total length of \fipathname\fp is greater than
\fbpath_max\fp, or an individual filename component has a length
greater than \fbname_max\fp.
in the gnu system, there is no imposed
limit on overall filename length, but some filesystems may place
limits on the length of a component.
.tp
.b enoent
a directory component in \fipathname\fp does not exist or is a
dangling symbolic link.
.tp
.b enospc
the directory or filesystem has no room for the new file.
.tp
.b enotdir
a component used as a directory in \fipathname\fp is not, in fact, a
directory.
.tp
.b enotdir
.rb ( mkfifoat ())
.i pathname
is a relative pathname and
.i dirfd
is a file descriptor referring to a file other than a directory.
.tp
.b erofs
\fipathname\fp refers to a read-only filesystem.
.sh versions
.br mkfifoat ()
was added to glibc in version 2.4.
it is implemented using
.br mknodat (2),
available on linux since kernel 2.6.16.
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br mkfifo (),
.br mkfifoat ()
t}	thread safety	mt-safe
.te
.hy
.ad
.sp 1
.sh conforming to
.br mkfifo ():
posix.1-2001, posix.1-2008.
.pp
.br mkfifoat ():
posix.1-2008.
.sh see also
.br mkfifo (1),
.br close (2),
.br open (2),
.br read (2),
.br stat (2),
.br umask (2),
.br write (2),
.br fifo (7)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright (c) 1993 michael haardt (PI:EMAIL),
.\"     fri apr  2 11:32:09 met dst 1993
.\"
.\" %%%license_start(gplv2+_doc_full)
.\" this is free documentation; you can redistribute it and/or
.\" modify it under the terms of the gnu general public license as
.\" published by the free software foundation; either version 2 of
.\" the license, or (at your option) any later version.
.\"
.\" the gnu general public license's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" this manual is distributed in the hope that it will be useful,
.\" but without any warranty; without even the implied warranty of
.\" merchantability or fitness for a particular purpose.  see the
.\" gnu general public license for more details.
.\"
.\" you should have received a copy of the gnu general public
.\" license along with this manual; if not, see
.\" .
.\" %%%license_end
.\"
.\" modified 1993-07-24 by rik faith (PI:EMAIL)
.\" modified 2003-04-07 by michael kerrisk
.\"
.th tty 4 2019-03-06 "linux" "linux programmer's manual"
.sh name
tty \- controlling terminal
.sh description
the file
.i /dev/tty
is a character file with major number 5 and
minor number 0, usually with mode 0666 and ownership root:tty.
it is a synonym for the controlling terminal of a process, if any.
.pp
in addition to the
.br ioctl (2)
requests supported by the device that
.b tty
refers to, the
.br ioctl (2)
request
.b tiocnotty
is supported.
.ss tiocnotty
detach the calling process from its controlling terminal.
.pp
if the process is the session leader,
then
.b sighup
and
.b sigcont
signals are sent to the foreground process group
and all processes in the current session lose their controlling tty.
.pp
this
.br ioctl (2)
call works only on file descriptors connected
to
.ir /dev/tty .
it is used by daemon processes when they are invoked
by a user at a terminal.
the process attempts to open
.ir /dev/tty .
if the open succeeds, it
detaches itself from the terminal by using
.br tiocnotty ,
while if the
open fails, it is obviously not attached to a terminal and does not need
to detach itself.
.sh files
.i /dev/tty
.sh see also
.br chown (1),
.br mknod (1),
.br ioctl (2),
.br ioctl_console (2),
.br ioctl_tty (2),
.br termios (3),
.br ttys (4),
.br vcs (4),
.br pty (7),
.br agetty (8),
.br mingetty (8)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright (c) michael kerrisk, 2004
.\"	using some material drawn from earlier man pages
.\"	written by thomas kuhn, copyright 1996
.\"
.\" %%%license_start(gplv2+_doc_full)
.\" this is free documentation; you can redistribute it and/or
.\" modify it under the terms of the gnu general public license as
.\" published by the free software foundation; either version 2 of
.\" the license, or (at your option) any later version.
.\"
.\" the gnu general public license's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" this manual is distributed in the hope that it will be useful,