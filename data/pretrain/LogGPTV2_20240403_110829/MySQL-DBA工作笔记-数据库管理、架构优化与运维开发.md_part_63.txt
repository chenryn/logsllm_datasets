NOT
NOT DEFAULT
COMMENT
DEFAULT
自增主键！
FIELDS TERMINATED BY
COMMENT
COMI
IMENT
在支撑的
‘阅读次数"，
ENCLOSED BY
图10-19
Infobright
数据仓库
数据转储
数据同步
从库
主库
---
## Page 415
时候就会顺畅得多。
题留给我的时间只有一天。所以我准备把前期的准备和测试做得扎实一些，后期接入的
能够支持。
运营活动
操作而言又是一个巨大的挑战。
加灵活。
怎么同步到Infobright 里面。
者半个小时，但是目前来看，这个是需要额外的脚本或工具来做的。
的一个难点就是对于数据的流转如何平滑支持。我们可以设定流转频率，比如10分钟或
只需要不到3分钟。
秒，相比原来的2分钟多已经改进很大了。我跑了下批量的查询，原本要18分钟，现在
这两个重要的事情，任何一个解决不了，数据流转是否能够落地都是难题，这个问
第三个问题是基于现有的增量同步方案，需要在时间字段上添加索引。对于线上的
第二个问题，也是更为关键的，
部分实现流程如下图10-20。
从目前的业务需求来说，最多能够容忍一个小时的统计延迟，如果后期要做大量的
其二：
在具体落地的过程中，
通过引入 Infobright方案对已有的统计需求可以做到近乎完美的支持，但是随之而来
3.引入动态调度，解决统计延迟问题
所以对于几千万的表来说，这都不是事儿。
1 row in set (10.20 sec)
比如第-
19991
count( distinct id)
row inset
，
需要更精确的数据支持，要得到半个小时的统计数据，按照现有的方案是否
一个头疼的问题就是全量的同步，第一次同步肯定是全量的，这么多的数据
(8.21sec)
，发现还有两个重要的事情需要提前搞定
: id) from testxxxx where id<2000;
那就是同步策略是怎么设定的，是否可以支持得更
第10章基于业务的数据库架构设计”393
---
## Page 416
394|MySQL DBA工作笔记：数据库管理、架构优化与运维开发
的同步都可以根据实际的情况来灵活控制。所以数据增量同步暂时是“手动挡”控制。
小时，现在在 70 秒钟即可完成。对于业务的体验来说大大提高。完成了第一次同步之后，后续
表就可以快速导入，大表放在最后，整个数据量有150G左右，通过网络传输导入Infobright，
导入 Infobright 的方式来操作。
来得到任务可执行的时间，这样脚本就不需要参数了，这是一个动态调度的迭代过程。
时候一定要确保主从延迟已经最低或者暂时停掉查询业务，使得数据全量抽取更加顺利。
从导出到导入完成，这个过程大概需要1个小时。
可以把起始时间给的早一些，这样截止时间是固定的，逻辑上就是全量的。另外全量同步的
而导入数据到 Infobright 之后的性能提升也是极为明显的。原来的一组查询持续时间在半个
从实践来看，涉及的表有600 多个，我先导出了一个列表，按照数据量来排序，这样小
考虑到每天落盘的数据量在10G 左右，日志量在30G左右，所以考虑先使用客户端
，所以需要对上图10-20的脚本再做一层保证，通过计算当前时间和上一次执行的时间
从整个数据架构分离之后的效果来看（图10-21)，从库的压力大大降低，而效率也大大提高。
脚本的输入参数有两个，
一个是起始时间，
Select into outile导出
（定时任务）
数据转储
图10-21
图10-20
从库
一个是截止时间。第一次全量同步的时候，
Load data导入数仓
数据仓库
---
## Page 417
IO的压力情况。
容时，对于业务来说也是一种可控的方式。下图10-23 是近期的一些优化时间段里从库的
更加友好。所以再进一层的改进方案如下图10-22所示。
支撑密集型数据写入，但是不能够支持指数级别的压力请求，而且存储容量很难以扩展。
在我的理解中，业务层面来做数据路由是最好的一种方式，而且从扩展上来说，也
通过数据路由来达到负载均衡，从目前来看效果是很明显的，而在后续要持续的扩
前面算是对现状做到了最大程度的优化，但是还有一个问题，目前的架构暂时能够
4.引入业务路由，平滑支持业务扩容
数据转储
图10-23
图10-22
数据转储
数据同步
从库2
车2
第10章基于业务的数据库架构设计”395
数据转储
---
## Page 418
396丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
有更长远的规划。目前从我的测试来看，TiDB 是乐观锁（在新版本中也实现了悲观锁),
方案。
MySQL 高可用架构的演进方案，其中对于 TiDB 的架构演进可以理解为一种并行和辅助
MHA，还是MGR，整个过程都可以通过级联的方式衔接起来，如下图10-24是一个基于
为对已有的 MySQL方案的补充，甚至可以做到透明的集群方案，无论你是采用了PXC,
其中 TiDB 方案在开源领域算是比较出众的。
联机分析处理（OLAP）两种业务类型，受到业界的大量关注，也有了很多落地的方案。
10.2.3
MySQL 性能扩展的架构优化分享也已经基本了结。
另外一个切入点应该是大数据方向，解决方案不应该局限于数据库方向，而应该具
近些年来，HTAP 混合数据库发展非常快，能够同时支持联机事务处理（OLTP）和
从目前的测试来看，TiDB 在弹性支撑能力上是很不错的，如果是业务切入点可以作
·水平弹性扩展（吞吐可线性扩展)；
经过陆续几次地解决问题、补充并跟进方案，
·海量数据高并发实时写入与实时查询（HTAP混合负载）。
?
●SQL支持；
从我的理解来看，
故障自恢复的高可用；
跨数据中心数据强一致性保证;
分布式事务；
兼容 MySQL 的 HTAP 选型：TiDB
SOL方向
一个较好的分布式解决方案应该具备以下的特点：
图10-24
Salwl
alvel
Hster?
Baster2
Mutel
，我们完成了从最初的故障到落地成功，
r
级联制
只读业务
Marte3
Hrten
Huter
PIC/ICR
tead/wite-n
real/vrite-r
---
## Page 419
而是从业务可行性来入手，归根结底，主要的出发点就两个字：成本。
10.3.1
思考。
的态度来说明。
们要理清数据类型转换这些技术细节要复杂得多，也更重要。
10.3
具有可行性了。
在充分验证测试的基础上，可以先从一些周边业务开始引入，踩过一些坑，落地也就更
至数据下沉至大数据，都是一些不错的点，如图10-25所示。
接下来我们会先回答上面两个疑问，然后以迁移到MySQL为例进行一些注意事项的
迁移缘由从行业的实践来看（主要是说互联网行业)，绝对不是先从技术可行性出发，
如果解答了上述的两个问题，也就基本理顺了整个事情的脉络，我会本着基本客观
·为什么要迁移到MySQL？
·为什么要从商业数据库迁移出去？
有两个问题需要前置考虑：
从商业数据库（Oracle，SQL Server等）迁移到MySQL 需要考虑的事情其实远比我
当然基于HTAP的数据库架构方案还有很多，我们可以在行业里做一些调研和测试，
我对迁移缘由的理解
迁移到MySQL需要考虑的事情
历史数据入库
万史验据备份归档
图10-25
份号
第10章基于业务的数据库架构设计|397
水平切分
用层
---
## Page 420
398丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
很多不同维度的复制方案。
允许存在一定的延迟，使用MySQL 原生的复制方案是一件很容易的事情，MySQL支持
性上，而这也就是为什么很多MySQLDBA比较“贵”的一个原因。
式增长的业务，MySQL 扩展能力不是体现在 MySQL 数据库本身，而是对于架构的扩展
MySQL的一个核心点，这也就是为什么很多互联网的MySQL规模动辄几百几千，爆发
可以很轻松的加开公交专线，但是加开地铁线路那就完全不同了。我觉得这是迁移到
短，容易上手，而且对于系统的资源要求不高。
统都是免费可选。
有一系列的分支，比如 Percona 分支，MariaDB 分支，存储引擎 InnoDB，MyRocks 等统
10.3.2为什么要迁移到 MySQL
实就不适合 Oracle 来扛了，当然也不适合用 MySQL，可能 Redis 的组合方案会更好一些。
需要考虑这些协议的边界和适用范围。
了问题找不到专业的快速支持，那就悲剧了。
在此，有技术兜底，这些成本对企业来说也是需要和厂商的绑定关系。稀里糊涂硬上，出
的是安全领域，之下的领域其实就是一些可选择的空间了。选择商业数据库的一个原因也
面是很大的，一旦出问题很容易成为公众事件。而以金融级业务作为一个分界点，之上
允许出一些重大问题的，这些影响面太大，比如医院医生给患者开药的数据，这些影响
的是什么，我觉得应该是安全，安全包括生命安全，行业安全，系统安全，这些绝对不
务，很多其他业务其实对于数据完整性、一致性的要求就会降低一个维度，比钱更重要
第四是复制,这是MySQL 相较于Oracle 的一个亮点,如果需要做跨数据中心的复制
，然后是开源定制，其实很多开源技术的开源协议是有差别的，我们采用开源技术也
第三是水平扩展能力，把Oracle 比作地铁，MySQL 比作公交车会更容易理解，我们
第二是MySQL 效率高，足够轻量级。MySQL 的效率从使用上来说，学习周期会很
第一还是成本，开源免费，方便定制，MySQL 的可选方案可绝对不只有社区版，还
要回答这个问题，其实我们的主线就是MySQL 可以做什么，优势在哪里。
对于第4 点，举个例子，Oracle 从性能上是毋庸置疑的，但是如果有海量的读请求，其
（4）迁移的本质是找到最适合的业务场景，而不是为了技术实现而实现。
（3）对开源技术积累足够，技术把控能力要强。
（2）迁移到 MySQL其实不是终极解决方案，只是一种可选的方案。
（1）成本因素需要权衡，绝对不是非黑即白的事情。
所以到此需要明确的是：
从业务的另一个维度来看，试想我们所接触的互联网行业，除了充值和钱相关的业
MySQL开源免费，更重要的是行业实践验证充分，所以它具有得天独厚的优势。
---
## Page 421
不是为了迁移而迁移。
功能和性能的差异，并在这个基础上演化出更加优良的方案，而这也是我们迁移的初衷，
MySQL有，而是从一些使用场景上来说更好的使用特性。
Oracle 里面也是可以使用同义词的架构来实现类似 MySQL 的访问模型的。
10.3.3
需要花钱买的事情变成了自己干，自己用。
需要业务对数据库的依赖要更轻巧一些，原本支持不好的存储过程就可以很自然的弱化了。
这本身是 MySQL 功能和性能上的缺失，但是反而成为一个优点，因为要支撑分布式需求,
以下是MySQL 相比 Oracle不足的一些地方，既然要迁移到 MySQL，那就需要考虑
·存储过程支持有限，这是很多企业的技术债，处理好了是坦途，处理不好是大坑。
第六是开源带来的生态体系，开源红利带给企业的是很多的技术方案选择，让原本
·没有同义词；
性能上肯定有差异，我们主要理一理功能上的。比较的原则不是说Oracle有一定要
要更清晰的回答注意事项，可以归类为一个问题：MySQL 相比Oracle少了些什么？
·对于 MySQL 类型在MySQL 里需要考虑的细节较多，比如数值型,Oracle 里面 number
·Oracle 里会默认统一按照大写来处理，MySQL 里面默认是大小写敏感的。
·Oracle表名，用户名都是有长度限制，在 30个字符以内，在MySQL 里长度要大
·Oracle 里面的 Null 和空串都可以按照 null 来处理，但是在 MySQL 里两者是不同的。
数据类型的差异其实是比较具体的技术细节，我举一些补充的。
首先是架构的差异，如图10-26所示，Oracle和MySQL的差异还是比较大的，当然
第五是业务轻依赖，这个可以分为两个维度来说。一个是功能限制，一个是性能限制。
比如存储过程，硬要用存储过程调用来对接，
搞定，MySQL 有一系列的数值类型可以选择，不建议大一统的 big int 适配所有需求。
得多，尤其是表名就需要注意了。
从 Oracle 迁移到 MySQL 需要考虑的事情
rgp
图10-26
，后期后患无穷；
db1
第10章基于业务的数据库架构设计”399
---
## Page 422
400丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
是多个独立的业务单元，但是状态数据和流水数据是彼此通过存储过程级联调用。
据，而账单业务是状态数据的操作历史。
其实可以划分为两个大类，一个是数据业务，
10.4.1
的一些功能性差异，相对来说是一种更通用的架构改进方式。
系的演进过程，相信大大小小的公司在不同的发展阶段都会碰到其中一些共性的问题。
建设 MySQL 分布式存储平台一个很好的切入点。本小节会着重讨论迁移到 MySQL 架构体
方面需要提前布局，MySQL 方案虽然不是万金油，却是架构演进中的一种典型方案，也是
10.4迁移到 MySQL的业务架构演进实战经验
改造前架构如下图10-27所示，对数据做了过滤，整体上库里面的表有上万张，虽然
迁移前，我们做了业务梳理，整体的系统现状梳理如下表10-4，可以发现这个业务
我们先来简单介绍一下系统迁移的背景，在这个过程中我们不会刻意强调源数据库
随着业务的快速发展，做到未雨绸缪很重要，在提升关系型数据库的扩展性和高可用性
迁移的本质是找到最适合的业务场景，而不是为了技术实现而实现
·性能工具，MySQL 里面的性能工具还是比较少的，而且粒度和效果有限。
●绑定变量的性能差异不大,Oracle 里面敏感的绑定变量问题在MySQL里不是问题;
·索引的差异，覆盖索引的实现两者差异也很大。
·没有物化视图，难以实现增量刷新的需求；
·没有 sequence，这个 MySQL 的自增列完全可以弥补；
·没有 db link，这个特性在 MySQL 里不支持其实是件好事，杜绝了那种跨库关联的需求;
数据同步策略
数据保留周期
小结一下：
优化器薄弱，
分区表有，但是很少用；
数据属性
数据特点
数据量
架构改造背景和演进策略
多表关联，Hash Join在MySQL里还是一个弱项;
数据读写 (插入，修改，查询)
事务性数据
数据业务
400G+
数据业务通过调用存储过程生成账单数据
表10-4
账单数据保留在2周以上
物理备份保留周期1个月
一个是账单业务。数据业务负责事务性数
数据写入为主(插入，查询）
流水型数据
1024G+
账单业务
---
## Page 423
10-28所示的4个阶段。
架构的同步迭代，整体上走过了如下图
地，要在这个过程中尽可能和研发团队保持
会带来维护的复杂成本。
点，并不是所有业务都需要拆分做成分布式。分布式虽能带来好处，但是同时分布式也
而且如果硬着头皮做完，效果也肯定不好。
存储过程我们都无缝的平移过来,在 MySQL 分布式的架构下,这种方案显然是不可行的，
基本会在做和不做之间摇摆。
要拆分为分布式架构是很困难的，主要体现在3个地方：
（2）对于大家的常规理解来说，
（1）研发和运维对于分布式架构的理解有限，
（1）功能阶段：梳理需求，对存储过程进行转移，适配MySQL方向。
所以对于架构的改进，我们为了能够落
（3）对于分布式的理解，不是仅仅把业务拆开那么简单，我们心中始终要有一个平衡
（3）性能阶段：对系统压力进行增量测试和全量测试，全面优化性能问题。
（2）架构阶段：对系统架构和业务架构进行改进设计，支持分布式扩展。
对这样一个系统做整体的改造，存在大量存储过程，
SQL Server Instance