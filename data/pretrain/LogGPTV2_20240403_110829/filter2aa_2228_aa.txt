# Anti-RE Techniques in DRM Code

## Introduction
**Presented by: Jan Newger**
- **Event:** Seminar on Advanced Exploitation Techniques
- **Location:** i4, RWTH Aachen, Germany
- **Date:** DEF CON 16 / 2008

### Outline
1. **Introduction**
   - About DRMs
   - Approaching the DRM
2. **SEH Basics**
   - Overview
   - Exception Dispatching
3. **Anti-RE Techniques**
   - Overview
   - Trampolines
   - Debug Registers
   - P-Code Machine
4. **Decrypting the Content**
   - The Algorithm
   - Demo

## 1. Introduction

### About DRMs
- **Digital Rights Management (DRM):** A system used to restrict access to digital content.
- **Functionality:**
  - Restricts access to content.
  - Encrypts content.
  - Decrypts content online.
  - Binds keys to user/hardware to prevent copying.
  - Requires a new license if hardware is changed.
  - Involves multiple keys: media key, hardware key, player key, and content key.

### Approaching the DRM
- **Ultimate Goal:** Find the code for content decryption and the associated key setup.
- **Obvious Approach:**
  1. Set breakpoints (BPs) on file I/O APIs (e.g., CreateFile, ReadFile, MMF).
  2. Set breakpoint memory (BPM) on the file buffer.
     - Stops on copy operation or breaks on decryption.
- **Challenges:**
  - The DRM system often blocks debug registers, making the obvious approach impossible.

### Basic Approach Summary
- **Our Strategy:**
  - Use code coverage to identify potential areas of interest.
  - Employ the obvious approach to find the decryption code.

## 2. SEH Basics

### Overview
- **Structured Exception Handling (SEH):** A mechanism in Windows for handling exceptions on a per-thread basis.
- **Exception Dispatching:**
  - Uses a linked list of handlers starting at `fs:[0]`.
  - On an exception, the OS walks the list of the faulting thread.
  - Handlers can:
    - Handle the exception and ask the OS to continue execution.
    - Refuse to handle the exception.

### SEH Handler
```c
EXCEPTION_DISPOSITION _except_handler(
    _EXCEPTION_RECORD* ExceptionRecord,
    void* EstablisherFrame,
    _CONTEXT* ContextRecord,
    void* DispatcherContext);
```

### Remarks
- **Simplified View:**
  - No stack unwinding.
  - No collided unwind or nested exceptions.
  - Handlers can decide not to return (C++, try...except).
  - This view is sufficient for our analysis.

## 3. Anti-RE Techniques

### Overview
- **Control Flow Obfuscation:**
  - Uses fake exceptions to interrupt control flow.
  - Handlers change the thread context.
  - Inter-/intra-modular calls through call tables.
  - Utilizes dynamically allocated trampolines.
  - P-Code machine.

### Anti-Debugging
- **Techniques:**
  - Checks the Process Environment Block (PEB) flag.
  - Scans APIs for the 0xCC (int 3) instruction.
  - Uses debug registers (no BPM/BPX).
  - Special files contain code uncompressed at runtime.
  - Uses fake exceptions to detect debuggers.

### Trampolines
- **Definition:**
  - Copies code at runtime to a randomized location (RDTSC) and executes from there.
- **Execution:**
  1. Changes control flow via fake exceptions (single step exception).
  2. Exception handler modifies EIP based on debug register values.
  3. Execution resumes at the next trampoline.

### Trampoline Details
- **Trampoline Control Flow:**
  - Trampoline A transfers control flow to Trampoline B.
  - Control flow depends on jumps and exceptions.
  - No call or ret instructions, no direct control flow between trampolines.
  - Implements a call hierarchy emulation.

- **Trampoline0:**
  - TrampolineA copies Trampoline0 and jumps to it.
  - Manages internal call hierarchy.
  - Puts the destination trampoline on the stack.
  - Copies the next trampoline to a random location.

- **Trampoline1:**
  - Copies Trampoline0 to a random location.
  - Installs SEH frame and triggers a single step exception.
  - Trigger Exception:
    ```assembly
    pushf
    pop eax
    or eax, 100h
    push eax
    popf
    ```

- **Exception Handler:**
  - Changes EIP based on debug register values.
  - Clears the TF bit, removes SEH frame, and cleans the stack.

- **Trampoline2:**
  - Copies the destination trampoline.
  - Jumps to the destination trampoline.

- **Call Stack Emulation:**
  - The `ret` instruction is emulated using a similar mechanism.
  - Special exception handler removes the trampoline from the internal call stack.
  - Modifies the context, and execution resumes.

### More Trampoline Details
- **Use of Debug Registers:**
  - **DR0 and DR6:** Zeroed out.
  - **DR1:** Contains a pointer to a shared stack area to pass data between trampolines.
  - **DR2:** Holds the trampoline address for return emulation.
  - **DR3:** Holds the address of the starting trampoline (Trampoline0).
  - **DR7:** Used to turn hardware breakpoints on and off frequently.

### Impact of Trampolines
- **Impact on Reverse Engineering (RE):**
  - Makes static and dynamic analysis more difficult.
  - Disrupts traditional debugging techniques.
  - Requires advanced understanding of SEH and control flow obfuscation.

## 4. Decrypting the Content

### The Algorithm
- **Details:**
  - [Detailed explanation of the decryption algorithm]

### Demo
- **Demonstration:**
  - [Step-by-step demonstration of the decryption process]

---

This document provides a comprehensive overview of the presentation by Jan Newger on anti-reverse engineering (anti-RE) techniques in DRM code, including detailed explanations of SEH basics, anti-RE techniques, and the process of decrypting content.