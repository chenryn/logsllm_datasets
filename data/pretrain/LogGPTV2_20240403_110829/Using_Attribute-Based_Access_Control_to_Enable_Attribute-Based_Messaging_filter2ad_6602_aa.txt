# Title: Using Attribute-Based Access Control to Enable Attribute-Based Messaging

## Authors:
Rakeshbabu Bobba, Omid Fatemieh, Fariba Khan, Carl A. Gunter, and Himanshu Khurana  
University of Illinois Urbana-Champaign

## Abstract
Attribute-Based Messaging (ABM) allows message senders to dynamically generate recipient lists based on attributes inferred from an enterprise database. This targeted messaging can reduce unnecessary communications and enhance privacy but faces significant challenges in access control. In this paper, we explore an approach to ABM that leverages the same attribute database used for addressing to derive access control information. We address three key challenges: 
1. Implementing a manageable attribute-based access control system.
2. Integrating this system with existing messaging infrastructure for practical deployment.
3. Ensuring the system is efficient enough to support mid-size enterprises. 
Our implementation demonstrates that ABM messages, approved by XACML review, can be dispatched to an enterprise of at least 60,000 users with minimal latency.

## 1. Introduction
Attribute-based systems are valuable due to their flexibility, intuitiveness, and ease of deployment. For example, in attribute-based directory searching, employee attributes (e.g., department, location) are used to find specific individuals. The flexibility arises from the ability to combine (attribute, value) pairs arbitrarily, and the intuitiveness comes from the common understanding of these attributes. Most attributes associated with an enterprise are already present in various databases, such as LDAP directories.

One application that can benefit from integration with an attribute-based system is multi-party email messaging in an enterprise. Currently, mailing lists are used for such messaging, but they often result in inboxes filled with irrelevant messages. For instance, if the University of Illinois wishes to send an email to all faculty on sabbatical, it might send it to all faculty, leading to many recipients receiving an irrelevant message. While technically not spam, these messages waste users' time.

**Attribute-Based Messaging (ABM)** allows dynamic creation of recipient lists using attribute-based addresses. This enhances message relevance and enables the sender to send confidential messages only to intended recipients. For example, an ABM message targeting faculty on sabbatical would save most professors the hassle of deleting irrelevant messages. This concept can be applied to any set of attributes available in an enterprise database, such as sending a message to female CS graduate students who have passed their qualifying exams about a fellowship opportunity.

However, practical ABM presents several challenges:
1. **Access Control:** Managing who can send messages based on specific attributes.
2. **Deployment:** Integrating ABM with existing messaging systems without requiring extensive modifications.
3. **Efficiency:** Ensuring the system can handle dynamic recipient list generation efficiently.

In this work, we address these challenges using an **Attribute-Based Access Control (ABAC)** approach. We implement a prototype and conduct experiments to demonstrate the efficiency of our solution. The paper is structured as follows:
- Section 2: Approach for Practical Access Control
- Section 3: ABAC for ABM
- Section 4: Architecture for ABM Using ABAC and XACML
- Section 5: Implementation and Performance Evaluation
- Section 6: Related Work
- Section 7: Conclusions and Future Work

## 2. Approach for Practical Access Control
An ABM system includes an enterprise attribute database, a query language, a composition mechanism, a bridging mechanism, an ABM server, and an access control component. The access control component ensures that the sender is authorized to send messages to the recipients based on their attributes. Without access control, senders could freely access all enterprise users' inboxes, violating user privacy.

### Key Components of the Access Control System
- **Policy Language:** Enables administrators to specify policies.
- **Policy Engine (PDP):** Evaluates specified policies against access requests.
- **Policy Enforcement Point (PEP):** Enforces the decisions made by the PDP.

### Challenges and Solutions
- **Manageability:** ABAC uses attributes directly, avoiding the need for role administration systems like RBAC. Attributes are extracted from the same enterprise databases used for addressing.
- **Deployability:** Our architecture and prototype use XACML, a widely supported standard, and Sun’s standards-compliant policy engine.
- **Client-Side Deployability:** Senders log into a web server to compose ABM addresses using only allowed attributes. The ABM address is integrity-protected and securely bound to the sender’s email account.
- **Efficiency:** Our implementation uses well-implemented and standards-compliant components, demonstrating that both XACML decision procedures and dynamic list creation can be performed within seconds for an enterprise with 60,000 principals.

## 3. ABAC for ABM
In this section, we describe how ABAC provides manageable access control for ABM. Enterprises store attribute data about their users in databases. For example, a university might have the following attribute data for a user:

- UserID: user089
- Position: Faculty
- Designation: Professor
- Department: Computer Science
- Courses Teaching: CS219, CS486
- Date of Join: 06/24/1988
- Annual Salary: $80,000

This information may not be centralized but can be accessed through a unified view. ABAC allows the derivation of access control information from the same attribute data, ensuring that only authorized senders can route messages based on specific attributes.