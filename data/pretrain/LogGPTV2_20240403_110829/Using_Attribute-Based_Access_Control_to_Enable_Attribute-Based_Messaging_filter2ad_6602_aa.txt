title:Using Attribute-Based Access Control to Enable Attribute-Based Messaging
author:Rakeshbabu Bobba and
Omid Fatemieh and
Fariba Khan and
Carl A. Gunter and
Himanshu Khurana
Using Attribute-Based Access Control
to Enable Attribute-Based Messaging
Rakesh Bobba, Omid Fatemieh, Fariba Khan, Carl A. Gunter, and Himanshu Khurana
University of Illinois Urbana-Champaign∗
Abstract
Attribute Based Messaging (ABM) enables message
senders to dynamically create a list of recipients based on
their attributes as inferred from an enterprise database.
Such targeted messaging can reduce unnecessary commu-
nications and enhance privacy, but faces challenges in ac-
cess control. In this paper we explore an approach to ABM
based on deriving access control information from the same
attribute database exploited by the addressing scheme. We
show how to address three key challenges. First, we demon-
strate a manageable access control system based on at-
tributes. Second we show how this can be used with ex-
isting messaging systems to provide a practical deployment
strategy. Third, we show that such a system can be efﬁ-
cient enough to support ABM for mid-size enterprises. Our
implementation can dispatch ABM messages approved by
XACML review for an enterprise of at least 60,000 users
with only seconds of latency.
1. Introduction
Attribute based systems are useful in practice because
they are ﬂexible, intuitive, and highly deployable. A com-
mon example is attribute-based directory searching where
the attributes of an employee (e.g., department, location)
are used to ﬁnd the employee.
In this example the ﬂexi-
bility comes from the ability to combine (cid:1)attribute, value(cid:2)
pairs arbitrarily and intuitiveness comes from a common
understanding of employee attributes. In general, attribute-
based systems are deployable because most attributes asso-
ciated with an enterprise are already present in various en-
terprise databases and assigned to enterprise users; e.g., in
LDAP directories for the example above. Other examples of
attribute-based systems include attribute-based authentica-
tion, access control, and trust negotiation [11, 5, 18, 17, 8].
∗Afﬁliations of the authors: Bobba, Khurana, National Center for Su-
per Computing Applications (NCSA); Fatemieh, Khan, Gunter, Computer
Science Department.
An application that can beneﬁt greatly from integration
with an attribute-based system is multi-party e-mail mes-
saging in an enterprise. Today, mailing lists are used to pro-
vide such messaging and while they enable a single sender
to communicate with a large number of recipients, they also
lead to e-mail inboxes ﬁlled with many messages that do
not interest the recipient. This is often caused by the fact
that the recipient lists are overly broad. For example, if the
University of Illinois wishes to send an e-mail to all of its
faculty on sabbatical, it is likely to do this by sending it to
all faculty and including a body that indicates that the mes-
sage only applies to the ones on sabbatical. In principle, it
would be possible to use a database to ﬁnd out who is on
sabbatical and use this to create a mailing list, but this may
seem like a hassle given the system staff time required to ac-
complish it. So it is much easier to send to a large number
of recipients just to reach the subset that actually needs to
see the message. Though technically such unwanted mes-
sages do not qualify as spam1 they tend to waste users’ time
all the same.
Attribute-Based Messaging (ABM) is the concept of al-
lowing lists of messaging recipients to be formed dynam-
ically by using an attribute-based recipient address. This
approach brings the ﬂexibility of attributes in enabling the
sender to send targeted messages, which 1) enhances the
relevance of messages to the recipient and 2) allows the
sender to send conﬁdential messages knowing that the mes-
sages would be delivered only to the intended recipients.
The approach also brings the intuitiveness of attributes as
enterprise users typically understand the attributes associ-
ated with the users of their enterprise. Thus an ABM mes-
sage with an address consisting of a query that returns the e-
mail addresses of the faculty on sabbatical would save about
6 out of every 7 professors the hassle of deleting a message
that does not apply to them. Furthermore, this concept can
be applied to any collection of attributes that are available
in an enterprise database to which the mailing mechanism
can be linked. For instance, it might be possible to send a
1Spam is deﬁned as unsolicited commercial e-mail by the Federal Trade
Commission.
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006message to all of the female CS graduate students who have
passed their qualifying exams to tell them about a fellow-
ship opportunity that has these requirements. ABM holds
the opportunity to be make more efﬁcient use of recipient
time than broadcast messages or even specialized bulletin
boards or web pages.
Practical ABM raises some interesting challenges, how-
ever. To identify these challenges we ﬁrst consider a possi-
ble ABM development and deployment path. An initial step
would be the collection of enterprise attributes and their as-
signment to users in a database, or perhaps, a single view of
such user-attribute assignments from a collection of data-
bases as offered by a data services layer. The next step
would be to set up an ABM server and associate it with a
domain Mail Transfer Agent (MTA) for compatibility with
current SMTP systems much like the mailing list servers of
today. This ABM server would be responsible for resolv-
ing attribute-based messages to a list of e-mail addresses
from the database(s). The next step would be to provide
an interface to clients to compose and send messages to
attribute-based addresses (ABM addresses). It is at this step
that we ﬁnd the interesting challenges of ABM, which pri-
marily have to do with the security and privacy of deployed
ABM systems.
First, there is the challenge of ﬁnding a manageable way
to deal with access control. If anybody can send a message
based on any set of attributes, this may increase rather than
decrease the number of unwanted communications. It also
entails some privacy issues. For instance: who, if anyone,
is allowed to send an e-mail message to faculty that make
a salary of more than $150,000? If these concerns make it
too difﬁcult for an organization to decide on a policy for ac-
cess to ABM, then ABM will not be useful. Second, there is
the challenge of ﬁnding a plausible deployment avenue for
ABM that allows the clients to send and receive attribute-
based messages with restricted access policies via the enter-
prise messaging system. If each Mail User Agent (MUA)
client or enterprise MTA must be modiﬁed to incorporate
ABM, then this will be too expensive for deployment in the
foreseeable future. Third, there is the problem of making
ABM sufﬁciently efﬁcient. Since each message address en-
tails an access control decision and dynamically forming a
set of recipients, there is a serious question about whether
users will loose patience or MTAs will be overwhelmed.
In this work we address these three security and privacy
challenges by employing an Attribute-Based Access Con-
trol (ABAC) approach integrated into an architecture fo-
cused on deployability. We then implement a prototype and
conduct experiments that demonstrate the efﬁciency of our
solution. This work is described in the following seven sec-
tions. In the second section we outline our approach for a
practical access control system. In the third section we dis-
cuss how the ABAC approach is suitable for ABM. In the
fourth section we describe our architecture for ABM using
ABAC and eXtensible Access Control Markup Language
(XACML) with off-the-shelf e-mail MUAs and MTAs. In
the ﬁfth section we describe our implementation and look at
measures of its performance for various types of policies. In
the sixth section we outline related work on targeted mes-
saging and practical demonstrations of ABAC. In the sev-
enth section we make conclusions, including limitations of
our current work and possible future work.
2. Approach for Practical Access Control
An attribute-based messaging system comprises an en-
terprise attribute database that provides user to attribute
mapping functionality, a query language and composition
mechanism that enables senders to compose ABM ad-
dresses, a bridging mechanism that connects the ABM sys-
tem with the enterprise messaging system, an ABM server
that provides service to all enterprise users and related com-
ponents, and the access control component. The access con-
trol component is needed to ensure that the sender is autho-
rized to send the message to the set of recipients represented
by their collective attributes in the composed address. The
absence of access control would allow senders free and easy
access to all enterprise users’ e-mail inboxes and would also
violate the privacy of user attributes. Note that this privacy
is currently enforced in enterprise databases by allowing
only authorized administrators access to them. When at-
tributes are made available to users in the ABM system, it
is essential that the privacy of the attributes be enforced via
appropriate access control. To do so, the access control sys-
tem would comprise a policy language that enables admin-
istrators to specify policies, a policy engine that acts as the
Policy Decision Point (PDP) by evaluating speciﬁed poli-
cies against a given access request, and a Policy Enforce-
ment Point (PEP) that enforces the decision. In the ABM
system the ABM servers acts as the PEP. As identiﬁed in
the Introduction, practical access control for ABM involves
addressing the challenges of manageability, deployability,
and efﬁciency.
In order for the access control system to be manageable
it must use access control techniques that specify an efﬁ-
cient mapping of permissions to services (i.e., the ability to
send messages to a set of recipient with a given collection
of attributes). For example, Access Control Lists (ACLs)
would not be a good policy model for ABMs since the cre-
ation and management of such lists for a potentially large
number of attributes would be unwieldy. To address this we
turn to ABAC, which has recently proven to be successful
in access control for distributed systems [5, 8, 11, 17, 18].
In ABAC a requester is granted access to a collection of ser-
vices based on a furnished collection of attributes. Translat-
ing this to our ABM system, a message sender is granted
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006the permission to send messages to a set of recipients with
a collection of attributes based on his own collection of
attributes. This approach has two advantages in terms of
manageability. First, since the ABM systems extracts at-
tributes from enterprise databases for addressing purposes,
using ABAC allows us to derive access control information
from the same databases. Second, like Role Based Access
Control (RBAC) [9], ABAC simpliﬁes assignment and re-
vocation of permissions. However, since ABAC uses at-
tributes directly it avoids the need to set up and manage a
role administration system that is needed for RBAC.
For server-side deployability on a variety of messaging
environments the access control system must employ a us-
able, standardized policy language and a standards-based
implementation of a policy engine. To address this our ar-
chitecture and prototype are based on XACML [10] and
Sun’s standards-compliant implementation of its policy en-
gine (sunxacml.sourceforge.net). There are sev-
eral advantages to XACML for our practical demonstra-
tion. First, XACML lends itself very well for ABAC policy
speciﬁcation as the framework supports attributes. Second,
the XACML standard has widespread support from industry
and standards bodies and this may support adoption. Third,
its successful integration in several commercial products [3]
as well as research projects [14] indicates the conﬁdence in
its deployability and effectiveness.
For client-side deployability the access control system
must enable the sender to compose an attribute-based mes-
sage that complies with the access policy using almost any
existing MUA. To address this we use policy specialization
techniques where the sender logs into a web server to com-
pose an ABM address using only those attributes that he is
allowed to route on; i.e., the composition of an ABM ad-
dress is limited to attributes based on the access policy for
the sender. This ABM address is returned to the sender in
a ﬁle that he can then attach to his message, which is ad-
dressed to a pre-speciﬁed e-mail address of the ABM server.
Furthermore, the ABM address is integrity-protected and
securely bound to the sender’s e-mail account so that it can-
not be spoofed or replayed. This approach also provides
e-mail semantics that users are familiar with in that once
they compose and send a message they expect the message
to be delivered. Other approaches for addressing this chal-
lenge can also be envisioned; e.g., the development of MUA
plug-ins that can access enterprise attributes and understand
and enforce access policies. However, a major advantage of
our approach of setting up a web server is that we avoid the
need for developing multiple plug-ins for different MUAs
as well as requiring installation of additional software on
the client side.
The efﬁciency of the access control system can best be
gauged via prototype implementation and experimentation.
With an eye towards rapid prototyping and performance
we have employed several commercial of-the-shelf compo-
nents that are well-implemented and standards-compliant
including, for example, Sun’s XACML policy engine. In
our implemented solution a a user accesses a web page
to create an ABM address that further makes a request;
our policy engine specializes the organizational policy to
this user, indicating the attributes that the user can use for
routing. The user then forms the desired attributes into
an address, which is represented using a query language.
This query is added to a message as an attachment and
sent to a distinguished ABM address at an MTA using the
user’s standard MUA. The ABM system collects the e-mail
from this distinguished inbox and dynamically creates a
distribution-list using the attached query and the enterprise
attribute database. With an enterprise of 60,000 principals
using its existing enterprise database or an XML database
view of it, we are able to show that both the XACML de-
cision procedure and the dynamic list creation can be one
within seconds in typical cases, and will still have satisfac-
tory performance for emerging XML database representa-
tions that integrate heterogeneous enterprise databases.
3. ABAC for ABM
In this section we describe how ABAC is employed
to provide manageable access control
for ABM. All
enterprises have attribute data about their users in their
databases.
For example, a university might have the
following attribute data on a user represented as (cid:1)attribute,
value(cid:2) pairs:
UserID: user089
Position: Faculty
Designation: Professor
Department: Computer Science
Courses Teaching: CS219, CS 486
Date of Join: 06/24/1988
Annual Salary: $80,000
. . .
This information may not all be available in one central-