In this paper, we focus on local community detection
schemes [3], which do not require a global view of the net-
work.4 Most of the local approaches work by starting with
one (or more [2]) seed nodes and greedily adding neighboring
nodes until a suﬃciently strong community is found. For ex-
ample, Mislove’s algorithm [21] iteratively adds nodes that
improve the the normalized conductance (a metric closely re-
lated to conductance) at each step, and stops when the con-
ductance metric reaches an inﬂection point. For a detailed
survey of local community detection algorithms, we refer the
reader to the recent survey paper by Fortunato [10], which
discusses numerous algorithms for community detection.
As there is a large body of work on community detec-
tion, we could theoretically utilize any of these algorithms
as the ranking algorithm. For the evaluation presented in
this section, we selected Mislove’s algorithm [21], but with
the conductance metric from Section 3.1.2. We chose this
algorithm as it is conceptually easy to understand, since it
greedily minimizes conductance. However, our decision is
not fundamental, and there may be other algorithms that
perform better (especially since diﬀerent community detec-
tion algorithms have been shown to perform better on dif-
ferent networks [15]). Rather, our goal here is simply to
investigate how well oﬀ-the-shelf community detection algo-
rithms are able to ﬁnd Sybils.
In order to use community detection to ﬁnd Sybils, we
need to generate a node ranking in the same manner as the
other schemes. To do so, we run Mislove’s community detec-
tion algorithm and record the node that it iteratively adds
at each step to minimize conductance. Note that we modify
the algorithm to not stop once a local trough is found; in-
stead we allow it to continue running until all of the nodes
have been added. This results in a node ranking that we
can use to compare against the other schemes.
4.2 Evaluating Sybil detection
We now evaluate the community detection algorithm against
our existing Sybil defense schemes. When comparing against
each of the Sybil defense schemes, we used experimental set-
tings similar to those described in the paper in which the
4Our decision to focus on local community detection algo-
rithms, as opposed to global ones, is due to the fact that they
work in a similar manner as existing Sybil defense schemes
by not assuming a global view. However, it has been shown
that diﬀerent global community detection algorithms have
many of the same properties as local ones [15], indicating
that our results would likely hold for global algorithms as
well. We leave this to future work.
Network
YouTube [20]
Astrophysicists [25]
Advogato [1]
Facebook [21]
Nodes
446,181
14,845
5,264
514
Links
Avg. degree
1,728,938
119,652
43,027
3,313
7.7
16
16
13
Table 2: Statistics of datasets used in our evaluation.
scheme was proposed. This required us to split our evalu-
ation results in two separate sections; one for SybilGuard,
SybilLimit, and SybilInfer and another for SumUp. The
split is necessary because SumUp was originally evaluated
for its ability to limit the number of votes Sybil identities can
place, and not for its ability to accurately detect Sybil nodes.
Thus, the experimental settings for evaluating SumUp are
quite diﬀerent from those of the other schemes, necessitating
a separate evaluation.
A summary of the data sets that we use in the evaluation
is shown in Table 2. In addition to the datasets from the pre-
vious section, we examine YouTube, consisting of the social
network of users in YouTube [20], and Advogato, consisting
of the trust network between free software developers [1].
4.2.1 Measuring Sybil detection accuracy
In order to measure the accuracy of the various schemes at
identifying Sybils, we need a way to compute how often a
scheme ranks Sybil nodes towards the bottom of the ranking.
To do so, we use the metric Area under the Receiver Operat-
ing Characteristic (ROC) curve or A′. In brief, this metric
represents the probability that a Sybil defense scheme ranks
a randomly selected Sybil node lower than a randomly se-
lected non-Sybil node [9]. Therefore, the A′ metric takes on
values between 0 and 1: A value of 0.5 represents a random
ranking, with higher values indicating a better ranking and
1 representing a perfect non-Sybil/Sybil ranking. Values be-
low 0.5 indicate an inverse ranking, or one where Sybils tend
to be ranked higher than non-Sybils. A very useful property
of this metric is that it is deﬁned independent of the num-
ber of Sybil and non-Sybil nodes, as well as the cutoﬀ value,
so it is comparable across diﬀerent experimental setups and
schemes.
4.2.2 SybilGuard, SybilLimit, and SybilInfer
For comparing SybilGuard, SybilLimit, and SybilInfer to
the community detection algorithm, we use the same experi-
mental methodology as the most recent proposal, SybilInfer.
Speciﬁcally, we use a 1,000 node scale-free topology [4] for
the non-Sybil part of the network. Among this set of non-
Sybil nodes, a small fraction (10%) of the nodes are com-
promised by an adversary and become Sybil nodes. These
100 malicious nodes are chosen uniformly at random. These
nodes then introduce additional Sybil identities into the net-
work, which form a scale free topology among themselves us-
ing the same parameters as non-Sybil region. We vary the
number of introduced nodes from 30 to 1,000, and average
the results over 100 experimental runs.
We present the results of this experiment in Figure 7.
We make two important observations: First, SybilInfer and
community detection perform well, with improving accuracy
as more Sybils are added. The reason for this increase is that
the Sybil region becomes larger and, therefore, easier distin-
guish from the non-Sybil region. Second, both SybilGuard
and SybilLimit perform less well than the other two schemes.
368)
’
A
(
e
v
r
u
c
C
O
R
r
e
d
n
u
a
e
r
A
 1
 0.8
 0.6
 0.4
 0.2
 0
 0
Random
SG
SL
SI
CD
 200
 400
 600
 800
 1000
Number of additional Sybil nodes
Figure 7: Accuracy for Sybil defense schemes, as
well as community detection (CD), on the synthetic
topology as we vary the number of additional Sybil
identities introduced by colluding entities.
This eﬀect is because the number of Sybil nodes added is
lower than the bound enforced by these two schemes, as was
observed in the evaluation on SybilInfer [7]. In more detail,
the Sybil region is connected to the non-Sybil region by 789
attack edges on the average; SybilGuard and SybilLimit en-
sure that no more that O(log N ) nodes will be accepted per
attack edge, where N is the number of nodes in the network.
Since we only add a maximum of 1,000 Sybil nodes, neither
of these schemes marks many nodes as Sybils.
We now evaluate these schemes on a real-world social net-
work. Speciﬁcally, we repeat this experiment on the Face-
book graduate student network from before. This network
has similar density as the synthetic network, but is only half
the size. The results of this experiment are presented in Fig-
ure 8. As we can see, the community detection algorithm
performs favorably compared to the explicit Sybil defense
schemes, and all become more accurate as more Sybils are
added. A careful reader may note that the absolute accu-
racy of all schemes (community detection included) is sig-
niﬁcantly lower than that observed above in Figure 7. The
underlying reason for this lower performance is a structural
characteristic of the Facebook network that makes it inher-
ently harder to distinguish Sybils from non-Sybils. We ex-
plore this limitation in greater detail in Section 5.
4.2.3 SumUp
Recall that SumUp provides a Sybil-resilient voting service.
To do so, SumUp deﬁnes a voting envelope wherein the links
are assigned a capacity so that all votes from within the enve-
lope can be collected. Outside this envelope, votes are only
collected if the voter can ﬁnd an path with capacity to the
)
’
A
(
e
v
r
u
c
C
O
R
r
e
d
n
u
a
e
r
A
 1
 0.8
 0.6
 0.4
 0.2
 0
 0
Random SG
SL
SI
CD
 50
 100
 150
 200
 250
 300
 350
 400
Number of additional Sybil nodes
Figure 8: Accuracy in the Facebook network as we
vary the number of additional Sybil identities intro-
duced by colluding entities.
vote collector (i.e., the trusted node). In order to apply com-
munity detection, we replace the process that determines the
voting envelope with a community detection algorithm, pick
the community with the lowest conductance value to be the
envelope, and unconditionally accept all votes from nodes
within this envelope. For nodes outside the envelope, we
assign all other links to have capacity one, and we collect
their votes if they can ﬁnd a path with weight to any node
within the envelope. This diﬀerence is necessary since we
don’t assign weights to links within the envelope, as SumUp
does.
We evaluate and compare the community detection
scheme against SumUp on three diﬀerent datasets: Ad-
vogato, Astrophysics, and YouTube. We follow the same
methodology used in the original SumUp evaluation [29]:
for each network, we inject 100 attack edges by inserting 10
Sybil nodes with links to 10 other uniformly randomly cho-
sen non-Sybil nodes. In order to cast bogus votes, each Sybil
node is further attached to a large number of Sybil identities
by a single link each. As in the original evaluation, we ran-
domly select a vote collector and randomly choose a subset
of non-Sybils as voters. We plot the average statistics over
ﬁve experimental runs for both SumUp and the community
detection algorithm.
To evaluate the accuracy of these schemes, we must deﬁne
a new metric. This is because SumUp does not classify all
nodes as Sybil or non-Sybil (needed for A′), but rather, only
those nodes which issue votes. Since subsets of both the non-
Sybil and Sybil nodes are issuing votes, ideally, the scheme
would only count the non-Sybil votes. Thus, our metric
should penalize the under counting of non-Sybil votes, as
well as the counting of any Sybil votes. The metric we deﬁne,
vote accuracy, is expressed as the number of non-Sybil votes
counted divided by the sum of the number of non-Sybil votes
issued and the number of Sybil votes counted. Vote accuracy
ranges between 0 and 1, where higher values represent better
performance.
Figure 9 presents the results of this experiment, as we
vary the number of non-Sybil voters (Sybils try to vote as
 SU
 CD
 1
 0.8
 0.6
 0.4
 0.2
 0
 1
 0.8
 0.6
 0.4
 0.2
 0
 1
 0.8
 0.6
 0.4
 0.2
y
c
a
r
u
c
c
a
e
t
o
V
YouTube
Advogato
Astrophysics
 0
 0.001
 0.01
 0.1
 1
Number of non-Sybil voters / Total non-Sybil nodes
Figure 9: Vote accuracy of SumUp and community
detection on three networks.
369often as they can). The most salient result is that the ac-
curacy for SumUp varies widely across the three networks;
this is a direct result of using the envelope technique.
In
certain networks, one or more of the Sybil nodes is accepted
into the envelope, and a large number of malicious votes are
cast. The results for the community detection algorithm are
signiﬁcantly more stable, producing useful results once the
number of non-Sybil voters rises above 1%.
4.3 Implications
We began this section by observing that, since all Sybil de-
fense schemes appeared to be identifying local communities,
explicit community detection algorithms may be able to de-
fend against Sybils as well. It is interesting to note—even
without changing the experimental setup under which exist-
ing schemes were evaluated—our simple community detec-
tion algorithm gives comparable results to existing schemes.
Our results have both positive and negative implications for
future designers of Sybil defense schemes.
On the positive side, our results demonstrate that there is
a opportunity to leverage the large body of existing work on
community detection algorithms for Sybil defense [10]. Prior
work on community detection provides a readily available
source of sophisticated graph analysis algorithms around
which researchers could improve existing schemes and design
new approaches. On the negative side, relying on commu-
nity detection for performing Sybil defense fundamentally
limits the ability of these schemes to ﬁnd Sybils in many
real-world graphs. We explore these limitations in the next
section.
5. LIMITATIONS OF SYBIL DEFENSE
In the previous sections, we showed that Sybil defense
schemes work by eﬀectively identifying nodes within tightly-
knit communities around a given trusted node as more trust-
worthy than those farther away. In this section, we investi-
gate the limitations of relying on community structure of the
social network to ﬁnd Sybils. More speciﬁcally, we explore
how the structure of the social network impacts the per-