In this paper, we focus on local community detection schemes [3], which do not require a comprehensive view of the entire network. Most local approaches begin with one or more seed nodes and iteratively add neighboring nodes until a sufficiently strong community is identified. For example, Mislove's algorithm [21] incrementally adds nodes that improve the normalized conductance (a metric closely related to conductance) at each step, stopping when the conductance metric reaches an inflection point. For a detailed survey of local community detection algorithms, we refer the reader to Fortunato's recent survey paper [10], which discusses numerous algorithms for community detection.

Given the extensive body of work on community detection, theoretically, any of these algorithms could be used as the ranking algorithm. For the evaluation presented in this section, we selected Mislove's algorithm [21], but with the conductance metric from Section 3.1.2. We chose this algorithm due to its conceptual simplicity, as it greedily minimizes conductance. However, our choice is not definitive, and other algorithms may perform better, especially since different community detection algorithms have been shown to excel in different networks [15]. Our primary goal here is to investigate how well off-the-shelf community detection algorithms can identify Sybils.

To use community detection for Sybil identification, we need to generate a node ranking similar to other schemes. To achieve this, we run Mislove's community detection algorithm and record the nodes added at each step to minimize conductance. We modify the algorithm to continue running until all nodes are added, rather than stopping at a local trough. This results in a node ranking that we can compare against other schemes.

### 4.2 Evaluating Sybil Detection

We now evaluate the community detection algorithm against existing Sybil defense schemes. When comparing against each scheme, we use experimental settings similar to those described in the original papers. This required us to split our evaluation into two sections: one for SybilGuard, SybilLimit, and SybilInfer, and another for SumUp. The split is necessary because SumUp was originally evaluated for its ability to limit the number of votes Sybil identities can place, rather than for its accuracy in detecting Sybil nodes. Thus, the experimental settings for evaluating SumUp differ significantly from those of the other schemes.

A summary of the datasets used in our evaluation is shown in Table 2. In addition to the datasets from the previous section, we examine YouTube, consisting of the social network of users on YouTube [20], and Advogato, consisting of the trust network between free software developers [1].

| Network          | Nodes     | Links       | Avg. Degree |
|------------------|-----------|-------------|-------------|
| YouTube [20]     | 446,181   | 1,728,938   | 7.7         |
| Astrophysicists [25] | 14,845  | 119,652     | 16          |
| Advogato [1]     | 5,264     | 43,027      | 16          |
| Facebook [21]    | 514       | 3,313       | 13          |

#### 4.2.1 Measuring Sybil Detection Accuracy

To measure the accuracy of the various schemes in identifying Sybils, we use the Area under the Receiver Operating Characteristic (ROC) curve (A′). This metric represents the probability that a Sybil defense scheme ranks a randomly selected Sybil node lower than a randomly selected non-Sybil node [9]. The A′ metric ranges from 0 to 1, where 0.5 represents a random ranking, higher values indicate better performance, and 1 represents perfect non-Sybil/Sybil ranking. Values below 0.5 indicate an inverse ranking, where Sybils tend to be ranked higher than non-Sybils. A key advantage of this metric is that it is independent of the number of Sybil and non-Sybil nodes, as well as the cutoff value, making it comparable across different experimental setups and schemes.

#### 4.2.2 SybilGuard, SybilLimit, and SybilInfer

For comparing SybilGuard, SybilLimit, and SybilInfer to the community detection algorithm, we use the same experimental methodology as the most recent proposal, SybilInfer. Specifically, we use a 1,000-node scale-free topology [4] for the non-Sybil part of the network. Among this set of non-Sybil nodes, a small fraction (10%) of the nodes are compromised by an adversary and become Sybil nodes. These 100 malicious nodes are chosen uniformly at random and introduce additional Sybil identities into the network, forming a scale-free topology among themselves using the same parameters as the non-Sybil region. We vary the number of introduced nodes from 30 to 1,000 and average the results over 100 experimental runs.

The results of this experiment are presented in Figure 7. Two important observations can be made: First, SybilInfer and community detection perform well, with increasing accuracy as more Sybils are added. This is because the Sybil region becomes larger and easier to distinguish from the non-Sybil region. Second, both SybilGuard and SybilLimit perform less well than the other two schemes. This effect is due to the number of Sybil nodes added being lower than the bound enforced by these two schemes, as observed in the evaluation of SybilInfer [7]. In detail, the Sybil region is connected to the non-Sybil region by 789 attack edges on average; SybilGuard and SybilLimit ensure that no more than O(log N) nodes will be accepted per attack edge, where N is the number of nodes in the network. Since we only add a maximum of 1,000 Sybil nodes, neither of these schemes marks many nodes as Sybils.

Next, we evaluate these schemes on a real-world social network, specifically the Facebook graduate student network. This network has a similar density to the synthetic network but is only half the size. The results of this experiment are presented in Figure 8. As seen, the community detection algorithm performs favorably compared to the explicit Sybil defense schemes, and all become more accurate as more Sybils are added. However, the absolute accuracy of all schemes, including community detection, is significantly lower than that observed in the synthetic network. The underlying reason for this lower performance is a structural characteristic of the Facebook network that makes it inherently harder to distinguish Sybils from non-Sybils. We explore this limitation in greater detail in Section 5.

#### 4.2.3 SumUp

SumUp provides a Sybil-resilient voting service by defining a voting envelope wherein links are assigned a capacity so that all votes from within the envelope can be collected. Outside this envelope, votes are only collected if the voter can find a path with sufficient capacity to the vote collector (i.e., the trusted node). To apply community detection, we replace the process that determines the voting envelope with a community detection algorithm, select the community with the lowest conductance value to be the envelope, and unconditionally accept all votes from nodes within this envelope. For nodes outside the envelope, we assign all other links a capacity of one and collect their votes if they can find a path with weight to any node within the envelope. This difference is necessary since we do not assign weights to links within the envelope, as SumUp does.

We evaluate and compare the community detection scheme against SumUp on three different datasets: Advogato, Astrophysics, and YouTube. We follow the same methodology used in the original SumUp evaluation [29]: for each network, we inject 100 attack edges by inserting 10 Sybil nodes with links to 10 other uniformly randomly chosen non-Sybil nodes. Each Sybil node is further attached to a large number of Sybil identities by a single link each. We randomly select a vote collector and a subset of non-Sybils as voters. We plot the average statistics over five experimental runs for both SumUp and the community detection algorithm.

To evaluate the accuracy of these schemes, we define a new metric called vote accuracy, expressed as the number of non-Sybil votes counted divided by the sum of the number of non-Sybil votes issued and the number of Sybil votes counted. Vote accuracy ranges between 0 and 1, where higher values represent better performance.

Figure 9 presents the results of this experiment, varying the number of non-Sybil voters (Sybils try to vote as often as they can). The most salient result is that the accuracy for SumUp varies widely across the three networks, a direct result of using the envelope technique. In certain networks, one or more Sybil nodes are accepted into the envelope, and a large number of malicious votes are cast. The results for the community detection algorithm are significantly more stable, producing useful results once the number of non-Sybil voters rises above 1%.

### 4.3 Implications

We began this section by observing that, since all Sybil defense schemes appear to be identifying local communities, explicit community detection algorithms may also be able to defend against Sybils. It is interesting to note that, even without changing the experimental setup under which existing schemes were evaluated, our simple community detection algorithm gives comparable results to existing schemes. Our results have both positive and negative implications for future designers of Sybil defense schemes.

On the positive side, our results demonstrate that there is an opportunity to leverage the extensive body of existing work on community detection algorithms for Sybil defense [10]. Prior work on community detection provides a readily available source of sophisticated graph analysis algorithms that researchers can use to improve existing schemes and design new approaches. On the negative side, relying on community detection for Sybil defense fundamentally limits the ability of these schemes to find Sybils in many real-world graphs. We explore these limitations in the next section.

### 5. Limitations of Sybil Defense

In the previous sections, we showed that Sybil defense schemes work by effectively identifying nodes within tightly-knit communities around a given trusted node as more trustworthy than those farther away. In this section, we investigate the limitations of relying on the community structure of the social network to find Sybils. More specifically, we explore how the structure of the social network impacts the performance of Sybil defense schemes.