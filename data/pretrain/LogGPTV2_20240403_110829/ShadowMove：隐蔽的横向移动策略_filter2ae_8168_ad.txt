###  2）FTPShadowMove：劫持FTP会话
本研究开发了可以劫持Windows 10和Ubuntu
18.04上已建立的FTP连接的原型系统。它们在ftp的默认安装下工作，不需要任何提升的特权。它们使攻击者无需身份验证即可将文件下载和上传到远程FTP服务器。
在FTP协议中，客户端使用一个TCP连接将命令发送到服务器并从服务器接收相应的响应。此连接称为命令通道。客户端还使用另一个TCP连接来发送或接收数据，例如文件内容。该连接称为数据通道。客户端可以为给定的命令通道打开多个数据通道。仅在建立命令通道时才需要身份验证，这意味着客户端无需重新身份验证即可创建新的数据通道。劫持命令通道的攻击者可以向服务器发送请求以打开一个自己的新数据通道，从而避免与现有数据通道上正在传输的客户端内容发生任何冲突。但是，攻击者仍应采取策略来防止共享命令通道中的条件竞争。请注意，由于合法客户端也可能会打开新数据通道，因此无法仅通过监视新数据通道的创建来检测攻击。
FTP客户端可以通过两种方式请求创建新的数据通道：主动FTP和被动FTP。在活动的FTP中，客户端向服务器发送端口命令，以指定服务器需要重新建立连接的端口。在被动FTP中，客户端将PASV命令发送到服务器，要求服务器侦听客户端可以连接的端口以创建新的数据通道。简而言之，这两种模式之间的区别在于谁发起了新的TCP连接：主动模式下的服务器和被动模式下的客户端应该分别连接到客户端和服务器指定的端口。在原型中，实现了被动FTP进行演示。但是，主动FTP也可以轻松实现。
在被动FTP中，客户端将PASV命令发送到服务器，服务器通过提供有关客户端必须连接到的端点（包括IP地址和端口）的信息来进行响应，以创建新的数据通道。
PASV在RFC-959中记录。
**实验设置：**
在互联网上托管的基于Linux的虚拟专用服务器上部署了vsftpd服务器。对于合法客户端，使用ftp命令和Windows资源管理器连接到已配置的服务器。服务器上的匿名登录已被阻止，因此客户端需要发送有效的用户名和密码才能连接到该用户。从下图上半部分的演示视频中可以看到，客户端与服务器交换了几条消息，以便登录到服务器。之后，以与ftp客户端相同的用户帐户启动FTPShadowMove。
FTPShadowMove
PoC首先通过复制相应的套接字来劫持FTP连接，然后发送若干命令以将二进制文件上传到服务器上的特定目录。上图的下半部分显示了特定的命令（例如CWD /
files /）和服务器响应。具体来说，可以看到服务器在端口45307上响应54.36.162.222（即176*256 + 251）。然后，FTP
ShadowMove请求在服务器上上载名为PoC2.txt的文件。从服务器收到响应代码150后，FTPShadowMove打开了到指定远程端点的TCP连接，并将文件的内容发送到打开的连接。服务器将文件解释为二进制内容，并将其存储在服务器上的/files/PoC2.txt中。
在Ubuntu
18.04上的原型使用与上述相同的FTP命令，有关其工作原理的视频片段，请参见
。
在原型系统中，仅使用了一些FTP命令。但是，攻击者还可以使用许多其他FTP命令。具体来说，FTP
SITE命令允许用户通过主机上的FTP服务器执行有限数量的命令。无需进一步的身份验证即可执行该命令。可能执行的命令因系统而异，一些有用的命令包括EXEC和CHMOD。
EXEC命令在服务器上执行提供的可执行文件，可用于启动恶意软件。幸运的是，在许多系统上都未实现SITE命令，如果可能，还建议在FTP服务器上禁用SITE命令。
###  3）SQLShadowMove：劫持Microsoft SQL会话
已经确认，可以（1）劫持Microsoft SQL连接以将恶意软件可执行文件从SQL客户端计算机上载到SQL Server，以及（2）在SQL
Server上执行恶意软件。
实验设置：使用Microsoft SQL Server Management Studio 17作为合法的SQL客户端，并使用Microsoft SQL
Server
14.0.1000.169版作为服务器。在SQL服务器上配置一个可以创建数据库和表的用户。首先启动SQL客户端并登录到服务器。然后，运行概念验证SQLShadowMove。确认PoC在Microsoft
SQL的默认安装和常规应用程序设置下有效。
SQL劫持方案需要满足一些先决条件才能成功工作：（1）流量未加密，（2）SQL Server上有一个可由SQL
Server进程写入的文件夹，（3）SQL客户端已成功通过SQL身份验证服务器（4）SQL客户端承担着允许在SQL服务器上创建表的角色。
通常可以满足上述前提条件。默认情况下，Microsoft SQL通信未加密，并且％TEMP％文件夹始终可由SQL Server上的任何进程写入。而且，SQL
Server几乎是无状态的。客户端和服务器使用TDS（表格数据流）协议进行通信。尽管TDS标头中的几个字段是为维护某些状态而设计的，但它们是可选的或当前实现未使用。例如，TDS数据包头中的SPID字段是服务器上与当前连接相对应的进程ID。如果严格检查此ID，则攻击者必须在构造恶意数据包之前以某种方式学习它。不幸的是，此字段不是必需的，服务器可接受的值为0x0000。同样，还定义了两个字段，但将其忽略：PacketID和Window。
TDS数据包有几种类型，与本研究的攻击最相关的类型是“批处理客户端请求”类型，其有效载荷可以是任何SQL语句的Unicode编码，并且数据包头中没有校验和。这使得捕获真实的批处理客户端请求数据包然后将其用作模板以通过将负载替换为新的Unicode字符串来创建新的恶意请求变得很简单。在例子中，这些字符串对应于一系列SQL语句。
SQLShadowMove首先检测由SQL客户端进程创建的TCP连接，然后复制相应的套接字。然后，它使用复制的套接字将一系列批处理客户端请求数据包发送到SQL
Server，并从服务器接收任何响应数据包。这些批处理客户端请求数据包的有效负载由SQL脚本组成，这些脚本将可执行文件上载到SQL
Server并执行该文件。
具体来说，SQL脚本首先在SQL
Server上创建一个表，然后将可执行文件中的字节块插入表中。最后，它们调用bcp命令将表的内容导出到服务器上的常规文件，从而还原原始的可执行文件。
SQL脚本的伪代码如下图所示。
使用SQL服务器上的可执行文件，原型可以通过SQL语句进一步运行它。为了通过实验确认SQLShadow
Move的可行性，开发了一个简单的Windows应用程序（名为notepad.exe）来表示一部分“恶意软件”。此应用程序在与应用程序可执行文件相同的文件夹中创建一个文件（名为notepad.txt），并将当前日期和时间写入该文件。然后，生成SQL脚本，以将简单的“恶意软件”上载到SQL
Server上的％T EMP％\ notepad.exe并运行它。运行SQLShadow Move的概念验证后，可以直观地确认SQL
Server上首先出现notepad.exe，然后出现notepad.txt，并且其内容与SQL
Server上的时间和日期匹配。有关SQLShadowMove的工作原理的视频剪辑，请参见
。
请注意，为了运行bcp命令或可执行文件，必须在SQL
Server上启用xp_cmdshell。但是，这对于原型来说并不是障碍，因为SQL脚本在使用xp_cmdshell之前先启用它。
###  4）WinRMShadowMove：基于WinRM的远程执行
Windows远程管理（WinRM）是Windows的一项功能，允许管理员远程运行管理脚本。已经确认，可以劫持WinRM会话以在远程计算机上运行恶意软件。假设远程计算机正在运行WinRM服务，并且恶意软件已上传到远程计算机，并且只需要启动它即可。
**(a)WinRM协议简介**
WinRM协议使用HTTP与远程服务器进行通信。要使用远程计算机进行身份验证，WinRM具有六个身份验证机制：基本，摘要，Kerberos，协商，证书和CredSSP。默认情况下，它使用协商。
WinRM客户端首先通过WinRM服务器进行身份验证。验证后，WinRM客户端从服务器接收一个shellID，该ID将在以后的通信中使用。除了shellID之外，每个请求消息中还有一些其他ID。
messageID用于将响应消息与相应的请求消息配对，并且在响应消息中，请求消息ID显示为“
RelatesTo”字段。下图说明了WinRM会话期间的消息交换。
**(b)实验设置**