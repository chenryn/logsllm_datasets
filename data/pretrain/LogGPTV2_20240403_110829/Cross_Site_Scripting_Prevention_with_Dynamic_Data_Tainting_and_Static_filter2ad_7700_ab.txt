hash, host, hostname, href, pathname, port, protocol,
search, toString
defaultStatus, status
Table 1. Initial sources of taint values.
1: var cookie = document.cookie;
2: // "cookie" is now tainted
3: var dut = "";
4: // copy cookie content to dut
5: for (i=0; i < cookie.length; i++) {
6:
7:
8:
9:
10:
11: }
12: // dut is now copy of cookie
13: document.images[0].src =
case ’a’: dut += ’a’;break;
case ’b’: dut += ’b’;break;
...
switch (cookie[i]) {
}
"http://badsite/cookie?" + dut;
Figure 2. Attack using direct control depen-
dency.
ever the execution of an operation depends on the value of
a tainted variable (e.g., if an operation is guarded by an if-
branch that tests a tainted variable), the result of this opera-
tion is tainted. Figure 2 provides an example to illustrate the
importance of direct control dependencies. In this example,
the attacker copies the cookie from the variable cookie
to the variable dut using a for-loop and a switch statement
for any character in cookie.
If only data dependencies
were covered, the dut variable would not be tainted af-
ter the loop. This is because the character literals assigned
to it in the switch statement are not tainted. When direct
control dependencies are considered, however, everything
in the scope of the switch statement is tainted (because a
tainted value is tested in the head of the switch statement).
In addition to the tracking of taint information inside the
JavaScript engine, tainted data stored in and retrieved from
the document object model (DOM) tree [29] of the HTML
page has to retain its taint status. This is required to prevent
laundering attempts in which an attacker temporarily stores
tainted data in a DOM tree node to clear its taint status.
The next sections discuss the information ﬂow in a typ-
ical script execution. We will ﬁrst show what kind of in-
formation is considered sensitive in Section 3.1. Then, Sec-
tion 3.2 presents how tainted data is propagated by our sys-
tem when a script is run.
3.1 Sensitive Data Sources
For our system, we have to identify those data sources
that are considered sensitive. The reason is that this data
must be initially tainted so that its use by scripting code can
be appropriately tracked. A data source is considered sen-
sitive when it holds information that could be abused by an
adversary to launch attacks or to learn information about a
user (e.g., cookies or the URL of the visited web page). A
list of tainted sources used by our system is provided in Ta-
ble 1. Since this list was provided by Netscape [21], we
believe it to be fairly complete. In case that additional sen-
sitive data sources are discovered, our system can be easily
extended to handle these as well.
Sensitive sources are directly tainted in the web browser.
Thus, whenever a sensitive data element is accessed by a
JavaScript program, we have to ensure that the result is re-
garded as tainted by the JavaScript engine as well. Figure 4
shows the interaction between the JavaScript engine and the
browser when a script is executed.
In this example, the
HTML page contains some embedded JavaScript code (1)
that accesses the cookie of the document (which is a sensi-
tive source). The script is parsed and compiled into a byte-
code program (2) that is then executed by the JavaScript en-
gine. When the engine executes the statement that attempts
to obtain the cookie property from the document object
(3), it generates a call to the implementation of the docu-
ment class in the browser (4). Possible parameters of the
call are converted from values understood by the JavaScript
engine to those deﬁned in the browser (5). Then, the cor-
responding method in the browser, which implements the
document.cookie method, is called (6). In this method,
the access to a sensitive source is recognized and the value
is tainted appropriately (7). This value is then converted
into a value with a type used by the JavaScript engine (8).
This conversion has to retain the taint status of the value.
Thus, the result of the operation that obtains the cookie
property (variable x) is tainted (9).
1: var arr = [ ]; // arr.length = 0
2: if (document.cookie[0] == ’a’) {
3:
4: }
5: if (arr.length == 1) { y = ’a’; }
arr[0] = 1;
3.2 Taint Propagation
Figure 3. Array element assignment.
JavaScript programs that are part of a web page are
parsed and compiled into an internal bytecode representa-
tion. These bytecode instructions are then interpreted by the
JavaScript engine. To track the use of sensitive information
by JavaScript programs, we have extended the JavaScript
engine. More precisely, we have extended the semantics of
the bytecode instructions so that taint information is cor-
rectly propagated. The JavaScript bytecode instructions can
be divided into the following broad classes of operations:
• assignments;
• arithmetic and logic operations (+, -, &, etc.);
• control structures and loops (if, while, switch,
for in);
• function calls and eval.
When an instruction is executed, some (or all) of its
operands could be tainted. Thus, for each instruction, there
has to be a rule that deﬁnes under which circumstances the
result of an operation has to be tainted (or what other kind
of information is affected by the tainted data).
3.2.1 Assignments
In an assignment operation, the value of the left-hand side
is set. If the right-hand side of the assignment is tainted,
then the target on the left-hand side is also tainted. The
JavaScript engine has different instructions for assignment
to single variables, function variables, function arguments,
array elements, and object properties.
In some cases, the variable that is assigned a tainted
value is not the only object that must be tainted. For ex-
ample, if an element of an array is tainted, then the whole
array object needs to be tainted as well. This is necessary to
ensure that functions and methods that operate on the array
as a whole, such as arr.length, return a tainted value.
Consider the example in Figure 3. On Line 1, a new array
is created with an initial length of 0. Only if the ﬁrst char-
acter of the cookie is an ’a’, a value is assigned to the ﬁrst
element of the array on Line 3. In this example, the length
of the array on Line 5 is 1 if the ﬁrst character of the cookie
is an ’a’, otherwise it is still 0. On Line 5, a new variable
is set to ’a’, depending on the length of the array. When
extending this method to cover all possible characters (e.g.,
’a’ - ’z’, ’A’ - ’Z’, ’0’ - ’9’), the attacker could try to copy
the ﬁrst character of the cookie to a new value, thereby at-
tempting to bypass the tainting scheme. However, in our
approach, we do not only taint the ﬁrst element on Line 3,
but also the array object itself. As a result, the variable y
on Line 5 is tainted. Likewise, if a property of an object
is set to a tainted value, then the whole object needs to be
tainted. The reason is that the property could be new, and in
this case, the number of properties has changed. This could
allow an attacker to leak information in a similar fashion.
3.2.2 Arithmetic and Logic Operations
Operations in JavaScript can have one (e.g., unary -) or
more operands (e.g., multiplication *). JavaScript, similar
to Java bytecode, is a stack-based language. That is, in-
structions that perform arithmetic or logic operations ﬁrst
pop the appropriate number of operands from the stack and
then push back the result. The result is tainted if one of the
used operands is tainted.
3.2.3 Control Structures and Loops
Control structures and loops are used to manipulate the ex-
ecution ﬂow of a program and to repeat certain sequences
of instructions (e.g., if constructs, while loops, and
try-catch-finally blocks). If the condition of a con-
trol structure tests a tainted value, a tainted scope is gener-
ated that covers the whole control structure. The results
of all operations and assignments in the scope are tainted.
Note that introducing such a scope does not immediately
taint all contained variables. Instead, a variable is dynami-
cally tainted only when its value is modiﬁed inside a scope
during the actual execution of the program. This is used
to correctly handle direct control dependencies and prevent
attempts of laundering tainted values by copying them to
untainted values, as illustrated in Figure 2. In this example,
a tainted value (cookie.length) is used in the termina-
tion condition of the for-loop on Line 4. Thus, a scope
from Line 4 to Line 10 is generated. An additional scope is
generated from Line 5 to 9, because the switch-condition
is tainted. When processing operations within a tainted
scope, the results of all operations are tainted, regardless
of the taint status of any involved operands. Therefore, ap-
pending a character to the dut variable (e.g., on Line 6 in
Figure 2) taints the dut variable. Note that this would not
be the case if only data dependencies were considered.
Figure 4. A JavaScript program accesses a sensitive source.
If-else statements generate scopes for both branches
when the condition is tainted.
In do-while loops, the
scope is not generated until the tainted condition is tested.
As a result, the ﬁrst time the block is executed, no scope is
generated. If the tested condition is tainted, a new tainted
scope covering the repeated block is generated, which re-
mains until the loop is left. In the try-catch-finally
statement, a scope is generated for the catch-block when
the thrown exception object is tainted. The remaining con-
trol ﬂow statements are handled analogously.
3.2.4 Function Calls and eval
Functions are tainted if they are deﬁned in a tainted scope.
For example, function x deﬁned on Line 2 of Figure 5 is
tainted, since a tainted scope has been created from Line 1
to 3 due to the tainted condition on Line 1. Everything
that is done within or returned by a tainted function is
also tainted. When called with tainted actual parameters,
the corresponding formal parameters of the function are
tainted. On Line 7, the function func is called with a
tainted actual parameter, which results in a tainted formal
parameter (par) on Line 5. This tainted parameter is re-
turned, and, because of this, the result of func on Line 7
is tainted as well. Lines 9 and 11 in Figure 5 show that
arguments.length is tainted if one of the arguments
is tainted. The second parameter on Line 11 is tainted, and
therefore, the returned value on Line 9 is tainted, which re-
sults in a tainted variable x on Line 11.
The eval function is special because its argument is
treated as a JavaScript program and executed. If eval is
called in a tainted scope or if its parameter is tainted, a scope
x = function () { return ’a’; };
// x is a tainted function
1: if (document.cookie[0] == ’a’) {
2:
3:
4: }
5: function func (par) { return par; }
6: // call with a tainted parameter:
7: y = func(document.cookie[0]);
8: function count() {
9:
return arguments.length - 1;
10: }
11: x = count(0, document.cookie[0]);
Figure 5. Function tainting.
1: document.getElementById("testtag").innerHTML =
document.cookie;
2: var dut = document.getElementById("testtag").innerHTML;
3: // dut is tainted
Figure 6. DOM tree example.
around the executed program is generated, and we conser-
vatively taint every operation in this program.
3.2.5 Document Object Model (DOM) Tree
An attacker could attempt to remove the taint status of a data
element by temporarily storing it in a node of the DOM tree
and retrieving it later (see Figure 6). To prevent laundering
of data through the DOM tree, taint information must not
get lost when leaving the JavaScript engine. To this end,
the object that implements a DOM node is tainted every
time a JavaScript program stores a tainted value into this
node. When the node is accessed later, the returned value is
tainted.
4 Static Data Tainting
The main strength of the dynamic approach described
so far is that it is capable of tracking the ﬂow of sensitive
values through data dependencies in an efﬁcient and pre-
cise way. Unfortunately, as discussed in [7] and [27], dy-
namic techniques cannot be used for the detection of all
kinds of control dependencies. For example, consider the
attack script shown in Figure 7. This script exploits an indi-
rect control dependency. On Lines 1 and 2, the variables x
and y are both initialized to false. On Line 3, the attacker
tests the user’s cookie for a speciﬁc value. First, let us as-
sume that the attacker was lucky, and that the user’s cookie
indeed holds the tested value abc. In this case, Line 4 is
executed, setting x to true. At the same time, our modi-
ﬁed JavaScript engine taints x. Variable y keeps its false
value, since the assignment on Line 6 is not executed. Also,
y does not get tainted: Remember from Section 3.2.3 that
even though the generated scope covers both branches of
the if construct (Lines 3 to 7), dynamic tainting occurs
only along the branch that is actually executed. Since y has
not been modiﬁed, this means further that the condition on
y (Line 11) evaluates to true. As y is not tainted, no tainted
scope is generated for this if construct, and the attacker is
free to issue a request at this point in the program, carrying
the information that the cookie holds the exact value abc.
Analogously, in case of the more likely event that the at-
tacker does not guess the exact cookie value, he can at least
send a request indicating that the cookie does not hold this
value, again leaking sensitive information. A more sophisti-
cated script for cookie stealing would, for instance, employ
a binary search on the cookie value instead of direct equal-
ity tests. The reason why this attack is able to circumvent
dynamic protection techniques is that there exists a correla-
tion between x and y that is encoded into the control ﬂow.
If some condition on the cookie value holds, x is set to true,
while y remains false, whereas otherwise, x is false and y
is true. In either case, only one of these variables is tainted
dynamically, and hence, the other, untainted variable can
be used to leak information. To cover both direct and in-
direct control dependencies, all possible program paths in
a scope need to be examined. Unfortunately, this cannot be
provided by purely dynamic methods. Therefore, to guaran-
tee that no information can be leaked using indirect control
dependencies (that is, to provide a noninterference [8] guar-
antee), static analysis is necessary. The static analysis must
ensure that all variables that could receive a new value on
any program path within the tainted scope are tainted. This
is necessary because “ any variable or data structure must be
assumed to contain conﬁdential information if it might have
been modiﬁed within [a tainted scope]” [27]. Using both
static and dynamic analysis, we can combine the strengths
x = true;
1: x = false;
2: y = false;
3: if (document.cookie == "abc") {