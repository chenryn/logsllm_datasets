### 优化后的文本

#### 图8：延迟攻击检测性能
- **(a) 空间异常检测**
- **(b) 时间异常检测**
- **(c) 卡尔曼滤波器检测**

在空间异常检测中，仅使用最近的邻居观测值来计算质心；而在时间异常检测中，使用所有先前的观测值来计算质心。

### 4.3.2 恶意攻击
在网络坐标系统中，恶意节点可以谎报其坐标和延迟给其他节点。它可以任意生成伪造的坐标，并且可以夸大其对其他节点的延迟。由于不可能穷尽所有攻击，我们系统地设计了一组攻击，以测试系统的不同方面。攻击集包括六种攻击：**偏移攻击、隔离攻击、膨胀攻击、缩小攻击、振荡攻击和延迟攻击**。我们评估了现有统计检测机制在这几种攻击中的性能。由于篇幅限制，在本文中我们只讨论两种简单攻击的最有趣结果。完整的实验结果可以在技术报告[34]中找到。

**偏移攻击** - 在偏移攻击中，恶意节点始终在其固定方向上随机移动一定距离，并向其他节点报告移动后的坐标。这种攻击可以模拟正常节点坐标的移动。在我们的实验中，恶意节点将其坐标最多移动300毫秒。

**延迟攻击** - 在延迟攻击中，恶意节点专注于攻击延迟测量。延迟攻击者将延迟随机增加到受害者节点，最多增加300毫秒。延迟攻击者根据夸大的延迟诚实计算其坐标。

我们将这些攻击应用于Vivaldi系统。表1显示了在不同比例的恶意节点下合法节点坐标的中位绝对误差。可以看到，简单的攻击可以显著降低网络坐标的准确性。

### 实验设置
我们设置了仿真实验来研究卡尔曼滤波器和异常检测机制的行为。每个节点随机选择32个邻居，并使用5维欧几里得空间来计算坐标。我们始终注入30%的恶意节点到系统中。虽然30%可能看起来是一个很大的比例，但一个成功的解决方案必须能够容忍大规模攻击。对于异常检测机制，我们使用推荐的检测阈值，空间异常检测为1.5，时间异常检测为4.0。对于卡尔曼滤波器检测机制，检测阈值由卡尔曼滤波器参数计算得出，不同节点的阈值不同。在卡尔曼滤波器实验中，我们随机选择8%的节点作为调查员，这是[10]中推荐的做法。为了监控统计检测程序的演变，我们设置了一个观察池，该池始终记录最近10000次检测的结果。通过这个观察池，我们可以监控假阴性率、假阳性率以及邻居集中恶意节点的比例的动态演变。

### 4.3.3 实验结果
图7展示了所有检测机制在偏移攻击中的性能。在这些图表中，顶部图形绘制了假阴性和假阳性率的演变，底部图形显示了邻居集中恶意节点比例的变化。从这些图表中可以看出，没有任何一种统计检测机制能有效检测偏移攻击者。为了理解这些结果的原因，图9绘制了所有检测机制在好节点和偏移攻击者上的度量分布。我们可以得出两个有趣的观察结果：

1. 由于异常检测中的马氏距离度量是从被攻击的网络坐标中提取的，当恶意节点长时间攻击系统时，度量分布会受到显著影响。从图9 (d) 和 (e) 可以看出，在恶意节点攻击系统2000秒后，空间异常检测和时间异常检测的马氏距离度量显著转移到非常大的值（注意x轴尺度不同）。度量分布的偏移显著影响了异常检测的性能。由于异常检测机制使用固定的阈值来检测恶意节点，而好节点和恶意节点的马氏距离都转移到较大的值，导致假阳性率变得越来越大。最终，异常检测机制变得过于激进，错误地将大多数好节点识别为恶意节点，并在邻居替换过程中引入更多恶意节点。
   
2. 从图9可以看出，从实验开始时，卡尔曼滤波器检测机制使用从可信节点学习的外部参考模型，因此度量分布不会受到恶意攻击的显著影响。

### 图9：偏移攻击检测机制的度量分布
- **(a) 时间0秒的空间异常检测**
- **(b) 时间0秒的时间异常检测**
- **(c) 时间0秒的卡尔曼滤波器检测**
- **(d) 时间2000秒的空间异常检测**
- **(e) 时间2000秒的时间异常检测**
- **(f) 时间2000秒的卡尔曼滤波器检测**

希望这段优化后的文本更加清晰、连贯和专业。如果有任何进一步的修改需求，请告诉我！