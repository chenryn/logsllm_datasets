between Σ/x and Σ∗ x. Lesser τ means lesser variability in Σ,
implying stricter consistency checks. However, a lesser τ may
lead to false alarms, whereas a higher τ may lead to lack of
genuine alarms. τ = 1 allows no margin for variability in Σ.
SIMILARITY INDEX, LINK LOSS AND τ. If two adjacent
switches S n and S n+1 share a link with loss rate ρ, and the
average similarity index for the ﬂow path till S n is Σavg,
then Σn+1 for the next switch in the ﬂow, i.e., S n+1, will be
proportional to the loss rate: Σn+1 ∝ Σavg ∗ (1 − ρ). SPHINX
raises an alarm if Σn+1 is not within the threshold τ. In other
words, SPHINX will not raise an alarm if the following holds
true: 1/τ 
(1)
(2)
(3)
(4)
(5)
(6)
Fig. 5: Example policy to detect ARP poisoning by validating host
H5’s IP/MAC bindings.
Fig. 6: Example policy to detect LLDP spooﬁng by checking if a
link between switches S 1 and S 2 exists on valid ports.
trafﬁc ﬂows, possibly for eavesdropping, thereby allowing a
malicious host to intercept trafﬁc intended for another host.
Malicious hosts along with an accomplice can also initiate
arbitrary ﬂows to fool
the switch and the controller into
installing ﬂow rules that create loops or blackholes in the
network or mount an IP splicing attack. We implement the
attack using a topology of three hosts connected to a switch—
a malicious host A, and two benign hosts B and C. The attack
involves sending spoofed ARP requests ‘Who has B, tell C’
but with A’s MAC address. These malicious ARP requests are
relayed as PACKET_IN messages to the controller, and ultimately
corrupt B’s ARP cache along with the controller’s view of the
topology, which then routes trafﬁc from B (intended for C) to A
instead. We test the attack by sending repeated PING requests
to B from C. Instead of observing the responses at C, we
observed the responses at A. Note that variants of this attack
are possible with any packet triggering a PACKET_IN message,
and not just the ARP packet. This attack works across all the
controllers we tested. Our video demo shows a variant of this
attack for ODL [1].
DETECTION. SPHINX builds a ﬂow graph that maintains and
updates MAC-IP bindings for all hosts in the network along
with a list of possible switch-ports they can be located at.
It extracts this metadata when a PACKET_IN arrives. If any
deviation from these permissible bindings is observed during
a PACKET_IN, SPHINX ﬂags it and raises an alarm. In case the
administrator permits a ﬂagged binding, SPHINX updates its
list accordingly to prevent further alarms. ARP poisoning can
also be detected using custom policies written using SPHINX’s
policy language. Figure 5 shows an example policy that raises
alarms if SPHINX detects a different binding for host H5 in
its metadata store other than as speciﬁed by the policy.
2) Fake topology: We implement the host-based variant of the
attack as described in § III-A, where a single malicious host
tries to create a fake network link, using a linear topology
of three switches X, Y and Z, with server A connected to
switch X, and server B connected to switch Z. Server A sends a
malicious LLDP packet, spooﬁng it to have come from switch
Z. The attack creates a fake unidirectional edge from Z to
X in the controller’s view, which results in recomputation of
routing paths. Our video demo shows a variant of this attack
for ODL [6]. Following the addition of the fake edge, PING
responses from B will not reach A (for the corresponding
PING requests from A to B). While ODL, Floodlight and
Maestro allow the creation of fake unidirectional edges, POX
validates a link only if adjacency is both ways. Thus, except
POX, other controllers can be tricked using a single malicious
end host. For POX, an accomplice will sufﬁce to trick the
controller. Similarly, compromised soft switches can also fool
the controller by sending spoofed LLDP packets.
DETECTION. As described earlier, SPHINX extracts metadata
from PACKET_IN and FEATURES_REPLY messages to build a ﬂow
graph that learns and maintains a view of the topology with
(1)
(2)
(3)
(4)
(5)
(6)
Fig. 7: Example policy to detect controller DoS.
all the active ports per switch. These metadata are validated
against invariants such as the bidirectionality of a network edge
between switches, and the presence of only a single neighbor
per active port at a switch. Thus, the host-switch-port invariant
ensures that no fake edges are ever added to the network.
LLDP spooﬁng can also be detected using custom policies
written using SPHINX’s policy language. Figure 6 shows an
example policy that raises alarms if SPHINX detects different
switch-port bindings for a link between switches S 1 and S 2
in its metadata store other than as speciﬁed by the policy.
NOTE 1. The default ﬂow-speciﬁc invariants provide compre-
hensive detection of unanticipated changes in the topological
and forwarding state behavior over the entire network. In
addition, the policies provide the administrator with control
to specify ﬁne-grained constraints over the ﬂow-speciﬁc topo-
logical and forwarding state of speciﬁc network entities. Thus,
the two mechanisms complement each other.
NOTE 2. While ARP poisoning and LLDP spooﬁng corrupt
the physical topological state, fake IGMP messages from a
malicious host can corrupt the logical topological state. In
§ IX-C, we discuss how malicious entities can spoof logical
topological state and how SPHINX detects against such attacks.
B. Attacks on Data Plane Forwarding
1) Controller DoS: OpenFlow requires the switches to send
complete packets to the controller if the ingress queues are
full. Such control plane ﬂooding may signiﬁcantly increase
the computational load on the controller and even bring it
down. We tested this using Cbench [2] to ﬂood the controller
with high throughput of PACKET_IN messages for installation
of new ﬂows, thereby hampering the normal operation of the
SDN controller. On increasing the number of switches and
hosts in the network, all controllers except Floodlight exhibited
DoS-like conditions, i.e., either the controller breaks down or
the network latency increases to inordinate timescales. Un-
like other controllers, Floodlight throttles incoming OpenFlow
messages from the switches to prevent DoS. However, the
connection of the switches with the controller snaps when a
large number of switches attempt to connect with it.
DETECTION. SPHINX detects control plane DoS attacks on
the SDN controller by observing ﬂow-level metadata to com-
pute the rate of PACKET_IN messages. SPHINX raises an alarm if
this throughput is above the administrator-speciﬁed threshold.
Figure 7 shows an example policy that reports violation if
the PACKET_IN throughput on any link from the switches to the
controller reaches 50 Mbps.
9
(1)
(2)
(3)
(4)
(5)
(6)
Fig. 8: Example policy to detect network DoS.
(1)
(2)
(3)
(4)
(5)
(6)
Fig. 9: Example policy to detect TCAM exhaustion.
2) Network DoS: We tested the four controllers for network
DoS by installing custom rules on two OVSes in our topology,
to direct trafﬁc into a loop and thereby magnify a 1 Mbps ﬂow
between a speciﬁed endpoints such that it completely chokes
a 1 Gbps link. An iperf session between arbitrary hosts across
the choked link yielded a bandwidth of just ∼400 Kbps. We
also observed that the attack completes in sub-second time
intervals for all the controllers.
DETECTION. For every ﬂow, SPHINX periodically updates the
ﬂow graph with byte statistics reported by the switches across
the ﬂow path, and validates this byte consistency with the
intended behavior by monitoring FLOW_MOD messages. Figure 8
shows an example policy to detect if the throughput across any
network link rises above the administrator-speciﬁed threshold
of 100 Mbps. Additionally, SPHINX leverages path- and ﬂow-
level metadata to detect loop formation in the network.
3) TCAM exhaustion: We test the controllers for TCAM
exhaustion attack as described in § III-A using a switch (IBM
RackSwitch G8264 with a TCAM of size 1K) with three hosts
(A, B and C). We repeatedly send exactly 1K ﬂows from host
B, with arbitrary source addresses, to ensure that ﬂow rules
never time out at the switch. Thus, any new ﬂow rule (say those
corresponding to PINGs from A to C) are not installed, thereby
causing a denial of service. The TCAM exhaustion attack
worked for Floodlight, POX and Maestro, which completely
populate the TCAM (as they use source/destination IP pairs