最后，通过检查Wireshark，我们可以看到发送到服务器的最后一个数据包被描述为“对非法NetBIOS名称的会话请求”。
## 了解崩溃
首先，我们将确保我们可以随意重现崩溃。复制Mutiny发送的最后一个数据包或从Wireshark中提取消息在此处是等效的。我们对NetBIOS下面的层不感兴趣，因为我们将创建一个小脚本来通过TCP发送数据包。
从导出的文件中提取原始字节。
    >>> open（“req”）。read（）
    '\ x81 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00'
创建一个简单的python脚本，将有效负载发送到远程服务。请注意，为了清楚起见，我已使用等效的十六进制表示替换了空格。
在产生新的SMB进程（pkill smb && / nova / bin /
smb）后运行该脚本几次，看看会发生什么。我们现在有一种可靠的方法来通过单个请求重现崩溃。
在这种情况下，我们正在处理Wireshark具有解析器的协议，因此我们可以使用该信息来了解协议级别的崩溃原因。显然，发送NetBIOS会话请求（消息类型0x81）会在SMB二进制文件中执行易受攻击的代码路径。
让我们从路由器中提取二进制文件，这样我们就可以在反汇编程序中打开它。将/ nova / bin / smb复制到/ flash / rw /
pckg，以便可以通过FTP访问并下载。
这也是能够使用GDB调试流程的好时机。我喜欢使用PEDA来增强GDB的显示并添加一些有用的命令。
我们打开两个到目标路由器的连接。在一个我们做pkill smb && / nova / bin /
smb以获得实时输出，另一方面我们启动附加到新生成的进程的gdbserver。
最后，我们在测试机器中打开GDB，并使用目标远程IP：PORT连接到调试服务器。
通过执行文件smb来指示GDB我们所附加的二进制文件也很有用。下次连接到调试服务器时，它将尝试解析已加载库的符号。
在调试会话中按c，以便像往常一样继续执行。
运行概念证明将导致服务因SIGSEGV而停止。在这里，我们看到在执行复制操作时取消引用了NULL指针。
现在，我必须承认我做静态分析非常糟糕，特别是涉及C
++程序时。在克服这种限制的蹩脚尝试中，我将尽可能多地依赖于动态分析，在这种特殊情况下，我将依赖Wireshark解剖器提供的信息，该信息可以提供有关协议字段的更多信息。
可以看出，我们发送的NetBIOS会话服务数据包的第一个字节将消息类型设置为会话请求（0x81）。
第二个字节包含标志，在我们的概念验证中将所有位设置为零。
接下来的两个字节表示消息长度，设置为32。
最后，剩余的32个字节称为非法NetBIOS名称。
我们可以假设在某个时刻正在读取此大小，并且由于它是我们发送的唯一消息长度信息，因此可能与漏洞有关。为了测试这个假设，我们将在诸如read和recv之类的常用函数上放置断点，以识别应用程序从套接字读取数据包的位置。
运行脚本后，程序在read（）中断。
我们使用ni导航到下一个指令，并在执行读取系统调用后立即停止。
read的定义如下：
ssize_t read（int fd，void * buf，size_t count）;  
EAX保持读取的字节数，似乎是0x24（36）。这对应于我们之前分析的标头：消息类型为1个字节 - 标志为1个字节 - 消息长度为2个字节 -NetBIOS名称为32个字节。
ECX包含存储数据读取的缓冲区的地址。我们可以使用vmmap $ ecx或vmmap 0x8075068来验证这对应于堆区域。
最后，EDX声明调用读操作从套接字读取最多0x10000字节。
从这里开始，我们可以继续逐步执行并添加观察点，以查看我们的数据会发生什么。
由于Wireshark没有在NetBIOS名称中识别与分析协议相关的任何内容，因此我们将更改有效负载以包含更多可区分的字符，例如“A”，以便在我们的调试会话中更容易识别该有效负载。这也是一个好主意，看看是否可能触发额外的复制操作，否则将停止在第一个NULL字节。
我们有两个字节可以播放不同的大小，所以在向前移动之前尝试发送不同的消息长度并查看崩溃是否仍然发生是很有趣的。
我们已经尝试了32个字节，所以让我们变得疯狂并做64,250,1000,4000,16000,65005。
64（payload=“\ x81 \ x00 \ x00 \ x40”+“A”* 0x40）  
与原始的概念证明相同。寄存器看起来一样。
250（payload=“\ x81 \ x00 \ x00 \ xfa”+“A”* 0xfa)  
这是一个非常有趣的变化。我们看到大多数寄存器设置为0x41414141，这是我们的输入，我们看到堆栈中充满了大量的“A”，甚至EIP似乎已经被破坏了。
1000（payload=“\ x81 \ x00 \ x03 \ xe8”+“A”* 0x3e8）  
与之前的有效负载相同
4000（payload=“\ x81 \ x00 \ x0f \ xa0”+“A”* 0xfa0）  
与之前的有效负载相同
16000（payload=“\ x81 \ x00 \ x3e \ x80”+“A”* 0x3e80）  
虽然我们发现堆栈也已损坏，但这会在不同的指令处崩溃。
65500（payload=“\ x81 \ x00 \ xff \ xdc”+“A”* 0xffdc）  
与之前的有效负载相同
所以...我们看到程序在执行不同的指令时崩溃了。但是，我们可以观察到的常见问题是，当从单个NetBIOS会话请求消息解析NetBIOS名称时，堆栈在某些时候已经损坏，并且当我们发送250字节消息时，大多数寄存器包括我们的有效负载的一部分。这使得分析特别有趣，因为我们有直接的EIP覆盖和控制堆栈。
请注意，我们无法确保所有崩溃都归因于此时完全相同的错误。也许发送更大的缓冲区会让我们走上一条不同的道路，最终会更容易被利用，所以你必须自己回答这个问题。
中间还有一些看似随机数的“。”（0x2e）字符。我们将看到他们以后会发生什么。
在崩溃之前，程序会打印一条显示“New
connection：”的消息。这对于获得一些态势感知非常有用，无需向缓冲区添加观察点并跟踪数十个读取操作（您可以使用rwatch *
addr在GDB中添加读取观察点，并且只要程序访问该内存地址，就会停止执行）。
我们在Binary Ninja中打开/ nova / bin / smb二进制文件并搜索字符串
在0x80709fb只出现一次。检查交叉引用显示单个用法，这可能是我们想要的。
如果我们转到sub_806b11c的开头，我们会注意到需要满足几个条件才能让我们到达打印字符串的块。
第一个条件是与0x81的字节比较，这是我们发送的消息类型。
将断点放在0x806b12e并执行后，我们可以检查寄存器值并更好地了解发生的情况。我们可以观察到例如我们在请求中发送的大小需要高于0x43才能进入感兴趣的块。
根据我们之前的测试，我们知道从这个块中调用的函数之一需要是破坏堆栈的函数。我们继续使用n代替s来遍历GDB中的每条指令，以避免进入函数。每次运行函数后，我们都会看一下堆栈。
我们遇到的第一个函数是0x805015e。
运行后我们看到堆栈似乎没问题，所以这可能不是负责溢出的函数。
稍后我们有一些指令，我们有下一个候选函数，函数在0x8054607。我们再一次让它运行并观察堆栈并记录上下文。
Aaaaand我们找到了罪魁祸首。看看EBP并观察堆栈框架是否已损坏。继续调试，直到该函数即将返回。这里从包含我们数据的堆栈中弹出各种寄存器。
这里不受欢迎的想法：你真的不需要了解这个功能在利用漏洞时所做的一切。我们已经有了EIP控制，并且大多数堆栈看起来或多或少都是未损坏的输入数据。
花一些时间来查看0x5054607处的功能，并使用GDB的帮助产生以下伪代码：
    int parse_names(char *dst, char *src) {
      int len;
      int i;
      int offset;
      // take the length of the first string
      len = *src;
      offset = 0;
      while (len) {
        // copy the bytes of the string into the destination buffer
        for (i = offset; (i - offset) < len; ++i) {
          dst[i] = src[i+1];
        }
        // take the length of the next string
        len = src[i+1];
        // if it exists, then add a separator
        if (len) {
          dst[i] = ".";
        }
        // start over with the next string
        offset = i + 1;
      }
      // nul-terminate the string
      dst[offset] = 0;
      return offset;
    }