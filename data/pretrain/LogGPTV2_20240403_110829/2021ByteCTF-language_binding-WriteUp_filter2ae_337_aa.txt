# 2021ByteCTF-language binding-WriteUp
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
出处: 2021 ByteCTF  
原题链接: 链接：  
提取码：1111  
时间: October 16, 2021  
考点: Golang, Lua  
难度: 困难
## 推测考点
  * 上来直接往 IDA 里面一拖
  * 根据特征，确定这是 Golang。但是出题人对所有的函数名称都做了混淆，全部函数恢复的符号都是错误的…非常不好办 **（考点一：无符号 Go 逆向）**
  * 观察汇编时函数的调用约定，发现这又和传统的 Golang 不一样（采用了大量寄存器来传递参数）。于是打开 Google，搜索后发现这是 Go1.17 新引入的调用约定。 _因此后续所有 Go 相关的，辅助我们判断的程序都应该使用 Go1.17+ 进行编译_
  * 在 IDA 中全局搜索&浏览字符串，发现有 luago 的字样。网上搜索发现这是拿 Go 写的 Lua 解释器 **（考点二：Lua 逆向）**  
  * 因为这并不是一个完整的开源项目，所以只能自己手动筛选，尽量选一个实现上较为完整的。这里选用了这个版本 [zhengted/luago: golang实现Lua (github.com)](https://github.com/zhengted/luago)
## 具体分析
###  解决无符号的问题
  * Go + 没法恢复符号，我真的是吐了。不过既然前面已经推测出了 Go 使用的版本以及它调用的库（luago），可以尝试使用 BinDiff 恢复一下符号
  * 下载并编译 luago，拖到 IDA 里面分析一遍然后保存 IDB 文件，然后在题目的窗口中调用 Bindiff 插件进行比对
  * 。。。不知道出题人咋处理的，所有 luago 库相关的函数几乎都没有识别出来（可信度低的就无视就好了，否则容易误导自己），只是把 Go 的 runtime 大部分都识别出来了
  * 重新分析程序的行为。发现程序运行的时候有如下提示字符串打印  
  * 根据交叉引用定位到了 `main` 函数  
  * 此时已经可以通过结合动态调试对关键逻辑进行分析了。考点一基本完成
###  通过动调梳理程序逻辑
  * 设置调试器参数如下  
  * 此处的寄存器中有通过参数传递的文件名  
  * 不断步过&步进，调到此处发现了亦或的逻辑  
  * 尝试对题目附件的文件进行亦或 0x55 解密，得到 `repaired.lua`，里面含有大量明文字符串  
  * 打开前面下载好的 luago 库，在此处发现了对于 Lua header 的定义  
  * 与 `repaired.lua` 进行对比，发现头部除了前面 5 个字节不一致，后面都是一样的，所以手动对 `repaired.lua` 的头部进行修复
    with open("new_lang_script.out", "rb")as f:
      f.seek(5)
      data = f.read()
    with open("repaired.lua", "wb")as f:
      f.write(b'\x1bLua\x53'+bytes([i ^ 0x55 for i in data]))
  * 此时已经基本理清了程序的逻辑 
    1. 读取 argv 指定的 bytecode 文件
    2. 亦或 0x55 解密
    3. 解释执行
###  Lua 逆向
  * 然后试图调用 luago 运行程序，直接 fatalpanic。。。
    func main() {
        runCode()
    }
    func runCode() {
        ls := state.New()
        ls.OpenLibs()               // 开启标准库
        ls.LoadFile("repaired.lua") // 加载文件
        ls.Call(0, -1)
    }
  * 果然没有那么简单。于是开始阅读 luago 的源码，发现虚拟机的 `for loop` 在此处实现。在此处下断点，动调几遍你就会发现，每次执行的 Bytecode 完全驴唇不对马嘴，这时候猜测出题人魔改了 Lua Bytecode 的顺序  
  * 发现这里是从 `Opcodes` 数组中获取的具体要执行的 `action` ，于是进而查看 `Opcodes` 数组的定义  
  * 猜测在题目附件中应该也存在这样的数组。于是继续动调，定位到了原程序中的 `Execute` 函数及 `Opcode` 数组  
  * 这时候发现出题人是真狠。。。把所有 `Opcodes` 对应的字符串描述都给换成 `NONNAME` 了  
  * 所以这里就是想办法获取出题人魔改后 `Opcode` 的顺序
###  获取 Opcode 的顺序
  * 首先定义一下 Opcode 数组元素的结构体并导入到 IDA 里面
    typedef void (*func_t)(void*, void*);
    typedef struct
    {
      char testFlag, setAflag, argBMode, argCMode, opMode;
      char* string;
      uint64_t pad;
      func_t func_ptr;
    } opcode_t;
    enum arg_mask_t {
      OpArgN,  // argument is not used
      OpArgU,  // argument is used
      OpArgR,  // argument is a register or a jump offset
      OpArgK
    };
  * 然后使用 `IDAPython` 定义一下结构体，提高可读性
    def define_opcode_array():
      start_ea = 0x1005540
      end_ea = 0x1005B20
      count = 0
      for ea in range(start_ea, end_ea, 0x20):
        idc.create_struct(ea, 0x20, "opcode_t")
        count += 1
      print(count)
  * 首先注意到 Opcode 的参数类型不尽相同  
  * 根据参数类型对 Opcode 进行一个分类，得到了如下的 `dict`
    known_sig = {
    (0, 1, 2, 0, 0): ['MOVE', 'UNM', 'BNOT', 'NOT', 'LEN'], 
    (0, 1, 3, 0, 1): ['LOADK'], 
    (0, 1, 0, 0, 1): ['LOADKX'], 
    (0, 1, 1, 1, 0): ['LOADBOOL', 'NEWTABLE', 'CALL', 'TAILCALL'],
    (0, 1, 1, 0, 0): ['LOADNIL', 'GETUPVAL', 'VARARG'],
    (0, 1, 1, 3, 0): ['GETTABUP'],
    (0, 1, 2, 3, 0): ['GETTABLE', 'SELF'],
    (0, 0, 3, 3, 0): ['SETTABUP', 'SETTABLE'], 
    (0, 0, 1, 0, 0): ['SETUPVAL', 'RETURN'], 
    (0, 1, 3, 3, 0): ['ADD', 'SUB', 'MUL', 'MOD', 'POW', 'DIV', 'IDIV', 'BAND', 'BOR', 'BXOR', 'SHL', 'SHR'], 
    (0, 1, 2, 2, 0): ['CONCAT'], 
    (0, 0, 2, 0, 2): ['JMP'], 
    (1, 0, 3, 3, 0): ['EQ', 'LT', 'LE'], 
    (1, 0, 0, 1, 0): ['TEST'], 
    (1, 1, 2, 1, 0): ['TESTSET'], 
    (0, 1, 2, 0, 2): ['FORLOOP', 'FORPREP', 'TFORLOOP'], 
    (0, 0, 0, 1, 0): ['TFORCALL'], 
    (0, 0, 1, 1, 0): ['SETLIST'], 
    (0, 1, 1, 0, 1): ['CLOSURE'], 
    (0, 0, 1, 1, 3): ['EXTRAARG']
    }
  * 此时可以唯一的识别出部分函数，剩下的那些不确定的也缩小了搜索的范围
  * 然后使用 IDAPython 根据此步的归类对函数进行重命名
    known_sig = {(0, 1, 2, 0, 0): ['MOVE', 'UNM', 'BNOT', 'NOT', 'LEN'], (0, 1, 3, 0, 1): ['LOADK'], (0, 1, 0, 0, 1): ['LOADKX'], (0, 1, 1, 1, 0): ['LOADBOOL', 'NEWTABLE', 'CALL', 'TAILCALL'], (0, 1, 1, 0, 0): ['LOADNIL', 'GETUPVAL', 'VARARG'], (0, 1, 1, 3, 0): ['GETTABUP'], (0, 1, 2, 3, 0): ['GETTABLE', 'SELF'], (0, 0, 3, 3, 0): ['SETTABUP', 'SETTABLE'], (0, 0, 1, 0, 0): ['SETUPVAL', 'RETURN'], (0, 1, 3, 3, 0): [
        'ADD', 'SUB', 'MUL', 'MOD', 'POW', 'DIV', 'IDIV', 'BAND', 'BOR', 'BXOR', 'SHL', 'SHR'], (0, 1, 2, 2, 0): ['CONCAT'], (0, 0, 2, 0, 2): ['JMP'], (1, 0, 3, 3, 0): ['EQ', 'LT', 'LE'], (1, 0, 0, 1, 0): ['TEST'], (1, 1, 2, 1, 0): ['TESTSET'], (0, 1, 2, 0, 2): ['FORLOOP', 'FORPREP', 'TFORLOOP'], (0, 0, 0, 1, 0): ['TFORCALL'], (0, 0, 1, 1, 0): ['SETLIST'], (0, 1, 1, 0, 1): ['CLOSURE'], (0, 0, 1, 1, 3): ['EXTRAARG']}
    manual_sig = {}
    def rename_action():
      for mv in manual_sig.values():
        for k, v in known_sig.items():
          if mv in v:
            known_sig[k].remove(mv)
      start_ea = 0xFF5540
      end_ea = start_ea+47*0x20
      for ea in range(start_ea, end_ea, 0x20):
        func_ptr_addr = idc.get_qword(ea+0x18)
        func_addr = idc.get_qword(func_ptr_addr)
        idc.set_name(func_ptr_addr, "", ida_name.SN_NOCHECK)
        idc.set_name(func_addr, "", ida_name.SN_NOCHECK)
      for ea in range(start_ea, end_ea, 0x20):
        index = (ea-start_ea)//0x20
        tmp = idc.get_bytes(ea, 5)
        this_sig = tuple([i for i in tmp])
        func_ptr_addr = idc.get_qword(ea+0x18)
        func_addr = idc.get_qword(func_ptr_addr)
        if index in manual_sig.keys():
          f_name = manual_sig[index]
        elif len(known_sig[this_sig]) == 1:
          f_name = known_sig[this_sig][0]
        else:
          possible_funcs = '_'.join(known_sig[this_sig])
          f_name = "F_%d_%s" % (index, possible_funcs)
        # all_sig[f_name] = this_sig
        p_name = "_p_"+f_name
        idc.set_name(func_ptr_addr, p_name, ida_name.SN_NOCHECK)
        idc.set_name(func_addr, f_name, ida_name.SN_NOCHECK)
  * 重命名完之后  
  * 然后就是非常枯燥的比对过程。。。在这一步你需要通过手动对比源程序和下载并自己编译的 `luago.exe` ，手动识别其它函数，然后把 Opcode 的信息以 index:name 的形式加入 `manual_sig` 字典里
  * 最终可以唯一地标记所有 Opcode action 函数  
  * 题目中 Opcode 的顺序如下
    OP_UNM,OP_SETLIST,OP_TESTSET,OP_CLOSURE,OP_LOADKX,OP_TFORLOOP,OP_NEWTABLE,OP_SHR,OP_SETTABLE,OP_ADD,OP_TAILCALL,OP_SETUPVAL,OP_EXTRAARG,OP_GETTABUP,OP_LEN,OP_SUB,OP_LOADBOOL,OP_TFORCALL,OP_LOADNIL,OP_FORPREP,OP_SHL,OP_TEST,OP_BXOR,OP_LT,OP_CALL,OP_NOT,OP_BOR,OP_MUL,OP_SETTABUP,OP_EQ,OP_MOVE,OP_JMP,OP_IDIV,OP_GETTABLE,OP_CONCAT,OP_VARARG,OP_POW,OP_MOD,OP_DIV,OP_BNOT,OP_SELF,OP_LE,OP_RETURN,OP_FORLOOP,OP_GETUPVAL,OP_LOADK,OP_BAND
###  魔改 Lua5.3 & Luadec
  * 然后就需要对原版的 Lua5.3 和 Luadec 进行修改，来得到反汇编后的 Lua 代码
  * 修改 `lopcode.c`
    /*
    ** $Id: lopcodes.c,v 1.55 2015/01/05 13:48:33 roberto Exp $
    ** Opcodes for Lua virtual machine
    ** See Copyright Notice in lua.h
    */
    #define lopcodes_c
    #define LUA_CORE
    #include "lopcodes.h"
    #include 
    #include "lprefix.h"
    /* ORDER OP */
    LUAI_DDEF const char *const luaP_opnames[NUM_OPCODES + 1] = {
        "UNM",
        "SETLIST",
        "TESTSET",
        "CLOSURE",
        "LOADKX",
        "TFORLOOP",
        "NEWTABLE",
        "SHR",
        "SETTABLE",
        "ADD",
        "TAILCALL",
        "SETUPVAL",
        "EXTRAARG",
        "GETTABUP",
        "LEN",
        "SUB",
        "LOADBOOL",
        "TFORCALL",
        "LOADNIL",
        "FORPREP",
        "SHL",
        "TEST",
        "BXOR",
        "LT",
        "CALL",
        "NOT",
        "BOR",
        "MUL",
        "SETTABUP",
        "EQ",
        "MOVE",
        "JMP",
        "IDIV",
        "GETTABLE",
        "CONCAT",
        "VARARG",
        "POW",
        "MOD",
        "DIV",
        "BNOT",
        "SELF",
        "LE",
        "RETURN",
        "FORLOOP",
        "GETUPVAL",
        "LOADK",
        "BAND",
        NULL};
    #define opmode(t, a, b, c, m) (((t) << 7) | ((a) << 6) | ((b) << 4) | ((c) << 2) | (m))
    LUAI_DDEF const lu_byte luaP_opmodes[NUM_OPCODES] = {
        opmode(0, 1, 2, 0, 0)  // UNM
        ,
        opmode(0, 0, 1, 1, 0)  // SETLIST
        ,
        opmode(1, 1, 2, 1, 0)  // TESTSET