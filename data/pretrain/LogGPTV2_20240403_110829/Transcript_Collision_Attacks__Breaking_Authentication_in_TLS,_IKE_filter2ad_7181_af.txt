# Summary of Transcript Collision Attacks on Internet Protocols

## Table I: Summary of Transcript Collision Attacks on Internet Protocols
| Protocol | Complexity | Core Hours | GPU Days |
|----------|------------|------------|-----------|
| Chosen Prefix | 239 | 48 | 80 |
| Chosen Prefix | 277 | 48 | - |
| Chosen Prefix | 265 | - | - |
| Chosen Prefix | 2128-X | - | - |
| Chosen Prefix | 2128 | - | - |
| Chosen Prefix | 296 | - | - |
| Chosen Prefix | 2128 | - | - |
| Chosen Prefix | 2160 | - | - |
| Chosen Prefix | 2160 | - | - |
| X conn. | 277 | - | - |

## References

1. D. Adrian, K. Bhargavan, Z. Durumeric, P. Gaudry, M. Green, J. A. Halderman, N. Heninger, D. Springall, E. Thomé, L. Valenta, B. VanderSloot, E. Wustrow, S. Zanella-Béguelin, and P. Zimmermann. "Imperfect forward secrecy: How Diffie-Hellman fails in practice." In ACM CCS, 2015.
2. J. Altman, N. Williams, and L. Zhu. "Channel bindings for TLS." IETF RFC 5929, 2010.
3. S. Bellovin and E. Rescorla. "Deploying a new hash algorithm." In NDSS, 2006.
4. F. Bergsma, B. Dowling, F. Kohlar, J. Schwenk, and D. Stebila. "Multi-ciphersuite security of the Secure Shell (SSH) protocol." In ACM CCS, pages 369–381, 2014.
5. K. Bhargavan, A. Delignat-Lavaud, and A. Pironti. "Verified contributive channel bindings for compound authentication." In NDSS, 2015.
6. K. Bhargavan, A. D. Lavaud, C. Fournet, A. Pironti, and P.-Y. Strub. "Triple handshakes and cookie cutters: Breaking and fixing authentication over TLS." In IEEE S&P (Oakland), 2014.
7. I. B. Damgård. "A design principle for hash functions." In CRYPTO’89, 1990.
8. T. Dierks and E. Rescorla. "The Transport Layer Security (TLS) Protocol Version 1.2." IETF RFC 5246, 2008.
9. T. Dierks and E. Rescorla. "The Transport Layer Security (TLS) Protocol Version 1.3." Internet Draft, 2014.
10. M. Friedl, N. Provos, and W. Simpson. "Diffie-Hellman Group Exchange for the Secure Shell (SSH) Transport Layer Protocol." IETF RFC 4419, 2006.
11. F. Giesen, F. Kohlar, and D. Stebila. "On the security of TLS renegotiation." In ACM CCS, 2013.
12. D. Gillmor. "Negotiated Finite Field Diffie-Hellman Ephemeral Parameters for TLS." Internet Draft, 2015.
13. S. Halevi and H. Krawczyk. "Strengthening digital signatures via randomized hashing." In CRYPTO, 2006.
14. B. Hill, D. Baghdasaryan, B. Blanke, R. Lindemann, and J. Hodges. "FIDO UAF Application API and Transport Binding Specification v1.0." Draft Specification, 2015.
15. P. Hoffman. "Use of Hash Algorithms in Internet Key Exchange (IKE) and IPsec." IETF RFC 4894, 2007.
16. P. Hoffman and B. Schneier. "Attacks on Cryptographic Hashes in Internet Protocols." IETF RFC 4270, 2005.
17. T. Jager, F. Kohlar, S. Schäge, and J. Schwenk. "On the security of TLS-DHE in the standard model." In CRYPTO, 2012.
18. A. Joux. "Multicollisions in iterated hash functions. Application to cascaded constructions." In CRYPTO, 2004.
19. J. Kelsey and T. Kohno. "Herding hash functions and the Nostradamus attack." In EUROCRYPT, 2006.
20. D. Knuth. "Seminumerical algorithms, volume 2 of The Art of Computer Programming," 1981.
21. H. Krawczyk. "SIGMA: The SIGn-and-MAc approach to authenticated Diffie-Hellman and its use in the IKE protocols." In CRYPTO, 2003.
22. H. Krawczyk, K. G. Paterson, and H. Wee. "On the security of the TLS protocol: A systematic analysis." In CRYPTO, 2013.
23. A. Langley. "Transport Layer Security (TLS) Snap Start." Internet Draft, 2010.
24. A. Langley. "Transport Layer Security (TLS) Next Protocol Negotiation Extension." Internet Draft, 2012.
25. G. Leurent. "Practical key-recovery attack against APOP, an MD5-based challenge-response authentication." IJACT, 1(1):32–46, 2008.
26. N. Mavrogiannopoulos, F. Vercauteren, V. Velichkov, and B. Preneel. "A cross-protocol attack on the TLS protocol." In ACM CCS, 2012.
27. F. Mendel, C. Rechberger, and M. Schlaffer. "MD5 is weaker than weak: Attacks on concatenated combiners." In ASIACRYPT, 2009.
28. A. Menon-Sen, N. Williams, A. Melnikov, and C. Newman. "Salted Challenge Response Authentication Mechanism (SCRAM) SASL and GSS-API Mechanisms." IETF RFC 5802, 2010.
29. R. C. Merkle. "A certified digital signature." In CRYPTO’89, 1990.
30. J. M. Pollard. "A Monte Carlo method for factorization." BIT Numerical Mathematics, 15(3):331–334, 1975.
31. J. M. Pollard. "Monte Carlo methods for index computation." Mathematics of Computation, 32(143):918–924, 1978.
32. A. Popov, M. Nystroem, D. Balfanz, and A. Langley. "The Token Binding Protocol Version 1.0." Internet Draft, 2015.
33. M. Stevens. "Hashclash." https://marc-stevens.nl/p/hashclash/.
34. M. Stevens. "Counter-cryptanalysis." In CRYPTO, 2013.
35. M. Stevens. "New collision attacks on SHA-1 based on optimal joint local-collision analysis." In EUROCRYPT, 2013.
36. M. Stevens, A. K. Lenstra, and B. de Weger. "Chosen-prefix collisions for MD5 and applications." IJACT, 2(4):322–359, 2012.
37. P. C. van Oorschot and M. J. Wiener. "Parallel collision search with cryptanalytic applications." J. Cryptology, 12(1):1–28, 1999.
38. X. Wang and H. Yu. "How to break MD5 and other hash functions." In EUROCRYPT, 2005.
39. T. Ylonen and C. Lonvick. "The Secure Shell (SSH) Transport Layer Protocol." RFC 4253 (Proposed Standard), 2006.
40. P. Zimmermann. "ZRTP: Media Path Key Agreement for Unicast Secure RTP." IETF RFC 6189, 2012.

## Appendix

### A. Attacks against Hash Functions

We provide more details about attacks against hash functions, considering both generic attacks and dedicated attacks against widely-used functions such as MD5 and SHA-1. The main results are summarized in Table II.

#### Generic Collision Attacks

A basic collision attack requires computing and storing \(2^{N/2}\) images of the hash function. However, it is possible to mount a parallel and memory-less attack with a very small overhead. The main idea was introduced by Pollard as the Rho Algorithm for factorization [30] and discrete logarithms [31], and later generalized to collision search.

The hash function is first restricted from \(\{0, 1\}^* \rightarrow \{0, 1\}^N\) to \(\{0, 1\}^N \rightarrow \{0, 1\}^N\), so that it can be iterated. After some number of steps, a chain of iterations reaches a cycle, and the graph will have the shape of the Greek letter ρ. On average, the cycle has length \(O(2^{N/2})\) and is reached after \(O(2^{N/2})\) steps. The point where the tail of the chain meets the cycle reveals a collision in the hash function. It can be detected in time \(O(2^{N/2})\) with little or no memory, using various cycle detection methods, such as Floyd's algorithm [20] (also known as tortoise and hare).

Some variants of this attack using distinguished points can be parallelized efficiently. We describe a parallel version of Pollard's Lambda algorithm, as described by van Oorschot and Wiener [37], using \(c\) CPUs. Each CPU computes iteration chains of the function \(H\) and stops when reaching a distinguished point, which is a point with some easy-to-test property. For instance, we stop a computation when the ending point satisfies \(x < 2^{N/2} \alpha c\) for some small constant \(\alpha\), so that the expected length of a chain is \(2^{N/2} / \alpha c\). When a chain is finished, we store the starting point, the length, and the ending point. We generate \(\alpha c\) chains in this way, so that the function has been evaluated about \(2^{N/2}\) times, and there is a high probability that there was a collision.

The important idea of this attack is that if a given point is reached by two different chains, both chains will stop at the same distinguished point. Therefore, we look at the ending points of the chains, and when a collision is detected, we restart the chains from the starting point to locate the collision. This attack requires about \(2^{N/2}\) evaluations of \(H\) and a memory of \(\alpha c\) when using \(c\) CPUs.

This attack can be tweaked for a chosen-prefix collision attack using an auxiliary function \(g : \{0, 1\}^N \rightarrow \{0, 1\}^N\) defined as:
\[ g(x) = \begin{cases} 
H(P|x) & \text{if } x \text{ is even} \\
H(P'|x) & \text{if } x \text{ is odd}
\end{cases} \]

Collisions in \(g\) can be found with the previous techniques. With probability \(1/2\), a collision in \(g\) is between an even \(x\) and an odd \(x'\) (or vice versa), implying a chosen-prefix collision \(H(P|x) = H(P'|x')\).

An accurate complexity analysis is provided in [37]: a collision is expected to be found after \(\sqrt{\pi 2^N / 2}\) evaluations. For a chosen-prefix collision, we expect to find two collisions in \(g\) after \(\sqrt{\pi 2^N}\) evaluations.

#### Concatenation Collisions

Collisions in the concatenation of two hash functions \(H1|H2\) can be found with roughly the same effort as breaking the strongest one of the two, using the multi-collision technique of Joux [18].

The adversary first finds a collision pair \((x_0, x'_0)\) for \(H1\), starting from the initialization value of \(H1\). Then it finds a collision pair \((x_1, x'_1)\) starting from \(H1(x_0) = H1(x'_0)\). This defines 4 messages with the same \(H1\)-digest: \(x_0|x_1\), \(x_0|x'_1\), \(x'_0|x_1\), \(x'_0|x'_1\). After \(N2/2\) steps, this defines a set of \(2^{N2/2}\) messages with the same \(H1\)-digest. With high probability, two of these messages have the same \(H2\)-digest as well (see Figure 9). Therefore, one can find a collision in \(H1|H2\) with a complexity of only \(N2/2 \times 2^{N1/2} + 2^{N2/2}\). For MD5|SHA-1, this translates to \(2^{80}\), roughly as much as a generic collision attack on SHA-1.

Better attacks against MD5|SHA-1 result from the combination of Joux’s multicollision technique with shortcut attacks against SHA-1. A collision attack can be built for a cost of \(64 \times 2^{61} + 2^{64} \approx 2^{67}\) (building sequentially 64 collisions for MD5). For a chosen-prefix collision, we first perform a chosen-prefix collision against SHA-1, to generate messages \((x, x')\) such that \(SHA-1(P|x) = SHA-1(P'|x')\). Then we build a multicollision in SHA-1 starting from this value, and we evaluate MD5 over a set of \(2^{64}\) messages in order to find a collision. The total cost is about \(2^{77} + 64 \times 2^{61} + 2^{64} \approx 2^{77}\) (see Figure 10).

Moreover, it has been shown that it is possible to combine cryptanalytic shortcuts both on SHA-1 and MD5, assuming that collision attacks against SHA-1 improve in the future [27]. This may allow collision attacks against MD5|SHA-1 with less than \(2^{64}\) work.

Table II summarizes the currently-known complexities for computing various hash collisions.

### B. Transcript Collision Attacks on IKEv2 and SSH-2

#### Man-in-the-Middle Initiator Impersonation Attack on IKEv2

The initiator \(I\) connects to the responder \(R\), but a man-in-the-middle attacker \(A\) intercepts and tampers with some messages (shown in red). \(A\) precomputes a collision \((C1, C2)\) between the prefixes of two SA INIT messages that both begin with a cookie payload. Then, by sending a carefully crafted cookie to \(I\), \(A\) can trigger a transcript collision on the initiator signature, which it can then forward to \(R\), thereby impersonating \(I\) on a connection that it controls.

#### Man-in-the-Middle Downgrade Attack on SSH-2

The client \(C\) connects to a server \(S\), but a network attacker \(A\) tampers with the key exchange messages (shown in red) to downgrade them to a weak ciphersuite. To succeed, \(A\) must compute a chosen-prefix collision on the session hash \(H\) after receiving \(C\)'s key exchange message.