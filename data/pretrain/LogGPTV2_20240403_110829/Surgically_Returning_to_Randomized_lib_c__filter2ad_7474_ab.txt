from the library ﬁle and that the offset is constant. To ease
the presentation, we use open to denote any function used
by the attacker to de-randomize the library, and system to
denote any function whose absolute address the attacker wants
to compute. Given the absolute address of a library function,
the base address of the library (libc) can be computed as
follows:
libc = open − oﬀset(open)
Similarly, the absolute address of any function of the library
can be computed as follows:
system = open − oﬀset(open) + oﬀset(system)
Even though the math is trivial, it is very complex to
perform in our context. Indeed, despite the stack overﬂow
vulnerability, we cannot
inject and execute our own code
because the stack and all other data pages are not executable. A
solution to overcome this limitation is to borrow code chunks,
that is, to use code already available in the executable section
of the process [9], [10]. Practically speaking, a code chunk is a
sequence of bytes representing a sequence of one or more valid
instructions that is terminated by a ret instruction. Although
code chunks available are typically very simple and short,
they can be combined, using return-oriented programming,
by constructing powerful gadgets, i.e., short blocks placed
on the stack that chain several code chunks together and that
perform a predetermined computation [10]. An example of a
code chunk is the string 8b 50 64 c3, corresponding to the
sequence of instructions mov 0x64(%eax),%edx; ret.
The ret instruction ending each code chunk allows the
construction of gadgets that link multiple chunks together.
Figure 4 shows a sample stack conﬁguration containing two
gadgets that combine a 3-byte code chunk (the sequence of
instructions pop %eax; pop %edx; ret) with another
one, to read the content of arbitrary memory locations. During
the overﬂow,
the stack frames of the vulnerable function
and the callers are overwritten with gadgets (see Figure 4).
The ﬁrst gadget starts exactly where the return address of
the vulnerable function was stored before the overﬂow. It is
composed of three double-words: the address of the ﬁrst code
chunk (0x08055453), and two integers (0x8049167 and
0x80491a1) that will be consumed during the execution
of the code chunk. When the vulnerable function returns,
the ﬁrst code chunk is executed, and its execution results
in the initialization of the two registers (i.e., eax and edx)
with the values speciﬁed in the gadget (the second and third
double-words of the gadget). The second gadget, being stored
62
Chunk 3 →
Chunk 2 →
edx →
eax →
Saved EIP Chunk 1 →
Saved EBP →
08050948
08051946
080491a1
08049167
08055453
deadbeef
Stack
3
2
1
S
t
a
c
k
g
r
o
w
t
h
→
Text
8050948 . . .
8051946 mov 0x64(%eax),%edx
805194b mov %ebx,%eax
805194d ret
8055453 pop %eax
8055454 pop %edx
8055455 ret
C
h
u
n
k
2
C
h
u
n
k
1
Fig. 4. Sample stack conﬁguration with three gadgets, to chain the code chunks available in the vulnerable process
adjacently to the ﬁrst one, causes the execution to ﬂow from
the ﬁrst to the second code chunk. Indeed the ret instruction
terminating the ﬁrst code chunk references the double-word
belonging to the subsequent gadget and representing the start
address of the second chunk (0x08051946). The second
code chunk reads the content of the memory location pointed
by eax and stores the result in edx. Additional operations
could be chained to perform more complex computations by
writing other gadgets to the stack during the overﬂow.
The x86 architecture has a very dense and rich instruction
set, instructions have variable length and do not need to be
aligned. Therefore, code chunks are typically very frequent.
However, those usable by an attacker are just a few. The
numerous code chunks available in libc and other libraries
cannot be used because of ASLR. As the executable is position
dependent, only a few constant-address chunks in the code
section can be used.
B. Details of the attack
Our attack uses the code chunks available in the code section
of the vulnerable process to determine the base address of the
lib(c), and uses this information to execute any function of the
library. More precisely, our attack works as follows.
1) Identify the code chunks available in the vulnerable
process.
2) Combine these code chunks to retrieve from the GOT of
the vulnerable process the absolute address of a function
of the lib(c).
3) Compute, again using the available code chunks, the
absolute address of the function of the library we want
to invoke.
4) Transfer the control of the execution to the latter func-
tion.
We present two variants of the attack. The ﬁrst one is a
straightforward application of the four steps described above.
The second one has been developed to operate in situations
where the ﬁrst variant cannot, because the required code
chunks are not available. The second variant indeed uses more
common code chunks that allow to modify any entry of the
GOT, without reading it explicitly.
1) Attack 1 – GOT dereferencing: The ﬁrst attack combines
gadgets to read the absolute address of any lib(c) function
(e.g., open) from the GOT of the process, uses this address to
compute the absolute address of another function of the library
(e.g., system), and jumps to the address just computed. To do
63
that we need the following gadgets: a load, an addition, and an
indirect control transfer. Each of these gadgets can be obtained
by combining one or more code chunks available in the
code section of the vulnerable program. The x86 architecture
facilitates the attack because it can perform complex tasks,
such as a load and an arithmetic operation, with a single
instruction. Therefore, the number of code chunks required
to mount the attack is very small.
An example of a code chunk that constitutes one of
the building blocks of our attack is the sequence of bytes
03 83 c4 5d 00 00 5f c3, encoding the instructions
add 0x5dc4(%ebx),%eax; pop %edi; ret. To turn
such a code chunk into a dangerous gadget, it is sufﬁcient to
properly initialize the registers eax and ebx. Indeed, a proper
conﬁguration of the two registers enables to load the absolute
address of open, and to compute the address of system.
Let got(s) be the address of the GOT entry of the symbol s.
Like for the virtual offset of a symbol, the addresses of the
various GOT entries of the program are constant, and can be
computed off-line from the program ﬁle. The assignment to
the two registers necessary to compute the absolute address of
system is:
eax = oﬀset(system) − oﬀset(open)
ebx = got(open) − 0x5dc4
With this register conﬁguration the instruction loads from
the GOT the absolute address of open (the −0x5dc4 delta
is necessary because the instruction loads the data at address
ebx + 0x5dc4) and sums it to the offset stored in eax.
The result is saved in eax, and corresponds to the absolute
address of system. To complete the attack, the attacker just
needs a code chunk that transfers the execution to the address
in eax. For example, the instruction jmp *%eax can be used
for this purpose.
Figure 5 shows the stack of the sample vulnerable process
during the attack and illustrates how the various code chunks
are combined in gadgets by the attacker to perform the exploit.
Overall, during the attack, the stack contains ﬁve different
gadgets. The number can vary slightly, depending on the type
of code chunks available in the vulnerable program2. The ﬁrst
code chunk (at address 0x8054126) pops two double-words
from the stack and stores them in edi and ebp respectively.
The attacker uses the ﬁrst gadget to initialize edi with the
2The gadgets used to illustrate the attack resembles the ones more common
on GNU/Linux (x86) systems.
Chunk 5 →
Chunk 4 →
got(open) − 0x5dc4 →
Chunk 3 →
Chunk 2 →
oﬀset(system) − oﬀset(open) →
Saved EIP Chunk 1 →
Saved EBP →
Stack
08051173
deadbeef
08051240
deadbeef
0805a2e0
08052341
deadbeef
08053873
deadbeef
00005124
08054126
deadbeef
5
4
3
2
1
S
t
a
c
k
g
r
o
w
t
h
→
Text
8051173 jmp *%eax
8051240 add 0x5dc4(%ebx),%eax
8051246 pop %edi
8051247 ret
8052341 pop %ebx
8052342 pop %ebp
8052343 ret
8053873 mov %edi,%eax
8053875 pop %esi
8053876 ret
8054126 pop %edi
8054127 pop %ebp
8054128 ret
C
h
u
n
k
5
C
h
u
n
k
4
C
h
u
n
k
3
C
h
u
n
k
2
C
h
u
n
k
1
Fig. 5.
elements of the stack irrelevant for the attack are shaded).
Sample stack conﬁguration for the GOT dereferencing attack, where the address of system is assumed to be 0xb7f58328 (instructions and
distance between system and open. The register ebp is
irrelevant for the attack and its initialization is just a side
effect of the code chunk. Indeed, the code chunk resembles
a standard function epilogue, which restores callee saved
registers. The ret instruction terminating the ﬁrst code chunk
triggers the second gadget, stored in the stack right above
the element previously popped into ebp. The gadget uses
the second code chunk (at address 0x8053873) to copy the
value of edi to eax. This operation is needed because we
are assuming that no code chunks exists to directly initialize
eax. Again, the pop instruction found in the chunk is a side
effect. The third chunk (at address 0x8052341) is used by
the attacker to initialize ebx with the address of the GOT
entry of open. The code fragment pops the value from the
stack and saves in ebx. After the execution of the ﬁrst three
gadgets both eax and ebx are initialized as described earlier
and the attacker has completed the preparation of the context
for the execution of the gadget that computes the desired
absolute address of system. The fourth gadget is used for
the computation and to store the address in eax, and the
ﬁfth gadget is used to jump at the beginning of the system
function, completing the attack.
2) Attack 2 – GOT overwriting: The second attack over-
writes an entry of the GOT (e.g., the entry of open) with
the address of another library function (e.g.,
the address
of system), and transfers control to the selected function
through the modiﬁed GOT entry. The attack is possible be-
cause, in the default setup, binding is performed lazily, and the
GOT must be ﬁlled on demand. Hence, it must be writable.
The attacker needs the following gadgets: a load, an addi-
tion, a store, and an indirect control transfer (with a mem-
ory operand). Although apparently more gadgets are needed
to perform this variant of the attack than to perform the
previous one, in practice the ﬁrst three operations can be
performed using a single machine instruction;
is, an
arithmetic operation with a destination memory operand, such
as add %eax,0x83d8(%ebx). This kind of code chunk
is increasingly frequent in executables, relative to the type of
that
chunk on which the GOT dereferencing attack is based. Fur-
thermore, no particular control transfer instruction is requested
to invoke the chosen library function as the PLT stub of the
function whose GOT entry has been modiﬁed can be used for
the attacker’s purpose.
Figure 6 shows the stack of the sample vulnerable pro-
cess during the attack, and illustrates how the various code
chunks are combined in gadgets by the attacker to exploit
the vulnerability. In total the attacker combines three gadgets,
two of which perform two operations instead of a single one.
The return address of the vulnerable function is overwritten
with the address of the ﬁrst gadget and the previous double-
word in the stack contains the distance between system
and open. The ﬁrst gadget (using the code chunk at address
0x8054341) initializes the value of ebx with the distance
stored in the stack. The second gadget (using the chunk at
0x8053123) copies the value from ebx to eax and then
initializes ebx with the address of the GOT entry of open
that will be overwritten. The third gadget (using the chunk
at 0x8052313) computes the absolute address of system,