self.name = name
可以看到我们用singleton 这个装饰函数来装饰 User 这个类。装饰器用在类上，并不是很常见，但
只要熟悉装饰器的实现过程，就不难以实现对类的装饰。在上面这个例子中，装饰器就只是实现对
类实例的生成的控制而已。
其实例化的过程，你可以参考我这里的调试过程，加以理解。
3.11 Python 读取文件的六种方式
第一种：使用 open
常规操作
with open('data.txt') as fp:
content = fp.readlines()
第二种：使用 fileinput
使用内置库 fileinput
import fileinput
with fileinput.input(files=('data.txt',)) as file:
content = [line for line in file]
第三种：使用 filecache
使用内置库 filecache，你可以用它来指定读取具体某一行，或者某几行，不指定就读取全部行。
import linecache
content = linecache.getlines('werobot.toml')
第四种：使用 codecs
使用 codecs.open 来读取
import codecs
file=codecs.open("README.md", 'r')
file.read()
如果你还在使用 Python2，那么它可以帮你处理掉 Python 2 下写文件时一些编码错误，一般的建
议是：
在 Python 3 下写文件，直接使用 open
在 Python 2 下写文件，推荐使用 codecs.open，特别是有中文的情况下
如果希望代码同时兼容Python2和Python3，那么也推荐用codecs.open
第五种：使用 io 模块
使用 io 模块的 open 函数
import io
file=io.open("README.md")
file.read()
经朋友提醒，我才发现 io.open 和 open 是同一个函数
Python 3.9.2 (default, Feb 28 2021, 17:03:44)
[GCC 10.2.1 20210110] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> import os
>>> (open1:=open) is (open2:=os.open)
False
>>> import io
>>> (open3:=open) is (open3:=io.open)
True
第六种：使用 os 模块
os 模块也自带了 open 函数，直接操作的是底层的 I/O 流，操作的时候是最麻烦的
>>> import os
>>> fp = os.open("hello.txt", os.O_RDONLY)
>>> os.read(fp, 12)
b'hello, world'
>>> os.close(fp)
3.12 调用函数的九种方法
方法一：直接调用函数运行
这种是最简单且直观的方法
def task():
print("running task")
task()
如果是在类中，也是如此
class Task:
def task(self):
print("running task")
Task().task()
方法二：使用偏函数来执行
在 functools 这个内置库中，有一个 partial 方法专门用来生成偏函数。
def power(x, n):
s = 1
while n > 0:
n = n - 1
s = s * x
return s
from functools import partial
power_2=partial(power, n=2)
power_2(2) # output: 4
power_2(3) # output: 9
方法三：使用 eval 动态执行
如果你有需要动态执行函数的需要，可以使用 eval + 字符串 来执行函数。
import sys
def pre_task():
print("running pre_task")
def task():
print("running task")
def post_task():
print("running post_task")
argvs = sys.argv[1:]
for action in argvs:
eval(action)()
运行效果如下
$ python demo.py pre_task task post_task
running pre_task
running task
running post_task
方法四：使用 getattr 动态获取执行
若把所有的函数是放在类中，并定义成静态方法，那就不需要用 eval 了，接着使用 getattr 去获取
并调用。
import sys
class Task:
@staticmethod
def pre_task():
print("running pre_task")
@staticmethod
def task():
print("running task")
@staticmethod
def post_task():
print("running post_task")
argvs = sys.argv[1:]
task = Task()
for action in argvs:
func = getattr(task, action)
func()
方法五：使用类本身的字典
我们都知道对象都有一个 __dict__() 的魔法方法，存放所有对象的属性及方法。
到这里，大家可以思考一下， 如果还是上面的代码，我直接取实例的 __dict__() 能不能取到函
数呢？
我相信很多人都会答错。
上面我们定义的是静态方法，静态方法并没有与实例进行绑定，因此静态方法是属于类的，但是不
是属于实例的，实例虽然有使用权（可以调用），但是并没有拥有权。
因此要想通过 __dict__ 获取函数，得通过类本身 Task ，取出来的函数，调用方法和平时的也不
一样，必须先用 __func__ 获取才能调用。
import sys
class Task:
@staticmethod
def pre_task():
print("running pre_task")
func = Task.__dict__.get("pre_task")
func.__func__()
方法六：使用 global() 获取执行
上面放入类中，只是为了方便使用 getattr 的方法，其实不放入类中，也是可以的。此时你需要
借助 globals() 或者 locals() ，它们本质上就是一个字典，你可以直接 get 来获得函数。
import sys
def pre_task():
print("running pre_task")
def task():
print("running task")
def post_task():
print("running post_task")
argvs = sys.argv[1:]
for action in argvs:
globals().get(action)()
方法七：从文本中编译运行
先定义一个字符串，内容是你函数的内容，比如上面的 pre_task ，再通过 compile 函数编进 编
译，转化为字节代码，最后再使用 exec 去执行它。
pre_task = """
print("running pre_task")
"""
exec(compile(pre_task, '', 'exec'))
若你的代码是放在一个 txt 文本中，虽然无法直接导入运行，但仍然可以通过 open 来读取，最后
使用 compile 函数编译运行。
with open('source.txt') as f:
source = f.read()
exec(compile(source, 'source.txt', 'exec'))
方法八：使用 attrgetter 获取执行
在 operator 这个内置库中，有一个获取属性的方法，叫 attrgetter ，获取到函数后再执行。
from operator import attrgetter
class People:
def speak(self, dest):
print("Hello, %s" %dest)
p = People()
caller = attrgetter("speak")
caller(p)("")
方法九：使用 methodcaller 执行
同样还是 operator 这个内置库，有一个 methodcaller 方法，使用它，也可以做到动态调用实例方
法的效果。
from operator import methodcaller
class People:
def speak(self, dest):
print("Hello, %s" %dest)
caller = methodcaller("speak", "")
p = People()
caller(p)
第四章：魔法进阶扫盲
4.1 精通上下文管理器
with 这个关键字，对于每一学习Python的人，都不会陌生。
操作文本对象的时候，几乎所有的人都会让我们要用 with open ，这就是一个上下文管理的例
子。你一定已经相当熟悉了，我就不再废话了。
with open('test.txt') as f:
print(f.readlines())
what context manager？
基本语法
with EXPR as VAR:
BLOCK
先理清几个概念
1. with open('test.txt') as f:
2. open('test.txt')
3. f 
how context manager？
要自己实现这样一个上下文管理，要先知道上下文管理协议。
简单点说，就是在一个类里，实现了 __enter__ 和 __exit__ 的方法，这个类的实例就是一个上下
文管理器。
例如这个示例：
class Resource():
def __enter__(self):
print('===connect to resource===')
return self
def __exit__(self, exc_type, exc_val, exc_tb):
print('===close resource connection===')
def operate(self):
print('===in operation===')
with Resource() as res:
res.operate()
我们执行一下，通过日志的打印顺序。可以知道其执行过程。
===connect to resource===
===in operation===
===close resource connection===
从这个示例可以很明显的看出，在编写代码时，可以将资源的连接或者获取放在 __enter__ 中，而
将资源的关闭写在 __exit__ 中。
why context manager？
学习时多问自己几个为什么，养成对一些细节的思考，有助于加深对知识点的理解。
为什么要使用上下文管理器？
在我看来，这和 Python 崇尚的优雅风格有关。
1. 可以以一种更加优雅的方式，操作（创建/获取/释放）资源，如文件操作、数据库连接；
2. 可以以一种更加优雅的方式，处理异常；
第一种，我们上面已经以资源的连接为例讲过了。
而第二种，会被大多数人所忽略。这里会重点讲一下。
大家都知道，处理异常，通常都是使用 try...execept.. 来捕获处理的。这样做一个不好的地方
是，在代码的主逻辑里，会有大量的异常处理代理，这会很大的影响我们的可读性。
好一点的做法呢，可以使用 with 将异常的处理隐藏起来。
仍然是以上面的代码为例，我们将 1/0 这个  写在 operate 里
class Resource():
def __enter__(self):
print('===connect to resource===')
return self
def __exit__(self, exc_type, exc_val, exc_tb):
print('===close resource connection===')
return True
def operate(self):
1/0
with Resource() as res:
res.operate()
运行一下，惊奇地发现，居然不会报错。
这就是上下文管理协议的一个强大之处，异常可以在 __exit__ 进行捕获并由你自己决定如何处
理，是抛出呢还是在这里就解决了。在 __exit__ 里返回 True （没有return 就默认为 return
False），就相当于告诉 Python解释器，这个异常我们已经捕获了，不需要再往外抛了。
在 写 __exit__ 函数时，需要注意的事，它必须要有这三个参数：
exc_type：异常类型
exc_val：异常值
exc_tb：异常的错误栈信息
当主逻辑代码没有报异常时，这三个参数将都为None。
how contextlib?
在上面的例子中，我们只是为了构建一个上下文管理器，却写了一个类。如果只是要实现一个简单
的功能，写一个类未免有点过于繁杂。这时候，我们就想，如果只写一个函数就可以实现上下文管
理器就好了。
这个点Python早就想到了。它给我们提供了一个装饰器，你只要按照它的代码协议来实现函数内
容，就可以将这个函数对象变成一个上下文管理器。
我们按照 contextlib 的协议来自己实现一个打开文件（with open）的上下文管理器。
import contextlib
@contextlib.contextmanager
def open_func(file_name):
# __enter__
print('open file:', file_name, 'in __enter__')
file_handler = open(file_name, 'r')
# yield
yield file_handler
# __exit__
print('close file:', file_name, 'in __exit__')
file_handler.close()
return
with open_func('/Users/MING/mytest.txt') as file_in:
for line in file_in:
print(line)
在被装饰函数里，必须是一个生成器（带有yield），而yield之前的代码，就相当于 __enter__ 里
的内容。yield 之后的代码，就相当于 __exit__ 里的内容。
上面这段代码只能实现上下文管理器的第一个目的（管理资源），并不能实现第二个目的（处理异
常）。
如果要处理异常，可以改成下面这个样子。
import contextlib
@contextlib.contextmanager
def open_func(file_name):
# __enter__
print('open file:', file_name, 'in __enter__')
file_handler = open(file_name, 'r')
try:
yield file_handler
except Exception as exc:
# deal with exception
print('the exception was thrown')
finally:
print('close file:', file_name, 'in __exit__')
file_handler.close()
return
with open_func('/Users/MING/mytest.txt') as file_in:
for line in file_in:
1/0
print(line)
好像只要讲到上下文管理器，大多数人都会谈到打开文件这个经典的例子。
但是在实际开发中，可以使用到上下文管理器的例子也不少。我这边举个我自己的例子。
在OpenStack中，给一个虚拟机创建快照时，需要先创建一个临时文件夹，来存放这个本地快照镜
像，等到本地快照镜像创建完成后，再将这个镜像上传到Glance。然后删除这个临时目录。
这段代码的主逻辑是  ，而  ，属于前置条件，  ，是收尾工作。
虽然代码量很少，逻辑也不复杂，但是“  ”这个功能，在一个项目
中很多地方都需要用到，如果可以将这段逻辑处理写成一个工具函数作为一个上下文管理器，那代
码的复用率也大大提高。
代码是这样的
总结起来，使用上下文管理器有三个好处：
1. 提高代码的复用率；
2. 提高代码的优雅度；
3. 提高代码的可读性；
4.2 深入理解描述符
学习 Python 这么久了，说起 Python 的优雅之处，能让我脱口而出的， Descriptor（描述符）特性
可以排得上号。
描述符 是Python 语言独有的特性，它不仅在应用层使用，在语言语法糖的实现上也有使用到（在
下面的文章会一一介绍）。
当你点进这篇文章时
你也许没学过描述符，甚至没听过描述符。
或者你对描述符只是一知半解
无论你是哪种，本篇都将带你全面的学习描述符，一起来感受 Python 语言的优雅。
1. 为什么要使用描述符？