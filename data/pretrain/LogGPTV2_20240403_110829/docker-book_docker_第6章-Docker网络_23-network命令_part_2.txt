         "IPv6Gateway":"",
         "GlobalIPv6Address":"",
         "GlobalIPv6PrefixLen":0,
         "MacAddress":"02:42:ac:19:03:03"}
       }
     }
   }
   ```
   因为在启动时将`container3` 连接到`isolated_nw`  ，所以它根本没有连接到默认的`bridge` 网络。
6. 检查`container2` 所使用的网络。 如果你安装了Python，你可以打印输出格式化。
   ```
   $ docker inspect --format=''  container2 | python -m json.tool
   {
       "bridge": {
           "NetworkID":"7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812",
           "EndpointID": "0099f9efb5a3727f6a554f176b1e96fca34cae773da68b3b6a26d046c12cb365",
           "Gateway": "172.17.0.1",
           "GlobalIPv6Address": "",
           "GlobalIPv6PrefixLen": 0,
           "IPAMConfig": null,
           "IPAddress": "172.17.0.3",
           "IPPrefixLen": 16,
           "IPv6Gateway": "",
           "MacAddress": "02:42:ac:11:00:03"
       },
       "isolated_nw": {
           "NetworkID":"1196a4c5af43a21ae38ef34515b6af19236a3fc48122cf585e3f3054d509679b",
           "EndpointID": "11cedac1810e864d6b1589d92da12af66203879ab89f4ccd8c8fdaa9b1c48b1d",
           "Gateway": "172.25.0.1",
           "GlobalIPv6Address": "",
           "GlobalIPv6PrefixLen": 0,
           "IPAMConfig": null,
           "IPAddress": "172.25.0.2",
           "IPPrefixLen": 16,
           "IPv6Gateway": "",
           "MacAddress": "02:42:ac:19:00:02"
       }
   }
   ```
   请注意， `container2` 属于两个网络。 当您启动它时，它加入了默认`bridge` 网络，并在步骤3中将其连接到`isolated_nw` 。
   ![](images/working.png)
   eth0 Link encap:Ethernet HWaddr 02:42:AC:11:00:03
   eth1 Link encap:Ethernet HWaddr 02:42:AC:15:00:02
7. 使用`docker attach` 命令连接到正在运行的`container2` 并检查它的网络堆栈：
   ```
   $ docker attach container2
   ```
   使用`ifconfig` 命令检查容器的网络堆栈。 您应该看到两个以太网卡，一个用于默认`bridge` ，另一个用于`isolated_nw` 网络。
   ```
   $ sudo ifconfig -a
   eth0      Link encap:Ethernet  HWaddr 02:42:AC:11:00:03
             inet addr:172.17.0.3  Bcast:0.0.0.0  Mask:255.255.0.0
             inet6 addr: fe80::42:acff:fe11:3/64 Scope:Link
             UP BROADCAST RUNNING MULTICAST  MTU:9001  Metric:1
             RX packets:8 errors:0 dropped:0 overruns:0 frame:0
             TX packets:8 errors:0 dropped:0 overruns:0 carrier:0
             collisions:0 txqueuelen:0
             RX bytes:648 (648.0 B)  TX bytes:648 (648.0 B)
   eth1      Link encap:Ethernet  HWaddr 02:42:AC:15:00:02
             inet addr:172.25.0.2  Bcast:0.0.0.0  Mask:255.255.0.0
             inet6 addr: fe80::42:acff:fe19:2/64 Scope:Link
             UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
             RX packets:8 errors:0 dropped:0 overruns:0 frame:0
             TX packets:8 errors:0 dropped:0 overruns:0 carrier:0
             collisions:0 txqueuelen:0
             RX bytes:648 (648.0 B)  TX bytes:648 (648.0 B)
   lo        Link encap:Local Loopback
             inet addr:127.0.0.1  Mask:255.0.0.0
             inet6 addr: ::1/128 Scope:Host
             UP LOOPBACK RUNNING  MTU:65536  Metric:1
             RX packets:0 errors:0 dropped:0 overruns:0 frame:0
             TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
             collisions:0 txqueuelen:0
             RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
   ```
8. Docker内嵌DNS服务器可使用容器名称解析连接到给定网络的容器。 这意味着网络内的容器可以通过容器名称ping在同一网络中的另一个容器。 例如，从`container2` 可以按名称ping `container3` 。
   ```
   / # ping -w 4 container3
   PING container3 (172.25.3.3): 56 data bytes
   64 bytes from 172.25.3.3: seq=0 ttl=64 time=0.070 ms
   64 bytes from 172.25.3.3: seq=1 ttl=64 time=0.080 ms
   64 bytes from 172.25.3.3: seq=2 ttl=64 time=0.080 ms
   64 bytes from 172.25.3.3: seq=3 ttl=64 time=0.097 ms
   --- container3 ping statistics ---
   4 packets transmitted, 4 packets received, 0% packet loss
   round-trip min/avg/max = 0.070/0.081/0.097 ms
   ```
   此功能不适用于默认`bridge` 网络。 `container1`和`container2`都连接到默认的`bridge` 网络，但是并不能使用容器名称从`container2` ping `container1` 。
   ```
   / # ping -w 4 container1
   ping: bad address 'container1'
   ```
   但依然可直接ping IP地址：
   ```
   / # ping -w 4 172.17.0.2
   PING 172.17.0.2 (172.17.0.2): 56 data bytes
   64 bytes from 172.17.0.2: seq=0 ttl=64 time=0.095 ms
   64 bytes from 172.17.0.2: seq=1 ttl=64 time=0.075 ms
   64 bytes from 172.17.0.2: seq=2 ttl=64 time=0.072 ms
   64 bytes from 172.17.0.2: seq=3 ttl=64 time=0.101 ms
   --- 172.17.0.2 ping statistics ---
   4 packets transmitted, 4 packets received, 0% packet loss
   round-trip min/avg/max = 0.072/0.085/0.101 ms
   ```
   离开`container2` 容器，并使用`CTRL-p CTRL-q` 保持容器运行。
9. 当前， `container2` 连接到默认`bridge`网络和`isolated_nw` 网络，因此，`container2` 可与`container1` 以及`container3`进行通信。 但是，`container3` 和`container1` 没有任何共同的网络，所以它们不能通信。 要验证这一点，请附加到`container3`并尝试通过IP地址ping `container1` 。
   ```
   $ docker attach container3
   $ ping 172.17.0.2
   PING 172.17.0.2 (172.17.0.2): 56 data bytes
   ^C
   --- 172.17.0.2 ping statistics ---
   10 packets transmitted, 0 packets received, 100% packet loss
   ```
   离开`container3` 容器，并使用`CTRL-p CTRL-q`保持容器运行。
> 即使容器未运行，也可以将容器连接到网络。 但是， `docker network inspect` 仅显示运行容器的信息。
### 链接容器而不使用用户定义的网络
完成基本容器网络示例中的步骤后， `container2` 可以自动解析`container3` 的名称，因为两个容器都连接到`isolated_nw` 网络。 但是，连接到默认`bridge` 的容器无法解析彼此的容器名称。 如果您需要容器能够通过`bridge` 网络进行通信，则需要使用[遗留的连接](https://docs.docker.com/engine/userguide/networking/default_network/dockerlinks/)功能。 这是唯一的建议使用`--link` 的情况。 您应该强烈地考虑使用用户定义的网络。
使用遗留的`link` 标志为可为默认的`bridge` 网络添加以下功能进行通信：
- 将容器名称解析为IP地址的能力
- 使用`--link=CONTAINER-NAME:ALIAS` 定义一个网络别名去连接容器的能力
- 安全的容器连接（通过`--icc=false` 隔离）
- 环境变量注入
需要重申的是，当您使用用户自定义网络时，默认情况下提供所有这些功能，无需额外的配置。 **此外，您可以动态attach到多个网络，也可动态从多个网络中离开。**
- 使用DNS进行自动名称解析
- 支持`--link` 选项为链接的容器提供名称别名
- 网络中容器的自动安全隔离环境
- 环境变量注入
以下示例简要介绍如何使用`--link` 。
1. 继续上面的例子，创建一个新的容器`container4` ，并将其连接到网络`isolated_nw` 。 另外，使用`--link`标志链接到容器`container5` （不存在！）！
   ```
   $ docker run --network=isolated_nw -itd --name=container4 --link container5:c5 busybox
   01b5df970834b77a9eadbaff39051f237957bd35c4c56f11193e0594cfd5117c
   ```
   这有点棘手，因为`container5` 还不存在。 当`container5`被创建时， `container4`将能够将名称`c5` 解析为`container5` 的IP地址。
   > **注意** ：使用遗留的link功能创建的容器之间的任何链接本质上都是静态的，并且通过别名强制绑定容器。 它无法容忍链接的容器重新启动。 用户自定义网络中的新链接功能支持容器之间的动态链接，并且允许链接容器中的重新启动和IP地址更改。
   由于您尚未创建容器`container5` 尝试ping它将导致错误。 attach到`container4`并尝试ping任何`container5`或`c5` ：
   ```
   $ docker attach container4
   $ ping container5
   ping: bad address 'container5'
   $ ping c5
   ping: bad address 'c5'
   ```
   从`container4` 离开，并使用`CTRL-p CTRL-q` 使其保持运行。
2. 创建一个容器，名为`container5` ，并使用别名`c4`将其链接到`container4` 。
   ```
   $ docker run --network=isolated_nw -itd --name=container5 --link container4:c4 busybox
   72eccf2208336f31e9e33ba327734125af00d1e1d2657878e2ee8154fbb23c7a
   ```
   现在attach到`container4` ，尝试ping `c5` 和`container5` 。
   ```
   $ docker attach container4
   / # ping -w 4 c5
   PING c5 (172.25.0.5): 56 data bytes
   64 bytes from 172.25.0.5: seq=0 ttl=64 time=0.070 ms
   64 bytes from 172.25.0.5: seq=1 ttl=64 time=0.080 ms
   64 bytes from 172.25.0.5: seq=2 ttl=64 time=0.080 ms
   64 bytes from 172.25.0.5: seq=3 ttl=64 time=0.097 ms
   --- c5 ping statistics ---
   4 packets transmitted, 4 packets received, 0% packet loss
   round-trip min/avg/max = 0.070/0.081/0.097 ms
   / # ping -w 4 container5
   PING container5 (172.25.0.5): 56 data bytes
   64 bytes from 172.25.0.5: seq=0 ttl=64 time=0.070 ms
   64 bytes from 172.25.0.5: seq=1 ttl=64 time=0.080 ms
   64 bytes from 172.25.0.5: seq=2 ttl=64 time=0.080 ms
   64 bytes from 172.25.0.5: seq=3 ttl=64 time=0.097 ms
   --- container5 ping statistics ---
   4 packets transmitted, 4 packets received, 0% packet loss
   round-trip min/avg/max = 0.070/0.081/0.097 ms
   ```
   从`container4` 分离，并使用`CTRL-p CTRL-q` 使其保持运行。
3. 最后，附加到`container5` ，验证你可以ping `container4` 。
   ```
   $ docker attach container5
   / # ping -w 4 c4
   PING c4 (172.25.0.4): 56 data bytes
   64 bytes from 172.25.0.4: seq=0 ttl=64 time=0.065 ms