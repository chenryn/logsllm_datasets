I can't explain this one. Here's a test case I've been able to whittle down
from a bigger class:
    'use strict';
    const Thing = {
      x() {
        return ;
      },
      y() {
        for (let row of this.rows) {
          let uid = 42;
          console.log(uid);
        }
      }
    };
The generated code (unrelated parts elided):
    for (var _iterator = this.rows[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var row = _step.value;
      var _uid = 42;
      console.log(uid);
    }
Note how `_uid` is assigned, but it's accessed as `uid`. If I change the JSX
line to something else (eg., `;`) the problem goes
away. Seems to me like the JSX scope is leaking into the parallel function
scope, and somehow breaking it. I've not been able to reproduce the effect in
any other way; replacing the JSX with plain JS code stops the bug from
happening, for example.
However, this bug is oddly similar to this issue. Same underlying cause,
perhaps?