### 4.2 Saving Server Login Information

When using the xDB Replication Console to create a replication system, you will need to register both a publication server and a subscription server. During this process, you have the option to save the server’s login information. This section explains what happens if you choose to save this information.

#### 4.2.1 Server Login File

If you opt to save the login information, the server's network location (IP address and port number), admin username, and password are stored in a server login file. This file is located in a hidden directory under the home directory of the operating system account used to open the xDB Replication Console. For the exact location of this file, refer to Section 3.5.

The following dialog box shows the option to save login information for a publication server. In this example, the IP address `192.168.2.22` is entered in the Host field, `9051` in the Port field, `admin` in the User Name field, and an encrypted form of the password in the Password field. These details are saved in the server login file if the admin username and password validation are successful.

**Figure 4-7 - Save login information option for a publication server**

The entered values for the User Name and Password are validated against the admin username and password in the xDB Replication Configuration file on the host `192.168.2.22`. Successful authentication is required before the publication server can be registered and its login information saved. For more information on the xDB Replication Configuration file, see Section 2.3.1.3.

Similarly, the following dialog box shows the option to save login information for a subscription server. In this example, the IP address `192.168.2.22` is entered in the Host field, `9052` in the Port field, `admin` in the User Name field, and an encrypted form of the password in the Password field. These details are saved in the server login file if the admin username and password validation are successful.

**Figure 4-8 - Save login information option for a subscription server**

For more information on the purpose of these fields and the process of registering a subscription server, see Section 5.3.1.

#### Benefits of Saving Server Login Information

Saving server login information provides the convenience of immediate access to the publication server and its subordinate publications, or to the subscription server and its subordinate subscriptions. When you open the xDB Replication Console, the Publication Server nodes of saved publication servers and the Subscription Server nodes of saved subscription servers immediately appear in the replication tree, allowing you to perform administrative tasks without re-entering the server’s network location, admin username, and password.

If you do not save the server login information, the server nodes will not be visible in the replication tree, and you will need to re-register the server each time you open the xDB Replication Console.

**Note:** Each operating system account on a given host has its own server login file. Therefore, the servers that appear in the xDB Replication Console when opened are independently determined for each operating system account.

#### 4.2.2 Security Risks of Saved Server Login Information

While saving server login information offers convenience, it also poses security risks. If unauthorized individuals gain access to your operating system account, they could open the xDB Replication Console using your account. If the login information for publication or subscription servers is saved, the corresponding nodes will appear in the xDB Replication Console without any request for authentication. This allows an unauthorized person to perform any operation on the exposed publications and subscriptions, including potentially deleting the entire replication system.

**Note:** The publication database and subscription database cannot be deleted, but unauthorized replications could be forced to occur.

Therefore, it is crucial to ensure that operating system accounts on hosts with access to the xDB Replication Console and the replication system are secure.

---

### 5 Single-Master Replication Operation

This chapter describes how to configure and run xDB Replication Server for single-master replication systems. The steps and examples in this chapter are illustrated using the xDB Replication Console graphical user interface. The same steps can be performed from the operating system command line using the xDB Replication Server Command Line Interface (CLI). For details on the CLI commands, see Chapter 8.

#### 5.1 Prerequisite Steps

Before building a single-master replication system, certain steps must be taken to prepare the host environments, as well as the publication and subscription database servers. This section outlines these steps.

##### 5.1.1 Setting Heap Memory Size for the Publication and Subscription Servers

The publication and subscription servers are configured with default heap size parameters. The parameter `JAVA_HEAP_SIZE` is set during the installation of xDB Replication Server. This parameter is configured in the xDB Startup Configuration file. For more information on the xDB Startup Configuration file, see Section 2.3.1.4.

**Example xDB Startup Configuration file:**
```sh
#!/bin/sh
JAVA_EXECUTABLE_PATH="/usr/bin/java"
JAVA_MINIMUM_VERSION=1.7
JAVA_BITNESS_REQUIRED=64
JAVA_HEAP_SIZE="-Xms256m -Xmx1536m"
PUBPORT=9051
SUBPORT=9052
```

On a 32-bit system, the initial heap size is set to 128 megabytes (`-Xms128m`) and the maximum limit is set to 512 megabytes (`-Xmx512m`). On a 64-bit system, the initial heap size is 256 megabytes (`-Xms256m`) and the maximum limit is 1536 megabytes (`-Xmx1536m`).

These default values are generally sufficient for average workloads. However, depending on the average row size and pending backlog of replication updates, it may be beneficial to increase the heap size settings. To modify the default values, change the `JAVA_HEAP_SIZE` parameter in the xDB Startup Configuration file and restart the publication and subscription servers (see Sections 5.2.1 and 5.3.1).

The heap size value should conform to the available RAM on the host running the publication or subscription server. A general guideline is that the maximum heap size should not exceed 25% of the total RAM size.

**Considerations:**
- If both the publication server and subscription server are running on the same host, the minimum and recommended RAM capacities are:
  - **Minimum RAM Size:** 4 gigabytes for a 32-bit system, 8 gigabytes for a 64-bit system.
  - **Recommended RAM Size:** 8 gigabytes for a 32-bit system, 16 gigabytes for a 64-bit system.
- By default, both the publication server and subscription server are started, and both are required for single-master replication systems. If only multi-master replication systems are to be configured, the subscription server should be stopped to avoid redundant use of memory.
- If both servers are running on the same host, each reserves its own heap buffer. The total heap size for both servers should comply with the available RAM on the host.

##### 5.1.2 Enabling Synchronization Replication with the Log-Based Method

This section applies only to Postgres database servers of version 9.4 and later. If you plan to use the log-based method of synchronization replication with any publication database, the following configuration parameter settings are required in the `postgresql.conf` file of the Postgres database server:

- **wal_level:** Set to `logical`.
- **max_wal_senders:** Specifies the maximum number of concurrent connections (i.e., the maximum number of simultaneously running WAL sender processes). Set at least to the number of SMR publication databases on this database server that will use the log-based method. If MMR master nodes are to run on this database server, also add the number of MMR master nodes that will use the log-based method.
- **max_replication_slots:** Specifies the maximum number of replication slots. Set at least to the number of SMR publication databases on this database server that will use the log-based method. For additional MMR master nodes, see Section 2.2.10.4.

For more information on the log-based method of synchronization replication, see Section 2.2.10.

After altering any of these configuration parameters, the Postgres database server must be restarted.

Additionally, the `pg_hba.conf` file requires an entry for each publication database user of publication databases that will use the log-based method. Such database users must be included as a replication database user in the `pg_hba.conf` file. For more information, see Section 5.1.6.3.

##### 5.1.3 Enabling Access to the Database Servers

The following sections describe the configuration steps required to use xDB Replication Server on various types of database servers.

**No special steps are required to enable access to a Postgres database server.**

###### 5.1.3.1 Enabling Access to Oracle

**Note:** The directions in this section apply only if Oracle will be used as the publication or subscription database.

An Oracle JDBC driver jar file, such as `ojdbc5.jar`, must be accessible to the Java virtual machine (JVM) on the host running the publication server and the subscription server. If the publication server and subscription server are running on separate hosts, the Oracle JDBC driver must be accessible to the JVM on each host. Oracle JDBC driver version `ojdbc5` or later must be used.

**Step 1:** Download the Oracle JDBC driver, for example, `ojdbc5.jar`, from the Oracle download site to the host that will be running the publication server.

**Step 2:** Copy the `ojdbc5.jar` file to the directory `XDB_HOME/lib/jdbc`.

```sh
$ su root
Password:
$ cd /opt/PostgreSQL/EnterpriseDB-xDBReplicationServer/lib/jdbc
$ cp /home/user/Downloads/ojdbc5.jar .
$ ls -l
total 4032
-rw-rw-r-- 1 root root 355655 Jan 25 02:38 edb-jdbc14.jar
-rw-rw-r-- 1 root root 716209 Jan 25 02:38 edb-jdbc17.jar
-rw-rw-r-- 1 root root 317816 Jan 25 02:38 jtds-1.3.1.jar
-rw-r--r-- 1 root root 2091137 Jan 28 16:45 ojdbc5.jar
-rw-rw-r-- 1 root root 642809 Jan 25 02:38 postgresql-9.4-1201.jdbc4.jar
```

**Note:** You may also copy the `ojdbc5.jar` file to the `jre/lib/ext` subdirectory of the location where you installed your Java runtime environment.

**Step 3:** If the subscription server is running on a different host than the publication server, repeat steps 1 and 2 for the subscription server host.

###### 5.1.3.2 Enabling Access to SQL Server

**Note:** The directions in this section apply only if SQL Server will be used as the publication or subscription database.

The jTDS JDBC driver jar file `jtds-1.3.1.jar` must be accessible to the Java virtual machine (JVM) on the host running the publication server and the subscription server. If the publication server and subscription server are running on separate hosts, the jTDS JDBC driver must be accessible to the JVM on each host.

When you install xDB Replication Server, the `jtds-1.3.1.jar` file is placed in the directory `XDB_HOME/lib/jdbc`, so there is no manual configuration needed for this requirement.

**Step 1:** Ensure that SQL Server Authentication mode is enabled on your SQL Server database engine. SQL Server Authentication mode allows the use of SQL Server logins, such as the built-in system administrator login `sa`.

By default, only Windows Authentication mode is enabled, which uses Windows operating system accounts for authentication. To permit SQL Server Authentication mode, change the authentication mode to Mixed Mode Authentication, which allows both Windows Authentication and SQL Server Authentication. This can be done using SQL Server Management Studio. Refer to the appropriate SQL Server documentation for using SQL Server Management Studio.

**Step 2:** Ensure that SQL Server is accepting TCP/IP connections. In the SQL Server Configuration Manager, under SQL Server Network Configuration, set the TCP/IP protocol for the SQL Server instance to `Enabled`. The typical, default SQL Server instance names are `MSSQLSERVER` or `SQLEXPRESS`.

**Step 3 (Required only for a SQL Server publication database):** Ensure that SQL Server Agent is enabled and running. SQL Server Agent is a Windows service that controls job scheduling and execution with SQL Server.

xDB Replication Server uses SQL Server Agent for certain operations, such as scheduled shadow table history cleanup (see Section 7.5.1). SQL Server Agent can be started using SQL Server Configuration Manager. Refer to the appropriate SQL Server documentation for using SQL Server Configuration Manager.

##### 5.1.4 Preparing the Publication Database

This section discusses the preparation of a database that contains tables and views that will become members of publications. The tables and views to be used for any given publication must all reside in the same database. This database becomes the publication database of that publication. A publication database user name must be created or already exist with the following characteristics:

- The publication database user can connect to the publication database.
- The publication database user has the privileges to create control schema objects to store metadata used for controlling and tracking the replication process.
- The publication database user can read the tables and views that are to become members of publications.
- For publications that will use synchronization replication with the trigger-based method, the publication database user can create triggers on the publication tables. (For Oracle, the publication database user must have trigger creation privilege even for snapshot-only publications, though triggers will only be created for publications using synchronization replication.)

The examples used throughout the rest of this user’s guide are based on the following:

- The publication database user name is `pubuser`.
- The tables and view used in publications reside in a schema named `edb`.
- Three tables named `dept`, `emp`, and `jobhist` are members of schema `edb`.
- One view named `salesemp` is a member of schema `edb`. This view is a SELECT statement over the `emp` table.
- The Oracle system identifier (SID) of the publication database is `xe`. The SQL Server publication database name is `edb`. The Postgres publication database name is `edb`.

For preparing an Oracle publication database, see the next section. For preparing a SQL Server publication database, see Section 5.1.4.2. For preparing a Postgres publication database, see Section 5.1.4.3.

###### 5.1.4.1 Oracle Publication Database

**Note (For Oracle 12c):** The Oracle 12c multitenant architecture introduces the concept of the container database (CDB), which can contain multiple pluggable databases (PDBs). A pluggable database can be used as a publication database or a subscription database in a single-master replication system.

Oracle 12c still supports the usage of a single database referred to as a non-container database (non-CDB) that is compatible with Oracle versions prior to 12c. An Oracle 12c non-container database can also be used as a publication database or a subscription database in a single-master replication system.

The setup instructions for using an Oracle 12c publication database or subscription database are the same as for previous Oracle versions. Any special distinctions are indicated by a note within the instructions.

**Step 1:** Create a database user name for the publication database user. The publication database user name must have a password and the ability to create a database session. The publication database user becomes the owner of the control schema objects that will be created in the publication database to track, control, and record the replication process and history.

**Note (For Oracle 12c Pluggable Database):** The publication database user can be an Oracle local user or a common user. The local user exists within and has access to only a single, user-created pluggable database (PDB), which is to be used as the publication database. Common user names typically begin with `C##` or `c##` and can access multiple pluggable databases.

**Note (For Oracle 12c Pluggable Database):** Creation and granting of privileges for a local user must be done while connected to the pluggable database to be used as the publication database. Creation of a common user must be done within the Oracle 12c root container `CDB$ROOT`. Granting of privileges to the common user must be done while connected to the pluggable database to be used as the publication database.

**Note (For Oracle 12c Non-Container Database):** Creation and granting of privileges to the publication database user are performed in the same manner as for Oracle versions prior to 12c.

When creating the publication database definition, the publication database user name is entered in the Publication Service – Add Database dialog box (see Section 5.2.2).

```sql
CREATE USER pubuser IDENTIFIED BY password;
GRANT CONNECT TO pubuser;
```

**Step 2:** Grant the privileges needed to create the control schema objects.

The control schema objects are created in the schema owned by, and with the same name as the publication database user. That is, the publication database user’s schema is the control schema for an Oracle publication database.

```sql
GRANT RESOURCE TO pubuser;
```

**Step 3:** Grant the privileges required to create triggers on the publication tables. The `CREATE ANY TRIGGER` privilege must be granted to the publication database user.

```sql
GRANT CREATE ANY TRIGGER TO pubuser;
```

**Step 4:** Grant the privileges required to lock publication tables when creating triggers. The `LOCK ANY TABLE` privilege must be granted to the publication database user.

```sql
GRANT LOCK ANY TABLE TO pubuser;
```

**Step 5 (For Oracle 12c only):** Grant the privileges required to access tablespaces. The `GRANT UNLIMITED TABLESPACE` privilege must be granted to the publication database user. This requirement applies to both a pluggable database and a non-container database.

```sql
GRANT UNLIMITED TABLESPACE TO pubuser;
```

**Step 6:** The publication database user must be able to read the tables and views that are to be included in publications.