  * SVG命名空间（[http://www.w3.org/2000/svg）](http://www.w3.org/2000/svg%EF%BC%89)
  * MathML命名空间（[http://www.w3.org/1998/Math/MathML）](http://www.w3.org/1998/Math/MathML%EF%BC%89)
默认情况下，所有元素都位于HTML命名空间中。然而，如果解析器遇到了``或者``元素，就会“切换到”SVG以及MathML命名空间。这些命名空间都会产生外部内容。
在外部内容中，标记语言的解析过程与普通的HTML不一样。在解析``元素时能更清晰地看到这种不同点。在HTML命名空间中，``只能包含文本，没有后继，并且HTML实体不会被解码。而在外部内容中并非如此：外部内容的``可以包含子元素，实体也会被解码。
考虑如下标记语言：
    ABCABC
会被解析成如下DOM树：
> 备注：从现在开始，本文中DOM树内的所有元素都将包含一个命名空间。因此，`html style`表示HTML命名空间中有个`style`元素，而`svg
> style`表示SVG命名空间中有个``元素。
生成的DOM树也验证了我的分析：`html style`只包含文本内容，而`svg style`在会像普通元素一样被解析。
继续分析，我们很自然就会猜想：如果我们位于``或者``中，那么所有元素也会位于非HTML命名空间中，然而事实并非如此。HTML标准中包含名为
**MathML text integration point** （MathML文本集成点）以及 **HTML integration point**
（HTML集成点）的元素，这些元素的子元素都具有HTML命名空间（但某些情况除外，下面我会列出来）。
考虑如下示例：
以上内容会被解析成如下DOM树：
请注意观察，在MathML命名空间中，`style`元素是`math`的直接子元素，而`mtext`中的`style`元素则处于HTML命名空间中。这是因为`mtext`属于MathML文本集成点，因此解析器会切换命名空间。
MathML文本集成点包括：
  * `math mi`
  * `math mo`
  * `math mn`
  * `math ms`
HTML集成点包括：
  * `math annotation-xml`，如果其包含`encoding`属性，并且属性值等于`text/html`或者`application/xhtml+xml`
  * `svg foreignObject`
  * `svg desc`
  * `svg title最后`
我曾经坚信MathML文本集成点或者HTML集成点的所有子元素默认情况下都具有HTML命名空间，事实狠狠打了我的脸。HTML规范指出，默认情况下，MathML文本集成点的子元素都位于HTML命名空间中，但有两种情况除外：`mglyph`以及`malignmark`。只有当这两者是MathML文本集成点的直接子元素时才会触发例外情况。
来考虑如下标记语言：
请注意，`mglyph`为`mtext`的直接子元素，位于MathML命名空间中，而另一个`mglyph`则为`html`的子元素，位于HTML命名空间中。
假设我们面对的是一个“当前元素”，想确定其命名空间。此时我已经制定了一些经验法则：
1、当前元素位于其父元素的命名空间中，除非满足如下条件。
2、如果当前元素为``或者``，并且其父元素位于HTML命名空间中，那么当前元素则位于SVG或者MathML命名空间中。
3、如果父元素或者当前元素为HTML集成点，那么除非当前元素为``或者``，否则将位于HTML命名空间中。
4、如果父元素或者当前元素为MathML集成点，那么除非当前元素为``、``、``或者``，否则将位于HTML命名空间中。
5、如果当前元素为``、``、``、``、``、``、``、``、``、``、``、``、``、``、``、``、``、``、``、``、``、``、``、``、``、``、``、``、``、``、``、``、``、``、``、``、``、``、``、``、``、``、``、``或者``，并且定义了`color`、`face`或者`size`属性，那么栈上的所有元素都会被闭合，直至碰到MathML文本集成点、HTML集成点或者HTML命名空间中的元素为止。然后，当前元素也会位于HTML命名空间中。
当我在HTML规范中找到`mglyph`这个瑰宝时，马上就意识到这是滥用`html form`突变来绕过过滤器的绝佳方法。
## 0x04 绕过DOMPurify
现在让我们回到绕过DOMPurify的payload上来：
这个payload用到了错误嵌套的`html form`元素，也包含`mglyph`元素，会生成如下DOM树：
这个DOM树人畜无害，所有元素都位于DOMPurify的允许列表中。要注意的是，`mglyph`位于HTML命名空间中，而看上去像是XSS的payload则是`html
style`中的一个文本。由于这里有个嵌套`html form`，因此在重解析时会出现突变。
因此这里DOMPurify不会执行任何操作，会返回经过序列化的HTML：
这个片段包含嵌套`form`标签，因此当被赋值给`innerHTML`时，会被解析成如下DOM树：
因此现在第二个`html
form`没有被创建，`mglyph`为`mtext`的直接子元素，意味着其位于MathML命名空间中。因此，`style`同样位于MathML命名空间中，其内容也不会被当成文本来解析。随后，``会闭合``元素，现在`img`会在HTML命名空间中创建，导致XSS。
## 0x05 总结
总结一下，这种绕过方式主要结合了以下几点：
1、DOMPurify的典型使用场景导致HTML标记语言被解析两次。
2、HTML规范中包含特殊情况，可以用来创建嵌套`form`元素。然而在重新解析时，第二个`form`会被忽略。
3、`mglyph`以及`malignmark`是HTML标准中的特殊元素。如果这两者为MathML文本集成点的直接子元素，那么即使其他标签默认情况下位于HTML命名空间中，这两者也将处于MathML命名空间中。
4、结合上述几点，我们可以创建一段标记语言，其中包含2个`form`元素以及初始位于HTML命名空间的`mglyph`元素，在重新解析时，后者将位于MathML命名空间中，使后续的`style`标签采用不同方式解析，导致XSS。
当Cure53针对我的绕过方式进行更新后，大家又找到了另一种绕过方式：
大家可以研究下为什么这个payload能行之有效。我提示一下：其原理与我在本文中找到的bug一样。
这种绕过方式也让我意识到，如下模式很容易造成XSS突变：
    div.innerHTML = DOMPurify.sanitize(html)
这由整体的设计思路所决定，因此找到另一个例子也只是时间问题。这里我强烈建议大家在使用DOMPurify时，传入`RETURN_DOM`或者`RETURN_DOM_FRAGMENT`选项，这样就不会执行序列化、再解析的过程。