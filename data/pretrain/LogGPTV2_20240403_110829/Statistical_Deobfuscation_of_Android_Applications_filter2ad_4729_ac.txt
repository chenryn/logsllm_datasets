example, the node of the class SQLiteOpenHelper in
our example is known because this class is part of the
Android API. All program elements that are part of
the Android API are referred by their name, and thus
any obfuscator keeps their names intact.
• Constructor methods (both dynamic and static) have
ﬁxed names and are thus known.
• If a method overrides a known method (e.g., a method
that is part of the Android API), then the nodes repre-
senting both methods are known. We enforce this rule
implicitly by keeping a single node to represent both
methods. We explain this shortly.
• All remaining packages, classes, methods, and ﬁelds
are unknown.
Grouping Method Nodes.
In the context of inheritance and method overriding, intro-
ducing a node for each declared method leads to issues. The
reason is that the two methods must have the same signa-
ture, where a method’s signature is deﬁned by the method’s
name along with the number and types of its parameters.
To guarantee that the deobfuscation is semantic-preserving,
we combine all methods related via inheritance in a single
node. We refer to the process of combining all such methods
as grouping.
To detect all overrides that occur in a given set of classes,
for each class we collect all of the methods it implements.
Then, for each of these methods, we link it with all the
methods it overrides. Finally, we combine all methods that
are (possibly indirectly) linked together into a single node.
4.2 Relationships
To capture the structure of an Android application, we
introduce relationships between its program elements. We
deﬁne all such relationships in Figure 2. The second column
in the table deﬁnes the type of each edge. For example, the
ﬁrst edge type is (m, op, performs-op). This edge type says
that it connects a method m to an operation op with the re-
lationship performs-op. The third column speciﬁes under
what condition the edge is added between two nodes (of the
correct type). The edge of the ﬁrst type is added whenever
the method m performs an operation op. The types m and
op are the ones we already deﬁned in Section 4.1. We or-
ganize the relationships into two broad categories: method
relationships and structural relationships.
Method Relationships.
Method relationships capture the semantic behavior of
methods. This is important because method names typically
describe the method’s behavior. For example, the method
name execSQL in our example of Figure 1 describes that this
method executes an SQL command. We remark on several
points pertaining to method relationships. First, the pro-
gram elements denoted by o, arg and v are not necessarily
ﬁelds. For example, the method call field.foo().bar() re-
sults in two edges of type receiver: (foo, bar, receiver)
and (field, foo, receiver). Second, for every loop occur-
ring in a method, we capture how diﬀerent values and ﬁelds
are used within the loop using the relationships loop-read
and loop-write. To capture which classes are accessed by a
method, we introduce the relationship writes-classfield
and the relationship calls-classmethod.
Finally, we remark that the relationships deﬁned above, in
addition to capturing the semantics of methods, also capture
how ﬁelds, classes and methods are used by the application.
For example, adding the information that method m reads
ﬁeld f also conveys that f is read by m.
Structural Relationships.
The structural relationships capture the relations between
the nodes, such as whether two classes are deﬁned within
the same package or not. These features are particularly
important for predicting obfuscated third-party libraries, as
the correct prediction of a small number of classes within
the library’s package signiﬁcantly aids to accurately predict
the library’s remaining program elements. Note that for
method parameters, we express not only their type, but also
how often they occur. This is captured with the relation-
ship argtype-N. Further, we deﬁne the two relationships
read-before and written-before to capture the order of
reads and writes to ﬁelds.
Comparison to Other Prediction Systems.
Android applications have signiﬁcantly more complex struc-
ture compared to programs encoded in, e.g., untyped, dy-
namic languages. Precisely capturing this structure is key to
enable the accurate prediction of Android applications. De-
Guard is the ﬁrst prediction system for programs that sup-
348Relationship
Type
Condition for Relating Two Program Elements
Method Relationships
Method
operation
(m, op, performs-op)
(m, t, performs-cast)
(m, t, instance-of)
(m, e, returns)
method m performs operation op (e.g. addition +, xor, etc.)
method m performs a cast to type t
method m performs an instanceof check for type t
method m returns an expression e (e.g. a ﬁeld or a method call)
Reads and
writes
(m, e, uses)
(m, f , writes)
expression e appears in m
method m modiﬁes ﬁeld f
Arguments and
receivers
(m, arg, flows-into)
(o, m, receiver)
there is a call o.m(. . . , arg, . . .) with argument arg
there is a call o.m(. . .)
Loops
Accessed
Classes
Packages
Classes
Types
(v, m, loop-read)
(f , m, loop-write)
method m uses the value v within a loop
method m writes to the ﬁeld f within a loop
(m, c, writes-classfield)
(m, c, calls-classmethod)
class c that contains a ﬁeld that is read by m
class c that contains a method called by m
Structural Relationships
(e, p, contained-in-package)
(p1, p2, direct-subpackage-of)
(p1, p2, subpackage-of)
(f , c, field-in)
(m, c, method-in)
(c1, c2, overrides)
(c, i, implements)
(c1, c2, extends)
(f , t, field-type)
(m, t, return-type)
(m, t, argtype-N)
package p contains a class, a method, or a ﬁeld e
package p1 that is directly contained within a package p2
package p1 is contained within a package p2, but not directly
ﬁeld f is declared in a class c
method m declared in a class c
class c1 overrides a program element in class c2
class c that implements an interface i
class c1 extends class c2
the type of ﬁeld f is t
method m that returns an object of return type t
method m has N parameters of type t
Access modiﬁers
(e, am, has-modifier)
method or ﬁeld e has access modiﬁer am
Fields
(f , e, gets)
(f , e, initialized-by)
(f1, f2, read-before)
(f1, f2, written-before)
assignment expression f = e (e.g. a ﬁeld name or a method call)
there is an initialization statement statements f = e
ﬁeld f1 is read before ﬁeld f2
ﬁeld f1 is written before ﬁeld f2
Figure 2: Relationships used to relate the program elements of Android applications. The second column deﬁnes the edge
type (i.e. the program elements it related). Each relationship is added if the condition in the third column is true.
ports a rich set of structural relationships, including types,
structural hierarchies, and access modiﬁers. In our evalua-
tion, we show that DeGuard strikes a balance between the
accuracy and eﬃciency of prediction: the set of relationships
deﬁned above are suﬃcient to accurately predict a signiﬁcant
part (roughly 80%) of the program elements obfuscated by
ProGuard, while keeping the complete prediction time rea-
sonable (under a minute on average).
4.3 Pairwise Feature Functions
The pairwise features ϕi are derived from the relationships
deﬁned above, based on the relationships observed in the
dependency graphs used in the learning phase. Formally, let
G1 = (V1, E1), . . . , Gm = (Vm, Em) be the set of dependency
graphs used in the learning phase with naming assignments.
For each edge (Vi, Vj, rel ) ∈ E1 ∪ . . . ∪ Em that appears in
the dependency graphs, we deﬁne a pairwise feature
(cid:26) 1
0
ϕi(N, N
(cid:48)
, Rel ) =
if N = ni, N(cid:48) = nj, Rel = rel
otherwise
where ni and nj are the names assigned to the program
elements denoted by Vi and Vj. The pairwise features deﬁne
an indicator function for each pair of labels and kind of
relationship observed in the training set of non-obfuscated
programs. While the pairwise features are derived from the
training data, the weights associated to these features are
learned during the learning phase.
5. CONSTRAINTS
In this section we deﬁne the constraints that our deob-
fuscation mechanism must satisfy while renaming program
elements to ensure both syntactic and semantic validity of
the deobfuscated application. First, we describe method
naming constraints, which are more complex to deﬁne due
to method overrides. Afterwards, we describe naming con-
straints for ﬁelds, classes, and packages.
5.1 Naming Constraints for Methods
Method naming constraints are necessary for both seman-
tic reasons and for syntactic well-formedness. According to
Java’s semantics, whenever a class extends another class,
the method declared in the subclass overrides a method de-
clared in the super class if the two methods have the same
349public void a(A a) {}
public void b(Object o) {}
public void c() {}
1 public class A {
2
3
4
5 }
6 public class B extends A {
7
8
9 }
10 public class C extends B {
11
12 }
public void g() {}
private int h() {}
public void x() {}
Figure 3: An example that illustrates diﬀerent types of
method naming constraints
signature, i.e. the same name and list of parameter types.
Method overrides thus change the application’s semantics.
Further, all methods within the same class must have dis-
tinct signatures. Below, we give an example to illustrate
diﬀerent kinds of method naming constraints. Afterwards,
we describe how DeGuard derives these constraints.
Example.
We illustrate method naming constraints with an example.
Consider the program in Figure 3. Here we have three classes
that exemplify diﬀerent cases of method naming constraints.
The name of the method A.a(A) is not constrained by
any method declared in Figure 3 because it has a unique
list of parameter types. Here, the method A.a(A) is the
only method that has one parameter of type A. In contrast,
A.b(Object) cannot be renamed to equals, because then
it would override java.lang.Object.equals(Object) from
the Java standard library. This constraint is needed because
A implicitly extends Object and the list of parameter types
a matches that of the method equals declared in the class
Object.
The names of the methods B.g() and B.h() must be dis-
tinct even though their return types and access level mod-
iﬁers are diﬀerent. This is because neither the return type
nor the access level modiﬁer is part of a method signature,
and therefore renaming both methods to the same name re-
sults in the same method signature.
The names of the methods B.g() and A.c() must be dis-
tinct due to the semantics of method overriding in the pres-
ence of inheritance. Here, the class B extends A. Therefore,
a potential change of the name of B.g() to that of A.c()
would result in overriding method A.c(). The names of the
methods B.h() and A.c() must be also distinct due to the
semantics of method overriding, even though B.h() is pri-
vate. The method C.x()’s name is not constrained by the
name of B.h() because B.h() is declared as private. Ac-
cording to Java’s semantics, no method may override private
methods.
Expressing Method Constraints.
Our example shows that in addition to equality constraints,
inequality constraints are also needed to formalize all nam-
ing properties of methods. Equality constraints can be han-
dled implicitly by representing methods that must have an
identical signature with one node in the dependency graph
(see Section 4). This guarantees that all such methods are
renamed consistently.
Inequality constraints, necessary to
avoid accidental overrides due to inheritance, must be ex-
methods ← aboveMethods ∪ class.nonPrivateMethods()
reportConstraints(methods ∪ class.privateMethods())
subClasses ← classes that directly extend/implement class
for subClass ∈ subClasses do
Algorithm 1 Detecting inequality constraints for method
names
1: function findConstraints
object ← java.lang.Object
2:
handleClass(object, ∅)
3:
4: end function
5: function handleClass(class, aboveMethods)
6:
7:
8:
9:
10:
11:
12: end function
13: function reportConstraints(methods)
14:
15:
16:
17:
18:
19: end function
(cid:46) Report all inequality constraints for methods
partitions ← partition methods by parameter types
for partition ∈ partitions do
report partition as an inequality constraint
handleClass(subClass, methods)
end for
end for
plicitly speciﬁed. We specify inequality constraints as sets
of program elements that have distinct names.
Formally, let V = {V1, . . . , Vn} be the set of nodes in
the dependency graph. We deﬁne an inequality constraint
as a set of nodes C ⊆ V . An assignment (cid:126)y = (y1, . . . , yn)
of names to program elements satisﬁes the inequality con-
straint C if ∀Vi, Vj ∈ C. yi (cid:54)= yj. For example, to spec-
ify that the methods C.x() and B.g() must have distinct
names, we use the inequality constraint C = {C.x(), B.g()}.
Note that we deﬁne inequality constraint using sets of el-
ements whose elements must be pairwise distinct, as op-
posed to standard binary inequality constraints (e.g., C.x()
(cid:54)= B.g()) because the encoding of the former is more concise.
Deriving Inequality Constraints for Methods.
We next describe how we derive inequality constraints
for methods. Without loss of generality, we treat inter-
faces identically to classes. The inequality constraints for
methods are derived using Algorithm 1. The function find-
Constraints calls handleClass with the class Object and
the empty set of method names (since Object has no su-
per classes). The recursive call on Line 10 reaches all other