用户接入恶意WIFI即打开某APP，泄露用户cookie，攻击者可以通过token获取用户手机号、收藏、收货地址等
## 漏洞详情
查看manifest.xml有如下deeplink activity
    "com.xxxx.client.android.modules.deeplink.ParseDeepLinkActivity" android:noHistory="true" android:theme="@style/Transparent" android:windowSoftInputMode="0x10">
逆向ParseDeepLinkActivity代码
    @Override  // android.app.Activity
        public void onCreate(Bundle arg13) {
            String v0;
            e v13;
            Intent v1_2;
            String frompage;
            String v3 = "";
            super.onCreate(arg13);
            if(s.i()) {
                try {
                    this.uri = this.getIntent().getData();
                    if(this.uri == null) {
                        this.finish();
                        return;
                    }
                    e.e.b.a.n.a.d.b();
                    jb.b("CT_TAG", "uri = " + this.uri);
                    v3 = this.uri.getQuery();
                    if(TextUtils.isEmpty(v3)) {
                        goto label_61;
                    }
                    else {
                        this.schemabean = g.SCHEME_GETURLJSON(v3);
                        v3 = this.schemabean;
                        if(((SchemeBean)v3) == null) {
                            goto label_61;
                        }
                        boolean v3_1 = TextUtils.isEmpty(this.schemabean.getFrompage());
                        goto label_37;
                    }
                    goto label_62;
                }
                catch(Exception v1) {
                    goto label_174;
                }
    ..
会从查询参数中获取并反列序json，得到结构SchemeBean，之后会根据bean的内容进行派发
    if(bean1 != null) {
                    if(g.a(v1, bean1, v6)) {
                        return;
                    }
                    String v7_1 = bean.getChannelName();
                    int v8 = -1;
                    switch(v7_1.hashCode()) {
                        case -2034194897: {
                            boolean v7_2 = v7_1.equals("fenlei_detail");
                            if(v7_2) {
                                v8 = 18;
                            }
                            break;
                        }
                        case 3322092: {
                            if(v7_1.equals("live")) {
                                v8 = 0;
                            }
                            break;
                        }
                        case 1288290882: {
                            if(v7_1.equals("wiki_all_product")) {
                                v8 = 40;
                            }
                            break;
                        }
                        case 1843825908: {
                            if(v7_1.equals("taskreward")) {
                                v8 = 23;
                            }
                            break;
                        }
                        case 1991869741: {
                            if(v7_1.equals("pinpai_detail")) {
                                v8 = 17;
                            }
                            break;
                        }
    ...
    case 3277: {
                            if(v7_1.equals("h5")) {
                                v8 = 60;
                            }
                            break;
                        }
渠道非常多，h5表示要打开h5页面，如下代码会通过路由寻找跳转到对应的activity
    case 60: {
                            if(("1".equals(bean.getLogin())) && !e.e.b.a.b.c.Ya()) {
                                Ea.a(v1, 0x392FC);
                                return;
                            }
                            b v3_19 = e.a().a("path_activity_zdm_web_browser", "group_route_browser");
                            v3_19.putstring("url", bean.getLinkVal());
                            v3_19.putstring("sub_type", "h5");
                            v3_19.putstring("from", e.e.b.a.u.h.a(v6));
                            v3_19.t();
                            goto label_1102;
                        }
逆向路由注册代码，loadInto为路由统一注册接口，找到对应的activity为HybridActivity
    public class o implements b {
        @Override  // com.xxxx.android.router.api.e.b
        public void loadInto(Map arg8) {
            arg8.put("path_activity_zdm_web_browser", a.a(e.e.a.c.a.a.a.ACTIVITY, HybridActivity.class, "path_activity_zdm_web_browser", "group_route_browser", null, -1, 0x80000000));
        }
    }
分析HybridActivity的onCreate方法，里面初始化webview并且loadUrl
    @Override  // com.xxxx.client.android.base.BaseActivity
        protected void onCreate(Bundle arg5) {
            super.onCreate(arg5);
            this.A = new HybridPresenter(this, this.za(), this.getIntent().getStringExtra("link_type"), this.getIntent().getStringExtra("sub_type"));
            if(com.xxxx.client.android.hybrid.b.a.a.TRANSPARENT == this.P().h()) {
                int v5 = Build.VERSION.SDK_INT;
                if(v5 >= 21) {
                    int v0 = 0x500;
                    if(v5 >= 23 && this.P().l() == 1) {
                        v0 = 0x2500;
                    }
                    this.getWindow().getDecorView().setSystemUiVisibility(v0);
                    this.getWindow().setStatusBarColor(ContextCompat.getColor(this.getContext(), 0x106000D));
                }
            }
            this.getLifecycle().a(this.A);
            if(2 == this.A.b(this.getIntent())) {
                return;
            }