title:Java for Mobile Devices: A Security Study
author:Mourad Debbabi and
Mohamed Saleh and
Chamseddine Talhi and
Sami Zhioua
Java for Mobile Devices: A Security Study
Mourad debbabi, Mohamed Saleh, Chamseddine Talhi and Sami Zhioua
Computer Security Laboratory
Concordia Institute for Information Systems Engineering
Concordia University, Montreal, Canada
{debbabi, m saleh, talhi, zhioua}@ciise.concordia.ca
Abstract
Java 2 Micro-Edition Connected Limited Device Con-
ﬁguration (J2ME CLDC) is the platform of choice when
it comes to running mobile applications on resource-
constrained devices (cell phones, set-top boxes, etc.). The
large deployment of this platform makes it a target for se-
curity attacks. The intent of this paper is twofold: First,
we study the security architecture of J2ME CLDC. Second,
we provide a vulnerability analysis of this Java platform.
The analyzed components are: Virtual machine, CLDC API
and MIDP (Mobile Information Device Proﬁle) API. The
analysis covers the speciﬁcations, the reference implemen-
tation (RI) as well as several other widely-deployed imple-
mentations of this platform. The aspects targeted by this
security analysis encompass: Networking, record manage-
ment system, virtual machine, multi-threading and digital
right management. This work identiﬁes security weaknesses
in J2ME CLDC that may represent sources of security ex-
ploits. Moreover, the results reported in this paper are valu-
able for any attempt to test or harden the security of this
platform.
1 Introduction
With the proliferation of mobile, wireless and internet-
enabled devices (e.g. PDAs, cell phones, pagers, etc.), Java
is emerging as a standard execution environment due to
its security, portability, mobility and network support fea-
tures. The platform of choice in this setting is J2ME CLDC
[14, 20].
It is an enabling technology for a plethora of
services and applications: games, messaging, presence and
availability, web-services, mobile commerce, etc.
This platform has been deployed now by more than
20 telecommunication operators. The total number of de-
ployed Java mobile devices in the market exceeds 250 mil-
lion units worldwide. According to IDC, a prestigious mar-
ket research ﬁrm, there will be more than 1.2 billion de-
ployed Java-based mobile devices by 2006.
The typical most widely deployed J2ME CLDC plat-
form consists of several components that can be classi-
ﬁed into virtual machine, APIs and tools. The virtual ma-
chine is the KVM [15, 21]. The APIs are CLDC [14]
and MIDP[18, 20]. The tools are the pre-veriﬁer and the
Java Code Compacter (JCC). KVM (Kilobyte Virtual Ma-
chine) is an implementation of the Java Virtual Machine
(JVM) [9]. It lies on top of the host operating system and
its main goal is to execute compiled program units (class
ﬁles). CLDC provides the most basic set of libraries and
virtual-machine features for resource-constrained, network-
connected devices. MIDP is a layer on top of CLDC con-
ﬁguration.
It extends the latter with more speciﬁc capa-
bilities, namely, networking, graphics, security, application
management, and persistent storage. The preveriﬁer checks
all the Java classes to enforce object, stack and control-ﬂow
safety. This is done off-line and the result is stored as at-
tributes in the compiled program units. The Java code com-
pactor (JCC) is in charge of the romizing process. The latter
is a feature of KVM that allows to load and link Java classes
at startup. The idea is to link these classes off-line, then cre-
ate an image of these classes in a ﬁle and ﬁnally to link the
image with KVM.
With the large number of applications that could be avail-
able for Java-enabled devices, security is of paramount im-
portance. Applications can handle user-sensitive data such
as phonebook data or bank account information. Moreover,
Java-enabled devices support networking, which means that
applications can also create network connections and send
or receive data. Security in all of these cases should be a
major concern. Malicious code has caused a lot of harm
in the computer world, and with phones having the ability
to download and run applications there is an actual risk of
facing this same threat. Currently, viruses for phones start
to emerge (e.g. Cabir), a number of model speciﬁc attacks
has been reported (e.g Nokia 6210 DoS, Siemens S55 SMS,
etc.), and mobile attacks and exploits are starting to get at-
tention in the hacker community (e.g. www.defcon.org).
This paper represents a careful study of J2ME CLDC
security aspects with the purpose of providing a security
evaluation for this Java platform.
In this regard, we fol-
lowed two main paths. One is related to the speciﬁcations
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
and the other to implementations. In the case of the spec-
iﬁcations, we intend to provide a comprehensive study of
the J2ME CLDC security architecture, pointing out possi-
ble shortcomings and aspects open for improvement. As
for implementations, our aim is to look into several imple-
mentations of the platform like Sun’s Reference Implemen-
tation (RI), phone emulators, and actual phones. This is
carried out with the purpose of analyzing code vulnerabil-
ities leading to security holes. The usefulness of such an
investigation is to ﬁnd out areas of common vulnerabilities
and relate them either to the speciﬁcations or to common
programming mistakes.
By identifying weaknesses that may represents sources
of security breaches, our security evaluation gives a start
point to a process that aims to improve the security of J2ME
CLDC. This paper is organized into four sections beginning
with the introduction.
In section 2, we present the main
security architecture of J2ME CLDC. In section 3, we list
the results of the vulnerability analysis by starting with the
previously reported ﬂaws. Finally, section 4 concludes the
paper.
2 J2ME CLDC Security Architecture
The high-level J2ME CLDC architecture deﬁnes 3 layers
on top of the device’s operating system (Figure 1): The vir-
tual machine(KVM) [12], the Conﬁguration (CLDC) which
is a minimal set of class libraries that provide the basic func-
tionalities for a particular range of devices, and the Proﬁle
(MIDP) which is an extension of the Conﬁguration that ad-
dresses the speciﬁc demands of a device family. At the im-
plementation level, MIDP also consists of a set of Applica-
tion Program Interfaces (APIs). J2ME CLDC platform can
be further extended by combining various optional pack-
ages with the conﬁgurations and the associated proﬁles.
Applications developed for the J2ME CLDC platform
are called MIDlets. They are downloaded to the device in
the form of two ﬁles: the Java Archive (JAR), and the Java
Application Descriptor (JAD). The JAR is an archive ﬁle
that contains the following ﬁles: The JAR manifest, class
ﬁles, and supporting ﬁles. The JAR manifest is a text ﬁle
that contains various attributes like the MIDlet name and
the vendor name. Class ﬁles are the preveriﬁed classes, and
supporting ﬁles could be graphic ﬁles for instance.
One JAR ﬁle can contain more than one MIDlet and the
set of MIDlets in a JAR ﬁle is called MIDlet suite.
The JAD on the other hand, is a text ﬁle that contains
several attributes like the MIDlet name and MIDP version
needed to run the MIDlet. Some of these attributes are
mandatory while others are optional. The software entity
on the device that is responsible for MIDlet management
such as downloading, installing, running, etc. is called the
Application Management System (AMS), or the
Java Application Manager (JAM).
When presenting the security architecture of J2ME
CLDC, we make distinction between CLDC and MIDP. The
Profile(cid:13)
Configuration(cid:13)
Virtual Machine(cid:13)
Host Operating System(cid:13)
Figure 1. High-Level J2ME CLDC Architecture
reason behind this distinction is that security concerns are
distributed between the two. The security of J2ME CLDC
platform can be categorized into low-level security, appli-
cation security, and end-to-end security:
• Low-level security deals with safety issues related to
the virtual machine. In general, the role of the low-
level security mechanisms is to ensure that class ﬁles
loaded into the virtual machine do not execute in any
way that is not allowed by the Java virtual machine
speciﬁcation [12].
• By application-level security, we mean that “Java ap-
plication can access only those libraries, system re-
sources and other components that the device and the
Java application environment allows it to access” [14].
• End-to-end security has a larger scope involving se-
cure networking. The main objective of end-to-end se-
curity is to ensure safe delivery of data and code be-
tween server machines and client devices.
In J2ME CLDC platform, low-level and application se-
curity are addressed in CLDC, while MIDP addresses ap-
plication and end-to-end security.
2.1 CLDC Security
To understand the security model of CLDC, it is im-
portant to notice that the security of CLDC is affected by
the absence of some general Java features - that are usually
present in Java platforms - and that have been dropped be-
cause of performance and security issues. Those dropped
Java features are the following:
• No Java Native Interface (JNI): Mainly for security
and performance reasons, JNI [11] is not implemented
in CLDC. Although, a Kilo Native Interface (KNI)
[25] is provided for J2ME CLDC, KNI has not the abil-
ity to dynamically load and call arbitrary native func-
tions from Java programs (which could pose signiﬁ-
cant security problems in the absence of the full Java 2
security model).
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
• No user-deﬁned class loaders: Mainly for security rea-
sons, the class loader in CLDC is a built-in “bootstrap”
class loader that cannot be overridden, replaced, or re-
conﬁgured. The elimination of user-deﬁned class load-
ers is part of the “Sandbox” security model restrictions.
• No thread groups or daemon threads: While support-
ing multithreading, CLDC has no support for thread
groups or daemon threads.
• No support for reﬂection: No reﬂection features are
supported, and therefore there is no support for remote
method invocation (RMI) or object serialization.
2.1.1 Low-Level Security
Low level security in CLDC is mainly based on type safety
mechanisms. The class ﬁle veriﬁer is the module in charge
of type safety checking. The class ﬁle veriﬁer ensures that
the bytecodes and other items stored in class ﬁles cannot
contain illegal instructions, cannot be executed in an ille-
gal order, and cannot contain references to invalid memory
locations or memory areas that are outside the Java object
memory (the object heap) [14].
Since conventional class ﬁle veriﬁcation is too demand-
ing for resource-constrained devices, class ﬁles are ﬁrst pre-
veriﬁed on the development platform before being saved on
the device. The veriﬁer performs only a linear scan of the
bytecode, without the need of a costly iterative dataﬂow al-
gorithm like the one used by the conventional veriﬁer. The
details of the J2ME CLDC veriﬁcation process can be found
in [5].
2.1.2 Application-level Security
The CLDC application security is mainly ensured by adopt-
ing a sandbox model, by protecting system classes, and by
restricting dynamic class loading:
• Sandbox Model: In the CLDC Sandbox model, an ap-
plication must run in a closed environment in which
the application can access only those libraries that have
been deﬁned by the conﬁguration, proﬁles, and other
classes supported by the device. More speciﬁcally, the
CLDC sandbox model requires that:
1. Java class ﬁles are properly veriﬁed and are valid
Java classes.
2. Only a closed predeﬁned set of Java APIs is avail-
able to the application programmer, as deﬁned
by CLDC, proﬁles and manufacturer-speciﬁc
classes.
3. Downloading, installing, and managing MIDlets
on the devices takes place at the native level in-
side the virtual machine. Therefore, the appli-
cation programmer cannot modify or bypass the
standard class loading mechanisms of the virtual
machine.
4. The set of functions accessible to the virtual ma-
chine is closed. Thus, developers cannot down-
load any new libraries containing native func-
tionality or access any native functions that are
not part of the Java libraries provided by CLDC,
MIDP, or the manufacturer.
• Protecting System Classes:
In CLDC, the applica-
tion programmer cannot override, modify, or add any
classes to the protected system packages, i.e. pack-
ages belonging to conﬁguration, proﬁle, or manufac-
turer. Thus, the system classes are protected from the
downloaded applications. Also, the application pro-
grammer is not able to manipulate the class ﬁle lookup
order in any way.