### 文件名与inode

文件名存储在inode中，当你在目录下查找各个文件名时，可能需要访问磁盘一到多次。如果将名称存储在目录文件中，则无论有多少名称，都只需从单一磁盘块中读取即可。

如果文件名与inode各自独立，那么同一个物理文件可以拥有多个文件名，只需要通过不同的目录条目引用相同的inode即可。这些引用甚至不需要在同一目录内！这种概念称为文件别名，在UNIX系统中被称为连接（link），是一种非常方便且广泛使用的技术。在六种不同的UNIX版本中，我们发现`/usr`目录下有10%至30%的文件是连接。

### 重命名和移动文件

在UNIX文件系统设计中，重新命名文件或目录，或在同一文件系统内移动文件的速度非常快：只有名称需要改变或移动，而不会影响内容。然而，在不同文件系统之间移动文件时，需要对文件的所有块进行读取和写入操作。

### 文件删除

如果一个文件有多个名称，那么删除文件时应该怎么做？是否所有名称都应该立即消失，还是只删除其中一个名称？这取决于文件系统的设计师。UNIX选择了后者，并在inode条目中包含了一个连接计数。文件删除会减少这个计数，但只有当计数为零时，文件块才会被重新分配给可用空间列表。

### 硬连接与软连接

因为目录条目只包含inode编号，所以它们只能引用同一物理文件系统内的文件。为了在不同文件系统之间创建连接，UNIX引入了另一种连接类型：软连接（soft link）或符号连接（symbolic link）。符号连接指向另一个目录条目，而不是inode条目。指向的条目是一个标准的UNIX路径名称，因此可以指向文件系统内的任何位置，甚至是跨加载点的位置。

符号连接可能导致文件系统中的无限循环。为了避免这种情况，通常建议不要超过8个连续的符号连接。以下是一个两个元素的循环示例：

```sh
$ ls -l
total 0
lrwxrwxrwx 1 jones devel 3 2002-09-26 08:44 one -> two
lrwxrwxrwx 1 jones devel 3 2002-09-26 08:44 two -> one
```

在这个例子中，`one`和`two`都是损坏的符号连接。

### 目录的硬连接

基于技术上的原因（例如防止循环），目录通常不能有硬连接，但可以有符号连接。唯一的例外是在目录创建时自动产生的“.”和“..”条目。

### 设备作为文件

UNIX的一个先进理念是将设备视为文件。所有的UNIX系统都有一个名为`/dev`的顶层目录，其中包含了一些特殊的文件名，如`/dev/audio`、`/dev/sda1`和`/dev/tty03`。这些设备文件由设备驱动程序控制，负责与特定的外部设备通信。虽然设备名称看起来像普通文件，但它们实际上是关闭了某些访问模式的特殊文件。

### 文件大小限制

UNIX文件的大小通常受限于两个因素：inode条目中分配的位数用于保存文件大小（以字节计），以及文件系统本身的大小。此外，一些UNIX内核还允许管理员设置文件大小的限制。大多数UNIX文件系统使用的数据结构在一个文件中记录数据块列表，通常限制为大约168万个块，每个块的大小从1024到65536字节不等，可以在文件系统创建时设置并固定。

### 无名文件

UNIX操作系统的一个特点是打开供输入或输出的文件名称不会保留在内核的数据结构中。因此，在命令行上针对标准输入、标准输出或标准错误输出重定向的文件名不会被引用的进程所知。尽管如此，一些现代UNIX系统提供了`/dev/stdin`、`/dev/stdout`和`/dev/stderr`或`/dev/fd/0`、`/dev/fd/1`和`/dev/fd/2`这样的名称来弥补这一缺陷。

### 文件权限

UNIX文件系统的主要区别之一在于所有权和权限。文件有两种所有权：用户（user）和组（group），每种所有权都有自己的权限。新的文件通常会继承其创造者的所有者和组成员身份，只有系统管理员可以通过`chown`和`chgrp`命令更改这些属性。

文件权限包括读取（read）、写入（write）和执行（execute）。这些权限分别针对用户、组和其他人设置。文件权限可以通过`ls`命令的长格式显示，并通过`chmod`命令更改。`umask`命令用于设置默认权限。

### 示例

```sh
$ umask
002
$ touch foo
$ ls -l foo
-rw-rw-r-- 1 jones devel 0 2002-09-21 16:16 foo
$ rm foo
$ umask 023
$ touch foo
$ ls -l foo
-rw-r--r-- 1 jones devel 0 2002-09-21 16:16 foo
```

在这个例子中，初始权限掩码为002，即删除其他人的写入权限。`touch`命令仅更新文件的时间戳，如有需要则创建文件。`ls -l`命令报告文件类型和权限字符串。我们将掩码改为023后重建文件，以删除组的写入权限和其他人的写入与执行权限。最终权限字符串为`rw-r--r--`，符合预期。

### 执行权限

执行权限通常用于可执行的程序或脚本。编译后的程序通常会自动具有执行权限，但脚本需要手动使用`chmod`命令添加。