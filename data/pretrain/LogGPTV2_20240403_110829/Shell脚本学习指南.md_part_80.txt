果文件名存在inode里，当你在目录下寻找各个文件名时，可能得访问磁盘一到多次。
将名称存储在目录文件里，再多的名称都只需自单一磁盘块里取出即可。
如果文件名与inode各自独立，则同一个物理文件，就能拥有数个文件名，只需通过
不同的目录条目引用到相同inode即可，这些引用甚至不需要在同一个日录里！这是
文件别名的概念，在UNIX下称之为连接（link），是一个相当方便且广为使用的功
能。在6种不同的UNIX版本下，我们就发现/usr下有10%~30%的文件为连接。
UNIX文件系统设计里，还有一个很有用的结果就是重新命名文件或目录，或是在同一
个UNIX实现文件系统内移动它，速度都很快：只有名称需要改变或移动，面不会动到
内容。在文件系统之间移动文件，则需要对文件所有块进行读取与写人的操作。
如果文件有数个名称，那么哪一个才能删除文件？应该在删除后，所有名称立即消失，
还是只有某一个被删除？这部分是由文件系统的设计师决定支持别名还是连接：UNIX
选择后者。UNIX的inode条目包括了连接到文件内容的计数。文件副除将引发连接计数
的减少，但只有计数为零时，文件块最终才会重新指派给可用空间的列表。
因为目录条目包括的只是inode数字，所以它只可以引用同一个物理文件系统内的文件。
我们已知道UNIX文件系统通常会包含数个加载点，我们怎么才能在这个文件系统里微
一个违到另一个文件系统里的连接？解决方式是使用另一种连接：软连接（softlink），
或称为符号连接（symboliclink），有时直接称为symlink，这是为了与第一种硬连接
www.TopSage.com
---
## Page 473
文件与文件系统
461
（hardlink）加以区别。符号连接表示的是“该目录条目指向另一个目录条目”（注16），
而非inode条目。指向的条目（pointed-to entry）为一般UNIX路径名称，因此可以指
向文件系统内任何位置，就算是跨加载点也可以。
符号连接也表示可能在文件系统里产生无穷循环的可能性，为防止这样的情况发生，如
需制作一连串的连接，请不要超过8个（传统上）。以下为两个元素的循环：
$ 18 -1
显示连接循环
1.2wx2WXxvx
total 0
i jones
deve1
3 2002-09-26 08:44 one -> tvo
$f11eona
lrwxrwxrvog
1 jones
devel
3 2002-09-26 08;44 tw0 -> 0ne
one是什么文件？
one: brokien symbolic link to tvo .
two: broken symbolie 1ink to one
$ file two
tVO是什么文件？
cat: one: Too nany levels of symbolic links
$ cat obe
试着显示cne文件
基于技术上的理由（其中一个可能会造成循环），：目录通常不能有硬连接，但可以有符
号连接。此规则的例外就是，与目录，它们在目录被建立时即自动地产生。
设备作为UNIX文件
UNIX另一个先进的嫩法，便是将文件的概念延展到系统上的设备。所有的UNIX系统
都拥有名为/dev的顶层目录，在该目录下，则是一些难懂的文件名，例如/dev/
audio、/dev/sda1与/dev/tty03。这些设备文件由特殊软件模块控制，也就是设备
驱动程序（devicedriver），它会知道如何与特定的外部设备进行沟通。虽然设备名称会
关闭”访问模式。
注意：将设备整合到层级式文件系统里，是UNIX最棒的点子（The integration of devices into
the hierarchical file system was the best idea in UNIX.).
 Rob Pike et al., 《The Use of Name Spaces in Plan 93, 1992.
/dev树里的实体以特殊工具mxnod所建立，该工具通常隐藏在MAKEDEV这个Shell脚
本里，且需要系统管理员权限才能执行：见mkiod（1）与MAKEDEV（8）的手册页。
大部分UNIX的用户很少需要引用/dev树下的成员，不过有两个例外：/Gev/nul1与
/dev/tty，这些我们在2.5.5.2节里已做过介绍。
注16：在inode中的文件类型会记录文件是将号连接，且应大部分的文件系统设计中，它指到
的文件名称会被存储在将号连接的数据块中。
www.TopSage.com
---
## Page 474
462
附录B
20世纪90年代，一些UNIX版本引进随机伪设备（randompseudodevice），/dev/
urandom，作为永远非空的随机字节流。许多密码与安全性软件，需要这样的数据来源。
我们在第10章已经展示过，使用/dev/urandom构建一个难猜的临时文件名。
UNIX文件到底可以多大
UNIX的文件大小通常受限于两个硬性条件：在inode条目里所分配到的位数，用来保存
文件大小（以字节计），以及文件系统本身的大小。除此之外，有些UNIX内核还提供管
理员设置文件大小的限制，大部分UNIX文件系统所使用的数据结构会在一个文件中记
录数据块列表，加诸的限制是大约168万个块，其中一个块的大小基本上是1024到
65536个字节，可在文件系统建立期被设置且固定住。最后，而文件系统备份设备的容
量，也可能会加上更进一步与站台相关的限制。
没有名称的文件
UNIX操作系统另一个特点，就是打开供输入或输出的文件名称，不会被保留在内
核的数据结构中，因此，在命令行上针对标准输入、标准输出或是标准错误输出而
被重定向的文件名，都不为被引用的进程所知，怒想看：我们的文件系统里已经有
几百万个文件了，这三个没有名称也没有不好！不过为了弥补这个缺陷，近期有叠
UNIX系统提供了这样的名称/dev/stdin,/dev/stdout与/dev/stderr，或是
比较雄记的/dev/fd/0、/Gev/fa/1与/Gev/fa/2。GNU/Linux与 SunSolaris还
支持/proC/PID/fd/0。下面我们可以来看看你的系统是否支持它们：你要不就是
执行成功，如下所示：
S ecbo Se1lo, world > /dev/stdout
Hello, wor1d
要不就是失败，如下所示：
S echo Hello.world > /dev/etdout
/Gev/8tGout : Permisslon denied,
很多UNIX程序发现它们在重定向文件时需要名称，所以一般惯例是使用连字号作
为文件名，使用连字号不表示文件名为连字号：而是指标准输入或标准输出，视上
下文而定，我们在这里强调这是习增用法，因为并非所有UNIX软件都如此应用。
如果你就是不喜欢这样的文件，你也可以前置目录名称伪装它，例如./--Cata。
部分程序遵德惯例，详见2.5.1节使用双进宇号选项--，表示命令行自此之后是一
个文件，而非一个选项，不过这种方式依然并非统一用法。
www.TopSage.com
---
## Page 475
文件与文件系统
大部分现行UNIX文件系统都使用32位整数，以保存文件大小，且由于文件定位系统调COIm1
用，可以在文件中前后移动，因此该整数必须带有正负号。最大可能的文件大小为
2”。1个字节，约为2GB（注17）。到了20世纪90年代初期，许多磁盘设计都小于此
数字，但在2000年时磁盘却能容纳100GB甚至更大的空间，甚至还能将数个碰盘结合
成单一逻辑性磁盘，所以现在才能有更大型的文件系统。
UNIX厂商已渐渐升级至可处理64位的文件系统上，即能支持至8亿GB。但你想想，如
果写了一个这么大的文件，以当前合理的执行速度10MB/s来看，这个文件要执行27800
年！这个移植绝对会产生相当大的影响，因为所有现行使用“随机访问文件定位系统调
用”的软件都必须被更新。为避免这种大规模的升级，很多厂商仍允许在较新系统上使
用旧式的32位大小，只要不超过2GB限制即可正常运作。
UNIX文件系统建立时，基于效能上的理由会保留一小部分空间，通常是10%，给由root
执行的进程使用。文件系统本身所需的inode表格空间，通常是放在特殊的初级块，只
供磁盘控制器硬件可以访问。因此，磁盘有效空间通常只有磁盘厂商估计的80%。
有些系统里会提供降低这些保留空间的命令：在大型磁盘上，我们会建议你使用它。在
BSD及商用UNIX系统上，你可以参考tunefs（8）手册页，GNU/Linux的系统则可参考
rune2fs(8)。
内置Shell命令ulimit可控制系统资源的限制。-a选项将显示所有资源的值。在我们
的系统上，结果如下：
S ulimit -a
显示当前用户的进程限制
file size (blocks)
unlinited
你的系统可能会由于本地管理的政策不同而有不一样的结果。
在某些UNIX站台，磁盘限制是启动的（详见quota（1）的手册页），它可以进一步限制
单一用户所能使用的文件系统空间总量。
UNIX文件属性
本附录稍早，在“文件系统实现概况”的部分曾提及UNIX文件系统的实现，并说明inode
的条目记录中包括了meladata：除了名称之外，有关文件的相关信息。现在我们要讨论
的就是这些属性，因为它们与文件系统的用户息息相关。
注17：GB=gigabyte，约十亿宇节，在计算机里，使用G如果非度登衡单位，即表示2：
1,073,741,824,
www.TopSage.com
---
## Page 476
464
附录B
文件所有权与权限
或许，与单一用户的个人计算机文件系统比起来，UNIX文件的最大不同之处就在于所
有权（ownership）与权限（permissions）了。
所有权
在很多的个人计算机上，任何的进程或用户都能读取或写人所有文件，因此计算机病毒
现在对读者来说非常熟悉。但是因为UNIX用户能访问的文件系统是受到限制的，所以
要替换或破坏重要的文件系统元件很难：病毒很少对UNIX系统造成问题。
UNIX文件有两种所有权（或称所有权）：用户（user）与组（group），它们各有自已的
权限。一般来说，文件的所有者应具完整的访问权，而该所有者的工作组的成员拥有的
权限会有些许限制，除此之外的其他人，权限就再更少一些。前述最后的类别，在UNIX
的文件里称之为其他人（other）。文件所有权可使用1s命令的完长模式来显示。
新的文件通常会继承其创造者的所有者与组成员，如果要给予适当的权限，则只有系统
管理员通过chowm与chgrp命令改变它们的属性。
在inode条目记录中，用户与组都以数字识别而非名称。因为人们通常偏好以名称识别，
因此系统管理员提供对应的表格，一直以来我们都称为密码文件：/etc/passwd与组文
件/etc/group。在大型站点，这些文件多半会替换为某种网络分布式的数据库形式。
这些文件或是数据库，任何登录的用户都可读取，不过现今偏向使用程序库调用
setpwent（）、getpwent（）与endpwent（）访问密码数据库、使用setgrent（）、
getgrent（）与endgrent（)访间组数据库：参考getpwenr(3）与gergrenr(3）的手册页。
如果你的站点使用数据库取代/etc下的文件，你可以试试Shell命令：ypcatpasswd
检查密码数据库，或ypmatchjoinespasswd寻找用户jones的条目记录。如果你
的站台使用NIS+而非NIS，则yp命令应改为niscatpasswd.org_dir与nismatch
name=jones passwd.org_dif,
重点部分是通过用户与组标识符的数字值来控制访问，如果一文件系统通过用户smith
以userID100被加载或导人，则一个文件系统的userID100指定给用户jones，那
么jones便能完整访间smith的文件。就算目标系统下还有另一个snith用户也一
样，这类的考虑在大型组织的UNIX文件系统下就相当重要了，因它面向全局性可访间
的UNIX文件系统：用户与组的识别必须涵盖整个组织范围，是必须的考虑。问题不是
只有这里讲的这么简单：用户与组的标识符也有诸多限制。旧式UNIX系统仅能为每一
个配置16位，也就是总计为2"=65536个值。较新的UNIX系统则充许32位的标识
www.TopSage.com
---
## Page 477
文件与文件系统
465
符，遗的是，它们有许多都被加诸严格的限制，大大地限制了标识符的数目，这些数
字对大型企业而言仍嫌不足。
权限
UNIX文件系统权限有三种类型：读取（read）、写人（write）与执行（execute）。它们
每一个在inode数据结构里都只需要单一位，即可指出权限的存在与否。它们会分别针
对用户、组，与其他人设置权限。文件权限可通过1s命令的元长模式显示，通过chmod
命令变更。因为权限每个设置都只需要三个位，因此它可以单一八进制（注18）数字表
示，chmod命令也接受3个成4个八进制数字的参数或符号形式，
chmod
语法
chmod [ options ] mode file (s)
主要选项
f
强制变更，如累可能的语（如累失败，不要显示信息）。
-R
将变更通归地应用到整个目录。
用途
变更文件或目录的权限。
行为模式
必需的参数mode，可以是纯对性的3个或4个八进制数字之一个权限掩码，或
是一或多个字母的持号表示：a（全部，同于ugo）、g（组）、o（其他人）、
或u（用户），再接上=（设置）、+（加入）。或-（除去），最后则是一或多
个r（读取）、w（写入），或x（执行）。多将号的设置需以运点分隔，国此，
755始模式，等月于u=rwx，go=rx、a=rx,u+w与a=rwx,go=w，
通归的形式是相当危险，请谨慎使用！它可能会因误用chmod-R应用，而
常要从备份媒体中恢复整个文件树。
注18：BSD 系统例外：它们提供sapped与zappnd标志，可使用chtlags设置之，
www.TopSage.com
---
## Page 478
466
耐B
注章：有些操作系统支持额外的权限，其中有个很有用、但UNIX没有的权限。叫作附加权限OIT
（注19）：它在日志文件上特别好用，可用来确保数据只能被加入，但现存的数据不能被更
改。当然，如果此文件能被删除，就能再替换为变更数据后的文件，所以附加权限提供的
安全性只是错觉。
默认权限的设置会应用至每一个新建立的文件：它们由uask命令控制，以给定的参数
设置默认值，如未提供参数，则直接显示默认值。umask的值为三个八进制数字，表示
要被拿走的权限：通常值为077，指的是给用户完整的权限（读取、写人、执行），而组
与其他人都不具任何权限。其结果为新建立之文件，限制在只有拥有它们的用户可以访
间。
现在让我们来看看这些文件权限：
S umask
显示当前的权限掩码
$ touch foo
列出与文件相关的信息
建立一个空文件
S 1s -1 foo
--3-RI-RI-
1 jones
deve1
0 2002-09-21 16:16 fo0
S rm foo
删除文件
1s: foo: No such file or directory
$ 18 -1 foo
再次列出与文件相关的信息
一开始，权限掩码为2（确切说法为002），即副除其他人的写入权限，touch只是更新
文件最后写入的时间戳，如有需要时建立文件。1s-1命令为长式文件列出的惯用
语法。它报告了-的文件类型（一般文件）与权限字符串rw-rw-r--（指的是用户与组
具读取与写入权限，其他人则具读取权限）等信息。
我们将掩码改为023之后重建文件，以删除组的写入权限与其他人的写人与执行的权限。
会看到这样的权限字符串：rW-r--r--，也就是我们所预期的：删除组与其他人的写人
权限：
$ umask 023
$ touch foo
重设权限拖码
建立空文件
$ 18 -1 foo
0 2002-0921 16:16 foo
列出文件相关信息
-rw-r--r--
1 jones
权限运作
什么是执行权限？文件通常不具此权限，除非它们是可以执行的程序或脚本。通常这类
程序的连接器都会自动地加上执行权限，不过脚本不会，我们得自行使用chmod变更。