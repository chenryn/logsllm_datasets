depends on the output size of the TLS PRF used in com-
puting the Finished message and of the hash function
used in the HMAC algorithm in the record protocol.
Decryption is the reverse of the process described
above. As noted in [2], any error in decryption is treated
as fatal – an error message is sent to the sender and all
cryptographic material, including the RC4 key, is dis-
posed of. This enables an active attacker to force the use
of new encryption and MAC keys: the attacker can induce
session termination, followed by a new session being es-
tablished when the next message is sent over TLS, by
simply modifying a TLS Record Protocol message. This
could be used to ensure that the target plaintext in an at-
tack is repeatedly sent under the protection of a fresh RC4
key. However, this approach is relatively expensive since
it involves a rerun of the full TLS Handshake Protocol,
involving multiple public key operations and, more impor-
tantly, the latency involved in an exchange of 4 messages
(2 complete round-trips) on the wire. A better approach
is to cause the TCP connection carrying the TLS trafﬁc
to close, either by injecting sequences of FIN and ACK
messages in both directions, or by injecting a RST mes-
sage in both directions. This causes the TLS connection
to be terminated, but not the TLS session (assuming the
session is marked as “resumable” which is typically the
case). This behaviour is codiﬁed in [8, Section 7.2.1].
Now when the next message is sent over TLS, a TLS
session resumption instance of the Handshake Protocol
is executed to establish a fresh key for RC4. This avoids
the expensive public key operations and reduces the TLS
latency to 1 round-trip before application data can be sent.
On large sites, session resumption is usually handled by
making use of TLS session tickets [17] on the server-side.
Cr = Pr ⊕ Zr,
for the rth bytes of the ciphertext, plaintext and RC4
keystream respectively (for r = 1,2,3 . . .). The data that
is transmitted has the form HDR||C, where C is the con-
catenation of the individual ciphertext bytes.
The RC4 algorithm is intialized in the standard way at
the start of each TLS connection with a 128-bit encryption
key. This key, K, is derived from the TLS master secret
that is established during the TLS Handshake Protocol; K
2.5 Passwords
Text-based passwords are arguably the dominant mecha-
nism for authenticating users to web-based services and
computer systems. As is to be expected of user-selected
secrets, passwords do not follow uniform distributions.
Various password breaches of recent years, including the
Adobe breach of 150 million records in 2013 and the
RockYou leak of 32.6 million passwords in 2009, attest
to this with passwords such as 123456 and password
116  24th USENIX Security Symposium 
USENIX Association
4
frequently being counted amongst the most popular.4 For
example, our own analysis of the RockYou password data
set conﬁrmed this: the number of unique passwords in
the RockYou dataset is 14,344,391, meaning that (on av-
erage) each password was repeated 2.2 times, and we
indeed found the most common password to be 123456
(accounting for about 0.9% of the entire data set). Our
later simulations will make extensive use of the Rock-
You data set as an attack dictionary. A more-ﬁne grained
analysis of it can be found in [20]. We also make use of
data from the Singles.org breach for generating our target
passwords. Singles.org is a now-defunct Christian dating
website that was breached in 2009; religiously-inspired
passwords such as jesus and angel appear with high fre-
quency in its 12,234 distinct entries, making its frequency
distribution quite different from that of the RockYou set.
There is extensive literature regarding the rea-
sons for poor password selection and usage, includ-
ing [1, 9, 21, 22]. In [4], Bonneau formalised a number of
different metrics for analysing password distributions and
studied a corpus of 70M Yahoo! passwords (collected in
a privacy-preserving manner). His work highlights the
importance of careful validation of password guessing
attacks, in particular, the problem of estimating attack
complexities in the face of passwords that occur rarely
– perhaps uniquely – in a data set, the so-called hapax
legomena problem. The approach to validation that we
adopt beneﬁts from the analysis of [4], as explained fur-
ther in Section 4.
3 Plaintext Recovery via Bayesian Analysis
In this section, we present a formal Bayesian analysis
of plaintext recovery attacks in the broadcast setting for
stream ciphers. We then apply this to the problem of
extracting passwords, specialising the formal analysis and
making it implementable in practice based only on the
single-byte and double-byte keystream distributions.
3.1 Formal Bayesian Analysis
Suppose we have a candidate set of N plaintexts, denoted
X , with the a priori probability of an element x ∈ X
being denoted px. We assume for simplicity that all the
candidates consist of byte strings of the same length n.
For example X might consist of all the passwords of a
given length n from some breach data set, and then px can
be computed as the relative frequency of x in the data set.
If the frequency data is not available, then the uniform
distribution on X can be assumed.
4A comprehensive list of data breaches, including password breaches,
can be found at http://www.informationisbeautiful.net/
visualizations/worlds-biggest-data-breaches-hacks/.
Next, suppose that a plaintext from X is encrypted S
times, each time under independent, random keys using
a stream cipher such as RC4. Suppose also that the ﬁrst
character of the plaintext always occurs in the same po-
sition r in the plaintext stream in each encryption. Let
c = (ci j) denote the S× n matrix of bytes in which row
i, denoted c(i) for 0 ≤ i < S, is a vector of n bytes cor-
responding to the values in positions r, . . . ,r + n− 1 in
ciphertext i. Let X be the random variable denoting the
(unknown) value of the plaintext.
We wish to form a maximum a posteriori (MAP) es-
timate for X, given the observed data c and the a priori
probability distribution px, that is, we wish to maximise
Pr(X = x | C = c) where C is a random variable corre-
sponding to the matrix of ciphertext bytes.
Using Bayes’ theorem, we have
Pr(X = x | C = c) =Pr( C = c | X = x)·
Pr(X = x)
Pr(C = c)
.
Here the term Pr(X = x) corresponds to the a priori
distribution px on X . The term Pr(C = c) is inde-
pendent of the choice of x (as can be seen by writing
Pr(C = c) = ∑x∈X Pr(C = c | X = x)· Pr(X = x)). Since
we are only interested in maximising Pr(X = x | C = c),
we ignore this term henceforth.
Now, since ciphertexts are formed by XORing
keystreams z and plaintext x, we can write
Pr(C = c | X = x) =Pr( W = w)
where w is the S× n matrix formed by XORing each row
of c with the vector x and W is a corresponding random
variable. Then to maximise Pr(X = x | C = c), it sufﬁces
to maximise the value of
Pr(X = x)· Pr(W = w)
over x ∈ X . Let w(i) denote the i-th row of the matrix w,
so w(i) = c(i) ⊕ x. Then w(i) can be thought of as a vector
of keystream bytes (coming from positions r, . . . ,r +n−1)
induced by the candidate x, and we can write
Pr(W = w) =
S−1
∏
i=0
Pr(Z = w(i))
where, on the right-hand side of the above equation, Z
denotes a random variable corresponding to a vector of
bytes of length n starting from position r in the keystream.
Writing B = {0x00, . . . ,0xFF} for the set of bytes, we
can rewrite this as:
Pr(W = w) = ∏
z∈Bn
Pr(Z = z)Nx,z
where the product is taken over all possible byte strings
of length n and Nx,z is deﬁned as:
Nx,z = |{i : z = c(i) ⊕ x}0≤i<S|,
5
USENIX Association  
24th USENIX Security Symposium  117
that is, Nx,z counts the number of occurrences of vector
z in the rows of the matrix formed by XORing each row
of c with candidate x. Putting everything together, our
objective is to compute for each candidate x ∈ X the
value:
Pr(X = x)· ∏
z∈Bn
Pr(Z = z)Nx,z
and then to rank these values in order to determine the
most likely candidate(s).
Notice that the expressions here involve terms Pr(Z =
z) which are probabilities of occurrence for n consecu-
tive bytes of keystream. Such estimates are not generally
available in the literature, and for the values of n we are
interested in (corresponding to putative password lengths),
obtaining accurate estimates for them by sampling many
keystreams would be computationally prohibitive. More-
over, the product ∏z∈Bn involves 28n terms and is not
amenable to calculation. Thus we must turn to approxi-
mate methods to make further progress.
Note also that taking n = 1 in the above analysis, we
obtain exactly the same approach as was used in the single-
byte attack in [2], except that we include the a priori
probabilities Pr(X = x) whereas these were (implicitly)
assumed to be uniform in [2].
3.2 Using a Product Distribution
Our task is to derive simpliﬁed ways of computing the
expression
Pr(X = x)· ∏
z∈Bn
Pr(Z = z)Nx,z
and then apply these to produce efﬁcient algorithms for
computing (approximate) likelihoods of candidates x ∈
X .
The simplest approach is to assume that the n bytes of
the keystreams can be treated independently. For RC4,
this is actually a very good approximation in the regime
where single-byte biases dominate (that is, in the ﬁrst
256 positions). Thus, writing Z = (Zr, . . . ,Z r+n−1) and
z = (zr, . . . ,z r+n−1) (with the subscript r denoting the
position of the ﬁrst keystream byte of interest), we have:
Pr(Z = z) ≈
n−1
∏
j=0
Pr(Zr+ j = zr+ j) =
n−1
∏
j=0
pr+ j,z
where now the probabilities appearing on the right-hand
side are single-byte keystream probabilities, as reported
in [2] for example. Then writing x = (x0, . . . ,x n−1) and
rearranging terms, we obtain:
Pr(Z = z)Nx,z ≈
∏
z∈Bn
n−1
∏
j=0
∏
z∈B
Nx j ,z, j
p
r+ j,z
where Ny,z, j = |{i : z = ci, j ⊕y}0≤i<S| counts (now for sin-
gle bytes instead of length n vectors of bytes) the number
of occurrences of byte z in the column vector formed by
XORing column j of c with a candidate byte y.
Notice that, as in [2], the counters Ny,z, j for y ∈ B
can all be computed efﬁciently by permuting the coun-
ters N0x00,z, j, these being simply counters for the number
of occurrences of each byte value z in column j of the
ciphertext matrix c.
In practice, it is more convenient to work with loga-
rithms, converting products into sums, so that we evaluate
for each candidate x = (x0, . . . ,x n−1) an expression of the
form
γx := log(px) +
n−1
∑
j=0
∑
z∈B
Nx j,z, j log(pr+ j,z).
Given a large set of candidates X , we can streamline the
computation by ﬁrst computing the counters Ny,z, j, then,
for each possible byte value y, the value of the inner sum
∑z∈B Ny,z, j log(pr+ j,z), and then reusing these individual
values across all the relevant candidates x for which x j = y.
This reduces the evaluation of γx for a single candidate x
to n + 1 additions of real numbers.
The above procedure, including the various optimiza-
tions, is speciﬁed as an attack in Algorithm 3. We refer to
it as our single-byte attack because of its reliance on the
single-byte keystream probabilities pr+ j,z. It outputs a
collection of approximate log likelihoods {γx : x ∈ X } for
each candidate x ∈ X . These can be further processed to
extract, for example, the candidate with the highest score,
or the top T candidates.
3.3 Double-byte-based Approximation
We continue to write Z = (Zr, . . . ,Z r+n−1) and z =
(zr, . . . ,z r+n−1) and aim to ﬁnd an approximation for
Pr(Z = z) which lends itself to efﬁcient computation of
approximate log likelihoods as in our ﬁrst algorithm. Now
we rely on the double-byte keystream distribution, writing
ps,z1,z2 := Pr((Zs,Zs+1) = (z1,z2)),
s ≥ 1,k1,k2 ∈ B
for the probabilities of observing bytes (z1,z2) in the RC4
keystream in positions (s,s + 1). We estimated these
probabilities for r in the range 1 ≤ r ≤ 511 using 244 RC4
keystreams – for details, see the full version; for larger
r, these are well approximated by the Fluhrer-McGrew
biases [10] (as was veriﬁed in [2]).
We now make the Markovian assumption that, for each
Pr(Z j = z j | Z j−1 = z j−1 ∧···∧Z 0 = z0)
≈ Pr(Z j = z j | Z j−1 = z j−1),
j,
6
118  24th USENIX Security Symposium 
USENIX Association
Algorithm 3: Single-byte attack
input
:ci, j : 0≤ i < S,0 ≤ j < n – array formed from S independent encryptions of ﬁxed n-byte candidate X
r – starting position of X in plaintext stream
X – collection of N candidates
px – a priori probability of candidates x ∈ X
pr+ j,z (0 ≤ j < n, z ∈ B) – single-byte keystream distribution
output :{γx : x ∈ X } – set of (approximate) log likelihoods for candidates in X
begin
for j = 0 to n− 1 do
for z = 0x00 to 0xFF do
N(cid:26)z, j ← 0
for j = 0 to n− 1 do
for i = 0 to S− 1 do
N(cid:26)ci, j, j ← N(cid:26)ci, j, j + 1
for j = 0 to n− 1 do
for y = 0x00 to 0xFF do
for z = 0x00 to 0xFF do
Ny,z, j ← N(cid:26)z⊕y, j
Ly, j = ∑z∈B Ny,z, j log(pr+ j,z),
γx ← log(px) + ∑n−1
for x = (x0, . . . ,x n−1) ∈ X do
j=0 Lx j, j
return {γx : x ∈ X }
meaning that byte j in the keystream can be modelled as
depending only on the preceding byte and not on earlier
bytes. We can write
Pr(Z j = z j ∧ Z j−1 = z j−1)
Pr(Z j = z j | Z j−1 = z j−1) =
where the numerator can then be replaced by p j−1,z j−1,z j
and the denominator by p j−1,z j−1, a single-byte keystream
probability. Then using an inductive argument and our
assumption, we easily obtain:
Pr(Z j−1 = z j−1)
Pr(Z = z) ≈
∏n−2
j=0 pr+ j,z j,z j+1
∏n−2
j=1 pr+ j,z j
giving an approximate expression for our desired prob-
ability in terms of single-byte and double-byte prob-
abilities. Notice that if we assume that the adjacent
byte pairs are independent, then we have pr+ j,z j,z j+1 =
pr+ j,z j · pr+ j+1,z j+1 and the above expression collapses
down to the one we derived in the previous subsection.
For candidate x, we again write x = (x0, . . . ,x n−1) and
rearranging terms, we obtain:
Pr(Z = z)Nx,z ≈
∏
z∈Bn
∏n−2
j=0 ∏z1∈B ∏z2∈B p
j=1 ∏z∈B p
∏n−2
Nx j ,z,r+ j
r+ j,z
Nx j ,x j+1,z1,z2, j
r+ j,z1,z2
where Ny1,y1,z1,z2, j = |{i : z1 = ci, j ⊕ y1 ∧ z2 = ci, j+1 ⊕
y2}0≤i<S| counts (now for consecutive pairs of bytes) the
number of occurrences of bytes (z1,z2) in the pair of col-
umn vectors formed by XORing columns ( j, j + 1) of c
with candidate bytes (y1,y2) (and where Nx j,z,r+ j is as in
our previous algorithm).
Again, the counters Ny1,y2,z1,z2, j for y1,y2 ∈ B can
all be computed efﬁciently by permuting the counters
N0x00,0x00,z1,z2, j, these being simply counters for the num-
ber of occurrences of pairs of byte values (z1,z2) in col-
umn j and j + 1 of the ciphertext matrix c. As before,
we work with logarithms, so that we evaluate for each
candidate x = (x0, . . . ,x n−1) an expression of the form
γx := log(px) +
n−2
∑
j=0
∑
z1∈B
∑
z2∈B
−
n−2
∑