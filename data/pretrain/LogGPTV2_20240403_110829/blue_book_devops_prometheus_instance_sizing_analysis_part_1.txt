---
title: Instance sizing analysis
date: 20201019
author: Lyz
---
Once we gather the instance metrics with the [Node exporter](node_exporter.md),
we can do statistical analysis on the evolution of time to detect the instances
that are undersized or oversized.
# RAM analysis
Instance RAM percent usage metric can be calculated with the following
[Prometheus rule](prometheus.md#prometheus-rules):
```yaml
  - record: instance_path:node_memory_MemAvailable_percent
    expr: (1 - node_memory_MemAvailable_bytes/node_memory_MemTotal_bytes ) * 100
```
The [average](https://en.wikipedia.org/wiki/Average), [standard
deviation](https://en.wikipedia.org/wiki/Standard_deviation) and the [standard
score](https://en.wikipedia.org/wiki/Standard_score) of the last two
weeks would be:
```yaml
  - record: instance_path:node_memory_MemAvailable_percent:avg_over_time_2w
    expr: avg_over_time(instance_path:node_memory_MemAvailable_percent[2w])
  - record: instance_path:node_memory_MemAvailable_percent:stddev_over_time_2w
    expr: stddev_over_time(instance_path:node_memory_MemAvailable_percent[2w])
  - record: instance_path:node_memory_MemAvailable_percent:z_score
    expr: >
      (
        instance_path:node_memory_MemAvailable_percent
        - instance_path:node_memory_MemAvailable_percent:avg_over_time_2w
      ) / instance_path:node_memory_MemAvailable_percent:stddev_over_time_2w
```
With that data we can define that an instance is oversized if the average plus
the standard deviation is less than 60% and undersized if its greater than 90%.
With the average we take into account the nominal RAM consumption, and with the
standard deviation we take into account the spikes.
!!! warning "Tweak this rule to your use case"
    The criteria of undersized and oversized is just a first approximation I'm
    going to use. You can use it as a base criteria, but don't go through with
    it blindly.
    See the [disclaimer](#disclaimer) below for more information.
```yaml
  # RAM
  - record: instance_path:wrong_resource_size
    expr: >
      instance_path:node_memory_MemAvailable_percent:avg_plus_stddev_over_time_2w 
      instance_path:node_memory_MemAvailable_percent:avg_plus_stddev_over_time_2w > 90
    labels:
      type: EC2
      metric: RAM
      problem: undersized
```
Where `avg_plus_stddev_over_time_2w` is:
```yaml
  - record: instance_path:node_memory_MemAvailable_percent:avg_plus_stddev_over_time_2w
    expr: >
      instance_path:node_memory_MemAvailable_percent:avg_over_time_2w
      + instance_path:node_memory_MemAvailable_percent:stddev_over_time_2w
```
# CPU analysis
Instance CPU percent usage metric can be calculated with the following
[Prometheus rule](prometheus.md#prometheus-rules):
```yaml
  - record: instance_path:node_cpu_percent:rate1m
    expr: >
      (1 - (avg by(instance) (rate(node_cpu_seconds_total{mode="idle"}[1m])))) * 100
```
The `node_cpu_seconds_total` doesn't give us the percent of usage, that is why
we need to do the average of the
[`rate`](https://prometheus.io/docs/prometheus/latest/querying/functions/#rate)
of the last minute.
The [average](https://en.wikipedia.org/wiki/Average), [standard
deviation](https://en.wikipedia.org/wiki/Standard_deviation), the [standard
score](https://en.wikipedia.org/wiki/Standard_score) and the undersize or
oversize criteria is similar to the RAM case, so I'm adding it folded for
reference only.
??? note "CPU usage rules"
    ```yaml
    # ---------------------------------------
    # -- Resource consumption calculations --
    # ---------------------------------------
    # CPU
    - record: instance_path:node_cpu_percent:rate1m
      expr: >
        (1 - (avg by(instance) (rate(node_cpu_seconds_total{mode="idle"}[1m])))) * 100
    - record: instance_path:node_cpu_percent:rate1m:avg_over_time_2w
      expr: avg_over_time(instance_path:node_cpu_percent:rate1m[2w])
    - record: instance_path:node_cpu_percent:rate1m:stddev_over_time_2w
      expr: stddev_over_time(instance_path:node_cpu_percent:rate1m[2w])
    - record: instance_path:node_cpu_percent:rate1m:avg_plus_stddev_over_time_2w
      expr: >
        instance_path:node_cpu_percent:rate1m:avg_over_time_2w
        + instance_path:node_cpu_percent:rate1m:stddev_over_time_2w
    - record: instance_path:node_cpu_percent:rate1m:z_score
      expr: >
        (
          instance_path:node_cpu_percent:rate1m
          - instance_path:node_cpu_percent:rate1m:avg_over_time_2w
        ) / instance_path:node_cpu_percent:rate1m:stddev_over_time_2w
    # ----------------------------------
    # -- Resource sizing calculations --
    # ----------------------------------
    # CPU
    - record: instance_path:wrong_resource_size
      expr: instance_path:node_cpu_percent:rate1m:avg_plus_stddev_over_time_2w  80
      labels:
        type: EC2
        metric: CPU
        problem: undersized
    ```
# Network analysis
We can deduce the network usage from the `node_network_receive_bytes_total` and
`node_network_transmit_bytes_total` metrics. For example for the transmit, the
Gigabits per second transmitted can be calculated with the following
[Prometheus rule](prometheus.md#prometheus-rules):
```yaml
  - record: instance_path:node_network_transmit_gigabits_per_second:rate5m
    expr: >
      increase(
        node_network_transmit_bytes_total{device=~"(eth0|ens.*)"}[1m]
      ) * 7.450580596923828 * 10^-9 / 60
```
Where we:
* Filter the traffic only to the external network interfaces
    `node_network_transmit_bytes_total{device=~"(eth0|ens.*)"}`. Those are the
    ones used by [AWS](aws.md), but you'll need to tweak that for your case.
* Convert the `increase` of Kilobytes per minute `[1m]` to Gigabits per second
    by multiplying it by `7.450580596923828 * 10^-9 / 60`.
The [average](https://en.wikipedia.org/wiki/Average), [standard
deviation](https://en.wikipedia.org/wiki/Standard_deviation), the [standard
score](https://en.wikipedia.org/wiki/Standard_score) and the undersize or
oversize criteria is similar to the RAM case, so I'm adding it folded for
reference only.
??? note "Network usage rules"
    ```yaml
    # ---------------------------------------
    # -- Resource consumption calculations --
    # ---------------------------------------
    # NetworkReceive
    - record: instance_path:node_network_receive_gigabits_per_second:rate1m
      expr: >
        increase(
          node_network_receive_bytes_total{device=~"(eth0|ens.*)"}[1m]
        ) * 7.450580596923828 * 10^-9 / 60
    - record: instance_path:node_network_receive_gigabits_per_second:rate1m:avg_over_time_2w
      expr: >
        avg_over_time(
          instance_path:node_network_receive_gigabits_per_second:rate1m[2w]
        )
    - record: instance_path:node_network_receive_gigabits_per_second:rate1m:stddev_over_time_2w