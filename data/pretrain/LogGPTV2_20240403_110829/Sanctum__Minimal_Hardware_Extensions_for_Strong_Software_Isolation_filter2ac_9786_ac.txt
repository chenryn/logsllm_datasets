LLC Cache
Slice
Cache
Address
Un-Shifter
Coherence 
Manager
LLC Cache
Slice
Cache
Address
Un-Shifter
Coherence 
Manager
LLC Cache
Slice
Cache
Address
Un-Shifter
TileLinkIO to MemIO Converter
EVMASK
TLB Miss
Virtual Address
AND
Address Range Check
EVBASE
EQ
PTBR
EPTBR
DRBMAP
EDRBMAP
PARBASE
EPARBASE
PARMASK
EPARMASK
0
1
0
1
0
1
0
1
FSM Input:
Page Table Base
FSM Input:
DRAM Region Bitmap
FSM Input:
Protected Address Base
FSM Input:
Protected Address Mask
Figure 8: Page walker input for per-enclave page tables
Memory Controller
DRAM
Figure 7: Sanctum’s cache address shifter and DMA
transfer ﬁlter logic in the context of a Rocket uncore
DRAM Fetch Result: 
Valid Bit
Protected
Address Base
Protected
 Address Mask
to modify ptbr, and ensures that eptbr always points to
the current enclave’s page tables.
The circuitry handling TLB misses switches between
ptbr and eptbr based on two registers that indicate the
current enclave’s EVRANGE, namely evbase (enclave
virtual address space base) and evmask (enclave virtual
address space mask). When a TLB miss occurs, the cir-
cuit in Figure 8 selects the appropriate page table base
by ANDing the faulting virtual address with the mask
register and comparing the output against the base regis-
ter. Depending on the comparison result, either eptbr or
ptbr is forwarded to the page walker as the page table
base address.
5.3 Page Walker Memory Accesses
In modern high-speed CPUs, address translation is per-
formed by a hardware page walker that traverses the
page tables when a TLB miss occurs. The page walker’s
latency greatly impacts the CPU’s performance, so it is
implemented as a ﬁnite-state machine (FSM) that reads
page table entries by issuing DRAM read requests using
physical addresses, over a dedicated bus to the L1 cache.
Unsurprisingly, page walker modiﬁcations require a lot
of engineering effort. At the same time, Sanctum’s secu-
rity model demands that the page walker only references
enclave memory when traversing the enclave page tables,
and only references OS memory when translating the OS
page tables. Fortunately, we can satisfy these require-
ments without modifying the FSM. Instead, the security
monitor conﬁgures the circuit in Figure 9 to ensure that
AND
AND
FSM Input:
Valid bit
EQ
NOT
AND
DRAM Region
Index Selector
6-bit
Region Index
DRAM
Region
Bitmap
64
bits
DRAM Fetch Result: 
Address Bits
FSM Input:
Address Bits
Figure 9: Hardware support for per-enclave page tables:
check page table entries fetched by the page walker.
the page tables only point into allowable memory.
Sanctum’s security monitor must guarantee that ptbr
points into an OS DRAM region, and eptbr points into
a DRAM region owned by the enclave. This secures the
page walker’s initial DRAM read. The circuit in Figure 9
receives each page table entry fetched by the FSM, and
sanitizes it before it reaches the page walker FSM.
The security monitor conﬁgures the set of DRAM
regions that page tables may reference by writing to a
DRAM region bitmap (drbmap) register. The sanitiza-
tion circuitry extracts the DRAM region index from the
address in the page table entry, and looks it up in the
DRAM region bitmap. If the address does to belong to
an allowable DRAM region, the sanitization logic forces
the page table entry’s valid bit to zero, which will cause
the page walker FSM to abort the address translation and
signal a page fault.
Sanctum’s security monitor and its attestation key are
stored in DRAM regions allocated to the OS. For security
reasons, the OS must not be able to modify the monitor’s
USENIX Association  
25th USENIX Security Symposium  863
7
code, or to read the attestation key. Sanctum extends
the page table entry transformation described above to
implement a Protected Address Range (PAR) for each set
of page tables.
Each PAR is speciﬁed using a base register (parbase)
register and a mask register (parmask) with the same
semantics as the variable Memory Type Range registers
(MTRRs) in the x86 architecture. The page table en-
try sanitization logic in Sanctum’s hardware extensions
checks if each page table entry points into the PAR by
ANDing the entry’s address with the PAR mask and com-
paring the result with the PAR base. If a page table entry
is seen with a protected address, its valid bit is cleared,
forcing a page fault.
The above transformation allows the security monitor
to set up a memory range that cannot be accessed by other
software, and which can be used to securely store the
monitor’s code and data. Entry invalidation ensures no
page table entries are fetched from the protected range,
which prevents the page walker FSM from modifying the
protected region by setting accessed and dirty bits.
All registers above are replicated, as Sanctum maintains
separate OS and enclave page tables. The security monitor
sets up a protected range in the OS page tables to isolate
its own code and data structures (most importantly its
private attestation key) from a malicious OS.
Figure 10 shows Sanctum’s logic inserted between the
page walker and the cache unit that fetches page table
entries.
5.4 DMA Transfer Filtering
We whitelist a DMA-safe DRAM region instead of fol-
lowing SGX’s blacklist approach. Speciﬁcally, Sanctum
adds two registers (a base, dmarbase and an AND mask,
dmarmask) to the DMA arbiter (memory controller). The
range check circuit shown in Figure 8 compares each
DMA transfer’s start and end addresses against the al-
lowed DRAM range, and the DMA arbiter drops transfers
that fail the check.
6 Software Design
Sanctum’s chain of trust, discussed in § 6.1, diverges sig-
niﬁcantly from SGX. We replace SGX’s microcode with
a software security monitor that runs at a higher privilege
level than the hypervisor and the OS. On RISC-V, the
security monitor runs at machine level. Our design only
uses one privileged enclave, the signing enclave, which
behaves similarly to SGX’s Quoting Enclave.
6.1 Attestation Chain of Trust
Sanctum has three pieces of trusted software: the mea-
surement root, which is burned in on-chip ROM, the se-
curity monitor (§ 6.2), which must be stored alongside
PC Generation
Program Counter
Branch
Target Buffer
L1
I-TLB
L1
I-Cache
Scoreboard
Instruction Queue
Decode, Arbitration,
Stall Detection
Control
Registers
Register
File
Sign Extend
Bypass
Bypass
Bypass
Branch
ALU
IMUL
IDIV
Data Queue
Exception 
Generator
L1
D-TLB
L1
D-Cache
Replay 
Decision
Crossbar
Sign extension
Enclave
Page Table
Registers
Page
Walker
Page
Entry
Transform
Figure 10: Sanctum’s page entry transformation logic in
the context of a Rocket core
the computer’s ﬁrmware (usually in ﬂash memory), and
the signing enclave, which can be stored in any untrusted
storage that the OS can access.
We expect the trusted software to be amenable to rig-
orous analysis: our implementation of a security monitor
for Sanctum is written with veriﬁcation in mind, and has
fewer than 5 kloc of C++, including a subset of the stan-
dard library and the cryptography for enclave attestation.
6.1.1 The Measurement Root
The measurement root (mroot) is stored in a ROM at the
top of the physical address space, and covers the reset vec-
tor. Its main responsibility is to compute a cryptographic
hash of the security monitor and generate a monitor at-
testation key pair and certiﬁcate based on the monitor’s
hash, as shown in Figure 11.
The security monitor is expected to be stored in non-
volatile memory (such as an SPI ﬂash chip) that can re-
spond to memory I/O requests from the CPU, perhaps
via a special mapping in the computer’s chipset. When
mroot starts executing, it computes a cryptographic hash
over the security monitor. mroot then reads the proces-
sor’s key derivation secret, and derives a symmetric key
based on the monitor’s hash. mroot will eventually hand
864  25th USENIX Security Symposium 
USENIX Association
8
Tamper-Resistant Hardware
Measurement
Root Code
Processor 
Attestation 
Key
measures
Monitor
Hash
signs
Monitor
Attestation 
Certiﬁcate
Measurement
Public Key
CSPRNG
RSA Key
Generation
Monitor
Attestation 
Key
Key 
Derivation 
Secret
Key
Derivation
Monitor
Symmetric
Key
mroot
occurs. This prevents a malicious security monitor from
deriving a different monitor’s symmetric key, or from
generating a monitor attestation certiﬁcate that includes a
different monitor’s measurement hash.
The symmetric key generated for the monitor is simi-
lar in concept to the Seal Keys produced by SGX’s key
derivation process, as it is used to securely store a se-
cret (the monitor’s attestation key) in untrusted memory,
in order to avoid an expensive process (asymmetric key
attestation and signing). Sanctum’s key derivation pro-
cess is based on the monitor’s measurement, so a given
monitor is guaranteed to get the same key across power
cycles. The cryptographic properties of the key derivation
process guarantee that a malicious monitor cannot derive
the symmetric key given to another monitor.
Security
Monitor Code
Signing
Enclave 
Measurement
Monitor
Attestation 
Certiﬁcate
Monitor
Attestation 
Key
Monitor
Symmetric
Key
6.1.2 The Signing Enclave
Authenticated
Encryption
monitor
Security
Monitor Code
Monitor
Attestation 
Certiﬁcate
Encrypted 
Monitor
Attestation Key
Untrusted non-volatile (ﬂash) memory
Figure 11: Sanctum’s root of trust is a measurement
root routine burned into the CPU’s ROM. This code reads
the security monitor from ﬂash memory and generates an
attestation key and certiﬁcate based on the monitor’s hash.
Asymmetric key operations, colored in blue, are only
performed the ﬁrst time a monitor is used on a computer.
down the key to the monitor.
The security monitor contains a header that includes
the location of an attestation key existence ﬂag. If the
ﬂag is not set, the measurement root generates a monitor
attestation key pair, and produces a monitor attestation
certiﬁcate by signing the monitor’s public attestation key
with the processor’s private attestation key. The monitor
attestation certiﬁcate includes the monitor’s hash.
mroot generates a symmetric key for the security mon-
itor so it may encrypt its private attestation key and store
it in the computer’s SPI ﬂash memory chip. When writing
the key, the monitor also sets the monitor attestation key
existence ﬂag, instructing future boot sequences not to re-
generate a key. The public attestation key and certiﬁcate
can be stored unencrypted in any untrusted memory.
Before handing control to the monitor, mroot sets a
lock that blocks any software from reading the processor’s
symmetric key derivation seed and private key until a reset
In order to avoid timing attacks, the security monitor does
not compute attestation signatures directly. Instead, the
signing algorithm is executed inside a signing enclave,
which is a security monitor module that executes in an en-
clave environment, so it is protected by the same isolation
guarantees that any other Sanctum enclave enjoys.
The signing enclave receives the monitor’s private attes-
tation key via an API call. When the security monitor re-
ceives the call, it compares the calling enclave’s measure-
ment with the known measurement of the signing enclave.
Upon a successful match, the monitor copies its attesta-
tion key into enclave memory using a data-independent
sequence of memory accesses, such as memcpy. This way,
the monitor’s memory access pattern does not leak the
private attestation key.
Sanctum’s signing enclave authenticates another en-
clave on the computer and securely receives its attestation
data using mailboxes (§ 6.2.5), a simpliﬁed version of
SGX’s local attestation (reporting) mechanism. The en-
clave’s measurement and attestation data are wrapped into
a software attestation signature that can be examined by a
remote veriﬁer. Figure 12 shows the chain of certiﬁcates
and signatures in an instance of software attestation.
6.2 Security Monitor
The security monitor receives control after mroot ﬁnishes
setting up the attestation measurement chain.
The monitor provides API calls to the OS and enclaves
for DRAM region allocation and enclave management.
The monitor guards sensitive registers, such as the page
table base register (ptbr) and the allowed DMA range
(dmarbase and dmarmask). The OS can set these regis-
ters via monitor calls that ensure the register values are
consistent with the current DRAM region allocation.