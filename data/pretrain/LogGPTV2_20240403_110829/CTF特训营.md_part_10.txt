---
## Page 129
CTF特训营：技术详解、解题方法与
5.1.2反序列化漏洞
129/1144
return highlight_file(hiehiehie.txt',true).highlight_file($this->source,true);
Sf=newfilelist();
Sf->source="/etc/passwd";
print_r(serialize($f);
将打印出来的字符串作为参数提交，即可读取/etc/passwd文件。
如果代码量复杂，使用了大量的类，往往需要构造ROP链来进
行利用，可以参考phithon对joomla漏洞的分析，链接地址为：https://
www.leavesongs.com/PENETRATION/joomla-unserialize-code-
execute-vulnerability.html
---
## Page 130
CTF特训营：技术详解、解题方法与
5.1.3截断
130/1144
5.1.3截断
NULL字符截断是最有名的截断漏洞之一，其原理是，PHP内核
是由C语言实现的，因此使用了C语言中的一些字符串处理函数，在
遇到NULL（xOO）字符的时候，处理函数就会将它当作结束标记。这个
漏洞能够帮助我们去掉变量结尾处不想要的字符，代码如下：
此处的extract函数将GET传入的数据转换为变量名和变量的值
所以这里构造如下Payload即可将Sauth的值变为true并获得flag：
?auth=1
---
## Page 135
CTF特训营：技术详解、解题方法与
5.1.5变量覆盖
135/1144
b）parse_str函数
考虑如下代码：
此处的parse_str函数同样也是将GET传入的字符串解析为变量，
所以Payload与上方extract函数的Payload一样。
c）import_request_variables函数
考虑如下代码：
---
## Page 136
CTF特训营：技术详解、解题方法与
5.1.5变量覆盖
136/1144
此处，import_request_variables函数的值由G、P、C三个字母组
合而成，G代表GET，P代表POST，C代表CookieS。排在前面的字符
会覆盖排在后面的字符传入参数的值，如，参数为“GP”，且GET和
POST同时传人了auth参数，则POST传人的auth会被忽略。
需要注意的是，这个函数自PHP5.4起就被移除了，如果需要测
试上方的代码请安装版本号大于等于4.1小手5.4的PHP环境。
(2）配置不当
在PHP版本号小于5.4的时候，还存在配置问题导致的全局变量
覆盖漏洞。当PHP配置register_globals=ON时便可能出现该漏洞，考
虑如下代码：
在新版本PHP移除了前面提到的import_request_variables函数和
register_globals选项之后，有些开发者选择使用foreach遍历数组
（如，SGET、SPOST等）来注册变量，这样也会存在变量覆盖漏
洞的情况。考虑如下代码：
$value)
$$key= $value;
if($auth){
echo “flag..)";
}else{
echo"Access Denied.";
---
## Page 138
CTF特训营：技术详解、解题方法与
5.1.5变量覆盖
138/1144
?>
此处的foreach循环就将GET传入的参数注册为变量，所以与前
面一样，传入“？auth=1”即可绕过判断获得flag。
---
## Page 139
CTF特训营：技术详解、解题方法与
5.1.6防护绕过
139/1144
5.1.6防护绕过
这里主要讲两个经常遇到的防护手段，分别是open_basedir和
disable_function。
open_basedir是PHP设置中为了防御PHP跨目录进行文件（目
录）读写的方法，所有PHP中有关文件读、写的函数都会经过
open_basedir的检查。
其常见的绕过方法有Directorylterator+Glob，在目前最新版
（V7.2.10）的PHP中，官方并没有修复这个问题，下面附上简单的测
试代码（来自phithon）：
open_basedir: %s,ini_get(open_basedir');
$fle_list = array():
//normalfiles
$it=newDirectorylterator(glob://*);
foreach(Sit as$f){
$file_list=$f->_toString();
I special files (starting with a dot(.))
$it=newDirectorylterator(glob:/ll.*);
foreach(Sit as $f){
$file_list=$f->_toString();
sort($file_list);
foreach(Sfile_list as $f)
---
## Page 140
CTF特训营：技术详解、解题方法与
5.1.6防护绕过
140/1144
echo“$f}”
?>
为了防止PHP代码存在漏洞导致操作系统沦陷，很多管理员用
disable_function来禁掉一些危险的函数，如system、exec、
shell_exec、passthru等，以防止攻击者执行系统命令。
disable_function的绕过方式很灵活，通常依赖于系统层面的漏
洞，比如利用shellshock、imagemagick等组件的漏洞进行绕过操作，
或者依赖于系统环境，利用环境变量LD_PRELOAD等漏洞进行绕过
操作。如果权限足够，还可以尝试使用PHP调用数据库UDF的方法来
执行命令。
---
## Page 141
CTF特训营：技术详解、解题方法与.
5.2Windows系统特性
141/1144
5.2Windows系统特性
1.短文件名
Windows以8.3格式生成了与MS-DOS兼容的“短”文件名，以允
许基于MS-DOS或16位Windows的程序访问这些文件。在cmd下输入
“dir/x”即可看到短文件名的效果。
而在lIS6环境下，安全研究人员SoroushDalili发现了一些规则
并利用这些信息枚举到自录下的文件或子自录的前5个字符。具体使
用方法的源码可以参考lijiejie的lIS短文件名扫描工具：https:/l
github.com/ljiejie/llS_shortname_Scanner
在Windows下的Apache环境里，我们除了能爆破服务器文件
还能通过短文件直接下载长文件。
discuz的备份文件泄露”就是利用了Windows的短文件名去猜
解，这极大地减少了枚举量。
2.文件上传
另一个与文件系统交互相关的功能就是，上传的时候如果以黑名
---
## Page 142
CTF特训营：技术详解、解题方法与
5.2Windows系统特性
142/1144
单的形式限制后缀，那么我们可以利用文件系统的特性去绕过。比如
以下代码：
在这段代码中，我们不能上传后缀名为php的文件，但是如果我
们在上传的时候在php的后面追加高位字符[x80-Ixf，这样就可以绕
过黑名单的判断而上传成功，上传的文件后缀会去掉[x80-xf。与高
位字符具有同样效果的还有“Sdata”，后者是利用“：SDATA
AltermateDataStream"，详细建议请参考OWASP。
Windows下还有一个特殊的符号是冒号，如果我们上传的时候将
---
## Page 143
CTF特训营：技术详解、解题方法与
5.2Windows系统特性
143/1144
后缀改为”.php:.png”形式，那么在系统中最后得到的将是o字节的
php后缀文件，也就是说起到了截断的效果，但是没能成功写入内容。
---
## Page 144
CTF特训营：技术详解、解题方法与
第6章代码审计
144/1144
第6章代码审计
代码审计，顾名思义就是检查源代码中的安全缺陷，检查程序源
代码是否存在安全隐患，或者是否有编码不规范的地方，通过自动化
工具或者人工审查的方式，对程序源代码逐行进行检查和分析，发现
这些源代码缺陷引发的安全漏洞，并提供代码修订措施和建议。
---
## Page 145
CTF特训营：技术详解、解题方法与
6.1源码泄露
145/1144
6.1源码泄露
CTF比赛中经常会出现需要源码审计的题目，源码有时候会直接
提供给你，有时候则需要自己去找，因此下面为大家列出几种常用的
源码泄露的途径及利用技巧。
1.常见备份文件
在实战中，备份文件一般是由于维护人员的疏忽，忘记删除而留
在服务器中的文件。这时攻击者就能够通过枚举常见备份文件名来得
到关键代码，从而进行源代码的审计。为了能够找到这些备份文件
我们可以使用一些敏感文件扫描工具来进行探测，这类工具比较多
这里就不逐一介绍了。一般常见备份文件有以下两种类型。
（1）文本备份文件
技术人员在Linux系统下会使用诸如vim或gedit等文本编辑器，当
编辑器前溃或因异常退出时会自动备份当前文件：有时候程序开发者
在编写代码时，也可能会将实现某功能后的代码备份后再进行后续开
发工作。下面以index.php为例列出一些可能的备份文件：
---
## Page 146
CTF特训营：技术详解、解题方法与
6.1源码泄
146/1144
index.php.swp
.index.php.swo
index.php~
index.php.bak
index.php.txt
index.php.old
（2）整站源码备份文件
有时候题目会将整站源码打包，然后放在网站的根目录下，这时，
只要找到这个压缩包就能开始进行源码审计了。下面列出一些常见的
整站备份文件名，举例如下：
www
wwdata
wwwroot
web