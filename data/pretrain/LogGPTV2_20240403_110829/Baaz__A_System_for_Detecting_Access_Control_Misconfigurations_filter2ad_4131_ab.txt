pairs with the server, and each pair is processed inde-
pendently, with the server periodically generating one
misconﬁguration report for each. If any changes are de-
tected in matrices corresponding to a registered subject-
reference pair, the server runs the misconﬁguration de-
tection algorithm, which has three steps:
Matrix Reduction:
the server re-
duces the subject and reference datasets’ relation matri-
ces to summary statements that capture sets of users that
have similar access permissions and group memberships.
Each summary statement can be thought of as a high-
level statement of policy intent, gleaned entirely from the
low-level relation matrices. We explain this procedure in
Section 4.
Group Mapping: In this step, our goal is to uncover
access permissions in the subject dataset that seem in-
consistent with patterns in the reference dataset. Con-
sider an example where the subject is a ﬁle server, and
a reference is a list of departmental groups, as shown in
Figure 1. Say a directory hierarchy on the ﬁle server can
be accessed by all members in the human resources de-
partment in an organization, and by only one member of
the facilities department. This has a high likelihood of
being a security misconﬁguration.
Section 5 explains
this procedure.
Object Clustering: Finally, in the Object Clustering
phase, Baaz ﬁnds potential inconsistencies in the subject
dataset by comparing summary statements for the sub-
ject that are “similar”, but not the same. The main idea is
that a user whose access permissions differ only slightly
from that of a larger set of users could potentially be a
misconﬁguration. For example, if 10 users in the subject
dataset can access a given set of 100 ﬁles, but say an 11th
user can access only 99 of these ﬁles, Baaz ﬂags a candi-
date accessibility misconﬁguration. We describe this in
Section 6.
The system reports security candidates as “A user set
U MAY NOT need access to object set O” . Accessibility
candidates are of the form “A user set U MAY need ac-
cess to object set O” At this point, the administrator will
need to identify reported misconﬁguration candidates as
“valid”, “invalid”, or “intentional exceptions”, which are
deﬁned as follows.
Valid: The misconﬁguration candidate is correct, and the
administrator needs to make the recommended changes.
Invalid: The misconﬁguration candidate is incorrect,
and the administrator should not make the recommended
changes.
Intentional Exception: The administrator should not
make the recommended changes, but the candidate pro-
vides useful information to the administrator.
The intentional exception category captures all re-
ported misconﬁgurations that correspond to exceptions
which appear out of the ordinary but are legitimate. Ad-
ministrators found these exceptions to be useful as they
help check compliance and may, over time, become valid
misconﬁgurations. An example of an intentional excep-
tion is a user who has just changed roles. To help with
the transition, he still has access to some documents re-
lated to his previous role. Hence while his access should
not be revoked at the current time, it should probably be
in the near future.
The server archives candidates marked as invalid, and
does not explicitly display them in future reports. The re-
ports will, however, display intentional exceptions. Sec-
tion 7.1 describes more speciﬁc issues related to server
design and evaluation.
One of the important properties of our algorithms is
that the misconﬁguration candidates converge to a steady
state. That is, if we run our Group Mapping and Ob-
ject Clustering algorithms repeatedly starting from a
given raw conﬁguration, and if we resolve our miscon-
ﬁgurations as suggested, we will eventually (and fairly
quickly) reach a state where no new candidates appear.
This guarantee is what we call internal consistency. We
will illustrate this through our examples in Sections 4 and
ϴ
ϵ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
Ϯ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϯ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϰ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϱ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϲ
ϭ
ϭ
ϭ
ϭ
ϭ
ϳ
ϭ
ϭ
ϭ
ϭ
ϭ




&
'
,
/
:
ϭϬ ϭϭ ϭϮ ϭϯ ϭϰ ϭϱ ϭϲ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
z
ϭ
ϭ
ϭ

ϭ
ϭ
t y
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ




&
'
,
/
:
Subject Dataset Summary Statements
Reference Dataset Summary Statements
1. {C, D} → {15, 16}
2. {C, D, E, F, G} → {6, 7}
3. {A, B, C, D} → {9, 10, 11, 12}
4. {A, B, C, D, I} → {13}
5. {C, D, E, F, G, H} → {1, 2, 3, 4, 5}
1. G1 : {C, D, E, F, G, H, J} → {X}
2. G2 : {A, B, C} → {W, Y }
3. G3 : {C, D} → {Z}
Figure 4: The result of the matrix reduction step on our
example subject dataset’s matrix.
Figure 5: The result of the matrix reduction step on our
example reference dataset’s matrix.
5. The detailed proof is available on our webpage 1. In
the next three sections, we describe the server algorithm
in detail.
4 Matrix Reduction
We apply the matrix reduction procedure on the rela-
tion matrices of both the subject and reference datasets.
The goal of this step,
in the context of the subject
dataset, is to ﬁnd summary statements relating sets of
users (user-sets) that can access the same sets of ob-
jects (object-sets). Given a relation matrix, different
kinds of summaries can be generated. Role mining al-
gorithms [22, 25, 18, 28, 10], for example, try to ﬁnd
minimal overlapping sets of users and objects that have
common permissions. In contrast, we ﬁnd user-sets that
have access to disjoint object-sets, as required by our
misconﬁguration detection algorithms. For the reference
dataset, we ﬁnd group membership summaries in a simi-
lar manner.
4.1 Subject Dataset
Our algorithm takes the relation matrix for the subject
dataset as input, and examines each column, grouping
together all objects that have identical column vectors.
Essentially, it groups all objects that are accessible to an
identical set of users.
Figure 4 shows the summary statements that our Ma-
trix Reduction algorithm ﬁnds for the example shown
earlier in Figure 2. Each greyscale coloring within the
matrix represents a distinct summary statement. The list
of summary statements that our algorithm yields is also
shown in the ﬁgure. The ﬁrst statement arises from users
C and D having identical access rights, since they both
1http://research.microsoft.com/baaz
have access to objects 15 and 16, and to no other object.
We therefore interpret this in the following way: Users
C and D have exclusive access to objects 15 and 16, i.e.
no other user has access to these objects.
The Baaz server ﬁnds all such summary statements to
completely capture the matrix. Next, it explicitly ﬁlters
out all summary statements that involve only one user
since our algorithm only looks for misconﬁgurations in-
volving objects that are shared between more than one
user. Figure 6 presents this algorithm in detail.
Complexity: Since the algorithm simply involves one
sweep through the subject’s relation matrix, grouping to-
gether identical columns, it runs in O(nm) time, where n
is the number of users in the matrix and m is the number
of objects.
EXTRACT SUMMARY STATEMENTS
Input: M {binary relation matrix of all users U and all objects O}
Output: S {set of summary statements [Uk → Ok]}
Uses: H {hashtable,
jects}
1: S = φ, H = φ
2: for all o ∈ O do
3:
U = Get U ser Set(M, o) // gets the set of users who can
access o
if H.contains(U ) then
indexed by sets of users, stores sets of ob-
else
end if
H.put(U, OU S{o})
H.put(U, {o})
OU = H.get(U )
4:
5:
6:
7:
8:
9:
10: end for
11: for all Uk ∈ H.keys do
12:
13:
14: end for
15: return S
Ok = H.get(Uk)
S = S S{[Uk → Ok]}
Figure 6: Algorithm to extract summary statements
given the users and the access control matrix
User-set 1
C, D
G3
User-set 2
C, D, E, F, G
G1 - H - J
User-set 3
A, B, C, D
G2
D
User-set 4
A, B, C, D, I
D, I
G2
User-set 5
C, D, E, F, G, H
G1 - J
Figure 7: The result of the Group Mapping algorithm on the example subject matrix.
4.2 Reference Dataset
We apply the same process on the matrix for the refer-
ence dataset. The summary statements that our algo-
rithm ﬁnds for the reference dataset relation matrix are
shown in Figure 5. We call the user-set in each summary
statement obtained from the reference dataset a reference
group. The reference groups for our example are:
G1 = {C, D, E, F, G, H, J}
G2 = {A, B, C}
G3 = {C, D}
The objects W, X, Y, Z are merely used to ﬁnd the ref-
erence groups, and are not used by future phases of our
algorithm.
5 Group Mapping
In this section, we describe the Group Mapping algo-
rithm, that takes as input the user-sets representing the
subject dataset, and the reference groups discovered from
the reference dataset, and ﬁnds the best mapping from the
each user-set to the reference groups. The server uses
these maps to ﬂag outliers (users) as misconﬁguration
candidates. We ﬁrst explain why Group Mapping is a
useful step in ﬁnding misconﬁgurations. Next, we ex-
plain how Group Mapping works on our example data,
and then we present the algorithm in detail.
5.1 Algorithm
Now we describe the Group Mapping algorithm in more
detail. Table 1 summarizes the list of symbols and vari-
ables we use here, and in the description of the Object
Clustering algorithm.
5.2 Intuition and Deﬁnitions
The Group Mapping algorithm for ﬁnding misconﬁgura-
tions relies on the following two assumptions:
Accessibility (based on Assumption 1): If a majority
of the members of a reference group all have ac-
cess to a set of objects, and a minority do not have
access to the same set of objects, then we ﬂag the
users without access as accessibility misconﬁgura-
tion candidates.
Security (based on Assumption 2): Of all users in a
user-set, if a majority of them form one or more ref-
erence groups, and a minority of users do not form
any reference groups, we ﬂag the minority of users
as security misconﬁguration candidates.
Following these deﬁnitions, the ﬁrst thing to do is to
ﬁnd a mapping from user-sets to reference groups. How-
ever, since we are looking for outliers, we do not restrict
the algorithm to ﬁnding an exact and complete mapping.
Our goal is to ﬁnd the “best-effort” mapping from user-
sets to reference groups. In this process, some users in
the user-sets may not map to any reference group, or a
user-set may map to a reference group that has some ex-
traneous users, who are not part of the user-set.
To illustrate with our running example, our Group
Mapping algorithm maps the ﬁve user-sets in the sum-
mary statements we found in Figure 4 to the reference
groups found in the Section 4.2 as shown in Figure 7.
For the user-set of summary statement 1, the mapping is
exact. For the user-set for statement 2, the best map is
G1, which covers all users but also includes users H and
J who are not in the user-set. For the user-set in sum-
mary statement 4, the best map is G2, while users D and
I remain unmapped.
From this mapping, using the assumptions and deﬁni-
tions stated above, we infer the following misconﬁgura-
tion candidates:
1. Users in the same reference group should have same
1. From summary statement 2, users H and J MAY
access permissions.
need access to objects 6, 7.
2. Given a set of reference groups that have the same
access permissions, any user who is not a member
of these reference groups should not have the same
access permissions as users within these reference
groups.
2. From summary statement 3, user D MAY NOT need
access to objects 9, 10, 11, and 12.
3. From summary statement 4, users D and I MAY
NOT need access to object 13.
Based on these two assumptions, we deﬁne misconﬁg-
4. From summary statement 5, user J MAY need access
uration candidates for the algorithm to ﬁnd as follows:
to objects 1, 2, 3, 4, and 5.
Symbol
Deﬁnition
n
m
l
g
Ui → Oi
Gj
Ci
Ti
∆Gj
number of users
number of objects
number of summary statements/user-sets from subject dataset
number of reference groups from reference dataset
ithsummary statement for subject, with Ui being the user-set and Oi being the object-set
j th reference group
set of groups used to cover user-set Ui
list of uncovered users in user-set Ui after covering it by Ci
list of users in Gj but not in user-set Ui, where Gj ∈ Ci
Table 1: Table summarizing all symbols used to explain Group Mapping and Object Clustering
The second and third are security misconﬁguration
candidates, while the ﬁrst and fourth are accessibility
misconﬁguration candidates. User-set 1 does not gen-
erate a misconﬁguration candidate because the mapping
is exact.
In spite of its procedural limitations, administrators
and resource owners in various domains have found
Baaz’s techniques very useful in ﬁnding genuine high-
value misconﬁgurations. We show this through our eval-
uation in Section 8,
Fixing these misconﬁgurations will improve the map-
ping from user-sets to reference groups in future runs of
the algorithm. For example, if the administrator removes
user D’s access to objects 9, 10, 11 and 12, the next time
the algorithm runs, the summary statement 3 will reduce
to {A, B, C} → {9, 10, 11, 12}. Group mapping will
exactly map the new user-set to G2, and hence the num-
ber of misconﬁguration candidates will reduce. This is