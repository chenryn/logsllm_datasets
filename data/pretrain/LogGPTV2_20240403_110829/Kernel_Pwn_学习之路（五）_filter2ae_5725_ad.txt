##### 获取运行栈的栈指针(`sync_regs`函数分析)
接下来将会进入`.Lerror_entry_from_usermode_after_swapgs:`中：
    movq    %rsp, %rdi
    call    sync_regs
在这里，我们将堆栈的基址指针置入`%rdi`寄存器这将作为`sync_regs`函数的参数。
接下来我们来分析`sync_regs`函数：(在`/source/arch/x86/kernel/traps.c#L613`中实现)
    /*
     * Help handler running on a per-cpu (IST or entry trampoline) stack
     * to switch to the normal thread stack if the interrupted code was in
     * user mode. The actual stack switch is done in entry_64.S
     */
    asmlinkage __visible notrace struct pt_regs *sync_regs(struct pt_regs *eregs)
    {
        struct pt_regs *regs = (struct pt_regs *)this_cpu_read(cpu_current_top_of_stack) - 1;
        if (regs != eregs)
            *regs = *eregs;
        return regs;
    }
    NOKPROBE_SYMBOL(sync_regs);
    // In /source/include/linux/percpu-defs.h#L507
    #define this_cpu_read(pcp)        __pcpu_size_call_return(this_cpu_read_, pcp)
这将会获取运行栈的栈指针将其存储在中断栈中并返回，这意味着异常处理程序将在实际流程上下文中运行。
#####  栈切换
接下来我们进行栈切换操作
正如我们来自用户空间一样，这意味着异常处理程序将在实际流程上下文中运行。从堆栈指针中获取堆栈指针后，`sync_regs`我们切换堆栈：
    movq    %rax, %rsp
然后内核从`R12`中取出返回地址，返回上级函数
####  可选参数逻辑分析
在用户空间发生异常的处理逻辑下，接下来只需要处理以下三个选项`has_error_code, read_cr2, paranoid=0`
        .if read_cr2
        /*
         * Store CR2 early so subsequent faults cannot clobber it. Use R12 as
         * intermediate storage as RDX can be clobbered in enter_from_user_mode().
         * GET_CR2_INTO can clobber RAX.
         */
        GET_CR2_INTO(%r12);
        .endif
        .if shift_ist != -1
            ......(代码省略)
        .endif
        .if paranoid == 0
        testb    $3, CS(%rsp)
        jz    .Lfrom_kernel_no_context_tracking_@
        CALL_enter_from_user_mode
    .Lfrom_kernel_no_context_tracking_@:
        .endif
        movq    %rsp, %rdi            /* pt_regs pointer */
        .if has_error_code
        movq    ORIG_RAX(%rsp), %rsi        /* get error code */
        movq    $-1, ORIG_RAX(%rsp)        /* no syscall to restart */
        .else
        xorl    %esi, %esi            /* no error code */
        .endif
        .if shift_ist != -1
            ......(代码省略)
        .endif
        .if read_cr2
        movq    %r12, %rdx            /* Move CR2 into 3rd argument */
        .endif
        call    do_sym
        .if shift_ist != -1
        addq    $ist_offset, CPU_TSS_IST(shift_ist)
        .endif
        .if paranoid
        /* this procedure expect "no swapgs" flag in ebx */
        jmp    paranoid_exit
        .else
        jmp    error_exit
        .endif
##### 若`read_cr2`被设置
`read_cr2`相关的逻辑有两处，第一处是
    .if read_cr2
        /*
         * Store CR2 early so subsequent faults cannot clobber it. Use R12 as
         * intermediate storage as RDX can be clobbered in enter_from_user_mode().
         * GET_CR2_INTO can clobber RAX.
         */
        GET_CR2_INTO(%r12);
    .endif
    # In /source/arch/x86/entry/calling.h#L365
    #define GET_CR2_INTO(reg) GET_CR2_INTO_AX ; _ASM_MOV %_ASM_AX, reg
作用是存储`CR2`寄存器的值到`R12`寄存器。
第二处逻辑是
    .if read_cr2
        movq    %r12, %rdx            /* Move CR2 into 3rd argument */
    .endif
作用是存储`R12`寄存器的值到`RDX`寄存器，也就是把`CR2`寄存器的值存储到`RDX`寄存器作为接下来调用函数的第三个参数。
##### 若`has_error_code`被设置
    .if has_error_code
        movq    ORIG_RAX(%rsp), %rsi
        movq    $-1, ORIG_RAX(%rsp)
    .else
        xorl    %esi, %esi
    .endif
作用是将错误代码传递给`RSI`寄存器，这将作为将是异常处理程序的第二个参数，在那之后将其设置`-1`以防止再次启动系统调用，另外，如果异常不提供错误代码，将会清空`ESI`寄存器。
####  收尾逻辑分析
最后一定会执行的逻辑是：
    .if paranoid == 0
        testb    $3, CS(%rsp)
        jz    .Lfrom_kernel_no_context_tracking_@
        CALL_enter_from_user_mode
    .Lfrom_kernel_no_context_tracking_@:
    .endif
    movq    %rsp, %rdi            /* pt_regs pointer */
首先再次检查`CPL`以确保异常来自用户控件，然后将`pt_regs`(存储了保存的”现场”)赋值给`RDI`，这将作为中断服务程序的第一个参数，最后调用辅助异常处理程序
    call  do_sym
若是`debug`异常，则调用：
    dotraplinkage void do_debug(struct pt_regs *regs, long error_code);
若是`int3`异常，则调用：
    dotraplinkage void notrace do_int3(struct pt_regs *regs, long error_code);
###  当内核空间中发生异常时
当内核空间中发生异常且`paranoid > 0`时，内核将进入`paranoid_entry`进行处理
####  `paranoid_entry`处理分析
`paranoid_entry`的处理逻辑在`/source/arch/x86/entry/entry_64.S#L1218`处实现：
    /*
     * Save all registers in pt_regs, and switch gs if needed.
     * Use slow, but surefire "are we in kernel?" check.
     * Return: ebx=0: need swapgs on exit, ebx=1: otherwise
     */
    SYM_CODE_START_LOCAL(paranoid_entry)
        UNWIND_HINT_FUNC
        cld
        PUSH_AND_CLEAR_REGS save_ret=1
        ENCODE_FRAME_POINTER 8
        movl    $1, %ebx
        movl    $MSR_GS_BASE, %ecx
        rdmsr
        testl    %edx, %edx
        js    1f                /* negative -> in kernel */
        SWAPGS
        xorl    %ebx, %ebx
    1:
        /*
         * Always stash CR3 in %r14.  This value will be restored,
         * verbatim, at exit.  Needed if paranoid_entry interrupted
         * another entry that already switched to the user CR3 value
         * but has not yet returned to userspace.
         *
         * This is also why CS (stashed in the "iret frame" by the
         * hardware at entry) can not be used: this may be a return
         * to kernel code, but with a user CR3 value.
         */
        SAVE_AND_SWITCH_TO_KERNEL_CR3 scratch_reg=%rax save_reg=%r14
        /*
         * The above SAVE_AND_SWITCH_TO_KERNEL_CR3 macro doesn't do an
         * unconditional CR3 write, even in the PTI case.  So do an lfence
         * to prevent GS speculation, regardless of whether PTI is enabled.
         */
        FENCE_SWAPGS_KERNEL_ENTRY
        ret
    SYM_CODE_END(paranoid_entry)
正如之前所说明的那样，这个入口将会以较慢的方式来获取有关被中断任务的先前状态以检查异常是否真的来自内核空间，可以看到我们首先执行的操作和`error_entry`逻辑相同，首先保存现场，然后使用较慢的方式检查异常的来源，随即返回到上级函数。
## 0x04 一个简单内核模块的编写
事实上，本篇文章的内容到`0x03`就已经结束了，我们将在下一篇文章介绍具体的中断服务函数的实现。
但是在这里我想添加一点内容，就是如何去编译一个简易的内核模块并运行。
###  编译Linux Kernel
这个部分已经在`Kernel Pwn 学习之路(一)`给予了说明故此处不再赘述
这里需要注意一点，因为我们想要在使用`QEMU`启动时使其支持`9p`协议，因此我们需要需要修改`.config`文件，需要将文件里的
    CONFIG_NET_9P=m
    CONFIG_NET_9P_VIRTIO=m
    CONFIG_NET_9P_XEN=m
    CONFIG_NET_9P_RDMA=m
    # CONFIG_NET_9P_DEBUG is not set
    ......
    CONFIG_9P_FS=m
    CONFIG_9P_FSCACHE=y
    CONFIG_9P_FS_POSIX_ACL=y
    CONFIG_9P_FS_SECURITY=y
替换为
    CONFIG_NET_9P=y
    CONFIG_NET_9P_VIRTIO=y
    CONFIG_NET_9P_XEN=m
    CONFIG_NET_9P_RDMA=m
    CONFIG_NET_9P_DEBUG=y (Optional)
    ......
    CONFIG_9P_FS=y
    CONFIG_9P_FSCACHE=y
    CONFIG_9P_FS_POSIX_ACL=y
    CONFIG_9P_FS_SECURITY=y
⚠：如果执行`make`编译后无法在`/arch/x86/boot`中找到`bzImage`，请尝试执行`make -jx
bzImage`(`x`是你期望使用的核数)直至看到以下提示：
###  构建文件系统
首先找一个已经构建好的文件系统解包(可以直接利用`Busybox`生成)，重点是`bin`、`sbin`、`usr`这三个文件夹以及根目录下的`linuxrc`文件，其他文件夹均可暂时置空，然后在`/etc`下建立`passwd`文件以建立用户，内容如下：
    root:x:0:0:root:/root:/bin/sh
    error404:x:1000:1000:error404:/home/error404:/bin/sh
然后可以继续建立`profile`文件，内容如下：
    alias ll='ls -al '
    alias l='ls '
    if [ $(id -u) == 0 ]; then 
        COLOR="31"  
    else
        COLOR="34"
        cd /home/user
    fi
    export PS1="e[01;${COLOR}m $(whoami)@my-kernel [33[00m]:[33[36m]w[33[00m]$ "
最后在根目录下建立最重要的`init`文件：
    #!/bin/sh
    mount -t devtmpfs none /dev
    mount -t proc proc /proc
    mount -t sysfs sysfs /sys
    #
    # module
    #
    insmod /lib/modules/*/error404/*.ko
    chmod 666 /dev/Test
    # mmap_min_addr to 0 for the challenge to be simpler for now ;)
    echo 0 > /proc/sys/vm/mmap_min_addr
    #
    # shell
    #
    echo "Hello!"
    export ENV=/etc/profile
    setsid cttyhack setuidgid 1000 sh
    umount /proc
    umount /sys
    umount /dev
    poweroff -f
###  内核模块代码
这是一个相当简单的内核模块代码
    #include 
    #include 
    #include 
    #include 
    #include 
    MODULE_LICENSE("Dual BSD/GPL");
    static int hello_init(void)
    {
        printk(KERN_ALERT "[ERROR404]My First Module！");
        printk(KERN_ALERT "[ERROR404]sizeof cred   : %d", sizeof(struct cred));
        printk(KERN_ALERT "[ERROR404]sizeof tty    : %d", sizeof(struct tty_struct));
        printk(KERN_ALERT "[ERROR404]sizeof tty_op : %d", sizeof(struct tty_operations));
        return 0;
    }
    static void hello_exit(void)
    {
        printk(KERN_ALERT "[ERROR404]Bye!");
    }
    module_init(hello_init);
    module_exit(hello_exit);
我们首先需要在代码的同目录下写一个`makefile`，内容如下：
    obj-m := Test.o
    KERNELBUILD := /home/error404/Desktop/Mac_desktop/Linux-Kernel/SourceCode/linux-5.5.6
    CURDIR := /home/error404/Desktop/Mac_desktop/Linux-Kernel/build/Test
    modules:
        make -C $(KERNELBUILD) M=$(CURDIR) modules
    clean:
        make -C $(KERNELBUILD) M=$(CURDIR) clean
执行`make`进行编译，将编译出的文件放在`/lib/modules/5.5.6/error404/`下即可
###  启动QEMU
建立`Start_Kernel.sh`文件，内容如下：
    #！sh
    qemu-system-x86_64   
            -kernel ./bzImage 
            -initrd ./rootfs.cpio  
            -append 'console=ttyS0 loglevel=0 pti=off oops=panic panic=1 nokaslr' 
            -nographic
直接运行`Start_Kernel.sh`即可，紧接着运行`dmesg`即可看到结果
在下一篇文章的末尾将会展示带交互的内核模块的编写~
## 0x05 参考链接
[【原】GitBook – Linux Inside – 0xax](https://legacy.gitbook.com/book/0xax/linux-insides/details)
[【原】Linux-内核编译–咲夜南梦](https://196011564.github.io/2020/02/26/Linux-%E5%86%85%E6%A0%B8%E7%BC%96%E8%AF%91/#%E6%89%A7%E8%A1%8C%E4%BB%A5%E4%B8%8B%E5%91%BD%E4%BB%A4%E4%B8%8B%E8%BD%BDkernel%E6%BA%90%E7%A0%81)