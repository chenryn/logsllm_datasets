title:BlindIDS: Market-Compliant and Privacy-Friendly Intrusion Detection
System over Encrypted Traffic
author:S&apos;ebastien Canard and
A&quot;ıda Diop and
Nizar Kheir and
Marie Paindavoine and
Mohamed Sabt
BlindIDS: Market-Compliant and Privacy-Friendly Intrusion
Detection System over Encrypted Trafﬁc
Sébastien Canard
Orange Labs, France
PI:EMAIL
Aïda Diop
Orange Labs, France
PI:EMAIL
Nizar Kheir
Thales Group, France
PI:EMAIL
Marie Paindavoine
Orange Labs, France
PI:EMAIL
Mohamed Sabt
DejaMobile, France
PI:EMAIL
ABSTRACT
The goal of network intrusion detection is to inspect net-
work traﬃc in order to identify threats and known attack
patterns. One of its key features is Deep Packet Inspec-
tion (DPI), that extracts the content of network packets
and compares it against a set of detection signatures. While
DPI is commonly used to protect networks and informa-
tion systems, it requires direct access to the traﬃc content,
which makes it blinded against encrypted network protocols
such as HTTPS. So far, a diﬃcult choice was to be made
between the privacy of network users and security through
the inspection of their traﬃc content to detect attacks or
malicious activities.
This paper presents a novel approach that bridges the gap
between network security and privacy. It makes possible to
perform DPI directly on encrypted traﬃc, without knowing
neither the traﬃc content, nor the patterns of detection sig-
natures. The relevance of our work is that it preserves the
delicate balance in the security market ecosystem. Indeed,
security editors will be able to protect their distinctive de-
tection signatures and supply service providers only with en-
crypted attack patterns. In addition, service providers will
be able to integrate the encrypted signatures in their archi-
tectures and perform DPI without compromising the privacy
of network communications. Finally, users will be able to
preserve their privacy through traﬃc encryption, while also
beneﬁting from network security services. The extensive ex-
periments conducted in this paper prove that, compared to
existing encryption schemes, our solution reduces by 3 or-
ders of magnitude the connection setup time for new users,
and by 6 orders of magnitude the consumed memory space
on the DPI appliance.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
AsiaCCS ’17, April 2–6, 2017, Abu Dhabi, United Arab Emirates
c(cid:13) 2017 ACM. ISBN 978-1-4503-4944-4/17/04. . . $15.00
DOI: http://dx.doi.org/10.1145/3052973.3053013
Keywords
Intrusion detection, network middleboxes, deep packet in-
spection, decryptable searchable encryption, security, pri-
vacy
1.
INTRODUCTION
Network intrusion detection and prevention systems are
extensively used today for early warning and protection of
IT systems against generic attacks and intrusions. They
identify unauthorized use, misuse, and abuse of information
systems by both system insiders and external attackers [22].
They also supply a wide range of functionalities such as ac-
cess control through the blocking of unauthorized content
and destinations (e.g., IP or domain blacklists), data loss
protection, and detection of cyberattacks such as vulnera-
bility exploits, malwares, and botnets. A main feature of
these systems is Deep Packet Inspection (DPI). It inspects
the content of network packets and tunes decisions, includ-
ing making alert or even rejecting packets, based on a ﬁne-
grained matching against a set of known malicious patterns.
Nowadays, security editors operate extensive threat intelli-
gence in order to build and update their comprehensive set
of attack signatures, which is further used to conduct DPI
and to supply value-added security services. In fact, most se-
curity editors put forward their attack signatures databases
as a key competitive diﬀerentiator, arguing they may cover
a wider set of malicious patterns and attacks [13, 5]. They
are indeed often benchmarked against each other based on
the coverage of their attack signatures, which constitutes the
key driver for DPI-based security services - e.g., [26].
However, DPI requires access to the clear-text content of
network packets, making it blinded against network encryp-
tion (e.g., the use of SSL/TLS protocols). This is a funda-
mental limitation of DPI, as it opens the door wide to a large
number of attacks. According to a recent study, nearly half
of malware attacks in 2015 has inﬁltrated their target net-
works while using encryption as a cover [27]. This comes in
the context of an increasing trend towards network encryp-
tion, with 70% of global Internet traﬃc being encrypted by
the end of 2016, and some networks exceeding 80% [24].
To overcome the challenge of network encryption, a com-
mon solution called SSL inspection oﬀers to use Man-In-
The-Middle (MITM) appliances between the two ends of a
network connection.
It uses trusted certiﬁcates to imper-
sonate the recipient of the originating SSL session, then
decrypts and applies DPI over the clear-text traﬃc con-
561tent [14]. Nonetheless, SSL inspection breaks the end-to-end
security of the SSL protocol, raising security issues about
the privacy of the log data generated by the MITM ap-
pliance [15].
It also raises ethical issues. For instance,
Google has discovered the unauthorized use of digital certiﬁ-
cates issued by an intermediate certiﬁcate authority linked
to ANSSI, a French cyber security agency operating with
French intelligence agencies [23].
So far, a delicate choice was to be made between secu-
rity and privacy; either preserving end-to-end encryption,
or using SSL inspection and DPI [16]. Recently, a new ap-
proach called BlindBox, has proposed an encryption proto-
col that enables for the ﬁrst time to search for malicious
patterns directly over encrypted traﬃc [25]. BlindBox is
based on multi-party computation techniques, such as gar-
bled circuits and oblivious transfer. It allows a middlebox
appliance on the network path between the two ends of an
encrypted connection to search for malicious patterns with
no need to break the end-to-end encryption. This is a key
contribution of BlindBox, as it sets a milestone on the long
path towards reconciling network security and privacy. De-
spite its original solution, BlindBox still lacks two important
properties that would make quite diﬃcult the wide adoption
of this approach.
First, BlindBox requires that the middlebox encrypts the
entire set of malicious patterns to be looked for in the traﬃc
using a key derived from the secret session key of each new
HTTPS connection. This drastically increases the time for
connection setup. In particular, the connection setup time
was evaluated in [25] to 97 seconds for a generic HTTPS
connection, while using a sample set of 3 thousand detec-
tion signatures. The middlebox would also need to encrypt
and manage a distinct copy of the entire set of malicious
patterns used for detection, for the entire duration of every
single HTTPS connection. This requires an excessive mem-
ory space at the middlebox (e.g., 512GB for 3K rules and
100 parallel connections), which makes it very diﬃcult to
integrate in any real-world deployment. Second, BlindBox
requires the security editors to supply their entire set of mali-
cious patterns in clear-text to the service providers in charge
of middlebox appliances. Although this makes no diﬀerence
from a technical standpoint, it does not ﬁt with the delicate
balance in the security market ecosystem. Such malicious
patterns and their coverage constitute a key business diﬀer-
entiator for any security editor. Hence, it is highly unlikely
that security editors will be keen to deliver these valuable
assets in clear-text to the middlebox appliances [19].
In this paper, we leverage a decryptable searchable en-
cryption scheme [12], based on public-key cryptography, that
addresses these main limitations of the BlindBox approach.
The main goal is to provide a technically sound solution
that is at the same time (a) privacy-friendly, meaning no ac-
cess is possible to the clear-text content of encrypted traﬃc,
(b) security-aware, meaning it supports DPI over encrypted
traﬃc, and (c) practical, achieving both performance and
real-world market requirements. Extensive evaluations con-
ducted in this paper show that our encryption protocol en-
hances by several orders of magnitude the performance of
BlindBox, including both the connection setup time and the
memory space needed by the middlebox to perform its task.
To summarize, the contributions of this paper are three-
fold:
• a DPI solution that achieves both privacy and secu-
rity requirements, with a performance several orders of
magnitude closer to real-world conditions than other
similar encryption schemes such as BlindBox;
• a DPI solution that preserves the privacy of both net-
work traﬃc and pattern signatures. This provides in-
deed more privacy assurance to the users, since the
middlebox does not even know the patterns it is look-
ing for in the traﬃc;
• the ﬁrst complete and formal security model that char-
acterizes an intrusion detection system operating over
an encrypted traﬃc, which contribution may be of in-
dependent interest. We also prove that our DPI solu-
tion is secure in this model.
The paper is now organized as follows. Section 2 describes
the architecture of our solution and the key security and pri-
vacy requirements that it aims to achieve. Section 3 reviews
related work and summarizes our main contributions. Sec-
tion 4 introduces our encryption protocol and provides the
appropriate security and privacy proofs. Section 5 presents
evaluation and experimental results. Finally, section 6 con-
cludes.
2. ARCHITECTURE AND SECURITY
We ﬁrst describe the main architecture in which we will
work, and we then give the required security properties that
should be satisﬁed by our intrusion detection system in the
context of encrypted network communications.
2.1 Global Architecture
The encryption protocol that we describe in this paper in-
volves four main roles: security editor (a.k.a rule generator
in [25]), service provider (a.k.a. middlebox in [25]), sender
and receiver. The sender and receiver roles are interchange-
able with respect to our solution. Each end of a secure net-
work connection may play both the sender and receiver roles
within the same session. In a standard intrusion detection
scenario, either the sender or receiver role may be a mali-
cious entity (e.g., individual attacker, compromised server)
that attempts to compromise the other remote and benign
entity. Other scenarios including, for example, a malware-
infected terminal connecting to a malicious destination, may
still be possible. Both the sender and receiver roles in this
case are malicious. This is also a scenario that we cover in
our encryption protocol, unless when the two entities are
able to collaborate together. Although it is technically pos-
sible, this scenario may not be considered as a limitation to
our approach, since both parties may agree on a secret key
through a third channel that is out of reach for both the se-
curity editor and the service provider. Hence, such attacks
will get unnoticed even in the context of a clear-text network
traﬃc.
The security editor is the entity that is in charge of editing
the detection signatures. These signatures may include IP
or domain blacklists, such as malware domains, IPs enrolled
into botnets, or websites delivering censored or illicit con-
tent such as adultery and terrorism. They may also include
a logical combination of binary patterns that capture mal-
ware samples and vulnerability exploits. Finally, they may
include more elaborated regular expressions that character-
ize ﬁne-grained attacks such as SQL and code injections.
Detection signatures are key assets for the security editor.
562They require extensive and continuous threat intelligence in
order to constantly enhance their coverage so they may cap-
ture new threats including zero-day attacks. The security
editor role in this paper may belong to a large number of
market competitors such as Symantec, TrendMicro, McAfee,
BitDefender, and Kaspersky.
On the other hand, service providers are stakeholders that
oﬀer network and security services both to end-users and
enterprises. They supply middleboxes, both as physical ap-
pliances and virtual cloud-based services, and that support
multiple security services such as ﬁrewalls, proxies, data
loss protection, intrusion detection and prevention. Service
providers often partner with security editors in order to add
detection logic, pattern signatures for instance, into their
middleboxes.
In the context of this paper, services using
deep packet inspection are required to provide the same se-
curity guarantees both for encrypted and clear-text network
connections.
2.2 Security Requirements
Before going into a more formal description, we ﬁrst give
some words on the expected security requirements.
Service Provider (SP) role is handled in our protocol
as an Honest-but-Curious entity.
It applies DPI honestly
over the encrypted traﬃc, using the detection signatures
delivered by the security editor. The SP will try, however,
to acquire additional information about either or both the
traﬃc content and the malicious patterns represented in the
signatures. This is indeed a key contribution of our paper
compared to BlindBox, since in our protocol the SP does not
know neither the traﬃc content nor the pattern signatures.
The SP is able to blindly detect attacks, without knowing
the malicious patterns that it is looking for in the traﬃc.
Security Editor (SE) role is also handled in our pro-
tocol as an Honest-but-Curious entity. All detection signa-
tures include true and authentic malicious patterns whose
main purpose is exclusively to detect and qualify network
attacks. This is a fairly reasonable assumption because SEs
will not tarnish their reputation by issuing wrong or mis-
leading signatures. Moreover, wrong signatures that match
benign traﬃc will lead to false positives, which may degrade
the quality of service as perceived by end users. However,
the SE is curious, as it may try to acquire information about
the clear-text content of the traﬃc. This could be either
through direct eavesdropping over the network, or through
the SP alerts.
Colluding SE and SP that use our encryption protocol
will be able to mount a dictionary attack. Therefore, we
consider that the SE and SP will not collaborate together in
our security model. We consider this assumption as fairly
reasonable because both SE and SP may be curious, but
open dishonest behavior will cause them extensive damages
in a free market environment.
Colluding sender and receiver can agree on a shared
secret using a third channel that is out of reach for both
SE and SP. In case of a malicious sender and receiver, our
security model does not expect both parties to collaborate.
We refer to the example of an infected bot connecting to
its command server which is under control of the same at-
tacker. We may split this scenario into two phases. First,
an attacker may compromise a benign terminal and recruit
it into a malicious botnet network. Second, the infected bot
connects to a remote command and control a server that
was speciﬁcally set by the attacker for this purpose. Un-
fortunately, when network encryption is used, our security
model only detects the ﬁrst phase. Nevertheless, this is also
a limitation to all existing SSL inspection solutions since