### Characteristics of dTPM3

dTPM3 is significantly faster than dTPM1 and dTPM2. An analysis of the raw data (refer to [44]) suggests that dTPM3 continuously searches for prime numbers in the background, even when no TPM command is issued, and maintains a cache of these primes. This behavior is evident in Figure 7, which shows high variability in the latency of key creation due to the varying time required to find prime numbers.

To further investigate this variability, we instrumented the fTPM codebase to count the number of prime candidates considered during the creation of an RSA 2048 key pair. In each test, all candidates except the last one were composite numbers and thus discarded. We repeated this test 1,000 times and plotted the cumulative distribution function of the number of candidates for each of the two primes (p and q) in Figure 8. The results highlight the significant variability in the number of candidate primes considered. On average, it takes about 200 candidates to find a prime (the median was 232 and 247 candidates for p and q, respectively), but in some cases, a single prime search can consider and discard thousands of candidates (the worst case was 3,145 and 2,471 for p and q, respectively).

### Performance Comparison: fTPMs vs. dTPMs

Figures 9–15 illustrate the latencies of several common TPM 2.0 commands. The primary finding is that fTPMs are much faster than their discrete counterparts. On average, the slowest fTPM is anywhere between 2.4X (for decryption) and 15.12X (for sealing) faster than the fastest dTPM. This performance difference is not surprising, as fTPMs run their code on ARM Cortex processors, while discrete chips use much slower microprocessors. The fTPM technical report [44] provides more detailed insights into these performance improvements.

These performance results are encouraging, especially since traditional TPMs have not been used for bulk data cryptographic operations due to their performance limitations. With firmware TPMs, the performance of these operations is limited only by processor speed and memory bandwidth. Additionally, fTPMs could become even faster by leveraging crypto accelerators. Over time, we anticipate that cryptographic operations will increasingly favor the fTPM over OS crypto libraries, providing increased security as private keys never leave TrustZone’s secure perimeter.

### Evaluation Summary

In summary, our evaluation demonstrates that:
1. Firmware TPMs (fTPMs) outperform discrete TPM chips.
2. Creating RSA keys is a lengthy operation with high performance variability.

### Security Analysis

The security guarantees provided by fTPMs differ from those of discrete TPM chips. This section examines these differences in detail.

#### On- versus Off-Chip

Discrete TPM chips connect to the CPU via a serial bus, which represents a new attack surface as it is externally exposed to an attacker with physical access to the main board. Early TPM chips were attached to the I2C bus, making it possible for an attacker to intercept and issue TPM commands [49]. Modern TPM specifications recommend attaching the TPM chip to a fast CPU bus and providing a secure platform reboot signal, ensuring the TPM reboots if and only if the platform reboots.

In contrast, fTPMs running in the device's firmware avoid this attack surface. The fTPM has no separate bus to the CPU, reads its state from secure storage upon initialization, and stores all its state in the CPU and hardware-protected DRAM.

#### Memory Attacks

By storing secrets in DRAM, fTPMs are vulnerable to memory attacks, such as cold boot attacks [23, 39], monitoring data transfers between the CPU and system RAM [21, 17, 18], or DMA attacks [6, 8, 42]. Discrete TPM chips, which do not use the system’s DRAM, are resilient to such attacks. However, they are susceptible to decapping attacks, where the chip’s physical encasing is removed to expose and read its internal secrets [26].

We have investigated inexpensive counter-measures to mitigate these vulnerabilities. Sentry, a prototype, demonstrates how fTPMs can be made resilient to memory attacks by retrofitting ARM-specific mechanisms designed for embedded systems, such as L2 cache locking or internal RAM [10]. Note that Intel SGX [25] provides hardware encryption of DRAM, protecting against memory attacks.

#### Side-Channel Attacks

Given that certain resources are shared between the secure and normal worlds, side-channel attacks must be carefully mitigated. A discrete TPM chip is immune to side-channel attacks that use caching, memory, or CPU because these resources are not shared with the untrusted OS.

- **Caches, Memory, and CPU:** The ARM TrustZone specification reduces the likelihood of cache-based side-channel attacks by invalidating caches during transitions to and from the secure world. Memory is statically partitioned between the two worlds at platform initialization, reducing the likelihood of side-channel attacks. The CPU also invalidates all its registers upon each crossing to and from the secure world.
- **Time-Based Attacks:** The TPM 2.0 specification includes precautions against time-based attacks. For example, the entire cryptography subsystem uses constant-time functions, making the fTPM implementation as resilient to time-based side-channel attacks as its discrete chip counterpart.

### Discussion

Most of the shortcomings of ARM TrustZone stem from its nature as a standalone CPU-based security mechanism. CPU extensions alone are insufficient to address all security challenges, and additional measures are often necessary to ensure robust protection.