       * for (const key of params.keys()) {
       *   console.log(key);
       * }
       * ```
       */
      keys(): IterableIterator;
      /** Returns an iterator allowing to go through all values contained
       * in this object.
       *
       * ```ts
       * const params = new URLSearchParams([["a", "b"], ["c", "d"]]);
       * for (const value of params.values()) {
       *   console.log(value);
       * }
       * ```
       */
      values(): IterableIterator;
      /** Returns an iterator allowing to go through all key/value
       * pairs contained in this object.
       *
       * ```ts
       * const params = new URLSearchParams([["a", "b"], ["c", "d"]]);
       * for (const [key, value] of params.entries()) {
       *   console.log(key, value);
       * }
       * ```
       */
      entries(): IterableIterator;
      /** Returns an iterator allowing to go through all key/value
       * pairs contained in this object.
       *
       * ```ts
       * const params = new URLSearchParams([["a", "b"], ["c", "d"]]);
       * for (const [key, value] of params) {
       *   console.log(key, value);
       * }
       * ```
       */
      [Symbol.iterator](): IterableIterator;
      /** Returns a query string suitable for use in a URL.
       *
       * ```ts
       * searchParams.toString();
       * ```
       */
      toString(): string;
    }
    declare const URLSearchParams: {
      prototype: URLSearchParams;
      new (
        init?: string[][] | Record | string | URLSearchParams
      ): URLSearchParams;
      toString(): string;
    };
    /** The URL┬áinterface represents an object providing static methods used for creating object URLs. */
    interface URL {
      hash: string;
      host: string;
      hostname: string;
      href: string;
      toString(): string;
      readonly origin: string;
      password: string;
      pathname: string;
      port: string;
      protocol: string;
      search: string;
      readonly searchParams: URLSearchParams;
      username: string;
      toJSON(): string;
    }
    declare const URL: {
      prototype: URL;
      new (url: string | URL, base?: string | URL): URL;
      createObjectURL(object: any): string;
      revokeObjectURL(url: string): void;
    };
    interface MessageEventInit extends EventInit {
      data?: any;
      origin?: string;
      lastEventId?: string;
    }
    declare class MessageEvent extends Event {
      readonly data: any;
      readonly origin: string;
      readonly lastEventId: string;
      constructor(type: string, eventInitDict?: MessageEventInit);
    }
    interface ErrorEventInit extends EventInit {
      message?: string;
      filename?: string;
      lineno?: number;
      colno?: number;
      error?: any;
    }
    declare class ErrorEvent extends Event {
      readonly message: string;
      readonly filename: string;
      readonly lineno: number;
      readonly colno: number;
      readonly error: any;
      constructor(type: string, eventInitDict?: ErrorEventInit);
    }
    interface PostMessageOptions {
      transfer?: any[];
    }
    declare class Worker extends EventTarget {
      onerror?: (e: ErrorEvent) => void;
      onmessage?: (e: MessageEvent) => void;
      onmessageerror?: (e: MessageEvent) => void;
      constructor(
        specifier: string,
        options?: {
          type?: "classic" | "module";
          name?: string;
          /** UNSTABLE: New API. Expect many changes; most likely this
           * field will be made into an object for more granular
           * configuration of worker thread (permissions, import map, etc.).
           *
           * Set to `true` to make `Deno` namespace and all of its methods
           * available to worker thread.
           *
           * Currently worker inherits permissions from main thread (permissions
           * given using `--allow-*` flags).
           * Configurable permissions are on the roadmap to be implemented.
           *
           * Example:
           *
           * ```ts
           * // mod.ts
           * const worker = new Worker("./deno_worker.ts", { type: "module", deno: true });
           * worker.postMessage({ cmd: "readFile", fileName: "./log.txt" });
           *
           * // deno_worker.ts
           *
           *
           * self.onmessage = async function (e) {
           *     const { cmd, fileName } = e.data;
           *     if (cmd !== "readFile") {
           *         throw new Error("Invalid command");
           *     }
           *     const buf = await Deno.readFile(fileName);
           *     const fileContents = new TextDecoder().decode(buf);
           *     console.log(fileContents);
           * }
           * ```
           *
           * // log.txt
           * hello world
           * hello world 2
           *
           * // run program
           * $ deno run --allow-read mod.ts
           * hello world
           * hello world2
           *
           */
          deno?: boolean;
        }
      );
      postMessage(message: any, transfer: ArrayBuffer[]): void;
      postMessage(message: any, options?: PostMessageOptions): void;
      terminate(): void;
    }
    declare namespace performance {
      /** Returns a current time from Deno's start in milliseconds.
       *
       * Use the flag --allow-hrtime return a precise value.
       *
       * ```ts
       * const t = performance.now();
       * console.log(`${t} ms since start!`);
       * ```
       */
      export function now(): number;
    }
    interface EventInit {
      bubbles?: boolean;
      cancelable?: boolean;
      composed?: boolean;
    }
    /** An event which takes place in the DOM. */
    declare class Event {
      constructor(type: string, eventInitDict?: EventInit);
      /** Returns true or false depending on how event was initialized. True if
       * event goes through its target's ancestors in reverse tree order, and
       * false otherwise. */
      readonly bubbles: boolean;
      cancelBubble: boolean;
      /** Returns true or false depending on how event was initialized. Its return
       * value does not always carry meaning, but true can indicate that part of the
       * operation during which event was dispatched, can be canceled by invoking
       * the preventDefault() method. */
      readonly cancelable: boolean;
      /** Returns true or false depending on how event was initialized. True if
       * event invokes listeners past a ShadowRoot node that is the root of its
       * target, and false otherwise. */
      readonly composed: boolean;
      /** Returns the object whose event listener's callback is currently being
       * invoked. */
      readonly currentTarget: EventTarget | null;
      /** Returns true if preventDefault() was invoked successfully to indicate
       * cancellation, and false otherwise. */
      readonly defaultPrevented: boolean;
      /** Returns the event's phase, which is one of NONE, CAPTURING_PHASE,
       * AT_TARGET, and BUBBLING_PHASE. */
      readonly eventPhase: number;
      /** Returns true if event was dispatched by the user agent, and false
       * otherwise. */
      readonly isTrusted: boolean;
      /** Returns the object to which event is dispatched (its target). */
      readonly target: EventTarget | null;
      /** Returns the event's timestamp as the number of milliseconds measured
       * relative to the time origin. */
      readonly timeStamp: number;
      /** Returns the type of event, e.g. "click", "hashchange", or "submit". */
      readonly type: string;
      /** Returns the invocation target objects of event's path (objects on which
       * listeners will be invoked), except for any nodes in shadow trees of which
       * the shadow root's mode is "closed" that are not reachable from event's
       * currentTarget. */
      composedPath(): EventTarget[];
      /** If invoked when the cancelable attribute value is true, and while
       * executing a listener for the event with passive set to false, signals to
       * the operation that caused event to be dispatched that it needs to be
       * canceled. */
      preventDefault(): void;
      /** Invoking this method prevents event from reaching any registered event
       * listeners after the current one finishes running and, when dispatched in a
       * tree, also prevents event from reaching any other objects. */
      stopImmediatePropagation(): void;
      /** When dispatched in a tree, invoking this method prevents event from
       * reaching any objects other than the current object. */
      stopPropagation(): void;
      readonly AT_TARGET: number;
      readonly BUBBLING_PHASE: number;
      readonly CAPTURING_PHASE: number;
      readonly NONE: number;
      static readonly AT_TARGET: number;
      static readonly BUBBLING_PHASE: number;
      static readonly CAPTURING_PHASE: number;
      static readonly NONE: number;
    }
    /**
     * EventTarget is a DOM interface implemented by objects that can receive events
     * and may have listeners for them.
     */
    declare class EventTarget {
      /** Appends an event listener for events whose type attribute value is type.
       * The callback argument sets the callback that will be invoked when the event
       * is dispatched.
       *
       * The options argument sets listener-specific options. For compatibility this
       * can be a boolean, in which case the method behaves exactly as if the value
       * was specified as options's capture.
       *
       * When set to true, options's capture prevents callback from being invoked
       * when the event's eventPhase attribute value is BUBBLING_PHASE. When false
       * (or not present), callback will not be invoked when event's eventPhase
       * attribute value is CAPTURING_PHASE. Either way, callback will be invoked if
       * event's eventPhase attribute value is AT_TARGET.
       *
       * When set to true, options's passive indicates that the callback will not
       * cancel the event by invoking preventDefault(). This is used to enable
       * performance optimizations described in ┬º 2.8 Observing event listeners.
       *
       * When set to true, options's once indicates that the callback will only be
       * invoked once after which the event listener will be removed.
       *
       * The event listener is appended to target's event listener list and is not
       * appended if it has the same type, callback, and capture. */
      addEventListener(
        type: string,
        listener: EventListenerOrEventListenerObject | null,
        options?: boolean | AddEventListenerOptions
      ): void;
      /** Dispatches a synthetic event event to target and returns true if either
       * event's cancelable attribute value is false or its preventDefault() method
       * was not invoked, and false otherwise. */
      dispatchEvent(event: Event): boolean;
      /** Removes the event listener in target's event listener list with the same
       * type, callback, and options. */
      removeEventListener(
        type: string,
        callback: EventListenerOrEventListenerObject | null,
        options?: EventListenerOptions | boolean
      ): void;
      [Symbol.toStringTag]: string;
    }
    interface EventListener {
      (evt: Event): void | Promise;
    }
    interface EventListenerObject {
      handleEvent(evt: Event): void | Promise;
    }
    declare type EventListenerOrEventListenerObject =
      | EventListener
      | EventListenerObject;
    interface AddEventListenerOptions extends EventListenerOptions {
      once?: boolean;
      passive?: boolean;
    }
    interface EventListenerOptions {
      capture?: boolean;
    }
    /** Events measuring progress of an underlying process, like an HTTP request
     * (for an XMLHttpRequest, or the loading of the underlying resource of an
     * , , ,  or ). */
    interface ProgressEvent extends Event {
      readonly lengthComputable: boolean;
      readonly loaded: number;
      readonly target: T | null;
      readonly total: number;
    }
    interface CustomEventInit extends EventInit {
      detail?: T;
    }
    declare class CustomEvent extends Event {
      constructor(typeArg: string, eventInitDict?: CustomEventInit);
      /** Returns any custom data event was created with. Typically used for
       * synthetic events. */
      readonly detail: T;
    }
    /** A controller object that allows you to abort one or more DOM requests as and
     * when desired. */
    declare class AbortController {
      /** Returns the AbortSignal object associated with this object. */
      readonly signal: AbortSignal;
      /** Invoking this method will set this object's AbortSignal's aborted flag and
       * signal to any observers that the associated activity is to be aborted. */
      abort(): void;
    }
    interface AbortSignalEventMap {
      abort: Event;
    }
    /** A signal object that allows you to communicate with a DOM request (such as a
     * Fetch) and abort it if required via an AbortController object. */
    interface AbortSignal extends EventTarget {
      /** Returns true if this AbortSignal's AbortController has signaled to abort,
       * and false otherwise. */
      readonly aborted: boolean;
      onabort: ((this: AbortSignal, ev: Event) => any) | null;
      addEventListener(
        type: K,
        listener: (this: AbortSignal, ev: AbortSignalEventMap[K]) => any,
        options?: boolean | AddEventListenerOptions
      ): void;
      addEventListener(
        type: string,
        listener: EventListenerOrEventListenerObject,
        options?: boolean | AddEventListenerOptions
      ): void;
      removeEventListener(
        type: K,
        listener: (this: AbortSignal, ev: AbortSignalEventMap[K]) => any,
        options?: boolean | EventListenerOptions
      ): void;
      removeEventListener(
        type: string,
        listener: EventListenerOrEventListenerObject,
        options?: boolean | EventListenerOptions
      ): void;
    }
    declare const AbortSignal: {
      prototype: AbortSignal;
      new (): AbortSignal;
    };
    // Copyright 2018-2020 the Deno authors. All rights reserved. MIT license.
    /* eslint-disable @typescript-eslint/no-explicit-any */
    /// 
    /// 
    /// 
    /// 
    declare interface Window extends EventTarget {
      readonly window: Window & typeof globalThis;
      readonly self: Window & typeof globalThis;
      onload: ((this: Window, ev: Event) => any) | null;
      onunload: ((this: Window, ev: Event) => any) | null;
      close: () => void;
      readonly closed: boolean;
      Deno: typeof Deno;
    }
    declare const window: Window & typeof globalThis;
    declare const self: Window & typeof globalThis;
    declare const onload: ((this: Window, ev: Event) => any) | null;
    declare const onunload: ((this: Window, ev: Event) => any) | null;
    /* eslint-enable @typescript-eslint/no-explicit-any */