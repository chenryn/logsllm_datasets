### Technical Report, LSDIS Lab, Computer Science Department, University of Georgia, September 2002. © UGA

**Title: Healthcare Enterprise Process Development and Integration**

**Authors:**
- Kemafor Anyanwu
- Amit Sheth
- Jorge Cardoso
- John Miller
- Krys Kochut

**Affiliation:**
LSDIS Lab, Department of Computer Science, University of Georgia, Athens, GA 30602-7404, USA

**Contact:**
- PI: [EMAIL]
- Tel: 706-542-2310
- Fax: 706-542-4771

**Abstract:**
Healthcare enterprises involve complex processes that span diverse groups and organizations, encompassing clinical and administrative tasks, large volumes of data, and a significant number of patients and personnel. These tasks can be performed by humans or automated systems, often supported by heterogeneous, autonomous, and distributed software applications and information systems. The development of systems to manage and automate these processes has become increasingly important for improving the efficiency of healthcare enterprises.

In this paper, we examine four healthcare and medical applications involving investigative, clinical, and administrative functions. Based on these applications, we derive the requirements for developing enterprise applications that coordinate a variety of tasks performed by humans, information systems, and legacy applications.

**Keywords:**
workflow management systems, healthcare processes, healthcare applications, clinical pathways, immunization tracking, eligibility referral, genome sequencing

---

### 1. Introduction

The recent push for healthcare reform has prompted healthcare organizations to focus on streamlining their processes to deliver high-quality care while reducing costs. This has led to a review and upgrade of clinical and administrative protocols and an increased use of information systems to improve process efficiency. Since processes are fundamental to organizational success, information technologies that focus on process management and improvement are essential for helping healthcare organizations achieve their goals.

In the past two decades, Workflow Management Systems (WfMSs) have gained attention as tools to streamline, automate, and re-engineer business processes. While many workflow products support relatively simple processes like document management, form processing, and imaging, they fall short in handling mission-critical processes, which are often complex, dynamic, large-scale, and QoS-based (Sheth, Georgakopoulos et al. 1996; Cardoso, Sheth et al. 2002). These qualities are typical in healthcare processes.

Healthcare processes are highly complex, involving both clinical and administrative tasks, large volumes of data, and a large number of patients and personnel. For example, an outpatient clinic visit involves administrative tasks performed by an assistant and clinical tasks performed by a doctor or nurse. An inpatient hospital visit involves even more activities and lasts at least as long as the patient's hospitalization.

Healthcare processes are also very dynamic. Changes in healthcare treatments, drugs, and protocols may invalidate running instances, requiring reparative actions (Berry and Myers 1998; Shrivastava and Wheater 1998). For instance, a care pathway for a patient with a specific disease condition may need to be adjusted as new drugs are discovered.

Large-scale processes often span multiple healthcare organizations and run over extended periods (Dayal, Hsu et al. 1991). Such processes require highly scalable workflow systems to support large instances (Bonner, Shruf et al. 1996). Additionally, these processes must integrate with legacy information systems and operate in distributed, autonomous, and heterogeneous computing environments (Georgakopoulos, Hornick et al. 1995), necessitating support for transactional features and error handling (Worah, Sheth et al. 1997).

Quality of Service (QoS) management is another critical requirement. Healthcare organizations operating in modern markets need well-defined services available to patients. Effective QoS management leads to the creation of quality care services, enhancing patient satisfaction.

This paper discusses the use of the METEOR workflow system for managing mission-critical healthcare processes. The METEOR system's workflow management and enterprise application integration techniques are designed to support complex, dynamic, large-scale, and QoS-based workflow applications in real-world, multi-enterprise, and heterogeneous computing environments.

An important aspect of the METEOR project is its close collaboration with industry partners, including the Connecticut Healthcare Research and Education Foundation (CHREF), the Medical College of Georgia (MCG), and the Advanced Technology Institute. These collaborations have generated a detailed study of healthcare workflow application requirements, the prototyping of significant healthcare workflow applications, and the evaluation of METEOR’s technology.

**Structure of the Paper:**
- Section 2: Current generation of information systems supporting healthcare processes.
- Section 3: Description of the METEOR system.
- Section 4: Four healthcare workflow applications using the METEOR system.
- Section 5: Benefits of the METEOR approach.
- Section 6: Conclusions.

---

### 2. Supporting Healthcare Processes with the Current Generation of Workflow Systems

Traditionally, healthcare processes have been managed using limited forms of workflow, such as clinical and administrative protocols. However, these protocols have remained limited in their usefulness because developers rarely incorporate both clinical and administrative activities into one comprehensive care protocol. This lack of integration hinders the delivery of care, as the effectiveness of protocols often depends on the proper execution of administrative tasks at the correct time (Chaiken 1997). Consequently, many healthcare organizations are now turning to workflow management techniques to improve the efficiency of their work processes.

The trend toward computerizing business processes has led to a large number of commercially available information systems, some of which specifically target the healthcare sector. These systems offer various levels of process support, functionality, and robustness.

At one end of the spectrum, there are customized workflow application systems that support human-oriented and vertical group processes. These processes typically involve a small number of tasks executed in a predefined sequence and require few roles within a single group. Examples include VMI Medical, which offers a pediatric cardiology workflow system; TeleTracking, which helps hospital administrators and staff manage and coordinate patient care; and Soarian, which synchronizes workflows across the entire enterprise and orchestrates patient care by integrating clinical, financial, therapeutic, and diagnostic information.

Another class of applications at this end of the spectrum focuses on supporting information and document management functions. These applications are usually built on top of data management systems designed to capture, store, retrieve, and manage unstructured information objects such as text, spreadsheets, audio clips, images, video, files, and multimedia. Examples include CareFlowNet, which provides for the creation, management, and delivery of medical documentation, and SoftMed, which offers a suite of applications for clinical data management, patient information management, and document acquisition and storage.

At the other end of the process support spectrum, there are general-purpose workflow management systems. These systems provide tools for process definition, workflow enactment, administration, and monitoring of workflow processes. Research prototypes include METEOR, MOBILE, ADEPT, EXOTICA, and MENTOR. Commercial products include MQSeries Workflow, Staffware, TIBCO InConcert, and COSA Workflow. General information on workflow systems can be found at the Workflow and Reengineering International Association (WARIA) and the Workflow Management Coalition (WfMC) websites.

The current generation of workflow systems adequately supports administrative and production workflows (McCready 1992) but is less adequate for more horizontal healthcare processes with complex requirements. These processes are dynamic and involve different types of tasks, including human-oriented tasks, tasks associated with legacy applications, and database transactions. They are large-scale, cross-functional, and cross-organizational, with participating groups having distributed and heterogeneous computing environments. Workflow infrastructures to support such processes are limited, primarily due to centralized client/server architectures and a lack of support for features such as exception modeling and handling and QoS management.

Another critical requirement that current workflow systems seldom provide is an integration environment. Different functional groups within a healthcare organization may require different types of applications to support their processes. For example, integrating Picture Archiving and Communication Systems (PACS) with hospital or radiology information systems allows radiologists to access collateral patient information, greatly aiding in the interpretation of images (DeJesus 1998).

Healthcare organizations typically have various information systems, including legacy applications, that need to be integrated. Unfortunately, many workflow systems are based on closed, proprietary architectures, making interoperability and integration a challenging, if not impossible, task.

The METEOR system was specifically developed to address these issues. It provides an infrastructure that supports mission-critical, enterprise-wide processes and integrates heterogeneous, autonomous, and distributed information systems. A general description of the system is provided in the next section. For a comprehensive and detailed description, the reader is referred to Miller, Palaniswami et al. (1998) and Kochut, Sheth et al. (1999).

---

### 3. The METEOR System

The METEOR (Managing End to End OpeRations) system leverages Java, CORBA, and Web technologies to support the development of enterprise applications requiring workflow management and integration. It enables the development of complex workflow applications that involve legacy information systems and operate in geographically distributed and heterogeneous hardware and software environments, spanning multiple organizations. METEOR also provides support for dynamic workflows, error and exception handling, recovery, and QoS management. The system has been successfully used to prototype and deploy several healthcare applications, partly due to extensive collaboration with healthcare industry partners.

The METEOR system includes all the components needed to design, build, deploy, run, and monitor workflow applications. It provides four main services: the Builder, the Enactment, the Repository, and the Manager services.

#### 3.1 The Builder Service

The builder service supports the graphical design of workflows (Lin 1997; Zheng 1997). It includes three main components:
- **Task Design Component:** Provides interfaces with external task development tools, such as Microsoft’s FrontPage, to design the interface of a user task.
- **Network Design Component:** Used to set dependencies, data objects, and transition functions among tasks, and to define security domains and roles.
- **Data Design Component:** Allows the user to specify data objects employed in the workflow.

The service outputs an XML-based representation of process definitions, which can be formatted to comply with the Workflow Process Definition Language (WPDL) of the Workflow Management Coalition (WfMC 2002).

#### 3.2 The Enactment Service

METEOR provides two enactment services: ORBWork (Kochut, Sheth et al. 1999) and WebWork (Miller, Palaniswami et al. 1998). Both services use a fully-distributed open architecture. WebWork is a lightweight implementation suitable for traditional workflows, help-desk, and data exchange applications. ORBWork is better suited for demanding, mission-critical enterprise applications requiring high scalability, robustness, exception-handling support, QoS management, and dynamic modifications.

#### 3.3 The Repository Service

The repository service maintains information about workflow definitions and associated workflow applications. The builder service tools communicate with the repository service to retrieve, update, and store workflow definitions, providing support for rapid application development. The builder service tools can browse the contents of the repository and incorporate fragments (sub-workflows or individual tasks) of existing workflow definitions into the one currently being created.

A detailed description of the first design and implementation of this service is presented in Yong (1998), and an XML-based implementation is described in Arpinar, Miller et al. (2001).

#### 3.4 Management Services

The management services provide tools for administering and monitoring workflow instances. The administration service is used by the workflow administrator to perform management functions, such as installing and configuring workflow instances, load-balancing, and modifying workflow processes in execution. The monitor provides a tool for querying and viewing the state of workflow instances.

#### 3.5 METEOR’s Advanced Features

**Automatic Code Generation:**
METEOR includes a code generator (Miller, Palaniswami et al. 1998) that builds workflow applications from the workflow specifications generated by the builder service or stored in the repository. This minimizes the steps required to implement the workflow, freeing the designer from worrying about communication details or data passing among existing tasks.

**Fully Distributed System:**
The fully distributed architecture of METEOR offers significant benefits in scalability. It allows for the support of geographically distributed workflow processes, provides load-balancing among participating host machines, and eliminates the existence of a single point of failure within the system.

**Use of Standards:**
The METEOR system closely follows the specifications and interoperability standards set by bodies such as the WfMC (WfMC 2002) and the Object Management Group (OMG 1998). METEOR also supports workflow interoperability standards such as JFLOW (JFLOW 1998) and SWAP (Swenson 1998), and it utilizes CORBA for its distributed architecture.