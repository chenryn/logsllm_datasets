• Purpose speciﬁcation. RFID users must be warned about the purposes for which
• Collection limitation. Collection of information should be limited to a well-
• Accountability. Retailers and users of this technology should be legally responsi-
• Security safeguards. Security should prevail the RFID environment (communi-
cations, database and system access) and should be easily veriﬁable by third-
parties.
ble for complying with the principles.
speciﬁed purpose.
3.3 Protocol Approaches
In this section, we are going to review some proposals that enhance user privacy
without requiring any speciﬁc actions by the user. Unfortunately, this review cannot
be comprehensive due to the immense amount of work in RFID security (an online
repository is available at [27]). Instead, we will focus on the main constructions that
will also help us highlight some of the protocol design issues in providing for secure
and anonymous tag-to-reader transactions (additional information can be found in
[28, 29]).
In general, all protocols rely on the existence of a secret shared between the tag
and the reader (back-end database). This secret can be common to all tags, however,
compromise of even a single tag leads to compromising the entire system. Another
possibility is to have different secrets per tag. The disadvantage in this case is that
a mechanism is required to allow the reader to determine which secret was used
for which tag. Unfortunately, most obvious approaches either send an index to the
system database (which opens the possibility of tracing) or require the database to
exhaustively search over the collection of keys to identify the correct tag. However,
these approaches do not scale well, especially when the database may contain bil-
lions of items.
A closely related problem to efﬁcient identiﬁcation is authentication between the
tag and the reader. Tags must reveal their identities only to authorized readers but
this should happen only if the reader has been authenticated to the tag. However,
there is a chicken-and-egg problem here: In order to eliminate spooﬁng attacks,
the reader can only authenticate itself if it knows the secret of the tag; but this
requires knowledge of the tag’s ID. However, the tag cannot reveal its ID unless
the reader has already been authenticated to it. In the remaining section, we will see
how existing solutions aim to address these problems and we will point to several
issues that need to be taken care when designing a secure RFID protocol.
Finally, a point that needs to be remembered is that security and privacy is really
a multilayered issue [30]. A cryptographic protocol, for example, aims to secure
the application layer. At the lower layers there exist anticollision and other basic
RF protocols. What if some information is leaked because of the singulation pro-
tocol used to disambiguate a tag from millions others? Also, since tags need to
70
T. Dimitriou
abide to standards, couldn’t a mix of standards help identify the person carrying the
corresponding tags? Finally, what about radio ﬁngerprinting in the physical layer?
Couldn’t a tag be traced by its signal transmitting variations while interacting with
a reader? Despite these threats, in the remainder of the section, we will focus on the
upper layer since this is the starting point for traceability.
3.3.1 HashLock Scheme – Weis, Sarma, Rivest, and Engels [31]
In the work of [31] the authors propose the HashLock scheme: The tag carries a key
K and a metaID which is simply the hash value of the key, h(K). When a reader
interrogates the tag, the tag responds with its metaID which is forwarded to the
back-end database. The database recognizes the tag from its metaID, the secret key
K is forwarded to the reader which eventually reports back this value to the tag.
At this point the tag hashes the value received and if it matches the stored metaID
it unlocks itself. Although this scheme is simple and reliable it suffers from many
drawbacks. Perhaps the most serious one is that a tag can still be tracked by its
metaID. Furthermore, the valid key K is sent in the clear so an adversary can easily
capture the key and later spoof the tag to the reader.
In an attempt to improve upon this scheme, the authors presented a randomized
variant in which tag responses change with every query made (Fig. 4). In particular,
the tag sends a pair (cid:10)r,h(ID,r)(cid:11), where r is a nonce that is a randomly generated
number used only once. Clearly, this scheme solves the tracking problem mentioned
above as no ﬁxed IDs are sent over time. However, a new problem is introduced. As
the tag responds with different values every time, the database must exhaustively
search through its list of known IDs until it ﬁnds one that matches h(ID,r), for the
given number r. Apart from this scalability problem, there is also a very simple
protocol attack that can be applied: an adversary can query a tag and learn a valid
pair (cid:10)r,h(ID,r)(cid:11), which then allows the attacker to impersonate (spoof or clone) the
tag to a legitimate reader. This is a serious security ﬂaw as the reader will identify
the tag. In addition, the scheme allows the location history of the tag to be traced if
the tag itself is compromised. Hence forward secrecy is not guaranteed.
Fig. 4 A randomized variant presented in [31]
RFID Security and Privacy
71
Fig. 5 A randomized and forward secure scheme presented in [32]
3.3.2 Ohkubo, Suzuki, and Kinoshita [32]
In [32], the authors devised a scheme that uses a low-cost hash-chain mechanism
to defeat the problem of tracing and ensure forward security in tag transactions.
The basic idea is to modify the tag ID each time the tag is queried so that the tag
is recognized by authorized parties only. The scheme uses two hash functions H
and G, one to refresh the secret in the tag, the other to make responses of the tag
untraceable by eavesdroppers. Hence this scheme can be seen as an extension of the
randomized version in [31] that also guarantees security of past transactions.
Initially, the tag is preloaded with a secret s0. When the tag is queried by a reader
it reports the value G(si), where si is the tag secret during the ith transaction (Fig. 5).
Then it updates its secret through the operation si+1 = H(si). However, just as in the
previous scheme, scalability is problematic as it requires exhaustive search in the
back-end database to locate the ID of the tag. Although in [33] a time–space mem-
ory tradeoff is presented, the scalability problem remains an issue. Furthermore, an
attacker can still query a tag then replay the tag’s response to authenticate itself to a
valid reader.
3.3.3 Dimitriou [34]
In an attempt to solve the scalability problem, a protocol was proposed in [34],
where the hash value of the secret ID of the tag is used by the back-end database
to search and identify the tag. During system initialization the tag is loaded with an
initial, secret identiﬁer s0 which is set to a random value. In a similar way, the back-
end database contains the same data stored in the tag, together with a hash value of
its ID, h(s0), that serves as the main key to look for any information related to this
particular tag.
the tag answers back with a message of the form
(r)(cid:11), where si is the secret ID of the tag during the ith query and r a
(cid:10)h(si),r,hsi
random number. The reader and eventually the back-end database upon receiving
h(si) uses this value to search and recover the identity si of the tag. Once the data-
(r) to connect all the pieces together
base has the si value, it can use the last part hsi
(this part essentially acts as a message authentication code) and verify the authentic-
ity of the message. At this point the database accepts the tag as authentic and renews
Upon query (Fig. 6),
72
T. Dimitriou
Fig. 6 A protocol presented in [34]
Fig. 7 An enhanced protocol presented in [34]
the secret identity from si to si+1. The tag does the same and erases any relevant
information (r and si) from its memory. It should be clear by the description that
this scheme is at least as good as the previous protocols since (1) it leads to faster
identiﬁcation, (2) it is forward secure, and (3) tracing is not possible. However, we
should mention here that the scheme falls prey to a denial-of-service attack aiming
at desynchronizing the tag from the database. If an invalid read attempt is made,
the tag will update its secret from si to si+1 resulting in desynchronization from the
database. From then on, identiﬁcation can only happen through exhaustive search.
To solve this desynchronization issue, another protocol was proposed that allows
for mutual authentication between tag and reader (Fig. 7). Observe that this is just
the simpler protocol enhanced with an extra message whose purpose is to authenti-
cate the reader to the tag. This extra step essentially allows the tag to disregard any
queries made by unauthorized readers. Thus the issue of desynchronization is elimi-
nated entirely. There is, however, a penalty that is paid for this increase in efﬁciency.
While the scheme ensures that the secret identiﬁer of the tag will change if the
tag interacts with a valid reader, between valid sessions the tag ID remains the same.
Tags are therefore subject to tracking during such intervals of inactivity. Any attempt
to hide h(IDi) will incur a cost in searching the database, thus making the scheme
not scalable as in [31, 32]. Privacy, however, can be regained if the user can make
valid read requests, perhaps through the use of a proxy device [47].
RFID Security and Privacy
3.3.4 Scalable Protocols
73
The scalability problem was addressed successfully in [35] and independently in
[36]. These schemes work as follows. First, a tree is constructed whose leaves con-
tain all possible tag identiﬁers T1,T2, . . . ,Tn of interest. Then the edges of the tree
are labeled with secret keys created during system setup. Each tag Ti is preloaded
with the keys corresponding to the path from root to Ti, thus tags may also share
secrets. If d is the length of such a path and k1
i denote the secret values
along the path to the ith tag, then the protocol for interacting with Ti is shown in
Fig. 8.
i , . . . ,kd
i ,k2
To identify a particular tag the back-end database must distinguish it from the
rest of the tags. This can be done as follows: recall that the database has obtained
the values NT , (cid:10) f 1, f 2, . . . , f d(cid:11), where each f j = Fk j
(N). Since it also knows the
secrets of all nodes, it can try to infer the path that leads to tag Ti using the following
method:
1. Consider the two keys k1
l is the ﬁrst key preloaded to tags belonging to the left subtree and k1
(N) and Fk1
r , labeling the edges leaving the root of the tree.
Thus k1
r is
(N)
the ﬁrst key used by all tags in the right subtree. Compute Fk1
and compare with the received value f 1. If f 1 is equal to the ﬁrst result, the tag
belongs to the left subtree, otherwise it belongs to the right one.
l and k1
r
2. Assume the path has been inferred up to a node at level j. Now consider the keys
k j
l and k j
r, labeling the edges leaving that node. Again compute F() using these
keys on input N and compare with value f j. Based on the output, continue to
either or the right subtree.
3. Repeat Step 2 until a leaf node (tag) is reached. If at any point in the process a
received value f j does not match either of the two results, stop and reject the tag.
It should be clear at this point that a valid tag will eventually be identiﬁed by
this process in time proportional to the depth of the tree (usually logarithmic in the
number of tags). Hence the whole process is very efﬁcient. It should also be clear
that since no ﬁxed identiﬁers are released, user privacy is enforced. Again, however,
we see a recurring theme: increase in efﬁciency may result in some loss in security
or privacy. This is because tags share secret keys, hence compromise of one tag may
reveal information about others. This is illustrated in Fig. 9.
i
l
Fig. 8 A scalable tree-based protocol
74
T. Dimitriou
1
k4
a
2
k4
d
3
k4
c
b
e
f
T1
T2
T3
T4
T5
T6
T7
T8
Fig. 9 Compromising a tag in the tree based protocol
Consider the case that T4 is being compromised and an attacker gains access to
the secret values stored in the tag. What does this mean about the privacy of the rest
of the tags? Looking at the tree of Fig. 9 we can see that only the tags that share
a common path are in danger of releasing private information. Nonetheless, some
form of tracking is still possible. Consider a person carrying T2 and T7 with her
all the time (say T2 corresponds to an expensive watch and T7 to a briefcase). An
attacker, having compromised T4, can ﬁnd out that the ﬁrst item is located in the
subtree rooted at c, thus it can correspond to one of T1 and T2. This is so because
when the attacker queries T2 and applies the identiﬁcation process described previ-
ously, she will succeed in computing the pseudorandom function (PRF) value using
key k1
4. This will be an indication that
the tagged item belongs to the subtree rooted at node c. Similarly, the second item
will be located under subtree b. Thus an attacker can use this information to track
people not by the tags they carry but by the subtrees these tags fall into! And the
more tags a person carries, the less probable it would be that this person is confused
with some other one [36, 37].
4 but will fail when attempts to do so using k2
The previous analysis clearly shows that tag secrets need to be refreshed occa-
sionally. Forward secrecy ensures that messages seen in the past still remain secure
even after the tag has been compromised. In the tree-based approach forward pri-
vacy is needed for another reason: As path keys are shared among tags, compromise
of a path may lead to compromise of other tags’ secrets. However, in the protocol
this is exactly the reason that hinders forward privacy. If the secrets along a path get
refreshed, tags belonging to either the left or the right of the speciﬁed path cannot
longer be identiﬁed efﬁciently. Whether a tradeoff between efﬁcient identiﬁcation
and forward privacy can be found remains an important research direction (see [38]
for an attempt towards that direction).
RFID Security and Privacy
3.3.5 Noncryptographic Solutions
75
The previous solutions assume that tags are capable of computing simple hash func-