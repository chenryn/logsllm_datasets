R = {ri | i /∈ L, 1 ≤ k ≤ n}
∪{rn+k | i /∈ L(cid:48), 1 ≤ k ≤ n} ,
M = {xi | i ∈ L} ∪ {yi | i ∈ L(cid:48)} .
As before, we let SG be the minimum set of subroots of
the GGM tree that covers R, and let SM be the minimum
set of subroots of the Merkle tree that covers M . Here, the
location of the ⊥ symbols in m(cid:48) are not suﬃcient to describe
the range of indices covered by SG and SM . Therefore, each
subroot must be prepended with a description of its path to
the root. Such an encoding has length at most logarithmic
in n.
The extended signature for m(cid:48) is (SG, SM , σ). The redac-
tor then sends the following information to the user over a
secure channel: (m(cid:48), SG, SM , σ).
The receiver of this information could also be another
redactor who performs an additional round of redaction on
the document. This intermediate redactor can further re-
dact subdocuments that have not been previously marked
as nonredactable. This is enforced via the semantics in Fig-
ure 1, and by the fact that this redactor cannot compute the
necessary preimages in the Merkle and GGM trees to change
a subdocument from nonredactable to redactable. Similarly,
the redactor can mark subdocuments as nonredactable if and
only if they have not been previously redacted.
As before, the communication overhead of this algorithm
is due to SG and SM . Once again, we can expect that
for many sorts of documents both the redacted parts and
the parts to be marked as nonredactable will occur in se-
quences of consecutive subdocuments. If L ∪ L(cid:48) contains s
sequences of consecutive subdocuments, then we incur a cost
of O(s lg n) tree nodes. Assuming tree nodes of length k, the
extended signature is of size O(|σ| + ks lg n). When s is not
too large, this compares favorably to the algorithm of [18],
whose extended signature is of size O(|σ| + kn), both for
the original document as well as for any redacted versions
of it, independent of the number or the distribution of the
redacted and nonredactable subdocuments.
The Verify operation is changed to account for the chan-
ges in the data structure. As before, given (m(cid:48), SG, SM , σ),
the user recomputes the root of the Merkle tree, using m(cid:48),
SG, and SM , and then checks that σ is a correct signature
for this root.
The user also makes another check, verifying that L and L(cid:48)
are disjoint, i.e. verifying the correctness of the semantics in
Figure 1 above. This prevents an adversary from redacting
a subdocument that has been marked nonredactable.
4. APPLICATIONS
In this section we apply the algorithm of §3 to treat the the
pseudonymization and deindentiﬁcation problems motivated
in §2.2, and to solve them eﬃciently.
4.1 Subsets of tables
Guaranteeing the integrity of the contents of a database
is similar to the problem of secure document redaction, as
follows. Computing an integrity certiﬁcate (for example, a
digital signature) for a subset of the database that somehow
ties to a signature for the entire database is exactly analo-
gous to computing a signature for a redacted document that
ties to a signature for the original document, where the sub-
set corresponds to the nonredacted portion of the document.
Consider a 2-dimensional array of entries, consisting of r
rows and c columns. We will consider the data in the array
to constitute a single “document” whose rc entries are its
subdocuments, taken row by row (or column by column, de-
pending on the application). Building the GGM tree in order
to sign the array according to the algorithm of §3 above, we
take care to group the r pseudorandom leaves correspond-
ing to the entries of each row into individual subtrees, and
build the Merkle tree in a similar manner. When r is not
an even power of 2, this will result in somewhat larger data
structures for both the GGM and Merkle trees, but consid-
erably reduces the size of the auxiliary data in the extended
signature when entire rows of the array are redacted.
This application is of particular interest in the case of
audit logs, which can be considered to be append-only data-
bases. An audit report, computed as the response to a
database query, often consists of a subset of the entire audit
log, sometimes with certain entries redacted. In this case,
our algorithm applies directly as a solution to the problem of
accompanying the audit report with a proof of its integrity.
For the case where as an additional constraint certain entries
must be pseudonymized or deidentiﬁed, see below.
4.2 Efﬁcient pseudonymization and deidenti-
ﬁcation
Once again, we will describe this algorithm in terms of a
document m = (m1, . . . , mn). With the illustrative tables
of §2.2 in mind, let us suppose that each subdocument mi
has an associated list of pseudonyms or deidentifying gener-
alizations, denoted pi = (pi1, . . . , pili ). For certain subdoc-
uments, this list may be empty.
Now the signer can apply the algorithm of §3, not to the
original document itself, but rather to an augmented form
of the document, which is unambiguously encoded as each
subdocument followed by a list of its successively more gen-
eral pseudonyms. For example we might represent the ﬁrst
row of our table of healthcare data as
[ ‘Frank Miller’, ‘Patient 1’ ]
[ ‘white’ ]
[ ‘June 2, 1970’, ‘June 1970’, ‘1970’, ‘1970-1979’ ]
[ ‘male’ ]
[ ‘45873’, ‘4587*’, ‘458*’, ‘45*’, ‘4*’ ]
[ ‘chest pain’ ].
We could then treat each bracket and token within the
brackets in the above representation as an independent sub-
document that can be redacted or marked for no further
redaction. The signer could distribute such a version with
each bracket pre-marked as nonredactable to preserve the re-
lationship between the subdocuments and its pseudonyms.
Display conventions may vary according to the applica-
tion. For example, we might require that if mi is redacted
i = ⊥ in the modiﬁed version m(cid:48)), then only the lex-
(i.e. m(cid:48)
icographically ﬁrst nonredacted pseudonym pij (1 ≤ j ≤ li)
is displayed by the rendering algorithm.
A variation that is especially appropriate for hierarchical
generalization following Sweeney’s approach (see §2.2) would
require that only preﬁxes of the list [ mi, (pi1, . . . , pili ) ] can
be redacted (where the pseudonyms are listed in order from
speciﬁc to general, so that each pij is more speciﬁc than
pi,j+1). Furthermore, this requirement can be enforced by
adding this to the “semantic” checks that are validated by
the Verify procedure.
To estimate the cost of this algorithm, let k be the length
of the commitment values and hash values, and let p =
l1 + . . . + ln denote the total number of pseudonyms. The
augmented document has n + p subdocuments, and and its
initial extended signature is of size O(|σ| + k).
After one or several redaction operations, let s denote
the number of sequences of consecutive subdocuments in
L∪L(cid:48). The extended signature is then of size O(|σ|+ks lg n).
The cost of signing or validating is O(s lg n) operations in
addition to the “bare” digital-signature operation itself.
4.2.1 An efﬁciency improvement
The reader will observe that the algorithm just described
requires the storage of an abundance of redundant data,
especially in the case of certain data ﬁelds where the list
of deidentifying pseudonyms for a data item is easily com-
putable. The zip codes in §2.2 provide us a simple example,
where 45873 has the possible pseudonyms 4587*, 458*, etc.
In this case, we could simply make each of the ﬁve digits
in the zip code a redactable character, instead of explicitly
storing the list pi = (4587∗, 458∗, 45∗, 4∗) in the augmented
document. Both the rendering algorithm and the Verify
procedure must be suitably modiﬁed to handle data ﬁelds
(subdocuments) containing zip codes. (For a completely dif-
ferent approach to this variation of the problem, see the
techniques of [15], based on the Blum-Micali pseudorandom
generator.)
Naturally, ﬁelds containing such data as dates or street ad-
dresses could be handled in a similar manner. But a similar
approach can be used for more complicated data items, lack-
ing a simple algorithm for computing the list of pseudonyms.
For example, suppose we have data ﬁelds with items such as
mi = unicorn, and pi = (equine, ungulate, mammal, animal).
As long as there is a hierarchical classiﬁcation of the deiden-
tifying generalizations for the items in an identiﬁed subset
of the data ﬁelds (subdocuments) of m, this classiﬁcation of
terms can be encoded in a “dictionary” that is appended to
the document, marked as nonredactable, and the use of this
dictionary can be suitably folded into the Verify procedure.
If the dictionary is a completely standardized one, the aug-
mented document only needs to include a persistent pointer
to it (also marked as nonredactable).
Let d denote the size of the dictionary. Now the number of
subdocuments in the augmented document can be reduced
from n + p to O(n + n lg d), assuming the dictionary is stan-
dardized, and to O(d + n + n lg d) if the dictionary is sent
along and signed with the document.
5. SECURITY
In this section we formally deﬁne our security require-
ments, and state and prove a theorem describing the secu-
rity achieved by our algorithms.
In order to analyze the
security of our protocol, we give a formal game-based se-
curity deﬁnition, extending the usual deﬁnitions of security
for encryption schemes and for signature schemes, that cap-
tures all of our desired security properties in a single game.
Next we sketch a proof of security, reducing the existence of
a successful adversary for our scheme to the existence of an
adversary that successfully breaks one or more of the signa-
ture scheme, the pseudorandom generator, the commitment
scheme, or the one-way hash function that our protocol uses.
5.1 Deﬁnitions
The principal requirement for any kind of signature scheme
is that it should be computationally infeasible to forge ille-
gitimate signatures.
In contrast to conventional signature
schemes, where no changes to a signed document are per-
mitted, here we need a precise characterization of the class
of modiﬁcations to the original document that we consider
to be legitimate. Extending the deﬁnition used by [12], we
deﬁne a partial order on redacted documents, as follows.
Definition 1. Let document m consist of n subdocuments
(m1, . . . , mn). A redacted version of m is a sequence of n
subdocuments (m(cid:48)
n) such that (for each i = 1 . . . n),
m(cid:48)
i satisﬁes exactly one of the following conditions:
1. m(cid:48)
i = mi, indicating that mi is (present and) redact-
1, . . . , m(cid:48)
able;
i = ⊥, indicating that mi is redacted; or
i = ˆmi, indicating that m(cid:48)
2. m(cid:48)
3. m(cid:48)
i is nonredactable (and
identical to mi).
Definition 2. Let p = (p1, . . . , pn) and q = (q1, . . . , qn)
be two redacted versions of m. We deﬁne a partial order on
redacted documents by requiring that p ≺ q holds if and only
if all of the following are satisﬁed, for i = 1 . . . n:
1. if pi (cid:54)= ⊥, then qi (cid:54)= ⊥;
2. if pi = ˆmi, then either qi = mi or qi = ˆmi; and
3. if pi = ⊥, then either qi = mi or qi = ⊥.
In this case, we also write q (cid:31) p.
The partial order is deﬁned so that p ≺ q if and only if
p is a permitted redaction of q. For example, suppose m
contains four subdocuments m1, . . ., m4. If m1 and m3 are
redacted in p, and m1 is redacted in q, then p ≺ q.
In
particular, the original document is (cid:31) any redacted version
of it. Our goal is that given a (possibly redacted) document
p, along with its extended signature, anyone can obtain an
appropriately redacted document p(cid:48) ≺ p with a veriﬁable
extended signature, but it is infeasible to forge a signature
for any document p(cid:48)(cid:48) (cid:31) p.
By our deﬁnition of the partial order ≺, this unforgeability
requirement also implies a sort of consistency requirement:
If a subdocument of a document m has been marked as
nonredactable, then it is infeasible later to produce a valid
extended signature for a redacted version of m in which this
subdocument has been redacted.
In addition to the unforgeability requirement, the redac-
tion operations also introduce a requirements for conﬁden-
tiality: Given a redacted document, no adversary can infer
anything about the original version of any of its subdocu-
ments that have been redacted. We capture this property
by requiring that no adversary can distinguish two redacted
documents p and p(cid:48) whose corresponding original documents
m and m(cid:48) only diﬀer at a speciﬁc subdocument, as in the
deﬁnition of chosen-ciphertext security for probabilistic en-
cryption schemes.
Next, we give a formal deﬁnition of security, adapted from
those of [21, 18, 12]. We use a game deﬁnition extending
both the deﬁnitions of security for encryption schemes [6,
19] as well as for signature schemes [7], capturing all of our
desired security properties in a single game. We allow an
attacker to issue commit queries, queries for commitments
for documents, sign queries, queries for signatures for doc-
uments, and redact queries, queries for redacted versions.
These queries may be chosen adaptively. Also, we allow the
adversary to choose the document on which she can ask be
challenged.
Definition 3. A redactable-signature scheme is secure if
no probabilistic polynomial-time adversary, issuing a polyno-
mial number of queries in the game deﬁned below, achieves
a non-negligible advantage in the game.
The game proceeds as follows.
Setup: The challenger takes a security parameter as in-
put, and runs the Setup algorithm. It gives the adversary
the resulting public parameters (P K, H, C, S), and keeps the
private key SK to itself.
Phase 1: The adversary issues several queries, where a
query is one of the following:
1. commit query (m): The challenger computes a GGM
tree and then commitments for the subdocuments in
m. The commitments and random values used are
given to the adversary.
2. sign query (h): The challenger signs the hash value h,
using its private key.
3. redact query (m, L, L(cid:48)): The challenger runs the
Redact algorithm, following the instructions in L and
L(cid:48) to redact or mark as nonredactable the appropriate
subdocuments in m. The challenger’s response is the
resulting quantities (m(cid:48), L, L(cid:48), SG, SM , σ).
These queries may be asked adaptively. Also, the docu-
ments queried may be distinct. Once the adversary decides
that Phase 1 is over, she may choose a challenge for attack-
ing conﬁdentiality. (There is no need to choose a challenge
for attacking unforgeability.)
Conﬁdentiality challenge: The adversary outputs two
equal-length documents m0, m1 on which to be challenged,
such that m0 and m1 are identical except except in a single
subdocument (the i∗th, say), along with Redact instruc-
tion lists L, L(cid:48), with i∗ ∈ L. The challenger picks a random
bit b ∈ {0, 1}, uses the Sign algorithm to produce a signa-
ture for mb and then uses the Redact algorithm to produce
(L, L(cid:48), mb, SG, SM , σ), where we require that L mark sub-
document i∗ to be redacted.
Phase 2: The adversary issues more queries, and the chal-
lenger responds as in Phase 1, with the sole restriction that
the adversary cannot make any sign or redact queries for
any document m(cid:48) (cid:31) mb.
Guess: Adversary A outputs one of two kinds of guesses: