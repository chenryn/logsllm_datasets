time algorithm recommended in this section. In particular,
BLAC’s approach scales linearly in the size of the blacklist
9We omit direct comparison with EPID because we do not have access to
performance measurements for that scheme. However, EPID has the same
asymptotic complexity as BLAC; i.e., it scales linearly in the size of the
blacklist [33].
532
PERFORMANCE MEASUREMENTS FOR U AND THE NI IN THE BLACKLIST NON-MEMBERSHIP PROOF.
Table III
Operation
Non-
membership
proof
Non-
membership
verify
Host m M = m2
U
10,000
40,000
90,000
160,000
250,000
10,000
40,000
90,000
160,000
250,000
100
200
300
400
500
100
200
300
400
500
NI
Mean execution time ±
standard deviation (ms)
1141.6 ms ± 30.57 ms
2049.0 ms ± 53.22 ms
3028.8 ms ± 76.94 ms
4076.6 ms ± 113.95 ms
5185.0 ms ± 137.46 ms
913.3 ms ± 16.46 ms
1718.9 ms ± 34.81 ms
2599.1 ms ± 55.80 ms
3615.5 ms ± 107.93 ms
4626.2 ms ± 181.07 ms
)
s
m
(
e
m
T
=
i
t
Non-membership Proof Protocol
6000
5000
4000
3000
2000
1000
0
50
t = 0.0034m2 + 8.0564m + 302.3 ms
R² = 1.0000
t = 0.0039m2 + 6.9555m + 181.11 ms
R² = 0.9998
Proof     
(U)
Verification 
(NI)
150
450
m = Square root of blacklist size
250
350
All experiments used a 256-bit subgroup modulo a 1536-bit prime; thus, in all experiments the blacklist consists of M pseudorandom 256-bit integers.
Each experiment was repeated 100 times; the mean execution time (± the standard deviation) across all trials is reported here. We omit error bars from the
graph because the error range is too small for them to be visible. Note that, while linear in m with respect to the number of exponentiations performed, the
computational complexity of the non-membership proof protocol is quadratic in m (linear in M) with respect to the number of multiplications performed.
Thus, by the time m = 500 the algorithm performs around k·250000 additional multiplications, which is the same as about (k · 250000)/(3/2 · 256) ≈ k·147
extra exponentiations. (k ≈ 2 for U and k ≈ 1 for the NI.) This is why the trend lines for these curves are quadratic in m, albeit with a very small
quadratic coefﬁcient.
with about 1.8 ms per entry at the client and 1.6 ms per
entry at
the server [32]; our proposed algorithm scales
with the square root of the size of the blacklist but has
a larger additive constant term. Our measurements indicate
that for blacklists of fewer than about 250 entries BLAC’s
linear approach outperforms our own. For this reason, we
propose a hybrid approach wherein a naive linear time non-
membership proof is employed for small blacklist sizes
(smaller than 250, in this case) and the above square root
time non-membership proof is employed for larger blacklist
sizes. Figures 4 and 5 compare the relative complexities of
the different non-membership proofs for various blacklist
sizes.
Comparison with BLAC for small blacklists
1000
)
s
m
(
e
m
T
=
i
t
800
600
400
200
0
0
t = 0.0034M + 8.0564M1/2 + 302.3 ms
R² = 1.0000
t = 1.8M ms
BLAC (U)
This work 
(U)
100
200
M = Blacklist size
300
Figure 4. Non-membership proof comparison for small blacklists: This
ﬁgure compares the performance of our proposed non-membership proof
against that of BLAC [32]–[34]. We took our timing measurements for
BLAC directly from the paper in which it ﬁrst appeared, while we have
measured the timing information for our approach empirically; hence, the
coefﬁcients on each line are only an approximation to the schemes’ actual
performance. All experiments used a 256-bit subgroup modulo a 1536-bit
prime; thus, in all experiments the blacklist consists of M pseudorandom
256-bit integers. We omit error bars from the graph for two reasons: 1) the
error range for our approach is too small for them to be visible, and 2)
we computed the measurements for BLAC from data in the original BLAC
paper instead of measuring it experimentally.
533
2) Veriﬁcation tokens: Since long-term blacklists are ex-
pected to be relatively static, both U and the NI can avoid
much redundant computation by—upon successful comple-
tion of the Non-membership Proof Protocol—negotiating an
efﬁciently veriﬁable token that certiﬁes that U has already
proved that her SP-speciﬁc pseudonym is not on a list. In
other words, once U proves that her pseudonym νL
∗ is not on
B(SP,L
∗), she and the NI negotiate a blinded token certifying
that the NI has veriﬁed this proof. Of course, these lists are
not entirely static; indeed, the SP will add and remove entries
as it detects and forgives misbehaviour. We thus associate
a version number ver with each blacklist. When the PE
adds an entry, the version number gets incremented; when
the PE removes an entry, the version number is not changed.
If U has a veriﬁcation token for blacklist version ver, she
engages in one of the following two procedures: if ver is
the version of the current blacklist, she shows the token.
If the blacklist version has been incremented since her last
authentication, U ﬁnds the sublist of SP-speciﬁc pseudonyms
added since version ver. She then shows her token and a
proof for the smaller sublist.
Of course, this approach leaks some information to the
VI about U. In particular, the VI learns: 1) that some user
is requesting nymbles for a particular SP, 2) that this same
user has previously obtained nymbles for this same SP, and
3) the approximate time (i.e., the blacklist version) that this
user last requested nymbles for this SP. While we feel that
this information leakage is acceptable for most users, we
point out that this is an opt-in feature and U is free to make
her own choice about whether this information leakage is
acceptable. If U chooses not to use veriﬁcation tokens, then
she is indistinguishable from any user that has not recently
engaged in a non-membership proof for this SP.
In what follows, B(SP,L
of the SP’s long-term blacklist for linkability window L
That is, B(SP,L
,ver) will denote version ver
∗.
,ver) contains pseudonyms of users that were
∗
∗
∗ and whose misbehaviour
blocked in linkability window L
has not yet been forgiven. U and the NI run the follow-
ing protocol after the NI has accepted a proof from U.
Such a proof may consist of U: 1) proving directly that
∗ /∈ B(SP,L
,ver), 2) presenting a valid veriﬁcation token
νL
for B(SP,L
,ver) from a previous session, or 3) presenting a
∗ /∈
valid token for B(SP,L
,ver) − B(SP,L
B(SP,L
,ver(cid:3)) and then proving that νL
∗
,ver(cid:3)).
∗
∗
∗
∗
∗
∗ , ver(cid:4)
Once U has successfully convinced the NI that her
nymble is not on a blacklist B(SP,L
,ver), she obtains an
anonymous credential from the NI encoding the attributes
), where ver(cid:4) is the current blacklist version
(SP, νL
number for SP. This anonymous credential is U’s veriﬁcation
token. The choice of anonymous credential scheme used
here is unimportant, although we remark that
the user
shows a credential only once; thus, unlinkability between
different showings of the credential is not required. For this
reason, we recommend using Brands credentials [2], [3],
as they outperform the other well-known schemes in the
literature [4], [5].
∗
∗
∗
∗ /∈ B(SP,L
,ver) − B(SP,L
In order to use a veriﬁcation token to convince the NI
that U does not appear on B(SP,L
,ver), U reveals ver(cid:4)
and SP, then proves in zero-knowledge that the value νL
∗
is indeed associated with her
encoded in the credential
unique identiﬁer. If ver(cid:4)
< ver, then U additionally proves
,ver(cid:3)) using the proof
that νL
technique presented in §III-A. Note that U already proves
that the veriﬁcation token encodes the correct nymble in
the proof in §III-A (and, thus, she does not repeat it). Also
note that, rather than issuing one authentication token per
blacklist (i.e., one for each linkability window), a single
veriﬁcation token could include information pertaining to all
blacklists (i.e., for each linkability window) against which
U has just proven that her pseudonym is not present; this
modiﬁcation is straightforward and will not be discussed
further.
F. Blacklist sharing
It is common on the Internet for a single organization to
operate several different websites. For example, the Wikime-
dia foundation hosts several popular websites: Wikipedia,
Wiktionary, Wikiquote, etc. Using a single canonical SP
name (and a common blacklist) would let Wikimedia revoke
U from all of their services simultaneously; however, from a
privacy standpoint, U should be able to access all Wikimedia
services concurrently and unlinkably, and this would not be
the case in such a setup.
Our approach to long-term revocation makes it possible
for an SP to block users that engage in serious misbe-
haviour from multiple services while preserving the ability
of honest users to access each of these services concurrently
and unlinkably; we call this blacklist transferability [18].
More precisely, it provides blacklist transferability for inter-
window revocations. In particular, SP1 can choose some
subset of entries from SP2’s long-term blacklist, and require
U to prove during the Nymble Acquisition Protocol that
none of these entries are hers. In fact, SPs can implement
more sophisticated access structures (which we will not
describe in detail) to gain extremely ﬁne-grained control
over which sites a misbehaving user is able to access;
e.g., Wikimedia may revoke U from all of their services
for 7 days, and just Wikipedia itself for an additional 7
days. This would have essentially zero additional impact on
U’s privacy and would introduce minimal overhead to the
Nymble Acquisition Protocol.
IV. INCREASING AVAILABILITY
Nymble-like systems help to increase availability of cer-
tain web services for users of anonymous communications
networks. However,
there are two important (and often
overlooked) cases where existing approaches fail. First,
the operators of Tor exit relays are unable to participate
in Nymble-like systems that use IP address as a unique
resource; this case is particularly important since one side
effect of SPs blocking access from Tor is that they also
Comparison with BLAC/PEREA  at user
Comparison with BLAC/PEREA  at server
)
s
m
(
e
m
T
=
i
t
24000
20000
16000
12000
8000
4000
0
0
t = 7M ms
t = 1.8M ms
t = 0.0034M + 8.0564M1/2 + 302.3 ms
R2 = 1.0000
10000
20000
30000
40000
M = Blacklist size
PEREA 
(U)
BLAC (U)
This work 
(U)
)
s
m
(
e
m
T
=
i
t
24000
20000
16000
12000
8000
4000
0
0
t = 1.6M ms
t = 0.0039M + 6.9555M1/2 + 181.11 ms
R² = 0.9998
t = 160 ms
10000
20000
30000
40000
M = Blacklist size
BLAC 
(SP)
This work 
(NI)