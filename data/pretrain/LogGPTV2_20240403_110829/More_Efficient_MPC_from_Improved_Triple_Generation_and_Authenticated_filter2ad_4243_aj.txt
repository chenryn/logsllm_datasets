=
j(cid:54)=i
i + Ei
j(cid:54)=i zj
i = zi
j∈A ˆzj
j /∈A zj
0 =(cid:80)
i +(cid:80)
i +(cid:80)
(cid:16)(cid:80)
(cid:17)
j(cid:54)=i Ki[yj] +(cid:0)yi + y + e(cid:1) · ∆i
+(cid:80)
(cid:0)Ki[yj] + Mi[yj](cid:1) +(cid:0)yi + y + e(cid:1) · ∆i + Ei
=(cid:80)
j(cid:54)=i yj · ∆i,j +(cid:0)yi + y + e(cid:1) · ∆i + Ei
=(cid:80)
j(cid:54)=i yj · Ri,j +(cid:0)yi + y + e +(cid:80)
j(cid:54)=i yj(cid:1) · ∆i + Ei
=(cid:80)
=(cid:80)
j(cid:54)=i yj · Ri,j + e · ∆i + Ei.
j(cid:54)=i Mi[yj] + Ei
If a malicious party Pi provides inconsistent global keys, then there exists j0, j1 /∈ A such that Ri,j0 (cid:54)= Ri,j1
and j0 (cid:54)= j1. Therefore, the attack requires the adversary to set Ei + e· ∆i = yj0 · Ri,j0 + yj1 · Ri,j1. Due to
the re-randomization by random zero-sharing, from the adversary’s view, yj0 and yj1 are uniformly random
additive shares of y. Thus, the adversary succeeds to cheat with probability 2−κ.
Based on Lemma 5, we easily prove the following theorem.
Theorem 5 (Theorem 2, restated). Protocol ΠaShare shown in Figure 5 securely realizes functionality FaShare
with statistical error 1/2κ in the (FaBit,FCom)-hybrid model.
Proof. It is easy to construct a simulator S, since all parties only communicate to each other in the phase of
κ for each i /∈ A. Speciﬁcally, for any PPT
consistency check and S is allowed to know the shares ri
adversary A, we construct a PPT simulator S with access to functionality FaShare as follows:
1. In the initialization phase, S emulates FaBit, and receives (j, ∆i,j) for i ∈ A and j (cid:54)= i from A. On
behalf of every Pi ∈ A, S deﬁnes and sends ∆i := ∆i,j0 for some j0 /∈ A to FaShare.
1, . . . , ri
2. In the generation phase of authenticated shares, S plays the role of FaBit and records all the values
received from A. On behalf of every corrupt party Pi, S sends the corresponding shares, MACs and local
κ ← {0, 1}, and for each h ∈ [κ], computes
keys to FaShare. For each i /∈ A, S also samples ri
Mj[ri
h] and ∆j,i from A if j ∈ A and samples Mj[ri
h] ← {0, 1}κ otherwise.
h] using the keys Kj[ri
1, . . . , ri
3. When S plays the role of FaBit, upon receiving the (leak) queries from A, S forwards these queries to
FaShare, and sends the decision results from FaShare to A. If FaShare aborts, S aborts. Otherwise, S
continues to the simulation.
4. For each i /∈ A, S samples a dummy global key ∆i ← {0, 1}κ such that ∆i is consistent with the real
h] using
global key of Pi on the bits that have been leaked. For each i /∈ A and h ∈ [κ], S deﬁnes Ki[rj
the corresponding Mi[rj
h] and ∆i.
5. S uses the values obtained in previous steps to perform the consistency check honestly on behalf of all
honest parties. If the check fails, then S aborts.
6. If there are two different honest parties j0, j1 /∈ A such that ∆i,j0 (cid:54)= ∆i,j1 for some i ∈ A, then S aborts.
36
Functionality FLaAND
Initialize: Upon receiving (init) from all parties, sample ∆i ← {0, 1}κ for i /∈ A and receive ∆i ∈ {0, 1}κ from
the adversary for i ∈ A. Store ∆i for i ∈ [n] and send ∆i to party Pi.
Triples: Upon receiving (LaAND) from all parties, sample x, y ← {0, 1}, compute z := x ∧ y, and generate a
random authenticated triple ((cid:104)x(cid:105),(cid:104)y(cid:105),(cid:104)z(cid:105)) by executing AuthShare(u) for each u ∈ {x, y, z}.
Selective failure queries for shares: Wait for the adversary to input (Q, q,{Ri}i /∈A) where Q ∈ {0, 1}κ, q ∈
{0, 1} and Ri ∈ {0, 1}κ. This functionality checks that
(cid:1) =(cid:0)q ⊕(cid:76)
i /∈A xilsb(Ri)(cid:1)(cid:0)(cid:76)
i /∈A xiRi
Q ⊕(cid:0)(cid:76)
(cid:1) .
i /∈A ∆i
If the check fails, this functionality sends fail to all parties and aborts. Otherwise, this functionality sends
success to the adversary, and proceeds as if nothing has happened.
Selective failure queries for global keys: Wait for the adversary to input (leak, i, S,{∆(cid:48)[k]}k∈S). If Pi is honest,
this functionality executes GKleak(i, S,{∆(cid:48)[k]}k∈S) as deﬁned in Figure 1.
Figure 13: Functionality for leaky AND triples.
In the above simulation, before S would abort, it outputs whatever A outputs. By Lemma 5, we guarantee
the probability that S aborts in Step 5 is bounded by 2−κ. Therefore, it is easy to see that the simulation
of S is statistically indistinguishable from the real protocol execution. Note that S does not know the real
global keys of honest parties in the ideal world. Simulator S samples a dummy global key for every honest
party to just perform the consistency check, and never uses these keys in any other place. Again, the outputs
of honest parties are either independent from the adversary’s view or always determined uniquely by their
independent inputs and the outputs of corrupt parties. Therefore, we have that the joint distribution of the
outputs of honest parties and adversary A in the real world execution is statistically indistinguishable from
the joint distribution the outputs of honest parties and simulator S in the ideal world execution.
D Improved Authenticated Triple
In Appendix D.1, we present an optimized protocol for authenticated AND triples with the leakage of
partial shares. Then, we show that the bucketing technique [NNOB12] for eliminating the leakage can still
be applied in our setting in Appendix D.2.
D.1 Protocol for Leaky AND Triples
We ﬁrst describe a functionality FLaAND for leaky authenticated AND triples in Figure 13. Then, we present
an efﬁcient protocol ΠLaAND shown in Figure 14 that securely computes FLaAND in the (FaShare,FCom)-
hybrid model, where H : {0, 1}2κ → {0, 1}κ is a random oracle.
For functionality FLaAND, similar to prior works, an adversary A is allowed to guess a share xi∗ ∈ {0, 1}
of an honest party Pi∗. An incorrect guess will be caught immediately, while a correct guess keep undetected.
In more detail, A does not directly learn the share xi∗
, but instead is allowed to make a query on some linear
and ∆i∗. In this special way, A cannot obtain more information than making a query on
combination of xi∗
and ∆i∗ directly. Moreover, A cannot learn any information on yi∗
xi∗
For the protocol ΠLaAND shown in Figure 14, we require that FaShare generates global keys {∆i}i∈[n]
i∈[n] lsb(∆i) = 1, e.g., lsb(∆i) = 1 if i (cid:54)= 1 and lsb(∆i) = n mod 2 otherwise. In protocol
ΠLaAND, we add a tweak i(cid:107)j(cid:107)t to the computation of hash function H for generating the t-th leaky AND
triple. It aims to prevent the attack described in [GKWY20] that a malicious party Pj may send the same
share and MAC in multiple executions. In addition, we do not let a party Pi straightforwardly broadcast a
such that(cid:76)
or zi∗
.
37
Protocol ΠLaAND
(cid:76)
i∈[n] lsb(∆i) = 1.
Initialize: All parties send (init) to FaShare, which returns ∆i ∈ {0, 1}κ to Pi for i ∈ [n] such that
Generate leaky AND triples: The parties generate the t-th leaky AND triple as follows:
1. All parties send (aShare, 3) to FaShare, which returns random authenticated shares (cid:104)x(cid:105),(cid:104)y(cid:105),(cid:104)r(cid:105) to the parties.
If receiving fail from functionality FaShare, the parties abort.
2. For each i ∈ [n], Pi locally computes Φi := yi∆i ⊕(cid:16)(cid:76)
(cid:17)
k(cid:54)=i(Ki[yk] ⊕ Mk[yi])
.
3. For each ordered pair (Pi, Pj) where i (cid:54)= j, Pi computes
Ki[xj]Φi := H(Ki[xj], i(cid:107)j(cid:107)t) and Ui,j := Ki[xj]Φi ⊕ H(Ki[xj] ⊕ ∆i, i(cid:107)j(cid:107)t) ⊕ Φi,
and then sends Ui,j to Pj. Upon receiving Ui,j from Pi, Pj computes
Mi[xj]Φi := xj · Ui,j ⊕ H(Mi[xj], i(cid:107)j(cid:107)t).
(cid:17) ⊕ ri∆i ⊕(cid:16)(cid:76)
(cid:17)
k(cid:54)=i(Ki[rk] ⊕ Mk[ri])
.
4. For each i ∈ [n], Pi executes as follows:
k(cid:54)=i(Ki[xk]Φi ⊕ Mk[xi]Φk )
(a) Compute the following value
Si := xiΦi ⊕(cid:16)(cid:76)
and then compute d :=(cid:76)
(Open) command of FCom, and then check that(cid:76)
i∈[n] di.
(b) Commit to di := lsb(Si) by calling the (Commit) command of FCom.
(c) After all commitments have been made, open its commitment via calling the (Open) command of FCom,
5. For each i ∈ [n], Pi computes and commits to Ti := Si ⊕ d∆i by calling the (Commit) command of FCom.
6. For each i ∈ [n], after all commitments have been made, all parties open their commitments by calling the
i∈[n] Ti = 0. If the check fails, the parties abort.
7. For each i (cid:54)= 1, the parties deﬁne [zi]i := [ri]i. The parties also compute [z1]1 := [r1]1 ⊕ d.
8. The parties output a leaky AND triple ((cid:104)x(cid:105),(cid:104)y(cid:105),(cid:104)z(cid:105)).
Figure 14: Protocol for leaky authenticated AND triples in the (FaShare,FCom)-hybrid model. For a bit
x and i ∈ [n], Ki[x]Φi and Mi[x]Φi = Ki[x]Φi ⊕ xΦi denote the local key and MAC respectively associated
with a global key Φi.
bit di. Instead, we make the party commit to di, and then open it. This because the simulator needs to know
the bits from the adversary before sending a bit di on behalf of honest party Pi, in the security proof.
For the sake of simplicity, we only describe one leaky AND triple generation in protocol ΠLaAND. When
(cid:96) leaky authenticated AND triples need to be computed, we can run (cid:96) executions of protocol ΠLaAND in
parallel with the same initialization, where all parties send (aShare, 3(cid:96)) to FaShare. In this case, we can
further reduce the communication complexity by combining (cid:96) commitments into one commitment in a
natural way.
Optimization and communication complexity. When the parties need to check that(cid:76)
i∈[n] Ti,t = 0 for
t ∈ [(cid:96)], every party must open (cid:96) values in protocol ΠLaAND, which leads to (cid:96)κ bits of communication. We
can reduce the communication to only κ bits by using the following batched check procedure.
38
1. After all Ti,t for i ∈ [n], t ∈ [(cid:96)] have been computed, the parties call FRand to generate random coefﬁ-
t=1 χt · Ti,t (with arithmetic over F2κ) and commits to Vi via calling
functionality FCom .
cients χ1, . . . , χ(cid:96) ∈ F2κ.
2. Every party Pi computes Vi :=(cid:80)(cid:96)
that(cid:76)
i∈[n] Vi = 0 implies that(cid:76)
fore,(cid:76)
i∈[n] Vi = 0.
3. After all commitments have been made, all parties open their commitments by calling FCom and check
All the coefﬁcients {χt}t∈[(cid:96)] are uniformly random after the values {Ti,t}i∈[n],t∈[(cid:96)] have been deﬁned. There-
i∈[n] Ti,t = 0 for t ∈ [(cid:96)] except with probability 2−κ. For selective failure
queries of shares, this functionality can check a random linear combination of errors chosen by the adver-
sary. As such, the adversary can still guess a bit xi of honest party correctly with probability 1/2, and an
incorrect guess will be caught except with probability 1/2κ. The communication used to implement FRand
can be eliminated by using the Fiat-Shamir heuristic. In particular, the parties can compute the random
coefﬁcients by hashing the transcript, which is secure in the random oracle model.
With the above optimization, we analyze the communication rounds and complexity of ΠLaAND ( Fig-
ure 14) in the FaShare-hybrid model. When generating (cid:96) leaky AND triples, this protocol needs 5 rounds
and about (cid:96)(κ + 1)(n − 1) bits of communication per party.
Proof of security for protocol ΠLaAND. To prepare for the security proof of our main protocol, we ﬁrst
show that: 1) our protocol is correct if all parties are honest; and 2) if the protocol execution does not abort,
then the parties generate a correct authenticated AND triple with probability 1 − negl(κ).
Lemma 6. Protocol ΠLaAND shown in Figure 14 would output a correct AND triple, if all parties are honest.
Proof. According to the deﬁnition of Φi, we have the following:
(cid:76)
i∈[n]
(cid:16)
yi∆i ⊕(cid:76)
i∈[n] Φi =(cid:76)
(cid:16)
yi∆i ⊕(cid:76)
=(cid:76)
(cid:16)
=(cid:76)
yi∆i ⊕(cid:76)
(cid:16)(cid:76)
i∈[n] yi(cid:17)(cid:16)(cid:76)
i∈[n]
i∈[n]
=
k(cid:54)=i
(cid:0)Ki[yk] ⊕ Mk[yi](cid:1)(cid:17)
(cid:0)Ki[yk] ⊕ Mi[yk](cid:1)(cid:17)
(cid:17)
(cid:17)
k(cid:54)=i
k(cid:54)=i yk∆i
i∈[n] ∆i
.
Note that Ki[xj]Φi ⊕ Mi[xj]Φi is equal to:
Taking the above two equations, we have that
= H(Ki[xj], i(cid:107)j(cid:107)t) ⊕ H(Ki[xj], i(cid:107)j(cid:107)t) ⊕ xj · Φi = xjΦi.
= H(Ki[xj], i(cid:107)j(cid:107)t) ⊕ H(Mi[xj], i(cid:107)j(cid:107)t) ⊕ xj · Ui,j
= H(Ki[xj], i(cid:107)j(cid:107)t) ⊕ H(Ki[xj] ⊕ xj∆i, i(cid:107)j(cid:107)t)⊕
xj ·(cid:0)H(Ki[xj], i(cid:107)j(cid:107)t) ⊕ H(Ki[xj] ⊕ ∆i, i(cid:107)j(cid:107)t) ⊕ Φi
(cid:16)
(cid:0)Ki[xk]Φi ⊕ Mk[xi]Φk
(cid:1) ⊕ ri∆i ⊕(cid:76)
(cid:76)
i∈[n] Si =(cid:76)
xiΦi ⊕(cid:76)
(cid:16)
(cid:1)(cid:17) ⊕(cid:76)
(cid:16)
(cid:0)Ki[xk]Φi ⊕ Mi[xk]Φi
=(cid:76)
xiΦi ⊕(cid:76)
(cid:16)
(cid:17) ⊕(cid:76)
(cid:16)
ri∆i ⊕(cid:76)
xiΦi ⊕(cid:76)
=(cid:76)
i∈[n] ri(cid:17)(cid:16)(cid:76)
(cid:17) ⊕(cid:16)(cid:76)
i∈[n] xi(cid:17)(cid:16)(cid:76)
(cid:16)(cid:76)
(cid:17)
i∈[n] ri(cid:1)(cid:17)(cid:16)(cid:76)
(cid:16)(cid:0)(cid:76)
i∈[n] xi(cid:1) ∧(cid:0)(cid:76)
i∈[n] yi(cid:1) ⊕(cid:0)(cid:76)
i∈[n]
k(cid:54)=i rk∆i
k(cid:54)=i
k(cid:54)=i xkΦi
(cid:1)