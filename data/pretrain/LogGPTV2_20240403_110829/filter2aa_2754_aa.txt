### 客户端 Web 漏洞案例浅析
**日期**: 2021/6/26  
**地点**: 成都站  
**演讲者**: 周智  
**单位**: 深信服安全  
**活动**: 技术沙龙

#### 大纲
- 总结一些难以归类的客户端混合漏洞案例
- CEF DNS rebinding 通用漏洞
- CVE-2020-9860: macOS HelpViewer XSS
- 某 iOS 应用跨 App 获取 cookie
- iOS WebView UXSS
- 某 Windows 视频客户端远程 DLL 注入

### CEF DNS rebinding 通用漏洞

#### CEF (Chromium Embedded Framework)
- **全称**: Chromium Embedded Framework
- **功能**: 在桌面应用中嵌入 Chromium 内核的 WebView 控件

#### DNS rebinding
- **定义**: 利用 DNS 域名解析绕过同源策略的方法
- **原理**: 通过在不同时间对同一域名返回不同的 IP 地址，使恶意网页可以利用受害者的浏览器访问内网服务
- **示例**:
  - 恶意网页: `evil.rebind.com`
  - 第一次解析: `123.123.123.123`
  - 第二次解析: `192.168.0.1`

#### CEF 远程调试
- **问题**: 部分桌面客户端误将 CEF 远程调试打开
- **协议**: 基于 HTTP 和 WebSocket 的 Chrome Remote Debugging 协议
- **攻击方式**:
  - 攻击者使用 DNS rebinding 访问 `127.0.0.1` 的 HTTP 响应
  - 获得 token 后，通过 WebSocket 完全接管网页内容，进一步进行 RCE 等
- **修复**: CEF 最新版本已修复该问题

#### 示例代码
```bash
$ curl -v localhost:12345/json -H "Host: evil.com:12345"
*   Trying 127.0.0.1...
* TCP_NODELAY set
* Connected to localhost (127.0.0.1) port 12345 (#0)
> GET /json HTTP/1.1
> Host: evil.com:12345
> User-Agent: curl/7.58.0
> Accept: */*
```

```javascript
new Promise((resolve, reject) => {
  const id = counter++;
  const recv = ({ data }) => {
    const parsed = JSON.parse(data);
    if (parsed.id === id) {
      resolve(parsed.result);
      ws.removeEventListener('message', recv);
    } else {
      log('message: ', data);
    }
  };
  ws.addEventListener('message', recv);
  ws.send(JSON.stringify({ id, method, params }));
});
const remoteDoc = await send('DOM.getDocument');
```

#### 脚本注入
- **方法**: 使用 `Runtime.evaluate` 方法注入 JavaScript
- **问题**: 对于旧版本的 Chromium，该命令可能失效
- **替代方案**: 使用 `DOM.setOuterHTML` 操作 DOM 注入脚本

#### 信息泄漏
- **获取 Cookie**: `Network.getAllCookies`
- **文件系统访问**: 
  - `Page.navigate` 访问 `file://c/users`
  - 查询 DOM 获取文件列表并进一步读取文件
  - 在客户端中展示钓鱼页面

#### 转为 RCE
- **CEF 版本滞后**: CEF 通常比 Chrome 落后多个版本
- **利用 v8 漏洞**: 找到公开的 v8 漏洞并进行适配
- **native 接口**: `window.external` 存在 native 接口，可能存在逻辑代码执行问题
- **额外工作**: 文件下载、运行外部程序等需要额外的逆向工程

#### 案例
- **大量客户端使用同一框架**: 导致 CEF DNS rebinding
- **WebView 业务代码处理导航事件**: 使用 `ShellExecuteW`
- **简单利用**: `window.open('file:///C:/windows/system32/calc.exe')`
- **组合接口**: 下载并执行任意命令
- **类似漏洞**: VSCode 曾出现类似漏洞
- **Electron**: 可以直接调用 node.js 运行时执行任意本地代码

#### 修复建议
- **禁用调试功能**: 生产环境中切勿启用调试功能
- **更新框架**: Node.js、Electron 和 CEF 在近期版本中修复了 DNS rebinding
- **检查 Host 头**: 当 Host 头异常时终止访问请求

### macOS HelpViewer XSS

#### URL Scheme
- **定义**: 桌面和移动操作系统从 Web 拉起本地应用的接口
- **攻击面**: 远程攻击面
- **提示**: 通常浏览器切换前会弹出提示
- **Safari 白名单**: Safari 硬编码了一部分 URL scheme 直接放行

#### HelpViewer
- **信任协议**: `help:` 协议在信任列表中
- **历史漏洞**: 通过一个 XSS 就可以远程执行代码
- **未完全修复**

#### CVE-2020-9860
- **沙箱逃逸**: `x-apple-helpbasic://` 协议也被信任
- **协议格式**: 紧接任意 `*.apple.com` 页面
- **示例**:
  - `x-apple-helpbasic://www.apple.com/aaa`
  - 替换为 `https://www.apple.com/aaa`
- **利用**: 寻找 `apple.com` 的 open redirect 或 XSS

#### Apple 历史 Web 漏洞致谢列表
- **子域名搜集**: 通过历史漏洞致谢列表搜集大量子域名
- **手动寻找 XSS**: 无 Xray 或扫描器，手工查看源文件审计和测试

#### 示例代码
```javascript
if (controller.queryParams.contentURL) {
  controller.queryParams.contentURL += (controller.queryParams.contentURL.charAt(controller.queryParams.contentURL.length) == "/" ? "" : "/");
  $.ajax({
    type: "HEAD",
    async: false,
    crossDomain: false,
    url: controller.queryParams.contentURL + "Info.json",
    success: function () {
      controller.contentURL = controller.queryParams.contentURL;
    },
    error: function () {
      console.log("Could not load " + controller.queryParams.contentURL);
    }
  });
}

dataController.loadData = function () {
  var folder = localizationController.localePath();
  $.ajax({
    url: folder + "content.json",
    dataType: "json",
    async: false,
    crossDomain: false,
    success: function (json, status, xhr) {
      jsonStructure = json[0];
    }
  });
}
```

#### DOM XSS
- **潜在风险**: 通过上述代码中的 `$.ajax` 请求和 `controller.contentURL` 可能导致 DOM XSS。

希望这些优化后的文本能够更清晰、连贯和专业。如果有任何进一步的修改需求，请随时告知。