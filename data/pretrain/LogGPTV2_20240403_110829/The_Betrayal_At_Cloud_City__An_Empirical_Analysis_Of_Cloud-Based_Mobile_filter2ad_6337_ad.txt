XXE (various)
Support for Vulnerable SSL Version 2 and 3
OpenSSH Bypass (CVE-2015-5600)
Vulnerable OpenSSL (various)
#Apps
124
64
9
357
181
76
262
160
86
997
16
15
Table 6: The top three vulnerabilities found per cloud layer
along with the number of affected mobile apps.
largest is ﬁrst-party with 2,492 backends followed by third-
party with 1,089 backends. There are 2,506 backends that
we were not able to label due to ambiguities, but we labeled
approximately 73% of all backends we encountered.
More important is providing remediation guidance to the
responsible party. Table 5 shows the mapping between the
backend labels and the vulnerable apps. We cannot say much
about the Unknown category since the vulnerabilities may
belong to either ﬁrst-party or hybrid categories. We observe
that for ﬁrst-party backends, the highest number of vulnera-
ble apps are found in AS and CS components with 155 and
211 instances, respectively. Similarly, the hybrid backends
have 154 0-day vulnerability instances and 184 N-day in-
stances. In general, we observe that the components that app
developers are responsible for (AS and CS in the B1st and
Bhyb) have more vulnerabilities.
Operating System (OS).
The OS component issues can
be summarized into two categories: legacy unsupported OS
or unpatched OS. The difference is that the legacy OS are
no longer supported by the vendor, hence vulnerabilities will
not be addressed. We see from Table 6 that both Linux (vari-
ous ﬂavors) and Windows backends use expired lifecycle ver-
sions and 133 apps use these backends. The second most
common issue is the Windows Server vulnerability MS15-
034 affecting 64 apps, which have patches by the vendor.
Overall, the top three OS vulnerabilities listed in Table 6 af-
fect 197 mobile apps.
We found the MS15-034 vulnerability affecting hybrid
backends (Bhyb) that run on Amazon AWS, Akamai, OVH, Go
Daddy, Digital Ocean, and other smaller hosting providers.
Further, some of the backends appear on CDN networks, like
Akamai, Fastly, and CloudFlare, that offer “EdgeComput-
ing” services [36] which provide web app accelerator ser-
vices. This insight shows that some developers who deploy
vanilla versions of Windows Server OS are not maintaining
them. In Table 5 the ﬁrst-party OS component has 37 vulner-
able backends, which is much higher than third-party back-
ends (6). App developers who run and maintain their own
backends (B1st) have to be mindful of these bugs, which in
some cases require provisioning new backends with newer
OSes causing incompatibilities with existing services (SS)
and applications (AS). SkyWalker can inform the developer
of these issues and report mitigation strategies.
Software Services (SS). SkyWalker identiﬁed multiple vul-
nerabilities affecting a range of PHP versions, which can be
used to cause denial of service (CVE-2017-6004), disclose
memory content (CVE-2017-7890), disclose sensitive infor-
mation (CVE-2016-1903), and execute arbitrary code (CVE-
2017-11145). Backends of 357 mobile apps affected by PHP
vulnerabilities, signiﬁcantly higher than the other two vul-
nerabilities. Further, even though some mobile app back-
ends had no 0-day vulnerabilities, an attacker can still craft
special requests to trigger deep bugs within the interpreter to
compromise the backend. Although this might be a difﬁcult
task, recent advancement in vulnerability fuzzing [37] can
uncover these deep bugs.
558    28th USENIX Security Symposium
USENIX Association
The second most common SS vulnerability was unsup-
ported versions of Apache web server (1.3.x and 2.0.x),
Tomcat server (8.0.x), and Microsoft IIS web server (5.0).
Similar to unsupported OS, web server vendors will not is-
sue security patches for unsupported software, which affects
backends of 181 mobile apps. For Apache web server ver-
sions less than 2.2.15, they are affected by several denial of
service bugs (CVE-2010-0408, CVE-2010-0434) and TLS
injection bug (CVE-2009-3555) affecting 76 mobile apps.
Additionally, Apache servers that use Apache Struts ver-
sions 2.3.5 - 2.3.31 or 2.5.10.1 and lower are vulnerable
to CVE-2017-5638, which allows remote code execution.
The same Apache Struts vulnerability was reportedly used
against Equifax’s hack [38]. In total, the top three SS vulner-
abilities affect 614 mobile apps.
Applications (AS). Table 7 has a breakdown of the number
of mobile apps, their number of install categories, and the
instances of 0-day bugs affecting them. Although XSS is the
largest category with 503 instances followed by SQLi (215)
and XXE (46), we note that not all of the bugs have the same
impact and some affect the same backend. For instance, an
SQLi can be limited to an isolated instance of the app (e.g.,
a container), which would limit the attack to disclosing in-
formation from the application database or modifying preex-
isting records. Moreover, XSS vulnerabilities often have less
impact than SQLi and XXE.
XXE vulnerabilities affect web apps that use XML for
their API communication. The fundamental ﬂaw that en-
ables XXE vulnerabilities to exist is a faulty implementation
of the XML parser. Based on our measurement, we found
1 XXE instance in the top 100M, 5 in the top 50M, 15 in
the top 10M, 9 in the top 5M, and 17 in the top 1M. Table 7
shows the concentration of vulnerabilities found in lower
ranking apps. For example: 1 XXE and 3 XSS vulnerabil-
ities in the top 132 mobile apps; 4 SQLi, 10 XSS, and 5
XXE vulnerabilities in the next 131 mobile apps (though
still representing over 50M+ installs each). However, AS
vulnerabilities are not conﬁned to lower ranking apps but do
affect higher ranking apps.
# Installs
1B
500M
100M
50M
10M
5M
1M
# Apps
5
11
116
131
1,049
1,047
2,621
# SQLi
0
0
0
4
25
54
132
# XSS
0
0
3
10
85
89
316
# XXE
0
0
1
5
15
9
17
Table 7: The number of 0-day vulnerabilities found per in-
stall category.
Table 8 shows the AS layer implementation language and
associated vulnerabilities. AS implemented in PHP have the
most 0-days instances (284) affecting 108 different back-
Language
PHP
ASP.NET
PERL
JS
JSP
Unknown
# Backends
108
13
4
4
2
72
# 0-Days
284
33
9
8
5
316
Table 8: The number of identiﬁed languages associated with
0-day vulnerable backends.
ends, followed by ASP.NET with 33 0-day instances affect-
ing 13 different backends. We note that this trend does
not mean causation. PHP is the most popular language
used for web application development [39], hence it is ex-
pected to represent more vulnerabilities by being more pop-
ular. Furthermore, we found 9 0-day instances in PERL, 8 in
JavaScript (NodeJS), 5 in JSP, and the rest of the 316 could
not be determined.
Communication (CS).
All mobile apps rely on the
HTTP/HTTPS protocol for communication with their back-
ends. The binary analysis phase extracted a total of 17,725
request messages from the 4,740 mobile apps. The request
messages are split into HTTP (8,118) request messages and
HTTPS (9,607) request messages. There are 446 mobile
apps that only use HTTP communication and another set of
147 mobile apps that only use HTTPS communication. The
remaining set of 4,147 apps mix between HTTP and HTTPS
communication.
Despite using HTTPS, over 20% of the backends (1,012)
have issues with TLS/SSL conﬁguration (e.g., insecure ses-
sion renegotiation and resumption) or unpatched software
versions (e.g., SSL version 2 and 3). These ﬂaws can be ex-
ploited by an attacker to carry out a MITM attack by down-
grading the protocol negotiation using the POODLE [40] at-
tack. Additionally, the OpenSSH Bypass vulnerability ex-
poses the backend to compromise via SSH credential guess-
ing or secret key leak. The mobile apps using these vulnera-
ble backends do not use the SSH service and to remediate one
can turn off, patch, or block the incoming internet trafﬁc to it.
Those backends which only use HTTP expose users to
eavesdropping and MITM attacks because it does not of-
fer integrity or conﬁdentiality. We manually inspected the
request messages sent from 3,253 apps that use HTTP and
found personally identiﬁable information (PII) such as name,
gender, birth year, user ID, password, username, and country.
Additionally, we found device information like MAC, IMEI,
SDK version, make/model, SSID, Wiﬁ signal, cell signal,
screen resolution, carrier, root access, IP Address, and co-
ordinate location. Combining this information, a network
attacker can identify individuals and attribute behavior pro-
ﬁles to them. Furthermore, 6 apps we investigated perform a
password reset over HTTP. Interestingly, the Apple iOS App
Store enforces strict use of HTTPS through their App Trans-
USENIX Association
28th USENIX Security Symposium    559
In general, an attacker has a larger attack surface for
apps that have many backends. Figure 2 shows a CDF of
backends per mobile app. We can see that the majority of
the 5,000 apps studied have between one and 25 different
backends and in the worst case they have up to 203 different
backends. We also observe that these backends reside in
diverse networks as shown in Figure 3, which means the
infrastructure set up for the backends will be different
affecting the impact of the vulnerability.
Figure 4: The ﬁgure shows the distribution of all mobile
backends and vulnerable backends across the world.
Finally,
the geographical distribution of the backends,
shown in Figure 4, affect the impact on mobile apps. Many
mobile apps deploy multiple backends that are geographi-
cally distributed to provide faster content for different user
segments.
In some cases, the different backends may not
be fully synchronized in terms of the latest software patches
for OS, SS, AS, and CS layers, which results in a vulnerable
backend affecting only a segment of users for a particular
mobile app. Directly quantifying the impact of each vulner-
ability is an involved task and depends on many variables
such as the severity of the vulnerability, the mobile app to
backend usage, the adversary capability, and other nuance
factors (number of backends per app, network distribution,
and geographical distribution). We plan to perform a com-
prehensive analysis to understand this impact as future work.
5.4 Vulnerability Disclosure, Bug Bounties,
And In The Wild Threats
During our disclosure process, we identiﬁed two mobile
platform vendors that have a bounty program, namely
Unity3D [42] and Simpli.ﬁ [43]. In addition, the top third-
party platform providers, Google, Facebook, Crashlytics,
and Flurry, all participate in or run their own bug bounty
programs. Similarly, the cloud providers either run their
own program or use a third-party bug bounty program like
Bugcrowd [44] or Bounty Factory [45]. We submitted our
vulnerability disclosures through their bounty management
program (e.g., HackerOne [46]) and received conﬁrmation
of the bugs.
Figure 2: The ﬁgure shows the CDF of the number of back-
ends per mobile app.
port Security [41] model. We recommend that the Android
platform adopt the same restriction.
Impact on Mobile Application Users
5.3
The overall impact for each vulnerability varies based on the
severity, the mobile app to backend usage, and the adversary
capability/visibility. Although it is important to understand
the impact of each vulnerability, it is not trivial to quantify
the impact of each vulnerable backend on mobile apps. For
N-day vulnerabilities, an attacker can perform an internet-
wide scan to identify and attempt to compromise these
backends. Even once identiﬁed, these N-days span many
different components (OS, SS, and CS) that have varying
impacts on the backend from basic information disclosure
to a full system compromise. For 0-day vulnerabilities the
attack impact varies based on the exploit type (SQLi, XSS, or
XXE) and how the backend infrastructure is set up. More-
over, how the mobile app uses the backend directly impacts
the severity of the vulnerability. For example, if a mobile
app uses app slicing [3] or downloads additional libraries
from the mobile backend, an attacker who compromises the
backend can modify the content and attain code execution
on the mobile device.
Figure 3: The ﬁgure shows the distribution of backends
across internet networks.
560    28th USENIX Security Symposium
USENIX Association
0255075100125150175200Number of Backends Per Mobile App0.00.20.40.60.81.0amazonakamaigooglecloudflareKR telmicrosoftfastlyovhleasewebdig-ocnadobeyahoohetznerlinodelg corpJP telyandexlevel 3softlayercdnetsOrganization (Network)102103Count (Log Scale)USKRJPDEIECNRUFRNLSGCATRGBHKINTWTHESPLCZBRCountry Code100101102103Count (Log Scale)Vulnerable BackendsAll BackendsFor smaller third-party and ﬁrst-party developers, they did
not have a formal way to contact them to report vulnerabil-
ities. We followed a tiered approach in our notiﬁcation by
ﬁrst notifying the app developer directly using the contact
information in the Play Store. Our second attempt to report
the vulnerability is by contacting the domain owner using the
WHOIS information and following the mitigation strategy.
Our third attempt to report the vulnerability is by contacting
Google directly through their issue tracker portal. For parties
that did not conﬁrm or respond to our multiple attempts, we
reported the vulnerabilities to US-CERT [47].
Component
Operating System (OS)
Services (SS)
Application (AS)
# IP Scanners
341,521
445,908
206,533
Table 9: Number of IPs observed scanning the internet for
vulnerabilities reported by Greynoise.io [35] over a period
of a year (Sept 2017 to Sept 2018).
The N-day vulnerabilities we found are discoverable
and easy to exploit due to the availability of fast internet
scanners like ZMap [48] and MASSCAN [49]. We argue
that it is a matter of time until these vulnerabilities are found
and exploited. Table 9 shows the number of active scans