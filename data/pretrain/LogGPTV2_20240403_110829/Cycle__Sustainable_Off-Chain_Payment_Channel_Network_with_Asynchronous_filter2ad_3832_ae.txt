violates the value privacy goal in § II-C.
There are a number of privacy-preserving technologies such
as homomorphic encryption, zero-knowledge proof, secure
multi-party computation, etc. However, considering the limited
ability and high cost of smart contracts in most blockchains [7,
Section 1], the technologies mentioned above are hard to apply
because they often require complex cryptographic operations
which the smart contracts can hardly support. Considering
that our goal is to hide the actual value of the difference
between two successive expected offset for a participant from
the other participants in the cycle, we adopt the idea of local
differential privacy (LDP), where the message senders, i.e.,
the participants of the cycle, locally randomize their inputs to
guarantee no value can be restored with high conﬁdence [20].
The approach neither re-designs the global smart contract in
Fig. 3 nor needs a speciﬁc blockchain with more performant
smart contracts such as a trusted execution environment [7].
B. Protocol Design
Laplace mechanism is one of predominant LDP mechanisms
and is frequently utilized in applications on numerical data
[10]. The traditional Laplace mechanism adds noise in the
range of (−∞,∞) which may generate an output outside of
the valid range for channels, thus break the balance security.
For the example given in Fig. 4, a valid value for Alice’s
expected offset should be in 200 ± 100 considering Alice’s
balance in its channels. Therefore, we design a modiﬁed one
named truncated Laplacian mechanism to protect the value
privacy of channels while guaranteeing the balance security of
participants. The truncated Laplacian mechanism reﬁnes Line
13 in Algorithm 1. In detail, after updating the expected offset
αi and before broadcasting it, participant i can disturb αi into
(cid:3)αi which is computed by
(cid:3)αi = αi + SymT runLap(
, min{β(cid:2)
i, βi}).
f

(11)
In (11), SymT runLap denotes a symmetric truncated
Laplace distribution. Its ﬁrst parameter denotes the scale and
the second one denotes the boundary. For participant i, the
boundary is set as min{β(cid:2)
i denote the
balance of participant i in its connected channels in the cycle.
For example, the boundary is 100 for Alice in Fig. 4. f denotes
the maximum difference between two successive expected
offsets, which is equal to the maximum value of transactions in
PCN.  is called the privacy budget which denotes the privacy
guarantee level (a smaller  represents a stronger privacy).
i, βi} where βi and β(cid:2)
For the analysis of the privacy-preserving scheme, we ﬁrst
provide the formal deﬁnition of LDP [15] as follows.
Deﬁnition 1. (Local Differential Privacy) A protocol π satis-
ﬁes -LDP, where the privacy budget  ≥ 0, if and only if for
any input v and v(cid:2), and any possible output y, we have
P r[π(v) = y] ≤ eP r[π(v(cid:2)) = y].
(12)
A protocol satisﬁes LDP if any two items are perturbed
to the same value with close probabilities, thus the malicious
nodes cannot restore the true value based on the received value.
Next, we provide the privacy property of truncated Laplace
mechanism as follows.
Lemma 5. For a truncated Laplace mechanism with f /, if
the boundary is symmetric, it achieves -LDP.
Proof. Suppose the bound of the symmetric truncated Laplace
mechanism is β and its sensitivity f = 2β. For an input α,
there exists −β ≤ α + ξ ≤ β, where ξ represents the Laplace
noise. Therefore, we have
· exp (− |x − α|

2f
f
),
) = α +
˜α = α + Lap(
(13)
where  is the privacy budget of the mechanism, and x is the
random variable of the symmetric truncated Laplace distribu-
tion. We analyze the mechanism in two cases as follows.
Case 1: If the output z ∈ [−β, β], which means it can
be regarded as a normal Laplace situation. Assume two input
variables x and y (x < y), and we also know |y − x| ≤f .
|y − z| − |x − z|)
)

f

px(z)
py(z)
=
2f · exp (− |x−z|
2f · exp (− |y−z|
f
f

)
|y − x|
= exp (
f
)
f
) ≤ exp ()
(14)
≤ exp (
47
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:16:49 UTC from IEEE Xplore.  Restrictions apply. 
which satisﬁes the deﬁnition of -LDP.
Case 2: If the output z ∈ (−∞,−β) ∪ (β, +∞), since the
Laplace distribution is symmetric, we only need to analyze the
situation of z ∈ (β, +∞).
P (z ≥ β) =

2f
(cid:4) +∞
)dx
f
· exp (− (x − α)
(cid:5)(cid:5)(cid:5)(cid:5)+∞
=
)
1
2
β
exp (− (β − α)
).
(15)
f
β
exp (− (x − α)
= − 1
2
1
f
Then, we can derive
py(z)
px(z)
2 exp (− (y−z)
2 exp (− (x−z)
which also satisﬁes -LDP.
=
1
f
f
)
)
= exp (
(y − x)
f
) ≤ exp ()
(16)
Therefore, we have proved that the symmetric truncated
Laplace mechanism achieves -LDP.
In CYCLE, a participant broadcasts its expected offset many
times during the lifetime of a cycle. Thus, we needs the
property of composition theorem for LDP as follows, which
guarantees the overall LDP for a sequence of protocols, each
of which satisﬁes LDP.
Lemma 6. ( [11, Theorem 3.14]) Suppose a set of proto-
col π = {π1, π2,··· , πn} are sequentially performed on a
dataset, and each πi provides -LDP guarantee, π will provide
n-LDP.
Theorem 7. The differentially private CYCLE satisﬁes n-
LDP, where n denotes the number of broadcast
for the
expected offset, while guaranteeing balance security.
Proof. According to Lemma 5,
the symmetric truncated
laplace mechanism given in (11) achieves -LDP. According to
Lemma 6, the overall protocol achieves n-LDP when there
are n times of broadcasts during the lifetime of the cycle.
Then, the balance security can be proved similarly to what
Lemma 1 and 2 do except the proof of (5). Without loss
of generality, we assume βi = min{β(cid:2)
i, βi}. For the proof
Laplace mechanism can guarantee that (cid:6)α∗
of (5) in Lemma 2, according to (2) and (11), a truncated
i ≤ min{δi−1,i +
βi, δi,i+1 + βi} thus (5) still holds. Therefore, the privacy-
preserving scheme achieves balance security.
However, for the privacy-preserving scheme, Theorem 4
does not hold because the global offset is no longer updated
based on the actual value of the expected offsets of partic-
ipants, which means the optimal balancing efﬁciency cannot
be guaranteed. The trade-off between balancing efﬁciency and
privacy protection is evaluated in § VIII.
VI. PROTOCOL REFINEMENT
Cycle Planning. Before forming cycles,
the nodes can
negotiate with each other to ﬁnd the possible cycles and cancel
their demands out as much as possible. To solve the problem,
we deﬁne the demand of channel cij ∈ E as dij whose
direction is from i to j, and dij = −dji. All demands in
the network are maintained in set d. We deﬁne the offset of
channel cij after balancing as Δij and the set of offset in the
network as Δ ={Δ ij}cij∈E. Given the demand set d, the
problem can be formulated as follows
(cid:2)
dij − Δij
(cid:2)
min
Δ
cij∈E
s.t. ∀i ∈ V ,
(cid:2)
Δji =
Δij,
j∈V
j∈V
∀cij ∈ E, 0 ≤ Δij ≤ dij.
(17)
(18)
(19)
The objective of the planning problem (17) is to minimize
the sum of balance deviation in the network after balancing,
i.e., keep the network as balanced as possible. (18) enforces
the conservation of balance for each participant, i.e., the sum
of gained balance equals the sum of losed balance during
balancing. (19) denotes the offset of a channel should not
exceed the demand of the channel. Because the planning
problem can be formulated as a linear program, it can be
efﬁciently solved by much well-developed algorithms [6], e.g.,
simplex algorithms or interior-point algorithms.
Replay Attack. In the previous protocol, a malicious node
may launch a replay attack by broadcasting an old message
including a decreased expected offset. The attack can revert the
global offset and causes the balance of channels in the cycle to
become invalid, i.e., the constraint in Line 10 in Algorithm 1
does not hold. To prevent it, we can introduce an additional
design in which the message of expected offset includes an
increasing version number.
Context of Use. Although the malicious participants in the
cycle cannot steal money from the honest ones according to
the balance security in § IV, they can broadcast the high or
low expected offset or reject to send expected offset, i.e., a
degradation or denial of service attack, to hinder the balancing.
Therefore, similar to REVIVE [23], we also suggest CYCLE be
deployed in a consortium context where the reliability of the
nodes involved is reputable, and may be favored or dismissed
in future cycle participation based on their attained reputation.
Communication Efﬁciency. As presented so far, CYCLE
requires that each participant updates and broadcasts its ex-
pected offset to other participants in the cycle after every
payment in its connected channels. However, it may cause the
communication congestion if there are frequent payments in
the cycle. To reduce the communication overhead of a cycle, a
participant can broadcast its expected offset after a predeﬁned
time interval instead of immediately after each payment, which
we call as batch update. Note that the balance security of the
cycle can still be guaranteed based on the same proof in § IV.
Although it may slow down the balancing of the cycle, the
high communication overhead can be relieved, the trade-off
of which is evaluated in § VIII.
Beyond Cycle: A More General Case. In the above, we
consider the case that a channel participates in one cycle. How-
ever, it may be not enough for channels with higher demand
than other channels in the cycle. The channels can beneﬁt
from being the part of several cycles. To enable a channel
to participate in several cycles, we reﬁne the channel design
as follows. Chan.setup receives and stores the addresses of
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:16:49 UTC from IEEE Xplore.  Restrictions apply. 
48
THE GAS COST FOR EXECUTING THE CYCLE AND CHAN CONTRACT
TABLE I
Step Command