Many privacy-preserving applications can beneﬁt from us-
ing PartialGC to cache values for state. As a case study,
we developed a privacy-preserving friend ﬁnder application,
where users can locate nearby friends without any user di-
vulging their exact location. In this application, many diﬀer-
ent mobile phone clients use a consistent generator (a server
application) and outsource computation to a cloud. The gen-
erator must be the same for all computations; the cloud must
be the same for each computation. The cloud and generator
are two diﬀerent parties. After each computation, the map
is updated when PartialGC saves the current state of the
map as wire labels. Without PartialGC outsourcing values
to the cloud, the wire labels would have to be transferred
directly between mobile devices, making a multi-user appli-
cation diﬃcult or impossible.
We deﬁne three privacy-preserving operations that com-
prise the application’s functionality:
MapStart - The three parties (generator, evaluator, cloud)
create a “blank” map region, where all locations in the map
are blank and remain that way until some mobile party sets
a location to his or her ID.
MapSet - The mobile party sets a single map cell to a
new value. This program takes in partial values from the
generator and cloud and outputs a location selected by the
Figure 4: Results from testing our largest common substring
(LCS) programs for PartialGC and CMTB. This shows
when changing a single input value is more eﬃcient un-
der PartialGC than either CMTB program. CMTB crashed
on running LCS Incremental of size 512 due to memory re-
quirements. We were unable to complete the compilation of
CMTB Full of size 512.
putation. The input consistency check adds considerably to
the memory use on the phone for CMTB-Inc and in the case
of input bit 512, the CMTB-Inc program will not complete.
In the case of the 512-bit CMTB-Full, the program would
not complete compilation in over 42 hours. In our CMTB-
Inc program, we assume the cloud saves the output bits so
that multiple phones can have a shared private key. We do
not provide a full program due to space requirements.
Note that the growth of CMTB-Inc and CMTB-Full are
diﬀerent. CMTB-Full grows at a larger rate (4x for each
2x factor increase) than CMTB-Inc (2x for each 2x factor
increase), implying that although at ﬁrst it seems more ef-
ﬁcient to rerun the program if small changes are desired in
the input, eventually this will not be the case. Even with a
more eﬃcient AES function, CMTB-Inc would not be faster
as the bottleneck is the input, not the size of the circuit.
The overhead of saving and reusing values is discussed
further in Appendix B.
Outsourcing to a Server Process
PartialGC can be used in other scenarios than just out-
sourcing to a mobile device. It can outsource garbled circuit
evaluation from a single server process and retain perfor-
mance beneﬁts over a single server process of CMTB. For
this experiment the outsourcing party has a single thread.
Table 4 displays these results and shows that in the KeyedDB
256 program, PartialGC has a 92% speedup over CMTB.
As with the outsourced mobile case, keyed database prob-
lems perform particularly well in PartialGC. Because the
computationally-intensive input consistency check is a greater
bottleneck on mobile devices than servers, these improve-
ments for most programs are less dramatic. In particular,
 1 10 100 1000 10000LargestSubstring128LargestSubstring256LargestSubstring512Time (s)ProgramPartialGC IncCMTB IncCMTB Full16 Circuits
64 Circuits
256 Circuits
KeyedDB 64
KeyedDB 128
KeyedDB 256
MatrixMult8x8
Edit Distance 128
Millionaires 8192
CMTB PartialGC
6.6 ± 4%
13 ± 3%
25 ± 4%
42 ± 3%
18 ± 3%
13 ± 4%
1.4 ± 1% 4.7x
1.8 ± 2% 7.2x
2.5 ± 1% 10x
41 ± 4% 1.0x
18 ± 3% 1.0x
3.2 ± 1% 4.1x
PartialGC
CMTB
5.1 ± 2% 5.3x
27 ± 4%
5.8 ± 2% 9.3x
54 ± 4%
110 ± 7% 7.3 ± 2% 15x
79 ± 3% 1.2x
94 ± 4%
40 ± 8%
40 ± 6% 1.0x
52 ± 3%
8.5 ± 2% 6.1x
PartialGC
CMTB
110 ± 2% 24.9 ± 0.3% 4.4x
220 ± 5% 27.9 ± 0.5% 7.9x
420 ± 4% 33.5 ± 0.6% 13x
300 ± 10%
0.97x
120 ± 9%
0.8x
220 ± 5% 38.4 ± 0.9% 5.7x
310 ± 1%
150 ± 3%
Table 4: Timing results from outsourcing the garbled circuit evaluation from a single server process. Results in seconds.
(a) Location selected.
(b) After computation.
Figure 5: Screenshots from our application. (a) shows the
map with radio buttons a user can select to indicate position.
(b) show the result after “set new position” is pressed when
a user is present. The application is set to use 64 diﬀerent
map locations. Map image from Google Maps.
mobile party.
MapGet - The mobile party retrieves the contents of a sin-
gle map cell. This program retrieves partial values from the
generator and cloud and outputs any ID set for that cell to
the mobile.
In the application, each user using the Secure Friend Finder
has a unique ID that represents them on the map. We divide
the map into ‘cells’, where each cell is a set amount of area.
When the user presses “Set New Location’, the program will
ﬁrst look to determine if that cell is occupied. If the cell is
occupied, the user is informed he is near a friend. Otherwise
the cell is updated to contain his user ID and remove his ID
from his previous location. We assume a maximum of 255
friends in our application since each cell in the map is 8 bits.
Figure 6 shows the performance of these programs in the
malicious model with a 2−80 security parameter (evaluated
over 256 circuits). We consider map regions containing both
256 and 2048 cells. For maps of 256 cells, each operation
takes about 30 seconds.1 As there are three operations for
each “Set New Location” event, the total execution time is
about 90 seconds, while execution time for 2048 cells is about
3 minutes. The bottleneck of the 64 and 256 cell maps is the
outsourced oblivious transfer, which is not aﬀected by the
number of cells in the map. The vastly larger circuit associ-
1Our 64-cell map, as seen the application screenshots, also
takes about 30 seconds for each operation.
Figure 6: Run time comparison of our map programs with
two diﬀerent map sizes.
ated with the 2048-cell map makes getting and setting values
slower operations, but these results show such an application
is practical for many scenarios.
Example - As an example, two friends initiate a friend
ﬁnder computation using Amazon as the cloud and Face-
book as the generator. The ﬁrst friend goes out for a coﬀee
at a caf´e. The second friend, riding his bike, gets a message
that his friend is nearby and looks for a few minutes and
ﬁnds him in the caf´e. Using this application prevents either
Amazon or Facebook from knowing either user’s location
while they are able to learn whether they are nearby.
6.4 Discussion
Analysis of improvements
We analyzed our results and found the improvements came
from three places: the improved sS13 consistency check, the
saving and reusing of values, and the ﬁxed oblivious trans-
fer. In the case of the sS13 consistency check, there are two
reasons for the improvement, ﬁrst there is less network traf-
ﬁc and second it does not use exponentiations. In the case of
saving and reusing values, we save time by the faster input
consistency check and not requiring a user to recompute a
circuit multiple times. Lastly, we reduced the runtime and
bandwidth by ﬁxing parts of the OOT. The previous out-
sourced oblivious transfer performed the primitive OT S
times instead of a single time, which turn forced many ex-
tra exponentiations. Each amount of improvement varies de-
pending upon the circuit.
Output check
Although the garbled circuit is larger for our output check,
this check performs less cryptographic operations for the
outsourcing party, as the evaluator only has to perform a
MAC on the output of the garbled circuit. We use this check
to demonstrate using a MAC can be an eﬃcient output check
for a low power device when the computational power is not
equivalent across all parties.
 20 40 60 80 100MapStartMapSetMapGetTime (s)ProgramMap size 256Map Size 2048Commit Cut-and-Choose vs OT Cut-and-Choose
Our results unexpectedly showed that the sS13 OT cut-
and-choose used in PartialGC is actually slower than the
KSS12 commit cut-and-choose used in CMTB in our ex-
perimental setup. Theoretically, sS13, which requires fewer
cryptographic operations, as it generates the garbled circuit
only once, should be the faster protocol. The diﬀerence be-
tween the two cut-and-choose protocols is the network usage
– instead of 2
5 of the circuits (CMTB), all the circuits must
be transmitted in sS13. The sS13 cut-and-choose is required
in our protocol so that the cloud can check that the gener-
ator creates the correct gates.
7. RELATED WORK
SFE was ﬁrst described by Yao in his seminal paper [39]
on the subject. The ﬁrst general purpose platform for SFE,
Fairplay [32], was created in 2004. Fairplay had both a com-
piler for creating garbled circuits, and a run-time system for
executing them. Computations involving three or more par-
ties have also been examined; one of the earliest examples
is FairplayMP [2]. There have been multiple other imple-
mentations since, in both semi-honest [6, 9, 16, 17, 40] and
malicious settings [26, 37].
Optimizations for garbled circuits include the free-XOR
technique [25], garbled row reduction [36], rewriting compu-
tations to minimize SFE [23], and pipelining [18]. Pipelining
allows the evaluator to proceed with the computation while
the generator is creating gates.
KSS12 [27] included both an optimizing compiler and an
eﬃcient run-time system using a parallelized implementa-
tion of SFE in the malicious model from [37].
The creation of circuits for SFE in a fast and eﬃcient man-
ner is one of the central problems in the area. Previous com-
pilers, from Fairplay to KSS12, were based on the concept of
creating a complete circuit and then optimizing it. PAL [33]
improved such systems by using a simple template circuit,
reducing memory usage by orders of magnitude. PCF [26]
built from this and used a more advanced representation to
reduce the disk space used.
Other methods for performing MPC involve homomorphic
encryption [3, 12], secret sharing [4], and ordered binary
decision diagrams [28]. A general privacy-preserving com-
putation protocol that uses homomorphic encryption and
was designed speciﬁcally for mobile devices can be found
in [7]. There are also custom protocols designed for partic-
ular privacy-preserving computations; for example, Kamara
et al. [21] showed how to scale server-aided Private Set In-
tersection to billion-element sets with a custom protocol.
Previous reusable garbled-circuit schemes include that of
Brand˜ao [5], which uses homomorphic encryption, Gentry
et al. [10], which uses attribute-based functional encryption,
and Goldwasser et al. [13], which introduces a succinct func-
tional encryption scheme. These previous works are purely
theoretical; none of them provides experimental performance
analysis. There is also recent theoretical work on reusing
encrypted garbled-circuit values [30, 11, 31] in the ORAM
model; it uses a variety of techniques, including garbled cir-
cuits and identity-based encryption, to execute the underly-
ing low-level operations (program state, read/write queries,
etc.). Our scheme for reusing encrypted values is based on
completely diﬀerent techniques; it enables us to do new kinds
of computations, thus expanding the set of things that can
be computed using garbled circuits.
The Quid-Pro-Quo-tocols system [19] allows fast execu-
tion with a single bit of leakage. The garbled circuit is ex-
ecuted twice, with the parties switching roles in the latter
execution, then running a secure protocol to ensure that the
output from both executions are equivalent; if this fails, a
single bit may be leaked due to the selective failure attack.
8. CONCLUSION
This paper presents PartialGC, a server-aided SFE scheme
allowing the reuse of encrypted values to save the costs of in-
put validation and to allow for the saving of state, such that
the costs of multiple computations may be amortized. Com-
pared to the server-aided outsourcing scheme by CMTB, we
reduce costs of computation by up to 96% and bandwidth
costs by up to 98%. Future work will consider the general-
ity of the encryption re-use scheme to other SFE evaluation
systems and large-scale systems problems that beneﬁt from
the addition of state, which can open up new and intriguing
ways of bringing SFE into the practical realm.
Acknowledgements: This material is based on research
sponsored by the Defense Advanced Research Projects Agency
(DARPA) and the Air Force Research Laboratory under
contracts FA8750-11-2-0211 and FA8750-13-2-0058. It is also
supported in part by the U.S. National Science Founda-
tion under grant numbers CNS-1118046 and CNS-1254198.
The U.S. Government is authorized to reproduce and dis-
tribute reprints for Governmental purposes notwithstanding
any copyright notation thereon. The views and conclusions
contained herein are those of the authors and should not be
interpreted as necessarily representing the oﬃcial policies or
endorsements, either expressed or implied, of DARPA, NSF,
or the U.S. Government.
9. REFERENCES
[1] M. Bellare and S. Micali. Non-Interactive Oblivious
Transfer and Applications. In Proceedings of
CRYPTO, 1990.
[2] A. Ben-David, N. Nisan, and B. Pinkas. FairplayMP:
a system for secure multi-party computation. In
Proceedings of the ACM conference on Computer and
Communications Security, 2008.
[3] R. Bendlin, I. Damg˚ard, C. Orlandi, and S. Zakarias.
Semi-Homomorphic Encryption and Multiparty
Computation. In Proceedings of EUROCRYPT, 2011.
[4] D. Bogdanov, S. Laur, and J. Willemson. Sharemind:
A Framework for Fast Privacy-Preserving
Computations. In Proceedings of the 13th European
Symposium on Research in Computer Security -
ESORICS’08, 2008.
[5] L. T. A. N. Brand˜ao. Secure Two-Party Computation
with Reusable Bit-Commitments, via a
Cut-and-Choose with Forge-and-Lose Technique.
Technical report, University of Lisbon, 2013.
[6] M. Burkhart, M. Strasser, D. Many, and
X. Dimitropoulos. Sepia: Privacy-preserving
aggregation of multi-domain network events and
statistics. In Proceedings of the 19th USENIX
Conference on Security, USENIX Security’10, pages
15–15, Berkeley, CA, USA, 2010. USENIX
Association.
[7] H. Carter, C. Amrutkar, I. Dacosta, and P. Traynor.
For your phone only: custom protocols for eﬃcient