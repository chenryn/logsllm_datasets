n
i
s
u
b
r
o
t
i
n
o
m
r
o
f
k
c
a
t
s
n
o
i
t
a
c
i
l
p
p
a
r
o
f
k
c
a
t
s
w
o
d
a
h
s
e
r
u
c
e
s
e
r
a
w
a
U
O
T
T
C
O
T
x x x
e
t
a
r
a
p
e
S
e
t
a
r
a
p
e
S
x
(x) x
x
?
x
x
e
l
b
a
l
i
a
v
a
e
d
o
c
e
c
r
u
o
S
x
x
x
x
x
x
x
x
(x)
The different features describe limitations and possibilities of each ap-
proach. x includes an available feature, (x) marks a limited feature, a blank
marks a missing feature, a ? indicates that no information about this item
is available.
a1: dynamic BT; 2: static BT; 3: kernel module or kernel support; 4:
compiler extension
bMonitor has a separate stack (e.g., permission check or code translation).
cImplements IA32 subset: no FPU, MMX, SSE, and 3 byte opcodes.
dStatic hard-coded policy, only open and execve calls are intercepted.
eret must target instructions immediately after any call instruction.
fMAPbox [2], SubDomain [15], and Consh [3] use a comparable ap-
proach.
gAccording to the paper at least no FPU, MMX, and SSE.
Table V
SUMMARY OF RELATED WORK.
is detected. Different
techniques can be used to imple-
ment system call authorization, e.g., ptrace-support [26],
trusted code in the kernel [6], [39], [21], [24], or binary
translation [29], [37].
Apart from user-space isolation there exist other pos-
sibilities to secure a running systems. Dynamic systems
add additional guards and checks to a running application.
These systems all work at different levels of granularity.
Full system virtualization [7], [18], [12], [5] encapsulates a
complete running system and works at a very coarse-grained
level of granularity [25], [28], [13]; system call interposition
30
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:47:59 UTC from IEEE Xplore.  Restrictions apply. 
encapsulates the application at the system call level and
works at the granularity level of individual applications and
their system calls.
Static protection reduces the potential overhead but either
restricts the instruction set or introduces complicated static
analysis. Static veriﬁcation allows only a sub-set of the
instruction set or imposes other additional checks. Compiler
extensions can be used as a quick ﬁx to patch a speciﬁc
static problem.
Table V presents a concise summary of related work and
distinguishes features, design and implementation details of
these different approaches.
IX. CONCLUDING REMARKS
This paper presents a Trusted Runtime Environment
(TRuE) consisting of a secure loader and a user-space
sandbox. The secure loader enables safe loading that is
a foundation for safe software-based fault isolation. TRuE
replaces the standard loader with a security-hardened bare-
bones implementation and uses user-space process sandbox-
ing to execute application code under the control of dynamic
security guards.
Bugs in the standard loader are often used to escalate
privileges. The secure loader is restricted to the basic func-
tionality. The restricted functionality protects from many
exploits against the standard loader. Safe loading ensures
that SFI is seamlessly integrated into the loader and guaran-
tees that no unchecked code is executed. The trusted, secure
loader enables additional security guards in the sandbox.
The sandbox is aware of all loaded code regions and the
connections between the different shared objects (i.e., the
application, or libraries). This information is used to restrict
applications to a secure execution model. The loader is
no longer treated as a black box but integrated into the
security concept. The secure loader and the sandbox run
in the same protection domain and share information about
the application. Calls from the application to the loader are
redirected into the sandbox domain where the requests are
veriﬁed. Applications running in the sandbox need fewer
privileges, and code-oriented attacks are no longer possible.
An additional advantage of the shared information between
the loader and the sandbox is the potential
to remove
many indirect control ﬂow transfers between modules. This
optimization reduces the overhead of the sandbox and limits
jump-oriented programming attacks. This approach bridges
the security context of programming languages and oper-
ating systems by enabling a language-independent secure
execution of applications.
TRuE enables a secure way to create and control appli-
cations in user-space with low overhead. Privileged applica-
tions and applications that are reachable over the network
should be hardened and protected from security exploits:
safe loading provides a foundation to solve this problem.
REFERENCES
[1] ABADI, M., BUDIU, M., ERLINGSSON, U., AND LIGATTI, J.
Control-ﬂow integrity. In CCS’05: Proc. 12th Conf. Computer
and Communications Security (2005), pp. 340–353.
[2] ACHARYA, A., AND RAJE, M. MAPbox: using parameter-
ized behavior classes to conﬁne untrusted applications.
In
SSYM’00: Proc. 9th Conf. USENIX Security Symp. (2000),
pp. 1–17.
[3] ALEXANDROV, A., KMIEC, P., AND SCHAUSER, K. Consh:
Conﬁned execution environment
internet computa-
tions. http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.
1.1.57.488 (1999).
for
[4] BARATLOO, A., SINGH, N., AND TSAI, T. Transparent run-
time defense against stack smashing attacks. In Proc. USENIX
ATC (2000), pp. 251–262.
[5] BARHAM, P., DRAGOVIC, B., FRASER, K., HAND, S.,
HARRIS, T., HO, A., NEUGEBAUER, R., PRATT, I., AND
WARFIELD, A. Xen and the art of virtualization. In SOSP
’03 (2003), pp. 164–177.
[6] BAUER, M. Paranoid penguin: an introduction to Novell
AppArmor. Linux J. 2006, 148 (2006), 13.
[7] BELLARD, F. QEMU, a fast and portable dynamic translator.
In Proc. USENIX ATC (2005), pp. 41–41.
[8] BHATKAR, E., DUVARNEY, D. C., AND SEKAR, R. Address
obfuscation: an efﬁcient approach to combat a broad range
of memory error exploits. In SSYM’03: Proc. 12th USENIX
Security Symp. (2003), pp. 105–120.
[9] BHATKAR, S., BHATKAR, E., SEKAR, R., AND DUVARNEY,
D. C. Efﬁcient techniques for comprehensive protection from
memory error exploits.
In SSYM’05: Proc. 14th USENIX
Security Symp. (2005), pp. 255–270.
[10] BLETSCH, T., JIANG, X., FREEH, V. W., AND LIANG, Z.
Jump-oriented programming: a new class of code-reuse at-
tack. In ASIACCS’11: Proc. 6th ACM Symp. on Information,
Computer and Communications Security (2011), pp. 30–40.
[11] BRUENING, D., GARNETT, T., AND AMARASINGHE, S. An
infrastructure for adaptive dynamic optimization. In CGO ’03
(2003), pp. 265–275.
[12] BUGNION, E. Dynamic binary translator with a system
and method for updating and maintaining coherency of a
translation cache. US Patent 6704925, March 2004.
[13] CHOW, J., GARFINKEL, T., AND CHEN, P. Decoupling
dynamic program analysis from execution in virtual environ-
ments. In Proc. USENIX ATC (2008), pp. 1–14.
[14] COWAN, C., BEATTIE, S., JOHANSEN, J., AND WAGLE,
P. PointguardTM: protecting pointers from buffer overﬂow
vulnerabilities.
In SSYM’03: Proc. 12th USENIX Security
Symp. (2003).
[15] COWAN, C., BEATTIE, S., KROAH-HARTMAN, G., PU, C.,
WAGLE, P., AND GLIGOR, V. SubDomain: Parsimonious
server security. In Proc. 14th USENIX Conf. System Admin-
istration (2000), pp. 355–368.
31
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:47:59 UTC from IEEE Xplore.  Restrictions apply. 
[16] COWAN, C., PU, C., MAIER, D., HINTONY, H., WALPOLE,
J., BAKKE, P., BEATTIE, S., GRIER, A., WAGLE, P., AND
ZHANG, Q. StackGuard: automatic adaptive detection and
prevention of buffer-overﬂow attacks. In SSYM’98: Proc. 7th
USENIX Security Symp. (1998).
[17] DANEN, V. CVE-2011-1658: ld.so ORIGIN expansion com-
bined with RPATH. https://bugzilla.redhat.com/show bug.
cgi?id=CVE-2011-1658.
[18] DEVINE, S. W., BUGNION, E., AND ROSENBLUM, M. Vir-
tualization system including a virtual machine monitor for a
computer with a segmented architecture. US Patent 6397242.
[19] DREPPER, U. How to write shared libraries. http://www.
akkadia.org/drepper/dsohowto.pdf (Dec. 2010).
[20] ERLINGSSON, ´U., ABADI, M., VRABLE, M., BUDIU, M.,
AND NECULA, G. C. XFI: Software guards for system
address spaces. In OSDI’06 (2006), pp. 75–88.
[21] FETZER, C., AND SUESSKRAUT, M. Switchblade: enforcing
dynamic personalized system call models.
In EuroSys’08:
Proc. 3rd Europ. Conf. Computer Systems (2008), pp. 273–
286.
[22] FORD, B., AND COX, R. Vx32:
lightweight user-level
In Proc. USENIX ATC (2008),
sandboxing on the x86.
pp. 293–306.
[23] FRANTZEN, M., AND SHUEY, M. StackGhost: Hardware
facilitated stack protection. In SSYM’01: Proc 10th USENIX
Security Symp. (2001).
[24] GARFINKEL, T., PFAFF, B., AND ROSENBLUM, M. Ostia:
A delegating architecture for secure system call interposition.
In NDSS’04: Proc. Network and Distributed Systems Security
Symp. (2004).
[25] GARFINKEL, T., AND ROSENBLUM, M. A virtual machine
introspection based architecture for intrusion detection.
In
NDSS’03: Proc. Network and Distributed Systems Security
Symp. (2003).
[26] GOLDBERG, I., WAGNER, D., THOMAS, R., AND BREWER,
E. A. A secure environment for untrusted helper applications:
Conﬁning the wily hacker. In SSYM’06: Proc. 6th USENIX
Security Symp. (1996).
[27] HIROAKI, E., AND KUNIKAZU, Y.
propolice : Improved
stack-smashing attack detection. IPSJ SIG Notes, 75 (2001),
181–188.
[28] HO, A., FETTERMAN, M., CLARK, C., WARFIELD, A., AND
HAND, S.
Practical taint-based protection using demand
emulation. In EuroSys’06: Proc. 1st Europ. Conf. Comp. Sys.
(2006), pp. 29–41.
[29] KIRIANSKY, V., BRUENING, D., AND AMARASINGHE, S. P.
In SSYM’02:
Secure execution via program shepherding.
Proc. 11th USENIX Security Symp. (2002), pp. 191–206.
[30] LUK, C.-K., COHN, R., MUTH, R., PATIL, H., KLAUSER,
A., LOWNEY, G., WALLACE, S., REDDI, V. J., AND HAZEL-
WOOD, K. Pin: building customized program analysis tools
with dynamic instrumentation. In PLDI’05 (2005), pp. 190–
200.
[31] MCCAMANT, S., AND MORRISETT, G. Evaluating SFI for a
CISC architecture. In SSYM’06: Proc. 15th USENIX Security
Symp. (2006), pp. 209–224.
[32] NETHERCOTE, N., AND SEWARD, J. Valgrind: a framework
for heavyweight dynamic binary instrumentation. In PLDI’07
(2007), pp. 89–100.
[33] ORMANDY, T.
CVE-2010-3847: GNU C library dy-
namic linker $ORIGIN expansion vulnerability. http://www.
exploit-db.com/exploits/15274/.
[34] ORMANDY, T. CVE-2010-3856: GNU C library dynamic
linker LD AUDIT arbitrary DSO load vulnerability. http:
//www.exploit-db.com/exploits/15304/.
[35] PAX-TEAM. PaX ASLR (Address Space Layout Randomiza-
tion). http://pax.grsecurity.net/docs/aslr.txt.
[36] PAYER, M. String oriented programming - circumventing
In 28c3’11: Proc. 28th Chaos
aslr, dep and other guards.
Communication Congress (2011).
[37] PAYER, M., AND GROSS, T. R.
Fine-grained user-space
security through virtualization.
In VEE’11: Proc. 7th Int’l
Conf. Virtual Execution Environments (2011), pp. 157–168.
[38] PRASAD, M., AND CKER CHIUEH, T. A binary rewriting
defense against stack based buffer overﬂow attacks. In Proc.
12th USENIX ATC (2003), pp. 211–224.
[39] PROVOS, N.
Improving host security with system call
In SSYM’03: Proc. 12th USENIX Security Symp.
policies.
(2003).
[40] ROSENBERG, D.
ld.so.
in
integer-overﬂow-in-ldso-cve-2010-0830.html.
CVE-2010-0830:
Integer overﬂow
http://drosenbe.blogspot.com/2010/05/
[41] SCO.
System V Application Binary Interface, Intel386
http://www.sco.com/
Architecture Processor Supplement.
developers/devspecs/abi386-4.pdf (1996).
[42] SCOTT, K., AND DAVIDSON, J. Strata: A software dynamic
translation infrastructure. Tech. rep., University of Virginia,
2001.
[43] SCOTT, K., AND DAVIDSON, J. Safe virtual execution using
software dynamic translation. ACSAC’02: Annual Comp.
Security Applications Conf. (2002), 209.
[44] SHACHAM, H. The geometry of innocent ﬂesh on the bone:
Return-into-libc without function calls (on the x86).
In
CCS’07: Proc. 14th Computer and Communications Security
(2007), pp. 552–561.
[45] SRIDHAR, S., SHAPIRO, J. S., NORTHUP, E., AND BUN-
GALE, P. P. HDTrans: an open source, low-level dynamic
instrumentation system. In VEE’06: Proc. 2nd Virtual Exe-
cution Environments (2006), pp. 175–185.
[46] VAN DE VEN, A., AND MOLNAR, I. Exec shield. https:
//www.redhat.com/f/pdf/rhel/WHP0006US Execshield.pdf.
[47] YEE, B., SEHR, D., DARDYK, G., CHEN, J. B., MUTH, R.,
ORMANDY, T., OKASAKA, S., NARULA, N., AND FULLA-
GAR, N. Native client: A sandbox for portable, untrusted
x86 native code.
In IEEE Symp. on Security and Privacy
(2009), pp. 79–93.
32
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:47:59 UTC from IEEE Xplore.  Restrictions apply.