Android Platform APIs
MainActivity.class
public class MainActivity extends PreferenceActivity {
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
}
}
MyFragment.class
public class MyFragment extends Fragment {
public void onCreate (Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
}
public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
View v = inflater.inflate(R.layout.fragmentLayout, null);
WebView myWebView = (WebView) wv.findViewById(R.id.webview);
myWebView.getSettings().setJavaScriptEnabled(true);
myWebView.loadUrl(this.getActivity().getIntent().getDataString());
return v;
}
}
To exploit this vulnerable Activity, you can create an application with the following code:
Intent i = new Intent();
i.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK);
i.setClassName("pt.claudio.insecurefragment","pt.claudio.insecurefragment.MainActivity");
i.putExtra(":android:show_fragment","pt.claudio.insecurefragment.MyFragment");
Intent intent = i.setData(Uri.parse("https://security.claudio.pt"));
startActivity(i);
The Vulnerable App and Exploit PoC App are available for downloading.
Testing Custom URL Schemes (MSTG-PLATFORM-3)
Overview
Both Android and iOS allow inter-app communication via custom URL schemes. These custom URLs allow other
applications to perform specific actions within the application that offers the custom URL scheme. Custom URIs can
begin with any scheme prefix, and they usually define an action to take within the application and parameters for that
action.
Consider this contrived example: sms://compose/to=PI:EMAIL&message=I%20QUIT!&sendImmediately=true .
When a victim clicks such a link on a mobile device, the vulnerable SMS application will send the SMS message with
the maliciously crafted content. This could lead to
financial loss for the victim if messages are sent to premium services or
disclosure of the victim's phone number if messages are sent to predefined addresses that collect phone
numbers.
Once a URL scheme has been defined, multiple apps can register for any available scheme. For every application,
each of these custom URL schemes must be enumerated and the actions they perform must be tested.
URL schemes can be used for deep linking, a widespread and convenient way to launch a native mobile app via a
link, which isn't inherently risky. Alternatively, since Android 6 (API level 23) App links can be used. App lnks, in
contrast to deep links, require the domain of which the link is served to have a digital asset link and will ask the app to
verify the asset-link first by means of using android:autoVerify="true" in the intentfilter.
219
Android Platform APIs
Nevertheless, data that's processed by the app and comes in through URL schemes should be validated as any
content:
When using reflection-based persistence type of data processing, check the section "Testing Object Persistence"
for Android.
Using the data for queries? Make sure you make parameterized queries.
Using the data to do authenticated actions? Make sure that the user is in an authenticated state before the data is
processed.
If tampering of the data will influence the result of the calculations: add an HMAC to the data.
Static Analysis
Determine whether custom URL schemes are defined. This can be done in the AndroidManifest.xml file, inside of an
intent-filter element.
The example above specifies a new URL scheme called myapp:// . The category browsable will allow the URI to be
opened within a browser.
Data can then be transmitted through this new scheme with, for example, the following URI:
myapp://path/to/what/i/want?keyOne=valueOne&keyTwo=valueTwo . Code like the following can be used to retrieve the
data:
Intent intent = getIntent();
if (Intent.ACTION_VIEW.equals(intent.getAction())) {
Uri uri = intent.getData();
String valueOne = uri.getQueryParameter("keyOne");
String valueTwo = uri.getQueryParameter("keyTwo");
}
Verify the usage of toUri , which may also be used in this context.
Dynamic Analysis
To enumerate URL schemes within an app that can be called by a web browser, use the Drozer module
scanner.activity.browsable :
dz> run scanner.activity.browsable -a com.google.android.apps.messaging
Package: com.google.android.apps.messaging
Invocable URIs:
sms://
mms://
Classes:
com.google.android.apps.messaging.ui.conversation.LaunchConversationActivity
You can call custom URL schemes with the Drozer module app.activity.start :
dz> run app.activity.start --action android.intent.action.VIEW --data-uri "sms://0123456789"
220
Android Platform APIs
When used to call a defined schema (myapp://someaction/?var0=string&var1=string), the module may also be used to
send data to the app, as in the example below.
Intent intent = getIntent();
if (Intent.ACTION_VIEW.equals(intent.getAction())) {
Uri uri = intent.getData();
String valueOne = uri.getQueryParameter("var0");
String valueTwo = uri.getQueryParameter("var1");
}
Defining and using your own URL scheme can be risky in this situation if data is sent to the scheme from an external
party and processed in the app. Therefore keep in mind that data should be validated as described in "Testing custom
URL schemes".
Testing for insecure Configuration of Instant Apps (MSTG-ARCH-1, MSTG-
ARCH-7)
Overview
With Google Play Instant you can now create Instant apps. An instant apps can be instantly launched from a browser
or the "try now" button from the app store from Android 6 (API level 23) onward. They do not require any form of
installation. There are a few challenges with an instant app:
There is a limited amount of size you can have with an instant app (max 10 mb).
Only a reduced number of permissions can be used, which are documented at Android Instant app
documentation.
The combination of these can lead to insecure decisions, such as: stripping too much of the
authorization/authentication/confidentiality logic from an app, which allows for information leakage.
Note: Instant apps require an app-bundle. App-bundles are described in the App Bundles section.
Static Analysis
Static analysis can be either done after reverse engineering a downloaded instant app, or by analyzing the app
bundle. When you analyze the app bundle, check the Android Manifest to see whether dist:module
dist:instant="true" is set for a given module (either the base or a specific module with dist:module set). Next,
check for the various entrypoints, which entrypoints are set (by means of " /> ).
Now follow the entrypoints, like you would do for any Activity and check:
Is there any data retrieved by the app which should require privacy protection of that data? If so, are all required
controls in place?
Are all communications secured?
When you need more functionalities, are the right security controls downloaded as well?
Dynamic Analysis
There are multiple ways to start the dynamic analysis of your instant app. In all cases, you will first have to install the
support for instant apps and add the ia executable to your $PATH .
The installation of instant app support is taken care off through the following command:
$ cd path/to/android/sdk/tools/bin && ./sdkmanager 'extras;google;instantapps'
221
Android Platform APIs
Next, you have to add path/to/android/sdk/extras/google/instantapps/ia to your $PATH .
After the preparation, you can test instant apps locally on a device running Android 8.1 (API Level 27) or later. The
app can be tested in different ways:
Test the app locally: Deploy the app via Android Studio (and enable the Deploy as instant app checkbox in the
Run/Configuration dialog) or deploy the app using the following command:
$ ia run output-from-build-command 
Test the app using the Play Console:
1. Upload your app bundle to the Google Play Console
2. Prepare the uploaded bundle for a release to the internal test track.
3. Sign into an internal tester account on a device, then launch your instant experience from either an external
prepared link or via the try now button in the App store from the testers account.
Now that you can test the app, check whether:
There are any data which require privacy controls and whether these controls are in place.
All communications are sufficiently secured.
When you need more functionalities, are the right security controls downloaded as well for these functionalities?
Testing for Sensitive Functionality Exposure Through IPC (MSTG-
PLATFORM-4)
Overview
During implementation of a mobile application, developers may apply traditional techniques for IPC (such as using
shared files or network sockets). The IPC system functionality offered by mobile application platforms should be used
because it is much more mature than traditional techniques. Using IPC mechanisms with no security in mind may
cause the application to leak or expose sensitive data.
The following is a list of Android IPC Mechanisms that may expose sensitive data:
Binders
Services
Bound Services
AIDL
Intents
Content Providers
Static Analysis
We start by looking at the AndroidManifest.xml, where all activities, services, and content providers included in the
source code must be declared (otherwise the system won't recognize them and they won't run). Broadcast receivers
can be declared in the manifest or created dynamically. You will want to identify elements such as
222
Android Platform APIs
An "exported" activity, service, or content can be accessed by other apps. There are two common ways to designate a
component as exported. The obvious one is setting the export tag to true android:exported="true" . The second way
involves defining an  within the component element (  ,  ,  ). When
this is done, the export tag is automatically set to "true". To prevent all other Android apps from interacting with the
IPC component element, be sure that the android:exported="true" value and an  aren't in their
AndroidManifest.xml files unless this is necessary.
Remember that using the permission tag ( android:permission ) will also limit other applications' access to a
component. If your IPC is intended to be accessible to other applications, you can apply a security policy with the
 element and set a proper android:protectionLevel . When android:permission is used in a service
declaration, other applications must declare a corresponding  element in their own manifest to
start, stop, or bind to the service.
For more information about the content providers, please refer to the test case "Testing Whether Stored Sensitive
Data Is Exposed via IPC Mechanisms" in chapter "Testing Data Storage".
Once you identify a list of IPC mechanisms, review the source code to see whether sensitive data is leaked when the
mechanisms are used. For example, content providers can be used to access database information, and services can
be probed to see if they return data. Broadcast receivers can leak sensitive information if probed or sniffed.
In the following, we use two example apps and give examples of identifying vulnerable IPC components:
"Sieve"
"Android Insecure Bank"
Activities
Inspect the AndroidManifest
In the "Sieve" app, we find three exported activities, identified by  :
Inspect the source code
By inspecting the PWList.java activity, we see that it offers options to list all keys, add, delete, etc. If we invoke it
directly, we will be able to bypass the LoginActivity. More on this can be found in the dynamic analysis below.
Services
Inspect the AndroidManifest
In the "Sieve" app, we find two exported services, identified by  :
Inspect the source code
223
Android Platform APIs
Check the source code for the class android.app.Service :
By reversing the target application, we can see that the service AuthService provides functionality for changing the
password and PIN-protecting the target app.
public void handleMessage(Message msg) {
AuthService.this.responseHandler = msg.replyTo;
Bundle returnBundle = msg.obj;
int responseCode;
int returnVal;
switch (msg.what) {
...
case AuthService.MSG_SET /*6345*/:
if (msg.arg1 == AuthService.TYPE_KEY) /*7452*/ {
responseCode = 42;
if (AuthService.this.setKey(returnBundle.getString("com.mwr.example.sieve.PASSWORD")))
{
returnVal = 0;
} else {
returnVal = 1;
}
} else if (msg.arg1 == AuthService.TYPE_PIN) {
responseCode = 41;
if (AuthService.this.setPin(returnBundle.getString("com.mwr.example.sieve.PIN"))) {
returnVal = 0;
} else {
returnVal = 1;
}
} else {
sendUnrecognisedMessage();
return;
}
}
}
Broadcast Receivers
Inspect the AndroidManifest
In the "Android Insecure Bank" app, we find a broadcast receiver in the manifest, identified by  :
Inspect the source code
Search the source code for strings like sendBroadcast , sendOrderedBroadcast , and sendStickyBroadcast . Make sure
that the application doesn't send any sensitive data.
If an Intent is broadcasted and received within the application only, LocalBroadcastManager can be used to prevent
other apps from receiving the broadcast message. This reduces the risk of leaking sensitive information.
To understand more about what the receiver is intended to do, we have to go deeper in our static analysis and search
for usage of the class android.content.BroadcastReceiver and the Context.registerReceiver method, which is used
to dynamically create receivers.
The following extract of the target application's source code shows that the broadcast receiver triggers transmission of
an SMS message containing the user's decrypted password.
224
Android Platform APIs
public class MyBroadCastReceiver extends BroadcastReceiver {
String usernameBase64ByteString;
public static final String MYPREFS = "mySharedPreferences";
@Override
public void onReceive(Context context, Intent intent) {
// TODO Auto-generated method stub
String phn = intent.getStringExtra("phonenumber");
String newpass = intent.getStringExtra("newpass");
if (phn != null) {
try {
SharedPreferences settings = context.getSharedPreferences(MYPREFS, Context.MODE_WORLD_READABLE)
;
final String username = settings.getString("EncryptedUsername", null);
byte[] usernameBase64Byte = Base64.decode(username, Base64.DEFAULT);
usernameBase64ByteString = new String(usernameBase64Byte, "UTF-8");
final String password = settings.getString("superSecurePassword", null);
CryptoClass crypt = new CryptoClass();
String decryptedPassword = crypt.aesDeccryptedString(password);
String textPhoneno = phn.toString();