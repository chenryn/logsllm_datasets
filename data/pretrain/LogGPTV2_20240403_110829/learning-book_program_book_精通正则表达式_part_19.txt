Pattern r=Patterm.compile(*Sujbcet:（.*)",Pattern.CASg_INSENSITIVE）;
Matcher m=r.matcher（line):
if （m.find（））（
?
subject = m.group(1);
我仍然用斜体标注变量名，粗体标注正则表达式相关的元素，下画线标注正则表达式本身。
准确地说，是用下画线标注表示作为正则表达式处理的普通的字符串。
这个类说明了面向对象式处理方法，它使用Sun提供的java.util.regex包的两个类一
Pattern和Matcher。其中执行的操作有：
0检查正则表达式，将它编译为能进行不区分大小匹配的内部形式（internalform），
得到-个“Pattern”对象。
?将它与欲匹配的文本联系起来，得到一个“Matcher”对象。
应用这个正则表达式，检查之前与之建立联系的文本，是否存在匹配，返回结果。
如果存在匹配，提取第一个捕获括号内的子表达式匹配的文本。
任何使用正则表达式的语言都需要进行这些操作，或是显式的（explicitly）或是隐式的
（implicitly）。Perl隐藏了大多数细节，Java的实现方式则暴露这些细节。
函数式处理的例子。不过，Java也提供了一些函数式处理的“便捷函数（convenience
functions）”来节省工作量。用户不再需要首先声称一个正则表达式对象，然后使用该对象
的方法来操作。下面的静态函数提供了临时对象，执行完之后，这些对象就会被自动抛弃。
---
## Page 122
96
第3章：正则表达式的特性和流派概览
这个例子用来说明Pattern.matches（.·）函数：
if (!Pattern.matches("\s*",line))
//..．如果line不是空行...
）
配输入的字符事。Sun的package同时提供程序式和面向对象式的处理方式是常见的做法。
两种接口的差别在于便捷程度（程序式处理方式在完成简单任务时更容易，但处理复杂任
务则很麻烦）、功能（程序式处理方式的功能和选项通常比对应的面向对象式的要少）和效
率（在任何情况下，两类处理方式的效率都不同一一第6章详细论述这个问题）。
Sun有时也会把正则表达式整合到Java的其他部分，例如上面的例子可以使用string类的
matches功能来完成：
if (!line.matches("\s*"，）)
//...如果line不是空行...
同样，这种办法不如合理使用面向对象的程序有效率，所以不适宜在对时间要求很高的循
环中使用，但是“随手（casual）”用起来非常方便。
VB和.NET语言中的正则处理
尽管所有的正则引擎都能执行同样的基本操作，但即使是采用同样方法的各种实现方式
（implementation）提供给程序员完成的任务，以及使用服务的方式也各有不同。下面是
Dim M as Match = R.Match(line)
If M.SucceB8
subject = M.Groups(1).Value
End If
总的来说，它很类似Java的例子，只是.NET将第和第步结合为一步，第O步需要一个
确定的值。为什么会有这样的差异？两者并没有本质上的优劣之分一一只是开发人员采用
了自己当时觉得最好的方式（稍后我们会看到这点）。
---
## Page 123
正则表达式的注意事项和处理方式
97
.NET同样提供了若干程序式处理的函数。下面的代码用于判断空行：
If Not Regex.IsMatch(Line,"^\s*$")Then
·..．如果line不是空行...
End If
般的函数。Java的做法只是对核心对象的简单包装，但程序员需要使用的字符和变量更少，
而代价只是一点点性能下降。
PHP中的正则处理
下面是使用PHP的preg套件中的正则表达式函数处理Subjecti的例子，这是纯粹的函数
式方法（第10章详细介绍PHP）。
if（preg_match(·/Subject:（.)/i'，$line，$matches）)
$Subject = Smatches[1];
Python中的正则处理
最后我们来看Python中'subject的例子，Python采用的也是面向对象式的办法。
import re;
R=re.compile("SubjeCt:（.*)，re.IGNORBCASB);
****
M= R.search(line)
if M:
subject = M.group(1)
这个例子与我们之前看过的非常类似。
差异从何而来
为什么不同的语言采用不同的办法呢？可能有语言本身的原因，不过最重要的因素还是正
则软件包的开发人员的思维和技术水准。举例来说，Java有许多正则表达式包，因为这些
作者都希望提供Sun未提供的功能。每个包都有自己的强项和弱项，不过有趣的是，每个
软件包的功能设定都不一样，所以Sun最终决定自己提供正则表达式包。
另一个关于这种差异的例子是PHP，PHP包含了三种完全独立的正则引I擎，每一种都对应
一套自己的函数。PHP的开发人员在开发过程中，因为对原有的功能不满意，添加新的软
件包和对应的接口函数套件来升级PHP核心（一般认为，本书讲解的“preg”套件是最优
秀的）。
---
## Page 124
98
第3章：正则表达式的特性和流派概览
查找和替换
^Searcft-ind-ReplaceExample
“Subject”的例子太简单，还不足以说明3种方法之间的差异。在本节我们将看到更复杂
的例子，它进一步揭示了不同处理方式在设计上的差异。
在前一章，我们看到了在Perl中利用查找和替换将E-mail地址转换为超链接的例子（73）：
Stext =~ 8{
\b
#把捕获的地址保存到S1.·
\w[-.\w] *
#username
[-\w]+(\. [-\w]+) *\.(com|edu|info)#hostname
）
\b
}{$1)gix;
Perl的查找和替换操作符是“原地生效”的，也就是说，替换会在目标变量上进行。其他大
多数语言的替换都是在目标文本的副本上进行的。如果不需要修改原变量，这样操作就很
方便，不过如果需要修改原变量，就得把替换结果回传给原变量。下面给出了一些例子。
Java中的查找和替换
下面是使用Sun提供的java.util.regex进行查找-替换的例子：
importjava.util.regex.*；//一次性导入所有需要用到的类
Pattern r=Pattern.compile(
"\\b
\n"+
"#把捕获的地址保存到S1.·
\n*+
\n* +
*\\w[-.\\w] *
# username
\n"+
@
\n*+
[-1\w]+(\\.[-\\w]+)*\\.(comledu1info)
#hostname
\n"+
“)
\n*+
\\b
In".
Pattern.CASB_INSBNSITIVE|Pattern.COMMENTS);
Matcher m=r.matcher（text);
text = m.replaceAll(*$1*);
请注意，字符串中的每个“’都必须转义为“\，所以，如果我们像本例中一样用文本
字符串来生成正则表达式，\w就必须写成‘\\w'。在调试时，System.out.println（r.
pattern（））可以显示正则函数确切接收到的正则表达式。我在这个正则表达式中包括换行
符的原因是，这样看起来很清楚。另一个原因是，每个#引入一段注释，直到该行结束，所
以，为了约束注释，必须设定某些换行符。
---
## Page 125
正则表达式的注意事项和处理方式
99
Perl使用/g、/i、/x之类的符号来表示特殊的条件（这些修饰符分别代表全局替换、不区
分大小写和宽松排列模式?135），java.util.regex则使用不同的函数（replaceAl1而不
是replace)，以及给函数传递不同的标志位（flag）参数（例如Pattern.CASE_INSENSITIVE
和Pattern.COMMENTS）来实现。
VB.NET中的查找和替换
VB.NET的程序与Java的类似：
Dim R As Regex = New Regex_
（"\b
"（?#将捕获的地址保存到S1...）
" (
"\w[-.\w]*
(?#username)
"@
"[-\w]+(\.[-\w]+) *\.(comledu|info）(?#hostname)
&
")
*&
"\b
text =R.Replace(text,"$(1)")
因为VB.NET的字符串文字（literal）不便于操作（它们不能跨越多行，也很难在其中加人
换行符），长一点的正则表达式使用起来不如其他语言方便。另一方面，因为‘'不是VB.NET
中的字符串的元字符，这个表达式看起来要更清楚些。双引I号是VB.NET字符串中的元字
符，为了表示这个字符，我们必须使用两个紧挨着的双引号。
PHP中的查找和替换
下面是PHP中的查找和替换的例子：
Stext =preg_replace（'{
\b
#把捕获的地址保存到S1..
(
\w[-.\w] *
username
[-\w} +(\. [-\w] +) *\ . (com|eduIinfo)
#hostname
）
\b
)ix',
'$1'，#replacement 字将事
stext);
就像Java和VB.NET一样，查找和替换操作的结果必须回传给Stext，除去这一点，这个
例子和Perl的很相似。
---
## Page 126
100
第3章：正则表达式的特性和流派概览
其他语言中的查找和替换
Senrch and Replace in Other Languages
下面我们简要看看其他传统工具软件和语言中查找和替换的例子。
Awk
Awk使用的是集成式处理方法，/regex/，来匹配当前的输入行，使用“var～”来匹配
其他数据。你可以在Perl中看到这种匹配表示法的影子（不过，Perl的替换操作符模仿的
是sed)。Awk的早期版本不支持正则表达式替换，不过现在的版本提供了sub（）操作符。
sub(/mizpel/, "misspell")
它会把正则表达式'mizpel应用到当前行，将第一个匹配替换为misspe1。请注意，在
Perl（和sed）中的对应做法是8/mizpel/mi88pel1/。
如果要对该行的所有匹配文本进行替换，Awk使用的不是/g修饰符，而是另一个运算符：
Tcl
Tcl采用的是程序式处理方法，对不熟悉Tcl引I用惯例（quotingconventions）的人来说可能
很迷惑。如果我们要在TcI中修正错误的拼写，可以这样：
regeubmizpel,$varmisspellnewvar
它会检查变量var中的字符串，把'mizpel的第一处匹配替换为misspell，把替换后的字
符串存人变量newvar（这个变量并没有以s开头）。Tcl接收的第一个参数是正则表达式，
第二个参数是目标字符串，第三个是replacement字符事，第四个是目标变量的名字。Tcl
的regsub同样可以接收可能出现的标志位，例如-a11用来进行全局替换，而不是只替换
第一处匹配文本。
regeub-allmizpel,$var misspellnewvar
同样，-nocase选项告诉正则引l擎进行不区分大小写的匹配（它等于egrep的-i参数，或
者Perl的/i修饰符)。
GNUEmacs
GNUEmacs（下文中简称Emacs）是功能强大的文本编辑器，它可以使用elisp（Emacslisp）
作为内建的编程语言。它提供了正则表达式的程序式处理接口，以及数量众多的函数来提
供各种服务。其中主要的一种是“正则表达式搜索-前进（re-search-forward)”，接收参
数为普通字符串，将它作为正则表达式来处理。然后从文本的“当前位置”开始搜索，直
---
## Page 127
字符串，字符编码和匹配模式
101
到第一处匹配发生，或者如果没有匹配，就一直前进到字符申的末尾（用户调用编辑器的
“正则表达式搜索（regexpsearch）”的功能时，就会执行re-search-forward）。
如表3-3（92）所示，Emacs所属的正则流派严重依赖反斜线。例如，\]+>\)+\1\>是查找重复单词的表达式，可以用来解决第1章的问题。但
我们不能直接使用这个正则表达式，因为Emacs的正则引擎不能识别\t和\n。不过Emacs
中的双引号字符串则可以，它会把这些标记转换为我们需要的制表符和换行符，传给正则
引擎。在使用普通字符事提交正则表达式时，非常有用。但其缺陷一一尤其是elisp的正则
表达式的缺陷一一在于，此流派过分依赖反斜线了，最终得到的正则表达式好像插满了牙
签。下面是查找下一组重复单词的函数：
(defun FindNextDbl()
(re-search-forward-]+>1\)+\\1\1>)
，
x+Control-d”来迅速查找重复单词了。
注意事项和处理方式：小结
Careand Handling:Summary
我们已经看到，函数很多，内部的机制也很多。如果你不熟悉这些语言，可能现在还有些
困惑。不过请不必担心。学习任何特定的工具软件都比学习原理要容易。
字符串，字符编码和匹配模式
Strings,CharacterEncodings,andModes
串，字符编码和匹配模式。
这些概念并不复杂，在理论和实践中都是如此。不过，对其中的大多数来说，因为各种实
现方式之间存在细小差异，我们很难预先知道它们准确的实际使用方式。下一节涵盖了若
干你将面对的常见向题，以及一些复杂的同题。
作为正则表达式的字符串
Strings asRegularExpressions
这个概念并不复杂：对除Perl、awk、sed之外的大多数语言来说，正则引擎接收的是以普