title:RoleVAT: Visual Assessment of Practical Need for Role Based Access
Control
author:Dana Zhang and
Kotagiri Ramamohanarao and
Steven Versteeg and
Rui Zhang
2009 Annual Computer Security Applications Conference
RoleVAT: Visual Assessment of Practical Need for Role Based Access Control
Dana Zhang
Kotagiri Ramamohanarao
Steven Versteeg
Rui Zhang
The University of Melbourne
PI:EMAIL
The University of Melbourne
CA Inc
The University of Melbourne
PI:EMAIL
PI:EMAIL
PI:EMAIL
Abstract—Role based access control (RBAC) is a powerful
security administration concept that can simplify permission
assignment management. Migration to and maintenance of
RBAC requires role engineering, the identiﬁcation of a set of
roles that offer administrative beneﬁt. However, establishing
that RBAC is desirable in a given enterprise is lacking in cur-
rent role engineering processes. To help identify the practical
need for RBAC, we propose RoleVAT, a Role engineering tool
for the Visual Assessment of user and permission Tendencies.
User and permission clusters can be visually identiﬁed as
potential user groups or roles. The beneﬁt and impact of this
visual analysis in enterprise environments is discussed and
demonstrated through testing on real life as well as synthetic
datasets. Our experimental results show the effectiveness of
RoleVAT as well as interesting user and role tendencies in real
enterprise environments.
I. INTRODUCTION
Role-based access control (RBAC) is an efﬁcient and
ﬂexible model for controlling computer resource access and
enforcing organizational policies [1], [2]. In this security
administration model, permissions are assigned to roles
and roles are assigned to users. The additional layer of
abstraction simpliﬁes system administration and enhances
security policy enforcement.
Deployment as well as maintenance of RBAC requires
role engineering [3], the deﬁnition of a set of roles that
accurately reﬂect the needs of the enterprise. Recent works
have used role mining,
the application of data mining
techniques for automated and semi-automated approaches
for role engineering [4], [5], [6], [7], [8]. Techniques that
have been used include latticed based pattern search, pattern
mining and graph representation for cost analysis. Funda-
mentally, all these role mining approaches use clusters of
permissions to form roles.
A major problem in clustering is the assessment of cluster
tendency, i.e., how many clusters to seek? Tendency analysis
is an important ﬁrst step prior to pattern extraction where
input data is examined to see if clusters can be formed [9],
[10], [11], [12]. In application to role mining, this means
knowing if role clusters exist, the number of roles that are
expected if role clusters do exist and how distinctive these
roles are. If roles cannot be formed, RBAC may not be
practical in the given enterprise. A good result cannot be
expected from role mining if role tendencies do not exist
in the data. If roles can exist, the number of roles can be
determined in advance and how many roles to search for is
known. Tendency analysis can also determine distinctiveness
of the roles; if roles are highly correlated and if roles contain
overlapping permissions.
However, existing role mining approaches do not analyse
role tendency. While the effect of different role quantities
have been analysed in practice [13], there is currently no
methodology for determining the best role quantity. If all
permissions are very similar, only one role can be gener-
ated. This can occur when all users have been assigned
the same permissions, allowable with the loosest possible
administration reinforcement when everyone has all possible
permissions. If all permission assignments are very distinct
and too many roles are possible, implementation of RBAC
may not be considered practical.
This can occur if no two users share responsibilities and
each user performs a unique job functionality. In these situa-
tions, too few or too many roles are generated. While it may
still be desirable to implement RBAC for the other beneﬁts
that roles can provide (adherence to policy, separation of
duty constraints), role mining techniques may not be able to
extract efﬁcient roles.
Another important step in pattern or cluster analysis is to
determine the number of clusters or patterns. In relation to
role engineering, this is the determination of the role quan-
tity. Identifying role quantity before the role engineering
process is of great beneﬁt for existing role mining methods
and when deciding if RBAC can be beneﬁcial.
Existing approaches also face limitations when the size
of the data becomes too large. Cluster tendency analysis of
users can identify if user groups exist, allowing for partition-
ing of permission data so a divide and conquer approach to
role engineering can be deployed. Data partitioning of users
into groups and role tendency analysis would complement
existing approaches.
To address these issues, this research proposes RoleVAT, a
Role engineering tool for the Visual Assessment of user and
permission Tendencies. RoleVAT produces intensity images
that represent the natural groupings of users and permissions.
Permission similarity images show role tendencies and user
similarity images show possible data partitioning. This vi-
sual assessment of permission clusters allow for immediate
identiﬁcation of the practical need for RBAC. RoleVAT is a
preprocessing tool to assist role mining techniques, capable
1063-9527/09 $26.00 © 2009 IEEE
DOI 10.1109/ACSAC.2009.11
13
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:07:07 UTC from IEEE Xplore.  Restrictions apply. 
of determining if roles can be identiﬁed, how many roles
can be identiﬁed and if the user permission data can be
partitioned.
This paper is organised as follows. Section II will discuss
related work and motivation for our research. We introduce
RoleVAT in Section III and test the approach in Section IV.
Section V discusses our ﬁndings and we conclude in Sec-
tion VI.
II. RELATED WORK
An essential task for practical implementations of RBAC
is role engineering, the deﬁnition of a set of roles that is
complete, correct and efﬁcient. Coyne [3] was the ﬁrst to
motivate such a task and subsequent methods have used both
manual elicitation and automated methods.
Initial user driven techniques for role engineering, termed
top-down role engineering have used job functionalities,
documented processes, usage scenarios as well as use cases
to determine access rights [14], [15], [16]. However, manual
derivation of roles requires large amounts of user input
before effective roles can be deﬁned. Manual elicitation is
time consuming, costly and prone to errors.
To assist top-down role engineering, both research and
practice have turned to bottom-up role engineering that
analyses existing user permission assignments for automated
role extraction. These role recommendations can then be
used to assist the ﬁnal design of the RBAC system.
The majority of bottom up approaches have used role
mining: the application of data mining techniques for role
deﬁnition [6]. Theoretical analysis by Vaidya et al. [17] and
Lu et al. [18] show the problem of ﬁnding the minimal
set of descriptive roles and relationships without disturb-
ing permission assignments and their variations are NP-
complete. Ene et al. [19] show the problems are also hard to
approximate. As a result, heuristics and greedy approaches
for role extraction currently offer the best solutions to the
role mining problem. Majority of these methods have used
clustering [7], [20], with more recent works focusing on
latticed based clustering. Colantonio et al. and Malloy et al.
generate lattices of all possible permission clusters as roles
and prune roles according to a cost metric [4], [5], [21].
Zhang et al. builds a lattice of permission clusters using a
cost metric, each cluster identiﬁed as a role using frequent
pattern extraction [8].
Graph mining approaches for automated role extraction
have also been proposed. Zhang et al. [13] and Ene et
al. [19] place users, permissions and their relationships into
a cost graph as nodes and edges respectively. Zhang et al.’s
heuristic inserts role nodes between users and permissions
and merge roles if doing so reduces the cost of the graph
structure. Ene et al. uses heuristics and graph theory to
reduce the graph representations to ﬁnd roles.
These approaches do not analyse the trends of the roles
before the application of clustering; there is currently no role
tendency analysis to establish the practical need for RBAC.
III. ROLEVAT
Analysing cluster tendency is a challenging problem in
data mining [12]. It is a step prior to actual clustering to
determine if clusters exist. In application to role engineering,
role cluster tendency analysis can be used to determine
practical need for RBAC. Cluster tendency analysis can be
performed on both users and permissions for the assessment
of user groups and roles respectively.
A technique that exists in data mining for the Visual
Assessment of cluster Tendency is VAT [9], [10], [11], [22],
an approach that analyses cluster tendency using ordered
dissimilarity images. VAT requires pairwise dissimilarity
values between objects and reorders the values in a square
matrix. An intensity image representation of the matrix
shows clusters as dark block structures along the diagonal.
Further analysis and proof of concept of original VAT can
be found in [9].
To use VAT for role engineering, we propose RoleVAT,
a Role engineering tool for the Visual Assessment of user
and permission Tendencies to establish practical need for
RBAC. RoleVAT can be used on both users and permissions
given the user permission assignments of an enterprise.
User dissimilarity can be measured using user’s permission
assignments and can show organisational units and user
partitions. Permission dissimilarity can be measured using
the users that have been assigned a particular permission,
revealing permission cluster tendencies, role quantity and
distinctiveness.
Section III-B will describe the RoleVAT algorithm and
how to compute the required dissimilarity matrices and im-
ages for RBAC. To demonstrate the algorithm, Section III-C
will present a running example of the algorithm. As a pream-
ble, Section III-A will introduce the RBAC terminology that
will be used throughout the rest of the paper.
A. Preliminaries
The following concepts have been proposed by the Na-
tional Institute of Standards and Technology (NIST) for
RBAC [2]:
• USERS, ROLES and PRMS, the set of users, roles and
permissions respectively where permissions represent
allowable operations on objects within the system.
• UA ⊆ USERS × ROLES, a many to many mapping of
user to role assignments.
• PA ⊆ PRMS × ROLES, a many to many mapping of
permission to role assignments.
• UserPermissions(u), the set of all permissions a given
user gets through his or her roles.
To analyse the tendency of ROLES and USERS par-
titions using RoleVAT, we focus on UP ⊆ USERS ×
PRMS,
the underlying many to many mapping of user
14
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:07:07 UTC from IEEE Xplore.  Restrictions apply. 
Algorithm 1: RoleVAT - Role engineering tool for
Visual Analysis of cluster Tendency
of methods and substituted in line 4. For our approach, the
following measure is used.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
Require: multiset of user or permission sets {S}
begin
// Generate Dissimilarity Matrix
D = [dij]
for each set Si in {S} do
for each permission set Sj in {S} do
measure dissimilarity of Si with every Sj
place similarity measure of Si and Sj in dij of
matrix D
end
end
// Reorder Dissimilarity Matrix D = [dij]
to produce D′ = [d′
ij]
Set I = ∅, J = {1, 2, . . . , |{S}|}, P = (0, 0, . . . , 0)
Select (i, j) of largest dxy where x ∈ J and y ∈ J
Set P (1) = i, add i to I, remove i from J
for p = 2, 3, . . . , |{S}| do
Select (i, j) of smallest dxy in D where x ∈ I and
y ∈ J
Set P (p) = j, add j to I, remove j from J
end
D′ = [d′ij] = [dP (i)P (j)]
// Create intensity image
output D′ to as an intensity image I(D′) - each d′
ij
represents a pixel iij in the grayscale image
17
end
to permission assignments. UP can be represented using
{UserPermissions(u)} and {PermissionUsers(p)}, the multi-
set of permissions assigned to users and the multiset of users
that has been assigned a particular permission respectively.
B. Algorithm
to
identify
user
group
clusters
required
required for
Algorithm 1 describes RoleVAT. RoleVAT requires
either {UserPermissions(u)},
the multiset of permission
assignments for users or {PermissionUsers(p)}, the multiset
of user assignments for permissions. {UserPermissions(u)}
is
and
{PermissionUsers(p)} is
the analysis of
role tendency. Since RoleVAT can be performed on either
of these attribute sets, the initial input will be denoted {S}.
Given the multiset {S}, RoleVAT can be understood in
three components. The ﬁrst part of RoleVAT produces D,
a matrix containing dissimilarity measures of every pair of
items in the multiset (lines 2–7). The second part of the
algorithm reorders D to place similar items closer to each
other in a matrix (lines 8–15). Finally, the reordered matrix
D′ is output as grayscale image I(D′) (line 16).
The ﬁrst part of RoleVAT creates the initial dissimilarity
matrix (Lines 2–7). Line 4 requires a dissimilarity measure
between users or permissions. Since users are represented
by permission sets and permissions can be described using
user sets, a measure of set dissimilarity can be used. User
and permission dissimilarity can be computed using a variety
15
dis(Si, Sj) = 1 −
|Si ∩ Sj|
|Si ∪ Sj|
(1)
This measure is based on the Jaccard co-efﬁcient [23], a
statistical similarity measure where 0 ≤ |Si∩Sj |
|Si∪Sj | ≤ 1, and 0
implies no similarity between Si and Sj, and 1 represents an
exact match between Si and Sj. Using this, dissimilarity can
be measured using Equation 1, where 0 ≤ dis(Si, Sj) ≤ 1,
and 1 implies no similarity between Si and Sj, and a 0
implies Si and Sj are the same. Each dissimilarity measure
between Si and Sj are placed into dij of matrix D in
line 5. This measure was chosen due to its effectiveness
for set comparison. A similarity distance between individual
permissions is not required and every set can be compared
to every other set without additional pre-processing.
The second part of RoleVAT produces D′, the reordered
D where similar sets are placed next to each other in the
matrix (lines 8–15). This can also be performed using a
number of methods. In this approach, we have used the
original VAT reordering method: a greedy approach that
starts with the most dissimilar object and continuously
places the next most similar in the next position of the matrix
until all values are reordered [9], [11].
To assist with the reordering, line 8 initialises I, J and P
to be the collection of sorted matrix indices, the collection
of unsorted matrix indices and the new positions of dij
respectively. The ﬁrst step of the reordering is to select
the most dissimilar object in S, chosen as the column or
row with the largest dij in D (line 9). This index is placed
as the ﬁrst position in P , added to the sorted indices I
and removed from the unsorted indices J (line 10). This
is the most costly component of RoleVAT and a straight
forward implementation of the algorithm has complexity
O(n3) where n is the number of permissions or users
(|{S}|). However, RoleVAT reordering can be implemented
in O(n2) by keeping a cache of the previous iteration’s
minimum distances between each element in J and the set
of already ordered elements, I.
The next step of the reordering is to choose an object in
J that is most similar to the objects in I (line 12). After this
item is found, the index is placed into the next position in P ,
the index is added to I and removed from J in line 13. This
step is repeated until all the indices have been reordered
(lines 11–14). Line 15 produces D′ using the reordered
positions stored in P .
Finally,