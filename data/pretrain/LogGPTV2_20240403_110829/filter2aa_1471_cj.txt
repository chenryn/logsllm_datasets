\Windows\system32\config path of the boot partition.
HKLM\SOFTWARE is where Windows stores systemwide configuration
information not needed to boot the system. Also, third-party applications
store their systemwide settings here, such as paths to application files and
directories and licensing and expiration date information.
HKLM\SYSTEM contains the systemwide configuration information
needed to boot the system, such as which device drivers to load and which
services to start. The key is backed by the SYSTEM hive file located in
\Windows\system32\config. The Windows Loader uses registry services
provided by the Boot Library for being able to read and navigate through the
SYSTEM hive.
HKEY_CURRENT_CONFIG
HKEY_CURRENT_CONFIG is just a link to the current hardware profile,
stored under HKLM\SYSTEM\CurrentControlSet\Hardware Profiles\Current.
Hardware profiles are no longer supported in Windows, but the key still
exists to support legacy applications that might depend on its presence.
HKEY_PERFORMANCE_DATA and
HKEY_PERFORMANCE_TEXT
The registry is the mechanism used to access performance counter values on
Windows, whether those are from operating system components or server
applications. One of the side benefits of providing access to the performance
counters via the registry is that remote performance monitoring works “for
free” because the registry is easily accessible remotely through the normal
registry APIs.
You can access the registry performance counter information directly by
opening a special key named HKEY_PERFORMANCE_DATA and querying
values beneath it. You won’t find this key by looking in the Registry Editor;
this key is available only programmatically through the Windows registry
functions, such as RegQueryValueEx. Performance information isn’t actually
stored in the registry; the registry functions redirect access under this key to
live performance information obtained from performance data providers.
The HKEY_PERFORMANCE_TEXT is another special key used to obtain
performance counter information (usually name and description). You can
obtain the name of any performance counter by querying data from the
special Counter registry value. The Help special registry value yields all the
counters description instead. The information returned by the special key are
in US English. The HKEY_PERFORMANCE_NLSTEXT retrieves
performance counters names and descriptions in the language in which the
OS runs.
You can also access performance counter information by using the
Performance Data Helper (PDH) functions available through the
Performance Data Helper API (Pdh.dll). Figure 10-2 shows the components
involved in accessing performance counter information.
Figure 10-2 Registry performance counter architecture.
As shown in Figure 10-2, this registry key is abstracted by the
Performance Library (Perflib), which is statically linked in Advapi32.dll. The
Windows kernel has no knowledge about the
HKEY_PERFORMANCE_DATA registry key, which explains why it is not
shown in the Registry Editor.
Application hives
Applications are normally able to read and write data from the global
registry. When an application opens a registry key, the Windows kernel
performs an access check verification against the access token of its process
(or thread in case the thread is impersonating; see Chapter 7 in Part 1 for
more details) and the ACL that a particular key contains. An application is
also able to load and save registry hives by using the RegSaveKeyEx and
RegLoadKeyEx APIs. In those scenarios, the application operates on data that
other processes running at a higher or same privilege level can interfere with.
Furthermore, for loading and saving hives, the application needs to enable the
Backup and Restore privileges. The two privileges are granted only to
processes that run with an administrative account.
Clearly this was a limitation for most applications that want to access a
private repository for storing their own settings. Windows 7 has introduced
the concept of application hives. An application hive is a standard hive file
(which is linked to the proper log files) that can be mounted visible only to
the application that requested it. A developer can create a base hive file by
using the RegSaveKeyEx API (which exports the content of a regular registry
key in an hive file). The application can then mount the hive privately using
the RegLoadAppKey function (specifying the REG_PROCESS_APPKEY flag
prevents other applications from accessing the same hive). Internally, the
function performs the following operations:
1. 
Creates a random GUID and assigns it to a private namespace, in the
form of \Registry\A\. (\Registry forms the NT kernel
registry namespace, described in the “The registry namespace and
operation” section later in this chapter.)
2. 
Converts the DOS path of the specified hive file name in NT format
and calls the NtLoadKeyEx native API with the proper set of
parameters.
The NtLoadKeyEx function calls the regular registry callbacks. However,
when it detects that the hive is an application hive, it uses CmLoadAppKey to
load it (and its associated log files) in the private namespace, which is not
enumerable by any other application and is tied to the lifetime of the calling
process. (The hive and log files are still mapped in the “registry process,”
though. The registry process will be described in the “Startup and registry
process” section later in this chapter.) The application can use standard
registry APIs to read and write its own private settings, which will be stored
in the application hive. The hive will be automatically unloaded when the
application exits or when the last handle to the key is closed.
Application hives are used by different Windows components, like the
Application Compatibility telemetry agent (CompatTelRunner.exe) and the
Modern Application Model. Universal Windows Platform (UWP)
applications use application hives for storing information of WinRT classes
that can be instantiated and are private for the application. The hive is stored
in a file called ActivationStore.dat and is consumed primarily by the
Activation Manager when an application is launched (or more precisely, is
“activated”). The Background Infrastructure component of the Modern
Application Model uses the data stored in the hive for storing background
tasks information. In that way, when a background task timer elapses, it
knows exactly in which application library the task’s code resides (and the
activation type and threading model).
Furthermore, the modern application stack provides to UWP developers
the concept of Application Data containers, which can be used for storing
settings that can be local to the device in which the application runs (in this
case, the data container is called local) or can be automatically shared
between all the user’s devices that the application is installed on. Both kinds
of containers are implemented in the Windows.Storage.ApplicationData.dll
WinRT library, which uses an application hive, local to the application (the
backing file is called settings.dat), to store the settings created by the UWP
application.
Both the settings.dat and the ActivationStore.dat hive files are created by
the Modern Application Model’s Deployment process (at app-installation
time), which is covered extensively in Chapter 8, “System mechanisms,”
(with a general discussion of packaged applications). The Application Data
containers are documented at https://docs.microsoft.com/en-
us/windows/uwp/get-started/settings-learning-track.
Transactional Registry (TxR)
Thanks to the Kernel Transaction Manager (KTM; for more information see
the section about the KTM in Chapter 8), developers have access to a
straightforward API that allows them to implement robust error-recovery
capabilities when performing registry operations, which can be linked with
nonregistry operations, such as file or database operations.
Three APIs support transactional modification of the registry:
RegCreateKeyTransacted, RegOpenKeyTransacted, and
RegDeleteKeyTransacted. These new routines take the same parameters as
their nontransacted analogs except that a new transaction handle parameter is
added. A developer supplies this handle after calling the KTM function
CreateTransaction.
After a transacted create or open operation, all subsequent registry
operations—such as creating, deleting, or modifying values inside the key—
will also be transacted. However, operations on the subkeys of a transacted
key will not be automatically transacted, which is why the third API,
RegDeleteKeyTransacted exists. It allows the transacted deletion of subkeys,
which RegDeleteKeyEx would not normally do.
Data for these transacted operations is written to log files using the
common logging file system (CLFS) services, similar to other KTM
operations. Until the transaction is committed or rolled back (both of which
might happen programmatically or as a result of a power failure or system
crash, depending on the state of the transaction), the keys, values, and other
registry modifications performed with the transaction handle will not be
visible to external applications through the nontransacted APIs. Also,
transactions are isolated from each other; modifications made inside one
transaction will not be visible from inside other transactions or outside the
transaction until the transaction is committed.
 Note
A nontransactional writer will abort a transaction in case of conflict—for
example, if a value was created inside a transaction and later, while the
transaction is still active, a nontransactional writer tries to create a value
under the same key. The nontransactional operation will succeed, and all
operations in the conflicting transaction will be aborted.
The isolation level (the “I” in ACID) implemented by TxR resource
managers is read-commit, which means that changes become available to
other readers (transacted or not) immediately after being committed. This
mechanism is important for people who are familiar with transactions in
databases, where the isolation level is predictable-reads (or cursor-stability,
as it is called in database literature). With a predictable-reads isolation level,
after you read a value inside a transaction, subsequent reads returns the same
data. Read-commit does not make this guarantee. One of the consequences is
that registry transactions can’t be used for “atomic” increment/decrement
operations on a registry value.
To make permanent changes to the registry, the application that has been
using the transaction handle must call the KTM function CommitTransaction.
(If the application decides to undo the changes, such as during a failure path,
it can call the RollbackTransaction API.) The changes are then visible
through the regular registry APIs as well.
 Note
If a transaction handle created with CreateTransaction is closed before
the transaction is committed (and there are no other handles open to that
transaction), the system rolls back that transaction.
Apart from using the CLFS support provided by the KTM, TxR also stores
its own internal log files in the %SystemRoot%\System32\Config\Txr folder
on the system volume; these files have a .regtrans-ms extension and are
hidden by default. There is a global registry resource manager (RM) that
services all the hives mounted at boot time. For every hive that is mounted
explicitly, an RM is created. For applications that use registry transactions,
the creation of an RM is transparent because KTM ensures that all RMs
taking part in the same transaction are coordinated in the two-phase
commit/abort protocol. For the global registry RM, the CLFS log files are
stored, as mentioned earlier, inside System32\Config\Txr. For other hives,
they are stored alongside the hive (in the same directory). They are hidden
and follow the same naming convention, ending in .regtrans-ms. The log file
names are prefixed with the name of the hive to which they correspond.
Monitoring registry activity
Because the system and applications depend so heavily on configuration
settings to guide their behavior, system and application failures can result
from changing registry data or security. When the system or an application
fails to read settings that it assumes it will always be able to access, it might
not function properly, display error messages that hide the root cause, or even
crash. It’s virtually impossible to know what registry keys or values are
misconfigured without understanding how the system or the application that’s
failing is accessing the registry. In such situations, the Process Monitor utility
from Windows Sysinternals (https://docs.microsoft.com/en-us/sysinternals/)
might provide the answer.
Process Monitor lets you monitor registry activity as it occurs. For each
registry access, Process Monitor shows you the process that performed the
access; the time, type, and result of the access; and the stack of the thread at
the moment of the access. This information is useful for seeing how
applications and the system rely on the registry, discovering where
applications and the system store configuration settings, and troubleshooting
problems related to applications having missing registry keys or values.
Process Monitor includes advanced filtering and highlighting so that you can
zoom in on activity related to specific keys or values or to the activity of
particular processes.
Process Monitor internals
Process Monitor relies on a device driver that it extracts from its executable
image at runtime before starting it. Its first execution requires that the account
running it has the Load Driver privilege as well as the Debug privilege;
subsequent executions in the same boot session require only the Debug
privilege because, once loaded, the driver remains resident.
EXPERIMENT: Viewing registry activity on an idle
system
Because the registry implements the RegNotifyChangeKey function
that applications can use to request notification of registry changes
without polling for them, when you launch Process Monitor on a
system that’s idle you should not see repetitive accesses to the same
registry keys or values. Any such activity identifies a poorly written
application that unnecessarily negatively affects a system’s overall
performance.
Run Process Monitor, make sure that only the Show Registry
Activity icon is enabled in the toolbar (with the goal to remove
noise generated by the File system, network, and processes or
threads) and, after several seconds, examine the output log to see
whether you can spot polling behavior. Right-click an output line
associated with polling and then choose Process Properties from
the context menu to view details about the process performing the
activity.
EXPERIMENT: Using Process Monitor to locate
application registry settings
In some troubleshooting scenarios, you might need to determine
where in the registry the system or an application stores particular
settings. This experiment has you use Process Monitor to discover
the location of Notepad’s settings. Notepad, like most Windows
applications, saves user preferences—such as word-wrap mode,
font and font size, and window position—across executions. By
having Process Monitor watching when Notepad reads or writes its
settings, you can identify the registry key in which the settings are
stored. Here are the steps for doing this:
1. 
Have Notepad save a setting you can easily search for in a
Process Monitor trace. You can do this by running Notepad,
setting the font to Times New Roman, and then exiting
Notepad.
2. 
Run Process Monitor. Open the filter dialog box and the
Process Name filter, and type notepad.exe as the string to
match. Confirm by clicking the Add button. This step
specifies that Process Monitor will log only activity by the
notepad.exe process.
3. 
Run Notepad again, and after it has launched, stop Process
Monitor’s event capture by toggling Capture Events on the
Process Monitor File menu.
4. 
Scroll to the top line of the resultant log and select it.
5. 
Press Ctrl+F to open a Find dialog box, and search for
times new. Process Monitor should highlight a line like the
one shown in the following screen that represents Notepad
reading the font value from the registry. Other operations in
the immediate vicinity should relate to other Notepad
settings.
6. 
Right-click the highlighted line and click Jump To. Process
Monitor starts Regedit (if it’s not already running) and
causes it to navigate to and select the Notepad-referenced
registry value.
Registry internals
This section describes how the configuration manager—the executive
subsystem that implements the registry—organizes the registry’s on-disk
files. We’ll examine how the configuration manager manages the registry as
applications and other operating system components read and change registry
keys and values. We’ll also discuss the mechanisms by which the
configuration manager tries to ensure that the registry is always in a
recoverable state, even if the system crashes while the registry is being
modified.
Hives
On disk, the registry isn’t simply one large file but rather a set of discrete
files called hives. Each hive contains a registry tree, which has a key that
serves as the root or starting point of the tree. Subkeys and their values reside
beneath the root. You might think that the root keys displayed by the Registry
Editor correlate to the root keys in the hives, but such is not the case. Table
10-5 lists registry hives and their on-disk file names. The path names of all
hives except for user profiles are coded into the configuration manager. As
the configuration manager loads hives, including system profiles, it notes
each hive’s path in the values under the
HKLM\SYSTEM\CurrentControlSet\Control\Hivelist subkey, removing the
path if the hive is unloaded. It creates the root keys, linking these hives
together to build the registry structure you’re familiar with and that the
Registry Editor displays.
Table 10-5 On-disk files corresponding to paths in the registry
Hive Registry Path
Hive File Path
HKEY_LOCAL_MA
CHINE\BCD0000000
0
\EFI\Microsoft\Boot
HKEY_LOCAL_MA
CHINE\COMPONEN
TS
%SystemRoot%\System32\Config\Component
s
HKEY_LOCAL_MA
CHINE\SYSTEM
%SystemRoot%\System32\Config\System
HKEY_LOCAL_MA
CHINE\SAM
%SystemRoot%\System32\Config\Sam
HKEY_LOCAL_MA
%SystemRoot%\System32\Config\Security
CHINE\SECURITY
HKEY_LOCAL_MA
CHINE\SOFTWARE
%SystemRoot%\System32\Config\Software
HKEY_LOCAL_MA
CHINE\HARDWARE
Volatile hive
\HKEY_LOCAL_MA
CHINE\WindowsApp
LockerCache
%SystemRoot%\System32\AppLocker\AppCa
che.dat
HKEY_LOCAL_MA
CHINE\ELAM
%SystemRoot%\System32\Config\Elam
HKEY_USERS\
%SystemRoot%\ServiceProfiles\LocalService\
Ntuser.dat
HKEY_USERS\
%SystemRoot%\ServiceProfiles\NetworkServi
ce\NtUser.dat
HKEY_USERS\
\Users\\Ntuser.dat
HKEY_USERS\_Classes
\Users\
\AppData\Local\Microsoft\Windo
ws\Usrclass.dat
HKEY_USERS\.DEF
AULT
%SystemRoot%\System32\Config\Default
Virtualized 
HKEY_LOCAL_MA
Different paths. Usually
CHINE\SOFTWARE
\ProgramData\Packages\\
\SystemAppData\Helium\Cache\
.dat for Centennial
Virtualized 
HKEY_CURRENT_U
SER
Different paths. Usually
\ProgramData\Packages\\
\SystemAppData\Helium\User.dat 
for Centennial
Virtualized 
HKEY_LOCAL_MA