现在是指出我们在没有创建或使用 Docker 容器的情况下创建这些卷的好时机。这表明 Docker 卷超出了正常容器联合文件系统的范围。
我们在 [第 3 章](3.html)*创建 Docker 映像*中看到，我们也可以使用容器运行命令上的参数或者通过在 Dockerfile 中添加`VOLUME`指令来创建卷。如您所料，您可以通过使用容器运行参数，即`--mount`参数，将使用 Docker `volume create`命令预先创建的卷装入容器，例如，如下所示:
```
# mount a pre-created volume with --mount parameter
docker container run --rm -d \
--mount source=my-vol-02,target=/myvol \
--name vol-demo2 \
volume-demo2:1.0 tail -f /dev/null
```
本示例将运行一个新的容器，该容器将装载名为`my-vol-02`的现有卷。它将在`/myvol`处将该体积安装在容器中。请注意，前面的示例也可以在没有预先创建`my-vol-02:volume`的情况下运行，并且使用`--mount`参数运行容器的行为将创建卷作为启动容器过程的一部分。请注意，装载卷时，映像的装载点文件夹中定义的任何内容都将添加到卷中。但是，如果一个文件存在于映像的装载点文件夹中，它也存在于主机的装载点中，并且主机文件的内容将最终出现在该文件中。使用这个 Dockerfile 中的映像，如下所示:
```
# VOLUME instruction Dockerfile for Docker Quick Start
FROM alpine
RUN mkdir /myvol
RUN echo "Data from image" > /myvol/both-places.txt
CMD ["sh"]
```
注意`Data from image`线。现在，使用一个预先创建的卷，该卷包含一个名为`both-places.txt`的匹配文件，但该文件中有`Data from volume`的内容，我们将基于该映像运行一个容器。事情是这样的:
![](img/07d94005-aefb-4b4a-ba28-a0b452e64ca2.png)
如您所见，即使 Dockerfile 创建了一个包含`Data from image`内容的文件，当我们从该映像运行一个容器并装载了一个包含相同文件的卷时，该卷(`Data from volume`)中的内容占优势，并且是在运行的容器中找到的内容。
请记住，您不能通过 Dockerfile 中的`VOLUME`指令装载预先创建的卷。不存在名为 volume 的 Dockerfile `VOLUME`指令。其原因是 Dockerfile 无法指定装载卷的主机位置。出于几个原因，允许这样做是不好的。首先，由于 Dockerfile 创建了一个映像，从该映像运行的每个容器都将尝试装载到相同的主机位置。很快就会变得很糟糕。其次，由于容器映像可以在不同的主机操作系统上运行，因此一个操作系统的主机路径定义很可能在另一个操作系统上不起作用。再次，糟糕。第三，定义卷主机路径会打开各种安全漏洞。坏，坏，坏！正因为如此，从带有带有`VOLUME`指令的 Dockerfile 的映像构建中运行一个容器将总是在主机上创建一个新的、唯一命名的装载点。在 Dockerfile 中使用`VOLUME`指令有一些有限的用例，例如当一个容器将运行一个应用，该应用将总是需要读取或写入文件系统中特定位置的数据，但不应该是联合文件系统的一部分。
还可以创建主机上文件与容器中文件的一对一映射。为此，向容器运行命令添加一个`-v`参数。您需要提供要从主机共享的文件的路径和文件名，以及容器中文件的完全限定路径。容器运行命令可能如下所示:
```
# Map a single file from the host to a container
echo "important data" > /tmp/data-file.txt
docker container run --rm -d \
 -v /tmp/data-file.txt:/myvol/data-file.txt \
 --name vol-demo \
 volume-demo2:1.0 tail -f /dev/null
# Prove it
docker exec vol-demo cat /myvol/data-file.txt
```
以下是可能的情况:
![](img/032361dd-e5c7-413f-9808-95f9a6022f8c.png)
有几种不同的方法可以在容器运行命令中定义卷。为了说明这一点，请看下面的运行命令，每个命令将完成相同的事情:
```
# Using --mount with source and target
docker container run --rm -d \
 --mount source=my-volume,target=/myvol,readonly \
 --name vol-demo1 \
 volume-demo:latest tail -f /dev/null
# Using --mount with source and destination
docker container run --rm -d \
 --mount source=my-volume,destination=/myvol,readonly \
 --name vol-demo2 \
 volume-demo:latest tail -f /dev/null
# Using -v 
docker container run --rm -d \
 -v my-volume:/myvol:ro \
 --name vol-demo3 \
 volume-demo:latest tail -f /dev/null
```
前面的三个容器运行命令将创建一个以只读模式装载了相同卷的容器。这可以通过以下命令来验证:
```
# Check which container have mounted a volume by name
docker ps -a --filter volume=in-use-volume
```
![](img/7ad05dcb-f85f-488e-947d-c83d390a8360.png)
# 参考
查看这些链接了解更多信息:
*   Docker `volume create`参考:[https://docs . Docker . com/engine/reference/command line/volume _ create/](https://docs.docker.com/engine/reference/commandline/volume_create/)
*   Docker 存储参考文件:[https://docs.docker.com/storage/](https://docs.docker.com/storage/)
# 删除卷
我们已经看到并使用了卷列表命令，`volume ls`，inspect 命令，`volume inspect`，我想你应该很好的掌握了这些命令的作用。卷管理组中还有另外两个命令，都用于卷删除。第一个是`volume rm`命令，您可以使用该命令按名称删除一个或多个卷。然后，有`volume prune`命令；使用清理命令，您可以删除所有未使用的卷。使用此命令时要格外小心。以下是删除和清理命令的语法:
```
# Remove volumes command syntax
Usage: docker volume rm [OPTIONS] VOLUME [VOLUME...]
# Prune volumes command syntax
Usage: docker volume prune [OPTIONS]
```
以下是使用删除和清理命令的一些示例:
![](img/21aedc2c-bc31-4731-a064-d4ca50ece52e.png)
由于`in-use-volume`卷安装在`vol-demo`容器中，因此它不会被删除命令删除。您可以使用卷列表命令上的过滤器来查看哪些卷与容器不相关联，因此可以使用清理命令删除这些卷。以下是过滤后的 ls 命令:
```
# Using a filter on the volume ls command
docker volume ls --filter dangling=true
```
# 参考
有关更多信息，请查看以下链接:
*   卷删除命令的 Docker 的 Wiki 文档:[https://docs . docker . com/engine/reference/command line/volume _ RM/](https://docs.docker.com/engine/reference/commandline/volume_rm/)
*   卷清理命令的 Docker 的 Wiki 文档:[https://docs . docker . com/engine/reference/command line/volume _ prune](https://docs.docker.com/engine/reference/commandline/volume_prune)/
*   关于修剪 Docker 对象的信息:[https://docs.docker.com/config/pruning/](https://docs.docker.com/config/pruning/)
# 使用数据量容器在容器之间共享数据
Docker 卷还有另一个功能，允许您与其他容器共享一个 Docker 容器中装载的卷。它被称为**数据量容器**。使用数据量容器基本上是一个两步的过程。在第一步中，您运行一个创建或装载 Docker 卷(或两者都有)的容器，在第二步中，您在运行其他容器时使用特殊的卷参数`--volumes-from`，将它们配置为装载第一个容器中装载的所有卷。这里有一个例子:
```
# Step 1
docker container run \
 --rm -d \
 -v data-vol-01:/data/vol1 -v data-vol-02:/data/vol2 \
 --name data-container \
 vol-demo2:1.0 tail -f /dev/null
# Step 2
docker container run \
 --rm -d \
 --volumes-from data-container \
 --name app-container \
 vol-demo2:1.0 tail -f /dev/null
# Prove it
docker container exec app-container ls -l /data
# Prove it more
docker container inspect -f '{{ range .Mounts }}{{ .Name }} {{ end }}' app-container
```
以下是执行时的情况:
![](img/9da94735-93f4-4976-bc7b-1451b0ebf11a.png)
在本例中，第一个容器运行命令是创建卷，但是它们也可以很容易地用早期的容器运行命令或者从`volume create`命令预先创建。
# 参考
这里有一篇关于数据卷容器的优秀文章，包括使用它们进行数据备份和恢复:[https://www . tricksofthetrades . net/2016/03/14/docker-data-volumes/](https://www.tricksofthetrades.net/2016/03/14/docker-data-volumes/)。
# 摘要
在这一章中，我们深入探讨了 Docker 卷。我们了解了 Docker 卷实际上是什么，以及创建它们的几种方法。我们了解了使用`volume create`命令、容器运行命令和 Dockerfile `VOLUME`指令创建 Docker 卷之间的区别。我们研究了几种删除卷的方法，以及如何使用数据容器与其他容器共享卷。总而言之，你现在应该对你的 Docker 卷技能很有信心。到目前为止，我们已经建立了强大的 Docker 知识基础。
在[第 5 章](5.html)*DockerSwarm*中，我们将通过学习 DockerSwarm 来增加这个基础。这是事情真正开始变得令人兴奋的地方。如果你准备好了解更多，请翻开新的一页！